>3	FunctionDef	Linux_CopyTree (const char * src , const char * dst)
>4	ParameterList	const char * src , const char * dst
>5	Parameter	 
>6	Identifier	dst
>7	ParameterType	const char *
>8	Parameter	 
>9	Identifier	src
>10	ParameterType	const char *
>11	ReturnType	static void
>12	CompoundStatement	 
>13	IfStatement	if ( S_ISDIR ( statbuf . st_mode ) )
>14	ElseStatement	else
>15	IfStatement	if ( S_ISREG ( statbuf . st_mode ) )
>16	ElseStatement	else
>17	CompoundStatement	 
>18	ExpressionStatement	 
>19	CallExpression	fprintf ( stderr , \"WARNING
>20	ArgumentList	stderr
>21	Argument	dst
>22	Identifier	dst
>23	Argument	src
>24	Identifier	src
>25	Argument	\"WARNING
>26	PrimaryExpression	\"WARNING
>27	Argument	stderr
>28	Identifier	stderr
>29	Callee	fprintf
>30	Identifier	fprintf
>31	CompoundStatement	 
>32	IfStatement	if ( failed )
>33	ExpressionStatement	 
>34	CallExpression	unlink ( dst )
>35	ArgumentList	dst
>36	Argument	dst
>37	Identifier	dst
>38	Callee	unlink
>39	Identifier	unlink
>40	Condition	 
>41	Identifier	failed
>42	ExpressionStatement	 
>43	CallExpression	close ( in )
>44	ArgumentList	in
>45	Argument	in
>46	Identifier	in
>47	Callee	close
>48	Identifier	close
>49	IfStatement	if ( close ( out ) < 0 )
>50	ExpressionStatement	 
>51	AssignmentExpr	failed = true
>52	Identifier	true
>53	Identifier	failed
>54	Condition	 
>55	RelationalExpression	close ( out ) < 0
>56	PrimaryExpression	0
>57	CallExpression	close ( out )
>58	ArgumentList	out
>59	Argument	out
>60	Identifier	out
>61	Callee	close
>62	Identifier	close
>63	ExpressionStatement	 
>64	Identifier	buf
>65	Statement	 
>66	Statement	 
>67	Statement	 
>68	IfStatement	if ( br < 0 )
>69	ExpressionStatement	 
>70	AssignmentExpr	failed = true
>71	Identifier	true
>72	Identifier	failed
>73	Condition	 
>74	RelationalExpression	br < 0
>75	PrimaryExpression	0
>76	Identifier	br
>77	WhileStatement	while ( ( ! failed ) && ( ( br = read ( in , buf , buflen ) ) > 0 ) )
>78	ExpressionStatement	 
>79	AssignmentExpr	failed = ( write ( out , buf , br ) != br )
>80	EqualityExpression	write ( out , buf , br ) != br
>81	Identifier	br
>82	CallExpression	write ( out , buf , br )
>83	ArgumentList	out
>84	Argument	br
>85	Identifier	br
>86	Argument	buf
>87	Identifier	buf
>88	Argument	out
>89	Identifier	out
>90	Callee	write
>91	Identifier	write
>92	Identifier	failed
>93	Condition	 
>94	AndExpression	( ! failed ) && ( ( br = read ( in , buf , buflen ) ) > 0 )
>95	RelationalExpression	( br = read ( in , buf , buflen ) ) > 0
>96	PrimaryExpression	0
>97	AssignmentExpr	br = read ( in , buf , buflen )
>98	CallExpression	read ( in , buf , buflen )
>99	ArgumentList	in
>100	Argument	buflen
>101	Identifier	buflen
>102	Argument	buf
>103	Identifier	buf
>104	Argument	in
>105	Identifier	in
>106	Callee	read
>107	Identifier	read
>108	Identifier	br
>109	UnaryOp	! failed
>110	Identifier	failed
>111	UnaryOperator	!
>112	IdentifierDeclStatement	 
>113	IdentifierDecl	br = 0
>114	AssignmentExpr	br = 0
>115	PrimaryExpression	0
>116	Identifier	br
>117	Identifier	br
>118	IdentifierDeclType	ssize_t
>119	IdentifierDeclStatement	 
>120	IdentifierDecl	failed = false
>121	AssignmentExpr	failed = false
>122	Identifier	false
>123	Identifier	false
>124	Identifier	failed
>125	IdentifierDeclType	bool
>126	IdentifierDeclStatement	 
>127	IdentifierDecl	* buf = new char [ buflen ]
>128	AssignmentExpr	* buf = new char [ buflen ]
>129	Identifier	buflen
>130	Identifier	buflen
>131	Identifier	buf
>132	IdentifierDeclType	char *
>133	IdentifierDeclStatement	 
>134	IdentifierDecl	buflen = 256 * 1024
>135	AssignmentExpr	buflen = 256 * 1024
>136	MultiplicativeExpression	256 * 1024
>137	PrimaryExpression	1024
>138	PrimaryExpression	256
>139	Identifier	buflen
>140	Identifier	buflen
>141	IdentifierDeclType	const size_t
>142	IfStatement	if ( out == - 1 )
>143	CompoundStatement	 
>144	ReturnStatement	 
>145	ExpressionStatement	 
>146	CallExpression	close ( in )
>147	ArgumentList	in
>148	Argument	in
>149	Identifier	in
>150	Callee	close
>151	Identifier	close
>152	Condition	 
>153	EqualityExpression	out == - 1
>154	UnaryOp	- 1
>155	PrimaryExpression	1
>156	UnaryOperator	-
>157	Identifier	out
>158	IdentifierDeclStatement	 
>159	IdentifierDecl	out = open ( dst , O_WRONLY | O_CREAT | O_EXCL , 0600 )
>160	AssignmentExpr	out = open ( dst , O_WRONLY | O_CREAT | O_EXCL , 0600 )
>161	CallExpression	open ( dst , O_WRONLY | O_CREAT | O_EXCL , 0600 )
>162	ArgumentList	dst
>163	Argument	0600
>164	PrimaryExpression	0600
>165	Argument	O_WRONLY | O_CREAT | O_EXCL
>166	InclusiveOrExpression	O_WRONLY | O_CREAT | O_EXCL
>167	InclusiveOrExpression	O_CREAT | O_EXCL
>168	Identifier	O_EXCL
>169	Identifier	O_CREAT
>170	Identifier	O_WRONLY
>171	Argument	dst
>172	Identifier	dst
>173	Callee	open
>174	Identifier	open
>175	Identifier	out
>176	Identifier	out
>177	IdentifierDeclType	const int
>178	IfStatement	if ( in == - 1 )
>179	ReturnStatement	 
>180	Condition	 
>181	EqualityExpression	in == - 1
>182	UnaryOp	- 1
>183	PrimaryExpression	1
>184	UnaryOperator	-
>185	Identifier	in
>186	IdentifierDeclStatement	 
>187	IdentifierDecl	in = open ( src , O_RDONLY )
>188	AssignmentExpr	in = open ( src , O_RDONLY )
>189	CallExpression	open ( src , O_RDONLY )
>190	ArgumentList	src
>191	Argument	O_RDONLY
>192	Identifier	O_RDONLY
>193	Argument	src
>194	Identifier	src
>195	Callee	open
>196	Identifier	open
>197	Identifier	in
>198	Identifier	in
>199	IdentifierDeclType	const int
>200	Condition	 
>201	CallExpression	S_ISREG ( statbuf . st_mode )
>202	ArgumentList	statbuf . st_mode
>203	Argument	statbuf . st_mode
>204	MemberAccess	statbuf . st_mode
>205	Identifier	st_mode
>206	Identifier	statbuf
>207	Callee	S_ISREG
>208	Identifier	S_ISREG
>209	CompoundStatement	 
>210	ExpressionStatement	 
>211	CallExpression	closedir ( dirp )
>212	ArgumentList	dirp
>213	Argument	dirp
>214	Identifier	dirp
>215	Callee	closedir
>216	Identifier	closedir
>217	WhileStatement	while ( ( dent = readdir ( dirp ) ) != NULL )
>218	CompoundStatement	 
>219	ExpressionStatement	 
>220	Identifier	subsrc
>221	Statement	 
>222	Statement	 
>223	Statement	 
>224	ExpressionStatement	 
>225	Identifier	subdst
>226	Statement	 
>227	Statement	 
>228	Statement	 
>229	ExpressionStatement	 
>230	CallExpression	Linux_CopyTree ( subsrc , subdst )
>231	ArgumentList	subsrc
>232	Argument	subdst
>233	Identifier	subdst
>234	Argument	subsrc
>235	Identifier	subsrc
>236	Callee	Linux_CopyTree
>237	Identifier	Linux_CopyTree
>238	ExpressionStatement	 
>239	CallExpression	snprintf ( subdst , dstlen , \"%s/%s\" , dst , dent -> d_name )
>240	ArgumentList	subdst
>241	Argument	dent -> d_name
>242	PtrMemberAccess	dent -> d_name
>243	Identifier	d_name
>244	Identifier	dent
>245	Argument	dst
>246	Identifier	dst
>247	Argument	\"%s/%s\"
>248	PrimaryExpression	\"%s/%s\"
>249	Argument	dstlen
>250	Identifier	dstlen
>251	Argument	subdst
>252	Identifier	subdst
>253	Callee	snprintf
>254	Identifier	snprintf
>255	IdentifierDeclStatement	 
>256	IdentifierDecl	* subdst = new char [ dstlen ]
>257	AssignmentExpr	* subdst = new char [ dstlen ]
>258	Identifier	dstlen
>259	Identifier	dstlen
>260	Identifier	subdst
>261	IdentifierDeclType	char *
>262	IdentifierDeclStatement	 
>263	IdentifierDecl	dstlen = strlen ( dst ) + strlen ( dent -> d_name ) + 2
>264	AssignmentExpr	dstlen = strlen ( dst ) + strlen ( dent -> d_name ) + 2
>265	AdditiveExpression	strlen ( dst ) + strlen ( dent -> d_name ) + 2
>266	AdditiveExpression	strlen ( dent -> d_name ) + 2
>267	PrimaryExpression	2
>268	CallExpression	strlen ( dent -> d_name )
>269	ArgumentList	dent -> d_name
>270	Argument	dent -> d_name
>271	PtrMemberAccess	dent -> d_name
>272	Identifier	d_name
>273	Identifier	dent
>274	Callee	strlen
>275	Identifier	strlen
>276	CallExpression	strlen ( dst )
>277	ArgumentList	dst
>278	Argument	dst
>279	Identifier	dst
>280	Callee	strlen
>281	Identifier	strlen
>282	Identifier	dstlen
>283	Identifier	dstlen
>284	IdentifierDeclType	const size_t
>285	ExpressionStatement	 
>286	CallExpression	snprintf ( subsrc , srclen , \"%s/%s\" , src , dent -> d_name )
>287	ArgumentList	subsrc
>288	Argument	dent -> d_name
>289	PtrMemberAccess	dent -> d_name
>290	Identifier	d_name
>291	Identifier	dent
>292	Argument	src
>293	Identifier	src
>294	Argument	\"%s/%s\"
>295	PrimaryExpression	\"%s/%s\"
>296	Argument	srclen
>297	Identifier	srclen
>298	Argument	subsrc
>299	Identifier	subsrc
>300	Callee	snprintf
>301	Identifier	snprintf
>302	IdentifierDeclStatement	 
>303	IdentifierDecl	* subsrc = new char [ srclen ]
>304	AssignmentExpr	* subsrc = new char [ srclen ]
>305	Identifier	srclen
>306	Identifier	srclen
>307	Identifier	subsrc
>308	IdentifierDeclType	char *
>309	IdentifierDeclStatement	 
>310	IdentifierDecl	srclen = strlen ( src ) + strlen ( dent -> d_name ) + 2
>311	AssignmentExpr	srclen = strlen ( src ) + strlen ( dent -> d_name ) + 2
>312	AdditiveExpression	strlen ( src ) + strlen ( dent -> d_name ) + 2
>313	AdditiveExpression	strlen ( dent -> d_name ) + 2
>314	PrimaryExpression	2
>315	CallExpression	strlen ( dent -> d_name )
>316	ArgumentList	dent -> d_name
>317	Argument	dent -> d_name
>318	PtrMemberAccess	dent -> d_name
>319	Identifier	d_name
>320	Identifier	dent
>321	Callee	strlen
>322	Identifier	strlen
>323	CallExpression	strlen ( src )
>324	ArgumentList	src
>325	Argument	src
>326	Identifier	src
>327	Callee	strlen
>328	Identifier	strlen
>329	Identifier	srclen
>330	Identifier	srclen
>331	IdentifierDeclType	const size_t
>332	IfStatement	if ( ( strcmp ( dent -> d_name , \".\" ) == 0 ) || ( strcmp ( dent -> d_name , \"..\" ) == 0 ) )
>333	ContinueStatement	 
>334	Condition	 
>335	OrExpression	( strcmp ( dent -> d_name , \".\" ) == 0 ) || ( strcmp ( dent -> d_name , \"..\" ) == 0 )
>336	EqualityExpression	strcmp ( dent -> d_name , \"..\" ) == 0
>337	PrimaryExpression	0
>338	CallExpression	strcmp ( dent -> d_name , \"..\" )
>339	ArgumentList	dent -> d_name
>340	Argument	\"..\"
>341	PrimaryExpression	\"..\"
>342	Argument	dent -> d_name
>343	PtrMemberAccess	dent -> d_name
>344	Identifier	d_name
>345	Identifier	dent
>346	Callee	strcmp
>347	Identifier	strcmp
>348	EqualityExpression	strcmp ( dent -> d_name , \".\" ) == 0
>349	PrimaryExpression	0
>350	CallExpression	strcmp ( dent -> d_name , \".\" )
>351	ArgumentList	dent -> d_name
>352	Argument	\".\"
>353	PrimaryExpression	\".\"
>354	Argument	dent -> d_name
>355	PtrMemberAccess	dent -> d_name
>356	Identifier	d_name
>357	Identifier	dent
>358	Callee	strcmp
>359	Identifier	strcmp
>360	Condition	 
>361	EqualityExpression	( dent = readdir ( dirp ) ) != NULL
>362	Identifier	NULL
>363	AssignmentExpr	dent = readdir ( dirp )
>364	CallExpression	readdir ( dirp )
>365	ArgumentList	dirp
>366	Argument	dirp
>367	Identifier	dirp
>368	Callee	readdir
>369	Identifier	readdir
>370	Identifier	dent
>371	IdentifierDeclStatement	 
>372	IdentifierDecl	* dent
>373	Identifier	dent
>374	IdentifierDeclType	struct dirent *
>375	IfStatement	if ( dirp == NULL )
>376	ReturnStatement	 
>377	Condition	 
>378	EqualityExpression	dirp == NULL
>379	Identifier	NULL
>380	Identifier	dirp
>381	IdentifierDeclStatement	 
>382	IdentifierDecl	* dirp = opendir ( src )
>383	AssignmentExpr	* dirp = opendir ( src )
>384	CallExpression	opendir ( src )
>385	ArgumentList	src
>386	Argument	src
>387	Identifier	src
>388	Callee	opendir
>389	Identifier	opendir
>390	Identifier	dirp
>391	Identifier	dirp
>392	IdentifierDeclType	DIR *
>393	ExpressionStatement	 
>394	CallExpression	createDir ( dst )
>395	ArgumentList	dst
>396	Argument	dst
>397	Identifier	dst
>398	Callee	createDir
>399	Identifier	createDir
>400	Condition	 
>401	CallExpression	S_ISDIR ( statbuf . st_mode )
>402	ArgumentList	statbuf . st_mode
>403	Argument	statbuf . st_mode
>404	MemberAccess	statbuf . st_mode
>405	Identifier	st_mode
>406	Identifier	statbuf
>407	Callee	S_ISDIR
>408	Identifier	S_ISDIR
>409	IfStatement	if ( stat ( src , & statbuf ) == - 1 )
>410	ReturnStatement	 
>411	Condition	 
>412	EqualityExpression	stat ( src , & statbuf ) == - 1
>413	UnaryOp	- 1
>414	PrimaryExpression	1
>415	UnaryOperator	-
>416	CallExpression	stat ( src , & statbuf )
>417	ArgumentList	src
>418	Argument	& statbuf
>419	UnaryOp	& statbuf
>420	Identifier	statbuf
>421	UnaryOperator	&
>422	Argument	src
>423	Identifier	src
>424	Callee	stat
>425	Identifier	stat
>426	IdentifierDeclStatement	 
>427	IdentifierDecl	statbuf
>428	Identifier	statbuf
>429	IdentifierDeclType	struct stat
>489	FunctionDef	DSQ 
>490	ParameterList	const std 
>491	Parameter	 
>492	Identifier	extraDataDir
>493	ParameterType	const std 
>494	Parameter	 
>495	Identifier	fileSystem
>496	ParameterType	const std 
>497	CompoundStatement	 
>498	ForStatement	for ( int i = 0 ; i < 16 ; i ++ )
>499	ExpressionStatement	 
>500	AssignmentExpr	firstElementOnLayer [ i ] = 0
>501	PrimaryExpression	0
>502	ArrayIndexing	firstElementOnLayer [ i ]
>503	Identifier	i
>504	Identifier	firstElementOnLayer
>505	IncDecOp	 
>506	IncDec	++
>507	Identifier	i
>508	Condition	 
>509	RelationalExpression	i < 16
>510	PrimaryExpression	16
>511	Identifier	i
>512	ForInit	 
>513	IdentifierDeclStatement	int i = 0 ;
>514	IdentifierDecl	i = 0
>515	AssignmentExpr	i = 0
>516	PrimaryExpression	0
>517	Identifier	i
>518	Identifier	i
>519	IdentifierDeclType	int
>520	ExpressionStatement	 
>521	AssignmentExpr	cursor = cursorGlow = 0
>522	AssignmentExpr	cursorGlow = 0
>523	PrimaryExpression	0
>524	Identifier	cursorGlow
>525	Identifier	cursor
>526	ExpressionStatement	 
>527	CallExpression	avgFPS . resize ( dsq -> user . video . fpsSmoothing )
>528	ArgumentList	dsq -> user . video . fpsSmoothing
>529	Argument	dsq -> user . video . fpsSmoothing
>530	MemberAccess	dsq -> user . video . fpsSmoothing
>531	Identifier	fpsSmoothing
>532	MemberAccess	dsq -> user . video
>533	Identifier	video
>534	PtrMemberAccess	dsq -> user
>535	Identifier	user
>536	Identifier	dsq
>537	Callee	avgFPS . resize
>538	MemberAccess	avgFPS . resize
>539	Identifier	resize
>540	Identifier	avgFPS
>541	ExpressionStatement	 
>542	AssignmentExpr	shakeCameraTimer = shakeCameraMag = 0
>543	AssignmentExpr	shakeCameraMag = 0
>544	PrimaryExpression	0
>545	Identifier	shakeCameraMag
>546	Identifier	shakeCameraTimer
>547	ExpressionStatement	 
>548	AssignmentExpr	sortEnabled = false
>549	Identifier	false
>550	Identifier	sortEnabled
>551	ExpressionStatement	 
>552	CallExpression	entities . resize ( 64 , 0 )
>553	ArgumentList	64
>554	Argument	0
>555	PrimaryExpression	0
>556	Argument	64
>557	PrimaryExpression	64
>558	Callee	entities . resize
>559	MemberAccess	entities . resize
>560	Identifier	resize
>561	Identifier	entities
>562	ExpressionStatement	 
>563	CallExpression	renderObjectLayers . resize ( LR_MAX )
>564	ArgumentList	LR_MAX
>565	Argument	LR_MAX
>566	Identifier	LR_MAX
>567	Callee	renderObjectLayers . resize
>568	MemberAccess	renderObjectLayers . resize
>569	Identifier	resize
>570	Identifier	renderObjectLayers
>571	ExpressionStatement	 
>572	AssignmentExpr	afterEffectManagerLayer = LR_AFTER_EFFECTS
>573	Identifier	LR_AFTER_EFFECTS
>574	Identifier	afterEffectManagerLayer
>575	ExpressionStatement	 
>576	AssignmentExpr	saveSlotMode = SSM_NONE
>577	Identifier	SSM_NONE
>578	Identifier	saveSlotMode
>579	ExpressionStatement	 
>580	AssignmentExpr	languagePack = \"english\"
>581	PrimaryExpression	\"english\"
>582	Identifier	languagePack
>583	ExpressionStatement	 
>584	AssignmentExpr	cmDebug = 0
>585	PrimaryExpression	0
>586	Identifier	cmDebug
>587	ExpressionStatement	 
>588	AssignmentExpr	console = 0
>589	PrimaryExpression	0
>590	Identifier	console
>591	ExpressionStatement	 
>592	AssignmentExpr	achievement_box = 0
>593	PrimaryExpression	0
>594	Identifier	achievement_box
>595	ExpressionStatement	 
>596	AssignmentExpr	achievement_text = 0
>597	PrimaryExpression	0
>598	Identifier	achievement_text
>599	ExpressionStatement	 
>600	AssignmentExpr	arialFontData = 0
>601	PrimaryExpression	0
>602	Identifier	arialFontData
>603	ExpressionStatement	 
>604	AssignmentExpr	recentSaveSlot = - 1
>605	UnaryOp	- 1
>606	PrimaryExpression	1
>607	UnaryOperator	-
>608	Identifier	recentSaveSlot
>609	ExpressionStatement	 
>610	AssignmentExpr	overlay = 0
>611	PrimaryExpression	0
>612	Identifier	overlay
>613	ExpressionStatement	 
>614	AssignmentExpr	inputMode = INPUT_MOUSE
>615	Identifier	INPUT_MOUSE
>616	Identifier	inputMode
>617	ExpressionStatement	 
>618	AssignmentExpr	blackout = 0
>619	PrimaryExpression	0
>620	Identifier	blackout
>621	ExpressionStatement	 
>622	AssignmentExpr	modSelectorScr = 0
>623	PrimaryExpression	0
>624	Identifier	modSelectorScr
>625	ExpressionStatement	 
>626	AssignmentExpr	menuSelectDelay = 0
>627	PrimaryExpression	0
>628	Identifier	menuSelectDelay
>629	ExpressionStatement	 
>630	AssignmentExpr	subbox = 0
>631	PrimaryExpression	0
>632	Identifier	subbox
>633	ExpressionStatement	 
>634	AssignmentExpr	subtext = 0
>635	PrimaryExpression	0
>636	Identifier	subtext
>637	ExpressionStatement	 
>638	AssignmentExpr	inModSelector = false
>639	Identifier	false
>640	Identifier	inModSelector
>641	ExpressionStatement	 
>642	AssignmentExpr	saveSlotPageCount = 0
>643	PrimaryExpression	0
>644	Identifier	saveSlotPageCount
>645	ExpressionStatement	 
>646	AssignmentExpr	noEffectTimer = 0
>647	PrimaryExpression	0
>648	Identifier	noEffectTimer
>649	ExpressionStatement	 
>650	AssignmentExpr	disableMiniMapOnNoInput = true
>651	Identifier	true
>652	Identifier	disableMiniMapOnNoInput
>653	ExpressionStatement	 
>654	AssignmentExpr	shotBank2 = \"\"
>655	PrimaryExpression	\"\"
>656	Identifier	shotBank2
>657	ExpressionStatement	 
>658	AssignmentExpr	shotBank1 = \"data/shots/\"
>659	PrimaryExpression	\"data/shots/\"
>660	Identifier	shotBank1
>661	ExpressionStatement	 
>662	AssignmentExpr	particleBank2 = \"\"
>663	PrimaryExpression	\"\"
>664	Identifier	particleBank2
>665	ExpressionStatement	 
>666	AssignmentExpr	particleBank1 = \"data/particles/\"
>667	PrimaryExpression	\"data/particles/\"
>668	Identifier	particleBank1
>669	ExpressionStatement	 
>670	AssignmentExpr	watchForQuit = false
>671	Identifier	false
>672	Identifier	watchForQuit
>673	ExpressionStatement	 
>674	AssignmentExpr	watchQuitFlag = false
>675	Identifier	false
>676	Identifier	watchQuitFlag
>677	ExpressionStatement	 
>678	AssignmentExpr	difficulty = DIFF_NORMAL
>679	Identifier	DIFF_NORMAL
>680	Identifier	difficulty
>681	ExpressionStatement	 
>682	AssignmentExpr	bar_left = bar_right = bar_up = bar_down = barFade_left = barFade_right = 0
>683	AssignmentExpr	bar_right = bar_up = bar_down = barFade_left = barFade_right = 0
>684	AssignmentExpr	bar_up = bar_down = barFade_left = barFade_right = 0
>685	AssignmentExpr	bar_down = barFade_left = barFade_right = 0
>686	AssignmentExpr	barFade_left = barFade_right = 0
>687	AssignmentExpr	barFade_right = 0
>688	PrimaryExpression	0
>689	Identifier	barFade_right
>690	Identifier	barFade_left
>691	Identifier	bar_down
>692	Identifier	bar_up
>693	Identifier	bar_right
>694	Identifier	bar_left
>695	ExpressionStatement	 
>696	AssignmentExpr	almb = armb = 0
>697	AssignmentExpr	armb = 0
>698	PrimaryExpression	0
>699	Identifier	armb
>700	Identifier	almb
>701	ExpressionStatement	 
>702	AssignmentExpr	skippingCutscene = false
>703	Identifier	false
>704	Identifier	skippingCutscene
>705	ExpressionStatement	 
>706	AssignmentExpr	_canSkipCutscene = false
>707	Identifier	false
>708	Identifier	_canSkipCutscene
>709	ExpressionStatement	 
>710	AssignmentExpr	inCutscene = false
>711	Identifier	false
>712	Identifier	inCutscene
>713	ExpressionStatement	 
>714	AssignmentExpr	cutscenePaused = false
>715	Identifier	false
>716	Identifier	cutscenePaused
>717	ExpressionStatement	 
>718	AssignmentExpr	doScreenTrans = false
>719	Identifier	false
>720	Identifier	doScreenTrans
>721	ExpressionStatement	 
>722	AssignmentExpr	cutscene_text2 = 0
>723	PrimaryExpression	0
>724	Identifier	cutscene_text2
>725	ExpressionStatement	 
>726	AssignmentExpr	cutscene_text = 0
>727	PrimaryExpression	0
>728	Identifier	cutscene_text
>729	ExpressionStatement	 
>730	AssignmentExpr	cutscene_bg = 0
>731	PrimaryExpression	0
>732	Identifier	cutscene_bg
>733	ExpressionStatement	 
>734	AssignmentExpr	dsq = this
>735	Identifier	this
>736	Identifier	dsq
>810	FunctionDef	DSQ 
>811	ParameterList	 
>812	CompoundStatement	 
>813	ExpressionStatement	 
>814	AssignmentExpr	dsq = 0
>815	PrimaryExpression	0
>816	Identifier	dsq
>821	FunctionDef	DSQ 
>822	ParameterList	 
>823	ReturnType	void
>824	CompoundStatement	 
>825	IfStatement	if ( getAltState ( ) )
>826	CompoundStatement	 
>827	IfStatement	if ( ! core -> isNested ( ) )
>828	CompoundStatement	 
>829	IfStatement	if ( _fullscreen )
>830	CompoundStatement	 
>831	ExpressionStatement	 
>832	CallExpression	core -> toggleScreenMode ( false )
>833	ArgumentList	false
>834	Argument	false
>835	Identifier	false
>836	Callee	core -> toggleScreenMode
>837	PtrMemberAccess	core -> toggleScreenMode
>838	Identifier	toggleScreenMode
>839	Identifier	core
>840	Condition	 
>841	Identifier	_fullscreen
>842	Condition	 
>843	UnaryOp	! core -> isNested ( )
>844	CallExpression	core -> isNested ( )
>845	ArgumentList	 
>846	Callee	core -> isNested
>847	PtrMemberAccess	core -> isNested
>848	Identifier	isNested
>849	Identifier	core
>850	UnaryOperator	!
>851	Condition	 
>852	CallExpression	getAltState ( )
>853	ArgumentList	 
>854	Callee	getAltState
>855	Identifier	getAltState
>865	FunctionDef	DSQ 
>866	ParameterList	 
>867	ReturnType	void
>868	CompoundStatement	 
>869	ExpressionStatement	 
>870	AssignmentExpr	user . video . full = _fullscreen
>871	Identifier	_fullscreen
>872	MemberAccess	user . video . full
>873	Identifier	full
>874	MemberAccess	user . video
>875	Identifier	video
>876	Identifier	user
>877	ExpressionStatement	 
>878	CallExpression	core -> toggleScreenMode ( ! _fullscreen )
>879	ArgumentList	! _fullscreen
>880	Argument	! _fullscreen
>881	UnaryOp	! _fullscreen
>882	Identifier	_fullscreen
>883	UnaryOperator	!
>884	Callee	core -> toggleScreenMode
>885	PtrMemberAccess	core -> toggleScreenMode
>886	Identifier	toggleScreenMode
>887	Identifier	core
>896	FunctionDef	DSQ 
>897	ParameterList	 
>898	ReturnType	void
>899	CompoundStatement	 
>900	CompoundStatement	 
>901	IfStatement	if ( getAltState ( ) )
>902	CompoundStatement	 
>903	ExpressionStatement	 
>904	CallExpression	toggleFullscreen ( )
>905	ArgumentList	 
>906	Callee	toggleFullscreen
>907	Identifier	toggleFullscreen
>908	Condition	 
>909	CallExpression	getAltState ( )
>910	ArgumentList	 
>911	Callee	getAltState
>912	Identifier	getAltState
>917	FunctionDef	DSQ 
>918	ParameterList	 
>919	ReturnType	void
>920	CompoundStatement	 
>921	ExpressionStatement	 
>922	CallExpression	SDL_ShowCursor ( SDL_DISABLE )
>923	ArgumentList	SDL_DISABLE
>924	Argument	SDL_DISABLE
>925	Identifier	SDL_DISABLE
>926	Callee	SDL_ShowCursor
>927	Identifier	SDL_ShowCursor
>928	ExpressionStatement	 
>929	AssignmentExpr	setInpGrab = 0
>930	PrimaryExpression	0
>931	Identifier	setInpGrab
>932	ExpressionStatement	 
>933	CallExpression	toggleInputGrabPlat ( false )
>934	ArgumentList	false
>935	Argument	false
>936	Identifier	false
>937	Callee	toggleInputGrabPlat
>938	Identifier	toggleInputGrabPlat
>945	FunctionDef	DSQ 
>946	ParameterList	float leftMotor , float rightMotor , float time
>947	Parameter	 
>948	Identifier	time
>949	ParameterType	float
>950	Parameter	 
>951	Identifier	rightMotor
>952	ParameterType	float
>953	Parameter	 
>954	Identifier	leftMotor
>955	ParameterType	float
>956	ReturnType	void
>957	CompoundStatement	 
>958	IfStatement	if ( this -> inputMode == INPUT_JOYSTICK )
>959	ExpressionStatement	 
>960	CallExpression	core -> joystick . rumble ( leftMotor , rightMotor , time )
>961	ArgumentList	leftMotor
>962	Argument	time
>963	Identifier	time
>964	Argument	rightMotor
>965	Identifier	rightMotor
>966	Argument	leftMotor
>967	Identifier	leftMotor
>968	Callee	core -> joystick . rumble
>969	MemberAccess	core -> joystick . rumble
>970	Identifier	rumble
>971	PtrMemberAccess	core -> joystick
>972	Identifier	joystick
>973	Identifier	core
>974	Condition	 
>975	EqualityExpression	this -> inputMode == INPUT_JOYSTICK
>976	Identifier	INPUT_JOYSTICK
>977	PtrMemberAccess	this -> inputMode
>978	Identifier	inputMode
>979	Identifier	this
>993	FunctionDef	DSQ 
>994	ParameterList	 
>995	ReturnType	void
>996	CompoundStatement	 
>997	ExpressionStatement	 
>998	CallExpression	dsq -> game -> transitionToScene ( dsq -> initScene )
>999	ArgumentList	dsq -> initScene
>1000	Argument	dsq -> initScene
>1001	PtrMemberAccess	dsq -> initScene
>1002	Identifier	initScene
>1003	Identifier	dsq
>1004	Callee	dsq -> game -> transitionToScene
>1005	PtrMemberAccess	dsq -> game -> transitionToScene
>1006	Identifier	transitionToScene
>1007	PtrMemberAccess	dsq -> game
>1008	Identifier	game
>1009	Identifier	dsq
>1010	ExpressionStatement	 
>1011	AssignmentExpr	dsq -> initScene = \"NaijaCave\"
>1012	PrimaryExpression	\"NaijaCave\"
>1013	PtrMemberAccess	dsq -> initScene
>1014	Identifier	initScene
>1015	Identifier	dsq
>1016	ExpressionStatement	 
>1017	CallExpression	dsq -> game -> resetFromTitle ( )
>1018	ArgumentList	 
>1019	Callee	dsq -> game -> resetFromTitle
>1020	PtrMemberAccess	dsq -> game -> resetFromTitle
>1021	Identifier	resetFromTitle
>1022	PtrMemberAccess	dsq -> game
>1023	Identifier	game
>1024	Identifier	dsq
>1032	FunctionDef	DSQ 
>1033	ParameterList	 
>1034	ReturnType	void
>1035	CompoundStatement	 
>1036	ExpressionStatement	 
>1037	CallExpression	inFile . close ( )
>1038	ArgumentList	 
>1039	Callee	inFile . close
>1040	MemberAccess	inFile . close
>1041	Identifier	close
>1042	Identifier	inFile
>1043	WhileStatement	while ( std 
>1044	CompoundStatement	 
>1045	ExpressionStatement	 
>1046	CallExpression	elementEffects . push_back ( e )
>1047	ArgumentList	e
>1048	Argument	e
>1049	Identifier	e
>1050	Callee	elementEffects . push_back
>1051	MemberAccess	elementEffects . push_back
>1052	Identifier	push_back
>1053	Identifier	elementEffects
>1054	ExpressionStatement	 
>1055	AssignmentExpr	e . type = efxType
>1056	Identifier	efxType
>1057	MemberAccess	e . type
>1058	Identifier	type
>1059	Identifier	e
>1060	IfStatement	if ( type == \"EFX_SEGS\" )
>1061	ElseStatement	else
>1062	IfStatement	if ( type == \"EFX_WAVY\" )
>1063	ElseStatement	else
>1064	IfStatement	if ( type == \"EFX_ALPHA\" )
>1065	CompoundStatement	 
>1066	ExpressionStatement	 
>1067	CallExpression	e . alpha . interpolateTo ( to_x , time , loop , pingPong , ease )
>1068	ArgumentList	to_x
>1069	Argument	ease
>1070	Identifier	ease
>1071	Argument	pingPong
>1072	Identifier	pingPong
>1073	Argument	loop
>1074	Identifier	loop
>1075	Argument	time
>1076	Identifier	time
>1077	Argument	to_x
>1078	Identifier	to_x
>1079	Callee	e . alpha . interpolateTo
>1080	MemberAccess	e . alpha . interpolateTo
>1081	Identifier	interpolateTo
>1082	MemberAccess	e . alpha
>1083	Identifier	alpha
>1084	Identifier	e
>1085	ExpressionStatement	 
>1086	ShiftExpression	is >> e . blendType >> e . alpha . x >> to_x >> time >> loop >> pingPong >> ease
>1087	ShiftExpression	e . blendType >> e . alpha . x >> to_x >> time >> loop >> pingPong >> ease
>1088	ShiftExpression	e . alpha . x >> to_x >> time >> loop >> pingPong >> ease
>1089	ShiftExpression	to_x >> time >> loop >> pingPong >> ease
>1090	ShiftExpression	time >> loop >> pingPong >> ease
>1091	ShiftExpression	loop >> pingPong >> ease
>1092	ShiftExpression	pingPong >> ease
>1093	Identifier	ease
>1094	Identifier	pingPong
>1095	Identifier	loop
>1096	Identifier	time
>1097	Identifier	to_x
>1098	MemberAccess	e . alpha . x
>1099	Identifier	x
>1100	MemberAccess	e . alpha
>1101	Identifier	alpha
>1102	Identifier	e
>1103	MemberAccess	e . blendType
>1104	Identifier	blendType
>1105	Identifier	e
>1106	Identifier	is
>1107	IdentifierDeclStatement	 
>1108	IdentifierDecl	ease
>1109	Identifier	ease
>1110	IdentifierDeclType	float
>1111	IdentifierDecl	pingPong
>1112	Identifier	pingPong
>1113	IdentifierDeclType	float
>1114	IdentifierDecl	loop
>1115	Identifier	loop
>1116	IdentifierDeclType	float
>1117	IdentifierDecl	time
>1118	Identifier	time
>1119	IdentifierDeclType	float
>1120	IdentifierDecl	to_x
>1121	Identifier	to_x
>1122	IdentifierDeclType	float
>1123	ExpressionStatement	 
>1124	AssignmentExpr	efxType = EFX_ALPHA
>1125	Identifier	EFX_ALPHA
>1126	Identifier	efxType
>1127	Condition	 
>1128	EqualityExpression	type == \"EFX_ALPHA\"
>1129	PrimaryExpression	\"EFX_ALPHA\"
>1130	Identifier	type
>1131	CompoundStatement	 
>1132	ExpressionStatement	 
>1133	ShiftExpression	is >> e . segsy >> e . wavy_radius >> e . wavy_flip
>1134	ShiftExpression	e . segsy >> e . wavy_radius >> e . wavy_flip
>1135	ShiftExpression	e . wavy_radius >> e . wavy_flip
>1136	MemberAccess	e . wavy_flip
>1137	Identifier	wavy_flip
>1138	Identifier	e
>1139	MemberAccess	e . wavy_radius
>1140	Identifier	wavy_radius
>1141	Identifier	e
>1142	MemberAccess	e . segsy
>1143	Identifier	segsy
>1144	Identifier	e
>1145	Identifier	is
>1146	ExpressionStatement	 
>1147	AssignmentExpr	efxType = EFX_WAVY
>1148	Identifier	EFX_WAVY
>1149	Identifier	efxType
>1150	ExpressionStatement	 
>1151	CallExpression	debugLog ( \"loading wavy\" )
>1152	ArgumentList	\"loading wavy\"
>1153	Argument	\"loading wavy\"
>1154	PrimaryExpression	\"loading wavy\"
>1155	Callee	debugLog
>1156	Identifier	debugLog
>1157	Condition	 
>1158	EqualityExpression	type == \"EFX_WAVY\"
>1159	PrimaryExpression	\"EFX_WAVY\"
>1160	Identifier	type
>1161	CompoundStatement	 
>1162	ExpressionStatement	 
>1163	ShiftExpression	is >> e . segsx >> e . segsy >> e . segs_dgox >> e . segs_dgoy >> e . segs_dgmx >> e . segs_dgmy >> \
>1164	ShiftExpression	e . segsx >> e . segsy >> e . segs_dgox >> e . segs_dgoy >> e . segs_dgmx >> e . segs_dgmy >> e . segs_\
>1165	ShiftExpression	e . segsy >> e . segs_dgox >> e . segs_dgoy >> e . segs_dgmx >> e . segs_dgmy >> e . segs_dgtm >> e \
>1166	ShiftExpression	e . segs_dgox >> e . segs_dgoy >> e . segs_dgmx >> e . segs_dgmy >> e . segs_dgtm >> e . segs_dgo
>1167	ShiftExpression	e . segs_dgoy >> e . segs_dgmx >> e . segs_dgmy >> e . segs_dgtm >> e . segs_dgo
>1168	ShiftExpression	e . segs_dgmx >> e . segs_dgmy >> e . segs_dgtm >> e . segs_dgo
>1169	ShiftExpression	e . segs_dgmy >> e . segs_dgtm >> e . segs_dgo
>1170	ShiftExpression	e . segs_dgtm >> e . segs_dgo
>1171	MemberAccess	e . segs_dgo
>1172	Identifier	segs_dgo
>1173	Identifier	e
>1174	MemberAccess	e . segs_dgtm
>1175	Identifier	segs_dgtm
>1176	Identifier	e
>1177	MemberAccess	e . segs_dgmy
>1178	Identifier	segs_dgmy
>1179	Identifier	e
>1180	MemberAccess	e . segs_dgmx
>1181	Identifier	segs_dgmx
>1182	Identifier	e
>1183	MemberAccess	e . segs_dgoy
>1184	Identifier	segs_dgoy
>1185	Identifier	e
>1186	MemberAccess	e . segs_dgox
>1187	Identifier	segs_dgox
>1188	Identifier	e
>1189	MemberAccess	e . segsy
>1190	Identifier	segsy
>1191	Identifier	e
>1192	MemberAccess	e . segsx
>1193	Identifier	segsx
>1194	Identifier	e
>1195	Identifier	is
>1196	ExpressionStatement	 
>1197	AssignmentExpr	efxType = EFX_SEGS
>1198	Identifier	EFX_SEGS
>1199	Identifier	efxType
>1200	Condition	 
>1201	EqualityExpression	type == \"EFX_SEGS\"
>1202	PrimaryExpression	\"EFX_SEGS\"
>1203	Identifier	type
>1204	ExpressionStatement	 
>1205	ShiftExpression	is >> idx >> type
>1206	ShiftExpression	idx >> type
>1207	Identifier	type
>1208	Identifier	idx
>1209	Identifier	is
>1210	IdentifierDeclStatement	 
>1211	IdentifierDecl	type
>1212	Identifier	type
>1213	IdentifierDeclType	std 
>1214	IdentifierDeclStatement	 
>1215	IdentifierDecl	idx
>1216	Identifier	idx
>1217	IdentifierDeclType	int
>1218	IdentifierDeclStatement	 
>1219	IdentifierDecl	efxType = EFX_NONE
>1220	AssignmentExpr	efxType = EFX_NONE
>1221	Identifier	EFX_NONE
>1222	Identifier	EFX_NONE
>1223	Identifier	efxType
>1224	IdentifierDeclType	int
>1225	IdentifierDeclStatement	 
>1226	IdentifierDecl	e
>1227	Identifier	e
>1228	IdentifierDeclType	ElementEffect
>1229	IdentifierDeclStatement	 
>1230	IdentifierDecl	is ( line )
>1231	Identifier	line
>1232	Identifier	is
>1233	IdentifierDeclType	std 
>1234	ExpressionStatement	 
>1235	CallExpression	debugLog ( \"Line
>1236	ArgumentList	\"Line
>1237	Argument	\"Line
>1238	AdditiveExpression	\"Line
>1239	Identifier	line
>1240	PrimaryExpression	\"Line
>1241	Callee	debugLog
>1242	Identifier	debugLog
>1243	Condition	 
>1244	CallExpression	std 
>1245	ArgumentList	inFile
>1246	Argument	line
>1247	Identifier	line
>1248	Argument	inFile
>1249	Identifier	inFile
>1250	Callee	std 
>1251	Identifier	std 
>1252	IdentifierDeclStatement	 
>1253	IdentifierDecl	line
>1254	Identifier	line
>1255	IdentifierDeclType	std 
>1256	ExpressionStatement	 
>1257	CallExpression	elementEffects . clear ( )
>1258	ArgumentList	 
>1259	Callee	elementEffects . clear
>1260	MemberAccess	elementEffects . clear
>1261	Identifier	clear
>1262	Identifier	elementEffects
>1263	IdentifierDeclStatement	 
>1264	IdentifierDecl	inFile ( fn . c_str ( ) )
>1265	CallExpression	fn . c_str ( )
>1266	ArgumentList	 
>1267	Callee	fn . c_str
>1268	MemberAccess	fn . c_str
>1269	Identifier	c_str
>1270	Identifier	fn
>1271	Identifier	inFile
>1272	IdentifierDeclType	InStream
>1273	IfStatement	if ( ! found )
>1274	ExpressionStatement	 
>1275	AssignmentExpr	fn = \"data/elementeffects.txt\"
>1276	PrimaryExpression	\"data/elementeffects.txt\"
>1277	Identifier	fn
>1278	Condition	 
>1279	UnaryOp	! found
>1280	Identifier	found
>1281	UnaryOperator	!
>1282	IfStatement	if ( dsq -> mod . isActive ( ) )
>1283	CompoundStatement	 
>1284	IfStatement	if ( exists ( fn ) )
>1285	ExpressionStatement	 
>1286	AssignmentExpr	found = true
>1287	Identifier	true
>1288	Identifier	found
>1289	Condition	 
>1290	CallExpression	exists ( fn )
>1291	ArgumentList	fn
>1292	Argument	fn
>1293	Identifier	fn
>1294	Callee	exists
>1295	Identifier	exists
>1296	ExpressionStatement	 
>1297	AssignmentExpr	fn = dsq -> mod . getPath ( ) + \"elementeffects.txt\"
>1298	AdditiveExpression	dsq -> mod . getPath ( ) + \"elementeffects.txt\"
>1299	PrimaryExpression	\"elementeffects.txt\"
>1300	CallExpression	dsq -> mod . getPath ( )
>1301	ArgumentList	 
>1302	Callee	dsq -> mod . getPath
>1303	MemberAccess	dsq -> mod . getPath
>1304	Identifier	getPath
>1305	PtrMemberAccess	dsq -> mod
>1306	Identifier	mod
>1307	Identifier	dsq
>1308	Identifier	fn
>1309	Condition	 
>1310	CallExpression	dsq -> mod . isActive ( )
>1311	ArgumentList	 
>1312	Callee	dsq -> mod . isActive
>1313	MemberAccess	dsq -> mod . isActive
>1314	Identifier	isActive
>1315	PtrMemberAccess	dsq -> mod
>1316	Identifier	mod
>1317	Identifier	dsq
>1318	IdentifierDeclStatement	 
>1319	IdentifierDecl	fn
>1320	Identifier	fn
>1321	IdentifierDeclType	std 
>1322	IdentifierDeclStatement	 
>1323	IdentifierDecl	found = false
>1324	AssignmentExpr	found = false
>1325	Identifier	false
>1326	Identifier	false
>1327	Identifier	found
>1328	IdentifierDeclType	bool
>1362	FunctionDef	DSQ 
>1363	ParameterList	int e
>1364	Parameter	 
>1365	Identifier	e
>1366	ParameterType	int
>1367	ReturnType	ElementEffect
>1368	CompoundStatement	 
>1369	ReturnStatement	 
>1370	Identifier	empty
>1371	ExpressionStatement	 
>1372	AssignmentExpr	empty . type = EFX_NONE
>1373	Identifier	EFX_NONE
>1374	MemberAccess	empty . type
>1375	Identifier	type
>1376	Identifier	empty
>1377	IdentifierDeclStatement	 
>1378	IdentifierDecl	empty
>1379	Identifier	empty
>1380	IdentifierDeclType	ElementEffect
>1381	IfStatement	if ( e < elementEffects . size ( ) && e >= 0 )
>1382	CompoundStatement	 
>1383	ReturnStatement	 
>1384	ArrayIndexing	elementEffects [ e ]
>1385	Identifier	e
>1386	Identifier	elementEffects
>1387	Condition	 
>1388	AndExpression	e < elementEffects . size ( ) && e >= 0
>1389	RelationalExpression	e >= 0
>1390	PrimaryExpression	0
>1391	Identifier	e
>1392	RelationalExpression	e < elementEffects . size ( )
>1393	CallExpression	elementEffects . size ( )
>1394	ArgumentList	 
>1395	Callee	elementEffects . size
>1396	MemberAccess	elementEffects . size
>1397	Identifier	size
>1398	Identifier	elementEffects
>1399	Identifier	e
>1411	FunctionDef	DSQ 
>1412	ParameterList	const std 
>1413	Parameter	 
>1414	Identifier	type
>1415	ParameterType	int
>1416	Parameter	 
>1417	Identifier	y
>1418	ParameterType	float
>1419	Parameter	 
>1420	Identifier	text
>1421	ParameterType	const std 
>1422	ReturnType	void
>1423	CompoundStatement	 
>1424	ExpressionStatement	 
>1425	CallExpression	getTopStateData ( ) -> addRenderObject ( t , LR_OVERLAY )
>1426	ArgumentList	t
>1427	Argument	LR_OVERLAY
>1428	Identifier	LR_OVERLAY
>1429	Argument	t
>1430	Identifier	t
>1431	Callee	getTopStateData ( ) -> addRenderObject
>1432	PtrMemberAccess	getTopStateData ( ) -> addRenderObject
>1433	Identifier	addRenderObject
>1434	CallExpression	getTopStateData ( )
>1435	ArgumentList	 
>1436	Callee	getTopStateData
>1437	Identifier	getTopStateData
>1438	ExpressionStatement	 
>1439	CallExpression	t -> offset . interpolateTo ( Vector ( 0 , - 40 ) , 2 , 0 , 0 , 1 )
>1440	ArgumentList	Vector ( 0 , - 40 )
>1441	Argument	1
>1442	PrimaryExpression	1
>1443	Argument	0
>1444	PrimaryExpression	0
>1445	Argument	0
>1446	PrimaryExpression	0
>1447	Argument	2
>1448	PrimaryExpression	2
>1449	Argument	Vector ( 0 , - 40 )
>1450	CallExpression	Vector ( 0 , - 40 )
>1451	ArgumentList	0
>1452	Argument	- 40
>1453	UnaryOp	- 40
>1454	PrimaryExpression	40
>1455	UnaryOperator	-
>1456	Argument	0
>1457	PrimaryExpression	0
>1458	Callee	Vector
>1459	Identifier	Vector
>1460	Callee	t -> offset . interpolateTo
>1461	MemberAccess	t -> offset . interpolateTo
>1462	Identifier	interpolateTo
>1463	PtrMemberAccess	t -> offset
>1464	Identifier	offset
>1465	Identifier	t
>1466	ExpressionStatement	 
>1467	CallExpression	t -> setText ( text )
>1468	ArgumentList	text
>1469	Argument	text
>1470	Identifier	text
>1471	Callee	t -> setText
>1472	PtrMemberAccess	t -> setText
>1473	Identifier	setText
>1474	Identifier	t
>1475	ExpressionStatement	 
>1476	CallExpression	t -> setDecayRate ( 1 )
>1477	ArgumentList	1
>1478	Argument	1
>1479	PrimaryExpression	1
>1480	Callee	t -> setDecayRate
>1481	PtrMemberAccess	t -> setDecayRate
>1482	Identifier	setDecayRate
>1483	Identifier	t
>1484	ExpressionStatement	 
>1485	CallExpression	t -> setLife ( time + 0.5f )
>1486	ArgumentList	time + 0.5f
>1487	Argument	time + 0.5f
>1488	AdditiveExpression	time + 0.5f
>1489	PrimaryExpression	0.5f
>1490	Identifier	time
>1491	Callee	t -> setLife
>1492	PtrMemberAccess	t -> setLife
>1493	Identifier	setLife
>1494	Identifier	t
>1495	ExpressionStatement	 
>1496	AssignmentExpr	t -> followCamera = 1
>1497	PrimaryExpression	1
>1498	PtrMemberAccess	t -> followCamera
>1499	Identifier	followCamera
>1500	Identifier	t
>1501	ExpressionStatement	 
>1502	CallExpression	t -> alpha . startPath ( time )
>1503	ArgumentList	time
>1504	Argument	time
>1505	Identifier	time
>1506	Callee	t -> alpha . startPath
>1507	MemberAccess	t -> alpha . startPath
>1508	Identifier	startPath
>1509	PtrMemberAccess	t -> alpha
>1510	Identifier	alpha
>1511	Identifier	t
>1512	ExpressionStatement	 
>1513	CallExpression	t -> alpha . data -> path . addPathNode ( 0 , 1 )
>1514	ArgumentList	0
>1515	Argument	1
>1516	PrimaryExpression	1
>1517	Argument	0
>1518	PrimaryExpression	0
>1519	Callee	t -> alpha . data -> path . addPathNode
>1520	MemberAccess	t -> alpha . data -> path . addPathNode
>1521	Identifier	addPathNode
>1522	PtrMemberAccess	t -> alpha . data -> path
>1523	Identifier	path
>1524	MemberAccess	t -> alpha . data
>1525	Identifier	data
>1526	PtrMemberAccess	t -> alpha
>1527	Identifier	alpha
>1528	Identifier	t
>1529	ExpressionStatement	 
>1530	CallExpression	t -> alpha . data -> path . addPathNode ( 1 , 0.8 )
>1531	ArgumentList	1
>1532	Argument	0.8
>1533	PrimaryExpression	0.8
>1534	Argument	1
>1535	PrimaryExpression	1
>1536	Callee	t -> alpha . data -> path . addPathNode
>1537	MemberAccess	t -> alpha . data -> path . addPathNode
>1538	Identifier	addPathNode
>1539	PtrMemberAccess	t -> alpha . data -> path
>1540	Identifier	path
>1541	MemberAccess	t -> alpha . data
>1542	Identifier	data
>1543	PtrMemberAccess	t -> alpha
>1544	Identifier	alpha
>1545	Identifier	t
>1546	ExpressionStatement	 
>1547	CallExpression	t -> alpha . data -> path . addPathNode ( 1 , 0 )
>1548	ArgumentList	1
>1549	Argument	0
>1550	PrimaryExpression	0
>1551	Argument	1
>1552	PrimaryExpression	1
>1553	Callee	t -> alpha . data -> path . addPathNode
>1554	MemberAccess	t -> alpha . data -> path . addPathNode
>1555	Identifier	addPathNode
>1556	PtrMemberAccess	t -> alpha . data -> path
>1557	Identifier	path
>1558	MemberAccess	t -> alpha . data
>1559	Identifier	data
>1560	PtrMemberAccess	t -> alpha
>1561	Identifier	alpha
>1562	Identifier	t
>1563	ExpressionStatement	 
>1564	CallExpression	t -> alpha . ensureData ( )
>1565	ArgumentList	 
>1566	Callee	t -> alpha . ensureData
>1567	MemberAccess	t -> alpha . ensureData
>1568	Identifier	ensureData
>1569	PtrMemberAccess	t -> alpha
>1570	Identifier	alpha
>1571	Identifier	t
>1572	ExpressionStatement	 
>1573	AssignmentExpr	t -> position = pos
>1574	Identifier	pos
>1575	PtrMemberAccess	t -> position
>1576	Identifier	position
>1577	Identifier	t
>1578	IfStatement	if ( type == 1 )
>1579	ElseStatement	else
>1580	ExpressionStatement	 
>1581	AssignmentExpr	t = new BitmapText ( & smallFont )
>1582	UnaryOp	& smallFont
>1583	Identifier	smallFont
>1584	UnaryOperator	&
>1585	Identifier	t
>1586	ExpressionStatement	 
>1587	AssignmentExpr	t = new BitmapText ( & smallFontRed )
>1588	UnaryOp	& smallFontRed
>1589	Identifier	smallFontRed
>1590	UnaryOperator	&
>1591	Identifier	t
>1592	Condition	 
>1593	EqualityExpression	type == 1
>1594	PrimaryExpression	1
>1595	Identifier	type
>1596	IdentifierDeclStatement	 
>1597	IdentifierDecl	* t = 0
>1598	AssignmentExpr	* t = 0
>1599	PrimaryExpression	0
>1600	Identifier	t
>1601	Identifier	t
>1602	IdentifierDeclType	BitmapText *
>1603	IdentifierDeclStatement	 
>1604	IdentifierDecl	time = 2
>1605	AssignmentExpr	time = 2
>1606	PrimaryExpression	2
>1607	Identifier	time
>1608	Identifier	time
>1609	IdentifierDeclType	float
>1610	IdentifierDeclStatement	 
>1611	IdentifierDecl	pos ( 400 , y )
>1612	Expression	400 , y
>1613	Identifier	y
>1614	PrimaryExpression	400
>1615	Identifier	pos
>1616	IdentifierDeclType	Vector
>1641	FunctionDef	DSQ 
>1642	ParameterList	const std 
>1643	Parameter	 
>1644	Identifier	text
>1645	ParameterType	const std 
>1646	ReturnType	void
>1647	CompoundStatement	 
>1648	ExpressionStatement	 
>1649	CallExpression	getTopStateData ( ) -> addRenderObject ( t , LR_HUD )
>1650	ArgumentList	t
>1651	Argument	LR_HUD
>1652	Identifier	LR_HUD
>1653	Argument	t
>1654	Identifier	t
>1655	Callee	getTopStateData ( ) -> addRenderObject
>1656	PtrMemberAccess	getTopStateData ( ) -> addRenderObject
>1657	Identifier	addRenderObject
>1658	CallExpression	getTopStateData ( )
>1659	ArgumentList	 
>1660	Callee	getTopStateData
>1661	Identifier	getTopStateData
>1662	ExpressionStatement	 
>1663	CallExpression	t -> setText ( text )
>1664	ArgumentList	text
>1665	Argument	text
>1666	Identifier	text
>1667	Callee	t -> setText
>1668	PtrMemberAccess	t -> setText
>1669	Identifier	setText
>1670	Identifier	t
>1671	ExpressionStatement	 
>1672	CallExpression	t -> setDecayRate ( 1 )
>1673	ArgumentList	1
>1674	Argument	1
>1675	PrimaryExpression	1
>1676	Callee	t -> setDecayRate
>1677	PtrMemberAccess	t -> setDecayRate
>1678	Identifier	setDecayRate
>1679	Identifier	t
>1680	ExpressionStatement	 
>1681	CallExpression	t -> setLife ( time + 0.5f )
>1682	ArgumentList	time + 0.5f
>1683	Argument	time + 0.5f
>1684	AdditiveExpression	time + 0.5f
>1685	PrimaryExpression	0.5f
>1686	Identifier	time
>1687	Callee	t -> setLife
>1688	PtrMemberAccess	t -> setLife
>1689	Identifier	setLife
>1690	Identifier	t
>1691	ExpressionStatement	 
>1692	AssignmentExpr	t -> followCamera = 1
>1693	PrimaryExpression	1
>1694	PtrMemberAccess	t -> followCamera
>1695	Identifier	followCamera
>1696	Identifier	t
>1697	ExpressionStatement	 
>1698	CallExpression	t -> alpha . startPath ( time )
>1699	ArgumentList	time
>1700	Argument	time
>1701	Identifier	time
>1702	Callee	t -> alpha . startPath
>1703	MemberAccess	t -> alpha . startPath
>1704	Identifier	startPath
>1705	PtrMemberAccess	t -> alpha
>1706	Identifier	alpha
>1707	Identifier	t
>1708	ExpressionStatement	 
>1709	CallExpression	t -> alpha . data -> path . addPathNode ( 0 , 1 )
>1710	ArgumentList	0
>1711	Argument	1
>1712	PrimaryExpression	1
>1713	Argument	0
>1714	PrimaryExpression	0
>1715	Callee	t -> alpha . data -> path . addPathNode
>1716	MemberAccess	t -> alpha . data -> path . addPathNode
>1717	Identifier	addPathNode
>1718	PtrMemberAccess	t -> alpha . data -> path
>1719	Identifier	path
>1720	MemberAccess	t -> alpha . data
>1721	Identifier	data
>1722	PtrMemberAccess	t -> alpha
>1723	Identifier	alpha
>1724	Identifier	t
>1725	ExpressionStatement	 
>1726	CallExpression	t -> alpha . data -> path . addPathNode ( 1 , 0.8 )
>1727	ArgumentList	1
>1728	Argument	0.8
>1729	PrimaryExpression	0.8
>1730	Argument	1
>1731	PrimaryExpression	1
>1732	Callee	t -> alpha . data -> path . addPathNode
>1733	MemberAccess	t -> alpha . data -> path . addPathNode
>1734	Identifier	addPathNode
>1735	PtrMemberAccess	t -> alpha . data -> path
>1736	Identifier	path
>1737	MemberAccess	t -> alpha . data
>1738	Identifier	data
>1739	PtrMemberAccess	t -> alpha
>1740	Identifier	alpha
>1741	Identifier	t
>1742	ExpressionStatement	 
>1743	CallExpression	t -> alpha . data -> path . addPathNode ( 1 , 0.1 )
>1744	ArgumentList	1
>1745	Argument	0.1
>1746	PrimaryExpression	0.1
>1747	Argument	1
>1748	PrimaryExpression	1
>1749	Callee	t -> alpha . data -> path . addPathNode
>1750	MemberAccess	t -> alpha . data -> path . addPathNode
>1751	Identifier	addPathNode
>1752	PtrMemberAccess	t -> alpha . data -> path
>1753	Identifier	path
>1754	MemberAccess	t -> alpha . data
>1755	Identifier	data
>1756	PtrMemberAccess	t -> alpha
>1757	Identifier	alpha
>1758	Identifier	t
>1759	ExpressionStatement	 
>1760	CallExpression	t -> alpha . data -> path . addPathNode ( 0 , 0 )
>1761	ArgumentList	0
>1762	Argument	0
>1763	PrimaryExpression	0
>1764	Argument	0
>1765	PrimaryExpression	0
>1766	Callee	t -> alpha . data -> path . addPathNode
>1767	MemberAccess	t -> alpha . data -> path . addPathNode
>1768	Identifier	addPathNode
>1769	PtrMemberAccess	t -> alpha . data -> path
>1770	Identifier	path
>1771	MemberAccess	t -> alpha . data
>1772	Identifier	data
>1773	PtrMemberAccess	t -> alpha
>1774	Identifier	alpha
>1775	Identifier	t
>1776	ExpressionStatement	 
>1777	CallExpression	t -> alpha . ensureData ( )
>1778	ArgumentList	 
>1779	Callee	t -> alpha . ensureData
>1780	MemberAccess	t -> alpha . ensureData
>1781	Identifier	ensureData
>1782	PtrMemberAccess	t -> alpha
>1783	Identifier	alpha
>1784	Identifier	t
>1785	ExpressionStatement	 
>1786	AssignmentExpr	t -> position = pos
>1787	Identifier	pos
>1788	PtrMemberAccess	t -> position
>1789	Identifier	position
>1790	Identifier	t
>1791	IdentifierDeclStatement	 
>1792	IdentifierDecl	* t = new BitmapText ( & font )
>1793	AssignmentExpr	* t = new BitmapText ( & font )
>1794	UnaryOp	& font
>1795	Identifier	font
>1796	UnaryOperator	&
>1797	Identifier	t
>1798	Identifier	t
>1799	IdentifierDeclType	BitmapText *
>1800	ExpressionStatement	 
>1801	CallExpression	getTopStateData ( ) -> addRenderObject ( s , LR_HUD )
>1802	ArgumentList	s
>1803	Argument	LR_HUD
>1804	Identifier	LR_HUD
>1805	Argument	s
>1806	Identifier	s
>1807	Callee	getTopStateData ( ) -> addRenderObject
>1808	PtrMemberAccess	getTopStateData ( ) -> addRenderObject
>1809	Identifier	addRenderObject
>1810	CallExpression	getTopStateData ( )
>1811	ArgumentList	 
>1812	Callee	getTopStateData
>1813	Identifier	getTopStateData
>1814	ExpressionStatement	 
>1815	CallExpression	s -> alpha . startPath ( time )
>1816	ArgumentList	time
>1817	Argument	time
>1818	Identifier	time
>1819	Callee	s -> alpha . startPath
>1820	MemberAccess	s -> alpha . startPath
>1821	Identifier	startPath
>1822	PtrMemberAccess	s -> alpha
>1823	Identifier	alpha
>1824	Identifier	s
>1825	ExpressionStatement	 
>1826	CallExpression	s -> alpha . data -> path . addPathNode ( 0 , 1 )
>1827	ArgumentList	0
>1828	Argument	1
>1829	PrimaryExpression	1
>1830	Argument	0
>1831	PrimaryExpression	0
>1832	Callee	s -> alpha . data -> path . addPathNode
>1833	MemberAccess	s -> alpha . data -> path . addPathNode
>1834	Identifier	addPathNode
>1835	PtrMemberAccess	s -> alpha . data -> path
>1836	Identifier	path
>1837	MemberAccess	s -> alpha . data
>1838	Identifier	data
>1839	PtrMemberAccess	s -> alpha
>1840	Identifier	alpha
>1841	Identifier	s
>1842	ExpressionStatement	 
>1843	CallExpression	s -> alpha . data -> path . addPathNode ( 1 , 0.8 )
>1844	ArgumentList	1
>1845	Argument	0.8
>1846	PrimaryExpression	0.8
>1847	Argument	1
>1848	PrimaryExpression	1
>1849	Callee	s -> alpha . data -> path . addPathNode
>1850	MemberAccess	s -> alpha . data -> path . addPathNode
>1851	Identifier	addPathNode
>1852	PtrMemberAccess	s -> alpha . data -> path
>1853	Identifier	path
>1854	MemberAccess	s -> alpha . data
>1855	Identifier	data
>1856	PtrMemberAccess	s -> alpha
>1857	Identifier	alpha
>1858	Identifier	s
>1859	ExpressionStatement	 
>1860	CallExpression	s -> alpha . data -> path . addPathNode ( 1 , 0.1 )
>1861	ArgumentList	1
>1862	Argument	0.1
>1863	PrimaryExpression	0.1
>1864	Argument	1
>1865	PrimaryExpression	1
>1866	Callee	s -> alpha . data -> path . addPathNode
>1867	MemberAccess	s -> alpha . data -> path . addPathNode
>1868	Identifier	addPathNode
>1869	PtrMemberAccess	s -> alpha . data -> path
>1870	Identifier	path
>1871	MemberAccess	s -> alpha . data
>1872	Identifier	data
>1873	PtrMemberAccess	s -> alpha
>1874	Identifier	alpha
>1875	Identifier	s
>1876	ExpressionStatement	 
>1877	CallExpression	s -> alpha . data -> path . addPathNode ( 0 , 0 )
>1878	ArgumentList	0
>1879	Argument	0
>1880	PrimaryExpression	0
>1881	Argument	0
>1882	PrimaryExpression	0
>1883	Callee	s -> alpha . data -> path . addPathNode
>1884	MemberAccess	s -> alpha . data -> path . addPathNode
>1885	Identifier	addPathNode
>1886	PtrMemberAccess	s -> alpha . data -> path
>1887	Identifier	path
>1888	MemberAccess	s -> alpha . data
>1889	Identifier	data
>1890	PtrMemberAccess	s -> alpha
>1891	Identifier	alpha
>1892	Identifier	s
>1893	ExpressionStatement	 
>1894	CallExpression	s -> alpha . ensureData ( )
>1895	ArgumentList	 
>1896	Callee	s -> alpha . ensureData
>1897	MemberAccess	s -> alpha . ensureData
>1898	Identifier	ensureData
>1899	PtrMemberAccess	s -> alpha
>1900	Identifier	alpha
>1901	Identifier	s
>1902	ExpressionStatement	 
>1903	AssignmentExpr	s -> followCamera = 1
>1904	PrimaryExpression	1
>1905	PtrMemberAccess	s -> followCamera
>1906	Identifier	followCamera
>1907	Identifier	s
>1908	ExpressionStatement	 
>1909	CallExpression	s -> setDecayRate ( 1 )
>1910	ArgumentList	1
>1911	Argument	1
>1912	PrimaryExpression	1
>1913	Callee	s -> setDecayRate
>1914	PtrMemberAccess	s -> setDecayRate
>1915	Identifier	setDecayRate
>1916	Identifier	s
>1917	ExpressionStatement	 
>1918	CallExpression	s -> setLife ( time + 0.5f )
>1919	ArgumentList	time + 0.5f
>1920	Argument	time + 0.5f
>1921	AdditiveExpression	time + 0.5f
>1922	PrimaryExpression	0.5f
>1923	Identifier	time
>1924	Callee	s -> setLife
>1925	PtrMemberAccess	s -> setLife
>1926	Identifier	setLife
>1927	Identifier	s
>1928	ExpressionStatement	 
>1929	CallExpression	s -> setText ( text )
>1930	ArgumentList	text
>1931	Argument	text
>1932	Identifier	text
>1933	Callee	s -> setText
>1934	PtrMemberAccess	s -> setText
>1935	Identifier	setText
>1936	Identifier	s
>1937	ExpressionStatement	 
>1938	AssignmentExpr	s -> offset = Vector ( 1 , 1 )
>1939	CallExpression	Vector ( 1 , 1 )
>1940	ArgumentList	1
>1941	Argument	1
>1942	PrimaryExpression	1
>1943	Argument	1
>1944	PrimaryExpression	1
>1945	Callee	Vector
>1946	Identifier	Vector
>1947	PtrMemberAccess	s -> offset
>1948	Identifier	offset
>1949	Identifier	s
>1950	ExpressionStatement	 
>1951	AssignmentExpr	s -> position = pos
>1952	Identifier	pos
>1953	PtrMemberAccess	s -> position
>1954	Identifier	position
>1955	Identifier	s
>1956	ExpressionStatement	 
>1957	AssignmentExpr	s -> color = Vector ( 0 , 0 , 0 )
>1958	CallExpression	Vector ( 0 , 0 , 0 )
>1959	ArgumentList	0
>1960	Argument	0
>1961	PrimaryExpression	0
>1962	Argument	0
>1963	PrimaryExpression	0
>1964	Argument	0
>1965	PrimaryExpression	0
>1966	Callee	Vector
>1967	Identifier	Vector
>1968	PtrMemberAccess	s -> color
>1969	Identifier	color
>1970	Identifier	s
>1971	IdentifierDeclStatement	 
>1972	IdentifierDecl	* s = new BitmapText ( & font )
>1973	AssignmentExpr	* s = new BitmapText ( & font )
>1974	UnaryOp	& font
>1975	Identifier	font
>1976	UnaryOperator	&
>1977	Identifier	s
>1978	Identifier	s
>1979	IdentifierDeclType	BitmapText *
>1980	IdentifierDeclStatement	 
>1981	IdentifierDecl	time = 8
>1982	AssignmentExpr	time = 8
>1983	PrimaryExpression	8
>1984	Identifier	time
>1985	Identifier	time
>1986	IdentifierDeclType	float
>1987	IdentifierDeclStatement	 
>1988	IdentifierDecl	pos ( 400 , 200 )
>1989	Expression	400 , 200
>1990	PrimaryExpression	200
>1991	PrimaryExpression	400
>1992	Identifier	pos
>1993	IdentifierDeclType	Vector
>2026	FunctionDef	DSQ 
>2027	ParameterList	 
>2028	ReturnType	void
>2029	CompoundStatement	 
>2030	ExpressionStatement	 
>2031	CallExpression	debugLog ( \"done destroyFonts\" )
>2032	ArgumentList	\"done destroyFonts\"
>2033	Argument	\"done destroyFonts\"
>2034	PrimaryExpression	\"done destroyFonts\"
>2035	Callee	debugLog
>2036	Identifier	debugLog
>2037	ExpressionStatement	 
>2038	AssignmentExpr	arialFontData = 0
>2039	PrimaryExpression	0
>2040	Identifier	arialFontData
>2041	ExpressionStatement	 
>2042	Identifier	arialFontData
>2043	Statement	 
>2044	Statement	 
>2045	Statement	 
>2046	ExpressionStatement	 
>2047	CallExpression	fontArialSmallest . destroy ( )
>2048	ArgumentList	 
>2049	Callee	fontArialSmallest . destroy
>2050	MemberAccess	fontArialSmallest . destroy
>2051	Identifier	destroy
>2052	Identifier	fontArialSmallest
>2053	ExpressionStatement	 
>2054	CallExpression	fontArialSmall . destroy ( )
>2055	ArgumentList	 
>2056	Callee	fontArialSmall . destroy
>2057	MemberAccess	fontArialSmall . destroy
>2058	Identifier	destroy
>2059	Identifier	fontArialSmall
>2060	ExpressionStatement	 
>2061	CallExpression	fontArialBig . destroy ( )
>2062	ArgumentList	 
>2063	Callee	fontArialBig . destroy
>2064	MemberAccess	fontArialBig . destroy
>2065	Identifier	destroy
>2066	Identifier	fontArialBig
>2067	ExpressionStatement	 
>2068	CallExpression	debugLog ( \"ttf fonts...\" )
>2069	ArgumentList	\"ttf fonts...\"
>2070	Argument	\"ttf fonts...\"
>2071	PrimaryExpression	\"ttf fonts...\"
>2072	Callee	debugLog
>2073	Identifier	debugLog
>2074	ExpressionStatement	 
>2075	CallExpression	smallFontRed . destroy ( )
>2076	ArgumentList	 
>2077	Callee	smallFontRed . destroy
>2078	MemberAccess	smallFontRed . destroy
>2079	Identifier	destroy
>2080	Identifier	smallFontRed
>2081	ExpressionStatement	 
>2082	CallExpression	goldFont . destroy ( )
>2083	ArgumentList	 
>2084	Callee	goldFont . destroy
>2085	MemberAccess	goldFont . destroy
>2086	Identifier	destroy
>2087	Identifier	goldFont
>2088	ExpressionStatement	 
>2089	CallExpression	subsFont . destroy ( )
>2090	ArgumentList	 
>2091	Callee	subsFont . destroy
>2092	MemberAccess	subsFont . destroy
>2093	Identifier	destroy
>2094	Identifier	subsFont
>2095	ExpressionStatement	 
>2096	CallExpression	smallFont . destroy ( )
>2097	ArgumentList	 
>2098	Callee	smallFont . destroy
>2099	MemberAccess	smallFont . destroy
>2100	Identifier	destroy
>2101	Identifier	smallFont
>2102	ExpressionStatement	 
>2103	CallExpression	font . destroy ( )
>2104	ArgumentList	 
>2105	Callee	font . destroy
>2106	MemberAccess	font . destroy
>2107	Identifier	destroy
>2108	Identifier	font
>2109	ExpressionStatement	 
>2110	CallExpression	debugLog ( \"destroyFonts...\" )
>2111	ArgumentList	\"destroyFonts...\"
>2112	Argument	\"destroyFonts...\"
>2113	PrimaryExpression	\"destroyFonts...\"
>2114	Callee	debugLog
>2115	Identifier	debugLog
>2128	FunctionDef	DSQ 
>2129	ParameterList	 
>2130	ReturnType	void
>2131	CompoundStatement	 
>2132	ExpressionStatement	 
>2133	CallExpression	debugLog ( \"done loadFonts\" )
>2134	ArgumentList	\"done loadFonts\"
>2135	Argument	\"done loadFonts\"
>2136	PrimaryExpression	\"done loadFonts\"
>2137	Callee	debugLog
>2138	Identifier	debugLog
>2139	IfStatement	if ( arialFontData )
>2140	CompoundStatement	 
>2141	ExpressionStatement	 
>2142	CallExpression	fontArialSmallest . create ( arialFontData , arialFontDataSize , 10 )
>2143	ArgumentList	arialFontData
>2144	Argument	10
>2145	PrimaryExpression	10
>2146	Argument	arialFontDataSize
>2147	Identifier	arialFontDataSize
>2148	Argument	arialFontData
>2149	Identifier	arialFontData
>2150	Callee	fontArialSmallest . create
>2151	MemberAccess	fontArialSmallest . create
>2152	Identifier	create
>2153	Identifier	fontArialSmallest
>2154	ExpressionStatement	 
>2155	CallExpression	fontArialBig . create ( arialFontData , arialFontDataSize , 18 )
>2156	ArgumentList	arialFontData
>2157	Argument	18
>2158	PrimaryExpression	18
>2159	Argument	arialFontDataSize
>2160	Identifier	arialFontDataSize
>2161	Argument	arialFontData
>2162	Identifier	arialFontData
>2163	Callee	fontArialBig . create
>2164	MemberAccess	fontArialBig . create
>2165	Identifier	create
>2166	Identifier	fontArialBig
>2167	ExpressionStatement	 
>2168	CallExpression	fontArialSmall . create ( arialFontData , arialFontDataSize , 12 )
>2169	ArgumentList	arialFontData
>2170	Argument	12
>2171	PrimaryExpression	12
>2172	Argument	arialFontDataSize
>2173	Identifier	arialFontDataSize
>2174	Argument	arialFontData
>2175	Identifier	arialFontData
>2176	Callee	fontArialSmall . create
>2177	MemberAccess	fontArialSmall . create
>2178	Identifier	create
>2179	Identifier	fontArialSmall
>2180	Condition	 
>2181	Identifier	arialFontData
>2182	ExpressionStatement	 
>2183	AssignmentExpr	arialFontData = ( unsigned char * ) readFile ( file , & arialFontDataSize )
>2184	CastExpression	( unsigned char * ) readFile ( file , & arialFontDataSize )
>2185	CallExpression	readFile ( file , & arialFontDataSize )
>2186	ArgumentList	file
>2187	Argument	& arialFontDataSize
>2188	UnaryOp	& arialFontDataSize
>2189	Identifier	arialFontDataSize
>2190	UnaryOperator	&
>2191	Argument	file
>2192	Identifier	file
>2193	Callee	readFile
>2194	Identifier	readFile
>2195	CastTarget	unsigned char *
>2196	Identifier	arialFontData
>2197	ExpressionStatement	 
>2198	CallExpression	debugLog ( \"ttf...\" )
>2199	ArgumentList	\"ttf...\"
>2200	Argument	\"ttf...\"
>2201	PrimaryExpression	\"ttf...\"
>2202	Callee	debugLog
>2203	Identifier	debugLog
>2204	ExpressionStatement	 
>2205	AssignmentExpr	file = localisePath ( \"data/font.ttf\" )
>2206	CallExpression	localisePath ( \"data/font.ttf\" )
>2207	ArgumentList	\"data/font.ttf\"
>2208	Argument	\"data/font.ttf\"
>2209	PrimaryExpression	\"data/font.ttf\"
>2210	Callee	localisePath
>2211	Identifier	localisePath
>2212	Identifier	file
>2213	ExpressionStatement	 
>2214	AssignmentExpr	goldFont . overrideTexture = core -> addTexture ( \"font\" )
>2215	CallExpression	core -> addTexture ( \"font\" )
>2216	ArgumentList	\"font\"
>2217	Argument	\"font\"
>2218	PrimaryExpression	\"font\"
>2219	Callee	core -> addTexture
>2220	PtrMemberAccess	core -> addTexture
>2221	Identifier	addTexture
>2222	Identifier	core
>2223	MemberAccess	goldFont . overrideTexture
>2224	Identifier	overrideTexture
>2225	Identifier	goldFont
>2226	ExpressionStatement	 
>2227	AssignmentExpr	goldFont . fontBtmColor = Vector ( 0.6 , 0.5 , 0.25 )
>2228	CallExpression	Vector ( 0.6 , 0.5 , 0.25 )
>2229	ArgumentList	0.6
>2230	Argument	0.25
>2231	PrimaryExpression	0.25
>2232	Argument	0.5
>2233	PrimaryExpression	0.5
>2234	Argument	0.6
>2235	PrimaryExpression	0.6
>2236	Callee	Vector
>2237	Identifier	Vector
>2238	MemberAccess	goldFont . fontBtmColor
>2239	Identifier	fontBtmColor
>2240	Identifier	goldFont
>2241	ExpressionStatement	 
>2242	AssignmentExpr	goldFont . fontTopColor = Vector ( 1 , 0.9 , 0.5 )
>2243	CallExpression	Vector ( 1 , 0.9 , 0.5 )
>2244	ArgumentList	1
>2245	Argument	0.5
>2246	PrimaryExpression	0.5
>2247	Argument	0.9
>2248	PrimaryExpression	0.9
>2249	Argument	1
>2250	PrimaryExpression	1
>2251	Callee	Vector
>2252	Identifier	Vector
>2253	MemberAccess	goldFont . fontTopColor
>2254	Identifier	fontTopColor
>2255	Identifier	goldFont
>2256	ExpressionStatement	 
>2257	CallExpression	goldFont . load ( file , 1 , false )
>2258	ArgumentList	file
>2259	Argument	false
>2260	Identifier	false
>2261	Argument	1
>2262	PrimaryExpression	1
>2263	Argument	file
>2264	Identifier	file
>2265	Callee	goldFont . load
>2266	MemberAccess	goldFont . load
>2267	Identifier	load
>2268	Identifier	goldFont
>2269	ExpressionStatement	 
>2270	AssignmentExpr	subsFont . overrideTexture = core -> addTexture ( \"font\" )
>2271	CallExpression	core -> addTexture ( \"font\" )
>2272	ArgumentList	\"font\"
>2273	Argument	\"font\"
>2274	PrimaryExpression	\"font\"
>2275	Callee	core -> addTexture
>2276	PtrMemberAccess	core -> addTexture
>2277	Identifier	addTexture
>2278	Identifier	core
>2279	MemberAccess	subsFont . overrideTexture
>2280	Identifier	overrideTexture
>2281	Identifier	subsFont
>2282	ExpressionStatement	 
>2283	AssignmentExpr	subsFont . fontBtmColor = Vector ( 0.5 , 0.8 , 1 )
>2284	CallExpression	Vector ( 0.5 , 0.8 , 1 )
>2285	ArgumentList	0.5
>2286	Argument	1
>2287	PrimaryExpression	1
>2288	Argument	0.8
>2289	PrimaryExpression	0.8
>2290	Argument	0.5
>2291	PrimaryExpression	0.5
>2292	Callee	Vector
>2293	Identifier	Vector
>2294	MemberAccess	subsFont . fontBtmColor
>2295	Identifier	fontBtmColor
>2296	Identifier	subsFont
>2297	ExpressionStatement	 
>2298	AssignmentExpr	subsFont . fontTopColor = Vector ( 1 , 1 , 1 )
>2299	CallExpression	Vector ( 1 , 1 , 1 )
>2300	ArgumentList	1
>2301	Argument	1
>2302	PrimaryExpression	1
>2303	Argument	1
>2304	PrimaryExpression	1
>2305	Argument	1
>2306	PrimaryExpression	1
>2307	Callee	Vector
>2308	Identifier	Vector
>2309	MemberAccess	subsFont . fontTopColor
>2310	Identifier	fontTopColor
>2311	Identifier	subsFont
>2312	ExpressionStatement	 
>2313	CallExpression	subsFont . load ( file , 0.5 , false )
>2314	ArgumentList	file
>2315	Argument	false
>2316	Identifier	false
>2317	Argument	0.5
>2318	PrimaryExpression	0.5
>2319	Argument	file
>2320	Identifier	file
>2321	Callee	subsFont . load
>2322	MemberAccess	subsFont . load
>2323	Identifier	load
>2324	Identifier	subsFont
>2325	ExpressionStatement	 
>2326	AssignmentExpr	smallFontRed . overrideTexture = core -> addTexture ( \"font\" )
>2327	CallExpression	core -> addTexture ( \"font\" )
>2328	ArgumentList	\"font\"
>2329	Argument	\"font\"
>2330	PrimaryExpression	\"font\"
>2331	Callee	core -> addTexture
>2332	PtrMemberAccess	core -> addTexture
>2333	Identifier	addTexture
>2334	Identifier	core
>2335	MemberAccess	smallFontRed . overrideTexture
>2336	Identifier	overrideTexture
>2337	Identifier	smallFontRed
>2338	ExpressionStatement	 
>2339	AssignmentExpr	smallFontRed . fontBtmColor = Vector ( 1 , 0.8 , 0.5 )
>2340	CallExpression	Vector ( 1 , 0.8 , 0.5 )
>2341	ArgumentList	1
>2342	Argument	0.5
>2343	PrimaryExpression	0.5
>2344	Argument	0.8
>2345	PrimaryExpression	0.8
>2346	Argument	1
>2347	PrimaryExpression	1
>2348	Callee	Vector
>2349	Identifier	Vector
>2350	MemberAccess	smallFontRed . fontBtmColor
>2351	Identifier	fontBtmColor
>2352	Identifier	smallFontRed
>2353	ExpressionStatement	 
>2354	AssignmentExpr	smallFontRed . fontTopColor = Vector ( 1 , 0.9 , 0.9 )
>2355	CallExpression	Vector ( 1 , 0.9 , 0.9 )
>2356	ArgumentList	1
>2357	Argument	0.9
>2358	PrimaryExpression	0.9
>2359	Argument	0.9
>2360	PrimaryExpression	0.9
>2361	Argument	1
>2362	PrimaryExpression	1
>2363	Callee	Vector
>2364	Identifier	Vector
>2365	MemberAccess	smallFontRed . fontTopColor
>2366	Identifier	fontTopColor
>2367	Identifier	smallFontRed
>2368	ExpressionStatement	 
>2369	CallExpression	smallFontRed . load ( file , 0.6 , false )
>2370	ArgumentList	file
>2371	Argument	false
>2372	Identifier	false
>2373	Argument	0.6
>2374	PrimaryExpression	0.6
>2375	Argument	file
>2376	Identifier	file
>2377	Callee	smallFontRed . load
>2378	MemberAccess	smallFontRed . load
>2379	Identifier	load
>2380	Identifier	smallFontRed
>2381	ExpressionStatement	 
>2382	AssignmentExpr	smallFont . overrideTexture = core -> addTexture ( \"font\" )
>2383	CallExpression	core -> addTexture ( \"font\" )
>2384	ArgumentList	\"font\"
>2385	Argument	\"font\"
>2386	PrimaryExpression	\"font\"
>2387	Callee	core -> addTexture
>2388	PtrMemberAccess	core -> addTexture
>2389	Identifier	addTexture
>2390	Identifier	core
>2391	MemberAccess	smallFont . overrideTexture
>2392	Identifier	overrideTexture
>2393	Identifier	smallFont
>2394	ExpressionStatement	 
>2395	AssignmentExpr	smallFont . fontBtmColor = Vector ( 0.5 , 0.8 , 1 )
>2396	CallExpression	Vector ( 0.5 , 0.8 , 1 )
>2397	ArgumentList	0.5
>2398	Argument	1
>2399	PrimaryExpression	1
>2400	Argument	0.8
>2401	PrimaryExpression	0.8
>2402	Argument	0.5
>2403	PrimaryExpression	0.5
>2404	Callee	Vector
>2405	Identifier	Vector
>2406	MemberAccess	smallFont . fontBtmColor
>2407	Identifier	fontBtmColor
>2408	Identifier	smallFont
>2409	ExpressionStatement	 
>2410	AssignmentExpr	smallFont . fontTopColor = Vector ( 0.9 , 0.9 , 1 )
>2411	CallExpression	Vector ( 0.9 , 0.9 , 1 )
>2412	ArgumentList	0.9
>2413	Argument	1
>2414	PrimaryExpression	1
>2415	Argument	0.9
>2416	PrimaryExpression	0.9
>2417	Argument	0.9
>2418	PrimaryExpression	0.9
>2419	Callee	Vector
>2420	Identifier	Vector
>2421	MemberAccess	smallFont . fontTopColor
>2422	Identifier	fontTopColor
>2423	Identifier	smallFont
>2424	ExpressionStatement	 
>2425	CallExpression	smallFont . load ( file , 0.6 , false )
>2426	ArgumentList	file
>2427	Argument	false
>2428	Identifier	false
>2429	Argument	0.6
>2430	PrimaryExpression	0.6
>2431	Argument	file
>2432	Identifier	file
>2433	Callee	smallFont . load
>2434	MemberAccess	smallFont . load
>2435	Identifier	load
>2436	Identifier	smallFont
>2437	ExpressionStatement	 
>2438	AssignmentExpr	font . overrideTexture = core -> addTexture ( \"font\" )
>2439	CallExpression	core -> addTexture ( \"font\" )
>2440	ArgumentList	\"font\"
>2441	Argument	\"font\"
>2442	PrimaryExpression	\"font\"
>2443	Callee	core -> addTexture
>2444	PtrMemberAccess	core -> addTexture
>2445	Identifier	addTexture
>2446	Identifier	core
>2447	MemberAccess	font . overrideTexture
>2448	Identifier	overrideTexture
>2449	Identifier	font
>2450	ExpressionStatement	 
>2451	AssignmentExpr	font . fontBtmColor = Vector ( 0.5 , 0.8 , 1 )
>2452	CallExpression	Vector ( 0.5 , 0.8 , 1 )
>2453	ArgumentList	0.5
>2454	Argument	1
>2455	PrimaryExpression	1
>2456	Argument	0.8
>2457	PrimaryExpression	0.8
>2458	Argument	0.5
>2459	PrimaryExpression	0.5
>2460	Callee	Vector
>2461	Identifier	Vector
>2462	MemberAccess	font . fontBtmColor
>2463	Identifier	fontBtmColor
>2464	Identifier	font
>2465	ExpressionStatement	 
>2466	AssignmentExpr	font . fontTopColor = Vector ( 0.9 , 0.9 , 1 )
>2467	CallExpression	Vector ( 0.9 , 0.9 , 1 )
>2468	ArgumentList	0.9
>2469	Argument	1
>2470	PrimaryExpression	1
>2471	Argument	0.9
>2472	PrimaryExpression	0.9
>2473	Argument	0.9
>2474	PrimaryExpression	0.9
>2475	Callee	Vector
>2476	Identifier	Vector
>2477	MemberAccess	font . fontTopColor
>2478	Identifier	fontTopColor
>2479	Identifier	font
>2480	ExpressionStatement	 
>2481	CallExpression	font . load ( file , 1 , false )
>2482	ArgumentList	file
>2483	Argument	false
>2484	Identifier	false
>2485	Argument	1
>2486	PrimaryExpression	1
>2487	Argument	file
>2488	Identifier	file
>2489	Callee	font . load
>2490	MemberAccess	font . load
>2491	Identifier	load
>2492	Identifier	font
>2493	IdentifierDeclStatement	 
>2494	IdentifierDecl	file = localisePath ( \"data/font-small.glf\" )
>2495	AssignmentExpr	file = localisePath ( \"data/font-small.glf\" )
>2496	CallExpression	localisePath ( \"data/font-small.glf\" )
>2497	ArgumentList	\"data/font-small.glf\"
>2498	Argument	\"data/font-small.glf\"
>2499	PrimaryExpression	\"data/font-small.glf\"
>2500	Callee	localisePath
>2501	Identifier	localisePath
>2502	Identifier	file
>2503	Identifier	file
>2504	IdentifierDeclType	std 
>2505	ExpressionStatement	 
>2506	CallExpression	destroyFonts ( )
>2507	ArgumentList	 
>2508	Callee	destroyFonts
>2509	Identifier	destroyFonts
>2510	ExpressionStatement	 
>2511	CallExpression	debugLog ( \"loadFonts...\" )
>2512	ArgumentList	\"loadFonts...\"
>2513	Argument	\"loadFonts...\"
>2514	PrimaryExpression	\"loadFonts...\"
>2515	Callee	debugLog
>2516	Identifier	debugLog
>2554	FunctionDef	DSQ 
>2555	ParameterList	 
>2556	ReturnType	void
>2557	CompoundStatement	 
>2558	ExpressionStatement	 
>2559	CallExpression	setTexturePointers ( )
>2560	ArgumentList	 
>2561	Callee	setTexturePointers
>2562	Identifier	setTexturePointers
>2563	ExpressionStatement	 
>2564	CallExpression	loadFonts ( )
>2565	ArgumentList	 
>2566	Callee	loadFonts
>2567	Identifier	loadFonts
>2568	ExpressionStatement	 
>2569	CallExpression	Core 
>2570	ArgumentList	 
>2571	Callee	Core 
>2572	Identifier	Core 
>2576	FunctionDef	DSQ 
>2577	ParameterList	 
>2578	ReturnType	void
>2579	CompoundStatement	 
>2580	IfStatement	if ( isDeveloperKeys ( ) || ( mod . isActive ( ) && mod . isDebugMenu ( ) ) )
>2581	CompoundStatement	 
>2582	IfStatement	if ( core -> getShiftState ( ) )
>2583	CompoundStatement	 
>2584	IfStatement	if ( ! s . empty ( ) )
>2585	CompoundStatement	 
>2586	IfStatement	if ( c == '1' )
>2587	ElseStatement	else
>2588	IfStatement	if ( c == '2' )
>2589	ElseStatement	else
>2590	IfStatement	if ( c == '3' )
>2591	ElseStatement	else
>2592	IfStatement	if ( c == 'B' )
>2593	ElseStatement	else
>2594	IfStatement	if ( c == 'A' )
>2595	ElseStatement	else
>2596	IfStatement	if ( c == 'J' )
>2597	ElseStatement	else
>2598	IfStatement	if ( c == 'Q' )
>2599	ElseStatement	else
>2600	IfStatement	if ( c == '5' )
>2601	ElseStatement	else
>2602	IfStatement	if ( c == '6' )
>2603	ElseStatement	else
>2604	IfStatement	if ( c == '8' )
>2605	ElseStatement	else
>2606	IfStatement	if ( c == '9' )
>2607	ElseStatement	else
>2608	IfStatement	if ( c == '0' )
>2609	ElseStatement	else
>2610	IfStatement	if ( c == 'S' )
>2611	ElseStatement	else
>2612	IfStatement	if ( c == 'F' )
>2613	ElseStatement	else
>2614	IfStatement	if ( c == 'C' )
>2615	ElseStatement	else
>2616	IfStatement	if ( c == 'R' )
>2617	ElseStatement	else
>2618	IfStatement	if ( c == 'P' )
>2619	ElseStatement	else
>2620	IfStatement	if ( c == 'T' )
>2621	ElseStatement	else
>2622	IfStatement	if ( c == 'U' )
>2623	ElseStatement	else
>2624	IfStatement	if ( c == 'K' )
>2625	ElseStatement	else
>2626	IfStatement	if ( c == 'M' )
>2627	ElseStatement	else
>2628	IfStatement	if ( c == 'H' )
>2629	CompoundStatement	 
>2630	ExpressionStatement	 
>2631	AssignmentExpr	dsq -> game -> avatar -> health = h
>2632	Identifier	h
>2633	PtrMemberAccess	dsq -> game -> avatar -> health
>2634	Identifier	health
>2635	PtrMemberAccess	dsq -> game -> avatar
>2636	Identifier	avatar
>2637	PtrMemberAccess	dsq -> game
>2638	Identifier	game
>2639	Identifier	dsq
>2640	ExpressionStatement	 
>2641	ShiftExpression	is >> h
>2642	Identifier	h
>2643	Identifier	is
>2644	IdentifierDeclStatement	 
>2645	IdentifierDecl	h = 0
>2646	AssignmentExpr	h = 0
>2647	PrimaryExpression	0
>2648	Identifier	h
>2649	Identifier	h
>2650	IdentifierDeclType	float
>2651	IdentifierDeclStatement	 
>2652	IdentifierDecl	is ( dsq -> getUserInputString ( dsq -> continuity . stringBank . get ( 2013 ) , os . str ( ) ) )
>2653	CallExpression	dsq -> getUserInputString ( dsq -> continuity . stringBank . get ( 2013 ) , os . str ( ) )
>2654	ArgumentList	dsq -> continuity . stringBank . get ( 2013 )
>2655	Argument	os . str ( )
>2656	CallExpression	os . str ( )
>2657	ArgumentList	 
>2658	Callee	os . str
>2659	MemberAccess	os . str
>2660	Identifier	str
>2661	Identifier	os
>2662	Argument	dsq -> continuity . stringBank . get ( 2013 )
>2663	CallExpression	dsq -> continuity . stringBank . get ( 2013 )
>2664	ArgumentList	2013
>2665	Argument	2013
>2666	PrimaryExpression	2013
>2667	Callee	dsq -> continuity . stringBank . get
>2668	MemberAccess	dsq -> continuity . stringBank . get
>2669	Identifier	get
>2670	MemberAccess	dsq -> continuity . stringBank
>2671	Identifier	stringBank
>2672	PtrMemberAccess	dsq -> continuity
>2673	Identifier	continuity
>2674	Identifier	dsq
>2675	Callee	dsq -> getUserInputString
>2676	PtrMemberAccess	dsq -> getUserInputString
>2677	Identifier	getUserInputString
>2678	Identifier	dsq
>2679	Identifier	is
>2680	IdentifierDeclType	std 
>2681	ExpressionStatement	 
>2682	ShiftExpression	os << dsq -> game -> avatar -> health
>2683	PtrMemberAccess	dsq -> game -> avatar -> health
>2684	Identifier	health
>2685	PtrMemberAccess	dsq -> game -> avatar
>2686	Identifier	avatar
>2687	PtrMemberAccess	dsq -> game
>2688	Identifier	game
>2689	Identifier	dsq
>2690	Identifier	os
>2691	IdentifierDeclStatement	 
>2692	IdentifierDecl	os
>2693	Identifier	os
>2694	IdentifierDeclType	std 
>2695	Condition	 
>2696	EqualityExpression	c == 'H'
>2697	PrimaryExpression	'H'
>2698	Identifier	c
>2699	CompoundStatement	 
>2700	ExpressionStatement	 
>2701	CallExpression	dsq -> game -> autoMap -> toggle ( ! dsq -> game -> autoMap -> isOn ( ) )
>2702	ArgumentList	! dsq -> game -> autoMap -> isOn ( )
>2703	Argument	! dsq -> game -> autoMap -> isOn ( )
>2704	UnaryOp	! dsq -> game -> autoMap -> isOn ( )
>2705	CallExpression	dsq -> game -> autoMap -> isOn ( )
>2706	ArgumentList	 
>2707	Callee	dsq -> game -> autoMap -> isOn
>2708	PtrMemberAccess	dsq -> game -> autoMap -> isOn
>2709	Identifier	isOn
>2710	PtrMemberAccess	dsq -> game -> autoMap
>2711	Identifier	autoMap
>2712	PtrMemberAccess	dsq -> game
>2713	Identifier	game
>2714	Identifier	dsq
>2715	UnaryOperator	!
>2716	Callee	dsq -> game -> autoMap -> toggle
>2717	PtrMemberAccess	dsq -> game -> autoMap -> toggle
>2718	Identifier	toggle
>2719	PtrMemberAccess	dsq -> game -> autoMap
>2720	Identifier	autoMap
>2721	PtrMemberAccess	dsq -> game
>2722	Identifier	game
>2723	Identifier	dsq
>2724	Condition	 
>2725	EqualityExpression	c == 'M'
>2726	PrimaryExpression	'M'
>2727	Identifier	c
>2728	CompoundStatement	 
>2729	ExpressionStatement	 
>2730	CallExpression	dsq -> demo . clearRecordedFrames ( )
>2731	ArgumentList	 
>2732	Callee	dsq -> demo . clearRecordedFrames
>2733	MemberAccess	dsq -> demo . clearRecordedFrames
>2734	Identifier	clearRecordedFrames
>2735	PtrMemberAccess	dsq -> demo
>2736	Identifier	demo
>2737	Identifier	dsq
>2738	Condition	 
>2739	EqualityExpression	c == 'K'
>2740	PrimaryExpression	'K'
>2741	Identifier	c
>2742	CompoundStatement	 
>2743	ExpressionStatement	 
>2744	CallExpression	dsq -> demo . renderFramesToDisk ( )
>2745	ArgumentList	 
>2746	Callee	dsq -> demo . renderFramesToDisk
>2747	MemberAccess	dsq -> demo . renderFramesToDisk
>2748	Identifier	renderFramesToDisk
>2749	PtrMemberAccess	dsq -> demo
>2750	Identifier	demo
>2751	Identifier	dsq
>2752	Condition	 
>2753	EqualityExpression	c == 'U'
>2754	PrimaryExpression	'U'
>2755	Identifier	c
>2756	CompoundStatement	 
>2757	IfStatement	if ( dsq -> demo . frames . size ( ) > 0 )
>2758	CompoundStatement	 
>2759	ExpressionStatement	 
>2760	AssignmentExpr	dsq -> game -> avatar -> rotation . z = dsq -> demo . frames [ 0 ] . rot
>2761	MemberAccess	dsq -> demo . frames [ 0 ] . rot
>2762	Identifier	rot
>2763	ArrayIndexing	dsq -> demo . frames [ 0 ]
>2764	PrimaryExpression	0
>2765	MemberAccess	dsq -> demo . frames
>2766	Identifier	frames
>2767	PtrMemberAccess	dsq -> demo
>2768	Identifier	demo
>2769	Identifier	dsq
>2770	MemberAccess	dsq -> game -> avatar -> rotation . z
>2771	Identifier	z
>2772	PtrMemberAccess	dsq -> game -> avatar -> rotation
>2773	Identifier	rotation
>2774	PtrMemberAccess	dsq -> game -> avatar
>2775	Identifier	avatar
>2776	PtrMemberAccess	dsq -> game
>2777	Identifier	game
>2778	Identifier	dsq
>2779	ExpressionStatement	 
>2780	AssignmentExpr	dsq -> game -> avatar -> position = dsq -> demo . frames [ 0 ] . avatarPos
>2781	MemberAccess	dsq -> demo . frames [ 0 ] . avatarPos
>2782	Identifier	avatarPos
>2783	ArrayIndexing	dsq -> demo . frames [ 0 ]
>2784	PrimaryExpression	0
>2785	MemberAccess	dsq -> demo . frames
>2786	Identifier	frames
>2787	PtrMemberAccess	dsq -> demo
>2788	Identifier	demo
>2789	Identifier	dsq
>2790	PtrMemberAccess	dsq -> game -> avatar -> position
>2791	Identifier	position
>2792	PtrMemberAccess	dsq -> game -> avatar
>2793	Identifier	avatar
>2794	PtrMemberAccess	dsq -> game
>2795	Identifier	game
>2796	Identifier	dsq
>2797	Condition	 
>2798	RelationalExpression	dsq -> demo . frames . size ( ) > 0
>2799	PrimaryExpression	0
>2800	CallExpression	dsq -> demo . frames . size ( )
>2801	ArgumentList	 
>2802	Callee	dsq -> demo . frames . size
>2803	MemberAccess	dsq -> demo . frames . size
>2804	Identifier	size
>2805	MemberAccess	dsq -> demo . frames
>2806	Identifier	frames
>2807	PtrMemberAccess	dsq -> demo
>2808	Identifier	demo
>2809	Identifier	dsq
>2810	Condition	 
>2811	EqualityExpression	c == 'T'
>2812	PrimaryExpression	'T'
>2813	Identifier	c
>2814	CompoundStatement	 
>2815	ExpressionStatement	 
>2816	CallExpression	dsq -> demo . togglePlayback ( true )
>2817	ArgumentList	true
>2818	Argument	true
>2819	Identifier	true
>2820	Callee	dsq -> demo . togglePlayback
>2821	MemberAccess	dsq -> demo . togglePlayback
>2822	Identifier	togglePlayback
>2823	PtrMemberAccess	dsq -> demo
>2824	Identifier	demo
>2825	Identifier	dsq
>2826	Condition	 
>2827	EqualityExpression	c == 'P'
>2828	PrimaryExpression	'P'
>2829	Identifier	c
>2830	CompoundStatement	 
>2831	ExpressionStatement	 
>2832	CallExpression	dsq -> demo . toggleRecord ( true )
>2833	ArgumentList	true
>2834	Argument	true
>2835	Identifier	true
>2836	Callee	dsq -> demo . toggleRecord
>2837	MemberAccess	dsq -> demo . toggleRecord
>2838	Identifier	toggleRecord
>2839	PtrMemberAccess	dsq -> demo
>2840	Identifier	demo
>2841	Identifier	dsq
>2842	Condition	 
>2843	EqualityExpression	c == 'R'
>2844	PrimaryExpression	'R'
>2845	Identifier	c
>2846	CompoundStatement	 
>2847	ExpressionStatement	 
>2848	CallExpression	dsq -> continuity . setCostume ( nm )
>2849	ArgumentList	nm
>2850	Argument	nm
>2851	Identifier	nm
>2852	Callee	dsq -> continuity . setCostume
>2853	MemberAccess	dsq -> continuity . setCostume
>2854	Identifier	setCostume
>2855	PtrMemberAccess	dsq -> continuity
>2856	Identifier	continuity
>2857	Identifier	dsq
>2858	ExpressionStatement	 
>2859	ShiftExpression	is >> read >> nm
>2860	ShiftExpression	read >> nm
>2861	Identifier	nm
>2862	Identifier	read
>2863	Identifier	is
>2864	IdentifierDeclStatement	 
>2865	IdentifierDecl	read = ' '
>2866	AssignmentExpr	read = ' '
>2867	PrimaryExpression	' '
>2868	Identifier	read
>2869	Identifier	read
>2870	IdentifierDeclType	char
>2871	IdentifierDeclStatement	 
>2872	IdentifierDecl	nm
>2873	Identifier	nm
>2874	IdentifierDeclType	std 
>2875	IdentifierDeclStatement	 
>2876	IdentifierDecl	is ( s )
>2877	Identifier	s
>2878	Identifier	is
>2879	IdentifierDeclType	std 
>2880	Condition	 
>2881	EqualityExpression	c == 'C'
>2882	PrimaryExpression	'C'
>2883	Identifier	c
>2884	CompoundStatement	 
>2885	IfStatement	if ( e )
>2886	CompoundStatement	 
>2887	ExpressionStatement	 
>2888	AssignmentExpr	dsq -> cameraPos = game -> getCameraPositionFor ( e -> position )
>2889	CallExpression	game -> getCameraPositionFor ( e -> position )
>2890	ArgumentList	e -> position
>2891	Argument	e -> position
>2892	PtrMemberAccess	e -> position
>2893	Identifier	position
>2894	Identifier	e
>2895	Callee	game -> getCameraPositionFor
>2896	PtrMemberAccess	game -> getCameraPositionFor
>2897	Identifier	getCameraPositionFor
>2898	Identifier	game
>2899	PtrMemberAccess	dsq -> cameraPos
>2900	Identifier	cameraPos
>2901	Identifier	dsq
>2902	Condition	 
>2903	Identifier	e
>2904	IdentifierDeclStatement	 
>2905	IdentifierDecl	* e = dsq -> getEntityByNameNoCase ( entityName )
>2906	AssignmentExpr	* e = dsq -> getEntityByNameNoCase ( entityName )
>2907	CallExpression	dsq -> getEntityByNameNoCase ( entityName )
>2908	ArgumentList	entityName
>2909	Argument	entityName
>2910	Identifier	entityName
>2911	Callee	dsq -> getEntityByNameNoCase
>2912	PtrMemberAccess	dsq -> getEntityByNameNoCase
>2913	Identifier	getEntityByNameNoCase
>2914	Identifier	dsq
>2915	Identifier	e
>2916	Identifier	e
>2917	IdentifierDeclType	Entity *
>2918	ExpressionStatement	 
>2919	ShiftExpression	is >> read >> entityName
>2920	ShiftExpression	read >> entityName
>2921	Identifier	entityName
>2922	Identifier	read
>2923	Identifier	is
>2924	IdentifierDeclStatement	 
>2925	IdentifierDecl	entityName
>2926	Identifier	entityName
>2927	IdentifierDeclType	std 
>2928	IdentifierDeclStatement	 
>2929	IdentifierDecl	read = ' '
>2930	AssignmentExpr	read = ' '
>2931	PrimaryExpression	' '
>2932	Identifier	read
>2933	Identifier	read
>2934	IdentifierDeclType	char
>2935	IdentifierDeclStatement	 
>2936	IdentifierDecl	is ( s )
>2937	Identifier	s
>2938	Identifier	is
>2939	IdentifierDeclType	std 
>2940	Condition	 
>2941	EqualityExpression	c == 'F'
>2942	PrimaryExpression	'F'
>2943	Identifier	c
>2944	CompoundStatement	 
>2945	ExpressionStatement	 
>2946	CallExpression	dsq -> continuity . learnSong ( num )
>2947	ArgumentList	num
>2948	Argument	num
>2949	Identifier	num
>2950	Callee	dsq -> continuity . learnSong
>2951	MemberAccess	dsq -> continuity . learnSong
>2952	Identifier	learnSong
>2953	PtrMemberAccess	dsq -> continuity
>2954	Identifier	continuity
>2955	Identifier	dsq
>2956	ExpressionStatement	 
>2957	ShiftExpression	is >> read >> num
>2958	ShiftExpression	read >> num
>2959	Identifier	num
>2960	Identifier	read
>2961	Identifier	is
>2962	IdentifierDeclStatement	 
>2963	IdentifierDecl	read = ' '
>2964	AssignmentExpr	read = ' '
>2965	PrimaryExpression	' '
>2966	Identifier	read
>2967	Identifier	read
>2968	IdentifierDeclType	char
>2969	IdentifierDeclStatement	 
>2970	IdentifierDecl	num = 0
>2971	AssignmentExpr	num = 0
>2972	PrimaryExpression	0
>2973	Identifier	num
>2974	Identifier	num
>2975	IdentifierDeclType	int
>2976	IdentifierDeclStatement	 
>2977	IdentifierDecl	is ( s )
>2978	Identifier	s
>2979	Identifier	is
>2980	IdentifierDeclType	std 
>2981	Condition	 
>2982	EqualityExpression	c == 'S'
>2983	PrimaryExpression	'S'
>2984	Identifier	c
>2985	CompoundStatement	 
>2986	ExpressionStatement	 
>2987	CallExpression	dsq -> continuity . learnSong ( SONG_BIND )
>2988	ArgumentList	SONG_BIND
>2989	Argument	SONG_BIND
>2990	Identifier	SONG_BIND
>2991	Callee	dsq -> continuity . learnSong
>2992	MemberAccess	dsq -> continuity . learnSong
>2993	Identifier	learnSong
>2994	PtrMemberAccess	dsq -> continuity
>2995	Identifier	continuity
>2996	Identifier	dsq
>2997	ExpressionStatement	 
>2998	CallExpression	dsq -> continuity . learnSong ( SONG_ENERGYFORM )
>2999	ArgumentList	SONG_ENERGYFORM
>3000	Argument	SONG_ENERGYFORM
>3001	Identifier	SONG_ENERGYFORM
>3002	Callee	dsq -> continuity . learnSong
>3003	MemberAccess	dsq -> continuity . learnSong
>3004	Identifier	learnSong
>3005	PtrMemberAccess	dsq -> continuity
>3006	Identifier	continuity
>3007	Identifier	dsq
>3008	ExpressionStatement	 
>3009	CallExpression	dsq -> continuity . learnSong ( SONG_SHIELDAURA )
>3010	ArgumentList	SONG_SHIELDAURA
>3011	Argument	SONG_SHIELDAURA
>3012	Identifier	SONG_SHIELDAURA
>3013	Callee	dsq -> continuity . learnSong
>3014	MemberAccess	dsq -> continuity . learnSong
>3015	Identifier	learnSong
>3016	PtrMemberAccess	dsq -> continuity
>3017	Identifier	continuity
>3018	Identifier	dsq
>3019	Condition	 
>3020	EqualityExpression	c == '0'
>3021	PrimaryExpression	'0'
>3022	Identifier	c
>3023	CompoundStatement	 
>3024	ForStatement	for ( i = 0 ; i < FORMUPGRADE_MAX ; i ++ )
>3025	CompoundStatement	 
>3026	ExpressionStatement	 
>3027	CallExpression	dsq -> continuity . learnFormUpgrade ( ( FormUpgradeType ) i )
>3028	ArgumentList	( FormUpgradeType ) i
>3029	Argument	( FormUpgradeType ) i
>3030	CastExpression	( FormUpgradeType ) i
>3031	Identifier	i
>3032	CastTarget	FormUpgradeType
>3033	Callee	dsq -> continuity . learnFormUpgrade
>3034	MemberAccess	dsq -> continuity . learnFormUpgrade
>3035	Identifier	learnFormUpgrade
>3036	PtrMemberAccess	dsq -> continuity
>3037	Identifier	continuity
>3038	Identifier	dsq
>3039	IncDecOp	 
>3040	IncDec	++
>3041	Identifier	i
>3042	Condition	 
>3043	RelationalExpression	i < FORMUPGRADE_MAX
>3044	Identifier	FORMUPGRADE_MAX
>3045	Identifier	i
>3046	ForInit	 
>3047	AssignmentExpr	i = 0
>3048	PrimaryExpression	0
>3049	Identifier	i
>3050	ForStatement	for ( i = 0 ; i <= SONG_MAX ; i ++ )
>3051	ExpressionStatement	 
>3052	CallExpression	dsq -> continuity . learnSong ( i )
>3053	ArgumentList	i
>3054	Argument	i
>3055	Identifier	i
>3056	Callee	dsq -> continuity . learnSong
>3057	MemberAccess	dsq -> continuity . learnSong
>3058	Identifier	learnSong
>3059	PtrMemberAccess	dsq -> continuity
>3060	Identifier	continuity
>3061	Identifier	dsq
>3062	IncDecOp	 
>3063	IncDec	++
>3064	Identifier	i
>3065	Condition	 
>3066	RelationalExpression	i <= SONG_MAX
>3067	Identifier	SONG_MAX
>3068	Identifier	i
>3069	ForInit	 
>3070	AssignmentExpr	i = 0
>3071	PrimaryExpression	0
>3072	Identifier	i
>3073	Condition	 
>3074	EqualityExpression	c == '9'
>3075	PrimaryExpression	'9'
>3076	Identifier	c
>3077	CompoundStatement	 
>3078	ForStatement	for ( i = 0 ; i <= SONG_MAX ; i ++ )
>3079	ExpressionStatement	 
>3080	CallExpression	dsq -> continuity . learnSong ( i )
>3081	ArgumentList	i
>3082	Argument	i
>3083	Identifier	i
>3084	Callee	dsq -> continuity . learnSong
>3085	MemberAccess	dsq -> continuity . learnSong
>3086	Identifier	learnSong
>3087	PtrMemberAccess	dsq -> continuity
>3088	Identifier	continuity
>3089	Identifier	dsq
>3090	IncDecOp	 
>3091	IncDec	++
>3092	Identifier	i
>3093	Condition	 
>3094	RelationalExpression	i <= SONG_MAX
>3095	Identifier	SONG_MAX
>3096	Identifier	i
>3097	ForInit	 
>3098	AssignmentExpr	i = 0
>3099	PrimaryExpression	0
>3100	Identifier	i
>3101	Condition	 
>3102	EqualityExpression	c == '8'
>3103	PrimaryExpression	'8'
>3104	Identifier	c
>3105	CompoundStatement	 
>3106	ExpressionStatement	 
>3107	CallExpression	dsq -> setStory ( )
>3108	ArgumentList	 
>3109	Callee	dsq -> setStory
>3110	PtrMemberAccess	dsq -> setStory
>3111	Identifier	setStory
>3112	Identifier	dsq
>3113	WhileStatement	while ( core -> getKeyState ( KEY_RETURN ) )
>3114	ExpressionStatement	 
>3115	CallExpression	core -> main ( 0.1 )
>3116	ArgumentList	0.1
>3117	Argument	0.1
>3118	PrimaryExpression	0.1
>3119	Callee	core -> main
>3120	PtrMemberAccess	core -> main
>3121	Identifier	main
>3122	Identifier	core
>3123	Condition	 
>3124	CallExpression	core -> getKeyState ( KEY_RETURN )
>3125	ArgumentList	KEY_RETURN
>3126	Argument	KEY_RETURN
>3127	Identifier	KEY_RETURN
>3128	Callee	core -> getKeyState
>3129	PtrMemberAccess	core -> getKeyState
>3130	Identifier	getKeyState
>3131	Identifier	core
>3132	Condition	 
>3133	EqualityExpression	c == '6'
>3134	PrimaryExpression	'6'
>3135	Identifier	c
>3136	CompoundStatement	 
>3137	ExpressionStatement	 
>3138	AssignmentExpr	dsq -> game -> invinciblity = ! dsq -> game -> invinciblity
>3139	UnaryOp	! dsq -> game -> invinciblity
>3140	PtrMemberAccess	dsq -> game -> invinciblity
>3141	Identifier	invinciblity
>3142	PtrMemberAccess	dsq -> game
>3143	Identifier	game
>3144	Identifier	dsq
>3145	UnaryOperator	!
>3146	PtrMemberAccess	dsq -> game -> invinciblity
>3147	Identifier	invinciblity
>3148	PtrMemberAccess	dsq -> game
>3149	Identifier	game
>3150	Identifier	dsq
>3151	Condition	 
>3152	EqualityExpression	c == '5'
>3153	PrimaryExpression	'5'
>3154	Identifier	c
>3155	CompoundStatement	 
>3156	ExpressionStatement	 
>3157	CallExpression	dsq -> quitNestedMain ( )
>3158	ArgumentList	 
>3159	Callee	dsq -> quitNestedMain
>3160	PtrMemberAccess	dsq -> quitNestedMain
>3161	Identifier	quitNestedMain
>3162	Identifier	dsq
>3163	Condition	 
>3164	EqualityExpression	c == 'Q'
>3165	PrimaryExpression	'Q'
>3166	Identifier	c
>3167	CompoundStatement	 
>3168	ExpressionStatement	 
>3169	CallExpression	dsq -> enqueueJumpState ( state )
>3170	ArgumentList	state
>3171	Argument	state
>3172	Identifier	state
>3173	Callee	dsq -> enqueueJumpState
>3174	PtrMemberAccess	dsq -> enqueueJumpState
>3175	Identifier	enqueueJumpState
>3176	Identifier	dsq
>3177	ExpressionStatement	 
>3178	CallExpression	dsq -> quitNestedMain ( )
>3179	ArgumentList	 
>3180	Callee	dsq -> quitNestedMain
>3181	PtrMemberAccess	dsq -> quitNestedMain
>3182	Identifier	quitNestedMain
>3183	Identifier	dsq
>3184	ExpressionStatement	 
>3185	ShiftExpression	is >> read >> state
>3186	ShiftExpression	read >> state
>3187	Identifier	state
>3188	Identifier	read
>3189	Identifier	is
>3190	IdentifierDeclStatement	 
>3191	IdentifierDecl	read = ' '
>3192	AssignmentExpr	read = ' '
>3193	PrimaryExpression	' '
>3194	Identifier	read
>3195	Identifier	read
>3196	IdentifierDeclType	char
>3197	IdentifierDeclStatement	 
>3198	IdentifierDecl	state
>3199	Identifier	state
>3200	IdentifierDeclType	std 
>3201	IdentifierDeclStatement	 
>3202	IdentifierDecl	is ( s )
>3203	Identifier	s
>3204	Identifier	is
>3205	IdentifierDeclType	std 
>3206	Condition	 
>3207	EqualityExpression	c == 'J'
>3208	PrimaryExpression	'J'
>3209	Identifier	c
>3210	CompoundStatement	 
>3211	ExpressionStatement	 
>3212	CallExpression	dsq -> reloadResources ( )
>3213	ArgumentList	 
>3214	Callee	dsq -> reloadResources
>3215	PtrMemberAccess	dsq -> reloadResources
>3216	Identifier	reloadResources
>3217	Identifier	dsq
>3218	Condition	 
>3219	EqualityExpression	c == 'A'
>3220	PrimaryExpression	'A'
>3221	Identifier	c
>3222	CompoundStatement	 
>3223	ExpressionStatement	 
>3224	CallExpression	dsq -> unloadResources ( )
>3225	ArgumentList	 
>3226	Callee	dsq -> unloadResources
>3227	PtrMemberAccess	dsq -> unloadResources
>3228	Identifier	unloadResources
>3229	Identifier	dsq
>3230	Condition	 
>3231	EqualityExpression	c == 'B'
>3232	PrimaryExpression	'B'
>3233	Identifier	c
>3234	CompoundStatement	 
>3235	ExpressionStatement	 
>3236	CallExpression	dsq -> continuity . reset ( )
>3237	ArgumentList	 
>3238	Callee	dsq -> continuity . reset
>3239	MemberAccess	dsq -> continuity . reset
>3240	Identifier	reset
>3241	PtrMemberAccess	dsq -> continuity
>3242	Identifier	continuity
>3243	Identifier	dsq
>3244	Condition	 
>3245	EqualityExpression	c == '3'
>3246	PrimaryExpression	'3'
>3247	Identifier	c
>3248	CompoundStatement	 
>3249	IfStatement	if ( dsq -> game && dsq -> game -> avatar )
>3250	CompoundStatement	 
>3251	ExpressionStatement	 
>3252	CallExpression	dsq -> game -> avatar -> heal ( 999 )
>3253	ArgumentList	999
>3254	Argument	999
>3255	PrimaryExpression	999
>3256	Callee	dsq -> game -> avatar -> heal
>3257	PtrMemberAccess	dsq -> game -> avatar -> heal
>3258	Identifier	heal
>3259	PtrMemberAccess	dsq -> game -> avatar
>3260	Identifier	avatar
>3261	PtrMemberAccess	dsq -> game
>3262	Identifier	game
>3263	Identifier	dsq
>3264	Condition	 
>3265	AndExpression	dsq -> game && dsq -> game -> avatar
>3266	PtrMemberAccess	dsq -> game -> avatar
>3267	Identifier	avatar
>3268	PtrMemberAccess	dsq -> game
>3269	Identifier	game
>3270	Identifier	dsq
>3271	PtrMemberAccess	dsq -> game
>3272	Identifier	game
>3273	Identifier	dsq
>3274	Condition	 
>3275	EqualityExpression	c == '2'
>3276	PrimaryExpression	'2'
>3277	Identifier	c
>3278	CompoundStatement	 
>3279	ExpressionStatement	 
>3280	CallExpression	dsq -> continuity . loadIngredientData ( )
>3281	ArgumentList	 
>3282	Callee	dsq -> continuity . loadIngredientData
>3283	MemberAccess	dsq -> continuity . loadIngredientData
>3284	Identifier	loadIngredientData
>3285	PtrMemberAccess	dsq -> continuity
>3286	Identifier	continuity
>3287	Identifier	dsq
>3288	ExpressionStatement	 
>3289	CallExpression	dsq -> user . load ( )
>3290	ArgumentList	 
>3291	Callee	dsq -> user . load
>3292	MemberAccess	dsq -> user . load
>3293	Identifier	load
>3294	PtrMemberAccess	dsq -> user
>3295	Identifier	user
>3296	Identifier	dsq
>3297	IfStatement	if ( core -> afterEffectManager )
>3298	CompoundStatement	 
>3299	ExpressionStatement	 
>3300	CallExpression	core -> afterEffectManager -> loadShaders ( )
>3301	ArgumentList	 
>3302	Callee	core -> afterEffectManager -> loadShaders
>3303	PtrMemberAccess	core -> afterEffectManager -> loadShaders
>3304	Identifier	loadShaders
>3305	PtrMemberAccess	core -> afterEffectManager
>3306	Identifier	afterEffectManager
>3307	Identifier	core
>3308	Condition	 
>3309	PtrMemberAccess	core -> afterEffectManager
>3310	Identifier	afterEffectManager
>3311	Identifier	core
>3312	ExpressionStatement	 
>3313	CallExpression	dsq -> game -> loadEntityTypeList ( )
>3314	ArgumentList	 
>3315	Callee	dsq -> game -> loadEntityTypeList
>3316	PtrMemberAccess	dsq -> game -> loadEntityTypeList
>3317	Identifier	loadEntityTypeList
>3318	PtrMemberAccess	dsq -> game
>3319	Identifier	game
>3320	Identifier	dsq
>3321	ExpressionStatement	 
>3322	CallExpression	dsq -> continuity . loadEatBank ( )
>3323	ArgumentList	 
>3324	Callee	dsq -> continuity . loadEatBank
>3325	MemberAccess	dsq -> continuity . loadEatBank
>3326	Identifier	loadEatBank
>3327	PtrMemberAccess	dsq -> continuity
>3328	Identifier	continuity
>3329	Identifier	dsq
>3330	ExpressionStatement	 
>3331	CallExpression	Shot 
>3332	ArgumentList	shotBank1
>3333	Argument	shotBank2
>3334	Identifier	shotBank2
>3335	Argument	shotBank1
>3336	Identifier	shotBank1
>3337	Callee	Shot 
>3338	Identifier	Shot 
>3339	ExpressionStatement	 
>3340	CallExpression	Shot 
>3341	ArgumentList	 
>3342	Callee	Shot 
>3343	Identifier	Shot 
>3344	ExpressionStatement	 
>3345	CallExpression	core -> particleManager -> loadParticleBank ( particleBank1 , particleBank2 )
>3346	ArgumentList	particleBank1
>3347	Argument	particleBank2
>3348	Identifier	particleBank2
>3349	Argument	particleBank1
>3350	Identifier	particleBank1
>3351	Callee	core -> particleManager -> loadParticleBank
>3352	PtrMemberAccess	core -> particleManager -> loadParticleBank
>3353	Identifier	loadParticleBank
>3354	PtrMemberAccess	core -> particleManager
>3355	Identifier	particleManager
>3356	Identifier	core
>3357	ExpressionStatement	 
>3358	CallExpression	v . load ( )
>3359	ArgumentList	 
>3360	Callee	v . load
>3361	MemberAccess	v . load
>3362	Identifier	load
>3363	Identifier	v
>3364	Condition	 
>3365	EqualityExpression	c == '1'
>3366	PrimaryExpression	'1'
>3367	Identifier	c
>3368	IdentifierDeclStatement	 
>3369	IdentifierDecl	i = 0
>3370	AssignmentExpr	i = 0
>3371	PrimaryExpression	0
>3372	Identifier	i
>3373	Identifier	i
>3374	IdentifierDeclType	int
>3375	IdentifierDeclStatement	 
>3376	IdentifierDecl	c = s [ 0 ]
>3377	AssignmentExpr	c = s [ 0 ]
>3378	ArrayIndexing	s [ 0 ]
>3379	PrimaryExpression	0
>3380	Identifier	s
>3381	Identifier	c
>3382	Identifier	c
>3383	IdentifierDeclType	char
>3384	Condition	 
>3385	UnaryOp	! s . empty ( )
>3386	CallExpression	s . empty ( )
>3387	ArgumentList	 
>3388	Callee	s . empty
>3389	MemberAccess	s . empty
>3390	Identifier	empty
>3391	Identifier	s
>3392	UnaryOperator	!
>3393	IfStatement	if ( ! dsq -> game -> isSceneEditorActive ( ) )
>3394	ExpressionStatement	 
>3395	CallExpression	dsq -> game -> togglePause ( false )
>3396	ArgumentList	false
>3397	Argument	false
>3398	Identifier	false
>3399	Callee	dsq -> game -> togglePause
>3400	PtrMemberAccess	dsq -> game -> togglePause
>3401	Identifier	togglePause
>3402	PtrMemberAccess	dsq -> game
>3403	Identifier	game
>3404	Identifier	dsq
>3405	Condition	 
>3406	UnaryOp	! dsq -> game -> isSceneEditorActive ( )
>3407	CallExpression	dsq -> game -> isSceneEditorActive ( )
>3408	ArgumentList	 
>3409	Callee	dsq -> game -> isSceneEditorActive
>3410	PtrMemberAccess	dsq -> game -> isSceneEditorActive
>3411	Identifier	isSceneEditorActive
>3412	PtrMemberAccess	dsq -> game
>3413	Identifier	game
>3414	Identifier	dsq
>3415	UnaryOperator	!
>3416	ExpressionStatement	 
>3417	CallExpression	stringToUpper ( s )
>3418	ArgumentList	s
>3419	Argument	s
>3420	Identifier	s
>3421	Callee	stringToUpper
>3422	Identifier	stringToUpper
>3423	IdentifierDeclStatement	 
>3424	IdentifierDecl	s = dsq -> getUserInputString ( dsq -> continuity . stringBank . get ( 2012 ) , \"\" )
>3425	AssignmentExpr	s = dsq -> getUserInputString ( dsq -> continuity . stringBank . get ( 2012 ) , \"\" )
>3426	CallExpression	dsq -> getUserInputString ( dsq -> continuity . stringBank . get ( 2012 ) , \"\" )
>3427	ArgumentList	dsq -> continuity . stringBank . get ( 2012 )
>3428	Argument	\"\"
>3429	PrimaryExpression	\"\"
>3430	Argument	dsq -> continuity . stringBank . get ( 2012 )
>3431	CallExpression	dsq -> continuity . stringBank . get ( 2012 )
>3432	ArgumentList	2012
>3433	Argument	2012
>3434	PrimaryExpression	2012
>3435	Callee	dsq -> continuity . stringBank . get
>3436	MemberAccess	dsq -> continuity . stringBank . get
>3437	Identifier	get
>3438	MemberAccess	dsq -> continuity . stringBank
>3439	Identifier	stringBank
>3440	PtrMemberAccess	dsq -> continuity
>3441	Identifier	continuity
>3442	Identifier	dsq
>3443	Callee	dsq -> getUserInputString
>3444	PtrMemberAccess	dsq -> getUserInputString
>3445	Identifier	getUserInputString
>3446	Identifier	dsq
>3447	Identifier	s
>3448	Identifier	s
>3449	IdentifierDeclType	std 
>3450	ExpressionStatement	 
>3451	CallExpression	dsq -> game -> togglePause ( true )
>3452	ArgumentList	true
>3453	Argument	true
>3454	Identifier	true
>3455	Callee	dsq -> game -> togglePause
>3456	PtrMemberAccess	dsq -> game -> togglePause
>3457	Identifier	togglePause
>3458	PtrMemberAccess	dsq -> game
>3459	Identifier	game
>3460	Identifier	dsq
>3461	ExpressionStatement	 
>3462	AssignmentExpr	core -> frameOutputMode = false
>3463	Identifier	false
>3464	PtrMemberAccess	core -> frameOutputMode
>3465	Identifier	frameOutputMode
>3466	Identifier	core
>3467	Condition	 
>3468	CallExpression	core -> getShiftState ( )
>3469	ArgumentList	 
>3470	Callee	core -> getShiftState
>3471	PtrMemberAccess	core -> getShiftState
>3472	Identifier	getShiftState
>3473	Identifier	core
>3474	Condition	 
>3475	OrExpression	isDeveloperKeys ( ) || ( mod . isActive ( ) && mod . isDebugMenu ( ) )
>3476	AndExpression	mod . isActive ( ) && mod . isDebugMenu ( )
>3477	CallExpression	mod . isDebugMenu ( )
>3478	ArgumentList	 
>3479	Callee	mod . isDebugMenu
>3480	MemberAccess	mod . isDebugMenu
>3481	Identifier	isDebugMenu
>3482	Identifier	mod
>3483	CallExpression	mod . isActive ( )
>3484	ArgumentList	 
>3485	Callee	mod . isActive
>3486	MemberAccess	mod . isActive
>3487	Identifier	isActive
>3488	Identifier	mod
>3489	CallExpression	isDeveloperKeys ( )
>3490	ArgumentList	 
>3491	Callee	isDeveloperKeys
>3492	Identifier	isDeveloperKeys
>3572	FunctionDef	DSQ 
>3573	ParameterList	 
>3574	ReturnType	void
>3575	CompoundStatement	 
>3576	IfStatement	if ( core -> getCtrlState ( ) && core -> getAltState ( ) )
>3577	ExpressionStatement	 
>3578	CallExpression	takeScreenshot ( )
>3579	ArgumentList	 
>3580	Callee	takeScreenshot
>3581	Identifier	takeScreenshot
>3582	Condition	 
>3583	AndExpression	core -> getCtrlState ( ) && core -> getAltState ( )
>3584	CallExpression	core -> getAltState ( )
>3585	ArgumentList	 
>3586	Callee	core -> getAltState
>3587	PtrMemberAccess	core -> getAltState
>3588	Identifier	getAltState
>3589	Identifier	core
>3590	CallExpression	core -> getCtrlState ( )
>3591	ArgumentList	 
>3592	Callee	core -> getCtrlState
>3593	PtrMemberAccess	core -> getCtrlState
>3594	Identifier	getCtrlState
>3595	Identifier	core
>3617	FunctionDef	loadBitForSoundCache ()
>3618	ParameterList	 
>3619	ReturnType	void
>3620	CompoundStatement	 
>3621	ExpressionStatement	 
>3622	IncDecOp	soundsLoaded ++
>3623	IncDec	++
>3624	Identifier	soundsLoaded
>3625	IfStatement	if ( soundsLoaded > 0 && soundsLoaded < soundsExpected )
>3626	CompoundStatement	 
>3627	IfStatement	if ( soundsLoaded % 4 == 0 )
>3628	CompoundStatement	 
>3629	ExpressionStatement	 
>3630	CallExpression	loadBit ( LOAD_SOUNDCACHE , ( float ) soundsLoaded / soundsExpected )
>3631	ArgumentList	LOAD_SOUNDCACHE
>3632	Argument	( float ) soundsLoaded / soundsExpected
>3633	MultiplicativeExpression	( float ) soundsLoaded / soundsExpected
>3634	Identifier	soundsExpected
>3635	CastExpression	( float ) soundsLoaded
>3636	Identifier	soundsLoaded
>3637	CastTarget	float
>3638	Argument	LOAD_SOUNDCACHE
>3639	Identifier	LOAD_SOUNDCACHE
>3640	Callee	loadBit
>3641	Identifier	loadBit
>3642	Condition	 
>3643	EqualityExpression	soundsLoaded % 4 == 0
>3644	PrimaryExpression	0
>3645	MultiplicativeExpression	soundsLoaded % 4
>3646	PrimaryExpression	4
>3647	Identifier	soundsLoaded
>3648	Condition	 
>3649	AndExpression	soundsLoaded > 0 && soundsLoaded < soundsExpected
>3650	RelationalExpression	soundsLoaded < soundsExpected
>3651	Identifier	soundsExpected
>3652	Identifier	soundsLoaded
>3653	RelationalExpression	soundsLoaded > 0
>3654	PrimaryExpression	0
>3655	Identifier	soundsLoaded
>3666	FunctionDef	loadBitForTexPrecache ()
>3667	ParameterList	 
>3668	ReturnType	void
>3669	CompoundStatement	 
>3670	ExpressionStatement	 
>3671	IncDecOp	texturesLoaded ++
>3672	IncDec	++
>3673	Identifier	texturesLoaded
>3674	IfStatement	if ( texturesLoaded > 0 && texturesLoaded < texturesExpected )
>3675	CompoundStatement	 
>3676	IfStatement	if ( texturesLoaded % 16 == 0 )
>3677	CompoundStatement	 
>3678	ExpressionStatement	 
>3679	CallExpression	loadBit ( LOAD_TEXTURES , ( float ) texturesLoaded / texturesExpected )
>3680	ArgumentList	LOAD_TEXTURES
>3681	Argument	( float ) texturesLoaded / texturesExpected
>3682	MultiplicativeExpression	( float ) texturesLoaded / texturesExpected
>3683	Identifier	texturesExpected
>3684	CastExpression	( float ) texturesLoaded
>3685	Identifier	texturesLoaded
>3686	CastTarget	float
>3687	Argument	LOAD_TEXTURES
>3688	Identifier	LOAD_TEXTURES
>3689	Callee	loadBit
>3690	Identifier	loadBit
>3691	Condition	 
>3692	EqualityExpression	texturesLoaded % 16 == 0
>3693	PrimaryExpression	0
>3694	MultiplicativeExpression	texturesLoaded % 16
>3695	PrimaryExpression	16
>3696	Identifier	texturesLoaded
>3697	Condition	 
>3698	AndExpression	texturesLoaded > 0 && texturesLoaded < texturesExpected
>3699	RelationalExpression	texturesLoaded < texturesExpected
>3700	Identifier	texturesExpected
>3701	Identifier	texturesLoaded
>3702	RelationalExpression	texturesLoaded > 0
>3703	PrimaryExpression	0
>3704	Identifier	texturesLoaded
>3711	FunctionDef	DSQ 
>3712	ParameterList	 
>3713	ReturnType	void
>3714	CompoundStatement	 
>3715	ExpressionStatement	 
>3716	CallExpression	versionLabel -> setText ( os . str ( ) )
>3717	ArgumentList	os . str ( )
>3718	Argument	os . str ( )
>3719	CallExpression	os . str ( )
>3720	ArgumentList	 
>3721	Callee	os . str
>3722	MemberAccess	os . str
>3723	Identifier	str
>3724	Identifier	os
>3725	Callee	versionLabel -> setText
>3726	PtrMemberAccess	versionLabel -> setText
>3727	Identifier	setText
>3728	Identifier	versionLabel
>3729	IfStatement	if ( user . system . allowDangerousScriptFunctions )
>3730	ExpressionStatement	 
>3731	ShiftExpression	os << continuity . stringBank . get ( 2050 )
>3732	CallExpression	continuity . stringBank . get ( 2050 )
>3733	ArgumentList	2050
>3734	Argument	2050
>3735	PrimaryExpression	2050
>3736	Callee	continuity . stringBank . get
>3737	MemberAccess	continuity . stringBank . get
>3738	Identifier	get
>3739	MemberAccess	continuity . stringBank
>3740	Identifier	stringBank
>3741	Identifier	continuity
>3742	Identifier	os
>3743	Condition	 
>3744	MemberAccess	user . system . allowDangerousScriptFunctions
>3745	Identifier	allowDangerousScriptFunctions
>3746	MemberAccess	user . system
>3747	Identifier	system
>3748	Identifier	user
>3749	ExpressionStatement	 
>3750	ShiftExpression	os << AQUARIA_CUSTOM_BUILD_ID
>3751	Identifier	AQUARIA_CUSTOM_BUILD_ID
>3752	Identifier	os
>3753	IfStatement	if ( isFinalCandidate )
>3754	ElseStatement	else
>3755	IfStatement	if ( isReleaseCandidate )
>3756	ElseStatement	else
>3757	IfStatement	if ( isGoldMaster )
>3758	CompoundStatement	 
>3759	Condition	 
>3760	Identifier	isGoldMaster
>3761	CompoundStatement	 
>3762	ExpressionStatement	 
>3763	ShiftExpression	os << \"RC\"
>3764	PrimaryExpression	\"RC\"
>3765	Identifier	os
>3766	Condition	 
>3767	Identifier	isReleaseCandidate
>3768	CompoundStatement	 
>3769	ExpressionStatement	 
>3770	ShiftExpression	os << \"fc\" << VERSION_FC
>3771	ShiftExpression	\"fc\" << VERSION_FC
>3772	Identifier	VERSION_FC
>3773	PrimaryExpression	\"fc\"
>3774	Identifier	os
>3775	Condition	 
>3776	Identifier	isFinalCandidate
>3777	IfStatement	if ( ! isFinalCandidate && ! isGoldMaster && VERSION_BETA )
>3778	CompoundStatement	 
>3779	ExpressionStatement	 
>3780	ShiftExpression	os << \"b\" << VERSION_BETA
>3781	ShiftExpression	\"b\" << VERSION_BETA
>3782	Identifier	VERSION_BETA
>3783	PrimaryExpression	\"b\"
>3784	Identifier	os
>3785	Condition	 
>3786	AndExpression	! isFinalCandidate && ! isGoldMaster && VERSION_BETA
>3787	AndExpression	! isGoldMaster && VERSION_BETA
>3788	Identifier	VERSION_BETA
>3789	UnaryOp	! isGoldMaster
>3790	Identifier	isGoldMaster
>3791	UnaryOperator	!
>3792	UnaryOp	! isFinalCandidate
>3793	Identifier	isFinalCandidate
>3794	UnaryOperator	!
>3795	ExpressionStatement	 
>3796	ShiftExpression	os << \" v\" << VERSION_MAJOR << \".\" << VERSION_MINOR << \".\" << VERSION_REVISION
>3797	ShiftExpression	\" v\" << VERSION_MAJOR << \".\" << VERSION_MINOR << \".\" << VERSION_REVISION
>3798	ShiftExpression	VERSION_MAJOR << \".\" << VERSION_MINOR << \".\" << VERSION_REVISION
>3799	ShiftExpression	\".\" << VERSION_MINOR << \".\" << VERSION_REVISION
>3800	ShiftExpression	VERSION_MINOR << \".\" << VERSION_REVISION
>3801	ShiftExpression	\".\" << VERSION_REVISION
>3802	Identifier	VERSION_REVISION
>3803	PrimaryExpression	\".\"
>3804	Identifier	VERSION_MINOR
>3805	PrimaryExpression	\".\"
>3806	Identifier	VERSION_MAJOR
>3807	PrimaryExpression	\" v\"
>3808	Identifier	os
>3809	ExpressionStatement	 
>3810	ShiftExpression	os << \" Demo\"
>3811	PrimaryExpression	\" Demo\"
>3812	Identifier	os
>3813	ExpressionStatement	 
>3814	ShiftExpression	os << \"Aquaria\"
>3815	PrimaryExpression	\"Aquaria\"
>3816	Identifier	os
>3817	IdentifierDeclStatement	 
>3818	IdentifierDecl	os
>3819	Identifier	os
>3820	IdentifierDeclType	std 
>3821	ReturnStatement	 
>3822	ExpressionStatement	 
>3823	CallExpression	versionLabel -> setText ( overrideText )
>3824	ArgumentList	overrideText
>3825	Argument	overrideText
>3826	Identifier	overrideText
>3827	Callee	versionLabel -> setText
>3828	PtrMemberAccess	versionLabel -> setText
>3829	Identifier	setText
>3830	Identifier	versionLabel
>3831	IfStatement	if ( user . system . allowDangerousScriptFunctions )
>3832	ExpressionStatement	 
>3833	AssignmentExpr	overrideText += continuity . stringBank . get ( 2050 )
>3834	CallExpression	continuity . stringBank . get ( 2050 )
>3835	ArgumentList	2050
>3836	Argument	2050
>3837	PrimaryExpression	2050
>3838	Callee	continuity . stringBank . get
>3839	MemberAccess	continuity . stringBank . get
>3840	Identifier	get
>3841	MemberAccess	continuity . stringBank
>3842	Identifier	stringBank
>3843	Identifier	continuity
>3844	Identifier	overrideText
>3845	Condition	 
>3846	MemberAccess	user . system . allowDangerousScriptFunctions
>3847	Identifier	allowDangerousScriptFunctions
>3848	MemberAccess	user . system
>3849	Identifier	system
>3850	Identifier	user
>3851	IdentifierDeclStatement	 
>3852	IdentifierDecl	overrideText = AQUARIA_OVERRIDE_VERSION_STRING
>3853	AssignmentExpr	overrideText = AQUARIA_OVERRIDE_VERSION_STRING
>3854	Identifier	AQUARIA_OVERRIDE_VERSION_STRING
>3855	Identifier	AQUARIA_OVERRIDE_VERSION_STRING
>3856	Identifier	overrideText
>3857	IdentifierDeclType	std 
>3876	FunctionDef	sdlVideoModeOK (const int w , const int h , const int bpp)
>3877	ParameterList	const int w , const int h , const int bpp
>3878	Parameter	 
>3879	Identifier	bpp
>3880	ParameterType	const int
>3881	Parameter	 
>3882	Identifier	h
>3883	ParameterType	const int
>3884	Parameter	 
>3885	Identifier	w
>3886	ParameterType	const int
>3887	ReturnType	static bool
>3888	CompoundStatement	 
>3889	ReturnStatement	 
>3890	Identifier	false
>3891	ForStatement	for ( int i = 0 ; i < modecount ; i ++ )
>3892	CompoundStatement	 
>3893	IfStatement	if ( ! mode . w || ! mode . h || ( w >= mode . w && h >= mode . h ) )
>3894	CompoundStatement	 
>3895	ReturnStatement	 
>3896	Identifier	true
>3897	Condition	 
>3898	OrExpression	! mode . w || ! mode . h || ( w >= mode . w && h >= mode . h )
>3899	OrExpression	! mode . h || ( w >= mode . w && h >= mode . h )
>3900	AndExpression	w >= mode . w && h >= mode . h
>3901	RelationalExpression	h >= mode . h
>3902	MemberAccess	mode . h
>3903	Identifier	h
>3904	Identifier	mode
>3905	Identifier	h
>3906	RelationalExpression	w >= mode . w
>3907	MemberAccess	mode . w
>3908	Identifier	w
>3909	Identifier	mode
>3910	Identifier	w
>3911	UnaryOp	! mode . h
>3912	MemberAccess	mode . h
>3913	Identifier	h
>3914	Identifier	mode
>3915	UnaryOperator	!
>3916	UnaryOp	! mode . w
>3917	MemberAccess	mode . w
>3918	Identifier	w
>3919	Identifier	mode
>3920	UnaryOperator	!
>3921	ExpressionStatement	 
>3922	CallExpression	SDL_GetDisplayMode ( 0 , i , & mode )
>3923	ArgumentList	0
>3924	Argument	& mode
>3925	UnaryOp	& mode
>3926	Identifier	mode
>3927	UnaryOperator	&
>3928	Argument	i
>3929	Identifier	i
>3930	Argument	0
>3931	PrimaryExpression	0
>3932	Callee	SDL_GetDisplayMode
>3933	Identifier	SDL_GetDisplayMode
>3934	IncDecOp	 
>3935	IncDec	++
>3936	Identifier	i
>3937	Condition	 
>3938	RelationalExpression	i < modecount
>3939	Identifier	modecount
>3940	Identifier	i
>3941	ForInit	 
>3942	IdentifierDeclStatement	int i = 0 ;
>3943	IdentifierDecl	i = 0
>3944	AssignmentExpr	i = 0
>3945	PrimaryExpression	0
>3946	Identifier	i
>3947	Identifier	i
>3948	IdentifierDeclType	int
>3949	IdentifierDeclStatement	 
>3950	IdentifierDecl	modecount = SDL_GetNumDisplayModes ( 0 )
>3951	AssignmentExpr	modecount = SDL_GetNumDisplayModes ( 0 )
>3952	CallExpression	SDL_GetNumDisplayModes ( 0 )
>3953	ArgumentList	0
>3954	Argument	0
>3955	PrimaryExpression	0
>3956	Callee	SDL_GetNumDisplayModes
>3957	Identifier	SDL_GetNumDisplayModes
>3958	Identifier	modecount
>3959	Identifier	modecount
>3960	IdentifierDeclType	const int
>3961	IdentifierDeclStatement	 
>3962	IdentifierDecl	mode
>3963	Identifier	mode
>3964	IdentifierDeclType	SDL_DisplayMode
>3980	FunctionDef	DSQ 
>3981	ParameterList	 
>3982	ReturnType	void
>3983	CompoundStatement	 
>3984	IfStatement	if ( isDeveloperKeys ( ) )
>3985	ElseStatement	else
>3986	ExpressionStatement	 
>3987	CallExpression	enqueueJumpState ( \"BitBlotLogo\" )
>3988	ArgumentList	\"BitBlotLogo\"
>3989	Argument	\"BitBlotLogo\"
>3990	PrimaryExpression	\"BitBlotLogo\"
>3991	Callee	enqueueJumpState
>3992	Identifier	enqueueJumpState
>3993	ExpressionStatement	 
>3994	CallExpression	title ( )
>3995	ArgumentList	 
>3996	Callee	title
>3997	Identifier	title
>3998	Condition	 
>3999	CallExpression	isDeveloperKeys ( )
>4000	ArgumentList	 
>4001	Callee	isDeveloperKeys
>4002	Identifier	isDeveloperKeys
>4003	ExpressionStatement	 
>4004	CallExpression	bindInput ( )
>4005	ArgumentList	 
>4006	Callee	bindInput
>4007	Identifier	bindInput
>4008	ExpressionStatement	 
>4009	CallExpression	setInputGrab ( 1 )
>4010	ArgumentList	1
>4011	Argument	1
>4012	PrimaryExpression	1
>4013	Callee	setInputGrab
>4014	Identifier	setInputGrab
>4015	IfStatement	if ( useFrameBuffer && core -> frameBuffer . isInited ( ) )
>4016	ElseStatement	else
>4017	ExpressionStatement	 
>4018	AssignmentExpr	core -> afterEffectManager = 0
>4019	PrimaryExpression	0
>4020	PtrMemberAccess	core -> afterEffectManager
>4021	Identifier	afterEffectManager
>4022	Identifier	core
>4023	ExpressionStatement	 
>4024	AssignmentExpr	core -> afterEffectManager = new AfterEffectManager ( vars -> afterEffectsXDivs , vars -> afterEffectsYDivs )
>4025	Expression	vars -> afterEffectsXDivs , vars -> afterEffectsYDivs
>4026	PtrMemberAccess	vars -> afterEffectsYDivs
>4027	Identifier	afterEffectsYDivs
>4028	Identifier	vars
>4029	PtrMemberAccess	vars -> afterEffectsXDivs
>4030	Identifier	afterEffectsXDivs
>4031	Identifier	vars
>4032	PtrMemberAccess	core -> afterEffectManager
>4033	Identifier	afterEffectManager
>4034	Identifier	core
>4035	Condition	 
>4036	AndExpression	useFrameBuffer && core -> frameBuffer . isInited ( )
>4037	CallExpression	core -> frameBuffer . isInited ( )
>4038	ArgumentList	 
>4039	Callee	core -> frameBuffer . isInited
>4040	MemberAccess	core -> frameBuffer . isInited
>4041	Identifier	isInited
>4042	PtrMemberAccess	core -> frameBuffer
>4043	Identifier	frameBuffer
>4044	Identifier	core
>4045	Identifier	useFrameBuffer
>4046	ExpressionStatement	 
>4047	CallExpression	removeRenderObject ( tube )
>4048	ArgumentList	tube
>4049	Argument	tube
>4050	Identifier	tube
>4051	Callee	removeRenderObject
>4052	Identifier	removeRenderObject
>4053	ExpressionStatement	 
>4054	CallExpression	removeRenderObject ( label )
>4055	ArgumentList	label
>4056	Argument	label
>4057	Identifier	label
>4058	Callee	removeRenderObject
>4059	Identifier	removeRenderObject
>4060	ExpressionStatement	 
>4061	CallExpression	removeRenderObject ( sider )
>4062	ArgumentList	sider
>4063	Argument	sider
>4064	Identifier	sider
>4065	Callee	removeRenderObject
>4066	Identifier	removeRenderObject
>4067	ExpressionStatement	 
>4068	CallExpression	removeRenderObject ( sidel )
>4069	ArgumentList	sidel
>4070	Argument	sidel
>4071	Identifier	sidel
>4072	Callee	removeRenderObject
>4073	Identifier	removeRenderObject
>4074	ExpressionStatement	 
>4075	AssignmentExpr	loading = 0
>4076	PrimaryExpression	0
>4077	Identifier	loading
>4078	ExpressionStatement	 
>4079	CallExpression	removeRenderObject ( loading )
>4080	ArgumentList	loading
>4081	Argument	loading
>4082	Identifier	loading
>4083	Callee	removeRenderObject
>4084	Identifier	removeRenderObject
>4085	IfStatement	if ( ! isDeveloperKeys ( ) )
>4086	CompoundStatement	 
>4087	ExpressionStatement	 
>4088	CallExpression	core -> main ( trans )
>4089	ArgumentList	trans
>4090	Argument	trans
>4091	Identifier	trans
>4092	Callee	core -> main
>4093	PtrMemberAccess	core -> main
>4094	Identifier	main
>4095	Identifier	core
>4096	ExpressionStatement	 
>4097	CallExpression	overlay -> alpha . interpolateTo ( 1 , trans )
>4098	ArgumentList	1
>4099	Argument	trans
>4100	Identifier	trans
>4101	Argument	1
>4102	PrimaryExpression	1
>4103	Callee	overlay -> alpha . interpolateTo
>4104	MemberAccess	overlay -> alpha . interpolateTo
>4105	Identifier	interpolateTo
>4106	PtrMemberAccess	overlay -> alpha
>4107	Identifier	alpha
>4108	Identifier	overlay
>4109	IdentifierDeclStatement	 
>4110	IdentifierDecl	trans = 0.5
>4111	AssignmentExpr	trans = 0.5
>4112	PrimaryExpression	0.5
>4113	Identifier	trans
>4114	Identifier	trans
>4115	IdentifierDeclType	float
>4116	Condition	 
>4117	UnaryOp	! isDeveloperKeys ( )
>4118	CallExpression	isDeveloperKeys ( )
>4119	ArgumentList	 
>4120	Callee	isDeveloperKeys
>4121	Identifier	isDeveloperKeys
>4122	UnaryOperator	!
>4123	ExpressionStatement	 
>4124	CallExpression	loadBit ( LOAD_FINISHED )
>4125	ArgumentList	LOAD_FINISHED
>4126	Argument	LOAD_FINISHED
>4127	Identifier	LOAD_FINISHED
>4128	Callee	loadBit
>4129	Identifier	loadBit
>4130	ExpressionStatement	 
>4131	CallExpression	setMousePosition ( core -> center )
>4132	ArgumentList	core -> center
>4133	Argument	core -> center
>4134	PtrMemberAccess	core -> center
>4135	Identifier	center
>4136	Identifier	core
>4137	Callee	setMousePosition
>4138	Identifier	setMousePosition
>4139	ExpressionStatement	 
>4140	AssignmentExpr	renderObjectLayerOrder [ LR_ENTITIES_MINUS2 ] = - 1
>4141	UnaryOp	- 1
>4142	PrimaryExpression	1
>4143	UnaryOperator	-
>4144	ArrayIndexing	renderObjectLayerOrder [ LR_ENTITIES_MINUS2 ]
>4145	Identifier	LR_ENTITIES_MINUS2
>4146	Identifier	renderObjectLayerOrder
>4147	ExpressionStatement	 
>4148	AssignmentExpr	renderObjectLayerOrder [ LR_ENTITIES_MINUS3 ] = - 1
>4149	UnaryOp	- 1
>4150	PrimaryExpression	1
>4151	UnaryOperator	-
>4152	ArrayIndexing	renderObjectLayerOrder [ LR_ENTITIES_MINUS3 ]
>4153	Identifier	LR_ENTITIES_MINUS3
>4154	Identifier	renderObjectLayerOrder
>4155	ExpressionStatement	 
>4156	AssignmentExpr	renderObjectLayerOrder [ LR_ENTITIES_MINUS4 ] = - 1
>4157	UnaryOp	- 1
>4158	PrimaryExpression	1
>4159	UnaryOperator	-
>4160	ArrayIndexing	renderObjectLayerOrder [ LR_ENTITIES_MINUS4 ]
>4161	Identifier	LR_ENTITIES_MINUS4
>4162	Identifier	renderObjectLayerOrder
>4163	ExpressionStatement	 
>4164	AssignmentExpr	renderObjectLayerOrder [ LR_ELEMENTS13 ] = - 1
>4165	UnaryOp	- 1
>4166	PrimaryExpression	1
>4167	UnaryOperator	-
>4168	ArrayIndexing	renderObjectLayerOrder [ LR_ELEMENTS13 ]
>4169	Identifier	LR_ELEMENTS13
>4170	Identifier	renderObjectLayerOrder
>4171	ExpressionStatement	 
>4172	AssignmentExpr	renderObjectLayerOrder [ LR_ELEMENTS16 ] = - 1
>4173	UnaryOp	- 1
>4174	PrimaryExpression	1
>4175	UnaryOperator	-
>4176	ArrayIndexing	renderObjectLayerOrder [ LR_ELEMENTS16 ]
>4177	Identifier	LR_ELEMENTS16
>4178	Identifier	renderObjectLayerOrder
>4179	ExpressionStatement	 
>4180	AssignmentExpr	renderObjectLayerOrder [ LR_ELEMENTS15 ] = - 1
>4181	UnaryOp	- 1
>4182	PrimaryExpression	1
>4183	UnaryOperator	-
>4184	ArrayIndexing	renderObjectLayerOrder [ LR_ELEMENTS15 ]
>4185	Identifier	LR_ELEMENTS15
>4186	Identifier	renderObjectLayerOrder
>4187	ExpressionStatement	 
>4188	AssignmentExpr	renderObjectLayerOrder [ LR_ELEMENTS14 ] = - 1
>4189	UnaryOp	- 1
>4190	PrimaryExpression	1
>4191	UnaryOperator	-
>4192	ArrayIndexing	renderObjectLayerOrder [ LR_ELEMENTS14 ]
>4193	Identifier	LR_ELEMENTS14
>4194	Identifier	renderObjectLayerOrder
>4195	ExpressionStatement	 
>4196	AssignmentExpr	renderObjectLayerOrder [ LR_ELEMENTS12 ] = - 1
>4197	UnaryOp	- 1
>4198	PrimaryExpression	1
>4199	UnaryOperator	-
>4200	ArrayIndexing	renderObjectLayerOrder [ LR_ELEMENTS12 ]
>4201	Identifier	LR_ELEMENTS12
>4202	Identifier	renderObjectLayerOrder
>4203	ExpressionStatement	 
>4204	AssignmentExpr	renderObjectLayerOrder [ LR_ELEMENTS11 ] = - 1
>4205	UnaryOp	- 1
>4206	PrimaryExpression	1
>4207	UnaryOperator	-
>4208	ArrayIndexing	renderObjectLayerOrder [ LR_ELEMENTS11 ]
>4209	Identifier	LR_ELEMENTS11
>4210	Identifier	renderObjectLayerOrder
>4211	ExpressionStatement	 
>4212	AssignmentExpr	renderObjectLayerOrder [ LR_ELEMENTS10 ] = - 1
>4213	UnaryOp	- 1
>4214	PrimaryExpression	1
>4215	UnaryOperator	-
>4216	ArrayIndexing	renderObjectLayerOrder [ LR_ELEMENTS10 ]
>4217	Identifier	LR_ELEMENTS10
>4218	Identifier	renderObjectLayerOrder
>4219	ExpressionStatement	 
>4220	AssignmentExpr	renderObjectLayerOrder [ LR_ELEMENTS9 ] = - 1
>4221	UnaryOp	- 1
>4222	PrimaryExpression	1
>4223	UnaryOperator	-
>4224	ArrayIndexing	renderObjectLayerOrder [ LR_ELEMENTS9 ]
>4225	Identifier	LR_ELEMENTS9
>4226	Identifier	renderObjectLayerOrder
>4227	ExpressionStatement	 
>4228	AssignmentExpr	renderObjectLayerOrder [ LR_ELEMENTS8 ] = - 1
>4229	UnaryOp	- 1
>4230	PrimaryExpression	1
>4231	UnaryOperator	-
>4232	ArrayIndexing	renderObjectLayerOrder [ LR_ELEMENTS8 ]
>4233	Identifier	LR_ELEMENTS8
>4234	Identifier	renderObjectLayerOrder
>4235	ExpressionStatement	 
>4236	AssignmentExpr	renderObjectLayerOrder [ LR_ELEMENTS3 ] = - 1
>4237	UnaryOp	- 1
>4238	PrimaryExpression	1
>4239	UnaryOperator	-
>4240	ArrayIndexing	renderObjectLayerOrder [ LR_ELEMENTS3 ]
>4241	Identifier	LR_ELEMENTS3
>4242	Identifier	renderObjectLayerOrder
>4243	ExpressionStatement	 
>4244	AssignmentExpr	renderObjectLayerOrder [ LR_ELEMENTS2 ] = - 1
>4245	UnaryOp	- 1
>4246	PrimaryExpression	1
>4247	UnaryOperator	-
>4248	ArrayIndexing	renderObjectLayerOrder [ LR_ELEMENTS2 ]
>4249	Identifier	LR_ELEMENTS2
>4250	Identifier	renderObjectLayerOrder
>4251	ExpressionStatement	 
>4252	AssignmentExpr	renderObjectLayerOrder [ LR_ELEMENTS1 ] = - 1
>4253	UnaryOp	- 1
>4254	PrimaryExpression	1
>4255	UnaryOperator	-
>4256	ArrayIndexing	renderObjectLayerOrder [ LR_ELEMENTS1 ]
>4257	Identifier	LR_ELEMENTS1
>4258	Identifier	renderObjectLayerOrder
>4259	ExpressionStatement	 
>4260	AssignmentExpr	renderObjectLayerOrder [ LR_BACKDROP_ELEMENTS6 ] = LR_ELEMENTS16
>4261	Identifier	LR_ELEMENTS16
>4262	ArrayIndexing	renderObjectLayerOrder [ LR_BACKDROP_ELEMENTS6 ]
>4263	Identifier	LR_BACKDROP_ELEMENTS6
>4264	Identifier	renderObjectLayerOrder
>4265	ExpressionStatement	 
>4266	AssignmentExpr	renderObjectLayerOrder [ LR_BACKDROP_ELEMENTS5 ] = LR_ELEMENTS15
>4267	Identifier	LR_ELEMENTS15
>4268	ArrayIndexing	renderObjectLayerOrder [ LR_BACKDROP_ELEMENTS5 ]
>4269	Identifier	LR_BACKDROP_ELEMENTS5
>4270	Identifier	renderObjectLayerOrder
>4271	ExpressionStatement	 
>4272	AssignmentExpr	renderObjectLayerOrder [ LR_BACKDROP_ELEMENTS4 ] = LR_ELEMENTS14
>4273	Identifier	LR_ELEMENTS14
>4274	ArrayIndexing	renderObjectLayerOrder [ LR_BACKDROP_ELEMENTS4 ]
>4275	Identifier	LR_BACKDROP_ELEMENTS4
>4276	Identifier	renderObjectLayerOrder
>4277	ExpressionStatement	 
>4278	AssignmentExpr	renderObjectLayerOrder [ LR_DARK_LAYER ] = LR_ELEMENTS13
>4279	Identifier	LR_ELEMENTS13
>4280	ArrayIndexing	renderObjectLayerOrder [ LR_DARK_LAYER ]
>4281	Identifier	LR_DARK_LAYER
>4282	Identifier	renderObjectLayerOrder
>4283	ExpressionStatement	 
>4284	AssignmentExpr	renderObjectLayerOrder [ LR_ENTITIES_MINUS2_PLACEHOLDER ] = LR_ENTITIES_MINUS2
>4285	Identifier	LR_ENTITIES_MINUS2
>4286	ArrayIndexing	renderObjectLayerOrder [ LR_ENTITIES_MINUS2_PLACEHOLDER ]
>4287	Identifier	LR_ENTITIES_MINUS2_PLACEHOLDER
>4288	Identifier	renderObjectLayerOrder
>4289	ExpressionStatement	 
>4290	AssignmentExpr	renderObjectLayerOrder [ LR_ENTITIES_MINUS3_PLACEHOLDER ] = LR_ENTITIES_MINUS3
>4291	Identifier	LR_ENTITIES_MINUS3
>4292	ArrayIndexing	renderObjectLayerOrder [ LR_ENTITIES_MINUS3_PLACEHOLDER ]
>4293	Identifier	LR_ENTITIES_MINUS3_PLACEHOLDER
>4294	Identifier	renderObjectLayerOrder
>4295	ExpressionStatement	 
>4296	AssignmentExpr	renderObjectLayerOrder [ LR_ENTITIES_MINUS4_PLACEHOLDER ] = LR_ENTITIES_MINUS4
>4297	Identifier	LR_ENTITIES_MINUS4
>4298	ArrayIndexing	renderObjectLayerOrder [ LR_ENTITIES_MINUS4_PLACEHOLDER ]
>4299	Identifier	LR_ENTITIES_MINUS4_PLACEHOLDER
>4300	Identifier	renderObjectLayerOrder
>4301	ExpressionStatement	 
>4302	AssignmentExpr	renderObjectLayerOrder [ LR_BACKDROP_ELEMENTS3 ] = LR_ELEMENTS12
>4303	Identifier	LR_ELEMENTS12
>4304	ArrayIndexing	renderObjectLayerOrder [ LR_BACKDROP_ELEMENTS3 ]
>4305	Identifier	LR_BACKDROP_ELEMENTS3
>4306	Identifier	renderObjectLayerOrder
>4307	ExpressionStatement	 
>4308	AssignmentExpr	renderObjectLayerOrder [ LR_BACKDROP_ELEMENTS2 ] = LR_ELEMENTS11
>4309	Identifier	LR_ELEMENTS11
>4310	ArrayIndexing	renderObjectLayerOrder [ LR_BACKDROP_ELEMENTS2 ]
>4311	Identifier	LR_BACKDROP_ELEMENTS2
>4312	Identifier	renderObjectLayerOrder
>4313	ExpressionStatement	 
>4314	AssignmentExpr	renderObjectLayerOrder [ LR_BACKDROP_ELEMENTS1 ] = LR_ELEMENTS10
>4315	Identifier	LR_ELEMENTS10
>4316	ArrayIndexing	renderObjectLayerOrder [ LR_BACKDROP_ELEMENTS1 ]
>4317	Identifier	LR_BACKDROP_ELEMENTS1
>4318	Identifier	renderObjectLayerOrder
>4319	ExpressionStatement	 
>4320	AssignmentExpr	renderObjectLayerOrder [ LR_FOREGROUND_ELEMENTS2 ] = LR_ELEMENTS9
>4321	Identifier	LR_ELEMENTS9
>4322	ArrayIndexing	renderObjectLayerOrder [ LR_FOREGROUND_ELEMENTS2 ]
>4323	Identifier	LR_FOREGROUND_ELEMENTS2
>4324	Identifier	renderObjectLayerOrder
>4325	ExpressionStatement	 
>4326	AssignmentExpr	renderObjectLayerOrder [ LR_FOREGROUND_ELEMENTS1 ] = LR_ELEMENTS8
>4327	Identifier	LR_ELEMENTS8
>4328	ArrayIndexing	renderObjectLayerOrder [ LR_FOREGROUND_ELEMENTS1 ]
>4329	Identifier	LR_FOREGROUND_ELEMENTS1
>4330	Identifier	renderObjectLayerOrder
>4331	ExpressionStatement	 
>4332	AssignmentExpr	renderObjectLayerOrder [ LR_BACKGROUND_ELEMENTS3 ] = LR_ELEMENTS3
>4333	Identifier	LR_ELEMENTS3
>4334	ArrayIndexing	renderObjectLayerOrder [ LR_BACKGROUND_ELEMENTS3 ]
>4335	Identifier	LR_BACKGROUND_ELEMENTS3
>4336	Identifier	renderObjectLayerOrder
>4337	ExpressionStatement	 
>4338	AssignmentExpr	renderObjectLayerOrder [ LR_BACKGROUND_ELEMENTS2 ] = LR_ELEMENTS2
>4339	Identifier	LR_ELEMENTS2
>4340	ArrayIndexing	renderObjectLayerOrder [ LR_BACKGROUND_ELEMENTS2 ]
>4341	Identifier	LR_BACKGROUND_ELEMENTS2
>4342	Identifier	renderObjectLayerOrder
>4343	ExpressionStatement	 
>4344	AssignmentExpr	renderObjectLayerOrder [ LR_BACKGROUND_ELEMENTS1 ] = LR_ELEMENTS1
>4345	Identifier	LR_ELEMENTS1
>4346	ArrayIndexing	renderObjectLayerOrder [ LR_BACKGROUND_ELEMENTS1 ]
>4347	Identifier	LR_BACKGROUND_ELEMENTS1
>4348	Identifier	renderObjectLayerOrder
>4349	ExpressionStatement	 
>4350	CallExpression	resetLayerPasses ( )
>4351	ArgumentList	 
>4352	Callee	resetLayerPasses
>4353	Identifier	resetLayerPasses
>4354	ExpressionStatement	 
>4355	CallExpression	loadBit ( LOAD_TEXTURES )
>4356	ArgumentList	LOAD_TEXTURES
>4357	Argument	LOAD_TEXTURES
>4358	Identifier	LOAD_TEXTURES
>4359	Callee	loadBit
>4360	Identifier	loadBit
>4361	ExpressionStatement	 
>4362	CallExpression	setTexturePointers ( )
>4363	ArgumentList	 
>4364	Callee	setTexturePointers
>4365	Identifier	setTexturePointers
>4366	ExpressionStatement	 
>4367	CallExpression	precacher . precacheList ( \"data/precache.txt\" , loadBitForTexPrecache )
>4368	ArgumentList	\"data/precache.txt\"
>4369	Argument	loadBitForTexPrecache
>4370	Identifier	loadBitForTexPrecache
>4371	Argument	\"data/precache.txt\"
>4372	PrimaryExpression	\"data/precache.txt\"
>4373	Callee	precacher . precacheList
>4374	MemberAccess	precacher . precacheList
>4375	Identifier	precacheList
>4376	Identifier	precacher
>4377	ExpressionStatement	 
>4378	CallExpression	addRenderObject ( fpsText , LR_DEBUG_TEXT )
>4379	ArgumentList	fpsText
>4380	Argument	LR_DEBUG_TEXT
>4381	Identifier	LR_DEBUG_TEXT
>4382	Argument	fpsText
>4383	Identifier	fpsText
>4384	Callee	addRenderObject
>4385	Identifier	addRenderObject
>4386	CompoundStatement	 
>4387	ExpressionStatement	 
>4388	AssignmentExpr	fpsText -> alpha = 0
>4389	PrimaryExpression	0
>4390	PtrMemberAccess	fpsText -> alpha
>4391	Identifier	alpha
>4392	Identifier	fpsText
>4393	ExpressionStatement	 
>4394	CallExpression	fpsText -> setText ( \"FPS\" )
>4395	ArgumentList	\"FPS\"
>4396	Argument	\"FPS\"
>4397	PrimaryExpression	\"FPS\"
>4398	Callee	fpsText -> setText
>4399	PtrMemberAccess	fpsText -> setText
>4400	Identifier	setText
>4401	Identifier	fpsText
>4402	ExpressionStatement	 
>4403	AssignmentExpr	fpsText -> position . z = 5
>4404	PrimaryExpression	5
>4405	MemberAccess	fpsText -> position . z
>4406	Identifier	z
>4407	PtrMemberAccess	fpsText -> position
>4408	Identifier	position
>4409	Identifier	fpsText
>4410	ExpressionStatement	 
>4411	AssignmentExpr	fpsText -> position = Vector ( 10 - virtualOffX , 580 )
>4412	CallExpression	Vector ( 10 - virtualOffX , 580 )
>4413	ArgumentList	10 - virtualOffX
>4414	Argument	580
>4415	PrimaryExpression	580
>4416	Argument	10 - virtualOffX
>4417	AdditiveExpression	10 - virtualOffX
>4418	Identifier	virtualOffX
>4419	PrimaryExpression	10
>4420	Callee	Vector
>4421	Identifier	Vector
>4422	PtrMemberAccess	fpsText -> position
>4423	Identifier	position
>4424	Identifier	fpsText
>4425	ExpressionStatement	 
>4426	CallExpression	fpsText -> setFontSize ( 6 )
>4427	ArgumentList	6
>4428	Argument	6
>4429	PrimaryExpression	6
>4430	Callee	fpsText -> setFontSize
>4431	PtrMemberAccess	fpsText -> setFontSize
>4432	Identifier	setFontSize
>4433	Identifier	fpsText
>4434	ExpressionStatement	 
>4435	AssignmentExpr	fpsText -> color = Vector ( 1 , 1 , 1 )
>4436	CallExpression	Vector ( 1 , 1 , 1 )
>4437	ArgumentList	1
>4438	Argument	1
>4439	PrimaryExpression	1
>4440	Argument	1
>4441	PrimaryExpression	1
>4442	Argument	1
>4443	PrimaryExpression	1
>4444	Callee	Vector
>4445	Identifier	Vector
>4446	PtrMemberAccess	fpsText -> color
>4447	Identifier	color
>4448	Identifier	fpsText
>4449	ExpressionStatement	 
>4450	Identifier	DebugFont
>4451	Statement	 
>4452	Statement	 
>4453	Statement	 
>4454	ExpressionStatement	 
>4455	CallExpression	addRenderObject ( profRender , LR_DEBUG_TEXT )
>4456	ArgumentList	profRender
>4457	Argument	LR_DEBUG_TEXT
>4458	Identifier	LR_DEBUG_TEXT
>4459	Argument	profRender
>4460	Identifier	profRender
>4461	Callee	addRenderObject
>4462	Identifier	addRenderObject
>4463	ExpressionStatement	 
>4464	AssignmentExpr	profRender -> alpha = 0
>4465	PrimaryExpression	0
>4466	PtrMemberAccess	profRender -> alpha
>4467	Identifier	alpha
>4468	Identifier	profRender
>4469	ExpressionStatement	 
>4470	AssignmentExpr	profRender = new ProfRender ( )
>4471	UnaryExpression	new ProfRender ( )
>4472	Identifier	profRender
>4473	ExpressionStatement	 
>4474	AssignmentExpr	profRender = 0
>4475	PrimaryExpression	0
>4476	Identifier	profRender
>4477	ExpressionStatement	 
>4478	CallExpression	debugLog ( \"9\" )
>4479	ArgumentList	\"9\"
>4480	Argument	\"9\"
>4481	PrimaryExpression	\"9\"
>4482	Callee	debugLog
>4483	Identifier	debugLog
>4484	ExpressionStatement	 
>4485	CallExpression	loadBit ( LOAD_GRAPHICS2 )
>4486	ArgumentList	LOAD_GRAPHICS2
>4487	Argument	LOAD_GRAPHICS2
>4488	Identifier	LOAD_GRAPHICS2
>4489	Callee	loadBit
>4490	Identifier	loadBit
>4491	ExpressionStatement	 
>4492	CallExpression	debugLog ( \"8\" )
>4493	ArgumentList	\"8\"
>4494	Argument	\"8\"
>4495	PrimaryExpression	\"8\"
>4496	Callee	debugLog
>4497	Identifier	debugLog
>4498	ExpressionStatement	 
>4499	CallExpression	addRenderObject ( screenTransition , LR_TRANSITION )
>4500	ArgumentList	screenTransition
>4501	Argument	LR_TRANSITION
>4502	Identifier	LR_TRANSITION
>4503	Argument	screenTransition
>4504	Identifier	screenTransition
>4505	Callee	addRenderObject
>4506	Identifier	addRenderObject
>4507	CompoundStatement	 
>4508	ExpressionStatement	 
>4509	AssignmentExpr	screenTransition -> position = Vector ( 400 , 300 )
>4510	CallExpression	Vector ( 400 , 300 )
>4511	ArgumentList	400
>4512	Argument	300
>4513	PrimaryExpression	300
>4514	Argument	400
>4515	PrimaryExpression	400
>4516	Callee	Vector
>4517	Identifier	Vector
>4518	PtrMemberAccess	screenTransition -> position
>4519	Identifier	position
>4520	Identifier	screenTransition
>4521	ExpressionStatement	 
>4522	AssignmentExpr	screenTransition = new AquariaScreenTransition ( )
>4523	UnaryExpression	new AquariaScreenTransition ( )
>4524	Identifier	screenTransition
>4525	ExpressionStatement	 
>4526	AssignmentExpr	screenTransition = 0
>4527	PrimaryExpression	0
>4528	Identifier	screenTransition
>4529	ExpressionStatement	 
>4530	CallExpression	addRenderObject ( tfader , LR_TRANSITION )
>4531	ArgumentList	tfader
>4532	Argument	LR_TRANSITION
>4533	Identifier	LR_TRANSITION
>4534	Argument	tfader
>4535	Identifier	tfader
>4536	Callee	addRenderObject
>4537	Identifier	addRenderObject
>4538	CompoundStatement	 
>4539	ExpressionStatement	 
>4540	AssignmentExpr	tfader -> followCamera = 1
>4541	PrimaryExpression	1
>4542	PtrMemberAccess	tfader -> followCamera
>4543	Identifier	followCamera
>4544	Identifier	tfader
>4545	ExpressionStatement	 
>4546	AssignmentExpr	tfader -> alpha = 0
>4547	PrimaryExpression	0
>4548	PtrMemberAccess	tfader -> alpha
>4549	Identifier	alpha
>4550	Identifier	tfader
>4551	ExpressionStatement	 
>4552	AssignmentExpr	tfader -> autoHeight = AUTO_VIRTUALHEIGHT
>4553	Identifier	AUTO_VIRTUALHEIGHT
>4554	PtrMemberAccess	tfader -> autoHeight
>4555	Identifier	autoHeight
>4556	Identifier	tfader
>4557	ExpressionStatement	 
>4558	AssignmentExpr	tfader -> autoWidth = AUTO_VIRTUALWIDTH
>4559	Identifier	AUTO_VIRTUALWIDTH
>4560	PtrMemberAccess	tfader -> autoWidth
>4561	Identifier	autoWidth
>4562	Identifier	tfader
>4563	ExpressionStatement	 
>4564	AssignmentExpr	tfader -> color = 0
>4565	PrimaryExpression	0
>4566	PtrMemberAccess	tfader -> color
>4567	Identifier	color
>4568	Identifier	tfader
>4569	ExpressionStatement	 
>4570	AssignmentExpr	tfader -> position = Vector ( 400 , 300 , 3 )
>4571	CallExpression	Vector ( 400 , 300 , 3 )
>4572	ArgumentList	400
>4573	Argument	3
>4574	PrimaryExpression	3
>4575	Argument	300
>4576	PrimaryExpression	300
>4577	Argument	400
>4578	PrimaryExpression	400
>4579	Callee	Vector
>4580	Identifier	Vector
>4581	PtrMemberAccess	tfader -> position
>4582	Identifier	position
>4583	Identifier	tfader
>4584	ExpressionStatement	 
>4585	Identifier	Quad
>4586	Statement	 
>4587	Statement	 
>4588	Statement	 
>4589	ExpressionStatement	 
>4590	CallExpression	addRenderObject ( sceneColorOverlay , LR_SCENE_COLOR )
>4591	ArgumentList	sceneColorOverlay
>4592	Argument	LR_SCENE_COLOR
>4593	Identifier	LR_SCENE_COLOR
>4594	Argument	sceneColorOverlay
>4595	Identifier	sceneColorOverlay
>4596	Callee	addRenderObject
>4597	Identifier	addRenderObject
>4598	CompoundStatement	 
>4599	ExpressionStatement	 
>4600	AssignmentExpr	sceneColorOverlay -> followCamera = 1
>4601	PrimaryExpression	1
>4602	PtrMemberAccess	sceneColorOverlay -> followCamera
>4603	Identifier	followCamera
>4604	Identifier	sceneColorOverlay
>4605	ExpressionStatement	 
>4606	AssignmentExpr	sceneColorOverlay -> autoHeight = AUTO_VIRTUALHEIGHT
>4607	Identifier	AUTO_VIRTUALHEIGHT
>4608	PtrMemberAccess	sceneColorOverlay -> autoHeight
>4609	Identifier	autoHeight
>4610	Identifier	sceneColorOverlay
>4611	ExpressionStatement	 
>4612	AssignmentExpr	sceneColorOverlay -> autoWidth = AUTO_VIRTUALWIDTH
>4613	Identifier	AUTO_VIRTUALWIDTH
>4614	PtrMemberAccess	sceneColorOverlay -> autoWidth
>4615	Identifier	autoWidth
>4616	Identifier	sceneColorOverlay
>4617	ExpressionStatement	 
>4618	CallExpression	sceneColorOverlay -> setBlendType ( RenderObject 
>4619	ArgumentList	RenderObject 
>4620	Argument	RenderObject 
>4621	Identifier	RenderObject 
>4622	Callee	sceneColorOverlay -> setBlendType
>4623	PtrMemberAccess	sceneColorOverlay -> setBlendType
>4624	Identifier	setBlendType
>4625	Identifier	sceneColorOverlay
>4626	ExpressionStatement	 
>4627	AssignmentExpr	sceneColorOverlay -> alpha = 1
>4628	PrimaryExpression	1
>4629	PtrMemberAccess	sceneColorOverlay -> alpha
>4630	Identifier	alpha
>4631	Identifier	sceneColorOverlay
>4632	ExpressionStatement	 
>4633	AssignmentExpr	sceneColorOverlay -> color = Vector ( 1 , 1 , 1 )
>4634	CallExpression	Vector ( 1 , 1 , 1 )
>4635	ArgumentList	1
>4636	Argument	1
>4637	PrimaryExpression	1
>4638	Argument	1
>4639	PrimaryExpression	1
>4640	Argument	1
>4641	PrimaryExpression	1
>4642	Callee	Vector
>4643	Identifier	Vector
>4644	PtrMemberAccess	sceneColorOverlay -> color
>4645	Identifier	color
>4646	Identifier	sceneColorOverlay
>4647	ExpressionStatement	 
>4648	AssignmentExpr	sceneColorOverlay -> position = Vector ( 400 , 300 )
>4649	CallExpression	Vector ( 400 , 300 )
>4650	ArgumentList	400
>4651	Argument	300
>4652	PrimaryExpression	300
>4653	Argument	400
>4654	PrimaryExpression	400
>4655	Callee	Vector
>4656	Identifier	Vector
>4657	PtrMemberAccess	sceneColorOverlay -> position
>4658	Identifier	position
>4659	Identifier	sceneColorOverlay
>4660	ExpressionStatement	 
>4661	Identifier	Quad
>4662	Statement	 
>4663	Statement	 
>4664	Statement	 
>4665	ExpressionStatement	 
>4666	CallExpression	addRenderObject ( overlayRed , LR_OVERLAY )
>4667	ArgumentList	overlayRed
>4668	Argument	LR_OVERLAY
>4669	Identifier	LR_OVERLAY
>4670	Argument	overlayRed
>4671	Identifier	overlayRed
>4672	Callee	addRenderObject
>4673	Identifier	addRenderObject
>4674	CompoundStatement	 
>4675	ExpressionStatement	 
>4676	AssignmentExpr	overlayRed -> followCamera = 1
>4677	PrimaryExpression	1
>4678	PtrMemberAccess	overlayRed -> followCamera
>4679	Identifier	followCamera
>4680	Identifier	overlayRed
>4681	ExpressionStatement	 
>4682	AssignmentExpr	overlayRed -> alpha = 0
>4683	PrimaryExpression	0
>4684	PtrMemberAccess	overlayRed -> alpha
>4685	Identifier	alpha
>4686	Identifier	overlayRed
>4687	ExpressionStatement	 
>4688	AssignmentExpr	overlayRed -> autoHeight = AUTO_VIRTUALHEIGHT
>4689	Identifier	AUTO_VIRTUALHEIGHT
>4690	PtrMemberAccess	overlayRed -> autoHeight
>4691	Identifier	autoHeight
>4692	Identifier	overlayRed
>4693	ExpressionStatement	 
>4694	AssignmentExpr	overlayRed -> autoWidth = AUTO_VIRTUALWIDTH
>4695	Identifier	AUTO_VIRTUALWIDTH
>4696	PtrMemberAccess	overlayRed -> autoWidth
>4697	Identifier	autoWidth
>4698	Identifier	overlayRed
>4699	ExpressionStatement	 
>4700	AssignmentExpr	overlayRed -> alphaMod = 0.5
>4701	PrimaryExpression	0.5
>4702	PtrMemberAccess	overlayRed -> alphaMod
>4703	Identifier	alphaMod
>4704	Identifier	overlayRed
>4705	ExpressionStatement	 
>4706	AssignmentExpr	overlayRed -> color = Vector ( 1 , 0 , 0 )
>4707	CallExpression	Vector ( 1 , 0 , 0 )
>4708	ArgumentList	1
>4709	Argument	0
>4710	PrimaryExpression	0
>4711	Argument	0
>4712	PrimaryExpression	0
>4713	Argument	1
>4714	PrimaryExpression	1
>4715	Callee	Vector
>4716	Identifier	Vector
>4717	PtrMemberAccess	overlayRed -> color
>4718	Identifier	color
>4719	Identifier	overlayRed
>4720	ExpressionStatement	 
>4721	AssignmentExpr	overlayRed -> position = Vector ( 400 , 300 )
>4722	CallExpression	Vector ( 400 , 300 )
>4723	ArgumentList	400
>4724	Argument	300
>4725	PrimaryExpression	300
>4726	Argument	400
>4727	PrimaryExpression	400
>4728	Callee	Vector
>4729	Identifier	Vector
>4730	PtrMemberAccess	overlayRed -> position
>4731	Identifier	position
>4732	Identifier	overlayRed
>4733	ExpressionStatement	 
>4734	Identifier	Quad
>4735	Statement	 
>4736	Statement	 
>4737	Statement	 
>4738	ExpressionStatement	 
>4739	CallExpression	addRenderObject ( overlay3 , LR_OVERLAY )
>4740	ArgumentList	overlay3
>4741	Argument	LR_OVERLAY
>4742	Identifier	LR_OVERLAY
>4743	Argument	overlay3
>4744	Identifier	overlay3
>4745	Callee	addRenderObject
>4746	Identifier	addRenderObject
>4747	CompoundStatement	 
>4748	ExpressionStatement	 
>4749	AssignmentExpr	overlay3 -> followCamera = 1
>4750	PrimaryExpression	1
>4751	PtrMemberAccess	overlay3 -> followCamera
>4752	Identifier	followCamera
>4753	Identifier	overlay3
>4754	ExpressionStatement	 
>4755	AssignmentExpr	overlay3 -> alpha = 0
>4756	PrimaryExpression	0
>4757	PtrMemberAccess	overlay3 -> alpha
>4758	Identifier	alpha
>4759	Identifier	overlay3
>4760	ExpressionStatement	 
>4761	AssignmentExpr	overlay3 -> autoHeight = AUTO_VIRTUALHEIGHT
>4762	Identifier	AUTO_VIRTUALHEIGHT
>4763	PtrMemberAccess	overlay3 -> autoHeight
>4764	Identifier	autoHeight
>4765	Identifier	overlay3
>4766	ExpressionStatement	 
>4767	AssignmentExpr	overlay3 -> autoWidth = AUTO_VIRTUALWIDTH
>4768	Identifier	AUTO_VIRTUALWIDTH
>4769	PtrMemberAccess	overlay3 -> autoWidth
>4770	Identifier	autoWidth
>4771	Identifier	overlay3
>4772	ExpressionStatement	 
>4773	AssignmentExpr	overlay3 -> color = 0
>4774	PrimaryExpression	0
>4775	PtrMemberAccess	overlay3 -> color
>4776	Identifier	color
>4777	Identifier	overlay3
>4778	ExpressionStatement	 
>4779	AssignmentExpr	overlay3 -> position = Vector ( 400 , 300 )
>4780	CallExpression	Vector ( 400 , 300 )
>4781	ArgumentList	400
>4782	Argument	300
>4783	PrimaryExpression	300
>4784	Argument	400
>4785	PrimaryExpression	400
>4786	Callee	Vector
>4787	Identifier	Vector
>4788	PtrMemberAccess	overlay3 -> position
>4789	Identifier	position
>4790	Identifier	overlay3
>4791	ExpressionStatement	 
>4792	Identifier	Quad
>4793	Statement	 
>4794	Statement	 
>4795	Statement	 
>4796	ExpressionStatement	 
>4797	CallExpression	addRenderObject ( overlay2 , LR_OVERLAY )
>4798	ArgumentList	overlay2
>4799	Argument	LR_OVERLAY
>4800	Identifier	LR_OVERLAY
>4801	Argument	overlay2
>4802	Identifier	overlay2
>4803	Callee	addRenderObject
>4804	Identifier	addRenderObject
>4805	CompoundStatement	 
>4806	ExpressionStatement	 
>4807	AssignmentExpr	overlay2 -> followCamera = 1
>4808	PrimaryExpression	1
>4809	PtrMemberAccess	overlay2 -> followCamera
>4810	Identifier	followCamera
>4811	Identifier	overlay2
>4812	ExpressionStatement	 
>4813	AssignmentExpr	overlay2 -> alpha = 0
>4814	PrimaryExpression	0
>4815	PtrMemberAccess	overlay2 -> alpha
>4816	Identifier	alpha
>4817	Identifier	overlay2
>4818	ExpressionStatement	 
>4819	AssignmentExpr	overlay2 -> autoHeight = AUTO_VIRTUALHEIGHT
>4820	Identifier	AUTO_VIRTUALHEIGHT
>4821	PtrMemberAccess	overlay2 -> autoHeight
>4822	Identifier	autoHeight
>4823	Identifier	overlay2
>4824	ExpressionStatement	 
>4825	AssignmentExpr	overlay2 -> autoWidth = AUTO_VIRTUALWIDTH
>4826	Identifier	AUTO_VIRTUALWIDTH
>4827	PtrMemberAccess	overlay2 -> autoWidth
>4828	Identifier	autoWidth
>4829	Identifier	overlay2
>4830	ExpressionStatement	 
>4831	AssignmentExpr	overlay2 -> color = 0
>4832	PrimaryExpression	0
>4833	PtrMemberAccess	overlay2 -> color
>4834	Identifier	color
>4835	Identifier	overlay2
>4836	ExpressionStatement	 
>4837	AssignmentExpr	overlay2 -> position = Vector ( 400 , 300 )
>4838	CallExpression	Vector ( 400 , 300 )
>4839	ArgumentList	400
>4840	Argument	300
>4841	PrimaryExpression	300
>4842	Argument	400
>4843	PrimaryExpression	400
>4844	Callee	Vector
>4845	Identifier	Vector
>4846	PtrMemberAccess	overlay2 -> position
>4847	Identifier	position
>4848	Identifier	overlay2
>4849	ExpressionStatement	 
>4850	Identifier	Quad
>4851	Statement	 
>4852	Statement	 
>4853	Statement	 
>4854	ExpressionStatement	 
>4855	CallExpression	addRenderObject ( overlay , LR_OVERLAY )
>4856	ArgumentList	overlay
>4857	Argument	LR_OVERLAY
>4858	Identifier	LR_OVERLAY
>4859	Argument	overlay
>4860	Identifier	overlay
>4861	Callee	addRenderObject
>4862	Identifier	addRenderObject
>4863	CompoundStatement	 
>4864	ExpressionStatement	 
>4865	AssignmentExpr	overlay -> followCamera = 1
>4866	PrimaryExpression	1
>4867	PtrMemberAccess	overlay -> followCamera
>4868	Identifier	followCamera
>4869	Identifier	overlay
>4870	ExpressionStatement	 
>4871	AssignmentExpr	overlay -> alpha = 0
>4872	PrimaryExpression	0
>4873	PtrMemberAccess	overlay -> alpha
>4874	Identifier	alpha
>4875	Identifier	overlay
>4876	ExpressionStatement	 
>4877	AssignmentExpr	overlay -> autoHeight = AUTO_VIRTUALHEIGHT
>4878	Identifier	AUTO_VIRTUALHEIGHT
>4879	PtrMemberAccess	overlay -> autoHeight
>4880	Identifier	autoHeight
>4881	Identifier	overlay
>4882	ExpressionStatement	 
>4883	AssignmentExpr	overlay -> autoWidth = AUTO_VIRTUALWIDTH
>4884	Identifier	AUTO_VIRTUALWIDTH
>4885	PtrMemberAccess	overlay -> autoWidth
>4886	Identifier	autoWidth
>4887	Identifier	overlay
>4888	ExpressionStatement	 
>4889	AssignmentExpr	overlay -> color = 0
>4890	PrimaryExpression	0
>4891	PtrMemberAccess	overlay -> color
>4892	Identifier	color
>4893	Identifier	overlay
>4894	ExpressionStatement	 
>4895	AssignmentExpr	overlay -> position = Vector ( 400 , 300 , 3 )
>4896	CallExpression	Vector ( 400 , 300 , 3 )
>4897	ArgumentList	400
>4898	Argument	3
>4899	PrimaryExpression	3
>4900	Argument	300
>4901	PrimaryExpression	300
>4902	Argument	400
>4903	PrimaryExpression	400
>4904	Callee	Vector
>4905	Identifier	Vector
>4906	PtrMemberAccess	overlay -> position
>4907	Identifier	position
>4908	Identifier	overlay
>4909	ExpressionStatement	 
>4910	Identifier	Quad
>4911	Statement	 
>4912	Statement	 
>4913	Statement	 
>4914	ExpressionStatement	 
>4915	CallExpression	debugLog ( \"6\" )
>4916	ArgumentList	\"6\"
>4917	Argument	\"6\"
>4918	PrimaryExpression	\"6\"
>4919	Callee	debugLog
>4920	Identifier	debugLog
>4921	ExpressionStatement	 
>4922	CallExpression	recreateBlackBars ( )
>4923	ArgumentList	 
>4924	Callee	recreateBlackBars
>4925	Identifier	recreateBlackBars
>4926	ExpressionStatement	 
>4927	CallExpression	debugLog ( \"5\" )
>4928	ArgumentList	\"5\"
>4929	Argument	\"5\"
>4930	PrimaryExpression	\"5\"
>4931	Callee	debugLog
>4932	Identifier	debugLog
>4933	ExpressionStatement	 
>4934	CallExpression	addRenderObject ( cursorBlinker , LR_CURSOR )
>4935	ArgumentList	cursorBlinker
>4936	Argument	LR_CURSOR
>4937	Identifier	LR_CURSOR
>4938	Argument	cursorBlinker
>4939	Identifier	cursorBlinker
>4940	Callee	addRenderObject
>4941	Identifier	addRenderObject
>4942	ExpressionStatement	 
>4943	CallExpression	cursor -> addChild ( cursorBlinker , PM_NONE , RBP_OFF )
>4944	ArgumentList	cursorBlinker
>4945	Argument	RBP_OFF
>4946	Identifier	RBP_OFF
>4947	Argument	PM_NONE
>4948	Identifier	PM_NONE
>4949	Argument	cursorBlinker
>4950	Identifier	cursorBlinker
>4951	Callee	cursor -> addChild
>4952	PtrMemberAccess	cursor -> addChild
>4953	Identifier	addChild
>4954	Identifier	cursor
>4955	CompoundStatement	 
>4956	ExpressionStatement	 
>4957	AssignmentExpr	cursorBlinker -> alphaMod = 0.5
>4958	PrimaryExpression	0.5
>4959	PtrMemberAccess	cursorBlinker -> alphaMod
>4960	Identifier	alphaMod
>4961	Identifier	cursorBlinker
>4962	ExpressionStatement	 
>4963	AssignmentExpr	cursorBlinker -> alpha = 0
>4964	PrimaryExpression	0
>4965	PtrMemberAccess	cursorBlinker -> alpha
>4966	Identifier	alpha
>4967	Identifier	cursorBlinker
>4968	ExpressionStatement	 
>4969	CallExpression	cursorBlinker -> scale . interpolateTo ( Vector ( 2 , 2 ) , 0.2 , - 1 , 1 , 1 )
>4970	ArgumentList	Vector ( 2 , 2 )
>4971	Argument	1
>4972	PrimaryExpression	1
>4973	Argument	1
>4974	PrimaryExpression	1
>4975	Argument	- 1
>4976	UnaryOp	- 1
>4977	PrimaryExpression	1
>4978	UnaryOperator	-
>4979	Argument	0.2
>4980	PrimaryExpression	0.2
>4981	Argument	Vector ( 2 , 2 )
>4982	CallExpression	Vector ( 2 , 2 )
>4983	ArgumentList	2
>4984	Argument	2
>4985	PrimaryExpression	2
>4986	Argument	2
>4987	PrimaryExpression	2
>4988	Callee	Vector
>4989	Identifier	Vector
>4990	Callee	cursorBlinker -> scale . interpolateTo
>4991	MemberAccess	cursorBlinker -> scale . interpolateTo
>4992	Identifier	interpolateTo
>4993	PtrMemberAccess	cursorBlinker -> scale
>4994	Identifier	scale
>4995	Identifier	cursorBlinker
>4996	ExpressionStatement	 
>4997	AssignmentExpr	cursorBlinker -> scale = Vector ( 1.5 , 1.5 )
>4998	CallExpression	Vector ( 1.5 , 1.5 )
>4999	ArgumentList	1.5
>5000	Argument	1.5
>5001	PrimaryExpression	1.5
>5002	Argument	1.5
>5003	PrimaryExpression	1.5
>5004	Callee	Vector
>5005	Identifier	Vector
>5006	PtrMemberAccess	cursorBlinker -> scale
>5007	Identifier	scale
>5008	Identifier	cursorBlinker
>5009	ExpressionStatement	 
>5010	CallExpression	cursorBlinker -> setTexture ( \"cursor\" )
>5011	ArgumentList	\"cursor\"
>5012	Argument	\"cursor\"
>5013	PrimaryExpression	\"cursor\"
>5014	Callee	cursorBlinker -> setTexture
>5015	PtrMemberAccess	cursorBlinker -> setTexture
>5016	Identifier	setTexture
>5017	Identifier	cursorBlinker
>5018	ExpressionStatement	 
>5019	Identifier	Quad
>5020	Statement	 
>5021	Statement	 
>5022	Statement	 
>5023	ExpressionStatement	 
>5024	CallExpression	addRenderObject ( cursorGlow , LR_CURSOR )
>5025	ArgumentList	cursorGlow
>5026	Argument	LR_CURSOR
>5027	Identifier	LR_CURSOR
>5028	Argument	cursorGlow
>5029	Identifier	cursorGlow
>5030	Callee	addRenderObject
>5031	Identifier	addRenderObject
>5032	ExpressionStatement	 
>5033	CallExpression	cursor -> addChild ( cursorGlow , PM_NONE , RBP_OFF )
>5034	ArgumentList	cursorGlow
>5035	Argument	RBP_OFF
>5036	Identifier	RBP_OFF
>5037	Argument	PM_NONE
>5038	Identifier	PM_NONE
>5039	Argument	cursorGlow
>5040	Identifier	cursorGlow
>5041	Callee	cursor -> addChild
>5042	PtrMemberAccess	cursor -> addChild
>5043	Identifier	addChild
>5044	Identifier	cursor
>5045	CompoundStatement	 
>5046	ExpressionStatement	 
>5047	CallExpression	cursorGlow -> setBlendType ( RenderObject 
>5048	ArgumentList	RenderObject 
>5049	Argument	RenderObject 
>5050	Identifier	RenderObject 
>5051	Callee	cursorGlow -> setBlendType
>5052	PtrMemberAccess	cursorGlow -> setBlendType
>5053	Identifier	setBlendType
>5054	Identifier	cursorGlow
>5055	ExpressionStatement	 
>5056	AssignmentExpr	cursorGlow -> alpha = 0
>5057	PrimaryExpression	0
>5058	PtrMemberAccess	cursorGlow -> alpha
>5059	Identifier	alpha
>5060	Identifier	cursorGlow
>5061	ExpressionStatement	 
>5062	CallExpression	cursorGlow -> setWidthHeight ( 48 , 48 )
>5063	ArgumentList	48
>5064	Argument	48
>5065	PrimaryExpression	48
>5066	Argument	48
>5067	PrimaryExpression	48
>5068	Callee	cursorGlow -> setWidthHeight
>5069	PtrMemberAccess	cursorGlow -> setWidthHeight
>5070	Identifier	setWidthHeight
>5071	Identifier	cursorGlow
>5072	ExpressionStatement	 
>5073	CallExpression	cursorGlow -> setTexture ( \"glow\" )
>5074	ArgumentList	\"glow\"
>5075	Argument	\"glow\"
>5076	PrimaryExpression	\"glow\"
>5077	Callee	cursorGlow -> setTexture
>5078	PtrMemberAccess	cursorGlow -> setTexture
>5079	Identifier	setTexture
>5080	Identifier	cursorGlow
>5081	ExpressionStatement	 
>5082	Identifier	Quad
>5083	Statement	 
>5084	Statement	 
>5085	Statement	 
>5086	ExpressionStatement	 
>5087	CallExpression	debugLog ( \"4\" )
>5088	ArgumentList	\"4\"
>5089	Argument	\"4\"
>5090	PrimaryExpression	\"4\"
>5091	Callee	debugLog
>5092	Identifier	debugLog
>5093	ExpressionStatement	 
>5094	CallExpression	loadBit ( LOAD_GRAPHICS1 )
>5095	ArgumentList	LOAD_GRAPHICS1
>5096	Argument	LOAD_GRAPHICS1
>5097	Identifier	LOAD_GRAPHICS1
>5098	Callee	loadBit
>5099	Identifier	loadBit
>5100	ExpressionStatement	 
>5101	CallExpression	debugLog ( \"3\" )
>5102	ArgumentList	\"3\"
>5103	Argument	\"3\"
>5104	PrimaryExpression	\"3\"
>5105	Callee	debugLog
>5106	Identifier	debugLog
>5107	ExpressionStatement	 
>5108	CallExpression	addRenderObject ( cutscene_text2 , LR_SUBTITLES )
>5109	ArgumentList	cutscene_text2
>5110	Argument	LR_SUBTITLES
>5111	Identifier	LR_SUBTITLES
>5112	Argument	cutscene_text2
>5113	Identifier	cutscene_text2
>5114	Callee	addRenderObject
>5115	Identifier	addRenderObject
>5116	ExpressionStatement	 
>5117	AssignmentExpr	cutscene_text2 -> followCamera = 1
>5118	PrimaryExpression	1
>5119	PtrMemberAccess	cutscene_text2 -> followCamera
>5120	Identifier	followCamera
>5121	Identifier	cutscene_text2
>5122	ExpressionStatement	 
>5123	AssignmentExpr	cutscene_text2 -> alpha . x = 0
>5124	PrimaryExpression	0
>5125	MemberAccess	cutscene_text2 -> alpha . x
>5126	Identifier	x
>5127	PtrMemberAccess	cutscene_text2 -> alpha
>5128	Identifier	alpha
>5129	Identifier	cutscene_text2
>5130	ExpressionStatement	 
>5131	AssignmentExpr	cutscene_text2 -> position = Vector ( 400 , 300 + 10 )
>5132	CallExpression	Vector ( 400 , 300 + 10 )
>5133	ArgumentList	400
>5134	Argument	300 + 10
>5135	AdditiveExpression	300 + 10
>5136	PrimaryExpression	10
>5137	PrimaryExpression	300
>5138	Argument	400
>5139	PrimaryExpression	400
>5140	Callee	Vector
>5141	Identifier	Vector
>5142	PtrMemberAccess	cutscene_text2 -> position
>5143	Identifier	position
>5144	Identifier	cutscene_text2
>5145	ExpressionStatement	 
>5146	CallExpression	cutscene_text2 -> setText ( dsq -> continuity . stringBank . get ( 2005 ) )
>5147	ArgumentList	dsq -> continuity . stringBank . get ( 2005 )
>5148	Argument	dsq -> continuity . stringBank . get ( 2005 )
>5149	CallExpression	dsq -> continuity . stringBank . get ( 2005 )
>5150	ArgumentList	2005
>5151	Argument	2005
>5152	PrimaryExpression	2005
>5153	Callee	dsq -> continuity . stringBank . get
>5154	MemberAccess	dsq -> continuity . stringBank . get
>5155	Identifier	get
>5156	MemberAccess	dsq -> continuity . stringBank
>5157	Identifier	stringBank
>5158	PtrMemberAccess	dsq -> continuity
>5159	Identifier	continuity
>5160	Identifier	dsq
>5161	Callee	cutscene_text2 -> setText
>5162	PtrMemberAccess	cutscene_text2 -> setText
>5163	Identifier	setText
>5164	Identifier	cutscene_text2
>5165	ExpressionStatement	 
>5166	AssignmentExpr	cutscene_text2 = new BitmapText ( & dsq -> smallFont )
>5167	UnaryOp	& dsq -> smallFont
>5168	PtrMemberAccess	dsq -> smallFont
>5169	Identifier	smallFont
>5170	Identifier	dsq
>5171	UnaryOperator	&
>5172	Identifier	cutscene_text2
>5173	ExpressionStatement	 
>5174	CallExpression	addRenderObject ( cutscene_text , LR_SUBTITLES )
>5175	ArgumentList	cutscene_text
>5176	Argument	LR_SUBTITLES
>5177	Identifier	LR_SUBTITLES
>5178	Argument	cutscene_text
>5179	Identifier	cutscene_text
>5180	Callee	addRenderObject
>5181	Identifier	addRenderObject
>5182	ExpressionStatement	 
>5183	AssignmentExpr	cutscene_text -> followCamera = 1
>5184	PrimaryExpression	1
>5185	PtrMemberAccess	cutscene_text -> followCamera
>5186	Identifier	followCamera
>5187	Identifier	cutscene_text
>5188	ExpressionStatement	 
>5189	AssignmentExpr	cutscene_text -> alpha . x = 0
>5190	PrimaryExpression	0
>5191	MemberAccess	cutscene_text -> alpha . x
>5192	Identifier	x
>5193	PtrMemberAccess	cutscene_text -> alpha
>5194	Identifier	alpha
>5195	Identifier	cutscene_text
>5196	ExpressionStatement	 
>5197	AssignmentExpr	cutscene_text -> position = Vector ( 400 , 300 - 16 )
>5198	CallExpression	Vector ( 400 , 300 - 16 )
>5199	ArgumentList	400
>5200	Argument	300 - 16
>5201	AdditiveExpression	300 - 16
>5202	PrimaryExpression	16
>5203	PrimaryExpression	300
>5204	Argument	400
>5205	PrimaryExpression	400
>5206	Callee	Vector
>5207	Identifier	Vector
>5208	PtrMemberAccess	cutscene_text -> position
>5209	Identifier	position
>5210	Identifier	cutscene_text
>5211	ExpressionStatement	 
>5212	CallExpression	cutscene_text -> setText ( dsq -> continuity . stringBank . get ( 2004 ) )
>5213	ArgumentList	dsq -> continuity . stringBank . get ( 2004 )
>5214	Argument	dsq -> continuity . stringBank . get ( 2004 )
>5215	CallExpression	dsq -> continuity . stringBank . get ( 2004 )
>5216	ArgumentList	2004
>5217	Argument	2004
>5218	PrimaryExpression	2004
>5219	Callee	dsq -> continuity . stringBank . get
>5220	MemberAccess	dsq -> continuity . stringBank . get
>5221	Identifier	get
>5222	MemberAccess	dsq -> continuity . stringBank
>5223	Identifier	stringBank
>5224	PtrMemberAccess	dsq -> continuity
>5225	Identifier	continuity
>5226	Identifier	dsq
>5227	Callee	cutscene_text -> setText
>5228	PtrMemberAccess	cutscene_text -> setText
>5229	Identifier	setText
>5230	Identifier	cutscene_text
>5231	ExpressionStatement	 
>5232	AssignmentExpr	cutscene_text = new BitmapText ( & dsq -> font )
>5233	UnaryOp	& dsq -> font
>5234	PtrMemberAccess	dsq -> font
>5235	Identifier	font
>5236	Identifier	dsq
>5237	UnaryOperator	&
>5238	Identifier	cutscene_text
>5239	ExpressionStatement	 
>5240	CallExpression	addRenderObject ( cutscene_bg , LR_SUBTITLES )
>5241	ArgumentList	cutscene_bg
>5242	Argument	LR_SUBTITLES
>5243	Identifier	LR_SUBTITLES
>5244	Argument	cutscene_bg
>5245	Identifier	cutscene_bg
>5246	Callee	addRenderObject
>5247	Identifier	addRenderObject
>5248	ExpressionStatement	 
>5249	AssignmentExpr	cutscene_bg -> followCamera = 1
>5250	PrimaryExpression	1
>5251	PtrMemberAccess	cutscene_bg -> followCamera
>5252	Identifier	followCamera
>5253	Identifier	cutscene_bg
>5254	ExpressionStatement	 
>5255	AssignmentExpr	cutscene_bg -> alpha . x = 0
>5256	PrimaryExpression	0
>5257	MemberAccess	cutscene_bg -> alpha . x
>5258	Identifier	x
>5259	PtrMemberAccess	cutscene_bg -> alpha
>5260	Identifier	alpha
>5261	Identifier	cutscene_bg
>5262	ExpressionStatement	 
>5263	AssignmentExpr	cutscene_bg -> position = Vector ( 400 , 300 )
>5264	CallExpression	Vector ( 400 , 300 )
>5265	ArgumentList	400
>5266	Argument	300
>5267	PrimaryExpression	300
>5268	Argument	400
>5269	PrimaryExpression	400
>5270	Callee	Vector
>5271	Identifier	Vector
>5272	PtrMemberAccess	cutscene_bg -> position
>5273	Identifier	position
>5274	Identifier	cutscene_bg
>5275	ExpressionStatement	 
>5276	CallExpression	cutscene_bg -> setWidthHeight ( 0 , 80 )
>5277	ArgumentList	0
>5278	Argument	80
>5279	PrimaryExpression	80
>5280	Argument	0
>5281	PrimaryExpression	0
>5282	Callee	cutscene_bg -> setWidthHeight
>5283	PtrMemberAccess	cutscene_bg -> setWidthHeight
>5284	Identifier	setWidthHeight
>5285	Identifier	cutscene_bg
>5286	ExpressionStatement	 
>5287	AssignmentExpr	cutscene_bg -> alphaMod = 0.75
>5288	PrimaryExpression	0.75
>5289	PtrMemberAccess	cutscene_bg -> alphaMod
>5290	Identifier	alphaMod
>5291	Identifier	cutscene_bg
>5292	ExpressionStatement	 
>5293	AssignmentExpr	cutscene_bg -> color = 0
>5294	PrimaryExpression	0
>5295	PtrMemberAccess	cutscene_bg -> color
>5296	Identifier	color
>5297	Identifier	cutscene_bg
>5298	ExpressionStatement	 
>5299	AssignmentExpr	cutscene_bg -> autoWidth = AUTO_VIRTUALWIDTH
>5300	Identifier	AUTO_VIRTUALWIDTH
>5301	PtrMemberAccess	cutscene_bg -> autoWidth
>5302	Identifier	autoWidth
>5303	Identifier	cutscene_bg
>5304	ExpressionStatement	 
>5305	AssignmentExpr	cutscene_bg = new Quad ( )
>5306	UnaryExpression	new Quad ( )
>5307	Identifier	cutscene_bg
>5308	ExpressionStatement	 
>5309	CallExpression	addRenderObject ( achievement_text , LR_SUBTITLES )
>5310	ArgumentList	achievement_text
>5311	Argument	LR_SUBTITLES
>5312	Identifier	LR_SUBTITLES
>5313	Argument	achievement_text
>5314	Identifier	achievement_text
>5315	Callee	addRenderObject
>5316	Identifier	addRenderObject
>5317	ExpressionStatement	 
>5318	CallExpression	achievement_text -> setAlign ( ALIGN_LEFT )
>5319	ArgumentList	ALIGN_LEFT
>5320	Argument	ALIGN_LEFT
>5321	Identifier	ALIGN_LEFT
>5322	Callee	achievement_text -> setAlign
>5323	PtrMemberAccess	achievement_text -> setAlign
>5324	Identifier	setAlign
>5325	Identifier	achievement_text
>5326	ExpressionStatement	 
>5327	CallExpression	achievement_text -> setWidth ( 280 )
>5328	ArgumentList	280
>5329	Argument	280
>5330	PrimaryExpression	280
>5331	Callee	achievement_text -> setWidth
>5332	PtrMemberAccess	achievement_text -> setWidth
>5333	Identifier	setWidth
>5334	Identifier	achievement_text
>5335	ExpressionStatement	 
>5336	CallExpression	achievement_text -> setFontSize ( 6 )
>5337	ArgumentList	6
>5338	Argument	6
>5339	PrimaryExpression	6
>5340	Callee	achievement_text -> setFontSize
>5341	PtrMemberAccess	achievement_text -> setFontSize
>5342	Identifier	setFontSize
>5343	Identifier	achievement_text
>5344	ExpressionStatement	 
>5345	AssignmentExpr	achievement_text -> alpha = 0
>5346	PrimaryExpression	0
>5347	PtrMemberAccess	achievement_text -> alpha
>5348	Identifier	alpha
>5349	Identifier	achievement_text
>5350	ExpressionStatement	 
>5351	AssignmentExpr	achievement_text -> followCamera = 1
>5352	PrimaryExpression	1
>5353	PtrMemberAccess	achievement_text -> followCamera
>5354	Identifier	followCamera
>5355	Identifier	achievement_text
>5356	ExpressionStatement	 
>5357	AssignmentExpr	achievement_text -> position = Vector ( 603 , 5 )
>5358	CallExpression	Vector ( 603 , 5 )
>5359	ArgumentList	603
>5360	Argument	5
>5361	PrimaryExpression	5
>5362	Argument	603
>5363	PrimaryExpression	603
>5364	Callee	Vector
>5365	Identifier	Vector
>5366	PtrMemberAccess	achievement_text -> position
>5367	Identifier	position
>5368	Identifier	achievement_text
>5369	ExpressionStatement	 
>5370	AssignmentExpr	achievement_text = new BitmapText ( & dsq -> subsFont )
>5371	UnaryOp	& dsq -> subsFont
>5372	PtrMemberAccess	dsq -> subsFont
>5373	Identifier	subsFont
>5374	Identifier	dsq
>5375	UnaryOperator	&
>5376	Identifier	achievement_text
>5377	ExpressionStatement	 
>5378	CallExpression	addRenderObject ( achievement_box , LR_SUBTITLES )
>5379	ArgumentList	achievement_box
>5380	Argument	LR_SUBTITLES
>5381	Identifier	LR_SUBTITLES
>5382	Argument	achievement_box
>5383	Identifier	achievement_box
>5384	Callee	addRenderObject
>5385	Identifier	addRenderObject
>5386	ExpressionStatement	 
>5387	AssignmentExpr	achievement_box -> color = 0
>5388	PrimaryExpression	0
>5389	PtrMemberAccess	achievement_box -> color
>5390	Identifier	color
>5391	Identifier	achievement_box
>5392	ExpressionStatement	 
>5393	CallExpression	achievement_box -> setWidthHeight ( 400 , 87 )
>5394	ArgumentList	400
>5395	Argument	87
>5396	PrimaryExpression	87
>5397	Argument	400
>5398	PrimaryExpression	400
>5399	Callee	achievement_box -> setWidthHeight
>5400	PtrMemberAccess	achievement_box -> setWidthHeight
>5401	Identifier	setWidthHeight
>5402	Identifier	achievement_box
>5403	ExpressionStatement	 
>5404	AssignmentExpr	achievement_box -> followCamera = 1
>5405	PrimaryExpression	1
>5406	PtrMemberAccess	achievement_box -> followCamera
>5407	Identifier	followCamera
>5408	Identifier	achievement_box
>5409	ExpressionStatement	 
>5410	AssignmentExpr	achievement_box -> alphaMod = 0.7
>5411	PrimaryExpression	0.7
>5412	PtrMemberAccess	achievement_box -> alphaMod
>5413	Identifier	alphaMod
>5414	Identifier	achievement_box
>5415	ExpressionStatement	 
>5416	AssignmentExpr	achievement_box -> alpha = 0
>5417	PrimaryExpression	0
>5418	PtrMemberAccess	achievement_box -> alpha
>5419	Identifier	alpha
>5420	Identifier	achievement_box
>5421	ExpressionStatement	 
>5422	AssignmentExpr	achievement_box -> position = Vector ( 800 , 0 )
>5423	CallExpression	Vector ( 800 , 0 )
>5424	ArgumentList	800
>5425	Argument	0
>5426	PrimaryExpression	0
>5427	Argument	800
>5428	PrimaryExpression	800
>5429	Callee	Vector
>5430	Identifier	Vector
>5431	PtrMemberAccess	achievement_box -> position
>5432	Identifier	position
>5433	Identifier	achievement_box
>5434	ExpressionStatement	 
>5435	AssignmentExpr	achievement_box = new Quad ( )
>5436	UnaryExpression	new Quad ( )
>5437	Identifier	achievement_box
>5438	ExpressionStatement	 
>5439	CallExpression	addRenderObject ( subtext , LR_SUBTITLES )
>5440	ArgumentList	subtext
>5441	Argument	LR_SUBTITLES
>5442	Identifier	LR_SUBTITLES
>5443	Argument	subtext
>5444	Identifier	subtext
>5445	Callee	addRenderObject
>5446	Identifier	addRenderObject
>5447	ExpressionStatement	 
>5448	CallExpression	subtext -> setAlign ( ALIGN_CENTER )
>5449	ArgumentList	ALIGN_CENTER
>5450	Argument	ALIGN_CENTER
>5451	Identifier	ALIGN_CENTER
>5452	Callee	subtext -> setAlign
>5453	PtrMemberAccess	subtext -> setAlign
>5454	Identifier	setAlign
>5455	Identifier	subtext
>5456	ExpressionStatement	 
>5457	CallExpression	subtext -> setWidth ( 800 )
>5458	ArgumentList	800
>5459	Argument	800
>5460	PrimaryExpression	800
>5461	Callee	subtext -> setWidth
>5462	PtrMemberAccess	subtext -> setWidth
>5463	Identifier	setWidth
>5464	Identifier	subtext
>5465	ExpressionStatement	 
>5466	CallExpression	subtext -> setFontSize ( 14 )
>5467	ArgumentList	14
>5468	Argument	14
>5469	PrimaryExpression	14
>5470	Callee	subtext -> setFontSize
>5471	PtrMemberAccess	subtext -> setFontSize
>5472	Identifier	setFontSize
>5473	Identifier	subtext
>5474	ExpressionStatement	 
>5475	AssignmentExpr	subtext -> alpha = 0
>5476	PrimaryExpression	0
>5477	PtrMemberAccess	subtext -> alpha
>5478	Identifier	alpha
>5479	Identifier	subtext
>5480	ExpressionStatement	 
>5481	AssignmentExpr	subtext -> followCamera = 1
>5482	PrimaryExpression	1
>5483	PtrMemberAccess	subtext -> followCamera
>5484	Identifier	followCamera
>5485	Identifier	subtext
>5486	ExpressionStatement	 
>5487	AssignmentExpr	subtext -> position = Vector ( 400 , 570 )
>5488	CallExpression	Vector ( 400 , 570 )
>5489	ArgumentList	400
>5490	Argument	570
>5491	PrimaryExpression	570
>5492	Argument	400
>5493	PrimaryExpression	400
>5494	Callee	Vector
>5495	Identifier	Vector
>5496	PtrMemberAccess	subtext -> position
>5497	Identifier	position
>5498	Identifier	subtext
>5499	ExpressionStatement	 
>5500	AssignmentExpr	subtext = new BitmapText ( & dsq -> subsFont )
>5501	UnaryOp	& dsq -> subsFont
>5502	PtrMemberAccess	dsq -> subsFont
>5503	Identifier	subsFont
>5504	Identifier	dsq
>5505	UnaryOperator	&
>5506	Identifier	subtext
>5507	ExpressionStatement	 
>5508	CallExpression	addRenderObject ( subbox , LR_SUBTITLES )
>5509	ArgumentList	subbox
>5510	Argument	LR_SUBTITLES
>5511	Identifier	LR_SUBTITLES
>5512	Argument	subbox
>5513	Identifier	subbox
>5514	Callee	addRenderObject
>5515	Identifier	addRenderObject
>5516	ExpressionStatement	 
>5517	AssignmentExpr	subbox -> color = 0
>5518	PrimaryExpression	0
>5519	PtrMemberAccess	subbox -> color
>5520	Identifier	color
>5521	Identifier	subbox
>5522	ExpressionStatement	 
>5523	CallExpression	subbox -> setHeight ( 40 )
>5524	ArgumentList	40
>5525	Argument	40
>5526	PrimaryExpression	40
>5527	Callee	subbox -> setHeight
>5528	PtrMemberAccess	subbox -> setHeight
>5529	Identifier	setHeight
>5530	Identifier	subbox
>5531	ExpressionStatement	 
>5532	AssignmentExpr	subbox -> autoWidth = AUTO_VIRTUALWIDTH
>5533	Identifier	AUTO_VIRTUALWIDTH
>5534	PtrMemberAccess	subbox -> autoWidth
>5535	Identifier	autoWidth
>5536	Identifier	subbox
>5537	ExpressionStatement	 
>5538	AssignmentExpr	subbox -> followCamera = 1
>5539	PrimaryExpression	1
>5540	PtrMemberAccess	subbox -> followCamera
>5541	Identifier	followCamera
>5542	Identifier	subbox
>5543	ExpressionStatement	 
>5544	AssignmentExpr	subbox -> alphaMod = 0.7
>5545	PrimaryExpression	0.7
>5546	PtrMemberAccess	subbox -> alphaMod
>5547	Identifier	alphaMod
>5548	Identifier	subbox
>5549	ExpressionStatement	 
>5550	AssignmentExpr	subbox -> alpha = 0
>5551	PrimaryExpression	0
>5552	PtrMemberAccess	subbox -> alpha
>5553	Identifier	alpha
>5554	Identifier	subbox
>5555	ExpressionStatement	 
>5556	AssignmentExpr	subbox -> position = Vector ( 400 , 580 )
>5557	CallExpression	Vector ( 400 , 580 )
>5558	ArgumentList	400
>5559	Argument	580
>5560	PrimaryExpression	580
>5561	Argument	400
>5562	PrimaryExpression	400
>5563	Callee	Vector
>5564	Identifier	Vector
>5565	PtrMemberAccess	subbox -> position
>5566	Identifier	position
>5567	Identifier	subbox
>5568	ExpressionStatement	 
>5569	AssignmentExpr	subbox = new Quad ( )
>5570	UnaryExpression	new Quad ( )
>5571	Identifier	subbox
>5572	ExpressionStatement	 
>5573	CallExpression	addRenderObject ( versionLabel , LR_REGISTER_TEXT )
>5574	ArgumentList	versionLabel
>5575	Argument	LR_REGISTER_TEXT
>5576	Identifier	LR_REGISTER_TEXT
>5577	Argument	versionLabel
>5578	Identifier	versionLabel
>5579	Callee	addRenderObject
>5580	Identifier	addRenderObject
>5581	CompoundStatement	 
>5582	ExpressionStatement	 
>5583	AssignmentExpr	versionLabel -> alpha = 0
>5584	PrimaryExpression	0
>5585	PtrMemberAccess	versionLabel -> alpha
>5586	Identifier	alpha
>5587	Identifier	versionLabel
>5588	ExpressionStatement	 
>5589	AssignmentExpr	versionLabel -> alphaMod = 0.75
>5590	PrimaryExpression	0.75
>5591	PtrMemberAccess	versionLabel -> alphaMod
>5592	Identifier	alphaMod
>5593	Identifier	versionLabel
>5594	ExpressionStatement	 
>5595	AssignmentExpr	versionLabel -> scale = Vector ( 0.7 , 0.7 )
>5596	CallExpression	Vector ( 0.7 , 0.7 )
>5597	ArgumentList	0.7
>5598	Argument	0.7
>5599	PrimaryExpression	0.7
>5600	Argument	0.7
>5601	PrimaryExpression	0.7
>5602	Callee	Vector
>5603	Identifier	Vector
>5604	PtrMemberAccess	versionLabel -> scale
>5605	Identifier	scale
>5606	Identifier	versionLabel
>5607	ExpressionStatement	 
>5608	CallExpression	versionLabel -> setAlign ( ALIGN_LEFT )
>5609	ArgumentList	ALIGN_LEFT
>5610	Argument	ALIGN_LEFT
>5611	Identifier	ALIGN_LEFT
>5612	Callee	versionLabel -> setAlign
>5613	PtrMemberAccess	versionLabel -> setAlign
>5614	Identifier	setAlign
>5615	Identifier	versionLabel
>5616	ExpressionStatement	 
>5617	AssignmentExpr	versionLabel -> followCamera = 1
>5618	PrimaryExpression	1
>5619	PtrMemberAccess	versionLabel -> followCamera
>5620	Identifier	followCamera
>5621	Identifier	versionLabel
>5622	ExpressionStatement	 
>5623	CallExpression	setVersionLabelText ( )
>5624	ArgumentList	 
>5625	Callee	setVersionLabelText
>5626	Identifier	setVersionLabelText
>5627	ExpressionStatement	 
>5628	AssignmentExpr	versionLabel = new BitmapText ( & smallFont )
>5629	UnaryOp	& smallFont
>5630	Identifier	smallFont
>5631	UnaryOperator	&
>5632	Identifier	versionLabel
>5633	ExpressionStatement	 
>5634	CallExpression	debugLog ( \"2\" )
>5635	ArgumentList	\"2\"
>5636	Argument	\"2\"
>5637	PrimaryExpression	\"2\"
>5638	Callee	debugLog
>5639	Identifier	debugLog
>5640	IfStatement	if ( isDeveloperKeys ( ) )
>5641	CompoundStatement	 
>5642	ExpressionStatement	 
>5643	CallExpression	addRenderObject ( cmDebug , LR_DEBUG_TEXT )
>5644	ArgumentList	cmDebug
>5645	Argument	LR_DEBUG_TEXT
>5646	Identifier	LR_DEBUG_TEXT
>5647	Argument	cmDebug
>5648	Identifier	cmDebug
>5649	Callee	addRenderObject
>5650	Identifier	addRenderObject
>5651	CompoundStatement	 
>5652	ExpressionStatement	 
>5653	CallExpression	cmDebug -> setFontSize ( 6 )
>5654	ArgumentList	6
>5655	Argument	6
>5656	PrimaryExpression	6
>5657	Callee	cmDebug -> setFontSize
>5658	PtrMemberAccess	cmDebug -> setFontSize
>5659	Identifier	setFontSize
>5660	Identifier	cmDebug
>5661	ExpressionStatement	 
>5662	AssignmentExpr	cmDebug -> alpha = 0
>5663	PrimaryExpression	0
>5664	PtrMemberAccess	cmDebug -> alpha
>5665	Identifier	alpha
>5666	Identifier	cmDebug
>5667	ExpressionStatement	 
>5668	AssignmentExpr	cmDebug -> followCamera = 1
>5669	PrimaryExpression	1
>5670	PtrMemberAccess	cmDebug -> followCamera
>5671	Identifier	followCamera
>5672	Identifier	cmDebug
>5673	ExpressionStatement	 
>5674	AssignmentExpr	cmDebug -> position = Vector ( 20 - virtualOffX , 50 )
>5675	CallExpression	Vector ( 20 - virtualOffX , 50 )
>5676	ArgumentList	20 - virtualOffX
>5677	Argument	50
>5678	PrimaryExpression	50
>5679	Argument	20 - virtualOffX
>5680	AdditiveExpression	20 - virtualOffX
>5681	Identifier	virtualOffX
>5682	PrimaryExpression	20
>5683	Callee	Vector
>5684	Identifier	Vector
>5685	PtrMemberAccess	cmDebug -> position
>5686	Identifier	position
>5687	Identifier	cmDebug
>5688	ExpressionStatement	 
>5689	AssignmentExpr	cmDebug = new DebugFont ( )
>5690	UnaryExpression	new DebugFont ( )
>5691	Identifier	cmDebug
>5692	Condition	 
>5693	CallExpression	isDeveloperKeys ( )
>5694	ArgumentList	 
>5695	Callee	isDeveloperKeys
>5696	Identifier	isDeveloperKeys
>5697	ExpressionStatement	 
>5698	CallExpression	debugLog ( \"1\" )
>5699	ArgumentList	\"1\"
>5700	Argument	\"1\"
>5701	PrimaryExpression	\"1\"
>5702	Callee	debugLog
>5703	Identifier	debugLog
>5704	ExpressionStatement	 
>5705	CallExpression	addRenderObject ( console , LR_DEBUG_TEXT )
>5706	ArgumentList	console
>5707	Argument	LR_DEBUG_TEXT
>5708	Identifier	LR_DEBUG_TEXT
>5709	Argument	console
>5710	Identifier	console
>5711	Callee	addRenderObject
>5712	Identifier	addRenderObject
>5713	CompoundStatement	 
>5714	ExpressionStatement	 
>5715	CallExpression	console -> setFontSize ( 6 )
>5716	ArgumentList	6
>5717	Argument	6
>5718	PrimaryExpression	6
>5719	Callee	console -> setFontSize
>5720	PtrMemberAccess	console -> setFontSize
>5721	Identifier	setFontSize
>5722	Identifier	console
>5723	ExpressionStatement	 
>5724	AssignmentExpr	console -> alpha = 0
>5725	PrimaryExpression	0
>5726	PtrMemberAccess	console -> alpha
>5727	Identifier	alpha
>5728	Identifier	console
>5729	ExpressionStatement	 
>5730	AssignmentExpr	console -> followCamera = 1
>5731	PrimaryExpression	1
>5732	PtrMemberAccess	console -> followCamera
>5733	Identifier	followCamera
>5734	Identifier	console
>5735	ExpressionStatement	 
>5736	AssignmentExpr	console -> position = Vector ( 10 - virtualOffX , 400 )
>5737	CallExpression	Vector ( 10 - virtualOffX , 400 )
>5738	ArgumentList	10 - virtualOffX
>5739	Argument	400
>5740	PrimaryExpression	400
>5741	Argument	10 - virtualOffX
>5742	AdditiveExpression	10 - virtualOffX
>5743	Identifier	virtualOffX
>5744	PrimaryExpression	10
>5745	Callee	Vector
>5746	Identifier	Vector
>5747	PtrMemberAccess	console -> position
>5748	Identifier	position
>5749	Identifier	console
>5750	ExpressionStatement	 
>5751	Identifier	DebugFont
>5752	Statement	 
>5753	Statement	 
>5754	Statement	 
>5755	ExpressionStatement	 
>5756	CallExpression	debugLog ( \"Creating console\" )
>5757	ArgumentList	\"Creating console\"
>5758	Argument	\"Creating console\"
>5759	PrimaryExpression	\"Creating console\"
>5760	Callee	debugLog
>5761	Identifier	debugLog
>5762	ExpressionStatement	 
>5763	CallExpression	debugLog ( \"done\" )
>5764	ArgumentList	\"done\"
>5765	Argument	\"done\"
>5766	PrimaryExpression	\"done\"
>5767	Callee	debugLog
>5768	Identifier	debugLog
>5769	ExpressionStatement	 
>5770	CallExpression	dsq -> postProcessingFx . init ( )
>5771	ArgumentList	 
>5772	Callee	dsq -> postProcessingFx . init
>5773	MemberAccess	dsq -> postProcessingFx . init
>5774	Identifier	init
>5775	PtrMemberAccess	dsq -> postProcessingFx
>5776	Identifier	postProcessingFx
>5777	Identifier	dsq
>5778	ExpressionStatement	 
>5779	CallExpression	debugLog ( \"post FX init\" )
>5780	ArgumentList	\"post FX init\"
>5781	Argument	\"post FX init\"
>5782	PrimaryExpression	\"post FX init\"
>5783	Callee	debugLog
>5784	Identifier	debugLog
>5785	ExpressionStatement	 
>5786	CallExpression	debugLog ( \"done\" )
>5787	ArgumentList	\"done\"
>5788	Argument	\"done\"
>5789	PrimaryExpression	\"done\"
>5790	Callee	debugLog
>5791	Identifier	debugLog
>5792	ExpressionStatement	 
>5793	CallExpression	dsq -> darkLayer . toggle ( 0 )
>5794	ArgumentList	0
>5795	Argument	0
>5796	PrimaryExpression	0
>5797	Callee	dsq -> darkLayer . toggle
>5798	MemberAccess	dsq -> darkLayer . toggle
>5799	Identifier	toggle
>5800	PtrMemberAccess	dsq -> darkLayer
>5801	Identifier	darkLayer
>5802	Identifier	dsq
>5803	ExpressionStatement	 
>5804	CallExpression	debugLog ( \"dark layer togle...\" )
>5805	ArgumentList	\"dark layer togle...\"
>5806	Argument	\"dark layer togle...\"
>5807	PrimaryExpression	\"dark layer togle...\"
>5808	Callee	debugLog
>5809	Identifier	debugLog
>5810	ExpressionStatement	 
>5811	CallExpression	dsq -> darkLayer . init ( user . video . darkbuffersize , user . video . darkfbuffer )
>5812	ArgumentList	user . video . darkbuffersize
>5813	Argument	user . video . darkfbuffer
>5814	MemberAccess	user . video . darkfbuffer
>5815	Identifier	darkfbuffer
>5816	MemberAccess	user . video
>5817	Identifier	video
>5818	Identifier	user
>5819	Argument	user . video . darkbuffersize
>5820	MemberAccess	user . video . darkbuffersize
>5821	Identifier	darkbuffersize
>5822	MemberAccess	user . video
>5823	Identifier	video
>5824	Identifier	user
>5825	Callee	dsq -> darkLayer . init
>5826	MemberAccess	dsq -> darkLayer . init
>5827	Identifier	init
>5828	PtrMemberAccess	dsq -> darkLayer
>5829	Identifier	darkLayer
>5830	Identifier	dsq
>5831	ExpressionStatement	 
>5832	CallExpression	debugLog ( \"dark layer init\" )
>5833	ArgumentList	\"dark layer init\"
>5834	Argument	\"dark layer init\"
>5835	PrimaryExpression	\"dark layer init\"
>5836	Callee	debugLog
>5837	Identifier	debugLog
>5838	ExpressionStatement	 
>5839	CallExpression	dsq -> darkLayer . setLayers ( LR_ELEMENTS13 , LR_AFTER_EFFECTS )
>5840	ArgumentList	LR_ELEMENTS13
>5841	Argument	LR_AFTER_EFFECTS
>5842	Identifier	LR_AFTER_EFFECTS
>5843	Argument	LR_ELEMENTS13
>5844	Identifier	LR_ELEMENTS13
>5845	Callee	dsq -> darkLayer . setLayers
>5846	MemberAccess	dsq -> darkLayer . setLayers
>5847	Identifier	setLayers
>5848	PtrMemberAccess	dsq -> darkLayer
>5849	Identifier	darkLayer
>5850	Identifier	dsq
>5851	ExpressionStatement	 
>5852	AssignmentExpr	user . video . darkbuffersize = MAX ( user . video . darkbuffersize , 128 )
>5853	CallExpression	MAX ( user . video . darkbuffersize , 128 )
>5854	ArgumentList	user . video . darkbuffersize
>5855	Argument	128
>5856	PrimaryExpression	128
>5857	Argument	user . video . darkbuffersize
>5858	MemberAccess	user . video . darkbuffersize
>5859	Identifier	darkbuffersize
>5860	MemberAccess	user . video
>5861	Identifier	video
>5862	Identifier	user
>5863	Callee	MAX
>5864	Identifier	MAX
>5865	MemberAccess	user . video . darkbuffersize
>5866	Identifier	darkbuffersize
>5867	MemberAccess	user . video
>5868	Identifier	video
>5869	Identifier	user
>5870	ExpressionStatement	 
>5871	CallExpression	addRenderObject ( cursor , LR_CURSOR )
>5872	ArgumentList	cursor
>5873	Argument	LR_CURSOR
>5874	Identifier	LR_CURSOR
>5875	Argument	cursor
>5876	Identifier	cursor
>5877	Callee	addRenderObject
>5878	Identifier	addRenderObject
>5879	CompoundStatement	 
>5880	ExpressionStatement	 
>5881	AssignmentExpr	cursor -> alpha = 0
>5882	PrimaryExpression	0
>5883	PtrMemberAccess	cursor -> alpha
>5884	Identifier	alpha
>5885	Identifier	cursor
>5886	ExpressionStatement	 
>5887	CallExpression	cursor -> setWidthHeight ( 24 , 24 )
>5888	ArgumentList	24
>5889	Argument	24
>5890	PrimaryExpression	24
>5891	Argument	24
>5892	PrimaryExpression	24
>5893	Callee	cursor -> setWidthHeight
>5894	PtrMemberAccess	cursor -> setWidthHeight
>5895	Identifier	setWidthHeight
>5896	Identifier	cursor
>5897	ExpressionStatement	 
>5898	AssignmentExpr	cursor -> followCamera = 1
>5899	PrimaryExpression	1
>5900	PtrMemberAccess	cursor -> followCamera
>5901	Identifier	followCamera
>5902	Identifier	cursor
>5903	ExpressionStatement	 
>5904	CallExpression	cursor -> toggleCull ( false )
>5905	ArgumentList	false
>5906	Argument	false
>5907	Identifier	false
>5908	Callee	cursor -> toggleCull
>5909	PtrMemberAccess	cursor -> toggleCull
>5910	Identifier	toggleCull
>5911	Identifier	cursor
>5912	ExpressionStatement	 
>5913	AssignmentExpr	cursor -> alphaMod = 0.5
>5914	PrimaryExpression	0.5
>5915	PtrMemberAccess	cursor -> alphaMod
>5916	Identifier	alphaMod
>5917	Identifier	cursor
>5918	ExpressionStatement	 
>5919	Identifier	Quad
>5920	Statement	 
>5921	Statement	 
>5922	Statement	 
>5923	ExpressionStatement	 
>5924	CallExpression	setTexturePointers ( )
>5925	ArgumentList	 
>5926	Callee	setTexturePointers
>5927	Identifier	setTexturePointers
>5928	ExpressionStatement	 
>5929	CallExpression	dsq -> continuity . stringBank . load ( )
>5930	ArgumentList	 
>5931	Callee	dsq -> continuity . stringBank . load
>5932	MemberAccess	dsq -> continuity . stringBank . load
>5933	Identifier	load
>5934	MemberAccess	dsq -> continuity . stringBank
>5935	Identifier	stringBank
>5936	PtrMemberAccess	dsq -> continuity
>5937	Identifier	continuity
>5938	Identifier	dsq
>5939	ExpressionStatement	 
>5940	CallExpression	loadBit ( LOAD_FONTS )
>5941	ArgumentList	LOAD_FONTS
>5942	Argument	LOAD_FONTS
>5943	Identifier	LOAD_FONTS
>5944	Callee	loadBit
>5945	Identifier	loadBit
>5946	ExpressionStatement	 
>5947	CallExpression	loadFonts ( )
>5948	ArgumentList	 
>5949	Callee	loadFonts
>5950	Identifier	loadFonts
>5951	ExpressionStatement	 
>5952	CallExpression	debugLog ( \"OK\" )
>5953	ArgumentList	\"OK\"
>5954	Argument	\"OK\"
>5955	PrimaryExpression	\"OK\"
>5956	Callee	debugLog
>5957	Identifier	debugLog
>5958	ExpressionStatement	 
>5959	CallExpression	scriptInterface . init ( )
>5960	ArgumentList	 
>5961	Callee	scriptInterface . init
>5962	MemberAccess	scriptInterface . init
>5963	Identifier	init
>5964	Identifier	scriptInterface
>5965	ExpressionStatement	 
>5966	CallExpression	debugLog ( \"Init Script Interface...\" )
>5967	ArgumentList	\"Init Script Interface...\"
>5968	Argument	\"Init Script Interface...\"
>5969	PrimaryExpression	\"Init Script Interface...\"
>5970	Callee	debugLog
>5971	Identifier	debugLog
>5972	ExpressionStatement	 
>5973	CallExpression	loadBit ( LOAD_SOUNDCACHE )
>5974	ArgumentList	LOAD_SOUNDCACHE
>5975	Argument	LOAD_SOUNDCACHE
>5976	Identifier	LOAD_SOUNDCACHE
>5977	Callee	loadBit
>5978	Identifier	loadBit
>5979	ExpressionStatement	 
>5980	CallExpression	debugLog ( \"OK\" )
>5981	ArgumentList	\"OK\"
>5982	Argument	\"OK\"
>5983	PrimaryExpression	\"OK\"
>5984	Callee	debugLog
>5985	Identifier	debugLog
>5986	ExpressionStatement	 
>5987	CallExpression	sound -> loadSoundCache ( \"sfx/cache/\" , \".ogg\" , loadBitForSoundCache )
>5988	ArgumentList	\"sfx/cache/\"
>5989	Argument	loadBitForSoundCache
>5990	Identifier	loadBitForSoundCache
>5991	Argument	\".ogg\"
>5992	PrimaryExpression	\".ogg\"
>5993	Argument	\"sfx/cache/\"
>5994	PrimaryExpression	\"sfx/cache/\"
>5995	Callee	sound -> loadSoundCache
>5996	PtrMemberAccess	sound -> loadSoundCache
>5997	Identifier	loadSoundCache
>5998	Identifier	sound
>5999	ExpressionStatement	 
>6000	CallExpression	debugLog ( \"Loading Sound Cache...\" )
>6001	ArgumentList	\"Loading Sound Cache...\"
>6002	Argument	\"Loading Sound Cache...\"
>6003	PrimaryExpression	\"Loading Sound Cache...\"
>6004	Callee	debugLog
>6005	Identifier	debugLog
>6006	ExpressionStatement	 
>6007	CallExpression	loadBit ( LOAD_PARTICLES )
>6008	ArgumentList	LOAD_PARTICLES
>6009	Argument	LOAD_PARTICLES
>6010	Identifier	LOAD_PARTICLES
>6011	Callee	loadBit
>6012	Identifier	loadBit
>6013	ExpressionStatement	 
>6014	CallExpression	debugLog ( \"OK\" )
>6015	ArgumentList	\"OK\"
>6016	Argument	\"OK\"
>6017	PrimaryExpression	\"OK\"
>6018	Callee	debugLog
>6019	Identifier	debugLog
>6020	CompoundStatement	 
>6021	ExpressionStatement	 
>6022	CallExpression	Shot 
>6023	ArgumentList	shotBank1
>6024	Argument	shotBank2
>6025	Identifier	shotBank2
>6026	Argument	shotBank1
>6027	Identifier	shotBank1
>6028	Callee	Shot 
>6029	Identifier	Shot 
>6030	ExpressionStatement	 
>6031	CallExpression	core -> particleManager -> loadParticleBank ( particleBank1 , particleBank2 )
>6032	ArgumentList	particleBank1
>6033	Argument	particleBank2
>6034	Identifier	particleBank2
>6035	Argument	particleBank1
>6036	Identifier	particleBank1
>6037	Callee	core -> particleManager -> loadParticleBank
>6038	PtrMemberAccess	core -> particleManager -> loadParticleBank
>6039	Identifier	loadParticleBank
>6040	PtrMemberAccess	core -> particleManager
>6041	Identifier	particleManager
>6042	Identifier	core
>6043	ExpressionStatement	 
>6044	CallExpression	debugLog ( \"Loading Particle Bank...\" )
>6045	ArgumentList	\"Loading Particle Bank...\"
>6046	Argument	\"Loading Particle Bank...\"
>6047	PrimaryExpression	\"Loading Particle Bank...\"
>6048	Callee	debugLog
>6049	Identifier	debugLog
>6050	ExpressionStatement	 
>6051	CallExpression	loadBit ( LOAD_INITIAL )
>6052	ArgumentList	LOAD_INITIAL
>6053	Argument	LOAD_INITIAL
>6054	Identifier	LOAD_INITIAL
>6055	Callee	loadBit
>6056	Identifier	loadBit
>6057	ExpressionStatement	 
>6058	CallExpression	core -> showBuffer ( )
>6059	ArgumentList	 
>6060	Callee	core -> showBuffer
>6061	PtrMemberAccess	core -> showBuffer
>6062	Identifier	showBuffer
>6063	Identifier	core
>6064	ExpressionStatement	 
>6065	CallExpression	core -> render ( )
>6066	ArgumentList	 
>6067	Callee	core -> render
>6068	PtrMemberAccess	core -> render
>6069	Identifier	render
>6070	Identifier	core
>6071	ExpressionStatement	 
>6072	CallExpression	addRenderObject ( sider , LR_HUD )
>6073	ArgumentList	sider
>6074	Argument	LR_HUD
>6075	Identifier	LR_HUD
>6076	Argument	sider
>6077	Identifier	sider
>6078	Callee	addRenderObject
>6079	Identifier	addRenderObject
>6080	ExpressionStatement	 
>6081	AssignmentExpr	sider -> scale = sz
>6082	Identifier	sz
>6083	PtrMemberAccess	sider -> scale
>6084	Identifier	scale
>6085	Identifier	sider
>6086	ExpressionStatement	 
>6087	AssignmentExpr	sider -> followCamera = 1
>6088	PrimaryExpression	1
>6089	PtrMemberAccess	sider -> followCamera
>6090	Identifier	followCamera
>6091	Identifier	sider
>6092	ExpressionStatement	 
>6093	CallExpression	sider -> flipHorizontal ( )
>6094	ArgumentList	 
>6095	Callee	sider -> flipHorizontal
>6096	PtrMemberAccess	sider -> flipHorizontal
>6097	Identifier	flipHorizontal
>6098	Identifier	sider
>6099	IdentifierDeclStatement	 
>6100	IdentifierDecl	* sider = new Quad ( \"loading/side\" , Vector ( 400 + sideOut , 300 + sideDown ) )
>6101	AssignmentExpr	* sider = new Quad ( \"loading/side\" , Vector ( 400 + sideOut , 300 + sideDown ) )
>6102	Expression	\"loading/side\" , Vector ( 400 + sideOut , 300 + sideDown )
>6103	CallExpression	Vector ( 400 + sideOut , 300 + sideDown )
>6104	ArgumentList	400 + sideOut
>6105	Argument	300 + sideDown
>6106	AdditiveExpression	300 + sideDown
>6107	Identifier	sideDown
>6108	PrimaryExpression	300
>6109	Argument	400 + sideOut
>6110	AdditiveExpression	400 + sideOut
>6111	Identifier	sideOut
>6112	PrimaryExpression	400
>6113	Callee	Vector
>6114	Identifier	Vector
>6115	PrimaryExpression	\"loading/side\"
>6116	Identifier	sider
>6117	Identifier	sider
>6118	IdentifierDeclType	Quad *
>6119	ExpressionStatement	 
>6120	CallExpression	addRenderObject ( sidel , LR_HUD )
>6121	ArgumentList	sidel
>6122	Argument	LR_HUD
>6123	Identifier	LR_HUD
>6124	Argument	sidel
>6125	Identifier	sidel
>6126	Callee	addRenderObject
>6127	Identifier	addRenderObject
>6128	ExpressionStatement	 
>6129	AssignmentExpr	sidel -> scale = sz
>6130	Identifier	sz
>6131	PtrMemberAccess	sidel -> scale
>6132	Identifier	scale
>6133	Identifier	sidel
>6134	ExpressionStatement	 
>6135	AssignmentExpr	sidel -> followCamera = 1
>6136	PrimaryExpression	1
>6137	PtrMemberAccess	sidel -> followCamera
>6138	Identifier	followCamera
>6139	Identifier	sidel
>6140	IdentifierDeclStatement	 
>6141	IdentifierDecl	* sidel = new Quad ( \"loading/side\" , Vector ( 400 - sideOut , 300 + sideDown ) )
>6142	AssignmentExpr	* sidel = new Quad ( \"loading/side\" , Vector ( 400 - sideOut , 300 + sideDown ) )
>6143	Expression	\"loading/side\" , Vector ( 400 - sideOut , 300 + sideDown )
>6144	CallExpression	Vector ( 400 - sideOut , 300 + sideDown )
>6145	ArgumentList	400 - sideOut
>6146	Argument	300 + sideDown
>6147	AdditiveExpression	300 + sideDown
>6148	Identifier	sideDown
>6149	PrimaryExpression	300
>6150	Argument	400 - sideOut
>6151	AdditiveExpression	400 - sideOut
>6152	Identifier	sideOut
>6153	PrimaryExpression	400
>6154	Callee	Vector
>6155	Identifier	Vector
>6156	PrimaryExpression	\"loading/side\"
>6157	Identifier	sidel
>6158	Identifier	sidel
>6159	IdentifierDeclType	Quad *
>6160	IdentifierDeclStatement	 
>6161	IdentifierDecl	sideDown = 8
>6162	AssignmentExpr	sideDown = 8
>6163	PrimaryExpression	8
>6164	Identifier	sideDown
>6165	Identifier	sideDown
>6166	IdentifierDeclType	int
>6167	IdentifierDecl	sideOut = 300
>6168	AssignmentExpr	sideOut = 300
>6169	PrimaryExpression	300
>6170	Identifier	sideOut
>6171	Identifier	sideOut
>6172	IdentifierDeclType	int
>6173	ExpressionStatement	 
>6174	CallExpression	addRenderObject ( label , LR_HUD )
>6175	ArgumentList	label
>6176	Argument	LR_HUD
>6177	Identifier	LR_HUD
>6178	Argument	label
>6179	Identifier	label
>6180	Callee	addRenderObject
>6181	Identifier	addRenderObject
>6182	ExpressionStatement	 
>6183	AssignmentExpr	label -> scale = sz
>6184	Identifier	sz
>6185	PtrMemberAccess	label -> scale
>6186	Identifier	scale
>6187	Identifier	label
>6188	ExpressionStatement	 
>6189	AssignmentExpr	label -> followCamera = 1
>6190	PrimaryExpression	1
>6191	PtrMemberAccess	label -> followCamera
>6192	Identifier	followCamera
>6193	Identifier	label
>6194	IdentifierDeclStatement	 
>6195	IdentifierDecl	* label = new Quad ( \"loading/label\" , Vector ( 400 , 300 ) )
>6196	AssignmentExpr	* label = new Quad ( \"loading/label\" , Vector ( 400 , 300 ) )
>6197	Expression	\"loading/label\" , Vector ( 400 , 300 )
>6198	CallExpression	Vector ( 400 , 300 )
>6199	ArgumentList	400
>6200	Argument	300
>6201	PrimaryExpression	300
>6202	Argument	400
>6203	PrimaryExpression	400
>6204	Callee	Vector
>6205	Identifier	Vector
>6206	PrimaryExpression	\"loading/label\"
>6207	Identifier	label
>6208	Identifier	label
>6209	IdentifierDeclType	Quad *
>6210	ExpressionStatement	 
>6211	CallExpression	addRenderObject ( tube , LR_HUD )
>6212	ArgumentList	tube
>6213	Argument	LR_HUD
>6214	Identifier	LR_HUD
>6215	Argument	tube
>6216	Identifier	tube
>6217	Callee	addRenderObject
>6218	Identifier	addRenderObject
>6219	ExpressionStatement	 
>6220	AssignmentExpr	tube -> scale = sz
>6221	Identifier	sz
>6222	PtrMemberAccess	tube -> scale
>6223	Identifier	scale
>6224	Identifier	tube
>6225	ExpressionStatement	 
>6226	AssignmentExpr	tube -> followCamera = 1
>6227	PrimaryExpression	1
>6228	PtrMemberAccess	tube -> followCamera
>6229	Identifier	followCamera
>6230	Identifier	tube
>6231	IdentifierDeclStatement	 
>6232	IdentifierDecl	* tube = new Quad ( \"loading/tube\" , Vector ( 400 , 300 ) )
>6233	AssignmentExpr	* tube = new Quad ( \"loading/tube\" , Vector ( 400 , 300 ) )
>6234	Expression	\"loading/tube\" , Vector ( 400 , 300 )
>6235	CallExpression	Vector ( 400 , 300 )
>6236	ArgumentList	400
>6237	Argument	300
>6238	PrimaryExpression	300
>6239	Argument	400
>6240	PrimaryExpression	400
>6241	Callee	Vector
>6242	Identifier	Vector
>6243	PrimaryExpression	\"loading/tube\"
>6244	Identifier	tube
>6245	Identifier	tube
>6246	IdentifierDeclType	Quad *
>6247	IdentifierDeclStatement	 
>6248	IdentifierDecl	sz ( 800.0f / 1024.0f , 600.0f / 768.0f )
>6249	Expression	800.0f / 1024.0f , 600.0f / 768.0f
>6250	MultiplicativeExpression	600.0f / 768.0f
>6251	PrimaryExpression	768.0f
>6252	PrimaryExpression	600.0f
>6253	MultiplicativeExpression	800.0f / 1024.0f
>6254	PrimaryExpression	1024.0f
>6255	PrimaryExpression	800.0f
>6256	Identifier	sz
>6257	IdentifierDeclType	Vector
>6258	IdentifierDeclStatement	 
>6259	IdentifierDecl	loadShift ( 2 , 0 )
>6260	Expression	2 , 0
>6261	PrimaryExpression	0
>6262	PrimaryExpression	2
>6263	Identifier	loadShift
>6264	IdentifierDeclType	Vector
>6265	ExpressionStatement	 
>6266	CallExpression	addRenderObject ( loading , LR_HUD )
>6267	ArgumentList	loading
>6268	Argument	LR_HUD
>6269	Identifier	LR_HUD
>6270	Argument	loading
>6271	Identifier	loading
>6272	Callee	addRenderObject
>6273	Identifier	addRenderObject
>6274	ExpressionStatement	 
>6275	CallExpression	loading -> setWidthHeight ( 0 , 0 )
>6276	ArgumentList	0
>6277	Argument	0
>6278	PrimaryExpression	0
>6279	Argument	0
>6280	PrimaryExpression	0
>6281	Callee	loading -> setWidthHeight
>6282	PtrMemberAccess	loading -> setWidthHeight
>6283	Identifier	setWidthHeight
>6284	Identifier	loading
>6285	ExpressionStatement	 
>6286	AssignmentExpr	loading -> followCamera = 1
>6287	PrimaryExpression	1
>6288	PtrMemberAccess	loading -> followCamera
>6289	Identifier	followCamera
>6290	Identifier	loading
>6291	ExpressionStatement	 
>6292	AssignmentExpr	loading -> alpha = 1.0
>6293	PrimaryExpression	1.0
>6294	PtrMemberAccess	loading -> alpha
>6295	Identifier	alpha
>6296	Identifier	loading
>6297	ExpressionStatement	 
>6298	AssignmentExpr	loading = new Quad ( \"loading/juice\" , Vector ( 400 , 300 ) )
>6299	Expression	\"loading/juice\" , Vector ( 400 , 300 )
>6300	CallExpression	Vector ( 400 , 300 )
>6301	ArgumentList	400
>6302	Argument	300
>6303	PrimaryExpression	300
>6304	Argument	400
>6305	PrimaryExpression	400
>6306	Callee	Vector
>6307	Identifier	Vector
>6308	PrimaryExpression	\"loading/juice\"
>6309	Identifier	loading
>6310	ExpressionStatement	 
>6311	CallExpression	applyPatches ( )
>6312	ArgumentList	 
>6313	Callee	applyPatches
>6314	Identifier	applyPatches
>6315	ExpressionStatement	 
>6316	CallExpression	user . apply ( )
>6317	ArgumentList	 
>6318	Callee	user . apply
>6319	MemberAccess	user . apply
>6320	Identifier	apply
>6321	Identifier	user
>6322	IfStatement	if ( joystickMode )
>6323	CompoundStatement	 
>6324	ExpressionStatement	 
>6325	CallExpression	debugLog ( \"OK\" )
>6326	ArgumentList	\"OK\"
>6327	Argument	\"OK\"
>6328	PrimaryExpression	\"OK\"
>6329	Callee	debugLog
>6330	Identifier	debugLog
>6331	ExpressionStatement	 
>6332	CallExpression	initJoystickLibrary ( )
>6333	ArgumentList	 
>6334	Callee	initJoystickLibrary
>6335	Identifier	initJoystickLibrary
>6336	ExpressionStatement	 
>6337	CallExpression	debugLog ( \"Init Joystick Library...\" )
>6338	ArgumentList	\"Init Joystick Library...\"
>6339	Argument	\"Init Joystick Library...\"
>6340	PrimaryExpression	\"Init Joystick Library...\"
>6341	Callee	debugLog
>6342	Identifier	debugLog
>6343	Condition	 
>6344	Identifier	joystickMode
>6345	ExpressionStatement	 
>6346	AssignmentExpr	joystickMode = user . control . joystickEnabled
>6347	MemberAccess	user . control . joystickEnabled
>6348	Identifier	joystickEnabled
>6349	MemberAccess	user . control
>6350	Identifier	control
>6351	Identifier	user
>6352	Identifier	joystickMode
>6353	ExpressionStatement	 
>6354	CallExpression	debugLog ( \"OK\" )
>6355	ArgumentList	\"OK\"
>6356	Argument	\"OK\"
>6357	PrimaryExpression	\"OK\"
>6358	Callee	debugLog
>6359	Identifier	debugLog
>6360	ExpressionStatement	 
>6361	CallExpression	initInputLibrary ( )
>6362	ArgumentList	 
>6363	Callee	initInputLibrary
>6364	Identifier	initInputLibrary
>6365	ExpressionStatement	 
>6366	CallExpression	debugLog ( \"Init Input Library...\" )
>6367	ArgumentList	\"Init Input Library...\"
>6368	Argument	\"Init Input Library...\"
>6369	PrimaryExpression	\"Init Input Library...\"
>6370	Callee	debugLog
>6371	Identifier	debugLog
>6372	ExpressionStatement	 
>6373	CallExpression	debugLog ( \"OK\" )
>6374	ArgumentList	\"OK\"
>6375	Argument	\"OK\"
>6376	PrimaryExpression	\"OK\"
>6377	Callee	debugLog
>6378	Identifier	debugLog
>6379	ExpressionStatement	 
>6380	CallExpression	sound -> event_stopVoice . set ( MakeFunctionEvent ( DSQ , onStopVoice ) )
>6381	ArgumentList	MakeFunctionEvent ( DSQ , onStopVoice )
>6382	Argument	MakeFunctionEvent ( DSQ , onStopVoice )
>6383	CallExpression	MakeFunctionEvent ( DSQ , onStopVoice )
>6384	ArgumentList	DSQ
>6385	Argument	onStopVoice
>6386	Identifier	onStopVoice
>6387	Argument	DSQ
>6388	Identifier	DSQ
>6389	Callee	MakeFunctionEvent
>6390	Identifier	MakeFunctionEvent
>6391	Callee	sound -> event_stopVoice . set
>6392	MemberAccess	sound -> event_stopVoice . set
>6393	Identifier	set
>6394	PtrMemberAccess	sound -> event_stopVoice
>6395	Identifier	event_stopVoice
>6396	Identifier	sound
>6397	ExpressionStatement	 
>6398	CallExpression	sound -> event_playVoice . set ( MakeFunctionEvent ( DSQ , onPlayVoice ) )
>6399	ArgumentList	MakeFunctionEvent ( DSQ , onPlayVoice )
>6400	Argument	MakeFunctionEvent ( DSQ , onPlayVoice )
>6401	CallExpression	MakeFunctionEvent ( DSQ , onPlayVoice )
>6402	ArgumentList	DSQ
>6403	Argument	onPlayVoice
>6404	Identifier	onPlayVoice
>6405	Argument	DSQ
>6406	Identifier	DSQ
>6407	Callee	MakeFunctionEvent
>6408	Identifier	MakeFunctionEvent
>6409	Callee	sound -> event_playVoice . set
>6410	MemberAccess	sound -> event_playVoice . set
>6411	Identifier	set
>6412	PtrMemberAccess	sound -> event_playVoice
>6413	Identifier	event_playVoice
>6414	Identifier	sound
>6415	ExpressionStatement	 
>6416	CallExpression	sound -> setVoiceFader ( 0.5 )
>6417	ArgumentList	0.5
>6418	Argument	0.5
>6419	PrimaryExpression	0.5
>6420	Callee	sound -> setVoiceFader
>6421	PtrMemberAccess	sound -> setVoiceFader
>6422	Identifier	setVoiceFader
>6423	Identifier	sound
>6424	ExpressionStatement	 
>6425	CallExpression	debugLog ( \"Set Voice Fader\" )
>6426	ArgumentList	\"Set Voice Fader\"
>6427	Argument	\"Set Voice Fader\"
>6428	PrimaryExpression	\"Set Voice Fader\"
>6429	Callee	debugLog
>6430	Identifier	debugLog
>6431	ExpressionStatement	 
>6432	CallExpression	initSoundLibrary ( user . audio . deviceName )
>6433	ArgumentList	user . audio . deviceName
>6434	Argument	user . audio . deviceName
>6435	MemberAccess	user . audio . deviceName
>6436	Identifier	deviceName
>6437	MemberAccess	user . audio
>6438	Identifier	audio
>6439	Identifier	user
>6440	Callee	initSoundLibrary
>6441	Identifier	initSoundLibrary
>6442	ExpressionStatement	 
>6443	CallExpression	debugLog ( \"Init Sound Library...\" )
>6444	ArgumentList	\"Init Sound Library...\"
>6445	Argument	\"Init Sound Library...\"
>6446	PrimaryExpression	\"Init Sound Library...\"
>6447	Callee	debugLog
>6448	Identifier	debugLog
>6449	ExpressionStatement	 
>6450	CallExpression	dsq -> forceInputGrabOff ( )
>6451	ArgumentList	 
>6452	Callee	dsq -> forceInputGrabOff
>6453	PtrMemberAccess	dsq -> forceInputGrabOff
>6454	Identifier	forceInputGrabOff
>6455	Identifier	dsq
>6456	ExpressionStatement	 
>6457	CallExpression	setInputGrab ( 0 )
>6458	ArgumentList	0
>6459	Argument	0
>6460	PrimaryExpression	0
>6461	Callee	setInputGrab
>6462	Identifier	setInputGrab
>6463	ExpressionStatement	 
>6464	CallExpression	debugLog ( \"OK\" )
>6465	ArgumentList	\"OK\"
>6466	Argument	\"OK\"
>6467	PrimaryExpression	\"OK\"
>6468	Callee	debugLog
>6469	Identifier	debugLog
>6470	ExpressionStatement	 
>6471	CallExpression	core -> initFrameBuffer ( )
>6472	ArgumentList	 
>6473	Callee	core -> initFrameBuffer
>6474	PtrMemberAccess	core -> initFrameBuffer
>6475	Identifier	initFrameBuffer
>6476	Identifier	core
>6477	ExpressionStatement	 
>6478	CallExpression	core -> enable2DWide ( user . video . resx , user . video . resy )
>6479	ArgumentList	user . video . resx
>6480	Argument	user . video . resy
>6481	MemberAccess	user . video . resy
>6482	Identifier	resy
>6483	MemberAccess	user . video
>6484	Identifier	video
>6485	Identifier	user
>6486	Argument	user . video . resx
>6487	MemberAccess	user . video . resx
>6488	Identifier	resx
>6489	MemberAccess	user . video
>6490	Identifier	video
>6491	Identifier	user
>6492	Callee	core -> enable2DWide
>6493	PtrMemberAccess	core -> enable2DWide
>6494	Identifier	enable2DWide
>6495	Identifier	core
>6496	ExpressionStatement	 
>6497	CallExpression	initGraphicsLibrary ( user . video . resx , user . video . resy , fullscreen , user . video . vsync , user . video \
>6498	ArgumentList	user . video . resx
>6499	Argument	user . video . bits
>6500	MemberAccess	user . video . bits
>6501	Identifier	bits
>6502	MemberAccess	user . video
>6503	Identifier	video
>6504	Identifier	user
>6505	Argument	user . video . vsync
>6506	MemberAccess	user . video . vsync
>6507	Identifier	vsync
>6508	MemberAccess	user . video
>6509	Identifier	video
>6510	Identifier	user
>6511	Argument	fullscreen
>6512	Identifier	fullscreen
>6513	Argument	user . video . resy
>6514	MemberAccess	user . video . resy
>6515	Identifier	resy
>6516	MemberAccess	user . video
>6517	Identifier	video
>6518	Identifier	user
>6519	Argument	user . video . resx
>6520	MemberAccess	user . video . resx
>6521	Identifier	resx
>6522	MemberAccess	user . video
>6523	Identifier	video
>6524	Identifier	user
>6525	Callee	initGraphicsLibrary
>6526	Identifier	initGraphicsLibrary
>6527	ExpressionStatement	 
>6528	CallExpression	debugLog ( \"Init Graphics Library...\" )
>6529	ArgumentList	\"Init Graphics Library...\"
>6530	Argument	\"Init Graphics Library...\"
>6531	PrimaryExpression	\"Init Graphics Library...\"
>6532	Callee	debugLog
>6533	Identifier	debugLog
>6534	IfStatement	if ( fullscreen && ! sdlVideoModeOK ( user . video . resx , user . video . resy , user . video . bits ) )
>6535	CompoundStatement	 
>6536	IfStatement	if ( ! sdlVideoModeOK ( user . video . resx , user . video . resy , user . video . bits ) )
>6537	ExpressionStatement	 
>6538	AssignmentExpr	fullscreen = false
>6539	Identifier	false
>6540	Identifier	fullscreen
>6541	Condition	 
>6542	UnaryOp	! sdlVideoModeOK ( user . video . resx , user . video . resy , user . video . bits )
>6543	CallExpression	sdlVideoModeOK ( user . video . resx , user . video . resy , user . video . bits )
>6544	ArgumentList	user . video . resx
>6545	Argument	user . video . bits
>6546	MemberAccess	user . video . bits
>6547	Identifier	bits
>6548	MemberAccess	user . video
>6549	Identifier	video
>6550	Identifier	user
>6551	Argument	user . video . resy
>6552	MemberAccess	user . video . resy
>6553	Identifier	resy
>6554	MemberAccess	user . video
>6555	Identifier	video
>6556	Identifier	user
>6557	Argument	user . video . resx
>6558	MemberAccess	user . video . resx
>6559	Identifier	resx
>6560	MemberAccess	user . video
>6561	Identifier	video
>6562	Identifier	user
>6563	Callee	sdlVideoModeOK
>6564	Identifier	sdlVideoModeOK
>6565	UnaryOperator	!
>6566	ExpressionStatement	 
>6567	AssignmentExpr	user . video . resy = 600
>6568	PrimaryExpression	600
>6569	MemberAccess	user . video . resy
>6570	Identifier	resy
>6571	MemberAccess	user . video
>6572	Identifier	video
>6573	Identifier	user
>6574	ExpressionStatement	 
>6575	AssignmentExpr	user . video . resx = 800
>6576	PrimaryExpression	800
>6577	MemberAccess	user . video . resx
>6578	Identifier	resx
>6579	MemberAccess	user . video
>6580	Identifier	video
>6581	Identifier	user
>6582	Condition	 
>6583	AndExpression	fullscreen && ! sdlVideoModeOK ( user . video . resx , user . video . resy , user . video . bits )
>6584	UnaryOp	! sdlVideoModeOK ( user . video . resx , user . video . resy , user . video . bits )
>6585	CallExpression	sdlVideoModeOK ( user . video . resx , user . video . resy , user . video . bits )
>6586	ArgumentList	user . video . resx
>6587	Argument	user . video . bits
>6588	MemberAccess	user . video . bits
>6589	Identifier	bits
>6590	MemberAccess	user . video
>6591	Identifier	video
>6592	Identifier	user
>6593	Argument	user . video . resy
>6594	MemberAccess	user . video . resy
>6595	Identifier	resy
>6596	MemberAccess	user . video
>6597	Identifier	video
>6598	Identifier	user
>6599	Argument	user . video . resx
>6600	MemberAccess	user . video . resx
>6601	Identifier	resx
>6602	MemberAccess	user . video
>6603	Identifier	video
>6604	Identifier	user
>6605	Callee	sdlVideoModeOK
>6606	Identifier	sdlVideoModeOK
>6607	UnaryOperator	!
>6608	Identifier	fullscreen
>6609	ExpressionStatement	 
>6610	CallExpression	SDL_Init ( SDL_INIT_VIDEO )
>6611	ArgumentList	SDL_INIT_VIDEO
>6612	Argument	SDL_INIT_VIDEO
>6613	Identifier	SDL_INIT_VIDEO
>6614	Callee	SDL_Init
>6615	Identifier	SDL_Init
>6616	IfStatement	if ( ! createWindow ( 800 , 600 , user . video . bits , false , \"Aquaria\" ) )
>6617	CompoundStatement	 
>6618	ReturnStatement	 
>6619	ExpressionStatement	 
>6620	CallExpression	exit_error ( \"Failed to create window\" )
>6621	ArgumentList	\"Failed to create window\"
>6622	Argument	\"Failed to create window\"
>6623	PrimaryExpression	\"Failed to create window\"
>6624	Callee	exit_error
>6625	Identifier	exit_error
>6626	Condition	 
>6627	UnaryOp	! createWindow ( 800 , 600 , user . video . bits , false , \"Aquaria\" )
>6628	CallExpression	createWindow ( 800 , 600 , user . video . bits , false , \"Aquaria\" )
>6629	ArgumentList	800
>6630	Argument	\"Aquaria\"
>6631	PrimaryExpression	\"Aquaria\"
>6632	Argument	false
>6633	Identifier	false
>6634	Argument	user . video . bits
>6635	MemberAccess	user . video . bits
>6636	Identifier	bits
>6637	MemberAccess	user . video
>6638	Identifier	video
>6639	Identifier	user
>6640	Argument	600
>6641	PrimaryExpression	600
>6642	Argument	800
>6643	PrimaryExpression	800
>6644	Callee	createWindow
>6645	Identifier	createWindow
>6646	UnaryOperator	!
>6647	IfStatement	if ( voiceOversEnabled )
>6648	ElseStatement	else
>6649	ExpressionStatement	 
>6650	CallExpression	debugLog ( \"VoiceOvers Disabled\" )
>6651	ArgumentList	\"VoiceOvers Disabled\"
>6652	Argument	\"VoiceOvers Disabled\"
>6653	PrimaryExpression	\"VoiceOvers Disabled\"
>6654	Callee	debugLog
>6655	Identifier	debugLog
>6656	ExpressionStatement	 
>6657	CallExpression	debugLog ( \"VoiceOvers Enabled\" )
>6658	ArgumentList	\"VoiceOvers Enabled\"
>6659	Argument	\"VoiceOvers Enabled\"
>6660	PrimaryExpression	\"VoiceOvers Enabled\"
>6661	Callee	debugLog
>6662	Identifier	debugLog
>6663	Condition	 
>6664	Identifier	voiceOversEnabled
>6665	IfStatement	if ( isDeveloperKeys ( ) )
>6666	ElseStatement	else
>6667	ExpressionStatement	 
>6668	CallExpression	debugLog ( \"DeveloperKeys Disabled\" )
>6669	ArgumentList	\"DeveloperKeys Disabled\"
>6670	Argument	\"DeveloperKeys Disabled\"
>6671	PrimaryExpression	\"DeveloperKeys Disabled\"
>6672	Callee	debugLog
>6673	Identifier	debugLog
>6674	ExpressionStatement	 
>6675	CallExpression	debugLog ( \"DeveloperKeys Enabled\" )
>6676	ArgumentList	\"DeveloperKeys Enabled\"
>6677	Argument	\"DeveloperKeys Enabled\"
>6678	PrimaryExpression	\"DeveloperKeys Enabled\"
>6679	Callee	debugLog
>6680	Identifier	debugLog
>6681	Condition	 
>6682	CallExpression	isDeveloperKeys ( )
>6683	ArgumentList	 
>6684	Callee	isDeveloperKeys
>6685	Identifier	isDeveloperKeys
>6686	ExpressionStatement	 
>6687	AssignmentExpr	Texture 
>6688	Identifier	mipmapsEnabled
>6689	Identifier	Texture 
>6690	IfStatement	if ( mipmapsEnabled )
>6691	ElseStatement	else
>6692	ExpressionStatement	 
>6693	CallExpression	debugLog ( \"Mipmaps Disabled\" )
>6694	ArgumentList	\"Mipmaps Disabled\"
>6695	Argument	\"Mipmaps Disabled\"
>6696	PrimaryExpression	\"Mipmaps Disabled\"
>6697	Callee	debugLog
>6698	Identifier	debugLog
>6699	ExpressionStatement	 
>6700	CallExpression	debugLog ( \"Mipmaps Enabled\" )
>6701	ArgumentList	\"Mipmaps Enabled\"
>6702	Argument	\"Mipmaps Enabled\"
>6703	PrimaryExpression	\"Mipmaps Enabled\"
>6704	Callee	debugLog
>6705	Identifier	debugLog
>6706	Condition	 
>6707	Identifier	mipmapsEnabled
>6708	IfStatement	if ( isDeveloperKeys ( ) )
>6709	CompoundStatement	 
>6710	ExpressionStatement	 
>6711	AssignmentExpr	maxPages = 600 / saveSlotPageSize
>6712	MultiplicativeExpression	600 / saveSlotPageSize
>6713	Identifier	saveSlotPageSize
>6714	PrimaryExpression	600
>6715	Identifier	maxPages
>6716	Condition	 
>6717	CallExpression	isDeveloperKeys ( )
>6718	ArgumentList	 
>6719	Callee	isDeveloperKeys
>6720	Identifier	isDeveloperKeys
>6721	ExpressionStatement	 
>6722	AssignmentExpr	useFrameBuffer = user . video . fbuffer
>6723	MemberAccess	user . video . fbuffer
>6724	Identifier	fbuffer
>6725	MemberAccess	user . video
>6726	Identifier	video
>6727	Identifier	user
>6728	Identifier	useFrameBuffer
>6729	ExpressionStatement	 
>6730	CallExpression	setFilter ( dsq_filter )
>6731	ArgumentList	dsq_filter
>6732	Argument	dsq_filter
>6733	Identifier	dsq_filter
>6734	Callee	setFilter
>6735	Identifier	setFilter
>6736	IfStatement	if ( asp < 1.0f )
>6737	CompoundStatement	 
>6738	ExpressionStatement	 
>6739	CallExpression	exit_error ( os . str ( ) )
>6740	ArgumentList	os . str ( )
>6741	Argument	os . str ( )
>6742	CallExpression	os . str ( )
>6743	ArgumentList	 
>6744	Callee	os . str
>6745	MemberAccess	os . str
>6746	Identifier	str
>6747	Identifier	os
>6748	Callee	exit_error
>6749	Identifier	exit_error
>6750	ExpressionStatement	 
>6751	ShiftExpression	os << \"Aspect ratio for resolution [\" << user . video . resx << \", \" << user . video . resy << \"] not \
>6752	ShiftExpression	\"Aspect ratio for resolution [\" << user . video . resx << \", \" << user . video . resy << \"] not supported.\"\
>6753	ShiftExpression	user . video . resx << \", \" << user . video . resy << \"] not supported.\"
>6754	ShiftExpression	\", \" << user . video . resy << \"] not supported.\"
>6755	ShiftExpression	user . video . resy << \"] not supported.\"
>6756	PrimaryExpression	\"] not supported.\"
>6757	MemberAccess	user . video . resy
>6758	Identifier	resy
>6759	MemberAccess	user . video
>6760	Identifier	video
>6761	Identifier	user
>6762	PrimaryExpression	\", \"
>6763	MemberAccess	user . video . resx
>6764	Identifier	resx
>6765	MemberAccess	user . video
>6766	Identifier	video
>6767	Identifier	user
>6768	PrimaryExpression	\"Aspect ratio for resolution [\"
>6769	Identifier	os
>6770	IdentifierDeclStatement	 
>6771	IdentifierDecl	os
>6772	Identifier	os
>6773	IdentifierDeclType	std 
>6774	Condition	 
>6775	RelationalExpression	asp < 1.0f
>6776	PrimaryExpression	1.0f
>6777	Identifier	asp
>6778	IdentifierDeclStatement	 
>6779	IdentifierDecl	asp = float ( user . video . resx ) / float ( user . video . resy )
>6780	AssignmentExpr	asp = float ( user . video . resx ) / float ( user . video . resy )
>6781	MultiplicativeExpression	float ( user . video . resx ) / float ( user . video . resy )
>6782	CallExpression	float ( user . video . resy )
>6783	ArgumentList	user . video . resy
>6784	Argument	user . video . resy
>6785	MemberAccess	user . video . resy
>6786	Identifier	resy
>6787	MemberAccess	user . video
>6788	Identifier	video
>6789	Identifier	user
>6790	Callee	float
>6791	Identifier	float
>6792	CallExpression	float ( user . video . resx )
>6793	ArgumentList	user . video . resx
>6794	Argument	user . video . resx
>6795	MemberAccess	user . video . resx
>6796	Identifier	resx
>6797	MemberAccess	user . video
>6798	Identifier	video
>6799	Identifier	user
>6800	Callee	float
>6801	Identifier	float
>6802	Identifier	asp
>6803	Identifier	asp
>6804	IdentifierDeclType	float
>6805	ExpressionStatement	 
>6806	AssignmentExpr	fullscreen = user . video . full
>6807	MemberAccess	user . video . full
>6808	Identifier	full
>6809	MemberAccess	user . video
>6810	Identifier	video
>6811	Identifier	user
>6812	Identifier	fullscreen
>6813	ExpressionStatement	 
>6814	CallExpression	particleManager -> setSize ( user . video . numParticles )
>6815	ArgumentList	user . video . numParticles
>6816	Argument	user . video . numParticles
>6817	MemberAccess	user . video . numParticles
>6818	Identifier	numParticles
>6819	MemberAccess	user . video
>6820	Identifier	video
>6821	Identifier	user
>6822	Callee	particleManager -> setSize
>6823	PtrMemberAccess	particleManager -> setSize
>6824	Identifier	setSize
>6825	Identifier	particleManager
>6826	ExpressionStatement	 
>6827	CallExpression	user . load ( false )
>6828	ArgumentList	false
>6829	Argument	false
>6830	Identifier	false
>6831	Callee	user . load
>6832	MemberAccess	user . load
>6833	Identifier	load
>6834	Identifier	user
>6835	ExpressionStatement	 
>6836	AssignmentExpr	voiceOversEnabled = true
>6837	Identifier	true
>6838	Identifier	voiceOversEnabled
>6839	IdentifierDeclStatement	 
>6840	IdentifierDecl	dsq_filter = 0
>6841	AssignmentExpr	dsq_filter = 0
>6842	PrimaryExpression	0
>6843	Identifier	dsq_filter
>6844	Identifier	dsq_filter
>6845	IdentifierDeclType	int
>6846	IdentifierDeclStatement	 
>6847	IdentifierDecl	joystickMode = 0
>6848	AssignmentExpr	joystickMode = 0
>6849	PrimaryExpression	0
>6850	Identifier	joystickMode
>6851	Identifier	joystickMode
>6852	IdentifierDeclType	int
>6853	IdentifierDeclStatement	 
>6854	IdentifierDecl	fullscreen = true
>6855	AssignmentExpr	fullscreen = true
>6856	Identifier	true
>6857	Identifier	true
>6858	Identifier	fullscreen
>6859	IdentifierDeclType	bool
>6860	IdentifierDeclStatement	 
>6861	IdentifierDecl	mipmapsEnabled = true
>6862	AssignmentExpr	mipmapsEnabled = true
>6863	Identifier	true
>6864	Identifier	true
>6865	Identifier	mipmapsEnabled
>6866	IdentifierDeclType	bool
>6867	ExpressionStatement	 
>6868	CallExpression	this -> setBaseTextureDirectory ( \"gfx/\" )
>6869	ArgumentList	\"gfx/\"
>6870	Argument	\"gfx/\"
>6871	PrimaryExpression	\"gfx/\"
>6872	Callee	this -> setBaseTextureDirectory
>6873	PtrMemberAccess	this -> setBaseTextureDirectory
>6874	Identifier	setBaseTextureDirectory
>6875	Identifier	this
>6876	ExpressionStatement	 
>6877	Statement	 
>6878	Statement	 
>6879	Statement	 
>6880	Statement	 
>6881	Statement	 
>6882	ExpressionStatement	 
>6883	Statement	 
>6884	Statement	 
>6885	Statement	 
>6886	Statement	 
>6887	Statement	 
>6888	ExpressionStatement	 
>6889	Statement	 
>6890	Statement	 
>6891	Statement	 
>6892	Statement	 
>6893	Statement	 
>6894	ExpressionStatement	 
>6895	Statement	 
>6896	Statement	 
>6897	Statement	 
>6898	Statement	 
>6899	Statement	 
>6900	ExpressionStatement	 
>6901	Statement	 
>6902	Statement	 
>6903	Statement	 
>6904	Statement	 
>6905	Statement	 
>6906	ExpressionStatement	 
>6907	Statement	 
>6908	Statement	 
>6909	Statement	 
>6910	Statement	 
>6911	Statement	 
>6912	ExpressionStatement	 
>6913	Statement	 
>6914	Statement	 
>6915	Statement	 
>6916	Statement	 
>6917	Statement	 
>6918	ExpressionStatement	 
>6919	Statement	 
>6920	Statement	 
>6921	Statement	 
>6922	Statement	 
>6923	Statement	 
>6924	ExpressionStatement	 
>6925	Statement	 
>6926	Statement	 
>6927	Statement	 
>6928	Statement	 
>6929	Statement	 
>6930	Statement	 
>6931	Statement	 
>6932	ExpressionStatement	 
>6933	CallExpression	createDir ( getUserDataFolder ( ) + \"/screenshots\" )
>6934	ArgumentList	getUserDataFolder ( ) + \"/screenshots\"
>6935	Argument	getUserDataFolder ( ) + \"/screenshots\"
>6936	AdditiveExpression	getUserDataFolder ( ) + \"/screenshots\"
>6937	PrimaryExpression	\"/screenshots\"
>6938	CallExpression	getUserDataFolder ( )
>6939	ArgumentList	 
>6940	Callee	getUserDataFolder
>6941	Identifier	getUserDataFolder
>6942	Callee	createDir
>6943	Identifier	createDir
>6944	ExpressionStatement	 
>6945	CallExpression	createDir ( getUserDataFolder ( ) + \"/_mods\" )
>6946	ArgumentList	getUserDataFolder ( ) + \"/_mods\"
>6947	Argument	getUserDataFolder ( ) + \"/_mods\"
>6948	AdditiveExpression	getUserDataFolder ( ) + \"/_mods\"
>6949	PrimaryExpression	\"/_mods\"
>6950	CallExpression	getUserDataFolder ( )
>6951	ArgumentList	 
>6952	Callee	getUserDataFolder
>6953	Identifier	getUserDataFolder
>6954	Callee	createDir
>6955	Identifier	createDir
>6956	ExpressionStatement	 
>6957	CallExpression	createDir ( getUserDataFolder ( ) + \"/save\" )
>6958	ArgumentList	getUserDataFolder ( ) + \"/save\"
>6959	Argument	getUserDataFolder ( ) + \"/save\"
>6960	AdditiveExpression	getUserDataFolder ( ) + \"/save\"
>6961	PrimaryExpression	\"/save\"
>6962	CallExpression	getUserDataFolder ( )
>6963	ArgumentList	 
>6964	Callee	getUserDataFolder
>6965	Identifier	getUserDataFolder
>6966	Callee	createDir
>6967	Identifier	createDir
>6968	ExpressionStatement	 
>6969	CallExpression	createDir ( getUserDataFolder ( ) )
>6970	ArgumentList	getUserDataFolder ( )
>6971	Argument	getUserDataFolder ( )
>6972	CallExpression	getUserDataFolder ( )
>6973	ArgumentList	 
>6974	Callee	getUserDataFolder
>6975	Identifier	getUserDataFolder
>6976	Callee	createDir
>6977	Identifier	createDir
>6978	IfStatement	if ( ! exists ( fn ) )
>6979	ExpressionStatement	 
>6980	CallExpression	Linux_CopyTree ( core -> adjustFilenameCase ( \"_mods\" ) . c_str ( ) , core -> adjustFilenameCase ( fn ) . c_str ( ) )
>6981	ArgumentList	core -> adjustFilenameCase ( \"_mods\" ) . c_str ( )
>6982	Argument	core -> adjustFilenameCase ( fn ) . c_str ( )
>6983	CallExpression	core -> adjustFilenameCase ( fn ) . c_str ( )
>6984	ArgumentList	 
>6985	Callee	core -> adjustFilenameCase ( fn ) . c_str
>6986	MemberAccess	core -> adjustFilenameCase ( fn ) . c_str
>6987	Identifier	c_str
>6988	CallExpression	core -> adjustFilenameCase ( fn )
>6989	ArgumentList	fn
>6990	Argument	fn
>6991	Identifier	fn
>6992	Callee	core -> adjustFilenameCase
>6993	PtrMemberAccess	core -> adjustFilenameCase
>6994	Identifier	adjustFilenameCase
>6995	Identifier	core
>6996	Argument	core -> adjustFilenameCase ( \"_mods\" ) . c_str ( )
>6997	CallExpression	core -> adjustFilenameCase ( \"_mods\" ) . c_str ( )
>6998	ArgumentList	 
>6999	Callee	core -> adjustFilenameCase ( \"_mods\" ) . c_str
>7000	MemberAccess	core -> adjustFilenameCase ( \"_mods\" ) . c_str
>7001	Identifier	c_str
>7002	CallExpression	core -> adjustFilenameCase ( \"_mods\" )
>7003	ArgumentList	\"_mods\"
>7004	Argument	\"_mods\"
>7005	PrimaryExpression	\"_mods\"
>7006	Callee	core -> adjustFilenameCase
>7007	PtrMemberAccess	core -> adjustFilenameCase
>7008	Identifier	adjustFilenameCase
>7009	Identifier	core
>7010	Callee	Linux_CopyTree
>7011	Identifier	Linux_CopyTree
>7012	Condition	 
>7013	UnaryOp	! exists ( fn )
>7014	CallExpression	exists ( fn )
>7015	ArgumentList	fn
>7016	Argument	fn
>7017	Identifier	fn
>7018	Callee	exists
>7019	Identifier	exists
>7020	UnaryOperator	!
>7021	ExpressionStatement	 
>7022	AssignmentExpr	fn = getUserDataFolder ( ) + \"/_mods\"
>7023	AdditiveExpression	getUserDataFolder ( ) + \"/_mods\"
>7024	PrimaryExpression	\"/_mods\"
>7025	CallExpression	getUserDataFolder ( )
>7026	ArgumentList	 
>7027	Callee	getUserDataFolder
>7028	Identifier	getUserDataFolder
>7029	Identifier	fn
>7030	IfStatement	if ( ! exists ( fn ) )
>7031	ExpressionStatement	 
>7032	CallExpression	Linux_CopyTree ( core -> adjustFilenameCase ( userSettingsFilename ) . c_str ( ) , core -> adjustFilenameCase ( \
>7033	ArgumentList	core -> adjustFilenameCase ( userSettingsFilename ) . c_str ( )
>7034	Argument	core -> adjustFilenameCase ( fn ) . c_str ( )
>7035	CallExpression	core -> adjustFilenameCase ( fn ) . c_str ( )
>7036	ArgumentList	 
>7037	Callee	core -> adjustFilenameCase ( fn ) . c_str
>7038	MemberAccess	core -> adjustFilenameCase ( fn ) . c_str
>7039	Identifier	c_str
>7040	CallExpression	core -> adjustFilenameCase ( fn )
>7041	ArgumentList	fn
>7042	Argument	fn
>7043	Identifier	fn
>7044	Callee	core -> adjustFilenameCase
>7045	PtrMemberAccess	core -> adjustFilenameCase
>7046	Identifier	adjustFilenameCase
>7047	Identifier	core
>7048	Argument	core -> adjustFilenameCase ( userSettingsFilename ) . c_str ( )
>7049	CallExpression	core -> adjustFilenameCase ( userSettingsFilename ) . c_str ( )
>7050	ArgumentList	 
>7051	Callee	core -> adjustFilenameCase ( userSettingsFilename ) . c_str
>7052	MemberAccess	core -> adjustFilenameCase ( userSettingsFilename ) . c_str
>7053	Identifier	c_str
>7054	CallExpression	core -> adjustFilenameCase ( userSettingsFilename )
>7055	ArgumentList	userSettingsFilename
>7056	Argument	userSettingsFilename
>7057	Identifier	userSettingsFilename
>7058	Callee	core -> adjustFilenameCase
>7059	PtrMemberAccess	core -> adjustFilenameCase
>7060	Identifier	adjustFilenameCase
>7061	Identifier	core
>7062	Callee	Linux_CopyTree
>7063	Identifier	Linux_CopyTree
>7064	Condition	 
>7065	UnaryOp	! exists ( fn )
>7066	CallExpression	exists ( fn )
>7067	ArgumentList	fn
>7068	Argument	fn
>7069	Identifier	fn
>7070	Callee	exists
>7071	Identifier	exists
>7072	UnaryOperator	!
>7073	ExpressionStatement	 
>7074	AssignmentExpr	fn = getPreferencesFolder ( ) + \"/\" + userSettingsFilename
>7075	AdditiveExpression	getPreferencesFolder ( ) + \"/\" + userSettingsFilename
>7076	AdditiveExpression	\"/\" + userSettingsFilename
>7077	Identifier	userSettingsFilename
>7078	PrimaryExpression	\"/\"
>7079	CallExpression	getPreferencesFolder ( )
>7080	ArgumentList	 
>7081	Callee	getPreferencesFolder
>7082	Identifier	getPreferencesFolder
>7083	Identifier	fn
>7084	IdentifierDeclStatement	 
>7085	IdentifierDecl	fn
>7086	Identifier	fn
>7087	IdentifierDeclType	std 
>7088	ExpressionStatement	 
>7089	CallExpression	continuity . init ( )
>7090	ArgumentList	 
>7091	Callee	continuity . init
>7092	MemberAccess	continuity . init
>7093	Identifier	init
>7094	Identifier	continuity
>7095	ExpressionStatement	 
>7096	CallExpression	v . load ( )
>7097	ArgumentList	 
>7098	Callee	v . load
>7099	MemberAccess	v . load
>7100	Identifier	load
>7101	Identifier	v
>7102	ExpressionStatement	 
>7103	AssignmentExpr	vars = & v
>7104	UnaryOp	& v
>7105	Identifier	v
>7106	UnaryOperator	&
>7107	Identifier	vars
>7108	ExpressionStatement	 
>7109	CallExpression	continuity . stringBank . load ( )
>7110	ArgumentList	 
>7111	Callee	continuity . stringBank . load
>7112	MemberAccess	continuity . stringBank . load
>7113	Identifier	load
>7114	MemberAccess	continuity . stringBank
>7115	Identifier	stringBank
>7116	Identifier	continuity
>7117	ExpressionStatement	 
>7118	CallExpression	Core 
>7119	ArgumentList	 
>7120	Callee	Core 
>7121	Identifier	Core 
>7122	ExpressionStatement	 
>7123	AssignmentExpr	gameSpeed = 1
>7124	PrimaryExpression	1
>7125	Identifier	gameSpeed
>7126	ExpressionStatement	 
>7127	AssignmentExpr	useFrameBuffer = false
>7128	Identifier	false
>7129	Identifier	useFrameBuffer
>7130	ExpressionStatement	 
>7131	CallExpression	debugLog ( \"DSQ init\" )
>7132	ArgumentList	\"DSQ init\"
>7133	Argument	\"DSQ init\"
>7134	PrimaryExpression	\"DSQ init\"
>7135	Callee	debugLog
>7136	Identifier	debugLog
>7137	ExpressionStatement	 
>7138	AssignmentExpr	routeShoulder = true
>7139	Identifier	true
>7140	Identifier	routeShoulder
>7141	ExpressionStatement	 
>7142	AssignmentExpr	cmDebug = 0
>7143	PrimaryExpression	0
>7144	Identifier	cmDebug
>7145	ExpressionStatement	 
>7146	AssignmentExpr	fpsText = 0
>7147	PrimaryExpression	0
>7148	Identifier	fpsText
>7149	ExpressionStatement	 
>7150	AssignmentExpr	disableMiniMapOnNoInput = true
>7151	Identifier	true
>7152	Identifier	disableMiniMapOnNoInput
>7153	ExpressionStatement	 
>7154	AssignmentExpr	weird = 0
>7155	PrimaryExpression	0
>7156	Identifier	weird
>7157	ExpressionStatement	 
>7158	AssignmentExpr	core -> settings . runInBackground = true
>7159	Identifier	true
>7160	MemberAccess	core -> settings . runInBackground
>7161	Identifier	runInBackground
>7162	PtrMemberAccess	core -> settings
>7163	Identifier	settings
>7164	Identifier	core
>7513	FunctionDef	DSQ 
>7514	ParameterList	 
>7515	ReturnType	void
>7516	CompoundStatement	 
>7517	IfStatement	if ( getVirtualHeight ( ) > 600 )
>7518	CompoundStatement	 
>7519	ExpressionStatement	 
>7520	CallExpression	addRenderObject ( bar_down , LR_BLACKBARS )
>7521	ArgumentList	bar_down
>7522	Argument	LR_BLACKBARS
>7523	Identifier	LR_BLACKBARS
>7524	Argument	bar_down
>7525	Identifier	bar_down
>7526	Callee	addRenderObject
>7527	Identifier	addRenderObject
>7528	CompoundStatement	 
>7529	ExpressionStatement	 
>7530	AssignmentExpr	bar_down -> cull = 0
>7531	PrimaryExpression	0
>7532	PtrMemberAccess	bar_down -> cull
>7533	Identifier	cull
>7534	Identifier	bar_down
>7535	ExpressionStatement	 
>7536	AssignmentExpr	bar_down -> followCamera = 1
>7537	PrimaryExpression	1
>7538	PtrMemberAccess	bar_down -> followCamera
>7539	Identifier	followCamera
>7540	Identifier	bar_down
>7541	ExpressionStatement	 
>7542	AssignmentExpr	bar_down -> color = 0
>7543	PrimaryExpression	0
>7544	PtrMemberAccess	bar_down -> color
>7545	Identifier	color
>7546	Identifier	bar_down
>7547	ExpressionStatement	 
>7548	CallExpression	bar_down -> setWidthHeight ( 800 , sz2 * 2 )
>7549	ArgumentList	800
>7550	Argument	sz2 * 2
>7551	MultiplicativeExpression	sz2 * 2
>7552	PrimaryExpression	2
>7553	Identifier	sz2
>7554	Argument	800
>7555	PrimaryExpression	800
>7556	Callee	bar_down -> setWidthHeight
>7557	PtrMemberAccess	bar_down -> setWidthHeight
>7558	Identifier	setWidthHeight
>7559	Identifier	bar_down
>7560	ExpressionStatement	 
>7561	AssignmentExpr	bar_down -> position = Vector ( 400 , 600 + sz2 )
>7562	CallExpression	Vector ( 400 , 600 + sz2 )
>7563	ArgumentList	400
>7564	Argument	600 + sz2
>7565	AdditiveExpression	600 + sz2
>7566	Identifier	sz2
>7567	PrimaryExpression	600
>7568	Argument	400
>7569	PrimaryExpression	400
>7570	Callee	Vector
>7571	Identifier	Vector
>7572	PtrMemberAccess	bar_down -> position
>7573	Identifier	position
>7574	Identifier	bar_down
>7575	ExpressionStatement	 
>7576	Identifier	Quad
>7577	Statement	 
>7578	Statement	 
>7579	Statement	 
>7580	ExpressionStatement	 
>7581	CallExpression	addRenderObject ( bar_up , LR_BLACKBARS )
>7582	ArgumentList	bar_up
>7583	Argument	LR_BLACKBARS
>7584	Identifier	LR_BLACKBARS
>7585	Argument	bar_up
>7586	Identifier	bar_up
>7587	Callee	addRenderObject
>7588	Identifier	addRenderObject
>7589	CompoundStatement	 
>7590	ExpressionStatement	 
>7591	AssignmentExpr	bar_up -> cull = 0
>7592	PrimaryExpression	0
>7593	PtrMemberAccess	bar_up -> cull
>7594	Identifier	cull
>7595	Identifier	bar_up
>7596	ExpressionStatement	 
>7597	AssignmentExpr	bar_up -> followCamera = 1
>7598	PrimaryExpression	1
>7599	PtrMemberAccess	bar_up -> followCamera
>7600	Identifier	followCamera
>7601	Identifier	bar_up
>7602	ExpressionStatement	 
>7603	AssignmentExpr	bar_up -> color = 0
>7604	PrimaryExpression	0
>7605	PtrMemberAccess	bar_up -> color
>7606	Identifier	color
>7607	Identifier	bar_up
>7608	ExpressionStatement	 
>7609	CallExpression	bar_up -> setWidthHeight ( 800 , sz2 * 2 )
>7610	ArgumentList	800
>7611	Argument	sz2 * 2
>7612	MultiplicativeExpression	sz2 * 2
>7613	PrimaryExpression	2
>7614	Identifier	sz2
>7615	Argument	800
>7616	PrimaryExpression	800
>7617	Callee	bar_up -> setWidthHeight
>7618	PtrMemberAccess	bar_up -> setWidthHeight
>7619	Identifier	setWidthHeight
>7620	Identifier	bar_up
>7621	ExpressionStatement	 
>7622	AssignmentExpr	bar_up -> position = Vector ( 400 , - sz2 )
>7623	CallExpression	Vector ( 400 , - sz2 )
>7624	ArgumentList	400
>7625	Argument	- sz2
>7626	UnaryOp	- sz2
>7627	Identifier	sz2
>7628	UnaryOperator	-
>7629	Argument	400
>7630	PrimaryExpression	400
>7631	Callee	Vector
>7632	Identifier	Vector
>7633	PtrMemberAccess	bar_up -> position
>7634	Identifier	position
>7635	Identifier	bar_up
>7636	ExpressionStatement	 
>7637	Identifier	Quad
>7638	Statement	 
>7639	Statement	 
>7640	Statement	 
>7641	IdentifierDeclStatement	 
>7642	IdentifierDecl	sz2 = ( core -> getVirtualHeight ( ) - baseVirtualHeight ) / 2.0f
>7643	AssignmentExpr	sz2 = ( core -> getVirtualHeight ( ) - baseVirtualHeight ) / 2.0f
>7644	MultiplicativeExpression	( core -> getVirtualHeight ( ) - baseVirtualHeight ) / 2.0f
>7645	PrimaryExpression	2.0f
>7646	AdditiveExpression	core -> getVirtualHeight ( ) - baseVirtualHeight
>7647	Identifier	baseVirtualHeight
>7648	CallExpression	core -> getVirtualHeight ( )
>7649	ArgumentList	 
>7650	Callee	core -> getVirtualHeight
>7651	PtrMemberAccess	core -> getVirtualHeight
>7652	Identifier	getVirtualHeight
>7653	Identifier	core
>7654	Identifier	sz2
>7655	Identifier	sz2
>7656	IdentifierDeclType	int
>7657	Condition	 
>7658	RelationalExpression	getVirtualHeight ( ) > 600
>7659	PrimaryExpression	600
>7660	CallExpression	getVirtualHeight ( )
>7661	ArgumentList	 
>7662	Callee	getVirtualHeight
>7663	Identifier	getVirtualHeight
>7664	IfStatement	if ( getVirtualWidth ( ) > 800 )
>7665	CompoundStatement	 
>7666	IfStatement	if ( useOldAlpha )
>7667	ElseStatement	else
>7668	CompoundStatement	 
>7669	ExpressionStatement	 
>7670	AssignmentExpr	barFade_left -> alpha = 0
>7671	PrimaryExpression	0
>7672	PtrMemberAccess	barFade_left -> alpha
>7673	Identifier	alpha
>7674	Identifier	barFade_left
>7675	ExpressionStatement	 
>7676	AssignmentExpr	barFade_right -> alpha = 0
>7677	PrimaryExpression	0
>7678	PtrMemberAccess	barFade_right -> alpha
>7679	Identifier	alpha
>7680	Identifier	barFade_right
>7681	ExpressionStatement	 
>7682	AssignmentExpr	bar_left -> alpha = 0
>7683	PrimaryExpression	0
>7684	PtrMemberAccess	bar_left -> alpha
>7685	Identifier	alpha
>7686	Identifier	bar_left
>7687	ExpressionStatement	 
>7688	AssignmentExpr	bar_right -> alpha = 0
>7689	PrimaryExpression	0
>7690	PtrMemberAccess	bar_right -> alpha
>7691	Identifier	alpha
>7692	Identifier	bar_right
>7693	CompoundStatement	 
>7694	ExpressionStatement	 
>7695	AssignmentExpr	barFade_right -> alpha = abarFade_right
>7696	Identifier	abarFade_right
>7697	PtrMemberAccess	barFade_right -> alpha
>7698	Identifier	alpha
>7699	Identifier	barFade_right
>7700	ExpressionStatement	 
>7701	AssignmentExpr	barFade_left -> alpha = abarFade_left
>7702	Identifier	abarFade_left
>7703	PtrMemberAccess	barFade_left -> alpha
>7704	Identifier	alpha
>7705	Identifier	barFade_left
>7706	ExpressionStatement	 
>7707	AssignmentExpr	bar_right -> alpha = abar_right
>7708	Identifier	abar_right
>7709	PtrMemberAccess	bar_right -> alpha
>7710	Identifier	alpha
>7711	Identifier	bar_right
>7712	ExpressionStatement	 
>7713	AssignmentExpr	bar_left -> alpha = abar_left
>7714	Identifier	abar_left
>7715	PtrMemberAccess	bar_left -> alpha
>7716	Identifier	alpha
>7717	Identifier	bar_left
>7718	Condition	 
>7719	Identifier	useOldAlpha
>7720	ExpressionStatement	 
>7721	CallExpression	addRenderObject ( barFade_right , LR_BLACKBARS )
>7722	ArgumentList	barFade_right
>7723	Argument	LR_BLACKBARS
>7724	Identifier	LR_BLACKBARS
>7725	Argument	barFade_right
>7726	Identifier	barFade_right
>7727	Callee	addRenderObject
>7728	Identifier	addRenderObject
>7729	CompoundStatement	 
>7730	ExpressionStatement	 
>7731	AssignmentExpr	barFade_right -> cull = 0
>7732	PrimaryExpression	0
>7733	PtrMemberAccess	barFade_right -> cull
>7734	Identifier	cull
>7735	Identifier	barFade_right
>7736	ExpressionStatement	 
>7737	AssignmentExpr	barFade_right -> followCamera = 1
>7738	PrimaryExpression	1
>7739	PtrMemberAccess	barFade_right -> followCamera
>7740	Identifier	followCamera
>7741	Identifier	barFade_right
>7742	ExpressionStatement	 
>7743	AssignmentExpr	barFade_right -> color = 0
>7744	PrimaryExpression	0
>7745	PtrMemberAccess	barFade_right -> color
>7746	Identifier	color
>7747	Identifier	barFade_right
>7748	ExpressionStatement	 
>7749	CallExpression	barFade_right -> setWidthHeight ( 34 , 620 )
>7750	ArgumentList	34
>7751	Argument	620
>7752	PrimaryExpression	620
>7753	Argument	34
>7754	PrimaryExpression	34
>7755	Callee	barFade_right -> setWidthHeight
>7756	PtrMemberAccess	barFade_right -> setWidthHeight
>7757	Identifier	setWidthHeight
>7758	Identifier	barFade_right
>7759	ExpressionStatement	 
>7760	AssignmentExpr	barFade_right -> position = Vector ( 800 - 16 , 300 )
>7761	CallExpression	Vector ( 800 - 16 , 300 )
>7762	ArgumentList	800 - 16
>7763	Argument	300
>7764	PrimaryExpression	300
>7765	Argument	800 - 16
>7766	AdditiveExpression	800 - 16
>7767	PrimaryExpression	16
>7768	PrimaryExpression	800
>7769	Callee	Vector
>7770	Identifier	Vector
>7771	PtrMemberAccess	barFade_right -> position
>7772	Identifier	position
>7773	Identifier	barFade_right
>7774	ExpressionStatement	 
>7775	CallExpression	barFade_right -> flipHorizontal ( )
>7776	ArgumentList	 
>7777	Callee	barFade_right -> flipHorizontal
>7778	PtrMemberAccess	barFade_right -> flipHorizontal
>7779	Identifier	flipHorizontal
>7780	Identifier	barFade_right
>7781	ExpressionStatement	 
>7782	CallExpression	barFade_right -> setTexture ( \"gui/edge\" )
>7783	ArgumentList	\"gui/edge\"
>7784	Argument	\"gui/edge\"
>7785	PrimaryExpression	\"gui/edge\"
>7786	Callee	barFade_right -> setTexture
>7787	PtrMemberAccess	barFade_right -> setTexture
>7788	Identifier	setTexture
>7789	Identifier	barFade_right
>7790	ExpressionStatement	 
>7791	Identifier	Quad
>7792	Statement	 
>7793	Statement	 
>7794	Statement	 
>7795	ExpressionStatement	 
>7796	CallExpression	addRenderObject ( barFade_left , LR_BLACKBARS )
>7797	ArgumentList	barFade_left
>7798	Argument	LR_BLACKBARS
>7799	Identifier	LR_BLACKBARS
>7800	Argument	barFade_left
>7801	Identifier	barFade_left
>7802	Callee	addRenderObject
>7803	Identifier	addRenderObject
>7804	CompoundStatement	 
>7805	ExpressionStatement	 
>7806	AssignmentExpr	barFade_left -> cull = 0
>7807	PrimaryExpression	0
>7808	PtrMemberAccess	barFade_left -> cull
>7809	Identifier	cull
>7810	Identifier	barFade_left
>7811	ExpressionStatement	 
>7812	AssignmentExpr	barFade_left -> followCamera = 1
>7813	PrimaryExpression	1
>7814	PtrMemberAccess	barFade_left -> followCamera
>7815	Identifier	followCamera
>7816	Identifier	barFade_left
>7817	ExpressionStatement	 
>7818	AssignmentExpr	barFade_left -> color = 0
>7819	PrimaryExpression	0
>7820	PtrMemberAccess	barFade_left -> color
>7821	Identifier	color
>7822	Identifier	barFade_left
>7823	ExpressionStatement	 
>7824	CallExpression	barFade_left -> setWidthHeight ( 34 , 620 )
>7825	ArgumentList	34
>7826	Argument	620
>7827	PrimaryExpression	620
>7828	Argument	34
>7829	PrimaryExpression	34
>7830	Callee	barFade_left -> setWidthHeight
>7831	PtrMemberAccess	barFade_left -> setWidthHeight
>7832	Identifier	setWidthHeight
>7833	Identifier	barFade_left
>7834	ExpressionStatement	 
>7835	AssignmentExpr	barFade_left -> position = Vector ( 16 , 300 )
>7836	CallExpression	Vector ( 16 , 300 )
>7837	ArgumentList	16
>7838	Argument	300
>7839	PrimaryExpression	300
>7840	Argument	16
>7841	PrimaryExpression	16
>7842	Callee	Vector
>7843	Identifier	Vector
>7844	PtrMemberAccess	barFade_left -> position
>7845	Identifier	position
>7846	Identifier	barFade_left
>7847	ExpressionStatement	 
>7848	CallExpression	barFade_left -> setTexture ( \"gui/edge\" )
>7849	ArgumentList	\"gui/edge\"
>7850	Argument	\"gui/edge\"
>7851	PrimaryExpression	\"gui/edge\"
>7852	Callee	barFade_left -> setTexture
>7853	PtrMemberAccess	barFade_left -> setTexture
>7854	Identifier	setTexture
>7855	Identifier	barFade_left
>7856	ExpressionStatement	 
>7857	Identifier	Quad
>7858	Statement	 
>7859	Statement	 
>7860	Statement	 
>7861	ExpressionStatement	 
>7862	CallExpression	addRenderObject ( bar_right , LR_BLACKBARS )
>7863	ArgumentList	bar_right
>7864	Argument	LR_BLACKBARS
>7865	Identifier	LR_BLACKBARS
>7866	Argument	bar_right
>7867	Identifier	bar_right
>7868	Callee	addRenderObject
>7869	Identifier	addRenderObject
>7870	CompoundStatement	 
>7871	ExpressionStatement	 
>7872	AssignmentExpr	bar_right -> cull = 0
>7873	PrimaryExpression	0
>7874	PtrMemberAccess	bar_right -> cull
>7875	Identifier	cull
>7876	Identifier	bar_right
>7877	ExpressionStatement	 
>7878	AssignmentExpr	bar_right -> followCamera = 1
>7879	PrimaryExpression	1
>7880	PtrMemberAccess	bar_right -> followCamera
>7881	Identifier	followCamera
>7882	Identifier	bar_right
>7883	ExpressionStatement	 
>7884	AssignmentExpr	bar_right -> color = 0
>7885	PrimaryExpression	0
>7886	PtrMemberAccess	bar_right -> color
>7887	Identifier	color
>7888	Identifier	bar_right
>7889	ExpressionStatement	 
>7890	CallExpression	bar_right -> setWidthHeight ( sz2 * 2 , 600 )
>7891	ArgumentList	sz2 * 2
>7892	Argument	600
>7893	PrimaryExpression	600
>7894	Argument	sz2 * 2
>7895	MultiplicativeExpression	sz2 * 2
>7896	PrimaryExpression	2
>7897	Identifier	sz2
>7898	Callee	bar_right -> setWidthHeight
>7899	PtrMemberAccess	bar_right -> setWidthHeight
>7900	Identifier	setWidthHeight
>7901	Identifier	bar_right
>7902	ExpressionStatement	 
>7903	AssignmentExpr	bar_right -> position = Vector ( 800 + sz2 , 300 )
>7904	CallExpression	Vector ( 800 + sz2 , 300 )
>7905	ArgumentList	800 + sz2
>7906	Argument	300
>7907	PrimaryExpression	300
>7908	Argument	800 + sz2
>7909	AdditiveExpression	800 + sz2
>7910	Identifier	sz2
>7911	PrimaryExpression	800
>7912	Callee	Vector
>7913	Identifier	Vector
>7914	PtrMemberAccess	bar_right -> position
>7915	Identifier	position
>7916	Identifier	bar_right
>7917	ExpressionStatement	 
>7918	Identifier	Quad
>7919	Statement	 
>7920	Statement	 
>7921	Statement	 
>7922	ExpressionStatement	 
>7923	CallExpression	addRenderObject ( bar_left , LR_BLACKBARS )
>7924	ArgumentList	bar_left
>7925	Argument	LR_BLACKBARS
>7926	Identifier	LR_BLACKBARS
>7927	Argument	bar_left
>7928	Identifier	bar_left
>7929	Callee	addRenderObject
>7930	Identifier	addRenderObject
>7931	CompoundStatement	 
>7932	ExpressionStatement	 
>7933	AssignmentExpr	bar_left -> cull = 0
>7934	PrimaryExpression	0
>7935	PtrMemberAccess	bar_left -> cull
>7936	Identifier	cull
>7937	Identifier	bar_left
>7938	ExpressionStatement	 
>7939	AssignmentExpr	bar_left -> followCamera = 1
>7940	PrimaryExpression	1
>7941	PtrMemberAccess	bar_left -> followCamera
>7942	Identifier	followCamera
>7943	Identifier	bar_left
>7944	ExpressionStatement	 
>7945	AssignmentExpr	bar_left -> color = 0
>7946	PrimaryExpression	0
>7947	PtrMemberAccess	bar_left -> color
>7948	Identifier	color
>7949	Identifier	bar_left
>7950	ExpressionStatement	 
>7951	CallExpression	bar_left -> setWidthHeight ( sz2 * 2 , 600 )
>7952	ArgumentList	sz2 * 2
>7953	Argument	600
>7954	PrimaryExpression	600
>7955	Argument	sz2 * 2
>7956	MultiplicativeExpression	sz2 * 2
>7957	PrimaryExpression	2
>7958	Identifier	sz2
>7959	Callee	bar_left -> setWidthHeight
>7960	PtrMemberAccess	bar_left -> setWidthHeight
>7961	Identifier	setWidthHeight
>7962	Identifier	bar_left
>7963	ExpressionStatement	 
>7964	AssignmentExpr	bar_left -> position = Vector ( - sz2 , 300 )
>7965	CallExpression	Vector ( - sz2 , 300 )
>7966	ArgumentList	- sz2
>7967	Argument	300
>7968	PrimaryExpression	300
>7969	Argument	- sz2
>7970	UnaryOp	- sz2
>7971	Identifier	sz2
>7972	UnaryOperator	-
>7973	Callee	Vector
>7974	Identifier	Vector
>7975	PtrMemberAccess	bar_left -> position
>7976	Identifier	position
>7977	Identifier	bar_left
>7978	ExpressionStatement	 
>7979	Identifier	Quad
>7980	Statement	 
>7981	Statement	 
>7982	Statement	 
>7983	IdentifierDeclStatement	 
>7984	IdentifierDecl	sz2 = ( core -> getVirtualWidth ( ) - baseVirtualWidth ) / 2.0f
>7985	AssignmentExpr	sz2 = ( core -> getVirtualWidth ( ) - baseVirtualWidth ) / 2.0f
>7986	MultiplicativeExpression	( core -> getVirtualWidth ( ) - baseVirtualWidth ) / 2.0f
>7987	PrimaryExpression	2.0f
>7988	AdditiveExpression	core -> getVirtualWidth ( ) - baseVirtualWidth
>7989	Identifier	baseVirtualWidth
>7990	CallExpression	core -> getVirtualWidth ( )
>7991	ArgumentList	 
>7992	Callee	core -> getVirtualWidth
>7993	PtrMemberAccess	core -> getVirtualWidth
>7994	Identifier	getVirtualWidth
>7995	Identifier	core
>7996	Identifier	sz2
>7997	Identifier	sz2
>7998	IdentifierDeclType	int
>7999	Condition	 
>8000	RelationalExpression	getVirtualWidth ( ) > 800
>8001	PrimaryExpression	800
>8002	CallExpression	getVirtualWidth ( )
>8003	ArgumentList	 
>8004	Callee	getVirtualWidth
>8005	Identifier	getVirtualWidth
>8006	ExpressionStatement	 
>8007	AssignmentExpr	bar_left = bar_right = bar_up = bar_down = barFade_left = barFade_right = 0
>8008	AssignmentExpr	bar_right = bar_up = bar_down = barFade_left = barFade_right = 0
>8009	AssignmentExpr	bar_up = bar_down = barFade_left = barFade_right = 0
>8010	AssignmentExpr	bar_down = barFade_left = barFade_right = 0
>8011	AssignmentExpr	barFade_left = barFade_right = 0
>8012	AssignmentExpr	barFade_right = 0
>8013	PrimaryExpression	0
>8014	Identifier	barFade_right
>8015	Identifier	barFade_left
>8016	Identifier	bar_down
>8017	Identifier	bar_up
>8018	Identifier	bar_right
>8019	Identifier	bar_left
>8020	IfStatement	if ( bar_down )
>8021	ExpressionStatement	 
>8022	CallExpression	removeRenderObject ( bar_down )
>8023	ArgumentList	bar_down
>8024	Argument	bar_down
>8025	Identifier	bar_down
>8026	Callee	removeRenderObject
>8027	Identifier	removeRenderObject
>8028	Condition	 
>8029	Identifier	bar_down
>8030	IfStatement	if ( bar_up )
>8031	ExpressionStatement	 
>8032	CallExpression	removeRenderObject ( bar_up )
>8033	ArgumentList	bar_up
>8034	Argument	bar_up
>8035	Identifier	bar_up
>8036	Callee	removeRenderObject
>8037	Identifier	removeRenderObject
>8038	Condition	 
>8039	Identifier	bar_up
>8040	IfStatement	if ( barFade_right )
>8041	CompoundStatement	 
>8042	ExpressionStatement	 
>8043	CallExpression	removeRenderObject ( barFade_right )
>8044	ArgumentList	barFade_right
>8045	Argument	barFade_right
>8046	Identifier	barFade_right
>8047	Callee	removeRenderObject
>8048	Identifier	removeRenderObject
>8049	ExpressionStatement	 
>8050	AssignmentExpr	abarFade_right = barFade_right -> alpha
>8051	PtrMemberAccess	barFade_right -> alpha
>8052	Identifier	alpha
>8053	Identifier	barFade_right
>8054	Identifier	abarFade_right
>8055	Condition	 
>8056	Identifier	barFade_right
>8057	IfStatement	if ( barFade_left )
>8058	CompoundStatement	 
>8059	ExpressionStatement	 
>8060	CallExpression	removeRenderObject ( barFade_left )
>8061	ArgumentList	barFade_left
>8062	Argument	barFade_left
>8063	Identifier	barFade_left
>8064	Callee	removeRenderObject
>8065	Identifier	removeRenderObject
>8066	ExpressionStatement	 
>8067	AssignmentExpr	abarFade_left = barFade_left -> alpha
>8068	PtrMemberAccess	barFade_left -> alpha
>8069	Identifier	alpha
>8070	Identifier	barFade_left
>8071	Identifier	abarFade_left
>8072	Condition	 
>8073	Identifier	barFade_left
>8074	IfStatement	if ( bar_right )
>8075	CompoundStatement	 
>8076	ExpressionStatement	 
>8077	CallExpression	removeRenderObject ( bar_right )
>8078	ArgumentList	bar_right
>8079	Argument	bar_right
>8080	Identifier	bar_right
>8081	Callee	removeRenderObject
>8082	Identifier	removeRenderObject
>8083	ExpressionStatement	 
>8084	AssignmentExpr	abar_right = bar_right -> alpha
>8085	PtrMemberAccess	bar_right -> alpha
>8086	Identifier	alpha
>8087	Identifier	bar_right
>8088	Identifier	abar_right
>8089	Condition	 
>8090	Identifier	bar_right
>8091	IfStatement	if ( bar_left )
>8092	CompoundStatement	 
>8093	ExpressionStatement	 
>8094	CallExpression	removeRenderObject ( bar_left )
>8095	ArgumentList	bar_left
>8096	Argument	bar_left
>8097	Identifier	bar_left
>8098	Callee	removeRenderObject
>8099	Identifier	removeRenderObject
>8100	ExpressionStatement	 
>8101	AssignmentExpr	abar_left = bar_left -> alpha
>8102	PtrMemberAccess	bar_left -> alpha
>8103	Identifier	alpha
>8104	Identifier	bar_left
>8105	Identifier	abar_left
>8106	ExpressionStatement	 
>8107	AssignmentExpr	useOldAlpha = true
>8108	Identifier	true
>8109	Identifier	useOldAlpha
>8110	Condition	 
>8111	Identifier	bar_left
>8112	IdentifierDeclStatement	 
>8113	IdentifierDecl	abarFade_right
>8114	Identifier	abarFade_right
>8115	IdentifierDeclType	InterpolatedVector
>8116	IdentifierDecl	abarFade_left
>8117	Identifier	abarFade_left
>8118	IdentifierDeclType	InterpolatedVector
>8119	IdentifierDecl	abar_right
>8120	Identifier	abar_right
>8121	IdentifierDeclType	InterpolatedVector
>8122	IdentifierDecl	abar_left
>8123	Identifier	abar_left
>8124	IdentifierDeclType	InterpolatedVector
>8125	IdentifierDeclStatement	 
>8126	IdentifierDecl	useOldAlpha = false
>8127	AssignmentExpr	useOldAlpha = false
>8128	Identifier	false
>8129	Identifier	false
>8130	Identifier	useOldAlpha
>8131	IdentifierDeclType	bool
>8193	FunctionDef	DSQ 
>8194	ParameterList	Vector color
>8195	Parameter	 
>8196	Identifier	color
>8197	ParameterType	Vector
>8198	ReturnType	void
>8199	CompoundStatement	 
>8200	IfStatement	if ( bar_left && bar_right )
>8201	CompoundStatement	 
>8202	ExpressionStatement	 
>8203	AssignmentExpr	bar_left -> color = bar_right -> color = barFade_left -> color = barFade_right -> color = color
>8204	AssignmentExpr	bar_right -> color = barFade_left -> color = barFade_right -> color = color
>8205	AssignmentExpr	barFade_left -> color = barFade_right -> color = color
>8206	AssignmentExpr	barFade_right -> color = color
>8207	Identifier	color
>8208	PtrMemberAccess	barFade_right -> color
>8209	Identifier	color
>8210	Identifier	barFade_right
>8211	PtrMemberAccess	barFade_left -> color
>8212	Identifier	color
>8213	Identifier	barFade_left
>8214	PtrMemberAccess	bar_right -> color
>8215	Identifier	color
>8216	Identifier	bar_right
>8217	PtrMemberAccess	bar_left -> color
>8218	Identifier	color
>8219	Identifier	bar_left
>8220	Condition	 
>8221	AndExpression	bar_left && bar_right
>8222	Identifier	bar_right
>8223	Identifier	bar_left
>8240	FunctionDef	DSQ 
>8241	ParameterList	bool on , float t
>8242	Parameter	 
>8243	Identifier	t
>8244	ParameterType	float
>8245	Parameter	 
>8246	Identifier	on
>8247	ParameterType	bool
>8248	ReturnType	void
>8249	CompoundStatement	 
>8250	IfStatement	if ( bar_left && bar_right )
>8251	CompoundStatement	 
>8252	IfStatement	if ( on )
>8253	ElseStatement	else
>8254	CompoundStatement	 
>8255	IfStatement	if ( t != 0 )
>8256	ElseStatement	else
>8257	CompoundStatement	 
>8258	ExpressionStatement	 
>8259	AssignmentExpr	barFade_right -> alpha = barFade_left -> alpha = 0
>8260	AssignmentExpr	barFade_left -> alpha = 0
>8261	PrimaryExpression	0
>8262	PtrMemberAccess	barFade_left -> alpha
>8263	Identifier	alpha
>8264	Identifier	barFade_left
>8265	PtrMemberAccess	barFade_right -> alpha
>8266	Identifier	alpha
>8267	Identifier	barFade_right
>8268	ExpressionStatement	 
>8269	AssignmentExpr	bar_left -> alpha = bar_right -> alpha = 0
>8270	AssignmentExpr	bar_right -> alpha = 0
>8271	PrimaryExpression	0
>8272	PtrMemberAccess	bar_right -> alpha
>8273	Identifier	alpha
>8274	Identifier	bar_right
>8275	PtrMemberAccess	bar_left -> alpha
>8276	Identifier	alpha
>8277	Identifier	bar_left
>8278	CompoundStatement	 
>8279	ExpressionStatement	 
>8280	CallExpression	barFade_right -> alpha . interpolateTo ( 0 , t )
>8281	ArgumentList	0
>8282	Argument	t
>8283	Identifier	t
>8284	Argument	0
>8285	PrimaryExpression	0
>8286	Callee	barFade_right -> alpha . interpolateTo
>8287	MemberAccess	barFade_right -> alpha . interpolateTo
>8288	Identifier	interpolateTo
>8289	PtrMemberAccess	barFade_right -> alpha
>8290	Identifier	alpha
>8291	Identifier	barFade_right
>8292	ExpressionStatement	 
>8293	CallExpression	barFade_left -> alpha . interpolateTo ( 0 , t )
>8294	ArgumentList	0
>8295	Argument	t
>8296	Identifier	t
>8297	Argument	0
>8298	PrimaryExpression	0
>8299	Callee	barFade_left -> alpha . interpolateTo
>8300	MemberAccess	barFade_left -> alpha . interpolateTo
>8301	Identifier	interpolateTo
>8302	PtrMemberAccess	barFade_left -> alpha
>8303	Identifier	alpha
>8304	Identifier	barFade_left
>8305	ExpressionStatement	 
>8306	CallExpression	bar_right -> alpha . interpolateTo ( 0 , t )
>8307	ArgumentList	0
>8308	Argument	t
>8309	Identifier	t
>8310	Argument	0
>8311	PrimaryExpression	0
>8312	Callee	bar_right -> alpha . interpolateTo
>8313	MemberAccess	bar_right -> alpha . interpolateTo
>8314	Identifier	interpolateTo
>8315	PtrMemberAccess	bar_right -> alpha
>8316	Identifier	alpha
>8317	Identifier	bar_right
>8318	ExpressionStatement	 
>8319	CallExpression	bar_left -> alpha . interpolateTo ( 0 , t )
>8320	ArgumentList	0
>8321	Argument	t
>8322	Identifier	t
>8323	Argument	0
>8324	PrimaryExpression	0
>8325	Callee	bar_left -> alpha . interpolateTo
>8326	MemberAccess	bar_left -> alpha . interpolateTo
>8327	Identifier	interpolateTo
>8328	PtrMemberAccess	bar_left -> alpha
>8329	Identifier	alpha
>8330	Identifier	bar_left
>8331	Condition	 
>8332	EqualityExpression	t != 0
>8333	PrimaryExpression	0
>8334	Identifier	t
>8335	CompoundStatement	 
>8336	ExpressionStatement	 
>8337	AssignmentExpr	barFade_right -> alpha = barFade_left -> alpha = 1
>8338	AssignmentExpr	barFade_left -> alpha = 1
>8339	PrimaryExpression	1
>8340	PtrMemberAccess	barFade_left -> alpha
>8341	Identifier	alpha
>8342	Identifier	barFade_left
>8343	PtrMemberAccess	barFade_right -> alpha
>8344	Identifier	alpha
>8345	Identifier	barFade_right
>8346	ExpressionStatement	 
>8347	AssignmentExpr	bar_left -> alpha = bar_right -> alpha = 1
>8348	AssignmentExpr	bar_right -> alpha = 1
>8349	PrimaryExpression	1
>8350	PtrMemberAccess	bar_right -> alpha
>8351	Identifier	alpha
>8352	Identifier	bar_right
>8353	PtrMemberAccess	bar_left -> alpha
>8354	Identifier	alpha
>8355	Identifier	bar_left
>8356	Condition	 
>8357	Identifier	on
>8358	Condition	 
>8359	AndExpression	bar_left && bar_right
>8360	Identifier	bar_right
>8361	Identifier	bar_left
>8379	FunctionDef	DSQ 
>8380	ParameterList	bool on
>8381	Parameter	 
>8382	Identifier	on
>8383	ParameterType	bool
>8384	ReturnType	void
>8385	CompoundStatement	 
>8390	FunctionDef	DSQ 
>8391	ParameterList	 
>8392	ReturnType	void
>8393	CompoundStatement	 
>8394	IfStatement	if ( core -> getCtrlState ( ) && core -> getAltState ( ) )
>8395	ExpressionStatement	 
>8396	CallExpression	Core 
>8397	ArgumentList	 
>8398	Callee	Core 
>8399	Identifier	Core 
>8400	Condition	 
>8401	AndExpression	core -> getCtrlState ( ) && core -> getAltState ( )
>8402	CallExpression	core -> getAltState ( )
>8403	ArgumentList	 
>8404	Callee	core -> getAltState
>8405	PtrMemberAccess	core -> getAltState
>8406	Identifier	getAltState
>8407	Identifier	core
>8408	CallExpression	core -> getCtrlState ( )
>8409	ArgumentList	 
>8410	Callee	core -> getCtrlState
>8411	PtrMemberAccess	core -> getCtrlState
>8412	Identifier	getCtrlState
>8413	Identifier	core
>8421	FunctionDef	DSQ 
>8422	ParameterList	int lcode
>8423	Parameter	 
>8424	Identifier	lcode
>8425	ParameterType	int
>8426	ReturnType	int
>8427	CompoundStatement	 
>8428	ReturnStatement	 
>8429	PrimaryExpression	0
>8430	ExpressionStatement	 
>8431	CallExpression	debugLog ( os . str ( ) )
>8432	ArgumentList	os . str ( )
>8433	Argument	os . str ( )
>8434	CallExpression	os . str ( )
>8435	ArgumentList	 
>8436	Callee	os . str
>8437	MemberAccess	os . str
>8438	Identifier	str
>8439	Identifier	os
>8440	Callee	debugLog
>8441	Identifier	debugLog
>8442	ExpressionStatement	 
>8443	ShiftExpression	os << \"Invalid entity layer code
>8444	ShiftExpression	\"Invalid entity layer code
>8445	Identifier	lcode
>8446	PrimaryExpression	\"Invalid entity layer code
>8447	Identifier	os
>8448	IdentifierDeclStatement	 
>8449	IdentifierDecl	os
>8450	Identifier	os
>8451	IdentifierDeclType	std 
>8452	IfStatement	if ( lcode == - 4 )
>8453	ElseStatement	else
>8454	IfStatement	if ( lcode == - 3 )
>8455	ElseStatement	else
>8456	IfStatement	if ( lcode == - 2 )
>8457	ElseStatement	else
>8458	IfStatement	if ( lcode == - 1 )
>8459	ElseStatement	else
>8460	IfStatement	if ( lcode == - 100 )
>8461	ElseStatement	else
>8462	IfStatement	if ( lcode == 0 )
>8463	ElseStatement	else
>8464	IfStatement	if ( lcode == 1 )
>8465	ElseStatement	else
>8466	IfStatement	if ( lcode == 2 )
>8467	ReturnStatement	 
>8468	Identifier	LR_DARK_LAYER
>8469	Condition	 
>8470	EqualityExpression	lcode == 2
>8471	PrimaryExpression	2
>8472	Identifier	lcode
>8473	ReturnStatement	 
>8474	Identifier	LR_ENTITIES2
>8475	Condition	 
>8476	EqualityExpression	lcode == 1
>8477	PrimaryExpression	1
>8478	Identifier	lcode
>8479	ReturnStatement	 
>8480	Identifier	LR_ENTITIES
>8481	Condition	 
>8482	EqualityExpression	lcode == 0
>8483	PrimaryExpression	0
>8484	Identifier	lcode
>8485	ReturnStatement	 
>8486	Identifier	LR_ENTITIES00
>8487	Condition	 
>8488	EqualityExpression	lcode == - 100
>8489	UnaryOp	- 100
>8490	PrimaryExpression	100
>8491	UnaryOperator	-
>8492	Identifier	lcode
>8493	ReturnStatement	 
>8494	Identifier	LR_ENTITIES0
>8495	Condition	 
>8496	EqualityExpression	lcode == - 1
>8497	UnaryOp	- 1
>8498	PrimaryExpression	1
>8499	UnaryOperator	-
>8500	Identifier	lcode
>8501	ReturnStatement	 
>8502	Identifier	LR_ENTITIES_MINUS2
>8503	Condition	 
>8504	EqualityExpression	lcode == - 2
>8505	UnaryOp	- 2
>8506	PrimaryExpression	2
>8507	UnaryOperator	-
>8508	Identifier	lcode
>8509	ReturnStatement	 
>8510	Identifier	LR_ENTITIES_MINUS3
>8511	Condition	 
>8512	EqualityExpression	lcode == - 3
>8513	UnaryOp	- 3
>8514	PrimaryExpression	3
>8515	UnaryOperator	-
>8516	Identifier	lcode
>8517	ReturnStatement	 
>8518	Identifier	LR_ENTITIES_MINUS4
>8519	Condition	 
>8520	EqualityExpression	lcode == - 4
>8521	UnaryOp	- 4
>8522	PrimaryExpression	4
>8523	UnaryOperator	-
>8524	Identifier	lcode
>8539	FunctionDef	DSQ 
>8540	ParameterList	int ds
>8541	Parameter	 
>8542	Identifier	ds
>8543	ParameterType	int
>8544	ReturnType	void
>8545	CompoundStatement	 
>8546	IfStatement	if ( dsq_filter == 0 )
>8547	ElseStatement	else
>8548	IfStatement	if ( dsq_filter == 2 )
>8549	CompoundStatement	 
>8550	ExpressionStatement	 
>8551	AssignmentExpr	Texture 
>8552	Identifier	GL_NEAREST
>8553	Identifier	Texture 
>8554	Condition	 
>8555	EqualityExpression	dsq_filter == 2
>8556	PrimaryExpression	2
>8557	Identifier	dsq_filter
>8558	CompoundStatement	 
>8559	ExpressionStatement	 
>8560	AssignmentExpr	Texture 
>8561	Identifier	GL_LINEAR
>8562	Identifier	Texture 
>8563	Condition	 
>8564	EqualityExpression	dsq_filter == 0
>8565	PrimaryExpression	0
>8566	Identifier	dsq_filter
>8567	ExpressionStatement	 
>8568	AssignmentExpr	dsq_filter = ds
>8569	Identifier	ds
>8570	Identifier	dsq_filter
>8579	FunctionDef	DSQ 
>8580	ParameterList	 
>8581	ReturnType	void
>8582	CompoundStatement	 
>8583	ExpressionStatement	 
>8584	CallExpression	dsq -> continuity . setFlag ( flag , value )
>8585	ArgumentList	flag
>8586	Argument	value
>8587	Identifier	value
>8588	Argument	flag
>8589	Identifier	flag
>8590	Callee	dsq -> continuity . setFlag
>8591	MemberAccess	dsq -> continuity . setFlag
>8592	Identifier	setFlag
>8593	PtrMemberAccess	dsq -> continuity
>8594	Identifier	continuity
>8595	Identifier	dsq
>8596	ExpressionStatement	 
>8597	ShiftExpression	is2 >> value
>8598	Identifier	value
>8599	Identifier	is2
>8600	IdentifierDeclStatement	 
>8601	IdentifierDecl	is2 ( flagString )
>8602	Identifier	flagString
>8603	Identifier	is2
>8604	IdentifierDeclType	std 
>8605	IdentifierDeclStatement	 
>8606	IdentifierDecl	value = 0
>8607	AssignmentExpr	value = 0
>8608	PrimaryExpression	0
>8609	Identifier	value
>8610	Identifier	value
>8611	IdentifierDeclType	int
>8612	ExpressionStatement	 
>8613	AssignmentExpr	flagString = getUserInputString ( dsq -> continuity . stringBank . get ( 2015 ) , os . str ( ) )
>8614	CallExpression	getUserInputString ( dsq -> continuity . stringBank . get ( 2015 ) , os . str ( ) )
>8615	ArgumentList	dsq -> continuity . stringBank . get ( 2015 )
>8616	Argument	os . str ( )
>8617	CallExpression	os . str ( )
>8618	ArgumentList	 
>8619	Callee	os . str
>8620	MemberAccess	os . str
>8621	Identifier	str
>8622	Identifier	os
>8623	Argument	dsq -> continuity . stringBank . get ( 2015 )
>8624	CallExpression	dsq -> continuity . stringBank . get ( 2015 )
>8625	ArgumentList	2015
>8626	Argument	2015
>8627	PrimaryExpression	2015
>8628	Callee	dsq -> continuity . stringBank . get
>8629	MemberAccess	dsq -> continuity . stringBank . get
>8630	Identifier	get
>8631	MemberAccess	dsq -> continuity . stringBank
>8632	Identifier	stringBank
>8633	PtrMemberAccess	dsq -> continuity
>8634	Identifier	continuity
>8635	Identifier	dsq
>8636	Callee	getUserInputString
>8637	Identifier	getUserInputString
>8638	Identifier	flagString
>8639	ExpressionStatement	 
>8640	ShiftExpression	os << dsq -> continuity . getFlag ( flag )
>8641	CallExpression	dsq -> continuity . getFlag ( flag )
>8642	ArgumentList	flag
>8643	Argument	flag
>8644	Identifier	flag
>8645	Callee	dsq -> continuity . getFlag
>8646	MemberAccess	dsq -> continuity . getFlag
>8647	Identifier	getFlag
>8648	PtrMemberAccess	dsq -> continuity
>8649	Identifier	continuity
>8650	Identifier	dsq
>8651	Identifier	os
>8652	IdentifierDeclStatement	 
>8653	IdentifierDecl	os
>8654	Identifier	os
>8655	IdentifierDeclType	std 
>8656	ExpressionStatement	 
>8657	CallExpression	core -> main ( 0.2 )
>8658	ArgumentList	0.2
>8659	Argument	0.2
>8660	PrimaryExpression	0.2
>8661	Callee	core -> main
>8662	PtrMemberAccess	core -> main
>8663	Identifier	main
>8664	Identifier	core
>8665	ExpressionStatement	 
>8666	ShiftExpression	is >> flag
>8667	Identifier	flag
>8668	Identifier	is
>8669	IdentifierDeclStatement	 
>8670	IdentifierDecl	is ( flagString )
>8671	Identifier	flagString
>8672	Identifier	is
>8673	IdentifierDeclType	std 
>8674	IdentifierDeclStatement	 
>8675	IdentifierDecl	flag = 0
>8676	AssignmentExpr	flag = 0
>8677	PrimaryExpression	0
>8678	Identifier	flag
>8679	Identifier	flag
>8680	IdentifierDeclType	int
>8681	IdentifierDeclStatement	 
>8682	IdentifierDecl	flagString = getUserInputString ( dsq -> continuity . stringBank . get ( 2014 ) , \"0\" )
>8683	AssignmentExpr	flagString = getUserInputString ( dsq -> continuity . stringBank . get ( 2014 ) , \"0\" )
>8684	CallExpression	getUserInputString ( dsq -> continuity . stringBank . get ( 2014 ) , \"0\" )
>8685	ArgumentList	dsq -> continuity . stringBank . get ( 2014 )
>8686	Argument	\"0\"
>8687	PrimaryExpression	\"0\"
>8688	Argument	dsq -> continuity . stringBank . get ( 2014 )
>8689	CallExpression	dsq -> continuity . stringBank . get ( 2014 )
>8690	ArgumentList	2014
>8691	Argument	2014
>8692	PrimaryExpression	2014
>8693	Callee	dsq -> continuity . stringBank . get
>8694	MemberAccess	dsq -> continuity . stringBank . get
>8695	Identifier	get
>8696	MemberAccess	dsq -> continuity . stringBank
>8697	Identifier	stringBank
>8698	PtrMemberAccess	dsq -> continuity
>8699	Identifier	continuity
>8700	Identifier	dsq
>8701	Callee	getUserInputString
>8702	Identifier	getUserInputString
>8703	Identifier	flagString
>8704	Identifier	flagString
>8705	IdentifierDeclType	std 
>8723	FunctionDef	DSQ 
>8724	ParameterList	int note , float mag
>8725	Parameter	 
>8726	Identifier	mag
>8727	ParameterType	float
>8728	Parameter	 
>8729	Identifier	note
>8730	ParameterType	int
>8731	ReturnType	Vector
>8732	CompoundStatement	 
>8733	ReturnStatement	 
>8734	MultiplicativeExpression	vec * mag
>8735	Identifier	mag
>8736	Identifier	vec
>8737	SwitchStatement	switch ( note )
>8738	CompoundStatement	 
>8739	BreakStatement	 
>8740	ExpressionStatement	 
>8741	AssignmentExpr	vec = Vector ( - 0.5 , 0.5 )
>8742	CallExpression	Vector ( - 0.5 , 0.5 )
>8743	ArgumentList	- 0.5
>8744	Argument	0.5
>8745	PrimaryExpression	0.5
>8746	Argument	- 0.5
>8747	UnaryOp	- 0.5
>8748	PrimaryExpression	0.5
>8749	UnaryOperator	-
>8750	Callee	Vector
>8751	Identifier	Vector
>8752	Identifier	vec
>8753	Label	 
>8754	BreakStatement	 
>8755	ExpressionStatement	 
>8756	AssignmentExpr	vec = Vector ( - 1 , 0 )
>8757	CallExpression	Vector ( - 1 , 0 )
>8758	ArgumentList	- 1
>8759	Argument	0
>8760	PrimaryExpression	0
>8761	Argument	- 1
>8762	UnaryOp	- 1
>8763	PrimaryExpression	1
>8764	UnaryOperator	-
>8765	Callee	Vector
>8766	Identifier	Vector
>8767	Identifier	vec
>8768	Label	 
>8769	BreakStatement	 
>8770	ExpressionStatement	 
>8771	AssignmentExpr	vec = Vector ( - 0.5 , - 0.5 )
>8772	CallExpression	Vector ( - 0.5 , - 0.5 )
>8773	ArgumentList	- 0.5
>8774	Argument	- 0.5
>8775	UnaryOp	- 0.5
>8776	PrimaryExpression	0.5
>8777	UnaryOperator	-
>8778	Argument	- 0.5
>8779	UnaryOp	- 0.5
>8780	PrimaryExpression	0.5
>8781	UnaryOperator	-
>8782	Callee	Vector
>8783	Identifier	Vector
>8784	Identifier	vec
>8785	Label	 
>8786	BreakStatement	 
>8787	ExpressionStatement	 
>8788	AssignmentExpr	vec = Vector ( 0 , - 1 )
>8789	CallExpression	Vector ( 0 , - 1 )
>8790	ArgumentList	0
>8791	Argument	- 1
>8792	UnaryOp	- 1
>8793	PrimaryExpression	1
>8794	UnaryOperator	-
>8795	Argument	0
>8796	PrimaryExpression	0
>8797	Callee	Vector
>8798	Identifier	Vector
>8799	Identifier	vec
>8800	Label	 
>8801	BreakStatement	 
>8802	ExpressionStatement	 
>8803	AssignmentExpr	vec = Vector ( 0.5 , - 0.5 )
>8804	CallExpression	Vector ( 0.5 , - 0.5 )
>8805	ArgumentList	0.5
>8806	Argument	- 0.5
>8807	UnaryOp	- 0.5
>8808	PrimaryExpression	0.5
>8809	UnaryOperator	-
>8810	Argument	0.5
>8811	PrimaryExpression	0.5
>8812	Callee	Vector
>8813	Identifier	Vector
>8814	Identifier	vec
>8815	Label	 
>8816	BreakStatement	 
>8817	ExpressionStatement	 
>8818	AssignmentExpr	vec = Vector ( 1 , 0 )
>8819	CallExpression	Vector ( 1 , 0 )
>8820	ArgumentList	1
>8821	Argument	0
>8822	PrimaryExpression	0
>8823	Argument	1
>8824	PrimaryExpression	1
>8825	Callee	Vector
>8826	Identifier	Vector
>8827	Identifier	vec
>8828	Label	 
>8829	BreakStatement	 
>8830	ExpressionStatement	 
>8831	AssignmentExpr	vec = Vector ( 0.5 , 0.5 )
>8832	CallExpression	Vector ( 0.5 , 0.5 )
>8833	ArgumentList	0.5
>8834	Argument	0.5
>8835	PrimaryExpression	0.5
>8836	Argument	0.5
>8837	PrimaryExpression	0.5
>8838	Callee	Vector
>8839	Identifier	Vector
>8840	Identifier	vec
>8841	Label	 
>8842	BreakStatement	 
>8843	ExpressionStatement	 
>8844	AssignmentExpr	vec = Vector ( 0 , 1 )
>8845	CallExpression	Vector ( 0 , 1 )
>8846	ArgumentList	0
>8847	Argument	1
>8848	PrimaryExpression	1
>8849	Argument	0
>8850	PrimaryExpression	0
>8851	Callee	Vector
>8852	Identifier	Vector
>8853	Identifier	vec
>8854	Label	 
>8855	Condition	 
>8856	Identifier	note
>8857	IdentifierDeclStatement	 
>8858	IdentifierDecl	vec
>8859	Identifier	vec
>8860	IdentifierDeclType	Vector
>8868	FunctionDef	DSQ 
>8869	ParameterList	 
>8870	ReturnType	int
>8871	CompoundStatement	 
>8872	ReturnStatement	 
>8873	Identifier	r
>8874	ExpressionStatement	 
>8875	AssignmentExpr	lastRand = r
>8876	Identifier	r
>8877	Identifier	lastRand
>8878	WhileStatement	while ( r == lastRand )
>8879	CompoundStatement	 
>8880	IfStatement	if ( c > 8 )
>8881	BreakStatement	 
>8882	Condition	 
>8883	RelationalExpression	c > 8
>8884	PrimaryExpression	8
>8885	Identifier	c
>8886	ExpressionStatement	 
>8887	IncDecOp	c ++
>8888	IncDec	++
>8889	Identifier	c
>8890	ExpressionStatement	 
>8891	AssignmentExpr	r = rand ( ) % 8
>8892	MultiplicativeExpression	rand ( ) % 8
>8893	PrimaryExpression	8
>8894	CallExpression	rand ( )
>8895	ArgumentList	 
>8896	Callee	rand
>8897	Identifier	rand
>8898	Identifier	r
>8899	Condition	 
>8900	EqualityExpression	r == lastRand
>8901	Identifier	lastRand
>8902	Identifier	r
>8903	IdentifierDeclStatement	 
>8904	IdentifierDecl	c = 0
>8905	AssignmentExpr	c = 0
>8906	PrimaryExpression	0
>8907	Identifier	c
>8908	Identifier	c
>8909	IdentifierDeclType	int
>8910	IdentifierDeclStatement	 
>8911	IdentifierDecl	r = rand ( ) % 8
>8912	AssignmentExpr	r = rand ( ) % 8
>8913	MultiplicativeExpression	rand ( ) % 8
>8914	PrimaryExpression	8
>8915	CallExpression	rand ( )
>8916	ArgumentList	 
>8917	Callee	rand
>8918	Identifier	rand
>8919	Identifier	r
>8920	Identifier	r
>8921	IdentifierDeclType	int
>8922	IdentifierDeclStatement	 
>8923	IdentifierDecl	lastRand = - 1
>8924	AssignmentExpr	lastRand = - 1
>8925	UnaryOp	- 1
>8926	PrimaryExpression	1
>8927	UnaryOperator	-
>8928	Identifier	lastRand
>8929	Identifier	lastRand
>8930	IdentifierDeclType	int
>8931	Statement	 
>8939	FunctionDef	DSQ 
>8940	ParameterList	int note
>8941	Parameter	 
>8942	Identifier	note
>8943	ParameterType	int
>8944	ReturnType	Vector
>8945	CompoundStatement	 
>8946	ReturnStatement	 
>8947	Identifier	noteColor
>8948	SwitchStatement	switch ( note )
>8949	CompoundStatement	 
>8950	BreakStatement	 
>8951	ExpressionStatement	 
>8952	AssignmentExpr	noteColor = Vector ( 1 , 1 , 0.5 )
>8953	CallExpression	Vector ( 1 , 1 , 0.5 )
>8954	ArgumentList	1
>8955	Argument	0.5
>8956	PrimaryExpression	0.5
>8957	Argument	1
>8958	PrimaryExpression	1
>8959	Argument	1
>8960	PrimaryExpression	1
>8961	Callee	Vector
>8962	Identifier	Vector
>8963	Identifier	noteColor
>8964	Label	 
>8965	BreakStatement	 
>8966	ExpressionStatement	 
>8967	AssignmentExpr	noteColor = Vector ( 1 , 0.75 , 0.5 )
>8968	CallExpression	Vector ( 1 , 0.75 , 0.5 )
>8969	ArgumentList	1
>8970	Argument	0.5
>8971	PrimaryExpression	0.5
>8972	Argument	0.75
>8973	PrimaryExpression	0.75
>8974	Argument	1
>8975	PrimaryExpression	1
>8976	Callee	Vector
>8977	Identifier	Vector
>8978	Identifier	noteColor
>8979	Label	 
>8980	BreakStatement	 
>8981	ExpressionStatement	 
>8982	AssignmentExpr	noteColor = Vector ( 1 , 0.6 , 0.5 )
>8983	CallExpression	Vector ( 1 , 0.6 , 0.5 )
>8984	ArgumentList	1
>8985	Argument	0.5
>8986	PrimaryExpression	0.5
>8987	Argument	0.6
>8988	PrimaryExpression	0.6
>8989	Argument	1
>8990	PrimaryExpression	1
>8991	Callee	Vector
>8992	Identifier	Vector
>8993	Identifier	noteColor
>8994	Label	 
>8995	BreakStatement	 
>8996	ExpressionStatement	 
>8997	AssignmentExpr	noteColor = Vector ( 1 , 0.5 , 0.5 )
>8998	CallExpression	Vector ( 1 , 0.5 , 0.5 )
>8999	ArgumentList	1
>9000	Argument	0.5
>9001	PrimaryExpression	0.5
>9002	Argument	0.5
>9003	PrimaryExpression	0.5
>9004	Argument	1
>9005	PrimaryExpression	1
>9006	Callee	Vector
>9007	Identifier	Vector
>9008	Identifier	noteColor
>9009	Label	 
>9010	BreakStatement	 
>9011	ExpressionStatement	 
>9012	AssignmentExpr	noteColor = Vector ( 1 , 0.5 , 1 )
>9013	CallExpression	Vector ( 1 , 0.5 , 1 )
>9014	ArgumentList	1
>9015	Argument	1
>9016	PrimaryExpression	1
>9017	Argument	0.5
>9018	PrimaryExpression	0.5
>9019	Argument	1
>9020	PrimaryExpression	1
>9021	Callee	Vector
>9022	Identifier	Vector
>9023	Identifier	noteColor
>9024	Label	 
>9025	BreakStatement	 
>9026	ExpressionStatement	 
>9027	AssignmentExpr	noteColor = Vector ( 0.5 , 0.5 , 1 )
>9028	CallExpression	Vector ( 0.5 , 0.5 , 1 )
>9029	ArgumentList	0.5
>9030	Argument	1
>9031	PrimaryExpression	1
>9032	Argument	0.5
>9033	PrimaryExpression	0.5
>9034	Argument	0.5
>9035	PrimaryExpression	0.5
>9036	Callee	Vector
>9037	Identifier	Vector
>9038	Identifier	noteColor
>9039	Label	 
>9040	BreakStatement	 
>9041	ExpressionStatement	 
>9042	AssignmentExpr	noteColor = Vector ( 0.5 , 1 , 0.75 )
>9043	CallExpression	Vector ( 0.5 , 1 , 0.75 )
>9044	ArgumentList	0.5
>9045	Argument	0.75
>9046	PrimaryExpression	0.75
>9047	Argument	1
>9048	PrimaryExpression	1
>9049	Argument	0.5
>9050	PrimaryExpression	0.5
>9051	Callee	Vector
>9052	Identifier	Vector
>9053	Identifier	noteColor
>9054	Label	 
>9055	BreakStatement	 
>9056	ExpressionStatement	 
>9057	AssignmentExpr	noteColor = Vector ( 0.5 , 1 , 0.5 )
>9058	CallExpression	Vector ( 0.5 , 1 , 0.5 )
>9059	ArgumentList	0.5
>9060	Argument	0.5
>9061	PrimaryExpression	0.5
>9062	Argument	1
>9063	PrimaryExpression	1
>9064	Argument	0.5
>9065	PrimaryExpression	0.5
>9066	Callee	Vector
>9067	Identifier	Vector
>9068	Identifier	noteColor
>9069	Label	 
>9070	Condition	 
>9071	Identifier	note
>9072	IdentifierDeclStatement	 
>9073	IdentifierDecl	noteColor
>9074	Identifier	noteColor
>9075	IdentifierDeclType	Vector
>9082	FunctionDef	DSQ 
>9083	ParameterList	bool on
>9084	Parameter	 
>9085	Identifier	on
>9086	ParameterType	bool
>9087	ReturnType	void
>9088	CompoundStatement	 
>9089	ExpressionStatement	 
>9090	CallExpression	versionLabel -> alpha . interpolateTo ( a , 1 )
>9091	ArgumentList	a
>9092	Argument	1
>9093	PrimaryExpression	1
>9094	Argument	a
>9095	Identifier	a
>9096	Callee	versionLabel -> alpha . interpolateTo
>9097	MemberAccess	versionLabel -> alpha . interpolateTo
>9098	Identifier	interpolateTo
>9099	PtrMemberAccess	versionLabel -> alpha
>9100	Identifier	alpha
>9101	Identifier	versionLabel
>9102	IfStatement	if ( on )
>9103	ExpressionStatement	 
>9104	AssignmentExpr	a = 1
>9105	PrimaryExpression	1
>9106	Identifier	a
>9107	Condition	 
>9108	Identifier	on
>9109	IdentifierDeclStatement	 
>9110	IdentifierDecl	a = 0
>9111	AssignmentExpr	a = 0
>9112	PrimaryExpression	0
>9113	Identifier	a
>9114	Identifier	a
>9115	IdentifierDeclType	float
>9124	FunctionDef	DSQ 
>9125	ParameterList	 
>9126	ReturnType	void
>9127	CompoundStatement	 
>9128	SwitchStatement	switch ( inputMode )
>9129	CompoundStatement	 
>9130	BreakStatement	 
>9131	ExpressionStatement	 
>9132	CallExpression	setInputMode ( INPUT_MOUSE )
>9133	ArgumentList	INPUT_MOUSE
>9134	Argument	INPUT_MOUSE
>9135	Identifier	INPUT_MOUSE
>9136	Callee	setInputMode
>9137	Identifier	setInputMode
>9138	Label	 
>9139	Identifier	INPUT_JOYSTICK
>9140	BreakStatement	 
>9141	ExpressionStatement	 
>9142	CallExpression	setInputMode ( INPUT_JOYSTICK )
>9143	ArgumentList	INPUT_JOYSTICK
>9144	Argument	INPUT_JOYSTICK
>9145	Identifier	INPUT_JOYSTICK
>9146	Callee	setInputMode
>9147	Identifier	setInputMode
>9148	Label	 
>9149	Identifier	INPUT_MOUSE
>9150	Condition	 
>9151	Identifier	inputMode
>9158	FunctionDef	DSQ 
>9159	ParameterList	InputMode mode
>9160	Parameter	 
>9161	Identifier	mode
>9162	ParameterType	InputMode
>9163	ReturnType	void
>9164	CompoundStatement	 
>9165	SwitchStatement	switch ( inputMode )
>9166	CompoundStatement	 
>9167	BreakStatement	 
>9168	ExpressionStatement	 
>9169	AssignmentExpr	updateCursorFromMouse = true
>9170	Identifier	true
>9171	Identifier	updateCursorFromMouse
>9172	ExpressionStatement	 
>9173	AssignmentExpr	core -> joystickAsMouse = false
>9174	Identifier	false
>9175	PtrMemberAccess	core -> joystickAsMouse
>9176	Identifier	joystickAsMouse
>9177	Identifier	core
>9178	ExpressionStatement	 
>9179	CallExpression	setMousePosition ( core -> mouse . position )
>9180	ArgumentList	core -> mouse . position
>9181	Argument	core -> mouse . position
>9182	MemberAccess	core -> mouse . position
>9183	Identifier	position
>9184	PtrMemberAccess	core -> mouse
>9185	Identifier	mouse
>9186	Identifier	core
>9187	Callee	setMousePosition
>9188	Identifier	setMousePosition
>9189	Label	 
>9190	Identifier	INPUT_MOUSE
>9191	BreakStatement	 
>9192	ExpressionStatement	 
>9193	AssignmentExpr	updateCursorFromMouse = false
>9194	Identifier	false
>9195	Identifier	updateCursorFromMouse
>9196	ExpressionStatement	 
>9197	AssignmentExpr	core -> joystickAsMouse = true
>9198	Identifier	true
>9199	PtrMemberAccess	core -> joystickAsMouse
>9200	Identifier	joystickAsMouse
>9201	Identifier	core
>9202	Label	 
>9203	Identifier	INPUT_JOYSTICK
>9204	Condition	 
>9205	Identifier	inputMode
>9206	ExpressionStatement	 
>9207	AssignmentExpr	inputMode = mode
>9208	Identifier	mode
>9209	Identifier	inputMode
>9223	FunctionDef	DSQ 
>9224	ParameterList	 
>9225	ReturnType	void
>9226	CompoundStatement	 
>9227	IfStatement	if ( core -> getCtrlState ( ) && core -> getShiftState ( ) )
>9228	ExpressionStatement	 
>9229	AssignmentExpr	RenderObject 
>9230	UnaryOp	! RenderObject 
>9231	Identifier	RenderObject 
>9232	UnaryOperator	!
>9233	Identifier	RenderObject 
>9234	Condition	 
>9235	AndExpression	core -> getCtrlState ( ) && core -> getShiftState ( )
>9236	CallExpression	core -> getShiftState ( )
>9237	ArgumentList	 
>9238	Callee	core -> getShiftState
>9239	PtrMemberAccess	core -> getShiftState
>9240	Identifier	getShiftState
>9241	Identifier	core
>9242	CallExpression	core -> getCtrlState ( )
>9243	ArgumentList	 
>9244	Callee	core -> getCtrlState
>9245	PtrMemberAccess	core -> getCtrlState
>9246	Identifier	getCtrlState
>9247	Identifier	core
>9256	FunctionDef	DSQ 
>9257	ParameterList	 
>9258	ReturnType	void
>9259	CompoundStatement	 
>9260	ExpressionStatement	 
>9261	AssignmentExpr	doScreenshot = true
>9262	Identifier	true
>9263	Identifier	doScreenshot
>9269	FunctionDef	DSQ 
>9270	ParameterList	 
>9271	ReturnType	void
>9272	CompoundStatement	 
>9273	ExpressionStatement	 
>9274	CallExpression	darkLayer . unloadDevice ( )
>9275	ArgumentList	 
>9276	Callee	darkLayer . unloadDevice
>9277	MemberAccess	darkLayer . unloadDevice
>9278	Identifier	unloadDevice
>9279	Identifier	darkLayer
>9280	ExpressionStatement	 
>9281	CallExpression	Core 
>9282	ArgumentList	 
>9283	Callee	Core 
>9284	Identifier	Core 
>9285	ExpressionStatement	 
>9286	CallExpression	destroyFonts ( )
>9287	ArgumentList	 
>9288	Callee	destroyFonts
>9289	Identifier	destroyFonts
>9294	FunctionDef	DSQ 
>9295	ParameterList	 
>9296	ReturnType	void
>9297	CompoundStatement	 
>9298	ExpressionStatement	 
>9299	CallExpression	recreateBlackBars ( )
>9300	ArgumentList	 
>9301	Callee	recreateBlackBars
>9302	Identifier	recreateBlackBars
>9303	ExpressionStatement	 
>9304	CallExpression	darkLayer . reloadDevice ( )
>9305	ArgumentList	 
>9306	Callee	darkLayer . reloadDevice
>9307	MemberAccess	darkLayer . reloadDevice
>9308	Identifier	reloadDevice
>9309	Identifier	darkLayer
>9310	ExpressionStatement	 
>9311	CallExpression	Core 
>9312	ArgumentList	 
>9313	Callee	Core 
>9314	Identifier	Core 
>9315	ExpressionStatement	 
>9316	CallExpression	loadFonts ( )
>9317	ArgumentList	 
>9318	Callee	loadFonts
>9319	Identifier	loadFonts
>9324	FunctionDef	DSQ 
>9325	ParameterList	 
>9326	ReturnType	void
>9327	CompoundStatement	 
>9328	IfStatement	if ( console && isDeveloperKeys ( ) )
>9329	CompoundStatement	 
>9330	IfStatement	if ( console -> alpha == 0 )
>9331	ElseStatement	else
>9332	IfStatement	if ( console -> alpha == 1 )
>9333	CompoundStatement	 
>9334	ExpressionStatement	 
>9335	AssignmentExpr	RenderObject 
>9336	Identifier	false
>9337	Identifier	RenderObject 
>9338	IfStatement	if ( profRender )
>9339	ExpressionStatement	 
>9340	CallExpression	profRender -> alpha . interpolateTo ( 0 , 0.1 )
>9341	ArgumentList	0
>9342	Argument	0.1
>9343	PrimaryExpression	0.1
>9344	Argument	0
>9345	PrimaryExpression	0
>9346	Callee	profRender -> alpha . interpolateTo
>9347	MemberAccess	profRender -> alpha . interpolateTo
>9348	Identifier	interpolateTo
>9349	PtrMemberAccess	profRender -> alpha
>9350	Identifier	alpha
>9351	Identifier	profRender
>9352	Condition	 
>9353	Identifier	profRender
>9354	ExpressionStatement	 
>9355	CallExpression	fpsText -> alpha . interpolateTo ( 0 , 0.1 )
>9356	ArgumentList	0
>9357	Argument	0.1
>9358	PrimaryExpression	0.1
>9359	Argument	0
>9360	PrimaryExpression	0
>9361	Callee	fpsText -> alpha . interpolateTo
>9362	MemberAccess	fpsText -> alpha . interpolateTo
>9363	Identifier	interpolateTo
>9364	PtrMemberAccess	fpsText -> alpha
>9365	Identifier	alpha
>9366	Identifier	fpsText
>9367	ExpressionStatement	 
>9368	CallExpression	cmDebug -> alpha . interpolateTo ( 0 , 0.1 )
>9369	ArgumentList	0
>9370	Argument	0.1
>9371	PrimaryExpression	0.1
>9372	Argument	0
>9373	PrimaryExpression	0
>9374	Callee	cmDebug -> alpha . interpolateTo
>9375	MemberAccess	cmDebug -> alpha . interpolateTo
>9376	Identifier	interpolateTo
>9377	PtrMemberAccess	cmDebug -> alpha
>9378	Identifier	alpha
>9379	Identifier	cmDebug
>9380	ExpressionStatement	 
>9381	CallExpression	console -> alpha . interpolateTo ( 0 , 0.1 )
>9382	ArgumentList	0
>9383	Argument	0.1
>9384	PrimaryExpression	0.1
>9385	Argument	0
>9386	PrimaryExpression	0
>9387	Callee	console -> alpha . interpolateTo
>9388	MemberAccess	console -> alpha . interpolateTo
>9389	Identifier	interpolateTo
>9390	PtrMemberAccess	console -> alpha
>9391	Identifier	alpha
>9392	Identifier	console
>9393	Condition	 
>9394	EqualityExpression	console -> alpha == 1
>9395	PrimaryExpression	1
>9396	PtrMemberAccess	console -> alpha
>9397	Identifier	alpha
>9398	Identifier	console
>9399	CompoundStatement	 
>9400	ExpressionStatement	 
>9401	AssignmentExpr	RenderObject 
>9402	Identifier	true
>9403	Identifier	RenderObject 
>9404	IfStatement	if ( profRender )
>9405	ExpressionStatement	 
>9406	CallExpression	profRender -> alpha . interpolateTo ( 1 , 0.1 )
>9407	ArgumentList	1
>9408	Argument	0.1
>9409	PrimaryExpression	0.1
>9410	Argument	1
>9411	PrimaryExpression	1
>9412	Callee	profRender -> alpha . interpolateTo
>9413	MemberAccess	profRender -> alpha . interpolateTo
>9414	Identifier	interpolateTo
>9415	PtrMemberAccess	profRender -> alpha
>9416	Identifier	alpha
>9417	Identifier	profRender
>9418	Condition	 
>9419	Identifier	profRender
>9420	ExpressionStatement	 
>9421	CallExpression	fpsText -> alpha . interpolateTo ( 1 , 0.1 )
>9422	ArgumentList	1
>9423	Argument	0.1
>9424	PrimaryExpression	0.1
>9425	Argument	1
>9426	PrimaryExpression	1
>9427	Callee	fpsText -> alpha . interpolateTo
>9428	MemberAccess	fpsText -> alpha . interpolateTo
>9429	Identifier	interpolateTo
>9430	PtrMemberAccess	fpsText -> alpha
>9431	Identifier	alpha
>9432	Identifier	fpsText
>9433	ExpressionStatement	 
>9434	CallExpression	cmDebug -> alpha . interpolateTo ( 1 , 0.1 )
>9435	ArgumentList	1
>9436	Argument	0.1
>9437	PrimaryExpression	0.1
>9438	Argument	1
>9439	PrimaryExpression	1
>9440	Callee	cmDebug -> alpha . interpolateTo
>9441	MemberAccess	cmDebug -> alpha . interpolateTo
>9442	Identifier	interpolateTo
>9443	PtrMemberAccess	cmDebug -> alpha
>9444	Identifier	alpha
>9445	Identifier	cmDebug
>9446	ExpressionStatement	 
>9447	CallExpression	console -> alpha . interpolateTo ( 1 , 0.1 )
>9448	ArgumentList	1
>9449	Argument	0.1
>9450	PrimaryExpression	0.1
>9451	Argument	1
>9452	PrimaryExpression	1
>9453	Callee	console -> alpha . interpolateTo
>9454	MemberAccess	console -> alpha . interpolateTo
>9455	Identifier	interpolateTo
>9456	PtrMemberAccess	console -> alpha
>9457	Identifier	alpha
>9458	Identifier	console
>9459	Condition	 
>9460	EqualityExpression	console -> alpha == 0
>9461	PrimaryExpression	0
>9462	PtrMemberAccess	console -> alpha
>9463	Identifier	alpha
>9464	Identifier	console
>9465	Condition	 
>9466	AndExpression	console && isDeveloperKeys ( )
>9467	CallExpression	isDeveloperKeys ( )
>9468	ArgumentList	 
>9469	Callee	isDeveloperKeys
>9470	Identifier	isDeveloperKeys
>9471	Identifier	console
>9491	FunctionDef	DSQ 
>9492	ParameterList	const std 
>9493	Parameter	 
>9494	Identifier	s
>9495	ParameterType	const std 
>9496	ReturnType	void
>9497	CompoundStatement	 
>9498	ExpressionStatement	 
>9499	CallExpression	Core 
>9500	ArgumentList	s
>9501	Argument	s
>9502	Identifier	s
>9503	Callee	Core 
>9504	Identifier	Core 
>9505	IfStatement	if ( console )
>9506	CompoundStatement	 
>9507	ExpressionStatement	 
>9508	CallExpression	console -> setText ( text )
>9509	ArgumentList	text
>9510	Argument	text
>9511	Identifier	text
>9512	Callee	console -> setText
>9513	PtrMemberAccess	console -> setText
>9514	Identifier	setText
>9515	Identifier	console
>9516	ForStatement	for ( int i = 0 ; i < consoleLines . size ( ) ; i ++ )
>9517	CompoundStatement	 
>9518	ExpressionStatement	 
>9519	AssignmentExpr	text += consoleLines [ i ] + '\n'
>9520	AdditiveExpression	consoleLines [ i ] + '\n'
>9521	PrimaryExpression	'\n'
>9522	ArrayIndexing	consoleLines [ i ]
>9523	Identifier	i
>9524	Identifier	consoleLines
>9525	Identifier	text
>9526	IncDecOp	 
>9527	IncDec	++
>9528	Identifier	i
>9529	Condition	 
>9530	RelationalExpression	i < consoleLines . size ( )
>9531	CallExpression	consoleLines . size ( )
>9532	ArgumentList	 
>9533	Callee	consoleLines . size
>9534	MemberAccess	consoleLines . size
>9535	Identifier	size
>9536	Identifier	consoleLines
>9537	Identifier	i
>9538	ForInit	 
>9539	IdentifierDeclStatement	int i = 0 ;
>9540	IdentifierDecl	i = 0
>9541	AssignmentExpr	i = 0
>9542	PrimaryExpression	0
>9543	Identifier	i
>9544	Identifier	i
>9545	IdentifierDeclType	int
>9546	IdentifierDeclStatement	 
>9547	IdentifierDecl	text
>9548	Identifier	text
>9549	IdentifierDeclType	std 
>9550	Condition	 
>9551	Identifier	console
>9552	IfStatement	if ( consoleLines . size ( ) > MAX_CONSOLELINES )
>9553	CompoundStatement	 
>9554	ExpressionStatement	 
>9555	CallExpression	consoleLines . resize ( MAX_CONSOLELINES )
>9556	ArgumentList	MAX_CONSOLELINES
>9557	Argument	MAX_CONSOLELINES
>9558	Identifier	MAX_CONSOLELINES
>9559	Callee	consoleLines . resize
>9560	MemberAccess	consoleLines . resize
>9561	Identifier	resize
>9562	Identifier	consoleLines
>9563	ForStatement	for ( int i = 0 ; i < consoleLines . size ( ) - 1 ; i ++ )
>9564	CompoundStatement	 
>9565	ExpressionStatement	 
>9566	AssignmentExpr	consoleLines [ i ] = consoleLines [ i + 1 ]
>9567	ArrayIndexing	consoleLines [ i + 1 ]
>9568	AdditiveExpression	i + 1
>9569	PrimaryExpression	1
>9570	Identifier	i
>9571	Identifier	consoleLines
>9572	ArrayIndexing	consoleLines [ i ]
>9573	Identifier	i
>9574	Identifier	consoleLines
>9575	IncDecOp	 
>9576	IncDec	++
>9577	Identifier	i
>9578	Condition	 
>9579	RelationalExpression	i < consoleLines . size ( ) - 1
>9580	AdditiveExpression	consoleLines . size ( ) - 1
>9581	PrimaryExpression	1
>9582	CallExpression	consoleLines . size ( )
>9583	ArgumentList	 
>9584	Callee	consoleLines . size
>9585	MemberAccess	consoleLines . size
>9586	Identifier	size
>9587	Identifier	consoleLines
>9588	Identifier	i
>9589	ForInit	 
>9590	IdentifierDeclStatement	int i = 0 ;
>9591	IdentifierDecl	i = 0
>9592	AssignmentExpr	i = 0
>9593	PrimaryExpression	0
>9594	Identifier	i
>9595	Identifier	i
>9596	IdentifierDeclType	int
>9597	Condition	 
>9598	RelationalExpression	consoleLines . size ( ) > MAX_CONSOLELINES
>9599	Identifier	MAX_CONSOLELINES
>9600	CallExpression	consoleLines . size ( )
>9601	ArgumentList	 
>9602	Callee	consoleLines . size
>9603	MemberAccess	consoleLines . size
>9604	Identifier	size
>9605	Identifier	consoleLines
>9606	ExpressionStatement	 
>9607	CallExpression	consoleLines . push_back ( s )
>9608	ArgumentList	s
>9609	Argument	s
>9610	Identifier	s
>9611	Callee	consoleLines . push_back
>9612	MemberAccess	consoleLines . push_back
>9613	Identifier	push_back
>9614	Identifier	consoleLines
>9627	FunctionDef	DSQ 
>9628	ParameterList	std 
>9629	Parameter	 
>9630	Identifier	s
>9631	ParameterType	std 
>9632	ReturnType	int
>9633	CompoundStatement	 
>9634	ReturnStatement	 
>9635	UnaryOp	- 1
>9636	PrimaryExpression	1
>9637	UnaryOperator	-
>9638	ForStatement	for ( int i = 0 ; i < game -> entityTypeList . size ( ) ; i ++ )
>9639	CompoundStatement	 
>9640	IfStatement	if ( t -> name == s )
>9641	ReturnStatement	 
>9642	PtrMemberAccess	t -> idx
>9643	Identifier	idx
>9644	Identifier	t
>9645	Condition	 
>9646	EqualityExpression	t -> name == s
>9647	Identifier	s
>9648	PtrMemberAccess	t -> name
>9649	Identifier	name
>9650	Identifier	t
>9651	IdentifierDeclStatement	 
>9652	IdentifierDecl	* t = & game -> entityTypeList [ i ]
>9653	AssignmentExpr	* t = & game -> entityTypeList [ i ]
>9654	UnaryOp	& game -> entityTypeList [ i ]
>9655	ArrayIndexing	game -> entityTypeList [ i ]
>9656	Identifier	i
>9657	PtrMemberAccess	game -> entityTypeList
>9658	Identifier	entityTypeList
>9659	Identifier	game
>9660	UnaryOperator	&
>9661	Identifier	t
>9662	Identifier	t
>9663	IdentifierDeclType	EntityClass *
>9664	IncDecOp	 
>9665	IncDec	++
>9666	Identifier	i
>9667	Condition	 
>9668	RelationalExpression	i < game -> entityTypeList . size ( )
>9669	CallExpression	game -> entityTypeList . size ( )
>9670	ArgumentList	 
>9671	Callee	game -> entityTypeList . size
>9672	MemberAccess	game -> entityTypeList . size
>9673	Identifier	size
>9674	PtrMemberAccess	game -> entityTypeList
>9675	Identifier	entityTypeList
>9676	Identifier	game
>9677	Identifier	i
>9678	ForInit	 
>9679	IdentifierDeclStatement	int i = 0 ;
>9680	IdentifierDecl	i = 0
>9681	AssignmentExpr	i = 0
>9682	PrimaryExpression	0
>9683	Identifier	i
>9684	Identifier	i
>9685	IdentifierDeclType	int
>9702	FunctionDef	DSQ 
>9703	ParameterList	bool toggle
>9704	Parameter	 
>9705	Identifier	toggle
>9706	ParameterType	bool
>9707	ReturnType	void
>9708	CompoundStatement	 
>9713	FunctionDef	DSQ 
>9714	ParameterList	const std 
>9715	Parameter	 
>9716	Identifier	param
>9717	ParameterType	intptr_t
>9718	Parameter	 
>9719	Identifier	filename
>9720	ParameterType	const std 
>9721	ReturnType	void
>9722	CompoundStatement	 
>9723	ExpressionStatement	 
>9724	CallExpression	dsq -> debugLog ( ss . str ( ) )
>9725	ArgumentList	ss . str ( )
>9726	Argument	ss . str ( )
>9727	CallExpression	ss . str ( )
>9728	ArgumentList	 
>9729	Callee	ss . str
>9730	MemberAccess	ss . str
>9731	Identifier	str
>9732	Identifier	ss
>9733	Callee	dsq -> debugLog
>9734	PtrMemberAccess	dsq -> debugLog
>9735	Identifier	debugLog
>9736	Identifier	dsq
>9737	ExpressionStatement	 
>9738	ShiftExpression	ss << \"Loaded ModEntry [\" << m . path << \"] -> \" << m . id << \"  | type \" << m . type
>9739	ShiftExpression	\"Loaded ModEntry [\" << m . path << \"] -> \" << m . id << \"  | type \" << m . type
>9740	ShiftExpression	m . path << \"] -> \" << m . id << \"  | type \" << m . type
>9741	ShiftExpression	\"] -> \" << m . id << \"  | type \" << m . type
>9742	ShiftExpression	m . id << \"  | type \" << m . type
>9743	ShiftExpression	\"  | type \" << m . type
>9744	MemberAccess	m . type
>9745	Identifier	type
>9746	Identifier	m
>9747	PrimaryExpression	\"  | type \"
>9748	MemberAccess	m . id
>9749	Identifier	id
>9750	Identifier	m
>9751	PrimaryExpression	\"] -> \"
>9752	MemberAccess	m . path
>9753	Identifier	path
>9754	Identifier	m
>9755	PrimaryExpression	\"Loaded ModEntry [\"
>9756	Identifier	ss
>9757	IdentifierDeclStatement	 
>9758	IdentifierDecl	ss
>9759	Identifier	ss
>9760	IdentifierDeclType	std 
>9761	ExpressionStatement	 
>9762	CallExpression	dsq -> modEntries . push_back ( m )
>9763	ArgumentList	m
>9764	Argument	m
>9765	Identifier	m
>9766	Callee	dsq -> modEntries . push_back
>9767	MemberAccess	dsq -> modEntries . push_back
>9768	Identifier	push_back
>9769	PtrMemberAccess	dsq -> modEntries
>9770	Identifier	modEntries
>9771	Identifier	dsq
>9772	ExpressionStatement	 
>9773	AssignmentExpr	m . type = Mod 
>9774	CallExpression	Mod 
>9775	ArgumentList	d . FirstChildElement ( \"AquariaMod\" )
>9776	Argument	d . FirstChildElement ( \"AquariaMod\" )
>9777	CallExpression	d . FirstChildElement ( \"AquariaMod\" )
>9778	ArgumentList	\"AquariaMod\"
>9779	Argument	\"AquariaMod\"
>9780	PrimaryExpression	\"AquariaMod\"
>9781	Callee	d . FirstChildElement
>9782	MemberAccess	d . FirstChildElement
>9783	Identifier	FirstChildElement
>9784	Identifier	d
>9785	Callee	Mod 
>9786	Identifier	Mod 
>9787	MemberAccess	m . type
>9788	Identifier	type
>9789	Identifier	m
>9790	IfStatement	if ( ! Mod 
>9791	CompoundStatement	 
>9792	ReturnStatement	 
>9793	ExpressionStatement	 
>9794	CallExpression	dsq -> debugLog ( os . str ( ) )
>9795	ArgumentList	os . str ( )
>9796	Argument	os . str ( )
>9797	CallExpression	os . str ( )
>9798	ArgumentList	 
>9799	Callee	os . str
>9800	MemberAccess	os . str
>9801	Identifier	str
>9802	Identifier	os
>9803	Callee	dsq -> debugLog
>9804	PtrMemberAccess	dsq -> debugLog
>9805	Identifier	debugLog
>9806	Identifier	dsq
>9807	ExpressionStatement	 
>9808	ShiftExpression	os << \"Failed to load mod xml
>9809	ShiftExpression	\"Failed to load mod xml
>9810	ShiftExpression	filename << \" -- Error
>9811	ShiftExpression	\" -- Error
>9812	CallExpression	d . GetErrorStr1 ( )
>9813	ArgumentList	 
>9814	Callee	d . GetErrorStr1
>9815	MemberAccess	d . GetErrorStr1
>9816	Identifier	GetErrorStr1
>9817	Identifier	d
>9818	PrimaryExpression	\" -- Error
>9819	Identifier	filename
>9820	PrimaryExpression	\"Failed to load mod xml
>9821	Identifier	os
>9822	IdentifierDeclStatement	 
>9823	IdentifierDecl	os
>9824	Identifier	os
>9825	IdentifierDeclType	std 
>9826	Condition	 
>9827	UnaryOp	! Mod 
>9828	CallExpression	Mod 
>9829	ArgumentList	& d
>9830	Argument	name
>9831	Identifier	name
>9832	Argument	& d
>9833	UnaryOp	& d
>9834	Identifier	d
>9835	UnaryOperator	&
>9836	Callee	Mod 
>9837	Identifier	Mod 
>9838	UnaryOperator	!
>9839	IdentifierDeclStatement	 
>9840	IdentifierDecl	d
>9841	Identifier	d
>9842	IdentifierDeclType	XMLDocument
>9843	ExpressionStatement	 
>9844	AssignmentExpr	m . id = dsq -> modEntries . size ( )
>9845	CallExpression	dsq -> modEntries . size ( )
>9846	ArgumentList	 
>9847	Callee	dsq -> modEntries . size
>9848	MemberAccess	dsq -> modEntries . size
>9849	Identifier	size
>9850	PtrMemberAccess	dsq -> modEntries
>9851	Identifier	modEntries
>9852	Identifier	dsq
>9853	MemberAccess	m . id
>9854	Identifier	id
>9855	Identifier	m
>9856	ExpressionStatement	 
>9857	AssignmentExpr	m . path = name
>9858	Identifier	name
>9859	MemberAccess	m . path
>9860	Identifier	path
>9861	Identifier	m
>9862	IdentifierDeclStatement	 
>9863	IdentifierDecl	m
>9864	Identifier	m
>9865	IdentifierDeclType	ModEntry
>9866	IdentifierDeclStatement	 
>9867	IdentifierDecl	name = filename . substr ( pos , pos2 - pos )
>9868	AssignmentExpr	name = filename . substr ( pos , pos2 - pos )
>9869	CallExpression	filename . substr ( pos , pos2 - pos )
>9870	ArgumentList	pos
>9871	Argument	pos2 - pos
>9872	AdditiveExpression	pos2 - pos
>9873	Identifier	pos
>9874	Identifier	pos2
>9875	Argument	pos
>9876	Identifier	pos
>9877	Callee	filename . substr
>9878	MemberAccess	filename . substr
>9879	Identifier	substr
>9880	Identifier	filename
>9881	Identifier	name
>9882	Identifier	name
>9883	IdentifierDeclType	std 
>9884	IdentifierDeclStatement	 
>9885	IdentifierDecl	pos2 = filename . find_last_of ( '.' )
>9886	AssignmentExpr	pos2 = filename . find_last_of ( '.' )
>9887	CallExpression	filename . find_last_of ( '.' )
>9888	ArgumentList	'.'
>9889	Argument	'.'
>9890	PrimaryExpression	'.'
>9891	Callee	filename . find_last_of
>9892	MemberAccess	filename . find_last_of
>9893	Identifier	find_last_of
>9894	Identifier	filename
>9895	Identifier	pos2
>9896	Identifier	pos2
>9897	IdentifierDeclType	int
>9898	IdentifierDeclStatement	 
>9899	IdentifierDecl	pos = filename . find_last_of ( '/' ) + 1
>9900	AssignmentExpr	pos = filename . find_last_of ( '/' ) + 1
>9901	AdditiveExpression	filename . find_last_of ( '/' ) + 1
>9902	PrimaryExpression	1
>9903	CallExpression	filename . find_last_of ( '/' )
>9904	ArgumentList	'/'
>9905	Argument	'/'
>9906	PrimaryExpression	'/'
>9907	Callee	filename . find_last_of
>9908	MemberAccess	filename . find_last_of
>9909	Identifier	find_last_of
>9910	Identifier	filename
>9911	Identifier	pos
>9912	Identifier	pos
>9913	IdentifierDeclType	int
>9941	FunctionDef	DSQ 
>9942	ParameterList	const std 
>9943	Parameter	 
>9944	Identifier	param
>9945	ParameterType	intptr_t
>9946	Parameter	 
>9947	Identifier	filename
>9948	ParameterType	const std 
>9949	ReturnType	void
>9950	CompoundStatement	 
>9951	ExpressionStatement	 
>9952	CallExpression	dsq -> debugLog ( ss . str ( ) )
>9953	ArgumentList	ss . str ( )
>9954	Argument	ss . str ( )
>9955	CallExpression	ss . str ( )
>9956	ArgumentList	 
>9957	Callee	ss . str
>9958	MemberAccess	ss . str
>9959	Identifier	str
>9960	Identifier	ss
>9961	Callee	dsq -> debugLog
>9962	PtrMemberAccess	dsq -> debugLog
>9963	Identifier	debugLog
>9964	Identifier	dsq
>9965	ExpressionStatement	 
>9966	ShiftExpression	ss << \"Mount Mod Package '\" << filename << \"' 
>9967	ShiftExpression	\"Mount Mod Package '\" << filename << \"' 
>9968	ShiftExpression	filename << \"' 
>9969	ShiftExpression	\"' 
>9970	ConditionalExpression	ok ? \"ok\" 
>9971	PrimaryExpression	\"FAIL\"
>9972	PrimaryExpression	\"ok\"
>9973	Condition	ok
>9974	Identifier	ok
>9975	PrimaryExpression	\"' 
>9976	Identifier	filename
>9977	PrimaryExpression	\"Mount Mod Package '\"
>9978	Identifier	ss
>9979	IdentifierDeclStatement	 
>9980	IdentifierDecl	ss
>9981	Identifier	ss
>9982	IdentifierDeclType	std 
>9983	IdentifierDeclStatement	 
>9984	IdentifierDecl	ok = dsq -> mountModPackage ( filename )
>9985	AssignmentExpr	ok = dsq -> mountModPackage ( filename )
>9986	CallExpression	dsq -> mountModPackage ( filename )
>9987	ArgumentList	filename
>9988	Argument	filename
>9989	Identifier	filename
>9990	Callee	dsq -> mountModPackage
>9991	PtrMemberAccess	dsq -> mountModPackage
>9992	Identifier	mountModPackage
>9993	Identifier	dsq
>9994	Identifier	ok
>9995	Identifier	ok
>9996	IdentifierDeclType	bool
>10008	FunctionDef	DSQ 
>10009	ParameterList	 
>10010	ReturnType	void
>10011	CompoundStatement	 
>10012	IfStatement	if ( e )
>10013	CompoundStatement	 
>10014	ExpressionStatement	 
>10015	CallExpression	mod . start ( )
>10016	ArgumentList	 
>10017	Callee	mod . start
>10018	MemberAccess	mod . start
>10019	Identifier	start
>10020	Identifier	mod
>10021	ExpressionStatement	 
>10022	CallExpression	mod . load ( e -> path )
>10023	ArgumentList	e -> path
>10024	Argument	e -> path
>10025	PtrMemberAccess	e -> path
>10026	Identifier	path
>10027	Identifier	e
>10028	Callee	mod . load
>10029	MemberAccess	mod . load
>10030	Identifier	load
>10031	Identifier	mod
>10032	ExpressionStatement	 
>10033	CallExpression	clearModSelector ( )
>10034	ArgumentList	 
>10035	Callee	clearModSelector
>10036	Identifier	clearModSelector
>10037	Condition	 
>10038	Identifier	e
>10039	IdentifierDeclStatement	 
>10040	IdentifierDecl	* e = getSelectedModEntry ( )
>10041	AssignmentExpr	* e = getSelectedModEntry ( )
>10042	CallExpression	getSelectedModEntry ( )
>10043	ArgumentList	 
>10044	Callee	getSelectedModEntry
>10045	Identifier	getSelectedModEntry
>10046	Identifier	e
>10047	Identifier	e
>10048	IdentifierDeclType	ModEntry *
>10057	FunctionDef	DSQ 
>10058	ParameterList	 
>10059	ReturnType	ModEntry *
>10060	CompoundStatement	 
>10061	ReturnStatement	 
>10062	PrimaryExpression	0
>10063	IfStatement	if ( ! modEntries . empty ( ) && selectedMod >= 0 && selectedMod < modEntries . size ( ) )
>10064	ReturnStatement	 
>10065	UnaryOp	& modEntries [ selectedMod ]
>10066	ArrayIndexing	modEntries [ selectedMod ]
>10067	Identifier	selectedMod
>10068	Identifier	modEntries
>10069	UnaryOperator	&
>10070	Condition	 
>10071	AndExpression	! modEntries . empty ( ) && selectedMod >= 0 && selectedMod < modEntries . size ( )
>10072	AndExpression	selectedMod >= 0 && selectedMod < modEntries . size ( )
>10073	RelationalExpression	selectedMod < modEntries . size ( )
>10074	CallExpression	modEntries . size ( )
>10075	ArgumentList	 
>10076	Callee	modEntries . size
>10077	MemberAccess	modEntries . size
>10078	Identifier	size
>10079	Identifier	modEntries
>10080	Identifier	selectedMod
>10081	RelationalExpression	selectedMod >= 0
>10082	PrimaryExpression	0
>10083	Identifier	selectedMod
>10084	UnaryOp	! modEntries . empty ( )
>10085	CallExpression	modEntries . empty ( )
>10086	ArgumentList	 
>10087	Callee	modEntries . empty
>10088	MemberAccess	modEntries . empty
>10089	Identifier	empty
>10090	Identifier	modEntries
>10091	UnaryOperator	!
>10101	FunctionDef	DSQ 
>10102	ParameterList	 
>10103	ReturnType	void
>10104	CompoundStatement	 
>10105	ExpressionStatement	 
>10106	CallExpression	debugLog ( os . str ( ) )
>10107	ArgumentList	os . str ( )
>10108	Argument	os . str ( )
>10109	CallExpression	os . str ( )
>10110	ArgumentList	 
>10111	Callee	os . str
>10112	MemberAccess	os . str
>10113	Identifier	str
>10114	Identifier	os
>10115	Callee	debugLog
>10116	Identifier	debugLog
>10117	ExpressionStatement	 
>10118	ShiftExpression	os << \"loadMods done, \" << modEntries . size ( ) << \" entries\"
>10119	ShiftExpression	\"loadMods done, \" << modEntries . size ( ) << \" entries\"
>10120	ShiftExpression	modEntries . size ( ) << \" entries\"
>10121	PrimaryExpression	\" entries\"
>10122	CallExpression	modEntries . size ( )
>10123	ArgumentList	 
>10124	Callee	modEntries . size
>10125	MemberAccess	modEntries . size
>10126	Identifier	size
>10127	Identifier	modEntries
>10128	PrimaryExpression	\"loadMods done, \"
>10129	Identifier	os
>10130	IdentifierDeclStatement	 
>10131	IdentifierDecl	os
>10132	Identifier	os
>10133	IdentifierDeclType	std 
>10134	ExpressionStatement	 
>10135	AssignmentExpr	selectedMod = 0
>10136	PrimaryExpression	0
>10137	Identifier	selectedMod
>10138	ExpressionStatement	 
>10139	CallExpression	forEachFile ( modpath , \".xml\" , loadModsCallback , 0 )
>10140	ArgumentList	modpath
>10141	Argument	0
>10142	PrimaryExpression	0
>10143	Argument	loadModsCallback
>10144	Identifier	loadModsCallback
>10145	Argument	\".xml\"
>10146	PrimaryExpression	\".xml\"
>10147	Argument	modpath
>10148	Identifier	modpath
>10149	Callee	forEachFile
>10150	Identifier	forEachFile
>10151	ExpressionStatement	 
>10152	CallExpression	forEachFile ( modpath , \".aqmod\" , loadModPackagesCallback , 0 )
>10153	ArgumentList	modpath
>10154	Argument	0
>10155	PrimaryExpression	0
>10156	Argument	loadModPackagesCallback
>10157	Identifier	loadModPackagesCallback
>10158	Argument	\".aqmod\"
>10159	PrimaryExpression	\".aqmod\"
>10160	Argument	modpath
>10161	Identifier	modpath
>10162	Callee	forEachFile
>10163	Identifier	forEachFile
>10164	ExpressionStatement	 
>10165	CallExpression	debugLog ( \"loadMods
>10166	ArgumentList	\"loadMods
>10167	Argument	\"loadMods
>10168	AdditiveExpression	\"loadMods
>10169	Identifier	modpath
>10170	PrimaryExpression	\"loadMods
>10171	Callee	debugLog
>10172	Identifier	debugLog
>10173	IdentifierDeclStatement	 
>10174	IdentifierDecl	modpath = mod . getBaseModPath ( )
>10175	AssignmentExpr	modpath = mod . getBaseModPath ( )
>10176	CallExpression	mod . getBaseModPath ( )
>10177	ArgumentList	 
>10178	Callee	mod . getBaseModPath
>10179	MemberAccess	mod . getBaseModPath
>10180	Identifier	getBaseModPath
>10181	Identifier	mod
>10182	Identifier	modpath
>10183	Identifier	modpath
>10184	IdentifierDeclType	std 
>10185	ExpressionStatement	 
>10186	CallExpression	modEntries . clear ( )
>10187	ArgumentList	 
>10188	Callee	modEntries . clear
>10189	MemberAccess	modEntries . clear
>10190	Identifier	clear
>10191	Identifier	modEntries
>10204	FunctionDef	DSQ 
>10205	ParameterList	 
>10206	ReturnType	void
>10207	CompoundStatement	 
>10208	ForStatement	for ( std 
>10209	ForStatement	for ( int i = 0 ; i < modEntries . size ( ) ; ++ i )
>10210	IfStatement	if ( modEntries [ i ] . type == MODTYPE_PATCH )
>10211	IfStatement	if ( ! nocasecmp ( modEntries [ i ] . path . c_str ( ) , it -> c_str ( ) ) )
>10212	ExpressionStatement	 
>10213	CallExpression	applyPatch ( modEntries [ i ] . path )
>10214	ArgumentList	modEntries [ i ] . path
>10215	Argument	modEntries [ i ] . path
>10216	MemberAccess	modEntries [ i ] . path
>10217	Identifier	path
>10218	ArrayIndexing	modEntries [ i ]
>10219	Identifier	i
>10220	Identifier	modEntries
>10221	Callee	applyPatch
>10222	Identifier	applyPatch
>10223	Condition	 
>10224	UnaryOp	! nocasecmp ( modEntries [ i ] . path . c_str ( ) , it -> c_str ( ) )
>10225	CallExpression	nocasecmp ( modEntries [ i ] . path . c_str ( ) , it -> c_str ( ) )
>10226	ArgumentList	modEntries [ i ] . path . c_str ( )
>10227	Argument	it -> c_str ( )
>10228	CallExpression	it -> c_str ( )
>10229	ArgumentList	 
>10230	Callee	it -> c_str
>10231	PtrMemberAccess	it -> c_str
>10232	Identifier	c_str
>10233	Identifier	it
>10234	Argument	modEntries [ i ] . path . c_str ( )
>10235	CallExpression	modEntries [ i ] . path . c_str ( )
>10236	ArgumentList	 
>10237	Callee	modEntries [ i ] . path . c_str
>10238	MemberAccess	modEntries [ i ] . path . c_str
>10239	Identifier	c_str
>10240	MemberAccess	modEntries [ i ] . path
>10241	Identifier	path
>10242	ArrayIndexing	modEntries [ i ]
>10243	Identifier	i
>10244	Identifier	modEntries
>10245	Callee	nocasecmp
>10246	Identifier	nocasecmp
>10247	UnaryOperator	!
>10248	Condition	 
>10249	EqualityExpression	modEntries [ i ] . type == MODTYPE_PATCH
>10250	Identifier	MODTYPE_PATCH
>10251	MemberAccess	modEntries [ i ] . type
>10252	Identifier	type
>10253	ArrayIndexing	modEntries [ i ]
>10254	Identifier	i
>10255	Identifier	modEntries
>10256	UnaryExpression	 
>10257	Identifier	i
>10258	IncDec	++
>10259	Condition	 
>10260	RelationalExpression	i < modEntries . size ( )
>10261	CallExpression	modEntries . size ( )
>10262	ArgumentList	 
>10263	Callee	modEntries . size
>10264	MemberAccess	modEntries . size
>10265	Identifier	size
>10266	Identifier	modEntries
>10267	Identifier	i
>10268	ForInit	 
>10269	IdentifierDeclStatement	int i = 0 ;
>10270	IdentifierDecl	i = 0
>10271	AssignmentExpr	i = 0
>10272	PrimaryExpression	0
>10273	Identifier	i
>10274	Identifier	i
>10275	IdentifierDeclType	int
>10276	UnaryExpression	 
>10277	Identifier	it
>10278	IncDec	++
>10279	Condition	 
>10280	EqualityExpression	it != activePatches . end ( )
>10281	CallExpression	activePatches . end ( )
>10282	ArgumentList	 
>10283	Callee	activePatches . end
>10284	MemberAccess	activePatches . end
>10285	Identifier	end
>10286	Identifier	activePatches
>10287	Identifier	it
>10288	ForInit	 
>10289	IdentifierDeclStatement	std 
>10290	IdentifierDecl	it = activePatches . begin ( )
>10291	AssignmentExpr	it = activePatches . begin ( )
>10292	CallExpression	activePatches . begin ( )
>10293	ArgumentList	 
>10294	Callee	activePatches . begin
>10295	MemberAccess	activePatches . begin
>10296	Identifier	begin
>10297	Identifier	activePatches
>10298	Identifier	it
>10299	Identifier	it
>10300	IdentifierDeclType	std 
>10301	ExpressionStatement	 
>10302	CallExpression	loadMods ( )
>10303	ArgumentList	 
>10304	Callee	loadMods
>10305	Identifier	loadMods
>10306	ExpressionStatement	 
>10307	CallExpression	vfs . Mount ( mod . getBaseModPath ( ) . c_str ( ) , \"_mods\" )
>10308	ArgumentList	mod . getBaseModPath ( ) . c_str ( )
>10309	Argument	\"_mods\"
>10310	PrimaryExpression	\"_mods\"
>10311	Argument	mod . getBaseModPath ( ) . c_str ( )
>10312	CallExpression	mod . getBaseModPath ( ) . c_str ( )
>10313	ArgumentList	 
>10314	Callee	mod . getBaseModPath ( ) . c_str
>10315	MemberAccess	mod . getBaseModPath ( ) . c_str
>10316	Identifier	c_str
>10317	CallExpression	mod . getBaseModPath ( )
>10318	ArgumentList	 
>10319	Callee	mod . getBaseModPath
>10320	MemberAccess	mod . getBaseModPath
>10321	Identifier	getBaseModPath
>10322	Identifier	mod
>10323	Callee	vfs . Mount
>10324	MemberAccess	vfs . Mount
>10325	Identifier	Mount
>10326	Identifier	vfs
>10350	FunctionDef	refr_pushback (ttvfs 
>10351	ParameterList	ttvfs 
>10352	Parameter	 
>10353	Identifier	user
>10354	ParameterType	void *
>10355	Parameter	 
>10356	Identifier	vd
>10357	ParameterType	ttvfs 
>10358	ReturnType	static void
>10359	CompoundStatement	 
>10360	ExpressionStatement	 
>10361	CallExpression	li -> push_back ( vd -> fullname ( ) )
>10362	ArgumentList	vd -> fullname ( )
>10363	Argument	vd -> fullname ( )
>10364	CallExpression	vd -> fullname ( )
>10365	ArgumentList	 
>10366	Callee	vd -> fullname
>10367	PtrMemberAccess	vd -> fullname
>10368	Identifier	fullname
>10369	Identifier	vd
>10370	Callee	li -> push_back
>10371	PtrMemberAccess	li -> push_back
>10372	Identifier	push_back
>10373	Identifier	li
>10374	IdentifierDeclStatement	 
>10375	IdentifierDecl	* li = ( std 
>10376	AssignmentExpr	* li = ( std 
>10377	CastExpression	( std 
>10378	Identifier	user
>10379	CastTarget	std 
>10380	Identifier	li
>10381	Identifier	li
>10382	IdentifierDeclType	std 
>10391	FunctionDef	refr_insert (VFILE * vf , void * user)
>10392	ParameterList	VFILE * vf , void * user
>10393	Parameter	 
>10394	Identifier	user
>10395	ParameterType	void *
>10396	Parameter	 
>10397	Identifier	vf
>10398	ParameterType	VFILE *
>10399	ReturnType	static void
>10400	CompoundStatement	 
>10401	ExpressionStatement	 
>10402	CallExpression	files -> insert ( t . substr ( pathstart + 4 , dotpos - ( pathstart + 4 ) ) )
>10403	ArgumentList	t . substr ( pathstart + 4 , dotpos - ( pathstart + 4 ) )
>10404	Argument	t . substr ( pathstart + 4 , dotpos - ( pathstart + 4 ) )
>10405	CallExpression	t . substr ( pathstart + 4 , dotpos - ( pathstart + 4 ) )
>10406	ArgumentList	pathstart + 4
>10407	Argument	dotpos - ( pathstart + 4 )
>10408	AdditiveExpression	dotpos - ( pathstart + 4 )
>10409	AdditiveExpression	pathstart + 4
>10410	PrimaryExpression	4
>10411	Identifier	pathstart
>10412	Identifier	dotpos
>10413	Argument	pathstart + 4
>10414	AdditiveExpression	pathstart + 4
>10415	PrimaryExpression	4
>10416	Identifier	pathstart
>10417	Callee	t . substr
>10418	MemberAccess	t . substr
>10419	Identifier	substr
>10420	Identifier	t
>10421	Callee	files -> insert
>10422	PtrMemberAccess	files -> insert
>10423	Identifier	insert
>10424	Identifier	files
>10425	IfStatement	if ( dotpos == std 
>10426	ReturnStatement	 
>10427	Condition	 
>10428	OrExpression	dotpos == std 
>10429	OrExpression	pathstart == std 
>10430	RelationalExpression	dotpos < pathstart
>10431	Identifier	pathstart
>10432	Identifier	dotpos
>10433	EqualityExpression	pathstart == std 
>10434	Identifier	std 
>10435	Identifier	pathstart
>10436	EqualityExpression	dotpos == std 
>10437	Identifier	std 
>10438	Identifier	dotpos
>10439	IdentifierDeclStatement	 
>10440	IdentifierDecl	pathstart = t . find ( \"gfx/\" )
>10441	AssignmentExpr	pathstart = t . find ( \"gfx/\" )
>10442	CallExpression	t . find ( \"gfx/\" )
>10443	ArgumentList	\"gfx/\"
>10444	Argument	\"gfx/\"
>10445	PrimaryExpression	\"gfx/\"
>10446	Callee	t . find
>10447	MemberAccess	t . find
>10448	Identifier	find
>10449	Identifier	t
>10450	Identifier	pathstart
>10451	Identifier	pathstart
>10452	IdentifierDeclType	size_t
>10453	IdentifierDeclStatement	 
>10454	IdentifierDecl	dotpos = t . rfind ( '.' )
>10455	AssignmentExpr	dotpos = t . rfind ( '.' )
>10456	CallExpression	t . rfind ( '.' )
>10457	ArgumentList	'.'
>10458	Argument	'.'
>10459	PrimaryExpression	'.'
>10460	Callee	t . rfind
>10461	MemberAccess	t . rfind
>10462	Identifier	rfind
>10463	Identifier	t
>10464	Identifier	dotpos
>10465	Identifier	dotpos
>10466	IdentifierDeclType	size_t
>10467	IdentifierDeclStatement	 
>10468	IdentifierDecl	t = vf -> fullname ( )
>10469	AssignmentExpr	t = vf -> fullname ( )
>10470	CallExpression	vf -> fullname ( )
>10471	ArgumentList	 
>10472	Callee	vf -> fullname
>10473	PtrMemberAccess	vf -> fullname
>10474	Identifier	fullname
>10475	Identifier	vf
>10476	Identifier	t
>10477	Identifier	t
>10478	IdentifierDeclType	std 
>10479	IdentifierDeclStatement	 
>10480	IdentifierDecl	* files = ( std 
>10481	AssignmentExpr	* files = ( std 
>10482	CastExpression	( std 
>10483	Identifier	user
>10484	CastTarget	std 
>10485	Identifier	files
>10486	Identifier	files
>10487	IdentifierDeclType	std 
>10503	FunctionDef	DSQ 
>10504	ParameterList	const std 
>10505	Parameter	 
>10506	Identifier	name
>10507	ParameterType	const std 
>10508	ReturnType	void
>10509	CompoundStatement	 
>10510	ExpressionStatement	 
>10511	CallExpression	debugLog ( os . str ( ) )
>10512	ArgumentList	os . str ( )
>10513	Argument	os . str ( )
>10514	CallExpression	os . str ( )
>10515	ArgumentList	 
>10516	Callee	os . str
>10517	MemberAccess	os . str
>10518	Identifier	str
>10519	Identifier	os
>10520	Callee	debugLog
>10521	Identifier	debugLog
>10522	ExpressionStatement	 
>10523	ShiftExpression	os << \"refreshResourcesForPatch - \" << reloaded << \" textures reloaded\"
>10524	ShiftExpression	\"refreshResourcesForPatch - \" << reloaded << \" textures reloaded\"
>10525	ShiftExpression	reloaded << \" textures reloaded\"
>10526	PrimaryExpression	\" textures reloaded\"
>10527	Identifier	reloaded
>10528	PrimaryExpression	\"refreshResourcesForPatch - \"
>10529	Identifier	os
>10530	ExpressionStatement	 
>10531	CallExpression	os . str ( \"\" )
>10532	ArgumentList	\"\"
>10533	Argument	\"\"
>10534	PrimaryExpression	\"\"
>10535	Callee	os . str
>10536	MemberAccess	os . str
>10537	Identifier	str
>10538	Identifier	os
>10539	IfStatement	if ( files . size ( ) )
>10540	CompoundStatement	 
>10541	ForStatement	for ( int i = 0 ; i < dsq -> resources . size ( ) ; ++ i )
>10542	CompoundStatement	 
>10543	IfStatement	if ( files . find ( r -> name ) != files . end ( ) )
>10544	ExpressionStatement	 
>10545	CallExpression	r -> reload ( )
>10546	ArgumentList	 
>10547	Callee	r -> reload
>10548	PtrMemberAccess	r -> reload
>10549	Identifier	reload
>10550	Identifier	r
>10551	Condition	 
>10552	EqualityExpression	files . find ( r -> name ) != files . end ( )
>10553	CallExpression	files . end ( )
>10554	ArgumentList	 
>10555	Callee	files . end
>10556	MemberAccess	files . end
>10557	Identifier	end
>10558	Identifier	files
>10559	CallExpression	files . find ( r -> name )
>10560	ArgumentList	r -> name
>10561	Argument	r -> name
>10562	PtrMemberAccess	r -> name
>10563	Identifier	name
>10564	Identifier	r
>10565	Callee	files . find
>10566	MemberAccess	files . find
>10567	Identifier	find
>10568	Identifier	files
>10569	IdentifierDeclStatement	 
>10570	IdentifierDecl	* r = dsq -> resources [ i ]
>10571	AssignmentExpr	* r = dsq -> resources [ i ]
>10572	ArrayIndexing	dsq -> resources [ i ]
>10573	Identifier	i
>10574	PtrMemberAccess	dsq -> resources
>10575	Identifier	resources
>10576	Identifier	dsq
>10577	Identifier	r
>10578	Identifier	r
>10579	IdentifierDeclType	Texture *
>10580	UnaryExpression	 
>10581	Identifier	i
>10582	IncDec	++
>10583	Condition	 
>10584	RelationalExpression	i < dsq -> resources . size ( )
>10585	CallExpression	dsq -> resources . size ( )
>10586	ArgumentList	 
>10587	Callee	dsq -> resources . size
>10588	MemberAccess	dsq -> resources . size
>10589	Identifier	size
>10590	PtrMemberAccess	dsq -> resources
>10591	Identifier	resources
>10592	Identifier	dsq
>10593	Identifier	i
>10594	ForInit	 
>10595	IdentifierDeclStatement	int i = 0 ;
>10596	IdentifierDecl	i = 0
>10597	AssignmentExpr	i = 0
>10598	PrimaryExpression	0
>10599	Identifier	i
>10600	Identifier	i
>10601	IdentifierDeclType	int
>10602	Condition	 
>10603	CallExpression	files . size ( )
>10604	ArgumentList	 
>10605	Callee	files . size
>10606	MemberAccess	files . size
>10607	Identifier	size
>10608	Identifier	files
>10609	IdentifierDeclStatement	 
>10610	IdentifierDecl	reloaded = 0
>10611	AssignmentExpr	reloaded = 0
>10612	PrimaryExpression	0
>10613	Identifier	reloaded
>10614	Identifier	reloaded
>10615	IdentifierDeclType	int
>10616	ExpressionStatement	 
>10617	CallExpression	debugLog ( os . str ( ) )
>10618	ArgumentList	os . str ( )
>10619	Argument	os . str ( )
>10620	CallExpression	os . str ( )
>10621	ArgumentList	 
>10622	Callee	os . str
>10623	MemberAccess	os . str
>10624	Identifier	str
>10625	Identifier	os
>10626	Callee	debugLog
>10627	Identifier	debugLog
>10628	ExpressionStatement	 
>10629	ShiftExpression	os << \"refreshResourcesForPatch - \" << files . size ( ) << \" to refresh\"
>10630	ShiftExpression	\"refreshResourcesForPatch - \" << files . size ( ) << \" to refresh\"
>10631	ShiftExpression	files . size ( ) << \" to refresh\"
>10632	PrimaryExpression	\" to refresh\"
>10633	CallExpression	files . size ( )
>10634	ArgumentList	 
>10635	Callee	files . size
>10636	MemberAccess	files . size
>10637	Identifier	size
>10638	Identifier	files
>10639	PrimaryExpression	\"refreshResourcesForPatch - \"
>10640	Identifier	os
>10641	IdentifierDeclStatement	 
>10642	IdentifierDecl	os
>10643	Identifier	os
>10644	IdentifierDeclType	std 
>10645	DoStatement	do
>10646	Condition	 
>10647	CallExpression	left . size ( )
>10648	ArgumentList	 
>10649	Callee	left . size
>10650	MemberAccess	left . size
>10651	Identifier	size
>10652	Identifier	left
>10653	CompoundStatement	 
>10654	IfStatement	if ( vfs . FillDirView ( dirname . c_str ( ) , view ) )
>10655	CompoundStatement	 
>10656	ExpressionStatement	 
>10657	CallExpression	view . forEachFile ( refr_insert , & files )
>10658	ArgumentList	refr_insert
>10659	Argument	& files
>10660	UnaryOp	& files
>10661	Identifier	files
>10662	UnaryOperator	&
>10663	Argument	refr_insert
>10664	Identifier	refr_insert
>10665	Callee	view . forEachFile
>10666	MemberAccess	view . forEachFile
>10667	Identifier	forEachFile
>10668	Identifier	view
>10669	ExpressionStatement	 
>10670	CallExpression	view . forEachDir ( refr_pushback , & left )
>10671	ArgumentList	refr_pushback
>10672	Argument	& left
>10673	UnaryOp	& left
>10674	Identifier	left
>10675	UnaryOperator	&
>10676	Argument	refr_pushback
>10677	Identifier	refr_pushback
>10678	Callee	view . forEachDir
>10679	MemberAccess	view . forEachDir
>10680	Identifier	forEachDir
>10681	Identifier	view
>10682	Condition	 
>10683	CallExpression	vfs . FillDirView ( dirname . c_str ( ) , view )
>10684	ArgumentList	dirname . c_str ( )
>10685	Argument	view
>10686	Identifier	view
>10687	Argument	dirname . c_str ( )
>10688	CallExpression	dirname . c_str ( )
>10689	ArgumentList	 
>10690	Callee	dirname . c_str
>10691	MemberAccess	dirname . c_str
>10692	Identifier	c_str
>10693	Identifier	dirname
>10694	Callee	vfs . FillDirView
>10695	MemberAccess	vfs . FillDirView
>10696	Identifier	FillDirView
>10697	Identifier	vfs
>10698	ExpressionStatement	 
>10699	CallExpression	left . pop_front ( )
>10700	ArgumentList	 
>10701	Callee	left . pop_front
>10702	MemberAccess	left . pop_front
>10703	Identifier	pop_front
>10704	Identifier	left
>10705	IdentifierDeclStatement	 
>10706	IdentifierDecl	dirname = left . front ( )
>10707	AssignmentExpr	dirname = left . front ( )
>10708	CallExpression	left . front ( )
>10709	ArgumentList	 
>10710	Callee	left . front
>10711	MemberAccess	left . front
>10712	Identifier	front
>10713	Identifier	left
>10714	Identifier	dirname
>10715	Identifier	dirname
>10716	IdentifierDeclType	std 
>10717	IdentifierDeclStatement	 
>10718	IdentifierDecl	view
>10719	Identifier	view
>10720	IdentifierDeclType	ttvfs 
>10721	ExpressionStatement	 
>10722	CallExpression	left . push_back ( mod . getBaseModPath ( ) + name + \"/gfx\" )
>10723	ArgumentList	mod . getBaseModPath ( ) + name + \"/gfx\"
>10724	Argument	mod . getBaseModPath ( ) + name + \"/gfx\"
>10725	AdditiveExpression	mod . getBaseModPath ( ) + name + \"/gfx\"
>10726	AdditiveExpression	name + \"/gfx\"
>10727	PrimaryExpression	\"/gfx\"
>10728	Identifier	name
>10729	CallExpression	mod . getBaseModPath ( )
>10730	ArgumentList	 
>10731	Callee	mod . getBaseModPath
>10732	MemberAccess	mod . getBaseModPath
>10733	Identifier	getBaseModPath
>10734	Identifier	mod
>10735	Callee	left . push_back
>10736	MemberAccess	left . push_back
>10737	Identifier	push_back
>10738	Identifier	left
>10739	IdentifierDeclStatement	 
>10740	IdentifierDecl	files
>10741	Identifier	files
>10742	IdentifierDeclType	std 
>10743	IdentifierDeclStatement	 
>10744	IdentifierDecl	left
>10745	Identifier	left
>10746	IdentifierDeclType	std 
>10783	FunctionDef	DSQ 
>10784	ParameterList	const std 
>10785	Parameter	 
>10786	Identifier	name
>10787	ParameterType	const std 
>10788	ReturnType	void
>10789	CompoundStatement	 
>10794	FunctionDef	DSQ 
>10795	ParameterList	const std 
>10796	Parameter	 
>10797	Identifier	name
>10798	ParameterType	const std 
>10799	ReturnType	void
>10800	CompoundStatement	 
>10801	ExpressionStatement	 
>10802	CallExpression	refreshResourcesForPatch ( name )
>10803	ArgumentList	name
>10804	Argument	name
>10805	Identifier	name
>10806	Callee	refreshResourcesForPatch
>10807	Identifier	refreshResourcesForPatch
>10808	ExpressionStatement	 
>10809	CallExpression	activePatches . insert ( name )
>10810	ArgumentList	name
>10811	Argument	name
>10812	Identifier	name
>10813	Callee	activePatches . insert
>10814	MemberAccess	activePatches . insert
>10815	Identifier	insert
>10816	Identifier	activePatches
>10817	ExpressionStatement	 
>10818	CallExpression	vfs . Mount ( src . c_str ( ) , \"\" )
>10819	ArgumentList	src . c_str ( )
>10820	Argument	\"\"
>10821	PrimaryExpression	\"\"
>10822	Argument	src . c_str ( )
>10823	CallExpression	src . c_str ( )
>10824	ArgumentList	 
>10825	Callee	src . c_str
>10826	MemberAccess	src . c_str
>10827	Identifier	c_str
>10828	Identifier	src
>10829	Callee	vfs . Mount
>10830	MemberAccess	vfs . Mount
>10831	Identifier	Mount
>10832	Identifier	vfs
>10833	ExpressionStatement	 
>10834	CallExpression	debugLog ( \"Apply patch
>10835	ArgumentList	\"Apply patch
>10836	Argument	\"Apply patch
>10837	AdditiveExpression	\"Apply patch
>10838	Identifier	src
>10839	PrimaryExpression	\"Apply patch
>10840	Callee	debugLog
>10841	Identifier	debugLog
>10842	ExpressionStatement	 
>10843	AssignmentExpr	src += name
>10844	Identifier	name
>10845	Identifier	src
>10846	IdentifierDeclStatement	 
>10847	IdentifierDecl	src = mod . getBaseModPath ( )
>10848	AssignmentExpr	src = mod . getBaseModPath ( )
>10849	CallExpression	mod . getBaseModPath ( )
>10850	ArgumentList	 
>10851	Callee	mod . getBaseModPath
>10852	MemberAccess	mod . getBaseModPath
>10853	Identifier	getBaseModPath
>10854	Identifier	mod
>10855	Identifier	src
>10856	Identifier	src
>10857	IdentifierDeclType	std 
>10858	ReturnStatement	 
>10869	FunctionDef	DSQ 
>10870	ParameterList	const std 
>10871	Parameter	 
>10872	Identifier	name
>10873	ParameterType	const std 
>10874	ReturnType	void
>10875	CompoundStatement	 
>10876	ExpressionStatement	 
>10877	CallExpression	refreshResourcesForPatch ( name )
>10878	ArgumentList	name
>10879	Argument	name
>10880	Identifier	name
>10881	Callee	refreshResourcesForPatch
>10882	Identifier	refreshResourcesForPatch
>10883	ExpressionStatement	 
>10884	CallExpression	activePatches . erase ( name )
>10885	ArgumentList	name
>10886	Argument	name
>10887	Identifier	name
>10888	Callee	activePatches . erase
>10889	MemberAccess	activePatches . erase
>10890	Identifier	erase
>10891	Identifier	activePatches
>10892	ExpressionStatement	 
>10893	CallExpression	vfs . Unmount ( src . c_str ( ) , \"\" )
>10894	ArgumentList	src . c_str ( )
>10895	Argument	\"\"
>10896	PrimaryExpression	\"\"
>10897	Argument	src . c_str ( )
>10898	CallExpression	src . c_str ( )
>10899	ArgumentList	 
>10900	Callee	src . c_str
>10901	MemberAccess	src . c_str
>10902	Identifier	c_str
>10903	Identifier	src
>10904	Callee	vfs . Unmount
>10905	MemberAccess	vfs . Unmount
>10906	Identifier	Unmount
>10907	Identifier	vfs
>10908	ExpressionStatement	 
>10909	CallExpression	debugLog ( \"Unapply patch
>10910	ArgumentList	\"Unapply patch
>10911	Argument	\"Unapply patch
>10912	AdditiveExpression	\"Unapply patch
>10913	Identifier	src
>10914	PrimaryExpression	\"Unapply patch
>10915	Callee	debugLog
>10916	Identifier	debugLog
>10917	ExpressionStatement	 
>10918	AssignmentExpr	src += name
>10919	Identifier	name
>10920	Identifier	src
>10921	IdentifierDeclStatement	 
>10922	IdentifierDecl	src = mod . getBaseModPath ( )
>10923	AssignmentExpr	src = mod . getBaseModPath ( )
>10924	CallExpression	mod . getBaseModPath ( )
>10925	ArgumentList	 
>10926	Callee	mod . getBaseModPath
>10927	MemberAccess	mod . getBaseModPath
>10928	Identifier	getBaseModPath
>10929	Identifier	mod
>10930	Identifier	src
>10931	Identifier	src
>10932	IdentifierDeclType	std 
>10943	FunctionDef	DSQ 
>10944	ParameterList	 
>10945	ReturnType	void
>10946	CompoundStatement	 
>10947	ExpressionStatement	 
>10948	CallExpression	core -> sound -> playSfx ( \"MenuSelect\" )
>10949	ArgumentList	\"MenuSelect\"
>10950	Argument	\"MenuSelect\"
>10951	PrimaryExpression	\"MenuSelect\"
>10952	Callee	core -> sound -> playSfx
>10953	PtrMemberAccess	core -> sound -> playSfx
>10954	Identifier	playSfx
>10955	PtrMemberAccess	core -> sound
>10956	Identifier	sound
>10957	Identifier	core
>10964	FunctionDef	DSQ 
>10965	ParameterList	const std 
>10966	Parameter	 
>10967	Identifier	holder
>10968	ParameterType	SoundHolder *
>10969	Parameter	 
>10970	Identifier	fadeOut
>10971	ParameterType	float
>10972	Parameter	 
>10973	Identifier	f
>10974	ParameterType	float
>10975	Parameter	 
>10976	Identifier	position
>10977	ParameterType	const Vector &
>10978	Parameter	 
>10979	Identifier	name
>10980	ParameterType	const std 
>10981	ReturnType	void
>10982	CompoundStatement	 
>10983	IfStatement	if ( holder )
>10984	ExpressionStatement	 
>10985	CallExpression	holder -> linkSound ( c )
>10986	ArgumentList	c
>10987	Argument	c
>10988	Identifier	c
>10989	Callee	holder -> linkSound
>10990	PtrMemberAccess	holder -> linkSound
>10991	Identifier	linkSound
>10992	Identifier	holder
>10993	Condition	 
>10994	Identifier	holder
>10995	IfStatement	if ( fadeOut != 0 )
>10996	ExpressionStatement	 
>10997	CallExpression	sound -> fadeSfx ( c , SFT_OUT , fadeOut )
>10998	ArgumentList	c
>10999	Argument	fadeOut
>11000	Identifier	fadeOut
>11001	Argument	SFT_OUT
>11002	Identifier	SFT_OUT
>11003	Argument	c
>11004	Identifier	c
>11005	Callee	sound -> fadeSfx
>11006	PtrMemberAccess	sound -> fadeSfx
>11007	Identifier	fadeSfx
>11008	Identifier	sound
>11009	Condition	 
>11010	EqualityExpression	fadeOut != 0
>11011	PrimaryExpression	0
>11012	Identifier	fadeOut
>11013	IdentifierDeclStatement	 
>11014	IdentifierDecl	* c = sound -> playSfx ( sfx )
>11015	AssignmentExpr	* c = sound -> playSfx ( sfx )
>11016	CallExpression	sound -> playSfx ( sfx )
>11017	ArgumentList	sfx
>11018	Argument	sfx
>11019	Identifier	sfx
>11020	Callee	sound -> playSfx
>11021	PtrMemberAccess	sound -> playSfx
>11022	Identifier	playSfx
>11023	Identifier	sound
>11024	Identifier	c
>11025	Identifier	c
>11026	IdentifierDeclType	void *
>11027	ExpressionStatement	 
>11028	AssignmentExpr	sfx . y = position . y
>11029	MemberAccess	position . y
>11030	Identifier	y
>11031	Identifier	position
>11032	MemberAccess	sfx . y
>11033	Identifier	y
>11034	Identifier	sfx
>11035	ExpressionStatement	 
>11036	AssignmentExpr	sfx . x = position . x
>11037	MemberAccess	position . x
>11038	Identifier	x
>11039	Identifier	position
>11040	MemberAccess	sfx . x
>11041	Identifier	x
>11042	Identifier	sfx
>11043	ExpressionStatement	 
>11044	AssignmentExpr	sfx . positional = true
>11045	Identifier	true
>11046	MemberAccess	sfx . positional
>11047	Identifier	positional
>11048	Identifier	sfx
>11049	ExpressionStatement	 
>11050	AssignmentExpr	sfx . relative = false
>11051	Identifier	false
>11052	MemberAccess	sfx . relative
>11053	Identifier	relative
>11054	Identifier	sfx
>11055	ExpressionStatement	 
>11056	AssignmentExpr	sfx . name = name
>11057	Identifier	name
>11058	MemberAccess	sfx . name
>11059	Identifier	name
>11060	Identifier	sfx
>11061	ExpressionStatement	 
>11062	AssignmentExpr	sfx . freq = f
>11063	Identifier	f
>11064	MemberAccess	sfx . freq
>11065	Identifier	freq
>11066	Identifier	sfx
>11067	IdentifierDeclStatement	 
>11068	IdentifierDecl	sfx
>11069	Identifier	sfx
>11070	IdentifierDeclType	PlaySfx
>11095	FunctionDef	DSQ 
>11096	ParameterList	 
>11097	ReturnType	void
>11098	CompoundStatement	 
>11099	ExpressionStatement	 
>11100	CallExpression	Core 
>11101	ArgumentList	 
>11102	Callee	Core 
>11103	Identifier	Core 
>11104	ExpressionStatement	 
>11105	CallExpression	continuity . shutdown ( )
>11106	ArgumentList	 
>11107	Callee	continuity . shutdown
>11108	MemberAccess	continuity . shutdown
>11109	Identifier	shutdown
>11110	Identifier	continuity
>11111	ExpressionStatement	 
>11112	AssignmentExpr	tfader = 0
>11113	PrimaryExpression	0
>11114	Identifier	tfader
>11115	ExpressionStatement	 
>11116	AssignmentExpr	cursor = 0
>11117	PrimaryExpression	0
>11118	Identifier	cursor
>11119	ExpressionStatement	 
>11120	AssignmentExpr	overlay3 = 0
>11121	PrimaryExpression	0
>11122	Identifier	overlay3
>11123	ExpressionStatement	 
>11124	AssignmentExpr	overlay2 = 0
>11125	PrimaryExpression	0
>11126	Identifier	overlay2
>11127	ExpressionStatement	 
>11128	AssignmentExpr	overlay = 0
>11129	PrimaryExpression	0
>11130	Identifier	overlay
>11131	ExpressionStatement	 
>11132	CallExpression	core -> main ( 0.1 )
>11133	ArgumentList	0.1
>11134	Argument	0.1
>11135	PrimaryExpression	0.1
>11136	Callee	core -> main
>11137	PtrMemberAccess	core -> main
>11138	Identifier	main
>11139	Identifier	core
>11140	ExpressionStatement	 
>11141	AssignmentExpr	screenTransition = 0
>11142	PrimaryExpression	0
>11143	Identifier	screenTransition
>11144	ExpressionStatement	 
>11145	CallExpression	destroyFonts ( )
>11146	ArgumentList	 
>11147	Callee	destroyFonts
>11148	Identifier	destroyFonts
>11149	IfStatement	if ( screenTransition )
>11150	CompoundStatement	 
>11151	ExpressionStatement	 
>11152	CallExpression	removeRenderObject ( screenTransition )
>11153	ArgumentList	screenTransition
>11154	Argument	screenTransition
>11155	Identifier	screenTransition
>11156	Callee	removeRenderObject
>11157	Identifier	removeRenderObject
>11158	ExpressionStatement	 
>11159	CallExpression	screenTransition -> destroy ( )
>11160	ArgumentList	 
>11161	Callee	screenTransition -> destroy
>11162	PtrMemberAccess	screenTransition -> destroy
>11163	Identifier	destroy
>11164	Identifier	screenTransition
>11165	Condition	 
>11166	Identifier	screenTransition
>11167	IfStatement	if ( profRender )
>11168	ExpressionStatement	 
>11169	CallExpression	removeRenderObject ( profRender )
>11170	ArgumentList	profRender
>11171	Argument	profRender
>11172	Identifier	profRender
>11173	Callee	removeRenderObject
>11174	Identifier	removeRenderObject
>11175	Condition	 
>11176	Identifier	profRender
>11177	ExpressionStatement	 
>11178	AssignmentExpr	versionLabel = 0
>11179	PrimaryExpression	0
>11180	Identifier	versionLabel
>11181	ExpressionStatement	 
>11182	CallExpression	removeRenderObject ( versionLabel )
>11183	ArgumentList	versionLabel
>11184	Argument	versionLabel
>11185	Identifier	versionLabel
>11186	Callee	removeRenderObject
>11187	Identifier	removeRenderObject
>11188	IfStatement	if ( cutscene_text2 )
>11189	ExpressionStatement	 
>11190	CallExpression	removeRenderObject ( cutscene_text2 )
>11191	ArgumentList	cutscene_text2
>11192	Argument	cutscene_text2
>11193	Identifier	cutscene_text2
>11194	Callee	removeRenderObject
>11195	Identifier	removeRenderObject
>11196	Condition	 
>11197	Identifier	cutscene_text2
>11198	IfStatement	if ( cutscene_text )
>11199	ExpressionStatement	 
>11200	CallExpression	removeRenderObject ( cutscene_text )
>11201	ArgumentList	cutscene_text
>11202	Argument	cutscene_text
>11203	Identifier	cutscene_text
>11204	Callee	removeRenderObject
>11205	Identifier	removeRenderObject
>11206	Condition	 
>11207	Identifier	cutscene_text
>11208	IfStatement	if ( cutscene_bg )
>11209	ExpressionStatement	 
>11210	CallExpression	removeRenderObject ( cutscene_bg )
>11211	ArgumentList	cutscene_bg
>11212	Argument	cutscene_bg
>11213	Identifier	cutscene_bg
>11214	Callee	removeRenderObject
>11215	Identifier	removeRenderObject
>11216	Condition	 
>11217	Identifier	cutscene_bg
>11218	IfStatement	if ( bar_down )
>11219	ExpressionStatement	 
>11220	CallExpression	removeRenderObject ( bar_down )
>11221	ArgumentList	bar_down
>11222	Argument	bar_down
>11223	Identifier	bar_down
>11224	Callee	removeRenderObject
>11225	Identifier	removeRenderObject
>11226	Condition	 
>11227	Identifier	bar_down
>11228	IfStatement	if ( bar_up )
>11229	ExpressionStatement	 
>11230	CallExpression	removeRenderObject ( bar_up )
>11231	ArgumentList	bar_up
>11232	Argument	bar_up
>11233	Identifier	bar_up
>11234	Callee	removeRenderObject
>11235	Identifier	removeRenderObject
>11236	Condition	 
>11237	Identifier	bar_up
>11238	IfStatement	if ( barFade_right )
>11239	ExpressionStatement	 
>11240	CallExpression	removeRenderObject ( barFade_right )
>11241	ArgumentList	barFade_right
>11242	Argument	barFade_right
>11243	Identifier	barFade_right
>11244	Callee	removeRenderObject
>11245	Identifier	removeRenderObject
>11246	Condition	 
>11247	Identifier	barFade_right
>11248	IfStatement	if ( barFade_left )
>11249	ExpressionStatement	 
>11250	CallExpression	removeRenderObject ( barFade_left )
>11251	ArgumentList	barFade_left
>11252	Argument	barFade_left
>11253	Identifier	barFade_left
>11254	Callee	removeRenderObject
>11255	Identifier	removeRenderObject
>11256	Condition	 
>11257	Identifier	barFade_left
>11258	IfStatement	if ( bar_right )
>11259	ExpressionStatement	 
>11260	CallExpression	removeRenderObject ( bar_right )
>11261	ArgumentList	bar_right
>11262	Argument	bar_right
>11263	Identifier	bar_right
>11264	Callee	removeRenderObject
>11265	Identifier	removeRenderObject
>11266	Condition	 
>11267	Identifier	bar_right
>11268	IfStatement	if ( bar_left )
>11269	ExpressionStatement	 
>11270	CallExpression	removeRenderObject ( bar_left )
>11271	ArgumentList	bar_left
>11272	Argument	bar_left
>11273	Identifier	bar_left
>11274	Callee	removeRenderObject
>11275	Identifier	removeRenderObject
>11276	Condition	 
>11277	Identifier	bar_left
>11278	ExpressionStatement	 
>11279	CallExpression	removeRenderObject ( fpsText )
>11280	ArgumentList	fpsText
>11281	Argument	fpsText
>11282	Identifier	fpsText
>11283	Callee	removeRenderObject
>11284	Identifier	removeRenderObject
>11285	ExpressionStatement	 
>11286	CallExpression	removeRenderObject ( tfader )
>11287	ArgumentList	tfader
>11288	Argument	tfader
>11289	Identifier	tfader
>11290	Callee	removeRenderObject
>11291	Identifier	removeRenderObject
>11292	ExpressionStatement	 
>11293	CallExpression	removeRenderObject ( overlayRed )
>11294	ArgumentList	overlayRed
>11295	Argument	overlayRed
>11296	Identifier	overlayRed
>11297	Callee	removeRenderObject
>11298	Identifier	removeRenderObject
>11299	ExpressionStatement	 
>11300	CallExpression	removeRenderObject ( overlay3 )
>11301	ArgumentList	overlay3
>11302	Argument	overlay3
>11303	Identifier	overlay3
>11304	Callee	removeRenderObject
>11305	Identifier	removeRenderObject
>11306	ExpressionStatement	 
>11307	CallExpression	removeRenderObject ( overlay2 )
>11308	ArgumentList	overlay2
>11309	Argument	overlay2
>11310	Identifier	overlay2
>11311	Callee	removeRenderObject
>11312	Identifier	removeRenderObject
>11313	ExpressionStatement	 
>11314	CallExpression	removeRenderObject ( overlay )
>11315	ArgumentList	overlay
>11316	Argument	overlay
>11317	Identifier	overlay
>11318	Callee	removeRenderObject
>11319	Identifier	removeRenderObject
>11320	ExpressionStatement	 
>11321	CallExpression	removeRenderObject ( cursorBlinker )
>11322	ArgumentList	cursorBlinker
>11323	Argument	cursorBlinker
>11324	Identifier	cursorBlinker
>11325	Callee	removeRenderObject
>11326	Identifier	removeRenderObject
>11327	ExpressionStatement	 
>11328	CallExpression	removeRenderObject ( cursorGlow )
>11329	ArgumentList	cursorGlow
>11330	Argument	cursorGlow
>11331	Identifier	cursorGlow
>11332	Callee	removeRenderObject
>11333	Identifier	removeRenderObject
>11334	ExpressionStatement	 
>11335	CallExpression	removeRenderObject ( cursor )
>11336	ArgumentList	cursor
>11337	Argument	cursor
>11338	Identifier	cursor
>11339	Callee	removeRenderObject
>11340	Identifier	removeRenderObject
>11341	ExpressionStatement	 
>11342	AssignmentExpr	achievement_box = 0
>11343	PrimaryExpression	0
>11344	Identifier	achievement_box
>11345	ExpressionStatement	 
>11346	CallExpression	removeRenderObject ( achievement_box )
>11347	ArgumentList	achievement_box
>11348	Argument	achievement_box
>11349	Identifier	achievement_box
>11350	Callee	removeRenderObject
>11351	Identifier	removeRenderObject
>11352	ExpressionStatement	 
>11353	AssignmentExpr	achievement_text = 0
>11354	PrimaryExpression	0
>11355	Identifier	achievement_text
>11356	ExpressionStatement	 
>11357	CallExpression	removeRenderObject ( achievement_text )
>11358	ArgumentList	achievement_text
>11359	Argument	achievement_text
>11360	Identifier	achievement_text
>11361	Callee	removeRenderObject
>11362	Identifier	removeRenderObject
>11363	ExpressionStatement	 
>11364	AssignmentExpr	subbox = 0
>11365	PrimaryExpression	0
>11366	Identifier	subbox
>11367	ExpressionStatement	 
>11368	CallExpression	removeRenderObject ( subbox )
>11369	ArgumentList	subbox
>11370	Argument	subbox
>11371	Identifier	subbox
>11372	Callee	removeRenderObject
>11373	Identifier	removeRenderObject
>11374	ExpressionStatement	 
>11375	AssignmentExpr	subtext = 0
>11376	PrimaryExpression	0
>11377	Identifier	subtext
>11378	ExpressionStatement	 
>11379	CallExpression	removeRenderObject ( subtext )
>11380	ArgumentList	subtext
>11381	Argument	subtext
>11382	Identifier	subtext
>11383	Callee	removeRenderObject
>11384	Identifier	removeRenderObject
>11385	ExpressionStatement	 
>11386	AssignmentExpr	cmDebug = 0
>11387	PrimaryExpression	0
>11388	Identifier	cmDebug
>11389	ExpressionStatement	 
>11390	CallExpression	removeRenderObject ( cmDebug )
>11391	ArgumentList	cmDebug
>11392	Argument	cmDebug
>11393	Identifier	cmDebug
>11394	Callee	removeRenderObject
>11395	Identifier	removeRenderObject
>11396	ExpressionStatement	 
>11397	AssignmentExpr	console = 0
>11398	PrimaryExpression	0
>11399	Identifier	console
>11400	ExpressionStatement	 
>11401	CallExpression	removeRenderObject ( console )
>11402	ArgumentList	console
>11403	Argument	console
>11404	Identifier	console
>11405	Callee	removeRenderObject
>11406	Identifier	removeRenderObject
>11407	ExpressionStatement	 
>11408	CallExpression	UNREFTEX ( texCursorLook )
>11409	ArgumentList	texCursorLook
>11410	Argument	texCursorLook
>11411	Identifier	texCursorLook
>11412	Callee	UNREFTEX
>11413	Identifier	UNREFTEX
>11414	ExpressionStatement	 
>11415	CallExpression	UNREFTEX ( texCursorSing )
>11416	ArgumentList	texCursorSing
>11417	Argument	texCursorSing
>11418	Identifier	texCursorSing
>11419	Callee	UNREFTEX
>11420	Identifier	UNREFTEX
>11421	ExpressionStatement	 
>11422	CallExpression	UNREFTEX ( texCursorBurst )
>11423	ArgumentList	texCursorBurst
>11424	Argument	texCursorBurst
>11425	Identifier	texCursorBurst
>11426	Callee	UNREFTEX
>11427	Identifier	UNREFTEX
>11428	ExpressionStatement	 
>11429	CallExpression	UNREFTEX ( texCursorSwim )
>11430	ArgumentList	texCursorSwim
>11431	Argument	texCursorSwim
>11432	Identifier	texCursorSwim
>11433	Callee	UNREFTEX
>11434	Identifier	UNREFTEX
>11435	ExpressionStatement	 
>11436	CallExpression	UNREFTEX ( texCursor )
>11437	ArgumentList	texCursor
>11438	Argument	texCursor
>11439	Identifier	texCursor
>11440	Callee	UNREFTEX
>11441	Identifier	UNREFTEX
>11442	ExpressionStatement	 
>11443	CallExpression	cursor -> setTexturePointer ( 0 )
>11444	ArgumentList	0
>11445	Argument	0
>11446	PrimaryExpression	0
>11447	Callee	cursor -> setTexturePointer
>11448	PtrMemberAccess	cursor -> setTexturePointer
>11449	Identifier	setTexturePointer
>11450	Identifier	cursor
>11451	ExpressionStatement	 
>11452	CallExpression	SkeletalSprite 
>11453	ArgumentList	 
>11454	Callee	SkeletalSprite 
>11455	Identifier	SkeletalSprite 
>11456	ExpressionStatement	 
>11457	CallExpression	Shot 
>11458	ArgumentList	 
>11459	Callee	Shot 
>11460	Identifier	Shot 
>11461	ExpressionStatement	 
>11462	CallExpression	core -> particleManager -> clearParticleBank ( )
>11463	ArgumentList	 
>11464	Callee	core -> particleManager -> clearParticleBank
>11465	PtrMemberAccess	core -> particleManager -> clearParticleBank
>11466	Identifier	clearParticleBank
>11467	PtrMemberAccess	core -> particleManager
>11468	Identifier	particleManager
>11469	Identifier	core
>11470	ExpressionStatement	 
>11471	CallExpression	precacher . clean ( )
>11472	ArgumentList	 
>11473	Callee	precacher . clean
>11474	MemberAccess	precacher . clean
>11475	Identifier	clean
>11476	Identifier	precacher
>11477	ExpressionStatement	 
>11478	CallExpression	scriptInterface . shutdown ( )
>11479	ArgumentList	 
>11480	Callee	scriptInterface . shutdown
>11481	MemberAccess	scriptInterface . shutdown
>11482	Identifier	shutdown
>11483	Identifier	scriptInterface
>11484	ExpressionStatement	 
>11485	CallExpression	Network 
>11486	ArgumentList	 
>11487	Callee	Network 
>11488	Identifier	Network 
>11489	ExpressionStatement	 
>11490	CallExpression	mod . stop ( )
>11491	ArgumentList	 
>11492	Callee	mod . stop
>11493	MemberAccess	mod . stop
>11494	Identifier	stop
>11495	Identifier	mod
>11538	FunctionDef	DSQ 
>11539	ParameterList	 
>11540	ReturnType	void
>11541	CompoundStatement	 
>11542	IfStatement	if ( cursor )
>11543	ExpressionStatement	 
>11544	CallExpression	cursor -> setTexturePointer ( texCursor )
>11545	ArgumentList	texCursor
>11546	Argument	texCursor
>11547	Identifier	texCursor
>11548	Callee	cursor -> setTexturePointer
>11549	PtrMemberAccess	cursor -> setTexturePointer
>11550	Identifier	setTexturePointer
>11551	Identifier	cursor
>11552	Condition	 
>11553	Identifier	cursor
>11554	ExpressionStatement	 
>11555	AssignmentExpr	texCursorSing = core -> addTexture ( \"cursor-sing\" )
>11556	CallExpression	core -> addTexture ( \"cursor-sing\" )
>11557	ArgumentList	\"cursor-sing\"
>11558	Argument	\"cursor-sing\"
>11559	PrimaryExpression	\"cursor-sing\"
>11560	Callee	core -> addTexture
>11561	PtrMemberAccess	core -> addTexture
>11562	Identifier	addTexture
>11563	Identifier	core
>11564	Identifier	texCursorSing
>11565	ExpressionStatement	 
>11566	AssignmentExpr	texCursorSwim = core -> addTexture ( \"cursor-swim\" )
>11567	CallExpression	core -> addTexture ( \"cursor-swim\" )
>11568	ArgumentList	\"cursor-swim\"
>11569	Argument	\"cursor-swim\"
>11570	PrimaryExpression	\"cursor-swim\"
>11571	Callee	core -> addTexture
>11572	PtrMemberAccess	core -> addTexture
>11573	Identifier	addTexture
>11574	Identifier	core
>11575	Identifier	texCursorSwim
>11576	ExpressionStatement	 
>11577	AssignmentExpr	texCursorBurst = core -> addTexture ( \"cursor-burst\" )
>11578	CallExpression	core -> addTexture ( \"cursor-burst\" )
>11579	ArgumentList	\"cursor-burst\"
>11580	Argument	\"cursor-burst\"
>11581	PrimaryExpression	\"cursor-burst\"
>11582	Callee	core -> addTexture
>11583	PtrMemberAccess	core -> addTexture
>11584	Identifier	addTexture
>11585	Identifier	core
>11586	Identifier	texCursorBurst
>11587	ExpressionStatement	 
>11588	AssignmentExpr	texCursorLook = core -> addTexture ( \"cursor-look\" )
>11589	CallExpression	core -> addTexture ( \"cursor-look\" )
>11590	ArgumentList	\"cursor-look\"
>11591	Argument	\"cursor-look\"
>11592	PrimaryExpression	\"cursor-look\"
>11593	Callee	core -> addTexture
>11594	PtrMemberAccess	core -> addTexture
>11595	Identifier	addTexture
>11596	Identifier	core
>11597	Identifier	texCursorLook
>11598	ExpressionStatement	 
>11599	AssignmentExpr	texCursor = core -> addTexture ( \"cursor\" )
>11600	CallExpression	core -> addTexture ( \"cursor\" )
>11601	ArgumentList	\"cursor\"
>11602	Argument	\"cursor\"
>11603	PrimaryExpression	\"cursor\"
>11604	Callee	core -> addTexture
>11605	PtrMemberAccess	core -> addTexture
>11606	Identifier	addTexture
>11607	Identifier	core
>11608	Identifier	texCursor
>11621	FunctionDef	DSQ 
>11622	ParameterList	CursorType type
>11623	Parameter	 
>11624	Identifier	type
>11625	ParameterType	CursorType
>11626	ReturnType	void
>11627	CompoundStatement	 
>11628	SwitchStatement	switch ( type )
>11629	CompoundStatement	 
>11630	BreakStatement	 
>11631	ExpressionStatement	 
>11632	CallExpression	cursor -> setTexturePointer ( texCursor )
>11633	ArgumentList	texCursor
>11634	Argument	texCursor
>11635	Identifier	texCursor
>11636	Callee	cursor -> setTexturePointer
>11637	PtrMemberAccess	cursor -> setTexturePointer
>11638	Identifier	setTexturePointer
>11639	Identifier	cursor
>11640	Label	 
>11641	Identifier	default
>11642	BreakStatement	 
>11643	ExpressionStatement	 
>11644	CallExpression	cursor -> setTexturePointer ( texCursorSing )
>11645	ArgumentList	texCursorSing
>11646	Argument	texCursorSing
>11647	Identifier	texCursorSing
>11648	Callee	cursor -> setTexturePointer
>11649	PtrMemberAccess	cursor -> setTexturePointer
>11650	Identifier	setTexturePointer
>11651	Identifier	cursor
>11652	Label	 
>11653	Identifier	CURSOR_SING
>11654	BreakStatement	 
>11655	ExpressionStatement	 
>11656	CallExpression	cursor -> setTexturePointer ( texCursorSwim )
>11657	ArgumentList	texCursorSwim
>11658	Argument	texCursorSwim
>11659	Identifier	texCursorSwim
>11660	Callee	cursor -> setTexturePointer
>11661	PtrMemberAccess	cursor -> setTexturePointer
>11662	Identifier	setTexturePointer
>11663	Identifier	cursor
>11664	Label	 
>11665	Identifier	CURSOR_SWIM
>11666	BreakStatement	 
>11667	ExpressionStatement	 
>11668	CallExpression	cursor -> setTexturePointer ( texCursorBurst )
>11669	ArgumentList	texCursorBurst
>11670	Argument	texCursorBurst
>11671	Identifier	texCursorBurst
>11672	Callee	cursor -> setTexturePointer
>11673	PtrMemberAccess	cursor -> setTexturePointer
>11674	Identifier	setTexturePointer
>11675	Identifier	cursor
>11676	Label	 
>11677	Identifier	CURSOR_BURST
>11678	BreakStatement	 
>11679	ExpressionStatement	 
>11680	CallExpression	cursor -> setTexturePointer ( texCursorLook )
>11681	ArgumentList	texCursorLook
>11682	Argument	texCursorLook
>11683	Identifier	texCursorLook
>11684	Callee	cursor -> setTexturePointer
>11685	PtrMemberAccess	cursor -> setTexturePointer
>11686	Identifier	setTexturePointer
>11687	Identifier	cursor
>11688	Label	 
>11689	Identifier	CURSOR_LOOK
>11690	BreakStatement	 
>11691	ExpressionStatement	 
>11692	CallExpression	cursor -> setTexturePointer ( texCursor )
>11693	ArgumentList	texCursor
>11694	Argument	texCursor
>11695	Identifier	texCursor
>11696	Callee	cursor -> setTexturePointer
>11697	PtrMemberAccess	cursor -> setTexturePointer
>11698	Identifier	setTexturePointer
>11699	Identifier	cursor
>11700	Label	 
>11701	Identifier	CURSOR_NORMAL
>11702	Condition	 
>11703	Identifier	type
>11714	FunctionDef	DSQ 
>11715	ParameterList	 
>11716	ReturnType	void
>11717	CompoundStatement	 
>11721	FunctionDef	DSQ 
>11722	ParameterList	Vector pos , int type , Vector color , float ut
>11723	Parameter	 
>11724	Identifier	ut
>11725	ParameterType	float
>11726	Parameter	 
>11727	Identifier	color
>11728	ParameterType	Vector
>11729	Parameter	 
>11730	Identifier	type
>11731	ParameterType	int
>11732	Parameter	 
>11733	Identifier	pos
>11734	ParameterType	Vector
>11735	ReturnType	void
>11736	CompoundStatement	 
>11737	SwitchStatement	switch ( type )
>11738	CompoundStatement	 
>11739	BreakStatement	 
>11740	CompoundStatement	 
>11741	ExpressionStatement	 
>11742	CallExpression	getTopStateData ( ) -> addRenderObject ( q , LR_WORLDMAPHUD )
>11743	ArgumentList	q
>11744	Argument	LR_WORLDMAPHUD
>11745	Identifier	LR_WORLDMAPHUD
>11746	Argument	q
>11747	Identifier	q
>11748	Callee	getTopStateData ( ) -> addRenderObject
>11749	PtrMemberAccess	getTopStateData ( ) -> addRenderObject
>11750	Identifier	addRenderObject
>11751	CallExpression	getTopStateData ( )
>11752	ArgumentList	 
>11753	Callee	getTopStateData
>11754	Identifier	getTopStateData
>11755	ExpressionStatement	 
>11756	CallExpression	q -> setLife ( t )
>11757	ArgumentList	t
>11758	Argument	t
>11759	Identifier	t
>11760	Callee	q -> setLife
>11761	PtrMemberAccess	q -> setLife
>11762	Identifier	setLife
>11763	Identifier	q
>11764	ExpressionStatement	 
>11765	AssignmentExpr	q -> followCamera = 1
>11766	PrimaryExpression	1
>11767	PtrMemberAccess	q -> followCamera
>11768	Identifier	followCamera
>11769	Identifier	q
>11770	ExpressionStatement	 
>11771	AssignmentExpr	q -> position = pos
>11772	Identifier	pos
>11773	PtrMemberAccess	q -> position
>11774	Identifier	position
>11775	Identifier	q
>11776	ExpressionStatement	 
>11777	CallExpression	q -> alpha . startPath ( t )
>11778	ArgumentList	t
>11779	Argument	t
>11780	Identifier	t
>11781	Callee	q -> alpha . startPath
>11782	MemberAccess	q -> alpha . startPath
>11783	Identifier	startPath
>11784	PtrMemberAccess	q -> alpha
>11785	Identifier	alpha
>11786	Identifier	q
>11787	ExpressionStatement	 
>11788	CallExpression	q -> alpha . data -> path . addPathNode ( 0 , 1 )
>11789	ArgumentList	0
>11790	Argument	1
>11791	PrimaryExpression	1
>11792	Argument	0
>11793	PrimaryExpression	0
>11794	Callee	q -> alpha . data -> path . addPathNode
>11795	MemberAccess	q -> alpha . data -> path . addPathNode
>11796	Identifier	addPathNode
>11797	PtrMemberAccess	q -> alpha . data -> path
>11798	Identifier	path
>11799	MemberAccess	q -> alpha . data
>11800	Identifier	data
>11801	PtrMemberAccess	q -> alpha
>11802	Identifier	alpha
>11803	Identifier	q
>11804	ExpressionStatement	 
>11805	CallExpression	q -> alpha . data -> path . addPathNode ( 0.5 , 0.5 )
>11806	ArgumentList	0.5
>11807	Argument	0.5
>11808	PrimaryExpression	0.5
>11809	Argument	0.5
>11810	PrimaryExpression	0.5
>11811	Callee	q -> alpha . data -> path . addPathNode
>11812	MemberAccess	q -> alpha . data -> path . addPathNode
>11813	Identifier	addPathNode
>11814	PtrMemberAccess	q -> alpha . data -> path
>11815	Identifier	path
>11816	MemberAccess	q -> alpha . data
>11817	Identifier	data
>11818	PtrMemberAccess	q -> alpha
>11819	Identifier	alpha
>11820	Identifier	q
>11821	ExpressionStatement	 
>11822	CallExpression	q -> alpha . data -> path . addPathNode ( 0.5 , 0.1 )
>11823	ArgumentList	0.5
>11824	Argument	0.1
>11825	PrimaryExpression	0.1
>11826	Argument	0.5
>11827	PrimaryExpression	0.5
>11828	Callee	q -> alpha . data -> path . addPathNode
>11829	MemberAccess	q -> alpha . data -> path . addPathNode
>11830	Identifier	addPathNode
>11831	PtrMemberAccess	q -> alpha . data -> path
>11832	Identifier	path
>11833	MemberAccess	q -> alpha . data
>11834	Identifier	data
>11835	PtrMemberAccess	q -> alpha
>11836	Identifier	alpha
>11837	Identifier	q
>11838	ExpressionStatement	 
>11839	CallExpression	q -> alpha . data -> path . addPathNode ( 0 , 0 )
>11840	ArgumentList	0
>11841	Argument	0
>11842	PrimaryExpression	0
>11843	Argument	0
>11844	PrimaryExpression	0
>11845	Callee	q -> alpha . data -> path . addPathNode
>11846	MemberAccess	q -> alpha . data -> path . addPathNode
>11847	Identifier	addPathNode
>11848	PtrMemberAccess	q -> alpha . data -> path
>11849	Identifier	path
>11850	MemberAccess	q -> alpha . data
>11851	Identifier	data
>11852	PtrMemberAccess	q -> alpha
>11853	Identifier	alpha
>11854	Identifier	q
>11855	ExpressionStatement	 
>11856	CallExpression	q -> alpha . ensureData ( )
>11857	ArgumentList	 
>11858	Callee	q -> alpha . ensureData
>11859	MemberAccess	q -> alpha . ensureData
>11860	Identifier	ensureData
>11861	PtrMemberAccess	q -> alpha
>11862	Identifier	alpha
>11863	Identifier	q
>11864	ExpressionStatement	 
>11865	AssignmentExpr	q -> color = color
>11866	Identifier	color
>11867	PtrMemberAccess	q -> color
>11868	Identifier	color
>11869	Identifier	q
>11870	ExpressionStatement	 
>11871	CallExpression	q -> setBlendType ( RenderObject 
>11872	ArgumentList	RenderObject 
>11873	Argument	RenderObject 
>11874	Identifier	RenderObject 
>11875	Callee	q -> setBlendType
>11876	PtrMemberAccess	q -> setBlendType
>11877	Identifier	setBlendType
>11878	Identifier	q
>11879	ExpressionStatement	 
>11880	CallExpression	q -> scale . interpolateTo ( Vector ( 1 , 1 ) , t )
>11881	ArgumentList	Vector ( 1 , 1 )
>11882	Argument	t
>11883	Identifier	t
>11884	Argument	Vector ( 1 , 1 )
>11885	CallExpression	Vector ( 1 , 1 )
>11886	ArgumentList	1
>11887	Argument	1
>11888	PrimaryExpression	1
>11889	Argument	1
>11890	PrimaryExpression	1
>11891	Callee	Vector
>11892	Identifier	Vector
>11893	Callee	q -> scale . interpolateTo
>11894	MemberAccess	q -> scale . interpolateTo
>11895	Identifier	interpolateTo
>11896	PtrMemberAccess	q -> scale
>11897	Identifier	scale
>11898	Identifier	q
>11899	ExpressionStatement	 
>11900	AssignmentExpr	q -> scale = Vector ( 5 , 5 )
>11901	CallExpression	Vector ( 5 , 5 )
>11902	ArgumentList	5
>11903	Argument	5
>11904	PrimaryExpression	5
>11905	Argument	5
>11906	PrimaryExpression	5
>11907	Callee	Vector
>11908	Identifier	Vector
>11909	PtrMemberAccess	q -> scale
>11910	Identifier	scale
>11911	Identifier	q
>11912	ExpressionStatement	 
>11913	CallExpression	q -> setWidthHeight ( 100 , 100 )
>11914	ArgumentList	100
>11915	Argument	100
>11916	PrimaryExpression	100
>11917	Argument	100
>11918	PrimaryExpression	100
>11919	Callee	q -> setWidthHeight
>11920	PtrMemberAccess	q -> setWidthHeight
>11921	Identifier	setWidthHeight
>11922	Identifier	q
>11923	ExpressionStatement	 
>11924	CallExpression	q -> setTexture ( \"Particles/SoftRing\" )
>11925	ArgumentList	\"Particles/SoftRing\"
>11926	Argument	\"Particles/SoftRing\"
>11927	PrimaryExpression	\"Particles/SoftRing\"
>11928	Callee	q -> setTexture
>11929	PtrMemberAccess	q -> setTexture
>11930	Identifier	setTexture
>11931	Identifier	q
>11932	ExpressionStatement	 
>11933	Identifier	Quad
>11934	Statement	 
>11935	Statement	 
>11936	Statement	 
>11937	Statement	 
>11938	Statement	 
>11939	IfStatement	if ( ut != 0 )
>11940	ExpressionStatement	 
>11941	AssignmentExpr	t = ut
>11942	Identifier	ut
>11943	Identifier	t
>11944	Condition	 
>11945	EqualityExpression	ut != 0
>11946	PrimaryExpression	0
>11947	Identifier	ut
>11948	IdentifierDeclStatement	 
>11949	IdentifierDecl	t = 0.2
>11950	AssignmentExpr	t = 0.2
>11951	PrimaryExpression	0.2
>11952	Identifier	t
>11953	Identifier	t
>11954	IdentifierDeclType	float
>11955	Label	 
>11956	BreakStatement	 
>11957	CompoundStatement	 
>11958	ExpressionStatement	 
>11959	CallExpression	getTopStateData ( ) -> addRenderObject ( q , LR_WORLDMAPHUD )
>11960	ArgumentList	q
>11961	Argument	LR_WORLDMAPHUD
>11962	Identifier	LR_WORLDMAPHUD
>11963	Argument	q
>11964	Identifier	q
>11965	Callee	getTopStateData ( ) -> addRenderObject
>11966	PtrMemberAccess	getTopStateData ( ) -> addRenderObject
>11967	Identifier	addRenderObject
>11968	CallExpression	getTopStateData ( )
>11969	ArgumentList	 
>11970	Callee	getTopStateData
>11971	Identifier	getTopStateData
>11972	ExpressionStatement	 
>11973	CallExpression	q -> setLife ( t )
>11974	ArgumentList	t
>11975	Argument	t
>11976	Identifier	t
>11977	Callee	q -> setLife
>11978	PtrMemberAccess	q -> setLife
>11979	Identifier	setLife
>11980	Identifier	q
>11981	ExpressionStatement	 
>11982	AssignmentExpr	q -> followCamera = 1
>11983	PrimaryExpression	1
>11984	PtrMemberAccess	q -> followCamera
>11985	Identifier	followCamera
>11986	Identifier	q
>11987	ExpressionStatement	 
>11988	AssignmentExpr	q -> position = pos
>11989	Identifier	pos
>11990	PtrMemberAccess	q -> position
>11991	Identifier	position
>11992	Identifier	q
>11993	ExpressionStatement	 
>11994	CallExpression	q -> alpha . startPath ( t )
>11995	ArgumentList	t
>11996	Argument	t
>11997	Identifier	t
>11998	Callee	q -> alpha . startPath
>11999	MemberAccess	q -> alpha . startPath
>12000	Identifier	startPath
>12001	PtrMemberAccess	q -> alpha
>12002	Identifier	alpha
>12003	Identifier	q
>12004	ExpressionStatement	 
>12005	CallExpression	q -> alpha . data -> path . addPathNode ( 0 , 1 )
>12006	ArgumentList	0
>12007	Argument	1
>12008	PrimaryExpression	1
>12009	Argument	0
>12010	PrimaryExpression	0
>12011	Callee	q -> alpha . data -> path . addPathNode
>12012	MemberAccess	q -> alpha . data -> path . addPathNode
>12013	Identifier	addPathNode
>12014	PtrMemberAccess	q -> alpha . data -> path
>12015	Identifier	path
>12016	MemberAccess	q -> alpha . data
>12017	Identifier	data
>12018	PtrMemberAccess	q -> alpha
>12019	Identifier	alpha
>12020	Identifier	q
>12021	ExpressionStatement	 
>12022	CallExpression	q -> alpha . data -> path . addPathNode ( 0.5 , 0.5 )
>12023	ArgumentList	0.5
>12024	Argument	0.5
>12025	PrimaryExpression	0.5
>12026	Argument	0.5
>12027	PrimaryExpression	0.5
>12028	Callee	q -> alpha . data -> path . addPathNode
>12029	MemberAccess	q -> alpha . data -> path . addPathNode
>12030	Identifier	addPathNode
>12031	PtrMemberAccess	q -> alpha . data -> path
>12032	Identifier	path
>12033	MemberAccess	q -> alpha . data
>12034	Identifier	data
>12035	PtrMemberAccess	q -> alpha
>12036	Identifier	alpha
>12037	Identifier	q
>12038	ExpressionStatement	 
>12039	CallExpression	q -> alpha . data -> path . addPathNode ( 0.5 , 0.1 )
>12040	ArgumentList	0.5
>12041	Argument	0.1
>12042	PrimaryExpression	0.1
>12043	Argument	0.5
>12044	PrimaryExpression	0.5
>12045	Callee	q -> alpha . data -> path . addPathNode
>12046	MemberAccess	q -> alpha . data -> path . addPathNode
>12047	Identifier	addPathNode
>12048	PtrMemberAccess	q -> alpha . data -> path
>12049	Identifier	path
>12050	MemberAccess	q -> alpha . data
>12051	Identifier	data
>12052	PtrMemberAccess	q -> alpha
>12053	Identifier	alpha
>12054	Identifier	q
>12055	ExpressionStatement	 
>12056	CallExpression	q -> alpha . data -> path . addPathNode ( 0 , 0 )
>12057	ArgumentList	0
>12058	Argument	0
>12059	PrimaryExpression	0
>12060	Argument	0
>12061	PrimaryExpression	0
>12062	Callee	q -> alpha . data -> path . addPathNode
>12063	MemberAccess	q -> alpha . data -> path . addPathNode
>12064	Identifier	addPathNode
>12065	PtrMemberAccess	q -> alpha . data -> path
>12066	Identifier	path
>12067	MemberAccess	q -> alpha . data
>12068	Identifier	data
>12069	PtrMemberAccess	q -> alpha
>12070	Identifier	alpha
>12071	Identifier	q
>12072	ExpressionStatement	 
>12073	CallExpression	q -> alpha . ensureData ( )
>12074	ArgumentList	 
>12075	Callee	q -> alpha . ensureData
>12076	MemberAccess	q -> alpha . ensureData
>12077	Identifier	ensureData
>12078	PtrMemberAccess	q -> alpha
>12079	Identifier	alpha
>12080	Identifier	q
>12081	ExpressionStatement	 
>12082	CallExpression	q -> setBlendType ( RenderObject 
>12083	ArgumentList	RenderObject 
>12084	Argument	RenderObject 
>12085	Identifier	RenderObject 
>12086	Callee	q -> setBlendType
>12087	PtrMemberAccess	q -> setBlendType
>12088	Identifier	setBlendType
>12089	Identifier	q
>12090	ExpressionStatement	 
>12091	AssignmentExpr	q -> color = color
>12092	Identifier	color
>12093	PtrMemberAccess	q -> color
>12094	Identifier	color
>12095	Identifier	q
>12096	ExpressionStatement	 
>12097	CallExpression	q -> scale . interpolateTo ( Vector ( 5 , 5 ) , t )
>12098	ArgumentList	Vector ( 5 , 5 )
>12099	Argument	t
>12100	Identifier	t
>12101	Argument	Vector ( 5 , 5 )
>12102	CallExpression	Vector ( 5 , 5 )
>12103	ArgumentList	5
>12104	Argument	5
>12105	PrimaryExpression	5
>12106	Argument	5
>12107	PrimaryExpression	5
>12108	Callee	Vector
>12109	Identifier	Vector
>12110	Callee	q -> scale . interpolateTo
>12111	MemberAccess	q -> scale . interpolateTo
>12112	Identifier	interpolateTo
>12113	PtrMemberAccess	q -> scale
>12114	Identifier	scale
>12115	Identifier	q
>12116	ExpressionStatement	 
>12117	AssignmentExpr	q -> scale = Vector ( 1 , 1 )
>12118	CallExpression	Vector ( 1 , 1 )
>12119	ArgumentList	1
>12120	Argument	1
>12121	PrimaryExpression	1
>12122	Argument	1
>12123	PrimaryExpression	1
>12124	Callee	Vector
>12125	Identifier	Vector
>12126	PtrMemberAccess	q -> scale
>12127	Identifier	scale
>12128	Identifier	q
>12129	ExpressionStatement	 
>12130	CallExpression	q -> setWidthHeight ( 100 , 100 )
>12131	ArgumentList	100
>12132	Argument	100
>12133	PrimaryExpression	100
>12134	Argument	100
>12135	PrimaryExpression	100
>12136	Callee	q -> setWidthHeight
>12137	PtrMemberAccess	q -> setWidthHeight
>12138	Identifier	setWidthHeight
>12139	Identifier	q
>12140	ExpressionStatement	 
>12141	CallExpression	q -> setTexture ( \"Particles/SoftRing\" )
>12142	ArgumentList	\"Particles/SoftRing\"
>12143	Argument	\"Particles/SoftRing\"
>12144	PrimaryExpression	\"Particles/SoftRing\"
>12145	Callee	q -> setTexture
>12146	PtrMemberAccess	q -> setTexture
>12147	Identifier	setTexture
>12148	Identifier	q
>12149	ExpressionStatement	 
>12150	Identifier	Quad
>12151	Statement	 
>12152	Statement	 
>12153	Statement	 
>12154	Statement	 
>12155	Statement	 
>12156	IfStatement	if ( ut != 0 )
>12157	ExpressionStatement	 
>12158	AssignmentExpr	t = ut
>12159	Identifier	ut
>12160	Identifier	t
>12161	Condition	 
>12162	EqualityExpression	ut != 0
>12163	PrimaryExpression	0
>12164	Identifier	ut
>12165	IdentifierDeclStatement	 
>12166	IdentifierDecl	t = 0.5
>12167	AssignmentExpr	t = 0.5
>12168	PrimaryExpression	0.5
>12169	Identifier	t
>12170	Identifier	t
>12171	IdentifierDeclType	float
>12172	Label	 
>12173	Condition	 
>12174	Identifier	type
>12199	FunctionDef	DSQ 
>12200	ParameterList	const std 
>12201	Parameter	 
>12202	Identifier	name
>12203	ParameterType	const std 
>12204	ReturnType	Entity *
>12205	CompoundStatement	 
>12206	ReturnStatement	 
>12207	Identifier	e
>12208	CompoundStatement	 
>12209	ExpressionStatement	 
>12210	AssignmentExpr	e = 0
>12211	PrimaryExpression	0
>12212	Identifier	e
>12213	IfStatement	if ( e -> life == 1 && ( nocasecmp ( e -> name , name ) == 0 ) )
>12214	CompoundStatement	 
>12215	BreakStatement	 
>12216	Condition	 
>12217	AndExpression	e -> life == 1 && ( nocasecmp ( e -> name , name ) == 0 )
>12218	EqualityExpression	nocasecmp ( e -> name , name ) == 0
>12219	PrimaryExpression	0
>12220	CallExpression	nocasecmp ( e -> name , name )
>12221	ArgumentList	e -> name
>12222	Argument	name
>12223	Identifier	name
>12224	Argument	e -> name
>12225	PtrMemberAccess	e -> name
>12226	Identifier	name
>12227	Identifier	e
>12228	Callee	nocasecmp
>12229	Identifier	nocasecmp
>12230	EqualityExpression	e -> life == 1
>12231	PrimaryExpression	1
>12232	PtrMemberAccess	e -> life
>12233	Identifier	life
>12234	Identifier	e
>12235	ExpressionStatement	 
>12236	AssignmentExpr	e = ( * i )
>12237	UnaryOp	* i
>12238	Identifier	i
>12239	UnaryOperator	*
>12240	Identifier	e
>12241	Statement	 
>12242	Statement	 
>12243	Statement	 
>12244	Statement	 
>12245	IdentifierDeclStatement	 
>12246	IdentifierDecl	* e = 0
>12247	AssignmentExpr	* e = 0
>12248	PrimaryExpression	0
>12249	Identifier	e
>12250	Identifier	e
>12251	IdentifierDeclType	Entity *
>12264	FunctionDef	DSQ 
>12265	ParameterList	std 
>12266	Parameter	 
>12267	Identifier	name
>12268	ParameterType	std 
>12269	ReturnType	Entity *
>12270	CompoundStatement	 
>12271	ReturnStatement	 
>12272	Identifier	e
>12273	CompoundStatement	 
>12274	ExpressionStatement	 
>12275	AssignmentExpr	e = 0
>12276	PrimaryExpression	0
>12277	Identifier	e
>12278	IfStatement	if ( e -> life == 1 && check == name )
>12279	CompoundStatement	 
>12280	BreakStatement	 
>12281	Condition	 
>12282	AndExpression	e -> life == 1 && check == name
>12283	EqualityExpression	check == name
>12284	Identifier	name
>12285	Identifier	check
>12286	EqualityExpression	e -> life == 1
>12287	PrimaryExpression	1
>12288	PtrMemberAccess	e -> life
>12289	Identifier	life
>12290	Identifier	e
>12291	ExpressionStatement	 
>12292	CallExpression	stringToUpper ( check )
>12293	ArgumentList	check
>12294	Argument	check
>12295	Identifier	check
>12296	Callee	stringToUpper
>12297	Identifier	stringToUpper
>12298	IdentifierDeclStatement	 
>12299	IdentifierDecl	check = e -> name
>12300	AssignmentExpr	check = e -> name
>12301	PtrMemberAccess	e -> name
>12302	Identifier	name
>12303	Identifier	e
>12304	Identifier	check
>12305	Identifier	check
>12306	IdentifierDeclType	std 
>12307	ExpressionStatement	 
>12308	AssignmentExpr	e = ( * i )
>12309	UnaryOp	* i
>12310	Identifier	i
>12311	UnaryOperator	*
>12312	Identifier	e
>12313	Statement	 
>12314	Statement	 
>12315	Statement	 
>12316	Statement	 
>12317	IdentifierDeclStatement	 
>12318	IdentifierDecl	* e = 0
>12319	AssignmentExpr	* e = 0
>12320	PrimaryExpression	0
>12321	Identifier	e
>12322	Identifier	e
>12323	IdentifierDeclType	Entity *
>12324	ExpressionStatement	 
>12325	CallExpression	stringToUpper ( name )
>12326	ArgumentList	name
>12327	Argument	name
>12328	Identifier	name
>12329	Callee	stringToUpper
>12330	Identifier	stringToUpper
>12343	FunctionDef	DSQ 
>12344	ParameterList	 
>12345	ReturnType	void
>12346	CompoundStatement	 
>12347	IfStatement	if ( selectedSaveSlot != 0 )
>12348	ElseStatement	else
>12349	CompoundStatement	 
>12350	ExpressionStatement	 
>12351	CallExpression	clearSaveSlots ( true )
>12352	ArgumentList	true
>12353	Argument	true
>12354	Identifier	true
>12355	Callee	clearSaveSlots
>12356	Identifier	clearSaveSlots
>12357	CompoundStatement	 
>12358	ExpressionStatement	 
>12359	AssignmentExpr	dsq -> doScreenTrans = true
>12360	Identifier	true
>12361	PtrMemberAccess	dsq -> doScreenTrans
>12362	Identifier	doScreenTrans
>12363	Identifier	dsq
>12364	Condition	 
>12365	EqualityExpression	selectedSaveSlot != 0
>12366	PrimaryExpression	0
>12367	Identifier	selectedSaveSlot
>12368	ExpressionStatement	 
>12369	CallExpression	doSaveSlotMenu ( SSM_LOAD )
>12370	ArgumentList	SSM_LOAD
>12371	Argument	SSM_LOAD
>12372	Identifier	SSM_LOAD
>12373	Callee	doSaveSlotMenu
>12374	Identifier	doSaveSlotMenu
>12384	FunctionDef	DSQ 
>12385	ParameterList	const Vector & position
>12386	Parameter	 
>12387	Identifier	position
>12388	ParameterType	const Vector &
>12389	ReturnType	void
>12390	CompoundStatement	 
>12391	ExpressionStatement	 
>12392	CallExpression	dsq -> game -> avatar -> setv ( EV_LOOKAT , 1 )
>12393	ArgumentList	EV_LOOKAT
>12394	Argument	1
>12395	PrimaryExpression	1
>12396	Argument	EV_LOOKAT
>12397	Identifier	EV_LOOKAT
>12398	Callee	dsq -> game -> avatar -> setv
>12399	PtrMemberAccess	dsq -> game -> avatar -> setv
>12400	Identifier	setv
>12401	PtrMemberAccess	dsq -> game -> avatar
>12402	Identifier	avatar
>12403	PtrMemberAccess	dsq -> game
>12404	Identifier	game
>12405	Identifier	dsq
>12406	ExpressionStatement	 
>12407	CallExpression	core -> resetTimer ( )
>12408	ArgumentList	 
>12409	Callee	core -> resetTimer
>12410	PtrMemberAccess	core -> resetTimer
>12411	Identifier	resetTimer
>12412	Identifier	core
>12413	ExpressionStatement	 
>12414	CallExpression	dsq -> game -> togglePause ( 0 )
>12415	ArgumentList	0
>12416	Argument	0
>12417	PrimaryExpression	0
>12418	Callee	dsq -> game -> togglePause
>12419	PtrMemberAccess	dsq -> game -> togglePause
>12420	Identifier	togglePause
>12421	PtrMemberAccess	dsq -> game
>12422	Identifier	game
>12423	Identifier	dsq
>12424	ExpressionStatement	 
>12425	CallExpression	dsq -> doSaveSlotMenu ( SSM_SAVE , position )
>12426	ArgumentList	SSM_SAVE
>12427	Argument	position
>12428	Identifier	position
>12429	Argument	SSM_SAVE
>12430	Identifier	SSM_SAVE
>12431	Callee	dsq -> doSaveSlotMenu
>12432	PtrMemberAccess	dsq -> doSaveSlotMenu
>12433	Identifier	doSaveSlotMenu
>12434	Identifier	dsq
>12435	ExpressionStatement	 
>12436	CallExpression	dsq -> game -> togglePause ( 1 )
>12437	ArgumentList	1
>12438	Argument	1
>12439	PrimaryExpression	1
>12440	Callee	dsq -> game -> togglePause
>12441	PtrMemberAccess	dsq -> game -> togglePause
>12442	Identifier	togglePause
>12443	PtrMemberAccess	dsq -> game
>12444	Identifier	game
>12445	Identifier	dsq
>12446	ExpressionStatement	 
>12447	CallExpression	dsq -> game -> avatar -> revive ( )
>12448	ArgumentList	 
>12449	Callee	dsq -> game -> avatar -> revive
>12450	PtrMemberAccess	dsq -> game -> avatar -> revive
>12451	Identifier	revive
>12452	PtrMemberAccess	dsq -> game -> avatar
>12453	Identifier	avatar
>12454	PtrMemberAccess	dsq -> game
>12455	Identifier	game
>12456	Identifier	dsq
>12457	ExpressionStatement	 
>12458	CallExpression	dsq -> game -> avatar -> enableInput ( )
>12459	ArgumentList	 
>12460	Callee	dsq -> game -> avatar -> enableInput
>12461	PtrMemberAccess	dsq -> game -> avatar -> enableInput
>12462	Identifier	enableInput
>12463	PtrMemberAccess	dsq -> game -> avatar
>12464	Identifier	avatar
>12465	PtrMemberAccess	dsq -> game
>12466	Identifier	game
>12467	Identifier	dsq
>12468	ExpressionStatement	 
>12469	CallExpression	dsq -> main ( 2 )
>12470	ArgumentList	2
>12471	Argument	2
>12472	PrimaryExpression	2
>12473	Callee	dsq -> main
>12474	PtrMemberAccess	dsq -> main
>12475	Identifier	main
>12476	Identifier	dsq
>12477	ExpressionStatement	 
>12478	CallExpression	dsq -> game -> clearControlHint ( )
>12479	ArgumentList	 
>12480	Callee	dsq -> game -> clearControlHint
>12481	PtrMemberAccess	dsq -> game -> clearControlHint
>12482	Identifier	clearControlHint
>12483	PtrMemberAccess	dsq -> game
>12484	Identifier	game
>12485	Identifier	dsq
>12486	ExpressionStatement	 
>12487	CallExpression	dsq -> game -> avatar -> skeletalSprite . animate ( \"save\" , 0 , 3 )
>12488	ArgumentList	\"save\"
>12489	Argument	3
>12490	PrimaryExpression	3
>12491	Argument	0
>12492	PrimaryExpression	0
>12493	Argument	\"save\"
>12494	PrimaryExpression	\"save\"
>12495	Callee	dsq -> game -> avatar -> skeletalSprite . animate
>12496	MemberAccess	dsq -> game -> avatar -> skeletalSprite . animate
>12497	Identifier	animate
>12498	PtrMemberAccess	dsq -> game -> avatar -> skeletalSprite
>12499	Identifier	skeletalSprite
>12500	PtrMemberAccess	dsq -> game -> avatar
>12501	Identifier	avatar
>12502	PtrMemberAccess	dsq -> game
>12503	Identifier	game
>12504	Identifier	dsq
>12505	ExpressionStatement	 
>12506	CallExpression	dsq -> game -> avatar -> myZoom . interpolateTo ( Vector ( 1 , 1 ) , 0.5 )
>12507	ArgumentList	Vector ( 1 , 1 )
>12508	Argument	0.5
>12509	PrimaryExpression	0.5
>12510	Argument	Vector ( 1 , 1 )
>12511	CallExpression	Vector ( 1 , 1 )
>12512	ArgumentList	1
>12513	Argument	1
>12514	PrimaryExpression	1
>12515	Argument	1
>12516	PrimaryExpression	1
>12517	Callee	Vector
>12518	Identifier	Vector
>12519	Callee	dsq -> game -> avatar -> myZoom . interpolateTo
>12520	MemberAccess	dsq -> game -> avatar -> myZoom . interpolateTo
>12521	Identifier	interpolateTo
>12522	PtrMemberAccess	dsq -> game -> avatar -> myZoom
>12523	Identifier	myZoom
>12524	PtrMemberAccess	dsq -> game -> avatar
>12525	Identifier	avatar
>12526	PtrMemberAccess	dsq -> game
>12527	Identifier	game
>12528	Identifier	dsq
>12529	ExpressionStatement	 
>12530	CallExpression	dsq -> game -> avatar -> position . interpolateTo ( position , 1 , 0 , 0 , 1 )
>12531	ArgumentList	position
>12532	Argument	1
>12533	PrimaryExpression	1
>12534	Argument	0
>12535	PrimaryExpression	0
>12536	Argument	0
>12537	PrimaryExpression	0
>12538	Argument	1
>12539	PrimaryExpression	1
>12540	Argument	position
>12541	Identifier	position
>12542	Callee	dsq -> game -> avatar -> position . interpolateTo
>12543	MemberAccess	dsq -> game -> avatar -> position . interpolateTo
>12544	Identifier	interpolateTo
>12545	PtrMemberAccess	dsq -> game -> avatar -> position
>12546	Identifier	position
>12547	PtrMemberAccess	dsq -> game -> avatar
>12548	Identifier	avatar
>12549	PtrMemberAccess	dsq -> game
>12550	Identifier	game
>12551	Identifier	dsq
>12552	ExpressionStatement	 
>12553	CallExpression	dsq -> game -> avatar -> fhTo ( false )
>12554	ArgumentList	false
>12555	Argument	false
>12556	Identifier	false
>12557	Callee	dsq -> game -> avatar -> fhTo
>12558	PtrMemberAccess	dsq -> game -> avatar -> fhTo
>12559	Identifier	fhTo
>12560	PtrMemberAccess	dsq -> game -> avatar
>12561	Identifier	avatar
>12562	PtrMemberAccess	dsq -> game
>12563	Identifier	game
>12564	Identifier	dsq
>12565	ExpressionStatement	 
>12566	CallExpression	dsq -> game -> avatar -> disableInput ( )
>12567	ArgumentList	 
>12568	Callee	dsq -> game -> avatar -> disableInput
>12569	PtrMemberAccess	dsq -> game -> avatar -> disableInput
>12570	Identifier	disableInput
>12571	PtrMemberAccess	dsq -> game -> avatar
>12572	Identifier	avatar
>12573	PtrMemberAccess	dsq -> game
>12574	Identifier	game
>12575	Identifier	dsq
>12576	ExpressionStatement	 
>12577	AssignmentExpr	dsq -> game -> avatar -> vel = 0
>12578	PrimaryExpression	0
>12579	PtrMemberAccess	dsq -> game -> avatar -> vel
>12580	Identifier	vel
>12581	PtrMemberAccess	dsq -> game -> avatar
>12582	Identifier	avatar
>12583	PtrMemberAccess	dsq -> game
>12584	Identifier	game
>12585	Identifier	dsq
>12586	ExpressionStatement	 
>12587	CallExpression	dsq -> game -> avatar -> idle ( )
>12588	ArgumentList	 
>12589	Callee	dsq -> game -> avatar -> idle
>12590	PtrMemberAccess	dsq -> game -> avatar -> idle
>12591	Identifier	idle
>12592	PtrMemberAccess	dsq -> game -> avatar
>12593	Identifier	avatar
>12594	PtrMemberAccess	dsq -> game
>12595	Identifier	game
>12596	Identifier	dsq
>12597	ExpressionStatement	 
>12598	CallExpression	addRenderObject ( glow , LR_LIGHTING )
>12599	ArgumentList	glow
>12600	Argument	LR_LIGHTING
>12601	Identifier	LR_LIGHTING
>12602	Argument	glow
>12603	Identifier	glow
>12604	Callee	addRenderObject
>12605	Identifier	addRenderObject
>12606	CompoundStatement	 
>12607	ExpressionStatement	 
>12608	CallExpression	glow -> setDecayRate ( 1 )
>12609	ArgumentList	1
>12610	Argument	1
>12611	PrimaryExpression	1
>12612	Callee	glow -> setDecayRate
>12613	PtrMemberAccess	glow -> setDecayRate
>12614	Identifier	setDecayRate
>12615	Identifier	glow
>12616	ExpressionStatement	 
>12617	CallExpression	glow -> setLife ( 3 )
>12618	ArgumentList	3
>12619	Argument	3
>12620	PrimaryExpression	3
>12621	Callee	glow -> setLife
>12622	PtrMemberAccess	glow -> setLife
>12623	Identifier	setLife
>12624	Identifier	glow
>12625	ExpressionStatement	 
>12626	AssignmentExpr	glow -> scale = Vector ( 1 , 1 ) * 1.25f
>12627	MultiplicativeExpression	Vector ( 1 , 1 ) * 1.25f
>12628	PrimaryExpression	1.25f
>12629	CallExpression	Vector ( 1 , 1 )
>12630	ArgumentList	1
>12631	Argument	1
>12632	PrimaryExpression	1
>12633	Argument	1
>12634	PrimaryExpression	1
>12635	Callee	Vector
>12636	Identifier	Vector
>12637	PtrMemberAccess	glow -> scale
>12638	Identifier	scale
>12639	Identifier	glow
>12640	ExpressionStatement	 
>12641	AssignmentExpr	glow -> position = position
>12642	Identifier	position
>12643	PtrMemberAccess	glow -> position
>12644	Identifier	position
>12645	Identifier	glow
>12646	ExpressionStatement	 
>12647	CallExpression	glow -> setBlendType ( RenderObject 
>12648	ArgumentList	RenderObject 
>12649	Argument	RenderObject 
>12650	Identifier	RenderObject 
>12651	Callee	glow -> setBlendType
>12652	PtrMemberAccess	glow -> setBlendType
>12653	Identifier	setBlendType
>12654	Identifier	glow
>12655	ExpressionStatement	 
>12656	CallExpression	glow -> alpha . interpolateTo ( 0.5 , 1 , 1 , - 1 , 1 )
>12657	ArgumentList	0.5
>12658	Argument	1
>12659	PrimaryExpression	1
>12660	Argument	- 1
>12661	UnaryOp	- 1
>12662	PrimaryExpression	1
>12663	UnaryOperator	-
>12664	Argument	1
>12665	PrimaryExpression	1
>12666	Argument	1
>12667	PrimaryExpression	1
>12668	Argument	0.5
>12669	PrimaryExpression	0.5
>12670	Callee	glow -> alpha . interpolateTo
>12671	MemberAccess	glow -> alpha . interpolateTo
>12672	Identifier	interpolateTo
>12673	PtrMemberAccess	glow -> alpha
>12674	Identifier	alpha
>12675	Identifier	glow
>12676	ExpressionStatement	 
>12677	AssignmentExpr	glow -> alpha = 0
>12678	PrimaryExpression	0
>12679	PtrMemberAccess	glow -> alpha
>12680	Identifier	alpha
>12681	Identifier	glow
>12682	ExpressionStatement	 
>12683	CallExpression	glow -> setTexture ( \"save-point-glow\" )
>12684	ArgumentList	\"save-point-glow\"
>12685	Argument	\"save-point-glow\"
>12686	PrimaryExpression	\"save-point-glow\"
>12687	Callee	glow -> setTexture
>12688	PtrMemberAccess	glow -> setTexture
>12689	Identifier	setTexture
>12690	Identifier	glow
>12691	ExpressionStatement	 
>12692	Identifier	Quad
>12693	Statement	 
>12694	Statement	 
>12695	Statement	 
>12696	Statement	 
>12697	Statement	 
>12698	ExpressionStatement	 
>12699	CallExpression	core -> sound -> playSfx ( \"MemoryCrystalActivate\" )
>12700	ArgumentList	\"MemoryCrystalActivate\"
>12701	Argument	\"MemoryCrystalActivate\"
>12702	PrimaryExpression	\"MemoryCrystalActivate\"
>12703	Callee	core -> sound -> playSfx
>12704	PtrMemberAccess	core -> sound -> playSfx
>12705	Identifier	playSfx
>12706	PtrMemberAccess	core -> sound
>12707	Identifier	sound
>12708	Identifier	core
>12709	ExpressionStatement	 
>12710	CallExpression	dsq -> game -> avatar -> setv ( EV_LOOKAT , 0 )
>12711	ArgumentList	EV_LOOKAT
>12712	Argument	0
>12713	PrimaryExpression	0
>12714	Argument	EV_LOOKAT
>12715	Identifier	EV_LOOKAT
>12716	Callee	dsq -> game -> avatar -> setv
>12717	PtrMemberAccess	dsq -> game -> avatar -> setv
>12718	Identifier	setv
>12719	PtrMemberAccess	dsq -> game -> avatar
>12720	Identifier	avatar
>12721	PtrMemberAccess	dsq -> game
>12722	Identifier	game
>12723	Identifier	dsq
>12755	FunctionDef	DSQ 
>12756	ParameterList	 
>12757	ReturnType	void
>12758	CompoundStatement	 
>12759	IfStatement	if ( noEffectTimer <= 0 )
>12760	CompoundStatement	 
>12761	ExpressionStatement	 
>12762	AssignmentExpr	noEffectTimer = 0.2
>12763	PrimaryExpression	0.2
>12764	Identifier	noEffectTimer
>12765	ExpressionStatement	 
>12766	CallExpression	sound -> playSfx ( \"noeffect\" , 0.9 )
>12767	ArgumentList	\"noeffect\"
>12768	Argument	0.9
>12769	PrimaryExpression	0.9
>12770	Argument	\"noeffect\"
>12771	PrimaryExpression	\"noeffect\"
>12772	Callee	sound -> playSfx
>12773	PtrMemberAccess	sound -> playSfx
>12774	Identifier	playSfx
>12775	Identifier	sound
>12776	Condition	 
>12777	RelationalExpression	noEffectTimer <= 0
>12778	PrimaryExpression	0
>12779	Identifier	noEffectTimer
>12785	FunctionDef	DSQ 
>12786	ParameterList	float t
>12787	Parameter	 
>12788	Identifier	t
>12789	ParameterType	float
>12790	ReturnType	void
>12791	CompoundStatement	 
>12792	ExpressionStatement	 
>12793	CallExpression	menu . clear ( )
>12794	ArgumentList	 
>12795	Callee	menu . clear
>12796	MemberAccess	menu . clear
>12797	Identifier	clear
>12798	Identifier	menu
>12799	ForStatement	for ( int i = 0 ; i < menu . size ( ) ; i ++ )
>12800	CompoundStatement	 
>12801	ExpressionStatement	 
>12802	AssignmentExpr	menu [ i ] -> fadeAlphaWithLife = 1
>12803	PrimaryExpression	1
>12804	PtrMemberAccess	menu [ i ] -> fadeAlphaWithLife
>12805	Identifier	fadeAlphaWithLife
>12806	ArrayIndexing	menu [ i ]
>12807	Identifier	i
>12808	Identifier	menu
>12809	ExpressionStatement	 
>12810	CallExpression	menu [ i ] -> setDecayRate ( 1 / t )
>12811	ArgumentList	1 / t
>12812	Argument	1 / t
>12813	MultiplicativeExpression	1 / t
>12814	Identifier	t
>12815	PrimaryExpression	1
>12816	Callee	menu [ i ] -> setDecayRate
>12817	PtrMemberAccess	menu [ i ] -> setDecayRate
>12818	Identifier	setDecayRate
>12819	ArrayIndexing	menu [ i ]
>12820	Identifier	i
>12821	Identifier	menu
>12822	ExpressionStatement	 
>12823	CallExpression	menu [ i ] -> setLife ( 1 )
>12824	ArgumentList	1
>12825	Argument	1
>12826	PrimaryExpression	1
>12827	Callee	menu [ i ] -> setLife
>12828	PtrMemberAccess	menu [ i ] -> setLife
>12829	Identifier	setLife
>12830	ArrayIndexing	menu [ i ]
>12831	Identifier	i
>12832	Identifier	menu
>12833	IncDecOp	 
>12834	IncDec	++
>12835	Identifier	i
>12836	Condition	 
>12837	RelationalExpression	i < menu . size ( )
>12838	CallExpression	menu . size ( )
>12839	ArgumentList	 
>12840	Callee	menu . size
>12841	MemberAccess	menu . size
>12842	Identifier	size
>12843	Identifier	menu
>12844	Identifier	i
>12845	ForInit	 
>12846	IdentifierDeclStatement	int i = 0 ;
>12847	IdentifierDecl	i = 0
>12848	AssignmentExpr	i = 0
>12849	PrimaryExpression	0
>12850	Identifier	i
>12851	Identifier	i
>12852	IdentifierDeclType	int
>12865	FunctionDef	DSQ 
>12866	ParameterList	const std 
>12867	Parameter	 
>12868	Identifier	msg
>12869	ParameterType	const std 
>12870	ReturnType	void
>12871	CompoundStatement	 
>12872	ExpressionStatement	 
>12873	CallExpression	core -> getTopStateData ( ) -> addRenderObject ( b , LR_DEBUG_TEXT )
>12874	ArgumentList	b
>12875	Argument	LR_DEBUG_TEXT
>12876	Identifier	LR_DEBUG_TEXT
>12877	Argument	b
>12878	Identifier	b
>12879	Callee	core -> getTopStateData ( ) -> addRenderObject
>12880	PtrMemberAccess	core -> getTopStateData ( ) -> addRenderObject
>12881	Identifier	addRenderObject
>12882	CallExpression	core -> getTopStateData ( )
>12883	ArgumentList	 
>12884	Callee	core -> getTopStateData
>12885	PtrMemberAccess	core -> getTopStateData
>12886	Identifier	getTopStateData
>12887	Identifier	core
>12888	ExpressionStatement	 
>12889	CallExpression	b -> setDecayRate ( 1 )
>12890	ArgumentList	1
>12891	Argument	1
>12892	PrimaryExpression	1
>12893	Callee	b -> setDecayRate
>12894	PtrMemberAccess	b -> setDecayRate
>12895	Identifier	setDecayRate
>12896	Identifier	b
>12897	ExpressionStatement	 
>12898	CallExpression	b -> setLife ( 2 )
>12899	ArgumentList	2
>12900	Argument	2
>12901	PrimaryExpression	2
>12902	Callee	b -> setLife
>12903	PtrMemberAccess	b -> setLife
>12904	Identifier	setLife
>12905	Identifier	b
>12906	ExpressionStatement	 
>12907	AssignmentExpr	b -> followCamera = 1
>12908	PrimaryExpression	1
>12909	PtrMemberAccess	b -> followCamera
>12910	Identifier	followCamera
>12911	Identifier	b
>12912	ExpressionStatement	 
>12913	CallExpression	b -> alpha . interpolateTo ( 1 , 0.75 , 1 , 1 )
>12914	ArgumentList	1
>12915	Argument	1
>12916	PrimaryExpression	1
>12917	Argument	1
>12918	PrimaryExpression	1
>12919	Argument	0.75
>12920	PrimaryExpression	0.75
>12921	Argument	1
>12922	PrimaryExpression	1
>12923	Callee	b -> alpha . interpolateTo
>12924	MemberAccess	b -> alpha . interpolateTo
>12925	Identifier	interpolateTo
>12926	PtrMemberAccess	b -> alpha
>12927	Identifier	alpha
>12928	Identifier	b
>12929	ExpressionStatement	 
>12930	AssignmentExpr	b -> alpha = 0
>12931	PrimaryExpression	0
>12932	PtrMemberAccess	b -> alpha
>12933	Identifier	alpha
>12934	Identifier	b
>12935	ExpressionStatement	 
>12936	CallExpression	b -> setText ( msg )
>12937	ArgumentList	msg
>12938	Argument	msg
>12939	Identifier	msg
>12940	Callee	b -> setText
>12941	PtrMemberAccess	b -> setText
>12942	Identifier	setText
>12943	Identifier	b
>12944	ExpressionStatement	 
>12945	CallExpression	b -> setFontSize ( 10 )
>12946	ArgumentList	10
>12947	Argument	10
>12948	PrimaryExpression	10
>12949	Callee	b -> setFontSize
>12950	PtrMemberAccess	b -> setFontSize
>12951	Identifier	setFontSize
>12952	Identifier	b
>12953	ExpressionStatement	 
>12954	AssignmentExpr	b -> position = Vector ( 16 , 300 )
>12955	CallExpression	Vector ( 16 , 300 )
>12956	ArgumentList	16
>12957	Argument	300
>12958	PrimaryExpression	300
>12959	Argument	16
>12960	PrimaryExpression	16
>12961	Callee	Vector
>12962	Identifier	Vector
>12963	PtrMemberAccess	b -> position
>12964	Identifier	position
>12965	Identifier	b
>12966	IdentifierDeclStatement	 
>12967	IdentifierDecl	* b = new DebugFont ( )
>12968	AssignmentExpr	* b = new DebugFont ( )
>12969	UnaryExpression	new DebugFont ( )
>12970	Identifier	b
>12971	Identifier	b
>12972	IdentifierDeclType	DebugFont *
>12973	ExpressionStatement	 
>12974	CallExpression	debugLog ( msg )
>12975	ArgumentList	msg
>12976	Argument	msg
>12977	Identifier	msg
>12978	Callee	debugLog
>12979	Identifier	debugLog
>12994	FunctionDef	DSQ 
>12995	ParameterList	 
>12996	ReturnType	void
>12997	CompoundStatement	 
>12998	ExpressionStatement	 
>12999	CallExpression	onPickedSaveSlot ( 0 )
>13000	ArgumentList	0
>13001	Argument	0
>13002	PrimaryExpression	0
>13003	Callee	onPickedSaveSlot
>13004	Identifier	onPickedSaveSlot
>13008	FunctionDef	DSQ 
>13009	ParameterList	AquariaSaveSlot * slot
>13010	Parameter	 
>13011	Identifier	slot
>13012	ParameterType	AquariaSaveSlot *
>13013	ReturnType	bool
>13014	CompoundStatement	 
>13015	ReturnStatement	 
>13016	Identifier	false
>13017	ForStatement	for ( int i = 0 ; i < saveSlots . size ( ) ; i ++ )
>13018	CompoundStatement	 
>13019	ExpressionStatement	 
>13020	AssignmentExpr	saveSlots [ i ] -> mbDown = false
>13021	Identifier	false
>13022	PtrMemberAccess	saveSlots [ i ] -> mbDown
>13023	Identifier	mbDown
>13024	ArrayIndexing	saveSlots [ i ]
>13025	Identifier	i
>13026	Identifier	saveSlots
>13027	IncDecOp	 
>13028	IncDec	++
>13029	Identifier	i
>13030	Condition	 
>13031	RelationalExpression	i < saveSlots . size ( )
>13032	CallExpression	saveSlots . size ( )
>13033	ArgumentList	 
>13034	Callee	saveSlots . size
>13035	MemberAccess	saveSlots . size
>13036	Identifier	size
>13037	Identifier	saveSlots
>13038	Identifier	i
>13039	ForInit	 
>13040	IdentifierDeclStatement	int i = 0 ;
>13041	IdentifierDecl	i = 0
>13042	AssignmentExpr	i = 0
>13043	PrimaryExpression	0
>13044	Identifier	i
>13045	Identifier	i
>13046	IdentifierDeclType	int
>13047	IfStatement	if ( slot == 0 )
>13048	ElseStatement	else
>13049	IfStatement	if ( ( saveSlotMode == SSM_LOAD && ! slot -> isEmpty ( ) ) || saveSlotMode == SSM_SAVE )
>13050	CompoundStatement	 
>13051	IfStatement	if ( doit )
>13052	ElseStatement	else
>13053	CompoundStatement	 
>13054	ExpressionStatement	 
>13055	CallExpression	slot -> setFocus ( true )
>13056	ArgumentList	true
>13057	Argument	true
>13058	Identifier	true
>13059	Callee	slot -> setFocus
>13060	PtrMemberAccess	slot -> setFocus
>13061	Identifier	setFocus
>13062	Identifier	slot
>13063	CompoundStatement	 
>13064	ReturnStatement	 
>13065	Identifier	true
>13066	ExpressionStatement	 
>13067	CallExpression	quitNestedMain ( )
>13068	ArgumentList	 
>13069	Callee	quitNestedMain
>13070	Identifier	quitNestedMain
>13071	ExpressionStatement	 
>13072	AssignmentExpr	selectedSaveSlot = slot
>13073	Identifier	slot
>13074	Identifier	selectedSaveSlot
>13075	Condition	 
>13076	Identifier	doit
>13077	IfStatement	if ( saveSlotMode == SSM_SAVE && ! slot -> isEmpty ( ) )
>13078	ElseStatement	else
>13079	CompoundStatement	 
>13080	ExpressionStatement	 
>13081	AssignmentExpr	doit = true
>13082	Identifier	true
>13083	Identifier	doit
>13084	CompoundStatement	 
>13085	IfStatement	if ( confirm ( \"\" , \"save\" ) )
>13086	ExpressionStatement	 
>13087	AssignmentExpr	doit = true
>13088	Identifier	true
>13089	Identifier	doit
>13090	Condition	 
>13091	CallExpression	confirm ( \"\" , \"save\" )
>13092	ArgumentList	\"\"
>13093	Argument	\"save\"
>13094	PrimaryExpression	\"save\"
>13095	Argument	\"\"
>13096	PrimaryExpression	\"\"
>13097	Callee	confirm
>13098	Identifier	confirm
>13099	ExpressionStatement	 
>13100	AssignmentExpr	selectedSaveSlot = 0
>13101	PrimaryExpression	0
>13102	Identifier	selectedSaveSlot
>13103	Condition	 
>13104	AndExpression	saveSlotMode == SSM_SAVE && ! slot -> isEmpty ( )
>13105	UnaryOp	! slot -> isEmpty ( )
>13106	CallExpression	slot -> isEmpty ( )
>13107	ArgumentList	 
>13108	Callee	slot -> isEmpty
>13109	PtrMemberAccess	slot -> isEmpty
>13110	Identifier	isEmpty
>13111	Identifier	slot
>13112	UnaryOperator	!
>13113	EqualityExpression	saveSlotMode == SSM_SAVE
>13114	Identifier	SSM_SAVE
>13115	Identifier	saveSlotMode
>13116	IdentifierDeclStatement	 
>13117	IdentifierDecl	doit = false
>13118	AssignmentExpr	doit = false
>13119	Identifier	false
>13120	Identifier	false
>13121	Identifier	doit
>13122	IdentifierDeclType	bool
>13123	Condition	 
>13124	OrExpression	( saveSlotMode == SSM_LOAD && ! slot -> isEmpty ( ) ) || saveSlotMode == SSM_SAVE
>13125	EqualityExpression	saveSlotMode == SSM_SAVE
>13126	Identifier	SSM_SAVE
>13127	Identifier	saveSlotMode
>13128	AndExpression	saveSlotMode == SSM_LOAD && ! slot -> isEmpty ( )
>13129	UnaryOp	! slot -> isEmpty ( )
>13130	CallExpression	slot -> isEmpty ( )
>13131	ArgumentList	 
>13132	Callee	slot -> isEmpty
>13133	PtrMemberAccess	slot -> isEmpty
>13134	Identifier	isEmpty
>13135	Identifier	slot
>13136	UnaryOperator	!
>13137	EqualityExpression	saveSlotMode == SSM_LOAD
>13138	Identifier	SSM_LOAD
>13139	Identifier	saveSlotMode
>13140	CompoundStatement	 
>13141	ReturnStatement	 
>13142	Identifier	true
>13143	ExpressionStatement	 
>13144	CallExpression	quitNestedMain ( )
>13145	ArgumentList	 
>13146	Callee	quitNestedMain
>13147	Identifier	quitNestedMain
>13148	ExpressionStatement	 
>13149	AssignmentExpr	selectedSaveSlot = 0
>13150	PrimaryExpression	0
>13151	Identifier	selectedSaveSlot
>13152	Condition	 
>13153	EqualityExpression	slot == 0
>13154	PrimaryExpression	0
>13155	Identifier	slot
>13178	FunctionDef	DSQ 
>13179	ParameterList	NagType type
>13180	Parameter	 
>13181	Identifier	type
>13182	ParameterType	NagType
>13183	ReturnType	void
>13184	CompoundStatement	 
>13185	ExpressionStatement	 
>13186	CallExpression	core -> enqueueJumpState ( \"nag\" )
>13187	ArgumentList	\"nag\"
>13188	Argument	\"nag\"
>13189	PrimaryExpression	\"nag\"
>13190	Callee	core -> enqueueJumpState
>13191	PtrMemberAccess	core -> enqueueJumpState
>13192	Identifier	enqueueJumpState
>13193	Identifier	core
>13194	ExpressionStatement	 
>13195	AssignmentExpr	nagType = type
>13196	Identifier	type
>13197	Identifier	nagType
>13204	FunctionDef	DSQ 
>13205	ParameterList	 
>13206	ReturnType	void
>13207	CompoundStatement	 
>13208	ExpressionStatement	 
>13209	CallExpression	resetTimer ( )
>13210	ArgumentList	 
>13211	Callee	resetTimer
>13212	Identifier	resetTimer
>13213	ExpressionStatement	 
>13214	AssignmentExpr	modIsSelected = false
>13215	Identifier	false
>13216	Identifier	modIsSelected
>13217	ExpressionStatement	 
>13218	AssignmentExpr	inModSelector = false
>13219	Identifier	false
>13220	Identifier	inModSelector
>13221	IfStatement	if ( modIsSelected )
>13222	CompoundStatement	 
>13223	ExpressionStatement	 
>13224	CallExpression	nag ( NAG_TOTITLE )
>13225	ArgumentList	NAG_TOTITLE
>13226	Argument	NAG_TOTITLE
>13227	Identifier	NAG_TOTITLE
>13228	Callee	nag
>13229	Identifier	nag
>13230	Condition	 
>13231	Identifier	modIsSelected
>13232	ExpressionStatement	 
>13233	CallExpression	clearModSelector ( )
>13234	ArgumentList	 
>13235	Callee	clearModSelector
>13236	Identifier	clearModSelector
>13237	ExpressionStatement	 
>13238	CallExpression	main ( - 1 )
>13239	ArgumentList	- 1
>13240	Argument	- 1
>13241	UnaryOp	- 1
>13242	PrimaryExpression	1
>13243	UnaryOperator	-
>13244	Callee	main
>13245	Identifier	main
>13246	ExpressionStatement	 
>13247	AssignmentExpr	inModSelector = true
>13248	Identifier	true
>13249	Identifier	inModSelector
>13250	ExpressionStatement	 
>13251	CallExpression	resetTimer ( )
>13252	ArgumentList	 
>13253	Callee	resetTimer
>13254	Identifier	resetTimer
>13255	ExpressionStatement	 
>13256	CallExpression	createModSelector ( )
>13257	ArgumentList	 
>13258	Callee	createModSelector
>13259	Identifier	createModSelector
>13260	ExpressionStatement	 
>13261	CallExpression	dsq -> loadMods ( )
>13262	ArgumentList	 
>13263	Callee	dsq -> loadMods
>13264	PtrMemberAccess	dsq -> loadMods
>13265	Identifier	loadMods
>13266	Identifier	dsq
>13267	ExpressionStatement	 
>13268	AssignmentExpr	modIsSelected = false
>13269	Identifier	false
>13270	Identifier	modIsSelected
>13280	FunctionDef	DSQ 
>13281	ParameterList	 
>13282	ReturnType	void
>13283	CompoundStatement	 
>13284	ExpressionStatement	 
>13285	CallExpression	addRenderObject ( modSelectorScr , LR_MENU )
>13286	ArgumentList	modSelectorScr
>13287	Argument	LR_MENU
>13288	Identifier	LR_MENU
>13289	Argument	modSelectorScr
>13290	Identifier	modSelectorScr
>13291	Callee	addRenderObject
>13292	Identifier	addRenderObject
>13293	ExpressionStatement	 
>13294	CallExpression	modSelectorScr -> init ( )
>13295	ArgumentList	 
>13296	Callee	modSelectorScr -> init
>13297	PtrMemberAccess	modSelectorScr -> init
>13298	Identifier	init
>13299	Identifier	modSelectorScr
>13300	ExpressionStatement	 
>13301	AssignmentExpr	modSelectorScr -> autoHeight = AUTO_VIRTUALHEIGHT
>13302	Identifier	AUTO_VIRTUALHEIGHT
>13303	PtrMemberAccess	modSelectorScr -> autoHeight
>13304	Identifier	autoHeight
>13305	Identifier	modSelectorScr
>13306	ExpressionStatement	 
>13307	AssignmentExpr	modSelectorScr -> autoWidth = AUTO_VIRTUALWIDTH
>13308	Identifier	AUTO_VIRTUALWIDTH
>13309	PtrMemberAccess	modSelectorScr -> autoWidth
>13310	Identifier	autoWidth
>13311	Identifier	modSelectorScr
>13312	ExpressionStatement	 
>13313	CallExpression	modSelectorScr -> setHeight ( getVirtualHeight ( ) )
>13314	ArgumentList	getVirtualHeight ( )
>13315	Argument	getVirtualHeight ( )
>13316	CallExpression	getVirtualHeight ( )
>13317	ArgumentList	 
>13318	Callee	getVirtualHeight
>13319	Identifier	getVirtualHeight
>13320	Callee	modSelectorScr -> setHeight
>13321	PtrMemberAccess	modSelectorScr -> setHeight
>13322	Identifier	setHeight
>13323	Identifier	modSelectorScr
>13324	ExpressionStatement	 
>13325	CallExpression	modSelectorScr -> setWidth ( getVirtualWidth ( ) )
>13326	ArgumentList	getVirtualWidth ( )
>13327	Argument	getVirtualWidth ( )
>13328	CallExpression	getVirtualWidth ( )
>13329	ArgumentList	 
>13330	Callee	getVirtualWidth
>13331	Identifier	getVirtualWidth
>13332	Callee	modSelectorScr -> setWidth
>13333	PtrMemberAccess	modSelectorScr -> setWidth
>13334	Identifier	setWidth
>13335	Identifier	modSelectorScr
>13336	ExpressionStatement	 
>13337	AssignmentExpr	modSelectorScr -> position = Vector ( 400 , 300 )
>13338	CallExpression	Vector ( 400 , 300 )
>13339	ArgumentList	400
>13340	Argument	300
>13341	PrimaryExpression	300
>13342	Argument	400
>13343	PrimaryExpression	400
>13344	Callee	Vector
>13345	Identifier	Vector
>13346	PtrMemberAccess	modSelectorScr -> position
>13347	Identifier	position
>13348	Identifier	modSelectorScr
>13349	ExpressionStatement	 
>13350	AssignmentExpr	modSelectorScr = new ModSelectorScreen ( )
>13351	UnaryExpression	new ModSelectorScreen ( )
>13352	Identifier	modSelectorScr
>13353	ExpressionStatement	 
>13354	CallExpression	addRenderObject ( blackout , LR_MENU )
>13355	ArgumentList	blackout
>13356	Argument	LR_MENU
>13357	Identifier	LR_MENU
>13358	Argument	blackout
>13359	Identifier	blackout
>13360	Callee	addRenderObject
>13361	Identifier	addRenderObject
>13362	ExpressionStatement	 
>13363	CallExpression	blackout -> alpha . interpolateTo ( 1 , 0.2 )
>13364	ArgumentList	1
>13365	Argument	0.2
>13366	PrimaryExpression	0.2
>13367	Argument	1
>13368	PrimaryExpression	1
>13369	Callee	blackout -> alpha . interpolateTo
>13370	MemberAccess	blackout -> alpha . interpolateTo
>13371	Identifier	interpolateTo
>13372	PtrMemberAccess	blackout -> alpha
>13373	Identifier	alpha
>13374	Identifier	blackout
>13375	ExpressionStatement	 
>13376	AssignmentExpr	blackout -> alpha = 0
>13377	PrimaryExpression	0
>13378	PtrMemberAccess	blackout -> alpha
>13379	Identifier	alpha
>13380	Identifier	blackout
>13381	ExpressionStatement	 
>13382	AssignmentExpr	blackout -> alphaMod = 0.75
>13383	PrimaryExpression	0.75
>13384	PtrMemberAccess	blackout -> alphaMod
>13385	Identifier	alphaMod
>13386	Identifier	blackout
>13387	ExpressionStatement	 
>13388	AssignmentExpr	blackout -> position = Vector ( 400 , 300 )
>13389	CallExpression	Vector ( 400 , 300 )
>13390	ArgumentList	400
>13391	Argument	300
>13392	PrimaryExpression	300
>13393	Argument	400
>13394	PrimaryExpression	400
>13395	Callee	Vector
>13396	Identifier	Vector
>13397	PtrMemberAccess	blackout -> position
>13398	Identifier	position
>13399	Identifier	blackout
>13400	ExpressionStatement	 
>13401	AssignmentExpr	blackout -> followCamera = 1
>13402	PrimaryExpression	1
>13403	PtrMemberAccess	blackout -> followCamera
>13404	Identifier	followCamera
>13405	Identifier	blackout
>13406	ExpressionStatement	 
>13407	AssignmentExpr	blackout -> autoHeight = AUTO_VIRTUALHEIGHT
>13408	Identifier	AUTO_VIRTUALHEIGHT
>13409	PtrMemberAccess	blackout -> autoHeight
>13410	Identifier	autoHeight
>13411	Identifier	blackout
>13412	ExpressionStatement	 
>13413	AssignmentExpr	blackout -> autoWidth = AUTO_VIRTUALWIDTH
>13414	Identifier	AUTO_VIRTUALWIDTH
>13415	PtrMemberAccess	blackout -> autoWidth
>13416	Identifier	autoWidth
>13417	Identifier	blackout
>13418	ExpressionStatement	 
>13419	AssignmentExpr	blackout -> color = 0
>13420	PrimaryExpression	0
>13421	PtrMemberAccess	blackout -> color
>13422	Identifier	color
>13423	Identifier	blackout
>13424	ExpressionStatement	 
>13425	Identifier	Quad
>13426	Statement	 
>13427	Statement	 
>13428	Statement	 
>13452	FunctionDef	DSQ 
>13453	ParameterList	const std 
>13454	Parameter	 
>13455	Identifier	name
>13456	ParameterType	const std 
>13457	ReturnType	bool
>13458	CompoundStatement	 
>13459	ReturnStatement	 
>13460	Identifier	false
>13461	ForStatement	for ( int i = 0 ; i < modEntries . size ( ) ; ++ i )
>13462	CompoundStatement	 
>13463	IfStatement	if ( nlower == elower )
>13464	ReturnStatement	 
>13465	Identifier	true
>13466	Condition	 
>13467	EqualityExpression	nlower == elower
>13468	Identifier	elower
>13469	Identifier	nlower
>13470	ExpressionStatement	 
>13471	CallExpression	stringToLower ( elower )
>13472	ArgumentList	elower
>13473	Argument	elower
>13474	Identifier	elower
>13475	Callee	stringToLower
>13476	Identifier	stringToLower
>13477	IdentifierDeclStatement	 
>13478	IdentifierDecl	elower = modEntries [ i ] . path
>13479	AssignmentExpr	elower = modEntries [ i ] . path
>13480	MemberAccess	modEntries [ i ] . path
>13481	Identifier	path
>13482	ArrayIndexing	modEntries [ i ]
>13483	Identifier	i
>13484	Identifier	modEntries
>13485	Identifier	elower
>13486	Identifier	elower
>13487	IdentifierDeclType	std 
>13488	UnaryExpression	 
>13489	Identifier	i
>13490	IncDec	++
>13491	Condition	 
>13492	RelationalExpression	i < modEntries . size ( )
>13493	CallExpression	modEntries . size ( )
>13494	ArgumentList	 
>13495	Callee	modEntries . size
>13496	MemberAccess	modEntries . size
>13497	Identifier	size
>13498	Identifier	modEntries
>13499	Identifier	i
>13500	ForInit	 
>13501	IdentifierDeclStatement	int i = 0 ;
>13502	IdentifierDecl	i = 0
>13503	AssignmentExpr	i = 0
>13504	PrimaryExpression	0
>13505	Identifier	i
>13506	Identifier	i
>13507	IdentifierDeclType	int
>13508	ExpressionStatement	 
>13509	CallExpression	stringToLower ( nlower )
>13510	ArgumentList	nlower
>13511	Argument	nlower
>13512	Identifier	nlower
>13513	Callee	stringToLower
>13514	Identifier	stringToLower
>13515	IdentifierDeclStatement	 
>13516	IdentifierDecl	nlower = name
>13517	AssignmentExpr	nlower = name
>13518	Identifier	name
>13519	Identifier	name
>13520	Identifier	nlower
>13521	IdentifierDeclType	std 
>13536	FunctionDef	DSQ 
>13537	ParameterList	const std 
>13538	Parameter	 
>13539	Identifier	pkg
>13540	ParameterType	const std 
>13541	ReturnType	bool
>13542	CompoundStatement	 
>13543	ReturnStatement	 
>13544	Identifier	true
>13545	ExpressionStatement	 
>13546	CallExpression	debugLog ( \"Package
>13547	ArgumentList	\"Package
>13548	Argument	\"Package
>13549	AdditiveExpression	\"Package
>13550	AdditiveExpression	pkg + \" as archive in _mods\"
>13551	PrimaryExpression	\" as archive in _mods\"
>13552	Identifier	pkg
>13553	PrimaryExpression	\"Package
>13554	Callee	debugLog
>13555	Identifier	debugLog
>13556	ExpressionStatement	 
>13557	CallExpression	vfs . Mount ( pkg . c_str ( ) , mod . getBaseModPath ( ) . c_str ( ) )
>13558	ArgumentList	pkg . c_str ( )
>13559	Argument	mod . getBaseModPath ( ) . c_str ( )
>13560	CallExpression	mod . getBaseModPath ( ) . c_str ( )
>13561	ArgumentList	 
>13562	Callee	mod . getBaseModPath ( ) . c_str
>13563	MemberAccess	mod . getBaseModPath ( ) . c_str
>13564	Identifier	c_str
>13565	CallExpression	mod . getBaseModPath ( )
>13566	ArgumentList	 
>13567	Callee	mod . getBaseModPath
>13568	MemberAccess	mod . getBaseModPath
>13569	Identifier	getBaseModPath
>13570	Identifier	mod
>13571	Argument	pkg . c_str ( )
>13572	CallExpression	pkg . c_str ( )
>13573	ArgumentList	 
>13574	Callee	pkg . c_str
>13575	MemberAccess	pkg . c_str
>13576	Identifier	c_str
>13577	Identifier	pkg
>13578	Callee	vfs . Mount
>13579	MemberAccess	vfs . Mount
>13580	Identifier	Mount
>13581	Identifier	vfs
>13582	IfStatement	if ( ! vd )
>13583	CompoundStatement	 
>13584	IfStatement	if ( ! vd )
>13585	CompoundStatement	 
>13586	ReturnStatement	 
>13587	Identifier	false
>13588	ExpressionStatement	 
>13589	CallExpression	debugLog ( \"Package
>13590	ArgumentList	\"Package
>13591	Argument	\"Package
>13592	AdditiveExpression	\"Package
>13593	Identifier	pkg
>13594	PrimaryExpression	\"Package
>13595	Callee	debugLog
>13596	Identifier	debugLog
>13597	Condition	 
>13598	UnaryOp	! vd
>13599	Identifier	vd
>13600	UnaryOperator	!
>13601	ExpressionStatement	 
>13602	AssignmentExpr	vd = vfs . AddArchive ( pkg . c_str ( ) )
>13603	CallExpression	vfs . AddArchive ( pkg . c_str ( ) )
>13604	ArgumentList	pkg . c_str ( )
>13605	Argument	pkg . c_str ( )
>13606	CallExpression	pkg . c_str ( )
>13607	ArgumentList	 
>13608	Callee	pkg . c_str
>13609	MemberAccess	pkg . c_str
>13610	Identifier	c_str
>13611	Identifier	pkg
>13612	Callee	vfs . AddArchive
>13613	MemberAccess	vfs . AddArchive
>13614	Identifier	AddArchive
>13615	Identifier	vfs
>13616	Identifier	vd
>13617	Condition	 
>13618	UnaryOp	! vd
>13619	Identifier	vd
>13620	UnaryOperator	!
>13621	IdentifierDeclStatement	 
>13622	IdentifierDecl	* vd = vfs . GetDir ( pkg . c_str ( ) )
>13623	AssignmentExpr	* vd = vfs . GetDir ( pkg . c_str ( ) )
>13624	CallExpression	vfs . GetDir ( pkg . c_str ( ) )
>13625	ArgumentList	pkg . c_str ( )
>13626	Argument	pkg . c_str ( )
>13627	CallExpression	pkg . c_str ( )
>13628	ArgumentList	 
>13629	Callee	pkg . c_str
>13630	MemberAccess	pkg . c_str
>13631	Identifier	c_str
>13632	Identifier	pkg
>13633	Callee	vfs . GetDir
>13634	MemberAccess	vfs . GetDir
>13635	Identifier	GetDir
>13636	Identifier	vfs
>13637	Identifier	vd
>13638	Identifier	vd
>13639	IdentifierDeclType	ttvfs 
>13654	FunctionDef	DSQ 
>13655	ParameterList	 
>13656	ReturnType	void
>13657	CompoundStatement	 
>13658	IfStatement	if ( vfs . FillDirView ( mod . getBaseModPath ( ) . c_str ( ) , view ) )
>13659	ExpressionStatement	 
>13660	CallExpression	view . forEachDir ( _CloseSubdirCallback )
>13661	ArgumentList	_CloseSubdirCallback
>13662	Argument	_CloseSubdirCallback
>13663	Identifier	_CloseSubdirCallback
>13664	Callee	view . forEachDir
>13665	MemberAccess	view . forEachDir
>13666	Identifier	forEachDir
>13667	Identifier	view
>13668	Condition	 
>13669	CallExpression	vfs . FillDirView ( mod . getBaseModPath ( ) . c_str ( ) , view )
>13670	ArgumentList	mod . getBaseModPath ( ) . c_str ( )
>13671	Argument	view
>13672	Identifier	view
>13673	Argument	mod . getBaseModPath ( ) . c_str ( )
>13674	CallExpression	mod . getBaseModPath ( ) . c_str ( )
>13675	ArgumentList	 
>13676	Callee	mod . getBaseModPath ( ) . c_str
>13677	MemberAccess	mod . getBaseModPath ( ) . c_str
>13678	Identifier	c_str
>13679	CallExpression	mod . getBaseModPath ( )
>13680	ArgumentList	 
>13681	Callee	mod . getBaseModPath
>13682	MemberAccess	mod . getBaseModPath
>13683	Identifier	getBaseModPath
>13684	Identifier	mod
>13685	Callee	vfs . FillDirView
>13686	MemberAccess	vfs . FillDirView
>13687	Identifier	FillDirView
>13688	Identifier	vfs
>13689	IdentifierDeclStatement	 
>13690	IdentifierDecl	view
>13691	Identifier	view
>13692	IdentifierDeclType	ttvfs 
>13703	FunctionDef	DSQ 
>13704	ParameterList	 
>13705	ReturnType	void
>13706	CompoundStatement	 
>13707	ExpressionStatement	 
>13708	AssignmentExpr	dsq -> getRenderObjectLayer ( LR_ELEMENTS12 ) -> visible = dsq -> user . video . parallaxOn2
>13709	MemberAccess	dsq -> user . video . parallaxOn2
>13710	Identifier	parallaxOn2
>13711	MemberAccess	dsq -> user . video
>13712	Identifier	video
>13713	PtrMemberAccess	dsq -> user
>13714	Identifier	user
>13715	Identifier	dsq
>13716	PtrMemberAccess	dsq -> getRenderObjectLayer ( LR_ELEMENTS12 ) -> visible
>13717	Identifier	visible
>13718	CallExpression	dsq -> getRenderObjectLayer ( LR_ELEMENTS12 )
>13719	ArgumentList	LR_ELEMENTS12
>13720	Argument	LR_ELEMENTS12
>13721	Identifier	LR_ELEMENTS12
>13722	Callee	dsq -> getRenderObjectLayer
>13723	PtrMemberAccess	dsq -> getRenderObjectLayer
>13724	Identifier	getRenderObjectLayer
>13725	Identifier	dsq
>13726	ExpressionStatement	 
>13727	AssignmentExpr	dsq -> getRenderObjectLayer ( LR_ELEMENTS11 ) -> visible = dsq -> user . video . parallaxOn1
>13728	MemberAccess	dsq -> user . video . parallaxOn1
>13729	Identifier	parallaxOn1
>13730	MemberAccess	dsq -> user . video
>13731	Identifier	video
>13732	PtrMemberAccess	dsq -> user
>13733	Identifier	user
>13734	Identifier	dsq
>13735	PtrMemberAccess	dsq -> getRenderObjectLayer ( LR_ELEMENTS11 ) -> visible
>13736	Identifier	visible
>13737	CallExpression	dsq -> getRenderObjectLayer ( LR_ELEMENTS11 )
>13738	ArgumentList	LR_ELEMENTS11
>13739	Argument	LR_ELEMENTS11
>13740	Identifier	LR_ELEMENTS11
>13741	Callee	dsq -> getRenderObjectLayer
>13742	PtrMemberAccess	dsq -> getRenderObjectLayer
>13743	Identifier	getRenderObjectLayer
>13744	Identifier	dsq
>13745	ExpressionStatement	 
>13746	AssignmentExpr	dsq -> getRenderObjectLayer ( LR_ELEMENTS10 ) -> visible = dsq -> user . video . parallaxOn0
>13747	MemberAccess	dsq -> user . video . parallaxOn0
>13748	Identifier	parallaxOn0
>13749	MemberAccess	dsq -> user . video
>13750	Identifier	video
>13751	PtrMemberAccess	dsq -> user
>13752	Identifier	user
>13753	Identifier	dsq
>13754	PtrMemberAccess	dsq -> getRenderObjectLayer ( LR_ELEMENTS10 ) -> visible
>13755	Identifier	visible
>13756	CallExpression	dsq -> getRenderObjectLayer ( LR_ELEMENTS10 )
>13757	ArgumentList	LR_ELEMENTS10
>13758	Argument	LR_ELEMENTS10
>13759	Identifier	LR_ELEMENTS10
>13760	Callee	dsq -> getRenderObjectLayer
>13761	PtrMemberAccess	dsq -> getRenderObjectLayer
>13762	Identifier	getRenderObjectLayer
>13763	Identifier	dsq
>13783	FunctionDef	DSQ 
>13784	ParameterList	 
>13785	ReturnType	void
>13786	CompoundStatement	 
>13787	ExpressionStatement	 
>13788	CallExpression	clearMenu ( )
>13789	ArgumentList	 
>13790	Callee	clearMenu
>13791	Identifier	clearMenu
>13792	ExpressionStatement	 
>13793	CallExpression	unloadMods ( )
>13794	ArgumentList	 
>13795	Callee	unloadMods
>13796	Identifier	unloadMods
>13797	IfStatement	if ( modSelectorScr )
>13798	CompoundStatement	 
>13799	ExpressionStatement	 
>13800	AssignmentExpr	modSelectorScr = 0
>13801	PrimaryExpression	0
>13802	Identifier	modSelectorScr
>13803	ExpressionStatement	 
>13804	AssignmentExpr	modSelectorScr -> fadeAlphaWithLife = 1
>13805	PrimaryExpression	1
>13806	PtrMemberAccess	modSelectorScr -> fadeAlphaWithLife
>13807	Identifier	fadeAlphaWithLife
>13808	Identifier	modSelectorScr
>13809	ExpressionStatement	 
>13810	CallExpression	modSelectorScr -> setDecayRate ( 2 )
>13811	ArgumentList	2
>13812	Argument	2
>13813	PrimaryExpression	2
>13814	Callee	modSelectorScr -> setDecayRate
>13815	PtrMemberAccess	modSelectorScr -> setDecayRate
>13816	Identifier	setDecayRate
>13817	Identifier	modSelectorScr
>13818	ExpressionStatement	 
>13819	CallExpression	modSelectorScr -> setLife ( 1 )
>13820	ArgumentList	1
>13821	Argument	1
>13822	PrimaryExpression	1
>13823	Callee	modSelectorScr -> setLife
>13824	PtrMemberAccess	modSelectorScr -> setLife
>13825	Identifier	setLife
>13826	Identifier	modSelectorScr
>13827	ExpressionStatement	 
>13828	CallExpression	modSelectorScr -> close ( )
>13829	ArgumentList	 
>13830	Callee	modSelectorScr -> close
>13831	PtrMemberAccess	modSelectorScr -> close
>13832	Identifier	close
>13833	Identifier	modSelectorScr
>13834	Condition	 
>13835	Identifier	modSelectorScr
>13836	IfStatement	if ( blackout )
>13837	CompoundStatement	 
>13838	ExpressionStatement	 
>13839	AssignmentExpr	blackout = 0
>13840	PrimaryExpression	0
>13841	Identifier	blackout
>13842	ExpressionStatement	 
>13843	AssignmentExpr	blackout -> fadeAlphaWithLife = 1
>13844	PrimaryExpression	1
>13845	PtrMemberAccess	blackout -> fadeAlphaWithLife
>13846	Identifier	fadeAlphaWithLife
>13847	Identifier	blackout
>13848	ExpressionStatement	 
>13849	CallExpression	blackout -> setDecayRate ( 2 )
>13850	ArgumentList	2
>13851	Argument	2
>13852	PrimaryExpression	2
>13853	Callee	blackout -> setDecayRate
>13854	PtrMemberAccess	blackout -> setDecayRate
>13855	Identifier	setDecayRate
>13856	Identifier	blackout
>13857	ExpressionStatement	 
>13858	CallExpression	blackout -> setLife ( 1 )
>13859	ArgumentList	1
>13860	Argument	1
>13861	PrimaryExpression	1
>13862	Callee	blackout -> setLife
>13863	PtrMemberAccess	blackout -> setLife
>13864	Identifier	setLife
>13865	Identifier	blackout
>13866	Condition	 
>13867	Identifier	blackout
>13877	FunctionDef	DSQ 
>13878	ParameterList	 
>13879	ReturnType	void
>13880	CompoundStatement	 
>13881	ExpressionStatement	 
>13882	CallExpression	saveSlotPageCount -> setText ( os . str ( ) )
>13883	ArgumentList	os . str ( )
>13884	Argument	os . str ( )
>13885	CallExpression	os . str ( )
>13886	ArgumentList	 
>13887	Callee	os . str
>13888	MemberAccess	os . str
>13889	Identifier	str
>13890	Identifier	os
>13891	Callee	saveSlotPageCount -> setText
>13892	PtrMemberAccess	saveSlotPageCount -> setText
>13893	Identifier	setText
>13894	Identifier	saveSlotPageCount
>13895	ExpressionStatement	 
>13896	ShiftExpression	os << dsq -> continuity . stringBank . get ( 2006 ) << \" \" << user . data . savePage + 1 << \"/\" << maxPages + \
>13897	ShiftExpression	dsq -> continuity . stringBank . get ( 2006 ) << \" \" << user . data . savePage + 1 << \"/\" << maxPages + \
>13898	ShiftExpression	\" \" << user . data . savePage + 1 << \"/\" << maxPages + 1
>13899	ShiftExpression	user . data . savePage + 1 << \"/\" << maxPages + 1
>13900	ShiftExpression	\"/\" << maxPages + 1
>13901	AdditiveExpression	maxPages + 1
>13902	PrimaryExpression	1
>13903	Identifier	maxPages
>13904	PrimaryExpression	\"/\"
>13905	AdditiveExpression	user . data . savePage + 1
>13906	PrimaryExpression	1
>13907	MemberAccess	user . data . savePage
>13908	Identifier	savePage
>13909	MemberAccess	user . data
>13910	Identifier	data
>13911	Identifier	user
>13912	PrimaryExpression	\" \"
>13913	CallExpression	dsq -> continuity . stringBank . get ( 2006 )
>13914	ArgumentList	2006
>13915	Argument	2006
>13916	PrimaryExpression	2006
>13917	Callee	dsq -> continuity . stringBank . get
>13918	MemberAccess	dsq -> continuity . stringBank . get
>13919	Identifier	get
>13920	MemberAccess	dsq -> continuity . stringBank
>13921	Identifier	stringBank
>13922	PtrMemberAccess	dsq -> continuity
>13923	Identifier	continuity
>13924	Identifier	dsq
>13925	Identifier	os
>13926	IdentifierDeclStatement	 
>13927	IdentifierDecl	os
>13928	Identifier	os
>13929	IdentifierDeclType	std 
>13942	FunctionDef	DSQ 
>13943	ParameterList	SaveSlotMode ssm
>13944	Parameter	 
>13945	Identifier	ssm
>13946	ParameterType	SaveSlotMode
>13947	ReturnType	void
>13948	CompoundStatement	 
>13949	ExpressionStatement	 
>13950	CallExpression	saveSlots [ 0 ] -> setFocus ( true )
>13951	ArgumentList	true
>13952	Argument	true
>13953	Identifier	true
>13954	Callee	saveSlots [ 0 ] -> setFocus
>13955	PtrMemberAccess	saveSlots [ 0 ] -> setFocus
>13956	Identifier	setFocus
>13957	ArrayIndexing	saveSlots [ 0 ]
>13958	PrimaryExpression	0
>13959	Identifier	saveSlots
>13960	ExpressionStatement	 
>13961	CallExpression	createSaveSlotPage ( )
>13962	ArgumentList	 
>13963	Callee	createSaveSlotPage
>13964	Identifier	createSaveSlotPage
>13965	ExpressionStatement	 
>13966	AssignmentExpr	menu [ 4 ] = txt
>13967	Identifier	txt
>13968	ArrayIndexing	menu [ 4 ]
>13969	PrimaryExpression	4
>13970	Identifier	menu
>13971	ExpressionStatement	 
>13972	CallExpression	addRenderObject ( txt , LR_MENU )
>13973	ArgumentList	txt
>13974	Argument	LR_MENU
>13975	Identifier	LR_MENU
>13976	Argument	txt
>13977	Identifier	txt
>13978	Callee	addRenderObject
>13979	Identifier	addRenderObject
>13980	ExpressionStatement	 
>13981	AssignmentExpr	txt -> followCamera = 1
>13982	PrimaryExpression	1
>13983	PtrMemberAccess	txt -> followCamera
>13984	Identifier	followCamera
>13985	Identifier	txt
>13986	ExpressionStatement	 
>13987	AssignmentExpr	txt -> position = Vector ( 230 , 68 )
>13988	CallExpression	Vector ( 230 , 68 )
>13989	ArgumentList	230
>13990	Argument	68
>13991	PrimaryExpression	68
>13992	Argument	230
>13993	PrimaryExpression	230
>13994	Callee	Vector
>13995	Identifier	Vector
>13996	PtrMemberAccess	txt -> position
>13997	Identifier	position
>13998	Identifier	txt
>13999	IfStatement	if ( ssm == SSM_LOAD )
>14000	ElseStatement	else
>14001	ExpressionStatement	 
>14002	CallExpression	txt -> setText ( continuity . stringBank . get ( 2000 ) )
>14003	ArgumentList	continuity . stringBank . get ( 2000 )
>14004	Argument	continuity . stringBank . get ( 2000 )
>14005	CallExpression	continuity . stringBank . get ( 2000 )
>14006	ArgumentList	2000
>14007	Argument	2000
>14008	PrimaryExpression	2000
>14009	Callee	continuity . stringBank . get
>14010	MemberAccess	continuity . stringBank . get
>14011	Identifier	get
>14012	MemberAccess	continuity . stringBank
>14013	Identifier	stringBank
>14014	Identifier	continuity
>14015	Callee	txt -> setText
>14016	PtrMemberAccess	txt -> setText
>14017	Identifier	setText
>14018	Identifier	txt
>14019	ExpressionStatement	 
>14020	CallExpression	txt -> setText ( continuity . stringBank . get ( 2001 ) )
>14021	ArgumentList	continuity . stringBank . get ( 2001 )
>14022	Argument	continuity . stringBank . get ( 2001 )
>14023	CallExpression	continuity . stringBank . get ( 2001 )
>14024	ArgumentList	2001
>14025	Argument	2001
>14026	PrimaryExpression	2001
>14027	Callee	continuity . stringBank . get
>14028	MemberAccess	continuity . stringBank . get
>14029	Identifier	get
>14030	MemberAccess	continuity . stringBank
>14031	Identifier	stringBank
>14032	Identifier	continuity
>14033	Callee	txt -> setText
>14034	PtrMemberAccess	txt -> setText
>14035	Identifier	setText
>14036	Identifier	txt
>14037	Condition	 
>14038	EqualityExpression	ssm == SSM_LOAD
>14039	Identifier	SSM_LOAD
>14040	Identifier	ssm
>14041	IdentifierDeclStatement	 
>14042	IdentifierDecl	* txt = new BitmapText ( & dsq -> font )
>14043	AssignmentExpr	* txt = new BitmapText ( & dsq -> font )
>14044	UnaryOp	& dsq -> font
>14045	PtrMemberAccess	dsq -> font
>14046	Identifier	font
>14047	Identifier	dsq
>14048	UnaryOperator	&
>14049	Identifier	txt
>14050	Identifier	txt
>14051	IdentifierDeclType	BitmapText *
>14052	ExpressionStatement	 
>14053	AssignmentExpr	menu [ 3 ] = arrowDown
>14054	Identifier	arrowDown
>14055	ArrayIndexing	menu [ 3 ]
>14056	PrimaryExpression	3
>14057	Identifier	menu
>14058	IfStatement	if ( dsq -> game -> miniMapRender )
>14059	ExpressionStatement	 
>14060	CallExpression	dsq -> game -> miniMapRender -> slide ( 1 )
>14061	ArgumentList	1
>14062	Argument	1
>14063	PrimaryExpression	1
>14064	Callee	dsq -> game -> miniMapRender -> slide
>14065	PtrMemberAccess	dsq -> game -> miniMapRender -> slide
>14066	Identifier	slide
>14067	PtrMemberAccess	dsq -> game -> miniMapRender
>14068	Identifier	miniMapRender
>14069	PtrMemberAccess	dsq -> game
>14070	Identifier	game
>14071	Identifier	dsq
>14072	Condition	 
>14073	PtrMemberAccess	dsq -> game -> miniMapRender
>14074	Identifier	miniMapRender
>14075	PtrMemberAccess	dsq -> game
>14076	Identifier	game
>14077	Identifier	dsq
>14078	ExpressionStatement	 
>14079	CallExpression	addRenderObject ( arrowDown , LR_MENU )
>14080	ArgumentList	arrowDown
>14081	Argument	LR_MENU
>14082	Identifier	LR_MENU
>14083	Argument	arrowDown
>14084	Identifier	arrowDown
>14085	Callee	addRenderObject
>14086	Identifier	addRenderObject
>14087	ExpressionStatement	 
>14088	AssignmentExpr	arrowDown -> position = Vector ( 620 , 400 )
>14089	CallExpression	Vector ( 620 , 400 )
>14090	ArgumentList	620
>14091	Argument	400
>14092	PrimaryExpression	400
>14093	Argument	620
>14094	PrimaryExpression	620
>14095	Callee	Vector
>14096	Identifier	Vector
>14097	PtrMemberAccess	arrowDown -> position
>14098	Identifier	position
>14099	Identifier	arrowDown
>14100	ExpressionStatement	 
>14101	AssignmentExpr	arrowDown -> rotation . z = 90
>14102	PrimaryExpression	90
>14103	MemberAccess	arrowDown -> rotation . z
>14104	Identifier	z
>14105	PtrMemberAccess	arrowDown -> rotation
>14106	Identifier	rotation
>14107	Identifier	arrowDown
>14108	ExpressionStatement	 
>14109	CallExpression	arrowDown -> event . set ( MakeFunctionEvent ( DSQ , nextSaveSlotPage ) )
>14110	ArgumentList	MakeFunctionEvent ( DSQ , nextSaveSlotPage )
>14111	Argument	MakeFunctionEvent ( DSQ , nextSaveSlotPage )
>14112	CallExpression	MakeFunctionEvent ( DSQ , nextSaveSlotPage )
>14113	ArgumentList	DSQ
>14114	Argument	nextSaveSlotPage
>14115	Identifier	nextSaveSlotPage
>14116	Argument	DSQ
>14117	Identifier	DSQ
>14118	Callee	MakeFunctionEvent
>14119	Identifier	MakeFunctionEvent
>14120	Callee	arrowDown -> event . set
>14121	MemberAccess	arrowDown -> event . set
>14122	Identifier	set
>14123	PtrMemberAccess	arrowDown -> event
>14124	Identifier	event
>14125	Identifier	arrowDown
>14126	ExpressionStatement	 
>14127	AssignmentExpr	arrowDown -> scale = Vector ( 0.75 , 0.75 )
>14128	CallExpression	Vector ( 0.75 , 0.75 )
>14129	ArgumentList	0.75
>14130	Argument	0.75
>14131	PrimaryExpression	0.75
>14132	Argument	0.75
>14133	PrimaryExpression	0.75
>14134	Callee	Vector
>14135	Identifier	Vector
>14136	PtrMemberAccess	arrowDown -> scale
>14137	Identifier	scale
>14138	Identifier	arrowDown
>14139	ExpressionStatement	 
>14140	CallExpression	arrowDown -> useGlow ( \"glow\" , 100 , 50 )
>14141	ArgumentList	\"glow\"
>14142	Argument	50
>14143	PrimaryExpression	50
>14144	Argument	100
>14145	PrimaryExpression	100
>14146	Argument	\"glow\"
>14147	PrimaryExpression	\"glow\"
>14148	Callee	arrowDown -> useGlow
>14149	PtrMemberAccess	arrowDown -> useGlow
>14150	Identifier	useGlow
>14151	Identifier	arrowDown
>14152	ExpressionStatement	 
>14153	CallExpression	arrowDown -> useSound ( \"click\" )
>14154	ArgumentList	\"click\"
>14155	Argument	\"click\"
>14156	PrimaryExpression	\"click\"
>14157	Callee	arrowDown -> useSound
>14158	PtrMemberAccess	arrowDown -> useSound
>14159	Identifier	useSound
>14160	Identifier	arrowDown
>14161	ExpressionStatement	 
>14162	CallExpression	arrowDown -> useQuad ( \"gui/arrow-right\" )
>14163	ArgumentList	\"gui/arrow-right\"
>14164	Argument	\"gui/arrow-right\"
>14165	PrimaryExpression	\"gui/arrow-right\"
>14166	Callee	arrowDown -> useQuad
>14167	PtrMemberAccess	arrowDown -> useQuad
>14168	Identifier	useQuad
>14169	Identifier	arrowDown
>14170	ExpressionStatement	 
>14171	AssignmentExpr	arrowDown = new AquariaMenuItem ( )
>14172	UnaryExpression	new AquariaMenuItem ( )
>14173	Identifier	arrowDown
>14174	ExpressionStatement	 
>14175	AssignmentExpr	menu [ 2 ] = arrowUp
>14176	Identifier	arrowUp
>14177	ArrayIndexing	menu [ 2 ]
>14178	PrimaryExpression	2
>14179	Identifier	menu
>14180	ExpressionStatement	 
>14181	CallExpression	addRenderObject ( arrowUp , LR_MENU )
>14182	ArgumentList	arrowUp
>14183	Argument	LR_MENU
>14184	Identifier	LR_MENU
>14185	Argument	arrowUp
>14186	Identifier	arrowUp
>14187	Callee	addRenderObject
>14188	Identifier	addRenderObject
>14189	ExpressionStatement	 
>14190	AssignmentExpr	arrowUp -> position = Vector ( 620 , 200 )
>14191	CallExpression	Vector ( 620 , 200 )
>14192	ArgumentList	620
>14193	Argument	200
>14194	PrimaryExpression	200
>14195	Argument	620
>14196	PrimaryExpression	620
>14197	Callee	Vector
>14198	Identifier	Vector
>14199	PtrMemberAccess	arrowUp -> position
>14200	Identifier	position
>14201	Identifier	arrowUp
>14202	ExpressionStatement	 
>14203	AssignmentExpr	arrowUp -> scale = Vector ( 0.75 , 0.75 )
>14204	CallExpression	Vector ( 0.75 , 0.75 )
>14205	ArgumentList	0.75
>14206	Argument	0.75
>14207	PrimaryExpression	0.75
>14208	Argument	0.75
>14209	PrimaryExpression	0.75
>14210	Callee	Vector
>14211	Identifier	Vector
>14212	PtrMemberAccess	arrowUp -> scale
>14213	Identifier	scale
>14214	Identifier	arrowUp
>14215	ExpressionStatement	 
>14216	AssignmentExpr	arrowUp -> rotation . z = 90
>14217	PrimaryExpression	90
>14218	MemberAccess	arrowUp -> rotation . z
>14219	Identifier	z
>14220	PtrMemberAccess	arrowUp -> rotation
>14221	Identifier	rotation
>14222	Identifier	arrowUp
>14223	ExpressionStatement	 
>14224	CallExpression	arrowUp -> event . set ( MakeFunctionEvent ( DSQ , prevSaveSlotPage ) )
>14225	ArgumentList	MakeFunctionEvent ( DSQ , prevSaveSlotPage )
>14226	Argument	MakeFunctionEvent ( DSQ , prevSaveSlotPage )
>14227	CallExpression	MakeFunctionEvent ( DSQ , prevSaveSlotPage )
>14228	ArgumentList	DSQ
>14229	Argument	prevSaveSlotPage
>14230	Identifier	prevSaveSlotPage
>14231	Argument	DSQ
>14232	Identifier	DSQ
>14233	Callee	MakeFunctionEvent
>14234	Identifier	MakeFunctionEvent
>14235	Callee	arrowUp -> event . set
>14236	MemberAccess	arrowUp -> event . set
>14237	Identifier	set
>14238	PtrMemberAccess	arrowUp -> event
>14239	Identifier	event
>14240	Identifier	arrowUp
>14241	ExpressionStatement	 
>14242	CallExpression	arrowUp -> useSound ( \"click\" )
>14243	ArgumentList	\"click\"
>14244	Argument	\"click\"
>14245	PrimaryExpression	\"click\"
>14246	Callee	arrowUp -> useSound
>14247	PtrMemberAccess	arrowUp -> useSound
>14248	Identifier	useSound
>14249	Identifier	arrowUp
>14250	ExpressionStatement	 
>14251	CallExpression	arrowUp -> useGlow ( \"glow\" , 100 , 50 )
>14252	ArgumentList	\"glow\"
>14253	Argument	50
>14254	PrimaryExpression	50
>14255	Argument	100
>14256	PrimaryExpression	100
>14257	Argument	\"glow\"
>14258	PrimaryExpression	\"glow\"
>14259	Callee	arrowUp -> useGlow
>14260	PtrMemberAccess	arrowUp -> useGlow
>14261	Identifier	useGlow
>14262	Identifier	arrowUp
>14263	ExpressionStatement	 
>14264	CallExpression	arrowUp -> useQuad ( \"gui/arrow-left\" )
>14265	ArgumentList	\"gui/arrow-left\"
>14266	Argument	\"gui/arrow-left\"
>14267	PrimaryExpression	\"gui/arrow-left\"
>14268	Callee	arrowUp -> useQuad
>14269	PtrMemberAccess	arrowUp -> useQuad
>14270	Identifier	useQuad
>14271	Identifier	arrowUp
>14272	ExpressionStatement	 
>14273	AssignmentExpr	arrowUp = new AquariaMenuItem ( )
>14274	UnaryExpression	new AquariaMenuItem ( )
>14275	Identifier	arrowUp
>14276	ExpressionStatement	 
>14277	AssignmentExpr	menu [ 0 ] = cancel
>14278	Identifier	cancel
>14279	ArrayIndexing	menu [ 0 ]
>14280	PrimaryExpression	0
>14281	Identifier	menu
>14282	ExpressionStatement	 
>14283	CallExpression	addRenderObject ( cancel , LR_MENU )
>14284	ArgumentList	cancel
>14285	Argument	LR_MENU
>14286	Identifier	LR_MENU
>14287	Argument	cancel
>14288	Identifier	cancel
>14289	Callee	addRenderObject
>14290	Identifier	addRenderObject
>14291	ExpressionStatement	 
>14292	AssignmentExpr	cancel -> position = Vector ( 665 , 545 )
>14293	CallExpression	Vector ( 665 , 545 )
>14294	ArgumentList	665
>14295	Argument	545
>14296	PrimaryExpression	545
>14297	Argument	665
>14298	PrimaryExpression	665
>14299	Callee	Vector
>14300	Identifier	Vector
>14301	PtrMemberAccess	cancel -> position
>14302	Identifier	position
>14303	Identifier	cancel
>14304	ExpressionStatement	 
>14305	CallExpression	cancel -> event . set ( MakeFunctionEvent ( DSQ , onExitSaveSlotMenu ) )
>14306	ArgumentList	MakeFunctionEvent ( DSQ , onExitSaveSlotMenu )
>14307	Argument	MakeFunctionEvent ( DSQ , onExitSaveSlotMenu )
>14308	CallExpression	MakeFunctionEvent ( DSQ , onExitSaveSlotMenu )
>14309	ArgumentList	DSQ
>14310	Argument	onExitSaveSlotMenu
>14311	Identifier	onExitSaveSlotMenu
>14312	Argument	DSQ
>14313	Identifier	DSQ
>14314	Callee	MakeFunctionEvent
>14315	Identifier	MakeFunctionEvent
>14316	Callee	cancel -> event . set
>14317	MemberAccess	cancel -> event . set
>14318	Identifier	set
>14319	PtrMemberAccess	cancel -> event
>14320	Identifier	event
>14321	Identifier	cancel
>14322	ExpressionStatement	 
>14323	CallExpression	cancel -> useGlow ( \"glow\" , 200 , 50 )
>14324	ArgumentList	\"glow\"
>14325	Argument	50
>14326	PrimaryExpression	50
>14327	Argument	200
>14328	PrimaryExpression	200
>14329	Argument	\"glow\"
>14330	PrimaryExpression	\"glow\"
>14331	Callee	cancel -> useGlow
>14332	PtrMemberAccess	cancel -> useGlow
>14333	Identifier	useGlow
>14334	Identifier	cancel
>14335	ExpressionStatement	 
>14336	AssignmentExpr	cancel = new AquariaMenuItem ( )
>14337	UnaryExpression	new AquariaMenuItem ( )
>14338	Identifier	cancel
>14339	ExpressionStatement	 
>14340	CallExpression	updateSaveSlotPageCount ( )
>14341	ArgumentList	 
>14342	Callee	updateSaveSlotPageCount
>14343	Identifier	updateSaveSlotPageCount
>14344	ExpressionStatement	 
>14345	CallExpression	addRenderObject ( saveSlotPageCount , LR_MENU )
>14346	ArgumentList	saveSlotPageCount
>14347	Argument	LR_MENU
>14348	Identifier	LR_MENU
>14349	Argument	saveSlotPageCount
>14350	Identifier	saveSlotPageCount
>14351	Callee	addRenderObject
>14352	Identifier	addRenderObject
>14353	ExpressionStatement	 
>14354	AssignmentExpr	saveSlotPageCount -> position = Vector ( 590 , 300 )
>14355	CallExpression	Vector ( 590 , 300 )
>14356	ArgumentList	590
>14357	Argument	300
>14358	PrimaryExpression	300
>14359	Argument	590
>14360	PrimaryExpression	590
>14361	Callee	Vector
>14362	Identifier	Vector
>14363	PtrMemberAccess	saveSlotPageCount -> position
>14364	Identifier	position
>14365	Identifier	saveSlotPageCount
>14366	ExpressionStatement	 
>14367	CallExpression	saveSlotPageCount -> setAlign ( ALIGN_LEFT )
>14368	ArgumentList	ALIGN_LEFT
>14369	Argument	ALIGN_LEFT
>14370	Identifier	ALIGN_LEFT
>14371	Callee	saveSlotPageCount -> setAlign
>14372	PtrMemberAccess	saveSlotPageCount -> setAlign
>14373	Identifier	setAlign
>14374	Identifier	saveSlotPageCount
>14375	ExpressionStatement	 
>14376	AssignmentExpr	saveSlotPageCount -> followCamera = 1
>14377	PrimaryExpression	1
>14378	PtrMemberAccess	saveSlotPageCount -> followCamera
>14379	Identifier	followCamera
>14380	Identifier	saveSlotPageCount
>14381	ExpressionStatement	 
>14382	AssignmentExpr	saveSlotPageCount = new BitmapText ( & dsq -> smallFont )
>14383	UnaryOp	& dsq -> smallFont
>14384	PtrMemberAccess	dsq -> smallFont
>14385	Identifier	smallFont
>14386	Identifier	dsq
>14387	UnaryOperator	&
>14388	Identifier	saveSlotPageCount
>14389	ExpressionStatement	 
>14390	CallExpression	watch ( t )
>14391	ArgumentList	t
>14392	Argument	t
>14393	Identifier	t
>14394	Callee	watch
>14395	Identifier	watch
>14396	ExpressionStatement	 
>14397	CallExpression	core -> sound -> playSfx ( \"menu-open\" )
>14398	ArgumentList	\"menu-open\"
>14399	Argument	\"menu-open\"
>14400	PrimaryExpression	\"menu-open\"
>14401	Callee	core -> sound -> playSfx
>14402	PtrMemberAccess	core -> sound -> playSfx
>14403	Identifier	playSfx
>14404	PtrMemberAccess	core -> sound
>14405	Identifier	sound
>14406	Identifier	core
>14407	ExpressionStatement	 
>14408	CallExpression	addRenderObject ( menu [ 1 ] , LR_MENU )
>14409	ArgumentList	menu [ 1 ]
>14410	Argument	LR_MENU
>14411	Identifier	LR_MENU
>14412	Argument	menu [ 1 ]
>14413	ArrayIndexing	menu [ 1 ]
>14414	PrimaryExpression	1
>14415	Identifier	menu
>14416	Callee	addRenderObject
>14417	Identifier	addRenderObject
>14418	ExpressionStatement	 
>14419	AssignmentExpr	menu [ 1 ] -> followCamera = 1
>14420	PrimaryExpression	1
>14421	PtrMemberAccess	menu [ 1 ] -> followCamera
>14422	Identifier	followCamera
>14423	ArrayIndexing	menu [ 1 ]
>14424	PrimaryExpression	1
>14425	Identifier	menu
>14426	ExpressionStatement	 
>14427	CallExpression	menu [ 1 ] -> scale . interpolateTo ( savesz , t )
>14428	ArgumentList	savesz
>14429	Argument	t
>14430	Identifier	t
>14431	Argument	savesz
>14432	Identifier	savesz
>14433	Callee	menu [ 1 ] -> scale . interpolateTo
>14434	MemberAccess	menu [ 1 ] -> scale . interpolateTo
>14435	Identifier	interpolateTo
>14436	PtrMemberAccess	menu [ 1 ] -> scale
>14437	Identifier	scale
>14438	ArrayIndexing	menu [ 1 ]
>14439	PrimaryExpression	1
>14440	Identifier	menu
>14441	ExpressionStatement	 
>14442	AssignmentExpr	menu [ 1 ] -> scale = savesz * 0.5f
>14443	MultiplicativeExpression	savesz * 0.5f
>14444	PrimaryExpression	0.5f
>14445	Identifier	savesz
>14446	PtrMemberAccess	menu [ 1 ] -> scale
>14447	Identifier	scale
>14448	ArrayIndexing	menu [ 1 ]
>14449	PrimaryExpression	1
>14450	Identifier	menu
>14451	ExpressionStatement	 
>14452	CallExpression	menu [ 1 ] -> alpha . interpolateTo ( 1 , t )
>14453	ArgumentList	1
>14454	Argument	t
>14455	Identifier	t
>14456	Argument	1
>14457	PrimaryExpression	1
>14458	Callee	menu [ 1 ] -> alpha . interpolateTo
>14459	MemberAccess	menu [ 1 ] -> alpha . interpolateTo
>14460	Identifier	interpolateTo
>14461	PtrMemberAccess	menu [ 1 ] -> alpha
>14462	Identifier	alpha
>14463	ArrayIndexing	menu [ 1 ]
>14464	PrimaryExpression	1
>14465	Identifier	menu
>14466	ExpressionStatement	 
>14467	AssignmentExpr	menu [ 1 ] -> alpha = 0
>14468	PrimaryExpression	0
>14469	PtrMemberAccess	menu [ 1 ] -> alpha
>14470	Identifier	alpha
>14471	ArrayIndexing	menu [ 1 ]
>14472	PrimaryExpression	1
>14473	Identifier	menu
>14474	ExpressionStatement	 
>14475	AssignmentExpr	savesz = Vector ( 750.0f / 1024.0f , 750.0f / 1024.0f )
>14476	CallExpression	Vector ( 750.0f / 1024.0f , 750.0f / 1024.0f )
>14477	ArgumentList	750.0f / 1024.0f
>14478	Argument	750.0f / 1024.0f
>14479	MultiplicativeExpression	750.0f / 1024.0f
>14480	PrimaryExpression	1024.0f
>14481	PrimaryExpression	750.0f
>14482	Argument	750.0f / 1024.0f
>14483	MultiplicativeExpression	750.0f / 1024.0f
>14484	PrimaryExpression	1024.0f
>14485	PrimaryExpression	750.0f
>14486	Callee	Vector
>14487	Identifier	Vector
>14488	Identifier	savesz
>14489	ExpressionStatement	 
>14490	AssignmentExpr	menu [ 1 ] = new Quad ( \"gui/save-menu\" , Vector ( 400 , 300 ) )
>14491	Expression	\"gui/save-menu\" , Vector ( 400 , 300 )
>14492	CallExpression	Vector ( 400 , 300 )
>14493	ArgumentList	400
>14494	Argument	300
>14495	PrimaryExpression	300
>14496	Argument	400
>14497	PrimaryExpression	400
>14498	Callee	Vector
>14499	Identifier	Vector
>14500	PrimaryExpression	\"gui/save-menu\"
>14501	ArrayIndexing	menu [ 1 ]
>14502	PrimaryExpression	1
>14503	Identifier	menu
>14504	ExpressionStatement	 
>14505	CallExpression	addRenderObject ( blackout , LR_MENU )
>14506	ArgumentList	blackout
>14507	Argument	LR_MENU
>14508	Identifier	LR_MENU
>14509	Argument	blackout
>14510	Identifier	blackout
>14511	Callee	addRenderObject
>14512	Identifier	addRenderObject
>14513	ExpressionStatement	 
>14514	CallExpression	blackout -> alpha . interpolateTo ( 1 , 0.5 )
>14515	ArgumentList	1
>14516	Argument	0.5
>14517	PrimaryExpression	0.5
>14518	Argument	1
>14519	PrimaryExpression	1
>14520	Callee	blackout -> alpha . interpolateTo
>14521	MemberAccess	blackout -> alpha . interpolateTo
>14522	Identifier	interpolateTo
>14523	PtrMemberAccess	blackout -> alpha
>14524	Identifier	alpha
>14525	Identifier	blackout
>14526	ExpressionStatement	 
>14527	AssignmentExpr	blackout -> alpha = 0
>14528	PrimaryExpression	0
>14529	PtrMemberAccess	blackout -> alpha
>14530	Identifier	alpha
>14531	Identifier	blackout
>14532	ExpressionStatement	 
>14533	AssignmentExpr	blackout -> alphaMod = 0.75
>14534	PrimaryExpression	0.75
>14535	PtrMemberAccess	blackout -> alphaMod
>14536	Identifier	alphaMod
>14537	Identifier	blackout
>14538	ExpressionStatement	 
>14539	AssignmentExpr	blackout -> position = Vector ( 400 , 300 )
>14540	CallExpression	Vector ( 400 , 300 )
>14541	ArgumentList	400
>14542	Argument	300
>14543	PrimaryExpression	300
>14544	Argument	400
>14545	PrimaryExpression	400
>14546	Callee	Vector
>14547	Identifier	Vector
>14548	PtrMemberAccess	blackout -> position
>14549	Identifier	position
>14550	Identifier	blackout
>14551	ExpressionStatement	 
>14552	AssignmentExpr	blackout -> followCamera = 1
>14553	PrimaryExpression	1
>14554	PtrMemberAccess	blackout -> followCamera
>14555	Identifier	followCamera
>14556	Identifier	blackout
>14557	ExpressionStatement	 
>14558	AssignmentExpr	blackout -> autoHeight = AUTO_VIRTUALHEIGHT
>14559	Identifier	AUTO_VIRTUALHEIGHT
>14560	PtrMemberAccess	blackout -> autoHeight
>14561	Identifier	autoHeight
>14562	Identifier	blackout
>14563	ExpressionStatement	 
>14564	AssignmentExpr	blackout -> autoWidth = AUTO_VIRTUALWIDTH
>14565	Identifier	AUTO_VIRTUALWIDTH
>14566	PtrMemberAccess	blackout -> autoWidth
>14567	Identifier	autoWidth
>14568	Identifier	blackout
>14569	ExpressionStatement	 
>14570	AssignmentExpr	blackout -> color = 0
>14571	PrimaryExpression	0
>14572	PtrMemberAccess	blackout -> color
>14573	Identifier	color
>14574	Identifier	blackout
>14575	ExpressionStatement	 
>14576	Identifier	Quad
>14577	Statement	 
>14578	Statement	 
>14579	Statement	 
>14580	IdentifierDeclStatement	 
>14581	IdentifierDecl	t = 0.3
>14582	AssignmentExpr	t = 0.3
>14583	PrimaryExpression	0.3
>14584	Identifier	t
>14585	Identifier	t
>14586	IdentifierDeclType	float
>14587	ExpressionStatement	 
>14588	CallExpression	menu . resize ( 5 )
>14589	ArgumentList	5
>14590	Argument	5
>14591	PrimaryExpression	5
>14592	Callee	menu . resize
>14593	MemberAccess	menu . resize
>14594	Identifier	resize
>14595	Identifier	menu
>14596	IfStatement	if ( ! menu . empty ( ) )
>14597	CompoundStatement	 
>14598	ExpressionStatement	 
>14599	CallExpression	errorLog ( \"menu wasn't cleared\" )
>14600	ArgumentList	\"menu wasn't cleared\"
>14601	Argument	\"menu wasn't cleared\"
>14602	PrimaryExpression	\"menu wasn't cleared\"
>14603	Callee	errorLog
>14604	Identifier	errorLog
>14605	Condition	 
>14606	UnaryOp	! menu . empty ( )
>14607	CallExpression	menu . empty ( )
>14608	ArgumentList	 
>14609	Callee	menu . empty
>14610	MemberAccess	menu . empty
>14611	Identifier	empty
>14612	Identifier	menu
>14613	UnaryOperator	!
>14614	IfStatement	if ( ! saveSlots . empty ( ) )
>14615	CompoundStatement	 
>14616	ExpressionStatement	 
>14617	CallExpression	errorLog ( \"save slots weren't cleared\" )
>14618	ArgumentList	\"save slots weren't cleared\"
>14619	Argument	\"save slots weren't cleared\"
>14620	PrimaryExpression	\"save slots weren't cleared\"
>14621	Callee	errorLog
>14622	Identifier	errorLog
>14623	Condition	 
>14624	UnaryOp	! saveSlots . empty ( )
>14625	CallExpression	saveSlots . empty ( )
>14626	ArgumentList	 
>14627	Callee	saveSlots . empty
>14628	MemberAccess	saveSlots . empty
>14629	Identifier	empty
>14630	Identifier	saveSlots
>14631	UnaryOperator	!
>14710	FunctionDef	DSQ 
>14711	ParameterList	bool fade
>14712	Parameter	 
>14713	Identifier	fade
>14714	ParameterType	bool
>14715	ReturnType	void
>14716	CompoundStatement	 
>14717	ExpressionStatement	 
>14718	CallExpression	dsq -> game -> transitionToScene ( \"Title\" )
>14719	ArgumentList	\"Title\"
>14720	Argument	\"Title\"
>14721	PrimaryExpression	\"Title\"
>14722	Callee	dsq -> game -> transitionToScene
>14723	PtrMemberAccess	dsq -> game -> transitionToScene
>14724	Identifier	transitionToScene
>14725	PtrMemberAccess	dsq -> game
>14726	Identifier	game
>14727	Identifier	dsq
>14728	ExpressionStatement	 
>14729	CallExpression	dsq -> continuity . reset ( )
>14730	ArgumentList	 
>14731	Callee	dsq -> continuity . reset
>14732	MemberAccess	dsq -> continuity . reset
>14733	Identifier	reset
>14734	PtrMemberAccess	dsq -> continuity
>14735	Identifier	continuity
>14736	Identifier	dsq
>14737	ExpressionStatement	 
>14738	CallExpression	unloadMods ( )
>14739	ArgumentList	 
>14740	Callee	unloadMods
>14741	Identifier	unloadMods
>14742	IfStatement	if ( mod . isActive ( ) )
>14743	CompoundStatement	 
>14744	ExpressionStatement	 
>14745	CallExpression	mod . shutdown ( )
>14746	ArgumentList	 
>14747	Callee	mod . shutdown
>14748	MemberAccess	mod . shutdown
>14749	Identifier	shutdown
>14750	Identifier	mod
>14751	Condition	 
>14752	CallExpression	mod . isActive ( )
>14753	ArgumentList	 
>14754	Callee	mod . isActive
>14755	MemberAccess	mod . isActive
>14756	Identifier	isActive
>14757	Identifier	mod
>14758	ExpressionStatement	 
>14759	CallExpression	user . save ( )
>14760	ArgumentList	 
>14761	Callee	user . save
>14762	MemberAccess	user . save
>14763	Identifier	save
>14764	Identifier	user
>14765	IfStatement	if ( fade )
>14766	ExpressionStatement	 
>14767	CallExpression	dsq -> sound -> stopMusic ( )
>14768	ArgumentList	 
>14769	Callee	dsq -> sound -> stopMusic
>14770	PtrMemberAccess	dsq -> sound -> stopMusic
>14771	Identifier	stopMusic
>14772	PtrMemberAccess	dsq -> sound
>14773	Identifier	sound
>14774	Identifier	dsq
>14775	Condition	 
>14776	Identifier	fade
>14777	ExpressionStatement	 
>14778	CallExpression	resetTimer ( )
>14779	ArgumentList	 
>14780	Callee	resetTimer
>14781	Identifier	resetTimer
>14782	ExpressionStatement	 
>14783	CallExpression	main ( 1 )
>14784	ArgumentList	1
>14785	Argument	1
>14786	PrimaryExpression	1
>14787	Callee	main
>14788	Identifier	main
>14789	IfStatement	if ( fade )
>14790	CompoundStatement	 
>14791	ExpressionStatement	 
>14792	CallExpression	dsq -> sound -> fadeMusic ( SFT_OUT , 1 )
>14793	ArgumentList	SFT_OUT
>14794	Argument	1
>14795	PrimaryExpression	1
>14796	Argument	SFT_OUT
>14797	Identifier	SFT_OUT
>14798	Callee	dsq -> sound -> fadeMusic
>14799	PtrMemberAccess	dsq -> sound -> fadeMusic
>14800	Identifier	fadeMusic
>14801	PtrMemberAccess	dsq -> sound
>14802	Identifier	sound
>14803	Identifier	dsq
>14804	Condition	 
>14805	Identifier	fade
>14806	ExpressionStatement	 
>14807	CallExpression	dsq -> overlay -> alpha . interpolateTo ( 1 , 1 )
>14808	ArgumentList	1
>14809	Argument	1
>14810	PrimaryExpression	1
>14811	Argument	1
>14812	PrimaryExpression	1
>14813	Callee	dsq -> overlay -> alpha . interpolateTo
>14814	MemberAccess	dsq -> overlay -> alpha . interpolateTo
>14815	Identifier	interpolateTo
>14816	PtrMemberAccess	dsq -> overlay -> alpha
>14817	Identifier	alpha
>14818	PtrMemberAccess	dsq -> overlay
>14819	Identifier	overlay
>14820	Identifier	dsq
>14821	ExpressionStatement	 
>14822	AssignmentExpr	dsq -> overlay -> color = 0
>14823	PrimaryExpression	0
>14824	PtrMemberAccess	dsq -> overlay -> color
>14825	Identifier	color
>14826	PtrMemberAccess	dsq -> overlay
>14827	Identifier	overlay
>14828	Identifier	dsq
>14829	ExpressionStatement	 
>14830	AssignmentExpr	recentSaveSlot = - 1
>14831	UnaryOp	- 1
>14832	PrimaryExpression	1
>14833	UnaryOperator	-
>14834	Identifier	recentSaveSlot
>14835	ExpressionStatement	 
>14836	AssignmentExpr	core -> settings . runInBackground = false
>14837	Identifier	false
>14838	MemberAccess	core -> settings . runInBackground
>14839	Identifier	runInBackground
>14840	PtrMemberAccess	core -> settings
>14841	Identifier	settings
>14842	Identifier	core
>14867	FunctionDef	DSQ 
>14868	ParameterList	 
>14869	ReturnType	void
>14870	CompoundStatement	 
>14871	IfStatement	if ( inputMode == INPUT_JOYSTICK )
>14872	CompoundStatement	 
>14873	ExpressionStatement	 
>14874	CallExpression	cancel -> setDirMove ( DIR_LEFT , saveSlots [ 3 ] )
>14875	ArgumentList	DIR_LEFT
>14876	Argument	saveSlots [ 3 ]
>14877	ArrayIndexing	saveSlots [ 3 ]
>14878	PrimaryExpression	3
>14879	Identifier	saveSlots
>14880	Argument	DIR_LEFT
>14881	Identifier	DIR_LEFT
>14882	Callee	cancel -> setDirMove
>14883	PtrMemberAccess	cancel -> setDirMove
>14884	Identifier	setDirMove
>14885	Identifier	cancel
>14886	ExpressionStatement	 
>14887	CallExpression	cancel -> setDirMove ( DIR_UP , arrowDown )
>14888	ArgumentList	DIR_UP
>14889	Argument	arrowDown
>14890	Identifier	arrowDown
>14891	Argument	DIR_UP
>14892	Identifier	DIR_UP
>14893	Callee	cancel -> setDirMove
>14894	PtrMemberAccess	cancel -> setDirMove
>14895	Identifier	setDirMove
>14896	Identifier	cancel
>14897	ExpressionStatement	 
>14898	CallExpression	arrowDown -> setDirMove ( DIR_DOWN , cancel )
>14899	ArgumentList	DIR_DOWN
>14900	Argument	cancel
>14901	Identifier	cancel
>14902	Argument	DIR_DOWN
>14903	Identifier	DIR_DOWN
>14904	Callee	arrowDown -> setDirMove
>14905	PtrMemberAccess	arrowDown -> setDirMove
>14906	Identifier	setDirMove
>14907	Identifier	arrowDown
>14908	ExpressionStatement	 
>14909	CallExpression	saveSlots [ 3 ] -> setDirMove ( DIR_RIGHT , cancel )
>14910	ArgumentList	DIR_RIGHT
>14911	Argument	cancel
>14912	Identifier	cancel
>14913	Argument	DIR_RIGHT
>14914	Identifier	DIR_RIGHT
>14915	Callee	saveSlots [ 3 ] -> setDirMove
>14916	PtrMemberAccess	saveSlots [ 3 ] -> setDirMove
>14917	Identifier	setDirMove
>14918	ArrayIndexing	saveSlots [ 3 ]
>14919	PrimaryExpression	3
>14920	Identifier	saveSlots
>14921	ExpressionStatement	 
>14922	CallExpression	saveSlots [ 2 ] -> setDirMove ( DIR_RIGHT , arrowDown )
>14923	ArgumentList	DIR_RIGHT
>14924	Argument	arrowDown
>14925	Identifier	arrowDown
>14926	Argument	DIR_RIGHT
>14927	Identifier	DIR_RIGHT
>14928	Callee	saveSlots [ 2 ] -> setDirMove
>14929	PtrMemberAccess	saveSlots [ 2 ] -> setDirMove
>14930	Identifier	setDirMove
>14931	ArrayIndexing	saveSlots [ 2 ]
>14932	PrimaryExpression	2
>14933	Identifier	saveSlots
>14934	ExpressionStatement	 
>14935	CallExpression	saveSlots [ 1 ] -> setDirMove ( DIR_RIGHT , arrowUp )
>14936	ArgumentList	DIR_RIGHT
>14937	Argument	arrowUp
>14938	Identifier	arrowUp
>14939	Argument	DIR_RIGHT
>14940	Identifier	DIR_RIGHT
>14941	Callee	saveSlots [ 1 ] -> setDirMove
>14942	PtrMemberAccess	saveSlots [ 1 ] -> setDirMove
>14943	Identifier	setDirMove
>14944	ArrayIndexing	saveSlots [ 1 ]
>14945	PrimaryExpression	1
>14946	Identifier	saveSlots
>14947	ExpressionStatement	 
>14948	CallExpression	saveSlots [ 0 ] -> setDirMove ( DIR_RIGHT , arrowUp )
>14949	ArgumentList	DIR_RIGHT
>14950	Argument	arrowUp
>14951	Identifier	arrowUp
>14952	Argument	DIR_RIGHT
>14953	Identifier	DIR_RIGHT
>14954	Callee	saveSlots [ 0 ] -> setDirMove
>14955	PtrMemberAccess	saveSlots [ 0 ] -> setDirMove
>14956	Identifier	setDirMove
>14957	ArrayIndexing	saveSlots [ 0 ]
>14958	PrimaryExpression	0
>14959	Identifier	saveSlots
>14960	Condition	 
>14961	EqualityExpression	inputMode == INPUT_JOYSTICK
>14962	Identifier	INPUT_JOYSTICK
>14963	Identifier	inputMode
>14964	ForStatement	for ( int i = 0 ; i < saveSlots . size ( ) ; i ++ )
>14965	CompoundStatement	 
>14966	ExpressionStatement	 
>14967	CallExpression	addRenderObject ( saveSlots [ i ] , LR_FILEMENU )
>14968	ArgumentList	saveSlots [ i ]
>14969	Argument	LR_FILEMENU
>14970	Identifier	LR_FILEMENU
>14971	Argument	saveSlots [ i ]
>14972	ArrayIndexing	saveSlots [ i ]
>14973	Identifier	i
>14974	Identifier	saveSlots
>14975	Callee	addRenderObject
>14976	Identifier	addRenderObject
>14977	IfStatement	if ( i == 1 || i == 3 )
>14978	ExpressionStatement	 
>14979	AssignmentExpr	saveSlots [ i ] -> position . y -= 0.5f
>14980	PrimaryExpression	0.5f
>14981	MemberAccess	saveSlots [ i ] -> position . y
>14982	Identifier	y
>14983	PtrMemberAccess	saveSlots [ i ] -> position
>14984	Identifier	position
>14985	ArrayIndexing	saveSlots [ i ]
>14986	Identifier	i
>14987	Identifier	saveSlots
>14988	Condition	 
>14989	OrExpression	i == 1 || i == 3
>14990	EqualityExpression	i == 3
>14991	PrimaryExpression	3
>14992	Identifier	i
>14993	EqualityExpression	i == 1
>14994	PrimaryExpression	1
>14995	Identifier	i
>14996	IfStatement	if ( i != 1 )
>14997	ExpressionStatement	 
>14998	IncDecOp	saveSlots [ i ] -> position . y ++
>14999	IncDec	++
>15000	MemberAccess	saveSlots [ i ] -> position . y
>15001	Identifier	y
>15002	PtrMemberAccess	saveSlots [ i ] -> position
>15003	Identifier	position
>15004	ArrayIndexing	saveSlots [ i ]
>15005	Identifier	i
>15006	Identifier	saveSlots
>15007	Condition	 
>15008	EqualityExpression	i != 1
>15009	PrimaryExpression	1
>15010	Identifier	i
>15011	ExpressionStatement	 
>15012	AssignmentExpr	saveSlots [ i ] -> position = Vector ( 409 , 193 + i * 90 )
>15013	CallExpression	Vector ( 409 , 193 + i * 90 )
>15014	ArgumentList	409
>15015	Argument	193 + i * 90
>15016	AdditiveExpression	193 + i * 90
>15017	MultiplicativeExpression	i * 90
>15018	PrimaryExpression	90
>15019	Identifier	i
>15020	PrimaryExpression	193
>15021	Argument	409
>15022	PrimaryExpression	409
>15023	Callee	Vector
>15024	Identifier	Vector
>15025	PtrMemberAccess	saveSlots [ i ] -> position
>15026	Identifier	position
>15027	ArrayIndexing	saveSlots [ i ]
>15028	Identifier	i
>15029	Identifier	saveSlots
>15030	ExpressionStatement	 
>15031	AssignmentExpr	saveSlots [ i ] -> followCamera = 1
>15032	PrimaryExpression	1
>15033	PtrMemberAccess	saveSlots [ i ] -> followCamera
>15034	Identifier	followCamera
>15035	ArrayIndexing	saveSlots [ i ]
>15036	Identifier	i
>15037	Identifier	saveSlots
>15038	ExpressionStatement	 
>15039	AssignmentExpr	saveSlots [ i ] = new AquariaSaveSlot ( i + user . data . savePage * saveSlotPageSize )
>15040	AdditiveExpression	i + user . data . savePage * saveSlotPageSize
>15041	MultiplicativeExpression	user . data . savePage * saveSlotPageSize
>15042	Identifier	saveSlotPageSize
>15043	MemberAccess	user . data . savePage
>15044	Identifier	savePage
>15045	MemberAccess	user . data
>15046	Identifier	data
>15047	Identifier	user
>15048	Identifier	i
>15049	ArrayIndexing	saveSlots [ i ]
>15050	Identifier	i
>15051	Identifier	saveSlots
>15052	IncDecOp	 
>15053	IncDec	++
>15054	Identifier	i
>15055	Condition	 
>15056	RelationalExpression	i < saveSlots . size ( )
>15057	CallExpression	saveSlots . size ( )
>15058	ArgumentList	 
>15059	Callee	saveSlots . size
>15060	MemberAccess	saveSlots . size
>15061	Identifier	size
>15062	Identifier	saveSlots
>15063	Identifier	i
>15064	ForInit	 
>15065	IdentifierDeclStatement	int i = 0 ;
>15066	IdentifierDecl	i = 0
>15067	AssignmentExpr	i = 0
>15068	PrimaryExpression	0
>15069	Identifier	i
>15070	Identifier	i
>15071	IdentifierDeclType	int
>15072	ExpressionStatement	 
>15073	CallExpression	saveSlots . resize ( saveSlotPageSize )
>15074	ArgumentList	saveSlotPageSize
>15075	Argument	saveSlotPageSize
>15076	Identifier	saveSlotPageSize
>15077	Callee	saveSlots . resize
>15078	MemberAccess	saveSlots . resize
>15079	Identifier	resize
>15080	Identifier	saveSlots
>15081	ForStatement	for ( int i = 0 ; i < saveSlots . size ( ) ; i ++ )
>15082	CompoundStatement	 
>15083	ExpressionStatement	 
>15084	CallExpression	saveSlots [ i ] -> safeKill ( )
>15085	ArgumentList	 
>15086	Callee	saveSlots [ i ] -> safeKill
>15087	PtrMemberAccess	saveSlots [ i ] -> safeKill
>15088	Identifier	safeKill
>15089	ArrayIndexing	saveSlots [ i ]
>15090	Identifier	i
>15091	Identifier	saveSlots
>15092	IncDecOp	 
>15093	IncDec	++
>15094	Identifier	i
>15095	Condition	 
>15096	RelationalExpression	i < saveSlots . size ( )
>15097	CallExpression	saveSlots . size ( )
>15098	ArgumentList	 
>15099	Callee	saveSlots . size
>15100	MemberAccess	saveSlots . size
>15101	Identifier	size
>15102	Identifier	saveSlots
>15103	Identifier	i
>15104	ForInit	 
>15105	IdentifierDeclStatement	int i = 0 ;
>15106	IdentifierDecl	i = 0
>15107	AssignmentExpr	i = 0
>15108	PrimaryExpression	0
>15109	Identifier	i
>15110	Identifier	i
>15111	IdentifierDeclType	int
>15140	FunctionDef	DSQ 
>15141	ParameterList	 
>15142	ReturnType	void
>15143	CompoundStatement	 
>15144	ExpressionStatement	 
>15145	CallExpression	updateSaveSlotPageCount ( )
>15146	ArgumentList	 
>15147	Callee	updateSaveSlotPageCount
>15148	Identifier	updateSaveSlotPageCount
>15149	ExpressionStatement	 
>15150	CallExpression	createSaveSlotPage ( )
>15151	ArgumentList	 
>15152	Callee	createSaveSlotPage
>15153	Identifier	createSaveSlotPage
>15154	IfStatement	if ( user . data . savePage > maxPages )
>15155	ExpressionStatement	 
>15156	AssignmentExpr	user . data . savePage = 0
>15157	PrimaryExpression	0
>15158	MemberAccess	user . data . savePage
>15159	Identifier	savePage
>15160	MemberAccess	user . data
>15161	Identifier	data
>15162	Identifier	user
>15163	Condition	 
>15164	RelationalExpression	user . data . savePage > maxPages
>15165	Identifier	maxPages
>15166	MemberAccess	user . data . savePage
>15167	Identifier	savePage
>15168	MemberAccess	user . data
>15169	Identifier	data
>15170	Identifier	user
>15171	ExpressionStatement	 
>15172	IncDecOp	user . data . savePage ++
>15173	IncDec	++
>15174	MemberAccess	user . data . savePage
>15175	Identifier	savePage
>15176	MemberAccess	user . data
>15177	Identifier	data
>15178	Identifier	user
>15179	IfStatement	if ( saveSlots . empty ( ) )
>15180	ReturnStatement	 
>15181	Condition	 
>15182	CallExpression	saveSlots . empty ( )
>15183	ArgumentList	 
>15184	Callee	saveSlots . empty
>15185	MemberAccess	saveSlots . empty
>15186	Identifier	empty
>15187	Identifier	saveSlots
>15197	FunctionDef	DSQ 
>15198	ParameterList	 
>15199	ReturnType	void
>15200	CompoundStatement	 
>15201	ExpressionStatement	 
>15202	CallExpression	updateSaveSlotPageCount ( )
>15203	ArgumentList	 
>15204	Callee	updateSaveSlotPageCount
>15205	Identifier	updateSaveSlotPageCount
>15206	ExpressionStatement	 
>15207	CallExpression	createSaveSlotPage ( )
>15208	ArgumentList	 
>15209	Callee	createSaveSlotPage
>15210	Identifier	createSaveSlotPage
>15211	IfStatement	if ( user . data . savePage < 0 )
>15212	ExpressionStatement	 
>15213	AssignmentExpr	user . data . savePage = maxPages
>15214	Identifier	maxPages
>15215	MemberAccess	user . data . savePage
>15216	Identifier	savePage
>15217	MemberAccess	user . data
>15218	Identifier	data
>15219	Identifier	user
>15220	Condition	 
>15221	RelationalExpression	user . data . savePage < 0
>15222	PrimaryExpression	0
>15223	MemberAccess	user . data . savePage
>15224	Identifier	savePage
>15225	MemberAccess	user . data
>15226	Identifier	data
>15227	Identifier	user
>15228	ExpressionStatement	 
>15229	IncDecOp	user . data . savePage --
>15230	IncDec	--
>15231	MemberAccess	user . data . savePage
>15232	Identifier	savePage
>15233	MemberAccess	user . data
>15234	Identifier	data
>15235	Identifier	user
>15236	IfStatement	if ( saveSlots . empty ( ) )
>15237	ReturnStatement	 
>15238	Condition	 
>15239	CallExpression	saveSlots . empty ( )
>15240	ArgumentList	 
>15241	Callee	saveSlots . empty
>15242	MemberAccess	saveSlots . empty
>15243	Identifier	empty
>15244	Identifier	saveSlots
>15254	FunctionDef	DSQ 
>15255	ParameterList	 
>15256	ReturnType	void
>15257	CompoundStatement	 
>15258	IfStatement	if ( saveSlotPageCount )
>15259	ExpressionStatement	 
>15260	AssignmentExpr	saveSlotPageCount -> alpha = 0
>15261	PrimaryExpression	0
>15262	PtrMemberAccess	saveSlotPageCount -> alpha
>15263	Identifier	alpha
>15264	Identifier	saveSlotPageCount
>15265	Condition	 
>15266	Identifier	saveSlotPageCount
>15267	IfStatement	if ( blackout )
>15268	ExpressionStatement	 
>15269	AssignmentExpr	blackout -> alpha = 0
>15270	PrimaryExpression	0
>15271	PtrMemberAccess	blackout -> alpha
>15272	Identifier	alpha
>15273	Identifier	blackout
>15274	Condition	 
>15275	Identifier	blackout
>15276	ExpressionStatement	 
>15277	CallExpression	clearMenu ( )
>15278	ArgumentList	 
>15279	Callee	clearMenu
>15280	Identifier	clearMenu
>15290	FunctionDef	DSQ 
>15291	ParameterList	bool trans
>15292	Parameter	 
>15293	Identifier	trans
>15294	ParameterType	bool
>15295	ReturnType	void
>15296	CompoundStatement	 
>15297	IfStatement	if ( dsq -> game -> miniMapRender )
>15298	ExpressionStatement	 
>15299	CallExpression	dsq -> game -> miniMapRender -> slide ( 0 )
>15300	ArgumentList	0
>15301	Argument	0
>15302	PrimaryExpression	0
>15303	Callee	dsq -> game -> miniMapRender -> slide
>15304	PtrMemberAccess	dsq -> game -> miniMapRender -> slide
>15305	Identifier	slide
>15306	PtrMemberAccess	dsq -> game -> miniMapRender
>15307	Identifier	miniMapRender
>15308	PtrMemberAccess	dsq -> game
>15309	Identifier	game
>15310	Identifier	dsq
>15311	Condition	 
>15312	PtrMemberAccess	dsq -> game -> miniMapRender
>15313	Identifier	miniMapRender
>15314	PtrMemberAccess	dsq -> game
>15315	Identifier	game
>15316	Identifier	dsq
>15317	ExpressionStatement	 
>15318	CallExpression	clearMenu ( )
>15319	ArgumentList	 
>15320	Callee	clearMenu
>15321	Identifier	clearMenu
>15322	IfStatement	if ( trans )
>15323	CompoundStatement	 
>15324	ExpressionStatement	 
>15325	AssignmentExpr	disableMiniMapOnNoInput = true
>15326	Identifier	true
>15327	Identifier	disableMiniMapOnNoInput
>15328	IfStatement	if ( menu . size ( ) >= 2 )
>15329	CompoundStatement	 
>15330	ExpressionStatement	 
>15331	CallExpression	watch ( t )
>15332	ArgumentList	t
>15333	Argument	t
>15334	Identifier	t
>15335	Callee	watch
>15336	Identifier	watch
>15337	ExpressionStatement	 
>15338	CallExpression	menu [ 1 ] -> alpha . interpolateTo ( 0 , t )
>15339	ArgumentList	0
>15340	Argument	t
>15341	Identifier	t
>15342	Argument	0
>15343	PrimaryExpression	0
>15344	Callee	menu [ 1 ] -> alpha . interpolateTo
>15345	MemberAccess	menu [ 1 ] -> alpha . interpolateTo
>15346	Identifier	interpolateTo
>15347	PtrMemberAccess	menu [ 1 ] -> alpha
>15348	Identifier	alpha
>15349	ArrayIndexing	menu [ 1 ]
>15350	PrimaryExpression	1
>15351	Identifier	menu
>15352	ExpressionStatement	 
>15353	CallExpression	menu [ 1 ] -> scale . interpolateTo ( savesz * 0.5f , t )
>15354	ArgumentList	savesz * 0.5f
>15355	Argument	t
>15356	Identifier	t
>15357	Argument	savesz * 0.5f
>15358	MultiplicativeExpression	savesz * 0.5f
>15359	PrimaryExpression	0.5f
>15360	Identifier	savesz
>15361	Callee	menu [ 1 ] -> scale . interpolateTo
>15362	MemberAccess	menu [ 1 ] -> scale . interpolateTo
>15363	Identifier	interpolateTo
>15364	PtrMemberAccess	menu [ 1 ] -> scale
>15365	Identifier	scale
>15366	ArrayIndexing	menu [ 1 ]
>15367	PrimaryExpression	1
>15368	Identifier	menu
>15369	Condition	 
>15370	RelationalExpression	menu . size ( ) >= 2
>15371	PrimaryExpression	2
>15372	CallExpression	menu . size ( )
>15373	ArgumentList	 
>15374	Callee	menu . size
>15375	MemberAccess	menu . size
>15376	Identifier	size
>15377	Identifier	menu
>15378	ForStatement	for ( int i = 0 ; i < menu . size ( ) ; i ++ )
>15379	CompoundStatement	 
>15380	IfStatement	if ( i != 1 )
>15381	CompoundStatement	 
>15382	ExpressionStatement	 
>15383	AssignmentExpr	menu [ i ] -> alpha = 0
>15384	PrimaryExpression	0
>15385	PtrMemberAccess	menu [ i ] -> alpha
>15386	Identifier	alpha
>15387	ArrayIndexing	menu [ i ]
>15388	Identifier	i
>15389	Identifier	menu
>15390	Condition	 
>15391	EqualityExpression	i != 1
>15392	PrimaryExpression	1
>15393	Identifier	i
>15394	IncDecOp	 
>15395	IncDec	++
>15396	Identifier	i
>15397	Condition	 
>15398	RelationalExpression	i < menu . size ( )
>15399	CallExpression	menu . size ( )
>15400	ArgumentList	 
>15401	Callee	menu . size
>15402	MemberAccess	menu . size
>15403	Identifier	size
>15404	Identifier	menu
>15405	Identifier	i
>15406	ForInit	 
>15407	IdentifierDeclStatement	int i = 0 ;
>15408	IdentifierDecl	i = 0
>15409	AssignmentExpr	i = 0
>15410	PrimaryExpression	0
>15411	Identifier	i
>15412	Identifier	i
>15413	IdentifierDeclType	int
>15414	ExpressionStatement	 
>15415	AssignmentExpr	disableMiniMapOnNoInput = false
>15416	Identifier	false
>15417	Identifier	disableMiniMapOnNoInput
>15418	Condition	 
>15419	Identifier	trans
>15420	ExpressionStatement	 
>15421	CallExpression	saveSlots . clear ( )
>15422	ArgumentList	 
>15423	Callee	saveSlots . clear
>15424	MemberAccess	saveSlots . clear
>15425	Identifier	clear
>15426	Identifier	saveSlots
>15427	ForStatement	for ( int i = 0 ; i < saveSlots . size ( ) ; i ++ )
>15428	CompoundStatement	 
>15429	ExpressionStatement	 
>15430	CallExpression	saveSlots [ i ] -> close ( trans )
>15431	ArgumentList	trans
>15432	Argument	trans
>15433	Identifier	trans
>15434	Callee	saveSlots [ i ] -> close
>15435	PtrMemberAccess	saveSlots [ i ] -> close
>15436	Identifier	close
>15437	ArrayIndexing	saveSlots [ i ]
>15438	Identifier	i
>15439	Identifier	saveSlots
>15440	IncDecOp	 
>15441	IncDec	++
>15442	Identifier	i
>15443	Condition	 
>15444	RelationalExpression	i < saveSlots . size ( )
>15445	CallExpression	saveSlots . size ( )
>15446	ArgumentList	 
>15447	Callee	saveSlots . size
>15448	MemberAccess	saveSlots . size
>15449	Identifier	size
>15450	Identifier	saveSlots
>15451	Identifier	i
>15452	ForInit	 
>15453	IdentifierDeclStatement	int i = 0 ;
>15454	IdentifierDecl	i = 0
>15455	AssignmentExpr	i = 0
>15456	PrimaryExpression	0
>15457	Identifier	i
>15458	Identifier	i
>15459	IdentifierDeclType	int
>15460	IfStatement	if ( saveSlotPageCount )
>15461	CompoundStatement	 
>15462	IfStatement	if ( saveSlotPageCount -> alpha . x > 0 )
>15463	ExpressionStatement	 
>15464	AssignmentExpr	saveSlotPageCount -> fadeAlphaWithLife = 1
>15465	PrimaryExpression	1
>15466	PtrMemberAccess	saveSlotPageCount -> fadeAlphaWithLife
>15467	Identifier	fadeAlphaWithLife
>15468	Identifier	saveSlotPageCount
>15469	Condition	 
>15470	RelationalExpression	saveSlotPageCount -> alpha . x > 0
>15471	PrimaryExpression	0
>15472	MemberAccess	saveSlotPageCount -> alpha . x
>15473	Identifier	x
>15474	PtrMemberAccess	saveSlotPageCount -> alpha
>15475	Identifier	alpha
>15476	Identifier	saveSlotPageCount
>15477	ExpressionStatement	 
>15478	CallExpression	saveSlotPageCount -> setDecayRate ( 10 )
>15479	ArgumentList	10
>15480	Argument	10
>15481	PrimaryExpression	10
>15482	Callee	saveSlotPageCount -> setDecayRate
>15483	PtrMemberAccess	saveSlotPageCount -> setDecayRate
>15484	Identifier	setDecayRate
>15485	Identifier	saveSlotPageCount
>15486	ExpressionStatement	 
>15487	CallExpression	saveSlotPageCount -> setLife ( 1 )
>15488	ArgumentList	1
>15489	Argument	1
>15490	PrimaryExpression	1
>15491	Callee	saveSlotPageCount -> setLife
>15492	PtrMemberAccess	saveSlotPageCount -> setLife
>15493	Identifier	setLife
>15494	Identifier	saveSlotPageCount
>15495	Condition	 
>15496	Identifier	saveSlotPageCount
>15497	IfStatement	if ( blackout )
>15498	CompoundStatement	 
>15499	IfStatement	if ( ! trans )
>15500	ElseStatement	else
>15501	CompoundStatement	 
>15502	IfStatement	if ( blackout -> alpha . x > 0 )
>15503	ExpressionStatement	 
>15504	AssignmentExpr	blackout -> fadeAlphaWithLife = 1
>15505	PrimaryExpression	1
>15506	PtrMemberAccess	blackout -> fadeAlphaWithLife
>15507	Identifier	fadeAlphaWithLife
>15508	Identifier	blackout
>15509	Condition	 
>15510	RelationalExpression	blackout -> alpha . x > 0
>15511	PrimaryExpression	0
>15512	MemberAccess	blackout -> alpha . x
>15513	Identifier	x
>15514	PtrMemberAccess	blackout -> alpha
>15515	Identifier	alpha
>15516	Identifier	blackout
>15517	ExpressionStatement	 
>15518	CallExpression	blackout -> setDecayRate ( 1 )
>15519	ArgumentList	1
>15520	Argument	1
>15521	PrimaryExpression	1
>15522	Callee	blackout -> setDecayRate
>15523	PtrMemberAccess	blackout -> setDecayRate
>15524	Identifier	setDecayRate
>15525	Identifier	blackout
>15526	ExpressionStatement	 
>15527	CallExpression	blackout -> setLife ( 1 )
>15528	ArgumentList	1
>15529	Argument	1
>15530	PrimaryExpression	1
>15531	Callee	blackout -> setLife
>15532	PtrMemberAccess	blackout -> setLife
>15533	Identifier	setLife
>15534	Identifier	blackout
>15535	CompoundStatement	 
>15536	IfStatement	if ( blackout -> alpha . x > 0 )
>15537	ExpressionStatement	 
>15538	AssignmentExpr	blackout -> fadeAlphaWithLife = 1
>15539	PrimaryExpression	1
>15540	PtrMemberAccess	blackout -> fadeAlphaWithLife
>15541	Identifier	fadeAlphaWithLife
>15542	Identifier	blackout
>15543	Condition	 
>15544	RelationalExpression	blackout -> alpha . x > 0
>15545	PrimaryExpression	0
>15546	MemberAccess	blackout -> alpha . x
>15547	Identifier	x
>15548	PtrMemberAccess	blackout -> alpha
>15549	Identifier	alpha
>15550	Identifier	blackout
>15551	ExpressionStatement	 
>15552	CallExpression	blackout -> setDecayRate ( 10 )
>15553	ArgumentList	10
>15554	Argument	10
>15555	PrimaryExpression	10
>15556	Callee	blackout -> setDecayRate
>15557	PtrMemberAccess	blackout -> setDecayRate
>15558	Identifier	setDecayRate
>15559	Identifier	blackout
>15560	ExpressionStatement	 
>15561	CallExpression	blackout -> setLife ( 1 )
>15562	ArgumentList	1
>15563	Argument	1
>15564	PrimaryExpression	1
>15565	Callee	blackout -> setLife
>15566	PtrMemberAccess	blackout -> setLife
>15567	Identifier	setLife
>15568	Identifier	blackout
>15569	Condition	 
>15570	UnaryOp	! trans
>15571	Identifier	trans
>15572	UnaryOperator	!
>15573	Condition	 
>15574	Identifier	blackout
>15575	IdentifierDeclStatement	 
>15576	IdentifierDecl	t = 0.3
>15577	AssignmentExpr	t = 0.3
>15578	PrimaryExpression	0.3
>15579	Identifier	t
>15580	Identifier	t
>15581	IdentifierDeclType	float
>15582	IfStatement	if ( trans )
>15583	CompoundStatement	 
>15584	ExpressionStatement	 
>15585	CallExpression	core -> sound -> playSfx ( \"menu-close\" )
>15586	ArgumentList	\"menu-close\"
>15587	Argument	\"menu-close\"
>15588	PrimaryExpression	\"menu-close\"
>15589	Callee	core -> sound -> playSfx
>15590	PtrMemberAccess	core -> sound -> playSfx
>15591	Identifier	playSfx
>15592	PtrMemberAccess	core -> sound
>15593	Identifier	sound
>15594	Identifier	core
>15595	Condition	 
>15596	Identifier	trans
>15638	FunctionDef	DSQ 
>15639	ParameterList	 
>15640	ReturnType	void
>15641	CompoundStatement	 
>15642	ForStatement	for ( int i = 0 ; i < saveSlots . size ( ) ; i ++ )
>15643	CompoundStatement	 
>15644	ExpressionStatement	 
>15645	CallExpression	saveSlots [ i ] -> hide ( )
>15646	ArgumentList	 
>15647	Callee	saveSlots [ i ] -> hide
>15648	PtrMemberAccess	saveSlots [ i ] -> hide
>15649	Identifier	hide
>15650	ArrayIndexing	saveSlots [ i ]
>15651	Identifier	i
>15652	Identifier	saveSlots
>15653	IncDecOp	 
>15654	IncDec	++
>15655	Identifier	i
>15656	Condition	 
>15657	RelationalExpression	i < saveSlots . size ( )
>15658	CallExpression	saveSlots . size ( )
>15659	ArgumentList	 
>15660	Callee	saveSlots . size
>15661	MemberAccess	saveSlots . size
>15662	Identifier	size
>15663	Identifier	saveSlots
>15664	Identifier	i
>15665	ForInit	 
>15666	IdentifierDeclStatement	int i = 0 ;
>15667	IdentifierDecl	i = 0
>15668	AssignmentExpr	i = 0
>15669	PrimaryExpression	0
>15670	Identifier	i
>15671	Identifier	i
>15672	IdentifierDeclType	int
>15681	FunctionDef	DSQ 
>15682	ParameterList	 
>15683	ReturnType	void
>15684	CompoundStatement	 
>15685	ForStatement	for ( int i = 0 ; i < saveSlots . size ( ) ; i ++ )
>15686	CompoundStatement	 
>15687	ExpressionStatement	 
>15688	CallExpression	saveSlots [ i ] -> transition ( )
>15689	ArgumentList	 
>15690	Callee	saveSlots [ i ] -> transition
>15691	PtrMemberAccess	saveSlots [ i ] -> transition
>15692	Identifier	transition
>15693	ArrayIndexing	saveSlots [ i ]
>15694	Identifier	i
>15695	Identifier	saveSlots
>15696	IncDecOp	 
>15697	IncDec	++
>15698	Identifier	i
>15699	Condition	 
>15700	RelationalExpression	i < saveSlots . size ( )
>15701	CallExpression	saveSlots . size ( )
>15702	ArgumentList	 
>15703	Callee	saveSlots . size
>15704	MemberAccess	saveSlots . size
>15705	Identifier	size
>15706	Identifier	saveSlots
>15707	Identifier	i
>15708	ForInit	 
>15709	IdentifierDeclStatement	int i = 0 ;
>15710	IdentifierDecl	i = 0
>15711	AssignmentExpr	i = 0
>15712	PrimaryExpression	0
>15713	Identifier	i
>15714	Identifier	i
>15715	IdentifierDeclType	int
>15716	ExpressionStatement	 
>15717	CallExpression	hideSaveSlotCrap ( )
>15718	ArgumentList	 
>15719	Callee	hideSaveSlotCrap
>15720	Identifier	hideSaveSlotCrap
>15729	FunctionDef	DSQ 
>15730	ParameterList	SaveSlotMode ssm , const Vector & position
>15731	Parameter	 
>15732	Identifier	position
>15733	ParameterType	const Vector &
>15734	Parameter	 
>15735	Identifier	ssm
>15736	ParameterType	SaveSlotMode
>15737	ReturnType	void
>15738	CompoundStatement	 
>15739	ExpressionStatement	 
>15740	AssignmentExpr	saveSlotMode = SSM_NONE
>15741	Identifier	SSM_NONE
>15742	Identifier	saveSlotMode
>15743	ExpressionStatement	 
>15744	Identifier	scrShotData
>15745	Statement	 
>15746	Statement	 
>15747	Statement	 
>15748	ExpressionStatement	 
>15749	CallExpression	resetTimer ( )
>15750	ArgumentList	 
>15751	Callee	resetTimer
>15752	Identifier	resetTimer
>15753	IfStatement	if ( selectedSaveSlot == 0 )
>15754	ElseStatement	else
>15755	CompoundStatement	 
>15756	IfStatement	if ( saveSlotMode == SSM_SAVE )
>15757	ElseStatement	else
>15758	IfStatement	if ( saveSlotMode == SSM_LOAD )
>15759	CompoundStatement	 
>15760	ExpressionStatement	 
>15761	CallExpression	dsq -> game -> transitionToScene ( dsq -> game -> sceneToLoad )
>15762	ArgumentList	dsq -> game -> sceneToLoad
>15763	Argument	dsq -> game -> sceneToLoad
>15764	PtrMemberAccess	dsq -> game -> sceneToLoad
>15765	Identifier	sceneToLoad
>15766	PtrMemberAccess	dsq -> game
>15767	Identifier	game
>15768	Identifier	dsq
>15769	Callee	dsq -> game -> transitionToScene
>15770	PtrMemberAccess	dsq -> game -> transitionToScene
>15771	Identifier	transitionToScene
>15772	PtrMemberAccess	dsq -> game
>15773	Identifier	game
>15774	Identifier	dsq
>15775	ExpressionStatement	 
>15776	CallExpression	continuity . loadFile ( selectedSaveSlot -> getSlotIndex ( ) )
>15777	ArgumentList	selectedSaveSlot -> getSlotIndex ( )
>15778	Argument	selectedSaveSlot -> getSlotIndex ( )
>15779	CallExpression	selectedSaveSlot -> getSlotIndex ( )
>15780	ArgumentList	 
>15781	Callee	selectedSaveSlot -> getSlotIndex
>15782	PtrMemberAccess	selectedSaveSlot -> getSlotIndex
>15783	Identifier	getSlotIndex
>15784	Identifier	selectedSaveSlot
>15785	Callee	continuity . loadFile
>15786	MemberAccess	continuity . loadFile
>15787	Identifier	loadFile
>15788	Identifier	continuity
>15789	Condition	 
>15790	EqualityExpression	saveSlotMode == SSM_LOAD
>15791	Identifier	SSM_LOAD
>15792	Identifier	saveSlotMode
>15793	CompoundStatement	 
>15794	ExpressionStatement	 
>15795	CallExpression	clearSaveSlots ( true )
>15796	ArgumentList	true
>15797	Argument	true
>15798	Identifier	true
>15799	Callee	clearSaveSlots
>15800	Identifier	clearSaveSlots
>15801	ExpressionStatement	 
>15802	CallExpression	confirm ( \"\" , \"saved\" , 1 )
>15803	ArgumentList	\"\"
>15804	Argument	1
>15805	PrimaryExpression	1
>15806	Argument	\"saved\"
>15807	PrimaryExpression	\"saved\"
>15808	Argument	\"\"
>15809	PrimaryExpression	\"\"
>15810	Callee	confirm
>15811	Identifier	confirm
>15812	ExpressionStatement	 
>15813	CallExpression	dsq -> sound -> playSfx ( sfx )
>15814	ArgumentList	sfx
>15815	Argument	sfx
>15816	Identifier	sfx
>15817	Callee	dsq -> sound -> playSfx
>15818	PtrMemberAccess	dsq -> sound -> playSfx
>15819	Identifier	playSfx
>15820	PtrMemberAccess	dsq -> sound
>15821	Identifier	sound
>15822	Identifier	dsq
>15823	ExpressionStatement	 
>15824	AssignmentExpr	sfx . vol = 0.55
>15825	PrimaryExpression	0.55
>15826	MemberAccess	sfx . vol
>15827	Identifier	vol
>15828	Identifier	sfx
>15829	ExpressionStatement	 
>15830	AssignmentExpr	sfx . name = \"saved\"
>15831	PrimaryExpression	\"saved\"
>15832	MemberAccess	sfx . name
>15833	Identifier	name
>15834	Identifier	sfx
>15835	IdentifierDeclStatement	 
>15836	IdentifierDecl	sfx
>15837	Identifier	sfx
>15838	IdentifierDeclType	PlaySfx
>15839	IfStatement	if ( user . video . saveSlotScreens && scrShotData != 0 )
>15840	CompoundStatement	 
>15841	ExpressionStatement	 
>15842	AssignmentExpr	scrShotData = 0
>15843	PrimaryExpression	0
>15844	Identifier	scrShotData
>15845	ExpressionStatement	 
>15846	CallExpression	zgaSave ( os . str ( ) . c_str ( ) , scrShotWidth , scrShotHeight , 32 , scrShotData )
>15847	ArgumentList	os . str ( ) . c_str ( )
>15848	Argument	scrShotData
>15849	Identifier	scrShotData
>15850	Argument	32
>15851	PrimaryExpression	32
>15852	Argument	scrShotHeight
>15853	Identifier	scrShotHeight
>15854	Argument	scrShotWidth
>15855	Identifier	scrShotWidth
>15856	Argument	os . str ( ) . c_str ( )
>15857	CallExpression	os . str ( ) . c_str ( )
>15858	ArgumentList	 
>15859	Callee	os . str ( ) . c_str
>15860	MemberAccess	os . str ( ) . c_str
>15861	Identifier	c_str
>15862	CallExpression	os . str ( )
>15863	ArgumentList	 
>15864	Callee	os . str
>15865	MemberAccess	os . str
>15866	Identifier	str
>15867	Identifier	os
>15868	Callee	zgaSave
>15869	Identifier	zgaSave
>15870	ExpressionStatement	 
>15871	CallExpression	memset ( scrShotData + adjImageSize , 0 , imageDataSize - adjImageSize )
>15872	ArgumentList	scrShotData + adjImageSize
>15873	Argument	imageDataSize - adjImageSize
>15874	AdditiveExpression	imageDataSize - adjImageSize
>15875	Identifier	adjImageSize
>15876	Identifier	imageDataSize
>15877	Argument	0
>15878	PrimaryExpression	0
>15879	Argument	scrShotData + adjImageSize
>15880	AdditiveExpression	scrShotData + adjImageSize
>15881	Identifier	adjImageSize
>15882	Identifier	scrShotData
>15883	Callee	memset
>15884	Identifier	memset
>15885	ExpressionStatement	 
>15886	CallExpression	memmove ( scrShotData , scrShotData + adjOffset , adjImageSize )
>15887	ArgumentList	scrShotData
>15888	Argument	adjImageSize
>15889	Identifier	adjImageSize
>15890	Argument	scrShotData + adjOffset
>15891	AdditiveExpression	scrShotData + adjOffset
>15892	Identifier	adjOffset
>15893	Identifier	scrShotData
>15894	Argument	scrShotData
>15895	Identifier	scrShotData
>15896	Callee	memmove
>15897	Identifier	memmove
>15898	IdentifierDeclStatement	 
>15899	IdentifierDecl	adjOffset = scrShotWidth * ( ( scrShotHeight - adjHeight ) / 2 ) * 4
>15900	AssignmentExpr	adjOffset = scrShotWidth * ( ( scrShotHeight - adjHeight ) / 2 ) * 4
>15901	MultiplicativeExpression	scrShotWidth * ( ( scrShotHeight - adjHeight ) / 2 ) * 4
>15902	MultiplicativeExpression	( ( scrShotHeight - adjHeight ) / 2 ) * 4
>15903	PrimaryExpression	4
>15904	MultiplicativeExpression	( scrShotHeight - adjHeight ) / 2
>15905	PrimaryExpression	2
>15906	AdditiveExpression	scrShotHeight - adjHeight
>15907	Identifier	adjHeight
>15908	Identifier	scrShotHeight
>15909	Identifier	scrShotWidth
>15910	Identifier	adjOffset
>15911	Identifier	adjOffset
>15912	IdentifierDeclType	int
>15913	IdentifierDeclStatement	 
>15914	IdentifierDecl	adjImageSize = scrShotWidth * adjHeight * 4
>15915	AssignmentExpr	adjImageSize = scrShotWidth * adjHeight * 4
>15916	MultiplicativeExpression	scrShotWidth * adjHeight * 4
>15917	MultiplicativeExpression	adjHeight * 4
>15918	PrimaryExpression	4
>15919	Identifier	adjHeight
>15920	Identifier	scrShotWidth
>15921	Identifier	adjImageSize
>15922	Identifier	adjImageSize
>15923	IdentifierDeclType	int
>15924	IdentifierDeclStatement	 
>15925	IdentifierDecl	imageDataSize = scrShotWidth * scrShotHeight * 4
>15926	AssignmentExpr	imageDataSize = scrShotWidth * scrShotHeight * 4
>15927	MultiplicativeExpression	scrShotWidth * scrShotHeight * 4
>15928	MultiplicativeExpression	scrShotHeight * 4
>15929	PrimaryExpression	4
>15930	Identifier	scrShotHeight
>15931	Identifier	scrShotWidth
>15932	Identifier	imageDataSize
>15933	Identifier	imageDataSize
>15934	IdentifierDeclType	int
>15935	IdentifierDeclStatement	 
>15936	IdentifierDecl	adjHeight = ( scrShotWidth * 3.0f ) / 4.0f
>15937	AssignmentExpr	adjHeight = ( scrShotWidth * 3.0f ) / 4.0f
>15938	MultiplicativeExpression	( scrShotWidth * 3.0f ) / 4.0f
>15939	PrimaryExpression	4.0f
>15940	MultiplicativeExpression	scrShotWidth * 3.0f
>15941	PrimaryExpression	3.0f
>15942	Identifier	scrShotWidth
>15943	Identifier	adjHeight
>15944	Identifier	adjHeight
>15945	IdentifierDeclType	int
>15946	ExpressionStatement	 
>15947	ShiftExpression	os << dsq -> getSaveDirectory ( ) << \"/screen-\" << numToZeroString ( selectedSaveSlot -> getSlotIndex ( ) , \
>15948	ShiftExpression	dsq -> getSaveDirectory ( ) << \"/screen-\" << numToZeroString ( selectedSaveSlot -> getSlotIndex ( ) , \
>15949	ShiftExpression	\"/screen-\" << numToZeroString ( selectedSaveSlot -> getSlotIndex ( ) , 4 ) << \".zga\"
>15950	ShiftExpression	numToZeroString ( selectedSaveSlot -> getSlotIndex ( ) , 4 ) << \".zga\"
>15951	PrimaryExpression	\".zga\"
>15952	CallExpression	numToZeroString ( selectedSaveSlot -> getSlotIndex ( ) , 4 )
>15953	ArgumentList	selectedSaveSlot -> getSlotIndex ( )
>15954	Argument	4
>15955	PrimaryExpression	4
>15956	Argument	selectedSaveSlot -> getSlotIndex ( )
>15957	CallExpression	selectedSaveSlot -> getSlotIndex ( )
>15958	ArgumentList	 
>15959	Callee	selectedSaveSlot -> getSlotIndex
>15960	PtrMemberAccess	selectedSaveSlot -> getSlotIndex
>15961	Identifier	getSlotIndex
>15962	Identifier	selectedSaveSlot
>15963	Callee	numToZeroString
>15964	Identifier	numToZeroString
>15965	PrimaryExpression	\"/screen-\"
>15966	CallExpression	dsq -> getSaveDirectory ( )
>15967	ArgumentList	 
>15968	Callee	dsq -> getSaveDirectory
>15969	PtrMemberAccess	dsq -> getSaveDirectory
>15970	Identifier	getSaveDirectory
>15971	Identifier	dsq
>15972	Identifier	os
>15973	IdentifierDeclStatement	 
>15974	IdentifierDecl	os
>15975	Identifier	os
>15976	IdentifierDeclType	std 
>15977	Condition	 
>15978	AndExpression	user . video . saveSlotScreens && scrShotData != 0
>15979	EqualityExpression	scrShotData != 0
>15980	PrimaryExpression	0
>15981	Identifier	scrShotData
>15982	MemberAccess	user . video . saveSlotScreens
>15983	Identifier	saveSlotScreens
>15984	MemberAccess	user . video
>15985	Identifier	video
>15986	Identifier	user
>15987	ExpressionStatement	 
>15988	CallExpression	continuity . saveFile ( selectedSaveSlot -> getSlotIndex ( ) , position , scrShotData , scrShotWidth , scrShotHeight )
>15989	ArgumentList	selectedSaveSlot -> getSlotIndex ( )
>15990	Argument	scrShotHeight
>15991	Identifier	scrShotHeight
>15992	Argument	scrShotWidth
>15993	Identifier	scrShotWidth
>15994	Argument	scrShotData
>15995	Identifier	scrShotData
>15996	Argument	position
>15997	Identifier	position
>15998	Argument	selectedSaveSlot -> getSlotIndex ( )
>15999	CallExpression	selectedSaveSlot -> getSlotIndex ( )
>16000	ArgumentList	 
>16001	Callee	selectedSaveSlot -> getSlotIndex
>16002	PtrMemberAccess	selectedSaveSlot -> getSlotIndex
>16003	Identifier	getSlotIndex
>16004	Identifier	selectedSaveSlot
>16005	Callee	continuity . saveFile
>16006	MemberAccess	continuity . saveFile
>16007	Identifier	saveFile
>16008	Identifier	continuity
>16009	Condition	 
>16010	EqualityExpression	saveSlotMode == SSM_SAVE
>16011	Identifier	SSM_SAVE
>16012	Identifier	saveSlotMode
>16013	ExpressionStatement	 
>16014	AssignmentExpr	user . data . saveSlot = recentSaveSlot
>16015	Identifier	recentSaveSlot
>16016	MemberAccess	user . data . saveSlot
>16017	Identifier	saveSlot
>16018	MemberAccess	user . data
>16019	Identifier	data
>16020	Identifier	user
>16021	ExpressionStatement	 
>16022	AssignmentExpr	recentSaveSlot = selectedSaveSlot -> getSlotIndex ( )
>16023	CallExpression	selectedSaveSlot -> getSlotIndex ( )
>16024	ArgumentList	 
>16025	Callee	selectedSaveSlot -> getSlotIndex
>16026	PtrMemberAccess	selectedSaveSlot -> getSlotIndex
>16027	Identifier	getSlotIndex
>16028	Identifier	selectedSaveSlot
>16029	Identifier	recentSaveSlot
>16030	ExpressionStatement	 
>16031	CallExpression	selectedSaveSlot -> setFocus ( false )
>16032	ArgumentList	false
>16033	Argument	false
>16034	Identifier	false
>16035	Callee	selectedSaveSlot -> setFocus
>16036	PtrMemberAccess	selectedSaveSlot -> setFocus
>16037	Identifier	setFocus
>16038	Identifier	selectedSaveSlot
>16039	CompoundStatement	 
>16040	IfStatement	if ( saveSlotMode == SSM_SAVE )
>16041	CompoundStatement	 
>16042	ExpressionStatement	 
>16043	CallExpression	clearSaveSlots ( true )
>16044	ArgumentList	true
>16045	Argument	true
>16046	Identifier	true
>16047	Callee	clearSaveSlots
>16048	Identifier	clearSaveSlots
>16049	Condition	 
>16050	EqualityExpression	saveSlotMode == SSM_SAVE
>16051	Identifier	SSM_SAVE
>16052	Identifier	saveSlotMode
>16053	Condition	 
>16054	EqualityExpression	selectedSaveSlot == 0
>16055	PrimaryExpression	0
>16056	Identifier	selectedSaveSlot
>16057	ExpressionStatement	 
>16058	CallExpression	core -> main ( - 1 )
>16059	ArgumentList	- 1
>16060	Argument	- 1
>16061	UnaryOp	- 1
>16062	PrimaryExpression	1
>16063	UnaryOperator	-
>16064	Callee	core -> main
>16065	PtrMemberAccess	core -> main
>16066	Identifier	main
>16067	Identifier	core
>16068	ExpressionStatement	 
>16069	CallExpression	resetTimer ( )
>16070	ArgumentList	 
>16071	Callee	resetTimer
>16072	Identifier	resetTimer
>16073	ExpressionStatement	 
>16074	AssignmentExpr	saveSlotMode = ssm
>16075	Identifier	ssm
>16076	Identifier	saveSlotMode
>16077	IfStatement	if ( user . data . saveSlot >= firstSaveSlot && user . data . saveSlot < firstSaveSlot + saveSlots . size ( ) )
>16078	ElseStatement	else
>16079	CompoundStatement	 
>16080	ExpressionStatement	 
>16081	AssignmentExpr	selectedSaveSlot = 0
>16082	PrimaryExpression	0
>16083	Identifier	selectedSaveSlot
>16084	CompoundStatement	 
>16085	ExpressionStatement	 
>16086	CallExpression	selectedSaveSlot -> setFocus ( true )
>16087	ArgumentList	true
>16088	Argument	true
>16089	Identifier	true
>16090	Callee	selectedSaveSlot -> setFocus
>16091	PtrMemberAccess	selectedSaveSlot -> setFocus
>16092	Identifier	setFocus
>16093	Identifier	selectedSaveSlot
>16094	ExpressionStatement	 
>16095	AssignmentExpr	selectedSaveSlot = saveSlots [ user . data . saveSlot - firstSaveSlot ]
>16096	ArrayIndexing	saveSlots [ user . data . saveSlot - firstSaveSlot ]
>16097	AdditiveExpression	user . data . saveSlot - firstSaveSlot
>16098	Identifier	firstSaveSlot
>16099	MemberAccess	user . data . saveSlot
>16100	Identifier	saveSlot
>16101	MemberAccess	user . data
>16102	Identifier	data
>16103	Identifier	user
>16104	Identifier	saveSlots
>16105	Identifier	selectedSaveSlot
>16106	Condition	 
>16107	AndExpression	user . data . saveSlot >= firstSaveSlot && user . data . saveSlot < firstSaveSlot + saveSlots . size ( )
>16108	RelationalExpression	user . data . saveSlot < firstSaveSlot + saveSlots . size ( )
>16109	AdditiveExpression	firstSaveSlot + saveSlots . size ( )
>16110	CallExpression	saveSlots . size ( )
>16111	ArgumentList	 
>16112	Callee	saveSlots . size
>16113	MemberAccess	saveSlots . size
>16114	Identifier	size
>16115	Identifier	saveSlots
>16116	Identifier	firstSaveSlot
>16117	MemberAccess	user . data . saveSlot
>16118	Identifier	saveSlot
>16119	MemberAccess	user . data
>16120	Identifier	data
>16121	Identifier	user
>16122	RelationalExpression	user . data . saveSlot >= firstSaveSlot
>16123	Identifier	firstSaveSlot
>16124	MemberAccess	user . data . saveSlot
>16125	Identifier	saveSlot
>16126	MemberAccess	user . data
>16127	Identifier	data
>16128	Identifier	user
>16129	IdentifierDeclStatement	 
>16130	IdentifierDecl	firstSaveSlot = user . data . savePage * saveSlotPageSize
>16131	AssignmentExpr	firstSaveSlot = user . data . savePage * saveSlotPageSize
>16132	MultiplicativeExpression	user . data . savePage * saveSlotPageSize
>16133	Identifier	saveSlotPageSize
>16134	MemberAccess	user . data . savePage
>16135	Identifier	savePage
>16136	MemberAccess	user . data
>16137	Identifier	data
>16138	Identifier	user
>16139	Identifier	firstSaveSlot
>16140	Identifier	firstSaveSlot
>16141	IdentifierDeclType	const int
>16142	ExpressionStatement	 
>16143	CallExpression	createSaveSlots ( ssm )
>16144	ArgumentList	ssm
>16145	Argument	ssm
>16146	Identifier	ssm
>16147	Callee	createSaveSlots
>16148	Identifier	createSaveSlots
>16149	ExpressionStatement	 
>16150	AssignmentExpr	saveSlotMode = SSM_NONE
>16151	Identifier	SSM_NONE
>16152	Identifier	saveSlotMode
>16153	IfStatement	if ( ssm == SSM_SAVE && user . video . saveSlotScreens )
>16154	CompoundStatement	 
>16155	ExpressionStatement	 
>16156	CallExpression	prepScreen ( 0 )
>16157	ArgumentList	0
>16158	Argument	0
>16159	PrimaryExpression	0
>16160	Callee	prepScreen
>16161	Identifier	prepScreen
>16162	ExpressionStatement	 
>16163	CallExpression	showBuffer ( )
>16164	ArgumentList	 
>16165	Callee	showBuffer
>16166	Identifier	showBuffer
>16167	ExpressionStatement	 
>16168	CallExpression	glPopAttrib ( )
>16169	ArgumentList	 
>16170	Callee	glPopAttrib
>16171	Identifier	glPopAttrib
>16172	ExpressionStatement	 
>16173	AssignmentExpr	scrShotData = core -> grabScreenshot ( x , y , scrShotWidth , scrShotHeight )
>16174	CallExpression	core -> grabScreenshot ( x , y , scrShotWidth , scrShotHeight )
>16175	ArgumentList	x
>16176	Argument	scrShotHeight
>16177	Identifier	scrShotHeight
>16178	Argument	scrShotWidth
>16179	Identifier	scrShotWidth
>16180	Argument	y
>16181	Identifier	y
>16182	Argument	x
>16183	Identifier	x
>16184	Callee	core -> grabScreenshot
>16185	PtrMemberAccess	core -> grabScreenshot
>16186	Identifier	grabScreenshot
>16187	Identifier	core
>16188	Identifier	scrShotData
>16189	ExpressionStatement	 
>16190	CallExpression	render ( )
>16191	ArgumentList	 
>16192	Callee	render
>16193	Identifier	render
>16194	ExpressionStatement	 
>16195	CallExpression	clearBuffers ( )
>16196	ArgumentList	 
>16197	Callee	clearBuffers
>16198	Identifier	clearBuffers
>16199	ExpressionStatement	 
>16200	CallExpression	glViewport ( 0 , 0 , renderWidth , renderHeight )
>16201	ArgumentList	0
>16202	Argument	renderHeight
>16203	Identifier	renderHeight
>16204	Argument	renderWidth
>16205	Identifier	renderWidth
>16206	Argument	0
>16207	PrimaryExpression	0
>16208	Argument	0
>16209	PrimaryExpression	0
>16210	Callee	glViewport
>16211	Identifier	glViewport
>16212	ExpressionStatement	 
>16213	CallExpression	glPushAttrib ( GL_VIEWPORT_BIT )
>16214	ArgumentList	GL_VIEWPORT_BIT
>16215	Argument	GL_VIEWPORT_BIT
>16216	Identifier	GL_VIEWPORT_BIT
>16217	Callee	glPushAttrib
>16218	Identifier	glPushAttrib
>16219	IdentifierDeclStatement	 
>16220	IdentifierDecl	y = renderHeight / 2 - scrShotHeight / 2
>16221	AssignmentExpr	y = renderHeight / 2 - scrShotHeight / 2
>16222	AdditiveExpression	renderHeight / 2 - scrShotHeight / 2
>16223	MultiplicativeExpression	scrShotHeight / 2
>16224	PrimaryExpression	2
>16225	Identifier	scrShotHeight
>16226	MultiplicativeExpression	renderHeight / 2
>16227	PrimaryExpression	2
>16228	Identifier	renderHeight
>16229	Identifier	y
>16230	Identifier	y
>16231	IdentifierDeclType	int
>16232	IdentifierDeclStatement	 
>16233	IdentifierDecl	x = renderWidth / 2 - scrShotWidth / 2
>16234	AssignmentExpr	x = renderWidth / 2 - scrShotWidth / 2
>16235	AdditiveExpression	renderWidth / 2 - scrShotWidth / 2
>16236	MultiplicativeExpression	scrShotWidth / 2
>16237	PrimaryExpression	2
>16238	Identifier	scrShotWidth
>16239	MultiplicativeExpression	renderWidth / 2
>16240	PrimaryExpression	2
>16241	Identifier	renderWidth
>16242	Identifier	x
>16243	Identifier	x
>16244	IdentifierDeclType	int
>16245	ExpressionStatement	 
>16246	AssignmentExpr	scrShotWidth = scrShotHeight = 1 << ( i - 1 )
>16247	AssignmentExpr	scrShotHeight = 1 << ( i - 1 )
>16248	ShiftExpression	1 << ( i - 1 )
>16249	AdditiveExpression	i - 1
>16250	PrimaryExpression	1
>16251	Identifier	i
>16252	PrimaryExpression	1
>16253	Identifier	scrShotHeight
>16254	Identifier	scrShotWidth
>16255	WhileStatement	while ( 1 << i < renderHeight )
>16256	CompoundStatement	 
>16257	ExpressionStatement	 
>16258	IncDecOp	i ++
>16259	IncDec	++
>16260	Identifier	i
>16261	Condition	 
>16262	RelationalExpression	1 << i < renderHeight
>16263	Identifier	renderHeight
>16264	ShiftExpression	1 << i
>16265	Identifier	i
>16266	PrimaryExpression	1
>16267	IdentifierDeclStatement	 
>16268	IdentifierDecl	i = 2
>16269	AssignmentExpr	i = 2
>16270	PrimaryExpression	2
>16271	Identifier	i
>16272	Identifier	i
>16273	IdentifierDeclType	int
>16274	IdentifierDeclStatement	 
>16275	IdentifierDecl	renderHeight = getWindowHeight ( )
>16276	AssignmentExpr	renderHeight = getWindowHeight ( )
>16277	CallExpression	getWindowHeight ( )
>16278	ArgumentList	 
>16279	Callee	getWindowHeight
>16280	Identifier	getWindowHeight
>16281	Identifier	renderHeight
>16282	Identifier	renderHeight
>16283	IdentifierDeclType	int
>16284	IdentifierDecl	renderWidth = getWindowWidth ( )
>16285	AssignmentExpr	renderWidth = getWindowWidth ( )
>16286	CallExpression	getWindowWidth ( )
>16287	ArgumentList	 
>16288	Callee	getWindowWidth
>16289	Identifier	getWindowWidth
>16290	Identifier	renderWidth
>16291	Identifier	renderWidth
>16292	IdentifierDeclType	int
>16293	ExpressionStatement	 
>16294	CallExpression	prepScreen ( 1 )
>16295	ArgumentList	1
>16296	Argument	1
>16297	PrimaryExpression	1
>16298	Callee	prepScreen
>16299	Identifier	prepScreen
>16300	Condition	 
>16301	AndExpression	ssm == SSM_SAVE && user . video . saveSlotScreens
>16302	MemberAccess	user . video . saveSlotScreens
>16303	Identifier	saveSlotScreens
>16304	MemberAccess	user . video
>16305	Identifier	video
>16306	Identifier	user
>16307	EqualityExpression	ssm == SSM_SAVE
>16308	Identifier	SSM_SAVE
>16309	Identifier	ssm
>16310	IdentifierDeclStatement	 
>16311	IdentifierDecl	* scrShotData = 0
>16312	AssignmentExpr	* scrShotData = 0
>16313	PrimaryExpression	0
>16314	Identifier	scrShotData
>16315	Identifier	scrShotData
>16316	IdentifierDeclType	unsigned char *
>16317	IdentifierDeclStatement	 
>16318	IdentifierDecl	scrShotHeight = 0
>16319	AssignmentExpr	scrShotHeight = 0
>16320	PrimaryExpression	0
>16321	Identifier	scrShotHeight
>16322	Identifier	scrShotHeight
>16323	IdentifierDeclType	int
>16324	IdentifierDecl	scrShotWidth = 0
>16325	AssignmentExpr	scrShotWidth = 0
>16326	PrimaryExpression	0
>16327	Identifier	scrShotWidth
>16328	Identifier	scrShotWidth
>16329	IdentifierDeclType	int
>16392	FunctionDef	DSQ 
>16393	ParameterList	Entity * e
>16394	Parameter	 
>16395	Identifier	e
>16396	ParameterType	Entity *
>16397	ReturnType	std 
>16398	CompoundStatement	 
>16399	ReturnStatement	 
>16400	CallExpression	os . str ( )
>16401	ArgumentList	 
>16402	Callee	os . str
>16403	MemberAccess	os . str
>16404	Identifier	str
>16405	Identifier	os
>16406	ExpressionStatement	 
>16407	ShiftExpression	os << dsq -> game -> sceneName << e -> startPos . x << e -> startPos . y
>16408	ShiftExpression	dsq -> game -> sceneName << e -> startPos . x << e -> startPos . y
>16409	ShiftExpression	e -> startPos . x << e -> startPos . y
>16410	MemberAccess	e -> startPos . y
>16411	Identifier	y
>16412	PtrMemberAccess	e -> startPos
>16413	Identifier	startPos
>16414	Identifier	e
>16415	MemberAccess	e -> startPos . x
>16416	Identifier	x
>16417	PtrMemberAccess	e -> startPos
>16418	Identifier	startPos
>16419	Identifier	e
>16420	PtrMemberAccess	dsq -> game -> sceneName
>16421	Identifier	sceneName
>16422	PtrMemberAccess	dsq -> game
>16423	Identifier	game
>16424	Identifier	dsq
>16425	Identifier	os
>16426	IdentifierDeclStatement	 
>16427	IdentifierDecl	os
>16428	Identifier	os
>16429	IdentifierDeclType	std 
>16430	IfStatement	if ( ! dsq -> game )
>16431	ReturnStatement	 
>16432	PrimaryExpression	\"\"
>16433	Condition	 
>16434	UnaryOp	! dsq -> game
>16435	PtrMemberAccess	dsq -> game
>16436	Identifier	game
>16437	Identifier	dsq
>16438	UnaryOperator	!
>16452	FunctionDef	DSQ 
>16453	ParameterList	RenderObject * r
>16454	Parameter	 
>16455	Identifier	r
>16456	ParameterType	RenderObject *
>16457	ReturnType	void
>16458	CompoundStatement	 
>16459	IfStatement	if ( q )
>16460	ExpressionStatement	 
>16461	CallExpression	game -> generateCollisionMask ( q )
>16462	ArgumentList	q
>16463	Argument	q
>16464	Identifier	q
>16465	Callee	game -> generateCollisionMask
>16466	PtrMemberAccess	game -> generateCollisionMask
>16467	Identifier	generateCollisionMask
>16468	Identifier	game
>16469	Condition	 
>16470	Identifier	q
>16471	ExpressionStatement	 
>16472	Identifier	r
>16473	Statement	 
>16474	Statement	 
>16475	Statement	 
>16476	Statement	 
>16477	Statement	 
>16478	Statement	 
>16479	Statement	 
>16480	Statement	 
>16481	Statement	 
>16488	FunctionDef	DSQ 
>16489	ParameterList	 
>16490	ReturnType	void
>16491	CompoundStatement	 
>16492	ExpressionStatement	 
>16493	AssignmentExpr	dsq -> confirmDone = 1
>16494	PrimaryExpression	1
>16495	PtrMemberAccess	dsq -> confirmDone
>16496	Identifier	confirmDone
>16497	Identifier	dsq
>16504	FunctionDef	DSQ 
>16505	ParameterList	 
>16506	ReturnType	void
>16507	CompoundStatement	 
>16508	ExpressionStatement	 
>16509	AssignmentExpr	dsq -> confirmDone = 2
>16510	PrimaryExpression	2
>16511	PtrMemberAccess	dsq -> confirmDone
>16512	Identifier	confirmDone
>16513	Identifier	dsq
>16520	FunctionDef	DSQ 
>16521	ParameterList	const std 
>16522	Parameter	 
>16523	Identifier	countdown
>16524	ParameterType	float
>16525	Parameter	 
>16526	Identifier	ok
>16527	ParameterType	bool
>16528	Parameter	 
>16529	Identifier	image
>16530	ParameterType	const std 
>16531	Parameter	 
>16532	Identifier	text
>16533	ParameterType	const std 
>16534	ReturnType	bool
>16535	CompoundStatement	 
>16536	ReturnStatement	 
>16537	Identifier	ret
>16538	ExpressionStatement	 
>16539	AssignmentExpr	AquariaGuiElement 
>16540	PrimaryExpression	0
>16541	Identifier	AquariaGuiElement 
>16542	IfStatement	if ( countdown < 0 )
>16543	ExpressionStatement	 
>16544	AssignmentExpr	ret = false
>16545	Identifier	false
>16546	Identifier	ret
>16547	Condition	 
>16548	RelationalExpression	countdown < 0
>16549	PrimaryExpression	0
>16550	Identifier	countdown
>16551	IdentifierDeclStatement	 
>16552	IdentifierDecl	ret = ( confirmDone == 1 )
>16553	AssignmentExpr	ret = ( confirmDone == 1 )
>16554	EqualityExpression	confirmDone == 1
>16555	PrimaryExpression	1
>16556	Identifier	confirmDone
>16557	Identifier	ret
>16558	Identifier	ret
>16559	IdentifierDeclType	bool
>16560	IfStatement	if ( no )
>16561	CompoundStatement	 
>16562	ExpressionStatement	 
>16563	CallExpression	no -> safeKill ( )
>16564	ArgumentList	 
>16565	Callee	no -> safeKill
>16566	PtrMemberAccess	no -> safeKill
>16567	Identifier	safeKill
>16568	Identifier	no
>16569	ExpressionStatement	 
>16570	CallExpression	no -> setFocus ( false )
>16571	ArgumentList	false
>16572	Argument	false
>16573	Identifier	false
>16574	Callee	no -> setFocus
>16575	PtrMemberAccess	no -> setFocus
>16576	Identifier	setFocus
>16577	Identifier	no
>16578	Condition	 
>16579	Identifier	no
>16580	IfStatement	if ( yes )
>16581	CompoundStatement	 
>16582	ExpressionStatement	 
>16583	CallExpression	yes -> safeKill ( )
>16584	ArgumentList	 
>16585	Callee	yes -> safeKill
>16586	PtrMemberAccess	yes -> safeKill
>16587	Identifier	safeKill
>16588	Identifier	yes
>16589	ExpressionStatement	 
>16590	CallExpression	yes -> setFocus ( false )
>16591	ArgumentList	false
>16592	Argument	false
>16593	Identifier	false
>16594	Callee	yes -> setFocus
>16595	PtrMemberAccess	yes -> setFocus
>16596	Identifier	setFocus
>16597	Identifier	yes
>16598	Condition	 
>16599	Identifier	yes
>16600	ExpressionStatement	 
>16601	CallExpression	txt -> safeKill ( )
>16602	ArgumentList	 
>16603	Callee	txt -> safeKill
>16604	PtrMemberAccess	txt -> safeKill
>16605	Identifier	safeKill
>16606	Identifier	txt
>16607	ExpressionStatement	 
>16608	CallExpression	bgLabel -> safeKill ( )
>16609	ArgumentList	 
>16610	Callee	bgLabel -> safeKill
>16611	PtrMemberAccess	bgLabel -> safeKill
>16612	Identifier	safeKill
>16613	Identifier	bgLabel
>16614	ExpressionStatement	 
>16615	CallExpression	dsq -> main ( t )
>16616	ArgumentList	t
>16617	Argument	t
>16618	Identifier	t
>16619	Callee	dsq -> main
>16620	PtrMemberAccess	dsq -> main
>16621	Identifier	main
>16622	Identifier	dsq
>16623	ExpressionStatement	 
>16624	CallExpression	bgLabel -> scale . interpolateTo ( Vector ( 0.5 , 0.5 ) , t )
>16625	ArgumentList	Vector ( 0.5 , 0.5 )
>16626	Argument	t
>16627	Identifier	t
>16628	Argument	Vector ( 0.5 , 0.5 )
>16629	CallExpression	Vector ( 0.5 , 0.5 )
>16630	ArgumentList	0.5
>16631	Argument	0.5
>16632	PrimaryExpression	0.5
>16633	Argument	0.5
>16634	PrimaryExpression	0.5
>16635	Callee	Vector
>16636	Identifier	Vector
>16637	Callee	bgLabel -> scale . interpolateTo
>16638	MemberAccess	bgLabel -> scale . interpolateTo
>16639	Identifier	interpolateTo
>16640	PtrMemberAccess	bgLabel -> scale
>16641	Identifier	scale
>16642	Identifier	bgLabel
>16643	ExpressionStatement	 
>16644	CallExpression	bgLabel -> alpha . interpolateTo ( 0 , t )
>16645	ArgumentList	0
>16646	Argument	t
>16647	Identifier	t
>16648	Argument	0
>16649	PrimaryExpression	0
>16650	Callee	bgLabel -> alpha . interpolateTo
>16651	MemberAccess	bgLabel -> alpha . interpolateTo
>16652	Identifier	interpolateTo
>16653	PtrMemberAccess	bgLabel -> alpha
>16654	Identifier	alpha
>16655	Identifier	bgLabel
>16656	ExpressionStatement	 
>16657	CallExpression	dsq -> main ( t2 )
>16658	ArgumentList	t2
>16659	Argument	t2
>16660	Identifier	t2
>16661	Callee	dsq -> main
>16662	PtrMemberAccess	dsq -> main
>16663	Identifier	main
>16664	Identifier	dsq
>16665	IfStatement	if ( no )
>16666	ExpressionStatement	 
>16667	CallExpression	no -> alpha . interpolateTo ( 0 , t2 )
>16668	ArgumentList	0
>16669	Argument	t2
>16670	Identifier	t2
>16671	Argument	0
>16672	PrimaryExpression	0
>16673	Callee	no -> alpha . interpolateTo
>16674	MemberAccess	no -> alpha . interpolateTo
>16675	Identifier	interpolateTo
>16676	PtrMemberAccess	no -> alpha
>16677	Identifier	alpha
>16678	Identifier	no
>16679	Condition	 
>16680	Identifier	no
>16681	IfStatement	if ( yes )
>16682	ExpressionStatement	 
>16683	CallExpression	yes -> alpha . interpolateTo ( 0 , t2 )
>16684	ArgumentList	0
>16685	Argument	t2
>16686	Identifier	t2
>16687	Argument	0
>16688	PrimaryExpression	0
>16689	Callee	yes -> alpha . interpolateTo
>16690	MemberAccess	yes -> alpha . interpolateTo
>16691	Identifier	interpolateTo
>16692	PtrMemberAccess	yes -> alpha
>16693	Identifier	alpha
>16694	Identifier	yes
>16695	Condition	 
>16696	Identifier	yes
>16697	ExpressionStatement	 
>16698	CallExpression	txt -> alpha . interpolateTo ( 0 , t2 )
>16699	ArgumentList	0
>16700	Argument	t2
>16701	Identifier	t2
>16702	Argument	0
>16703	PrimaryExpression	0
>16704	Callee	txt -> alpha . interpolateTo
>16705	MemberAccess	txt -> alpha . interpolateTo
>16706	Identifier	interpolateTo
>16707	PtrMemberAccess	txt -> alpha
>16708	Identifier	alpha
>16709	Identifier	txt
>16710	ExpressionStatement	 
>16711	CallExpression	sound -> playSfx ( \"menu-close\" )
>16712	ArgumentList	\"menu-close\"
>16713	Argument	\"menu-close\"
>16714	PrimaryExpression	\"menu-close\"
>16715	Callee	sound -> playSfx
>16716	PtrMemberAccess	sound -> playSfx
>16717	Identifier	playSfx
>16718	Identifier	sound
>16719	WhileStatement	while ( ! confirmDone )
>16720	CompoundStatement	 
>16721	IfStatement	if ( countdown > 0 )
>16722	CompoundStatement	 
>16723	IfStatement	if ( countdown < 0 )
>16724	BreakStatement	 
>16725	Condition	 
>16726	RelationalExpression	countdown < 0
>16727	PrimaryExpression	0
>16728	Identifier	countdown
>16729	ExpressionStatement	 
>16730	AssignmentExpr	countdown -= FRAME_TIME
>16731	Identifier	FRAME_TIME
>16732	Identifier	countdown
>16733	Condition	 
>16734	RelationalExpression	countdown > 0
>16735	PrimaryExpression	0
>16736	Identifier	countdown
>16737	ExpressionStatement	 
>16738	CallExpression	dsq -> main ( FRAME_TIME )
>16739	ArgumentList	FRAME_TIME
>16740	Argument	FRAME_TIME
>16741	Identifier	FRAME_TIME
>16742	Callee	dsq -> main
>16743	PtrMemberAccess	dsq -> main
>16744	Identifier	main
>16745	Identifier	dsq
>16746	Condition	 
>16747	UnaryOp	! confirmDone
>16748	Identifier	confirmDone
>16749	UnaryOperator	!
>16750	ExpressionStatement	 
>16751	CallExpression	dsq -> main ( t2 )
>16752	ArgumentList	t2
>16753	Argument	t2
>16754	Identifier	t2
>16755	Callee	dsq -> main
>16756	PtrMemberAccess	dsq -> main
>16757	Identifier	main
>16758	Identifier	dsq
>16759	ExpressionStatement	 
>16760	CallExpression	addRenderObject ( txt , LR_CONFIRM )
>16761	ArgumentList	txt
>16762	Argument	LR_CONFIRM
>16763	Identifier	LR_CONFIRM
>16764	Argument	txt
>16765	Identifier	txt
>16766	Callee	addRenderObject
>16767	Identifier	addRenderObject
>16768	ExpressionStatement	 
>16769	CallExpression	txt -> alpha . interpolateTo ( 1 , t2 )
>16770	ArgumentList	1
>16771	Argument	t2
>16772	Identifier	t2
>16773	Argument	1
>16774	PrimaryExpression	1
>16775	Callee	txt -> alpha . interpolateTo
>16776	MemberAccess	txt -> alpha . interpolateTo
>16777	Identifier	interpolateTo
>16778	PtrMemberAccess	txt -> alpha
>16779	Identifier	alpha
>16780	Identifier	txt
>16781	ExpressionStatement	 
>16782	AssignmentExpr	txt -> scale = Vector ( 0.9 , 0.9 )
>16783	CallExpression	Vector ( 0.9 , 0.9 )
>16784	ArgumentList	0.9
>16785	Argument	0.9
>16786	PrimaryExpression	0.9
>16787	Argument	0.9
>16788	PrimaryExpression	0.9
>16789	Callee	Vector
>16790	Identifier	Vector
>16791	PtrMemberAccess	txt -> scale
>16792	Identifier	scale
>16793	Identifier	txt
>16794	ExpressionStatement	 
>16795	AssignmentExpr	txt -> alpha = 0
>16796	PrimaryExpression	0
>16797	PtrMemberAccess	txt -> alpha
>16798	Identifier	alpha
>16799	Identifier	txt
>16800	ExpressionStatement	 
>16801	CallExpression	txt -> setText ( text )
>16802	ArgumentList	text
>16803	Argument	text
>16804	Identifier	text
>16805	Callee	txt -> setText
>16806	PtrMemberAccess	txt -> setText
>16807	Identifier	setText
>16808	Identifier	txt
>16809	ExpressionStatement	 
>16810	AssignmentExpr	txt -> position = Vector ( 400 , 250 )
>16811	CallExpression	Vector ( 400 , 250 )
>16812	ArgumentList	400
>16813	Argument	250
>16814	PrimaryExpression	250
>16815	Argument	400
>16816	PrimaryExpression	400
>16817	Callee	Vector
>16818	Identifier	Vector
>16819	PtrMemberAccess	txt -> position
>16820	Identifier	position
>16821	Identifier	txt
>16822	ExpressionStatement	 
>16823	AssignmentExpr	txt -> followCamera = 1
>16824	PrimaryExpression	1
>16825	PtrMemberAccess	txt -> followCamera
>16826	Identifier	followCamera
>16827	Identifier	txt
>16828	IdentifierDeclStatement	 
>16829	IdentifierDecl	* txt = new BitmapText ( & dsq -> smallFont )
>16830	AssignmentExpr	* txt = new BitmapText ( & dsq -> smallFont )
>16831	UnaryOp	& dsq -> smallFont
>16832	PtrMemberAccess	dsq -> smallFont
>16833	Identifier	smallFont
>16834	Identifier	dsq
>16835	UnaryOperator	&
>16836	Identifier	txt
>16837	Identifier	txt
>16838	IdentifierDeclType	BitmapText *
>16839	IfStatement	if ( ok )
>16840	ElseStatement	else
>16841	CompoundStatement	 
>16842	ExpressionStatement	 
>16843	CallExpression	yes -> setDirMove ( DIR_LEFT , yes )
>16844	ArgumentList	DIR_LEFT
>16845	Argument	yes
>16846	Identifier	yes
>16847	Argument	DIR_LEFT
>16848	Identifier	DIR_LEFT
>16849	Callee	yes -> setDirMove
>16850	PtrMemberAccess	yes -> setDirMove
>16851	Identifier	setDirMove
>16852	Identifier	yes
>16853	ExpressionStatement	 
>16854	CallExpression	yes -> setDirMove ( DIR_DOWN , yes )
>16855	ArgumentList	DIR_DOWN
>16856	Argument	yes
>16857	Identifier	yes
>16858	Argument	DIR_DOWN
>16859	Identifier	DIR_DOWN
>16860	Callee	yes -> setDirMove
>16861	PtrMemberAccess	yes -> setDirMove
>16862	Identifier	setDirMove
>16863	Identifier	yes
>16864	ExpressionStatement	 
>16865	CallExpression	yes -> setDirMove ( DIR_UP , yes )
>16866	ArgumentList	DIR_UP
>16867	Argument	yes
>16868	Identifier	yes
>16869	Argument	DIR_UP
>16870	Identifier	DIR_UP
>16871	Callee	yes -> setDirMove
>16872	PtrMemberAccess	yes -> setDirMove
>16873	Identifier	setDirMove
>16874	Identifier	yes
>16875	ExpressionStatement	 
>16876	CallExpression	yes -> setDirMove ( DIR_RIGHT , no )
>16877	ArgumentList	DIR_RIGHT
>16878	Argument	no
>16879	Identifier	no
>16880	Argument	DIR_RIGHT
>16881	Identifier	DIR_RIGHT
>16882	Callee	yes -> setDirMove
>16883	PtrMemberAccess	yes -> setDirMove
>16884	Identifier	setDirMove
>16885	Identifier	yes
>16886	ExpressionStatement	 
>16887	CallExpression	no -> setDirMove ( DIR_RIGHT , no )
>16888	ArgumentList	DIR_RIGHT
>16889	Argument	no
>16890	Identifier	no
>16891	Argument	DIR_RIGHT
>16892	Identifier	DIR_RIGHT
>16893	Callee	no -> setDirMove
>16894	PtrMemberAccess	no -> setDirMove
>16895	Identifier	setDirMove
>16896	Identifier	no
>16897	ExpressionStatement	 
>16898	CallExpression	no -> setDirMove ( DIR_DOWN , no )
>16899	ArgumentList	DIR_DOWN
>16900	Argument	no
>16901	Identifier	no
>16902	Argument	DIR_DOWN
>16903	Identifier	DIR_DOWN
>16904	Callee	no -> setDirMove
>16905	PtrMemberAccess	no -> setDirMove
>16906	Identifier	setDirMove
>16907	Identifier	no
>16908	ExpressionStatement	 
>16909	CallExpression	no -> setDirMove ( DIR_UP , no )
>16910	ArgumentList	DIR_UP
>16911	Argument	no
>16912	Identifier	no
>16913	Argument	DIR_UP
>16914	Identifier	DIR_UP
>16915	Callee	no -> setDirMove
>16916	PtrMemberAccess	no -> setDirMove
>16917	Identifier	setDirMove
>16918	Identifier	no
>16919	ExpressionStatement	 
>16920	CallExpression	no -> setDirMove ( DIR_LEFT , yes )
>16921	ArgumentList	DIR_LEFT
>16922	Argument	yes
>16923	Identifier	yes
>16924	Argument	DIR_LEFT
>16925	Identifier	DIR_LEFT
>16926	Callee	no -> setDirMove
>16927	PtrMemberAccess	no -> setDirMove
>16928	Identifier	setDirMove
>16929	Identifier	no
>16930	ExpressionStatement	 
>16931	CallExpression	no -> setFocus ( true )
>16932	ArgumentList	true
>16933	Argument	true
>16934	Identifier	true
>16935	Callee	no -> setFocus
>16936	PtrMemberAccess	no -> setFocus
>16937	Identifier	setFocus
>16938	Identifier	no
>16939	ExpressionStatement	 
>16940	AssignmentExpr	no -> guiInputLevel = GUILEVEL_CONFIRM
>16941	Identifier	GUILEVEL_CONFIRM
>16942	PtrMemberAccess	no -> guiInputLevel
>16943	Identifier	guiInputLevel
>16944	Identifier	no
>16945	ExpressionStatement	 
>16946	CallExpression	addRenderObject ( no , LR_CONFIRM )
>16947	ArgumentList	no
>16948	Argument	LR_CONFIRM
>16949	Identifier	LR_CONFIRM
>16950	Argument	no
>16951	Identifier	no
>16952	Callee	addRenderObject
>16953	Identifier	addRenderObject
>16954	ExpressionStatement	 
>16955	AssignmentExpr	no -> position = Vector ( 470 , 340 )
>16956	CallExpression	Vector ( 470 , 340 )
>16957	ArgumentList	470
>16958	Argument	340
>16959	PrimaryExpression	340
>16960	Argument	470
>16961	PrimaryExpression	470
>16962	Callee	Vector
>16963	Identifier	Vector
>16964	PtrMemberAccess	no -> position
>16965	Identifier	position
>16966	Identifier	no
>16967	ExpressionStatement	 
>16968	CallExpression	no -> event . set ( MakeFunctionEvent ( DSQ , onConfirmNo ) )
>16969	ArgumentList	MakeFunctionEvent ( DSQ , onConfirmNo )
>16970	Argument	MakeFunctionEvent ( DSQ , onConfirmNo )
>16971	CallExpression	MakeFunctionEvent ( DSQ , onConfirmNo )
>16972	ArgumentList	DSQ
>16973	Argument	onConfirmNo
>16974	Identifier	onConfirmNo
>16975	Argument	DSQ
>16976	Identifier	DSQ
>16977	Callee	MakeFunctionEvent
>16978	Identifier	MakeFunctionEvent
>16979	Callee	no -> event . set
>16980	MemberAccess	no -> event . set
>16981	Identifier	set
>16982	PtrMemberAccess	no -> event
>16983	Identifier	event
>16984	Identifier	no
>16985	ExpressionStatement	 
>16986	CallExpression	no -> useGlow ( \"glow\" , 64 , 50 )
>16987	ArgumentList	\"glow\"
>16988	Argument	50
>16989	PrimaryExpression	50
>16990	Argument	64
>16991	PrimaryExpression	64
>16992	Argument	\"glow\"
>16993	PrimaryExpression	\"glow\"
>16994	Callee	no -> useGlow
>16995	PtrMemberAccess	no -> useGlow
>16996	Identifier	useGlow
>16997	Identifier	no
>16998	ExpressionStatement	 
>16999	CallExpression	no -> useQuad ( \"no\" )
>17000	ArgumentList	\"no\"
>17001	Argument	\"no\"
>17002	PrimaryExpression	\"no\"
>17003	Callee	no -> useQuad
>17004	PtrMemberAccess	no -> useQuad
>17005	Identifier	useQuad
>17006	Identifier	no
>17007	ExpressionStatement	 
>17008	AssignmentExpr	no = new AquariaMenuItem ( )
>17009	UnaryExpression	new AquariaMenuItem ( )
>17010	Identifier	no
>17011	ExpressionStatement	 
>17012	AssignmentExpr	yes -> guiInputLevel = GUILEVEL_CONFIRM
>17013	Identifier	GUILEVEL_CONFIRM
>17014	PtrMemberAccess	yes -> guiInputLevel
>17015	Identifier	guiInputLevel
>17016	Identifier	yes
>17017	ExpressionStatement	 
>17018	CallExpression	addRenderObject ( yes , LR_CONFIRM )
>17019	ArgumentList	yes
>17020	Argument	LR_CONFIRM
>17021	Identifier	LR_CONFIRM
>17022	Argument	yes
>17023	Identifier	yes
>17024	Callee	addRenderObject
>17025	Identifier	addRenderObject
>17026	ExpressionStatement	 
>17027	AssignmentExpr	yes -> position = Vector ( 330 , 340 )
>17028	CallExpression	Vector ( 330 , 340 )
>17029	ArgumentList	330
>17030	Argument	340
>17031	PrimaryExpression	340
>17032	Argument	330
>17033	PrimaryExpression	330
>17034	Callee	Vector
>17035	Identifier	Vector
>17036	PtrMemberAccess	yes -> position
>17037	Identifier	position
>17038	Identifier	yes
>17039	ExpressionStatement	 
>17040	CallExpression	yes -> event . set ( MakeFunctionEvent ( DSQ , onConfirmYes ) )
>17041	ArgumentList	MakeFunctionEvent ( DSQ , onConfirmYes )
>17042	Argument	MakeFunctionEvent ( DSQ , onConfirmYes )
>17043	CallExpression	MakeFunctionEvent ( DSQ , onConfirmYes )
>17044	ArgumentList	DSQ
>17045	Argument	onConfirmYes
>17046	Identifier	onConfirmYes
>17047	Argument	DSQ
>17048	Identifier	DSQ
>17049	Callee	MakeFunctionEvent
>17050	Identifier	MakeFunctionEvent
>17051	Callee	yes -> event . set
>17052	MemberAccess	yes -> event . set
>17053	Identifier	set
>17054	PtrMemberAccess	yes -> event
>17055	Identifier	event
>17056	Identifier	yes
>17057	ExpressionStatement	 
>17058	CallExpression	yes -> useGlow ( \"glow\" , 64 , 50 )
>17059	ArgumentList	\"glow\"
>17060	Argument	50
>17061	PrimaryExpression	50
>17062	Argument	64
>17063	PrimaryExpression	64
>17064	Argument	\"glow\"
>17065	PrimaryExpression	\"glow\"
>17066	Callee	yes -> useGlow
>17067	PtrMemberAccess	yes -> useGlow
>17068	Identifier	useGlow
>17069	Identifier	yes
>17070	ExpressionStatement	 
>17071	CallExpression	yes -> useQuad ( \"yes\" )
>17072	ArgumentList	\"yes\"
>17073	Argument	\"yes\"
>17074	PrimaryExpression	\"yes\"
>17075	Callee	yes -> useQuad
>17076	PtrMemberAccess	yes -> useQuad
>17077	Identifier	useQuad
>17078	Identifier	yes
>17079	ExpressionStatement	 
>17080	AssignmentExpr	yes = new AquariaMenuItem ( )
>17081	UnaryExpression	new AquariaMenuItem ( )
>17082	Identifier	yes
>17083	CompoundStatement	 
>17084	ExpressionStatement	 
>17085	AssignmentExpr	yes -> guiInputLevel = GUILEVEL_CONFIRM
>17086	Identifier	GUILEVEL_CONFIRM
>17087	PtrMemberAccess	yes -> guiInputLevel
>17088	Identifier	guiInputLevel
>17089	Identifier	yes
>17090	ExpressionStatement	 
>17091	CallExpression	yes -> setCanDirMove ( false )
>17092	ArgumentList	false
>17093	Argument	false
>17094	Identifier	false
>17095	Callee	yes -> setCanDirMove
>17096	PtrMemberAccess	yes -> setCanDirMove
>17097	Identifier	setCanDirMove
>17098	Identifier	yes
>17099	ExpressionStatement	 
>17100	CallExpression	yes -> setFocus ( true )
>17101	ArgumentList	true
>17102	Argument	true
>17103	Identifier	true
>17104	Callee	yes -> setFocus
>17105	PtrMemberAccess	yes -> setFocus
>17106	Identifier	setFocus
>17107	Identifier	yes
>17108	ExpressionStatement	 
>17109	CallExpression	addRenderObject ( yes , LR_CONFIRM )
>17110	ArgumentList	yes
>17111	Argument	LR_CONFIRM
>17112	Identifier	LR_CONFIRM
>17113	Argument	yes
>17114	Identifier	yes
>17115	Callee	addRenderObject
>17116	Identifier	addRenderObject
>17117	ExpressionStatement	 
>17118	AssignmentExpr	yes -> position = Vector ( 400 , 340 )
>17119	CallExpression	Vector ( 400 , 340 )
>17120	ArgumentList	400
>17121	Argument	340
>17122	PrimaryExpression	340
>17123	Argument	400
>17124	PrimaryExpression	400
>17125	Callee	Vector
>17126	Identifier	Vector
>17127	PtrMemberAccess	yes -> position
>17128	Identifier	position
>17129	Identifier	yes
>17130	ExpressionStatement	 
>17131	CallExpression	yes -> event . set ( MakeFunctionEvent ( DSQ , onConfirmYes ) )
>17132	ArgumentList	MakeFunctionEvent ( DSQ , onConfirmYes )
>17133	Argument	MakeFunctionEvent ( DSQ , onConfirmYes )
>17134	CallExpression	MakeFunctionEvent ( DSQ , onConfirmYes )
>17135	ArgumentList	DSQ
>17136	Argument	onConfirmYes
>17137	Identifier	onConfirmYes
>17138	Argument	DSQ
>17139	Identifier	DSQ
>17140	Callee	MakeFunctionEvent
>17141	Identifier	MakeFunctionEvent
>17142	Callee	yes -> event . set
>17143	MemberAccess	yes -> event . set
>17144	Identifier	set
>17145	PtrMemberAccess	yes -> event
>17146	Identifier	event
>17147	Identifier	yes
>17148	ExpressionStatement	 
>17149	CallExpression	yes -> useGlow ( \"glow\" , 64 , 50 )
>17150	ArgumentList	\"glow\"
>17151	Argument	50
>17152	PrimaryExpression	50
>17153	Argument	64
>17154	PrimaryExpression	64
>17155	Argument	\"glow\"
>17156	PrimaryExpression	\"glow\"
>17157	Callee	yes -> useGlow
>17158	PtrMemberAccess	yes -> useGlow
>17159	Identifier	useGlow
>17160	Identifier	yes
>17161	ExpressionStatement	 
>17162	CallExpression	yes -> useQuad ( \"gui/ok\" )
>17163	ArgumentList	\"gui/ok\"
>17164	Argument	\"gui/ok\"
>17165	PrimaryExpression	\"gui/ok\"
>17166	Callee	yes -> useQuad
>17167	PtrMemberAccess	yes -> useQuad
>17168	Identifier	useQuad
>17169	Identifier	yes
>17170	ExpressionStatement	 
>17171	AssignmentExpr	yes = new AquariaMenuItem ( )
>17172	UnaryExpression	new AquariaMenuItem ( )
>17173	Identifier	yes
>17174	Condition	 
>17175	Identifier	ok
>17176	IdentifierDeclStatement	 
>17177	IdentifierDecl	* no = 0
>17178	AssignmentExpr	* no = 0
>17179	PrimaryExpression	0
>17180	Identifier	no
>17181	Identifier	no
>17182	IdentifierDeclType	AquariaMenuItem *
>17183	IdentifierDeclStatement	 
>17184	IdentifierDecl	* yes = 0
>17185	AssignmentExpr	* yes = 0
>17186	PrimaryExpression	0
>17187	Identifier	yes
>17188	Identifier	yes
>17189	IdentifierDeclType	AquariaMenuItem *
>17190	IdentifierDeclStatement	 
>17191	IdentifierDecl	t2 = 0.05
>17192	AssignmentExpr	t2 = 0.05
>17193	PrimaryExpression	0.05
>17194	Identifier	t2
>17195	Identifier	t2
>17196	IdentifierDeclType	float
>17197	ExpressionStatement	 
>17198	CallExpression	dsq -> main ( t )
>17199	ArgumentList	t
>17200	Argument	t
>17201	Identifier	t
>17202	Callee	dsq -> main
>17203	PtrMemberAccess	dsq -> main
>17204	Identifier	main
>17205	Identifier	dsq
>17206	ExpressionStatement	 
>17207	AssignmentExpr	AquariaGuiElement 
>17208	Identifier	GUILEVEL_CONFIRM
>17209	Identifier	AquariaGuiElement 
>17210	IdentifierDeclStatement	 
>17211	IdentifierDecl	GUILEVEL_CONFIRM = 200
>17212	AssignmentExpr	GUILEVEL_CONFIRM = 200
>17213	PrimaryExpression	200
>17214	Identifier	GUILEVEL_CONFIRM
>17215	Identifier	GUILEVEL_CONFIRM
>17216	IdentifierDeclType	const int
>17217	ExpressionStatement	 
>17218	CallExpression	addRenderObject ( bgLabel , LR_CONFIRM )
>17219	ArgumentList	bgLabel
>17220	Argument	LR_CONFIRM
>17221	Identifier	LR_CONFIRM
>17222	Argument	bgLabel
>17223	Identifier	bgLabel
>17224	Callee	addRenderObject
>17225	Identifier	addRenderObject
>17226	ExpressionStatement	 
>17227	CallExpression	bgLabel -> scale . interpolateTo ( Vector ( 1 , 1 ) , t )
>17228	ArgumentList	Vector ( 1 , 1 )
>17229	Argument	t
>17230	Identifier	t
>17231	Argument	Vector ( 1 , 1 )
>17232	CallExpression	Vector ( 1 , 1 )
>17233	ArgumentList	1
>17234	Argument	1
>17235	PrimaryExpression	1
>17236	Argument	1
>17237	PrimaryExpression	1
>17238	Callee	Vector
>17239	Identifier	Vector
>17240	Callee	bgLabel -> scale . interpolateTo
>17241	MemberAccess	bgLabel -> scale . interpolateTo
>17242	Identifier	interpolateTo
>17243	PtrMemberAccess	bgLabel -> scale
>17244	Identifier	scale
>17245	Identifier	bgLabel
>17246	ExpressionStatement	 
>17247	AssignmentExpr	bgLabel -> scale = Vector ( 0.5 , 0.5 )
>17248	CallExpression	Vector ( 0.5 , 0.5 )
>17249	ArgumentList	0.5
>17250	Argument	0.5
>17251	PrimaryExpression	0.5
>17252	Argument	0.5
>17253	PrimaryExpression	0.5
>17254	Callee	Vector
>17255	Identifier	Vector
>17256	PtrMemberAccess	bgLabel -> scale
>17257	Identifier	scale
>17258	Identifier	bgLabel
>17259	ExpressionStatement	 
>17260	CallExpression	bgLabel -> alpha . interpolateTo ( 1 , t )
>17261	ArgumentList	1
>17262	Argument	t
>17263	Identifier	t
>17264	Argument	1
>17265	PrimaryExpression	1
>17266	Callee	bgLabel -> alpha . interpolateTo
>17267	MemberAccess	bgLabel -> alpha . interpolateTo
>17268	Identifier	interpolateTo
>17269	PtrMemberAccess	bgLabel -> alpha
>17270	Identifier	alpha
>17271	Identifier	bgLabel
>17272	ExpressionStatement	 
>17273	AssignmentExpr	bgLabel -> alpha = 0
>17274	PrimaryExpression	0
>17275	PtrMemberAccess	bgLabel -> alpha
>17276	Identifier	alpha
>17277	Identifier	bgLabel
>17278	ExpressionStatement	 
>17279	AssignmentExpr	bgLabel -> followCamera = 1
>17280	PrimaryExpression	1
>17281	PtrMemberAccess	bgLabel -> followCamera
>17282	Identifier	followCamera
>17283	Identifier	bgLabel
>17284	IdentifierDeclStatement	 
>17285	IdentifierDecl	* bgLabel = new Quad ( imageName , Vector ( 400 , 300 ) )
>17286	AssignmentExpr	* bgLabel = new Quad ( imageName , Vector ( 400 , 300 ) )
>17287	Expression	imageName , Vector ( 400 , 300 )
>17288	CallExpression	Vector ( 400 , 300 )
>17289	ArgumentList	400
>17290	Argument	300
>17291	PrimaryExpression	300
>17292	Argument	400
>17293	PrimaryExpression	400
>17294	Callee	Vector
>17295	Identifier	Vector
>17296	Identifier	imageName
>17297	Identifier	bgLabel
>17298	Identifier	bgLabel
>17299	IdentifierDeclType	Quad *
>17300	IfStatement	if ( ! image . empty ( ) )
>17301	CompoundStatement	 
>17302	ExpressionStatement	 
>17303	AssignmentExpr	imageName += \"-\" + image
>17304	AdditiveExpression	\"-\" + image
>17305	Identifier	image
>17306	PrimaryExpression	\"-\"
>17307	Identifier	imageName
>17308	Condition	 
>17309	UnaryOp	! image . empty ( )
>17310	CallExpression	image . empty ( )
>17311	ArgumentList	 
>17312	Callee	image . empty
>17313	MemberAccess	image . empty
>17314	Identifier	empty
>17315	Identifier	image
>17316	UnaryOperator	!
>17317	IdentifierDeclStatement	 
>17318	IdentifierDecl	imageName = \"gui/confirm-bg\"
>17319	AssignmentExpr	imageName = \"gui/confirm-bg\"
>17320	PrimaryExpression	\"gui/confirm-bg\"
>17321	Identifier	imageName
>17322	Identifier	imageName
>17323	IdentifierDeclType	std 
>17324	ExpressionStatement	 
>17325	AssignmentExpr	confirmDone = 0
>17326	PrimaryExpression	0
>17327	Identifier	confirmDone
>17328	ExpressionStatement	 
>17329	CallExpression	sound -> playSfx ( \"menu-open\" )
>17330	ArgumentList	\"menu-open\"
>17331	Argument	\"menu-open\"
>17332	PrimaryExpression	\"menu-open\"
>17333	Callee	sound -> playSfx
>17334	PtrMemberAccess	sound -> playSfx
>17335	Identifier	playSfx
>17336	Identifier	sound
>17337	IdentifierDeclStatement	 
>17338	IdentifierDecl	t = 0.3
>17339	AssignmentExpr	t = 0.3
>17340	PrimaryExpression	0.3
>17341	Identifier	t
>17342	Identifier	t
>17343	IdentifierDeclType	const float
>17399	FunctionDef	DSQ 
>17400	ParameterList	std 
>17401	Parameter	 
>17402	Identifier	allowNonLowerCase
>17403	ParameterType	bool
>17404	Parameter	 
>17405	Identifier	t
>17406	ParameterType	std 
>17407	Parameter	 
>17408	Identifier	labelText
>17409	ParameterType	std 
>17410	ReturnType	std 
>17411	CompoundStatement	 
>17412	ReturnStatement	 
>17413	Identifier	text
>17414	ExpressionStatement	 
>17415	CallExpression	debugLog ( \"getUserInputString returned
>17416	ArgumentList	\"getUserInputString returned
>17417	Argument	\"getUserInputString returned
>17418	AdditiveExpression	\"getUserInputString returned
>17419	Identifier	text
>17420	PrimaryExpression	\"getUserInputString returned
>17421	Callee	debugLog
>17422	Identifier	debugLog
>17423	IfStatement	if ( ! allowNonLowerCase )
>17424	ExpressionStatement	 
>17425	CallExpression	stringToLower ( text )
>17426	ArgumentList	text
>17427	Argument	text
>17428	Identifier	text
>17429	Callee	stringToLower
>17430	Identifier	stringToLower
>17431	Condition	 
>17432	UnaryOp	! allowNonLowerCase
>17433	Identifier	allowNonLowerCase
>17434	UnaryOperator	!
>17435	ExpressionStatement	 
>17436	CallExpression	dsq -> game -> togglePause ( pauseState )
>17437	ArgumentList	pauseState
>17438	Argument	pauseState
>17439	Identifier	pauseState
>17440	Callee	dsq -> game -> togglePause
>17441	PtrMemberAccess	dsq -> game -> togglePause
>17442	Identifier	togglePause
>17443	PtrMemberAccess	dsq -> game
>17444	Identifier	game
>17445	Identifier	dsq
>17446	ExpressionStatement	 
>17447	CallExpression	bg -> safeKill ( )
>17448	ArgumentList	 
>17449	Callee	bg -> safeKill
>17450	PtrMemberAccess	bg -> safeKill
>17451	Identifier	safeKill
>17452	Identifier	bg
>17453	ExpressionStatement	 
>17454	AssignmentExpr	bg -> alpha = 0
>17455	PrimaryExpression	0
>17456	PtrMemberAccess	bg -> alpha
>17457	Identifier	alpha
>17458	Identifier	bg
>17459	ExpressionStatement	 
>17460	CallExpression	label -> safeKill ( )
>17461	ArgumentList	 
>17462	Callee	label -> safeKill
>17463	PtrMemberAccess	label -> safeKill
>17464	Identifier	safeKill
>17465	Identifier	label
>17466	ExpressionStatement	 
>17467	CallExpression	inputText -> safeKill ( )
>17468	ArgumentList	 
>17469	Callee	inputText -> safeKill
>17470	PtrMemberAccess	inputText -> safeKill
>17471	Identifier	safeKill
>17472	Identifier	inputText
>17473	ExpressionStatement	 
>17474	AssignmentExpr	label -> alpha = 0
>17475	PrimaryExpression	0
>17476	PtrMemberAccess	label -> alpha
>17477	Identifier	alpha
>17478	Identifier	label
>17479	ExpressionStatement	 
>17480	AssignmentExpr	inputText -> alpha = 0
>17481	PrimaryExpression	0
>17482	PtrMemberAccess	inputText -> alpha
>17483	Identifier	alpha
>17484	Identifier	inputText
>17485	ExpressionStatement	 
>17486	CallExpression	main ( 0.2 )
>17487	ArgumentList	0.2
>17488	Argument	0.2
>17489	PrimaryExpression	0.2
>17490	Callee	main
>17491	Identifier	main
>17492	ExpressionStatement	 
>17493	CallExpression	bg -> hide ( )
>17494	ArgumentList	 
>17495	Callee	bg -> hide
>17496	PtrMemberAccess	bg -> hide
>17497	Identifier	hide
>17498	Identifier	bg
>17499	ExpressionStatement	 
>17500	CallExpression	sound -> playSfx ( \"Menu-Close\" )
>17501	ArgumentList	\"Menu-Close\"
>17502	Argument	\"Menu-Close\"
>17503	PrimaryExpression	\"Menu-Close\"
>17504	Callee	sound -> playSfx
>17505	PtrMemberAccess	sound -> playSfx
>17506	Identifier	playSfx
>17507	Identifier	sound
>17508	IfStatement	if ( blink && ! text . empty ( ) && ( text [ text . size ( ) - 1 ] == '|' ) )
>17509	ExpressionStatement	 
>17510	CallExpression	text . resize ( text . size ( ) - 1 )
>17511	ArgumentList	text . size ( ) - 1
>17512	Argument	text . size ( ) - 1
>17513	AdditiveExpression	text . size ( ) - 1
>17514	PrimaryExpression	1
>17515	CallExpression	text . size ( )
>17516	ArgumentList	 
>17517	Callee	text . size
>17518	MemberAccess	text . size
>17519	Identifier	size
>17520	Identifier	text
>17521	Callee	text . resize
>17522	MemberAccess	text . resize
>17523	Identifier	resize
>17524	Identifier	text
>17525	Condition	 
>17526	AndExpression	blink && ! text . empty ( ) && ( text [ text . size ( ) - 1 ] == '|' )
>17527	AndExpression	! text . empty ( ) && ( text [ text . size ( ) - 1 ] == '|' )
>17528	EqualityExpression	text [ text . size ( ) - 1 ] == '|'
>17529	PrimaryExpression	'|'
>17530	ArrayIndexing	text [ text . size ( ) - 1 ]
>17531	AdditiveExpression	text . size ( ) - 1
>17532	PrimaryExpression	1
>17533	CallExpression	text . size ( )
>17534	ArgumentList	 
>17535	Callee	text . size
>17536	MemberAccess	text . size
>17537	Identifier	size
>17538	Identifier	text
>17539	Identifier	text
>17540	UnaryOp	! text . empty ( )
>17541	CallExpression	text . empty ( )
>17542	ArgumentList	 
>17543	Callee	text . empty
>17544	MemberAccess	text . empty
>17545	Identifier	empty
>17546	Identifier	text
>17547	UnaryOperator	!
>17548	Identifier	blink
>17549	WhileStatement	while ( 1 )
>17550	CompoundStatement	 
>17551	ExpressionStatement	 
>17552	CallExpression	core -> main ( dt )
>17553	ArgumentList	dt
>17554	Argument	dt
>17555	Identifier	dt
>17556	Callee	core -> main
>17557	PtrMemberAccess	core -> main
>17558	Identifier	main
>17559	Identifier	core
>17560	ExpressionStatement	 
>17561	CallExpression	inputText -> setText ( text )
>17562	ArgumentList	text
>17563	Argument	text
>17564	Identifier	text
>17565	Callee	inputText -> setText
>17566	PtrMemberAccess	inputText -> setText
>17567	Identifier	setText
>17568	Identifier	inputText
>17569	IfStatement	if ( ! escDown && core -> getKeyState ( KEY_ESCAPE ) )
>17570	ElseStatement	else
>17571	IfStatement	if ( escDown && ! core -> getKeyState ( KEY_ESCAPE ) )
>17572	CompoundStatement	 
>17573	BreakStatement	 
>17574	ExpressionStatement	 
>17575	AssignmentExpr	text = t
>17576	Identifier	t
>17577	Identifier	text
>17578	ExpressionStatement	 
>17579	AssignmentExpr	escDown = false
>17580	Identifier	false
>17581	Identifier	escDown
>17582	Condition	 
>17583	AndExpression	escDown && ! core -> getKeyState ( KEY_ESCAPE )
>17584	UnaryOp	! core -> getKeyState ( KEY_ESCAPE )
>17585	CallExpression	core -> getKeyState ( KEY_ESCAPE )
>17586	ArgumentList	KEY_ESCAPE
>17587	Argument	KEY_ESCAPE
>17588	Identifier	KEY_ESCAPE
>17589	Callee	core -> getKeyState
>17590	PtrMemberAccess	core -> getKeyState
>17591	Identifier	getKeyState
>17592	Identifier	core
>17593	UnaryOperator	!
>17594	Identifier	escDown
>17595	ExpressionStatement	 
>17596	AssignmentExpr	escDown = true
>17597	Identifier	true
>17598	Identifier	escDown
>17599	Condition	 
>17600	AndExpression	! escDown && core -> getKeyState ( KEY_ESCAPE )
>17601	CallExpression	core -> getKeyState ( KEY_ESCAPE )
>17602	ArgumentList	KEY_ESCAPE
>17603	Argument	KEY_ESCAPE
>17604	Identifier	KEY_ESCAPE
>17605	Callee	core -> getKeyState
>17606	PtrMemberAccess	core -> getKeyState
>17607	Identifier	getKeyState
>17608	Identifier	core
>17609	UnaryOp	! escDown
>17610	Identifier	escDown
>17611	UnaryOperator	!
>17612	IfStatement	if ( core -> getKeyState ( KEY_RETURN ) )
>17613	BreakStatement	 
>17614	Condition	 
>17615	CallExpression	core -> getKeyState ( KEY_RETURN )
>17616	ArgumentList	KEY_RETURN
>17617	Argument	KEY_RETURN
>17618	Identifier	KEY_RETURN
>17619	Callee	core -> getKeyState
>17620	PtrMemberAccess	core -> getKeyState
>17621	Identifier	getKeyState
>17622	Identifier	core
>17623	IfStatement	if ( blink )
>17624	CompoundStatement	 
>17625	ExpressionStatement	 
>17626	AssignmentExpr	text += \"|\"
>17627	PrimaryExpression	\"|\"
>17628	Identifier	text
>17629	Condition	 
>17630	Identifier	blink
>17631	IfStatement	if ( blinkTimer > 0.2f )
>17632	CompoundStatement	 
>17633	ExpressionStatement	 
>17634	AssignmentExpr	blinkTimer = 0
>17635	PrimaryExpression	0
>17636	Identifier	blinkTimer
>17637	ExpressionStatement	 
>17638	AssignmentExpr	blink = ! blink
>17639	UnaryOp	! blink
>17640	Identifier	blink
>17641	UnaryOperator	!
>17642	Identifier	blink
>17643	Condition	 
>17644	RelationalExpression	blinkTimer > 0.2f
>17645	PrimaryExpression	0.2f
>17646	Identifier	blinkTimer
>17647	ExpressionStatement	 
>17648	AssignmentExpr	blinkTimer += dt
>17649	Identifier	dt
>17650	Identifier	blinkTimer
>17651	IfStatement	if ( core -> getKeyState ( KEY_BACKSPACE ) )
>17652	ElseStatement	else
>17653	CompoundStatement	 
>17654	ExpressionStatement	 
>17655	AssignmentExpr	delDown = false
>17656	Identifier	false
>17657	Identifier	delDown
>17658	CompoundStatement	 
>17659	ExpressionStatement	 
>17660	AssignmentExpr	delDown = true
>17661	Identifier	true
>17662	Identifier	delDown
>17663	IfStatement	if ( ! delDown )
>17664	CompoundStatement	 
>17665	IfStatement	if ( ! text . empty ( ) )
>17666	CompoundStatement	 
>17667	ExpressionStatement	 
>17668	CallExpression	text . resize ( text . size ( ) - 1 )
>17669	ArgumentList	text . size ( ) - 1
>17670	Argument	text . size ( ) - 1
>17671	AdditiveExpression	text . size ( ) - 1
>17672	PrimaryExpression	1
>17673	CallExpression	text . size ( )
>17674	ArgumentList	 
>17675	Callee	text . size
>17676	MemberAccess	text . size
>17677	Identifier	size
>17678	Identifier	text
>17679	Callee	text . resize
>17680	MemberAccess	text . resize
>17681	Identifier	resize
>17682	Identifier	text
>17683	Condition	 
>17684	UnaryOp	! text . empty ( )
>17685	CallExpression	text . empty ( )
>17686	ArgumentList	 
>17687	Callee	text . empty
>17688	MemberAccess	text . empty
>17689	Identifier	empty
>17690	Identifier	text
>17691	UnaryOperator	!
>17692	Condition	 
>17693	UnaryOp	! delDown
>17694	Identifier	delDown
>17695	UnaryOperator	!
>17696	Condition	 
>17697	CallExpression	core -> getKeyState ( KEY_BACKSPACE )
>17698	ArgumentList	KEY_BACKSPACE
>17699	Argument	KEY_BACKSPACE
>17700	Identifier	KEY_BACKSPACE
>17701	Callee	core -> getKeyState
>17702	PtrMemberAccess	core -> getKeyState
>17703	Identifier	getKeyState
>17704	Identifier	core
>17705	IfStatement	if ( inputText -> getWidth ( ) < 800 - 60 )
>17706	CompoundStatement	 
>17707	ExpressionStatement	 
>17708	CallExpression	doAlphabetInputKey ( KEY_TILDE , '~' , ( char * ) & map , & text , '~' )
>17709	ArgumentList	KEY_TILDE
>17710	Argument	'~'
>17711	PrimaryExpression	'~'
>17712	Argument	& text
>17713	UnaryOp	& text
>17714	Identifier	text
>17715	UnaryOperator	&
>17716	Argument	( char * ) & map
>17717	CastExpression	( char * ) & map
>17718	UnaryOp	& map
>17719	Identifier	map
>17720	UnaryOperator	&
>17721	CastTarget	char *
>17722	Argument	'~'
>17723	PrimaryExpression	'~'
>17724	Argument	KEY_TILDE
>17725	Identifier	KEY_TILDE
>17726	Callee	doAlphabetInputKey
>17727	Identifier	doAlphabetInputKey
>17728	ExpressionStatement	 
>17729	CallExpression	doAlphabetInputKey ( KEY_MINUS , '-' , ( char * ) & map , & text , '_' )
>17730	ArgumentList	KEY_MINUS
>17731	Argument	'_'
>17732	PrimaryExpression	'_'
>17733	Argument	& text
>17734	UnaryOp	& text
>17735	Identifier	text
>17736	UnaryOperator	&
>17737	Argument	( char * ) & map
>17738	CastExpression	( char * ) & map
>17739	UnaryOp	& map
>17740	Identifier	map
>17741	UnaryOperator	&
>17742	CastTarget	char *
>17743	Argument	'-'
>17744	PrimaryExpression	'-'
>17745	Argument	KEY_MINUS
>17746	Identifier	KEY_MINUS
>17747	Callee	doAlphabetInputKey
>17748	Identifier	doAlphabetInputKey
>17749	ExpressionStatement	 
>17750	CallExpression	doAlphabetInputKey ( KEY_SPACE , ' ' , ( char * ) & map , & text )
>17751	ArgumentList	KEY_SPACE
>17752	Argument	& text
>17753	UnaryOp	& text
>17754	Identifier	text
>17755	UnaryOperator	&
>17756	Argument	( char * ) & map
>17757	CastExpression	( char * ) & map
>17758	UnaryOp	& map
>17759	Identifier	map
>17760	UnaryOperator	&
>17761	CastTarget	char *
>17762	Argument	' '
>17763	PrimaryExpression	' '
>17764	Argument	KEY_SPACE
>17765	Identifier	KEY_SPACE
>17766	Callee	doAlphabetInputKey
>17767	Identifier	doAlphabetInputKey
>17768	ExpressionStatement	 
>17769	CallExpression	doAlphabetInputKey ( KEY_PERIOD , '.' , ( char * ) & map , & text )
>17770	ArgumentList	KEY_PERIOD
>17771	Argument	& text
>17772	UnaryOp	& text
>17773	Identifier	text
>17774	UnaryOperator	&
>17775	Argument	( char * ) & map
>17776	CastExpression	( char * ) & map
>17777	UnaryOp	& map
>17778	Identifier	map
>17779	UnaryOperator	&
>17780	CastTarget	char *
>17781	Argument	'.'
>17782	PrimaryExpression	'.'
>17783	Argument	KEY_PERIOD
>17784	Identifier	KEY_PERIOD
>17785	Callee	doAlphabetInputKey
>17786	Identifier	doAlphabetInputKey
>17787	ExpressionStatement	 
>17788	CallExpression	doAlphabetInputKey ( KEY_0 , '0' , ( char * ) & map , & text )
>17789	ArgumentList	KEY_0
>17790	Argument	& text
>17791	UnaryOp	& text
>17792	Identifier	text
>17793	UnaryOperator	&
>17794	Argument	( char * ) & map
>17795	CastExpression	( char * ) & map
>17796	UnaryOp	& map
>17797	Identifier	map
>17798	UnaryOperator	&
>17799	CastTarget	char *
>17800	Argument	'0'
>17801	PrimaryExpression	'0'
>17802	Argument	KEY_0
>17803	Identifier	KEY_0
>17804	Callee	doAlphabetInputKey
>17805	Identifier	doAlphabetInputKey
>17806	ExpressionStatement	 
>17807	CallExpression	doAlphabetInputKey ( KEY_9 , '9' , ( char * ) & map , & text )
>17808	ArgumentList	KEY_9
>17809	Argument	& text
>17810	UnaryOp	& text
>17811	Identifier	text
>17812	UnaryOperator	&
>17813	Argument	( char * ) & map
>17814	CastExpression	( char * ) & map
>17815	UnaryOp	& map
>17816	Identifier	map
>17817	UnaryOperator	&
>17818	CastTarget	char *
>17819	Argument	'9'
>17820	PrimaryExpression	'9'
>17821	Argument	KEY_9
>17822	Identifier	KEY_9
>17823	Callee	doAlphabetInputKey
>17824	Identifier	doAlphabetInputKey
>17825	ExpressionStatement	 
>17826	CallExpression	doAlphabetInputKey ( KEY_8 , '8' , ( char * ) & map , & text )
>17827	ArgumentList	KEY_8
>17828	Argument	& text
>17829	UnaryOp	& text
>17830	Identifier	text
>17831	UnaryOperator	&
>17832	Argument	( char * ) & map
>17833	CastExpression	( char * ) & map
>17834	UnaryOp	& map
>17835	Identifier	map
>17836	UnaryOperator	&
>17837	CastTarget	char *
>17838	Argument	'8'
>17839	PrimaryExpression	'8'
>17840	Argument	KEY_8
>17841	Identifier	KEY_8
>17842	Callee	doAlphabetInputKey
>17843	Identifier	doAlphabetInputKey
>17844	ExpressionStatement	 
>17845	CallExpression	doAlphabetInputKey ( KEY_7 , '7' , ( char * ) & map , & text )
>17846	ArgumentList	KEY_7
>17847	Argument	& text
>17848	UnaryOp	& text
>17849	Identifier	text
>17850	UnaryOperator	&
>17851	Argument	( char * ) & map
>17852	CastExpression	( char * ) & map
>17853	UnaryOp	& map
>17854	Identifier	map
>17855	UnaryOperator	&
>17856	CastTarget	char *
>17857	Argument	'7'
>17858	PrimaryExpression	'7'
>17859	Argument	KEY_7
>17860	Identifier	KEY_7
>17861	Callee	doAlphabetInputKey
>17862	Identifier	doAlphabetInputKey
>17863	ExpressionStatement	 
>17864	CallExpression	doAlphabetInputKey ( KEY_6 , '6' , ( char * ) & map , & text )
>17865	ArgumentList	KEY_6
>17866	Argument	& text
>17867	UnaryOp	& text
>17868	Identifier	text
>17869	UnaryOperator	&
>17870	Argument	( char * ) & map
>17871	CastExpression	( char * ) & map
>17872	UnaryOp	& map
>17873	Identifier	map
>17874	UnaryOperator	&
>17875	CastTarget	char *
>17876	Argument	'6'
>17877	PrimaryExpression	'6'
>17878	Argument	KEY_6
>17879	Identifier	KEY_6
>17880	Callee	doAlphabetInputKey
>17881	Identifier	doAlphabetInputKey
>17882	ExpressionStatement	 
>17883	CallExpression	doAlphabetInputKey ( KEY_5 , '5' , ( char * ) & map , & text )
>17884	ArgumentList	KEY_5
>17885	Argument	& text
>17886	UnaryOp	& text
>17887	Identifier	text
>17888	UnaryOperator	&
>17889	Argument	( char * ) & map
>17890	CastExpression	( char * ) & map
>17891	UnaryOp	& map
>17892	Identifier	map
>17893	UnaryOperator	&
>17894	CastTarget	char *
>17895	Argument	'5'
>17896	PrimaryExpression	'5'
>17897	Argument	KEY_5
>17898	Identifier	KEY_5
>17899	Callee	doAlphabetInputKey
>17900	Identifier	doAlphabetInputKey
>17901	ExpressionStatement	 
>17902	CallExpression	doAlphabetInputKey ( KEY_4 , '4' , ( char * ) & map , & text )
>17903	ArgumentList	KEY_4
>17904	Argument	& text
>17905	UnaryOp	& text
>17906	Identifier	text
>17907	UnaryOperator	&
>17908	Argument	( char * ) & map
>17909	CastExpression	( char * ) & map
>17910	UnaryOp	& map
>17911	Identifier	map
>17912	UnaryOperator	&
>17913	CastTarget	char *
>17914	Argument	'4'
>17915	PrimaryExpression	'4'
>17916	Argument	KEY_4
>17917	Identifier	KEY_4
>17918	Callee	doAlphabetInputKey
>17919	Identifier	doAlphabetInputKey
>17920	ExpressionStatement	 
>17921	CallExpression	doAlphabetInputKey ( KEY_3 , '3' , ( char * ) & map , & text )
>17922	ArgumentList	KEY_3
>17923	Argument	& text
>17924	UnaryOp	& text
>17925	Identifier	text
>17926	UnaryOperator	&
>17927	Argument	( char * ) & map
>17928	CastExpression	( char * ) & map
>17929	UnaryOp	& map
>17930	Identifier	map
>17931	UnaryOperator	&
>17932	CastTarget	char *
>17933	Argument	'3'
>17934	PrimaryExpression	'3'
>17935	Argument	KEY_3
>17936	Identifier	KEY_3
>17937	Callee	doAlphabetInputKey
>17938	Identifier	doAlphabetInputKey
>17939	ExpressionStatement	 
>17940	CallExpression	doAlphabetInputKey ( KEY_2 , '2' , ( char * ) & map , & text )
>17941	ArgumentList	KEY_2
>17942	Argument	& text
>17943	UnaryOp	& text
>17944	Identifier	text
>17945	UnaryOperator	&
>17946	Argument	( char * ) & map
>17947	CastExpression	( char * ) & map
>17948	UnaryOp	& map
>17949	Identifier	map
>17950	UnaryOperator	&
>17951	CastTarget	char *
>17952	Argument	'2'
>17953	PrimaryExpression	'2'
>17954	Argument	KEY_2
>17955	Identifier	KEY_2
>17956	Callee	doAlphabetInputKey
>17957	Identifier	doAlphabetInputKey
>17958	ExpressionStatement	 
>17959	CallExpression	doAlphabetInputKey ( KEY_1 , '1' , ( char * ) & map , & text )
>17960	ArgumentList	KEY_1
>17961	Argument	& text
>17962	UnaryOp	& text
>17963	Identifier	text
>17964	UnaryOperator	&
>17965	Argument	( char * ) & map
>17966	CastExpression	( char * ) & map
>17967	UnaryOp	& map
>17968	Identifier	map
>17969	UnaryOperator	&
>17970	CastTarget	char *
>17971	Argument	'1'
>17972	PrimaryExpression	'1'
>17973	Argument	KEY_1
>17974	Identifier	KEY_1
>17975	Callee	doAlphabetInputKey
>17976	Identifier	doAlphabetInputKey
>17977	ExpressionStatement	 
>17978	CallExpression	doAlphabetInputKey ( KEY_Z , 'z' , ( char * ) & map , & text , 'Z' )
>17979	ArgumentList	KEY_Z
>17980	Argument	'Z'
>17981	PrimaryExpression	'Z'
>17982	Argument	& text
>17983	UnaryOp	& text
>17984	Identifier	text
>17985	UnaryOperator	&
>17986	Argument	( char * ) & map
>17987	CastExpression	( char * ) & map
>17988	UnaryOp	& map
>17989	Identifier	map
>17990	UnaryOperator	&
>17991	CastTarget	char *
>17992	Argument	'z'
>17993	PrimaryExpression	'z'
>17994	Argument	KEY_Z
>17995	Identifier	KEY_Z
>17996	Callee	doAlphabetInputKey
>17997	Identifier	doAlphabetInputKey
>17998	ExpressionStatement	 
>17999	CallExpression	doAlphabetInputKey ( KEY_Y , 'y' , ( char * ) & map , & text , 'Y' )
>18000	ArgumentList	KEY_Y
>18001	Argument	'Y'
>18002	PrimaryExpression	'Y'
>18003	Argument	& text
>18004	UnaryOp	& text
>18005	Identifier	text
>18006	UnaryOperator	&
>18007	Argument	( char * ) & map
>18008	CastExpression	( char * ) & map
>18009	UnaryOp	& map
>18010	Identifier	map
>18011	UnaryOperator	&
>18012	CastTarget	char *
>18013	Argument	'y'
>18014	PrimaryExpression	'y'
>18015	Argument	KEY_Y
>18016	Identifier	KEY_Y
>18017	Callee	doAlphabetInputKey
>18018	Identifier	doAlphabetInputKey
>18019	ExpressionStatement	 
>18020	CallExpression	doAlphabetInputKey ( KEY_X , 'x' , ( char * ) & map , & text , 'X' )
>18021	ArgumentList	KEY_X
>18022	Argument	'X'
>18023	PrimaryExpression	'X'
>18024	Argument	& text
>18025	UnaryOp	& text
>18026	Identifier	text
>18027	UnaryOperator	&
>18028	Argument	( char * ) & map
>18029	CastExpression	( char * ) & map
>18030	UnaryOp	& map
>18031	Identifier	map
>18032	UnaryOperator	&
>18033	CastTarget	char *
>18034	Argument	'x'
>18035	PrimaryExpression	'x'
>18036	Argument	KEY_X
>18037	Identifier	KEY_X
>18038	Callee	doAlphabetInputKey
>18039	Identifier	doAlphabetInputKey
>18040	ExpressionStatement	 
>18041	CallExpression	doAlphabetInputKey ( KEY_W , 'w' , ( char * ) & map , & text , 'W' )
>18042	ArgumentList	KEY_W
>18043	Argument	'W'
>18044	PrimaryExpression	'W'
>18045	Argument	& text
>18046	UnaryOp	& text
>18047	Identifier	text
>18048	UnaryOperator	&
>18049	Argument	( char * ) & map
>18050	CastExpression	( char * ) & map
>18051	UnaryOp	& map
>18052	Identifier	map
>18053	UnaryOperator	&
>18054	CastTarget	char *
>18055	Argument	'w'
>18056	PrimaryExpression	'w'
>18057	Argument	KEY_W
>18058	Identifier	KEY_W
>18059	Callee	doAlphabetInputKey
>18060	Identifier	doAlphabetInputKey
>18061	ExpressionStatement	 
>18062	CallExpression	doAlphabetInputKey ( KEY_V , 'v' , ( char * ) & map , & text , 'V' )
>18063	ArgumentList	KEY_V
>18064	Argument	'V'
>18065	PrimaryExpression	'V'
>18066	Argument	& text
>18067	UnaryOp	& text
>18068	Identifier	text
>18069	UnaryOperator	&
>18070	Argument	( char * ) & map
>18071	CastExpression	( char * ) & map
>18072	UnaryOp	& map
>18073	Identifier	map
>18074	UnaryOperator	&
>18075	CastTarget	char *
>18076	Argument	'v'
>18077	PrimaryExpression	'v'
>18078	Argument	KEY_V
>18079	Identifier	KEY_V
>18080	Callee	doAlphabetInputKey
>18081	Identifier	doAlphabetInputKey
>18082	ExpressionStatement	 
>18083	CallExpression	doAlphabetInputKey ( KEY_U , 'u' , ( char * ) & map , & text , 'U' )
>18084	ArgumentList	KEY_U
>18085	Argument	'U'
>18086	PrimaryExpression	'U'
>18087	Argument	& text
>18088	UnaryOp	& text
>18089	Identifier	text
>18090	UnaryOperator	&
>18091	Argument	( char * ) & map
>18092	CastExpression	( char * ) & map
>18093	UnaryOp	& map
>18094	Identifier	map
>18095	UnaryOperator	&
>18096	CastTarget	char *
>18097	Argument	'u'
>18098	PrimaryExpression	'u'
>18099	Argument	KEY_U
>18100	Identifier	KEY_U
>18101	Callee	doAlphabetInputKey
>18102	Identifier	doAlphabetInputKey
>18103	ExpressionStatement	 
>18104	CallExpression	doAlphabetInputKey ( KEY_T , 't' , ( char * ) & map , & text , 'T' )
>18105	ArgumentList	KEY_T
>18106	Argument	'T'
>18107	PrimaryExpression	'T'
>18108	Argument	& text
>18109	UnaryOp	& text
>18110	Identifier	text
>18111	UnaryOperator	&
>18112	Argument	( char * ) & map
>18113	CastExpression	( char * ) & map
>18114	UnaryOp	& map
>18115	Identifier	map
>18116	UnaryOperator	&
>18117	CastTarget	char *
>18118	Argument	't'
>18119	PrimaryExpression	't'
>18120	Argument	KEY_T
>18121	Identifier	KEY_T
>18122	Callee	doAlphabetInputKey
>18123	Identifier	doAlphabetInputKey
>18124	ExpressionStatement	 
>18125	CallExpression	doAlphabetInputKey ( KEY_S , 's' , ( char * ) & map , & text , 'S' )
>18126	ArgumentList	KEY_S
>18127	Argument	'S'
>18128	PrimaryExpression	'S'
>18129	Argument	& text
>18130	UnaryOp	& text
>18131	Identifier	text
>18132	UnaryOperator	&
>18133	Argument	( char * ) & map
>18134	CastExpression	( char * ) & map
>18135	UnaryOp	& map
>18136	Identifier	map
>18137	UnaryOperator	&
>18138	CastTarget	char *
>18139	Argument	's'
>18140	PrimaryExpression	's'
>18141	Argument	KEY_S
>18142	Identifier	KEY_S
>18143	Callee	doAlphabetInputKey
>18144	Identifier	doAlphabetInputKey
>18145	ExpressionStatement	 
>18146	CallExpression	doAlphabetInputKey ( KEY_R , 'r' , ( char * ) & map , & text , 'R' )
>18147	ArgumentList	KEY_R
>18148	Argument	'R'
>18149	PrimaryExpression	'R'
>18150	Argument	& text
>18151	UnaryOp	& text
>18152	Identifier	text
>18153	UnaryOperator	&
>18154	Argument	( char * ) & map
>18155	CastExpression	( char * ) & map
>18156	UnaryOp	& map
>18157	Identifier	map
>18158	UnaryOperator	&
>18159	CastTarget	char *
>18160	Argument	'r'
>18161	PrimaryExpression	'r'
>18162	Argument	KEY_R
>18163	Identifier	KEY_R
>18164	Callee	doAlphabetInputKey
>18165	Identifier	doAlphabetInputKey
>18166	ExpressionStatement	 
>18167	CallExpression	doAlphabetInputKey ( KEY_Q , 'q' , ( char * ) & map , & text , 'Q' )
>18168	ArgumentList	KEY_Q
>18169	Argument	'Q'
>18170	PrimaryExpression	'Q'
>18171	Argument	& text
>18172	UnaryOp	& text
>18173	Identifier	text
>18174	UnaryOperator	&
>18175	Argument	( char * ) & map
>18176	CastExpression	( char * ) & map
>18177	UnaryOp	& map
>18178	Identifier	map
>18179	UnaryOperator	&
>18180	CastTarget	char *
>18181	Argument	'q'
>18182	PrimaryExpression	'q'
>18183	Argument	KEY_Q
>18184	Identifier	KEY_Q
>18185	Callee	doAlphabetInputKey
>18186	Identifier	doAlphabetInputKey
>18187	ExpressionStatement	 
>18188	CallExpression	doAlphabetInputKey ( KEY_P , 'p' , ( char * ) & map , & text , 'P' )
>18189	ArgumentList	KEY_P
>18190	Argument	'P'
>18191	PrimaryExpression	'P'
>18192	Argument	& text
>18193	UnaryOp	& text
>18194	Identifier	text
>18195	UnaryOperator	&
>18196	Argument	( char * ) & map
>18197	CastExpression	( char * ) & map
>18198	UnaryOp	& map
>18199	Identifier	map
>18200	UnaryOperator	&
>18201	CastTarget	char *
>18202	Argument	'p'
>18203	PrimaryExpression	'p'
>18204	Argument	KEY_P
>18205	Identifier	KEY_P
>18206	Callee	doAlphabetInputKey
>18207	Identifier	doAlphabetInputKey
>18208	ExpressionStatement	 
>18209	CallExpression	doAlphabetInputKey ( KEY_O , 'o' , ( char * ) & map , & text , 'O' )
>18210	ArgumentList	KEY_O
>18211	Argument	'O'
>18212	PrimaryExpression	'O'
>18213	Argument	& text
>18214	UnaryOp	& text
>18215	Identifier	text
>18216	UnaryOperator	&
>18217	Argument	( char * ) & map
>18218	CastExpression	( char * ) & map
>18219	UnaryOp	& map
>18220	Identifier	map
>18221	UnaryOperator	&
>18222	CastTarget	char *
>18223	Argument	'o'
>18224	PrimaryExpression	'o'
>18225	Argument	KEY_O
>18226	Identifier	KEY_O
>18227	Callee	doAlphabetInputKey
>18228	Identifier	doAlphabetInputKey
>18229	ExpressionStatement	 
>18230	CallExpression	doAlphabetInputKey ( KEY_N , 'n' , ( char * ) & map , & text , 'N' )
>18231	ArgumentList	KEY_N
>18232	Argument	'N'
>18233	PrimaryExpression	'N'
>18234	Argument	& text
>18235	UnaryOp	& text
>18236	Identifier	text
>18237	UnaryOperator	&
>18238	Argument	( char * ) & map
>18239	CastExpression	( char * ) & map
>18240	UnaryOp	& map
>18241	Identifier	map
>18242	UnaryOperator	&
>18243	CastTarget	char *
>18244	Argument	'n'
>18245	PrimaryExpression	'n'
>18246	Argument	KEY_N
>18247	Identifier	KEY_N
>18248	Callee	doAlphabetInputKey
>18249	Identifier	doAlphabetInputKey
>18250	ExpressionStatement	 
>18251	CallExpression	doAlphabetInputKey ( KEY_M , 'm' , ( char * ) & map , & text , 'M' )
>18252	ArgumentList	KEY_M
>18253	Argument	'M'
>18254	PrimaryExpression	'M'
>18255	Argument	& text
>18256	UnaryOp	& text
>18257	Identifier	text
>18258	UnaryOperator	&
>18259	Argument	( char * ) & map
>18260	CastExpression	( char * ) & map
>18261	UnaryOp	& map
>18262	Identifier	map
>18263	UnaryOperator	&
>18264	CastTarget	char *
>18265	Argument	'm'
>18266	PrimaryExpression	'm'
>18267	Argument	KEY_M
>18268	Identifier	KEY_M
>18269	Callee	doAlphabetInputKey
>18270	Identifier	doAlphabetInputKey
>18271	ExpressionStatement	 
>18272	CallExpression	doAlphabetInputKey ( KEY_L , 'l' , ( char * ) & map , & text , 'L' )
>18273	ArgumentList	KEY_L
>18274	Argument	'L'
>18275	PrimaryExpression	'L'
>18276	Argument	& text
>18277	UnaryOp	& text
>18278	Identifier	text
>18279	UnaryOperator	&
>18280	Argument	( char * ) & map
>18281	CastExpression	( char * ) & map
>18282	UnaryOp	& map
>18283	Identifier	map
>18284	UnaryOperator	&
>18285	CastTarget	char *
>18286	Argument	'l'
>18287	PrimaryExpression	'l'
>18288	Argument	KEY_L
>18289	Identifier	KEY_L
>18290	Callee	doAlphabetInputKey
>18291	Identifier	doAlphabetInputKey
>18292	ExpressionStatement	 
>18293	CallExpression	doAlphabetInputKey ( KEY_K , 'k' , ( char * ) & map , & text , 'K' )
>18294	ArgumentList	KEY_K
>18295	Argument	'K'
>18296	PrimaryExpression	'K'
>18297	Argument	& text
>18298	UnaryOp	& text
>18299	Identifier	text
>18300	UnaryOperator	&
>18301	Argument	( char * ) & map
>18302	CastExpression	( char * ) & map
>18303	UnaryOp	& map
>18304	Identifier	map
>18305	UnaryOperator	&
>18306	CastTarget	char *
>18307	Argument	'k'
>18308	PrimaryExpression	'k'
>18309	Argument	KEY_K
>18310	Identifier	KEY_K
>18311	Callee	doAlphabetInputKey
>18312	Identifier	doAlphabetInputKey
>18313	ExpressionStatement	 
>18314	CallExpression	doAlphabetInputKey ( KEY_J , 'j' , ( char * ) & map , & text , 'J' )
>18315	ArgumentList	KEY_J
>18316	Argument	'J'
>18317	PrimaryExpression	'J'
>18318	Argument	& text
>18319	UnaryOp	& text
>18320	Identifier	text
>18321	UnaryOperator	&
>18322	Argument	( char * ) & map
>18323	CastExpression	( char * ) & map
>18324	UnaryOp	& map
>18325	Identifier	map
>18326	UnaryOperator	&
>18327	CastTarget	char *
>18328	Argument	'j'
>18329	PrimaryExpression	'j'
>18330	Argument	KEY_J
>18331	Identifier	KEY_J
>18332	Callee	doAlphabetInputKey
>18333	Identifier	doAlphabetInputKey
>18334	ExpressionStatement	 
>18335	CallExpression	doAlphabetInputKey ( KEY_I , 'i' , ( char * ) & map , & text , 'I' )
>18336	ArgumentList	KEY_I
>18337	Argument	'I'
>18338	PrimaryExpression	'I'
>18339	Argument	& text
>18340	UnaryOp	& text
>18341	Identifier	text
>18342	UnaryOperator	&
>18343	Argument	( char * ) & map
>18344	CastExpression	( char * ) & map
>18345	UnaryOp	& map
>18346	Identifier	map
>18347	UnaryOperator	&
>18348	CastTarget	char *
>18349	Argument	'i'
>18350	PrimaryExpression	'i'
>18351	Argument	KEY_I
>18352	Identifier	KEY_I
>18353	Callee	doAlphabetInputKey
>18354	Identifier	doAlphabetInputKey
>18355	ExpressionStatement	 
>18356	CallExpression	doAlphabetInputKey ( KEY_H , 'h' , ( char * ) & map , & text , 'H' )
>18357	ArgumentList	KEY_H
>18358	Argument	'H'
>18359	PrimaryExpression	'H'
>18360	Argument	& text
>18361	UnaryOp	& text
>18362	Identifier	text
>18363	UnaryOperator	&
>18364	Argument	( char * ) & map
>18365	CastExpression	( char * ) & map
>18366	UnaryOp	& map
>18367	Identifier	map
>18368	UnaryOperator	&
>18369	CastTarget	char *
>18370	Argument	'h'
>18371	PrimaryExpression	'h'
>18372	Argument	KEY_H
>18373	Identifier	KEY_H
>18374	Callee	doAlphabetInputKey
>18375	Identifier	doAlphabetInputKey
>18376	ExpressionStatement	 
>18377	CallExpression	doAlphabetInputKey ( KEY_G , 'g' , ( char * ) & map , & text , 'G' )
>18378	ArgumentList	KEY_G
>18379	Argument	'G'
>18380	PrimaryExpression	'G'
>18381	Argument	& text
>18382	UnaryOp	& text
>18383	Identifier	text
>18384	UnaryOperator	&
>18385	Argument	( char * ) & map
>18386	CastExpression	( char * ) & map
>18387	UnaryOp	& map
>18388	Identifier	map
>18389	UnaryOperator	&
>18390	CastTarget	char *
>18391	Argument	'g'
>18392	PrimaryExpression	'g'
>18393	Argument	KEY_G
>18394	Identifier	KEY_G
>18395	Callee	doAlphabetInputKey
>18396	Identifier	doAlphabetInputKey
>18397	ExpressionStatement	 
>18398	CallExpression	doAlphabetInputKey ( KEY_F , 'f' , ( char * ) & map , & text , 'F' )
>18399	ArgumentList	KEY_F
>18400	Argument	'F'
>18401	PrimaryExpression	'F'
>18402	Argument	& text
>18403	UnaryOp	& text
>18404	Identifier	text
>18405	UnaryOperator	&
>18406	Argument	( char * ) & map
>18407	CastExpression	( char * ) & map
>18408	UnaryOp	& map
>18409	Identifier	map
>18410	UnaryOperator	&
>18411	CastTarget	char *
>18412	Argument	'f'
>18413	PrimaryExpression	'f'
>18414	Argument	KEY_F
>18415	Identifier	KEY_F
>18416	Callee	doAlphabetInputKey
>18417	Identifier	doAlphabetInputKey
>18418	ExpressionStatement	 
>18419	CallExpression	doAlphabetInputKey ( KEY_E , 'e' , ( char * ) & map , & text , 'E' )
>18420	ArgumentList	KEY_E
>18421	Argument	'E'
>18422	PrimaryExpression	'E'
>18423	Argument	& text
>18424	UnaryOp	& text
>18425	Identifier	text
>18426	UnaryOperator	&
>18427	Argument	( char * ) & map
>18428	CastExpression	( char * ) & map
>18429	UnaryOp	& map
>18430	Identifier	map
>18431	UnaryOperator	&
>18432	CastTarget	char *
>18433	Argument	'e'
>18434	PrimaryExpression	'e'
>18435	Argument	KEY_E
>18436	Identifier	KEY_E
>18437	Callee	doAlphabetInputKey
>18438	Identifier	doAlphabetInputKey
>18439	ExpressionStatement	 
>18440	CallExpression	doAlphabetInputKey ( KEY_D , 'd' , ( char * ) & map , & text , 'D' )
>18441	ArgumentList	KEY_D
>18442	Argument	'D'
>18443	PrimaryExpression	'D'
>18444	Argument	& text
>18445	UnaryOp	& text
>18446	Identifier	text
>18447	UnaryOperator	&
>18448	Argument	( char * ) & map
>18449	CastExpression	( char * ) & map
>18450	UnaryOp	& map
>18451	Identifier	map
>18452	UnaryOperator	&
>18453	CastTarget	char *
>18454	Argument	'd'
>18455	PrimaryExpression	'd'
>18456	Argument	KEY_D
>18457	Identifier	KEY_D
>18458	Callee	doAlphabetInputKey
>18459	Identifier	doAlphabetInputKey
>18460	ExpressionStatement	 
>18461	CallExpression	doAlphabetInputKey ( KEY_C , 'c' , ( char * ) & map , & text , 'C' )
>18462	ArgumentList	KEY_C
>18463	Argument	'C'
>18464	PrimaryExpression	'C'
>18465	Argument	& text
>18466	UnaryOp	& text
>18467	Identifier	text
>18468	UnaryOperator	&
>18469	Argument	( char * ) & map
>18470	CastExpression	( char * ) & map
>18471	UnaryOp	& map
>18472	Identifier	map
>18473	UnaryOperator	&
>18474	CastTarget	char *
>18475	Argument	'c'
>18476	PrimaryExpression	'c'
>18477	Argument	KEY_C
>18478	Identifier	KEY_C
>18479	Callee	doAlphabetInputKey
>18480	Identifier	doAlphabetInputKey
>18481	ExpressionStatement	 
>18482	CallExpression	doAlphabetInputKey ( KEY_B , 'b' , ( char * ) & map , & text , 'B' )
>18483	ArgumentList	KEY_B
>18484	Argument	'B'
>18485	PrimaryExpression	'B'
>18486	Argument	& text
>18487	UnaryOp	& text
>18488	Identifier	text
>18489	UnaryOperator	&
>18490	Argument	( char * ) & map
>18491	CastExpression	( char * ) & map
>18492	UnaryOp	& map
>18493	Identifier	map
>18494	UnaryOperator	&
>18495	CastTarget	char *
>18496	Argument	'b'
>18497	PrimaryExpression	'b'
>18498	Argument	KEY_B
>18499	Identifier	KEY_B
>18500	Callee	doAlphabetInputKey
>18501	Identifier	doAlphabetInputKey
>18502	ExpressionStatement	 
>18503	CallExpression	doAlphabetInputKey ( KEY_A , 'a' , ( char * ) & map , & text , 'A' )
>18504	ArgumentList	KEY_A
>18505	Argument	'A'
>18506	PrimaryExpression	'A'
>18507	Argument	& text
>18508	UnaryOp	& text
>18509	Identifier	text
>18510	UnaryOperator	&
>18511	Argument	( char * ) & map
>18512	CastExpression	( char * ) & map
>18513	UnaryOp	& map
>18514	Identifier	map
>18515	UnaryOperator	&
>18516	CastTarget	char *
>18517	Argument	'a'
>18518	PrimaryExpression	'a'
>18519	Argument	KEY_A
>18520	Identifier	KEY_A
>18521	Callee	doAlphabetInputKey
>18522	Identifier	doAlphabetInputKey
>18523	Condition	 
>18524	RelationalExpression	inputText -> getWidth ( ) < 800 - 60
>18525	AdditiveExpression	800 - 60
>18526	PrimaryExpression	60
>18527	PrimaryExpression	800
>18528	CallExpression	inputText -> getWidth ( )
>18529	ArgumentList	 
>18530	Callee	inputText -> getWidth
>18531	PtrMemberAccess	inputText -> getWidth
>18532	Identifier	getWidth
>18533	Identifier	inputText
>18534	IfStatement	if ( blink )
>18535	CompoundStatement	 
>18536	ExpressionStatement	 
>18537	CallExpression	inputText -> setText ( text )
>18538	ArgumentList	text
>18539	Argument	text
>18540	Identifier	text
>18541	Callee	inputText -> setText
>18542	PtrMemberAccess	inputText -> setText
>18543	Identifier	setText
>18544	Identifier	inputText
>18545	ExpressionStatement	 
>18546	CallExpression	text . resize ( text . size ( ) - 1 )
>18547	ArgumentList	text . size ( ) - 1
>18548	Argument	text . size ( ) - 1
>18549	AdditiveExpression	text . size ( ) - 1
>18550	PrimaryExpression	1
>18551	CallExpression	text . size ( )
>18552	ArgumentList	 
>18553	Callee	text . size
>18554	MemberAccess	text . size
>18555	Identifier	size
>18556	Identifier	text
>18557	Callee	text . resize
>18558	MemberAccess	text . resize
>18559	Identifier	resize
>18560	Identifier	text
>18561	Condition	 
>18562	Identifier	blink
>18563	Condition	 
>18564	PrimaryExpression	1
>18565	IdentifierDeclStatement	 
>18566	IdentifierDecl	blink = false
>18567	AssignmentExpr	blink = false
>18568	Identifier	false
>18569	Identifier	false
>18570	Identifier	blink
>18571	IdentifierDeclType	bool
>18572	IdentifierDeclStatement	 
>18573	IdentifierDecl	blinkTimer = 0
>18574	AssignmentExpr	blinkTimer = 0
>18575	PrimaryExpression	0
>18576	Identifier	blinkTimer
>18577	Identifier	blinkTimer
>18578	IdentifierDeclType	float
>18579	IdentifierDeclStatement	 
>18580	IdentifierDecl	dt = 1.0f / 60.0f
>18581	AssignmentExpr	dt = 1.0f / 60.0f
>18582	MultiplicativeExpression	1.0f / 60.0f
>18583	PrimaryExpression	60.0f
>18584	PrimaryExpression	1.0f
>18585	Identifier	dt
>18586	Identifier	dt
>18587	IdentifierDeclType	float
>18588	IdentifierDeclStatement	 
>18589	IdentifierDecl	escDown = false
>18590	AssignmentExpr	escDown = false
>18591	Identifier	false
>18592	Identifier	false
>18593	Identifier	escDown
>18594	IdentifierDeclType	bool
>18595	IdentifierDeclStatement	 
>18596	IdentifierDecl	delDown = false
>18597	AssignmentExpr	delDown = false
>18598	Identifier	false
>18599	Identifier	false
>18600	Identifier	delDown
>18601	IdentifierDeclType	bool
>18602	ForStatement	for ( int i = 0 ; i < 256 ; i ++ )
>18603	ExpressionStatement	 
>18604	AssignmentExpr	map [ i ] = 0
>18605	PrimaryExpression	0
>18606	ArrayIndexing	map [ i ]
>18607	Identifier	i
>18608	Identifier	map
>18609	IncDecOp	 
>18610	IncDec	++
>18611	Identifier	i
>18612	Condition	 
>18613	RelationalExpression	i < 256
>18614	PrimaryExpression	256
>18615	Identifier	i
>18616	ForInit	 
>18617	IdentifierDeclStatement	int i = 0 ;
>18618	IdentifierDecl	i = 0
>18619	AssignmentExpr	i = 0
>18620	PrimaryExpression	0
>18621	Identifier	i
>18622	Identifier	i
>18623	IdentifierDeclType	int
>18624	IdentifierDeclStatement	 
>18625	IdentifierDecl	map [ 256 ]
>18626	PrimaryExpression	256
>18627	Identifier	map
>18628	IdentifierDeclType	char [ 256 ]
>18629	IdentifierDeclStatement	 
>18630	IdentifierDecl	text = t
>18631	AssignmentExpr	text = t
>18632	Identifier	t
>18633	Identifier	t
>18634	Identifier	text
>18635	IdentifierDeclType	std 
>18636	ExpressionStatement	 
>18637	CallExpression	main ( trans )
>18638	ArgumentList	trans
>18639	Argument	trans
>18640	Identifier	trans
>18641	Callee	main
>18642	Identifier	main
>18643	ExpressionStatement	 
>18644	CallExpression	bg -> show ( )
>18645	ArgumentList	 
>18646	Callee	bg -> show
>18647	PtrMemberAccess	bg -> show
>18648	Identifier	show
>18649	Identifier	bg
>18650	ExpressionStatement	 
>18651	CallExpression	bg -> addChild ( inputText , PM_POINTER )
>18652	ArgumentList	inputText
>18653	Argument	PM_POINTER
>18654	Identifier	PM_POINTER
>18655	Argument	inputText
>18656	Identifier	inputText
>18657	Callee	bg -> addChild
>18658	PtrMemberAccess	bg -> addChild
>18659	Identifier	addChild
>18660	Identifier	bg
>18661	ExpressionStatement	 
>18662	AssignmentExpr	inputText -> position = Vector ( - 400 + 20 , 8 + 8 )
>18663	CallExpression	Vector ( - 400 + 20 , 8 + 8 )
>18664	ArgumentList	- 400 + 20
>18665	Argument	8 + 8
>18666	AdditiveExpression	8 + 8
>18667	PrimaryExpression	8
>18668	PrimaryExpression	8
>18669	Argument	- 400 + 20
>18670	AdditiveExpression	- 400 + 20
>18671	PrimaryExpression	20
>18672	UnaryOp	- 400
>18673	PrimaryExpression	400
>18674	UnaryOperator	-
>18675	Callee	Vector
>18676	Identifier	Vector
>18677	PtrMemberAccess	inputText -> position
>18678	Identifier	position
>18679	Identifier	inputText
>18680	IdentifierDeclStatement	 
>18681	IdentifierDecl	* inputText = new TTFText ( & dsq -> fontArialBig )
>18682	AssignmentExpr	* inputText = new TTFText ( & dsq -> fontArialBig )
>18683	UnaryOp	& dsq -> fontArialBig
>18684	PtrMemberAccess	dsq -> fontArialBig
>18685	Identifier	fontArialBig
>18686	Identifier	dsq
>18687	UnaryOperator	&
>18688	Identifier	inputText
>18689	Identifier	inputText
>18690	IdentifierDeclType	TTFText *
>18691	ExpressionStatement	 
>18692	CallExpression	bg -> addChild ( label , PM_POINTER )
>18693	ArgumentList	label
>18694	Argument	PM_POINTER
>18695	Identifier	PM_POINTER
>18696	Argument	label
>18697	Identifier	label
>18698	Callee	bg -> addChild
>18699	PtrMemberAccess	bg -> addChild
>18700	Identifier	addChild
>18701	Identifier	bg
>18702	ExpressionStatement	 
>18703	AssignmentExpr	label -> position = Vector ( - 400 + 20 , - 12 )
>18704	CallExpression	Vector ( - 400 + 20 , - 12 )
>18705	ArgumentList	- 400 + 20
>18706	Argument	- 12
>18707	UnaryOp	- 12
>18708	PrimaryExpression	12
>18709	UnaryOperator	-
>18710	Argument	- 400 + 20
>18711	AdditiveExpression	- 400 + 20
>18712	PrimaryExpression	20
>18713	UnaryOp	- 400
>18714	PrimaryExpression	400
>18715	UnaryOperator	-
>18716	Callee	Vector
>18717	Identifier	Vector
>18718	PtrMemberAccess	label -> position
>18719	Identifier	position
>18720	Identifier	label
>18721	ExpressionStatement	 
>18722	CallExpression	label -> setText ( labelText )
>18723	ArgumentList	labelText
>18724	Argument	labelText
>18725	Identifier	labelText
>18726	Callee	label -> setText
>18727	PtrMemberAccess	label -> setText
>18728	Identifier	setText
>18729	Identifier	label
>18730	IdentifierDeclStatement	 
>18731	IdentifierDecl	* label = new TTFText ( & dsq -> fontArialSmall )
>18732	AssignmentExpr	* label = new TTFText ( & dsq -> fontArialSmall )
>18733	UnaryOp	& dsq -> fontArialSmall
>18734	PtrMemberAccess	dsq -> fontArialSmall
>18735	Identifier	fontArialSmall
>18736	Identifier	dsq
>18737	UnaryOperator	&
>18738	Identifier	label
>18739	Identifier	label
>18740	IdentifierDeclType	TTFText *
>18741	ExpressionStatement	 
>18742	CallExpression	addRenderObject ( bg , LR_DEBUG_TEXT )
>18743	ArgumentList	bg
>18744	Argument	LR_DEBUG_TEXT
>18745	Identifier	LR_DEBUG_TEXT
>18746	Argument	bg
>18747	Identifier	bg
>18748	Callee	addRenderObject
>18749	Identifier	addRenderObject
>18750	ExpressionStatement	 
>18751	AssignmentExpr	bg -> alpha = 0
>18752	PrimaryExpression	0
>18753	PtrMemberAccess	bg -> alpha
>18754	Identifier	alpha
>18755	Identifier	bg
>18756	ExpressionStatement	 
>18757	AssignmentExpr	bg -> followCamera = 1
>18758	PrimaryExpression	1
>18759	PtrMemberAccess	bg -> followCamera
>18760	Identifier	followCamera
>18761	Identifier	bg
>18762	ExpressionStatement	 
>18763	AssignmentExpr	bg -> position = Vector ( 400 , 300 )
>18764	CallExpression	Vector ( 400 , 300 )
>18765	ArgumentList	400
>18766	Argument	300
>18767	PrimaryExpression	300
>18768	Argument	400
>18769	PrimaryExpression	400
>18770	Callee	Vector
>18771	Identifier	Vector
>18772	PtrMemberAccess	bg -> position
>18773	Identifier	position
>18774	Identifier	bg
>18775	ExpressionStatement	 
>18776	CallExpression	bg -> setWidthHeight ( 790 , 64 , 10 )
>18777	ArgumentList	790
>18778	Argument	10
>18779	PrimaryExpression	10
>18780	Argument	64
>18781	PrimaryExpression	64
>18782	Argument	790
>18783	PrimaryExpression	790
>18784	Callee	bg -> setWidthHeight
>18785	PtrMemberAccess	bg -> setWidthHeight
>18786	Identifier	setWidthHeight
>18787	Identifier	bg
>18788	ExpressionStatement	 
>18789	Identifier	RoundedRect
>18790	Statement	 
>18791	Statement	 
>18792	Statement	 
>18793	Statement	 
>18794	Statement	 
>18795	ExpressionStatement	 
>18796	CallExpression	sound -> playSfx ( \"Menu-Open\" )
>18797	ArgumentList	\"Menu-Open\"
>18798	Argument	\"Menu-Open\"
>18799	PrimaryExpression	\"Menu-Open\"
>18800	Callee	sound -> playSfx
>18801	PtrMemberAccess	sound -> playSfx
>18802	Identifier	playSfx
>18803	Identifier	sound
>18804	ExpressionStatement	 
>18805	CallExpression	dsq -> game -> togglePause ( true )
>18806	ArgumentList	true
>18807	Argument	true
>18808	Identifier	true
>18809	Callee	dsq -> game -> togglePause
>18810	PtrMemberAccess	dsq -> game -> togglePause
>18811	Identifier	togglePause
>18812	PtrMemberAccess	dsq -> game
>18813	Identifier	game
>18814	Identifier	dsq
>18815	IdentifierDeclStatement	 
>18816	IdentifierDecl	pauseState = dsq -> game -> isPaused ( )
>18817	AssignmentExpr	pauseState = dsq -> game -> isPaused ( )
>18818	CallExpression	dsq -> game -> isPaused ( )
>18819	ArgumentList	 
>18820	Callee	dsq -> game -> isPaused
>18821	PtrMemberAccess	dsq -> game -> isPaused
>18822	Identifier	isPaused
>18823	PtrMemberAccess	dsq -> game
>18824	Identifier	game
>18825	Identifier	dsq
>18826	Identifier	pauseState
>18827	Identifier	pauseState
>18828	IdentifierDeclType	bool
>18829	IdentifierDeclStatement	 
>18830	IdentifierDecl	trans = 0.1
>18831	AssignmentExpr	trans = 0.1
>18832	PrimaryExpression	0.1
>18833	Identifier	trans
>18834	Identifier	trans
>18835	IdentifierDeclType	float
>18935	FunctionDef	DSQ 
>18936	ParameterList	 
>18937	ReturnType	void
>18938	CompoundStatement	 
>18939	ExpressionStatement	 
>18940	CallExpression	subtitlePlayer . end ( )
>18941	ArgumentList	 
>18942	Callee	subtitlePlayer . end
>18943	MemberAccess	subtitlePlayer . end
>18944	Identifier	end
>18945	Identifier	subtitlePlayer
>18946	ExpressionStatement	 
>18947	CallExpression	sound -> stopVoice ( )
>18948	ArgumentList	 
>18949	Callee	sound -> stopVoice
>18950	PtrMemberAccess	sound -> stopVoice
>18951	Identifier	stopVoice
>18952	Identifier	sound
>18958	FunctionDef	DSQ 
>18959	ParameterList	const std 
>18960	Parameter	 
>18961	Identifier	file
>18962	ParameterType	const std 
>18963	ReturnType	bool
>18964	CompoundStatement	 
>18965	ReturnStatement	 
>18966	Identifier	false
>18967	ForStatement	for ( int i = 0 ; i < dsq -> continuity . voiceOversPlayed . size ( ) ; i ++ )
>18968	CompoundStatement	 
>18969	IfStatement	if ( f == dsq -> continuity . voiceOversPlayed [ i ] )
>18970	CompoundStatement	 
>18971	ReturnStatement	 
>18972	Identifier	true
>18973	Condition	 
>18974	EqualityExpression	f == dsq -> continuity . voiceOversPlayed [ i ]
>18975	ArrayIndexing	dsq -> continuity . voiceOversPlayed [ i ]
>18976	Identifier	i
>18977	MemberAccess	dsq -> continuity . voiceOversPlayed
>18978	Identifier	voiceOversPlayed
>18979	PtrMemberAccess	dsq -> continuity
>18980	Identifier	continuity
>18981	Identifier	dsq
>18982	Identifier	f
>18983	IncDecOp	 
>18984	IncDec	++
>18985	Identifier	i
>18986	Condition	 
>18987	RelationalExpression	i < dsq -> continuity . voiceOversPlayed . size ( )
>18988	CallExpression	dsq -> continuity . voiceOversPlayed . size ( )
>18989	ArgumentList	 
>18990	Callee	dsq -> continuity . voiceOversPlayed . size
>18991	MemberAccess	dsq -> continuity . voiceOversPlayed . size
>18992	Identifier	size
>18993	MemberAccess	dsq -> continuity . voiceOversPlayed
>18994	Identifier	voiceOversPlayed
>18995	PtrMemberAccess	dsq -> continuity
>18996	Identifier	continuity
>18997	Identifier	dsq
>18998	Identifier	i
>18999	ForInit	 
>19000	IdentifierDeclStatement	int i = 0 ;
>19001	IdentifierDecl	i = 0
>19002	AssignmentExpr	i = 0
>19003	PrimaryExpression	0
>19004	Identifier	i
>19005	Identifier	i
>19006	IdentifierDeclType	int
>19007	ExpressionStatement	 
>19008	CallExpression	stringToUpper ( f )
>19009	ArgumentList	f
>19010	Argument	f
>19011	Identifier	f
>19012	Callee	stringToUpper
>19013	Identifier	stringToUpper
>19014	IdentifierDeclStatement	 
>19015	IdentifierDecl	f = file
>19016	AssignmentExpr	f = file
>19017	Identifier	file
>19018	Identifier	file
>19019	Identifier	f
>19020	IdentifierDeclType	std 
>19038	FunctionDef	DSQ 
>19039	ParameterList	const std 
>19040	Parameter	 
>19041	Identifier	file
>19042	ParameterType	const std 
>19043	ReturnType	void
>19044	CompoundStatement	 
>19045	IfStatement	if ( ! playedVoice ( f ) )
>19046	CompoundStatement	 
>19047	ExpressionStatement	 
>19048	CallExpression	voice ( file )
>19049	ArgumentList	file
>19050	Argument	file
>19051	Identifier	file
>19052	Callee	voice
>19053	Identifier	voice
>19054	Condition	 
>19055	UnaryOp	! playedVoice ( f )
>19056	CallExpression	playedVoice ( f )
>19057	ArgumentList	f
>19058	Argument	f
>19059	Identifier	f
>19060	Callee	playedVoice
>19061	Identifier	playedVoice
>19062	UnaryOperator	!
>19063	ExpressionStatement	 
>19064	CallExpression	stringToUpper ( f )
>19065	ArgumentList	f
>19066	Argument	f
>19067	Identifier	f
>19068	Callee	stringToUpper
>19069	Identifier	stringToUpper
>19070	IdentifierDeclStatement	 
>19071	IdentifierDecl	f = file
>19072	AssignmentExpr	f = file
>19073	Identifier	file
>19074	Identifier	file
>19075	Identifier	f
>19076	IdentifierDeclType	std 
>19083	FunctionDef	DSQ 
>19084	ParameterList	const std 
>19085	Parameter	 
>19086	Identifier	f
>19087	ParameterType	const std 
>19088	ReturnType	void
>19089	CompoundStatement	 
>19090	ExpressionStatement	 
>19091	CallExpression	sound -> playVoice ( f , SVT_INTERRUPT )
>19092	ArgumentList	f
>19093	Argument	SVT_INTERRUPT
>19094	Identifier	SVT_INTERRUPT
>19095	Argument	f
>19096	Identifier	f
>19097	Callee	sound -> playVoice
>19098	PtrMemberAccess	sound -> playVoice
>19099	Identifier	playVoice
>19100	Identifier	sound
>19107	FunctionDef	DSQ 
>19108	ParameterList	 
>19109	ReturnType	void
>19110	CompoundStatement	 
>19114	FunctionDef	DSQ 
>19115	ParameterList	 
>19116	ReturnType	void
>19117	CompoundStatement	 
>19118	ExpressionStatement	 
>19119	CallExpression	subtitlePlayer . end ( )
>19120	ArgumentList	 
>19121	Callee	subtitlePlayer . end
>19122	MemberAccess	subtitlePlayer . end
>19123	Identifier	end
>19124	Identifier	subtitlePlayer
>19129	FunctionDef	DSQ 
>19130	ParameterList	const std 
>19131	Parameter	 
>19132	Identifier	volMod
>19133	ParameterType	float
>19134	Parameter	 
>19135	Identifier	f
>19136	ParameterType	const std 
>19137	ReturnType	void
>19138	CompoundStatement	 
>19139	ExpressionStatement	 
>19140	CallExpression	sound -> playVoice ( file , SVT_QUEUE , volMod )
>19141	ArgumentList	file
>19142	Argument	volMod
>19143	Identifier	volMod
>19144	Argument	SVT_QUEUE
>19145	Identifier	SVT_QUEUE
>19146	Argument	file
>19147	Identifier	file
>19148	Callee	sound -> playVoice
>19149	PtrMemberAccess	sound -> playVoice
>19150	Identifier	playVoice
>19151	Identifier	sound
>19152	IfStatement	if ( ! playedVoice ( file ) )
>19153	ExpressionStatement	 
>19154	CallExpression	dsq -> continuity . voiceOversPlayed . push_back ( file )
>19155	ArgumentList	file
>19156	Argument	file
>19157	Identifier	file
>19158	Callee	dsq -> continuity . voiceOversPlayed . push_back
>19159	MemberAccess	dsq -> continuity . voiceOversPlayed . push_back
>19160	Identifier	push_back
>19161	MemberAccess	dsq -> continuity . voiceOversPlayed
>19162	Identifier	voiceOversPlayed
>19163	PtrMemberAccess	dsq -> continuity
>19164	Identifier	continuity
>19165	Identifier	dsq
>19166	Condition	 
>19167	UnaryOp	! playedVoice ( file )
>19168	CallExpression	playedVoice ( file )
>19169	ArgumentList	file
>19170	Argument	file
>19171	Identifier	file
>19172	Callee	playedVoice
>19173	Identifier	playedVoice
>19174	UnaryOperator	!
>19175	ExpressionStatement	 
>19176	CallExpression	stringToUpper ( file )
>19177	ArgumentList	file
>19178	Argument	file
>19179	Identifier	file
>19180	Callee	stringToUpper
>19181	Identifier	stringToUpper
>19182	IdentifierDeclStatement	 
>19183	IdentifierDecl	file = f
>19184	AssignmentExpr	file = f
>19185	Identifier	f
>19186	Identifier	f
>19187	Identifier	file
>19188	IdentifierDeclType	std 
>19189	ExpressionStatement	 
>19190	CallExpression	debugLog ( \"Voice
>19191	ArgumentList	\"Voice
>19192	Argument	\"Voice
>19193	AdditiveExpression	\"Voice
>19194	Identifier	f
>19195	PrimaryExpression	\"Voice
>19196	Callee	debugLog
>19197	Identifier	debugLog
>19211	FunctionDef	DSQ 
>19212	ParameterList	const std 
>19213	Parameter	 
>19214	Identifier	name
>19215	ParameterType	const std 
>19216	ReturnType	void
>19217	CompoundStatement	 
>19218	IfStatement	if ( user . audio . subtitles )
>19219	ExpressionStatement	 
>19220	CallExpression	subtitlePlayer . go ( name )
>19221	ArgumentList	name
>19222	Argument	name
>19223	Identifier	name
>19224	Callee	subtitlePlayer . go
>19225	MemberAccess	subtitlePlayer . go
>19226	Identifier	go
>19227	Identifier	subtitlePlayer
>19228	Condition	 
>19229	MemberAccess	user . audio . subtitles
>19230	Identifier	subtitles
>19231	MemberAccess	user . audio
>19232	Identifier	audio
>19233	Identifier	user
>19234	ExpressionStatement	 
>19235	CallExpression	Core 
>19236	ArgumentList	name
>19237	Argument	name
>19238	Identifier	name
>19239	Callee	Core 
>19240	Identifier	Core 
>19249	FunctionDef	DSQ 
>19250	ParameterList	 
>19251	ReturnType	Entity *
>19252	CompoundStatement	 
>19253	ReturnStatement	 
>19254	CallExpression	getNextEntity ( )
>19255	ArgumentList	 
>19256	Callee	getNextEntity
>19257	Identifier	getNextEntity
>19258	ExpressionStatement	 
>19259	AssignmentExpr	iter = & entities [ 0 ]
>19260	UnaryOp	& entities [ 0 ]
>19261	ArrayIndexing	entities [ 0 ]
>19262	PrimaryExpression	0
>19263	Identifier	entities
>19264	UnaryOperator	&
>19265	Identifier	iter
>19273	FunctionDef	DSQ 
>19274	ParameterList	 
>19275	ReturnType	Entity *
>19276	CompoundStatement	 
>19277	ReturnStatement	 
>19278	UnaryOp	* ( iter ++ )
>19279	IncDecOp	iter ++
>19280	IncDec	++
>19281	Identifier	iter
>19282	UnaryOperator	*
>19283	IfStatement	if ( * iter == 0 )
>19284	ReturnStatement	 
>19285	PrimaryExpression	0
>19286	Condition	 
>19287	EqualityExpression	* iter == 0
>19288	PrimaryExpression	0
>19289	UnaryOp	* iter
>19290	Identifier	iter
>19291	UnaryOperator	*
>19298	FunctionDef	DSQ 
>19299	ParameterList	std 
>19300	Parameter	 
>19301	Identifier	labelText
>19302	ParameterType	std 
>19303	ReturnType	Vector
>19304	CompoundStatement	 
>19305	ReturnStatement	 
>19306	Identifier	v
>19307	ExpressionStatement	 
>19308	CallExpression	label -> safeKill ( )
>19309	ArgumentList	 
>19310	Callee	label -> safeKill
>19311	PtrMemberAccess	label -> safeKill
>19312	Identifier	safeKill
>19313	Identifier	label
>19314	ExpressionStatement	 
>19315	AssignmentExpr	label -> alpha = 0
>19316	PrimaryExpression	0
>19317	PtrMemberAccess	label -> alpha
>19318	Identifier	alpha
>19319	Identifier	label
>19320	WhileStatement	while ( 1 )
>19321	CompoundStatement	 
>19322	ExpressionStatement	 
>19323	CallExpression	core -> main ( 1.0f / 30.0f )
>19324	ArgumentList	1.0f / 30.0f
>19325	Argument	1.0f / 30.0f
>19326	MultiplicativeExpression	1.0f / 30.0f
>19327	PrimaryExpression	30.0f
>19328	PrimaryExpression	1.0f
>19329	Callee	core -> main
>19330	PtrMemberAccess	core -> main
>19331	Identifier	main
>19332	Identifier	core
>19333	IfStatement	if ( core -> getKeyState ( KEY_RETURN ) )
>19334	BreakStatement	 
>19335	Condition	 
>19336	CallExpression	core -> getKeyState ( KEY_RETURN )
>19337	ArgumentList	KEY_RETURN
>19338	Argument	KEY_RETURN
>19339	Identifier	KEY_RETURN
>19340	Callee	core -> getKeyState
>19341	PtrMemberAccess	core -> getKeyState
>19342	Identifier	getKeyState
>19343	Identifier	core
>19344	IfStatement	if ( core -> getKeyState ( KEY_DOWN ) )
>19345	ExpressionStatement	 
>19346	AssignmentExpr	v . y = 1
>19347	PrimaryExpression	1
>19348	MemberAccess	v . y
>19349	Identifier	y
>19350	Identifier	v
>19351	Condition	 
>19352	CallExpression	core -> getKeyState ( KEY_DOWN )
>19353	ArgumentList	KEY_DOWN
>19354	Argument	KEY_DOWN
>19355	Identifier	KEY_DOWN
>19356	Callee	core -> getKeyState
>19357	PtrMemberAccess	core -> getKeyState
>19358	Identifier	getKeyState
>19359	Identifier	core
>19360	IfStatement	if ( core -> getKeyState ( KEY_UP ) )
>19361	ExpressionStatement	 
>19362	AssignmentExpr	v . y = - 1
>19363	UnaryOp	- 1
>19364	PrimaryExpression	1
>19365	UnaryOperator	-
>19366	MemberAccess	v . y
>19367	Identifier	y
>19368	Identifier	v
>19369	Condition	 
>19370	CallExpression	core -> getKeyState ( KEY_UP )
>19371	ArgumentList	KEY_UP
>19372	Argument	KEY_UP
>19373	Identifier	KEY_UP
>19374	Callee	core -> getKeyState
>19375	PtrMemberAccess	core -> getKeyState
>19376	Identifier	getKeyState
>19377	Identifier	core
>19378	IfStatement	if ( core -> getKeyState ( KEY_RIGHT ) )
>19379	ExpressionStatement	 
>19380	AssignmentExpr	v . x = 1
>19381	PrimaryExpression	1
>19382	MemberAccess	v . x
>19383	Identifier	x
>19384	Identifier	v
>19385	Condition	 
>19386	CallExpression	core -> getKeyState ( KEY_RIGHT )
>19387	ArgumentList	KEY_RIGHT
>19388	Argument	KEY_RIGHT
>19389	Identifier	KEY_RIGHT
>19390	Callee	core -> getKeyState
>19391	PtrMemberAccess	core -> getKeyState
>19392	Identifier	getKeyState
>19393	Identifier	core
>19394	IfStatement	if ( core -> getKeyState ( KEY_LEFT ) )
>19395	ExpressionStatement	 
>19396	AssignmentExpr	v . x = - 1
>19397	UnaryOp	- 1
>19398	PrimaryExpression	1
>19399	UnaryOperator	-
>19400	MemberAccess	v . x
>19401	Identifier	x
>19402	Identifier	v
>19403	Condition	 
>19404	CallExpression	core -> getKeyState ( KEY_LEFT )
>19405	ArgumentList	KEY_LEFT
>19406	Argument	KEY_LEFT
>19407	Identifier	KEY_LEFT
>19408	Callee	core -> getKeyState
>19409	PtrMemberAccess	core -> getKeyState
>19410	Identifier	getKeyState
>19411	Identifier	core
>19412	ExpressionStatement	 
>19413	AssignmentExpr	v . x = v . y = 0
>19414	AssignmentExpr	v . y = 0
>19415	PrimaryExpression	0
>19416	MemberAccess	v . y
>19417	Identifier	y
>19418	Identifier	v
>19419	MemberAccess	v . x
>19420	Identifier	x
>19421	Identifier	v
>19422	Condition	 
>19423	PrimaryExpression	1
>19424	IdentifierDeclStatement	 
>19425	IdentifierDecl	v
>19426	Identifier	v
>19427	IdentifierDeclType	Vector
>19428	WhileStatement	while ( core -> getKeyState ( KEY_RETURN ) )
>19429	CompoundStatement	 
>19430	ExpressionStatement	 
>19431	CallExpression	core -> main ( 1.0f / 30.0f )
>19432	ArgumentList	1.0f / 30.0f
>19433	Argument	1.0f / 30.0f
>19434	MultiplicativeExpression	1.0f / 30.0f
>19435	PrimaryExpression	30.0f
>19436	PrimaryExpression	1.0f
>19437	Callee	core -> main
>19438	PtrMemberAccess	core -> main
>19439	Identifier	main
>19440	Identifier	core
>19441	Condition	 
>19442	CallExpression	core -> getKeyState ( KEY_RETURN )
>19443	ArgumentList	KEY_RETURN
>19444	Argument	KEY_RETURN
>19445	Identifier	KEY_RETURN
>19446	Callee	core -> getKeyState
>19447	PtrMemberAccess	core -> getKeyState
>19448	Identifier	getKeyState
>19449	Identifier	core
>19450	ExpressionStatement	 
>19451	CallExpression	addRenderObject ( label , LR_HUD )
>19452	ArgumentList	label
>19453	Argument	LR_HUD
>19454	Identifier	LR_HUD
>19455	Argument	label
>19456	Identifier	label
>19457	Callee	addRenderObject
>19458	Identifier	addRenderObject
>19459	ExpressionStatement	 
>19460	CallExpression	label -> setText ( labelText )
>19461	ArgumentList	labelText
>19462	Argument	labelText
>19463	Identifier	labelText
>19464	Callee	label -> setText
>19465	PtrMemberAccess	label -> setText
>19466	Identifier	setText
>19467	Identifier	label
>19468	ExpressionStatement	 
>19469	AssignmentExpr	label -> followCamera = 1
>19470	PrimaryExpression	1
>19471	PtrMemberAccess	label -> followCamera
>19472	Identifier	followCamera
>19473	Identifier	label
>19474	ExpressionStatement	 
>19475	AssignmentExpr	label -> position = Vector ( 400 , 200 )
>19476	CallExpression	Vector ( 400 , 200 )
>19477	ArgumentList	400
>19478	Argument	200
>19479	PrimaryExpression	200
>19480	Argument	400
>19481	PrimaryExpression	400
>19482	Callee	Vector
>19483	Identifier	Vector
>19484	PtrMemberAccess	label -> position
>19485	Identifier	position
>19486	Identifier	label
>19487	ExpressionStatement	 
>19488	CallExpression	label -> setFontSize ( 16 )
>19489	ArgumentList	16
>19490	Argument	16
>19491	PrimaryExpression	16
>19492	Callee	label -> setFontSize
>19493	PtrMemberAccess	label -> setFontSize
>19494	Identifier	setFontSize
>19495	Identifier	label
>19496	IdentifierDeclStatement	 
>19497	IdentifierDecl	* label = new BitmapText ( & dsq -> font )
>19498	AssignmentExpr	* label = new BitmapText ( & dsq -> font )
>19499	UnaryOp	& dsq -> font
>19500	PtrMemberAccess	dsq -> font
>19501	Identifier	font
>19502	Identifier	dsq
>19503	UnaryOperator	&
>19504	Identifier	label
>19505	Identifier	label
>19506	IdentifierDeclType	BitmapText *
>19532	FunctionDef	DSQ 
>19533	ParameterList	const std 
>19534	Parameter	 
>19535	Identifier	f
>19536	ParameterType	const std 
>19537	ReturnType	std 
>19538	CompoundStatement	 
>19539	ReturnStatement	 
>19540	AdditiveExpression	\"dialogue/\" + languagePack + \"/\" + f + \".txt\"
>19541	AdditiveExpression	languagePack + \"/\" + f + \".txt\"
>19542	AdditiveExpression	\"/\" + f + \".txt\"
>19543	AdditiveExpression	f + \".txt\"
>19544	PrimaryExpression	\".txt\"
>19545	Identifier	f
>19546	PrimaryExpression	\"/\"
>19547	Identifier	languagePack
>19548	PrimaryExpression	\"dialogue/\"
>19554	FunctionDef	DSQ 
>19555	ParameterList	InStream & inFile , const std 
>19556	Parameter	 
>19557	Identifier	section
>19558	ParameterType	const std 
>19559	Parameter	 
>19560	Identifier	inFile
>19561	ParameterType	InStream &
>19562	ReturnType	void
>19563	CompoundStatement	 
>19564	ExpressionStatement	 
>19565	CallExpression	debugLog ( \"could not find section [\" + section + \"]\" )
>19566	ArgumentList	\"could not find section [\" + section + \"]\"
>19567	Argument	\"could not find section [\" + section + \"]\"
>19568	AdditiveExpression	\"could not find section [\" + section + \"]\"
>19569	AdditiveExpression	section + \"]\"
>19570	PrimaryExpression	\"]\"
>19571	Identifier	section
>19572	PrimaryExpression	\"could not find section [\"
>19573	Callee	debugLog
>19574	Identifier	debugLog
>19575	WhileStatement	while ( std 
>19576	CompoundStatement	 
>19577	IfStatement	if ( ! s . empty ( ) )
>19578	CompoundStatement	 
>19579	IfStatement	if ( s . find ( \"[\" ) != std 
>19580	CompoundStatement	 
>19581	ReturnStatement	 
>19582	Condition	 
>19583	AndExpression	s . find ( \"[\" ) != std 
>19584	EqualityExpression	s . find ( section ) != std 
>19585	Identifier	std 
>19586	CallExpression	s . find ( section )
>19587	ArgumentList	section
>19588	Argument	section
>19589	Identifier	section
>19590	Callee	s . find
>19591	MemberAccess	s . find
>19592	Identifier	find
>19593	Identifier	s
>19594	EqualityExpression	s . find ( \"[\" ) != std 
>19595	Identifier	std 
>19596	CallExpression	s . find ( \"[\" )
>19597	ArgumentList	\"[\"
>19598	Argument	\"[\"
>19599	PrimaryExpression	\"[\"
>19600	Callee	s . find
>19601	MemberAccess	s . find
>19602	Identifier	find
>19603	Identifier	s
>19604	Condition	 
>19605	UnaryOp	! s . empty ( )
>19606	CallExpression	s . empty ( )
>19607	ArgumentList	 
>19608	Callee	s . empty
>19609	MemberAccess	s . empty
>19610	Identifier	empty
>19611	Identifier	s
>19612	UnaryOperator	!
>19613	Condition	 
>19614	CallExpression	std 
>19615	ArgumentList	inFile
>19616	Argument	s
>19617	Identifier	s
>19618	Argument	inFile
>19619	Identifier	inFile
>19620	Callee	std 
>19621	Identifier	std 
>19622	IdentifierDeclStatement	 
>19623	IdentifierDecl	s
>19624	Identifier	s
>19625	IdentifierDeclType	std 
>19626	ExpressionStatement	 
>19627	CallExpression	inFile . open ( core -> adjustFilenameCase ( file ) . c_str ( ) )
>19628	ArgumentList	core -> adjustFilenameCase ( file ) . c_str ( )
>19629	Argument	core -> adjustFilenameCase ( file ) . c_str ( )
>19630	CallExpression	core -> adjustFilenameCase ( file ) . c_str ( )
>19631	ArgumentList	 
>19632	Callee	core -> adjustFilenameCase ( file ) . c_str
>19633	MemberAccess	core -> adjustFilenameCase ( file ) . c_str
>19634	Identifier	c_str
>19635	CallExpression	core -> adjustFilenameCase ( file )
>19636	ArgumentList	file
>19637	Argument	file
>19638	Identifier	file
>19639	Callee	core -> adjustFilenameCase
>19640	PtrMemberAccess	core -> adjustFilenameCase
>19641	Identifier	adjustFilenameCase
>19642	Identifier	core
>19643	Callee	inFile . open
>19644	MemberAccess	inFile . open
>19645	Identifier	open
>19646	Identifier	inFile
>19647	IfStatement	if ( ! exists ( file ) )
>19648	CompoundStatement	 
>19649	ReturnStatement	 
>19650	ExpressionStatement	 
>19651	CallExpression	debugLog ( \"Could not find dialogue [\" + file + \"]\" )
>19652	ArgumentList	\"Could not find dialogue [\" + file + \"]\"
>19653	Argument	\"Could not find dialogue [\" + file + \"]\"
>19654	AdditiveExpression	\"Could not find dialogue [\" + file + \"]\"
>19655	AdditiveExpression	file + \"]\"
>19656	PrimaryExpression	\"]\"
>19657	Identifier	file
>19658	PrimaryExpression	\"Could not find dialogue [\"
>19659	Callee	debugLog
>19660	Identifier	debugLog
>19661	Condition	 
>19662	UnaryOp	! exists ( file )
>19663	CallExpression	exists ( file )
>19664	ArgumentList	file
>19665	Argument	file
>19666	Identifier	file
>19667	Callee	exists
>19668	Identifier	exists
>19669	UnaryOperator	!
>19670	IdentifierDeclStatement	 
>19671	IdentifierDecl	file = dsq -> getDialogueFilename ( dialogueFile )
>19672	AssignmentExpr	file = dsq -> getDialogueFilename ( dialogueFile )
>19673	CallExpression	dsq -> getDialogueFilename ( dialogueFile )
>19674	ArgumentList	dialogueFile
>19675	Argument	dialogueFile
>19676	Identifier	dialogueFile
>19677	Callee	dsq -> getDialogueFilename
>19678	PtrMemberAccess	dsq -> getDialogueFilename
>19679	Identifier	getDialogueFilename
>19680	Identifier	dsq
>19681	Identifier	file
>19682	Identifier	file
>19683	IdentifierDeclType	std 
>19684	IfStatement	if ( section . empty ( ) )
>19685	ReturnStatement	 
>19686	Condition	 
>19687	CallExpression	section . empty ( )
>19688	ArgumentList	 
>19689	Callee	section . empty
>19690	MemberAccess	section . empty
>19691	Identifier	empty
>19692	Identifier	section
>19714	FunctionDef	DSQ 
>19715	ParameterList	const std 
>19716	Parameter	 
>19717	Identifier	ignoremissing
>19718	ParameterType	bool
>19719	Parameter	 
>19720	Identifier	function
>19721	ParameterType	const std 
>19722	Parameter	 
>19723	Identifier	name
>19724	ParameterType	const std 
>19725	ReturnType	bool
>19726	CompoundStatement	 
>19727	ReturnStatement	 
>19728	Identifier	false
>19729	IfStatement	if ( ! scriptInterface . runScript ( name , function , ignoremissing ) )
>19730	ElseStatement	else
>19731	CompoundStatement	 
>19732	ReturnStatement	 
>19733	Identifier	true
>19734	CompoundStatement	 
>19735	ExpressionStatement	 
>19736	CallExpression	debugLog ( \"Could not find script file [\" + name + \"]\" )
>19737	ArgumentList	\"Could not find script file [\" + name + \"]\"
>19738	Argument	\"Could not find script file [\" + name + \"]\"
>19739	AdditiveExpression	\"Could not find script file [\" + name + \"]\"
>19740	AdditiveExpression	name + \"]\"
>19741	PrimaryExpression	\"]\"
>19742	Identifier	name
>19743	PrimaryExpression	\"Could not find script file [\"
>19744	Callee	debugLog
>19745	Identifier	debugLog
>19746	Condition	 
>19747	UnaryOp	! scriptInterface . runScript ( name , function , ignoremissing )
>19748	CallExpression	scriptInterface . runScript ( name , function , ignoremissing )
>19749	ArgumentList	name
>19750	Argument	ignoremissing
>19751	Identifier	ignoremissing
>19752	Argument	function
>19753	Identifier	function
>19754	Argument	name
>19755	Identifier	name
>19756	Callee	scriptInterface . runScript
>19757	MemberAccess	scriptInterface . runScript
>19758	Identifier	runScript
>19759	Identifier	scriptInterface
>19760	UnaryOperator	!
>19771	FunctionDef	DSQ 
>19772	ParameterList	const std 
>19773	Parameter	 
>19774	Identifier	num
>19775	ParameterType	float
>19776	Parameter	 
>19777	Identifier	func
>19778	ParameterType	const std 
>19779	Parameter	 
>19780	Identifier	name
>19781	ParameterType	const std 
>19782	ReturnType	bool
>19783	CompoundStatement	 
>19784	ReturnStatement	 
>19785	Identifier	false
>19786	IfStatement	if ( ! scriptInterface . runScriptNum ( name , func , num ) )
>19787	ElseStatement	else
>19788	CompoundStatement	 
>19789	ReturnStatement	 
>19790	Identifier	true
>19791	CompoundStatement	 
>19792	ExpressionStatement	 
>19793	CallExpression	debugLog ( \"Could not find script file [\" + name + \"]\" )
>19794	ArgumentList	\"Could not find script file [\" + name + \"]\"
>19795	Argument	\"Could not find script file [\" + name + \"]\"
>19796	AdditiveExpression	\"Could not find script file [\" + name + \"]\"
>19797	AdditiveExpression	name + \"]\"
>19798	PrimaryExpression	\"]\"
>19799	Identifier	name
>19800	PrimaryExpression	\"Could not find script file [\"
>19801	Callee	debugLog
>19802	Identifier	debugLog
>19803	Condition	 
>19804	UnaryOp	! scriptInterface . runScriptNum ( name , func , num )
>19805	CallExpression	scriptInterface . runScriptNum ( name , func , num )
>19806	ArgumentList	name
>19807	Argument	num
>19808	Identifier	num
>19809	Argument	func
>19810	Identifier	func
>19811	Argument	name
>19812	Identifier	name
>19813	Callee	scriptInterface . runScriptNum
>19814	MemberAccess	scriptInterface . runScriptNum
>19815	Identifier	runScriptNum
>19816	Identifier	scriptInterface
>19817	UnaryOperator	!
>19828	FunctionDef	DSQ 
>19829	ParameterList	 
>19830	ReturnType	void
>19831	CompoundStatement	 
>19832	ExpressionStatement	 
>19833	CallExpression	scriptInterface . collectGarbage ( )
>19834	ArgumentList	 
>19835	Callee	scriptInterface . collectGarbage
>19836	MemberAccess	scriptInterface . collectGarbage
>19837	Identifier	collectGarbage
>19838	Identifier	scriptInterface
>19843	FunctionDef	DSQ 
>19844	ParameterList	 
>19845	ReturnType	void
>19846	CompoundStatement	 
>19847	IfStatement	if ( dsq -> game && dsq -> game -> avatar )
>19848	CompoundStatement	 
>19849	IfStatement	if ( ! dsq -> game -> isInGameMenu ( ) && ! dsq -> game -> isSceneEditorActive ( ) && ! dsq -> game -> isPaused ( ) )
>19850	CompoundStatement	 
>19851	IfStatement	if ( limitRange )
>19852	CompoundStatement	 
>19853	IfStatement	if ( diff . getSquaredLength2D ( ) > sqr ( range ) )
>19854	CompoundStatement	 
>19855	ExpressionStatement	 
>19856	AssignmentExpr	core -> mouse . position = core -> center + diff
>19857	AdditiveExpression	core -> center + diff
>19858	Identifier	diff
>19859	PtrMemberAccess	core -> center
>19860	Identifier	center
>19861	Identifier	core
>19862	MemberAccess	core -> mouse . position
>19863	Identifier	position
>19864	PtrMemberAccess	core -> mouse
>19865	Identifier	mouse
>19866	Identifier	core
>19867	ExpressionStatement	 
>19868	CallExpression	diff . setLength2D ( range )
>19869	ArgumentList	range
>19870	Argument	range
>19871	Identifier	range
>19872	Callee	diff . setLength2D
>19873	MemberAccess	diff . setLength2D
>19874	Identifier	setLength2D
>19875	Identifier	diff
>19876	Condition	 
>19877	RelationalExpression	diff . getSquaredLength2D ( ) > sqr ( range )
>19878	CallExpression	sqr ( range )
>19879	ArgumentList	range
>19880	Argument	range
>19881	Identifier	range
>19882	Callee	sqr
>19883	Identifier	sqr
>19884	CallExpression	diff . getSquaredLength2D ( )
>19885	ArgumentList	 
>19886	Callee	diff . getSquaredLength2D
>19887	MemberAccess	diff . getSquaredLength2D
>19888	Identifier	getSquaredLength2D
>19889	Identifier	diff
>19890	IdentifierDeclStatement	 
>19891	IdentifierDecl	diff = core -> mouse . position - core -> center
>19892	AssignmentExpr	diff = core -> mouse . position - core -> center
>19893	AdditiveExpression	core -> mouse . position - core -> center
>19894	PtrMemberAccess	core -> center
>19895	Identifier	center
>19896	Identifier	core
>19897	MemberAccess	core -> mouse . position
>19898	Identifier	position
>19899	PtrMemberAccess	core -> mouse
>19900	Identifier	mouse
>19901	Identifier	core
>19902	Identifier	diff
>19903	Identifier	diff
>19904	IdentifierDeclType	Vector
>19905	Condition	 
>19906	Identifier	limitRange
>19907	IfStatement	if ( dsq -> game -> avatar -> singing )
>19908	ElseStatement	else
>19909	ExpressionStatement	 
>19910	AssignmentExpr	limitRange = false
>19911	Identifier	false
>19912	Identifier	limitRange
>19913	ExpressionStatement	 
>19914	AssignmentExpr	range = 100
>19915	PrimaryExpression	100
>19916	Identifier	range
>19917	Condition	 
>19918	PtrMemberAccess	dsq -> game -> avatar -> singing
>19919	Identifier	singing
>19920	PtrMemberAccess	dsq -> game -> avatar
>19921	Identifier	avatar
>19922	PtrMemberAccess	dsq -> game
>19923	Identifier	game
>19924	Identifier	dsq
>19925	IdentifierDeclStatement	 
>19926	IdentifierDecl	range = 300
>19927	AssignmentExpr	range = 300
>19928	PrimaryExpression	300
>19929	Identifier	range
>19930	Identifier	range
>19931	IdentifierDeclType	int
>19932	IdentifierDeclStatement	 
>19933	IdentifierDecl	limitRange = true
>19934	AssignmentExpr	limitRange = true
>19935	Identifier	true
>19936	Identifier	true
>19937	Identifier	limitRange
>19938	IdentifierDeclType	bool
>19939	Condition	 
>19940	AndExpression	! dsq -> game -> isInGameMenu ( ) && ! dsq -> game -> isSceneEditorActive ( ) && ! dsq -> game -> isPaused ( )
>19941	AndExpression	! dsq -> game -> isSceneEditorActive ( ) && ! dsq -> game -> isPaused ( )
>19942	UnaryOp	! dsq -> game -> isPaused ( )
>19943	CallExpression	dsq -> game -> isPaused ( )
>19944	ArgumentList	 
>19945	Callee	dsq -> game -> isPaused
>19946	PtrMemberAccess	dsq -> game -> isPaused
>19947	Identifier	isPaused
>19948	PtrMemberAccess	dsq -> game
>19949	Identifier	game
>19950	Identifier	dsq
>19951	UnaryOperator	!
>19952	UnaryOp	! dsq -> game -> isSceneEditorActive ( )
>19953	CallExpression	dsq -> game -> isSceneEditorActive ( )
>19954	ArgumentList	 
>19955	Callee	dsq -> game -> isSceneEditorActive
>19956	PtrMemberAccess	dsq -> game -> isSceneEditorActive
>19957	Identifier	isSceneEditorActive
>19958	PtrMemberAccess	dsq -> game
>19959	Identifier	game
>19960	Identifier	dsq
>19961	UnaryOperator	!
>19962	UnaryOp	! dsq -> game -> isInGameMenu ( )
>19963	CallExpression	dsq -> game -> isInGameMenu ( )
>19964	ArgumentList	 
>19965	Callee	dsq -> game -> isInGameMenu
>19966	PtrMemberAccess	dsq -> game -> isInGameMenu
>19967	Identifier	isInGameMenu
>19968	PtrMemberAccess	dsq -> game
>19969	Identifier	game
>19970	Identifier	dsq
>19971	UnaryOperator	!
>19972	Condition	 
>19973	AndExpression	dsq -> game && dsq -> game -> avatar
>19974	PtrMemberAccess	dsq -> game -> avatar
>19975	Identifier	avatar
>19976	PtrMemberAccess	dsq -> game
>19977	Identifier	game
>19978	Identifier	dsq
>19979	PtrMemberAccess	dsq -> game
>19980	Identifier	game
>19981	Identifier	dsq
>20010	FunctionDef	DSQ 
>20011	ParameterList	bool t
>20012	Parameter	 
>20013	Identifier	t
>20014	ParameterType	bool
>20015	ReturnType	void
>20016	CompoundStatement	 
>20017	IfStatement	if ( t )
>20018	ElseStatement	else
>20019	CompoundStatement	 
>20020	IfStatement	if ( fpsText )
>20021	ExpressionStatement	 
>20022	AssignmentExpr	fpsText -> offset = Vector ( 0 , 0 )
>20023	CallExpression	Vector ( 0 , 0 )
>20024	ArgumentList	0
>20025	Argument	0
>20026	PrimaryExpression	0
>20027	Argument	0
>20028	PrimaryExpression	0
>20029	Callee	Vector
>20030	Identifier	Vector
>20031	PtrMemberAccess	fpsText -> offset
>20032	Identifier	offset
>20033	Identifier	fpsText
>20034	Condition	 
>20035	Identifier	fpsText
>20036	IfStatement	if ( game -> miniMapRender )
>20037	ExpressionStatement	 
>20038	AssignmentExpr	game -> miniMapRender -> offset = Vector ( 0 , 0 )
>20039	CallExpression	Vector ( 0 , 0 )
>20040	ArgumentList	0
>20041	Argument	0
>20042	PrimaryExpression	0
>20043	Argument	0
>20044	PrimaryExpression	0
>20045	Callee	Vector
>20046	Identifier	Vector
>20047	PtrMemberAccess	game -> miniMapRender -> offset
>20048	Identifier	offset
>20049	PtrMemberAccess	game -> miniMapRender
>20050	Identifier	miniMapRender
>20051	Identifier	game
>20052	Condition	 
>20053	PtrMemberAccess	game -> miniMapRender
>20054	Identifier	miniMapRender
>20055	Identifier	game
>20056	ExpressionStatement	 
>20057	AssignmentExpr	cursor -> offset = Vector ( 0 , 0 )
>20058	CallExpression	Vector ( 0 , 0 )
>20059	ArgumentList	0
>20060	Argument	0
>20061	PrimaryExpression	0
>20062	Argument	0
>20063	PrimaryExpression	0
>20064	Callee	Vector
>20065	Identifier	Vector
>20066	PtrMemberAccess	cursor -> offset
>20067	Identifier	offset
>20068	Identifier	cursor
>20069	CompoundStatement	 
>20070	IfStatement	if ( fpsText )
>20071	ExpressionStatement	 
>20072	AssignmentExpr	fpsText -> offset = Vector ( 2000 , 0 )
>20073	CallExpression	Vector ( 2000 , 0 )
>20074	ArgumentList	2000
>20075	Argument	0
>20076	PrimaryExpression	0
>20077	Argument	2000
>20078	PrimaryExpression	2000
>20079	Callee	Vector
>20080	Identifier	Vector
>20081	PtrMemberAccess	fpsText -> offset
>20082	Identifier	offset
>20083	Identifier	fpsText
>20084	Condition	 
>20085	Identifier	fpsText
>20086	IfStatement	if ( game -> miniMapRender )
>20087	ExpressionStatement	 
>20088	AssignmentExpr	game -> miniMapRender -> offset = Vector ( 2000 , 0 )
>20089	CallExpression	Vector ( 2000 , 0 )
>20090	ArgumentList	2000
>20091	Argument	0
>20092	PrimaryExpression	0
>20093	Argument	2000
>20094	PrimaryExpression	2000
>20095	Callee	Vector
>20096	Identifier	Vector
>20097	PtrMemberAccess	game -> miniMapRender -> offset
>20098	Identifier	offset
>20099	PtrMemberAccess	game -> miniMapRender
>20100	Identifier	miniMapRender
>20101	Identifier	game
>20102	Condition	 
>20103	PtrMemberAccess	game -> miniMapRender
>20104	Identifier	miniMapRender
>20105	Identifier	game
>20106	ExpressionStatement	 
>20107	AssignmentExpr	cursor -> offset = Vector ( 2000 , 0 )
>20108	CallExpression	Vector ( 2000 , 0 )
>20109	ArgumentList	2000
>20110	Argument	0
>20111	PrimaryExpression	0
>20112	Argument	2000
>20113	PrimaryExpression	2000
>20114	Callee	Vector
>20115	Identifier	Vector
>20116	PtrMemberAccess	cursor -> offset
>20117	Identifier	offset
>20118	Identifier	cursor
>20119	Condition	 
>20120	Identifier	t
>20138	FunctionDef	DSQ 
>20139	ParameterList	 
>20140	ReturnType	void
>20141	CompoundStatement	 
>20142	IfStatement	if ( cursor )
>20143	CompoundStatement	 
>20144	ExpressionStatement	 
>20145	AssignmentExpr	cursor -> position . z = 0
>20146	PrimaryExpression	0
>20147	MemberAccess	cursor -> position . z
>20148	Identifier	z
>20149	PtrMemberAccess	cursor -> position
>20150	Identifier	position
>20151	Identifier	cursor
>20152	ExpressionStatement	 
>20153	AssignmentExpr	cursor -> position = mouse . position
>20154	MemberAccess	mouse . position
>20155	Identifier	position
>20156	Identifier	mouse
>20157	PtrMemberAccess	cursor -> position
>20158	Identifier	position
>20159	Identifier	cursor
>20160	IfStatement	if ( core -> getTopStateObject ( ) == ( StateObject * ) game )
>20161	CompoundStatement	 
>20162	IfStatement	if ( doScreenshot )
>20163	ExpressionStatement	 
>20164	CallExpression	prepScreen ( 1 )
>20165	ArgumentList	1
>20166	Argument	1
>20167	PrimaryExpression	1
>20168	Callee	prepScreen
>20169	Identifier	prepScreen
>20170	Condition	 
>20171	Identifier	doScreenshot
>20172	Condition	 
>20173	EqualityExpression	core -> getTopStateObject ( ) == ( StateObject * ) game
>20174	CastExpression	( StateObject * ) game
>20175	Identifier	game
>20176	CastTarget	StateObject *
>20177	CallExpression	core -> getTopStateObject ( )
>20178	ArgumentList	 
>20179	Callee	core -> getTopStateObject
>20180	PtrMemberAccess	core -> getTopStateObject
>20181	Identifier	getTopStateObject
>20182	Identifier	core
>20183	Condition	 
>20184	Identifier	cursor
>20199	FunctionDef	DSQ 
>20200	ParameterList	std 
>20201	Parameter	 
>20202	Identifier	ignoreMusic
>20203	ParameterType	bool
>20204	Parameter	 
>20205	Identifier	num
>20206	ParameterType	int
>20207	Parameter	 
>20208	Identifier	folder
>20209	ParameterType	std 
>20210	ReturnType	void
>20211	CompoundStatement	 
>20212	ExpressionStatement	 
>20213	CallExpression	toggleBlackBars ( 0 )
>20214	ArgumentList	0
>20215	Argument	0
>20216	PrimaryExpression	0
>20217	Callee	toggleBlackBars
>20218	Identifier	toggleBlackBars
>20219	ExpressionStatement	 
>20220	CallExpression	dsq -> game -> miniMapRender -> toggle ( 1 )
>20221	ArgumentList	1
>20222	Argument	1
>20223	PrimaryExpression	1
>20224	Callee	dsq -> game -> miniMapRender -> toggle
>20225	PtrMemberAccess	dsq -> game -> miniMapRender -> toggle
>20226	Identifier	toggle
>20227	PtrMemberAccess	dsq -> game -> miniMapRender
>20228	Identifier	miniMapRender
>20229	PtrMemberAccess	dsq -> game
>20230	Identifier	game
>20231	Identifier	dsq
>20232	ExpressionStatement	 
>20233	AssignmentExpr	dsq -> overlay -> color = Vector ( 0 , 0 , 0 )
>20234	CallExpression	Vector ( 0 , 0 , 0 )
>20235	ArgumentList	0
>20236	Argument	0
>20237	PrimaryExpression	0
>20238	Argument	0
>20239	PrimaryExpression	0
>20240	Argument	0
>20241	PrimaryExpression	0
>20242	Callee	Vector
>20243	Identifier	Vector
>20244	PtrMemberAccess	dsq -> overlay -> color
>20245	Identifier	color
>20246	PtrMemberAccess	dsq -> overlay
>20247	Identifier	overlay
>20248	Identifier	dsq
>20249	IfStatement	if ( ! ignoreMusic )
>20250	ExpressionStatement	 
>20251	CallExpression	sound -> setMusicFader ( 1 , t )
>20252	ArgumentList	1
>20253	Argument	t
>20254	Identifier	t
>20255	Argument	1
>20256	PrimaryExpression	1
>20257	Callee	sound -> setMusicFader
>20258	PtrMemberAccess	sound -> setMusicFader
>20259	Identifier	setMusicFader
>20260	Identifier	sound
>20261	Condition	 
>20262	UnaryOp	! ignoreMusic
>20263	Identifier	ignoreMusic
>20264	UnaryOperator	!
>20265	ExpressionStatement	 
>20266	CallExpression	images . clear ( )
>20267	ArgumentList	 
>20268	Callee	images . clear
>20269	MemberAccess	images . clear
>20270	Identifier	clear
>20271	Identifier	images
>20272	ForStatement	for ( QuadList 
>20273	CompoundStatement	 
>20274	ExpressionStatement	 
>20275	CallExpression	( * i ) -> safeKill ( )
>20276	ArgumentList	 
>20277	Callee	( * i ) -> safeKill
>20278	PtrMemberAccess	( * i ) -> safeKill
>20279	Identifier	safeKill
>20280	UnaryOp	* i
>20281	Identifier	i
>20282	UnaryOperator	*
>20283	IncDecOp	 
>20284	IncDec	++
>20285	Identifier	i
>20286	Condition	 
>20287	EqualityExpression	i != images . end ( )
>20288	CallExpression	images . end ( )
>20289	ArgumentList	 
>20290	Callee	images . end
>20291	MemberAccess	images . end
>20292	Identifier	end
>20293	Identifier	images
>20294	Identifier	i
>20295	ForInit	 
>20296	IdentifierDeclStatement	QuadList 
>20297	IdentifierDecl	i = images . begin ( )
>20298	AssignmentExpr	i = images . begin ( )
>20299	CallExpression	images . begin ( )
>20300	ArgumentList	 
>20301	Callee	images . begin
>20302	MemberAccess	images . begin
>20303	Identifier	begin
>20304	Identifier	images
>20305	Identifier	i
>20306	Identifier	i
>20307	IdentifierDeclType	QuadList 
>20308	ExpressionStatement	 
>20309	CallExpression	main ( t )
>20310	ArgumentList	t
>20311	Argument	t
>20312	Identifier	t
>20313	Callee	main
>20314	Identifier	main
>20315	ExpressionStatement	 
>20316	CallExpression	fade ( 0 , t )
>20317	ArgumentList	0
>20318	Argument	t
>20319	Identifier	t
>20320	Argument	0
>20321	PrimaryExpression	0
>20322	Callee	fade
>20323	Identifier	fade
>20324	ExpressionStatement	 
>20325	CallExpression	sound -> playSfx ( \"memory-flash\" )
>20326	ArgumentList	\"memory-flash\"
>20327	Argument	\"memory-flash\"
>20328	PrimaryExpression	\"memory-flash\"
>20329	Callee	sound -> playSfx
>20330	PtrMemberAccess	sound -> playSfx
>20331	Identifier	playSfx
>20332	Identifier	sound
>20333	ExpressionStatement	 
>20334	CallExpression	dsq -> toggleCursor ( true )
>20335	ArgumentList	true
>20336	Argument	true
>20337	Identifier	true
>20338	Callee	dsq -> toggleCursor
>20339	PtrMemberAccess	dsq -> toggleCursor
>20340	Identifier	toggleCursor
>20341	Identifier	dsq
>20342	IfStatement	if ( game )
>20343	ExpressionStatement	 
>20344	CallExpression	game -> togglePause ( false )
>20345	ArgumentList	false
>20346	Argument	false
>20347	Identifier	false
>20348	Callee	game -> togglePause
>20349	PtrMemberAccess	game -> togglePause
>20350	Identifier	togglePause
>20351	Identifier	game
>20352	Condition	 
>20353	Identifier	game
>20354	ForStatement	for ( QuadList 
>20355	CompoundStatement	 
>20356	ExpressionStatement	 
>20357	AssignmentExpr	( * i ) -> alpha = 0
>20358	PrimaryExpression	0
>20359	PtrMemberAccess	( * i ) -> alpha
>20360	Identifier	alpha
>20361	UnaryOp	* i
>20362	Identifier	i
>20363	UnaryOperator	*
>20364	ExpressionStatement	 
>20365	CallExpression	main ( t )
>20366	ArgumentList	t
>20367	Argument	t
>20368	Identifier	t
>20369	Callee	main
>20370	Identifier	main
>20371	ExpressionStatement	 
>20372	CallExpression	fade ( 1 , t )
>20373	ArgumentList	1
>20374	Argument	t
>20375	Identifier	t
>20376	Argument	1
>20377	PrimaryExpression	1
>20378	Callee	fade
>20379	Identifier	fade
>20380	ExpressionStatement	 
>20381	CallExpression	main ( 0.1 )
>20382	ArgumentList	0.1
>20383	Argument	0.1
>20384	PrimaryExpression	0.1
>20385	Callee	main
>20386	Identifier	main
>20387	ExpressionStatement	 
>20388	CallExpression	main ( t )
>20389	ArgumentList	t
>20390	Argument	t
>20391	Identifier	t
>20392	Callee	main
>20393	Identifier	main
>20394	ExpressionStatement	 
>20395	CallExpression	fade ( 0 , t )
>20396	ArgumentList	0
>20397	Argument	t
>20398	Identifier	t
>20399	Argument	0
>20400	PrimaryExpression	0
>20401	Callee	fade
>20402	Identifier	fade
>20403	ExpressionStatement	 
>20404	CallExpression	( * i ) -> scale . interpolateTo ( Vector ( 1.1 , 1.1 ) , 0.4 )
>20405	ArgumentList	Vector ( 1.1 , 1.1 )
>20406	Argument	0.4
>20407	PrimaryExpression	0.4
>20408	Argument	Vector ( 1.1 , 1.1 )
>20409	CallExpression	Vector ( 1.1 , 1.1 )
>20410	ArgumentList	1.1
>20411	Argument	1.1
>20412	PrimaryExpression	1.1
>20413	Argument	1.1
>20414	PrimaryExpression	1.1
>20415	Callee	Vector
>20416	Identifier	Vector
>20417	Callee	( * i ) -> scale . interpolateTo
>20418	MemberAccess	( * i ) -> scale . interpolateTo
>20419	Identifier	interpolateTo
>20420	PtrMemberAccess	( * i ) -> scale
>20421	Identifier	scale
>20422	UnaryOp	* i
>20423	Identifier	i
>20424	UnaryOperator	*
>20425	ExpressionStatement	 
>20426	CallExpression	sound -> playSfx ( \"memory-flash\" )
>20427	ArgumentList	\"memory-flash\"
>20428	Argument	\"memory-flash\"
>20429	PrimaryExpression	\"memory-flash\"
>20430	Callee	sound -> playSfx
>20431	PtrMemberAccess	sound -> playSfx
>20432	Identifier	playSfx
>20433	Identifier	sound
>20434	IncDecOp	 
>20435	IncDec	++
>20436	Identifier	i
>20437	Condition	 
>20438	EqualityExpression	i != images . end ( )
>20439	CallExpression	images . end ( )
>20440	ArgumentList	 
>20441	Callee	images . end
>20442	MemberAccess	images . end
>20443	Identifier	end
>20444	Identifier	images
>20445	Identifier	i
>20446	ForInit	 
>20447	IdentifierDeclStatement	QuadList 
>20448	IdentifierDecl	i = images . begin ( )
>20449	AssignmentExpr	i = images . begin ( )
>20450	CallExpression	images . begin ( )
>20451	ArgumentList	 
>20452	Callee	images . begin
>20453	MemberAccess	images . begin
>20454	Identifier	begin
>20455	Identifier	images
>20456	Identifier	i
>20457	Identifier	i
>20458	IdentifierDeclType	QuadList 
>20459	IfStatement	if ( ! ignoreMusic )
>20460	ExpressionStatement	 
>20461	CallExpression	sound -> setMusicFader ( 0 , t )
>20462	ArgumentList	0
>20463	Argument	t
>20464	Identifier	t
>20465	Argument	0
>20466	PrimaryExpression	0
>20467	Callee	sound -> setMusicFader
>20468	PtrMemberAccess	sound -> setMusicFader
>20469	Identifier	setMusicFader
>20470	Identifier	sound
>20471	Condition	 
>20472	UnaryOp	! ignoreMusic
>20473	Identifier	ignoreMusic
>20474	UnaryOperator	!
>20475	ForStatement	for ( int i = num - 1 ; i >= 0 ; i -- )
>20476	CompoundStatement	 
>20477	ExpressionStatement	 
>20478	CallExpression	addRenderObject ( q , LR_HUD )
>20479	ArgumentList	q
>20480	Argument	LR_HUD
>20481	Identifier	LR_HUD
>20482	Argument	q
>20483	Identifier	q
>20484	Callee	addRenderObject
>20485	Identifier	addRenderObject
>20486	ExpressionStatement	 
>20487	CallExpression	images . push_front ( q )
>20488	ArgumentList	q
>20489	Argument	q
>20490	Identifier	q
>20491	Callee	images . push_front
>20492	MemberAccess	images . push_front
>20493	Identifier	push_front
>20494	Identifier	images
>20495	ExpressionStatement	 
>20496	AssignmentExpr	q -> position = Vector ( 400 , 300 )
>20497	CallExpression	Vector ( 400 , 300 )
>20498	ArgumentList	400
>20499	Argument	300
>20500	PrimaryExpression	300
>20501	Argument	400
>20502	PrimaryExpression	400
>20503	Callee	Vector
>20504	Identifier	Vector
>20505	PtrMemberAccess	q -> position
>20506	Identifier	position
>20507	Identifier	q
>20508	ExpressionStatement	 
>20509	AssignmentExpr	q -> followCamera = 1
>20510	PrimaryExpression	1
>20511	PtrMemberAccess	q -> followCamera
>20512	Identifier	followCamera
>20513	Identifier	q
>20514	ExpressionStatement	 
>20515	CallExpression	q -> setWidthHeight ( 800 , 600 )
>20516	ArgumentList	800
>20517	Argument	600
>20518	PrimaryExpression	600
>20519	Argument	800
>20520	PrimaryExpression	800
>20521	Callee	q -> setWidthHeight
>20522	PtrMemberAccess	q -> setWidthHeight
>20523	Identifier	setWidthHeight
>20524	Identifier	q
>20525	ExpressionStatement	 
>20526	CallExpression	q -> setTexture ( label )
>20527	ArgumentList	label
>20528	Argument	label
>20529	Identifier	label
>20530	Callee	q -> setTexture
>20531	PtrMemberAccess	q -> setTexture
>20532	Identifier	setTexture
>20533	Identifier	q
>20534	IdentifierDeclStatement	 
>20535	IdentifierDecl	label = \"visions/\" + folder + \"/\" + numToZeroString ( i , 2 ) + \".png\"
>20536	AssignmentExpr	label = \"visions/\" + folder + \"/\" + numToZeroString ( i , 2 ) + \".png\"
>20537	AdditiveExpression	\"visions/\" + folder + \"/\" + numToZeroString ( i , 2 ) + \".png\"
>20538	AdditiveExpression	folder + \"/\" + numToZeroString ( i , 2 ) + \".png\"
>20539	AdditiveExpression	\"/\" + numToZeroString ( i , 2 ) + \".png\"
>20540	AdditiveExpression	numToZeroString ( i , 2 ) + \".png\"
>20541	PrimaryExpression	\".png\"
>20542	CallExpression	numToZeroString ( i , 2 )
>20543	ArgumentList	i
>20544	Argument	2
>20545	PrimaryExpression	2
>20546	Argument	i
>20547	Identifier	i
>20548	Callee	numToZeroString
>20549	Identifier	numToZeroString
>20550	PrimaryExpression	\"/\"
>20551	Identifier	folder
>20552	PrimaryExpression	\"visions/\"
>20553	Identifier	label
>20554	Identifier	label
>20555	IdentifierDeclType	std 
>20556	ExpressionStatement	 
>20557	Identifier	Quad
>20558	Statement	 
>20559	Statement	 
>20560	Statement	 
>20561	Statement	 
>20562	Statement	 
>20563	IncDecOp	 
>20564	IncDec	--
>20565	Identifier	i
>20566	Condition	 
>20567	RelationalExpression	i >= 0
>20568	PrimaryExpression	0
>20569	Identifier	i
>20570	ForInit	 
>20571	IdentifierDeclStatement	int i = num - 1 ;
>20572	IdentifierDecl	i = num - 1
>20573	AssignmentExpr	i = num - 1
>20574	AdditiveExpression	num - 1
>20575	PrimaryExpression	1
>20576	Identifier	num
>20577	Identifier	i
>20578	Identifier	i
>20579	IdentifierDeclType	int
>20580	IdentifierDeclStatement	 
>20581	IdentifierDecl	images
>20582	Identifier	images
>20583	IdentifierDeclType	QuadList
>20584	IdentifierDeclStatement	 
>20585	IdentifierDecl	QuadList
>20586	Identifier	QuadList
>20587	IdentifierDeclType	std 
>20588	ExpressionStatement	 
>20589	CallExpression	main ( t )
>20590	ArgumentList	t
>20591	Argument	t
>20592	Identifier	t
>20593	Callee	main
>20594	Identifier	main
>20595	ExpressionStatement	 
>20596	CallExpression	fade ( 1 , t )
>20597	ArgumentList	1
>20598	Argument	t
>20599	Identifier	t
>20600	Argument	1
>20601	PrimaryExpression	1
>20602	Callee	fade
>20603	Identifier	fade
>20604	ExpressionStatement	 
>20605	CallExpression	dsq -> game -> miniMapRender -> toggle ( 0 )
>20606	ArgumentList	0
>20607	Argument	0
>20608	PrimaryExpression	0
>20609	Callee	dsq -> game -> miniMapRender -> toggle
>20610	PtrMemberAccess	dsq -> game -> miniMapRender -> toggle
>20611	Identifier	toggle
>20612	PtrMemberAccess	dsq -> game -> miniMapRender
>20613	Identifier	miniMapRender
>20614	PtrMemberAccess	dsq -> game
>20615	Identifier	game
>20616	Identifier	dsq
>20617	IdentifierDeclStatement	 
>20618	IdentifierDecl	t = 0.1
>20619	AssignmentExpr	t = 0.1
>20620	PrimaryExpression	0.1
>20621	Identifier	t
>20622	Identifier	t
>20623	IdentifierDeclType	float
>20624	ExpressionStatement	 
>20625	AssignmentExpr	dsq -> overlay -> color = Vector ( 1 , 1 , 1 )
>20626	CallExpression	Vector ( 1 , 1 , 1 )
>20627	ArgumentList	1
>20628	Argument	1
>20629	PrimaryExpression	1
>20630	Argument	1
>20631	PrimaryExpression	1
>20632	Argument	1
>20633	PrimaryExpression	1
>20634	Callee	Vector
>20635	Identifier	Vector
>20636	PtrMemberAccess	dsq -> overlay -> color
>20637	Identifier	color
>20638	PtrMemberAccess	dsq -> overlay
>20639	Identifier	overlay
>20640	Identifier	dsq
>20641	IfStatement	if ( game )
>20642	ExpressionStatement	 
>20643	CallExpression	game -> togglePause ( true )
>20644	ArgumentList	true
>20645	Argument	true
>20646	Identifier	true
>20647	Callee	game -> togglePause
>20648	PtrMemberAccess	game -> togglePause
>20649	Identifier	togglePause
>20650	Identifier	game
>20651	Condition	 
>20652	Identifier	game
>20653	ExpressionStatement	 
>20654	CallExpression	dsq -> toggleCursor ( false )
>20655	ArgumentList	false
>20656	Argument	false
>20657	Identifier	false
>20658	Callee	dsq -> toggleCursor
>20659	PtrMemberAccess	dsq -> toggleCursor
>20660	Identifier	toggleCursor
>20661	Identifier	dsq
>20662	ExpressionStatement	 
>20663	CallExpression	toggleBlackBars ( 1 )
>20664	ArgumentList	1
>20665	Argument	1
>20666	PrimaryExpression	1
>20667	Callee	toggleBlackBars
>20668	Identifier	toggleBlackBars
>20706	FunctionDef	DSQ 
>20707	ParameterList	 
>20708	ReturnType	bool
>20709	CompoundStatement	 
>20710	ReturnStatement	 
>20711	MemberAccess	user . system . devModeOn
>20712	Identifier	devModeOn
>20713	MemberAccess	user . system
>20714	Identifier	system
>20715	Identifier	user
>20716	ReturnStatement	 
>20717	Identifier	false
>20725	FunctionDef	DSQ 
>20726	ParameterList	 
>20727	ReturnType	bool
>20728	CompoundStatement	 
>20729	ReturnStatement	 
>20730	OrExpression	dsq -> isDeveloperKeys ( ) || ( dsq -> mod . isActive ( ) && ! dsq -> mod . isEditorBlocked ( ) )
>20731	AndExpression	dsq -> mod . isActive ( ) && ! dsq -> mod . isEditorBlocked ( )
>20732	UnaryOp	! dsq -> mod . isEditorBlocked ( )
>20733	CallExpression	dsq -> mod . isEditorBlocked ( )
>20734	ArgumentList	 
>20735	Callee	dsq -> mod . isEditorBlocked
>20736	MemberAccess	dsq -> mod . isEditorBlocked
>20737	Identifier	isEditorBlocked
>20738	PtrMemberAccess	dsq -> mod
>20739	Identifier	mod
>20740	Identifier	dsq
>20741	UnaryOperator	!
>20742	CallExpression	dsq -> mod . isActive ( )
>20743	ArgumentList	 
>20744	Callee	dsq -> mod . isActive
>20745	MemberAccess	dsq -> mod . isActive
>20746	Identifier	isActive
>20747	PtrMemberAccess	dsq -> mod
>20748	Identifier	mod
>20749	Identifier	dsq
>20750	CallExpression	dsq -> isDeveloperKeys ( )
>20751	ArgumentList	 
>20752	Callee	dsq -> isDeveloperKeys
>20753	PtrMemberAccess	dsq -> isDeveloperKeys
>20754	Identifier	isDeveloperKeys
>20755	Identifier	dsq
>20765	FunctionDef	DSQ 
>20766	ParameterList	 
>20767	ReturnType	bool
>20768	CompoundStatement	 
>20769	ReturnStatement	 
>20770	Identifier	watchQuitFlag
>20775	FunctionDef	DSQ 
>20776	ParameterList	float t , int canQuit
>20777	Parameter	 
>20778	Identifier	canQuit
>20779	ParameterType	int
>20780	Parameter	 
>20781	Identifier	t
>20782	ParameterType	float
>20783	ReturnType	void
>20784	CompoundStatement	 
>20785	IfStatement	if ( dsq -> game && dsq -> game -> avatar )
>20786	CompoundStatement	 
>20787	IfStatement	if ( wasInputEnabled )
>20788	ExpressionStatement	 
>20789	CallExpression	dsq -> game -> avatar -> enableInput ( )
>20790	ArgumentList	 
>20791	Callee	dsq -> game -> avatar -> enableInput
>20792	PtrMemberAccess	dsq -> game -> avatar -> enableInput
>20793	Identifier	enableInput
>20794	PtrMemberAccess	dsq -> game -> avatar
>20795	Identifier	avatar
>20796	PtrMemberAccess	dsq -> game
>20797	Identifier	game
>20798	Identifier	dsq
>20799	Condition	 
>20800	Identifier	wasInputEnabled
>20801	Condition	 
>20802	AndExpression	dsq -> game && dsq -> game -> avatar
>20803	PtrMemberAccess	dsq -> game -> avatar
>20804	Identifier	avatar
>20805	PtrMemberAccess	dsq -> game
>20806	Identifier	game
>20807	Identifier	dsq
>20808	PtrMemberAccess	dsq -> game
>20809	Identifier	game
>20810	Identifier	dsq
>20811	ExpressionStatement	 
>20812	AssignmentExpr	watchForQuit = false
>20813	Identifier	false
>20814	Identifier	watchForQuit
>20815	IfStatement	if ( canQuit && watchQuitFlag )
>20816	CompoundStatement	 
>20817	Condition	 
>20818	AndExpression	canQuit && watchQuitFlag
>20819	Identifier	watchQuitFlag
>20820	Identifier	canQuit
>20821	IfStatement	if ( t != 0.0f )
>20822	ElseStatement	else
>20823	ExpressionStatement	 
>20824	CallExpression	errorLog ( \"Called Watch with time == 0\" )
>20825	ArgumentList	\"Called Watch with time == 0\"
>20826	Argument	\"Called Watch with time == 0\"
>20827	PrimaryExpression	\"Called Watch with time == 0\"
>20828	Callee	errorLog
>20829	Identifier	errorLog
>20830	ExpressionStatement	 
>20831	CallExpression	core -> main ( t )
>20832	ArgumentList	t
>20833	Argument	t
>20834	Identifier	t
>20835	Callee	core -> main
>20836	PtrMemberAccess	core -> main
>20837	Identifier	main
>20838	Identifier	core
>20839	Condition	 
>20840	EqualityExpression	t != 0.0f
>20841	PrimaryExpression	0.0f
>20842	Identifier	t
>20843	IfStatement	if ( canQuit )
>20844	CompoundStatement	 
>20845	ExpressionStatement	 
>20846	AssignmentExpr	watchForQuit = true
>20847	Identifier	true
>20848	Identifier	watchForQuit
>20849	Condition	 
>20850	Identifier	canQuit
>20851	ExpressionStatement	 
>20852	CallExpression	core -> quitNestedMain ( )
>20853	ArgumentList	 
>20854	Callee	core -> quitNestedMain
>20855	PtrMemberAccess	core -> quitNestedMain
>20856	Identifier	quitNestedMain
>20857	Identifier	core
>20858	IfStatement	if ( dsq -> game && dsq -> game -> avatar )
>20859	CompoundStatement	 
>20860	IfStatement	if ( wasInputEnabled )
>20861	CompoundStatement	 
>20862	ExpressionStatement	 
>20863	CallExpression	dsq -> game -> avatar -> disableInput ( )
>20864	ArgumentList	 
>20865	Callee	dsq -> game -> avatar -> disableInput
>20866	PtrMemberAccess	dsq -> game -> avatar -> disableInput
>20867	Identifier	disableInput
>20868	PtrMemberAccess	dsq -> game -> avatar
>20869	Identifier	avatar
>20870	PtrMemberAccess	dsq -> game
>20871	Identifier	game
>20872	Identifier	dsq
>20873	Condition	 
>20874	Identifier	wasInputEnabled
>20875	ExpressionStatement	 
>20876	AssignmentExpr	wasInputEnabled = dsq -> game -> avatar -> isInputEnabled ( )
>20877	CallExpression	dsq -> game -> avatar -> isInputEnabled ( )
>20878	ArgumentList	 
>20879	Callee	dsq -> game -> avatar -> isInputEnabled
>20880	PtrMemberAccess	dsq -> game -> avatar -> isInputEnabled
>20881	Identifier	isInputEnabled
>20882	PtrMemberAccess	dsq -> game -> avatar
>20883	Identifier	avatar
>20884	PtrMemberAccess	dsq -> game
>20885	Identifier	game
>20886	Identifier	dsq
>20887	Identifier	wasInputEnabled
>20888	Condition	 
>20889	AndExpression	dsq -> game && dsq -> game -> avatar
>20890	PtrMemberAccess	dsq -> game -> avatar
>20891	Identifier	avatar
>20892	PtrMemberAccess	dsq -> game
>20893	Identifier	game
>20894	Identifier	dsq
>20895	PtrMemberAccess	dsq -> game
>20896	Identifier	game
>20897	Identifier	dsq
>20898	IdentifierDeclStatement	 
>20899	IdentifierDecl	wasInputEnabled = false
>20900	AssignmentExpr	wasInputEnabled = false
>20901	Identifier	false
>20902	Identifier	false
>20903	Identifier	wasInputEnabled
>20904	IdentifierDeclType	bool
>20905	ExpressionStatement	 
>20906	AssignmentExpr	watchForQuit = false
>20907	Identifier	false
>20908	Identifier	watchForQuit
>20909	ExpressionStatement	 
>20910	AssignmentExpr	watchQuitFlag = false
>20911	Identifier	false
>20912	Identifier	watchQuitFlag
>20934	FunctionDef	DSQ 
>20935	ParameterList	int id , int state
>20936	Parameter	 
>20937	Identifier	state
>20938	ParameterType	int
>20939	Parameter	 
>20940	Identifier	id
>20941	ParameterType	int
>20942	ReturnType	void
>20943	CompoundStatement	 
>20944	IfStatement	if ( id == ACTION_ESC && ! state )
>20945	CompoundStatement	 
>20946	IfStatement	if ( isInCutscene ( ) )
>20947	CompoundStatement	 
>20948	IfStatement	if ( isCutscenePaused ( ) )
>20949	ElseStatement	else
>20950	CompoundStatement	 
>20951	ExpressionStatement	 
>20952	CallExpression	pauseCutscene ( true )
>20953	ArgumentList	true
>20954	Argument	true
>20955	Identifier	true
>20956	Callee	pauseCutscene
>20957	Identifier	pauseCutscene
>20958	CompoundStatement	 
>20959	ExpressionStatement	 
>20960	CallExpression	pauseCutscene ( false )
>20961	ArgumentList	false
>20962	Argument	false
>20963	Identifier	false
>20964	Callee	pauseCutscene
>20965	Identifier	pauseCutscene
>20966	Condition	 
>20967	CallExpression	isCutscenePaused ( )
>20968	ArgumentList	 
>20969	Callee	isCutscenePaused
>20970	Identifier	isCutscenePaused
>20971	Condition	 
>20972	CallExpression	isInCutscene ( )
>20973	ArgumentList	 
>20974	Callee	isInCutscene
>20975	Identifier	isInCutscene
>20976	Condition	 
>20977	AndExpression	id == ACTION_ESC && ! state
>20978	UnaryOp	! state
>20979	Identifier	state
>20980	UnaryOperator	!
>20981	EqualityExpression	id == ACTION_ESC
>20982	Identifier	ACTION_ESC
>20983	Identifier	id
>20984	ExpressionStatement	 
>20985	CallExpression	Core 
>20986	ArgumentList	id
>20987	Argument	state
>20988	Identifier	state
>20989	Argument	id
>20990	Identifier	id
>20991	Callee	Core 
>20992	Identifier	Core 
>21003	FunctionDef	DSQ 
>21004	ParameterList	 
>21005	ReturnType	void
>21006	CompoundStatement	 
>21007	ExpressionStatement	 
>21008	CallExpression	addAction ( MakeFunctionEvent ( DSQ , takeScreenshotKey ) , KEY_P , 0 )
>21009	ArgumentList	MakeFunctionEvent ( DSQ , takeScreenshotKey )
>21010	Argument	0
>21011	PrimaryExpression	0
>21012	Argument	KEY_P
>21013	Identifier	KEY_P
>21014	Argument	MakeFunctionEvent ( DSQ , takeScreenshotKey )
>21015	CallExpression	MakeFunctionEvent ( DSQ , takeScreenshotKey )
>21016	ArgumentList	DSQ
>21017	Argument	takeScreenshotKey
>21018	Identifier	takeScreenshotKey
>21019	Argument	DSQ
>21020	Identifier	DSQ
>21021	Callee	MakeFunctionEvent
>21022	Identifier	MakeFunctionEvent
>21023	Callee	addAction
>21024	Identifier	addAction
>21025	ExpressionStatement	 
>21026	CallExpression	addAction ( MakeFunctionEvent ( DSQ , takeScreenshot ) , KEY_PRINTSCREEN , 0 )
>21027	ArgumentList	MakeFunctionEvent ( DSQ , takeScreenshot )
>21028	Argument	0
>21029	PrimaryExpression	0
>21030	Argument	KEY_PRINTSCREEN
>21031	Identifier	KEY_PRINTSCREEN
>21032	Argument	MakeFunctionEvent ( DSQ , takeScreenshot )
>21033	CallExpression	MakeFunctionEvent ( DSQ , takeScreenshot )
>21034	ArgumentList	DSQ
>21035	Argument	takeScreenshot
>21036	Identifier	takeScreenshot
>21037	Argument	DSQ
>21038	Identifier	DSQ
>21039	Callee	MakeFunctionEvent
>21040	Identifier	MakeFunctionEvent
>21041	Callee	addAction
>21042	Identifier	addAction
>21043	ExpressionStatement	 
>21044	CallExpression	addAction ( MakeFunctionEvent ( DSQ , debugMenu ) , KEY_BACKSPACE , 0 )
>21045	ArgumentList	MakeFunctionEvent ( DSQ , debugMenu )
>21046	Argument	0
>21047	PrimaryExpression	0
>21048	Argument	KEY_BACKSPACE
>21049	Identifier	KEY_BACKSPACE
>21050	Argument	MakeFunctionEvent ( DSQ , debugMenu )
>21051	CallExpression	MakeFunctionEvent ( DSQ , debugMenu )
>21052	ArgumentList	DSQ
>21053	Argument	debugMenu
>21054	Identifier	debugMenu
>21055	Argument	DSQ
>21056	Identifier	DSQ
>21057	Callee	MakeFunctionEvent
>21058	Identifier	MakeFunctionEvent
>21059	Callee	addAction
>21060	Identifier	addAction
>21061	IfStatement	if ( isDeveloperKeys ( ) )
>21062	CompoundStatement	 
>21063	ExpressionStatement	 
>21064	CallExpression	addAction ( MakeFunctionEvent ( DSQ , toggleRenderCollisionShapes ) , KEY_RETURN , 0 )
>21065	ArgumentList	MakeFunctionEvent ( DSQ , toggleRenderCollisionShapes )
>21066	Argument	0
>21067	PrimaryExpression	0
>21068	Argument	KEY_RETURN
>21069	Identifier	KEY_RETURN
>21070	Argument	MakeFunctionEvent ( DSQ , toggleRenderCollisionShapes )
>21071	CallExpression	MakeFunctionEvent ( DSQ , toggleRenderCollisionShapes )
>21072	ArgumentList	DSQ
>21073	Argument	toggleRenderCollisionShapes
>21074	Identifier	toggleRenderCollisionShapes
>21075	Argument	DSQ
>21076	Identifier	DSQ
>21077	Callee	MakeFunctionEvent
>21078	Identifier	MakeFunctionEvent
>21079	Callee	addAction
>21080	Identifier	addAction
>21081	ExpressionStatement	 
>21082	CallExpression	addAction ( MakeFunctionEvent ( DSQ , instantQuit ) , KEY_Q , 1 )
>21083	ArgumentList	MakeFunctionEvent ( DSQ , instantQuit )
>21084	Argument	1
>21085	PrimaryExpression	1
>21086	Argument	KEY_Q
>21087	Identifier	KEY_Q
>21088	Argument	MakeFunctionEvent ( DSQ , instantQuit )
>21089	CallExpression	MakeFunctionEvent ( DSQ , instantQuit )
>21090	ArgumentList	DSQ
>21091	Argument	instantQuit
>21092	Identifier	instantQuit
>21093	Argument	DSQ
>21094	Identifier	DSQ
>21095	Callee	MakeFunctionEvent
>21096	Identifier	MakeFunctionEvent
>21097	Callee	addAction
>21098	Identifier	addAction
>21099	ExpressionStatement	 
>21100	CallExpression	addAction ( MakeFunctionEvent ( DSQ , toggleConsole ) , KEY_TILDE , 0 )
>21101	ArgumentList	MakeFunctionEvent ( DSQ , toggleConsole )
>21102	Argument	0
>21103	PrimaryExpression	0
>21104	Argument	KEY_TILDE
>21105	Identifier	KEY_TILDE
>21106	Argument	MakeFunctionEvent ( DSQ , toggleConsole )
>21107	CallExpression	MakeFunctionEvent ( DSQ , toggleConsole )
>21108	ArgumentList	DSQ
>21109	Argument	toggleConsole
>21110	Identifier	toggleConsole
>21111	Argument	DSQ
>21112	Identifier	DSQ
>21113	Callee	MakeFunctionEvent
>21114	Identifier	MakeFunctionEvent
>21115	Callee	addAction
>21116	Identifier	addAction
>21117	Condition	 
>21118	CallExpression	isDeveloperKeys ( )
>21119	ArgumentList	 
>21120	Callee	isDeveloperKeys
>21121	Identifier	isDeveloperKeys
>21122	ExpressionStatement	 
>21123	CallExpression	addAction ( MakeFunctionEvent ( DSQ , onSwitchScreenMode ) , KEY_RETURN , 1 )
>21124	ArgumentList	MakeFunctionEvent ( DSQ , onSwitchScreenMode )
>21125	Argument	1
>21126	PrimaryExpression	1
>21127	Argument	KEY_RETURN
>21128	Identifier	KEY_RETURN
>21129	Argument	MakeFunctionEvent ( DSQ , onSwitchScreenMode )
>21130	CallExpression	MakeFunctionEvent ( DSQ , onSwitchScreenMode )
>21131	ArgumentList	DSQ
>21132	Argument	onSwitchScreenMode
>21133	Identifier	onSwitchScreenMode
>21134	Argument	DSQ
>21135	Identifier	DSQ
>21136	Callee	MakeFunctionEvent
>21137	Identifier	MakeFunctionEvent
>21138	Callee	addAction
>21139	Identifier	addAction
>21140	ExpressionStatement	 
>21141	CallExpression	addAction ( MakeFunctionEvent ( DSQ , instantQuit ) , KEY_Q , 1 )
>21142	ArgumentList	MakeFunctionEvent ( DSQ , instantQuit )
>21143	Argument	1
>21144	PrimaryExpression	1
>21145	Argument	KEY_Q
>21146	Identifier	KEY_Q
>21147	Argument	MakeFunctionEvent ( DSQ , instantQuit )
>21148	CallExpression	MakeFunctionEvent ( DSQ , instantQuit )
>21149	ArgumentList	DSQ
>21150	Argument	instantQuit
>21151	Identifier	instantQuit
>21152	Argument	DSQ
>21153	Identifier	DSQ
>21154	Callee	MakeFunctionEvent
>21155	Identifier	MakeFunctionEvent
>21156	Callee	addAction
>21157	Identifier	addAction
>21158	ExpressionStatement	 
>21159	CallExpression	user . control . actionSet . importAction ( this , \"Escape\" , ACTION_ESC )
>21160	ArgumentList	this
>21161	Argument	ACTION_ESC
>21162	Identifier	ACTION_ESC
>21163	Argument	\"Escape\"
>21164	PrimaryExpression	\"Escape\"
>21165	Argument	this
>21166	Identifier	this
>21167	Callee	user . control . actionSet . importAction
>21168	MemberAccess	user . control . actionSet . importAction
>21169	Identifier	importAction
>21170	MemberAccess	user . control . actionSet
>21171	Identifier	actionSet
>21172	MemberAccess	user . control
>21173	Identifier	control
>21174	Identifier	user
>21175	ExpressionStatement	 
>21176	AssignmentExpr	armb = user . control . actionSet . getActionInputByName ( \"rmb\" )
>21177	CallExpression	user . control . actionSet . getActionInputByName ( \"rmb\" )
>21178	ArgumentList	\"rmb\"
>21179	Argument	\"rmb\"
>21180	PrimaryExpression	\"rmb\"
>21181	Callee	user . control . actionSet . getActionInputByName
>21182	MemberAccess	user . control . actionSet . getActionInputByName
>21183	Identifier	getActionInputByName
>21184	MemberAccess	user . control . actionSet
>21185	Identifier	actionSet
>21186	MemberAccess	user . control
>21187	Identifier	control
>21188	Identifier	user
>21189	Identifier	armb
>21190	ExpressionStatement	 
>21191	AssignmentExpr	almb = user . control . actionSet . getActionInputByName ( \"lmb\" )
>21192	CallExpression	user . control . actionSet . getActionInputByName ( \"lmb\" )
>21193	ArgumentList	\"lmb\"
>21194	Argument	\"lmb\"
>21195	PrimaryExpression	\"lmb\"
>21196	Callee	user . control . actionSet . getActionInputByName
>21197	MemberAccess	user . control . actionSet . getActionInputByName
>21198	Identifier	getActionInputByName
>21199	MemberAccess	user . control . actionSet
>21200	Identifier	actionSet
>21201	MemberAccess	user . control
>21202	Identifier	control
>21203	Identifier	user
>21204	Identifier	almb
>21205	ExpressionStatement	 
>21206	CallExpression	clearActions ( )
>21207	ArgumentList	 
>21208	Callee	clearActions
>21209	Identifier	clearActions
>21237	FunctionDef	DSQ 
>21238	ParameterList	 
>21239	ReturnType	void
>21240	CompoundStatement	 
>21241	ExpressionStatement	 
>21242	CallExpression	SDL_ShowCursor ( SDL_DISABLE )
>21243	ArgumentList	SDL_DISABLE
>21244	Argument	SDL_DISABLE
>21245	Identifier	SDL_DISABLE
>21246	Callee	SDL_ShowCursor
>21247	Identifier	SDL_ShowCursor
>21248	ExpressionStatement	 
>21249	CallExpression	SDL_ShowCursor ( SDL_ENABLE )
>21250	ArgumentList	SDL_ENABLE
>21251	Argument	SDL_ENABLE
>21252	Identifier	SDL_ENABLE
>21253	Callee	SDL_ShowCursor
>21254	Identifier	SDL_ShowCursor
>21262	FunctionDef	DSQ 
>21263	ParameterList	float dt
>21264	Parameter	 
>21265	Identifier	dt
>21266	ParameterType	float
>21267	ReturnType	void
>21268	CompoundStatement	 
>21269	ExpressionStatement	 
>21270	CallExpression	Shot 
>21271	ArgumentList	 
>21272	Callee	Shot 
>21273	Identifier	Shot 
>21274	ExpressionStatement	 
>21275	CallExpression	Network 
>21276	ArgumentList	 
>21277	Callee	Network 
>21278	Identifier	Network 
>21279	ExpressionStatement	 
>21280	CallExpression	lockMouse ( )
>21281	ArgumentList	 
>21282	Callee	lockMouse
>21283	Identifier	lockMouse
>21284	ExpressionStatement	 
>21285	CallExpression	updatepecue ( dt )
>21286	ArgumentList	dt
>21287	Argument	dt
>21288	Identifier	dt
>21289	Callee	updatepecue
>21290	Identifier	updatepecue
>21291	IfStatement	if ( game && game -> avatar && game -> avatar -> isInputEnabled ( ) && ! game -> isPaused ( ) && ! game -> isInGameMenu ( ) )
>21292	ElseStatement	else
>21293	CompoundStatement	 
>21294	IfStatement	if ( setInpGrab != 0 )
>21295	CompoundStatement	 
>21296	ExpressionStatement	 
>21297	AssignmentExpr	setInpGrab = 0
>21298	PrimaryExpression	0
>21299	Identifier	setInpGrab
>21300	ExpressionStatement	 
>21301	CallExpression	toggleInputGrabPlat ( false )
>21302	ArgumentList	false
>21303	Argument	false
>21304	Identifier	false
>21305	Callee	toggleInputGrabPlat
>21306	Identifier	toggleInputGrabPlat
>21307	Condition	 
>21308	EqualityExpression	setInpGrab != 0
>21309	PrimaryExpression	0
>21310	Identifier	setInpGrab
>21311	CompoundStatement	 
>21312	IfStatement	if ( setInpGrab != 1 )
>21313	CompoundStatement	 
>21314	ExpressionStatement	 
>21315	AssignmentExpr	setInpGrab = 1
>21316	PrimaryExpression	1
>21317	Identifier	setInpGrab
>21318	ExpressionStatement	 
>21319	CallExpression	toggleInputGrabPlat ( true )
>21320	ArgumentList	true
>21321	Argument	true
>21322	Identifier	true
>21323	Callee	toggleInputGrabPlat
>21324	Identifier	toggleInputGrabPlat
>21325	Condition	 
>21326	EqualityExpression	setInpGrab != 1
>21327	PrimaryExpression	1
>21328	Identifier	setInpGrab
>21329	Condition	 
>21330	AndExpression	game && game -> avatar && game -> avatar -> isInputEnabled ( ) && ! game -> isPaused ( ) && ! game -> \
>21331	AndExpression	game -> avatar && game -> avatar -> isInputEnabled ( ) && ! game -> isPaused ( ) && ! game -> isInGameMenu ( )
>21332	AndExpression	game -> avatar -> isInputEnabled ( ) && ! game -> isPaused ( ) && ! game -> isInGameMenu ( )
>21333	AndExpression	! game -> isPaused ( ) && ! game -> isInGameMenu ( )
>21334	UnaryOp	! game -> isInGameMenu ( )
>21335	CallExpression	game -> isInGameMenu ( )
>21336	ArgumentList	 
>21337	Callee	game -> isInGameMenu
>21338	PtrMemberAccess	game -> isInGameMenu
>21339	Identifier	isInGameMenu
>21340	Identifier	game
>21341	UnaryOperator	!
>21342	UnaryOp	! game -> isPaused ( )
>21343	CallExpression	game -> isPaused ( )
>21344	ArgumentList	 
>21345	Callee	game -> isPaused
>21346	PtrMemberAccess	game -> isPaused
>21347	Identifier	isPaused
>21348	Identifier	game
>21349	UnaryOperator	!
>21350	CallExpression	game -> avatar -> isInputEnabled ( )
>21351	ArgumentList	 
>21352	Callee	game -> avatar -> isInputEnabled
>21353	PtrMemberAccess	game -> avatar -> isInputEnabled
>21354	Identifier	isInputEnabled
>21355	PtrMemberAccess	game -> avatar
>21356	Identifier	avatar
>21357	Identifier	game
>21358	PtrMemberAccess	game -> avatar
>21359	Identifier	avatar
>21360	Identifier	game
>21361	Identifier	game
>21362	ExpressionStatement	 
>21363	AssignmentExpr	lastfullscreen = _fullscreen
>21364	Identifier	_fullscreen
>21365	Identifier	lastfullscreen
>21366	IfStatement	if ( lastfullscreen != _fullscreen )
>21367	CompoundStatement	 
>21368	ExpressionStatement	 
>21369	AssignmentExpr	setInpGrab = - 1
>21370	UnaryOp	- 1
>21371	PrimaryExpression	1
>21372	UnaryOperator	-
>21373	Identifier	setInpGrab
>21374	Condition	 
>21375	EqualityExpression	lastfullscreen != _fullscreen
>21376	Identifier	_fullscreen
>21377	Identifier	lastfullscreen
>21378	IdentifierDeclStatement	 
>21379	IdentifierDecl	lastfullscreen = false
>21380	AssignmentExpr	lastfullscreen = false
>21381	Identifier	false
>21382	Identifier	false
>21383	Identifier	lastfullscreen
>21384	IdentifierDeclType	bool
>21385	Statement	 
>21386	ExpressionStatement	 
>21387	AssignmentExpr	lastHeight = height
>21388	Identifier	height
>21389	Identifier	lastHeight
>21390	ExpressionStatement	 
>21391	AssignmentExpr	lastWidth = width
>21392	Identifier	width
>21393	Identifier	lastWidth
>21394	IfStatement	if ( lastWidth != width || lastHeight != height )
>21395	CompoundStatement	 
>21396	ExpressionStatement	 
>21397	AssignmentExpr	setInpGrab = - 1
>21398	UnaryOp	- 1
>21399	PrimaryExpression	1
>21400	UnaryOperator	-
>21401	Identifier	setInpGrab
>21402	Condition	 
>21403	OrExpression	lastWidth != width || lastHeight != height
>21404	EqualityExpression	lastHeight != height
>21405	Identifier	height
>21406	Identifier	lastHeight
>21407	EqualityExpression	lastWidth != width
>21408	Identifier	width
>21409	Identifier	lastWidth
>21410	IdentifierDeclStatement	 
>21411	IdentifierDecl	lastHeight = 0
>21412	AssignmentExpr	lastHeight = 0
>21413	PrimaryExpression	0
>21414	Identifier	lastHeight
>21415	Identifier	lastHeight
>21416	IdentifierDeclType	int
>21417	Statement	 
>21418	IdentifierDeclStatement	 
>21419	IdentifierDecl	lastWidth = 0
>21420	AssignmentExpr	lastWidth = 0
>21421	PrimaryExpression	0
>21422	Identifier	lastWidth
>21423	Identifier	lastWidth
>21424	IdentifierDeclType	int
>21425	Statement	 
>21426	IfStatement	if ( shakeCameraTimer > 0 )
>21427	CompoundStatement	 
>21428	IfStatement	if ( shakeCameraTimer <= 0 )
>21429	ElseStatement	else
>21430	CompoundStatement	 
>21431	ExpressionStatement	 
>21432	AssignmentExpr	cameraOffset = Vector ( ( rand ( ) % int ( shakeCameraMag ) ) - shakeCameraMag / 2.0f , ( rand ( ) % \
>21433	CallExpression	Vector ( ( rand ( ) % int ( shakeCameraMag ) ) - shakeCameraMag / 2.0f , ( rand ( ) % int ( shakeCameraMag ) ) - \
>21434	ArgumentList	( rand ( ) % int ( shakeCameraMag ) ) - shakeCameraMag / 2.0f
>21435	Argument	( rand ( ) % int ( shakeCameraMag ) ) - shakeCameraMag / 2.0f
>21436	AdditiveExpression	( rand ( ) % int ( shakeCameraMag ) ) - shakeCameraMag / 2.0f
>21437	MultiplicativeExpression	shakeCameraMag / 2.0f
>21438	PrimaryExpression	2.0f
>21439	Identifier	shakeCameraMag
>21440	MultiplicativeExpression	rand ( ) % int ( shakeCameraMag )
>21441	CallExpression	int ( shakeCameraMag )
>21442	ArgumentList	shakeCameraMag
>21443	Argument	shakeCameraMag
>21444	Identifier	shakeCameraMag
>21445	Callee	int
>21446	Identifier	int
>21447	CallExpression	rand ( )
>21448	ArgumentList	 
>21449	Callee	rand
>21450	Identifier	rand
>21451	Argument	( rand ( ) % int ( shakeCameraMag ) ) - shakeCameraMag / 2.0f
>21452	AdditiveExpression	( rand ( ) % int ( shakeCameraMag ) ) - shakeCameraMag / 2.0f
>21453	MultiplicativeExpression	shakeCameraMag / 2.0f
>21454	PrimaryExpression	2.0f
>21455	Identifier	shakeCameraMag
>21456	MultiplicativeExpression	rand ( ) % int ( shakeCameraMag )
>21457	CallExpression	int ( shakeCameraMag )
>21458	ArgumentList	shakeCameraMag
>21459	Argument	shakeCameraMag
>21460	Identifier	shakeCameraMag
>21461	Callee	int
>21462	Identifier	int
>21463	CallExpression	rand ( )
>21464	ArgumentList	 
>21465	Callee	rand
>21466	Identifier	rand
>21467	Callee	Vector
>21468	Identifier	Vector
>21469	Identifier	cameraOffset
>21470	CompoundStatement	 
>21471	ExpressionStatement	 
>21472	AssignmentExpr	cameraOffset = Vector ( 0 , 0 )
>21473	CallExpression	Vector ( 0 , 0 )
>21474	ArgumentList	0
>21475	Argument	0
>21476	PrimaryExpression	0
>21477	Argument	0
>21478	PrimaryExpression	0
>21479	Callee	Vector
>21480	Identifier	Vector
>21481	Identifier	cameraOffset
>21482	ExpressionStatement	 
>21483	AssignmentExpr	shakeCameraTimer = 0
>21484	PrimaryExpression	0
>21485	Identifier	shakeCameraTimer
>21486	Condition	 
>21487	RelationalExpression	shakeCameraTimer <= 0
>21488	PrimaryExpression	0
>21489	Identifier	shakeCameraTimer
>21490	ExpressionStatement	 
>21491	AssignmentExpr	shakeCameraTimer -= dt
>21492	Identifier	dt
>21493	Identifier	shakeCameraTimer
>21494	Condition	 
>21495	RelationalExpression	shakeCameraTimer > 0
>21496	PrimaryExpression	0
>21497	Identifier	shakeCameraTimer
>21498	IfStatement	if ( isDeveloperKeys ( ) && fpsText && cmDebug && cmDebug -> alpha == 1 )
>21499	CompoundStatement	 
>21500	ExpressionStatement	 
>21501	CallExpression	fpsText -> setText ( os . str ( ) )
>21502	ArgumentList	os . str ( )
>21503	Argument	os . str ( )
>21504	CallExpression	os . str ( )
>21505	ArgumentList	 
>21506	Callee	os . str
>21507	MemberAccess	os . str
>21508	Identifier	str
>21509	Identifier	os
>21510	Callee	fpsText -> setText
>21511	PtrMemberAccess	fpsText -> setText
>21512	Identifier	setText
>21513	Identifier	fpsText
>21514	ExpressionStatement	 
>21515	ShiftExpression	os << \" | dt
>21516	ShiftExpression	\" | dt
>21517	CallExpression	core -> get_current_dt ( )
>21518	ArgumentList	 
>21519	Callee	core -> get_current_dt
>21520	PtrMemberAccess	core -> get_current_dt
>21521	Identifier	get_current_dt
>21522	Identifier	core
>21523	PrimaryExpression	\" | dt
>21524	Identifier	os
>21525	ExpressionStatement	 
>21526	ShiftExpression	os << \" | sndQ
>21527	ShiftExpression	\" | sndQ
>21528	PtrMemberAccess	core -> dbg_numThreadDecoders
>21529	Identifier	dbg_numThreadDecoders
>21530	Identifier	core
>21531	PrimaryExpression	\" | sndQ
>21532	Identifier	os
>21533	ExpressionStatement	 
>21534	ShiftExpression	os << \" | evQ
>21535	ShiftExpression	\" | evQ
>21536	CallExpression	core -> eventQueue . getSize ( )
>21537	ArgumentList	 
>21538	Callee	core -> eventQueue . getSize
>21539	MemberAccess	core -> eventQueue . getSize
>21540	Identifier	getSize
>21541	PtrMemberAccess	core -> eventQueue
>21542	Identifier	eventQueue
>21543	Identifier	core
>21544	PrimaryExpression	\" | evQ
>21545	Identifier	os
>21546	ExpressionStatement	 
>21547	ShiftExpression	os << \" | s
>21548	ShiftExpression	\" | s
>21549	MemberAccess	dsq -> continuity . seconds
>21550	Identifier	seconds
>21551	PtrMemberAccess	dsq -> continuity
>21552	Identifier	continuity
>21553	Identifier	dsq
>21554	PrimaryExpression	\" | s
>21555	Identifier	os
>21556	ExpressionStatement	 
>21557	ShiftExpression	os << \" | p
>21558	ShiftExpression	\" | p
>21559	ShiftExpression	core -> processedRenderObjectCount << \" | t
>21560	ShiftExpression	\" | t
>21561	PtrMemberAccess	core -> totalRenderObjectCount
>21562	Identifier	totalRenderObjectCount
>21563	Identifier	core
>21564	PrimaryExpression	\" | t
>21565	PtrMemberAccess	core -> processedRenderObjectCount
>21566	Identifier	processedRenderObjectCount
>21567	Identifier	core
>21568	PrimaryExpression	\" | p
>21569	Identifier	os
>21570	ExpressionStatement	 
>21571	ShiftExpression	os << \"FPS
>21572	ShiftExpression	\"FPS
>21573	ShiftExpression	core -> fps << \" | ROC
>21574	ShiftExpression	\" | ROC
>21575	ShiftExpression	core -> renderObjectCount << \" | RC
>21576	ShiftExpression	\" | RC
>21577	ShiftExpression	Core 
>21578	ShiftExpression	\" | RES
>21579	CallExpression	core -> resources . size ( )
>21580	ArgumentList	 
>21581	Callee	core -> resources . size
>21582	MemberAccess	core -> resources . size
>21583	Identifier	size
>21584	PtrMemberAccess	core -> resources
>21585	Identifier	resources
>21586	Identifier	core
>21587	PrimaryExpression	\" | RES
>21588	Identifier	Core 
>21589	PrimaryExpression	\" | RC
>21590	PtrMemberAccess	core -> renderObjectCount
>21591	Identifier	renderObjectCount
>21592	Identifier	core
>21593	PrimaryExpression	\" | ROC
>21594	PtrMemberAccess	core -> fps
>21595	Identifier	fps
>21596	Identifier	core
>21597	PrimaryExpression	\"FPS
>21598	Identifier	os
>21599	IdentifierDeclStatement	 
>21600	IdentifierDecl	os
>21601	Identifier	os
>21602	IdentifierDeclType	std 
>21603	Condition	 
>21604	AndExpression	isDeveloperKeys ( ) && fpsText && cmDebug && cmDebug -> alpha == 1
>21605	AndExpression	fpsText && cmDebug && cmDebug -> alpha == 1
>21606	AndExpression	cmDebug && cmDebug -> alpha == 1
>21607	EqualityExpression	cmDebug -> alpha == 1
>21608	PrimaryExpression	1
>21609	PtrMemberAccess	cmDebug -> alpha
>21610	Identifier	alpha
>21611	Identifier	cmDebug
>21612	Identifier	cmDebug
>21613	Identifier	fpsText
>21614	CallExpression	isDeveloperKeys ( )
>21615	ArgumentList	 
>21616	Callee	isDeveloperKeys
>21617	Identifier	isDeveloperKeys
>21618	IfStatement	if ( isDeveloperKeys ( ) && cmDebug && cmDebug -> alpha == 1 && fpsText )
>21619	CompoundStatement	 
>21620	ExpressionStatement	 
>21621	CallExpression	cmDebug -> setText ( os . str ( ) )
>21622	ArgumentList	os . str ( )
>21623	Argument	os . str ( )
>21624	CallExpression	os . str ( )
>21625	ArgumentList	 
>21626	Callee	os . str
>21627	MemberAccess	os . str
>21628	Identifier	str
>21629	Identifier	os
>21630	Callee	cmDebug -> setText
>21631	PtrMemberAccess	cmDebug -> setText
>21632	Identifier	setText
>21633	Identifier	cmDebug
>21634	ExpressionStatement	 
>21635	ShiftExpression	os << \"Lua mem
>21636	ShiftExpression	\"Lua mem
>21637	ShiftExpression	scriptInterface . gcGetStats ( ) << \" KB\" << std 
>21638	ShiftExpression	\" KB\" << std 
>21639	Identifier	std 
>21640	PrimaryExpression	\" KB\"
>21641	CallExpression	scriptInterface . gcGetStats ( )
>21642	ArgumentList	 
>21643	Callee	scriptInterface . gcGetStats
>21644	MemberAccess	scriptInterface . gcGetStats
>21645	Identifier	gcGetStats
>21646	Identifier	scriptInterface
>21647	PrimaryExpression	\"Lua mem
>21648	Identifier	os
>21649	ExpressionStatement	 
>21650	ShiftExpression	os << \"elemu
>21651	ShiftExpression	\"elemu
>21652	ShiftExpression	game -> elementUpdateList . size ( ) << \" elemi
>21653	ShiftExpression	\" elemi
>21654	ShiftExpression	game -> elementInteractionList . size ( ) << std 
>21655	Identifier	std 
>21656	CallExpression	game -> elementInteractionList . size ( )
>21657	ArgumentList	 
>21658	Callee	game -> elementInteractionList . size
>21659	MemberAccess	game -> elementInteractionList . size
>21660	Identifier	size
>21661	PtrMemberAccess	game -> elementInteractionList
>21662	Identifier	elementInteractionList
>21663	Identifier	game
>21664	PrimaryExpression	\" elemi
>21665	CallExpression	game -> elementUpdateList . size ( )
>21666	ArgumentList	 
>21667	Callee	game -> elementUpdateList . size
>21668	MemberAccess	game -> elementUpdateList . size
>21669	Identifier	size
>21670	PtrMemberAccess	game -> elementUpdateList
>21671	Identifier	elementUpdateList
>21672	Identifier	game
>21673	PrimaryExpression	\"elemu
>21674	Identifier	os
>21675	ExpressionStatement	 
>21676	ShiftExpression	os << core -> globalResolutionScale . x << \", \" << core -> globalResolutionScale . y << std 
>21677	ShiftExpression	core -> globalResolutionScale . x << \", \" << core -> globalResolutionScale . y << std 
>21678	ShiftExpression	\", \" << core -> globalResolutionScale . y << std 
>21679	ShiftExpression	core -> globalResolutionScale . y << std 
>21680	Identifier	std 
>21681	MemberAccess	core -> globalResolutionScale . y
>21682	Identifier	y
>21683	PtrMemberAccess	core -> globalResolutionScale
>21684	Identifier	globalResolutionScale
>21685	Identifier	core
>21686	PrimaryExpression	\", \"
>21687	MemberAccess	core -> globalResolutionScale . x
>21688	Identifier	x
>21689	PtrMemberAccess	core -> globalResolutionScale
>21690	Identifier	globalResolutionScale
>21691	Identifier	core
>21692	Identifier	os
>21693	ExpressionStatement	 
>21694	ShiftExpression	os << \"runInBG
>21695	ShiftExpression	\"runInBG
>21696	ShiftExpression	core -> settings . runInBackground << \" nested
>21697	ShiftExpression	\" nested
>21698	ShiftExpression	core -> getNestedMains ( ) << std 
>21699	Identifier	std 
>21700	CallExpression	core -> getNestedMains ( )
>21701	ArgumentList	 
>21702	Callee	core -> getNestedMains
>21703	PtrMemberAccess	core -> getNestedMains
>21704	Identifier	getNestedMains
>21705	Identifier	core
>21706	PrimaryExpression	\" nested
>21707	MemberAccess	core -> settings . runInBackground
>21708	Identifier	runInBackground
>21709	PtrMemberAccess	core -> settings
>21710	Identifier	settings
>21711	Identifier	core
>21712	PrimaryExpression	\"runInBG
>21713	Identifier	os
>21714	ExpressionStatement	 
>21715	ShiftExpression	os << dsq -> sound -> getVolumeString ( ) << std 
>21716	ShiftExpression	dsq -> sound -> getVolumeString ( ) << std 
>21717	Identifier	std 
>21718	CallExpression	dsq -> sound -> getVolumeString ( )
>21719	ArgumentList	 
>21720	Callee	dsq -> sound -> getVolumeString
>21721	PtrMemberAccess	dsq -> sound -> getVolumeString
>21722	Identifier	getVolumeString
>21723	PtrMemberAccess	dsq -> sound
>21724	Identifier	sound
>21725	Identifier	dsq
>21726	Identifier	os
>21727	ExpressionStatement	 
>21728	ShiftExpression	os << \" ca
>21729	ShiftExpression	\" ca
>21730	ShiftExpression	ca << \" ma
>21731	ShiftExpression	\" ma
>21732	ShiftExpression	ma << std 
>21733	Identifier	std 
>21734	Identifier	ma
>21735	PrimaryExpression	\" ma
>21736	Identifier	ca
>21737	PrimaryExpression	\" ca
>21738	Identifier	os
>21739	ExpressionStatement	 
>21740	CallExpression	dsq -> sound -> getStats ( & ca , & ma )
>21741	ArgumentList	& ca
>21742	Argument	& ma
>21743	UnaryOp	& ma
>21744	Identifier	ma
>21745	UnaryOperator	&
>21746	Argument	& ca
>21747	UnaryOp	& ca
>21748	Identifier	ca
>21749	UnaryOperator	&
>21750	Callee	dsq -> sound -> getStats
>21751	PtrMemberAccess	dsq -> sound -> getStats
>21752	Identifier	getStats
>21753	PtrMemberAccess	dsq -> sound
>21754	Identifier	sound
>21755	Identifier	dsq
>21756	IdentifierDeclStatement	 
>21757	IdentifierDecl	ma
>21758	Identifier	ma
>21759	IdentifierDeclType	int
>21760	IdentifierDecl	ca
>21761	Identifier	ca
>21762	IdentifierDeclType	int
>21763	ExpressionStatement	 
>21764	ShiftExpression	os << \"voiceTime
>21765	ShiftExpression	\"voiceTime
>21766	ShiftExpression	dsq -> sound -> getVoiceTime ( ) << \" bNat
>21767	ShiftExpression	\" bNat
>21768	PtrMemberAccess	dsq -> game -> bNatural
>21769	Identifier	bNatural
>21770	PtrMemberAccess	dsq -> game
>21771	Identifier	game
>21772	Identifier	dsq
>21773	PrimaryExpression	\" bNat
>21774	CallExpression	dsq -> sound -> getVoiceTime ( )
>21775	ArgumentList	 
>21776	Callee	dsq -> sound -> getVoiceTime
>21777	PtrMemberAccess	dsq -> sound -> getVoiceTime
>21778	Identifier	getVoiceTime
>21779	PtrMemberAccess	dsq -> sound
>21780	Identifier	sound
>21781	Identifier	dsq
>21782	PrimaryExpression	\"voiceTime
>21783	Identifier	os
>21784	ExpressionStatement	 
>21785	ShiftExpression	os << \"worldType
>21786	ShiftExpression	\"worldType
>21787	ShiftExpression	continuity . getWorldType ( ) << \" worldPaused
>21788	ShiftExpression	\" worldPaused
>21789	ShiftExpression	game -> isWorldPaused ( ) << std 
>21790	Identifier	std 
>21791	CallExpression	game -> isWorldPaused ( )
>21792	ArgumentList	 
>21793	Callee	game -> isWorldPaused
>21794	PtrMemberAccess	game -> isWorldPaused
>21795	Identifier	isWorldPaused
>21796	Identifier	game
>21797	PrimaryExpression	\" worldPaused
>21798	CallExpression	continuity . getWorldType ( )
>21799	ArgumentList	 
>21800	Callee	continuity . getWorldType
>21801	MemberAccess	continuity . getWorldType
>21802	Identifier	getWorldType
>21803	Identifier	continuity
>21804	PrimaryExpression	\"worldType
>21805	Identifier	os
>21806	ExpressionStatement	 
>21807	ShiftExpression	os << \"cameraPos
>21808	ShiftExpression	\"cameraPos
>21809	ShiftExpression	dsq -> cameraPos . x << \", \" << dsq -> cameraPos . y << \")\" << std 
>21810	ShiftExpression	\", \" << dsq -> cameraPos . y << \")\" << std 
>21811	ShiftExpression	dsq -> cameraPos . y << \")\" << std 
>21812	ShiftExpression	\")\" << std 
>21813	Identifier	std 
>21814	PrimaryExpression	\")\"
>21815	MemberAccess	dsq -> cameraPos . y
>21816	Identifier	y
>21817	PtrMemberAccess	dsq -> cameraPos
>21818	Identifier	cameraPos
>21819	Identifier	dsq
>21820	PrimaryExpression	\", \"
>21821	MemberAccess	dsq -> cameraPos . x
>21822	Identifier	x
>21823	PtrMemberAccess	dsq -> cameraPos
>21824	Identifier	cameraPos
>21825	Identifier	dsq
>21826	PrimaryExpression	\"cameraPos
>21827	Identifier	os
>21828	ExpressionStatement	 
>21829	ShiftExpression	os << \"PMFree
>21830	ShiftExpression	\"PMFree
>21831	ShiftExpression	particleManager -> getFree ( ) << \" Active
>21832	ShiftExpression	\" Active
>21833	ShiftExpression	particleManager -> getNumActive ( ) << std 
>21834	Identifier	std 
>21835	CallExpression	particleManager -> getNumActive ( )
>21836	ArgumentList	 
>21837	Callee	particleManager -> getNumActive
>21838	PtrMemberAccess	particleManager -> getNumActive
>21839	Identifier	getNumActive
>21840	Identifier	particleManager
>21841	PrimaryExpression	\" Active
>21842	CallExpression	particleManager -> getFree ( )
>21843	ArgumentList	 
>21844	Callee	particleManager -> getFree
>21845	PtrMemberAccess	particleManager -> getFree
>21846	Identifier	getFree
>21847	Identifier	particleManager
>21848	PrimaryExpression	\"PMFree
>21849	Identifier	os
>21850	ExpressionStatement	 
>21851	ShiftExpression	os << \"altState
>21852	ShiftExpression	\"altState
>21853	ShiftExpression	core -> getKeyState ( KEY_LALT ) << \" | \" << core -> getKeyState ( KEY_RALT ) << std 
>21854	ShiftExpression	\" | \" << core -> getKeyState ( KEY_RALT ) << std 
>21855	ShiftExpression	core -> getKeyState ( KEY_RALT ) << std 
>21856	Identifier	std 
>21857	CallExpression	core -> getKeyState ( KEY_RALT )
>21858	ArgumentList	KEY_RALT
>21859	Argument	KEY_RALT
>21860	Identifier	KEY_RALT
>21861	Callee	core -> getKeyState
>21862	PtrMemberAccess	core -> getKeyState
>21863	Identifier	getKeyState
>21864	Identifier	core
>21865	PrimaryExpression	\" | \"
>21866	CallExpression	core -> getKeyState ( KEY_LALT )
>21867	ArgumentList	KEY_LALT
>21868	Argument	KEY_LALT
>21869	Identifier	KEY_LALT
>21870	Callee	core -> getKeyState
>21871	PtrMemberAccess	core -> getKeyState
>21872	Identifier	getKeyState
>21873	Identifier	core
>21874	PrimaryExpression	\"altState
>21875	Identifier	os
>21876	ExpressionStatement	 
>21877	ShiftExpression	os << \"joyStick
>21878	ShiftExpression	\"joyStick
>21879	ShiftExpression	core -> joystick . position . x << \", \" << core -> joystick . position . y << \")\n\"
>21880	ShiftExpression	\", \" << core -> joystick . position . y << \")\n\"
>21881	ShiftExpression	core -> joystick . position . y << \")\n\"
>21882	PrimaryExpression	\")\n\"
>21883	MemberAccess	core -> joystick . position . y
>21884	Identifier	y
>21885	MemberAccess	core -> joystick . position
>21886	Identifier	position
>21887	PtrMemberAccess	core -> joystick
>21888	Identifier	joystick
>21889	Identifier	core
>21890	PrimaryExpression	\", \"
>21891	MemberAccess	core -> joystick . position . x
>21892	Identifier	x
>21893	MemberAccess	core -> joystick . position
>21894	Identifier	position
>21895	PtrMemberAccess	core -> joystick
>21896	Identifier	joystick
>21897	Identifier	core
>21898	PrimaryExpression	\"joyStick
>21899	Identifier	os
>21900	ExpressionStatement	 
>21901	ShiftExpression	os << \"mousePos
>21902	ShiftExpression	\"mousePos
>21903	ShiftExpression	core -> mouse . position . x << \", \" << core -> mouse . position . y << \") mouseChange
>21904	ShiftExpression	\", \" << core -> mouse . position . y << \") mouseChange
>21905	ShiftExpression	core -> mouse . position . y << \") mouseChange
>21906	ShiftExpression	\") mouseChange
>21907	ShiftExpression	core -> mouse . change . x << \", \" << core -> mouse . change . y << \")\n\"
>21908	ShiftExpression	\", \" << core -> mouse . change . y << \")\n\"
>21909	ShiftExpression	core -> mouse . change . y << \")\n\"
>21910	PrimaryExpression	\")\n\"
>21911	MemberAccess	core -> mouse . change . y
>21912	Identifier	y
>21913	MemberAccess	core -> mouse . change
>21914	Identifier	change
>21915	PtrMemberAccess	core -> mouse
>21916	Identifier	mouse
>21917	Identifier	core
>21918	PrimaryExpression	\", \"
>21919	MemberAccess	core -> mouse . change . x
>21920	Identifier	x
>21921	MemberAccess	core -> mouse . change
>21922	Identifier	change
>21923	PtrMemberAccess	core -> mouse
>21924	Identifier	mouse
>21925	Identifier	core
>21926	PrimaryExpression	\") mouseChange
>21927	MemberAccess	core -> mouse . position . y
>21928	Identifier	y
>21929	MemberAccess	core -> mouse . position
>21930	Identifier	position
>21931	PtrMemberAccess	core -> mouse
>21932	Identifier	mouse
>21933	Identifier	core
>21934	PrimaryExpression	\", \"
>21935	MemberAccess	core -> mouse . position . x
>21936	Identifier	x
>21937	MemberAccess	core -> mouse . position
>21938	Identifier	position
>21939	PtrMemberAccess	core -> mouse
>21940	Identifier	mouse
>21941	Identifier	core
>21942	PrimaryExpression	\"mousePos
>21943	Identifier	os
>21944	ExpressionStatement	 
>21945	ShiftExpression	os << \"globalScale
>21946	ShiftExpression	\"globalScale
>21947	ShiftExpression	core -> globalScale . x << std 
>21948	Identifier	std 
>21949	MemberAccess	core -> globalScale . x
>21950	Identifier	x
>21951	PtrMemberAccess	core -> globalScale
>21952	Identifier	globalScale
>21953	Identifier	core
>21954	PrimaryExpression	\"globalScale
>21955	Identifier	os
>21956	ExpressionStatement	 
>21957	ShiftExpression	os << std 
>21958	Identifier	std 
>21959	Identifier	os
>21960	ExpressionStatement	 
>21961	ShiftExpression	os << \"invGlobalScale
>21962	ShiftExpression	\"invGlobalScale
>21963	PtrMemberAccess	core -> invGlobalScale
>21964	Identifier	invGlobalScale
>21965	Identifier	core
>21966	PrimaryExpression	\"invGlobalScale
>21967	Identifier	os
>21968	ExpressionStatement	 
>21969	ShiftExpression	os << \"story
>21970	ShiftExpression	\"story
>21971	ShiftExpression	continuity . getStory ( ) << std 
>21972	Identifier	std 
>21973	CallExpression	continuity . getStory ( )
>21974	ArgumentList	 
>21975	Callee	continuity . getStory
>21976	MemberAccess	continuity . getStory
>21977	Identifier	getStory
>21978	Identifier	continuity
>21979	PrimaryExpression	\"story
>21980	Identifier	os
>21981	IfStatement	if ( dsq -> game -> avatar )
>21982	CompoundStatement	 
>21983	ExpressionStatement	 
>21984	ShiftExpression	os << \" canSAC
>21985	ShiftExpression	\" canSAC
>21986	ShiftExpression	dsq -> game -> avatar -> canSwimAgainstCurrents ( ) << std 
>21987	Identifier	std 
>21988	CallExpression	dsq -> game -> avatar -> canSwimAgainstCurrents ( )
>21989	ArgumentList	 
>21990	Callee	dsq -> game -> avatar -> canSwimAgainstCurrents
>21991	PtrMemberAccess	dsq -> game -> avatar -> canSwimAgainstCurrents
>21992	Identifier	canSwimAgainstCurrents
>21993	PtrMemberAccess	dsq -> game -> avatar
>21994	Identifier	avatar
>21995	PtrMemberAccess	dsq -> game
>21996	Identifier	game
>21997	Identifier	dsq
>21998	PrimaryExpression	\" canSAC
>21999	Identifier	os
>22000	ExpressionStatement	 
>22001	ShiftExpression	os << \" canLTW
>22002	ShiftExpression	\" canLTW
>22003	CallExpression	dsq -> game -> avatar -> canLockToWall ( )
>22004	ArgumentList	 
>22005	Callee	dsq -> game -> avatar -> canLockToWall
>22006	PtrMemberAccess	dsq -> game -> avatar -> canLockToWall
>22007	Identifier	canLockToWall
>22008	PtrMemberAccess	dsq -> game -> avatar
>22009	Identifier	avatar
>22010	PtrMemberAccess	dsq -> game
>22011	Identifier	game
>22012	Identifier	dsq
>22013	PrimaryExpression	\" canLTW
>22014	Identifier	os
>22015	ExpressionStatement	 
>22016	ShiftExpression	os << \" canBurst
>22017	ShiftExpression	\" canBurst
>22018	CallExpression	dsq -> game -> avatar -> canBurst ( )
>22019	ArgumentList	 
>22020	Callee	dsq -> game -> avatar -> canBurst
>22021	PtrMemberAccess	dsq -> game -> avatar -> canBurst
>22022	Identifier	canBurst
>22023	PtrMemberAccess	dsq -> game -> avatar
>22024	Identifier	avatar
>22025	PtrMemberAccess	dsq -> game
>22026	Identifier	game
>22027	Identifier	dsq
>22028	PrimaryExpression	\" canBurst
>22029	Identifier	os
>22030	ExpressionStatement	 
>22031	ShiftExpression	os << \"canActivate
>22032	ShiftExpression	\"canActivate
>22033	CallExpression	dsq -> game -> avatar -> canActivateStuff ( )
>22034	ArgumentList	 
>22035	Callee	dsq -> game -> avatar -> canActivateStuff
>22036	PtrMemberAccess	dsq -> game -> avatar -> canActivateStuff
>22037	Identifier	canActivateStuff
>22038	PtrMemberAccess	dsq -> game -> avatar
>22039	Identifier	avatar
>22040	PtrMemberAccess	dsq -> game
>22041	Identifier	game
>22042	Identifier	dsq
>22043	PrimaryExpression	\"canActivate
>22044	Identifier	os
>22045	ExpressionStatement	 
>22046	ShiftExpression	os << \"fh
>22047	ShiftExpression	\"fh
>22048	ShiftExpression	dsq -> game -> avatar -> isfh ( ) << \" fv
>22049	ShiftExpression	\" fv
>22050	ShiftExpression	dsq -> game -> avatar -> isfv ( ) << std 
>22051	Identifier	std 
>22052	CallExpression	dsq -> game -> avatar -> isfv ( )
>22053	ArgumentList	 
>22054	Callee	dsq -> game -> avatar -> isfv
>22055	PtrMemberAccess	dsq -> game -> avatar -> isfv
>22056	Identifier	isfv
>22057	PtrMemberAccess	dsq -> game -> avatar
>22058	Identifier	avatar
>22059	PtrMemberAccess	dsq -> game
>22060	Identifier	game
>22061	Identifier	dsq
>22062	PrimaryExpression	\" fv
>22063	CallExpression	dsq -> game -> avatar -> isfh ( )
>22064	ArgumentList	 
>22065	Callee	dsq -> game -> avatar -> isfh
>22066	PtrMemberAccess	dsq -> game -> avatar -> isfh
>22067	Identifier	isfh
>22068	PtrMemberAccess	dsq -> game -> avatar
>22069	Identifier	avatar
>22070	PtrMemberAccess	dsq -> game
>22071	Identifier	game
>22072	Identifier	dsq
>22073	PrimaryExpression	\"fh
>22074	Identifier	os
>22075	ExpressionStatement	 
>22076	ShiftExpression	os << std 
>22077	Identifier	std 
>22078	Identifier	os
>22079	IfStatement	if ( b )
>22080	ExpressionStatement	 
>22081	ShiftExpression	os << \" headRot
>22082	ShiftExpression	\" headRot
>22083	MemberAccess	b -> rotation . z
>22084	Identifier	z
>22085	PtrMemberAccess	b -> rotation
>22086	Identifier	rotation
>22087	Identifier	b
>22088	PrimaryExpression	\" headRot
>22089	Identifier	os
>22090	Condition	 
>22091	Identifier	b
>22092	IdentifierDeclStatement	 
>22093	IdentifierDecl	* b = dsq -> game -> avatar -> skeletalSprite . getBoneByIdx ( 1 )
>22094	AssignmentExpr	* b = dsq -> game -> avatar -> skeletalSprite . getBoneByIdx ( 1 )
>22095	CallExpression	dsq -> game -> avatar -> skeletalSprite . getBoneByIdx ( 1 )
>22096	ArgumentList	1
>22097	Argument	1
>22098	PrimaryExpression	1
>22099	Callee	dsq -> game -> avatar -> skeletalSprite . getBoneByIdx
>22100	MemberAccess	dsq -> game -> avatar -> skeletalSprite . getBoneByIdx
>22101	Identifier	getBoneByIdx
>22102	PtrMemberAccess	dsq -> game -> avatar -> skeletalSprite
>22103	Identifier	skeletalSprite
>22104	PtrMemberAccess	dsq -> game -> avatar
>22105	Identifier	avatar
>22106	PtrMemberAccess	dsq -> game
>22107	Identifier	game
>22108	Identifier	dsq
>22109	Identifier	b
>22110	Identifier	b
>22111	IdentifierDeclType	Bone *
>22112	ExpressionStatement	 
>22113	ShiftExpression	os << std 
>22114	Identifier	std 
>22115	Identifier	os
>22116	SwitchStatement	switch ( dsq -> inputMode )
>22117	CompoundStatement	 
>22118	BreakStatement	 
>22119	ExpressionStatement	 
>22120	ShiftExpression	os << \"joystick\"
>22121	PrimaryExpression	\"joystick\"
>22122	Identifier	os
>22123	Label	 
>22124	Identifier	INPUT_JOYSTICK
>22125	BreakStatement	 
>22126	ExpressionStatement	 
>22127	ShiftExpression	os << \"mouse\"
>22128	PrimaryExpression	\"mouse\"
>22129	Identifier	os
>22130	Label	 
>22131	Identifier	INPUT_MOUSE
>22132	Condition	 
>22133	PtrMemberAccess	dsq -> inputMode
>22134	Identifier	inputMode
>22135	Identifier	dsq
>22136	ExpressionStatement	 
>22137	ShiftExpression	os << \"inputMode
>22138	PrimaryExpression	\"inputMode
>22139	Identifier	os
>22140	ExpressionStatement	 
>22141	ShiftExpression	os << \" look
>22142	ShiftExpression	\" look
>22143	ShiftExpression	dsq -> game -> avatar -> state . updateLookAtTime << \" \"
>22144	PrimaryExpression	\" \"
>22145	MemberAccess	dsq -> game -> avatar -> state . updateLookAtTime
>22146	Identifier	updateLookAtTime
>22147	PtrMemberAccess	dsq -> game -> avatar -> state
>22148	Identifier	state
>22149	PtrMemberAccess	dsq -> game -> avatar
>22150	Identifier	avatar
>22151	PtrMemberAccess	dsq -> game
>22152	Identifier	game
>22153	Identifier	dsq
>22154	PrimaryExpression	\" look
>22155	Identifier	os
>22156	ExpressionStatement	 
>22157	ShiftExpression	os << \"singing
>22158	ShiftExpression	\"singing
>22159	ShiftExpression	dsq -> game -> avatar -> singing << \" blockSinging
>22160	ShiftExpression	\" blockSinging
>22161	CallExpression	dsq -> game -> avatar -> isBlockSinging ( )
>22162	ArgumentList	 
>22163	Callee	dsq -> game -> avatar -> isBlockSinging
>22164	PtrMemberAccess	dsq -> game -> avatar -> isBlockSinging
>22165	Identifier	isBlockSinging
>22166	PtrMemberAccess	dsq -> game -> avatar
>22167	Identifier	avatar
>22168	PtrMemberAccess	dsq -> game
>22169	Identifier	game
>22170	Identifier	dsq
>22171	PrimaryExpression	\" blockSinging
>22172	PtrMemberAccess	dsq -> game -> avatar -> singing
>22173	Identifier	singing
>22174	PtrMemberAccess	dsq -> game -> avatar
>22175	Identifier	avatar
>22176	PtrMemberAccess	dsq -> game
>22177	Identifier	game
>22178	Identifier	dsq
>22179	PrimaryExpression	\"singing
>22180	Identifier	os
>22181	ExpressionStatement	 
>22182	ShiftExpression	os << \"qsongCastDelay
>22183	ShiftExpression	\"qsongCastDelay
>22184	ShiftExpression	avatar -> quickSongCastDelay << std 
>22185	Identifier	std 
>22186	PtrMemberAccess	avatar -> quickSongCastDelay
>22187	Identifier	quickSongCastDelay
>22188	Identifier	avatar
>22189	PrimaryExpression	\"qsongCastDelay
>22190	Identifier	os
>22191	ExpressionStatement	 
>22192	ShiftExpression	os << \"inCurrent
>22193	ShiftExpression	\"inCurrent
>22194	ShiftExpression	avatar -> isInCurrent ( ) << std 
>22195	Identifier	std 
>22196	CallExpression	avatar -> isInCurrent ( )
>22197	ArgumentList	 
>22198	Callee	avatar -> isInCurrent
>22199	PtrMemberAccess	avatar -> isInCurrent
>22200	Identifier	isInCurrent
>22201	Identifier	avatar
>22202	PrimaryExpression	\"inCurrent
>22203	Identifier	os
>22204	ExpressionStatement	 
>22205	ShiftExpression	os << \"burst
>22206	ShiftExpression	\"burst
>22207	ShiftExpression	avatar -> burst << \" burstTimer
>22208	ShiftExpression	\" burstTimer
>22209	ShiftExpression	avatar -> burstTimer << std 
>22210	Identifier	std 
>22211	PtrMemberAccess	avatar -> burstTimer
>22212	Identifier	burstTimer
>22213	Identifier	avatar
>22214	PrimaryExpression	\" burstTimer
>22215	PtrMemberAccess	avatar -> burst
>22216	Identifier	burst
>22217	Identifier	avatar
>22218	PrimaryExpression	\"burst
>22219	Identifier	os
>22220	ExpressionStatement	 
>22221	ShiftExpression	os << \"wallNormal(\" << avatar -> wallNormal . x << \", \" << avatar -> wallNormal . y << \") collradius
>22222	ShiftExpression	\"wallNormal(\" << avatar -> wallNormal . x << \", \" << avatar -> wallNormal . y << \") collradius
>22223	ShiftExpression	avatar -> wallNormal . x << \", \" << avatar -> wallNormal . y << \") collradius
>22224	ShiftExpression	\", \" << avatar -> wallNormal . y << \") collradius
>22225	ShiftExpression	avatar -> wallNormal . y << \") collradius
>22226	ShiftExpression	\") collradius
>22227	ShiftExpression	avatar -> collideRadius << std 
>22228	Identifier	std 
>22229	PtrMemberAccess	avatar -> collideRadius
>22230	Identifier	collideRadius
>22231	Identifier	avatar
>22232	PrimaryExpression	\") collradius
>22233	MemberAccess	avatar -> wallNormal . y
>22234	Identifier	y
>22235	PtrMemberAccess	avatar -> wallNormal
>22236	Identifier	wallNormal
>22237	Identifier	avatar
>22238	PrimaryExpression	\", \"
>22239	MemberAccess	avatar -> wallNormal . x
>22240	Identifier	x
>22241	PtrMemberAccess	avatar -> wallNormal
>22242	Identifier	wallNormal
>22243	Identifier	avatar
>22244	PrimaryExpression	\"wallNormal(\"
>22245	Identifier	os
>22246	ExpressionStatement	 
>22247	ShiftExpression	os << \"inp
>22248	ShiftExpression	\"inp
>22249	ShiftExpression	avatar -> isInputEnabled ( ) << std 
>22250	Identifier	std 
>22251	CallExpression	avatar -> isInputEnabled ( )
>22252	ArgumentList	 
>22253	Callee	avatar -> isInputEnabled
>22254	PtrMemberAccess	avatar -> isInputEnabled
>22255	Identifier	isInputEnabled
>22256	Identifier	avatar
>22257	PrimaryExpression	\"inp
>22258	Identifier	os
>22259	ExpressionStatement	 
>22260	ShiftExpression	os << \"p(\" << int ( avatar -> position . x ) << \", \" << int ( avatar -> position . y ) << \")\" << std 
>22261	ShiftExpression	\"p(\" << int ( avatar -> position . x ) << \", \" << int ( avatar -> position . y ) << \")\" << std 
>22262	ShiftExpression	int ( avatar -> position . x ) << \", \" << int ( avatar -> position . y ) << \")\" << std 
>22263	ShiftExpression	\", \" << int ( avatar -> position . y ) << \")\" << std 
>22264	ShiftExpression	int ( avatar -> position . y ) << \")\" << std 
>22265	ShiftExpression	\")\" << std 
>22266	Identifier	std 
>22267	PrimaryExpression	\")\"
>22268	CallExpression	int ( avatar -> position . y )
>22269	ArgumentList	avatar -> position . y
>22270	Argument	avatar -> position . y
>22271	MemberAccess	avatar -> position . y
>22272	Identifier	y
>22273	PtrMemberAccess	avatar -> position
>22274	Identifier	position
>22275	Identifier	avatar
>22276	Callee	int
>22277	Identifier	int
>22278	PrimaryExpression	\", \"
>22279	CallExpression	int ( avatar -> position . x )
>22280	ArgumentList	avatar -> position . x
>22281	Argument	avatar -> position . x
>22282	MemberAccess	avatar -> position . x
>22283	Identifier	x
>22284	PtrMemberAccess	avatar -> position
>22285	Identifier	position
>22286	Identifier	avatar
>22287	Callee	int
>22288	Identifier	int
>22289	PrimaryExpression	\"p(\"
>22290	Identifier	os
>22291	ExpressionStatement	 
>22292	ShiftExpression	os << \"rot
>22293	ShiftExpression	\"rot
>22294	ShiftExpression	avatar -> rotation . z << \" rotoff
>22295	ShiftExpression	\" rotoff
>22296	ShiftExpression	avatar -> rotationOffset . z << std 
>22297	Identifier	std 
>22298	MemberAccess	avatar -> rotationOffset . z
>22299	Identifier	z
>22300	PtrMemberAccess	avatar -> rotationOffset
>22301	Identifier	rotationOffset
>22302	Identifier	avatar
>22303	PrimaryExpression	\" rotoff
>22304	MemberAccess	avatar -> rotation . z
>22305	Identifier	z
>22306	PtrMemberAccess	avatar -> rotation
>22307	Identifier	rotation
>22308	Identifier	avatar
>22309	PrimaryExpression	\"rot
>22310	Identifier	os
>22311	ExpressionStatement	 
>22312	ShiftExpression	os << std 
>22313	Identifier	std 
>22314	Identifier	os
>22315	ExpressionStatement	 
>22316	ShiftExpression	os << \"vel2(\" << avatar -> vel2 . x << \", \" << avatar -> vel2 . y << \")\"
>22317	ShiftExpression	\"vel2(\" << avatar -> vel2 . x << \", \" << avatar -> vel2 . y << \")\"
>22318	ShiftExpression	avatar -> vel2 . x << \", \" << avatar -> vel2 . y << \")\"
>22319	ShiftExpression	\", \" << avatar -> vel2 . y << \")\"
>22320	ShiftExpression	avatar -> vel2 . y << \")\"
>22321	PrimaryExpression	\")\"
>22322	MemberAccess	avatar -> vel2 . y
>22323	Identifier	y
>22324	PtrMemberAccess	avatar -> vel2
>22325	Identifier	vel2
>22326	Identifier	avatar
>22327	PrimaryExpression	\", \"
>22328	MemberAccess	avatar -> vel2 . x
>22329	Identifier	x
>22330	PtrMemberAccess	avatar -> vel2
>22331	Identifier	vel2
>22332	Identifier	avatar
>22333	PrimaryExpression	\"vel2(\"
>22334	Identifier	os
>22335	ExpressionStatement	 
>22336	ShiftExpression	os << \"vel(\" << avatar -> vel . x << \", \" << avatar -> vel . y << \") \"
>22337	ShiftExpression	\"vel(\" << avatar -> vel . x << \", \" << avatar -> vel . y << \") \"
>22338	ShiftExpression	avatar -> vel . x << \", \" << avatar -> vel . y << \") \"
>22339	ShiftExpression	\", \" << avatar -> vel . y << \") \"
>22340	ShiftExpression	avatar -> vel . y << \") \"
>22341	PrimaryExpression	\") \"
>22342	MemberAccess	avatar -> vel . y
>22343	Identifier	y
>22344	PtrMemberAccess	avatar -> vel
>22345	Identifier	vel
>22346	Identifier	avatar
>22347	PrimaryExpression	\", \"
>22348	MemberAccess	avatar -> vel . x
>22349	Identifier	x
>22350	PtrMemberAccess	avatar -> vel
>22351	Identifier	vel
>22352	Identifier	avatar
>22353	PrimaryExpression	\"vel(\"
>22354	Identifier	os
>22355	ExpressionStatement	 
>22356	ShiftExpression	os << std 
>22357	Identifier	std 
>22358	Identifier	os
>22359	ExpressionStatement	 
>22360	ShiftExpression	os << \" dualFormCharge
>22361	ShiftExpression	\" dualFormCharge
>22362	MemberAccess	continuity . dualFormCharge
>22363	Identifier	dualFormCharge
>22364	Identifier	continuity
>22365	PrimaryExpression	\" dualFormCharge
>22366	Identifier	os
>22367	ExpressionStatement	 
>22368	ShiftExpression	os << \"swmng
>22369	ShiftExpression	\"swmng
>22370	CallExpression	avatar -> isSwimming ( )
>22371	ArgumentList	 
>22372	Callee	avatar -> isSwimming
>22373	PtrMemberAccess	avatar -> isSwimming
>22374	Identifier	isSwimming
>22375	Identifier	avatar
>22376	PrimaryExpression	\"swmng
>22377	Identifier	os
>22378	ExpressionStatement	 
>22379	ShiftExpression	os << std 
>22380	Identifier	std 
>22381	Identifier	os
>22382	ExpressionStatement	 
>22383	ShiftExpression	os << \"lockedToWall
>22384	ShiftExpression	\"lockedToWall
>22385	MemberAccess	dsq -> game -> avatar -> state . lockedToWall
>22386	Identifier	lockedToWall
>22387	PtrMemberAccess	dsq -> game -> avatar -> state
>22388	Identifier	state
>22389	PtrMemberAccess	dsq -> game -> avatar
>22390	Identifier	avatar
>22391	PtrMemberAccess	dsq -> game
>22392	Identifier	game
>22393	Identifier	dsq
>22394	PrimaryExpression	\"lockedToWall
>22395	Identifier	os
>22396	ExpressionStatement	 
>22397	ShiftExpression	os << \"maxSpeed
>22398	ShiftExpression	\"maxSpeed
>22399	ShiftExpression	dsq -> game -> avatar -> currentMaxSpeed << \" - \"
>22400	PrimaryExpression	\" - \"
>22401	PtrMemberAccess	dsq -> game -> avatar -> currentMaxSpeed
>22402	Identifier	currentMaxSpeed
>22403	PtrMemberAccess	dsq -> game -> avatar
>22404	Identifier	avatar
>22405	PtrMemberAccess	dsq -> game
>22406	Identifier	game
>22407	Identifier	dsq
>22408	PrimaryExpression	\"maxSpeed
>22409	Identifier	os
>22410	ExpressionStatement	 
>22411	ShiftExpression	os << \"hp
>22412	ShiftExpression	\"hp
>22413	ShiftExpression	dsq -> game -> avatar -> getHealthPerc ( ) << \" flourishPowerTimer
>22414	ShiftExpression	\" flourishPowerTimer
>22415	ShiftExpression	dsq -> game -> avatar -> flourishPowerTimer . getValue ( ) << std 
>22416	Identifier	std 
>22417	CallExpression	dsq -> game -> avatar -> flourishPowerTimer . getValue ( )
>22418	ArgumentList	 
>22419	Callee	dsq -> game -> avatar -> flourishPowerTimer . getValue
>22420	MemberAccess	dsq -> game -> avatar -> flourishPowerTimer . getValue
>22421	Identifier	getValue
>22422	PtrMemberAccess	dsq -> game -> avatar -> flourishPowerTimer
>22423	Identifier	flourishPowerTimer
>22424	PtrMemberAccess	dsq -> game -> avatar
>22425	Identifier	avatar
>22426	PtrMemberAccess	dsq -> game
>22427	Identifier	game
>22428	Identifier	dsq
>22429	PrimaryExpression	\" flourishPowerTimer
>22430	CallExpression	dsq -> game -> avatar -> getHealthPerc ( )
>22431	ArgumentList	 
>22432	Callee	dsq -> game -> avatar -> getHealthPerc
>22433	PtrMemberAccess	dsq -> game -> avatar -> getHealthPerc
>22434	Identifier	getHealthPerc
>22435	PtrMemberAccess	dsq -> game -> avatar
>22436	Identifier	avatar
>22437	PtrMemberAccess	dsq -> game
>22438	Identifier	game
>22439	Identifier	dsq
>22440	PrimaryExpression	\"hp
>22441	Identifier	os
>22442	ExpressionStatement	 
>22443	ShiftExpression	os << \"stillTimer
>22444	ShiftExpression	\"stillTimer
>22445	ShiftExpression	dsq -> game -> avatar -> stillTimer . getValue ( ) << std 
>22446	Identifier	std 
>22447	CallExpression	dsq -> game -> avatar -> stillTimer . getValue ( )
>22448	ArgumentList	 
>22449	Callee	dsq -> game -> avatar -> stillTimer . getValue
>22450	MemberAccess	dsq -> game -> avatar -> stillTimer . getValue
>22451	Identifier	getValue
>22452	PtrMemberAccess	dsq -> game -> avatar -> stillTimer
>22453	Identifier	stillTimer
>22454	PtrMemberAccess	dsq -> game -> avatar
>22455	Identifier	avatar
>22456	PtrMemberAccess	dsq -> game
>22457	Identifier	game
>22458	Identifier	dsq
>22459	PrimaryExpression	\"stillTimer
>22460	Identifier	os
>22461	ExpressionStatement	 
>22462	ShiftExpression	os << \"biteTimer
>22463	ShiftExpression	\"biteTimer
>22464	ShiftExpression	dsq -> game -> avatar -> biteTimer << \" flourTimer
>22465	ShiftExpression	\" flourTimer
>22466	ShiftExpression	dsq -> game -> avatar -> flourishTimer . getValue ( ) << std 
>22467	Identifier	std 
>22468	CallExpression	dsq -> game -> avatar -> flourishTimer . getValue ( )
>22469	ArgumentList	 
>22470	Callee	dsq -> game -> avatar -> flourishTimer . getValue
>22471	MemberAccess	dsq -> game -> avatar -> flourishTimer . getValue
>22472	Identifier	getValue
>22473	PtrMemberAccess	dsq -> game -> avatar -> flourishTimer
>22474	Identifier	flourishTimer
>22475	PtrMemberAccess	dsq -> game -> avatar
>22476	Identifier	avatar
>22477	PtrMemberAccess	dsq -> game
>22478	Identifier	game
>22479	Identifier	dsq
>22480	PrimaryExpression	\" flourTimer
>22481	PtrMemberAccess	dsq -> game -> avatar -> biteTimer
>22482	Identifier	biteTimer
>22483	PtrMemberAccess	dsq -> game -> avatar
>22484	Identifier	avatar
>22485	PtrMemberAccess	dsq -> game
>22486	Identifier	game
>22487	Identifier	dsq
>22488	PrimaryExpression	\"biteTimer
>22489	Identifier	os
>22490	ExpressionStatement	 
>22491	ShiftExpression	os << \"h
>22492	ShiftExpression	\"h
>22493	ShiftExpression	dsq -> game -> avatar -> health << \" / \" << dsq -> game -> avatar -> maxHealth << std 
>22494	ShiftExpression	\" / \" << dsq -> game -> avatar -> maxHealth << std 
>22495	ShiftExpression	dsq -> game -> avatar -> maxHealth << std 
>22496	Identifier	std 
>22497	PtrMemberAccess	dsq -> game -> avatar -> maxHealth
>22498	Identifier	maxHealth
>22499	PtrMemberAccess	dsq -> game -> avatar
>22500	Identifier	avatar
>22501	PtrMemberAccess	dsq -> game
>22502	Identifier	game
>22503	Identifier	dsq
>22504	PrimaryExpression	\" / \"
>22505	PtrMemberAccess	dsq -> game -> avatar -> health
>22506	Identifier	health
>22507	PtrMemberAccess	dsq -> game -> avatar
>22508	Identifier	avatar
>22509	PtrMemberAccess	dsq -> game
>22510	Identifier	game
>22511	Identifier	dsq
>22512	PrimaryExpression	\"h
>22513	Identifier	os
>22514	ExpressionStatement	 
>22515	ShiftExpression	os << \"canChangeForm
>22516	ShiftExpression	\"canChangeForm
>22517	ShiftExpression	dsq -> game -> avatar -> canChangeForm << \" gamespeed
>22518	ShiftExpression	\" gamespeed
>22519	ShiftExpression	gameSpeed . x << std 
>22520	Identifier	std 
>22521	MemberAccess	gameSpeed . x
>22522	Identifier	x
>22523	Identifier	gameSpeed
>22524	PrimaryExpression	\" gamespeed
>22525	PtrMemberAccess	dsq -> game -> avatar -> canChangeForm
>22526	Identifier	canChangeForm
>22527	PtrMemberAccess	dsq -> game -> avatar
>22528	Identifier	avatar
>22529	PtrMemberAccess	dsq -> game
>22530	Identifier	game
>22531	Identifier	dsq
>22532	PrimaryExpression	\"canChangeForm
>22533	Identifier	os
>22534	ExpressionStatement	 
>22535	ShiftExpression	os << \"rolling
>22536	ShiftExpression	\"rolling
>22537	ShiftExpression	dsq -> game -> avatar -> isRolling ( ) << \" rollDelay
>22538	ShiftExpression	\" rollDelay
>22539	ShiftExpression	dsq -> game -> avatar -> rollDelay << std 
>22540	Identifier	std 
>22541	PtrMemberAccess	dsq -> game -> avatar -> rollDelay
>22542	Identifier	rollDelay
>22543	PtrMemberAccess	dsq -> game -> avatar
>22544	Identifier	avatar
>22545	PtrMemberAccess	dsq -> game
>22546	Identifier	game
>22547	Identifier	dsq
>22548	PrimaryExpression	\" rollDelay
>22549	CallExpression	dsq -> game -> avatar -> isRolling ( )
>22550	ArgumentList	 
>22551	Callee	dsq -> game -> avatar -> isRolling
>22552	PtrMemberAccess	dsq -> game -> avatar -> isRolling
>22553	Identifier	isRolling
>22554	PtrMemberAccess	dsq -> game -> avatar
>22555	Identifier	avatar
>22556	PtrMemberAccess	dsq -> game
>22557	Identifier	game
>22558	Identifier	dsq
>22559	PrimaryExpression	\"rolling
>22560	Identifier	os
>22561	IdentifierDeclStatement	 
>22562	IdentifierDecl	* avatar = dsq -> game -> avatar
>22563	AssignmentExpr	* avatar = dsq -> game -> avatar
>22564	PtrMemberAccess	dsq -> game -> avatar
>22565	Identifier	avatar
>22566	PtrMemberAccess	dsq -> game
>22567	Identifier	game
>22568	Identifier	dsq
>22569	Identifier	avatar
>22570	Identifier	avatar
>22571	IdentifierDeclType	Avatar *
>22572	Condition	 
>22573	PtrMemberAccess	dsq -> game -> avatar
>22574	Identifier	avatar
>22575	PtrMemberAccess	dsq -> game
>22576	Identifier	game
>22577	Identifier	dsq
>22578	IdentifierDeclStatement	 
>22579	IdentifierDecl	os
>22580	Identifier	os
>22581	IdentifierDeclType	std 
>22582	Condition	 
>22583	AndExpression	isDeveloperKeys ( ) && cmDebug && cmDebug -> alpha == 1 && fpsText
>22584	AndExpression	cmDebug && cmDebug -> alpha == 1 && fpsText
>22585	AndExpression	cmDebug -> alpha == 1 && fpsText
>22586	Identifier	fpsText
>22587	EqualityExpression	cmDebug -> alpha == 1
>22588	PrimaryExpression	1
>22589	PtrMemberAccess	cmDebug -> alpha
>22590	Identifier	alpha
>22591	Identifier	cmDebug
>22592	Identifier	cmDebug
>22593	CallExpression	isDeveloperKeys ( )
>22594	ArgumentList	 
>22595	Callee	isDeveloperKeys
>22596	Identifier	isDeveloperKeys
>22597	IfStatement	if ( dsq -> inputMode == INPUT_KEYBOARD && ( core -> getMouseButtonState ( cb ) ) )
>22598	CompoundStatement	 
>22599	ExpressionStatement	 
>22600	CallExpression	dsq -> setInputMode ( INPUT_MOUSE )
>22601	ArgumentList	INPUT_MOUSE
>22602	Argument	INPUT_MOUSE
>22603	Identifier	INPUT_MOUSE
>22604	Callee	dsq -> setInputMode
>22605	PtrMemberAccess	dsq -> setInputMode
>22606	Identifier	setInputMode
>22607	Identifier	dsq
>22608	Condition	 
>22609	AndExpression	dsq -> inputMode == INPUT_KEYBOARD && ( core -> getMouseButtonState ( cb ) )
>22610	CallExpression	core -> getMouseButtonState ( cb )
>22611	ArgumentList	cb
>22612	Argument	cb
>22613	Identifier	cb
>22614	Callee	core -> getMouseButtonState
>22615	PtrMemberAccess	core -> getMouseButtonState
>22616	Identifier	getMouseButtonState
>22617	Identifier	core
>22618	EqualityExpression	dsq -> inputMode == INPUT_KEYBOARD
>22619	Identifier	INPUT_KEYBOARD
>22620	PtrMemberAccess	dsq -> inputMode
>22621	Identifier	inputMode
>22622	Identifier	dsq
>22623	IfStatement	if ( user . control . flipInputButtons )
>22624	ExpressionStatement	 
>22625	AssignmentExpr	cb = 1
>22626	PrimaryExpression	1
>22627	Identifier	cb
>22628	Condition	 
>22629	MemberAccess	user . control . flipInputButtons
>22630	Identifier	flipInputButtons
>22631	MemberAccess	user . control
>22632	Identifier	control
>22633	Identifier	user
>22634	IdentifierDeclStatement	 
>22635	IdentifierDecl	cb = 0
>22636	AssignmentExpr	cb = 0
>22637	PrimaryExpression	0
>22638	Identifier	cb
>22639	Identifier	cb
>22640	IdentifierDeclType	int
>22641	IfStatement	if ( dsq -> game -> avatar )
>22642	CompoundStatement	 
>22643	IfStatement	if ( dsq -> game -> avatar -> isActing ( ACTION_SWIMUP ) || dsq -> game -> avatar -> isActing ( ACTION_SWIMDOWN ) || \
>22644	CompoundStatement	 
>22645	ExpressionStatement	 
>22646	CallExpression	dsq -> setInputMode ( INPUT_KEYBOARD )
>22647	ArgumentList	INPUT_KEYBOARD
>22648	Argument	INPUT_KEYBOARD
>22649	Identifier	INPUT_KEYBOARD
>22650	Callee	dsq -> setInputMode
>22651	PtrMemberAccess	dsq -> setInputMode
>22652	Identifier	setInputMode
>22653	Identifier	dsq
>22654	Condition	 
>22655	OrExpression	dsq -> game -> avatar -> isActing ( ACTION_SWIMUP ) || dsq -> game -> avatar -> isActing ( ACTION_SWIMDOWN ) || \
>22656	OrExpression	dsq -> game -> avatar -> isActing ( ACTION_SWIMDOWN ) || dsq -> game -> avatar -> isActing ( ACTION_\
>22657	OrExpression	dsq -> game -> avatar -> isActing ( ACTION_SWIMLEFT ) || dsq -> game -> avatar -> isActing ( ACTION_\
>22658	CallExpression	dsq -> game -> avatar -> isActing ( ACTION_SWIMRIGHT )
>22659	ArgumentList	ACTION_SWIMRIGHT
>22660	Argument	ACTION_SWIMRIGHT
>22661	Identifier	ACTION_SWIMRIGHT
>22662	Callee	dsq -> game -> avatar -> isActing
>22663	PtrMemberAccess	dsq -> game -> avatar -> isActing
>22664	Identifier	isActing
>22665	PtrMemberAccess	dsq -> game -> avatar
>22666	Identifier	avatar
>22667	PtrMemberAccess	dsq -> game
>22668	Identifier	game
>22669	Identifier	dsq
>22670	CallExpression	dsq -> game -> avatar -> isActing ( ACTION_SWIMLEFT )
>22671	ArgumentList	ACTION_SWIMLEFT
>22672	Argument	ACTION_SWIMLEFT
>22673	Identifier	ACTION_SWIMLEFT
>22674	Callee	dsq -> game -> avatar -> isActing
>22675	PtrMemberAccess	dsq -> game -> avatar -> isActing
>22676	Identifier	isActing
>22677	PtrMemberAccess	dsq -> game -> avatar
>22678	Identifier	avatar
>22679	PtrMemberAccess	dsq -> game
>22680	Identifier	game
>22681	Identifier	dsq
>22682	CallExpression	dsq -> game -> avatar -> isActing ( ACTION_SWIMDOWN )
>22683	ArgumentList	ACTION_SWIMDOWN
>22684	Argument	ACTION_SWIMDOWN
>22685	Identifier	ACTION_SWIMDOWN
>22686	Callee	dsq -> game -> avatar -> isActing
>22687	PtrMemberAccess	dsq -> game -> avatar -> isActing
>22688	Identifier	isActing
>22689	PtrMemberAccess	dsq -> game -> avatar
>22690	Identifier	avatar
>22691	PtrMemberAccess	dsq -> game
>22692	Identifier	game
>22693	Identifier	dsq
>22694	CallExpression	dsq -> game -> avatar -> isActing ( ACTION_SWIMUP )
>22695	ArgumentList	ACTION_SWIMUP
>22696	Argument	ACTION_SWIMUP
>22697	Identifier	ACTION_SWIMUP
>22698	Callee	dsq -> game -> avatar -> isActing
>22699	PtrMemberAccess	dsq -> game -> avatar -> isActing
>22700	Identifier	isActing
>22701	PtrMemberAccess	dsq -> game -> avatar
>22702	Identifier	avatar
>22703	PtrMemberAccess	dsq -> game
>22704	Identifier	game
>22705	Identifier	dsq
>22706	Condition	 
>22707	PtrMemberAccess	dsq -> game -> avatar
>22708	Identifier	avatar
>22709	PtrMemberAccess	dsq -> game
>22710	Identifier	game
>22711	Identifier	dsq
>22712	IfStatement	if ( joystickEnabled )
>22713	CompoundStatement	 
>22714	CompoundStatement	 
>22715	IfStatement	if ( dsq -> inputMode != INPUT_JOYSTICK )
>22716	ElseStatement	else
>22717	IfStatement	if ( dsq -> inputMode != INPUT_MOUSE )
>22718	CompoundStatement	 
>22719	IfStatement	if ( ( ! core -> mouse . change . isLength2DIn ( 5 ) || ( core -> getMouseButtonState ( 0 ) || core -> getMouseButtonState ( \
>22720	CompoundStatement	 
>22721	ExpressionStatement	 
>22722	CallExpression	dsq -> setInputMode ( INPUT_MOUSE )
>22723	ArgumentList	INPUT_MOUSE
>22724	Argument	INPUT_MOUSE
>22725	Identifier	INPUT_MOUSE
>22726	Callee	dsq -> setInputMode
>22727	PtrMemberAccess	dsq -> setInputMode
>22728	Identifier	setInputMode
>22729	Identifier	dsq
>22730	Condition	 
>22731	AndExpression	( ! core -> mouse . change . isLength2DIn ( 5 ) || ( core -> getMouseButtonState ( 0 ) || core -> getMouseButtonState ( \
>22732	UnaryOp	! core -> joystick . anyButton ( )
>22733	CallExpression	core -> joystick . anyButton ( )
>22734	ArgumentList	 
>22735	Callee	core -> joystick . anyButton
>22736	MemberAccess	core -> joystick . anyButton
>22737	Identifier	anyButton
>22738	PtrMemberAccess	core -> joystick
>22739	Identifier	joystick
>22740	Identifier	core
>22741	UnaryOperator	!
>22742	OrExpression	! core -> mouse . change . isLength2DIn ( 5 ) || ( core -> getMouseButtonState ( 0 ) || core -> getMouseButtonState ( \
>22743	OrExpression	core -> getMouseButtonState ( 0 ) || core -> getMouseButtonState ( 1 )
>22744	CallExpression	core -> getMouseButtonState ( 1 )
>22745	ArgumentList	1
>22746	Argument	1
>22747	PrimaryExpression	1
>22748	Callee	core -> getMouseButtonState
>22749	PtrMemberAccess	core -> getMouseButtonState
>22750	Identifier	getMouseButtonState
>22751	Identifier	core
>22752	CallExpression	core -> getMouseButtonState ( 0 )
>22753	ArgumentList	0
>22754	Argument	0
>22755	PrimaryExpression	0
>22756	Callee	core -> getMouseButtonState
>22757	PtrMemberAccess	core -> getMouseButtonState
>22758	Identifier	getMouseButtonState
>22759	Identifier	core
>22760	UnaryOp	! core -> mouse . change . isLength2DIn ( 5 )
>22761	CallExpression	core -> mouse . change . isLength2DIn ( 5 )
>22762	ArgumentList	5
>22763	Argument	5
>22764	PrimaryExpression	5
>22765	Callee	core -> mouse . change . isLength2DIn
>22766	MemberAccess	core -> mouse . change . isLength2DIn
>22767	Identifier	isLength2DIn
>22768	MemberAccess	core -> mouse . change
>22769	Identifier	change
>22770	PtrMemberAccess	core -> mouse
>22771	Identifier	mouse
>22772	Identifier	core
>22773	UnaryOperator	!
>22774	Condition	 
>22775	EqualityExpression	dsq -> inputMode != INPUT_MOUSE
>22776	Identifier	INPUT_MOUSE
>22777	PtrMemberAccess	dsq -> inputMode
>22778	Identifier	inputMode
>22779	Identifier	dsq
>22780	CompoundStatement	 
>22781	IfStatement	if ( core -> joystick . anyButton ( ) || ! core -> joystick . position . isLength2DIn ( thresh ) || ! core -> joystick \
>22782	CompoundStatement	 
>22783	ExpressionStatement	 
>22784	CallExpression	dsq -> setInputMode ( INPUT_JOYSTICK )
>22785	ArgumentList	INPUT_JOYSTICK
>22786	Argument	INPUT_JOYSTICK
>22787	Identifier	INPUT_JOYSTICK
>22788	Callee	dsq -> setInputMode
>22789	PtrMemberAccess	dsq -> setInputMode
>22790	Identifier	setInputMode
>22791	Identifier	dsq
>22792	Condition	 
>22793	OrExpression	core -> joystick . anyButton ( ) || ! core -> joystick . position . isLength2DIn ( thresh ) || ! core \
>22794	OrExpression	! core -> joystick . position . isLength2DIn ( thresh ) || ! core -> joystick . rightStick . isLength2DIn ( \
>22795	UnaryOp	! core -> joystick . rightStick . isLength2DIn ( thresh )
>22796	CallExpression	core -> joystick . rightStick . isLength2DIn ( thresh )
>22797	ArgumentList	thresh
>22798	Argument	thresh
>22799	Identifier	thresh
>22800	Callee	core -> joystick . rightStick . isLength2DIn
>22801	MemberAccess	core -> joystick . rightStick . isLength2DIn
>22802	Identifier	isLength2DIn
>22803	MemberAccess	core -> joystick . rightStick
>22804	Identifier	rightStick
>22805	PtrMemberAccess	core -> joystick
>22806	Identifier	joystick
>22807	Identifier	core
>22808	UnaryOperator	!
>22809	UnaryOp	! core -> joystick . position . isLength2DIn ( thresh )
>22810	CallExpression	core -> joystick . position . isLength2DIn ( thresh )
>22811	ArgumentList	thresh
>22812	Argument	thresh
>22813	Identifier	thresh
>22814	Callee	core -> joystick . position . isLength2DIn
>22815	MemberAccess	core -> joystick . position . isLength2DIn
>22816	Identifier	isLength2DIn
>22817	MemberAccess	core -> joystick . position
>22818	Identifier	position
>22819	PtrMemberAccess	core -> joystick
>22820	Identifier	joystick
>22821	Identifier	core
>22822	UnaryOperator	!
>22823	CallExpression	core -> joystick . anyButton ( )
>22824	ArgumentList	 
>22825	Callee	core -> joystick . anyButton
>22826	MemberAccess	core -> joystick . anyButton
>22827	Identifier	anyButton
>22828	PtrMemberAccess	core -> joystick
>22829	Identifier	joystick
>22830	Identifier	core
>22831	IdentifierDeclStatement	 
>22832	IdentifierDecl	thresh = 0.6
>22833	AssignmentExpr	thresh = 0.6
>22834	PrimaryExpression	0.6
>22835	Identifier	thresh
>22836	Identifier	thresh
>22837	IdentifierDeclType	const float
>22838	Condition	 
>22839	EqualityExpression	dsq -> inputMode != INPUT_JOYSTICK
>22840	Identifier	INPUT_JOYSTICK
>22841	PtrMemberAccess	dsq -> inputMode
>22842	Identifier	inputMode
>22843	Identifier	dsq
>22844	Condition	 
>22845	Identifier	joystickEnabled
>22846	IfStatement	if ( joystickAsMouse )
>22847	CompoundStatement	 
>22848	IfStatement	if ( ! mouse . buttons . middle )
>22849	CompoundStatement	 
>22850	IfStatement	if ( joystick . rightThumb )
>22851	ElseStatement	else
>22852	IfStatement	if ( joystick . leftThumb )
>22853	ExpressionStatement	 
>22854	AssignmentExpr	mouse . buttons . middle = DOWN
>22855	Identifier	DOWN
>22856	MemberAccess	mouse . buttons . middle
>22857	Identifier	middle
>22858	MemberAccess	mouse . buttons
>22859	Identifier	buttons
>22860	Identifier	mouse
>22861	Condition	 
>22862	MemberAccess	joystick . leftThumb
>22863	Identifier	leftThumb
>22864	Identifier	joystick
>22865	ExpressionStatement	 
>22866	AssignmentExpr	mouse . buttons . middle = DOWN
>22867	Identifier	DOWN
>22868	MemberAccess	mouse . buttons . middle
>22869	Identifier	middle
>22870	MemberAccess	mouse . buttons
>22871	Identifier	buttons
>22872	Identifier	mouse
>22873	Condition	 
>22874	MemberAccess	joystick . rightThumb
>22875	Identifier	rightThumb
>22876	Identifier	joystick
>22877	Condition	 
>22878	UnaryOp	! mouse . buttons . middle
>22879	MemberAccess	mouse . buttons . middle
>22880	Identifier	middle
>22881	MemberAccess	mouse . buttons
>22882	Identifier	buttons
>22883	Identifier	mouse
>22884	UnaryOperator	!
>22885	IfStatement	if ( armb && ActionMapper 
>22886	ExpressionStatement	 
>22887	AssignmentExpr	mouse . buttons . right = DOWN
>22888	Identifier	DOWN
>22889	MemberAccess	mouse . buttons . right
>22890	Identifier	right
>22891	MemberAccess	mouse . buttons
>22892	Identifier	buttons
>22893	Identifier	mouse
>22894	Condition	 
>22895	AndExpression	armb && ActionMapper 
>22896	CallExpression	ActionMapper 
>22897	ArgumentList	armb -> joy [ 0 ]
>22898	Argument	armb -> joy [ 0 ]
>22899	ArrayIndexing	armb -> joy [ 0 ]
>22900	PrimaryExpression	0
>22901	PtrMemberAccess	armb -> joy
>22902	Identifier	joy
>22903	Identifier	armb
>22904	Callee	ActionMapper 
>22905	Identifier	ActionMapper 
>22906	Identifier	armb
>22907	IfStatement	if ( almb && ActionMapper 
>22908	ExpressionStatement	 
>22909	AssignmentExpr	mouse . buttons . left = DOWN
>22910	Identifier	DOWN
>22911	MemberAccess	mouse . buttons . left
>22912	Identifier	left
>22913	MemberAccess	mouse . buttons
>22914	Identifier	buttons
>22915	Identifier	mouse
>22916	Condition	 
>22917	AndExpression	almb && ActionMapper 
>22918	CallExpression	ActionMapper 
>22919	ArgumentList	almb -> joy [ 0 ]
>22920	Argument	almb -> joy [ 0 ]
>22921	ArrayIndexing	almb -> joy [ 0 ]
>22922	PrimaryExpression	0
>22923	PtrMemberAccess	almb -> joy
>22924	Identifier	joy
>22925	Identifier	almb
>22926	Callee	ActionMapper 
>22927	Identifier	ActionMapper 
>22928	Identifier	almb
>22929	Condition	 
>22930	Identifier	joystickAsMouse
>22931	IfStatement	if ( inputMode != INPUT_KEYBOARD && game -> isActive ( ) )
>22932	CompoundStatement	 
>22933	IfStatement	if ( armb && ( ActionMapper 
>22934	ExpressionStatement	 
>22935	AssignmentExpr	mouse . buttons . right = DOWN
>22936	Identifier	DOWN
>22937	MemberAccess	mouse . buttons . right
>22938	Identifier	right
>22939	MemberAccess	mouse . buttons
>22940	Identifier	buttons
>22941	Identifier	mouse
>22942	Condition	 
>22943	AndExpression	armb && ( ActionMapper 
>22944	OrExpression	ActionMapper 
>22945	CallExpression	ActionMapper 
>22946	ArgumentList	armb -> key [ 1 ]
>22947	Argument	armb -> key [ 1 ]
>22948	ArrayIndexing	armb -> key [ 1 ]
>22949	PrimaryExpression	1
>22950	PtrMemberAccess	armb -> key
>22951	Identifier	key
>22952	Identifier	armb
>22953	Callee	ActionMapper 
>22954	Identifier	ActionMapper 
>22955	CallExpression	ActionMapper 
>22956	ArgumentList	armb -> key [ 0 ]
>22957	Argument	armb -> key [ 0 ]
>22958	ArrayIndexing	armb -> key [ 0 ]
>22959	PrimaryExpression	0
>22960	PtrMemberAccess	armb -> key
>22961	Identifier	key
>22962	Identifier	armb
>22963	Callee	ActionMapper 
>22964	Identifier	ActionMapper 
>22965	Identifier	armb
>22966	IfStatement	if ( almb && ( ActionMapper 
>22967	ExpressionStatement	 
>22968	AssignmentExpr	mouse . buttons . left = DOWN
>22969	Identifier	DOWN
>22970	MemberAccess	mouse . buttons . left
>22971	Identifier	left
>22972	MemberAccess	mouse . buttons
>22973	Identifier	buttons
>22974	Identifier	mouse
>22975	Condition	 
>22976	AndExpression	almb && ( ActionMapper 
>22977	OrExpression	ActionMapper 
>22978	CallExpression	ActionMapper 
>22979	ArgumentList	almb -> key [ 1 ]
>22980	Argument	almb -> key [ 1 ]
>22981	ArrayIndexing	almb -> key [ 1 ]
>22982	PrimaryExpression	1
>22983	PtrMemberAccess	almb -> key
>22984	Identifier	key
>22985	Identifier	almb
>22986	Callee	ActionMapper 
>22987	Identifier	ActionMapper 
>22988	CallExpression	ActionMapper 
>22989	ArgumentList	almb -> key [ 0 ]
>22990	Argument	almb -> key [ 0 ]
>22991	ArrayIndexing	almb -> key [ 0 ]
>22992	PrimaryExpression	0
>22993	PtrMemberAccess	almb -> key
>22994	Identifier	key
>22995	Identifier	almb
>22996	Callee	ActionMapper 
>22997	Identifier	ActionMapper 
>22998	Identifier	almb
>22999	Condition	 
>23000	AndExpression	inputMode != INPUT_KEYBOARD && game -> isActive ( )
>23001	CallExpression	game -> isActive ( )
>23002	ArgumentList	 
>23003	Callee	game -> isActive
>23004	PtrMemberAccess	game -> isActive
>23005	Identifier	isActive
>23006	Identifier	game
>23007	EqualityExpression	inputMode != INPUT_KEYBOARD
>23008	Identifier	INPUT_KEYBOARD
>23009	Identifier	inputMode
>23010	ExpressionStatement	 
>23011	CallExpression	demo . update ( dt )
>23012	ArgumentList	dt
>23013	Argument	dt
>23014	Identifier	dt
>23015	Callee	demo . update
>23016	MemberAccess	demo . update
>23017	Identifier	update
>23018	Identifier	demo
>23019	ExpressionStatement	 
>23020	CallExpression	Core 
>23021	ArgumentList	dt
>23022	Argument	dt
>23023	Identifier	dt
>23024	Callee	Core 
>23025	Identifier	Core 
>23026	ExpressionStatement	 
>23027	CallExpression	subtitlePlayer . update ( dt )
>23028	ArgumentList	dt
>23029	Argument	dt
>23030	Identifier	dt
>23031	Callee	subtitlePlayer . update
>23032	MemberAccess	subtitlePlayer . update
>23033	Identifier	update
>23034	Identifier	subtitlePlayer
>23035	IfStatement	if ( noEffectTimer > 0 )
>23036	CompoundStatement	 
>23037	IfStatement	if ( noEffectTimer < 0 )
>23038	ExpressionStatement	 
>23039	AssignmentExpr	noEffectTimer = 0
>23040	PrimaryExpression	0
>23041	Identifier	noEffectTimer
>23042	Condition	 
>23043	RelationalExpression	noEffectTimer < 0
>23044	PrimaryExpression	0
>23045	Identifier	noEffectTimer
>23046	ExpressionStatement	 
>23047	AssignmentExpr	noEffectTimer -= dt
>23048	Identifier	dt
>23049	Identifier	noEffectTimer
>23050	Condition	 
>23051	RelationalExpression	noEffectTimer > 0
>23052	PrimaryExpression	0
>23053	Identifier	noEffectTimer
>23054	IfStatement	if ( menuSelectDelay > 0 )
>23055	CompoundStatement	 
>23056	IfStatement	if ( menuSelectDelay <= 0 )
>23057	CompoundStatement	 
>23058	ExpressionStatement	 
>23059	AssignmentExpr	menuSelectDelay = 0
>23060	PrimaryExpression	0
>23061	Identifier	menuSelectDelay
>23062	Condition	 
>23063	RelationalExpression	menuSelectDelay <= 0
>23064	PrimaryExpression	0
>23065	Identifier	menuSelectDelay
>23066	ExpressionStatement	 
>23067	AssignmentExpr	menuSelectDelay -= dt
>23068	Identifier	dt
>23069	Identifier	menuSelectDelay
>23070	Condition	 
>23071	RelationalExpression	menuSelectDelay > 0
>23072	PrimaryExpression	0
>23073	Identifier	menuSelectDelay
>23074	IfStatement	if ( versionLabel && versionLabel -> alpha . x > 0 )
>23075	CompoundStatement	 
>23076	ExpressionStatement	 
>23077	AssignmentExpr	versionLabel -> position = Vector ( 10 - core -> getVirtualOffX ( ) , 575 )
>23078	CallExpression	Vector ( 10 - core -> getVirtualOffX ( ) , 575 )
>23079	ArgumentList	10 - core -> getVirtualOffX ( )
>23080	Argument	575
>23081	PrimaryExpression	575
>23082	Argument	10 - core -> getVirtualOffX ( )
>23083	AdditiveExpression	10 - core -> getVirtualOffX ( )
>23084	CallExpression	core -> getVirtualOffX ( )
>23085	ArgumentList	 
>23086	Callee	core -> getVirtualOffX
>23087	PtrMemberAccess	core -> getVirtualOffX
>23088	Identifier	getVirtualOffX
>23089	Identifier	core
>23090	PrimaryExpression	10
>23091	Callee	Vector
>23092	Identifier	Vector
>23093	PtrMemberAccess	versionLabel -> position
>23094	Identifier	position
>23095	Identifier	versionLabel
>23096	Condition	 
>23097	AndExpression	versionLabel && versionLabel -> alpha . x > 0
>23098	RelationalExpression	versionLabel -> alpha . x > 0
>23099	PrimaryExpression	0
>23100	MemberAccess	versionLabel -> alpha . x
>23101	Identifier	x
>23102	PtrMemberAccess	versionLabel -> alpha
>23103	Identifier	alpha
>23104	Identifier	versionLabel
>23105	Identifier	versionLabel
>23106	IfStatement	if ( dsq -> game && watchForQuit && isNested ( ) )
>23107	CompoundStatement	 
>23108	IfStatement	if ( dsq -> game -> isActing ( ACTION_ESC ) )
>23109	CompoundStatement	 
>23110	ExpressionStatement	 
>23111	CallExpression	quitNestedMain ( )
>23112	ArgumentList	 
>23113	Callee	quitNestedMain
>23114	Identifier	quitNestedMain
>23115	ExpressionStatement	 
>23116	AssignmentExpr	watchQuitFlag = true
>23117	Identifier	true
>23118	Identifier	watchQuitFlag
>23119	Condition	 
>23120	CallExpression	dsq -> game -> isActing ( ACTION_ESC )
>23121	ArgumentList	ACTION_ESC
>23122	Argument	ACTION_ESC
>23123	Identifier	ACTION_ESC
>23124	Callee	dsq -> game -> isActing
>23125	PtrMemberAccess	dsq -> game -> isActing
>23126	Identifier	isActing
>23127	PtrMemberAccess	dsq -> game
>23128	Identifier	game
>23129	Identifier	dsq
>23130	Condition	 
>23131	AndExpression	dsq -> game && watchForQuit && isNested ( )
>23132	AndExpression	watchForQuit && isNested ( )
>23133	CallExpression	isNested ( )
>23134	ArgumentList	 
>23135	Callee	isNested
>23136	Identifier	isNested
>23137	Identifier	watchForQuit
>23138	PtrMemberAccess	dsq -> game
>23139	Identifier	game
>23140	Identifier	dsq
>23141	ExpressionStatement	 
>23142	CallExpression	lockMouse ( )
>23143	ArgumentList	 
>23144	Callee	lockMouse
>23145	Identifier	lockMouse
>23146	ExpressionStatement	 
>23147	CallExpression	mod . update ( dt )
>23148	ArgumentList	dt
>23149	Argument	dt
>23150	Identifier	dt
>23151	Callee	mod . update
>23152	MemberAccess	mod . update
>23153	Identifier	update
>23154	Identifier	mod
>23155	IfStatement	if ( isSkippingCutscene ( ) )
>23156	ElseStatement	else
>23157	CompoundStatement	 
>23158	IfStatement	if ( isCutscenePaused ( ) )
>23159	CompoundStatement	 
>23160	ExpressionStatement	 
>23161	CallExpression	dsq -> sound -> resume ( )
>23162	ArgumentList	 
>23163	Callee	dsq -> sound -> resume
>23164	PtrMemberAccess	dsq -> sound -> resume
>23165	Identifier	resume
>23166	PtrMemberAccess	dsq -> sound
>23167	Identifier	sound
>23168	Identifier	dsq
>23169	ExpressionStatement	 
>23170	CallExpression	dsq -> resetTimer ( )
>23171	ArgumentList	 
>23172	Callee	dsq -> resetTimer
>23173	PtrMemberAccess	dsq -> resetTimer
>23174	Identifier	resetTimer
>23175	Identifier	dsq
>23176	WhileStatement	while ( isCutscenePaused ( ) )
>23177	CompoundStatement	 
>23178	IfStatement	if ( _canSkipCutscene && core -> getKeyState ( KEY_S ) )
>23179	CompoundStatement	 
>23180	ReturnStatement	 
>23181	ExpressionStatement	 
>23182	CallExpression	sound -> resume ( )
>23183	ArgumentList	 
>23184	Callee	sound -> resume
>23185	PtrMemberAccess	sound -> resume
>23186	Identifier	resume
>23187	Identifier	sound
>23188	ExpressionStatement	 
>23189	CallExpression	resetTimer ( )
>23190	ArgumentList	 
>23191	Callee	resetTimer
>23192	Identifier	resetTimer
>23193	ExpressionStatement	 
>23194	CallExpression	sound -> setSfxVolume ( 0.0 )
>23195	ArgumentList	0.0
>23196	Argument	0.0
>23197	PrimaryExpression	0.0
>23198	Callee	sound -> setSfxVolume
>23199	PtrMemberAccess	sound -> setSfxVolume
>23200	Identifier	setSfxVolume
>23201	Identifier	sound
>23202	ExpressionStatement	 
>23203	AssignmentExpr	skipSfxVol = sound -> getSfxVol ( )
>23204	CallExpression	sound -> getSfxVol ( )
>23205	ArgumentList	 
>23206	Callee	sound -> getSfxVol
>23207	PtrMemberAccess	sound -> getSfxVol
>23208	Identifier	getSfxVol
>23209	Identifier	sound
>23210	Identifier	skipSfxVol
>23211	ExpressionStatement	 
>23212	AssignmentExpr	settings . renderOn = false
>23213	Identifier	false
>23214	MemberAccess	settings . renderOn
>23215	Identifier	renderOn
>23216	Identifier	settings
>23217	ExpressionStatement	 
>23218	AssignmentExpr	skippingCutscene = true
>23219	Identifier	true
>23220	Identifier	skippingCutscene
>23221	Condition	 
>23222	AndExpression	_canSkipCutscene && core -> getKeyState ( KEY_S )
>23223	CallExpression	core -> getKeyState ( KEY_S )
>23224	ArgumentList	KEY_S
>23225	Argument	KEY_S
>23226	Identifier	KEY_S
>23227	Callee	core -> getKeyState
>23228	PtrMemberAccess	core -> getKeyState
>23229	Identifier	getKeyState
>23230	Identifier	core
>23231	Identifier	_canSkipCutscene
>23232	ExpressionStatement	 
>23233	CallExpression	resetTimer ( )
>23234	ArgumentList	 
>23235	Callee	resetTimer
>23236	Identifier	resetTimer
>23237	ExpressionStatement	 
>23238	CallExpression	showBuffer ( )
>23239	ArgumentList	 
>23240	Callee	showBuffer
>23241	Identifier	showBuffer
>23242	ExpressionStatement	 
>23243	CallExpression	render ( )
>23244	ArgumentList	 
>23245	Callee	render
>23246	Identifier	render
>23247	ExpressionStatement	 
>23248	CallExpression	SDL_Delay ( int ( sec * 1000 ) )
>23249	ArgumentList	int ( sec * 1000 )
>23250	Argument	int ( sec * 1000 )
>23251	CallExpression	int ( sec * 1000 )
>23252	ArgumentList	sec * 1000
>23253	Argument	sec * 1000
>23254	MultiplicativeExpression	sec * 1000
>23255	PrimaryExpression	1000
>23256	Identifier	sec
>23257	Callee	int
>23258	Identifier	int
>23259	Callee	SDL_Delay
>23260	Identifier	SDL_Delay
>23261	ExpressionStatement	 
>23262	CallExpression	ActionMapper 
>23263	ArgumentList	sec
>23264	Argument	sec
>23265	Identifier	sec
>23266	Callee	ActionMapper 
>23267	Identifier	ActionMapper 
>23268	ExpressionStatement	 
>23269	CallExpression	pollEvents ( )
>23270	ArgumentList	 
>23271	Callee	pollEvents
>23272	Identifier	pollEvents
>23273	Condition	 
>23274	CallExpression	isCutscenePaused ( )
>23275	ArgumentList	 
>23276	Callee	isCutscenePaused
>23277	Identifier	isCutscenePaused
>23278	IdentifierDeclStatement	 
>23279	IdentifierDecl	sec = 1.0f / 60.0f
>23280	AssignmentExpr	sec = 1.0f / 60.0f
>23281	MultiplicativeExpression	1.0f / 60.0f
>23282	PrimaryExpression	60.0f
>23283	PrimaryExpression	1.0f
>23284	Identifier	sec
>23285	Identifier	sec
>23286	IdentifierDeclType	float
>23287	ExpressionStatement	 
>23288	CallExpression	sound -> pause ( )
>23289	ArgumentList	 
>23290	Callee	sound -> pause
>23291	PtrMemberAccess	sound -> pause
>23292	Identifier	pause
>23293	Identifier	sound
>23294	Condition	 
>23295	CallExpression	isCutscenePaused ( )
>23296	ArgumentList	 
>23297	Callee	isCutscenePaused
>23298	Identifier	isCutscenePaused
>23299	CompoundStatement	 
>23300	IfStatement	if ( ! isInCutscene ( ) )
>23301	ElseStatement	else
>23302	CompoundStatement	 
>23303	ExpressionStatement	 
>23304	CallExpression	sound -> stopVoice ( )
>23305	ArgumentList	 
>23306	Callee	sound -> stopVoice
>23307	PtrMemberAccess	sound -> stopVoice
>23308	Identifier	stopVoice
>23309	Identifier	sound
>23310	CompoundStatement	 
>23311	ExpressionStatement	 
>23312	CallExpression	sound -> setSfxVolume ( skipSfxVol )
>23313	ArgumentList	skipSfxVol
>23314	Argument	skipSfxVol
>23315	Identifier	skipSfxVol
>23316	Callee	sound -> setSfxVolume
>23317	PtrMemberAccess	sound -> setSfxVolume
>23318	Identifier	setSfxVolume
>23319	Identifier	sound
>23320	ExpressionStatement	 
>23321	AssignmentExpr	settings . renderOn = true
>23322	Identifier	true
>23323	MemberAccess	settings . renderOn
>23324	Identifier	renderOn
>23325	Identifier	settings
>23326	ExpressionStatement	 
>23327	AssignmentExpr	skippingCutscene = false
>23328	Identifier	false
>23329	Identifier	skippingCutscene
>23330	ExpressionStatement	 
>23331	CallExpression	pauseCutscene ( false )
>23332	ArgumentList	false
>23333	Argument	false
>23334	Identifier	false
>23335	Callee	pauseCutscene
>23336	Identifier	pauseCutscene
>23337	Condition	 
>23338	UnaryOp	! isInCutscene ( )
>23339	CallExpression	isInCutscene ( )
>23340	ArgumentList	 
>23341	Callee	isInCutscene
>23342	Identifier	isInCutscene
>23343	UnaryOperator	!
>23344	Condition	 
>23345	CallExpression	isSkippingCutscene ( )
>23346	ArgumentList	 
>23347	Callee	isSkippingCutscene
>23348	Identifier	isSkippingCutscene
>23516	FunctionDef	DSQ 
>23517	ParameterList	 
>23518	ReturnType	void
>23519	CompoundStatement	 
>23523	FunctionDef	DSQ 
>23524	ParameterList	float mag , float time
>23525	Parameter	 
>23526	Identifier	time
>23527	ParameterType	float
>23528	Parameter	 
>23529	Identifier	mag
>23530	ParameterType	float
>23531	ReturnType	void
>23532	CompoundStatement	 
>23533	ExpressionStatement	 
>23534	AssignmentExpr	shakeCameraTimer = time
>23535	Identifier	time
>23536	Identifier	shakeCameraTimer
>23537	ExpressionStatement	 
>23538	AssignmentExpr	shakeCameraMag = mag
>23539	Identifier	mag
>23540	Identifier	shakeCameraMag
>23541	ExpressionStatement	 
>23542	AssignmentExpr	cameraOffset = Vector ( 0 , 0 )
>23543	CallExpression	Vector ( 0 , 0 )
>23544	ArgumentList	0
>23545	Argument	0
>23546	PrimaryExpression	0
>23547	Argument	0
>23548	PrimaryExpression	0
>23549	Callee	Vector
>23550	Identifier	Vector
>23551	Identifier	cameraOffset
>23561	FunctionDef	DSQ 
>23562	ParameterList	 
>23563	ReturnType	bool
>23564	CompoundStatement	 
>23565	ReturnStatement	 
>23566	RelationalExpression	shakeCameraTimer > 0
>23567	PrimaryExpression	0
>23568	Identifier	shakeCameraTimer
>23573	FunctionDef	DSQ 
>23574	ParameterList	 
>23575	ReturnType	bool
>23576	CompoundStatement	 
>23577	IfStatement	if ( nestedMains > 1 )
>23578	ElseStatement	else
>23579	CompoundStatement	 
>23580	ReturnStatement	 
>23581	Identifier	false
>23582	CompoundStatement	 
>23583	ReturnStatement	 
>23584	Identifier	true
>23585	Condition	 
>23586	RelationalExpression	nestedMains > 1
>23587	PrimaryExpression	1
>23588	Identifier	nestedMains
>23595	FunctionDef	DSQ 
>23596	ParameterList	float dt
>23597	Parameter	 
>23598	Identifier	dt
>23599	ParameterType	float
>23600	ReturnType	void
>23601	CompoundStatement	 
>23602	ExpressionStatement	 
>23603	CallExpression	core -> main ( dt )
>23604	ArgumentList	dt
>23605	Argument	dt
>23606	Identifier	dt
>23607	Callee	core -> main
>23608	PtrMemberAccess	core -> main
>23609	Identifier	main
>23610	Identifier	core
>23616	FunctionDef	DSQ 
>23617	ParameterList	float alpha , float time
>23618	Parameter	 
>23619	Identifier	time
>23620	ParameterType	float
>23621	Parameter	 
>23622	Identifier	alpha
>23623	ParameterType	float
>23624	ReturnType	void
>23625	CompoundStatement	 
>23626	IfStatement	if ( overlay )
>23627	ExpressionStatement	 
>23628	CallExpression	overlay -> alpha . interpolateTo ( alpha , time , 0 )
>23629	ArgumentList	alpha
>23630	Argument	0
>23631	PrimaryExpression	0
>23632	Argument	time
>23633	Identifier	time
>23634	Argument	alpha
>23635	Identifier	alpha
>23636	Callee	overlay -> alpha . interpolateTo
>23637	MemberAccess	overlay -> alpha . interpolateTo
>23638	Identifier	interpolateTo
>23639	PtrMemberAccess	overlay -> alpha
>23640	Identifier	alpha
>23641	Identifier	overlay
>23642	Condition	 
>23643	Identifier	overlay
>23652	FunctionDef	DSQ 
>23653	ParameterList	bool v , float time
>23654	Parameter	 
>23655	Identifier	time
>23656	ParameterType	float
>23657	Parameter	 
>23658	Identifier	v
>23659	ParameterType	bool
>23660	ReturnType	void
>23661	CompoundStatement	 
>23662	IfStatement	if ( ! v )
>23663	ElseStatement	else
>23664	ExpressionStatement	 
>23665	CallExpression	cursor -> alpha . interpolateTo ( 1 , t )
>23666	ArgumentList	1
>23667	Argument	t
>23668	Identifier	t
>23669	Argument	1
>23670	PrimaryExpression	1
>23671	Callee	cursor -> alpha . interpolateTo
>23672	MemberAccess	cursor -> alpha . interpolateTo
>23673	Identifier	interpolateTo
>23674	PtrMemberAccess	cursor -> alpha
>23675	Identifier	alpha
>23676	Identifier	cursor
>23677	ExpressionStatement	 
>23678	CallExpression	cursor -> alpha . interpolateTo ( 0 , t )
>23679	ArgumentList	0
>23680	Argument	t
>23681	Identifier	t
>23682	Argument	0
>23683	PrimaryExpression	0
>23684	Callee	cursor -> alpha . interpolateTo
>23685	MemberAccess	cursor -> alpha . interpolateTo
>23686	Identifier	interpolateTo
>23687	PtrMemberAccess	cursor -> alpha
>23688	Identifier	alpha
>23689	Identifier	cursor
>23690	Condition	 
>23691	UnaryOp	! v
>23692	Identifier	v
>23693	UnaryOperator	!
>23694	IfStatement	if ( time == - 1 )
>23695	ExpressionStatement	 
>23696	AssignmentExpr	t = 0.1
>23697	PrimaryExpression	0.1
>23698	Identifier	t
>23699	Condition	 
>23700	EqualityExpression	time == - 1
>23701	UnaryOp	- 1
>23702	PrimaryExpression	1
>23703	UnaryOperator	-
>23704	Identifier	time
>23705	IdentifierDeclStatement	 
>23706	IdentifierDecl	t = time
>23707	AssignmentExpr	t = time
>23708	Identifier	time
>23709	Identifier	time
>23710	Identifier	t
>23711	IdentifierDeclType	float
>23712	IfStatement	if ( ! cursor )
>23713	ReturnStatement	 
>23714	Condition	 
>23715	UnaryOp	! cursor
>23716	Identifier	cursor
>23717	UnaryOperator	!
>23727	FunctionDef	DSQ 
>23728	ParameterList	int vfx , Vector position , Entity * target
>23729	Parameter	 
>23730	Identifier	target
>23731	ParameterType	Entity *
>23732	Parameter	 
>23733	Identifier	position
>23734	ParameterType	Vector
>23735	Parameter	 
>23736	Identifier	vfx
>23737	ParameterType	int
>23738	ReturnType	void
>23739	CompoundStatement	 
>23740	SwitchStatement	switch ( vfx )
>23741	CompoundStatement	 
>23742	BreakStatement	 
>23743	IfStatement	if ( core -> afterEffectManager )
>23744	ExpressionStatement	 
>23745	CallExpression	core -> afterEffectManager -> addEffect ( new ShockEffect ( Vector ( core -> width / 2 , core -> height / 2 ) , \
>23746	ArgumentList	Vector ( core -> width / 2 , core -> height / 2 ) , core -> screenCenter , 0.04 , 0.06 , 15 , 0.2f
>23747	Argument	Vector ( core -> width / 2 , core -> height / 2 ) , core -> screenCenter , 0.04 , 0.06 , 15 , 0.2f
>23748	Expression	Vector ( core -> width / 2 , core -> height / 2 ) , core -> screenCenter , 0.04 , 0.06 , 15 , 0.2f
>23749	Expression	core -> screenCenter , 0.04 , 0.06 , 15 , 0.2f
>23750	Expression	0.04 , 0.06 , 15 , 0.2f
>23751	Expression	0.06 , 15 , 0.2f
>23752	Expression	15 , 0.2f
>23753	PrimaryExpression	0.2f
>23754	PrimaryExpression	15
>23755	PrimaryExpression	0.06
>23756	PrimaryExpression	0.04
>23757	PtrMemberAccess	core -> screenCenter
>23758	Identifier	screenCenter
>23759	Identifier	core
>23760	CallExpression	Vector ( core -> width / 2 , core -> height / 2 )
>23761	ArgumentList	core -> width / 2
>23762	Argument	core -> height / 2
>23763	MultiplicativeExpression	core -> height / 2
>23764	PrimaryExpression	2
>23765	PtrMemberAccess	core -> height
>23766	Identifier	height
>23767	Identifier	core
>23768	Argument	core -> width / 2
>23769	MultiplicativeExpression	core -> width / 2
>23770	PrimaryExpression	2
>23771	PtrMemberAccess	core -> width
>23772	Identifier	width
>23773	Identifier	core
>23774	Callee	Vector
>23775	Identifier	Vector
>23776	Callee	core -> afterEffectManager -> addEffect
>23777	PtrMemberAccess	core -> afterEffectManager -> addEffect
>23778	Identifier	addEffect
>23779	PtrMemberAccess	core -> afterEffectManager
>23780	Identifier	afterEffectManager
>23781	Identifier	core
>23782	Condition	 
>23783	PtrMemberAccess	core -> afterEffectManager
>23784	Identifier	afterEffectManager
>23785	Identifier	core
>23786	Label	 
>23787	Identifier	VFX_RIPPLE
>23788	BreakStatement	 
>23789	CompoundStatement	 
>23790	CompoundStatement	 
>23791	ExpressionStatement	 
>23792	CallExpression	game -> addRenderObject ( q , LR_PARTICLES )
>23793	ArgumentList	q
>23794	Argument	LR_PARTICLES
>23795	Identifier	LR_PARTICLES
>23796	Argument	q
>23797	Identifier	q
>23798	Callee	game -> addRenderObject
>23799	PtrMemberAccess	game -> addRenderObject
>23800	Identifier	addRenderObject
>23801	Identifier	game
>23802	ExpressionStatement	 
>23803	AssignmentExpr	q -> rotation . z = rand ( ) % 360
>23804	MultiplicativeExpression	rand ( ) % 360
>23805	PrimaryExpression	360
>23806	CallExpression	rand ( )
>23807	ArgumentList	 
>23808	Callee	rand
>23809	Identifier	rand
>23810	MemberAccess	q -> rotation . z
>23811	Identifier	z
>23812	PtrMemberAccess	q -> rotation
>23813	Identifier	rotation
>23814	Identifier	q
>23815	ExpressionStatement	 
>23816	CallExpression	q -> setTexture ( \"particles/EnergyDeltas\" )
>23817	ArgumentList	\"particles/EnergyDeltas\"
>23818	Argument	\"particles/EnergyDeltas\"
>23819	PrimaryExpression	\"particles/EnergyDeltas\"
>23820	Callee	q -> setTexture
>23821	PtrMemberAccess	q -> setTexture
>23822	Identifier	setTexture
>23823	Identifier	q
>23824	ExpressionStatement	 
>23825	CallExpression	q -> setBlendType ( RenderObject 
>23826	ArgumentList	RenderObject 
>23827	Argument	RenderObject 
>23828	Identifier	RenderObject 
>23829	Callee	q -> setBlendType
>23830	PtrMemberAccess	q -> setBlendType
>23831	Identifier	setBlendType
>23832	Identifier	q
>23833	ExpressionStatement	 
>23834	CallExpression	q -> alpha . startPath ( t )
>23835	ArgumentList	t
>23836	Argument	t
>23837	Identifier	t
>23838	Callee	q -> alpha . startPath
>23839	MemberAccess	q -> alpha . startPath
>23840	Identifier	startPath
>23841	PtrMemberAccess	q -> alpha
>23842	Identifier	alpha
>23843	Identifier	q
>23844	ExpressionStatement	 
>23845	CallExpression	q -> alpha . data -> path . addPathNode ( 0 , 1 )
>23846	ArgumentList	0
>23847	Argument	1
>23848	PrimaryExpression	1
>23849	Argument	0
>23850	PrimaryExpression	0
>23851	Callee	q -> alpha . data -> path . addPathNode
>23852	MemberAccess	q -> alpha . data -> path . addPathNode
>23853	Identifier	addPathNode
>23854	PtrMemberAccess	q -> alpha . data -> path
>23855	Identifier	path
>23856	MemberAccess	q -> alpha . data
>23857	Identifier	data
>23858	PtrMemberAccess	q -> alpha
>23859	Identifier	alpha
>23860	Identifier	q
>23861	ExpressionStatement	 
>23862	CallExpression	q -> alpha . data -> path . addPathNode ( 0.8 , 0.25 )
>23863	ArgumentList	0.8
>23864	Argument	0.25
>23865	PrimaryExpression	0.25
>23866	Argument	0.8
>23867	PrimaryExpression	0.8
>23868	Callee	q -> alpha . data -> path . addPathNode
>23869	MemberAccess	q -> alpha . data -> path . addPathNode
>23870	Identifier	addPathNode
>23871	PtrMemberAccess	q -> alpha . data -> path
>23872	Identifier	path
>23873	MemberAccess	q -> alpha . data
>23874	Identifier	data
>23875	PtrMemberAccess	q -> alpha
>23876	Identifier	alpha
>23877	Identifier	q
>23878	ExpressionStatement	 
>23879	CallExpression	q -> alpha . data -> path . addPathNode ( 0 , 0 )
>23880	ArgumentList	0
>23881	Argument	0
>23882	PrimaryExpression	0
>23883	Argument	0
>23884	PrimaryExpression	0
>23885	Callee	q -> alpha . data -> path . addPathNode
>23886	MemberAccess	q -> alpha . data -> path . addPathNode
>23887	Identifier	addPathNode
>23888	PtrMemberAccess	q -> alpha . data -> path
>23889	Identifier	path
>23890	MemberAccess	q -> alpha . data
>23891	Identifier	data
>23892	PtrMemberAccess	q -> alpha
>23893	Identifier	alpha
>23894	Identifier	q
>23895	ExpressionStatement	 
>23896	CallExpression	q -> alpha . ensureData ( )
>23897	ArgumentList	 
>23898	Callee	q -> alpha . ensureData
>23899	MemberAccess	q -> alpha . ensureData
>23900	Identifier	ensureData
>23901	PtrMemberAccess	q -> alpha
>23902	Identifier	alpha
>23903	Identifier	q
>23904	ExpressionStatement	 
>23905	CallExpression	q -> scale . interpolateTo ( Vector ( 3 , 3 ) , t )
>23906	ArgumentList	Vector ( 3 , 3 )
>23907	Argument	t
>23908	Identifier	t
>23909	Argument	Vector ( 3 , 3 )
>23910	CallExpression	Vector ( 3 , 3 )
>23911	ArgumentList	3
>23912	Argument	3
>23913	PrimaryExpression	3
>23914	Argument	3
>23915	PrimaryExpression	3
>23916	Callee	Vector
>23917	Identifier	Vector
>23918	Callee	q -> scale . interpolateTo
>23919	MemberAccess	q -> scale . interpolateTo
>23920	Identifier	interpolateTo
>23921	PtrMemberAccess	q -> scale
>23922	Identifier	scale
>23923	Identifier	q
>23924	ExpressionStatement	 
>23925	AssignmentExpr	q -> scale = Vector ( 1 , 1 )
>23926	CallExpression	Vector ( 1 , 1 )
>23927	ArgumentList	1
>23928	Argument	1
>23929	PrimaryExpression	1
>23930	Argument	1
>23931	PrimaryExpression	1
>23932	Callee	Vector
>23933	Identifier	Vector
>23934	PtrMemberAccess	q -> scale
>23935	Identifier	scale
>23936	Identifier	q
>23937	ExpressionStatement	 
>23938	AssignmentExpr	q -> position = position
>23939	Identifier	position
>23940	PtrMemberAccess	q -> position
>23941	Identifier	position
>23942	Identifier	q
>23943	ExpressionStatement	 
>23944	Identifier	Quad
>23945	Statement	 
>23946	Statement	 
>23947	Statement	 
>23948	Statement	 
>23949	Statement	 
>23950	ExpressionStatement	 
>23951	AssignmentExpr	t = 0.75
>23952	PrimaryExpression	0.75
>23953	Identifier	t
>23954	CompoundStatement	 
>23955	ExpressionStatement	 
>23956	CallExpression	game -> addRenderObject ( q , LR_PARTICLES )
>23957	ArgumentList	q
>23958	Argument	LR_PARTICLES
>23959	Identifier	LR_PARTICLES
>23960	Argument	q
>23961	Identifier	q
>23962	Callee	game -> addRenderObject
>23963	PtrMemberAccess	game -> addRenderObject
>23964	Identifier	addRenderObject
>23965	Identifier	game
>23966	ExpressionStatement	 
>23967	CallExpression	q -> rotation . interpolateTo ( Vector ( 0 , 0 , q -> rotation . z + 360 ) , t + 0.1f )
>23968	ArgumentList	Vector ( 0 , 0 , q -> rotation . z + 360 )
>23969	Argument	t + 0.1f
>23970	AdditiveExpression	t + 0.1f
>23971	PrimaryExpression	0.1f
>23972	Identifier	t
>23973	Argument	Vector ( 0 , 0 , q -> rotation . z + 360 )
>23974	CallExpression	Vector ( 0 , 0 , q -> rotation . z + 360 )
>23975	ArgumentList	0
>23976	Argument	q -> rotation . z + 360
>23977	AdditiveExpression	q -> rotation . z + 360
>23978	PrimaryExpression	360
>23979	MemberAccess	q -> rotation . z
>23980	Identifier	z
>23981	PtrMemberAccess	q -> rotation
>23982	Identifier	rotation
>23983	Identifier	q
>23984	Argument	0
>23985	PrimaryExpression	0
>23986	Argument	0
>23987	PrimaryExpression	0
>23988	Callee	Vector
>23989	Identifier	Vector
>23990	Callee	q -> rotation . interpolateTo
>23991	MemberAccess	q -> rotation . interpolateTo
>23992	Identifier	interpolateTo
>23993	PtrMemberAccess	q -> rotation
>23994	Identifier	rotation
>23995	Identifier	q
>23996	ExpressionStatement	 
>23997	CallExpression	q -> setTexture ( \"particles/EnergyRing\" )
>23998	ArgumentList	\"particles/EnergyRing\"
>23999	Argument	\"particles/EnergyRing\"
>24000	PrimaryExpression	\"particles/EnergyRing\"
>24001	Callee	q -> setTexture
>24002	PtrMemberAccess	q -> setTexture
>24003	Identifier	setTexture
>24004	Identifier	q
>24005	ExpressionStatement	 
>24006	AssignmentExpr	q -> rotation . z = rand ( ) % 360
>24007	MultiplicativeExpression	rand ( ) % 360
>24008	PrimaryExpression	360
>24009	CallExpression	rand ( )
>24010	ArgumentList	 
>24011	Callee	rand
>24012	Identifier	rand
>24013	MemberAccess	q -> rotation . z
>24014	Identifier	z
>24015	PtrMemberAccess	q -> rotation
>24016	Identifier	rotation
>24017	Identifier	q
>24018	ExpressionStatement	 
>24019	CallExpression	q -> setBlendType ( RenderObject 
>24020	ArgumentList	RenderObject 
>24021	Argument	RenderObject 
>24022	Identifier	RenderObject 
>24023	Callee	q -> setBlendType
>24024	PtrMemberAccess	q -> setBlendType
>24025	Identifier	setBlendType
>24026	Identifier	q
>24027	ExpressionStatement	 
>24028	CallExpression	q -> alpha . startPath ( t )
>24029	ArgumentList	t
>24030	Argument	t
>24031	Identifier	t
>24032	Callee	q -> alpha . startPath
>24033	MemberAccess	q -> alpha . startPath
>24034	Identifier	startPath
>24035	PtrMemberAccess	q -> alpha
>24036	Identifier	alpha
>24037	Identifier	q
>24038	ExpressionStatement	 
>24039	CallExpression	q -> alpha . data -> path . addPathNode ( 0 , 1 )
>24040	ArgumentList	0
>24041	Argument	1
>24042	PrimaryExpression	1
>24043	Argument	0
>24044	PrimaryExpression	0
>24045	Callee	q -> alpha . data -> path . addPathNode
>24046	MemberAccess	q -> alpha . data -> path . addPathNode
>24047	Identifier	addPathNode
>24048	PtrMemberAccess	q -> alpha . data -> path
>24049	Identifier	path
>24050	MemberAccess	q -> alpha . data
>24051	Identifier	data
>24052	PtrMemberAccess	q -> alpha
>24053	Identifier	alpha
>24054	Identifier	q
>24055	ExpressionStatement	 
>24056	CallExpression	q -> alpha . data -> path . addPathNode ( 1 , 0.3 )
>24057	ArgumentList	1
>24058	Argument	0.3
>24059	PrimaryExpression	0.3
>24060	Argument	1
>24061	PrimaryExpression	1
>24062	Callee	q -> alpha . data -> path . addPathNode
>24063	MemberAccess	q -> alpha . data -> path . addPathNode
>24064	Identifier	addPathNode
>24065	PtrMemberAccess	q -> alpha . data -> path
>24066	Identifier	path
>24067	MemberAccess	q -> alpha . data
>24068	Identifier	data
>24069	PtrMemberAccess	q -> alpha
>24070	Identifier	alpha
>24071	Identifier	q
>24072	ExpressionStatement	 
>24073	CallExpression	q -> alpha . data -> path . addPathNode ( 0 , 0 )
>24074	ArgumentList	0
>24075	Argument	0
>24076	PrimaryExpression	0
>24077	Argument	0
>24078	PrimaryExpression	0
>24079	Callee	q -> alpha . data -> path . addPathNode
>24080	MemberAccess	q -> alpha . data -> path . addPathNode
>24081	Identifier	addPathNode
>24082	PtrMemberAccess	q -> alpha . data -> path
>24083	Identifier	path
>24084	MemberAccess	q -> alpha . data
>24085	Identifier	data
>24086	PtrMemberAccess	q -> alpha
>24087	Identifier	alpha
>24088	Identifier	q
>24089	ExpressionStatement	 
>24090	CallExpression	q -> alpha . ensureData ( )
>24091	ArgumentList	 
>24092	Callee	q -> alpha . ensureData
>24093	MemberAccess	q -> alpha . ensureData
>24094	Identifier	ensureData
>24095	PtrMemberAccess	q -> alpha
>24096	Identifier	alpha
>24097	Identifier	q
>24098	ExpressionStatement	 
>24099	CallExpression	q -> scale . interpolateTo ( Vector ( 3 , 3 ) , t )
>24100	ArgumentList	Vector ( 3 , 3 )
>24101	Argument	t
>24102	Identifier	t
>24103	Argument	Vector ( 3 , 3 )
>24104	CallExpression	Vector ( 3 , 3 )
>24105	ArgumentList	3
>24106	Argument	3
>24107	PrimaryExpression	3
>24108	Argument	3
>24109	PrimaryExpression	3
>24110	Callee	Vector
>24111	Identifier	Vector
>24112	Callee	q -> scale . interpolateTo
>24113	MemberAccess	q -> scale . interpolateTo
>24114	Identifier	interpolateTo
>24115	PtrMemberAccess	q -> scale
>24116	Identifier	scale
>24117	Identifier	q
>24118	ExpressionStatement	 
>24119	AssignmentExpr	q -> scale = Vector ( 1 , 1 )
>24120	CallExpression	Vector ( 1 , 1 )
>24121	ArgumentList	1
>24122	Argument	1
>24123	PrimaryExpression	1
>24124	Argument	1
>24125	PrimaryExpression	1
>24126	Callee	Vector
>24127	Identifier	Vector
>24128	PtrMemberAccess	q -> scale
>24129	Identifier	scale
>24130	Identifier	q
>24131	ExpressionStatement	 
>24132	AssignmentExpr	q -> position = position
>24133	Identifier	position
>24134	PtrMemberAccess	q -> position
>24135	Identifier	position
>24136	Identifier	q
>24137	ExpressionStatement	 
>24138	Identifier	Quad
>24139	Statement	 
>24140	Statement	 
>24141	Statement	 
>24142	Statement	 
>24143	Statement	 
>24144	IdentifierDeclStatement	 
>24145	IdentifierDecl	t = 1.0
>24146	AssignmentExpr	t = 1.0
>24147	PrimaryExpression	1.0
>24148	Identifier	t
>24149	Identifier	t
>24150	IdentifierDeclType	float
>24151	Label	 
>24152	Identifier	VFX_SHOCKHIT
>24153	BreakStatement	 
>24154	CompoundStatement	 
>24155	CompoundStatement	 
>24156	ExpressionStatement	 
>24157	CallExpression	game -> addRenderObject ( q , LR_PARTICLES )
>24158	ArgumentList	q
>24159	Argument	LR_PARTICLES
>24160	Identifier	LR_PARTICLES
>24161	Argument	q
>24162	Identifier	q
>24163	Callee	game -> addRenderObject
>24164	PtrMemberAccess	game -> addRenderObject
>24165	Identifier	addRenderObject
>24166	Identifier	game
>24167	ExpressionStatement	 
>24168	AssignmentExpr	q -> rotation . z = rand ( ) % 360
>24169	MultiplicativeExpression	rand ( ) % 360
>24170	PrimaryExpression	360
>24171	CallExpression	rand ( )
>24172	ArgumentList	 
>24173	Callee	rand
>24174	Identifier	rand
>24175	MemberAccess	q -> rotation . z
>24176	Identifier	z
>24177	PtrMemberAccess	q -> rotation
>24178	Identifier	rotation
>24179	Identifier	q
>24180	IfStatement	if ( target )
>24181	ExpressionStatement	 
>24182	AssignmentExpr	q -> positionSnapTo = & target -> position
>24183	UnaryOp	& target -> position
>24184	PtrMemberAccess	target -> position
>24185	Identifier	position
>24186	Identifier	target
>24187	UnaryOperator	&
>24188	PtrMemberAccess	q -> positionSnapTo
>24189	Identifier	positionSnapTo
>24190	Identifier	q
>24191	Condition	 
>24192	Identifier	target
>24193	ExpressionStatement	 
>24194	CallExpression	q -> setTexture ( \"particles/EnergyPart\" )
>24195	ArgumentList	\"particles/EnergyPart\"
>24196	Argument	\"particles/EnergyPart\"
>24197	PrimaryExpression	\"particles/EnergyPart\"
>24198	Callee	q -> setTexture
>24199	PtrMemberAccess	q -> setTexture
>24200	Identifier	setTexture
>24201	Identifier	q
>24202	ExpressionStatement	 
>24203	CallExpression	q -> setBlendType ( RenderObject 
>24204	ArgumentList	RenderObject 
>24205	Argument	RenderObject 
>24206	Identifier	RenderObject 
>24207	Callee	q -> setBlendType
>24208	PtrMemberAccess	q -> setBlendType
>24209	Identifier	setBlendType
>24210	Identifier	q
>24211	ExpressionStatement	 
>24212	CallExpression	q -> alpha . startPath ( t )
>24213	ArgumentList	t
>24214	Argument	t
>24215	Identifier	t
>24216	Callee	q -> alpha . startPath
>24217	MemberAccess	q -> alpha . startPath
>24218	Identifier	startPath
>24219	PtrMemberAccess	q -> alpha
>24220	Identifier	alpha
>24221	Identifier	q
>24222	ExpressionStatement	 
>24223	CallExpression	q -> alpha . data -> path . addPathNode ( 0 , 1 )
>24224	ArgumentList	0
>24225	Argument	1
>24226	PrimaryExpression	1
>24227	Argument	0
>24228	PrimaryExpression	0
>24229	Callee	q -> alpha . data -> path . addPathNode
>24230	MemberAccess	q -> alpha . data -> path . addPathNode
>24231	Identifier	addPathNode
>24232	PtrMemberAccess	q -> alpha . data -> path
>24233	Identifier	path
>24234	MemberAccess	q -> alpha . data
>24235	Identifier	data
>24236	PtrMemberAccess	q -> alpha
>24237	Identifier	alpha
>24238	Identifier	q
>24239	ExpressionStatement	 
>24240	CallExpression	q -> alpha . data -> path . addPathNode ( 0.75 , 0.75 )
>24241	ArgumentList	0.75
>24242	Argument	0.75
>24243	PrimaryExpression	0.75
>24244	Argument	0.75
>24245	PrimaryExpression	0.75
>24246	Callee	q -> alpha . data -> path . addPathNode
>24247	MemberAccess	q -> alpha . data -> path . addPathNode
>24248	Identifier	addPathNode
>24249	PtrMemberAccess	q -> alpha . data -> path
>24250	Identifier	path
>24251	MemberAccess	q -> alpha . data
>24252	Identifier	data
>24253	PtrMemberAccess	q -> alpha
>24254	Identifier	alpha
>24255	Identifier	q
>24256	ExpressionStatement	 
>24257	CallExpression	q -> alpha . data -> path . addPathNode ( 0.75 , 0.25 )
>24258	ArgumentList	0.75
>24259	Argument	0.25
>24260	PrimaryExpression	0.25
>24261	Argument	0.75
>24262	PrimaryExpression	0.75
>24263	Callee	q -> alpha . data -> path . addPathNode
>24264	MemberAccess	q -> alpha . data -> path . addPathNode
>24265	Identifier	addPathNode
>24266	PtrMemberAccess	q -> alpha . data -> path
>24267	Identifier	path
>24268	MemberAccess	q -> alpha . data
>24269	Identifier	data
>24270	PtrMemberAccess	q -> alpha
>24271	Identifier	alpha
>24272	Identifier	q
>24273	ExpressionStatement	 
>24274	CallExpression	q -> alpha . data -> path . addPathNode ( 0 , 0 )
>24275	ArgumentList	0
>24276	Argument	0
>24277	PrimaryExpression	0
>24278	Argument	0
>24279	PrimaryExpression	0
>24280	Callee	q -> alpha . data -> path . addPathNode
>24281	MemberAccess	q -> alpha . data -> path . addPathNode
>24282	Identifier	addPathNode
>24283	PtrMemberAccess	q -> alpha . data -> path
>24284	Identifier	path
>24285	MemberAccess	q -> alpha . data
>24286	Identifier	data
>24287	PtrMemberAccess	q -> alpha
>24288	Identifier	alpha
>24289	Identifier	q
>24290	ExpressionStatement	 
>24291	CallExpression	q -> alpha . ensureData ( )
>24292	ArgumentList	 
>24293	Callee	q -> alpha . ensureData
>24294	MemberAccess	q -> alpha . ensureData
>24295	Identifier	ensureData
>24296	PtrMemberAccess	q -> alpha
>24297	Identifier	alpha
>24298	Identifier	q
>24299	ExpressionStatement	 
>24300	CallExpression	q -> scale . interpolateTo ( Vector ( 2 , 2 ) , t )
>24301	ArgumentList	Vector ( 2 , 2 )
>24302	Argument	t
>24303	Identifier	t
>24304	Argument	Vector ( 2 , 2 )
>24305	CallExpression	Vector ( 2 , 2 )
>24306	ArgumentList	2
>24307	Argument	2
>24308	PrimaryExpression	2
>24309	Argument	2
>24310	PrimaryExpression	2
>24311	Callee	Vector
>24312	Identifier	Vector
>24313	Callee	q -> scale . interpolateTo
>24314	MemberAccess	q -> scale . interpolateTo
>24315	Identifier	interpolateTo
>24316	PtrMemberAccess	q -> scale
>24317	Identifier	scale
>24318	Identifier	q
>24319	ExpressionStatement	 
>24320	AssignmentExpr	q -> scale = Vector ( 0.5 , 0.5 )
>24321	CallExpression	Vector ( 0.5 , 0.5 )
>24322	ArgumentList	0.5
>24323	Argument	0.5
>24324	PrimaryExpression	0.5
>24325	Argument	0.5
>24326	PrimaryExpression	0.5
>24327	Callee	Vector
>24328	Identifier	Vector
>24329	PtrMemberAccess	q -> scale
>24330	Identifier	scale
>24331	Identifier	q
>24332	ExpressionStatement	 
>24333	AssignmentExpr	q -> position = position
>24334	Identifier	position
>24335	PtrMemberAccess	q -> position
>24336	Identifier	position
>24337	Identifier	q
>24338	ExpressionStatement	 
>24339	Identifier	Quad
>24340	Statement	 
>24341	Statement	 
>24342	Statement	 
>24343	Statement	 
>24344	Statement	 
>24345	ExpressionStatement	 
>24346	AssignmentExpr	t = 0.75
>24347	PrimaryExpression	0.75
>24348	Identifier	t
>24349	IfStatement	if ( target && target -> getEntityType ( ) == ET_AVATAR )
>24350	IfStatement	if ( core -> afterEffectManager )
>24351	ExpressionStatement	 
>24352	CallExpression	core -> afterEffectManager -> addEffect ( new ShockEffect ( Vector ( core -> width / 2 , core -> height / 2 ) , \
>24353	ArgumentList	Vector ( core -> width / 2 , core -> height / 2 ) , core -> screenCenter , 0.08 , 0.05 , 22 , 0.2f , 1.2
>24354	Argument	Vector ( core -> width / 2 , core -> height / 2 ) , core -> screenCenter , 0.08 , 0.05 , 22 , 0.2f , 1.2
>24355	Expression	Vector ( core -> width / 2 , core -> height / 2 ) , core -> screenCenter , 0.08 , 0.05 , 22 , 0.2f , 1.2
>24356	Expression	core -> screenCenter , 0.08 , 0.05 , 22 , 0.2f , 1.2
>24357	Expression	0.08 , 0.05 , 22 , 0.2f , 1.2
>24358	Expression	0.05 , 22 , 0.2f , 1.2
>24359	Expression	22 , 0.2f , 1.2
>24360	Expression	0.2f , 1.2
>24361	PrimaryExpression	1.2
>24362	PrimaryExpression	0.2f
>24363	PrimaryExpression	22
>24364	PrimaryExpression	0.05
>24365	PrimaryExpression	0.08
>24366	PtrMemberAccess	core -> screenCenter
>24367	Identifier	screenCenter
>24368	Identifier	core
>24369	CallExpression	Vector ( core -> width / 2 , core -> height / 2 )
>24370	ArgumentList	core -> width / 2
>24371	Argument	core -> height / 2
>24372	MultiplicativeExpression	core -> height / 2
>24373	PrimaryExpression	2
>24374	PtrMemberAccess	core -> height
>24375	Identifier	height
>24376	Identifier	core
>24377	Argument	core -> width / 2
>24378	MultiplicativeExpression	core -> width / 2
>24379	PrimaryExpression	2
>24380	PtrMemberAccess	core -> width
>24381	Identifier	width
>24382	Identifier	core
>24383	Callee	Vector
>24384	Identifier	Vector
>24385	Callee	core -> afterEffectManager -> addEffect
>24386	PtrMemberAccess	core -> afterEffectManager -> addEffect
>24387	Identifier	addEffect
>24388	PtrMemberAccess	core -> afterEffectManager
>24389	Identifier	afterEffectManager
>24390	Identifier	core
>24391	Condition	 
>24392	PtrMemberAccess	core -> afterEffectManager
>24393	Identifier	afterEffectManager
>24394	Identifier	core
>24395	Condition	 
>24396	AndExpression	target && target -> getEntityType ( ) == ET_AVATAR
>24397	EqualityExpression	target -> getEntityType ( ) == ET_AVATAR
>24398	Identifier	ET_AVATAR
>24399	CallExpression	target -> getEntityType ( )
>24400	ArgumentList	 
>24401	Callee	target -> getEntityType
>24402	PtrMemberAccess	target -> getEntityType
>24403	Identifier	getEntityType
>24404	Identifier	target
>24405	Identifier	target
>24406	ExpressionStatement	 
>24407	CallExpression	game -> addRenderObject ( q , LR_PARTICLES )
>24408	ArgumentList	q
>24409	Argument	LR_PARTICLES
>24410	Identifier	LR_PARTICLES
>24411	Argument	q
>24412	Identifier	q
>24413	Callee	game -> addRenderObject
>24414	PtrMemberAccess	game -> addRenderObject
>24415	Identifier	addRenderObject
>24416	Identifier	game
>24417	IfStatement	if ( target )
>24418	ExpressionStatement	 
>24419	AssignmentExpr	q -> positionSnapTo = & target -> position
>24420	UnaryOp	& target -> position
>24421	PtrMemberAccess	target -> position
>24422	Identifier	position
>24423	Identifier	target
>24424	UnaryOperator	&
>24425	PtrMemberAccess	q -> positionSnapTo
>24426	Identifier	positionSnapTo
>24427	Identifier	q
>24428	Condition	 
>24429	Identifier	target
>24430	ExpressionStatement	 
>24431	CallExpression	q -> setTexture ( \"particles/EnergyRing\" )
>24432	ArgumentList	\"particles/EnergyRing\"
>24433	Argument	\"particles/EnergyRing\"
>24434	PrimaryExpression	\"particles/EnergyRing\"
>24435	Callee	q -> setTexture
>24436	PtrMemberAccess	q -> setTexture
>24437	Identifier	setTexture
>24438	Identifier	q
>24439	ExpressionStatement	 
>24440	CallExpression	q -> setBlendType ( RenderObject 
>24441	ArgumentList	RenderObject 
>24442	Argument	RenderObject 
>24443	Identifier	RenderObject 
>24444	Callee	q -> setBlendType
>24445	PtrMemberAccess	q -> setBlendType
>24446	Identifier	setBlendType
>24447	Identifier	q
>24448	ExpressionStatement	 
>24449	CallExpression	q -> alpha . startPath ( t )
>24450	ArgumentList	t
>24451	Argument	t
>24452	Identifier	t
>24453	Callee	q -> alpha . startPath
>24454	MemberAccess	q -> alpha . startPath
>24455	Identifier	startPath
>24456	PtrMemberAccess	q -> alpha
>24457	Identifier	alpha
>24458	Identifier	q
>24459	ExpressionStatement	 
>24460	CallExpression	q -> alpha . data -> path . addPathNode ( 0 , 1 )
>24461	ArgumentList	0
>24462	Argument	1
>24463	PrimaryExpression	1
>24464	Argument	0
>24465	PrimaryExpression	0
>24466	Callee	q -> alpha . data -> path . addPathNode
>24467	MemberAccess	q -> alpha . data -> path . addPathNode
>24468	Identifier	addPathNode
>24469	PtrMemberAccess	q -> alpha . data -> path
>24470	Identifier	path
>24471	MemberAccess	q -> alpha . data
>24472	Identifier	data
>24473	PtrMemberAccess	q -> alpha
>24474	Identifier	alpha
>24475	Identifier	q
>24476	ExpressionStatement	 
>24477	CallExpression	q -> alpha . data -> path . addPathNode ( 0.75 , 0.75 )
>24478	ArgumentList	0.75
>24479	Argument	0.75
>24480	PrimaryExpression	0.75
>24481	Argument	0.75
>24482	PrimaryExpression	0.75
>24483	Callee	q -> alpha . data -> path . addPathNode
>24484	MemberAccess	q -> alpha . data -> path . addPathNode
>24485	Identifier	addPathNode
>24486	PtrMemberAccess	q -> alpha . data -> path
>24487	Identifier	path
>24488	MemberAccess	q -> alpha . data
>24489	Identifier	data
>24490	PtrMemberAccess	q -> alpha
>24491	Identifier	alpha
>24492	Identifier	q
>24493	ExpressionStatement	 
>24494	CallExpression	q -> alpha . data -> path . addPathNode ( 0.75 , 0.25 )
>24495	ArgumentList	0.75
>24496	Argument	0.25
>24497	PrimaryExpression	0.25
>24498	Argument	0.75
>24499	PrimaryExpression	0.75
>24500	Callee	q -> alpha . data -> path . addPathNode
>24501	MemberAccess	q -> alpha . data -> path . addPathNode
>24502	Identifier	addPathNode
>24503	PtrMemberAccess	q -> alpha . data -> path
>24504	Identifier	path
>24505	MemberAccess	q -> alpha . data
>24506	Identifier	data
>24507	PtrMemberAccess	q -> alpha
>24508	Identifier	alpha
>24509	Identifier	q
>24510	ExpressionStatement	 
>24511	CallExpression	q -> alpha . data -> path . addPathNode ( 0 , 0 )
>24512	ArgumentList	0
>24513	Argument	0
>24514	PrimaryExpression	0
>24515	Argument	0
>24516	PrimaryExpression	0
>24517	Callee	q -> alpha . data -> path . addPathNode
>24518	MemberAccess	q -> alpha . data -> path . addPathNode
>24519	Identifier	addPathNode
>24520	PtrMemberAccess	q -> alpha . data -> path
>24521	Identifier	path
>24522	MemberAccess	q -> alpha . data
>24523	Identifier	data
>24524	PtrMemberAccess	q -> alpha
>24525	Identifier	alpha
>24526	Identifier	q
>24527	ExpressionStatement	 
>24528	CallExpression	q -> alpha . ensureData ( )
>24529	ArgumentList	 
>24530	Callee	q -> alpha . ensureData
>24531	MemberAccess	q -> alpha . ensureData
>24532	Identifier	ensureData
>24533	PtrMemberAccess	q -> alpha
>24534	Identifier	alpha
>24535	Identifier	q
>24536	ExpressionStatement	 
>24537	CallExpression	q -> scale . interpolateTo ( Vector ( 5 , 5 ) , t )
>24538	ArgumentList	Vector ( 5 , 5 )
>24539	Argument	t
>24540	Identifier	t
>24541	Argument	Vector ( 5 , 5 )
>24542	CallExpression	Vector ( 5 , 5 )
>24543	ArgumentList	5
>24544	Argument	5
>24545	PrimaryExpression	5
>24546	Argument	5
>24547	PrimaryExpression	5
>24548	Callee	Vector
>24549	Identifier	Vector
>24550	Callee	q -> scale . interpolateTo
>24551	MemberAccess	q -> scale . interpolateTo
>24552	Identifier	interpolateTo
>24553	PtrMemberAccess	q -> scale
>24554	Identifier	scale
>24555	Identifier	q
>24556	ExpressionStatement	 
>24557	AssignmentExpr	q -> scale = Vector ( 0 , 0 )
>24558	CallExpression	Vector ( 0 , 0 )
>24559	ArgumentList	0
>24560	Argument	0
>24561	PrimaryExpression	0
>24562	Argument	0
>24563	PrimaryExpression	0
>24564	Callee	Vector
>24565	Identifier	Vector
>24566	PtrMemberAccess	q -> scale
>24567	Identifier	scale
>24568	Identifier	q
>24569	ExpressionStatement	 
>24570	AssignmentExpr	q -> position = position
>24571	Identifier	position
>24572	PtrMemberAccess	q -> position
>24573	Identifier	position
>24574	Identifier	q
>24575	ExpressionStatement	 
>24576	Identifier	Quad
>24577	Statement	 
>24578	Statement	 
>24579	Statement	 
>24580	Statement	 
>24581	Statement	 
>24582	IdentifierDeclStatement	 
>24583	IdentifierDecl	t = 1.0
>24584	AssignmentExpr	t = 1.0
>24585	PrimaryExpression	1.0
>24586	Identifier	t
>24587	Identifier	t
>24588	IdentifierDeclType	float
>24589	ExpressionStatement	 
>24590	CallExpression	core -> sound -> playSfx ( \"ShockWave\" )
>24591	ArgumentList	\"ShockWave\"
>24592	Argument	\"ShockWave\"
>24593	PrimaryExpression	\"ShockWave\"
>24594	Callee	core -> sound -> playSfx
>24595	PtrMemberAccess	core -> sound -> playSfx
>24596	Identifier	playSfx
>24597	PtrMemberAccess	core -> sound
>24598	Identifier	sound
>24599	Identifier	core
>24600	Label	 
>24601	Identifier	VFX_SHOCK
>24602	Condition	 
>24603	Identifier	vfx
>24641	FunctionDef	DSQ 
>24642	ParameterList	Element * e
>24643	Parameter	 
>24644	Identifier	e
>24645	ParameterType	Element *
>24646	ReturnType	void
>24647	CompoundStatement	 
>24648	IfStatement	if ( e -> bgLayer >= 0 && e -> bgLayer < 16 )
>24649	ElseStatement	else
>24650	CompoundStatement	 
>24651	ExpressionStatement	 
>24652	AssignmentExpr	e -> bgLayerNext = 0
>24653	PrimaryExpression	0
>24654	PtrMemberAccess	e -> bgLayerNext
>24655	Identifier	bgLayerNext
>24656	Identifier	e
>24657	CompoundStatement	 
>24658	ExpressionStatement	 
>24659	AssignmentExpr	firstElementOnLayer [ e -> bgLayer ] = e
>24660	Identifier	e
>24661	ArrayIndexing	firstElementOnLayer [ e -> bgLayer ]
>24662	PtrMemberAccess	e -> bgLayer
>24663	Identifier	bgLayer
>24664	Identifier	e
>24665	Identifier	firstElementOnLayer
>24666	ExpressionStatement	 
>24667	AssignmentExpr	e -> bgLayerNext = firstElementOnLayer [ e -> bgLayer ]
>24668	ArrayIndexing	firstElementOnLayer [ e -> bgLayer ]
>24669	PtrMemberAccess	e -> bgLayer
>24670	Identifier	bgLayer
>24671	Identifier	e
>24672	Identifier	firstElementOnLayer
>24673	PtrMemberAccess	e -> bgLayerNext
>24674	Identifier	bgLayerNext
>24675	Identifier	e
>24676	Condition	 
>24677	AndExpression	e -> bgLayer >= 0 && e -> bgLayer < 16
>24678	RelationalExpression	e -> bgLayer < 16
>24679	PrimaryExpression	16
>24680	PtrMemberAccess	e -> bgLayer
>24681	Identifier	bgLayer
>24682	Identifier	e
>24683	RelationalExpression	e -> bgLayer >= 0
>24684	PrimaryExpression	0
>24685	PtrMemberAccess	e -> bgLayer
>24686	Identifier	bgLayer
>24687	Identifier	e
>24688	ExpressionStatement	 
>24689	CallExpression	elements . push_back ( e )
>24690	ArgumentList	e
>24691	Argument	e
>24692	Identifier	e
>24693	Callee	elements . push_back
>24694	MemberAccess	elements . push_back
>24695	Identifier	push_back
>24696	Identifier	elements
>24709	FunctionDef	DSQ 
>24710	ParameterList	float & dt
>24711	Parameter	 
>24712	Identifier	dt
>24713	ParameterType	float &
>24714	ReturnType	void
>24715	CompoundStatement	 
>24716	IfStatement	if ( dsq -> demo . mode == Demo 
>24717	CompoundStatement	 
>24718	ExpressionStatement	 
>24719	AssignmentExpr	dt = 1.0f / 60.0f
>24720	MultiplicativeExpression	1.0f / 60.0f
>24721	PrimaryExpression	60.0f
>24722	PrimaryExpression	1.0f
>24723	Identifier	dt
>24724	Condition	 
>24725	EqualityExpression	dsq -> demo . mode == Demo 
>24726	Identifier	Demo 
>24727	MemberAccess	dsq -> demo . mode
>24728	Identifier	mode
>24729	PtrMemberAccess	dsq -> demo
>24730	Identifier	demo
>24731	Identifier	dsq
>24732	IfStatement	if ( frameOutputMode )
>24733	CompoundStatement	 
>24734	ExpressionStatement	 
>24735	AssignmentExpr	doScreenshot = true
>24736	Identifier	true
>24737	Identifier	doScreenshot
>24738	ExpressionStatement	 
>24739	AssignmentExpr	dt = 1.0f / 60.0f
>24740	MultiplicativeExpression	1.0f / 60.0f
>24741	PrimaryExpression	60.0f
>24742	PrimaryExpression	1.0f
>24743	Identifier	dt
>24744	Condition	 
>24745	Identifier	frameOutputMode
>24746	ExpressionStatement	 
>24747	AssignmentExpr	dt *= gameSpeed . x
>24748	MemberAccess	gameSpeed . x
>24749	Identifier	x
>24750	Identifier	gameSpeed
>24751	Identifier	dt
>24752	ExpressionStatement	 
>24753	CallExpression	gameSpeed . update ( dt )
>24754	ArgumentList	dt
>24755	Argument	dt
>24756	Identifier	dt
>24757	Callee	gameSpeed . update
>24758	MemberAccess	gameSpeed . update
>24759	Identifier	update
>24760	Identifier	gameSpeed
>24761	IfStatement	if ( skippingCutscene )
>24762	ExpressionStatement	 
>24763	AssignmentExpr	dt = 0.07f
>24764	PrimaryExpression	0.07f
>24765	Identifier	dt
>24766	Condition	 
>24767	Identifier	skippingCutscene
>24768	IfStatement	if ( isDeveloperKeys ( ) )
>24769	ElseStatement	else
>24770	CompoundStatement	 
>24771	IfStatement	if ( dt > FRAME_TIME )
>24772	ExpressionStatement	 
>24773	AssignmentExpr	dt = FRAME_TIME
>24774	Identifier	FRAME_TIME
>24775	Identifier	dt
>24776	Condition	 
>24777	RelationalExpression	dt > FRAME_TIME
>24778	Identifier	FRAME_TIME
>24779	Identifier	dt
>24780	CompoundStatement	 
>24781	IfStatement	if ( core -> getKeyState ( KEY_H ) )
>24782	ExpressionStatement	 
>24783	CallExpression	stopVoice ( )
>24784	ArgumentList	 
>24785	Callee	stopVoice
>24786	Identifier	stopVoice
>24787	Condition	 
>24788	CallExpression	core -> getKeyState ( KEY_H )
>24789	ArgumentList	KEY_H
>24790	Argument	KEY_H
>24791	Identifier	KEY_H
>24792	Callee	core -> getKeyState
>24793	PtrMemberAccess	core -> getKeyState
>24794	Identifier	getKeyState
>24795	Identifier	core
>24796	IfStatement	if ( core -> getKeyState ( KEY_G ) )
>24797	ElseStatement	else
>24798	IfStatement	if ( core -> getKeyState ( KEY_F ) )
>24799	ElseStatement	else
>24800	IfStatement	if ( core -> getKeyState ( KEY_H ) )
>24801	ElseStatement	else
>24802	CompoundStatement	 
>24803	IfStatement	if ( dt > FRAME_TIME )
>24804	ExpressionStatement	 
>24805	AssignmentExpr	dt = FRAME_TIME
>24806	Identifier	FRAME_TIME
>24807	Identifier	dt
>24808	Condition	 
>24809	RelationalExpression	dt > FRAME_TIME
>24810	Identifier	FRAME_TIME
>24811	Identifier	dt
>24812	ExpressionStatement	 
>24813	AssignmentExpr	dt = FRAME_TIME
>24814	Identifier	FRAME_TIME
>24815	Identifier	dt
>24816	Condition	 
>24817	CallExpression	core -> getKeyState ( KEY_H )
>24818	ArgumentList	KEY_H
>24819	Argument	KEY_H
>24820	Identifier	KEY_H
>24821	Callee	core -> getKeyState
>24822	PtrMemberAccess	core -> getKeyState
>24823	Identifier	getKeyState
>24824	Identifier	core
>24825	CompoundStatement	 
>24826	IfStatement	if ( core -> getShiftState ( ) )
>24827	ElseStatement	else
>24828	ExpressionStatement	 
>24829	AssignmentExpr	dt *= 0.6
>24830	PrimaryExpression	0.6
>24831	Identifier	dt
>24832	ExpressionStatement	 
>24833	AssignmentExpr	dt *= 0.1f
>24834	PrimaryExpression	0.1f
>24835	Identifier	dt
>24836	Condition	 
>24837	CallExpression	core -> getShiftState ( )
>24838	ArgumentList	 
>24839	Callee	core -> getShiftState
>24840	PtrMemberAccess	core -> getShiftState
>24841	Identifier	getShiftState
>24842	Identifier	core
>24843	Condition	 
>24844	CallExpression	core -> getKeyState ( KEY_F )
>24845	ArgumentList	KEY_F
>24846	Argument	KEY_F
>24847	Identifier	KEY_F
>24848	Callee	core -> getKeyState
>24849	PtrMemberAccess	core -> getKeyState
>24850	Identifier	getKeyState
>24851	Identifier	core
>24852	CompoundStatement	 
>24853	IfStatement	if ( core -> getShiftState ( ) )
>24854	ElseStatement	else
>24855	ExpressionStatement	 
>24856	AssignmentExpr	dt *= 4
>24857	PrimaryExpression	4
>24858	Identifier	dt
>24859	ExpressionStatement	 
>24860	AssignmentExpr	dt *= 10
>24861	PrimaryExpression	10
>24862	Identifier	dt
>24863	Condition	 
>24864	CallExpression	core -> getShiftState ( )
>24865	ArgumentList	 
>24866	Callee	core -> getShiftState
>24867	PtrMemberAccess	core -> getShiftState
>24868	Identifier	getShiftState
>24869	Identifier	core
>24870	Condition	 
>24871	CallExpression	core -> getKeyState ( KEY_G )
>24872	ArgumentList	KEY_G
>24873	Argument	KEY_G
>24874	Identifier	KEY_G
>24875	Callee	core -> getKeyState
>24876	PtrMemberAccess	core -> getKeyState
>24877	Identifier	getKeyState
>24878	Identifier	core
>24879	Condition	 
>24880	CallExpression	isDeveloperKeys ( )
>24881	ArgumentList	 
>24882	Callee	isDeveloperKeys
>24883	Identifier	isDeveloperKeys
>24908	FunctionDef	DSQ 
>24909	ParameterList	Element * element
>24910	Parameter	 
>24911	Identifier	element
>24912	ParameterType	Element *
>24913	ReturnType	void
>24914	CompoundStatement	 
>24915	ForStatement	for ( int i = 0 ; i < dsq -> elements . size ( ) ; i ++ )
>24916	CompoundStatement	 
>24917	IfStatement	if ( dsq -> elements [ i ] == element )
>24918	CompoundStatement	 
>24919	BreakStatement	 
>24920	ExpressionStatement	 
>24921	CallExpression	removeElement ( i )
>24922	ArgumentList	i
>24923	Argument	i
>24924	Identifier	i
>24925	Callee	removeElement
>24926	Identifier	removeElement
>24927	Condition	 
>24928	EqualityExpression	dsq -> elements [ i ] == element
>24929	Identifier	element
>24930	ArrayIndexing	dsq -> elements [ i ]
>24931	Identifier	i
>24932	PtrMemberAccess	dsq -> elements
>24933	Identifier	elements
>24934	Identifier	dsq
>24935	IncDecOp	 
>24936	IncDec	++
>24937	Identifier	i
>24938	Condition	 
>24939	RelationalExpression	i < dsq -> elements . size ( )
>24940	CallExpression	dsq -> elements . size ( )
>24941	ArgumentList	 
>24942	Callee	dsq -> elements . size
>24943	MemberAccess	dsq -> elements . size
>24944	Identifier	size
>24945	PtrMemberAccess	dsq -> elements
>24946	Identifier	elements
>24947	Identifier	dsq
>24948	Identifier	i
>24949	ForInit	 
>24950	IdentifierDeclStatement	int i = 0 ;
>24951	IdentifierDecl	i = 0
>24952	AssignmentExpr	i = 0
>24953	PrimaryExpression	0
>24954	Identifier	i
>24955	Identifier	i
>24956	IdentifierDeclType	int
>24969	FunctionDef	DSQ 
>24970	ParameterList	int idx
>24971	Parameter	 
>24972	Identifier	idx
>24973	ParameterType	int
>24974	ReturnType	void
>24975	CompoundStatement	 
>24976	IfStatement	if ( ! dsq -> game -> elementUpdateList . empty ( ) )
>24977	ExpressionStatement	 
>24978	CallExpression	dsq -> game -> rebuildElementUpdateList ( )
>24979	ArgumentList	 
>24980	Callee	dsq -> game -> rebuildElementUpdateList
>24981	PtrMemberAccess	dsq -> game -> rebuildElementUpdateList
>24982	Identifier	rebuildElementUpdateList
>24983	PtrMemberAccess	dsq -> game
>24984	Identifier	game
>24985	Identifier	dsq
>24986	Condition	 
>24987	UnaryOp	! dsq -> game -> elementUpdateList . empty ( )
>24988	CallExpression	dsq -> game -> elementUpdateList . empty ( )
>24989	ArgumentList	 
>24990	Callee	dsq -> game -> elementUpdateList . empty
>24991	MemberAccess	dsq -> game -> elementUpdateList . empty
>24992	Identifier	empty
>24993	PtrMemberAccess	dsq -> game -> elementUpdateList
>24994	Identifier	elementUpdateList
>24995	PtrMemberAccess	dsq -> game
>24996	Identifier	game
>24997	Identifier	dsq
>24998	UnaryOperator	!
>24999	ExpressionStatement	 
>25000	CallExpression	copy . clear ( )
>25001	ArgumentList	 
>25002	Callee	copy . clear
>25003	MemberAccess	copy . clear
>25004	Identifier	clear
>25005	Identifier	copy
>25006	ForStatement	for ( i = idx + 1 ; i < copy . size ( ) ; i ++ )
>25007	CompoundStatement	 
>25008	ExpressionStatement	 
>25009	CallExpression	addElement ( copy [ i ] )
>25010	ArgumentList	copy [ i ]
>25011	Argument	copy [ i ]
>25012	ArrayIndexing	copy [ i ]
>25013	Identifier	i
>25014	Identifier	copy
>25015	Callee	addElement
>25016	Identifier	addElement
>25017	IncDecOp	 
>25018	IncDec	++
>25019	Identifier	i
>25020	Condition	 
>25021	RelationalExpression	i < copy . size ( )
>25022	CallExpression	copy . size ( )
>25023	ArgumentList	 
>25024	Callee	copy . size
>25025	MemberAccess	copy . size
>25026	Identifier	size
>25027	Identifier	copy
>25028	Identifier	i
>25029	ForInit	 
>25030	AssignmentExpr	i = idx + 1
>25031	AdditiveExpression	idx + 1
>25032	PrimaryExpression	1
>25033	Identifier	idx
>25034	Identifier	i
>25035	ForStatement	for ( i = 0 ; i < idx ; i ++ )
>25036	CompoundStatement	 
>25037	ExpressionStatement	 
>25038	CallExpression	addElement ( copy [ i ] )
>25039	ArgumentList	copy [ i ]
>25040	Argument	copy [ i ]
>25041	ArrayIndexing	copy [ i ]
>25042	Identifier	i
>25043	Identifier	copy
>25044	Callee	addElement
>25045	Identifier	addElement
>25046	IncDecOp	 
>25047	IncDec	++
>25048	Identifier	i
>25049	Condition	 
>25050	RelationalExpression	i < idx
>25051	Identifier	idx
>25052	Identifier	i
>25053	ForInit	 
>25054	AssignmentExpr	i = 0
>25055	PrimaryExpression	0
>25056	Identifier	i
>25057	IdentifierDeclStatement	 
>25058	IdentifierDecl	i = 0
>25059	AssignmentExpr	i = 0
>25060	PrimaryExpression	0
>25061	Identifier	i
>25062	Identifier	i
>25063	IdentifierDeclType	int
>25064	ExpressionStatement	 
>25065	CallExpression	clearElements ( )
>25066	ArgumentList	 
>25067	Callee	clearElements
>25068	Identifier	clearElements
>25069	IdentifierDeclStatement	 
>25070	IdentifierDecl	copy = elements
>25071	AssignmentExpr	copy = elements
>25072	Identifier	elements
>25073	Identifier	elements
>25074	Identifier	copy
>25075	IdentifierDeclType	ElementContainer
>25093	FunctionDef	DSQ 
>25094	ParameterList	 
>25095	ReturnType	void
>25096	CompoundStatement	 
>25097	ForStatement	for ( int i = 0 ; i < 16 ; i ++ )
>25098	ExpressionStatement	 
>25099	AssignmentExpr	firstElementOnLayer [ i ] = 0
>25100	PrimaryExpression	0
>25101	ArrayIndexing	firstElementOnLayer [ i ]
>25102	Identifier	i
>25103	Identifier	firstElementOnLayer
>25104	IncDecOp	 
>25105	IncDec	++
>25106	Identifier	i
>25107	Condition	 
>25108	RelationalExpression	i < 16
>25109	PrimaryExpression	16
>25110	Identifier	i
>25111	ForInit	 
>25112	IdentifierDeclStatement	int i = 0 ;
>25113	IdentifierDecl	i = 0
>25114	AssignmentExpr	i = 0
>25115	PrimaryExpression	0
>25116	Identifier	i
>25117	Identifier	i
>25118	IdentifierDeclType	int
>25119	ExpressionStatement	 
>25120	CallExpression	elements . clear ( )
>25121	ArgumentList	 
>25122	Callee	elements . clear
>25123	MemberAccess	elements . clear
>25124	Identifier	clear
>25125	Identifier	elements
>25134	FunctionDef	DSQ 
>25135	ParameterList	Entity * entity
>25136	Parameter	 
>25137	Identifier	entity
>25138	ParameterType	Entity *
>25139	ReturnType	void
>25140	CompoundStatement	 
>25141	ExpressionStatement	 
>25142	AssignmentExpr	entities [ i + 1 ] = 0
>25143	PrimaryExpression	0
>25144	ArrayIndexing	entities [ i + 1 ]
>25145	AdditiveExpression	i + 1
>25146	PrimaryExpression	1
>25147	Identifier	i
>25148	Identifier	entities
>25149	ExpressionStatement	 
>25150	AssignmentExpr	entities [ i ] = entity
>25151	Identifier	entity
>25152	ArrayIndexing	entities [ i ]
>25153	Identifier	i
>25154	Identifier	entities
>25155	IfStatement	if ( i + 1 >= entities . size ( ) )
>25156	ExpressionStatement	 
>25157	CallExpression	entities . resize ( entities . size ( ) * 2 , 0 )
>25158	ArgumentList	entities . size ( ) * 2
>25159	Argument	0
>25160	PrimaryExpression	0
>25161	Argument	entities . size ( ) * 2
>25162	MultiplicativeExpression	entities . size ( ) * 2
>25163	PrimaryExpression	2
>25164	CallExpression	entities . size ( )
>25165	ArgumentList	 
>25166	Callee	entities . size
>25167	MemberAccess	entities . size
>25168	Identifier	size
>25169	Identifier	entities
>25170	Callee	entities . resize
>25171	MemberAccess	entities . resize
>25172	Identifier	resize
>25173	Identifier	entities
>25174	Condition	 
>25175	RelationalExpression	i + 1 >= entities . size ( )
>25176	CallExpression	entities . size ( )
>25177	ArgumentList	 
>25178	Callee	entities . size
>25179	MemberAccess	entities . size
>25180	Identifier	size
>25181	Identifier	entities
>25182	AdditiveExpression	i + 1
>25183	PrimaryExpression	1
>25184	Identifier	i
>25185	ForStatement	for ( i = 0 ; entities [ i ] != 0 ; i ++ )
>25186	CompoundStatement	 
>25187	IncDecOp	 
>25188	IncDec	++
>25189	Identifier	i
>25190	Condition	 
>25191	EqualityExpression	entities [ i ] != 0
>25192	PrimaryExpression	0
>25193	ArrayIndexing	entities [ i ]
>25194	Identifier	i
>25195	Identifier	entities
>25196	ForInit	 
>25197	AssignmentExpr	i = 0
>25198	PrimaryExpression	0
>25199	Identifier	i
>25200	IdentifierDeclStatement	 
>25201	IdentifierDecl	i
>25202	Identifier	i
>25203	IdentifierDeclType	int
>25213	FunctionDef	DSQ 
>25214	ParameterList	Entity * entity
>25215	Parameter	 
>25216	Identifier	entity
>25217	ParameterType	Entity *
>25218	ReturnType	void
>25219	CompoundStatement	 
>25220	ForStatement	for ( ; entities [ i ] != 0 ; i ++ )
>25221	CompoundStatement	 
>25222	ExpressionStatement	 
>25223	AssignmentExpr	entities [ i ] = entities [ i + 1 ]
>25224	ArrayIndexing	entities [ i + 1 ]
>25225	AdditiveExpression	i + 1
>25226	PrimaryExpression	1
>25227	Identifier	i
>25228	Identifier	entities
>25229	ArrayIndexing	entities [ i ]
>25230	Identifier	i
>25231	Identifier	entities
>25232	IncDecOp	 
>25233	IncDec	++
>25234	Identifier	i
>25235	Condition	 
>25236	EqualityExpression	entities [ i ] != 0
>25237	PrimaryExpression	0
>25238	ArrayIndexing	entities [ i ]
>25239	Identifier	i
>25240	Identifier	entities
>25241	ForStatement	for ( i = 0 ; entities [ i ] != 0 ; i ++ )
>25242	CompoundStatement	 
>25243	IfStatement	if ( entities [ i ] == entity )
>25244	BreakStatement	 
>25245	Condition	 
>25246	EqualityExpression	entities [ i ] == entity
>25247	Identifier	entity
>25248	ArrayIndexing	entities [ i ]
>25249	Identifier	i
>25250	Identifier	entities
>25251	IncDecOp	 
>25252	IncDec	++
>25253	Identifier	i
>25254	Condition	 
>25255	EqualityExpression	entities [ i ] != 0
>25256	PrimaryExpression	0
>25257	ArrayIndexing	entities [ i ]
>25258	Identifier	i
>25259	Identifier	entities
>25260	ForInit	 
>25261	AssignmentExpr	i = 0
>25262	PrimaryExpression	0
>25263	Identifier	i
>25264	IdentifierDeclStatement	 
>25265	IdentifierDecl	i
>25266	Identifier	i
>25267	IdentifierDeclType	int
>25276	FunctionDef	DSQ 
>25277	ParameterList	 
>25278	ReturnType	void
>25279	CompoundStatement	 
>25280	ForStatement	for ( i = 0 ; i < size ; i ++ )
>25281	CompoundStatement	 
>25282	ExpressionStatement	 
>25283	AssignmentExpr	entities [ i ] = 0
>25284	PrimaryExpression	0
>25285	ArrayIndexing	entities [ i ]
>25286	Identifier	i
>25287	Identifier	entities
>25288	IncDecOp	 
>25289	IncDec	++
>25290	Identifier	i
>25291	Condition	 
>25292	RelationalExpression	i < size
>25293	Identifier	size
>25294	Identifier	i
>25295	ForInit	 
>25296	AssignmentExpr	i = 0
>25297	PrimaryExpression	0
>25298	Identifier	i
>25299	IdentifierDeclStatement	 
>25300	IdentifierDecl	i
>25301	Identifier	i
>25302	IdentifierDeclType	int
>25303	IdentifierDeclStatement	 
>25304	IdentifierDecl	size = entities . size ( )
>25305	AssignmentExpr	size = entities . size ( )
>25306	CallExpression	entities . size ( )
>25307	ArgumentList	 
>25308	Callee	entities . size
>25309	MemberAccess	entities . size
>25310	Identifier	size
>25311	Identifier	entities
>25312	Identifier	size
>25313	Identifier	size
>25314	IdentifierDeclType	const int
>25324	FunctionDef	DSQ 
>25325	ParameterList	 
>25326	ReturnType	std 
>25327	CompoundStatement	 
>25328	ReturnStatement	 
>25329	AdditiveExpression	getUserDataFolder ( ) + \"/save\"
>25330	PrimaryExpression	\"/save\"
>25331	CallExpression	getUserDataFolder ( )
>25332	ArgumentList	 
>25333	Callee	getUserDataFolder
>25334	Identifier	getUserDataFolder
>25339	FunctionDef	DSQ 
>25340	ParameterList	const std 
>25341	Parameter	 
>25342	Identifier	follow
>25343	ParameterType	float
>25344	Parameter	 
>25345	Identifier	layer
>25346	ParameterType	int
>25347	Parameter	 
>25348	Identifier	t
>25349	ParameterType	float
>25350	Parameter	 
>25351	Identifier	rotz
>25352	ParameterType	float
>25353	Parameter	 
>25354	Identifier	position
>25355	ParameterType	Vector
>25356	Parameter	 
>25357	Identifier	name
>25358	ParameterType	const std 
>25359	ReturnType	ParticleEffect *
>25360	CompoundStatement	 
>25361	ReturnStatement	 
>25362	Identifier	e
>25363	ExpressionStatement	 
>25364	AssignmentExpr	e -> followCamera = follow
>25365	Identifier	follow
>25366	PtrMemberAccess	e -> followCamera
>25367	Identifier	followCamera
>25368	Identifier	e
>25369	IdentifierDeclStatement	 
>25370	IdentifierDecl	* e = core -> createParticleEffect ( name , position , layer , rotz )
>25371	AssignmentExpr	* e = core -> createParticleEffect ( name , position , layer , rotz )
>25372	CallExpression	core -> createParticleEffect ( name , position , layer , rotz )
>25373	ArgumentList	name
>25374	Argument	rotz
>25375	Identifier	rotz
>25376	Argument	layer
>25377	Identifier	layer
>25378	Argument	position
>25379	Identifier	position
>25380	Argument	name
>25381	Identifier	name
>25382	Callee	core -> createParticleEffect
>25383	PtrMemberAccess	core -> createParticleEffect
>25384	Identifier	createParticleEffect
>25385	Identifier	core
>25386	Identifier	e
>25387	Identifier	e
>25388	IdentifierDeclType	ParticleEffect *
>25389	IfStatement	if ( t != 0 )
>25390	CompoundStatement	 
>25391	ReturnStatement	 
>25392	Identifier	NULL
>25393	ExpressionStatement	 
>25394	CallExpression	pecue . push_back ( p )
>25395	ArgumentList	p
>25396	Argument	p
>25397	Identifier	p
>25398	Callee	pecue . push_back
>25399	MemberAccess	pecue . push_back
>25400	Identifier	push_back
>25401	Identifier	pecue
>25402	IdentifierDeclStatement	 
>25403	IdentifierDecl	p ( name , position , rotz , t )
>25404	Expression	name , position , rotz , t
>25405	Expression	position , rotz , t
>25406	Expression	rotz , t
>25407	Identifier	t
>25408	Identifier	rotz
>25409	Identifier	position
>25410	Identifier	name
>25411	Identifier	p
>25412	IdentifierDeclType	PECue
>25413	Condition	 
>25414	EqualityExpression	t != 0
>25415	PrimaryExpression	0
>25416	Identifier	t
>25417	IfStatement	if ( name . empty ( ) )
>25418	ReturnStatement	 
>25419	Identifier	NULL
>25420	Condition	 
>25421	CallExpression	name . empty ( )
>25422	ArgumentList	 
>25423	Callee	name . empty
>25424	MemberAccess	name . empty
>25425	Identifier	empty
>25426	Identifier	name
>25446	FunctionDef	DSQ 
>25447	ParameterList	const Vector & position
>25448	Parameter	 
>25449	Identifier	position
>25450	ParameterType	const Vector &
>25451	ReturnType	void
>25452	CompoundStatement	 
>25453	ExpressionStatement	 
>25454	CallExpression	continuity . spawnAllIngredients ( position )
>25455	ArgumentList	position
>25456	Argument	position
>25457	Identifier	position
>25458	Callee	continuity . spawnAllIngredients
>25459	MemberAccess	continuity . spawnAllIngredients
>25460	Identifier	spawnAllIngredients
>25461	Identifier	continuity
>25467	FunctionDef	DSQ 
>25468	ParameterList	float dt
>25469	Parameter	 
>25470	Identifier	dt
>25471	ParameterType	float
>25472	ReturnType	void
>25473	CompoundStatement	 
>25474	IfStatement	if ( ! core -> particlesPaused )
>25475	CompoundStatement	 
>25476	IfStatement	if ( nz == 0 )
>25477	CompoundStatement	 
>25478	ExpressionStatement	 
>25479	CallExpression	pecue . clear ( )
>25480	ArgumentList	 
>25481	Callee	pecue . clear
>25482	MemberAccess	pecue . clear
>25483	Identifier	clear
>25484	Identifier	pecue
>25485	Condition	 
>25486	EqualityExpression	nz == 0
>25487	PrimaryExpression	0
>25488	Identifier	nz
>25489	ForStatement	for ( int i = 0 ; i < pecue . size ( ) ; i ++ )
>25490	CompoundStatement	 
>25491	IfStatement	if ( p -> t > 0 )
>25492	CompoundStatement	 
>25493	ExpressionStatement	 
>25494	IncDecOp	nz ++
>25495	IncDec	++
>25496	Identifier	nz
>25497	IfStatement	if ( p -> t < 0 )
>25498	CompoundStatement	 
>25499	ExpressionStatement	 
>25500	CallExpression	spawnParticleEffect ( p -> name , p -> pos , p -> rot , 0 )
>25501	ArgumentList	p -> name
>25502	Argument	0
>25503	PrimaryExpression	0
>25504	Argument	p -> rot
>25505	PtrMemberAccess	p -> rot
>25506	Identifier	rot
>25507	Identifier	p
>25508	Argument	p -> pos
>25509	PtrMemberAccess	p -> pos
>25510	Identifier	pos
>25511	Identifier	p
>25512	Argument	p -> name
>25513	PtrMemberAccess	p -> name
>25514	Identifier	name
>25515	Identifier	p
>25516	Callee	spawnParticleEffect
>25517	Identifier	spawnParticleEffect
>25518	ExpressionStatement	 
>25519	AssignmentExpr	p -> t = 0
>25520	PrimaryExpression	0
>25521	PtrMemberAccess	p -> t
>25522	Identifier	t
>25523	Identifier	p
>25524	Condition	 
>25525	RelationalExpression	p -> t < 0
>25526	PrimaryExpression	0
>25527	PtrMemberAccess	p -> t
>25528	Identifier	t
>25529	Identifier	p
>25530	ExpressionStatement	 
>25531	AssignmentExpr	p -> t -= dt
>25532	Identifier	dt
>25533	PtrMemberAccess	p -> t
>25534	Identifier	t
>25535	Identifier	p
>25536	Condition	 
>25537	RelationalExpression	p -> t > 0
>25538	PrimaryExpression	0
>25539	PtrMemberAccess	p -> t
>25540	Identifier	t
>25541	Identifier	p
>25542	IdentifierDeclStatement	 
>25543	IdentifierDecl	* p = & pecue [ i ]
>25544	AssignmentExpr	* p = & pecue [ i ]
>25545	UnaryOp	& pecue [ i ]
>25546	ArrayIndexing	pecue [ i ]
>25547	Identifier	i
>25548	Identifier	pecue
>25549	UnaryOperator	&
>25550	Identifier	p
>25551	Identifier	p
>25552	IdentifierDeclType	PECue *
>25553	IncDecOp	 
>25554	IncDec	++
>25555	Identifier	i
>25556	Condition	 
>25557	RelationalExpression	i < pecue . size ( )
>25558	CallExpression	pecue . size ( )
>25559	ArgumentList	 
>25560	Callee	pecue . size
>25561	MemberAccess	pecue . size
>25562	Identifier	size
>25563	Identifier	pecue
>25564	Identifier	i
>25565	ForInit	 
>25566	IdentifierDeclStatement	int i = 0 ;
>25567	IdentifierDecl	i = 0
>25568	AssignmentExpr	i = 0
>25569	PrimaryExpression	0
>25570	Identifier	i
>25571	Identifier	i
>25572	IdentifierDeclType	int
>25573	IdentifierDeclStatement	 
>25574	IdentifierDecl	nz = 0
>25575	AssignmentExpr	nz = 0
>25576	PrimaryExpression	0
>25577	Identifier	nz
>25578	Identifier	nz
>25579	IdentifierDeclType	int
>25580	Condition	 
>25581	UnaryOp	! core -> particlesPaused
>25582	PtrMemberAccess	core -> particlesPaused
>25583	Identifier	particlesPaused
>25584	Identifier	core
>25585	UnaryOperator	!
>25605	FunctionDef	AquariaScreenTransition 
>25606	ParameterList	 
>25607	ReturnType	void
>25608	CompoundStatement	 
>25609	ExpressionStatement	 
>25610	AssignmentExpr	this -> alpha = 1
>25611	PrimaryExpression	1
>25612	PtrMemberAccess	this -> alpha
>25613	Identifier	alpha
>25614	Identifier	this
>25615	ExpressionStatement	 
>25616	CallExpression	core -> showBuffer ( )
>25617	ArgumentList	 
>25618	Callee	core -> showBuffer
>25619	PtrMemberAccess	core -> showBuffer
>25620	Identifier	showBuffer
>25621	Identifier	core
>25622	ExpressionStatement	 
>25623	CallExpression	core -> render ( )
>25624	ArgumentList	 
>25625	Callee	core -> render
>25626	PtrMemberAccess	core -> render
>25627	Identifier	render
>25628	Identifier	core
>25629	ExpressionStatement	 
>25630	AssignmentExpr	dsq -> cursor -> alpha = oldAlpha
>25631	Identifier	oldAlpha
>25632	PtrMemberAccess	dsq -> cursor -> alpha
>25633	Identifier	alpha
>25634	PtrMemberAccess	dsq -> cursor
>25635	Identifier	cursor
>25636	Identifier	dsq
>25637	ExpressionStatement	 
>25638	CallExpression	glCopyTexSubImage2D ( GL_TEXTURE_2D , 0 , 0 , 0 , 0 , 0 , width , height )
>25639	ArgumentList	GL_TEXTURE_2D
>25640	Argument	height
>25641	Identifier	height
>25642	Argument	width
>25643	Identifier	width
>25644	Argument	0
>25645	PrimaryExpression	0
>25646	Argument	0
>25647	PrimaryExpression	0
>25648	Argument	0
>25649	PrimaryExpression	0
>25650	Argument	0
>25651	PrimaryExpression	0
>25652	Argument	0
>25653	PrimaryExpression	0
>25654	Argument	GL_TEXTURE_2D
>25655	Identifier	GL_TEXTURE_2D
>25656	Callee	glCopyTexSubImage2D
>25657	Identifier	glCopyTexSubImage2D
>25658	ExpressionStatement	 
>25659	CallExpression	glBindTexture ( GL_TEXTURE_2D , screen_texture )
>25660	ArgumentList	GL_TEXTURE_2D
>25661	Argument	screen_texture
>25662	Identifier	screen_texture
>25663	Argument	GL_TEXTURE_2D
>25664	Identifier	GL_TEXTURE_2D
>25665	Callee	glBindTexture
>25666	Identifier	glBindTexture
>25667	ExpressionStatement	 
>25668	AssignmentExpr	height = core -> getWindowHeight ( )
>25669	CallExpression	core -> getWindowHeight ( )
>25670	ArgumentList	 
>25671	Callee	core -> getWindowHeight
>25672	PtrMemberAccess	core -> getWindowHeight
>25673	Identifier	getWindowHeight
>25674	Identifier	core
>25675	Identifier	height
>25676	ExpressionStatement	 
>25677	AssignmentExpr	width = core -> getWindowWidth ( )
>25678	CallExpression	core -> getWindowWidth ( )
>25679	ArgumentList	 
>25680	Callee	core -> getWindowWidth
>25681	PtrMemberAccess	core -> getWindowWidth
>25682	Identifier	getWindowWidth
>25683	Identifier	core
>25684	Identifier	width
>25685	ExpressionStatement	 
>25686	CallExpression	core -> render ( )
>25687	ArgumentList	 
>25688	Callee	core -> render
>25689	PtrMemberAccess	core -> render
>25690	Identifier	render
>25691	Identifier	core
>25692	IdentifierDeclStatement	 
>25693	IdentifierDecl	height = 0
>25694	AssignmentExpr	height = 0
>25695	PrimaryExpression	0
>25696	Identifier	height
>25697	Identifier	height
>25698	IdentifierDeclType	int
>25699	IdentifierDecl	width = 0
>25700	AssignmentExpr	width = 0
>25701	PrimaryExpression	0
>25702	Identifier	width
>25703	Identifier	width
>25704	IdentifierDeclType	int
>25705	ExpressionStatement	 
>25706	AssignmentExpr	dsq -> cursor -> alpha . x = 0
>25707	PrimaryExpression	0
>25708	MemberAccess	dsq -> cursor -> alpha . x
>25709	Identifier	x
>25710	PtrMemberAccess	dsq -> cursor -> alpha
>25711	Identifier	alpha
>25712	PtrMemberAccess	dsq -> cursor
>25713	Identifier	cursor
>25714	Identifier	dsq
>25715	IdentifierDeclStatement	 
>25716	IdentifierDecl	oldAlpha = dsq -> cursor -> alpha
>25717	AssignmentExpr	oldAlpha = dsq -> cursor -> alpha
>25718	PtrMemberAccess	dsq -> cursor -> alpha
>25719	Identifier	alpha
>25720	PtrMemberAccess	dsq -> cursor
>25721	Identifier	cursor
>25722	Identifier	dsq
>25723	Identifier	oldAlpha
>25724	Identifier	oldAlpha
>25725	IdentifierDeclType	InterpolatedVector
>25726	ExpressionStatement	 
>25727	AssignmentExpr	this -> alpha = 0
>25728	PrimaryExpression	0
>25729	PtrMemberAccess	this -> alpha
>25730	Identifier	alpha
>25731	Identifier	this
>25754	FunctionDef	DSQ 
>25755	ParameterList	bool on , bool canSkip
>25756	Parameter	 
>25757	Identifier	canSkip
>25758	ParameterType	bool
>25759	Parameter	 
>25760	Identifier	on
>25761	ParameterType	bool
>25762	ReturnType	void
>25763	CompoundStatement	 
>25764	ExpressionStatement	 
>25765	AssignmentExpr	_canSkipCutscene = canSkip
>25766	Identifier	canSkip
>25767	Identifier	_canSkipCutscene
>25768	ExpressionStatement	 
>25769	AssignmentExpr	inCutscene = on
>25770	Identifier	on
>25771	Identifier	inCutscene
>25779	FunctionDef	DSQ 
>25780	ParameterList	 
>25781	ReturnType	bool
>25782	CompoundStatement	 
>25783	ReturnStatement	 
>25784	Identifier	_canSkipCutscene
>25789	FunctionDef	DSQ 
>25790	ParameterList	 
>25791	ReturnType	bool
>25792	CompoundStatement	 
>25793	ReturnStatement	 
>25794	Identifier	skippingCutscene
>25799	FunctionDef	DSQ 
>25800	ParameterList	 
>25801	ReturnType	bool
>25802	CompoundStatement	 
>25803	ReturnStatement	 
>25804	Identifier	inCutscene
>25809	FunctionDef	DSQ 
>25810	ParameterList	 
>25811	ReturnType	bool
>25812	CompoundStatement	 
>25813	ReturnStatement	 
>25814	Identifier	cutscenePaused
>25819	FunctionDef	DSQ 
>25820	ParameterList	bool on
>25821	Parameter	 
>25822	Identifier	on
>25823	ParameterType	bool
>25824	ReturnType	void
>25825	CompoundStatement	 
>25826	ExpressionStatement	 
>25827	CallExpression	cutsceneEffects ( on )
>25828	ArgumentList	on
>25829	Argument	on
>25830	Identifier	on
>25831	Callee	cutsceneEffects
>25832	Identifier	cutsceneEffects
>25833	ExpressionStatement	 
>25834	AssignmentExpr	cutscenePaused = on
>25835	Identifier	on
>25836	Identifier	cutscenePaused
>25842	FunctionDef	DSQ 
>25843	ParameterList	bool on
>25844	Parameter	 
>25845	Identifier	on
>25846	ParameterType	bool
>25847	ReturnType	void
>25848	CompoundStatement	 
>25849	IfStatement	if ( cutscene_bg && cutscene_text && cutscene_text2 )
>25850	CompoundStatement	 
>25851	ExpressionStatement	 
>25852	AssignmentExpr	cutscene_text2 -> alpha . x = ( on && dsq -> canSkipCutscene ( ) ) ? 1 
>25853	ConditionalExpression	( on && dsq -> canSkipCutscene ( ) ) ? 1 
>25854	PrimaryExpression	0
>25855	PrimaryExpression	1
>25856	Condition	on && dsq -> canSkipCutscene ( )
>25857	AndExpression	on && dsq -> canSkipCutscene ( )
>25858	CallExpression	dsq -> canSkipCutscene ( )
>25859	ArgumentList	 
>25860	Callee	dsq -> canSkipCutscene
>25861	PtrMemberAccess	dsq -> canSkipCutscene
>25862	Identifier	canSkipCutscene
>25863	Identifier	dsq
>25864	Identifier	on
>25865	MemberAccess	cutscene_text2 -> alpha . x
>25866	Identifier	x
>25867	PtrMemberAccess	cutscene_text2 -> alpha
>25868	Identifier	alpha
>25869	Identifier	cutscene_text2
>25870	ExpressionStatement	 
>25871	AssignmentExpr	cutscene_text -> alpha . x = on ? 1 
>25872	ConditionalExpression	on ? 1 
>25873	PrimaryExpression	0
>25874	PrimaryExpression	1
>25875	Condition	on
>25876	Identifier	on
>25877	MemberAccess	cutscene_text -> alpha . x
>25878	Identifier	x
>25879	PtrMemberAccess	cutscene_text -> alpha
>25880	Identifier	alpha
>25881	Identifier	cutscene_text
>25882	ExpressionStatement	 
>25883	AssignmentExpr	cutscene_bg -> alpha . x = on ? 1 
>25884	ConditionalExpression	on ? 1 
>25885	PrimaryExpression	0
>25886	PrimaryExpression	1
>25887	Condition	on
>25888	Identifier	on
>25889	MemberAccess	cutscene_bg -> alpha . x
>25890	Identifier	x
>25891	PtrMemberAccess	cutscene_bg -> alpha
>25892	Identifier	alpha
>25893	Identifier	cutscene_bg
>25894	IfStatement	if ( canSkipCutscene ( ) )
>25895	ElseStatement	else
>25896	CompoundStatement	 
>25897	ExpressionStatement	 
>25898	AssignmentExpr	cutscene_text2 -> offset = Vector ( 0 , 0 )
>25899	CallExpression	Vector ( 0 , 0 )
>25900	ArgumentList	0
>25901	Argument	0
>25902	PrimaryExpression	0
>25903	Argument	0
>25904	PrimaryExpression	0
>25905	Callee	Vector
>25906	Identifier	Vector
>25907	PtrMemberAccess	cutscene_text2 -> offset
>25908	Identifier	offset
>25909	Identifier	cutscene_text2
>25910	ExpressionStatement	 
>25911	AssignmentExpr	cutscene_text -> offset = Vector ( 0 , 0 )
>25912	CallExpression	Vector ( 0 , 0 )
>25913	ArgumentList	0
>25914	Argument	0
>25915	PrimaryExpression	0
>25916	Argument	0
>25917	PrimaryExpression	0
>25918	Callee	Vector
>25919	Identifier	Vector
>25920	PtrMemberAccess	cutscene_text -> offset
>25921	Identifier	offset
>25922	Identifier	cutscene_text
>25923	CompoundStatement	 
>25924	ExpressionStatement	 
>25925	AssignmentExpr	cutscene_text2 -> offset = Vector ( 0 , - 10 )
>25926	CallExpression	Vector ( 0 , - 10 )
>25927	ArgumentList	0
>25928	Argument	- 10
>25929	UnaryOp	- 10
>25930	PrimaryExpression	10
>25931	UnaryOperator	-
>25932	Argument	0
>25933	PrimaryExpression	0
>25934	Callee	Vector
>25935	Identifier	Vector
>25936	PtrMemberAccess	cutscene_text2 -> offset
>25937	Identifier	offset
>25938	Identifier	cutscene_text2
>25939	ExpressionStatement	 
>25940	AssignmentExpr	cutscene_text -> offset = Vector ( 0 , - 10 )
>25941	CallExpression	Vector ( 0 , - 10 )
>25942	ArgumentList	0
>25943	Argument	- 10
>25944	UnaryOp	- 10
>25945	PrimaryExpression	10
>25946	UnaryOperator	-
>25947	Argument	0
>25948	PrimaryExpression	0
>25949	Callee	Vector
>25950	Identifier	Vector
>25951	PtrMemberAccess	cutscene_text -> offset
>25952	Identifier	offset
>25953	Identifier	cutscene_text
>25954	Condition	 
>25955	CallExpression	canSkipCutscene ( )
>25956	ArgumentList	 
>25957	Callee	canSkipCutscene
>25958	Identifier	canSkipCutscene
>25959	Condition	 
>25960	AndExpression	cutscene_bg && cutscene_text && cutscene_text2
>25961	AndExpression	cutscene_text && cutscene_text2
>25962	Identifier	cutscene_text2
>25963	Identifier	cutscene_text
>25964	Identifier	cutscene_bg
>25988	FunctionDef	DSQ 
>25989	ParameterList	 
>25990	ReturnType	void
>25991	CompoundStatement	 
>25992	ExpressionStatement	 
>25993	CallExpression	Core 
>25994	ArgumentList	 
>25995	Callee	Core 
>25996	Identifier	Core 
>25997	ExpressionStatement	 
>25998	CallExpression	Network 
>25999	ArgumentList	 
>26000	Callee	Network 
>26001	Identifier	Network 
>26005	FunctionDef	DSQ 
>26006	ParameterList	 
>26007	ReturnType	void
>26008	CompoundStatement	 
>26009	ExpressionStatement	 
>26010	AssignmentExpr	renderObjectLayers [ LR_ENTITIES ] . endPass = 5
>26011	PrimaryExpression	5
>26012	MemberAccess	renderObjectLayers [ LR_ENTITIES ] . endPass
>26013	Identifier	endPass
>26014	ArrayIndexing	renderObjectLayers [ LR_ENTITIES ]
>26015	Identifier	LR_ENTITIES
>26016	Identifier	renderObjectLayers
>26017	ExpressionStatement	 
>26018	AssignmentExpr	renderObjectLayers [ LR_ENTITIES ] . startPass = - 2
>26019	UnaryOp	- 2
>26020	PrimaryExpression	2
>26021	UnaryOperator	-
>26022	MemberAccess	renderObjectLayers [ LR_ENTITIES ] . startPass
>26023	Identifier	startPass
>26024	ArrayIndexing	renderObjectLayers [ LR_ENTITIES ]
>26025	Identifier	LR_ENTITIES
>26026	Identifier	renderObjectLayers
>26027	ForStatement	for ( size_t i = 0 ; i < renderObjectLayers . size ( ) ; ++ i )
>26028	CompoundStatement	 
>26029	ExpressionStatement	 
>26030	AssignmentExpr	renderObjectLayers [ i ] . endPass = 0
>26031	PrimaryExpression	0
>26032	MemberAccess	renderObjectLayers [ i ] . endPass
>26033	Identifier	endPass
>26034	ArrayIndexing	renderObjectLayers [ i ]
>26035	Identifier	i
>26036	Identifier	renderObjectLayers
>26037	ExpressionStatement	 
>26038	AssignmentExpr	renderObjectLayers [ i ] . startPass = 0
>26039	PrimaryExpression	0
>26040	MemberAccess	renderObjectLayers [ i ] . startPass
>26041	Identifier	startPass
>26042	ArrayIndexing	renderObjectLayers [ i ]
>26043	Identifier	i
>26044	Identifier	renderObjectLayers
>26045	UnaryExpression	 
>26046	Identifier	i
>26047	IncDec	++
>26048	Condition	 
>26049	RelationalExpression	i < renderObjectLayers . size ( )
>26050	CallExpression	renderObjectLayers . size ( )
>26051	ArgumentList	 
>26052	Callee	renderObjectLayers . size
>26053	MemberAccess	renderObjectLayers . size
>26054	Identifier	size
>26055	Identifier	renderObjectLayers
>26056	Identifier	i
>26057	ForInit	 
>26058	IdentifierDeclStatement	size_t i = 0 ;
>26059	IdentifierDecl	i = 0
>26060	AssignmentExpr	i = 0
>26061	PrimaryExpression	0
>26062	Identifier	i
>26063	Identifier	i
>26064	IdentifierDeclType	size_t
>26079	FunctionDef	DSQ 
>26080	ParameterList	 
>26081	ReturnType	bool
>26082	CompoundStatement	 
>26083	ReturnStatement	 
>26084	OrExpression	( inputMode != INPUT_MOUSE ) || ( ! game -> miniMapRender || ! game -> miniMapRender -> isCursorIn ( ) )
>26085	OrExpression	! game -> miniMapRender || ! game -> miniMapRender -> isCursorIn ( )
>26086	UnaryOp	! game -> miniMapRender -> isCursorIn ( )
>26087	CallExpression	game -> miniMapRender -> isCursorIn ( )
>26088	ArgumentList	 
>26089	Callee	game -> miniMapRender -> isCursorIn
>26090	PtrMemberAccess	game -> miniMapRender -> isCursorIn
>26091	Identifier	isCursorIn
>26092	PtrMemberAccess	game -> miniMapRender
>26093	Identifier	miniMapRender
>26094	Identifier	game
>26095	UnaryOperator	!
>26096	UnaryOp	! game -> miniMapRender
>26097	PtrMemberAccess	game -> miniMapRender
>26098	Identifier	miniMapRender
>26099	Identifier	game
>26100	UnaryOperator	!
>26101	EqualityExpression	inputMode != INPUT_MOUSE
>26102	Identifier	INPUT_MOUSE
>26103	Identifier	inputMode
<3=12,11,4
<4=8,5
<5=7,6
<8=10,9
<12=426,409,13
<13=400,209,14
<14=15
<15=200,31,16
<16=17
<17=18
<18=19
<19=29,20
<20=27,25,23,21
<21=22
<23=24
<25=26
<27=28
<29=30
<31=186,178,158,142,133,126,119,112,77,68,67,66,65,63,49,42,32
<32=40,33
<33=34
<34=38,35
<35=36
<36=37
<38=39
<40=41
<42=43
<43=47,44
<44=45
<45=46
<47=48
<49=54,50
<50=51
<51=53,52
<54=55
<55=57,56
<57=61,58
<58=59
<59=60
<61=62
<63=64
<68=73,69
<69=70
<70=72,71
<73=74
<74=76,75
<77=93,78
<78=79
<79=92,80
<80=82,81
<82=90,83
<83=88,86,84
<84=85
<86=87
<88=89
<90=91
<93=94
<94=109,95
<95=97,96
<97=108,98
<98=106,99
<99=104,102,100
<100=101
<102=103
<104=105
<106=107
<109=111,110
<112=113
<113=118,117,114
<114=116,115
<119=120
<120=125,124,121
<121=123,122
<126=127
<127=132,131,128
<128=130,129
<133=134
<134=141,140,135
<135=139,136
<136=138,137
<142=152,143
<143=145,144
<145=146
<146=150,147
<147=148
<148=149
<150=151
<152=153
<153=157,154
<154=156,155
<158=159
<159=177,176,160
<160=175,161
<161=173,162
<162=171,165,163
<163=164
<165=166
<166=170,167
<167=169,168
<171=172
<173=174
<178=180,179
<180=181
<181=185,182
<182=184,183
<186=187
<187=199,198,188
<188=197,189
<189=195,190
<190=193,191
<191=192
<193=194
<195=196
<200=201
<201=207,202
<202=203
<203=204
<204=206,205
<207=208
<209=393,381,375,371,217,210
<210=211
<211=215,212
<212=213
<213=214
<215=216
<217=360,218
<218=332,309,302,285,262,255,238,229,228,227,226,224,223,222,221,219
<219=220
<224=225
<229=230
<230=236,231
<231=234,232
<232=233
<234=235
<236=237
<238=239
<239=253,240
<240=251,249,247,245,241
<241=242
<242=244,243
<245=246
<247=248
<249=250
<251=252
<253=254
<255=256
<256=261,260,257
<257=259,258
<262=263
<263=284,283,264
<264=282,265
<265=276,266
<266=268,267
<268=274,269
<269=270
<270=271
<271=273,272
<274=275
<276=280,277
<277=278
<278=279
<280=281
<285=286
<286=300,287
<287=298,296,294,292,288
<288=289
<289=291,290
<292=293
<294=295
<296=297
<298=299
<300=301
<302=303
<303=308,307,304
<304=306,305
<309=310
<310=331,330,311
<311=329,312
<312=323,313
<313=315,314
<315=321,316
<316=317
<317=318
<318=320,319
<321=322
<323=327,324
<324=325
<325=326
<327=328
<332=334,333
<334=335
<335=348,336
<336=338,337
<338=346,339
<339=342,340
<340=341
<342=343
<343=345,344
<346=347
<348=350,349
<350=358,351
<351=354,352
<352=353
<354=355
<355=357,356
<358=359
<360=361
<361=363,362
<363=370,364
<364=368,365
<365=366
<366=367
<368=369
<371=372
<372=374,373
<375=377,376
<377=378
<378=380,379
<381=382
<382=392,391,383
<383=390,384
<384=388,385
<385=386
<386=387
<388=389
<393=394
<394=398,395
<395=396
<396=397
<398=399
<400=401
<401=407,402
<402=403
<403=404
<404=406,405
<407=408
<409=411,410
<411=412
<412=416,413
<413=415,414
<416=424,417
<417=422,418
<418=419
<419=421,420
<422=423
<424=425
<426=427
<427=429,428
<489=497,490
<490=494,491
<491=493,492
<494=496,495
<497=733,729,725,721,717,713,709,705,701,695,681,677,673,669,665,661,657,653,649,645,641,637,633,629,625,621,617,613,609,603,599,595,591,587,583,579,575,571,562,551,547,541,526,520,498
<498=512,508,505,499
<499=500
<500=502,501
<502=504,503
<505=507,506
<508=509
<509=511,510
<512=513
<513=514
<514=519,518,515
<515=517,516
<520=521
<521=525,522
<522=524,523
<526=527
<527=537,528
<528=529
<529=530
<530=532,531
<532=534,533
<534=536,535
<537=538
<538=540,539
<541=542
<542=546,543
<543=545,544
<547=548
<548=550,549
<551=552
<552=558,553
<553=556,554
<554=555
<556=557
<558=559
<559=561,560
<562=563
<563=567,564
<564=565
<565=566
<567=568
<568=570,569
<571=572
<572=574,573
<575=576
<576=578,577
<579=580
<580=582,581
<583=584
<584=586,585
<587=588
<588=590,589
<591=592
<592=594,593
<595=596
<596=598,597
<599=600
<600=602,601
<603=604
<604=608,605
<605=607,606
<609=610
<610=612,611
<613=614
<614=616,615
<617=618
<618=620,619
<621=622
<622=624,623
<625=626
<626=628,627
<629=630
<630=632,631
<633=634
<634=636,635
<637=638
<638=640,639
<641=642
<642=644,643
<645=646
<646=648,647
<649=650
<650=652,651
<653=654
<654=656,655
<657=658
<658=660,659
<661=662
<662=664,663
<665=666
<666=668,667
<669=670
<670=672,671
<673=674
<674=676,675
<677=678
<678=680,679
<681=682
<682=694,683
<683=693,684
<684=692,685
<685=691,686
<686=690,687
<687=689,688
<695=696
<696=700,697
<697=699,698
<701=702
<702=704,703
<705=706
<706=708,707
<709=710
<710=712,711
<713=714
<714=716,715
<717=718
<718=720,719
<721=722
<722=724,723
<725=726
<726=728,727
<729=730
<730=732,731
<733=734
<734=736,735
<810=812,811
<812=813
<813=814
<814=816,815
<821=824,823,822
<824=825
<825=851,826
<826=827
<827=842,828
<828=829
<829=840,830
<830=831
<831=832
<832=836,833
<833=834
<834=835
<836=837
<837=839,838
<840=841
<842=843
<843=850,844
<844=846,845
<846=847
<847=849,848
<851=852
<852=854,853
<854=855
<865=868,867,866
<868=877,869
<869=870
<870=872,871
<872=874,873
<874=876,875
<877=878
<878=884,879
<879=880
<880=881
<881=883,882
<884=885
<885=887,886
<896=899,898,897
<899=900
<900=901
<901=908,902
<902=903
<903=904
<904=906,905
<906=907
<908=909
<909=911,910
<911=912
<917=920,919,918
<920=932,928,921
<921=922
<922=926,923
<923=924
<924=925
<926=927
<928=929
<929=931,930
<932=933
<933=937,934
<934=935
<935=936
<937=938
<945=957,956,946
<946=953,950,947
<947=949,948
<950=952,951
<953=955,954
<957=958
<958=974,959
<959=960
<960=968,961
<961=966,964,962
<962=963
<964=965
<966=967
<968=969
<969=971,970
<971=973,972
<974=975
<975=977,976
<977=979,978
<993=996,995,994
<996=1016,1010,997
<997=998
<998=1004,999
<999=1000
<1000=1001
<1001=1003,1002
<1004=1005
<1005=1007,1006
<1007=1009,1008
<1010=1011
<1011=1013,1012
<1013=1015,1014
<1016=1017
<1017=1019,1018
<1019=1020
<1020=1022,1021
<1022=1024,1023
<1032=1035,1034,1033
<1035=1322,1318,1282,1273,1263,1256,1252,1043,1036
<1036=1037
<1037=1039,1038
<1039=1040
<1040=1042,1041
<1043=1243,1044
<1044=1234,1229,1225,1218,1214,1210,1204,1060,1054,1045
<1045=1046
<1046=1050,1047
<1047=1048
<1048=1049
<1050=1051
<1051=1053,1052
<1054=1055
<1055=1057,1056
<1057=1059,1058
<1060=1200,1161,1061
<1061=1062
<1062=1157,1131,1063
<1063=1064
<1064=1127,1065
<1065=1123,1107,1085,1066
<1066=1067
<1067=1079,1068
<1068=1077,1075,1073,1071,1069
<1069=1070
<1071=1072
<1073=1074
<1075=1076
<1077=1078
<1079=1080
<1080=1082,1081
<1082=1084,1083
<1085=1086
<1086=1106,1087
<1087=1103,1088
<1088=1098,1089
<1089=1097,1090
<1090=1096,1091
<1091=1095,1092
<1092=1094,1093
<1098=1100,1099
<1100=1102,1101
<1103=1105,1104
<1107=1120,1117,1114,1111,1108
<1108=1110,1109
<1111=1113,1112
<1114=1116,1115
<1117=1119,1118
<1120=1122,1121
<1123=1124
<1124=1126,1125
<1127=1128
<1128=1130,1129
<1131=1150,1146,1132
<1132=1133
<1133=1145,1134
<1134=1142,1135
<1135=1139,1136
<1136=1138,1137
<1139=1141,1140
<1142=1144,1143
<1146=1147
<1147=1149,1148
<1150=1151
<1151=1155,1152
<1152=1153
<1153=1154
<1155=1156
<1157=1158
<1158=1160,1159
<1161=1196,1162
<1162=1163
<1163=1195,1164
<1164=1192,1165
<1165=1189,1166
<1166=1186,1167
<1167=1183,1168
<1168=1180,1169
<1169=1177,1170
<1170=1174,1171
<1171=1173,1172
<1174=1176,1175
<1177=1179,1178
<1180=1182,1181
<1183=1185,1184
<1186=1188,1187
<1189=1191,1190
<1192=1194,1193
<1196=1197
<1197=1199,1198
<1200=1201
<1201=1203,1202
<1204=1205
<1205=1209,1206
<1206=1208,1207
<1210=1211
<1211=1213,1212
<1214=1215
<1215=1217,1216
<1218=1219
<1219=1224,1223,1220
<1220=1222,1221
<1225=1226
<1226=1228,1227
<1229=1230
<1230=1233,1232,1231
<1234=1235
<1235=1241,1236
<1236=1237
<1237=1238
<1238=1240,1239
<1241=1242
<1243=1244
<1244=1250,1245
<1245=1248,1246
<1246=1247
<1248=1249
<1250=1251
<1252=1253
<1253=1255,1254
<1256=1257
<1257=1259,1258
<1259=1260
<1260=1262,1261
<1263=1264
<1264=1272,1271,1265
<1265=1267,1266
<1267=1268
<1268=1270,1269
<1273=1278,1274
<1274=1275
<1275=1277,1276
<1278=1279
<1279=1281,1280
<1282=1309,1283
<1283=1296,1284
<1284=1289,1285
<1285=1286
<1286=1288,1287
<1289=1290
<1290=1294,1291
<1291=1292
<1292=1293
<1294=1295
<1296=1297
<1297=1308,1298
<1298=1300,1299
<1300=1302,1301
<1302=1303
<1303=1305,1304
<1305=1307,1306
<1309=1310
<1310=1312,1311
<1312=1313
<1313=1315,1314
<1315=1317,1316
<1318=1319
<1319=1321,1320
<1322=1323
<1323=1328,1327,1324
<1324=1326,1325
<1362=1368,1367,1363
<1363=1364
<1364=1366,1365
<1368=1381,1377,1371,1369
<1369=1370
<1371=1372
<1372=1374,1373
<1374=1376,1375
<1377=1378
<1378=1380,1379
<1381=1387,1382
<1382=1383
<1383=1384
<1384=1386,1385
<1387=1388
<1388=1392,1389
<1389=1391,1390
<1392=1399,1393
<1393=1395,1394
<1395=1396
<1396=1398,1397
<1411=1423,1422,1412
<1412=1419,1416,1413
<1413=1415,1414
<1416=1418,1417
<1419=1421,1420
<1423=1610,1603,1596,1578,1572,1563,1546,1529,1512,1501,1495,1484,1475,1466,1438,1424
<1424=1425
<1425=1431,1426
<1426=1429,1427
<1427=1428
<1429=1430
<1431=1432
<1432=1434,1433
<1434=1436,1435
<1436=1437
<1438=1439
<1439=1460,1440
<1440=1449,1447,1445,1443,1441
<1441=1442
<1443=1444
<1445=1446
<1447=1448
<1449=1450
<1450=1458,1451
<1451=1456,1452
<1452=1453
<1453=1455,1454
<1456=1457
<1458=1459
<1460=1461
<1461=1463,1462
<1463=1465,1464
<1466=1467
<1467=1471,1468
<1468=1469
<1469=1470
<1471=1472
<1472=1474,1473
<1475=1476
<1476=1480,1477
<1477=1478
<1478=1479
<1480=1481
<1481=1483,1482
<1484=1485
<1485=1491,1486
<1486=1487
<1487=1488
<1488=1490,1489
<1491=1492
<1492=1494,1493
<1495=1496
<1496=1498,1497
<1498=1500,1499
<1501=1502
<1502=1506,1503
<1503=1504
<1504=1505
<1506=1507
<1507=1509,1508
<1509=1511,1510
<1512=1513
<1513=1519,1514
<1514=1517,1515
<1515=1516
<1517=1518
<1519=1520
<1520=1522,1521
<1522=1524,1523
<1524=1526,1525
<1526=1528,1527
<1529=1530
<1530=1536,1531
<1531=1534,1532
<1532=1533
<1534=1535
<1536=1537
<1537=1539,1538
<1539=1541,1540
<1541=1543,1542
<1543=1545,1544
<1546=1547
<1547=1553,1548
<1548=1551,1549
<1549=1550
<1551=1552
<1553=1554
<1554=1556,1555
<1556=1558,1557
<1558=1560,1559
<1560=1562,1561
<1563=1564
<1564=1566,1565
<1566=1567
<1567=1569,1568
<1569=1571,1570
<1572=1573
<1573=1575,1574
<1575=1577,1576
<1578=1592,1586,1579
<1579=1580
<1580=1581
<1581=1585,1582
<1582=1584,1583
<1586=1587
<1587=1591,1588
<1588=1590,1589
<1592=1593
<1593=1595,1594
<1596=1597
<1597=1602,1601,1598
<1598=1600,1599
<1603=1604
<1604=1609,1608,1605
<1605=1607,1606
<1610=1611
<1611=1616,1615,1612
<1612=1614,1613
<1641=1647,1646,1642
<1642=1643
<1643=1645,1644
<1647=1987,1980,1971,1956,1950,1937,1928,1917,1908,1902,1893,1876,1859,1842,1825,1814,1800,1791,1785,1776,1759,1742,1725,1708,1697,1691,1680,1671,1662,1648
<1648=1649
<1649=1655,1650
<1650=1653,1651
<1651=1652
<1653=1654
<1655=1656
<1656=1658,1657
<1658=1660,1659
<1660=1661
<1662=1663
<1663=1667,1664
<1664=1665
<1665=1666
<1667=1668
<1668=1670,1669
<1671=1672
<1672=1676,1673
<1673=1674
<1674=1675
<1676=1677
<1677=1679,1678
<1680=1681
<1681=1687,1682
<1682=1683
<1683=1684
<1684=1686,1685
<1687=1688
<1688=1690,1689
<1691=1692
<1692=1694,1693
<1694=1696,1695
<1697=1698
<1698=1702,1699
<1699=1700
<1700=1701
<1702=1703
<1703=1705,1704
<1705=1707,1706
<1708=1709
<1709=1715,1710
<1710=1713,1711
<1711=1712
<1713=1714
<1715=1716
<1716=1718,1717
<1718=1720,1719
<1720=1722,1721
<1722=1724,1723
<1725=1726
<1726=1732,1727
<1727=1730,1728
<1728=1729
<1730=1731
<1732=1733
<1733=1735,1734
<1735=1737,1736
<1737=1739,1738
<1739=1741,1740
<1742=1743
<1743=1749,1744
<1744=1747,1745
<1745=1746
<1747=1748
<1749=1750
<1750=1752,1751
<1752=1754,1753
<1754=1756,1755
<1756=1758,1757
<1759=1760
<1760=1766,1761
<1761=1764,1762
<1762=1763
<1764=1765
<1766=1767
<1767=1769,1768
<1769=1771,1770
<1771=1773,1772
<1773=1775,1774
<1776=1777
<1777=1779,1778
<1779=1780
<1780=1782,1781
<1782=1784,1783
<1785=1786
<1786=1788,1787
<1788=1790,1789
<1791=1792
<1792=1799,1798,1793
<1793=1797,1794
<1794=1796,1795
<1800=1801
<1801=1807,1802
<1802=1805,1803
<1803=1804
<1805=1806
<1807=1808
<1808=1810,1809
<1810=1812,1811
<1812=1813
<1814=1815
<1815=1819,1816
<1816=1817
<1817=1818
<1819=1820
<1820=1822,1821
<1822=1824,1823
<1825=1826
<1826=1832,1827
<1827=1830,1828
<1828=1829
<1830=1831
<1832=1833
<1833=1835,1834
<1835=1837,1836
<1837=1839,1838
<1839=1841,1840
<1842=1843
<1843=1849,1844
<1844=1847,1845
<1845=1846
<1847=1848
<1849=1850
<1850=1852,1851
<1852=1854,1853
<1854=1856,1855
<1856=1858,1857
<1859=1860
<1860=1866,1861
<1861=1864,1862
<1862=1863
<1864=1865
<1866=1867
<1867=1869,1868
<1869=1871,1870
<1871=1873,1872
<1873=1875,1874
<1876=1877
<1877=1883,1878
<1878=1881,1879
<1879=1880
<1881=1882
<1883=1884
<1884=1886,1885
<1886=1888,1887
<1888=1890,1889
<1890=1892,1891
<1893=1894
<1894=1896,1895
<1896=1897
<1897=1899,1898
<1899=1901,1900
<1902=1903
<1903=1905,1904
<1905=1907,1906
<1908=1909
<1909=1913,1910
<1910=1911
<1911=1912
<1913=1914
<1914=1916,1915
<1917=1918
<1918=1924,1919
<1919=1920
<1920=1921
<1921=1923,1922
<1924=1925
<1925=1927,1926
<1928=1929
<1929=1933,1930
<1930=1931
<1931=1932
<1933=1934
<1934=1936,1935
<1937=1938
<1938=1947,1939
<1939=1945,1940
<1940=1943,1941
<1941=1942
<1943=1944
<1945=1946
<1947=1949,1948
<1950=1951
<1951=1953,1952
<1953=1955,1954
<1956=1957
<1957=1968,1958
<1958=1966,1959
<1959=1964,1962,1960
<1960=1961
<1962=1963
<1964=1965
<1966=1967
<1968=1970,1969
<1971=1972
<1972=1979,1978,1973
<1973=1977,1974
<1974=1976,1975
<1980=1981
<1981=1986,1985,1982
<1982=1984,1983
<1987=1988
<1988=1993,1992,1989
<1989=1991,1990
<2026=2029,2028,2027
<2029=2109,2102,2095,2088,2081,2074,2067,2060,2053,2046,2045,2044,2043,2041,2037,2030
<2030=2031
<2031=2035,2032
<2032=2033
<2033=2034
<2035=2036
<2037=2038
<2038=2040,2039
<2041=2042
<2046=2047
<2047=2049,2048
<2049=2050
<2050=2052,2051
<2053=2054
<2054=2056,2055
<2056=2057
<2057=2059,2058
<2060=2061
<2061=2063,2062
<2063=2064
<2064=2066,2065
<2067=2068
<2068=2072,2069
<2069=2070
<2070=2071
<2072=2073
<2074=2075
<2075=2077,2076
<2077=2078
<2078=2080,2079
<2081=2082
<2082=2084,2083
<2084=2085
<2085=2087,2086
<2088=2089
<2089=2091,2090
<2091=2092
<2092=2094,2093
<2095=2096
<2096=2098,2097
<2098=2099
<2099=2101,2100
<2102=2103
<2103=2105,2104
<2105=2106
<2106=2108,2107
<2109=2110
<2110=2114,2111
<2111=2112
<2112=2113
<2114=2115
<2128=2131,2130,2129
<2131=2510,2505,2493,2480,2465,2450,2437,2424,2409,2394,2381,2368,2353,2338,2325,2312,2297,2282,2269,2256,2241,2226,2213,2204,2197,2182,2139,2132
<2132=2133
<2133=2137,2134
<2134=2135
<2135=2136
<2137=2138
<2139=2180,2140
<2140=2167,2154,2141
<2141=2142
<2142=2150,2143
<2143=2148,2146,2144
<2144=2145
<2146=2147
<2148=2149
<2150=2151
<2151=2153,2152
<2154=2155
<2155=2163,2156
<2156=2161,2159,2157
<2157=2158
<2159=2160
<2161=2162
<2163=2164
<2164=2166,2165
<2167=2168
<2168=2176,2169
<2169=2174,2172,2170
<2170=2171
<2172=2173
<2174=2175
<2176=2177
<2177=2179,2178
<2180=2181
<2182=2183
<2183=2196,2184
<2184=2195,2185
<2185=2193,2186
<2186=2191,2187
<2187=2188
<2188=2190,2189
<2191=2192
<2193=2194
<2197=2198
<2198=2202,2199
<2199=2200
<2200=2201
<2202=2203
<2204=2205
<2205=2212,2206
<2206=2210,2207
<2207=2208
<2208=2209
<2210=2211
<2213=2214
<2214=2223,2215
<2215=2219,2216
<2216=2217
<2217=2218
<2219=2220
<2220=2222,2221
<2223=2225,2224
<2226=2227
<2227=2238,2228
<2228=2236,2229
<2229=2234,2232,2230
<2230=2231
<2232=2233
<2234=2235
<2236=2237
<2238=2240,2239
<2241=2242
<2242=2253,2243
<2243=2251,2244
<2244=2249,2247,2245
<2245=2246
<2247=2248
<2249=2250
<2251=2252
<2253=2255,2254
<2256=2257
<2257=2265,2258
<2258=2263,2261,2259
<2259=2260
<2261=2262
<2263=2264
<2265=2266
<2266=2268,2267
<2269=2270
<2270=2279,2271
<2271=2275,2272
<2272=2273
<2273=2274
<2275=2276
<2276=2278,2277
<2279=2281,2280
<2282=2283
<2283=2294,2284
<2284=2292,2285
<2285=2290,2288,2286
<2286=2287
<2288=2289
<2290=2291
<2292=2293
<2294=2296,2295
<2297=2298
<2298=2309,2299
<2299=2307,2300
<2300=2305,2303,2301
<2301=2302
<2303=2304
<2305=2306
<2307=2308
<2309=2311,2310
<2312=2313
<2313=2321,2314
<2314=2319,2317,2315
<2315=2316
<2317=2318
<2319=2320
<2321=2322
<2322=2324,2323
<2325=2326
<2326=2335,2327
<2327=2331,2328
<2328=2329
<2329=2330
<2331=2332
<2332=2334,2333
<2335=2337,2336
<2338=2339
<2339=2350,2340
<2340=2348,2341
<2341=2346,2344,2342
<2342=2343
<2344=2345
<2346=2347
<2348=2349
<2350=2352,2351
<2353=2354
<2354=2365,2355
<2355=2363,2356
<2356=2361,2359,2357
<2357=2358
<2359=2360
<2361=2362
<2363=2364
<2365=2367,2366
<2368=2369
<2369=2377,2370
<2370=2375,2373,2371
<2371=2372
<2373=2374
<2375=2376
<2377=2378
<2378=2380,2379
<2381=2382
<2382=2391,2383
<2383=2387,2384
<2384=2385
<2385=2386
<2387=2388
<2388=2390,2389
<2391=2393,2392
<2394=2395
<2395=2406,2396
<2396=2404,2397
<2397=2402,2400,2398
<2398=2399
<2400=2401
<2402=2403
<2404=2405
<2406=2408,2407
<2409=2410
<2410=2421,2411
<2411=2419,2412
<2412=2417,2415,2413
<2413=2414
<2415=2416
<2417=2418
<2419=2420
<2421=2423,2422
<2424=2425
<2425=2433,2426
<2426=2431,2429,2427
<2427=2428
<2429=2430
<2431=2432
<2433=2434
<2434=2436,2435
<2437=2438
<2438=2447,2439
<2439=2443,2440
<2440=2441
<2441=2442
<2443=2444
<2444=2446,2445
<2447=2449,2448
<2450=2451
<2451=2462,2452
<2452=2460,2453
<2453=2458,2456,2454
<2454=2455
<2456=2457
<2458=2459
<2460=2461
<2462=2464,2463
<2465=2466
<2466=2477,2467
<2467=2475,2468
<2468=2473,2471,2469
<2469=2470
<2471=2472
<2473=2474
<2475=2476
<2477=2479,2478
<2480=2481
<2481=2489,2482
<2482=2487,2485,2483
<2483=2484
<2485=2486
<2487=2488
<2489=2490
<2490=2492,2491
<2493=2494
<2494=2504,2503,2495
<2495=2502,2496
<2496=2500,2497
<2497=2498
<2498=2499
<2500=2501
<2505=2506
<2506=2508,2507
<2508=2509
<2510=2511
<2511=2515,2512
<2512=2513
<2513=2514
<2515=2516
<2554=2557,2556,2555
<2557=2568,2563,2558
<2558=2559
<2559=2561,2560
<2561=2562
<2563=2564
<2564=2566,2565
<2566=2567
<2568=2569
<2569=2571,2570
<2571=2572
<2576=2579,2578,2577
<2579=2580
<2580=3474,2581
<2581=2582
<2582=3467,2583
<2583=3461,3450,3423,3416,3393,2584
<2584=3384,2585
<2585=3375,3368,2586
<2586=3364,3278,2587
<2587=2588
<2588=3274,3248,2589
<2589=2590
<2590=3244,3234,2591
<2591=2592
<2592=3230,3222,2593
<2593=2594
<2594=3218,3210,2595
<2595=2596
<2596=3206,3167,2597
<2597=2598
<2598=3163,3155,2599
<2599=2600
<2600=3151,3136,2601
<2601=2602
<2602=3132,3105,2603
<2603=2604
<2604=3101,3077,2605
<2605=2606
<2606=3073,3023,2607
<2607=2608
<2608=3019,2985,2609
<2609=2610
<2610=2981,2944,2611
<2611=2612
<2612=2940,2884,2613
<2613=2614
<2614=2880,2846,2615
<2615=2616
<2616=2842,2830,2617
<2617=2618
<2618=2826,2814,2619
<2619=2620
<2620=2810,2756,2621
<2621=2622
<2622=2752,2742,2623
<2623=2624
<2624=2738,2728,2625
<2625=2626
<2626=2724,2699,2627
<2627=2628
<2628=2695,2629
<2629=2691,2681,2651,2644,2640,2630
<2630=2631
<2631=2633,2632
<2633=2635,2634
<2635=2637,2636
<2637=2639,2638
<2640=2641
<2641=2643,2642
<2644=2645
<2645=2650,2649,2646
<2646=2648,2647
<2651=2652
<2652=2680,2679,2653
<2653=2675,2654
<2654=2662,2655
<2655=2656
<2656=2658,2657
<2658=2659
<2659=2661,2660
<2662=2663
<2663=2667,2664
<2664=2665
<2665=2666
<2667=2668
<2668=2670,2669
<2670=2672,2671
<2672=2674,2673
<2675=2676
<2676=2678,2677
<2681=2682
<2682=2690,2683
<2683=2685,2684
<2685=2687,2686
<2687=2689,2688
<2691=2692
<2692=2694,2693
<2695=2696
<2696=2698,2697
<2699=2700
<2700=2701
<2701=2716,2702
<2702=2703
<2703=2704
<2704=2715,2705
<2705=2707,2706
<2707=2708
<2708=2710,2709
<2710=2712,2711
<2712=2714,2713
<2716=2717
<2717=2719,2718
<2719=2721,2720
<2721=2723,2722
<2724=2725
<2725=2727,2726
<2728=2729
<2729=2730
<2730=2732,2731
<2732=2733
<2733=2735,2734
<2735=2737,2736
<2738=2739
<2739=2741,2740
<2742=2743
<2743=2744
<2744=2746,2745
<2746=2747
<2747=2749,2748
<2749=2751,2750
<2752=2753
<2753=2755,2754
<2756=2757
<2757=2797,2758
<2758=2779,2759
<2759=2760
<2760=2770,2761
<2761=2763,2762
<2763=2765,2764
<2765=2767,2766
<2767=2769,2768
<2770=2772,2771
<2772=2774,2773
<2774=2776,2775
<2776=2778,2777
<2779=2780
<2780=2790,2781
<2781=2783,2782
<2783=2785,2784
<2785=2787,2786
<2787=2789,2788
<2790=2792,2791
<2792=2794,2793
<2794=2796,2795
<2797=2798
<2798=2800,2799
<2800=2802,2801
<2802=2803
<2803=2805,2804
<2805=2807,2806
<2807=2809,2808
<2810=2811
<2811=2813,2812
<2814=2815
<2815=2816
<2816=2820,2817
<2817=2818
<2818=2819
<2820=2821
<2821=2823,2822
<2823=2825,2824
<2826=2827
<2827=2829,2828
<2830=2831
<2831=2832
<2832=2836,2833
<2833=2834
<2834=2835
<2836=2837
<2837=2839,2838
<2839=2841,2840
<2842=2843
<2843=2845,2844
<2846=2875,2871,2864,2858,2847
<2847=2848
<2848=2852,2849
<2849=2850
<2850=2851
<2852=2853
<2853=2855,2854
<2855=2857,2856
<2858=2859
<2859=2863,2860
<2860=2862,2861
<2864=2865
<2865=2870,2869,2866
<2866=2868,2867
<2871=2872
<2872=2874,2873
<2875=2876
<2876=2879,2878,2877
<2880=2881
<2881=2883,2882
<2884=2935,2928,2924,2918,2904,2885
<2885=2902,2886
<2886=2887
<2887=2888
<2888=2899,2889
<2889=2895,2890
<2890=2891
<2891=2892
<2892=2894,2893
<2895=2896
<2896=2898,2897
<2899=2901,2900
<2902=2903
<2904=2905
<2905=2917,2916,2906
<2906=2915,2907
<2907=2911,2908
<2908=2909
<2909=2910
<2911=2912
<2912=2914,2913
<2918=2919
<2919=2923,2920
<2920=2922,2921
<2924=2925
<2925=2927,2926
<2928=2929
<2929=2934,2933,2930
<2930=2932,2931
<2935=2936
<2936=2939,2938,2937
<2940=2941
<2941=2943,2942
<2944=2976,2969,2962,2956,2945
<2945=2946
<2946=2950,2947
<2947=2948
<2948=2949
<2950=2951
<2951=2953,2952
<2953=2955,2954
<2956=2957
<2957=2961,2958
<2958=2960,2959
<2962=2963
<2963=2968,2967,2964
<2964=2966,2965
<2969=2970
<2970=2975,2974,2971
<2971=2973,2972
<2976=2977
<2977=2980,2979,2978
<2981=2982
<2982=2984,2983
<2985=3008,2997,2986
<2986=2987
<2987=2991,2988
<2988=2989
<2989=2990
<2991=2992
<2992=2994,2993
<2994=2996,2995
<2997=2998
<2998=3002,2999
<2999=3000
<3000=3001
<3002=3003
<3003=3005,3004
<3005=3007,3006
<3008=3009
<3009=3013,3010
<3010=3011
<3011=3012
<3013=3014
<3014=3016,3015
<3016=3018,3017
<3019=3020
<3020=3022,3021
<3023=3050,3024
<3024=3046,3042,3039,3025
<3025=3026
<3026=3027
<3027=3033,3028
<3028=3029
<3029=3030
<3030=3032,3031
<3033=3034
<3034=3036,3035
<3036=3038,3037
<3039=3041,3040
<3042=3043
<3043=3045,3044
<3046=3047
<3047=3049,3048
<3050=3069,3065,3062,3051
<3051=3052
<3052=3056,3053
<3053=3054
<3054=3055
<3056=3057
<3057=3059,3058
<3059=3061,3060
<3062=3064,3063
<3065=3066
<3066=3068,3067
<3069=3070
<3070=3072,3071
<3073=3074
<3074=3076,3075
<3077=3078
<3078=3097,3093,3090,3079
<3079=3080
<3080=3084,3081
<3081=3082
<3082=3083
<3084=3085
<3085=3087,3086
<3087=3089,3088
<3090=3092,3091
<3093=3094
<3094=3096,3095
<3097=3098
<3098=3100,3099
<3101=3102
<3102=3104,3103
<3105=3113,3106
<3106=3107
<3107=3109,3108
<3109=3110
<3110=3112,3111
<3113=3123,3114
<3114=3115
<3115=3119,3116
<3116=3117
<3117=3118
<3119=3120
<3120=3122,3121
<3123=3124
<3124=3128,3125
<3125=3126
<3126=3127
<3128=3129
<3129=3131,3130
<3132=3133
<3133=3135,3134
<3136=3137
<3137=3138
<3138=3146,3139
<3139=3145,3140
<3140=3142,3141
<3142=3144,3143
<3146=3148,3147
<3148=3150,3149
<3151=3152
<3152=3154,3153
<3155=3156
<3156=3157
<3157=3159,3158
<3159=3160
<3160=3162,3161
<3163=3164
<3164=3166,3165
<3167=3201,3197,3190,3184,3177,3168
<3168=3169
<3169=3173,3170
<3170=3171
<3171=3172
<3173=3174
<3174=3176,3175
<3177=3178
<3178=3180,3179
<3180=3181
<3181=3183,3182
<3184=3185
<3185=3189,3186
<3186=3188,3187
<3190=3191
<3191=3196,3195,3192
<3192=3194,3193
<3197=3198
<3198=3200,3199
<3201=3202
<3202=3205,3204,3203
<3206=3207
<3207=3209,3208
<3210=3211
<3211=3212
<3212=3214,3213
<3214=3215
<3215=3217,3216
<3218=3219
<3219=3221,3220
<3222=3223
<3223=3224
<3224=3226,3225
<3226=3227
<3227=3229,3228
<3230=3231
<3231=3233,3232
<3234=3235
<3235=3236
<3236=3238,3237
<3238=3239
<3239=3241,3240
<3241=3243,3242
<3244=3245
<3245=3247,3246
<3248=3249
<3249=3264,3250
<3250=3251
<3251=3252
<3252=3256,3253
<3253=3254
<3254=3255
<3256=3257
<3257=3259,3258
<3259=3261,3260
<3261=3263,3262
<3264=3265
<3265=3271,3266
<3266=3268,3267
<3268=3270,3269
<3271=3273,3272
<3274=3275
<3275=3277,3276
<3278=3357,3344,3339,3330,3321,3312,3297,3288,3279
<3279=3280
<3280=3282,3281
<3282=3283
<3283=3285,3284
<3285=3287,3286
<3288=3289
<3289=3291,3290
<3291=3292
<3292=3294,3293
<3294=3296,3295
<3297=3308,3298
<3298=3299
<3299=3300
<3300=3302,3301
<3302=3303
<3303=3305,3304
<3305=3307,3306
<3308=3309
<3309=3311,3310
<3312=3313
<3313=3315,3314
<3315=3316
<3316=3318,3317
<3318=3320,3319
<3321=3322
<3322=3324,3323
<3324=3325
<3325=3327,3326
<3327=3329,3328
<3330=3331
<3331=3337,3332
<3332=3335,3333
<3333=3334
<3335=3336
<3337=3338
<3339=3340
<3340=3342,3341
<3342=3343
<3344=3345
<3345=3351,3346
<3346=3349,3347
<3347=3348
<3349=3350
<3351=3352
<3352=3354,3353
<3354=3356,3355
<3357=3358
<3358=3360,3359
<3360=3361
<3361=3363,3362
<3364=3365
<3365=3367,3366
<3368=3369
<3369=3374,3373,3370
<3370=3372,3371
<3375=3376
<3376=3383,3382,3377
<3377=3381,3378
<3378=3380,3379
<3384=3385
<3385=3392,3386
<3386=3388,3387
<3388=3389
<3389=3391,3390
<3393=3405,3394
<3394=3395
<3395=3399,3396
<3396=3397
<3397=3398
<3399=3400
<3400=3402,3401
<3402=3404,3403
<3405=3406
<3406=3415,3407
<3407=3409,3408
<3409=3410
<3410=3412,3411
<3412=3414,3413
<3416=3417
<3417=3421,3418
<3418=3419
<3419=3420
<3421=3422
<3423=3424
<3424=3449,3448,3425
<3425=3447,3426
<3426=3443,3427
<3427=3430,3428
<3428=3429
<3430=3431
<3431=3435,3432
<3432=3433
<3433=3434
<3435=3436
<3436=3438,3437
<3438=3440,3439
<3440=3442,3441
<3443=3444
<3444=3446,3445
<3450=3451
<3451=3455,3452
<3452=3453
<3453=3454
<3455=3456
<3456=3458,3457
<3458=3460,3459
<3461=3462
<3462=3464,3463
<3464=3466,3465
<3467=3468
<3468=3470,3469
<3470=3471
<3471=3473,3472
<3474=3475
<3475=3489,3476
<3476=3483,3477
<3477=3479,3478
<3479=3480
<3480=3482,3481
<3483=3485,3484
<3485=3486
<3486=3488,3487
<3489=3491,3490
<3491=3492
<3572=3575,3574,3573
<3575=3576
<3576=3582,3577
<3577=3578
<3578=3580,3579
<3580=3581
<3582=3583
<3583=3590,3584
<3584=3586,3585
<3586=3587
<3587=3589,3588
<3590=3592,3591
<3592=3593
<3593=3595,3594
<3617=3620,3619,3618
<3620=3625,3621
<3621=3622
<3622=3624,3623
<3625=3648,3626
<3626=3627
<3627=3642,3628
<3628=3629
<3629=3630
<3630=3640,3631
<3631=3638,3632
<3632=3633
<3633=3635,3634
<3635=3637,3636
<3638=3639
<3640=3641
<3642=3643
<3643=3645,3644
<3645=3647,3646
<3648=3649
<3649=3653,3650
<3650=3652,3651
<3653=3655,3654
<3666=3669,3668,3667
<3669=3674,3670
<3670=3671
<3671=3673,3672
<3674=3697,3675
<3675=3676
<3676=3691,3677
<3677=3678
<3678=3679
<3679=3689,3680
<3680=3687,3681
<3681=3682
<3682=3684,3683
<3684=3686,3685
<3687=3688
<3689=3690
<3691=3692
<3692=3694,3693
<3694=3696,3695
<3697=3698
<3698=3702,3699
<3699=3701,3700
<3702=3704,3703
<3711=3714,3713,3712
<3714=3851,3831,3822,3821,3817,3813,3809,3795,3777,3753,3749,3729,3715
<3715=3716
<3716=3725,3717
<3717=3718
<3718=3719
<3719=3721,3720
<3721=3722
<3722=3724,3723
<3725=3726
<3726=3728,3727
<3729=3743,3730
<3730=3731
<3731=3742,3732
<3732=3736,3733
<3733=3734
<3734=3735
<3736=3737
<3737=3739,3738
<3739=3741,3740
<3743=3744
<3744=3746,3745
<3746=3748,3747
<3749=3750
<3750=3752,3751
<3753=3775,3768,3754
<3754=3755
<3755=3766,3761,3756
<3756=3757
<3757=3759,3758
<3759=3760
<3761=3762
<3762=3763
<3763=3765,3764
<3766=3767
<3768=3769
<3769=3770
<3770=3774,3771
<3771=3773,3772
<3775=3776
<3777=3785,3778
<3778=3779
<3779=3780
<3780=3784,3781
<3781=3783,3782
<3785=3786
<3786=3792,3787
<3787=3789,3788
<3789=3791,3790
<3792=3794,3793
<3795=3796
<3796=3808,3797
<3797=3807,3798
<3798=3806,3799
<3799=3805,3800
<3800=3804,3801
<3801=3803,3802
<3809=3810
<3810=3812,3811
<3813=3814
<3814=3816,3815
<3817=3818
<3818=3820,3819
<3822=3823
<3823=3827,3824
<3824=3825
<3825=3826
<3827=3828
<3828=3830,3829
<3831=3845,3832
<3832=3833
<3833=3844,3834
<3834=3838,3835
<3835=3836
<3836=3837
<3838=3839
<3839=3841,3840
<3841=3843,3842
<3845=3846
<3846=3848,3847
<3848=3850,3849
<3851=3852
<3852=3857,3856,3853
<3853=3855,3854
<3876=3888,3887,3877
<3877=3884,3881,3878
<3878=3880,3879
<3881=3883,3882
<3884=3886,3885
<3888=3961,3949,3891,3889
<3889=3890
<3891=3941,3937,3934,3892
<3892=3921,3893
<3893=3897,3894
<3894=3895
<3895=3896
<3897=3898
<3898=3916,3899
<3899=3911,3900
<3900=3906,3901
<3901=3905,3902
<3902=3904,3903
<3906=3910,3907
<3907=3909,3908
<3911=3915,3912
<3912=3914,3913
<3916=3920,3917
<3917=3919,3918
<3921=3922
<3922=3932,3923
<3923=3930,3928,3924
<3924=3925
<3925=3927,3926
<3928=3929
<3930=3931
<3932=3933
<3934=3936,3935
<3937=3938
<3938=3940,3939
<3941=3942
<3942=3943
<3943=3948,3947,3944
<3944=3946,3945
<3949=3950
<3950=3960,3959,3951
<3951=3958,3952
<3952=3956,3953
<3953=3954
<3954=3955
<3956=3957
<3961=3962
<3962=3964,3963
<3980=3983,3982,3981
<3983=7157,7153,7149,7145,7141,7137,7130,7126,7122,7117,7108,7102,7095,7088,7084,7073,7030,7021,6978,6968,6956,6944,6932,6931,6930,6929,6928,6927,6926,6925,6924,6923,6922,6921,6920,6919,6918,6917,6916,6915,6914,6913,6912,6911,6910,6909,6908,6907,6906,6905,6904,6903,6902,6901,6900,6899,6898,6897,6896,6895,6894,6893,6892,6891,6890,6889,6888,6887,6886,6885,6884,6883,6882,6881,6880,6879,6878,6877,6876,6867,6860,6853,6846,6839,6835,6826,6813,6805,6778,6736,6729,6721,6708,6690,6686,6665,6647,6616,6609,6534,6527,6496,6477,6470,6463,6456,6449,6442,6431,6424,6415,6397,6379,6372,6365,6360,6353,6345,6322,6315,6310,6297,6291,6285,6274,6265,6258,6247,6231,6225,6219,6210,6194,6188,6182,6173,6160,6140,6134,6128,6119,6099,6092,6086,6080,6071,6064,6057,6050,6043,6020,6013,6006,5999,5986,5979,5972,5965,5958,5951,5946,5939,5928,5923,5922,5921,5920,5918,5879,5870,5851,5838,5831,5810,5803,5792,5785,5778,5769,5762,5755,5754,5753,5752,5750,5713,5704,5697,5640,5633,5627,5581,5572,5568,5555,5549,5543,5537,5531,5522,5516,5507,5499,5486,5480,5474,5465,5456,5447,5438,5434,5421,5415,5409,5403,5392,5386,5377,5369,5356,5350,5344,5335,5326,5317,5308,5304,5298,5292,5286,5275,5262,5254,5248,5239,5231,5211,5196,5188,5182,5173,5165,5145,5130,5122,5116,5107,5100,5093,5086,5085,5084,5083,5081,5045,5032,5023,5022,5021,5020,5018,4955,4942,4933,4926,4921,4914,4913,4912,4911,4909,4863,4854,4853,4852,4851,4849,4805,4796,4795,4794,4793,4791,4747,4738,4737,4736,4735,4733,4674,4665,4664,4663,4662,4660,4598,4589,4588,4587,4586,4584,4538,4529,4525,4521,4507,4498,4491,4484,4477,4473,4469,4463,4454,4453,4452,4451,3984,4003,4008,4015,4046,4053,4060,4067,4074,4078,4085,4123,4130,4139,4147,4155,4163,4171,4179,4187,4195,4203,4211,4219,4227,4235,4243,4251,4259,4265,4271,4277,4283,4289,4295,4301,4307,4313,4319,4325,4331,4337,4343,4349,4354,4361,4366,4377,4386,4449
<3984=3998,3993,3985
<3985=3986
<3986=3987
<3987=3991,3988
<3988=3989
<3989=3990
<3991=3992
<3993=3994
<3994=3996,3995
<3996=3997
<3998=3999
<3999=4001,4000
<4001=4002
<4003=4004
<4004=4006,4005
<4006=4007
<4008=4009
<4009=4013,4010
<4010=4011
<4011=4012
<4013=4014
<4015=4035,4023,4016
<4016=4017
<4017=4018
<4018=4020,4019
<4020=4022,4021
<4023=4024
<4024=4032,4025
<4025=4029,4026
<4026=4028,4027
<4029=4031,4030
<4032=4034,4033
<4035=4036
<4036=4045,4037
<4037=4039,4038
<4039=4040
<4040=4042,4041
<4042=4044,4043
<4046=4047
<4047=4051,4048
<4048=4049
<4049=4050
<4051=4052
<4053=4054
<4054=4058,4055
<4055=4056
<4056=4057
<4058=4059
<4060=4061
<4061=4065,4062
<4062=4063
<4063=4064
<4065=4066
<4067=4068
<4068=4072,4069
<4069=4070
<4070=4071
<4072=4073
<4074=4075
<4075=4077,4076
<4078=4079
<4079=4083,4080
<4080=4081
<4081=4082
<4083=4084
<4085=4116,4086
<4086=4109,4096,4087
<4087=4088
<4088=4092,4089
<4089=4090
<4090=4091
<4092=4093
<4093=4095,4094
<4096=4097
<4097=4103,4098
<4098=4101,4099
<4099=4100
<4101=4102
<4103=4104
<4104=4106,4105
<4106=4108,4107
<4109=4110
<4110=4115,4114,4111
<4111=4113,4112
<4116=4117
<4117=4122,4118
<4118=4120,4119
<4120=4121
<4123=4124
<4124=4128,4125
<4125=4126
<4126=4127
<4128=4129
<4130=4131
<4131=4137,4132
<4132=4133
<4133=4134
<4134=4136,4135
<4137=4138
<4139=4140
<4140=4144,4141
<4141=4143,4142
<4144=4146,4145
<4147=4148
<4148=4152,4149
<4149=4151,4150
<4152=4154,4153
<4155=4156
<4156=4160,4157
<4157=4159,4158
<4160=4162,4161
<4163=4164
<4164=4168,4165
<4165=4167,4166
<4168=4170,4169
<4171=4172
<4172=4176,4173
<4173=4175,4174
<4176=4178,4177
<4179=4180
<4180=4184,4181
<4181=4183,4182
<4184=4186,4185
<4187=4188
<4188=4192,4189
<4189=4191,4190
<4192=4194,4193
<4195=4196
<4196=4200,4197
<4197=4199,4198
<4200=4202,4201
<4203=4204
<4204=4208,4205
<4205=4207,4206
<4208=4210,4209
<4211=4212
<4212=4216,4213
<4213=4215,4214
<4216=4218,4217
<4219=4220
<4220=4224,4221
<4221=4223,4222
<4224=4226,4225
<4227=4228
<4228=4232,4229
<4229=4231,4230
<4232=4234,4233
<4235=4236
<4236=4240,4237
<4237=4239,4238
<4240=4242,4241
<4243=4244
<4244=4248,4245
<4245=4247,4246
<4248=4250,4249
<4251=4252
<4252=4256,4253
<4253=4255,4254
<4256=4258,4257
<4259=4260
<4260=4262,4261
<4262=4264,4263
<4265=4266
<4266=4268,4267
<4268=4270,4269
<4271=4272
<4272=4274,4273
<4274=4276,4275
<4277=4278
<4278=4280,4279
<4280=4282,4281
<4283=4284
<4284=4286,4285
<4286=4288,4287
<4289=4290
<4290=4292,4291
<4292=4294,4293
<4295=4296
<4296=4298,4297
<4298=4300,4299
<4301=4302
<4302=4304,4303
<4304=4306,4305
<4307=4308
<4308=4310,4309
<4310=4312,4311
<4313=4314
<4314=4316,4315
<4316=4318,4317
<4319=4320
<4320=4322,4321
<4322=4324,4323
<4325=4326
<4326=4328,4327
<4328=4330,4329
<4331=4332
<4332=4334,4333
<4334=4336,4335
<4337=4338
<4338=4340,4339
<4340=4342,4341
<4343=4344
<4344=4346,4345
<4346=4348,4347
<4349=4350
<4350=4352,4351
<4352=4353
<4354=4355
<4355=4359,4356
<4356=4357
<4357=4358
<4359=4360
<4361=4362
<4362=4364,4363
<4364=4365
<4366=4367
<4367=4373,4368
<4368=4371,4369
<4369=4370
<4371=4372
<4373=4374
<4374=4376,4375
<4377=4378
<4378=4384,4379
<4379=4382,4380
<4380=4381
<4382=4383
<4384=4385
<4386=4434,4425,4410,4402,4393,4387
<4387=4388
<4388=4390,4389
<4390=4392,4391
<4393=4394
<4394=4398,4395
<4395=4396
<4396=4397
<4398=4399
<4399=4401,4400
<4402=4403
<4403=4405,4404
<4405=4407,4406
<4407=4409,4408
<4410=4411
<4411=4422,4412
<4412=4420,4413
<4413=4416,4414
<4414=4415
<4416=4417
<4417=4419,4418
<4420=4421
<4422=4424,4423
<4425=4426
<4426=4430,4427
<4427=4428
<4428=4429
<4430=4431
<4431=4433,4432
<4434=4435
<4435=4446,4436
<4436=4444,4437
<4437=4442,4440,4438
<4438=4439
<4440=4441
<4442=4443
<4444=4445
<4446=4448,4447
<4449=4450
<4454=4455
<4455=4461,4456
<4456=4459,4457
<4457=4458
<4459=4460
<4461=4462
<4463=4464
<4464=4466,4465
<4466=4468,4467
<4469=4470
<4470=4472,4471
<4473=4474
<4474=4476,4475
<4477=4478
<4478=4482,4479
<4479=4480
<4480=4481
<4482=4483
<4484=4485
<4485=4489,4486
<4486=4487
<4487=4488
<4489=4490
<4491=4492
<4492=4496,4493
<4493=4494
<4494=4495
<4496=4497
<4498=4499
<4499=4505,4500
<4500=4503,4501
<4501=4502
<4503=4504
<4505=4506
<4507=4508
<4508=4509
<4509=4518,4510
<4510=4516,4511
<4511=4514,4512
<4512=4513
<4514=4515
<4516=4517
<4518=4520,4519
<4521=4522
<4522=4524,4523
<4525=4526
<4526=4528,4527
<4529=4530
<4530=4536,4531
<4531=4534,4532
<4532=4533
<4534=4535
<4536=4537
<4538=4569,4563,4557,4551,4545,4539
<4539=4540
<4540=4542,4541
<4542=4544,4543
<4545=4546
<4546=4548,4547
<4548=4550,4549
<4551=4552
<4552=4554,4553
<4554=4556,4555
<4557=4558
<4558=4560,4559
<4560=4562,4561
<4563=4564
<4564=4566,4565
<4566=4568,4567
<4569=4570
<4570=4581,4571
<4571=4579,4572
<4572=4577,4575,4573
<4573=4574
<4575=4576
<4577=4578
<4579=4580
<4581=4583,4582
<4584=4585
<4589=4590
<4590=4596,4591
<4591=4594,4592
<4592=4593
<4594=4595
<4596=4597
<4598=4647,4632,4626,4617,4611,4605,4599
<4599=4600
<4600=4602,4601
<4602=4604,4603
<4605=4606
<4606=4608,4607
<4608=4610,4609
<4611=4612
<4612=4614,4613
<4614=4616,4615
<4617=4618
<4618=4622,4619
<4619=4620
<4620=4621
<4622=4623
<4623=4625,4624
<4626=4627
<4627=4629,4628
<4629=4631,4630
<4632=4633
<4633=4644,4634
<4634=4642,4635
<4635=4640,4638,4636
<4636=4637
<4638=4639
<4640=4641
<4642=4643
<4644=4646,4645
<4647=4648
<4648=4657,4649
<4649=4655,4650
<4650=4653,4651
<4651=4652
<4653=4654
<4655=4656
<4657=4659,4658
<4660=4661
<4665=4666
<4666=4672,4667
<4667=4670,4668
<4668=4669
<4670=4671
<4672=4673
<4674=4720,4705,4699,4693,4687,4681,4675
<4675=4676
<4676=4678,4677
<4678=4680,4679
<4681=4682
<4682=4684,4683
<4684=4686,4685
<4687=4688
<4688=4690,4689
<4690=4692,4691
<4693=4694
<4694=4696,4695
<4696=4698,4697
<4699=4700
<4700=4702,4701
<4702=4704,4703
<4705=4706
<4706=4717,4707
<4707=4715,4708
<4708=4713,4711,4709
<4709=4710
<4711=4712
<4713=4714
<4715=4716
<4717=4719,4718
<4720=4721
<4721=4730,4722
<4722=4728,4723
<4723=4726,4724
<4724=4725
<4726=4727
<4728=4729
<4730=4732,4731
<4733=4734
<4738=4739
<4739=4745,4740
<4740=4743,4741
<4741=4742
<4743=4744
<4745=4746
<4747=4778,4772,4766,4760,4754,4748
<4748=4749
<4749=4751,4750
<4751=4753,4752
<4754=4755
<4755=4757,4756
<4757=4759,4758
<4760=4761
<4761=4763,4762
<4763=4765,4764
<4766=4767
<4767=4769,4768
<4769=4771,4770
<4772=4773
<4773=4775,4774
<4775=4777,4776
<4778=4779
<4779=4788,4780
<4780=4786,4781
<4781=4784,4782
<4782=4783
<4784=4785
<4786=4787
<4788=4790,4789
<4791=4792
<4796=4797
<4797=4803,4798
<4798=4801,4799
<4799=4800
<4801=4802
<4803=4804
<4805=4836,4830,4824,4818,4812,4806
<4806=4807
<4807=4809,4808
<4809=4811,4810
<4812=4813
<4813=4815,4814
<4815=4817,4816
<4818=4819
<4819=4821,4820
<4821=4823,4822
<4824=4825
<4825=4827,4826
<4827=4829,4828
<4830=4831
<4831=4833,4832
<4833=4835,4834
<4836=4837
<4837=4846,4838
<4838=4844,4839
<4839=4842,4840
<4840=4841
<4842=4843
<4844=4845
<4846=4848,4847
<4849=4850
<4854=4855
<4855=4861,4856
<4856=4859,4857
<4857=4858
<4859=4860
<4861=4862
<4863=4894,4888,4882,4876,4870,4864
<4864=4865
<4865=4867,4866
<4867=4869,4868
<4870=4871
<4871=4873,4872
<4873=4875,4874
<4876=4877
<4877=4879,4878
<4879=4881,4880
<4882=4883
<4883=4885,4884
<4885=4887,4886
<4888=4889
<4889=4891,4890
<4891=4893,4892
<4894=4895
<4895=4906,4896
<4896=4904,4897
<4897=4902,4900,4898
<4898=4899
<4900=4901
<4902=4903
<4904=4905
<4906=4908,4907
<4909=4910
<4914=4915
<4915=4919,4916
<4916=4917
<4917=4918
<4919=4920
<4921=4922
<4922=4924,4923
<4924=4925
<4926=4927
<4927=4931,4928
<4928=4929
<4929=4930
<4931=4932
<4933=4934
<4934=4940,4935
<4935=4938,4936
<4936=4937
<4938=4939
<4940=4941
<4942=4943
<4943=4951,4944
<4944=4949,4947,4945
<4945=4946
<4947=4948
<4949=4950
<4951=4952
<4952=4954,4953
<4955=5009,4996,4968,4962,4956
<4956=4957
<4957=4959,4958
<4959=4961,4960
<4962=4963
<4963=4965,4964
<4965=4967,4966
<4968=4969
<4969=4990,4970
<4970=4981,4979,4975,4973,4971
<4971=4972
<4973=4974
<4975=4976
<4976=4978,4977
<4979=4980
<4981=4982
<4982=4988,4983
<4983=4986,4984
<4984=4985
<4986=4987
<4988=4989
<4990=4991
<4991=4993,4992
<4993=4995,4994
<4996=4997
<4997=5006,4998
<4998=5004,4999
<4999=5002,5000
<5000=5001
<5002=5003
<5004=5005
<5006=5008,5007
<5009=5010
<5010=5014,5011
<5011=5012
<5012=5013
<5014=5015
<5015=5017,5016
<5018=5019
<5023=5024
<5024=5030,5025
<5025=5028,5026
<5026=5027
<5028=5029
<5030=5031
<5032=5033
<5033=5041,5034
<5034=5039,5037,5035
<5035=5036
<5037=5038
<5039=5040
<5041=5042
<5042=5044,5043
<5045=5072,5061,5055,5046
<5046=5047
<5047=5051,5048
<5048=5049
<5049=5050
<5051=5052
<5052=5054,5053
<5055=5056
<5056=5058,5057
<5058=5060,5059
<5061=5062
<5062=5068,5063
<5063=5066,5064
<5064=5065
<5066=5067
<5068=5069
<5069=5071,5070
<5072=5073
<5073=5077,5074
<5074=5075
<5075=5076
<5077=5078
<5078=5080,5079
<5081=5082
<5086=5087
<5087=5091,5088
<5088=5089
<5089=5090
<5091=5092
<5093=5094
<5094=5098,5095
<5095=5096
<5096=5097
<5098=5099
<5100=5101
<5101=5105,5102
<5102=5103
<5103=5104
<5105=5106
<5107=5108
<5108=5114,5109
<5109=5112,5110
<5110=5111
<5112=5113
<5114=5115
<5116=5117
<5117=5119,5118
<5119=5121,5120
<5122=5123
<5123=5125,5124
<5125=5127,5126
<5127=5129,5128
<5130=5131
<5131=5142,5132
<5132=5140,5133
<5133=5138,5134
<5134=5135
<5135=5137,5136
<5138=5139
<5140=5141
<5142=5144,5143
<5145=5146
<5146=5161,5147
<5147=5148
<5148=5149
<5149=5153,5150
<5150=5151
<5151=5152
<5153=5154
<5154=5156,5155
<5156=5158,5157
<5158=5160,5159
<5161=5162
<5162=5164,5163
<5165=5166
<5166=5172,5167
<5167=5171,5168
<5168=5170,5169
<5173=5174
<5174=5180,5175
<5175=5178,5176
<5176=5177
<5178=5179
<5180=5181
<5182=5183
<5183=5185,5184
<5185=5187,5186
<5188=5189
<5189=5191,5190
<5191=5193,5192
<5193=5195,5194
<5196=5197
<5197=5208,5198
<5198=5206,5199
<5199=5204,5200
<5200=5201
<5201=5203,5202
<5204=5205
<5206=5207
<5208=5210,5209
<5211=5212
<5212=5227,5213
<5213=5214
<5214=5215
<5215=5219,5216
<5216=5217
<5217=5218
<5219=5220
<5220=5222,5221
<5222=5224,5223
<5224=5226,5225
<5227=5228
<5228=5230,5229
<5231=5232
<5232=5238,5233
<5233=5237,5234
<5234=5236,5235
<5239=5240
<5240=5246,5241
<5241=5244,5242
<5242=5243
<5244=5245
<5246=5247
<5248=5249
<5249=5251,5250
<5251=5253,5252
<5254=5255
<5255=5257,5256
<5257=5259,5258
<5259=5261,5260
<5262=5263
<5263=5272,5264
<5264=5270,5265
<5265=5268,5266
<5266=5267
<5268=5269
<5270=5271
<5272=5274,5273
<5275=5276
<5276=5282,5277
<5277=5280,5278
<5278=5279
<5280=5281
<5282=5283
<5283=5285,5284
<5286=5287
<5287=5289,5288
<5289=5291,5290
<5292=5293
<5293=5295,5294
<5295=5297,5296
<5298=5299
<5299=5301,5300
<5301=5303,5302
<5304=5305
<5305=5307,5306
<5308=5309
<5309=5315,5310
<5310=5313,5311
<5311=5312
<5313=5314
<5315=5316
<5317=5318
<5318=5322,5319
<5319=5320
<5320=5321
<5322=5323
<5323=5325,5324
<5326=5327
<5327=5331,5328
<5328=5329
<5329=5330
<5331=5332
<5332=5334,5333
<5335=5336
<5336=5340,5337
<5337=5338
<5338=5339
<5340=5341
<5341=5343,5342
<5344=5345
<5345=5347,5346
<5347=5349,5348
<5350=5351
<5351=5353,5352
<5353=5355,5354
<5356=5357
<5357=5366,5358
<5358=5364,5359
<5359=5362,5360
<5360=5361
<5362=5363
<5364=5365
<5366=5368,5367
<5369=5370
<5370=5376,5371
<5371=5375,5372
<5372=5374,5373
<5377=5378
<5378=5384,5379
<5379=5382,5380
<5380=5381
<5382=5383
<5384=5385
<5386=5387
<5387=5389,5388
<5389=5391,5390
<5392=5393
<5393=5399,5394
<5394=5397,5395
<5395=5396
<5397=5398
<5399=5400
<5400=5402,5401
<5403=5404
<5404=5406,5405
<5406=5408,5407
<5409=5410
<5410=5412,5411
<5412=5414,5413
<5415=5416
<5416=5418,5417
<5418=5420,5419
<5421=5422
<5422=5431,5423
<5423=5429,5424
<5424=5427,5425
<5425=5426
<5427=5428
<5429=5430
<5431=5433,5432
<5434=5435
<5435=5437,5436
<5438=5439
<5439=5445,5440
<5440=5443,5441
<5441=5442
<5443=5444
<5445=5446
<5447=5448
<5448=5452,5449
<5449=5450
<5450=5451
<5452=5453
<5453=5455,5454
<5456=5457
<5457=5461,5458
<5458=5459
<5459=5460
<5461=5462
<5462=5464,5463
<5465=5466
<5466=5470,5467
<5467=5468
<5468=5469
<5470=5471
<5471=5473,5472
<5474=5475
<5475=5477,5476
<5477=5479,5478
<5480=5481
<5481=5483,5482
<5483=5485,5484
<5486=5487
<5487=5496,5488
<5488=5494,5489
<5489=5492,5490
<5490=5491
<5492=5493
<5494=5495
<5496=5498,5497
<5499=5500
<5500=5506,5501
<5501=5505,5502
<5502=5504,5503
<5507=5508
<5508=5514,5509
<5509=5512,5510
<5510=5511
<5512=5513
<5514=5515
<5516=5517
<5517=5519,5518
<5519=5521,5520
<5522=5523
<5523=5527,5524
<5524=5525
<5525=5526
<5527=5528
<5528=5530,5529
<5531=5532
<5532=5534,5533
<5534=5536,5535
<5537=5538
<5538=5540,5539
<5540=5542,5541
<5543=5544
<5544=5546,5545
<5546=5548,5547
<5549=5550
<5550=5552,5551
<5552=5554,5553
<5555=5556
<5556=5565,5557
<5557=5563,5558
<5558=5561,5559
<5559=5560
<5561=5562
<5563=5564
<5565=5567,5566
<5568=5569
<5569=5571,5570
<5572=5573
<5573=5579,5574
<5574=5577,5575
<5575=5576
<5577=5578
<5579=5580
<5581=5622,5616,5607,5594,5588,5582
<5582=5583
<5583=5585,5584
<5585=5587,5586
<5588=5589
<5589=5591,5590
<5591=5593,5592
<5594=5595
<5595=5604,5596
<5596=5602,5597
<5597=5600,5598
<5598=5599
<5600=5601
<5602=5603
<5604=5606,5605
<5607=5608
<5608=5612,5609
<5609=5610
<5610=5611
<5612=5613
<5613=5615,5614
<5616=5617
<5617=5619,5618
<5619=5621,5620
<5622=5623
<5623=5625,5624
<5625=5626
<5627=5628
<5628=5632,5629
<5629=5631,5630
<5633=5634
<5634=5638,5635
<5635=5636
<5636=5637
<5638=5639
<5640=5692,5641
<5641=5688,5651,5642
<5642=5643
<5643=5649,5644
<5644=5647,5645
<5645=5646
<5647=5648
<5649=5650
<5651=5673,5667,5661,5652
<5652=5653
<5653=5657,5654
<5654=5655
<5655=5656
<5657=5658
<5658=5660,5659
<5661=5662
<5662=5664,5663
<5664=5666,5665
<5667=5668
<5668=5670,5669
<5670=5672,5671
<5673=5674
<5674=5685,5675
<5675=5683,5676
<5676=5679,5677
<5677=5678
<5679=5680
<5680=5682,5681
<5683=5684
<5685=5687,5686
<5688=5689
<5689=5691,5690
<5692=5693
<5693=5695,5694
<5695=5696
<5697=5698
<5698=5702,5699
<5699=5700
<5700=5701
<5702=5703
<5704=5705
<5705=5711,5706
<5706=5709,5707
<5707=5708
<5709=5710
<5711=5712
<5713=5735,5729,5723,5714
<5714=5715
<5715=5719,5716
<5716=5717
<5717=5718
<5719=5720
<5720=5722,5721
<5723=5724
<5724=5726,5725
<5726=5728,5727
<5729=5730
<5730=5732,5731
<5732=5734,5733
<5735=5736
<5736=5747,5737
<5737=5745,5738
<5738=5741,5739
<5739=5740
<5741=5742
<5742=5744,5743
<5745=5746
<5747=5749,5748
<5750=5751
<5755=5756
<5756=5760,5757
<5757=5758
<5758=5759
<5760=5761
<5762=5763
<5763=5767,5764
<5764=5765
<5765=5766
<5767=5768
<5769=5770
<5770=5772,5771
<5772=5773
<5773=5775,5774
<5775=5777,5776
<5778=5779
<5779=5783,5780
<5780=5781
<5781=5782
<5783=5784
<5785=5786
<5786=5790,5787
<5787=5788
<5788=5789
<5790=5791
<5792=5793
<5793=5797,5794
<5794=5795
<5795=5796
<5797=5798
<5798=5800,5799
<5800=5802,5801
<5803=5804
<5804=5808,5805
<5805=5806
<5806=5807
<5808=5809
<5810=5811
<5811=5825,5812
<5812=5819,5813
<5813=5814
<5814=5816,5815
<5816=5818,5817
<5819=5820
<5820=5822,5821
<5822=5824,5823
<5825=5826
<5826=5828,5827
<5828=5830,5829
<5831=5832
<5832=5836,5833
<5833=5834
<5834=5835
<5836=5837
<5838=5839
<5839=5845,5840
<5840=5843,5841
<5841=5842
<5843=5844
<5845=5846
<5846=5848,5847
<5848=5850,5849
<5851=5852
<5852=5865,5853
<5853=5863,5854
<5854=5857,5855
<5855=5856
<5857=5858
<5858=5860,5859
<5860=5862,5861
<5863=5864
<5865=5867,5866
<5867=5869,5868
<5870=5871
<5871=5877,5872
<5872=5875,5873
<5873=5874
<5875=5876
<5877=5878
<5879=5912,5903,5897,5886,5880
<5880=5881
<5881=5883,5882
<5883=5885,5884
<5886=5887
<5887=5893,5888
<5888=5891,5889
<5889=5890
<5891=5892
<5893=5894
<5894=5896,5895
<5897=5898
<5898=5900,5899
<5900=5902,5901
<5903=5904
<5904=5908,5905
<5905=5906
<5906=5907
<5908=5909
<5909=5911,5910
<5912=5913
<5913=5915,5914
<5915=5917,5916
<5918=5919
<5923=5924
<5924=5926,5925
<5926=5927
<5928=5929
<5929=5931,5930
<5931=5932
<5932=5934,5933
<5934=5936,5935
<5936=5938,5937
<5939=5940
<5940=5944,5941
<5941=5942
<5942=5943
<5944=5945
<5946=5947
<5947=5949,5948
<5949=5950
<5951=5952
<5952=5956,5953
<5953=5954
<5954=5955
<5956=5957
<5958=5959
<5959=5961,5960
<5961=5962
<5962=5964,5963
<5965=5966
<5966=5970,5967
<5967=5968
<5968=5969
<5970=5971
<5972=5973
<5973=5977,5974
<5974=5975
<5975=5976
<5977=5978
<5979=5980
<5980=5984,5981
<5981=5982
<5982=5983
<5984=5985
<5986=5987
<5987=5995,5988
<5988=5993,5991,5989
<5989=5990
<5991=5992
<5993=5994
<5995=5996
<5996=5998,5997
<5999=6000
<6000=6004,6001
<6001=6002
<6002=6003
<6004=6005
<6006=6007
<6007=6011,6008
<6008=6009
<6009=6010
<6011=6012
<6013=6014
<6014=6018,6015
<6015=6016
<6016=6017
<6018=6019
<6020=6030,6021
<6021=6022
<6022=6028,6023
<6023=6026,6024
<6024=6025
<6026=6027
<6028=6029
<6030=6031
<6031=6037,6032
<6032=6035,6033
<6033=6034
<6035=6036
<6037=6038
<6038=6040,6039
<6040=6042,6041
<6043=6044
<6044=6048,6045
<6045=6046
<6046=6047
<6048=6049
<6050=6051
<6051=6055,6052
<6052=6053
<6053=6054
<6055=6056
<6057=6058
<6058=6060,6059
<6060=6061
<6061=6063,6062
<6064=6065
<6065=6067,6066
<6067=6068
<6068=6070,6069
<6071=6072
<6072=6078,6073
<6073=6076,6074
<6074=6075
<6076=6077
<6078=6079
<6080=6081
<6081=6083,6082
<6083=6085,6084
<6086=6087
<6087=6089,6088
<6089=6091,6090
<6092=6093
<6093=6095,6094
<6095=6096
<6096=6098,6097
<6099=6100
<6100=6118,6117,6101
<6101=6116,6102
<6102=6115,6103
<6103=6113,6104
<6104=6109,6105
<6105=6106
<6106=6108,6107
<6109=6110
<6110=6112,6111
<6113=6114
<6119=6120
<6120=6126,6121
<6121=6124,6122
<6122=6123
<6124=6125
<6126=6127
<6128=6129
<6129=6131,6130
<6131=6133,6132
<6134=6135
<6135=6137,6136
<6137=6139,6138
<6140=6141
<6141=6159,6158,6142
<6142=6157,6143
<6143=6156,6144
<6144=6154,6145
<6145=6150,6146
<6146=6147
<6147=6149,6148
<6150=6151
<6151=6153,6152
<6154=6155
<6160=6167,6161
<6161=6166,6165,6162
<6162=6164,6163
<6167=6172,6171,6168
<6168=6170,6169
<6173=6174
<6174=6180,6175
<6175=6178,6176
<6176=6177
<6178=6179
<6180=6181
<6182=6183
<6183=6185,6184
<6185=6187,6186
<6188=6189
<6189=6191,6190
<6191=6193,6192
<6194=6195
<6195=6209,6208,6196
<6196=6207,6197
<6197=6206,6198
<6198=6204,6199
<6199=6202,6200
<6200=6201
<6202=6203
<6204=6205
<6210=6211
<6211=6217,6212
<6212=6215,6213
<6213=6214
<6215=6216
<6217=6218
<6219=6220
<6220=6222,6221
<6222=6224,6223
<6225=6226
<6226=6228,6227
<6228=6230,6229
<6231=6232
<6232=6246,6245,6233
<6233=6244,6234
<6234=6243,6235
<6235=6241,6236
<6236=6239,6237
<6237=6238
<6239=6240
<6241=6242
<6247=6248
<6248=6257,6256,6249
<6249=6253,6250
<6250=6252,6251
<6253=6255,6254
<6258=6259
<6259=6264,6263,6260
<6260=6262,6261
<6265=6266
<6266=6272,6267
<6267=6270,6268
<6268=6269
<6270=6271
<6272=6273
<6274=6275
<6275=6281,6276
<6276=6279,6277
<6277=6278
<6279=6280
<6281=6282
<6282=6284,6283
<6285=6286
<6286=6288,6287
<6288=6290,6289
<6291=6292
<6292=6294,6293
<6294=6296,6295
<6297=6298
<6298=6309,6299
<6299=6308,6300
<6300=6306,6301
<6301=6304,6302
<6302=6303
<6304=6305
<6306=6307
<6310=6311
<6311=6313,6312
<6313=6314
<6315=6316
<6316=6318,6317
<6318=6319
<6319=6321,6320
<6322=6343,6323
<6323=6336,6331,6324
<6324=6325
<6325=6329,6326
<6326=6327
<6327=6328
<6329=6330
<6331=6332
<6332=6334,6333
<6334=6335
<6336=6337
<6337=6341,6338
<6338=6339
<6339=6340
<6341=6342
<6343=6344
<6345=6346
<6346=6352,6347
<6347=6349,6348
<6349=6351,6350
<6353=6354
<6354=6358,6355
<6355=6356
<6356=6357
<6358=6359
<6360=6361
<6361=6363,6362
<6363=6364
<6365=6366
<6366=6370,6367
<6367=6368
<6368=6369
<6370=6371
<6372=6373
<6373=6377,6374
<6374=6375
<6375=6376
<6377=6378
<6379=6380
<6380=6391,6381
<6381=6382
<6382=6383
<6383=6389,6384
<6384=6387,6385
<6385=6386
<6387=6388
<6389=6390
<6391=6392
<6392=6394,6393
<6394=6396,6395
<6397=6398
<6398=6409,6399
<6399=6400
<6400=6401
<6401=6407,6402
<6402=6405,6403
<6403=6404
<6405=6406
<6407=6408
<6409=6410
<6410=6412,6411
<6412=6414,6413
<6415=6416
<6416=6420,6417
<6417=6418
<6418=6419
<6420=6421
<6421=6423,6422
<6424=6425
<6425=6429,6426
<6426=6427
<6427=6428
<6429=6430
<6431=6432
<6432=6440,6433
<6433=6434
<6434=6435
<6435=6437,6436
<6437=6439,6438
<6440=6441
<6442=6443
<6443=6447,6444
<6444=6445
<6445=6446
<6447=6448
<6449=6450
<6450=6452,6451
<6452=6453
<6453=6455,6454
<6456=6457
<6457=6461,6458
<6458=6459
<6459=6460
<6461=6462
<6463=6464
<6464=6468,6465
<6465=6466
<6466=6467
<6468=6469
<6470=6471
<6471=6473,6472
<6473=6474
<6474=6476,6475
<6477=6478
<6478=6492,6479
<6479=6486,6480
<6480=6481
<6481=6483,6482
<6483=6485,6484
<6486=6487
<6487=6489,6488
<6489=6491,6490
<6492=6493
<6493=6495,6494
<6496=6497
<6497=6525,6498
<6498=6519,6513,6511,6505,6499
<6499=6500
<6500=6502,6501
<6502=6504,6503
<6505=6506
<6506=6508,6507
<6508=6510,6509
<6511=6512
<6513=6514
<6514=6516,6515
<6516=6518,6517
<6519=6520
<6520=6522,6521
<6522=6524,6523
<6525=6526
<6527=6528
<6528=6532,6529
<6529=6530
<6530=6531
<6532=6533
<6534=6582,6535
<6535=6574,6566,6536
<6536=6541,6537
<6537=6538
<6538=6540,6539
<6541=6542
<6542=6565,6543
<6543=6563,6544
<6544=6557,6551,6545
<6545=6546
<6546=6548,6547
<6548=6550,6549
<6551=6552
<6552=6554,6553
<6554=6556,6555
<6557=6558
<6558=6560,6559
<6560=6562,6561
<6563=6564
<6566=6567
<6567=6569,6568
<6569=6571,6570
<6571=6573,6572
<6574=6575
<6575=6577,6576
<6577=6579,6578
<6579=6581,6580
<6582=6583
<6583=6608,6584
<6584=6607,6585
<6585=6605,6586
<6586=6599,6593,6587
<6587=6588
<6588=6590,6589
<6590=6592,6591
<6593=6594
<6594=6596,6595
<6596=6598,6597
<6599=6600
<6600=6602,6601
<6602=6604,6603
<6605=6606
<6609=6610
<6610=6614,6611
<6611=6612
<6612=6613
<6614=6615
<6616=6626,6617
<6617=6619,6618
<6619=6620
<6620=6624,6621
<6621=6622
<6622=6623
<6624=6625
<6626=6627
<6627=6646,6628
<6628=6644,6629
<6629=6642,6640,6634,6632,6630
<6630=6631
<6632=6633
<6634=6635
<6635=6637,6636
<6637=6639,6638
<6640=6641
<6642=6643
<6644=6645
<6647=6663,6656,6648
<6648=6649
<6649=6650
<6650=6654,6651
<6651=6652
<6652=6653
<6654=6655
<6656=6657
<6657=6661,6658
<6658=6659
<6659=6660
<6661=6662
<6663=6664
<6665=6681,6674,6666
<6666=6667
<6667=6668
<6668=6672,6669
<6669=6670
<6670=6671
<6672=6673
<6674=6675
<6675=6679,6676
<6676=6677
<6677=6678
<6679=6680
<6681=6682
<6682=6684,6683
<6684=6685
<6686=6687
<6687=6689,6688
<6690=6706,6699,6691
<6691=6692
<6692=6693
<6693=6697,6694
<6694=6695
<6695=6696
<6697=6698
<6699=6700
<6700=6704,6701
<6701=6702
<6702=6703
<6704=6705
<6706=6707
<6708=6716,6709
<6709=6710
<6710=6711
<6711=6715,6712
<6712=6714,6713
<6716=6717
<6717=6719,6718
<6719=6720
<6721=6722
<6722=6728,6723
<6723=6725,6724
<6725=6727,6726
<6729=6730
<6730=6734,6731
<6731=6732
<6732=6733
<6734=6735
<6736=6774,6737
<6737=6770,6750,6738
<6738=6739
<6739=6748,6740
<6740=6741
<6741=6742
<6742=6744,6743
<6744=6745
<6745=6747,6746
<6748=6749
<6750=6751
<6751=6769,6752
<6752=6768,6753
<6753=6763,6754
<6754=6762,6755
<6755=6757,6756
<6757=6759,6758
<6759=6761,6760
<6763=6765,6764
<6765=6767,6766
<6770=6771
<6771=6773,6772
<6774=6775
<6775=6777,6776
<6778=6779
<6779=6804,6803,6780
<6780=6802,6781
<6781=6792,6782
<6782=6790,6783
<6783=6784
<6784=6785
<6785=6787,6786
<6787=6789,6788
<6790=6791
<6792=6800,6793
<6793=6794
<6794=6795
<6795=6797,6796
<6797=6799,6798
<6800=6801
<6805=6806
<6806=6812,6807
<6807=6809,6808
<6809=6811,6810
<6813=6814
<6814=6822,6815
<6815=6816
<6816=6817
<6817=6819,6818
<6819=6821,6820
<6822=6823
<6823=6825,6824
<6826=6827
<6827=6831,6828
<6828=6829
<6829=6830
<6831=6832
<6832=6834,6833
<6835=6836
<6836=6838,6837
<6839=6840
<6840=6845,6844,6841
<6841=6843,6842
<6846=6847
<6847=6852,6851,6848
<6848=6850,6849
<6853=6854
<6854=6859,6858,6855
<6855=6857,6856
<6860=6861
<6861=6866,6865,6862
<6862=6864,6863
<6867=6868
<6868=6872,6869
<6869=6870
<6870=6871
<6872=6873
<6873=6875,6874
<6932=6933
<6933=6942,6934
<6934=6935
<6935=6936
<6936=6938,6937
<6938=6940,6939
<6940=6941
<6942=6943
<6944=6945
<6945=6954,6946
<6946=6947
<6947=6948
<6948=6950,6949
<6950=6952,6951
<6952=6953
<6954=6955
<6956=6957
<6957=6966,6958
<6958=6959
<6959=6960
<6960=6962,6961
<6962=6964,6963
<6964=6965
<6966=6967
<6968=6969
<6969=6976,6970
<6970=6971
<6971=6972
<6972=6974,6973
<6974=6975
<6976=6977
<6978=7012,6979
<6979=6980
<6980=7010,6981
<6981=6996,6982
<6982=6983
<6983=6985,6984
<6985=6986
<6986=6988,6987
<6988=6992,6989
<6989=6990
<6990=6991
<6992=6993
<6993=6995,6994
<6996=6997
<6997=6999,6998
<6999=7000
<7000=7002,7001
<7002=7006,7003
<7003=7004
<7004=7005
<7006=7007
<7007=7009,7008
<7010=7011
<7012=7013
<7013=7020,7014
<7014=7018,7015
<7015=7016
<7016=7017
<7018=7019
<7021=7022
<7022=7029,7023
<7023=7025,7024
<7025=7027,7026
<7027=7028
<7030=7064,7031
<7031=7032
<7032=7062,7033
<7033=7048,7034
<7034=7035
<7035=7037,7036
<7037=7038
<7038=7040,7039
<7040=7044,7041
<7041=7042
<7042=7043
<7044=7045
<7045=7047,7046
<7048=7049
<7049=7051,7050
<7051=7052
<7052=7054,7053
<7054=7058,7055
<7055=7056
<7056=7057
<7058=7059
<7059=7061,7060
<7062=7063
<7064=7065
<7065=7072,7066
<7066=7070,7067
<7067=7068
<7068=7069
<7070=7071
<7073=7074
<7074=7083,7075
<7075=7079,7076
<7076=7078,7077
<7079=7081,7080
<7081=7082
<7084=7085
<7085=7087,7086
<7088=7089
<7089=7091,7090
<7091=7092
<7092=7094,7093
<7095=7096
<7096=7098,7097
<7098=7099
<7099=7101,7100
<7102=7103
<7103=7107,7104
<7104=7106,7105
<7108=7109
<7109=7111,7110
<7111=7112
<7112=7114,7113
<7114=7116,7115
<7117=7118
<7118=7120,7119
<7120=7121
<7122=7123
<7123=7125,7124
<7126=7127
<7127=7129,7128
<7130=7131
<7131=7135,7132
<7132=7133
<7133=7134
<7135=7136
<7137=7138
<7138=7140,7139
<7141=7142
<7142=7144,7143
<7145=7146
<7146=7148,7147
<7149=7150
<7150=7152,7151
<7153=7154
<7154=7156,7155
<7157=7158
<7158=7160,7159
<7160=7162,7161
<7162=7164,7163
<7513=7516,7515,7514
<7516=8125,8112,8091,8074,8057,8040,8030,8020,8006,7664,7517
<7517=7657,7518
<7518=7641,7640,7639,7638,7636,7589,7580,7579,7578,7577,7575,7528,7519
<7519=7520
<7520=7526,7521
<7521=7524,7522
<7522=7523
<7524=7525
<7526=7527
<7528=7560,7547,7541,7535,7529
<7529=7530
<7530=7532,7531
<7532=7534,7533
<7535=7536
<7536=7538,7537
<7538=7540,7539
<7541=7542
<7542=7544,7543
<7544=7546,7545
<7547=7548
<7548=7556,7549
<7549=7554,7550
<7550=7551
<7551=7553,7552
<7554=7555
<7556=7557
<7557=7559,7558
<7560=7561
<7561=7572,7562
<7562=7570,7563
<7563=7568,7564
<7564=7565
<7565=7567,7566
<7568=7569
<7570=7571
<7572=7574,7573
<7575=7576
<7580=7581
<7581=7587,7582
<7582=7585,7583
<7583=7584
<7585=7586
<7587=7588
<7589=7621,7608,7602,7596,7590
<7590=7591
<7591=7593,7592
<7593=7595,7594
<7596=7597
<7597=7599,7598
<7599=7601,7600
<7602=7603
<7603=7605,7604
<7605=7607,7606
<7608=7609
<7609=7617,7610
<7610=7615,7611
<7611=7612
<7612=7614,7613
<7615=7616
<7617=7618
<7618=7620,7619
<7621=7622
<7622=7633,7623
<7623=7631,7624
<7624=7629,7625
<7625=7626
<7626=7628,7627
<7629=7630
<7631=7632
<7633=7635,7634
<7636=7637
<7641=7642
<7642=7656,7655,7643
<7643=7654,7644
<7644=7646,7645
<7646=7648,7647
<7648=7650,7649
<7650=7651
<7651=7653,7652
<7657=7658
<7658=7660,7659
<7660=7662,7661
<7662=7663
<7664=7999,7665
<7665=7983,7982,7981,7980,7978,7931,7922,7921,7920,7919,7917,7870,7861,7860,7859,7858,7856,7804,7795,7794,7793,7792,7790,7729,7720,7666
<7666=7718,7693,7667
<7667=7668
<7668=7687,7681,7675,7669
<7669=7670
<7670=7672,7671
<7672=7674,7673
<7675=7676
<7676=7678,7677
<7678=7680,7679
<7681=7682
<7682=7684,7683
<7684=7686,7685
<7687=7688
<7688=7690,7689
<7690=7692,7691
<7693=7712,7706,7700,7694
<7694=7695
<7695=7697,7696
<7697=7699,7698
<7700=7701
<7701=7703,7702
<7703=7705,7704
<7706=7707
<7707=7709,7708
<7709=7711,7710
<7712=7713
<7713=7715,7714
<7715=7717,7716
<7718=7719
<7720=7721
<7721=7727,7722
<7722=7725,7723
<7723=7724
<7725=7726
<7727=7728
<7729=7781,7774,7759,7748,7742,7736,7730
<7730=7731
<7731=7733,7732
<7733=7735,7734
<7736=7737
<7737=7739,7738
<7739=7741,7740
<7742=7743
<7743=7745,7744
<7745=7747,7746
<7748=7749
<7749=7755,7750
<7750=7753,7751
<7751=7752
<7753=7754
<7755=7756
<7756=7758,7757
<7759=7760
<7760=7771,7761
<7761=7769,7762
<7762=7765,7763
<7763=7764
<7765=7766
<7766=7768,7767
<7769=7770
<7771=7773,7772
<7774=7775
<7775=7777,7776
<7777=7778
<7778=7780,7779
<7781=7782
<7782=7786,7783
<7783=7784
<7784=7785
<7786=7787
<7787=7789,7788
<7790=7791
<7795=7796
<7796=7802,7797
<7797=7800,7798
<7798=7799
<7800=7801
<7802=7803
<7804=7847,7834,7823,7817,7811,7805
<7805=7806
<7806=7808,7807
<7808=7810,7809
<7811=7812
<7812=7814,7813
<7814=7816,7815
<7817=7818
<7818=7820,7819
<7820=7822,7821
<7823=7824
<7824=7830,7825
<7825=7828,7826
<7826=7827
<7828=7829
<7830=7831
<7831=7833,7832
<7834=7835
<7835=7844,7836
<7836=7842,7837
<7837=7840,7838
<7838=7839
<7840=7841
<7842=7843
<7844=7846,7845
<7847=7848
<7848=7852,7849
<7849=7850
<7850=7851
<7852=7853
<7853=7855,7854
<7856=7857
<7861=7862
<7862=7868,7863
<7863=7866,7864
<7864=7865
<7866=7867
<7868=7869
<7870=7902,7889,7883,7877,7871
<7871=7872
<7872=7874,7873
<7874=7876,7875
<7877=7878
<7878=7880,7879
<7880=7882,7881
<7883=7884
<7884=7886,7885
<7886=7888,7887
<7889=7890
<7890=7898,7891
<7891=7894,7892
<7892=7893
<7894=7895
<7895=7897,7896
<7898=7899
<7899=7901,7900
<7902=7903
<7903=7914,7904
<7904=7912,7905
<7905=7908,7906
<7906=7907
<7908=7909
<7909=7911,7910
<7912=7913
<7914=7916,7915
<7917=7918
<7922=7923
<7923=7929,7924
<7924=7927,7925
<7925=7926
<7927=7928
<7929=7930
<7931=7963,7950,7944,7938,7932
<7932=7933
<7933=7935,7934
<7935=7937,7936
<7938=7939
<7939=7941,7940
<7941=7943,7942
<7944=7945
<7945=7947,7946
<7947=7949,7948
<7950=7951
<7951=7959,7952
<7952=7955,7953
<7953=7954
<7955=7956
<7956=7958,7957
<7959=7960
<7960=7962,7961
<7963=7964
<7964=7975,7965
<7965=7973,7966
<7966=7969,7967
<7967=7968
<7969=7970
<7970=7972,7971
<7973=7974
<7975=7977,7976
<7978=7979
<7983=7984
<7984=7998,7997,7985
<7985=7996,7986
<7986=7988,7987
<7988=7990,7989
<7990=7992,7991
<7992=7993
<7993=7995,7994
<7999=8000
<8000=8002,8001
<8002=8004,8003
<8004=8005
<8006=8007
<8007=8019,8008
<8008=8018,8009
<8009=8017,8010
<8010=8016,8011
<8011=8015,8012
<8012=8014,8013
<8020=8028,8021
<8021=8022
<8022=8026,8023
<8023=8024
<8024=8025
<8026=8027
<8028=8029
<8030=8038,8031
<8031=8032
<8032=8036,8033
<8033=8034
<8034=8035
<8036=8037
<8038=8039
<8040=8055,8041
<8041=8049,8042
<8042=8043
<8043=8047,8044
<8044=8045
<8045=8046
<8047=8048
<8049=8050
<8050=8054,8051
<8051=8053,8052
<8055=8056
<8057=8072,8058
<8058=8066,8059
<8059=8060
<8060=8064,8061
<8061=8062
<8062=8063
<8064=8065
<8066=8067
<8067=8071,8068
<8068=8070,8069
<8072=8073
<8074=8089,8075
<8075=8083,8076
<8076=8077
<8077=8081,8078
<8078=8079
<8079=8080
<8081=8082
<8083=8084
<8084=8088,8085
<8085=8087,8086
<8089=8090
<8091=8110,8092
<8092=8106,8100,8093
<8093=8094
<8094=8098,8095
<8095=8096
<8096=8097
<8098=8099
<8100=8101
<8101=8105,8102
<8102=8104,8103
<8106=8107
<8107=8109,8108
<8110=8111
<8112=8122,8119,8116,8113
<8113=8115,8114
<8116=8118,8117
<8119=8121,8120
<8122=8124,8123
<8125=8126
<8126=8131,8130,8127
<8127=8129,8128
<8193=8199,8198,8194
<8194=8195
<8195=8197,8196
<8199=8200
<8200=8220,8201
<8201=8202
<8202=8203
<8203=8217,8204
<8204=8214,8205
<8205=8211,8206
<8206=8208,8207
<8208=8210,8209
<8211=8213,8212
<8214=8216,8215
<8217=8219,8218
<8220=8221
<8221=8223,8222
<8240=8249,8248,8241
<8241=8245,8242
<8242=8244,8243
<8245=8247,8246
<8249=8250
<8250=8358,8251
<8251=8252
<8252=8356,8335,8253
<8253=8254
<8254=8255
<8255=8331,8278,8256
<8256=8257
<8257=8268,8258
<8258=8259
<8259=8265,8260
<8260=8262,8261
<8262=8264,8263
<8265=8267,8266
<8268=8269
<8269=8275,8270
<8270=8272,8271
<8272=8274,8273
<8275=8277,8276
<8278=8318,8305,8292,8279
<8279=8280
<8280=8286,8281
<8281=8284,8282
<8282=8283
<8284=8285
<8286=8287
<8287=8289,8288
<8289=8291,8290
<8292=8293
<8293=8299,8294
<8294=8297,8295
<8295=8296
<8297=8298
<8299=8300
<8300=8302,8301
<8302=8304,8303
<8305=8306
<8306=8312,8307
<8307=8310,8308
<8308=8309
<8310=8311
<8312=8313
<8313=8315,8314
<8315=8317,8316
<8318=8319
<8319=8325,8320
<8320=8323,8321
<8321=8322
<8323=8324
<8325=8326
<8326=8328,8327
<8328=8330,8329
<8331=8332
<8332=8334,8333
<8335=8346,8336
<8336=8337
<8337=8343,8338
<8338=8340,8339
<8340=8342,8341
<8343=8345,8344
<8346=8347
<8347=8353,8348
<8348=8350,8349
<8350=8352,8351
<8353=8355,8354
<8356=8357
<8358=8359
<8359=8361,8360
<8379=8385,8384,8380
<8380=8381
<8381=8383,8382
<8390=8393,8392,8391
<8393=8394
<8394=8400,8395
<8395=8396
<8396=8398,8397
<8398=8399
<8400=8401
<8401=8408,8402
<8402=8404,8403
<8404=8405
<8405=8407,8406
<8408=8410,8409
<8410=8411
<8411=8413,8412
<8421=8427,8426,8422
<8422=8423
<8423=8425,8424
<8427=8452,8448,8442,8430,8428
<8428=8429
<8430=8431
<8431=8440,8432
<8432=8433
<8433=8434
<8434=8436,8435
<8436=8437
<8437=8439,8438
<8440=8441
<8442=8443
<8443=8447,8444
<8444=8446,8445
<8448=8449
<8449=8451,8450
<8452=8519,8517,8453
<8453=8454
<8454=8511,8509,8455
<8455=8456
<8456=8503,8501,8457
<8457=8458
<8458=8495,8493,8459
<8459=8460
<8460=8487,8485,8461
<8461=8462
<8462=8481,8479,8463
<8463=8464
<8464=8475,8473,8465
<8465=8466
<8466=8469,8467
<8467=8468
<8469=8470
<8470=8472,8471
<8473=8474
<8475=8476
<8476=8478,8477
<8479=8480
<8481=8482
<8482=8484,8483
<8485=8486
<8487=8488
<8488=8492,8489
<8489=8491,8490
<8493=8494
<8495=8496
<8496=8500,8497
<8497=8499,8498
<8501=8502
<8503=8504
<8504=8508,8505
<8505=8507,8506
<8509=8510
<8511=8512
<8512=8516,8513
<8513=8515,8514
<8517=8518
<8519=8520
<8520=8524,8521
<8521=8523,8522
<8539=8545,8544,8540
<8540=8541
<8541=8543,8542
<8545=8567,8546
<8546=8563,8558,8547
<8547=8548
<8548=8554,8549
<8549=8550
<8550=8551
<8551=8553,8552
<8554=8555
<8555=8557,8556
<8558=8559
<8559=8560
<8560=8562,8561
<8563=8564
<8564=8566,8565
<8567=8568
<8568=8570,8569
<8579=8582,8581,8580
<8582=8681,8674,8669,8665,8656,8652,8639,8612,8605,8600,8596,8583
<8583=8584
<8584=8590,8585
<8585=8588,8586
<8586=8587
<8588=8589
<8590=8591
<8591=8593,8592
<8593=8595,8594
<8596=8597
<8597=8599,8598
<8600=8601
<8601=8604,8603,8602
<8605=8606
<8606=8611,8610,8607
<8607=8609,8608
<8612=8613
<8613=8638,8614
<8614=8636,8615
<8615=8623,8616
<8616=8617
<8617=8619,8618
<8619=8620
<8620=8622,8621
<8623=8624
<8624=8628,8625
<8625=8626
<8626=8627
<8628=8629
<8629=8631,8630
<8631=8633,8632
<8633=8635,8634
<8636=8637
<8639=8640
<8640=8651,8641
<8641=8645,8642
<8642=8643
<8643=8644
<8645=8646
<8646=8648,8647
<8648=8650,8649
<8652=8653
<8653=8655,8654
<8656=8657
<8657=8661,8658
<8658=8659
<8659=8660
<8661=8662
<8662=8664,8663
<8665=8666
<8666=8668,8667
<8669=8670
<8670=8673,8672,8671
<8674=8675
<8675=8680,8679,8676
<8676=8678,8677
<8681=8682
<8682=8705,8704,8683
<8683=8703,8684
<8684=8701,8685
<8685=8688,8686
<8686=8687
<8688=8689
<8689=8693,8690
<8690=8691
<8691=8692
<8693=8694
<8694=8696,8695
<8696=8698,8697
<8698=8700,8699
<8701=8702
<8723=8732,8731,8724
<8724=8728,8725
<8725=8727,8726
<8728=8730,8729
<8732=8857,8737,8733
<8733=8734
<8734=8736,8735
<8737=8855,8738
<8738=8854,8843,8842,8841,8830,8829,8828,8817,8816,8815,8802,8801,8800,8787,8786,8785,8770,8769,8768,8755,8754,8753,8740,8739
<8740=8741
<8741=8752,8742
<8742=8750,8743
<8743=8746,8744
<8744=8745
<8746=8747
<8747=8749,8748
<8750=8751
<8755=8756
<8756=8767,8757
<8757=8765,8758
<8758=8761,8759
<8759=8760
<8761=8762
<8762=8764,8763
<8765=8766
<8770=8771
<8771=8784,8772
<8772=8782,8773
<8773=8778,8774
<8774=8775
<8775=8777,8776
<8778=8779
<8779=8781,8780
<8782=8783
<8787=8788
<8788=8799,8789
<8789=8797,8790
<8790=8795,8791
<8791=8792
<8792=8794,8793
<8795=8796
<8797=8798
<8802=8803
<8803=8814,8804
<8804=8812,8805
<8805=8810,8806
<8806=8807
<8807=8809,8808
<8810=8811
<8812=8813
<8817=8818
<8818=8827,8819
<8819=8825,8820
<8820=8823,8821
<8821=8822
<8823=8824
<8825=8826
<8830=8831
<8831=8840,8832
<8832=8838,8833
<8833=8836,8834
<8834=8835
<8836=8837
<8838=8839
<8843=8844
<8844=8853,8845
<8845=8851,8846
<8846=8849,8847
<8847=8848
<8849=8850
<8851=8852
<8855=8856
<8857=8858
<8858=8860,8859
<8868=8871,8870,8869
<8871=8931,8922,8910,8903,8878,8874,8872
<8872=8873
<8874=8875
<8875=8877,8876
<8878=8899,8879
<8879=8890,8886,8880
<8880=8882,8881
<8882=8883
<8883=8885,8884
<8886=8887
<8887=8889,8888
<8890=8891
<8891=8898,8892
<8892=8894,8893
<8894=8896,8895
<8896=8897
<8899=8900
<8900=8902,8901
<8903=8904
<8904=8909,8908,8905
<8905=8907,8906
<8910=8911
<8911=8921,8920,8912
<8912=8919,8913
<8913=8915,8914
<8915=8917,8916
<8917=8918
<8922=8923
<8923=8930,8929,8924
<8924=8928,8925
<8925=8927,8926
<8939=8945,8944,8940
<8940=8941
<8941=8943,8942
<8945=9072,8948,8946
<8946=8947
<8948=9070,8949
<8949=9069,9056,9055,9054,9041,9040,9039,9026,9025,9024,9011,9010,9009,8996,8995,8994,8981,8980,8979,8966,8965,8964,8951,8950
<8951=8952
<8952=8963,8953
<8953=8961,8954
<8954=8959,8957,8955
<8955=8956
<8957=8958
<8959=8960
<8961=8962
<8966=8967
<8967=8978,8968
<8968=8976,8969
<8969=8974,8972,8970
<8970=8971
<8972=8973
<8974=8975
<8976=8977
<8981=8982
<8982=8993,8983
<8983=8991,8984
<8984=8989,8987,8985
<8985=8986
<8987=8988
<8989=8990
<8991=8992
<8996=8997
<8997=9008,8998
<8998=9006,8999
<8999=9004,9002,9000
<9000=9001
<9002=9003
<9004=9005
<9006=9007
<9011=9012
<9012=9023,9013
<9013=9021,9014
<9014=9019,9017,9015
<9015=9016
<9017=9018
<9019=9020
<9021=9022
<9026=9027
<9027=9038,9028
<9028=9036,9029
<9029=9034,9032,9030
<9030=9031
<9032=9033
<9034=9035
<9036=9037
<9041=9042
<9042=9053,9043
<9043=9051,9044
<9044=9049,9047,9045
<9045=9046
<9047=9048
<9049=9050
<9051=9052
<9056=9057
<9057=9068,9058
<9058=9066,9059
<9059=9064,9062,9060
<9060=9061
<9062=9063
<9064=9065
<9066=9067
<9070=9071
<9072=9073
<9073=9075,9074
<9082=9088,9087,9083
<9083=9084
<9084=9086,9085
<9088=9109,9102,9089
<9089=9090
<9090=9096,9091
<9091=9094,9092
<9092=9093
<9094=9095
<9096=9097
<9097=9099,9098
<9099=9101,9100
<9102=9107,9103
<9103=9104
<9104=9106,9105
<9107=9108
<9109=9110
<9110=9115,9114,9111
<9111=9113,9112
<9124=9127,9126,9125
<9127=9128
<9128=9150,9129
<9129=9148,9141,9140,9138,9131,9130
<9131=9132
<9132=9136,9133
<9133=9134
<9134=9135
<9136=9137
<9138=9139
<9141=9142
<9142=9146,9143
<9143=9144
<9144=9145
<9146=9147
<9148=9149
<9150=9151
<9158=9164,9163,9159
<9159=9160
<9160=9162,9161
<9164=9206,9165
<9165=9204,9166
<9166=9202,9196,9192,9191,9189,9178,9172,9168,9167
<9168=9169
<9169=9171,9170
<9172=9173
<9173=9175,9174
<9175=9177,9176
<9178=9179
<9179=9187,9180
<9180=9181
<9181=9182
<9182=9184,9183
<9184=9186,9185
<9187=9188
<9189=9190
<9192=9193
<9193=9195,9194
<9196=9197
<9197=9199,9198
<9199=9201,9200
<9202=9203
<9204=9205
<9206=9207
<9207=9209,9208
<9223=9226,9225,9224
<9226=9227
<9227=9234,9228
<9228=9229
<9229=9233,9230
<9230=9232,9231
<9234=9235
<9235=9242,9236
<9236=9238,9237
<9238=9239
<9239=9241,9240
<9242=9244,9243
<9244=9245
<9245=9247,9246
<9256=9259,9258,9257
<9259=9260
<9260=9261
<9261=9263,9262
<9269=9272,9271,9270
<9272=9285,9280,9273
<9273=9274
<9274=9276,9275
<9276=9277
<9277=9279,9278
<9280=9281
<9281=9283,9282
<9283=9284
<9285=9286
<9286=9288,9287
<9288=9289
<9294=9297,9296,9295
<9297=9315,9310,9303,9298
<9298=9299
<9299=9301,9300
<9301=9302
<9303=9304
<9304=9306,9305
<9306=9307
<9307=9309,9308
<9310=9311
<9311=9313,9312
<9313=9314
<9315=9316
<9316=9318,9317
<9318=9319
<9324=9327,9326,9325
<9327=9328
<9328=9465,9329
<9329=9330
<9330=9459,9399,9331
<9331=9332
<9332=9393,9333
<9333=9380,9367,9354,9338,9334
<9334=9335
<9335=9337,9336
<9338=9352,9339
<9339=9340
<9340=9346,9341
<9341=9344,9342
<9342=9343
<9344=9345
<9346=9347
<9347=9349,9348
<9349=9351,9350
<9352=9353
<9354=9355
<9355=9361,9356
<9356=9359,9357
<9357=9358
<9359=9360
<9361=9362
<9362=9364,9363
<9364=9366,9365
<9367=9368
<9368=9374,9369
<9369=9372,9370
<9370=9371
<9372=9373
<9374=9375
<9375=9377,9376
<9377=9379,9378
<9380=9381
<9381=9387,9382
<9382=9385,9383
<9383=9384
<9385=9386
<9387=9388
<9388=9390,9389
<9390=9392,9391
<9393=9394
<9394=9396,9395
<9396=9398,9397
<9399=9446,9433,9420,9404,9400
<9400=9401
<9401=9403,9402
<9404=9418,9405
<9405=9406
<9406=9412,9407
<9407=9410,9408
<9408=9409
<9410=9411
<9412=9413
<9413=9415,9414
<9415=9417,9416
<9418=9419
<9420=9421
<9421=9427,9422
<9422=9425,9423
<9423=9424
<9425=9426
<9427=9428
<9428=9430,9429
<9430=9432,9431
<9433=9434
<9434=9440,9435
<9435=9438,9436
<9436=9437
<9438=9439
<9440=9441
<9441=9443,9442
<9443=9445,9444
<9446=9447
<9447=9453,9448
<9448=9451,9449
<9449=9450
<9451=9452
<9453=9454
<9454=9456,9455
<9456=9458,9457
<9459=9460
<9460=9462,9461
<9462=9464,9463
<9465=9466
<9466=9471,9467
<9467=9469,9468
<9469=9470
<9491=9497,9496,9492
<9492=9493
<9493=9495,9494
<9497=9606,9552,9505,9498
<9498=9499
<9499=9503,9500
<9500=9501
<9501=9502
<9503=9504
<9505=9550,9506
<9506=9546,9516,9507
<9507=9508
<9508=9512,9509
<9509=9510
<9510=9511
<9512=9513
<9513=9515,9514
<9516=9538,9529,9526,9517
<9517=9518
<9518=9519
<9519=9525,9520
<9520=9522,9521
<9522=9524,9523
<9526=9528,9527
<9529=9530
<9530=9537,9531
<9531=9533,9532
<9533=9534
<9534=9536,9535
<9538=9539
<9539=9540
<9540=9545,9544,9541
<9541=9543,9542
<9546=9547
<9547=9549,9548
<9550=9551
<9552=9597,9553
<9553=9563,9554
<9554=9555
<9555=9559,9556
<9556=9557
<9557=9558
<9559=9560
<9560=9562,9561
<9563=9589,9578,9575,9564
<9564=9565
<9565=9566
<9566=9572,9567
<9567=9571,9568
<9568=9570,9569
<9572=9574,9573
<9575=9577,9576
<9578=9579
<9579=9588,9580
<9580=9582,9581
<9582=9584,9583
<9584=9585
<9585=9587,9586
<9589=9590
<9590=9591
<9591=9596,9595,9592
<9592=9594,9593
<9597=9598
<9598=9600,9599
<9600=9602,9601
<9602=9603
<9603=9605,9604
<9606=9607
<9607=9611,9608
<9608=9609
<9609=9610
<9611=9612
<9612=9614,9613
<9627=9633,9632,9628
<9628=9629
<9629=9631,9630
<9633=9638,9634
<9634=9635
<9635=9637,9636
<9638=9678,9667,9664,9639
<9639=9651,9640
<9640=9645,9641
<9641=9642
<9642=9644,9643
<9645=9646
<9646=9648,9647
<9648=9650,9649
<9651=9652
<9652=9663,9662,9653
<9653=9661,9654
<9654=9660,9655
<9655=9657,9656
<9657=9659,9658
<9664=9666,9665
<9667=9668
<9668=9677,9669
<9669=9671,9670
<9671=9672
<9672=9674,9673
<9674=9676,9675
<9678=9679
<9679=9680
<9680=9685,9684,9681
<9681=9683,9682
<9702=9708,9707,9703
<9703=9704
<9704=9706,9705
<9713=9722,9721,9714
<9714=9718,9715
<9715=9717,9716
<9718=9720,9719
<9722=9898,9884,9866,9862,9856,9843,9839,9790,9772,9761,9757,9737,9723
<9723=9724
<9724=9733,9725
<9725=9726
<9726=9727
<9727=9729,9728
<9729=9730
<9730=9732,9731
<9733=9734
<9734=9736,9735
<9737=9738
<9738=9756,9739
<9739=9755,9740
<9740=9752,9741
<9741=9751,9742
<9742=9748,9743
<9743=9747,9744
<9744=9746,9745
<9748=9750,9749
<9752=9754,9753
<9757=9758
<9758=9760,9759
<9761=9762
<9762=9766,9763
<9763=9764
<9764=9765
<9766=9767
<9767=9769,9768
<9769=9771,9770
<9772=9773
<9773=9787,9774
<9774=9785,9775
<9775=9776
<9776=9777
<9777=9781,9778
<9778=9779
<9779=9780
<9781=9782
<9782=9784,9783
<9785=9786
<9787=9789,9788
<9790=9826,9791
<9791=9822,9807,9793,9792
<9793=9794
<9794=9803,9795
<9795=9796
<9796=9797
<9797=9799,9798
<9799=9800
<9800=9802,9801
<9803=9804
<9804=9806,9805
<9807=9808
<9808=9821,9809
<9809=9820,9810
<9810=9819,9811
<9811=9818,9812
<9812=9814,9813
<9814=9815
<9815=9817,9816
<9822=9823
<9823=9825,9824
<9826=9827
<9827=9838,9828
<9828=9836,9829
<9829=9832,9830
<9830=9831
<9832=9833
<9833=9835,9834
<9836=9837
<9839=9840
<9840=9842,9841
<9843=9844
<9844=9853,9845
<9845=9847,9846
<9847=9848
<9848=9850,9849
<9850=9852,9851
<9853=9855,9854
<9856=9857
<9857=9859,9858
<9859=9861,9860
<9862=9863
<9863=9865,9864
<9866=9867
<9867=9883,9882,9868
<9868=9881,9869
<9869=9877,9870
<9870=9875,9871
<9871=9872
<9872=9874,9873
<9875=9876
<9877=9878
<9878=9880,9879
<9884=9885
<9885=9897,9896,9886
<9886=9895,9887
<9887=9891,9888
<9888=9889
<9889=9890
<9891=9892
<9892=9894,9893
<9898=9899
<9899=9913,9912,9900
<9900=9911,9901
<9901=9903,9902
<9903=9907,9904
<9904=9905
<9905=9906
<9907=9908
<9908=9910,9909
<9941=9950,9949,9942
<9942=9946,9943
<9943=9945,9944
<9946=9948,9947
<9950=9983,9979,9965,9951
<9951=9952
<9952=9961,9953
<9953=9954
<9954=9955
<9955=9957,9956
<9957=9958
<9958=9960,9959
<9961=9962
<9962=9964,9963
<9965=9966
<9966=9978,9967
<9967=9977,9968
<9968=9976,9969
<9969=9975,9970
<9970=9973,9972,9971
<9973=9974
<9979=9980
<9980=9982,9981
<9983=9984
<9984=9996,9995,9985
<9985=9994,9986
<9986=9990,9987
<9987=9988
<9988=9989
<9990=9991
<9991=9993,9992
<10008=10011,10010,10009
<10011=10039,10012
<10012=10037,10013
<10013=10032,10021,10014
<10014=10015
<10015=10017,10016
<10017=10018
<10018=10020,10019
<10021=10022
<10022=10028,10023
<10023=10024
<10024=10025
<10025=10027,10026
<10028=10029
<10029=10031,10030
<10032=10033
<10033=10035,10034
<10035=10036
<10037=10038
<10039=10040
<10040=10048,10047,10041
<10041=10046,10042
<10042=10044,10043
<10044=10045
<10057=10060,10059,10058
<10060=10063,10061
<10061=10062
<10063=10070,10064
<10064=10065
<10065=10069,10066
<10066=10068,10067
<10070=10071
<10071=10084,10072
<10072=10081,10073
<10073=10080,10074
<10074=10076,10075
<10076=10077
<10077=10079,10078
<10081=10083,10082
<10084=10091,10085
<10085=10087,10086
<10087=10088
<10088=10090,10089
<10101=10104,10103,10102
<10104=10185,10173,10164,10151,10138,10134,10130,10117,10105
<10105=10106
<10106=10115,10107
<10107=10108
<10108=10109
<10109=10111,10110
<10111=10112
<10112=10114,10113
<10115=10116
<10117=10118
<10118=10129,10119
<10119=10128,10120
<10120=10122,10121
<10122=10124,10123
<10124=10125
<10125=10127,10126
<10130=10131
<10131=10133,10132
<10134=10135
<10135=10137,10136
<10138=10139
<10139=10149,10140
<10140=10147,10145,10143,10141
<10141=10142
<10143=10144
<10145=10146
<10147=10148
<10149=10150
<10151=10152
<10152=10162,10153
<10153=10160,10158,10156,10154
<10154=10155
<10156=10157
<10158=10159
<10160=10161
<10162=10163
<10164=10165
<10165=10171,10166
<10166=10167
<10167=10168
<10168=10170,10169
<10171=10172
<10173=10174
<10174=10184,10183,10175
<10175=10182,10176
<10176=10178,10177
<10178=10179
<10179=10181,10180
<10185=10186
<10186=10188,10187
<10188=10189
<10189=10191,10190
<10204=10207,10206,10205
<10207=10306,10301,10208
<10208=10288,10279,10276,10209
<10209=10268,10259,10256,10210
<10210=10248,10211
<10211=10223,10212
<10212=10213
<10213=10221,10214
<10214=10215
<10215=10216
<10216=10218,10217
<10218=10220,10219
<10221=10222
<10223=10224
<10224=10247,10225
<10225=10245,10226
<10226=10234,10227
<10227=10228
<10228=10230,10229
<10230=10231
<10231=10233,10232
<10234=10235
<10235=10237,10236
<10237=10238
<10238=10240,10239
<10240=10242,10241
<10242=10244,10243
<10245=10246
<10248=10249
<10249=10251,10250
<10251=10253,10252
<10253=10255,10254
<10256=10258,10257
<10259=10260
<10260=10267,10261
<10261=10263,10262
<10263=10264
<10264=10266,10265
<10268=10269
<10269=10270
<10270=10275,10274,10271
<10271=10273,10272
<10276=10278,10277
<10279=10280
<10280=10287,10281
<10281=10283,10282
<10283=10284
<10284=10286,10285
<10288=10289
<10289=10290
<10290=10300,10299,10291
<10291=10298,10292
<10292=10294,10293
<10294=10295
<10295=10297,10296
<10301=10302
<10302=10304,10303
<10304=10305
<10306=10307
<10307=10323,10308
<10308=10311,10309
<10309=10310
<10311=10312
<10312=10314,10313
<10314=10315
<10315=10317,10316
<10317=10319,10318
<10319=10320
<10320=10322,10321
<10323=10324
<10324=10326,10325
<10350=10359,10358,10351
<10351=10355,10352
<10352=10354,10353
<10355=10357,10356
<10359=10374,10360
<10360=10361
<10361=10370,10362
<10362=10363
<10363=10364
<10364=10366,10365
<10366=10367
<10367=10369,10368
<10370=10371
<10371=10373,10372
<10374=10375
<10375=10382,10381,10376
<10376=10380,10377
<10377=10379,10378
<10391=10400,10399,10392
<10392=10396,10393
<10393=10395,10394
<10396=10398,10397
<10400=10479,10467,10453,10439,10425,10401
<10401=10402
<10402=10421,10403
<10403=10404
<10404=10405
<10405=10417,10406
<10406=10413,10407
<10407=10408
<10408=10412,10409
<10409=10411,10410
<10413=10414
<10414=10416,10415
<10417=10418
<10418=10420,10419
<10421=10422
<10422=10424,10423
<10425=10427,10426
<10427=10428
<10428=10436,10429
<10429=10433,10430
<10430=10432,10431
<10433=10435,10434
<10436=10438,10437
<10439=10440
<10440=10452,10451,10441
<10441=10450,10442
<10442=10446,10443
<10443=10444
<10444=10445
<10446=10447
<10447=10449,10448
<10453=10454
<10454=10466,10465,10455
<10455=10464,10456
<10456=10460,10457
<10457=10458
<10458=10459
<10460=10461
<10461=10463,10462
<10467=10468
<10468=10478,10477,10469
<10469=10476,10470
<10470=10472,10471
<10472=10473
<10473=10475,10474
<10479=10480
<10480=10487,10486,10481
<10481=10485,10482
<10482=10484,10483
<10503=10509,10508,10504
<10504=10505
<10505=10507,10506
<10509=10743,10739,10721,10717,10645,10641,10628,10616,10609,10539,10530,10522,10510
<10510=10511
<10511=10520,10512
<10512=10513
<10513=10514
<10514=10516,10515
<10516=10517
<10517=10519,10518
<10520=10521
<10522=10523
<10523=10529,10524
<10524=10528,10525
<10525=10527,10526
<10530=10531
<10531=10535,10532
<10532=10533
<10533=10534
<10535=10536
<10536=10538,10537
<10539=10602,10540
<10540=10541
<10541=10594,10583,10580,10542
<10542=10569,10543
<10543=10551,10544
<10544=10545
<10545=10547,10546
<10547=10548
<10548=10550,10549
<10551=10552
<10552=10559,10553
<10553=10555,10554
<10555=10556
<10556=10558,10557
<10559=10565,10560
<10560=10561
<10561=10562
<10562=10564,10563
<10565=10566
<10566=10568,10567
<10569=10570
<10570=10579,10578,10571
<10571=10577,10572
<10572=10574,10573
<10574=10576,10575
<10580=10582,10581
<10583=10584
<10584=10593,10585
<10585=10587,10586
<10587=10588
<10588=10590,10589
<10590=10592,10591
<10594=10595
<10595=10596
<10596=10601,10600,10597
<10597=10599,10598
<10602=10603
<10603=10605,10604
<10605=10606
<10606=10608,10607
<10609=10610
<10610=10615,10614,10611
<10611=10613,10612
<10616=10617
<10617=10626,10618
<10618=10619
<10619=10620
<10620=10622,10621
<10622=10623
<10623=10625,10624
<10626=10627
<10628=10629
<10629=10640,10630
<10630=10639,10631
<10631=10633,10632
<10633=10635,10634
<10635=10636
<10636=10638,10637
<10641=10642
<10642=10644,10643
<10645=10653,10646
<10646=10647
<10647=10649,10648
<10649=10650
<10650=10652,10651
<10653=10705,10698,10654
<10654=10682,10655
<10655=10669,10656
<10656=10657
<10657=10665,10658
<10658=10663,10659
<10659=10660
<10660=10662,10661
<10663=10664
<10665=10666
<10666=10668,10667
<10669=10670
<10670=10678,10671
<10671=10676,10672
<10672=10673
<10673=10675,10674
<10676=10677
<10678=10679
<10679=10681,10680
<10682=10683
<10683=10694,10684
<10684=10687,10685
<10685=10686
<10687=10688
<10688=10690,10689
<10690=10691
<10691=10693,10692
<10694=10695
<10695=10697,10696
<10698=10699
<10699=10701,10700
<10701=10702
<10702=10704,10703
<10705=10706
<10706=10716,10715,10707
<10707=10714,10708
<10708=10710,10709
<10710=10711
<10711=10713,10712
<10717=10718
<10718=10720,10719
<10721=10722
<10722=10735,10723
<10723=10724
<10724=10725
<10725=10729,10726
<10726=10728,10727
<10729=10731,10730
<10731=10732
<10732=10734,10733
<10735=10736
<10736=10738,10737
<10739=10740
<10740=10742,10741
<10743=10744
<10744=10746,10745
<10783=10789,10788,10784
<10784=10785
<10785=10787,10786
<10794=10800,10799,10795
<10795=10796
<10796=10798,10797
<10800=10858,10846,10842,10833,10817,10808,10801
<10801=10802
<10802=10806,10803
<10803=10804
<10804=10805
<10806=10807
<10808=10809
<10809=10813,10810
<10810=10811
<10811=10812
<10813=10814
<10814=10816,10815
<10817=10818
<10818=10829,10819
<10819=10822,10820
<10820=10821
<10822=10823
<10823=10825,10824
<10825=10826
<10826=10828,10827
<10829=10830
<10830=10832,10831
<10833=10834
<10834=10840,10835
<10835=10836
<10836=10837
<10837=10839,10838
<10840=10841
<10842=10843
<10843=10845,10844
<10846=10847
<10847=10857,10856,10848
<10848=10855,10849
<10849=10851,10850
<10851=10852
<10852=10854,10853
<10869=10875,10874,10870
<10870=10871
<10871=10873,10872
<10875=10921,10917,10908,10892,10883,10876
<10876=10877
<10877=10881,10878
<10878=10879
<10879=10880
<10881=10882
<10883=10884
<10884=10888,10885
<10885=10886
<10886=10887
<10888=10889
<10889=10891,10890
<10892=10893
<10893=10904,10894
<10894=10897,10895
<10895=10896
<10897=10898
<10898=10900,10899
<10900=10901
<10901=10903,10902
<10904=10905
<10905=10907,10906
<10908=10909
<10909=10915,10910
<10910=10911
<10911=10912
<10912=10914,10913
<10915=10916
<10917=10918
<10918=10920,10919
<10921=10922
<10922=10932,10931,10923
<10923=10930,10924
<10924=10926,10925
<10926=10927
<10927=10929,10928
<10943=10946,10945,10944
<10946=10947
<10947=10948
<10948=10952,10949
<10949=10950
<10950=10951
<10952=10953
<10953=10955,10954
<10955=10957,10956
<10964=10982,10981,10965
<10965=10978,10975,10972,10969,10966
<10966=10968,10967
<10969=10971,10970
<10972=10974,10973
<10975=10977,10976
<10978=10980,10979
<10982=11067,11061,11055,11049,11043,11035,11027,11013,10995,10983
<10983=10993,10984
<10984=10985
<10985=10989,10986
<10986=10987
<10987=10988
<10989=10990
<10990=10992,10991
<10993=10994
<10995=11009,10996
<10996=10997
<10997=11005,10998
<10998=11003,11001,10999
<10999=11000
<11001=11002
<11003=11004
<11005=11006
<11006=11008,11007
<11009=11010
<11010=11012,11011
<11013=11014
<11014=11026,11025,11015
<11015=11024,11016
<11016=11020,11017
<11017=11018
<11018=11019
<11020=11021
<11021=11023,11022
<11027=11028
<11028=11032,11029
<11029=11031,11030
<11032=11034,11033
<11035=11036
<11036=11040,11037
<11037=11039,11038
<11040=11042,11041
<11043=11044
<11044=11046,11045
<11046=11048,11047
<11049=11050
<11050=11052,11051
<11052=11054,11053
<11055=11056
<11056=11058,11057
<11058=11060,11059
<11061=11062
<11062=11064,11063
<11064=11066,11065
<11067=11068
<11068=11070,11069
<11095=11098,11097,11096
<11098=11489,11484,11477,11470,11461,11456,11451,11099,11104,11111,11115,11119,11123,11127,11131,11140,11144,11149,11167,11177,11181,11188,11198,11208,11218,11228,11238,11248,11258,11268,11278,11285,11292,11299,11306,11313,11320,11327,11334,11341,11345,11352,11356,11363,11367,11374,11378,11385,11389,11396,11400,11407,11414,11421,11428,11435,11442
<11099=11100
<11100=11102,11101
<11102=11103
<11104=11105
<11105=11107,11106
<11107=11108
<11108=11110,11109
<11111=11112
<11112=11114,11113
<11115=11116
<11116=11118,11117
<11119=11120
<11120=11122,11121
<11123=11124
<11124=11126,11125
<11127=11128
<11128=11130,11129
<11131=11132
<11132=11136,11133
<11133=11134
<11134=11135
<11136=11137
<11137=11139,11138
<11140=11141
<11141=11143,11142
<11144=11145
<11145=11147,11146
<11147=11148
<11149=11165,11150
<11150=11158,11151
<11151=11152
<11152=11156,11153
<11153=11154
<11154=11155
<11156=11157
<11158=11159
<11159=11161,11160
<11161=11162
<11162=11164,11163
<11165=11166
<11167=11175,11168
<11168=11169
<11169=11173,11170
<11170=11171
<11171=11172
<11173=11174
<11175=11176
<11177=11178
<11178=11180,11179
<11181=11182
<11182=11186,11183
<11183=11184
<11184=11185
<11186=11187
<11188=11196,11189
<11189=11190
<11190=11194,11191
<11191=11192
<11192=11193
<11194=11195
<11196=11197
<11198=11206,11199
<11199=11200
<11200=11204,11201
<11201=11202
<11202=11203
<11204=11205
<11206=11207
<11208=11216,11209
<11209=11210
<11210=11214,11211
<11211=11212
<11212=11213
<11214=11215
<11216=11217
<11218=11226,11219
<11219=11220
<11220=11224,11221
<11221=11222
<11222=11223
<11224=11225
<11226=11227
<11228=11236,11229
<11229=11230
<11230=11234,11231
<11231=11232
<11232=11233
<11234=11235
<11236=11237
<11238=11246,11239
<11239=11240
<11240=11244,11241
<11241=11242
<11242=11243
<11244=11245
<11246=11247
<11248=11256,11249
<11249=11250
<11250=11254,11251
<11251=11252
<11252=11253
<11254=11255
<11256=11257
<11258=11266,11259
<11259=11260
<11260=11264,11261
<11261=11262
<11262=11263
<11264=11265
<11266=11267
<11268=11276,11269
<11269=11270
<11270=11274,11271
<11271=11272
<11272=11273
<11274=11275
<11276=11277
<11278=11279
<11279=11283,11280
<11280=11281
<11281=11282
<11283=11284
<11285=11286
<11286=11290,11287
<11287=11288
<11288=11289
<11290=11291
<11292=11293
<11293=11297,11294
<11294=11295
<11295=11296
<11297=11298
<11299=11300
<11300=11304,11301
<11301=11302
<11302=11303
<11304=11305
<11306=11307
<11307=11311,11308
<11308=11309
<11309=11310
<11311=11312
<11313=11314
<11314=11318,11315
<11315=11316
<11316=11317
<11318=11319
<11320=11321
<11321=11325,11322
<11322=11323
<11323=11324
<11325=11326
<11327=11328
<11328=11332,11329
<11329=11330
<11330=11331
<11332=11333
<11334=11335
<11335=11339,11336
<11336=11337
<11337=11338
<11339=11340
<11341=11342
<11342=11344,11343
<11345=11346
<11346=11350,11347
<11347=11348
<11348=11349
<11350=11351
<11352=11353
<11353=11355,11354
<11356=11357
<11357=11361,11358
<11358=11359
<11359=11360
<11361=11362
<11363=11364
<11364=11366,11365
<11367=11368
<11368=11372,11369
<11369=11370
<11370=11371
<11372=11373
<11374=11375
<11375=11377,11376
<11378=11379
<11379=11383,11380
<11380=11381
<11381=11382
<11383=11384
<11385=11386
<11386=11388,11387
<11389=11390
<11390=11394,11391
<11391=11392
<11392=11393
<11394=11395
<11396=11397
<11397=11399,11398
<11400=11401
<11401=11405,11402
<11402=11403
<11403=11404
<11405=11406
<11407=11408
<11408=11412,11409
<11409=11410
<11410=11411
<11412=11413
<11414=11415
<11415=11419,11416
<11416=11417
<11417=11418
<11419=11420
<11421=11422
<11422=11426,11423
<11423=11424
<11424=11425
<11426=11427
<11428=11429
<11429=11433,11430
<11430=11431
<11431=11432
<11433=11434
<11435=11436
<11436=11440,11437
<11437=11438
<11438=11439
<11440=11441
<11442=11443
<11443=11447,11444
<11444=11445
<11445=11446
<11447=11448
<11448=11450,11449
<11451=11452
<11452=11454,11453
<11454=11455
<11456=11457
<11457=11459,11458
<11459=11460
<11461=11462
<11462=11464,11463
<11464=11465
<11465=11467,11466
<11467=11469,11468
<11470=11471
<11471=11473,11472
<11473=11474
<11474=11476,11475
<11477=11478
<11478=11480,11479
<11480=11481
<11481=11483,11482
<11484=11485
<11485=11487,11486
<11487=11488
<11489=11490
<11490=11492,11491
<11492=11493
<11493=11495,11494
<11538=11541,11540,11539
<11541=11598,11587,11576,11565,11554,11542
<11542=11552,11543
<11543=11544
<11544=11548,11545
<11545=11546
<11546=11547
<11548=11549
<11549=11551,11550
<11552=11553
<11554=11555
<11555=11564,11556
<11556=11560,11557
<11557=11558
<11558=11559
<11560=11561
<11561=11563,11562
<11565=11566
<11566=11575,11567
<11567=11571,11568
<11568=11569
<11569=11570
<11571=11572
<11572=11574,11573
<11576=11577
<11577=11586,11578
<11578=11582,11579
<11579=11580
<11580=11581
<11582=11583
<11583=11585,11584
<11587=11588
<11588=11597,11589
<11589=11593,11590
<11590=11591
<11591=11592
<11593=11594
<11594=11596,11595
<11598=11599
<11599=11608,11600
<11600=11604,11601
<11601=11602
<11602=11603
<11604=11605
<11605=11607,11606
<11621=11627,11626,11622
<11622=11623
<11623=11625,11624
<11627=11628
<11628=11702,11629
<11629=11700,11691,11690,11688,11679,11678,11676,11667,11666,11664,11655,11654,11652,11643,11642,11640,11631,11630
<11631=11632
<11632=11636,11633
<11633=11634
<11634=11635
<11636=11637
<11637=11639,11638
<11640=11641
<11643=11644
<11644=11648,11645
<11645=11646
<11646=11647
<11648=11649
<11649=11651,11650
<11652=11653
<11655=11656
<11656=11660,11657
<11657=11658
<11658=11659
<11660=11661
<11661=11663,11662
<11664=11665
<11667=11668
<11668=11672,11669
<11669=11670
<11670=11671
<11672=11673
<11673=11675,11674
<11676=11677
<11679=11680
<11680=11684,11681
<11681=11682
<11682=11683
<11684=11685
<11685=11687,11686
<11688=11689
<11691=11692
<11692=11696,11693
<11693=11694
<11694=11695
<11696=11697
<11697=11699,11698
<11700=11701
<11702=11703
<11714=11717,11716,11715
<11721=11736,11735,11722
<11722=11732,11729,11726,11723
<11723=11725,11724
<11726=11728,11727
<11729=11731,11730
<11732=11734,11733
<11736=11737
<11737=12173,11738
<11738=12172,11957,11956,11955,11740,11739
<11740=11948,11939,11938,11937,11936,11935,11934,11932,11923,11912,11899,11879,11870,11864,11855,11838,11821,11804,11787,11776,11770,11764,11755,11741
<11741=11742
<11742=11748,11743
<11743=11746,11744
<11744=11745
<11746=11747
<11748=11749
<11749=11751,11750
<11751=11753,11752
<11753=11754
<11755=11756
<11756=11760,11757
<11757=11758
<11758=11759
<11760=11761
<11761=11763,11762
<11764=11765
<11765=11767,11766
<11767=11769,11768
<11770=11771
<11771=11773,11772
<11773=11775,11774
<11776=11777
<11777=11781,11778
<11778=11779
<11779=11780
<11781=11782
<11782=11784,11783
<11784=11786,11785
<11787=11788
<11788=11794,11789
<11789=11792,11790
<11790=11791
<11792=11793
<11794=11795
<11795=11797,11796
<11797=11799,11798
<11799=11801,11800
<11801=11803,11802
<11804=11805
<11805=11811,11806
<11806=11809,11807
<11807=11808
<11809=11810
<11811=11812
<11812=11814,11813
<11814=11816,11815
<11816=11818,11817
<11818=11820,11819
<11821=11822
<11822=11828,11823
<11823=11826,11824
<11824=11825
<11826=11827
<11828=11829
<11829=11831,11830
<11831=11833,11832
<11833=11835,11834
<11835=11837,11836
<11838=11839
<11839=11845,11840
<11840=11843,11841
<11841=11842
<11843=11844
<11845=11846
<11846=11848,11847
<11848=11850,11849
<11850=11852,11851
<11852=11854,11853
<11855=11856
<11856=11858,11857
<11858=11859
<11859=11861,11860
<11861=11863,11862
<11864=11865
<11865=11867,11866
<11867=11869,11868
<11870=11871
<11871=11875,11872
<11872=11873
<11873=11874
<11875=11876
<11876=11878,11877
<11879=11880
<11880=11893,11881
<11881=11884,11882
<11882=11883
<11884=11885
<11885=11891,11886
<11886=11889,11887
<11887=11888
<11889=11890
<11891=11892
<11893=11894
<11894=11896,11895
<11896=11898,11897
<11899=11900
<11900=11909,11901
<11901=11907,11902
<11902=11905,11903
<11903=11904
<11905=11906
<11907=11908
<11909=11911,11910
<11912=11913
<11913=11919,11914
<11914=11917,11915
<11915=11916
<11917=11918
<11919=11920
<11920=11922,11921
<11923=11924
<11924=11928,11925
<11925=11926
<11926=11927
<11928=11929
<11929=11931,11930
<11932=11933
<11939=11944,11940
<11940=11941
<11941=11943,11942
<11944=11945
<11945=11947,11946
<11948=11949
<11949=11954,11953,11950
<11950=11952,11951
<11957=12165,12156,12155,12154,12153,12152,12151,12149,12140,12129,12116,12096,12090,12081,12072,12055,12038,12021,12004,11993,11987,11981,11972,11958
<11958=11959
<11959=11965,11960
<11960=11963,11961
<11961=11962
<11963=11964
<11965=11966
<11966=11968,11967
<11968=11970,11969
<11970=11971
<11972=11973
<11973=11977,11974
<11974=11975
<11975=11976
<11977=11978
<11978=11980,11979
<11981=11982
<11982=11984,11983
<11984=11986,11985
<11987=11988
<11988=11990,11989
<11990=11992,11991
<11993=11994
<11994=11998,11995
<11995=11996
<11996=11997
<11998=11999
<11999=12001,12000
<12001=12003,12002
<12004=12005
<12005=12011,12006
<12006=12009,12007
<12007=12008
<12009=12010
<12011=12012
<12012=12014,12013
<12014=12016,12015
<12016=12018,12017
<12018=12020,12019
<12021=12022
<12022=12028,12023
<12023=12026,12024
<12024=12025
<12026=12027
<12028=12029
<12029=12031,12030
<12031=12033,12032
<12033=12035,12034
<12035=12037,12036
<12038=12039
<12039=12045,12040
<12040=12043,12041
<12041=12042
<12043=12044
<12045=12046
<12046=12048,12047
<12048=12050,12049
<12050=12052,12051
<12052=12054,12053
<12055=12056
<12056=12062,12057
<12057=12060,12058
<12058=12059
<12060=12061
<12062=12063
<12063=12065,12064
<12065=12067,12066
<12067=12069,12068
<12069=12071,12070
<12072=12073
<12073=12075,12074
<12075=12076
<12076=12078,12077
<12078=12080,12079
<12081=12082
<12082=12086,12083
<12083=12084
<12084=12085
<12086=12087
<12087=12089,12088
<12090=12091
<12091=12093,12092
<12093=12095,12094
<12096=12097
<12097=12110,12098
<12098=12101,12099
<12099=12100
<12101=12102
<12102=12108,12103
<12103=12106,12104
<12104=12105
<12106=12107
<12108=12109
<12110=12111
<12111=12113,12112
<12113=12115,12114
<12116=12117
<12117=12126,12118
<12118=12124,12119
<12119=12122,12120
<12120=12121
<12122=12123
<12124=12125
<12126=12128,12127
<12129=12130
<12130=12136,12131
<12131=12134,12132
<12132=12133
<12134=12135
<12136=12137
<12137=12139,12138
<12140=12141
<12141=12145,12142
<12142=12143
<12143=12144
<12145=12146
<12146=12148,12147
<12149=12150
<12156=12161,12157
<12157=12158
<12158=12160,12159
<12161=12162
<12162=12164,12163
<12165=12166
<12166=12171,12170,12167
<12167=12169,12168
<12173=12174
<12199=12205,12204,12200
<12200=12201
<12201=12203,12202
<12205=12245,12244,12243,12242,12241,12208,12206
<12206=12207
<12208=12235,12213,12209
<12209=12210
<12210=12212,12211
<12213=12216,12214
<12214=12215
<12216=12217
<12217=12230,12218
<12218=12220,12219
<12220=12228,12221
<12221=12224,12222
<12222=12223
<12224=12225
<12225=12227,12226
<12228=12229
<12230=12232,12231
<12232=12234,12233
<12235=12236
<12236=12240,12237
<12237=12239,12238
<12245=12246
<12246=12251,12250,12247
<12247=12249,12248
<12264=12270,12269,12265
<12265=12266
<12266=12268,12267
<12270=12324,12317,12316,12315,12314,12313,12273,12271
<12271=12272
<12273=12307,12298,12291,12278,12274
<12274=12275
<12275=12277,12276
<12278=12281,12279
<12279=12280
<12281=12282
<12282=12286,12283
<12283=12285,12284
<12286=12288,12287
<12288=12290,12289
<12291=12292
<12292=12296,12293
<12293=12294
<12294=12295
<12296=12297
<12298=12299
<12299=12306,12305,12300
<12300=12304,12301
<12301=12303,12302
<12307=12308
<12308=12312,12309
<12309=12311,12310
<12317=12318
<12318=12323,12322,12319
<12319=12321,12320
<12324=12325
<12325=12329,12326
<12326=12327
<12327=12328
<12329=12330
<12343=12346,12345,12344
<12346=12368,12347
<12347=12364,12357,12348
<12348=12349
<12349=12350
<12350=12351
<12351=12355,12352
<12352=12353
<12353=12354
<12355=12356
<12357=12358
<12358=12359
<12359=12361,12360
<12361=12363,12362
<12364=12365
<12365=12367,12366
<12368=12369
<12369=12373,12370
<12370=12371
<12371=12372
<12373=12374
<12384=12390,12389,12385
<12385=12386
<12386=12388,12387
<12390=12709,12698,12697,12696,12695,12694,12693,12691,12606,12597,12586,12576,12565,12552,12529,12505,12486,12477,12468,12457,12446,12435,12424,12413,12406,12391
<12391=12392
<12392=12398,12393
<12393=12396,12394
<12394=12395
<12396=12397
<12398=12399
<12399=12401,12400
<12401=12403,12402
<12403=12405,12404
<12406=12407
<12407=12409,12408
<12409=12410
<12410=12412,12411
<12413=12414
<12414=12418,12415
<12415=12416
<12416=12417
<12418=12419
<12419=12421,12420
<12421=12423,12422
<12424=12425
<12425=12431,12426
<12426=12429,12427
<12427=12428
<12429=12430
<12431=12432
<12432=12434,12433
<12435=12436
<12436=12440,12437
<12437=12438
<12438=12439
<12440=12441
<12441=12443,12442
<12443=12445,12444
<12446=12447
<12447=12449,12448
<12449=12450
<12450=12452,12451
<12452=12454,12453
<12454=12456,12455
<12457=12458
<12458=12460,12459
<12460=12461
<12461=12463,12462
<12463=12465,12464
<12465=12467,12466
<12468=12469
<12469=12473,12470
<12470=12471
<12471=12472
<12473=12474
<12474=12476,12475
<12477=12478
<12478=12480,12479
<12480=12481
<12481=12483,12482
<12483=12485,12484
<12486=12487
<12487=12495,12488
<12488=12493,12491,12489
<12489=12490
<12491=12492
<12493=12494
<12495=12496
<12496=12498,12497
<12498=12500,12499
<12500=12502,12501
<12502=12504,12503
<12505=12506
<12506=12519,12507
<12507=12510,12508
<12508=12509
<12510=12511
<12511=12517,12512
<12512=12515,12513
<12513=12514
<12515=12516
<12517=12518
<12519=12520
<12520=12522,12521
<12522=12524,12523
<12524=12526,12525
<12526=12528,12527
<12529=12530
<12530=12542,12531
<12531=12540,12538,12536,12534,12532
<12532=12533
<12534=12535
<12536=12537
<12538=12539
<12540=12541
<12542=12543
<12543=12545,12544
<12545=12547,12546
<12547=12549,12548
<12549=12551,12550
<12552=12553
<12553=12557,12554
<12554=12555
<12555=12556
<12557=12558
<12558=12560,12559
<12560=12562,12561
<12562=12564,12563
<12565=12566
<12566=12568,12567
<12568=12569
<12569=12571,12570
<12571=12573,12572
<12573=12575,12574
<12576=12577
<12577=12579,12578
<12579=12581,12580
<12581=12583,12582
<12583=12585,12584
<12586=12587
<12587=12589,12588
<12589=12590
<12590=12592,12591
<12592=12594,12593
<12594=12596,12595
<12597=12598
<12598=12604,12599
<12599=12602,12600
<12600=12601
<12602=12603
<12604=12605
<12606=12682,12676,12655,12646,12640,12625,12616,12607
<12607=12608
<12608=12612,12609
<12609=12610
<12610=12611
<12612=12613
<12613=12615,12614
<12616=12617
<12617=12621,12618
<12618=12619
<12619=12620
<12621=12622
<12622=12624,12623
<12625=12626
<12626=12637,12627
<12627=12629,12628
<12629=12635,12630
<12630=12633,12631
<12631=12632
<12633=12634
<12635=12636
<12637=12639,12638
<12640=12641
<12641=12643,12642
<12643=12645,12644
<12646=12647
<12647=12651,12648
<12648=12649
<12649=12650
<12651=12652
<12652=12654,12653
<12655=12656
<12656=12670,12657
<12657=12668,12666,12664,12660,12658
<12658=12659
<12660=12661
<12661=12663,12662
<12664=12665
<12666=12667
<12668=12669
<12670=12671
<12671=12673,12672
<12673=12675,12674
<12676=12677
<12677=12679,12678
<12679=12681,12680
<12682=12683
<12683=12687,12684
<12684=12685
<12685=12686
<12687=12688
<12688=12690,12689
<12691=12692
<12698=12699
<12699=12703,12700
<12700=12701
<12701=12702
<12703=12704
<12704=12706,12705
<12706=12708,12707
<12709=12710
<12710=12716,12711
<12711=12714,12712
<12712=12713
<12714=12715
<12716=12717
<12717=12719,12718
<12719=12721,12720
<12721=12723,12722
<12755=12758,12757,12756
<12758=12759
<12759=12776,12760
<12760=12765,12761
<12761=12762
<12762=12764,12763
<12765=12766
<12766=12772,12767
<12767=12770,12768
<12768=12769
<12770=12771
<12772=12773
<12773=12775,12774
<12776=12777
<12777=12779,12778
<12785=12791,12790,12786
<12786=12787
<12787=12789,12788
<12791=12799,12792
<12792=12793
<12793=12795,12794
<12795=12796
<12796=12798,12797
<12799=12845,12836,12833,12800
<12800=12822,12809,12801
<12801=12802
<12802=12804,12803
<12804=12806,12805
<12806=12808,12807
<12809=12810
<12810=12816,12811
<12811=12812
<12812=12813
<12813=12815,12814
<12816=12817
<12817=12819,12818
<12819=12821,12820
<12822=12823
<12823=12827,12824
<12824=12825
<12825=12826
<12827=12828
<12828=12830,12829
<12830=12832,12831
<12833=12835,12834
<12836=12837
<12837=12844,12838
<12838=12840,12839
<12840=12841
<12841=12843,12842
<12845=12846
<12846=12847
<12847=12852,12851,12848
<12848=12850,12849
<12865=12871,12870,12866
<12866=12867
<12867=12869,12868
<12871=12973,12966,12953,12944,12935,12929,12912,12906,12897,12888,12872
<12872=12873
<12873=12879,12874
<12874=12877,12875
<12875=12876
<12877=12878
<12879=12880
<12880=12882,12881
<12882=12884,12883
<12884=12885
<12885=12887,12886
<12888=12889
<12889=12893,12890
<12890=12891
<12891=12892
<12893=12894
<12894=12896,12895
<12897=12898
<12898=12902,12899
<12899=12900
<12900=12901
<12902=12903
<12903=12905,12904
<12906=12907
<12907=12909,12908
<12909=12911,12910
<12912=12913
<12913=12923,12914
<12914=12921,12919,12917,12915
<12915=12916
<12917=12918
<12919=12920
<12921=12922
<12923=12924
<12924=12926,12925
<12926=12928,12927
<12929=12930
<12930=12932,12931
<12932=12934,12933
<12935=12936
<12936=12940,12937
<12937=12938
<12938=12939
<12940=12941
<12941=12943,12942
<12944=12945
<12945=12949,12946
<12946=12947
<12947=12948
<12949=12950
<12950=12952,12951
<12953=12954
<12954=12963,12955
<12955=12961,12956
<12956=12959,12957
<12957=12958
<12959=12960
<12961=12962
<12963=12965,12964
<12966=12967
<12967=12972,12971,12968
<12968=12970,12969
<12973=12974
<12974=12978,12975
<12975=12976
<12976=12977
<12978=12979
<12994=12997,12996,12995
<12997=12998
<12998=12999
<12999=13003,13000
<13000=13001
<13001=13002
<13003=13004
<13008=13014,13013,13009
<13009=13010
<13010=13012,13011
<13014=13047,13017,13015
<13015=13016
<13017=13039,13030,13027,13018
<13018=13019
<13019=13020
<13020=13022,13021
<13022=13024,13023
<13024=13026,13025
<13027=13029,13028
<13030=13031
<13031=13038,13032
<13032=13034,13033
<13034=13035
<13035=13037,13036
<13039=13040
<13040=13041
<13041=13046,13045,13042
<13042=13044,13043
<13047=13152,13140,13048
<13048=13049
<13049=13123,13050
<13050=13116,13077,13051
<13051=13075,13063,13052
<13052=13053
<13053=13054
<13054=13055
<13055=13059,13056
<13056=13057
<13057=13058
<13059=13060
<13060=13062,13061
<13063=13071,13066,13064
<13064=13065
<13066=13067
<13067=13069,13068
<13069=13070
<13071=13072
<13072=13074,13073
<13075=13076
<13077=13103,13084,13078
<13078=13079
<13079=13080
<13080=13081
<13081=13083,13082
<13084=13099,13085
<13085=13090,13086
<13086=13087
<13087=13089,13088
<13090=13091
<13091=13097,13092
<13092=13095,13093
<13093=13094
<13095=13096
<13097=13098
<13099=13100
<13100=13102,13101
<13103=13104
<13104=13113,13105
<13105=13112,13106
<13106=13108,13107
<13108=13109
<13109=13111,13110
<13113=13115,13114
<13116=13117
<13117=13122,13121,13118
<13118=13120,13119
<13123=13124
<13124=13128,13125
<13125=13127,13126
<13128=13137,13129
<13129=13136,13130
<13130=13132,13131
<13132=13133
<13133=13135,13134
<13137=13139,13138
<13140=13148,13143,13141
<13141=13142
<13143=13144
<13144=13146,13145
<13146=13147
<13148=13149
<13149=13151,13150
<13152=13153
<13153=13155,13154
<13178=13184,13183,13179
<13179=13180
<13180=13182,13181
<13184=13194,13185
<13185=13186
<13186=13190,13187
<13187=13188
<13188=13189
<13190=13191
<13191=13193,13192
<13194=13195
<13195=13197,13196
<13204=13207,13206,13205
<13207=13267,13260,13255,13250,13246,13237,13232,13221,13217,13213,13208
<13208=13209
<13209=13211,13210
<13211=13212
<13213=13214
<13214=13216,13215
<13217=13218
<13218=13220,13219
<13221=13230,13222
<13222=13223
<13223=13224
<13224=13228,13225
<13225=13226
<13226=13227
<13228=13229
<13230=13231
<13232=13233
<13233=13235,13234
<13235=13236
<13237=13238
<13238=13244,13239
<13239=13240
<13240=13241
<13241=13243,13242
<13244=13245
<13246=13247
<13247=13249,13248
<13250=13251
<13251=13253,13252
<13253=13254
<13255=13256
<13256=13258,13257
<13258=13259
<13260=13261
<13261=13263,13262
<13263=13264
<13264=13266,13265
<13267=13268
<13268=13270,13269
<13280=13283,13282,13281
<13283=13428,13427,13426,13424,13418,13412,13406,13400,13387,13381,13375,13362,13353,13349,13336,13324,13312,13306,13300,13293,13284
<13284=13285
<13285=13291,13286
<13286=13289,13287
<13287=13288
<13289=13290
<13291=13292
<13293=13294
<13294=13296,13295
<13296=13297
<13297=13299,13298
<13300=13301
<13301=13303,13302
<13303=13305,13304
<13306=13307
<13307=13309,13308
<13309=13311,13310
<13312=13313
<13313=13320,13314
<13314=13315
<13315=13316
<13316=13318,13317
<13318=13319
<13320=13321
<13321=13323,13322
<13324=13325
<13325=13332,13326
<13326=13327
<13327=13328
<13328=13330,13329
<13330=13331
<13332=13333
<13333=13335,13334
<13336=13337
<13337=13346,13338
<13338=13344,13339
<13339=13342,13340
<13340=13341
<13342=13343
<13344=13345
<13346=13348,13347
<13349=13350
<13350=13352,13351
<13353=13354
<13354=13360,13355
<13355=13358,13356
<13356=13357
<13358=13359
<13360=13361
<13362=13363
<13363=13369,13364
<13364=13367,13365
<13365=13366
<13367=13368
<13369=13370
<13370=13372,13371
<13372=13374,13373
<13375=13376
<13376=13378,13377
<13378=13380,13379
<13381=13382
<13382=13384,13383
<13384=13386,13385
<13387=13388
<13388=13397,13389
<13389=13395,13390
<13390=13393,13391
<13391=13392
<13393=13394
<13395=13396
<13397=13399,13398
<13400=13401
<13401=13403,13402
<13403=13405,13404
<13406=13407
<13407=13409,13408
<13409=13411,13410
<13412=13413
<13413=13415,13414
<13415=13417,13416
<13418=13419
<13419=13421,13420
<13421=13423,13422
<13424=13425
<13452=13458,13457,13453
<13453=13454
<13454=13456,13455
<13458=13515,13508,13461,13459
<13459=13460
<13461=13500,13491,13488,13462
<13462=13477,13470,13463
<13463=13466,13464
<13464=13465
<13466=13467
<13467=13469,13468
<13470=13471
<13471=13475,13472
<13472=13473
<13473=13474
<13475=13476
<13477=13478
<13478=13487,13486,13479
<13479=13485,13480
<13480=13482,13481
<13482=13484,13483
<13488=13490,13489
<13491=13492
<13492=13499,13493
<13493=13495,13494
<13495=13496
<13496=13498,13497
<13500=13501
<13501=13502
<13502=13507,13506,13503
<13503=13505,13504
<13508=13509
<13509=13513,13510
<13510=13511
<13511=13512
<13513=13514
<13515=13516
<13516=13521,13520,13517
<13517=13519,13518
<13536=13542,13541,13537
<13537=13538
<13538=13540,13539
<13542=13621,13582,13556,13545,13543
<13543=13544
<13545=13546
<13546=13554,13547
<13547=13548
<13548=13549
<13549=13553,13550
<13550=13552,13551
<13554=13555
<13556=13557
<13557=13578,13558
<13558=13571,13559
<13559=13560
<13560=13562,13561
<13562=13563
<13563=13565,13564
<13565=13567,13566
<13567=13568
<13568=13570,13569
<13571=13572
<13572=13574,13573
<13574=13575
<13575=13577,13576
<13578=13579
<13579=13581,13580
<13582=13617,13583
<13583=13601,13584
<13584=13597,13585
<13585=13588,13586
<13586=13587
<13588=13589
<13589=13595,13590
<13590=13591
<13591=13592
<13592=13594,13593
<13595=13596
<13597=13598
<13598=13600,13599
<13601=13602
<13602=13616,13603
<13603=13612,13604
<13604=13605
<13605=13606
<13606=13608,13607
<13608=13609
<13609=13611,13610
<13612=13613
<13613=13615,13614
<13617=13618
<13618=13620,13619
<13621=13622
<13622=13639,13638,13623
<13623=13637,13624
<13624=13633,13625
<13625=13626
<13626=13627
<13627=13629,13628
<13629=13630
<13630=13632,13631
<13633=13634
<13634=13636,13635
<13654=13657,13656,13655
<13657=13689,13658
<13658=13668,13659
<13659=13660
<13660=13664,13661
<13661=13662
<13662=13663
<13664=13665
<13665=13667,13666
<13668=13669
<13669=13685,13670
<13670=13673,13671
<13671=13672
<13673=13674
<13674=13676,13675
<13676=13677
<13677=13679,13678
<13679=13681,13680
<13681=13682
<13682=13684,13683
<13685=13686
<13686=13688,13687
<13689=13690
<13690=13692,13691
<13703=13706,13705,13704
<13706=13745,13726,13707
<13707=13708
<13708=13716,13709
<13709=13711,13710
<13711=13713,13712
<13713=13715,13714
<13716=13718,13717
<13718=13722,13719
<13719=13720
<13720=13721
<13722=13723
<13723=13725,13724
<13726=13727
<13727=13735,13728
<13728=13730,13729
<13730=13732,13731
<13732=13734,13733
<13735=13737,13736
<13737=13741,13738
<13738=13739
<13739=13740
<13741=13742
<13742=13744,13743
<13745=13746
<13746=13754,13747
<13747=13749,13748
<13749=13751,13750
<13751=13753,13752
<13754=13756,13755
<13756=13760,13757
<13757=13758
<13758=13759
<13760=13761
<13761=13763,13762
<13783=13786,13785,13784
<13786=13836,13797,13792,13787
<13787=13788
<13788=13790,13789
<13790=13791
<13792=13793
<13793=13795,13794
<13795=13796
<13797=13834,13798
<13798=13827,13818,13809,13803,13799
<13799=13800
<13800=13802,13801
<13803=13804
<13804=13806,13805
<13806=13808,13807
<13809=13810
<13810=13814,13811
<13811=13812
<13812=13813
<13814=13815
<13815=13817,13816
<13818=13819
<13819=13823,13820
<13820=13821
<13821=13822
<13823=13824
<13824=13826,13825
<13827=13828
<13828=13830,13829
<13830=13831
<13831=13833,13832
<13834=13835
<13836=13866,13837
<13837=13857,13848,13842,13838
<13838=13839
<13839=13841,13840
<13842=13843
<13843=13845,13844
<13845=13847,13846
<13848=13849
<13849=13853,13850
<13850=13851
<13851=13852
<13853=13854
<13854=13856,13855
<13857=13858
<13858=13862,13859
<13859=13860
<13860=13861
<13862=13863
<13863=13865,13864
<13866=13867
<13877=13880,13879,13878
<13880=13926,13895,13881
<13881=13882
<13882=13891,13883
<13883=13884
<13884=13885
<13885=13887,13886
<13887=13888
<13888=13890,13889
<13891=13892
<13892=13894,13893
<13895=13896
<13896=13925,13897
<13897=13913,13898
<13898=13912,13899
<13899=13905,13900
<13900=13904,13901
<13901=13903,13902
<13905=13907,13906
<13907=13909,13908
<13909=13911,13910
<13913=13917,13914
<13914=13915
<13915=13916
<13917=13918
<13918=13920,13919
<13920=13922,13921
<13922=13924,13923
<13926=13927
<13927=13929,13928
<13942=13948,13947,13943
<13943=13944
<13944=13946,13945
<13948=14614,14596,14587,14580,14579,14578,14577,14575,14569,14563,14557,14551,14538,14532,14526,14513,14504,14489,13949,13960,13965,13971,13980,13986,13999,14041,14052,14058,14078,14087,14100,14108,14126,14139,14152,14161,14170,14174,14180,14189,14202,14215,14223,14241,14250,14263,14272,14276,14282,14291,14304,14322,14335,14339,14344,14353,14366,14375,14381,14389,14396,14407,14418,14426,14441,14451,14466,14474
<13949=13950
<13950=13954,13951
<13951=13952
<13952=13953
<13954=13955
<13955=13957,13956
<13957=13959,13958
<13960=13961
<13961=13963,13962
<13963=13964
<13965=13966
<13966=13968,13967
<13968=13970,13969
<13971=13972
<13972=13978,13973
<13973=13976,13974
<13974=13975
<13976=13977
<13978=13979
<13980=13981
<13981=13983,13982
<13983=13985,13984
<13986=13987
<13987=13996,13988
<13988=13994,13989
<13989=13992,13990
<13990=13991
<13992=13993
<13994=13995
<13996=13998,13997
<13999=14037,14019,14000
<14000=14001
<14001=14002
<14002=14015,14003
<14003=14004
<14004=14005
<14005=14009,14006
<14006=14007
<14007=14008
<14009=14010
<14010=14012,14011
<14012=14014,14013
<14015=14016
<14016=14018,14017
<14019=14020
<14020=14033,14021
<14021=14022
<14022=14023
<14023=14027,14024
<14024=14025
<14025=14026
<14027=14028
<14028=14030,14029
<14030=14032,14031
<14033=14034
<14034=14036,14035
<14037=14038
<14038=14040,14039
<14041=14042
<14042=14051,14050,14043
<14043=14049,14044
<14044=14048,14045
<14045=14047,14046
<14052=14053
<14053=14055,14054
<14055=14057,14056
<14058=14072,14059
<14059=14060
<14060=14064,14061
<14061=14062
<14062=14063
<14064=14065
<14065=14067,14066
<14067=14069,14068
<14069=14071,14070
<14072=14073
<14073=14075,14074
<14075=14077,14076
<14078=14079
<14079=14085,14080
<14080=14083,14081
<14081=14082
<14083=14084
<14085=14086
<14087=14088
<14088=14097,14089
<14089=14095,14090
<14090=14093,14091
<14091=14092
<14093=14094
<14095=14096
<14097=14099,14098
<14100=14101
<14101=14103,14102
<14103=14105,14104
<14105=14107,14106
<14108=14109
<14109=14120,14110
<14110=14111
<14111=14112
<14112=14118,14113
<14113=14116,14114
<14114=14115
<14116=14117
<14118=14119
<14120=14121
<14121=14123,14122
<14123=14125,14124
<14126=14127
<14127=14136,14128
<14128=14134,14129
<14129=14132,14130
<14130=14131
<14132=14133
<14134=14135
<14136=14138,14137
<14139=14140
<14140=14148,14141
<14141=14146,14144,14142
<14142=14143
<14144=14145
<14146=14147
<14148=14149
<14149=14151,14150
<14152=14153
<14153=14157,14154
<14154=14155
<14155=14156
<14157=14158
<14158=14160,14159
<14161=14162
<14162=14166,14163
<14163=14164
<14164=14165
<14166=14167
<14167=14169,14168
<14170=14171
<14171=14173,14172
<14174=14175
<14175=14177,14176
<14177=14179,14178
<14180=14181
<14181=14187,14182
<14182=14185,14183
<14183=14184
<14185=14186
<14187=14188
<14189=14190
<14190=14199,14191
<14191=14197,14192
<14192=14195,14193
<14193=14194
<14195=14196
<14197=14198
<14199=14201,14200
<14202=14203
<14203=14212,14204
<14204=14210,14205
<14205=14208,14206
<14206=14207
<14208=14209
<14210=14211
<14212=14214,14213
<14215=14216
<14216=14218,14217
<14218=14220,14219
<14220=14222,14221
<14223=14224
<14224=14235,14225
<14225=14226
<14226=14227
<14227=14233,14228
<14228=14231,14229
<14229=14230
<14231=14232
<14233=14234
<14235=14236
<14236=14238,14237
<14238=14240,14239
<14241=14242
<14242=14246,14243
<14243=14244
<14244=14245
<14246=14247
<14247=14249,14248
<14250=14251
<14251=14259,14252
<14252=14257,14255,14253
<14253=14254
<14255=14256
<14257=14258
<14259=14260
<14260=14262,14261
<14263=14264
<14264=14268,14265
<14265=14266
<14266=14267
<14268=14269
<14269=14271,14270
<14272=14273
<14273=14275,14274
<14276=14277
<14277=14279,14278
<14279=14281,14280
<14282=14283
<14283=14289,14284
<14284=14287,14285
<14285=14286
<14287=14288
<14289=14290
<14291=14292
<14292=14301,14293
<14293=14299,14294
<14294=14297,14295
<14295=14296
<14297=14298
<14299=14300
<14301=14303,14302
<14304=14305
<14305=14316,14306
<14306=14307
<14307=14308
<14308=14314,14309
<14309=14312,14310
<14310=14311
<14312=14313
<14314=14315
<14316=14317
<14317=14319,14318
<14319=14321,14320
<14322=14323
<14323=14331,14324
<14324=14329,14327,14325
<14325=14326
<14327=14328
<14329=14330
<14331=14332
<14332=14334,14333
<14335=14336
<14336=14338,14337
<14339=14340
<14340=14342,14341
<14342=14343
<14344=14345
<14345=14351,14346
<14346=14349,14347
<14347=14348
<14349=14350
<14351=14352
<14353=14354
<14354=14363,14355
<14355=14361,14356
<14356=14359,14357
<14357=14358
<14359=14360
<14361=14362
<14363=14365,14364
<14366=14367
<14367=14371,14368
<14368=14369
<14369=14370
<14371=14372
<14372=14374,14373
<14375=14376
<14376=14378,14377
<14378=14380,14379
<14381=14382
<14382=14388,14383
<14383=14387,14384
<14384=14386,14385
<14389=14390
<14390=14394,14391
<14391=14392
<14392=14393
<14394=14395
<14396=14397
<14397=14401,14398
<14398=14399
<14399=14400
<14401=14402
<14402=14404,14403
<14404=14406,14405
<14407=14408
<14408=14416,14409
<14409=14412,14410
<14410=14411
<14412=14413
<14413=14415,14414
<14416=14417
<14418=14419
<14419=14421,14420
<14421=14423,14422
<14423=14425,14424
<14426=14427
<14427=14433,14428
<14428=14431,14429
<14429=14430
<14431=14432
<14433=14434
<14434=14436,14435
<14436=14438,14437
<14438=14440,14439
<14441=14442
<14442=14446,14443
<14443=14445,14444
<14446=14448,14447
<14448=14450,14449
<14451=14452
<14452=14458,14453
<14453=14456,14454
<14454=14455
<14456=14457
<14458=14459
<14459=14461,14460
<14461=14463,14462
<14463=14465,14464
<14466=14467
<14467=14469,14468
<14469=14471,14470
<14471=14473,14472
<14474=14475
<14475=14488,14476
<14476=14486,14477
<14477=14482,14478
<14478=14479
<14479=14481,14480
<14482=14483
<14483=14485,14484
<14486=14487
<14489=14490
<14490=14501,14491
<14491=14500,14492
<14492=14498,14493
<14493=14496,14494
<14494=14495
<14496=14497
<14498=14499
<14501=14503,14502
<14504=14505
<14505=14511,14506
<14506=14509,14507
<14507=14508
<14509=14510
<14511=14512
<14513=14514
<14514=14520,14515
<14515=14518,14516
<14516=14517
<14518=14519
<14520=14521
<14521=14523,14522
<14523=14525,14524
<14526=14527
<14527=14529,14528
<14529=14531,14530
<14532=14533
<14533=14535,14534
<14535=14537,14536
<14538=14539
<14539=14548,14540
<14540=14546,14541
<14541=14544,14542
<14542=14543
<14544=14545
<14546=14547
<14548=14550,14549
<14551=14552
<14552=14554,14553
<14554=14556,14555
<14557=14558
<14558=14560,14559
<14560=14562,14561
<14563=14564
<14564=14566,14565
<14566=14568,14567
<14569=14570
<14570=14572,14571
<14572=14574,14573
<14575=14576
<14580=14581
<14581=14586,14585,14582
<14582=14584,14583
<14587=14588
<14588=14592,14589
<14589=14590
<14590=14591
<14592=14593
<14593=14595,14594
<14596=14605,14597
<14597=14598
<14598=14599
<14599=14603,14600
<14600=14601
<14601=14602
<14603=14604
<14605=14606
<14606=14613,14607
<14607=14609,14608
<14609=14610
<14610=14612,14611
<14614=14623,14615
<14615=14616
<14616=14617
<14617=14621,14618
<14618=14619
<14619=14620
<14621=14622
<14623=14624
<14624=14631,14625
<14625=14627,14626
<14627=14628
<14628=14630,14629
<14710=14716,14715,14711
<14711=14712
<14712=14714,14713
<14716=14835,14829,14821,14806,14789,14782,14777,14765,14758,14742,14737,14728,14717
<14717=14718
<14718=14722,14719
<14719=14720
<14720=14721
<14722=14723
<14723=14725,14724
<14725=14727,14726
<14728=14729
<14729=14731,14730
<14731=14732
<14732=14734,14733
<14734=14736,14735
<14737=14738
<14738=14740,14739
<14740=14741
<14742=14751,14743
<14743=14744
<14744=14745
<14745=14747,14746
<14747=14748
<14748=14750,14749
<14751=14752
<14752=14754,14753
<14754=14755
<14755=14757,14756
<14758=14759
<14759=14761,14760
<14761=14762
<14762=14764,14763
<14765=14775,14766
<14766=14767
<14767=14769,14768
<14769=14770
<14770=14772,14771
<14772=14774,14773
<14775=14776
<14777=14778
<14778=14780,14779
<14780=14781
<14782=14783
<14783=14787,14784
<14784=14785
<14785=14786
<14787=14788
<14789=14804,14790
<14790=14791
<14791=14792
<14792=14798,14793
<14793=14796,14794
<14794=14795
<14796=14797
<14798=14799
<14799=14801,14800
<14801=14803,14802
<14804=14805
<14806=14807
<14807=14813,14808
<14808=14811,14809
<14809=14810
<14811=14812
<14813=14814
<14814=14816,14815
<14816=14818,14817
<14818=14820,14819
<14821=14822
<14822=14824,14823
<14824=14826,14825
<14826=14828,14827
<14829=14830
<14830=14834,14831
<14831=14833,14832
<14835=14836
<14836=14838,14837
<14838=14840,14839
<14840=14842,14841
<14867=14870,14869,14868
<14870=15081,15072,14964,14871
<14871=14960,14872
<14872=14947,14934,14921,14908,14897,14886,14873
<14873=14874
<14874=14882,14875
<14875=14880,14876
<14876=14877
<14877=14879,14878
<14880=14881
<14882=14883
<14883=14885,14884
<14886=14887
<14887=14893,14888
<14888=14891,14889
<14889=14890
<14891=14892
<14893=14894
<14894=14896,14895
<14897=14898
<14898=14904,14899
<14899=14902,14900
<14900=14901
<14902=14903
<14904=14905
<14905=14907,14906
<14908=14909
<14909=14915,14910
<14910=14913,14911
<14911=14912
<14913=14914
<14915=14916
<14916=14918,14917
<14918=14920,14919
<14921=14922
<14922=14928,14923
<14923=14926,14924
<14924=14925
<14926=14927
<14928=14929
<14929=14931,14930
<14931=14933,14932
<14934=14935
<14935=14941,14936
<14936=14939,14937
<14937=14938
<14939=14940
<14941=14942
<14942=14944,14943
<14944=14946,14945
<14947=14948
<14948=14954,14949
<14949=14952,14950
<14950=14951
<14952=14953
<14954=14955
<14955=14957,14956
<14957=14959,14958
<14960=14961
<14961=14963,14962
<14964=15064,15055,15052,14965
<14965=15038,15030,15011,14996,14977,14966
<14966=14967
<14967=14975,14968
<14968=14971,14969
<14969=14970
<14971=14972
<14972=14974,14973
<14975=14976
<14977=14988,14978
<14978=14979
<14979=14981,14980
<14981=14983,14982
<14983=14985,14984
<14985=14987,14986
<14988=14989
<14989=14993,14990
<14990=14992,14991
<14993=14995,14994
<14996=15007,14997
<14997=14998
<14998=15000,14999
<15000=15002,15001
<15002=15004,15003
<15004=15006,15005
<15007=15008
<15008=15010,15009
<15011=15012
<15012=15025,15013
<15013=15023,15014
<15014=15021,15015
<15015=15016
<15016=15020,15017
<15017=15019,15018
<15021=15022
<15023=15024
<15025=15027,15026
<15027=15029,15028
<15030=15031
<15031=15033,15032
<15033=15035,15034
<15035=15037,15036
<15038=15039
<15039=15049,15040
<15040=15048,15041
<15041=15043,15042
<15043=15045,15044
<15045=15047,15046
<15049=15051,15050
<15052=15054,15053
<15055=15056
<15056=15063,15057
<15057=15059,15058
<15059=15060
<15060=15062,15061
<15064=15065
<15065=15066
<15066=15071,15070,15067
<15067=15069,15068
<15072=15073
<15073=15077,15074
<15074=15075
<15075=15076
<15077=15078
<15078=15080,15079
<15081=15104,15095,15092,15082
<15082=15083
<15083=15084
<15084=15086,15085
<15086=15087
<15087=15089,15088
<15089=15091,15090
<15092=15094,15093
<15095=15096
<15096=15103,15097
<15097=15099,15098
<15099=15100
<15100=15102,15101
<15104=15105
<15105=15106
<15106=15111,15110,15107
<15107=15109,15108
<15140=15143,15142,15141
<15143=15179,15171,15154,15149,15144
<15144=15145
<15145=15147,15146
<15147=15148
<15149=15150
<15150=15152,15151
<15152=15153
<15154=15163,15155
<15155=15156
<15156=15158,15157
<15158=15160,15159
<15160=15162,15161
<15163=15164
<15164=15166,15165
<15166=15168,15167
<15168=15170,15169
<15171=15172
<15172=15174,15173
<15174=15176,15175
<15176=15178,15177
<15179=15181,15180
<15181=15182
<15182=15184,15183
<15184=15185
<15185=15187,15186
<15197=15200,15199,15198
<15200=15236,15228,15211,15206,15201
<15201=15202
<15202=15204,15203
<15204=15205
<15206=15207
<15207=15209,15208
<15209=15210
<15211=15220,15212
<15212=15213
<15213=15215,15214
<15215=15217,15216
<15217=15219,15218
<15220=15221
<15221=15223,15222
<15223=15225,15224
<15225=15227,15226
<15228=15229
<15229=15231,15230
<15231=15233,15232
<15233=15235,15234
<15236=15238,15237
<15238=15239
<15239=15241,15240
<15241=15242
<15242=15244,15243
<15254=15257,15256,15255
<15257=15276,15267,15258
<15258=15265,15259
<15259=15260
<15260=15262,15261
<15262=15264,15263
<15265=15266
<15267=15274,15268
<15268=15269
<15269=15271,15270
<15271=15273,15272
<15274=15275
<15276=15277
<15277=15279,15278
<15279=15280
<15290=15296,15295,15291
<15291=15292
<15292=15294,15293
<15296=15582,15575,15497,15460,15427,15420,15322,15317,15297
<15297=15311,15298
<15298=15299
<15299=15303,15300
<15300=15301
<15301=15302
<15303=15304
<15304=15306,15305
<15306=15308,15307
<15308=15310,15309
<15311=15312
<15312=15314,15313
<15314=15316,15315
<15317=15318
<15318=15320,15319
<15320=15321
<15322=15418,15323
<15323=15414,15378,15328,15324
<15324=15325
<15325=15327,15326
<15328=15369,15329
<15329=15352,15337,15330
<15330=15331
<15331=15335,15332
<15332=15333
<15333=15334
<15335=15336
<15337=15338
<15338=15344,15339
<15339=15342,15340
<15340=15341
<15342=15343
<15344=15345
<15345=15347,15346
<15347=15349,15348
<15349=15351,15350
<15352=15353
<15353=15361,15354
<15354=15357,15355
<15355=15356
<15357=15358
<15358=15360,15359
<15361=15362
<15362=15364,15363
<15364=15366,15365
<15366=15368,15367
<15369=15370
<15370=15372,15371
<15372=15374,15373
<15374=15375
<15375=15377,15376
<15378=15406,15397,15394,15379
<15379=15380
<15380=15390,15381
<15381=15382
<15382=15383
<15383=15385,15384
<15385=15387,15386
<15387=15389,15388
<15390=15391
<15391=15393,15392
<15394=15396,15395
<15397=15398
<15398=15405,15399
<15399=15401,15400
<15401=15402
<15402=15404,15403
<15406=15407
<15407=15408
<15408=15413,15412,15409
<15409=15411,15410
<15414=15415
<15415=15417,15416
<15418=15419
<15420=15421
<15421=15423,15422
<15423=15424
<15424=15426,15425
<15427=15452,15443,15440,15428
<15428=15429
<15429=15430
<15430=15434,15431
<15431=15432
<15432=15433
<15434=15435
<15435=15437,15436
<15437=15439,15438
<15440=15442,15441
<15443=15444
<15444=15451,15445
<15445=15447,15446
<15447=15448
<15448=15450,15449
<15452=15453
<15453=15454
<15454=15459,15458,15455
<15455=15457,15456
<15460=15495,15461
<15461=15486,15477,15462
<15462=15469,15463
<15463=15464
<15464=15466,15465
<15466=15468,15467
<15469=15470
<15470=15472,15471
<15472=15474,15473
<15474=15476,15475
<15477=15478
<15478=15482,15479
<15479=15480
<15480=15481
<15482=15483
<15483=15485,15484
<15486=15487
<15487=15491,15488
<15488=15489
<15489=15490
<15491=15492
<15492=15494,15493
<15495=15496
<15497=15573,15498
<15498=15499
<15499=15569,15535,15500
<15500=15501
<15501=15526,15517,15502
<15502=15509,15503
<15503=15504
<15504=15506,15505
<15506=15508,15507
<15509=15510
<15510=15512,15511
<15512=15514,15513
<15514=15516,15515
<15517=15518
<15518=15522,15519
<15519=15520
<15520=15521
<15522=15523
<15523=15525,15524
<15526=15527
<15527=15531,15528
<15528=15529
<15529=15530
<15531=15532
<15532=15534,15533
<15535=15560,15551,15536
<15536=15543,15537
<15537=15538
<15538=15540,15539
<15540=15542,15541
<15543=15544
<15544=15546,15545
<15546=15548,15547
<15548=15550,15549
<15551=15552
<15552=15556,15553
<15553=15554
<15554=15555
<15556=15557
<15557=15559,15558
<15560=15561
<15561=15565,15562
<15562=15563
<15563=15564
<15565=15566
<15566=15568,15567
<15569=15570
<15570=15572,15571
<15573=15574
<15575=15576
<15576=15581,15580,15577
<15577=15579,15578
<15582=15595,15583
<15583=15584
<15584=15585
<15585=15589,15586
<15586=15587
<15587=15588
<15589=15590
<15590=15592,15591
<15592=15594,15593
<15595=15596
<15638=15641,15640,15639
<15641=15642
<15642=15665,15656,15653,15643
<15643=15644
<15644=15645
<15645=15647,15646
<15647=15648
<15648=15650,15649
<15650=15652,15651
<15653=15655,15654
<15656=15657
<15657=15664,15658
<15658=15660,15659
<15660=15661
<15661=15663,15662
<15665=15666
<15666=15667
<15667=15672,15671,15668
<15668=15670,15669
<15681=15684,15683,15682
<15684=15716,15685
<15685=15708,15699,15696,15686
<15686=15687
<15687=15688
<15688=15690,15689
<15690=15691
<15691=15693,15692
<15693=15695,15694
<15696=15698,15697
<15699=15700
<15700=15707,15701
<15701=15703,15702
<15703=15704
<15704=15706,15705
<15708=15709
<15709=15710
<15710=15715,15714,15711
<15711=15713,15712
<15716=15717
<15717=15719,15718
<15719=15720
<15729=15738,15737,15730
<15730=15734,15731
<15731=15733,15732
<15734=15736,15735
<15738=16317,16310,16153,16149,16142,16129,16077,16073,16068,16057,15753,15748,15747,15746,15745,15743,15739
<15739=15740
<15740=15742,15741
<15743=15744
<15748=15749
<15749=15751,15750
<15751=15752
<15753=16053,16039,15754
<15754=15755
<15755=16030,16021,16013,15756
<15756=16009,15793,15757
<15757=15758
<15758=15789,15759
<15759=15775,15760
<15760=15761
<15761=15769,15762
<15762=15763
<15763=15764
<15764=15766,15765
<15766=15768,15767
<15769=15770
<15770=15772,15771
<15772=15774,15773
<15775=15776
<15776=15785,15777
<15777=15778
<15778=15779
<15779=15781,15780
<15781=15782
<15782=15784,15783
<15785=15786
<15786=15788,15787
<15789=15790
<15790=15792,15791
<15793=15987,15839,15835,15829,15823,15812,15801,15794
<15794=15795
<15795=15799,15796
<15796=15797
<15797=15798
<15799=15800
<15801=15802
<15802=15810,15803
<15803=15808,15806,15804
<15804=15805
<15806=15807
<15808=15809
<15810=15811
<15812=15813
<15813=15817,15814
<15814=15815
<15815=15816
<15817=15818
<15818=15820,15819
<15820=15822,15821
<15823=15824
<15824=15826,15825
<15826=15828,15827
<15829=15830
<15830=15832,15831
<15832=15834,15833
<15835=15836
<15836=15838,15837
<15839=15977,15840
<15840=15973,15946,15935,15924,15913,15898,15885,15870,15845,15841
<15841=15842
<15842=15844,15843
<15845=15846
<15846=15868,15847
<15847=15856,15854,15852,15850,15848
<15848=15849
<15850=15851
<15852=15853
<15854=15855
<15856=15857
<15857=15859,15858
<15859=15860
<15860=15862,15861
<15862=15864,15863
<15864=15865
<15865=15867,15866
<15868=15869
<15870=15871
<15871=15883,15872
<15872=15879,15877,15873
<15873=15874
<15874=15876,15875
<15877=15878
<15879=15880
<15880=15882,15881
<15883=15884
<15885=15886
<15886=15896,15887
<15887=15894,15890,15888
<15888=15889
<15890=15891
<15891=15893,15892
<15894=15895
<15896=15897
<15898=15899
<15899=15912,15911,15900
<15900=15910,15901
<15901=15909,15902
<15902=15904,15903
<15904=15906,15905
<15906=15908,15907
<15913=15914
<15914=15923,15922,15915
<15915=15921,15916
<15916=15920,15917
<15917=15919,15918
<15924=15925
<15925=15934,15933,15926
<15926=15932,15927
<15927=15931,15928
<15928=15930,15929
<15935=15936
<15936=15945,15944,15937
<15937=15943,15938
<15938=15940,15939
<15940=15942,15941
<15946=15947
<15947=15972,15948
<15948=15966,15949
<15949=15965,15950
<15950=15952,15951
<15952=15963,15953
<15953=15956,15954
<15954=15955
<15956=15957
<15957=15959,15958
<15959=15960
<15960=15962,15961
<15963=15964
<15966=15968,15967
<15968=15969
<15969=15971,15970
<15973=15974
<15974=15976,15975
<15977=15978
<15978=15982,15979
<15979=15981,15980
<15982=15984,15983
<15984=15986,15985
<15987=15988
<15988=16005,15989
<15989=15998,15996,15994,15992,15990
<15990=15991
<15992=15993
<15994=15995
<15996=15997
<15998=15999
<15999=16001,16000
<16001=16002
<16002=16004,16003
<16005=16006
<16006=16008,16007
<16009=16010
<16010=16012,16011
<16013=16014
<16014=16016,16015
<16016=16018,16017
<16018=16020,16019
<16021=16022
<16022=16029,16023
<16023=16025,16024
<16025=16026
<16026=16028,16027
<16030=16031
<16031=16035,16032
<16032=16033
<16033=16034
<16035=16036
<16036=16038,16037
<16039=16040
<16040=16049,16041
<16041=16042
<16042=16043
<16043=16047,16044
<16044=16045
<16045=16046
<16047=16048
<16049=16050
<16050=16052,16051
<16053=16054
<16054=16056,16055
<16057=16058
<16058=16064,16059
<16059=16060
<16060=16061
<16061=16063,16062
<16064=16065
<16065=16067,16066
<16068=16069
<16069=16071,16070
<16071=16072
<16073=16074
<16074=16076,16075
<16077=16106,16084,16078
<16078=16079
<16079=16080
<16080=16081
<16081=16083,16082
<16084=16094,16085
<16085=16086
<16086=16090,16087
<16087=16088
<16088=16089
<16090=16091
<16091=16093,16092
<16094=16095
<16095=16105,16096
<16096=16104,16097
<16097=16099,16098
<16099=16101,16100
<16101=16103,16102
<16106=16107
<16107=16122,16108
<16108=16117,16109
<16109=16116,16110
<16110=16112,16111
<16112=16113
<16113=16115,16114
<16117=16119,16118
<16119=16121,16120
<16122=16124,16123
<16124=16126,16125
<16126=16128,16127
<16129=16130
<16130=16141,16140,16131
<16131=16139,16132
<16132=16134,16133
<16134=16136,16135
<16136=16138,16137
<16142=16143
<16143=16147,16144
<16144=16145
<16145=16146
<16147=16148
<16149=16150
<16150=16152,16151
<16153=16300,16154
<16154=16293,16274,16267,16255,16245,16232,16219,16212,16199,16194,16189,16172,16167,16162,16155
<16155=16156
<16156=16160,16157
<16157=16158
<16158=16159
<16160=16161
<16162=16163
<16163=16165,16164
<16165=16166
<16167=16168
<16168=16170,16169
<16170=16171
<16172=16173
<16173=16188,16174
<16174=16184,16175
<16175=16182,16180,16178,16176
<16176=16177
<16178=16179
<16180=16181
<16182=16183
<16184=16185
<16185=16187,16186
<16189=16190
<16190=16192,16191
<16192=16193
<16194=16195
<16195=16197,16196
<16197=16198
<16199=16200
<16200=16210,16201
<16201=16208,16206,16204,16202
<16202=16203
<16204=16205
<16206=16207
<16208=16209
<16210=16211
<16212=16213
<16213=16217,16214
<16214=16215
<16215=16216
<16217=16218
<16219=16220
<16220=16231,16230,16221
<16221=16229,16222
<16222=16226,16223
<16223=16225,16224
<16226=16228,16227
<16232=16233
<16233=16244,16243,16234
<16234=16242,16235
<16235=16239,16236
<16236=16238,16237
<16239=16241,16240
<16245=16246
<16246=16254,16247
<16247=16253,16248
<16248=16252,16249
<16249=16251,16250
<16255=16261,16256
<16256=16257
<16257=16258
<16258=16260,16259
<16261=16262
<16262=16264,16263
<16264=16266,16265
<16267=16268
<16268=16273,16272,16269
<16269=16271,16270
<16274=16284,16275
<16275=16283,16282,16276
<16276=16281,16277
<16277=16279,16278
<16279=16280
<16284=16292,16291,16285
<16285=16290,16286
<16286=16288,16287
<16288=16289
<16293=16294
<16294=16298,16295
<16295=16296
<16296=16297
<16298=16299
<16300=16301
<16301=16307,16302
<16302=16304,16303
<16304=16306,16305
<16307=16309,16308
<16310=16311
<16311=16316,16315,16312
<16312=16314,16313
<16317=16324,16318
<16318=16323,16322,16319
<16319=16321,16320
<16324=16329,16328,16325
<16325=16327,16326
<16392=16398,16397,16393
<16393=16394
<16394=16396,16395
<16398=16430,16426,16406,16399
<16399=16400
<16400=16402,16401
<16402=16403
<16403=16405,16404
<16406=16407
<16407=16425,16408
<16408=16420,16409
<16409=16415,16410
<16410=16412,16411
<16412=16414,16413
<16415=16417,16416
<16417=16419,16418
<16420=16422,16421
<16422=16424,16423
<16426=16427
<16427=16429,16428
<16430=16433,16431
<16431=16432
<16433=16434
<16434=16438,16435
<16435=16437,16436
<16452=16458,16457,16453
<16453=16454
<16454=16456,16455
<16458=16481,16480,16479,16478,16477,16476,16475,16474,16473,16471,16459
<16459=16469,16460
<16460=16461
<16461=16465,16462
<16462=16463
<16463=16464
<16465=16466
<16466=16468,16467
<16469=16470
<16471=16472
<16488=16491,16490,16489
<16491=16492
<16492=16493
<16493=16495,16494
<16495=16497,16496
<16504=16507,16506,16505
<16507=16508
<16508=16509
<16509=16511,16510
<16511=16513,16512
<16520=16535,16534,16521
<16521=16531,16528,16525,16522
<16522=16524,16523
<16525=16527,16526
<16528=16530,16529
<16531=16533,16532
<16535=17337,17328,17324,17317,17300,17284,17278,17272,17259,17246,17226,17217,17210,17206,17197,17190,17183,17176,16839,16828,16822,16809,16800,16794,16781,16768,16759,16750,16719,16710,16697,16681,16665,16656,16643,16623,16614,16607,16600,16580,16560,16551,16542,16538,16536
<16536=16537
<16538=16539
<16539=16541,16540
<16542=16547,16543
<16543=16544
<16544=16546,16545
<16547=16548
<16548=16550,16549
<16551=16552
<16552=16559,16558,16553
<16553=16557,16554
<16554=16556,16555
<16560=16578,16561
<16561=16569,16562
<16562=16563
<16563=16565,16564
<16565=16566
<16566=16568,16567
<16569=16570
<16570=16574,16571
<16571=16572
<16572=16573
<16574=16575
<16575=16577,16576
<16578=16579
<16580=16598,16581
<16581=16589,16582
<16582=16583
<16583=16585,16584
<16585=16586
<16586=16588,16587
<16589=16590
<16590=16594,16591
<16591=16592
<16592=16593
<16594=16595
<16595=16597,16596
<16598=16599
<16600=16601
<16601=16603,16602
<16603=16604
<16604=16606,16605
<16607=16608
<16608=16610,16609
<16610=16611
<16611=16613,16612
<16614=16615
<16615=16619,16616
<16616=16617
<16617=16618
<16619=16620
<16620=16622,16621
<16623=16624
<16624=16637,16625
<16625=16628,16626
<16626=16627
<16628=16629
<16629=16635,16630
<16630=16633,16631
<16631=16632
<16633=16634
<16635=16636
<16637=16638
<16638=16640,16639
<16640=16642,16641
<16643=16644
<16644=16650,16645
<16645=16648,16646
<16646=16647
<16648=16649
<16650=16651
<16651=16653,16652
<16653=16655,16654
<16656=16657
<16657=16661,16658
<16658=16659
<16659=16660
<16661=16662
<16662=16664,16663
<16665=16679,16666
<16666=16667
<16667=16673,16668
<16668=16671,16669
<16669=16670
<16671=16672
<16673=16674
<16674=16676,16675
<16676=16678,16677
<16679=16680
<16681=16695,16682
<16682=16683
<16683=16689,16684
<16684=16687,16685
<16685=16686
<16687=16688
<16689=16690
<16690=16692,16691
<16692=16694,16693
<16695=16696
<16697=16698
<16698=16704,16699
<16699=16702,16700
<16700=16701
<16702=16703
<16704=16705
<16705=16707,16706
<16707=16709,16708
<16710=16711
<16711=16715,16712
<16712=16713
<16713=16714
<16715=16716
<16716=16718,16717
<16719=16746,16720
<16720=16737,16721
<16721=16733,16722
<16722=16729,16723
<16723=16725,16724
<16725=16726
<16726=16728,16727
<16729=16730
<16730=16732,16731
<16733=16734
<16734=16736,16735
<16737=16738
<16738=16742,16739
<16739=16740
<16740=16741
<16742=16743
<16743=16745,16744
<16746=16747
<16747=16749,16748
<16750=16751
<16751=16755,16752
<16752=16753
<16753=16754
<16755=16756
<16756=16758,16757
<16759=16760
<16760=16766,16761
<16761=16764,16762
<16762=16763
<16764=16765
<16766=16767
<16768=16769
<16769=16775,16770
<16770=16773,16771
<16771=16772
<16773=16774
<16775=16776
<16776=16778,16777
<16778=16780,16779
<16781=16782
<16782=16791,16783
<16783=16789,16784
<16784=16787,16785
<16785=16786
<16787=16788
<16789=16790
<16791=16793,16792
<16794=16795
<16795=16797,16796
<16797=16799,16798
<16800=16801
<16801=16805,16802
<16802=16803
<16803=16804
<16805=16806
<16806=16808,16807
<16809=16810
<16810=16819,16811
<16811=16817,16812
<16812=16815,16813
<16813=16814
<16815=16816
<16817=16818
<16819=16821,16820
<16822=16823
<16823=16825,16824
<16825=16827,16826
<16828=16829
<16829=16838,16837,16830
<16830=16836,16831
<16831=16835,16832
<16832=16834,16833
<16839=17174,17083,16840
<16840=16841
<16841=17079,17070,17057,17039,17026,17017,17011,17007,16998,16985,16967,16954,16945,16939,16930,16919,16908,16897,16886,16875,16864,16853,16842
<16842=16843
<16843=16849,16844
<16844=16847,16845
<16845=16846
<16847=16848
<16849=16850
<16850=16852,16851
<16853=16854
<16854=16860,16855
<16855=16858,16856
<16856=16857
<16858=16859
<16860=16861
<16861=16863,16862
<16864=16865
<16865=16871,16866
<16866=16869,16867
<16867=16868
<16869=16870
<16871=16872
<16872=16874,16873
<16875=16876
<16876=16882,16877
<16877=16880,16878
<16878=16879
<16880=16881
<16882=16883
<16883=16885,16884
<16886=16887
<16887=16893,16888
<16888=16891,16889
<16889=16890
<16891=16892
<16893=16894
<16894=16896,16895
<16897=16898
<16898=16904,16899
<16899=16902,16900
<16900=16901
<16902=16903
<16904=16905
<16905=16907,16906
<16908=16909
<16909=16915,16910
<16910=16913,16911
<16911=16912
<16913=16914
<16915=16916
<16916=16918,16917
<16919=16920
<16920=16926,16921
<16921=16924,16922
<16922=16923
<16924=16925
<16926=16927
<16927=16929,16928
<16930=16931
<16931=16935,16932
<16932=16933
<16933=16934
<16935=16936
<16936=16938,16937
<16939=16940
<16940=16942,16941
<16942=16944,16943
<16945=16946
<16946=16952,16947
<16947=16950,16948
<16948=16949
<16950=16951
<16952=16953
<16954=16955
<16955=16964,16956
<16956=16962,16957
<16957=16960,16958
<16958=16959
<16960=16961
<16962=16963
<16964=16966,16965
<16967=16968
<16968=16979,16969
<16969=16970
<16970=16971
<16971=16977,16972
<16972=16975,16973
<16973=16974
<16975=16976
<16977=16978
<16979=16980
<16980=16982,16981
<16982=16984,16983
<16985=16986
<16986=16994,16987
<16987=16992,16990,16988
<16988=16989
<16990=16991
<16992=16993
<16994=16995
<16995=16997,16996
<16998=16999
<16999=17003,17000
<17000=17001
<17001=17002
<17003=17004
<17004=17006,17005
<17007=17008
<17008=17010,17009
<17011=17012
<17012=17014,17013
<17014=17016,17015
<17017=17018
<17018=17024,17019
<17019=17022,17020
<17020=17021
<17022=17023
<17024=17025
<17026=17027
<17027=17036,17028
<17028=17034,17029
<17029=17032,17030
<17030=17031
<17032=17033
<17034=17035
<17036=17038,17037
<17039=17040
<17040=17051,17041
<17041=17042
<17042=17043
<17043=17049,17044
<17044=17047,17045
<17045=17046
<17047=17048
<17049=17050
<17051=17052
<17052=17054,17053
<17054=17056,17055
<17057=17058
<17058=17066,17059
<17059=17064,17062,17060
<17060=17061
<17062=17063
<17064=17065
<17066=17067
<17067=17069,17068
<17070=17071
<17071=17075,17072
<17072=17073
<17073=17074
<17075=17076
<17076=17078,17077
<17079=17080
<17080=17082,17081
<17083=17170,17161,17148,17130,17117,17108,17099,17090,17084
<17084=17085
<17085=17087,17086
<17087=17089,17088
<17090=17091
<17091=17095,17092
<17092=17093
<17093=17094
<17095=17096
<17096=17098,17097
<17099=17100
<17100=17104,17101
<17101=17102
<17102=17103
<17104=17105
<17105=17107,17106
<17108=17109
<17109=17115,17110
<17110=17113,17111
<17111=17112
<17113=17114
<17115=17116
<17117=17118
<17118=17127,17119
<17119=17125,17120
<17120=17123,17121
<17121=17122
<17123=17124
<17125=17126
<17127=17129,17128
<17130=17131
<17131=17142,17132
<17132=17133
<17133=17134
<17134=17140,17135
<17135=17138,17136
<17136=17137
<17138=17139
<17140=17141
<17142=17143
<17143=17145,17144
<17145=17147,17146
<17148=17149
<17149=17157,17150
<17150=17155,17153,17151
<17151=17152
<17153=17154
<17155=17156
<17157=17158
<17158=17160,17159
<17161=17162
<17162=17166,17163
<17163=17164
<17164=17165
<17166=17167
<17167=17169,17168
<17170=17171
<17171=17173,17172
<17174=17175
<17176=17177
<17177=17182,17181,17178
<17178=17180,17179
<17183=17184
<17184=17189,17188,17185
<17185=17187,17186
<17190=17191
<17191=17196,17195,17192
<17192=17194,17193
<17197=17198
<17198=17202,17199
<17199=17200
<17200=17201
<17202=17203
<17203=17205,17204
<17206=17207
<17207=17209,17208
<17210=17211
<17211=17216,17215,17212
<17212=17214,17213
<17217=17218
<17218=17224,17219
<17219=17222,17220
<17220=17221
<17222=17223
<17224=17225
<17226=17227
<17227=17240,17228
<17228=17231,17229
<17229=17230
<17231=17232
<17232=17238,17233
<17233=17236,17234
<17234=17235
<17236=17237
<17238=17239
<17240=17241
<17241=17243,17242
<17243=17245,17244
<17246=17247
<17247=17256,17248
<17248=17254,17249
<17249=17252,17250
<17250=17251
<17252=17253
<17254=17255
<17256=17258,17257
<17259=17260
<17260=17266,17261
<17261=17264,17262
<17262=17263
<17264=17265
<17266=17267
<17267=17269,17268
<17269=17271,17270
<17272=17273
<17273=17275,17274
<17275=17277,17276
<17278=17279
<17279=17281,17280
<17281=17283,17282
<17284=17285
<17285=17299,17298,17286
<17286=17297,17287
<17287=17296,17288
<17288=17294,17289
<17289=17292,17290
<17290=17291
<17292=17293
<17294=17295
<17300=17308,17301
<17301=17302
<17302=17303
<17303=17307,17304
<17304=17306,17305
<17308=17309
<17309=17316,17310
<17310=17312,17311
<17312=17313
<17313=17315,17314
<17317=17318
<17318=17323,17322,17319
<17319=17321,17320
<17324=17325
<17325=17327,17326
<17328=17329
<17329=17333,17330
<17330=17331
<17331=17332
<17333=17334
<17334=17336,17335
<17337=17338
<17338=17343,17342,17339
<17339=17341,17340
<17399=17411,17410,17400
<17400=17407,17404,17401
<17401=17403,17402
<17404=17406,17405
<17407=17409,17408
<17411=18829,18815,18804,18795,18794,18793,18792,18791,18790,18788,18775,18762,18756,18750,18741,18730,18721,18702,18691,18680,18661,18650,18643,18636,18629,18624,18602,18595,18588,18579,18572,18565,17549,17508,17499,17492,17485,17479,17473,17466,17459,17453,17446,17435,17423,17414,17412
<17412=17413
<17414=17415
<17415=17421,17416
<17416=17417
<17417=17418
<17418=17420,17419
<17421=17422
<17423=17431,17424
<17424=17425
<17425=17429,17426
<17426=17427
<17427=17428
<17429=17430
<17431=17432
<17432=17434,17433
<17435=17436
<17436=17440,17437
<17437=17438
<17438=17439
<17440=17441
<17441=17443,17442
<17443=17445,17444
<17446=17447
<17447=17449,17448
<17449=17450
<17450=17452,17451
<17453=17454
<17454=17456,17455
<17456=17458,17457
<17459=17460
<17460=17462,17461
<17462=17463
<17463=17465,17464
<17466=17467
<17467=17469,17468
<17469=17470
<17470=17472,17471
<17473=17474
<17474=17476,17475
<17476=17478,17477
<17479=17480
<17480=17482,17481
<17482=17484,17483
<17485=17486
<17486=17490,17487
<17487=17488
<17488=17489
<17490=17491
<17492=17493
<17493=17495,17494
<17495=17496
<17496=17498,17497
<17499=17500
<17500=17504,17501
<17501=17502
<17502=17503
<17504=17505
<17505=17507,17506
<17508=17525,17509
<17509=17510
<17510=17521,17511
<17511=17512
<17512=17513
<17513=17515,17514
<17515=17517,17516
<17517=17518
<17518=17520,17519
<17521=17522
<17522=17524,17523
<17525=17526
<17526=17548,17527
<17527=17540,17528
<17528=17530,17529
<17530=17539,17531
<17531=17533,17532
<17533=17535,17534
<17535=17536
<17536=17538,17537
<17540=17547,17541
<17541=17543,17542
<17543=17544
<17544=17546,17545
<17549=18563,17550
<17550=18534,17705,17651,17647,17631,17623,17612,17569,17560,17551
<17551=17552
<17552=17556,17553
<17553=17554
<17554=17555
<17556=17557
<17557=17559,17558
<17560=17561
<17561=17565,17562
<17562=17563
<17563=17564
<17565=17566
<17566=17568,17567
<17569=17599,17595,17570
<17570=17571
<17571=17582,17572
<17572=17578,17574,17573
<17574=17575
<17575=17577,17576
<17578=17579
<17579=17581,17580
<17582=17583
<17583=17594,17584
<17584=17593,17585
<17585=17589,17586
<17586=17587
<17587=17588
<17589=17590
<17590=17592,17591
<17595=17596
<17596=17598,17597
<17599=17600
<17600=17609,17601
<17601=17605,17602
<17602=17603
<17603=17604
<17605=17606
<17606=17608,17607
<17609=17611,17610
<17612=17614,17613
<17614=17615
<17615=17619,17616
<17616=17617
<17617=17618
<17619=17620
<17620=17622,17621
<17623=17629,17624
<17624=17625
<17625=17626
<17626=17628,17627
<17629=17630
<17631=17643,17632
<17632=17637,17633
<17633=17634
<17634=17636,17635
<17637=17638
<17638=17642,17639
<17639=17641,17640
<17643=17644
<17644=17646,17645
<17647=17648
<17648=17650,17649
<17651=17696,17658,17652
<17652=17653
<17653=17654
<17654=17655
<17655=17657,17656
<17658=17663,17659
<17659=17660
<17660=17662,17661
<17663=17692,17664
<17664=17665
<17665=17683,17666
<17666=17667
<17667=17668
<17668=17679,17669
<17669=17670
<17670=17671
<17671=17673,17672
<17673=17675,17674
<17675=17676
<17676=17678,17677
<17679=17680
<17680=17682,17681
<17683=17684
<17684=17691,17685
<17685=17687,17686
<17687=17688
<17688=17690,17689
<17692=17693
<17693=17695,17694
<17696=17697
<17697=17701,17698
<17698=17699
<17699=17700
<17701=17702
<17702=17704,17703
<17705=18523,17706
<17706=18502,18481,18460,18439,18418,18397,18376,18355,18334,18313,18292,18271,18250,18229,18208,18187,18166,18145,18124,18103,18082,18061,18040,18019,17998,17977,17958,17939,17920,17901,17882,17863,17844,17825,17806,17787,17768,17749,17728,17707
<17707=17708
<17708=17726,17709
<17709=17724,17722,17716,17712,17710
<17710=17711
<17712=17713
<17713=17715,17714
<17716=17717
<17717=17721,17718
<17718=17720,17719
<17722=17723
<17724=17725
<17726=17727
<17728=17729
<17729=17747,17730
<17730=17745,17743,17737,17733,17731
<17731=17732
<17733=17734
<17734=17736,17735
<17737=17738
<17738=17742,17739
<17739=17741,17740
<17743=17744
<17745=17746
<17747=17748
<17749=17750
<17750=17766,17751
<17751=17764,17762,17756,17752
<17752=17753
<17753=17755,17754
<17756=17757
<17757=17761,17758
<17758=17760,17759
<17762=17763
<17764=17765
<17766=17767
<17768=17769
<17769=17785,17770
<17770=17783,17781,17775,17771
<17771=17772
<17772=17774,17773
<17775=17776
<17776=17780,17777
<17777=17779,17778
<17781=17782
<17783=17784
<17785=17786
<17787=17788
<17788=17804,17789
<17789=17802,17800,17794,17790
<17790=17791
<17791=17793,17792
<17794=17795
<17795=17799,17796
<17796=17798,17797
<17800=17801
<17802=17803
<17804=17805
<17806=17807
<17807=17823,17808
<17808=17821,17819,17813,17809
<17809=17810
<17810=17812,17811
<17813=17814
<17814=17818,17815
<17815=17817,17816
<17819=17820
<17821=17822
<17823=17824
<17825=17826
<17826=17842,17827
<17827=17840,17838,17832,17828
<17828=17829
<17829=17831,17830
<17832=17833
<17833=17837,17834
<17834=17836,17835
<17838=17839
<17840=17841
<17842=17843
<17844=17845
<17845=17861,17846
<17846=17859,17857,17851,17847
<17847=17848
<17848=17850,17849
<17851=17852
<17852=17856,17853
<17853=17855,17854
<17857=17858
<17859=17860
<17861=17862
<17863=17864
<17864=17880,17865
<17865=17878,17876,17870,17866
<17866=17867
<17867=17869,17868
<17870=17871
<17871=17875,17872
<17872=17874,17873
<17876=17877
<17878=17879
<17880=17881
<17882=17883
<17883=17899,17884
<17884=17897,17895,17889,17885
<17885=17886
<17886=17888,17887
<17889=17890
<17890=17894,17891
<17891=17893,17892
<17895=17896
<17897=17898
<17899=17900
<17901=17902
<17902=17918,17903
<17903=17916,17914,17908,17904
<17904=17905
<17905=17907,17906
<17908=17909
<17909=17913,17910
<17910=17912,17911
<17914=17915
<17916=17917
<17918=17919
<17920=17921
<17921=17937,17922
<17922=17935,17933,17927,17923
<17923=17924
<17924=17926,17925
<17927=17928
<17928=17932,17929
<17929=17931,17930
<17933=17934
<17935=17936
<17937=17938
<17939=17940
<17940=17956,17941
<17941=17954,17952,17946,17942
<17942=17943
<17943=17945,17944
<17946=17947
<17947=17951,17948
<17948=17950,17949
<17952=17953
<17954=17955
<17956=17957
<17958=17959
<17959=17975,17960
<17960=17973,17971,17965,17961
<17961=17962
<17962=17964,17963
<17965=17966
<17966=17970,17967
<17967=17969,17968
<17971=17972
<17973=17974
<17975=17976
<17977=17978
<17978=17996,17979
<17979=17994,17992,17986,17982,17980
<17980=17981
<17982=17983
<17983=17985,17984
<17986=17987
<17987=17991,17988
<17988=17990,17989
<17992=17993
<17994=17995
<17996=17997
<17998=17999
<17999=18017,18000
<18000=18015,18013,18007,18003,18001
<18001=18002
<18003=18004
<18004=18006,18005
<18007=18008
<18008=18012,18009
<18009=18011,18010
<18013=18014
<18015=18016
<18017=18018
<18019=18020
<18020=18038,18021
<18021=18036,18034,18028,18024,18022
<18022=18023
<18024=18025
<18025=18027,18026
<18028=18029
<18029=18033,18030
<18030=18032,18031
<18034=18035
<18036=18037
<18038=18039
<18040=18041
<18041=18059,18042
<18042=18057,18055,18049,18045,18043
<18043=18044
<18045=18046
<18046=18048,18047
<18049=18050
<18050=18054,18051
<18051=18053,18052
<18055=18056
<18057=18058
<18059=18060
<18061=18062
<18062=18080,18063
<18063=18078,18076,18070,18066,18064
<18064=18065
<18066=18067
<18067=18069,18068
<18070=18071
<18071=18075,18072
<18072=18074,18073
<18076=18077
<18078=18079
<18080=18081
<18082=18083
<18083=18101,18084
<18084=18099,18097,18091,18087,18085
<18085=18086
<18087=18088
<18088=18090,18089
<18091=18092
<18092=18096,18093
<18093=18095,18094
<18097=18098
<18099=18100
<18101=18102
<18103=18104
<18104=18122,18105
<18105=18120,18118,18112,18108,18106
<18106=18107
<18108=18109
<18109=18111,18110
<18112=18113
<18113=18117,18114
<18114=18116,18115
<18118=18119
<18120=18121
<18122=18123
<18124=18125
<18125=18143,18126
<18126=18141,18139,18133,18129,18127
<18127=18128
<18129=18130
<18130=18132,18131
<18133=18134
<18134=18138,18135
<18135=18137,18136
<18139=18140
<18141=18142
<18143=18144
<18145=18146
<18146=18164,18147
<18147=18162,18160,18154,18150,18148
<18148=18149
<18150=18151
<18151=18153,18152
<18154=18155
<18155=18159,18156
<18156=18158,18157
<18160=18161
<18162=18163
<18164=18165
<18166=18167
<18167=18185,18168
<18168=18183,18181,18175,18171,18169
<18169=18170
<18171=18172
<18172=18174,18173
<18175=18176
<18176=18180,18177
<18177=18179,18178
<18181=18182
<18183=18184
<18185=18186
<18187=18188
<18188=18206,18189
<18189=18204,18202,18196,18192,18190
<18190=18191
<18192=18193
<18193=18195,18194
<18196=18197
<18197=18201,18198
<18198=18200,18199
<18202=18203
<18204=18205
<18206=18207
<18208=18209
<18209=18227,18210
<18210=18225,18223,18217,18213,18211
<18211=18212
<18213=18214
<18214=18216,18215
<18217=18218
<18218=18222,18219
<18219=18221,18220
<18223=18224
<18225=18226
<18227=18228
<18229=18230
<18230=18248,18231
<18231=18246,18244,18238,18234,18232
<18232=18233
<18234=18235
<18235=18237,18236
<18238=18239
<18239=18243,18240
<18240=18242,18241
<18244=18245
<18246=18247
<18248=18249
<18250=18251
<18251=18269,18252
<18252=18267,18265,18259,18255,18253
<18253=18254
<18255=18256
<18256=18258,18257
<18259=18260
<18260=18264,18261
<18261=18263,18262
<18265=18266
<18267=18268
<18269=18270
<18271=18272
<18272=18290,18273
<18273=18288,18286,18280,18276,18274
<18274=18275
<18276=18277
<18277=18279,18278
<18280=18281
<18281=18285,18282
<18282=18284,18283
<18286=18287
<18288=18289
<18290=18291
<18292=18293
<18293=18311,18294
<18294=18309,18307,18301,18297,18295
<18295=18296
<18297=18298
<18298=18300,18299
<18301=18302
<18302=18306,18303
<18303=18305,18304
<18307=18308
<18309=18310
<18311=18312
<18313=18314
<18314=18332,18315
<18315=18330,18328,18322,18318,18316
<18316=18317
<18318=18319
<18319=18321,18320
<18322=18323
<18323=18327,18324
<18324=18326,18325
<18328=18329
<18330=18331
<18332=18333
<18334=18335
<18335=18353,18336
<18336=18351,18349,18343,18339,18337
<18337=18338
<18339=18340
<18340=18342,18341
<18343=18344
<18344=18348,18345
<18345=18347,18346
<18349=18350
<18351=18352
<18353=18354
<18355=18356
<18356=18374,18357
<18357=18372,18370,18364,18360,18358
<18358=18359
<18360=18361
<18361=18363,18362
<18364=18365
<18365=18369,18366
<18366=18368,18367
<18370=18371
<18372=18373
<18374=18375
<18376=18377
<18377=18395,18378
<18378=18393,18391,18385,18381,18379
<18379=18380
<18381=18382
<18382=18384,18383
<18385=18386
<18386=18390,18387
<18387=18389,18388
<18391=18392
<18393=18394
<18395=18396
<18397=18398
<18398=18416,18399
<18399=18414,18412,18406,18402,18400
<18400=18401
<18402=18403
<18403=18405,18404
<18406=18407
<18407=18411,18408
<18408=18410,18409
<18412=18413
<18414=18415
<18416=18417
<18418=18419
<18419=18437,18420
<18420=18435,18433,18427,18423,18421
<18421=18422
<18423=18424
<18424=18426,18425
<18427=18428
<18428=18432,18429
<18429=18431,18430
<18433=18434
<18435=18436
<18437=18438
<18439=18440
<18440=18458,18441
<18441=18456,18454,18448,18444,18442
<18442=18443
<18444=18445
<18445=18447,18446
<18448=18449
<18449=18453,18450
<18450=18452,18451
<18454=18455
<18456=18457
<18458=18459
<18460=18461
<18461=18479,18462
<18462=18477,18475,18469,18465,18463
<18463=18464
<18465=18466
<18466=18468,18467
<18469=18470
<18470=18474,18471
<18471=18473,18472
<18475=18476
<18477=18478
<18479=18480
<18481=18482
<18482=18500,18483
<18483=18498,18496,18490,18486,18484
<18484=18485
<18486=18487
<18487=18489,18488
<18490=18491
<18491=18495,18492
<18492=18494,18493
<18496=18497
<18498=18499
<18500=18501
<18502=18503
<18503=18521,18504
<18504=18519,18517,18511,18507,18505
<18505=18506
<18507=18508
<18508=18510,18509
<18511=18512
<18512=18516,18513
<18513=18515,18514
<18517=18518
<18519=18520
<18521=18522
<18523=18524
<18524=18528,18525
<18525=18527,18526
<18528=18530,18529
<18530=18531
<18531=18533,18532
<18534=18561,18535
<18535=18545,18536
<18536=18537
<18537=18541,18538
<18538=18539
<18539=18540
<18541=18542
<18542=18544,18543
<18545=18546
<18546=18557,18547
<18547=18548
<18548=18549
<18549=18551,18550
<18551=18553,18552
<18553=18554
<18554=18556,18555
<18557=18558
<18558=18560,18559
<18561=18562
<18563=18564
<18565=18566
<18566=18571,18570,18567
<18567=18569,18568
<18572=18573
<18573=18578,18577,18574
<18574=18576,18575
<18579=18580
<18580=18587,18586,18581
<18581=18585,18582
<18582=18584,18583
<18588=18589
<18589=18594,18593,18590
<18590=18592,18591
<18595=18596
<18596=18601,18600,18597
<18597=18599,18598
<18602=18616,18612,18609,18603
<18603=18604
<18604=18606,18605
<18606=18608,18607
<18609=18611,18610
<18612=18613
<18613=18615,18614
<18616=18617
<18617=18618
<18618=18623,18622,18619
<18619=18621,18620
<18624=18625
<18625=18628,18627,18626
<18629=18630
<18630=18635,18634,18631
<18631=18633,18632
<18636=18637
<18637=18641,18638
<18638=18639
<18639=18640
<18641=18642
<18643=18644
<18644=18646,18645
<18646=18647
<18647=18649,18648
<18650=18651
<18651=18657,18652
<18652=18655,18653
<18653=18654
<18655=18656
<18657=18658
<18658=18660,18659
<18661=18662
<18662=18677,18663
<18663=18675,18664
<18664=18669,18665
<18665=18666
<18666=18668,18667
<18669=18670
<18670=18672,18671
<18672=18674,18673
<18675=18676
<18677=18679,18678
<18680=18681
<18681=18690,18689,18682
<18682=18688,18683
<18683=18687,18684
<18684=18686,18685
<18691=18692
<18692=18698,18693
<18693=18696,18694
<18694=18695
<18696=18697
<18698=18699
<18699=18701,18700
<18702=18703
<18703=18718,18704
<18704=18716,18705
<18705=18710,18706
<18706=18707
<18707=18709,18708
<18710=18711
<18711=18713,18712
<18713=18715,18714
<18716=18717
<18718=18720,18719
<18721=18722
<18722=18726,18723
<18723=18724
<18724=18725
<18726=18727
<18727=18729,18728
<18730=18731
<18731=18740,18739,18732
<18732=18738,18733
<18733=18737,18734
<18734=18736,18735
<18741=18742
<18742=18748,18743
<18743=18746,18744
<18744=18745
<18746=18747
<18748=18749
<18750=18751
<18751=18753,18752
<18753=18755,18754
<18756=18757
<18757=18759,18758
<18759=18761,18760
<18762=18763
<18763=18772,18764
<18764=18770,18765
<18765=18768,18766
<18766=18767
<18768=18769
<18770=18771
<18772=18774,18773
<18775=18776
<18776=18784,18777
<18777=18782,18780,18778
<18778=18779
<18780=18781
<18782=18783
<18784=18785
<18785=18787,18786
<18788=18789
<18795=18796
<18796=18800,18797
<18797=18798
<18798=18799
<18800=18801
<18801=18803,18802
<18804=18805
<18805=18809,18806
<18806=18807
<18807=18808
<18809=18810
<18810=18812,18811
<18812=18814,18813
<18815=18816
<18816=18828,18827,18817
<18817=18826,18818
<18818=18820,18819
<18820=18821
<18821=18823,18822
<18823=18825,18824
<18829=18830
<18830=18835,18834,18831
<18831=18833,18832
<18935=18938,18937,18936
<18938=18946,18939
<18939=18940
<18940=18942,18941
<18942=18943
<18943=18945,18944
<18946=18947
<18947=18949,18948
<18949=18950
<18950=18952,18951
<18958=18964,18963,18959
<18959=18960
<18960=18962,18961
<18964=19014,19007,18967,18965
<18965=18966
<18967=18999,18986,18983,18968
<18968=18969
<18969=18973,18970
<18970=18971
<18971=18972
<18973=18974
<18974=18982,18975
<18975=18977,18976
<18977=18979,18978
<18979=18981,18980
<18983=18985,18984
<18986=18987
<18987=18998,18988
<18988=18990,18989
<18990=18991
<18991=18993,18992
<18993=18995,18994
<18995=18997,18996
<18999=19000
<19000=19001
<19001=19006,19005,19002
<19002=19004,19003
<19007=19008
<19008=19012,19009
<19009=19010
<19010=19011
<19012=19013
<19014=19015
<19015=19020,19019,19016
<19016=19018,19017
<19038=19044,19043,19039
<19039=19040
<19040=19042,19041
<19044=19070,19063,19045
<19045=19054,19046
<19046=19047
<19047=19048
<19048=19052,19049
<19049=19050
<19050=19051
<19052=19053
<19054=19055
<19055=19062,19056
<19056=19060,19057
<19057=19058
<19058=19059
<19060=19061
<19063=19064
<19064=19068,19065
<19065=19066
<19066=19067
<19068=19069
<19070=19071
<19071=19076,19075,19072
<19072=19074,19073
<19083=19089,19088,19084
<19084=19085
<19085=19087,19086
<19089=19090
<19090=19091
<19091=19097,19092
<19092=19095,19093
<19093=19094
<19095=19096
<19097=19098
<19098=19100,19099
<19107=19110,19109,19108
<19114=19117,19116,19115
<19117=19118
<19118=19119
<19119=19121,19120
<19121=19122
<19122=19124,19123
<19129=19138,19137,19130
<19130=19134,19131
<19131=19133,19132
<19134=19136,19135
<19138=19189,19182,19175,19152,19139
<19139=19140
<19140=19148,19141
<19141=19146,19144,19142
<19142=19143
<19144=19145
<19146=19147
<19148=19149
<19149=19151,19150
<19152=19166,19153
<19153=19154
<19154=19158,19155
<19155=19156
<19156=19157
<19158=19159
<19159=19161,19160
<19161=19163,19162
<19163=19165,19164
<19166=19167
<19167=19174,19168
<19168=19172,19169
<19169=19170
<19170=19171
<19172=19173
<19175=19176
<19176=19180,19177
<19177=19178
<19178=19179
<19180=19181
<19182=19183
<19183=19188,19187,19184
<19184=19186,19185
<19189=19190
<19190=19196,19191
<19191=19192
<19192=19193
<19193=19195,19194
<19196=19197
<19211=19217,19216,19212
<19212=19213
<19213=19215,19214
<19217=19234,19218
<19218=19228,19219
<19219=19220
<19220=19224,19221
<19221=19222
<19222=19223
<19224=19225
<19225=19227,19226
<19228=19229
<19229=19231,19230
<19231=19233,19232
<19234=19235
<19235=19239,19236
<19236=19237
<19237=19238
<19239=19240
<19249=19252,19251,19250
<19252=19258,19253
<19253=19254
<19254=19256,19255
<19256=19257
<19258=19259
<19259=19265,19260
<19260=19264,19261
<19261=19263,19262
<19273=19276,19275,19274
<19276=19283,19277
<19277=19278
<19278=19282,19279
<19279=19281,19280
<19283=19286,19284
<19284=19285
<19286=19287
<19287=19289,19288
<19289=19291,19290
<19298=19304,19303,19299
<19299=19300
<19300=19302,19301
<19304=19496,19487,19474,19468,19459,19450,19428,19424,19320,19314,19307,19305
<19305=19306
<19307=19308
<19308=19310,19309
<19310=19311
<19311=19313,19312
<19314=19315
<19315=19317,19316
<19317=19319,19318
<19320=19422,19321
<19321=19412,19394,19378,19360,19344,19333,19322
<19322=19323
<19323=19329,19324
<19324=19325
<19325=19326
<19326=19328,19327
<19329=19330
<19330=19332,19331
<19333=19335,19334
<19335=19336
<19336=19340,19337
<19337=19338
<19338=19339
<19340=19341
<19341=19343,19342
<19344=19351,19345
<19345=19346
<19346=19348,19347
<19348=19350,19349
<19351=19352
<19352=19356,19353
<19353=19354
<19354=19355
<19356=19357
<19357=19359,19358
<19360=19369,19361
<19361=19362
<19362=19366,19363
<19363=19365,19364
<19366=19368,19367
<19369=19370
<19370=19374,19371
<19371=19372
<19372=19373
<19374=19375
<19375=19377,19376
<19378=19385,19379
<19379=19380
<19380=19382,19381
<19382=19384,19383
<19385=19386
<19386=19390,19387
<19387=19388
<19388=19389
<19390=19391
<19391=19393,19392
<19394=19403,19395
<19395=19396
<19396=19400,19397
<19397=19399,19398
<19400=19402,19401
<19403=19404
<19404=19408,19405
<19405=19406
<19406=19407
<19408=19409
<19409=19411,19410
<19412=19413
<19413=19419,19414
<19414=19416,19415
<19416=19418,19417
<19419=19421,19420
<19422=19423
<19424=19425
<19425=19427,19426
<19428=19441,19429
<19429=19430
<19430=19431
<19431=19437,19432
<19432=19433
<19433=19434
<19434=19436,19435
<19437=19438
<19438=19440,19439
<19441=19442
<19442=19446,19443
<19443=19444
<19444=19445
<19446=19447
<19447=19449,19448
<19450=19451
<19451=19457,19452
<19452=19455,19453
<19453=19454
<19455=19456
<19457=19458
<19459=19460
<19460=19464,19461
<19461=19462
<19462=19463
<19464=19465
<19465=19467,19466
<19468=19469
<19469=19471,19470
<19471=19473,19472
<19474=19475
<19475=19484,19476
<19476=19482,19477
<19477=19480,19478
<19478=19479
<19480=19481
<19482=19483
<19484=19486,19485
<19487=19488
<19488=19492,19489
<19489=19490
<19490=19491
<19492=19493
<19493=19495,19494
<19496=19497
<19497=19506,19505,19498
<19498=19504,19499
<19499=19503,19500
<19500=19502,19501
<19532=19538,19537,19533
<19533=19534
<19534=19536,19535
<19538=19539
<19539=19540
<19540=19548,19541
<19541=19547,19542
<19542=19546,19543
<19543=19545,19544
<19554=19563,19562,19555
<19555=19559,19556
<19556=19558,19557
<19559=19561,19560
<19563=19684,19670,19647,19626,19622,19575,19564
<19564=19565
<19565=19573,19566
<19566=19567
<19567=19568
<19568=19572,19569
<19569=19571,19570
<19573=19574
<19575=19613,19576
<19576=19577
<19577=19604,19578
<19578=19579
<19579=19582,19580
<19580=19581
<19582=19583
<19583=19594,19584
<19584=19586,19585
<19586=19590,19587
<19587=19588
<19588=19589
<19590=19591
<19591=19593,19592
<19594=19596,19595
<19596=19600,19597
<19597=19598
<19598=19599
<19600=19601
<19601=19603,19602
<19604=19605
<19605=19612,19606
<19606=19608,19607
<19608=19609
<19609=19611,19610
<19613=19614
<19614=19620,19615
<19615=19618,19616
<19616=19617
<19618=19619
<19620=19621
<19622=19623
<19623=19625,19624
<19626=19627
<19627=19643,19628
<19628=19629
<19629=19630
<19630=19632,19631
<19632=19633
<19633=19635,19634
<19635=19639,19636
<19636=19637
<19637=19638
<19639=19640
<19640=19642,19641
<19643=19644
<19644=19646,19645
<19647=19661,19648
<19648=19650,19649
<19650=19651
<19651=19659,19652
<19652=19653
<19653=19654
<19654=19658,19655
<19655=19657,19656
<19659=19660
<19661=19662
<19662=19669,19663
<19663=19667,19664
<19664=19665
<19665=19666
<19667=19668
<19670=19671
<19671=19683,19682,19672
<19672=19681,19673
<19673=19677,19674
<19674=19675
<19675=19676
<19677=19678
<19678=19680,19679
<19684=19686,19685
<19686=19687
<19687=19689,19688
<19689=19690
<19690=19692,19691
<19714=19726,19725,19715
<19715=19722,19719,19716
<19716=19718,19717
<19719=19721,19720
<19722=19724,19723
<19726=19729,19727
<19727=19728
<19729=19746,19734,19730
<19730=19731
<19731=19732
<19732=19733
<19734=19735
<19735=19736
<19736=19744,19737
<19737=19738
<19738=19739
<19739=19743,19740
<19740=19742,19741
<19744=19745
<19746=19747
<19747=19760,19748
<19748=19756,19749
<19749=19754,19752,19750
<19750=19751
<19752=19753
<19754=19755
<19756=19757
<19757=19759,19758
<19771=19783,19782,19772
<19772=19779,19776,19773
<19773=19775,19774
<19776=19778,19777
<19779=19781,19780
<19783=19786,19784
<19784=19785
<19786=19803,19791,19787
<19787=19788
<19788=19789
<19789=19790
<19791=19792
<19792=19793
<19793=19801,19794
<19794=19795
<19795=19796
<19796=19800,19797
<19797=19799,19798
<19801=19802
<19803=19804
<19804=19817,19805
<19805=19813,19806
<19806=19811,19809,19807
<19807=19808
<19809=19810
<19811=19812
<19813=19814
<19814=19816,19815
<19828=19831,19830,19829
<19831=19832
<19832=19833
<19833=19835,19834
<19835=19836
<19836=19838,19837
<19843=19846,19845,19844
<19846=19847
<19847=19972,19848
<19848=19849
<19849=19939,19850
<19850=19932,19925,19907,19851
<19851=19905,19852
<19852=19890,19853
<19853=19876,19854
<19854=19867,19855
<19855=19856
<19856=19862,19857
<19857=19859,19858
<19859=19861,19860
<19862=19864,19863
<19864=19866,19865
<19867=19868
<19868=19872,19869
<19869=19870
<19870=19871
<19872=19873
<19873=19875,19874
<19876=19877
<19877=19884,19878
<19878=19882,19879
<19879=19880
<19880=19881
<19882=19883
<19884=19886,19885
<19886=19887
<19887=19889,19888
<19890=19891
<19891=19904,19903,19892
<19892=19902,19893
<19893=19897,19894
<19894=19896,19895
<19897=19899,19898
<19899=19901,19900
<19905=19906
<19907=19917,19913,19908
<19908=19909
<19909=19910
<19910=19912,19911
<19913=19914
<19914=19916,19915
<19917=19918
<19918=19920,19919
<19920=19922,19921
<19922=19924,19923
<19925=19926
<19926=19931,19930,19927
<19927=19929,19928
<19932=19933
<19933=19938,19937,19934
<19934=19936,19935
<19939=19940
<19940=19962,19941
<19941=19952,19942
<19942=19951,19943
<19943=19945,19944
<19945=19946
<19946=19948,19947
<19948=19950,19949
<19952=19961,19953
<19953=19955,19954
<19955=19956
<19956=19958,19957
<19958=19960,19959
<19962=19971,19963
<19963=19965,19964
<19965=19966
<19966=19968,19967
<19968=19970,19969
<19972=19973
<19973=19979,19974
<19974=19976,19975
<19976=19978,19977
<19979=19981,19980
<20010=20016,20015,20011
<20011=20012
<20012=20014,20013
<20016=20017
<20017=20119,20069,20018
<20018=20019
<20019=20056,20036,20020
<20020=20034,20021
<20021=20022
<20022=20031,20023
<20023=20029,20024
<20024=20027,20025
<20025=20026
<20027=20028
<20029=20030
<20031=20033,20032
<20034=20035
<20036=20052,20037
<20037=20038
<20038=20047,20039
<20039=20045,20040
<20040=20043,20041
<20041=20042
<20043=20044
<20045=20046
<20047=20049,20048
<20049=20051,20050
<20052=20053
<20053=20055,20054
<20056=20057
<20057=20066,20058
<20058=20064,20059
<20059=20062,20060
<20060=20061
<20062=20063
<20064=20065
<20066=20068,20067
<20069=20106,20086,20070
<20070=20084,20071
<20071=20072
<20072=20081,20073
<20073=20079,20074
<20074=20077,20075
<20075=20076
<20077=20078
<20079=20080
<20081=20083,20082
<20084=20085
<20086=20102,20087
<20087=20088
<20088=20097,20089
<20089=20095,20090
<20090=20093,20091
<20091=20092
<20093=20094
<20095=20096
<20097=20099,20098
<20099=20101,20100
<20102=20103
<20103=20105,20104
<20106=20107
<20107=20116,20108
<20108=20114,20109
<20109=20112,20110
<20110=20111
<20112=20113
<20114=20115
<20116=20118,20117
<20119=20120
<20138=20141,20140,20139
<20141=20142
<20142=20183,20143
<20143=20160,20152,20144
<20144=20145
<20145=20147,20146
<20147=20149,20148
<20149=20151,20150
<20152=20153
<20153=20157,20154
<20154=20156,20155
<20157=20159,20158
<20160=20172,20161
<20161=20162
<20162=20170,20163
<20163=20164
<20164=20168,20165
<20165=20166
<20166=20167
<20168=20169
<20170=20171
<20172=20173
<20173=20177,20174
<20174=20176,20175
<20177=20179,20178
<20179=20180
<20180=20182,20181
<20183=20184
<20199=20211,20210,20200
<20200=20207,20204,20201
<20201=20203,20202
<20204=20206,20205
<20207=20209,20208
<20211=20662,20653,20641,20624,20617,20604,20595,20588,20584,20580,20475,20459,20354,20342,20333,20324,20315,20308,20272,20265,20249,20232,20219,20212
<20212=20213
<20213=20217,20214
<20214=20215
<20215=20216
<20217=20218
<20219=20220
<20220=20224,20221
<20221=20222
<20222=20223
<20224=20225
<20225=20227,20226
<20227=20229,20228
<20229=20231,20230
<20232=20233
<20233=20244,20234
<20234=20242,20235
<20235=20240,20238,20236
<20236=20237
<20238=20239
<20240=20241
<20242=20243
<20244=20246,20245
<20246=20248,20247
<20249=20261,20250
<20250=20251
<20251=20257,20252
<20252=20255,20253
<20253=20254
<20255=20256
<20257=20258
<20258=20260,20259
<20261=20262
<20262=20264,20263
<20265=20266
<20266=20268,20267
<20268=20269
<20269=20271,20270
<20272=20295,20286,20283,20273
<20273=20274
<20274=20275
<20275=20277,20276
<20277=20278
<20278=20280,20279
<20280=20282,20281
<20283=20285,20284
<20286=20287
<20287=20294,20288
<20288=20290,20289
<20290=20291
<20291=20293,20292
<20295=20296
<20296=20297
<20297=20307,20306,20298
<20298=20305,20299
<20299=20301,20300
<20301=20302
<20302=20304,20303
<20308=20309
<20309=20313,20310
<20310=20311
<20311=20312
<20313=20314
<20315=20316
<20316=20322,20317
<20317=20320,20318
<20318=20319
<20320=20321
<20322=20323
<20324=20325
<20325=20329,20326
<20326=20327
<20327=20328
<20329=20330
<20330=20332,20331
<20333=20334
<20334=20338,20335
<20335=20336
<20336=20337
<20338=20339
<20339=20341,20340
<20342=20352,20343
<20343=20344
<20344=20348,20345
<20345=20346
<20346=20347
<20348=20349
<20349=20351,20350
<20352=20353
<20354=20446,20437,20434,20355
<20355=20425,20403,20394,20387,20380,20371,20364,20356
<20356=20357
<20357=20359,20358
<20359=20361,20360
<20361=20363,20362
<20364=20365
<20365=20369,20366
<20366=20367
<20367=20368
<20369=20370
<20371=20372
<20372=20378,20373
<20373=20376,20374
<20374=20375
<20376=20377
<20378=20379
<20380=20381
<20381=20385,20382
<20382=20383
<20383=20384
<20385=20386
<20387=20388
<20388=20392,20389
<20389=20390
<20390=20391
<20392=20393
<20394=20395
<20395=20401,20396
<20396=20399,20397
<20397=20398
<20399=20400
<20401=20402
<20403=20404
<20404=20417,20405
<20405=20408,20406
<20406=20407
<20408=20409
<20409=20415,20410
<20410=20413,20411
<20411=20412
<20413=20414
<20415=20416
<20417=20418
<20418=20420,20419
<20420=20422,20421
<20422=20424,20423
<20425=20426
<20426=20430,20427
<20427=20428
<20428=20429
<20430=20431
<20431=20433,20432
<20434=20436,20435
<20437=20438
<20438=20445,20439
<20439=20441,20440
<20441=20442
<20442=20444,20443
<20446=20447
<20447=20448
<20448=20458,20457,20449
<20449=20456,20450
<20450=20452,20451
<20452=20453
<20453=20455,20454
<20459=20471,20460
<20460=20461
<20461=20467,20462
<20462=20465,20463
<20463=20464
<20465=20466
<20467=20468
<20468=20470,20469
<20471=20472
<20472=20474,20473
<20475=20570,20566,20563,20476
<20476=20562,20561,20560,20559,20558,20556,20534,20525,20514,20508,20495,20486,20477
<20477=20478
<20478=20484,20479
<20479=20482,20480
<20480=20481
<20482=20483
<20484=20485
<20486=20487
<20487=20491,20488
<20488=20489
<20489=20490
<20491=20492
<20492=20494,20493
<20495=20496
<20496=20505,20497
<20497=20503,20498
<20498=20501,20499
<20499=20500
<20501=20502
<20503=20504
<20505=20507,20506
<20508=20509
<20509=20511,20510
<20511=20513,20512
<20514=20515
<20515=20521,20516
<20516=20519,20517
<20517=20518
<20519=20520
<20521=20522
<20522=20524,20523
<20525=20526
<20526=20530,20527
<20527=20528
<20528=20529
<20530=20531
<20531=20533,20532
<20534=20535
<20535=20555,20554,20536
<20536=20553,20537
<20537=20552,20538
<20538=20551,20539
<20539=20550,20540
<20540=20542,20541
<20542=20548,20543
<20543=20546,20544
<20544=20545
<20546=20547
<20548=20549
<20556=20557
<20563=20565,20564
<20566=20567
<20567=20569,20568
<20570=20571
<20571=20572
<20572=20579,20578,20573
<20573=20577,20574
<20574=20576,20575
<20580=20581
<20581=20583,20582
<20584=20585
<20585=20587,20586
<20588=20589
<20589=20593,20590
<20590=20591
<20591=20592
<20593=20594
<20595=20596
<20596=20602,20597
<20597=20600,20598
<20598=20599
<20600=20601
<20602=20603
<20604=20605
<20605=20609,20606
<20606=20607
<20607=20608
<20609=20610
<20610=20612,20611
<20612=20614,20613
<20614=20616,20615
<20617=20618
<20618=20623,20622,20619
<20619=20621,20620
<20624=20625
<20625=20636,20626
<20626=20634,20627
<20627=20632,20630,20628
<20628=20629
<20630=20631
<20632=20633
<20634=20635
<20636=20638,20637
<20638=20640,20639
<20641=20651,20642
<20642=20643
<20643=20647,20644
<20644=20645
<20645=20646
<20647=20648
<20648=20650,20649
<20651=20652
<20653=20654
<20654=20658,20655
<20655=20656
<20656=20657
<20658=20659
<20659=20661,20660
<20662=20663
<20663=20667,20664
<20664=20665
<20665=20666
<20667=20668
<20706=20709,20708,20707
<20709=20716,20710
<20710=20711
<20711=20713,20712
<20713=20715,20714
<20716=20717
<20725=20728,20727,20726
<20728=20729
<20729=20730
<20730=20750,20731
<20731=20742,20732
<20732=20741,20733
<20733=20735,20734
<20735=20736
<20736=20738,20737
<20738=20740,20739
<20742=20744,20743
<20744=20745
<20745=20747,20746
<20747=20749,20748
<20750=20752,20751
<20752=20753
<20753=20755,20754
<20765=20768,20767,20766
<20768=20769
<20769=20770
<20775=20784,20783,20776
<20776=20780,20777
<20777=20779,20778
<20780=20782,20781
<20784=20909,20905,20898,20858,20851,20843,20821,20815,20811,20785
<20785=20801,20786
<20786=20787
<20787=20799,20788
<20788=20789
<20789=20791,20790
<20791=20792
<20792=20794,20793
<20794=20796,20795
<20796=20798,20797
<20799=20800
<20801=20802
<20802=20808,20803
<20803=20805,20804
<20805=20807,20806
<20808=20810,20809
<20811=20812
<20812=20814,20813
<20815=20817,20816
<20817=20818
<20818=20820,20819
<20821=20839,20830,20822
<20822=20823
<20823=20824
<20824=20828,20825
<20825=20826
<20826=20827
<20828=20829
<20830=20831
<20831=20835,20832
<20832=20833
<20833=20834
<20835=20836
<20836=20838,20837
<20839=20840
<20840=20842,20841
<20843=20849,20844
<20844=20845
<20845=20846
<20846=20848,20847
<20849=20850
<20851=20852
<20852=20854,20853
<20854=20855
<20855=20857,20856
<20858=20888,20859
<20859=20875,20860
<20860=20873,20861
<20861=20862
<20862=20863
<20863=20865,20864
<20865=20866
<20866=20868,20867
<20868=20870,20869
<20870=20872,20871
<20873=20874
<20875=20876
<20876=20887,20877
<20877=20879,20878
<20879=20880
<20880=20882,20881
<20882=20884,20883
<20884=20886,20885
<20888=20889
<20889=20895,20890
<20890=20892,20891
<20892=20894,20893
<20895=20897,20896
<20898=20899
<20899=20904,20903,20900
<20900=20902,20901
<20905=20906
<20906=20908,20907
<20909=20910
<20910=20912,20911
<20934=20943,20942,20935
<20935=20939,20936
<20936=20938,20937
<20939=20941,20940
<20943=20984,20944
<20944=20976,20945
<20945=20946
<20946=20971,20947
<20947=20948
<20948=20966,20958,20949
<20949=20950
<20950=20951
<20951=20952
<20952=20956,20953
<20953=20954
<20954=20955
<20956=20957
<20958=20959
<20959=20960
<20960=20964,20961
<20961=20962
<20962=20963
<20964=20965
<20966=20967
<20967=20969,20968
<20969=20970
<20971=20972
<20972=20974,20973
<20974=20975
<20976=20977
<20977=20981,20978
<20978=20980,20979
<20981=20983,20982
<20984=20985
<20985=20991,20986
<20986=20989,20987
<20987=20988
<20989=20990
<20991=20992
<21003=21006,21005,21004
<21006=21205,21190,21175,21158,21140,21122,21061,21043,21025,21007
<21007=21008
<21008=21023,21009
<21009=21014,21012,21010
<21010=21011
<21012=21013
<21014=21015
<21015=21021,21016
<21016=21019,21017
<21017=21018
<21019=21020
<21021=21022
<21023=21024
<21025=21026
<21026=21041,21027
<21027=21032,21030,21028
<21028=21029
<21030=21031
<21032=21033
<21033=21039,21034
<21034=21037,21035
<21035=21036
<21037=21038
<21039=21040
<21041=21042
<21043=21044
<21044=21059,21045
<21045=21050,21048,21046
<21046=21047
<21048=21049
<21050=21051
<21051=21057,21052
<21052=21055,21053
<21053=21054
<21055=21056
<21057=21058
<21059=21060
<21061=21117,21062
<21062=21099,21081,21063
<21063=21064
<21064=21079,21065
<21065=21070,21068,21066
<21066=21067
<21068=21069
<21070=21071
<21071=21077,21072
<21072=21075,21073
<21073=21074
<21075=21076
<21077=21078
<21079=21080
<21081=21082
<21082=21097,21083
<21083=21088,21086,21084
<21084=21085
<21086=21087
<21088=21089
<21089=21095,21090
<21090=21093,21091
<21091=21092
<21093=21094
<21095=21096
<21097=21098
<21099=21100
<21100=21115,21101
<21101=21106,21104,21102
<21102=21103
<21104=21105
<21106=21107
<21107=21113,21108
<21108=21111,21109
<21109=21110
<21111=21112
<21113=21114
<21115=21116
<21117=21118
<21118=21120,21119
<21120=21121
<21122=21123
<21123=21138,21124
<21124=21129,21127,21125
<21125=21126
<21127=21128
<21129=21130
<21130=21136,21131
<21131=21134,21132
<21132=21133
<21134=21135
<21136=21137
<21138=21139
<21140=21141
<21141=21156,21142
<21142=21147,21145,21143
<21143=21144
<21145=21146
<21147=21148
<21148=21154,21149
<21149=21152,21150
<21150=21151
<21152=21153
<21154=21155
<21156=21157
<21158=21159
<21159=21167,21160
<21160=21165,21163,21161
<21161=21162
<21163=21164
<21165=21166
<21167=21168
<21168=21170,21169
<21170=21172,21171
<21172=21174,21173
<21175=21176
<21176=21189,21177
<21177=21181,21178
<21178=21179
<21179=21180
<21181=21182
<21182=21184,21183
<21184=21186,21185
<21186=21188,21187
<21190=21191
<21191=21204,21192
<21192=21196,21193
<21193=21194
<21194=21195
<21196=21197
<21197=21199,21198
<21199=21201,21200
<21201=21203,21202
<21205=21206
<21206=21208,21207
<21208=21209
<21237=21240,21239,21238
<21240=21248,21241
<21241=21242
<21242=21246,21243
<21243=21244
<21244=21245
<21246=21247
<21248=21249
<21249=21253,21250
<21250=21251
<21251=21252
<21253=21254
<21262=21268,21267,21263
<21263=21264
<21264=21266,21265
<21268=23155,23146,23141,23106,23074,23054,23035,23026,23019,23010,22931,22846,22712,22641,22634,22623,22597,21618,21498,21426,21425,21418,21417,21410,21394,21390,21386,21385,21378,21366,21362,21291,21284,21279,21274,21269
<21269=21270
<21270=21272,21271
<21272=21273
<21274=21275
<21275=21277,21276
<21277=21278
<21279=21280
<21280=21282,21281
<21282=21283
<21284=21285
<21285=21289,21286
<21286=21287
<21287=21288
<21289=21290
<21291=21329,21311,21292
<21292=21293
<21293=21294
<21294=21307,21295
<21295=21300,21296
<21296=21297
<21297=21299,21298
<21300=21301
<21301=21305,21302
<21302=21303
<21303=21304
<21305=21306
<21307=21308
<21308=21310,21309
<21311=21312
<21312=21325,21313
<21313=21318,21314
<21314=21315
<21315=21317,21316
<21318=21319
<21319=21323,21320
<21320=21321
<21321=21322
<21323=21324
<21325=21326
<21326=21328,21327
<21329=21330
<21330=21361,21331
<21331=21358,21332
<21332=21350,21333
<21333=21342,21334
<21334=21341,21335
<21335=21337,21336
<21337=21338
<21338=21340,21339
<21342=21349,21343
<21343=21345,21344
<21345=21346
<21346=21348,21347
<21350=21352,21351
<21352=21353
<21353=21355,21354
<21355=21357,21356
<21358=21360,21359
<21362=21363
<21363=21365,21364
<21366=21374,21367
<21367=21368
<21368=21369
<21369=21373,21370
<21370=21372,21371
<21374=21375
<21375=21377,21376
<21378=21379
<21379=21384,21383,21380
<21380=21382,21381
<21386=21387
<21387=21389,21388
<21390=21391
<21391=21393,21392
<21394=21402,21395
<21395=21396
<21396=21397
<21397=21401,21398
<21398=21400,21399
<21402=21403
<21403=21407,21404
<21404=21406,21405
<21407=21409,21408
<21410=21411
<21411=21416,21415,21412
<21412=21414,21413
<21418=21419
<21419=21424,21423,21420
<21420=21422,21421
<21426=21494,21427
<21427=21490,21428
<21428=21486,21470,21429
<21429=21430
<21430=21431
<21431=21432
<21432=21469,21433
<21433=21467,21434
<21434=21451,21435
<21435=21436
<21436=21440,21437
<21437=21439,21438
<21440=21447,21441
<21441=21445,21442
<21442=21443
<21443=21444
<21445=21446
<21447=21449,21448
<21449=21450
<21451=21452
<21452=21456,21453
<21453=21455,21454
<21456=21463,21457
<21457=21461,21458
<21458=21459
<21459=21460
<21461=21462
<21463=21465,21464
<21465=21466
<21467=21468
<21470=21482,21471
<21471=21472
<21472=21481,21473
<21473=21479,21474
<21474=21477,21475
<21475=21476
<21477=21478
<21479=21480
<21482=21483
<21483=21485,21484
<21486=21487
<21487=21489,21488
<21490=21491
<21491=21493,21492
<21494=21495
<21495=21497,21496
<21498=21603,21499
<21499=21599,21570,21556,21546,21533,21525,21514,21500
<21500=21501
<21501=21510,21502
<21502=21503
<21503=21504
<21504=21506,21505
<21506=21507
<21507=21509,21508
<21510=21511
<21511=21513,21512
<21514=21515
<21515=21524,21516
<21516=21523,21517
<21517=21519,21518
<21519=21520
<21520=21522,21521
<21525=21526
<21526=21532,21527
<21527=21531,21528
<21528=21530,21529
<21533=21534
<21534=21545,21535
<21535=21544,21536
<21536=21538,21537
<21538=21539
<21539=21541,21540
<21541=21543,21542
<21546=21547
<21547=21555,21548
<21548=21554,21549
<21549=21551,21550
<21551=21553,21552
<21556=21557
<21557=21569,21558
<21558=21568,21559
<21559=21565,21560
<21560=21564,21561
<21561=21563,21562
<21565=21567,21566
<21570=21571
<21571=21598,21572
<21572=21597,21573
<21573=21594,21574
<21574=21593,21575
<21575=21590,21576
<21576=21589,21577
<21577=21588,21578
<21578=21587,21579
<21579=21581,21580
<21581=21582
<21582=21584,21583
<21584=21586,21585
<21590=21592,21591
<21594=21596,21595
<21599=21600
<21600=21602,21601
<21603=21604
<21604=21614,21605
<21605=21613,21606
<21606=21612,21607
<21607=21609,21608
<21609=21611,21610
<21614=21616,21615
<21616=21617
<21618=22582,21619
<21619=22578,21981,21968,21960,21956,21944,21900,21876,21850,21828,21806,21784,21763,21756,21739,21727,21714,21693,21675,21649,21634,21620
<21620=21621
<21621=21630,21622
<21622=21623
<21623=21624
<21624=21626,21625
<21626=21627
<21627=21629,21628
<21630=21631
<21631=21633,21632
<21634=21635
<21635=21648,21636
<21636=21647,21637
<21637=21641,21638
<21638=21640,21639
<21641=21643,21642
<21643=21644
<21644=21646,21645
<21649=21650
<21650=21674,21651
<21651=21673,21652
<21652=21665,21653
<21653=21664,21654
<21654=21656,21655
<21656=21658,21657
<21658=21659
<21659=21661,21660
<21661=21663,21662
<21665=21667,21666
<21667=21668
<21668=21670,21669
<21670=21672,21671
<21675=21676
<21676=21692,21677
<21677=21687,21678
<21678=21686,21679
<21679=21681,21680
<21681=21683,21682
<21683=21685,21684
<21687=21689,21688
<21689=21691,21690
<21693=21694
<21694=21713,21695
<21695=21712,21696
<21696=21707,21697
<21697=21706,21698
<21698=21700,21699
<21700=21702,21701
<21702=21703
<21703=21705,21704
<21707=21709,21708
<21709=21711,21710
<21714=21715
<21715=21726,21716
<21716=21718,21717
<21718=21720,21719
<21720=21721
<21721=21723,21722
<21723=21725,21724
<21727=21728
<21728=21738,21729
<21729=21737,21730
<21730=21736,21731
<21731=21735,21732
<21732=21734,21733
<21739=21740
<21740=21750,21741
<21741=21746,21742
<21742=21743
<21743=21745,21744
<21746=21747
<21747=21749,21748
<21750=21751
<21751=21753,21752
<21753=21755,21754
<21756=21760,21757
<21757=21759,21758
<21760=21762,21761
<21763=21764
<21764=21783,21765
<21765=21782,21766
<21766=21774,21767
<21767=21773,21768
<21768=21770,21769
<21770=21772,21771
<21774=21776,21775
<21776=21777
<21777=21779,21778
<21779=21781,21780
<21784=21785
<21785=21805,21786
<21786=21804,21787
<21787=21798,21788
<21788=21797,21789
<21789=21791,21790
<21791=21793,21792
<21793=21794
<21794=21796,21795
<21798=21800,21799
<21800=21801
<21801=21803,21802
<21806=21807
<21807=21827,21808
<21808=21826,21809
<21809=21821,21810
<21810=21820,21811
<21811=21815,21812
<21812=21814,21813
<21815=21817,21816
<21817=21819,21818
<21821=21823,21822
<21823=21825,21824
<21828=21829
<21829=21849,21830
<21830=21848,21831
<21831=21842,21832
<21832=21841,21833
<21833=21835,21834
<21835=21837,21836
<21837=21838
<21838=21840,21839
<21842=21844,21843
<21844=21845
<21845=21847,21846
<21850=21851
<21851=21875,21852
<21852=21874,21853
<21853=21866,21854
<21854=21865,21855
<21855=21857,21856
<21857=21861,21858
<21858=21859
<21859=21860
<21861=21862
<21862=21864,21863
<21866=21870,21867
<21867=21868
<21868=21869
<21870=21871
<21871=21873,21872
<21876=21877
<21877=21899,21878
<21878=21898,21879
<21879=21891,21880
<21880=21890,21881
<21881=21883,21882
<21883=21885,21884
<21885=21887,21886
<21887=21889,21888
<21891=21893,21892
<21893=21895,21894
<21895=21897,21896
<21900=21901
<21901=21943,21902
<21902=21942,21903
<21903=21935,21904
<21904=21934,21905
<21905=21927,21906
<21906=21926,21907
<21907=21919,21908
<21908=21918,21909
<21909=21911,21910
<21911=21913,21912
<21913=21915,21914
<21915=21917,21916
<21919=21921,21920
<21921=21923,21922
<21923=21925,21924
<21927=21929,21928
<21929=21931,21930
<21931=21933,21932
<21935=21937,21936
<21937=21939,21938
<21939=21941,21940
<21944=21945
<21945=21955,21946
<21946=21954,21947
<21947=21949,21948
<21949=21951,21950
<21951=21953,21952
<21956=21957
<21957=21959,21958
<21960=21961
<21961=21967,21962
<21962=21966,21963
<21963=21965,21964
<21968=21969
<21969=21980,21970
<21970=21979,21971
<21971=21973,21972
<21973=21975,21974
<21975=21976
<21976=21978,21977
<21981=22572,21982
<21982=22561,22534,22514,22490,22461,22442,22410,22396,22382,22378,22367,22359,22355,22335,22315,22311,22291,22259,22246,22220,22204,22191,22181,22156,22140,22136,22116,22112,22092,22079,22075,22045,22030,22015,22000,21983
<21983=21984
<21984=21999,21985
<21985=21998,21986
<21986=21988,21987
<21988=21990,21989
<21990=21991
<21991=21993,21992
<21993=21995,21994
<21995=21997,21996
<22000=22001
<22001=22014,22002
<22002=22013,22003
<22003=22005,22004
<22005=22006
<22006=22008,22007
<22008=22010,22009
<22010=22012,22011
<22015=22016
<22016=22029,22017
<22017=22028,22018
<22018=22020,22019
<22020=22021
<22021=22023,22022
<22023=22025,22024
<22025=22027,22026
<22030=22031
<22031=22044,22032
<22032=22043,22033
<22033=22035,22034
<22035=22036
<22036=22038,22037
<22038=22040,22039
<22040=22042,22041
<22045=22046
<22046=22074,22047
<22047=22073,22048
<22048=22063,22049
<22049=22062,22050
<22050=22052,22051
<22052=22054,22053
<22054=22055
<22055=22057,22056
<22057=22059,22058
<22059=22061,22060
<22063=22065,22064
<22065=22066
<22066=22068,22067
<22068=22070,22069
<22070=22072,22071
<22075=22076
<22076=22078,22077
<22079=22090,22080
<22080=22081
<22081=22089,22082
<22082=22088,22083
<22083=22085,22084
<22085=22087,22086
<22090=22091
<22092=22093
<22093=22111,22110,22094
<22094=22109,22095
<22095=22099,22096
<22096=22097
<22097=22098
<22099=22100
<22100=22102,22101
<22102=22104,22103
<22104=22106,22105
<22106=22108,22107
<22112=22113
<22113=22115,22114
<22116=22132,22117
<22117=22130,22126,22125,22123,22119,22118
<22119=22120
<22120=22122,22121
<22123=22124
<22126=22127
<22127=22129,22128
<22130=22131
<22132=22133
<22133=22135,22134
<22136=22137
<22137=22139,22138
<22140=22141
<22141=22155,22142
<22142=22154,22143
<22143=22145,22144
<22145=22147,22146
<22147=22149,22148
<22149=22151,22150
<22151=22153,22152
<22156=22157
<22157=22180,22158
<22158=22179,22159
<22159=22172,22160
<22160=22171,22161
<22161=22163,22162
<22163=22164
<22164=22166,22165
<22166=22168,22167
<22168=22170,22169
<22172=22174,22173
<22174=22176,22175
<22176=22178,22177
<22181=22182
<22182=22190,22183
<22183=22189,22184
<22184=22186,22185
<22186=22188,22187
<22191=22192
<22192=22203,22193
<22193=22202,22194
<22194=22196,22195
<22196=22198,22197
<22198=22199
<22199=22201,22200
<22204=22205
<22205=22219,22206
<22206=22218,22207
<22207=22215,22208
<22208=22214,22209
<22209=22211,22210
<22211=22213,22212
<22215=22217,22216
<22220=22221
<22221=22245,22222
<22222=22244,22223
<22223=22239,22224
<22224=22238,22225
<22225=22233,22226
<22226=22232,22227
<22227=22229,22228
<22229=22231,22230
<22233=22235,22234
<22235=22237,22236
<22239=22241,22240
<22241=22243,22242
<22246=22247
<22247=22258,22248
<22248=22257,22249
<22249=22251,22250
<22251=22253,22252
<22253=22254
<22254=22256,22255
<22259=22260
<22260=22290,22261
<22261=22289,22262
<22262=22279,22263
<22263=22278,22264
<22264=22268,22265
<22265=22267,22266
<22268=22276,22269
<22269=22270
<22270=22271
<22271=22273,22272
<22273=22275,22274
<22276=22277
<22279=22287,22280
<22280=22281
<22281=22282
<22282=22284,22283
<22284=22286,22285
<22287=22288
<22291=22292
<22292=22310,22293
<22293=22309,22294
<22294=22304,22295
<22295=22303,22296
<22296=22298,22297
<22298=22300,22299
<22300=22302,22301
<22304=22306,22305
<22306=22308,22307
<22311=22312
<22312=22314,22313
<22315=22316
<22316=22334,22317
<22317=22333,22318
<22318=22328,22319
<22319=22327,22320
<22320=22322,22321
<22322=22324,22323
<22324=22326,22325
<22328=22330,22329
<22330=22332,22331
<22335=22336
<22336=22354,22337
<22337=22353,22338
<22338=22348,22339
<22339=22347,22340
<22340=22342,22341
<22342=22344,22343
<22344=22346,22345
<22348=22350,22349
<22350=22352,22351
<22355=22356
<22356=22358,22357
<22359=22360
<22360=22366,22361
<22361=22365,22362
<22362=22364,22363
<22367=22368
<22368=22377,22369
<22369=22376,22370
<22370=22372,22371
<22372=22373
<22373=22375,22374
<22378=22379
<22379=22381,22380
<22382=22383
<22383=22395,22384
<22384=22394,22385
<22385=22387,22386
<22387=22389,22388
<22389=22391,22390
<22391=22393,22392
<22396=22397
<22397=22409,22398
<22398=22408,22399
<22399=22401,22400
<22401=22403,22402
<22403=22405,22404
<22405=22407,22406
<22410=22411
<22411=22441,22412
<22412=22440,22413
<22413=22430,22414
<22414=22429,22415
<22415=22417,22416
<22417=22419,22418
<22419=22420
<22420=22422,22421
<22422=22424,22423
<22424=22426,22425
<22426=22428,22427
<22430=22432,22431
<22432=22433
<22433=22435,22434
<22435=22437,22436
<22437=22439,22438
<22442=22443
<22443=22460,22444
<22444=22459,22445
<22445=22447,22446
<22447=22449,22448
<22449=22450
<22450=22452,22451
<22452=22454,22453
<22454=22456,22455
<22456=22458,22457
<22461=22462
<22462=22489,22463
<22463=22488,22464
<22464=22481,22465
<22465=22480,22466
<22466=22468,22467
<22468=22470,22469
<22470=22471
<22471=22473,22472
<22473=22475,22474
<22475=22477,22476
<22477=22479,22478
<22481=22483,22482
<22483=22485,22484
<22485=22487,22486
<22490=22491
<22491=22513,22492
<22492=22512,22493
<22493=22505,22494
<22494=22504,22495
<22495=22497,22496
<22497=22499,22498
<22499=22501,22500
<22501=22503,22502
<22505=22507,22506
<22507=22509,22508
<22509=22511,22510
<22514=22515
<22515=22533,22516
<22516=22532,22517
<22517=22525,22518
<22518=22524,22519
<22519=22521,22520
<22521=22523,22522
<22525=22527,22526
<22527=22529,22528
<22529=22531,22530
<22534=22535
<22535=22560,22536
<22536=22559,22537
<22537=22549,22538
<22538=22548,22539
<22539=22541,22540
<22541=22543,22542
<22543=22545,22544
<22545=22547,22546
<22549=22551,22550
<22551=22552
<22552=22554,22553
<22554=22556,22555
<22556=22558,22557
<22561=22562
<22562=22571,22570,22563
<22563=22569,22564
<22564=22566,22565
<22566=22568,22567
<22572=22573
<22573=22575,22574
<22575=22577,22576
<22578=22579
<22579=22581,22580
<22582=22583
<22583=22593,22584
<22584=22592,22585
<22585=22587,22586
<22587=22589,22588
<22589=22591,22590
<22593=22595,22594
<22595=22596
<22597=22608,22598
<22598=22599
<22599=22600
<22600=22604,22601
<22601=22602
<22602=22603
<22604=22605
<22605=22607,22606
<22608=22609
<22609=22618,22610
<22610=22614,22611
<22611=22612
<22612=22613
<22614=22615
<22615=22617,22616
<22618=22620,22619
<22620=22622,22621
<22623=22628,22624
<22624=22625
<22625=22627,22626
<22628=22629
<22629=22631,22630
<22631=22633,22632
<22634=22635
<22635=22640,22639,22636
<22636=22638,22637
<22641=22706,22642
<22642=22643
<22643=22654,22644
<22644=22645
<22645=22646
<22646=22650,22647
<22647=22648
<22648=22649
<22650=22651
<22651=22653,22652
<22654=22655
<22655=22694,22656
<22656=22682,22657
<22657=22670,22658
<22658=22662,22659
<22659=22660
<22660=22661
<22662=22663
<22663=22665,22664
<22665=22667,22666
<22667=22669,22668
<22670=22674,22671
<22671=22672
<22672=22673
<22674=22675
<22675=22677,22676
<22677=22679,22678
<22679=22681,22680
<22682=22686,22683
<22683=22684
<22684=22685
<22686=22687
<22687=22689,22688
<22689=22691,22690
<22691=22693,22692
<22694=22698,22695
<22695=22696
<22696=22697
<22698=22699
<22699=22701,22700
<22701=22703,22702
<22703=22705,22704
<22706=22707
<22707=22709,22708
<22709=22711,22710
<22712=22844,22713
<22713=22714
<22714=22715
<22715=22838,22780,22716
<22716=22717
<22717=22774,22718
<22718=22719
<22719=22730,22720
<22720=22721
<22721=22722
<22722=22726,22723
<22723=22724
<22724=22725
<22726=22727
<22727=22729,22728
<22730=22731
<22731=22742,22732
<22732=22741,22733
<22733=22735,22734
<22735=22736
<22736=22738,22737
<22738=22740,22739
<22742=22760,22743
<22743=22752,22744
<22744=22748,22745
<22745=22746
<22746=22747
<22748=22749
<22749=22751,22750
<22752=22756,22753
<22753=22754
<22754=22755
<22756=22757
<22757=22759,22758
<22760=22773,22761
<22761=22765,22762
<22762=22763
<22763=22764
<22765=22766
<22766=22768,22767
<22768=22770,22769
<22770=22772,22771
<22774=22775
<22775=22777,22776
<22777=22779,22778
<22780=22831,22781
<22781=22792,22782
<22782=22783
<22783=22784
<22784=22788,22785
<22785=22786
<22786=22787
<22788=22789
<22789=22791,22790
<22792=22793
<22793=22823,22794
<22794=22809,22795
<22795=22808,22796
<22796=22800,22797
<22797=22798
<22798=22799
<22800=22801
<22801=22803,22802
<22803=22805,22804
<22805=22807,22806
<22809=22822,22810
<22810=22814,22811
<22811=22812
<22812=22813
<22814=22815
<22815=22817,22816
<22817=22819,22818
<22819=22821,22820
<22823=22825,22824
<22825=22826
<22826=22828,22827
<22828=22830,22829
<22831=22832
<22832=22837,22836,22833
<22833=22835,22834
<22838=22839
<22839=22841,22840
<22841=22843,22842
<22844=22845
<22846=22929,22847
<22847=22907,22885,22848
<22848=22877,22849
<22849=22850
<22850=22873,22865,22851
<22851=22852
<22852=22861,22853
<22853=22854
<22854=22856,22855
<22856=22858,22857
<22858=22860,22859
<22861=22862
<22862=22864,22863
<22865=22866
<22866=22868,22867
<22868=22870,22869
<22870=22872,22871
<22873=22874
<22874=22876,22875
<22877=22878
<22878=22884,22879
<22879=22881,22880
<22881=22883,22882
<22885=22894,22886
<22886=22887
<22887=22889,22888
<22889=22891,22890
<22891=22893,22892
<22894=22895
<22895=22906,22896
<22896=22904,22897
<22897=22898
<22898=22899
<22899=22901,22900
<22901=22903,22902
<22904=22905
<22907=22916,22908
<22908=22909
<22909=22911,22910
<22911=22913,22912
<22913=22915,22914
<22916=22917
<22917=22928,22918
<22918=22926,22919
<22919=22920
<22920=22921
<22921=22923,22922
<22923=22925,22924
<22926=22927
<22929=22930
<22931=22999,22932
<22932=22966,22933
<22933=22942,22934
<22934=22935
<22935=22937,22936
<22937=22939,22938
<22939=22941,22940
<22942=22943
<22943=22965,22944
<22944=22955,22945
<22945=22953,22946
<22946=22947
<22947=22948
<22948=22950,22949
<22950=22952,22951
<22953=22954
<22955=22963,22956
<22956=22957
<22957=22958
<22958=22960,22959
<22960=22962,22961
<22963=22964
<22966=22975,22967
<22967=22968
<22968=22970,22969
<22970=22972,22971
<22972=22974,22973
<22975=22976
<22976=22998,22977
<22977=22988,22978
<22978=22986,22979
<22979=22980
<22980=22981
<22981=22983,22982
<22983=22985,22984
<22986=22987
<22988=22996,22989
<22989=22990
<22990=22991
<22991=22993,22992
<22993=22995,22994
<22996=22997
<22999=23000
<23000=23007,23001
<23001=23003,23002
<23003=23004
<23004=23006,23005
<23007=23009,23008
<23010=23011
<23011=23015,23012
<23012=23013
<23013=23014
<23015=23016
<23016=23018,23017
<23019=23020
<23020=23024,23021
<23021=23022
<23022=23023
<23024=23025
<23026=23027
<23027=23031,23028
<23028=23029
<23029=23030
<23031=23032
<23032=23034,23033
<23035=23050,23036
<23036=23046,23037
<23037=23042,23038
<23038=23039
<23039=23041,23040
<23042=23043
<23043=23045,23044
<23046=23047
<23047=23049,23048
<23050=23051
<23051=23053,23052
<23054=23070,23055
<23055=23066,23056
<23056=23062,23057
<23057=23058
<23058=23059
<23059=23061,23060
<23062=23063
<23063=23065,23064
<23066=23067
<23067=23069,23068
<23070=23071
<23071=23073,23072
<23074=23096,23075
<23075=23076
<23076=23077
<23077=23093,23078
<23078=23091,23079
<23079=23082,23080
<23080=23081
<23082=23083
<23083=23090,23084
<23084=23086,23085
<23086=23087
<23087=23089,23088
<23091=23092
<23093=23095,23094
<23096=23097
<23097=23105,23098
<23098=23100,23099
<23100=23102,23101
<23102=23104,23103
<23106=23130,23107
<23107=23108
<23108=23119,23109
<23109=23115,23110
<23110=23111
<23111=23113,23112
<23113=23114
<23115=23116
<23116=23118,23117
<23119=23120
<23120=23124,23121
<23121=23122
<23122=23123
<23124=23125
<23125=23127,23126
<23127=23129,23128
<23130=23131
<23131=23138,23132
<23132=23137,23133
<23133=23135,23134
<23135=23136
<23138=23140,23139
<23141=23142
<23142=23144,23143
<23144=23145
<23146=23147
<23147=23151,23148
<23148=23149
<23149=23150
<23151=23152
<23152=23154,23153
<23155=23344,23299,23156
<23156=23157
<23157=23158
<23158=23294,23159
<23159=23287,23278,23176,23169,23160
<23160=23161
<23161=23163,23162
<23163=23164
<23164=23166,23165
<23166=23168,23167
<23169=23170
<23170=23172,23171
<23172=23173
<23173=23175,23174
<23176=23273,23177
<23177=23268,23261,23247,23242,23237,23232,23178
<23178=23221,23179
<23179=23217,23211,23202,23193,23188,23181,23180
<23181=23182
<23182=23184,23183
<23184=23185
<23185=23187,23186
<23188=23189
<23189=23191,23190
<23191=23192
<23193=23194
<23194=23198,23195
<23195=23196
<23196=23197
<23198=23199
<23199=23201,23200
<23202=23203
<23203=23210,23204
<23204=23206,23205
<23206=23207
<23207=23209,23208
<23211=23212
<23212=23214,23213
<23214=23216,23215
<23217=23218
<23218=23220,23219
<23221=23222
<23222=23231,23223
<23223=23227,23224
<23224=23225
<23225=23226
<23227=23228
<23228=23230,23229
<23232=23233
<23233=23235,23234
<23235=23236
<23237=23238
<23238=23240,23239
<23240=23241
<23242=23243
<23243=23245,23244
<23245=23246
<23247=23248
<23248=23259,23249
<23249=23250
<23250=23251
<23251=23257,23252
<23252=23253
<23253=23254
<23254=23256,23255
<23257=23258
<23259=23260
<23261=23262
<23262=23266,23263
<23263=23264
<23264=23265
<23266=23267
<23268=23269
<23269=23271,23270
<23271=23272
<23273=23274
<23274=23276,23275
<23276=23277
<23278=23279
<23279=23286,23285,23280
<23280=23284,23281
<23281=23283,23282
<23287=23288
<23288=23290,23289
<23290=23291
<23291=23293,23292
<23294=23295
<23295=23297,23296
<23297=23298
<23299=23300
<23300=23337,23310,23301
<23301=23302
<23302=23303
<23303=23304
<23304=23306,23305
<23306=23307
<23307=23309,23308
<23310=23330,23326,23320,23311
<23311=23312
<23312=23316,23313
<23313=23314
<23314=23315
<23316=23317
<23317=23319,23318
<23320=23321
<23321=23323,23322
<23323=23325,23324
<23326=23327
<23327=23329,23328
<23330=23331
<23331=23335,23332
<23332=23333
<23333=23334
<23335=23336
<23337=23338
<23338=23343,23339
<23339=23341,23340
<23341=23342
<23344=23345
<23345=23347,23346
<23347=23348
<23516=23519,23518,23517
<23523=23532,23531,23524
<23524=23528,23525
<23525=23527,23526
<23528=23530,23529
<23532=23541,23537,23533
<23533=23534
<23534=23536,23535
<23537=23538
<23538=23540,23539
<23541=23542
<23542=23551,23543
<23543=23549,23544
<23544=23547,23545
<23545=23546
<23547=23548
<23549=23550
<23561=23564,23563,23562
<23564=23565
<23565=23566
<23566=23568,23567
<23573=23576,23575,23574
<23576=23577
<23577=23585,23582,23578
<23578=23579
<23579=23580
<23580=23581
<23582=23583
<23583=23584
<23585=23586
<23586=23588,23587
<23595=23601,23600,23596
<23596=23597
<23597=23599,23598
<23601=23602
<23602=23603
<23603=23607,23604
<23604=23605
<23605=23606
<23607=23608
<23608=23610,23609
<23616=23625,23624,23617
<23617=23621,23618
<23618=23620,23619
<23621=23623,23622
<23625=23626
<23626=23642,23627
<23627=23628
<23628=23636,23629
<23629=23634,23632,23630
<23630=23631
<23632=23633
<23634=23635
<23636=23637
<23637=23639,23638
<23639=23641,23640
<23642=23643
<23652=23661,23660,23653
<23653=23657,23654
<23654=23656,23655
<23657=23659,23658
<23661=23712,23705,23694,23662
<23662=23690,23677,23663
<23663=23664
<23664=23665
<23665=23671,23666
<23666=23669,23667
<23667=23668
<23669=23670
<23671=23672
<23672=23674,23673
<23674=23676,23675
<23677=23678
<23678=23684,23679
<23679=23682,23680
<23680=23681
<23682=23683
<23684=23685
<23685=23687,23686
<23687=23689,23688
<23690=23691
<23691=23693,23692
<23694=23699,23695
<23695=23696
<23696=23698,23697
<23699=23700
<23700=23704,23701
<23701=23703,23702
<23705=23706
<23706=23711,23710,23707
<23707=23709,23708
<23712=23714,23713
<23714=23715
<23715=23717,23716
<23727=23739,23738,23728
<23728=23735,23732,23729
<23729=23731,23730
<23732=23734,23733
<23735=23737,23736
<23739=23740
<23740=24602,23741
<23741=24600,24154,24153,24151,23789,23788,23786,23743,23742
<23743=23782,23744
<23744=23745
<23745=23776,23746
<23746=23747
<23747=23748
<23748=23760,23749
<23749=23757,23750
<23750=23756,23751
<23751=23755,23752
<23752=23754,23753
<23757=23759,23758
<23760=23774,23761
<23761=23768,23762
<23762=23763
<23763=23765,23764
<23765=23767,23766
<23768=23769
<23769=23771,23770
<23771=23773,23772
<23774=23775
<23776=23777
<23777=23779,23778
<23779=23781,23780
<23782=23783
<23783=23785,23784
<23786=23787
<23789=24144,23954,23950,23790
<23790=23949,23948,23947,23946,23945,23943,23937,23924,23904,23895,23878,23861,23844,23833,23824,23815,23802,23791
<23791=23792
<23792=23798,23793
<23793=23796,23794
<23794=23795
<23796=23797
<23798=23799
<23799=23801,23800
<23802=23803
<23803=23810,23804
<23804=23806,23805
<23806=23808,23807
<23808=23809
<23810=23812,23811
<23812=23814,23813
<23815=23816
<23816=23820,23817
<23817=23818
<23818=23819
<23820=23821
<23821=23823,23822
<23824=23825
<23825=23829,23826
<23826=23827
<23827=23828
<23829=23830
<23830=23832,23831
<23833=23834
<23834=23838,23835
<23835=23836
<23836=23837
<23838=23839
<23839=23841,23840
<23841=23843,23842
<23844=23845
<23845=23851,23846
<23846=23849,23847
<23847=23848
<23849=23850
<23851=23852
<23852=23854,23853
<23854=23856,23855
<23856=23858,23857
<23858=23860,23859
<23861=23862
<23862=23868,23863
<23863=23866,23864
<23864=23865
<23866=23867
<23868=23869
<23869=23871,23870
<23871=23873,23872
<23873=23875,23874
<23875=23877,23876
<23878=23879
<23879=23885,23880
<23880=23883,23881
<23881=23882
<23883=23884
<23885=23886
<23886=23888,23887
<23888=23890,23889
<23890=23892,23891
<23892=23894,23893
<23895=23896
<23896=23898,23897
<23898=23899
<23899=23901,23900
<23901=23903,23902
<23904=23905
<23905=23918,23906
<23906=23909,23907
<23907=23908
<23909=23910
<23910=23916,23911
<23911=23914,23912
<23912=23913
<23914=23915
<23916=23917
<23918=23919
<23919=23921,23920
<23921=23923,23922
<23924=23925
<23925=23934,23926
<23926=23932,23927
<23927=23930,23928
<23928=23929
<23930=23931
<23932=23933
<23934=23936,23935
<23937=23938
<23938=23940,23939
<23940=23942,23941
<23943=23944
<23950=23951
<23951=23953,23952
<23954=24143,24142,24141,24140,24139,24137,24131,24118,24098,24089,24072,24055,24038,24027,24018,24005,23996,23966,23955
<23955=23956
<23956=23962,23957
<23957=23960,23958
<23958=23959
<23960=23961
<23962=23963
<23963=23965,23964
<23966=23967
<23967=23990,23968
<23968=23973,23969
<23969=23970
<23970=23972,23971
<23973=23974
<23974=23988,23975
<23975=23986,23984,23976
<23976=23977
<23977=23979,23978
<23979=23981,23980
<23981=23983,23982
<23984=23985
<23986=23987
<23988=23989
<23990=23991
<23991=23993,23992
<23993=23995,23994
<23996=23997
<23997=24001,23998
<23998=23999
<23999=24000
<24001=24002
<24002=24004,24003
<24005=24006
<24006=24013,24007
<24007=24009,24008
<24009=24011,24010
<24011=24012
<24013=24015,24014
<24015=24017,24016
<24018=24019
<24019=24023,24020
<24020=24021
<24021=24022
<24023=24024
<24024=24026,24025
<24027=24028
<24028=24032,24029
<24029=24030
<24030=24031
<24032=24033
<24033=24035,24034
<24035=24037,24036
<24038=24039
<24039=24045,24040
<24040=24043,24041
<24041=24042
<24043=24044
<24045=24046
<24046=24048,24047
<24048=24050,24049
<24050=24052,24051
<24052=24054,24053
<24055=24056
<24056=24062,24057
<24057=24060,24058
<24058=24059
<24060=24061
<24062=24063
<24063=24065,24064
<24065=24067,24066
<24067=24069,24068
<24069=24071,24070
<24072=24073
<24073=24079,24074
<24074=24077,24075
<24075=24076
<24077=24078
<24079=24080
<24080=24082,24081
<24082=24084,24083
<24084=24086,24085
<24086=24088,24087
<24089=24090
<24090=24092,24091
<24092=24093
<24093=24095,24094
<24095=24097,24096
<24098=24099
<24099=24112,24100
<24100=24103,24101
<24101=24102
<24103=24104
<24104=24110,24105
<24105=24108,24106
<24106=24107
<24108=24109
<24110=24111
<24112=24113
<24113=24115,24114
<24115=24117,24116
<24118=24119
<24119=24128,24120
<24120=24126,24121
<24121=24124,24122
<24122=24123
<24124=24125
<24126=24127
<24128=24130,24129
<24131=24132
<24132=24134,24133
<24134=24136,24135
<24137=24138
<24144=24145
<24145=24150,24149,24146
<24146=24148,24147
<24151=24152
<24154=24589,24582,24581,24580,24579,24578,24577,24575,24569,24556,24536,24527,24510,24493,24476,24459,24448,24439,24430,24417,24406,24349,24345,24155
<24155=24344,24343,24342,24341,24340,24338,24332,24319,24299,24290,24273,24256,24239,24222,24211,24202,24193,24180,24167,24156
<24156=24157
<24157=24163,24158
<24158=24161,24159
<24159=24160
<24161=24162
<24163=24164
<24164=24166,24165
<24167=24168
<24168=24175,24169
<24169=24171,24170
<24171=24173,24172
<24173=24174
<24175=24177,24176
<24177=24179,24178
<24180=24191,24181
<24181=24182
<24182=24188,24183
<24183=24187,24184
<24184=24186,24185
<24188=24190,24189
<24191=24192
<24193=24194
<24194=24198,24195
<24195=24196
<24196=24197
<24198=24199
<24199=24201,24200
<24202=24203
<24203=24207,24204
<24204=24205
<24205=24206
<24207=24208
<24208=24210,24209
<24211=24212
<24212=24216,24213
<24213=24214
<24214=24215
<24216=24217
<24217=24219,24218
<24219=24221,24220
<24222=24223
<24223=24229,24224
<24224=24227,24225
<24225=24226
<24227=24228
<24229=24230
<24230=24232,24231
<24232=24234,24233
<24234=24236,24235
<24236=24238,24237
<24239=24240
<24240=24246,24241
<24241=24244,24242
<24242=24243
<24244=24245
<24246=24247
<24247=24249,24248
<24249=24251,24250
<24251=24253,24252
<24253=24255,24254
<24256=24257
<24257=24263,24258
<24258=24261,24259
<24259=24260
<24261=24262
<24263=24264
<24264=24266,24265
<24266=24268,24267
<24268=24270,24269
<24270=24272,24271
<24273=24274
<24274=24280,24275
<24275=24278,24276
<24276=24277
<24278=24279
<24280=24281
<24281=24283,24282
<24283=24285,24284
<24285=24287,24286
<24287=24289,24288
<24290=24291
<24291=24293,24292
<24293=24294
<24294=24296,24295
<24296=24298,24297
<24299=24300
<24300=24313,24301
<24301=24304,24302
<24302=24303
<24304=24305
<24305=24311,24306
<24306=24309,24307
<24307=24308
<24309=24310
<24311=24312
<24313=24314
<24314=24316,24315
<24316=24318,24317
<24319=24320
<24320=24329,24321
<24321=24327,24322
<24322=24325,24323
<24323=24324
<24325=24326
<24327=24328
<24329=24331,24330
<24332=24333
<24333=24335,24334
<24335=24337,24336
<24338=24339
<24345=24346
<24346=24348,24347
<24349=24395,24350
<24350=24391,24351
<24351=24352
<24352=24385,24353
<24353=24354
<24354=24355
<24355=24369,24356
<24356=24366,24357
<24357=24365,24358
<24358=24364,24359
<24359=24363,24360
<24360=24362,24361
<24366=24368,24367
<24369=24383,24370
<24370=24377,24371
<24371=24372
<24372=24374,24373
<24374=24376,24375
<24377=24378
<24378=24380,24379
<24380=24382,24381
<24383=24384
<24385=24386
<24386=24388,24387
<24388=24390,24389
<24391=24392
<24392=24394,24393
<24395=24396
<24396=24405,24397
<24397=24399,24398
<24399=24401,24400
<24401=24402
<24402=24404,24403
<24406=24407
<24407=24413,24408
<24408=24411,24409
<24409=24410
<24411=24412
<24413=24414
<24414=24416,24415
<24417=24428,24418
<24418=24419
<24419=24425,24420
<24420=24424,24421
<24421=24423,24422
<24425=24427,24426
<24428=24429
<24430=24431
<24431=24435,24432
<24432=24433
<24433=24434
<24435=24436
<24436=24438,24437
<24439=24440
<24440=24444,24441
<24441=24442
<24442=24443
<24444=24445
<24445=24447,24446
<24448=24449
<24449=24453,24450
<24450=24451
<24451=24452
<24453=24454
<24454=24456,24455
<24456=24458,24457
<24459=24460
<24460=24466,24461
<24461=24464,24462
<24462=24463
<24464=24465
<24466=24467
<24467=24469,24468
<24469=24471,24470
<24471=24473,24472
<24473=24475,24474
<24476=24477
<24477=24483,24478
<24478=24481,24479
<24479=24480
<24481=24482
<24483=24484
<24484=24486,24485
<24486=24488,24487
<24488=24490,24489
<24490=24492,24491
<24493=24494
<24494=24500,24495
<24495=24498,24496
<24496=24497
<24498=24499
<24500=24501
<24501=24503,24502
<24503=24505,24504
<24505=24507,24506
<24507=24509,24508
<24510=24511
<24511=24517,24512
<24512=24515,24513
<24513=24514
<24515=24516
<24517=24518
<24518=24520,24519
<24520=24522,24521
<24522=24524,24523
<24524=24526,24525
<24527=24528
<24528=24530,24529
<24530=24531
<24531=24533,24532
<24533=24535,24534
<24536=24537
<24537=24550,24538
<24538=24541,24539
<24539=24540
<24541=24542
<24542=24548,24543
<24543=24546,24544
<24544=24545
<24546=24547
<24548=24549
<24550=24551
<24551=24553,24552
<24553=24555,24554
<24556=24557
<24557=24566,24558
<24558=24564,24559
<24559=24562,24560
<24560=24561
<24562=24563
<24564=24565
<24566=24568,24567
<24569=24570
<24570=24572,24571
<24572=24574,24573
<24575=24576
<24582=24583
<24583=24588,24587,24584
<24584=24586,24585
<24589=24590
<24590=24594,24591
<24591=24592
<24592=24593
<24594=24595
<24595=24597,24596
<24597=24599,24598
<24600=24601
<24602=24603
<24641=24647,24646,24642
<24642=24643
<24643=24645,24644
<24647=24688,24648
<24648=24676,24657,24649
<24649=24650
<24650=24651
<24651=24652
<24652=24654,24653
<24654=24656,24655
<24657=24666,24658
<24658=24659
<24659=24661,24660
<24661=24665,24662
<24662=24664,24663
<24666=24667
<24667=24673,24668
<24668=24672,24669
<24669=24671,24670
<24673=24675,24674
<24676=24677
<24677=24683,24678
<24678=24680,24679
<24680=24682,24681
<24683=24685,24684
<24685=24687,24686
<24688=24689
<24689=24693,24690
<24690=24691
<24691=24692
<24693=24694
<24694=24696,24695
<24709=24715,24714,24710
<24710=24711
<24711=24713,24712
<24715=24768,24761,24752,24746,24732,24716
<24716=24724,24717
<24717=24718
<24718=24719
<24719=24723,24720
<24720=24722,24721
<24724=24725
<24725=24727,24726
<24727=24729,24728
<24729=24731,24730
<24732=24744,24733
<24733=24738,24734
<24734=24735
<24735=24737,24736
<24738=24739
<24739=24743,24740
<24740=24742,24741
<24744=24745
<24746=24747
<24747=24751,24748
<24748=24750,24749
<24752=24753
<24753=24757,24754
<24754=24755
<24755=24756
<24757=24758
<24758=24760,24759
<24761=24766,24762
<24762=24763
<24763=24765,24764
<24766=24767
<24768=24879,24780,24769
<24769=24770
<24770=24771
<24771=24776,24772
<24772=24773
<24773=24775,24774
<24776=24777
<24777=24779,24778
<24780=24796,24781
<24781=24787,24782
<24782=24783
<24783=24785,24784
<24785=24786
<24787=24788
<24788=24792,24789
<24789=24790
<24790=24791
<24792=24793
<24793=24795,24794
<24796=24870,24852,24797
<24797=24798
<24798=24843,24825,24799
<24799=24800
<24800=24816,24812,24801
<24801=24802
<24802=24803
<24803=24808,24804
<24804=24805
<24805=24807,24806
<24808=24809
<24809=24811,24810
<24812=24813
<24813=24815,24814
<24816=24817
<24817=24821,24818
<24818=24819
<24819=24820
<24821=24822
<24822=24824,24823
<24825=24826
<24826=24836,24832,24827
<24827=24828
<24828=24829
<24829=24831,24830
<24832=24833
<24833=24835,24834
<24836=24837
<24837=24839,24838
<24839=24840
<24840=24842,24841
<24843=24844
<24844=24848,24845
<24845=24846
<24846=24847
<24848=24849
<24849=24851,24850
<24852=24853
<24853=24863,24859,24854
<24854=24855
<24855=24856
<24856=24858,24857
<24859=24860
<24860=24862,24861
<24863=24864
<24864=24866,24865
<24866=24867
<24867=24869,24868
<24870=24871
<24871=24875,24872
<24872=24873
<24873=24874
<24875=24876
<24876=24878,24877
<24879=24880
<24880=24882,24881
<24882=24883
<24908=24914,24913,24909
<24909=24910
<24910=24912,24911
<24914=24915
<24915=24949,24938,24935,24916
<24916=24917
<24917=24927,24918
<24918=24920,24919
<24920=24921
<24921=24925,24922
<24922=24923
<24923=24924
<24925=24926
<24927=24928
<24928=24930,24929
<24930=24932,24931
<24932=24934,24933
<24935=24937,24936
<24938=24939
<24939=24948,24940
<24940=24942,24941
<24942=24943
<24943=24945,24944
<24945=24947,24946
<24949=24950
<24950=24951
<24951=24956,24955,24952
<24952=24954,24953
<24969=24975,24974,24970
<24970=24971
<24971=24973,24972
<24975=25069,25064,25057,25035,25006,24999,24976
<24976=24986,24977
<24977=24978
<24978=24980,24979
<24980=24981
<24981=24983,24982
<24983=24985,24984
<24986=24987
<24987=24998,24988
<24988=24990,24989
<24990=24991
<24991=24993,24992
<24993=24995,24994
<24995=24997,24996
<24999=25000
<25000=25002,25001
<25002=25003
<25003=25005,25004
<25006=25029,25020,25017,25007
<25007=25008
<25008=25009
<25009=25015,25010
<25010=25011
<25011=25012
<25012=25014,25013
<25015=25016
<25017=25019,25018
<25020=25021
<25021=25028,25022
<25022=25024,25023
<25024=25025
<25025=25027,25026
<25029=25030
<25030=25034,25031
<25031=25033,25032
<25035=25053,25049,25046,25036
<25036=25037
<25037=25038
<25038=25044,25039
<25039=25040
<25040=25041
<25041=25043,25042
<25044=25045
<25046=25048,25047
<25049=25050
<25050=25052,25051
<25053=25054
<25054=25056,25055
<25057=25058
<25058=25063,25062,25059
<25059=25061,25060
<25064=25065
<25065=25067,25066
<25067=25068
<25069=25070
<25070=25075,25074,25071
<25071=25073,25072
<25093=25096,25095,25094
<25096=25119,25097
<25097=25111,25107,25104,25098
<25098=25099
<25099=25101,25100
<25101=25103,25102
<25104=25106,25105
<25107=25108
<25108=25110,25109
<25111=25112
<25112=25113
<25113=25118,25117,25114
<25114=25116,25115
<25119=25120
<25120=25122,25121
<25122=25123
<25123=25125,25124
<25134=25140,25139,25135
<25135=25136
<25136=25138,25137
<25140=25200,25185,25155,25149,25141
<25141=25142
<25142=25144,25143
<25144=25148,25145
<25145=25147,25146
<25149=25150
<25150=25152,25151
<25152=25154,25153
<25155=25174,25156
<25156=25157
<25157=25170,25158
<25158=25161,25159
<25159=25160
<25161=25162
<25162=25164,25163
<25164=25166,25165
<25166=25167
<25167=25169,25168
<25170=25171
<25171=25173,25172
<25174=25175
<25175=25182,25176
<25176=25178,25177
<25178=25179
<25179=25181,25180
<25182=25184,25183
<25185=25196,25190,25187,25186
<25187=25189,25188
<25190=25191
<25191=25193,25192
<25193=25195,25194
<25196=25197
<25197=25199,25198
<25200=25201
<25201=25203,25202
<25213=25219,25218,25214
<25214=25215
<25215=25217,25216
<25219=25264,25241,25220
<25220=25235,25232,25221
<25221=25222
<25222=25223
<25223=25229,25224
<25224=25228,25225
<25225=25227,25226
<25229=25231,25230
<25232=25234,25233
<25235=25236
<25236=25238,25237
<25238=25240,25239
<25241=25260,25254,25251,25242
<25242=25243
<25243=25245,25244
<25245=25246
<25246=25248,25247
<25248=25250,25249
<25251=25253,25252
<25254=25255
<25255=25257,25256
<25257=25259,25258
<25260=25261
<25261=25263,25262
<25264=25265
<25265=25267,25266
<25276=25279,25278,25277
<25279=25303,25299,25280
<25280=25295,25291,25288,25281
<25281=25282
<25282=25283
<25283=25285,25284
<25285=25287,25286
<25288=25290,25289
<25291=25292
<25292=25294,25293
<25295=25296
<25296=25298,25297
<25299=25300
<25300=25302,25301
<25303=25304
<25304=25314,25313,25305
<25305=25312,25306
<25306=25308,25307
<25308=25309
<25309=25311,25310
<25324=25327,25326,25325
<25327=25328
<25328=25329
<25329=25331,25330
<25331=25333,25332
<25333=25334
<25339=25360,25359,25340
<25340=25356,25353,25350,25347,25344,25341
<25341=25343,25342
<25344=25346,25345
<25347=25349,25348
<25350=25352,25351
<25353=25355,25354
<25356=25358,25357
<25360=25417,25389,25369,25363,25361
<25361=25362
<25363=25364
<25364=25366,25365
<25366=25368,25367
<25369=25370
<25370=25388,25387,25371
<25371=25386,25372
<25372=25382,25373
<25373=25380,25378,25376,25374
<25374=25375
<25376=25377
<25378=25379
<25380=25381
<25382=25383
<25383=25385,25384
<25389=25413,25390
<25390=25402,25393,25391
<25391=25392
<25393=25394
<25394=25398,25395
<25395=25396
<25396=25397
<25398=25399
<25399=25401,25400
<25402=25403
<25403=25412,25411,25404
<25404=25410,25405
<25405=25409,25406
<25406=25408,25407
<25413=25414
<25414=25416,25415
<25417=25420,25418
<25418=25419
<25420=25421
<25421=25423,25422
<25423=25424
<25424=25426,25425
<25446=25452,25451,25447
<25447=25448
<25448=25450,25449
<25452=25453
<25453=25454
<25454=25458,25455
<25455=25456
<25456=25457
<25458=25459
<25459=25461,25460
<25467=25473,25472,25468
<25468=25469
<25469=25471,25470
<25473=25474
<25474=25580,25475
<25475=25573,25489,25476
<25476=25485,25477
<25477=25478
<25478=25479
<25479=25481,25480
<25481=25482
<25482=25484,25483
<25485=25486
<25486=25488,25487
<25489=25565,25556,25553,25490
<25490=25542,25491
<25491=25536,25492
<25492=25530,25497,25493
<25493=25494
<25494=25496,25495
<25497=25524,25498
<25498=25518,25499
<25499=25500
<25500=25516,25501
<25501=25512,25508,25504,25502
<25502=25503
<25504=25505
<25505=25507,25506
<25508=25509
<25509=25511,25510
<25512=25513
<25513=25515,25514
<25516=25517
<25518=25519
<25519=25521,25520
<25521=25523,25522
<25524=25525
<25525=25527,25526
<25527=25529,25528
<25530=25531
<25531=25533,25532
<25533=25535,25534
<25536=25537
<25537=25539,25538
<25539=25541,25540
<25542=25543
<25543=25552,25551,25544
<25544=25550,25545
<25545=25549,25546
<25546=25548,25547
<25553=25555,25554
<25556=25557
<25557=25564,25558
<25558=25560,25559
<25560=25561
<25561=25563,25562
<25565=25566
<25566=25567
<25567=25572,25571,25568
<25568=25570,25569
<25573=25574
<25574=25579,25578,25575
<25575=25577,25576
<25580=25581
<25581=25585,25582
<25582=25584,25583
<25605=25608,25607,25606
<25608=25726,25715,25705,25692,25685,25676,25667,25658,25637,25629,25622,25615,25609
<25609=25610
<25610=25612,25611
<25612=25614,25613
<25615=25616
<25616=25618,25617
<25618=25619
<25619=25621,25620
<25622=25623
<25623=25625,25624
<25625=25626
<25626=25628,25627
<25629=25630
<25630=25632,25631
<25632=25634,25633
<25634=25636,25635
<25637=25638
<25638=25656,25639
<25639=25654,25652,25650,25648,25646,25644,25642,25640
<25640=25641
<25642=25643
<25644=25645
<25646=25647
<25648=25649
<25650=25651
<25652=25653
<25654=25655
<25656=25657
<25658=25659
<25659=25665,25660
<25660=25663,25661
<25661=25662
<25663=25664
<25665=25666
<25667=25668
<25668=25675,25669
<25669=25671,25670
<25671=25672
<25672=25674,25673
<25676=25677
<25677=25684,25678
<25678=25680,25679
<25680=25681
<25681=25683,25682
<25685=25686
<25686=25688,25687
<25688=25689
<25689=25691,25690
<25692=25699,25693
<25693=25698,25697,25694
<25694=25696,25695
<25699=25704,25703,25700
<25700=25702,25701
<25705=25706
<25706=25708,25707
<25708=25710,25709
<25710=25712,25711
<25712=25714,25713
<25715=25716
<25716=25725,25724,25717
<25717=25723,25718
<25718=25720,25719
<25720=25722,25721
<25726=25727
<25727=25729,25728
<25729=25731,25730
<25754=25763,25762,25755
<25755=25759,25756
<25756=25758,25757
<25759=25761,25760
<25763=25768,25764
<25764=25765
<25765=25767,25766
<25768=25769
<25769=25771,25770
<25779=25782,25781,25780
<25782=25783
<25783=25784
<25789=25792,25791,25790
<25792=25793
<25793=25794
<25799=25802,25801,25800
<25802=25803
<25803=25804
<25809=25812,25811,25810
<25812=25813
<25813=25814
<25819=25825,25824,25820
<25820=25821
<25821=25823,25822
<25825=25833,25826
<25826=25827
<25827=25831,25828
<25828=25829
<25829=25830
<25831=25832
<25833=25834
<25834=25836,25835
<25842=25848,25847,25843
<25843=25844
<25844=25846,25845
<25848=25849
<25849=25959,25850
<25850=25894,25882,25870,25851
<25851=25852
<25852=25865,25853
<25853=25856,25855,25854
<25856=25857
<25857=25864,25858
<25858=25860,25859
<25860=25861
<25861=25863,25862
<25865=25867,25866
<25867=25869,25868
<25870=25871
<25871=25877,25872
<25872=25875,25874,25873
<25875=25876
<25877=25879,25878
<25879=25881,25880
<25882=25883
<25883=25889,25884
<25884=25887,25886,25885
<25887=25888
<25889=25891,25890
<25891=25893,25892
<25894=25954,25923,25895
<25895=25896
<25896=25910,25897
<25897=25898
<25898=25907,25899
<25899=25905,25900
<25900=25903,25901
<25901=25902
<25903=25904
<25905=25906
<25907=25909,25908
<25910=25911
<25911=25920,25912
<25912=25918,25913
<25913=25916,25914
<25914=25915
<25916=25917
<25918=25919
<25920=25922,25921
<25923=25939,25924
<25924=25925
<25925=25936,25926
<25926=25934,25927
<25927=25932,25928
<25928=25929
<25929=25931,25930
<25932=25933
<25934=25935
<25936=25938,25937
<25939=25940
<25940=25951,25941
<25941=25949,25942
<25942=25947,25943
<25943=25944
<25944=25946,25945
<25947=25948
<25949=25950
<25951=25953,25952
<25954=25955
<25955=25957,25956
<25957=25958
<25959=25960
<25960=25964,25961
<25961=25963,25962
<25988=25991,25990,25989
<25991=25997,25992
<25992=25993
<25993=25995,25994
<25995=25996
<25997=25998
<25998=26000,25999
<26000=26001
<26005=26008,26007,26006
<26008=26027,26017,26009
<26009=26010
<26010=26012,26011
<26012=26014,26013
<26014=26016,26015
<26017=26018
<26018=26022,26019
<26019=26021,26020
<26022=26024,26023
<26024=26026,26025
<26027=26057,26048,26045,26028
<26028=26037,26029
<26029=26030
<26030=26032,26031
<26032=26034,26033
<26034=26036,26035
<26037=26038
<26038=26040,26039
<26040=26042,26041
<26042=26044,26043
<26045=26047,26046
<26048=26049
<26049=26056,26050
<26050=26052,26051
<26052=26053
<26053=26055,26054
<26057=26058
<26058=26059
<26059=26064,26063,26060
<26060=26062,26061
<26079=26082,26081,26080
<26082=26083
<26083=26084
<26084=26101,26085
<26085=26096,26086
<26086=26095,26087
<26087=26089,26088
<26089=26090
<26090=26092,26091
<26092=26094,26093
<26096=26100,26097
<26097=26099,26098
<26101=26103,26102
