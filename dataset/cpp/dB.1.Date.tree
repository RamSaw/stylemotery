>19	FunctionDef	CDate 
>20	ParameterList	CLocale Locale , int Day
>21	Parameter	 
>22	Identifier	Day
>23	ParameterType	int
>24	Parameter	 
>25	Identifier	Locale
>26	ParameterType	CLocale
>27	ReturnType	const char *
>28	CompoundStatement	 
>29	ReturnStatement	 
>30	PrimaryExpression	\"\"
>31	SwitchStatement	switch ( Locale )
>32	CompoundStatement	 
>33	ReturnStatement	 
>34	ArrayIndexing	DateDaysFrench [ Day ]
>35	Identifier	Day
>36	Identifier	DateDaysFrench
>37	Label	 
>38	Identifier	LocFrench
>39	ReturnStatement	 
>40	ArrayIndexing	DateDaysEnglish [ Day ]
>41	Identifier	Day
>42	Identifier	DateDaysEnglish
>43	Label	 
>44	Identifier	LocEnglish
>45	Condition	 
>46	Identifier	Locale
>47	ExpressionStatement	 
>48	CallExpression	assert ( ( Day >= 0 ) && ( Day < 7 ) )
>49	ArgumentList	( Day >= 0 ) && ( Day < 7 )
>50	Argument	( Day >= 0 ) && ( Day < 7 )
>51	AndExpression	( Day >= 0 ) && ( Day < 7 )
>52	RelationalExpression	Day < 7
>53	PrimaryExpression	7
>54	Identifier	Day
>55	RelationalExpression	Day >= 0
>56	PrimaryExpression	0
>57	Identifier	Day
>58	Callee	assert
>59	Identifier	assert
>70	FunctionDef	CDate 
>71	ParameterList	CLocale Locale , int Day
>72	Parameter	 
>73	Identifier	Day
>74	ParameterType	int
>75	Parameter	 
>76	Identifier	Locale
>77	ParameterType	CLocale
>78	ReturnType	const char *
>79	CompoundStatement	 
>80	ReturnStatement	 
>81	PrimaryExpression	\"\"
>82	SwitchStatement	switch ( Locale )
>83	CompoundStatement	 
>84	ReturnStatement	 
>85	ArrayIndexing	DateDaysFrenchShort [ Day ]
>86	Identifier	Day
>87	Identifier	DateDaysFrenchShort
>88	Label	 
>89	Identifier	LocFrench
>90	ReturnStatement	 
>91	ArrayIndexing	DateDaysEnglishShort [ Day ]
>92	Identifier	Day
>93	Identifier	DateDaysEnglishShort
>94	Label	 
>95	Identifier	LocEnglish
>96	Condition	 
>97	Identifier	Locale
>98	ExpressionStatement	 
>99	CallExpression	assert ( ( Day >= 0 ) && ( Day < 7 ) )
>100	ArgumentList	( Day >= 0 ) && ( Day < 7 )
>101	Argument	( Day >= 0 ) && ( Day < 7 )
>102	AndExpression	( Day >= 0 ) && ( Day < 7 )
>103	RelationalExpression	Day < 7
>104	PrimaryExpression	7
>105	Identifier	Day
>106	RelationalExpression	Day >= 0
>107	PrimaryExpression	0
>108	Identifier	Day
>109	Callee	assert
>110	Identifier	assert
>121	FunctionDef	CDate 
>122	ParameterList	CLocale Locale , int Mon
>123	Parameter	 
>124	Identifier	Mon
>125	ParameterType	int
>126	Parameter	 
>127	Identifier	Locale
>128	ParameterType	CLocale
>129	ReturnType	const char *
>130	CompoundStatement	 
>131	ReturnStatement	 
>132	PrimaryExpression	\"\"
>133	SwitchStatement	switch ( Locale )
>134	CompoundStatement	 
>135	ReturnStatement	 
>136	ArrayIndexing	DateMonthsFrench [ Mon ]
>137	Identifier	Mon
>138	Identifier	DateMonthsFrench
>139	Label	 
>140	Identifier	LocFrench
>141	ReturnStatement	 
>142	ArrayIndexing	DateMonthsEnglish [ Mon ]
>143	Identifier	Mon
>144	Identifier	DateMonthsEnglish
>145	Label	 
>146	Identifier	LocEnglish
>147	Condition	 
>148	Identifier	Locale
>149	ExpressionStatement	 
>150	CallExpression	assert ( ( Mon >= 0 ) && ( Mon < 12 ) )
>151	ArgumentList	( Mon >= 0 ) && ( Mon < 12 )
>152	Argument	( Mon >= 0 ) && ( Mon < 12 )
>153	AndExpression	( Mon >= 0 ) && ( Mon < 12 )
>154	RelationalExpression	Mon < 12
>155	PrimaryExpression	12
>156	Identifier	Mon
>157	RelationalExpression	Mon >= 0
>158	PrimaryExpression	0
>159	Identifier	Mon
>160	Callee	assert
>161	Identifier	assert
>172	FunctionDef	CDate 
>173	ParameterList	CLocale Locale , int Mon
>174	Parameter	 
>175	Identifier	Mon
>176	ParameterType	int
>177	Parameter	 
>178	Identifier	Locale
>179	ParameterType	CLocale
>180	ReturnType	const char *
>181	CompoundStatement	 
>182	ReturnStatement	 
>183	PrimaryExpression	\"\"
>184	SwitchStatement	switch ( Locale )
>185	CompoundStatement	 
>186	ReturnStatement	 
>187	ArrayIndexing	DateMonthsFrenchShort [ Mon ]
>188	Identifier	Mon
>189	Identifier	DateMonthsFrenchShort
>190	Label	 
>191	Identifier	LocFrench
>192	ReturnStatement	 
>193	ArrayIndexing	DateMonthsEnglishShort [ Mon ]
>194	Identifier	Mon
>195	Identifier	DateMonthsEnglishShort
>196	Label	 
>197	Identifier	LocEnglish
>198	Condition	 
>199	Identifier	Locale
>200	ExpressionStatement	 
>201	CallExpression	assert ( ( Mon >= 0 ) && ( Mon < 12 ) )
>202	ArgumentList	( Mon >= 0 ) && ( Mon < 12 )
>203	Argument	( Mon >= 0 ) && ( Mon < 12 )
>204	AndExpression	( Mon >= 0 ) && ( Mon < 12 )
>205	RelationalExpression	Mon < 12
>206	PrimaryExpression	12
>207	Identifier	Mon
>208	RelationalExpression	Mon >= 0
>209	PrimaryExpression	0
>210	Identifier	Mon
>211	Callee	assert
>212	Identifier	assert
>223	FunctionDef	CDate 
>224	ParameterList	struct tm * NewTime
>225	Parameter	 
>226	Identifier	NewTime
>227	ParameterType	struct tm *
>228	CompoundStatement	 
>229	IfStatement	if ( NewTime )
>230	ElseStatement	else
>231	CompoundStatement	 
>232	ExpressionStatement	 
>233	CallExpression	base_localtime ( m_TTime , m_TmTime )
>234	ArgumentList	m_TTime
>235	Argument	m_TmTime
>236	Identifier	m_TmTime
>237	Argument	m_TTime
>238	Identifier	m_TTime
>239	Callee	base_localtime
>240	Identifier	base_localtime
>241	ExpressionStatement	 
>242	CallExpression	time ( & m_TTime )
>243	ArgumentList	& m_TTime
>244	Argument	& m_TTime
>245	UnaryOp	& m_TTime
>246	Identifier	m_TTime
>247	UnaryOperator	&
>248	Callee	time
>249	Identifier	time
>250	CompoundStatement	 
>251	ExpressionStatement	 
>252	AssignmentExpr	m_TTime = mktime ( & m_TmTime )
>253	CallExpression	mktime ( & m_TmTime )
>254	ArgumentList	& m_TmTime
>255	Argument	& m_TmTime
>256	UnaryOp	& m_TmTime
>257	Identifier	m_TmTime
>258	UnaryOperator	&
>259	Callee	mktime
>260	Identifier	mktime
>261	Identifier	m_TTime
>262	ExpressionStatement	 
>263	CallExpression	memcpy ( & m_TmTime , NewTime , sizeof ( m_TmTime ) )
>264	ArgumentList	& m_TmTime
>265	Argument	sizeof ( m_TmTime )
>266	SizeofExpr	sizeof ( m_TmTime )
>267	SizeofOperand	m_TmTime
>268	Sizeof	sizeof
>269	Argument	NewTime
>270	Identifier	NewTime
>271	Argument	& m_TmTime
>272	UnaryOp	& m_TmTime
>273	Identifier	m_TmTime
>274	UnaryOperator	&
>275	Callee	memcpy
>276	Identifier	memcpy
>277	Condition	 
>278	Identifier	NewTime
>288	FunctionDef	CDate 
>289	ParameterList	 
>290	CompoundStatement	 
>291	ExpressionStatement	 
>292	CallExpression	base_localtime ( m_TTime , m_TmTime )
>293	ArgumentList	m_TTime
>294	Argument	m_TmTime
>295	Identifier	m_TmTime
>296	Argument	m_TTime
>297	Identifier	m_TTime
>298	Callee	base_localtime
>299	Identifier	base_localtime
>300	ExpressionStatement	 
>301	CallExpression	time ( & m_TTime )
>302	ArgumentList	& m_TTime
>303	Argument	& m_TTime
>304	UnaryOp	& m_TTime
>305	Identifier	m_TTime
>306	UnaryOperator	&
>307	Callee	time
>308	Identifier	time
>315	FunctionDef	CDate 
>316	ParameterList	const CString & Expression
>317	Parameter	 
>318	Identifier	Expression
>319	ParameterType	const CString &
>320	ReturnType	CString
>321	CompoundStatement	 
>322	ReturnStatement	 
>323	Identifier	Tmp
>324	ExpressionStatement	 
>325	CallExpression	Map ( Expression , Tmp )
>326	ArgumentList	Expression
>327	Argument	Tmp
>328	Identifier	Tmp
>329	Argument	Expression
>330	Identifier	Expression
>331	Callee	Map
>332	Identifier	Map
>333	IdentifierDeclStatement	 
>334	IdentifierDecl	Tmp
>335	Identifier	Tmp
>336	IdentifierDeclType	CString
>342	FunctionDef	CDate 
>343	ParameterList	const CString & Expression , CString & Target
>344	Parameter	 
>345	Identifier	Target
>346	ParameterType	CString &
>347	Parameter	 
>348	Identifier	Expression
>349	ParameterType	const CString &
>350	ReturnType	CString &
>351	CompoundStatement	 
>352	ReturnStatement	 
>353	Identifier	Target
>354	ExpressionStatement	 
>355	CallExpression	MapTerm ( Expression , Target , 0 )
>356	ArgumentList	Expression
>357	Argument	0
>358	PrimaryExpression	0
>359	Argument	Target
>360	Identifier	Target
>361	Argument	Expression
>362	Identifier	Expression
>363	Callee	MapTerm
>364	Identifier	MapTerm
>370	FunctionDef	CDate 
>371	ParameterList	const CString & Source , CString & Target , int Dummy
>372	Parameter	 
>373	Identifier	Dummy
>374	ParameterType	int
>375	Parameter	 
>376	Identifier	Target
>377	ParameterType	CString &
>378	Parameter	 
>379	Identifier	Source
>380	ParameterType	const CString &
>381	ReturnType	CString &
>382	CompoundStatement	 
>383	ExpressionStatement	 
>384	CallExpression	MAP_TERM_MACRO ( Source , Target , MapTerm , GetVariable , false , Dummy )
>385	ArgumentList	Source
>386	Argument	Dummy
>387	Identifier	Dummy
>388	Argument	false
>389	Identifier	false
>390	Argument	GetVariable
>391	Identifier	GetVariable
>392	Argument	MapTerm
>393	Identifier	MapTerm
>394	Argument	Target
>395	Identifier	Target
>396	Argument	Source
>397	Identifier	Source
>398	Callee	MAP_TERM_MACRO
>399	Identifier	MAP_TERM_MACRO
>409	FunctionDef	CDate 
>410	ParameterList	const CString & Date , struct tm & Result , bool bUsEncoding
>411	Parameter	 
>412	Identifier	bUsEncoding
>413	ParameterType	bool
>414	Parameter	 
>415	Identifier	Result
>416	ParameterType	struct tm &
>417	Parameter	 
>418	Identifier	Date
>419	ParameterType	const CString &
>420	ReturnType	bool
>421	CompoundStatement	 
>422	ReturnStatement	 
>423	Identifier	true
>424	ExpressionStatement	 
>425	CallExpression	Trace ( tagDateTime , levVerbose , ( \"CDate
>426	ArgumentList	tagDateTime
>427	Argument	\"CDate
>428	Expression	\"CDate
>429	Expression	Result . tm_mon , Result . tm_mday , Result . tm_year
>430	Expression	Result . tm_mday , Result . tm_year
>431	MemberAccess	Result . tm_year
>432	Identifier	tm_year
>433	Identifier	Result
>434	MemberAccess	Result . tm_mday
>435	Identifier	tm_mday
>436	Identifier	Result
>437	MemberAccess	Result . tm_mon
>438	Identifier	tm_mon
>439	Identifier	Result
>440	PrimaryExpression	\"CDate
>441	Argument	levVerbose
>442	Identifier	levVerbose
>443	Argument	tagDateTime
>444	Identifier	tagDateTime
>445	Callee	Trace
>446	Identifier	Trace
>447	ExpressionStatement	 
>448	AssignmentExpr	Result . tm_sec = 0
>449	PrimaryExpression	0
>450	MemberAccess	Result . tm_sec
>451	Identifier	tm_sec
>452	Identifier	Result
>453	ExpressionStatement	 
>454	AssignmentExpr	Result . tm_min = 0
>455	PrimaryExpression	0
>456	MemberAccess	Result . tm_min
>457	Identifier	tm_min
>458	Identifier	Result
>459	ExpressionStatement	 
>460	AssignmentExpr	Result . tm_hour = 0
>461	PrimaryExpression	0
>462	MemberAccess	Result . tm_hour
>463	Identifier	tm_hour
>464	Identifier	Result
>465	IfStatement	if ( ( unsigned int ) Date . GetLength ( ) == sizeof ( \"DDMMYY\" ) - 1 )
>466	ElseStatement	else
>467	IfStatement	if ( ( unsigned int ) Date . GetLength ( ) == sizeof ( \"DDMMYYYY\" ) - 1 )
>468	ElseStatement	else
>469	IfStatement	if ( ( unsigned int ) Date . GetLength ( ) == sizeof ( \"DD/MM/YY\" ) - 1 )
>470	ElseStatement	else
>471	IfStatement	if ( ( unsigned int ) Date . GetLength ( ) == sizeof ( \"DD/MM/YYYY\" ) - 1 )
>472	ElseStatement	else
>473	CompoundStatement	 
>474	ReturnStatement	 
>475	Identifier	false
>476	CompoundStatement	 
>477	ExpressionStatement	 
>478	AssignmentExpr	Result . tm_year = Date . GetInt ( 6 , 4 ) - 1900
>479	AdditiveExpression	Date . GetInt ( 6 , 4 ) - 1900
>480	PrimaryExpression	1900
>481	CallExpression	Date . GetInt ( 6 , 4 )
>482	ArgumentList	6
>483	Argument	4
>484	PrimaryExpression	4
>485	Argument	6
>486	PrimaryExpression	6
>487	Callee	Date . GetInt
>488	MemberAccess	Date . GetInt
>489	Identifier	GetInt
>490	Identifier	Date
>491	MemberAccess	Result . tm_year
>492	Identifier	tm_year
>493	Identifier	Result
>494	IfStatement	if ( bUsEncoding )
>495	ElseStatement	else
>496	ExpressionStatement	 
>497	AssignmentExpr	Result . tm_mon = Date . GetInt ( 3 , 2 ) - 1
>498	AdditiveExpression	Date . GetInt ( 3 , 2 ) - 1
>499	PrimaryExpression	1
>500	CallExpression	Date . GetInt ( 3 , 2 )
>501	ArgumentList	3
>502	Argument	2
>503	PrimaryExpression	2
>504	Argument	3
>505	PrimaryExpression	3
>506	Callee	Date . GetInt
>507	MemberAccess	Date . GetInt
>508	Identifier	GetInt
>509	Identifier	Date
>510	MemberAccess	Result . tm_mon
>511	Identifier	tm_mon
>512	Identifier	Result
>513	ExpressionStatement	 
>514	AssignmentExpr	Result . tm_mon = Date . GetInt ( 0 , 2 ) - 1
>515	AdditiveExpression	Date . GetInt ( 0 , 2 ) - 1
>516	PrimaryExpression	1
>517	CallExpression	Date . GetInt ( 0 , 2 )
>518	ArgumentList	0
>519	Argument	2
>520	PrimaryExpression	2
>521	Argument	0
>522	PrimaryExpression	0
>523	Callee	Date . GetInt
>524	MemberAccess	Date . GetInt
>525	Identifier	GetInt
>526	Identifier	Date
>527	MemberAccess	Result . tm_mon
>528	Identifier	tm_mon
>529	Identifier	Result
>530	Condition	 
>531	Identifier	bUsEncoding
>532	IfStatement	if ( bUsEncoding )
>533	ElseStatement	else
>534	ExpressionStatement	 
>535	AssignmentExpr	Result . tm_mday = Date . GetInt ( 0 , 2 )
>536	CallExpression	Date . GetInt ( 0 , 2 )
>537	ArgumentList	0
>538	Argument	2
>539	PrimaryExpression	2
>540	Argument	0
>541	PrimaryExpression	0
>542	Callee	Date . GetInt
>543	MemberAccess	Date . GetInt
>544	Identifier	GetInt
>545	Identifier	Date
>546	MemberAccess	Result . tm_mday
>547	Identifier	tm_mday
>548	Identifier	Result
>549	ExpressionStatement	 
>550	AssignmentExpr	Result . tm_mday = Date . GetInt ( 3 , 2 )
>551	CallExpression	Date . GetInt ( 3 , 2 )
>552	ArgumentList	3
>553	Argument	2
>554	PrimaryExpression	2
>555	Argument	3
>556	PrimaryExpression	3
>557	Callee	Date . GetInt
>558	MemberAccess	Date . GetInt
>559	Identifier	GetInt
>560	Identifier	Date
>561	MemberAccess	Result . tm_mday
>562	Identifier	tm_mday
>563	Identifier	Result
>564	Condition	 
>565	Identifier	bUsEncoding
>566	Condition	 
>567	EqualityExpression	( unsigned int ) Date . GetLength ( ) == sizeof ( \"DD/MM/YYYY\" ) - 1
>568	AdditiveExpression	sizeof ( \"DD/MM/YYYY\" ) - 1
>569	PrimaryExpression	1
>570	SizeofExpr	sizeof ( \"DD/MM/YYYY\" )
>571	PrimaryExpression	\"DD/MM/YYYY\"
>572	Sizeof	sizeof
>573	CastExpression	( unsigned int ) Date . GetLength ( )
>574	CallExpression	Date . GetLength ( )
>575	ArgumentList	 
>576	Callee	Date . GetLength
>577	MemberAccess	Date . GetLength
>578	Identifier	GetLength
>579	Identifier	Date
>580	CastTarget	unsigned int
>581	CompoundStatement	 
>582	IfStatement	if ( Result . tm_year < 70 )
>583	ExpressionStatement	 
>584	AssignmentExpr	Result . tm_year += 100
>585	PrimaryExpression	100
>586	MemberAccess	Result . tm_year
>587	Identifier	tm_year
>588	Identifier	Result
>589	Condition	 
>590	RelationalExpression	Result . tm_year < 70
>591	PrimaryExpression	70
>592	MemberAccess	Result . tm_year
>593	Identifier	tm_year
>594	Identifier	Result
>595	ExpressionStatement	 
>596	AssignmentExpr	Result . tm_year = Date . GetInt ( 6 , 2 )
>597	CallExpression	Date . GetInt ( 6 , 2 )
>598	ArgumentList	6
>599	Argument	2
>600	PrimaryExpression	2
>601	Argument	6
>602	PrimaryExpression	6
>603	Callee	Date . GetInt
>604	MemberAccess	Date . GetInt
>605	Identifier	GetInt
>606	Identifier	Date
>607	MemberAccess	Result . tm_year
>608	Identifier	tm_year
>609	Identifier	Result
>610	IfStatement	if ( bUsEncoding )
>611	ElseStatement	else
>612	ExpressionStatement	 
>613	AssignmentExpr	Result . tm_mon = Date . GetInt ( 3 , 2 ) - 1
>614	AdditiveExpression	Date . GetInt ( 3 , 2 ) - 1
>615	PrimaryExpression	1
>616	CallExpression	Date . GetInt ( 3 , 2 )
>617	ArgumentList	3
>618	Argument	2
>619	PrimaryExpression	2
>620	Argument	3
>621	PrimaryExpression	3
>622	Callee	Date . GetInt
>623	MemberAccess	Date . GetInt
>624	Identifier	GetInt
>625	Identifier	Date
>626	MemberAccess	Result . tm_mon
>627	Identifier	tm_mon
>628	Identifier	Result
>629	ExpressionStatement	 
>630	AssignmentExpr	Result . tm_mon = Date . GetInt ( 0 , 2 ) - 1
>631	AdditiveExpression	Date . GetInt ( 0 , 2 ) - 1
>632	PrimaryExpression	1
>633	CallExpression	Date . GetInt ( 0 , 2 )
>634	ArgumentList	0
>635	Argument	2
>636	PrimaryExpression	2
>637	Argument	0
>638	PrimaryExpression	0
>639	Callee	Date . GetInt
>640	MemberAccess	Date . GetInt
>641	Identifier	GetInt
>642	Identifier	Date
>643	MemberAccess	Result . tm_mon
>644	Identifier	tm_mon
>645	Identifier	Result
>646	Condition	 
>647	Identifier	bUsEncoding
>648	IfStatement	if ( bUsEncoding )
>649	ElseStatement	else
>650	ExpressionStatement	 
>651	AssignmentExpr	Result . tm_mday = Date . GetInt ( 0 , 2 )
>652	CallExpression	Date . GetInt ( 0 , 2 )
>653	ArgumentList	0
>654	Argument	2
>655	PrimaryExpression	2
>656	Argument	0
>657	PrimaryExpression	0
>658	Callee	Date . GetInt
>659	MemberAccess	Date . GetInt
>660	Identifier	GetInt
>661	Identifier	Date
>662	MemberAccess	Result . tm_mday
>663	Identifier	tm_mday
>664	Identifier	Result
>665	ExpressionStatement	 
>666	AssignmentExpr	Result . tm_mday = Date . GetInt ( 3 , 2 )
>667	CallExpression	Date . GetInt ( 3 , 2 )
>668	ArgumentList	3
>669	Argument	2
>670	PrimaryExpression	2
>671	Argument	3
>672	PrimaryExpression	3
>673	Callee	Date . GetInt
>674	MemberAccess	Date . GetInt
>675	Identifier	GetInt
>676	Identifier	Date
>677	MemberAccess	Result . tm_mday
>678	Identifier	tm_mday
>679	Identifier	Result
>680	Condition	 
>681	Identifier	bUsEncoding
>682	Condition	 
>683	EqualityExpression	( unsigned int ) Date . GetLength ( ) == sizeof ( \"DD/MM/YY\" ) - 1
>684	AdditiveExpression	sizeof ( \"DD/MM/YY\" ) - 1
>685	PrimaryExpression	1
>686	SizeofExpr	sizeof ( \"DD/MM/YY\" )
>687	PrimaryExpression	\"DD/MM/YY\"
>688	Sizeof	sizeof
>689	CastExpression	( unsigned int ) Date . GetLength ( )
>690	CallExpression	Date . GetLength ( )
>691	ArgumentList	 
>692	Callee	Date . GetLength
>693	MemberAccess	Date . GetLength
>694	Identifier	GetLength
>695	Identifier	Date
>696	CastTarget	unsigned int
>697	CompoundStatement	 
>698	ExpressionStatement	 
>699	AssignmentExpr	Result . tm_year = Date . GetInt ( 4 , 4 ) - 1900
>700	AdditiveExpression	Date . GetInt ( 4 , 4 ) - 1900
>701	PrimaryExpression	1900
>702	CallExpression	Date . GetInt ( 4 , 4 )
>703	ArgumentList	4
>704	Argument	4
>705	PrimaryExpression	4
>706	Argument	4
>707	PrimaryExpression	4
>708	Callee	Date . GetInt
>709	MemberAccess	Date . GetInt
>710	Identifier	GetInt
>711	Identifier	Date
>712	MemberAccess	Result . tm_year
>713	Identifier	tm_year
>714	Identifier	Result
>715	IfStatement	if ( bUsEncoding )
>716	ElseStatement	else
>717	ExpressionStatement	 
>718	AssignmentExpr	Result . tm_mon = Date . GetInt ( 2 , 2 ) - 1
>719	AdditiveExpression	Date . GetInt ( 2 , 2 ) - 1
>720	PrimaryExpression	1
>721	CallExpression	Date . GetInt ( 2 , 2 )
>722	ArgumentList	2
>723	Argument	2
>724	PrimaryExpression	2
>725	Argument	2
>726	PrimaryExpression	2
>727	Callee	Date . GetInt
>728	MemberAccess	Date . GetInt
>729	Identifier	GetInt
>730	Identifier	Date
>731	MemberAccess	Result . tm_mon
>732	Identifier	tm_mon
>733	Identifier	Result
>734	ExpressionStatement	 
>735	AssignmentExpr	Result . tm_mon = Date . GetInt ( 0 , 2 ) - 1
>736	AdditiveExpression	Date . GetInt ( 0 , 2 ) - 1
>737	PrimaryExpression	1
>738	CallExpression	Date . GetInt ( 0 , 2 )
>739	ArgumentList	0
>740	Argument	2
>741	PrimaryExpression	2
>742	Argument	0
>743	PrimaryExpression	0
>744	Callee	Date . GetInt
>745	MemberAccess	Date . GetInt
>746	Identifier	GetInt
>747	Identifier	Date
>748	MemberAccess	Result . tm_mon
>749	Identifier	tm_mon
>750	Identifier	Result
>751	Condition	 
>752	Identifier	bUsEncoding
>753	IfStatement	if ( bUsEncoding )
>754	ElseStatement	else
>755	ExpressionStatement	 
>756	AssignmentExpr	Result . tm_mday = Date . GetInt ( 0 , 2 )
>757	CallExpression	Date . GetInt ( 0 , 2 )
>758	ArgumentList	0
>759	Argument	2
>760	PrimaryExpression	2
>761	Argument	0
>762	PrimaryExpression	0
>763	Callee	Date . GetInt
>764	MemberAccess	Date . GetInt
>765	Identifier	GetInt
>766	Identifier	Date
>767	MemberAccess	Result . tm_mday
>768	Identifier	tm_mday
>769	Identifier	Result
>770	ExpressionStatement	 
>771	AssignmentExpr	Result . tm_mday = Date . GetInt ( 2 , 2 )
>772	CallExpression	Date . GetInt ( 2 , 2 )
>773	ArgumentList	2
>774	Argument	2
>775	PrimaryExpression	2
>776	Argument	2
>777	PrimaryExpression	2
>778	Callee	Date . GetInt
>779	MemberAccess	Date . GetInt
>780	Identifier	GetInt
>781	Identifier	Date
>782	MemberAccess	Result . tm_mday
>783	Identifier	tm_mday
>784	Identifier	Result
>785	Condition	 
>786	Identifier	bUsEncoding
>787	Condition	 
>788	EqualityExpression	( unsigned int ) Date . GetLength ( ) == sizeof ( \"DDMMYYYY\" ) - 1
>789	AdditiveExpression	sizeof ( \"DDMMYYYY\" ) - 1
>790	PrimaryExpression	1
>791	SizeofExpr	sizeof ( \"DDMMYYYY\" )
>792	PrimaryExpression	\"DDMMYYYY\"
>793	Sizeof	sizeof
>794	CastExpression	( unsigned int ) Date . GetLength ( )
>795	CallExpression	Date . GetLength ( )
>796	ArgumentList	 
>797	Callee	Date . GetLength
>798	MemberAccess	Date . GetLength
>799	Identifier	GetLength
>800	Identifier	Date
>801	CastTarget	unsigned int
>802	CompoundStatement	 
>803	IfStatement	if ( Result . tm_year < 70 )
>804	ExpressionStatement	 
>805	AssignmentExpr	Result . tm_year += 100
>806	PrimaryExpression	100
>807	MemberAccess	Result . tm_year
>808	Identifier	tm_year
>809	Identifier	Result
>810	Condition	 
>811	RelationalExpression	Result . tm_year < 70
>812	PrimaryExpression	70
>813	MemberAccess	Result . tm_year
>814	Identifier	tm_year
>815	Identifier	Result
>816	ExpressionStatement	 
>817	AssignmentExpr	Result . tm_year = Date . GetInt ( 4 , 2 )
>818	CallExpression	Date . GetInt ( 4 , 2 )
>819	ArgumentList	4
>820	Argument	2
>821	PrimaryExpression	2
>822	Argument	4
>823	PrimaryExpression	4
>824	Callee	Date . GetInt
>825	MemberAccess	Date . GetInt
>826	Identifier	GetInt
>827	Identifier	Date
>828	MemberAccess	Result . tm_year
>829	Identifier	tm_year
>830	Identifier	Result
>831	IfStatement	if ( bUsEncoding )
>832	ElseStatement	else
>833	ExpressionStatement	 
>834	AssignmentExpr	Result . tm_mon = Date . GetInt ( 2 , 2 ) - 1
>835	AdditiveExpression	Date . GetInt ( 2 , 2 ) - 1
>836	PrimaryExpression	1
>837	CallExpression	Date . GetInt ( 2 , 2 )
>838	ArgumentList	2
>839	Argument	2
>840	PrimaryExpression	2
>841	Argument	2
>842	PrimaryExpression	2
>843	Callee	Date . GetInt
>844	MemberAccess	Date . GetInt
>845	Identifier	GetInt
>846	Identifier	Date
>847	MemberAccess	Result . tm_mon
>848	Identifier	tm_mon
>849	Identifier	Result
>850	ExpressionStatement	 
>851	AssignmentExpr	Result . tm_mon = Date . GetInt ( 0 , 2 ) - 1
>852	AdditiveExpression	Date . GetInt ( 0 , 2 ) - 1
>853	PrimaryExpression	1
>854	CallExpression	Date . GetInt ( 0 , 2 )
>855	ArgumentList	0
>856	Argument	2
>857	PrimaryExpression	2
>858	Argument	0
>859	PrimaryExpression	0
>860	Callee	Date . GetInt
>861	MemberAccess	Date . GetInt
>862	Identifier	GetInt
>863	Identifier	Date
>864	MemberAccess	Result . tm_mon
>865	Identifier	tm_mon
>866	Identifier	Result
>867	Condition	 
>868	Identifier	bUsEncoding
>869	IfStatement	if ( bUsEncoding )
>870	ElseStatement	else
>871	ExpressionStatement	 
>872	AssignmentExpr	Result . tm_mday = Date . GetInt ( 0 , 2 )
>873	CallExpression	Date . GetInt ( 0 , 2 )
>874	ArgumentList	0
>875	Argument	2
>876	PrimaryExpression	2
>877	Argument	0
>878	PrimaryExpression	0
>879	Callee	Date . GetInt
>880	MemberAccess	Date . GetInt
>881	Identifier	GetInt
>882	Identifier	Date
>883	MemberAccess	Result . tm_mday
>884	Identifier	tm_mday
>885	Identifier	Result
>886	ExpressionStatement	 
>887	AssignmentExpr	Result . tm_mday = Date . GetInt ( 2 , 2 )
>888	CallExpression	Date . GetInt ( 2 , 2 )
>889	ArgumentList	2
>890	Argument	2
>891	PrimaryExpression	2
>892	Argument	2
>893	PrimaryExpression	2
>894	Callee	Date . GetInt
>895	MemberAccess	Date . GetInt
>896	Identifier	GetInt
>897	Identifier	Date
>898	MemberAccess	Result . tm_mday
>899	Identifier	tm_mday
>900	Identifier	Result
>901	Condition	 
>902	Identifier	bUsEncoding
>903	Condition	 
>904	EqualityExpression	( unsigned int ) Date . GetLength ( ) == sizeof ( \"DDMMYY\" ) - 1
>905	AdditiveExpression	sizeof ( \"DDMMYY\" ) - 1
>906	PrimaryExpression	1
>907	SizeofExpr	sizeof ( \"DDMMYY\" )
>908	PrimaryExpression	\"DDMMYY\"
>909	Sizeof	sizeof
>910	CastExpression	( unsigned int ) Date . GetLength ( )
>911	CallExpression	Date . GetLength ( )
>912	ArgumentList	 
>913	Callee	Date . GetLength
>914	MemberAccess	Date . GetLength
>915	Identifier	GetLength
>916	Identifier	Date
>917	CastTarget	unsigned int
>918	ExpressionStatement	 
>919	CallExpression	memset ( & Result , 0 , sizeof ( struct tm ) )
>920	ArgumentList	& Result
>921	Argument	sizeof ( struct tm )
>922	SizeofExpr	sizeof ( struct tm )
>923	SizeofOperand	struct tm
>924	Sizeof	sizeof
>925	Argument	0
>926	PrimaryExpression	0
>927	Argument	& Result
>928	UnaryOp	& Result
>929	Identifier	Result
>930	UnaryOperator	&
>931	Callee	memset
>932	Identifier	memset
>952	FunctionDef	CDate 
>953	ParameterList	const CString & First , const CString & Second
>954	Parameter	 
>955	Identifier	Second
>956	ParameterType	const CString &
>957	Parameter	 
>958	Identifier	First
>959	ParameterType	const CString &
>960	ReturnType	int
>961	CompoundStatement	 
>962	ReturnStatement	 
>963	AdditiveExpression	Time1 - Time2
>964	Identifier	Time2
>965	Identifier	Time1
>966	IdentifierDeclStatement	 
>967	IdentifierDecl	Time2 = mktime ( & SecondDate )
>968	AssignmentExpr	Time2 = mktime ( & SecondDate )
>969	CallExpression	mktime ( & SecondDate )
>970	ArgumentList	& SecondDate
>971	Argument	& SecondDate
>972	UnaryOp	& SecondDate
>973	Identifier	SecondDate
>974	UnaryOperator	&
>975	Callee	mktime
>976	Identifier	mktime
>977	Identifier	Time2
>978	Identifier	Time2
>979	IdentifierDeclType	time_t
>980	IdentifierDeclStatement	 
>981	IdentifierDecl	Time1 = mktime ( & FirstDate )
>982	AssignmentExpr	Time1 = mktime ( & FirstDate )
>983	CallExpression	mktime ( & FirstDate )
>984	ArgumentList	& FirstDate
>985	Argument	& FirstDate
>986	UnaryOp	& FirstDate
>987	Identifier	FirstDate
>988	UnaryOperator	&
>989	Callee	mktime
>990	Identifier	mktime
>991	Identifier	Time1
>992	Identifier	Time1
>993	IdentifierDeclType	time_t
>994	ExpressionStatement	 
>995	CallExpression	EncodeDate ( Second , SecondDate )
>996	ArgumentList	Second
>997	Argument	SecondDate
>998	Identifier	SecondDate
>999	Argument	Second
>1000	Identifier	Second
>1001	Callee	EncodeDate
>1002	Identifier	EncodeDate
>1003	IdentifierDeclStatement	 
>1004	IdentifierDecl	SecondDate
>1005	Identifier	SecondDate
>1006	IdentifierDeclType	struct tm
>1007	ExpressionStatement	 
>1008	CallExpression	EncodeDate ( First , FirstDate )
>1009	ArgumentList	First
>1010	Argument	FirstDate
>1011	Identifier	FirstDate
>1012	Argument	First
>1013	Identifier	First
>1014	Callee	EncodeDate
>1015	Identifier	EncodeDate
>1016	IdentifierDeclStatement	 
>1017	IdentifierDecl	FirstDate
>1018	Identifier	FirstDate
>1019	IdentifierDeclType	struct tm
>1032	FunctionDef	CDate 
>1033	ParameterList	const CString & DateString , const CString & DateFormat , struct tm & Result
>1034	Parameter	 
>1035	Identifier	Result
>1036	ParameterType	struct tm &
>1037	Parameter	 
>1038	Identifier	DateFormat
>1039	ParameterType	const CString &
>1040	Parameter	 
>1041	Identifier	DateString
>1042	ParameterType	const CString &
>1043	ReturnType	bool
>1044	CompoundStatement	 
>1045	ReturnStatement	 
>1046	Identifier	false
>1047	IfStatement	if ( fScan )
>1048	CompoundStatement	 
>1049	ReturnStatement	 
>1050	Identifier	true
>1051	IfStatement	if ( ZoneAdjustment )
>1052	CompoundStatement	 
>1053	ExpressionStatement	 
>1054	CallExpression	base_localtime ( AdjustedTime , Result )
>1055	ArgumentList	AdjustedTime
>1056	Argument	Result
>1057	Identifier	Result
>1058	Argument	AdjustedTime
>1059	Identifier	AdjustedTime
>1060	Callee	base_localtime
>1061	Identifier	base_localtime
>1062	ExpressionStatement	 
>1063	AssignmentExpr	AdjustedTime -= ZoneAdjustment
>1064	Identifier	ZoneAdjustment
>1065	Identifier	AdjustedTime
>1066	ExpressionStatement	 
>1067	AssignmentExpr	AdjustedTime -= _timezone
>1068	Identifier	_timezone
>1069	Identifier	AdjustedTime
>1070	ExpressionStatement	 
>1071	AssignmentExpr	AdjustedTime = mktime ( & Result )
>1072	CallExpression	mktime ( & Result )
>1073	ArgumentList	& Result
>1074	Argument	& Result
>1075	UnaryOp	& Result
>1076	Identifier	Result
>1077	UnaryOperator	&
>1078	Callee	mktime
>1079	Identifier	mktime
>1080	Identifier	AdjustedTime
>1081	ExpressionStatement	 
>1082	CallExpression	_tzset ( )
>1083	ArgumentList	 
>1084	Callee	_tzset
>1085	Identifier	_tzset
>1086	ExpressionStatement	 
>1087	CallExpression	base_gmtime ( AdjustedTime , Result )
>1088	ArgumentList	AdjustedTime
>1089	Argument	Result
>1090	Identifier	Result
>1091	Argument	AdjustedTime
>1092	Identifier	AdjustedTime
>1093	Callee	base_gmtime
>1094	Identifier	base_gmtime
>1095	IdentifierDeclStatement	 
>1096	IdentifierDecl	AdjustedTime
>1097	Identifier	AdjustedTime
>1098	IdentifierDeclType	time_t
>1099	Condition	 
>1100	Identifier	ZoneAdjustment
>1101	ExpressionStatement	 
>1102	AssignmentExpr	Result . tm_isdst = 0
>1103	PrimaryExpression	0
>1104	MemberAccess	Result . tm_isdst
>1105	Identifier	tm_isdst
>1106	Identifier	Result
>1107	ExpressionStatement	 
>1108	CallExpression	Trace ( tagDateTime , levVerbose , ( \"CDate
>1109	ArgumentList	tagDateTime
>1110	Argument	\"CDate
>1111	Expression	\"CDate
>1112	Identifier	ZoneAdjustment
>1113	PrimaryExpression	\"CDate
>1114	Argument	levVerbose
>1115	Identifier	levVerbose
>1116	Argument	tagDateTime
>1117	Identifier	tagDateTime
>1118	Callee	Trace
>1119	Identifier	Trace
>1120	IfStatement	if ( Zone . IsInt ( & ZoneAdjustment ) )
>1121	ElseStatement	else
>1122	CompoundStatement	 
>1123	ForStatement	for ( i = 0 ; i < BASE_DIM ( Zones ) ; i ++ )
>1124	CompoundStatement	 
>1125	IfStatement	if ( Zone . Same ( Zones [ i ] ) )
>1126	CompoundStatement	 
>1127	BreakStatement	 
>1128	ExpressionStatement	 
>1129	AssignmentExpr	ZoneAdjustment = ZonesHoursSkew [ i ] * 3600
>1130	MultiplicativeExpression	ZonesHoursSkew [ i ] * 3600
>1131	PrimaryExpression	3600
>1132	ArrayIndexing	ZonesHoursSkew [ i ]
>1133	Identifier	i
>1134	Identifier	ZonesHoursSkew
>1135	Identifier	ZoneAdjustment
>1136	Condition	 
>1137	CallExpression	Zone . Same ( Zones [ i ] )
>1138	ArgumentList	Zones [ i ]
>1139	Argument	Zones [ i ]
>1140	ArrayIndexing	Zones [ i ]
>1141	Identifier	i
>1142	Identifier	Zones
>1143	Callee	Zone . Same
>1144	MemberAccess	Zone . Same
>1145	Identifier	Same
>1146	Identifier	Zone
>1147	IncDecOp	 
>1148	IncDec	++
>1149	Identifier	i
>1150	Condition	 
>1151	RelationalExpression	i < BASE_DIM ( Zones )
>1152	CallExpression	BASE_DIM ( Zones )
>1153	ArgumentList	Zones
>1154	Argument	Zones
>1155	Identifier	Zones
>1156	Callee	BASE_DIM
>1157	Identifier	BASE_DIM
>1158	Identifier	i
>1159	ForInit	 
>1160	AssignmentExpr	i = 0
>1161	PrimaryExpression	0
>1162	Identifier	i
>1163	CompoundStatement	 
>1164	ExpressionStatement	 
>1165	AssignmentExpr	ZoneAdjustment *= 3600
>1166	PrimaryExpression	3600
>1167	Identifier	ZoneAdjustment
>1168	Condition	 
>1169	CallExpression	Zone . IsInt ( & ZoneAdjustment )
>1170	ArgumentList	& ZoneAdjustment
>1171	Argument	& ZoneAdjustment
>1172	UnaryOp	& ZoneAdjustment
>1173	Identifier	ZoneAdjustment
>1174	UnaryOperator	&
>1175	Callee	Zone . IsInt
>1176	MemberAccess	Zone . IsInt
>1177	Identifier	IsInt
>1178	Identifier	Zone
>1179	IdentifierDeclStatement	 
>1180	IdentifierDecl	ZoneAdjustment = 0
>1181	AssignmentExpr	ZoneAdjustment = 0
>1182	PrimaryExpression	0
>1183	Identifier	ZoneAdjustment
>1184	Identifier	ZoneAdjustment
>1185	IdentifierDeclType	int
>1186	ForStatement	for ( i = 0 ; i < BASE_DIM ( WeekDays ) ; i ++ )
>1187	CompoundStatement	 
>1188	IfStatement	if ( WeekDay . StartsWithSame ( WeekDays [ i ] ) )
>1189	CompoundStatement	 
>1190	BreakStatement	 
>1191	ExpressionStatement	 
>1192	AssignmentExpr	Result . tm_wday = i
>1193	Identifier	i
>1194	MemberAccess	Result . tm_wday
>1195	Identifier	tm_wday
>1196	Identifier	Result
>1197	Condition	 
>1198	CallExpression	WeekDay . StartsWithSame ( WeekDays [ i ] )
>1199	ArgumentList	WeekDays [ i ]
>1200	Argument	WeekDays [ i ]
>1201	ArrayIndexing	WeekDays [ i ]
>1202	Identifier	i
>1203	Identifier	WeekDays
>1204	Callee	WeekDay . StartsWithSame
>1205	MemberAccess	WeekDay . StartsWithSame
>1206	Identifier	StartsWithSame
>1207	Identifier	WeekDay
>1208	IncDecOp	 
>1209	IncDec	++
>1210	Identifier	i
>1211	Condition	 
>1212	RelationalExpression	i < BASE_DIM ( WeekDays )
>1213	CallExpression	BASE_DIM ( WeekDays )
>1214	ArgumentList	WeekDays
>1215	Argument	WeekDays
>1216	Identifier	WeekDays
>1217	Callee	BASE_DIM
>1218	Identifier	BASE_DIM
>1219	Identifier	i
>1220	ForInit	 
>1221	AssignmentExpr	i = 0
>1222	PrimaryExpression	0
>1223	Identifier	i
>1224	ForStatement	for ( i = 0 ; i < BASE_DIM ( Months ) ; i ++ )
>1225	CompoundStatement	 
>1226	IfStatement	if ( Month . Same ( Months [ i ] ) )
>1227	CompoundStatement	 
>1228	BreakStatement	 
>1229	ExpressionStatement	 
>1230	AssignmentExpr	Result . tm_mon = i
>1231	Identifier	i
>1232	MemberAccess	Result . tm_mon
>1233	Identifier	tm_mon
>1234	Identifier	Result
>1235	Condition	 
>1236	CallExpression	Month . Same ( Months [ i ] )
>1237	ArgumentList	Months [ i ]
>1238	Argument	Months [ i ]
>1239	ArrayIndexing	Months [ i ]
>1240	Identifier	i
>1241	Identifier	Months
>1242	Callee	Month . Same
>1243	MemberAccess	Month . Same
>1244	Identifier	Same
>1245	Identifier	Month
>1246	IncDecOp	 
>1247	IncDec	++
>1248	Identifier	i
>1249	Condition	 
>1250	RelationalExpression	i < BASE_DIM ( Months )
>1251	CallExpression	BASE_DIM ( Months )
>1252	ArgumentList	Months
>1253	Argument	Months
>1254	Identifier	Months
>1255	Callee	BASE_DIM
>1256	Identifier	BASE_DIM
>1257	Identifier	i
>1258	ForInit	 
>1259	AssignmentExpr	i = 0
>1260	PrimaryExpression	0
>1261	Identifier	i
>1262	IfStatement	if ( Result . tm_year > 1900 )
>1263	ExpressionStatement	 
>1264	AssignmentExpr	Result . tm_year -= 1900
>1265	PrimaryExpression	1900
>1266	MemberAccess	Result . tm_year
>1267	Identifier	tm_year
>1268	Identifier	Result
>1269	Condition	 
>1270	RelationalExpression	Result . tm_year > 1900
>1271	PrimaryExpression	1900
>1272	MemberAccess	Result . tm_year
>1273	Identifier	tm_year
>1274	Identifier	Result
>1275	IdentifierDeclStatement	 
>1276	IdentifierDecl	i
>1277	Identifier	i
>1278	IdentifierDeclType	int
>1279	Condition	 
>1280	Identifier	fScan
>1281	ExpressionStatement	 
>1282	Statement	 
>1283	Statement	 
>1284	Statement	 
>1285	Statement	 
>1286	Statement	 
>1287	Statement	 
>1288	Statement	 
>1289	Statement	 
>1290	Statement	 
>1291	Statement	 
>1292	Statement	 
>1293	Statement	 
>1294	Statement	 
>1295	Statement	 
>1296	Statement	 
>1297	Statement	 
>1298	Statement	 
>1299	Statement	 
>1300	Statement	 
>1301	Statement	 
>1302	Statement	 
>1303	Statement	 
>1304	Statement	 
>1305	Statement	 
>1306	Statement	 
>1307	Statement	 
>1308	Statement	 
>1309	Statement	 
>1310	Statement	 
>1311	Statement	 
>1312	Statement	 
>1313	Statement	 
>1314	Statement	 
>1315	Statement	 
>1316	Statement	 
>1317	Statement	 
>1318	Statement	 
>1319	Statement	 
>1320	Statement	 
>1321	Statement	 
>1322	Statement	 
>1323	Statement	 
>1324	Statement	 
>1325	Statement	 
>1326	Statement	 
>1327	Statement	 
>1328	Statement	 
>1329	Statement	 
>1330	Statement	 
>1331	Statement	 
>1332	Statement	 
>1333	Statement	 
>1334	Statement	 
>1335	Statement	 
>1336	Statement	 
>1337	Statement	 
>1338	Statement	 
>1339	Statement	 
>1340	Statement	 
>1341	Statement	 
>1342	Statement	 
>1343	Statement	 
>1344	IdentifierDeclStatement	 
>1345	IdentifierDecl	fScan = SSScan ( Date , & DateFormat , & WeekDay , NULL , & Result . tm_mday , & Month , & Result . tm_year , & \
>1346	AssignmentExpr	fScan = SSScan ( Date , & DateFormat , & WeekDay , NULL , & Result . tm_mday , & Month , & Result . tm_\
>1347	CallExpression	SSScan ( Date , & DateFormat , & WeekDay , NULL , & Result . tm_mday , & Month , & Result . tm_year , & Result . \
>1348	ArgumentList	Date
>1349	Argument	& Zone
>1350	UnaryOp	& Zone
>1351	Identifier	Zone
>1352	UnaryOperator	&
>1353	Argument	& Result . tm_sec
>1354	UnaryOp	& Result . tm_sec
>1355	MemberAccess	Result . tm_sec
>1356	Identifier	tm_sec
>1357	Identifier	Result
>1358	UnaryOperator	&
>1359	Argument	NULL
>1360	Identifier	NULL
>1361	Argument	& Result . tm_min
>1362	UnaryOp	& Result . tm_min
>1363	MemberAccess	Result . tm_min
>1364	Identifier	tm_min
>1365	Identifier	Result
>1366	UnaryOperator	&
>1367	Argument	NULL
>1368	Identifier	NULL
>1369	Argument	& Result . tm_hour
>1370	UnaryOp	& Result . tm_hour
>1371	MemberAccess	Result . tm_hour
>1372	Identifier	tm_hour
>1373	Identifier	Result
>1374	UnaryOperator	&
>1375	Argument	& Result . tm_year
>1376	UnaryOp	& Result . tm_year
>1377	MemberAccess	Result . tm_year
>1378	Identifier	tm_year
>1379	Identifier	Result
>1380	UnaryOperator	&
>1381	Argument	& Month
>1382	UnaryOp	& Month
>1383	Identifier	Month
>1384	UnaryOperator	&
>1385	Argument	& Result . tm_mday
>1386	UnaryOp	& Result . tm_mday
>1387	MemberAccess	Result . tm_mday
>1388	Identifier	tm_mday
>1389	Identifier	Result
>1390	UnaryOperator	&
>1391	Argument	NULL
>1392	Identifier	NULL
>1393	Argument	& WeekDay
>1394	UnaryOp	& WeekDay
>1395	Identifier	WeekDay
>1396	UnaryOperator	&
>1397	Argument	& DateFormat
>1398	UnaryOp	& DateFormat
>1399	Identifier	DateFormat
>1400	UnaryOperator	&
>1401	Argument	Date
>1402	Identifier	Date
>1403	Callee	SSScan
>1404	Identifier	SSScan
>1405	Identifier	fScan
>1406	Identifier	fScan
>1407	IdentifierDeclType	bool
>1408	ExpressionStatement	 
>1409	CallExpression	memset ( & Result , 0 , sizeof ( Result ) )
>1410	ArgumentList	& Result
>1411	Argument	sizeof ( Result )
>1412	SizeofExpr	sizeof ( Result )
>1413	SizeofOperand	Result
>1414	Sizeof	sizeof
>1415	Argument	0
>1416	PrimaryExpression	0
>1417	Argument	& Result
>1418	UnaryOp	& Result
>1419	Identifier	Result
>1420	UnaryOperator	&
>1421	Callee	memset
>1422	Identifier	memset
>1423	ExpressionStatement	 
>1424	CallExpression	Date . Replace ( '-' , ' ' )
>1425	ArgumentList	'-'
>1426	Argument	' '
>1427	PrimaryExpression	' '
>1428	Argument	'-'
>1429	PrimaryExpression	'-'
>1430	Callee	Date . Replace
>1431	MemberAccess	Date . Replace
>1432	Identifier	Replace
>1433	Identifier	Date
>1434	IdentifierDeclStatement	 
>1435	IdentifierDecl	Zone
>1436	Identifier	Zone
>1437	IdentifierDeclType	CString
>1438	IdentifierDeclStatement	 
>1439	IdentifierDecl	Month
>1440	Identifier	Month
>1441	IdentifierDeclType	CString
>1442	IdentifierDeclStatement	 
>1443	IdentifierDecl	WeekDay
>1444	Identifier	WeekDay
>1445	IdentifierDeclType	CString
>1446	IdentifierDeclStatement	 
>1447	IdentifierDecl	ZonesHoursSkew [ ] = { 0 , 0 , 4 , 5 , 5 , 6 , 6 , 7 , 7 , 8 }
>1448	AssignmentExpr	ZonesHoursSkew [ ] = { 0 , 0 , 4 , 5 , 5 , 6 , 6 , 7 , 7 , 8 }
>1449	InitializerList	0
>1450	PrimaryExpression	8
>1451	PrimaryExpression	7
>1452	PrimaryExpression	7
>1453	PrimaryExpression	6
>1454	PrimaryExpression	6
>1455	PrimaryExpression	5
>1456	PrimaryExpression	5
>1457	PrimaryExpression	4
>1458	PrimaryExpression	0
>1459	PrimaryExpression	0
>1460	Identifier	ZonesHoursSkew
>1461	Identifier	ZonesHoursSkew
>1462	IdentifierDeclType	const int [ ]
>1463	Statement	 
>1464	IdentifierDeclStatement	 
>1465	IdentifierDecl	* Zones [ ] = { \"UTC\" , \"GMT\" , \"EDT\" , \"EST\" , \"CDT\" , \"CST\" , \"MDT\" , \"MST\" , \"PDT\" , \"PST\" }
>1466	AssignmentExpr	* Zones [ ] = { \"UTC\" , \"GMT\" , \"EDT\" , \"EST\" , \"CDT\" , \"CST\" , \"MDT\" , \"MST\" , \"PDT\" , \"PST\" }
>1467	InitializerList	\"UTC\"
>1468	PrimaryExpression	\"PST\"
>1469	PrimaryExpression	\"PDT\"
>1470	PrimaryExpression	\"MST\"
>1471	PrimaryExpression	\"MDT\"
>1472	PrimaryExpression	\"CST\"
>1473	PrimaryExpression	\"CDT\"
>1474	PrimaryExpression	\"EST\"
>1475	PrimaryExpression	\"EDT\"
>1476	PrimaryExpression	\"GMT\"
>1477	PrimaryExpression	\"UTC\"
>1478	Identifier	Zones
>1479	Identifier	Zones
>1480	IdentifierDeclType	const char * [ ]
>1481	Statement	 
>1482	IdentifierDeclStatement	 
>1483	IdentifierDecl	* WeekDays [ ] = { \"Sun\" , \"Mon\" , \"Tue\" , \"Wed\" , \"Thu\" , \"Fri\" , \"Sat\" }
>1484	AssignmentExpr	* WeekDays [ ] = { \"Sun\" , \"Mon\" , \"Tue\" , \"Wed\" , \"Thu\" , \"Fri\" , \"Sat\" }
>1485	InitializerList	\"Sun\"
>1486	PrimaryExpression	\"Sat\"
>1487	PrimaryExpression	\"Fri\"
>1488	PrimaryExpression	\"Thu\"
>1489	PrimaryExpression	\"Wed\"
>1490	PrimaryExpression	\"Tue\"
>1491	PrimaryExpression	\"Mon\"
>1492	PrimaryExpression	\"Sun\"
>1493	Identifier	WeekDays
>1494	Identifier	WeekDays
>1495	IdentifierDeclType	const char * [ ]
>1496	Statement	 
>1497	IdentifierDeclStatement	 
>1498	IdentifierDecl	* Months [ ] = { \"Jan\" , \"Feb\" , \"Mar\" , \"Apr\" , \"May\" , \"Jun\" , \"Jul\" , \"Aug\" , \"Sep\" , \"Oct\" , \"Nov\" , \"Dec\" }
>1499	AssignmentExpr	* Months [ ] = { \"Jan\" , \"Feb\" , \"Mar\" , \"Apr\" , \"May\" , \"Jun\" , \"Jul\" , \"Aug\" , \"Sep\" , \"Oct\" , \"Nov\" , \"\
>1500	InitializerList	\"Jan\"
>1501	PrimaryExpression	\"Dec\"
>1502	PrimaryExpression	\"Nov\"
>1503	PrimaryExpression	\"Oct\"
>1504	PrimaryExpression	\"Sep\"
>1505	PrimaryExpression	\"Aug\"
>1506	PrimaryExpression	\"Jul\"
>1507	PrimaryExpression	\"Jun\"
>1508	PrimaryExpression	\"May\"
>1509	PrimaryExpression	\"Apr\"
>1510	PrimaryExpression	\"Mar\"
>1511	PrimaryExpression	\"Feb\"
>1512	PrimaryExpression	\"Jan\"
>1513	Identifier	Months
>1514	Identifier	Months
>1515	IdentifierDeclType	const char * [ ]
>1516	Statement	 
>1517	IdentifierDeclStatement	 
>1518	IdentifierDecl	Date ( DateString )
>1519	Identifier	DateString
>1520	Identifier	Date
>1521	IdentifierDeclType	CString
>1573	FunctionDef	CDate 
>1574	ParameterList	const CString & DateString , struct tm & Result
>1575	Parameter	 
>1576	Identifier	Result
>1577	ParameterType	struct tm &
>1578	Parameter	 
>1579	Identifier	DateString
>1580	ParameterType	const CString &
>1581	ReturnType	bool
>1582	CompoundStatement	 
>1583	ReturnStatement	 
>1584	Identifier	true
>1585	IfStatement	if ( ! EncodeDate ( DateString , g_strHttpCookieScanDateFormat , Result ) )
>1586	CompoundStatement	 
>1587	ReturnStatement	 
>1588	Identifier	false
>1589	ExpressionStatement	 
>1590	CallExpression	base_localtime ( TimeT , Result )
>1591	ArgumentList	TimeT
>1592	Argument	Result
>1593	Identifier	Result
>1594	Argument	TimeT
>1595	Identifier	TimeT
>1596	Callee	base_localtime
>1597	Identifier	base_localtime
>1598	ExpressionStatement	 
>1599	CallExpression	time ( & TimeT )
>1600	ArgumentList	& TimeT
>1601	Argument	& TimeT
>1602	UnaryOp	& TimeT
>1603	Identifier	TimeT
>1604	UnaryOperator	&
>1605	Callee	time
>1606	Identifier	time
>1607	IdentifierDeclStatement	 
>1608	IdentifierDecl	TimeT
>1609	Identifier	TimeT
>1610	IdentifierDeclType	time_t
>1611	Condition	 
>1612	UnaryOp	! EncodeDate ( DateString , g_strHttpCookieScanDateFormat , Result )
>1613	CallExpression	EncodeDate ( DateString , g_strHttpCookieScanDateFormat , Result )
>1614	ArgumentList	DateString
>1615	Argument	Result
>1616	Identifier	Result
>1617	Argument	g_strHttpCookieScanDateFormat
>1618	Identifier	g_strHttpCookieScanDateFormat
>1619	Argument	DateString
>1620	Identifier	DateString
>1621	Callee	EncodeDate
>1622	Identifier	EncodeDate
>1623	UnaryOperator	!
>1635	FunctionDef	CDate 
>1636	ParameterList	const long After , const long Before
>1637	Parameter	 
>1638	Identifier	Before
>1639	ParameterType	const long
>1640	Parameter	 
>1641	Identifier	After
>1642	ParameterType	const long
>1643	ReturnType	CString
>1644	CompoundStatement	 
>1645	ReturnStatement	 
>1646	Identifier	Result
>1647	IfStatement	if ( ! Result . GetLength ( ) )
>1648	CompoundStatement	 
>1649	ExpressionStatement	 
>1650	AssignmentExpr	Result += g_strDateSSeconds
>1651	Identifier	g_strDateSSeconds
>1652	Identifier	Result
>1653	ExpressionStatement	 
>1654	AssignmentExpr	Result = '0'
>1655	PrimaryExpression	'0'
>1656	Identifier	Result
>1657	Condition	 
>1658	UnaryOp	! Result . GetLength ( )
>1659	CallExpression	Result . GetLength ( )
>1660	ArgumentList	 
>1661	Callee	Result . GetLength
>1662	MemberAccess	Result . GetLength
>1663	Identifier	GetLength
>1664	Identifier	Result
>1665	UnaryOperator	!
>1666	IfStatement	if ( Seconds )
>1667	CompoundStatement	 
>1668	ExpressionStatement	 
>1669	AssignmentExpr	Result += ( Seconds > 1 ) ? g_strDateSSeconds 
>1670	ConditionalExpression	( Seconds > 1 ) ? g_strDateSSeconds 
>1671	Identifier	g_strDateSSecond
>1672	Identifier	g_strDateSSeconds
>1673	Condition	Seconds > 1
>1674	RelationalExpression	Seconds > 1
>1675	PrimaryExpression	1
>1676	Identifier	Seconds
>1677	Identifier	Result
>1678	ExpressionStatement	 
>1679	AssignmentExpr	Result += CString 
>1680	CallExpression	CString 
>1681	ArgumentList	Seconds
>1682	Argument	Seconds
>1683	Identifier	Seconds
>1684	Callee	CString 
>1685	Identifier	CString 
>1686	Identifier	Result
>1687	Condition	 
>1688	Identifier	Seconds
>1689	IfStatement	if ( Minutes )
>1690	CompoundStatement	 
>1691	ExpressionStatement	 
>1692	AssignmentExpr	Result += ' '
>1693	PrimaryExpression	' '
>1694	Identifier	Result
>1695	ExpressionStatement	 
>1696	AssignmentExpr	Result += ( Minutes > 1 ) ? g_strDateSMinutes 
>1697	ConditionalExpression	( Minutes > 1 ) ? g_strDateSMinutes 
>1698	Identifier	g_strDateSMinute
>1699	Identifier	g_strDateSMinutes
>1700	Condition	Minutes > 1
>1701	RelationalExpression	Minutes > 1
>1702	PrimaryExpression	1
>1703	Identifier	Minutes
>1704	Identifier	Result
>1705	ExpressionStatement	 
>1706	AssignmentExpr	Result += CString 
>1707	CallExpression	CString 
>1708	ArgumentList	Minutes
>1709	Argument	Minutes
>1710	Identifier	Minutes
>1711	Callee	CString 
>1712	Identifier	CString 
>1713	Identifier	Result
>1714	Condition	 
>1715	Identifier	Minutes
>1716	IfStatement	if ( Hours )
>1717	CompoundStatement	 
>1718	ExpressionStatement	 
>1719	AssignmentExpr	Result += ' '
>1720	PrimaryExpression	' '
>1721	Identifier	Result
>1722	ExpressionStatement	 
>1723	AssignmentExpr	Result += ( Hours > 1 ) ? g_strDateSHours 
>1724	ConditionalExpression	( Hours > 1 ) ? g_strDateSHours 
>1725	Identifier	g_strDateSHour
>1726	Identifier	g_strDateSHours
>1727	Condition	Hours > 1
>1728	RelationalExpression	Hours > 1
>1729	PrimaryExpression	1
>1730	Identifier	Hours
>1731	Identifier	Result
>1732	ExpressionStatement	 
>1733	AssignmentExpr	Result += CString 
>1734	CallExpression	CString 
>1735	ArgumentList	Hours
>1736	Argument	Hours
>1737	Identifier	Hours
>1738	Callee	CString 
>1739	Identifier	CString 
>1740	Identifier	Result
>1741	Condition	 
>1742	Identifier	Hours
>1743	IfStatement	if ( Days )
>1744	CompoundStatement	 
>1745	ExpressionStatement	 
>1746	AssignmentExpr	Result += ' '
>1747	PrimaryExpression	' '
>1748	Identifier	Result
>1749	ExpressionStatement	 
>1750	AssignmentExpr	Result += ( Days > 1 ) ? g_strDateSDays 
>1751	ConditionalExpression	( Days > 1 ) ? g_strDateSDays 
>1752	Identifier	g_strDateSDay
>1753	Identifier	g_strDateSDays
>1754	Condition	Days > 1
>1755	RelationalExpression	Days > 1
>1756	PrimaryExpression	1
>1757	Identifier	Days
>1758	Identifier	Result
>1759	ExpressionStatement	 
>1760	AssignmentExpr	Result = CString 
>1761	CallExpression	CString 
>1762	ArgumentList	Days
>1763	Argument	Days
>1764	Identifier	Days
>1765	Callee	CString 
>1766	Identifier	CString 
>1767	Identifier	Result
>1768	Condition	 
>1769	Identifier	Days
>1770	IdentifierDeclStatement	 
>1771	IdentifierDecl	Result
>1772	Identifier	Result
>1773	IdentifierDeclType	CString
>1774	ExpressionStatement	 
>1775	AssignmentExpr	Hours %= 24
>1776	PrimaryExpression	24
>1777	Identifier	Hours
>1778	IdentifierDeclStatement	 
>1779	IdentifierDecl	Days = Hours / 24
>1780	AssignmentExpr	Days = Hours / 24
>1781	MultiplicativeExpression	Hours / 24
>1782	PrimaryExpression	24
>1783	Identifier	Hours
>1784	Identifier	Days
>1785	Identifier	Days
>1786	IdentifierDeclType	long
>1787	ExpressionStatement	 
>1788	AssignmentExpr	Minutes %= 60
>1789	PrimaryExpression	60
>1790	Identifier	Minutes
>1791	IdentifierDeclStatement	 
>1792	IdentifierDecl	Hours = Minutes / 60
>1793	AssignmentExpr	Hours = Minutes / 60
>1794	MultiplicativeExpression	Minutes / 60
>1795	PrimaryExpression	60
>1796	Identifier	Minutes
>1797	Identifier	Hours
>1798	Identifier	Hours
>1799	IdentifierDeclType	long
>1800	ExpressionStatement	 
>1801	AssignmentExpr	Seconds %= 60
>1802	PrimaryExpression	60
>1803	Identifier	Seconds
>1804	IdentifierDeclStatement	 
>1805	IdentifierDecl	Minutes = Seconds / 60
>1806	AssignmentExpr	Minutes = Seconds / 60
>1807	MultiplicativeExpression	Seconds / 60
>1808	PrimaryExpression	60
>1809	Identifier	Seconds
>1810	Identifier	Minutes
>1811	Identifier	Minutes
>1812	IdentifierDeclType	long
>1813	IdentifierDeclStatement	 
>1814	IdentifierDecl	Seconds = abs ( After - Before )
>1815	AssignmentExpr	Seconds = abs ( After - Before )
>1816	CallExpression	abs ( After - Before )
>1817	ArgumentList	After - Before
>1818	Argument	After - Before
>1819	AdditiveExpression	After - Before
>1820	Identifier	Before
>1821	Identifier	After
>1822	Callee	abs
>1823	Identifier	abs
>1824	Identifier	Seconds
>1825	Identifier	Seconds
>1826	IdentifierDeclType	long
>1848	FunctionDef	CDate 
>1849	ParameterList	const CDate & After , const CDate & Before
>1850	Parameter	 
>1851	Identifier	Before
>1852	ParameterType	const CDate &
>1853	Parameter	 
>1854	Identifier	After
>1855	ParameterType	const CDate &
>1856	ReturnType	CString
>1857	CompoundStatement	 
>1858	ReturnStatement	 
>1859	CallExpression	GetElapsedTime ( After . m_TTime , Before . m_TTime )
>1860	ArgumentList	After . m_TTime
>1861	Argument	Before . m_TTime
>1862	MemberAccess	Before . m_TTime
>1863	Identifier	m_TTime
>1864	Identifier	Before
>1865	Argument	After . m_TTime
>1866	MemberAccess	After . m_TTime
>1867	Identifier	m_TTime
>1868	Identifier	After
>1869	Callee	GetElapsedTime
>1870	Identifier	GetElapsedTime
>1879	FunctionDef	CDate 
>1880	ParameterList	int y , int m
>1881	Parameter	 
>1882	Identifier	m
>1883	ParameterType	int
>1884	Parameter	 
>1885	Identifier	y
>1886	ParameterType	int
>1887	ReturnType	long int
>1888	CompoundStatement	 
>1889	ReturnStatement	 
>1890	Identifier	result
>1891	ExpressionStatement	 
>1892	AssignmentExpr	result = y
>1893	Identifier	y
>1894	Identifier	result
>1895	IfStatement	if ( m <= 2 )
>1896	ExpressionStatement	 
>1897	AssignmentExpr	y -= 1
>1898	PrimaryExpression	1
>1899	Identifier	y
>1900	Condition	 
>1901	RelationalExpression	m <= 2
>1902	PrimaryExpression	2
>1903	Identifier	m
>1904	IdentifierDeclStatement	 
>1905	IdentifierDecl	result
>1906	Identifier	result
>1907	IdentifierDeclType	long int
>1914	FunctionDef	CDate 
>1915	ParameterList	int m
>1916	Parameter	 
>1917	Identifier	m
>1918	ParameterType	int
>1919	ReturnType	long int
>1920	CompoundStatement	 
>1921	ReturnStatement	 
>1922	Identifier	result
>1923	IfStatement	if ( m <= 2 )
>1924	ElseStatement	else
>1925	ExpressionStatement	 
>1926	AssignmentExpr	result = m + 1
>1927	AdditiveExpression	m + 1
>1928	PrimaryExpression	1
>1929	Identifier	m
>1930	Identifier	result
>1931	ExpressionStatement	 
>1932	AssignmentExpr	result = m + 13
>1933	AdditiveExpression	m + 13
>1934	PrimaryExpression	13
>1935	Identifier	m
>1936	Identifier	result
>1937	Condition	 
>1938	RelationalExpression	m <= 2
>1939	PrimaryExpression	2
>1940	Identifier	m
>1941	IdentifierDeclStatement	 
>1942	IdentifierDecl	result
>1943	Identifier	result
>1944	IdentifierDeclType	long int
>1950	FunctionDef	CDate 
>1951	ParameterList	int m , int d , int y
>1952	Parameter	 
>1953	Identifier	y
>1954	ParameterType	int
>1955	Parameter	 
>1956	Identifier	d
>1957	ParameterType	int
>1958	Parameter	 
>1959	Identifier	m
>1960	ParameterType	int
>1961	ReturnType	long int
>1962	CompoundStatement	 
>1963	ReturnStatement	 
>1964	AdditiveExpression	1461 * funct1 ( y , m ) / 4 + 153 * funct2 ( m ) / 5 + d
>1965	AdditiveExpression	153 * funct2 ( m ) / 5 + d
>1966	Identifier	d
>1967	MultiplicativeExpression	153 * funct2 ( m ) / 5
>1968	MultiplicativeExpression	funct2 ( m ) / 5
>1969	PrimaryExpression	5
>1970	CallExpression	funct2 ( m )
>1971	ArgumentList	m
>1972	Argument	m
>1973	Identifier	m
>1974	Callee	funct2
>1975	Identifier	funct2
>1976	PrimaryExpression	153
>1977	MultiplicativeExpression	1461 * funct1 ( y , m ) / 4
>1978	MultiplicativeExpression	funct1 ( y , m ) / 4
>1979	PrimaryExpression	4
>1980	CallExpression	funct1 ( y , m )
>1981	ArgumentList	y
>1982	Argument	m
>1983	Identifier	m
>1984	Argument	y
>1985	Identifier	y
>1986	Callee	funct1
>1987	Identifier	funct1
>1988	PrimaryExpression	1461
>1997	FunctionDef	CDate 
>1998	ParameterList	const time_t * Clock , CString & Result
>1999	Parameter	 
>2000	Identifier	Result
>2001	ParameterType	CString &
>2002	Parameter	 
>2003	Identifier	Clock
>2004	ParameterType	const time_t *
>2005	ReturnType	bool
>2006	CompoundStatement	 
>2007	ReturnStatement	 
>2008	EqualityExpression	ResultPtr != NULL
>2009	Identifier	NULL
>2010	Identifier	ResultPtr
>2011	IfStatement	if ( ResultPtr )
>2012	CompoundStatement	 
>2013	ExpressionStatement	 
>2014	CallExpression	Result . Trim32 ( )
>2015	ArgumentList	 
>2016	Callee	Result . Trim32
>2017	MemberAccess	Result . Trim32
>2018	Identifier	Trim32
>2019	Identifier	Result
>2020	ExpressionStatement	 
>2021	AssignmentExpr	Result = ResultPtr
>2022	Identifier	ResultPtr
>2023	Identifier	Result
>2024	Condition	 
>2025	Identifier	ResultPtr
>2026	ExpressionStatement	 
>2027	Statement	 
>2028	Statement	 
>2029	Statement	 
>2030	Statement	 
>2031	Statement	 
>2032	Statement	 
>2033	Statement	 
>2034	Statement	 
>2035	Statement	 
>2036	Statement	 
>2037	Statement	 
>2038	Statement	 
>2039	Statement	 
>2040	Statement	 
>2041	Statement	 
>2042	Statement	 
>2043	Statement	 
>2044	IdentifierDeclStatement	 
>2045	IdentifierDecl	Buffer [ KBYTE ]
>2046	Identifier	KBYTE
>2047	Identifier	Buffer
>2048	IdentifierDeclType	char [ KBYTE ]
>2057	FunctionDef	CDate 
>2058	ParameterList	const struct tm * Tm , CString & Result
>2059	Parameter	 
>2060	Identifier	Result
>2061	ParameterType	CString &
>2062	Parameter	 
>2063	Identifier	Tm
>2064	ParameterType	const struct tm *
>2065	ReturnType	bool
>2066	CompoundStatement	 
>2067	ReturnStatement	 
>2068	EqualityExpression	ResultPtr != NULL
>2069	Identifier	NULL
>2070	Identifier	ResultPtr
>2071	IfStatement	if ( ResultPtr )
>2072	CompoundStatement	 
>2073	ExpressionStatement	 
>2074	CallExpression	Result . Trim32 ( )
>2075	ArgumentList	 
>2076	Callee	Result . Trim32
>2077	MemberAccess	Result . Trim32
>2078	Identifier	Trim32
>2079	Identifier	Result
>2080	ExpressionStatement	 
>2081	AssignmentExpr	Result = ResultPtr
>2082	Identifier	ResultPtr
>2083	Identifier	Result
>2084	Condition	 
>2085	Identifier	ResultPtr
>2086	ExpressionStatement	 
>2087	Statement	 
>2088	Statement	 
>2089	Statement	 
>2090	Statement	 
>2091	Statement	 
>2092	Statement	 
>2093	Statement	 
>2094	Statement	 
>2095	Statement	 
>2096	Statement	 
>2097	Statement	 
>2098	Statement	 
>2099	Statement	 
>2100	IdentifierDeclStatement	 
>2101	IdentifierDecl	Buffer [ KBYTE ]
>2102	Identifier	KBYTE
>2103	Identifier	Buffer
>2104	IdentifierDeclType	char [ KBYTE ]
<19=28,27,20
<20=24,21
<21=23,22
<24=26,25
<28=47,31,29
<29=30
<31=45,32
<32=43,39,37,33
<33=34
<34=36,35
<37=38
<39=40
<40=42,41
<43=44
<45=46
<47=48
<48=58,49
<49=50
<50=51
<51=55,52
<52=54,53
<55=57,56
<58=59
<70=79,78,71
<71=75,72
<72=74,73
<75=77,76
<79=98,82,80
<80=81
<82=96,83
<83=94,90,88,84
<84=85
<85=87,86
<88=89
<90=91
<91=93,92
<94=95
<96=97
<98=99
<99=109,100
<100=101
<101=102
<102=106,103
<103=105,104
<106=108,107
<109=110
<121=130,129,122
<122=126,123
<123=125,124
<126=128,127
<130=149,133,131
<131=132
<133=147,134
<134=145,141,139,135
<135=136
<136=138,137
<139=140
<141=142
<142=144,143
<145=146
<147=148
<149=150
<150=160,151
<151=152
<152=153
<153=157,154
<154=156,155
<157=159,158
<160=161
<172=181,180,173
<173=177,174
<174=176,175
<177=179,178
<181=200,184,182
<182=183
<184=198,185
<185=196,192,190,186
<186=187
<187=189,188
<190=191
<192=193
<193=195,194
<196=197
<198=199
<200=201
<201=211,202
<202=203
<203=204
<204=208,205
<205=207,206
<208=210,209
<211=212
<223=228,224
<224=225
<225=227,226
<228=229
<229=277,250,230
<230=231
<231=241,232
<232=233
<233=239,234
<234=237,235
<235=236
<237=238
<239=240
<241=242
<242=248,243
<243=244
<244=245
<245=247,246
<248=249
<250=262,251
<251=252
<252=261,253
<253=259,254
<254=255
<255=256
<256=258,257
<259=260
<262=263
<263=275,264
<264=271,269,265
<265=266
<266=268,267
<269=270
<271=272
<272=274,273
<275=276
<277=278
<288=290,289
<290=300,291
<291=292
<292=298,293
<293=296,294
<294=295
<296=297
<298=299
<300=301
<301=307,302
<302=303
<303=304
<304=306,305
<307=308
<315=321,320,316
<316=317
<317=319,318
<321=333,324,322
<322=323
<324=325
<325=331,326
<326=329,327
<327=328
<329=330
<331=332
<333=334
<334=336,335
<342=351,350,343
<343=347,344
<344=346,345
<347=349,348
<351=354,352
<352=353
<354=355
<355=363,356
<356=361,359,357
<357=358
<359=360
<361=362
<363=364
<370=382,381,371
<371=378,375,372
<372=374,373
<375=377,376
<378=380,379
<382=383
<383=384
<384=398,385
<385=396,394,392,390,388,386
<386=387
<388=389
<390=391
<392=393
<394=395
<396=397
<398=399
<409=421,420,410
<410=417,414,411
<411=413,412
<414=416,415
<417=419,418
<421=918,465,459,453,447,424,422
<422=423
<424=425
<425=445,426
<426=443,441,427
<427=428
<428=440,429
<429=437,430
<430=434,431
<431=433,432
<434=436,435
<437=439,438
<441=442
<443=444
<445=446
<447=448
<448=450,449
<450=452,451
<453=454
<454=456,455
<456=458,457
<459=460
<460=462,461
<462=464,463
<465=903,802,466
<466=467
<467=787,697,468
<468=469
<469=682,581,470
<470=471
<471=566,476,472
<472=473
<473=474
<474=475
<476=532,494,477
<477=478
<478=491,479
<479=481,480
<481=487,482
<482=485,483
<483=484
<485=486
<487=488
<488=490,489
<491=493,492
<494=530,513,495
<495=496
<496=497
<497=510,498
<498=500,499
<500=506,501
<501=504,502
<502=503
<504=505
<506=507
<507=509,508
<510=512,511
<513=514
<514=527,515
<515=517,516
<517=523,518
<518=521,519
<519=520
<521=522
<523=524
<524=526,525
<527=529,528
<530=531
<532=564,549,533
<533=534
<534=535
<535=546,536
<536=542,537
<537=540,538
<538=539
<540=541
<542=543
<543=545,544
<546=548,547
<549=550
<550=561,551
<551=557,552
<552=555,553
<553=554
<555=556
<557=558
<558=560,559
<561=563,562
<564=565
<566=567
<567=573,568
<568=570,569
<570=572,571
<573=580,574
<574=576,575
<576=577
<577=579,578
<581=648,610,595,582
<582=589,583
<583=584
<584=586,585
<586=588,587
<589=590
<590=592,591
<592=594,593
<595=596
<596=607,597
<597=603,598
<598=601,599
<599=600
<601=602
<603=604
<604=606,605
<607=609,608
<610=646,629,611
<611=612
<612=613
<613=626,614
<614=616,615
<616=622,617
<617=620,618
<618=619
<620=621
<622=623
<623=625,624
<626=628,627
<629=630
<630=643,631
<631=633,632
<633=639,634
<634=637,635
<635=636
<637=638
<639=640
<640=642,641
<643=645,644
<646=647
<648=680,665,649
<649=650
<650=651
<651=662,652
<652=658,653
<653=656,654
<654=655
<656=657
<658=659
<659=661,660
<662=664,663
<665=666
<666=677,667
<667=673,668
<668=671,669
<669=670
<671=672
<673=674
<674=676,675
<677=679,678
<680=681
<682=683
<683=689,684
<684=686,685
<686=688,687
<689=696,690
<690=692,691
<692=693
<693=695,694
<697=753,715,698
<698=699
<699=712,700
<700=702,701
<702=708,703
<703=706,704
<704=705
<706=707
<708=709
<709=711,710
<712=714,713
<715=751,734,716
<716=717
<717=718
<718=731,719
<719=721,720
<721=727,722
<722=725,723
<723=724
<725=726
<727=728
<728=730,729
<731=733,732
<734=735
<735=748,736
<736=738,737
<738=744,739
<739=742,740
<740=741
<742=743
<744=745
<745=747,746
<748=750,749
<751=752
<753=785,770,754
<754=755
<755=756
<756=767,757
<757=763,758
<758=761,759
<759=760
<761=762
<763=764
<764=766,765
<767=769,768
<770=771
<771=782,772
<772=778,773
<773=776,774
<774=775
<776=777
<778=779
<779=781,780
<782=784,783
<785=786
<787=788
<788=794,789
<789=791,790
<791=793,792
<794=801,795
<795=797,796
<797=798
<798=800,799
<802=869,831,816,803
<803=810,804
<804=805
<805=807,806
<807=809,808
<810=811
<811=813,812
<813=815,814
<816=817
<817=828,818
<818=824,819
<819=822,820
<820=821
<822=823
<824=825
<825=827,826
<828=830,829
<831=867,850,832
<832=833
<833=834
<834=847,835
<835=837,836
<837=843,838
<838=841,839
<839=840
<841=842
<843=844
<844=846,845
<847=849,848
<850=851
<851=864,852
<852=854,853
<854=860,855
<855=858,856
<856=857
<858=859
<860=861
<861=863,862
<864=866,865
<867=868
<869=901,886,870
<870=871
<871=872
<872=883,873
<873=879,874
<874=877,875
<875=876
<877=878
<879=880
<880=882,881
<883=885,884
<886=887
<887=898,888
<888=894,889
<889=892,890
<890=891
<892=893
<894=895
<895=897,896
<898=900,899
<901=902
<903=904
<904=910,905
<905=907,906
<907=909,908
<910=917,911
<911=913,912
<913=914
<914=916,915
<918=919
<919=931,920
<920=927,925,921
<921=922
<922=924,923
<925=926
<927=928
<928=930,929
<931=932
<952=961,960,953
<953=957,954
<954=956,955
<957=959,958
<961=1016,1007,1003,994,980,966,962
<962=963
<963=965,964
<966=967
<967=979,978,968
<968=977,969
<969=975,970
<970=971
<971=972
<972=974,973
<975=976
<980=981
<981=993,992,982
<982=991,983
<983=989,984
<984=985
<985=986
<986=988,987
<989=990
<994=995
<995=1001,996
<996=999,997
<997=998
<999=1000
<1001=1002
<1003=1004
<1004=1006,1005
<1007=1008
<1008=1014,1009
<1009=1012,1010
<1010=1011
<1012=1013
<1014=1015
<1016=1017
<1017=1019,1018
<1032=1044,1043,1033
<1033=1040,1037,1034
<1034=1036,1035
<1037=1039,1038
<1040=1042,1041
<1044=1517,1516,1497,1496,1482,1481,1464,1463,1446,1442,1438,1434,1423,1408,1344,1343,1342,1341,1340,1339,1338,1337,1336,1335,1334,1333,1332,1331,1330,1329,1045,1047,1281,1282,1283,1284,1285,1286,1287,1288,1289,1290,1291,1292,1293,1294,1295,1296,1297,1298,1299,1300,1301,1302,1303,1304,1305,1306,1307,1308,1309,1310,1311,1312,1313,1314,1315,1316,1317,1318,1319,1320,1321,1322,1323,1324,1325,1326,1327,1328
<1045=1046
<1047=1279,1048
<1048=1275,1262,1224,1186,1179,1120,1107,1101,1051,1049
<1049=1050
<1051=1099,1052
<1052=1095,1086,1081,1070,1066,1062,1053
<1053=1054
<1054=1060,1055
<1055=1058,1056
<1056=1057
<1058=1059
<1060=1061
<1062=1063
<1063=1065,1064
<1066=1067
<1067=1069,1068
<1070=1071
<1071=1080,1072
<1072=1078,1073
<1073=1074
<1074=1075
<1075=1077,1076
<1078=1079
<1081=1082
<1082=1084,1083
<1084=1085
<1086=1087
<1087=1093,1088
<1088=1091,1089
<1089=1090
<1091=1092
<1093=1094
<1095=1096
<1096=1098,1097
<1099=1100
<1101=1102
<1102=1104,1103
<1104=1106,1105
<1107=1108
<1108=1118,1109
<1109=1116,1114,1110
<1110=1111
<1111=1113,1112
<1114=1115
<1116=1117
<1118=1119
<1120=1168,1163,1121
<1121=1122
<1122=1123
<1123=1159,1150,1147,1124
<1124=1125
<1125=1136,1126
<1126=1128,1127
<1128=1129
<1129=1135,1130
<1130=1132,1131
<1132=1134,1133
<1136=1137
<1137=1143,1138
<1138=1139
<1139=1140
<1140=1142,1141
<1143=1144
<1144=1146,1145
<1147=1149,1148
<1150=1151
<1151=1158,1152
<1152=1156,1153
<1153=1154
<1154=1155
<1156=1157
<1159=1160
<1160=1162,1161
<1163=1164
<1164=1165
<1165=1167,1166
<1168=1169
<1169=1175,1170
<1170=1171
<1171=1172
<1172=1174,1173
<1175=1176
<1176=1178,1177
<1179=1180
<1180=1185,1184,1181
<1181=1183,1182
<1186=1220,1211,1208,1187
<1187=1188
<1188=1197,1189
<1189=1191,1190
<1191=1192
<1192=1194,1193
<1194=1196,1195
<1197=1198
<1198=1204,1199
<1199=1200
<1200=1201
<1201=1203,1202
<1204=1205
<1205=1207,1206
<1208=1210,1209
<1211=1212
<1212=1219,1213
<1213=1217,1214
<1214=1215
<1215=1216
<1217=1218
<1220=1221
<1221=1223,1222
<1224=1258,1249,1246,1225
<1225=1226
<1226=1235,1227
<1227=1229,1228
<1229=1230
<1230=1232,1231
<1232=1234,1233
<1235=1236
<1236=1242,1237
<1237=1238
<1238=1239
<1239=1241,1240
<1242=1243
<1243=1245,1244
<1246=1248,1247
<1249=1250
<1250=1257,1251
<1251=1255,1252
<1252=1253
<1253=1254
<1255=1256
<1258=1259
<1259=1261,1260
<1262=1269,1263
<1263=1264
<1264=1266,1265
<1266=1268,1267
<1269=1270
<1270=1272,1271
<1272=1274,1273
<1275=1276
<1276=1278,1277
<1279=1280
<1344=1345
<1345=1407,1406,1346
<1346=1405,1347
<1347=1403,1348
<1348=1401,1397,1393,1391,1385,1381,1375,1369,1367,1361,1359,1353,1349
<1349=1350
<1350=1352,1351
<1353=1354
<1354=1358,1355
<1355=1357,1356
<1359=1360
<1361=1362
<1362=1366,1363
<1363=1365,1364
<1367=1368
<1369=1370
<1370=1374,1371
<1371=1373,1372
<1375=1376
<1376=1380,1377
<1377=1379,1378
<1381=1382
<1382=1384,1383
<1385=1386
<1386=1390,1387
<1387=1389,1388
<1391=1392
<1393=1394
<1394=1396,1395
<1397=1398
<1398=1400,1399
<1401=1402
<1403=1404
<1408=1409
<1409=1421,1410
<1410=1417,1415,1411
<1411=1412
<1412=1414,1413
<1415=1416
<1417=1418
<1418=1420,1419
<1421=1422
<1423=1424
<1424=1430,1425
<1425=1428,1426
<1426=1427
<1428=1429
<1430=1431
<1431=1433,1432
<1434=1435
<1435=1437,1436
<1438=1439
<1439=1441,1440
<1442=1443
<1443=1445,1444
<1446=1447
<1447=1462,1461,1448
<1448=1460,1449
<1449=1459,1458,1457,1456,1455,1454,1453,1452,1451,1450
<1464=1465
<1465=1480,1479,1466
<1466=1478,1467
<1467=1477,1476,1475,1474,1473,1472,1471,1470,1469,1468
<1482=1483
<1483=1495,1494,1484
<1484=1493,1485
<1485=1492,1491,1490,1489,1488,1487,1486
<1497=1498
<1498=1515,1514,1499
<1499=1513,1500
<1500=1512,1511,1510,1509,1508,1507,1506,1505,1504,1503,1502,1501
<1517=1518
<1518=1521,1520,1519
<1573=1582,1581,1574
<1574=1578,1575
<1575=1577,1576
<1578=1580,1579
<1582=1585,1583
<1583=1584
<1585=1611,1586
<1586=1607,1598,1589,1587
<1587=1588
<1589=1590
<1590=1596,1591
<1591=1594,1592
<1592=1593
<1594=1595
<1596=1597
<1598=1599
<1599=1605,1600
<1600=1601
<1601=1602
<1602=1604,1603
<1605=1606
<1607=1608
<1608=1610,1609
<1611=1612
<1612=1623,1613
<1613=1621,1614
<1614=1619,1617,1615
<1615=1616
<1617=1618
<1619=1620
<1621=1622
<1635=1644,1643,1636
<1636=1640,1637
<1637=1639,1638
<1640=1642,1641
<1644=1813,1804,1800,1791,1787,1778,1774,1770,1743,1716,1689,1666,1647,1645
<1645=1646
<1647=1657,1648
<1648=1653,1649
<1649=1650
<1650=1652,1651
<1653=1654
<1654=1656,1655
<1657=1658
<1658=1665,1659
<1659=1661,1660
<1661=1662
<1662=1664,1663
<1666=1687,1667
<1667=1678,1668
<1668=1669
<1669=1677,1670
<1670=1673,1672,1671
<1673=1674
<1674=1676,1675
<1678=1679
<1679=1686,1680
<1680=1684,1681
<1681=1682
<1682=1683
<1684=1685
<1687=1688
<1689=1714,1690
<1690=1705,1695,1691
<1691=1692
<1692=1694,1693
<1695=1696
<1696=1704,1697
<1697=1700,1699,1698
<1700=1701
<1701=1703,1702
<1705=1706
<1706=1713,1707
<1707=1711,1708
<1708=1709
<1709=1710
<1711=1712
<1714=1715
<1716=1741,1717
<1717=1732,1722,1718
<1718=1719
<1719=1721,1720
<1722=1723
<1723=1731,1724
<1724=1727,1726,1725
<1727=1728
<1728=1730,1729
<1732=1733
<1733=1740,1734
<1734=1738,1735
<1735=1736
<1736=1737
<1738=1739
<1741=1742
<1743=1768,1744
<1744=1759,1749,1745
<1745=1746
<1746=1748,1747
<1749=1750
<1750=1758,1751
<1751=1754,1753,1752
<1754=1755
<1755=1757,1756
<1759=1760
<1760=1767,1761
<1761=1765,1762
<1762=1763
<1763=1764
<1765=1766
<1768=1769
<1770=1771
<1771=1773,1772
<1774=1775
<1775=1777,1776
<1778=1779
<1779=1786,1785,1780
<1780=1784,1781
<1781=1783,1782
<1787=1788
<1788=1790,1789
<1791=1792
<1792=1799,1798,1793
<1793=1797,1794
<1794=1796,1795
<1800=1801
<1801=1803,1802
<1804=1805
<1805=1812,1811,1806
<1806=1810,1807
<1807=1809,1808
<1813=1814
<1814=1826,1825,1815
<1815=1824,1816
<1816=1822,1817
<1817=1818
<1818=1819
<1819=1821,1820
<1822=1823
<1848=1857,1856,1849
<1849=1853,1850
<1850=1852,1851
<1853=1855,1854
<1857=1858
<1858=1859
<1859=1869,1860
<1860=1865,1861
<1861=1862
<1862=1864,1863
<1865=1866
<1866=1868,1867
<1869=1870
<1879=1888,1887,1880
<1880=1884,1881
<1881=1883,1882
<1884=1886,1885
<1888=1904,1895,1891,1889
<1889=1890
<1891=1892
<1892=1894,1893
<1895=1900,1896
<1896=1897
<1897=1899,1898
<1900=1901
<1901=1903,1902
<1904=1905
<1905=1907,1906
<1914=1920,1919,1915
<1915=1916
<1916=1918,1917
<1920=1941,1923,1921
<1921=1922
<1923=1937,1931,1924
<1924=1925
<1925=1926
<1926=1930,1927
<1927=1929,1928
<1931=1932
<1932=1936,1933
<1933=1935,1934
<1937=1938
<1938=1940,1939
<1941=1942
<1942=1944,1943
<1950=1962,1961,1951
<1951=1958,1955,1952
<1952=1954,1953
<1955=1957,1956
<1958=1960,1959
<1962=1963
<1963=1964
<1964=1977,1965
<1965=1967,1966
<1967=1976,1968
<1968=1970,1969
<1970=1974,1971
<1971=1972
<1972=1973
<1974=1975
<1977=1988,1978
<1978=1980,1979
<1980=1986,1981
<1981=1984,1982
<1982=1983
<1984=1985
<1986=1987
<1997=2006,2005,1998
<1998=2002,1999
<1999=2001,2000
<2002=2004,2003
<2006=2044,2043,2042,2041,2040,2039,2038,2037,2036,2035,2034,2033,2032,2031,2030,2029,2028,2027,2026,2011,2007
<2007=2008
<2008=2010,2009
<2011=2024,2012
<2012=2020,2013
<2013=2014
<2014=2016,2015
<2016=2017
<2017=2019,2018
<2020=2021
<2021=2023,2022
<2024=2025
<2044=2045
<2045=2048,2047,2046
<2057=2066,2065,2058
<2058=2062,2059
<2059=2061,2060
<2062=2064,2063
<2066=2100,2099,2098,2097,2096,2095,2094,2093,2092,2091,2090,2089,2088,2087,2086,2071,2067
<2067=2068
<2068=2070,2069
<2071=2084,2072
<2072=2080,2073
<2073=2074
<2074=2076,2075
<2076=2077
<2077=2079,2078
<2080=2081
<2081=2083,2082
<2084=2085
<2100=2101
<2101=2104,2103,2102
