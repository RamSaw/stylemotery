>11	FunctionDef	P_RecursiveSound (sector_t * sec , int soundblocks)
>12	ParameterList	sector_t * sec , int soundblocks
>13	Parameter	 
>14	Identifier	soundblocks
>15	ParameterType	int
>16	Parameter	 
>17	Identifier	sec
>18	ParameterType	sector_t *
>19	ReturnType	void
>20	CompoundStatement	 
>21	ForStatement	for ( i = 0 ; i < sec -> linecount ; i ++ )
>22	CompoundStatement	 
>23	IfStatement	if ( check -> flags & ML_SOUNDBLOCK )
>24	ElseStatement	else
>25	ExpressionStatement	 
>26	CallExpression	P_RecursiveSound ( other , soundblocks )
>27	ArgumentList	other
>28	Argument	soundblocks
>29	Identifier	soundblocks
>30	Argument	other
>31	Identifier	other
>32	Callee	P_RecursiveSound
>33	Identifier	P_RecursiveSound
>34	CompoundStatement	 
>35	IfStatement	if ( ! soundblocks )
>36	ExpressionStatement	 
>37	CallExpression	P_RecursiveSound ( other , 1 )
>38	ArgumentList	other
>39	Argument	1
>40	PrimaryExpression	1
>41	Argument	other
>42	Identifier	other
>43	Callee	P_RecursiveSound
>44	Identifier	P_RecursiveSound
>45	Condition	 
>46	UnaryOp	! soundblocks
>47	Identifier	soundblocks
>48	UnaryOperator	!
>49	Condition	 
>50	BitAndExpression	check -> flags & ML_SOUNDBLOCK
>51	Identifier	ML_SOUNDBLOCK
>52	PtrMemberAccess	check -> flags
>53	Identifier	flags
>54	Identifier	check
>55	ExpressionStatement	 
>56	MemberAccess	g -> sides [ check -> sidenum [ 0 ] ] . sector
>57	Identifier	sector
>58	ArrayIndexing	g -> sides [ check -> sidenum [ 0 ] ]
>59	ArrayIndexing	check -> sidenum [ 0 ]
>60	PrimaryExpression	0
>61	PtrMemberAccess	check -> sidenum
>62	Identifier	sidenum
>63	Identifier	check
>64	PtrMemberAccess	g -> sides
>65	Identifier	sides
>66	Identifier	g
>67	Statement	 
>68	Statement	 
>69	ExpressionStatement	 
>70	MemberAccess	g -> sides [ check -> sidenum [ 1 ] ] . sector
>71	Identifier	sector
>72	ArrayIndexing	g -> sides [ check -> sidenum [ 1 ] ]
>73	ArrayIndexing	check -> sidenum [ 1 ]
>74	PrimaryExpression	1
>75	PtrMemberAccess	check -> sidenum
>76	Identifier	sidenum
>77	Identifier	check
>78	PtrMemberAccess	g -> sides
>79	Identifier	sides
>80	Identifier	g
>81	Statement	 
>82	Statement	 
>83	Statement	 
>84	Statement	 
>85	Statement	 
>86	Statement	 
>87	Statement	 
>88	Statement	 
>89	Statement	 
>90	Statement	 
>91	Statement	 
>92	Statement	 
>93	Statement	 
>94	Statement	 
>95	Statement	 
>96	Statement	 
>97	Statement	 
>98	Statement	 
>99	Statement	 
>100	Statement	 
>101	Statement	 
>102	Statement	 
>103	ContinueStatement	 
>104	Statement	 
>105	Statement	 
>106	Statement	 
>107	Statement	 
>108	Statement	 
>109	Statement	 
>110	Statement	 
>111	Statement	 
>112	Statement	 
>113	ExpressionStatement	 
>114	CallExpression	P_LineOpening ( check )
>115	ArgumentList	check
>116	Argument	check
>117	Identifier	check
>118	Callee	P_LineOpening
>119	Identifier	P_LineOpening
>120	IfStatement	if ( ! ( check -> flags & ML_TWOSIDED ) )
>121	ElseStatement	else
>122	Statement	 
>123	ContinueStatement	 
>124	Condition	 
>125	UnaryOp	! ( check -> flags & ML_TWOSIDED )
>126	BitAndExpression	check -> flags & ML_TWOSIDED
>127	Identifier	ML_TWOSIDED
>128	PtrMemberAccess	check -> flags
>129	Identifier	flags
>130	Identifier	check
>131	UnaryOperator	!
>132	ExpressionStatement	 
>133	AssignmentExpr	check = sec -> lines [ i ]
>134	ArrayIndexing	sec -> lines [ i ]
>135	Identifier	i
>136	PtrMemberAccess	sec -> lines
>137	Identifier	lines
>138	Identifier	sec
>139	Identifier	check
>140	IncDecOp	 
>141	IncDec	++
>142	Identifier	i
>143	Condition	 
>144	RelationalExpression	i < sec -> linecount
>145	PtrMemberAccess	sec -> linecount
>146	Identifier	linecount
>147	Identifier	sec
>148	Identifier	i
>149	ForInit	 
>150	AssignmentExpr	i = 0
>151	PrimaryExpression	0
>152	Identifier	i
>153	ExpressionStatement	 
>154	PtrMemberAccess	g -> soundtarget
>155	Identifier	soundtarget
>156	Identifier	g
>157	Statement	 
>158	Statement	 
>159	Statement	 
>160	Statement	 
>161	Statement	 
>162	ExpressionStatement	 
>163	AssignmentExpr	sec -> soundtraversed = soundblocks + 1
>164	AdditiveExpression	soundblocks + 1
>165	PrimaryExpression	1
>166	Identifier	soundblocks
>167	PtrMemberAccess	sec -> soundtraversed
>168	Identifier	soundtraversed
>169	Identifier	sec
>170	ExpressionStatement	 
>171	PtrMemberAccess	g -> validcount
>172	Identifier	validcount
>173	Identifier	g
>174	Statement	 
>175	Statement	 
>176	Statement	 
>177	Statement	 
>178	Statement	 
>179	CompoundStatement	 
>180	ReturnStatement	 
>181	Statement	 
>182	Statement	 
>183	Statement	 
>184	Statement	 
>185	Statement	 
>186	Statement	 
>187	Statement	 
>188	Statement	 
>189	Statement	 
>190	Statement	 
>191	Statement	 
>192	Statement	 
>193	Statement	 
>194	Statement	 
>195	Statement	 
>196	Statement	 
>197	Statement	 
>198	Statement	 
>199	Statement	 
>200	IdentifierDeclStatement	 
>201	IdentifierDecl	* other
>202	Identifier	other
>203	IdentifierDeclType	sector_t *
>204	IdentifierDeclStatement	 
>205	IdentifierDecl	* check
>206	Identifier	check
>207	IdentifierDeclType	line_t *
>208	IdentifierDeclStatement	 
>209	IdentifierDecl	i
>210	Identifier	i
>211	IdentifierDeclType	int
>241	FunctionDef	P_NoiseAlert (mobj_t * target , mobj_t * emmiter)
>242	ParameterList	mobj_t * target , mobj_t * emmiter
>243	Parameter	 
>244	Identifier	emmiter
>245	ParameterType	mobj_t *
>246	Parameter	 
>247	Identifier	target
>248	ParameterType	mobj_t *
>249	ReturnType	void
>250	CompoundStatement	 
>251	ExpressionStatement	 
>252	CallExpression	P_RecursiveSound ( emmiter -> subsector -> sector , 0 )
>253	ArgumentList	emmiter -> subsector -> sector
>254	Argument	0
>255	PrimaryExpression	0
>256	Argument	emmiter -> subsector -> sector
>257	PtrMemberAccess	emmiter -> subsector -> sector
>258	Identifier	sector
>259	PtrMemberAccess	emmiter -> subsector
>260	Identifier	subsector
>261	Identifier	emmiter
>262	Callee	P_RecursiveSound
>263	Identifier	P_RecursiveSound
>264	ExpressionStatement	 
>265	IncDecOp	g -> validcount ++
>266	IncDec	++
>267	PtrMemberAccess	g -> validcount
>268	Identifier	validcount
>269	Identifier	g
>270	Statement	 
>271	ExpressionStatement	 
>272	AssignmentExpr	g -> soundtarget = target
>273	Identifier	target
>274	PtrMemberAccess	g -> soundtarget
>275	Identifier	soundtarget
>276	Identifier	g
>277	Statement	 
>292	FunctionDef	P_CheckMeleeRange (mobj_t * actor)
>293	ParameterList	mobj_t * actor
>294	Parameter	 
>295	Identifier	actor
>296	ParameterType	mobj_t *
>297	ReturnType	qboolean
>298	CompoundStatement	 
>299	ReturnStatement	 
>300	Identifier	true
>301	IfStatement	if ( ! P_CheckSight ( actor , actor -> target ) )
>302	ReturnStatement	 
>303	Identifier	false
>304	Condition	 
>305	UnaryOp	! P_CheckSight ( actor , actor -> target )
>306	CallExpression	P_CheckSight ( actor , actor -> target )
>307	ArgumentList	actor
>308	Argument	actor -> target
>309	PtrMemberAccess	actor -> target
>310	Identifier	target
>311	Identifier	actor
>312	Argument	actor
>313	Identifier	actor
>314	Callee	P_CheckSight
>315	Identifier	P_CheckSight
>316	UnaryOperator	!
>317	IfStatement	if ( dist >= MELEERANGE - 20 * FRACUNIT + pl -> info -> radius )
>318	ReturnStatement	 
>319	Identifier	false
>320	Condition	 
>321	RelationalExpression	dist >= MELEERANGE - 20 * FRACUNIT + pl -> info -> radius
>322	AdditiveExpression	MELEERANGE - 20 * FRACUNIT + pl -> info -> radius
>323	AdditiveExpression	20 * FRACUNIT + pl -> info -> radius
>324	PtrMemberAccess	pl -> info -> radius
>325	Identifier	radius
>326	PtrMemberAccess	pl -> info
>327	Identifier	info
>328	Identifier	pl
>329	MultiplicativeExpression	20 * FRACUNIT
>330	Identifier	FRACUNIT
>331	PrimaryExpression	20
>332	Identifier	MELEERANGE
>333	Identifier	dist
>334	ExpressionStatement	 
>335	AssignmentExpr	dist = P_AproxDistance ( pl -> x - actor -> x , pl -> y - actor -> y )
>336	CallExpression	P_AproxDistance ( pl -> x - actor -> x , pl -> y - actor -> y )
>337	ArgumentList	pl -> x - actor -> x
>338	Argument	pl -> y - actor -> y
>339	AdditiveExpression	pl -> y - actor -> y
>340	PtrMemberAccess	actor -> y
>341	Identifier	y
>342	Identifier	actor
>343	PtrMemberAccess	pl -> y
>344	Identifier	y
>345	Identifier	pl
>346	Argument	pl -> x - actor -> x
>347	AdditiveExpression	pl -> x - actor -> x
>348	PtrMemberAccess	actor -> x
>349	Identifier	x
>350	Identifier	actor
>351	PtrMemberAccess	pl -> x
>352	Identifier	x
>353	Identifier	pl
>354	Callee	P_AproxDistance
>355	Identifier	P_AproxDistance
>356	Identifier	dist
>357	ExpressionStatement	 
>358	AssignmentExpr	pl = actor -> target
>359	PtrMemberAccess	actor -> target
>360	Identifier	target
>361	Identifier	actor
>362	Identifier	pl
>363	IfStatement	if ( ! actor -> target )
>364	ReturnStatement	 
>365	Identifier	false
>366	Condition	 
>367	UnaryOp	! actor -> target
>368	PtrMemberAccess	actor -> target
>369	Identifier	target
>370	Identifier	actor
>371	UnaryOperator	!
>372	IdentifierDeclStatement	 
>373	IdentifierDecl	dist
>374	Identifier	dist
>375	IdentifierDeclType	fixed_t
>376	IdentifierDeclStatement	 
>377	IdentifierDecl	* pl
>378	Identifier	pl
>379	IdentifierDeclType	mobj_t *
>403	FunctionDef	P_CheckMissileRange (mobj_t * actor)
>404	ParameterList	mobj_t * actor
>405	Parameter	 
>406	Identifier	actor
>407	ParameterType	mobj_t *
>408	ReturnType	qboolean
>409	CompoundStatement	 
>410	ReturnStatement	 
>411	Identifier	true
>412	IfStatement	if ( P_Random ( ) < dist )
>413	ReturnStatement	 
>414	Identifier	false
>415	Condition	 
>416	RelationalExpression	P_Random ( ) < dist
>417	Identifier	dist
>418	CallExpression	P_Random ( )
>419	ArgumentList	 
>420	Callee	P_Random
>421	Identifier	P_Random
>422	IfStatement	if ( actor -> type == MT_CYBORG && dist > 160 )
>423	ExpressionStatement	 
>424	AssignmentExpr	dist = 160
>425	PrimaryExpression	160
>426	Identifier	dist
>427	Condition	 
>428	AndExpression	actor -> type == MT_CYBORG && dist > 160
>429	RelationalExpression	dist > 160
>430	PrimaryExpression	160
>431	Identifier	dist
>432	EqualityExpression	actor -> type == MT_CYBORG
>433	Identifier	MT_CYBORG
>434	PtrMemberAccess	actor -> type
>435	Identifier	type
>436	Identifier	actor
>437	IfStatement	if ( dist > 200 )
>438	ExpressionStatement	 
>439	AssignmentExpr	dist = 200
>440	PrimaryExpression	200
>441	Identifier	dist
>442	Condition	 
>443	RelationalExpression	dist > 200
>444	PrimaryExpression	200
>445	Identifier	dist
>446	IfStatement	if ( actor -> type == MT_CYBORG || actor -> type == MT_SPIDER || actor -> type == MT_SKULL )
>447	CompoundStatement	 
>448	ExpressionStatement	 
>449	AssignmentExpr	dist >>= 1
>450	PrimaryExpression	1
>451	Identifier	dist
>452	Condition	 
>453	OrExpression	actor -> type == MT_CYBORG || actor -> type == MT_SPIDER || actor -> type == MT_SKULL
>454	OrExpression	actor -> type == MT_SPIDER || actor -> type == MT_SKULL
>455	EqualityExpression	actor -> type == MT_SKULL
>456	Identifier	MT_SKULL
>457	PtrMemberAccess	actor -> type
>458	Identifier	type
>459	Identifier	actor
>460	EqualityExpression	actor -> type == MT_SPIDER
>461	Identifier	MT_SPIDER
>462	PtrMemberAccess	actor -> type
>463	Identifier	type
>464	Identifier	actor
>465	EqualityExpression	actor -> type == MT_CYBORG
>466	Identifier	MT_CYBORG
>467	PtrMemberAccess	actor -> type
>468	Identifier	type
>469	Identifier	actor
>470	IfStatement	if ( actor -> type == MT_UNDEAD )
>471	CompoundStatement	 
>472	ExpressionStatement	 
>473	AssignmentExpr	dist >>= 1
>474	PrimaryExpression	1
>475	Identifier	dist
>476	IfStatement	if ( dist < 196 )
>477	ReturnStatement	 
>478	Identifier	false
>479	Condition	 
>480	RelationalExpression	dist < 196
>481	PrimaryExpression	196
>482	Identifier	dist
>483	Condition	 
>484	EqualityExpression	actor -> type == MT_UNDEAD
>485	Identifier	MT_UNDEAD
>486	PtrMemberAccess	actor -> type
>487	Identifier	type
>488	Identifier	actor
>489	IfStatement	if ( actor -> type == MT_VILE )
>490	CompoundStatement	 
>491	IfStatement	if ( dist > 14 * 64 )
>492	ReturnStatement	 
>493	Identifier	false
>494	Condition	 
>495	RelationalExpression	dist > 14 * 64
>496	MultiplicativeExpression	14 * 64
>497	PrimaryExpression	64
>498	PrimaryExpression	14
>499	Identifier	dist
>500	Condition	 
>501	EqualityExpression	actor -> type == MT_VILE
>502	Identifier	MT_VILE
>503	PtrMemberAccess	actor -> type
>504	Identifier	type
>505	Identifier	actor
>506	ExpressionStatement	 
>507	AssignmentExpr	dist >>= 16
>508	PrimaryExpression	16
>509	Identifier	dist
>510	IfStatement	if ( ! actor -> info -> meleestate )
>511	ExpressionStatement	 
>512	AssignmentExpr	dist -= 128 * FRACUNIT
>513	MultiplicativeExpression	128 * FRACUNIT
>514	Identifier	FRACUNIT
>515	PrimaryExpression	128
>516	Identifier	dist
>517	Condition	 
>518	UnaryOp	! actor -> info -> meleestate
>519	PtrMemberAccess	actor -> info -> meleestate
>520	Identifier	meleestate
>521	PtrMemberAccess	actor -> info
>522	Identifier	info
>523	Identifier	actor
>524	UnaryOperator	!
>525	ExpressionStatement	 
>526	AssignmentExpr	dist = P_AproxDistance ( actor -> x - actor -> target -> x , actor -> y - actor -> target -> y ) - 64 * \
>527	AdditiveExpression	P_AproxDistance ( actor -> x - actor -> target -> x , actor -> y - actor -> target -> y ) - 64 * FRACUNIT
>528	MultiplicativeExpression	64 * FRACUNIT
>529	Identifier	FRACUNIT
>530	PrimaryExpression	64
>531	CallExpression	P_AproxDistance ( actor -> x - actor -> target -> x , actor -> y - actor -> target -> y )
>532	ArgumentList	actor -> x - actor -> target -> x
>533	Argument	actor -> y - actor -> target -> y
>534	AdditiveExpression	actor -> y - actor -> target -> y
>535	PtrMemberAccess	actor -> target -> y
>536	Identifier	y
>537	PtrMemberAccess	actor -> target
>538	Identifier	target
>539	Identifier	actor
>540	PtrMemberAccess	actor -> y
>541	Identifier	y
>542	Identifier	actor
>543	Argument	actor -> x - actor -> target -> x
>544	AdditiveExpression	actor -> x - actor -> target -> x
>545	PtrMemberAccess	actor -> target -> x
>546	Identifier	x
>547	PtrMemberAccess	actor -> target
>548	Identifier	target
>549	Identifier	actor
>550	PtrMemberAccess	actor -> x
>551	Identifier	x
>552	Identifier	actor
>553	Callee	P_AproxDistance
>554	Identifier	P_AproxDistance
>555	Identifier	dist
>556	IfStatement	if ( actor -> reactiontime )
>557	ReturnStatement	 
>558	Identifier	false
>559	Condition	 
>560	PtrMemberAccess	actor -> reactiontime
>561	Identifier	reactiontime
>562	Identifier	actor
>563	IfStatement	if ( actor -> flags & MF_JUSTHIT )
>564	CompoundStatement	 
>565	ReturnStatement	 
>566	Identifier	true
>567	ExpressionStatement	 
>568	AssignmentExpr	actor -> flags &= ~MF_JUSTHIT
>569	Identifier	~MF_JUSTHIT
>570	PtrMemberAccess	actor -> flags
>571	Identifier	flags
>572	Identifier	actor
>573	Condition	 
>574	BitAndExpression	actor -> flags & MF_JUSTHIT
>575	Identifier	MF_JUSTHIT
>576	PtrMemberAccess	actor -> flags
>577	Identifier	flags
>578	Identifier	actor
>579	IfStatement	if ( ! P_CheckSight ( actor , actor -> target ) )
>580	ReturnStatement	 
>581	Identifier	false
>582	Condition	 
>583	UnaryOp	! P_CheckSight ( actor , actor -> target )
>584	CallExpression	P_CheckSight ( actor , actor -> target )
>585	ArgumentList	actor
>586	Argument	actor -> target
>587	PtrMemberAccess	actor -> target
>588	Identifier	target
>589	Identifier	actor
>590	Argument	actor
>591	Identifier	actor
>592	Callee	P_CheckSight
>593	Identifier	P_CheckSight
>594	UnaryOperator	!
>595	IdentifierDeclStatement	 
>596	IdentifierDecl	dist
>597	Identifier	dist
>598	IdentifierDeclType	fixed_t
>635	FunctionDef	P_Move (mobj_t * actor)
>636	ParameterList	mobj_t * actor
>637	Parameter	 
>638	Identifier	actor
>639	ParameterType	mobj_t *
>640	ReturnType	qboolean
>641	CompoundStatement	 
>642	ReturnStatement	 
>643	Identifier	true
>644	IfStatement	if ( ! ( actor -> flags & MF_FLOAT ) )
>645	ExpressionStatement	 
>646	AssignmentExpr	actor -> z = actor -> floorz
>647	PtrMemberAccess	actor -> floorz
>648	Identifier	floorz
>649	Identifier	actor
>650	PtrMemberAccess	actor -> z
>651	Identifier	z
>652	Identifier	actor
>653	Condition	 
>654	UnaryOp	! ( actor -> flags & MF_FLOAT )
>655	BitAndExpression	actor -> flags & MF_FLOAT
>656	Identifier	MF_FLOAT
>657	PtrMemberAccess	actor -> flags
>658	Identifier	flags
>659	Identifier	actor
>660	UnaryOperator	!
>661	IfStatement	if ( ! try_ok )
>662	ElseStatement	else
>663	ExpressionStatement	 
>664	AssignmentExpr	actor -> z -= FLOATSPEED
>665	Identifier	FLOATSPEED
>666	PtrMemberAccess	actor -> z
>667	Identifier	z
>668	Identifier	actor
>669	CompoundStatement	 
>670	ReturnStatement	 
>671	Identifier	good
>672	CompoundStatement	 
>673	IfStatement	if ( P_UseSpecialLine ( actor , ld , 0 ) )
>674	ExpressionStatement	 
>675	AssignmentExpr	good = true
>676	Identifier	true
>677	Identifier	good
>678	Condition	 
>679	CallExpression	P_UseSpecialLine ( actor , ld , 0 )
>680	ArgumentList	actor
>681	Argument	0
>682	PrimaryExpression	0
>683	Argument	ld
>684	Identifier	ld
>685	Argument	actor
>686	Identifier	actor
>687	Callee	P_UseSpecialLine
>688	Identifier	P_UseSpecialLine
>689	ExpressionStatement	 
>690	Statement	 
>691	Statement	 
>692	Statement	 
>693	Statement	 
>694	Statement	 
>695	Statement	 
>696	Statement	 
>697	Statement	 
>698	Statement	 
>699	Statement	 
>700	Statement	 
>701	Statement	 
>702	Statement	 
>703	Statement	 
>704	Statement	 
>705	Statement	 
>706	Statement	 
>707	Statement	 
>708	Statement	 
>709	Statement	 
>710	ExpressionStatement	 
>711	AssignmentExpr	good = false
>712	Identifier	false
>713	Identifier	good
>714	ExpressionStatement	 
>715	AssignmentExpr	actor -> movedir = DI_NODIR
>716	Identifier	DI_NODIR
>717	PtrMemberAccess	actor -> movedir
>718	Identifier	movedir
>719	Identifier	actor
>720	ReturnStatement	 
>721	Identifier	false
>722	Statement	 
>723	Statement	 
>724	Statement	 
>725	Statement	 
>726	Statement	 
>727	Statement	 
>728	Statement	 
>729	Statement	 
>730	CompoundStatement	 
>731	ReturnStatement	 
>732	Identifier	true
>733	ExpressionStatement	 
>734	AssignmentExpr	actor -> flags |= MF_INFLOAT
>735	Identifier	MF_INFLOAT
>736	PtrMemberAccess	actor -> flags
>737	Identifier	flags
>738	Identifier	actor
>739	ExpressionStatement	 
>740	AssignmentExpr	actor -> z += FLOATSPEED
>741	Identifier	FLOATSPEED
>742	PtrMemberAccess	actor -> z
>743	Identifier	z
>744	Identifier	actor
>745	Statement	 
>746	Statement	 
>747	Statement	 
>748	Statement	 
>749	Statement	 
>750	Statement	 
>751	Statement	 
>752	Statement	 
>753	Statement	 
>754	Statement	 
>755	Statement	 
>756	Statement	 
>757	Statement	 
>758	Statement	 
>759	Statement	 
>760	Statement	 
>761	Statement	 
>762	Statement	 
>763	Statement	 
>764	Statement	 
>765	Statement	 
>766	Statement	 
>767	Statement	 
>768	Statement	 
>769	Condition	 
>770	UnaryOp	! try_ok
>771	Identifier	try_ok
>772	UnaryOperator	!
>773	ExpressionStatement	 
>774	AssignmentExpr	try_ok = P_TryMove ( actor , tryx , tryy )
>775	CallExpression	P_TryMove ( actor , tryx , tryy )
>776	ArgumentList	actor
>777	Argument	tryy
>778	Identifier	tryy
>779	Argument	tryx
>780	Identifier	tryx
>781	Argument	actor
>782	Identifier	actor
>783	Callee	P_TryMove
>784	Identifier	P_TryMove
>785	Identifier	try_ok
>786	ExpressionStatement	 
>787	AssignmentExpr	tryy = actor -> y + actor -> info -> speed * yspeed [ actor -> movedir ]
>788	AdditiveExpression	actor -> y + actor -> info -> speed * yspeed [ actor -> movedir ]
>789	MultiplicativeExpression	actor -> info -> speed * yspeed [ actor -> movedir ]
>790	ArrayIndexing	yspeed [ actor -> movedir ]
>791	PtrMemberAccess	actor -> movedir
>792	Identifier	movedir
>793	Identifier	actor
>794	Identifier	yspeed
>795	PtrMemberAccess	actor -> info -> speed
>796	Identifier	speed
>797	PtrMemberAccess	actor -> info
>798	Identifier	info
>799	Identifier	actor
>800	PtrMemberAccess	actor -> y
>801	Identifier	y
>802	Identifier	actor
>803	Identifier	tryy
>804	ExpressionStatement	 
>805	AssignmentExpr	tryx = actor -> x + actor -> info -> speed * xspeed [ actor -> movedir ]
>806	AdditiveExpression	actor -> x + actor -> info -> speed * xspeed [ actor -> movedir ]
>807	MultiplicativeExpression	actor -> info -> speed * xspeed [ actor -> movedir ]
>808	ArrayIndexing	xspeed [ actor -> movedir ]
>809	PtrMemberAccess	actor -> movedir
>810	Identifier	movedir
>811	Identifier	actor
>812	Identifier	xspeed
>813	PtrMemberAccess	actor -> info -> speed
>814	Identifier	speed
>815	PtrMemberAccess	actor -> info
>816	Identifier	info
>817	Identifier	actor
>818	PtrMemberAccess	actor -> x
>819	Identifier	x
>820	Identifier	actor
>821	Identifier	tryx
>822	IfStatement	if ( ( unsigned ) actor -> movedir >= 8 )
>823	ElseStatement	else
>824	CompoundStatement	 
>825	ExpressionStatement	 
>826	AssignmentExpr	actor -> flags &= ~MF_INFLOAT
>827	Identifier	~MF_INFLOAT
>828	PtrMemberAccess	actor -> flags
>829	Identifier	flags
>830	Identifier	actor
>831	ExpressionStatement	 
>832	CallExpression	I_Error ( \"Weird actor->movedir!\" )
>833	ArgumentList	\"Weird actor->movedir!\"
>834	Argument	\"Weird actor->movedir!\"
>835	PrimaryExpression	\"Weird actor->movedir!\"
>836	Callee	I_Error
>837	Identifier	I_Error
>838	Condition	 
>839	RelationalExpression	( unsigned ) actor -> movedir >= 8
>840	PrimaryExpression	8
>841	CastExpression	( unsigned ) actor -> movedir
>842	PtrMemberAccess	actor -> movedir
>843	Identifier	movedir
>844	Identifier	actor
>845	CastTarget	unsigned
>846	IfStatement	if ( actor -> movedir == DI_NODIR )
>847	ReturnStatement	 
>848	Identifier	false
>849	Condition	 
>850	EqualityExpression	actor -> movedir == DI_NODIR
>851	Identifier	DI_NODIR
>852	PtrMemberAccess	actor -> movedir
>853	Identifier	movedir
>854	Identifier	actor
>855	IdentifierDeclStatement	 
>856	IdentifierDecl	good
>857	Identifier	good
>858	IdentifierDeclType	qboolean
>859	IdentifierDeclStatement	 
>860	IdentifierDecl	try_ok
>861	Identifier	try_ok
>862	IdentifierDeclType	qboolean
>863	IdentifierDeclStatement	 
>864	IdentifierDecl	* ld
>865	Identifier	ld
>866	IdentifierDeclType	line_t *
>867	IdentifierDeclStatement	 
>868	IdentifierDecl	tryy
>869	Identifier	tryy
>870	IdentifierDeclType	fixed_t
>871	IdentifierDeclStatement	 
>872	IdentifierDecl	tryx
>873	Identifier	tryx
>874	IdentifierDeclType	fixed_t
>909	FunctionDef	P_TryWalk (mobj_t * actor)
>910	ParameterList	mobj_t * actor
>911	Parameter	 
>912	Identifier	actor
>913	ParameterType	mobj_t *
>914	ReturnType	qboolean
>915	CompoundStatement	 
>916	ReturnStatement	 
>917	Identifier	true
>918	ExpressionStatement	 
>919	AssignmentExpr	actor -> movecount = P_Random ( ) & 15
>920	BitAndExpression	P_Random ( ) & 15
>921	PrimaryExpression	15
>922	CallExpression	P_Random ( )
>923	ArgumentList	 
>924	Callee	P_Random
>925	Identifier	P_Random
>926	PtrMemberAccess	actor -> movecount
>927	Identifier	movecount
>928	Identifier	actor
>929	IfStatement	if ( ! P_Move ( actor ) )
>930	CompoundStatement	 
>931	ReturnStatement	 
>932	Identifier	false
>933	Condition	 
>934	UnaryOp	! P_Move ( actor )
>935	CallExpression	P_Move ( actor )
>936	ArgumentList	actor
>937	Argument	actor
>938	Identifier	actor
>939	Callee	P_Move
>940	Identifier	P_Move
>941	UnaryOperator	!
>952	FunctionDef	P_NewChaseDir (mobj_t * actor)
>953	ParameterList	mobj_t * actor
>954	Parameter	 
>955	Identifier	actor
>956	ParameterType	mobj_t *
>957	ReturnType	void
>958	CompoundStatement	 
>959	ExpressionStatement	 
>960	AssignmentExpr	actor -> movedir = DI_NODIR
>961	Identifier	DI_NODIR
>962	PtrMemberAccess	actor -> movedir
>963	Identifier	movedir
>964	Identifier	actor
>965	IfStatement	if ( turnaround != DI_NODIR )
>966	CompoundStatement	 
>967	IfStatement	if ( P_TryWalk ( actor ) )
>968	ReturnStatement	 
>969	Condition	 
>970	CallExpression	P_TryWalk ( actor )
>971	ArgumentList	actor
>972	Argument	actor
>973	Identifier	actor
>974	Callee	P_TryWalk
>975	Identifier	P_TryWalk
>976	ExpressionStatement	 
>977	AssignmentExpr	actor -> movedir = turnaround
>978	Identifier	turnaround
>979	PtrMemberAccess	actor -> movedir
>980	Identifier	movedir
>981	Identifier	actor
>982	Condition	 
>983	EqualityExpression	turnaround != DI_NODIR
>984	Identifier	DI_NODIR
>985	Identifier	turnaround
>986	IfStatement	if ( P_Random ( ) & 1 )
>987	ElseStatement	else
>988	CompoundStatement	 
>989	ForStatement	for ( tdir = DI_SOUTHEAST ; tdir != ( DI_EAST - 1 ) ; tdir -- )
>990	CompoundStatement	 
>991	IfStatement	if ( tdir != turnaround )
>992	CompoundStatement	 
>993	IfStatement	if ( P_TryWalk ( actor ) )
>994	ReturnStatement	 
>995	Condition	 
>996	CallExpression	P_TryWalk ( actor )
>997	ArgumentList	actor
>998	Argument	actor
>999	Identifier	actor
>1000	Callee	P_TryWalk
>1001	Identifier	P_TryWalk
>1002	ExpressionStatement	 
>1003	AssignmentExpr	actor -> movedir = tdir
>1004	Identifier	tdir
>1005	PtrMemberAccess	actor -> movedir
>1006	Identifier	movedir
>1007	Identifier	actor
>1008	Condition	 
>1009	EqualityExpression	tdir != turnaround
>1010	Identifier	turnaround
>1011	Identifier	tdir
>1012	IncDecOp	 
>1013	IncDec	--
>1014	Identifier	tdir
>1015	Condition	 
>1016	EqualityExpression	tdir != ( DI_EAST - 1 )
>1017	AdditiveExpression	DI_EAST - 1
>1018	PrimaryExpression	1
>1019	Identifier	DI_EAST
>1020	Identifier	tdir
>1021	ForInit	 
>1022	AssignmentExpr	tdir = DI_SOUTHEAST
>1023	Identifier	DI_SOUTHEAST
>1024	Identifier	tdir
>1025	CompoundStatement	 
>1026	ForStatement	for ( tdir = DI_EAST ; tdir <= DI_SOUTHEAST ; tdir ++ )
>1027	CompoundStatement	 
>1028	IfStatement	if ( tdir != turnaround )
>1029	CompoundStatement	 
>1030	IfStatement	if ( P_TryWalk ( actor ) )
>1031	ReturnStatement	 
>1032	Condition	 
>1033	CallExpression	P_TryWalk ( actor )
>1034	ArgumentList	actor
>1035	Argument	actor
>1036	Identifier	actor
>1037	Callee	P_TryWalk
>1038	Identifier	P_TryWalk
>1039	ExpressionStatement	 
>1040	AssignmentExpr	actor -> movedir = tdir
>1041	Identifier	tdir
>1042	PtrMemberAccess	actor -> movedir
>1043	Identifier	movedir
>1044	Identifier	actor
>1045	Condition	 
>1046	EqualityExpression	tdir != turnaround
>1047	Identifier	turnaround
>1048	Identifier	tdir
>1049	IncDecOp	 
>1050	IncDec	++
>1051	Identifier	tdir
>1052	Condition	 
>1053	RelationalExpression	tdir <= DI_SOUTHEAST
>1054	Identifier	DI_SOUTHEAST
>1055	Identifier	tdir
>1056	ForInit	 
>1057	AssignmentExpr	tdir = DI_EAST
>1058	Identifier	DI_EAST
>1059	Identifier	tdir
>1060	Condition	 
>1061	BitAndExpression	P_Random ( ) & 1
>1062	PrimaryExpression	1
>1063	CallExpression	P_Random ( )
>1064	ArgumentList	 
>1065	Callee	P_Random
>1066	Identifier	P_Random
>1067	IfStatement	if ( olddir != DI_NODIR )
>1068	CompoundStatement	 
>1069	IfStatement	if ( P_TryWalk ( actor ) )
>1070	ReturnStatement	 
>1071	Condition	 
>1072	CallExpression	P_TryWalk ( actor )
>1073	ArgumentList	actor
>1074	Argument	actor
>1075	Identifier	actor
>1076	Callee	P_TryWalk
>1077	Identifier	P_TryWalk
>1078	ExpressionStatement	 
>1079	AssignmentExpr	actor -> movedir = olddir
>1080	Identifier	olddir
>1081	PtrMemberAccess	actor -> movedir
>1082	Identifier	movedir
>1083	Identifier	actor
>1084	Condition	 
>1085	EqualityExpression	olddir != DI_NODIR
>1086	Identifier	DI_NODIR
>1087	Identifier	olddir
>1088	IfStatement	if ( d [ 2 ] != DI_NODIR )
>1089	CompoundStatement	 
>1090	IfStatement	if ( P_TryWalk ( actor ) )
>1091	ReturnStatement	 
>1092	Condition	 
>1093	CallExpression	P_TryWalk ( actor )
>1094	ArgumentList	actor
>1095	Argument	actor
>1096	Identifier	actor
>1097	Callee	P_TryWalk
>1098	Identifier	P_TryWalk
>1099	ExpressionStatement	 
>1100	AssignmentExpr	actor -> movedir = d [ 2 ]
>1101	ArrayIndexing	d [ 2 ]
>1102	PrimaryExpression	2
>1103	Identifier	d
>1104	PtrMemberAccess	actor -> movedir
>1105	Identifier	movedir
>1106	Identifier	actor
>1107	Condition	 
>1108	EqualityExpression	d [ 2 ] != DI_NODIR
>1109	Identifier	DI_NODIR
>1110	ArrayIndexing	d [ 2 ]
>1111	PrimaryExpression	2
>1112	Identifier	d
>1113	IfStatement	if ( d [ 1 ] != DI_NODIR )
>1114	CompoundStatement	 
>1115	IfStatement	if ( P_TryWalk ( actor ) )
>1116	CompoundStatement	 
>1117	ReturnStatement	 
>1118	Condition	 
>1119	CallExpression	P_TryWalk ( actor )
>1120	ArgumentList	actor
>1121	Argument	actor
>1122	Identifier	actor
>1123	Callee	P_TryWalk
>1124	Identifier	P_TryWalk
>1125	ExpressionStatement	 
>1126	AssignmentExpr	actor -> movedir = d [ 1 ]
>1127	ArrayIndexing	d [ 1 ]
>1128	PrimaryExpression	1
>1129	Identifier	d
>1130	PtrMemberAccess	actor -> movedir
>1131	Identifier	movedir
>1132	Identifier	actor
>1133	Condition	 
>1134	EqualityExpression	d [ 1 ] != DI_NODIR
>1135	Identifier	DI_NODIR
>1136	ArrayIndexing	d [ 1 ]
>1137	PrimaryExpression	1
>1138	Identifier	d
>1139	IfStatement	if ( d [ 2 ] == turnaround )
>1140	ExpressionStatement	 
>1141	AssignmentExpr	d [ 2 ] = DI_NODIR
>1142	Identifier	DI_NODIR
>1143	ArrayIndexing	d [ 2 ]
>1144	PrimaryExpression	2
>1145	Identifier	d
>1146	Condition	 
>1147	EqualityExpression	d [ 2 ] == turnaround
>1148	Identifier	turnaround
>1149	ArrayIndexing	d [ 2 ]
>1150	PrimaryExpression	2
>1151	Identifier	d
>1152	IfStatement	if ( d [ 1 ] == turnaround )
>1153	ExpressionStatement	 
>1154	AssignmentExpr	d [ 1 ] = DI_NODIR
>1155	Identifier	DI_NODIR
>1156	ArrayIndexing	d [ 1 ]
>1157	PrimaryExpression	1
>1158	Identifier	d
>1159	Condition	 
>1160	EqualityExpression	d [ 1 ] == turnaround
>1161	Identifier	turnaround
>1162	ArrayIndexing	d [ 1 ]
>1163	PrimaryExpression	1
>1164	Identifier	d
>1165	IfStatement	if ( P_Random ( ) > 200 || abs ( deltay ) > abs ( deltax ) )
>1166	CompoundStatement	 
>1167	ExpressionStatement	 
>1168	AssignmentExpr	d [ 2 ] = ( dirtype_t ) tdir
>1169	CastExpression	( dirtype_t ) tdir
>1170	Identifier	tdir
>1171	CastTarget	dirtype_t
>1172	ArrayIndexing	d [ 2 ]
>1173	PrimaryExpression	2
>1174	Identifier	d
>1175	ExpressionStatement	 
>1176	AssignmentExpr	d [ 1 ] = d [ 2 ]
>1177	ArrayIndexing	d [ 2 ]
>1178	PrimaryExpression	2
>1179	Identifier	d
>1180	ArrayIndexing	d [ 1 ]
>1181	PrimaryExpression	1
>1182	Identifier	d
>1183	ExpressionStatement	 
>1184	AssignmentExpr	tdir = d [ 1 ]
>1185	ArrayIndexing	d [ 1 ]
>1186	PrimaryExpression	1
>1187	Identifier	d
>1188	Identifier	tdir
>1189	Condition	 
>1190	OrExpression	P_Random ( ) > 200 || abs ( deltay ) > abs ( deltax )
>1191	RelationalExpression	abs ( deltay ) > abs ( deltax )
>1192	CallExpression	abs ( deltax )
>1193	ArgumentList	deltax
>1194	Argument	deltax
>1195	Identifier	deltax
>1196	Callee	abs
>1197	Identifier	abs
>1198	CallExpression	abs ( deltay )
>1199	ArgumentList	deltay
>1200	Argument	deltay
>1201	Identifier	deltay
>1202	Callee	abs
>1203	Identifier	abs
>1204	RelationalExpression	P_Random ( ) > 200
>1205	PrimaryExpression	200
>1206	CallExpression	P_Random ( )
>1207	ArgumentList	 
>1208	Callee	P_Random
>1209	Identifier	P_Random
>1210	IfStatement	if ( d [ 1 ] != DI_NODIR && d [ 2 ] != DI_NODIR )
>1211	CompoundStatement	 
>1212	IfStatement	if ( actor -> movedir != turnaround && P_TryWalk ( actor ) )
>1213	ReturnStatement	 
>1214	Condition	 
>1215	AndExpression	actor -> movedir != turnaround && P_TryWalk ( actor )
>1216	CallExpression	P_TryWalk ( actor )
>1217	ArgumentList	actor
>1218	Argument	actor
>1219	Identifier	actor
>1220	Callee	P_TryWalk
>1221	Identifier	P_TryWalk
>1222	EqualityExpression	actor -> movedir != turnaround
>1223	Identifier	turnaround
>1224	PtrMemberAccess	actor -> movedir
>1225	Identifier	movedir
>1226	Identifier	actor
>1227	ExpressionStatement	 
>1228	AssignmentExpr	actor -> movedir = diags [ ( ( deltay < 0 ) << 1 ) + ( deltax > 0 ) ]
>1229	ArrayIndexing	diags [ ( ( deltay < 0 ) << 1 ) + ( deltax > 0 ) ]
>1230	AdditiveExpression	( ( deltay < 0 ) << 1 ) + ( deltax > 0 )
>1231	RelationalExpression	deltax > 0
>1232	PrimaryExpression	0
>1233	Identifier	deltax
>1234	ShiftExpression	( deltay < 0 ) << 1
>1235	PrimaryExpression	1
>1236	RelationalExpression	deltay < 0
>1237	PrimaryExpression	0
>1238	Identifier	deltay
>1239	Identifier	diags
>1240	PtrMemberAccess	actor -> movedir
>1241	Identifier	movedir
>1242	Identifier	actor
>1243	Condition	 
>1244	AndExpression	d [ 1 ] != DI_NODIR && d [ 2 ] != DI_NODIR
>1245	EqualityExpression	d [ 2 ] != DI_NODIR
>1246	Identifier	DI_NODIR
>1247	ArrayIndexing	d [ 2 ]
>1248	PrimaryExpression	2
>1249	Identifier	d
>1250	EqualityExpression	d [ 1 ] != DI_NODIR
>1251	Identifier	DI_NODIR
>1252	ArrayIndexing	d [ 1 ]
>1253	PrimaryExpression	1
>1254	Identifier	d
>1255	IfStatement	if ( deltay < - 10 * FRACUNIT )
>1256	ElseStatement	else
>1257	IfStatement	if ( deltay > 10 * FRACUNIT )
>1258	ElseStatement	else
>1259	ExpressionStatement	 
>1260	AssignmentExpr	d [ 2 ] = DI_NODIR
>1261	Identifier	DI_NODIR
>1262	ArrayIndexing	d [ 2 ]
>1263	PrimaryExpression	2
>1264	Identifier	d
>1265	ExpressionStatement	 
>1266	AssignmentExpr	d [ 2 ] = DI_NORTH
>1267	Identifier	DI_NORTH
>1268	ArrayIndexing	d [ 2 ]
>1269	PrimaryExpression	2
>1270	Identifier	d
>1271	Condition	 
>1272	RelationalExpression	deltay > 10 * FRACUNIT
>1273	MultiplicativeExpression	10 * FRACUNIT
>1274	Identifier	FRACUNIT
>1275	PrimaryExpression	10
>1276	Identifier	deltay
>1277	ExpressionStatement	 
>1278	AssignmentExpr	d [ 2 ] = DI_SOUTH
>1279	Identifier	DI_SOUTH
>1280	ArrayIndexing	d [ 2 ]
>1281	PrimaryExpression	2
>1282	Identifier	d
>1283	Condition	 
>1284	RelationalExpression	deltay < - 10 * FRACUNIT
>1285	MultiplicativeExpression	- 10 * FRACUNIT
>1286	Identifier	FRACUNIT
>1287	UnaryOp	- 10
>1288	PrimaryExpression	10
>1289	UnaryOperator	-
>1290	Identifier	deltay
>1291	IfStatement	if ( deltax > 10 * FRACUNIT )
>1292	ElseStatement	else
>1293	IfStatement	if ( deltax < - 10 * FRACUNIT )
>1294	ElseStatement	else
>1295	ExpressionStatement	 
>1296	AssignmentExpr	d [ 1 ] = DI_NODIR
>1297	Identifier	DI_NODIR
>1298	ArrayIndexing	d [ 1 ]
>1299	PrimaryExpression	1
>1300	Identifier	d
>1301	ExpressionStatement	 
>1302	AssignmentExpr	d [ 1 ] = DI_WEST
>1303	Identifier	DI_WEST
>1304	ArrayIndexing	d [ 1 ]
>1305	PrimaryExpression	1
>1306	Identifier	d
>1307	Condition	 
>1308	RelationalExpression	deltax < - 10 * FRACUNIT
>1309	MultiplicativeExpression	- 10 * FRACUNIT
>1310	Identifier	FRACUNIT
>1311	UnaryOp	- 10
>1312	PrimaryExpression	10
>1313	UnaryOperator	-
>1314	Identifier	deltax
>1315	ExpressionStatement	 
>1316	AssignmentExpr	d [ 1 ] = DI_EAST
>1317	Identifier	DI_EAST
>1318	ArrayIndexing	d [ 1 ]
>1319	PrimaryExpression	1
>1320	Identifier	d
>1321	Condition	 
>1322	RelationalExpression	deltax > 10 * FRACUNIT
>1323	MultiplicativeExpression	10 * FRACUNIT
>1324	Identifier	FRACUNIT
>1325	PrimaryExpression	10
>1326	Identifier	deltax
>1327	ExpressionStatement	 
>1328	AssignmentExpr	deltay = actor -> target -> y - actor -> y
>1329	AdditiveExpression	actor -> target -> y - actor -> y
>1330	PtrMemberAccess	actor -> y
>1331	Identifier	y
>1332	Identifier	actor
>1333	PtrMemberAccess	actor -> target -> y
>1334	Identifier	y
>1335	PtrMemberAccess	actor -> target
>1336	Identifier	target
>1337	Identifier	actor
>1338	Identifier	deltay
>1339	ExpressionStatement	 
>1340	AssignmentExpr	deltax = actor -> target -> x - actor -> x
>1341	AdditiveExpression	actor -> target -> x - actor -> x
>1342	PtrMemberAccess	actor -> x
>1343	Identifier	x
>1344	Identifier	actor
>1345	PtrMemberAccess	actor -> target -> x
>1346	Identifier	x
>1347	PtrMemberAccess	actor -> target
>1348	Identifier	target
>1349	Identifier	actor
>1350	Identifier	deltax
>1351	ExpressionStatement	 
>1352	AssignmentExpr	turnaround = opposite [ olddir ]
>1353	ArrayIndexing	opposite [ olddir ]
>1354	Identifier	olddir
>1355	Identifier	opposite
>1356	Identifier	turnaround
>1357	ExpressionStatement	 
>1358	AssignmentExpr	olddir = ( dirtype_t ) actor -> movedir
>1359	CastExpression	( dirtype_t ) actor -> movedir
>1360	PtrMemberAccess	actor -> movedir
>1361	Identifier	movedir
>1362	Identifier	actor
>1363	CastTarget	dirtype_t
>1364	Identifier	olddir
>1365	IfStatement	if ( ! actor -> target )
>1366	ExpressionStatement	 
>1367	CallExpression	I_Error ( \"P_NewChaseDir
>1368	ArgumentList	\"P_NewChaseDir
>1369	Argument	\"P_NewChaseDir
>1370	PrimaryExpression	\"P_NewChaseDir
>1371	Callee	I_Error
>1372	Identifier	I_Error
>1373	Condition	 
>1374	UnaryOp	! actor -> target
>1375	PtrMemberAccess	actor -> target
>1376	Identifier	target
>1377	Identifier	actor
>1378	UnaryOperator	!
>1379	IdentifierDeclStatement	 
>1380	IdentifierDecl	turnaround
>1381	Identifier	turnaround
>1382	IdentifierDeclType	dirtype_t
>1383	IdentifierDeclStatement	 
>1384	IdentifierDecl	olddir
>1385	Identifier	olddir
>1386	IdentifierDeclType	dirtype_t
>1387	IdentifierDeclStatement	 
>1388	IdentifierDecl	tdir
>1389	Identifier	tdir
>1390	IdentifierDeclType	int
>1391	IdentifierDeclStatement	 
>1392	IdentifierDecl	d [ 3 ]
>1393	PrimaryExpression	3
>1394	Identifier	d
>1395	IdentifierDeclType	dirtype_t [ 3 ]
>1396	IdentifierDeclStatement	 
>1397	IdentifierDecl	deltay
>1398	Identifier	deltay
>1399	IdentifierDeclType	fixed_t
>1400	IdentifierDeclStatement	 
>1401	IdentifierDecl	deltax
>1402	Identifier	deltax
>1403	IdentifierDeclType	fixed_t
>1441	FunctionDef	P_LookForPlayers (mobj_t * actor , qboolean allaround)
>1442	ParameterList	mobj_t * actor , qboolean allaround
>1443	Parameter	 
>1444	Identifier	allaround
>1445	ParameterType	qboolean
>1446	Parameter	 
>1447	Identifier	actor
>1448	ParameterType	mobj_t *
>1449	ReturnType	qboolean
>1450	CompoundStatement	 
>1451	ReturnStatement	 
>1452	Identifier	false
>1453	ForStatement	for ( ; ; actor -> lastlook = ( actor -> lastlook + 1 ) & 3 )
>1454	CompoundStatement	 
>1455	ReturnStatement	 
>1456	Identifier	true
>1457	ExpressionStatement	 
>1458	AssignmentExpr	actor -> target = player -> mo
>1459	PtrMemberAccess	player -> mo
>1460	Identifier	mo
>1461	Identifier	player
>1462	PtrMemberAccess	actor -> target
>1463	Identifier	target
>1464	Identifier	actor
>1465	IfStatement	if ( ! allaround )
>1466	CompoundStatement	 
>1467	IfStatement	if ( an > ANG90 && an < ANG270 )
>1468	CompoundStatement	 
>1469	IfStatement	if ( dist > MELEERANGE )
>1470	ContinueStatement	 
>1471	Condition	 
>1472	RelationalExpression	dist > MELEERANGE
>1473	Identifier	MELEERANGE
>1474	Identifier	dist
>1475	ExpressionStatement	 
>1476	AssignmentExpr	dist = P_AproxDistance ( player -> mo -> x - actor -> x , player -> mo -> y - actor -> y )
>1477	CallExpression	P_AproxDistance ( player -> mo -> x - actor -> x , player -> mo -> y - actor -> y )
>1478	ArgumentList	player -> mo -> x - actor -> x
>1479	Argument	player -> mo -> y - actor -> y
>1480	AdditiveExpression	player -> mo -> y - actor -> y
>1481	PtrMemberAccess	actor -> y
>1482	Identifier	y
>1483	Identifier	actor
>1484	PtrMemberAccess	player -> mo -> y
>1485	Identifier	y
>1486	PtrMemberAccess	player -> mo
>1487	Identifier	mo
>1488	Identifier	player
>1489	Argument	player -> mo -> x - actor -> x
>1490	AdditiveExpression	player -> mo -> x - actor -> x
>1491	PtrMemberAccess	actor -> x
>1492	Identifier	x
>1493	Identifier	actor
>1494	PtrMemberAccess	player -> mo -> x
>1495	Identifier	x
>1496	PtrMemberAccess	player -> mo
>1497	Identifier	mo
>1498	Identifier	player
>1499	Callee	P_AproxDistance
>1500	Identifier	P_AproxDistance
>1501	Identifier	dist
>1502	Condition	 
>1503	AndExpression	an > ANG90 && an < ANG270
>1504	RelationalExpression	an < ANG270
>1505	Identifier	ANG270
>1506	Identifier	an
>1507	RelationalExpression	an > ANG90
>1508	Identifier	ANG90
>1509	Identifier	an
>1510	ExpressionStatement	 
>1511	AssignmentExpr	an = R_PointToAngle2 ( actor -> x , actor -> y , player -> mo -> x , player -> mo -> y ) - actor -> angle
>1512	AdditiveExpression	R_PointToAngle2 ( actor -> x , actor -> y , player -> mo -> x , player -> mo -> y ) - actor -> angle
>1513	PtrMemberAccess	actor -> angle
>1514	Identifier	angle
>1515	Identifier	actor
>1516	CallExpression	R_PointToAngle2 ( actor -> x , actor -> y , player -> mo -> x , player -> mo -> y )
>1517	ArgumentList	actor -> x
>1518	Argument	player -> mo -> y
>1519	PtrMemberAccess	player -> mo -> y
>1520	Identifier	y
>1521	PtrMemberAccess	player -> mo
>1522	Identifier	mo
>1523	Identifier	player
>1524	Argument	player -> mo -> x
>1525	PtrMemberAccess	player -> mo -> x
>1526	Identifier	x
>1527	PtrMemberAccess	player -> mo
>1528	Identifier	mo
>1529	Identifier	player
>1530	Argument	actor -> y
>1531	PtrMemberAccess	actor -> y
>1532	Identifier	y
>1533	Identifier	actor
>1534	Argument	actor -> x
>1535	PtrMemberAccess	actor -> x
>1536	Identifier	x
>1537	Identifier	actor
>1538	Callee	R_PointToAngle2
>1539	Identifier	R_PointToAngle2
>1540	Identifier	an
>1541	Condition	 
>1542	UnaryOp	! allaround
>1543	Identifier	allaround
>1544	UnaryOperator	!
>1545	IfStatement	if ( ! P_CheckSight ( actor , player -> mo ) )
>1546	ContinueStatement	 
>1547	Condition	 
>1548	UnaryOp	! P_CheckSight ( actor , player -> mo )
>1549	CallExpression	P_CheckSight ( actor , player -> mo )
>1550	ArgumentList	actor
>1551	Argument	player -> mo
>1552	PtrMemberAccess	player -> mo
>1553	Identifier	mo
>1554	Identifier	player
>1555	Argument	actor
>1556	Identifier	actor
>1557	Callee	P_CheckSight
>1558	Identifier	P_CheckSight
>1559	UnaryOperator	!
>1560	IfStatement	if ( player -> health <= 0 )
>1561	ContinueStatement	 
>1562	Condition	 
>1563	RelationalExpression	player -> health <= 0
>1564	PrimaryExpression	0
>1565	PtrMemberAccess	player -> health
>1566	Identifier	health
>1567	Identifier	player
>1568	ExpressionStatement	 
>1569	ArrayIndexing	g -> players [ actor -> lastlook ]
>1570	PtrMemberAccess	actor -> lastlook
>1571	Identifier	lastlook
>1572	Identifier	actor
>1573	PtrMemberAccess	g -> players
>1574	Identifier	players
>1575	Identifier	g
>1576	Statement	 
>1577	Statement	 
>1578	Statement	 
>1579	Statement	 
>1580	IfStatement	if ( c ++ == 2 || actor -> lastlook == stop )
>1581	CompoundStatement	 
>1582	ReturnStatement	 
>1583	Identifier	false
>1584	Condition	 
>1585	OrExpression	c ++ == 2 || actor -> lastlook == stop
>1586	EqualityExpression	actor -> lastlook == stop
>1587	Identifier	stop
>1588	PtrMemberAccess	actor -> lastlook
>1589	Identifier	lastlook
>1590	Identifier	actor
>1591	EqualityExpression	c ++ == 2
>1592	PrimaryExpression	2
>1593	IncDecOp	c ++
>1594	IncDec	++
>1595	Identifier	c
>1596	ContinueStatement	 
>1597	Statement	 
>1598	Statement	 
>1599	Statement	 
>1600	Statement	 
>1601	Statement	 
>1602	Statement	 
>1603	Statement	 
>1604	Statement	 
>1605	Statement	 
>1606	Statement	 
>1607	Statement	 
>1608	Statement	 
>1609	Statement	 
>1610	AssignmentExpr	 
>1611	BitAndExpression	( actor -> lastlook + 1 ) & 3
>1612	PrimaryExpression	3
>1613	AdditiveExpression	actor -> lastlook + 1
>1614	PrimaryExpression	1
>1615	PtrMemberAccess	actor -> lastlook
>1616	Identifier	lastlook
>1617	Identifier	actor
>1618	PtrMemberAccess	actor -> lastlook
>1619	Identifier	lastlook
>1620	Identifier	actor
>1621	ExpressionStatement	 
>1622	AssignmentExpr	stop = ( actor -> lastlook - 1 ) & 3
>1623	BitAndExpression	( actor -> lastlook - 1 ) & 3
>1624	PrimaryExpression	3
>1625	AdditiveExpression	actor -> lastlook - 1
>1626	PrimaryExpression	1
>1627	PtrMemberAccess	actor -> lastlook
>1628	Identifier	lastlook
>1629	Identifier	actor
>1630	Identifier	stop
>1631	ExpressionStatement	 
>1632	AssignmentExpr	c = 0
>1633	PrimaryExpression	0
>1634	Identifier	c
>1635	ExpressionStatement	 
>1636	AssignmentExpr	sector = actor -> subsector -> sector
>1637	PtrMemberAccess	actor -> subsector -> sector
>1638	Identifier	sector
>1639	PtrMemberAccess	actor -> subsector
>1640	Identifier	subsector
>1641	Identifier	actor
>1642	Identifier	sector
>1643	IdentifierDeclStatement	 
>1644	IdentifierDecl	dist
>1645	Identifier	dist
>1646	IdentifierDeclType	fixed_t
>1647	IdentifierDeclStatement	 
>1648	IdentifierDecl	an
>1649	Identifier	an
>1650	IdentifierDeclType	angle_t
>1651	IdentifierDeclStatement	 
>1652	IdentifierDecl	* sector
>1653	Identifier	sector
>1654	IdentifierDeclType	sector_t *
>1655	IdentifierDeclStatement	 
>1656	IdentifierDecl	* player
>1657	Identifier	player
>1658	IdentifierDeclType	player_t *
>1659	IdentifierDeclStatement	 
>1660	IdentifierDecl	stop
>1661	Identifier	stop
>1662	IdentifierDeclType	int
>1663	IdentifierDeclStatement	 
>1664	IdentifierDecl	c
>1665	Identifier	c
>1666	IdentifierDeclType	int
>1765	FunctionDef	PIT_VileCheck (mobj_t * thing)
>1766	ParameterList	mobj_t * thing
>1767	Parameter	 
>1768	Identifier	thing
>1769	ParameterType	mobj_t *
>1770	ReturnType	qboolean
>1771	CompoundStatement	 
>1772	ReturnStatement	 
>1773	Identifier	false
>1774	IfStatement	if ( ! check )
>1775	ReturnStatement	 
>1776	Identifier	true
>1777	Condition	 
>1778	UnaryOp	! check
>1779	Identifier	check
>1780	UnaryOperator	!
>1781	ExpressionStatement	 
>1782	AssignmentExpr	g -> corpsehit -> height >>= 2
>1783	PrimaryExpression	2
>1784	PtrMemberAccess	g -> corpsehit -> height
>1785	Identifier	height
>1786	PtrMemberAccess	g -> corpsehit
>1787	Identifier	corpsehit
>1788	Identifier	g
>1789	Statement	 
>1790	ExpressionStatement	 
>1791	Statement	 
>1792	Statement	 
>1793	Statement	 
>1794	Statement	 
>1795	Statement	 
>1796	Statement	 
>1797	Statement	 
>1798	Statement	 
>1799	Statement	 
>1800	Statement	 
>1801	Statement	 
>1802	Statement	 
>1803	Statement	 
>1804	Statement	 
>1805	Statement	 
>1806	Statement	 
>1807	Statement	 
>1808	Statement	 
>1809	Statement	 
>1810	Statement	 
>1811	Statement	 
>1812	Statement	 
>1813	Statement	 
>1814	ExpressionStatement	 
>1815	AssignmentExpr	g -> corpsehit -> height <<= 2
>1816	PrimaryExpression	2
>1817	PtrMemberAccess	g -> corpsehit -> height
>1818	Identifier	height
>1819	PtrMemberAccess	g -> corpsehit
>1820	Identifier	corpsehit
>1821	Identifier	g
>1822	Statement	 
>1823	ExpressionStatement	 
>1824	AssignmentExpr	g -> corpsehit -> momy = 0
>1825	PrimaryExpression	0
>1826	PtrMemberAccess	g -> corpsehit -> momy
>1827	Identifier	momy
>1828	PtrMemberAccess	g -> corpsehit
>1829	Identifier	corpsehit
>1830	Identifier	g
>1831	Statement	 
>1832	Statement	 
>1833	Statement	 
>1834	Statement	 
>1835	Statement	 
>1836	Statement	 
>1837	Statement	 
>1838	Statement	 
>1839	ExpressionStatement	 
>1840	AssignmentExpr	g -> corpsehit = thing
>1841	Identifier	thing
>1842	PtrMemberAccess	g -> corpsehit
>1843	Identifier	corpsehit
>1844	Identifier	g
>1845	Statement	 
>1846	ReturnStatement	 
>1847	Identifier	true
>1848	Statement	 
>1849	Statement	 
>1850	Statement	 
>1851	Statement	 
>1852	Statement	 
>1853	Statement	 
>1854	Statement	 
>1855	Statement	 
>1856	Statement	 
>1857	Statement	 
>1858	Statement	 
>1859	Statement	 
>1860	Statement	 
>1861	Statement	 
>1862	Statement	 
>1863	Statement	 
>1864	Statement	 
>1865	Statement	 
>1866	Statement	 
>1867	Statement	 
>1868	Statement	 
>1869	Statement	 
>1870	Statement	 
>1871	Statement	 
>1872	Statement	 
>1873	Statement	 
>1874	Statement	 
>1875	Statement	 
>1876	Statement	 
>1877	Statement	 
>1878	ExpressionStatement	 
>1879	AssignmentExpr	maxdist = thing -> info -> radius + mobjinfo [ MT_VILE ] . radius
>1880	AdditiveExpression	thing -> info -> radius + mobjinfo [ MT_VILE ] . radius
>1881	MemberAccess	mobjinfo [ MT_VILE ] . radius
>1882	Identifier	radius
>1883	ArrayIndexing	mobjinfo [ MT_VILE ]
>1884	Identifier	MT_VILE
>1885	Identifier	mobjinfo
>1886	PtrMemberAccess	thing -> info -> radius
>1887	Identifier	radius
>1888	PtrMemberAccess	thing -> info
>1889	Identifier	info
>1890	Identifier	thing
>1891	Identifier	maxdist
>1892	IfStatement	if ( thing -> info -> raisestate == S_NULL )
>1893	ReturnStatement	 
>1894	Identifier	true
>1895	Condition	 
>1896	EqualityExpression	thing -> info -> raisestate == S_NULL
>1897	Identifier	S_NULL
>1898	PtrMemberAccess	thing -> info -> raisestate
>1899	Identifier	raisestate
>1900	PtrMemberAccess	thing -> info
>1901	Identifier	info
>1902	Identifier	thing
>1903	IfStatement	if ( thing -> tics != - 1 )
>1904	ReturnStatement	 
>1905	Identifier	true
>1906	Condition	 
>1907	EqualityExpression	thing -> tics != - 1
>1908	UnaryOp	- 1
>1909	PrimaryExpression	1
>1910	UnaryOperator	-
>1911	PtrMemberAccess	thing -> tics
>1912	Identifier	tics
>1913	Identifier	thing
>1914	IfStatement	if ( ! ( thing -> flags & MF_CORPSE ) )
>1915	ReturnStatement	 
>1916	Identifier	true
>1917	Condition	 
>1918	UnaryOp	! ( thing -> flags & MF_CORPSE )
>1919	BitAndExpression	thing -> flags & MF_CORPSE
>1920	Identifier	MF_CORPSE
>1921	PtrMemberAccess	thing -> flags
>1922	Identifier	flags
>1923	Identifier	thing
>1924	UnaryOperator	!
>1925	IdentifierDeclStatement	 
>1926	IdentifierDecl	check
>1927	Identifier	check
>1928	IdentifierDeclType	qboolean
>1929	IdentifierDeclStatement	 
>1930	IdentifierDecl	maxdist
>1931	Identifier	maxdist
>1932	IdentifierDeclType	int
>2013	FunctionDef	A_PainShootSkull (mobj_t * actor , angle_t angle)
>2014	ParameterList	mobj_t * actor , angle_t angle
>2015	Parameter	 
>2016	Identifier	angle
>2017	ParameterType	angle_t
>2018	Parameter	 
>2019	Identifier	actor
>2020	ParameterType	mobj_t *
>2021	ReturnType	void
>2022	CompoundStatement	 
>2023	ExpressionStatement	 
>2024	CallExpression	A_SkullAttack ( newmobj , 0 )
>2025	ArgumentList	newmobj
>2026	Argument	0
>2027	PrimaryExpression	0
>2028	Argument	newmobj
>2029	Identifier	newmobj
>2030	Callee	A_SkullAttack
>2031	Identifier	A_SkullAttack
>2032	ExpressionStatement	 
>2033	AssignmentExpr	newmobj -> target = actor -> target
>2034	PtrMemberAccess	actor -> target
>2035	Identifier	target
>2036	Identifier	actor
>2037	PtrMemberAccess	newmobj -> target
>2038	Identifier	target
>2039	Identifier	newmobj
>2040	IfStatement	if ( ! P_TryMove ( newmobj , newmobj -> x , newmobj -> y ) )
>2041	CompoundStatement	 
>2042	ReturnStatement	 
>2043	ExpressionStatement	 
>2044	CallExpression	P_DamageMobj ( newmobj , actor , actor , 10000 )
>2045	ArgumentList	newmobj
>2046	Argument	10000
>2047	PrimaryExpression	10000
>2048	Argument	actor
>2049	Identifier	actor
>2050	Argument	actor
>2051	Identifier	actor
>2052	Argument	newmobj
>2053	Identifier	newmobj
>2054	Callee	P_DamageMobj
>2055	Identifier	P_DamageMobj
>2056	Condition	 
>2057	UnaryOp	! P_TryMove ( newmobj , newmobj -> x , newmobj -> y )
>2058	CallExpression	P_TryMove ( newmobj , newmobj -> x , newmobj -> y )
>2059	ArgumentList	newmobj
>2060	Argument	newmobj -> y
>2061	PtrMemberAccess	newmobj -> y
>2062	Identifier	y
>2063	Identifier	newmobj
>2064	Argument	newmobj -> x
>2065	PtrMemberAccess	newmobj -> x
>2066	Identifier	x
>2067	Identifier	newmobj
>2068	Argument	newmobj
>2069	Identifier	newmobj
>2070	Callee	P_TryMove
>2071	Identifier	P_TryMove
>2072	UnaryOperator	!
>2073	ExpressionStatement	 
>2074	AssignmentExpr	newmobj = P_SpawnMobj ( x , y , z , MT_SKULL )
>2075	CallExpression	P_SpawnMobj ( x , y , z , MT_SKULL )
>2076	ArgumentList	x
>2077	Argument	MT_SKULL
>2078	Identifier	MT_SKULL
>2079	Argument	z
>2080	Identifier	z
>2081	Argument	y
>2082	Identifier	y
>2083	Argument	x
>2084	Identifier	x
>2085	Callee	P_SpawnMobj
>2086	Identifier	P_SpawnMobj
>2087	Identifier	newmobj
>2088	ExpressionStatement	 
>2089	AssignmentExpr	z = actor -> z + 8 * FRACUNIT
>2090	AdditiveExpression	actor -> z + 8 * FRACUNIT
>2091	MultiplicativeExpression	8 * FRACUNIT
>2092	Identifier	FRACUNIT
>2093	PrimaryExpression	8
>2094	PtrMemberAccess	actor -> z
>2095	Identifier	z
>2096	Identifier	actor
>2097	Identifier	z
>2098	ExpressionStatement	 
>2099	AssignmentExpr	y = actor -> y + FixedMul ( prestep , finesine [ an ] )
>2100	AdditiveExpression	actor -> y + FixedMul ( prestep , finesine [ an ] )
>2101	CallExpression	FixedMul ( prestep , finesine [ an ] )
>2102	ArgumentList	prestep
>2103	Argument	finesine [ an ]
>2104	ArrayIndexing	finesine [ an ]
>2105	Identifier	an
>2106	Identifier	finesine
>2107	Argument	prestep
>2108	Identifier	prestep
>2109	Callee	FixedMul
>2110	Identifier	FixedMul
>2111	PtrMemberAccess	actor -> y
>2112	Identifier	y
>2113	Identifier	actor
>2114	Identifier	y
>2115	ExpressionStatement	 
>2116	AssignmentExpr	x = actor -> x + FixedMul ( prestep , finecosine [ an ] )
>2117	AdditiveExpression	actor -> x + FixedMul ( prestep , finecosine [ an ] )
>2118	CallExpression	FixedMul ( prestep , finecosine [ an ] )
>2119	ArgumentList	prestep
>2120	Argument	finecosine [ an ]
>2121	ArrayIndexing	finecosine [ an ]
>2122	Identifier	an
>2123	Identifier	finecosine
>2124	Argument	prestep
>2125	Identifier	prestep
>2126	Callee	FixedMul
>2127	Identifier	FixedMul
>2128	PtrMemberAccess	actor -> x
>2129	Identifier	x
>2130	Identifier	actor
>2131	Identifier	x
>2132	ExpressionStatement	 
>2133	AssignmentExpr	prestep = 4 * FRACUNIT + 3 * ( actor -> info -> radius + mobjinfo [ MT_SKULL ] . radius ) / 2
>2134	AdditiveExpression	4 * FRACUNIT + 3 * ( actor -> info -> radius + mobjinfo [ MT_SKULL ] . radius ) / 2
>2135	MultiplicativeExpression	3 * ( actor -> info -> radius + mobjinfo [ MT_SKULL ] . radius ) / 2
>2136	MultiplicativeExpression	( actor -> info -> radius + mobjinfo [ MT_SKULL ] . radius ) / 2
>2137	PrimaryExpression	2
>2138	AdditiveExpression	actor -> info -> radius + mobjinfo [ MT_SKULL ] . radius
>2139	MemberAccess	mobjinfo [ MT_SKULL ] . radius
>2140	Identifier	radius
>2141	ArrayIndexing	mobjinfo [ MT_SKULL ]
>2142	Identifier	MT_SKULL
>2143	Identifier	mobjinfo
>2144	PtrMemberAccess	actor -> info -> radius
>2145	Identifier	radius
>2146	PtrMemberAccess	actor -> info
>2147	Identifier	info
>2148	Identifier	actor
>2149	PrimaryExpression	3
>2150	MultiplicativeExpression	4 * FRACUNIT
>2151	Identifier	FRACUNIT
>2152	PrimaryExpression	4
>2153	Identifier	prestep
>2154	ExpressionStatement	 
>2155	AssignmentExpr	an = angle >> ANGLETOFINESHIFT
>2156	ShiftExpression	angle >> ANGLETOFINESHIFT
>2157	Identifier	ANGLETOFINESHIFT
>2158	Identifier	angle
>2159	Identifier	an
>2160	IfStatement	if ( count > 20 )
>2161	ReturnStatement	 
>2162	Condition	 
>2163	RelationalExpression	count > 20
>2164	PrimaryExpression	20
>2165	Identifier	count
>2166	CompoundStatement	 
>2167	ExpressionStatement	 
>2168	AssignmentExpr	currentthinker = currentthinker -> next
>2169	PtrMemberAccess	currentthinker -> next
>2170	Identifier	next
>2171	Identifier	currentthinker
>2172	Identifier	currentthinker
>2173	IfStatement	if ( ( currentthinker -> function . acp1 == ( actionf_p1 ) P_MobjThinker ) && ( ( mobj_t * ) currentthinker ) -> \
>2174	ExpressionStatement	 
>2175	IncDecOp	count ++
>2176	IncDec	++
>2177	Identifier	count
>2178	Condition	 
>2179	AndExpression	( currentthinker -> function . acp1 == ( actionf_p1 ) P_MobjThinker ) && ( ( mobj_t * ) currentthinker ) \
>2180	EqualityExpression	( ( mobj_t * ) currentthinker ) -> type == MT_SKULL
>2181	Identifier	MT_SKULL
>2182	PtrMemberAccess	( ( mobj_t * ) currentthinker ) -> type
>2183	Identifier	type
>2184	CastExpression	( mobj_t * ) currentthinker
>2185	Identifier	currentthinker
>2186	CastTarget	mobj_t *
>2187	EqualityExpression	currentthinker -> function . acp1 == ( actionf_p1 ) P_MobjThinker
>2188	CastExpression	( actionf_p1 ) P_MobjThinker
>2189	Identifier	P_MobjThinker
>2190	CastTarget	actionf_p1
>2191	MemberAccess	currentthinker -> function . acp1
>2192	Identifier	acp1
>2193	PtrMemberAccess	currentthinker -> function
>2194	Identifier	function
>2195	Identifier	currentthinker
>2196	Statement	 
>2197	Statement	 
>2198	Statement	 
>2199	Statement	 
>2200	Statement	 
>2201	Statement	 
>2202	Statement	 
>2203	Statement	 
>2204	Statement	 
>2205	Statement	 
>2206	ExpressionStatement	 
>2207	MemberAccess	g -> thinkercap . next
>2208	Identifier	next
>2209	PtrMemberAccess	g -> thinkercap
>2210	Identifier	thinkercap
>2211	Identifier	g
>2212	Statement	 
>2213	Statement	 
>2214	Statement	 
>2215	ExpressionStatement	 
>2216	AssignmentExpr	count = 0
>2217	PrimaryExpression	0
>2218	Identifier	count
>2219	IdentifierDeclStatement	 
>2220	IdentifierDecl	* currentthinker
>2221	Identifier	currentthinker
>2222	IdentifierDeclType	thinker_t *
>2223	IdentifierDeclStatement	 
>2224	IdentifierDecl	count
>2225	Identifier	count
>2226	IdentifierDeclType	int
>2227	IdentifierDeclStatement	 
>2228	IdentifierDecl	prestep
>2229	Identifier	prestep
>2230	IdentifierDeclType	int
>2231	IdentifierDeclStatement	 
>2232	IdentifierDecl	an
>2233	Identifier	an
>2234	IdentifierDeclType	angle_t
>2235	IdentifierDeclStatement	 
>2236	IdentifierDecl	* newmobj
>2237	Identifier	newmobj
>2238	IdentifierDeclType	mobj_t *
>2239	IdentifierDeclStatement	 
>2240	IdentifierDecl	z
>2241	Identifier	z
>2242	IdentifierDeclType	fixed_t
>2243	IdentifierDeclStatement	 
>2244	IdentifierDecl	y
>2245	Identifier	y
>2246	IdentifierDeclType	fixed_t
>2247	IdentifierDeclStatement	 
>2248	IdentifierDecl	x
>2249	Identifier	x
>2250	IdentifierDeclType	fixed_t
>2311	FunctionDef	A_OpenShotgun2 (player_t * player , pspdef_t * psp)
>2312	ParameterList	player_t * player , pspdef_t * psp
>2313	Parameter	 
>2314	Identifier	psp
>2315	ParameterType	pspdef_t *
>2316	Parameter	 
>2317	Identifier	player
>2318	ParameterType	player_t *
>2319	ReturnType	void
>2320	CompoundStatement	 
>2321	ExpressionStatement	 
>2322	CallExpression	S_StartSound ( player -> mo , sfx_dbopn )
>2323	ArgumentList	player -> mo
>2324	Argument	sfx_dbopn
>2325	Identifier	sfx_dbopn
>2326	Argument	player -> mo
>2327	PtrMemberAccess	player -> mo
>2328	Identifier	mo
>2329	Identifier	player
>2330	Callee	S_StartSound
>2331	Identifier	S_StartSound
>2332	Statement	 
>2333	Statement	 
>2334	Statement	 
>2335	Statement	 
>2336	Statement	 
>2337	Statement	 
>2338	Statement	 
>2339	Statement	 
>2340	Statement	 
>2341	Statement	 
>2342	Statement	 
>2343	Statement	 
>2344	Statement	 
>2345	Statement	 
>2346	Statement	 
>2347	Statement	 
>2348	Statement	 
>2349	Statement	 
>2350	Statement	 
>2351	Statement	 
>2360	FunctionDef	A_LoadShotgun2 (player_t * player , pspdef_t * psp)
>2361	ParameterList	player_t * player , pspdef_t * psp
>2362	Parameter	 
>2363	Identifier	psp
>2364	ParameterType	pspdef_t *
>2365	Parameter	 
>2366	Identifier	player
>2367	ParameterType	player_t *
>2368	ReturnType	void
>2369	CompoundStatement	 
>2370	ExpressionStatement	 
>2371	CallExpression	S_StartSound ( player -> mo , sfx_dbload )
>2372	ArgumentList	player -> mo
>2373	Argument	sfx_dbload
>2374	Identifier	sfx_dbload
>2375	Argument	player -> mo
>2376	PtrMemberAccess	player -> mo
>2377	Identifier	mo
>2378	Identifier	player
>2379	Callee	S_StartSound
>2380	Identifier	S_StartSound
>2381	Statement	 
>2382	Statement	 
>2383	Statement	 
>2384	Statement	 
>2385	Statement	 
>2386	Statement	 
>2387	Statement	 
>2388	Statement	 
>2389	Statement	 
>2390	Statement	 
>2391	Statement	 
>2392	Statement	 
>2393	Statement	 
>2394	Statement	 
>2395	Statement	 
>2396	Statement	 
>2397	Statement	 
>2398	Statement	 
>2399	Statement	 
>2400	Statement	 
>2411	FunctionDef	A_CloseShotgun2 (player_t * player , pspdef_t * psp)
>2412	ParameterList	player_t * player , pspdef_t * psp
>2413	Parameter	 
>2414	Identifier	psp
>2415	ParameterType	pspdef_t *
>2416	Parameter	 
>2417	Identifier	player
>2418	ParameterType	player_t *
>2419	ReturnType	void
>2420	CompoundStatement	 
>2421	ExpressionStatement	 
>2422	CallExpression	A_ReFire ( player , psp )
>2423	ArgumentList	player
>2424	Argument	psp
>2425	Identifier	psp
>2426	Argument	player
>2427	Identifier	player
>2428	Callee	A_ReFire
>2429	Identifier	A_ReFire
>2430	ExpressionStatement	 
>2431	CallExpression	S_StartSound ( player -> mo , sfx_dbcls )
>2432	ArgumentList	player -> mo
>2433	Argument	sfx_dbcls
>2434	Identifier	sfx_dbcls
>2435	Argument	player -> mo
>2436	PtrMemberAccess	player -> mo
>2437	Identifier	mo
>2438	Identifier	player
>2439	Callee	S_StartSound
>2440	Identifier	S_StartSound
>2441	Statement	 
>2442	Statement	 
>2443	Statement	 
>2444	Statement	 
>2445	Statement	 
>2446	Statement	 
>2447	Statement	 
>2448	Statement	 
>2449	Statement	 
>2450	Statement	 
>2451	Statement	 
>2452	Statement	 
>2453	Statement	 
>2454	Statement	 
>2455	Statement	 
>2456	Statement	 
>2457	Statement	 
>2458	Statement	 
>2459	Statement	 
>2460	Statement	 
<11=20,19,12
<12=16,13
<13=15,14
<16=18,17
<20=208,204,200,199,198,197,196,195,194,193,192,191,190,189,188,187,186,185,184,183,182,181,179,178,177,176,175,174,170,162,161,160,159,158,157,153,21
<21=149,143,140,22
<22=132,120,113,112,111,110,109,108,107,106,105,104,103,102,101,100,99,98,97,96,95,94,93,92,91,90,89,88,87,86,85,84,83,82,81,69,68,67,55,23
<23=49,34,24
<24=25
<25=26
<26=32,27
<27=30,28
<28=29
<30=31
<32=33
<34=35
<35=45,36
<36=37
<37=43,38
<38=41,39
<39=40
<41=42
<43=44
<45=46
<46=48,47
<49=50
<50=52,51
<52=54,53
<55=56
<56=58,57
<58=64,59
<59=61,60
<61=63,62
<64=66,65
<69=70
<70=72,71
<72=78,73
<73=75,74
<75=77,76
<78=80,79
<113=114
<114=118,115
<115=116
<116=117
<118=119
<120=124,123,121
<121=122
<124=125
<125=131,126
<126=128,127
<128=130,129
<132=133
<133=139,134
<134=136,135
<136=138,137
<140=142,141
<143=144
<144=148,145
<145=147,146
<149=150
<150=152,151
<153=154
<154=156,155
<162=163
<163=167,164
<164=166,165
<167=169,168
<170=171
<171=173,172
<179=180
<200=201
<201=203,202
<204=205
<205=207,206
<208=209
<209=211,210
<241=250,249,242
<242=246,243
<243=245,244
<246=248,247
<250=277,271,270,264,251
<251=252
<252=262,253
<253=256,254
<254=255
<256=257
<257=259,258
<259=261,260
<262=263
<264=265
<265=267,266
<267=269,268
<271=272
<272=274,273
<274=276,275
<292=298,297,293
<293=294
<294=296,295
<298=376,372,363,357,334,317,301,299
<299=300
<301=304,302
<302=303
<304=305
<305=316,306
<306=314,307
<307=312,308
<308=309
<309=311,310
<312=313
<314=315
<317=320,318
<318=319
<320=321
<321=333,322
<322=332,323
<323=329,324
<324=326,325
<326=328,327
<329=331,330
<334=335
<335=356,336
<336=354,337
<337=346,338
<338=339
<339=343,340
<340=342,341
<343=345,344
<346=347
<347=351,348
<348=350,349
<351=353,352
<354=355
<357=358
<358=362,359
<359=361,360
<363=366,364
<364=365
<366=367
<367=371,368
<368=370,369
<372=373
<373=375,374
<376=377
<377=379,378
<403=409,408,404
<404=405
<405=407,406
<409=595,579,563,556,525,510,506,489,470,446,437,422,412,410
<410=411
<412=415,413
<413=414
<415=416
<416=418,417
<418=420,419
<420=421
<422=427,423
<423=424
<424=426,425
<427=428
<428=432,429
<429=431,430
<432=434,433
<434=436,435
<437=442,438
<438=439
<439=441,440
<442=443
<443=445,444
<446=452,447
<447=448
<448=449
<449=451,450
<452=453
<453=465,454
<454=460,455
<455=457,456
<457=459,458
<460=462,461
<462=464,463
<465=467,466
<467=469,468
<470=483,471
<471=476,472
<472=473
<473=475,474
<476=479,477
<477=478
<479=480
<480=482,481
<483=484
<484=486,485
<486=488,487
<489=500,490
<490=491
<491=494,492
<492=493
<494=495
<495=499,496
<496=498,497
<500=501
<501=503,502
<503=505,504
<506=507
<507=509,508
<510=517,511
<511=512
<512=516,513
<513=515,514
<517=518
<518=524,519
<519=521,520
<521=523,522
<525=526
<526=555,527
<527=531,528
<528=530,529
<531=553,532
<532=543,533
<533=534
<534=540,535
<535=537,536
<537=539,538
<540=542,541
<543=544
<544=550,545
<545=547,546
<547=549,548
<550=552,551
<553=554
<556=559,557
<557=558
<559=560
<560=562,561
<563=573,564
<564=567,565
<565=566
<567=568
<568=570,569
<570=572,571
<573=574
<574=576,575
<576=578,577
<579=582,580
<580=581
<582=583
<583=594,584
<584=592,585
<585=590,586
<586=587
<587=589,588
<590=591
<592=593
<595=596
<596=598,597
<635=641,640,636
<636=637
<637=639,638
<641=871,867,863,859,855,846,822,804,786,773,661,644,642
<642=643
<644=653,645
<645=646
<646=650,647
<647=649,648
<650=652,651
<653=654
<654=660,655
<655=657,656
<657=659,658
<661=769,669,662
<662=663
<663=664
<664=666,665
<666=668,667
<669=768,767,766,765,764,763,762,761,760,759,758,757,756,730,729,728,727,726,725,724,723,722,720,714,710,709,708,707,706,705,704,703,702,672,670
<670=671
<672=701,700,699,698,697,696,695,694,693,692,691,690,689,673
<673=678,674
<674=675
<675=677,676
<678=679
<679=687,680
<680=685,683,681
<681=682
<683=684
<685=686
<687=688
<710=711
<711=713,712
<714=715
<715=717,716
<717=719,718
<720=721
<730=755,754,753,752,751,750,749,748,747,746,745,739,733,731
<731=732
<733=734
<734=736,735
<736=738,737
<739=740
<740=742,741
<742=744,743
<769=770
<770=772,771
<773=774
<774=785,775
<775=783,776
<776=781,779,777
<777=778
<779=780
<781=782
<783=784
<786=787
<787=803,788
<788=800,789
<789=795,790
<790=794,791
<791=793,792
<795=797,796
<797=799,798
<800=802,801
<804=805
<805=821,806
<806=818,807
<807=813,808
<808=812,809
<809=811,810
<813=815,814
<815=817,816
<818=820,819
<822=838,831,823
<823=824
<824=825
<825=826
<826=828,827
<828=830,829
<831=832
<832=836,833
<833=834
<834=835
<836=837
<838=839
<839=841,840
<841=845,842
<842=844,843
<846=849,847
<847=848
<849=850
<850=852,851
<852=854,853
<855=856
<856=858,857
<859=860
<860=862,861
<863=864
<864=866,865
<867=868
<868=870,869
<871=872
<872=874,873
<909=915,914,910
<910=911
<911=913,912
<915=929,918,916
<916=917
<918=919
<919=926,920
<920=922,921
<922=924,923
<924=925
<926=928,927
<929=933,930
<930=931
<931=932
<933=934
<934=941,935
<935=939,936
<936=937
<937=938
<939=940
<952=958,957,953
<953=954
<954=956,955
<958=1400,1396,1391,1387,1383,1379,1365,1357,1351,1339,1327,1291,1255,1210,1165,1152,1139,1113,1088,1067,986,965,959
<959=960
<960=962,961
<962=964,963
<965=982,966
<966=976,967
<967=969,968
<969=970
<970=974,971
<971=972
<972=973
<974=975
<976=977
<977=979,978
<979=981,980
<982=983
<983=985,984
<986=1060,1025,987
<987=988
<988=989
<989=1021,1015,1012,990
<990=991
<991=1008,992
<992=1002,993
<993=995,994
<995=996
<996=1000,997
<997=998
<998=999
<1000=1001
<1002=1003
<1003=1005,1004
<1005=1007,1006
<1008=1009
<1009=1011,1010
<1012=1014,1013
<1015=1016
<1016=1020,1017
<1017=1019,1018
<1021=1022
<1022=1024,1023
<1025=1026
<1026=1056,1052,1049,1027
<1027=1028
<1028=1045,1029
<1029=1039,1030
<1030=1032,1031
<1032=1033
<1033=1037,1034
<1034=1035
<1035=1036
<1037=1038
<1039=1040
<1040=1042,1041
<1042=1044,1043
<1045=1046
<1046=1048,1047
<1049=1051,1050
<1052=1053
<1053=1055,1054
<1056=1057
<1057=1059,1058
<1060=1061
<1061=1063,1062
<1063=1065,1064
<1065=1066
<1067=1084,1068
<1068=1078,1069
<1069=1071,1070
<1071=1072
<1072=1076,1073
<1073=1074
<1074=1075
<1076=1077
<1078=1079
<1079=1081,1080
<1081=1083,1082
<1084=1085
<1085=1087,1086
<1088=1107,1089
<1089=1099,1090
<1090=1092,1091
<1092=1093
<1093=1097,1094
<1094=1095
<1095=1096
<1097=1098
<1099=1100
<1100=1104,1101
<1101=1103,1102
<1104=1106,1105
<1107=1108
<1108=1110,1109
<1110=1112,1111
<1113=1133,1114
<1114=1125,1115
<1115=1118,1116
<1116=1117
<1118=1119
<1119=1123,1120
<1120=1121
<1121=1122
<1123=1124
<1125=1126
<1126=1130,1127
<1127=1129,1128
<1130=1132,1131
<1133=1134
<1134=1136,1135
<1136=1138,1137
<1139=1146,1140
<1140=1141
<1141=1143,1142
<1143=1145,1144
<1146=1147
<1147=1149,1148
<1149=1151,1150
<1152=1159,1153
<1153=1154
<1154=1156,1155
<1156=1158,1157
<1159=1160
<1160=1162,1161
<1162=1164,1163
<1165=1189,1166
<1166=1183,1175,1167
<1167=1168
<1168=1172,1169
<1169=1171,1170
<1172=1174,1173
<1175=1176
<1176=1180,1177
<1177=1179,1178
<1180=1182,1181
<1183=1184
<1184=1188,1185
<1185=1187,1186
<1189=1190
<1190=1204,1191
<1191=1198,1192
<1192=1196,1193
<1193=1194
<1194=1195
<1196=1197
<1198=1202,1199
<1199=1200
<1200=1201
<1202=1203
<1204=1206,1205
<1206=1208,1207
<1208=1209
<1210=1243,1211
<1211=1227,1212
<1212=1214,1213
<1214=1215
<1215=1222,1216
<1216=1220,1217
<1217=1218
<1218=1219
<1220=1221
<1222=1224,1223
<1224=1226,1225
<1227=1228
<1228=1240,1229
<1229=1239,1230
<1230=1234,1231
<1231=1233,1232
<1234=1236,1235
<1236=1238,1237
<1240=1242,1241
<1243=1244
<1244=1250,1245
<1245=1247,1246
<1247=1249,1248
<1250=1252,1251
<1252=1254,1253
<1255=1283,1277,1256
<1256=1257
<1257=1271,1265,1258
<1258=1259
<1259=1260
<1260=1262,1261
<1262=1264,1263
<1265=1266
<1266=1268,1267
<1268=1270,1269
<1271=1272
<1272=1276,1273
<1273=1275,1274
<1277=1278
<1278=1280,1279
<1280=1282,1281
<1283=1284
<1284=1290,1285
<1285=1287,1286
<1287=1289,1288
<1291=1321,1315,1292
<1292=1293
<1293=1307,1301,1294
<1294=1295
<1295=1296
<1296=1298,1297
<1298=1300,1299
<1301=1302
<1302=1304,1303
<1304=1306,1305
<1307=1308
<1308=1314,1309
<1309=1311,1310
<1311=1313,1312
<1315=1316
<1316=1318,1317
<1318=1320,1319
<1321=1322
<1322=1326,1323
<1323=1325,1324
<1327=1328
<1328=1338,1329
<1329=1333,1330
<1330=1332,1331
<1333=1335,1334
<1335=1337,1336
<1339=1340
<1340=1350,1341
<1341=1345,1342
<1342=1344,1343
<1345=1347,1346
<1347=1349,1348
<1351=1352
<1352=1356,1353
<1353=1355,1354
<1357=1358
<1358=1364,1359
<1359=1363,1360
<1360=1362,1361
<1365=1373,1366
<1366=1367
<1367=1371,1368
<1368=1369
<1369=1370
<1371=1372
<1373=1374
<1374=1378,1375
<1375=1377,1376
<1379=1380
<1380=1382,1381
<1383=1384
<1384=1386,1385
<1387=1388
<1388=1390,1389
<1391=1392
<1392=1395,1394,1393
<1396=1397
<1397=1399,1398
<1400=1401
<1401=1403,1402
<1441=1450,1449,1442
<1442=1446,1443
<1443=1445,1444
<1446=1448,1447
<1450=1663,1659,1655,1651,1647,1643,1635,1631,1621,1453,1451
<1451=1452
<1453=1610,1454
<1454=1609,1608,1607,1606,1605,1604,1603,1602,1601,1600,1599,1598,1597,1596,1580,1579,1578,1577,1576,1568,1560,1545,1465,1457,1455
<1455=1456
<1457=1458
<1458=1462,1459
<1459=1461,1460
<1462=1464,1463
<1465=1541,1466
<1466=1510,1467
<1467=1502,1468
<1468=1475,1469
<1469=1471,1470
<1471=1472
<1472=1474,1473
<1475=1476
<1476=1501,1477
<1477=1499,1478
<1478=1489,1479
<1479=1480
<1480=1484,1481
<1481=1483,1482
<1484=1486,1485
<1486=1488,1487
<1489=1490
<1490=1494,1491
<1491=1493,1492
<1494=1496,1495
<1496=1498,1497
<1499=1500
<1502=1503
<1503=1507,1504
<1504=1506,1505
<1507=1509,1508
<1510=1511
<1511=1540,1512
<1512=1516,1513
<1513=1515,1514
<1516=1538,1517
<1517=1534,1530,1524,1518
<1518=1519
<1519=1521,1520
<1521=1523,1522
<1524=1525
<1525=1527,1526
<1527=1529,1528
<1530=1531
<1531=1533,1532
<1534=1535
<1535=1537,1536
<1538=1539
<1541=1542
<1542=1544,1543
<1545=1547,1546
<1547=1548
<1548=1559,1549
<1549=1557,1550
<1550=1555,1551
<1551=1552
<1552=1554,1553
<1555=1556
<1557=1558
<1560=1562,1561
<1562=1563
<1563=1565,1564
<1565=1567,1566
<1568=1569
<1569=1573,1570
<1570=1572,1571
<1573=1575,1574
<1580=1584,1581
<1581=1582
<1582=1583
<1584=1585
<1585=1591,1586
<1586=1588,1587
<1588=1590,1589
<1591=1593,1592
<1593=1595,1594
<1610=1618,1611
<1611=1613,1612
<1613=1615,1614
<1615=1617,1616
<1618=1620,1619
<1621=1622
<1622=1630,1623
<1623=1625,1624
<1625=1627,1626
<1627=1629,1628
<1631=1632
<1632=1634,1633
<1635=1636
<1636=1642,1637
<1637=1639,1638
<1639=1641,1640
<1643=1644
<1644=1646,1645
<1647=1648
<1648=1650,1649
<1651=1652
<1652=1654,1653
<1655=1656
<1656=1658,1657
<1659=1660
<1660=1662,1661
<1663=1664
<1664=1666,1665
<1765=1771,1770,1766
<1766=1767
<1767=1769,1768
<1771=1929,1925,1914,1903,1892,1878,1877,1876,1875,1874,1873,1872,1871,1870,1869,1868,1867,1866,1865,1864,1863,1862,1861,1860,1859,1858,1857,1856,1772,1774,1781,1789,1790,1791,1792,1793,1794,1795,1796,1797,1798,1799,1800,1801,1802,1803,1804,1805,1806,1807,1808,1809,1810,1811,1812,1813,1814,1822,1823,1831,1832,1833,1834,1835,1836,1837,1838,1839,1845,1846,1848,1849,1850,1851,1852,1853,1854,1855
<1772=1773
<1774=1777,1775
<1775=1776
<1777=1778
<1778=1780,1779
<1781=1782
<1782=1784,1783
<1784=1786,1785
<1786=1788,1787
<1814=1815
<1815=1817,1816
<1817=1819,1818
<1819=1821,1820
<1823=1824
<1824=1826,1825
<1826=1828,1827
<1828=1830,1829
<1839=1840
<1840=1842,1841
<1842=1844,1843
<1846=1847
<1878=1879
<1879=1891,1880
<1880=1886,1881
<1881=1883,1882
<1883=1885,1884
<1886=1888,1887
<1888=1890,1889
<1892=1895,1893
<1893=1894
<1895=1896
<1896=1898,1897
<1898=1900,1899
<1900=1902,1901
<1903=1906,1904
<1904=1905
<1906=1907
<1907=1911,1908
<1908=1910,1909
<1911=1913,1912
<1914=1917,1915
<1915=1916
<1917=1918
<1918=1924,1919
<1919=1921,1920
<1921=1923,1922
<1925=1926
<1926=1928,1927
<1929=1930
<1930=1932,1931
<2013=2022,2021,2014
<2014=2018,2015
<2015=2017,2016
<2018=2020,2019
<2022=2247,2243,2239,2235,2231,2227,2223,2219,2215,2214,2213,2212,2206,2205,2204,2203,2202,2201,2200,2199,2198,2197,2196,2166,2160,2154,2132,2115,2098,2088,2073,2040,2032,2023
<2023=2024
<2024=2030,2025
<2025=2028,2026
<2026=2027
<2028=2029
<2030=2031
<2032=2033
<2033=2037,2034
<2034=2036,2035
<2037=2039,2038
<2040=2056,2041
<2041=2043,2042
<2043=2044
<2044=2054,2045
<2045=2052,2050,2048,2046
<2046=2047
<2048=2049
<2050=2051
<2052=2053
<2054=2055
<2056=2057
<2057=2072,2058
<2058=2070,2059
<2059=2068,2064,2060
<2060=2061
<2061=2063,2062
<2064=2065
<2065=2067,2066
<2068=2069
<2070=2071
<2073=2074
<2074=2087,2075
<2075=2085,2076
<2076=2083,2081,2079,2077
<2077=2078
<2079=2080
<2081=2082
<2083=2084
<2085=2086
<2088=2089
<2089=2097,2090
<2090=2094,2091
<2091=2093,2092
<2094=2096,2095
<2098=2099
<2099=2114,2100
<2100=2111,2101
<2101=2109,2102
<2102=2107,2103
<2103=2104
<2104=2106,2105
<2107=2108
<2109=2110
<2111=2113,2112
<2115=2116
<2116=2131,2117
<2117=2128,2118
<2118=2126,2119
<2119=2124,2120
<2120=2121
<2121=2123,2122
<2124=2125
<2126=2127
<2128=2130,2129
<2132=2133
<2133=2153,2134
<2134=2150,2135
<2135=2149,2136
<2136=2138,2137
<2138=2144,2139
<2139=2141,2140
<2141=2143,2142
<2144=2146,2145
<2146=2148,2147
<2150=2152,2151
<2154=2155
<2155=2159,2156
<2156=2158,2157
<2160=2162,2161
<2162=2163
<2163=2165,2164
<2166=2173,2167
<2167=2168
<2168=2172,2169
<2169=2171,2170
<2173=2178,2174
<2174=2175
<2175=2177,2176
<2178=2179
<2179=2187,2180
<2180=2182,2181
<2182=2184,2183
<2184=2186,2185
<2187=2191,2188
<2188=2190,2189
<2191=2193,2192
<2193=2195,2194
<2206=2207
<2207=2209,2208
<2209=2211,2210
<2215=2216
<2216=2218,2217
<2219=2220
<2220=2222,2221
<2223=2224
<2224=2226,2225
<2227=2228
<2228=2230,2229
<2231=2232
<2232=2234,2233
<2235=2236
<2236=2238,2237
<2239=2240
<2240=2242,2241
<2243=2244
<2244=2246,2245
<2247=2248
<2248=2250,2249
<2311=2320,2319,2312
<2312=2316,2313
<2313=2315,2314
<2316=2318,2317
<2320=2351,2350,2349,2348,2347,2346,2345,2344,2343,2342,2341,2340,2339,2338,2337,2336,2335,2334,2333,2332,2321
<2321=2322
<2322=2330,2323
<2323=2326,2324
<2324=2325
<2326=2327
<2327=2329,2328
<2330=2331
<2360=2369,2368,2361
<2361=2365,2362
<2362=2364,2363
<2365=2367,2366
<2369=2400,2399,2398,2397,2396,2395,2394,2393,2392,2391,2390,2389,2388,2387,2386,2385,2384,2383,2382,2381,2370
<2370=2371
<2371=2379,2372
<2372=2375,2373
<2373=2374
<2375=2376
<2376=2378,2377
<2379=2380
<2411=2420,2419,2412
<2412=2416,2413
<2413=2415,2414
<2416=2418,2417
<2420=2460,2459,2458,2457,2456,2455,2454,2453,2452,2451,2450,2449,2448,2447,2446,2445,2444,2443,2442,2441,2430,2421
<2421=2422
<2422=2428,2423
<2423=2426,2424
<2424=2425
<2426=2427
<2428=2429
<2430=2431
<2431=2439,2432
<2432=2435,2433
<2433=2434
<2435=2436
<2436=2438,2437
<2439=2440
