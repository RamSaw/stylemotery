>3	FunctionDef	FormatDetectorInputStream 
>4	ParameterList	InspectorInputStream * is , bool cleanup
>5	Parameter	 
>6	Identifier	cleanup
>7	ParameterType	bool
>8	Parameter	 
>9	Identifier	is
>10	ParameterType	InspectorInputStream *
>11	CompoundStatement	 
>12	ExpressionStatement	 
>13	CallExpression	createInspectors ( )
>14	ArgumentList	 
>15	Callee	createInspectors
>16	Identifier	createInspectors
>17	ExpressionStatement	 
>18	AssignmentExpr	mDataFormatRecognized = false
>19	Identifier	false
>20	Identifier	mDataFormatRecognized
>28	FunctionDef	FormatDetectorInputStream 
>29	ParameterList	 
>30	CompoundStatement	 
>34	FunctionDef	FormatDetectorInputStream 
>35	ParameterList	 
>36	ReturnType	void
>37	CompoundStatement	 
>38	CompoundStatement	 
>39	ExpressionStatement	 
>40	CallExpression	addDataFormatInspector ( \"bitmunk.data.Id3v2TagReader\" , itw , true )
>41	ArgumentList	\"bitmunk.data.Id3v2TagReader\"
>42	Argument	true
>43	Identifier	true
>44	Argument	itw
>45	Identifier	itw
>46	Argument	\"bitmunk.data.Id3v2TagReader\"
>47	PrimaryExpression	\"bitmunk.data.Id3v2TagReader\"
>48	Callee	addDataFormatInspector
>49	Identifier	addDataFormatInspector
>50	IdentifierDeclStatement	 
>51	IdentifierDecl	* itw = new Id3v2TagReader ( tag )
>52	AssignmentExpr	* itw = new Id3v2TagReader ( tag )
>53	Identifier	tag
>54	Identifier	tag
>55	Identifier	itw
>56	IdentifierDeclType	Id3v2TagReader *
>57	IdentifierDeclStatement	 
>58	IdentifierDecl	tag = new Id3v2Tag ( )
>59	AssignmentExpr	tag = new Id3v2Tag ( )
>60	UnaryExpression	new Id3v2Tag ( )
>61	Identifier	tag
>62	Identifier	tag
>63	IdentifierDeclType	Id3v2TagRef
>64	CompoundStatement	 
>65	ExpressionStatement	 
>66	CallExpression	addDataFormatInspector ( \"bitmunk.data.MpegAudioDetector\" , mad , true )
>67	ArgumentList	\"bitmunk.data.MpegAudioDetector\"
>68	Argument	true
>69	Identifier	true
>70	Argument	mad
>71	Identifier	mad
>72	Argument	\"bitmunk.data.MpegAudioDetector\"
>73	PrimaryExpression	\"bitmunk.data.MpegAudioDetector\"
>74	Callee	addDataFormatInspector
>75	Identifier	addDataFormatInspector
>76	ExpressionStatement	 
>77	CallExpression	mad -> setKeepInspecting ( false )
>78	ArgumentList	false
>79	Argument	false
>80	Identifier	false
>81	Callee	mad -> setKeepInspecting
>82	PtrMemberAccess	mad -> setKeepInspecting
>83	Identifier	setKeepInspecting
>84	Identifier	mad
>85	ExpressionStatement	 
>86	CallExpression	mad -> setKeepInspecting ( true )
>87	ArgumentList	true
>88	Argument	true
>89	Identifier	true
>90	Callee	mad -> setKeepInspecting
>91	PtrMemberAccess	mad -> setKeepInspecting
>92	Identifier	setKeepInspecting
>93	Identifier	mad
>94	IdentifierDeclStatement	 
>95	IdentifierDecl	* mad = new MpegAudioDetector ( )
>96	AssignmentExpr	* mad = new MpegAudioDetector ( )
>97	UnaryExpression	new MpegAudioDetector ( )
>98	Identifier	mad
>99	Identifier	mad
>100	IdentifierDeclType	MpegAudioDetector *
>101	CompoundStatement	 
>102	ExpressionStatement	 
>103	CallExpression	addDataFormatInspector ( \"bitmunk.data.AviDetector\" , ad , true )
>104	ArgumentList	\"bitmunk.data.AviDetector\"
>105	Argument	true
>106	Identifier	true
>107	Argument	ad
>108	Identifier	ad
>109	Argument	\"bitmunk.data.AviDetector\"
>110	PrimaryExpression	\"bitmunk.data.AviDetector\"
>111	Callee	addDataFormatInspector
>112	Identifier	addDataFormatInspector
>113	IdentifierDeclStatement	 
>114	IdentifierDecl	* ad = new AviDetector ( )
>115	AssignmentExpr	* ad = new AviDetector ( )
>116	UnaryExpression	new AviDetector ( )
>117	Identifier	ad
>118	Identifier	ad
>119	IdentifierDeclType	AviDetector *
>129	FunctionDef	FormatDetectorInputStream 
>130	ParameterList	uint64_t * total
>131	Parameter	 
>132	Identifier	total
>133	ParameterType	uint64_t *
>134	ReturnType	bool
>135	CompoundStatement	 
>136	ReturnStatement	 
>137	CallExpression	iis -> inspect ( total )
>138	ArgumentList	total
>139	Argument	total
>140	Identifier	total
>141	Callee	iis -> inspect
>142	PtrMemberAccess	iis -> inspect
>143	Identifier	inspect
>144	Identifier	iis
>145	ExpressionStatement	 
>146	Identifier	mInputStream
>147	Statement	 
>148	Statement	 
>149	Statement	 
>150	Statement	 
>151	Statement	 
>152	Statement	 
>153	Statement	 
>154	Statement	 
>155	Statement	 
>163	FunctionDef	FormatDetectorInputStream 
>164	ParameterList	const char * name , DataFormatInspector * dfi , bool cleanup
>165	Parameter	 
>166	Identifier	cleanup
>167	ParameterType	bool
>168	Parameter	 
>169	Identifier	dfi
>170	ParameterType	DataFormatInspector *
>171	Parameter	 
>172	Identifier	name
>173	ParameterType	const char *
>174	ReturnType	bool
>175	CompoundStatement	 
>176	ReturnStatement	 
>177	Identifier	rval
>178	IfStatement	if ( iis -> getInspector ( name ) == NULL )
>179	CompoundStatement	 
>180	IfStatement	if ( rval )
>181	CompoundStatement	 
>182	ExpressionStatement	 
>183	CallExpression	iis -> addInspector ( name , dfi , cleanup )
>184	ArgumentList	name
>185	Argument	cleanup
>186	Identifier	cleanup
>187	Argument	dfi
>188	Identifier	dfi
>189	Argument	name
>190	Identifier	name
>191	Callee	iis -> addInspector
>192	PtrMemberAccess	iis -> addInspector
>193	Identifier	addInspector
>194	Identifier	iis
>195	Condition	 
>196	Identifier	rval
>197	ExpressionStatement	 
>198	CallExpression	mInspectors . push_back ( dfi )
>199	ArgumentList	dfi
>200	Argument	dfi
>201	Identifier	dfi
>202	Callee	mInspectors . push_back
>203	MemberAccess	mInspectors . push_back
>204	Identifier	push_back
>205	Identifier	mInspectors
>206	ExpressionStatement	 
>207	AssignmentExpr	rval = true
>208	Identifier	true
>209	Identifier	rval
>210	Condition	 
>211	EqualityExpression	iis -> getInspector ( name ) == NULL
>212	Identifier	NULL
>213	CallExpression	iis -> getInspector ( name )
>214	ArgumentList	name
>215	Argument	name
>216	Identifier	name
>217	Callee	iis -> getInspector
>218	PtrMemberAccess	iis -> getInspector
>219	Identifier	getInspector
>220	Identifier	iis
>221	ExpressionStatement	 
>222	Identifier	mInputStream
>223	Statement	 
>224	Statement	 
>225	Statement	 
>226	Statement	 
>227	Statement	 
>228	Statement	 
>229	Statement	 
>230	Statement	 
>231	Statement	 
>232	IdentifierDeclStatement	 
>233	IdentifierDecl	rval = false
>234	AssignmentExpr	rval = false
>235	Identifier	false
>236	Identifier	false
>237	Identifier	rval
>238	IdentifierDeclType	bool
>253	FunctionDef	FormatDetectorInputStream 
>254	ParameterList	const char * name
>255	Parameter	 
>256	Identifier	name
>257	ParameterType	const char *
>258	ReturnType	DataFormatInspector *
>259	CompoundStatement	 
>260	ReturnStatement	 
>261	Identifier	rval
>262	ExpressionStatement	 
>263	CallExpression	iis -> getInspector ( name )
>264	ArgumentList	name
>265	Argument	name
>266	Identifier	name
>267	Callee	iis -> getInspector
>268	PtrMemberAccess	iis -> getInspector
>269	Identifier	getInspector
>270	Identifier	iis
>271	Statement	 
>272	Statement	 
>273	Statement	 
>274	Statement	 
>275	Statement	 
>276	Statement	 
>277	Statement	 
>278	ExpressionStatement	 
>279	Identifier	mInputStream
>280	Statement	 
>281	Statement	 
>282	Statement	 
>283	Statement	 
>284	Statement	 
>285	Statement	 
>286	Statement	 
>287	Statement	 
>288	Statement	 
>289	IdentifierDeclStatement	 
>290	IdentifierDecl	* rval = NULL
>291	AssignmentExpr	* rval = NULL
>292	Identifier	NULL
>293	Identifier	NULL
>294	Identifier	rval
>295	IdentifierDeclType	DataFormatInspector *
>303	FunctionDef	FormatDetectorInputStream 
>304	ParameterList	 
>305	ReturnType	vector < DataFormatInspector * > *
>306	CompoundStatement	 
>307	ReturnStatement	 
>308	UnaryOp	& mInspectors
>309	Identifier	mInspectors
>310	UnaryOperator	&
>315	FunctionDef	FormatDetectorInputStream 
>316	ParameterList	 
>317	ReturnType	vector < DataFormatInspector * >
>318	CompoundStatement	 
>319	ReturnStatement	 
>320	Identifier	dfiInspectors
>321	ForStatement	for ( list < DataInspector * > 
>322	CompoundStatement	 
>323	IfStatement	if ( dfi != NULL && dfi -> isFormatRecognized ( ) )
>324	CompoundStatement	 
>325	ExpressionStatement	 
>326	CallExpression	dfiInspectors . push_back ( dfi )
>327	ArgumentList	dfi
>328	Argument	dfi
>329	Identifier	dfi
>330	Callee	dfiInspectors . push_back
>331	MemberAccess	dfiInspectors . push_back
>332	Identifier	push_back
>333	Identifier	dfiInspectors
>334	Condition	 
>335	AndExpression	dfi != NULL && dfi -> isFormatRecognized ( )
>336	CallExpression	dfi -> isFormatRecognized ( )
>337	ArgumentList	 
>338	Callee	dfi -> isFormatRecognized
>339	PtrMemberAccess	dfi -> isFormatRecognized
>340	Identifier	isFormatRecognized
>341	Identifier	dfi
>342	EqualityExpression	dfi != NULL
>343	Identifier	NULL
>344	Identifier	dfi
>345	ExpressionStatement	 
>346	UnaryOp	* i
>347	Identifier	i
>348	UnaryOperator	*
>349	Statement	 
>350	Statement	 
>351	Statement	 
>352	Statement	 
>353	Statement	 
>354	Statement	 
>355	Statement	 
>356	Statement	 
>357	Statement	 
>358	UnaryExpression	 
>359	Identifier	i
>360	IncDec	++
>361	Condition	 
>362	EqualityExpression	i != inspectors . end ( )
>363	CallExpression	inspectors . end ( )
>364	ArgumentList	 
>365	Callee	inspectors . end
>366	MemberAccess	inspectors . end
>367	Identifier	end
>368	Identifier	inspectors
>369	Identifier	i
>370	ForInit	 
>371	IdentifierDeclStatement	list < DataInspector * > 
>372	IdentifierDecl	i = inspectors . begin ( )
>373	AssignmentExpr	i = inspectors . begin ( )
>374	CallExpression	inspectors . begin ( )
>375	ArgumentList	 
>376	Callee	inspectors . begin
>377	MemberAccess	inspectors . begin
>378	Identifier	begin
>379	Identifier	inspectors
>380	Identifier	i
>381	Identifier	i
>382	IdentifierDeclType	list < DataInspector * > 
>383	ExpressionStatement	 
>384	CallExpression	iis -> getInspectors ( inspectors )
>385	ArgumentList	inspectors
>386	Argument	inspectors
>387	Identifier	inspectors
>388	Callee	iis -> getInspectors
>389	PtrMemberAccess	iis -> getInspectors
>390	Identifier	getInspectors
>391	Identifier	iis
>392	ExpressionStatement	 
>393	Identifier	mInputStream
>394	Statement	 
>395	Statement	 
>396	Statement	 
>397	Statement	 
>398	Statement	 
>399	Statement	 
>400	Statement	 
>401	Statement	 
>402	Statement	 
>403	IdentifierDeclStatement	 
>404	IdentifierDecl	inspectors
>405	Identifier	inspectors
>406	IdentifierDeclType	list < DataInspector * >
>407	IdentifierDeclStatement	 
>408	IdentifierDecl	dfiInspectors
>409	Identifier	dfiInspectors
>410	IdentifierDeclType	vector < DataFormatInspector * >
>424	FunctionDef	FormatDetectorInputStream 
>425	ParameterList	 
>426	ReturnType	bool
>427	CompoundStatement	 
>428	ReturnStatement	 
>429	Identifier	mDataFormatRecognized
>430	IfStatement	if ( ! mDataFormatRecognized )
>431	CompoundStatement	 
>432	ForStatement	for ( list < DataInspector * > 
>433	CompoundStatement	 
>434	IfStatement	if ( dfi != NULL )
>435	CompoundStatement	 
>436	ExpressionStatement	 
>437	AssignmentExpr	mDataFormatRecognized = dfi -> isFormatRecognized ( )
>438	CallExpression	dfi -> isFormatRecognized ( )
>439	ArgumentList	 
>440	Callee	dfi -> isFormatRecognized
>441	PtrMemberAccess	dfi -> isFormatRecognized
>442	Identifier	isFormatRecognized
>443	Identifier	dfi
>444	Identifier	mDataFormatRecognized
>445	Condition	 
>446	EqualityExpression	dfi != NULL
>447	Identifier	NULL
>448	Identifier	dfi
>449	ExpressionStatement	 
>450	UnaryOp	* i
>451	Identifier	i
>452	UnaryOperator	*
>453	Statement	 
>454	Statement	 
>455	Statement	 
>456	Statement	 
>457	Statement	 
>458	Statement	 
>459	Statement	 
>460	Statement	 
>461	Statement	 
>462	UnaryExpression	 
>463	Identifier	i
>464	IncDec	++
>465	Condition	 
>466	AndExpression	! mDataFormatRecognized && i != inspectors . end ( )
>467	EqualityExpression	i != inspectors . end ( )
>468	CallExpression	inspectors . end ( )
>469	ArgumentList	 
>470	Callee	inspectors . end
>471	MemberAccess	inspectors . end
>472	Identifier	end
>473	Identifier	inspectors
>474	Identifier	i
>475	UnaryOp	! mDataFormatRecognized
>476	Identifier	mDataFormatRecognized
>477	UnaryOperator	!
>478	ForInit	 
>479	IdentifierDeclStatement	list < DataInspector * > 
>480	IdentifierDecl	i = inspectors . begin ( )
>481	AssignmentExpr	i = inspectors . begin ( )
>482	CallExpression	inspectors . begin ( )
>483	ArgumentList	 
>484	Callee	inspectors . begin
>485	MemberAccess	inspectors . begin
>486	Identifier	begin
>487	Identifier	inspectors
>488	Identifier	i
>489	Identifier	i
>490	IdentifierDeclType	list < DataInspector * > 
>491	ExpressionStatement	 
>492	CallExpression	iis -> getInspectors ( inspectors )
>493	ArgumentList	inspectors
>494	Argument	inspectors
>495	Identifier	inspectors
>496	Callee	iis -> getInspectors
>497	PtrMemberAccess	iis -> getInspectors
>498	Identifier	getInspectors
>499	Identifier	iis
>500	ExpressionStatement	 
>501	Identifier	mInputStream
>502	Statement	 
>503	Statement	 
>504	Statement	 
>505	Statement	 
>506	Statement	 
>507	Statement	 
>508	Statement	 
>509	Statement	 
>510	Statement	 
>511	IdentifierDeclStatement	 
>512	IdentifierDecl	inspectors
>513	Identifier	inspectors
>514	IdentifierDeclType	list < DataInspector * >
>515	Condition	 
>516	UnaryOp	! mDataFormatRecognized
>517	Identifier	mDataFormatRecognized
>518	UnaryOperator	!
>532	FunctionDef	FormatDetectorInputStream 
>533	ParameterList	 
>534	ReturnType	DynamicObject
>535	CompoundStatement	 
>536	ReturnStatement	 
>537	Identifier	details
>538	ForStatement	for ( vector < DataFormatInspector * > 
>539	CompoundStatement	 
>540	IfStatement	if ( dfi != NULL && dfi -> isFormatRecognized ( ) )
>541	CompoundStatement	 
>542	ExpressionStatement	 
>543	CallExpression	details -> append ( d )
>544	ArgumentList	d
>545	Argument	d
>546	Identifier	d
>547	Callee	details -> append
>548	PtrMemberAccess	details -> append
>549	Identifier	append
>550	Identifier	details
>551	IdentifierDeclStatement	 
>552	IdentifierDecl	d = dfi -> getFormatDetails ( )
>553	AssignmentExpr	d = dfi -> getFormatDetails ( )
>554	CallExpression	dfi -> getFormatDetails ( )
>555	ArgumentList	 
>556	Callee	dfi -> getFormatDetails
>557	PtrMemberAccess	dfi -> getFormatDetails
>558	Identifier	getFormatDetails
>559	Identifier	dfi
>560	Identifier	d
>561	Identifier	d
>562	IdentifierDeclType	DynamicObject
>563	Condition	 
>564	AndExpression	dfi != NULL && dfi -> isFormatRecognized ( )
>565	CallExpression	dfi -> isFormatRecognized ( )
>566	ArgumentList	 
>567	Callee	dfi -> isFormatRecognized
>568	PtrMemberAccess	dfi -> isFormatRecognized
>569	Identifier	isFormatRecognized
>570	Identifier	dfi
>571	EqualityExpression	dfi != NULL
>572	Identifier	NULL
>573	Identifier	dfi
>574	ExpressionStatement	 
>575	UnaryOp	* i
>576	Identifier	i
>577	UnaryOperator	*
>578	Statement	 
>579	Statement	 
>580	Statement	 
>581	Statement	 
>582	Statement	 
>583	Statement	 
>584	Statement	 
>585	Statement	 
>586	Statement	 
>587	UnaryExpression	 
>588	Identifier	i
>589	IncDec	++
>590	Condition	 
>591	EqualityExpression	i != mInspectors . end ( )
>592	CallExpression	mInspectors . end ( )
>593	ArgumentList	 
>594	Callee	mInspectors . end
>595	MemberAccess	mInspectors . end
>596	Identifier	end
>597	Identifier	mInspectors
>598	Identifier	i
>599	ForInit	 
>600	IdentifierDeclStatement	vector < DataFormatInspector * > 
>601	IdentifierDecl	i = mInspectors . begin ( )
>602	AssignmentExpr	i = mInspectors . begin ( )
>603	CallExpression	mInspectors . begin ( )
>604	ArgumentList	 
>605	Callee	mInspectors . begin
>606	MemberAccess	mInspectors . begin
>607	Identifier	begin
>608	Identifier	mInspectors
>609	Identifier	i
>610	Identifier	i
>611	IdentifierDeclType	vector < DataFormatInspector * > 
>612	ExpressionStatement	 
>613	CallExpression	details -> setType ( Array )
>614	ArgumentList	Array
>615	Argument	Array
>616	Identifier	Array
>617	Callee	details -> setType
>618	PtrMemberAccess	details -> setType
>619	Identifier	setType
>620	Identifier	details
>621	IdentifierDeclStatement	 
>622	IdentifierDecl	details
>623	Identifier	details
>624	IdentifierDeclType	DynamicObject
<3=11,4
<4=8,5
<5=7,6
<8=10,9
<11=17,12
<12=13
<13=15,14
<15=16
<17=18
<18=20,19
<28=30,29
<34=37,36,35
<37=101,64,38
<38=57,50,39
<39=40
<40=48,41
<41=46,44,42
<42=43
<44=45
<46=47
<48=49
<50=51
<51=56,55,52
<52=54,53
<57=58
<58=63,62,59
<59=61,60
<64=94,85,76,65
<65=66
<66=74,67
<67=72,70,68
<68=69
<70=71
<72=73
<74=75
<76=77
<77=81,78
<78=79
<79=80
<81=82
<82=84,83
<85=86
<86=90,87
<87=88
<88=89
<90=91
<91=93,92
<94=95
<95=100,99,96
<96=98,97
<101=113,102
<102=103
<103=111,104
<104=109,107,105
<105=106
<107=108
<109=110
<111=112
<113=114
<114=119,118,115
<115=117,116
<129=135,134,130
<130=131
<131=133,132
<135=155,154,153,152,151,150,149,148,147,145,136
<136=137
<137=141,138
<138=139
<139=140
<141=142
<142=144,143
<145=146
<163=175,174,164
<164=171,168,165
<165=167,166
<168=170,169
<171=173,172
<175=232,231,230,229,228,227,226,225,224,223,221,178,176
<176=177
<178=210,179
<179=206,197,180
<180=195,181
<181=182
<182=183
<183=191,184
<184=189,187,185
<185=186
<187=188
<189=190
<191=192
<192=194,193
<195=196
<197=198
<198=202,199
<199=200
<200=201
<202=203
<203=205,204
<206=207
<207=209,208
<210=211
<211=213,212
<213=217,214
<214=215
<215=216
<217=218
<218=220,219
<221=222
<232=233
<233=238,237,234
<234=236,235
<253=259,258,254
<254=255
<255=257,256
<259=289,288,287,286,285,284,283,282,281,280,278,277,276,275,274,273,272,271,262,260
<260=261
<262=263
<263=267,264
<264=265
<265=266
<267=268
<268=270,269
<278=279
<289=290
<290=295,294,291
<291=293,292
<303=306,305,304
<306=307
<307=308
<308=310,309
<315=318,317,316
<318=407,403,402,401,400,399,398,397,396,395,394,392,383,321,319
<319=320
<321=370,361,358,322
<322=357,356,355,354,353,352,351,350,349,345,323
<323=334,324
<324=325
<325=326
<326=330,327
<327=328
<328=329
<330=331
<331=333,332
<334=335
<335=342,336
<336=338,337
<338=339
<339=341,340
<342=344,343
<345=346
<346=348,347
<358=360,359
<361=362
<362=369,363
<363=365,364
<365=366
<366=368,367
<370=371
<371=372
<372=382,381,373
<373=380,374
<374=376,375
<376=377
<377=379,378
<383=384
<384=388,385
<385=386
<386=387
<388=389
<389=391,390
<392=393
<403=404
<404=406,405
<407=408
<408=410,409
<424=427,426,425
<427=430,428
<428=429
<430=515,431
<431=511,510,509,508,507,506,505,504,503,502,500,491,432
<432=478,465,462,433
<433=461,460,459,458,457,456,455,454,453,449,434
<434=445,435
<435=436
<436=437
<437=444,438
<438=440,439
<440=441
<441=443,442
<445=446
<446=448,447
<449=450
<450=452,451
<462=464,463
<465=466
<466=475,467
<467=474,468
<468=470,469
<470=471
<471=473,472
<475=477,476
<478=479
<479=480
<480=490,489,481
<481=488,482
<482=484,483
<484=485
<485=487,486
<491=492
<492=496,493
<493=494
<494=495
<496=497
<497=499,498
<500=501
<511=512
<512=514,513
<515=516
<516=518,517
<532=535,534,533
<535=621,612,538,536
<536=537
<538=599,590,587,539
<539=586,585,584,583,582,581,580,579,578,574,540
<540=563,541
<541=551,542
<542=543
<543=547,544
<544=545
<545=546
<547=548
<548=550,549
<551=552
<552=562,561,553
<553=560,554
<554=556,555
<556=557
<557=559,558
<563=564
<564=571,565
<565=567,566
<567=568
<568=570,569
<571=573,572
<574=575
<575=577,576
<587=589,588
<590=591
<591=598,592
<592=594,593
<594=595
<595=597,596
<599=600
<600=601
<601=611,610,602
<602=609,603
<603=605,604
<605=606
<606=608,607
<612=613
<613=617,614
<614=615
<615=616
<617=618
<618=620,619
<621=622
<622=624,623
