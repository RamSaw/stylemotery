>3	FunctionDef	CHashTable ()
>4	ParameterList	 
>5	CompoundStatement	 
>6	ExpressionStatement	 
>7	AssignmentExpr	m_pKeys = NULL
>8	Identifier	NULL
>9	Identifier	m_pKeys
>10	ExpressionStatement	 
>11	AssignmentExpr	m_pElements = NULL
>12	Identifier	NULL
>13	Identifier	m_pElements
>14	ExpressionStatement	 
>15	AssignmentExpr	m_Size = 0
>16	PrimaryExpression	0
>17	Identifier	m_Size
>25	FunctionDef	~CHashTable ()
>26	ParameterList	 
>27	CompoundStatement	 
>28	ExpressionStatement	 
>29	Identifier	m_pKeys
>30	IfStatement	if ( m_pKeys )
>31	Statement	 
>32	Condition	 
>33	Identifier	m_pKeys
>34	ExpressionStatement	 
>35	Identifier	m_pElements
>36	IfStatement	if ( m_pElements )
>37	Statement	 
>38	Condition	 
>39	Identifier	m_pElements
>45	FunctionDef	RemoveAt (const unsigned int Index)
>46	ParameterList	const unsigned int Index
>47	Parameter	 
>48	Identifier	Index
>49	ParameterType	const unsigned int
>50	CompoundStatement	 
>51	ReturnStatement	 
>52	Identifier	false
>53	IfStatement	if ( m_pKeys && m_pElements )
>54	CompoundStatement	 
>55	CompoundStatement	 
>56	IfStatement	if ( ( * m_pKeys ) [ i ] . GetLength ( ) )
>57	CompoundStatement	 
>58	IfStatement	if ( Counter == Index )
>59	ElseStatement	else
>60	ExpressionStatement	 
>61	IncDecOp	Counter ++
>62	IncDec	++
>63	Identifier	Counter
>64	CompoundStatement	 
>65	ReturnStatement	 
>66	Identifier	true
>67	ExpressionStatement	 
>68	CallExpression	( * m_pKeys ) [ i ] . Empty ( )
>69	ArgumentList	 
>70	Callee	( * m_pKeys ) [ i ] . Empty
>71	MemberAccess	( * m_pKeys ) [ i ] . Empty
>72	Identifier	Empty
>73	ArrayIndexing	( * m_pKeys ) [ i ]
>74	Identifier	i
>75	UnaryOp	* m_pKeys
>76	Identifier	m_pKeys
>77	UnaryOperator	*
>78	ExpressionStatement	 
>79	IncDecOp	m_Size --
>80	IncDec	--
>81	Identifier	m_Size
>82	Condition	 
>83	EqualityExpression	Counter == Index
>84	Identifier	Index
>85	Identifier	Counter
>86	Condition	 
>87	CallExpression	( * m_pKeys ) [ i ] . GetLength ( )
>88	ArgumentList	 
>89	Callee	( * m_pKeys ) [ i ] . GetLength
>90	MemberAccess	( * m_pKeys ) [ i ] . GetLength
>91	Identifier	GetLength
>92	ArrayIndexing	( * m_pKeys ) [ i ]
>93	Identifier	i
>94	UnaryOp	* m_pKeys
>95	Identifier	m_pKeys
>96	UnaryOperator	*
>97	Statement	 
>98	Statement	 
>99	Statement	 
>100	ExpressionStatement	 
>101	RelationalExpression	i < ( int ) m_pKeys -> GetSize ( )
>102	CastExpression	( int ) m_pKeys -> GetSize ( )
>103	CallExpression	m_pKeys -> GetSize ( )
>104	ArgumentList	 
>105	Callee	m_pKeys -> GetSize
>106	PtrMemberAccess	m_pKeys -> GetSize
>107	Identifier	GetSize
>108	Identifier	m_pKeys
>109	CastTarget	int
>110	Identifier	i
>111	IdentifierDeclStatement	 
>112	IdentifierDecl	i = 0
>113	AssignmentExpr	i = 0
>114	PrimaryExpression	0
>115	Identifier	i
>116	Identifier	i
>117	IdentifierDeclType	int
>118	Statement	 
>119	Statement	 
>120	Statement	 
>121	IdentifierDeclStatement	 
>122	IdentifierDecl	Counter = 0
>123	AssignmentExpr	Counter = 0
>124	PrimaryExpression	0
>125	Identifier	Counter
>126	Identifier	Counter
>127	IdentifierDeclType	unsigned int
>128	Condition	 
>129	AndExpression	m_pKeys && m_pElements
>130	Identifier	m_pElements
>131	Identifier	m_pKeys
>147	FunctionDef	Remove (const CString & Key)
>148	ParameterList	const CString & Key
>149	Parameter	 
>150	Identifier	Key
>151	ParameterType	const CString &
>152	CompoundStatement	 
>153	ReturnStatement	 
>154	Identifier	false
>155	IfStatement	if ( m_pKeys && m_pElements )
>156	CompoundStatement	 
>157	IfStatement	if ( Key . GetLength ( ) )
>158	CompoundStatement	 
>159	WhileStatement	while ( Counter < m_Size )
>160	CompoundStatement	 
>161	IfStatement	if ( ( * m_pKeys ) [ HashValue ] == Key )
>162	ElseStatement	else
>163	ExpressionStatement	 
>164	IncDecOp	Counter ++
>165	IncDec	++
>166	Identifier	Counter
>167	CompoundStatement	 
>168	ReturnStatement	 
>169	Identifier	true
>170	ExpressionStatement	 
>171	CallExpression	( * m_pKeys ) [ HashValue ] . Empty ( )
>172	ArgumentList	 
>173	Callee	( * m_pKeys ) [ HashValue ] . Empty
>174	MemberAccess	( * m_pKeys ) [ HashValue ] . Empty
>175	Identifier	Empty
>176	ArrayIndexing	( * m_pKeys ) [ HashValue ]
>177	Identifier	HashValue
>178	UnaryOp	* m_pKeys
>179	Identifier	m_pKeys
>180	UnaryOperator	*
>181	ExpressionStatement	 
>182	IncDecOp	m_Size --
>183	IncDec	--
>184	Identifier	m_Size
>185	Condition	 
>186	EqualityExpression	( * m_pKeys ) [ HashValue ] == Key
>187	Identifier	Key
>188	ArrayIndexing	( * m_pKeys ) [ HashValue ]
>189	Identifier	HashValue
>190	UnaryOp	* m_pKeys
>191	Identifier	m_pKeys
>192	UnaryOperator	*
>193	IdentifierDeclStatement	 
>194	IdentifierDecl	HashValue = Hash ( Key , Counter )
>195	AssignmentExpr	HashValue = Hash ( Key , Counter )
>196	CallExpression	Hash ( Key , Counter )
>197	ArgumentList	Key
>198	Argument	Counter
>199	Identifier	Counter
>200	Argument	Key
>201	Identifier	Key
>202	Callee	Hash
>203	Identifier	Hash
>204	Identifier	HashValue
>205	Identifier	HashValue
>206	IdentifierDeclType	int
>207	Condition	 
>208	RelationalExpression	Counter < m_Size
>209	Identifier	m_Size
>210	Identifier	Counter
>211	IdentifierDeclStatement	 
>212	IdentifierDecl	Counter = 0
>213	AssignmentExpr	Counter = 0
>214	PrimaryExpression	0
>215	Identifier	Counter
>216	Identifier	Counter
>217	IdentifierDeclType	int
>218	Condition	 
>219	CallExpression	Key . GetLength ( )
>220	ArgumentList	 
>221	Callee	Key . GetLength
>222	MemberAccess	Key . GetLength
>223	Identifier	GetLength
>224	Identifier	Key
>225	Condition	 
>226	AndExpression	m_pKeys && m_pElements
>227	Identifier	m_pElements
>228	Identifier	m_pKeys
>245	FunctionDef	SetElement (const CString & Key , const T & Value , bool * pAdded)
>246	ParameterList	const CString & Key , const T & Value , bool * pAdded
>247	Parameter	 
>248	Identifier	pAdded
>249	ParameterType	bool *
>250	Parameter	 
>251	Identifier	Value
>252	ParameterType	const T &
>253	Parameter	 
>254	Identifier	Key
>255	ParameterType	const CString &
>256	CompoundStatement	 
>257	ReturnStatement	 
>258	CallExpression	SetElement ( Key , Value , pAdded )
>259	ArgumentList	Key
>260	Argument	pAdded
>261	Identifier	pAdded
>262	Argument	Value
>263	Identifier	Value
>264	Argument	Key
>265	Identifier	Key
>266	Callee	SetElement
>267	Identifier	SetElement
>268	ExpressionStatement	 
>269	CallExpression	Grow ( )
>270	ArgumentList	 
>271	Callee	Grow
>272	Identifier	Grow
>273	IfStatement	if ( m_pKeys && m_pElements )
>274	CompoundStatement	 
>275	WhileStatement	while ( Counter < ( int ) m_pKeys -> GetSize ( ) )
>276	CompoundStatement	 
>277	ExpressionStatement	 
>278	IncDecOp	Counter ++
>279	IncDec	++
>280	Identifier	Counter
>281	IfStatement	if ( ! ( ( * m_pKeys ) [ HashValue ] . GetLength ( ) ) )
>282	ElseStatement	else
>283	IfStatement	if ( ( * m_pKeys ) [ HashValue ] == Key )
>284	CompoundStatement	 
>285	ReturnStatement	 
>286	UnaryOp	& ( * m_pElements ) [ HashValue ]
>287	ArrayIndexing	( * m_pElements ) [ HashValue ]
>288	Identifier	HashValue
>289	UnaryOp	* m_pElements
>290	Identifier	m_pElements
>291	UnaryOperator	*
>292	UnaryOperator	&
>293	ExpressionStatement	 
>294	AssignmentExpr	( * m_pElements ) [ HashValue ] = Value
>295	Identifier	Value
>296	ArrayIndexing	( * m_pElements ) [ HashValue ]
>297	Identifier	HashValue
>298	UnaryOp	* m_pElements
>299	Identifier	m_pElements
>300	UnaryOperator	*
>301	Condition	 
>302	EqualityExpression	( * m_pKeys ) [ HashValue ] == Key
>303	Identifier	Key
>304	ArrayIndexing	( * m_pKeys ) [ HashValue ]
>305	Identifier	HashValue
>306	UnaryOp	* m_pKeys
>307	Identifier	m_pKeys
>308	UnaryOperator	*
>309	CompoundStatement	 
>310	ReturnStatement	 
>311	UnaryOp	& ( * m_pElements ) [ HashValue ]
>312	ArrayIndexing	( * m_pElements ) [ HashValue ]
>313	Identifier	HashValue
>314	UnaryOp	* m_pElements
>315	Identifier	m_pElements
>316	UnaryOperator	*
>317	UnaryOperator	&
>318	IfStatement	if ( * pAdded )
>319	ExpressionStatement	 
>320	AssignmentExpr	* pAdded = true
>321	Identifier	true
>322	UnaryOp	* pAdded
>323	Identifier	pAdded
>324	UnaryOperator	*
>325	Condition	 
>326	UnaryOp	* pAdded
>327	Identifier	pAdded
>328	UnaryOperator	*
>329	ExpressionStatement	 
>330	IncDecOp	m_Size ++
>331	IncDec	++
>332	Identifier	m_Size
>333	ExpressionStatement	 
>334	AssignmentExpr	( * m_pElements ) [ HashValue ] = Value
>335	Identifier	Value
>336	ArrayIndexing	( * m_pElements ) [ HashValue ]
>337	Identifier	HashValue
>338	UnaryOp	* m_pElements
>339	Identifier	m_pElements
>340	UnaryOperator	*
>341	ExpressionStatement	 
>342	AssignmentExpr	( * m_pKeys ) [ HashValue ] = Key
>343	Identifier	Key
>344	ArrayIndexing	( * m_pKeys ) [ HashValue ]
>345	Identifier	HashValue
>346	UnaryOp	* m_pKeys
>347	Identifier	m_pKeys
>348	UnaryOperator	*
>349	Condition	 
>350	UnaryOp	! ( ( * m_pKeys ) [ HashValue ] . GetLength ( ) )
>351	CallExpression	( * m_pKeys ) [ HashValue ] . GetLength ( )
>352	ArgumentList	 
>353	Callee	( * m_pKeys ) [ HashValue ] . GetLength
>354	MemberAccess	( * m_pKeys ) [ HashValue ] . GetLength
>355	Identifier	GetLength
>356	ArrayIndexing	( * m_pKeys ) [ HashValue ]
>357	Identifier	HashValue
>358	UnaryOp	* m_pKeys
>359	Identifier	m_pKeys
>360	UnaryOperator	*
>361	UnaryOperator	!
>362	IdentifierDeclStatement	 
>363	IdentifierDecl	HashValue = Hash ( Key , Counter )
>364	AssignmentExpr	HashValue = Hash ( Key , Counter )
>365	CallExpression	Hash ( Key , Counter )
>366	ArgumentList	Key
>367	Argument	Counter
>368	Identifier	Counter
>369	Argument	Key
>370	Identifier	Key
>371	Callee	Hash
>372	Identifier	Hash
>373	Identifier	HashValue
>374	Identifier	HashValue
>375	IdentifierDeclType	int
>376	Condition	 
>377	RelationalExpression	Counter < ( int ) m_pKeys -> GetSize ( )
>378	CastExpression	( int ) m_pKeys -> GetSize ( )
>379	CallExpression	m_pKeys -> GetSize ( )
>380	ArgumentList	 
>381	Callee	m_pKeys -> GetSize
>382	PtrMemberAccess	m_pKeys -> GetSize
>383	Identifier	GetSize
>384	Identifier	m_pKeys
>385	CastTarget	int
>386	Identifier	Counter
>387	IdentifierDeclStatement	 
>388	IdentifierDecl	Counter = 0
>389	AssignmentExpr	Counter = 0
>390	PrimaryExpression	0
>391	Identifier	Counter
>392	Identifier	Counter
>393	IdentifierDeclType	int
>394	IfStatement	if ( ! Key . GetLength ( ) )
>395	ReturnStatement	 
>396	Identifier	NULL
>397	Condition	 
>398	UnaryOp	! Key . GetLength ( )
>399	CallExpression	Key . GetLength ( )
>400	ArgumentList	 
>401	Callee	Key . GetLength
>402	MemberAccess	Key . GetLength
>403	Identifier	GetLength
>404	Identifier	Key
>405	UnaryOperator	!
>406	IfStatement	if ( pAdded )
>407	ExpressionStatement	 
>408	AssignmentExpr	* pAdded = false
>409	Identifier	false
>410	UnaryOp	* pAdded
>411	Identifier	pAdded
>412	UnaryOperator	*
>413	Condition	 
>414	Identifier	pAdded
>415	Condition	 
>416	AndExpression	m_pKeys && m_pElements
>417	Identifier	m_pElements
>418	Identifier	m_pKeys
>446	FunctionDef	Set (const CString & Key , const T & Value)
>447	ParameterList	const CString & Key , const T & Value
>448	Parameter	 
>449	Identifier	Value
>450	ParameterType	const T &
>451	Parameter	 
>452	Identifier	Key
>453	ParameterType	const CString &
>454	CompoundStatement	 
>455	ReturnStatement	 
>456	Identifier	bResult
>457	ExpressionStatement	 
>458	CallExpression	SetElement ( Key , Value , & bResult )
>459	ArgumentList	Key
>460	Argument	& bResult
>461	UnaryOp	& bResult
>462	Identifier	bResult
>463	UnaryOperator	&
>464	Argument	Value
>465	Identifier	Value
>466	Argument	Key
>467	Identifier	Key
>468	Callee	SetElement
>469	Identifier	SetElement
>470	IdentifierDeclStatement	 
>471	IdentifierDecl	bResult = false
>472	AssignmentExpr	bResult = false
>473	Identifier	false
>474	Identifier	false
>475	Identifier	bResult
>476	IdentifierDeclType	bool
>485	FunctionDef	GetKeyAt (const int Index)
>486	ParameterList	const int Index
>487	Parameter	 
>488	Identifier	Index
>489	ParameterType	const int
>490	CompoundStatement	 
>491	ReturnStatement	 
>492	Identifier	CString 
>493	IfStatement	if ( m_pKeys && m_pElements )
>494	CompoundStatement	 
>495	CompoundStatement	 
>496	IfStatement	if ( ( * m_pKeys ) [ i ] . GetLength ( ) )
>497	CompoundStatement	 
>498	ExpressionStatement	 
>499	IncDecOp	Counter ++
>500	IncDec	++
>501	Identifier	Counter
>502	IfStatement	if ( Counter == Index )
>503	ReturnStatement	 
>504	ArrayIndexing	( * m_pKeys ) [ i ]
>505	Identifier	i
>506	UnaryOp	* m_pKeys
>507	Identifier	m_pKeys
>508	UnaryOperator	*
>509	Condition	 
>510	EqualityExpression	Counter == Index
>511	Identifier	Index
>512	Identifier	Counter
>513	Condition	 
>514	CallExpression	( * m_pKeys ) [ i ] . GetLength ( )
>515	ArgumentList	 
>516	Callee	( * m_pKeys ) [ i ] . GetLength
>517	MemberAccess	( * m_pKeys ) [ i ] . GetLength
>518	Identifier	GetLength
>519	ArrayIndexing	( * m_pKeys ) [ i ]
>520	Identifier	i
>521	UnaryOp	* m_pKeys
>522	Identifier	m_pKeys
>523	UnaryOperator	*
>524	Statement	 
>525	Statement	 
>526	Statement	 
>527	ExpressionStatement	 
>528	RelationalExpression	i < ( int ) m_pKeys -> GetSize ( )
>529	CastExpression	( int ) m_pKeys -> GetSize ( )
>530	CallExpression	m_pKeys -> GetSize ( )
>531	ArgumentList	 
>532	Callee	m_pKeys -> GetSize
>533	PtrMemberAccess	m_pKeys -> GetSize
>534	Identifier	GetSize
>535	Identifier	m_pKeys
>536	CastTarget	int
>537	Identifier	i
>538	IdentifierDeclStatement	 
>539	IdentifierDecl	i = 0
>540	AssignmentExpr	i = 0
>541	PrimaryExpression	0
>542	Identifier	i
>543	Identifier	i
>544	IdentifierDeclType	int
>545	Statement	 
>546	Statement	 
>547	Statement	 
>548	IdentifierDeclStatement	 
>549	IdentifierDecl	Counter = 0
>550	AssignmentExpr	Counter = 0
>551	PrimaryExpression	0
>552	Identifier	Counter
>553	Identifier	Counter
>554	IdentifierDeclType	int
>555	Condition	 
>556	AndExpression	m_pKeys && m_pElements
>557	Identifier	m_pElements
>558	Identifier	m_pKeys
>572	FunctionDef	GetElementAt (const int Index)
>573	ParameterList	const int Index
>574	Parameter	 
>575	Identifier	Index
>576	ParameterType	const int
>577	CompoundStatement	 
>578	ReturnStatement	 
>579	ArrayIndexing	( * m_pElements ) [ 0 ]
>580	PrimaryExpression	0
>581	UnaryOp	* m_pElements
>582	Identifier	m_pElements
>583	UnaryOperator	*
>584	ExpressionStatement	 
>585	CallExpression	assert ( 0 )
>586	ArgumentList	0
>587	Argument	0
>588	PrimaryExpression	0
>589	Callee	assert
>590	Identifier	assert
>591	IfStatement	if ( m_pKeys && m_pElements )
>592	CompoundStatement	 
>593	CompoundStatement	 
>594	IfStatement	if ( ( * m_pKeys ) [ i ] . GetLength ( ) )
>595	CompoundStatement	 
>596	ExpressionStatement	 
>597	IncDecOp	Counter ++
>598	IncDec	++
>599	Identifier	Counter
>600	IfStatement	if ( Counter == Index )
>601	ReturnStatement	 
>602	ArrayIndexing	( * m_pElements ) [ i ]
>603	Identifier	i
>604	UnaryOp	* m_pElements
>605	Identifier	m_pElements
>606	UnaryOperator	*
>607	Condition	 
>608	EqualityExpression	Counter == Index
>609	Identifier	Index
>610	Identifier	Counter
>611	Condition	 
>612	CallExpression	( * m_pKeys ) [ i ] . GetLength ( )
>613	ArgumentList	 
>614	Callee	( * m_pKeys ) [ i ] . GetLength
>615	MemberAccess	( * m_pKeys ) [ i ] . GetLength
>616	Identifier	GetLength
>617	ArrayIndexing	( * m_pKeys ) [ i ]
>618	Identifier	i
>619	UnaryOp	* m_pKeys
>620	Identifier	m_pKeys
>621	UnaryOperator	*
>622	Statement	 
>623	Statement	 
>624	Statement	 
>625	ExpressionStatement	 
>626	RelationalExpression	i < ( int ) m_pKeys -> GetSize ( )
>627	CastExpression	( int ) m_pKeys -> GetSize ( )
>628	CallExpression	m_pKeys -> GetSize ( )
>629	ArgumentList	 
>630	Callee	m_pKeys -> GetSize
>631	PtrMemberAccess	m_pKeys -> GetSize
>632	Identifier	GetSize
>633	Identifier	m_pKeys
>634	CastTarget	int
>635	Identifier	i
>636	IdentifierDeclStatement	 
>637	IdentifierDecl	i = 0
>638	AssignmentExpr	i = 0
>639	PrimaryExpression	0
>640	Identifier	i
>641	Identifier	i
>642	IdentifierDeclType	int
>643	Statement	 
>644	Statement	 
>645	Statement	 
>646	IdentifierDeclStatement	 
>647	IdentifierDecl	Counter = 0
>648	AssignmentExpr	Counter = 0
>649	PrimaryExpression	0
>650	Identifier	Counter
>651	Identifier	Counter
>652	IdentifierDeclType	int
>653	Condition	 
>654	AndExpression	m_pKeys && m_pElements
>655	Identifier	m_pElements
>656	Identifier	m_pKeys
>671	FunctionDef	GetElementAt (const int Index)
>672	ParameterList	const int Index
>673	Parameter	 
>674	Identifier	Index
>675	ParameterType	const int
>676	CompoundStatement	 
>677	ReturnStatement	 
>678	ArrayIndexing	( * m_pElements ) [ 0 ]
>679	PrimaryExpression	0
>680	UnaryOp	* m_pElements
>681	Identifier	m_pElements
>682	UnaryOperator	*
>683	ExpressionStatement	 
>684	CallExpression	assert ( 0 )
>685	ArgumentList	0
>686	Argument	0
>687	PrimaryExpression	0
>688	Callee	assert
>689	Identifier	assert
>690	IfStatement	if ( m_pKeys && m_pElements )
>691	CompoundStatement	 
>692	CompoundStatement	 
>693	IfStatement	if ( ( * m_pKeys ) [ i ] . GetLength ( ) )
>694	CompoundStatement	 
>695	ExpressionStatement	 
>696	IncDecOp	Counter ++
>697	IncDec	++
>698	Identifier	Counter
>699	IfStatement	if ( Counter == Index )
>700	ReturnStatement	 
>701	ArrayIndexing	( * m_pElements ) [ i ]
>702	Identifier	i
>703	UnaryOp	* m_pElements
>704	Identifier	m_pElements
>705	UnaryOperator	*
>706	Condition	 
>707	EqualityExpression	Counter == Index
>708	Identifier	Index
>709	Identifier	Counter
>710	Condition	 
>711	CallExpression	( * m_pKeys ) [ i ] . GetLength ( )
>712	ArgumentList	 
>713	Callee	( * m_pKeys ) [ i ] . GetLength
>714	MemberAccess	( * m_pKeys ) [ i ] . GetLength
>715	Identifier	GetLength
>716	ArrayIndexing	( * m_pKeys ) [ i ]
>717	Identifier	i
>718	UnaryOp	* m_pKeys
>719	Identifier	m_pKeys
>720	UnaryOperator	*
>721	Statement	 
>722	Statement	 
>723	Statement	 
>724	ExpressionStatement	 
>725	RelationalExpression	i < ( int ) m_pKeys -> GetSize ( )
>726	CastExpression	( int ) m_pKeys -> GetSize ( )
>727	CallExpression	m_pKeys -> GetSize ( )
>728	ArgumentList	 
>729	Callee	m_pKeys -> GetSize
>730	PtrMemberAccess	m_pKeys -> GetSize
>731	Identifier	GetSize
>732	Identifier	m_pKeys
>733	CastTarget	int
>734	Identifier	i
>735	IdentifierDeclStatement	 
>736	IdentifierDecl	i = 0
>737	AssignmentExpr	i = 0
>738	PrimaryExpression	0
>739	Identifier	i
>740	Identifier	i
>741	IdentifierDeclType	int
>742	Statement	 
>743	Statement	 
>744	Statement	 
>745	IdentifierDeclStatement	 
>746	IdentifierDecl	Counter = 0
>747	AssignmentExpr	Counter = 0
>748	PrimaryExpression	0
>749	Identifier	Counter
>750	Identifier	Counter
>751	IdentifierDeclType	int
>752	Condition	 
>753	AndExpression	m_pKeys && m_pElements
>754	Identifier	m_pElements
>755	Identifier	m_pKeys
>770	FunctionDef	CHashTable (const CHashTable < T > & Source)
>771	ParameterList	const CHashTable < T > & Source
>772	Parameter	 
>773	Identifier	Source
>774	ParameterType	const CHashTable < T > &
>775	CompoundStatement	 
>776	ExpressionStatement	 
>777	Identifier	Source
>778	Statement	 
>779	Statement	 
>780	ExpressionStatement	 
>781	AssignmentExpr	m_pKeys = NULL
>782	Identifier	NULL
>783	Identifier	m_pKeys
>784	ExpressionStatement	 
>785	AssignmentExpr	m_pElements = NULL
>786	Identifier	NULL
>787	Identifier	m_pElements
>788	ExpressionStatement	 
>789	AssignmentExpr	m_Size = 0
>790	PrimaryExpression	0
>791	Identifier	m_Size
>800	FunctionDef	operator = (const CHashTable < T > & Source)
>801	ParameterList	const CHashTable < T > & Source
>802	Parameter	 
>803	Identifier	Source
>804	ParameterType	const CHashTable < T > &
>805	CompoundStatement	 
>806	ReturnStatement	 
>807	UnaryOp	* this
>808	Identifier	this
>809	UnaryOperator	*
>810	ExpressionStatement	 
>811	AssignmentExpr	m_Size = Source . m_Size
>812	MemberAccess	Source . m_Size
>813	Identifier	m_Size
>814	Identifier	Source
>815	Identifier	m_Size
>816	IfStatement	if ( Source . m_pKeys && Source . m_pElements )
>817	CompoundStatement	 
>818	ExpressionStatement	 
>819	AssignmentExpr	( * m_pElements ) = ( * Source . m_pElements )
>820	UnaryOp	* Source . m_pElements
>821	MemberAccess	Source . m_pElements
>822	Identifier	m_pElements
>823	Identifier	Source
>824	UnaryOperator	*
>825	UnaryOp	* m_pElements
>826	Identifier	m_pElements
>827	UnaryOperator	*
>828	ExpressionStatement	 
>829	AssignmentExpr	( * m_pKeys ) = ( * Source . m_pKeys )
>830	UnaryOp	* Source . m_pKeys
>831	MemberAccess	Source . m_pKeys
>832	Identifier	m_pKeys
>833	Identifier	Source
>834	UnaryOperator	*
>835	UnaryOp	* m_pKeys
>836	Identifier	m_pKeys
>837	UnaryOperator	*
>838	ExpressionStatement	 
>839	Statement	 
>840	Statement	 
>841	Statement	 
>842	Statement	 
>843	Statement	 
>844	Statement	 
>845	IfStatement	if ( ! m_pElements )
>846	Statement	 
>847	Condition	 
>848	UnaryOp	! m_pElements
>849	Identifier	m_pElements
>850	UnaryOperator	!
>851	ExpressionStatement	 
>852	Statement	 
>853	Statement	 
>854	Statement	 
>855	Statement	 
>856	Statement	 
>857	Statement	 
>858	IfStatement	if ( ! m_pKeys )
>859	Statement	 
>860	Condition	 
>861	UnaryOp	! m_pKeys
>862	Identifier	m_pKeys
>863	UnaryOperator	!
>864	Condition	 
>865	AndExpression	Source . m_pKeys && Source . m_pElements
>866	MemberAccess	Source . m_pElements
>867	Identifier	m_pElements
>868	Identifier	Source
>869	MemberAccess	Source . m_pKeys
>870	Identifier	m_pKeys
>871	Identifier	Source
>872	IfStatement	if ( & Source == this )
>873	ReturnStatement	 
>874	UnaryOp	* this
>875	Identifier	this
>876	UnaryOperator	*
>877	Condition	 
>878	EqualityExpression	& Source == this
>879	Identifier	this
>880	UnaryOp	& Source
>881	Identifier	Source
>882	UnaryOperator	&
>901	FunctionDef	FindAndCopy (const CString & Key , T & Target)
>902	ParameterList	const CString & Key , T & Target
>903	Parameter	 
>904	Identifier	Target
>905	ParameterType	T &
>906	Parameter	 
>907	Identifier	Key
>908	ParameterType	const CString &
>909	CompoundStatement	 
>910	ReturnStatement	 
>911	Identifier	false
>912	IfStatement	if ( m_pKeys && m_pElements )
>913	CompoundStatement	 
>914	IfStatement	if ( Index != - 1 )
>915	CompoundStatement	 
>916	ReturnStatement	 
>917	Identifier	true
>918	ExpressionStatement	 
>919	AssignmentExpr	Target = ( * m_pElements ) [ Index ]
>920	ArrayIndexing	( * m_pElements ) [ Index ]
>921	Identifier	Index
>922	UnaryOp	* m_pElements
>923	Identifier	m_pElements
>924	UnaryOperator	*
>925	Identifier	Target
>926	Condition	 
>927	EqualityExpression	Index != - 1
>928	UnaryOp	- 1
>929	PrimaryExpression	1
>930	UnaryOperator	-
>931	Identifier	Index
>932	IdentifierDeclStatement	 
>933	IdentifierDecl	Index = FindElementIndex ( Key )
>934	AssignmentExpr	Index = FindElementIndex ( Key )
>935	CallExpression	FindElementIndex ( Key )
>936	ArgumentList	Key
>937	Argument	Key
>938	Identifier	Key
>939	Callee	FindElementIndex
>940	Identifier	FindElementIndex
>941	Identifier	Index
>942	Identifier	Index
>943	IdentifierDeclType	int
>944	Condition	 
>945	AndExpression	m_pKeys && m_pElements
>946	Identifier	m_pElements
>947	Identifier	m_pKeys
>962	FunctionDef	FindElementIndex (const CString & Key)
>963	ParameterList	const CString & Key
>964	Parameter	 
>965	Identifier	Key
>966	ParameterType	const CString &
>967	CompoundStatement	 
>968	ReturnStatement	 
>969	UnaryOp	- 1
>970	PrimaryExpression	1
>971	UnaryOperator	-
>972	IfStatement	if ( m_pKeys && m_pElements )
>973	CompoundStatement	 
>974	IfStatement	if ( Key . GetLength ( ) )
>975	CompoundStatement	 
>976	WhileStatement	while ( Counter < m_Size )
>977	CompoundStatement	 
>978	ExpressionStatement	 
>979	IncDecOp	Counter ++
>980	IncDec	++
>981	Identifier	Counter
>982	IfStatement	if ( ( * m_pKeys ) [ HashValue ] == Key )
>983	ElseStatement	else
>984	IfStatement	if ( ( * m_pKeys ) [ HashValue ] . GetLength ( ) == 0 )
>985	CompoundStatement	 
>986	BreakStatement	 
>987	Condition	 
>988	EqualityExpression	( * m_pKeys ) [ HashValue ] . GetLength ( ) == 0
>989	PrimaryExpression	0
>990	CallExpression	( * m_pKeys ) [ HashValue ] . GetLength ( )
>991	ArgumentList	 
>992	Callee	( * m_pKeys ) [ HashValue ] . GetLength
>993	MemberAccess	( * m_pKeys ) [ HashValue ] . GetLength
>994	Identifier	GetLength
>995	ArrayIndexing	( * m_pKeys ) [ HashValue ]
>996	Identifier	HashValue
>997	UnaryOp	* m_pKeys
>998	Identifier	m_pKeys
>999	UnaryOperator	*
>1000	CompoundStatement	 
>1001	ReturnStatement	 
>1002	Identifier	HashValue
>1003	Condition	 
>1004	EqualityExpression	( * m_pKeys ) [ HashValue ] == Key
>1005	Identifier	Key
>1006	ArrayIndexing	( * m_pKeys ) [ HashValue ]
>1007	Identifier	HashValue
>1008	UnaryOp	* m_pKeys
>1009	Identifier	m_pKeys
>1010	UnaryOperator	*
>1011	IdentifierDeclStatement	 
>1012	IdentifierDecl	HashValue = Hash ( Key , Counter )
>1013	AssignmentExpr	HashValue = Hash ( Key , Counter )
>1014	CallExpression	Hash ( Key , Counter )
>1015	ArgumentList	Key
>1016	Argument	Counter
>1017	Identifier	Counter
>1018	Argument	Key
>1019	Identifier	Key
>1020	Callee	Hash
>1021	Identifier	Hash
>1022	Identifier	HashValue
>1023	Identifier	HashValue
>1024	IdentifierDeclType	int
>1025	Condition	 
>1026	RelationalExpression	Counter < m_Size
>1027	Identifier	m_Size
>1028	Identifier	Counter
>1029	IdentifierDeclStatement	 
>1030	IdentifierDecl	Counter = 0
>1031	AssignmentExpr	Counter = 0
>1032	PrimaryExpression	0
>1033	Identifier	Counter
>1034	Identifier	Counter
>1035	IdentifierDeclType	int
>1036	Condition	 
>1037	CallExpression	Key . GetLength ( )
>1038	ArgumentList	 
>1039	Callee	Key . GetLength
>1040	MemberAccess	Key . GetLength
>1041	Identifier	GetLength
>1042	Identifier	Key
>1043	Condition	 
>1044	AndExpression	m_pKeys && m_pElements
>1045	Identifier	m_pElements
>1046	Identifier	m_pKeys
>1062	FunctionDef	FindElement (const CString & Key)
>1063	ParameterList	const CString & Key
>1064	Parameter	 
>1065	Identifier	Key
>1066	ParameterType	const CString &
>1067	CompoundStatement	 
>1068	ReturnStatement	 
>1069	Identifier	NULL
>1070	IfStatement	if ( m_pKeys && m_pElements )
>1071	CompoundStatement	 
>1072	IfStatement	if ( Index != - 1 )
>1073	ReturnStatement	 
>1074	UnaryOp	& ( * m_pElements ) [ Index ]
>1075	ArrayIndexing	( * m_pElements ) [ Index ]
>1076	Identifier	Index
>1077	UnaryOp	* m_pElements
>1078	Identifier	m_pElements
>1079	UnaryOperator	*
>1080	UnaryOperator	&
>1081	Condition	 
>1082	EqualityExpression	Index != - 1
>1083	UnaryOp	- 1
>1084	PrimaryExpression	1
>1085	UnaryOperator	-
>1086	Identifier	Index
>1087	IdentifierDeclStatement	 
>1088	IdentifierDecl	Index = FindElementIndex ( Key )
>1089	AssignmentExpr	Index = FindElementIndex ( Key )
>1090	CallExpression	FindElementIndex ( Key )
>1091	ArgumentList	Key
>1092	Argument	Key
>1093	Identifier	Key
>1094	Callee	FindElementIndex
>1095	Identifier	FindElementIndex
>1096	Identifier	Index
>1097	Identifier	Index
>1098	IdentifierDeclType	int
>1099	Condition	 
>1100	AndExpression	m_pKeys && m_pElements
>1101	Identifier	m_pElements
>1102	Identifier	m_pKeys
>1115	FunctionDef	Hash (const CString & Key , int Counter)
>1116	ParameterList	const CString & Key , int Counter
>1117	Parameter	 
>1118	Identifier	Counter
>1119	ParameterType	int
>1120	Parameter	 
>1121	Identifier	Key
>1122	ParameterType	const CString &
>1123	CompoundStatement	 
>1124	ReturnStatement	 
>1125	Identifier	retval
>1126	IdentifierDeclStatement	 
>1127	IdentifierDecl	retval = ( h1 + Counter * h2 ) % m_pKeys -> GetSize ( )
>1128	AssignmentExpr	retval = ( h1 + Counter * h2 ) % m_pKeys -> GetSize ( )
>1129	MultiplicativeExpression	( h1 + Counter * h2 ) % m_pKeys -> GetSize ( )
>1130	CallExpression	m_pKeys -> GetSize ( )
>1131	ArgumentList	 
>1132	Callee	m_pKeys -> GetSize
>1133	PtrMemberAccess	m_pKeys -> GetSize
>1134	Identifier	GetSize
>1135	Identifier	m_pKeys
>1136	AdditiveExpression	h1 + Counter * h2
>1137	MultiplicativeExpression	Counter * h2
>1138	Identifier	h2
>1139	Identifier	Counter
>1140	Identifier	h1
>1141	Identifier	retval
>1142	Identifier	retval
>1143	IdentifierDeclType	int
>1144	IdentifierDeclStatement	 
>1145	IdentifierDecl	h2 = ( ( int ) ( m_pKeys -> GetSize ( ) * hv2 ) ) * 2 + 1
>1146	AssignmentExpr	h2 = ( ( int ) ( m_pKeys -> GetSize ( ) * hv2 ) ) * 2 + 1
>1147	AdditiveExpression	( ( int ) ( m_pKeys -> GetSize ( ) * hv2 ) ) * 2 + 1
>1148	PrimaryExpression	1
>1149	MultiplicativeExpression	( ( int ) ( m_pKeys -> GetSize ( ) * hv2 ) ) * 2
>1150	PrimaryExpression	2
>1151	CastExpression	( int ) ( m_pKeys -> GetSize ( ) * hv2 )
>1152	MultiplicativeExpression	m_pKeys -> GetSize ( ) * hv2
>1153	Identifier	hv2
>1154	CallExpression	m_pKeys -> GetSize ( )
>1155	ArgumentList	 
>1156	Callee	m_pKeys -> GetSize
>1157	PtrMemberAccess	m_pKeys -> GetSize
>1158	Identifier	GetSize
>1159	Identifier	m_pKeys
>1160	CastTarget	int
>1161	Identifier	h2
>1162	Identifier	h2
>1163	IdentifierDeclType	int
>1164	IdentifierDeclStatement	 
>1165	IdentifierDecl	hv2 = ( v2 - ( int ) v2 )
>1166	AssignmentExpr	hv2 = ( v2 - ( int ) v2 )
>1167	AdditiveExpression	v2 - ( int ) v2
>1168	CastExpression	( int ) v2
>1169	Identifier	v2
>1170	CastTarget	int
>1171	Identifier	v2
>1172	Identifier	hv2
>1173	Identifier	hv2
>1174	IdentifierDeclType	double
>1175	IdentifierDeclStatement	 
>1176	IdentifierDecl	v2 = KeyVal * 0.87380339887
>1177	AssignmentExpr	v2 = KeyVal * 0.87380339887
>1178	MultiplicativeExpression	KeyVal * 0.87380339887
>1179	PrimaryExpression	0.87380339887
>1180	Identifier	KeyVal
>1181	Identifier	v2
>1182	Identifier	v2
>1183	IdentifierDeclType	double
>1184	IdentifierDeclStatement	 
>1185	IdentifierDecl	h1 = ( int ) ( m_pKeys -> GetSize ( ) * hv1 )
>1186	AssignmentExpr	h1 = ( int ) ( m_pKeys -> GetSize ( ) * hv1 )
>1187	CastExpression	( int ) ( m_pKeys -> GetSize ( ) * hv1 )
>1188	MultiplicativeExpression	m_pKeys -> GetSize ( ) * hv1
>1189	Identifier	hv1
>1190	CallExpression	m_pKeys -> GetSize ( )
>1191	ArgumentList	 
>1192	Callee	m_pKeys -> GetSize
>1193	PtrMemberAccess	m_pKeys -> GetSize
>1194	Identifier	GetSize
>1195	Identifier	m_pKeys
>1196	CastTarget	int
>1197	Identifier	h1
>1198	Identifier	h1
>1199	IdentifierDeclType	int
>1200	IdentifierDeclStatement	 
>1201	IdentifierDecl	hv1 = ( v1 - ( int ) v1 )
>1202	AssignmentExpr	hv1 = ( v1 - ( int ) v1 )
>1203	AdditiveExpression	v1 - ( int ) v1
>1204	CastExpression	( int ) v1
>1205	Identifier	v1
>1206	CastTarget	int
>1207	Identifier	v1
>1208	Identifier	hv1
>1209	Identifier	hv1
>1210	IdentifierDeclType	double
>1211	IdentifierDeclStatement	 
>1212	IdentifierDecl	v1 = KeyVal * 0.6180339887
>1213	AssignmentExpr	v1 = KeyVal * 0.6180339887
>1214	MultiplicativeExpression	KeyVal * 0.6180339887
>1215	PrimaryExpression	0.6180339887
>1216	Identifier	KeyVal
>1217	Identifier	v1
>1218	Identifier	v1
>1219	IdentifierDeclType	double
>1220	ExpressionStatement	 
>1221	AssignmentExpr	KeyVal = abs ( KeyVal )
>1222	CallExpression	abs ( KeyVal )
>1223	ArgumentList	KeyVal
>1224	Argument	KeyVal
>1225	Identifier	KeyVal
>1226	Callee	abs
>1227	Identifier	abs
>1228	Identifier	KeyVal
>1229	IfStatement	if ( Key . GetLength ( ) >= 12 )
>1230	CompoundStatement	 
>1231	ExpressionStatement	 
>1232	AssignmentExpr	KeyVal ^= K2
>1233	Identifier	K2
>1234	Identifier	KeyVal
>1235	ExpressionStatement	 
>1236	CallExpression	memcpy ( & K2 , ( const char * ) Key . GetBuffer ( ) + 8 , 4 )
>1237	ArgumentList	& K2
>1238	Argument	4
>1239	PrimaryExpression	4
>1240	Argument	( const char * ) Key . GetBuffer ( ) + 8
>1241	AdditiveExpression	( const char * ) Key . GetBuffer ( ) + 8
>1242	PrimaryExpression	8
>1243	CastExpression	( const char * ) Key . GetBuffer ( )
>1244	CallExpression	Key . GetBuffer ( )
>1245	ArgumentList	 
>1246	Callee	Key . GetBuffer
>1247	MemberAccess	Key . GetBuffer
>1248	Identifier	GetBuffer
>1249	Identifier	Key
>1250	CastTarget	const char *
>1251	Argument	& K2
>1252	UnaryOp	& K2
>1253	Identifier	K2
>1254	UnaryOperator	&
>1255	Callee	memcpy
>1256	Identifier	memcpy
>1257	Condition	 
>1258	RelationalExpression	Key . GetLength ( ) >= 12
>1259	PrimaryExpression	12
>1260	CallExpression	Key . GetLength ( )
>1261	ArgumentList	 
>1262	Callee	Key . GetLength
>1263	MemberAccess	Key . GetLength
>1264	Identifier	GetLength
>1265	Identifier	Key
>1266	IfStatement	if ( Key . GetLength ( ) >= 8 )
>1267	CompoundStatement	 
>1268	ExpressionStatement	 
>1269	AssignmentExpr	KeyVal ^= K2
>1270	Identifier	K2
>1271	Identifier	KeyVal
>1272	ExpressionStatement	 
>1273	CallExpression	memcpy ( & K2 , ( const char * ) Key . GetBuffer ( ) + 4 , 4 )
>1274	ArgumentList	& K2
>1275	Argument	4
>1276	PrimaryExpression	4
>1277	Argument	( const char * ) Key . GetBuffer ( ) + 4
>1278	AdditiveExpression	( const char * ) Key . GetBuffer ( ) + 4
>1279	PrimaryExpression	4
>1280	CastExpression	( const char * ) Key . GetBuffer ( )
>1281	CallExpression	Key . GetBuffer ( )
>1282	ArgumentList	 
>1283	Callee	Key . GetBuffer
>1284	MemberAccess	Key . GetBuffer
>1285	Identifier	GetBuffer
>1286	Identifier	Key
>1287	CastTarget	const char *
>1288	Argument	& K2
>1289	UnaryOp	& K2
>1290	Identifier	K2
>1291	UnaryOperator	&
>1292	Callee	memcpy
>1293	Identifier	memcpy
>1294	Condition	 
>1295	RelationalExpression	Key . GetLength ( ) >= 8
>1296	PrimaryExpression	8
>1297	CallExpression	Key . GetLength ( )
>1298	ArgumentList	 
>1299	Callee	Key . GetLength
>1300	MemberAccess	Key . GetLength
>1301	Identifier	GetLength
>1302	Identifier	Key
>1303	IfStatement	if ( Key . GetLength ( ) >= 4 )
>1304	CompoundStatement	 
>1305	ExpressionStatement	 
>1306	CallExpression	memcpy ( & KeyVal , ( const char * ) Key . GetBuffer ( ) , 4 )
>1307	ArgumentList	& KeyVal
>1308	Argument	4
>1309	PrimaryExpression	4
>1310	Argument	( const char * ) Key . GetBuffer ( )
>1311	CastExpression	( const char * ) Key . GetBuffer ( )
>1312	CallExpression	Key . GetBuffer ( )
>1313	ArgumentList	 
>1314	Callee	Key . GetBuffer
>1315	MemberAccess	Key . GetBuffer
>1316	Identifier	GetBuffer
>1317	Identifier	Key
>1318	CastTarget	const char *
>1319	Argument	& KeyVal
>1320	UnaryOp	& KeyVal
>1321	Identifier	KeyVal
>1322	UnaryOperator	&
>1323	Callee	memcpy
>1324	Identifier	memcpy
>1325	Condition	 
>1326	RelationalExpression	Key . GetLength ( ) >= 4
>1327	PrimaryExpression	4
>1328	CallExpression	Key . GetLength ( )
>1329	ArgumentList	 
>1330	Callee	Key . GetLength
>1331	MemberAccess	Key . GetLength
>1332	Identifier	GetLength
>1333	Identifier	Key
>1334	IfStatement	if ( Key . GetLength ( ) < 4 )
>1335	ExpressionStatement	 
>1336	CallExpression	memcpy ( ( char * ) & KeyVal , ( const char * ) Key . GetBuffer ( ) , Key . GetLength ( ) )
>1337	ArgumentList	( char * ) & KeyVal
>1338	Argument	Key . GetLength ( )
>1339	CallExpression	Key . GetLength ( )
>1340	ArgumentList	 
>1341	Callee	Key . GetLength
>1342	MemberAccess	Key . GetLength
>1343	Identifier	GetLength
>1344	Identifier	Key
>1345	Argument	( const char * ) Key . GetBuffer ( )
>1346	CastExpression	( const char * ) Key . GetBuffer ( )
>1347	CallExpression	Key . GetBuffer ( )
>1348	ArgumentList	 
>1349	Callee	Key . GetBuffer
>1350	MemberAccess	Key . GetBuffer
>1351	Identifier	GetBuffer
>1352	Identifier	Key
>1353	CastTarget	const char *
>1354	Argument	( char * ) & KeyVal
>1355	CastExpression	( char * ) & KeyVal
>1356	UnaryOp	& KeyVal
>1357	Identifier	KeyVal
>1358	UnaryOperator	&
>1359	CastTarget	char *
>1360	Callee	memcpy
>1361	Identifier	memcpy
>1362	Condition	 
>1363	RelationalExpression	Key . GetLength ( ) < 4
>1364	PrimaryExpression	4
>1365	CallExpression	Key . GetLength ( )
>1366	ArgumentList	 
>1367	Callee	Key . GetLength
>1368	MemberAccess	Key . GetLength
>1369	Identifier	GetLength
>1370	Identifier	Key
>1371	IdentifierDeclStatement	 
>1372	IdentifierDecl	K2
>1373	Identifier	K2
>1374	IdentifierDeclType	unsigned long
>1375	IdentifierDeclStatement	 
>1376	IdentifierDecl	KeyVal = 0
>1377	AssignmentExpr	KeyVal = 0
>1378	PrimaryExpression	0
>1379	Identifier	KeyVal
>1380	Identifier	KeyVal
>1381	IdentifierDeclType	unsigned long
>1404	FunctionDef	Grow (int NewSize)
>1405	ParameterList	int NewSize
>1406	Parameter	 
>1407	Identifier	NewSize
>1408	ParameterType	int
>1409	CompoundStatement	 
>1410	IfStatement	if ( pKeys && pElements )
>1411	CompoundStatement	 
>1412	ExpressionStatement	 
>1413	Identifier	pElements
>1414	Statement	 
>1415	ExpressionStatement	 
>1416	Identifier	pKeys
>1417	Statement	 
>1418	CompoundStatement	 
>1419	IfStatement	if ( ( * pKeys ) [ i ] . GetLength ( ) )
>1420	CompoundStatement	 
>1421	ExpressionStatement	 
>1422	CallExpression	Set ( ( * pKeys ) [ i ] , ( * pElements ) [ i ] )
>1423	ArgumentList	( * pKeys ) [ i ]
>1424	Argument	( * pElements ) [ i ]
>1425	ArrayIndexing	( * pElements ) [ i ]
>1426	Identifier	i
>1427	UnaryOp	* pElements
>1428	Identifier	pElements
>1429	UnaryOperator	*
>1430	Argument	( * pKeys ) [ i ]
>1431	ArrayIndexing	( * pKeys ) [ i ]
>1432	Identifier	i
>1433	UnaryOp	* pKeys
>1434	Identifier	pKeys
>1435	UnaryOperator	*
>1436	Callee	Set
>1437	Identifier	Set
>1438	Condition	 
>1439	CallExpression	( * pKeys ) [ i ] . GetLength ( )
>1440	ArgumentList	 
>1441	Callee	( * pKeys ) [ i ] . GetLength
>1442	MemberAccess	( * pKeys ) [ i ] . GetLength
>1443	Identifier	GetLength
>1444	ArrayIndexing	( * pKeys ) [ i ]
>1445	Identifier	i
>1446	UnaryOp	* pKeys
>1447	Identifier	pKeys
>1448	UnaryOperator	*
>1449	Statement	 
>1450	Statement	 
>1451	Statement	 
>1452	ExpressionStatement	 
>1453	RelationalExpression	i < ( int ) pKeys -> GetSize ( )
>1454	CastExpression	( int ) pKeys -> GetSize ( )
>1455	CallExpression	pKeys -> GetSize ( )
>1456	ArgumentList	 
>1457	Callee	pKeys -> GetSize
>1458	PtrMemberAccess	pKeys -> GetSize
>1459	Identifier	GetSize
>1460	Identifier	pKeys
>1461	CastTarget	int
>1462	Identifier	i
>1463	IdentifierDeclStatement	 
>1464	IdentifierDecl	i = 0
>1465	AssignmentExpr	i = 0
>1466	PrimaryExpression	0
>1467	Identifier	i
>1468	Identifier	i
>1469	IdentifierDeclType	int
>1470	Statement	 
>1471	Statement	 
>1472	Statement	 
>1473	Condition	 
>1474	AndExpression	pKeys && pElements
>1475	Identifier	pElements
>1476	Identifier	pKeys
>1477	ExpressionStatement	 
>1478	AssignmentExpr	m_pElements = new CVector < T > ( NewSize , true )
>1479	Expression	NewSize , true
>1480	Identifier	true
>1481	Identifier	NewSize
>1482	Identifier	m_pElements
>1483	ExpressionStatement	 
>1484	AssignmentExpr	m_pKeys = new CVector < CString > ( NewSize , true )
>1485	Expression	NewSize , true
>1486	Identifier	true
>1487	Identifier	NewSize
>1488	Identifier	m_pKeys
>1489	ExpressionStatement	 
>1490	AssignmentExpr	m_Size = 0
>1491	PrimaryExpression	0
>1492	Identifier	m_Size
>1493	IdentifierDeclStatement	 
>1494	IdentifierDecl	* pElements = m_pElements
>1495	AssignmentExpr	* pElements = m_pElements
>1496	Identifier	m_pElements
>1497	Identifier	m_pElements
>1498	Identifier	pElements
>1499	IdentifierDeclType	CVector < T > *
>1500	IdentifierDeclStatement	 
>1501	IdentifierDecl	* pKeys = m_pKeys
>1502	AssignmentExpr	* pKeys = m_pKeys
>1503	Identifier	m_pKeys
>1504	Identifier	m_pKeys
>1505	Identifier	pKeys
>1506	IdentifierDeclType	CVector < CString > *
>1507	IfStatement	if ( NewSize == - 1 )
>1508	ExpressionStatement	 
>1509	AssignmentExpr	NewSize = m_pKeys ? m_pKeys -> GetSize ( ) + ( ( ( int ) ( m_pKeys -> GetSize ( ) / 5 ) ) + 1 ) 
>1510	ConditionalExpression	m_pKeys ? m_pKeys -> GetSize ( ) + ( ( ( int ) ( m_pKeys -> GetSize ( ) / 5 ) ) + 1 ) 
>1511	PrimaryExpression	20
>1512	AdditiveExpression	m_pKeys -> GetSize ( ) + ( ( ( int ) ( m_pKeys -> GetSize ( ) / 5 ) ) + 1 )
>1513	AdditiveExpression	( ( int ) ( m_pKeys -> GetSize ( ) / 5 ) ) + 1
>1514	PrimaryExpression	1
>1515	CastExpression	( int ) ( m_pKeys -> GetSize ( ) / 5 )
>1516	MultiplicativeExpression	m_pKeys -> GetSize ( ) / 5
>1517	PrimaryExpression	5
>1518	CallExpression	m_pKeys -> GetSize ( )
>1519	ArgumentList	 
>1520	Callee	m_pKeys -> GetSize
>1521	PtrMemberAccess	m_pKeys -> GetSize
>1522	Identifier	GetSize
>1523	Identifier	m_pKeys
>1524	CastTarget	int
>1525	CallExpression	m_pKeys -> GetSize ( )
>1526	ArgumentList	 
>1527	Callee	m_pKeys -> GetSize
>1528	PtrMemberAccess	m_pKeys -> GetSize
>1529	Identifier	GetSize
>1530	Identifier	m_pKeys
>1531	Condition	m_pKeys
>1532	Identifier	m_pKeys
>1533	Identifier	NewSize
>1534	Condition	 
>1535	EqualityExpression	NewSize == - 1
>1536	UnaryOp	- 1
>1537	PrimaryExpression	1
>1538	UnaryOperator	-
>1539	Identifier	NewSize
>1559	FunctionDef	RemoveAll ()
>1560	ParameterList	 
>1561	CompoundStatement	 
>1562	IfStatement	if ( m_pKeys )
>1563	ExpressionStatement	 
>1564	CallExpression	m_pKeys -> RemoveAll ( )
>1565	ArgumentList	 
>1566	Callee	m_pKeys -> RemoveAll
>1567	PtrMemberAccess	m_pKeys -> RemoveAll
>1568	Identifier	RemoveAll
>1569	Identifier	m_pKeys
>1570	Condition	 
>1571	Identifier	m_pKeys
>1572	IfStatement	if ( m_pElements )
>1573	ExpressionStatement	 
>1574	CallExpression	m_pElements -> RemoveAll ( )
>1575	ArgumentList	 
>1576	Callee	m_pElements -> RemoveAll
>1577	PtrMemberAccess	m_pElements -> RemoveAll
>1578	Identifier	RemoveAll
>1579	Identifier	m_pElements
>1580	Condition	 
>1581	Identifier	m_pElements
>1582	ExpressionStatement	 
>1583	AssignmentExpr	m_Size = 0
>1584	PrimaryExpression	0
>1585	Identifier	m_Size
>1592	FunctionDef	operator << (ostream & Stream)
>1593	ParameterList	ostream & Stream
>1594	Parameter	 
>1595	Identifier	Stream
>1596	ParameterType	ostream &
>1597	CompoundStatement	 
>1598	ReturnStatement	 
>1599	Identifier	Stream
>1600	IfStatement	if ( m_pKeys && m_pElements )
>1601	CompoundStatement	 
>1602	CompoundStatement	 
>1603	IfStatement	if ( ( * m_pKeys ) [ i ] . GetLength ( ) )
>1604	ElseStatement	else
>1605	ExpressionStatement	 
>1606	ShiftExpression	Stream << i << \"
>1607	ShiftExpression	i << \"
>1608	ShiftExpression	\"
>1609	Identifier	endl
>1610	PrimaryExpression	\"
>1611	Identifier	i
>1612	Identifier	Stream
>1613	ExpressionStatement	 
>1614	ShiftExpression	Stream << i << \"
>1615	ShiftExpression	i << \"
>1616	ShiftExpression	\"
>1617	ShiftExpression	( * m_pKeys ) [ i ] << \"=\" << ( * m_pElements ) [ i ] << endl
>1618	ShiftExpression	\"=\" << ( * m_pElements ) [ i ] << endl
>1619	ShiftExpression	( * m_pElements ) [ i ] << endl
>1620	Identifier	endl
>1621	ArrayIndexing	( * m_pElements ) [ i ]
>1622	Identifier	i
>1623	UnaryOp	* m_pElements
>1624	Identifier	m_pElements
>1625	UnaryOperator	*
>1626	PrimaryExpression	\"=\"
>1627	ArrayIndexing	( * m_pKeys ) [ i ]
>1628	Identifier	i
>1629	UnaryOp	* m_pKeys
>1630	Identifier	m_pKeys
>1631	UnaryOperator	*
>1632	PrimaryExpression	\"
>1633	Identifier	i
>1634	Identifier	Stream
>1635	Condition	 
>1636	CallExpression	( * m_pKeys ) [ i ] . GetLength ( )
>1637	ArgumentList	 
>1638	Callee	( * m_pKeys ) [ i ] . GetLength
>1639	MemberAccess	( * m_pKeys ) [ i ] . GetLength
>1640	Identifier	GetLength
>1641	ArrayIndexing	( * m_pKeys ) [ i ]
>1642	Identifier	i
>1643	UnaryOp	* m_pKeys
>1644	Identifier	m_pKeys
>1645	UnaryOperator	*
>1646	Statement	 
>1647	Statement	 
>1648	Statement	 
>1649	ExpressionStatement	 
>1650	RelationalExpression	i < ( int ) m_pElements -> GetSize ( )
>1651	CastExpression	( int ) m_pElements -> GetSize ( )
>1652	CallExpression	m_pElements -> GetSize ( )
>1653	ArgumentList	 
>1654	Callee	m_pElements -> GetSize
>1655	PtrMemberAccess	m_pElements -> GetSize
>1656	Identifier	GetSize
>1657	Identifier	m_pElements
>1658	CastTarget	int
>1659	Identifier	i
>1660	IdentifierDeclStatement	 
>1661	IdentifierDecl	i = 0
>1662	AssignmentExpr	i = 0
>1663	PrimaryExpression	0
>1664	Identifier	i
>1665	Identifier	i
>1666	IdentifierDeclType	int
>1667	Statement	 
>1668	Statement	 
>1669	Statement	 
>1670	Condition	 
>1671	AndExpression	m_pKeys && m_pElements
>1672	Identifier	m_pElements
>1673	Identifier	m_pKeys
<3=5,4
<5=14,10,6
<6=7
<7=9,8
<10=11
<11=13,12
<14=15
<15=17,16
<25=27,26
<27=36,34,30,28
<28=29
<30=32,31
<32=33
<34=35
<36=38,37
<38=39
<45=50,46
<46=47
<47=49,48
<50=53,51
<51=52
<53=128,54
<54=121,120,119,118,111,100,99,98,97,55
<55=56
<56=86,57
<57=58
<58=82,64,59
<59=60
<60=61
<61=63,62
<64=78,67,65
<65=66
<67=68
<68=70,69
<70=71
<71=73,72
<73=75,74
<75=77,76
<78=79
<79=81,80
<82=83
<83=85,84
<86=87
<87=89,88
<89=90
<90=92,91
<92=94,93
<94=96,95
<100=101
<101=110,102
<102=109,103
<103=105,104
<105=106
<106=108,107
<111=112
<112=117,116,113
<113=115,114
<121=122
<122=127,126,123
<123=125,124
<128=129
<129=131,130
<147=152,148
<148=149
<149=151,150
<152=155,153
<153=154
<155=225,156
<156=157
<157=218,158
<158=211,159
<159=207,160
<160=193,161
<161=185,167,162
<162=163
<163=164
<164=166,165
<167=181,170,168
<168=169
<170=171
<171=173,172
<173=174
<174=176,175
<176=178,177
<178=180,179
<181=182
<182=184,183
<185=186
<186=188,187
<188=190,189
<190=192,191
<193=194
<194=206,205,195
<195=204,196
<196=202,197
<197=200,198
<198=199
<200=201
<202=203
<207=208
<208=210,209
<211=212
<212=217,216,213
<213=215,214
<218=219
<219=221,220
<221=222
<222=224,223
<225=226
<226=228,227
<245=256,246
<246=253,250,247
<247=249,248
<250=252,251
<253=255,254
<256=273,268,257
<257=258
<258=266,259
<259=264,262,260
<260=261
<262=263
<264=265
<266=267
<268=269
<269=271,270
<271=272
<273=415,274
<274=406,394,387,275
<275=376,276
<276=362,281,277
<277=278
<278=280,279
<281=349,309,282
<282=283
<283=301,284
<284=293,285
<285=286
<286=292,287
<287=289,288
<289=291,290
<293=294
<294=296,295
<296=298,297
<298=300,299
<301=302
<302=304,303
<304=306,305
<306=308,307
<309=341,333,329,318,310
<310=311
<311=317,312
<312=314,313
<314=316,315
<318=325,319
<319=320
<320=322,321
<322=324,323
<325=326
<326=328,327
<329=330
<330=332,331
<333=334
<334=336,335
<336=338,337
<338=340,339
<341=342
<342=344,343
<344=346,345
<346=348,347
<349=350
<350=361,351
<351=353,352
<353=354
<354=356,355
<356=358,357
<358=360,359
<362=363
<363=375,374,364
<364=373,365
<365=371,366
<366=369,367
<367=368
<369=370
<371=372
<376=377
<377=386,378
<378=385,379
<379=381,380
<381=382
<382=384,383
<387=388
<388=393,392,389
<389=391,390
<394=397,395
<395=396
<397=398
<398=405,399
<399=401,400
<401=402
<402=404,403
<406=413,407
<407=408
<408=410,409
<410=412,411
<413=414
<415=416
<416=418,417
<446=454,447
<447=451,448
<448=450,449
<451=453,452
<454=470,457,455
<455=456
<457=458
<458=468,459
<459=466,464,460
<460=461
<461=463,462
<464=465
<466=467
<468=469
<470=471
<471=476,475,472
<472=474,473
<485=490,486
<486=487
<487=489,488
<490=493,491
<491=492
<493=555,494
<494=548,547,546,545,538,527,526,525,524,495
<495=496
<496=513,497
<497=502,498
<498=499
<499=501,500
<502=509,503
<503=504
<504=506,505
<506=508,507
<509=510
<510=512,511
<513=514
<514=516,515
<516=517
<517=519,518
<519=521,520
<521=523,522
<527=528
<528=537,529
<529=536,530
<530=532,531
<532=533
<533=535,534
<538=539
<539=544,543,540
<540=542,541
<548=549
<549=554,553,550
<550=552,551
<555=556
<556=558,557
<572=577,573
<573=574
<574=576,575
<577=591,584,578
<578=579
<579=581,580
<581=583,582
<584=585
<585=589,586
<586=587
<587=588
<589=590
<591=653,592
<592=646,645,644,643,636,625,624,623,622,593
<593=594
<594=611,595
<595=600,596
<596=597
<597=599,598
<600=607,601
<601=602
<602=604,603
<604=606,605
<607=608
<608=610,609
<611=612
<612=614,613
<614=615
<615=617,616
<617=619,618
<619=621,620
<625=626
<626=635,627
<627=634,628
<628=630,629
<630=631
<631=633,632
<636=637
<637=642,641,638
<638=640,639
<646=647
<647=652,651,648
<648=650,649
<653=654
<654=656,655
<671=676,672
<672=673
<673=675,674
<676=690,683,677
<677=678
<678=680,679
<680=682,681
<683=684
<684=688,685
<685=686
<686=687
<688=689
<690=752,691
<691=745,744,743,742,735,724,723,722,721,692
<692=693
<693=710,694
<694=699,695
<695=696
<696=698,697
<699=706,700
<700=701
<701=703,702
<703=705,704
<706=707
<707=709,708
<710=711
<711=713,712
<713=714
<714=716,715
<716=718,717
<718=720,719
<724=725
<725=734,726
<726=733,727
<727=729,728
<729=730
<730=732,731
<735=736
<736=741,740,737
<737=739,738
<745=746
<746=751,750,747
<747=749,748
<752=753
<753=755,754
<770=775,771
<771=772
<772=774,773
<775=788,784,780,779,778,776
<776=777
<780=781
<781=783,782
<784=785
<785=787,786
<788=789
<789=791,790
<800=805,801
<801=802
<802=804,803
<805=872,816,810,806
<806=807
<807=809,808
<810=811
<811=815,812
<812=814,813
<816=864,817
<817=858,857,856,855,854,853,852,851,845,844,843,842,841,840,839,838,828,818
<818=819
<819=825,820
<820=824,821
<821=823,822
<825=827,826
<828=829
<829=835,830
<830=834,831
<831=833,832
<835=837,836
<845=847,846
<847=848
<848=850,849
<858=860,859
<860=861
<861=863,862
<864=865
<865=869,866
<866=868,867
<869=871,870
<872=877,873
<873=874
<874=876,875
<877=878
<878=880,879
<880=882,881
<901=909,902
<902=906,903
<903=905,904
<906=908,907
<909=912,910
<910=911
<912=944,913
<913=932,914
<914=926,915
<915=918,916
<916=917
<918=919
<919=925,920
<920=922,921
<922=924,923
<926=927
<927=931,928
<928=930,929
<932=933
<933=943,942,934
<934=941,935
<935=939,936
<936=937
<937=938
<939=940
<944=945
<945=947,946
<962=967,963
<963=964
<964=966,965
<967=972,968
<968=969
<969=971,970
<972=1043,973
<973=974
<974=1036,975
<975=1029,976
<976=1025,977
<977=1011,982,978
<978=979
<979=981,980
<982=1003,1000,983
<983=984
<984=987,985
<985=986
<987=988
<988=990,989
<990=992,991
<992=993
<993=995,994
<995=997,996
<997=999,998
<1000=1001
<1001=1002
<1003=1004
<1004=1006,1005
<1006=1008,1007
<1008=1010,1009
<1011=1012
<1012=1024,1023,1013
<1013=1022,1014
<1014=1020,1015
<1015=1018,1016
<1016=1017
<1018=1019
<1020=1021
<1025=1026
<1026=1028,1027
<1029=1030
<1030=1035,1034,1031
<1031=1033,1032
<1036=1037
<1037=1039,1038
<1039=1040
<1040=1042,1041
<1043=1044
<1044=1046,1045
<1062=1067,1063
<1063=1064
<1064=1066,1065
<1067=1070,1068
<1068=1069
<1070=1099,1071
<1071=1087,1072
<1072=1081,1073
<1073=1074
<1074=1080,1075
<1075=1077,1076
<1077=1079,1078
<1081=1082
<1082=1086,1083
<1083=1085,1084
<1087=1088
<1088=1098,1097,1089
<1089=1096,1090
<1090=1094,1091
<1091=1092
<1092=1093
<1094=1095
<1099=1100
<1100=1102,1101
<1115=1123,1116
<1116=1120,1117
<1117=1119,1118
<1120=1122,1121
<1123=1375,1371,1334,1303,1266,1229,1220,1211,1200,1184,1175,1164,1144,1126,1124
<1124=1125
<1126=1127
<1127=1143,1142,1128
<1128=1141,1129
<1129=1136,1130
<1130=1132,1131
<1132=1133
<1133=1135,1134
<1136=1140,1137
<1137=1139,1138
<1144=1145
<1145=1163,1162,1146
<1146=1161,1147
<1147=1149,1148
<1149=1151,1150
<1151=1160,1152
<1152=1154,1153
<1154=1156,1155
<1156=1157
<1157=1159,1158
<1164=1165
<1165=1174,1173,1166
<1166=1172,1167
<1167=1171,1168
<1168=1170,1169
<1175=1176
<1176=1183,1182,1177
<1177=1181,1178
<1178=1180,1179
<1184=1185
<1185=1199,1198,1186
<1186=1197,1187
<1187=1196,1188
<1188=1190,1189
<1190=1192,1191
<1192=1193
<1193=1195,1194
<1200=1201
<1201=1210,1209,1202
<1202=1208,1203
<1203=1207,1204
<1204=1206,1205
<1211=1212
<1212=1219,1218,1213
<1213=1217,1214
<1214=1216,1215
<1220=1221
<1221=1228,1222
<1222=1226,1223
<1223=1224
<1224=1225
<1226=1227
<1229=1257,1230
<1230=1235,1231
<1231=1232
<1232=1234,1233
<1235=1236
<1236=1255,1237
<1237=1251,1240,1238
<1238=1239
<1240=1241
<1241=1243,1242
<1243=1250,1244
<1244=1246,1245
<1246=1247
<1247=1249,1248
<1251=1252
<1252=1254,1253
<1255=1256
<1257=1258
<1258=1260,1259
<1260=1262,1261
<1262=1263
<1263=1265,1264
<1266=1294,1267
<1267=1272,1268
<1268=1269
<1269=1271,1270
<1272=1273
<1273=1292,1274
<1274=1288,1277,1275
<1275=1276
<1277=1278
<1278=1280,1279
<1280=1287,1281
<1281=1283,1282
<1283=1284
<1284=1286,1285
<1288=1289
<1289=1291,1290
<1292=1293
<1294=1295
<1295=1297,1296
<1297=1299,1298
<1299=1300
<1300=1302,1301
<1303=1325,1304
<1304=1305
<1305=1306
<1306=1323,1307
<1307=1319,1310,1308
<1308=1309
<1310=1311
<1311=1318,1312
<1312=1314,1313
<1314=1315
<1315=1317,1316
<1319=1320
<1320=1322,1321
<1323=1324
<1325=1326
<1326=1328,1327
<1328=1330,1329
<1330=1331
<1331=1333,1332
<1334=1362,1335
<1335=1336
<1336=1360,1337
<1337=1354,1345,1338
<1338=1339
<1339=1341,1340
<1341=1342
<1342=1344,1343
<1345=1346
<1346=1353,1347
<1347=1349,1348
<1349=1350
<1350=1352,1351
<1354=1355
<1355=1359,1356
<1356=1358,1357
<1360=1361
<1362=1363
<1363=1365,1364
<1365=1367,1366
<1367=1368
<1368=1370,1369
<1371=1372
<1372=1374,1373
<1375=1376
<1376=1381,1380,1377
<1377=1379,1378
<1404=1409,1405
<1405=1406
<1406=1408,1407
<1409=1507,1500,1493,1489,1483,1477,1410
<1410=1473,1411
<1411=1472,1471,1470,1463,1452,1451,1450,1449,1418,1417,1415,1414,1412
<1412=1413
<1415=1416
<1418=1419
<1419=1438,1420
<1420=1421
<1421=1422
<1422=1436,1423
<1423=1430,1424
<1424=1425
<1425=1427,1426
<1427=1429,1428
<1430=1431
<1431=1433,1432
<1433=1435,1434
<1436=1437
<1438=1439
<1439=1441,1440
<1441=1442
<1442=1444,1443
<1444=1446,1445
<1446=1448,1447
<1452=1453
<1453=1462,1454
<1454=1461,1455
<1455=1457,1456
<1457=1458
<1458=1460,1459
<1463=1464
<1464=1469,1468,1465
<1465=1467,1466
<1473=1474
<1474=1476,1475
<1477=1478
<1478=1482,1479
<1479=1481,1480
<1483=1484
<1484=1488,1485
<1485=1487,1486
<1489=1490
<1490=1492,1491
<1493=1494
<1494=1499,1498,1495
<1495=1497,1496
<1500=1501
<1501=1506,1505,1502
<1502=1504,1503
<1507=1534,1508
<1508=1509
<1509=1533,1510
<1510=1531,1512,1511
<1512=1525,1513
<1513=1515,1514
<1515=1524,1516
<1516=1518,1517
<1518=1520,1519
<1520=1521
<1521=1523,1522
<1525=1527,1526
<1527=1528
<1528=1530,1529
<1531=1532
<1534=1535
<1535=1539,1536
<1536=1538,1537
<1559=1561,1560
<1561=1582,1572,1562
<1562=1570,1563
<1563=1564
<1564=1566,1565
<1566=1567
<1567=1569,1568
<1570=1571
<1572=1580,1573
<1573=1574
<1574=1576,1575
<1576=1577
<1577=1579,1578
<1580=1581
<1582=1583
<1583=1585,1584
<1592=1597,1593
<1593=1594
<1594=1596,1595
<1597=1600,1598
<1598=1599
<1600=1670,1601
<1601=1669,1668,1667,1660,1649,1648,1647,1646,1602
<1602=1603
<1603=1635,1613,1604
<1604=1605
<1605=1606
<1606=1612,1607
<1607=1611,1608
<1608=1610,1609
<1613=1614
<1614=1634,1615
<1615=1633,1616
<1616=1632,1617
<1617=1627,1618
<1618=1626,1619
<1619=1621,1620
<1621=1623,1622
<1623=1625,1624
<1627=1629,1628
<1629=1631,1630
<1635=1636
<1636=1638,1637
<1638=1639
<1639=1641,1640
<1641=1643,1642
<1643=1645,1644
<1649=1650
<1650=1659,1651
<1651=1658,1652
<1652=1654,1653
<1654=1655
<1655=1657,1656
<1660=1661
<1661=1666,1665,1662
<1662=1664,1663
<1670=1671
<1671=1673,1672
