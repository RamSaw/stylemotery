>14	FunctionDef	line ()
>15	ParameterList	 
>16	CompoundStatement	 
>20	FunctionDef	line (point p , point q)
>21	ParameterList	point p , point q
>22	Parameter	 
>23	Identifier	q
>24	ParameterType	point
>25	Parameter	 
>26	Identifier	p
>27	ParameterType	point
>28	CompoundStatement	 
>29	IfStatement	if ( abs ( p . x - q . x ) > epsilon )
>30	ElseStatement	else
>31	CompoundStatement	 
>32	ExpressionStatement	 
>33	AssignmentExpr	intercept = p . x
>34	MemberAccess	p . x
>35	Identifier	x
>36	Identifier	p
>37	Identifier	intercept
>38	ExpressionStatement	 
>39	AssignmentExpr	bslope = false
>40	Identifier	false
>41	Identifier	bslope
>42	CompoundStatement	 
>43	ExpressionStatement	 
>44	AssignmentExpr	bslope = true
>45	Identifier	true
>46	Identifier	bslope
>47	ExpressionStatement	 
>48	AssignmentExpr	intercept = p . y - slope * p . x
>49	AdditiveExpression	p . y - slope * p . x
>50	MultiplicativeExpression	slope * p . x
>51	MemberAccess	p . x
>52	Identifier	x
>53	Identifier	p
>54	Identifier	slope
>55	MemberAccess	p . y
>56	Identifier	y
>57	Identifier	p
>58	Identifier	intercept
>59	ExpressionStatement	 
>60	AssignmentExpr	slope = ( p . y - q . y ) / ( p . x - q . x )
>61	MultiplicativeExpression	( p . y - q . y ) / ( p . x - q . x )
>62	AdditiveExpression	p . x - q . x
>63	MemberAccess	q . x
>64	Identifier	x
>65	Identifier	q
>66	MemberAccess	p . x
>67	Identifier	x
>68	Identifier	p
>69	AdditiveExpression	p . y - q . y
>70	MemberAccess	q . y
>71	Identifier	y
>72	Identifier	q
>73	MemberAccess	p . y
>74	Identifier	y
>75	Identifier	p
>76	Identifier	slope
>77	Condition	 
>78	RelationalExpression	abs ( p . x - q . x ) > epsilon
>79	Identifier	epsilon
>80	CallExpression	abs ( p . x - q . x )
>81	ArgumentList	p . x - q . x
>82	Argument	p . x - q . x
>83	AdditiveExpression	p . x - q . x
>84	MemberAccess	q . x
>85	Identifier	x
>86	Identifier	q
>87	MemberAccess	p . x
>88	Identifier	x
>89	Identifier	p
>90	Callee	abs
>91	Identifier	abs
>92	ExpressionStatement	 
>93	AssignmentExpr	epsilon = 0.0001
>94	PrimaryExpression	0.0001
>95	Identifier	epsilon
>112	FunctionDef	hashcode ()
>113	ParameterList	 
>114	ReturnType	int
>115	CompoundStatement	 
>116	ReturnStatement	 
>117	AdditiveExpression	sl * 1000 + in
>118	Identifier	in
>119	MultiplicativeExpression	sl * 1000
>120	PrimaryExpression	1000
>121	Identifier	sl
>122	IdentifierDeclStatement	 
>123	IdentifierDecl	in = ( int ) ( intercept * 1000 )
>124	AssignmentExpr	in = ( int ) ( intercept * 1000 )
>125	CastExpression	( int ) ( intercept * 1000 )
>126	MultiplicativeExpression	intercept * 1000
>127	PrimaryExpression	1000
>128	Identifier	intercept
>129	CastTarget	int
>130	Identifier	in
>131	Identifier	in
>132	IdentifierDeclType	int
>133	IdentifierDeclStatement	 
>134	IdentifierDecl	sl = ( int ) ( slope * 1000 )
>135	AssignmentExpr	sl = ( int ) ( slope * 1000 )
>136	CastExpression	( int ) ( slope * 1000 )
>137	MultiplicativeExpression	slope * 1000
>138	PrimaryExpression	1000
>139	Identifier	slope
>140	CastTarget	int
>141	Identifier	sl
>142	Identifier	sl
>143	IdentifierDeclType	int
>151	FunctionDef	print ()
>152	ParameterList	 
>153	ReturnType	void
>154	CompoundStatement	 
>155	ExpressionStatement	 
>156	ShiftExpression	cout << \"y = \" << slope << \"x + \" << intercept << endl
>157	ShiftExpression	\"y = \" << slope << \"x + \" << intercept << endl
>158	ShiftExpression	slope << \"x + \" << intercept << endl
>159	ShiftExpression	\"x + \" << intercept << endl
>160	ShiftExpression	intercept << endl
>161	Identifier	endl
>162	Identifier	intercept
>163	PrimaryExpression	\"x + \"
>164	Identifier	slope
>165	PrimaryExpression	\"y = \"
>166	Identifier	cout
>170	FunctionDef	find_best_line (point * p , int point_num)
>171	ParameterList	point * p , int point_num
>172	Parameter	 
>173	Identifier	point_num
>174	ParameterType	int
>175	Parameter	 
>176	Identifier	p
>177	ParameterType	point *
>178	ReturnType	line
>179	CompoundStatement	 
>180	ReturnStatement	 
>181	Identifier	bestline
>182	ForStatement	for ( int i = 0 ; i < point_num ; ++ i )
>183	CompoundStatement	 
>184	ForStatement	for ( int j = i + 1 ; j < point_num ; ++ j )
>185	CompoundStatement	 
>186	IfStatement	if ( first )
>187	ElseStatement	else
>188	CompoundStatement	 
>189	IfStatement	if ( mii [ l . hashcode ( ) ] > mii [ bestline . hashcode ( ) ] )
>190	ExpressionStatement	 
>191	AssignmentExpr	bestline = l
>192	Identifier	l
>193	Identifier	bestline
>194	Condition	 
>195	RelationalExpression	mii [ l . hashcode ( ) ] > mii [ bestline . hashcode ( ) ]
>196	ArrayIndexing	mii [ bestline . hashcode ( ) ]
>197	CallExpression	bestline . hashcode ( )
>198	ArgumentList	 
>199	Callee	bestline . hashcode
>200	MemberAccess	bestline . hashcode
>201	Identifier	hashcode
>202	Identifier	bestline
>203	Identifier	mii
>204	ArrayIndexing	mii [ l . hashcode ( ) ]
>205	CallExpression	l . hashcode ( )
>206	ArgumentList	 
>207	Callee	l . hashcode
>208	MemberAccess	l . hashcode
>209	Identifier	hashcode
>210	Identifier	l
>211	Identifier	mii
>212	CompoundStatement	 
>213	ExpressionStatement	 
>214	AssignmentExpr	first = false
>215	Identifier	false
>216	Identifier	first
>217	ExpressionStatement	 
>218	AssignmentExpr	bestline = l
>219	Identifier	l
>220	Identifier	bestline
>221	Condition	 
>222	Identifier	first
>223	ExpressionStatement	 
>224	AssignmentExpr	mii [ l . hashcode ( ) ] = mii [ l . hashcode ( ) ] + 1
>225	AdditiveExpression	mii [ l . hashcode ( ) ] + 1
>226	PrimaryExpression	1
>227	ArrayIndexing	mii [ l . hashcode ( ) ]
>228	CallExpression	l . hashcode ( )
>229	ArgumentList	 
>230	Callee	l . hashcode
>231	MemberAccess	l . hashcode
>232	Identifier	hashcode
>233	Identifier	l
>234	Identifier	mii
>235	ArrayIndexing	mii [ l . hashcode ( ) ]
>236	CallExpression	l . hashcode ( )
>237	ArgumentList	 
>238	Callee	l . hashcode
>239	MemberAccess	l . hashcode
>240	Identifier	hashcode
>241	Identifier	l
>242	Identifier	mii
>243	IfStatement	if ( mii . find ( l . hashcode ( ) ) == mii . end ( ) )
>244	CompoundStatement	 
>245	ExpressionStatement	 
>246	AssignmentExpr	mii [ l . hashcode ( ) ] = 0
>247	PrimaryExpression	0
>248	ArrayIndexing	mii [ l . hashcode ( ) ]
>249	CallExpression	l . hashcode ( )
>250	ArgumentList	 
>251	Callee	l . hashcode
>252	MemberAccess	l . hashcode
>253	Identifier	hashcode
>254	Identifier	l
>255	Identifier	mii
>256	Condition	 
>257	EqualityExpression	mii . find ( l . hashcode ( ) ) == mii . end ( )
>258	CallExpression	mii . end ( )
>259	ArgumentList	 
>260	Callee	mii . end
>261	MemberAccess	mii . end
>262	Identifier	end
>263	Identifier	mii
>264	CallExpression	mii . find ( l . hashcode ( ) )
>265	ArgumentList	l . hashcode ( )
>266	Argument	l . hashcode ( )
>267	CallExpression	l . hashcode ( )
>268	ArgumentList	 
>269	Callee	l . hashcode
>270	MemberAccess	l . hashcode
>271	Identifier	hashcode
>272	Identifier	l
>273	Callee	mii . find
>274	MemberAccess	mii . find
>275	Identifier	find
>276	Identifier	mii
>277	IdentifierDeclStatement	 
>278	IdentifierDecl	l ( p [ i ] , p [ j ] )
>279	Expression	p [ i ] , p [ j ]
>280	ArrayIndexing	p [ j ]
>281	Identifier	j
>282	Identifier	p
>283	ArrayIndexing	p [ i ]
>284	Identifier	i
>285	Identifier	p
>286	Identifier	l
>287	IdentifierDeclType	line
>288	UnaryExpression	 
>289	Identifier	j
>290	IncDec	++
>291	Condition	 
>292	RelationalExpression	j < point_num
>293	Identifier	point_num
>294	Identifier	j
>295	ForInit	 
>296	IdentifierDeclStatement	int j = i + 1 ;
>297	IdentifierDecl	j = i + 1
>298	AssignmentExpr	j = i + 1
>299	AdditiveExpression	i + 1
>300	PrimaryExpression	1
>301	Identifier	i
>302	Identifier	j
>303	Identifier	j
>304	IdentifierDeclType	int
>305	UnaryExpression	 
>306	Identifier	i
>307	IncDec	++
>308	Condition	 
>309	RelationalExpression	i < point_num
>310	Identifier	point_num
>311	Identifier	i
>312	ForInit	 
>313	IdentifierDeclStatement	int i = 0 ;
>314	IdentifierDecl	i = 0
>315	AssignmentExpr	i = 0
>316	PrimaryExpression	0
>317	Identifier	i
>318	Identifier	i
>319	IdentifierDeclType	int
>320	IdentifierDeclStatement	 
>321	IdentifierDecl	mii
>322	Identifier	mii
>323	IdentifierDeclType	map < int , int >
>324	IdentifierDeclStatement	 
>325	IdentifierDecl	first = true
>326	AssignmentExpr	first = true
>327	Identifier	true
>328	Identifier	true
>329	Identifier	first
>330	IdentifierDeclType	bool
>331	IdentifierDeclStatement	 
>332	IdentifierDecl	bestline
>333	Identifier	bestline
>334	IdentifierDeclType	line
>357	FunctionDef	main ()
>358	ParameterList	 
>359	ReturnType	int
>360	CompoundStatement	 
>361	ReturnStatement	 
>362	PrimaryExpression	0
>363	ExpressionStatement	 
>364	CallExpression	l . print ( )
>365	ArgumentList	 
>366	Callee	l . print
>367	MemberAccess	l . print
>368	Identifier	print
>369	Identifier	l
>370	IdentifierDeclStatement	 
>371	IdentifierDecl	l = find_best_line ( p , point_num )
>372	AssignmentExpr	l = find_best_line ( p , point_num )
>373	CallExpression	find_best_line ( p , point_num )
>374	ArgumentList	p
>375	Argument	point_num
>376	Identifier	point_num
>377	Argument	p
>378	Identifier	p
>379	Callee	find_best_line
>380	Identifier	find_best_line
>381	Identifier	l
>382	Identifier	l
>383	IdentifierDeclType	line
>384	ForStatement	for ( int i = 0 ; i < point_num ; ++ i )
>385	CompoundStatement	 
>386	ExpressionStatement	 
>387	AssignmentExpr	p [ i ] . y = rand ( ) / double ( RAND_MAX ) * graph_size
>388	MultiplicativeExpression	rand ( ) / double ( RAND_MAX ) * graph_size
>389	MultiplicativeExpression	double ( RAND_MAX ) * graph_size
>390	Identifier	graph_size
>391	CallExpression	double ( RAND_MAX )
>392	ArgumentList	RAND_MAX
>393	Argument	RAND_MAX
>394	Identifier	RAND_MAX
>395	Callee	double
>396	Identifier	double
>397	CallExpression	rand ( )
>398	ArgumentList	 
>399	Callee	rand
>400	Identifier	rand
>401	MemberAccess	p [ i ] . y
>402	Identifier	y
>403	ArrayIndexing	p [ i ]
>404	Identifier	i
>405	Identifier	p
>406	ExpressionStatement	 
>407	AssignmentExpr	p [ i ] . x = rand ( ) / double ( RAND_MAX ) * graph_size
>408	MultiplicativeExpression	rand ( ) / double ( RAND_MAX ) * graph_size
>409	MultiplicativeExpression	double ( RAND_MAX ) * graph_size
>410	Identifier	graph_size
>411	CallExpression	double ( RAND_MAX )
>412	ArgumentList	RAND_MAX
>413	Argument	RAND_MAX
>414	Identifier	RAND_MAX
>415	Callee	double
>416	Identifier	double
>417	CallExpression	rand ( )
>418	ArgumentList	 
>419	Callee	rand
>420	Identifier	rand
>421	MemberAccess	p [ i ] . x
>422	Identifier	x
>423	ArrayIndexing	p [ i ]
>424	Identifier	i
>425	Identifier	p
>426	UnaryExpression	 
>427	Identifier	i
>428	IncDec	++
>429	Condition	 
>430	RelationalExpression	i < point_num
>431	Identifier	point_num
>432	Identifier	i
>433	ForInit	 
>434	IdentifierDeclStatement	int i = 0 ;
>435	IdentifierDecl	i = 0
>436	AssignmentExpr	i = 0
>437	PrimaryExpression	0
>438	Identifier	i
>439	Identifier	i
>440	IdentifierDeclType	int
>441	IdentifierDeclStatement	 
>442	IdentifierDecl	* p = new point [ point_num ]
>443	AssignmentExpr	* p = new point [ point_num ]
>444	Identifier	point_num
>445	Identifier	point_num
>446	Identifier	p
>447	IdentifierDeclType	point *
>448	IdentifierDeclStatement	 
>449	IdentifierDecl	point_num = 500
>450	AssignmentExpr	point_num = 500
>451	PrimaryExpression	500
>452	Identifier	point_num
>453	Identifier	point_num
>454	IdentifierDeclType	int
>455	IdentifierDeclStatement	 
>456	IdentifierDecl	graph_size = 100
>457	AssignmentExpr	graph_size = 100
>458	PrimaryExpression	100
>459	Identifier	graph_size
>460	Identifier	graph_size
>461	IdentifierDeclType	int
>462	ExpressionStatement	 
>463	CallExpression	srand ( ( unsigned ) time ( 0 ) )
>464	ArgumentList	( unsigned ) time ( 0 )
>465	Argument	( unsigned ) time ( 0 )
>466	CastExpression	( unsigned ) time ( 0 )
>467	CallExpression	time ( 0 )
>468	ArgumentList	0
>469	Argument	0
>470	PrimaryExpression	0
>471	Callee	time
>472	Identifier	time
>473	CastTarget	unsigned
>474	Callee	srand
>475	Identifier	srand
<14=16,15
<20=28,21
<21=25,22
<22=24,23
<25=27,26
<28=92,29
<29=77,42,30
<30=31
<31=38,32
<32=33
<33=37,34
<34=36,35
<38=39
<39=41,40
<42=59,47,43
<43=44
<44=46,45
<47=48
<48=58,49
<49=55,50
<50=54,51
<51=53,52
<55=57,56
<59=60
<60=76,61
<61=69,62
<62=66,63
<63=65,64
<66=68,67
<69=73,70
<70=72,71
<73=75,74
<77=78
<78=80,79
<80=90,81
<81=82
<82=83
<83=87,84
<84=86,85
<87=89,88
<90=91
<92=93
<93=95,94
<112=115,114,113
<115=133,122,116
<116=117
<117=119,118
<119=121,120
<122=123
<123=132,131,124
<124=130,125
<125=129,126
<126=128,127
<133=134
<134=143,142,135
<135=141,136
<136=140,137
<137=139,138
<151=154,153,152
<154=155
<155=156
<156=166,157
<157=165,158
<158=164,159
<159=163,160
<160=162,161
<170=179,178,171
<171=175,172
<172=174,173
<175=177,176
<179=331,324,320,182,180
<180=181
<182=312,308,305,183
<183=184
<184=295,291,288,185
<185=277,243,223,186
<186=221,212,187
<187=188
<188=189
<189=194,190
<190=191
<191=193,192
<194=195
<195=204,196
<196=203,197
<197=199,198
<199=200
<200=202,201
<204=211,205
<205=207,206
<207=208
<208=210,209
<212=217,213
<213=214
<214=216,215
<217=218
<218=220,219
<221=222
<223=224
<224=235,225
<225=227,226
<227=234,228
<228=230,229
<230=231
<231=233,232
<235=242,236
<236=238,237
<238=239
<239=241,240
<243=256,244
<244=245
<245=246
<246=248,247
<248=255,249
<249=251,250
<251=252
<252=254,253
<256=257
<257=264,258
<258=260,259
<260=261
<261=263,262
<264=273,265
<265=266
<266=267
<267=269,268
<269=270
<270=272,271
<273=274
<274=276,275
<277=278
<278=287,286,279
<279=283,280
<280=282,281
<283=285,284
<288=290,289
<291=292
<292=294,293
<295=296
<296=297
<297=304,303,298
<298=302,299
<299=301,300
<305=307,306
<308=309
<309=311,310
<312=313
<313=314
<314=319,318,315
<315=317,316
<320=321
<321=323,322
<324=325
<325=330,329,326
<326=328,327
<331=332
<332=334,333
<357=360,359,358
<360=462,455,448,441,384,370,363,361
<361=362
<363=364
<364=366,365
<366=367
<367=369,368
<370=371
<371=383,382,372
<372=381,373
<373=379,374
<374=377,375
<375=376
<377=378
<379=380
<384=433,429,426,385
<385=406,386
<386=387
<387=401,388
<388=397,389
<389=391,390
<391=395,392
<392=393
<393=394
<395=396
<397=399,398
<399=400
<401=403,402
<403=405,404
<406=407
<407=421,408
<408=417,409
<409=411,410
<411=415,412
<412=413
<413=414
<415=416
<417=419,418
<419=420
<421=423,422
<423=425,424
<426=428,427
<429=430
<430=432,431
<433=434
<434=435
<435=440,439,436
<436=438,437
<441=442
<442=447,446,443
<443=445,444
<448=449
<449=454,453,450
<450=452,451
<455=456
<456=461,460,457
<457=459,458
<462=463
<463=474,464
<464=465
<465=466
<466=473,467
<467=471,468
<468=469
<469=470
<471=472
<474=475
