>3	FunctionDef	usage ()
>4	ParameterList	 
>5	ReturnType	void
>6	CompoundStatement	 
>7	ExpressionStatement	 
>8	ShiftExpression	cerr << \"OPTIONS
>9	ShiftExpression	\"OPTIONS
>10	ShiftExpression	\"  -o <graphFile>    
>11	ShiftExpression	\"  -t <xformFile>    
>12	ShiftExpression	DRWN_STANDARD_OPTIONS_USAGE << endl
>13	Identifier	endl
>14	Identifier	DRWN_STANDARD_OPTIONS_USAGE
>15	PrimaryExpression	\"  -t <xformFile>    
>16	PrimaryExpression	\"  -o <graphFile>    
>17	PrimaryExpression	\"OPTIONS
>18	Identifier	cerr
>19	ExpressionStatement	 
>20	ShiftExpression	cerr << \"USAGE
>21	PrimaryExpression	\"USAGE
>22	Identifier	cerr
>23	ExpressionStatement	 
>24	ShiftExpression	cerr << DRWN_USAGE_HEADER << endl
>25	ShiftExpression	DRWN_USAGE_HEADER << endl
>26	Identifier	endl
>27	Identifier	DRWN_USAGE_HEADER
>28	Identifier	cerr
>32	FunctionDef	main (int argc , char * argv [ ])
>33	ParameterList	int argc , char * argv [ ]
>34	Parameter	 
>35	Identifier	argv
>36	ParameterType	char * [ ]
>37	Parameter	 
>38	Identifier	argc
>39	ParameterType	int
>40	ReturnType	int
>41	CompoundStatement	 
>42	ReturnStatement	 
>43	PrimaryExpression	0
>44	ExpressionStatement	 
>45	CallExpression	drwnCodeProfiler 
>46	ArgumentList	 
>47	Callee	drwnCodeProfiler 
>48	Identifier	drwnCodeProfiler 
>49	ExpressionStatement	 
>50	CallExpression	drwnCodeProfiler 
>51	ArgumentList	hMain
>52	Argument	hMain
>53	Identifier	hMain
>54	Callee	drwnCodeProfiler 
>55	Identifier	drwnCodeProfiler 
>56	ExpressionStatement	 
>57	Identifier	featureTransform
>58	IfStatement	if ( featureTransform != NULL )
>59	Statement	 
>60	Condition	 
>61	EqualityExpression	featureTransform != NULL
>62	Identifier	NULL
>63	Identifier	featureTransform
>64	IfStatement	if ( outGraphFile != NULL )
>65	CompoundStatement	 
>66	ExpressionStatement	 
>67	CallExpression	graph . write ( outGraphFile )
>68	ArgumentList	outGraphFile
>69	Argument	outGraphFile
>70	Identifier	outGraphFile
>71	Callee	graph . write
>72	MemberAccess	graph . write
>73	Identifier	write
>74	Identifier	graph
>75	ExpressionStatement	 
>76	CallExpression	DRWN_LOG_MESSAGE ( \"Writing drwnNNGraph to \" << outGraphFile << \"...\" )
>77	ArgumentList	\"Writing drwnNNGraph to \" << outGraphFile << \"...\"
>78	Argument	\"Writing drwnNNGraph to \" << outGraphFile << \"...\"
>79	ShiftExpression	\"Writing drwnNNGraph to \" << outGraphFile << \"...\"
>80	ShiftExpression	outGraphFile << \"...\"
>81	PrimaryExpression	\"...\"
>82	Identifier	outGraphFile
>83	PrimaryExpression	\"Writing drwnNNGraph to \"
>84	Callee	DRWN_LOG_MESSAGE
>85	Identifier	DRWN_LOG_MESSAGE
>86	Condition	 
>87	EqualityExpression	outGraphFile != NULL
>88	Identifier	NULL
>89	Identifier	outGraphFile
>90	ForStatement	for ( int fileIndx = 1 ; fileIndx < DRWN_CMDLINE_ARGC ; fileIndx ++ )
>91	CompoundStatement	 
>92	ExpressionStatement	 
>93	CallExpression	DRWN_LOG_VERBOSE ( \"...graph has \" << graph . numEdges ( ) << \" edges\" )
>94	ArgumentList	\"...graph has \" << graph . numEdges ( ) << \" edges\"
>95	Argument	\"...graph has \" << graph . numEdges ( ) << \" edges\"
>96	ShiftExpression	\"...graph has \" << graph . numEdges ( ) << \" edges\"
>97	ShiftExpression	graph . numEdges ( ) << \" edges\"
>98	PrimaryExpression	\" edges\"
>99	CallExpression	graph . numEdges ( )
>100	ArgumentList	 
>101	Callee	graph . numEdges
>102	MemberAccess	graph . numEdges
>103	Identifier	numEdges
>104	Identifier	graph
>105	PrimaryExpression	\"...graph has \"
>106	Callee	DRWN_LOG_VERBOSE
>107	Identifier	DRWN_LOG_VERBOSE
>108	ExpressionStatement	 
>109	CallExpression	DRWN_LOG_VERBOSE ( \"...graph has \" << graph . numNodes ( ) << \" nodes\" )
>110	ArgumentList	\"...graph has \" << graph . numNodes ( ) << \" nodes\"
>111	Argument	\"...graph has \" << graph . numNodes ( ) << \" nodes\"
>112	ShiftExpression	\"...graph has \" << graph . numNodes ( ) << \" nodes\"
>113	ShiftExpression	graph . numNodes ( ) << \" nodes\"
>114	PrimaryExpression	\" nodes\"
>115	CallExpression	graph . numNodes ( )
>116	ArgumentList	 
>117	Callee	graph . numNodes
>118	MemberAccess	graph . numNodes
>119	Identifier	numNodes
>120	Identifier	graph
>121	PrimaryExpression	\"...graph has \"
>122	Callee	DRWN_LOG_VERBOSE
>123	Identifier	DRWN_LOG_VERBOSE
>124	ExpressionStatement	 
>125	CallExpression	DRWN_LOG_MESSAGE ( \"...graph has \" << graph . numImages ( ) << \" images\" )
>126	ArgumentList	\"...graph has \" << graph . numImages ( ) << \" images\"
>127	Argument	\"...graph has \" << graph . numImages ( ) << \" images\"
>128	ShiftExpression	\"...graph has \" << graph . numImages ( ) << \" images\"
>129	ShiftExpression	graph . numImages ( ) << \" images\"
>130	PrimaryExpression	\" images\"
>131	CallExpression	graph . numImages ( )
>132	ArgumentList	 
>133	Callee	graph . numImages
>134	MemberAccess	graph . numImages
>135	Identifier	numImages
>136	Identifier	graph
>137	PrimaryExpression	\"...graph has \"
>138	Callee	DRWN_LOG_MESSAGE
>139	Identifier	DRWN_LOG_MESSAGE
>140	ForStatement	for ( unsigned imgIndx = 0 ; imgIndx < additionalNodes . numImages ( ) ; imgIndx ++ )
>141	CompoundStatement	 
>142	ForStatement	for ( unsigned segId = 0 ; segId < additionalNodes [ imgIndx ] . numNodes ( ) ; segId ++ )
>143	CompoundStatement	 
>144	ForStatement	for ( drwnNNGraphEdgeList 
>145	CompoundStatement	 
>146	IfStatement	if ( bHasExistingMatches )
>147	ElseStatement	else
>148	CompoundStatement	 
>149	ExpressionStatement	 
>150	CallExpression	graph [ newIndx ] [ segId ] . edges . push_back ( e )
>151	ArgumentList	e
>152	Argument	e
>153	Identifier	e
>154	Callee	graph [ newIndx ] [ segId ] . edges . push_back
>155	MemberAccess	graph [ newIndx ] [ segId ] . edges . push_back
>156	Identifier	push_back
>157	MemberAccess	graph [ newIndx ] [ segId ] . edges
>158	Identifier	edges
>159	ArrayIndexing	graph [ newIndx ] [ segId ]
>160	Identifier	segId
>161	ArrayIndexing	graph [ newIndx ]
>162	Identifier	newIndx
>163	Identifier	graph
>164	CompoundStatement	 
>165	ExpressionStatement	 
>166	CallExpression	graph [ newIndx ] [ segId ] . insert ( e )
>167	ArgumentList	e
>168	Argument	e
>169	Identifier	e
>170	Callee	graph [ newIndx ] [ segId ] . insert
>171	MemberAccess	graph [ newIndx ] [ segId ] . insert
>172	Identifier	insert
>173	ArrayIndexing	graph [ newIndx ] [ segId ]
>174	Identifier	segId
>175	ArrayIndexing	graph [ newIndx ]
>176	Identifier	newIndx
>177	Identifier	graph
>178	Condition	 
>179	Identifier	bHasExistingMatches
>180	ExpressionStatement	 
>181	AssignmentExpr	e . targetNode . imgIndx = imgIndxMapping [ e . targetNode . imgIndx ]
>182	ArrayIndexing	imgIndxMapping [ e . targetNode . imgIndx ]
>183	MemberAccess	e . targetNode . imgIndx
>184	Identifier	imgIndx
>185	MemberAccess	e . targetNode
>186	Identifier	targetNode
>187	Identifier	e
>188	Identifier	imgIndxMapping
>189	MemberAccess	e . targetNode . imgIndx
>190	Identifier	imgIndx
>191	MemberAccess	e . targetNode
>192	Identifier	targetNode
>193	Identifier	e
>194	IdentifierDeclStatement	 
>195	IdentifierDecl	e ( * kt )
>196	UnaryOp	* kt
>197	Identifier	kt
>198	UnaryOperator	*
>199	Identifier	e
>200	IdentifierDeclType	drwnNNGraphEdge
>201	UnaryExpression	 
>202	Identifier	kt
>203	IncDec	++
>204	Condition	 
>205	EqualityExpression	kt != el . end ( )
>206	CallExpression	el . end ( )
>207	ArgumentList	 
>208	Callee	el . end
>209	MemberAccess	el . end
>210	Identifier	end
>211	Identifier	el
>212	Identifier	kt
>213	ForInit	 
>214	IdentifierDeclStatement	drwnNNGraphEdgeList 
>215	IdentifierDecl	kt = el . begin ( )
>216	AssignmentExpr	kt = el . begin ( )
>217	CallExpression	el . begin ( )
>218	ArgumentList	 
>219	Callee	el . begin
>220	MemberAccess	el . begin
>221	Identifier	begin
>222	Identifier	el
>223	Identifier	kt
>224	Identifier	kt
>225	IdentifierDeclType	drwnNNGraphEdgeList 
>226	IdentifierDeclStatement	 
>227	IdentifierDecl	& el = additionalNodes [ imgIndx ] [ segId ] . edges
>228	AssignmentExpr	& el = additionalNodes [ imgIndx ] [ segId ] . edges
>229	MemberAccess	additionalNodes [ imgIndx ] [ segId ] . edges
>230	Identifier	edges
>231	ArrayIndexing	additionalNodes [ imgIndx ] [ segId ]
>232	Identifier	segId
>233	ArrayIndexing	additionalNodes [ imgIndx ]
>234	Identifier	imgIndx
>235	Identifier	additionalNodes
>236	Identifier	el
>237	Identifier	el
>238	IdentifierDeclType	const drwnNNGraphEdgeList &
>239	IdentifierDeclStatement	 
>240	IdentifierDecl	bHasExistingMatches = ! graph [ newIndx ] [ segId ] . edges . empty ( )
>241	AssignmentExpr	bHasExistingMatches = ! graph [ newIndx ] [ segId ] . edges . empty ( )
>242	UnaryOp	! graph [ newIndx ] [ segId ] . edges . empty ( )
>243	CallExpression	graph [ newIndx ] [ segId ] . edges . empty ( )
>244	ArgumentList	 
>245	Callee	graph [ newIndx ] [ segId ] . edges . empty
>246	MemberAccess	graph [ newIndx ] [ segId ] . edges . empty
>247	Identifier	empty
>248	MemberAccess	graph [ newIndx ] [ segId ] . edges
>249	Identifier	edges
>250	ArrayIndexing	graph [ newIndx ] [ segId ]
>251	Identifier	segId
>252	ArrayIndexing	graph [ newIndx ]
>253	Identifier	newIndx
>254	Identifier	graph
>255	UnaryOperator	!
>256	Identifier	bHasExistingMatches
>257	Identifier	bHasExistingMatches
>258	IdentifierDeclType	const bool
>259	IncDecOp	 
>260	IncDec	++
>261	Identifier	segId
>262	Condition	 
>263	RelationalExpression	segId < additionalNodes [ imgIndx ] . numNodes ( )
>264	CallExpression	additionalNodes [ imgIndx ] . numNodes ( )
>265	ArgumentList	 
>266	Callee	additionalNodes [ imgIndx ] . numNodes
>267	MemberAccess	additionalNodes [ imgIndx ] . numNodes
>268	Identifier	numNodes
>269	ArrayIndexing	additionalNodes [ imgIndx ]
>270	Identifier	imgIndx
>271	Identifier	additionalNodes
>272	Identifier	segId
>273	ForInit	 
>274	IdentifierDeclStatement	unsigned segId = 0 ;
>275	IdentifierDecl	segId = 0
>276	AssignmentExpr	segId = 0
>277	PrimaryExpression	0
>278	Identifier	segId
>279	Identifier	segId
>280	IdentifierDeclType	unsigned
>281	ExpressionStatement	 
>282	CallExpression	DRWN_ASSERT ( graph [ newIndx ] . numNodes ( ) == additionalNodes [ imgIndx ] . numNodes ( ) )
>283	ArgumentList	graph [ newIndx ] . numNodes ( ) == additionalNodes [ imgIndx ] . numNodes ( )
>284	Argument	graph [ newIndx ] . numNodes ( ) == additionalNodes [ imgIndx ] . numNodes ( )
>285	EqualityExpression	graph [ newIndx ] . numNodes ( ) == additionalNodes [ imgIndx ] . numNodes ( )
>286	CallExpression	additionalNodes [ imgIndx ] . numNodes ( )
>287	ArgumentList	 
>288	Callee	additionalNodes [ imgIndx ] . numNodes
>289	MemberAccess	additionalNodes [ imgIndx ] . numNodes
>290	Identifier	numNodes
>291	ArrayIndexing	additionalNodes [ imgIndx ]
>292	Identifier	imgIndx
>293	Identifier	additionalNodes
>294	CallExpression	graph [ newIndx ] . numNodes ( )
>295	ArgumentList	 
>296	Callee	graph [ newIndx ] . numNodes
>297	MemberAccess	graph [ newIndx ] . numNodes
>298	Identifier	numNodes
>299	ArrayIndexing	graph [ newIndx ]
>300	Identifier	newIndx
>301	Identifier	graph
>302	Callee	DRWN_ASSERT
>303	Identifier	DRWN_ASSERT
>304	IdentifierDeclStatement	 
>305	IdentifierDecl	newIndx = imgIndxMapping [ imgIndx ]
>306	AssignmentExpr	newIndx = imgIndxMapping [ imgIndx ]
>307	ArrayIndexing	imgIndxMapping [ imgIndx ]
>308	Identifier	imgIndx
>309	Identifier	imgIndxMapping
>310	Identifier	newIndx
>311	Identifier	newIndx
>312	IdentifierDeclType	const int
>313	IncDecOp	 
>314	IncDec	++
>315	Identifier	imgIndx
>316	Condition	 
>317	RelationalExpression	imgIndx < additionalNodes . numImages ( )
>318	CallExpression	additionalNodes . numImages ( )
>319	ArgumentList	 
>320	Callee	additionalNodes . numImages
>321	MemberAccess	additionalNodes . numImages
>322	Identifier	numImages
>323	Identifier	additionalNodes
>324	Identifier	imgIndx
>325	ForInit	 
>326	IdentifierDeclStatement	unsigned imgIndx = 0 ;
>327	IdentifierDecl	imgIndx = 0
>328	AssignmentExpr	imgIndx = 0
>329	PrimaryExpression	0
>330	Identifier	imgIndx
>331	Identifier	imgIndx
>332	IdentifierDeclType	unsigned
>333	ForStatement	for ( unsigned imgIndx = 0 ; imgIndx < additionalNodes . numImages ( ) ; imgIndx ++ )
>334	CompoundStatement	 
>335	ExpressionStatement	 
>336	AssignmentExpr	imgIndxMapping [ imgIndx ] = newIndx
>337	Identifier	newIndx
>338	ArrayIndexing	imgIndxMapping [ imgIndx ]
>339	Identifier	imgIndx
>340	Identifier	imgIndxMapping
>341	IfStatement	if ( newIndx < 0 )
>342	CompoundStatement	 
>343	IfStatement	if ( featureTransform != NULL )
>344	CompoundStatement	 
>345	ExpressionStatement	 
>346	CallExpression	graph [ newIndx ] . transformNodeFeatures ( * featureTransform )
>347	ArgumentList	* featureTransform
>348	Argument	* featureTransform
>349	UnaryOp	* featureTransform
>350	Identifier	featureTransform
>351	UnaryOperator	*
>352	Callee	graph [ newIndx ] . transformNodeFeatures
>353	MemberAccess	graph [ newIndx ] . transformNodeFeatures
>354	Identifier	transformNodeFeatures
>355	ArrayIndexing	graph [ newIndx ]
>356	Identifier	newIndx
>357	Identifier	graph
>358	Condition	 
>359	EqualityExpression	featureTransform != NULL
>360	Identifier	NULL
>361	Identifier	featureTransform
>362	ExpressionStatement	 
>363	CallExpression	graph [ newIndx ] . clearEdges ( )
>364	ArgumentList	 
>365	Callee	graph [ newIndx ] . clearEdges
>366	MemberAccess	graph [ newIndx ] . clearEdges
>367	Identifier	clearEdges
>368	ArrayIndexing	graph [ newIndx ]
>369	Identifier	newIndx
>370	Identifier	graph
>371	ExpressionStatement	 
>372	AssignmentExpr	newIndx = graph . appendImage ( additionalNodes [ imgIndx ] )
>373	CallExpression	graph . appendImage ( additionalNodes [ imgIndx ] )
>374	ArgumentList	additionalNodes [ imgIndx ]
>375	Argument	additionalNodes [ imgIndx ]
>376	ArrayIndexing	additionalNodes [ imgIndx ]
>377	Identifier	imgIndx
>378	Identifier	additionalNodes
>379	Callee	graph . appendImage
>380	MemberAccess	graph . appendImage
>381	Identifier	appendImage
>382	Identifier	graph
>383	Identifier	newIndx
>384	Condition	 
>385	RelationalExpression	newIndx < 0
>386	PrimaryExpression	0
>387	Identifier	newIndx
>388	IdentifierDeclStatement	 
>389	IdentifierDecl	newIndx = graph . findImage ( additionalNodes [ imgIndx ] . name ( ) )
>390	AssignmentExpr	newIndx = graph . findImage ( additionalNodes [ imgIndx ] . name ( ) )
>391	CallExpression	graph . findImage ( additionalNodes [ imgIndx ] . name ( ) )
>392	ArgumentList	additionalNodes [ imgIndx ] . name ( )
>393	Argument	additionalNodes [ imgIndx ] . name ( )
>394	CallExpression	additionalNodes [ imgIndx ] . name ( )
>395	ArgumentList	 
>396	Callee	additionalNodes [ imgIndx ] . name
>397	MemberAccess	additionalNodes [ imgIndx ] . name
>398	Identifier	name
>399	ArrayIndexing	additionalNodes [ imgIndx ]
>400	Identifier	imgIndx
>401	Identifier	additionalNodes
>402	Callee	graph . findImage
>403	MemberAccess	graph . findImage
>404	Identifier	findImage
>405	Identifier	graph
>406	Identifier	newIndx
>407	Identifier	newIndx
>408	IdentifierDeclType	int
>409	IncDecOp	 
>410	IncDec	++
>411	Identifier	imgIndx
>412	Condition	 
>413	RelationalExpression	imgIndx < additionalNodes . numImages ( )
>414	CallExpression	additionalNodes . numImages ( )
>415	ArgumentList	 
>416	Callee	additionalNodes . numImages
>417	MemberAccess	additionalNodes . numImages
>418	Identifier	numImages
>419	Identifier	additionalNodes
>420	Identifier	imgIndx
>421	ForInit	 
>422	IdentifierDeclStatement	unsigned imgIndx = 0 ;
>423	IdentifierDecl	imgIndx = 0
>424	AssignmentExpr	imgIndx = 0
>425	PrimaryExpression	0
>426	Identifier	imgIndx
>427	Identifier	imgIndx
>428	IdentifierDeclType	unsigned
>429	IdentifierDeclStatement	 
>430	IdentifierDecl	imgIndxMapping ( additionalNodes . numImages ( ) , - 1 )
>431	Expression	additionalNodes . numImages ( ) , - 1
>432	UnaryOp	- 1
>433	PrimaryExpression	1
>434	UnaryOperator	-
>435	CallExpression	additionalNodes . numImages ( )
>436	ArgumentList	 
>437	Callee	additionalNodes . numImages
>438	MemberAccess	additionalNodes . numImages
>439	Identifier	numImages
>440	Identifier	additionalNodes
>441	Identifier	imgIndxMapping
>442	IdentifierDeclType	vector < int >
>443	ExpressionStatement	 
>444	CallExpression	additionalNodes . read ( inGraphFile )
>445	ArgumentList	inGraphFile
>446	Argument	inGraphFile
>447	Identifier	inGraphFile
>448	Callee	additionalNodes . read
>449	MemberAccess	additionalNodes . read
>450	Identifier	read
>451	Identifier	additionalNodes
>452	ExpressionStatement	 
>453	CallExpression	DRWN_LOG_MESSAGE ( \"Appending drwnNNGraph from \" << inGraphFile << \"...\" )
>454	ArgumentList	\"Appending drwnNNGraph from \" << inGraphFile << \"...\"
>455	Argument	\"Appending drwnNNGraph from \" << inGraphFile << \"...\"
>456	ShiftExpression	\"Appending drwnNNGraph from \" << inGraphFile << \"...\"
>457	ShiftExpression	inGraphFile << \"...\"
>458	PrimaryExpression	\"...\"
>459	Identifier	inGraphFile
>460	PrimaryExpression	\"Appending drwnNNGraph from \"
>461	Callee	DRWN_LOG_MESSAGE
>462	Identifier	DRWN_LOG_MESSAGE
>463	IdentifierDeclStatement	 
>464	IdentifierDecl	additionalNodes
>465	Identifier	additionalNodes
>466	IdentifierDeclType	drwnNNGraph
>467	IdentifierDeclStatement	 
>468	IdentifierDecl	* inGraphFile = DRWN_CMDLINE_ARGV [ fileIndx ]
>469	AssignmentExpr	* inGraphFile = DRWN_CMDLINE_ARGV [ fileIndx ]
>470	ArrayIndexing	DRWN_CMDLINE_ARGV [ fileIndx ]
>471	Identifier	fileIndx
>472	Identifier	DRWN_CMDLINE_ARGV
>473	Identifier	inGraphFile
>474	Identifier	inGraphFile
>475	IdentifierDeclType	const char *
>476	IncDecOp	 
>477	IncDec	++
>478	Identifier	fileIndx
>479	Condition	 
>480	RelationalExpression	fileIndx < DRWN_CMDLINE_ARGC
>481	Identifier	DRWN_CMDLINE_ARGC
>482	Identifier	fileIndx
>483	ForInit	 
>484	IdentifierDeclStatement	int fileIndx = 1 ;
>485	IdentifierDecl	fileIndx = 1
>486	AssignmentExpr	fileIndx = 1
>487	PrimaryExpression	1
>488	Identifier	fileIndx
>489	Identifier	fileIndx
>490	IdentifierDeclType	int
>491	ExpressionStatement	 
>492	CallExpression	DRWN_LOG_VERBOSE ( \"...graph has \" << graph . numEdges ( ) << \" edges\" )
>493	ArgumentList	\"...graph has \" << graph . numEdges ( ) << \" edges\"
>494	Argument	\"...graph has \" << graph . numEdges ( ) << \" edges\"
>495	ShiftExpression	\"...graph has \" << graph . numEdges ( ) << \" edges\"
>496	ShiftExpression	graph . numEdges ( ) << \" edges\"
>497	PrimaryExpression	\" edges\"
>498	CallExpression	graph . numEdges ( )
>499	ArgumentList	 
>500	Callee	graph . numEdges
>501	MemberAccess	graph . numEdges
>502	Identifier	numEdges
>503	Identifier	graph
>504	PrimaryExpression	\"...graph has \"
>505	Callee	DRWN_LOG_VERBOSE
>506	Identifier	DRWN_LOG_VERBOSE
>507	ExpressionStatement	 
>508	CallExpression	DRWN_LOG_VERBOSE ( \"...graph has \" << graph . numNodes ( ) << \" nodes\" )
>509	ArgumentList	\"...graph has \" << graph . numNodes ( ) << \" nodes\"
>510	Argument	\"...graph has \" << graph . numNodes ( ) << \" nodes\"
>511	ShiftExpression	\"...graph has \" << graph . numNodes ( ) << \" nodes\"
>512	ShiftExpression	graph . numNodes ( ) << \" nodes\"
>513	PrimaryExpression	\" nodes\"
>514	CallExpression	graph . numNodes ( )
>515	ArgumentList	 
>516	Callee	graph . numNodes
>517	MemberAccess	graph . numNodes
>518	Identifier	numNodes
>519	Identifier	graph
>520	PrimaryExpression	\"...graph has \"
>521	Callee	DRWN_LOG_VERBOSE
>522	Identifier	DRWN_LOG_VERBOSE
>523	ExpressionStatement	 
>524	CallExpression	DRWN_LOG_MESSAGE ( \"...graph has \" << graph . numImages ( ) << \" images\" )
>525	ArgumentList	\"...graph has \" << graph . numImages ( ) << \" images\"
>526	Argument	\"...graph has \" << graph . numImages ( ) << \" images\"
>527	ShiftExpression	\"...graph has \" << graph . numImages ( ) << \" images\"
>528	ShiftExpression	graph . numImages ( ) << \" images\"
>529	PrimaryExpression	\" images\"
>530	CallExpression	graph . numImages ( )
>531	ArgumentList	 
>532	Callee	graph . numImages
>533	MemberAccess	graph . numImages
>534	Identifier	numImages
>535	Identifier	graph
>536	PrimaryExpression	\"...graph has \"
>537	Callee	DRWN_LOG_MESSAGE
>538	Identifier	DRWN_LOG_MESSAGE
>539	ExpressionStatement	 
>540	CallExpression	graph . read ( DRWN_CMDLINE_ARGV [ 0 ] )
>541	ArgumentList	DRWN_CMDLINE_ARGV [ 0 ]
>542	Argument	DRWN_CMDLINE_ARGV [ 0 ]
>543	ArrayIndexing	DRWN_CMDLINE_ARGV [ 0 ]
>544	PrimaryExpression	0
>545	Identifier	DRWN_CMDLINE_ARGV
>546	Callee	graph . read
>547	MemberAccess	graph . read
>548	Identifier	read
>549	Identifier	graph
>550	ExpressionStatement	 
>551	CallExpression	DRWN_LOG_MESSAGE ( \"Appending drwnNNGraph from \" << DRWN_CMDLINE_ARGV [ 0 ] << \"...\" )
>552	ArgumentList	\"Appending drwnNNGraph from \" << DRWN_CMDLINE_ARGV [ 0 ] << \"...\"
>553	Argument	\"Appending drwnNNGraph from \" << DRWN_CMDLINE_ARGV [ 0 ] << \"...\"
>554	ShiftExpression	\"Appending drwnNNGraph from \" << DRWN_CMDLINE_ARGV [ 0 ] << \"...\"
>555	ShiftExpression	DRWN_CMDLINE_ARGV [ 0 ] << \"...\"
>556	PrimaryExpression	\"...\"
>557	ArrayIndexing	DRWN_CMDLINE_ARGV [ 0 ]
>558	PrimaryExpression	0
>559	Identifier	DRWN_CMDLINE_ARGV
>560	PrimaryExpression	\"Appending drwnNNGraph from \"
>561	Callee	DRWN_LOG_MESSAGE
>562	Identifier	DRWN_LOG_MESSAGE
>563	IdentifierDeclStatement	 
>564	IdentifierDecl	graph
>565	Identifier	graph
>566	IdentifierDeclType	drwnNNGraph
>567	IfStatement	if ( xformFile != NULL )
>568	CompoundStatement	 
>569	ExpressionStatement	 
>570	CallExpression	DRWN_ASSERT_MSG ( featureTransform != NULL , xformFile )
>571	ArgumentList	featureTransform != NULL
>572	Argument	xformFile
>573	Identifier	xformFile
>574	Argument	featureTransform != NULL
>575	EqualityExpression	featureTransform != NULL
>576	Identifier	NULL
>577	Identifier	featureTransform
>578	Callee	DRWN_ASSERT_MSG
>579	Identifier	DRWN_ASSERT_MSG
>580	ExpressionStatement	 
>581	AssignmentExpr	featureTransform = drwnFeatureTransformFactory 
>582	CallExpression	drwnFeatureTransformFactory 
>583	ArgumentList	xformFile
>584	Argument	xformFile
>585	Identifier	xformFile
>586	Callee	drwnFeatureTransformFactory 
>587	MemberAccess	drwnFeatureTransformFactory 
>588	Identifier	createFromFile
>589	CallExpression	drwnFeatureTransformFactory 
>590	ArgumentList	 
>591	Callee	drwnFeatureTransformFactory 
>592	Identifier	drwnFeatureTransformFactory 
>593	Identifier	featureTransform
>594	Condition	 
>595	EqualityExpression	xformFile != NULL
>596	Identifier	NULL
>597	Identifier	xformFile
>598	IdentifierDeclStatement	 
>599	IdentifierDecl	* featureTransform = NULL
>600	AssignmentExpr	* featureTransform = NULL
>601	Identifier	NULL
>602	Identifier	NULL
>603	Identifier	featureTransform
>604	IdentifierDeclType	drwnFeatureTransform *
>605	IdentifierDeclStatement	 
>606	IdentifierDecl	hMain = drwnCodeProfiler 
>607	AssignmentExpr	hMain = drwnCodeProfiler 
>608	CallExpression	drwnCodeProfiler 
>609	ArgumentList	\"main\"
>610	Argument	\"main\"
>611	PrimaryExpression	\"main\"
>612	Callee	drwnCodeProfiler 
>613	Identifier	drwnCodeProfiler 
>614	Identifier	hMain
>615	Identifier	hMain
>616	IdentifierDeclType	const int
>617	IfStatement	if ( DRWN_CMDLINE_ARGC < 2 )
>618	CompoundStatement	 
>619	ReturnStatement	 
>620	UnaryOp	- 1
>621	PrimaryExpression	1
>622	UnaryOperator	-
>623	ExpressionStatement	 
>624	CallExpression	usage ( )
>625	ArgumentList	 
>626	Callee	usage
>627	Identifier	usage
>628	Condition	 
>629	RelationalExpression	DRWN_CMDLINE_ARGC < 2
>630	PrimaryExpression	2
>631	Identifier	DRWN_CMDLINE_ARGC
>632	ExpressionStatement	 
>633	CallExpression	DRWN_END_CMDLINE_PROCESSING ( usage ( ) )
>634	ArgumentList	usage ( )
>635	Argument	usage ( )
>636	CallExpression	usage ( )
>637	ArgumentList	 
>638	Callee	usage
>639	Identifier	usage
>640	Callee	DRWN_END_CMDLINE_PROCESSING
>641	Identifier	DRWN_END_CMDLINE_PROCESSING
>642	Statement	 
>643	Statement	 
>644	Statement	 
>645	Statement	 
>646	Statement	 
>647	Statement	 
>648	Statement	 
>649	Statement	 
>650	Statement	 
>651	Statement	 
>652	Statement	 
>653	Statement	 
>654	Statement	 
>655	Statement	 
>656	Statement	 
>657	Statement	 
>658	Statement	 
>659	Statement	 
>660	ExpressionStatement	 
>661	CallExpression	srand48 ( ( unsigned ) time ( NULL ) )
>662	ArgumentList	( unsigned ) time ( NULL )
>663	Argument	( unsigned ) time ( NULL )
>664	CastExpression	( unsigned ) time ( NULL )
>665	CallExpression	time ( NULL )
>666	ArgumentList	NULL
>667	Argument	NULL
>668	Identifier	NULL
>669	Callee	time
>670	Identifier	time
>671	CastTarget	unsigned
>672	Callee	srand48
>673	Identifier	srand48
>674	IdentifierDeclStatement	 
>675	IdentifierDecl	* xformFile = NULL
>676	AssignmentExpr	* xformFile = NULL
>677	Identifier	NULL
>678	Identifier	NULL
>679	Identifier	xformFile
>680	IdentifierDeclType	const char *
>681	IdentifierDeclStatement	 
>682	IdentifierDecl	* outGraphFile = NULL
>683	AssignmentExpr	* outGraphFile = NULL
>684	Identifier	NULL
>685	Identifier	NULL
>686	Identifier	outGraphFile
>687	IdentifierDeclType	const char *
<3=6,5,4
<6=23,19,7
<7=8
<8=18,9
<9=17,10
<10=16,11
<11=15,12
<12=14,13
<19=20
<20=22,21
<23=24
<24=28,25
<25=27,26
<32=41,40,33
<33=37,34
<34=36,35
<37=39,38
<41=681,674,660,659,658,657,656,655,654,653,652,651,650,649,648,647,646,645,644,643,642,632,617,605,598,567,563,550,539,523,507,491,90,64,58,56,49,44,42
<42=43
<44=45
<45=47,46
<47=48
<49=50
<50=54,51
<51=52
<52=53
<54=55
<56=57
<58=60,59
<60=61
<61=63,62
<64=86,65
<65=75,66
<66=67
<67=71,68
<68=69
<69=70
<71=72
<72=74,73
<75=76
<76=84,77
<77=78
<78=79
<79=83,80
<80=82,81
<84=85
<86=87
<87=89,88
<90=483,479,476,91
<91=467,463,452,443,429,333,140,124,108,92
<92=93
<93=106,94
<94=95
<95=96
<96=105,97
<97=99,98
<99=101,100
<101=102
<102=104,103
<106=107
<108=109
<109=122,110
<110=111
<111=112
<112=121,113
<113=115,114
<115=117,116
<117=118
<118=120,119
<122=123
<124=125
<125=138,126
<126=127
<127=128
<128=137,129
<129=131,130
<131=133,132
<133=134
<134=136,135
<138=139
<140=325,316,313,141
<141=304,281,142
<142=273,262,259,143
<143=239,226,144
<144=213,204,201,145
<145=194,180,146
<146=178,164,147
<147=148
<148=149
<149=150
<150=154,151
<151=152
<152=153
<154=155
<155=157,156
<157=159,158
<159=161,160
<161=163,162
<164=165
<165=166
<166=170,167
<167=168
<168=169
<170=171
<171=173,172
<173=175,174
<175=177,176
<178=179
<180=181
<181=189,182
<182=188,183
<183=185,184
<185=187,186
<189=191,190
<191=193,192
<194=195
<195=200,199,196
<196=198,197
<201=203,202
<204=205
<205=212,206
<206=208,207
<208=209
<209=211,210
<213=214
<214=215
<215=225,224,216
<216=223,217
<217=219,218
<219=220
<220=222,221
<226=227
<227=238,237,228
<228=236,229
<229=231,230
<231=233,232
<233=235,234
<239=240
<240=258,257,241
<241=256,242
<242=255,243
<243=245,244
<245=246
<246=248,247
<248=250,249
<250=252,251
<252=254,253
<259=261,260
<262=263
<263=272,264
<264=266,265
<266=267
<267=269,268
<269=271,270
<273=274
<274=275
<275=280,279,276
<276=278,277
<281=282
<282=302,283
<283=284
<284=285
<285=294,286
<286=288,287
<288=289
<289=291,290
<291=293,292
<294=296,295
<296=297
<297=299,298
<299=301,300
<302=303
<304=305
<305=312,311,306
<306=310,307
<307=309,308
<313=315,314
<316=317
<317=324,318
<318=320,319
<320=321
<321=323,322
<325=326
<326=327
<327=332,331,328
<328=330,329
<333=421,412,409,334
<334=388,341,335
<335=336
<336=338,337
<338=340,339
<341=384,342
<342=371,362,343
<343=358,344
<344=345
<345=346
<346=352,347
<347=348
<348=349
<349=351,350
<352=353
<353=355,354
<355=357,356
<358=359
<359=361,360
<362=363
<363=365,364
<365=366
<366=368,367
<368=370,369
<371=372
<372=383,373
<373=379,374
<374=375
<375=376
<376=378,377
<379=380
<380=382,381
<384=385
<385=387,386
<388=389
<389=408,407,390
<390=406,391
<391=402,392
<392=393
<393=394
<394=396,395
<396=397
<397=399,398
<399=401,400
<402=403
<403=405,404
<409=411,410
<412=413
<413=420,414
<414=416,415
<416=417
<417=419,418
<421=422
<422=423
<423=428,427,424
<424=426,425
<429=430
<430=442,441,431
<431=435,432
<432=434,433
<435=437,436
<437=438
<438=440,439
<443=444
<444=448,445
<445=446
<446=447
<448=449
<449=451,450
<452=453
<453=461,454
<454=455
<455=456
<456=460,457
<457=459,458
<461=462
<463=464
<464=466,465
<467=468
<468=475,474,469
<469=473,470
<470=472,471
<476=478,477
<479=480
<480=482,481
<483=484
<484=485
<485=490,489,486
<486=488,487
<491=492
<492=505,493
<493=494
<494=495
<495=504,496
<496=498,497
<498=500,499
<500=501
<501=503,502
<505=506
<507=508
<508=521,509
<509=510
<510=511
<511=520,512
<512=514,513
<514=516,515
<516=517
<517=519,518
<521=522
<523=524
<524=537,525
<525=526
<526=527
<527=536,528
<528=530,529
<530=532,531
<532=533
<533=535,534
<537=538
<539=540
<540=546,541
<541=542
<542=543
<543=545,544
<546=547
<547=549,548
<550=551
<551=561,552
<552=553
<553=554
<554=560,555
<555=557,556
<557=559,558
<561=562
<563=564
<564=566,565
<567=594,568
<568=580,569
<569=570
<570=578,571
<571=574,572
<572=573
<574=575
<575=577,576
<578=579
<580=581
<581=593,582
<582=586,583
<583=584
<584=585
<586=587
<587=589,588
<589=591,590
<591=592
<594=595
<595=597,596
<598=599
<599=604,603,600
<600=602,601
<605=606
<606=616,615,607
<607=614,608
<608=612,609
<609=610
<610=611
<612=613
<617=628,618
<618=623,619
<619=620
<620=622,621
<623=624
<624=626,625
<626=627
<628=629
<629=631,630
<632=633
<633=640,634
<634=635
<635=636
<636=638,637
<638=639
<640=641
<660=661
<661=672,662
<662=663
<663=664
<664=671,665
<665=669,666
<666=667
<667=668
<669=670
<672=673
<674=675
<675=680,679,676
<676=678,677
<681=682
<682=687,686,683
<683=685,684
