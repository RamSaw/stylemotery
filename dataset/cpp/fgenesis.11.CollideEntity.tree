>3	FunctionDef	CollideEntity 
>4	ParameterList	 
>5	CompoundStatement	 
>6	ExpressionStatement	 
>7	AssignmentExpr	this -> updateCull = 4000
>8	PrimaryExpression	4000
>9	PtrMemberAccess	this -> updateCull
>10	Identifier	updateCull
>11	Identifier	this
>12	ExpressionStatement	 
>13	AssignmentExpr	bounceAmount = 0.5f
>14	PrimaryExpression	0.5f
>15	Identifier	bounceAmount
>16	ExpressionStatement	 
>17	AssignmentExpr	weight = 0
>18	PrimaryExpression	0
>19	Identifier	weight
>20	ExpressionStatement	 
>21	AssignmentExpr	this -> canBeTargetedByAvatar = true
>22	Identifier	true
>23	PtrMemberAccess	this -> canBeTargetedByAvatar
>24	Identifier	canBeTargetedByAvatar
>25	Identifier	this
>26	ExpressionStatement	 
>27	CallExpression	addType ( SCO_COLLIDE_ENTITY )
>28	ArgumentList	SCO_COLLIDE_ENTITY
>29	Argument	SCO_COLLIDE_ENTITY
>30	Identifier	SCO_COLLIDE_ENTITY
>31	Callee	addType
>32	Identifier	addType
>44	FunctionDef	CollideEntity 
>45	ParameterList	Entity * e
>46	Parameter	 
>47	Identifier	e
>48	ParameterType	Entity *
>49	ReturnType	void
>50	CompoundStatement	 
>51	ExpressionStatement	 
>52	CallExpression	Entity 
>53	ArgumentList	e
>54	Argument	e
>55	Identifier	e
>56	Callee	Entity 
>57	Identifier	Entity 
>62	FunctionDef	CollideEntity 
>63	ParameterList	float dt
>64	Parameter	 
>65	Identifier	dt
>66	ParameterType	float
>67	ReturnType	void
>68	CompoundStatement	 
>69	ExpressionStatement	 
>70	CallExpression	updateMovement ( dt )
>71	ArgumentList	dt
>72	Argument	dt
>73	Identifier	dt
>74	Callee	updateMovement
>75	Identifier	updateMovement
>80	FunctionDef	CollideEntity 
>81	ParameterList	float ba
>82	Parameter	 
>83	Identifier	ba
>84	ParameterType	float
>85	ReturnType	void
>86	CompoundStatement	 
>87	ExpressionStatement	 
>88	CallExpression	onBounce ( )
>89	ArgumentList	 
>90	Callee	onBounce
>91	Identifier	onBounce
>92	SwitchStatement	switch ( bounceType )
>93	CompoundStatement	 
>94	BreakStatement	 
>95	CompoundStatement	 
>96	IfStatement	if ( ! vel . isZero ( ) )
>97	CompoundStatement	 
>98	ExpressionStatement	 
>99	AssignmentExpr	vel . z = 0
>100	PrimaryExpression	0
>101	MemberAccess	vel . z
>102	Identifier	z
>103	Identifier	vel
>104	ExpressionStatement	 
>105	AssignmentExpr	vel = mov
>106	Identifier	mov
>107	Identifier	vel
>108	IfStatement	if ( mov . x > mov . y )
>109	ElseStatement	else
>110	ExpressionStatement	 
>111	AssignmentExpr	mov . y = - mov . y
>112	UnaryOp	- mov . y
>113	MemberAccess	mov . y
>114	Identifier	y
>115	Identifier	mov
>116	UnaryOperator	-
>117	MemberAccess	mov . y
>118	Identifier	y
>119	Identifier	mov
>120	ExpressionStatement	 
>121	AssignmentExpr	mov . x = - mov . x
>122	UnaryOp	- mov . x
>123	MemberAccess	mov . x
>124	Identifier	x
>125	Identifier	mov
>126	UnaryOperator	-
>127	MemberAccess	mov . x
>128	Identifier	x
>129	Identifier	mov
>130	Condition	 
>131	RelationalExpression	mov . x > mov . y
>132	MemberAccess	mov . y
>133	Identifier	y
>134	Identifier	mov
>135	MemberAccess	mov . x
>136	Identifier	x
>137	Identifier	mov
>138	ExpressionStatement	 
>139	CallExpression	mov . setLength2D ( len * ba )
>140	ArgumentList	len * ba
>141	Argument	len * ba
>142	MultiplicativeExpression	len * ba
>143	Identifier	ba
>144	Identifier	len
>145	Callee	mov . setLength2D
>146	MemberAccess	mov . setLength2D
>147	Identifier	setLength2D
>148	Identifier	mov
>149	IdentifierDeclStatement	 
>150	IdentifierDecl	mov = vel
>151	AssignmentExpr	mov = vel
>152	Identifier	vel
>153	Identifier	vel
>154	Identifier	mov
>155	IdentifierDeclType	Vector
>156	IdentifierDeclStatement	 
>157	IdentifierDecl	len = vel . getLength2D ( )
>158	AssignmentExpr	len = vel . getLength2D ( )
>159	CallExpression	vel . getLength2D ( )
>160	ArgumentList	 
>161	Callee	vel . getLength2D
>162	MemberAccess	vel . getLength2D
>163	Identifier	getLength2D
>164	Identifier	vel
>165	Identifier	len
>166	Identifier	len
>167	IdentifierDeclType	float
>168	Condition	 
>169	UnaryOp	! vel . isZero ( )
>170	CallExpression	vel . isZero ( )
>171	ArgumentList	 
>172	Callee	vel . isZero
>173	MemberAccess	vel . isZero
>174	Identifier	isZero
>175	Identifier	vel
>176	UnaryOperator	!
>177	Label	 
>178	Identifier	BOUNCE_SIMPLE
>179	BreakStatement	 
>180	CompoundStatement	 
>181	IfStatement	if ( ! vel . isZero ( ) )
>182	CompoundStatement	 
>183	IfStatement	if ( ! N . isZero ( ) )
>184	CompoundStatement	 
>185	ExpressionStatement	 
>186	CallExpression	vel . setLength2D ( len * ba )
>187	ArgumentList	len * ba
>188	Argument	len * ba
>189	MultiplicativeExpression	len * ba
>190	Identifier	ba
>191	Identifier	len
>192	Callee	vel . setLength2D
>193	MemberAccess	vel . setLength2D
>194	Identifier	setLength2D
>195	Identifier	vel
>196	ExpressionStatement	 
>197	AssignmentExpr	vel = 2 * ( - I . dot ( N ) ) * N + I
>198	AdditiveExpression	2 * ( - I . dot ( N ) ) * N + I
>199	Identifier	I
>200	MultiplicativeExpression	2 * ( - I . dot ( N ) ) * N
>201	MultiplicativeExpression	( - I . dot ( N ) ) * N
>202	Identifier	N
>203	UnaryOp	- I . dot ( N )
>204	CallExpression	I . dot ( N )
>205	ArgumentList	N
>206	Argument	N
>207	Identifier	N
>208	Callee	I . dot
>209	MemberAccess	I . dot
>210	Identifier	dot
>211	Identifier	I
>212	UnaryOperator	-
>213	PrimaryExpression	2
>214	Identifier	vel
>215	Condition	 
>216	UnaryOp	! N . isZero ( )
>217	CallExpression	N . isZero ( )
>218	ArgumentList	 
>219	Callee	N . isZero
>220	MemberAccess	N . isZero
>221	Identifier	isZero
>222	Identifier	N
>223	UnaryOperator	!
>224	IdentifierDeclStatement	 
>225	IdentifierDecl	N = dsq -> game -> getWallNormal ( dsq -> game -> lastCollidePosition )
>226	AssignmentExpr	N = dsq -> game -> getWallNormal ( dsq -> game -> lastCollidePosition )
>227	CallExpression	dsq -> game -> getWallNormal ( dsq -> game -> lastCollidePosition )
>228	ArgumentList	dsq -> game -> lastCollidePosition
>229	Argument	dsq -> game -> lastCollidePosition
>230	PtrMemberAccess	dsq -> game -> lastCollidePosition
>231	Identifier	lastCollidePosition
>232	PtrMemberAccess	dsq -> game
>233	Identifier	game
>234	Identifier	dsq
>235	Callee	dsq -> game -> getWallNormal
>236	PtrMemberAccess	dsq -> game -> getWallNormal
>237	Identifier	getWallNormal
>238	PtrMemberAccess	dsq -> game
>239	Identifier	game
>240	Identifier	dsq
>241	Identifier	N
>242	Identifier	N
>243	IdentifierDeclType	Vector
>244	IdentifierDeclStatement	 
>245	IdentifierDecl	I = vel / len
>246	AssignmentExpr	I = vel / len
>247	MultiplicativeExpression	vel / len
>248	Identifier	len
>249	Identifier	vel
>250	Identifier	I
>251	Identifier	I
>252	IdentifierDeclType	Vector
>253	IdentifierDeclStatement	 
>254	IdentifierDecl	len = vel . getLength2D ( )
>255	AssignmentExpr	len = vel . getLength2D ( )
>256	CallExpression	vel . getLength2D ( )
>257	ArgumentList	 
>258	Callee	vel . getLength2D
>259	MemberAccess	vel . getLength2D
>260	Identifier	getLength2D
>261	Identifier	vel
>262	Identifier	len
>263	Identifier	len
>264	IdentifierDeclType	float
>265	Condition	 
>266	UnaryOp	! vel . isZero ( )
>267	CallExpression	vel . isZero ( )
>268	ArgumentList	 
>269	Callee	vel . isZero
>270	MemberAccess	vel . isZero
>271	Identifier	isZero
>272	Identifier	vel
>273	UnaryOperator	!
>274	Label	 
>275	Identifier	BOUNCE_REAL
>276	Condition	 
>277	Identifier	bounceType
>278	IfStatement	if ( getState ( ) == STATE_PUSH )
>279	CompoundStatement	 
>280	ExpressionStatement	 
>281	CallExpression	setState ( STATE_PUSHDELAY , 0.3 )
>282	ArgumentList	STATE_PUSHDELAY
>283	Argument	0.3
>284	PrimaryExpression	0.3
>285	Argument	STATE_PUSHDELAY
>286	Identifier	STATE_PUSHDELAY
>287	Callee	setState
>288	Identifier	setState
>289	ExpressionStatement	 
>290	CallExpression	sound ( \"RockHit\" )
>291	ArgumentList	\"RockHit\"
>292	Argument	\"RockHit\"
>293	PrimaryExpression	\"RockHit\"
>294	Callee	sound
>295	Identifier	sound
>296	ExpressionStatement	 
>297	CallExpression	dsq -> spawnParticleEffect ( \"HitSurface\" , dsq -> game -> lastCollidePosition )
>298	ArgumentList	\"HitSurface\"
>299	Argument	dsq -> game -> lastCollidePosition
>300	PtrMemberAccess	dsq -> game -> lastCollidePosition
>301	Identifier	lastCollidePosition
>302	PtrMemberAccess	dsq -> game
>303	Identifier	game
>304	Identifier	dsq
>305	Argument	\"HitSurface\"
>306	PrimaryExpression	\"HitSurface\"
>307	Callee	dsq -> spawnParticleEffect
>308	PtrMemberAccess	dsq -> spawnParticleEffect
>309	Identifier	spawnParticleEffect
>310	Identifier	dsq
>311	Condition	 
>312	EqualityExpression	getState ( ) == STATE_PUSH
>313	Identifier	STATE_PUSH
>314	CallExpression	getState ( )
>315	ArgumentList	 
>316	Callee	getState
>317	Identifier	getState
>345	FunctionDef	CollideEntity 
>346	ParameterList	float dt
>347	Parameter	 
>348	Identifier	dt
>349	ParameterType	float
>350	ReturnType	void
>351	CompoundStatement	 
>352	ExpressionStatement	 
>353	AssignmentExpr	wasUnderWater = underWater
>354	Identifier	underWater
>355	Identifier	wasUnderWater
>356	ForStatement	for ( int i = 0 ; i < attachedEntities . size ( ) ; i ++ )
>357	CompoundStatement	 
>358	ExpressionStatement	 
>359	AssignmentExpr	attachedEntities [ i ] -> rotation = this -> rotation
>360	PtrMemberAccess	this -> rotation
>361	Identifier	rotation
>362	Identifier	this
>363	PtrMemberAccess	attachedEntities [ i ] -> rotation
>364	Identifier	rotation
>365	ArrayIndexing	attachedEntities [ i ]
>366	Identifier	i
>367	Identifier	attachedEntities
>368	ExpressionStatement	 
>369	AssignmentExpr	attachedEntities [ i ] -> position = this -> position + attachedEntitiesOffsets [ i ]
>370	AdditiveExpression	this -> position + attachedEntitiesOffsets [ i ]
>371	ArrayIndexing	attachedEntitiesOffsets [ i ]
>372	Identifier	i
>373	Identifier	attachedEntitiesOffsets
>374	PtrMemberAccess	this -> position
>375	Identifier	position
>376	Identifier	this
>377	PtrMemberAccess	attachedEntities [ i ] -> position
>378	Identifier	position
>379	ArrayIndexing	attachedEntities [ i ]
>380	Identifier	i
>381	Identifier	attachedEntities
>382	IncDecOp	 
>383	IncDec	++
>384	Identifier	i
>385	Condition	 
>386	RelationalExpression	i < attachedEntities . size ( )
>387	CallExpression	attachedEntities . size ( )
>388	ArgumentList	 
>389	Callee	attachedEntities . size
>390	MemberAccess	attachedEntities . size
>391	Identifier	size
>392	Identifier	attachedEntities
>393	Identifier	i
>394	ForInit	 
>395	IdentifierDeclStatement	int i = 0 ;
>396	IdentifierDecl	i = 0
>397	AssignmentExpr	i = 0
>398	PrimaryExpression	0
>399	Identifier	i
>400	Identifier	i
>401	IdentifierDeclType	int
>402	IfStatement	if ( ! collided && weight != 0 )
>403	CompoundStatement	 
>404	ExpressionStatement	 
>405	AssignmentExpr	vel += Vector ( 0 , weight * dt )
>406	CallExpression	Vector ( 0 , weight * dt )
>407	ArgumentList	0
>408	Argument	weight * dt
>409	MultiplicativeExpression	weight * dt
>410	Identifier	dt
>411	Identifier	weight
>412	Argument	0
>413	PrimaryExpression	0
>414	Callee	Vector
>415	Identifier	Vector
>416	Identifier	vel
>417	Condition	 
>418	AndExpression	! collided && weight != 0
>419	EqualityExpression	weight != 0
>420	PrimaryExpression	0
>421	Identifier	weight
>422	UnaryOp	! collided
>423	Identifier	collided
>424	UnaryOperator	!
>425	IfStatement	if ( vel . x != 0 || vel . y != 0 )
>426	CompoundStatement	 
>427	IfStatement	if ( isv ( EV_COLLIDELEVEL , 1 ) )
>428	CompoundStatement	 
>429	IfStatement	if ( getState ( ) == STATE_PUSH )
>430	ElseStatement	else
>431	CompoundStatement	 
>432	IfStatement	if ( ! freeRange && ( ( ! canLeaveWater && ! isUnderWater ( ) && wasUnderWater ) || dsq -> game -> collideCircleWithGrid ( \
>433	CompoundStatement	 
>434	ExpressionStatement	 
>435	AssignmentExpr	collided = true
>436	Identifier	true
>437	Identifier	collided
>438	ExpressionStatement	 
>439	CallExpression	bounce ( bounceAmount )
>440	ArgumentList	bounceAmount
>441	Argument	bounceAmount
>442	Identifier	bounceAmount
>443	Callee	bounce
>444	Identifier	bounce
>445	ExpressionStatement	 
>446	CallExpression	onHitWall ( )
>447	ArgumentList	 
>448	Callee	onHitWall
>449	Identifier	onHitWall
>450	ExpressionStatement	 
>451	AssignmentExpr	position = lastPosition
>452	Identifier	lastPosition
>453	Identifier	position
>454	Condition	 
>455	AndExpression	! freeRange && ( ( ! canLeaveWater && ! isUnderWater ( ) && wasUnderWater ) || dsq -> game -> collideCircleWithGrid ( \
>456	OrExpression	( ! canLeaveWater && ! isUnderWater ( ) && wasUnderWater ) || dsq -> game -> collideCircleWithGrid ( \
>457	CallExpression	dsq -> game -> collideCircleWithGrid ( position , hw )
>458	ArgumentList	position
>459	Argument	hw
>460	Identifier	hw
>461	Argument	position
>462	Identifier	position
>463	Callee	dsq -> game -> collideCircleWithGrid
>464	PtrMemberAccess	dsq -> game -> collideCircleWithGrid
>465	Identifier	collideCircleWithGrid
>466	PtrMemberAccess	dsq -> game
>467	Identifier	game
>468	Identifier	dsq
>469	AndExpression	! canLeaveWater && ! isUnderWater ( ) && wasUnderWater
>470	AndExpression	! isUnderWater ( ) && wasUnderWater
>471	Identifier	wasUnderWater
>472	UnaryOp	! isUnderWater ( )
>473	CallExpression	isUnderWater ( )
>474	ArgumentList	 
>475	Callee	isUnderWater
>476	Identifier	isUnderWater
>477	UnaryOperator	!
>478	UnaryOp	! canLeaveWater
>479	Identifier	canLeaveWater
>480	UnaryOperator	!
>481	UnaryOp	! freeRange
>482	Identifier	freeRange
>483	UnaryOperator	!
>484	CompoundStatement	 
>485	IfStatement	if ( ! freeRange && dsq -> game -> collideCircleWithGrid ( position , hw ) )
>486	CompoundStatement	 
>487	ExpressionStatement	 
>488	CallExpression	bounce ( bounceAmount )
>489	ArgumentList	bounceAmount
>490	Argument	bounceAmount
>491	Identifier	bounceAmount
>492	Callee	bounce
>493	Identifier	bounce
>494	ExpressionStatement	 
>495	AssignmentExpr	collided = true
>496	Identifier	true
>497	Identifier	collided
>498	ExpressionStatement	 
>499	AssignmentExpr	position = lastPosition
>500	Identifier	lastPosition
>501	Identifier	position
>502	Condition	 
>503	AndExpression	! freeRange && dsq -> game -> collideCircleWithGrid ( position , hw )
>504	CallExpression	dsq -> game -> collideCircleWithGrid ( position , hw )
>505	ArgumentList	position
>506	Argument	hw
>507	Identifier	hw
>508	Argument	position
>509	Identifier	position
>510	Callee	dsq -> game -> collideCircleWithGrid
>511	PtrMemberAccess	dsq -> game -> collideCircleWithGrid
>512	Identifier	collideCircleWithGrid
>513	PtrMemberAccess	dsq -> game
>514	Identifier	game
>515	Identifier	dsq
>516	UnaryOp	! freeRange
>517	Identifier	freeRange
>518	UnaryOperator	!
>519	Condition	 
>520	EqualityExpression	getState ( ) == STATE_PUSH
>521	Identifier	STATE_PUSH
>522	CallExpression	getState ( )
>523	ArgumentList	 
>524	Callee	getState
>525	Identifier	getState
>526	Condition	 
>527	CallExpression	isv ( EV_COLLIDELEVEL , 1 )
>528	ArgumentList	EV_COLLIDELEVEL
>529	Argument	1
>530	PrimaryExpression	1
>531	Argument	EV_COLLIDELEVEL
>532	Identifier	EV_COLLIDELEVEL
>533	Callee	isv
>534	Identifier	isv
>535	ExpressionStatement	 
>536	AssignmentExpr	position = newPosition
>537	Identifier	newPosition
>538	Identifier	position
>539	IdentifierDeclStatement	 
>540	IdentifierDecl	newPosition = position + ( getMoveVel ( ) * dt )
>541	AssignmentExpr	newPosition = position + ( getMoveVel ( ) * dt )
>542	AdditiveExpression	position + ( getMoveVel ( ) * dt )
>543	MultiplicativeExpression	getMoveVel ( ) * dt
>544	Identifier	dt
>545	CallExpression	getMoveVel ( )
>546	ArgumentList	 
>547	Callee	getMoveVel
>548	Identifier	getMoveVel
>549	Identifier	position
>550	Identifier	newPosition
>551	Identifier	newPosition
>552	IdentifierDeclType	Vector
>553	IfStatement	if ( isv ( EV_COLLIDELEVEL , 1 ) )
>554	CompoundStatement	 
>555	IfStatement	if ( doesFreeRange )
>556	CompoundStatement	 
>557	IfStatement	if ( dsq -> game -> collideCircleWithGrid ( position , hw ) )
>558	CompoundStatement	 
>559	ExpressionStatement	 
>560	AssignmentExpr	freeRange = true
>561	Identifier	true
>562	Identifier	freeRange
>563	Condition	 
>564	CallExpression	dsq -> game -> collideCircleWithGrid ( position , hw )
>565	ArgumentList	position
>566	Argument	hw
>567	Identifier	hw
>568	Argument	position
>569	Identifier	position
>570	Callee	dsq -> game -> collideCircleWithGrid
>571	PtrMemberAccess	dsq -> game -> collideCircleWithGrid
>572	Identifier	collideCircleWithGrid
>573	PtrMemberAccess	dsq -> game
>574	Identifier	game
>575	Identifier	dsq
>576	Condition	 
>577	Identifier	doesFreeRange
>578	IdentifierDeclStatement	 
>579	IdentifierDecl	doesFreeRange = ! isPullable ( )
>580	AssignmentExpr	doesFreeRange = ! isPullable ( )
>581	UnaryOp	! isPullable ( )
>582	CallExpression	isPullable ( )
>583	ArgumentList	 
>584	Callee	isPullable
>585	Identifier	isPullable
>586	UnaryOperator	!
>587	Identifier	doesFreeRange
>588	Identifier	doesFreeRange
>589	IdentifierDeclType	bool
>590	Condition	 
>591	CallExpression	isv ( EV_COLLIDELEVEL , 1 )
>592	ArgumentList	EV_COLLIDELEVEL
>593	Argument	1
>594	PrimaryExpression	1
>595	Argument	EV_COLLIDELEVEL
>596	Identifier	EV_COLLIDELEVEL
>597	Callee	isv
>598	Identifier	isv
>599	IdentifierDeclStatement	 
>600	IdentifierDecl	freeRange = false
>601	AssignmentExpr	freeRange = false
>602	Identifier	false
>603	Identifier	false
>604	Identifier	freeRange
>605	IdentifierDeclType	bool
>606	IdentifierDeclStatement	 
>607	IdentifierDecl	hw = collideRadius
>608	AssignmentExpr	hw = collideRadius
>609	Identifier	collideRadius
>610	Identifier	collideRadius
>611	Identifier	hw
>612	IdentifierDeclType	const float
>613	Condition	 
>614	OrExpression	vel . x != 0 || vel . y != 0
>615	EqualityExpression	vel . y != 0
>616	PrimaryExpression	0
>617	MemberAccess	vel . y
>618	Identifier	y
>619	Identifier	vel
>620	EqualityExpression	vel . x != 0
>621	PrimaryExpression	0
>622	MemberAccess	vel . x
>623	Identifier	x
>624	Identifier	vel
>625	IdentifierDeclStatement	 
>626	IdentifierDecl	collided = false
>627	AssignmentExpr	collided = false
>628	Identifier	false
>629	Identifier	false
>630	Identifier	collided
>631	IdentifierDeclType	bool
>632	IfStatement	if ( ! canLeaveWater )
>633	CompoundStatement	 
>634	IfStatement	if ( ! underWater && wasUnderWater )
>635	CompoundStatement	 
>636	IfStatement	if ( waterBubble )
>637	ElseStatement	else
>638	CompoundStatement	 
>639	ExpressionStatement	 
>640	AssignmentExpr	position . y = dsq -> game -> getWaterLevel ( ) + collideRadius
>641	AdditiveExpression	dsq -> game -> getWaterLevel ( ) + collideRadius
>642	Identifier	collideRadius
>643	CallExpression	dsq -> game -> getWaterLevel ( )
>644	ArgumentList	 
>645	Callee	dsq -> game -> getWaterLevel
>646	PtrMemberAccess	dsq -> game -> getWaterLevel
>647	Identifier	getWaterLevel
>648	PtrMemberAccess	dsq -> game
>649	Identifier	game
>650	Identifier	dsq
>651	MemberAccess	position . y
>652	Identifier	y
>653	Identifier	position
>654	CompoundStatement	 
>655	ExpressionStatement	 
>656	CallExpression	waterBubble -> clampPosition ( & position , collideRadius )
>657	ArgumentList	& position
>658	Argument	collideRadius
>659	Identifier	collideRadius
>660	Argument	& position
>661	UnaryOp	& position
>662	Identifier	position
>663	UnaryOperator	&
>664	Callee	waterBubble -> clampPosition
>665	PtrMemberAccess	waterBubble -> clampPosition
>666	Identifier	clampPosition
>667	Identifier	waterBubble
>668	Condition	 
>669	Identifier	waterBubble
>670	Condition	 
>671	AndExpression	! underWater && wasUnderWater
>672	Identifier	wasUnderWater
>673	UnaryOp	! underWater
>674	Identifier	underWater
>675	UnaryOperator	!
>676	Condition	 
>677	UnaryOp	! canLeaveWater
>678	Identifier	canLeaveWater
>679	UnaryOperator	!
>680	IdentifierDeclStatement	 
>681	IdentifierDecl	underWater = isUnderWater ( )
>682	AssignmentExpr	underWater = isUnderWater ( )
>683	CallExpression	isUnderWater ( )
>684	ArgumentList	 
>685	Callee	isUnderWater
>686	Identifier	isUnderWater
>687	Identifier	underWater
>688	Identifier	underWater
>689	IdentifierDeclType	bool
>690	IdentifierDeclStatement	 
>691	IdentifierDecl	lastPosition = position
>692	AssignmentExpr	lastPosition = position
>693	Identifier	position
>694	Identifier	position
>695	Identifier	lastPosition
>696	IdentifierDeclType	Vector
>697	ExpressionStatement	 
>698	CallExpression	updateVel2 ( dt )
>699	ArgumentList	dt
>700	Argument	dt
>701	Identifier	dt
>702	Callee	updateVel2
>703	Identifier	updateVel2
>704	ExpressionStatement	 
>705	CallExpression	vel . capLength2D ( getMaxSpeed ( ) * maxSpeedLerp . x )
>706	ArgumentList	getMaxSpeed ( ) * maxSpeedLerp . x
>707	Argument	getMaxSpeed ( ) * maxSpeedLerp . x
>708	MultiplicativeExpression	getMaxSpeed ( ) * maxSpeedLerp . x
>709	MemberAccess	maxSpeedLerp . x
>710	Identifier	x
>711	Identifier	maxSpeedLerp
>712	CallExpression	getMaxSpeed ( )
>713	ArgumentList	 
>714	Callee	getMaxSpeed
>715	Identifier	getMaxSpeed
>716	Callee	vel . capLength2D
>717	MemberAccess	vel . capLength2D
>718	Identifier	capLength2D
>719	Identifier	vel
>720	IfStatement	if ( position . isFollowingPath ( ) )
>721	ReturnStatement	 
>722	Condition	 
>723	CallExpression	position . isFollowingPath ( )
>724	ArgumentList	 
>725	Callee	position . isFollowingPath
>726	MemberAccess	position . isFollowingPath
>727	Identifier	isFollowingPath
>728	Identifier	position
>729	IfStatement	if ( isEntityDead ( ) )
>730	ReturnStatement	 
>731	Condition	 
>732	CallExpression	isEntityDead ( )
>733	ArgumentList	 
>734	Callee	isEntityDead
>735	Identifier	isEntityDead
<3=5,4
<5=26,20,16,12,6
<6=7
<7=9,8
<9=11,10
<12=13
<13=15,14
<16=17
<17=19,18
<20=21
<21=23,22
<23=25,24
<26=27
<27=31,28
<28=29
<29=30
<31=32
<44=50,49,45
<45=46
<46=48,47
<50=51
<51=52
<52=56,53
<53=54
<54=55
<56=57
<62=68,67,63
<63=64
<64=66,65
<68=69
<69=70
<70=74,71
<71=72
<72=73
<74=75
<80=86,85,81
<81=82
<82=84,83
<86=278,92,87
<87=88
<88=90,89
<90=91
<92=276,93
<93=274,180,179,177,95,94
<95=96
<96=168,97
<97=156,149,138,108,104,98
<98=99
<99=101,100
<101=103,102
<104=105
<105=107,106
<108=130,120,109
<109=110
<110=111
<111=117,112
<112=116,113
<113=115,114
<117=119,118
<120=121
<121=127,122
<122=126,123
<123=125,124
<127=129,128
<130=131
<131=135,132
<132=134,133
<135=137,136
<138=139
<139=145,140
<140=141
<141=142
<142=144,143
<145=146
<146=148,147
<149=150
<150=155,154,151
<151=153,152
<156=157
<157=167,166,158
<158=165,159
<159=161,160
<161=162
<162=164,163
<168=169
<169=176,170
<170=172,171
<172=173
<173=175,174
<177=178
<180=181
<181=265,182
<182=253,244,224,183
<183=215,184
<184=196,185
<185=186
<186=192,187
<187=188
<188=189
<189=191,190
<192=193
<193=195,194
<196=197
<197=214,198
<198=200,199
<200=213,201
<201=203,202
<203=212,204
<204=208,205
<205=206
<206=207
<208=209
<209=211,210
<215=216
<216=223,217
<217=219,218
<219=220
<220=222,221
<224=225
<225=243,242,226
<226=241,227
<227=235,228
<228=229
<229=230
<230=232,231
<232=234,233
<235=236
<236=238,237
<238=240,239
<244=245
<245=252,251,246
<246=250,247
<247=249,248
<253=254
<254=264,263,255
<255=262,256
<256=258,257
<258=259
<259=261,260
<265=266
<266=273,267
<267=269,268
<269=270
<270=272,271
<274=275
<276=277
<278=311,279
<279=296,289,280
<280=281
<281=287,282
<282=285,283
<283=284
<285=286
<287=288
<289=290
<290=294,291
<291=292
<292=293
<294=295
<296=297
<297=307,298
<298=305,299
<299=300
<300=302,301
<302=304,303
<305=306
<307=308
<308=310,309
<311=312
<312=314,313
<314=316,315
<316=317
<345=351,350,346
<346=347
<347=349,348
<351=729,720,704,697,690,680,632,625,425,402,356,352
<352=353
<353=355,354
<356=394,385,382,357
<357=368,358
<358=359
<359=363,360
<360=362,361
<363=365,364
<365=367,366
<368=369
<369=377,370
<370=374,371
<371=373,372
<374=376,375
<377=379,378
<379=381,380
<382=384,383
<385=386
<386=393,387
<387=389,388
<389=390
<390=392,391
<394=395
<395=396
<396=401,400,397
<397=399,398
<402=417,403
<403=404
<404=405
<405=416,406
<406=414,407
<407=412,408
<408=409
<409=411,410
<412=413
<414=415
<417=418
<418=422,419
<419=421,420
<422=424,423
<425=613,426
<426=606,599,553,539,535,427
<427=526,428
<428=429
<429=519,484,430
<430=431
<431=432
<432=454,433
<433=450,445,438,434
<434=435
<435=437,436
<438=439
<439=443,440
<440=441
<441=442
<443=444
<445=446
<446=448,447
<448=449
<450=451
<451=453,452
<454=455
<455=481,456
<456=469,457
<457=463,458
<458=461,459
<459=460
<461=462
<463=464
<464=466,465
<466=468,467
<469=478,470
<470=472,471
<472=477,473
<473=475,474
<475=476
<478=480,479
<481=483,482
<484=485
<485=502,486
<486=498,494,487
<487=488
<488=492,489
<489=490
<490=491
<492=493
<494=495
<495=497,496
<498=499
<499=501,500
<502=503
<503=516,504
<504=510,505
<505=508,506
<506=507
<508=509
<510=511
<511=513,512
<513=515,514
<516=518,517
<519=520
<520=522,521
<522=524,523
<524=525
<526=527
<527=533,528
<528=531,529
<529=530
<531=532
<533=534
<535=536
<536=538,537
<539=540
<540=552,551,541
<541=550,542
<542=549,543
<543=545,544
<545=547,546
<547=548
<553=590,554
<554=578,555
<555=576,556
<556=557
<557=563,558
<558=559
<559=560
<560=562,561
<563=564
<564=570,565
<565=568,566
<566=567
<568=569
<570=571
<571=573,572
<573=575,574
<576=577
<578=579
<579=589,588,580
<580=587,581
<581=586,582
<582=584,583
<584=585
<590=591
<591=597,592
<592=595,593
<593=594
<595=596
<597=598
<599=600
<600=605,604,601
<601=603,602
<606=607
<607=612,611,608
<608=610,609
<613=614
<614=620,615
<615=617,616
<617=619,618
<620=622,621
<622=624,623
<625=626
<626=631,630,627
<627=629,628
<632=676,633
<633=634
<634=670,635
<635=636
<636=668,654,637
<637=638
<638=639
<639=640
<640=651,641
<641=643,642
<643=645,644
<645=646
<646=648,647
<648=650,649
<651=653,652
<654=655
<655=656
<656=664,657
<657=660,658
<658=659
<660=661
<661=663,662
<664=665
<665=667,666
<668=669
<670=671
<671=673,672
<673=675,674
<676=677
<677=679,678
<680=681
<681=689,688,682
<682=687,683
<683=685,684
<685=686
<690=691
<691=696,695,692
<692=694,693
<697=698
<698=702,699
<699=700
<700=701
<702=703
<704=705
<705=716,706
<706=707
<707=708
<708=712,709
<709=711,710
<712=714,713
<714=715
<716=717
<717=719,718
<720=722,721
<722=723
<723=725,724
<725=726
<726=728,727
<729=731,730
<731=732
<732=734,733
<734=735
