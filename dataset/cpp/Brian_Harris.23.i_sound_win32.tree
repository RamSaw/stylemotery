>87	FunctionDef	getsfx (char * sfxname , int * len)
>88	ParameterList	char * sfxname , int * len
>89	Parameter	 
>90	Identifier	len
>91	ParameterType	int *
>92	Parameter	 
>93	Identifier	sfxname
>94	ParameterType	char *
>95	ReturnType	void *
>96	CompoundStatement	 
>97	ReturnStatement	 
>98	CastExpression	( void * ) ( sfxmem )
>99	Identifier	sfxmem
>100	CastTarget	void *
>101	ExpressionStatement	 
>102	AssignmentExpr	* len = size
>103	Identifier	size
>104	UnaryOp	* len
>105	Identifier	len
>106	UnaryOperator	*
>107	ExpressionStatement	 
>108	CallExpression	Z_Free ( sfx )
>109	ArgumentList	sfx
>110	Argument	sfx
>111	Identifier	sfx
>112	Callee	Z_Free
>113	Identifier	Z_Free
>114	ForStatement	for ( int i = 0 ; i < size ; i ++ )
>115	CompoundStatement	 
>116	ExpressionStatement	 
>117	AssignmentExpr	sfxmem [ i ] = sfxSampleStart [ i ]
>118	ArrayIndexing	sfxSampleStart [ i ]
>119	Identifier	i
>120	Identifier	sfxSampleStart
>121	ArrayIndexing	sfxmem [ i ]
>122	Identifier	i
>123	Identifier	sfxmem
>124	IncDecOp	 
>125	IncDec	++
>126	Identifier	i
>127	Condition	 
>128	RelationalExpression	i < size
>129	Identifier	size
>130	Identifier	i
>131	ForInit	 
>132	IdentifierDeclStatement	int i = 0 ;
>133	IdentifierDecl	i = 0
>134	AssignmentExpr	i = 0
>135	PrimaryExpression	0
>136	Identifier	i
>137	Identifier	i
>138	IdentifierDeclType	int
>139	ExpressionStatement	 
>140	AssignmentExpr	sfxmem = ( unsigned char * ) malloc ( size * sizeof ( unsigned char ) )
>141	CastExpression	( unsigned char * ) malloc ( size * sizeof ( unsigned char ) )
>142	CallExpression	malloc ( size * sizeof ( unsigned char ) )
>143	ArgumentList	size * sizeof ( unsigned char )
>144	Argument	size * sizeof ( unsigned char )
>145	MultiplicativeExpression	size * sizeof ( unsigned char )
>146	SizeofExpr	sizeof ( unsigned char )
>147	SizeofOperand	unsigned char
>148	Sizeof	sizeof
>149	Identifier	size
>150	Callee	malloc
>151	Identifier	malloc
>152	CastTarget	unsigned char *
>153	Identifier	sfxmem
>154	IdentifierDeclStatement	 
>155	IdentifierDecl	* sfxSampleStart = sfx + SOUND_LUMP_HEADER_SIZE_IN_BYTES
>156	AssignmentExpr	* sfxSampleStart = sfx + SOUND_LUMP_HEADER_SIZE_IN_BYTES
>157	AdditiveExpression	sfx + SOUND_LUMP_HEADER_SIZE_IN_BYTES
>158	Identifier	SOUND_LUMP_HEADER_SIZE_IN_BYTES
>159	Identifier	sfx
>160	Identifier	sfxSampleStart
>161	Identifier	sfxSampleStart
>162	IdentifierDeclType	const unsigned char *
>163	ExpressionStatement	 
>164	AssignmentExpr	sfx = ( unsigned char * ) W_CacheLumpNum ( sfxlump , PU_CACHE_SHARED )
>165	CastExpression	( unsigned char * ) W_CacheLumpNum ( sfxlump , PU_CACHE_SHARED )
>166	CallExpression	W_CacheLumpNum ( sfxlump , PU_CACHE_SHARED )
>167	ArgumentList	sfxlump
>168	Argument	PU_CACHE_SHARED
>169	Identifier	PU_CACHE_SHARED
>170	Argument	sfxlump
>171	Identifier	sfxlump
>172	Callee	W_CacheLumpNum
>173	Identifier	W_CacheLumpNum
>174	CastTarget	unsigned char *
>175	Identifier	sfx
>176	ExpressionStatement	 
>177	AssignmentExpr	size = W_LumpLength ( sfxlump ) - SOUND_LUMP_HEADER_SIZE_IN_BYTES
>178	AdditiveExpression	W_LumpLength ( sfxlump ) - SOUND_LUMP_HEADER_SIZE_IN_BYTES
>179	Identifier	SOUND_LUMP_HEADER_SIZE_IN_BYTES
>180	CallExpression	W_LumpLength ( sfxlump )
>181	ArgumentList	sfxlump
>182	Argument	sfxlump
>183	Identifier	sfxlump
>184	Callee	W_LumpLength
>185	Identifier	W_LumpLength
>186	Identifier	size
>187	IdentifierDeclStatement	 
>188	IdentifierDecl	SOUND_LUMP_HEADER_SIZE_IN_BYTES = 8
>189	AssignmentExpr	SOUND_LUMP_HEADER_SIZE_IN_BYTES = 8
>190	PrimaryExpression	8
>191	Identifier	SOUND_LUMP_HEADER_SIZE_IN_BYTES
>192	Identifier	SOUND_LUMP_HEADER_SIZE_IN_BYTES
>193	IdentifierDeclType	const int
>194	IfStatement	if ( W_CheckNumForName ( name ) == - 1 )
>195	ElseStatement	else
>196	ExpressionStatement	 
>197	AssignmentExpr	sfxlump = W_GetNumForName ( name )
>198	CallExpression	W_GetNumForName ( name )
>199	ArgumentList	name
>200	Argument	name
>201	Identifier	name
>202	Callee	W_GetNumForName
>203	Identifier	W_GetNumForName
>204	Identifier	sfxlump
>205	ExpressionStatement	 
>206	AssignmentExpr	sfxlump = W_GetNumForName ( \"dspistol\" )
>207	CallExpression	W_GetNumForName ( \"dspistol\" )
>208	ArgumentList	\"dspistol\"
>209	Argument	\"dspistol\"
>210	PrimaryExpression	\"dspistol\"
>211	Callee	W_GetNumForName
>212	Identifier	W_GetNumForName
>213	Identifier	sfxlump
>214	Condition	 
>215	EqualityExpression	W_CheckNumForName ( name ) == - 1
>216	UnaryOp	- 1
>217	PrimaryExpression	1
>218	UnaryOperator	-
>219	CallExpression	W_CheckNumForName ( name )
>220	ArgumentList	name
>221	Argument	name
>222	Identifier	name
>223	Callee	W_CheckNumForName
>224	Identifier	W_CheckNumForName
>225	IfStatement	if ( strcmp ( sfxname , \"itemup\" ) == 0 )
>226	CompoundStatement	 
>227	ExpressionStatement	 
>228	AssignmentExpr	scale = 1.333f
>229	PrimaryExpression	1.333f
>230	Identifier	scale
>231	Condition	 
>232	EqualityExpression	strcmp ( sfxname , \"itemup\" ) == 0
>233	PrimaryExpression	0
>234	CallExpression	strcmp ( sfxname , \"itemup\" )
>235	ArgumentList	sfxname
>236	Argument	\"itemup\"
>237	PrimaryExpression	\"itemup\"
>238	Argument	sfxname
>239	Identifier	sfxname
>240	Callee	strcmp
>241	Identifier	strcmp
>242	IfStatement	if ( strcmp ( sfxname , \"plasma\" ) == 0 )
>243	CompoundStatement	 
>244	ExpressionStatement	 
>245	AssignmentExpr	scale = 0.75f
>246	PrimaryExpression	0.75f
>247	Identifier	scale
>248	Condition	 
>249	EqualityExpression	strcmp ( sfxname , \"plasma\" ) == 0
>250	PrimaryExpression	0
>251	CallExpression	strcmp ( sfxname , \"plasma\" )
>252	ArgumentList	sfxname
>253	Argument	\"plasma\"
>254	PrimaryExpression	\"plasma\"
>255	Argument	sfxname
>256	Identifier	sfxname
>257	Callee	strcmp
>258	Identifier	strcmp
>259	ExpressionStatement	 
>260	CallExpression	sprintf ( name , \"ds%s\" , sfxname )
>261	ArgumentList	name
>262	Argument	sfxname
>263	Identifier	sfxname
>264	Argument	\"ds%s\"
>265	PrimaryExpression	\"ds%s\"
>266	Argument	name
>267	Identifier	name
>268	Callee	sprintf
>269	Identifier	sprintf
>270	IdentifierDeclStatement	 
>271	IdentifierDecl	scale = 1.0f
>272	AssignmentExpr	scale = 1.0f
>273	PrimaryExpression	1.0f
>274	Identifier	scale
>275	Identifier	scale
>276	IdentifierDeclType	float
>277	IdentifierDeclStatement	 
>278	IdentifierDecl	sfxlump
>279	Identifier	sfxlump
>280	IdentifierDeclType	int
>281	IdentifierDeclStatement	 
>282	IdentifierDecl	name [ 20 ]
>283	PrimaryExpression	20
>284	Identifier	name
>285	IdentifierDeclType	char [ 20 ]
>286	IdentifierDeclStatement	 
>287	IdentifierDecl	size
>288	Identifier	size
>289	IdentifierDeclType	int
>290	IdentifierDeclStatement	 
>291	IdentifierDecl	* sfxmem
>292	Identifier	sfxmem
>293	IdentifierDeclType	unsigned char *
>294	IdentifierDeclStatement	 
>295	IdentifierDecl	* sfx
>296	Identifier	sfx
>297	IdentifierDeclType	unsigned char *
>323	FunctionDef	I_SetChannels ()
>324	ParameterList	 
>325	ReturnType	void
>326	CompoundStatement	 
>330	FunctionDef	I_SetSfxVolume (int volume)
>331	ParameterList	int volume
>332	Parameter	 
>333	Identifier	volume
>334	ParameterType	int
>335	ReturnType	void
>336	CompoundStatement	 
>337	ExpressionStatement	 
>338	AssignmentExpr	x_SoundVolume = ( ( float ) volume / 15.f ) * GLOBAL_VOLUME_MULTIPLIER
>339	MultiplicativeExpression	( ( float ) volume / 15.f ) * GLOBAL_VOLUME_MULTIPLIER
>340	Identifier	GLOBAL_VOLUME_MULTIPLIER
>341	MultiplicativeExpression	( float ) volume / 15.f
>342	PrimaryExpression	15.f
>343	CastExpression	( float ) volume
>344	Identifier	volume
>345	CastTarget	float
>346	Identifier	x_SoundVolume
>353	FunctionDef	I_GetSfxLumpNum (sfxinfo_t * sfx)
>354	ParameterList	sfxinfo_t * sfx
>355	Parameter	 
>356	Identifier	sfx
>357	ParameterType	sfxinfo_t *
>358	ReturnType	int
>359	CompoundStatement	 
>360	ReturnStatement	 
>361	CallExpression	W_GetNumForName ( namebuf )
>362	ArgumentList	namebuf
>363	Argument	namebuf
>364	Identifier	namebuf
>365	Callee	W_GetNumForName
>366	Identifier	W_GetNumForName
>367	ExpressionStatement	 
>368	CallExpression	sprintf ( namebuf , \"ds%s\" , sfx -> name )
>369	ArgumentList	namebuf
>370	Argument	sfx -> name
>371	PtrMemberAccess	sfx -> name
>372	Identifier	name
>373	Identifier	sfx
>374	Argument	\"ds%s\"
>375	PrimaryExpression	\"ds%s\"
>376	Argument	namebuf
>377	Identifier	namebuf
>378	Callee	sprintf
>379	Identifier	sprintf
>380	IdentifierDeclStatement	 
>381	IdentifierDecl	namebuf [ 9 ]
>382	PrimaryExpression	9
>383	Identifier	namebuf
>384	IdentifierDeclType	char [ 9 ]
>393	FunctionDef	I_StartSound2 (int id , int player , mobj_t * origin , mobj_t * listener_origin , int pitch , int priority)
>394	ParameterList	int id , int player , mobj_t * origin , mobj_t * listener_origin , int pitch , int priority
>395	Parameter	 
>396	Identifier	priority
>397	ParameterType	int
>398	Parameter	 
>399	Identifier	pitch
>400	ParameterType	int
>401	Parameter	 
>402	Identifier	listener_origin
>403	ParameterType	mobj_t *
>404	Parameter	 
>405	Identifier	origin
>406	ParameterType	mobj_t *
>407	Parameter	 
>408	Identifier	player
>409	ParameterType	int
>410	Parameter	 
>411	Identifier	id
>412	ParameterType	int
>413	ReturnType	int
>414	CompoundStatement	 
>415	ReturnStatement	 
>416	Identifier	id
>417	ExpressionStatement	 
>418	AssignmentExpr	sound -> originator = origin
>419	Identifier	origin
>420	PtrMemberAccess	sound -> originator
>421	Identifier	originator
>422	Identifier	sound
>423	ExpressionStatement	 
>424	AssignmentExpr	sound -> player = player
>425	Identifier	player
>426	PtrMemberAccess	sound -> player
>427	Identifier	player
>428	Identifier	sound
>429	ExpressionStatement	 
>430	AssignmentExpr	sound -> valid = 1
>431	PrimaryExpression	1
>432	PtrMemberAccess	sound -> valid
>433	Identifier	valid
>434	Identifier	sound
>435	ExpressionStatement	 
>436	PtrMemberAccess	g -> gametic
>437	Identifier	gametic
>438	Identifier	g
>439	Statement	 
>440	Statement	 
>441	Statement	 
>442	Statement	 
>443	Statement	 
>444	ExpressionStatement	 
>445	AssignmentExpr	sound -> id = id
>446	Identifier	id
>447	PtrMemberAccess	sound -> id
>448	Identifier	id
>449	Identifier	sound
>450	IfStatement	if ( FAILED ( hr = sound -> m_pSourceVoice -> Start ( 0 ) ) )
>451	CompoundStatement	 
>452	IdentifierDeclStatement	 
>453	IdentifierDecl	fail = 1
>454	AssignmentExpr	fail = 1
>455	PrimaryExpression	1
>456	Identifier	fail
>457	Identifier	fail
>458	IdentifierDeclType	int
>459	Condition	 
>460	CallExpression	FAILED ( hr = sound -> m_pSourceVoice -> Start ( 0 ) )
>461	ArgumentList	hr = sound -> m_pSourceVoice -> Start ( 0 )
>462	Argument	hr = sound -> m_pSourceVoice -> Start ( 0 )
>463	AssignmentExpr	hr = sound -> m_pSourceVoice -> Start ( 0 )
>464	CallExpression	sound -> m_pSourceVoice -> Start ( 0 )
>465	ArgumentList	0
>466	Argument	0
>467	PrimaryExpression	0
>468	Callee	sound -> m_pSourceVoice -> Start
>469	PtrMemberAccess	sound -> m_pSourceVoice -> Start
>470	Identifier	Start
>471	PtrMemberAccess	sound -> m_pSourceVoice
>472	Identifier	m_pSourceVoice
>473	Identifier	sound
>474	Identifier	hr
>475	Callee	FAILED
>476	Identifier	FAILED
>477	IfStatement	if ( FAILED ( hr = sound -> m_pSourceVoice -> SubmitSourceBuffer ( & Packet ) ) )
>478	CompoundStatement	 
>479	IdentifierDeclStatement	 
>480	IdentifierDecl	fail = 1
>481	AssignmentExpr	fail = 1
>482	PrimaryExpression	1
>483	Identifier	fail
>484	Identifier	fail
>485	IdentifierDeclType	int
>486	Condition	 
>487	CallExpression	FAILED ( hr = sound -> m_pSourceVoice -> SubmitSourceBuffer ( & Packet ) )
>488	ArgumentList	hr = sound -> m_pSourceVoice -> SubmitSourceBuffer ( & Packet )
>489	Argument	hr = sound -> m_pSourceVoice -> SubmitSourceBuffer ( & Packet )
>490	AssignmentExpr	hr = sound -> m_pSourceVoice -> SubmitSourceBuffer ( & Packet )
>491	CallExpression	sound -> m_pSourceVoice -> SubmitSourceBuffer ( & Packet )
>492	ArgumentList	& Packet
>493	Argument	& Packet
>494	UnaryOp	& Packet
>495	Identifier	Packet
>496	UnaryOperator	&
>497	Callee	sound -> m_pSourceVoice -> SubmitSourceBuffer
>498	PtrMemberAccess	sound -> m_pSourceVoice -> SubmitSourceBuffer
>499	Identifier	SubmitSourceBuffer
>500	PtrMemberAccess	sound -> m_pSourceVoice
>501	Identifier	m_pSourceVoice
>502	Identifier	sound
>503	Identifier	hr
>504	Callee	FAILED
>505	Identifier	FAILED
>506	IdentifierDeclStatement	 
>507	IdentifierDecl	hr
>508	Identifier	hr
>509	IdentifierDeclType	HRESULT
>510	IfStatement	if ( origin && origin != listener_origin )
>511	ElseStatement	else
>512	CompoundStatement	 
>513	ExpressionStatement	 
>514	AssignmentExpr	sound -> localSound = true
>515	Identifier	true
>516	PtrMemberAccess	sound -> localSound
>517	Identifier	localSound
>518	Identifier	sound
>519	ExpressionStatement	 
>520	CallExpression	sound -> m_pSourceVoice -> SetOutputMatrix ( NULL , 1 , numOutputChannels , localSoundVolumeEntries )
>521	ArgumentList	NULL
>522	Argument	localSoundVolumeEntries
>523	Identifier	localSoundVolumeEntries
>524	Argument	numOutputChannels
>525	Identifier	numOutputChannels
>526	Argument	1
>527	PrimaryExpression	1
>528	Argument	NULL
>529	Identifier	NULL
>530	Callee	sound -> m_pSourceVoice -> SetOutputMatrix
>531	PtrMemberAccess	sound -> m_pSourceVoice -> SetOutputMatrix
>532	Identifier	SetOutputMatrix
>533	PtrMemberAccess	sound -> m_pSourceVoice
>534	Identifier	m_pSourceVoice
>535	Identifier	sound
>536	CompoundStatement	 
>537	ExpressionStatement	 
>538	AssignmentExpr	sound -> localSound = false
>539	Identifier	false
>540	PtrMemberAccess	sound -> localSound
>541	Identifier	localSound
>542	Identifier	sound
>543	ExpressionStatement	 
>544	CallExpression	sound -> m_pSourceVoice -> SetOutputMatrix ( NULL , 1 , numOutputChannels , sound -> m_DSPSettings . pMatrixCoefficients )
>545	ArgumentList	NULL
>546	Argument	sound -> m_DSPSettings . pMatrixCoefficients
>547	MemberAccess	sound -> m_DSPSettings . pMatrixCoefficients
>548	Identifier	pMatrixCoefficients
>549	PtrMemberAccess	sound -> m_DSPSettings
>550	Identifier	m_DSPSettings
>551	Identifier	sound
>552	Argument	numOutputChannels
>553	Identifier	numOutputChannels
>554	Argument	1
>555	PrimaryExpression	1
>556	Argument	NULL
>557	Identifier	NULL
>558	Callee	sound -> m_pSourceVoice -> SetOutputMatrix
>559	PtrMemberAccess	sound -> m_pSourceVoice -> SetOutputMatrix
>560	Identifier	SetOutputMatrix
>561	PtrMemberAccess	sound -> m_pSourceVoice
>562	Identifier	m_pSourceVoice
>563	Identifier	sound
>564	ExpressionStatement	 
>565	CallExpression	X3DAudioCalculate ( X3DAudioInstance , & doom_Listener , & sound -> m_Emitter , dwCalculateFlags , & sound -> m_\
>566	ArgumentList	X3DAudioInstance
>567	Argument	& sound -> m_DSPSettings
>568	UnaryOp	& sound -> m_DSPSettings
>569	PtrMemberAccess	sound -> m_DSPSettings
>570	Identifier	m_DSPSettings
>571	Identifier	sound
>572	UnaryOperator	&
>573	Argument	dwCalculateFlags
>574	Identifier	dwCalculateFlags
>575	Argument	& sound -> m_Emitter
>576	UnaryOp	& sound -> m_Emitter
>577	PtrMemberAccess	sound -> m_Emitter
>578	Identifier	m_Emitter
>579	Identifier	sound
>580	UnaryOperator	&
>581	Argument	& doom_Listener
>582	UnaryOp	& doom_Listener
>583	Identifier	doom_Listener
>584	UnaryOperator	&
>585	Argument	X3DAudioInstance
>586	Identifier	X3DAudioInstance
>587	Callee	X3DAudioCalculate
>588	Identifier	X3DAudioCalculate
>589	IdentifierDeclStatement	 
>590	IdentifierDecl	dwCalculateFlags = X3DAUDIO_CALCULATE_MATRIX
>591	AssignmentExpr	dwCalculateFlags = X3DAUDIO_CALCULATE_MATRIX
>592	Identifier	X3DAUDIO_CALCULATE_MATRIX
>593	Identifier	X3DAUDIO_CALCULATE_MATRIX
>594	Identifier	dwCalculateFlags
>595	IdentifierDeclType	DWORD
>596	ExpressionStatement	 
>597	AssignmentExpr	sound -> m_Emitter . Position . z = ( float ) ( origin -> y >> FRACBITS )
>598	CastExpression	( float ) ( origin -> y >> FRACBITS )
>599	ShiftExpression	origin -> y >> FRACBITS
>600	Identifier	FRACBITS
>601	PtrMemberAccess	origin -> y
>602	Identifier	y
>603	Identifier	origin
>604	CastTarget	float
>605	MemberAccess	sound -> m_Emitter . Position . z
>606	Identifier	z
>607	MemberAccess	sound -> m_Emitter . Position
>608	Identifier	Position
>609	PtrMemberAccess	sound -> m_Emitter
>610	Identifier	m_Emitter
>611	Identifier	sound
>612	ExpressionStatement	 
>613	AssignmentExpr	sound -> m_Emitter . Position . y = 0.f
>614	PrimaryExpression	0.f
>615	MemberAccess	sound -> m_Emitter . Position . y
>616	Identifier	y
>617	MemberAccess	sound -> m_Emitter . Position
>618	Identifier	Position
>619	PtrMemberAccess	sound -> m_Emitter
>620	Identifier	m_Emitter
>621	Identifier	sound
>622	ExpressionStatement	 
>623	AssignmentExpr	sound -> m_Emitter . Position . x = ( float ) ( origin -> x >> FRACBITS )
>624	CastExpression	( float ) ( origin -> x >> FRACBITS )
>625	ShiftExpression	origin -> x >> FRACBITS
>626	Identifier	FRACBITS
>627	PtrMemberAccess	origin -> x
>628	Identifier	x
>629	Identifier	origin
>630	CastTarget	float
>631	MemberAccess	sound -> m_Emitter . Position . x
>632	Identifier	x
>633	MemberAccess	sound -> m_Emitter . Position
>634	Identifier	Position
>635	PtrMemberAccess	sound -> m_Emitter
>636	Identifier	m_Emitter
>637	Identifier	sound
>638	Condition	 
>639	AndExpression	origin && origin != listener_origin
>640	EqualityExpression	origin != listener_origin
>641	Identifier	listener_origin
>642	Identifier	origin
>643	Identifier	origin
>644	ExpressionStatement	 
>645	CallExpression	sound -> m_pSourceVoice -> SetFrequencyRatio ( 1 + ( ( float ) pitch - 128.f ) / 95.f )
>646	ArgumentList	1 + ( ( float ) pitch - 128.f ) / 95.f
>647	Argument	1 + ( ( float ) pitch - 128.f ) / 95.f
>648	AdditiveExpression	1 + ( ( float ) pitch - 128.f ) / 95.f
>649	MultiplicativeExpression	( ( float ) pitch - 128.f ) / 95.f
>650	PrimaryExpression	95.f
>651	AdditiveExpression	( float ) pitch - 128.f
>652	PrimaryExpression	128.f
>653	CastExpression	( float ) pitch
>654	Identifier	pitch
>655	CastTarget	float
>656	PrimaryExpression	1
>657	Callee	sound -> m_pSourceVoice -> SetFrequencyRatio
>658	PtrMemberAccess	sound -> m_pSourceVoice -> SetFrequencyRatio
>659	Identifier	SetFrequencyRatio
>660	PtrMemberAccess	sound -> m_pSourceVoice
>661	Identifier	m_pSourceVoice
>662	Identifier	sound
>663	ExpressionStatement	 
>664	CallExpression	sound -> m_pSourceVoice -> SetVolume ( x_SoundVolume )
>665	ArgumentList	x_SoundVolume
>666	Argument	x_SoundVolume
>667	Identifier	x_SoundVolume
>668	Callee	sound -> m_pSourceVoice -> SetVolume
>669	PtrMemberAccess	sound -> m_pSourceVoice -> SetVolume
>670	Identifier	SetVolume
>671	PtrMemberAccess	sound -> m_pSourceVoice
>672	Identifier	m_pSourceVoice
>673	Identifier	sound
>674	ExpressionStatement	 
>675	AssignmentExpr	Packet . pContext = NULL
>676	Identifier	NULL
>677	MemberAccess	Packet . pContext
>678	Identifier	pContext
>679	Identifier	Packet
>680	ExpressionStatement	 
>681	AssignmentExpr	Packet . LoopCount = 0
>682	PrimaryExpression	0
>683	MemberAccess	Packet . LoopCount
>684	Identifier	LoopCount
>685	Identifier	Packet
>686	ExpressionStatement	 
>687	AssignmentExpr	Packet . LoopLength = 0
>688	PrimaryExpression	0
>689	MemberAccess	Packet . LoopLength
>690	Identifier	LoopLength
>691	Identifier	Packet
>692	ExpressionStatement	 
>693	AssignmentExpr	Packet . LoopBegin = XAUDIO2_NO_LOOP_REGION
>694	Identifier	XAUDIO2_NO_LOOP_REGION
>695	MemberAccess	Packet . LoopBegin
>696	Identifier	LoopBegin
>697	Identifier	Packet
>698	ExpressionStatement	 
>699	AssignmentExpr	Packet . PlayLength = 0
>700	PrimaryExpression	0
>701	MemberAccess	Packet . PlayLength
>702	Identifier	PlayLength
>703	Identifier	Packet
>704	ExpressionStatement	 
>705	AssignmentExpr	Packet . PlayBegin = 0
>706	PrimaryExpression	0
>707	MemberAccess	Packet . PlayBegin
>708	Identifier	PlayBegin
>709	Identifier	Packet
>710	ExpressionStatement	 
>711	AssignmentExpr	Packet . pAudioData = ( BYTE * ) S_sfx [ id ] . data
>712	CastExpression	( BYTE * ) S_sfx [ id ] . data
>713	MemberAccess	S_sfx [ id ] . data
>714	Identifier	data
>715	ArrayIndexing	S_sfx [ id ]
>716	Identifier	id
>717	Identifier	S_sfx
>718	CastTarget	BYTE *
>719	MemberAccess	Packet . pAudioData
>720	Identifier	pAudioData
>721	Identifier	Packet
>722	ExpressionStatement	 
>723	AssignmentExpr	Packet . AudioBytes = lengths [ id ]
>724	ArrayIndexing	lengths [ id ]
>725	Identifier	id
>726	Identifier	lengths
>727	MemberAccess	Packet . AudioBytes
>728	Identifier	AudioBytes
>729	Identifier	Packet
>730	ExpressionStatement	 
>731	AssignmentExpr	Packet . Flags = XAUDIO2_END_OF_STREAM
>732	Identifier	XAUDIO2_END_OF_STREAM
>733	MemberAccess	Packet . Flags
>734	Identifier	Flags
>735	Identifier	Packet
>736	IdentifierDeclStatement	 
>737	IdentifierDecl	Packet = { 0 }
>738	AssignmentExpr	Packet = { 0 }
>739	InitializerList	0
>740	PrimaryExpression	0
>741	Identifier	Packet
>742	Identifier	Packet
>743	IdentifierDeclType	XAUDIO2_BUFFER
>744	ExpressionStatement	 
>745	CallExpression	sound -> m_pSourceVoice -> FlushSourceBuffers ( )
>746	ArgumentList	 
>747	Callee	sound -> m_pSourceVoice -> FlushSourceBuffers
>748	PtrMemberAccess	sound -> m_pSourceVoice -> FlushSourceBuffers
>749	Identifier	FlushSourceBuffers
>750	PtrMemberAccess	sound -> m_pSourceVoice
>751	Identifier	m_pSourceVoice
>752	Identifier	sound
>753	ExpressionStatement	 
>754	CallExpression	sound -> m_pSourceVoice -> Stop ( )
>755	ArgumentList	 
>756	Callee	sound -> m_pSourceVoice -> Stop
>757	PtrMemberAccess	sound -> m_pSourceVoice -> Stop
>758	Identifier	Stop
>759	PtrMemberAccess	sound -> m_pSourceVoice
>760	Identifier	m_pSourceVoice
>761	Identifier	sound
>762	IfStatement	if ( i == NUM_SOUNDBUFFERS )
>763	CompoundStatement	 
>764	ExpressionStatement	 
>765	AssignmentExpr	sound = & activeSounds [ i ]
>766	UnaryOp	& activeSounds [ i ]
>767	ArrayIndexing	activeSounds [ i ]
>768	Identifier	i
>769	Identifier	activeSounds
>770	UnaryOperator	&
>771	Identifier	sound
>772	ExpressionStatement	 
>773	AssignmentExpr	i = oldestnum
>774	Identifier	oldestnum
>775	Identifier	i
>776	Condition	 
>777	EqualityExpression	i == NUM_SOUNDBUFFERS
>778	Identifier	NUM_SOUNDBUFFERS
>779	Identifier	i
>780	ForStatement	for ( i = 0 ; i < NUM_SOUNDBUFFERS ; ++ i )
>781	CompoundStatement	 
>782	IfStatement	if ( state . BuffersQueued == 0 )
>783	CompoundStatement	 
>784	BreakStatement	 
>785	Condition	 
>786	EqualityExpression	state . BuffersQueued == 0
>787	PrimaryExpression	0
>788	MemberAccess	state . BuffersQueued
>789	Identifier	BuffersQueued
>790	Identifier	state
>791	ExpressionStatement	 
>792	CallExpression	sound -> m_pSourceVoice -> GetState ( & state )
>793	ArgumentList	& state
>794	Argument	& state
>795	UnaryOp	& state
>796	Identifier	state
>797	UnaryOperator	&
>798	Callee	sound -> m_pSourceVoice -> GetState
>799	PtrMemberAccess	sound -> m_pSourceVoice -> GetState
>800	Identifier	GetState
>801	PtrMemberAccess	sound -> m_pSourceVoice
>802	Identifier	m_pSourceVoice
>803	Identifier	sound
>804	IfStatement	if ( ! oldest || oldest > sound -> start )
>805	CompoundStatement	 
>806	ExpressionStatement	 
>807	AssignmentExpr	oldest = sound -> start
>808	PtrMemberAccess	sound -> start
>809	Identifier	start
>810	Identifier	sound
>811	Identifier	oldest
>812	ExpressionStatement	 
>813	AssignmentExpr	oldestnum = i
>814	Identifier	i
>815	Identifier	oldestnum
>816	Condition	 
>817	OrExpression	! oldest || oldest > sound -> start
>818	RelationalExpression	oldest > sound -> start
>819	PtrMemberAccess	sound -> start
>820	Identifier	start
>821	Identifier	sound
>822	Identifier	oldest
>823	UnaryOp	! oldest
>824	Identifier	oldest
>825	UnaryOperator	!
>826	IfStatement	if ( ! sound -> valid )
>827	BreakStatement	 
>828	Condition	 
>829	UnaryOp	! sound -> valid
>830	PtrMemberAccess	sound -> valid
>831	Identifier	valid
>832	Identifier	sound
>833	UnaryOperator	!
>834	ExpressionStatement	 
>835	AssignmentExpr	sound = & activeSounds [ i ]
>836	UnaryOp	& activeSounds [ i ]
>837	ArrayIndexing	activeSounds [ i ]
>838	Identifier	i
>839	Identifier	activeSounds
>840	UnaryOperator	&
>841	Identifier	sound
>842	UnaryExpression	 
>843	Identifier	i
>844	IncDec	++
>845	Condition	 
>846	RelationalExpression	i < NUM_SOUNDBUFFERS
>847	Identifier	NUM_SOUNDBUFFERS
>848	Identifier	i
>849	ForInit	 
>850	AssignmentExpr	i = 0
>851	PrimaryExpression	0
>852	Identifier	i
>853	IfStatement	if ( id == sfx_sawup || id == sfx_sawidl || id == sfx_sawful || id == sfx_sawhit || id == sfx_stnmov )
>854	CompoundStatement	 
>855	ForStatement	for ( i = 0 ; i < NUM_SOUNDBUFFERS ; i ++ )
>856	CompoundStatement	 
>857	IfStatement	if ( sound -> valid && ( sound -> id == id && sound -> player == player ) )
>858	CompoundStatement	 
>859	BreakStatement	 
>860	ExpressionStatement	 
>861	CallExpression	I_StopSound ( sound -> id , player )
>862	ArgumentList	sound -> id
>863	Argument	player
>864	Identifier	player
>865	Argument	sound -> id
>866	PtrMemberAccess	sound -> id
>867	Identifier	id
>868	Identifier	sound
>869	Callee	I_StopSound
>870	Identifier	I_StopSound
>871	Condition	 
>872	AndExpression	sound -> valid && ( sound -> id == id && sound -> player == player )
>873	AndExpression	sound -> id == id && sound -> player == player
>874	EqualityExpression	sound -> player == player
>875	Identifier	player
>876	PtrMemberAccess	sound -> player
>877	Identifier	player
>878	Identifier	sound
>879	EqualityExpression	sound -> id == id
>880	Identifier	id
>881	PtrMemberAccess	sound -> id
>882	Identifier	id
>883	Identifier	sound
>884	PtrMemberAccess	sound -> valid
>885	Identifier	valid
>886	Identifier	sound
>887	ExpressionStatement	 
>888	AssignmentExpr	sound = & activeSounds [ i ]
>889	UnaryOp	& activeSounds [ i ]
>890	ArrayIndexing	activeSounds [ i ]
>891	Identifier	i
>892	Identifier	activeSounds
>893	UnaryOperator	&
>894	Identifier	sound
>895	IncDecOp	 
>896	IncDec	++
>897	Identifier	i
>898	Condition	 
>899	RelationalExpression	i < NUM_SOUNDBUFFERS
>900	Identifier	NUM_SOUNDBUFFERS
>901	Identifier	i
>902	ForInit	 
>903	AssignmentExpr	i = 0
>904	PrimaryExpression	0
>905	Identifier	i
>906	Condition	 
>907	OrExpression	id == sfx_sawup || id == sfx_sawidl || id == sfx_sawful || id == sfx_sawhit || id == sfx_stnmov
>908	OrExpression	id == sfx_sawidl || id == sfx_sawful || id == sfx_sawhit || id == sfx_stnmov
>909	OrExpression	id == sfx_sawful || id == sfx_sawhit || id == sfx_stnmov
>910	OrExpression	id == sfx_sawhit || id == sfx_stnmov
>911	EqualityExpression	id == sfx_stnmov
>912	Identifier	sfx_stnmov
>913	Identifier	id
>914	EqualityExpression	id == sfx_sawhit
>915	Identifier	sfx_sawhit
>916	Identifier	id
>917	EqualityExpression	id == sfx_sawful
>918	Identifier	sfx_sawful
>919	Identifier	id
>920	EqualityExpression	id == sfx_sawidl
>921	Identifier	sfx_sawidl
>922	Identifier	id
>923	EqualityExpression	id == sfx_sawup
>924	Identifier	sfx_sawup
>925	Identifier	id
>926	IdentifierDeclStatement	 
>927	IdentifierDecl	oldestnum = - 1
>928	AssignmentExpr	oldestnum = - 1
>929	UnaryOp	- 1
>930	PrimaryExpression	1
>931	UnaryOperator	-
>932	Identifier	oldestnum
>933	Identifier	oldestnum
>934	IdentifierDeclType	int
>935	IdentifierDecl	oldest = 0
>936	AssignmentExpr	oldest = 0
>937	PrimaryExpression	0
>938	Identifier	oldest
>939	Identifier	oldest
>940	IdentifierDeclType	int
>941	IdentifierDeclStatement	 
>942	IdentifierDecl	* sound = 0
>943	AssignmentExpr	* sound = 0
>944	PrimaryExpression	0
>945	Identifier	sound
>946	Identifier	sound
>947	IdentifierDeclType	activeSound_t *
>948	IdentifierDeclStatement	 
>949	IdentifierDecl	state
>950	Identifier	state
>951	IdentifierDeclType	XAUDIO2_VOICE_STATE
>952	IdentifierDeclStatement	 
>953	IdentifierDecl	i
>954	Identifier	i
>955	IdentifierDeclType	int
>956	IfStatement	if ( ! soundHardwareInitialized )
>957	CompoundStatement	 
>958	ReturnStatement	 
>959	Identifier	id
>960	Condition	 
>961	UnaryOp	! soundHardwareInitialized
>962	Identifier	soundHardwareInitialized
>963	UnaryOperator	!
>1049	FunctionDef	I_ProcessSoundEvents ()
>1050	ParameterList	 
>1051	ReturnType	void
>1052	CompoundStatement	 
>1053	ExpressionStatement	 
>1054	CallExpression	memset ( soundEvents , 0 , sizeof ( soundEvents ) )
>1055	ArgumentList	soundEvents
>1056	Argument	sizeof ( soundEvents )
>1057	SizeofExpr	sizeof ( soundEvents )
>1058	SizeofOperand	soundEvents
>1059	Sizeof	sizeof
>1060	Argument	0
>1061	PrimaryExpression	0
>1062	Argument	soundEvents
>1063	Identifier	soundEvents
>1064	Callee	memset
>1065	Identifier	memset
>1066	ForStatement	for ( int i = 0 ; i < 128 ; i ++ )
>1067	CompoundStatement	 
>1068	IfStatement	if ( soundEvents [ i ] . pitch )
>1069	CompoundStatement	 
>1070	ExpressionStatement	 
>1071	CallExpression	I_StartSound2 ( i , soundEvents [ i ] . player , soundEvents [ i ] . originator , soundEvents [ i ] . listener , \
>1072	ArgumentList	i
>1073	Argument	soundEvents [ i ] . priority
>1074	MemberAccess	soundEvents [ i ] . priority
>1075	Identifier	priority
>1076	ArrayIndexing	soundEvents [ i ]
>1077	Identifier	i
>1078	Identifier	soundEvents
>1079	Argument	soundEvents [ i ] . pitch
>1080	MemberAccess	soundEvents [ i ] . pitch
>1081	Identifier	pitch
>1082	ArrayIndexing	soundEvents [ i ]
>1083	Identifier	i
>1084	Identifier	soundEvents
>1085	Argument	soundEvents [ i ] . listener
>1086	MemberAccess	soundEvents [ i ] . listener
>1087	Identifier	listener
>1088	ArrayIndexing	soundEvents [ i ]
>1089	Identifier	i
>1090	Identifier	soundEvents
>1091	Argument	soundEvents [ i ] . originator
>1092	MemberAccess	soundEvents [ i ] . originator
>1093	Identifier	originator
>1094	ArrayIndexing	soundEvents [ i ]
>1095	Identifier	i
>1096	Identifier	soundEvents
>1097	Argument	soundEvents [ i ] . player
>1098	MemberAccess	soundEvents [ i ] . player
>1099	Identifier	player
>1100	ArrayIndexing	soundEvents [ i ]
>1101	Identifier	i
>1102	Identifier	soundEvents
>1103	Argument	i
>1104	Identifier	i
>1105	Callee	I_StartSound2
>1106	Identifier	I_StartSound2
>1107	Condition	 
>1108	MemberAccess	soundEvents [ i ] . pitch
>1109	Identifier	pitch
>1110	ArrayIndexing	soundEvents [ i ]
>1111	Identifier	i
>1112	Identifier	soundEvents
>1113	IncDecOp	 
>1114	IncDec	++
>1115	Identifier	i
>1116	Condition	 
>1117	RelationalExpression	i < 128
>1118	PrimaryExpression	128
>1119	Identifier	i
>1120	ForInit	 
>1121	IdentifierDeclStatement	int i = 0 ;
>1122	IdentifierDecl	i = 0
>1123	AssignmentExpr	i = 0
>1124	PrimaryExpression	0
>1125	Identifier	i
>1126	Identifier	i
>1127	IdentifierDeclType	int
>1140	FunctionDef	I_StartSound (int id , mobj_t * origin , mobj_t * listener_origin , int vol , int pitch , int priority)
>1141	ParameterList	int id , mobj_t * origin , mobj_t * listener_origin , int vol , int pitch , int priority
>1142	Parameter	 
>1143	Identifier	priority
>1144	ParameterType	int
>1145	Parameter	 
>1146	Identifier	pitch
>1147	ParameterType	int
>1148	Parameter	 
>1149	Identifier	vol
>1150	ParameterType	int
>1151	Parameter	 
>1152	Identifier	listener_origin
>1153	ParameterType	mobj_t *
>1154	Parameter	 
>1155	Identifier	origin
>1156	ParameterType	mobj_t *
>1157	Parameter	 
>1158	Identifier	id
>1159	ParameterType	int
>1160	ReturnType	int
>1161	CompoundStatement	 
>1162	IfStatement	if ( PLAYERCOUNT == 1 || id == sfx_sawup || id == sfx_sawidl || id == sfx_sawful || id == sfx_sawhit )
>1163	ElseStatement	else
>1164	CompoundStatement	 
>1165	ReturnStatement	 
>1166	Identifier	id
>1167	IfStatement	if ( soundEvents [ id ] . vol < vol )
>1168	CompoundStatement	 
>1169	ExpressionStatement	 
>1170	AssignmentExpr	soundEvents [ id ] . listener = listener_origin
>1171	Identifier	listener_origin
>1172	MemberAccess	soundEvents [ id ] . listener
>1173	Identifier	listener
>1174	ArrayIndexing	soundEvents [ id ]
>1175	Identifier	id
>1176	Identifier	soundEvents
>1177	ExpressionStatement	 
>1178	AssignmentExpr	soundEvents [ id ] . originator = origin
>1179	Identifier	origin
>1180	MemberAccess	soundEvents [ id ] . originator
>1181	Identifier	originator
>1182	ArrayIndexing	soundEvents [ id ]
>1183	Identifier	id
>1184	Identifier	soundEvents
>1185	ExpressionStatement	 
>1186	AssignmentExpr	soundEvents [ id ] . vol = vol
>1187	Identifier	vol
>1188	MemberAccess	soundEvents [ id ] . vol
>1189	Identifier	vol
>1190	ArrayIndexing	soundEvents [ id ]
>1191	Identifier	id
>1192	Identifier	soundEvents
>1193	ExpressionStatement	 
>1194	AssignmentExpr	soundEvents [ id ] . priority = priority
>1195	Identifier	priority
>1196	MemberAccess	soundEvents [ id ] . priority
>1197	Identifier	priority
>1198	ArrayIndexing	soundEvents [ id ]
>1199	Identifier	id
>1200	Identifier	soundEvents
>1201	ExpressionStatement	 
>1202	AssignmentExpr	soundEvents [ id ] . pitch = pitch
>1203	Identifier	pitch
>1204	MemberAccess	soundEvents [ id ] . pitch
>1205	Identifier	pitch
>1206	ArrayIndexing	soundEvents [ id ]
>1207	Identifier	id
>1208	Identifier	soundEvents
>1209	ExpressionStatement	 
>1210	AssignmentExpr	soundEvents [ id ] . player = DoomLib 
>1211	CallExpression	DoomLib 
>1212	ArgumentList	 
>1213	Callee	DoomLib 
>1214	Identifier	DoomLib 
>1215	MemberAccess	soundEvents [ id ] . player
>1216	Identifier	player
>1217	ArrayIndexing	soundEvents [ id ]
>1218	Identifier	id
>1219	Identifier	soundEvents
>1220	Condition	 
>1221	RelationalExpression	soundEvents [ id ] . vol < vol
>1222	Identifier	vol
>1223	MemberAccess	soundEvents [ id ] . vol
>1224	Identifier	vol
>1225	ArrayIndexing	soundEvents [ id ]
>1226	Identifier	id
>1227	Identifier	soundEvents
>1228	CompoundStatement	 
>1229	ExpressionStatement	 
>1230	Statement	 
>1231	Statement	 
>1232	Statement	 
>1233	Statement	 
>1234	Statement	 
>1235	Statement	 
>1236	Statement	 
>1237	Statement	 
>1238	Statement	 
>1239	Statement	 
>1240	Statement	 
>1241	Statement	 
>1242	Statement	 
>1243	Statement	 
>1244	Statement	 
>1245	Statement	 
>1246	Statement	 
>1247	Statement	 
>1248	Condition	 
>1249	OrExpression	PLAYERCOUNT == 1 || id == sfx_sawup || id == sfx_sawidl || id == sfx_sawful || id == sfx_sawhit
>1250	OrExpression	id == sfx_sawup || id == sfx_sawidl || id == sfx_sawful || id == sfx_sawhit
>1251	OrExpression	id == sfx_sawidl || id == sfx_sawful || id == sfx_sawhit
>1252	OrExpression	id == sfx_sawful || id == sfx_sawhit
>1253	EqualityExpression	id == sfx_sawhit
>1254	Identifier	sfx_sawhit
>1255	Identifier	id
>1256	EqualityExpression	id == sfx_sawful
>1257	Identifier	sfx_sawful
>1258	Identifier	id
>1259	EqualityExpression	id == sfx_sawidl
>1260	Identifier	sfx_sawidl
>1261	Identifier	id
>1262	EqualityExpression	id == sfx_sawup
>1263	Identifier	sfx_sawup
>1264	Identifier	id
>1265	EqualityExpression	PLAYERCOUNT == 1
>1266	PrimaryExpression	1
>1267	Identifier	PLAYERCOUNT
>1268	CompoundStatement	 
>1269	ReturnStatement	 
>1270	PrimaryExpression	0
>1271	Statement	 
>1272	Statement	 
>1273	Statement	 
>1274	Statement	 
>1275	Statement	 
>1276	Statement	 
>1277	Statement	 
>1278	Statement	 
>1279	Statement	 
>1280	Statement	 
>1281	Statement	 
>1282	Statement	 
>1283	Statement	 
>1284	Statement	 
>1285	Statement	 
>1286	Statement	 
>1287	Statement	 
>1312	FunctionDef	I_StopSound (int handle , int player)
>1313	ParameterList	int handle , int player
>1314	Parameter	 
>1315	Identifier	player
>1316	ParameterType	int
>1317	Parameter	 
>1318	Identifier	handle
>1319	ParameterType	int
>1320	ReturnType	void
>1321	CompoundStatement	 
>1322	ExpressionStatement	 
>1323	AssignmentExpr	sound -> player = - 1
>1324	UnaryOp	- 1
>1325	PrimaryExpression	1
>1326	UnaryOperator	-
>1327	PtrMemberAccess	sound -> player
>1328	Identifier	player
>1329	Identifier	sound
>1330	ExpressionStatement	 
>1331	AssignmentExpr	sound -> valid = 0
>1332	PrimaryExpression	0
>1333	PtrMemberAccess	sound -> valid
>1334	Identifier	valid
>1335	Identifier	sound
>1336	IfStatement	if ( sound -> m_pSourceVoice != NULL )
>1337	CompoundStatement	 
>1338	ExpressionStatement	 
>1339	CallExpression	sound -> m_pSourceVoice -> Stop ( 0 )
>1340	ArgumentList	0
>1341	Argument	0
>1342	PrimaryExpression	0
>1343	Callee	sound -> m_pSourceVoice -> Stop
>1344	PtrMemberAccess	sound -> m_pSourceVoice -> Stop
>1345	Identifier	Stop
>1346	PtrMemberAccess	sound -> m_pSourceVoice
>1347	Identifier	m_pSourceVoice
>1348	Identifier	sound
>1349	Condition	 
>1350	EqualityExpression	sound -> m_pSourceVoice != NULL
>1351	Identifier	NULL
>1352	PtrMemberAccess	sound -> m_pSourceVoice
>1353	Identifier	m_pSourceVoice
>1354	Identifier	sound
>1355	IfStatement	if ( i == NUM_SOUNDBUFFERS )
>1356	ReturnStatement	 
>1357	Condition	 
>1358	EqualityExpression	i == NUM_SOUNDBUFFERS
>1359	Identifier	NUM_SOUNDBUFFERS
>1360	Identifier	i
>1361	ForStatement	for ( i = 0 ; i < NUM_SOUNDBUFFERS ; ++ i )
>1362	CompoundStatement	 
>1363	BreakStatement	 
>1364	IfStatement	if ( ! sound -> valid || sound -> id != handle || ( player >= 0 && sound -> player != player ) )
>1365	ContinueStatement	 
>1366	Condition	 
>1367	OrExpression	! sound -> valid || sound -> id != handle || ( player >= 0 && sound -> player != player )
>1368	OrExpression	sound -> id != handle || ( player >= 0 && sound -> player != player )
>1369	AndExpression	player >= 0 && sound -> player != player
>1370	EqualityExpression	sound -> player != player
>1371	Identifier	player
>1372	PtrMemberAccess	sound -> player
>1373	Identifier	player
>1374	Identifier	sound
>1375	RelationalExpression	player >= 0
>1376	PrimaryExpression	0
>1377	Identifier	player
>1378	EqualityExpression	sound -> id != handle
>1379	Identifier	handle
>1380	PtrMemberAccess	sound -> id
>1381	Identifier	id
>1382	Identifier	sound
>1383	UnaryOp	! sound -> valid
>1384	PtrMemberAccess	sound -> valid
>1385	Identifier	valid
>1386	Identifier	sound
>1387	UnaryOperator	!
>1388	ExpressionStatement	 
>1389	AssignmentExpr	sound = & activeSounds [ i ]
>1390	UnaryOp	& activeSounds [ i ]
>1391	ArrayIndexing	activeSounds [ i ]
>1392	Identifier	i
>1393	Identifier	activeSounds
>1394	UnaryOperator	&
>1395	Identifier	sound
>1396	UnaryExpression	 
>1397	Identifier	i
>1398	IncDec	++
>1399	Condition	 
>1400	RelationalExpression	i < NUM_SOUNDBUFFERS
>1401	Identifier	NUM_SOUNDBUFFERS
>1402	Identifier	i
>1403	ForInit	 
>1404	AssignmentExpr	i = 0
>1405	PrimaryExpression	0
>1406	Identifier	i
>1407	IdentifierDeclStatement	 
>1408	IdentifierDecl	* sound = 0
>1409	AssignmentExpr	* sound = 0
>1410	PrimaryExpression	0
>1411	Identifier	sound
>1412	Identifier	sound
>1413	IdentifierDeclType	activeSound_t *
>1414	IdentifierDeclStatement	 
>1415	IdentifierDecl	i
>1416	Identifier	i
>1417	IdentifierDeclType	int
>1435	FunctionDef	I_SoundIsPlaying (int handle)
>1436	ParameterList	int handle
>1437	Parameter	 
>1438	Identifier	handle
>1439	ParameterType	int
>1440	ReturnType	int
>1441	CompoundStatement	 
>1442	ReturnStatement	 
>1443	PrimaryExpression	0
>1444	ForStatement	for ( i = 0 ; i < NUM_SOUNDBUFFERS ; ++ i )
>1445	CompoundStatement	 
>1446	IfStatement	if ( state . BuffersQueued > 0 )
>1447	CompoundStatement	 
>1448	ReturnStatement	 
>1449	PrimaryExpression	1
>1450	Condition	 
>1451	RelationalExpression	state . BuffersQueued > 0
>1452	PrimaryExpression	0
>1453	MemberAccess	state . BuffersQueued
>1454	Identifier	BuffersQueued
>1455	Identifier	state
>1456	ExpressionStatement	 
>1457	CallExpression	sound -> m_pSourceVoice -> GetState ( & state )
>1458	ArgumentList	& state
>1459	Argument	& state
>1460	UnaryOp	& state
>1461	Identifier	state
>1462	UnaryOperator	&
>1463	Callee	sound -> m_pSourceVoice -> GetState
>1464	PtrMemberAccess	sound -> m_pSourceVoice -> GetState
>1465	Identifier	GetState
>1466	PtrMemberAccess	sound -> m_pSourceVoice
>1467	Identifier	m_pSourceVoice
>1468	Identifier	sound
>1469	IfStatement	if ( ! sound -> valid || sound -> id != handle )
>1470	ContinueStatement	 
>1471	Condition	 
>1472	OrExpression	! sound -> valid || sound -> id != handle
>1473	EqualityExpression	sound -> id != handle
>1474	Identifier	handle
>1475	PtrMemberAccess	sound -> id
>1476	Identifier	id
>1477	Identifier	sound
>1478	UnaryOp	! sound -> valid
>1479	PtrMemberAccess	sound -> valid
>1480	Identifier	valid
>1481	Identifier	sound
>1482	UnaryOperator	!
>1483	ExpressionStatement	 
>1484	AssignmentExpr	sound = & activeSounds [ i ]
>1485	UnaryOp	& activeSounds [ i ]
>1486	ArrayIndexing	activeSounds [ i ]
>1487	Identifier	i
>1488	Identifier	activeSounds
>1489	UnaryOperator	&
>1490	Identifier	sound
>1491	UnaryExpression	 
>1492	Identifier	i
>1493	IncDec	++
>1494	Condition	 
>1495	RelationalExpression	i < NUM_SOUNDBUFFERS
>1496	Identifier	NUM_SOUNDBUFFERS
>1497	Identifier	i
>1498	ForInit	 
>1499	AssignmentExpr	i = 0
>1500	PrimaryExpression	0
>1501	Identifier	i
>1502	IdentifierDeclStatement	 
>1503	IdentifierDecl	* sound
>1504	Identifier	sound
>1505	IdentifierDeclType	activeSound_t *
>1506	IdentifierDeclStatement	 
>1507	IdentifierDecl	state
>1508	Identifier	state
>1509	IdentifierDeclType	XAUDIO2_VOICE_STATE
>1510	IdentifierDeclStatement	 
>1511	IdentifierDecl	i
>1512	Identifier	i
>1513	IdentifierDeclType	int
>1514	IfStatement	if ( ! soundHardwareInitialized )
>1515	CompoundStatement	 
>1516	ReturnStatement	 
>1517	PrimaryExpression	0
>1518	Condition	 
>1519	UnaryOp	! soundHardwareInitialized
>1520	Identifier	soundHardwareInitialized
>1521	UnaryOperator	!
>1540	FunctionDef	I_UpdateSound ()
>1541	ParameterList	 
>1542	ReturnType	void
>1543	CompoundStatement	 
>1544	ForStatement	for ( i = 0 ; i < NUM_SOUNDBUFFERS ; i ++ )
>1545	CompoundStatement	 
>1546	IfStatement	if ( state . BuffersQueued > 0 )
>1547	CompoundStatement	 
>1548	ExpressionStatement	 
>1549	CallExpression	sound -> m_pSourceVoice -> SetOutputMatrix ( NULL , 1 , numOutputChannels , sound -> m_DSPSettings . pMatrixCoefficients )
>1550	ArgumentList	NULL
>1551	Argument	sound -> m_DSPSettings . pMatrixCoefficients
>1552	MemberAccess	sound -> m_DSPSettings . pMatrixCoefficients
>1553	Identifier	pMatrixCoefficients
>1554	PtrMemberAccess	sound -> m_DSPSettings
>1555	Identifier	m_DSPSettings
>1556	Identifier	sound
>1557	Argument	numOutputChannels
>1558	Identifier	numOutputChannels
>1559	Argument	1
>1560	PrimaryExpression	1
>1561	Argument	NULL
>1562	Identifier	NULL
>1563	Callee	sound -> m_pSourceVoice -> SetOutputMatrix
>1564	PtrMemberAccess	sound -> m_pSourceVoice -> SetOutputMatrix
>1565	Identifier	SetOutputMatrix
>1566	PtrMemberAccess	sound -> m_pSourceVoice
>1567	Identifier	m_pSourceVoice
>1568	Identifier	sound
>1569	ExpressionStatement	 
>1570	CallExpression	X3DAudioCalculate ( X3DAudioInstance , & doom_Listener , & sound -> m_Emitter , dwCalculateFlags , & sound -> m_\
>1571	ArgumentList	X3DAudioInstance
>1572	Argument	& sound -> m_DSPSettings
>1573	UnaryOp	& sound -> m_DSPSettings
>1574	PtrMemberAccess	sound -> m_DSPSettings
>1575	Identifier	m_DSPSettings
>1576	Identifier	sound
>1577	UnaryOperator	&
>1578	Argument	dwCalculateFlags
>1579	Identifier	dwCalculateFlags
>1580	Argument	& sound -> m_Emitter
>1581	UnaryOp	& sound -> m_Emitter
>1582	PtrMemberAccess	sound -> m_Emitter
>1583	Identifier	m_Emitter
>1584	Identifier	sound
>1585	UnaryOperator	&
>1586	Argument	& doom_Listener
>1587	UnaryOp	& doom_Listener
>1588	Identifier	doom_Listener
>1589	UnaryOperator	&
>1590	Argument	X3DAudioInstance
>1591	Identifier	X3DAudioInstance
>1592	Callee	X3DAudioCalculate
>1593	Identifier	X3DAudioCalculate
>1594	IdentifierDeclStatement	 
>1595	IdentifierDecl	dwCalculateFlags = X3DAUDIO_CALCULATE_MATRIX
>1596	AssignmentExpr	dwCalculateFlags = X3DAUDIO_CALCULATE_MATRIX
>1597	Identifier	X3DAUDIO_CALCULATE_MATRIX
>1598	Identifier	X3DAUDIO_CALCULATE_MATRIX
>1599	Identifier	dwCalculateFlags
>1600	IdentifierDeclType	DWORD
>1601	ExpressionStatement	 
>1602	AssignmentExpr	sound -> m_Emitter . Position . z = ( float ) ( sound -> originator -> y >> FRACBITS )
>1603	CastExpression	( float ) ( sound -> originator -> y >> FRACBITS )
>1604	ShiftExpression	sound -> originator -> y >> FRACBITS
>1605	Identifier	FRACBITS
>1606	PtrMemberAccess	sound -> originator -> y
>1607	Identifier	y
>1608	PtrMemberAccess	sound -> originator
>1609	Identifier	originator
>1610	Identifier	sound
>1611	CastTarget	float
>1612	MemberAccess	sound -> m_Emitter . Position . z
>1613	Identifier	z
>1614	MemberAccess	sound -> m_Emitter . Position
>1615	Identifier	Position
>1616	PtrMemberAccess	sound -> m_Emitter
>1617	Identifier	m_Emitter
>1618	Identifier	sound
>1619	ExpressionStatement	 
>1620	AssignmentExpr	sound -> m_Emitter . Position . y = 0.f
>1621	PrimaryExpression	0.f
>1622	MemberAccess	sound -> m_Emitter . Position . y
>1623	Identifier	y
>1624	MemberAccess	sound -> m_Emitter . Position
>1625	Identifier	Position
>1626	PtrMemberAccess	sound -> m_Emitter
>1627	Identifier	m_Emitter
>1628	Identifier	sound
>1629	ExpressionStatement	 
>1630	AssignmentExpr	sound -> m_Emitter . Position . x = ( float ) ( sound -> originator -> x >> FRACBITS )
>1631	CastExpression	( float ) ( sound -> originator -> x >> FRACBITS )
>1632	ShiftExpression	sound -> originator -> x >> FRACBITS
>1633	Identifier	FRACBITS
>1634	PtrMemberAccess	sound -> originator -> x
>1635	Identifier	x
>1636	PtrMemberAccess	sound -> originator
>1637	Identifier	originator
>1638	Identifier	sound
>1639	CastTarget	float
>1640	MemberAccess	sound -> m_Emitter . Position . x
>1641	Identifier	x
>1642	MemberAccess	sound -> m_Emitter . Position
>1643	Identifier	Position
>1644	PtrMemberAccess	sound -> m_Emitter
>1645	Identifier	m_Emitter
>1646	Identifier	sound
>1647	ExpressionStatement	 
>1648	AssignmentExpr	doom_Listener . Position . z = ( float ) ( playerObj -> y >> FRACBITS )
>1649	CastExpression	( float ) ( playerObj -> y >> FRACBITS )
>1650	ShiftExpression	playerObj -> y >> FRACBITS
>1651	Identifier	FRACBITS
>1652	PtrMemberAccess	playerObj -> y
>1653	Identifier	y
>1654	Identifier	playerObj
>1655	CastTarget	float
>1656	MemberAccess	doom_Listener . Position . z
>1657	Identifier	z
>1658	MemberAccess	doom_Listener . Position
>1659	Identifier	Position
>1660	Identifier	doom_Listener
>1661	ExpressionStatement	 
>1662	AssignmentExpr	doom_Listener . Position . y = 0.f
>1663	PrimaryExpression	0.f
>1664	MemberAccess	doom_Listener . Position . y
>1665	Identifier	y
>1666	MemberAccess	doom_Listener . Position
>1667	Identifier	Position
>1668	Identifier	doom_Listener
>1669	ExpressionStatement	 
>1670	AssignmentExpr	doom_Listener . Position . x = ( float ) ( playerObj -> x >> FRACBITS )
>1671	CastExpression	( float ) ( playerObj -> x >> FRACBITS )
>1672	ShiftExpression	playerObj -> x >> FRACBITS
>1673	Identifier	FRACBITS
>1674	PtrMemberAccess	playerObj -> x
>1675	Identifier	x
>1676	Identifier	playerObj
>1677	CastTarget	float
>1678	MemberAccess	doom_Listener . Position . x
>1679	Identifier	x
>1680	MemberAccess	doom_Listener . Position
>1681	Identifier	Position
>1682	Identifier	doom_Listener
>1683	ExpressionStatement	 
>1684	AssignmentExpr	doom_Listener . OrientFront . z = ( float ) ( fz ) / 65535.f
>1685	MultiplicativeExpression	( float ) ( fz ) / 65535.f
>1686	PrimaryExpression	65535.f
>1687	CastExpression	( float ) ( fz )
>1688	Identifier	fz
>1689	CastTarget	float
>1690	MemberAccess	doom_Listener . OrientFront . z
>1691	Identifier	z
>1692	MemberAccess	doom_Listener . OrientFront
>1693	Identifier	OrientFront
>1694	Identifier	doom_Listener
>1695	ExpressionStatement	 
>1696	AssignmentExpr	doom_Listener . OrientFront . y = 0.f
>1697	PrimaryExpression	0.f
>1698	MemberAccess	doom_Listener . OrientFront . y
>1699	Identifier	y
>1700	MemberAccess	doom_Listener . OrientFront
>1701	Identifier	OrientFront
>1702	Identifier	doom_Listener
>1703	ExpressionStatement	 
>1704	AssignmentExpr	doom_Listener . OrientFront . x = ( float ) ( fx ) / 65535.f
>1705	MultiplicativeExpression	( float ) ( fx ) / 65535.f
>1706	PrimaryExpression	65535.f
>1707	CastExpression	( float ) ( fx )
>1708	Identifier	fx
>1709	CastTarget	float
>1710	MemberAccess	doom_Listener . OrientFront . x
>1711	Identifier	x
>1712	MemberAccess	doom_Listener . OrientFront
>1713	Identifier	OrientFront
>1714	Identifier	doom_Listener
>1715	ExpressionStatement	 
>1716	AssignmentExpr	fz = finesine [ pAngle ]
>1717	ArrayIndexing	finesine [ pAngle ]
>1718	Identifier	pAngle
>1719	Identifier	finesine
>1720	Identifier	fz
>1721	ExpressionStatement	 
>1722	AssignmentExpr	fx = finecosine [ pAngle ]
>1723	ArrayIndexing	finecosine [ pAngle ]
>1724	Identifier	pAngle
>1725	Identifier	finecosine
>1726	Identifier	fx
>1727	ExpressionStatement	 
>1728	AssignmentExpr	pAngle >>= ANGLETOFINESHIFT
>1729	Identifier	ANGLETOFINESHIFT
>1730	Identifier	pAngle
>1731	IdentifierDeclStatement	 
>1732	IdentifierDecl	fz
>1733	Identifier	fz
>1734	IdentifierDeclType	fixed_t
>1735	IdentifierDecl	fx
>1736	Identifier	fx
>1737	IdentifierDeclType	fixed_t
>1738	IdentifierDeclStatement	 
>1739	IdentifierDecl	pAngle = playerObj -> angle
>1740	AssignmentExpr	pAngle = playerObj -> angle
>1741	PtrMemberAccess	playerObj -> angle
>1742	Identifier	angle
>1743	Identifier	playerObj
>1744	Identifier	pAngle
>1745	Identifier	pAngle
>1746	IdentifierDeclType	angle_t
>1747	ExpressionStatement	 
>1748	MemberAccess	g -> players [ sound -> player ] . mo
>1749	Identifier	mo
>1750	ArrayIndexing	g -> players [ sound -> player ]
>1751	PtrMemberAccess	sound -> player
>1752	Identifier	player
>1753	Identifier	sound
>1754	PtrMemberAccess	g -> players
>1755	Identifier	players
>1756	Identifier	g
>1757	Statement	 
>1758	Statement	 
>1759	Statement	 
>1760	Statement	 
>1761	Statement	 
>1762	Condition	 
>1763	RelationalExpression	state . BuffersQueued > 0
>1764	PrimaryExpression	0
>1765	MemberAccess	state . BuffersQueued
>1766	Identifier	BuffersQueued
>1767	Identifier	state
>1768	ExpressionStatement	 
>1769	CallExpression	sound -> m_pSourceVoice -> GetState ( & state )
>1770	ArgumentList	& state
>1771	Argument	& state
>1772	UnaryOp	& state
>1773	Identifier	state
>1774	UnaryOperator	&
>1775	Callee	sound -> m_pSourceVoice -> GetState
>1776	PtrMemberAccess	sound -> m_pSourceVoice -> GetState
>1777	Identifier	GetState
>1778	PtrMemberAccess	sound -> m_pSourceVoice
>1779	Identifier	m_pSourceVoice
>1780	Identifier	sound
>1781	IfStatement	if ( ! sound -> valid || sound -> localSound )
>1782	CompoundStatement	 
>1783	ContinueStatement	 
>1784	Condition	 
>1785	OrExpression	! sound -> valid || sound -> localSound
>1786	PtrMemberAccess	sound -> localSound
>1787	Identifier	localSound
>1788	Identifier	sound
>1789	UnaryOp	! sound -> valid
>1790	PtrMemberAccess	sound -> valid
>1791	Identifier	valid
>1792	Identifier	sound
>1793	UnaryOperator	!
>1794	ExpressionStatement	 
>1795	AssignmentExpr	sound = & activeSounds [ i ]
>1796	UnaryOp	& activeSounds [ i ]
>1797	ArrayIndexing	activeSounds [ i ]
>1798	Identifier	i
>1799	Identifier	activeSounds
>1800	UnaryOperator	&
>1801	Identifier	sound
>1802	IncDecOp	 
>1803	IncDec	++
>1804	Identifier	i
>1805	Condition	 
>1806	RelationalExpression	i < NUM_SOUNDBUFFERS
>1807	Identifier	NUM_SOUNDBUFFERS
>1808	Identifier	i
>1809	ForInit	 
>1810	AssignmentExpr	i = 0
>1811	PrimaryExpression	0
>1812	Identifier	i
>1813	IdentifierDeclStatement	 
>1814	IdentifierDecl	* sound
>1815	Identifier	sound
>1816	IdentifierDeclType	activeSound_t *
>1817	IdentifierDeclStatement	 
>1818	IdentifierDecl	state
>1819	Identifier	state
>1820	IdentifierDeclType	XAUDIO2_VOICE_STATE
>1821	IdentifierDeclStatement	 
>1822	IdentifierDecl	i
>1823	Identifier	i
>1824	IdentifierDeclType	int
>1825	IfStatement	if ( ! soundHardwareInitialized )
>1826	CompoundStatement	 
>1827	ReturnStatement	 
>1828	Condition	 
>1829	UnaryOp	! soundHardwareInitialized
>1830	Identifier	soundHardwareInitialized
>1831	UnaryOperator	!
>1901	FunctionDef	I_UpdateSoundParams (int handle , int vol , int sep , int pitch)
>1902	ParameterList	int handle , int vol , int sep , int pitch
>1903	Parameter	 
>1904	Identifier	pitch
>1905	ParameterType	int
>1906	Parameter	 
>1907	Identifier	sep
>1908	ParameterType	int
>1909	Parameter	 
>1910	Identifier	vol
>1911	ParameterType	int
>1912	Parameter	 
>1913	Identifier	handle
>1914	ParameterType	int
>1915	ReturnType	void
>1916	CompoundStatement	 
>1924	FunctionDef	I_ShutdownSound ()
>1925	ParameterList	 
>1926	ReturnType	void
>1927	CompoundStatement	 
>1928	ReturnStatement	 
>1929	ExpressionStatement	 
>1930	AssignmentExpr	S_initialized = 0
>1931	PrimaryExpression	0
>1932	Identifier	S_initialized
>1933	ExpressionStatement	 
>1934	CallExpression	I_StopSong ( 0 )
>1935	ArgumentList	0
>1936	Argument	0
>1937	PrimaryExpression	0
>1938	Callee	I_StopSong
>1939	Identifier	I_StopSong
>1940	IfStatement	if ( S_initialized )
>1941	CompoundStatement	 
>1942	ForStatement	for ( i = 1 ; i < NUMSFX ; i ++ )
>1943	CompoundStatement	 
>1944	IfStatement	if ( S_sfx [ i ] . data && ! ( S_sfx [ i ] . link ) )
>1945	CompoundStatement	 
>1946	ExpressionStatement	 
>1947	CallExpression	free ( S_sfx [ i ] . data )
>1948	ArgumentList	S_sfx [ i ] . data
>1949	Argument	S_sfx [ i ] . data
>1950	MemberAccess	S_sfx [ i ] . data
>1951	Identifier	data
>1952	ArrayIndexing	S_sfx [ i ]
>1953	Identifier	i
>1954	Identifier	S_sfx
>1955	Callee	free
>1956	Identifier	free
>1957	Condition	 
>1958	AndExpression	S_sfx [ i ] . data && ! ( S_sfx [ i ] . link )
>1959	UnaryOp	! ( S_sfx [ i ] . link )
>1960	MemberAccess	S_sfx [ i ] . link
>1961	Identifier	link
>1962	ArrayIndexing	S_sfx [ i ]
>1963	Identifier	i
>1964	Identifier	S_sfx
>1965	UnaryOperator	!
>1966	MemberAccess	S_sfx [ i ] . data
>1967	Identifier	data
>1968	ArrayIndexing	S_sfx [ i ]
>1969	Identifier	i
>1970	Identifier	S_sfx
>1971	IncDecOp	 
>1972	IncDec	++
>1973	Identifier	i
>1974	Condition	 
>1975	RelationalExpression	i < NUMSFX
>1976	Identifier	NUMSFX
>1977	Identifier	i
>1978	ForInit	 
>1979	AssignmentExpr	i = 1
>1980	PrimaryExpression	1
>1981	Identifier	i
>1982	ForStatement	for ( i = 0 ; i < NUM_SOUNDBUFFERS ; ++ i )
>1983	CompoundStatement	 
>1984	IfStatement	if ( sound -> m_pSourceVoice )
>1985	CompoundStatement	 
>1986	ExpressionStatement	 
>1987	CallExpression	sound -> m_pSourceVoice -> FlushSourceBuffers ( )
>1988	ArgumentList	 
>1989	Callee	sound -> m_pSourceVoice -> FlushSourceBuffers
>1990	PtrMemberAccess	sound -> m_pSourceVoice -> FlushSourceBuffers
>1991	Identifier	FlushSourceBuffers
>1992	PtrMemberAccess	sound -> m_pSourceVoice
>1993	Identifier	m_pSourceVoice
>1994	Identifier	sound
>1995	Condition	 
>1996	PtrMemberAccess	sound -> m_pSourceVoice
>1997	Identifier	m_pSourceVoice
>1998	Identifier	sound
>1999	ExpressionStatement	 
>2000	CallExpression	I_StopSound ( sound -> id , 0 )
>2001	ArgumentList	sound -> id
>2002	Argument	0
>2003	PrimaryExpression	0
>2004	Argument	sound -> id
>2005	PtrMemberAccess	sound -> id
>2006	Identifier	id
>2007	Identifier	sound
>2008	Callee	I_StopSound
>2009	Identifier	I_StopSound
>2010	IfStatement	if ( sound == NULL )
>2011	CompoundStatement	 
>2012	ContinueStatement	 
>2013	Condition	 
>2014	EqualityExpression	sound == NULL
>2015	Identifier	NULL
>2016	Identifier	sound
>2017	IdentifierDeclStatement	 
>2018	IdentifierDecl	* sound = & activeSounds [ i ]
>2019	AssignmentExpr	* sound = & activeSounds [ i ]
>2020	UnaryOp	& activeSounds [ i ]
>2021	ArrayIndexing	activeSounds [ i ]
>2022	Identifier	i
>2023	Identifier	activeSounds
>2024	UnaryOperator	&
>2025	Identifier	sound
>2026	Identifier	sound
>2027	IdentifierDeclType	activeSound_t *
>2028	UnaryExpression	 
>2029	Identifier	i
>2030	IncDec	++
>2031	Condition	 
>2032	RelationalExpression	i < NUM_SOUNDBUFFERS
>2033	Identifier	NUM_SOUNDBUFFERS
>2034	Identifier	i
>2035	ForInit	 
>2036	AssignmentExpr	i = 0
>2037	PrimaryExpression	0
>2038	Identifier	i
>2039	Condition	 
>2040	Identifier	S_initialized
>2041	IdentifierDeclStatement	 
>2042	IdentifierDecl	i
>2043	Identifier	i
>2044	IdentifierDeclType	int
>2045	IdentifierDeclStatement	 
>2046	IdentifierDecl	done = 0
>2047	AssignmentExpr	done = 0
>2048	PrimaryExpression	0
>2049	Identifier	done
>2050	Identifier	done
>2051	IdentifierDeclType	int
>2073	FunctionDef	I_InitSoundHardware (int numOutputChannels_ , int channelMask)
>2074	ParameterList	int numOutputChannels_ , int channelMask
>2075	Parameter	 
>2076	Identifier	channelMask
>2077	ParameterType	int
>2078	Parameter	 
>2079	Identifier	numOutputChannels_
>2080	ParameterType	int
>2081	ReturnType	void
>2082	CompoundStatement	 
>2083	ExpressionStatement	 
>2084	AssignmentExpr	soundHardwareInitialized = true
>2085	Identifier	true
>2086	Identifier	soundHardwareInitialized
>2087	ExpressionStatement	 
>2088	CallExpression	I_InitMusic ( )
>2089	ArgumentList	 
>2090	Callee	I_InitMusic
>2091	Identifier	I_InitMusic
>2092	ForStatement	for ( int i = 0 ; i < NUM_SOUNDBUFFERS ; ++ i )
>2093	CompoundStatement	 
>2094	ExpressionStatement	 
>2095	CallExpression	I_InitSoundChannel ( i , numOutputChannels )
>2096	ArgumentList	i
>2097	Argument	numOutputChannels
>2098	Identifier	numOutputChannels
>2099	Argument	i
>2100	Identifier	i
>2101	Callee	I_InitSoundChannel
>2102	Identifier	I_InitSoundChannel
>2103	UnaryExpression	 
>2104	Identifier	i
>2105	IncDec	++
>2106	Condition	 
>2107	RelationalExpression	i < NUM_SOUNDBUFFERS
>2108	Identifier	NUM_SOUNDBUFFERS
>2109	Identifier	i
>2110	ForInit	 
>2111	IdentifierDeclStatement	int i = 0 ;
>2112	IdentifierDecl	i = 0
>2113	AssignmentExpr	i = 0
>2114	PrimaryExpression	0
>2115	Identifier	i
>2116	Identifier	i
>2117	IdentifierDeclType	int
>2118	ExpressionStatement	 
>2119	CallExpression	X3DAudioInitialize ( channelMask , 340.29f , X3DAudioInstance )
>2120	ArgumentList	channelMask
>2121	Argument	X3DAudioInstance
>2122	Identifier	X3DAudioInstance
>2123	Argument	340.29f
>2124	PrimaryExpression	340.29f
>2125	Argument	channelMask
>2126	Identifier	channelMask
>2127	Callee	X3DAudioInitialize
>2128	Identifier	X3DAudioInitialize
>2129	ExpressionStatement	 
>2130	AssignmentExpr	numOutputChannels = numOutputChannels_
>2131	Identifier	numOutputChannels_
>2132	Identifier	numOutputChannels
>2133	Statement	 
>2145	FunctionDef	I_ShutdownSoundHardware ()
>2146	ParameterList	 
>2147	ReturnType	void
>2148	CompoundStatement	 
>2149	ForStatement	for ( int i = 0 ; i < NUM_SOUNDBUFFERS ; ++ i )
>2150	CompoundStatement	 
>2151	IfStatement	if ( sound -> m_DSPSettings . pMatrixCoefficients )
>2152	CompoundStatement	 
>2153	ExpressionStatement	 
>2154	AssignmentExpr	sound -> m_DSPSettings . pMatrixCoefficients = NULL
>2155	Identifier	NULL
>2156	MemberAccess	sound -> m_DSPSettings . pMatrixCoefficients
>2157	Identifier	pMatrixCoefficients
>2158	PtrMemberAccess	sound -> m_DSPSettings
>2159	Identifier	m_DSPSettings
>2160	Identifier	sound
>2161	ExpressionStatement	 
>2162	MemberAccess	sound -> m_DSPSettings . pMatrixCoefficients
>2163	Identifier	pMatrixCoefficients
>2164	PtrMemberAccess	sound -> m_DSPSettings
>2165	Identifier	m_DSPSettings
>2166	Identifier	sound
>2167	Statement	 
>2168	Statement	 
>2169	Statement	 
>2170	Condition	 
>2171	MemberAccess	sound -> m_DSPSettings . pMatrixCoefficients
>2172	Identifier	pMatrixCoefficients
>2173	PtrMemberAccess	sound -> m_DSPSettings
>2174	Identifier	m_DSPSettings
>2175	Identifier	sound
>2176	IfStatement	if ( sound -> m_pSourceVoice )
>2177	CompoundStatement	 
>2178	ExpressionStatement	 
>2179	AssignmentExpr	sound -> m_pSourceVoice = NULL
>2180	Identifier	NULL
>2181	PtrMemberAccess	sound -> m_pSourceVoice
>2182	Identifier	m_pSourceVoice
>2183	Identifier	sound
>2184	ExpressionStatement	 
>2185	CallExpression	sound -> m_pSourceVoice -> DestroyVoice ( )
>2186	ArgumentList	 
>2187	Callee	sound -> m_pSourceVoice -> DestroyVoice
>2188	PtrMemberAccess	sound -> m_pSourceVoice -> DestroyVoice
>2189	Identifier	DestroyVoice
>2190	PtrMemberAccess	sound -> m_pSourceVoice
>2191	Identifier	m_pSourceVoice
>2192	Identifier	sound
>2193	ExpressionStatement	 
>2194	CallExpression	sound -> m_pSourceVoice -> FlushSourceBuffers ( )
>2195	ArgumentList	 
>2196	Callee	sound -> m_pSourceVoice -> FlushSourceBuffers
>2197	PtrMemberAccess	sound -> m_pSourceVoice -> FlushSourceBuffers
>2198	Identifier	FlushSourceBuffers
>2199	PtrMemberAccess	sound -> m_pSourceVoice
>2200	Identifier	m_pSourceVoice
>2201	Identifier	sound
>2202	ExpressionStatement	 
>2203	CallExpression	sound -> m_pSourceVoice -> Stop ( )
>2204	ArgumentList	 
>2205	Callee	sound -> m_pSourceVoice -> Stop
>2206	PtrMemberAccess	sound -> m_pSourceVoice -> Stop
>2207	Identifier	Stop
>2208	PtrMemberAccess	sound -> m_pSourceVoice
>2209	Identifier	m_pSourceVoice
>2210	Identifier	sound
>2211	Condition	 
>2212	PtrMemberAccess	sound -> m_pSourceVoice
>2213	Identifier	m_pSourceVoice
>2214	Identifier	sound
>2215	IfStatement	if ( sound == NULL )
>2216	CompoundStatement	 
>2217	ContinueStatement	 
>2218	Condition	 
>2219	EqualityExpression	sound == NULL
>2220	Identifier	NULL
>2221	Identifier	sound
>2222	IdentifierDeclStatement	 
>2223	IdentifierDecl	* sound = & activeSounds [ i ]
>2224	AssignmentExpr	* sound = & activeSounds [ i ]
>2225	UnaryOp	& activeSounds [ i ]
>2226	ArrayIndexing	activeSounds [ i ]
>2227	Identifier	i
>2228	Identifier	activeSounds
>2229	UnaryOperator	&
>2230	Identifier	sound
>2231	Identifier	sound
>2232	IdentifierDeclType	activeSound_t *
>2233	UnaryExpression	 
>2234	Identifier	i
>2235	IncDec	++
>2236	Condition	 
>2237	RelationalExpression	i < NUM_SOUNDBUFFERS
>2238	Identifier	NUM_SOUNDBUFFERS
>2239	Identifier	i
>2240	ForInit	 
>2241	IdentifierDeclStatement	int i = 0 ;
>2242	IdentifierDecl	i = 0
>2243	AssignmentExpr	i = 0
>2244	PrimaryExpression	0
>2245	Identifier	i
>2246	Identifier	i
>2247	IdentifierDeclType	int
>2248	ExpressionStatement	 
>2249	CallExpression	I_ShutdownMusic ( )
>2250	ArgumentList	 
>2251	Callee	I_ShutdownMusic
>2252	Identifier	I_ShutdownMusic
>2253	ExpressionStatement	 
>2254	AssignmentExpr	soundHardwareInitialized = false
>2255	Identifier	false
>2256	Identifier	soundHardwareInitialized
>2273	FunctionDef	I_InitSoundChannel (int channel , int numOutputChannels_)
>2274	ParameterList	int channel , int numOutputChannels_
>2275	Parameter	 
>2276	Identifier	numOutputChannels_
>2277	ParameterType	int
>2278	Parameter	 
>2279	Identifier	channel
>2280	ParameterType	int
>2281	ReturnType	void
>2282	CompoundStatement	 
>2283	ExpressionStatement	 
>2284	CallExpression	soundSystemLocal . hardware . GetIXAudio2 ( ) -> CreateSourceVoice ( & soundchannel -> m_pSourceVoice , ( WAVEFORMATEX * ) & \
>2285	ArgumentList	& soundchannel -> m_pSourceVoice
>2286	Argument	( WAVEFORMATEX * ) & voiceFormat
>2287	CastExpression	( WAVEFORMATEX * ) & voiceFormat
>2288	UnaryOp	& voiceFormat
>2289	Identifier	voiceFormat
>2290	UnaryOperator	&
>2291	CastTarget	WAVEFORMATEX *
>2292	Argument	& soundchannel -> m_pSourceVoice
>2293	UnaryOp	& soundchannel -> m_pSourceVoice
>2294	PtrMemberAccess	soundchannel -> m_pSourceVoice
>2295	Identifier	m_pSourceVoice
>2296	Identifier	soundchannel
>2297	UnaryOperator	&
>2298	Callee	soundSystemLocal . hardware . GetIXAudio2 ( ) -> CreateSourceVoice
>2299	PtrMemberAccess	soundSystemLocal . hardware . GetIXAudio2 ( ) -> CreateSourceVoice
>2300	Identifier	CreateSourceVoice
>2301	CallExpression	soundSystemLocal . hardware . GetIXAudio2 ( )
>2302	ArgumentList	 
>2303	Callee	soundSystemLocal . hardware . GetIXAudio2
>2304	MemberAccess	soundSystemLocal . hardware . GetIXAudio2
>2305	Identifier	GetIXAudio2
>2306	MemberAccess	soundSystemLocal . hardware
>2307	Identifier	hardware
>2308	Identifier	soundSystemLocal
>2309	ExpressionStatement	 
>2310	AssignmentExpr	voiceFormat . cbSize = 0
>2311	PrimaryExpression	0
>2312	MemberAccess	voiceFormat . cbSize
>2313	Identifier	cbSize
>2314	Identifier	voiceFormat
>2315	ExpressionStatement	 
>2316	AssignmentExpr	voiceFormat . wBitsPerSample = 8
>2317	PrimaryExpression	8
>2318	MemberAccess	voiceFormat . wBitsPerSample
>2319	Identifier	wBitsPerSample
>2320	Identifier	voiceFormat
>2321	ExpressionStatement	 
>2322	AssignmentExpr	voiceFormat . nBlockAlign = 1
>2323	PrimaryExpression	1
>2324	MemberAccess	voiceFormat . nBlockAlign
>2325	Identifier	nBlockAlign
>2326	Identifier	voiceFormat
>2327	ExpressionStatement	 
>2328	AssignmentExpr	voiceFormat . nAvgBytesPerSec = 11025
>2329	PrimaryExpression	11025
>2330	MemberAccess	voiceFormat . nAvgBytesPerSec
>2331	Identifier	nAvgBytesPerSec
>2332	Identifier	voiceFormat
>2333	ExpressionStatement	 
>2334	AssignmentExpr	voiceFormat . nSamplesPerSec = 11025
>2335	PrimaryExpression	11025
>2336	MemberAccess	voiceFormat . nSamplesPerSec
>2337	Identifier	nSamplesPerSec
>2338	Identifier	voiceFormat
>2339	ExpressionStatement	 
>2340	AssignmentExpr	voiceFormat . nChannels = 1
>2341	PrimaryExpression	1
>2342	MemberAccess	voiceFormat . nChannels
>2343	Identifier	nChannels
>2344	Identifier	voiceFormat
>2345	ExpressionStatement	 
>2346	AssignmentExpr	voiceFormat . wFormatTag = WAVE_FORMAT_PCM
>2347	Identifier	WAVE_FORMAT_PCM
>2348	MemberAccess	voiceFormat . wFormatTag
>2349	Identifier	wFormatTag
>2350	Identifier	voiceFormat
>2351	IdentifierDeclStatement	 
>2352	IdentifierDecl	voiceFormat = { 0 }
>2353	AssignmentExpr	voiceFormat = { 0 }
>2354	InitializerList	0
>2355	PrimaryExpression	0
>2356	Identifier	voiceFormat
>2357	Identifier	voiceFormat
>2358	IdentifierDeclType	WAVEFORMATEX
>2359	ExpressionStatement	 
>2360	AssignmentExpr	soundchannel -> m_DSPSettings . pMatrixCoefficients = new FLOAT [ numOutputChannels_ ]
>2361	Identifier	numOutputChannels_
>2362	MemberAccess	soundchannel -> m_DSPSettings . pMatrixCoefficients
>2363	Identifier	pMatrixCoefficients
>2364	PtrMemberAccess	soundchannel -> m_DSPSettings
>2365	Identifier	m_DSPSettings
>2366	Identifier	soundchannel
>2367	ExpressionStatement	 
>2368	AssignmentExpr	soundchannel -> m_DSPSettings . DstChannelCount = numOutputChannels_
>2369	Identifier	numOutputChannels_
>2370	MemberAccess	soundchannel -> m_DSPSettings . DstChannelCount
>2371	Identifier	DstChannelCount
>2372	PtrMemberAccess	soundchannel -> m_DSPSettings
>2373	Identifier	m_DSPSettings
>2374	Identifier	soundchannel
>2375	ExpressionStatement	 
>2376	AssignmentExpr	soundchannel -> m_DSPSettings . SrcChannelCount = 1
>2377	PrimaryExpression	1
>2378	MemberAccess	soundchannel -> m_DSPSettings . SrcChannelCount
>2379	Identifier	SrcChannelCount
>2380	PtrMemberAccess	soundchannel -> m_DSPSettings
>2381	Identifier	m_DSPSettings
>2382	Identifier	soundchannel
>2383	ExpressionStatement	 
>2384	AssignmentExpr	soundchannel -> m_Emitter . pChannelAzimuths = g_EmitterAzimuths
>2385	Identifier	g_EmitterAzimuths
>2386	MemberAccess	soundchannel -> m_Emitter . pChannelAzimuths
>2387	Identifier	pChannelAzimuths
>2388	PtrMemberAccess	soundchannel -> m_Emitter
>2389	Identifier	m_Emitter
>2390	Identifier	soundchannel
>2391	ExpressionStatement	 
>2392	AssignmentExpr	soundchannel -> m_Emitter . DopplerScaler = 1.0f
>2393	PrimaryExpression	1.0f
>2394	MemberAccess	soundchannel -> m_Emitter . DopplerScaler
>2395	Identifier	DopplerScaler
>2396	PtrMemberAccess	soundchannel -> m_Emitter
>2397	Identifier	m_Emitter
>2398	Identifier	soundchannel
>2399	ExpressionStatement	 
>2400	AssignmentExpr	soundchannel -> m_Emitter . CurveDistanceScaler = 1200.0f
>2401	PrimaryExpression	1200.0f
>2402	MemberAccess	soundchannel -> m_Emitter . CurveDistanceScaler
>2403	Identifier	CurveDistanceScaler
>2404	PtrMemberAccess	soundchannel -> m_Emitter
>2405	Identifier	m_Emitter
>2406	Identifier	soundchannel
>2407	ExpressionStatement	 
>2408	AssignmentExpr	soundchannel -> m_Emitter . pReverbCurve = NULL
>2409	Identifier	NULL
>2410	MemberAccess	soundchannel -> m_Emitter . pReverbCurve
>2411	Identifier	pReverbCurve
>2412	PtrMemberAccess	soundchannel -> m_Emitter
>2413	Identifier	m_Emitter
>2414	Identifier	soundchannel
>2415	ExpressionStatement	 
>2416	AssignmentExpr	soundchannel -> m_Emitter . pLPFReverbCurve = NULL
>2417	Identifier	NULL
>2418	MemberAccess	soundchannel -> m_Emitter . pLPFReverbCurve
>2419	Identifier	pLPFReverbCurve
>2420	PtrMemberAccess	soundchannel -> m_Emitter
>2421	Identifier	m_Emitter
>2422	Identifier	soundchannel
>2423	ExpressionStatement	 
>2424	AssignmentExpr	soundchannel -> m_Emitter . pLPFDirectCurve = NULL
>2425	Identifier	NULL
>2426	MemberAccess	soundchannel -> m_Emitter . pLPFDirectCurve
>2427	Identifier	pLPFDirectCurve
>2428	PtrMemberAccess	soundchannel -> m_Emitter
>2429	Identifier	m_Emitter
>2430	Identifier	soundchannel
>2431	ExpressionStatement	 
>2432	AssignmentExpr	soundchannel -> m_Emitter . pLFECurve = NULL
>2433	Identifier	NULL
>2434	MemberAccess	soundchannel -> m_Emitter . pLFECurve
>2435	Identifier	pLFECurve
>2436	PtrMemberAccess	soundchannel -> m_Emitter
>2437	Identifier	m_Emitter
>2438	Identifier	soundchannel
>2439	ExpressionStatement	 
>2440	AssignmentExpr	soundchannel -> m_Emitter . pVolumeCurve = NULL
>2441	Identifier	NULL
>2442	MemberAccess	soundchannel -> m_Emitter . pVolumeCurve
>2443	Identifier	pVolumeCurve
>2444	PtrMemberAccess	soundchannel -> m_Emitter
>2445	Identifier	m_Emitter
>2446	Identifier	soundchannel
>2447	ExpressionStatement	 
>2448	AssignmentExpr	soundchannel -> m_Emitter . ChannelRadius = 0.0f
>2449	PrimaryExpression	0.0f
>2450	MemberAccess	soundchannel -> m_Emitter . ChannelRadius
>2451	Identifier	ChannelRadius
>2452	PtrMemberAccess	soundchannel -> m_Emitter
>2453	Identifier	m_Emitter
>2454	Identifier	soundchannel
>2455	ExpressionStatement	 
>2456	AssignmentExpr	soundchannel -> m_Emitter . ChannelCount = 1
>2457	PrimaryExpression	1
>2458	MemberAccess	soundchannel -> m_Emitter . ChannelCount
>2459	Identifier	ChannelCount
>2460	PtrMemberAccess	soundchannel -> m_Emitter
>2461	Identifier	m_Emitter
>2462	Identifier	soundchannel
>2463	ExpressionStatement	 
>2464	AssignmentExpr	soundchannel -> m_Emitter . pCone -> OuterReverb = 1.0f
>2465	PrimaryExpression	1.0f
>2466	PtrMemberAccess	soundchannel -> m_Emitter . pCone -> OuterReverb
>2467	Identifier	OuterReverb
>2468	MemberAccess	soundchannel -> m_Emitter . pCone
>2469	Identifier	pCone
>2470	PtrMemberAccess	soundchannel -> m_Emitter
>2471	Identifier	m_Emitter
>2472	Identifier	soundchannel
>2473	ExpressionStatement	 
>2474	AssignmentExpr	soundchannel -> m_Emitter . pCone -> InnerReverb = 0.0f
>2475	PrimaryExpression	0.0f
>2476	PtrMemberAccess	soundchannel -> m_Emitter . pCone -> InnerReverb
>2477	Identifier	InnerReverb
>2478	MemberAccess	soundchannel -> m_Emitter . pCone
>2479	Identifier	pCone
>2480	PtrMemberAccess	soundchannel -> m_Emitter
>2481	Identifier	m_Emitter
>2482	Identifier	soundchannel
>2483	ExpressionStatement	 
>2484	AssignmentExpr	soundchannel -> m_Emitter . pCone -> OuterLPF = 1.0f
>2485	PrimaryExpression	1.0f
>2486	PtrMemberAccess	soundchannel -> m_Emitter . pCone -> OuterLPF
>2487	Identifier	OuterLPF
>2488	MemberAccess	soundchannel -> m_Emitter . pCone
>2489	Identifier	pCone
>2490	PtrMemberAccess	soundchannel -> m_Emitter
>2491	Identifier	m_Emitter
>2492	Identifier	soundchannel
>2493	ExpressionStatement	 
>2494	AssignmentExpr	soundchannel -> m_Emitter . pCone -> InnerLPF = 0.0f
>2495	PrimaryExpression	0.0f
>2496	PtrMemberAccess	soundchannel -> m_Emitter . pCone -> InnerLPF
>2497	Identifier	InnerLPF
>2498	MemberAccess	soundchannel -> m_Emitter . pCone
>2499	Identifier	pCone
>2500	PtrMemberAccess	soundchannel -> m_Emitter
>2501	Identifier	m_Emitter
>2502	Identifier	soundchannel
>2503	ExpressionStatement	 
>2504	AssignmentExpr	soundchannel -> m_Emitter . pCone -> OuterVolume = 1.0f
>2505	PrimaryExpression	1.0f
>2506	PtrMemberAccess	soundchannel -> m_Emitter . pCone -> OuterVolume
>2507	Identifier	OuterVolume
>2508	MemberAccess	soundchannel -> m_Emitter . pCone
>2509	Identifier	pCone
>2510	PtrMemberAccess	soundchannel -> m_Emitter
>2511	Identifier	m_Emitter
>2512	Identifier	soundchannel
>2513	ExpressionStatement	 
>2514	AssignmentExpr	soundchannel -> m_Emitter . pCone -> InnerVolume = 0.0f
>2515	PrimaryExpression	0.0f
>2516	PtrMemberAccess	soundchannel -> m_Emitter . pCone -> InnerVolume
>2517	Identifier	InnerVolume
>2518	MemberAccess	soundchannel -> m_Emitter . pCone
>2519	Identifier	pCone
>2520	PtrMemberAccess	soundchannel -> m_Emitter
>2521	Identifier	m_Emitter
>2522	Identifier	soundchannel
>2523	ExpressionStatement	 
>2524	AssignmentExpr	soundchannel -> m_Emitter . pCone -> OuterAngle = 0.0f
>2525	PrimaryExpression	0.0f
>2526	PtrMemberAccess	soundchannel -> m_Emitter . pCone -> OuterAngle
>2527	Identifier	OuterAngle
>2528	MemberAccess	soundchannel -> m_Emitter . pCone
>2529	Identifier	pCone
>2530	PtrMemberAccess	soundchannel -> m_Emitter
>2531	Identifier	m_Emitter
>2532	Identifier	soundchannel
>2533	ExpressionStatement	 
>2534	AssignmentExpr	soundchannel -> m_Emitter . pCone -> InnerAngle = 0.0f
>2535	PrimaryExpression	0.0f
>2536	PtrMemberAccess	soundchannel -> m_Emitter . pCone -> InnerAngle
>2537	Identifier	InnerAngle
>2538	MemberAccess	soundchannel -> m_Emitter . pCone
>2539	Identifier	pCone
>2540	PtrMemberAccess	soundchannel -> m_Emitter
>2541	Identifier	m_Emitter
>2542	Identifier	soundchannel
>2543	ExpressionStatement	 
>2544	AssignmentExpr	soundchannel -> m_Emitter . pCone = & ( soundchannel -> m_Cone )
>2545	UnaryOp	& ( soundchannel -> m_Cone )
>2546	PtrMemberAccess	soundchannel -> m_Cone
>2547	Identifier	m_Cone
>2548	Identifier	soundchannel
>2549	UnaryOperator	&
>2550	MemberAccess	soundchannel -> m_Emitter . pCone
>2551	Identifier	pCone
>2552	PtrMemberAccess	soundchannel -> m_Emitter
>2553	Identifier	m_Emitter
>2554	Identifier	soundchannel
>2555	ExpressionStatement	 
>2556	AssignmentExpr	soundchannel -> m_Emitter . Velocity = ZeroVector
>2557	Identifier	ZeroVector
>2558	MemberAccess	soundchannel -> m_Emitter . Velocity
>2559	Identifier	Velocity
>2560	PtrMemberAccess	soundchannel -> m_Emitter
>2561	Identifier	m_Emitter
>2562	Identifier	soundchannel
>2563	ExpressionStatement	 
>2564	AssignmentExpr	soundchannel -> m_Emitter . Position = ZeroVector
>2565	Identifier	ZeroVector
>2566	MemberAccess	soundchannel -> m_Emitter . Position
>2567	Identifier	Position
>2568	PtrMemberAccess	soundchannel -> m_Emitter
>2569	Identifier	m_Emitter
>2570	Identifier	soundchannel
>2571	ExpressionStatement	 
>2572	AssignmentExpr	soundchannel -> m_Emitter . OrientTop . z = 0.0f
>2573	PrimaryExpression	0.0f
>2574	MemberAccess	soundchannel -> m_Emitter . OrientTop . z
>2575	Identifier	z
>2576	MemberAccess	soundchannel -> m_Emitter . OrientTop
>2577	Identifier	OrientTop
>2578	PtrMemberAccess	soundchannel -> m_Emitter
>2579	Identifier	m_Emitter
>2580	Identifier	soundchannel
>2581	ExpressionStatement	 
>2582	AssignmentExpr	soundchannel -> m_Emitter . OrientTop . y = 1.0f
>2583	PrimaryExpression	1.0f
>2584	MemberAccess	soundchannel -> m_Emitter . OrientTop . y
>2585	Identifier	y
>2586	MemberAccess	soundchannel -> m_Emitter . OrientTop
>2587	Identifier	OrientTop
>2588	PtrMemberAccess	soundchannel -> m_Emitter
>2589	Identifier	m_Emitter
>2590	Identifier	soundchannel
>2591	ExpressionStatement	 
>2592	AssignmentExpr	soundchannel -> m_Emitter . OrientTop . x = 0.0f
>2593	PrimaryExpression	0.0f
>2594	MemberAccess	soundchannel -> m_Emitter . OrientTop . x
>2595	Identifier	x
>2596	MemberAccess	soundchannel -> m_Emitter . OrientTop
>2597	Identifier	OrientTop
>2598	PtrMemberAccess	soundchannel -> m_Emitter
>2599	Identifier	m_Emitter
>2600	Identifier	soundchannel
>2601	ExpressionStatement	 
>2602	AssignmentExpr	soundchannel -> m_Emitter . OrientFront . z = 1.0f
>2603	PrimaryExpression	1.0f
>2604	MemberAccess	soundchannel -> m_Emitter . OrientFront . z
>2605	Identifier	z
>2606	MemberAccess	soundchannel -> m_Emitter . OrientFront
>2607	Identifier	OrientFront
>2608	PtrMemberAccess	soundchannel -> m_Emitter
>2609	Identifier	m_Emitter
>2610	Identifier	soundchannel
>2611	ExpressionStatement	 
>2612	AssignmentExpr	soundchannel -> m_Emitter . OrientFront . y = 0.0f
>2613	PrimaryExpression	0.0f
>2614	MemberAccess	soundchannel -> m_Emitter . OrientFront . y
>2615	Identifier	y
>2616	MemberAccess	soundchannel -> m_Emitter . OrientFront
>2617	Identifier	OrientFront
>2618	PtrMemberAccess	soundchannel -> m_Emitter
>2619	Identifier	m_Emitter
>2620	Identifier	soundchannel
>2621	ExpressionStatement	 
>2622	AssignmentExpr	soundchannel -> m_Emitter . OrientFront . x = 0.0f
>2623	PrimaryExpression	0.0f
>2624	MemberAccess	soundchannel -> m_Emitter . OrientFront . x
>2625	Identifier	x
>2626	MemberAccess	soundchannel -> m_Emitter . OrientFront
>2627	Identifier	OrientFront
>2628	PtrMemberAccess	soundchannel -> m_Emitter
>2629	Identifier	m_Emitter
>2630	Identifier	soundchannel
>2631	IdentifierDeclStatement	 
>2632	IdentifierDecl	ZeroVector = { 0.0f , 0.0f , 0.0f }
>2633	AssignmentExpr	ZeroVector = { 0.0f , 0.0f , 0.0f }
>2634	InitializerList	0.0f
>2635	PrimaryExpression	0.0f
>2636	PrimaryExpression	0.0f
>2637	PrimaryExpression	0.0f
>2638	Identifier	ZeroVector
>2639	Identifier	ZeroVector
>2640	IdentifierDeclType	X3DAUDIO_VECTOR
>2641	IdentifierDeclStatement	 
>2642	IdentifierDecl	* soundchannel = & activeSounds [ channel ]
>2643	AssignmentExpr	* soundchannel = & activeSounds [ channel ]
>2644	UnaryOp	& activeSounds [ channel ]
>2645	ArrayIndexing	activeSounds [ channel ]
>2646	Identifier	channel
>2647	Identifier	activeSounds
>2648	UnaryOperator	&
>2649	Identifier	soundchannel
>2650	Identifier	soundchannel
>2651	IdentifierDeclType	activeSound_t *
>2718	FunctionDef	I_InitSound ()
>2719	ParameterList	 
>2720	ReturnType	void
>2721	CompoundStatement	 
>2722	IfStatement	if ( S_initialized == 0 )
>2723	CompoundStatement	 
>2724	ExpressionStatement	 
>2725	AssignmentExpr	S_initialized = 1
>2726	PrimaryExpression	1
>2727	Identifier	S_initialized
>2728	ForStatement	for ( i = 1 ; i < NUMSFX ; i ++ )
>2729	CompoundStatement	 
>2730	IfStatement	if ( ! S_sfx [ i ] . link )
>2731	ElseStatement	else
>2732	CompoundStatement	 
>2733	ExpressionStatement	 
>2734	AssignmentExpr	lengths [ i ] = lengths [ ( S_sfx [ i ] . link - S_sfx ) / sizeof ( sfxinfo_t ) ]
>2735	ArrayIndexing	lengths [ ( S_sfx [ i ] . link - S_sfx ) / sizeof ( sfxinfo_t ) ]
>2736	MultiplicativeExpression	( S_sfx [ i ] . link - S_sfx ) / sizeof ( sfxinfo_t )
>2737	SizeofExpr	sizeof ( sfxinfo_t )
>2738	SizeofOperand	sfxinfo_t
>2739	Sizeof	sizeof
>2740	AdditiveExpression	S_sfx [ i ] . link - S_sfx
>2741	Identifier	S_sfx
>2742	MemberAccess	S_sfx [ i ] . link
>2743	Identifier	link
>2744	ArrayIndexing	S_sfx [ i ]
>2745	Identifier	i
>2746	Identifier	S_sfx
>2747	Identifier	lengths
>2748	ArrayIndexing	lengths [ i ]
>2749	Identifier	i
>2750	Identifier	lengths
>2751	ExpressionStatement	 
>2752	AssignmentExpr	S_sfx [ i ] . data = S_sfx [ i ] . link -> data
>2753	PtrMemberAccess	S_sfx [ i ] . link -> data
>2754	Identifier	data
>2755	MemberAccess	S_sfx [ i ] . link
>2756	Identifier	link
>2757	ArrayIndexing	S_sfx [ i ]
>2758	Identifier	i
>2759	Identifier	S_sfx
>2760	MemberAccess	S_sfx [ i ] . data
>2761	Identifier	data
>2762	ArrayIndexing	S_sfx [ i ]
>2763	Identifier	i
>2764	Identifier	S_sfx
>2765	CompoundStatement	 
>2766	ExpressionStatement	 
>2767	AssignmentExpr	S_sfx [ i ] . data = getsfx ( S_sfx [ i ] . name , & lengths [ i ] )
>2768	CallExpression	getsfx ( S_sfx [ i ] . name , & lengths [ i ] )
>2769	ArgumentList	S_sfx [ i ] . name
>2770	Argument	& lengths [ i ]
>2771	UnaryOp	& lengths [ i ]
>2772	ArrayIndexing	lengths [ i ]
>2773	Identifier	i
>2774	Identifier	lengths
>2775	UnaryOperator	&
>2776	Argument	S_sfx [ i ] . name
>2777	MemberAccess	S_sfx [ i ] . name
>2778	Identifier	name
>2779	ArrayIndexing	S_sfx [ i ]
>2780	Identifier	i
>2781	Identifier	S_sfx
>2782	Callee	getsfx
>2783	Identifier	getsfx
>2784	MemberAccess	S_sfx [ i ] . data
>2785	Identifier	data
>2786	ArrayIndexing	S_sfx [ i ]
>2787	Identifier	i
>2788	Identifier	S_sfx
>2789	Condition	 
>2790	UnaryOp	! S_sfx [ i ] . link
>2791	MemberAccess	S_sfx [ i ] . link
>2792	Identifier	link
>2793	ArrayIndexing	S_sfx [ i ]
>2794	Identifier	i
>2795	Identifier	S_sfx
>2796	UnaryOperator	!
>2797	IncDecOp	 
>2798	IncDec	++
>2799	Identifier	i
>2800	Condition	 
>2801	RelationalExpression	i < NUMSFX
>2802	Identifier	NUMSFX
>2803	Identifier	i
>2804	ForInit	 
>2805	AssignmentExpr	i = 1
>2806	PrimaryExpression	1
>2807	Identifier	i
>2808	ExpressionStatement	 
>2809	AssignmentExpr	doom_Listener . Velocity = ZeroVector
>2810	Identifier	ZeroVector
>2811	MemberAccess	doom_Listener . Velocity
>2812	Identifier	Velocity
>2813	Identifier	doom_Listener
>2814	ExpressionStatement	 
>2815	AssignmentExpr	doom_Listener . Position = ZeroVector
>2816	Identifier	ZeroVector
>2817	MemberAccess	doom_Listener . Position
>2818	Identifier	Position
>2819	Identifier	doom_Listener
>2820	ExpressionStatement	 
>2821	AssignmentExpr	doom_Listener . OrientTop . z = 0.0f
>2822	PrimaryExpression	0.0f
>2823	MemberAccess	doom_Listener . OrientTop . z
>2824	Identifier	z
>2825	MemberAccess	doom_Listener . OrientTop
>2826	Identifier	OrientTop
>2827	Identifier	doom_Listener
>2828	ExpressionStatement	 
>2829	AssignmentExpr	doom_Listener . OrientTop . y = 1.0f
>2830	PrimaryExpression	1.0f
>2831	MemberAccess	doom_Listener . OrientTop . y
>2832	Identifier	y
>2833	MemberAccess	doom_Listener . OrientTop
>2834	Identifier	OrientTop
>2835	Identifier	doom_Listener
>2836	ExpressionStatement	 
>2837	AssignmentExpr	doom_Listener . OrientTop . x = 0.0f
>2838	PrimaryExpression	0.0f
>2839	MemberAccess	doom_Listener . OrientTop . x
>2840	Identifier	x
>2841	MemberAccess	doom_Listener . OrientTop
>2842	Identifier	OrientTop
>2843	Identifier	doom_Listener
>2844	ExpressionStatement	 
>2845	AssignmentExpr	doom_Listener . OrientFront . z = 1.0f
>2846	PrimaryExpression	1.0f
>2847	MemberAccess	doom_Listener . OrientFront . z
>2848	Identifier	z
>2849	MemberAccess	doom_Listener . OrientFront
>2850	Identifier	OrientFront
>2851	Identifier	doom_Listener
>2852	ExpressionStatement	 
>2853	AssignmentExpr	doom_Listener . OrientFront . y = 0.0f
>2854	PrimaryExpression	0.0f
>2855	MemberAccess	doom_Listener . OrientFront . y
>2856	Identifier	y
>2857	MemberAccess	doom_Listener . OrientFront
>2858	Identifier	OrientFront
>2859	Identifier	doom_Listener
>2860	ExpressionStatement	 
>2861	AssignmentExpr	doom_Listener . OrientFront . x = 0.0f
>2862	PrimaryExpression	0.0f
>2863	MemberAccess	doom_Listener . OrientFront . x
>2864	Identifier	x
>2865	MemberAccess	doom_Listener . OrientFront
>2866	Identifier	OrientFront
>2867	Identifier	doom_Listener
>2868	IdentifierDeclStatement	 
>2869	IdentifierDecl	ZeroVector = { 0.0f , 0.0f , 0.0f }
>2870	AssignmentExpr	ZeroVector = { 0.0f , 0.0f , 0.0f }
>2871	InitializerList	0.0f
>2872	PrimaryExpression	0.0f
>2873	PrimaryExpression	0.0f
>2874	PrimaryExpression	0.0f
>2875	Identifier	ZeroVector
>2876	Identifier	ZeroVector
>2877	IdentifierDeclType	X3DAUDIO_VECTOR
>2878	IdentifierDeclStatement	 
>2879	IdentifierDecl	i
>2880	Identifier	i
>2881	IdentifierDeclType	int
>2882	Condition	 
>2883	EqualityExpression	S_initialized == 0
>2884	PrimaryExpression	0
>2885	Identifier	S_initialized
>2919	FunctionDef	I_SubmitSound ()
>2920	ParameterList	 
>2921	ReturnType	void
>2922	CompoundStatement	 
>2923	IfStatement	if ( DoomLib 
>2924	CompoundStatement	 
>2925	ExpressionStatement	 
>2926	CallExpression	I_UpdateMusic ( )
>2927	ArgumentList	 
>2928	Callee	I_UpdateMusic
>2929	Identifier	I_UpdateMusic
>2930	ExpressionStatement	 
>2931	CallExpression	I_UpdateSound ( )
>2932	ArgumentList	 
>2933	Callee	I_UpdateSound
>2934	Identifier	I_UpdateSound
>2935	Condition	 
>2936	EqualityExpression	DoomLib 
>2937	PrimaryExpression	0
>2938	CallExpression	DoomLib 
>2939	ArgumentList	 
>2940	Callee	DoomLib 
>2941	Identifier	DoomLib 
>2946	FunctionDef	I_SetMusicVolume (int volume)
>2947	ParameterList	int volume
>2948	Parameter	 
>2949	Identifier	volume
>2950	ParameterType	int
>2951	ReturnType	void
>2952	CompoundStatement	 
>2953	ExpressionStatement	 
>2954	AssignmentExpr	x_MusicVolume = ( float ) volume / 15.f
>2955	MultiplicativeExpression	( float ) volume / 15.f
>2956	PrimaryExpression	15.f
>2957	CastExpression	( float ) volume
>2958	Identifier	volume
>2959	CastTarget	float
>2960	Identifier	x_MusicVolume
>2966	FunctionDef	I_InitMusic ()
>2967	ParameterList	 
>2968	ReturnType	void
>2969	CompoundStatement	 
>2970	IfStatement	if ( ! Music_initialized )
>2971	CompoundStatement	 
>2972	ExpressionStatement	 
>2973	AssignmentExpr	Music_initialized = true
>2974	Identifier	true
>2975	Identifier	Music_initialized
>2976	ExpressionStatement	 
>2977	CallExpression	soundSystemLocal . hardware . GetIXAudio2 ( ) -> CreateSourceVoice ( & pMusicSourceVoice , ( WAVEFORMATEX * ) & \
>2978	ArgumentList	& pMusicSourceVoice
>2979	Argument	XAUDIO2_VOICE_MUSIC
>2980	Identifier	XAUDIO2_VOICE_MUSIC
>2981	Argument	( WAVEFORMATEX * ) & voiceFormat
>2982	CastExpression	( WAVEFORMATEX * ) & voiceFormat
>2983	UnaryOp	& voiceFormat
>2984	Identifier	voiceFormat
>2985	UnaryOperator	&
>2986	CastTarget	WAVEFORMATEX *
>2987	Argument	& pMusicSourceVoice
>2988	UnaryOp	& pMusicSourceVoice
>2989	Identifier	pMusicSourceVoice
>2990	UnaryOperator	&
>2991	Callee	soundSystemLocal . hardware . GetIXAudio2 ( ) -> CreateSourceVoice
>2992	PtrMemberAccess	soundSystemLocal . hardware . GetIXAudio2 ( ) -> CreateSourceVoice
>2993	Identifier	CreateSourceVoice
>2994	CallExpression	soundSystemLocal . hardware . GetIXAudio2 ( )
>2995	ArgumentList	 
>2996	Callee	soundSystemLocal . hardware . GetIXAudio2
>2997	MemberAccess	soundSystemLocal . hardware . GetIXAudio2
>2998	Identifier	GetIXAudio2
>2999	MemberAccess	soundSystemLocal . hardware
>3000	Identifier	hardware
>3001	Identifier	soundSystemLocal
>3002	ExpressionStatement	 
>3003	AssignmentExpr	voiceFormat . cbSize = 0
>3004	PrimaryExpression	0
>3005	MemberAccess	voiceFormat . cbSize
>3006	Identifier	cbSize
>3007	Identifier	voiceFormat
>3008	ExpressionStatement	 
>3009	AssignmentExpr	voiceFormat . wBitsPerSample = MIDI_FORMAT_BYTES * 8
>3010	MultiplicativeExpression	MIDI_FORMAT_BYTES * 8
>3011	PrimaryExpression	8
>3012	Identifier	MIDI_FORMAT_BYTES
>3013	MemberAccess	voiceFormat . wBitsPerSample
>3014	Identifier	wBitsPerSample
>3015	Identifier	voiceFormat
>3016	ExpressionStatement	 
>3017	AssignmentExpr	voiceFormat . nBlockAlign = MIDI_FORMAT_BYTES * 2
>3018	MultiplicativeExpression	MIDI_FORMAT_BYTES * 2
>3019	PrimaryExpression	2
>3020	Identifier	MIDI_FORMAT_BYTES
>3021	MemberAccess	voiceFormat . nBlockAlign
>3022	Identifier	nBlockAlign
>3023	Identifier	voiceFormat
>3024	ExpressionStatement	 
>3025	AssignmentExpr	voiceFormat . nAvgBytesPerSec = MIDI_RATE * MIDI_FORMAT_BYTES * 2
>3026	MultiplicativeExpression	MIDI_RATE * MIDI_FORMAT_BYTES * 2
>3027	MultiplicativeExpression	MIDI_FORMAT_BYTES * 2
>3028	PrimaryExpression	2
>3029	Identifier	MIDI_FORMAT_BYTES
>3030	Identifier	MIDI_RATE
>3031	MemberAccess	voiceFormat . nAvgBytesPerSec
>3032	Identifier	nAvgBytesPerSec
>3033	Identifier	voiceFormat
>3034	ExpressionStatement	 
>3035	AssignmentExpr	voiceFormat . nSamplesPerSec = MIDI_RATE
>3036	Identifier	MIDI_RATE
>3037	MemberAccess	voiceFormat . nSamplesPerSec
>3038	Identifier	nSamplesPerSec
>3039	Identifier	voiceFormat
>3040	ExpressionStatement	 
>3041	AssignmentExpr	voiceFormat . nChannels = 2
>3042	PrimaryExpression	2
>3043	MemberAccess	voiceFormat . nChannels
>3044	Identifier	nChannels
>3045	Identifier	voiceFormat
>3046	ExpressionStatement	 
>3047	AssignmentExpr	voiceFormat . wFormatTag = WAVE_FORMAT_PCM
>3048	Identifier	WAVE_FORMAT_PCM
>3049	MemberAccess	voiceFormat . wFormatTag
>3050	Identifier	wFormatTag
>3051	Identifier	voiceFormat
>3052	IdentifierDeclStatement	 
>3053	IdentifierDecl	voiceFormat = { 0 }
>3054	AssignmentExpr	voiceFormat = { 0 }
>3055	InitializerList	0
>3056	PrimaryExpression	0
>3057	Identifier	voiceFormat
>3058	Identifier	voiceFormat
>3059	IdentifierDeclType	WAVEFORMATEX
>3060	ExpressionStatement	 
>3061	AssignmentExpr	musicReady = false
>3062	Identifier	false
>3063	Identifier	musicReady
>3064	ExpressionStatement	 
>3065	AssignmentExpr	waitingForMusic = false
>3066	Identifier	false
>3067	Identifier	waitingForMusic
>3068	ExpressionStatement	 
>3069	AssignmentExpr	totalBufferSize = 0
>3070	PrimaryExpression	0
>3071	Identifier	totalBufferSize
>3072	ExpressionStatement	 
>3073	AssignmentExpr	musicBuffer = NULL
>3074	Identifier	NULL
>3075	Identifier	musicBuffer
>3076	ExpressionStatement	 
>3077	AssignmentExpr	hMusicThread = NULL
>3078	Identifier	NULL
>3079	Identifier	hMusicThread
>3080	ExpressionStatement	 
>3081	CallExpression	Timidity_Init ( MIDI_RATE , MIDI_FORMAT , MIDI_CHANNELS , MIDI_RATE , \"classicmusic/gravis.cfg\" )
>3082	ArgumentList	MIDI_RATE
>3083	Argument	\"classicmusic/gravis.cfg\"
>3084	PrimaryExpression	\"classicmusic/gravis.cfg\"
>3085	Argument	MIDI_RATE
>3086	Identifier	MIDI_RATE
>3087	Argument	MIDI_CHANNELS
>3088	Identifier	MIDI_CHANNELS
>3089	Argument	MIDI_FORMAT
>3090	Identifier	MIDI_FORMAT
>3091	Argument	MIDI_RATE
>3092	Identifier	MIDI_RATE
>3093	Callee	Timidity_Init
>3094	Identifier	Timidity_Init
>3095	Condition	 
>3096	UnaryOp	! Music_initialized
>3097	Identifier	Music_initialized
>3098	UnaryOperator	!
>3130	FunctionDef	I_ShutdownMusic ()
>3131	ParameterList	 
>3132	ReturnType	void
>3133	CompoundStatement	 
>3134	ExpressionStatement	 
>3135	AssignmentExpr	Music_initialized = false
>3136	Identifier	false
>3137	Identifier	Music_initialized
>3138	ExpressionStatement	 
>3139	AssignmentExpr	musicReady = false
>3140	Identifier	false
>3141	Identifier	musicReady
>3142	ExpressionStatement	 
>3143	AssignmentExpr	waitingForMusic = false
>3144	Identifier	false
>3145	Identifier	waitingForMusic
>3146	ExpressionStatement	 
>3147	AssignmentExpr	totalBufferSize = 0
>3148	PrimaryExpression	0
>3149	Identifier	totalBufferSize
>3150	ExpressionStatement	 
>3151	AssignmentExpr	musicBuffer = NULL
>3152	Identifier	NULL
>3153	Identifier	musicBuffer
>3154	ExpressionStatement	 
>3155	AssignmentExpr	hMusicThread = NULL
>3156	Identifier	NULL
>3157	Identifier	hMusicThread
>3158	ExpressionStatement	 
>3159	AssignmentExpr	pMusicSourceVoice = NULL
>3160	Identifier	NULL
>3161	Identifier	pMusicSourceVoice
>3162	IfStatement	if ( Music_initialized )
>3163	CompoundStatement	 
>3164	ExpressionStatement	 
>3165	CallExpression	Timidity_Shutdown ( )
>3166	ArgumentList	 
>3167	Callee	Timidity_Shutdown
>3168	Identifier	Timidity_Shutdown
>3169	IfStatement	if ( musicBuffer )
>3170	CompoundStatement	 
>3171	ExpressionStatement	 
>3172	CallExpression	free ( musicBuffer )
>3173	ArgumentList	musicBuffer
>3174	Argument	musicBuffer
>3175	Identifier	musicBuffer
>3176	Callee	free
>3177	Identifier	free
>3178	Condition	 
>3179	Identifier	musicBuffer
>3180	IfStatement	if ( hMusicThread )
>3181	CompoundStatement	 
>3182	ExpressionStatement	 
>3183	CallExpression	CloseHandle ( hMusicThread )
>3184	ArgumentList	hMusicThread
>3185	Argument	hMusicThread
>3186	Identifier	hMusicThread
>3187	Callee	CloseHandle
>3188	Identifier	CloseHandle
>3189	DoStatement	do
>3190	Condition	 
>3191	EqualityExpression	rc == STILL_ACTIVE
>3192	Identifier	STILL_ACTIVE
>3193	Identifier	rc
>3194	CompoundStatement	 
>3195	IfStatement	if ( rc == STILL_ACTIVE )
>3196	CompoundStatement	 
>3197	ExpressionStatement	 
>3198	CallExpression	Sleep ( 1 )
>3199	ArgumentList	1
>3200	Argument	1
>3201	PrimaryExpression	1
>3202	Callee	Sleep
>3203	Identifier	Sleep
>3204	Condition	 
>3205	EqualityExpression	rc == STILL_ACTIVE
>3206	Identifier	STILL_ACTIVE
>3207	Identifier	rc
>3208	ExpressionStatement	 
>3209	CallExpression	GetExitCodeThread ( hMusicThread , & rc )
>3210	ArgumentList	hMusicThread
>3211	Argument	& rc
>3212	UnaryOp	& rc
>3213	Identifier	rc
>3214	UnaryOperator	&
>3215	Argument	hMusicThread
>3216	Identifier	hMusicThread
>3217	Callee	GetExitCodeThread
>3218	Identifier	GetExitCodeThread
>3219	IdentifierDeclStatement	 
>3220	IdentifierDecl	rc
>3221	Identifier	rc
>3222	IdentifierDeclType	DWORD
>3223	Condition	 
>3224	Identifier	hMusicThread
>3225	IfStatement	if ( pMusicSourceVoice )
>3226	CompoundStatement	 
>3227	ExpressionStatement	 
>3228	AssignmentExpr	pMusicSourceVoice = NULL
>3229	Identifier	NULL
>3230	Identifier	pMusicSourceVoice
>3231	ExpressionStatement	 
>3232	CallExpression	pMusicSourceVoice -> DestroyVoice ( )
>3233	ArgumentList	 
>3234	Callee	pMusicSourceVoice -> DestroyVoice
>3235	PtrMemberAccess	pMusicSourceVoice -> DestroyVoice
>3236	Identifier	DestroyVoice
>3237	Identifier	pMusicSourceVoice
>3238	ExpressionStatement	 
>3239	CallExpression	pMusicSourceVoice -> FlushSourceBuffers ( )
>3240	ArgumentList	 
>3241	Callee	pMusicSourceVoice -> FlushSourceBuffers
>3242	PtrMemberAccess	pMusicSourceVoice -> FlushSourceBuffers
>3243	Identifier	FlushSourceBuffers
>3244	Identifier	pMusicSourceVoice
>3245	ExpressionStatement	 
>3246	CallExpression	pMusicSourceVoice -> Stop ( )
>3247	ArgumentList	 
>3248	Callee	pMusicSourceVoice -> Stop
>3249	PtrMemberAccess	pMusicSourceVoice -> Stop
>3250	Identifier	Stop
>3251	Identifier	pMusicSourceVoice
>3252	Condition	 
>3253	Identifier	pMusicSourceVoice
>3254	Condition	 
>3255	Identifier	Music_initialized
>3256	ExpressionStatement	 
>3257	CallExpression	I_StopSong ( 0 )
>3258	ArgumentList	0
>3259	Argument	0
>3260	PrimaryExpression	0
>3261	Callee	I_StopSong
>3262	Identifier	I_StopSong
>3284	FunctionDef	I_LoadSong (LPVOID songname)
>3285	ParameterList	LPVOID songname
>3286	Parameter	 
>3287	Identifier	songname
>3288	ParameterType	LPVOID
>3289	ReturnType	DWORD WINAPI
>3290	CompoundStatement	 
>3291	ReturnStatement	 
>3292	Identifier	ERROR_SUCCESS
>3293	ExpressionStatement	 
>3294	AssignmentExpr	musicReady = true
>3295	Identifier	true
>3296	Identifier	musicReady
>3297	IfStatement	if ( doomMusic )
>3298	CompoundStatement	 
>3299	ExpressionStatement	 
>3300	CallExpression	Timidity_FreeSong ( doomMusic )
>3301	ArgumentList	doomMusic
>3302	Argument	doomMusic
>3303	Identifier	doomMusic
>3304	Callee	Timidity_FreeSong
>3305	Identifier	Timidity_FreeSong
>3306	ExpressionStatement	 
>3307	CallExpression	Timidity_Stop ( )
>3308	ArgumentList	 
>3309	Callee	Timidity_Stop
>3310	Identifier	Timidity_Stop
>3311	DoStatement	do
>3312	Condition	 
>3313	EqualityExpression	rc != RC_TUNE_END
>3314	Identifier	RC_TUNE_END
>3315	Identifier	rc
>3316	CompoundStatement	 
>3317	ExpressionStatement	 
>3318	AssignmentExpr	offset += num_bytes
>3319	Identifier	num_bytes
>3320	Identifier	offset
>3321	ExpressionStatement	 
>3322	AssignmentExpr	rc = Timidity_PlaySome ( musicBuffer + offset , MIDI_RATE , & num_bytes )
>3323	CallExpression	Timidity_PlaySome ( musicBuffer + offset , MIDI_RATE , & num_bytes )
>3324	ArgumentList	musicBuffer + offset
>3325	Argument	& num_bytes
>3326	UnaryOp	& num_bytes
>3327	Identifier	num_bytes
>3328	UnaryOperator	&
>3329	Argument	MIDI_RATE
>3330	Identifier	MIDI_RATE
>3331	Argument	musicBuffer + offset
>3332	AdditiveExpression	musicBuffer + offset
>3333	Identifier	offset
>3334	Identifier	musicBuffer
>3335	Callee	Timidity_PlaySome
>3336	Identifier	Timidity_PlaySome
>3337	Identifier	rc
>3338	IdentifierDeclStatement	 
>3339	IdentifierDecl	offset = 0
>3340	AssignmentExpr	offset = 0
>3341	PrimaryExpression	0
>3342	Identifier	offset
>3343	Identifier	offset
>3344	IdentifierDeclType	int
>3345	IdentifierDeclStatement	 
>3346	IdentifierDecl	num_bytes = 0
>3347	AssignmentExpr	num_bytes = 0
>3348	PrimaryExpression	0
>3349	Identifier	num_bytes
>3350	Identifier	num_bytes
>3351	IdentifierDeclType	int
>3352	IdentifierDeclStatement	 
>3353	IdentifierDecl	rc = RC_NO_RETURN_VALUE
>3354	AssignmentExpr	rc = RC_NO_RETURN_VALUE
>3355	Identifier	RC_NO_RETURN_VALUE
>3356	Identifier	RC_NO_RETURN_VALUE
>3357	Identifier	rc
>3358	IdentifierDeclType	int
>3359	ExpressionStatement	 
>3360	CallExpression	Timidity_Start ( doomMusic )
>3361	ArgumentList	doomMusic
>3362	Argument	doomMusic
>3363	Identifier	doomMusic
>3364	Callee	Timidity_Start
>3365	Identifier	Timidity_Start
>3366	ExpressionStatement	 
>3367	AssignmentExpr	totalBufferSize = doomMusic -> samples * MIDI_CHANNELS * MIDI_FORMAT_BYTES
>3368	MultiplicativeExpression	doomMusic -> samples * MIDI_CHANNELS * MIDI_FORMAT_BYTES
>3369	MultiplicativeExpression	MIDI_CHANNELS * MIDI_FORMAT_BYTES
>3370	Identifier	MIDI_FORMAT_BYTES
>3371	Identifier	MIDI_CHANNELS
>3372	PtrMemberAccess	doomMusic -> samples
>3373	Identifier	samples
>3374	Identifier	doomMusic
>3375	Identifier	totalBufferSize
>3376	ExpressionStatement	 
>3377	AssignmentExpr	musicBuffer = ( byte * ) malloc ( MIDI_CHANNELS * MIDI_FORMAT_BYTES * doomMusic -> samples )
>3378	CastExpression	( byte * ) malloc ( MIDI_CHANNELS * MIDI_FORMAT_BYTES * doomMusic -> samples )
>3379	CallExpression	malloc ( MIDI_CHANNELS * MIDI_FORMAT_BYTES * doomMusic -> samples )
>3380	ArgumentList	MIDI_CHANNELS * MIDI_FORMAT_BYTES * doomMusic -> samples
>3381	Argument	MIDI_CHANNELS * MIDI_FORMAT_BYTES * doomMusic -> samples
>3382	MultiplicativeExpression	MIDI_CHANNELS * MIDI_FORMAT_BYTES * doomMusic -> samples
>3383	MultiplicativeExpression	MIDI_FORMAT_BYTES * doomMusic -> samples
>3384	PtrMemberAccess	doomMusic -> samples
>3385	Identifier	samples
>3386	Identifier	doomMusic
>3387	Identifier	MIDI_FORMAT_BYTES
>3388	Identifier	MIDI_CHANNELS
>3389	Callee	malloc
>3390	Identifier	malloc
>3391	CastTarget	byte *
>3392	Identifier	musicBuffer
>3393	Condition	 
>3394	Identifier	doomMusic
>3395	ExpressionStatement	 
>3396	AssignmentExpr	doomMusic = Timidity_LoadSongMem ( midiConversionBuffer , length )
>3397	CallExpression	Timidity_LoadSongMem ( midiConversionBuffer , length )
>3398	ArgumentList	midiConversionBuffer
>3399	Argument	length
>3400	Identifier	length
>3401	Argument	midiConversionBuffer
>3402	Identifier	midiConversionBuffer
>3403	Callee	Timidity_LoadSongMem
>3404	Identifier	Timidity_LoadSongMem
>3405	Identifier	doomMusic
>3406	ExpressionStatement	 
>3407	CallExpression	Mus2Midi ( musFile , midiConversionBuffer , & length )
>3408	ArgumentList	musFile
>3409	Argument	& length
>3410	UnaryOp	& length
>3411	Identifier	length
>3412	UnaryOperator	&
>3413	Argument	midiConversionBuffer
>3414	Identifier	midiConversionBuffer
>3415	Argument	musFile
>3416	Identifier	musFile
>3417	Callee	Mus2Midi
>3418	Identifier	Mus2Midi
>3419	IdentifierDeclStatement	 
>3420	IdentifierDecl	length = 0
>3421	AssignmentExpr	length = 0
>3422	PrimaryExpression	0
>3423	Identifier	length
>3424	Identifier	length
>3425	IdentifierDeclType	int
>3426	ExpressionStatement	 
>3427	CallExpression	W_CacheLumpName ( lumpName . c_str ( ) , PU_STATIC_SHARED )
>3428	ArgumentList	lumpName . c_str ( )
>3429	Argument	PU_STATIC_SHARED
>3430	Identifier	PU_STATIC_SHARED
>3431	Argument	lumpName . c_str ( )
>3432	CallExpression	lumpName . c_str ( )
>3433	ArgumentList	 
>3434	Callee	lumpName . c_str
>3435	MemberAccess	lumpName . c_str
>3436	Identifier	c_str
>3437	Identifier	lumpName
>3438	Callee	W_CacheLumpName
>3439	Identifier	W_CacheLumpName
>3440	Statement	 
>3441	Statement	 
>3442	Statement	 
>3443	Statement	 
>3444	Statement	 
>3445	Statement	 
>3446	Statement	 
>3447	Statement	 
>3448	Statement	 
>3449	Statement	 
>3450	Statement	 
>3451	ExpressionStatement	 
>3452	Identifier	songname
>3453	Statement	 
>3454	Statement	 
>3455	Statement	 
>3456	Statement	 
>3457	Statement	 
>3458	Statement	 
>3459	Statement	 
>3460	Statement	 
>3461	IdentifierDeclStatement	 
>3462	IdentifierDecl	lumpName = \"d_\"
>3463	AssignmentExpr	lumpName = \"d_\"
>3464	PrimaryExpression	\"d_\"
>3465	Identifier	lumpName
>3466	Identifier	lumpName
>3467	IdentifierDeclType	idStr
>3499	FunctionDef	I_PlaySong (const char * songname , int looping)
>3500	ParameterList	const char * songname , int looping
>3501	Parameter	 
>3502	Identifier	looping
>3503	ParameterType	int
>3504	Parameter	 
>3505	Identifier	songname
>3506	ParameterType	const char *
>3507	ReturnType	void
>3508	CompoundStatement	 
>3509	IfStatement	if ( DoomLib 
>3510	CompoundStatement	 
>3511	ExpressionStatement	 
>3512	AssignmentExpr	g -> mus_looping = looping
>3513	Identifier	looping
>3514	PtrMemberAccess	g -> mus_looping
>3515	Identifier	mus_looping
>3516	Identifier	g
>3517	Statement	 
>3518	Condition	 
>3519	RelationalExpression	DoomLib 
>3520	PrimaryExpression	0
>3521	CallExpression	DoomLib 
>3522	ArgumentList	 
>3523	Callee	DoomLib 
>3524	Identifier	DoomLib 
>3525	ExpressionStatement	 
>3526	AssignmentExpr	waitingForMusic = true
>3527	Identifier	true
>3528	Identifier	waitingForMusic
>3529	ExpressionStatement	 
>3530	CallExpression	I_LoadSong ( ( LPVOID ) songname )
>3531	ArgumentList	( LPVOID ) songname
>3532	Argument	( LPVOID ) songname
>3533	CastExpression	( LPVOID ) songname
>3534	Identifier	songname
>3535	CastTarget	LPVOID
>3536	Callee	I_LoadSong
>3537	Identifier	I_LoadSong
>3538	ExpressionStatement	 
>3539	AssignmentExpr	musicReady = false
>3540	Identifier	false
>3541	Identifier	musicReady
>3542	IfStatement	if ( musicBuffer != NULL )
>3543	CompoundStatement	 
>3544	ExpressionStatement	 
>3545	AssignmentExpr	musicBuffer = NULL
>3546	Identifier	NULL
>3547	Identifier	musicBuffer
>3548	ExpressionStatement	 
>3549	CallExpression	free ( musicBuffer )
>3550	ArgumentList	musicBuffer
>3551	Argument	musicBuffer
>3552	Identifier	musicBuffer
>3553	Callee	free
>3554	Identifier	free
>3555	Condition	 
>3556	EqualityExpression	musicBuffer != NULL
>3557	Identifier	NULL
>3558	Identifier	musicBuffer
>3559	WhileStatement	while ( ! isStopped )
>3560	CompoundStatement	 
>3561	IfStatement	if ( test . pCurrentBufferContext == NULL && test . BuffersQueued == 0 )
>3562	CompoundStatement	 
>3563	ExpressionStatement	 
>3564	AssignmentExpr	isStopped = true
>3565	Identifier	true
>3566	Identifier	isStopped
>3567	Condition	 
>3568	AndExpression	test . pCurrentBufferContext == NULL && test . BuffersQueued == 0
>3569	EqualityExpression	test . BuffersQueued == 0
>3570	PrimaryExpression	0
>3571	MemberAccess	test . BuffersQueued
>3572	Identifier	BuffersQueued
>3573	Identifier	test
>3574	EqualityExpression	test . pCurrentBufferContext == NULL
>3575	Identifier	NULL
>3576	MemberAccess	test . pCurrentBufferContext
>3577	Identifier	pCurrentBufferContext
>3578	Identifier	test
>3579	IfStatement	if ( pMusicSourceVoice != NULL )
>3580	CompoundStatement	 
>3581	ExpressionStatement	 
>3582	CallExpression	pMusicSourceVoice -> GetState ( & test )
>3583	ArgumentList	& test
>3584	Argument	& test
>3585	UnaryOp	& test
>3586	Identifier	test
>3587	UnaryOperator	&
>3588	Callee	pMusicSourceVoice -> GetState
>3589	PtrMemberAccess	pMusicSourceVoice -> GetState
>3590	Identifier	GetState
>3591	Identifier	pMusicSourceVoice
>3592	Condition	 
>3593	EqualityExpression	pMusicSourceVoice != NULL
>3594	Identifier	NULL
>3595	Identifier	pMusicSourceVoice
>3596	IdentifierDeclStatement	 
>3597	IdentifierDecl	test
>3598	Identifier	test
>3599	IdentifierDeclType	XAUDIO2_VOICE_STATE
>3600	Condition	 
>3601	UnaryOp	! isStopped
>3602	Identifier	isStopped
>3603	UnaryOperator	!
>3604	IdentifierDeclStatement	 
>3605	IdentifierDecl	d = 0
>3606	AssignmentExpr	d = 0
>3607	PrimaryExpression	0
>3608	Identifier	d
>3609	Identifier	d
>3610	IdentifierDeclType	int
>3611	IdentifierDeclStatement	 
>3612	IdentifierDecl	isStopped = false
>3613	AssignmentExpr	isStopped = false
>3614	Identifier	false
>3615	Identifier	false
>3616	Identifier	isStopped
>3617	IdentifierDeclType	bool
>3618	IfStatement	if ( pMusicSourceVoice != NULL )
>3619	CompoundStatement	 
>3620	ExpressionStatement	 
>3621	CallExpression	pMusicSourceVoice -> FlushSourceBuffers ( )
>3622	ArgumentList	 
>3623	Callee	pMusicSourceVoice -> FlushSourceBuffers
>3624	PtrMemberAccess	pMusicSourceVoice -> FlushSourceBuffers
>3625	Identifier	FlushSourceBuffers
>3626	Identifier	pMusicSourceVoice
>3627	ExpressionStatement	 
>3628	CallExpression	pMusicSourceVoice -> Stop ( )
>3629	ArgumentList	 
>3630	Callee	pMusicSourceVoice -> Stop
>3631	PtrMemberAccess	pMusicSourceVoice -> Stop
>3632	Identifier	Stop
>3633	Identifier	pMusicSourceVoice
>3634	Condition	 
>3635	EqualityExpression	pMusicSourceVoice != NULL
>3636	Identifier	NULL
>3637	Identifier	pMusicSourceVoice
>3638	IfStatement	if ( ! Music_initialized )
>3639	CompoundStatement	 
>3640	ReturnStatement	 
>3641	Condition	 
>3642	UnaryOp	! Music_initialized
>3643	Identifier	Music_initialized
>3644	UnaryOperator	!
>3668	FunctionDef	I_UpdateMusic ()
>3669	ParameterList	 
>3670	ReturnType	void
>3671	CompoundStatement	 
>3672	IfStatement	if ( pMusicSourceVoice != NULL )
>3673	CompoundStatement	 
>3674	ExpressionStatement	 
>3675	CallExpression	pMusicSourceVoice -> SetVolume ( x_MusicVolume * GLOBAL_VOLUME_MULTIPLIER )
>3676	ArgumentList	x_MusicVolume * GLOBAL_VOLUME_MULTIPLIER
>3677	Argument	x_MusicVolume * GLOBAL_VOLUME_MULTIPLIER
>3678	MultiplicativeExpression	x_MusicVolume * GLOBAL_VOLUME_MULTIPLIER
>3679	Identifier	GLOBAL_VOLUME_MULTIPLIER
>3680	Identifier	x_MusicVolume
>3681	Callee	pMusicSourceVoice -> SetVolume
>3682	PtrMemberAccess	pMusicSourceVoice -> SetVolume
>3683	Identifier	SetVolume
>3684	Identifier	pMusicSourceVoice
>3685	Condition	 
>3686	EqualityExpression	pMusicSourceVoice != NULL
>3687	Identifier	NULL
>3688	Identifier	pMusicSourceVoice
>3689	IfStatement	if ( waitingForMusic )
>3690	CompoundStatement	 
>3691	IfStatement	if ( musicReady && pMusicSourceVoice != NULL )
>3692	CompoundStatement	 
>3693	ExpressionStatement	 
>3694	AssignmentExpr	waitingForMusic = false
>3695	Identifier	false
>3696	Identifier	waitingForMusic
>3697	IfStatement	if ( musicBuffer )
>3698	CompoundStatement	 
>3699	IfStatement	if ( FAILED ( hr = pMusicSourceVoice -> Start ( 0 ) ) )
>3700	CompoundStatement	 
>3701	IdentifierDeclStatement	 
>3702	IdentifierDecl	fail = 1
>3703	AssignmentExpr	fail = 1
>3704	PrimaryExpression	1
>3705	Identifier	fail
>3706	Identifier	fail
>3707	IdentifierDeclType	int
>3708	Condition	 
>3709	CallExpression	FAILED ( hr = pMusicSourceVoice -> Start ( 0 ) )
>3710	ArgumentList	hr = pMusicSourceVoice -> Start ( 0 )
>3711	Argument	hr = pMusicSourceVoice -> Start ( 0 )
>3712	AssignmentExpr	hr = pMusicSourceVoice -> Start ( 0 )
>3713	CallExpression	pMusicSourceVoice -> Start ( 0 )
>3714	ArgumentList	0
>3715	Argument	0
>3716	PrimaryExpression	0
>3717	Callee	pMusicSourceVoice -> Start
>3718	PtrMemberAccess	pMusicSourceVoice -> Start
>3719	Identifier	Start
>3720	Identifier	pMusicSourceVoice
>3721	Identifier	hr
>3722	Callee	FAILED
>3723	Identifier	FAILED
>3724	IfStatement	if ( FAILED ( hr = pMusicSourceVoice -> SubmitSourceBuffer ( & Packet ) ) )
>3725	CompoundStatement	 
>3726	IdentifierDeclStatement	 
>3727	IdentifierDecl	fail = 1
>3728	AssignmentExpr	fail = 1
>3729	PrimaryExpression	1
>3730	Identifier	fail
>3731	Identifier	fail
>3732	IdentifierDeclType	int
>3733	Condition	 
>3734	CallExpression	FAILED ( hr = pMusicSourceVoice -> SubmitSourceBuffer ( & Packet ) )
>3735	ArgumentList	hr = pMusicSourceVoice -> SubmitSourceBuffer ( & Packet )
>3736	Argument	hr = pMusicSourceVoice -> SubmitSourceBuffer ( & Packet )
>3737	AssignmentExpr	hr = pMusicSourceVoice -> SubmitSourceBuffer ( & Packet )
>3738	CallExpression	pMusicSourceVoice -> SubmitSourceBuffer ( & Packet )
>3739	ArgumentList	& Packet
>3740	Argument	& Packet
>3741	UnaryOp	& Packet
>3742	Identifier	Packet
>3743	UnaryOperator	&
>3744	Callee	pMusicSourceVoice -> SubmitSourceBuffer
>3745	PtrMemberAccess	pMusicSourceVoice -> SubmitSourceBuffer
>3746	Identifier	SubmitSourceBuffer
>3747	Identifier	pMusicSourceVoice
>3748	Identifier	hr
>3749	Callee	FAILED
>3750	Identifier	FAILED
>3751	IdentifierDeclStatement	 
>3752	IdentifierDecl	hr
>3753	Identifier	hr
>3754	IdentifierDeclType	HRESULT
>3755	ExpressionStatement	 
>3756	AssignmentExpr	Packet . pContext = NULL
>3757	Identifier	NULL
>3758	MemberAccess	Packet . pContext
>3759	Identifier	pContext
>3760	Identifier	Packet
>3761	ExpressionStatement	 
>3762	ConditionalExpression	g -> mus_looping ? XAUDIO2_LOOP_INFINITE 
>3763	PrimaryExpression	0
>3764	Identifier	XAUDIO2_LOOP_INFINITE
>3765	Condition	g -> mus_looping
>3766	PtrMemberAccess	g -> mus_looping
>3767	Identifier	mus_looping
>3768	Identifier	g
>3769	Statement	 
>3770	Statement	 
>3771	Statement	 
>3772	Statement	 
>3773	Statement	 
>3774	ExpressionStatement	 
>3775	AssignmentExpr	Packet . LoopLength = 0
>3776	PrimaryExpression	0
>3777	MemberAccess	Packet . LoopLength
>3778	Identifier	LoopLength
>3779	Identifier	Packet
>3780	ExpressionStatement	 
>3781	AssignmentExpr	Packet . LoopBegin = 0
>3782	PrimaryExpression	0
>3783	MemberAccess	Packet . LoopBegin
>3784	Identifier	LoopBegin
>3785	Identifier	Packet
>3786	ExpressionStatement	 
>3787	AssignmentExpr	Packet . PlayLength = 0
>3788	PrimaryExpression	0
>3789	MemberAccess	Packet . PlayLength
>3790	Identifier	PlayLength
>3791	Identifier	Packet
>3792	ExpressionStatement	 
>3793	AssignmentExpr	Packet . PlayBegin = 0
>3794	PrimaryExpression	0
>3795	MemberAccess	Packet . PlayBegin
>3796	Identifier	PlayBegin
>3797	Identifier	Packet
>3798	ExpressionStatement	 
>3799	AssignmentExpr	Packet . pAudioData = ( BYTE * ) musicBuffer
>3800	CastExpression	( BYTE * ) musicBuffer
>3801	Identifier	musicBuffer
>3802	CastTarget	BYTE *
>3803	MemberAccess	Packet . pAudioData
>3804	Identifier	pAudioData
>3805	Identifier	Packet
>3806	ExpressionStatement	 
>3807	AssignmentExpr	Packet . AudioBytes = totalBufferSize
>3808	Identifier	totalBufferSize
>3809	MemberAccess	Packet . AudioBytes
>3810	Identifier	AudioBytes
>3811	Identifier	Packet
>3812	ExpressionStatement	 
>3813	AssignmentExpr	Packet . Flags = XAUDIO2_END_OF_STREAM
>3814	Identifier	XAUDIO2_END_OF_STREAM
>3815	MemberAccess	Packet . Flags
>3816	Identifier	Flags
>3817	Identifier	Packet
>3818	IdentifierDeclStatement	 
>3819	IdentifierDecl	Packet = { 0 }
>3820	AssignmentExpr	Packet = { 0 }
>3821	InitializerList	0
>3822	PrimaryExpression	0
>3823	Identifier	Packet
>3824	Identifier	Packet
>3825	IdentifierDeclType	XAUDIO2_BUFFER
>3826	Condition	 
>3827	Identifier	musicBuffer
>3828	Condition	 
>3829	AndExpression	musicReady && pMusicSourceVoice != NULL
>3830	EqualityExpression	pMusicSourceVoice != NULL
>3831	Identifier	NULL
>3832	Identifier	pMusicSourceVoice
>3833	Identifier	musicReady
>3834	Condition	 
>3835	Identifier	waitingForMusic
>3836	IfStatement	if ( ! Music_initialized )
>3837	CompoundStatement	 
>3838	ReturnStatement	 
>3839	Condition	 
>3840	UnaryOp	! Music_initialized
>3841	Identifier	Music_initialized
>3842	UnaryOperator	!
>3876	FunctionDef	I_PauseSong (int handle)
>3877	ParameterList	int handle
>3878	Parameter	 
>3879	Identifier	handle
>3880	ParameterType	int
>3881	ReturnType	void
>3882	CompoundStatement	 
>3883	IfStatement	if ( pMusicSourceVoice != NULL )
>3884	CompoundStatement	 
>3885	ExpressionStatement	 
>3886	CallExpression	pMusicSourceVoice -> Stop ( 0 )
>3887	ArgumentList	0
>3888	Argument	0
>3889	PrimaryExpression	0
>3890	Callee	pMusicSourceVoice -> Stop
>3891	PtrMemberAccess	pMusicSourceVoice -> Stop
>3892	Identifier	Stop
>3893	Identifier	pMusicSourceVoice
>3894	Condition	 
>3895	EqualityExpression	pMusicSourceVoice != NULL
>3896	Identifier	NULL
>3897	Identifier	pMusicSourceVoice
>3898	IfStatement	if ( ! Music_initialized )
>3899	CompoundStatement	 
>3900	ReturnStatement	 
>3901	Condition	 
>3902	UnaryOp	! Music_initialized
>3903	Identifier	Music_initialized
>3904	UnaryOperator	!
>3912	FunctionDef	I_ResumeSong (int handle)
>3913	ParameterList	int handle
>3914	Parameter	 
>3915	Identifier	handle
>3916	ParameterType	int
>3917	ReturnType	void
>3918	CompoundStatement	 
>3919	IfStatement	if ( pMusicSourceVoice != NULL )
>3920	CompoundStatement	 
>3921	ExpressionStatement	 
>3922	CallExpression	pMusicSourceVoice -> Start ( 0 )
>3923	ArgumentList	0
>3924	Argument	0
>3925	PrimaryExpression	0
>3926	Callee	pMusicSourceVoice -> Start
>3927	PtrMemberAccess	pMusicSourceVoice -> Start
>3928	Identifier	Start
>3929	Identifier	pMusicSourceVoice
>3930	Condition	 
>3931	EqualityExpression	pMusicSourceVoice != NULL
>3932	Identifier	NULL
>3933	Identifier	pMusicSourceVoice
>3934	IfStatement	if ( ! Music_initialized )
>3935	CompoundStatement	 
>3936	ReturnStatement	 
>3937	Condition	 
>3938	UnaryOp	! Music_initialized
>3939	Identifier	Music_initialized
>3940	UnaryOperator	!
>3948	FunctionDef	I_StopSong (int handle)
>3949	ParameterList	int handle
>3950	Parameter	 
>3951	Identifier	handle
>3952	ParameterType	int
>3953	ReturnType	void
>3954	CompoundStatement	 
>3955	IfStatement	if ( pMusicSourceVoice != NULL )
>3956	CompoundStatement	 
>3957	ExpressionStatement	 
>3958	CallExpression	pMusicSourceVoice -> Stop ( 0 )
>3959	ArgumentList	0
>3960	Argument	0
>3961	PrimaryExpression	0
>3962	Callee	pMusicSourceVoice -> Stop
>3963	PtrMemberAccess	pMusicSourceVoice -> Stop
>3964	Identifier	Stop
>3965	Identifier	pMusicSourceVoice
>3966	Condition	 
>3967	EqualityExpression	pMusicSourceVoice != NULL
>3968	Identifier	NULL
>3969	Identifier	pMusicSourceVoice
>3970	IfStatement	if ( ! Music_initialized )
>3971	CompoundStatement	 
>3972	ReturnStatement	 
>3973	Condition	 
>3974	UnaryOp	! Music_initialized
>3975	Identifier	Music_initialized
>3976	UnaryOperator	!
>3984	FunctionDef	I_UnRegisterSong (int handle)
>3985	ParameterList	int handle
>3986	Parameter	 
>3987	Identifier	handle
>3988	ParameterType	int
>3989	ReturnType	void
>3990	CompoundStatement	 
>3995	FunctionDef	I_RegisterSong (void * data , int length)
>3996	ParameterList	void * data , int length
>3997	Parameter	 
>3998	Identifier	length
>3999	ParameterType	int
>4000	Parameter	 
>4001	Identifier	data
>4002	ParameterType	void *
>4003	ReturnType	int
>4004	CompoundStatement	 
>4005	ReturnStatement	 
>4006	PrimaryExpression	0
<87=96,95,88
<88=92,89
<89=91,90
<92=94,93
<96=294,290,286,281,277,270,259,242,225,194,187,176,163,154,139,114,107,101,97
<97=98
<98=100,99
<101=102
<102=104,103
<104=106,105
<107=108
<108=112,109
<109=110
<110=111
<112=113
<114=131,127,124,115
<115=116
<116=117
<117=121,118
<118=120,119
<121=123,122
<124=126,125
<127=128
<128=130,129
<131=132
<132=133
<133=138,137,134
<134=136,135
<139=140
<140=153,141
<141=152,142
<142=150,143
<143=144
<144=145
<145=149,146
<146=148,147
<150=151
<154=155
<155=162,161,156
<156=160,157
<157=159,158
<163=164
<164=175,165
<165=174,166
<166=172,167
<167=170,168
<168=169
<170=171
<172=173
<176=177
<177=186,178
<178=180,179
<180=184,181
<181=182
<182=183
<184=185
<187=188
<188=193,192,189
<189=191,190
<194=214,205,195
<195=196
<196=197
<197=204,198
<198=202,199
<199=200
<200=201
<202=203
<205=206
<206=213,207
<207=211,208
<208=209
<209=210
<211=212
<214=215
<215=219,216
<216=218,217
<219=223,220
<220=221
<221=222
<223=224
<225=231,226
<226=227
<227=228
<228=230,229
<231=232
<232=234,233
<234=240,235
<235=238,236
<236=237
<238=239
<240=241
<242=248,243
<243=244
<244=245
<245=247,246
<248=249
<249=251,250
<251=257,252
<252=255,253
<253=254
<255=256
<257=258
<259=260
<260=268,261
<261=266,264,262
<262=263
<264=265
<266=267
<268=269
<270=271
<271=276,275,272
<272=274,273
<277=278
<278=280,279
<281=282
<282=285,284,283
<286=287
<287=289,288
<290=291
<291=293,292
<294=295
<295=297,296
<323=326,325,324
<330=336,335,331
<331=332
<332=334,333
<336=337
<337=338
<338=346,339
<339=341,340
<341=343,342
<343=345,344
<353=359,358,354
<354=355
<355=357,356
<359=380,367,360
<360=361
<361=365,362
<362=363
<363=364
<365=366
<367=368
<368=378,369
<369=376,374,370
<370=371
<371=373,372
<374=375
<376=377
<378=379
<380=381
<381=384,383,382
<393=414,413,394
<394=410,407,404,401,398,395
<395=397,396
<398=400,399
<401=403,402
<404=406,405
<407=409,408
<410=412,411
<414=956,952,948,941,926,853,780,762,753,744,736,730,722,710,704,698,692,686,680,674,663,644,510,506,477,450,444,443,442,441,440,439,435,429,423,417,415
<415=416
<417=418
<418=420,419
<420=422,421
<423=424
<424=426,425
<426=428,427
<429=430
<430=432,431
<432=434,433
<435=436
<436=438,437
<444=445
<445=447,446
<447=449,448
<450=459,451
<451=452
<452=453
<453=458,457,454
<454=456,455
<459=460
<460=475,461
<461=462
<462=463
<463=474,464
<464=468,465
<465=466
<466=467
<468=469
<469=471,470
<471=473,472
<475=476
<477=486,478
<478=479
<479=480
<480=485,484,481
<481=483,482
<486=487
<487=504,488
<488=489
<489=490
<490=503,491
<491=497,492
<492=493
<493=494
<494=496,495
<497=498
<498=500,499
<500=502,501
<504=505
<506=507
<507=509,508
<510=638,536,511
<511=512
<512=519,513
<513=514
<514=516,515
<516=518,517
<519=520
<520=530,521
<521=528,526,524,522
<522=523
<524=525
<526=527
<528=529
<530=531
<531=533,532
<533=535,534
<536=622,612,596,589,564,543,537
<537=538
<538=540,539
<540=542,541
<543=544
<544=558,545
<545=556,554,552,546
<546=547
<547=549,548
<549=551,550
<552=553
<554=555
<556=557
<558=559
<559=561,560
<561=563,562
<564=565
<565=587,566
<566=585,581,575,573,567
<567=568
<568=572,569
<569=571,570
<573=574
<575=576
<576=580,577
<577=579,578
<581=582
<582=584,583
<585=586
<587=588
<589=590
<590=595,594,591
<591=593,592
<596=597
<597=605,598
<598=604,599
<599=601,600
<601=603,602
<605=607,606
<607=609,608
<609=611,610
<612=613
<613=615,614
<615=617,616
<617=619,618
<619=621,620
<622=623
<623=631,624
<624=630,625
<625=627,626
<627=629,628
<631=633,632
<633=635,634
<635=637,636
<638=639
<639=643,640
<640=642,641
<644=645
<645=657,646
<646=647
<647=648
<648=656,649
<649=651,650
<651=653,652
<653=655,654
<657=658
<658=660,659
<660=662,661
<663=664
<664=668,665
<665=666
<666=667
<668=669
<669=671,670
<671=673,672
<674=675
<675=677,676
<677=679,678
<680=681
<681=683,682
<683=685,684
<686=687
<687=689,688
<689=691,690
<692=693
<693=695,694
<695=697,696
<698=699
<699=701,700
<701=703,702
<704=705
<705=707,706
<707=709,708
<710=711
<711=719,712
<712=718,713
<713=715,714
<715=717,716
<719=721,720
<722=723
<723=727,724
<724=726,725
<727=729,728
<730=731
<731=733,732
<733=735,734
<736=737
<737=743,742,738
<738=741,739
<739=740
<744=745
<745=747,746
<747=748
<748=750,749
<750=752,751
<753=754
<754=756,755
<756=757
<757=759,758
<759=761,760
<762=776,763
<763=772,764
<764=765
<765=771,766
<766=770,767
<767=769,768
<772=773
<773=775,774
<776=777
<777=779,778
<780=849,845,842,781
<781=834,826,804,791,782
<782=785,783
<783=784
<785=786
<786=788,787
<788=790,789
<791=792
<792=798,793
<793=794
<794=795
<795=797,796
<798=799
<799=801,800
<801=803,802
<804=816,805
<805=812,806
<806=807
<807=811,808
<808=810,809
<812=813
<813=815,814
<816=817
<817=823,818
<818=822,819
<819=821,820
<823=825,824
<826=828,827
<828=829
<829=833,830
<830=832,831
<834=835
<835=841,836
<836=840,837
<837=839,838
<842=844,843
<845=846
<846=848,847
<849=850
<850=852,851
<853=906,854
<854=855
<855=902,898,895,856
<856=887,857
<857=871,858
<858=860,859
<860=861
<861=869,862
<862=865,863
<863=864
<865=866
<866=868,867
<869=870
<871=872
<872=884,873
<873=879,874
<874=876,875
<876=878,877
<879=881,880
<881=883,882
<884=886,885
<887=888
<888=894,889
<889=893,890
<890=892,891
<895=897,896
<898=899
<899=901,900
<902=903
<903=905,904
<906=907
<907=923,908
<908=920,909
<909=917,910
<910=914,911
<911=913,912
<914=916,915
<917=919,918
<920=922,921
<923=925,924
<926=935,927
<927=934,933,928
<928=932,929
<929=931,930
<935=940,939,936
<936=938,937
<941=942
<942=947,946,943
<943=945,944
<948=949
<949=951,950
<952=953
<953=955,954
<956=960,957
<957=958
<958=959
<960=961
<961=963,962
<1049=1052,1051,1050
<1052=1066,1053
<1053=1054
<1054=1064,1055
<1055=1062,1060,1056
<1056=1057
<1057=1059,1058
<1060=1061
<1062=1063
<1064=1065
<1066=1120,1116,1113,1067
<1067=1068
<1068=1107,1069
<1069=1070
<1070=1071
<1071=1105,1072
<1072=1103,1097,1091,1085,1079,1073
<1073=1074
<1074=1076,1075
<1076=1078,1077
<1079=1080
<1080=1082,1081
<1082=1084,1083
<1085=1086
<1086=1088,1087
<1088=1090,1089
<1091=1092
<1092=1094,1093
<1094=1096,1095
<1097=1098
<1098=1100,1099
<1100=1102,1101
<1103=1104
<1105=1106
<1107=1108
<1108=1110,1109
<1110=1112,1111
<1113=1115,1114
<1116=1117
<1117=1119,1118
<1120=1121
<1121=1122
<1122=1127,1126,1123
<1123=1125,1124
<1140=1161,1160,1141
<1141=1157,1154,1151,1148,1145,1142
<1142=1144,1143
<1145=1147,1146
<1148=1150,1149
<1151=1153,1152
<1154=1156,1155
<1157=1159,1158
<1161=1287,1286,1285,1284,1283,1282,1281,1280,1279,1278,1277,1276,1275,1274,1273,1272,1271,1268,1162
<1162=1248,1228,1163
<1163=1164
<1164=1167,1165
<1165=1166
<1167=1220,1168
<1168=1209,1201,1193,1185,1177,1169
<1169=1170
<1170=1172,1171
<1172=1174,1173
<1174=1176,1175
<1177=1178
<1178=1180,1179
<1180=1182,1181
<1182=1184,1183
<1185=1186
<1186=1188,1187
<1188=1190,1189
<1190=1192,1191
<1193=1194
<1194=1196,1195
<1196=1198,1197
<1198=1200,1199
<1201=1202
<1202=1204,1203
<1204=1206,1205
<1206=1208,1207
<1209=1210
<1210=1215,1211
<1211=1213,1212
<1213=1214
<1215=1217,1216
<1217=1219,1218
<1220=1221
<1221=1223,1222
<1223=1225,1224
<1225=1227,1226
<1228=1247,1246,1245,1244,1243,1242,1241,1240,1239,1238,1237,1236,1235,1234,1233,1232,1231,1230,1229
<1248=1249
<1249=1265,1250
<1250=1262,1251
<1251=1259,1252
<1252=1256,1253
<1253=1255,1254
<1256=1258,1257
<1259=1261,1260
<1262=1264,1263
<1265=1267,1266
<1268=1269
<1269=1270
<1312=1321,1320,1313
<1313=1317,1314
<1314=1316,1315
<1317=1319,1318
<1321=1414,1407,1361,1355,1336,1330,1322
<1322=1323
<1323=1327,1324
<1324=1326,1325
<1327=1329,1328
<1330=1331
<1331=1333,1332
<1333=1335,1334
<1336=1349,1337
<1337=1338
<1338=1339
<1339=1343,1340
<1340=1341
<1341=1342
<1343=1344
<1344=1346,1345
<1346=1348,1347
<1349=1350
<1350=1352,1351
<1352=1354,1353
<1355=1357,1356
<1357=1358
<1358=1360,1359
<1361=1403,1399,1396,1362
<1362=1388,1364,1363
<1364=1366,1365
<1366=1367
<1367=1383,1368
<1368=1378,1369
<1369=1375,1370
<1370=1372,1371
<1372=1374,1373
<1375=1377,1376
<1378=1380,1379
<1380=1382,1381
<1383=1387,1384
<1384=1386,1385
<1388=1389
<1389=1395,1390
<1390=1394,1391
<1391=1393,1392
<1396=1398,1397
<1399=1400
<1400=1402,1401
<1403=1404
<1404=1406,1405
<1407=1408
<1408=1413,1412,1409
<1409=1411,1410
<1414=1415
<1415=1417,1416
<1435=1441,1440,1436
<1436=1437
<1437=1439,1438
<1441=1514,1510,1506,1502,1444,1442
<1442=1443
<1444=1498,1494,1491,1445
<1445=1483,1469,1456,1446
<1446=1450,1447
<1447=1448
<1448=1449
<1450=1451
<1451=1453,1452
<1453=1455,1454
<1456=1457
<1457=1463,1458
<1458=1459
<1459=1460
<1460=1462,1461
<1463=1464
<1464=1466,1465
<1466=1468,1467
<1469=1471,1470
<1471=1472
<1472=1478,1473
<1473=1475,1474
<1475=1477,1476
<1478=1482,1479
<1479=1481,1480
<1483=1484
<1484=1490,1485
<1485=1489,1486
<1486=1488,1487
<1491=1493,1492
<1494=1495
<1495=1497,1496
<1498=1499
<1499=1501,1500
<1502=1503
<1503=1505,1504
<1506=1507
<1507=1509,1508
<1510=1511
<1511=1513,1512
<1514=1518,1515
<1515=1516
<1516=1517
<1518=1519
<1519=1521,1520
<1540=1543,1542,1541
<1543=1825,1821,1817,1813,1544
<1544=1809,1805,1802,1545
<1545=1794,1781,1768,1546
<1546=1762,1547
<1547=1761,1760,1759,1758,1757,1747,1738,1731,1727,1721,1715,1703,1695,1683,1669,1661,1647,1629,1619,1601,1594,1569,1548
<1548=1549
<1549=1563,1550
<1550=1561,1559,1557,1551
<1551=1552
<1552=1554,1553
<1554=1556,1555
<1557=1558
<1559=1560
<1561=1562
<1563=1564
<1564=1566,1565
<1566=1568,1567
<1569=1570
<1570=1592,1571
<1571=1590,1586,1580,1578,1572
<1572=1573
<1573=1577,1574
<1574=1576,1575
<1578=1579
<1580=1581
<1581=1585,1582
<1582=1584,1583
<1586=1587
<1587=1589,1588
<1590=1591
<1592=1593
<1594=1595
<1595=1600,1599,1596
<1596=1598,1597
<1601=1602
<1602=1612,1603
<1603=1611,1604
<1604=1606,1605
<1606=1608,1607
<1608=1610,1609
<1612=1614,1613
<1614=1616,1615
<1616=1618,1617
<1619=1620
<1620=1622,1621
<1622=1624,1623
<1624=1626,1625
<1626=1628,1627
<1629=1630
<1630=1640,1631
<1631=1639,1632
<1632=1634,1633
<1634=1636,1635
<1636=1638,1637
<1640=1642,1641
<1642=1644,1643
<1644=1646,1645
<1647=1648
<1648=1656,1649
<1649=1655,1650
<1650=1652,1651
<1652=1654,1653
<1656=1658,1657
<1658=1660,1659
<1661=1662
<1662=1664,1663
<1664=1666,1665
<1666=1668,1667
<1669=1670
<1670=1678,1671
<1671=1677,1672
<1672=1674,1673
<1674=1676,1675
<1678=1680,1679
<1680=1682,1681
<1683=1684
<1684=1690,1685
<1685=1687,1686
<1687=1689,1688
<1690=1692,1691
<1692=1694,1693
<1695=1696
<1696=1698,1697
<1698=1700,1699
<1700=1702,1701
<1703=1704
<1704=1710,1705
<1705=1707,1706
<1707=1709,1708
<1710=1712,1711
<1712=1714,1713
<1715=1716
<1716=1720,1717
<1717=1719,1718
<1721=1722
<1722=1726,1723
<1723=1725,1724
<1727=1728
<1728=1730,1729
<1731=1735,1732
<1732=1734,1733
<1735=1737,1736
<1738=1739
<1739=1746,1745,1740
<1740=1744,1741
<1741=1743,1742
<1747=1748
<1748=1750,1749
<1750=1754,1751
<1751=1753,1752
<1754=1756,1755
<1762=1763
<1763=1765,1764
<1765=1767,1766
<1768=1769
<1769=1775,1770
<1770=1771
<1771=1772
<1772=1774,1773
<1775=1776
<1776=1778,1777
<1778=1780,1779
<1781=1784,1782
<1782=1783
<1784=1785
<1785=1789,1786
<1786=1788,1787
<1789=1793,1790
<1790=1792,1791
<1794=1795
<1795=1801,1796
<1796=1800,1797
<1797=1799,1798
<1802=1804,1803
<1805=1806
<1806=1808,1807
<1809=1810
<1810=1812,1811
<1813=1814
<1814=1816,1815
<1817=1818
<1818=1820,1819
<1821=1822
<1822=1824,1823
<1825=1828,1826
<1826=1827
<1828=1829
<1829=1831,1830
<1901=1916,1915,1902
<1902=1912,1909,1906,1903
<1903=1905,1904
<1906=1908,1907
<1909=1911,1910
<1912=1914,1913
<1924=1927,1926,1925
<1927=2045,2041,1940,1933,1929,1928
<1929=1930
<1930=1932,1931
<1933=1934
<1934=1938,1935
<1935=1936
<1936=1937
<1938=1939
<1940=2039,1941
<1941=1982,1942
<1942=1978,1974,1971,1943
<1943=1944
<1944=1957,1945
<1945=1946
<1946=1947
<1947=1955,1948
<1948=1949
<1949=1950
<1950=1952,1951
<1952=1954,1953
<1955=1956
<1957=1958
<1958=1966,1959
<1959=1965,1960
<1960=1962,1961
<1962=1964,1963
<1966=1968,1967
<1968=1970,1969
<1971=1973,1972
<1974=1975
<1975=1977,1976
<1978=1979
<1979=1981,1980
<1982=2035,2031,2028,1983
<1983=2017,2010,1999,1984
<1984=1995,1985
<1985=1986
<1986=1987
<1987=1989,1988
<1989=1990
<1990=1992,1991
<1992=1994,1993
<1995=1996
<1996=1998,1997
<1999=2000
<2000=2008,2001
<2001=2004,2002
<2002=2003
<2004=2005
<2005=2007,2006
<2008=2009
<2010=2013,2011
<2011=2012
<2013=2014
<2014=2016,2015
<2017=2018
<2018=2027,2026,2019
<2019=2025,2020
<2020=2024,2021
<2021=2023,2022
<2028=2030,2029
<2031=2032
<2032=2034,2033
<2035=2036
<2036=2038,2037
<2039=2040
<2041=2042
<2042=2044,2043
<2045=2046
<2046=2051,2050,2047
<2047=2049,2048
<2073=2082,2081,2074
<2074=2078,2075
<2075=2077,2076
<2078=2080,2079
<2082=2133,2129,2118,2092,2087,2083
<2083=2084
<2084=2086,2085
<2087=2088
<2088=2090,2089
<2090=2091
<2092=2110,2106,2103,2093
<2093=2094
<2094=2095
<2095=2101,2096
<2096=2099,2097
<2097=2098
<2099=2100
<2101=2102
<2103=2105,2104
<2106=2107
<2107=2109,2108
<2110=2111
<2111=2112
<2112=2117,2116,2113
<2113=2115,2114
<2118=2119
<2119=2127,2120
<2120=2125,2123,2121
<2121=2122
<2123=2124
<2125=2126
<2127=2128
<2129=2130
<2130=2132,2131
<2145=2148,2147,2146
<2148=2253,2248,2149
<2149=2240,2236,2233,2150
<2150=2222,2215,2176,2151
<2151=2170,2152
<2152=2169,2168,2167,2161,2153
<2153=2154
<2154=2156,2155
<2156=2158,2157
<2158=2160,2159
<2161=2162
<2162=2164,2163
<2164=2166,2165
<2170=2171
<2171=2173,2172
<2173=2175,2174
<2176=2211,2177
<2177=2202,2193,2184,2178
<2178=2179
<2179=2181,2180
<2181=2183,2182
<2184=2185
<2185=2187,2186
<2187=2188
<2188=2190,2189
<2190=2192,2191
<2193=2194
<2194=2196,2195
<2196=2197
<2197=2199,2198
<2199=2201,2200
<2202=2203
<2203=2205,2204
<2205=2206
<2206=2208,2207
<2208=2210,2209
<2211=2212
<2212=2214,2213
<2215=2218,2216
<2216=2217
<2218=2219
<2219=2221,2220
<2222=2223
<2223=2232,2231,2224
<2224=2230,2225
<2225=2229,2226
<2226=2228,2227
<2233=2235,2234
<2236=2237
<2237=2239,2238
<2240=2241
<2241=2242
<2242=2247,2246,2243
<2243=2245,2244
<2248=2249
<2249=2251,2250
<2251=2252
<2253=2254
<2254=2256,2255
<2273=2282,2281,2274
<2274=2278,2275
<2275=2277,2276
<2278=2280,2279
<2282=2641,2631,2621,2611,2601,2591,2581,2571,2563,2555,2543,2533,2523,2513,2503,2493,2483,2473,2463,2455,2447,2439,2431,2423,2415,2407,2399,2391,2383,2375,2367,2359,2351,2345,2339,2333,2327,2321,2315,2309,2283
<2283=2284
<2284=2298,2285
<2285=2292,2286
<2286=2287
<2287=2291,2288
<2288=2290,2289
<2292=2293
<2293=2297,2294
<2294=2296,2295
<2298=2299
<2299=2301,2300
<2301=2303,2302
<2303=2304
<2304=2306,2305
<2306=2308,2307
<2309=2310
<2310=2312,2311
<2312=2314,2313
<2315=2316
<2316=2318,2317
<2318=2320,2319
<2321=2322
<2322=2324,2323
<2324=2326,2325
<2327=2328
<2328=2330,2329
<2330=2332,2331
<2333=2334
<2334=2336,2335
<2336=2338,2337
<2339=2340
<2340=2342,2341
<2342=2344,2343
<2345=2346
<2346=2348,2347
<2348=2350,2349
<2351=2352
<2352=2358,2357,2353
<2353=2356,2354
<2354=2355
<2359=2360
<2360=2362,2361
<2362=2364,2363
<2364=2366,2365
<2367=2368
<2368=2370,2369
<2370=2372,2371
<2372=2374,2373
<2375=2376
<2376=2378,2377
<2378=2380,2379
<2380=2382,2381
<2383=2384
<2384=2386,2385
<2386=2388,2387
<2388=2390,2389
<2391=2392
<2392=2394,2393
<2394=2396,2395
<2396=2398,2397
<2399=2400
<2400=2402,2401
<2402=2404,2403
<2404=2406,2405
<2407=2408
<2408=2410,2409
<2410=2412,2411
<2412=2414,2413
<2415=2416
<2416=2418,2417
<2418=2420,2419
<2420=2422,2421
<2423=2424
<2424=2426,2425
<2426=2428,2427
<2428=2430,2429
<2431=2432
<2432=2434,2433
<2434=2436,2435
<2436=2438,2437
<2439=2440
<2440=2442,2441
<2442=2444,2443
<2444=2446,2445
<2447=2448
<2448=2450,2449
<2450=2452,2451
<2452=2454,2453
<2455=2456
<2456=2458,2457
<2458=2460,2459
<2460=2462,2461
<2463=2464
<2464=2466,2465
<2466=2468,2467
<2468=2470,2469
<2470=2472,2471
<2473=2474
<2474=2476,2475
<2476=2478,2477
<2478=2480,2479
<2480=2482,2481
<2483=2484
<2484=2486,2485
<2486=2488,2487
<2488=2490,2489
<2490=2492,2491
<2493=2494
<2494=2496,2495
<2496=2498,2497
<2498=2500,2499
<2500=2502,2501
<2503=2504
<2504=2506,2505
<2506=2508,2507
<2508=2510,2509
<2510=2512,2511
<2513=2514
<2514=2516,2515
<2516=2518,2517
<2518=2520,2519
<2520=2522,2521
<2523=2524
<2524=2526,2525
<2526=2528,2527
<2528=2530,2529
<2530=2532,2531
<2533=2534
<2534=2536,2535
<2536=2538,2537
<2538=2540,2539
<2540=2542,2541
<2543=2544
<2544=2550,2545
<2545=2549,2546
<2546=2548,2547
<2550=2552,2551
<2552=2554,2553
<2555=2556
<2556=2558,2557
<2558=2560,2559
<2560=2562,2561
<2563=2564
<2564=2566,2565
<2566=2568,2567
<2568=2570,2569
<2571=2572
<2572=2574,2573
<2574=2576,2575
<2576=2578,2577
<2578=2580,2579
<2581=2582
<2582=2584,2583
<2584=2586,2585
<2586=2588,2587
<2588=2590,2589
<2591=2592
<2592=2594,2593
<2594=2596,2595
<2596=2598,2597
<2598=2600,2599
<2601=2602
<2602=2604,2603
<2604=2606,2605
<2606=2608,2607
<2608=2610,2609
<2611=2612
<2612=2614,2613
<2614=2616,2615
<2616=2618,2617
<2618=2620,2619
<2621=2622
<2622=2624,2623
<2624=2626,2625
<2626=2628,2627
<2628=2630,2629
<2631=2632
<2632=2640,2639,2633
<2633=2638,2634
<2634=2637,2636,2635
<2641=2642
<2642=2651,2650,2643
<2643=2649,2644
<2644=2648,2645
<2645=2647,2646
<2718=2721,2720,2719
<2721=2722
<2722=2882,2723
<2723=2878,2868,2860,2852,2844,2836,2828,2820,2814,2808,2728,2724
<2724=2725
<2725=2727,2726
<2728=2804,2800,2797,2729
<2729=2730
<2730=2789,2765,2731
<2731=2732
<2732=2751,2733
<2733=2734
<2734=2748,2735
<2735=2747,2736
<2736=2740,2737
<2737=2739,2738
<2740=2742,2741
<2742=2744,2743
<2744=2746,2745
<2748=2750,2749
<2751=2752
<2752=2760,2753
<2753=2755,2754
<2755=2757,2756
<2757=2759,2758
<2760=2762,2761
<2762=2764,2763
<2765=2766
<2766=2767
<2767=2784,2768
<2768=2782,2769
<2769=2776,2770
<2770=2771
<2771=2775,2772
<2772=2774,2773
<2776=2777
<2777=2779,2778
<2779=2781,2780
<2782=2783
<2784=2786,2785
<2786=2788,2787
<2789=2790
<2790=2796,2791
<2791=2793,2792
<2793=2795,2794
<2797=2799,2798
<2800=2801
<2801=2803,2802
<2804=2805
<2805=2807,2806
<2808=2809
<2809=2811,2810
<2811=2813,2812
<2814=2815
<2815=2817,2816
<2817=2819,2818
<2820=2821
<2821=2823,2822
<2823=2825,2824
<2825=2827,2826
<2828=2829
<2829=2831,2830
<2831=2833,2832
<2833=2835,2834
<2836=2837
<2837=2839,2838
<2839=2841,2840
<2841=2843,2842
<2844=2845
<2845=2847,2846
<2847=2849,2848
<2849=2851,2850
<2852=2853
<2853=2855,2854
<2855=2857,2856
<2857=2859,2858
<2860=2861
<2861=2863,2862
<2863=2865,2864
<2865=2867,2866
<2868=2869
<2869=2877,2876,2870
<2870=2875,2871
<2871=2874,2873,2872
<2878=2879
<2879=2881,2880
<2882=2883
<2883=2885,2884
<2919=2922,2921,2920
<2922=2923
<2923=2935,2924
<2924=2930,2925
<2925=2926
<2926=2928,2927
<2928=2929
<2930=2931
<2931=2933,2932
<2933=2934
<2935=2936
<2936=2938,2937
<2938=2940,2939
<2940=2941
<2946=2952,2951,2947
<2947=2948
<2948=2950,2949
<2952=2953
<2953=2954
<2954=2960,2955
<2955=2957,2956
<2957=2959,2958
<2966=2969,2968,2967
<2969=2970
<2970=3095,2971
<2971=3080,3076,3072,3068,3064,3060,3052,3046,3040,3034,3024,3016,3008,3002,2976,2972
<2972=2973
<2973=2975,2974
<2976=2977
<2977=2991,2978
<2978=2987,2981,2979
<2979=2980
<2981=2982
<2982=2986,2983
<2983=2985,2984
<2987=2988
<2988=2990,2989
<2991=2992
<2992=2994,2993
<2994=2996,2995
<2996=2997
<2997=2999,2998
<2999=3001,3000
<3002=3003
<3003=3005,3004
<3005=3007,3006
<3008=3009
<3009=3013,3010
<3010=3012,3011
<3013=3015,3014
<3016=3017
<3017=3021,3018
<3018=3020,3019
<3021=3023,3022
<3024=3025
<3025=3031,3026
<3026=3030,3027
<3027=3029,3028
<3031=3033,3032
<3034=3035
<3035=3037,3036
<3037=3039,3038
<3040=3041
<3041=3043,3042
<3043=3045,3044
<3046=3047
<3047=3049,3048
<3049=3051,3050
<3052=3053
<3053=3059,3058,3054
<3054=3057,3055
<3055=3056
<3060=3061
<3061=3063,3062
<3064=3065
<3065=3067,3066
<3068=3069
<3069=3071,3070
<3072=3073
<3073=3075,3074
<3076=3077
<3077=3079,3078
<3080=3081
<3081=3093,3082
<3082=3091,3089,3087,3085,3083
<3083=3084
<3085=3086
<3087=3088
<3089=3090
<3091=3092
<3093=3094
<3095=3096
<3096=3098,3097
<3130=3133,3132,3131
<3133=3256,3162,3158,3154,3150,3146,3142,3138,3134
<3134=3135
<3135=3137,3136
<3138=3139
<3139=3141,3140
<3142=3143
<3143=3145,3144
<3146=3147
<3147=3149,3148
<3150=3151
<3151=3153,3152
<3154=3155
<3155=3157,3156
<3158=3159
<3159=3161,3160
<3162=3254,3163
<3163=3225,3180,3169,3164
<3164=3165
<3165=3167,3166
<3167=3168
<3169=3178,3170
<3170=3171
<3171=3172
<3172=3176,3173
<3173=3174
<3174=3175
<3176=3177
<3178=3179
<3180=3223,3181
<3181=3219,3189,3182
<3182=3183
<3183=3187,3184
<3184=3185
<3185=3186
<3187=3188
<3189=3194,3190
<3190=3191
<3191=3193,3192
<3194=3208,3195
<3195=3204,3196
<3196=3197
<3197=3198
<3198=3202,3199
<3199=3200
<3200=3201
<3202=3203
<3204=3205
<3205=3207,3206
<3208=3209
<3209=3217,3210
<3210=3215,3211
<3211=3212
<3212=3214,3213
<3215=3216
<3217=3218
<3219=3220
<3220=3222,3221
<3223=3224
<3225=3252,3226
<3226=3245,3238,3231,3227
<3227=3228
<3228=3230,3229
<3231=3232
<3232=3234,3233
<3234=3235
<3235=3237,3236
<3238=3239
<3239=3241,3240
<3241=3242
<3242=3244,3243
<3245=3246
<3246=3248,3247
<3248=3249
<3249=3251,3250
<3252=3253
<3254=3255
<3256=3257
<3257=3261,3258
<3258=3259
<3259=3260
<3261=3262
<3284=3290,3289,3285
<3285=3286
<3286=3288,3287
<3290=3461,3460,3459,3458,3457,3456,3455,3454,3453,3451,3450,3449,3448,3447,3446,3445,3444,3443,3442,3441,3440,3426,3419,3406,3395,3297,3293,3291
<3291=3292
<3293=3294
<3294=3296,3295
<3297=3393,3298
<3298=3376,3366,3359,3352,3345,3338,3311,3306,3299
<3299=3300
<3300=3304,3301
<3301=3302
<3302=3303
<3304=3305
<3306=3307
<3307=3309,3308
<3309=3310
<3311=3316,3312
<3312=3313
<3313=3315,3314
<3316=3321,3317
<3317=3318
<3318=3320,3319
<3321=3322
<3322=3337,3323
<3323=3335,3324
<3324=3331,3329,3325
<3325=3326
<3326=3328,3327
<3329=3330
<3331=3332
<3332=3334,3333
<3335=3336
<3338=3339
<3339=3344,3343,3340
<3340=3342,3341
<3345=3346
<3346=3351,3350,3347
<3347=3349,3348
<3352=3353
<3353=3358,3357,3354
<3354=3356,3355
<3359=3360
<3360=3364,3361
<3361=3362
<3362=3363
<3364=3365
<3366=3367
<3367=3375,3368
<3368=3372,3369
<3369=3371,3370
<3372=3374,3373
<3376=3377
<3377=3392,3378
<3378=3391,3379
<3379=3389,3380
<3380=3381
<3381=3382
<3382=3388,3383
<3383=3387,3384
<3384=3386,3385
<3389=3390
<3393=3394
<3395=3396
<3396=3405,3397
<3397=3403,3398
<3398=3401,3399
<3399=3400
<3401=3402
<3403=3404
<3406=3407
<3407=3417,3408
<3408=3415,3413,3409
<3409=3410
<3410=3412,3411
<3413=3414
<3415=3416
<3417=3418
<3419=3420
<3420=3425,3424,3421
<3421=3423,3422
<3426=3427
<3427=3438,3428
<3428=3431,3429
<3429=3430
<3431=3432
<3432=3434,3433
<3434=3435
<3435=3437,3436
<3438=3439
<3451=3452
<3461=3462
<3462=3467,3466,3463
<3463=3465,3464
<3499=3508,3507,3500
<3500=3504,3501
<3501=3503,3502
<3504=3506,3505
<3508=3638,3618,3611,3604,3559,3542,3538,3529,3525,3509
<3509=3518,3510
<3510=3517,3511
<3511=3512
<3512=3514,3513
<3514=3516,3515
<3518=3519
<3519=3521,3520
<3521=3523,3522
<3523=3524
<3525=3526
<3526=3528,3527
<3529=3530
<3530=3536,3531
<3531=3532
<3532=3533
<3533=3535,3534
<3536=3537
<3538=3539
<3539=3541,3540
<3542=3555,3543
<3543=3548,3544
<3544=3545
<3545=3547,3546
<3548=3549
<3549=3553,3550
<3550=3551
<3551=3552
<3553=3554
<3555=3556
<3556=3558,3557
<3559=3600,3560
<3560=3596,3579,3561
<3561=3567,3562
<3562=3563
<3563=3564
<3564=3566,3565
<3567=3568
<3568=3574,3569
<3569=3571,3570
<3571=3573,3572
<3574=3576,3575
<3576=3578,3577
<3579=3592,3580
<3580=3581
<3581=3582
<3582=3588,3583
<3583=3584
<3584=3585
<3585=3587,3586
<3588=3589
<3589=3591,3590
<3592=3593
<3593=3595,3594
<3596=3597
<3597=3599,3598
<3600=3601
<3601=3603,3602
<3604=3605
<3605=3610,3609,3606
<3606=3608,3607
<3611=3612
<3612=3617,3616,3613
<3613=3615,3614
<3618=3634,3619
<3619=3627,3620
<3620=3621
<3621=3623,3622
<3623=3624
<3624=3626,3625
<3627=3628
<3628=3630,3629
<3630=3631
<3631=3633,3632
<3634=3635
<3635=3637,3636
<3638=3641,3639
<3639=3640
<3641=3642
<3642=3644,3643
<3668=3671,3670,3669
<3671=3836,3689,3672
<3672=3685,3673
<3673=3674
<3674=3675
<3675=3681,3676
<3676=3677
<3677=3678
<3678=3680,3679
<3681=3682
<3682=3684,3683
<3685=3686
<3686=3688,3687
<3689=3834,3690
<3690=3691
<3691=3828,3692
<3692=3697,3693
<3693=3694
<3694=3696,3695
<3697=3826,3698
<3698=3818,3812,3806,3798,3792,3786,3780,3774,3773,3772,3771,3770,3769,3761,3755,3751,3724,3699
<3699=3708,3700
<3700=3701
<3701=3702
<3702=3707,3706,3703
<3703=3705,3704
<3708=3709
<3709=3722,3710
<3710=3711
<3711=3712
<3712=3721,3713
<3713=3717,3714
<3714=3715
<3715=3716
<3717=3718
<3718=3720,3719
<3722=3723
<3724=3733,3725
<3725=3726
<3726=3727
<3727=3732,3731,3728
<3728=3730,3729
<3733=3734
<3734=3749,3735
<3735=3736
<3736=3737
<3737=3748,3738
<3738=3744,3739
<3739=3740
<3740=3741
<3741=3743,3742
<3744=3745
<3745=3747,3746
<3749=3750
<3751=3752
<3752=3754,3753
<3755=3756
<3756=3758,3757
<3758=3760,3759
<3761=3762
<3762=3765,3764,3763
<3765=3766
<3766=3768,3767
<3774=3775
<3775=3777,3776
<3777=3779,3778
<3780=3781
<3781=3783,3782
<3783=3785,3784
<3786=3787
<3787=3789,3788
<3789=3791,3790
<3792=3793
<3793=3795,3794
<3795=3797,3796
<3798=3799
<3799=3803,3800
<3800=3802,3801
<3803=3805,3804
<3806=3807
<3807=3809,3808
<3809=3811,3810
<3812=3813
<3813=3815,3814
<3815=3817,3816
<3818=3819
<3819=3825,3824,3820
<3820=3823,3821
<3821=3822
<3826=3827
<3828=3829
<3829=3833,3830
<3830=3832,3831
<3834=3835
<3836=3839,3837
<3837=3838
<3839=3840
<3840=3842,3841
<3876=3882,3881,3877
<3877=3878
<3878=3880,3879
<3882=3898,3883
<3883=3894,3884
<3884=3885
<3885=3886
<3886=3890,3887
<3887=3888
<3888=3889
<3890=3891
<3891=3893,3892
<3894=3895
<3895=3897,3896
<3898=3901,3899
<3899=3900
<3901=3902
<3902=3904,3903
<3912=3918,3917,3913
<3913=3914
<3914=3916,3915
<3918=3934,3919
<3919=3930,3920
<3920=3921
<3921=3922
<3922=3926,3923
<3923=3924
<3924=3925
<3926=3927
<3927=3929,3928
<3930=3931
<3931=3933,3932
<3934=3937,3935
<3935=3936
<3937=3938
<3938=3940,3939
<3948=3954,3953,3949
<3949=3950
<3950=3952,3951
<3954=3970,3955
<3955=3966,3956
<3956=3957
<3957=3958
<3958=3962,3959
<3959=3960
<3960=3961
<3962=3963
<3963=3965,3964
<3966=3967
<3967=3969,3968
<3970=3973,3971
<3971=3972
<3973=3974
<3974=3976,3975
<3984=3990,3989,3985
<3985=3986
<3986=3988,3987
<3995=4004,4003,3996
<3996=4000,3997
<3997=3999,3998
<4000=4002,4001
<4004=4005
<4005=4006
