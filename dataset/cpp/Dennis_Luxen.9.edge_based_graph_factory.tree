>3	FunctionDef	EdgeBasedGraphFactory 
>4	ParameterList	DeallocatingVector < EdgeBasedEdge > & output_edge_list
>5	Parameter	 
>6	Identifier	output_edge_list
>7	ParameterType	DeallocatingVector < EdgeBasedEdge > &
>8	ReturnType	void
>9	CompoundStatement	 
>10	ExpressionStatement	 
>11	CallExpression	m_edge_based_edge_list . swap ( output_edge_list )
>12	ArgumentList	output_edge_list
>13	Argument	output_edge_list
>14	Identifier	output_edge_list
>15	Callee	m_edge_based_edge_list . swap
>16	MemberAccess	m_edge_based_edge_list . swap
>17	Identifier	swap
>18	Identifier	m_edge_based_edge_list
>19	ExpressionStatement	 
>20	CallExpression	BOOST_ASSERT_MSG ( 0 == output_edge_list . size ( ) , \"Vector is not empty\" )
>21	ArgumentList	0 == output_edge_list . size ( )
>22	Argument	\"Vector is not empty\"
>23	PrimaryExpression	\"Vector is not empty\"
>24	Argument	0 == output_edge_list . size ( )
>25	EqualityExpression	0 == output_edge_list . size ( )
>26	CallExpression	output_edge_list . size ( )
>27	ArgumentList	 
>28	Callee	output_edge_list . size
>29	MemberAccess	output_edge_list . size
>30	Identifier	size
>31	Identifier	output_edge_list
>32	PrimaryExpression	0
>33	Callee	BOOST_ASSERT_MSG
>34	Identifier	BOOST_ASSERT_MSG
>41	FunctionDef	EdgeBasedGraphFactory 
>42	ParameterList	std 
>43	Parameter	 
>44	Identifier	nodes
>45	ParameterType	std 
>46	ReturnType	void
>47	CompoundStatement	 
>48	ExpressionStatement	 
>49	CallExpression	nodes . swap ( m_edge_based_node_list )
>50	ArgumentList	m_edge_based_node_list
>51	Argument	m_edge_based_node_list
>52	Identifier	m_edge_based_node_list
>53	Callee	nodes . swap
>54	MemberAccess	nodes . swap
>55	Identifier	swap
>56	Identifier	nodes
>57	CompoundStatement	 
>58	ExpressionStatement	 
>59	CallExpression	BOOST_ASSERT ( m_node_info_list . at ( node . v ) . lat != INT_MAX )
>60	ArgumentList	m_node_info_list . at ( node . v ) . lat != INT_MAX
>61	Argument	m_node_info_list . at ( node . v ) . lat != INT_MAX
>62	EqualityExpression	m_node_info_list . at ( node . v ) . lat != INT_MAX
>63	Identifier	INT_MAX
>64	MemberAccess	m_node_info_list . at ( node . v ) . lat
>65	Identifier	lat
>66	CallExpression	m_node_info_list . at ( node . v )
>67	ArgumentList	node . v
>68	Argument	node . v
>69	MemberAccess	node . v
>70	Identifier	v
>71	Identifier	node
>72	Callee	m_node_info_list . at
>73	MemberAccess	m_node_info_list . at
>74	Identifier	at
>75	Identifier	m_node_info_list
>76	Callee	BOOST_ASSERT
>77	Identifier	BOOST_ASSERT
>78	ExpressionStatement	 
>79	CallExpression	BOOST_ASSERT ( m_node_info_list . at ( node . v ) . lon != INT_MAX )
>80	ArgumentList	m_node_info_list . at ( node . v ) . lon != INT_MAX
>81	Argument	m_node_info_list . at ( node . v ) . lon != INT_MAX
>82	EqualityExpression	m_node_info_list . at ( node . v ) . lon != INT_MAX
>83	Identifier	INT_MAX
>84	MemberAccess	m_node_info_list . at ( node . v ) . lon
>85	Identifier	lon
>86	CallExpression	m_node_info_list . at ( node . v )
>87	ArgumentList	node . v
>88	Argument	node . v
>89	MemberAccess	node . v
>90	Identifier	v
>91	Identifier	node
>92	Callee	m_node_info_list . at
>93	MemberAccess	m_node_info_list . at
>94	Identifier	at
>95	Identifier	m_node_info_list
>96	Callee	BOOST_ASSERT
>97	Identifier	BOOST_ASSERT
>98	ExpressionStatement	 
>99	CallExpression	BOOST_ASSERT ( m_node_info_list . at ( node . u ) . lon != INT_MAX )
>100	ArgumentList	m_node_info_list . at ( node . u ) . lon != INT_MAX
>101	Argument	m_node_info_list . at ( node . u ) . lon != INT_MAX
>102	EqualityExpression	m_node_info_list . at ( node . u ) . lon != INT_MAX
>103	Identifier	INT_MAX
>104	MemberAccess	m_node_info_list . at ( node . u ) . lon
>105	Identifier	lon
>106	CallExpression	m_node_info_list . at ( node . u )
>107	ArgumentList	node . u
>108	Argument	node . u
>109	MemberAccess	node . u
>110	Identifier	u
>111	Identifier	node
>112	Callee	m_node_info_list . at
>113	MemberAccess	m_node_info_list . at
>114	Identifier	at
>115	Identifier	m_node_info_list
>116	Callee	BOOST_ASSERT
>117	Identifier	BOOST_ASSERT
>118	ExpressionStatement	 
>119	CallExpression	BOOST_ASSERT ( m_node_info_list . at ( node . u ) . lat != INT_MAX )
>120	ArgumentList	m_node_info_list . at ( node . u ) . lat != INT_MAX
>121	Argument	m_node_info_list . at ( node . u ) . lat != INT_MAX
>122	EqualityExpression	m_node_info_list . at ( node . u ) . lat != INT_MAX
>123	Identifier	INT_MAX
>124	MemberAccess	m_node_info_list . at ( node . u ) . lat
>125	Identifier	lat
>126	CallExpression	m_node_info_list . at ( node . u )
>127	ArgumentList	node . u
>128	Argument	node . u
>129	MemberAccess	node . u
>130	Identifier	u
>131	Identifier	node
>132	Callee	m_node_info_list . at
>133	MemberAccess	m_node_info_list . at
>134	Identifier	at
>135	Identifier	m_node_info_list
>136	Callee	BOOST_ASSERT
>137	Identifier	BOOST_ASSERT
>138	Statement	 
>139	Statement	 
>140	Label	 
>141	Identifier	node
>142	Statement	 
>143	Statement	 
>144	Statement	 
>145	Statement	 
>146	Statement	 
>186	FunctionDef	EdgeBasedGraphFactory 
>187	ParameterList	std 
>188	Parameter	 
>189	Identifier	original_edge_data_vector
>190	ParameterType	std 
>191	Parameter	 
>192	Identifier	edge_data_file
>193	ParameterType	std 
>194	ReturnType	void
>195	CompoundStatement	 
>196	ExpressionStatement	 
>197	CallExpression	original_edge_data_vector . clear ( )
>198	ArgumentList	 
>199	Callee	original_edge_data_vector . clear
>200	MemberAccess	original_edge_data_vector . clear
>201	Identifier	clear
>202	Identifier	original_edge_data_vector
>203	ExpressionStatement	 
>204	CallExpression	edge_data_file . write ( ( char * ) & ( original_edge_data_vector [ 0 ] ) , original_edge_data_vector . size ( ) * \
>205	ArgumentList	( char * ) & ( original_edge_data_vector [ 0 ] )
>206	Argument	original_edge_data_vector . size ( ) * sizeof ( OriginalEdgeData )
>207	MultiplicativeExpression	original_edge_data_vector . size ( ) * sizeof ( OriginalEdgeData )
>208	SizeofExpr	sizeof ( OriginalEdgeData )
>209	SizeofOperand	OriginalEdgeData
>210	Sizeof	sizeof
>211	CallExpression	original_edge_data_vector . size ( )
>212	ArgumentList	 
>213	Callee	original_edge_data_vector . size
>214	MemberAccess	original_edge_data_vector . size
>215	Identifier	size
>216	Identifier	original_edge_data_vector
>217	Argument	( char * ) & ( original_edge_data_vector [ 0 ] )
>218	CastExpression	( char * ) & ( original_edge_data_vector [ 0 ] )
>219	UnaryOp	& ( original_edge_data_vector [ 0 ] )
>220	ArrayIndexing	original_edge_data_vector [ 0 ]
>221	PrimaryExpression	0
>222	Identifier	original_edge_data_vector
>223	UnaryOperator	&
>224	CastTarget	char *
>225	Callee	edge_data_file . write
>226	MemberAccess	edge_data_file . write
>227	Identifier	write
>228	Identifier	edge_data_file
>229	IfStatement	if ( original_edge_data_vector . empty ( ) )
>230	CompoundStatement	 
>231	ReturnStatement	 
>232	Condition	 
>233	CallExpression	original_edge_data_vector . empty ( )
>234	ArgumentList	 
>235	Callee	original_edge_data_vector . empty
>236	MemberAccess	original_edge_data_vector . empty
>237	Identifier	empty
>238	Identifier	original_edge_data_vector
>247	FunctionDef	EdgeBasedGraphFactory 
>248	ParameterList	const std 
>249	Parameter	 
>250	Identifier	lua_state
>251	ParameterType	lua_State *
>252	Parameter	 
>253	Identifier	geometry_filename
>254	ParameterType	const std 
>255	Parameter	 
>256	Identifier	original_edge_data_filename
>257	ParameterType	const std 
>258	ReturnType	void
>259	CompoundStatement	 
>260	ExpressionStatement	 
>261	ShiftExpression	SimpleLogger ( ) . Write ( ) << \"Generating edges
>262	ShiftExpression	\"Generating edges
>263	ShiftExpression	TIMER_SEC ( generate_edges ) << \"s\"
>264	PrimaryExpression	\"s\"
>265	CallExpression	TIMER_SEC ( generate_edges )
>266	ArgumentList	generate_edges
>267	Argument	generate_edges
>268	Identifier	generate_edges
>269	Callee	TIMER_SEC
>270	Identifier	TIMER_SEC
>271	PrimaryExpression	\"Generating edges
>272	CallExpression	SimpleLogger ( ) . Write ( )
>273	ArgumentList	 
>274	Callee	SimpleLogger ( ) . Write
>275	MemberAccess	SimpleLogger ( ) . Write
>276	Identifier	Write
>277	CallExpression	SimpleLogger ( )
>278	ArgumentList	 
>279	Callee	SimpleLogger
>280	Identifier	SimpleLogger
>281	ExpressionStatement	 
>282	ShiftExpression	SimpleLogger ( ) . Write ( ) << \"Generating nodes
>283	ShiftExpression	\"Generating nodes
>284	ShiftExpression	TIMER_SEC ( generate_nodes ) << \"s\"
>285	PrimaryExpression	\"s\"
>286	CallExpression	TIMER_SEC ( generate_nodes )
>287	ArgumentList	generate_nodes
>288	Argument	generate_nodes
>289	Identifier	generate_nodes
>290	Callee	TIMER_SEC
>291	Identifier	TIMER_SEC
>292	PrimaryExpression	\"Generating nodes
>293	CallExpression	SimpleLogger ( ) . Write ( )
>294	ArgumentList	 
>295	Callee	SimpleLogger ( ) . Write
>296	MemberAccess	SimpleLogger ( ) . Write
>297	Identifier	Write
>298	CallExpression	SimpleLogger ( )
>299	ArgumentList	 
>300	Callee	SimpleLogger
>301	Identifier	SimpleLogger
>302	ExpressionStatement	 
>303	ShiftExpression	SimpleLogger ( ) . Write ( ) << \"Renumbering edges
>304	ShiftExpression	\"Renumbering edges
>305	ShiftExpression	TIMER_SEC ( renumber ) << \"s\"
>306	PrimaryExpression	\"s\"
>307	CallExpression	TIMER_SEC ( renumber )
>308	ArgumentList	renumber
>309	Argument	renumber
>310	Identifier	renumber
>311	Callee	TIMER_SEC
>312	Identifier	TIMER_SEC
>313	PrimaryExpression	\"Renumbering edges
>314	CallExpression	SimpleLogger ( ) . Write ( )
>315	ArgumentList	 
>316	Callee	SimpleLogger ( ) . Write
>317	MemberAccess	SimpleLogger ( ) . Write
>318	Identifier	Write
>319	CallExpression	SimpleLogger ( )
>320	ArgumentList	 
>321	Callee	SimpleLogger
>322	Identifier	SimpleLogger
>323	ExpressionStatement	 
>324	ShiftExpression	SimpleLogger ( ) . Write ( ) << \"Geometry compression
>325	ShiftExpression	\"Geometry compression
>326	ShiftExpression	TIMER_SEC ( geometry ) << \"s\"
>327	PrimaryExpression	\"s\"
>328	CallExpression	TIMER_SEC ( geometry )
>329	ArgumentList	geometry
>330	Argument	geometry
>331	Identifier	geometry
>332	Callee	TIMER_SEC
>333	Identifier	TIMER_SEC
>334	PrimaryExpression	\"Geometry compression
>335	CallExpression	SimpleLogger ( ) . Write ( )
>336	ArgumentList	 
>337	Callee	SimpleLogger ( ) . Write
>338	MemberAccess	SimpleLogger ( ) . Write
>339	Identifier	Write
>340	CallExpression	SimpleLogger ( )
>341	ArgumentList	 
>342	Callee	SimpleLogger
>343	Identifier	SimpleLogger
>344	ExpressionStatement	 
>345	ShiftExpression	SimpleLogger ( ) . Write ( ) << \"Timing statistics for edge-expanded graph
>346	PrimaryExpression	\"Timing statistics for edge-expanded graph
>347	CallExpression	SimpleLogger ( ) . Write ( )
>348	ArgumentList	 
>349	Callee	SimpleLogger ( ) . Write
>350	MemberAccess	SimpleLogger ( ) . Write
>351	Identifier	Write
>352	CallExpression	SimpleLogger ( )
>353	ArgumentList	 
>354	Callee	SimpleLogger
>355	Identifier	SimpleLogger
>356	ExpressionStatement	 
>357	CallExpression	m_geometry_compressor . SerializeInternalVector ( geometry_filename )
>358	ArgumentList	geometry_filename
>359	Argument	geometry_filename
>360	Identifier	geometry_filename
>361	Callee	m_geometry_compressor . SerializeInternalVector
>362	MemberAccess	m_geometry_compressor . SerializeInternalVector
>363	Identifier	SerializeInternalVector
>364	Identifier	m_geometry_compressor
>365	ExpressionStatement	 
>366	CallExpression	TIMER_STOP ( generate_edges )
>367	ArgumentList	generate_edges
>368	Argument	generate_edges
>369	Identifier	generate_edges
>370	Callee	TIMER_STOP
>371	Identifier	TIMER_STOP
>372	ExpressionStatement	 
>373	CallExpression	GenerateEdgeExpandedEdges ( original_edge_data_filename , lua_state )
>374	ArgumentList	original_edge_data_filename
>375	Argument	lua_state
>376	Identifier	lua_state
>377	Argument	original_edge_data_filename
>378	Identifier	original_edge_data_filename
>379	Callee	GenerateEdgeExpandedEdges
>380	Identifier	GenerateEdgeExpandedEdges
>381	ExpressionStatement	 
>382	CallExpression	TIMER_START ( generate_edges )
>383	ArgumentList	generate_edges
>384	Argument	generate_edges
>385	Identifier	generate_edges
>386	Callee	TIMER_START
>387	Identifier	TIMER_START
>388	ExpressionStatement	 
>389	CallExpression	TIMER_STOP ( generate_nodes )
>390	ArgumentList	generate_nodes
>391	Argument	generate_nodes
>392	Identifier	generate_nodes
>393	Callee	TIMER_STOP
>394	Identifier	TIMER_STOP
>395	ExpressionStatement	 
>396	CallExpression	GenerateEdgeExpandedNodes ( )
>397	ArgumentList	 
>398	Callee	GenerateEdgeExpandedNodes
>399	Identifier	GenerateEdgeExpandedNodes
>400	ExpressionStatement	 
>401	CallExpression	TIMER_START ( generate_nodes )
>402	ArgumentList	generate_nodes
>403	Argument	generate_nodes
>404	Identifier	generate_nodes
>405	Callee	TIMER_START
>406	Identifier	TIMER_START
>407	ExpressionStatement	 
>408	CallExpression	TIMER_STOP ( renumber )
>409	ArgumentList	renumber
>410	Argument	renumber
>411	Identifier	renumber
>412	Callee	TIMER_STOP
>413	Identifier	TIMER_STOP
>414	ExpressionStatement	 
>415	CallExpression	RenumberEdges ( )
>416	ArgumentList	 
>417	Callee	RenumberEdges
>418	Identifier	RenumberEdges
>419	ExpressionStatement	 
>420	CallExpression	TIMER_START ( renumber )
>421	ArgumentList	renumber
>422	Argument	renumber
>423	Identifier	renumber
>424	Callee	TIMER_START
>425	Identifier	TIMER_START
>426	ExpressionStatement	 
>427	CallExpression	TIMER_STOP ( geometry )
>428	ArgumentList	geometry
>429	Argument	geometry
>430	Identifier	geometry
>431	Callee	TIMER_STOP
>432	Identifier	TIMER_STOP
>433	ExpressionStatement	 
>434	CallExpression	CompressGeometry ( )
>435	ArgumentList	 
>436	Callee	CompressGeometry
>437	Identifier	CompressGeometry
>438	ExpressionStatement	 
>439	CallExpression	TIMER_START ( geometry )
>440	ArgumentList	geometry
>441	Argument	geometry
>442	Identifier	geometry
>443	Callee	TIMER_START
>444	Identifier	TIMER_START
>457	FunctionDef	EdgeBasedGraphFactory 
>458	ParameterList	 
>459	ReturnType	void
>460	CompoundStatement	 
>461	ExpressionStatement	 
>462	ShiftExpression	SimpleLogger ( ) . Write ( ) << \"Edge compression ratio
>463	ShiftExpression	\"Edge compression ratio
>464	MultiplicativeExpression	new_edge_count / ( double ) original_number_of_edges
>465	CastExpression	( double ) original_number_of_edges
>466	Identifier	original_number_of_edges
>467	CastTarget	double
>468	Identifier	new_edge_count
>469	PrimaryExpression	\"Edge compression ratio
>470	CallExpression	SimpleLogger ( ) . Write ( )
>471	ArgumentList	 
>472	Callee	SimpleLogger ( ) . Write
>473	MemberAccess	SimpleLogger ( ) . Write
>474	Identifier	Write
>475	CallExpression	SimpleLogger ( )
>476	ArgumentList	 
>477	Callee	SimpleLogger
>478	Identifier	SimpleLogger
>479	ExpressionStatement	 
>480	ShiftExpression	SimpleLogger ( ) . Write ( ) << \"Node compression ratio
>481	ShiftExpression	\"Node compression ratio
>482	MultiplicativeExpression	new_node_count / ( double ) original_number_of_nodes
>483	CastExpression	( double ) original_number_of_nodes
>484	Identifier	original_number_of_nodes
>485	CastTarget	double
>486	Identifier	new_node_count
>487	PrimaryExpression	\"Node compression ratio
>488	CallExpression	SimpleLogger ( ) . Write ( )
>489	ArgumentList	 
>490	Callee	SimpleLogger ( ) . Write
>491	MemberAccess	SimpleLogger ( ) . Write
>492	Identifier	Write
>493	CallExpression	SimpleLogger ( )
>494	ArgumentList	 
>495	Callee	SimpleLogger
>496	Identifier	SimpleLogger
>497	ExpressionStatement	 
>498	ShiftExpression	SimpleLogger ( ) . Write ( ) << \"new nodes
>499	ShiftExpression	\"new nodes
>500	ShiftExpression	new_node_count << \", edges \" << new_edge_count
>501	ShiftExpression	\", edges \" << new_edge_count
>502	Identifier	new_edge_count
>503	PrimaryExpression	\", edges \"
>504	Identifier	new_node_count
>505	PrimaryExpression	\"new nodes
>506	CallExpression	SimpleLogger ( ) . Write ( )
>507	ArgumentList	 
>508	Callee	SimpleLogger ( ) . Write
>509	MemberAccess	SimpleLogger ( ) . Write
>510	Identifier	Write
>511	CallExpression	SimpleLogger ( )
>512	ArgumentList	 
>513	Callee	SimpleLogger
>514	Identifier	SimpleLogger
>515	CompoundStatement	 
>516	IfStatement	if ( m_node_based_graph -> GetOutDegree ( i ) > 0 )
>517	CompoundStatement	 
>518	ExpressionStatement	 
>519	AssignmentExpr	new_edge_count += ( m_node_based_graph -> EndEdges ( i ) - m_node_based_graph -> BeginEdges ( i ) )
>520	AdditiveExpression	m_node_based_graph -> EndEdges ( i ) - m_node_based_graph -> BeginEdges ( i )
>521	CallExpression	m_node_based_graph -> BeginEdges ( i )
>522	ArgumentList	i
>523	Argument	i
>524	Identifier	i
>525	Callee	m_node_based_graph -> BeginEdges
>526	PtrMemberAccess	m_node_based_graph -> BeginEdges
>527	Identifier	BeginEdges
>528	Identifier	m_node_based_graph
>529	CallExpression	m_node_based_graph -> EndEdges ( i )
>530	ArgumentList	i
>531	Argument	i
>532	Identifier	i
>533	Callee	m_node_based_graph -> EndEdges
>534	PtrMemberAccess	m_node_based_graph -> EndEdges
>535	Identifier	EndEdges
>536	Identifier	m_node_based_graph
>537	Identifier	new_edge_count
>538	ExpressionStatement	 
>539	UnaryExpression	++ new_node_count
>540	Identifier	new_node_count
>541	IncDec	++
>542	Condition	 
>543	RelationalExpression	m_node_based_graph -> GetOutDegree ( i ) > 0
>544	PrimaryExpression	0
>545	CallExpression	m_node_based_graph -> GetOutDegree ( i )
>546	ArgumentList	i
>547	Argument	i
>548	Identifier	i
>549	Callee	m_node_based_graph -> GetOutDegree
>550	PtrMemberAccess	m_node_based_graph -> GetOutDegree
>551	Identifier	GetOutDegree
>552	Identifier	m_node_based_graph
>553	Statement	 
>554	Statement	 
>555	Statement	 
>556	Statement	 
>557	Statement	 
>558	Statement	 
>559	Statement	 
>560	Statement	 
>561	Statement	 
>562	Statement	 
>563	Statement	 
>564	Statement	 
>565	Statement	 
>566	Label	 
>567	Identifier	i
>568	Statement	 
>569	Statement	 
>570	Statement	 
>571	Statement	 
>572	IdentifierDeclStatement	 
>573	IdentifierDecl	new_edge_count = 0
>574	AssignmentExpr	new_edge_count = 0
>575	PrimaryExpression	0
>576	Identifier	new_edge_count
>577	Identifier	new_edge_count
>578	IdentifierDeclType	unsigned
>579	IdentifierDeclStatement	 
>580	IdentifierDecl	new_node_count = 0
>581	AssignmentExpr	new_node_count = 0
>582	PrimaryExpression	0
>583	Identifier	new_node_count
>584	Identifier	new_node_count
>585	IdentifierDeclType	unsigned
>586	ExpressionStatement	 
>587	CallExpression	m_geometry_compressor . PrintStatistics ( )
>588	ArgumentList	 
>589	Callee	m_geometry_compressor . PrintStatistics
>590	MemberAccess	m_geometry_compressor . PrintStatistics
>591	Identifier	PrintStatistics
>592	Identifier	m_geometry_compressor
>593	ExpressionStatement	 
>594	ShiftExpression	SimpleLogger ( ) . Write ( ) << \"removed \" << removed_node_count << \" nodes\"
>595	ShiftExpression	\"removed \" << removed_node_count << \" nodes\"
>596	ShiftExpression	removed_node_count << \" nodes\"
>597	PrimaryExpression	\" nodes\"
>598	Identifier	removed_node_count
>599	PrimaryExpression	\"removed \"
>600	CallExpression	SimpleLogger ( ) . Write ( )
>601	ArgumentList	 
>602	Callee	SimpleLogger ( ) . Write
>603	MemberAccess	SimpleLogger ( ) . Write
>604	Identifier	Write
>605	CallExpression	SimpleLogger ( )
>606	ArgumentList	 
>607	Callee	SimpleLogger
>608	Identifier	SimpleLogger
>609	CompoundStatement	 
>610	IfStatement	if ( fwd_edge_data1 . IsCompatibleTo ( fwd_edge_data2 ) && rev_edge_data1 . IsCompatibleTo ( rev_edge_data2 ) )
>611	CompoundStatement	 
>612	ExpressionStatement	 
>613	UnaryExpression	++ removed_node_count
>614	Identifier	removed_node_count
>615	IncDec	++
>616	ExpressionStatement	 
>617	CallExpression	m_geometry_compressor . CompressEdge ( reverse_e1 , reverse_e2 , node_v , node_u , reverse_weight1 , reverse_weight2 + ( \
>618	ArgumentList	reverse_e1
>619	Argument	reverse_weight2 + ( has_node_penalty ? speed_profile . traffic_signal_penalty 
>620	AdditiveExpression	reverse_weight2 + ( has_node_penalty ? speed_profile . traffic_signal_penalty 
>621	ConditionalExpression	has_node_penalty ? speed_profile . traffic_signal_penalty 
>622	PrimaryExpression	0
>623	MemberAccess	speed_profile . traffic_signal_penalty
>624	Identifier	traffic_signal_penalty
>625	Identifier	speed_profile
>626	Condition	has_node_penalty
>627	Identifier	has_node_penalty
>628	Identifier	reverse_weight2
>629	Argument	reverse_weight1
>630	Identifier	reverse_weight1
>631	Argument	node_u
>632	Identifier	node_u
>633	Argument	node_v
>634	Identifier	node_v
>635	Argument	reverse_e2
>636	Identifier	reverse_e2
>637	Argument	reverse_e1
>638	Identifier	reverse_e1
>639	Callee	m_geometry_compressor . CompressEdge
>640	MemberAccess	m_geometry_compressor . CompressEdge
>641	Identifier	CompressEdge
>642	Identifier	m_geometry_compressor
>643	ExpressionStatement	 
>644	CallExpression	m_geometry_compressor . CompressEdge ( forward_e1 , forward_e2 , node_v , node_w , forward_weight1 + ( has_node_\
>645	ArgumentList	forward_e1
>646	Argument	forward_weight2
>647	Identifier	forward_weight2
>648	Argument	forward_weight1 + ( has_node_penalty ? speed_profile . traffic_signal_penalty 
>649	AdditiveExpression	forward_weight1 + ( has_node_penalty ? speed_profile . traffic_signal_penalty 
>650	ConditionalExpression	has_node_penalty ? speed_profile . traffic_signal_penalty 
>651	PrimaryExpression	0
>652	MemberAccess	speed_profile . traffic_signal_penalty
>653	Identifier	traffic_signal_penalty
>654	Identifier	speed_profile
>655	Condition	has_node_penalty
>656	Identifier	has_node_penalty
>657	Identifier	forward_weight1
>658	Argument	node_w
>659	Identifier	node_w
>660	Argument	node_v
>661	Identifier	node_v
>662	Argument	forward_e2
>663	Identifier	forward_e2
>664	Argument	forward_e1
>665	Identifier	forward_e1
>666	Callee	m_geometry_compressor . CompressEdge
>667	MemberAccess	m_geometry_compressor . CompressEdge
>668	Identifier	CompressEdge
>669	Identifier	m_geometry_compressor
>670	ExpressionStatement	 
>671	CallExpression	m_restriction_map -> FixupArrivingTurnRestriction ( node_w , node_v , node_u , * m_node_based_graph )
>672	ArgumentList	node_w
>673	Argument	* m_node_based_graph
>674	UnaryOp	* m_node_based_graph
>675	Identifier	m_node_based_graph
>676	UnaryOperator	*
>677	Argument	node_u
>678	Identifier	node_u
>679	Argument	node_v
>680	Identifier	node_v
>681	Argument	node_w
>682	Identifier	node_w
>683	Callee	m_restriction_map -> FixupArrivingTurnRestriction
>684	PtrMemberAccess	m_restriction_map -> FixupArrivingTurnRestriction
>685	Identifier	FixupArrivingTurnRestriction
>686	Identifier	m_restriction_map
>687	ExpressionStatement	 
>688	CallExpression	m_restriction_map -> FixupStartingTurnRestriction ( node_w , node_v , node_u )
>689	ArgumentList	node_w
>690	Argument	node_u
>691	Identifier	node_u
>692	Argument	node_v
>693	Identifier	node_v
>694	Argument	node_w
>695	Identifier	node_w
>696	Callee	m_restriction_map -> FixupStartingTurnRestriction
>697	PtrMemberAccess	m_restriction_map -> FixupStartingTurnRestriction
>698	Identifier	FixupStartingTurnRestriction
>699	Identifier	m_restriction_map
>700	ExpressionStatement	 
>701	CallExpression	m_restriction_map -> FixupArrivingTurnRestriction ( node_u , node_v , node_w , * m_node_based_graph )
>702	ArgumentList	node_u
>703	Argument	* m_node_based_graph
>704	UnaryOp	* m_node_based_graph
>705	Identifier	m_node_based_graph
>706	UnaryOperator	*
>707	Argument	node_w
>708	Identifier	node_w
>709	Argument	node_v
>710	Identifier	node_v
>711	Argument	node_u
>712	Identifier	node_u
>713	Callee	m_restriction_map -> FixupArrivingTurnRestriction
>714	PtrMemberAccess	m_restriction_map -> FixupArrivingTurnRestriction
>715	Identifier	FixupArrivingTurnRestriction
>716	Identifier	m_restriction_map
>717	ExpressionStatement	 
>718	CallExpression	m_restriction_map -> FixupStartingTurnRestriction ( node_u , node_v , node_w )
>719	ArgumentList	node_u
>720	Argument	node_w
>721	Identifier	node_w
>722	Argument	node_v
>723	Identifier	node_v
>724	Argument	node_u
>725	Identifier	node_u
>726	Callee	m_restriction_map -> FixupStartingTurnRestriction
>727	PtrMemberAccess	m_restriction_map -> FixupStartingTurnRestriction
>728	Identifier	FixupStartingTurnRestriction
>729	Identifier	m_restriction_map
>730	ExpressionStatement	 
>731	CallExpression	m_node_based_graph -> DeleteEdge ( node_v , reverse_e2 )
>732	ArgumentList	node_v
>733	Argument	reverse_e2
>734	Identifier	reverse_e2
>735	Argument	node_v
>736	Identifier	node_v
>737	Callee	m_node_based_graph -> DeleteEdge
>738	PtrMemberAccess	m_node_based_graph -> DeleteEdge
>739	Identifier	DeleteEdge
>740	Identifier	m_node_based_graph
>741	ExpressionStatement	 
>742	CallExpression	m_node_based_graph -> DeleteEdge ( node_v , forward_e2 )
>743	ArgumentList	node_v
>744	Argument	forward_e2
>745	Identifier	forward_e2
>746	Argument	node_v
>747	Identifier	node_v
>748	Callee	m_node_based_graph -> DeleteEdge
>749	PtrMemberAccess	m_node_based_graph -> DeleteEdge
>750	Identifier	DeleteEdge
>751	Identifier	m_node_based_graph
>752	ExpressionStatement	 
>753	CallExpression	m_node_based_graph -> SetTarget ( reverse_e1 , node_u )
>754	ArgumentList	reverse_e1
>755	Argument	node_u
>756	Identifier	node_u
>757	Argument	reverse_e1
>758	Identifier	reverse_e1
>759	Callee	m_node_based_graph -> SetTarget
>760	PtrMemberAccess	m_node_based_graph -> SetTarget
>761	Identifier	SetTarget
>762	Identifier	m_node_based_graph
>763	ExpressionStatement	 
>764	CallExpression	m_node_based_graph -> SetTarget ( forward_e1 , node_w )
>765	ArgumentList	forward_e1
>766	Argument	node_w
>767	Identifier	node_w
>768	Argument	forward_e1
>769	Identifier	forward_e1
>770	Callee	m_node_based_graph -> SetTarget
>771	PtrMemberAccess	m_node_based_graph -> SetTarget
>772	Identifier	SetTarget
>773	Identifier	m_node_based_graph
>774	IfStatement	if ( has_node_penalty )
>775	CompoundStatement	 
>776	ExpressionStatement	 
>777	AssignmentExpr	m_node_based_graph -> GetEdgeData ( reverse_e1 ) . distance += speed_profile . traffic_signal_penalty
>778	MemberAccess	speed_profile . traffic_signal_penalty
>779	Identifier	traffic_signal_penalty
>780	Identifier	speed_profile
>781	MemberAccess	m_node_based_graph -> GetEdgeData ( reverse_e1 ) . distance
>782	Identifier	distance
>783	CallExpression	m_node_based_graph -> GetEdgeData ( reverse_e1 )
>784	ArgumentList	reverse_e1
>785	Argument	reverse_e1
>786	Identifier	reverse_e1
>787	Callee	m_node_based_graph -> GetEdgeData
>788	PtrMemberAccess	m_node_based_graph -> GetEdgeData
>789	Identifier	GetEdgeData
>790	Identifier	m_node_based_graph
>791	ExpressionStatement	 
>792	AssignmentExpr	m_node_based_graph -> GetEdgeData ( forward_e1 ) . distance += speed_profile . traffic_signal_penalty
>793	MemberAccess	speed_profile . traffic_signal_penalty
>794	Identifier	traffic_signal_penalty
>795	Identifier	speed_profile
>796	MemberAccess	m_node_based_graph -> GetEdgeData ( forward_e1 ) . distance
>797	Identifier	distance
>798	CallExpression	m_node_based_graph -> GetEdgeData ( forward_e1 )
>799	ArgumentList	forward_e1
>800	Argument	forward_e1
>801	Identifier	forward_e1
>802	Callee	m_node_based_graph -> GetEdgeData
>803	PtrMemberAccess	m_node_based_graph -> GetEdgeData
>804	Identifier	GetEdgeData
>805	Identifier	m_node_based_graph
>806	Condition	 
>807	Identifier	has_node_penalty
>808	ExpressionStatement	 
>809	AssignmentExpr	m_node_based_graph -> GetEdgeData ( reverse_e1 ) . distance += rev_edge_data2 . distance
>810	MemberAccess	rev_edge_data2 . distance
>811	Identifier	distance
>812	Identifier	rev_edge_data2
>813	MemberAccess	m_node_based_graph -> GetEdgeData ( reverse_e1 ) . distance
>814	Identifier	distance
>815	CallExpression	m_node_based_graph -> GetEdgeData ( reverse_e1 )
>816	ArgumentList	reverse_e1
>817	Argument	reverse_e1
>818	Identifier	reverse_e1
>819	Callee	m_node_based_graph -> GetEdgeData
>820	PtrMemberAccess	m_node_based_graph -> GetEdgeData
>821	Identifier	GetEdgeData
>822	Identifier	m_node_based_graph
>823	ExpressionStatement	 
>824	AssignmentExpr	m_node_based_graph -> GetEdgeData ( forward_e1 ) . distance += fwd_edge_data2 . distance
>825	MemberAccess	fwd_edge_data2 . distance
>826	Identifier	distance
>827	Identifier	fwd_edge_data2
>828	MemberAccess	m_node_based_graph -> GetEdgeData ( forward_e1 ) . distance
>829	Identifier	distance
>830	CallExpression	m_node_based_graph -> GetEdgeData ( forward_e1 )
>831	ArgumentList	forward_e1
>832	Argument	forward_e1
>833	Identifier	forward_e1
>834	Callee	m_node_based_graph -> GetEdgeData
>835	PtrMemberAccess	m_node_based_graph -> GetEdgeData
>836	Identifier	GetEdgeData
>837	Identifier	m_node_based_graph
>838	IdentifierDeclStatement	 
>839	IdentifierDecl	has_node_penalty = m_traffic_lights . find ( node_v ) != m_traffic_lights . end ( )
>840	AssignmentExpr	has_node_penalty = m_traffic_lights . find ( node_v ) != m_traffic_lights . end ( )
>841	EqualityExpression	m_traffic_lights . find ( node_v ) != m_traffic_lights . end ( )
>842	CallExpression	m_traffic_lights . end ( )
>843	ArgumentList	 
>844	Callee	m_traffic_lights . end
>845	MemberAccess	m_traffic_lights . end
>846	Identifier	end
>847	Identifier	m_traffic_lights
>848	CallExpression	m_traffic_lights . find ( node_v )
>849	ArgumentList	node_v
>850	Argument	node_v
>851	Identifier	node_v
>852	Callee	m_traffic_lights . find
>853	MemberAccess	m_traffic_lights . find
>854	Identifier	find
>855	Identifier	m_traffic_lights
>856	Identifier	has_node_penalty
>857	Identifier	has_node_penalty
>858	IdentifierDeclType	const bool
>859	ExpressionStatement	 
>860	CallExpression	BOOST_ASSERT ( 0 != reverse_weight2 )
>861	ArgumentList	0 != reverse_weight2
>862	Argument	0 != reverse_weight2
>863	EqualityExpression	0 != reverse_weight2
>864	Identifier	reverse_weight2
>865	PrimaryExpression	0
>866	Callee	BOOST_ASSERT
>867	Identifier	BOOST_ASSERT
>868	ExpressionStatement	 
>869	CallExpression	BOOST_ASSERT ( 0 != reverse_weight1 )
>870	ArgumentList	0 != reverse_weight1
>871	Argument	0 != reverse_weight1
>872	EqualityExpression	0 != reverse_weight1
>873	Identifier	reverse_weight1
>874	PrimaryExpression	0
>875	Callee	BOOST_ASSERT
>876	Identifier	BOOST_ASSERT
>877	IdentifierDeclStatement	 
>878	IdentifierDecl	reverse_weight2 = m_node_based_graph -> GetEdgeData ( reverse_e2 ) . distance
>879	AssignmentExpr	reverse_weight2 = m_node_based_graph -> GetEdgeData ( reverse_e2 ) . distance
>880	MemberAccess	m_node_based_graph -> GetEdgeData ( reverse_e2 ) . distance
>881	Identifier	distance
>882	CallExpression	m_node_based_graph -> GetEdgeData ( reverse_e2 )
>883	ArgumentList	reverse_e2
>884	Argument	reverse_e2
>885	Identifier	reverse_e2
>886	Callee	m_node_based_graph -> GetEdgeData
>887	PtrMemberAccess	m_node_based_graph -> GetEdgeData
>888	Identifier	GetEdgeData
>889	Identifier	m_node_based_graph
>890	Identifier	reverse_weight2
>891	Identifier	reverse_weight2
>892	IdentifierDeclType	const int
>893	IdentifierDeclStatement	 
>894	IdentifierDecl	reverse_weight1 = m_node_based_graph -> GetEdgeData ( reverse_e1 ) . distance
>895	AssignmentExpr	reverse_weight1 = m_node_based_graph -> GetEdgeData ( reverse_e1 ) . distance
>896	MemberAccess	m_node_based_graph -> GetEdgeData ( reverse_e1 ) . distance
>897	Identifier	distance
>898	CallExpression	m_node_based_graph -> GetEdgeData ( reverse_e1 )
>899	ArgumentList	reverse_e1
>900	Argument	reverse_e1
>901	Identifier	reverse_e1
>902	Callee	m_node_based_graph -> GetEdgeData
>903	PtrMemberAccess	m_node_based_graph -> GetEdgeData
>904	Identifier	GetEdgeData
>905	Identifier	m_node_based_graph
>906	Identifier	reverse_weight1
>907	Identifier	reverse_weight1
>908	IdentifierDeclType	const int
>909	ExpressionStatement	 
>910	CallExpression	BOOST_ASSERT ( 0 != forward_weight2 )
>911	ArgumentList	0 != forward_weight2
>912	Argument	0 != forward_weight2
>913	EqualityExpression	0 != forward_weight2
>914	Identifier	forward_weight2
>915	PrimaryExpression	0
>916	Callee	BOOST_ASSERT
>917	Identifier	BOOST_ASSERT
>918	ExpressionStatement	 
>919	CallExpression	BOOST_ASSERT ( 0 != forward_weight1 )
>920	ArgumentList	0 != forward_weight1
>921	Argument	0 != forward_weight1
>922	EqualityExpression	0 != forward_weight1
>923	Identifier	forward_weight1
>924	PrimaryExpression	0
>925	Callee	BOOST_ASSERT
>926	Identifier	BOOST_ASSERT
>927	IdentifierDeclStatement	 
>928	IdentifierDecl	forward_weight2 = m_node_based_graph -> GetEdgeData ( forward_e2 ) . distance
>929	AssignmentExpr	forward_weight2 = m_node_based_graph -> GetEdgeData ( forward_e2 ) . distance
>930	MemberAccess	m_node_based_graph -> GetEdgeData ( forward_e2 ) . distance
>931	Identifier	distance
>932	CallExpression	m_node_based_graph -> GetEdgeData ( forward_e2 )
>933	ArgumentList	forward_e2
>934	Argument	forward_e2
>935	Identifier	forward_e2
>936	Callee	m_node_based_graph -> GetEdgeData
>937	PtrMemberAccess	m_node_based_graph -> GetEdgeData
>938	Identifier	GetEdgeData
>939	Identifier	m_node_based_graph
>940	Identifier	forward_weight2
>941	Identifier	forward_weight2
>942	IdentifierDeclType	const int
>943	IdentifierDeclStatement	 
>944	IdentifierDecl	forward_weight1 = m_node_based_graph -> GetEdgeData ( forward_e1 ) . distance
>945	AssignmentExpr	forward_weight1 = m_node_based_graph -> GetEdgeData ( forward_e1 ) . distance
>946	MemberAccess	m_node_based_graph -> GetEdgeData ( forward_e1 ) . distance
>947	Identifier	distance
>948	CallExpression	m_node_based_graph -> GetEdgeData ( forward_e1 )
>949	ArgumentList	forward_e1
>950	Argument	forward_e1
>951	Identifier	forward_e1
>952	Callee	m_node_based_graph -> GetEdgeData
>953	PtrMemberAccess	m_node_based_graph -> GetEdgeData
>954	Identifier	GetEdgeData
>955	Identifier	m_node_based_graph
>956	Identifier	forward_weight1
>957	Identifier	forward_weight1
>958	IdentifierDeclType	const int
>959	ExpressionStatement	 
>960	CallExpression	BOOST_ASSERT ( m_node_based_graph -> GetEdgeData ( forward_e2 ) . nameID == m_node_based_graph -> GetEdgeData ( \
>961	ArgumentList	m_node_based_graph -> GetEdgeData ( forward_e2 ) . nameID == m_node_based_graph -> GetEdgeData ( reverse_e2 ) . \
>962	Argument	m_node_based_graph -> GetEdgeData ( forward_e2 ) . nameID == m_node_based_graph -> GetEdgeData ( reverse_e2 ) . \
>963	EqualityExpression	m_node_based_graph -> GetEdgeData ( forward_e2 ) . nameID == m_node_based_graph -> GetEdgeData ( reverse_\
>964	MemberAccess	m_node_based_graph -> GetEdgeData ( reverse_e2 ) . nameID
>965	Identifier	nameID
>966	CallExpression	m_node_based_graph -> GetEdgeData ( reverse_e2 )
>967	ArgumentList	reverse_e2
>968	Argument	reverse_e2
>969	Identifier	reverse_e2
>970	Callee	m_node_based_graph -> GetEdgeData
>971	PtrMemberAccess	m_node_based_graph -> GetEdgeData
>972	Identifier	GetEdgeData
>973	Identifier	m_node_based_graph
>974	MemberAccess	m_node_based_graph -> GetEdgeData ( forward_e2 ) . nameID
>975	Identifier	nameID
>976	CallExpression	m_node_based_graph -> GetEdgeData ( forward_e2 )
>977	ArgumentList	forward_e2
>978	Argument	forward_e2
>979	Identifier	forward_e2
>980	Callee	m_node_based_graph -> GetEdgeData
>981	PtrMemberAccess	m_node_based_graph -> GetEdgeData
>982	Identifier	GetEdgeData
>983	Identifier	m_node_based_graph
>984	Callee	BOOST_ASSERT
>985	Identifier	BOOST_ASSERT
>986	ExpressionStatement	 
>987	CallExpression	BOOST_ASSERT ( m_node_based_graph -> GetEdgeData ( forward_e1 ) . nameID == m_node_based_graph -> GetEdgeData ( \
>988	ArgumentList	m_node_based_graph -> GetEdgeData ( forward_e1 ) . nameID == m_node_based_graph -> GetEdgeData ( reverse_e1 ) . \
>989	Argument	m_node_based_graph -> GetEdgeData ( forward_e1 ) . nameID == m_node_based_graph -> GetEdgeData ( reverse_e1 ) . \
>990	EqualityExpression	m_node_based_graph -> GetEdgeData ( forward_e1 ) . nameID == m_node_based_graph -> GetEdgeData ( reverse_\
>991	MemberAccess	m_node_based_graph -> GetEdgeData ( reverse_e1 ) . nameID
>992	Identifier	nameID
>993	CallExpression	m_node_based_graph -> GetEdgeData ( reverse_e1 )
>994	ArgumentList	reverse_e1
>995	Argument	reverse_e1
>996	Identifier	reverse_e1
>997	Callee	m_node_based_graph -> GetEdgeData
>998	PtrMemberAccess	m_node_based_graph -> GetEdgeData
>999	Identifier	GetEdgeData
>1000	Identifier	m_node_based_graph
>1001	MemberAccess	m_node_based_graph -> GetEdgeData ( forward_e1 ) . nameID
>1002	Identifier	nameID
>1003	CallExpression	m_node_based_graph -> GetEdgeData ( forward_e1 )
>1004	ArgumentList	forward_e1
>1005	Argument	forward_e1
>1006	Identifier	forward_e1
>1007	Callee	m_node_based_graph -> GetEdgeData
>1008	PtrMemberAccess	m_node_based_graph -> GetEdgeData
>1009	Identifier	GetEdgeData
>1010	Identifier	m_node_based_graph
>1011	Callee	BOOST_ASSERT
>1012	Identifier	BOOST_ASSERT
>1013	Condition	 
>1014	AndExpression	fwd_edge_data1 . IsCompatibleTo ( fwd_edge_data2 ) && rev_edge_data1 . IsCompatibleTo ( rev_edge_data2 )
>1015	CallExpression	rev_edge_data1 . IsCompatibleTo ( rev_edge_data2 )
>1016	ArgumentList	rev_edge_data2
>1017	Argument	rev_edge_data2
>1018	Identifier	rev_edge_data2
>1019	Callee	rev_edge_data1 . IsCompatibleTo
>1020	MemberAccess	rev_edge_data1 . IsCompatibleTo
>1021	Identifier	IsCompatibleTo
>1022	Identifier	rev_edge_data1
>1023	CallExpression	fwd_edge_data1 . IsCompatibleTo ( fwd_edge_data2 )
>1024	ArgumentList	fwd_edge_data2
>1025	Argument	fwd_edge_data2
>1026	Identifier	fwd_edge_data2
>1027	Callee	fwd_edge_data1 . IsCompatibleTo
>1028	MemberAccess	fwd_edge_data1 . IsCompatibleTo
>1029	Identifier	IsCompatibleTo
>1030	Identifier	fwd_edge_data1
>1031	IfStatement	if ( fwd_edge_data1 . nameID != rev_edge_data1 . nameID || fwd_edge_data2 . nameID != rev_edge_data2 . nameID )
>1032	CompoundStatement	 
>1033	ContinueStatement	 
>1034	Condition	 
>1035	OrExpression	fwd_edge_data1 . nameID != rev_edge_data1 . nameID || fwd_edge_data2 . nameID != rev_edge_data2 . nameID
>1036	EqualityExpression	fwd_edge_data2 . nameID != rev_edge_data2 . nameID
>1037	MemberAccess	rev_edge_data2 . nameID
>1038	Identifier	nameID
>1039	Identifier	rev_edge_data2
>1040	MemberAccess	fwd_edge_data2 . nameID
>1041	Identifier	nameID
>1042	Identifier	fwd_edge_data2
>1043	EqualityExpression	fwd_edge_data1 . nameID != rev_edge_data1 . nameID
>1044	MemberAccess	rev_edge_data1 . nameID
>1045	Identifier	nameID
>1046	Identifier	rev_edge_data1
>1047	MemberAccess	fwd_edge_data1 . nameID
>1048	Identifier	nameID
>1049	Identifier	fwd_edge_data1
>1050	IfStatement	if ( m_node_based_graph -> FindEdgeInEitherDirection ( node_u , node_w ) != SPECIAL_EDGEID )
>1051	CompoundStatement	 
>1052	ContinueStatement	 
>1053	Condition	 
>1054	EqualityExpression	m_node_based_graph -> FindEdgeInEitherDirection ( node_u , node_w ) != SPECIAL_EDGEID
>1055	Identifier	SPECIAL_EDGEID
>1056	CallExpression	m_node_based_graph -> FindEdgeInEitherDirection ( node_u , node_w )
>1057	ArgumentList	node_u
>1058	Argument	node_w
>1059	Identifier	node_w
>1060	Argument	node_u
>1061	Identifier	node_u
>1062	Callee	m_node_based_graph -> FindEdgeInEitherDirection
>1063	PtrMemberAccess	m_node_based_graph -> FindEdgeInEitherDirection
>1064	Identifier	FindEdgeInEitherDirection
>1065	Identifier	m_node_based_graph
>1066	IdentifierDeclStatement	 
>1067	IdentifierDecl	& rev_edge_data1 = m_node_based_graph -> GetEdgeData ( reverse_e1 )
>1068	AssignmentExpr	& rev_edge_data1 = m_node_based_graph -> GetEdgeData ( reverse_e1 )
>1069	CallExpression	m_node_based_graph -> GetEdgeData ( reverse_e1 )
>1070	ArgumentList	reverse_e1
>1071	Argument	reverse_e1
>1072	Identifier	reverse_e1
>1073	Callee	m_node_based_graph -> GetEdgeData
>1074	PtrMemberAccess	m_node_based_graph -> GetEdgeData
>1075	Identifier	GetEdgeData
>1076	Identifier	m_node_based_graph
>1077	Identifier	rev_edge_data1
>1078	Identifier	rev_edge_data1
>1079	IdentifierDeclType	const EdgeData &
>1080	IdentifierDeclStatement	 
>1081	IdentifierDecl	& fwd_edge_data1 = m_node_based_graph -> GetEdgeData ( forward_e1 )
>1082	AssignmentExpr	& fwd_edge_data1 = m_node_based_graph -> GetEdgeData ( forward_e1 )
>1083	CallExpression	m_node_based_graph -> GetEdgeData ( forward_e1 )
>1084	ArgumentList	forward_e1
>1085	Argument	forward_e1
>1086	Identifier	forward_e1
>1087	Callee	m_node_based_graph -> GetEdgeData
>1088	PtrMemberAccess	m_node_based_graph -> GetEdgeData
>1089	Identifier	GetEdgeData
>1090	Identifier	m_node_based_graph
>1091	Identifier	fwd_edge_data1
>1092	Identifier	fwd_edge_data1
>1093	IdentifierDeclType	const EdgeData &
>1094	ExpressionStatement	 
>1095	CallExpression	BOOST_ASSERT ( node_v == m_node_based_graph -> GetTarget ( reverse_e1 ) )
>1096	ArgumentList	node_v == m_node_based_graph -> GetTarget ( reverse_e1 )
>1097	Argument	node_v == m_node_based_graph -> GetTarget ( reverse_e1 )
>1098	EqualityExpression	node_v == m_node_based_graph -> GetTarget ( reverse_e1 )
>1099	CallExpression	m_node_based_graph -> GetTarget ( reverse_e1 )
>1100	ArgumentList	reverse_e1
>1101	Argument	reverse_e1
>1102	Identifier	reverse_e1
>1103	Callee	m_node_based_graph -> GetTarget
>1104	PtrMemberAccess	m_node_based_graph -> GetTarget
>1105	Identifier	GetTarget
>1106	Identifier	m_node_based_graph
>1107	Identifier	node_v
>1108	Callee	BOOST_ASSERT
>1109	Identifier	BOOST_ASSERT
>1110	ExpressionStatement	 
>1111	CallExpression	BOOST_ASSERT ( SPECIAL_EDGEID != reverse_e1 )
>1112	ArgumentList	SPECIAL_EDGEID != reverse_e1
>1113	Argument	SPECIAL_EDGEID != reverse_e1
>1114	EqualityExpression	SPECIAL_EDGEID != reverse_e1
>1115	Identifier	reverse_e1
>1116	Identifier	SPECIAL_EDGEID
>1117	Callee	BOOST_ASSERT
>1118	Identifier	BOOST_ASSERT
>1119	IdentifierDeclStatement	 
>1120	IdentifierDecl	reverse_e1 = m_node_based_graph -> FindEdge ( node_w , node_v )
>1121	AssignmentExpr	reverse_e1 = m_node_based_graph -> FindEdge ( node_w , node_v )
>1122	CallExpression	m_node_based_graph -> FindEdge ( node_w , node_v )
>1123	ArgumentList	node_w
>1124	Argument	node_v
>1125	Identifier	node_v
>1126	Argument	node_w
>1127	Identifier	node_w
>1128	Callee	m_node_based_graph -> FindEdge
>1129	PtrMemberAccess	m_node_based_graph -> FindEdge
>1130	Identifier	FindEdge
>1131	Identifier	m_node_based_graph
>1132	Identifier	reverse_e1
>1133	Identifier	reverse_e1
>1134	IdentifierDeclType	const EdgeID
>1135	ExpressionStatement	 
>1136	CallExpression	BOOST_ASSERT ( node_v == m_node_based_graph -> GetTarget ( forward_e1 ) )
>1137	ArgumentList	node_v == m_node_based_graph -> GetTarget ( forward_e1 )
>1138	Argument	node_v == m_node_based_graph -> GetTarget ( forward_e1 )
>1139	EqualityExpression	node_v == m_node_based_graph -> GetTarget ( forward_e1 )
>1140	CallExpression	m_node_based_graph -> GetTarget ( forward_e1 )
>1141	ArgumentList	forward_e1
>1142	Argument	forward_e1
>1143	Identifier	forward_e1
>1144	Callee	m_node_based_graph -> GetTarget
>1145	PtrMemberAccess	m_node_based_graph -> GetTarget
>1146	Identifier	GetTarget
>1147	Identifier	m_node_based_graph
>1148	Identifier	node_v
>1149	Callee	BOOST_ASSERT
>1150	Identifier	BOOST_ASSERT
>1151	ExpressionStatement	 
>1152	CallExpression	BOOST_ASSERT ( SPECIAL_EDGEID != forward_e1 )
>1153	ArgumentList	SPECIAL_EDGEID != forward_e1
>1154	Argument	SPECIAL_EDGEID != forward_e1
>1155	EqualityExpression	SPECIAL_EDGEID != forward_e1
>1156	Identifier	forward_e1
>1157	Identifier	SPECIAL_EDGEID
>1158	Callee	BOOST_ASSERT
>1159	Identifier	BOOST_ASSERT
>1160	IdentifierDeclStatement	 
>1161	IdentifierDecl	forward_e1 = m_node_based_graph -> FindEdge ( node_u , node_v )
>1162	AssignmentExpr	forward_e1 = m_node_based_graph -> FindEdge ( node_u , node_v )
>1163	CallExpression	m_node_based_graph -> FindEdge ( node_u , node_v )
>1164	ArgumentList	node_u
>1165	Argument	node_v
>1166	Identifier	node_v
>1167	Argument	node_u
>1168	Identifier	node_u
>1169	Callee	m_node_based_graph -> FindEdge
>1170	PtrMemberAccess	m_node_based_graph -> FindEdge
>1171	Identifier	FindEdge
>1172	Identifier	m_node_based_graph
>1173	Identifier	forward_e1
>1174	Identifier	forward_e1
>1175	IdentifierDeclType	const EdgeID
>1176	ExpressionStatement	 
>1177	CallExpression	BOOST_ASSERT ( node_u != node_v )
>1178	ArgumentList	node_u != node_v
>1179	Argument	node_u != node_v
>1180	EqualityExpression	node_u != node_v
>1181	Identifier	node_v
>1182	Identifier	node_u
>1183	Callee	BOOST_ASSERT
>1184	Identifier	BOOST_ASSERT
>1185	ExpressionStatement	 
>1186	CallExpression	BOOST_ASSERT ( SPECIAL_NODEID != node_u )
>1187	ArgumentList	SPECIAL_NODEID != node_u
>1188	Argument	SPECIAL_NODEID != node_u
>1189	EqualityExpression	SPECIAL_NODEID != node_u
>1190	Identifier	node_u
>1191	Identifier	SPECIAL_NODEID
>1192	Callee	BOOST_ASSERT
>1193	Identifier	BOOST_ASSERT
>1194	IdentifierDeclStatement	 
>1195	IdentifierDecl	node_u = m_node_based_graph -> GetTarget ( reverse_e2 )
>1196	AssignmentExpr	node_u = m_node_based_graph -> GetTarget ( reverse_e2 )
>1197	CallExpression	m_node_based_graph -> GetTarget ( reverse_e2 )
>1198	ArgumentList	reverse_e2
>1199	Argument	reverse_e2
>1200	Identifier	reverse_e2
>1201	Callee	m_node_based_graph -> GetTarget
>1202	PtrMemberAccess	m_node_based_graph -> GetTarget
>1203	Identifier	GetTarget
>1204	Identifier	m_node_based_graph
>1205	Identifier	node_u
>1206	Identifier	node_u
>1207	IdentifierDeclType	const NodeID
>1208	ExpressionStatement	 
>1209	CallExpression	BOOST_ASSERT ( node_v != node_w )
>1210	ArgumentList	node_v != node_w
>1211	Argument	node_v != node_w
>1212	EqualityExpression	node_v != node_w
>1213	Identifier	node_w
>1214	Identifier	node_v
>1215	Callee	BOOST_ASSERT
>1216	Identifier	BOOST_ASSERT
>1217	ExpressionStatement	 
>1218	CallExpression	BOOST_ASSERT ( SPECIAL_NODEID != node_w )
>1219	ArgumentList	SPECIAL_NODEID != node_w
>1220	Argument	SPECIAL_NODEID != node_w
>1221	EqualityExpression	SPECIAL_NODEID != node_w
>1222	Identifier	node_w
>1223	Identifier	SPECIAL_NODEID
>1224	Callee	BOOST_ASSERT
>1225	Identifier	BOOST_ASSERT
>1226	IdentifierDeclStatement	 
>1227	IdentifierDecl	node_w = m_node_based_graph -> GetTarget ( forward_e2 )
>1228	AssignmentExpr	node_w = m_node_based_graph -> GetTarget ( forward_e2 )
>1229	CallExpression	m_node_based_graph -> GetTarget ( forward_e2 )
>1230	ArgumentList	forward_e2
>1231	Argument	forward_e2
>1232	Identifier	forward_e2
>1233	Callee	m_node_based_graph -> GetTarget
>1234	PtrMemberAccess	m_node_based_graph -> GetTarget
>1235	Identifier	GetTarget
>1236	Identifier	m_node_based_graph
>1237	Identifier	node_w
>1238	Identifier	node_w
>1239	IdentifierDeclType	const NodeID
>1240	IdentifierDeclStatement	 
>1241	IdentifierDecl	& rev_edge_data2 = m_node_based_graph -> GetEdgeData ( reverse_e2 )
>1242	AssignmentExpr	& rev_edge_data2 = m_node_based_graph -> GetEdgeData ( reverse_e2 )
>1243	CallExpression	m_node_based_graph -> GetEdgeData ( reverse_e2 )
>1244	ArgumentList	reverse_e2
>1245	Argument	reverse_e2
>1246	Identifier	reverse_e2
>1247	Callee	m_node_based_graph -> GetEdgeData
>1248	PtrMemberAccess	m_node_based_graph -> GetEdgeData
>1249	Identifier	GetEdgeData
>1250	Identifier	m_node_based_graph
>1251	Identifier	rev_edge_data2
>1252	Identifier	rev_edge_data2
>1253	IdentifierDeclType	const EdgeData &
>1254	IdentifierDeclStatement	 
>1255	IdentifierDecl	& fwd_edge_data2 = m_node_based_graph -> GetEdgeData ( forward_e2 )
>1256	AssignmentExpr	& fwd_edge_data2 = m_node_based_graph -> GetEdgeData ( forward_e2 )
>1257	CallExpression	m_node_based_graph -> GetEdgeData ( forward_e2 )
>1258	ArgumentList	forward_e2
>1259	Argument	forward_e2
>1260	Identifier	forward_e2
>1261	Callee	m_node_based_graph -> GetEdgeData
>1262	PtrMemberAccess	m_node_based_graph -> GetEdgeData
>1263	Identifier	GetEdgeData
>1264	Identifier	m_node_based_graph
>1265	Identifier	fwd_edge_data2
>1266	Identifier	fwd_edge_data2
>1267	IdentifierDeclType	const EdgeData &
>1268	ExpressionStatement	 
>1269	CallExpression	BOOST_ASSERT ( reverse_e2 >= m_node_based_graph -> BeginEdges ( node_v ) && reverse_e2 < m_node_based_graph -> EndEdges ( \
>1270	ArgumentList	reverse_e2 >= m_node_based_graph -> BeginEdges ( node_v ) && reverse_e2 < m_node_based_graph -> EndEdges ( node_\
>1271	Argument	reverse_e2 >= m_node_based_graph -> BeginEdges ( node_v ) && reverse_e2 < m_node_based_graph -> EndEdges ( node_\
>1272	AndExpression	reverse_e2 >= m_node_based_graph -> BeginEdges ( node_v ) && reverse_e2 < m_node_based_graph -> EndEdges ( \
>1273	RelationalExpression	reverse_e2 < m_node_based_graph -> EndEdges ( node_v )
>1274	CallExpression	m_node_based_graph -> EndEdges ( node_v )
>1275	ArgumentList	node_v
>1276	Argument	node_v
>1277	Identifier	node_v
>1278	Callee	m_node_based_graph -> EndEdges
>1279	PtrMemberAccess	m_node_based_graph -> EndEdges
>1280	Identifier	EndEdges
>1281	Identifier	m_node_based_graph
>1282	Identifier	reverse_e2
>1283	RelationalExpression	reverse_e2 >= m_node_based_graph -> BeginEdges ( node_v )
>1284	CallExpression	m_node_based_graph -> BeginEdges ( node_v )
>1285	ArgumentList	node_v
>1286	Argument	node_v
>1287	Identifier	node_v
>1288	Callee	m_node_based_graph -> BeginEdges
>1289	PtrMemberAccess	m_node_based_graph -> BeginEdges
>1290	Identifier	BeginEdges
>1291	Identifier	m_node_based_graph
>1292	Identifier	reverse_e2
>1293	Callee	BOOST_ASSERT
>1294	Identifier	BOOST_ASSERT
>1295	ExpressionStatement	 
>1296	CallExpression	BOOST_ASSERT ( SPECIAL_EDGEID != reverse_e2 )
>1297	ArgumentList	SPECIAL_EDGEID != reverse_e2
>1298	Argument	SPECIAL_EDGEID != reverse_e2
>1299	EqualityExpression	SPECIAL_EDGEID != reverse_e2
>1300	Identifier	reverse_e2
>1301	Identifier	SPECIAL_EDGEID
>1302	Callee	BOOST_ASSERT
>1303	Identifier	BOOST_ASSERT
>1304	IdentifierDeclStatement	 
>1305	IdentifierDecl	reverse_e2 = m_node_based_graph -> BeginEdges ( node_v ) + 1 - reverse_edge_order
>1306	AssignmentExpr	reverse_e2 = m_node_based_graph -> BeginEdges ( node_v ) + 1 - reverse_edge_order
>1307	AdditiveExpression	m_node_based_graph -> BeginEdges ( node_v ) + 1 - reverse_edge_order
>1308	AdditiveExpression	1 - reverse_edge_order
>1309	Identifier	reverse_edge_order
>1310	PrimaryExpression	1
>1311	CallExpression	m_node_based_graph -> BeginEdges ( node_v )
>1312	ArgumentList	node_v
>1313	Argument	node_v
>1314	Identifier	node_v
>1315	Callee	m_node_based_graph -> BeginEdges
>1316	PtrMemberAccess	m_node_based_graph -> BeginEdges
>1317	Identifier	BeginEdges
>1318	Identifier	m_node_based_graph
>1319	Identifier	reverse_e2
>1320	Identifier	reverse_e2
>1321	IdentifierDeclType	const EdgeID
>1322	ExpressionStatement	 
>1323	CallExpression	BOOST_ASSERT ( forward_e2 >= m_node_based_graph -> BeginEdges ( node_v ) && forward_e2 < m_node_based_graph -> EndEdges ( \
>1324	ArgumentList	forward_e2 >= m_node_based_graph -> BeginEdges ( node_v ) && forward_e2 < m_node_based_graph -> EndEdges ( node_\
>1325	Argument	forward_e2 >= m_node_based_graph -> BeginEdges ( node_v ) && forward_e2 < m_node_based_graph -> EndEdges ( node_\
>1326	AndExpression	forward_e2 >= m_node_based_graph -> BeginEdges ( node_v ) && forward_e2 < m_node_based_graph -> EndEdges ( \
>1327	RelationalExpression	forward_e2 < m_node_based_graph -> EndEdges ( node_v )
>1328	CallExpression	m_node_based_graph -> EndEdges ( node_v )
>1329	ArgumentList	node_v
>1330	Argument	node_v
>1331	Identifier	node_v
>1332	Callee	m_node_based_graph -> EndEdges
>1333	PtrMemberAccess	m_node_based_graph -> EndEdges
>1334	Identifier	EndEdges
>1335	Identifier	m_node_based_graph
>1336	Identifier	forward_e2
>1337	RelationalExpression	forward_e2 >= m_node_based_graph -> BeginEdges ( node_v )
>1338	CallExpression	m_node_based_graph -> BeginEdges ( node_v )
>1339	ArgumentList	node_v
>1340	Argument	node_v
>1341	Identifier	node_v
>1342	Callee	m_node_based_graph -> BeginEdges
>1343	PtrMemberAccess	m_node_based_graph -> BeginEdges
>1344	Identifier	BeginEdges
>1345	Identifier	m_node_based_graph
>1346	Identifier	forward_e2
>1347	Callee	BOOST_ASSERT
>1348	Identifier	BOOST_ASSERT
>1349	ExpressionStatement	 
>1350	CallExpression	BOOST_ASSERT ( SPECIAL_EDGEID != forward_e2 )
>1351	ArgumentList	SPECIAL_EDGEID != forward_e2
>1352	Argument	SPECIAL_EDGEID != forward_e2
>1353	EqualityExpression	SPECIAL_EDGEID != forward_e2
>1354	Identifier	forward_e2
>1355	Identifier	SPECIAL_EDGEID
>1356	Callee	BOOST_ASSERT
>1357	Identifier	BOOST_ASSERT
>1358	IdentifierDeclStatement	 
>1359	IdentifierDecl	forward_e2 = m_node_based_graph -> BeginEdges ( node_v ) + reverse_edge_order
>1360	AssignmentExpr	forward_e2 = m_node_based_graph -> BeginEdges ( node_v ) + reverse_edge_order
>1361	AdditiveExpression	m_node_based_graph -> BeginEdges ( node_v ) + reverse_edge_order
>1362	Identifier	reverse_edge_order
>1363	CallExpression	m_node_based_graph -> BeginEdges ( node_v )
>1364	ArgumentList	node_v
>1365	Argument	node_v
>1366	Identifier	node_v
>1367	Callee	m_node_based_graph -> BeginEdges
>1368	PtrMemberAccess	m_node_based_graph -> BeginEdges
>1369	Identifier	BeginEdges
>1370	Identifier	m_node_based_graph
>1371	Identifier	forward_e2
>1372	Identifier	forward_e2
>1373	IdentifierDeclType	const EdgeID
>1374	IdentifierDeclStatement	 
>1375	IdentifierDecl	reverse_edge_order = ! ( m_node_based_graph -> GetEdgeData ( m_node_based_graph -> BeginEdges ( node_v ) ) . forward )
>1376	AssignmentExpr	reverse_edge_order = ! ( m_node_based_graph -> GetEdgeData ( m_node_based_graph -> BeginEdges ( node_\
>1377	UnaryOp	! ( m_node_based_graph -> GetEdgeData ( m_node_based_graph -> BeginEdges ( node_v ) ) . forward )
>1378	MemberAccess	m_node_based_graph -> GetEdgeData ( m_node_based_graph -> BeginEdges ( node_v ) ) . forward
>1379	Identifier	forward
>1380	CallExpression	m_node_based_graph -> GetEdgeData ( m_node_based_graph -> BeginEdges ( node_v ) )
>1381	ArgumentList	m_node_based_graph -> BeginEdges ( node_v )
>1382	Argument	m_node_based_graph -> BeginEdges ( node_v )
>1383	CallExpression	m_node_based_graph -> BeginEdges ( node_v )
>1384	ArgumentList	node_v
>1385	Argument	node_v
>1386	Identifier	node_v
>1387	Callee	m_node_based_graph -> BeginEdges
>1388	PtrMemberAccess	m_node_based_graph -> BeginEdges
>1389	Identifier	BeginEdges
>1390	Identifier	m_node_based_graph
>1391	Callee	m_node_based_graph -> GetEdgeData
>1392	PtrMemberAccess	m_node_based_graph -> GetEdgeData
>1393	Identifier	GetEdgeData
>1394	Identifier	m_node_based_graph
>1395	UnaryOperator	!
>1396	Identifier	reverse_edge_order
>1397	Identifier	reverse_edge_order
>1398	IdentifierDeclType	const bool
>1399	IfStatement	if ( m_restriction_map -> IsViaNode ( node_v ) )
>1400	CompoundStatement	 
>1401	ContinueStatement	 
>1402	Condition	 
>1403	CallExpression	m_restriction_map -> IsViaNode ( node_v )
>1404	ArgumentList	node_v
>1405	Argument	node_v
>1406	Identifier	node_v
>1407	Callee	m_restriction_map -> IsViaNode
>1408	PtrMemberAccess	m_restriction_map -> IsViaNode
>1409	Identifier	IsViaNode
>1410	Identifier	m_restriction_map
>1411	IfStatement	if ( m_barrier_nodes . end ( ) != m_barrier_nodes . find ( node_v ) )
>1412	CompoundStatement	 
>1413	ContinueStatement	 
>1414	Condition	 
>1415	EqualityExpression	m_barrier_nodes . end ( ) != m_barrier_nodes . find ( node_v )
>1416	CallExpression	m_barrier_nodes . find ( node_v )
>1417	ArgumentList	node_v
>1418	Argument	node_v
>1419	Identifier	node_v
>1420	Callee	m_barrier_nodes . find
>1421	MemberAccess	m_barrier_nodes . find
>1422	Identifier	find
>1423	Identifier	m_barrier_nodes
>1424	CallExpression	m_barrier_nodes . end ( )
>1425	ArgumentList	 
>1426	Callee	m_barrier_nodes . end
>1427	MemberAccess	m_barrier_nodes . end
>1428	Identifier	end
>1429	Identifier	m_barrier_nodes
>1430	IfStatement	if ( 2 != m_node_based_graph -> GetOutDegree ( node_v ) )
>1431	CompoundStatement	 
>1432	ContinueStatement	 
>1433	Condition	 
>1434	EqualityExpression	2 != m_node_based_graph -> GetOutDegree ( node_v )
>1435	CallExpression	m_node_based_graph -> GetOutDegree ( node_v )
>1436	ArgumentList	node_v
>1437	Argument	node_v
>1438	Identifier	node_v
>1439	Callee	m_node_based_graph -> GetOutDegree
>1440	PtrMemberAccess	m_node_based_graph -> GetOutDegree
>1441	Identifier	GetOutDegree
>1442	Identifier	m_node_based_graph
>1443	PrimaryExpression	2
>1444	ExpressionStatement	 
>1445	CallExpression	progress . printStatus ( node_v )
>1446	ArgumentList	node_v
>1447	Argument	node_v
>1448	Identifier	node_v
>1449	Callee	progress . printStatus
>1450	MemberAccess	progress . printStatus
>1451	Identifier	printStatus
>1452	Identifier	progress
>1453	Statement	 
>1454	Statement	 
>1455	Statement	 
>1456	Statement	 
>1457	Statement	 
>1458	Statement	 
>1459	Statement	 
>1460	Statement	 
>1461	Statement	 
>1462	Label	 
>1463	Identifier	node_v
>1464	Statement	 
>1465	Statement	 
>1466	Statement	 
>1467	Statement	 
>1468	IdentifierDeclStatement	 
>1469	IdentifierDecl	progress ( original_number_of_nodes )
>1470	Identifier	original_number_of_nodes
>1471	Identifier	progress
>1472	IdentifierDeclType	Percent
>1473	IdentifierDeclStatement	 
>1474	IdentifierDecl	original_number_of_edges = m_node_based_graph -> GetNumberOfEdges ( )
>1475	AssignmentExpr	original_number_of_edges = m_node_based_graph -> GetNumberOfEdges ( )
>1476	CallExpression	m_node_based_graph -> GetNumberOfEdges ( )
>1477	ArgumentList	 
>1478	Callee	m_node_based_graph -> GetNumberOfEdges
>1479	PtrMemberAccess	m_node_based_graph -> GetNumberOfEdges
>1480	Identifier	GetNumberOfEdges
>1481	Identifier	m_node_based_graph
>1482	Identifier	original_number_of_edges
>1483	Identifier	original_number_of_edges
>1484	IdentifierDeclType	unsigned
>1485	Statement	 
>1486	IdentifierDeclStatement	 
>1487	IdentifierDecl	original_number_of_nodes = m_node_based_graph -> GetNumberOfNodes ( )
>1488	AssignmentExpr	original_number_of_nodes = m_node_based_graph -> GetNumberOfNodes ( )
>1489	CallExpression	m_node_based_graph -> GetNumberOfNodes ( )
>1490	ArgumentList	 
>1491	Callee	m_node_based_graph -> GetNumberOfNodes
>1492	PtrMemberAccess	m_node_based_graph -> GetNumberOfNodes
>1493	Identifier	GetNumberOfNodes
>1494	Identifier	m_node_based_graph
>1495	Identifier	original_number_of_nodes
>1496	Identifier	original_number_of_nodes
>1497	IdentifierDeclType	unsigned
>1498	Statement	 
>1499	ExpressionStatement	 
>1500	ShiftExpression	SimpleLogger ( ) . Write ( ) << \"Removing graph geometry while preserving topology\"
>1501	PrimaryExpression	\"Removing graph geometry while preserving topology\"
>1502	CallExpression	SimpleLogger ( ) . Write ( )
>1503	ArgumentList	 
>1504	Callee	SimpleLogger ( ) . Write
>1505	MemberAccess	SimpleLogger ( ) . Write
>1506	Identifier	Write
>1507	CallExpression	SimpleLogger ( )
>1508	ArgumentList	 
>1509	Callee	SimpleLogger
>1510	Identifier	SimpleLogger
>1581	FunctionDef	EdgeBasedGraphFactory 
>1582	ParameterList	 
>1583	ReturnType	void
>1584	CompoundStatement	 
>1585	ExpressionStatement	 
>1586	AssignmentExpr	m_number_of_edge_based_nodes = numbered_edges_count
>1587	Identifier	numbered_edges_count
>1588	Identifier	m_number_of_edge_based_nodes
>1589	CompoundStatement	 
>1590	CompoundStatement	 
>1591	ExpressionStatement	 
>1592	CallExpression	BOOST_ASSERT ( SPECIAL_NODEID != edge_data . edgeBasedNodeID )
>1593	ArgumentList	SPECIAL_NODEID != edge_data . edgeBasedNodeID
>1594	Argument	SPECIAL_NODEID != edge_data . edgeBasedNodeID
>1595	EqualityExpression	SPECIAL_NODEID != edge_data . edgeBasedNodeID
>1596	MemberAccess	edge_data . edgeBasedNodeID
>1597	Identifier	edgeBasedNodeID
>1598	Identifier	edge_data
>1599	Identifier	SPECIAL_NODEID
>1600	Callee	BOOST_ASSERT
>1601	Identifier	BOOST_ASSERT
>1602	ExpressionStatement	 
>1603	UnaryExpression	++ numbered_edges_count
>1604	Identifier	numbered_edges_count
>1605	IncDec	++
>1606	ExpressionStatement	 
>1607	AssignmentExpr	edge_data . edgeBasedNodeID = numbered_edges_count
>1608	Identifier	numbered_edges_count
>1609	MemberAccess	edge_data . edgeBasedNodeID
>1610	Identifier	edgeBasedNodeID
>1611	Identifier	edge_data
>1612	ExpressionStatement	 
>1613	CallExpression	BOOST_ASSERT ( numbered_edges_count < m_node_based_graph -> GetNumberOfEdges ( ) )
>1614	ArgumentList	numbered_edges_count < m_node_based_graph -> GetNumberOfEdges ( )
>1615	Argument	numbered_edges_count < m_node_based_graph -> GetNumberOfEdges ( )
>1616	RelationalExpression	numbered_edges_count < m_node_based_graph -> GetNumberOfEdges ( )
>1617	CallExpression	m_node_based_graph -> GetNumberOfEdges ( )
>1618	ArgumentList	 
>1619	Callee	m_node_based_graph -> GetNumberOfEdges
>1620	PtrMemberAccess	m_node_based_graph -> GetNumberOfEdges
>1621	Identifier	GetNumberOfEdges
>1622	Identifier	m_node_based_graph
>1623	Identifier	numbered_edges_count
>1624	Callee	BOOST_ASSERT
>1625	Identifier	BOOST_ASSERT
>1626	IfStatement	if ( ! edge_data . forward )
>1627	CompoundStatement	 
>1628	ContinueStatement	 
>1629	Condition	 
>1630	UnaryOp	! edge_data . forward
>1631	MemberAccess	edge_data . forward
>1632	Identifier	forward
>1633	Identifier	edge_data
>1634	UnaryOperator	!
>1635	IdentifierDeclStatement	 
>1636	IdentifierDecl	& edge_data = m_node_based_graph -> GetEdgeData ( current_edge )
>1637	AssignmentExpr	& edge_data = m_node_based_graph -> GetEdgeData ( current_edge )
>1638	CallExpression	m_node_based_graph -> GetEdgeData ( current_edge )
>1639	ArgumentList	current_edge
>1640	Argument	current_edge
>1641	Identifier	current_edge
>1642	Callee	m_node_based_graph -> GetEdgeData
>1643	PtrMemberAccess	m_node_based_graph -> GetEdgeData
>1644	Identifier	GetEdgeData
>1645	Identifier	m_node_based_graph
>1646	Identifier	edge_data
>1647	Identifier	edge_data
>1648	IdentifierDeclType	EdgeData &
>1649	Statement	 
>1650	Statement	 
>1651	Statement	 
>1652	Statement	 
>1653	Statement	 
>1654	Statement	 
>1655	Statement	 
>1656	Label	 
>1657	Identifier	current_edge
>1658	Statement	 
>1659	Statement	 
>1660	Statement	 
>1661	Statement	 
>1662	Statement	 
>1663	Statement	 
>1664	Statement	 
>1665	Statement	 
>1666	Statement	 
>1667	Statement	 
>1668	Statement	 
>1669	Statement	 
>1670	Statement	 
>1671	Statement	 
>1672	Statement	 
>1673	Statement	 
>1674	Statement	 
>1675	Label	 
>1676	Identifier	current_node
>1677	Statement	 
>1678	Statement	 
>1679	Statement	 
>1680	Statement	 
>1681	IdentifierDeclStatement	 
>1682	IdentifierDecl	numbered_edges_count = 0
>1683	AssignmentExpr	numbered_edges_count = 0
>1684	PrimaryExpression	0
>1685	Identifier	numbered_edges_count
>1686	Identifier	numbered_edges_count
>1687	IdentifierDeclType	unsigned
>1703	FunctionDef	EdgeBasedGraphFactory 
>1704	ParameterList	 
>1705	ReturnType	void
>1706	CompoundStatement	 
>1707	ExpressionStatement	 
>1708	ShiftExpression	SimpleLogger ( ) . Write ( ) << \"Generated \" << m_edge_based_node_list . size ( ) << \" nodes in edge-expanded \
>1709	ShiftExpression	\"Generated \" << m_edge_based_node_list . size ( ) << \" nodes in edge-expanded graph\"
>1710	ShiftExpression	m_edge_based_node_list . size ( ) << \" nodes in edge-expanded graph\"
>1711	PrimaryExpression	\" nodes in edge-expanded graph\"
>1712	CallExpression	m_edge_based_node_list . size ( )
>1713	ArgumentList	 
>1714	Callee	m_edge_based_node_list . size
>1715	MemberAccess	m_edge_based_node_list . size
>1716	Identifier	size
>1717	Identifier	m_edge_based_node_list
>1718	PrimaryExpression	\"Generated \"
>1719	CallExpression	SimpleLogger ( ) . Write ( )
>1720	ArgumentList	 
>1721	Callee	SimpleLogger ( ) . Write
>1722	MemberAccess	SimpleLogger ( ) . Write
>1723	Identifier	Write
>1724	CallExpression	SimpleLogger ( )
>1725	ArgumentList	 
>1726	Callee	SimpleLogger
>1727	Identifier	SimpleLogger
>1728	CompoundStatement	 
>1729	CompoundStatement	 
>1730	IfStatement	if ( edge_data . edgeBasedNodeID == SPECIAL_NODEID )
>1731	ElseStatement	else
>1732	CompoundStatement	 
>1733	ExpressionStatement	 
>1734	CallExpression	InsertEdgeBasedNode ( node_u , node_v , ( component_is_tiny ? id_of_smaller_component + 1 
>1735	ArgumentList	node_u
>1736	Argument	component_is_tiny ? id_of_smaller_component + 1 
>1737	ConditionalExpression	component_is_tiny ? id_of_smaller_component + 1 
>1738	PrimaryExpression	0
>1739	AdditiveExpression	id_of_smaller_component + 1
>1740	PrimaryExpression	1
>1741	Identifier	id_of_smaller_component
>1742	Condition	component_is_tiny
>1743	Identifier	component_is_tiny
>1744	Argument	node_v
>1745	Identifier	node_v
>1746	Argument	node_u
>1747	Identifier	node_u
>1748	Callee	InsertEdgeBasedNode
>1749	Identifier	InsertEdgeBasedNode
>1750	CompoundStatement	 
>1751	ExpressionStatement	 
>1752	CallExpression	InsertEdgeBasedNode ( node_v , node_u , ( component_is_tiny ? id_of_smaller_component + 1 
>1753	ArgumentList	node_v
>1754	Argument	component_is_tiny ? id_of_smaller_component + 1 
>1755	ConditionalExpression	component_is_tiny ? id_of_smaller_component + 1 
>1756	PrimaryExpression	0
>1757	AdditiveExpression	id_of_smaller_component + 1
>1758	PrimaryExpression	1
>1759	Identifier	id_of_smaller_component
>1760	Condition	component_is_tiny
>1761	Identifier	component_is_tiny
>1762	Argument	node_u
>1763	Identifier	node_u
>1764	Argument	node_v
>1765	Identifier	node_v
>1766	Callee	InsertEdgeBasedNode
>1767	Identifier	InsertEdgeBasedNode
>1768	Condition	 
>1769	EqualityExpression	edge_data . edgeBasedNodeID == SPECIAL_NODEID
>1770	Identifier	SPECIAL_NODEID
>1771	MemberAccess	edge_data . edgeBasedNodeID
>1772	Identifier	edgeBasedNodeID
>1773	Identifier	edge_data
>1774	IdentifierDeclStatement	 
>1775	IdentifierDecl	component_is_tiny = size_of_component < 1000
>1776	AssignmentExpr	component_is_tiny = size_of_component < 1000
>1777	RelationalExpression	size_of_component < 1000
>1778	PrimaryExpression	1000
>1779	Identifier	size_of_component
>1780	Identifier	component_is_tiny
>1781	Identifier	component_is_tiny
>1782	IdentifierDeclType	const bool
>1783	ExpressionStatement	 
>1784	Statement	 
>1785	Statement	 
>1786	CompoundStatement	 
>1787	ReturnStatement	 
>1788	CallExpression	component_explorer . get_component_id ( node_v )
>1789	ArgumentList	node_v
>1790	Argument	node_v
>1791	Identifier	node_v
>1792	Callee	component_explorer . get_component_id
>1793	MemberAccess	component_explorer . get_component_id
>1794	Identifier	get_component_id
>1795	Identifier	component_explorer
>1796	IfStatement	if ( component_explorer . get_component_size ( node_u ) < component_explorer . get_component_size ( node_v ) )
>1797	CompoundStatement	 
>1798	ReturnStatement	 
>1799	CallExpression	component_explorer . get_component_id ( node_u )
>1800	ArgumentList	node_u
>1801	Argument	node_u
>1802	Identifier	node_u
>1803	Callee	component_explorer . get_component_id
>1804	MemberAccess	component_explorer . get_component_id
>1805	Identifier	get_component_id
>1806	Identifier	component_explorer
>1807	Condition	 
>1808	RelationalExpression	component_explorer . get_component_size ( node_u ) < component_explorer . get_component_size ( node_v )
>1809	CallExpression	component_explorer . get_component_size ( node_v )
>1810	ArgumentList	node_v
>1811	Argument	node_v
>1812	Identifier	node_v
>1813	Callee	component_explorer . get_component_size
>1814	MemberAccess	component_explorer . get_component_size
>1815	Identifier	get_component_size
>1816	Identifier	component_explorer
>1817	CallExpression	component_explorer . get_component_size ( node_u )
>1818	ArgumentList	node_u
>1819	Argument	node_u
>1820	Identifier	node_u
>1821	Callee	component_explorer . get_component_size
>1822	MemberAccess	component_explorer . get_component_size
>1823	Identifier	get_component_size
>1824	Identifier	component_explorer
>1825	Statement	 
>1826	Statement	 
>1827	Statement	 
>1828	Statement	 
>1829	Statement	 
>1830	Statement	 
>1831	Statement	 
>1832	Statement	 
>1833	Statement	 
>1834	Statement	 
>1835	Statement	 
>1836	Statement	 
>1837	IdentifierDeclStatement	 
>1838	IdentifierDecl	size_of_component = std 
>1839	AssignmentExpr	size_of_component = std 
>1840	CallExpression	std 
>1841	ArgumentList	component_explorer . get_component_size ( node_u )
>1842	Argument	component_explorer . get_component_size ( node_v )
>1843	CallExpression	component_explorer . get_component_size ( node_v )
>1844	ArgumentList	node_v
>1845	Argument	node_v
>1846	Identifier	node_v
>1847	Callee	component_explorer . get_component_size
>1848	MemberAccess	component_explorer . get_component_size
>1849	Identifier	get_component_size
>1850	Identifier	component_explorer
>1851	Argument	component_explorer . get_component_size ( node_u )
>1852	CallExpression	component_explorer . get_component_size ( node_u )
>1853	ArgumentList	node_u
>1854	Argument	node_u
>1855	Identifier	node_u
>1856	Callee	component_explorer . get_component_size
>1857	MemberAccess	component_explorer . get_component_size
>1858	Identifier	get_component_size
>1859	Identifier	component_explorer
>1860	Callee	std 
>1861	Identifier	std 
>1862	Identifier	size_of_component
>1863	Identifier	size_of_component
>1864	IdentifierDeclType	unsigned
>1865	Statement	 
>1866	ExpressionStatement	 
>1867	CallExpression	BOOST_ASSERT ( node_u < node_v )
>1868	ArgumentList	node_u < node_v
>1869	Argument	node_u < node_v
>1870	RelationalExpression	node_u < node_v
>1871	Identifier	node_v
>1872	Identifier	node_u
>1873	Callee	BOOST_ASSERT
>1874	Identifier	BOOST_ASSERT
>1875	IfStatement	if ( node_u > node_v )
>1876	CompoundStatement	 
>1877	ContinueStatement	 
>1878	Condition	 
>1879	RelationalExpression	node_u > node_v
>1880	Identifier	node_v
>1881	Identifier	node_u
>1882	ExpressionStatement	 
>1883	CallExpression	BOOST_ASSERT ( SPECIAL_NODEID != node_v )
>1884	ArgumentList	SPECIAL_NODEID != node_v
>1885	Argument	SPECIAL_NODEID != node_v
>1886	EqualityExpression	SPECIAL_NODEID != node_v
>1887	Identifier	node_v
>1888	Identifier	SPECIAL_NODEID
>1889	Callee	BOOST_ASSERT
>1890	Identifier	BOOST_ASSERT
>1891	IdentifierDeclStatement	 
>1892	IdentifierDecl	node_v = m_node_based_graph -> GetTarget ( e1 )
>1893	AssignmentExpr	node_v = m_node_based_graph -> GetTarget ( e1 )
>1894	CallExpression	m_node_based_graph -> GetTarget ( e1 )
>1895	ArgumentList	e1
>1896	Argument	e1
>1897	Identifier	e1
>1898	Callee	m_node_based_graph -> GetTarget
>1899	PtrMemberAccess	m_node_based_graph -> GetTarget
>1900	Identifier	GetTarget
>1901	Identifier	m_node_based_graph
>1902	Identifier	node_v
>1903	Identifier	node_v
>1904	IdentifierDeclType	const NodeID
>1905	ExpressionStatement	 
>1906	CallExpression	BOOST_ASSERT ( e1 != SPECIAL_EDGEID )
>1907	ArgumentList	e1 != SPECIAL_EDGEID
>1908	Argument	e1 != SPECIAL_EDGEID
>1909	EqualityExpression	e1 != SPECIAL_EDGEID
>1910	Identifier	SPECIAL_EDGEID
>1911	Identifier	e1
>1912	Callee	BOOST_ASSERT
>1913	Identifier	BOOST_ASSERT
>1914	IdentifierDeclStatement	 
>1915	IdentifierDecl	& edge_data = m_node_based_graph -> GetEdgeData ( e1 )
>1916	AssignmentExpr	& edge_data = m_node_based_graph -> GetEdgeData ( e1 )
>1917	CallExpression	m_node_based_graph -> GetEdgeData ( e1 )
>1918	ArgumentList	e1
>1919	Argument	e1
>1920	Identifier	e1
>1921	Callee	m_node_based_graph -> GetEdgeData
>1922	PtrMemberAccess	m_node_based_graph -> GetEdgeData
>1923	Identifier	GetEdgeData
>1924	Identifier	m_node_based_graph
>1925	Identifier	edge_data
>1926	Identifier	edge_data
>1927	IdentifierDeclType	const EdgeData &
>1928	Statement	 
>1929	Statement	 
>1930	Statement	 
>1931	Statement	 
>1932	Statement	 
>1933	Statement	 
>1934	Statement	 
>1935	Label	 
>1936	Identifier	e1
>1937	Statement	 
>1938	Statement	 
>1939	Statement	 
>1940	ExpressionStatement	 
>1941	CallExpression	progress . printStatus ( node_u )
>1942	ArgumentList	node_u
>1943	Argument	node_u
>1944	Identifier	node_u
>1945	Callee	progress . printStatus
>1946	MemberAccess	progress . printStatus
>1947	Identifier	printStatus
>1948	Identifier	progress
>1949	ExpressionStatement	 
>1950	CallExpression	BOOST_ASSERT ( node_u < m_node_based_graph -> GetNumberOfNodes ( ) )
>1951	ArgumentList	node_u < m_node_based_graph -> GetNumberOfNodes ( )
>1952	Argument	node_u < m_node_based_graph -> GetNumberOfNodes ( )
>1953	RelationalExpression	node_u < m_node_based_graph -> GetNumberOfNodes ( )
>1954	CallExpression	m_node_based_graph -> GetNumberOfNodes ( )
>1955	ArgumentList	 
>1956	Callee	m_node_based_graph -> GetNumberOfNodes
>1957	PtrMemberAccess	m_node_based_graph -> GetNumberOfNodes
>1958	Identifier	GetNumberOfNodes
>1959	Identifier	m_node_based_graph
>1960	Identifier	node_u
>1961	Callee	BOOST_ASSERT
>1962	Identifier	BOOST_ASSERT
>1963	ExpressionStatement	 
>1964	CallExpression	BOOST_ASSERT ( node_u != SPECIAL_NODEID )
>1965	ArgumentList	node_u != SPECIAL_NODEID
>1966	Argument	node_u != SPECIAL_NODEID
>1967	EqualityExpression	node_u != SPECIAL_NODEID
>1968	Identifier	SPECIAL_NODEID
>1969	Identifier	node_u
>1970	Callee	BOOST_ASSERT
>1971	Identifier	BOOST_ASSERT
>1972	Statement	 
>1973	Statement	 
>1974	Statement	 
>1975	Statement	 
>1976	Statement	 
>1977	Statement	 
>1978	Statement	 
>1979	Statement	 
>1980	Statement	 
>1981	Statement	 
>1982	Statement	 
>1983	Statement	 
>1984	Statement	 
>1985	Label	 
>1986	Identifier	node_u
>1987	Statement	 
>1988	Statement	 
>1989	Statement	 
>1990	Statement	 
>1991	IdentifierDeclStatement	 
>1992	IdentifierDecl	progress ( m_node_based_graph -> GetNumberOfNodes ( ) )
>1993	CallExpression	m_node_based_graph -> GetNumberOfNodes ( )
>1994	ArgumentList	 
>1995	Callee	m_node_based_graph -> GetNumberOfNodes
>1996	PtrMemberAccess	m_node_based_graph -> GetNumberOfNodes
>1997	Identifier	GetNumberOfNodes
>1998	Identifier	m_node_based_graph
>1999	Identifier	progress
>2000	IdentifierDeclType	Percent
>2001	ExpressionStatement	 
>2002	ShiftExpression	SimpleLogger ( ) . Write ( ) << \"generating edge-expanded nodes\"
>2003	PrimaryExpression	\"generating edge-expanded nodes\"
>2004	CallExpression	SimpleLogger ( ) . Write ( )
>2005	ArgumentList	 
>2006	Callee	SimpleLogger ( ) . Write
>2007	MemberAccess	SimpleLogger ( ) . Write
>2008	Identifier	Write
>2009	CallExpression	SimpleLogger ( )
>2010	ArgumentList	 
>2011	Callee	SimpleLogger
>2012	Identifier	SimpleLogger
>2013	ExpressionStatement	 
>2014	ShiftExpression	SimpleLogger ( ) . Write ( ) << \"identified \" << component_explorer . get_size_one_count ( ) - removed_\
>2015	ShiftExpression	\"identified \" << component_explorer . get_size_one_count ( ) - removed_node_count << \" (compressed) \
>2016	ShiftExpression	component_explorer . get_size_one_count ( ) - removed_node_count << \" (compressed) SCCs of size 1\"
>2017	PrimaryExpression	\" (compressed) SCCs of size 1\"
>2018	AdditiveExpression	component_explorer . get_size_one_count ( ) - removed_node_count
>2019	Identifier	removed_node_count
>2020	CallExpression	component_explorer . get_size_one_count ( )
>2021	ArgumentList	 
>2022	Callee	component_explorer . get_size_one_count
>2023	MemberAccess	component_explorer . get_size_one_count
>2024	Identifier	get_size_one_count
>2025	Identifier	component_explorer
>2026	PrimaryExpression	\"identified \"
>2027	CallExpression	SimpleLogger ( ) . Write ( )
>2028	ArgumentList	 
>2029	Callee	SimpleLogger ( ) . Write
>2030	MemberAccess	SimpleLogger ( ) . Write
>2031	Identifier	Write
>2032	CallExpression	SimpleLogger ( )
>2033	ArgumentList	 
>2034	Callee	SimpleLogger
>2035	Identifier	SimpleLogger
>2036	ExpressionStatement	 
>2037	ShiftExpression	SimpleLogger ( ) . Write ( ) << \"identified
>2038	ShiftExpression	\"identified
>2039	ShiftExpression	component_explorer . get_number_of_components ( ) - removed_node_count << \" (compressed) components\"\
>2040	PrimaryExpression	\" (compressed) components\"
>2041	AdditiveExpression	component_explorer . get_number_of_components ( ) - removed_node_count
>2042	Identifier	removed_node_count
>2043	CallExpression	component_explorer . get_number_of_components ( )
>2044	ArgumentList	 
>2045	Callee	component_explorer . get_number_of_components
>2046	MemberAccess	component_explorer . get_number_of_components
>2047	Identifier	get_number_of_components
>2048	Identifier	component_explorer
>2049	PrimaryExpression	\"identified
>2050	CallExpression	SimpleLogger ( ) . Write ( )
>2051	ArgumentList	 
>2052	Callee	SimpleLogger ( ) . Write
>2053	MemberAccess	SimpleLogger ( ) . Write
>2054	Identifier	Write
>2055	CallExpression	SimpleLogger ( )
>2056	ArgumentList	 
>2057	Callee	SimpleLogger
>2058	Identifier	SimpleLogger
>2059	ExpressionStatement	 
>2060	CallExpression	component_explorer . run ( )
>2061	ArgumentList	 
>2062	Callee	component_explorer . run
>2063	MemberAccess	component_explorer . run
>2064	Identifier	run
>2065	Identifier	component_explorer
>2066	IdentifierDeclStatement	 
>2067	IdentifierDecl	component_explorer ( m_node_based_graph , * m_restriction_map , m_barrier_nodes )
>2068	Expression	m_node_based_graph , * m_restriction_map , m_barrier_nodes
>2069	Expression	* m_restriction_map , m_barrier_nodes
>2070	Identifier	m_barrier_nodes
>2071	UnaryOp	* m_restriction_map
>2072	Identifier	m_restriction_map
>2073	UnaryOperator	*
>2074	Identifier	m_node_based_graph
>2075	Identifier	component_explorer
>2076	IdentifierDeclType	TarjanSCC < NodeBasedDynamicGraph >
>2077	ExpressionStatement	 
>2078	ShiftExpression	SimpleLogger ( ) . Write ( ) << \"Identifying components of the (compressed) road network\"
>2079	PrimaryExpression	\"Identifying components of the (compressed) road network\"
>2080	CallExpression	SimpleLogger ( ) . Write ( )
>2081	ArgumentList	 
>2082	Callee	SimpleLogger ( ) . Write
>2083	MemberAccess	SimpleLogger ( ) . Write
>2084	Identifier	Write
>2085	CallExpression	SimpleLogger ( )
>2086	ArgumentList	 
>2087	Callee	SimpleLogger
>2088	Identifier	SimpleLogger
>2116	FunctionDef	EdgeBasedGraphFactory 
>2117	ParameterList	const std 
>2118	Parameter	 
>2119	Identifier	lua_state
>2120	ParameterType	lua_State *
>2121	Parameter	 
>2122	Identifier	original_edge_data_filename
>2123	ParameterType	const std 
>2124	ReturnType	void
>2125	CompoundStatement	 
>2126	ExpressionStatement	 
>2127	ShiftExpression	SimpleLogger ( ) . Write ( ) << \"  skips \" << skipped_barrier_turns_counter << \" turns over barriers\"\
>2128	ShiftExpression	\"  skips \" << skipped_barrier_turns_counter << \" turns over barriers\"
>2129	ShiftExpression	skipped_barrier_turns_counter << \" turns over barriers\"
>2130	PrimaryExpression	\" turns over barriers\"
>2131	Identifier	skipped_barrier_turns_counter
>2132	PrimaryExpression	\"  skips \"
>2133	CallExpression	SimpleLogger ( ) . Write ( )
>2134	ArgumentList	 
>2135	Callee	SimpleLogger ( ) . Write
>2136	MemberAccess	SimpleLogger ( ) . Write
>2137	Identifier	Write
>2138	CallExpression	SimpleLogger ( )
>2139	ArgumentList	 
>2140	Callee	SimpleLogger
>2141	Identifier	SimpleLogger
>2142	ExpressionStatement	 
>2143	ShiftExpression	SimpleLogger ( ) . Write ( ) << \"  skips \" << skipped_uturns_counter << \" U turns\"
>2144	ShiftExpression	\"  skips \" << skipped_uturns_counter << \" U turns\"
>2145	ShiftExpression	skipped_uturns_counter << \" U turns\"
>2146	PrimaryExpression	\" U turns\"
>2147	Identifier	skipped_uturns_counter
>2148	PrimaryExpression	\"  skips \"
>2149	CallExpression	SimpleLogger ( ) . Write ( )
>2150	ArgumentList	 
>2151	Callee	SimpleLogger ( ) . Write
>2152	MemberAccess	SimpleLogger ( ) . Write
>2153	Identifier	Write
>2154	CallExpression	SimpleLogger ( )
>2155	ArgumentList	 
>2156	Callee	SimpleLogger
>2157	Identifier	SimpleLogger
>2158	ExpressionStatement	 
>2159	ShiftExpression	\"defined by \" << m_restriction_map -> size ( ) << \" restrictions\"
>2160	ShiftExpression	m_restriction_map -> size ( ) << \" restrictions\"
>2161	PrimaryExpression	\" restrictions\"
>2162	CallExpression	m_restriction_map -> size ( )
>2163	ArgumentList	 
>2164	Callee	m_restriction_map -> size
>2165	PtrMemberAccess	m_restriction_map -> size
>2166	Identifier	size
>2167	Identifier	m_restriction_map
>2168	PrimaryExpression	\"defined by \"
>2169	Statement	 
>2170	Statement	 
>2171	Statement	 
>2172	Statement	 
>2173	Statement	 
>2174	Statement	 
>2175	Statement	 
>2176	Statement	 
>2177	Statement	 
>2178	Statement	 
>2179	Statement	 
>2180	Statement	 
>2181	Statement	 
>2182	ExpressionStatement	 
>2183	ShiftExpression	SimpleLogger ( ) . Write ( ) << \"  contains \" << m_edge_based_edge_list . size ( ) << \" edges\"
>2184	ShiftExpression	\"  contains \" << m_edge_based_edge_list . size ( ) << \" edges\"
>2185	ShiftExpression	m_edge_based_edge_list . size ( ) << \" edges\"
>2186	PrimaryExpression	\" edges\"
>2187	CallExpression	m_edge_based_edge_list . size ( )
>2188	ArgumentList	 
>2189	Callee	m_edge_based_edge_list . size
>2190	MemberAccess	m_edge_based_edge_list . size
>2191	Identifier	size
>2192	Identifier	m_edge_based_edge_list
>2193	PrimaryExpression	\"  contains \"
>2194	CallExpression	SimpleLogger ( ) . Write ( )
>2195	ArgumentList	 
>2196	Callee	SimpleLogger ( ) . Write
>2197	MemberAccess	SimpleLogger ( ) . Write
>2198	Identifier	Write
>2199	CallExpression	SimpleLogger ( )
>2200	ArgumentList	 
>2201	Callee	SimpleLogger
>2202	Identifier	SimpleLogger
>2203	ExpressionStatement	 
>2204	ShiftExpression	SimpleLogger ( ) . Write ( ) << \"Edge-expanded graph ...\"
>2205	PrimaryExpression	\"Edge-expanded graph ...\"
>2206	CallExpression	SimpleLogger ( ) . Write ( )
>2207	ArgumentList	 
>2208	Callee	SimpleLogger ( ) . Write
>2209	MemberAccess	SimpleLogger ( ) . Write
>2210	Identifier	Write
>2211	CallExpression	SimpleLogger ( )
>2212	ArgumentList	 
>2213	Callee	SimpleLogger
>2214	Identifier	SimpleLogger
>2215	ExpressionStatement	 
>2216		SimpleLogger ( ) . Write ( ) << \"Node-based graph contains \" << node_based_edge_counter << \" edges\"type
>2217	ShiftExpression	\"Node-based graph contains \" << node_based_edge_counter << \" edges\"
>2218	ShiftExpression	node_based_edge_counter << \" edges\"
>2219	PrimaryExpression	\" edges\"
>2220	Identifier	node_based_edge_counter
>2221	PrimaryExpression	\"Node-based graph contains \"
>2222	CallExpression	SimpleLogger ( ) . Write ( )
>2223	ArgumentList	 
>2224	Callee	SimpleLogger ( ) . Write
>2225	MemberAccess	SimpleLogger ( ) . Write
>2226	Identifier	Write
>2227	CallExpression	SimpleLogger ( )
>2228	ArgumentList	 
>2229	Callee	SimpleLogger
>2230	Identifier	SimpleLogger
>2231	ExpressionStatement	 
>2232	ShiftExpression	SimpleLogger ( ) . Write ( ) << \"Generated \" << m_edge_based_node_list . size ( ) << \" edge based nodes\"\
>2233	ShiftExpression	\"Generated \" << m_edge_based_node_list . size ( ) << \" edge based nodes\"
>2234	ShiftExpression	m_edge_based_node_list . size ( ) << \" edge based nodes\"
>2235	PrimaryExpression	\" edge based nodes\"
>2236	CallExpression	m_edge_based_node_list . size ( )
>2237	ArgumentList	 
>2238	Callee	m_edge_based_node_list . size
>2239	MemberAccess	m_edge_based_node_list . size
>2240	Identifier	size
>2241	Identifier	m_edge_based_node_list
>2242	PrimaryExpression	\"Generated \"
>2243	CallExpression	SimpleLogger ( ) . Write ( )
>2244	ArgumentList	 
>2245	Callee	SimpleLogger ( ) . Write
>2246	MemberAccess	SimpleLogger ( ) . Write
>2247	Identifier	Write
>2248	CallExpression	SimpleLogger ( )
>2249	ArgumentList	 
>2250	Callee	SimpleLogger
>2251	Identifier	SimpleLogger
>2252	ExpressionStatement	 
>2253	CallExpression	edge_data_file . close ( )
>2254	ArgumentList	 
>2255	Callee	edge_data_file . close
>2256	MemberAccess	edge_data_file . close
>2257	Identifier	close
>2258	Identifier	edge_data_file
>2259	ExpressionStatement	 
>2260	CallExpression	edge_data_file . write ( ( char * ) & original_edges_counter , sizeof ( unsigned ) )
>2261	ArgumentList	( char * ) & original_edges_counter
>2262	Argument	sizeof ( unsigned )
>2263	SizeofExpr	sizeof ( unsigned )
>2264	SizeofOperand	unsigned
>2265	Sizeof	sizeof
>2266	Argument	( char * ) & original_edges_counter
>2267	CastExpression	( char * ) & original_edges_counter
>2268	UnaryOp	& original_edges_counter
>2269	Identifier	original_edges_counter
>2270	UnaryOperator	&
>2271	CastTarget	char *
>2272	Callee	edge_data_file . write
>2273	MemberAccess	edge_data_file . write
>2274	Identifier	write
>2275	Identifier	edge_data_file
>2276	ExpressionStatement	 
>2277	CallExpression	edge_data_file . seekp ( std 
>2278	ArgumentList	std 
>2279	Argument	std 
>2280	Identifier	std 
>2281	Callee	edge_data_file . seekp
>2282	MemberAccess	edge_data_file . seekp
>2283	Identifier	seekp
>2284	Identifier	edge_data_file
>2285	ExpressionStatement	 
>2286	CallExpression	FlushVectorToStream ( edge_data_file , original_edge_data_vector )
>2287	ArgumentList	edge_data_file
>2288	Argument	original_edge_data_vector
>2289	Identifier	original_edge_data_vector
>2290	Argument	edge_data_file
>2291	Identifier	edge_data_file
>2292	Callee	FlushVectorToStream
>2293	Identifier	FlushVectorToStream
>2294	CompoundStatement	 
>2295	CompoundStatement	 
>2296	CompoundStatement	 
>2297	ExpressionStatement	 
>2298	CallExpression	m_edge_based_edge_list . emplace_back ( EdgeBasedEdge ( edge_data1 . edgeBasedNodeID , edge_data2 . edgeBasedNodeID , \
>2299	ArgumentList	EdgeBasedEdge ( edge_data1 . edgeBasedNodeID , edge_data2 . edgeBasedNodeID , m_edge_based_edge_list . size ( ) , \
>2300	Argument	EdgeBasedEdge ( edge_data1 . edgeBasedNodeID , edge_data2 . edgeBasedNodeID , m_edge_based_edge_list . size ( ) , \
>2301	CallExpression	EdgeBasedEdge ( edge_data1 . edgeBasedNodeID , edge_data2 . edgeBasedNodeID , m_edge_based_edge_list . size ( ) , \
>2302	ArgumentList	edge_data1 . edgeBasedNodeID
>2303	Argument	false
>2304	Identifier	false
>2305	Argument	true
>2306	Identifier	true
>2307	Argument	distance
>2308	Identifier	distance
>2309	Argument	m_edge_based_edge_list . size ( )
>2310	CallExpression	m_edge_based_edge_list . size ( )
>2311	ArgumentList	 
>2312	Callee	m_edge_based_edge_list . size
>2313	MemberAccess	m_edge_based_edge_list . size
>2314	Identifier	size
>2315	Identifier	m_edge_based_edge_list
>2316	Argument	edge_data2 . edgeBasedNodeID
>2317	MemberAccess	edge_data2 . edgeBasedNodeID
>2318	Identifier	edgeBasedNodeID
>2319	Identifier	edge_data2
>2320	Argument	edge_data1 . edgeBasedNodeID
>2321	MemberAccess	edge_data1 . edgeBasedNodeID
>2322	Identifier	edgeBasedNodeID
>2323	Identifier	edge_data1
>2324	Callee	EdgeBasedEdge
>2325	Identifier	EdgeBasedEdge
>2326	Callee	m_edge_based_edge_list . emplace_back
>2327	MemberAccess	m_edge_based_edge_list . emplace_back
>2328	Identifier	emplace_back
>2329	Identifier	m_edge_based_edge_list
>2330	ExpressionStatement	 
>2331	CallExpression	BOOST_ASSERT ( SPECIAL_NODEID != edge_data2 . edgeBasedNodeID )
>2332	ArgumentList	SPECIAL_NODEID != edge_data2 . edgeBasedNodeID
>2333	Argument	SPECIAL_NODEID != edge_data2 . edgeBasedNodeID
>2334	EqualityExpression	SPECIAL_NODEID != edge_data2 . edgeBasedNodeID
>2335	MemberAccess	edge_data2 . edgeBasedNodeID
>2336	Identifier	edgeBasedNodeID
>2337	Identifier	edge_data2
>2338	Identifier	SPECIAL_NODEID
>2339	Callee	BOOST_ASSERT
>2340	Identifier	BOOST_ASSERT
>2341	ExpressionStatement	 
>2342	CallExpression	BOOST_ASSERT ( SPECIAL_NODEID != edge_data1 . edgeBasedNodeID )
>2343	ArgumentList	SPECIAL_NODEID != edge_data1 . edgeBasedNodeID
>2344	Argument	SPECIAL_NODEID != edge_data1 . edgeBasedNodeID
>2345	EqualityExpression	SPECIAL_NODEID != edge_data1 . edgeBasedNodeID
>2346	MemberAccess	edge_data1 . edgeBasedNodeID
>2347	Identifier	edgeBasedNodeID
>2348	Identifier	edge_data1
>2349	Identifier	SPECIAL_NODEID
>2350	Callee	BOOST_ASSERT
>2351	Identifier	BOOST_ASSERT
>2352	IfStatement	if ( original_edge_data_vector . size ( ) > 1024 * 1024 * 10 )
>2353	CompoundStatement	 
>2354	ExpressionStatement	 
>2355	CallExpression	FlushVectorToStream ( edge_data_file , original_edge_data_vector )
>2356	ArgumentList	edge_data_file
>2357	Argument	original_edge_data_vector
>2358	Identifier	original_edge_data_vector
>2359	Argument	edge_data_file
>2360	Identifier	edge_data_file
>2361	Callee	FlushVectorToStream
>2362	Identifier	FlushVectorToStream
>2363	Condition	 
>2364	RelationalExpression	original_edge_data_vector . size ( ) > 1024 * 1024 * 10
>2365	MultiplicativeExpression	1024 * 1024 * 10
>2366	MultiplicativeExpression	1024 * 10
>2367	PrimaryExpression	10
>2368	PrimaryExpression	1024
>2369	PrimaryExpression	1024
>2370	CallExpression	original_edge_data_vector . size ( )
>2371	ArgumentList	 
>2372	Callee	original_edge_data_vector . size
>2373	MemberAccess	original_edge_data_vector . size
>2374	Identifier	size
>2375	Identifier	original_edge_data_vector
>2376	ExpressionStatement	 
>2377	UnaryExpression	++ original_edges_counter
>2378	Identifier	original_edges_counter
>2379	IncDec	++
>2380	ExpressionStatement	 
>2381	CallExpression	original_edge_data_vector . emplace_back ( ( edge_is_compressed ? m_geometry_compressor . GetPositionForID ( e1 ) 
>2382	ArgumentList	edge_is_compressed ? m_geometry_compressor . GetPositionForID ( e1 ) 
>2383	Argument	edge_data2 . travel_mode
>2384	MemberAccess	edge_data2 . travel_mode
>2385	Identifier	travel_mode
>2386	Identifier	edge_data2
>2387	Argument	edge_is_compressed
>2388	Identifier	edge_is_compressed
>2389	Argument	turn_instruction
>2390	Identifier	turn_instruction
>2391	Argument	edge_data1 . nameID
>2392	MemberAccess	edge_data1 . nameID
>2393	Identifier	nameID
>2394	Identifier	edge_data1
>2395	Argument	edge_is_compressed ? m_geometry_compressor . GetPositionForID ( e1 ) 
>2396	ConditionalExpression	edge_is_compressed ? m_geometry_compressor . GetPositionForID ( e1 ) 
>2397	Identifier	node_v
>2398	CallExpression	m_geometry_compressor . GetPositionForID ( e1 )
>2399	ArgumentList	e1
>2400	Argument	e1
>2401	Identifier	e1
>2402	Callee	m_geometry_compressor . GetPositionForID
>2403	MemberAccess	m_geometry_compressor . GetPositionForID
>2404	Identifier	GetPositionForID
>2405	Identifier	m_geometry_compressor
>2406	Condition	edge_is_compressed
>2407	Identifier	edge_is_compressed
>2408	Callee	original_edge_data_vector . emplace_back
>2409	MemberAccess	original_edge_data_vector . emplace_back
>2410	Identifier	emplace_back
>2411	Identifier	original_edge_data_vector
>2412	IfStatement	if ( edge_is_compressed )
>2413	CompoundStatement	 
>2414	ExpressionStatement	 
>2415	UnaryExpression	++ compressed
>2416	Identifier	compressed
>2417	IncDec	++
>2418	Condition	 
>2419	Identifier	edge_is_compressed
>2420	IdentifierDeclStatement	 
>2421	IdentifierDecl	edge_is_compressed = m_geometry_compressor . HasEntryForID ( e1 )
>2422	AssignmentExpr	edge_is_compressed = m_geometry_compressor . HasEntryForID ( e1 )
>2423	CallExpression	m_geometry_compressor . HasEntryForID ( e1 )
>2424	ArgumentList	e1
>2425	Argument	e1
>2426	Identifier	e1
>2427	Callee	m_geometry_compressor . HasEntryForID
>2428	MemberAccess	m_geometry_compressor . HasEntryForID
>2429	Identifier	HasEntryForID
>2430	Identifier	m_geometry_compressor
>2431	Identifier	edge_is_compressed
>2432	Identifier	edge_is_compressed
>2433	IdentifierDeclType	const bool
>2434	ExpressionStatement	 
>2435	AssignmentExpr	distance += turn_penalty
>2436	Identifier	turn_penalty
>2437	Identifier	distance
>2438	IfStatement	if ( turn_instruction == TurnInstruction 
>2439	CompoundStatement	 
>2440	ExpressionStatement	 
>2441	AssignmentExpr	distance += speed_profile . u_turn_penalty
>2442	MemberAccess	speed_profile . u_turn_penalty
>2443	Identifier	u_turn_penalty
>2444	Identifier	speed_profile
>2445	Identifier	distance
>2446	Condition	 
>2447	EqualityExpression	turn_instruction == TurnInstruction 
>2448	Identifier	TurnInstruction 
>2449	Identifier	turn_instruction
>2450	IdentifierDeclStatement	 
>2451	IdentifierDecl	turn_instruction = AnalyzeTurn ( node_u , node_v , node_w , turn_angle )
>2452	AssignmentExpr	turn_instruction = AnalyzeTurn ( node_u , node_v , node_w , turn_angle )
>2453	CallExpression	AnalyzeTurn ( node_u , node_v , node_w , turn_angle )
>2454	ArgumentList	node_u
>2455	Argument	turn_angle
>2456	Identifier	turn_angle
>2457	Argument	node_w
>2458	Identifier	node_w
>2459	Argument	node_v
>2460	Identifier	node_v
>2461	Argument	node_u
>2462	Identifier	node_u
>2463	Callee	AnalyzeTurn
>2464	Identifier	AnalyzeTurn
>2465	Identifier	turn_instruction
>2466	Identifier	turn_instruction
>2467	IdentifierDeclType	TurnInstruction
>2468	IdentifierDeclStatement	 
>2469	IdentifierDecl	turn_penalty = GetTurnPenalty ( turn_angle , lua_state )
>2470	AssignmentExpr	turn_penalty = GetTurnPenalty ( turn_angle , lua_state )
>2471	CallExpression	GetTurnPenalty ( turn_angle , lua_state )
>2472	ArgumentList	turn_angle
>2473	Argument	lua_state
>2474	Identifier	lua_state
>2475	Argument	turn_angle
>2476	Identifier	turn_angle
>2477	Callee	GetTurnPenalty
>2478	Identifier	GetTurnPenalty
>2479	Identifier	turn_penalty
>2480	Identifier	turn_penalty
>2481	IdentifierDeclType	const int
>2482	IdentifierDeclStatement	 
>2483	IdentifierDecl	turn_angle = ComputeAngle 
>2484	AssignmentExpr	turn_angle = ComputeAngle 
>2485	CallExpression	ComputeAngle 
>2486	ArgumentList	first_coordinate
>2487	Argument	third_coordinate
>2488	Identifier	third_coordinate
>2489	Argument	m_node_info_list [ node_v ]
>2490	ArrayIndexing	m_node_info_list [ node_v ]
>2491	Identifier	node_v
>2492	Identifier	m_node_info_list
>2493	Argument	first_coordinate
>2494	Identifier	first_coordinate
>2495	Callee	ComputeAngle 
>2496	Identifier	ComputeAngle 
>2497	Identifier	turn_angle
>2498	Identifier	turn_angle
>2499	IdentifierDeclType	const double
>2500	ExpressionStatement	 
>2501	AssignmentExpr	third_coordinate = m_node_info_list [ ( m_geometry_compressor . HasEntryForID ( e2 ) ? m_geometry_compressor \
>2502	ArrayIndexing	m_node_info_list [ ( m_geometry_compressor . HasEntryForID ( e2 ) ? m_geometry_compressor . GetFirstNodeIDOfBucket ( \
>2503	ConditionalExpression	m_geometry_compressor . HasEntryForID ( e2 ) ? m_geometry_compressor . GetFirstNodeIDOfBucket ( e2 ) 
>2504	Identifier	node_w
>2505	CallExpression	m_geometry_compressor . GetFirstNodeIDOfBucket ( e2 )
>2506	ArgumentList	e2
>2507	Argument	e2
>2508	Identifier	e2
>2509	Callee	m_geometry_compressor . GetFirstNodeIDOfBucket
>2510	MemberAccess	m_geometry_compressor . GetFirstNodeIDOfBucket
>2511	Identifier	GetFirstNodeIDOfBucket
>2512	Identifier	m_geometry_compressor
>2513	Condition	m_geometry_compressor . HasEntryForID ( e2 )
>2514	CallExpression	m_geometry_compressor . HasEntryForID ( e2 )
>2515	ArgumentList	e2
>2516	Argument	e2
>2517	Identifier	e2
>2518	Callee	m_geometry_compressor . HasEntryForID
>2519	MemberAccess	m_geometry_compressor . HasEntryForID
>2520	Identifier	HasEntryForID
>2521	Identifier	m_geometry_compressor
>2522	Identifier	m_node_info_list
>2523	Identifier	third_coordinate
>2524	Statement	 
>2525	Statement	 
>2526	ExpressionStatement	 
>2527	AssignmentExpr	first_coordinate = m_node_info_list [ ( m_geometry_compressor . HasEntryForID ( e1 ) ? m_geometry_compressor \
>2528	ArrayIndexing	m_node_info_list [ ( m_geometry_compressor . HasEntryForID ( e1 ) ? m_geometry_compressor . GetLastNodeIDOfBucket ( \
>2529	ConditionalExpression	m_geometry_compressor . HasEntryForID ( e1 ) ? m_geometry_compressor . GetLastNodeIDOfBucket ( e1 ) 
>2530	Identifier	node_u
>2531	CallExpression	m_geometry_compressor . GetLastNodeIDOfBucket ( e1 )
>2532	ArgumentList	e1
>2533	Argument	e1
>2534	Identifier	e1
>2535	Callee	m_geometry_compressor . GetLastNodeIDOfBucket
>2536	MemberAccess	m_geometry_compressor . GetLastNodeIDOfBucket
>2537	Identifier	GetLastNodeIDOfBucket
>2538	Identifier	m_geometry_compressor
>2539	Condition	m_geometry_compressor . HasEntryForID ( e1 )
>2540	CallExpression	m_geometry_compressor . HasEntryForID ( e1 )
>2541	ArgumentList	e1
>2542	Argument	e1
>2543	Identifier	e1
>2544	Callee	m_geometry_compressor . HasEntryForID
>2545	MemberAccess	m_geometry_compressor . HasEntryForID
>2546	Identifier	HasEntryForID
>2547	Identifier	m_geometry_compressor
>2548	Identifier	m_node_info_list
>2549	Identifier	first_coordinate
>2550	Statement	 
>2551	Statement	 
>2552	IfStatement	if ( m_traffic_lights . find ( node_v ) != m_traffic_lights . end ( ) )
>2553	CompoundStatement	 
>2554	ExpressionStatement	 
>2555	AssignmentExpr	distance += speed_profile . traffic_signal_penalty
>2556	MemberAccess	speed_profile . traffic_signal_penalty
>2557	Identifier	traffic_signal_penalty
>2558	Identifier	speed_profile
>2559	Identifier	distance
>2560	Condition	 
>2561	EqualityExpression	m_traffic_lights . find ( node_v ) != m_traffic_lights . end ( )
>2562	CallExpression	m_traffic_lights . end ( )
>2563	ArgumentList	 
>2564	Callee	m_traffic_lights . end
>2565	MemberAccess	m_traffic_lights . end
>2566	Identifier	end
>2567	Identifier	m_traffic_lights
>2568	CallExpression	m_traffic_lights . find ( node_v )
>2569	ArgumentList	node_v
>2570	Argument	node_v
>2571	Identifier	node_v
>2572	Callee	m_traffic_lights . find
>2573	MemberAccess	m_traffic_lights . find
>2574	Identifier	find
>2575	Identifier	m_traffic_lights
>2576	IdentifierDeclStatement	 
>2577	IdentifierDecl	distance = edge_data1 . distance
>2578	AssignmentExpr	distance = edge_data1 . distance
>2579	MemberAccess	edge_data1 . distance
>2580	Identifier	distance
>2581	Identifier	edge_data1
>2582	Identifier	distance
>2583	Identifier	distance
>2584	IdentifierDeclType	unsigned
>2585	ExpressionStatement	 
>2586	CallExpression	BOOST_ASSERT ( edge_data2 . forward )
>2587	ArgumentList	edge_data2 . forward
>2588	Argument	edge_data2 . forward
>2589	MemberAccess	edge_data2 . forward
>2590	Identifier	forward
>2591	Identifier	edge_data2
>2592	Callee	BOOST_ASSERT
>2593	Identifier	BOOST_ASSERT
>2594	ExpressionStatement	 
>2595	CallExpression	BOOST_ASSERT ( edge_data1 . forward )
>2596	ArgumentList	edge_data1 . forward
>2597	Argument	edge_data1 . forward
>2598	MemberAccess	edge_data1 . forward
>2599	Identifier	forward
>2600	Identifier	edge_data1
>2601	Callee	BOOST_ASSERT
>2602	Identifier	BOOST_ASSERT
>2603	ExpressionStatement	 
>2604	CallExpression	BOOST_ASSERT ( edge_data1 . edgeBasedNodeID != edge_data2 . edgeBasedNodeID )
>2605	ArgumentList	edge_data1 . edgeBasedNodeID != edge_data2 . edgeBasedNodeID
>2606	Argument	edge_data1 . edgeBasedNodeID != edge_data2 . edgeBasedNodeID
>2607	EqualityExpression	edge_data1 . edgeBasedNodeID != edge_data2 . edgeBasedNodeID
>2608	MemberAccess	edge_data2 . edgeBasedNodeID
>2609	Identifier	edgeBasedNodeID
>2610	Identifier	edge_data2
>2611	MemberAccess	edge_data1 . edgeBasedNodeID
>2612	Identifier	edgeBasedNodeID
>2613	Identifier	edge_data1
>2614	Callee	BOOST_ASSERT
>2615	Identifier	BOOST_ASSERT
>2616	IdentifierDeclStatement	 
>2617	IdentifierDecl	& edge_data2 = m_node_based_graph -> GetEdgeData ( e2 )
>2618	AssignmentExpr	& edge_data2 = m_node_based_graph -> GetEdgeData ( e2 )
>2619	CallExpression	m_node_based_graph -> GetEdgeData ( e2 )
>2620	ArgumentList	e2
>2621	Argument	e2
>2622	Identifier	e2
>2623	Callee	m_node_based_graph -> GetEdgeData
>2624	PtrMemberAccess	m_node_based_graph -> GetEdgeData
>2625	Identifier	GetEdgeData
>2626	Identifier	m_node_based_graph
>2627	Identifier	edge_data2
>2628	Identifier	edge_data2
>2629	IdentifierDeclType	const EdgeData &
>2630	IdentifierDeclStatement	 
>2631	IdentifierDecl	& edge_data1 = m_node_based_graph -> GetEdgeData ( e1 )
>2632	AssignmentExpr	& edge_data1 = m_node_based_graph -> GetEdgeData ( e1 )
>2633	CallExpression	m_node_based_graph -> GetEdgeData ( e1 )
>2634	ArgumentList	e1
>2635	Argument	e1
>2636	Identifier	e1
>2637	Callee	m_node_based_graph -> GetEdgeData
>2638	PtrMemberAccess	m_node_based_graph -> GetEdgeData
>2639	Identifier	GetEdgeData
>2640	Identifier	m_node_based_graph
>2641	Identifier	edge_data1
>2642	Identifier	edge_data1
>2643	IdentifierDeclType	const EdgeData &
>2644	IfStatement	if ( m_restriction_map -> CheckIfTurnIsRestricted ( node_u , node_v , node_w ) && ( only_restriction_to_node == \
>2645	CompoundStatement	 
>2646	ContinueStatement	 
>2647	ExpressionStatement	 
>2648	UnaryExpression	++ restricted_turns_counter
>2649	Identifier	restricted_turns_counter
>2650	IncDec	++
>2651	Condition	 
>2652	AndExpression	m_restriction_map -> CheckIfTurnIsRestricted ( node_u , node_v , node_w ) && ( only_restriction_to_node == \
>2653	AndExpression	( only_restriction_to_node == SPECIAL_NODEID ) && ( node_w != only_restriction_to_node )
>2654	EqualityExpression	node_w != only_restriction_to_node
>2655	Identifier	only_restriction_to_node
>2656	Identifier	node_w
>2657	EqualityExpression	only_restriction_to_node == SPECIAL_NODEID
>2658	Identifier	SPECIAL_NODEID
>2659	Identifier	only_restriction_to_node
>2660	CallExpression	m_restriction_map -> CheckIfTurnIsRestricted ( node_u , node_v , node_w )
>2661	ArgumentList	node_u
>2662	Argument	node_w
>2663	Identifier	node_w
>2664	Argument	node_v
>2665	Identifier	node_v
>2666	Argument	node_u
>2667	Identifier	node_u
>2668	Callee	m_restriction_map -> CheckIfTurnIsRestricted
>2669	PtrMemberAccess	m_restriction_map -> CheckIfTurnIsRestricted
>2670	Identifier	CheckIfTurnIsRestricted
>2671	Identifier	m_restriction_map
>2672	IfStatement	if ( is_barrier_node )
>2673	ElseStatement	else
>2674	CompoundStatement	 
>2675	IfStatement	if ( ( node_u == node_w ) && ( m_node_based_graph -> GetOutDegree ( node_v ) > 1 ) )
>2676	CompoundStatement	 
>2677	ContinueStatement	 
>2678	ExpressionStatement	 
>2679	UnaryExpression	++ skipped_uturns_counter
>2680	Identifier	skipped_uturns_counter
>2681	IncDec	++
>2682	Condition	 
>2683	AndExpression	( node_u == node_w ) && ( m_node_based_graph -> GetOutDegree ( node_v ) > 1 )
>2684	RelationalExpression	m_node_based_graph -> GetOutDegree ( node_v ) > 1
>2685	PrimaryExpression	1
>2686	CallExpression	m_node_based_graph -> GetOutDegree ( node_v )
>2687	ArgumentList	node_v
>2688	Argument	node_v
>2689	Identifier	node_v
>2690	Callee	m_node_based_graph -> GetOutDegree
>2691	PtrMemberAccess	m_node_based_graph -> GetOutDegree
>2692	Identifier	GetOutDegree
>2693	Identifier	m_node_based_graph
>2694	EqualityExpression	node_u == node_w
>2695	Identifier	node_w
>2696	Identifier	node_u
>2697	CompoundStatement	 
>2698	IfStatement	if ( node_u != node_w )
>2699	CompoundStatement	 
>2700	ContinueStatement	 
>2701	ExpressionStatement	 
>2702	UnaryExpression	++ skipped_barrier_turns_counter
>2703	Identifier	skipped_barrier_turns_counter
>2704	IncDec	++
>2705	Condition	 
>2706	EqualityExpression	node_u != node_w
>2707	Identifier	node_w
>2708	Identifier	node_u
>2709	Condition	 
>2710	Identifier	is_barrier_node
>2711	IfStatement	if ( ( only_restriction_to_node != SPECIAL_NODEID ) && ( node_w != only_restriction_to_node ) )
>2712	CompoundStatement	 
>2713	ContinueStatement	 
>2714	ExpressionStatement	 
>2715	UnaryExpression	++ restricted_turns_counter
>2716	Identifier	restricted_turns_counter
>2717	IncDec	++
>2718	Condition	 
>2719	AndExpression	( only_restriction_to_node != SPECIAL_NODEID ) && ( node_w != only_restriction_to_node )
>2720	EqualityExpression	node_w != only_restriction_to_node
>2721	Identifier	only_restriction_to_node
>2722	Identifier	node_w
>2723	EqualityExpression	only_restriction_to_node != SPECIAL_NODEID
>2724	Identifier	SPECIAL_NODEID
>2725	Identifier	only_restriction_to_node
>2726	IdentifierDeclStatement	 
>2727	IdentifierDecl	node_w = m_node_based_graph -> GetTarget ( e2 )
>2728	AssignmentExpr	node_w = m_node_based_graph -> GetTarget ( e2 )
>2729	CallExpression	m_node_based_graph -> GetTarget ( e2 )
>2730	ArgumentList	e2
>2731	Argument	e2
>2732	Identifier	e2
>2733	Callee	m_node_based_graph -> GetTarget
>2734	PtrMemberAccess	m_node_based_graph -> GetTarget
>2735	Identifier	GetTarget
>2736	Identifier	m_node_based_graph
>2737	Identifier	node_w
>2738	Identifier	node_w
>2739	IdentifierDeclType	const NodeID
>2740	IfStatement	if ( ! m_node_based_graph -> GetEdgeData ( e2 ) . forward )
>2741	CompoundStatement	 
>2742	ContinueStatement	 
>2743	Condition	 
>2744	UnaryOp	! m_node_based_graph -> GetEdgeData ( e2 ) . forward
>2745	MemberAccess	m_node_based_graph -> GetEdgeData ( e2 ) . forward
>2746	Identifier	forward
>2747	CallExpression	m_node_based_graph -> GetEdgeData ( e2 )
>2748	ArgumentList	e2
>2749	Argument	e2
>2750	Identifier	e2
>2751	Callee	m_node_based_graph -> GetEdgeData
>2752	PtrMemberAccess	m_node_based_graph -> GetEdgeData
>2753	Identifier	GetEdgeData
>2754	Identifier	m_node_based_graph
>2755	UnaryOperator	!
>2756	Statement	 
>2757	Statement	 
>2758	Statement	 
>2759	Statement	 
>2760	Statement	 
>2761	Statement	 
>2762	Statement	 
>2763	Label	 
>2764	Identifier	e2
>2765	Statement	 
>2766	Statement	 
>2767	Statement	 
>2768	Statement	 
>2769	IdentifierDeclStatement	 
>2770	IdentifierDecl	is_barrier_node = m_barrier_nodes . find ( node_v ) != m_barrier_nodes . end ( )
>2771	AssignmentExpr	is_barrier_node = m_barrier_nodes . find ( node_v ) != m_barrier_nodes . end ( )
>2772	EqualityExpression	m_barrier_nodes . find ( node_v ) != m_barrier_nodes . end ( )
>2773	CallExpression	m_barrier_nodes . end ( )
>2774	ArgumentList	 
>2775	Callee	m_barrier_nodes . end
>2776	MemberAccess	m_barrier_nodes . end
>2777	Identifier	end
>2778	Identifier	m_barrier_nodes
>2779	CallExpression	m_barrier_nodes . find ( node_v )
>2780	ArgumentList	node_v
>2781	Argument	node_v
>2782	Identifier	node_v
>2783	Callee	m_barrier_nodes . find
>2784	MemberAccess	m_barrier_nodes . find
>2785	Identifier	find
>2786	Identifier	m_barrier_nodes
>2787	Identifier	is_barrier_node
>2788	Identifier	is_barrier_node
>2789	IdentifierDeclType	const bool
>2790	IdentifierDeclStatement	 
>2791	IdentifierDecl	only_restriction_to_node = m_restriction_map -> CheckForEmanatingIsOnlyTurn ( node_u , node_v )
>2792	AssignmentExpr	only_restriction_to_node = m_restriction_map -> CheckForEmanatingIsOnlyTurn ( node_u , node_v )
>2793	CallExpression	m_restriction_map -> CheckForEmanatingIsOnlyTurn ( node_u , node_v )
>2794	ArgumentList	node_u
>2795	Argument	node_v
>2796	Identifier	node_v
>2797	Argument	node_u
>2798	Identifier	node_u
>2799	Callee	m_restriction_map -> CheckForEmanatingIsOnlyTurn
>2800	PtrMemberAccess	m_restriction_map -> CheckForEmanatingIsOnlyTurn
>2801	Identifier	CheckForEmanatingIsOnlyTurn
>2802	Identifier	m_restriction_map
>2803	Identifier	only_restriction_to_node
>2804	Identifier	only_restriction_to_node
>2805	IdentifierDeclType	const NodeID
>2806	IdentifierDeclStatement	 
>2807	IdentifierDecl	node_v = m_node_based_graph -> GetTarget ( e1 )
>2808	AssignmentExpr	node_v = m_node_based_graph -> GetTarget ( e1 )
>2809	CallExpression	m_node_based_graph -> GetTarget ( e1 )
>2810	ArgumentList	e1
>2811	Argument	e1
>2812	Identifier	e1
>2813	Callee	m_node_based_graph -> GetTarget
>2814	PtrMemberAccess	m_node_based_graph -> GetTarget
>2815	Identifier	GetTarget
>2816	Identifier	m_node_based_graph
>2817	Identifier	node_v
>2818	Identifier	node_v
>2819	IdentifierDeclType	const NodeID
>2820	ExpressionStatement	 
>2821	UnaryExpression	++ node_based_edge_counter
>2822	Identifier	node_based_edge_counter
>2823	IncDec	++
>2824	IfStatement	if ( ! m_node_based_graph -> GetEdgeData ( e1 ) . forward )
>2825	CompoundStatement	 
>2826	ContinueStatement	 
>2827	Condition	 
>2828	UnaryOp	! m_node_based_graph -> GetEdgeData ( e1 ) . forward
>2829	MemberAccess	m_node_based_graph -> GetEdgeData ( e1 ) . forward
>2830	Identifier	forward
>2831	CallExpression	m_node_based_graph -> GetEdgeData ( e1 )
>2832	ArgumentList	e1
>2833	Argument	e1
>2834	Identifier	e1
>2835	Callee	m_node_based_graph -> GetEdgeData
>2836	PtrMemberAccess	m_node_based_graph -> GetEdgeData
>2837	Identifier	GetEdgeData
>2838	Identifier	m_node_based_graph
>2839	UnaryOperator	!
>2840	Statement	 
>2841	Statement	 
>2842	Statement	 
>2843	Statement	 
>2844	Statement	 
>2845	Statement	 
>2846	Statement	 
>2847	Label	 
>2848	Identifier	e1
>2849	Statement	 
>2850	Statement	 
>2851	Statement	 
>2852	Statement	 
>2853	ExpressionStatement	 
>2854	CallExpression	progress . printStatus ( node_u )
>2855	ArgumentList	node_u
>2856	Argument	node_u
>2857	Identifier	node_u
>2858	Callee	progress . printStatus
>2859	MemberAccess	progress . printStatus
>2860	Identifier	printStatus
>2861	Identifier	progress
>2862	Statement	 
>2863	Statement	 
>2864	Statement	 
>2865	Statement	 
>2866	Statement	 
>2867	Statement	 
>2868	Statement	 
>2869	Statement	 
>2870	Statement	 
>2871	Statement	 
>2872	Statement	 
>2873	Statement	 
>2874	Statement	 
>2875	Label	 
>2876	Identifier	node_u
>2877	Statement	 
>2878	Statement	 
>2879	Statement	 
>2880	Statement	 
>2881	IdentifierDeclStatement	 
>2882	IdentifierDecl	progress ( m_node_based_graph -> GetNumberOfNodes ( ) )
>2883	CallExpression	m_node_based_graph -> GetNumberOfNodes ( )
>2884	ArgumentList	 
>2885	Callee	m_node_based_graph -> GetNumberOfNodes
>2886	PtrMemberAccess	m_node_based_graph -> GetNumberOfNodes
>2887	Identifier	GetNumberOfNodes
>2888	Identifier	m_node_based_graph
>2889	Identifier	progress
>2890	IdentifierDeclType	Percent
>2891	IdentifierDeclStatement	 
>2892	IdentifierDecl	compressed = 0
>2893	AssignmentExpr	compressed = 0
>2894	PrimaryExpression	0
>2895	Identifier	compressed
>2896	Identifier	compressed
>2897	IdentifierDeclType	unsigned
>2898	IdentifierDeclStatement	 
>2899	IdentifierDecl	skipped_barrier_turns_counter = 0
>2900	AssignmentExpr	skipped_barrier_turns_counter = 0
>2901	PrimaryExpression	0
>2902	Identifier	skipped_barrier_turns_counter
>2903	Identifier	skipped_barrier_turns_counter
>2904	IdentifierDeclType	unsigned
>2905	IdentifierDeclStatement	 
>2906	IdentifierDecl	skipped_uturns_counter = 0
>2907	AssignmentExpr	skipped_uturns_counter = 0
>2908	PrimaryExpression	0
>2909	Identifier	skipped_uturns_counter
>2910	Identifier	skipped_uturns_counter
>2911	IdentifierDeclType	unsigned
>2912	IdentifierDeclStatement	 
>2913	IdentifierDecl	restricted_turns_counter = 0
>2914	AssignmentExpr	restricted_turns_counter = 0
>2915	PrimaryExpression	0
>2916	Identifier	restricted_turns_counter
>2917	Identifier	restricted_turns_counter
>2918	IdentifierDeclType	unsigned
>2919	ExpressionStatement	 
>2920	CallExpression	original_edge_data_vector . reserve ( 1024 * 1024 )
>2921	ArgumentList	1024 * 1024
>2922	Argument	1024 * 1024
>2923	MultiplicativeExpression	1024 * 1024
>2924	PrimaryExpression	1024
>2925	PrimaryExpression	1024
>2926	Callee	original_edge_data_vector . reserve
>2927	MemberAccess	original_edge_data_vector . reserve
>2928	Identifier	reserve
>2929	Identifier	original_edge_data_vector
>2930	IdentifierDeclStatement	 
>2931	IdentifierDecl	original_edge_data_vector
>2932	Identifier	original_edge_data_vector
>2933	IdentifierDeclType	std 
>2934	ExpressionStatement	 
>2935	CallExpression	edge_data_file . write ( ( char * ) & original_edges_counter , sizeof ( unsigned ) )
>2936	ArgumentList	( char * ) & original_edges_counter
>2937	Argument	sizeof ( unsigned )
>2938	SizeofExpr	sizeof ( unsigned )
>2939	SizeofOperand	unsigned
>2940	Sizeof	sizeof
>2941	Argument	( char * ) & original_edges_counter
>2942	CastExpression	( char * ) & original_edges_counter
>2943	UnaryOp	& original_edges_counter
>2944	Identifier	original_edges_counter
>2945	UnaryOperator	&
>2946	CastTarget	char *
>2947	Callee	edge_data_file . write
>2948	MemberAccess	edge_data_file . write
>2949	Identifier	write
>2950	Identifier	edge_data_file
>2951	IdentifierDeclStatement	 
>2952	IdentifierDecl	edge_data_file ( original_edge_data_filename . c_str ( ) , std 
>2953	Expression	original_edge_data_filename . c_str ( ) , std 
>2954	Identifier	std 
>2955	CallExpression	original_edge_data_filename . c_str ( )
>2956	ArgumentList	 
>2957	Callee	original_edge_data_filename . c_str
>2958	MemberAccess	original_edge_data_filename . c_str
>2959	Identifier	c_str
>2960	Identifier	original_edge_data_filename
>2961	Identifier	edge_data_file
>2962	IdentifierDeclType	std 
>2963	IdentifierDeclStatement	 
>2964	IdentifierDecl	original_edges_counter = 0
>2965	AssignmentExpr	original_edges_counter = 0
>2966	PrimaryExpression	0
>2967	Identifier	original_edges_counter
>2968	Identifier	original_edges_counter
>2969	IdentifierDeclType	unsigned
>2970	IdentifierDeclStatement	 
>2971	IdentifierDecl	node_based_edge_counter = 0
>2972	AssignmentExpr	node_based_edge_counter = 0
>2973	PrimaryExpression	0
>2974	Identifier	node_based_edge_counter
>2975	Identifier	node_based_edge_counter
>2976	IdentifierDeclType	unsigned
>2977	ExpressionStatement	 
>2978	ShiftExpression	SimpleLogger ( ) . Write ( ) << \"generating edge-expanded edges\"
>2979	PrimaryExpression	\"generating edge-expanded edges\"
>2980	CallExpression	SimpleLogger ( ) . Write ( )
>2981	ArgumentList	 
>2982	Callee	SimpleLogger ( ) . Write
>2983	MemberAccess	SimpleLogger ( ) . Write
>2984	Identifier	Write
>2985	CallExpression	SimpleLogger ( )
>2986	ArgumentList	 
>2987	Callee	SimpleLogger
>2988	Identifier	SimpleLogger
>3076	FunctionDef	EdgeBasedGraphFactory 
>3077	ParameterList	double angle , lua_State * lua_state
>3078	Parameter	 
>3079	Identifier	lua_state
>3080	ParameterType	lua_State *
>3081	Parameter	 
>3082	Identifier	angle
>3083	ParameterType	double
>3084	ReturnType	int
>3085	CompoundStatement	 
>3086	ReturnStatement	 
>3087	PrimaryExpression	0
>3088	IfStatement	if ( speed_profile . has_turn_penalty_function )
>3089	CompoundStatement	 
>3090	BlockStarter	 
>3091	CompoundStatement	 
>3092	ExpressionStatement	SimpleLogger ( ) . Write ( logWARNING ) << er . what ( )
>3093	ShiftExpression	SimpleLogger ( ) . Write ( logWARNING ) << er . what ( )
>3094	CallExpression	er . what ( )
>3095	ArgumentList	 
>3096	Callee	er . what
>3097	MemberAccess	er . what
>3098	Identifier	what
>3099	Identifier	er
>3100	CallExpression	SimpleLogger ( ) . Write ( logWARNING )
>3101	ArgumentList	logWARNING
>3102	Argument	logWARNING
>3103	Identifier	logWARNING
>3104	Callee	SimpleLogger ( ) . Write
>3105	MemberAccess	SimpleLogger ( ) . Write
>3106	Identifier	Write
>3107	CallExpression	SimpleLogger ( )
>3108	ArgumentList	 
>3109	Callee	SimpleLogger
>3110	Identifier	SimpleLogger
>3111	Identifier	er
>3112	BlockStarter	 
>3113	CompoundStatement	 
>3114	ReturnStatement	return luabind 
>3115	RelationalExpression	luabind 
>3116	RelationalExpression	int > ( lua_state , \"turn_function\" , 180. - angle )
>3117	Expression	lua_state , \"turn_function\" , 180. - angle
>3118	Expression	\"turn_function\" , 180. - angle
>3119	AdditiveExpression	180. - angle
>3120	Identifier	angle
>3121	PrimaryExpression	180.
>3122	PrimaryExpression	\"turn_function\"
>3123	Identifier	lua_state
>3124	Identifier	int
>3125	Identifier	luabind 
>3126	Condition	 
>3127	MemberAccess	speed_profile . has_turn_penalty_function
>3128	Identifier	has_turn_penalty_function
>3129	Identifier	speed_profile
>3142	FunctionDef	EdgeBasedGraphFactory 
>3143	ParameterList	const NodeID node_u , const NodeID node_v , const NodeID node_w , const double angle
>3144	Parameter	 
>3145	Identifier	angle
>3146	ParameterType	const double
>3147	Parameter	 
>3148	Identifier	node_w
>3149	ParameterType	const NodeID
>3150	Parameter	 
>3151	Identifier	node_v
>3152	ParameterType	const NodeID
>3153	Parameter	 
>3154	Identifier	node_u
>3155	ParameterType	const NodeID
>3156	ReturnType	TurnInstruction
>3157	CompoundStatement	 
>3158	ReturnStatement	 
>3159	CallExpression	TurnInstructionsClass 
>3160	ArgumentList	angle
>3161	Argument	angle
>3162	Identifier	angle
>3163	Callee	TurnInstructionsClass 
>3164	Identifier	TurnInstructionsClass 
>3165	IfStatement	if ( data1 . nameID == data2 . nameID )
>3166	CompoundStatement	 
>3167	IfStatement	if ( 0 != data1 . nameID || m_node_based_graph -> GetOutDegree ( node_v ) <= 2 )
>3168	CompoundStatement	 
>3169	ReturnStatement	 
>3170	Identifier	TurnInstruction 
>3171	Condition	 
>3172	OrExpression	0 != data1 . nameID || m_node_based_graph -> GetOutDegree ( node_v ) <= 2
>3173	RelationalExpression	m_node_based_graph -> GetOutDegree ( node_v ) <= 2
>3174	PrimaryExpression	2
>3175	CallExpression	m_node_based_graph -> GetOutDegree ( node_v )
>3176	ArgumentList	node_v
>3177	Argument	node_v
>3178	Identifier	node_v
>3179	Callee	m_node_based_graph -> GetOutDegree
>3180	PtrMemberAccess	m_node_based_graph -> GetOutDegree
>3181	Identifier	GetOutDegree
>3182	Identifier	m_node_based_graph
>3183	EqualityExpression	0 != data1 . nameID
>3184	MemberAccess	data1 . nameID
>3185	Identifier	nameID
>3186	Identifier	data1
>3187	PrimaryExpression	0
>3188	Condition	 
>3189	EqualityExpression	data1 . nameID == data2 . nameID
>3190	MemberAccess	data2 . nameID
>3191	Identifier	nameID
>3192	Identifier	data2
>3193	MemberAccess	data1 . nameID
>3194	Identifier	nameID
>3195	Identifier	data1
>3196	IfStatement	if ( data1 . roundabout || data2 . roundabout )
>3197	CompoundStatement	 
>3198	IfStatement	if ( data1 . roundabout && ( ! data2 . roundabout ) )
>3199	CompoundStatement	 
>3200	ReturnStatement	 
>3201	Identifier	TurnInstruction 
>3202	Condition	 
>3203	AndExpression	data1 . roundabout && ( ! data2 . roundabout )
>3204	UnaryOp	! data2 . roundabout
>3205	MemberAccess	data2 . roundabout
>3206	Identifier	roundabout
>3207	Identifier	data2
>3208	UnaryOperator	!
>3209	MemberAccess	data1 . roundabout
>3210	Identifier	roundabout
>3211	Identifier	data1
>3212	IfStatement	if ( ( ! data1 . roundabout ) && data2 . roundabout )
>3213	CompoundStatement	 
>3214	ReturnStatement	 
>3215	Identifier	TurnInstruction 
>3216	Condition	 
>3217	AndExpression	( ! data1 . roundabout ) && data2 . roundabout
>3218	MemberAccess	data2 . roundabout
>3219	Identifier	roundabout
>3220	Identifier	data2
>3221	UnaryOp	! data1 . roundabout
>3222	MemberAccess	data1 . roundabout
>3223	Identifier	roundabout
>3224	Identifier	data1
>3225	UnaryOperator	!
>3226	Condition	 
>3227	OrExpression	data1 . roundabout || data2 . roundabout
>3228	MemberAccess	data2 . roundabout
>3229	Identifier	roundabout
>3230	Identifier	data2
>3231	MemberAccess	data1 . roundabout
>3232	Identifier	roundabout
>3233	Identifier	data1
>3234	IfStatement	if ( data1 . roundabout && data2 . roundabout )
>3235	CompoundStatement	 
>3236	ReturnStatement	 
>3237	Identifier	TurnInstruction 
>3238	IfStatement	if ( 1 == m_node_based_graph -> GetDirectedOutDegree ( node_v ) )
>3239	CompoundStatement	 
>3240	ReturnStatement	 
>3241	Identifier	TurnInstruction 
>3242	Condition	 
>3243	EqualityExpression	1 == m_node_based_graph -> GetDirectedOutDegree ( node_v )
>3244	CallExpression	m_node_based_graph -> GetDirectedOutDegree ( node_v )
>3245	ArgumentList	node_v
>3246	Argument	node_v
>3247	Identifier	node_v
>3248	Callee	m_node_based_graph -> GetDirectedOutDegree
>3249	PtrMemberAccess	m_node_based_graph -> GetDirectedOutDegree
>3250	Identifier	GetDirectedOutDegree
>3251	Identifier	m_node_based_graph
>3252	PrimaryExpression	1
>3253	Condition	 
>3254	AndExpression	data1 . roundabout && data2 . roundabout
>3255	MemberAccess	data2 . roundabout
>3256	Identifier	roundabout
>3257	Identifier	data2
>3258	MemberAccess	data1 . roundabout
>3259	Identifier	roundabout
>3260	Identifier	data1
>3261	IdentifierDeclStatement	 
>3262	IdentifierDecl	& data2 = m_node_based_graph -> GetEdgeData ( edge2 )
>3263	AssignmentExpr	& data2 = m_node_based_graph -> GetEdgeData ( edge2 )
>3264	CallExpression	m_node_based_graph -> GetEdgeData ( edge2 )
>3265	ArgumentList	edge2
>3266	Argument	edge2
>3267	Identifier	edge2
>3268	Callee	m_node_based_graph -> GetEdgeData
>3269	PtrMemberAccess	m_node_based_graph -> GetEdgeData
>3270	Identifier	GetEdgeData
>3271	Identifier	m_node_based_graph
>3272	Identifier	data2
>3273	Identifier	data2
>3274	IdentifierDeclType	const EdgeData &
>3275	IdentifierDeclStatement	 
>3276	IdentifierDecl	& data1 = m_node_based_graph -> GetEdgeData ( edge1 )
>3277	AssignmentExpr	& data1 = m_node_based_graph -> GetEdgeData ( edge1 )
>3278	CallExpression	m_node_based_graph -> GetEdgeData ( edge1 )
>3279	ArgumentList	edge1
>3280	Argument	edge1
>3281	Identifier	edge1
>3282	Callee	m_node_based_graph -> GetEdgeData
>3283	PtrMemberAccess	m_node_based_graph -> GetEdgeData
>3284	Identifier	GetEdgeData
>3285	Identifier	m_node_based_graph
>3286	Identifier	data1
>3287	Identifier	data1
>3288	IdentifierDeclType	const EdgeData &
>3289	IdentifierDeclStatement	 
>3290	IdentifierDecl	edge2 = m_node_based_graph -> FindEdge ( node_v , node_w )
>3291	AssignmentExpr	edge2 = m_node_based_graph -> FindEdge ( node_v , node_w )
>3292	CallExpression	m_node_based_graph -> FindEdge ( node_v , node_w )
>3293	ArgumentList	node_v
>3294	Argument	node_w
>3295	Identifier	node_w
>3296	Argument	node_v
>3297	Identifier	node_v
>3298	Callee	m_node_based_graph -> FindEdge
>3299	PtrMemberAccess	m_node_based_graph -> FindEdge
>3300	Identifier	FindEdge
>3301	Identifier	m_node_based_graph
>3302	Identifier	edge2
>3303	Identifier	edge2
>3304	IdentifierDeclType	const EdgeID
>3305	IdentifierDeclStatement	 
>3306	IdentifierDecl	edge1 = m_node_based_graph -> FindEdge ( node_u , node_v )
>3307	AssignmentExpr	edge1 = m_node_based_graph -> FindEdge ( node_u , node_v )
>3308	CallExpression	m_node_based_graph -> FindEdge ( node_u , node_v )
>3309	ArgumentList	node_u
>3310	Argument	node_v
>3311	Identifier	node_v
>3312	Argument	node_u
>3313	Identifier	node_u
>3314	Callee	m_node_based_graph -> FindEdge
>3315	PtrMemberAccess	m_node_based_graph -> FindEdge
>3316	Identifier	FindEdge
>3317	Identifier	m_node_based_graph
>3318	Identifier	edge1
>3319	Identifier	edge1
>3320	IdentifierDeclType	const EdgeID
>3321	IfStatement	if ( node_u == node_w )
>3322	CompoundStatement	 
>3323	ReturnStatement	 
>3324	Identifier	TurnInstruction 
>3325	Condition	 
>3326	EqualityExpression	node_u == node_w
>3327	Identifier	node_w
>3328	Identifier	node_u
>3356	FunctionDef	EdgeBasedGraphFactory 
>3357	ParameterList	 
>3358	ReturnType	unsigned
>3359	CompoundStatement	 
>3360	ReturnStatement	 
>3361	Identifier	m_number_of_edge_based_nodes
<3=9,8,4
<4=5
<5=7,6
<9=19,10
<10=11
<11=15,12
<12=13
<13=14
<15=16
<16=18,17
<19=20
<20=33,21
<21=24,22
<22=23
<24=25
<25=32,26
<26=28,27
<28=29
<29=31,30
<33=34
<41=47,46,42
<42=43
<43=45,44
<47=146,145,144,143,142,140,139,138,57,48
<48=49
<49=53,50
<50=51
<51=52
<53=54
<54=56,55
<57=118,98,78,58
<58=59
<59=76,60
<60=61
<61=62
<62=64,63
<64=66,65
<66=72,67
<67=68
<68=69
<69=71,70
<72=73
<73=75,74
<76=77
<78=79
<79=96,80
<80=81
<81=82
<82=84,83
<84=86,85
<86=92,87
<87=88
<88=89
<89=91,90
<92=93
<93=95,94
<96=97
<98=99
<99=116,100
<100=101
<101=102
<102=104,103
<104=106,105
<106=112,107
<107=108
<108=109
<109=111,110
<112=113
<113=115,114
<116=117
<118=119
<119=136,120
<120=121
<121=122
<122=124,123
<124=126,125
<126=132,127
<127=128
<128=129
<129=131,130
<132=133
<133=135,134
<136=137
<140=141
<186=195,194,187
<187=191,188
<188=190,189
<191=193,192
<195=229,203,196
<196=197
<197=199,198
<199=200
<200=202,201
<203=204
<204=225,205
<205=217,206
<206=207
<207=211,208
<208=210,209
<211=213,212
<213=214
<214=216,215
<217=218
<218=224,219
<219=223,220
<220=222,221
<225=226
<226=228,227
<229=232,230
<230=231
<232=233
<233=235,234
<235=236
<236=238,237
<247=259,258,248
<248=255,252,249
<249=251,250
<252=254,253
<255=257,256
<259=438,433,426,419,414,407,400,395,388,381,372,365,356,344,323,302,281,260
<260=261
<261=272,262
<262=271,263
<263=265,264
<265=269,266
<266=267
<267=268
<269=270
<272=274,273
<274=275
<275=277,276
<277=279,278
<279=280
<281=282
<282=293,283
<283=292,284
<284=286,285
<286=290,287
<287=288
<288=289
<290=291
<293=295,294
<295=296
<296=298,297
<298=300,299
<300=301
<302=303
<303=314,304
<304=313,305
<305=307,306
<307=311,308
<308=309
<309=310
<311=312
<314=316,315
<316=317
<317=319,318
<319=321,320
<321=322
<323=324
<324=335,325
<325=334,326
<326=328,327
<328=332,329
<329=330
<330=331
<332=333
<335=337,336
<337=338
<338=340,339
<340=342,341
<342=343
<344=345
<345=347,346
<347=349,348
<349=350
<350=352,351
<352=354,353
<354=355
<356=357
<357=361,358
<358=359
<359=360
<361=362
<362=364,363
<365=366
<366=370,367
<367=368
<368=369
<370=371
<372=373
<373=379,374
<374=377,375
<375=376
<377=378
<379=380
<381=382
<382=386,383
<383=384
<384=385
<386=387
<388=389
<389=393,390
<390=391
<391=392
<393=394
<395=396
<396=398,397
<398=399
<400=401
<401=405,402
<402=403
<403=404
<405=406
<407=408
<408=412,409
<409=410
<410=411
<412=413
<414=415
<415=417,416
<417=418
<419=420
<420=424,421
<421=422
<422=423
<424=425
<426=427
<427=431,428
<428=429
<429=430
<431=432
<433=434
<434=436,435
<436=437
<438=439
<439=443,440
<440=441
<441=442
<443=444
<457=460,459,458
<460=1499,1498,1486,1485,1473,1468,1467,1466,1465,1464,1462,1461,1460,1459,1458,1457,1456,1455,1454,1453,609,593,586,579,572,571,570,569,568,566,565,564,563,562,561,560,559,558,557,556,555,554,553,515,497,479,461
<461=462
<462=470,463
<463=469,464
<464=468,465
<465=467,466
<470=472,471
<472=473
<473=475,474
<475=477,476
<477=478
<479=480
<480=488,481
<481=487,482
<482=486,483
<483=485,484
<488=490,489
<490=491
<491=493,492
<493=495,494
<495=496
<497=498
<498=506,499
<499=505,500
<500=504,501
<501=503,502
<506=508,507
<508=509
<509=511,510
<511=513,512
<513=514
<515=516
<516=542,517
<517=538,518
<518=519
<519=537,520
<520=529,521
<521=525,522
<522=523
<523=524
<525=526
<526=528,527
<529=533,530
<530=531
<531=532
<533=534
<534=536,535
<538=539
<539=541,540
<542=543
<543=545,544
<545=549,546
<546=547
<547=548
<549=550
<550=552,551
<566=567
<572=573
<573=578,577,574
<574=576,575
<579=580
<580=585,584,581
<581=583,582
<586=587
<587=589,588
<589=590
<590=592,591
<593=594
<594=600,595
<595=599,596
<596=598,597
<600=602,601
<602=603
<603=605,604
<605=607,606
<607=608
<609=1444,1430,1411,1399,1374,1358,1349,1322,1304,1295,1268,1254,1240,1226,1217,1208,1194,1185,1176,1160,1151,1135,1119,1110,1094,1080,1066,1050,1031,610
<610=1013,611
<611=986,959,943,927,918,909,893,877,868,859,838,823,808,774,763,752,741,730,717,700,687,670,643,616,612
<612=613
<613=615,614
<616=617
<617=639,618
<618=637,635,633,631,629,619
<619=620
<620=628,621
<621=626,623,622
<623=625,624
<626=627
<629=630
<631=632
<633=634
<635=636
<637=638
<639=640
<640=642,641
<643=644
<644=666,645
<645=664,662,660,658,648,646
<646=647
<648=649
<649=657,650
<650=655,652,651
<652=654,653
<655=656
<658=659
<660=661
<662=663
<664=665
<666=667
<667=669,668
<670=671
<671=683,672
<672=681,679,677,673
<673=674
<674=676,675
<677=678
<679=680
<681=682
<683=684
<684=686,685
<687=688
<688=696,689
<689=694,692,690
<690=691
<692=693
<694=695
<696=697
<697=699,698
<700=701
<701=713,702
<702=711,709,707,703
<703=704
<704=706,705
<707=708
<709=710
<711=712
<713=714
<714=716,715
<717=718
<718=726,719
<719=724,722,720
<720=721
<722=723
<724=725
<726=727
<727=729,728
<730=731
<731=737,732
<732=735,733
<733=734
<735=736
<737=738
<738=740,739
<741=742
<742=748,743
<743=746,744
<744=745
<746=747
<748=749
<749=751,750
<752=753
<753=759,754
<754=757,755
<755=756
<757=758
<759=760
<760=762,761
<763=764
<764=770,765
<765=768,766
<766=767
<768=769
<770=771
<771=773,772
<774=806,775
<775=791,776
<776=777
<777=781,778
<778=780,779
<781=783,782
<783=787,784
<784=785
<785=786
<787=788
<788=790,789
<791=792
<792=796,793
<793=795,794
<796=798,797
<798=802,799
<799=800
<800=801
<802=803
<803=805,804
<806=807
<808=809
<809=813,810
<810=812,811
<813=815,814
<815=819,816
<816=817
<817=818
<819=820
<820=822,821
<823=824
<824=828,825
<825=827,826
<828=830,829
<830=834,831
<831=832
<832=833
<834=835
<835=837,836
<838=839
<839=858,857,840
<840=856,841
<841=848,842
<842=844,843
<844=845
<845=847,846
<848=852,849
<849=850
<850=851
<852=853
<853=855,854
<859=860
<860=866,861
<861=862
<862=863
<863=865,864
<866=867
<868=869
<869=875,870
<870=871
<871=872
<872=874,873
<875=876
<877=878
<878=892,891,879
<879=890,880
<880=882,881
<882=886,883
<883=884
<884=885
<886=887
<887=889,888
<893=894
<894=908,907,895
<895=906,896
<896=898,897
<898=902,899
<899=900
<900=901
<902=903
<903=905,904
<909=910
<910=916,911
<911=912
<912=913
<913=915,914
<916=917
<918=919
<919=925,920
<920=921
<921=922
<922=924,923
<925=926
<927=928
<928=942,941,929
<929=940,930
<930=932,931
<932=936,933
<933=934
<934=935
<936=937
<937=939,938
<943=944
<944=958,957,945
<945=956,946
<946=948,947
<948=952,949
<949=950
<950=951
<952=953
<953=955,954
<959=960
<960=984,961
<961=962
<962=963
<963=974,964
<964=966,965
<966=970,967
<967=968
<968=969
<970=971
<971=973,972
<974=976,975
<976=980,977
<977=978
<978=979
<980=981
<981=983,982
<984=985
<986=987
<987=1011,988
<988=989
<989=990
<990=1001,991
<991=993,992
<993=997,994
<994=995
<995=996
<997=998
<998=1000,999
<1001=1003,1002
<1003=1007,1004
<1004=1005
<1005=1006
<1007=1008
<1008=1010,1009
<1011=1012
<1013=1014
<1014=1023,1015
<1015=1019,1016
<1016=1017
<1017=1018
<1019=1020
<1020=1022,1021
<1023=1027,1024
<1024=1025
<1025=1026
<1027=1028
<1028=1030,1029
<1031=1034,1032
<1032=1033
<1034=1035
<1035=1043,1036
<1036=1040,1037
<1037=1039,1038
<1040=1042,1041
<1043=1047,1044
<1044=1046,1045
<1047=1049,1048
<1050=1053,1051
<1051=1052
<1053=1054
<1054=1056,1055
<1056=1062,1057
<1057=1060,1058
<1058=1059
<1060=1061
<1062=1063
<1063=1065,1064
<1066=1067
<1067=1079,1078,1068
<1068=1077,1069
<1069=1073,1070
<1070=1071
<1071=1072
<1073=1074
<1074=1076,1075
<1080=1081
<1081=1093,1092,1082
<1082=1091,1083
<1083=1087,1084
<1084=1085
<1085=1086
<1087=1088
<1088=1090,1089
<1094=1095
<1095=1108,1096
<1096=1097
<1097=1098
<1098=1107,1099
<1099=1103,1100
<1100=1101
<1101=1102
<1103=1104
<1104=1106,1105
<1108=1109
<1110=1111
<1111=1117,1112
<1112=1113
<1113=1114
<1114=1116,1115
<1117=1118
<1119=1120
<1120=1134,1133,1121
<1121=1132,1122
<1122=1128,1123
<1123=1126,1124
<1124=1125
<1126=1127
<1128=1129
<1129=1131,1130
<1135=1136
<1136=1149,1137
<1137=1138
<1138=1139
<1139=1148,1140
<1140=1144,1141
<1141=1142
<1142=1143
<1144=1145
<1145=1147,1146
<1149=1150
<1151=1152
<1152=1158,1153
<1153=1154
<1154=1155
<1155=1157,1156
<1158=1159
<1160=1161
<1161=1175,1174,1162
<1162=1173,1163
<1163=1169,1164
<1164=1167,1165
<1165=1166
<1167=1168
<1169=1170
<1170=1172,1171
<1176=1177
<1177=1183,1178
<1178=1179
<1179=1180
<1180=1182,1181
<1183=1184
<1185=1186
<1186=1192,1187
<1187=1188
<1188=1189
<1189=1191,1190
<1192=1193
<1194=1195
<1195=1207,1206,1196
<1196=1205,1197
<1197=1201,1198
<1198=1199
<1199=1200
<1201=1202
<1202=1204,1203
<1208=1209
<1209=1215,1210
<1210=1211
<1211=1212
<1212=1214,1213
<1215=1216
<1217=1218
<1218=1224,1219
<1219=1220
<1220=1221
<1221=1223,1222
<1224=1225
<1226=1227
<1227=1239,1238,1228
<1228=1237,1229
<1229=1233,1230
<1230=1231
<1231=1232
<1233=1234
<1234=1236,1235
<1240=1241
<1241=1253,1252,1242
<1242=1251,1243
<1243=1247,1244
<1244=1245
<1245=1246
<1247=1248
<1248=1250,1249
<1254=1255
<1255=1267,1266,1256
<1256=1265,1257
<1257=1261,1258
<1258=1259
<1259=1260
<1261=1262
<1262=1264,1263
<1268=1269
<1269=1293,1270
<1270=1271
<1271=1272
<1272=1283,1273
<1273=1282,1274
<1274=1278,1275
<1275=1276
<1276=1277
<1278=1279
<1279=1281,1280
<1283=1292,1284
<1284=1288,1285
<1285=1286
<1286=1287
<1288=1289
<1289=1291,1290
<1293=1294
<1295=1296
<1296=1302,1297
<1297=1298
<1298=1299
<1299=1301,1300
<1302=1303
<1304=1305
<1305=1321,1320,1306
<1306=1319,1307
<1307=1311,1308
<1308=1310,1309
<1311=1315,1312
<1312=1313
<1313=1314
<1315=1316
<1316=1318,1317
<1322=1323
<1323=1347,1324
<1324=1325
<1325=1326
<1326=1337,1327
<1327=1336,1328
<1328=1332,1329
<1329=1330
<1330=1331
<1332=1333
<1333=1335,1334
<1337=1346,1338
<1338=1342,1339
<1339=1340
<1340=1341
<1342=1343
<1343=1345,1344
<1347=1348
<1349=1350
<1350=1356,1351
<1351=1352
<1352=1353
<1353=1355,1354
<1356=1357
<1358=1359
<1359=1373,1372,1360
<1360=1371,1361
<1361=1363,1362
<1363=1367,1364
<1364=1365
<1365=1366
<1367=1368
<1368=1370,1369
<1374=1375
<1375=1398,1397,1376
<1376=1396,1377
<1377=1395,1378
<1378=1380,1379
<1380=1391,1381
<1381=1382
<1382=1383
<1383=1387,1384
<1384=1385
<1385=1386
<1387=1388
<1388=1390,1389
<1391=1392
<1392=1394,1393
<1399=1402,1400
<1400=1401
<1402=1403
<1403=1407,1404
<1404=1405
<1405=1406
<1407=1408
<1408=1410,1409
<1411=1414,1412
<1412=1413
<1414=1415
<1415=1424,1416
<1416=1420,1417
<1417=1418
<1418=1419
<1420=1421
<1421=1423,1422
<1424=1426,1425
<1426=1427
<1427=1429,1428
<1430=1433,1431
<1431=1432
<1433=1434
<1434=1443,1435
<1435=1439,1436
<1436=1437
<1437=1438
<1439=1440
<1440=1442,1441
<1444=1445
<1445=1449,1446
<1446=1447
<1447=1448
<1449=1450
<1450=1452,1451
<1462=1463
<1468=1469
<1469=1472,1471,1470
<1473=1474
<1474=1484,1483,1475
<1475=1482,1476
<1476=1478,1477
<1478=1479
<1479=1481,1480
<1486=1487
<1487=1497,1496,1488
<1488=1495,1489
<1489=1491,1490
<1491=1492
<1492=1494,1493
<1499=1500
<1500=1502,1501
<1502=1504,1503
<1504=1505
<1505=1507,1506
<1507=1509,1508
<1509=1510
<1581=1584,1583,1582
<1584=1681,1680,1679,1678,1677,1675,1674,1673,1672,1671,1670,1669,1668,1667,1666,1665,1664,1663,1662,1589,1585
<1585=1586
<1586=1588,1587
<1589=1661,1660,1659,1658,1656,1655,1654,1653,1652,1651,1650,1649,1590
<1590=1635,1626,1612,1606,1602,1591
<1591=1592
<1592=1600,1593
<1593=1594
<1594=1595
<1595=1599,1596
<1596=1598,1597
<1600=1601
<1602=1603
<1603=1605,1604
<1606=1607
<1607=1609,1608
<1609=1611,1610
<1612=1613
<1613=1624,1614
<1614=1615
<1615=1616
<1616=1623,1617
<1617=1619,1618
<1619=1620
<1620=1622,1621
<1624=1625
<1626=1629,1627
<1627=1628
<1629=1630
<1630=1634,1631
<1631=1633,1632
<1635=1636
<1636=1648,1647,1637
<1637=1646,1638
<1638=1642,1639
<1639=1640
<1640=1641
<1642=1643
<1643=1645,1644
<1656=1657
<1675=1676
<1681=1682
<1682=1687,1686,1683
<1683=1685,1684
<1703=1706,1705,1704
<1706=2077,2066,2059,2036,2013,2001,1991,1990,1989,1988,1987,1985,1984,1983,1982,1981,1980,1979,1978,1977,1976,1975,1974,1973,1972,1728,1707
<1707=1708
<1708=1719,1709
<1709=1718,1710
<1710=1712,1711
<1712=1714,1713
<1714=1715
<1715=1717,1716
<1719=1721,1720
<1721=1722
<1722=1724,1723
<1724=1726,1725
<1726=1727
<1728=1963,1949,1940,1939,1938,1937,1935,1934,1933,1932,1931,1930,1929,1928,1729
<1729=1914,1905,1891,1882,1875,1866,1865,1837,1836,1835,1834,1833,1832,1831,1830,1829,1828,1827,1826,1825,1786,1785,1784,1783,1774,1730
<1730=1768,1750,1731
<1731=1732
<1732=1733
<1733=1734
<1734=1748,1735
<1735=1746,1744,1736
<1736=1737
<1737=1742,1739,1738
<1739=1741,1740
<1742=1743
<1744=1745
<1746=1747
<1748=1749
<1750=1751
<1751=1752
<1752=1766,1753
<1753=1764,1762,1754
<1754=1755
<1755=1760,1757,1756
<1757=1759,1758
<1760=1761
<1762=1763
<1764=1765
<1766=1767
<1768=1769
<1769=1771,1770
<1771=1773,1772
<1774=1775
<1775=1782,1781,1776
<1776=1780,1777
<1777=1779,1778
<1786=1796,1787
<1787=1788
<1788=1792,1789
<1789=1790
<1790=1791
<1792=1793
<1793=1795,1794
<1796=1807,1797
<1797=1798
<1798=1799
<1799=1803,1800
<1800=1801
<1801=1802
<1803=1804
<1804=1806,1805
<1807=1808
<1808=1817,1809
<1809=1813,1810
<1810=1811
<1811=1812
<1813=1814
<1814=1816,1815
<1817=1821,1818
<1818=1819
<1819=1820
<1821=1822
<1822=1824,1823
<1837=1838
<1838=1864,1863,1839
<1839=1862,1840
<1840=1860,1841
<1841=1851,1842
<1842=1843
<1843=1847,1844
<1844=1845
<1845=1846
<1847=1848
<1848=1850,1849
<1851=1852
<1852=1856,1853
<1853=1854
<1854=1855
<1856=1857
<1857=1859,1858
<1860=1861
<1866=1867
<1867=1873,1868
<1868=1869
<1869=1870
<1870=1872,1871
<1873=1874
<1875=1878,1876
<1876=1877
<1878=1879
<1879=1881,1880
<1882=1883
<1883=1889,1884
<1884=1885
<1885=1886
<1886=1888,1887
<1889=1890
<1891=1892
<1892=1904,1903,1893
<1893=1902,1894
<1894=1898,1895
<1895=1896
<1896=1897
<1898=1899
<1899=1901,1900
<1905=1906
<1906=1912,1907
<1907=1908
<1908=1909
<1909=1911,1910
<1912=1913
<1914=1915
<1915=1927,1926,1916
<1916=1925,1917
<1917=1921,1918
<1918=1919
<1919=1920
<1921=1922
<1922=1924,1923
<1935=1936
<1940=1941
<1941=1945,1942
<1942=1943
<1943=1944
<1945=1946
<1946=1948,1947
<1949=1950
<1950=1961,1951
<1951=1952
<1952=1953
<1953=1960,1954
<1954=1956,1955
<1956=1957
<1957=1959,1958
<1961=1962
<1963=1964
<1964=1970,1965
<1965=1966
<1966=1967
<1967=1969,1968
<1970=1971
<1985=1986
<1991=1992
<1992=2000,1999,1993
<1993=1995,1994
<1995=1996
<1996=1998,1997
<2001=2002
<2002=2004,2003
<2004=2006,2005
<2006=2007
<2007=2009,2008
<2009=2011,2010
<2011=2012
<2013=2014
<2014=2027,2015
<2015=2026,2016
<2016=2018,2017
<2018=2020,2019
<2020=2022,2021
<2022=2023
<2023=2025,2024
<2027=2029,2028
<2029=2030
<2030=2032,2031
<2032=2034,2033
<2034=2035
<2036=2037
<2037=2050,2038
<2038=2049,2039
<2039=2041,2040
<2041=2043,2042
<2043=2045,2044
<2045=2046
<2046=2048,2047
<2050=2052,2051
<2052=2053
<2053=2055,2054
<2055=2057,2056
<2057=2058
<2059=2060
<2060=2062,2061
<2062=2063
<2063=2065,2064
<2066=2067
<2067=2076,2075,2068
<2068=2074,2069
<2069=2071,2070
<2071=2073,2072
<2077=2078
<2078=2080,2079
<2080=2082,2081
<2082=2083
<2083=2085,2084
<2085=2087,2086
<2087=2088
<2116=2125,2124,2117
<2117=2121,2118
<2118=2120,2119
<2121=2123,2122
<2125=2977,2970,2963,2951,2934,2126,2142,2158,2169,2170,2171,2172,2173,2174,2175,2176,2177,2178,2179,2180,2181,2182,2203,2215,2231,2252,2259,2276,2285,2294,2862,2863,2864,2865,2866,2867,2868,2869,2870,2871,2872,2873,2874,2875,2877,2878,2879,2880,2881,2891,2898,2905,2912,2919,2930
<2126=2127
<2127=2133,2128
<2128=2132,2129
<2129=2131,2130
<2133=2135,2134
<2135=2136
<2136=2138,2137
<2138=2140,2139
<2140=2141
<2142=2143
<2143=2149,2144
<2144=2148,2145
<2145=2147,2146
<2149=2151,2150
<2151=2152
<2152=2154,2153
<2154=2156,2155
<2156=2157
<2158=2159
<2159=2168,2160
<2160=2162,2161
<2162=2164,2163
<2164=2165
<2165=2167,2166
<2182=2183
<2183=2194,2184
<2184=2193,2185
<2185=2187,2186
<2187=2189,2188
<2189=2190
<2190=2192,2191
<2194=2196,2195
<2196=2197
<2197=2199,2198
<2199=2201,2200
<2201=2202
<2203=2204
<2204=2206,2205
<2206=2208,2207
<2208=2209
<2209=2211,2210
<2211=2213,2212
<2213=2214
<2215=2216
<2216=2222,2217
<2217=2221,2218
<2218=2220,2219
<2222=2224,2223
<2224=2225
<2225=2227,2226
<2227=2229,2228
<2229=2230
<2231=2232
<2232=2243,2233
<2233=2242,2234
<2234=2236,2235
<2236=2238,2237
<2238=2239
<2239=2241,2240
<2243=2245,2244
<2245=2246
<2246=2248,2247
<2248=2250,2249
<2250=2251
<2252=2253
<2253=2255,2254
<2255=2256
<2256=2258,2257
<2259=2260
<2260=2272,2261
<2261=2266,2262
<2262=2263
<2263=2265,2264
<2266=2267
<2267=2271,2268
<2268=2270,2269
<2272=2273
<2273=2275,2274
<2276=2277
<2277=2281,2278
<2278=2279
<2279=2280
<2281=2282
<2282=2284,2283
<2285=2286
<2286=2292,2287
<2287=2290,2288
<2288=2289
<2290=2291
<2292=2293
<2294=2853,2852,2851,2850,2849,2847,2846,2845,2844,2843,2842,2841,2840,2295
<2295=2824,2820,2806,2790,2769,2768,2767,2766,2765,2763,2762,2761,2760,2759,2758,2757,2756,2296
<2296=2740,2726,2711,2672,2644,2630,2616,2603,2594,2585,2576,2552,2551,2550,2526,2525,2524,2500,2482,2468,2450,2438,2434,2420,2412,2380,2376,2352,2341,2330,2297
<2297=2298
<2298=2326,2299
<2299=2300
<2300=2301
<2301=2324,2302
<2302=2320,2316,2309,2307,2305,2303
<2303=2304
<2305=2306
<2307=2308
<2309=2310
<2310=2312,2311
<2312=2313
<2313=2315,2314
<2316=2317
<2317=2319,2318
<2320=2321
<2321=2323,2322
<2324=2325
<2326=2327
<2327=2329,2328
<2330=2331
<2331=2339,2332
<2332=2333
<2333=2334
<2334=2338,2335
<2335=2337,2336
<2339=2340
<2341=2342
<2342=2350,2343
<2343=2344
<2344=2345
<2345=2349,2346
<2346=2348,2347
<2350=2351
<2352=2363,2353
<2353=2354
<2354=2355
<2355=2361,2356
<2356=2359,2357
<2357=2358
<2359=2360
<2361=2362
<2363=2364
<2364=2370,2365
<2365=2369,2366
<2366=2368,2367
<2370=2372,2371
<2372=2373
<2373=2375,2374
<2376=2377
<2377=2379,2378
<2380=2381
<2381=2408,2382
<2382=2395,2391,2389,2387,2383
<2383=2384
<2384=2386,2385
<2387=2388
<2389=2390
<2391=2392
<2392=2394,2393
<2395=2396
<2396=2406,2398,2397
<2398=2402,2399
<2399=2400
<2400=2401
<2402=2403
<2403=2405,2404
<2406=2407
<2408=2409
<2409=2411,2410
<2412=2418,2413
<2413=2414
<2414=2415
<2415=2417,2416
<2418=2419
<2420=2421
<2421=2433,2432,2422
<2422=2431,2423
<2423=2427,2424
<2424=2425
<2425=2426
<2427=2428
<2428=2430,2429
<2434=2435
<2435=2437,2436
<2438=2446,2439
<2439=2440
<2440=2441
<2441=2445,2442
<2442=2444,2443
<2446=2447
<2447=2449,2448
<2450=2451
<2451=2467,2466,2452
<2452=2465,2453
<2453=2463,2454
<2454=2461,2459,2457,2455
<2455=2456
<2457=2458
<2459=2460
<2461=2462
<2463=2464
<2468=2469
<2469=2481,2480,2470
<2470=2479,2471
<2471=2477,2472
<2472=2475,2473
<2473=2474
<2475=2476
<2477=2478
<2482=2483
<2483=2499,2498,2484
<2484=2497,2485
<2485=2495,2486
<2486=2493,2489,2487
<2487=2488
<2489=2490
<2490=2492,2491
<2493=2494
<2495=2496
<2500=2501
<2501=2523,2502
<2502=2522,2503
<2503=2513,2505,2504
<2505=2509,2506
<2506=2507
<2507=2508
<2509=2510
<2510=2512,2511
<2513=2514
<2514=2518,2515
<2515=2516
<2516=2517
<2518=2519
<2519=2521,2520
<2526=2527
<2527=2549,2528
<2528=2548,2529
<2529=2539,2531,2530
<2531=2535,2532
<2532=2533
<2533=2534
<2535=2536
<2536=2538,2537
<2539=2540
<2540=2544,2541
<2541=2542
<2542=2543
<2544=2545
<2545=2547,2546
<2552=2560,2553
<2553=2554
<2554=2555
<2555=2559,2556
<2556=2558,2557
<2560=2561
<2561=2568,2562
<2562=2564,2563
<2564=2565
<2565=2567,2566
<2568=2572,2569
<2569=2570
<2570=2571
<2572=2573
<2573=2575,2574
<2576=2577
<2577=2584,2583,2578
<2578=2582,2579
<2579=2581,2580
<2585=2586
<2586=2592,2587
<2587=2588
<2588=2589
<2589=2591,2590
<2592=2593
<2594=2595
<2595=2601,2596
<2596=2597
<2597=2598
<2598=2600,2599
<2601=2602
<2603=2604
<2604=2614,2605
<2605=2606
<2606=2607
<2607=2611,2608
<2608=2610,2609
<2611=2613,2612
<2614=2615
<2616=2617
<2617=2629,2628,2618
<2618=2627,2619
<2619=2623,2620
<2620=2621
<2621=2622
<2623=2624
<2624=2626,2625
<2630=2631
<2631=2643,2642,2632
<2632=2641,2633
<2633=2637,2634
<2634=2635
<2635=2636
<2637=2638
<2638=2640,2639
<2644=2651,2645
<2645=2647,2646
<2647=2648
<2648=2650,2649
<2651=2652
<2652=2660,2653
<2653=2657,2654
<2654=2656,2655
<2657=2659,2658
<2660=2668,2661
<2661=2666,2664,2662
<2662=2663
<2664=2665
<2666=2667
<2668=2669
<2669=2671,2670
<2672=2709,2697,2673
<2673=2674
<2674=2675
<2675=2682,2676
<2676=2678,2677
<2678=2679
<2679=2681,2680
<2682=2683
<2683=2694,2684
<2684=2686,2685
<2686=2690,2687
<2687=2688
<2688=2689
<2690=2691
<2691=2693,2692
<2694=2696,2695
<2697=2698
<2698=2705,2699
<2699=2701,2700
<2701=2702
<2702=2704,2703
<2705=2706
<2706=2708,2707
<2709=2710
<2711=2718,2712
<2712=2714,2713
<2714=2715
<2715=2717,2716
<2718=2719
<2719=2723,2720
<2720=2722,2721
<2723=2725,2724
<2726=2727
<2727=2739,2738,2728
<2728=2737,2729
<2729=2733,2730
<2730=2731
<2731=2732
<2733=2734
<2734=2736,2735
<2740=2743,2741
<2741=2742
<2743=2744
<2744=2755,2745
<2745=2747,2746
<2747=2751,2748
<2748=2749
<2749=2750
<2751=2752
<2752=2754,2753
<2763=2764
<2769=2770
<2770=2789,2788,2771
<2771=2787,2772
<2772=2779,2773
<2773=2775,2774
<2775=2776
<2776=2778,2777
<2779=2783,2780
<2780=2781
<2781=2782
<2783=2784
<2784=2786,2785
<2790=2791
<2791=2805,2804,2792
<2792=2803,2793
<2793=2799,2794
<2794=2797,2795
<2795=2796
<2797=2798
<2799=2800
<2800=2802,2801
<2806=2807
<2807=2819,2818,2808
<2808=2817,2809
<2809=2813,2810
<2810=2811
<2811=2812
<2813=2814
<2814=2816,2815
<2820=2821
<2821=2823,2822
<2824=2827,2825
<2825=2826
<2827=2828
<2828=2839,2829
<2829=2831,2830
<2831=2835,2832
<2832=2833
<2833=2834
<2835=2836
<2836=2838,2837
<2847=2848
<2853=2854
<2854=2858,2855
<2855=2856
<2856=2857
<2858=2859
<2859=2861,2860
<2875=2876
<2881=2882
<2882=2890,2889,2883
<2883=2885,2884
<2885=2886
<2886=2888,2887
<2891=2892
<2892=2897,2896,2893
<2893=2895,2894
<2898=2899
<2899=2904,2903,2900
<2900=2902,2901
<2905=2906
<2906=2911,2910,2907
<2907=2909,2908
<2912=2913
<2913=2918,2917,2914
<2914=2916,2915
<2919=2920
<2920=2926,2921
<2921=2922
<2922=2923
<2923=2925,2924
<2926=2927
<2927=2929,2928
<2930=2931
<2931=2933,2932
<2934=2935
<2935=2947,2936
<2936=2941,2937
<2937=2938
<2938=2940,2939
<2941=2942
<2942=2946,2943
<2943=2945,2944
<2947=2948
<2948=2950,2949
<2951=2952
<2952=2962,2961,2953
<2953=2955,2954
<2955=2957,2956
<2957=2958
<2958=2960,2959
<2963=2964
<2964=2969,2968,2965
<2965=2967,2966
<2970=2971
<2971=2976,2975,2972
<2972=2974,2973
<2977=2978
<2978=2980,2979
<2980=2982,2981
<2982=2983
<2983=2985,2984
<2985=2987,2986
<2987=2988
<3076=3085,3084,3077
<3077=3081,3078
<3078=3080,3079
<3081=3083,3082
<3085=3088,3086
<3086=3087
<3088=3126,3089
<3089=3112,3090
<3090=3111,3091
<3091=3092
<3092=3093
<3093=3100,3094
<3094=3096,3095
<3096=3097
<3097=3099,3098
<3100=3104,3101
<3101=3102
<3102=3103
<3104=3105
<3105=3107,3106
<3107=3109,3108
<3109=3110
<3112=3113
<3113=3114
<3114=3115
<3115=3125,3116
<3116=3124,3117
<3117=3123,3118
<3118=3122,3119
<3119=3121,3120
<3126=3127
<3127=3129,3128
<3142=3157,3156,3143
<3143=3153,3150,3147,3144
<3144=3146,3145
<3147=3149,3148
<3150=3152,3151
<3153=3155,3154
<3157=3321,3305,3289,3275,3261,3234,3196,3165,3158
<3158=3159
<3159=3163,3160
<3160=3161
<3161=3162
<3163=3164
<3165=3188,3166
<3166=3167
<3167=3171,3168
<3168=3169
<3169=3170
<3171=3172
<3172=3183,3173
<3173=3175,3174
<3175=3179,3176
<3176=3177
<3177=3178
<3179=3180
<3180=3182,3181
<3183=3187,3184
<3184=3186,3185
<3188=3189
<3189=3193,3190
<3190=3192,3191
<3193=3195,3194
<3196=3226,3197
<3197=3212,3198
<3198=3202,3199
<3199=3200
<3200=3201
<3202=3203
<3203=3209,3204
<3204=3208,3205
<3205=3207,3206
<3209=3211,3210
<3212=3216,3213
<3213=3214
<3214=3215
<3216=3217
<3217=3221,3218
<3218=3220,3219
<3221=3225,3222
<3222=3224,3223
<3226=3227
<3227=3231,3228
<3228=3230,3229
<3231=3233,3232
<3234=3253,3235
<3235=3238,3236
<3236=3237
<3238=3242,3239
<3239=3240
<3240=3241
<3242=3243
<3243=3252,3244
<3244=3248,3245
<3245=3246
<3246=3247
<3248=3249
<3249=3251,3250
<3253=3254
<3254=3258,3255
<3255=3257,3256
<3258=3260,3259
<3261=3262
<3262=3274,3273,3263
<3263=3272,3264
<3264=3268,3265
<3265=3266
<3266=3267
<3268=3269
<3269=3271,3270
<3275=3276
<3276=3288,3287,3277
<3277=3286,3278
<3278=3282,3279
<3279=3280
<3280=3281
<3282=3283
<3283=3285,3284
<3289=3290
<3290=3304,3303,3291
<3291=3302,3292
<3292=3298,3293
<3293=3296,3294
<3294=3295
<3296=3297
<3298=3299
<3299=3301,3300
<3305=3306
<3306=3320,3319,3307
<3307=3318,3308
<3308=3314,3309
<3309=3312,3310
<3310=3311
<3312=3313
<3314=3315
<3315=3317,3316
<3321=3325,3322
<3322=3323
<3323=3324
<3325=3326
<3326=3328,3327
<3356=3359,3358,3357
<3359=3360
<3360=3361
