>3	FunctionDef	Region 
>4	ParameterList	const std 
>5	Parameter	 
>6	Identifier	network
>7	ParameterType	Network *
>8	Parameter	 
>9	Identifier	nodeParams
>10	ParameterType	const std 
>11	Parameter	 
>12	Identifier	nodeType
>13	ParameterType	const std 
>14	Parameter	 
>15	Identifier	name
>16	ParameterType	const std 
>17	CompoundStatement	 
>18	ExpressionStatement	 
>19	CallExpression	createInputsAndOutputs_ ( )
>20	ArgumentList	 
>21	Callee	createInputsAndOutputs_
>22	Identifier	createInputsAndOutputs_
>23	ExpressionStatement	 
>24	AssignmentExpr	impl_ = factory . createRegionImpl ( nodeType , nodeParams , this )
>25	CallExpression	factory . createRegionImpl ( nodeType , nodeParams , this )
>26	ArgumentList	nodeType
>27	Argument	this
>28	Identifier	this
>29	Argument	nodeParams
>30	Identifier	nodeParams
>31	Argument	nodeType
>32	Identifier	nodeType
>33	Callee	factory . createRegionImpl
>34	MemberAccess	factory . createRegionImpl
>35	Identifier	createRegionImpl
>36	Identifier	factory
>37	Identifier	impl_
>38	IfStatement	if ( spec_ -> singleNodeOnly )
>39	ExpressionStatement	 
>40	CallExpression	dims_ . push_back ( 1 )
>41	ArgumentList	1
>42	Argument	1
>43	PrimaryExpression	1
>44	Callee	dims_ . push_back
>45	MemberAccess	dims_ . push_back
>46	Identifier	push_back
>47	Identifier	dims_
>48	Condition	 
>49	PtrMemberAccess	spec_ -> singleNodeOnly
>50	Identifier	singleNodeOnly
>51	Identifier	spec_
>52	ExpressionStatement	 
>53	AssignmentExpr	spec_ = factory . getSpec ( nodeType )
>54	CallExpression	factory . getSpec ( nodeType )
>55	ArgumentList	nodeType
>56	Argument	nodeType
>57	Identifier	nodeType
>58	Callee	factory . getSpec
>59	MemberAccess	factory . getSpec
>60	Identifier	getSpec
>61	Identifier	factory
>62	Identifier	spec_
>63	IdentifierDeclStatement	 
>64	IdentifierDecl	& factory = RegionImplFactory 
>65	AssignmentExpr	& factory = RegionImplFactory 
>66	CallExpression	RegionImplFactory 
>67	ArgumentList	 
>68	Callee	RegionImplFactory 
>69	Identifier	RegionImplFactory 
>70	Identifier	factory
>71	Identifier	factory
>72	IdentifierDeclType	RegionImplFactory &
>90	FunctionDef	Region 
>91	ParameterList	const std 
>92	Parameter	 
>93	Identifier	network
>94	ParameterType	Network *
>95	Parameter	 
>96	Identifier	bundle
>97	ParameterType	BundleIO &
>98	Parameter	 
>99	Identifier	dimensions
>100	ParameterType	const Dimensions &
>101	Parameter	 
>102	Identifier	nodeType
>103	ParameterType	const std 
>104	Parameter	 
>105	Identifier	name
>106	ParameterType	const std 
>107	CompoundStatement	 
>108	ExpressionStatement	 
>109	CallExpression	createInputsAndOutputs_ ( )
>110	ArgumentList	 
>111	Callee	createInputsAndOutputs_
>112	Identifier	createInputsAndOutputs_
>113	ExpressionStatement	 
>114	AssignmentExpr	impl_ = factory . deserializeRegionImpl ( nodeType , bundle , this )
>115	CallExpression	factory . deserializeRegionImpl ( nodeType , bundle , this )
>116	ArgumentList	nodeType
>117	Argument	this
>118	Identifier	this
>119	Argument	bundle
>120	Identifier	bundle
>121	Argument	nodeType
>122	Identifier	nodeType
>123	Callee	factory . deserializeRegionImpl
>124	MemberAccess	factory . deserializeRegionImpl
>125	Identifier	deserializeRegionImpl
>126	Identifier	factory
>127	Identifier	impl_
>128	ExpressionStatement	 
>129	AssignmentExpr	dims_ = dimensions
>130	Identifier	dimensions
>131	Identifier	dims_
>132	IfStatement	if ( spec_ -> singleNodeOnly )
>133	IfStatement	if ( ! dimensions . isDontcare ( ) && ! dimensions . isUnspecified ( ) && ! dimensions . isOnes ( ) )
>134	ExpressionStatement	 
>135	ShiftExpression	NTA_THROW << \"Attempt to deserialize region of type \" << nodeType << \" with dimensions \" << dimensions << \" \
>136	ShiftExpression	\"Attempt to deserialize region of type \" << nodeType << \" with dimensions \" << dimensions << \" but region \
>137	ShiftExpression	nodeType << \" with dimensions \" << dimensions << \" but region supports exactly one node.\"
>138	ShiftExpression	\" with dimensions \" << dimensions << \" but region supports exactly one node.\"
>139	ShiftExpression	dimensions << \" but region supports exactly one node.\"
>140	PrimaryExpression	\" but region supports exactly one node.\"
>141	Identifier	dimensions
>142	PrimaryExpression	\" with dimensions \"
>143	Identifier	nodeType
>144	PrimaryExpression	\"Attempt to deserialize region of type \"
>145	Identifier	NTA_THROW
>146	Condition	 
>147	AndExpression	! dimensions . isDontcare ( ) && ! dimensions . isUnspecified ( ) && ! dimensions . isOnes ( )
>148	AndExpression	! dimensions . isUnspecified ( ) && ! dimensions . isOnes ( )
>149	UnaryOp	! dimensions . isOnes ( )
>150	CallExpression	dimensions . isOnes ( )
>151	ArgumentList	 
>152	Callee	dimensions . isOnes
>153	MemberAccess	dimensions . isOnes
>154	Identifier	isOnes
>155	Identifier	dimensions
>156	UnaryOperator	!
>157	UnaryOp	! dimensions . isUnspecified ( )
>158	CallExpression	dimensions . isUnspecified ( )
>159	ArgumentList	 
>160	Callee	dimensions . isUnspecified
>161	MemberAccess	dimensions . isUnspecified
>162	Identifier	isUnspecified
>163	Identifier	dimensions
>164	UnaryOperator	!
>165	UnaryOp	! dimensions . isDontcare ( )
>166	CallExpression	dimensions . isDontcare ( )
>167	ArgumentList	 
>168	Callee	dimensions . isDontcare
>169	MemberAccess	dimensions . isDontcare
>170	Identifier	isDontcare
>171	Identifier	dimensions
>172	UnaryOperator	!
>173	Condition	 
>174	PtrMemberAccess	spec_ -> singleNodeOnly
>175	Identifier	singleNodeOnly
>176	Identifier	spec_
>177	ExpressionStatement	 
>178	AssignmentExpr	spec_ = factory . getSpec ( nodeType )
>179	CallExpression	factory . getSpec ( nodeType )
>180	ArgumentList	nodeType
>181	Argument	nodeType
>182	Identifier	nodeType
>183	Callee	factory . getSpec
>184	MemberAccess	factory . getSpec
>185	Identifier	getSpec
>186	Identifier	factory
>187	Identifier	spec_
>188	IdentifierDeclStatement	 
>189	IdentifierDecl	& factory = RegionImplFactory 
>190	AssignmentExpr	& factory = RegionImplFactory 
>191	CallExpression	RegionImplFactory 
>192	ArgumentList	 
>193	Callee	RegionImplFactory 
>194	Identifier	RegionImplFactory 
>195	Identifier	factory
>196	Identifier	factory
>197	IdentifierDeclType	RegionImplFactory &
>219	FunctionDef	Region 
>220	ParameterList	 
>221	ReturnType	Network *
>222	CompoundStatement	 
>223	ReturnStatement	 
>224	Identifier	network_
>229	FunctionDef	Region 
>230	ParameterList	 
>231	ReturnType	void
>232	CompoundStatement	 
>233	ForStatement	for ( size_t i = 0 ; i < spec_ -> inputs . getCount ( ) ; ++ i )
>234	CompoundStatement	 
>235	ExpressionStatement	 
>236	CallExpression	input -> setName ( inputName )
>237	ArgumentList	inputName
>238	Argument	inputName
>239	Identifier	inputName
>240	Callee	input -> setName
>241	PtrMemberAccess	input -> setName
>242	Identifier	setName
>243	Identifier	input
>244	ExpressionStatement	 
>245	AssignmentExpr	inputs_ [ inputName ] = input
>246	Identifier	input
>247	ArrayIndexing	inputs_ [ inputName ]
>248	Identifier	inputName
>249	Identifier	inputs_
>250	IdentifierDeclStatement	 
>251	IdentifierDecl	* input = new Input ( * this , is . dataType , is . regionLevel )
>252	AssignmentExpr	* input = new Input ( * this , is . dataType , is . regionLevel )
>253	Expression	* this , is . dataType , is . regionLevel
>254	Expression	is . dataType , is . regionLevel
>255	MemberAccess	is . regionLevel
>256	Identifier	regionLevel
>257	Identifier	is
>258	MemberAccess	is . dataType
>259	Identifier	dataType
>260	Identifier	is
>261	UnaryOp	* this
>262	Identifier	this
>263	UnaryOperator	*
>264	Identifier	input
>265	Identifier	input
>266	IdentifierDeclType	Input *
>267	IdentifierDeclStatement	 
>268	IdentifierDecl	& is = p . second
>269	AssignmentExpr	& is = p . second
>270	MemberAccess	p . second
>271	Identifier	second
>272	Identifier	p
>273	Identifier	is
>274	Identifier	is
>275	IdentifierDeclType	const InputSpec &
>276	IdentifierDeclStatement	 
>277	IdentifierDecl	inputName = p . first
>278	AssignmentExpr	inputName = p . first
>279	MemberAccess	p . first
>280	Identifier	first
>281	Identifier	p
>282	Identifier	inputName
>283	Identifier	inputName
>284	IdentifierDeclType	std 
>285	IdentifierDeclStatement	 
>286	IdentifierDecl	& p = spec_ -> inputs . getByIndex ( i )
>287	AssignmentExpr	& p = spec_ -> inputs . getByIndex ( i )
>288	CallExpression	spec_ -> inputs . getByIndex ( i )
>289	ArgumentList	i
>290	Argument	i
>291	Identifier	i
>292	Callee	spec_ -> inputs . getByIndex
>293	MemberAccess	spec_ -> inputs . getByIndex
>294	Identifier	getByIndex
>295	PtrMemberAccess	spec_ -> inputs
>296	Identifier	inputs
>297	Identifier	spec_
>298	Identifier	p
>299	Identifier	p
>300	IdentifierDeclType	const std 
>301	UnaryExpression	 
>302	Identifier	i
>303	IncDec	++
>304	Condition	 
>305	RelationalExpression	i < spec_ -> inputs . getCount ( )
>306	CallExpression	spec_ -> inputs . getCount ( )
>307	ArgumentList	 
>308	Callee	spec_ -> inputs . getCount
>309	MemberAccess	spec_ -> inputs . getCount
>310	Identifier	getCount
>311	PtrMemberAccess	spec_ -> inputs
>312	Identifier	inputs
>313	Identifier	spec_
>314	Identifier	i
>315	ForInit	 
>316	IdentifierDeclStatement	size_t i = 0 ;
>317	IdentifierDecl	i = 0
>318	AssignmentExpr	i = 0
>319	PrimaryExpression	0
>320	Identifier	i
>321	Identifier	i
>322	IdentifierDeclType	size_t
>323	ForStatement	for ( size_t i = 0 ; i < spec_ -> outputs . getCount ( ) ; ++ i )
>324	CompoundStatement	 
>325	ExpressionStatement	 
>326	CallExpression	output -> setName ( outputName )
>327	ArgumentList	outputName
>328	Argument	outputName
>329	Identifier	outputName
>330	Callee	output -> setName
>331	PtrMemberAccess	output -> setName
>332	Identifier	setName
>333	Identifier	output
>334	ExpressionStatement	 
>335	AssignmentExpr	outputs_ [ outputName ] = output
>336	Identifier	output
>337	ArrayIndexing	outputs_ [ outputName ]
>338	Identifier	outputName
>339	Identifier	outputs_
>340	IdentifierDeclStatement	 
>341	IdentifierDecl	* output = new Output ( * this , os . dataType , os . regionLevel )
>342	AssignmentExpr	* output = new Output ( * this , os . dataType , os . regionLevel )
>343	Expression	* this , os . dataType , os . regionLevel
>344	Expression	os . dataType , os . regionLevel
>345	MemberAccess	os . regionLevel
>346	Identifier	regionLevel
>347	Identifier	os
>348	MemberAccess	os . dataType
>349	Identifier	dataType
>350	Identifier	os
>351	UnaryOp	* this
>352	Identifier	this
>353	UnaryOperator	*
>354	Identifier	output
>355	Identifier	output
>356	IdentifierDeclType	Output *
>357	IdentifierDeclStatement	 
>358	IdentifierDecl	& os = p . second
>359	AssignmentExpr	& os = p . second
>360	MemberAccess	p . second
>361	Identifier	second
>362	Identifier	p
>363	Identifier	os
>364	Identifier	os
>365	IdentifierDeclType	const OutputSpec &
>366	IdentifierDeclStatement	 
>367	IdentifierDecl	outputName = p . first
>368	AssignmentExpr	outputName = p . first
>369	MemberAccess	p . first
>370	Identifier	first
>371	Identifier	p
>372	Identifier	outputName
>373	Identifier	outputName
>374	IdentifierDeclType	std 
>375	IdentifierDeclStatement	 
>376	IdentifierDecl	& p = spec_ -> outputs . getByIndex ( i )
>377	AssignmentExpr	& p = spec_ -> outputs . getByIndex ( i )
>378	CallExpression	spec_ -> outputs . getByIndex ( i )
>379	ArgumentList	i
>380	Argument	i
>381	Identifier	i
>382	Callee	spec_ -> outputs . getByIndex
>383	MemberAccess	spec_ -> outputs . getByIndex
>384	Identifier	getByIndex
>385	PtrMemberAccess	spec_ -> outputs
>386	Identifier	outputs
>387	Identifier	spec_
>388	Identifier	p
>389	Identifier	p
>390	IdentifierDeclType	const std 
>391	UnaryExpression	 
>392	Identifier	i
>393	IncDec	++
>394	Condition	 
>395	RelationalExpression	i < spec_ -> outputs . getCount ( )
>396	CallExpression	spec_ -> outputs . getCount ( )
>397	ArgumentList	 
>398	Callee	spec_ -> outputs . getCount
>399	MemberAccess	spec_ -> outputs . getCount
>400	Identifier	getCount
>401	PtrMemberAccess	spec_ -> outputs
>402	Identifier	outputs
>403	Identifier	spec_
>404	Identifier	i
>405	ForInit	 
>406	IdentifierDeclStatement	size_t i = 0 ;
>407	IdentifierDecl	i = 0
>408	AssignmentExpr	i = 0
>409	PrimaryExpression	0
>410	Identifier	i
>411	Identifier	i
>412	IdentifierDeclType	size_t
>446	FunctionDef	Region 
>447	ParameterList	 
>448	ReturnType	bool
>449	CompoundStatement	 
>450	ReturnStatement	 
>451	Identifier	false
>452	ForStatement	for ( OutputMap 
>453	CompoundStatement	 
>454	IfStatement	if ( i -> second -> hasOutgoingLinks ( ) )
>455	CompoundStatement	 
>456	ReturnStatement	 
>457	Identifier	true
>458	Condition	 
>459	CallExpression	i -> second -> hasOutgoingLinks ( )
>460	ArgumentList	 
>461	Callee	i -> second -> hasOutgoingLinks
>462	PtrMemberAccess	i -> second -> hasOutgoingLinks
>463	Identifier	hasOutgoingLinks
>464	PtrMemberAccess	i -> second
>465	Identifier	second
>466	Identifier	i
>467	IncDecOp	 
>468	IncDec	++
>469	Identifier	i
>470	Condition	 
>471	EqualityExpression	i != outputs_ . end ( )
>472	CallExpression	outputs_ . end ( )
>473	ArgumentList	 
>474	Callee	outputs_ . end
>475	MemberAccess	outputs_ . end
>476	Identifier	end
>477	Identifier	outputs_
>478	Identifier	i
>479	ForInit	 
>480	IdentifierDeclStatement	OutputMap 
>481	IdentifierDecl	i = outputs_ . begin ( )
>482	AssignmentExpr	i = outputs_ . begin ( )
>483	CallExpression	outputs_ . begin ( )
>484	ArgumentList	 
>485	Callee	outputs_ . begin
>486	MemberAccess	outputs_ . begin
>487	Identifier	begin
>488	Identifier	outputs_
>489	Identifier	i
>490	Identifier	i
>491	IdentifierDeclType	OutputMap 
>506	FunctionDef	Region 
>507	ParameterList	 
>508	CompoundStatement	 
>509	ExpressionStatement	 
>510	Identifier	enabledNodes_
>511	Statement	 
>512	ExpressionStatement	 
>513	Identifier	impl_
>514	Statement	 
>515	ForStatement	for ( InputMap 
>516	CompoundStatement	 
>517	ExpressionStatement	 
>518	AssignmentExpr	i -> second = NULL
>519	Identifier	NULL
>520	PtrMemberAccess	i -> second
>521	Identifier	second
>522	Identifier	i
>523	ExpressionStatement	 
>524	PtrMemberAccess	i -> second
>525	Identifier	second
>526	Identifier	i
>527	Statement	 
>528	IncDecOp	 
>529	IncDec	++
>530	Identifier	i
>531	Condition	 
>532	EqualityExpression	i != inputs_ . end ( )
>533	CallExpression	inputs_ . end ( )
>534	ArgumentList	 
>535	Callee	inputs_ . end
>536	MemberAccess	inputs_ . end
>537	Identifier	end
>538	Identifier	inputs_
>539	Identifier	i
>540	ForInit	 
>541	IdentifierDeclStatement	InputMap 
>542	IdentifierDecl	i = inputs_ . begin ( )
>543	AssignmentExpr	i = inputs_ . begin ( )
>544	CallExpression	inputs_ . begin ( )
>545	ArgumentList	 
>546	Callee	inputs_ . begin
>547	MemberAccess	inputs_ . begin
>548	Identifier	begin
>549	Identifier	inputs_
>550	Identifier	i
>551	Identifier	i
>552	IdentifierDeclType	InputMap 
>553	ForStatement	for ( OutputMap 
>554	CompoundStatement	 
>555	ExpressionStatement	 
>556	AssignmentExpr	i -> second = NULL
>557	Identifier	NULL
>558	PtrMemberAccess	i -> second
>559	Identifier	second
>560	Identifier	i
>561	ExpressionStatement	 
>562	PtrMemberAccess	i -> second
>563	Identifier	second
>564	Identifier	i
>565	Statement	 
>566	IncDecOp	 
>567	IncDec	++
>568	Identifier	i
>569	Condition	 
>570	EqualityExpression	i != outputs_ . end ( )
>571	CallExpression	outputs_ . end ( )
>572	ArgumentList	 
>573	Callee	outputs_ . end
>574	MemberAccess	outputs_ . end
>575	Identifier	end
>576	Identifier	outputs_
>577	Identifier	i
>578	ForInit	 
>579	IdentifierDeclStatement	OutputMap 
>580	IdentifierDecl	i = outputs_ . begin ( )
>581	AssignmentExpr	i = outputs_ . begin ( )
>582	CallExpression	outputs_ . begin ( )
>583	ArgumentList	 
>584	Callee	outputs_ . begin
>585	MemberAccess	outputs_ . begin
>586	Identifier	begin
>587	Identifier	outputs_
>588	Identifier	i
>589	Identifier	i
>590	IdentifierDeclType	OutputMap 
>604	FunctionDef	Region 
>605	ParameterList	 
>606	ReturnType	void
>607	CompoundStatement	 
>608	ExpressionStatement	 
>609	AssignmentExpr	initialized_ = true
>610	Identifier	true
>611	Identifier	initialized_
>612	ExpressionStatement	 
>613	CallExpression	impl_ -> initialize ( )
>614	ArgumentList	 
>615	Callee	impl_ -> initialize
>616	PtrMemberAccess	impl_ -> initialize
>617	Identifier	initialize
>618	Identifier	impl_
>619	IfStatement	if ( initialized_ )
>620	ReturnStatement	 
>621	Condition	 
>622	Identifier	initialized_
>629	FunctionDef	Region 
>630	ParameterList	 
>631	ReturnType	bool
>632	CompoundStatement	 
>633	ReturnStatement	 
>634	Identifier	initialized_
>639	FunctionDef	Region 
>640	ParameterList	 
>641	ReturnType	const std 
>642	CompoundStatement	 
>643	ReturnStatement	 
>644	Identifier	name_
>649	FunctionDef	Region 
>650	ParameterList	 
>651	ReturnType	const std 
>652	CompoundStatement	 
>653	ReturnStatement	 
>654	Identifier	type_
>659	FunctionDef	Region 
>660	ParameterList	 
>661	ReturnType	const Spec *
>662	CompoundStatement	 
>663	ReturnStatement	 
>664	Identifier	spec_
>669	FunctionDef	Region 
>670	ParameterList	const std 
>671	Parameter	 
>672	Identifier	nodeType
>673	ParameterType	const std 
>674	ReturnType	const Spec *
>675	CompoundStatement	 
>676	ReturnStatement	 
>677	CallExpression	factory . getSpec ( nodeType )
>678	ArgumentList	nodeType
>679	Argument	nodeType
>680	Identifier	nodeType
>681	Callee	factory . getSpec
>682	MemberAccess	factory . getSpec
>683	Identifier	getSpec
>684	Identifier	factory
>685	IdentifierDeclStatement	 
>686	IdentifierDecl	& factory = RegionImplFactory 
>687	AssignmentExpr	& factory = RegionImplFactory 
>688	CallExpression	RegionImplFactory 
>689	ArgumentList	 
>690	Callee	RegionImplFactory 
>691	Identifier	RegionImplFactory 
>692	Identifier	factory
>693	Identifier	factory
>694	IdentifierDeclType	RegionImplFactory &
>702	FunctionDef	Region 
>703	ParameterList	 
>704	ReturnType	const Dimensions &
>705	CompoundStatement	 
>706	ReturnStatement	 
>707	Identifier	dims_
>712	FunctionDef	Region 
>713	ParameterList	 
>714	ReturnType	void
>715	CompoundStatement	 
>716	ExpressionStatement	 
>717	ShiftExpression	NTA_THROW << \"Region
>718	ShiftExpression	\"Region
>719	ShiftExpression	getName ( ) << \")\"
>720	PrimaryExpression	\")\"
>721	CallExpression	getName ( )
>722	ArgumentList	 
>723	Callee	getName
>724	Identifier	getName
>725	PrimaryExpression	\"Region
>726	Identifier	NTA_THROW
>730	FunctionDef	Region 
>731	ParameterList	 
>732	ReturnType	void
>733	CompoundStatement	 
>734	ExpressionStatement	 
>735	ShiftExpression	NTA_THROW << \"Region
>736	ShiftExpression	\"Region
>737	ShiftExpression	getName ( ) << \")\"
>738	PrimaryExpression	\")\"
>739	CallExpression	getName ( )
>740	ArgumentList	 
>741	Callee	getName
>742	Identifier	getName
>743	PrimaryExpression	\"Region
>744	Identifier	NTA_THROW
>748	FunctionDef	Region 
>749	ParameterList	const std 
>750	Parameter	 
>751	Identifier	args
>752	ParameterType	const std 
>753	ReturnType	std 
>754	CompoundStatement	 
>755	ReturnStatement	 
>756	Identifier	retVal
>757	IfStatement	if ( profilingEnabled_ )
>758	ExpressionStatement	 
>759	CallExpression	executeTimer_ . stop ( )
>760	ArgumentList	 
>761	Callee	executeTimer_ . stop
>762	MemberAccess	executeTimer_ . stop
>763	Identifier	stop
>764	Identifier	executeTimer_
>765	Condition	 
>766	Identifier	profilingEnabled_
>767	ExpressionStatement	 
>768	AssignmentExpr	retVal = impl_ -> executeCommand ( args , ( UInt64 ) ( - 1 ) )
>769	CallExpression	impl_ -> executeCommand ( args , ( UInt64 ) ( - 1 ) )
>770	ArgumentList	args
>771	Argument	( UInt64 ) ( - 1 )
>772	CastExpression	( UInt64 ) ( - 1 )
>773	UnaryOp	- 1
>774	PrimaryExpression	1
>775	UnaryOperator	-
>776	CastTarget	UInt64
>777	Argument	args
>778	Identifier	args
>779	Callee	impl_ -> executeCommand
>780	PtrMemberAccess	impl_ -> executeCommand
>781	Identifier	executeCommand
>782	Identifier	impl_
>783	Identifier	retVal
>784	IfStatement	if ( profilingEnabled_ )
>785	ExpressionStatement	 
>786	CallExpression	executeTimer_ . start ( )
>787	ArgumentList	 
>788	Callee	executeTimer_ . start
>789	MemberAccess	executeTimer_ . start
>790	Identifier	start
>791	Identifier	executeTimer_
>792	Condition	 
>793	Identifier	profilingEnabled_
>794	IfStatement	if ( args . size ( ) < 1 )
>795	CompoundStatement	 
>796	ExpressionStatement	 
>797	ShiftExpression	NTA_THROW << \"Invalid empty command specified\"
>798	PrimaryExpression	\"Invalid empty command specified\"
>799	Identifier	NTA_THROW
>800	Condition	 
>801	RelationalExpression	args . size ( ) < 1
>802	PrimaryExpression	1
>803	CallExpression	args . size ( )
>804	ArgumentList	 
>805	Callee	args . size
>806	MemberAccess	args . size
>807	Identifier	size
>808	Identifier	args
>809	IdentifierDeclStatement	 
>810	IdentifierDecl	retVal
>811	Identifier	retVal
>812	IdentifierDeclType	std 
>824	FunctionDef	Region 
>825	ParameterList	 
>826	ReturnType	void
>827	CompoundStatement	 
>828	ReturnStatement	 
>829	IfStatement	if ( profilingEnabled_ )
>830	ExpressionStatement	 
>831	CallExpression	computeTimer_ . stop ( )
>832	ArgumentList	 
>833	Callee	computeTimer_ . stop
>834	MemberAccess	computeTimer_ . stop
>835	Identifier	stop
>836	Identifier	computeTimer_
>837	Condition	 
>838	Identifier	profilingEnabled_
>839	ExpressionStatement	 
>840	CallExpression	impl_ -> compute ( )
>841	ArgumentList	 
>842	Callee	impl_ -> compute
>843	PtrMemberAccess	impl_ -> compute
>844	Identifier	compute
>845	Identifier	impl_
>846	IfStatement	if ( profilingEnabled_ )
>847	ExpressionStatement	 
>848	CallExpression	computeTimer_ . start ( )
>849	ArgumentList	 
>850	Callee	computeTimer_ . start
>851	MemberAccess	computeTimer_ . start
>852	Identifier	start
>853	Identifier	computeTimer_
>854	Condition	 
>855	Identifier	profilingEnabled_
>856	IfStatement	if ( ! initialized_ )
>857	ExpressionStatement	 
>858	ShiftExpression	NTA_THROW << \"Region \" << getName ( ) << \" unable to compute because not initialized\"
>859	ShiftExpression	\"Region \" << getName ( ) << \" unable to compute because not initialized\"
>860	ShiftExpression	getName ( ) << \" unable to compute because not initialized\"
>861	PrimaryExpression	\" unable to compute because not initialized\"
>862	CallExpression	getName ( )
>863	ArgumentList	 
>864	Callee	getName
>865	Identifier	getName
>866	PrimaryExpression	\"Region \"
>867	Identifier	NTA_THROW
>868	Condition	 
>869	UnaryOp	! initialized_
>870	Identifier	initialized_
>871	UnaryOperator	!
>879	FunctionDef	Region 
>880	ParameterList	 
>881	ReturnType	size_t
>882	CompoundStatement	 
>883	ReturnStatement	 
>884	Identifier	nIncompleteLinks
>885	ForStatement	for ( InputMap 
>886	CompoundStatement	 
>887	ExpressionStatement	 
>888	AssignmentExpr	nIncompleteLinks += ( i -> second ) -> evaluateLinks ( )
>889	CallExpression	( i -> second ) -> evaluateLinks ( )
>890	ArgumentList	 
>891	Callee	( i -> second ) -> evaluateLinks
>892	PtrMemberAccess	( i -> second ) -> evaluateLinks
>893	Identifier	evaluateLinks
>894	PtrMemberAccess	i -> second
>895	Identifier	second
>896	Identifier	i
>897	Identifier	nIncompleteLinks
>898	IncDecOp	 
>899	IncDec	++
>900	Identifier	i
>901	Condition	 
>902	EqualityExpression	i != inputs_ . end ( )
>903	CallExpression	inputs_ . end ( )
>904	ArgumentList	 
>905	Callee	inputs_ . end
>906	MemberAccess	inputs_ . end
>907	Identifier	end
>908	Identifier	inputs_
>909	Identifier	i
>910	ForInit	 
>911	IdentifierDeclStatement	InputMap 
>912	IdentifierDecl	i = inputs_ . begin ( )
>913	AssignmentExpr	i = inputs_ . begin ( )
>914	CallExpression	inputs_ . begin ( )
>915	ArgumentList	 
>916	Callee	inputs_ . begin
>917	MemberAccess	inputs_ . begin
>918	Identifier	begin
>919	Identifier	inputs_
>920	Identifier	i
>921	Identifier	i
>922	IdentifierDeclType	InputMap 
>923	IdentifierDeclStatement	 
>924	IdentifierDecl	nIncompleteLinks = 0
>925	AssignmentExpr	nIncompleteLinks = 0
>926	PrimaryExpression	0
>927	Identifier	nIncompleteLinks
>928	Identifier	nIncompleteLinks
>929	IdentifierDeclType	int
>943	FunctionDef	Region 
>944	ParameterList	 
>945	ReturnType	std 
>946	CompoundStatement	 
>947	ReturnStatement	 
>948	CallExpression	ss . str ( )
>949	ArgumentList	 
>950	Callee	ss . str
>951	MemberAccess	ss . str
>952	Identifier	str
>953	Identifier	ss
>954	ForStatement	for ( InputMap 
>955	CompoundStatement	 
>956	ForStatement	for ( std 
>957	CompoundStatement	 
>958	IfStatement	if ( ( * l ) -> getSrcDimensions ( ) . isUnspecified ( ) || ( * l ) -> getDestDimensions ( ) . isUnspecified ( ) )
>959	CompoundStatement	 
>960	ExpressionStatement	 
>961	ShiftExpression	ss << ( * l ) -> toString ( ) << \"\n\"
>962	ShiftExpression	( * l ) -> toString ( ) << \"\n\"
>963	PrimaryExpression	\"\n\"
>964	CallExpression	( * l ) -> toString ( )
>965	ArgumentList	 
>966	Callee	( * l ) -> toString
>967	PtrMemberAccess	( * l ) -> toString
>968	Identifier	toString
>969	UnaryOp	* l
>970	Identifier	l
>971	UnaryOperator	*
>972	Identifier	ss
>973	Condition	 
>974	OrExpression	( * l ) -> getSrcDimensions ( ) . isUnspecified ( ) || ( * l ) -> getDestDimensions ( ) . isUnspecified ( )
>975	CallExpression	( * l ) -> getDestDimensions ( ) . isUnspecified ( )
>976	ArgumentList	 
>977	Callee	( * l ) -> getDestDimensions ( ) . isUnspecified
>978	MemberAccess	( * l ) -> getDestDimensions ( ) . isUnspecified
>979	Identifier	isUnspecified
>980	CallExpression	( * l ) -> getDestDimensions ( )
>981	ArgumentList	 
>982	Callee	( * l ) -> getDestDimensions
>983	PtrMemberAccess	( * l ) -> getDestDimensions
>984	Identifier	getDestDimensions
>985	UnaryOp	* l
>986	Identifier	l
>987	UnaryOperator	*
>988	CallExpression	( * l ) -> getSrcDimensions ( ) . isUnspecified ( )
>989	ArgumentList	 
>990	Callee	( * l ) -> getSrcDimensions ( ) . isUnspecified
>991	MemberAccess	( * l ) -> getSrcDimensions ( ) . isUnspecified
>992	Identifier	isUnspecified
>993	CallExpression	( * l ) -> getSrcDimensions ( )
>994	ArgumentList	 
>995	Callee	( * l ) -> getSrcDimensions
>996	PtrMemberAccess	( * l ) -> getSrcDimensions
>997	Identifier	getSrcDimensions
>998	UnaryOp	* l
>999	Identifier	l
>1000	UnaryOperator	*
>1001	IncDecOp	 
>1002	IncDec	++
>1003	Identifier	l
>1004	Condition	 
>1005	EqualityExpression	l != links . end ( )
>1006	CallExpression	links . end ( )
>1007	ArgumentList	 
>1008	Callee	links . end
>1009	MemberAccess	links . end
>1010	Identifier	end
>1011	Identifier	links
>1012	Identifier	l
>1013	ForInit	 
>1014	IdentifierDeclStatement	std 
>1015	IdentifierDecl	l = links . begin ( )
>1016	AssignmentExpr	l = links . begin ( )
>1017	CallExpression	links . begin ( )
>1018	ArgumentList	 
>1019	Callee	links . begin
>1020	MemberAccess	links . begin
>1021	Identifier	begin
>1022	Identifier	links
>1023	Identifier	l
>1024	Identifier	l
>1025	IdentifierDeclType	std 
>1026	IdentifierDeclStatement	 
>1027	IdentifierDecl	& links = i -> second -> getLinks ( )
>1028	AssignmentExpr	& links = i -> second -> getLinks ( )
>1029	CallExpression	i -> second -> getLinks ( )
>1030	ArgumentList	 
>1031	Callee	i -> second -> getLinks
>1032	PtrMemberAccess	i -> second -> getLinks
>1033	Identifier	getLinks
>1034	PtrMemberAccess	i -> second
>1035	Identifier	second
>1036	Identifier	i
>1037	Identifier	links
>1038	Identifier	links
>1039	IdentifierDeclType	const std 
>1040	IncDecOp	 
>1041	IncDec	++
>1042	Identifier	i
>1043	Condition	 
>1044	EqualityExpression	i != inputs_ . end ( )
>1045	CallExpression	inputs_ . end ( )
>1046	ArgumentList	 
>1047	Callee	inputs_ . end
>1048	MemberAccess	inputs_ . end
>1049	Identifier	end
>1050	Identifier	inputs_
>1051	Identifier	i
>1052	ForInit	 
>1053	IdentifierDeclStatement	InputMap 
>1054	IdentifierDecl	i = inputs_ . begin ( )
>1055	AssignmentExpr	i = inputs_ . begin ( )
>1056	CallExpression	inputs_ . begin ( )
>1057	ArgumentList	 
>1058	Callee	inputs_ . begin
>1059	MemberAccess	inputs_ . begin
>1060	Identifier	begin
>1061	Identifier	inputs_
>1062	Identifier	i
>1063	Identifier	i
>1064	IdentifierDeclType	InputMap 
>1065	IdentifierDeclStatement	 
>1066	IdentifierDecl	ss
>1067	Identifier	ss
>1068	IdentifierDeclType	std 
>1093	FunctionDef	Region 
>1094	ParameterList	const std 
>1095	Parameter	 
>1096	Identifier	name
>1097	ParameterType	const std 
>1098	ReturnType	size_t
>1099	CompoundStatement	 
>1100	ReturnStatement	 
>1101	Identifier	count
>1102	IfStatement	if ( count == 0 )
>1103	CompoundStatement	 
>1104	BlockStarter	 
>1105	CompoundStatement	 
>1106	ExpressionStatement	NTA_THROW << \"Internal error -- the size for the output \" << name << \"is unknown. 
>1107	ShiftExpression	NTA_THROW << \"Internal error -- the size for the output \" << name << \"is unknown. 
>1108	ShiftExpression	\"Internal error -- the size for the output \" << name << \"is unknown. 
>1109	ShiftExpression	name << \"is unknown. 
>1110	ShiftExpression	\"is unknown. 
>1111	CallExpression	e . what ( )
>1112	ArgumentList	 
>1113	Callee	e . what
>1114	MemberAccess	e . what
>1115	Identifier	what
>1116	Identifier	e
>1117	PrimaryExpression	\"is unknown. 
>1118	Identifier	name
>1119	PrimaryExpression	\"Internal error -- the size for the output \"
>1120	Identifier	NTA_THROW
>1121	Identifier	e
>1122	BlockStarter	 
>1123	CompoundStatement	 
>1124	ExpressionStatement	count = impl_ -> getNodeOutputElementCount ( name )
>1125	AssignmentExpr	count = impl_ -> getNodeOutputElementCount ( name )
>1126	CallExpression	impl_ -> getNodeOutputElementCount ( name )
>1127	ArgumentList	name
>1128	Argument	name
>1129	Identifier	name
>1130	Callee	impl_ -> getNodeOutputElementCount
>1131	PtrMemberAccess	impl_ -> getNodeOutputElementCount
>1132	Identifier	getNodeOutputElementCount
>1133	Identifier	impl_
>1134	Identifier	count
>1135	Condition	 
>1136	EqualityExpression	count == 0
>1137	PrimaryExpression	0
>1138	Identifier	count
>1139	IdentifierDeclStatement	 
>1140	IdentifierDecl	count = spec_ -> outputs . getByName ( name ) . count
>1141	AssignmentExpr	count = spec_ -> outputs . getByName ( name ) . count
>1142	MemberAccess	spec_ -> outputs . getByName ( name ) . count
>1143	Identifier	count
>1144	CallExpression	spec_ -> outputs . getByName ( name )
>1145	ArgumentList	name
>1146	Argument	name
>1147	Identifier	name
>1148	Callee	spec_ -> outputs . getByName
>1149	MemberAccess	spec_ -> outputs . getByName
>1150	Identifier	getByName
>1151	PtrMemberAccess	spec_ -> outputs
>1152	Identifier	outputs
>1153	Identifier	spec_
>1154	Identifier	count
>1155	Identifier	count
>1156	IdentifierDeclType	size_t
>1157	ExpressionStatement	 
>1158	CallExpression	NTA_CHECK ( spec_ -> outputs . contains ( name ) )
>1159	ArgumentList	spec_ -> outputs . contains ( name )
>1160	Argument	spec_ -> outputs . contains ( name )
>1161	CallExpression	spec_ -> outputs . contains ( name )
>1162	ArgumentList	name
>1163	Argument	name
>1164	Identifier	name
>1165	Callee	spec_ -> outputs . contains
>1166	MemberAccess	spec_ -> outputs . contains
>1167	Identifier	contains
>1168	PtrMemberAccess	spec_ -> outputs
>1169	Identifier	outputs
>1170	Identifier	spec_
>1171	Callee	NTA_CHECK
>1172	Identifier	NTA_CHECK
>1188	FunctionDef	Region 
>1189	ParameterList	 
>1190	ReturnType	void
>1191	CompoundStatement	 
>1192	ForStatement	for ( OutputMap 
>1193	CompoundStatement	 
>1194	ExpressionStatement	 
>1195	CallExpression	o -> second -> initialize ( count )
>1196	ArgumentList	count
>1197	Argument	count
>1198	Identifier	count
>1199	Callee	o -> second -> initialize
>1200	PtrMemberAccess	o -> second -> initialize
>1201	Identifier	initialize
>1202	PtrMemberAccess	o -> second
>1203	Identifier	second
>1204	Identifier	o
>1205	BlockStarter	 
>1206	CompoundStatement	 
>1207	ExpressionStatement	NTA_THROW << \"Internal error -- unable to get size of output \" << name << \" 
>1208	ShiftExpression	NTA_THROW << \"Internal error -- unable to get size of output \" << name << \" 
>1209	ShiftExpression	\"Internal error -- unable to get size of output \" << name << \" 
>1210	ShiftExpression	name << \" 
>1211	ShiftExpression	\" 
>1212	CallExpression	e . what ( )
>1213	ArgumentList	 
>1214	Callee	e . what
>1215	MemberAccess	e . what
>1216	Identifier	what
>1217	Identifier	e
>1218	PrimaryExpression	\" 
>1219	Identifier	name
>1220	PrimaryExpression	\"Internal error -- unable to get size of output \"
>1221	Identifier	NTA_THROW
>1222	Identifier	e
>1223	BlockStarter	 
>1224	CompoundStatement	 
>1225	ExpressionStatement	count = getNodeOutputElementCount ( name )
>1226	AssignmentExpr	count = getNodeOutputElementCount ( name )
>1227	CallExpression	getNodeOutputElementCount ( name )
>1228	ArgumentList	name
>1229	Argument	name
>1230	Identifier	name
>1231	Callee	getNodeOutputElementCount
>1232	Identifier	getNodeOutputElementCount
>1233	Identifier	count
>1234	IdentifierDeclStatement	 
>1235	IdentifierDecl	count = 0
>1236	AssignmentExpr	count = 0
>1237	PrimaryExpression	0
>1238	Identifier	count
>1239	Identifier	count
>1240	IdentifierDeclType	size_t
>1241	IdentifierDeclStatement	 
>1242	IdentifierDecl	& name = o -> first
>1243	AssignmentExpr	& name = o -> first
>1244	PtrMemberAccess	o -> first
>1245	Identifier	first
>1246	Identifier	o
>1247	Identifier	name
>1248	Identifier	name
>1249	IdentifierDeclType	const std 
>1250	IncDecOp	 
>1251	IncDec	++
>1252	Identifier	o
>1253	Condition	 
>1254	EqualityExpression	o != outputs_ . end ( )
>1255	CallExpression	outputs_ . end ( )
>1256	ArgumentList	 
>1257	Callee	outputs_ . end
>1258	MemberAccess	outputs_ . end
>1259	Identifier	end
>1260	Identifier	outputs_
>1261	Identifier	o
>1262	ForInit	 
>1263	IdentifierDeclStatement	OutputMap 
>1264	IdentifierDecl	o = outputs_ . begin ( )
>1265	AssignmentExpr	o = outputs_ . begin ( )
>1266	CallExpression	outputs_ . begin ( )
>1267	ArgumentList	 
>1268	Callee	outputs_ . begin
>1269	MemberAccess	outputs_ . begin
>1270	Identifier	begin
>1271	Identifier	outputs_
>1272	Identifier	o
>1273	Identifier	o
>1274	IdentifierDeclType	OutputMap 
>1289	FunctionDef	Region 
>1290	ParameterList	 
>1291	ReturnType	void
>1292	CompoundStatement	 
>1293	ForStatement	for ( ; i != inputs_ . end ( ) ; i ++ )
>1294	CompoundStatement	 
>1295	ExpressionStatement	 
>1296	CallExpression	i -> second -> initialize ( )
>1297	ArgumentList	 
>1298	Callee	i -> second -> initialize
>1299	PtrMemberAccess	i -> second -> initialize
>1300	Identifier	initialize
>1301	PtrMemberAccess	i -> second
>1302	Identifier	second
>1303	Identifier	i
>1304	IncDecOp	 
>1305	IncDec	++
>1306	Identifier	i
>1307	Condition	 
>1308	EqualityExpression	i != inputs_ . end ( )
>1309	CallExpression	inputs_ . end ( )
>1310	ArgumentList	 
>1311	Callee	inputs_ . end
>1312	MemberAccess	inputs_ . end
>1313	Identifier	end
>1314	Identifier	inputs_
>1315	Identifier	i
>1316	IdentifierDeclStatement	 
>1317	IdentifierDecl	i = inputs_ . begin ( )
>1318	AssignmentExpr	i = inputs_ . begin ( )
>1319	CallExpression	inputs_ . begin ( )
>1320	ArgumentList	 
>1321	Callee	inputs_ . begin
>1322	MemberAccess	inputs_ . begin
>1323	Identifier	begin
>1324	Identifier	inputs_
>1325	Identifier	i
>1326	Identifier	i
>1327	IdentifierDeclType	InputMap 
>1337	FunctionDef	Region 
>1338	ParameterList	Dimensions & newDims
>1339	Parameter	 
>1340	Identifier	newDims
>1341	ParameterType	Dimensions &
>1342	ReturnType	void
>1343	CompoundStatement	 
>1344	ExpressionStatement	 
>1345	CallExpression	setupEnabledNodeSet ( )
>1346	ArgumentList	 
>1347	Callee	setupEnabledNodeSet
>1348	Identifier	setupEnabledNodeSet
>1349	IfStatement	if ( dims_ . isUnspecified ( ) )
>1350	ElseStatement	else
>1351	CompoundStatement	 
>1352	ExpressionStatement	 
>1353	ShiftExpression	NTA_THROW << \"Attempt to set dimensions of region \" << getName ( ) << \" to \" << newDims . toString ( ) << \" \
>1354	ShiftExpression	\"Attempt to set dimensions of region \" << getName ( ) << \" to \" << newDims . toString ( ) << \" but region \
>1355	ShiftExpression	getName ( ) << \" to \" << newDims . toString ( ) << \" but region already has dimensions \" << dims_ . \
>1356	ShiftExpression	\" to \" << newDims . toString ( ) << \" but region already has dimensions \" << dims_ . toString ( )
>1357	ShiftExpression	newDims . toString ( ) << \" but region already has dimensions \" << dims_ . toString ( )
>1358	ShiftExpression	\" but region already has dimensions \" << dims_ . toString ( )
>1359	CallExpression	dims_ . toString ( )
>1360	ArgumentList	 
>1361	Callee	dims_ . toString
>1362	MemberAccess	dims_ . toString
>1363	Identifier	toString
>1364	Identifier	dims_
>1365	PrimaryExpression	\" but region already has dimensions \"
>1366	CallExpression	newDims . toString ( )
>1367	ArgumentList	 
>1368	Callee	newDims . toString
>1369	MemberAccess	newDims . toString
>1370	Identifier	toString
>1371	Identifier	newDims
>1372	PrimaryExpression	\" to \"
>1373	CallExpression	getName ( )
>1374	ArgumentList	 
>1375	Callee	getName
>1376	Identifier	getName
>1377	PrimaryExpression	\"Attempt to set dimensions of region \"
>1378	Identifier	NTA_THROW
>1379	CompoundStatement	 
>1380	ExpressionStatement	 
>1381	AssignmentExpr	dimensionInfo_ = \"Specified explicitly in setDimensions()\"
>1382	PrimaryExpression	\"Specified explicitly in setDimensions()\"
>1383	Identifier	dimensionInfo_
>1384	ExpressionStatement	 
>1385	AssignmentExpr	dims_ = newDims
>1386	Identifier	newDims
>1387	Identifier	dims_
>1388	IfStatement	if ( ! newDims . isValid ( ) )
>1389	CompoundStatement	 
>1390	ExpressionStatement	 
>1391	ShiftExpression	NTA_THROW << \"Attempt to set region dimensions to invalid value
>1392	ShiftExpression	\"Attempt to set region dimensions to invalid value
>1393	CallExpression	newDims . toString ( )
>1394	ArgumentList	 
>1395	Callee	newDims . toString
>1396	MemberAccess	newDims . toString
>1397	Identifier	toString
>1398	Identifier	newDims
>1399	PrimaryExpression	\"Attempt to set region dimensions to invalid value
>1400	Identifier	NTA_THROW
>1401	Condition	 
>1402	UnaryOp	! newDims . isValid ( )
>1403	CallExpression	newDims . isValid ( )
>1404	ArgumentList	 
>1405	Callee	newDims . isValid
>1406	MemberAccess	newDims . isValid
>1407	Identifier	isValid
>1408	Identifier	newDims
>1409	UnaryOperator	!
>1410	IfStatement	if ( newDims . isDontcare ( ) )
>1411	CompoundStatement	 
>1412	ExpressionStatement	 
>1413	ShiftExpression	NTA_THROW << \"Invalid attempt to set region dimensions to dontcare value\"
>1414	PrimaryExpression	\"Invalid attempt to set region dimensions to dontcare value\"
>1415	Identifier	NTA_THROW
>1416	Condition	 
>1417	CallExpression	newDims . isDontcare ( )
>1418	ArgumentList	 
>1419	Callee	newDims . isDontcare
>1420	MemberAccess	newDims . isDontcare
>1421	Identifier	isDontcare
>1422	Identifier	newDims
>1423	Condition	 
>1424	CallExpression	dims_ . isUnspecified ( )
>1425	ArgumentList	 
>1426	Callee	dims_ . isUnspecified
>1427	MemberAccess	dims_ . isUnspecified
>1428	Identifier	isUnspecified
>1429	Identifier	dims_
>1430	IfStatement	if ( dims_ == newDims )
>1431	ReturnStatement	 
>1432	Condition	 
>1433	EqualityExpression	dims_ == newDims
>1434	Identifier	newDims
>1435	Identifier	dims_
>1445	FunctionDef	Region 
>1446	ParameterList	 
>1447	ReturnType	void
>1448	CompoundStatement	 
>1449	ExpressionStatement	 
>1450	CallExpression	enabledNodes_ -> allOn ( )
>1451	ArgumentList	 
>1452	Callee	enabledNodes_ -> allOn
>1453	PtrMemberAccess	enabledNodes_ -> allOn
>1454	Identifier	allOn
>1455	Identifier	enabledNodes_
>1456	ExpressionStatement	 
>1457	AssignmentExpr	enabledNodes_ = new NodeSet ( nnodes )
>1458	Identifier	nnodes
>1459	Identifier	enabledNodes_
>1460	IdentifierDeclStatement	 
>1461	IdentifierDecl	nnodes = dims_ . getCount ( )
>1462	AssignmentExpr	nnodes = dims_ . getCount ( )
>1463	CallExpression	dims_ . getCount ( )
>1464	ArgumentList	 
>1465	Callee	dims_ . getCount
>1466	MemberAccess	dims_ . getCount
>1467	Identifier	getCount
>1468	Identifier	dims_
>1469	Identifier	nnodes
>1470	Identifier	nnodes
>1471	IdentifierDeclType	size_t
>1472	IfStatement	if ( enabledNodes_ != NULL )
>1473	CompoundStatement	 
>1474	ExpressionStatement	 
>1475	Identifier	enabledNodes_
>1476	Statement	 
>1477	Condition	 
>1478	EqualityExpression	enabledNodes_ != NULL
>1479	Identifier	NULL
>1480	Identifier	enabledNodes_
>1481	ExpressionStatement	 
>1482	CallExpression	NTA_CHECK ( dims_ . isValid ( ) )
>1483	ArgumentList	dims_ . isValid ( )
>1484	Argument	dims_ . isValid ( )
>1485	CallExpression	dims_ . isValid ( )
>1486	ArgumentList	 
>1487	Callee	dims_ . isValid
>1488	MemberAccess	dims_ . isValid
>1489	Identifier	isValid
>1490	Identifier	dims_
>1491	Callee	NTA_CHECK
>1492	Identifier	NTA_CHECK
>1502	FunctionDef	Region 
>1503	ParameterList	 
>1504	ReturnType	const NodeSet &
>1505	CompoundStatement	 
>1506	ReturnStatement	 
>1507	UnaryOp	* enabledNodes_
>1508	Identifier	enabledNodes_
>1509	UnaryOperator	*
>1510	IfStatement	if ( enabledNodes_ == NULL )
>1511	CompoundStatement	 
>1512	ExpressionStatement	 
>1513	ShiftExpression	NTA_THROW << \"Attempt to access enabled nodes set before region has been initialized\"
>1514	PrimaryExpression	\"Attempt to access enabled nodes set before region has been initialized\"
>1515	Identifier	NTA_THROW
>1516	Condition	 
>1517	EqualityExpression	enabledNodes_ == NULL
>1518	Identifier	NULL
>1519	Identifier	enabledNodes_
>1526	FunctionDef	Region 
>1527	ParameterList	const std 
>1528	Parameter	 
>1529	Identifier	info
>1530	ParameterType	const std 
>1531	ReturnType	void
>1532	CompoundStatement	 
>1533	ExpressionStatement	 
>1534	AssignmentExpr	dimensionInfo_ = info
>1535	Identifier	info
>1536	Identifier	dimensionInfo_
>1542	FunctionDef	Region 
>1543	ParameterList	 
>1544	ReturnType	const std 
>1545	CompoundStatement	 
>1546	ReturnStatement	 
>1547	Identifier	dimensionInfo_
>1552	FunctionDef	Region 
>1553	ParameterList	 
>1554	ReturnType	void
>1555	CompoundStatement	 
>1556	ForStatement	for ( ; i != inputs_ . end ( ) ; i ++ )
>1557	CompoundStatement	 
>1558	ForStatement	for ( std 
>1559	CompoundStatement	 
>1560	ExpressionStatement	 
>1561	CallExpression	i -> second -> removeLink ( * link )
>1562	ArgumentList	* link
>1563	Argument	* link
>1564	UnaryOp	* link
>1565	Identifier	link
>1566	UnaryOperator	*
>1567	Callee	i -> second -> removeLink
>1568	PtrMemberAccess	i -> second -> removeLink
>1569	Identifier	removeLink
>1570	PtrMemberAccess	i -> second
>1571	Identifier	second
>1572	Identifier	i
>1573	IncDecOp	 
>1574	IncDec	++
>1575	Identifier	link
>1576	Condition	 
>1577	EqualityExpression	link != links . end ( )
>1578	CallExpression	links . end ( )
>1579	ArgumentList	 
>1580	Callee	links . end
>1581	MemberAccess	links . end
>1582	Identifier	end
>1583	Identifier	links
>1584	Identifier	link
>1585	ForInit	 
>1586	IdentifierDeclStatement	std 
>1587	IdentifierDecl	link = links . begin ( )
>1588	AssignmentExpr	link = links . begin ( )
>1589	CallExpression	links . begin ( )
>1590	ArgumentList	 
>1591	Callee	links . begin
>1592	MemberAccess	links . begin
>1593	Identifier	begin
>1594	Identifier	links
>1595	Identifier	link
>1596	Identifier	link
>1597	IdentifierDeclType	std 
>1598	IdentifierDeclStatement	 
>1599	IdentifierDecl	links = i -> second -> getLinks ( )
>1600	AssignmentExpr	links = i -> second -> getLinks ( )
>1601	CallExpression	i -> second -> getLinks ( )
>1602	ArgumentList	 
>1603	Callee	i -> second -> getLinks
>1604	PtrMemberAccess	i -> second -> getLinks
>1605	Identifier	getLinks
>1606	PtrMemberAccess	i -> second
>1607	Identifier	second
>1608	Identifier	i
>1609	Identifier	links
>1610	Identifier	links
>1611	IdentifierDeclType	std 
>1612	IncDecOp	 
>1613	IncDec	++
>1614	Identifier	i
>1615	Condition	 
>1616	EqualityExpression	i != inputs_ . end ( )
>1617	CallExpression	inputs_ . end ( )
>1618	ArgumentList	 
>1619	Callee	inputs_ . end
>1620	MemberAccess	inputs_ . end
>1621	Identifier	end
>1622	Identifier	inputs_
>1623	Identifier	i
>1624	IdentifierDeclStatement	 
>1625	IdentifierDecl	i = inputs_ . begin ( )
>1626	AssignmentExpr	i = inputs_ . begin ( )
>1627	CallExpression	inputs_ . begin ( )
>1628	ArgumentList	 
>1629	Callee	inputs_ . begin
>1630	MemberAccess	inputs_ . begin
>1631	Identifier	begin
>1632	Identifier	inputs_
>1633	Identifier	i
>1634	Identifier	i
>1635	IdentifierDeclType	InputMap 
>1653	FunctionDef	Region 
>1654	ParameterList	 
>1655	ReturnType	void
>1656	CompoundStatement	 
>1657	ExpressionStatement	 
>1658	AssignmentExpr	initialized_ = false
>1659	Identifier	false
>1660	Identifier	initialized_
>1666	FunctionDef	Region 
>1667	ParameterList	std 
>1668	Parameter	 
>1669	Identifier	phases
>1670	ParameterType	std 
>1671	ReturnType	void
>1672	CompoundStatement	 
>1673	ExpressionStatement	 
>1674	AssignmentExpr	phases_ = phases
>1675	Identifier	phases
>1676	Identifier	phases_
>1682	FunctionDef	Region 
>1683	ParameterList	 
>1684	ReturnType	std 
>1685	CompoundStatement	 
>1686	ReturnStatement	 
>1687	Identifier	phases_
>1692	FunctionDef	Region 
>1693	ParameterList	BundleIO & bundle
>1694	Parameter	 
>1695	Identifier	bundle
>1696	ParameterType	BundleIO &
>1697	ReturnType	void
>1698	CompoundStatement	 
>1699	ExpressionStatement	 
>1700	CallExpression	impl_ -> serialize ( bundle )
>1701	ArgumentList	bundle
>1702	Argument	bundle
>1703	Identifier	bundle
>1704	Callee	impl_ -> serialize
>1705	PtrMemberAccess	impl_ -> serialize
>1706	Identifier	serialize
>1707	Identifier	impl_
>1713	FunctionDef	Region 
>1714	ParameterList	 
>1715	ReturnType	void
>1716	CompoundStatement	 
>1717	ExpressionStatement	 
>1718	AssignmentExpr	profilingEnabled_ = true
>1719	Identifier	true
>1720	Identifier	profilingEnabled_
>1726	FunctionDef	Region 
>1727	ParameterList	 
>1728	ReturnType	void
>1729	CompoundStatement	 
>1730	ExpressionStatement	 
>1731	AssignmentExpr	profilingEnabled_ = false
>1732	Identifier	false
>1733	Identifier	profilingEnabled_
>1739	FunctionDef	Region 
>1740	ParameterList	 
>1741	ReturnType	void
>1742	CompoundStatement	 
>1743	ExpressionStatement	 
>1744	CallExpression	executeTimer_ . reset ( )
>1745	ArgumentList	 
>1746	Callee	executeTimer_ . reset
>1747	MemberAccess	executeTimer_ . reset
>1748	Identifier	reset
>1749	Identifier	executeTimer_
>1750	ExpressionStatement	 
>1751	CallExpression	computeTimer_ . reset ( )
>1752	ArgumentList	 
>1753	Callee	computeTimer_ . reset
>1754	MemberAccess	computeTimer_ . reset
>1755	Identifier	reset
>1756	Identifier	computeTimer_
>1762	FunctionDef	Region 
>1763	ParameterList	 
>1764	ReturnType	const Timer &
>1765	CompoundStatement	 
>1766	ReturnStatement	 
>1767	Identifier	computeTimer_
>1772	FunctionDef	Region 
>1773	ParameterList	 
>1774	ReturnType	const Timer &
>1775	CompoundStatement	 
>1776	ReturnStatement	 
>1777	Identifier	executeTimer_
<3=17,4
<4=14,11,8,5
<5=7,6
<8=10,9
<11=13,12
<14=16,15
<17=63,52,38,23,18
<18=19
<19=21,20
<21=22
<23=24
<24=37,25
<25=33,26
<26=31,29,27
<27=28
<29=30
<31=32
<33=34
<34=36,35
<38=48,39
<39=40
<40=44,41
<41=42
<42=43
<44=45
<45=47,46
<48=49
<49=51,50
<52=53
<53=62,54
<54=58,55
<55=56
<56=57
<58=59
<59=61,60
<63=64
<64=72,71,65
<65=70,66
<66=68,67
<68=69
<90=107,91
<91=104,101,98,95,92
<92=94,93
<95=97,96
<98=100,99
<101=103,102
<104=106,105
<107=188,177,132,128,113,108
<108=109
<109=111,110
<111=112
<113=114
<114=127,115
<115=123,116
<116=121,119,117
<117=118
<119=120
<121=122
<123=124
<124=126,125
<128=129
<129=131,130
<132=173,133
<133=146,134
<134=135
<135=145,136
<136=144,137
<137=143,138
<138=142,139
<139=141,140
<146=147
<147=165,148
<148=157,149
<149=156,150
<150=152,151
<152=153
<153=155,154
<157=164,158
<158=160,159
<160=161
<161=163,162
<165=172,166
<166=168,167
<168=169
<169=171,170
<173=174
<174=176,175
<177=178
<178=187,179
<179=183,180
<180=181
<181=182
<183=184
<184=186,185
<188=189
<189=197,196,190
<190=195,191
<191=193,192
<193=194
<219=222,221,220
<222=223
<223=224
<229=232,231,230
<232=323,233
<233=315,304,301,234
<234=285,276,267,250,244,235
<235=236
<236=240,237
<237=238
<238=239
<240=241
<241=243,242
<244=245
<245=247,246
<247=249,248
<250=251
<251=266,265,252
<252=264,253
<253=261,254
<254=258,255
<255=257,256
<258=260,259
<261=263,262
<267=268
<268=275,274,269
<269=273,270
<270=272,271
<276=277
<277=284,283,278
<278=282,279
<279=281,280
<285=286
<286=300,299,287
<287=298,288
<288=292,289
<289=290
<290=291
<292=293
<293=295,294
<295=297,296
<301=303,302
<304=305
<305=314,306
<306=308,307
<308=309
<309=311,310
<311=313,312
<315=316
<316=317
<317=322,321,318
<318=320,319
<323=405,394,391,324
<324=375,366,357,340,334,325
<325=326
<326=330,327
<327=328
<328=329
<330=331
<331=333,332
<334=335
<335=337,336
<337=339,338
<340=341
<341=356,355,342
<342=354,343
<343=351,344
<344=348,345
<345=347,346
<348=350,349
<351=353,352
<357=358
<358=365,364,359
<359=363,360
<360=362,361
<366=367
<367=374,373,368
<368=372,369
<369=371,370
<375=376
<376=390,389,377
<377=388,378
<378=382,379
<379=380
<380=381
<382=383
<383=385,384
<385=387,386
<391=393,392
<394=395
<395=404,396
<396=398,397
<398=399
<399=401,400
<401=403,402
<405=406
<406=407
<407=412,411,408
<408=410,409
<446=449,448,447
<449=452,450
<450=451
<452=479,470,467,453
<453=454
<454=458,455
<455=456
<456=457
<458=459
<459=461,460
<461=462
<462=464,463
<464=466,465
<467=469,468
<470=471
<471=478,472
<472=474,473
<474=475
<475=477,476
<479=480
<480=481
<481=491,490,482
<482=489,483
<483=485,484
<485=486
<486=488,487
<506=508,507
<508=553,515,514,512,511,509
<509=510
<512=513
<515=540,531,528,516
<516=527,523,517
<517=518
<518=520,519
<520=522,521
<523=524
<524=526,525
<528=530,529
<531=532
<532=539,533
<533=535,534
<535=536
<536=538,537
<540=541
<541=542
<542=552,551,543
<543=550,544
<544=546,545
<546=547
<547=549,548
<553=578,569,566,554
<554=565,561,555
<555=556
<556=558,557
<558=560,559
<561=562
<562=564,563
<566=568,567
<569=570
<570=577,571
<571=573,572
<573=574
<574=576,575
<578=579
<579=580
<580=590,589,581
<581=588,582
<582=584,583
<584=585
<585=587,586
<604=607,606,605
<607=619,612,608
<608=609
<609=611,610
<612=613
<613=615,614
<615=616
<616=618,617
<619=621,620
<621=622
<629=632,631,630
<632=633
<633=634
<639=642,641,640
<642=643
<643=644
<649=652,651,650
<652=653
<653=654
<659=662,661,660
<662=663
<663=664
<669=675,674,670
<670=671
<671=673,672
<675=685,676
<676=677
<677=681,678
<678=679
<679=680
<681=682
<682=684,683
<685=686
<686=694,693,687
<687=692,688
<688=690,689
<690=691
<702=705,704,703
<705=706
<706=707
<712=715,714,713
<715=716
<716=717
<717=726,718
<718=725,719
<719=721,720
<721=723,722
<723=724
<730=733,732,731
<733=734
<734=735
<735=744,736
<736=743,737
<737=739,738
<739=741,740
<741=742
<748=754,753,749
<749=750
<750=752,751
<754=809,794,784,767,757,755
<755=756
<757=765,758
<758=759
<759=761,760
<761=762
<762=764,763
<765=766
<767=768
<768=783,769
<769=779,770
<770=777,771
<771=772
<772=776,773
<773=775,774
<777=778
<779=780
<780=782,781
<784=792,785
<785=786
<786=788,787
<788=789
<789=791,790
<792=793
<794=800,795
<795=796
<796=797
<797=799,798
<800=801
<801=803,802
<803=805,804
<805=806
<806=808,807
<809=810
<810=812,811
<824=827,826,825
<827=856,846,839,829,828
<829=837,830
<830=831
<831=833,832
<833=834
<834=836,835
<837=838
<839=840
<840=842,841
<842=843
<843=845,844
<846=854,847
<847=848
<848=850,849
<850=851
<851=853,852
<854=855
<856=868,857
<857=858
<858=867,859
<859=866,860
<860=862,861
<862=864,863
<864=865
<868=869
<869=871,870
<879=882,881,880
<882=923,885,883
<883=884
<885=910,901,898,886
<886=887
<887=888
<888=897,889
<889=891,890
<891=892
<892=894,893
<894=896,895
<898=900,899
<901=902
<902=909,903
<903=905,904
<905=906
<906=908,907
<910=911
<911=912
<912=922,921,913
<913=920,914
<914=916,915
<916=917
<917=919,918
<923=924
<924=929,928,925
<925=927,926
<943=946,945,944
<946=1065,954,947
<947=948
<948=950,949
<950=951
<951=953,952
<954=1052,1043,1040,955
<955=1026,956
<956=1013,1004,1001,957
<957=958
<958=973,959
<959=960
<960=961
<961=972,962
<962=964,963
<964=966,965
<966=967
<967=969,968
<969=971,970
<973=974
<974=988,975
<975=977,976
<977=978
<978=980,979
<980=982,981
<982=983
<983=985,984
<985=987,986
<988=990,989
<990=991
<991=993,992
<993=995,994
<995=996
<996=998,997
<998=1000,999
<1001=1003,1002
<1004=1005
<1005=1012,1006
<1006=1008,1007
<1008=1009
<1009=1011,1010
<1013=1014
<1014=1015
<1015=1025,1024,1016
<1016=1023,1017
<1017=1019,1018
<1019=1020
<1020=1022,1021
<1026=1027
<1027=1039,1038,1028
<1028=1037,1029
<1029=1031,1030
<1031=1032
<1032=1034,1033
<1034=1036,1035
<1040=1042,1041
<1043=1044
<1044=1051,1045
<1045=1047,1046
<1047=1048
<1048=1050,1049
<1052=1053
<1053=1054
<1054=1064,1063,1055
<1055=1062,1056
<1056=1058,1057
<1058=1059
<1059=1061,1060
<1065=1066
<1066=1068,1067
<1093=1099,1098,1094
<1094=1095
<1095=1097,1096
<1099=1157,1139,1102,1100
<1100=1101
<1102=1135,1103
<1103=1122,1104
<1104=1121,1105
<1105=1106
<1106=1107
<1107=1120,1108
<1108=1119,1109
<1109=1118,1110
<1110=1117,1111
<1111=1113,1112
<1113=1114
<1114=1116,1115
<1122=1123
<1123=1124
<1124=1125
<1125=1134,1126
<1126=1130,1127
<1127=1128
<1128=1129
<1130=1131
<1131=1133,1132
<1135=1136
<1136=1138,1137
<1139=1140
<1140=1156,1155,1141
<1141=1154,1142
<1142=1144,1143
<1144=1148,1145
<1145=1146
<1146=1147
<1148=1149
<1149=1151,1150
<1151=1153,1152
<1157=1158
<1158=1171,1159
<1159=1160
<1160=1161
<1161=1165,1162
<1162=1163
<1163=1164
<1165=1166
<1166=1168,1167
<1168=1170,1169
<1171=1172
<1188=1191,1190,1189
<1191=1192
<1192=1262,1253,1250,1193
<1193=1241,1234,1223,1205,1194
<1194=1195
<1195=1199,1196
<1196=1197
<1197=1198
<1199=1200
<1200=1202,1201
<1202=1204,1203
<1205=1222,1206
<1206=1207
<1207=1208
<1208=1221,1209
<1209=1220,1210
<1210=1219,1211
<1211=1218,1212
<1212=1214,1213
<1214=1215
<1215=1217,1216
<1223=1224
<1224=1225
<1225=1226
<1226=1233,1227
<1227=1231,1228
<1228=1229
<1229=1230
<1231=1232
<1234=1235
<1235=1240,1239,1236
<1236=1238,1237
<1241=1242
<1242=1249,1248,1243
<1243=1247,1244
<1244=1246,1245
<1250=1252,1251
<1253=1254
<1254=1261,1255
<1255=1257,1256
<1257=1258
<1258=1260,1259
<1262=1263
<1263=1264
<1264=1274,1273,1265
<1265=1272,1266
<1266=1268,1267
<1268=1269
<1269=1271,1270
<1289=1292,1291,1290
<1292=1316,1293
<1293=1307,1304,1294
<1294=1295
<1295=1296
<1296=1298,1297
<1298=1299
<1299=1301,1300
<1301=1303,1302
<1304=1306,1305
<1307=1308
<1308=1315,1309
<1309=1311,1310
<1311=1312
<1312=1314,1313
<1316=1317
<1317=1327,1326,1318
<1318=1325,1319
<1319=1321,1320
<1321=1322
<1322=1324,1323
<1337=1343,1342,1338
<1338=1339
<1339=1341,1340
<1343=1430,1349,1344
<1344=1345
<1345=1347,1346
<1347=1348
<1349=1423,1379,1350
<1350=1351
<1351=1352
<1352=1353
<1353=1378,1354
<1354=1377,1355
<1355=1373,1356
<1356=1372,1357
<1357=1366,1358
<1358=1365,1359
<1359=1361,1360
<1361=1362
<1362=1364,1363
<1366=1368,1367
<1368=1369
<1369=1371,1370
<1373=1375,1374
<1375=1376
<1379=1410,1388,1384,1380
<1380=1381
<1381=1383,1382
<1384=1385
<1385=1387,1386
<1388=1401,1389
<1389=1390
<1390=1391
<1391=1400,1392
<1392=1399,1393
<1393=1395,1394
<1395=1396
<1396=1398,1397
<1401=1402
<1402=1409,1403
<1403=1405,1404
<1405=1406
<1406=1408,1407
<1410=1416,1411
<1411=1412
<1412=1413
<1413=1415,1414
<1416=1417
<1417=1419,1418
<1419=1420
<1420=1422,1421
<1423=1424
<1424=1426,1425
<1426=1427
<1427=1429,1428
<1430=1432,1431
<1432=1433
<1433=1435,1434
<1445=1448,1447,1446
<1448=1481,1472,1460,1456,1449
<1449=1450
<1450=1452,1451
<1452=1453
<1453=1455,1454
<1456=1457
<1457=1459,1458
<1460=1461
<1461=1471,1470,1462
<1462=1469,1463
<1463=1465,1464
<1465=1466
<1466=1468,1467
<1472=1477,1473
<1473=1476,1474
<1474=1475
<1477=1478
<1478=1480,1479
<1481=1482
<1482=1491,1483
<1483=1484
<1484=1485
<1485=1487,1486
<1487=1488
<1488=1490,1489
<1491=1492
<1502=1505,1504,1503
<1505=1510,1506
<1506=1507
<1507=1509,1508
<1510=1516,1511
<1511=1512
<1512=1513
<1513=1515,1514
<1516=1517
<1517=1519,1518
<1526=1532,1531,1527
<1527=1528
<1528=1530,1529
<1532=1533
<1533=1534
<1534=1536,1535
<1542=1545,1544,1543
<1545=1546
<1546=1547
<1552=1555,1554,1553
<1555=1624,1556
<1556=1615,1612,1557
<1557=1598,1558
<1558=1585,1576,1573,1559
<1559=1560
<1560=1561
<1561=1567,1562
<1562=1563
<1563=1564
<1564=1566,1565
<1567=1568
<1568=1570,1569
<1570=1572,1571
<1573=1575,1574
<1576=1577
<1577=1584,1578
<1578=1580,1579
<1580=1581
<1581=1583,1582
<1585=1586
<1586=1587
<1587=1597,1596,1588
<1588=1595,1589
<1589=1591,1590
<1591=1592
<1592=1594,1593
<1598=1599
<1599=1611,1610,1600
<1600=1609,1601
<1601=1603,1602
<1603=1604
<1604=1606,1605
<1606=1608,1607
<1612=1614,1613
<1615=1616
<1616=1623,1617
<1617=1619,1618
<1619=1620
<1620=1622,1621
<1624=1625
<1625=1635,1634,1626
<1626=1633,1627
<1627=1629,1628
<1629=1630
<1630=1632,1631
<1653=1656,1655,1654
<1656=1657
<1657=1658
<1658=1660,1659
<1666=1672,1671,1667
<1667=1668
<1668=1670,1669
<1672=1673
<1673=1674
<1674=1676,1675
<1682=1685,1684,1683
<1685=1686
<1686=1687
<1692=1698,1697,1693
<1693=1694
<1694=1696,1695
<1698=1699
<1699=1700
<1700=1704,1701
<1701=1702
<1702=1703
<1704=1705
<1705=1707,1706
<1713=1716,1715,1714
<1716=1717
<1717=1718
<1718=1720,1719
<1726=1729,1728,1727
<1729=1730
<1730=1731
<1731=1733,1732
<1739=1742,1741,1740
<1742=1750,1743
<1743=1744
<1744=1746,1745
<1746=1747
<1747=1749,1748
<1750=1751
<1751=1753,1752
<1753=1754
<1754=1756,1755
<1762=1765,1764,1763
<1765=1766
<1766=1767
<1772=1775,1774,1773
<1775=1776
<1776=1777
