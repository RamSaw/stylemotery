>17	FunctionDef	displayThreadLoop ()
>18	ParameterList	 
>19	ReturnType	void
>20	CompoundStatement	 
>21	ExpressionStatement	 
>22	CallExpression	printf ( \"ended image display thread!\n\" )
>23	ArgumentList	\"ended image display thread!\n\"
>24	Argument	\"ended image display thread!\n\"
>25	PrimaryExpression	\"ended image display thread!\n\"
>26	Callee	printf
>27	Identifier	printf
>28	ExpressionStatement	 
>29	CallExpression	openWindows . clear ( )
>30	ArgumentList	 
>31	Callee	openWindows . clear
>32	MemberAccess	openWindows . clear
>33	Identifier	clear
>34	Identifier	openWindows
>35	ExpressionStatement	 
>36	CallExpression	cv 
>37	ArgumentList	 
>38	Callee	cv 
>39	Identifier	cv 
>40	WhileStatement	while ( imageThreadKeepRunning )
>41	CompoundStatement	 
>42	WhileStatement	while ( displayQueue . size ( ) > 0 )
>43	CompoundStatement	 
>44	ExpressionStatement	 
>45	CallExpression	displayQueue . pop_back ( )
>46	ArgumentList	 
>47	Callee	displayQueue . pop_back
>48	MemberAccess	displayQueue . pop_back
>49	Identifier	pop_back
>50	Identifier	displayQueue
>51	ExpressionStatement	 
>52	CallExpression	cv 
>53	ArgumentList	displayQueue . back ( ) . name
>54	Argument	displayQueue . back ( ) . img
>55	MemberAccess	displayQueue . back ( ) . img
>56	Identifier	img
>57	CallExpression	displayQueue . back ( )
>58	ArgumentList	 
>59	Callee	displayQueue . back
>60	MemberAccess	displayQueue . back
>61	Identifier	back
>62	Identifier	displayQueue
>63	Argument	displayQueue . back ( ) . name
>64	MemberAccess	displayQueue . back ( ) . name
>65	Identifier	name
>66	CallExpression	displayQueue . back ( )
>67	ArgumentList	 
>68	Callee	displayQueue . back
>69	MemberAccess	displayQueue . back
>70	Identifier	back
>71	Identifier	displayQueue
>72	Callee	cv 
>73	Identifier	cv 
>74	IfStatement	if ( ! displayQueue . back ( ) . autoSize )
>75	CompoundStatement	 
>76	IfStatement	if ( openWindows . find ( displayQueue . back ( ) . name ) == openWindows . end ( ) )
>77	CompoundStatement	 
>78	ExpressionStatement	 
>79	CallExpression	openWindows . insert ( displayQueue . back ( ) . name )
>80	ArgumentList	displayQueue . back ( ) . name
>81	Argument	displayQueue . back ( ) . name
>82	MemberAccess	displayQueue . back ( ) . name
>83	Identifier	name
>84	CallExpression	displayQueue . back ( )
>85	ArgumentList	 
>86	Callee	displayQueue . back
>87	MemberAccess	displayQueue . back
>88	Identifier	back
>89	Identifier	displayQueue
>90	Callee	openWindows . insert
>91	MemberAccess	openWindows . insert
>92	Identifier	insert
>93	Identifier	openWindows
>94	ExpressionStatement	 
>95	CallExpression	cv 
>96	ArgumentList	displayQueue . back ( ) . name
>97	Argument	displayQueue . back ( ) . img . rows
>98	MemberAccess	displayQueue . back ( ) . img . rows
>99	Identifier	rows
>100	MemberAccess	displayQueue . back ( ) . img
>101	Identifier	img
>102	CallExpression	displayQueue . back ( )
>103	ArgumentList	 
>104	Callee	displayQueue . back
>105	MemberAccess	displayQueue . back
>106	Identifier	back
>107	Identifier	displayQueue
>108	Argument	displayQueue . back ( ) . img . cols
>109	MemberAccess	displayQueue . back ( ) . img . cols
>110	Identifier	cols
>111	MemberAccess	displayQueue . back ( ) . img
>112	Identifier	img
>113	CallExpression	displayQueue . back ( )
>114	ArgumentList	 
>115	Callee	displayQueue . back
>116	MemberAccess	displayQueue . back
>117	Identifier	back
>118	Identifier	displayQueue
>119	Argument	displayQueue . back ( ) . name
>120	MemberAccess	displayQueue . back ( ) . name
>121	Identifier	name
>122	CallExpression	displayQueue . back ( )
>123	ArgumentList	 
>124	Callee	displayQueue . back
>125	MemberAccess	displayQueue . back
>126	Identifier	back
>127	Identifier	displayQueue
>128	Callee	cv 
>129	Identifier	cv 
>130	ExpressionStatement	 
>131	CallExpression	cv 
>132	ArgumentList	displayQueue . back ( ) . name
>133	Argument	cv 
>134	Identifier	cv 
>135	Argument	displayQueue . back ( ) . name
>136	MemberAccess	displayQueue . back ( ) . name
>137	Identifier	name
>138	CallExpression	displayQueue . back ( )
>139	ArgumentList	 
>140	Callee	displayQueue . back
>141	MemberAccess	displayQueue . back
>142	Identifier	back
>143	Identifier	displayQueue
>144	Callee	cv 
>145	Identifier	cv 
>146	Condition	 
>147	EqualityExpression	openWindows . find ( displayQueue . back ( ) . name ) == openWindows . end ( )
>148	CallExpression	openWindows . end ( )
>149	ArgumentList	 
>150	Callee	openWindows . end
>151	MemberAccess	openWindows . end
>152	Identifier	end
>153	Identifier	openWindows
>154	CallExpression	openWindows . find ( displayQueue . back ( ) . name )
>155	ArgumentList	displayQueue . back ( ) . name
>156	Argument	displayQueue . back ( ) . name
>157	MemberAccess	displayQueue . back ( ) . name
>158	Identifier	name
>159	CallExpression	displayQueue . back ( )
>160	ArgumentList	 
>161	Callee	displayQueue . back
>162	MemberAccess	displayQueue . back
>163	Identifier	back
>164	Identifier	displayQueue
>165	Callee	openWindows . find
>166	MemberAccess	openWindows . find
>167	Identifier	find
>168	Identifier	openWindows
>169	Condition	 
>170	UnaryOp	! displayQueue . back ( ) . autoSize
>171	MemberAccess	displayQueue . back ( ) . autoSize
>172	Identifier	autoSize
>173	CallExpression	displayQueue . back ( )
>174	ArgumentList	 
>175	Callee	displayQueue . back
>176	MemberAccess	displayQueue . back
>177	Identifier	back
>178	Identifier	displayQueue
>179	UnaryOperator	!
>180	Condition	 
>181	RelationalExpression	displayQueue . size ( ) > 0
>182	PrimaryExpression	0
>183	CallExpression	displayQueue . size ( )
>184	ArgumentList	 
>185	Callee	displayQueue . size
>186	MemberAccess	displayQueue . size
>187	Identifier	size
>188	Identifier	displayQueue
>189	IfStatement	if ( ! imageThreadKeepRunning )
>190	BreakStatement	 
>191	Condition	 
>192	UnaryOp	! imageThreadKeepRunning
>193	Identifier	imageThreadKeepRunning
>194	UnaryOperator	!
>195	ExpressionStatement	 
>196	CallExpression	openCVdisplaySignal . wait ( lock )
>197	ArgumentList	lock
>198	Argument	lock
>199	Identifier	lock
>200	Callee	openCVdisplaySignal . wait
>201	MemberAccess	openCVdisplaySignal . wait
>202	Identifier	wait
>203	Identifier	openCVdisplaySignal
>204	Condition	 
>205	Identifier	imageThreadKeepRunning
>206	IdentifierDeclStatement	 
>207	IdentifierDecl	lock ( openCVdisplayMutex )
>208	Identifier	openCVdisplayMutex
>209	Identifier	lock
>210	IdentifierDeclType	boost 
>211	ExpressionStatement	 
>212	CallExpression	printf ( \"started image display thread!\n\" )
>213	ArgumentList	\"started image display thread!\n\"
>214	Argument	\"started image display thread!\n\"
>215	PrimaryExpression	\"started image display thread!\n\"
>216	Callee	printf
>217	Identifier	printf
>236	FunctionDef	makeDisplayThread ()
>237	ParameterList	 
>238	ReturnType	void
>239	CompoundStatement	 
>240	ExpressionStatement	 
>241	AssignmentExpr	imageDisplayThread = new boost 
>242	UnaryOp	& displayThreadLoop
>243	Identifier	displayThreadLoop
>244	UnaryOperator	&
>245	Identifier	imageDisplayThread
>246	ExpressionStatement	 
>247	AssignmentExpr	imageThreadKeepRunning = true
>248	Identifier	true
>249	Identifier	imageThreadKeepRunning
>257	FunctionDef	displayImage (const char * windowName , const cv 
>258	ParameterList	const char * windowName , const cv 
>259	Parameter	 
>260	Identifier	autoSize
>261	ParameterType	bool
>262	Parameter	 
>263	Identifier	image
>264	ParameterType	const cv 
>265	Parameter	 
>266	Identifier	windowName
>267	ParameterType	const char *
>268	ReturnType	void
>269	CompoundStatement	 
>270	IfStatement	if ( useImageDisplayThread )
>271	ElseStatement	else
>272	CompoundStatement	 
>273	ExpressionStatement	 
>274	CallExpression	cv 
>275	ArgumentList	windowName
>276	Argument	image
>277	Identifier	image
>278	Argument	windowName
>279	Identifier	windowName
>280	Callee	cv 
>281	Identifier	cv 
>282	IfStatement	if ( ! autoSize )
>283	CompoundStatement	 
>284	IfStatement	if ( openWindows . find ( windowName ) == openWindows . end ( ) )
>285	CompoundStatement	 
>286	ExpressionStatement	 
>287	CallExpression	openWindows . insert ( windowName )
>288	ArgumentList	windowName
>289	Argument	windowName
>290	Identifier	windowName
>291	Callee	openWindows . insert
>292	MemberAccess	openWindows . insert
>293	Identifier	insert
>294	Identifier	openWindows
>295	ExpressionStatement	 
>296	CallExpression	cv 
>297	ArgumentList	windowName
>298	Argument	image . rows
>299	MemberAccess	image . rows
>300	Identifier	rows
>301	Identifier	image
>302	Argument	image . cols
>303	MemberAccess	image . cols
>304	Identifier	cols
>305	Identifier	image
>306	Argument	windowName
>307	Identifier	windowName
>308	Callee	cv 
>309	Identifier	cv 
>310	ExpressionStatement	 
>311	CallExpression	cv 
>312	ArgumentList	windowName
>313	Argument	cv 
>314	Identifier	cv 
>315	Argument	windowName
>316	Identifier	windowName
>317	Callee	cv 
>318	Identifier	cv 
>319	Condition	 
>320	EqualityExpression	openWindows . find ( windowName ) == openWindows . end ( )
>321	CallExpression	openWindows . end ( )
>322	ArgumentList	 
>323	Callee	openWindows . end
>324	MemberAccess	openWindows . end
>325	Identifier	end
>326	Identifier	openWindows
>327	CallExpression	openWindows . find ( windowName )
>328	ArgumentList	windowName
>329	Argument	windowName
>330	Identifier	windowName
>331	Callee	openWindows . find
>332	MemberAccess	openWindows . find
>333	Identifier	find
>334	Identifier	openWindows
>335	Condition	 
>336	UnaryOp	! autoSize
>337	Identifier	autoSize
>338	UnaryOperator	!
>339	CompoundStatement	 
>340	ExpressionStatement	 
>341	CallExpression	openCVdisplaySignal . notify_one ( )
>342	ArgumentList	 
>343	Callee	openCVdisplaySignal . notify_one
>344	MemberAccess	openCVdisplaySignal . notify_one
>345	Identifier	notify_one
>346	Identifier	openCVdisplaySignal
>347	ExpressionStatement	 
>348	AssignmentExpr	displayQueue . back ( ) . name = windowName
>349	Identifier	windowName
>350	MemberAccess	displayQueue . back ( ) . name
>351	Identifier	name
>352	CallExpression	displayQueue . back ( )
>353	ArgumentList	 
>354	Callee	displayQueue . back
>355	MemberAccess	displayQueue . back
>356	Identifier	back
>357	Identifier	displayQueue
>358	ExpressionStatement	 
>359	AssignmentExpr	displayQueue . back ( ) . img = image . clone ( )
>360	CallExpression	image . clone ( )
>361	ArgumentList	 
>362	Callee	image . clone
>363	MemberAccess	image . clone
>364	Identifier	clone
>365	Identifier	image
>366	MemberAccess	displayQueue . back ( ) . img
>367	Identifier	img
>368	CallExpression	displayQueue . back ( )
>369	ArgumentList	 
>370	Callee	displayQueue . back
>371	MemberAccess	displayQueue . back
>372	Identifier	back
>373	Identifier	displayQueue
>374	ExpressionStatement	 
>375	AssignmentExpr	displayQueue . back ( ) . autoSize = autoSize
>376	Identifier	autoSize
>377	MemberAccess	displayQueue . back ( ) . autoSize
>378	Identifier	autoSize
>379	CallExpression	displayQueue . back ( )
>380	ArgumentList	 
>381	Callee	displayQueue . back
>382	MemberAccess	displayQueue . back
>383	Identifier	back
>384	Identifier	displayQueue
>385	ExpressionStatement	 
>386	CallExpression	displayQueue . push_back ( DisplayImageObect ( ) )
>387	ArgumentList	DisplayImageObect ( )
>388	Argument	DisplayImageObect ( )
>389	CallExpression	DisplayImageObect ( )
>390	ArgumentList	 
>391	Callee	DisplayImageObect
>392	Identifier	DisplayImageObect
>393	Callee	displayQueue . push_back
>394	MemberAccess	displayQueue . push_back
>395	Identifier	push_back
>396	Identifier	displayQueue
>397	IdentifierDeclStatement	 
>398	IdentifierDecl	lock ( openCVdisplayMutex )
>399	Identifier	openCVdisplayMutex
>400	Identifier	lock
>401	IdentifierDeclType	boost 
>402	IfStatement	if ( imageDisplayThread == 0 )
>403	ExpressionStatement	 
>404	CallExpression	makeDisplayThread ( )
>405	ArgumentList	 
>406	Callee	makeDisplayThread
>407	Identifier	makeDisplayThread
>408	Condition	 
>409	EqualityExpression	imageDisplayThread == 0
>410	PrimaryExpression	0
>411	Identifier	imageDisplayThread
>412	Condition	 
>413	Identifier	useImageDisplayThread
>437	FunctionDef	waitKey (int milliseconds)
>438	ParameterList	int milliseconds
>439	Parameter	 
>440	Identifier	milliseconds
>441	ParameterType	int
>442	ReturnType	int
>443	CompoundStatement	 
>444	ReturnStatement	 
>445	CallExpression	cv 
>446	ArgumentList	milliseconds
>447	Argument	milliseconds
>448	Identifier	milliseconds
>449	Callee	cv 
>450	Identifier	cv 
>456	FunctionDef	waitKeyNoConsume (int milliseconds)
>457	ParameterList	int milliseconds
>458	Parameter	 
>459	Identifier	milliseconds
>460	ParameterType	int
>461	ReturnType	int
>462	CompoundStatement	 
>463	ReturnStatement	 
>464	CallExpression	cv 
>465	ArgumentList	milliseconds
>466	Argument	milliseconds
>467	Identifier	milliseconds
>468	Callee	cv 
>469	Identifier	cv 
>475	FunctionDef	closeAllWindows ()
>476	ParameterList	 
>477	ReturnType	void
>478	CompoundStatement	 
>479	IfStatement	if ( useImageDisplayThread )
>480	ElseStatement	else
>481	CompoundStatement	 
>482	ExpressionStatement	 
>483	CallExpression	openWindows . clear ( )
>484	ArgumentList	 
>485	Callee	openWindows . clear
>486	MemberAccess	openWindows . clear
>487	Identifier	clear
>488	Identifier	openWindows
>489	ExpressionStatement	 
>490	CallExpression	cv 
>491	ArgumentList	 
>492	Callee	cv 
>493	Identifier	cv 
>494	CompoundStatement	 
>495	IfStatement	if ( imageDisplayThread != 0 )
>496	CompoundStatement	 
>497	ExpressionStatement	 
>498	AssignmentExpr	imageDisplayThread = 0
>499	PrimaryExpression	0
>500	Identifier	imageDisplayThread
>501	ExpressionStatement	 
>502	CallExpression	printf ( \"done waiting for image display thread to end!\n\" )
>503	ArgumentList	\"done waiting for image display thread to end!\n\"
>504	Argument	\"done waiting for image display thread to end!\n\"
>505	PrimaryExpression	\"done waiting for image display thread to end!\n\"
>506	Callee	printf
>507	Identifier	printf
>508	ExpressionStatement	 
>509	CallExpression	imageDisplayThread -> join ( )
>510	ArgumentList	 
>511	Callee	imageDisplayThread -> join
>512	PtrMemberAccess	imageDisplayThread -> join
>513	Identifier	join
>514	Identifier	imageDisplayThread
>515	ExpressionStatement	 
>516	CallExpression	lock . unlock ( )
>517	ArgumentList	 
>518	Callee	lock . unlock
>519	MemberAccess	lock . unlock
>520	Identifier	unlock
>521	Identifier	lock
>522	ExpressionStatement	 
>523	CallExpression	printf ( \"waiting for image display thread to end!\n\" )
>524	ArgumentList	\"waiting for image display thread to end!\n\"
>525	Argument	\"waiting for image display thread to end!\n\"
>526	PrimaryExpression	\"waiting for image display thread to end!\n\"
>527	Callee	printf
>528	Identifier	printf
>529	ExpressionStatement	 
>530	CallExpression	openCVdisplaySignal . notify_all ( )
>531	ArgumentList	 
>532	Callee	openCVdisplaySignal . notify_all
>533	MemberAccess	openCVdisplaySignal . notify_all
>534	Identifier	notify_all
>535	Identifier	openCVdisplaySignal
>536	ExpressionStatement	 
>537	AssignmentExpr	imageThreadKeepRunning = false
>538	Identifier	false
>539	Identifier	imageThreadKeepRunning
>540	Condition	 
>541	EqualityExpression	imageDisplayThread != 0
>542	PrimaryExpression	0
>543	Identifier	imageDisplayThread
>544	Condition	 
>545	Identifier	useImageDisplayThread
>546	IdentifierDeclStatement	 
>547	IdentifierDecl	lock ( openCVdisplayMutex )
>548	Identifier	openCVdisplayMutex
>549	Identifier	lock
>550	IdentifierDeclType	boost 
<17=20,19,18
<20=211,206,40,35,28,21
<21=22
<22=26,23
<23=24
<24=25
<26=27
<28=29
<29=31,30
<31=32
<32=34,33
<35=36
<36=38,37
<38=39
<40=204,41
<41=195,189,42
<42=180,43
<43=74,51,44
<44=45
<45=47,46
<47=48
<48=50,49
<51=52
<52=72,53
<53=63,54
<54=55
<55=57,56
<57=59,58
<59=60
<60=62,61
<63=64
<64=66,65
<66=68,67
<68=69
<69=71,70
<72=73
<74=169,75
<75=76
<76=146,77
<77=130,94,78
<78=79
<79=90,80
<80=81
<81=82
<82=84,83
<84=86,85
<86=87
<87=89,88
<90=91
<91=93,92
<94=95
<95=128,96
<96=119,108,97
<97=98
<98=100,99
<100=102,101
<102=104,103
<104=105
<105=107,106
<108=109
<109=111,110
<111=113,112
<113=115,114
<115=116
<116=118,117
<119=120
<120=122,121
<122=124,123
<124=125
<125=127,126
<128=129
<130=131
<131=144,132
<132=135,133
<133=134
<135=136
<136=138,137
<138=140,139
<140=141
<141=143,142
<144=145
<146=147
<147=154,148
<148=150,149
<150=151
<151=153,152
<154=165,155
<155=156
<156=157
<157=159,158
<159=161,160
<161=162
<162=164,163
<165=166
<166=168,167
<169=170
<170=179,171
<171=173,172
<173=175,174
<175=176
<176=178,177
<180=181
<181=183,182
<183=185,184
<185=186
<186=188,187
<189=191,190
<191=192
<192=194,193
<195=196
<196=200,197
<197=198
<198=199
<200=201
<201=203,202
<204=205
<206=207
<207=210,209,208
<211=212
<212=216,213
<213=214
<214=215
<216=217
<236=239,238,237
<239=246,240
<240=241
<241=245,242
<242=244,243
<246=247
<247=249,248
<257=269,268,258
<258=265,262,259
<259=261,260
<262=264,263
<265=267,266
<269=270
<270=412,339,271
<271=272
<272=282,273
<273=274
<274=280,275
<275=278,276
<276=277
<278=279
<280=281
<282=335,283
<283=284
<284=319,285
<285=310,295,286
<286=287
<287=291,288
<288=289
<289=290
<291=292
<292=294,293
<295=296
<296=308,297
<297=306,302,298
<298=299
<299=301,300
<302=303
<303=305,304
<306=307
<308=309
<310=311
<311=317,312
<312=315,313
<313=314
<315=316
<317=318
<319=320
<320=327,321
<321=323,322
<323=324
<324=326,325
<327=331,328
<328=329
<329=330
<331=332
<332=334,333
<335=336
<336=338,337
<339=402,397,385,374,358,347,340
<340=341
<341=343,342
<343=344
<344=346,345
<347=348
<348=350,349
<350=352,351
<352=354,353
<354=355
<355=357,356
<358=359
<359=366,360
<360=362,361
<362=363
<363=365,364
<366=368,367
<368=370,369
<370=371
<371=373,372
<374=375
<375=377,376
<377=379,378
<379=381,380
<381=382
<382=384,383
<385=386
<386=393,387
<387=388
<388=389
<389=391,390
<391=392
<393=394
<394=396,395
<397=398
<398=401,400,399
<402=408,403
<403=404
<404=406,405
<406=407
<408=409
<409=411,410
<412=413
<437=443,442,438
<438=439
<439=441,440
<443=444
<444=445
<445=449,446
<446=447
<447=448
<449=450
<456=462,461,457
<457=458
<458=460,459
<462=463
<463=464
<464=468,465
<465=466
<466=467
<468=469
<475=478,477,476
<478=546,479
<479=544,494,480
<480=481
<481=489,482
<482=483
<483=485,484
<485=486
<486=488,487
<489=490
<490=492,491
<492=493
<494=495
<495=540,496
<496=536,529,522,515,508,501,497
<497=498
<498=500,499
<501=502
<502=506,503
<503=504
<504=505
<506=507
<508=509
<509=511,510
<511=512
<512=514,513
<515=516
<516=518,517
<518=519
<519=521,520
<522=523
<523=527,524
<524=525
<525=526
<527=528
<529=530
<530=532,531
<532=533
<533=535,534
<536=537
<537=539,538
<540=541
<541=543,542
<544=545
<546=547
<547=550,549,548
