>26	FunctionDef	GDALComputeMedianCutPCT (GDALRasterBandH hRed , GDALRasterBandH hGreen , GDALRasterBandH hBlue , int ( * pfnIncludePixel ) ( \
>27	ParameterList	GDALRasterBandH hRed , GDALRasterBandH hGreen , GDALRasterBandH hBlue , int ( * pfnIncludePixel ) ( int , int , \
>28	Parameter	 
>29	Identifier	pProgressArg
>30	ParameterType	void *
>31	Parameter	 
>32	Identifier	pfnProgress
>33	ParameterType	GDALProgressFunc
>34	Parameter	 
>35	Identifier	hColorTable
>36	ParameterType	GDALColorTableH
>37	Parameter	 
>38	Identifier	nColors
>39	ParameterType	int
>40	Parameter	 
>41	Identifier	pfnIncludePixel
>42	ParameterType	(( int , int , void * ) int) *
>43	Parameter	 
>44	Identifier	hBlue
>45	ParameterType	GDALRasterBandH
>46	Parameter	 
>47	Identifier	hGreen
>48	ParameterType	GDALRasterBandH
>49	Parameter	 
>50	Identifier	hRed
>51	ParameterType	GDALRasterBandH
>52	ReturnType	int CPL_STDCALL
>53	CompoundStatement	 
>54	ReturnStatement	 
>55	Identifier	err
>56	ExpressionStatement	 
>57	CallExpression	CPLFree ( histogram )
>58	ArgumentList	histogram
>59	Argument	histogram
>60	Identifier	histogram
>61	Callee	CPLFree
>62	Identifier	CPLFree
>63	ExpressionStatement	 
>64	AssignmentExpr	freeboxes = usedboxes = NULL
>65	AssignmentExpr	usedboxes = NULL
>66	Identifier	NULL
>67	Identifier	usedboxes
>68	Identifier	freeboxes
>69	ExpressionStatement	 
>70	CallExpression	CPLFree ( box_list )
>71	ArgumentList	box_list
>72	Argument	box_list
>73	Identifier	box_list
>74	Callee	CPLFree
>75	Identifier	CPLFree
>76	ExpressionStatement	 
>77	CallExpression	CPLFree ( pabyBlueLine )
>78	ArgumentList	pabyBlueLine
>79	Argument	pabyBlueLine
>80	Identifier	pabyBlueLine
>81	Callee	CPLFree
>82	Identifier	CPLFree
>83	ExpressionStatement	 
>84	CallExpression	CPLFree ( pabyGreenLine )
>85	ArgumentList	pabyGreenLine
>86	Argument	pabyGreenLine
>87	Identifier	pabyGreenLine
>88	Callee	CPLFree
>89	Identifier	CPLFree
>90	ExpressionStatement	 
>91	CallExpression	CPLFree ( pabyRedLine )
>92	ArgumentList	pabyRedLine
>93	Argument	pabyRedLine
>94	Identifier	pabyRedLine
>95	Callee	CPLFree
>96	Identifier	CPLFree
>97	Label	 
>98	Identifier	end_and_cleanup
>99	ForStatement	for ( i = 0 , ptr = usedboxes ; ptr != NULL ; ++ i , ptr = ptr -> next )
>100	CompoundStatement	 
>101	ExpressionStatement	 
>102	CallExpression	GDALSetColorEntry ( hColorTable , i , & sEntry )
>103	ArgumentList	hColorTable
>104	Argument	& sEntry
>105	UnaryOp	& sEntry
>106	Identifier	sEntry
>107	UnaryOperator	&
>108	Argument	i
>109	Identifier	i
>110	Argument	hColorTable
>111	Identifier	hColorTable
>112	Callee	GDALSetColorEntry
>113	Identifier	GDALSetColorEntry
>114	ExpressionStatement	 
>115	AssignmentExpr	sEntry . c4 = 255
>116	PrimaryExpression	255
>117	MemberAccess	sEntry . c4
>118	Identifier	c4
>119	Identifier	sEntry
>120	ExpressionStatement	 
>121	AssignmentExpr	sEntry . c3 = ( GByte ) ( ( ( ptr -> bmin + ptr -> bmax ) << COLOR_SHIFT ) / 2 )
>122	CastExpression	( GByte ) ( ( ( ptr -> bmin + ptr -> bmax ) << COLOR_SHIFT ) / 2 )
>123	MultiplicativeExpression	( ( ptr -> bmin + ptr -> bmax ) << COLOR_SHIFT ) / 2
>124	PrimaryExpression	2
>125	ShiftExpression	( ptr -> bmin + ptr -> bmax ) << COLOR_SHIFT
>126	Identifier	COLOR_SHIFT
>127	AdditiveExpression	ptr -> bmin + ptr -> bmax
>128	PtrMemberAccess	ptr -> bmax
>129	Identifier	bmax
>130	Identifier	ptr
>131	PtrMemberAccess	ptr -> bmin
>132	Identifier	bmin
>133	Identifier	ptr
>134	CastTarget	GByte
>135	MemberAccess	sEntry . c3
>136	Identifier	c3
>137	Identifier	sEntry
>138	ExpressionStatement	 
>139	AssignmentExpr	sEntry . c2 = ( GByte ) ( ( ( ptr -> gmin + ptr -> gmax ) << COLOR_SHIFT ) / 2 )
>140	CastExpression	( GByte ) ( ( ( ptr -> gmin + ptr -> gmax ) << COLOR_SHIFT ) / 2 )
>141	MultiplicativeExpression	( ( ptr -> gmin + ptr -> gmax ) << COLOR_SHIFT ) / 2
>142	PrimaryExpression	2
>143	ShiftExpression	( ptr -> gmin + ptr -> gmax ) << COLOR_SHIFT
>144	Identifier	COLOR_SHIFT
>145	AdditiveExpression	ptr -> gmin + ptr -> gmax
>146	PtrMemberAccess	ptr -> gmax
>147	Identifier	gmax
>148	Identifier	ptr
>149	PtrMemberAccess	ptr -> gmin
>150	Identifier	gmin
>151	Identifier	ptr
>152	CastTarget	GByte
>153	MemberAccess	sEntry . c2
>154	Identifier	c2
>155	Identifier	sEntry
>156	ExpressionStatement	 
>157	AssignmentExpr	sEntry . c1 = ( GByte ) ( ( ( ptr -> rmin + ptr -> rmax ) << COLOR_SHIFT ) / 2 )
>158	CastExpression	( GByte ) ( ( ( ptr -> rmin + ptr -> rmax ) << COLOR_SHIFT ) / 2 )
>159	MultiplicativeExpression	( ( ptr -> rmin + ptr -> rmax ) << COLOR_SHIFT ) / 2
>160	PrimaryExpression	2
>161	ShiftExpression	( ptr -> rmin + ptr -> rmax ) << COLOR_SHIFT
>162	Identifier	COLOR_SHIFT
>163	AdditiveExpression	ptr -> rmin + ptr -> rmax
>164	PtrMemberAccess	ptr -> rmax
>165	Identifier	rmax
>166	Identifier	ptr
>167	PtrMemberAccess	ptr -> rmin
>168	Identifier	rmin
>169	Identifier	ptr
>170	CastTarget	GByte
>171	MemberAccess	sEntry . c1
>172	Identifier	c1
>173	Identifier	sEntry
>174	IdentifierDeclStatement	 
>175	IdentifierDecl	sEntry
>176	Identifier	sEntry
>177	IdentifierDeclType	GDALColorEntry
>178	Expression	 
>179	AssignmentExpr	ptr = ptr -> next
>180	PtrMemberAccess	ptr -> next
>181	Identifier	next
>182	Identifier	ptr
>183	Identifier	ptr
>184	UnaryExpression	++ i
>185	Identifier	i
>186	IncDec	++
>187	Condition	 
>188	EqualityExpression	ptr != NULL
>189	Identifier	NULL
>190	Identifier	ptr
>191	ForInit	 
>192	Expression	i = 0 , ptr = usedboxes
>193	AssignmentExpr	ptr = usedboxes
>194	Identifier	usedboxes
>195	Identifier	ptr
>196	AssignmentExpr	i = 0
>197	PrimaryExpression	0
>198	Identifier	i
>199	WhileStatement	while ( freeboxes != NULL )
>200	CompoundStatement	 
>201	IfStatement	if ( ptr != NULL )
>202	ElseStatement	else
>203	ExpressionStatement	 
>204	AssignmentExpr	freeboxes = NULL
>205	Identifier	NULL
>206	Identifier	freeboxes
>207	ExpressionStatement	 
>208	CallExpression	splitbox ( ptr , histogram , & freeboxes , & usedboxes )
>209	ArgumentList	ptr
>210	Argument	& usedboxes
>211	UnaryOp	& usedboxes
>212	Identifier	usedboxes
>213	UnaryOperator	&
>214	Argument	& freeboxes
>215	UnaryOp	& freeboxes
>216	Identifier	freeboxes
>217	UnaryOperator	&
>218	Argument	histogram
>219	Identifier	histogram
>220	Argument	ptr
>221	Identifier	ptr
>222	Callee	splitbox
>223	Identifier	splitbox
>224	Condition	 
>225	EqualityExpression	ptr != NULL
>226	Identifier	NULL
>227	Identifier	ptr
>228	ExpressionStatement	 
>229	AssignmentExpr	ptr = largest_box ( usedboxes )
>230	CallExpression	largest_box ( usedboxes )
>231	ArgumentList	usedboxes
>232	Argument	usedboxes
>233	Identifier	usedboxes
>234	Callee	largest_box
>235	Identifier	largest_box
>236	Identifier	ptr
>237	Condition	 
>238	EqualityExpression	freeboxes != NULL
>239	Identifier	NULL
>240	Identifier	freeboxes
>241	IfStatement	if ( ! pfnProgress ( 1.0 , \"Generating Histogram\" , pProgressArg ) )
>242	CompoundStatement	 
>243	GotoStatement	 
>244	Identifier	end_and_cleanup
>245	ExpressionStatement	 
>246	AssignmentExpr	err = CE_Failure
>247	Identifier	CE_Failure
>248	Identifier	err
>249	ExpressionStatement	 
>250	CallExpression	CPLError ( CE_Failure , CPLE_UserInterrupt , \"User Terminated\" )
>251	ArgumentList	CE_Failure
>252	Argument	\"User Terminated\"
>253	PrimaryExpression	\"User Terminated\"
>254	Argument	CPLE_UserInterrupt
>255	Identifier	CPLE_UserInterrupt
>256	Argument	CE_Failure
>257	Identifier	CE_Failure
>258	Callee	CPLError
>259	Identifier	CPLError
>260	Condition	 
>261	UnaryOp	! pfnProgress ( 1.0 , \"Generating Histogram\" , pProgressArg )
>262	CallExpression	pfnProgress ( 1.0 , \"Generating Histogram\" , pProgressArg )
>263	ArgumentList	1.0
>264	Argument	pProgressArg
>265	Identifier	pProgressArg
>266	Argument	\"Generating Histogram\"
>267	PrimaryExpression	\"Generating Histogram\"
>268	Argument	1.0
>269	PrimaryExpression	1.0
>270	Callee	pfnProgress
>271	Identifier	pfnProgress
>272	UnaryOperator	!
>273	ForStatement	for ( iLine = 0 ; iLine < nYSize ; iLine ++ )
>274	CompoundStatement	 
>275	ForStatement	for ( iPixel = 0 ; iPixel < nXSize ; iPixel ++ )
>276	CompoundStatement	 
>277	ExpressionStatement	 
>278	IncDecOp	histogram [ nRed ] [ nGreen ] [ nBlue ] ++
>279	IncDec	++
>280	ArrayIndexing	histogram [ nRed ] [ nGreen ] [ nBlue ]
>281	Identifier	nBlue
>282	ArrayIndexing	histogram [ nRed ] [ nGreen ]
>283	Identifier	nGreen
>284	ArrayIndexing	histogram [ nRed ]
>285	Identifier	nRed
>286	Identifier	histogram
>287	ExpressionStatement	 
>288	AssignmentExpr	ptr -> bmax = MAX ( ptr -> bmax , nBlue )
>289	CallExpression	MAX ( ptr -> bmax , nBlue )
>290	ArgumentList	ptr -> bmax
>291	Argument	nBlue
>292	Identifier	nBlue
>293	Argument	ptr -> bmax
>294	PtrMemberAccess	ptr -> bmax
>295	Identifier	bmax
>296	Identifier	ptr
>297	Callee	MAX
>298	Identifier	MAX
>299	PtrMemberAccess	ptr -> bmax
>300	Identifier	bmax
>301	Identifier	ptr
>302	ExpressionStatement	 
>303	AssignmentExpr	ptr -> gmax = MAX ( ptr -> gmax , nGreen )
>304	CallExpression	MAX ( ptr -> gmax , nGreen )
>305	ArgumentList	ptr -> gmax
>306	Argument	nGreen
>307	Identifier	nGreen
>308	Argument	ptr -> gmax
>309	PtrMemberAccess	ptr -> gmax
>310	Identifier	gmax
>311	Identifier	ptr
>312	Callee	MAX
>313	Identifier	MAX
>314	PtrMemberAccess	ptr -> gmax
>315	Identifier	gmax
>316	Identifier	ptr
>317	ExpressionStatement	 
>318	AssignmentExpr	ptr -> rmax = MAX ( ptr -> rmax , nRed )
>319	CallExpression	MAX ( ptr -> rmax , nRed )
>320	ArgumentList	ptr -> rmax
>321	Argument	nRed
>322	Identifier	nRed
>323	Argument	ptr -> rmax
>324	PtrMemberAccess	ptr -> rmax
>325	Identifier	rmax
>326	Identifier	ptr
>327	Callee	MAX
>328	Identifier	MAX
>329	PtrMemberAccess	ptr -> rmax
>330	Identifier	rmax
>331	Identifier	ptr
>332	ExpressionStatement	 
>333	AssignmentExpr	ptr -> bmin = MIN ( ptr -> bmin , nBlue )
>334	CallExpression	MIN ( ptr -> bmin , nBlue )
>335	ArgumentList	ptr -> bmin
>336	Argument	nBlue
>337	Identifier	nBlue
>338	Argument	ptr -> bmin
>339	PtrMemberAccess	ptr -> bmin
>340	Identifier	bmin
>341	Identifier	ptr
>342	Callee	MIN
>343	Identifier	MIN
>344	PtrMemberAccess	ptr -> bmin
>345	Identifier	bmin
>346	Identifier	ptr
>347	ExpressionStatement	 
>348	AssignmentExpr	ptr -> gmin = MIN ( ptr -> gmin , nGreen )
>349	CallExpression	MIN ( ptr -> gmin , nGreen )
>350	ArgumentList	ptr -> gmin
>351	Argument	nGreen
>352	Identifier	nGreen
>353	Argument	ptr -> gmin
>354	PtrMemberAccess	ptr -> gmin
>355	Identifier	gmin
>356	Identifier	ptr
>357	Callee	MIN
>358	Identifier	MIN
>359	PtrMemberAccess	ptr -> gmin
>360	Identifier	gmin
>361	Identifier	ptr
>362	ExpressionStatement	 
>363	AssignmentExpr	ptr -> rmin = MIN ( ptr -> rmin , nRed )
>364	CallExpression	MIN ( ptr -> rmin , nRed )
>365	ArgumentList	ptr -> rmin
>366	Argument	nRed
>367	Identifier	nRed
>368	Argument	ptr -> rmin
>369	PtrMemberAccess	ptr -> rmin
>370	Identifier	rmin
>371	Identifier	ptr
>372	Callee	MIN
>373	Identifier	MIN
>374	PtrMemberAccess	ptr -> rmin
>375	Identifier	rmin
>376	Identifier	ptr
>377	ExpressionStatement	 
>378	AssignmentExpr	nBlue = pabyBlueLine [ iPixel ] >> COLOR_SHIFT
>379	ShiftExpression	pabyBlueLine [ iPixel ] >> COLOR_SHIFT
>380	Identifier	COLOR_SHIFT
>381	ArrayIndexing	pabyBlueLine [ iPixel ]
>382	Identifier	iPixel
>383	Identifier	pabyBlueLine
>384	Identifier	nBlue
>385	ExpressionStatement	 
>386	AssignmentExpr	nGreen = pabyGreenLine [ iPixel ] >> COLOR_SHIFT
>387	ShiftExpression	pabyGreenLine [ iPixel ] >> COLOR_SHIFT
>388	Identifier	COLOR_SHIFT
>389	ArrayIndexing	pabyGreenLine [ iPixel ]
>390	Identifier	iPixel
>391	Identifier	pabyGreenLine
>392	Identifier	nGreen
>393	ExpressionStatement	 
>394	AssignmentExpr	nRed = pabyRedLine [ iPixel ] >> COLOR_SHIFT
>395	ShiftExpression	pabyRedLine [ iPixel ] >> COLOR_SHIFT
>396	Identifier	COLOR_SHIFT
>397	ArrayIndexing	pabyRedLine [ iPixel ]
>398	Identifier	iPixel
>399	Identifier	pabyRedLine
>400	Identifier	nRed
>401	IdentifierDeclStatement	 
>402	IdentifierDecl	nBlue
>403	Identifier	nBlue
>404	IdentifierDeclType	int
>405	IdentifierDecl	nGreen
>406	Identifier	nGreen
>407	IdentifierDeclType	int
>408	IdentifierDecl	nRed
>409	Identifier	nRed
>410	IdentifierDeclType	int
>411	IncDecOp	 
>412	IncDec	++
>413	Identifier	iPixel
>414	Condition	 
>415	RelationalExpression	iPixel < nXSize
>416	Identifier	nXSize
>417	Identifier	iPixel
>418	ForInit	 
>419	AssignmentExpr	iPixel = 0
>420	PrimaryExpression	0
>421	Identifier	iPixel
>422	ExpressionStatement	 
>423	CallExpression	GDALRasterIO ( hBlue , GF_Read , 0 , iLine , nXSize , 1 , pabyBlueLine , nXSize , 1 , GDT_Byte , 0 , 0 )
>424	ArgumentList	hBlue
>425	Argument	0
>426	PrimaryExpression	0
>427	Argument	0
>428	PrimaryExpression	0
>429	Argument	GDT_Byte
>430	Identifier	GDT_Byte
>431	Argument	1
>432	PrimaryExpression	1
>433	Argument	nXSize
>434	Identifier	nXSize
>435	Argument	pabyBlueLine
>436	Identifier	pabyBlueLine
>437	Argument	1
>438	PrimaryExpression	1
>439	Argument	nXSize
>440	Identifier	nXSize
>441	Argument	iLine
>442	Identifier	iLine
>443	Argument	0
>444	PrimaryExpression	0
>445	Argument	GF_Read
>446	Identifier	GF_Read
>447	Argument	hBlue
>448	Identifier	hBlue
>449	Callee	GDALRasterIO
>450	Identifier	GDALRasterIO
>451	ExpressionStatement	 
>452	CallExpression	GDALRasterIO ( hGreen , GF_Read , 0 , iLine , nXSize , 1 , pabyGreenLine , nXSize , 1 , GDT_Byte , 0 , 0 )
>453	ArgumentList	hGreen
>454	Argument	0
>455	PrimaryExpression	0
>456	Argument	0
>457	PrimaryExpression	0
>458	Argument	GDT_Byte
>459	Identifier	GDT_Byte
>460	Argument	1
>461	PrimaryExpression	1
>462	Argument	nXSize
>463	Identifier	nXSize
>464	Argument	pabyGreenLine
>465	Identifier	pabyGreenLine
>466	Argument	1
>467	PrimaryExpression	1
>468	Argument	nXSize
>469	Identifier	nXSize
>470	Argument	iLine
>471	Identifier	iLine
>472	Argument	0
>473	PrimaryExpression	0
>474	Argument	GF_Read
>475	Identifier	GF_Read
>476	Argument	hGreen
>477	Identifier	hGreen
>478	Callee	GDALRasterIO
>479	Identifier	GDALRasterIO
>480	ExpressionStatement	 
>481	CallExpression	GDALRasterIO ( hRed , GF_Read , 0 , iLine , nXSize , 1 , pabyRedLine , nXSize , 1 , GDT_Byte , 0 , 0 )
>482	ArgumentList	hRed
>483	Argument	0
>484	PrimaryExpression	0
>485	Argument	0
>486	PrimaryExpression	0
>487	Argument	GDT_Byte
>488	Identifier	GDT_Byte
>489	Argument	1
>490	PrimaryExpression	1
>491	Argument	nXSize
>492	Identifier	nXSize
>493	Argument	pabyRedLine
>494	Identifier	pabyRedLine
>495	Argument	1
>496	PrimaryExpression	1
>497	Argument	nXSize
>498	Identifier	nXSize
>499	Argument	iLine
>500	Identifier	iLine
>501	Argument	0
>502	PrimaryExpression	0
>503	Argument	GF_Read
>504	Identifier	GF_Read
>505	Argument	hRed
>506	Identifier	hRed
>507	Callee	GDALRasterIO
>508	Identifier	GDALRasterIO
>509	IfStatement	if ( ! pfnProgress ( iLine / ( double ) nYSize , \"Generating Histogram\" , pProgressArg ) )
>510	CompoundStatement	 
>511	GotoStatement	 
>512	Identifier	end_and_cleanup
>513	ExpressionStatement	 
>514	AssignmentExpr	err = CE_Failure
>515	Identifier	CE_Failure
>516	Identifier	err
>517	ExpressionStatement	 
>518	CallExpression	CPLError ( CE_Failure , CPLE_UserInterrupt , \"User Terminated\" )
>519	ArgumentList	CE_Failure
>520	Argument	\"User Terminated\"
>521	PrimaryExpression	\"User Terminated\"
>522	Argument	CPLE_UserInterrupt
>523	Identifier	CPLE_UserInterrupt
>524	Argument	CE_Failure
>525	Identifier	CE_Failure
>526	Callee	CPLError
>527	Identifier	CPLError
>528	Condition	 
>529	UnaryOp	! pfnProgress ( iLine / ( double ) nYSize , \"Generating Histogram\" , pProgressArg )
>530	CallExpression	pfnProgress ( iLine / ( double ) nYSize , \"Generating Histogram\" , pProgressArg )
>531	ArgumentList	iLine / ( double ) nYSize
>532	Argument	pProgressArg
>533	Identifier	pProgressArg
>534	Argument	\"Generating Histogram\"
>535	PrimaryExpression	\"Generating Histogram\"
>536	Argument	iLine / ( double ) nYSize
>537	MultiplicativeExpression	iLine / ( double ) nYSize
>538	CastExpression	( double ) nYSize
>539	Identifier	nYSize
>540	CastTarget	double
>541	Identifier	iLine
>542	Callee	pfnProgress
>543	Identifier	pfnProgress
>544	UnaryOperator	!
>545	IncDecOp	 
>546	IncDec	++
>547	Identifier	iLine
>548	Condition	 
>549	RelationalExpression	iLine < nYSize
>550	Identifier	nYSize
>551	Identifier	iLine
>552	ForInit	 
>553	AssignmentExpr	iLine = 0
>554	PrimaryExpression	0
>555	Identifier	iLine
>556	IfStatement	if ( pabyRedLine == NULL || pabyGreenLine == NULL || pabyBlueLine == NULL )
>557	CompoundStatement	 
>558	GotoStatement	 
>559	Identifier	end_and_cleanup
>560	ExpressionStatement	 
>561	AssignmentExpr	err = CE_Failure
>562	Identifier	CE_Failure
>563	Identifier	err
>564	ExpressionStatement	 
>565	CallExpression	CPLError ( CE_Failure , CPLE_OutOfMemory , \"VSIMalloc()
>566	ArgumentList	CE_Failure
>567	Argument	\"VSIMalloc()
>568	PrimaryExpression	\"VSIMalloc()
>569	Argument	CPLE_OutOfMemory
>570	Identifier	CPLE_OutOfMemory
>571	Argument	CE_Failure
>572	Identifier	CE_Failure
>573	Callee	CPLError
>574	Identifier	CPLError
>575	Condition	 
>576	OrExpression	pabyRedLine == NULL || pabyGreenLine == NULL || pabyBlueLine == NULL
>577	OrExpression	pabyGreenLine == NULL || pabyBlueLine == NULL
>578	EqualityExpression	pabyBlueLine == NULL
>579	Identifier	NULL
>580	Identifier	pabyBlueLine
>581	EqualityExpression	pabyGreenLine == NULL
>582	Identifier	NULL
>583	Identifier	pabyGreenLine
>584	EqualityExpression	pabyRedLine == NULL
>585	Identifier	NULL
>586	Identifier	pabyRedLine
>587	ExpressionStatement	 
>588	AssignmentExpr	pabyBlueLine = ( GByte * ) VSIMalloc ( nXSize )
>589	CastExpression	( GByte * ) VSIMalloc ( nXSize )
>590	CallExpression	VSIMalloc ( nXSize )
>591	ArgumentList	nXSize
>592	Argument	nXSize
>593	Identifier	nXSize
>594	Callee	VSIMalloc
>595	Identifier	VSIMalloc
>596	CastTarget	GByte *
>597	Identifier	pabyBlueLine
>598	ExpressionStatement	 
>599	AssignmentExpr	pabyGreenLine = ( GByte * ) VSIMalloc ( nXSize )
>600	CastExpression	( GByte * ) VSIMalloc ( nXSize )
>601	CallExpression	VSIMalloc ( nXSize )
>602	ArgumentList	nXSize
>603	Argument	nXSize
>604	Identifier	nXSize
>605	Callee	VSIMalloc
>606	Identifier	VSIMalloc
>607	CastTarget	GByte *
>608	Identifier	pabyGreenLine
>609	ExpressionStatement	 
>610	AssignmentExpr	pabyRedLine = ( GByte * ) VSIMalloc ( nXSize )
>611	CastExpression	( GByte * ) VSIMalloc ( nXSize )
>612	CallExpression	VSIMalloc ( nXSize )
>613	ArgumentList	nXSize
>614	Argument	nXSize
>615	Identifier	nXSize
>616	Callee	VSIMalloc
>617	Identifier	VSIMalloc
>618	CastTarget	GByte *
>619	Identifier	pabyRedLine
>620	ExpressionStatement	 
>621	AssignmentExpr	ptr -> total = nXSize * nYSize
>622	MultiplicativeExpression	nXSize * nYSize
>623	Identifier	nYSize
>624	Identifier	nXSize
>625	PtrMemberAccess	ptr -> total
>626	Identifier	total
>627	Identifier	ptr
>628	ExpressionStatement	 
>629	AssignmentExpr	ptr -> rmax = ptr -> gmax = ptr -> bmax = - 1
>630	AssignmentExpr	ptr -> gmax = ptr -> bmax = - 1
>631	AssignmentExpr	ptr -> bmax = - 1
>632	UnaryOp	- 1
>633	PrimaryExpression	1
>634	UnaryOperator	-
>635	PtrMemberAccess	ptr -> bmax
>636	Identifier	bmax
>637	Identifier	ptr
>638	PtrMemberAccess	ptr -> gmax
>639	Identifier	gmax
>640	Identifier	ptr
>641	PtrMemberAccess	ptr -> rmax
>642	Identifier	rmax
>643	Identifier	ptr
>644	ExpressionStatement	 
>645	AssignmentExpr	ptr -> rmin = ptr -> gmin = ptr -> bmin = 999
>646	AssignmentExpr	ptr -> gmin = ptr -> bmin = 999
>647	AssignmentExpr	ptr -> bmin = 999
>648	PrimaryExpression	999
>649	PtrMemberAccess	ptr -> bmin
>650	Identifier	bmin
>651	Identifier	ptr
>652	PtrMemberAccess	ptr -> gmin
>653	Identifier	gmin
>654	Identifier	ptr
>655	PtrMemberAccess	ptr -> rmin
>656	Identifier	rmin
>657	Identifier	ptr
>658	IfStatement	if ( ptr -> next )
>659	ExpressionStatement	 
>660	AssignmentExpr	ptr -> next -> prev = ptr
>661	Identifier	ptr
>662	PtrMemberAccess	ptr -> next -> prev
>663	Identifier	prev
>664	PtrMemberAccess	ptr -> next
>665	Identifier	next
>666	Identifier	ptr
>667	Condition	 
>668	PtrMemberAccess	ptr -> next
>669	Identifier	next
>670	Identifier	ptr
>671	ExpressionStatement	 
>672	AssignmentExpr	usedboxes = ptr
>673	Identifier	ptr
>674	Identifier	usedboxes
>675	ExpressionStatement	 
>676	AssignmentExpr	ptr -> next = usedboxes
>677	Identifier	usedboxes
>678	PtrMemberAccess	ptr -> next
>679	Identifier	next
>680	Identifier	ptr
>681	IfStatement	if ( freeboxes )
>682	ExpressionStatement	 
>683	AssignmentExpr	freeboxes -> prev = NULL
>684	Identifier	NULL
>685	PtrMemberAccess	freeboxes -> prev
>686	Identifier	prev
>687	Identifier	freeboxes
>688	Condition	 
>689	Identifier	freeboxes
>690	ExpressionStatement	 
>691	AssignmentExpr	freeboxes = ptr -> next
>692	PtrMemberAccess	ptr -> next
>693	Identifier	next
>694	Identifier	ptr
>695	Identifier	freeboxes
>696	ExpressionStatement	 
>697	AssignmentExpr	ptr = freeboxes
>698	Identifier	freeboxes
>699	Identifier	ptr
>700	IdentifierDeclStatement	 
>701	IdentifierDecl	iPixel
>702	Identifier	iPixel
>703	IdentifierDeclType	int
>704	IdentifierDecl	iLine
>705	Identifier	iLine
>706	IdentifierDeclType	int
>707	IdentifierDeclStatement	 
>708	IdentifierDecl	* pabyBlueLine
>709	Identifier	pabyBlueLine
>710	IdentifierDeclType	GByte *
>711	IdentifierDecl	* pabyGreenLine
>712	Identifier	pabyGreenLine
>713	IdentifierDeclType	GByte *
>714	IdentifierDecl	* pabyRedLine
>715	Identifier	pabyRedLine
>716	IdentifierDeclType	GByte *
>717	ExpressionStatement	 
>718	AssignmentExpr	freeboxes [ nColors - 1 ] . prev = & freeboxes [ nColors - 2 ]
>719	UnaryOp	& freeboxes [ nColors - 2 ]
>720	ArrayIndexing	freeboxes [ nColors - 2 ]
>721	AdditiveExpression	nColors - 2
>722	PrimaryExpression	2
>723	Identifier	nColors
>724	Identifier	freeboxes
>725	UnaryOperator	&
>726	MemberAccess	freeboxes [ nColors - 1 ] . prev
>727	Identifier	prev
>728	ArrayIndexing	freeboxes [ nColors - 1 ]
>729	AdditiveExpression	nColors - 1
>730	PrimaryExpression	1
>731	Identifier	nColors
>732	Identifier	freeboxes
>733	ExpressionStatement	 
>734	AssignmentExpr	freeboxes [ nColors - 1 ] . next = NULL
>735	Identifier	NULL
>736	MemberAccess	freeboxes [ nColors - 1 ] . next
>737	Identifier	next
>738	ArrayIndexing	freeboxes [ nColors - 1 ]
>739	AdditiveExpression	nColors - 1
>740	PrimaryExpression	1
>741	Identifier	nColors
>742	Identifier	freeboxes
>743	ForStatement	for ( i = 1 ; i < nColors - 1 ; ++ i )
>744	CompoundStatement	 
>745	ExpressionStatement	 
>746	AssignmentExpr	freeboxes [ i ] . prev = & freeboxes [ i - 1 ]
>747	UnaryOp	& freeboxes [ i - 1 ]
>748	ArrayIndexing	freeboxes [ i - 1 ]
>749	AdditiveExpression	i - 1
>750	PrimaryExpression	1
>751	Identifier	i
>752	Identifier	freeboxes
>753	UnaryOperator	&
>754	MemberAccess	freeboxes [ i ] . prev
>755	Identifier	prev
>756	ArrayIndexing	freeboxes [ i ]
>757	Identifier	i
>758	Identifier	freeboxes
>759	ExpressionStatement	 
>760	AssignmentExpr	freeboxes [ i ] . next = & freeboxes [ i + 1 ]
>761	UnaryOp	& freeboxes [ i + 1 ]
>762	ArrayIndexing	freeboxes [ i + 1 ]
>763	AdditiveExpression	i + 1
>764	PrimaryExpression	1
>765	Identifier	i
>766	Identifier	freeboxes
>767	UnaryOperator	&
>768	MemberAccess	freeboxes [ i ] . next
>769	Identifier	next
>770	ArrayIndexing	freeboxes [ i ]
>771	Identifier	i
>772	Identifier	freeboxes
>773	UnaryExpression	 
>774	Identifier	i
>775	IncDec	++
>776	Condition	 
>777	RelationalExpression	i < nColors - 1
>778	AdditiveExpression	nColors - 1
>779	PrimaryExpression	1
>780	Identifier	nColors
>781	Identifier	i
>782	ForInit	 
>783	AssignmentExpr	i = 1
>784	PrimaryExpression	1
>785	Identifier	i
>786	ExpressionStatement	 
>787	AssignmentExpr	freeboxes [ 0 ] . prev = NULL
>788	Identifier	NULL
>789	MemberAccess	freeboxes [ 0 ] . prev
>790	Identifier	prev
>791	ArrayIndexing	freeboxes [ 0 ]
>792	PrimaryExpression	0
>793	Identifier	freeboxes
>794	ExpressionStatement	 
>795	AssignmentExpr	freeboxes [ 0 ] . next = & freeboxes [ 1 ]
>796	UnaryOp	& freeboxes [ 1 ]
>797	ArrayIndexing	freeboxes [ 1 ]
>798	PrimaryExpression	1
>799	Identifier	freeboxes
>800	UnaryOperator	&
>801	MemberAccess	freeboxes [ 0 ] . next
>802	Identifier	next
>803	ArrayIndexing	freeboxes [ 0 ]
>804	PrimaryExpression	0
>805	Identifier	freeboxes
>806	ExpressionStatement	 
>807	AssignmentExpr	box_list = freeboxes = ( Colorbox * ) CPLMalloc ( nColors * sizeof ( Colorbox ) )
>808	AssignmentExpr	freeboxes = ( Colorbox * ) CPLMalloc ( nColors * sizeof ( Colorbox ) )
>809	CastExpression	( Colorbox * ) CPLMalloc ( nColors * sizeof ( Colorbox ) )
>810	CallExpression	CPLMalloc ( nColors * sizeof ( Colorbox ) )
>811	ArgumentList	nColors * sizeof ( Colorbox )
>812	Argument	nColors * sizeof ( Colorbox )
>813	MultiplicativeExpression	nColors * sizeof ( Colorbox )
>814	SizeofExpr	sizeof ( Colorbox )
>815	SizeofOperand	Colorbox
>816	Sizeof	sizeof
>817	Identifier	nColors
>818	Callee	CPLMalloc
>819	Identifier	CPLMalloc
>820	CastTarget	Colorbox *
>821	Identifier	freeboxes
>822	Identifier	box_list
>823	ExpressionStatement	 
>824	AssignmentExpr	usedboxes = NULL
>825	Identifier	NULL
>826	Identifier	usedboxes
>827	ExpressionStatement	 
>828	CallExpression	CPLCalloc ( GMC_B_LEN * GMC_B_LEN * GMC_B_LEN , sizeof ( int ) )
>829	ArgumentList	GMC_B_LEN * GMC_B_LEN * GMC_B_LEN
>830	Argument	sizeof ( int )
>831	SizeofExpr	sizeof ( int )
>832	SizeofOperand	int
>833	Sizeof	sizeof
>834	Argument	GMC_B_LEN * GMC_B_LEN * GMC_B_LEN
>835	MultiplicativeExpression	GMC_B_LEN * GMC_B_LEN * GMC_B_LEN
>836	MultiplicativeExpression	GMC_B_LEN * GMC_B_LEN
>837	Identifier	GMC_B_LEN
>838	Identifier	GMC_B_LEN
>839	Identifier	GMC_B_LEN
>840	Callee	CPLCalloc
>841	Identifier	CPLCalloc
>842	Statement	 
>843	Statement	 
>844	Statement	 
>845	Statement	 
>846	Statement	 
>847	Statement	 
>848	Statement	 
>849	Statement	 
>850	Statement	 
>851	Statement	 
>852	Statement	 
>853	Statement	 
>854	Statement	 
>855	Statement	 
>856	IdentifierDeclStatement	 
>857	IdentifierDecl	* usedboxes
>858	Identifier	usedboxes
>859	IdentifierDeclType	Colorbox *
>860	IdentifierDeclStatement	 
>861	IdentifierDecl	* freeboxes
>862	Identifier	freeboxes
>863	IdentifierDeclType	Colorbox *
>864	ExpressionStatement	 
>865	ArrayIndexing	int ( * histogram ) [ GMC_B_LEN ] [ GMC_B_LEN ]
>866	Identifier	GMC_B_LEN
>867	ArrayIndexing	int ( * histogram ) [ GMC_B_LEN ]
>868	Identifier	GMC_B_LEN
>869	CallExpression	int ( * histogram )
>870	ArgumentList	* histogram
>871	Argument	* histogram
>872	UnaryOp	* histogram
>873	Identifier	histogram
>874	UnaryOperator	*
>875	Callee	int
>876	Identifier	int
>877	IdentifierDeclStatement	 
>878	IdentifierDecl	* ptr
>879	Identifier	ptr
>880	IdentifierDeclType	Colorbox *
>881	IdentifierDecl	* box_list
>882	Identifier	box_list
>883	IdentifierDeclType	Colorbox *
>884	IdentifierDeclStatement	 
>885	IdentifierDecl	i
>886	Identifier	i
>887	IdentifierDeclType	int
>888	IfStatement	if ( pfnProgress == NULL )
>889	ExpressionStatement	 
>890	AssignmentExpr	pfnProgress = GDALDummyProgress
>891	Identifier	GDALDummyProgress
>892	Identifier	pfnProgress
>893	Condition	 
>894	EqualityExpression	pfnProgress == NULL
>895	Identifier	NULL
>896	Identifier	pfnProgress
>897	IfStatement	if ( nColors > 256 )
>898	CompoundStatement	 
>899	ReturnStatement	 
>900	Identifier	CE_Failure
>901	ExpressionStatement	 
>902	CallExpression	CPLError ( CE_Failure , CPLE_IllegalArg , \"GDALComputeMedianCutPCT() 
>903	ArgumentList	CE_Failure
>904	Argument	\"GDALComputeMedianCutPCT() 
>905	PrimaryExpression	\"GDALComputeMedianCutPCT() 
>906	Argument	CPLE_IllegalArg
>907	Identifier	CPLE_IllegalArg
>908	Argument	CE_Failure
>909	Identifier	CE_Failure
>910	Callee	CPLError
>911	Identifier	CPLError
>912	Condition	 
>913	RelationalExpression	nColors > 256
>914	PrimaryExpression	256
>915	Identifier	nColors
>916	IfStatement	if ( nColors <= 0 )
>917	CompoundStatement	 
>918	ReturnStatement	 
>919	Identifier	CE_Failure
>920	ExpressionStatement	 
>921	CallExpression	CPLError ( CE_Failure , CPLE_IllegalArg , \"GDALComputeMedianCutPCT() 
>922	ArgumentList	CE_Failure
>923	Argument	\"GDALComputeMedianCutPCT() 
>924	PrimaryExpression	\"GDALComputeMedianCutPCT() 
>925	Argument	CPLE_IllegalArg
>926	Identifier	CPLE_IllegalArg
>927	Argument	CE_Failure
>928	Identifier	CE_Failure
>929	Callee	CPLError
>930	Identifier	CPLError
>931	Condition	 
>932	RelationalExpression	nColors <= 0
>933	PrimaryExpression	0
>934	Identifier	nColors
>935	IfStatement	if ( pfnIncludePixel != NULL )
>936	CompoundStatement	 
>937	ReturnStatement	 
>938	Identifier	CE_Failure
>939	ExpressionStatement	 
>940	Statement	 
>941	Statement	 
>942	Statement	 
>943	Statement	 
>944	Statement	 
>945	Statement	 
>946	Statement	 
>947	Statement	 
>948	Statement	 
>949	Condition	 
>950	EqualityExpression	pfnIncludePixel != NULL
>951	Identifier	NULL
>952	Identifier	pfnIncludePixel
>953	IfStatement	if ( GDALGetRasterBandXSize ( hGreen ) != nXSize || GDALGetRasterBandYSize ( hGreen ) != nYSize || GDALGetRasterBandXSize ( \
>954	CompoundStatement	 
>955	ReturnStatement	 
>956	Identifier	CE_Failure
>957	ExpressionStatement	 
>958	CallExpression	CPLError ( CE_Failure , CPLE_IllegalArg , \"Green or blue band doesn't match size of red band.\n\" )
>959	ArgumentList	CE_Failure
>960	Argument	\"Green or blue band doesn't match size of red band.\n\"
>961	PrimaryExpression	\"Green or blue band doesn't match size of red band.\n\"
>962	Argument	CPLE_IllegalArg
>963	Identifier	CPLE_IllegalArg
>964	Argument	CE_Failure
>965	Identifier	CE_Failure
>966	Callee	CPLError
>967	Identifier	CPLError
>968	Condition	 
>969	OrExpression	GDALGetRasterBandXSize ( hGreen ) != nXSize || GDALGetRasterBandYSize ( hGreen ) != nYSize || GDALGetRasterBandXSize ( \
>970	OrExpression	GDALGetRasterBandYSize ( hGreen ) != nYSize || GDALGetRasterBandXSize ( hBlue ) != nXSize || GDALGetRasterBandYSize ( \
>971	OrExpression	GDALGetRasterBandXSize ( hBlue ) != nXSize || GDALGetRasterBandYSize ( hBlue ) != nYSize
>972	EqualityExpression	GDALGetRasterBandYSize ( hBlue ) != nYSize
>973	Identifier	nYSize
>974	CallExpression	GDALGetRasterBandYSize ( hBlue )
>975	ArgumentList	hBlue
>976	Argument	hBlue
>977	Identifier	hBlue
>978	Callee	GDALGetRasterBandYSize
>979	Identifier	GDALGetRasterBandYSize
>980	EqualityExpression	GDALGetRasterBandXSize ( hBlue ) != nXSize
>981	Identifier	nXSize
>982	CallExpression	GDALGetRasterBandXSize ( hBlue )
>983	ArgumentList	hBlue
>984	Argument	hBlue
>985	Identifier	hBlue
>986	Callee	GDALGetRasterBandXSize
>987	Identifier	GDALGetRasterBandXSize
>988	EqualityExpression	GDALGetRasterBandYSize ( hGreen ) != nYSize
>989	Identifier	nYSize
>990	CallExpression	GDALGetRasterBandYSize ( hGreen )
>991	ArgumentList	hGreen
>992	Argument	hGreen
>993	Identifier	hGreen
>994	Callee	GDALGetRasterBandYSize
>995	Identifier	GDALGetRasterBandYSize
>996	EqualityExpression	GDALGetRasterBandXSize ( hGreen ) != nXSize
>997	Identifier	nXSize
>998	CallExpression	GDALGetRasterBandXSize ( hGreen )
>999	ArgumentList	hGreen
>1000	Argument	hGreen
>1001	Identifier	hGreen
>1002	Callee	GDALGetRasterBandXSize
>1003	Identifier	GDALGetRasterBandXSize
>1004	ExpressionStatement	 
>1005	AssignmentExpr	nYSize = GDALGetRasterBandYSize ( hRed )
>1006	CallExpression	GDALGetRasterBandYSize ( hRed )
>1007	ArgumentList	hRed
>1008	Argument	hRed
>1009	Identifier	hRed
>1010	Callee	GDALGetRasterBandYSize
>1011	Identifier	GDALGetRasterBandYSize
>1012	Identifier	nYSize
>1013	ExpressionStatement	 
>1014	AssignmentExpr	nXSize = GDALGetRasterBandXSize ( hRed )
>1015	CallExpression	GDALGetRasterBandXSize ( hRed )
>1016	ArgumentList	hRed
>1017	Argument	hRed
>1018	Identifier	hRed
>1019	Callee	GDALGetRasterBandXSize
>1020	Identifier	GDALGetRasterBandXSize
>1021	Identifier	nXSize
>1022	IdentifierDeclStatement	 
>1023	IdentifierDecl	err = CE_None
>1024	AssignmentExpr	err = CE_None
>1025	Identifier	CE_None
>1026	Identifier	CE_None
>1027	Identifier	err
>1028	IdentifierDeclType	CPLErr
>1029	IdentifierDeclStatement	 
>1030	IdentifierDecl	nYSize
>1031	Identifier	nYSize
>1032	IdentifierDeclType	int
>1033	IdentifierDecl	nXSize
>1034	Identifier	nXSize
>1035	IdentifierDeclType	int
>1036	ExpressionStatement	 
>1037	CallExpression	VALIDATE_POINTER1 ( hBlue , \"GDALComputeMedianCutPCT\" , CE_Failure )
>1038	ArgumentList	hBlue
>1039	Argument	CE_Failure
>1040	Identifier	CE_Failure
>1041	Argument	\"GDALComputeMedianCutPCT\"
>1042	PrimaryExpression	\"GDALComputeMedianCutPCT\"
>1043	Argument	hBlue
>1044	Identifier	hBlue
>1045	Callee	VALIDATE_POINTER1
>1046	Identifier	VALIDATE_POINTER1
>1047	ExpressionStatement	 
>1048	CallExpression	VALIDATE_POINTER1 ( hGreen , \"GDALComputeMedianCutPCT\" , CE_Failure )
>1049	ArgumentList	hGreen
>1050	Argument	CE_Failure
>1051	Identifier	CE_Failure
>1052	Argument	\"GDALComputeMedianCutPCT\"
>1053	PrimaryExpression	\"GDALComputeMedianCutPCT\"
>1054	Argument	hGreen
>1055	Identifier	hGreen
>1056	Callee	VALIDATE_POINTER1
>1057	Identifier	VALIDATE_POINTER1
>1058	ExpressionStatement	 
>1059	CallExpression	VALIDATE_POINTER1 ( hRed , \"GDALComputeMedianCutPCT\" , CE_Failure )
>1060	ArgumentList	hRed
>1061	Argument	CE_Failure
>1062	Identifier	CE_Failure
>1063	Argument	\"GDALComputeMedianCutPCT\"
>1064	PrimaryExpression	\"GDALComputeMedianCutPCT\"
>1065	Argument	hRed
>1066	Identifier	hRed
>1067	Callee	VALIDATE_POINTER1
>1068	Identifier	VALIDATE_POINTER1
>1164	FunctionDef	largest_box (Colorbox * usedboxes)
>1165	ParameterList	Colorbox * usedboxes
>1166	Parameter	 
>1167	Identifier	usedboxes
>1168	ParameterType	Colorbox *
>1169	ReturnType	static Colorbox *
>1170	CompoundStatement	 
>1171	ReturnStatement	 
>1172	Identifier	b
>1173	ForStatement	for ( p = usedboxes ; p != NULL ; p = p -> next )
>1174	IfStatement	if ( ( p -> rmax > p -> rmin || p -> gmax > p -> gmin || p -> bmax > p -> bmin ) && p -> total > size )
>1175	ExpressionStatement	 
>1176	AssignmentExpr	size = ( b = p ) -> total
>1177	PtrMemberAccess	( b = p ) -> total
>1178	Identifier	total
>1179	AssignmentExpr	b = p
>1180	Identifier	p
>1181	Identifier	b
>1182	Identifier	size
>1183	Condition	 
>1184	AndExpression	( p -> rmax > p -> rmin || p -> gmax > p -> gmin || p -> bmax > p -> bmin ) && p -> total > size
>1185	RelationalExpression	p -> total > size
>1186	Identifier	size
>1187	PtrMemberAccess	p -> total
>1188	Identifier	total
>1189	Identifier	p
>1190	OrExpression	p -> rmax > p -> rmin || p -> gmax > p -> gmin || p -> bmax > p -> bmin
>1191	OrExpression	p -> gmax > p -> gmin || p -> bmax > p -> bmin
>1192	RelationalExpression	p -> bmax > p -> bmin
>1193	PtrMemberAccess	p -> bmin
>1194	Identifier	bmin
>1195	Identifier	p
>1196	PtrMemberAccess	p -> bmax
>1197	Identifier	bmax
>1198	Identifier	p
>1199	RelationalExpression	p -> gmax > p -> gmin
>1200	PtrMemberAccess	p -> gmin
>1201	Identifier	gmin
>1202	Identifier	p
>1203	PtrMemberAccess	p -> gmax
>1204	Identifier	gmax
>1205	Identifier	p
>1206	RelationalExpression	p -> rmax > p -> rmin
>1207	PtrMemberAccess	p -> rmin
>1208	Identifier	rmin
>1209	Identifier	p
>1210	PtrMemberAccess	p -> rmax
>1211	Identifier	rmax
>1212	Identifier	p
>1213	AssignmentExpr	 
>1214	PtrMemberAccess	p -> next
>1215	Identifier	next
>1216	Identifier	p
>1217	Identifier	p
>1218	Condition	 
>1219	EqualityExpression	p != NULL
>1220	Identifier	NULL
>1221	Identifier	p
>1222	ForInit	 
>1223	AssignmentExpr	p = usedboxes
>1224	Identifier	usedboxes
>1225	Identifier	p
>1226	ExpressionStatement	 
>1227	AssignmentExpr	size = - 1
>1228	UnaryOp	- 1
>1229	PrimaryExpression	1
>1230	UnaryOperator	-
>1231	Identifier	size
>1232	ExpressionStatement	 
>1233	AssignmentExpr	b = NULL
>1234	Identifier	NULL
>1235	Identifier	b
>1236	IdentifierDeclStatement	 
>1237	IdentifierDecl	size
>1238	Identifier	size
>1239	IdentifierDeclType	int
>1240	IdentifierDeclStatement	 
>1241	IdentifierDecl	* b
>1242	Identifier	b
>1243	IdentifierDeclType	Colorbox *
>1244	IdentifierDecl	* p
>1245	Identifier	p
>1246	IdentifierDeclType	Colorbox *
<26=53,52,27
<27=49,46,43,40,37,34,31,28
<28=30,29
<31=33,32
<34=36,35
<37=39,38
<40=42,41
<43=45,44
<46=48,47
<49=51,50
<53=1058,1047,1036,1029,1022,1013,1004,953,935,916,897,888,884,877,864,860,54,56,63,69,76,83,90,97,99,199,241,273,556,587,598,609,620,628,644,658,671,675,681,690,696,700,707,717,733,743,786,794,806,823,827,842,843,844,845,846,847,848,849,850,851,852,853,854,855,856
<54=55
<56=57
<57=61,58
<58=59
<59=60
<61=62
<63=64
<64=68,65
<65=67,66
<69=70
<70=74,71
<71=72
<72=73
<74=75
<76=77
<77=81,78
<78=79
<79=80
<81=82
<83=84
<84=88,85
<85=86
<86=87
<88=89
<90=91
<91=95,92
<92=93
<93=94
<95=96
<97=98
<99=191,187,178,100
<100=174,156,138,120,114,101
<101=102
<102=112,103
<103=110,108,104
<104=105
<105=107,106
<108=109
<110=111
<112=113
<114=115
<115=117,116
<117=119,118
<120=121
<121=135,122
<122=134,123
<123=125,124
<125=127,126
<127=131,128
<128=130,129
<131=133,132
<135=137,136
<138=139
<139=153,140
<140=152,141
<141=143,142
<143=145,144
<145=149,146
<146=148,147
<149=151,150
<153=155,154
<156=157
<157=171,158
<158=170,159
<159=161,160
<161=163,162
<163=167,164
<164=166,165
<167=169,168
<171=173,172
<174=175
<175=177,176
<178=184,179
<179=183,180
<180=182,181
<184=186,185
<187=188
<188=190,189
<191=192
<192=196,193
<193=195,194
<196=198,197
<199=237,200
<200=228,201
<201=224,207,202
<202=203
<203=204
<204=206,205
<207=208
<208=222,209
<209=220,218,214,210
<210=211
<211=213,212
<214=215
<215=217,216
<218=219
<220=221
<222=223
<224=225
<225=227,226
<228=229
<229=236,230
<230=234,231
<231=232
<232=233
<234=235
<237=238
<238=240,239
<241=260,242
<242=249,245,243
<243=244
<245=246
<246=248,247
<249=250
<250=258,251
<251=256,254,252
<252=253
<254=255
<256=257
<258=259
<260=261
<261=272,262
<262=270,263
<263=268,266,264
<264=265
<266=267
<268=269
<270=271
<273=552,548,545,274
<274=509,480,451,422,275
<275=418,414,411,276
<276=401,393,385,377,362,347,332,317,302,287,277
<277=278
<278=280,279
<280=282,281
<282=284,283
<284=286,285
<287=288
<288=299,289
<289=297,290
<290=293,291
<291=292
<293=294
<294=296,295
<297=298
<299=301,300
<302=303
<303=314,304
<304=312,305
<305=308,306
<306=307
<308=309
<309=311,310
<312=313
<314=316,315
<317=318
<318=329,319
<319=327,320
<320=323,321
<321=322
<323=324
<324=326,325
<327=328
<329=331,330
<332=333
<333=344,334
<334=342,335
<335=338,336
<336=337
<338=339
<339=341,340
<342=343
<344=346,345
<347=348
<348=359,349
<349=357,350
<350=353,351
<351=352
<353=354
<354=356,355
<357=358
<359=361,360
<362=363
<363=374,364
<364=372,365
<365=368,366
<366=367
<368=369
<369=371,370
<372=373
<374=376,375
<377=378
<378=384,379
<379=381,380
<381=383,382
<385=386
<386=392,387
<387=389,388
<389=391,390
<393=394
<394=400,395
<395=397,396
<397=399,398
<401=408,405,402
<402=404,403
<405=407,406
<408=410,409
<411=413,412
<414=415
<415=417,416
<418=419
<419=421,420
<422=423
<423=449,424
<424=447,445,443,441,439,437,435,433,431,429,427,425
<425=426
<427=428
<429=430
<431=432
<433=434
<435=436
<437=438
<439=440
<441=442
<443=444
<445=446
<447=448
<449=450
<451=452
<452=478,453
<453=476,474,472,470,468,466,464,462,460,458,456,454
<454=455
<456=457
<458=459
<460=461
<462=463
<464=465
<466=467
<468=469
<470=471
<472=473
<474=475
<476=477
<478=479
<480=481
<481=507,482
<482=505,503,501,499,497,495,493,491,489,487,485,483
<483=484
<485=486
<487=488
<489=490
<491=492
<493=494
<495=496
<497=498
<499=500
<501=502
<503=504
<505=506
<507=508
<509=528,510
<510=517,513,511
<511=512
<513=514
<514=516,515
<517=518
<518=526,519
<519=524,522,520
<520=521
<522=523
<524=525
<526=527
<528=529
<529=544,530
<530=542,531
<531=536,534,532
<532=533
<534=535
<536=537
<537=541,538
<538=540,539
<542=543
<545=547,546
<548=549
<549=551,550
<552=553
<553=555,554
<556=575,557
<557=564,560,558
<558=559
<560=561
<561=563,562
<564=565
<565=573,566
<566=571,569,567
<567=568
<569=570
<571=572
<573=574
<575=576
<576=584,577
<577=581,578
<578=580,579
<581=583,582
<584=586,585
<587=588
<588=597,589
<589=596,590
<590=594,591
<591=592
<592=593
<594=595
<598=599
<599=608,600
<600=607,601
<601=605,602
<602=603
<603=604
<605=606
<609=610
<610=619,611
<611=618,612
<612=616,613
<613=614
<614=615
<616=617
<620=621
<621=625,622
<622=624,623
<625=627,626
<628=629
<629=641,630
<630=638,631
<631=635,632
<632=634,633
<635=637,636
<638=640,639
<641=643,642
<644=645
<645=655,646
<646=652,647
<647=649,648
<649=651,650
<652=654,653
<655=657,656
<658=667,659
<659=660
<660=662,661
<662=664,663
<664=666,665
<667=668
<668=670,669
<671=672
<672=674,673
<675=676
<676=678,677
<678=680,679
<681=688,682
<682=683
<683=685,684
<685=687,686
<688=689
<690=691
<691=695,692
<692=694,693
<696=697
<697=699,698
<700=704,701
<701=703,702
<704=706,705
<707=714,711,708
<708=710,709
<711=713,712
<714=716,715
<717=718
<718=726,719
<719=725,720
<720=724,721
<721=723,722
<726=728,727
<728=732,729
<729=731,730
<733=734
<734=736,735
<736=738,737
<738=742,739
<739=741,740
<743=782,776,773,744
<744=759,745
<745=746
<746=754,747
<747=753,748
<748=752,749
<749=751,750
<754=756,755
<756=758,757
<759=760
<760=768,761
<761=767,762
<762=766,763
<763=765,764
<768=770,769
<770=772,771
<773=775,774
<776=777
<777=781,778
<778=780,779
<782=783
<783=785,784
<786=787
<787=789,788
<789=791,790
<791=793,792
<794=795
<795=801,796
<796=800,797
<797=799,798
<801=803,802
<803=805,804
<806=807
<807=822,808
<808=821,809
<809=820,810
<810=818,811
<811=812
<812=813
<813=817,814
<814=816,815
<818=819
<823=824
<824=826,825
<827=828
<828=840,829
<829=834,830
<830=831
<831=833,832
<834=835
<835=839,836
<836=838,837
<840=841
<856=857
<857=859,858
<860=861
<861=863,862
<864=865
<865=867,866
<867=869,868
<869=875,870
<870=871
<871=872
<872=874,873
<875=876
<877=881,878
<878=880,879
<881=883,882
<884=885
<885=887,886
<888=893,889
<889=890
<890=892,891
<893=894
<894=896,895
<897=912,898
<898=901,899
<899=900
<901=902
<902=910,903
<903=908,906,904
<904=905
<906=907
<908=909
<910=911
<912=913
<913=915,914
<916=931,917
<917=920,918
<918=919
<920=921
<921=929,922
<922=927,925,923
<923=924
<925=926
<927=928
<929=930
<931=932
<932=934,933
<935=949,936
<936=948,947,946,945,944,943,942,941,940,939,937
<937=938
<949=950
<950=952,951
<953=968,954
<954=957,955
<955=956
<957=958
<958=966,959
<959=964,962,960
<960=961
<962=963
<964=965
<966=967
<968=969
<969=996,970
<970=988,971
<971=980,972
<972=974,973
<974=978,975
<975=976
<976=977
<978=979
<980=982,981
<982=986,983
<983=984
<984=985
<986=987
<988=990,989
<990=994,991
<991=992
<992=993
<994=995
<996=998,997
<998=1002,999
<999=1000
<1000=1001
<1002=1003
<1004=1005
<1005=1012,1006
<1006=1010,1007
<1007=1008
<1008=1009
<1010=1011
<1013=1014
<1014=1021,1015
<1015=1019,1016
<1016=1017
<1017=1018
<1019=1020
<1022=1023
<1023=1028,1027,1024
<1024=1026,1025
<1029=1033,1030
<1030=1032,1031
<1033=1035,1034
<1036=1037
<1037=1045,1038
<1038=1043,1041,1039
<1039=1040
<1041=1042
<1043=1044
<1045=1046
<1047=1048
<1048=1056,1049
<1049=1054,1052,1050
<1050=1051
<1052=1053
<1054=1055
<1056=1057
<1058=1059
<1059=1067,1060
<1060=1065,1063,1061
<1061=1062
<1063=1064
<1065=1066
<1067=1068
<1164=1170,1169,1165
<1165=1166
<1166=1168,1167
<1170=1240,1236,1232,1226,1173,1171
<1171=1172
<1173=1222,1218,1213,1174
<1174=1183,1175
<1175=1176
<1176=1182,1177
<1177=1179,1178
<1179=1181,1180
<1183=1184
<1184=1190,1185
<1185=1187,1186
<1187=1189,1188
<1190=1206,1191
<1191=1199,1192
<1192=1196,1193
<1193=1195,1194
<1196=1198,1197
<1199=1203,1200
<1200=1202,1201
<1203=1205,1204
<1206=1210,1207
<1207=1209,1208
<1210=1212,1211
<1213=1217,1214
<1214=1216,1215
<1218=1219
<1219=1221,1220
<1222=1223
<1223=1225,1224
<1226=1227
<1227=1231,1228
<1228=1230,1229
<1232=1233
<1233=1235,1234
<1236=1237
<1237=1239,1238
<1240=1244,1241
<1241=1243,1242
<1244=1246,1245
