>3	FunctionDef	context_base 
>4	ParameterList	bool is_dummy
>5	Parameter	 
>6	Identifier	is_dummy
>7	ParameterType	bool
>8	CompoundStatement	 
>9	ExpressionStatement	 
>10	AssignmentExpr	m_stepInstanceCount = 0
>11	PrimaryExpression	0
>12	Identifier	m_stepInstanceCount
>13	IfStatement	if ( ! is_dummy )
>14	CompoundStatement	 
>15	ExpressionStatement	 
>16	CallExpression	subscribe ( m_scheduler )
>17	ArgumentList	m_scheduler
>18	Argument	m_scheduler
>19	Identifier	m_scheduler
>20	Callee	subscribe
>21	Identifier	subscribe
>22	Condition	 
>23	UnaryOp	! is_dummy
>24	Identifier	is_dummy
>25	UnaryOperator	!
>26	ExpressionStatement	 
>27	AssignmentExpr	m_scheduler = new_scheduler ( )
>28	CallExpression	new_scheduler ( )
>29	ArgumentList	 
>30	Callee	new_scheduler
>31	Identifier	new_scheduler
>32	Identifier	m_scheduler
>33	IfStatement	if ( getenv ( \"CNC_NUM_THREADS\" ) )
>34	ElseStatement	else
>35	CompoundStatement	 
>36	ExpressionStatement	 
>37	AssignmentExpr	m_numThreads = tbb 
>38	CallExpression	tbb 
>39	ArgumentList	 
>40	Callee	tbb 
>41	Identifier	tbb 
>42	Identifier	m_numThreads
>43	CompoundStatement	 
>44	IfStatement	if ( m_numThreads <= 0 )
>45	ExpressionStatement	 
>46	AssignmentExpr	m_numThreads = tbb 
>47	CallExpression	tbb 
>48	ArgumentList	 
>49	Callee	tbb 
>50	Identifier	tbb 
>51	Identifier	m_numThreads
>52	Condition	 
>53	RelationalExpression	m_numThreads <= 0
>54	PrimaryExpression	0
>55	Identifier	m_numThreads
>56	ExpressionStatement	 
>57	AssignmentExpr	m_numThreads = atoi ( getenv ( \"CNC_NUM_THREADS\" ) )
>58	CallExpression	atoi ( getenv ( \"CNC_NUM_THREADS\" ) )
>59	ArgumentList	getenv ( \"CNC_NUM_THREADS\" )
>60	Argument	getenv ( \"CNC_NUM_THREADS\" )
>61	CallExpression	getenv ( \"CNC_NUM_THREADS\" )
>62	ArgumentList	\"CNC_NUM_THREADS\"
>63	Argument	\"CNC_NUM_THREADS\"
>64	PrimaryExpression	\"CNC_NUM_THREADS\"
>65	Callee	getenv
>66	Identifier	getenv
>67	Callee	atoi
>68	Identifier	atoi
>69	Identifier	m_numThreads
>70	Condition	 
>71	CallExpression	getenv ( \"CNC_NUM_THREADS\" )
>72	ArgumentList	\"CNC_NUM_THREADS\"
>73	Argument	\"CNC_NUM_THREADS\"
>74	PrimaryExpression	\"CNC_NUM_THREADS\"
>75	Callee	getenv
>76	Identifier	getenv
>88	FunctionDef	context_base 
>89	ParameterList	 
>90	CompoundStatement	 
>91	IfStatement	if ( m_timer )
>92	CompoundStatement	 
>93	ExpressionStatement	 
>94	Identifier	m_timer
>95	Statement	 
>96	Condition	 
>97	Identifier	m_timer
>98	ExpressionStatement	 
>99	CallExpression	delete_scheduler ( m_scheduler )
>100	ArgumentList	m_scheduler
>101	Argument	m_scheduler
>102	Identifier	m_scheduler
>103	Callee	delete_scheduler
>104	Identifier	delete_scheduler
>110	FunctionDef	context_base 
>111	ParameterList	 
>112	ReturnType	scheduler_i *
>113	CompoundStatement	 
>114	ReturnStatement	 
>115	Identifier	_ts
>116	IfStatement	if ( _first )
>117	CompoundStatement	 
>118	ExpressionStatement	 
>119	AssignmentExpr	_first = false
>120	Identifier	false
>121	Identifier	_first
>122	Condition	 
>123	Identifier	_first
>124	IfStatement	if ( _ts == NULL )
>125	CompoundStatement	 
>126	ExpressionStatement	 
>127	AssignmentExpr	_ts = new simplest_scheduler ( * this , m_numThreads , _htstride )
>128	Expression	* this , m_numThreads , _htstride
>129	Expression	m_numThreads , _htstride
>130	Identifier	_htstride
>131	Identifier	m_numThreads
>132	UnaryOp	* this
>133	Identifier	this
>134	UnaryOperator	*
>135	Identifier	_ts
>136	IfStatement	if ( _first )
>137	CompoundStatement	 
>138	IfStatement	if ( _sched )
>139	CompoundStatement	 
>140	IfStatement	if ( strcmp ( _sched , \"TBB_TASK\" ) )
>141	ElseStatement	else
>142	ExpressionStatement	 
>143	ShiftExpression	oss << \"Using TBB_TASK scheduler\" << _prior << _pin
>144	ShiftExpression	\"Using TBB_TASK scheduler\" << _prior << _pin
>145	ShiftExpression	_prior << _pin
>146	Identifier	_pin
>147	Identifier	_prior
>148	PrimaryExpression	\"Using TBB_TASK scheduler\"
>149	Identifier	oss
>150	ExpressionStatement	 
>151	ShiftExpression	oss << \"Unsupported scheduler \\"\" << _sched << \"\\". Using default (TBB_TASK) scheduler\" << _prior << _\
>152	ShiftExpression	\"Unsupported scheduler \\"\" << _sched << \"\\". Using default (TBB_TASK) scheduler\" << _prior << _pin
>153	ShiftExpression	_sched << \"\\". Using default (TBB_TASK) scheduler\" << _prior << _pin
>154	ShiftExpression	\"\\". Using default (TBB_TASK) scheduler\" << _prior << _pin
>155	ShiftExpression	_prior << _pin
>156	Identifier	_pin
>157	Identifier	_prior
>158	PrimaryExpression	\"\\". Using default (TBB_TASK) scheduler\"
>159	Identifier	_sched
>160	PrimaryExpression	\"Unsupported scheduler \\"\"
>161	Identifier	oss
>162	Condition	 
>163	CallExpression	strcmp ( _sched , \"TBB_TASK\" )
>164	ArgumentList	_sched
>165	Argument	\"TBB_TASK\"
>166	PrimaryExpression	\"TBB_TASK\"
>167	Argument	_sched
>168	Identifier	_sched
>169	Callee	strcmp
>170	Identifier	strcmp
>171	IdentifierDeclStatement	 
>172	IdentifierDecl	oss
>173	Identifier	oss
>174	IdentifierDeclType	Speaker
>175	Condition	 
>176	Identifier	_sched
>177	ExpressionStatement	 
>178	AssignmentExpr	_prior = _first && _use_prior ? \" [PRIORITY UNSUPPORTED]\" 
>179	ConditionalExpression	_first && _use_prior ? \" [PRIORITY UNSUPPORTED]\" 
>180	PrimaryExpression	\"\"
>181	PrimaryExpression	\" [PRIORITY UNSUPPORTED]\"
>182	Condition	_first && _use_prior
>183	AndExpression	_first && _use_prior
>184	Identifier	_use_prior
>185	Identifier	_first
>186	Identifier	_prior
>187	Condition	 
>188	Identifier	_first
>189	Condition	 
>190	EqualityExpression	_ts == NULL
>191	Identifier	NULL
>192	Identifier	_ts
>193	IfStatement	if ( _sched )
>194	CompoundStatement	 
>195	IfStatement	if ( ! strcmp ( _sched , \"FIFO_STEAL\" ) )
>196	ElseStatement	else
>197	IfStatement	if ( ! strcmp ( _sched , \"FIFO_SINGLE\" ) )
>198	ElseStatement	else
>199	IfStatement	if ( ! strcmp ( _sched , \"FIFO_AFFINITY\" ) )
>200	CompoundStatement	 
>201	IfStatement	if ( _use_prior )
>202	ElseStatement	else
>203	CompoundStatement	 
>204	ExpressionStatement	 
>205	AssignmentExpr	_ts = new tbb_concurrent_queue_affinity_scheduler ( * this , m_numThreads , true , _htstride )
>206	Expression	* this , m_numThreads , true , _htstride
>207	Expression	m_numThreads , true , _htstride
>208	Expression	true , _htstride
>209	Identifier	_htstride
>210	Identifier	true
>211	Identifier	m_numThreads
>212	UnaryOp	* this
>213	Identifier	this
>214	UnaryOperator	*
>215	Identifier	_ts
>216	CompoundStatement	 
>217	ExpressionStatement	 
>218	AssignmentExpr	_ts = new tbb_concurrent_queue_prioritized_affinity_scheduler ( * this , m_numThreads , true , _htstride )
>219	Expression	* this , m_numThreads , true , _htstride
>220	Expression	m_numThreads , true , _htstride
>221	Expression	true , _htstride
>222	Identifier	_htstride
>223	Identifier	true
>224	Identifier	m_numThreads
>225	UnaryOp	* this
>226	Identifier	this
>227	UnaryOperator	*
>228	Identifier	_ts
>229	Condition	 
>230	Identifier	_use_prior
>231	IfStatement	if ( _first )
>232	ExpressionStatement	 
>233	ShiftExpression	oss << \"Using FIFO_AFFINITY scheduler\" << _prior << _pin
>234	ShiftExpression	\"Using FIFO_AFFINITY scheduler\" << _prior << _pin
>235	ShiftExpression	_prior << _pin
>236	Identifier	_pin
>237	Identifier	_prior
>238	PrimaryExpression	\"Using FIFO_AFFINITY scheduler\"
>239	Identifier	oss
>240	Condition	 
>241	Identifier	_first
>242	Condition	 
>243	UnaryOp	! strcmp ( _sched , \"FIFO_AFFINITY\" )
>244	CallExpression	strcmp ( _sched , \"FIFO_AFFINITY\" )
>245	ArgumentList	_sched
>246	Argument	\"FIFO_AFFINITY\"
>247	PrimaryExpression	\"FIFO_AFFINITY\"
>248	Argument	_sched
>249	Identifier	_sched
>250	Callee	strcmp
>251	Identifier	strcmp
>252	UnaryOperator	!
>253	CompoundStatement	 
>254	IfStatement	if ( _use_prior )
>255	ElseStatement	else
>256	CompoundStatement	 
>257	ExpressionStatement	 
>258	AssignmentExpr	_ts = new tbb_concurrent_queue_scheduler ( * this , m_numThreads , true , _htstride )
>259	Expression	* this , m_numThreads , true , _htstride
>260	Expression	m_numThreads , true , _htstride
>261	Expression	true , _htstride
>262	Identifier	_htstride
>263	Identifier	true
>264	Identifier	m_numThreads
>265	UnaryOp	* this
>266	Identifier	this
>267	UnaryOperator	*
>268	Identifier	_ts
>269	CompoundStatement	 
>270	ExpressionStatement	 
>271	AssignmentExpr	_ts = new tbb_concurrent_queue_prioritized_scheduler ( * this , m_numThreads , true , _htstride )
>272	Expression	* this , m_numThreads , true , _htstride
>273	Expression	m_numThreads , true , _htstride
>274	Expression	true , _htstride
>275	Identifier	_htstride
>276	Identifier	true
>277	Identifier	m_numThreads
>278	UnaryOp	* this
>279	Identifier	this
>280	UnaryOperator	*
>281	Identifier	_ts
>282	Condition	 
>283	Identifier	_use_prior
>284	IfStatement	if ( _first )
>285	ExpressionStatement	 
>286	ShiftExpression	oss << \"Using FIFO_SINGLE scheduler\" << _prior << _pin
>287	ShiftExpression	\"Using FIFO_SINGLE scheduler\" << _prior << _pin
>288	ShiftExpression	_prior << _pin
>289	Identifier	_pin
>290	Identifier	_prior
>291	PrimaryExpression	\"Using FIFO_SINGLE scheduler\"
>292	Identifier	oss
>293	Condition	 
>294	Identifier	_first
>295	Condition	 
>296	UnaryOp	! strcmp ( _sched , \"FIFO_SINGLE\" )
>297	CallExpression	strcmp ( _sched , \"FIFO_SINGLE\" )
>298	ArgumentList	_sched
>299	Argument	\"FIFO_SINGLE\"
>300	PrimaryExpression	\"FIFO_SINGLE\"
>301	Argument	_sched
>302	Identifier	_sched
>303	Callee	strcmp
>304	Identifier	strcmp
>305	UnaryOperator	!
>306	CompoundStatement	 
>307	IfStatement	if ( _use_prior )
>308	ElseStatement	else
>309	CompoundStatement	 
>310	ExpressionStatement	 
>311	AssignmentExpr	_ts = new tbb_concurrent_queue_scheduler ( * this , m_numThreads , true , _htstride )
>312	Expression	* this , m_numThreads , true , _htstride
>313	Expression	m_numThreads , true , _htstride
>314	Expression	true , _htstride
>315	Identifier	_htstride
>316	Identifier	true
>317	Identifier	m_numThreads
>318	UnaryOp	* this
>319	Identifier	this
>320	UnaryOperator	*
>321	Identifier	_ts
>322	CompoundStatement	 
>323	ExpressionStatement	 
>324	AssignmentExpr	_ts = new tbb_concurrent_queue_prioritized_scheduler ( * this , m_numThreads , true , _htstride )
>325	Expression	* this , m_numThreads , true , _htstride
>326	Expression	m_numThreads , true , _htstride
>327	Expression	true , _htstride
>328	Identifier	_htstride
>329	Identifier	true
>330	Identifier	m_numThreads
>331	UnaryOp	* this
>332	Identifier	this
>333	UnaryOperator	*
>334	Identifier	_ts
>335	Condition	 
>336	Identifier	_use_prior
>337	IfStatement	if ( _first )
>338	ExpressionStatement	 
>339	ShiftExpression	oss << \"Using FIFO_STEAL scheduler\" << _prior << _pin
>340	ShiftExpression	\"Using FIFO_STEAL scheduler\" << _prior << _pin
>341	ShiftExpression	_prior << _pin
>342	Identifier	_pin
>343	Identifier	_prior
>344	PrimaryExpression	\"Using FIFO_STEAL scheduler\"
>345	Identifier	oss
>346	Condition	 
>347	Identifier	_first
>348	Condition	 
>349	UnaryOp	! strcmp ( _sched , \"FIFO_STEAL\" )
>350	CallExpression	strcmp ( _sched , \"FIFO_STEAL\" )
>351	ArgumentList	_sched
>352	Argument	\"FIFO_STEAL\"
>353	PrimaryExpression	\"FIFO_STEAL\"
>354	Argument	_sched
>355	Identifier	_sched
>356	Callee	strcmp
>357	Identifier	strcmp
>358	UnaryOperator	!
>359	IdentifierDeclStatement	 
>360	IdentifierDecl	oss
>361	Identifier	oss
>362	IdentifierDeclType	Speaker
>363	Condition	 
>364	Identifier	_sched
>365	ExpressionStatement	 
>366	AssignmentExpr	_pin = _first && _htstride > 0 ? \" [PINNING ON]\" 
>367	ConditionalExpression	_first && _htstride > 0 ? \" [PINNING ON]\" 
>368	PrimaryExpression	\" [PINNING OFF]\"
>369	PrimaryExpression	\" [PINNING ON]\"
>370	Condition	_first && _htstride > 0
>371	AndExpression	_first && _htstride > 0
>372	RelationalExpression	_htstride > 0
>373	PrimaryExpression	0
>374	Identifier	_htstride
>375	Identifier	_first
>376	Identifier	_pin
>377	ExpressionStatement	 
>378	AssignmentExpr	_prior = _first && _use_prior ? \" [PRIORITY ON]\" 
>379	ConditionalExpression	_first && _use_prior ? \" [PRIORITY ON]\" 
>380	PrimaryExpression	\" [PRIORITY OFF]\"
>381	PrimaryExpression	\" [PRIORITY ON]\"
>382	Condition	_first && _use_prior
>383	AndExpression	_first && _use_prior
>384	Identifier	_use_prior
>385	Identifier	_first
>386	Identifier	_prior
>387	IdentifierDeclStatement	 
>388	IdentifierDecl	_first = true
>389	AssignmentExpr	_first = true
>390	Identifier	true
>391	Identifier	true
>392	Identifier	_first
>393	IdentifierDeclType	bool
>394	Statement	 
>395	IdentifierDeclStatement	 
>396	IdentifierDecl	_use_prior = _prior && atoi ( _prior ) ? true 
>397	AssignmentExpr	_use_prior = _prior && atoi ( _prior ) ? true 
>398	ConditionalExpression	_prior && atoi ( _prior ) ? true 
>399	Identifier	false
>400	Identifier	true
>401	Condition	_prior && atoi ( _prior )
>402	AndExpression	_prior && atoi ( _prior )
>403	CallExpression	atoi ( _prior )
>404	ArgumentList	_prior
>405	Argument	_prior
>406	Identifier	_prior
>407	Callee	atoi
>408	Identifier	atoi
>409	Identifier	_prior
>410	Identifier	_use_prior
>411	Identifier	_use_prior
>412	IdentifierDeclType	const bool
>413	IdentifierDeclStatement	 
>414	IdentifierDecl	* _prior = getenv ( \"CNC_USE_PRIORITY\" )
>415	AssignmentExpr	* _prior = getenv ( \"CNC_USE_PRIORITY\" )
>416	CallExpression	getenv ( \"CNC_USE_PRIORITY\" )
>417	ArgumentList	\"CNC_USE_PRIORITY\"
>418	Argument	\"CNC_USE_PRIORITY\"
>419	PrimaryExpression	\"CNC_USE_PRIORITY\"
>420	Callee	getenv
>421	Identifier	getenv
>422	Identifier	_prior
>423	Identifier	_prior
>424	IdentifierDeclType	const char *
>425	IdentifierDeclStatement	 
>426	IdentifierDecl	_htstride = _pin ? atoi ( _pin ) 
>427	AssignmentExpr	_htstride = _pin ? atoi ( _pin ) 
>428	ConditionalExpression	_pin ? atoi ( _pin ) 
>429	PrimaryExpression	4
>430	CallExpression	atoi ( _pin )
>431	ArgumentList	_pin
>432	Argument	_pin
>433	Identifier	_pin
>434	Callee	atoi
>435	Identifier	atoi
>436	Condition	_pin
>437	Identifier	_pin
>438	Identifier	_htstride
>439	Identifier	_htstride
>440	IdentifierDeclType	const int
>441	IdentifierDeclStatement	 
>442	IdentifierDecl	* _pin = getenv ( \"CNC_PIN_THREADS\" )
>443	AssignmentExpr	* _pin = getenv ( \"CNC_PIN_THREADS\" )
>444	CallExpression	getenv ( \"CNC_PIN_THREADS\" )
>445	ArgumentList	\"CNC_PIN_THREADS\"
>446	Argument	\"CNC_PIN_THREADS\"
>447	PrimaryExpression	\"CNC_PIN_THREADS\"
>448	Callee	getenv
>449	Identifier	getenv
>450	Identifier	_pin
>451	Identifier	_pin
>452	IdentifierDeclType	const char *
>453	IdentifierDeclStatement	 
>454	IdentifierDecl	* _sched = getenv ( \"CNC_SCHEDULER\" )
>455	AssignmentExpr	* _sched = getenv ( \"CNC_SCHEDULER\" )
>456	CallExpression	getenv ( \"CNC_SCHEDULER\" )
>457	ArgumentList	\"CNC_SCHEDULER\"
>458	Argument	\"CNC_SCHEDULER\"
>459	PrimaryExpression	\"CNC_SCHEDULER\"
>460	Callee	getenv
>461	Identifier	getenv
>462	Identifier	_sched
>463	Identifier	_sched
>464	IdentifierDeclType	const char *
>465	IdentifierDeclStatement	 
>466	IdentifierDecl	* _ts = NULL
>467	AssignmentExpr	* _ts = NULL
>468	Identifier	NULL
>469	Identifier	NULL
>470	Identifier	_ts
>471	IdentifierDeclType	scheduler_i *
>492	FunctionDef	context_base 
>493	ParameterList	 
>494	ReturnType	void
>495	CompoundStatement	 
>496	ExpressionStatement	 
>497	CallExpression	m_scheduler -> start_dist ( )
>498	ArgumentList	 
>499	Callee	m_scheduler -> start_dist
>500	PtrMemberAccess	m_scheduler -> start_dist
>501	Identifier	start_dist
>502	Identifier	m_scheduler
>507	FunctionDef	context_base 
>508	ParameterList	scheduler_i * s
>509	Parameter	 
>510	Identifier	s
>511	ParameterType	scheduler_i *
>512	ReturnType	void
>513	CompoundStatement	 
>514	IfStatement	if ( s )
>515	CompoundStatement	 
>516	ExpressionStatement	 
>517	Identifier	s
>518	Statement	 
>519	ExpressionStatement	 
>520	CallExpression	s -> stop_dist ( )
>521	ArgumentList	 
>522	Callee	s -> stop_dist
>523	PtrMemberAccess	s -> stop_dist
>524	Identifier	stop_dist
>525	Identifier	s
>526	Condition	 
>527	Identifier	s
>532	FunctionDef	context_base 
>533	ParameterList	scheduler_i * sched
>534	Parameter	 
>535	Identifier	sched
>536	ParameterType	scheduler_i *
>537	ReturnType	void
>538	CompoundStatement	 
>539	IfStatement	if ( subscribed ( ) && sched -> subscribed ( ) )
>540	CompoundStatement	 
>541	ExpressionStatement	 
>542	CallExpression	sched -> wait_loop ( )
>543	ArgumentList	 
>544	Callee	sched -> wait_loop
>545	PtrMemberAccess	sched -> wait_loop
>546	Identifier	wait_loop
>547	Identifier	sched
>548	IfStatement	if ( distributor 
>549	ExpressionStatement	 
>550	CallExpression	cleanup_distributables ( true )
>551	ArgumentList	true
>552	Argument	true
>553	Identifier	true
>554	Callee	cleanup_distributables
>555	Identifier	cleanup_distributables
>556	Condition	 
>557	EqualityExpression	distributor 
>558	PrimaryExpression	0
>559	CallExpression	distributor 
>560	ArgumentList	 
>561	Callee	distributor 
>562	Identifier	distributor 
>563	Condition	 
>564	AndExpression	subscribed ( ) && sched -> subscribed ( )
>565	CallExpression	sched -> subscribed ( )
>566	ArgumentList	 
>567	Callee	sched -> subscribed
>568	PtrMemberAccess	sched -> subscribed
>569	Identifier	subscribed
>570	Identifier	sched
>571	CallExpression	subscribed ( )
>572	ArgumentList	 
>573	Callee	subscribed
>574	Identifier	subscribed
>575	ExpressionStatement	 
>576	CallExpression	sched -> wait_loop ( )
>577	ArgumentList	 
>578	Callee	sched -> wait_loop
>579	PtrMemberAccess	sched -> wait_loop
>580	Identifier	wait_loop
>581	Identifier	sched
>582	IfStatement	if ( sched == NULL )
>583	ExpressionStatement	 
>584	AssignmentExpr	sched = m_scheduler
>585	Identifier	m_scheduler
>586	Identifier	sched
>587	Condition	 
>588	EqualityExpression	sched == NULL
>589	Identifier	NULL
>590	Identifier	sched
>591	ExpressionStatement	 
>592	CallExpression	CNC_ASSERT ( ! distributed ( ) || distributor 
>593	ArgumentList	! distributed ( ) || distributor 
>594	Argument	! distributed ( ) || distributor 
>595	OrExpression	! distributed ( ) || distributor 
>596	OrExpression	distributor 
>597	EqualityExpression	distributor 
>598	PrimaryExpression	0
>599	CallExpression	distributor 
>600	ArgumentList	 
>601	Callee	distributor 
>602	Identifier	distributor 
>603	CallExpression	distributor 
>604	ArgumentList	 
>605	Callee	distributor 
>606	Identifier	distributor 
>607	UnaryOp	! distributed ( )
>608	CallExpression	distributed ( )
>609	ArgumentList	 
>610	Callee	distributed
>611	Identifier	distributed
>612	UnaryOperator	!
>613	Callee	CNC_ASSERT
>614	Identifier	CNC_ASSERT
>628	FunctionDef	context_base 
>629	ParameterList	 
>630	ReturnType	step_instance_base *
>631	CompoundStatement	 
>632	ExpressionStatement	 
>633	CallExpression	m_scheduler -> current ( )
>634	ArgumentList	 
>635	Callee	m_scheduler -> current
>636	PtrMemberAccess	m_scheduler -> current
>637	Identifier	current
>638	Identifier	m_scheduler
>639	Statement	 
>640	Statement	 
>641	Statement	 
>642	Statement	 
>643	Statement	 
>644	Statement	 
>649	FunctionDef	context_base 
>650	ParameterList	 
>651	ReturnType	void
>652	CompoundStatement	 
>653	IfStatement	if ( _stepInstance -> was_suspended_since_reset ( ) )
>654	CompoundStatement	 
>655	ExpressionStatement	 
>656	Identifier	DATA_NOT_READY
>657	Statement	 
>658	Condition	 
>659	CallExpression	_stepInstance -> was_suspended_since_reset ( )
>660	ArgumentList	 
>661	Callee	_stepInstance -> was_suspended_since_reset
>662	PtrMemberAccess	_stepInstance -> was_suspended_since_reset
>663	Identifier	was_suspended_since_reset
>664	Identifier	_stepInstance
>665	IfStatement	if ( _stepInstance == NULL )
>666	ReturnStatement	 
>667	Condition	 
>668	EqualityExpression	_stepInstance == NULL
>669	Identifier	NULL
>670	Identifier	_stepInstance
>671	ExpressionStatement	 
>672	CallExpression	CNC_ASSERT ( _stepInstance != NULL )
>673	ArgumentList	_stepInstance != NULL
>674	Argument	_stepInstance != NULL
>675	EqualityExpression	_stepInstance != NULL
>676	Identifier	NULL
>677	Identifier	_stepInstance
>678	Callee	CNC_ASSERT
>679	Identifier	CNC_ASSERT
>680	IdentifierDeclStatement	 
>681	IdentifierDecl	* _stepInstance = this -> current_step_instance ( )
>682	AssignmentExpr	* _stepInstance = this -> current_step_instance ( )
>683	CallExpression	this -> current_step_instance ( )
>684	ArgumentList	 
>685	Callee	this -> current_step_instance
>686	PtrMemberAccess	this -> current_step_instance
>687	Identifier	current_step_instance
>688	Identifier	this
>689	Identifier	_stepInstance
>690	Identifier	_stepInstance
>691	IdentifierDeclType	step_instance_base *
>703	FunctionDef	execute (context_base * ctxt)
>704	ParameterList	context_base * ctxt
>705	Parameter	 
>706	Identifier	ctxt
>707	ParameterType	context_base *
>708	ReturnType	void
>709	CompoundStatement	 
>710	ExpressionStatement	 
>711	CallExpression	ctxt -> cleanup_distributables ( false )
>712	ArgumentList	false
>713	Argument	false
>714	Identifier	false
>715	Callee	ctxt -> cleanup_distributables
>716	PtrMemberAccess	ctxt -> cleanup_distributables
>717	Identifier	cleanup_distributables
>718	Identifier	ctxt
>719	ExpressionStatement	 
>720	CallExpression	ctxt -> unblock_for_put ( )
>721	ArgumentList	 
>722	Callee	ctxt -> unblock_for_put
>723	PtrMemberAccess	ctxt -> unblock_for_put
>724	Identifier	unblock_for_put
>725	Identifier	ctxt
>731	FunctionDef	context_base 
>732	ParameterList	 
>733	ReturnType	void
>734	CompoundStatement	 
>735	ExpressionStatement	 
>736	CallExpression	block_for_put ( )
>737	ArgumentList	 
>738	Callee	block_for_put
>739	Identifier	block_for_put
>740	ExpressionStatement	 
>741	Expression	* m_scheduler , this
>742	Identifier	this
>743	UnaryOp	* m_scheduler
>744	Identifier	m_scheduler
>745	UnaryOperator	*
>746	ExpressionStatement	 
>747	CallExpression	CNC_ASSERT ( m_envIsWaiting . size ( ) == 0 )
>748	ArgumentList	m_envIsWaiting . size ( ) == 0
>749	Argument	m_envIsWaiting . size ( ) == 0
>750	EqualityExpression	m_envIsWaiting . size ( ) == 0
>751	PrimaryExpression	0
>752	CallExpression	m_envIsWaiting . size ( )
>753	ArgumentList	 
>754	Callee	m_envIsWaiting . size
>755	MemberAccess	m_envIsWaiting . size
>756	Identifier	size
>757	Identifier	m_envIsWaiting
>758	Callee	CNC_ASSERT
>759	Identifier	CNC_ASSERT
>766	FunctionDef	context_base 
>767	ParameterList	 
>768	ReturnType	void
>769	CompoundStatement	 
>770	ExpressionStatement	 
>771	CallExpression	m_scheduler -> leave_quiescence ( )
>772	ArgumentList	 
>773	Callee	m_scheduler -> leave_quiescence
>774	PtrMemberAccess	m_scheduler -> leave_quiescence
>775	Identifier	leave_quiescence
>776	Identifier	m_scheduler
>781	FunctionDef	context_base 
>782	ParameterList	 
>783	ReturnType	void
>784	CompoundStatement	 
>785	ExpressionStatement	 
>786	CallExpression	m_scheduler -> enter_quiescence ( )
>787	ArgumentList	 
>788	Callee	m_scheduler -> enter_quiescence
>789	PtrMemberAccess	m_scheduler -> enter_quiescence
>790	Identifier	enter_quiescence
>791	Identifier	m_scheduler
<3=8,4
<4=5
<5=7,6
<8=33,26,13,9
<9=10
<10=12,11
<13=22,14
<14=15
<15=16
<16=20,17
<17=18
<18=19
<20=21
<22=23
<23=25,24
<26=27
<27=32,28
<28=30,29
<30=31
<33=70,43,34
<34=35
<35=36
<36=37
<37=42,38
<38=40,39
<40=41
<43=56,44
<44=52,45
<45=46
<46=51,47
<47=49,48
<49=50
<52=53
<53=55,54
<56=57
<57=69,58
<58=67,59
<59=60
<60=61
<61=65,62
<62=63
<63=64
<65=66
<67=68
<70=71
<71=75,72
<72=73
<73=74
<75=76
<88=90,89
<90=98,91
<91=96,92
<92=95,93
<93=94
<96=97
<98=99
<99=103,100
<100=101
<101=102
<103=104
<110=113,112,111
<113=465,453,441,425,413,395,394,387,377,365,193,124,116,114
<114=115
<116=122,117
<117=118
<118=119
<119=121,120
<122=123
<124=189,125
<125=136,126
<126=127
<127=135,128
<128=132,129
<129=131,130
<132=134,133
<136=187,137
<137=177,138
<138=175,139
<139=171,140
<140=162,150,141
<141=142
<142=143
<143=149,144
<144=148,145
<145=147,146
<150=151
<151=161,152
<152=160,153
<153=159,154
<154=158,155
<155=157,156
<162=163
<163=169,164
<164=167,165
<165=166
<167=168
<169=170
<171=172
<172=174,173
<175=176
<177=178
<178=186,179
<179=182,181,180
<182=183
<183=185,184
<187=188
<189=190
<190=192,191
<193=363,194
<194=359,195
<195=348,306,196
<196=197
<197=295,253,198
<198=199
<199=242,200
<200=231,201
<201=229,216,202
<202=203
<203=204
<204=205
<205=215,206
<206=212,207
<207=211,208
<208=210,209
<212=214,213
<216=217
<217=218
<218=228,219
<219=225,220
<220=224,221
<221=223,222
<225=227,226
<229=230
<231=240,232
<232=233
<233=239,234
<234=238,235
<235=237,236
<240=241
<242=243
<243=252,244
<244=250,245
<245=248,246
<246=247
<248=249
<250=251
<253=284,254
<254=282,269,255
<255=256
<256=257
<257=258
<258=268,259
<259=265,260
<260=264,261
<261=263,262
<265=267,266
<269=270
<270=271
<271=281,272
<272=278,273
<273=277,274
<274=276,275
<278=280,279
<282=283
<284=293,285
<285=286
<286=292,287
<287=291,288
<288=290,289
<293=294
<295=296
<296=305,297
<297=303,298
<298=301,299
<299=300
<301=302
<303=304
<306=337,307
<307=335,322,308
<308=309
<309=310
<310=311
<311=321,312
<312=318,313
<313=317,314
<314=316,315
<318=320,319
<322=323
<323=324
<324=334,325
<325=331,326
<326=330,327
<327=329,328
<331=333,332
<335=336
<337=346,338
<338=339
<339=345,340
<340=344,341
<341=343,342
<346=347
<348=349
<349=358,350
<350=356,351
<351=354,352
<352=353
<354=355
<356=357
<359=360
<360=362,361
<363=364
<365=366
<366=376,367
<367=370,369,368
<370=371
<371=375,372
<372=374,373
<377=378
<378=386,379
<379=382,381,380
<382=383
<383=385,384
<387=388
<388=393,392,389
<389=391,390
<395=396
<396=412,411,397
<397=410,398
<398=401,400,399
<401=402
<402=409,403
<403=407,404
<404=405
<405=406
<407=408
<413=414
<414=424,423,415
<415=422,416
<416=420,417
<417=418
<418=419
<420=421
<425=426
<426=440,439,427
<427=438,428
<428=436,430,429
<430=434,431
<431=432
<432=433
<434=435
<436=437
<441=442
<442=452,451,443
<443=450,444
<444=448,445
<445=446
<446=447
<448=449
<453=454
<454=464,463,455
<455=462,456
<456=460,457
<457=458
<458=459
<460=461
<465=466
<466=471,470,467
<467=469,468
<492=495,494,493
<495=496
<496=497
<497=499,498
<499=500
<500=502,501
<507=513,512,508
<508=509
<509=511,510
<513=514
<514=526,515
<515=519,518,516
<516=517
<519=520
<520=522,521
<522=523
<523=525,524
<526=527
<532=538,537,533
<533=534
<534=536,535
<538=591,582,575,539
<539=563,540
<540=548,541
<541=542
<542=544,543
<544=545
<545=547,546
<548=556,549
<549=550
<550=554,551
<551=552
<552=553
<554=555
<556=557
<557=559,558
<559=561,560
<561=562
<563=564
<564=571,565
<565=567,566
<567=568
<568=570,569
<571=573,572
<573=574
<575=576
<576=578,577
<578=579
<579=581,580
<582=587,583
<583=584
<584=586,585
<587=588
<588=590,589
<591=592
<592=613,593
<593=594
<594=595
<595=607,596
<596=603,597
<597=599,598
<599=601,600
<601=602
<603=605,604
<605=606
<607=612,608
<608=610,609
<610=611
<613=614
<628=631,630,629
<631=644,643,642,641,640,639,632
<632=633
<633=635,634
<635=636
<636=638,637
<649=652,651,650
<652=680,671,665,653
<653=658,654
<654=657,655
<655=656
<658=659
<659=661,660
<661=662
<662=664,663
<665=667,666
<667=668
<668=670,669
<671=672
<672=678,673
<673=674
<674=675
<675=677,676
<678=679
<680=681
<681=691,690,682
<682=689,683
<683=685,684
<685=686
<686=688,687
<703=709,708,704
<704=705
<705=707,706
<709=719,710
<710=711
<711=715,712
<712=713
<713=714
<715=716
<716=718,717
<719=720
<720=722,721
<722=723
<723=725,724
<731=734,733,732
<734=746,740,735
<735=736
<736=738,737
<738=739
<740=741
<741=743,742
<743=745,744
<746=747
<747=758,748
<748=749
<749=750
<750=752,751
<752=754,753
<754=755
<755=757,756
<758=759
<766=769,768,767
<769=770
<770=771
<771=773,772
<773=774
<774=776,775
<781=784,783,782
<784=785
<785=786
<786=788,787
<788=789
<789=791,790
