>3	FunctionDef	Output 
>4	ParameterList	Region & region , NTA_BasicType type , bool isRegionLevel
>5	Parameter	 
>6	Identifier	isRegionLevel
>7	ParameterType	bool
>8	Parameter	 
>9	Identifier	type
>10	ParameterType	NTA_BasicType
>11	Parameter	 
>12	Identifier	region
>13	ParameterType	Region &
>14	CompoundStatement	 
>15	ExpressionStatement	 
>16	AssignmentExpr	data_ = new Array ( type )
>17	Identifier	type
>18	Identifier	data_
>26	FunctionDef	Output 
>27	ParameterList	 
>28	CompoundStatement	 
>29	ExpressionStatement	 
>30	Identifier	data_
>31	Statement	 
>32	ExpressionStatement	 
>33	ShiftExpression	NTA_CHECK ( links_ . size ( ) == 0 ) << \"Internal error in region deletion\"
>34	PrimaryExpression	\"Internal error in region deletion\"
>35	CallExpression	NTA_CHECK ( links_ . size ( ) == 0 )
>36	ArgumentList	links_ . size ( ) == 0
>37	Argument	links_ . size ( ) == 0
>38	EqualityExpression	links_ . size ( ) == 0
>39	PrimaryExpression	0
>40	CallExpression	links_ . size ( )
>41	ArgumentList	 
>42	Callee	links_ . size
>43	MemberAccess	links_ . size
>44	Identifier	size
>45	Identifier	links_
>46	Callee	NTA_CHECK
>47	Identifier	NTA_CHECK
>53	FunctionDef	Output 
>54	ParameterList	size_t count
>55	Parameter	 
>56	Identifier	count
>57	ParameterType	size_t
>58	ReturnType	void
>59	CompoundStatement	 
>60	IfStatement	if ( dataCount != 0 )
>61	CompoundStatement	 
>62	ExpressionStatement	 
>63	CallExpression	memset ( buffer , 0 , byteCount )
>64	ArgumentList	buffer
>65	Argument	byteCount
>66	Identifier	byteCount
>67	Argument	0
>68	PrimaryExpression	0
>69	Argument	buffer
>70	Identifier	buffer
>71	Callee	memset
>72	Identifier	memset
>73	IdentifierDeclStatement	 
>74	IdentifierDecl	byteCount = dataCount * BasicType 
>75	AssignmentExpr	byteCount = dataCount * BasicType 
>76	MultiplicativeExpression	dataCount * BasicType 
>77	CallExpression	BasicType 
>78	ArgumentList	data_ -> getType ( )
>79	Argument	data_ -> getType ( )
>80	CallExpression	data_ -> getType ( )
>81	ArgumentList	 
>82	Callee	data_ -> getType
>83	PtrMemberAccess	data_ -> getType
>84	Identifier	getType
>85	Identifier	data_
>86	Callee	BasicType 
>87	Identifier	BasicType 
>88	Identifier	dataCount
>89	Identifier	byteCount
>90	Identifier	byteCount
>91	IdentifierDeclType	size_t
>92	IdentifierDeclStatement	 
>93	IdentifierDecl	* buffer = data_ -> getBuffer ( )
>94	AssignmentExpr	* buffer = data_ -> getBuffer ( )
>95	CallExpression	data_ -> getBuffer ( )
>96	ArgumentList	 
>97	Callee	data_ -> getBuffer
>98	PtrMemberAccess	data_ -> getBuffer
>99	Identifier	getBuffer
>100	Identifier	data_
>101	Identifier	buffer
>102	Identifier	buffer
>103	IdentifierDeclType	void *
>104	ExpressionStatement	 
>105	CallExpression	data_ -> allocateBuffer ( dataCount )
>106	ArgumentList	dataCount
>107	Argument	dataCount
>108	Identifier	dataCount
>109	Callee	data_ -> allocateBuffer
>110	PtrMemberAccess	data_ -> allocateBuffer
>111	Identifier	allocateBuffer
>112	Identifier	data_
>113	Condition	 
>114	EqualityExpression	dataCount != 0
>115	PrimaryExpression	0
>116	Identifier	dataCount
>117	IfStatement	if ( isRegionLevel_ )
>118	ElseStatement	else
>119	ExpressionStatement	 
>120	AssignmentExpr	dataCount = count * region_ . getDimensions ( ) . getCount ( )
>121	MultiplicativeExpression	count * region_ . getDimensions ( ) . getCount ( )
>122	CallExpression	region_ . getDimensions ( ) . getCount ( )
>123	ArgumentList	 
>124	Callee	region_ . getDimensions ( ) . getCount
>125	MemberAccess	region_ . getDimensions ( ) . getCount
>126	Identifier	getCount
>127	CallExpression	region_ . getDimensions ( )
>128	ArgumentList	 
>129	Callee	region_ . getDimensions
>130	MemberAccess	region_ . getDimensions
>131	Identifier	getDimensions
>132	Identifier	region_
>133	Identifier	count
>134	Identifier	dataCount
>135	ExpressionStatement	 
>136	AssignmentExpr	dataCount = count
>137	Identifier	count
>138	Identifier	dataCount
>139	Condition	 
>140	Identifier	isRegionLevel_
>141	IdentifierDeclStatement	 
>142	IdentifierDecl	dataCount
>143	Identifier	dataCount
>144	IdentifierDeclType	size_t
>145	ExpressionStatement	 
>146	AssignmentExpr	nodeOutputElementCount_ = count
>147	Identifier	count
>148	Identifier	nodeOutputElementCount_
>149	IfStatement	if ( data_ -> getBuffer ( ) != NULL )
>150	ReturnStatement	 
>151	Condition	 
>152	EqualityExpression	data_ -> getBuffer ( ) != NULL
>153	Identifier	NULL
>154	CallExpression	data_ -> getBuffer ( )
>155	ArgumentList	 
>156	Callee	data_ -> getBuffer
>157	PtrMemberAccess	data_ -> getBuffer
>158	Identifier	getBuffer
>159	Identifier	data_
>178	FunctionDef	Output 
>179	ParameterList	Link * link
>180	Parameter	 
>181	Identifier	link
>182	ParameterType	Link *
>183	ReturnType	void
>184	CompoundStatement	 
>185	ExpressionStatement	 
>186	CallExpression	links_ . insert ( link )
>187	ArgumentList	link
>188	Argument	link
>189	Identifier	link
>190	Callee	links_ . insert
>191	MemberAccess	links_ . insert
>192	Identifier	insert
>193	Identifier	links_
>194	ExpressionStatement	 
>195	CallExpression	NTA_CHECK ( linkIter == links_ . end ( ) )
>196	ArgumentList	linkIter == links_ . end ( )
>197	Argument	linkIter == links_ . end ( )
>198	EqualityExpression	linkIter == links_ . end ( )
>199	CallExpression	links_ . end ( )
>200	ArgumentList	 
>201	Callee	links_ . end
>202	MemberAccess	links_ . end
>203	Identifier	end
>204	Identifier	links_
>205	Identifier	linkIter
>206	Callee	NTA_CHECK
>207	Identifier	NTA_CHECK
>208	IdentifierDeclStatement	 
>209	IdentifierDecl	linkIter = links_ . find ( link )
>210	AssignmentExpr	linkIter = links_ . find ( link )
>211	CallExpression	links_ . find ( link )
>212	ArgumentList	link
>213	Argument	link
>214	Identifier	link
>215	Callee	links_ . find
>216	MemberAccess	links_ . find
>217	Identifier	find
>218	Identifier	links_
>219	Identifier	linkIter
>220	Identifier	linkIter
>221	IdentifierDeclType	std 
>230	FunctionDef	Output 
>231	ParameterList	Link * link
>232	Parameter	 
>233	Identifier	link
>234	ParameterType	Link *
>235	ReturnType	void
>236	CompoundStatement	 
>237	ExpressionStatement	 
>238	CallExpression	links_ . erase ( linkIter )
>239	ArgumentList	linkIter
>240	Argument	linkIter
>241	Identifier	linkIter
>242	Callee	links_ . erase
>243	MemberAccess	links_ . erase
>244	Identifier	erase
>245	Identifier	links_
>246	ExpressionStatement	 
>247	CallExpression	NTA_CHECK ( linkIter != links_ . end ( ) )
>248	ArgumentList	linkIter != links_ . end ( )
>249	Argument	linkIter != links_ . end ( )
>250	EqualityExpression	linkIter != links_ . end ( )
>251	CallExpression	links_ . end ( )
>252	ArgumentList	 
>253	Callee	links_ . end
>254	MemberAccess	links_ . end
>255	Identifier	end
>256	Identifier	links_
>257	Identifier	linkIter
>258	Callee	NTA_CHECK
>259	Identifier	NTA_CHECK
>260	IdentifierDeclStatement	 
>261	IdentifierDecl	linkIter = links_ . find ( link )
>262	AssignmentExpr	linkIter = links_ . find ( link )
>263	CallExpression	links_ . find ( link )
>264	ArgumentList	link
>265	Argument	link
>266	Identifier	link
>267	Callee	links_ . find
>268	MemberAccess	links_ . find
>269	Identifier	find
>270	Identifier	links_
>271	Identifier	linkIter
>272	Identifier	linkIter
>273	IdentifierDeclType	std 
>282	FunctionDef	Output 
>283	ParameterList	 
>284	ReturnType	const Array &
>285	CompoundStatement	 
>286	ReturnStatement	 
>287	UnaryOp	* data_
>288	Identifier	data_
>289	UnaryOperator	*
>295	FunctionDef	Output 
>296	ParameterList	 
>297	ReturnType	bool
>298	CompoundStatement	 
>299	ReturnStatement	 
>300	Identifier	isRegionLevel_
>305	FunctionDef	Output 
>306	ParameterList	 
>307	ReturnType	Region &
>308	CompoundStatement	 
>309	ReturnStatement	 
>310	Identifier	region_
>315	FunctionDef	Output 
>316	ParameterList	const std 
>317	Parameter	 
>318	Identifier	name
>319	ParameterType	const std 
>320	ReturnType	void
>321	CompoundStatement	 
>322	ExpressionStatement	 
>323	AssignmentExpr	name_ = name
>324	Identifier	name
>325	Identifier	name_
>331	FunctionDef	Output 
>332	ParameterList	 
>333	ReturnType	const std 
>334	CompoundStatement	 
>335	ReturnStatement	 
>336	Identifier	name_
>341	FunctionDef	Output 
>342	ParameterList	 
>343	ReturnType	size_t
>344	CompoundStatement	 
>345	ReturnStatement	 
>346	Identifier	nodeOutputElementCount_
>351	FunctionDef	Output 
>352	ParameterList	 
>353	ReturnType	bool
>354	CompoundStatement	 
>355	ReturnStatement	 
>356	RelationalExpression	links_ . size ( ) > 0
>357	PrimaryExpression	0
>358	CallExpression	links_ . size ( )
>359	ArgumentList	 
>360	Callee	links_ . size
>361	MemberAccess	links_ . size
>362	Identifier	size
>363	Identifier	links_
<3=14,4
<4=11,8,5
<5=7,6
<8=10,9
<11=13,12
<14=15
<15=16
<16=18,17
<26=28,27
<28=32,31,29
<29=30
<32=33
<33=35,34
<35=46,36
<36=37
<37=38
<38=40,39
<40=42,41
<42=43
<43=45,44
<46=47
<53=59,58,54
<54=55
<55=57,56
<59=149,145,141,117,60
<60=113,61
<61=104,92,73,62
<62=63
<63=71,64
<64=69,67,65
<65=66
<67=68
<69=70
<71=72
<73=74
<74=91,90,75
<75=89,76
<76=88,77
<77=86,78
<78=79
<79=80
<80=82,81
<82=83
<83=85,84
<86=87
<92=93
<93=103,102,94
<94=101,95
<95=97,96
<97=98
<98=100,99
<104=105
<105=109,106
<106=107
<107=108
<109=110
<110=112,111
<113=114
<114=116,115
<117=139,135,118
<118=119
<119=120
<120=134,121
<121=133,122
<122=124,123
<124=125
<125=127,126
<127=129,128
<129=130
<130=132,131
<135=136
<136=138,137
<139=140
<141=142
<142=144,143
<145=146
<146=148,147
<149=151,150
<151=152
<152=154,153
<154=156,155
<156=157
<157=159,158
<178=184,183,179
<179=180
<180=182,181
<184=208,194,185
<185=186
<186=190,187
<187=188
<188=189
<190=191
<191=193,192
<194=195
<195=206,196
<196=197
<197=198
<198=205,199
<199=201,200
<201=202
<202=204,203
<206=207
<208=209
<209=221,220,210
<210=219,211
<211=215,212
<212=213
<213=214
<215=216
<216=218,217
<230=236,235,231
<231=232
<232=234,233
<236=260,246,237
<237=238
<238=242,239
<239=240
<240=241
<242=243
<243=245,244
<246=247
<247=258,248
<248=249
<249=250
<250=257,251
<251=253,252
<253=254
<254=256,255
<258=259
<260=261
<261=273,272,262
<262=271,263
<263=267,264
<264=265
<265=266
<267=268
<268=270,269
<282=285,284,283
<285=286
<286=287
<287=289,288
<295=298,297,296
<298=299
<299=300
<305=308,307,306
<308=309
<309=310
<315=321,320,316
<316=317
<317=319,318
<321=322
<322=323
<323=325,324
<331=334,333,332
<334=335
<335=336
<341=344,343,342
<344=345
<345=346
<351=354,353,352
<354=355
<355=356
<356=358,357
<358=360,359
<360=361
<361=363,362
