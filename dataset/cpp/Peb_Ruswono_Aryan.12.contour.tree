>37	FunctionDef	GetLevel ()
>38	ParameterList	 
>39	ReturnType	double
>40	CompoundStatement	 
>41	ReturnStatement	 
>42	Identifier	dfLevel
>47	FunctionDef	GetContourCount ()
>48	ParameterList	 
>49	ReturnType	int
>50	CompoundStatement	 
>51	ReturnStatement	 
>52	Identifier	nEntryCount
>57	FunctionDef	GetContour (int i)
>58	ParameterList	int i
>59	Parameter	 
>60	Identifier	i
>61	ParameterType	int
>62	ReturnType	GDALContourItem *
>63	CompoundStatement	 
>64	ReturnStatement	 
>65	ArrayIndexing	papoEntries [ i ]
>66	Identifier	i
>67	Identifier	papoEntries
>130	FunctionDef	GDAL_CG_Create (int nWidth , int nHeight , int bNoDataSet , double dfNoDataValue , double dfContourInterval , double \
>131	ParameterList	int nWidth , int nHeight , int bNoDataSet , double dfNoDataValue , double dfContourInterval , double dfContourBase , \
>132	Parameter	 
>133	Identifier	pCBData
>134	ParameterType	void *
>135	Parameter	 
>136	Identifier	pfnWriter
>137	ParameterType	GDALContourWriter
>138	Parameter	 
>139	Identifier	dfContourBase
>140	ParameterType	double
>141	Parameter	 
>142	Identifier	dfContourInterval
>143	ParameterType	double
>144	Parameter	 
>145	Identifier	dfNoDataValue
>146	ParameterType	double
>147	Parameter	 
>148	Identifier	bNoDataSet
>149	ParameterType	int
>150	Parameter	 
>151	Identifier	nHeight
>152	ParameterType	int
>153	Parameter	 
>154	Identifier	nWidth
>155	ParameterType	int
>156	ReturnType	GDALContourGeneratorH
>157	CompoundStatement	 
>158	ReturnStatement	 
>159	CastExpression	( GDALContourGeneratorH ) poCG
>160	Identifier	poCG
>161	CastTarget	GDALContourGeneratorH
>162	ExpressionStatement	 
>163	CallExpression	poCG -> SetContourLevels ( dfContourInterval , dfContourBase )
>164	ArgumentList	dfContourInterval
>165	Argument	dfContourBase
>166	Identifier	dfContourBase
>167	Argument	dfContourInterval
>168	Identifier	dfContourInterval
>169	Callee	poCG -> SetContourLevels
>170	PtrMemberAccess	poCG -> SetContourLevels
>171	Identifier	SetContourLevels
>172	Identifier	poCG
>173	IfStatement	if ( bNoDataSet )
>174	ExpressionStatement	 
>175	CallExpression	poCG -> SetNoData ( dfNoDataValue )
>176	ArgumentList	dfNoDataValue
>177	Argument	dfNoDataValue
>178	Identifier	dfNoDataValue
>179	Callee	poCG -> SetNoData
>180	PtrMemberAccess	poCG -> SetNoData
>181	Identifier	SetNoData
>182	Identifier	poCG
>183	Condition	 
>184	Identifier	bNoDataSet
>185	IdentifierDeclStatement	 
>186	IdentifierDecl	* poCG = new GDALContourGenerator ( nWidth , nHeight , pfnWriter , pCBData )
>187	AssignmentExpr	* poCG = new GDALContourGenerator ( nWidth , nHeight , pfnWriter , pCBData )
>188	Expression	nWidth , nHeight , pfnWriter , pCBData
>189	Expression	nHeight , pfnWriter , pCBData
>190	Expression	pfnWriter , pCBData
>191	Identifier	pCBData
>192	Identifier	pfnWriter
>193	Identifier	nHeight
>194	Identifier	nWidth
>195	Identifier	poCG
>196	Identifier	poCG
>197	IdentifierDeclType	GDALContourGenerator *
>210	FunctionDef	GDAL_CG_FeedLine (GDALContourGeneratorH hCG , double * padfScanline)
>211	ParameterList	GDALContourGeneratorH hCG , double * padfScanline
>212	Parameter	 
>213	Identifier	padfScanline
>214	ParameterType	double *
>215	Parameter	 
>216	Identifier	hCG
>217	ParameterType	GDALContourGeneratorH
>218	ReturnType	CPLErr
>219	CompoundStatement	 
>220	ReturnStatement	 
>221	CallExpression	( ( GDALContourGenerator * ) hCG ) -> FeedLine ( padfScanline )
>222	ArgumentList	padfScanline
>223	Argument	padfScanline
>224	Identifier	padfScanline
>225	Callee	( ( GDALContourGenerator * ) hCG ) -> FeedLine
>226	PtrMemberAccess	( ( GDALContourGenerator * ) hCG ) -> FeedLine
>227	Identifier	FeedLine
>228	CastExpression	( GDALContourGenerator * ) hCG
>229	Identifier	hCG
>230	CastTarget	GDALContourGenerator *
>231	ExpressionStatement	 
>232	CallExpression	VALIDATE_POINTER1 ( hCG , \"GDAL_CG_FeedLine\" , CE_Failure )
>233	ArgumentList	hCG
>234	Argument	CE_Failure
>235	Identifier	CE_Failure
>236	Argument	\"GDAL_CG_FeedLine\"
>237	PrimaryExpression	\"GDAL_CG_FeedLine\"
>238	Argument	hCG
>239	Identifier	hCG
>240	Callee	VALIDATE_POINTER1
>241	Identifier	VALIDATE_POINTER1
>250	FunctionDef	GDAL_CG_Destroy (GDALContourGeneratorH hCG)
>251	ParameterList	GDALContourGeneratorH hCG
>252	Parameter	 
>253	Identifier	hCG
>254	ParameterType	GDALContourGeneratorH
>255	ReturnType	void
>256	CompoundStatement	 
>257	ExpressionStatement	 
>258	CastExpression	( GDALContourGenerator * ) hCG
>259	Identifier	hCG
>260	CastTarget	GDALContourGenerator *
>261	Statement	 
>266	FunctionDef	GDALContourGenerator 
>267	ParameterList	int nWidthIn , int nHeightIn , GDALContourWriter pfnWriterIn , void * pWriterCBDataIn
>268	Parameter	 
>269	Identifier	pWriterCBDataIn
>270	ParameterType	void *
>271	Parameter	 
>272	Identifier	pfnWriterIn
>273	ParameterType	GDALContourWriter
>274	Parameter	 
>275	Identifier	nHeightIn
>276	ParameterType	int
>277	Parameter	 
>278	Identifier	nWidthIn
>279	ParameterType	int
>280	CompoundStatement	 
>281	ExpressionStatement	 
>282	AssignmentExpr	bFixedLevels = FALSE
>283	Identifier	FALSE
>284	Identifier	bFixedLevels
>285	ExpressionStatement	 
>286	AssignmentExpr	papoLevels = NULL
>287	Identifier	NULL
>288	Identifier	papoLevels
>289	ExpressionStatement	 
>290	AssignmentExpr	nLevelCount = 0
>291	PrimaryExpression	0
>292	Identifier	nLevelCount
>293	ExpressionStatement	 
>294	AssignmentExpr	nLevelMax = 0
>295	PrimaryExpression	0
>296	Identifier	nLevelMax
>297	ExpressionStatement	 
>298	AssignmentExpr	dfContourOffset = 0.0
>299	PrimaryExpression	0.0
>300	Identifier	dfContourOffset
>301	ExpressionStatement	 
>302	AssignmentExpr	dfContourInterval = 10.0
>303	PrimaryExpression	10.0
>304	Identifier	dfContourInterval
>305	ExpressionStatement	 
>306	AssignmentExpr	dfNoDataValue = - 1000000.0
>307	UnaryOp	- 1000000.0
>308	PrimaryExpression	1000000.0
>309	UnaryOperator	-
>310	Identifier	dfNoDataValue
>311	ExpressionStatement	 
>312	AssignmentExpr	bNoDataActive = FALSE
>313	Identifier	FALSE
>314	Identifier	bNoDataActive
>315	ExpressionStatement	 
>316	AssignmentExpr	iLine = - 1
>317	UnaryOp	- 1
>318	PrimaryExpression	1
>319	UnaryOperator	-
>320	Identifier	iLine
>321	ExpressionStatement	 
>322	AssignmentExpr	pWriterCBData = pWriterCBDataIn
>323	Identifier	pWriterCBDataIn
>324	Identifier	pWriterCBData
>325	ExpressionStatement	 
>326	AssignmentExpr	pfnWriter = pfnWriterIn
>327	Identifier	pfnWriterIn
>328	Identifier	pfnWriter
>329	ExpressionStatement	 
>330	AssignmentExpr	padfThisLine = ( double * ) CPLCalloc ( sizeof ( double ) , nWidth )
>331	CastExpression	( double * ) CPLCalloc ( sizeof ( double ) , nWidth )
>332	CallExpression	CPLCalloc ( sizeof ( double ) , nWidth )
>333	ArgumentList	sizeof ( double )
>334	Argument	nWidth
>335	Identifier	nWidth
>336	Argument	sizeof ( double )
>337	SizeofExpr	sizeof ( double )
>338	SizeofOperand	double
>339	Sizeof	sizeof
>340	Callee	CPLCalloc
>341	Identifier	CPLCalloc
>342	CastTarget	double *
>343	Identifier	padfThisLine
>344	ExpressionStatement	 
>345	AssignmentExpr	padfLastLine = ( double * ) CPLCalloc ( sizeof ( double ) , nWidth )
>346	CastExpression	( double * ) CPLCalloc ( sizeof ( double ) , nWidth )
>347	CallExpression	CPLCalloc ( sizeof ( double ) , nWidth )
>348	ArgumentList	sizeof ( double )
>349	Argument	nWidth
>350	Identifier	nWidth
>351	Argument	sizeof ( double )
>352	SizeofExpr	sizeof ( double )
>353	SizeofOperand	double
>354	Sizeof	sizeof
>355	Callee	CPLCalloc
>356	Identifier	CPLCalloc
>357	CastTarget	double *
>358	Identifier	padfLastLine
>359	ExpressionStatement	 
>360	AssignmentExpr	nHeight = nHeightIn
>361	Identifier	nHeightIn
>362	Identifier	nHeight
>363	ExpressionStatement	 
>364	AssignmentExpr	nWidth = nWidthIn
>365	Identifier	nWidthIn
>366	Identifier	nWidth
>392	FunctionDef	GDALContourGenerator 
>393	ParameterList	 
>394	CompoundStatement	 
>395	ExpressionStatement	 
>396	CallExpression	CPLFree ( padfThisLine )
>397	ArgumentList	padfThisLine
>398	Argument	padfThisLine
>399	Identifier	padfThisLine
>400	Callee	CPLFree
>401	Identifier	CPLFree
>402	ExpressionStatement	 
>403	CallExpression	CPLFree ( padfLastLine )
>404	ArgumentList	padfLastLine
>405	Argument	padfLastLine
>406	Identifier	padfLastLine
>407	Callee	CPLFree
>408	Identifier	CPLFree
>409	ExpressionStatement	 
>410	CallExpression	CPLFree ( papoLevels )
>411	ArgumentList	papoLevels
>412	Argument	papoLevels
>413	Identifier	papoLevels
>414	Callee	CPLFree
>415	Identifier	CPLFree
>416	ExpressionStatement	 
>417	ArrayIndexing	papoLevels [ i ]
>418	Identifier	i
>419	Identifier	papoLevels
>420	ForStatement	for ( i = 0 ; i < nLevelCount ; i ++ )
>421	Statement	 
>422	IncDecOp	 
>423	IncDec	++
>424	Identifier	i
>425	Condition	 
>426	RelationalExpression	i < nLevelCount
>427	Identifier	nLevelCount
>428	Identifier	i
>429	ForInit	 
>430	AssignmentExpr	i = 0
>431	PrimaryExpression	0
>432	Identifier	i
>433	IdentifierDeclStatement	 
>434	IdentifierDecl	i
>435	Identifier	i
>436	IdentifierDeclType	int
>445	FunctionDef	GDALContourGenerator 
>446	ParameterList	int nFixedLevelCount , double * padfFixedLevels
>447	Parameter	 
>448	Identifier	padfFixedLevels
>449	ParameterType	double *
>450	Parameter	 
>451	Identifier	nFixedLevelCount
>452	ParameterType	int
>453	ReturnType	void
>454	CompoundStatement	 
>455	ForStatement	for ( int i = 0 ; i < nFixedLevelCount ; i ++ )
>456	ExpressionStatement	 
>457	CallExpression	FindLevel ( padfFixedLevels [ i ] )
>458	ArgumentList	padfFixedLevels [ i ]
>459	Argument	padfFixedLevels [ i ]
>460	ArrayIndexing	padfFixedLevels [ i ]
>461	Identifier	i
>462	Identifier	padfFixedLevels
>463	Callee	FindLevel
>464	Identifier	FindLevel
>465	IncDecOp	 
>466	IncDec	++
>467	Identifier	i
>468	Condition	 
>469	RelationalExpression	i < nFixedLevelCount
>470	Identifier	nFixedLevelCount
>471	Identifier	i
>472	ForInit	 
>473	IdentifierDeclStatement	int i = 0 ;
>474	IdentifierDecl	i = 0
>475	AssignmentExpr	i = 0
>476	PrimaryExpression	0
>477	Identifier	i
>478	Identifier	i
>479	IdentifierDeclType	int
>480	ExpressionStatement	 
>481	AssignmentExpr	bFixedLevels = TRUE
>482	Identifier	TRUE
>483	Identifier	bFixedLevels
>494	FunctionDef	GDALContourGenerator 
>495	ParameterList	double dfNewValue
>496	Parameter	 
>497	Identifier	dfNewValue
>498	ParameterType	double
>499	ReturnType	void
>500	CompoundStatement	 
>501	ExpressionStatement	 
>502	AssignmentExpr	dfNoDataValue = dfNewValue
>503	Identifier	dfNewValue
>504	Identifier	dfNoDataValue
>505	ExpressionStatement	 
>506	AssignmentExpr	bNoDataActive = TRUE
>507	Identifier	TRUE
>508	Identifier	bNoDataActive
>516	FunctionDef	GDALContourGenerator 
>517	ParameterList	int iPixel
>518	Parameter	 
>519	Identifier	iPixel
>520	ParameterType	int
>521	ReturnType	CPLErr
>522	CompoundStatement	 
>523	ReturnStatement	 
>524	Identifier	eErr
>525	IfStatement	if ( dfUpRight != dfNoDataValue && iPixel < nWidth && iLine > 0 )
>526	CompoundStatement	 
>527	ExpressionStatement	 
>528	AssignmentExpr	eErr = ProcessRect ( dfTop , iPixel , iLine - 0.5 , dfCenter , iPixel , iLine , dfRight , iPixel + 0.5 , \
>529	CallExpression	ProcessRect ( dfTop , iPixel , iLine - 0.5 , dfCenter , iPixel , iLine , dfRight , iPixel + 0.5 , iLine , dfUpRight , \
>530	ArgumentList	dfTop
>531	Argument	iLine - 0.5
>532	AdditiveExpression	iLine - 0.5
>533	PrimaryExpression	0.5
>534	Identifier	iLine
>535	Argument	iPixel + 0.5
>536	AdditiveExpression	iPixel + 0.5
>537	PrimaryExpression	0.5
>538	Identifier	iPixel
>539	Argument	dfUpRight
>540	Identifier	dfUpRight
>541	Argument	iLine
>542	Identifier	iLine
>543	Argument	iPixel + 0.5
>544	AdditiveExpression	iPixel + 0.5
>545	PrimaryExpression	0.5
>546	Identifier	iPixel
>547	Argument	dfRight
>548	Identifier	dfRight
>549	Argument	iLine
>550	Identifier	iLine
>551	Argument	iPixel
>552	Identifier	iPixel
>553	Argument	dfCenter
>554	Identifier	dfCenter
>555	Argument	iLine - 0.5
>556	AdditiveExpression	iLine - 0.5
>557	PrimaryExpression	0.5
>558	Identifier	iLine
>559	Argument	iPixel
>560	Identifier	iPixel
>561	Argument	dfTop
>562	Identifier	dfTop
>563	Callee	ProcessRect
>564	Identifier	ProcessRect
>565	Identifier	eErr
>566	Condition	 
>567	AndExpression	dfUpRight != dfNoDataValue && iPixel < nWidth && iLine > 0
>568	AndExpression	iPixel < nWidth && iLine > 0
>569	RelationalExpression	iLine > 0
>570	PrimaryExpression	0
>571	Identifier	iLine
>572	RelationalExpression	iPixel < nWidth
>573	Identifier	nWidth
>574	Identifier	iPixel
>575	EqualityExpression	dfUpRight != dfNoDataValue
>576	Identifier	dfNoDataValue
>577	Identifier	dfUpRight
>578	IfStatement	if ( dfLoRight != dfNoDataValue && iPixel < nWidth && iLine < nHeight )
>579	CompoundStatement	 
>580	ExpressionStatement	 
>581	AssignmentExpr	eErr = ProcessRect ( dfCenter , iPixel , iLine , dfBottom , iPixel , iLine + 0.5 , dfLoRight , iPixel + \
>582	CallExpression	ProcessRect ( dfCenter , iPixel , iLine , dfBottom , iPixel , iLine + 0.5 , dfLoRight , iPixel + 0.5 , iLine + 0.5 , \
>583	ArgumentList	dfCenter
>584	Argument	iLine
>585	Identifier	iLine
>586	Argument	iPixel + 0.5
>587	AdditiveExpression	iPixel + 0.5
>588	PrimaryExpression	0.5
>589	Identifier	iPixel
>590	Argument	dfRight
>591	Identifier	dfRight
>592	Argument	iLine + 0.5
>593	AdditiveExpression	iLine + 0.5
>594	PrimaryExpression	0.5
>595	Identifier	iLine
>596	Argument	iPixel + 0.5
>597	AdditiveExpression	iPixel + 0.5
>598	PrimaryExpression	0.5
>599	Identifier	iPixel
>600	Argument	dfLoRight
>601	Identifier	dfLoRight
>602	Argument	iLine + 0.5
>603	AdditiveExpression	iLine + 0.5
>604	PrimaryExpression	0.5
>605	Identifier	iLine
>606	Argument	iPixel
>607	Identifier	iPixel
>608	Argument	dfBottom
>609	Identifier	dfBottom
>610	Argument	iLine
>611	Identifier	iLine
>612	Argument	iPixel
>613	Identifier	iPixel
>614	Argument	dfCenter
>615	Identifier	dfCenter
>616	Callee	ProcessRect
>617	Identifier	ProcessRect
>618	Identifier	eErr
>619	Condition	 
>620	AndExpression	dfLoRight != dfNoDataValue && iPixel < nWidth && iLine < nHeight
>621	AndExpression	iPixel < nWidth && iLine < nHeight
>622	RelationalExpression	iLine < nHeight
>623	Identifier	nHeight
>624	Identifier	iLine
>625	RelationalExpression	iPixel < nWidth
>626	Identifier	nWidth
>627	Identifier	iPixel
>628	EqualityExpression	dfLoRight != dfNoDataValue
>629	Identifier	dfNoDataValue
>630	Identifier	dfLoRight
>631	IfStatement	if ( dfLoLeft != dfNoDataValue && eErr == CE_None && iPixel > 0 && iLine < nHeight )
>632	CompoundStatement	 
>633	ExpressionStatement	 
>634	AssignmentExpr	eErr = ProcessRect ( dfLeft , iPixel - 0.5 , iLine , dfLoLeft , iPixel - 0.5 , iLine + 0.5 , dfBottom , \
>635	CallExpression	ProcessRect ( dfLeft , iPixel - 0.5 , iLine , dfLoLeft , iPixel - 0.5 , iLine + 0.5 , dfBottom , iPixel , iLine + \
>636	ArgumentList	dfLeft
>637	Argument	iLine
>638	Identifier	iLine
>639	Argument	iPixel
>640	Identifier	iPixel
>641	Argument	dfCenter
>642	Identifier	dfCenter
>643	Argument	iLine + 0.5
>644	AdditiveExpression	iLine + 0.5
>645	PrimaryExpression	0.5
>646	Identifier	iLine
>647	Argument	iPixel
>648	Identifier	iPixel
>649	Argument	dfBottom
>650	Identifier	dfBottom
>651	Argument	iLine + 0.5
>652	AdditiveExpression	iLine + 0.5
>653	PrimaryExpression	0.5
>654	Identifier	iLine
>655	Argument	iPixel - 0.5
>656	AdditiveExpression	iPixel - 0.5
>657	PrimaryExpression	0.5
>658	Identifier	iPixel
>659	Argument	dfLoLeft
>660	Identifier	dfLoLeft
>661	Argument	iLine
>662	Identifier	iLine
>663	Argument	iPixel - 0.5
>664	AdditiveExpression	iPixel - 0.5
>665	PrimaryExpression	0.5
>666	Identifier	iPixel
>667	Argument	dfLeft
>668	Identifier	dfLeft
>669	Callee	ProcessRect
>670	Identifier	ProcessRect
>671	Identifier	eErr
>672	Condition	 
>673	AndExpression	dfLoLeft != dfNoDataValue && eErr == CE_None && iPixel > 0 && iLine < nHeight
>674	AndExpression	eErr == CE_None && iPixel > 0 && iLine < nHeight
>675	AndExpression	iPixel > 0 && iLine < nHeight
>676	RelationalExpression	iLine < nHeight
>677	Identifier	nHeight
>678	Identifier	iLine
>679	RelationalExpression	iPixel > 0
>680	PrimaryExpression	0
>681	Identifier	iPixel
>682	EqualityExpression	eErr == CE_None
>683	Identifier	CE_None
>684	Identifier	eErr
>685	EqualityExpression	dfLoLeft != dfNoDataValue
>686	Identifier	dfNoDataValue
>687	Identifier	dfLoLeft
>688	IfStatement	if ( dfUpLeft != dfNoDataValue && iPixel > 0 && iLine > 0 )
>689	CompoundStatement	 
>690	ExpressionStatement	 
>691	AssignmentExpr	eErr = ProcessRect ( dfUpLeft , iPixel - 0.5 , iLine - 0.5 , dfLeft , iPixel - 0.5 , iLine , dfCenter , \
>692	CallExpression	ProcessRect ( dfUpLeft , iPixel - 0.5 , iLine - 0.5 , dfLeft , iPixel - 0.5 , iLine , dfCenter , iPixel , iLine , \
>693	ArgumentList	dfUpLeft
>694	Argument	iLine - 0.5
>695	AdditiveExpression	iLine - 0.5
>696	PrimaryExpression	0.5
>697	Identifier	iLine
>698	Argument	iPixel
>699	Identifier	iPixel
>700	Argument	dfTop
>701	Identifier	dfTop
>702	Argument	iLine
>703	Identifier	iLine
>704	Argument	iPixel
>705	Identifier	iPixel
>706	Argument	dfCenter
>707	Identifier	dfCenter
>708	Argument	iLine
>709	Identifier	iLine
>710	Argument	iPixel - 0.5
>711	AdditiveExpression	iPixel - 0.5
>712	PrimaryExpression	0.5
>713	Identifier	iPixel
>714	Argument	dfLeft
>715	Identifier	dfLeft
>716	Argument	iLine - 0.5
>717	AdditiveExpression	iLine - 0.5
>718	PrimaryExpression	0.5
>719	Identifier	iLine
>720	Argument	iPixel - 0.5
>721	AdditiveExpression	iPixel - 0.5
>722	PrimaryExpression	0.5
>723	Identifier	iPixel
>724	Argument	dfUpLeft
>725	Identifier	dfUpLeft
>726	Callee	ProcessRect
>727	Identifier	ProcessRect
>728	Identifier	eErr
>729	Condition	 
>730	AndExpression	dfUpLeft != dfNoDataValue && iPixel > 0 && iLine > 0
>731	AndExpression	iPixel > 0 && iLine > 0
>732	RelationalExpression	iLine > 0
>733	PrimaryExpression	0
>734	Identifier	iLine
>735	RelationalExpression	iPixel > 0
>736	PrimaryExpression	0
>737	Identifier	iPixel
>738	EqualityExpression	dfUpLeft != dfNoDataValue
>739	Identifier	dfNoDataValue
>740	Identifier	dfUpLeft
>741	IdentifierDeclStatement	 
>742	IdentifierDecl	eErr = CE_None
>743	AssignmentExpr	eErr = CE_None
>744	Identifier	CE_None
>745	Identifier	CE_None
>746	Identifier	eErr
>747	IdentifierDeclType	CPLErr
>748	IfStatement	if ( dfLoRight != dfNoDataValue )
>749	ElseStatement	else
>750	CompoundStatement	 
>751	ExpressionStatement	 
>752	AssignmentExpr	dfRight = dfUpRight
>753	Identifier	dfUpRight
>754	Identifier	dfRight
>755	ExpressionStatement	 
>756	ExpressionStatement	 
>757	AssignmentExpr	dfBottom = dfLoLeft
>758	Identifier	dfLoLeft
>759	Identifier	dfBottom
>760	CompoundStatement	 
>761	IfStatement	if ( dfLoLeft != dfNoDataValue )
>762	ElseStatement	else
>763	ExpressionStatement	 
>764	AssignmentExpr	dfBottom = dfLoRight
>765	Identifier	dfLoRight
>766	Identifier	dfBottom
>767	ExpressionStatement	 
>768	AssignmentExpr	dfBottom = ( dfLoRight + dfLoLeft ) / 2.0
>769	MultiplicativeExpression	( dfLoRight + dfLoLeft ) / 2.0
>770	PrimaryExpression	2.0
>771	AdditiveExpression	dfLoRight + dfLoLeft
>772	Identifier	dfLoLeft
>773	Identifier	dfLoRight
>774	Identifier	dfBottom
>775	Condition	 
>776	EqualityExpression	dfLoLeft != dfNoDataValue
>777	Identifier	dfNoDataValue
>778	Identifier	dfLoLeft
>779	IfStatement	if ( dfUpRight != dfNoDataValue )
>780	ElseStatement	else
>781	ExpressionStatement	 
>782	AssignmentExpr	dfRight = dfLoRight
>783	Identifier	dfLoRight
>784	Identifier	dfRight
>785	ExpressionStatement	 
>786	AssignmentExpr	dfRight = ( dfLoRight + dfUpRight ) / 2.0
>787	MultiplicativeExpression	( dfLoRight + dfUpRight ) / 2.0
>788	PrimaryExpression	2.0
>789	AdditiveExpression	dfLoRight + dfUpRight
>790	Identifier	dfUpRight
>791	Identifier	dfLoRight
>792	Identifier	dfRight
>793	Condition	 
>794	EqualityExpression	dfUpRight != dfNoDataValue
>795	Identifier	dfNoDataValue
>796	Identifier	dfUpRight
>797	Condition	 
>798	EqualityExpression	dfLoRight != dfNoDataValue
>799	Identifier	dfNoDataValue
>800	Identifier	dfLoRight
>801	IfStatement	if ( dfUpLeft != dfNoDataValue )
>802	ElseStatement	else
>803	CompoundStatement	 
>804	ExpressionStatement	 
>805	AssignmentExpr	dfLeft = dfLoLeft
>806	Identifier	dfLoLeft
>807	Identifier	dfLeft
>808	ExpressionStatement	 
>809	AssignmentExpr	dfTop = dfUpRight
>810	Identifier	dfUpRight
>811	Identifier	dfTop
>812	CompoundStatement	 
>813	IfStatement	if ( dfLoLeft != dfNoDataValue )
>814	ElseStatement	else
>815	ExpressionStatement	 
>816	AssignmentExpr	dfLeft = dfUpLeft
>817	Identifier	dfUpLeft
>818	Identifier	dfLeft
>819	ExpressionStatement	 
>820	AssignmentExpr	dfLeft = ( dfUpLeft + dfLoLeft ) / 2.0
>821	MultiplicativeExpression	( dfUpLeft + dfLoLeft ) / 2.0
>822	PrimaryExpression	2.0
>823	AdditiveExpression	dfUpLeft + dfLoLeft
>824	Identifier	dfLoLeft
>825	Identifier	dfUpLeft
>826	Identifier	dfLeft
>827	Condition	 
>828	EqualityExpression	dfLoLeft != dfNoDataValue
>829	Identifier	dfNoDataValue
>830	Identifier	dfLoLeft
>831	IfStatement	if ( dfUpRight != dfNoDataValue )
>832	ElseStatement	else
>833	ExpressionStatement	 
>834	AssignmentExpr	dfTop = dfUpLeft
>835	Identifier	dfUpLeft
>836	Identifier	dfTop
>837	ExpressionStatement	 
>838	AssignmentExpr	dfTop = ( dfUpLeft + dfUpRight ) / 2.0
>839	MultiplicativeExpression	( dfUpLeft + dfUpRight ) / 2.0
>840	PrimaryExpression	2.0
>841	AdditiveExpression	dfUpLeft + dfUpRight
>842	Identifier	dfUpRight
>843	Identifier	dfUpLeft
>844	Identifier	dfTop
>845	Condition	 
>846	EqualityExpression	dfUpRight != dfNoDataValue
>847	Identifier	dfNoDataValue
>848	Identifier	dfUpRight
>849	Condition	 
>850	EqualityExpression	dfUpLeft != dfNoDataValue
>851	Identifier	dfNoDataValue
>852	Identifier	dfUpLeft
>853	ExpressionStatement	 
>854	AssignmentExpr	dfCenter = dfASum / nGoodCount
>855	MultiplicativeExpression	dfASum / nGoodCount
>856	Identifier	nGoodCount
>857	Identifier	dfASum
>858	Identifier	dfCenter
>859	IfStatement	if ( nGoodCount == 0.0 )
>860	ReturnStatement	 
>861	Identifier	CE_None
>862	Condition	 
>863	EqualityExpression	nGoodCount == 0.0
>864	PrimaryExpression	0.0
>865	Identifier	nGoodCount
>866	IfStatement	if ( dfUpRight != dfNoDataValue )
>867	CompoundStatement	 
>868	ExpressionStatement	 
>869	IncDecOp	nGoodCount ++
>870	IncDec	++
>871	Identifier	nGoodCount
>872	ExpressionStatement	 
>873	AssignmentExpr	dfASum += dfUpRight
>874	Identifier	dfUpRight
>875	Identifier	dfASum
>876	Condition	 
>877	EqualityExpression	dfUpRight != dfNoDataValue
>878	Identifier	dfNoDataValue
>879	Identifier	dfUpRight
>880	IfStatement	if ( dfLoRight != dfNoDataValue )
>881	CompoundStatement	 
>882	ExpressionStatement	 
>883	IncDecOp	nGoodCount ++
>884	IncDec	++
>885	Identifier	nGoodCount
>886	ExpressionStatement	 
>887	AssignmentExpr	dfASum += dfLoRight
>888	Identifier	dfLoRight
>889	Identifier	dfASum
>890	Condition	 
>891	EqualityExpression	dfLoRight != dfNoDataValue
>892	Identifier	dfNoDataValue
>893	Identifier	dfLoRight
>894	IfStatement	if ( dfLoLeft != dfNoDataValue )
>895	CompoundStatement	 
>896	ExpressionStatement	 
>897	IncDecOp	nGoodCount ++
>898	IncDec	++
>899	Identifier	nGoodCount
>900	ExpressionStatement	 
>901	AssignmentExpr	dfASum += dfLoLeft
>902	Identifier	dfLoLeft
>903	Identifier	dfASum
>904	Condition	 
>905	EqualityExpression	dfLoLeft != dfNoDataValue
>906	Identifier	dfNoDataValue
>907	Identifier	dfLoLeft
>908	IfStatement	if ( dfUpLeft != dfNoDataValue )
>909	CompoundStatement	 
>910	ExpressionStatement	 
>911	IncDecOp	nGoodCount ++
>912	IncDec	++
>913	Identifier	nGoodCount
>914	ExpressionStatement	 
>915	AssignmentExpr	dfASum += dfUpLeft
>916	Identifier	dfUpLeft
>917	Identifier	dfASum
>918	Condition	 
>919	EqualityExpression	dfUpLeft != dfNoDataValue
>920	Identifier	dfNoDataValue
>921	Identifier	dfUpLeft
>922	IdentifierDeclStatement	 
>923	IdentifierDecl	dfBottom = 0.0
>924	AssignmentExpr	dfBottom = 0.0
>925	PrimaryExpression	0.0
>926	Identifier	dfBottom
>927	Identifier	dfBottom
>928	IdentifierDeclType	double
>929	IdentifierDecl	dfLeft = 0.0
>930	AssignmentExpr	dfLeft = 0.0
>931	PrimaryExpression	0.0
>932	Identifier	dfLeft
>933	Identifier	dfLeft
>934	IdentifierDeclType	double
>935	IdentifierDecl	dfRight = 0.0
>936	AssignmentExpr	dfRight = 0.0
>937	PrimaryExpression	0.0
>938	Identifier	dfRight
>939	Identifier	dfRight
>940	IdentifierDeclType	double
>941	IdentifierDecl	dfTop = 0.0
>942	AssignmentExpr	dfTop = 0.0
>943	PrimaryExpression	0.0
>944	Identifier	dfTop
>945	Identifier	dfTop
>946	IdentifierDeclType	double
>947	IdentifierDecl	dfCenter
>948	Identifier	dfCenter
>949	IdentifierDeclType	double
>950	IdentifierDeclStatement	 
>951	IdentifierDecl	dfASum = 0.0
>952	AssignmentExpr	dfASum = 0.0
>953	PrimaryExpression	0.0
>954	Identifier	dfASum
>955	Identifier	dfASum
>956	IdentifierDeclType	double
>957	IdentifierDeclStatement	 
>958	IdentifierDecl	nGoodCount = 0
>959	AssignmentExpr	nGoodCount = 0
>960	PrimaryExpression	0
>961	Identifier	nGoodCount
>962	Identifier	nGoodCount
>963	IdentifierDeclType	int
>964	IfStatement	if ( iPixel > 0 && iPixel < nWidth && iLine > 0 && iLine < nHeight && ! bSubdivide )
>965	CompoundStatement	 
>966	ReturnStatement	 
>967	CallExpression	ProcessRect ( dfUpLeft , iPixel - 0.5 , iLine - 0.5 , dfLoLeft , iPixel - 0.5 , iLine + 0.5 , dfLoRight , iPixel + \
>968	ArgumentList	dfUpLeft
>969	Argument	iLine - 0.5
>970	AdditiveExpression	iLine - 0.5
>971	PrimaryExpression	0.5
>972	Identifier	iLine
>973	Argument	iPixel + 0.5
>974	AdditiveExpression	iPixel + 0.5
>975	PrimaryExpression	0.5
>976	Identifier	iPixel
>977	Argument	dfUpRight
>978	Identifier	dfUpRight
>979	Argument	iLine + 0.5
>980	AdditiveExpression	iLine + 0.5
>981	PrimaryExpression	0.5
>982	Identifier	iLine
>983	Argument	iPixel + 0.5
>984	AdditiveExpression	iPixel + 0.5
>985	PrimaryExpression	0.5
>986	Identifier	iPixel
>987	Argument	dfLoRight
>988	Identifier	dfLoRight
>989	Argument	iLine + 0.5
>990	AdditiveExpression	iLine + 0.5
>991	PrimaryExpression	0.5
>992	Identifier	iLine
>993	Argument	iPixel - 0.5
>994	AdditiveExpression	iPixel - 0.5
>995	PrimaryExpression	0.5
>996	Identifier	iPixel
>997	Argument	dfLoLeft
>998	Identifier	dfLoLeft
>999	Argument	iLine - 0.5
>1000	AdditiveExpression	iLine - 0.5
>1001	PrimaryExpression	0.5
>1002	Identifier	iLine
>1003	Argument	iPixel - 0.5
>1004	AdditiveExpression	iPixel - 0.5
>1005	PrimaryExpression	0.5
>1006	Identifier	iPixel
>1007	Argument	dfUpLeft
>1008	Identifier	dfUpLeft
>1009	Callee	ProcessRect
>1010	Identifier	ProcessRect
>1011	Condition	 
>1012	AndExpression	iPixel > 0 && iPixel < nWidth && iLine > 0 && iLine < nHeight && ! bSubdivide
>1013	AndExpression	iPixel < nWidth && iLine > 0 && iLine < nHeight && ! bSubdivide
>1014	AndExpression	iLine > 0 && iLine < nHeight && ! bSubdivide
>1015	AndExpression	iLine < nHeight && ! bSubdivide
>1016	UnaryOp	! bSubdivide
>1017	Identifier	bSubdivide
>1018	UnaryOperator	!
>1019	RelationalExpression	iLine < nHeight
>1020	Identifier	nHeight
>1021	Identifier	iLine
>1022	RelationalExpression	iLine > 0
>1023	PrimaryExpression	0
>1024	Identifier	iLine
>1025	RelationalExpression	iPixel < nWidth
>1026	Identifier	nWidth
>1027	Identifier	iPixel
>1028	RelationalExpression	iPixel > 0
>1029	PrimaryExpression	0
>1030	Identifier	iPixel
>1031	IfStatement	if ( bNoDataActive && ( dfUpLeft == dfNoDataValue || dfLoLeft == dfNoDataValue || dfLoRight == dfNoDataValue || \
>1032	ExpressionStatement	 
>1033	AssignmentExpr	bSubdivide = TRUE
>1034	Identifier	TRUE
>1035	Identifier	bSubdivide
>1036	Condition	 
>1037	AndExpression	bNoDataActive && ( dfUpLeft == dfNoDataValue || dfLoLeft == dfNoDataValue || dfLoRight == dfNoDataValue || \
>1038	OrExpression	dfUpLeft == dfNoDataValue || dfLoLeft == dfNoDataValue || dfLoRight == dfNoDataValue || dfUpRight == \
>1039	OrExpression	dfLoLeft == dfNoDataValue || dfLoRight == dfNoDataValue || dfUpRight == dfNoDataValue
>1040	OrExpression	dfLoRight == dfNoDataValue || dfUpRight == dfNoDataValue
>1041	EqualityExpression	dfUpRight == dfNoDataValue
>1042	Identifier	dfNoDataValue
>1043	Identifier	dfUpRight
>1044	EqualityExpression	dfLoRight == dfNoDataValue
>1045	Identifier	dfNoDataValue
>1046	Identifier	dfLoRight
>1047	EqualityExpression	dfLoLeft == dfNoDataValue
>1048	Identifier	dfNoDataValue
>1049	Identifier	dfLoLeft
>1050	EqualityExpression	dfUpLeft == dfNoDataValue
>1051	Identifier	dfNoDataValue
>1052	Identifier	dfUpLeft
>1053	Identifier	bNoDataActive
>1054	ExpressionStatement	 
>1055	AssignmentExpr	dfLoRight = padfThisLine [ MIN ( nWidth - 1 , iPixel ) ]
>1056	ArrayIndexing	padfThisLine [ MIN ( nWidth - 1 , iPixel ) ]
>1057	CallExpression	MIN ( nWidth - 1 , iPixel )
>1058	ArgumentList	nWidth - 1
>1059	Argument	iPixel
>1060	Identifier	iPixel
>1061	Argument	nWidth - 1
>1062	AdditiveExpression	nWidth - 1
>1063	PrimaryExpression	1
>1064	Identifier	nWidth
>1065	Callee	MIN
>1066	Identifier	MIN
>1067	Identifier	padfThisLine
>1068	Identifier	dfLoRight
>1069	ExpressionStatement	 
>1070	AssignmentExpr	dfLoLeft = padfThisLine [ MAX ( 0 , iPixel - 1 ) ]
>1071	ArrayIndexing	padfThisLine [ MAX ( 0 , iPixel - 1 ) ]
>1072	CallExpression	MAX ( 0 , iPixel - 1 )
>1073	ArgumentList	0
>1074	Argument	iPixel - 1
>1075	AdditiveExpression	iPixel - 1
>1076	PrimaryExpression	1
>1077	Identifier	iPixel
>1078	Argument	0
>1079	PrimaryExpression	0
>1080	Callee	MAX
>1081	Identifier	MAX
>1082	Identifier	padfThisLine
>1083	Identifier	dfLoLeft
>1084	ExpressionStatement	 
>1085	AssignmentExpr	dfUpRight = padfLastLine [ MIN ( nWidth - 1 , iPixel ) ]
>1086	ArrayIndexing	padfLastLine [ MIN ( nWidth - 1 , iPixel ) ]
>1087	CallExpression	MIN ( nWidth - 1 , iPixel )
>1088	ArgumentList	nWidth - 1
>1089	Argument	iPixel
>1090	Identifier	iPixel
>1091	Argument	nWidth - 1
>1092	AdditiveExpression	nWidth - 1
>1093	PrimaryExpression	1
>1094	Identifier	nWidth
>1095	Callee	MIN
>1096	Identifier	MIN
>1097	Identifier	padfLastLine
>1098	Identifier	dfUpRight
>1099	ExpressionStatement	 
>1100	AssignmentExpr	dfUpLeft = padfLastLine [ MAX ( 0 , iPixel - 1 ) ]
>1101	ArrayIndexing	padfLastLine [ MAX ( 0 , iPixel - 1 ) ]
>1102	CallExpression	MAX ( 0 , iPixel - 1 )
>1103	ArgumentList	0
>1104	Argument	iPixel - 1
>1105	AdditiveExpression	iPixel - 1
>1106	PrimaryExpression	1
>1107	Identifier	iPixel
>1108	Argument	0
>1109	PrimaryExpression	0
>1110	Callee	MAX
>1111	Identifier	MAX
>1112	Identifier	padfLastLine
>1113	Identifier	dfUpLeft
>1114	IdentifierDeclStatement	 
>1115	IdentifierDecl	bSubdivide = FALSE
>1116	AssignmentExpr	bSubdivide = FALSE
>1117	Identifier	FALSE
>1118	Identifier	FALSE
>1119	Identifier	bSubdivide
>1120	IdentifierDeclType	int
>1121	IdentifierDeclStatement	 
>1122	IdentifierDecl	dfLoRight
>1123	Identifier	dfLoRight
>1124	IdentifierDeclType	double
>1125	IdentifierDecl	dfLoLeft
>1126	Identifier	dfLoLeft
>1127	IdentifierDeclType	double
>1128	IdentifierDecl	dfUpRight
>1129	Identifier	dfUpRight
>1130	IdentifierDeclType	double
>1131	IdentifierDecl	dfUpLeft
>1132	Identifier	dfUpLeft
>1133	IdentifierDeclType	double
>1168	FunctionDef	GDALContourGenerator 
>1169	ParameterList	double dfUpLeft , double dfUpLeftX , double dfUpLeftY , double dfLoLeft , double dfLoLeftX , double dfLoLeftY , \
>1170	Parameter	 
>1171	Identifier	dfUpRightY
>1172	ParameterType	double
>1173	Parameter	 
>1174	Identifier	dfUpRightX
>1175	ParameterType	double
>1176	Parameter	 
>1177	Identifier	dfUpRight
>1178	ParameterType	double
>1179	Parameter	 
>1180	Identifier	dfLoRightY
>1181	ParameterType	double
>1182	Parameter	 
>1183	Identifier	dfLoRightX
>1184	ParameterType	double
>1185	Parameter	 
>1186	Identifier	dfLoRight
>1187	ParameterType	double
>1188	Parameter	 
>1189	Identifier	dfLoLeftY
>1190	ParameterType	double
>1191	Parameter	 
>1192	Identifier	dfLoLeftX
>1193	ParameterType	double
>1194	Parameter	 
>1195	Identifier	dfLoLeft
>1196	ParameterType	double
>1197	Parameter	 
>1198	Identifier	dfUpLeftY
>1199	ParameterType	double
>1200	Parameter	 
>1201	Identifier	dfUpLeftX
>1202	ParameterType	double
>1203	Parameter	 
>1204	Identifier	dfUpLeft
>1205	ParameterType	double
>1206	ReturnType	CPLErr
>1207	CompoundStatement	 
>1208	ReturnStatement	 
>1209	Identifier	CE_None
>1210	ForStatement	for ( iLevel = iStartLevel ; iLevel <= iEndLevel ; iLevel ++ )
>1211	CompoundStatement	 
>1212	IfStatement	if ( nPoints == 4 )
>1213	CompoundStatement	 
>1214	IfStatement	if ( ! ( dfUpRight == dfLevel && dfUpLeft == dfLevel ) )
>1215	CompoundStatement	 
>1216	IfStatement	if ( eErr != CE_None )
>1217	ReturnStatement	 
>1218	Identifier	eErr
>1219	Condition	 
>1220	EqualityExpression	eErr != CE_None
>1221	Identifier	CE_None
>1222	Identifier	eErr
>1223	ExpressionStatement	 
>1224	AssignmentExpr	eErr = AddSegment ( dfLevel , adfX [ 2 ] , adfY [ 2 ] , adfX [ 3 ] , adfY [ 3 ] , ( dfLoRight > dfUpRight ) )
>1225	CallExpression	AddSegment ( dfLevel , adfX [ 2 ] , adfY [ 2 ] , adfX [ 3 ] , adfY [ 3 ] , ( dfLoRight > dfUpRight ) )
>1226	ArgumentList	dfLevel
>1227	Argument	dfLoRight > dfUpRight
>1228	RelationalExpression	dfLoRight > dfUpRight
>1229	Identifier	dfUpRight
>1230	Identifier	dfLoRight
>1231	Argument	adfY [ 3 ]
>1232	ArrayIndexing	adfY [ 3 ]
>1233	PrimaryExpression	3
>1234	Identifier	adfY
>1235	Argument	adfX [ 3 ]
>1236	ArrayIndexing	adfX [ 3 ]
>1237	PrimaryExpression	3
>1238	Identifier	adfX
>1239	Argument	adfY [ 2 ]
>1240	ArrayIndexing	adfY [ 2 ]
>1241	PrimaryExpression	2
>1242	Identifier	adfY
>1243	Argument	adfX [ 2 ]
>1244	ArrayIndexing	adfX [ 2 ]
>1245	PrimaryExpression	2
>1246	Identifier	adfX
>1247	Argument	dfLevel
>1248	Identifier	dfLevel
>1249	Callee	AddSegment
>1250	Identifier	AddSegment
>1251	Identifier	eErr
>1252	Condition	 
>1253	UnaryOp	! ( dfUpRight == dfLevel && dfUpLeft == dfLevel )
>1254	AndExpression	dfUpRight == dfLevel && dfUpLeft == dfLevel
>1255	EqualityExpression	dfUpLeft == dfLevel
>1256	Identifier	dfLevel
>1257	Identifier	dfUpLeft
>1258	EqualityExpression	dfUpRight == dfLevel
>1259	Identifier	dfLevel
>1260	Identifier	dfUpRight
>1261	UnaryOperator	!
>1262	Condition	 
>1263	EqualityExpression	nPoints == 4
>1264	PrimaryExpression	4
>1265	Identifier	nPoints
>1266	IfStatement	if ( nPoints >= 2 )
>1267	CompoundStatement	 
>1268	IfStatement	if ( eErr != CE_None )
>1269	ReturnStatement	 
>1270	Identifier	eErr
>1271	Condition	 
>1272	EqualityExpression	eErr != CE_None
>1273	Identifier	CE_None
>1274	Identifier	eErr
>1275	IfStatement	if ( nPoints1 == 1 && nPoints2 == 2 )
>1276	ElseStatement	else
>1277	IfStatement	if ( nPoints1 == 1 && nPoints3 == 2 )
>1278	ElseStatement	else
>1279	IfStatement	if ( nPoints1 == 1 && nPoints == 2 )
>1280	ElseStatement	else
>1281	IfStatement	if ( nPoints2 == 1 && nPoints3 == 2 )
>1282	ElseStatement	else
>1283	IfStatement	if ( nPoints2 == 1 && nPoints == 2 )
>1284	ElseStatement	else
>1285	IfStatement	if ( nPoints3 == 1 && nPoints == 2 )
>1286	ElseStatement	else
>1287	CompoundStatement	 
>1288	ExpressionStatement	 
>1289	CallExpression	CPLDebug ( \"CONTOUR\" , \"Contour state not implemented!\" )
>1290	ArgumentList	\"CONTOUR\"
>1291	Argument	\"Contour state not implemented!\"
>1292	PrimaryExpression	\"Contour state not implemented!\"
>1293	Argument	\"CONTOUR\"
>1294	PrimaryExpression	\"CONTOUR\"
>1295	Callee	CPLDebug
>1296	Identifier	CPLDebug
>1297	CompoundStatement	 
>1298	IfStatement	if ( ! ( dfUpRight == dfLevel && dfUpLeft == dfLevel ) )
>1299	ExpressionStatement	 
>1300	AssignmentExpr	eErr = AddSegment ( dfLevel , adfX [ 0 ] , adfY [ 0 ] , adfX [ 1 ] , adfY [ 1 ] , dfLoLeft > dfUpRight )
>1301	CallExpression	AddSegment ( dfLevel , adfX [ 0 ] , adfY [ 0 ] , adfX [ 1 ] , adfY [ 1 ] , dfLoLeft > dfUpRight )
>1302	ArgumentList	dfLevel
>1303	Argument	dfLoLeft > dfUpRight
>1304	RelationalExpression	dfLoLeft > dfUpRight
>1305	Identifier	dfUpRight
>1306	Identifier	dfLoLeft
>1307	Argument	adfY [ 1 ]
>1308	ArrayIndexing	adfY [ 1 ]
>1309	PrimaryExpression	1
>1310	Identifier	adfY
>1311	Argument	adfX [ 1 ]
>1312	ArrayIndexing	adfX [ 1 ]
>1313	PrimaryExpression	1
>1314	Identifier	adfX
>1315	Argument	adfY [ 0 ]
>1316	ArrayIndexing	adfY [ 0 ]
>1317	PrimaryExpression	0
>1318	Identifier	adfY
>1319	Argument	adfX [ 0 ]
>1320	ArrayIndexing	adfX [ 0 ]
>1321	PrimaryExpression	0
>1322	Identifier	adfX
>1323	Argument	dfLevel
>1324	Identifier	dfLevel
>1325	Callee	AddSegment
>1326	Identifier	AddSegment
>1327	Identifier	eErr
>1328	Condition	 
>1329	UnaryOp	! ( dfUpRight == dfLevel && dfUpLeft == dfLevel )
>1330	AndExpression	dfUpRight == dfLevel && dfUpLeft == dfLevel
>1331	EqualityExpression	dfUpLeft == dfLevel
>1332	Identifier	dfLevel
>1333	Identifier	dfUpLeft
>1334	EqualityExpression	dfUpRight == dfLevel
>1335	Identifier	dfLevel
>1336	Identifier	dfUpRight
>1337	UnaryOperator	!
>1338	Condition	 
>1339	AndExpression	nPoints3 == 1 && nPoints == 2
>1340	EqualityExpression	nPoints == 2
>1341	PrimaryExpression	2
>1342	Identifier	nPoints
>1343	EqualityExpression	nPoints3 == 1
>1344	PrimaryExpression	1
>1345	Identifier	nPoints3
>1346	CompoundStatement	 
>1347	ExpressionStatement	 
>1348	AssignmentExpr	eErr = AddSegment ( dfLevel , adfX [ 0 ] , adfY [ 0 ] , adfX [ 1 ] , adfY [ 1 ] , dfLoLeft > dfUpRight )
>1349	CallExpression	AddSegment ( dfLevel , adfX [ 0 ] , adfY [ 0 ] , adfX [ 1 ] , adfY [ 1 ] , dfLoLeft > dfUpRight )
>1350	ArgumentList	dfLevel
>1351	Argument	dfLoLeft > dfUpRight
>1352	RelationalExpression	dfLoLeft > dfUpRight
>1353	Identifier	dfUpRight
>1354	Identifier	dfLoLeft
>1355	Argument	adfY [ 1 ]
>1356	ArrayIndexing	adfY [ 1 ]
>1357	PrimaryExpression	1
>1358	Identifier	adfY
>1359	Argument	adfX [ 1 ]
>1360	ArrayIndexing	adfX [ 1 ]
>1361	PrimaryExpression	1
>1362	Identifier	adfX
>1363	Argument	adfY [ 0 ]
>1364	ArrayIndexing	adfY [ 0 ]
>1365	PrimaryExpression	0
>1366	Identifier	adfY
>1367	Argument	adfX [ 0 ]
>1368	ArrayIndexing	adfX [ 0 ]
>1369	PrimaryExpression	0
>1370	Identifier	adfX
>1371	Argument	dfLevel
>1372	Identifier	dfLevel
>1373	Callee	AddSegment
>1374	Identifier	AddSegment
>1375	Identifier	eErr
>1376	Condition	 
>1377	AndExpression	nPoints2 == 1 && nPoints == 2
>1378	EqualityExpression	nPoints == 2
>1379	PrimaryExpression	2
>1380	Identifier	nPoints
>1381	EqualityExpression	nPoints2 == 1
>1382	PrimaryExpression	1
>1383	Identifier	nPoints2
>1384	CompoundStatement	 
>1385	ExpressionStatement	 
>1386	AssignmentExpr	eErr = AddSegment ( dfLevel , adfX [ 0 ] , adfY [ 0 ] , adfX [ 1 ] , adfY [ 1 ] , dfUpLeft > dfLoRight )
>1387	CallExpression	AddSegment ( dfLevel , adfX [ 0 ] , adfY [ 0 ] , adfX [ 1 ] , adfY [ 1 ] , dfUpLeft > dfLoRight )
>1388	ArgumentList	dfLevel
>1389	Argument	dfUpLeft > dfLoRight
>1390	RelationalExpression	dfUpLeft > dfLoRight
>1391	Identifier	dfLoRight
>1392	Identifier	dfUpLeft
>1393	Argument	adfY [ 1 ]
>1394	ArrayIndexing	adfY [ 1 ]
>1395	PrimaryExpression	1
>1396	Identifier	adfY
>1397	Argument	adfX [ 1 ]
>1398	ArrayIndexing	adfX [ 1 ]
>1399	PrimaryExpression	1
>1400	Identifier	adfX
>1401	Argument	adfY [ 0 ]
>1402	ArrayIndexing	adfY [ 0 ]
>1403	PrimaryExpression	0
>1404	Identifier	adfY
>1405	Argument	adfX [ 0 ]
>1406	ArrayIndexing	adfX [ 0 ]
>1407	PrimaryExpression	0
>1408	Identifier	adfX
>1409	Argument	dfLevel
>1410	Identifier	dfLevel
>1411	Callee	AddSegment
>1412	Identifier	AddSegment
>1413	Identifier	eErr
>1414	Condition	 
>1415	AndExpression	nPoints2 == 1 && nPoints3 == 2
>1416	EqualityExpression	nPoints3 == 2
>1417	PrimaryExpression	2
>1418	Identifier	nPoints3
>1419	EqualityExpression	nPoints2 == 1
>1420	PrimaryExpression	1
>1421	Identifier	nPoints2
>1422	CompoundStatement	 
>1423	IfStatement	if ( ! ( dfUpLeft == dfLevel && dfLoLeft == dfLevel ) )
>1424	ExpressionStatement	 
>1425	AssignmentExpr	eErr = AddSegment ( dfLevel , adfX [ 0 ] , adfY [ 0 ] , adfX [ 1 ] , adfY [ 1 ] , dfUpLeft > dfLoRight )
>1426	CallExpression	AddSegment ( dfLevel , adfX [ 0 ] , adfY [ 0 ] , adfX [ 1 ] , adfY [ 1 ] , dfUpLeft > dfLoRight )
>1427	ArgumentList	dfLevel
>1428	Argument	dfUpLeft > dfLoRight
>1429	RelationalExpression	dfUpLeft > dfLoRight
>1430	Identifier	dfLoRight
>1431	Identifier	dfUpLeft
>1432	Argument	adfY [ 1 ]
>1433	ArrayIndexing	adfY [ 1 ]
>1434	PrimaryExpression	1
>1435	Identifier	adfY
>1436	Argument	adfX [ 1 ]
>1437	ArrayIndexing	adfX [ 1 ]
>1438	PrimaryExpression	1
>1439	Identifier	adfX
>1440	Argument	adfY [ 0 ]
>1441	ArrayIndexing	adfY [ 0 ]
>1442	PrimaryExpression	0
>1443	Identifier	adfY
>1444	Argument	adfX [ 0 ]
>1445	ArrayIndexing	adfX [ 0 ]
>1446	PrimaryExpression	0
>1447	Identifier	adfX
>1448	Argument	dfLevel
>1449	Identifier	dfLevel
>1450	Callee	AddSegment
>1451	Identifier	AddSegment
>1452	Identifier	eErr
>1453	Condition	 
>1454	UnaryOp	! ( dfUpLeft == dfLevel && dfLoLeft == dfLevel )
>1455	AndExpression	dfUpLeft == dfLevel && dfLoLeft == dfLevel
>1456	EqualityExpression	dfLoLeft == dfLevel
>1457	Identifier	dfLevel
>1458	Identifier	dfLoLeft
>1459	EqualityExpression	dfUpLeft == dfLevel
>1460	Identifier	dfLevel
>1461	Identifier	dfUpLeft
>1462	UnaryOperator	!
>1463	Condition	 
>1464	AndExpression	nPoints1 == 1 && nPoints == 2
>1465	EqualityExpression	nPoints == 2
>1466	PrimaryExpression	2
>1467	Identifier	nPoints
>1468	EqualityExpression	nPoints1 == 1
>1469	PrimaryExpression	1
>1470	Identifier	nPoints1
>1471	CompoundStatement	 
>1472	ExpressionStatement	 
>1473	AssignmentExpr	eErr = AddSegment ( dfLevel , adfX [ 0 ] , adfY [ 0 ] , adfX [ 1 ] , adfY [ 1 ] , dfUpLeft > dfLoRight )
>1474	CallExpression	AddSegment ( dfLevel , adfX [ 0 ] , adfY [ 0 ] , adfX [ 1 ] , adfY [ 1 ] , dfUpLeft > dfLoRight )
>1475	ArgumentList	dfLevel
>1476	Argument	dfUpLeft > dfLoRight
>1477	RelationalExpression	dfUpLeft > dfLoRight
>1478	Identifier	dfLoRight
>1479	Identifier	dfUpLeft
>1480	Argument	adfY [ 1 ]
>1481	ArrayIndexing	adfY [ 1 ]
>1482	PrimaryExpression	1
>1483	Identifier	adfY
>1484	Argument	adfX [ 1 ]
>1485	ArrayIndexing	adfX [ 1 ]
>1486	PrimaryExpression	1
>1487	Identifier	adfX
>1488	Argument	adfY [ 0 ]
>1489	ArrayIndexing	adfY [ 0 ]
>1490	PrimaryExpression	0
>1491	Identifier	adfY
>1492	Argument	adfX [ 0 ]
>1493	ArrayIndexing	adfX [ 0 ]
>1494	PrimaryExpression	0
>1495	Identifier	adfX
>1496	Argument	dfLevel
>1497	Identifier	dfLevel
>1498	Callee	AddSegment
>1499	Identifier	AddSegment
>1500	Identifier	eErr
>1501	Condition	 
>1502	AndExpression	nPoints1 == 1 && nPoints3 == 2
>1503	EqualityExpression	nPoints3 == 2
>1504	PrimaryExpression	2
>1505	Identifier	nPoints3
>1506	EqualityExpression	nPoints1 == 1
>1507	PrimaryExpression	1
>1508	Identifier	nPoints1
>1509	CompoundStatement	 
>1510	ExpressionStatement	 
>1511	AssignmentExpr	eErr = AddSegment ( dfLevel , adfX [ 0 ] , adfY [ 0 ] , adfX [ 1 ] , adfY [ 1 ] , dfUpRight > dfLoLeft )
>1512	CallExpression	AddSegment ( dfLevel , adfX [ 0 ] , adfY [ 0 ] , adfX [ 1 ] , adfY [ 1 ] , dfUpRight > dfLoLeft )
>1513	ArgumentList	dfLevel
>1514	Argument	dfUpRight > dfLoLeft
>1515	RelationalExpression	dfUpRight > dfLoLeft
>1516	Identifier	dfLoLeft
>1517	Identifier	dfUpRight
>1518	Argument	adfY [ 1 ]
>1519	ArrayIndexing	adfY [ 1 ]
>1520	PrimaryExpression	1
>1521	Identifier	adfY
>1522	Argument	adfX [ 1 ]
>1523	ArrayIndexing	adfX [ 1 ]
>1524	PrimaryExpression	1
>1525	Identifier	adfX
>1526	Argument	adfY [ 0 ]
>1527	ArrayIndexing	adfY [ 0 ]
>1528	PrimaryExpression	0
>1529	Identifier	adfY
>1530	Argument	adfX [ 0 ]
>1531	ArrayIndexing	adfX [ 0 ]
>1532	PrimaryExpression	0
>1533	Identifier	adfX
>1534	Argument	dfLevel
>1535	Identifier	dfLevel
>1536	Callee	AddSegment
>1537	Identifier	AddSegment
>1538	Identifier	eErr
>1539	Condition	 
>1540	AndExpression	nPoints1 == 1 && nPoints2 == 2
>1541	EqualityExpression	nPoints2 == 2
>1542	PrimaryExpression	2
>1543	Identifier	nPoints2
>1544	EqualityExpression	nPoints1 == 1
>1545	PrimaryExpression	1
>1546	Identifier	nPoints1
>1547	Condition	 
>1548	RelationalExpression	nPoints >= 2
>1549	PrimaryExpression	2
>1550	Identifier	nPoints
>1551	IfStatement	if ( nPoints == 1 || nPoints == 3 )
>1552	ExpressionStatement	 
>1553	CallExpression	CPLDebug ( \"CONTOUR\" , \"Got nPoints = %d\" , nPoints )
>1554	ArgumentList	\"CONTOUR\"
>1555	Argument	nPoints
>1556	Identifier	nPoints
>1557	Argument	\"Got nPoints = %d\"
>1558	PrimaryExpression	\"Got nPoints = %d\"
>1559	Argument	\"CONTOUR\"
>1560	PrimaryExpression	\"CONTOUR\"
>1561	Callee	CPLDebug
>1562	Identifier	CPLDebug
>1563	Condition	 
>1564	OrExpression	nPoints == 1 || nPoints == 3
>1565	EqualityExpression	nPoints == 3
>1566	PrimaryExpression	3
>1567	Identifier	nPoints
>1568	EqualityExpression	nPoints == 1
>1569	PrimaryExpression	1
>1570	Identifier	nPoints
>1571	ExpressionStatement	 
>1572	CallExpression	Intersect ( dfUpRight , dfUpRightX , dfUpRightY , dfUpLeft , dfUpLeftX , dfUpLeftY , dfLoLeft , dfLevel , & nPoints , \
>1573	ArgumentList	dfUpRight
>1574	Argument	adfY
>1575	Identifier	adfY
>1576	Argument	adfX
>1577	Identifier	adfX
>1578	Argument	& nPoints
>1579	UnaryOp	& nPoints
>1580	Identifier	nPoints
>1581	UnaryOperator	&
>1582	Argument	dfLevel
>1583	Identifier	dfLevel
>1584	Argument	dfLoLeft
>1585	Identifier	dfLoLeft
>1586	Argument	dfUpLeftY
>1587	Identifier	dfUpLeftY
>1588	Argument	dfUpLeftX
>1589	Identifier	dfUpLeftX
>1590	Argument	dfUpLeft
>1591	Identifier	dfUpLeft
>1592	Argument	dfUpRightY
>1593	Identifier	dfUpRightY
>1594	Argument	dfUpRightX
>1595	Identifier	dfUpRightX
>1596	Argument	dfUpRight
>1597	Identifier	dfUpRight
>1598	Callee	Intersect
>1599	Identifier	Intersect
>1600	ExpressionStatement	 
>1601	AssignmentExpr	nPoints3 = nPoints
>1602	Identifier	nPoints
>1603	Identifier	nPoints3
>1604	ExpressionStatement	 
>1605	CallExpression	Intersect ( dfLoRight , dfLoRightX , dfLoRightY , dfUpRight , dfUpRightX , dfUpRightY , dfUpLeft , dfLevel , & nPoints , \
>1606	ArgumentList	dfLoRight
>1607	Argument	adfY
>1608	Identifier	adfY
>1609	Argument	adfX
>1610	Identifier	adfX
>1611	Argument	& nPoints
>1612	UnaryOp	& nPoints
>1613	Identifier	nPoints
>1614	UnaryOperator	&
>1615	Argument	dfLevel
>1616	Identifier	dfLevel
>1617	Argument	dfUpLeft
>1618	Identifier	dfUpLeft
>1619	Argument	dfUpRightY
>1620	Identifier	dfUpRightY
>1621	Argument	dfUpRightX
>1622	Identifier	dfUpRightX
>1623	Argument	dfUpRight
>1624	Identifier	dfUpRight
>1625	Argument	dfLoRightY
>1626	Identifier	dfLoRightY
>1627	Argument	dfLoRightX
>1628	Identifier	dfLoRightX
>1629	Argument	dfLoRight
>1630	Identifier	dfLoRight
>1631	Callee	Intersect
>1632	Identifier	Intersect
>1633	ExpressionStatement	 
>1634	AssignmentExpr	nPoints2 = nPoints
>1635	Identifier	nPoints
>1636	Identifier	nPoints2
>1637	ExpressionStatement	 
>1638	CallExpression	Intersect ( dfLoLeft , dfLoLeftX , dfLoLeftY , dfLoRight , dfLoRightX , dfLoRightY , dfUpRight , dfLevel , & nPoints , \
>1639	ArgumentList	dfLoLeft
>1640	Argument	adfY
>1641	Identifier	adfY
>1642	Argument	adfX
>1643	Identifier	adfX
>1644	Argument	& nPoints
>1645	UnaryOp	& nPoints
>1646	Identifier	nPoints
>1647	UnaryOperator	&
>1648	Argument	dfLevel
>1649	Identifier	dfLevel
>1650	Argument	dfUpRight
>1651	Identifier	dfUpRight
>1652	Argument	dfLoRightY
>1653	Identifier	dfLoRightY
>1654	Argument	dfLoRightX
>1655	Identifier	dfLoRightX
>1656	Argument	dfLoRight
>1657	Identifier	dfLoRight
>1658	Argument	dfLoLeftY
>1659	Identifier	dfLoLeftY
>1660	Argument	dfLoLeftX
>1661	Identifier	dfLoLeftX
>1662	Argument	dfLoLeft
>1663	Identifier	dfLoLeft
>1664	Callee	Intersect
>1665	Identifier	Intersect
>1666	ExpressionStatement	 
>1667	AssignmentExpr	nPoints1 = nPoints
>1668	Identifier	nPoints
>1669	Identifier	nPoints1
>1670	ExpressionStatement	 
>1671	CallExpression	Intersect ( dfUpLeft , dfUpLeftX , dfUpLeftY , dfLoLeft , dfLoLeftX , dfLoLeftY , dfLoRight , dfLevel , & nPoints , \
>1672	ArgumentList	dfUpLeft
>1673	Argument	adfY
>1674	Identifier	adfY
>1675	Argument	adfX
>1676	Identifier	adfX
>1677	Argument	& nPoints
>1678	UnaryOp	& nPoints
>1679	Identifier	nPoints
>1680	UnaryOperator	&
>1681	Argument	dfLevel
>1682	Identifier	dfLevel
>1683	Argument	dfLoRight
>1684	Identifier	dfLoRight
>1685	Argument	dfLoLeftY
>1686	Identifier	dfLoLeftY
>1687	Argument	dfLoLeftX
>1688	Identifier	dfLoLeftX
>1689	Argument	dfLoLeft
>1690	Identifier	dfLoLeft
>1691	Argument	dfUpLeftY
>1692	Identifier	dfUpLeftY
>1693	Argument	dfUpLeftX
>1694	Identifier	dfUpLeftX
>1695	Argument	dfUpLeft
>1696	Identifier	dfUpLeft
>1697	Callee	Intersect
>1698	Identifier	Intersect
>1699	IdentifierDeclStatement	 
>1700	IdentifierDecl	nPoints3 = 0
>1701	AssignmentExpr	nPoints3 = 0
>1702	PrimaryExpression	0
>1703	Identifier	nPoints3
>1704	Identifier	nPoints3
>1705	IdentifierDeclType	int
>1706	IdentifierDecl	nPoints2 = 0
>1707	AssignmentExpr	nPoints2 = 0
>1708	PrimaryExpression	0
>1709	Identifier	nPoints2
>1710	Identifier	nPoints2
>1711	IdentifierDeclType	int
>1712	IdentifierDecl	nPoints1 = 0
>1713	AssignmentExpr	nPoints1 = 0
>1714	PrimaryExpression	0
>1715	Identifier	nPoints1
>1716	Identifier	nPoints1
>1717	IdentifierDeclType	int
>1718	IdentifierDeclStatement	 
>1719	IdentifierDecl	eErr = CE_None
>1720	AssignmentExpr	eErr = CE_None
>1721	Identifier	CE_None
>1722	Identifier	CE_None
>1723	Identifier	eErr
>1724	IdentifierDeclType	CPLErr
>1725	IdentifierDeclStatement	 
>1726	IdentifierDecl	adfY [ 4 ]
>1727	PrimaryExpression	4
>1728	Identifier	adfY
>1729	IdentifierDeclType	double [ 4 ]
>1730	IdentifierDecl	adfX [ 4 ]
>1731	PrimaryExpression	4
>1732	Identifier	adfX
>1733	IdentifierDeclType	double [ 4 ]
>1734	IdentifierDeclStatement	 
>1735	IdentifierDecl	nPoints = 0
>1736	AssignmentExpr	nPoints = 0
>1737	PrimaryExpression	0
>1738	Identifier	nPoints
>1739	Identifier	nPoints
>1740	IdentifierDeclType	int
>1741	IfStatement	if ( bFixedLevels )
>1742	ElseStatement	else
>1743	ExpressionStatement	 
>1744	AssignmentExpr	dfLevel = iLevel * dfContourInterval + dfContourOffset
>1745	AdditiveExpression	iLevel * dfContourInterval + dfContourOffset
>1746	Identifier	dfContourOffset
>1747	MultiplicativeExpression	iLevel * dfContourInterval
>1748	Identifier	dfContourInterval
>1749	Identifier	iLevel
>1750	Identifier	dfLevel
>1751	ExpressionStatement	 
>1752	AssignmentExpr	dfLevel = papoLevels [ iLevel ] -> GetLevel ( )
>1753	CallExpression	papoLevels [ iLevel ] -> GetLevel ( )
>1754	ArgumentList	 
>1755	Callee	papoLevels [ iLevel ] -> GetLevel
>1756	PtrMemberAccess	papoLevels [ iLevel ] -> GetLevel
>1757	Identifier	GetLevel
>1758	ArrayIndexing	papoLevels [ iLevel ]
>1759	Identifier	iLevel
>1760	Identifier	papoLevels
>1761	Identifier	dfLevel
>1762	Condition	 
>1763	Identifier	bFixedLevels
>1764	IdentifierDeclStatement	 
>1765	IdentifierDecl	dfLevel
>1766	Identifier	dfLevel
>1767	IdentifierDeclType	double
>1768	IncDecOp	 
>1769	IncDec	++
>1770	Identifier	iLevel
>1771	Condition	 
>1772	RelationalExpression	iLevel <= iEndLevel
>1773	Identifier	iEndLevel
>1774	Identifier	iLevel
>1775	ForInit	 
>1776	AssignmentExpr	iLevel = iStartLevel
>1777	Identifier	iStartLevel
>1778	Identifier	iLevel
>1779	IdentifierDeclStatement	 
>1780	IdentifierDecl	iLevel
>1781	Identifier	iLevel
>1782	IdentifierDeclType	int
>1783	IfStatement	if ( iStartLevel > iEndLevel )
>1784	ReturnStatement	 
>1785	Identifier	CE_None
>1786	Condition	 
>1787	RelationalExpression	iStartLevel > iEndLevel
>1788	Identifier	iEndLevel
>1789	Identifier	iStartLevel
>1790	IfStatement	if ( bFixedLevels )
>1791	ElseStatement	else
>1792	CompoundStatement	 
>1793	ExpressionStatement	 
>1794	AssignmentExpr	iEndLevel = ( int ) floor ( ( dfMax - dfContourOffset ) / dfContourInterval )
>1795	CastExpression	( int ) floor ( ( dfMax - dfContourOffset ) / dfContourInterval )
>1796	CallExpression	floor ( ( dfMax - dfContourOffset ) / dfContourInterval )
>1797	ArgumentList	( dfMax - dfContourOffset ) / dfContourInterval
>1798	Argument	( dfMax - dfContourOffset ) / dfContourInterval
>1799	MultiplicativeExpression	( dfMax - dfContourOffset ) / dfContourInterval
>1800	Identifier	dfContourInterval
>1801	AdditiveExpression	dfMax - dfContourOffset
>1802	Identifier	dfContourOffset
>1803	Identifier	dfMax
>1804	Callee	floor
>1805	Identifier	floor
>1806	CastTarget	int
>1807	Identifier	iEndLevel
>1808	ExpressionStatement	 
>1809	AssignmentExpr	iStartLevel = ( int ) ceil ( ( dfMin - dfContourOffset ) / dfContourInterval )
>1810	CastExpression	( int ) ceil ( ( dfMin - dfContourOffset ) / dfContourInterval )
>1811	CallExpression	ceil ( ( dfMin - dfContourOffset ) / dfContourInterval )
>1812	ArgumentList	( dfMin - dfContourOffset ) / dfContourInterval
>1813	Argument	( dfMin - dfContourOffset ) / dfContourInterval
>1814	MultiplicativeExpression	( dfMin - dfContourOffset ) / dfContourInterval
>1815	Identifier	dfContourInterval
>1816	AdditiveExpression	dfMin - dfContourOffset
>1817	Identifier	dfContourOffset
>1818	Identifier	dfMin
>1819	Callee	ceil
>1820	Identifier	ceil
>1821	CastTarget	int
>1822	Identifier	iStartLevel
>1823	CompoundStatement	 
>1824	ExpressionStatement	 
>1825	CallExpression	CPLAssert ( iEndLevel >= 0 && iEndLevel < nLevelCount )
>1826	ArgumentList	iEndLevel >= 0 && iEndLevel < nLevelCount
>1827	Argument	iEndLevel >= 0 && iEndLevel < nLevelCount
>1828	AndExpression	iEndLevel >= 0 && iEndLevel < nLevelCount
>1829	RelationalExpression	iEndLevel < nLevelCount
>1830	Identifier	nLevelCount
>1831	Identifier	iEndLevel
>1832	RelationalExpression	iEndLevel >= 0
>1833	PrimaryExpression	0
>1834	Identifier	iEndLevel
>1835	Callee	CPLAssert
>1836	Identifier	CPLAssert
>1837	ExpressionStatement	 
>1838	CallExpression	CPLAssert ( iStartLevel >= 0 && iStartLevel < nLevelCount )
>1839	ArgumentList	iStartLevel >= 0 && iStartLevel < nLevelCount
>1840	Argument	iStartLevel >= 0 && iStartLevel < nLevelCount
>1841	AndExpression	iStartLevel >= 0 && iStartLevel < nLevelCount
>1842	RelationalExpression	iStartLevel < nLevelCount
>1843	Identifier	nLevelCount
>1844	Identifier	iStartLevel
>1845	RelationalExpression	iStartLevel >= 0
>1846	PrimaryExpression	0
>1847	Identifier	iStartLevel
>1848	Callee	CPLAssert
>1849	Identifier	CPLAssert
>1850	IfStatement	if ( iStartLevel >= nLevelCount )
>1851	ReturnStatement	 
>1852	Identifier	CE_None
>1853	Condition	 
>1854	RelationalExpression	iStartLevel >= nLevelCount
>1855	Identifier	nLevelCount
>1856	Identifier	iStartLevel
>1857	WhileStatement	while ( iEndLevel < nLevelCount - 1 && papoLevels [ iEndLevel + 1 ] -> GetLevel ( ) < dfMax )
>1858	ExpressionStatement	 
>1859	IncDecOp	iEndLevel ++
>1860	IncDec	++
>1861	Identifier	iEndLevel
>1862	Condition	 
>1863	AndExpression	iEndLevel < nLevelCount - 1 && papoLevels [ iEndLevel + 1 ] -> GetLevel ( ) < dfMax
>1864	RelationalExpression	papoLevels [ iEndLevel + 1 ] -> GetLevel ( ) < dfMax
>1865	Identifier	dfMax
>1866	CallExpression	papoLevels [ iEndLevel + 1 ] -> GetLevel ( )
>1867	ArgumentList	 
>1868	Callee	papoLevels [ iEndLevel + 1 ] -> GetLevel
>1869	PtrMemberAccess	papoLevels [ iEndLevel + 1 ] -> GetLevel
>1870	Identifier	GetLevel
>1871	ArrayIndexing	papoLevels [ iEndLevel + 1 ]
>1872	AdditiveExpression	iEndLevel + 1
>1873	PrimaryExpression	1
>1874	Identifier	iEndLevel
>1875	Identifier	papoLevels
>1876	RelationalExpression	iEndLevel < nLevelCount - 1
>1877	AdditiveExpression	nLevelCount - 1
>1878	PrimaryExpression	1
>1879	Identifier	nLevelCount
>1880	Identifier	iEndLevel
>1881	ExpressionStatement	 
>1882	AssignmentExpr	iEndLevel = iStartLevel
>1883	Identifier	iStartLevel
>1884	Identifier	iEndLevel
>1885	IfStatement	if ( iStartLevel == - 1 )
>1886	ExpressionStatement	 
>1887	AssignmentExpr	iStartLevel = nEnd + 1
>1888	AdditiveExpression	nEnd + 1
>1889	PrimaryExpression	1
>1890	Identifier	nEnd
>1891	Identifier	iStartLevel
>1892	Condition	 
>1893	EqualityExpression	iStartLevel == - 1
>1894	UnaryOp	- 1
>1895	PrimaryExpression	1
>1896	UnaryOperator	-
>1897	Identifier	iStartLevel
>1898	WhileStatement	while ( nStart <= nEnd )
>1899	CompoundStatement	 
>1900	IfStatement	if ( dfMiddleLevel < dfMin )
>1901	ElseStatement	else
>1902	IfStatement	if ( dfMiddleLevel > dfMin )
>1903	ElseStatement	else
>1904	CompoundStatement	 
>1905	BreakStatement	 
>1906	ExpressionStatement	 
>1907	AssignmentExpr	iStartLevel = nMiddle
>1908	Identifier	nMiddle
>1909	Identifier	iStartLevel
>1910	ExpressionStatement	 
>1911	AssignmentExpr	nEnd = nMiddle - 1
>1912	AdditiveExpression	nMiddle - 1
>1913	PrimaryExpression	1
>1914	Identifier	nMiddle
>1915	Identifier	nEnd
>1916	Condition	 
>1917	RelationalExpression	dfMiddleLevel > dfMin
>1918	Identifier	dfMin
>1919	Identifier	dfMiddleLevel
>1920	ExpressionStatement	 
>1921	AssignmentExpr	nStart = nMiddle + 1
>1922	AdditiveExpression	nMiddle + 1
>1923	PrimaryExpression	1
>1924	Identifier	nMiddle
>1925	Identifier	nStart
>1926	Condition	 
>1927	RelationalExpression	dfMiddleLevel < dfMin
>1928	Identifier	dfMin
>1929	Identifier	dfMiddleLevel
>1930	IdentifierDeclStatement	 
>1931	IdentifierDecl	dfMiddleLevel = papoLevels [ nMiddle ] -> GetLevel ( )
>1932	AssignmentExpr	dfMiddleLevel = papoLevels [ nMiddle ] -> GetLevel ( )
>1933	CallExpression	papoLevels [ nMiddle ] -> GetLevel ( )
>1934	ArgumentList	 
>1935	Callee	papoLevels [ nMiddle ] -> GetLevel
>1936	PtrMemberAccess	papoLevels [ nMiddle ] -> GetLevel
>1937	Identifier	GetLevel
>1938	ArrayIndexing	papoLevels [ nMiddle ]
>1939	Identifier	nMiddle
>1940	Identifier	papoLevels
>1941	Identifier	dfMiddleLevel
>1942	Identifier	dfMiddleLevel
>1943	IdentifierDeclType	double
>1944	ExpressionStatement	 
>1945	AssignmentExpr	nMiddle = ( nEnd + nStart ) / 2
>1946	MultiplicativeExpression	( nEnd + nStart ) / 2
>1947	PrimaryExpression	2
>1948	AdditiveExpression	nEnd + nStart
>1949	Identifier	nStart
>1950	Identifier	nEnd
>1951	Identifier	nMiddle
>1952	Condition	 
>1953	RelationalExpression	nStart <= nEnd
>1954	Identifier	nEnd
>1955	Identifier	nStart
>1956	ExpressionStatement	 
>1957	AssignmentExpr	iStartLevel = - 1
>1958	UnaryOp	- 1
>1959	PrimaryExpression	1
>1960	UnaryOperator	-
>1961	Identifier	iStartLevel
>1962	IdentifierDeclStatement	 
>1963	IdentifierDecl	nMiddle
>1964	Identifier	nMiddle
>1965	IdentifierDeclType	int
>1966	IdentifierDecl	nEnd = nLevelCount - 1
>1967	AssignmentExpr	nEnd = nLevelCount - 1
>1968	AdditiveExpression	nLevelCount - 1
>1969	PrimaryExpression	1
>1970	Identifier	nLevelCount
>1971	Identifier	nEnd
>1972	Identifier	nEnd
>1973	IdentifierDeclType	int
>1974	IdentifierDecl	nStart = 0
>1975	AssignmentExpr	nStart = 0
>1976	PrimaryExpression	0
>1977	Identifier	nStart
>1978	Identifier	nStart
>1979	IdentifierDeclType	int
>1980	Condition	 
>1981	Identifier	bFixedLevels
>1982	IdentifierDeclStatement	 
>1983	IdentifierDecl	dfMax = MAX ( MAX ( dfUpLeft , dfUpRight ) , MAX ( dfLoLeft , dfLoRight ) )
>1984	AssignmentExpr	dfMax = MAX ( MAX ( dfUpLeft , dfUpRight ) , MAX ( dfLoLeft , dfLoRight ) )
>1985	CallExpression	MAX ( MAX ( dfUpLeft , dfUpRight ) , MAX ( dfLoLeft , dfLoRight ) )
>1986	ArgumentList	MAX ( dfUpLeft , dfUpRight )
>1987	Argument	MAX ( dfLoLeft , dfLoRight )
>1988	CallExpression	MAX ( dfLoLeft , dfLoRight )
>1989	ArgumentList	dfLoLeft
>1990	Argument	dfLoRight
>1991	Identifier	dfLoRight
>1992	Argument	dfLoLeft
>1993	Identifier	dfLoLeft
>1994	Callee	MAX
>1995	Identifier	MAX
>1996	Argument	MAX ( dfUpLeft , dfUpRight )
>1997	CallExpression	MAX ( dfUpLeft , dfUpRight )
>1998	ArgumentList	dfUpLeft
>1999	Argument	dfUpRight
>2000	Identifier	dfUpRight
>2001	Argument	dfUpLeft
>2002	Identifier	dfUpLeft
>2003	Callee	MAX
>2004	Identifier	MAX
>2005	Callee	MAX
>2006	Identifier	MAX
>2007	Identifier	dfMax
>2008	Identifier	dfMax
>2009	IdentifierDeclType	double
>2010	IdentifierDeclStatement	 
>2011	IdentifierDecl	dfMin = MIN ( MIN ( dfUpLeft , dfUpRight ) , MIN ( dfLoLeft , dfLoRight ) )
>2012	AssignmentExpr	dfMin = MIN ( MIN ( dfUpLeft , dfUpRight ) , MIN ( dfLoLeft , dfLoRight ) )
>2013	CallExpression	MIN ( MIN ( dfUpLeft , dfUpRight ) , MIN ( dfLoLeft , dfLoRight ) )
>2014	ArgumentList	MIN ( dfUpLeft , dfUpRight )
>2015	Argument	MIN ( dfLoLeft , dfLoRight )
>2016	CallExpression	MIN ( dfLoLeft , dfLoRight )
>2017	ArgumentList	dfLoLeft
>2018	Argument	dfLoRight
>2019	Identifier	dfLoRight
>2020	Argument	dfLoLeft
>2021	Identifier	dfLoLeft
>2022	Callee	MIN
>2023	Identifier	MIN
>2024	Argument	MIN ( dfUpLeft , dfUpRight )
>2025	CallExpression	MIN ( dfUpLeft , dfUpRight )
>2026	ArgumentList	dfUpLeft
>2027	Argument	dfUpRight
>2028	Identifier	dfUpRight
>2029	Argument	dfUpLeft
>2030	Identifier	dfUpLeft
>2031	Callee	MIN
>2032	Identifier	MIN
>2033	Callee	MIN
>2034	Identifier	MIN
>2035	Identifier	dfMin
>2036	Identifier	dfMin
>2037	IdentifierDeclType	double
>2038	IdentifierDeclStatement	 
>2039	IdentifierDecl	iEndLevel
>2040	Identifier	iEndLevel
>2041	IdentifierDeclType	int
>2042	IdentifierDecl	iStartLevel
>2043	Identifier	iStartLevel
>2044	IdentifierDeclType	int
>2102	FunctionDef	GDALContourGenerator 
>2103	ParameterList	double dfVal1 , double dfX1 , double dfY1 , double dfVal2 , double dfX2 , double dfY2 , double dfNext , double dfLevel , \
>2104	Parameter	 
>2105	Identifier	padfY
>2106	ParameterType	double *
>2107	Parameter	 
>2108	Identifier	padfX
>2109	ParameterType	double *
>2110	Parameter	 
>2111	Identifier	pnPoints
>2112	ParameterType	int *
>2113	Parameter	 
>2114	Identifier	dfLevel
>2115	ParameterType	double
>2116	Parameter	 
>2117	Identifier	dfNext
>2118	ParameterType	double
>2119	Parameter	 
>2120	Identifier	dfY2
>2121	ParameterType	double
>2122	Parameter	 
>2123	Identifier	dfX2
>2124	ParameterType	double
>2125	Parameter	 
>2126	Identifier	dfVal2
>2127	ParameterType	double
>2128	Parameter	 
>2129	Identifier	dfY1
>2130	ParameterType	double
>2131	Parameter	 
>2132	Identifier	dfX1
>2133	ParameterType	double
>2134	Parameter	 
>2135	Identifier	dfVal1
>2136	ParameterType	double
>2137	ReturnType	void
>2138	CompoundStatement	 
>2139	IfStatement	if ( dfVal1 < dfLevel && dfVal2 >= dfLevel )
>2140	ElseStatement	else
>2141	IfStatement	if ( dfVal1 > dfLevel && dfVal2 <= dfLevel )
>2142	ElseStatement	else
>2143	IfStatement	if ( dfVal1 == dfLevel && dfVal2 == dfLevel && dfNext != dfLevel )
>2144	CompoundStatement	 
>2145	ExpressionStatement	 
>2146	IncDecOp	( * pnPoints ) ++
>2147	IncDec	++
>2148	UnaryOp	* pnPoints
>2149	Identifier	pnPoints
>2150	UnaryOperator	*
>2151	ExpressionStatement	 
>2152	AssignmentExpr	padfY [ * pnPoints ] = dfY2
>2153	Identifier	dfY2
>2154	ArrayIndexing	padfY [ * pnPoints ]
>2155	UnaryOp	* pnPoints
>2156	Identifier	pnPoints
>2157	UnaryOperator	*
>2158	Identifier	padfY
>2159	ExpressionStatement	 
>2160	AssignmentExpr	padfX [ * pnPoints ] = dfX2
>2161	Identifier	dfX2
>2162	ArrayIndexing	padfX [ * pnPoints ]
>2163	UnaryOp	* pnPoints
>2164	Identifier	pnPoints
>2165	UnaryOperator	*
>2166	Identifier	padfX
>2167	Condition	 
>2168	AndExpression	dfVal1 == dfLevel && dfVal2 == dfLevel && dfNext != dfLevel
>2169	AndExpression	dfVal2 == dfLevel && dfNext != dfLevel
>2170	EqualityExpression	dfNext != dfLevel
>2171	Identifier	dfLevel
>2172	Identifier	dfNext
>2173	EqualityExpression	dfVal2 == dfLevel
>2174	Identifier	dfLevel
>2175	Identifier	dfVal2
>2176	EqualityExpression	dfVal1 == dfLevel
>2177	Identifier	dfLevel
>2178	Identifier	dfVal1
>2179	CompoundStatement	 
>2180	ExpressionStatement	 
>2181	IncDecOp	( * pnPoints ) ++
>2182	IncDec	++
>2183	UnaryOp	* pnPoints
>2184	Identifier	pnPoints
>2185	UnaryOperator	*
>2186	ExpressionStatement	 
>2187	AssignmentExpr	padfY [ * pnPoints ] = dfY2 * ( 1.0 - dfRatio ) + dfY1 * dfRatio
>2188	AdditiveExpression	dfY2 * ( 1.0 - dfRatio ) + dfY1 * dfRatio
>2189	MultiplicativeExpression	dfY1 * dfRatio
>2190	Identifier	dfRatio
>2191	Identifier	dfY1
>2192	MultiplicativeExpression	dfY2 * ( 1.0 - dfRatio )
>2193	AdditiveExpression	1.0 - dfRatio
>2194	Identifier	dfRatio
>2195	PrimaryExpression	1.0
>2196	Identifier	dfY2
>2197	ArrayIndexing	padfY [ * pnPoints ]
>2198	UnaryOp	* pnPoints
>2199	Identifier	pnPoints
>2200	UnaryOperator	*
>2201	Identifier	padfY
>2202	ExpressionStatement	 
>2203	AssignmentExpr	padfX [ * pnPoints ] = dfX2 * ( 1.0 - dfRatio ) + dfX1 * dfRatio
>2204	AdditiveExpression	dfX2 * ( 1.0 - dfRatio ) + dfX1 * dfRatio
>2205	MultiplicativeExpression	dfX1 * dfRatio
>2206	Identifier	dfRatio
>2207	Identifier	dfX1
>2208	MultiplicativeExpression	dfX2 * ( 1.0 - dfRatio )
>2209	AdditiveExpression	1.0 - dfRatio
>2210	Identifier	dfRatio
>2211	PrimaryExpression	1.0
>2212	Identifier	dfX2
>2213	ArrayIndexing	padfX [ * pnPoints ]
>2214	UnaryOp	* pnPoints
>2215	Identifier	pnPoints
>2216	UnaryOperator	*
>2217	Identifier	padfX
>2218	IdentifierDeclStatement	 
>2219	IdentifierDecl	dfRatio = ( dfLevel - dfVal2 ) / ( dfVal1 - dfVal2 )
>2220	AssignmentExpr	dfRatio = ( dfLevel - dfVal2 ) / ( dfVal1 - dfVal2 )
>2221	MultiplicativeExpression	( dfLevel - dfVal2 ) / ( dfVal1 - dfVal2 )
>2222	AdditiveExpression	dfVal1 - dfVal2
>2223	Identifier	dfVal2
>2224	Identifier	dfVal1
>2225	AdditiveExpression	dfLevel - dfVal2
>2226	Identifier	dfVal2
>2227	Identifier	dfLevel
>2228	Identifier	dfRatio
>2229	Identifier	dfRatio
>2230	IdentifierDeclType	double
>2231	Condition	 
>2232	AndExpression	dfVal1 > dfLevel && dfVal2 <= dfLevel
>2233	RelationalExpression	dfVal2 <= dfLevel
>2234	Identifier	dfLevel
>2235	Identifier	dfVal2
>2236	RelationalExpression	dfVal1 > dfLevel
>2237	Identifier	dfLevel
>2238	Identifier	dfVal1
>2239	CompoundStatement	 
>2240	ExpressionStatement	 
>2241	IncDecOp	( * pnPoints ) ++
>2242	IncDec	++
>2243	UnaryOp	* pnPoints
>2244	Identifier	pnPoints
>2245	UnaryOperator	*
>2246	ExpressionStatement	 
>2247	AssignmentExpr	padfY [ * pnPoints ] = dfY1 * ( 1.0 - dfRatio ) + dfY2 * dfRatio
>2248	AdditiveExpression	dfY1 * ( 1.0 - dfRatio ) + dfY2 * dfRatio
>2249	MultiplicativeExpression	dfY2 * dfRatio
>2250	Identifier	dfRatio
>2251	Identifier	dfY2
>2252	MultiplicativeExpression	dfY1 * ( 1.0 - dfRatio )
>2253	AdditiveExpression	1.0 - dfRatio
>2254	Identifier	dfRatio
>2255	PrimaryExpression	1.0
>2256	Identifier	dfY1
>2257	ArrayIndexing	padfY [ * pnPoints ]
>2258	UnaryOp	* pnPoints
>2259	Identifier	pnPoints
>2260	UnaryOperator	*
>2261	Identifier	padfY
>2262	ExpressionStatement	 
>2263	AssignmentExpr	padfX [ * pnPoints ] = dfX1 * ( 1.0 - dfRatio ) + dfX2 * dfRatio
>2264	AdditiveExpression	dfX1 * ( 1.0 - dfRatio ) + dfX2 * dfRatio
>2265	MultiplicativeExpression	dfX2 * dfRatio
>2266	Identifier	dfRatio
>2267	Identifier	dfX2
>2268	MultiplicativeExpression	dfX1 * ( 1.0 - dfRatio )
>2269	AdditiveExpression	1.0 - dfRatio
>2270	Identifier	dfRatio
>2271	PrimaryExpression	1.0
>2272	Identifier	dfX1
>2273	ArrayIndexing	padfX [ * pnPoints ]
>2274	UnaryOp	* pnPoints
>2275	Identifier	pnPoints
>2276	UnaryOperator	*
>2277	Identifier	padfX
>2278	IdentifierDeclStatement	 
>2279	IdentifierDecl	dfRatio = ( dfLevel - dfVal1 ) / ( dfVal2 - dfVal1 )
>2280	AssignmentExpr	dfRatio = ( dfLevel - dfVal1 ) / ( dfVal2 - dfVal1 )
>2281	MultiplicativeExpression	( dfLevel - dfVal1 ) / ( dfVal2 - dfVal1 )
>2282	AdditiveExpression	dfVal2 - dfVal1
>2283	Identifier	dfVal1
>2284	Identifier	dfVal2
>2285	AdditiveExpression	dfLevel - dfVal1
>2286	Identifier	dfVal1
>2287	Identifier	dfLevel
>2288	Identifier	dfRatio
>2289	Identifier	dfRatio
>2290	IdentifierDeclType	double
>2291	Condition	 
>2292	AndExpression	dfVal1 < dfLevel && dfVal2 >= dfLevel
>2293	RelationalExpression	dfVal2 >= dfLevel
>2294	Identifier	dfLevel
>2295	Identifier	dfVal2
>2296	RelationalExpression	dfVal1 < dfLevel
>2297	Identifier	dfLevel
>2298	Identifier	dfVal1
>2318	FunctionDef	GDALContourGenerator 
>2319	ParameterList	double dfLevel , double dfX1 , double dfY1 , double dfX2 , double dfY2 , int bLeftHigh
>2320	Parameter	 
>2321	Identifier	bLeftHigh
>2322	ParameterType	int
>2323	Parameter	 
>2324	Identifier	dfY2
>2325	ParameterType	double
>2326	Parameter	 
>2327	Identifier	dfX2
>2328	ParameterType	double
>2329	Parameter	 
>2330	Identifier	dfY1
>2331	ParameterType	double
>2332	Parameter	 
>2333	Identifier	dfX1
>2334	ParameterType	double
>2335	Parameter	 
>2336	Identifier	dfLevel
>2337	ParameterType	double
>2338	ReturnType	CPLErr
>2339	CompoundStatement	 
>2340	ReturnStatement	 
>2341	Identifier	CE_None
>2342	ExpressionStatement	 
>2343	CallExpression	poLevel -> InsertContour ( poTarget )
>2344	ArgumentList	poTarget
>2345	Argument	poTarget
>2346	Identifier	poTarget
>2347	Callee	poLevel -> InsertContour
>2348	PtrMemberAccess	poLevel -> InsertContour
>2349	Identifier	InsertContour
>2350	Identifier	poLevel
>2351	ExpressionStatement	 
>2352	CallExpression	poTarget -> AddSegment ( dfX1 , dfY1 , dfX2 , dfY2 , bLeftHigh )
>2353	ArgumentList	dfX1
>2354	Argument	bLeftHigh
>2355	Identifier	bLeftHigh
>2356	Argument	dfY2
>2357	Identifier	dfY2
>2358	Argument	dfX2
>2359	Identifier	dfX2
>2360	Argument	dfY1
>2361	Identifier	dfY1
>2362	Argument	dfX1
>2363	Identifier	dfX1
>2364	Callee	poTarget -> AddSegment
>2365	PtrMemberAccess	poTarget -> AddSegment
>2366	Identifier	AddSegment
>2367	Identifier	poTarget
>2368	ExpressionStatement	 
>2369	AssignmentExpr	poTarget = new GDALContourItem ( dfLevel )
>2370	Identifier	dfLevel
>2371	Identifier	poTarget
>2372	IfStatement	if ( iTarget != - 1 )
>2373	CompoundStatement	 
>2374	ReturnStatement	 
>2375	Identifier	CE_None
>2376	ExpressionStatement	 
>2377	CallExpression	poLevel -> AdjustContour ( iTarget )
>2378	ArgumentList	iTarget
>2379	Argument	iTarget
>2380	Identifier	iTarget
>2381	Callee	poLevel -> AdjustContour
>2382	PtrMemberAccess	poLevel -> AdjustContour
>2383	Identifier	AdjustContour
>2384	Identifier	poLevel
>2385	ExpressionStatement	 
>2386	CallExpression	poTarget -> AddSegment ( dfX1 , dfY1 , dfX2 , dfY2 , bLeftHigh )
>2387	ArgumentList	dfX1
>2388	Argument	bLeftHigh
>2389	Identifier	bLeftHigh
>2390	Argument	dfY2
>2391	Identifier	dfY2
>2392	Argument	dfX2
>2393	Identifier	dfX2
>2394	Argument	dfY1
>2395	Identifier	dfY1
>2396	Argument	dfX1
>2397	Identifier	dfX1
>2398	Callee	poTarget -> AddSegment
>2399	PtrMemberAccess	poTarget -> AddSegment
>2400	Identifier	AddSegment
>2401	Identifier	poTarget
>2402	ExpressionStatement	 
>2403	AssignmentExpr	poTarget = poLevel -> GetContour ( iTarget )
>2404	CallExpression	poLevel -> GetContour ( iTarget )
>2405	ArgumentList	iTarget
>2406	Argument	iTarget
>2407	Identifier	iTarget
>2408	Callee	poLevel -> GetContour
>2409	PtrMemberAccess	poLevel -> GetContour
>2410	Identifier	GetContour
>2411	Identifier	poLevel
>2412	Identifier	poTarget
>2413	Condition	 
>2414	EqualityExpression	iTarget != - 1
>2415	UnaryOp	- 1
>2416	PrimaryExpression	1
>2417	UnaryOperator	-
>2418	Identifier	iTarget
>2419	IfStatement	if ( dfY1 < dfY2 )
>2420	ElseStatement	else
>2421	ExpressionStatement	 
>2422	AssignmentExpr	iTarget = poLevel -> FindContour ( dfX2 , dfY2 )
>2423	CallExpression	poLevel -> FindContour ( dfX2 , dfY2 )
>2424	ArgumentList	dfX2
>2425	Argument	dfY2
>2426	Identifier	dfY2
>2427	Argument	dfX2
>2428	Identifier	dfX2
>2429	Callee	poLevel -> FindContour
>2430	PtrMemberAccess	poLevel -> FindContour
>2431	Identifier	FindContour
>2432	Identifier	poLevel
>2433	Identifier	iTarget
>2434	ExpressionStatement	 
>2435	AssignmentExpr	iTarget = poLevel -> FindContour ( dfX1 , dfY1 )
>2436	CallExpression	poLevel -> FindContour ( dfX1 , dfY1 )
>2437	ArgumentList	dfX1
>2438	Argument	dfY1
>2439	Identifier	dfY1
>2440	Argument	dfX1
>2441	Identifier	dfX1
>2442	Callee	poLevel -> FindContour
>2443	PtrMemberAccess	poLevel -> FindContour
>2444	Identifier	FindContour
>2445	Identifier	poLevel
>2446	Identifier	iTarget
>2447	Condition	 
>2448	RelationalExpression	dfY1 < dfY2
>2449	Identifier	dfY2
>2450	Identifier	dfY1
>2451	IdentifierDeclStatement	 
>2452	IdentifierDecl	iTarget
>2453	Identifier	iTarget
>2454	IdentifierDeclType	int
>2455	IdentifierDeclStatement	 
>2456	IdentifierDecl	* poTarget
>2457	Identifier	poTarget
>2458	IdentifierDeclType	GDALContourItem *
>2459	IdentifierDeclStatement	 
>2460	IdentifierDecl	* poLevel = FindLevel ( dfLevel )
>2461	AssignmentExpr	* poLevel = FindLevel ( dfLevel )
>2462	CallExpression	FindLevel ( dfLevel )
>2463	ArgumentList	dfLevel
>2464	Argument	dfLevel
>2465	Identifier	dfLevel
>2466	Callee	FindLevel
>2467	Identifier	FindLevel
>2468	Identifier	poLevel
>2469	Identifier	poLevel
>2470	IdentifierDeclType	GDALContourLevel *
>2488	FunctionDef	GDALContourGenerator 
>2489	ParameterList	double * padfScanline
>2490	Parameter	 
>2491	Identifier	padfScanline
>2492	ParameterType	double *
>2493	ReturnType	CPLErr
>2494	CompoundStatement	 
>2495	IfStatement	if ( iLine == nHeight && eErr == CE_None )
>2496	ElseStatement	else
>2497	ReturnStatement	 
>2498	Identifier	eErr
>2499	ReturnStatement	 
>2500	CallExpression	FeedLine ( NULL )
>2501	ArgumentList	NULL
>2502	Argument	NULL
>2503	Identifier	NULL
>2504	Callee	FeedLine
>2505	Identifier	FeedLine
>2506	Condition	 
>2507	AndExpression	iLine == nHeight && eErr == CE_None
>2508	EqualityExpression	eErr == CE_None
>2509	Identifier	CE_None
>2510	Identifier	eErr
>2511	EqualityExpression	iLine == nHeight
>2512	Identifier	nHeight
>2513	Identifier	iLine
>2514	ExpressionStatement	 
>2515	IncDecOp	iLine ++
>2516	IncDec	++
>2517	Identifier	iLine
>2518	IdentifierDeclStatement	 
>2519	IdentifierDecl	eErr = EjectContours ( padfScanline != NULL )
>2520	AssignmentExpr	eErr = EjectContours ( padfScanline != NULL )
>2521	CallExpression	EjectContours ( padfScanline != NULL )
>2522	ArgumentList	padfScanline != NULL
>2523	Argument	padfScanline != NULL
>2524	EqualityExpression	padfScanline != NULL
>2525	Identifier	NULL
>2526	Identifier	padfScanline
>2527	Callee	EjectContours
>2528	Identifier	EjectContours
>2529	Identifier	eErr
>2530	Identifier	eErr
>2531	IdentifierDeclType	CPLErr
>2532	ForStatement	for ( iPixel = 0 ; iPixel < nWidth + 1 ; iPixel ++ )
>2533	CompoundStatement	 
>2534	IfStatement	if ( eErr != CE_None )
>2535	ReturnStatement	 
>2536	Identifier	eErr
>2537	Condition	 
>2538	EqualityExpression	eErr != CE_None
>2539	Identifier	CE_None
>2540	Identifier	eErr
>2541	IdentifierDeclStatement	 
>2542	IdentifierDecl	eErr = ProcessPixel ( iPixel )
>2543	AssignmentExpr	eErr = ProcessPixel ( iPixel )
>2544	CallExpression	ProcessPixel ( iPixel )
>2545	ArgumentList	iPixel
>2546	Argument	iPixel
>2547	Identifier	iPixel
>2548	Callee	ProcessPixel
>2549	Identifier	ProcessPixel
>2550	Identifier	eErr
>2551	Identifier	eErr
>2552	IdentifierDeclType	CPLErr
>2553	IncDecOp	 
>2554	IncDec	++
>2555	Identifier	iPixel
>2556	Condition	 
>2557	RelationalExpression	iPixel < nWidth + 1
>2558	AdditiveExpression	nWidth + 1
>2559	PrimaryExpression	1
>2560	Identifier	nWidth
>2561	Identifier	iPixel
>2562	ForInit	 
>2563	AssignmentExpr	iPixel = 0
>2564	PrimaryExpression	0
>2565	Identifier	iPixel
>2566	ForStatement	for ( iLevel = 0 ; iLevel < nLevelCount ; iLevel ++ )
>2567	CompoundStatement	 
>2568	ForStatement	for ( iContour = 0 ; iContour < poLevel -> GetContourCount ( ) ; iContour ++ )
>2569	ExpressionStatement	 
>2570	AssignmentExpr	poLevel -> GetContour ( iContour ) -> bRecentlyAccessed = FALSE
>2571	Identifier	FALSE
>2572	PtrMemberAccess	poLevel -> GetContour ( iContour ) -> bRecentlyAccessed
>2573	Identifier	bRecentlyAccessed
>2574	CallExpression	poLevel -> GetContour ( iContour )
>2575	ArgumentList	iContour
>2576	Argument	iContour
>2577	Identifier	iContour
>2578	Callee	poLevel -> GetContour
>2579	PtrMemberAccess	poLevel -> GetContour
>2580	Identifier	GetContour
>2581	Identifier	poLevel
>2582	IncDecOp	 
>2583	IncDec	++
>2584	Identifier	iContour
>2585	Condition	 
>2586	RelationalExpression	iContour < poLevel -> GetContourCount ( )
>2587	CallExpression	poLevel -> GetContourCount ( )
>2588	ArgumentList	 
>2589	Callee	poLevel -> GetContourCount
>2590	PtrMemberAccess	poLevel -> GetContourCount
>2591	Identifier	GetContourCount
>2592	Identifier	poLevel
>2593	Identifier	iContour
>2594	ForInit	 
>2595	AssignmentExpr	iContour = 0
>2596	PrimaryExpression	0
>2597	Identifier	iContour
>2598	IdentifierDeclStatement	 
>2599	IdentifierDecl	* poLevel = papoLevels [ iLevel ]
>2600	AssignmentExpr	* poLevel = papoLevels [ iLevel ]
>2601	ArrayIndexing	papoLevels [ iLevel ]
>2602	Identifier	iLevel
>2603	Identifier	papoLevels
>2604	Identifier	poLevel
>2605	Identifier	poLevel
>2606	IdentifierDeclType	GDALContourLevel *
>2607	IncDecOp	 
>2608	IncDec	++
>2609	Identifier	iLevel
>2610	Condition	 
>2611	RelationalExpression	iLevel < nLevelCount
>2612	Identifier	nLevelCount
>2613	Identifier	iLevel
>2614	ForInit	 
>2615	AssignmentExpr	iLevel = 0
>2616	PrimaryExpression	0
>2617	Identifier	iLevel
>2618	IdentifierDeclStatement	 
>2619	IdentifierDecl	iContour
>2620	Identifier	iContour
>2621	IdentifierDeclType	int
>2622	IdentifierDecl	iLevel
>2623	Identifier	iLevel
>2624	IdentifierDeclType	int
>2625	IfStatement	if ( iLine == - 1 )
>2626	CompoundStatement	 
>2627	ExpressionStatement	 
>2628	AssignmentExpr	iLine = 0
>2629	PrimaryExpression	0
>2630	Identifier	iLine
>2631	ExpressionStatement	 
>2632	CallExpression	memcpy ( padfLastLine , padfThisLine , sizeof ( double ) * nWidth )
>2633	ArgumentList	padfLastLine
>2634	Argument	sizeof ( double ) * nWidth
>2635	MultiplicativeExpression	sizeof ( double ) * nWidth
>2636	Identifier	nWidth
>2637	SizeofExpr	sizeof ( double )
>2638	SizeofOperand	double
>2639	Sizeof	sizeof
>2640	Argument	padfThisLine
>2641	Identifier	padfThisLine
>2642	Argument	padfLastLine
>2643	Identifier	padfLastLine
>2644	Callee	memcpy
>2645	Identifier	memcpy
>2646	Condition	 
>2647	EqualityExpression	iLine == - 1
>2648	UnaryOp	- 1
>2649	PrimaryExpression	1
>2650	UnaryOperator	-
>2651	Identifier	iLine
>2652	ForStatement	for ( iPixel = 0 ; iPixel < nWidth ; iPixel ++ )
>2653	CompoundStatement	 
>2654	IfStatement	if ( dfLevel - ( int ) dfLevel == 0.0 )
>2655	CompoundStatement	 
>2656	ExpressionStatement	 
>2657	AssignmentExpr	padfThisLine [ iPixel ] += dfContourInterval * FUDGE_EXACT
>2658	MultiplicativeExpression	dfContourInterval * FUDGE_EXACT
>2659	Identifier	FUDGE_EXACT
>2660	Identifier	dfContourInterval
>2661	ArrayIndexing	padfThisLine [ iPixel ]
>2662	Identifier	iPixel
>2663	Identifier	padfThisLine
>2664	Condition	 
>2665	EqualityExpression	dfLevel - ( int ) dfLevel == 0.0
>2666	PrimaryExpression	0.0
>2667	AdditiveExpression	dfLevel - ( int ) dfLevel
>2668	CastExpression	( int ) dfLevel
>2669	Identifier	dfLevel
>2670	CastTarget	int
>2671	Identifier	dfLevel
>2672	IdentifierDeclStatement	 
>2673	IdentifierDecl	dfLevel = ( padfThisLine [ iPixel ] - dfContourOffset ) / dfContourInterval
>2674	AssignmentExpr	dfLevel = ( padfThisLine [ iPixel ] - dfContourOffset ) / dfContourInterval
>2675	MultiplicativeExpression	( padfThisLine [ iPixel ] - dfContourOffset ) / dfContourInterval
>2676	Identifier	dfContourInterval
>2677	AdditiveExpression	padfThisLine [ iPixel ] - dfContourOffset
>2678	Identifier	dfContourOffset
>2679	ArrayIndexing	padfThisLine [ iPixel ]
>2680	Identifier	iPixel
>2681	Identifier	padfThisLine
>2682	Identifier	dfLevel
>2683	Identifier	dfLevel
>2684	IdentifierDeclType	double
>2685	IfStatement	if ( bNoDataActive && padfThisLine [ iPixel ] == dfNoDataValue )
>2686	ContinueStatement	 
>2687	Condition	 
>2688	AndExpression	bNoDataActive && padfThisLine [ iPixel ] == dfNoDataValue
>2689	EqualityExpression	padfThisLine [ iPixel ] == dfNoDataValue
>2690	Identifier	dfNoDataValue
>2691	ArrayIndexing	padfThisLine [ iPixel ]
>2692	Identifier	iPixel
>2693	Identifier	padfThisLine
>2694	Identifier	bNoDataActive
>2695	IncDecOp	 
>2696	IncDec	++
>2697	Identifier	iPixel
>2698	Condition	 
>2699	RelationalExpression	iPixel < nWidth
>2700	Identifier	nWidth
>2701	Identifier	iPixel
>2702	ForInit	 
>2703	AssignmentExpr	iPixel = 0
>2704	PrimaryExpression	0
>2705	Identifier	iPixel
>2706	IdentifierDeclStatement	 
>2707	IdentifierDecl	iPixel
>2708	Identifier	iPixel
>2709	IdentifierDeclType	int
>2710	IfStatement	if ( padfScanline == NULL )
>2711	ElseStatement	else
>2712	CompoundStatement	 
>2713	ExpressionStatement	 
>2714	CallExpression	memcpy ( padfThisLine , padfScanline , sizeof ( double ) * nWidth )
>2715	ArgumentList	padfThisLine
>2716	Argument	sizeof ( double ) * nWidth
>2717	MultiplicativeExpression	sizeof ( double ) * nWidth
>2718	Identifier	nWidth
>2719	SizeofExpr	sizeof ( double )
>2720	SizeofOperand	double
>2721	Sizeof	sizeof
>2722	Argument	padfScanline
>2723	Identifier	padfScanline
>2724	Argument	padfThisLine
>2725	Identifier	padfThisLine
>2726	Callee	memcpy
>2727	Identifier	memcpy
>2728	CompoundStatement	 
>2729	ExpressionStatement	 
>2730	CallExpression	memcpy ( padfThisLine , padfLastLine , sizeof ( double ) * nWidth )
>2731	ArgumentList	padfThisLine
>2732	Argument	sizeof ( double ) * nWidth
>2733	MultiplicativeExpression	sizeof ( double ) * nWidth
>2734	Identifier	nWidth
>2735	SizeofExpr	sizeof ( double )
>2736	SizeofOperand	double
>2737	Sizeof	sizeof
>2738	Argument	padfLastLine
>2739	Identifier	padfLastLine
>2740	Argument	padfThisLine
>2741	Identifier	padfThisLine
>2742	Callee	memcpy
>2743	Identifier	memcpy
>2744	Condition	 
>2745	EqualityExpression	padfScanline == NULL
>2746	Identifier	NULL
>2747	Identifier	padfScanline
>2748	ExpressionStatement	 
>2749	AssignmentExpr	padfThisLine = padfTempLine
>2750	Identifier	padfTempLine
>2751	Identifier	padfThisLine
>2752	ExpressionStatement	 
>2753	AssignmentExpr	padfLastLine = padfThisLine
>2754	Identifier	padfThisLine
>2755	Identifier	padfLastLine
>2756	IdentifierDeclStatement	 
>2757	IdentifierDecl	* padfTempLine = padfLastLine
>2758	AssignmentExpr	* padfTempLine = padfLastLine
>2759	Identifier	padfLastLine
>2760	Identifier	padfLastLine
>2761	Identifier	padfTempLine
>2762	IdentifierDeclType	double *
>2802	FunctionDef	GDALContourGenerator 
>2803	ParameterList	int bOnlyUnused
>2804	Parameter	 
>2805	Identifier	bOnlyUnused
>2806	ParameterType	int
>2807	ReturnType	CPLErr
>2808	CompoundStatement	 
>2809	ReturnStatement	 
>2810	Identifier	eErr
>2811	ForStatement	for ( iLevel = 0 ; iLevel < nLevelCount && eErr == CE_None ; iLevel ++ )
>2812	CompoundStatement	 
>2813	ForStatement	for ( iContour = 0 ; iContour < poLevel -> GetContourCount ( ) && eErr == CE_None ; )
>2814	CompoundStatement	 
>2815	ExpressionStatement	 
>2816	Identifier	poTarget
>2817	Statement	 
>2818	IfStatement	if ( iC2 == poLevel -> GetContourCount ( ) )
>2819	CompoundStatement	 
>2820	IfStatement	if ( pfnWriter != NULL )
>2821	CompoundStatement	 
>2822	ExpressionStatement	 
>2823	AssignmentExpr	eErr = pfnWriter ( poTarget -> dfLevel , poTarget -> nPoints , poTarget -> padfX , poTarget -> padfY , \
>2824	CallExpression	pfnWriter ( poTarget -> dfLevel , poTarget -> nPoints , poTarget -> padfX , poTarget -> padfY , pWriterCBData )
>2825	ArgumentList	poTarget -> dfLevel
>2826	Argument	pWriterCBData
>2827	Identifier	pWriterCBData
>2828	Argument	poTarget -> padfY
>2829	PtrMemberAccess	poTarget -> padfY
>2830	Identifier	padfY
>2831	Identifier	poTarget
>2832	Argument	poTarget -> padfX
>2833	PtrMemberAccess	poTarget -> padfX
>2834	Identifier	padfX
>2835	Identifier	poTarget
>2836	Argument	poTarget -> nPoints
>2837	PtrMemberAccess	poTarget -> nPoints
>2838	Identifier	nPoints
>2839	Identifier	poTarget
>2840	Argument	poTarget -> dfLevel
>2841	PtrMemberAccess	poTarget -> dfLevel
>2842	Identifier	dfLevel
>2843	Identifier	poTarget
>2844	Callee	pfnWriter
>2845	Identifier	pfnWriter
>2846	Identifier	eErr
>2847	ExpressionStatement	 
>2848	CallExpression	poTarget -> PrepareEjection ( )
>2849	ArgumentList	 
>2850	Callee	poTarget -> PrepareEjection
>2851	PtrMemberAccess	poTarget -> PrepareEjection
>2852	Identifier	PrepareEjection
>2853	Identifier	poTarget
>2854	Condition	 
>2855	EqualityExpression	pfnWriter != NULL
>2856	Identifier	NULL
>2857	Identifier	pfnWriter
>2858	Condition	 
>2859	EqualityExpression	iC2 == poLevel -> GetContourCount ( )
>2860	CallExpression	poLevel -> GetContourCount ( )
>2861	ArgumentList	 
>2862	Callee	poLevel -> GetContourCount
>2863	PtrMemberAccess	poLevel -> GetContourCount
>2864	Identifier	GetContourCount
>2865	Identifier	poLevel
>2866	Identifier	iC2
>2867	ForStatement	for ( iC2 = 0 ; iC2 < poLevel -> GetContourCount ( ) ; iC2 ++ )
>2868	CompoundStatement	 
>2869	IfStatement	if ( poOther -> Merge ( poTarget ) )
>2870	BreakStatement	 
>2871	Condition	 
>2872	CallExpression	poOther -> Merge ( poTarget )
>2873	ArgumentList	poTarget
>2874	Argument	poTarget
>2875	Identifier	poTarget
>2876	Callee	poOther -> Merge
>2877	PtrMemberAccess	poOther -> Merge
>2878	Identifier	Merge
>2879	Identifier	poOther
>2880	IdentifierDeclStatement	 
>2881	IdentifierDecl	* poOther = poLevel -> GetContour ( iC2 )
>2882	AssignmentExpr	* poOther = poLevel -> GetContour ( iC2 )
>2883	CallExpression	poLevel -> GetContour ( iC2 )
>2884	ArgumentList	iC2
>2885	Argument	iC2
>2886	Identifier	iC2
>2887	Callee	poLevel -> GetContour
>2888	PtrMemberAccess	poLevel -> GetContour
>2889	Identifier	GetContour
>2890	Identifier	poLevel
>2891	Identifier	poOther
>2892	Identifier	poOther
>2893	IdentifierDeclType	GDALContourItem *
>2894	IncDecOp	 
>2895	IncDec	++
>2896	Identifier	iC2
>2897	Condition	 
>2898	RelationalExpression	iC2 < poLevel -> GetContourCount ( )
>2899	CallExpression	poLevel -> GetContourCount ( )
>2900	ArgumentList	 
>2901	Callee	poLevel -> GetContourCount
>2902	PtrMemberAccess	poLevel -> GetContourCount
>2903	Identifier	GetContourCount
>2904	Identifier	poLevel
>2905	Identifier	iC2
>2906	ForInit	 
>2907	AssignmentExpr	iC2 = 0
>2908	PrimaryExpression	0
>2909	Identifier	iC2
>2910	ExpressionStatement	 
>2911	CallExpression	poLevel -> RemoveContour ( iContour )
>2912	ArgumentList	iContour
>2913	Argument	iContour
>2914	Identifier	iContour
>2915	Callee	poLevel -> RemoveContour
>2916	PtrMemberAccess	poLevel -> RemoveContour
>2917	Identifier	RemoveContour
>2918	Identifier	poLevel
>2919	IfStatement	if ( bOnlyUnused && poTarget -> bRecentlyAccessed )
>2920	CompoundStatement	 
>2921	ContinueStatement	 
>2922	ExpressionStatement	 
>2923	IncDecOp	iContour ++
>2924	IncDec	++
>2925	Identifier	iContour
>2926	Condition	 
>2927	AndExpression	bOnlyUnused && poTarget -> bRecentlyAccessed
>2928	PtrMemberAccess	poTarget -> bRecentlyAccessed
>2929	Identifier	bRecentlyAccessed
>2930	Identifier	poTarget
>2931	Identifier	bOnlyUnused
>2932	IdentifierDeclStatement	 
>2933	IdentifierDecl	* poTarget = poLevel -> GetContour ( iContour )
>2934	AssignmentExpr	* poTarget = poLevel -> GetContour ( iContour )
>2935	CallExpression	poLevel -> GetContour ( iContour )
>2936	ArgumentList	iContour
>2937	Argument	iContour
>2938	Identifier	iContour
>2939	Callee	poLevel -> GetContour
>2940	PtrMemberAccess	poLevel -> GetContour
>2941	Identifier	GetContour
>2942	Identifier	poLevel
>2943	Identifier	poTarget
>2944	Identifier	poTarget
>2945	IdentifierDeclType	GDALContourItem *
>2946	IdentifierDeclStatement	 
>2947	IdentifierDecl	iC2
>2948	Identifier	iC2
>2949	IdentifierDeclType	int
>2950	Condition	 
>2951	AndExpression	iContour < poLevel -> GetContourCount ( ) && eErr == CE_None
>2952	EqualityExpression	eErr == CE_None
>2953	Identifier	CE_None
>2954	Identifier	eErr
>2955	RelationalExpression	iContour < poLevel -> GetContourCount ( )
>2956	CallExpression	poLevel -> GetContourCount ( )
>2957	ArgumentList	 
>2958	Callee	poLevel -> GetContourCount
>2959	PtrMemberAccess	poLevel -> GetContourCount
>2960	Identifier	GetContourCount
>2961	Identifier	poLevel
>2962	Identifier	iContour
>2963	ForInit	 
>2964	AssignmentExpr	iContour = 0
>2965	PrimaryExpression	0
>2966	Identifier	iContour
>2967	IdentifierDeclStatement	 
>2968	IdentifierDecl	iContour
>2969	Identifier	iContour
>2970	IdentifierDeclType	int
>2971	IdentifierDeclStatement	 
>2972	IdentifierDecl	* poLevel = papoLevels [ iLevel ]
>2973	AssignmentExpr	* poLevel = papoLevels [ iLevel ]
>2974	ArrayIndexing	papoLevels [ iLevel ]
>2975	Identifier	iLevel
>2976	Identifier	papoLevels
>2977	Identifier	poLevel
>2978	Identifier	poLevel
>2979	IdentifierDeclType	GDALContourLevel *
>2980	IncDecOp	 
>2981	IncDec	++
>2982	Identifier	iLevel
>2983	Condition	 
>2984	AndExpression	iLevel < nLevelCount && eErr == CE_None
>2985	EqualityExpression	eErr == CE_None
>2986	Identifier	CE_None
>2987	Identifier	eErr
>2988	RelationalExpression	iLevel < nLevelCount
>2989	Identifier	nLevelCount
>2990	Identifier	iLevel
>2991	ForInit	 
>2992	AssignmentExpr	iLevel = 0
>2993	PrimaryExpression	0
>2994	Identifier	iLevel
>2995	IdentifierDeclStatement	 
>2996	IdentifierDecl	eErr = CE_None
>2997	AssignmentExpr	eErr = CE_None
>2998	Identifier	CE_None
>2999	Identifier	CE_None
>3000	Identifier	eErr
>3001	IdentifierDeclType	CPLErr
>3002	IdentifierDeclStatement	 
>3003	IdentifierDecl	iLevel
>3004	Identifier	iLevel
>3005	IdentifierDeclType	int
>3036	FunctionDef	GDALContourGenerator 
>3037	ParameterList	double dfLevel
>3038	Parameter	 
>3039	Identifier	dfLevel
>3040	ParameterType	double
>3041	ReturnType	GDALContourLevel *
>3042	CompoundStatement	 
>3043	ReturnStatement	 
>3044	Identifier	poLevel
>3045	ExpressionStatement	 
>3046	IncDecOp	nLevelCount ++
>3047	IncDec	++
>3048	Identifier	nLevelCount
>3049	ExpressionStatement	 
>3050	AssignmentExpr	papoLevels [ nEnd + 1 ] = poLevel
>3051	Identifier	poLevel
>3052	ArrayIndexing	papoLevels [ nEnd + 1 ]
>3053	AdditiveExpression	nEnd + 1
>3054	PrimaryExpression	1
>3055	Identifier	nEnd
>3056	Identifier	papoLevels
>3057	IfStatement	if ( nLevelCount - nEnd - 1 > 0 )
>3058	ExpressionStatement	 
>3059	CallExpression	memmove ( papoLevels + nEnd + 2 , papoLevels + nEnd + 1 , ( nLevelCount - nEnd - 1 ) * sizeof ( void * ) )
>3060	ArgumentList	papoLevels + nEnd + 2
>3061	Argument	( nLevelCount - nEnd - 1 ) * sizeof ( void * )
>3062	MultiplicativeExpression	( nLevelCount - nEnd - 1 ) * sizeof ( void * )
>3063	SizeofExpr	sizeof ( void * )
>3064	SizeofOperand	void *
>3065	Sizeof	sizeof
>3066	AdditiveExpression	nLevelCount - nEnd - 1
>3067	AdditiveExpression	nEnd - 1
>3068	PrimaryExpression	1
>3069	Identifier	nEnd
>3070	Identifier	nLevelCount
>3071	Argument	papoLevels + nEnd + 1
>3072	AdditiveExpression	papoLevels + nEnd + 1
>3073	AdditiveExpression	nEnd + 1
>3074	PrimaryExpression	1
>3075	Identifier	nEnd
>3076	Identifier	papoLevels
>3077	Argument	papoLevels + nEnd + 2
>3078	AdditiveExpression	papoLevels + nEnd + 2
>3079	AdditiveExpression	nEnd + 2
>3080	PrimaryExpression	2
>3081	Identifier	nEnd
>3082	Identifier	papoLevels
>3083	Callee	memmove
>3084	Identifier	memmove
>3085	Condition	 
>3086	RelationalExpression	nLevelCount - nEnd - 1 > 0
>3087	PrimaryExpression	0
>3088	AdditiveExpression	nLevelCount - nEnd - 1
>3089	AdditiveExpression	nEnd - 1
>3090	PrimaryExpression	1
>3091	Identifier	nEnd
>3092	Identifier	nLevelCount
>3093	IfStatement	if ( nLevelMax == nLevelCount )
>3094	CompoundStatement	 
>3095	ExpressionStatement	 
>3096	AssignmentExpr	papoLevels = ( GDALContourLevel * * ) CPLRealloc ( papoLevels , sizeof ( void * ) * nLevelMax )
>3097	CastExpression	( GDALContourLevel * * ) CPLRealloc ( papoLevels , sizeof ( void * ) * nLevelMax )
>3098	CallExpression	CPLRealloc ( papoLevels , sizeof ( void * ) * nLevelMax )
>3099	ArgumentList	papoLevels
>3100	Argument	sizeof ( void * ) * nLevelMax
>3101	MultiplicativeExpression	sizeof ( void * ) * nLevelMax
>3102	Identifier	nLevelMax
>3103	SizeofExpr	sizeof ( void * )
>3104	SizeofOperand	void *
>3105	Sizeof	sizeof
>3106	Argument	papoLevels
>3107	Identifier	papoLevels
>3108	Callee	CPLRealloc
>3109	Identifier	CPLRealloc
>3110	CastTarget	GDALContourLevel * *
>3111	Identifier	papoLevels
>3112	ExpressionStatement	 
>3113	AssignmentExpr	nLevelMax = nLevelMax * 2 + 10
>3114	AdditiveExpression	nLevelMax * 2 + 10
>3115	PrimaryExpression	10
>3116	MultiplicativeExpression	nLevelMax * 2
>3117	PrimaryExpression	2
>3118	Identifier	nLevelMax
>3119	Identifier	nLevelMax
>3120	Condition	 
>3121	EqualityExpression	nLevelMax == nLevelCount
>3122	Identifier	nLevelCount
>3123	Identifier	nLevelMax
>3124	IdentifierDeclStatement	 
>3125	IdentifierDecl	* poLevel = new GDALContourLevel ( dfLevel )
>3126	AssignmentExpr	* poLevel = new GDALContourLevel ( dfLevel )
>3127	Identifier	dfLevel
>3128	Identifier	dfLevel
>3129	Identifier	poLevel
>3130	IdentifierDeclType	GDALContourLevel *
>3131	WhileStatement	while ( nStart <= nEnd )
>3132	CompoundStatement	 
>3133	IfStatement	if ( dfMiddleLevel < dfLevel )
>3134	ElseStatement	else
>3135	IfStatement	if ( dfMiddleLevel > dfLevel )
>3136	ElseStatement	else
>3137	ReturnStatement	 
>3138	ArrayIndexing	papoLevels [ nMiddle ]
>3139	Identifier	nMiddle
>3140	Identifier	papoLevels
>3141	ExpressionStatement	 
>3142	AssignmentExpr	nEnd = nMiddle - 1
>3143	AdditiveExpression	nMiddle - 1
>3144	PrimaryExpression	1
>3145	Identifier	nMiddle
>3146	Identifier	nEnd
>3147	Condition	 
>3148	RelationalExpression	dfMiddleLevel > dfLevel
>3149	Identifier	dfLevel
>3150	Identifier	dfMiddleLevel
>3151	ExpressionStatement	 
>3152	AssignmentExpr	nStart = nMiddle + 1
>3153	AdditiveExpression	nMiddle + 1
>3154	PrimaryExpression	1
>3155	Identifier	nMiddle
>3156	Identifier	nStart
>3157	Condition	 
>3158	RelationalExpression	dfMiddleLevel < dfLevel
>3159	Identifier	dfLevel
>3160	Identifier	dfMiddleLevel
>3161	IdentifierDeclStatement	 
>3162	IdentifierDecl	dfMiddleLevel = papoLevels [ nMiddle ] -> GetLevel ( )
>3163	AssignmentExpr	dfMiddleLevel = papoLevels [ nMiddle ] -> GetLevel ( )
>3164	CallExpression	papoLevels [ nMiddle ] -> GetLevel ( )
>3165	ArgumentList	 
>3166	Callee	papoLevels [ nMiddle ] -> GetLevel
>3167	PtrMemberAccess	papoLevels [ nMiddle ] -> GetLevel
>3168	Identifier	GetLevel
>3169	ArrayIndexing	papoLevels [ nMiddle ]
>3170	Identifier	nMiddle
>3171	Identifier	papoLevels
>3172	Identifier	dfMiddleLevel
>3173	Identifier	dfMiddleLevel
>3174	IdentifierDeclType	double
>3175	ExpressionStatement	 
>3176	AssignmentExpr	nMiddle = ( nEnd + nStart ) / 2
>3177	MultiplicativeExpression	( nEnd + nStart ) / 2
>3178	PrimaryExpression	2
>3179	AdditiveExpression	nEnd + nStart
>3180	Identifier	nStart
>3181	Identifier	nEnd
>3182	Identifier	nMiddle
>3183	Condition	 
>3184	RelationalExpression	nStart <= nEnd
>3185	Identifier	nEnd
>3186	Identifier	nStart
>3187	IdentifierDeclStatement	 
>3188	IdentifierDecl	nMiddle
>3189	Identifier	nMiddle
>3190	IdentifierDeclType	int
>3191	IdentifierDecl	nEnd = nLevelCount - 1
>3192	AssignmentExpr	nEnd = nLevelCount - 1
>3193	AdditiveExpression	nLevelCount - 1
>3194	PrimaryExpression	1
>3195	Identifier	nLevelCount
>3196	Identifier	nEnd
>3197	Identifier	nEnd
>3198	IdentifierDeclType	int
>3199	IdentifierDecl	nStart = 0
>3200	AssignmentExpr	nStart = 0
>3201	PrimaryExpression	0
>3202	Identifier	nStart
>3203	Identifier	nStart
>3204	IdentifierDeclType	int
>3224	FunctionDef	GDALContourLevel 
>3225	ParameterList	double dfLevelIn
>3226	Parameter	 
>3227	Identifier	dfLevelIn
>3228	ParameterType	double
>3229	CompoundStatement	 
>3230	ExpressionStatement	 
>3231	AssignmentExpr	papoEntries = NULL
>3232	Identifier	NULL
>3233	Identifier	papoEntries
>3234	ExpressionStatement	 
>3235	AssignmentExpr	nEntryCount = 0
>3236	PrimaryExpression	0
>3237	Identifier	nEntryCount
>3238	ExpressionStatement	 
>3239	AssignmentExpr	nEntryMax = 0
>3240	PrimaryExpression	0
>3241	Identifier	nEntryMax
>3242	ExpressionStatement	 
>3243	AssignmentExpr	dfLevel = dfLevelIn
>3244	Identifier	dfLevelIn
>3245	Identifier	dfLevel
>3255	FunctionDef	GDALContourLevel 
>3256	ParameterList	 
>3257	CompoundStatement	 
>3258	ExpressionStatement	 
>3259	CallExpression	CPLFree ( papoEntries )
>3260	ArgumentList	papoEntries
>3261	Argument	papoEntries
>3262	Identifier	papoEntries
>3263	Callee	CPLFree
>3264	Identifier	CPLFree
>3265	ExpressionStatement	 
>3266	CallExpression	CPLAssert ( nEntryCount == 0 )
>3267	ArgumentList	nEntryCount == 0
>3268	Argument	nEntryCount == 0
>3269	EqualityExpression	nEntryCount == 0
>3270	PrimaryExpression	0
>3271	Identifier	nEntryCount
>3272	Callee	CPLAssert
>3273	Identifier	CPLAssert
>3279	FunctionDef	GDALContourLevel 
>3280	ParameterList	int iChanged
>3281	Parameter	 
>3282	Identifier	iChanged
>3283	ParameterType	int
>3284	ReturnType	void
>3285	CompoundStatement	 
>3286	WhileStatement	while ( iChanged < nEntryCount - 1 && papoEntries [ iChanged ] -> dfTailX > papoEntries [ iChanged + 1 ] -> dfTailX )
>3287	CompoundStatement	 
>3288	ExpressionStatement	 
>3289	IncDecOp	iChanged ++
>3290	IncDec	++
>3291	Identifier	iChanged
>3292	ExpressionStatement	 
>3293	AssignmentExpr	papoEntries [ iChanged + 1 ] = poTemp
>3294	Identifier	poTemp
>3295	ArrayIndexing	papoEntries [ iChanged + 1 ]
>3296	AdditiveExpression	iChanged + 1
>3297	PrimaryExpression	1
>3298	Identifier	iChanged
>3299	Identifier	papoEntries
>3300	ExpressionStatement	 
>3301	AssignmentExpr	papoEntries [ iChanged ] = papoEntries [ iChanged + 1 ]
>3302	ArrayIndexing	papoEntries [ iChanged + 1 ]
>3303	AdditiveExpression	iChanged + 1
>3304	PrimaryExpression	1
>3305	Identifier	iChanged
>3306	Identifier	papoEntries
>3307	ArrayIndexing	papoEntries [ iChanged ]
>3308	Identifier	iChanged
>3309	Identifier	papoEntries
>3310	IdentifierDeclStatement	 
>3311	IdentifierDecl	* poTemp = papoEntries [ iChanged ]
>3312	AssignmentExpr	* poTemp = papoEntries [ iChanged ]
>3313	ArrayIndexing	papoEntries [ iChanged ]
>3314	Identifier	iChanged
>3315	Identifier	papoEntries
>3316	Identifier	poTemp
>3317	Identifier	poTemp
>3318	IdentifierDeclType	GDALContourItem *
>3319	Condition	 
>3320	AndExpression	iChanged < nEntryCount - 1 && papoEntries [ iChanged ] -> dfTailX > papoEntries [ iChanged + 1 ] -> \
>3321	RelationalExpression	papoEntries [ iChanged ] -> dfTailX > papoEntries [ iChanged + 1 ] -> dfTailX
>3322	PtrMemberAccess	papoEntries [ iChanged + 1 ] -> dfTailX
>3323	Identifier	dfTailX
>3324	ArrayIndexing	papoEntries [ iChanged + 1 ]
>3325	AdditiveExpression	iChanged + 1
>3326	PrimaryExpression	1
>3327	Identifier	iChanged
>3328	Identifier	papoEntries
>3329	PtrMemberAccess	papoEntries [ iChanged ] -> dfTailX
>3330	Identifier	dfTailX
>3331	ArrayIndexing	papoEntries [ iChanged ]
>3332	Identifier	iChanged
>3333	Identifier	papoEntries
>3334	RelationalExpression	iChanged < nEntryCount - 1
>3335	AdditiveExpression	nEntryCount - 1
>3336	PrimaryExpression	1
>3337	Identifier	nEntryCount
>3338	Identifier	iChanged
>3339	WhileStatement	while ( iChanged > 0 && papoEntries [ iChanged ] -> dfTailX < papoEntries [ iChanged - 1 ] -> dfTailX )
>3340	CompoundStatement	 
>3341	ExpressionStatement	 
>3342	IncDecOp	iChanged --
>3343	IncDec	--
>3344	Identifier	iChanged
>3345	ExpressionStatement	 
>3346	AssignmentExpr	papoEntries [ iChanged - 1 ] = poTemp
>3347	Identifier	poTemp
>3348	ArrayIndexing	papoEntries [ iChanged - 1 ]
>3349	AdditiveExpression	iChanged - 1
>3350	PrimaryExpression	1
>3351	Identifier	iChanged
>3352	Identifier	papoEntries
>3353	ExpressionStatement	 
>3354	AssignmentExpr	papoEntries [ iChanged ] = papoEntries [ iChanged - 1 ]
>3355	ArrayIndexing	papoEntries [ iChanged - 1 ]
>3356	AdditiveExpression	iChanged - 1
>3357	PrimaryExpression	1
>3358	Identifier	iChanged
>3359	Identifier	papoEntries
>3360	ArrayIndexing	papoEntries [ iChanged ]
>3361	Identifier	iChanged
>3362	Identifier	papoEntries
>3363	IdentifierDeclStatement	 
>3364	IdentifierDecl	* poTemp = papoEntries [ iChanged ]
>3365	AssignmentExpr	* poTemp = papoEntries [ iChanged ]
>3366	ArrayIndexing	papoEntries [ iChanged ]
>3367	Identifier	iChanged
>3368	Identifier	papoEntries
>3369	Identifier	poTemp
>3370	Identifier	poTemp
>3371	IdentifierDeclType	GDALContourItem *
>3372	Condition	 
>3373	AndExpression	iChanged > 0 && papoEntries [ iChanged ] -> dfTailX < papoEntries [ iChanged - 1 ] -> dfTailX
>3374	RelationalExpression	papoEntries [ iChanged ] -> dfTailX < papoEntries [ iChanged - 1 ] -> dfTailX
>3375	PtrMemberAccess	papoEntries [ iChanged - 1 ] -> dfTailX
>3376	Identifier	dfTailX
>3377	ArrayIndexing	papoEntries [ iChanged - 1 ]
>3378	AdditiveExpression	iChanged - 1
>3379	PrimaryExpression	1
>3380	Identifier	iChanged
>3381	Identifier	papoEntries
>3382	PtrMemberAccess	papoEntries [ iChanged ] -> dfTailX
>3383	Identifier	dfTailX
>3384	ArrayIndexing	papoEntries [ iChanged ]
>3385	Identifier	iChanged
>3386	Identifier	papoEntries
>3387	RelationalExpression	iChanged > 0
>3388	PrimaryExpression	0
>3389	Identifier	iChanged
>3404	FunctionDef	GDALContourLevel 
>3405	ParameterList	int iTarget
>3406	Parameter	 
>3407	Identifier	iTarget
>3408	ParameterType	int
>3409	ReturnType	void
>3410	CompoundStatement	 
>3411	ExpressionStatement	 
>3412	IncDecOp	nEntryCount --
>3413	IncDec	--
>3414	Identifier	nEntryCount
>3415	IfStatement	if ( iTarget < nEntryCount )
>3416	ExpressionStatement	 
>3417	CallExpression	memmove ( papoEntries + iTarget , papoEntries + iTarget + 1 , ( nEntryCount - iTarget - 1 ) * sizeof ( void * ) )
>3418	ArgumentList	papoEntries + iTarget
>3419	Argument	( nEntryCount - iTarget - 1 ) * sizeof ( void * )
>3420	MultiplicativeExpression	( nEntryCount - iTarget - 1 ) * sizeof ( void * )
>3421	SizeofExpr	sizeof ( void * )
>3422	SizeofOperand	void *
>3423	Sizeof	sizeof
>3424	AdditiveExpression	nEntryCount - iTarget - 1
>3425	AdditiveExpression	iTarget - 1
>3426	PrimaryExpression	1
>3427	Identifier	iTarget
>3428	Identifier	nEntryCount
>3429	Argument	papoEntries + iTarget + 1
>3430	AdditiveExpression	papoEntries + iTarget + 1
>3431	AdditiveExpression	iTarget + 1
>3432	PrimaryExpression	1
>3433	Identifier	iTarget
>3434	Identifier	papoEntries
>3435	Argument	papoEntries + iTarget
>3436	AdditiveExpression	papoEntries + iTarget
>3437	Identifier	iTarget
>3438	Identifier	papoEntries
>3439	Callee	memmove
>3440	Identifier	memmove
>3441	Condition	 
>3442	RelationalExpression	iTarget < nEntryCount
>3443	Identifier	nEntryCount
>3444	Identifier	iTarget
>3451	FunctionDef	GDALContourLevel 
>3452	ParameterList	double dfX , double dfY
>3453	Parameter	 
>3454	Identifier	dfY
>3455	ParameterType	double
>3456	Parameter	 
>3457	Identifier	dfX
>3458	ParameterType	double
>3459	ReturnType	int
>3460	CompoundStatement	 
>3461	ReturnStatement	 
>3462	UnaryOp	- 1
>3463	PrimaryExpression	1
>3464	UnaryOperator	-
>3465	WhileStatement	while ( nEnd >= nStart )
>3466	CompoundStatement	 
>3467	IfStatement	if ( dfMiddleX < dfX )
>3468	ElseStatement	else
>3469	IfStatement	if ( dfMiddleX > dfX )
>3470	ElseStatement	else
>3471	CompoundStatement	 
>3472	ReturnStatement	 
>3473	UnaryOp	- 1
>3474	PrimaryExpression	1
>3475	UnaryOperator	-
>3476	WhileStatement	while ( nMiddle < nEntryCount && fabs ( papoEntries [ nMiddle ] -> dfTailX - dfX ) < JOIN_DIST )
>3477	CompoundStatement	 
>3478	ExpressionStatement	 
>3479	IncDecOp	nMiddle ++
>3480	IncDec	++
>3481	Identifier	nMiddle
>3482	IfStatement	if ( fabs ( papoEntries [ nMiddle ] -> padfY [ papoEntries [ nMiddle ] -> nPoints - 1 ] - dfY ) < JOIN_DIST )
>3483	ReturnStatement	 
>3484	Identifier	nMiddle
>3485	Condition	 
>3486	RelationalExpression	fabs ( papoEntries [ nMiddle ] -> padfY [ papoEntries [ nMiddle ] -> nPoints - 1 ] - dfY ) < JOIN_DIST
>3487	Identifier	JOIN_DIST
>3488	CallExpression	fabs ( papoEntries [ nMiddle ] -> padfY [ papoEntries [ nMiddle ] -> nPoints - 1 ] - dfY )
>3489	ArgumentList	papoEntries [ nMiddle ] -> padfY [ papoEntries [ nMiddle ] -> nPoints - 1 ] - dfY
>3490	Argument	papoEntries [ nMiddle ] -> padfY [ papoEntries [ nMiddle ] -> nPoints - 1 ] - dfY
>3491	AdditiveExpression	papoEntries [ nMiddle ] -> padfY [ papoEntries [ nMiddle ] -> nPoints - 1 ] - dfY
>3492	Identifier	dfY
>3493	ArrayIndexing	papoEntries [ nMiddle ] -> padfY [ papoEntries [ nMiddle ] -> nPoints - 1 ]
>3494	AdditiveExpression	papoEntries [ nMiddle ] -> nPoints - 1
>3495	PrimaryExpression	1
>3496	PtrMemberAccess	papoEntries [ nMiddle ] -> nPoints
>3497	Identifier	nPoints
>3498	ArrayIndexing	papoEntries [ nMiddle ]
>3499	Identifier	nMiddle
>3500	Identifier	papoEntries
>3501	PtrMemberAccess	papoEntries [ nMiddle ] -> padfY
>3502	Identifier	padfY
>3503	ArrayIndexing	papoEntries [ nMiddle ]
>3504	Identifier	nMiddle
>3505	Identifier	papoEntries
>3506	Callee	fabs
>3507	Identifier	fabs
>3508	Condition	 
>3509	AndExpression	nMiddle < nEntryCount && fabs ( papoEntries [ nMiddle ] -> dfTailX - dfX ) < JOIN_DIST
>3510	RelationalExpression	fabs ( papoEntries [ nMiddle ] -> dfTailX - dfX ) < JOIN_DIST
>3511	Identifier	JOIN_DIST
>3512	CallExpression	fabs ( papoEntries [ nMiddle ] -> dfTailX - dfX )
>3513	ArgumentList	papoEntries [ nMiddle ] -> dfTailX - dfX
>3514	Argument	papoEntries [ nMiddle ] -> dfTailX - dfX
>3515	AdditiveExpression	papoEntries [ nMiddle ] -> dfTailX - dfX
>3516	Identifier	dfX
>3517	PtrMemberAccess	papoEntries [ nMiddle ] -> dfTailX
>3518	Identifier	dfTailX
>3519	ArrayIndexing	papoEntries [ nMiddle ]
>3520	Identifier	nMiddle
>3521	Identifier	papoEntries
>3522	Callee	fabs
>3523	Identifier	fabs
>3524	RelationalExpression	nMiddle < nEntryCount
>3525	Identifier	nEntryCount
>3526	Identifier	nMiddle
>3527	WhileStatement	while ( nMiddle > 0 && fabs ( papoEntries [ nMiddle ] -> dfTailX - dfX ) < JOIN_DIST )
>3528	ExpressionStatement	 
>3529	IncDecOp	nMiddle --
>3530	IncDec	--
>3531	Identifier	nMiddle
>3532	Condition	 
>3533	AndExpression	nMiddle > 0 && fabs ( papoEntries [ nMiddle ] -> dfTailX - dfX ) < JOIN_DIST
>3534	RelationalExpression	fabs ( papoEntries [ nMiddle ] -> dfTailX - dfX ) < JOIN_DIST
>3535	Identifier	JOIN_DIST
>3536	CallExpression	fabs ( papoEntries [ nMiddle ] -> dfTailX - dfX )
>3537	ArgumentList	papoEntries [ nMiddle ] -> dfTailX - dfX
>3538	Argument	papoEntries [ nMiddle ] -> dfTailX - dfX
>3539	AdditiveExpression	papoEntries [ nMiddle ] -> dfTailX - dfX
>3540	Identifier	dfX
>3541	PtrMemberAccess	papoEntries [ nMiddle ] -> dfTailX
>3542	Identifier	dfTailX
>3543	ArrayIndexing	papoEntries [ nMiddle ]
>3544	Identifier	nMiddle
>3545	Identifier	papoEntries
>3546	Callee	fabs
>3547	Identifier	fabs
>3548	RelationalExpression	nMiddle > 0
>3549	PrimaryExpression	0
>3550	Identifier	nMiddle
>3551	ExpressionStatement	 
>3552	AssignmentExpr	nEnd = nMiddle - 1
>3553	AdditiveExpression	nMiddle - 1
>3554	PrimaryExpression	1
>3555	Identifier	nMiddle
>3556	Identifier	nEnd
>3557	Condition	 
>3558	RelationalExpression	dfMiddleX > dfX
>3559	Identifier	dfX
>3560	Identifier	dfMiddleX
>3561	ExpressionStatement	 
>3562	AssignmentExpr	nStart = nMiddle + 1
>3563	AdditiveExpression	nMiddle + 1
>3564	PrimaryExpression	1
>3565	Identifier	nMiddle
>3566	Identifier	nStart
>3567	Condition	 
>3568	RelationalExpression	dfMiddleX < dfX
>3569	Identifier	dfX
>3570	Identifier	dfMiddleX
>3571	IdentifierDeclStatement	 
>3572	IdentifierDecl	dfMiddleX = papoEntries [ nMiddle ] -> dfTailX
>3573	AssignmentExpr	dfMiddleX = papoEntries [ nMiddle ] -> dfTailX
>3574	PtrMemberAccess	papoEntries [ nMiddle ] -> dfTailX
>3575	Identifier	dfTailX
>3576	ArrayIndexing	papoEntries [ nMiddle ]
>3577	Identifier	nMiddle
>3578	Identifier	papoEntries
>3579	Identifier	dfMiddleX
>3580	Identifier	dfMiddleX
>3581	IdentifierDeclType	double
>3582	ExpressionStatement	 
>3583	AssignmentExpr	nMiddle = ( nEnd + nStart ) / 2
>3584	MultiplicativeExpression	( nEnd + nStart ) / 2
>3585	PrimaryExpression	2
>3586	AdditiveExpression	nEnd + nStart
>3587	Identifier	nStart
>3588	Identifier	nEnd
>3589	Identifier	nMiddle
>3590	Condition	 
>3591	RelationalExpression	nEnd >= nStart
>3592	Identifier	nStart
>3593	Identifier	nEnd
>3594	IdentifierDeclStatement	 
>3595	IdentifierDecl	nMiddle
>3596	Identifier	nMiddle
>3597	IdentifierDeclType	int
>3598	IdentifierDecl	nEnd = nEntryCount - 1
>3599	AssignmentExpr	nEnd = nEntryCount - 1
>3600	AdditiveExpression	nEntryCount - 1
>3601	PrimaryExpression	1
>3602	Identifier	nEntryCount
>3603	Identifier	nEnd
>3604	Identifier	nEnd
>3605	IdentifierDeclType	int
>3606	IdentifierDecl	nStart = 0
>3607	AssignmentExpr	nStart = 0
>3608	PrimaryExpression	0
>3609	Identifier	nStart
>3610	Identifier	nStart
>3611	IdentifierDeclType	int
>3636	FunctionDef	GDALContourLevel 
>3637	ParameterList	GDALContourItem * poNewContour
>3638	Parameter	 
>3639	Identifier	poNewContour
>3640	ParameterType	GDALContourItem *
>3641	ReturnType	int
>3642	CompoundStatement	 
>3643	ReturnStatement	 
>3644	AdditiveExpression	nEnd + 1
>3645	PrimaryExpression	1
>3646	Identifier	nEnd
>3647	ExpressionStatement	 
>3648	IncDecOp	nEntryCount ++
>3649	IncDec	++
>3650	Identifier	nEntryCount
>3651	ExpressionStatement	 
>3652	AssignmentExpr	papoEntries [ nEnd + 1 ] = poNewContour
>3653	Identifier	poNewContour
>3654	ArrayIndexing	papoEntries [ nEnd + 1 ]
>3655	AdditiveExpression	nEnd + 1
>3656	PrimaryExpression	1
>3657	Identifier	nEnd
>3658	Identifier	papoEntries
>3659	IfStatement	if ( nEntryCount - nEnd - 1 > 0 )
>3660	ExpressionStatement	 
>3661	CallExpression	memmove ( papoEntries + nEnd + 2 , papoEntries + nEnd + 1 , ( nEntryCount - nEnd - 1 ) * sizeof ( void * ) )
>3662	ArgumentList	papoEntries + nEnd + 2
>3663	Argument	( nEntryCount - nEnd - 1 ) * sizeof ( void * )
>3664	MultiplicativeExpression	( nEntryCount - nEnd - 1 ) * sizeof ( void * )
>3665	SizeofExpr	sizeof ( void * )
>3666	SizeofOperand	void *
>3667	Sizeof	sizeof
>3668	AdditiveExpression	nEntryCount - nEnd - 1
>3669	AdditiveExpression	nEnd - 1
>3670	PrimaryExpression	1
>3671	Identifier	nEnd
>3672	Identifier	nEntryCount
>3673	Argument	papoEntries + nEnd + 1
>3674	AdditiveExpression	papoEntries + nEnd + 1
>3675	AdditiveExpression	nEnd + 1
>3676	PrimaryExpression	1
>3677	Identifier	nEnd
>3678	Identifier	papoEntries
>3679	Argument	papoEntries + nEnd + 2
>3680	AdditiveExpression	papoEntries + nEnd + 2
>3681	AdditiveExpression	nEnd + 2
>3682	PrimaryExpression	2
>3683	Identifier	nEnd
>3684	Identifier	papoEntries
>3685	Callee	memmove
>3686	Identifier	memmove
>3687	Condition	 
>3688	RelationalExpression	nEntryCount - nEnd - 1 > 0
>3689	PrimaryExpression	0
>3690	AdditiveExpression	nEntryCount - nEnd - 1
>3691	AdditiveExpression	nEnd - 1
>3692	PrimaryExpression	1
>3693	Identifier	nEnd
>3694	Identifier	nEntryCount
>3695	IfStatement	if ( nEntryMax == nEntryCount )
>3696	CompoundStatement	 
>3697	ExpressionStatement	 
>3698	AssignmentExpr	papoEntries = ( GDALContourItem * * ) CPLRealloc ( papoEntries , sizeof ( void * ) * nEntryMax )
>3699	CastExpression	( GDALContourItem * * ) CPLRealloc ( papoEntries , sizeof ( void * ) * nEntryMax )
>3700	CallExpression	CPLRealloc ( papoEntries , sizeof ( void * ) * nEntryMax )
>3701	ArgumentList	papoEntries
>3702	Argument	sizeof ( void * ) * nEntryMax
>3703	MultiplicativeExpression	sizeof ( void * ) * nEntryMax
>3704	Identifier	nEntryMax
>3705	SizeofExpr	sizeof ( void * )
>3706	SizeofOperand	void *
>3707	Sizeof	sizeof
>3708	Argument	papoEntries
>3709	Identifier	papoEntries
>3710	Callee	CPLRealloc
>3711	Identifier	CPLRealloc
>3712	CastTarget	GDALContourItem * *
>3713	Identifier	papoEntries
>3714	ExpressionStatement	 
>3715	AssignmentExpr	nEntryMax = nEntryMax * 2 + 10
>3716	AdditiveExpression	nEntryMax * 2 + 10
>3717	PrimaryExpression	10
>3718	MultiplicativeExpression	nEntryMax * 2
>3719	PrimaryExpression	2
>3720	Identifier	nEntryMax
>3721	Identifier	nEntryMax
>3722	Condition	 
>3723	EqualityExpression	nEntryMax == nEntryCount
>3724	Identifier	nEntryCount
>3725	Identifier	nEntryMax
>3726	WhileStatement	while ( nEnd >= nStart )
>3727	CompoundStatement	 
>3728	IfStatement	if ( dfMiddleX < poNewContour -> dfLevel )
>3729	ElseStatement	else
>3730	IfStatement	if ( dfMiddleX > poNewContour -> dfLevel )
>3731	ElseStatement	else
>3732	CompoundStatement	 
>3733	BreakStatement	 
>3734	ExpressionStatement	 
>3735	AssignmentExpr	nEnd = nMiddle - 1
>3736	AdditiveExpression	nMiddle - 1
>3737	PrimaryExpression	1
>3738	Identifier	nMiddle
>3739	Identifier	nEnd
>3740	ExpressionStatement	 
>3741	AssignmentExpr	nEnd = nMiddle - 1
>3742	AdditiveExpression	nMiddle - 1
>3743	PrimaryExpression	1
>3744	Identifier	nMiddle
>3745	Identifier	nEnd
>3746	Condition	 
>3747	RelationalExpression	dfMiddleX > poNewContour -> dfLevel
>3748	PtrMemberAccess	poNewContour -> dfLevel
>3749	Identifier	dfLevel
>3750	Identifier	poNewContour
>3751	Identifier	dfMiddleX
>3752	ExpressionStatement	 
>3753	AssignmentExpr	nStart = nMiddle + 1
>3754	AdditiveExpression	nMiddle + 1
>3755	PrimaryExpression	1
>3756	Identifier	nMiddle
>3757	Identifier	nStart
>3758	Condition	 
>3759	RelationalExpression	dfMiddleX < poNewContour -> dfLevel
>3760	PtrMemberAccess	poNewContour -> dfLevel
>3761	Identifier	dfLevel
>3762	Identifier	poNewContour
>3763	Identifier	dfMiddleX
>3764	IdentifierDeclStatement	 
>3765	IdentifierDecl	dfMiddleX = papoEntries [ nMiddle ] -> dfTailX
>3766	AssignmentExpr	dfMiddleX = papoEntries [ nMiddle ] -> dfTailX
>3767	PtrMemberAccess	papoEntries [ nMiddle ] -> dfTailX
>3768	Identifier	dfTailX
>3769	ArrayIndexing	papoEntries [ nMiddle ]
>3770	Identifier	nMiddle
>3771	Identifier	papoEntries
>3772	Identifier	dfMiddleX
>3773	Identifier	dfMiddleX
>3774	IdentifierDeclType	double
>3775	ExpressionStatement	 
>3776	AssignmentExpr	nMiddle = ( nEnd + nStart ) / 2
>3777	MultiplicativeExpression	( nEnd + nStart ) / 2
>3778	PrimaryExpression	2
>3779	AdditiveExpression	nEnd + nStart
>3780	Identifier	nStart
>3781	Identifier	nEnd
>3782	Identifier	nMiddle
>3783	Condition	 
>3784	RelationalExpression	nEnd >= nStart
>3785	Identifier	nStart
>3786	Identifier	nEnd
>3787	IdentifierDeclStatement	 
>3788	IdentifierDecl	nMiddle
>3789	Identifier	nMiddle
>3790	IdentifierDeclType	int
>3791	IdentifierDecl	nEnd = nEntryCount - 1
>3792	AssignmentExpr	nEnd = nEntryCount - 1
>3793	AdditiveExpression	nEntryCount - 1
>3794	PrimaryExpression	1
>3795	Identifier	nEntryCount
>3796	Identifier	nEnd
>3797	Identifier	nEnd
>3798	IdentifierDeclType	int
>3799	IdentifierDecl	nStart = 0
>3800	AssignmentExpr	nStart = 0
>3801	PrimaryExpression	0
>3802	Identifier	nStart
>3803	Identifier	nStart
>3804	IdentifierDeclType	int
>3825	FunctionDef	GDALContourItem 
>3826	ParameterList	double dfLevelIn
>3827	Parameter	 
>3828	Identifier	dfLevelIn
>3829	ParameterType	double
>3830	CompoundStatement	 
>3831	ExpressionStatement	 
>3832	AssignmentExpr	dfTailX = 0.0
>3833	PrimaryExpression	0.0
>3834	Identifier	dfTailX
>3835	ExpressionStatement	 
>3836	AssignmentExpr	bLeftIsHigh = FALSE
>3837	Identifier	FALSE
>3838	Identifier	bLeftIsHigh
>3839	ExpressionStatement	 
>3840	AssignmentExpr	padfY = NULL
>3841	Identifier	NULL
>3842	Identifier	padfY
>3843	ExpressionStatement	 
>3844	AssignmentExpr	padfX = NULL
>3845	Identifier	NULL
>3846	Identifier	padfX
>3847	ExpressionStatement	 
>3848	AssignmentExpr	nMaxPoints = 0
>3849	PrimaryExpression	0
>3850	Identifier	nMaxPoints
>3851	ExpressionStatement	 
>3852	AssignmentExpr	nPoints = 0
>3853	PrimaryExpression	0
>3854	Identifier	nPoints
>3855	ExpressionStatement	 
>3856	AssignmentExpr	bRecentlyAccessed = FALSE
>3857	Identifier	FALSE
>3858	Identifier	bRecentlyAccessed
>3859	ExpressionStatement	 
>3860	AssignmentExpr	dfLevel = dfLevelIn
>3861	Identifier	dfLevelIn
>3862	Identifier	dfLevel
>3877	FunctionDef	GDALContourItem 
>3878	ParameterList	 
>3879	CompoundStatement	 
>3880	ExpressionStatement	 
>3881	CallExpression	CPLFree ( padfY )
>3882	ArgumentList	padfY
>3883	Argument	padfY
>3884	Identifier	padfY
>3885	Callee	CPLFree
>3886	Identifier	CPLFree
>3887	ExpressionStatement	 
>3888	CallExpression	CPLFree ( padfX )
>3889	ArgumentList	padfX
>3890	Argument	padfX
>3891	Identifier	padfX
>3892	Callee	CPLFree
>3893	Identifier	CPLFree
>3899	FunctionDef	GDALContourItem 
>3900	ParameterList	double dfXStart , double dfYStart , double dfXEnd , double dfYEnd , int bLeftHigh
>3901	Parameter	 
>3902	Identifier	bLeftHigh
>3903	ParameterType	int
>3904	Parameter	 
>3905	Identifier	dfYEnd
>3906	ParameterType	double
>3907	Parameter	 
>3908	Identifier	dfXEnd
>3909	ParameterType	double
>3910	Parameter	 
>3911	Identifier	dfYStart
>3912	ParameterType	double
>3913	Parameter	 
>3914	Identifier	dfXStart
>3915	ParameterType	double
>3916	ReturnType	int
>3917	CompoundStatement	 
>3918	IfStatement	if ( fabs ( padfX [ nPoints - 1 ] - dfXStart ) < JOIN_DIST && fabs ( padfY [ nPoints - 1 ] - dfYStart ) < JOIN_DIST )
>3919	ElseStatement	else
>3920	IfStatement	if ( fabs ( padfX [ nPoints - 1 ] - dfXEnd ) < JOIN_DIST && fabs ( padfY [ nPoints - 1 ] - dfYEnd ) < JOIN_DIST )
>3921	ElseStatement	else
>3922	ReturnStatement	 
>3923	Identifier	FALSE
>3924	CompoundStatement	 
>3925	ReturnStatement	 
>3926	Identifier	TRUE
>3927	ExpressionStatement	 
>3928	AssignmentExpr	dfTailX = dfXStart
>3929	Identifier	dfXStart
>3930	Identifier	dfTailX
>3931	ExpressionStatement	 
>3932	AssignmentExpr	bRecentlyAccessed = TRUE
>3933	Identifier	TRUE
>3934	Identifier	bRecentlyAccessed
>3935	ExpressionStatement	 
>3936	IncDecOp	nPoints ++
>3937	IncDec	++
>3938	Identifier	nPoints
>3939	ExpressionStatement	 
>3940	AssignmentExpr	padfY [ nPoints ] = dfYStart
>3941	Identifier	dfYStart
>3942	ArrayIndexing	padfY [ nPoints ]
>3943	Identifier	nPoints
>3944	Identifier	padfY
>3945	ExpressionStatement	 
>3946	AssignmentExpr	padfX [ nPoints ] = dfXStart
>3947	Identifier	dfXStart
>3948	ArrayIndexing	padfX [ nPoints ]
>3949	Identifier	nPoints
>3950	Identifier	padfX
>3951	Condition	 
>3952	AndExpression	fabs ( padfX [ nPoints - 1 ] - dfXEnd ) < JOIN_DIST && fabs ( padfY [ nPoints - 1 ] - dfYEnd ) < JOIN_\
>3953	RelationalExpression	fabs ( padfY [ nPoints - 1 ] - dfYEnd ) < JOIN_DIST
>3954	Identifier	JOIN_DIST
>3955	CallExpression	fabs ( padfY [ nPoints - 1 ] - dfYEnd )
>3956	ArgumentList	padfY [ nPoints - 1 ] - dfYEnd
>3957	Argument	padfY [ nPoints - 1 ] - dfYEnd
>3958	AdditiveExpression	padfY [ nPoints - 1 ] - dfYEnd
>3959	Identifier	dfYEnd
>3960	ArrayIndexing	padfY [ nPoints - 1 ]
>3961	AdditiveExpression	nPoints - 1
>3962	PrimaryExpression	1
>3963	Identifier	nPoints
>3964	Identifier	padfY
>3965	Callee	fabs
>3966	Identifier	fabs
>3967	RelationalExpression	fabs ( padfX [ nPoints - 1 ] - dfXEnd ) < JOIN_DIST
>3968	Identifier	JOIN_DIST
>3969	CallExpression	fabs ( padfX [ nPoints - 1 ] - dfXEnd )
>3970	ArgumentList	padfX [ nPoints - 1 ] - dfXEnd
>3971	Argument	padfX [ nPoints - 1 ] - dfXEnd
>3972	AdditiveExpression	padfX [ nPoints - 1 ] - dfXEnd
>3973	Identifier	dfXEnd
>3974	ArrayIndexing	padfX [ nPoints - 1 ]
>3975	AdditiveExpression	nPoints - 1
>3976	PrimaryExpression	1
>3977	Identifier	nPoints
>3978	Identifier	padfX
>3979	Callee	fabs
>3980	Identifier	fabs
>3981	CompoundStatement	 
>3982	ReturnStatement	 
>3983	Identifier	TRUE
>3984	ExpressionStatement	 
>3985	AssignmentExpr	dfTailX = dfXEnd
>3986	Identifier	dfXEnd
>3987	Identifier	dfTailX
>3988	ExpressionStatement	 
>3989	AssignmentExpr	bRecentlyAccessed = TRUE
>3990	Identifier	TRUE
>3991	Identifier	bRecentlyAccessed
>3992	ExpressionStatement	 
>3993	IncDecOp	nPoints ++
>3994	IncDec	++
>3995	Identifier	nPoints
>3996	ExpressionStatement	 
>3997	AssignmentExpr	padfY [ nPoints ] = dfYEnd
>3998	Identifier	dfYEnd
>3999	ArrayIndexing	padfY [ nPoints ]
>4000	Identifier	nPoints
>4001	Identifier	padfY
>4002	ExpressionStatement	 
>4003	AssignmentExpr	padfX [ nPoints ] = dfXEnd
>4004	Identifier	dfXEnd
>4005	ArrayIndexing	padfX [ nPoints ]
>4006	Identifier	nPoints
>4007	Identifier	padfX
>4008	Condition	 
>4009	AndExpression	fabs ( padfX [ nPoints - 1 ] - dfXStart ) < JOIN_DIST && fabs ( padfY [ nPoints - 1 ] - dfYStart ) < \
>4010	RelationalExpression	fabs ( padfY [ nPoints - 1 ] - dfYStart ) < JOIN_DIST
>4011	Identifier	JOIN_DIST
>4012	CallExpression	fabs ( padfY [ nPoints - 1 ] - dfYStart )
>4013	ArgumentList	padfY [ nPoints - 1 ] - dfYStart
>4014	Argument	padfY [ nPoints - 1 ] - dfYStart
>4015	AdditiveExpression	padfY [ nPoints - 1 ] - dfYStart
>4016	Identifier	dfYStart
>4017	ArrayIndexing	padfY [ nPoints - 1 ]
>4018	AdditiveExpression	nPoints - 1
>4019	PrimaryExpression	1
>4020	Identifier	nPoints
>4021	Identifier	padfY
>4022	Callee	fabs
>4023	Identifier	fabs
>4024	RelationalExpression	fabs ( padfX [ nPoints - 1 ] - dfXStart ) < JOIN_DIST
>4025	Identifier	JOIN_DIST
>4026	CallExpression	fabs ( padfX [ nPoints - 1 ] - dfXStart )
>4027	ArgumentList	padfX [ nPoints - 1 ] - dfXStart
>4028	Argument	padfX [ nPoints - 1 ] - dfXStart
>4029	AdditiveExpression	padfX [ nPoints - 1 ] - dfXStart
>4030	Identifier	dfXStart
>4031	ArrayIndexing	padfX [ nPoints - 1 ]
>4032	AdditiveExpression	nPoints - 1
>4033	PrimaryExpression	1
>4034	Identifier	nPoints
>4035	Identifier	padfX
>4036	Callee	fabs
>4037	Identifier	fabs
>4038	IfStatement	if ( nPoints == 0 )
>4039	CompoundStatement	 
>4040	ReturnStatement	 
>4041	Identifier	TRUE
>4042	ExpressionStatement	 
>4043	AssignmentExpr	bLeftIsHigh = bLeftHigh
>4044	Identifier	bLeftHigh
>4045	Identifier	bLeftIsHigh
>4046	ExpressionStatement	 
>4047	AssignmentExpr	dfTailX = padfX [ 1 ]
>4048	ArrayIndexing	padfX [ 1 ]
>4049	PrimaryExpression	1
>4050	Identifier	padfX
>4051	Identifier	dfTailX
>4052	ExpressionStatement	 
>4053	AssignmentExpr	bRecentlyAccessed = TRUE
>4054	Identifier	TRUE
>4055	Identifier	bRecentlyAccessed
>4056	ExpressionStatement	 
>4057	AssignmentExpr	padfY [ 1 ] = dfYEnd
>4058	Identifier	dfYEnd
>4059	ArrayIndexing	padfY [ 1 ]
>4060	PrimaryExpression	1
>4061	Identifier	padfY
>4062	ExpressionStatement	 
>4063	AssignmentExpr	padfX [ 1 ] = dfXEnd
>4064	Identifier	dfXEnd
>4065	ArrayIndexing	padfX [ 1 ]
>4066	PrimaryExpression	1
>4067	Identifier	padfX
>4068	ExpressionStatement	 
>4069	AssignmentExpr	padfY [ 0 ] = dfYStart
>4070	Identifier	dfYStart
>4071	ArrayIndexing	padfY [ 0 ]
>4072	PrimaryExpression	0
>4073	Identifier	padfY
>4074	ExpressionStatement	 
>4075	AssignmentExpr	padfX [ 0 ] = dfXStart
>4076	Identifier	dfXStart
>4077	ArrayIndexing	padfX [ 0 ]
>4078	PrimaryExpression	0
>4079	Identifier	padfX
>4080	ExpressionStatement	 
>4081	AssignmentExpr	nPoints = 2
>4082	PrimaryExpression	2
>4083	Identifier	nPoints
>4084	Condition	 
>4085	EqualityExpression	nPoints == 0
>4086	PrimaryExpression	0
>4087	Identifier	nPoints
>4088	ExpressionStatement	 
>4089	CallExpression	MakeRoomFor ( nPoints + 1 )
>4090	ArgumentList	nPoints + 1
>4091	Argument	nPoints + 1
>4092	AdditiveExpression	nPoints + 1
>4093	PrimaryExpression	1
>4094	Identifier	nPoints
>4095	Callee	MakeRoomFor
>4096	Identifier	MakeRoomFor
>4118	FunctionDef	GDALContourItem 
>4119	ParameterList	GDALContourItem * poOther
>4120	Parameter	 
>4121	Identifier	poOther
>4122	ParameterType	GDALContourItem *
>4123	ReturnType	int
>4124	CompoundStatement	 
>4125	IfStatement	if ( fabs ( padfX [ nPoints - 1 ] - poOther -> padfX [ 0 ] ) < JOIN_DIST && fabs ( padfY [ nPoints - 1 ] - poOther \
>4126	ElseStatement	else
>4127	IfStatement	if ( fabs ( padfX [ 0 ] - poOther -> padfX [ poOther -> nPoints - 1 ] ) < JOIN_DIST && fabs ( padfY [ 0 ] - poOther \
>4128	ElseStatement	else
>4129	IfStatement	if ( fabs ( padfX [ nPoints - 1 ] - poOther -> padfX [ poOther -> nPoints - 1 ] ) < JOIN_DIST && fabs ( padfY [ \
>4130	ElseStatement	else
>4131	IfStatement	if ( fabs ( padfX [ 0 ] - poOther -> padfX [ 0 ] ) < JOIN_DIST && fabs ( padfY [ 0 ] - poOther -> padfY [ 0 ] ) < \
>4132	ElseStatement	else
>4133	ReturnStatement	 
>4134	Identifier	FALSE
>4135	CompoundStatement	 
>4136	ReturnStatement	 
>4137	Identifier	TRUE
>4138	ExpressionStatement	 
>4139	AssignmentExpr	dfTailX = padfX [ nPoints - 1 ]
>4140	ArrayIndexing	padfX [ nPoints - 1 ]
>4141	AdditiveExpression	nPoints - 1
>4142	PrimaryExpression	1
>4143	Identifier	nPoints
>4144	Identifier	padfX
>4145	Identifier	dfTailX
>4146	ExpressionStatement	 
>4147	AssignmentExpr	bRecentlyAccessed = TRUE
>4148	Identifier	TRUE
>4149	Identifier	bRecentlyAccessed
>4150	ExpressionStatement	 
>4151	AssignmentExpr	nPoints += poOther -> nPoints - 1
>4152	AdditiveExpression	poOther -> nPoints - 1
>4153	PrimaryExpression	1
>4154	PtrMemberAccess	poOther -> nPoints
>4155	Identifier	nPoints
>4156	Identifier	poOther
>4157	Identifier	nPoints
>4158	ForStatement	for ( i = 0 ; i < poOther -> nPoints - 1 ; i ++ )
>4159	CompoundStatement	 
>4160	ExpressionStatement	 
>4161	AssignmentExpr	padfY [ i ] = poOther -> padfY [ poOther -> nPoints - i - 1 ]
>4162	ArrayIndexing	poOther -> padfY [ poOther -> nPoints - i - 1 ]
>4163	AdditiveExpression	poOther -> nPoints - i - 1
>4164	AdditiveExpression	i - 1
>4165	PrimaryExpression	1
>4166	Identifier	i
>4167	PtrMemberAccess	poOther -> nPoints
>4168	Identifier	nPoints
>4169	Identifier	poOther
>4170	PtrMemberAccess	poOther -> padfY
>4171	Identifier	padfY
>4172	Identifier	poOther
>4173	ArrayIndexing	padfY [ i ]
>4174	Identifier	i
>4175	Identifier	padfY
>4176	ExpressionStatement	 
>4177	AssignmentExpr	padfX [ i ] = poOther -> padfX [ poOther -> nPoints - i - 1 ]
>4178	ArrayIndexing	poOther -> padfX [ poOther -> nPoints - i - 1 ]
>4179	AdditiveExpression	poOther -> nPoints - i - 1
>4180	AdditiveExpression	i - 1
>4181	PrimaryExpression	1
>4182	Identifier	i
>4183	PtrMemberAccess	poOther -> nPoints
>4184	Identifier	nPoints
>4185	Identifier	poOther
>4186	PtrMemberAccess	poOther -> padfX
>4187	Identifier	padfX
>4188	Identifier	poOther
>4189	ArrayIndexing	padfX [ i ]
>4190	Identifier	i
>4191	Identifier	padfX
>4192	IncDecOp	 
>4193	IncDec	++
>4194	Identifier	i
>4195	Condition	 
>4196	RelationalExpression	i < poOther -> nPoints - 1
>4197	AdditiveExpression	poOther -> nPoints - 1
>4198	PrimaryExpression	1
>4199	PtrMemberAccess	poOther -> nPoints
>4200	Identifier	nPoints
>4201	Identifier	poOther
>4202	Identifier	i
>4203	ForInit	 
>4204	AssignmentExpr	i = 0
>4205	PrimaryExpression	0
>4206	Identifier	i
>4207	ExpressionStatement	 
>4208	CallExpression	memmove ( padfY + poOther -> nPoints - 1 , padfY , sizeof ( double ) * nPoints )
>4209	ArgumentList	padfY + poOther -> nPoints - 1
>4210	Argument	sizeof ( double ) * nPoints
>4211	MultiplicativeExpression	sizeof ( double ) * nPoints
>4212	Identifier	nPoints
>4213	SizeofExpr	sizeof ( double )
>4214	SizeofOperand	double
>4215	Sizeof	sizeof
>4216	Argument	padfY
>4217	Identifier	padfY
>4218	Argument	padfY + poOther -> nPoints - 1
>4219	AdditiveExpression	padfY + poOther -> nPoints - 1
>4220	AdditiveExpression	poOther -> nPoints - 1
>4221	PrimaryExpression	1
>4222	PtrMemberAccess	poOther -> nPoints
>4223	Identifier	nPoints
>4224	Identifier	poOther
>4225	Identifier	padfY
>4226	Callee	memmove
>4227	Identifier	memmove
>4228	ExpressionStatement	 
>4229	CallExpression	memmove ( padfX + poOther -> nPoints - 1 , padfX , sizeof ( double ) * nPoints )
>4230	ArgumentList	padfX + poOther -> nPoints - 1
>4231	Argument	sizeof ( double ) * nPoints
>4232	MultiplicativeExpression	sizeof ( double ) * nPoints
>4233	Identifier	nPoints
>4234	SizeofExpr	sizeof ( double )
>4235	SizeofOperand	double
>4236	Sizeof	sizeof
>4237	Argument	padfX
>4238	Identifier	padfX
>4239	Argument	padfX + poOther -> nPoints - 1
>4240	AdditiveExpression	padfX + poOther -> nPoints - 1
>4241	AdditiveExpression	poOther -> nPoints - 1
>4242	PrimaryExpression	1
>4243	PtrMemberAccess	poOther -> nPoints
>4244	Identifier	nPoints
>4245	Identifier	poOther
>4246	Identifier	padfX
>4247	Callee	memmove
>4248	Identifier	memmove
>4249	ExpressionStatement	 
>4250	CallExpression	MakeRoomFor ( nPoints + poOther -> nPoints - 1 )
>4251	ArgumentList	nPoints + poOther -> nPoints - 1
>4252	Argument	nPoints + poOther -> nPoints - 1
>4253	AdditiveExpression	nPoints + poOther -> nPoints - 1
>4254	AdditiveExpression	poOther -> nPoints - 1
>4255	PrimaryExpression	1
>4256	PtrMemberAccess	poOther -> nPoints
>4257	Identifier	nPoints
>4258	Identifier	poOther
>4259	Identifier	nPoints
>4260	Callee	MakeRoomFor
>4261	Identifier	MakeRoomFor
>4262	IdentifierDeclStatement	 
>4263	IdentifierDecl	i
>4264	Identifier	i
>4265	IdentifierDeclType	int
>4266	Condition	 
>4267	AndExpression	fabs ( padfX [ 0 ] - poOther -> padfX [ 0 ] ) < JOIN_DIST && fabs ( padfY [ 0 ] - poOther -> padfY [ \
>4268	RelationalExpression	fabs ( padfY [ 0 ] - poOther -> padfY [ 0 ] ) < JOIN_DIST
>4269	Identifier	JOIN_DIST
>4270	CallExpression	fabs ( padfY [ 0 ] - poOther -> padfY [ 0 ] )
>4271	ArgumentList	padfY [ 0 ] - poOther -> padfY [ 0 ]
>4272	Argument	padfY [ 0 ] - poOther -> padfY [ 0 ]
>4273	AdditiveExpression	padfY [ 0 ] - poOther -> padfY [ 0 ]
>4274	ArrayIndexing	poOther -> padfY [ 0 ]
>4275	PrimaryExpression	0
>4276	PtrMemberAccess	poOther -> padfY
>4277	Identifier	padfY
>4278	Identifier	poOther
>4279	ArrayIndexing	padfY [ 0 ]
>4280	PrimaryExpression	0
>4281	Identifier	padfY
>4282	Callee	fabs
>4283	Identifier	fabs
>4284	RelationalExpression	fabs ( padfX [ 0 ] - poOther -> padfX [ 0 ] ) < JOIN_DIST
>4285	Identifier	JOIN_DIST
>4286	CallExpression	fabs ( padfX [ 0 ] - poOther -> padfX [ 0 ] )
>4287	ArgumentList	padfX [ 0 ] - poOther -> padfX [ 0 ]
>4288	Argument	padfX [ 0 ] - poOther -> padfX [ 0 ]
>4289	AdditiveExpression	padfX [ 0 ] - poOther -> padfX [ 0 ]
>4290	ArrayIndexing	poOther -> padfX [ 0 ]
>4291	PrimaryExpression	0
>4292	PtrMemberAccess	poOther -> padfX
>4293	Identifier	padfX
>4294	Identifier	poOther
>4295	ArrayIndexing	padfX [ 0 ]
>4296	PrimaryExpression	0
>4297	Identifier	padfX
>4298	Callee	fabs
>4299	Identifier	fabs
>4300	CompoundStatement	 
>4301	ReturnStatement	 
>4302	Identifier	TRUE
>4303	ExpressionStatement	 
>4304	AssignmentExpr	dfTailX = padfX [ nPoints - 1 ]
>4305	ArrayIndexing	padfX [ nPoints - 1 ]
>4306	AdditiveExpression	nPoints - 1
>4307	PrimaryExpression	1
>4308	Identifier	nPoints
>4309	Identifier	padfX
>4310	Identifier	dfTailX
>4311	ExpressionStatement	 
>4312	AssignmentExpr	bRecentlyAccessed = TRUE
>4313	Identifier	TRUE
>4314	Identifier	bRecentlyAccessed
>4315	ExpressionStatement	 
>4316	AssignmentExpr	nPoints += poOther -> nPoints - 1
>4317	AdditiveExpression	poOther -> nPoints - 1
>4318	PrimaryExpression	1
>4319	PtrMemberAccess	poOther -> nPoints
>4320	Identifier	nPoints
>4321	Identifier	poOther
>4322	Identifier	nPoints
>4323	ForStatement	for ( i = 0 ; i < poOther -> nPoints - 1 ; i ++ )
>4324	CompoundStatement	 
>4325	ExpressionStatement	 
>4326	AssignmentExpr	padfY [ i + nPoints ] = poOther -> padfY [ poOther -> nPoints - i - 2 ]
>4327	ArrayIndexing	poOther -> padfY [ poOther -> nPoints - i - 2 ]
>4328	AdditiveExpression	poOther -> nPoints - i - 2
>4329	AdditiveExpression	i - 2
>4330	PrimaryExpression	2
>4331	Identifier	i
>4332	PtrMemberAccess	poOther -> nPoints
>4333	Identifier	nPoints
>4334	Identifier	poOther
>4335	PtrMemberAccess	poOther -> padfY
>4336	Identifier	padfY
>4337	Identifier	poOther
>4338	ArrayIndexing	padfY [ i + nPoints ]
>4339	AdditiveExpression	i + nPoints
>4340	Identifier	nPoints
>4341	Identifier	i
>4342	Identifier	padfY
>4343	ExpressionStatement	 
>4344	AssignmentExpr	padfX [ i + nPoints ] = poOther -> padfX [ poOther -> nPoints - i - 2 ]
>4345	ArrayIndexing	poOther -> padfX [ poOther -> nPoints - i - 2 ]
>4346	AdditiveExpression	poOther -> nPoints - i - 2
>4347	AdditiveExpression	i - 2
>4348	PrimaryExpression	2
>4349	Identifier	i
>4350	PtrMemberAccess	poOther -> nPoints
>4351	Identifier	nPoints
>4352	Identifier	poOther
>4353	PtrMemberAccess	poOther -> padfX
>4354	Identifier	padfX
>4355	Identifier	poOther
>4356	ArrayIndexing	padfX [ i + nPoints ]
>4357	AdditiveExpression	i + nPoints
>4358	Identifier	nPoints
>4359	Identifier	i
>4360	Identifier	padfX
>4361	IncDecOp	 
>4362	IncDec	++
>4363	Identifier	i
>4364	Condition	 
>4365	RelationalExpression	i < poOther -> nPoints - 1
>4366	AdditiveExpression	poOther -> nPoints - 1
>4367	PrimaryExpression	1
>4368	PtrMemberAccess	poOther -> nPoints
>4369	Identifier	nPoints
>4370	Identifier	poOther
>4371	Identifier	i
>4372	ForInit	 
>4373	AssignmentExpr	i = 0
>4374	PrimaryExpression	0
>4375	Identifier	i
>4376	ExpressionStatement	 
>4377	CallExpression	MakeRoomFor ( nPoints + poOther -> nPoints - 1 )
>4378	ArgumentList	nPoints + poOther -> nPoints - 1
>4379	Argument	nPoints + poOther -> nPoints - 1
>4380	AdditiveExpression	nPoints + poOther -> nPoints - 1
>4381	AdditiveExpression	poOther -> nPoints - 1
>4382	PrimaryExpression	1
>4383	PtrMemberAccess	poOther -> nPoints
>4384	Identifier	nPoints
>4385	Identifier	poOther
>4386	Identifier	nPoints
>4387	Callee	MakeRoomFor
>4388	Identifier	MakeRoomFor
>4389	IdentifierDeclStatement	 
>4390	IdentifierDecl	i
>4391	Identifier	i
>4392	IdentifierDeclType	int
>4393	Condition	 
>4394	AndExpression	fabs ( padfX [ nPoints - 1 ] - poOther -> padfX [ poOther -> nPoints - 1 ] ) < JOIN_DIST && fabs ( padfY [ \
>4395	RelationalExpression	fabs ( padfY [ nPoints - 1 ] - poOther -> padfY [ poOther -> nPoints - 1 ] ) < JOIN_DIST
>4396	Identifier	JOIN_DIST
>4397	CallExpression	fabs ( padfY [ nPoints - 1 ] - poOther -> padfY [ poOther -> nPoints - 1 ] )
>4398	ArgumentList	padfY [ nPoints - 1 ] - poOther -> padfY [ poOther -> nPoints - 1 ]
>4399	Argument	padfY [ nPoints - 1 ] - poOther -> padfY [ poOther -> nPoints - 1 ]
>4400	AdditiveExpression	padfY [ nPoints - 1 ] - poOther -> padfY [ poOther -> nPoints - 1 ]
>4401	ArrayIndexing	poOther -> padfY [ poOther -> nPoints - 1 ]
>4402	AdditiveExpression	poOther -> nPoints - 1
>4403	PrimaryExpression	1
>4404	PtrMemberAccess	poOther -> nPoints
>4405	Identifier	nPoints
>4406	Identifier	poOther
>4407	PtrMemberAccess	poOther -> padfY
>4408	Identifier	padfY
>4409	Identifier	poOther
>4410	ArrayIndexing	padfY [ nPoints - 1 ]
>4411	AdditiveExpression	nPoints - 1
>4412	PrimaryExpression	1
>4413	Identifier	nPoints
>4414	Identifier	padfY
>4415	Callee	fabs
>4416	Identifier	fabs
>4417	RelationalExpression	fabs ( padfX [ nPoints - 1 ] - poOther -> padfX [ poOther -> nPoints - 1 ] ) < JOIN_DIST
>4418	Identifier	JOIN_DIST
>4419	CallExpression	fabs ( padfX [ nPoints - 1 ] - poOther -> padfX [ poOther -> nPoints - 1 ] )
>4420	ArgumentList	padfX [ nPoints - 1 ] - poOther -> padfX [ poOther -> nPoints - 1 ]
>4421	Argument	padfX [ nPoints - 1 ] - poOther -> padfX [ poOther -> nPoints - 1 ]
>4422	AdditiveExpression	padfX [ nPoints - 1 ] - poOther -> padfX [ poOther -> nPoints - 1 ]
>4423	ArrayIndexing	poOther -> padfX [ poOther -> nPoints - 1 ]
>4424	AdditiveExpression	poOther -> nPoints - 1
>4425	PrimaryExpression	1
>4426	PtrMemberAccess	poOther -> nPoints
>4427	Identifier	nPoints
>4428	Identifier	poOther
>4429	PtrMemberAccess	poOther -> padfX
>4430	Identifier	padfX
>4431	Identifier	poOther
>4432	ArrayIndexing	padfX [ nPoints - 1 ]
>4433	AdditiveExpression	nPoints - 1
>4434	PrimaryExpression	1
>4435	Identifier	nPoints
>4436	Identifier	padfX
>4437	Callee	fabs
>4438	Identifier	fabs
>4439	CompoundStatement	 
>4440	ReturnStatement	 
>4441	Identifier	TRUE
>4442	ExpressionStatement	 
>4443	AssignmentExpr	dfTailX = padfX [ nPoints - 1 ]
>4444	ArrayIndexing	padfX [ nPoints - 1 ]
>4445	AdditiveExpression	nPoints - 1
>4446	PrimaryExpression	1
>4447	Identifier	nPoints
>4448	Identifier	padfX
>4449	Identifier	dfTailX
>4450	ExpressionStatement	 
>4451	AssignmentExpr	bRecentlyAccessed = TRUE
>4452	Identifier	TRUE
>4453	Identifier	bRecentlyAccessed
>4454	ExpressionStatement	 
>4455	AssignmentExpr	nPoints += poOther -> nPoints - 1
>4456	AdditiveExpression	poOther -> nPoints - 1
>4457	PrimaryExpression	1
>4458	PtrMemberAccess	poOther -> nPoints
>4459	Identifier	nPoints
>4460	Identifier	poOther
>4461	Identifier	nPoints
>4462	ExpressionStatement	 
>4463	CallExpression	memcpy ( padfY , poOther -> padfY , sizeof ( double ) * ( poOther -> nPoints - 1 ) )
>4464	ArgumentList	padfY
>4465	Argument	sizeof ( double ) * ( poOther -> nPoints - 1 )
>4466	MultiplicativeExpression	sizeof ( double ) * ( poOther -> nPoints - 1 )
>4467	AdditiveExpression	poOther -> nPoints - 1
>4468	PrimaryExpression	1
>4469	PtrMemberAccess	poOther -> nPoints
>4470	Identifier	nPoints
>4471	Identifier	poOther
>4472	SizeofExpr	sizeof ( double )
>4473	SizeofOperand	double
>4474	Sizeof	sizeof
>4475	Argument	poOther -> padfY
>4476	PtrMemberAccess	poOther -> padfY
>4477	Identifier	padfY
>4478	Identifier	poOther
>4479	Argument	padfY
>4480	Identifier	padfY
>4481	Callee	memcpy
>4482	Identifier	memcpy
>4483	ExpressionStatement	 
>4484	CallExpression	memcpy ( padfX , poOther -> padfX , sizeof ( double ) * ( poOther -> nPoints - 1 ) )
>4485	ArgumentList	padfX
>4486	Argument	sizeof ( double ) * ( poOther -> nPoints - 1 )
>4487	MultiplicativeExpression	sizeof ( double ) * ( poOther -> nPoints - 1 )
>4488	AdditiveExpression	poOther -> nPoints - 1
>4489	PrimaryExpression	1
>4490	PtrMemberAccess	poOther -> nPoints
>4491	Identifier	nPoints
>4492	Identifier	poOther
>4493	SizeofExpr	sizeof ( double )
>4494	SizeofOperand	double
>4495	Sizeof	sizeof
>4496	Argument	poOther -> padfX
>4497	PtrMemberAccess	poOther -> padfX
>4498	Identifier	padfX
>4499	Identifier	poOther
>4500	Argument	padfX
>4501	Identifier	padfX
>4502	Callee	memcpy
>4503	Identifier	memcpy
>4504	ExpressionStatement	 
>4505	CallExpression	memmove ( padfY + poOther -> nPoints - 1 , padfY , sizeof ( double ) * nPoints )
>4506	ArgumentList	padfY + poOther -> nPoints - 1
>4507	Argument	sizeof ( double ) * nPoints
>4508	MultiplicativeExpression	sizeof ( double ) * nPoints
>4509	Identifier	nPoints
>4510	SizeofExpr	sizeof ( double )
>4511	SizeofOperand	double
>4512	Sizeof	sizeof
>4513	Argument	padfY
>4514	Identifier	padfY
>4515	Argument	padfY + poOther -> nPoints - 1
>4516	AdditiveExpression	padfY + poOther -> nPoints - 1
>4517	AdditiveExpression	poOther -> nPoints - 1
>4518	PrimaryExpression	1
>4519	PtrMemberAccess	poOther -> nPoints
>4520	Identifier	nPoints
>4521	Identifier	poOther
>4522	Identifier	padfY
>4523	Callee	memmove
>4524	Identifier	memmove
>4525	ExpressionStatement	 
>4526	CallExpression	memmove ( padfX + poOther -> nPoints - 1 , padfX , sizeof ( double ) * nPoints )
>4527	ArgumentList	padfX + poOther -> nPoints - 1
>4528	Argument	sizeof ( double ) * nPoints
>4529	MultiplicativeExpression	sizeof ( double ) * nPoints
>4530	Identifier	nPoints
>4531	SizeofExpr	sizeof ( double )
>4532	SizeofOperand	double
>4533	Sizeof	sizeof
>4534	Argument	padfX
>4535	Identifier	padfX
>4536	Argument	padfX + poOther -> nPoints - 1
>4537	AdditiveExpression	padfX + poOther -> nPoints - 1
>4538	AdditiveExpression	poOther -> nPoints - 1
>4539	PrimaryExpression	1
>4540	PtrMemberAccess	poOther -> nPoints
>4541	Identifier	nPoints
>4542	Identifier	poOther
>4543	Identifier	padfX
>4544	Callee	memmove
>4545	Identifier	memmove
>4546	ExpressionStatement	 
>4547	CallExpression	MakeRoomFor ( nPoints + poOther -> nPoints - 1 )
>4548	ArgumentList	nPoints + poOther -> nPoints - 1
>4549	Argument	nPoints + poOther -> nPoints - 1
>4550	AdditiveExpression	nPoints + poOther -> nPoints - 1
>4551	AdditiveExpression	poOther -> nPoints - 1
>4552	PrimaryExpression	1
>4553	PtrMemberAccess	poOther -> nPoints
>4554	Identifier	nPoints
>4555	Identifier	poOther
>4556	Identifier	nPoints
>4557	Callee	MakeRoomFor
>4558	Identifier	MakeRoomFor
>4559	Condition	 
>4560	AndExpression	fabs ( padfX [ 0 ] - poOther -> padfX [ poOther -> nPoints - 1 ] ) < JOIN_DIST && fabs ( padfY [ 0 ] \
>4561	RelationalExpression	fabs ( padfY [ 0 ] - poOther -> padfY [ poOther -> nPoints - 1 ] ) < JOIN_DIST
>4562	Identifier	JOIN_DIST
>4563	CallExpression	fabs ( padfY [ 0 ] - poOther -> padfY [ poOther -> nPoints - 1 ] )
>4564	ArgumentList	padfY [ 0 ] - poOther -> padfY [ poOther -> nPoints - 1 ]
>4565	Argument	padfY [ 0 ] - poOther -> padfY [ poOther -> nPoints - 1 ]
>4566	AdditiveExpression	padfY [ 0 ] - poOther -> padfY [ poOther -> nPoints - 1 ]
>4567	ArrayIndexing	poOther -> padfY [ poOther -> nPoints - 1 ]
>4568	AdditiveExpression	poOther -> nPoints - 1
>4569	PrimaryExpression	1
>4570	PtrMemberAccess	poOther -> nPoints
>4571	Identifier	nPoints
>4572	Identifier	poOther
>4573	PtrMemberAccess	poOther -> padfY
>4574	Identifier	padfY
>4575	Identifier	poOther
>4576	ArrayIndexing	padfY [ 0 ]
>4577	PrimaryExpression	0
>4578	Identifier	padfY
>4579	Callee	fabs
>4580	Identifier	fabs
>4581	RelationalExpression	fabs ( padfX [ 0 ] - poOther -> padfX [ poOther -> nPoints - 1 ] ) < JOIN_DIST
>4582	Identifier	JOIN_DIST
>4583	CallExpression	fabs ( padfX [ 0 ] - poOther -> padfX [ poOther -> nPoints - 1 ] )
>4584	ArgumentList	padfX [ 0 ] - poOther -> padfX [ poOther -> nPoints - 1 ]
>4585	Argument	padfX [ 0 ] - poOther -> padfX [ poOther -> nPoints - 1 ]
>4586	AdditiveExpression	padfX [ 0 ] - poOther -> padfX [ poOther -> nPoints - 1 ]
>4587	ArrayIndexing	poOther -> padfX [ poOther -> nPoints - 1 ]
>4588	AdditiveExpression	poOther -> nPoints - 1
>4589	PrimaryExpression	1
>4590	PtrMemberAccess	poOther -> nPoints
>4591	Identifier	nPoints
>4592	Identifier	poOther
>4593	PtrMemberAccess	poOther -> padfX
>4594	Identifier	padfX
>4595	Identifier	poOther
>4596	ArrayIndexing	padfX [ 0 ]
>4597	PrimaryExpression	0
>4598	Identifier	padfX
>4599	Callee	fabs
>4600	Identifier	fabs
>4601	CompoundStatement	 
>4602	ReturnStatement	 
>4603	Identifier	TRUE
>4604	ExpressionStatement	 
>4605	AssignmentExpr	dfTailX = padfX [ nPoints - 1 ]
>4606	ArrayIndexing	padfX [ nPoints - 1 ]
>4607	AdditiveExpression	nPoints - 1
>4608	PrimaryExpression	1
>4609	Identifier	nPoints
>4610	Identifier	padfX
>4611	Identifier	dfTailX
>4612	ExpressionStatement	 
>4613	AssignmentExpr	bRecentlyAccessed = TRUE
>4614	Identifier	TRUE
>4615	Identifier	bRecentlyAccessed
>4616	ExpressionStatement	 
>4617	AssignmentExpr	nPoints += poOther -> nPoints - 1
>4618	AdditiveExpression	poOther -> nPoints - 1
>4619	PrimaryExpression	1
>4620	PtrMemberAccess	poOther -> nPoints
>4621	Identifier	nPoints
>4622	Identifier	poOther
>4623	Identifier	nPoints
>4624	ExpressionStatement	 
>4625	CallExpression	memcpy ( padfY + nPoints , poOther -> padfY + 1 , sizeof ( double ) * ( poOther -> nPoints - 1 ) )
>4626	ArgumentList	padfY + nPoints
>4627	Argument	sizeof ( double ) * ( poOther -> nPoints - 1 )
>4628	MultiplicativeExpression	sizeof ( double ) * ( poOther -> nPoints - 1 )
>4629	AdditiveExpression	poOther -> nPoints - 1
>4630	PrimaryExpression	1
>4631	PtrMemberAccess	poOther -> nPoints
>4632	Identifier	nPoints
>4633	Identifier	poOther
>4634	SizeofExpr	sizeof ( double )
>4635	SizeofOperand	double
>4636	Sizeof	sizeof
>4637	Argument	poOther -> padfY + 1
>4638	AdditiveExpression	poOther -> padfY + 1
>4639	PrimaryExpression	1
>4640	PtrMemberAccess	poOther -> padfY
>4641	Identifier	padfY
>4642	Identifier	poOther
>4643	Argument	padfY + nPoints
>4644	AdditiveExpression	padfY + nPoints
>4645	Identifier	nPoints
>4646	Identifier	padfY
>4647	Callee	memcpy
>4648	Identifier	memcpy
>4649	ExpressionStatement	 
>4650	CallExpression	memcpy ( padfX + nPoints , poOther -> padfX + 1 , sizeof ( double ) * ( poOther -> nPoints - 1 ) )
>4651	ArgumentList	padfX + nPoints
>4652	Argument	sizeof ( double ) * ( poOther -> nPoints - 1 )
>4653	MultiplicativeExpression	sizeof ( double ) * ( poOther -> nPoints - 1 )
>4654	AdditiveExpression	poOther -> nPoints - 1
>4655	PrimaryExpression	1
>4656	PtrMemberAccess	poOther -> nPoints
>4657	Identifier	nPoints
>4658	Identifier	poOther
>4659	SizeofExpr	sizeof ( double )
>4660	SizeofOperand	double
>4661	Sizeof	sizeof
>4662	Argument	poOther -> padfX + 1
>4663	AdditiveExpression	poOther -> padfX + 1
>4664	PrimaryExpression	1
>4665	PtrMemberAccess	poOther -> padfX
>4666	Identifier	padfX
>4667	Identifier	poOther
>4668	Argument	padfX + nPoints
>4669	AdditiveExpression	padfX + nPoints
>4670	Identifier	nPoints
>4671	Identifier	padfX
>4672	Callee	memcpy
>4673	Identifier	memcpy
>4674	ExpressionStatement	 
>4675	CallExpression	MakeRoomFor ( nPoints + poOther -> nPoints - 1 )
>4676	ArgumentList	nPoints + poOther -> nPoints - 1
>4677	Argument	nPoints + poOther -> nPoints - 1
>4678	AdditiveExpression	nPoints + poOther -> nPoints - 1
>4679	AdditiveExpression	poOther -> nPoints - 1
>4680	PrimaryExpression	1
>4681	PtrMemberAccess	poOther -> nPoints
>4682	Identifier	nPoints
>4683	Identifier	poOther
>4684	Identifier	nPoints
>4685	Callee	MakeRoomFor
>4686	Identifier	MakeRoomFor
>4687	Condition	 
>4688	AndExpression	fabs ( padfX [ nPoints - 1 ] - poOther -> padfX [ 0 ] ) < JOIN_DIST && fabs ( padfY [ nPoints - 1 ] \
>4689	RelationalExpression	fabs ( padfY [ nPoints - 1 ] - poOther -> padfY [ 0 ] ) < JOIN_DIST
>4690	Identifier	JOIN_DIST
>4691	CallExpression	fabs ( padfY [ nPoints - 1 ] - poOther -> padfY [ 0 ] )
>4692	ArgumentList	padfY [ nPoints - 1 ] - poOther -> padfY [ 0 ]
>4693	Argument	padfY [ nPoints - 1 ] - poOther -> padfY [ 0 ]
>4694	AdditiveExpression	padfY [ nPoints - 1 ] - poOther -> padfY [ 0 ]
>4695	ArrayIndexing	poOther -> padfY [ 0 ]
>4696	PrimaryExpression	0
>4697	PtrMemberAccess	poOther -> padfY
>4698	Identifier	padfY
>4699	Identifier	poOther
>4700	ArrayIndexing	padfY [ nPoints - 1 ]
>4701	AdditiveExpression	nPoints - 1
>4702	PrimaryExpression	1
>4703	Identifier	nPoints
>4704	Identifier	padfY
>4705	Callee	fabs
>4706	Identifier	fabs
>4707	RelationalExpression	fabs ( padfX [ nPoints - 1 ] - poOther -> padfX [ 0 ] ) < JOIN_DIST
>4708	Identifier	JOIN_DIST
>4709	CallExpression	fabs ( padfX [ nPoints - 1 ] - poOther -> padfX [ 0 ] )
>4710	ArgumentList	padfX [ nPoints - 1 ] - poOther -> padfX [ 0 ]
>4711	Argument	padfX [ nPoints - 1 ] - poOther -> padfX [ 0 ]
>4712	AdditiveExpression	padfX [ nPoints - 1 ] - poOther -> padfX [ 0 ]
>4713	ArrayIndexing	poOther -> padfX [ 0 ]
>4714	PrimaryExpression	0
>4715	PtrMemberAccess	poOther -> padfX
>4716	Identifier	padfX
>4717	Identifier	poOther
>4718	ArrayIndexing	padfX [ nPoints - 1 ]
>4719	AdditiveExpression	nPoints - 1
>4720	PrimaryExpression	1
>4721	Identifier	nPoints
>4722	Identifier	padfX
>4723	Callee	fabs
>4724	Identifier	fabs
>4725	IfStatement	if ( poOther -> dfLevel != dfLevel )
>4726	ReturnStatement	 
>4727	Identifier	FALSE
>4728	Condition	 
>4729	EqualityExpression	poOther -> dfLevel != dfLevel
>4730	Identifier	dfLevel
>4731	PtrMemberAccess	poOther -> dfLevel
>4732	Identifier	dfLevel
>4733	Identifier	poOther
>4762	FunctionDef	GDALContourItem 
>4763	ParameterList	int nNewPoints
>4764	Parameter	 
>4765	Identifier	nNewPoints
>4766	ParameterType	int
>4767	ReturnType	void
>4768	CompoundStatement	 
>4769	IfStatement	if ( nNewPoints > nMaxPoints )
>4770	CompoundStatement	 
>4771	ExpressionStatement	 
>4772	AssignmentExpr	padfY = ( double * ) CPLRealloc ( padfY , sizeof ( double ) * nMaxPoints )
>4773	CastExpression	( double * ) CPLRealloc ( padfY , sizeof ( double ) * nMaxPoints )
>4774	CallExpression	CPLRealloc ( padfY , sizeof ( double ) * nMaxPoints )
>4775	ArgumentList	padfY
>4776	Argument	sizeof ( double ) * nMaxPoints
>4777	MultiplicativeExpression	sizeof ( double ) * nMaxPoints
>4778	Identifier	nMaxPoints
>4779	SizeofExpr	sizeof ( double )
>4780	SizeofOperand	double
>4781	Sizeof	sizeof
>4782	Argument	padfY
>4783	Identifier	padfY
>4784	Callee	CPLRealloc
>4785	Identifier	CPLRealloc
>4786	CastTarget	double *
>4787	Identifier	padfY
>4788	ExpressionStatement	 
>4789	AssignmentExpr	padfX = ( double * ) CPLRealloc ( padfX , sizeof ( double ) * nMaxPoints )
>4790	CastExpression	( double * ) CPLRealloc ( padfX , sizeof ( double ) * nMaxPoints )
>4791	CallExpression	CPLRealloc ( padfX , sizeof ( double ) * nMaxPoints )
>4792	ArgumentList	padfX
>4793	Argument	sizeof ( double ) * nMaxPoints
>4794	MultiplicativeExpression	sizeof ( double ) * nMaxPoints
>4795	Identifier	nMaxPoints
>4796	SizeofExpr	sizeof ( double )
>4797	SizeofOperand	double
>4798	Sizeof	sizeof
>4799	Argument	padfX
>4800	Identifier	padfX
>4801	Callee	CPLRealloc
>4802	Identifier	CPLRealloc
>4803	CastTarget	double *
>4804	Identifier	padfX
>4805	ExpressionStatement	 
>4806	AssignmentExpr	nMaxPoints = nNewPoints * 2 + 50
>4807	AdditiveExpression	nNewPoints * 2 + 50
>4808	PrimaryExpression	50
>4809	MultiplicativeExpression	nNewPoints * 2
>4810	PrimaryExpression	2
>4811	Identifier	nNewPoints
>4812	Identifier	nMaxPoints
>4813	Condition	 
>4814	RelationalExpression	nNewPoints > nMaxPoints
>4815	Identifier	nMaxPoints
>4816	Identifier	nNewPoints
>4825	FunctionDef	GDALContourItem 
>4826	ParameterList	 
>4827	ReturnType	void
>4828	CompoundStatement	 
>4829	IfStatement	if ( bLeftIsHigh )
>4830	CompoundStatement	 
>4831	ForStatement	for ( i = 0 ; i < nPoints / 2 ; i ++ )
>4832	CompoundStatement	 
>4833	ExpressionStatement	 
>4834	AssignmentExpr	padfY [ nPoints - i - 1 ] = dfTemp
>4835	Identifier	dfTemp
>4836	ArrayIndexing	padfY [ nPoints - i - 1 ]
>4837	AdditiveExpression	nPoints - i - 1
>4838	AdditiveExpression	i - 1
>4839	PrimaryExpression	1
>4840	Identifier	i
>4841	Identifier	nPoints
>4842	Identifier	padfY
>4843	ExpressionStatement	 
>4844	AssignmentExpr	padfY [ i ] = padfY [ nPoints - i - 1 ]
>4845	ArrayIndexing	padfY [ nPoints - i - 1 ]
>4846	AdditiveExpression	nPoints - i - 1
>4847	AdditiveExpression	i - 1
>4848	PrimaryExpression	1
>4849	Identifier	i
>4850	Identifier	nPoints
>4851	Identifier	padfY
>4852	ArrayIndexing	padfY [ i ]
>4853	Identifier	i
>4854	Identifier	padfY
>4855	ExpressionStatement	 
>4856	AssignmentExpr	dfTemp = padfY [ i ]
>4857	ArrayIndexing	padfY [ i ]
>4858	Identifier	i
>4859	Identifier	padfY
>4860	Identifier	dfTemp
>4861	ExpressionStatement	 
>4862	AssignmentExpr	padfX [ nPoints - i - 1 ] = dfTemp
>4863	Identifier	dfTemp
>4864	ArrayIndexing	padfX [ nPoints - i - 1 ]
>4865	AdditiveExpression	nPoints - i - 1
>4866	AdditiveExpression	i - 1
>4867	PrimaryExpression	1
>4868	Identifier	i
>4869	Identifier	nPoints
>4870	Identifier	padfX
>4871	ExpressionStatement	 
>4872	AssignmentExpr	padfX [ i ] = padfX [ nPoints - i - 1 ]
>4873	ArrayIndexing	padfX [ nPoints - i - 1 ]
>4874	AdditiveExpression	nPoints - i - 1
>4875	AdditiveExpression	i - 1
>4876	PrimaryExpression	1
>4877	Identifier	i
>4878	Identifier	nPoints
>4879	Identifier	padfX
>4880	ArrayIndexing	padfX [ i ]
>4881	Identifier	i
>4882	Identifier	padfX
>4883	ExpressionStatement	 
>4884	AssignmentExpr	dfTemp = padfX [ i ]
>4885	ArrayIndexing	padfX [ i ]
>4886	Identifier	i
>4887	Identifier	padfX
>4888	Identifier	dfTemp
>4889	IdentifierDeclStatement	 
>4890	IdentifierDecl	dfTemp
>4891	Identifier	dfTemp
>4892	IdentifierDeclType	double
>4893	IncDecOp	 
>4894	IncDec	++
>4895	Identifier	i
>4896	Condition	 
>4897	RelationalExpression	i < nPoints / 2
>4898	MultiplicativeExpression	nPoints / 2
>4899	PrimaryExpression	2
>4900	Identifier	nPoints
>4901	Identifier	i
>4902	ForInit	 
>4903	AssignmentExpr	i = 0
>4904	PrimaryExpression	0
>4905	Identifier	i
>4906	IdentifierDeclStatement	 
>4907	IdentifierDecl	i
>4908	Identifier	i
>4909	IdentifierDeclType	int
>4910	Condition	 
>4911	Identifier	bLeftIsHigh
>4925	FunctionDef	OGRContourWriter (double dfLevel , int nPoints , double * padfX , double * padfY , void * pInfo)
>4926	ParameterList	double dfLevel , int nPoints , double * padfX , double * padfY , void * pInfo
>4927	Parameter	 
>4928	Identifier	pInfo
>4929	ParameterType	void *
>4930	Parameter	 
>4931	Identifier	padfY
>4932	ParameterType	double *
>4933	Parameter	 
>4934	Identifier	padfX
>4935	ParameterType	double *
>4936	Parameter	 
>4937	Identifier	nPoints
>4938	ParameterType	int
>4939	Parameter	 
>4940	Identifier	dfLevel
>4941	ParameterType	double
>4942	ReturnType	CPLErr
>4943	CompoundStatement	 
>4944	ReturnStatement	 
>4945	Identifier	CE_None
>4946	ExpressionStatement	 
>4947	CallExpression	OGR_F_Destroy ( hFeat )
>4948	ArgumentList	hFeat
>4949	Argument	hFeat
>4950	Identifier	hFeat
>4951	Callee	OGR_F_Destroy
>4952	Identifier	OGR_F_Destroy
>4953	ExpressionStatement	 
>4954	CallExpression	OGR_L_CreateFeature ( ( OGRLayerH ) poInfo -> hLayer , hFeat )
>4955	ArgumentList	( OGRLayerH ) poInfo -> hLayer
>4956	Argument	hFeat
>4957	Identifier	hFeat
>4958	Argument	( OGRLayerH ) poInfo -> hLayer
>4959	CastExpression	( OGRLayerH ) poInfo -> hLayer
>4960	PtrMemberAccess	poInfo -> hLayer
>4961	Identifier	hLayer
>4962	Identifier	poInfo
>4963	CastTarget	OGRLayerH
>4964	Callee	OGR_L_CreateFeature
>4965	Identifier	OGR_L_CreateFeature
>4966	ExpressionStatement	 
>4967	CallExpression	OGR_F_SetGeometryDirectly ( hFeat , hGeom )
>4968	ArgumentList	hFeat
>4969	Argument	hGeom
>4970	Identifier	hGeom
>4971	Argument	hFeat
>4972	Identifier	hFeat
>4973	Callee	OGR_F_SetGeometryDirectly
>4974	Identifier	OGR_F_SetGeometryDirectly
>4975	ForStatement	for ( iPoint = nPoints - 1 ; iPoint >= 0 ; iPoint -- )
>4976	CompoundStatement	 
>4977	ExpressionStatement	 
>4978	CallExpression	OGR_G_SetPoint ( hGeom , iPoint , poInfo -> adfGeoTransform [ 0 ] + poInfo -> adfGeoTransform [ 1 ] * padfX [ iPoint ] + \
>4979	ArgumentList	hGeom
>4980	Argument	dfLevel
>4981	Identifier	dfLevel
>4982	Argument	poInfo -> adfGeoTransform [ 3 ] + poInfo -> adfGeoTransform [ 4 ] * padfX [ iPoint ] + poInfo -> adfGeoTransform [ \
>4983	AdditiveExpression	poInfo -> adfGeoTransform [ 3 ] + poInfo -> adfGeoTransform [ 4 ] * padfX [ iPoint ] + poInfo -> adfGeoTransform [ \
>4984	AdditiveExpression	poInfo -> adfGeoTransform [ 4 ] * padfX [ iPoint ] + poInfo -> adfGeoTransform [ 5 ] * padfY [ iPoint ]
>4985	MultiplicativeExpression	poInfo -> adfGeoTransform [ 5 ] * padfY [ iPoint ]
>4986	ArrayIndexing	padfY [ iPoint ]
>4987	Identifier	iPoint
>4988	Identifier	padfY
>4989	ArrayIndexing	poInfo -> adfGeoTransform [ 5 ]
>4990	PrimaryExpression	5
>4991	PtrMemberAccess	poInfo -> adfGeoTransform
>4992	Identifier	adfGeoTransform
>4993	Identifier	poInfo
>4994	MultiplicativeExpression	poInfo -> adfGeoTransform [ 4 ] * padfX [ iPoint ]
>4995	ArrayIndexing	padfX [ iPoint ]
>4996	Identifier	iPoint
>4997	Identifier	padfX
>4998	ArrayIndexing	poInfo -> adfGeoTransform [ 4 ]
>4999	PrimaryExpression	4
>5000	PtrMemberAccess	poInfo -> adfGeoTransform
>5001	Identifier	adfGeoTransform
>5002	Identifier	poInfo
>5003	ArrayIndexing	poInfo -> adfGeoTransform [ 3 ]
>5004	PrimaryExpression	3
>5005	PtrMemberAccess	poInfo -> adfGeoTransform
>5006	Identifier	adfGeoTransform
>5007	Identifier	poInfo
>5008	Argument	poInfo -> adfGeoTransform [ 0 ] + poInfo -> adfGeoTransform [ 1 ] * padfX [ iPoint ] + poInfo -> adfGeoTransform [ \
>5009	AdditiveExpression	poInfo -> adfGeoTransform [ 0 ] + poInfo -> adfGeoTransform [ 1 ] * padfX [ iPoint ] + poInfo -> adfGeoTransform [ \
>5010	AdditiveExpression	poInfo -> adfGeoTransform [ 1 ] * padfX [ iPoint ] + poInfo -> adfGeoTransform [ 2 ] * padfY [ iPoint ]
>5011	MultiplicativeExpression	poInfo -> adfGeoTransform [ 2 ] * padfY [ iPoint ]
>5012	ArrayIndexing	padfY [ iPoint ]
>5013	Identifier	iPoint
>5014	Identifier	padfY
>5015	ArrayIndexing	poInfo -> adfGeoTransform [ 2 ]
>5016	PrimaryExpression	2
>5017	PtrMemberAccess	poInfo -> adfGeoTransform
>5018	Identifier	adfGeoTransform
>5019	Identifier	poInfo
>5020	MultiplicativeExpression	poInfo -> adfGeoTransform [ 1 ] * padfX [ iPoint ]
>5021	ArrayIndexing	padfX [ iPoint ]
>5022	Identifier	iPoint
>5023	Identifier	padfX
>5024	ArrayIndexing	poInfo -> adfGeoTransform [ 1 ]
>5025	PrimaryExpression	1
>5026	PtrMemberAccess	poInfo -> adfGeoTransform
>5027	Identifier	adfGeoTransform
>5028	Identifier	poInfo
>5029	ArrayIndexing	poInfo -> adfGeoTransform [ 0 ]
>5030	PrimaryExpression	0
>5031	PtrMemberAccess	poInfo -> adfGeoTransform
>5032	Identifier	adfGeoTransform
>5033	Identifier	poInfo
>5034	Argument	iPoint
>5035	Identifier	iPoint
>5036	Argument	hGeom
>5037	Identifier	hGeom
>5038	Callee	OGR_G_SetPoint
>5039	Identifier	OGR_G_SetPoint
>5040	IncDecOp	 
>5041	IncDec	--
>5042	Identifier	iPoint
>5043	Condition	 
>5044	RelationalExpression	iPoint >= 0
>5045	PrimaryExpression	0
>5046	Identifier	iPoint
>5047	ForInit	 
>5048	AssignmentExpr	iPoint = nPoints - 1
>5049	AdditiveExpression	nPoints - 1
>5050	PrimaryExpression	1
>5051	Identifier	nPoints
>5052	Identifier	iPoint
>5053	ExpressionStatement	 
>5054	AssignmentExpr	hGeom = OGR_G_CreateGeometry ( wkbLineString )
>5055	CallExpression	OGR_G_CreateGeometry ( wkbLineString )
>5056	ArgumentList	wkbLineString
>5057	Argument	wkbLineString
>5058	Identifier	wkbLineString
>5059	Callee	OGR_G_CreateGeometry
>5060	Identifier	OGR_G_CreateGeometry
>5061	Identifier	hGeom
>5062	IfStatement	if ( poInfo -> nElevField != - 1 )
>5063	ExpressionStatement	 
>5064	CallExpression	OGR_F_SetFieldDouble ( hFeat , poInfo -> nElevField , dfLevel )
>5065	ArgumentList	hFeat
>5066	Argument	dfLevel
>5067	Identifier	dfLevel
>5068	Argument	poInfo -> nElevField
>5069	PtrMemberAccess	poInfo -> nElevField
>5070	Identifier	nElevField
>5071	Identifier	poInfo
>5072	Argument	hFeat
>5073	Identifier	hFeat
>5074	Callee	OGR_F_SetFieldDouble
>5075	Identifier	OGR_F_SetFieldDouble
>5076	Condition	 
>5077	EqualityExpression	poInfo -> nElevField != - 1
>5078	UnaryOp	- 1
>5079	PrimaryExpression	1
>5080	UnaryOperator	-
>5081	PtrMemberAccess	poInfo -> nElevField
>5082	Identifier	nElevField
>5083	Identifier	poInfo
>5084	IfStatement	if ( poInfo -> nIDField != - 1 )
>5085	ExpressionStatement	 
>5086	CallExpression	OGR_F_SetFieldInteger ( hFeat , poInfo -> nIDField , poInfo -> nNextID ++ )
>5087	ArgumentList	hFeat
>5088	Argument	poInfo -> nNextID ++
>5089	IncDecOp	poInfo -> nNextID ++
>5090	IncDec	++
>5091	PtrMemberAccess	poInfo -> nNextID
>5092	Identifier	nNextID
>5093	Identifier	poInfo
>5094	Argument	poInfo -> nIDField
>5095	PtrMemberAccess	poInfo -> nIDField
>5096	Identifier	nIDField
>5097	Identifier	poInfo
>5098	Argument	hFeat
>5099	Identifier	hFeat
>5100	Callee	OGR_F_SetFieldInteger
>5101	Identifier	OGR_F_SetFieldInteger
>5102	Condition	 
>5103	EqualityExpression	poInfo -> nIDField != - 1
>5104	UnaryOp	- 1
>5105	PrimaryExpression	1
>5106	UnaryOperator	-
>5107	PtrMemberAccess	poInfo -> nIDField
>5108	Identifier	nIDField
>5109	Identifier	poInfo
>5110	ExpressionStatement	 
>5111	AssignmentExpr	hFeat = OGR_F_Create ( OGR_L_GetLayerDefn ( ( OGRLayerH ) poInfo -> hLayer ) )
>5112	CallExpression	OGR_F_Create ( OGR_L_GetLayerDefn ( ( OGRLayerH ) poInfo -> hLayer ) )
>5113	ArgumentList	OGR_L_GetLayerDefn ( ( OGRLayerH ) poInfo -> hLayer )
>5114	Argument	OGR_L_GetLayerDefn ( ( OGRLayerH ) poInfo -> hLayer )
>5115	CallExpression	OGR_L_GetLayerDefn ( ( OGRLayerH ) poInfo -> hLayer )
>5116	ArgumentList	( OGRLayerH ) poInfo -> hLayer
>5117	Argument	( OGRLayerH ) poInfo -> hLayer
>5118	CastExpression	( OGRLayerH ) poInfo -> hLayer
>5119	PtrMemberAccess	poInfo -> hLayer
>5120	Identifier	hLayer
>5121	Identifier	poInfo
>5122	CastTarget	OGRLayerH
>5123	Callee	OGR_L_GetLayerDefn
>5124	Identifier	OGR_L_GetLayerDefn
>5125	Callee	OGR_F_Create
>5126	Identifier	OGR_F_Create
>5127	Identifier	hFeat
>5128	IdentifierDeclStatement	 
>5129	IdentifierDecl	iPoint
>5130	Identifier	iPoint
>5131	IdentifierDeclType	int
>5132	IdentifierDeclStatement	 
>5133	IdentifierDecl	hGeom
>5134	Identifier	hGeom
>5135	IdentifierDeclType	OGRGeometryH
>5136	IdentifierDeclStatement	 
>5137	IdentifierDecl	hFeat
>5138	Identifier	hFeat
>5139	IdentifierDeclType	OGRFeatureH
>5140	IdentifierDeclStatement	 
>5141	IdentifierDecl	* poInfo = ( OGRContourWriterInfo * ) pInfo
>5142	AssignmentExpr	* poInfo = ( OGRContourWriterInfo * ) pInfo
>5143	CastExpression	( OGRContourWriterInfo * ) pInfo
>5144	Identifier	pInfo
>5145	CastTarget	OGRContourWriterInfo *
>5146	Identifier	poInfo
>5147	Identifier	poInfo
>5148	IdentifierDeclType	OGRContourWriterInfo *
>5177	FunctionDef	GDALContourGenerate (GDALRasterBandH hBand , double dfContourInterval , double dfContourBase , int nFixedLevelCount , \
>5178	ParameterList	GDALRasterBandH hBand , double dfContourInterval , double dfContourBase , int nFixedLevelCount , double * padfFixedLevels , \
>5179	Parameter	 
>5180	Identifier	pProgressArg
>5181	ParameterType	void *
>5182	Parameter	 
>5183	Identifier	pfnProgress
>5184	ParameterType	GDALProgressFunc
>5185	Parameter	 
>5186	Identifier	iElevField
>5187	ParameterType	int
>5188	Parameter	 
>5189	Identifier	iIDField
>5190	ParameterType	int
>5191	Parameter	 
>5192	Identifier	hLayer
>5193	ParameterType	void *
>5194	Parameter	 
>5195	Identifier	dfNoDataValue
>5196	ParameterType	double
>5197	Parameter	 
>5198	Identifier	bUseNoData
>5199	ParameterType	int
>5200	Parameter	 
>5201	Identifier	padfFixedLevels
>5202	ParameterType	double *
>5203	Parameter	 
>5204	Identifier	nFixedLevelCount
>5205	ParameterType	int
>5206	Parameter	 
>5207	Identifier	dfContourBase
>5208	ParameterType	double
>5209	Parameter	 
>5210	Identifier	dfContourInterval
>5211	ParameterType	double
>5212	Parameter	 
>5213	Identifier	hBand
>5214	ParameterType	GDALRasterBandH
>5215	ReturnType	CPLErr
>5216	CompoundStatement	 
>5217	ReturnStatement	 
>5218	Identifier	CE_Failure
>5219	ExpressionStatement	 
>5220	CallExpression	CPLError ( CE_Failure , CPLE_NotSupported , \"GDALContourGenerate() unimplemented in a non OGR build\" )
>5221	ArgumentList	CE_Failure
>5222	Argument	\"GDALContourGenerate() unimplemented in a non OGR build\"
>5223	PrimaryExpression	\"GDALContourGenerate() unimplemented in a non OGR build\"
>5224	Argument	CPLE_NotSupported
>5225	Identifier	CPLE_NotSupported
>5226	Argument	CE_Failure
>5227	Identifier	CE_Failure
>5228	Callee	CPLError
>5229	Identifier	CPLError
<37=40,39,38
<40=41
<41=42
<47=50,49,48
<50=51
<51=52
<57=63,62,58
<58=59
<59=61,60
<63=64
<64=65
<65=67,66
<130=157,156,131
<131=153,150,147,144,141,138,135,132
<132=134,133
<135=137,136
<138=140,139
<141=143,142
<144=146,145
<147=149,148
<150=152,151
<153=155,154
<157=185,173,162,158
<158=159
<159=161,160
<162=163
<163=169,164
<164=167,165
<165=166
<167=168
<169=170
<170=172,171
<173=183,174
<174=175
<175=179,176
<176=177
<177=178
<179=180
<180=182,181
<183=184
<185=186
<186=197,196,187
<187=195,188
<188=194,189
<189=193,190
<190=192,191
<210=219,218,211
<211=215,212
<212=214,213
<215=217,216
<219=231,220
<220=221
<221=225,222
<222=223
<223=224
<225=226
<226=228,227
<228=230,229
<231=232
<232=240,233
<233=238,236,234
<234=235
<236=237
<238=239
<240=241
<250=256,255,251
<251=252
<252=254,253
<256=261,257
<257=258
<258=260,259
<266=280,267
<267=277,274,271,268
<268=270,269
<271=273,272
<274=276,275
<277=279,278
<280=363,359,344,329,325,321,315,311,305,301,297,293,289,285,281
<281=282
<282=284,283
<285=286
<286=288,287
<289=290
<290=292,291
<293=294
<294=296,295
<297=298
<298=300,299
<301=302
<302=304,303
<305=306
<306=310,307
<307=309,308
<311=312
<312=314,313
<315=316
<316=320,317
<317=319,318
<321=322
<322=324,323
<325=326
<326=328,327
<329=330
<330=343,331
<331=342,332
<332=340,333
<333=336,334
<334=335
<336=337
<337=339,338
<340=341
<344=345
<345=358,346
<346=357,347
<347=355,348
<348=351,349
<349=350
<351=352
<352=354,353
<355=356
<359=360
<360=362,361
<363=364
<364=366,365
<392=394,393
<394=433,420,416,409,402,395
<395=396
<396=400,397
<397=398
<398=399
<400=401
<402=403
<403=407,404
<404=405
<405=406
<407=408
<409=410
<410=414,411
<411=412
<412=413
<414=415
<416=417
<417=419,418
<420=429,425,422,421
<422=424,423
<425=426
<426=428,427
<429=430
<430=432,431
<433=434
<434=436,435
<445=454,453,446
<446=450,447
<447=449,448
<450=452,451
<454=480,455
<455=472,468,465,456
<456=457
<457=463,458
<458=459
<459=460
<460=462,461
<463=464
<465=467,466
<468=469
<469=471,470
<472=473
<473=474
<474=479,478,475
<475=477,476
<480=481
<481=483,482
<494=500,499,495
<495=496
<496=498,497
<500=505,501
<501=502
<502=504,503
<505=506
<506=508,507
<516=522,521,517
<517=518
<518=520,519
<522=1121,1114,1099,1084,1069,1054,1031,964,957,950,922,908,894,880,866,859,853,801,748,741,688,631,578,525,523
<523=524
<525=566,526
<526=527
<527=528
<528=565,529
<529=563,530
<530=561,559,555,553,551,549,547,543,541,539,535,531
<531=532
<532=534,533
<535=536
<536=538,537
<539=540
<541=542
<543=544
<544=546,545
<547=548
<549=550
<551=552
<553=554
<555=556
<556=558,557
<559=560
<561=562
<563=564
<566=567
<567=575,568
<568=572,569
<569=571,570
<572=574,573
<575=577,576
<578=619,579
<579=580
<580=581
<581=618,582
<582=616,583
<583=614,612,610,608,606,602,600,596,592,590,586,584
<584=585
<586=587
<587=589,588
<590=591
<592=593
<593=595,594
<596=597
<597=599,598
<600=601
<602=603
<603=605,604
<606=607
<608=609
<610=611
<612=613
<614=615
<616=617
<619=620
<620=628,621
<621=625,622
<622=624,623
<625=627,626
<628=630,629
<631=672,632
<632=633
<633=634
<634=671,635
<635=669,636
<636=667,663,661,659,655,651,649,647,643,641,639,637
<637=638
<639=640
<641=642
<643=644
<644=646,645
<647=648
<649=650
<651=652
<652=654,653
<655=656
<656=658,657
<659=660
<661=662
<663=664
<664=666,665
<667=668
<669=670
<672=673
<673=685,674
<674=682,675
<675=679,676
<676=678,677
<679=681,680
<682=684,683
<685=687,686
<688=729,689
<689=690
<690=691
<691=728,692
<692=726,693
<693=724,720,716,714,710,708,706,704,702,700,698,694
<694=695
<695=697,696
<698=699
<700=701
<702=703
<704=705
<706=707
<708=709
<710=711
<711=713,712
<714=715
<716=717
<717=719,718
<720=721
<721=723,722
<724=725
<726=727
<729=730
<730=738,731
<731=735,732
<732=734,733
<735=737,736
<738=740,739
<741=742
<742=747,746,743
<743=745,744
<748=797,760,749
<749=750
<750=756,755,751
<751=752
<752=754,753
<756=757
<757=759,758
<760=779,761
<761=775,767,762
<762=763
<763=764
<764=766,765
<767=768
<768=774,769
<769=771,770
<771=773,772
<775=776
<776=778,777
<779=793,785,780
<780=781
<781=782
<782=784,783
<785=786
<786=792,787
<787=789,788
<789=791,790
<793=794
<794=796,795
<797=798
<798=800,799
<801=849,812,802
<802=803
<803=808,804
<804=805
<805=807,806
<808=809
<809=811,810
<812=831,813
<813=827,819,814
<814=815
<815=816
<816=818,817
<819=820
<820=826,821
<821=823,822
<823=825,824
<827=828
<828=830,829
<831=845,837,832
<832=833
<833=834
<834=836,835
<837=838
<838=844,839
<839=841,840
<841=843,842
<845=846
<846=848,847
<849=850
<850=852,851
<853=854
<854=858,855
<855=857,856
<859=862,860
<860=861
<862=863
<863=865,864
<866=876,867
<867=872,868
<868=869
<869=871,870
<872=873
<873=875,874
<876=877
<877=879,878
<880=890,881
<881=886,882
<882=883
<883=885,884
<886=887
<887=889,888
<890=891
<891=893,892
<894=904,895
<895=900,896
<896=897
<897=899,898
<900=901
<901=903,902
<904=905
<905=907,906
<908=918,909
<909=914,910
<910=911
<911=913,912
<914=915
<915=917,916
<918=919
<919=921,920
<922=947,941,935,929,923
<923=928,927,924
<924=926,925
<929=934,933,930
<930=932,931
<935=940,939,936
<936=938,937
<941=946,945,942
<942=944,943
<947=949,948
<950=951
<951=956,955,952
<952=954,953
<957=958
<958=963,962,959
<959=961,960
<964=1011,965
<965=966
<966=967
<967=1009,968
<968=1007,1003,999,997,993,989,987,983,979,977,973,969
<969=970
<970=972,971
<973=974
<974=976,975
<977=978
<979=980
<980=982,981
<983=984
<984=986,985
<987=988
<989=990
<990=992,991
<993=994
<994=996,995
<997=998
<999=1000
<1000=1002,1001
<1003=1004
<1004=1006,1005
<1007=1008
<1009=1010
<1011=1012
<1012=1028,1013
<1013=1025,1014
<1014=1022,1015
<1015=1019,1016
<1016=1018,1017
<1019=1021,1020
<1022=1024,1023
<1025=1027,1026
<1028=1030,1029
<1031=1036,1032
<1032=1033
<1033=1035,1034
<1036=1037
<1037=1053,1038
<1038=1050,1039
<1039=1047,1040
<1040=1044,1041
<1041=1043,1042
<1044=1046,1045
<1047=1049,1048
<1050=1052,1051
<1054=1055
<1055=1068,1056
<1056=1067,1057
<1057=1065,1058
<1058=1061,1059
<1059=1060
<1061=1062
<1062=1064,1063
<1065=1066
<1069=1070
<1070=1083,1071
<1071=1082,1072
<1072=1080,1073
<1073=1078,1074
<1074=1075
<1075=1077,1076
<1078=1079
<1080=1081
<1084=1085
<1085=1098,1086
<1086=1097,1087
<1087=1095,1088
<1088=1091,1089
<1089=1090
<1091=1092
<1092=1094,1093
<1095=1096
<1099=1100
<1100=1113,1101
<1101=1112,1102
<1102=1110,1103
<1103=1108,1104
<1104=1105
<1105=1107,1106
<1108=1109
<1110=1111
<1114=1115
<1115=1120,1119,1116
<1116=1118,1117
<1121=1131,1128,1125,1122
<1122=1124,1123
<1125=1127,1126
<1128=1130,1129
<1131=1133,1132
<1168=1207,1206,1169
<1169=1203,1200,1197,1194,1191,1188,1185,1182,1179,1176,1173,1170
<1170=1172,1171
<1173=1175,1174
<1176=1178,1177
<1179=1181,1180
<1182=1184,1183
<1185=1187,1186
<1188=1190,1189
<1191=1193,1192
<1194=1196,1195
<1197=1199,1198
<1200=1202,1201
<1203=1205,1204
<1207=2038,2010,1982,1790,1783,1779,1210,1208
<1208=1209
<1210=1775,1771,1768,1211
<1211=1764,1741,1734,1725,1718,1699,1670,1666,1637,1633,1604,1600,1571,1551,1266,1212
<1212=1262,1213
<1213=1214
<1214=1252,1215
<1215=1223,1216
<1216=1219,1217
<1217=1218
<1219=1220
<1220=1222,1221
<1223=1224
<1224=1251,1225
<1225=1249,1226
<1226=1247,1243,1239,1235,1231,1227
<1227=1228
<1228=1230,1229
<1231=1232
<1232=1234,1233
<1235=1236
<1236=1238,1237
<1239=1240
<1240=1242,1241
<1243=1244
<1244=1246,1245
<1247=1248
<1249=1250
<1252=1253
<1253=1261,1254
<1254=1258,1255
<1255=1257,1256
<1258=1260,1259
<1262=1263
<1263=1265,1264
<1266=1547,1267
<1267=1275,1268
<1268=1271,1269
<1269=1270
<1271=1272
<1272=1274,1273
<1275=1539,1509,1276
<1276=1277
<1277=1501,1471,1278
<1278=1279
<1279=1463,1422,1280
<1280=1281
<1281=1414,1384,1282
<1282=1283
<1283=1376,1346,1284
<1284=1285
<1285=1338,1297,1286
<1286=1287
<1287=1288
<1288=1289
<1289=1295,1290
<1290=1293,1291
<1291=1292
<1293=1294
<1295=1296
<1297=1298
<1298=1328,1299
<1299=1300
<1300=1327,1301
<1301=1325,1302
<1302=1323,1319,1315,1311,1307,1303
<1303=1304
<1304=1306,1305
<1307=1308
<1308=1310,1309
<1311=1312
<1312=1314,1313
<1315=1316
<1316=1318,1317
<1319=1320
<1320=1322,1321
<1323=1324
<1325=1326
<1328=1329
<1329=1337,1330
<1330=1334,1331
<1331=1333,1332
<1334=1336,1335
<1338=1339
<1339=1343,1340
<1340=1342,1341
<1343=1345,1344
<1346=1347
<1347=1348
<1348=1375,1349
<1349=1373,1350
<1350=1371,1367,1363,1359,1355,1351
<1351=1352
<1352=1354,1353
<1355=1356
<1356=1358,1357
<1359=1360
<1360=1362,1361
<1363=1364
<1364=1366,1365
<1367=1368
<1368=1370,1369
<1371=1372
<1373=1374
<1376=1377
<1377=1381,1378
<1378=1380,1379
<1381=1383,1382
<1384=1385
<1385=1386
<1386=1413,1387
<1387=1411,1388
<1388=1409,1405,1401,1397,1393,1389
<1389=1390
<1390=1392,1391
<1393=1394
<1394=1396,1395
<1397=1398
<1398=1400,1399
<1401=1402
<1402=1404,1403
<1405=1406
<1406=1408,1407
<1409=1410
<1411=1412
<1414=1415
<1415=1419,1416
<1416=1418,1417
<1419=1421,1420
<1422=1423
<1423=1453,1424
<1424=1425
<1425=1452,1426
<1426=1450,1427
<1427=1448,1444,1440,1436,1432,1428
<1428=1429
<1429=1431,1430
<1432=1433
<1433=1435,1434
<1436=1437
<1437=1439,1438
<1440=1441
<1441=1443,1442
<1444=1445
<1445=1447,1446
<1448=1449
<1450=1451
<1453=1454
<1454=1462,1455
<1455=1459,1456
<1456=1458,1457
<1459=1461,1460
<1463=1464
<1464=1468,1465
<1465=1467,1466
<1468=1470,1469
<1471=1472
<1472=1473
<1473=1500,1474
<1474=1498,1475
<1475=1496,1492,1488,1484,1480,1476
<1476=1477
<1477=1479,1478
<1480=1481
<1481=1483,1482
<1484=1485
<1485=1487,1486
<1488=1489
<1489=1491,1490
<1492=1493
<1493=1495,1494
<1496=1497
<1498=1499
<1501=1502
<1502=1506,1503
<1503=1505,1504
<1506=1508,1507
<1509=1510
<1510=1511
<1511=1538,1512
<1512=1536,1513
<1513=1534,1530,1526,1522,1518,1514
<1514=1515
<1515=1517,1516
<1518=1519
<1519=1521,1520
<1522=1523
<1523=1525,1524
<1526=1527
<1527=1529,1528
<1530=1531
<1531=1533,1532
<1534=1535
<1536=1537
<1539=1540
<1540=1544,1541
<1541=1543,1542
<1544=1546,1545
<1547=1548
<1548=1550,1549
<1551=1563,1552
<1552=1553
<1553=1561,1554
<1554=1559,1557,1555
<1555=1556
<1557=1558
<1559=1560
<1561=1562
<1563=1564
<1564=1568,1565
<1565=1567,1566
<1568=1570,1569
<1571=1572
<1572=1598,1573
<1573=1596,1594,1592,1590,1588,1586,1584,1582,1578,1576,1574
<1574=1575
<1576=1577
<1578=1579
<1579=1581,1580
<1582=1583
<1584=1585
<1586=1587
<1588=1589
<1590=1591
<1592=1593
<1594=1595
<1596=1597
<1598=1599
<1600=1601
<1601=1603,1602
<1604=1605
<1605=1631,1606
<1606=1629,1627,1625,1623,1621,1619,1617,1615,1611,1609,1607
<1607=1608
<1609=1610
<1611=1612
<1612=1614,1613
<1615=1616
<1617=1618
<1619=1620
<1621=1622
<1623=1624
<1625=1626
<1627=1628
<1629=1630
<1631=1632
<1633=1634
<1634=1636,1635
<1637=1638
<1638=1664,1639
<1639=1662,1660,1658,1656,1654,1652,1650,1648,1644,1642,1640
<1640=1641
<1642=1643
<1644=1645
<1645=1647,1646
<1648=1649
<1650=1651
<1652=1653
<1654=1655
<1656=1657
<1658=1659
<1660=1661
<1662=1663
<1664=1665
<1666=1667
<1667=1669,1668
<1670=1671
<1671=1697,1672
<1672=1695,1693,1691,1689,1687,1685,1683,1681,1677,1675,1673
<1673=1674
<1675=1676
<1677=1678
<1678=1680,1679
<1681=1682
<1683=1684
<1685=1686
<1687=1688
<1689=1690
<1691=1692
<1693=1694
<1695=1696
<1697=1698
<1699=1712,1706,1700
<1700=1705,1704,1701
<1701=1703,1702
<1706=1711,1710,1707
<1707=1709,1708
<1712=1717,1716,1713
<1713=1715,1714
<1718=1719
<1719=1724,1723,1720
<1720=1722,1721
<1725=1730,1726
<1726=1729,1728,1727
<1730=1733,1732,1731
<1734=1735
<1735=1740,1739,1736
<1736=1738,1737
<1741=1762,1751,1742
<1742=1743
<1743=1744
<1744=1750,1745
<1745=1747,1746
<1747=1749,1748
<1751=1752
<1752=1761,1753
<1753=1755,1754
<1755=1756
<1756=1758,1757
<1758=1760,1759
<1762=1763
<1764=1765
<1765=1767,1766
<1768=1770,1769
<1771=1772
<1772=1774,1773
<1775=1776
<1776=1778,1777
<1779=1780
<1780=1782,1781
<1783=1786,1784
<1784=1785
<1786=1787
<1787=1789,1788
<1790=1980,1823,1791
<1791=1792
<1792=1808,1793
<1793=1794
<1794=1807,1795
<1795=1806,1796
<1796=1804,1797
<1797=1798
<1798=1799
<1799=1801,1800
<1801=1803,1802
<1804=1805
<1808=1809
<1809=1822,1810
<1810=1821,1811
<1811=1819,1812
<1812=1813
<1813=1814
<1814=1816,1815
<1816=1818,1817
<1819=1820
<1823=1962,1956,1898,1885,1881,1857,1850,1837,1824
<1824=1825
<1825=1835,1826
<1826=1827
<1827=1828
<1828=1832,1829
<1829=1831,1830
<1832=1834,1833
<1835=1836
<1837=1838
<1838=1848,1839
<1839=1840
<1840=1841
<1841=1845,1842
<1842=1844,1843
<1845=1847,1846
<1848=1849
<1850=1853,1851
<1851=1852
<1853=1854
<1854=1856,1855
<1857=1862,1858
<1858=1859
<1859=1861,1860
<1862=1863
<1863=1876,1864
<1864=1866,1865
<1866=1868,1867
<1868=1869
<1869=1871,1870
<1871=1875,1872
<1872=1874,1873
<1876=1880,1877
<1877=1879,1878
<1881=1882
<1882=1884,1883
<1885=1892,1886
<1886=1887
<1887=1891,1888
<1888=1890,1889
<1892=1893
<1893=1897,1894
<1894=1896,1895
<1898=1952,1899
<1899=1944,1930,1900
<1900=1926,1920,1901
<1901=1902
<1902=1916,1910,1903
<1903=1904
<1904=1906,1905
<1906=1907
<1907=1909,1908
<1910=1911
<1911=1915,1912
<1912=1914,1913
<1916=1917
<1917=1919,1918
<1920=1921
<1921=1925,1922
<1922=1924,1923
<1926=1927
<1927=1929,1928
<1930=1931
<1931=1943,1942,1932
<1932=1941,1933
<1933=1935,1934
<1935=1936
<1936=1938,1937
<1938=1940,1939
<1944=1945
<1945=1951,1946
<1946=1948,1947
<1948=1950,1949
<1952=1953
<1953=1955,1954
<1956=1957
<1957=1961,1958
<1958=1960,1959
<1962=1974,1966,1963
<1963=1965,1964
<1966=1973,1972,1967
<1967=1971,1968
<1968=1970,1969
<1974=1979,1978,1975
<1975=1977,1976
<1980=1981
<1982=1983
<1983=2009,2008,1984
<1984=2007,1985
<1985=2005,1986
<1986=1996,1987
<1987=1988
<1988=1994,1989
<1989=1992,1990
<1990=1991
<1992=1993
<1994=1995
<1996=1997
<1997=2003,1998
<1998=2001,1999
<1999=2000
<2001=2002
<2003=2004
<2005=2006
<2010=2011
<2011=2037,2036,2012
<2012=2035,2013
<2013=2033,2014
<2014=2024,2015
<2015=2016
<2016=2022,2017
<2017=2020,2018
<2018=2019
<2020=2021
<2022=2023
<2024=2025
<2025=2031,2026
<2026=2029,2027
<2027=2028
<2029=2030
<2031=2032
<2033=2034
<2038=2042,2039
<2039=2041,2040
<2042=2044,2043
<2102=2138,2137,2103
<2103=2134,2131,2128,2125,2122,2119,2116,2113,2110,2107,2104
<2104=2106,2105
<2107=2109,2108
<2110=2112,2111
<2113=2115,2114
<2116=2118,2117
<2119=2121,2120
<2122=2124,2123
<2125=2127,2126
<2128=2130,2129
<2131=2133,2132
<2134=2136,2135
<2138=2139
<2139=2291,2239,2140
<2140=2141
<2141=2231,2179,2142
<2142=2143
<2143=2167,2144
<2144=2159,2151,2145
<2145=2146
<2146=2148,2147
<2148=2150,2149
<2151=2152
<2152=2154,2153
<2154=2158,2155
<2155=2157,2156
<2159=2160
<2160=2162,2161
<2162=2166,2163
<2163=2165,2164
<2167=2168
<2168=2176,2169
<2169=2173,2170
<2170=2172,2171
<2173=2175,2174
<2176=2178,2177
<2179=2218,2202,2186,2180
<2180=2181
<2181=2183,2182
<2183=2185,2184
<2186=2187
<2187=2197,2188
<2188=2192,2189
<2189=2191,2190
<2192=2196,2193
<2193=2195,2194
<2197=2201,2198
<2198=2200,2199
<2202=2203
<2203=2213,2204
<2204=2208,2205
<2205=2207,2206
<2208=2212,2209
<2209=2211,2210
<2213=2217,2214
<2214=2216,2215
<2218=2219
<2219=2230,2229,2220
<2220=2228,2221
<2221=2225,2222
<2222=2224,2223
<2225=2227,2226
<2231=2232
<2232=2236,2233
<2233=2235,2234
<2236=2238,2237
<2239=2278,2262,2246,2240
<2240=2241
<2241=2243,2242
<2243=2245,2244
<2246=2247
<2247=2257,2248
<2248=2252,2249
<2249=2251,2250
<2252=2256,2253
<2253=2255,2254
<2257=2261,2258
<2258=2260,2259
<2262=2263
<2263=2273,2264
<2264=2268,2265
<2265=2267,2266
<2268=2272,2269
<2269=2271,2270
<2273=2277,2274
<2274=2276,2275
<2278=2279
<2279=2290,2289,2280
<2280=2288,2281
<2281=2285,2282
<2282=2284,2283
<2285=2287,2286
<2291=2292
<2292=2296,2293
<2293=2295,2294
<2296=2298,2297
<2318=2339,2338,2319
<2319=2335,2332,2329,2326,2323,2320
<2320=2322,2321
<2323=2325,2324
<2326=2328,2327
<2329=2331,2330
<2332=2334,2333
<2335=2337,2336
<2339=2459,2455,2451,2419,2372,2368,2351,2342,2340
<2340=2341
<2342=2343
<2343=2347,2344
<2344=2345
<2345=2346
<2347=2348
<2348=2350,2349
<2351=2352
<2352=2364,2353
<2353=2362,2360,2358,2356,2354
<2354=2355
<2356=2357
<2358=2359
<2360=2361
<2362=2363
<2364=2365
<2365=2367,2366
<2368=2369
<2369=2371,2370
<2372=2413,2373
<2373=2402,2385,2376,2374
<2374=2375
<2376=2377
<2377=2381,2378
<2378=2379
<2379=2380
<2381=2382
<2382=2384,2383
<2385=2386
<2386=2398,2387
<2387=2396,2394,2392,2390,2388
<2388=2389
<2390=2391
<2392=2393
<2394=2395
<2396=2397
<2398=2399
<2399=2401,2400
<2402=2403
<2403=2412,2404
<2404=2408,2405
<2405=2406
<2406=2407
<2408=2409
<2409=2411,2410
<2413=2414
<2414=2418,2415
<2415=2417,2416
<2419=2447,2434,2420
<2420=2421
<2421=2422
<2422=2433,2423
<2423=2429,2424
<2424=2427,2425
<2425=2426
<2427=2428
<2429=2430
<2430=2432,2431
<2434=2435
<2435=2446,2436
<2436=2442,2437
<2437=2440,2438
<2438=2439
<2440=2441
<2442=2443
<2443=2445,2444
<2447=2448
<2448=2450,2449
<2451=2452
<2452=2454,2453
<2455=2456
<2456=2458,2457
<2459=2460
<2460=2470,2469,2461
<2461=2468,2462
<2462=2466,2463
<2463=2464
<2464=2465
<2466=2467
<2488=2494,2493,2489
<2489=2490
<2490=2492,2491
<2494=2756,2752,2748,2710,2706,2652,2625,2618,2566,2532,2518,2514,2495
<2495=2506,2499,2496
<2496=2497
<2497=2498
<2499=2500
<2500=2504,2501
<2501=2502
<2502=2503
<2504=2505
<2506=2507
<2507=2511,2508
<2508=2510,2509
<2511=2513,2512
<2514=2515
<2515=2517,2516
<2518=2519
<2519=2531,2530,2520
<2520=2529,2521
<2521=2527,2522
<2522=2523
<2523=2524
<2524=2526,2525
<2527=2528
<2532=2562,2556,2553,2533
<2533=2541,2534
<2534=2537,2535
<2535=2536
<2537=2538
<2538=2540,2539
<2541=2542
<2542=2552,2551,2543
<2543=2550,2544
<2544=2548,2545
<2545=2546
<2546=2547
<2548=2549
<2553=2555,2554
<2556=2557
<2557=2561,2558
<2558=2560,2559
<2562=2563
<2563=2565,2564
<2566=2614,2610,2607,2567
<2567=2598,2568
<2568=2594,2585,2582,2569
<2569=2570
<2570=2572,2571
<2572=2574,2573
<2574=2578,2575
<2575=2576
<2576=2577
<2578=2579
<2579=2581,2580
<2582=2584,2583
<2585=2586
<2586=2593,2587
<2587=2589,2588
<2589=2590
<2590=2592,2591
<2594=2595
<2595=2597,2596
<2598=2599
<2599=2606,2605,2600
<2600=2604,2601
<2601=2603,2602
<2607=2609,2608
<2610=2611
<2611=2613,2612
<2614=2615
<2615=2617,2616
<2618=2622,2619
<2619=2621,2620
<2622=2624,2623
<2625=2646,2626
<2626=2631,2627
<2627=2628
<2628=2630,2629
<2631=2632
<2632=2644,2633
<2633=2642,2640,2634
<2634=2635
<2635=2637,2636
<2637=2639,2638
<2640=2641
<2642=2643
<2644=2645
<2646=2647
<2647=2651,2648
<2648=2650,2649
<2652=2702,2698,2695,2653
<2653=2685,2672,2654
<2654=2664,2655
<2655=2656
<2656=2657
<2657=2661,2658
<2658=2660,2659
<2661=2663,2662
<2664=2665
<2665=2667,2666
<2667=2671,2668
<2668=2670,2669
<2672=2673
<2673=2684,2683,2674
<2674=2682,2675
<2675=2677,2676
<2677=2679,2678
<2679=2681,2680
<2685=2687,2686
<2687=2688
<2688=2694,2689
<2689=2691,2690
<2691=2693,2692
<2695=2697,2696
<2698=2699
<2699=2701,2700
<2702=2703
<2703=2705,2704
<2706=2707
<2707=2709,2708
<2710=2744,2728,2711
<2711=2712
<2712=2713
<2713=2714
<2714=2726,2715
<2715=2724,2722,2716
<2716=2717
<2717=2719,2718
<2719=2721,2720
<2722=2723
<2724=2725
<2726=2727
<2728=2729
<2729=2730
<2730=2742,2731
<2731=2740,2738,2732
<2732=2733
<2733=2735,2734
<2735=2737,2736
<2738=2739
<2740=2741
<2742=2743
<2744=2745
<2745=2747,2746
<2748=2749
<2749=2751,2750
<2752=2753
<2753=2755,2754
<2756=2757
<2757=2762,2761,2758
<2758=2760,2759
<2802=2808,2807,2803
<2803=2804
<2804=2806,2805
<2808=3002,2995,2811,2809
<2809=2810
<2811=2991,2983,2980,2812
<2812=2971,2967,2813
<2813=2963,2950,2814
<2814=2946,2932,2919,2910,2867,2818,2817,2815
<2815=2816
<2818=2858,2819
<2819=2820
<2820=2854,2821
<2821=2847,2822
<2822=2823
<2823=2846,2824
<2824=2844,2825
<2825=2840,2836,2832,2828,2826
<2826=2827
<2828=2829
<2829=2831,2830
<2832=2833
<2833=2835,2834
<2836=2837
<2837=2839,2838
<2840=2841
<2841=2843,2842
<2844=2845
<2847=2848
<2848=2850,2849
<2850=2851
<2851=2853,2852
<2854=2855
<2855=2857,2856
<2858=2859
<2859=2866,2860
<2860=2862,2861
<2862=2863
<2863=2865,2864
<2867=2906,2897,2894,2868
<2868=2880,2869
<2869=2871,2870
<2871=2872
<2872=2876,2873
<2873=2874
<2874=2875
<2876=2877
<2877=2879,2878
<2880=2881
<2881=2893,2892,2882
<2882=2891,2883
<2883=2887,2884
<2884=2885
<2885=2886
<2887=2888
<2888=2890,2889
<2894=2896,2895
<2897=2898
<2898=2905,2899
<2899=2901,2900
<2901=2902
<2902=2904,2903
<2906=2907
<2907=2909,2908
<2910=2911
<2911=2915,2912
<2912=2913
<2913=2914
<2915=2916
<2916=2918,2917
<2919=2926,2920
<2920=2922,2921
<2922=2923
<2923=2925,2924
<2926=2927
<2927=2931,2928
<2928=2930,2929
<2932=2933
<2933=2945,2944,2934
<2934=2943,2935
<2935=2939,2936
<2936=2937
<2937=2938
<2939=2940
<2940=2942,2941
<2946=2947
<2947=2949,2948
<2950=2951
<2951=2955,2952
<2952=2954,2953
<2955=2962,2956
<2956=2958,2957
<2958=2959
<2959=2961,2960
<2963=2964
<2964=2966,2965
<2967=2968
<2968=2970,2969
<2971=2972
<2972=2979,2978,2973
<2973=2977,2974
<2974=2976,2975
<2980=2982,2981
<2983=2984
<2984=2988,2985
<2985=2987,2986
<2988=2990,2989
<2991=2992
<2992=2994,2993
<2995=2996
<2996=3001,3000,2997
<2997=2999,2998
<3002=3003
<3003=3005,3004
<3036=3042,3041,3037
<3037=3038
<3038=3040,3039
<3042=3187,3131,3124,3093,3057,3049,3045,3043
<3043=3044
<3045=3046
<3046=3048,3047
<3049=3050
<3050=3052,3051
<3052=3056,3053
<3053=3055,3054
<3057=3085,3058
<3058=3059
<3059=3083,3060
<3060=3077,3071,3061
<3061=3062
<3062=3066,3063
<3063=3065,3064
<3066=3070,3067
<3067=3069,3068
<3071=3072
<3072=3076,3073
<3073=3075,3074
<3077=3078
<3078=3082,3079
<3079=3081,3080
<3083=3084
<3085=3086
<3086=3088,3087
<3088=3092,3089
<3089=3091,3090
<3093=3120,3094
<3094=3112,3095
<3095=3096
<3096=3111,3097
<3097=3110,3098
<3098=3108,3099
<3099=3106,3100
<3100=3101
<3101=3103,3102
<3103=3105,3104
<3106=3107
<3108=3109
<3112=3113
<3113=3119,3114
<3114=3116,3115
<3116=3118,3117
<3120=3121
<3121=3123,3122
<3124=3125
<3125=3130,3129,3126
<3126=3128,3127
<3131=3183,3132
<3132=3175,3161,3133
<3133=3157,3151,3134
<3134=3135
<3135=3147,3141,3136
<3136=3137
<3137=3138
<3138=3140,3139
<3141=3142
<3142=3146,3143
<3143=3145,3144
<3147=3148
<3148=3150,3149
<3151=3152
<3152=3156,3153
<3153=3155,3154
<3157=3158
<3158=3160,3159
<3161=3162
<3162=3174,3173,3163
<3163=3172,3164
<3164=3166,3165
<3166=3167
<3167=3169,3168
<3169=3171,3170
<3175=3176
<3176=3182,3177
<3177=3179,3178
<3179=3181,3180
<3183=3184
<3184=3186,3185
<3187=3199,3191,3188
<3188=3190,3189
<3191=3198,3197,3192
<3192=3196,3193
<3193=3195,3194
<3199=3204,3203,3200
<3200=3202,3201
<3224=3229,3225
<3225=3226
<3226=3228,3227
<3229=3242,3238,3234,3230
<3230=3231
<3231=3233,3232
<3234=3235
<3235=3237,3236
<3238=3239
<3239=3241,3240
<3242=3243
<3243=3245,3244
<3255=3257,3256
<3257=3265,3258
<3258=3259
<3259=3263,3260
<3260=3261
<3261=3262
<3263=3264
<3265=3266
<3266=3272,3267
<3267=3268
<3268=3269
<3269=3271,3270
<3272=3273
<3279=3285,3284,3280
<3280=3281
<3281=3283,3282
<3285=3339,3286
<3286=3319,3287
<3287=3310,3300,3292,3288
<3288=3289
<3289=3291,3290
<3292=3293
<3293=3295,3294
<3295=3299,3296
<3296=3298,3297
<3300=3301
<3301=3307,3302
<3302=3306,3303
<3303=3305,3304
<3307=3309,3308
<3310=3311
<3311=3318,3317,3312
<3312=3316,3313
<3313=3315,3314
<3319=3320
<3320=3334,3321
<3321=3329,3322
<3322=3324,3323
<3324=3328,3325
<3325=3327,3326
<3329=3331,3330
<3331=3333,3332
<3334=3338,3335
<3335=3337,3336
<3339=3372,3340
<3340=3363,3353,3345,3341
<3341=3342
<3342=3344,3343
<3345=3346
<3346=3348,3347
<3348=3352,3349
<3349=3351,3350
<3353=3354
<3354=3360,3355
<3355=3359,3356
<3356=3358,3357
<3360=3362,3361
<3363=3364
<3364=3371,3370,3365
<3365=3369,3366
<3366=3368,3367
<3372=3373
<3373=3387,3374
<3374=3382,3375
<3375=3377,3376
<3377=3381,3378
<3378=3380,3379
<3382=3384,3383
<3384=3386,3385
<3387=3389,3388
<3404=3410,3409,3405
<3405=3406
<3406=3408,3407
<3410=3415,3411
<3411=3412
<3412=3414,3413
<3415=3441,3416
<3416=3417
<3417=3439,3418
<3418=3435,3429,3419
<3419=3420
<3420=3424,3421
<3421=3423,3422
<3424=3428,3425
<3425=3427,3426
<3429=3430
<3430=3434,3431
<3431=3433,3432
<3435=3436
<3436=3438,3437
<3439=3440
<3441=3442
<3442=3444,3443
<3451=3460,3459,3452
<3452=3456,3453
<3453=3455,3454
<3456=3458,3457
<3460=3594,3465,3461
<3461=3462
<3462=3464,3463
<3465=3590,3466
<3466=3582,3571,3467
<3467=3567,3561,3468
<3468=3469
<3469=3557,3551,3470
<3470=3471
<3471=3527,3476,3472
<3472=3473
<3473=3475,3474
<3476=3508,3477
<3477=3482,3478
<3478=3479
<3479=3481,3480
<3482=3485,3483
<3483=3484
<3485=3486
<3486=3488,3487
<3488=3506,3489
<3489=3490
<3490=3491
<3491=3493,3492
<3493=3501,3494
<3494=3496,3495
<3496=3498,3497
<3498=3500,3499
<3501=3503,3502
<3503=3505,3504
<3506=3507
<3508=3509
<3509=3524,3510
<3510=3512,3511
<3512=3522,3513
<3513=3514
<3514=3515
<3515=3517,3516
<3517=3519,3518
<3519=3521,3520
<3522=3523
<3524=3526,3525
<3527=3532,3528
<3528=3529
<3529=3531,3530
<3532=3533
<3533=3548,3534
<3534=3536,3535
<3536=3546,3537
<3537=3538
<3538=3539
<3539=3541,3540
<3541=3543,3542
<3543=3545,3544
<3546=3547
<3548=3550,3549
<3551=3552
<3552=3556,3553
<3553=3555,3554
<3557=3558
<3558=3560,3559
<3561=3562
<3562=3566,3563
<3563=3565,3564
<3567=3568
<3568=3570,3569
<3571=3572
<3572=3581,3580,3573
<3573=3579,3574
<3574=3576,3575
<3576=3578,3577
<3582=3583
<3583=3589,3584
<3584=3586,3585
<3586=3588,3587
<3590=3591
<3591=3593,3592
<3594=3606,3598,3595
<3595=3597,3596
<3598=3605,3604,3599
<3599=3603,3600
<3600=3602,3601
<3606=3611,3610,3607
<3607=3609,3608
<3636=3642,3641,3637
<3637=3638
<3638=3640,3639
<3642=3787,3726,3695,3659,3651,3647,3643
<3643=3644
<3644=3646,3645
<3647=3648
<3648=3650,3649
<3651=3652
<3652=3654,3653
<3654=3658,3655
<3655=3657,3656
<3659=3687,3660
<3660=3661
<3661=3685,3662
<3662=3679,3673,3663
<3663=3664
<3664=3668,3665
<3665=3667,3666
<3668=3672,3669
<3669=3671,3670
<3673=3674
<3674=3678,3675
<3675=3677,3676
<3679=3680
<3680=3684,3681
<3681=3683,3682
<3685=3686
<3687=3688
<3688=3690,3689
<3690=3694,3691
<3691=3693,3692
<3695=3722,3696
<3696=3714,3697
<3697=3698
<3698=3713,3699
<3699=3712,3700
<3700=3710,3701
<3701=3708,3702
<3702=3703
<3703=3705,3704
<3705=3707,3706
<3708=3709
<3710=3711
<3714=3715
<3715=3721,3716
<3716=3718,3717
<3718=3720,3719
<3722=3723
<3723=3725,3724
<3726=3783,3727
<3727=3775,3764,3728
<3728=3758,3752,3729
<3729=3730
<3730=3746,3740,3731
<3731=3732
<3732=3734,3733
<3734=3735
<3735=3739,3736
<3736=3738,3737
<3740=3741
<3741=3745,3742
<3742=3744,3743
<3746=3747
<3747=3751,3748
<3748=3750,3749
<3752=3753
<3753=3757,3754
<3754=3756,3755
<3758=3759
<3759=3763,3760
<3760=3762,3761
<3764=3765
<3765=3774,3773,3766
<3766=3772,3767
<3767=3769,3768
<3769=3771,3770
<3775=3776
<3776=3782,3777
<3777=3779,3778
<3779=3781,3780
<3783=3784
<3784=3786,3785
<3787=3799,3791,3788
<3788=3790,3789
<3791=3798,3797,3792
<3792=3796,3793
<3793=3795,3794
<3799=3804,3803,3800
<3800=3802,3801
<3825=3830,3826
<3826=3827
<3827=3829,3828
<3830=3859,3855,3851,3847,3843,3839,3835,3831
<3831=3832
<3832=3834,3833
<3835=3836
<3836=3838,3837
<3839=3840
<3840=3842,3841
<3843=3844
<3844=3846,3845
<3847=3848
<3848=3850,3849
<3851=3852
<3852=3854,3853
<3855=3856
<3856=3858,3857
<3859=3860
<3860=3862,3861
<3877=3879,3878
<3879=3887,3880
<3880=3881
<3881=3885,3882
<3882=3883
<3883=3884
<3885=3886
<3887=3888
<3888=3892,3889
<3889=3890
<3890=3891
<3892=3893
<3899=3917,3916,3900
<3900=3913,3910,3907,3904,3901
<3901=3903,3902
<3904=3906,3905
<3907=3909,3908
<3910=3912,3911
<3913=3915,3914
<3917=4088,4038,3918
<3918=4008,3981,3919
<3919=3920
<3920=3951,3924,3921
<3921=3922
<3922=3923
<3924=3945,3939,3935,3931,3927,3925
<3925=3926
<3927=3928
<3928=3930,3929
<3931=3932
<3932=3934,3933
<3935=3936
<3936=3938,3937
<3939=3940
<3940=3942,3941
<3942=3944,3943
<3945=3946
<3946=3948,3947
<3948=3950,3949
<3951=3952
<3952=3967,3953
<3953=3955,3954
<3955=3965,3956
<3956=3957
<3957=3958
<3958=3960,3959
<3960=3964,3961
<3961=3963,3962
<3965=3966
<3967=3969,3968
<3969=3979,3970
<3970=3971
<3971=3972
<3972=3974,3973
<3974=3978,3975
<3975=3977,3976
<3979=3980
<3981=4002,3996,3992,3988,3984,3982
<3982=3983
<3984=3985
<3985=3987,3986
<3988=3989
<3989=3991,3990
<3992=3993
<3993=3995,3994
<3996=3997
<3997=3999,3998
<3999=4001,4000
<4002=4003
<4003=4005,4004
<4005=4007,4006
<4008=4009
<4009=4024,4010
<4010=4012,4011
<4012=4022,4013
<4013=4014
<4014=4015
<4015=4017,4016
<4017=4021,4018
<4018=4020,4019
<4022=4023
<4024=4026,4025
<4026=4036,4027
<4027=4028
<4028=4029
<4029=4031,4030
<4031=4035,4032
<4032=4034,4033
<4036=4037
<4038=4084,4039
<4039=4080,4074,4068,4062,4056,4052,4046,4042,4040
<4040=4041
<4042=4043
<4043=4045,4044
<4046=4047
<4047=4051,4048
<4048=4050,4049
<4052=4053
<4053=4055,4054
<4056=4057
<4057=4059,4058
<4059=4061,4060
<4062=4063
<4063=4065,4064
<4065=4067,4066
<4068=4069
<4069=4071,4070
<4071=4073,4072
<4074=4075
<4075=4077,4076
<4077=4079,4078
<4080=4081
<4081=4083,4082
<4084=4085
<4085=4087,4086
<4088=4089
<4089=4095,4090
<4090=4091
<4091=4092
<4092=4094,4093
<4095=4096
<4118=4124,4123,4119
<4119=4120
<4120=4122,4121
<4124=4725,4125
<4125=4687,4601,4126
<4126=4127
<4127=4559,4439,4128
<4128=4129
<4129=4393,4300,4130
<4130=4131
<4131=4266,4135,4132
<4132=4133
<4133=4134
<4135=4262,4249,4228,4207,4158,4150,4146,4138,4136
<4136=4137
<4138=4139
<4139=4145,4140
<4140=4144,4141
<4141=4143,4142
<4146=4147
<4147=4149,4148
<4150=4151
<4151=4157,4152
<4152=4154,4153
<4154=4156,4155
<4158=4203,4195,4192,4159
<4159=4176,4160
<4160=4161
<4161=4173,4162
<4162=4170,4163
<4163=4167,4164
<4164=4166,4165
<4167=4169,4168
<4170=4172,4171
<4173=4175,4174
<4176=4177
<4177=4189,4178
<4178=4186,4179
<4179=4183,4180
<4180=4182,4181
<4183=4185,4184
<4186=4188,4187
<4189=4191,4190
<4192=4194,4193
<4195=4196
<4196=4202,4197
<4197=4199,4198
<4199=4201,4200
<4203=4204
<4204=4206,4205
<4207=4208
<4208=4226,4209
<4209=4218,4216,4210
<4210=4211
<4211=4213,4212
<4213=4215,4214
<4216=4217
<4218=4219
<4219=4225,4220
<4220=4222,4221
<4222=4224,4223
<4226=4227
<4228=4229
<4229=4247,4230
<4230=4239,4237,4231
<4231=4232
<4232=4234,4233
<4234=4236,4235
<4237=4238
<4239=4240
<4240=4246,4241
<4241=4243,4242
<4243=4245,4244
<4247=4248
<4249=4250
<4250=4260,4251
<4251=4252
<4252=4253
<4253=4259,4254
<4254=4256,4255
<4256=4258,4257
<4260=4261
<4262=4263
<4263=4265,4264
<4266=4267
<4267=4284,4268
<4268=4270,4269
<4270=4282,4271
<4271=4272
<4272=4273
<4273=4279,4274
<4274=4276,4275
<4276=4278,4277
<4279=4281,4280
<4282=4283
<4284=4286,4285
<4286=4298,4287
<4287=4288
<4288=4289
<4289=4295,4290
<4290=4292,4291
<4292=4294,4293
<4295=4297,4296
<4298=4299
<4300=4389,4376,4323,4315,4311,4303,4301
<4301=4302
<4303=4304
<4304=4310,4305
<4305=4309,4306
<4306=4308,4307
<4311=4312
<4312=4314,4313
<4315=4316
<4316=4322,4317
<4317=4319,4318
<4319=4321,4320
<4323=4372,4364,4361,4324
<4324=4343,4325
<4325=4326
<4326=4338,4327
<4327=4335,4328
<4328=4332,4329
<4329=4331,4330
<4332=4334,4333
<4335=4337,4336
<4338=4342,4339
<4339=4341,4340
<4343=4344
<4344=4356,4345
<4345=4353,4346
<4346=4350,4347
<4347=4349,4348
<4350=4352,4351
<4353=4355,4354
<4356=4360,4357
<4357=4359,4358
<4361=4363,4362
<4364=4365
<4365=4371,4366
<4366=4368,4367
<4368=4370,4369
<4372=4373
<4373=4375,4374
<4376=4377
<4377=4387,4378
<4378=4379
<4379=4380
<4380=4386,4381
<4381=4383,4382
<4383=4385,4384
<4387=4388
<4389=4390
<4390=4392,4391
<4393=4394
<4394=4417,4395
<4395=4397,4396
<4397=4415,4398
<4398=4399
<4399=4400
<4400=4410,4401
<4401=4407,4402
<4402=4404,4403
<4404=4406,4405
<4407=4409,4408
<4410=4414,4411
<4411=4413,4412
<4415=4416
<4417=4419,4418
<4419=4437,4420
<4420=4421
<4421=4422
<4422=4432,4423
<4423=4429,4424
<4424=4426,4425
<4426=4428,4427
<4429=4431,4430
<4432=4436,4433
<4433=4435,4434
<4437=4438
<4439=4546,4525,4504,4483,4462,4454,4450,4442,4440
<4440=4441
<4442=4443
<4443=4449,4444
<4444=4448,4445
<4445=4447,4446
<4450=4451
<4451=4453,4452
<4454=4455
<4455=4461,4456
<4456=4458,4457
<4458=4460,4459
<4462=4463
<4463=4481,4464
<4464=4479,4475,4465
<4465=4466
<4466=4472,4467
<4467=4469,4468
<4469=4471,4470
<4472=4474,4473
<4475=4476
<4476=4478,4477
<4479=4480
<4481=4482
<4483=4484
<4484=4502,4485
<4485=4500,4496,4486
<4486=4487
<4487=4493,4488
<4488=4490,4489
<4490=4492,4491
<4493=4495,4494
<4496=4497
<4497=4499,4498
<4500=4501
<4502=4503
<4504=4505
<4505=4523,4506
<4506=4515,4513,4507
<4507=4508
<4508=4510,4509
<4510=4512,4511
<4513=4514
<4515=4516
<4516=4522,4517
<4517=4519,4518
<4519=4521,4520
<4523=4524
<4525=4526
<4526=4544,4527
<4527=4536,4534,4528
<4528=4529
<4529=4531,4530
<4531=4533,4532
<4534=4535
<4536=4537
<4537=4543,4538
<4538=4540,4539
<4540=4542,4541
<4544=4545
<4546=4547
<4547=4557,4548
<4548=4549
<4549=4550
<4550=4556,4551
<4551=4553,4552
<4553=4555,4554
<4557=4558
<4559=4560
<4560=4581,4561
<4561=4563,4562
<4563=4579,4564
<4564=4565
<4565=4566
<4566=4576,4567
<4567=4573,4568
<4568=4570,4569
<4570=4572,4571
<4573=4575,4574
<4576=4578,4577
<4579=4580
<4581=4583,4582
<4583=4599,4584
<4584=4585
<4585=4586
<4586=4596,4587
<4587=4593,4588
<4588=4590,4589
<4590=4592,4591
<4593=4595,4594
<4596=4598,4597
<4599=4600
<4601=4674,4649,4624,4616,4612,4604,4602
<4602=4603
<4604=4605
<4605=4611,4606
<4606=4610,4607
<4607=4609,4608
<4612=4613
<4613=4615,4614
<4616=4617
<4617=4623,4618
<4618=4620,4619
<4620=4622,4621
<4624=4625
<4625=4647,4626
<4626=4643,4637,4627
<4627=4628
<4628=4634,4629
<4629=4631,4630
<4631=4633,4632
<4634=4636,4635
<4637=4638
<4638=4640,4639
<4640=4642,4641
<4643=4644
<4644=4646,4645
<4647=4648
<4649=4650
<4650=4672,4651
<4651=4668,4662,4652
<4652=4653
<4653=4659,4654
<4654=4656,4655
<4656=4658,4657
<4659=4661,4660
<4662=4663
<4663=4665,4664
<4665=4667,4666
<4668=4669
<4669=4671,4670
<4672=4673
<4674=4675
<4675=4685,4676
<4676=4677
<4677=4678
<4678=4684,4679
<4679=4681,4680
<4681=4683,4682
<4685=4686
<4687=4688
<4688=4707,4689
<4689=4691,4690
<4691=4705,4692
<4692=4693
<4693=4694
<4694=4700,4695
<4695=4697,4696
<4697=4699,4698
<4700=4704,4701
<4701=4703,4702
<4705=4706
<4707=4709,4708
<4709=4723,4710
<4710=4711
<4711=4712
<4712=4718,4713
<4713=4715,4714
<4715=4717,4716
<4718=4722,4719
<4719=4721,4720
<4723=4724
<4725=4728,4726
<4726=4727
<4728=4729
<4729=4731,4730
<4731=4733,4732
<4762=4768,4767,4763
<4763=4764
<4764=4766,4765
<4768=4769
<4769=4813,4770
<4770=4805,4788,4771
<4771=4772
<4772=4787,4773
<4773=4786,4774
<4774=4784,4775
<4775=4782,4776
<4776=4777
<4777=4779,4778
<4779=4781,4780
<4782=4783
<4784=4785
<4788=4789
<4789=4804,4790
<4790=4803,4791
<4791=4801,4792
<4792=4799,4793
<4793=4794
<4794=4796,4795
<4796=4798,4797
<4799=4800
<4801=4802
<4805=4806
<4806=4812,4807
<4807=4809,4808
<4809=4811,4810
<4813=4814
<4814=4816,4815
<4825=4828,4827,4826
<4828=4829
<4829=4910,4830
<4830=4906,4831
<4831=4902,4896,4893,4832
<4832=4889,4883,4871,4861,4855,4843,4833
<4833=4834
<4834=4836,4835
<4836=4842,4837
<4837=4841,4838
<4838=4840,4839
<4843=4844
<4844=4852,4845
<4845=4851,4846
<4846=4850,4847
<4847=4849,4848
<4852=4854,4853
<4855=4856
<4856=4860,4857
<4857=4859,4858
<4861=4862
<4862=4864,4863
<4864=4870,4865
<4865=4869,4866
<4866=4868,4867
<4871=4872
<4872=4880,4873
<4873=4879,4874
<4874=4878,4875
<4875=4877,4876
<4880=4882,4881
<4883=4884
<4884=4888,4885
<4885=4887,4886
<4889=4890
<4890=4892,4891
<4893=4895,4894
<4896=4897
<4897=4901,4898
<4898=4900,4899
<4902=4903
<4903=4905,4904
<4906=4907
<4907=4909,4908
<4910=4911
<4925=4943,4942,4926
<4926=4939,4936,4933,4930,4927
<4927=4929,4928
<4930=4932,4931
<4933=4935,4934
<4936=4938,4937
<4939=4941,4940
<4943=5140,5136,5132,5128,5110,5084,5062,5053,4975,4966,4953,4946,4944
<4944=4945
<4946=4947
<4947=4951,4948
<4948=4949
<4949=4950
<4951=4952
<4953=4954
<4954=4964,4955
<4955=4958,4956
<4956=4957
<4958=4959
<4959=4963,4960
<4960=4962,4961
<4964=4965
<4966=4967
<4967=4973,4968
<4968=4971,4969
<4969=4970
<4971=4972
<4973=4974
<4975=5047,5043,5040,4976
<4976=4977
<4977=4978
<4978=5038,4979
<4979=5036,5034,5008,4982,4980
<4980=4981
<4982=4983
<4983=5003,4984
<4984=4994,4985
<4985=4989,4986
<4986=4988,4987
<4989=4991,4990
<4991=4993,4992
<4994=4998,4995
<4995=4997,4996
<4998=5000,4999
<5000=5002,5001
<5003=5005,5004
<5005=5007,5006
<5008=5009
<5009=5029,5010
<5010=5020,5011
<5011=5015,5012
<5012=5014,5013
<5015=5017,5016
<5017=5019,5018
<5020=5024,5021
<5021=5023,5022
<5024=5026,5025
<5026=5028,5027
<5029=5031,5030
<5031=5033,5032
<5034=5035
<5036=5037
<5038=5039
<5040=5042,5041
<5043=5044
<5044=5046,5045
<5047=5048
<5048=5052,5049
<5049=5051,5050
<5053=5054
<5054=5061,5055
<5055=5059,5056
<5056=5057
<5057=5058
<5059=5060
<5062=5076,5063
<5063=5064
<5064=5074,5065
<5065=5072,5068,5066
<5066=5067
<5068=5069
<5069=5071,5070
<5072=5073
<5074=5075
<5076=5077
<5077=5081,5078
<5078=5080,5079
<5081=5083,5082
<5084=5102,5085
<5085=5086
<5086=5100,5087
<5087=5098,5094,5088
<5088=5089
<5089=5091,5090
<5091=5093,5092
<5094=5095
<5095=5097,5096
<5098=5099
<5100=5101
<5102=5103
<5103=5107,5104
<5104=5106,5105
<5107=5109,5108
<5110=5111
<5111=5127,5112
<5112=5125,5113
<5113=5114
<5114=5115
<5115=5123,5116
<5116=5117
<5117=5118
<5118=5122,5119
<5119=5121,5120
<5123=5124
<5125=5126
<5128=5129
<5129=5131,5130
<5132=5133
<5133=5135,5134
<5136=5137
<5137=5139,5138
<5140=5141
<5141=5148,5147,5142
<5142=5146,5143
<5143=5145,5144
<5177=5216,5215,5178
<5178=5212,5209,5206,5203,5200,5197,5194,5191,5188,5185,5182,5179
<5179=5181,5180
<5182=5184,5183
<5185=5187,5186
<5188=5190,5189
<5191=5193,5192
<5194=5196,5195
<5197=5199,5198
<5200=5202,5201
<5203=5205,5204
<5206=5208,5207
<5209=5211,5210
<5212=5214,5213
<5216=5219,5217
<5217=5218
<5219=5220
<5220=5228,5221
<5221=5226,5224,5222
<5222=5223
<5224=5225
<5226=5227
<5228=5229
