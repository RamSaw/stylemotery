>3	FunctionDef	usage ()
>4	ParameterList	 
>5	ReturnType	void
>6	CompoundStatement	 
>7	ExpressionStatement	 
>8	CallExpression	mexPrintf ( \"\n\" )
>9	ArgumentList	\"\n\"
>10	Argument	\"\n\"
>11	PrimaryExpression	\"\n\"
>12	Callee	mexPrintf
>13	Identifier	mexPrintf
>14	ExpressionStatement	 
>15	CallExpression	mexPrintf ( \"  maxiters 
>16	ArgumentList	\"  maxiters 
>17	Argument	\"  maxiters 
>18	PrimaryExpression	\"  maxiters 
>19	Callee	mexPrintf
>20	Identifier	mexPrintf
>21	ExpressionStatement	 
>22	CallExpression	drwnMatlabUtils 
>23	ArgumentList	 
>24	Callee	drwnMatlabUtils 
>25	Identifier	drwnMatlabUtils 
>26	ExpressionStatement	 
>27	CallExpression	mexPrintf ( \"OPTIONS
>28	ArgumentList	\"OPTIONS
>29	Argument	\"OPTIONS
>30	PrimaryExpression	\"OPTIONS
>31	Callee	mexPrintf
>32	Identifier	mexPrintf
>33	ExpressionStatement	 
>34	CallExpression	mexPrintf ( \"  weights  
>35	ArgumentList	\"  weights  
>36	Argument	\"  weights  
>37	PrimaryExpression	\"  weights  
>38	Callee	mexPrintf
>39	Identifier	mexPrintf
>40	ExpressionStatement	 
>41	CallExpression	mexPrintf ( \"  features 
>42	ArgumentList	\"  features 
>43	Argument	\"  features 
>44	PrimaryExpression	\"  features 
>45	Callee	mexPrintf
>46	Identifier	mexPrintf
>47	ExpressionStatement	 
>48	CallExpression	mexPrintf ( \"USAGE
>49	ArgumentList	\"USAGE
>50	Argument	\"USAGE
>51	PrimaryExpression	\"USAGE
>52	Callee	mexPrintf
>53	Identifier	mexPrintf
>54	ExpressionStatement	 
>55	CallExpression	mexPrintf ( \"\n\" )
>56	ArgumentList	\"\n\"
>57	Argument	\"\n\"
>58	PrimaryExpression	\"\n\"
>59	Callee	mexPrintf
>60	Identifier	mexPrintf
>61	ExpressionStatement	 
>62	CallExpression	mexPrintf ( DRWN_USAGE_HEADER )
>63	ArgumentList	DRWN_USAGE_HEADER
>64	Argument	DRWN_USAGE_HEADER
>65	Identifier	DRWN_USAGE_HEADER
>66	Callee	mexPrintf
>67	Identifier	mexPrintf
>72	FunctionDef	mexFunction (int nlhs , mxArray * plhs [ ] , int nrhs , const mxArray * prhs [ ])
>73	ParameterList	int nlhs , mxArray * plhs [ ] , int nrhs , const mxArray * prhs [ ]
>74	Parameter	 
>75	Identifier	prhs
>76	ParameterType	const mxArray * [ ]
>77	Parameter	 
>78	Identifier	nrhs
>79	ParameterType	int
>80	Parameter	 
>81	Identifier	plhs
>82	ParameterType	mxArray * [ ]
>83	Parameter	 
>84	Identifier	nlhs
>85	ParameterType	int
>86	ReturnType	void
>87	CompoundStatement	 
>88	ExpressionStatement	 
>89	CallExpression	drwnCodeProfiler 
>90	ArgumentList	 
>91	Callee	drwnCodeProfiler 
>92	Identifier	drwnCodeProfiler 
>93	ExpressionStatement	 
>94	CallExpression	drwnCodeProfiler 
>95	ArgumentList	drwnCodeProfiler 
>96	Argument	drwnCodeProfiler 
>97	CallExpression	drwnCodeProfiler 
>98	ArgumentList	\"mex\"
>99	Argument	\"mex\"
>100	PrimaryExpression	\"mex\"
>101	Callee	drwnCodeProfiler 
>102	Identifier	drwnCodeProfiler 
>103	Callee	drwnCodeProfiler 
>104	Identifier	drwnCodeProfiler 
>105	IfStatement	if ( nlhs == 1 )
>106	CompoundStatement	 
>107	ForStatement	for ( int col = 0 ; col < clusters . numFeatures ( ) ; col ++ )
>108	CompoundStatement	 
>109	ForStatement	for ( int row = 0 ; row < K ; row ++ )
>110	CompoundStatement	 
>111	ExpressionStatement	 
>112	AssignmentExpr	* p ++ = clusters . getCentroids ( ) ( row , col )
>113	CallExpression	clusters . getCentroids ( ) ( row , col )
>114	ArgumentList	row
>115	Argument	col
>116	Identifier	col
>117	Argument	row
>118	Identifier	row
>119	Callee	clusters . getCentroids ( )
>120	CallExpression	clusters . getCentroids ( )
>121	ArgumentList	 
>122	Callee	clusters . getCentroids
>123	MemberAccess	clusters . getCentroids
>124	Identifier	getCentroids
>125	Identifier	clusters
>126	UnaryOp	* p ++
>127	IncDecOp	p ++
>128	IncDec	++
>129	Identifier	p
>130	UnaryOperator	*
>131	IncDecOp	 
>132	IncDec	++
>133	Identifier	row
>134	Condition	 
>135	RelationalExpression	row < K
>136	Identifier	K
>137	Identifier	row
>138	ForInit	 
>139	IdentifierDeclStatement	int row = 0 ;
>140	IdentifierDecl	row = 0
>141	AssignmentExpr	row = 0
>142	PrimaryExpression	0
>143	Identifier	row
>144	Identifier	row
>145	IdentifierDeclType	int
>146	IncDecOp	 
>147	IncDec	++
>148	Identifier	col
>149	Condition	 
>150	RelationalExpression	col < clusters . numFeatures ( )
>151	CallExpression	clusters . numFeatures ( )
>152	ArgumentList	 
>153	Callee	clusters . numFeatures
>154	MemberAccess	clusters . numFeatures
>155	Identifier	numFeatures
>156	Identifier	clusters
>157	Identifier	col
>158	ForInit	 
>159	IdentifierDeclStatement	int col = 0 ;
>160	IdentifierDecl	col = 0
>161	AssignmentExpr	col = 0
>162	PrimaryExpression	0
>163	Identifier	col
>164	Identifier	col
>165	IdentifierDeclType	int
>166	IdentifierDeclStatement	 
>167	IdentifierDecl	* p = mxGetPr ( plhs [ 0 ] )
>168	AssignmentExpr	* p = mxGetPr ( plhs [ 0 ] )
>169	CallExpression	mxGetPr ( plhs [ 0 ] )
>170	ArgumentList	plhs [ 0 ]
>171	Argument	plhs [ 0 ]
>172	ArrayIndexing	plhs [ 0 ]
>173	PrimaryExpression	0
>174	Identifier	plhs
>175	Callee	mxGetPr
>176	Identifier	mxGetPr
>177	Identifier	p
>178	Identifier	p
>179	IdentifierDeclType	double *
>180	ExpressionStatement	 
>181	AssignmentExpr	plhs [ 0 ] = mxCreateDoubleMatrix ( K , clusters . numFeatures ( ) , mxREAL )
>182	CallExpression	mxCreateDoubleMatrix ( K , clusters . numFeatures ( ) , mxREAL )
>183	ArgumentList	K
>184	Argument	mxREAL
>185	Identifier	mxREAL
>186	Argument	clusters . numFeatures ( )
>187	CallExpression	clusters . numFeatures ( )
>188	ArgumentList	 
>189	Callee	clusters . numFeatures
>190	MemberAccess	clusters . numFeatures
>191	Identifier	numFeatures
>192	Identifier	clusters
>193	Argument	K
>194	Identifier	K
>195	Callee	mxCreateDoubleMatrix
>196	Identifier	mxCreateDoubleMatrix
>197	ArrayIndexing	plhs [ 0 ]
>198	PrimaryExpression	0
>199	Identifier	plhs
>200	Condition	 
>201	EqualityExpression	nlhs == 1
>202	PrimaryExpression	1
>203	Identifier	nlhs
>204	IfStatement	if ( weights . empty ( ) )
>205	ElseStatement	else
>206	CompoundStatement	 
>207	ExpressionStatement	 
>208	CallExpression	clusters . train ( features , weights )
>209	ArgumentList	features
>210	Argument	weights
>211	Identifier	weights
>212	Argument	features
>213	Identifier	features
>214	Callee	clusters . train
>215	MemberAccess	clusters . train
>216	Identifier	train
>217	Identifier	clusters
>218	CompoundStatement	 
>219	ExpressionStatement	 
>220	CallExpression	clusters . train ( features )
>221	ArgumentList	features
>222	Argument	features
>223	Identifier	features
>224	Callee	clusters . train
>225	MemberAccess	clusters . train
>226	Identifier	train
>227	Identifier	clusters
>228	Condition	 
>229	CallExpression	weights . empty ( )
>230	ArgumentList	 
>231	Callee	weights . empty
>232	MemberAccess	weights . empty
>233	Identifier	empty
>234	Identifier	weights
>235	IdentifierDeclStatement	 
>236	IdentifierDecl	clusters ( K )
>237	Identifier	K
>238	Identifier	clusters
>239	IdentifierDeclType	drwnKMeans
>240	IfStatement	if ( ( nrhs > 2 ) && ( ! mxIsEmpty ( prhs [ 2 ] ) ) )
>241	CompoundStatement	 
>242	ForStatement	for ( unsigned i = 0 ; i < weights . size ( ) ; i ++ )
>243	CompoundStatement	 
>244	ExpressionStatement	 
>245	AssignmentExpr	weights [ i ] = p [ i ]
>246	ArrayIndexing	p [ i ]
>247	Identifier	i
>248	Identifier	p
>249	ArrayIndexing	weights [ i ]
>250	Identifier	i
>251	Identifier	weights
>252	IncDecOp	 
>253	IncDec	++
>254	Identifier	i
>255	Condition	 
>256	RelationalExpression	i < weights . size ( )
>257	CallExpression	weights . size ( )
>258	ArgumentList	 
>259	Callee	weights . size
>260	MemberAccess	weights . size
>261	Identifier	size
>262	Identifier	weights
>263	Identifier	i
>264	ForInit	 
>265	IdentifierDeclStatement	unsigned i = 0 ;
>266	IdentifierDecl	i = 0
>267	AssignmentExpr	i = 0
>268	PrimaryExpression	0
>269	Identifier	i
>270	Identifier	i
>271	IdentifierDeclType	unsigned
>272	IdentifierDeclStatement	 
>273	IdentifierDecl	* p = mxGetPr ( prhs [ 2 ] )
>274	AssignmentExpr	* p = mxGetPr ( prhs [ 2 ] )
>275	CallExpression	mxGetPr ( prhs [ 2 ] )
>276	ArgumentList	prhs [ 2 ]
>277	Argument	prhs [ 2 ]
>278	ArrayIndexing	prhs [ 2 ]
>279	PrimaryExpression	2
>280	Identifier	prhs
>281	Callee	mxGetPr
>282	Identifier	mxGetPr
>283	Identifier	p
>284	Identifier	p
>285	IdentifierDeclType	const double *
>286	ExpressionStatement	 
>287	CallExpression	weights . resize ( features . size ( ) , 0.0 )
>288	ArgumentList	features . size ( )
>289	Argument	0.0
>290	PrimaryExpression	0.0
>291	Argument	features . size ( )
>292	CallExpression	features . size ( )
>293	ArgumentList	 
>294	Callee	features . size
>295	MemberAccess	features . size
>296	Identifier	size
>297	Identifier	features
>298	Callee	weights . resize
>299	MemberAccess	weights . resize
>300	Identifier	resize
>301	Identifier	weights
>302	Condition	 
>303	AndExpression	( nrhs > 2 ) && ( ! mxIsEmpty ( prhs [ 2 ] ) )
>304	UnaryOp	! mxIsEmpty ( prhs [ 2 ] )
>305	CallExpression	mxIsEmpty ( prhs [ 2 ] )
>306	ArgumentList	prhs [ 2 ]
>307	Argument	prhs [ 2 ]
>308	ArrayIndexing	prhs [ 2 ]
>309	PrimaryExpression	2
>310	Identifier	prhs
>311	Callee	mxIsEmpty
>312	Identifier	mxIsEmpty
>313	UnaryOperator	!
>314	RelationalExpression	nrhs > 2
>315	PrimaryExpression	2
>316	Identifier	nrhs
>317	IdentifierDeclStatement	 
>318	IdentifierDecl	weights
>319	Identifier	weights
>320	IdentifierDeclType	vector < double >
>321	ExpressionStatement	 
>322	CallExpression	drwnMatlabUtils 
>323	ArgumentList	prhs [ 1 ]
>324	Argument	features
>325	Identifier	features
>326	Argument	prhs [ 1 ]
>327	ArrayIndexing	prhs [ 1 ]
>328	PrimaryExpression	1
>329	Identifier	prhs
>330	Callee	drwnMatlabUtils 
>331	Identifier	drwnMatlabUtils 
>332	IdentifierDeclStatement	 
>333	IdentifierDecl	features
>334	Identifier	features
>335	IdentifierDeclType	vector < vector < double > >
>336	ExpressionStatement	 
>337	CallExpression	DRWN_ASSERT_MSG ( K > 0 , \"k must be positive\" )
>338	ArgumentList	K > 0
>339	Argument	\"k must be positive\"
>340	PrimaryExpression	\"k must be positive\"
>341	Argument	K > 0
>342	RelationalExpression	K > 0
>343	PrimaryExpression	0
>344	Identifier	K
>345	Callee	DRWN_ASSERT_MSG
>346	Identifier	DRWN_ASSERT_MSG
>347	IdentifierDeclStatement	 
>348	IdentifierDecl	K = mxGetScalar ( prhs [ 0 ] )
>349	AssignmentExpr	K = mxGetScalar ( prhs [ 0 ] )
>350	CallExpression	mxGetScalar ( prhs [ 0 ] )
>351	ArgumentList	prhs [ 0 ]
>352	Argument	prhs [ 0 ]
>353	ArrayIndexing	prhs [ 0 ]
>354	PrimaryExpression	0
>355	Identifier	prhs
>356	Callee	mxGetScalar
>357	Identifier	mxGetScalar
>358	Identifier	K
>359	Identifier	K
>360	IdentifierDeclType	const int
>361	ExpressionStatement	 
>362	CallExpression	drwnCodeProfiler 
>363	ArgumentList	drwnCodeProfiler 
>364	Argument	drwnCodeProfiler 
>365	CallExpression	drwnCodeProfiler 
>366	ArgumentList	\"mex\"
>367	Argument	\"mex\"
>368	PrimaryExpression	\"mex\"
>369	Callee	drwnCodeProfiler 
>370	Identifier	drwnCodeProfiler 
>371	Callee	drwnCodeProfiler 
>372	Identifier	drwnCodeProfiler 
>373	IfStatement	if ( maxIterations >= 0 )
>374	ExpressionStatement	 
>375	AssignmentExpr	drwnKMeans 
>376	Identifier	maxIterations
>377	Identifier	drwnKMeans 
>378	Condition	 
>379	RelationalExpression	maxIterations >= 0
>380	PrimaryExpression	0
>381	Identifier	maxIterations
>382	IdentifierDeclStatement	 
>383	IdentifierDecl	maxIterations = atoi ( options [ string ( \"maxiters\" ) ] . c_str ( ) )
>384	AssignmentExpr	maxIterations = atoi ( options [ string ( \"maxiters\" ) ] . c_str ( ) )
>385	CallExpression	atoi ( options [ string ( \"maxiters\" ) ] . c_str ( ) )
>386	ArgumentList	options [ string ( \"maxiters\" ) ] . c_str ( )
>387	Argument	options [ string ( \"maxiters\" ) ] . c_str ( )
>388	CallExpression	options [ string ( \"maxiters\" ) ] . c_str ( )
>389	ArgumentList	 
>390	Callee	options [ string ( \"maxiters\" ) ] . c_str
>391	MemberAccess	options [ string ( \"maxiters\" ) ] . c_str
>392	Identifier	c_str
>393	ArrayIndexing	options [ string ( \"maxiters\" ) ]
>394	CallExpression	string ( \"maxiters\" )
>395	ArgumentList	\"maxiters\"
>396	Argument	\"maxiters\"
>397	PrimaryExpression	\"maxiters\"
>398	Callee	string
>399	Identifier	string
>400	Identifier	options
>401	Callee	atoi
>402	Identifier	atoi
>403	Identifier	maxIterations
>404	Identifier	maxIterations
>405	IdentifierDeclType	const int
>406	ExpressionStatement	 
>407	CallExpression	drwnMatlabUtils 
>408	ArgumentList	options
>409	Argument	options
>410	Identifier	options
>411	Callee	drwnMatlabUtils 
>412	Identifier	drwnMatlabUtils 
>413	IfStatement	if ( nrhs == 4 )
>414	CompoundStatement	 
>415	ExpressionStatement	 
>416	CallExpression	drwnMatlabUtils 
>417	ArgumentList	prhs [ nrhs - 1 ]
>418	Argument	options
>419	Identifier	options
>420	Argument	prhs [ nrhs - 1 ]
>421	ArrayIndexing	prhs [ nrhs - 1 ]
>422	AdditiveExpression	nrhs - 1
>423	PrimaryExpression	1
>424	Identifier	nrhs
>425	Identifier	prhs
>426	Callee	drwnMatlabUtils 
>427	Identifier	drwnMatlabUtils 
>428	Condition	 
>429	EqualityExpression	nrhs == 4
>430	PrimaryExpression	4
>431	Identifier	nrhs
>432	ExpressionStatement	 
>433	AssignmentExpr	options [ string ( \"maxiters\" ) ] = string ( \"-1\" )
>434	CallExpression	string ( \"-1\" )
>435	ArgumentList	\"-1\"
>436	Argument	\"-1\"
>437	PrimaryExpression	\"-1\"
>438	Callee	string
>439	Identifier	string
>440	ArrayIndexing	options [ string ( \"maxiters\" ) ]
>441	CallExpression	string ( \"maxiters\" )
>442	ArgumentList	\"maxiters\"
>443	Argument	\"maxiters\"
>444	PrimaryExpression	\"maxiters\"
>445	Callee	string
>446	Identifier	string
>447	Identifier	options
>448	ExpressionStatement	 
>449	CallExpression	drwnMatlabUtils 
>450	ArgumentList	options
>451	Argument	options
>452	Identifier	options
>453	Callee	drwnMatlabUtils 
>454	Identifier	drwnMatlabUtils 
>455	IdentifierDeclStatement	 
>456	IdentifierDecl	options
>457	Identifier	options
>458	IdentifierDeclType	map < string , string >
>459	ExpressionStatement	 
>460	CallExpression	DRWN_ASSERT_MSG ( ( nrhs < 3 ) || ( mxIsEmpty ( prhs [ 2 ] ) ) || ( mxGetM ( prhs [ 2 ] ) == mxGetM ( prhs [ 1 ] ) ) , \"\
>461	ArgumentList	( nrhs < 3 ) || ( mxIsEmpty ( prhs [ 2 ] ) ) || ( mxGetM ( prhs [ 2 ] ) == mxGetM ( prhs [ 1 ] ) )
>462	Argument	\"mismatch between features and weights\"
>463	PrimaryExpression	\"mismatch between features and weights\"
>464	Argument	( nrhs < 3 ) || ( mxIsEmpty ( prhs [ 2 ] ) ) || ( mxGetM ( prhs [ 2 ] ) == mxGetM ( prhs [ 1 ] ) )
>465	OrExpression	( nrhs < 3 ) || ( mxIsEmpty ( prhs [ 2 ] ) ) || ( mxGetM ( prhs [ 2 ] ) == mxGetM ( prhs [ 1 ] ) )
>466	OrExpression	( mxIsEmpty ( prhs [ 2 ] ) ) || ( mxGetM ( prhs [ 2 ] ) == mxGetM ( prhs [ 1 ] ) )
>467	EqualityExpression	mxGetM ( prhs [ 2 ] ) == mxGetM ( prhs [ 1 ] )
>468	CallExpression	mxGetM ( prhs [ 1 ] )
>469	ArgumentList	prhs [ 1 ]
>470	Argument	prhs [ 1 ]
>471	ArrayIndexing	prhs [ 1 ]
>472	PrimaryExpression	1
>473	Identifier	prhs
>474	Callee	mxGetM
>475	Identifier	mxGetM
>476	CallExpression	mxGetM ( prhs [ 2 ] )
>477	ArgumentList	prhs [ 2 ]
>478	Argument	prhs [ 2 ]
>479	ArrayIndexing	prhs [ 2 ]
>480	PrimaryExpression	2
>481	Identifier	prhs
>482	Callee	mxGetM
>483	Identifier	mxGetM
>484	CallExpression	mxIsEmpty ( prhs [ 2 ] )
>485	ArgumentList	prhs [ 2 ]
>486	Argument	prhs [ 2 ]
>487	ArrayIndexing	prhs [ 2 ]
>488	PrimaryExpression	2
>489	Identifier	prhs
>490	Callee	mxIsEmpty
>491	Identifier	mxIsEmpty
>492	RelationalExpression	nrhs < 3
>493	PrimaryExpression	3
>494	Identifier	nrhs
>495	Callee	DRWN_ASSERT_MSG
>496	Identifier	DRWN_ASSERT_MSG
>497	IfStatement	if ( ( nrhs < 2 ) || ( nrhs > 4 ) )
>498	CompoundStatement	 
>499	ExpressionStatement	 
>500	CallExpression	mexErrMsgTxt ( \"incorrect number of input arguments\" )
>501	ArgumentList	\"incorrect number of input arguments\"
>502	Argument	\"incorrect number of input arguments\"
>503	PrimaryExpression	\"incorrect number of input arguments\"
>504	Callee	mexErrMsgTxt
>505	Identifier	mexErrMsgTxt
>506	ExpressionStatement	 
>507	CallExpression	usage ( )
>508	ArgumentList	 
>509	Callee	usage
>510	Identifier	usage
>511	Condition	 
>512	OrExpression	( nrhs < 2 ) || ( nrhs > 4 )
>513	RelationalExpression	nrhs > 4
>514	PrimaryExpression	4
>515	Identifier	nrhs
>516	RelationalExpression	nrhs < 2
>517	PrimaryExpression	2
>518	Identifier	nrhs
>519	IfStatement	if ( ( nrhs == 0 ) || ( nlhs > 1 ) )
>520	CompoundStatement	 
>521	ReturnStatement	 
>522	ExpressionStatement	 
>523	CallExpression	usage ( )
>524	ArgumentList	 
>525	Callee	usage
>526	Identifier	usage
>527	Condition	 
>528	OrExpression	( nrhs == 0 ) || ( nlhs > 1 )
>529	RelationalExpression	nlhs > 1
>530	PrimaryExpression	1
>531	Identifier	nlhs
>532	EqualityExpression	nrhs == 0
>533	PrimaryExpression	0
>534	Identifier	nrhs
>535	ExpressionStatement	 
>536	CallExpression	drwnMatlabUtils 
>537	ArgumentList	 
>538	Callee	drwnMatlabUtils 
>539	Identifier	drwnMatlabUtils 
<3=6,5,4
<6=61,54,47,40,33,26,21,14,7
<7=8
<8=12,9
<9=10
<10=11
<12=13
<14=15
<15=19,16
<16=17
<17=18
<19=20
<21=22
<22=24,23
<24=25
<26=27
<27=31,28
<28=29
<29=30
<31=32
<33=34
<34=38,35
<35=36
<36=37
<38=39
<40=41
<41=45,42
<42=43
<43=44
<45=46
<47=48
<48=52,49
<49=50
<50=51
<52=53
<54=55
<55=59,56
<56=57
<57=58
<59=60
<61=62
<62=66,63
<63=64
<64=65
<66=67
<72=87,86,73
<73=83,80,77,74
<74=76,75
<77=79,78
<80=82,81
<83=85,84
<87=535,519,497,459,455,448,432,413,406,382,373,361,347,336,332,321,317,240,235,204,105,93,88
<88=89
<89=91,90
<91=92
<93=94
<94=103,95
<95=96
<96=97
<97=101,98
<98=99
<99=100
<101=102
<103=104
<105=200,106
<106=180,166,107
<107=158,149,146,108
<108=109
<109=138,134,131,110
<110=111
<111=112
<112=126,113
<113=119,114
<114=117,115
<115=116
<117=118
<119=120
<120=122,121
<122=123
<123=125,124
<126=130,127
<127=129,128
<131=133,132
<134=135
<135=137,136
<138=139
<139=140
<140=145,144,141
<141=143,142
<146=148,147
<149=150
<150=157,151
<151=153,152
<153=154
<154=156,155
<158=159
<159=160
<160=165,164,161
<161=163,162
<166=167
<167=179,178,168
<168=177,169
<169=175,170
<170=171
<171=172
<172=174,173
<175=176
<180=181
<181=197,182
<182=195,183
<183=193,186,184
<184=185
<186=187
<187=189,188
<189=190
<190=192,191
<193=194
<195=196
<197=199,198
<200=201
<201=203,202
<204=228,218,205
<205=206
<206=207
<207=208
<208=214,209
<209=212,210
<210=211
<212=213
<214=215
<215=217,216
<218=219
<219=220
<220=224,221
<221=222
<222=223
<224=225
<225=227,226
<228=229
<229=231,230
<231=232
<232=234,233
<235=236
<236=239,238,237
<240=302,241
<241=286,272,242
<242=264,255,252,243
<243=244
<244=245
<245=249,246
<246=248,247
<249=251,250
<252=254,253
<255=256
<256=263,257
<257=259,258
<259=260
<260=262,261
<264=265
<265=266
<266=271,270,267
<267=269,268
<272=273
<273=285,284,274
<274=283,275
<275=281,276
<276=277
<277=278
<278=280,279
<281=282
<286=287
<287=298,288
<288=291,289
<289=290
<291=292
<292=294,293
<294=295
<295=297,296
<298=299
<299=301,300
<302=303
<303=314,304
<304=313,305
<305=311,306
<306=307
<307=308
<308=310,309
<311=312
<314=316,315
<317=318
<318=320,319
<321=322
<322=330,323
<323=326,324
<324=325
<326=327
<327=329,328
<330=331
<332=333
<333=335,334
<336=337
<337=345,338
<338=341,339
<339=340
<341=342
<342=344,343
<345=346
<347=348
<348=360,359,349
<349=358,350
<350=356,351
<351=352
<352=353
<353=355,354
<356=357
<361=362
<362=371,363
<363=364
<364=365
<365=369,366
<366=367
<367=368
<369=370
<371=372
<373=378,374
<374=375
<375=377,376
<378=379
<379=381,380
<382=383
<383=405,404,384
<384=403,385
<385=401,386
<386=387
<387=388
<388=390,389
<390=391
<391=393,392
<393=400,394
<394=398,395
<395=396
<396=397
<398=399
<401=402
<406=407
<407=411,408
<408=409
<409=410
<411=412
<413=428,414
<414=415
<415=416
<416=426,417
<417=420,418
<418=419
<420=421
<421=425,422
<422=424,423
<426=427
<428=429
<429=431,430
<432=433
<433=440,434
<434=438,435
<435=436
<436=437
<438=439
<440=447,441
<441=445,442
<442=443
<443=444
<445=446
<448=449
<449=453,450
<450=451
<451=452
<453=454
<455=456
<456=458,457
<459=460
<460=495,461
<461=464,462
<462=463
<464=465
<465=492,466
<466=484,467
<467=476,468
<468=474,469
<469=470
<470=471
<471=473,472
<474=475
<476=482,477
<477=478
<478=479
<479=481,480
<482=483
<484=490,485
<485=486
<486=487
<487=489,488
<490=491
<492=494,493
<495=496
<497=511,498
<498=506,499
<499=500
<500=504,501
<501=502
<502=503
<504=505
<506=507
<507=509,508
<509=510
<511=512
<512=516,513
<513=515,514
<516=518,517
<519=527,520
<520=522,521
<522=523
<523=525,524
<525=526
<527=528
<528=532,529
<529=531,530
<532=534,533
<535=536
<536=538,537
<538=539
