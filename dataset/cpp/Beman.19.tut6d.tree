>3	FunctionDef	main (int argc , char * argv [ ])
>4	ParameterList	int argc , char * argv [ ]
>5	Parameter	 
>6	Identifier	argv
>7	ParameterType	char * [ ]
>8	Parameter	 
>9	Identifier	argc
>10	ParameterType	int
>11	ReturnType	int
>12	CompoundStatement	 
>13	ReturnStatement	 
>14	PrimaryExpression	0
>15	BlockStarter	 
>16	CompoundStatement	 
>17	ExpressionStatement	std 
>18	CallExpression	std 
>19	ArgumentList	1
>20	Argument	1
>21	PrimaryExpression	1
>22	Callee	std 
>23	Identifier	std 
>24	ExpressionStatement	std 
>25	ShiftExpression	std 
>26	ShiftExpression	ex . what ( ) << '\n'
>27	PrimaryExpression	'\n'
>28	CallExpression	ex . what ( )
>29	ArgumentList	 
>30	Callee	ex . what
>31	MemberAccess	ex . what
>32	Identifier	what
>33	Identifier	ex
>34	Identifier	std 
>35	ExpressionStatement	std 
>36	ShiftExpression	std 
>37	PrimaryExpression	\"************* exception *****************\n\"
>38	Identifier	std 
>39	Identifier	ex
>40	BlockStarter	 
>41	CompoundStatement	 
>42	ForStatement	for ( recursive_directory_iterator it ( argv [ 1 ] , directory_options 
>43	CompoundStatement	 
>44	IfStatement	if ( it . level ( ) > 1 )
>45	ElseStatement	else
>46	CompoundStatement	 
>47	ExpressionStatement	std 
>48	ShiftExpression	std 
>49	ShiftExpression	it -> path ( ) << '\n'
>50	PrimaryExpression	'\n'
>51	CallExpression	it -> path ( )
>52	ArgumentList	 
>53	Callee	it -> path
>54	PtrMemberAccess	it -> path
>55	Identifier	path
>56	Identifier	it
>57	Identifier	std 
>58	ForStatement	for ( int i = 0 ; i <= it . level ( ) ; ++ i )
>59	ExpressionStatement	std 
>60	ShiftExpression	std 
>61	PrimaryExpression	\"  \"
>62	Identifier	std 
>63	UnaryExpression	++ i
>64	Identifier	i
>65	IncDec	++
>66	Condition	i <= it . level ( )
>67	RelationalExpression	i <= it . level ( )
>68	CallExpression	it . level ( )
>69	ArgumentList	 
>70	Callee	it . level
>71	MemberAccess	it . level
>72	Identifier	level
>73	Identifier	it
>74	Identifier	i
>75	ForInit	int i = 0 ;
>76	IdentifierDeclStatement	int i = 0 ;
>77	IdentifierDecl	i = 0
>78	AssignmentExpr	i = 0
>79	PrimaryExpression	0
>80	Identifier	i
>81	Identifier	i
>82	IdentifierDeclType	int
>83	ExpressionStatement	it . pop ( )
>84	CallExpression	it . pop ( )
>85	ArgumentList	 
>86	Callee	it . pop
>87	MemberAccess	it . pop
>88	Identifier	pop
>89	Identifier	it
>90	Condition	it . level ( ) > 1
>91	RelationalExpression	it . level ( ) > 1
>92	PrimaryExpression	1
>93	CallExpression	it . level ( )
>94	ArgumentList	 
>95	Callee	it . level
>96	MemberAccess	it . level
>97	Identifier	level
>98	Identifier	it
>99	UnaryExpression	++ it
>100	Identifier	it
>101	IncDec	++
>102	Condition	it != recursive_directory_iterator ( )
>103	EqualityExpression	it != recursive_directory_iterator ( )
>104	CallExpression	recursive_directory_iterator ( )
>105	ArgumentList	 
>106	Callee	recursive_directory_iterator
>107	Identifier	recursive_directory_iterator
>108	Identifier	it
>109	ForInit	recursive_directory_iterator it ( argv [ 1 ] , directory_options 
>110	IdentifierDeclStatement	recursive_directory_iterator it ( argv [ 1 ] , directory_options 
>111	IdentifierDecl	it ( argv [ 1 ] , directory_options 
>112	Expression	argv [ 1 ] , directory_options 
>113	Identifier	directory_options 
>114	ArrayIndexing	argv [ 1 ]
>115	PrimaryExpression	1
>116	Identifier	argv
>117	Identifier	it
>118	IdentifierDeclType	recursive_directory_iterator
>119	IfStatement	if ( argc < 2 )
>120	CompoundStatement	 
>121	ReturnStatement	 
>122	PrimaryExpression	1
>123	ExpressionStatement	 
>124	ShiftExpression	std 
>125	PrimaryExpression	\"Usage
>126	Identifier	std 
>127	Condition	 
>128	RelationalExpression	argc < 2
>129	PrimaryExpression	2
>130	Identifier	argc
<3=12,11,4
<4=8,5
<5=7,6
<8=10,9
<12=119,40,15,13
<13=14
<15=39,16
<16=35,24,17
<17=18
<18=22,19
<19=20
<20=21
<22=23
<24=25
<25=34,26
<26=28,27
<28=30,29
<30=31
<31=33,32
<35=36
<36=38,37
<40=41
<41=42
<42=109,102,99,43
<43=44
<44=90,83,45
<45=46
<46=58,47
<47=48
<48=57,49
<49=51,50
<51=53,52
<53=54
<54=56,55
<58=75,66,63,59
<59=60
<60=62,61
<63=65,64
<66=67
<67=74,68
<68=70,69
<70=71
<71=73,72
<75=76
<76=77
<77=82,81,78
<78=80,79
<83=84
<84=86,85
<86=87
<87=89,88
<90=91
<91=93,92
<93=95,94
<95=96
<96=98,97
<99=101,100
<102=103
<103=108,104
<104=106,105
<106=107
<109=110
<110=111
<111=118,117,112
<112=114,113
<114=116,115
<119=127,120
<120=123,121
<121=122
<123=124
<124=126,125
<127=128
<128=130,129
