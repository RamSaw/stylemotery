>3	FunctionDef	_load_file_image (const char * i_filename)
>4	ParameterList	const char * i_filename
>5	Parameter	 
>6	Identifier	i_filename
>7	ParameterType	const char *
>8	ReturnType	unsigned char *
>9	CompoundStatement	 
>10	ReturnStatement	 
>11	Identifier	result
>12	BlockStarter	 
>13	CompoundStatement	 
>14	ExpressionStatement	 
>15	Statement	throw
>16	IfStatement	if ( result != NULL )
>17	CompoundStatement	 
>18	ExpressionStatement	result
>19	Identifier	result
>20	Statement	delete
>21	Condition	result != NULL
>22	EqualityExpression	result != NULL
>23	Identifier	NULL
>24	Identifier	result
>25	BlockStarter	 
>26	CompoundStatement	 
>27	ExpressionStatement	inf . close ( )
>28	CallExpression	inf . close ( )
>29	ArgumentList	 
>30	Callee	inf . close
>31	MemberAccess	inf . close
>32	Identifier	close
>33	Identifier	inf
>34	IfStatement	if ( size != inf . gcount ( ) )
>35	CompoundStatement	 
>36	ExpressionStatement	exception ( )
>37	CallExpression	exception ( )
>38	ArgumentList	 
>39	Callee	exception
>40	Identifier	exception
>41	Statement	throw
>42	Condition	size != inf . gcount ( )
>43	EqualityExpression	size != inf . gcount ( )
>44	CallExpression	inf . gcount ( )
>45	ArgumentList	 
>46	Callee	inf . gcount
>47	MemberAccess	inf . gcount
>48	Identifier	gcount
>49	Identifier	inf
>50	Identifier	size
>51	ExpressionStatement	inf . read ( ( char * ) result , size )
>52	CallExpression	inf . read ( ( char * ) result , size )
>53	ArgumentList	( char * ) result
>54	Argument	size
>55	Identifier	size
>56	Argument	( char * ) result
>57	CastExpression	( char * ) result
>58	Identifier	result
>59	CastTarget	char *
>60	Callee	inf . read
>61	MemberAccess	inf . read
>62	Identifier	read
>63	Identifier	inf
>64	ExpressionStatement	result = new unsigned char [ size ]
>65	AssignmentExpr	result = new unsigned char [ size ]
>66	Identifier	size
>67	Identifier	result
>68	IdentifierDeclStatement	int size = 320 * 240 * 4 ;
>69	IdentifierDecl	size = 320 * 240 * 4
>70	AssignmentExpr	size = 320 * 240 * 4
>71	MultiplicativeExpression	320 * 240 * 4
>72	MultiplicativeExpression	240 * 4
>73	PrimaryExpression	4
>74	PrimaryExpression	240
>75	PrimaryExpression	320
>76	Identifier	size
>77	Identifier	size
>78	IdentifierDeclType	int
>79	ExpressionStatement	inf . open ( i_filename , ios 
>80	CallExpression	inf . open ( i_filename , ios 
>81	ArgumentList	i_filename
>82	Argument	ios 
>83	InclusiveOrExpression	ios 
>84	Identifier	ios 
>85	Identifier	ios 
>86	Argument	i_filename
>87	Identifier	i_filename
>88	Callee	inf . open
>89	MemberAccess	inf . open
>90	Identifier	open
>91	Identifier	inf
>92	IdentifierDeclStatement	 
>93	IdentifierDecl	* result = NULL
>94	AssignmentExpr	* result = NULL
>95	Identifier	NULL
>96	Identifier	NULL
>97	Identifier	result
>98	IdentifierDeclType	unsigned char *
>99	IdentifierDeclStatement	 
>100	IdentifierDecl	inf
>101	Identifier	inf
>102	IdentifierDeclType	ifstream
>114	FunctionDef	__main (int argc , char * argv [ ])
>115	ParameterList	int argc , char * argv [ ]
>116	Parameter	 
>117	Identifier	argv
>118	ParameterType	char * [ ]
>119	Parameter	 
>120	Identifier	argc
>121	ParameterType	int
>122	ReturnType	int
>123	CompoundStatement	 
>124	ReturnStatement	 
>125	PrimaryExpression	0
>126	CompoundStatement	 
>127	ExpressionStatement	 
>128	Identifier	buf
>129	Statement	 
>130	ExpressionStatement	 
>131	Identifier	ar
>132	Statement	 
>133	ExpressionStatement	 
>134	Identifier	ra
>135	Statement	 
>136	ForStatement	for ( int i = 0 ; i < 1000 ; i ++ )
>137	CompoundStatement	 
>138	ExpressionStatement	 
>139	CallExpression	ar -> getTransmationMatrix ( result_mat )
>140	ArgumentList	result_mat
>141	Argument	result_mat
>142	Identifier	result_mat
>143	Callee	ar -> getTransmationMatrix
>144	PtrMemberAccess	ar -> getTransmationMatrix
>145	Identifier	getTransmationMatrix
>146	Identifier	ar
>147	ExpressionStatement	 
>148	CallExpression	ar -> detectMarkerLite ( * ra , 100 )
>149	ArgumentList	* ra
>150	Argument	100
>151	PrimaryExpression	100
>152	Argument	* ra
>153	UnaryOp	* ra
>154	Identifier	ra
>155	UnaryOperator	*
>156	Callee	ar -> detectMarkerLite
>157	PtrMemberAccess	ar -> detectMarkerLite
>158	Identifier	detectMarkerLite
>159	Identifier	ar
>160	IncDecOp	 
>161	IncDec	++
>162	Identifier	i
>163	Condition	 
>164	RelationalExpression	i < 1000
>165	PrimaryExpression	1000
>166	Identifier	i
>167	ForInit	 
>168	IdentifierDeclStatement	int i = 0 ;
>169	IdentifierDecl	i = 0
>170	AssignmentExpr	i = 0
>171	PrimaryExpression	0
>172	Identifier	i
>173	Identifier	i
>174	IdentifierDeclType	int
>175	ExpressionStatement	 
>176	Statement	 
>177	Statement	 
>178	Statement	 
>179	Statement	 
>180	Statement	 
>181	Statement	 
>182	Statement	 
>183	Statement	 
>184	Statement	 
>185	Statement	 
>186	Statement	 
>187	Statement	 
>188	Statement	 
>189	Statement	 
>190	Statement	 
>191	Statement	 
>192	Statement	 
>193	Statement	 
>194	Statement	 
>195	Statement	 
>196	Statement	 
>197	Statement	 
>198	Statement	 
>199	Statement	 
>200	Statement	 
>201	Statement	 
>202	Statement	 
>203	Statement	 
>204	Statement	 
>205	Statement	 
>206	Statement	 
>207	Statement	 
>208	Statement	 
>209	Statement	 
>210	Statement	 
>211	Statement	 
>212	Statement	 
>213	Statement	 
>214	Statement	 
>215	Statement	 
>216	Statement	 
>217	Statement	 
>218	Statement	 
>219	Statement	 
>220	Statement	 
>221	Statement	 
>222	Statement	 
>223	Statement	 
>224	Statement	 
>225	Statement	 
>226	Statement	 
>227	Statement	 
>228	Statement	 
>229	Statement	 
>230	ExpressionStatement	 
>231	CallExpression	printf ( \"Transform Matrix\n\" )
>232	ArgumentList	\"Transform Matrix\n\"
>233	Argument	\"Transform Matrix\n\"
>234	PrimaryExpression	\"Transform Matrix\n\"
>235	Callee	printf
>236	Identifier	printf
>237	ExpressionStatement	 
>238	CallExpression	printf ( \"Marker confidence\n cf=%f,direction=%d\n\" , ar -> getConfidence ( ) , ar -> getDirection ( ) )
>239	ArgumentList	\"Marker confidence\n cf=%f,direction=%d\n\"
>240	Argument	ar -> getDirection ( )
>241	CallExpression	ar -> getDirection ( )
>242	ArgumentList	 
>243	Callee	ar -> getDirection
>244	PtrMemberAccess	ar -> getDirection
>245	Identifier	getDirection
>246	Identifier	ar
>247	Argument	ar -> getConfidence ( )
>248	CallExpression	ar -> getConfidence ( )
>249	ArgumentList	 
>250	Callee	ar -> getConfidence
>251	PtrMemberAccess	ar -> getConfidence
>252	Identifier	getConfidence
>253	Identifier	ar
>254	Argument	\"Marker confidence\n cf=%f,direction=%d\n\"
>255	PrimaryExpression	\"Marker confidence\n cf=%f,direction=%d\n\"
>256	Callee	printf
>257	Identifier	printf
>258	ExpressionStatement	 
>259	Statement	 
>260	Statement	 
>261	Statement	 
>262	Statement	 
>263	Statement	 
>264	Statement	 
>265	Statement	 
>266	ExpressionStatement	 
>267	CallExpression	ar -> getTransmationMatrix ( result_mat )
>268	ArgumentList	result_mat
>269	Argument	result_mat
>270	Identifier	result_mat
>271	Callee	ar -> getTransmationMatrix
>272	PtrMemberAccess	ar -> getTransmationMatrix
>273	Identifier	getTransmationMatrix
>274	Identifier	ar
>275	ExpressionStatement	 
>276	CallExpression	ar -> detectMarkerLite ( * ra , 100 )
>277	ArgumentList	* ra
>278	Argument	100
>279	PrimaryExpression	100
>280	Argument	* ra
>281	UnaryOp	* ra
>282	Identifier	ra
>283	UnaryOperator	*
>284	Callee	ar -> detectMarkerLite
>285	PtrMemberAccess	ar -> detectMarkerLite
>286	Identifier	detectMarkerLite
>287	Identifier	ar
>288	IdentifierDeclStatement	 
>289	IdentifierDecl	result_mat
>290	Identifier	result_mat
>291	IdentifierDeclType	NyARTransMatResult
>292	ExpressionStatement	 
>293	CallExpression	ar -> setContinueMode ( false )
>294	ArgumentList	false
>295	Argument	false
>296	Identifier	false
>297	Callee	ar -> setContinueMode
>298	PtrMemberAccess	ar -> setContinueMode
>299	Identifier	setContinueMode
>300	Identifier	ar
>301	ExpressionStatement	 
>302	AssignmentExpr	code = NULL
>303	Identifier	NULL
>304	Identifier	code
>305	ExpressionStatement	 
>306	AssignmentExpr	ar = new NyARSingleDetectMarker ( ap , code , 80.0 )
>307	Expression	ap , code , 80.0
>308	Expression	code , 80.0
>309	PrimaryExpression	80.0
>310	Identifier	code
>311	Identifier	ap
>312	Identifier	ar
>313	ExpressionStatement	 
>314	CallExpression	ra -> setBuffer ( buf )
>315	ArgumentList	buf
>316	Argument	buf
>317	Identifier	buf
>318	Callee	ra -> setBuffer
>319	PtrMemberAccess	ra -> setBuffer
>320	Identifier	setBuffer
>321	Identifier	ra
>322	ExpressionStatement	 
>323	AssignmentExpr	ra = new NyARRgbRaster_BGRA ( 320 , 240 )
>324	Expression	320 , 240
>325	PrimaryExpression	240
>326	PrimaryExpression	320
>327	Identifier	ra
>328	ExpressionStatement	 
>329	AssignmentExpr	buf = _load_file_image ( DATA_FILE )
>330	CallExpression	_load_file_image ( DATA_FILE )
>331	ArgumentList	DATA_FILE
>332	Argument	DATA_FILE
>333	Identifier	DATA_FILE
>334	Callee	_load_file_image
>335	Identifier	_load_file_image
>336	Identifier	buf
>337	ExpressionStatement	 
>338	CallExpression	code -> loadARPattFromFile ( CODE_FILE )
>339	ArgumentList	CODE_FILE
>340	Argument	CODE_FILE
>341	Identifier	CODE_FILE
>342	Callee	code -> loadARPattFromFile
>343	PtrMemberAccess	code -> loadARPattFromFile
>344	Identifier	loadARPattFromFile
>345	Identifier	code
>346	ExpressionStatement	 
>347	AssignmentExpr	code = new NyARCode ( 16 , 16 )
>348	Expression	16 , 16
>349	PrimaryExpression	16
>350	PrimaryExpression	16
>351	Identifier	code
>352	IdentifierDeclStatement	 
>353	IdentifierDecl	* ar
>354	Identifier	ar
>355	IdentifierDeclType	NyARSingleDetectMarker *
>356	IdentifierDeclStatement	 
>357	IdentifierDecl	* ra
>358	Identifier	ra
>359	IdentifierDeclType	NyARRgbRaster_BGRA *
>360	IdentifierDeclStatement	 
>361	IdentifierDecl	* buf
>362	Identifier	buf
>363	IdentifierDeclType	unsigned char *
>364	IdentifierDeclStatement	 
>365	IdentifierDecl	* code = NULL
>366	AssignmentExpr	* code = NULL
>367	Identifier	NULL
>368	Identifier	NULL
>369	Identifier	code
>370	IdentifierDeclType	NyARCode *
>371	ExpressionStatement	 
>372	CallExpression	ap . changeScreenSize ( 320 , 240 )
>373	ArgumentList	320
>374	Argument	240
>375	PrimaryExpression	240
>376	Argument	320
>377	PrimaryExpression	320
>378	Callee	ap . changeScreenSize
>379	MemberAccess	ap . changeScreenSize
>380	Identifier	changeScreenSize
>381	Identifier	ap
>382	ExpressionStatement	 
>383	CallExpression	ap . loadARParamFromFile ( CAMERA_FILE )
>384	ArgumentList	CAMERA_FILE
>385	Argument	CAMERA_FILE
>386	Identifier	CAMERA_FILE
>387	Callee	ap . loadARParamFromFile
>388	MemberAccess	ap . loadARParamFromFile
>389	Identifier	loadARParamFromFile
>390	Identifier	ap
>391	ExpressionStatement	 
>392	CallExpression	ap . setEndian ( TNyAREndian_LITTLE )
>393	ArgumentList	TNyAREndian_LITTLE
>394	Argument	TNyAREndian_LITTLE
>395	Identifier	TNyAREndian_LITTLE
>396	Callee	ap . setEndian
>397	MemberAccess	ap . setEndian
>398	Identifier	setEndian
>399	Identifier	ap
>400	IdentifierDeclStatement	 
>401	IdentifierDecl	ap
>402	Identifier	ap
>403	IdentifierDeclType	NyARParam
<3=9,8,4
<4=5
<5=7,6
<9=99,92,25,12,10
<10=11
<12=13
<13=16,15,14
<16=21,17
<17=20,18
<18=19
<21=22
<22=24,23
<25=26
<26=79,68,64,51,34,27
<27=28
<28=30,29
<30=31
<31=33,32
<34=42,35
<35=41,36
<36=37
<37=39,38
<39=40
<42=43
<43=50,44
<44=46,45
<46=47
<47=49,48
<51=52
<52=60,53
<53=56,54
<54=55
<56=57
<57=59,58
<60=61
<61=63,62
<64=65
<65=67,66
<68=69
<69=78,77,70
<70=76,71
<71=75,72
<72=74,73
<79=80
<80=88,81
<81=86,82
<82=83
<83=85,84
<86=87
<88=89
<89=91,90
<92=93
<93=98,97,94
<94=96,95
<99=100
<100=102,101
<114=123,122,115
<115=119,116
<116=118,117
<119=121,120
<123=126,124
<124=125
<126=400,391,382,371,364,360,356,352,346,337,328,322,313,305,301,292,288,275,266,265,264,263,262,261,260,259,258,237,230,229,228,227,226,225,224,223,222,221,220,219,218,127,129,130,132,133,135,136,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217
<127=128
<130=131
<133=134
<136=167,163,160,137
<137=147,138
<138=139
<139=143,140
<140=141
<141=142
<143=144
<144=146,145
<147=148
<148=156,149
<149=152,150
<150=151
<152=153
<153=155,154
<156=157
<157=159,158
<160=162,161
<163=164
<164=166,165
<167=168
<168=169
<169=174,173,170
<170=172,171
<230=231
<231=235,232
<232=233
<233=234
<235=236
<237=238
<238=256,239
<239=254,247,240
<240=241
<241=243,242
<243=244
<244=246,245
<247=248
<248=250,249
<250=251
<251=253,252
<254=255
<256=257
<266=267
<267=271,268
<268=269
<269=270
<271=272
<272=274,273
<275=276
<276=284,277
<277=280,278
<278=279
<280=281
<281=283,282
<284=285
<285=287,286
<288=289
<289=291,290
<292=293
<293=297,294
<294=295
<295=296
<297=298
<298=300,299
<301=302
<302=304,303
<305=306
<306=312,307
<307=311,308
<308=310,309
<313=314
<314=318,315
<315=316
<316=317
<318=319
<319=321,320
<322=323
<323=327,324
<324=326,325
<328=329
<329=336,330
<330=334,331
<331=332
<332=333
<334=335
<337=338
<338=342,339
<339=340
<340=341
<342=343
<343=345,344
<346=347
<347=351,348
<348=350,349
<352=353
<353=355,354
<356=357
<357=359,358
<360=361
<361=363,362
<364=365
<365=370,369,366
<366=368,367
<371=372
<372=378,373
<373=376,374
<374=375
<376=377
<378=379
<379=381,380
<382=383
<383=387,384
<384=385
<385=386
<387=388
<388=390,389
<391=392
<392=396,393
<393=394
<394=395
<396=397
<397=399,398
<400=401
<401=403,402
