>3	FunctionDef	PointData 
>4	ParameterList	FILE * f
>5	Parameter	 
>6	Identifier	f
>7	ParameterType	FILE *
>8	ReturnType	void
>9	CompoundStatement	 
>10	ExpressionStatement	 
>11	CallExpression	fprintf ( f , \"%lf %lf %lf\n\" , m_pos [ 0 ] , m_pos [ 1 ] , m_pos [ 2 ] )
>12	ArgumentList	f
>13	Argument	m_pos [ 2 ]
>14	ArrayIndexing	m_pos [ 2 ]
>15	PrimaryExpression	2
>16	Identifier	m_pos
>17	Argument	m_pos [ 1 ]
>18	ArrayIndexing	m_pos [ 1 ]
>19	PrimaryExpression	1
>20	Identifier	m_pos
>21	Argument	m_pos [ 0 ]
>22	ArrayIndexing	m_pos [ 0 ]
>23	PrimaryExpression	0
>24	Identifier	m_pos
>25	Argument	\"%lf %lf %lf\n\"
>26	PrimaryExpression	\"%lf %lf %lf\n\"
>27	Argument	f
>28	Identifier	f
>29	Callee	fprintf
>30	Identifier	fprintf
>37	FunctionDef	PointData 
>38	ParameterList	FILE * f
>39	Parameter	 
>40	Identifier	f
>41	ParameterType	FILE *
>42	ReturnType	void
>43	CompoundStatement	 
>44	ExpressionStatement	 
>45	CallExpression	fprintf ( f , \"%s</point>\n\" , spacer )
>46	ArgumentList	f
>47	Argument	spacer
>48	Identifier	spacer
>49	Argument	\"%s</point>\n\"
>50	PrimaryExpression	\"%s</point>\n\"
>51	Argument	f
>52	Identifier	f
>53	Callee	fprintf
>54	Identifier	fprintf
>55	ExpressionStatement	 
>56	CallExpression	fprintf ( f , \"%s  </views>\n\" , spacer )
>57	ArgumentList	f
>58	Argument	spacer
>59	Identifier	spacer
>60	Argument	\"%s  </views>\n\"
>61	PrimaryExpression	\"%s  </views>\n\"
>62	Argument	f
>63	Identifier	f
>64	Callee	fprintf
>65	Identifier	fprintf
>66	ForStatement	for ( int i = 0 ; i < num_views ; i ++ )
>67	CompoundStatement	 
>68	ExpressionStatement	 
>69	CallExpression	fprintf ( f , \"%s    </view>\n\" , spacer )
>70	ArgumentList	f
>71	Argument	spacer
>72	Identifier	spacer
>73	Argument	\"%s    </view>\n\"
>74	PrimaryExpression	\"%s    </view>\n\"
>75	Argument	f
>76	Identifier	f
>77	Callee	fprintf
>78	Identifier	fprintf
>79	ExpressionStatement	 
>80	CallExpression	fprintf ( f , \"%s      <cam> %d </cam>\n\" , spacer , m_views [ i ] . first )
>81	ArgumentList	f
>82	Argument	m_views [ i ] . first
>83	MemberAccess	m_views [ i ] . first
>84	Identifier	first
>85	ArrayIndexing	m_views [ i ]
>86	Identifier	i
>87	Identifier	m_views
>88	Argument	spacer
>89	Identifier	spacer
>90	Argument	\"%s      <cam> %d </cam>\n\"
>91	PrimaryExpression	\"%s      <cam> %d </cam>\n\"
>92	Argument	f
>93	Identifier	f
>94	Callee	fprintf
>95	Identifier	fprintf
>96	ExpressionStatement	 
>97	CallExpression	fprintf ( f , \"%s    <view>\n\" , spacer )
>98	ArgumentList	f
>99	Argument	spacer
>100	Identifier	spacer
>101	Argument	\"%s    <view>\n\"
>102	PrimaryExpression	\"%s    <view>\n\"
>103	Argument	f
>104	Identifier	f
>105	Callee	fprintf
>106	Identifier	fprintf
>107	IncDecOp	 
>108	IncDec	++
>109	Identifier	i
>110	Condition	 
>111	RelationalExpression	i < num_views
>112	Identifier	num_views
>113	Identifier	i
>114	ForInit	 
>115	IdentifierDeclStatement	int i = 0 ;
>116	IdentifierDecl	i = 0
>117	AssignmentExpr	i = 0
>118	PrimaryExpression	0
>119	Identifier	i
>120	Identifier	i
>121	IdentifierDeclType	int
>122	IdentifierDeclStatement	 
>123	IdentifierDecl	num_views = ( int ) m_views . size ( )
>124	AssignmentExpr	num_views = ( int ) m_views . size ( )
>125	CastExpression	( int ) m_views . size ( )
>126	CallExpression	m_views . size ( )
>127	ArgumentList	 
>128	Callee	m_views . size
>129	MemberAccess	m_views . size
>130	Identifier	size
>131	Identifier	m_views
>132	CastTarget	int
>133	Identifier	num_views
>134	Identifier	num_views
>135	IdentifierDeclType	int
>136	ExpressionStatement	 
>137	CallExpression	fprintf ( f , \"%s  <views>\n\" , spacer )
>138	ArgumentList	f
>139	Argument	spacer
>140	Identifier	spacer
>141	Argument	\"%s  <views>\n\"
>142	PrimaryExpression	\"%s  <views>\n\"
>143	Argument	f
>144	Identifier	f
>145	Callee	fprintf
>146	Identifier	fprintf
>147	ExpressionStatement	 
>148	CallExpression	fprintf ( f , \"%s  </col>\n\" , spacer )
>149	ArgumentList	f
>150	Argument	spacer
>151	Identifier	spacer
>152	Argument	\"%s  </col>\n\"
>153	PrimaryExpression	\"%s  </col>\n\"
>154	Argument	f
>155	Identifier	f
>156	Callee	fprintf
>157	Identifier	fprintf
>158	ExpressionStatement	 
>159	CallExpression	fprintf ( f , \"%s    <b> %d </b>\n\" , spacer , iround ( m_color [ 2 ] ) )
>160	ArgumentList	f
>161	Argument	iround ( m_color [ 2 ] )
>162	CallExpression	iround ( m_color [ 2 ] )
>163	ArgumentList	m_color [ 2 ]
>164	Argument	m_color [ 2 ]
>165	ArrayIndexing	m_color [ 2 ]
>166	PrimaryExpression	2
>167	Identifier	m_color
>168	Callee	iround
>169	Identifier	iround
>170	Argument	spacer
>171	Identifier	spacer
>172	Argument	\"%s    <b> %d </b>\n\"
>173	PrimaryExpression	\"%s    <b> %d </b>\n\"
>174	Argument	f
>175	Identifier	f
>176	Callee	fprintf
>177	Identifier	fprintf
>178	ExpressionStatement	 
>179	CallExpression	fprintf ( f , \"%s    <g> %d </g>\n\" , spacer , iround ( m_color [ 1 ] ) )
>180	ArgumentList	f
>181	Argument	iround ( m_color [ 1 ] )
>182	CallExpression	iround ( m_color [ 1 ] )
>183	ArgumentList	m_color [ 1 ]
>184	Argument	m_color [ 1 ]
>185	ArrayIndexing	m_color [ 1 ]
>186	PrimaryExpression	1
>187	Identifier	m_color
>188	Callee	iround
>189	Identifier	iround
>190	Argument	spacer
>191	Identifier	spacer
>192	Argument	\"%s    <g> %d </g>\n\"
>193	PrimaryExpression	\"%s    <g> %d </g>\n\"
>194	Argument	f
>195	Identifier	f
>196	Callee	fprintf
>197	Identifier	fprintf
>198	ExpressionStatement	 
>199	CallExpression	fprintf ( f , \"%s    <r> %d </r>\n\" , spacer , iround ( m_color [ 0 ] ) )
>200	ArgumentList	f
>201	Argument	iround ( m_color [ 0 ] )
>202	CallExpression	iround ( m_color [ 0 ] )
>203	ArgumentList	m_color [ 0 ]
>204	Argument	m_color [ 0 ]
>205	ArrayIndexing	m_color [ 0 ]
>206	PrimaryExpression	0
>207	Identifier	m_color
>208	Callee	iround
>209	Identifier	iround
>210	Argument	spacer
>211	Identifier	spacer
>212	Argument	\"%s    <r> %d </r>\n\"
>213	PrimaryExpression	\"%s    <r> %d </r>\n\"
>214	Argument	f
>215	Identifier	f
>216	Callee	fprintf
>217	Identifier	fprintf
>218	ExpressionStatement	 
>219	CallExpression	fprintf ( f , \"%s  <col>\n\" , spacer )
>220	ArgumentList	f
>221	Argument	spacer
>222	Identifier	spacer
>223	Argument	\"%s  <col>\n\"
>224	PrimaryExpression	\"%s  <col>\n\"
>225	Argument	f
>226	Identifier	f
>227	Callee	fprintf
>228	Identifier	fprintf
>229	ExpressionStatement	 
>230	CallExpression	fprintf ( f , \"%s  </pos>\n\" , spacer )
>231	ArgumentList	f
>232	Argument	spacer
>233	Identifier	spacer
>234	Argument	\"%s  </pos>\n\"
>235	PrimaryExpression	\"%s  </pos>\n\"
>236	Argument	f
>237	Identifier	f
>238	Callee	fprintf
>239	Identifier	fprintf
>240	ExpressionStatement	 
>241	CallExpression	fprintf ( f , \"%s    <z> %0.8e </z>\n\" , spacer , m_pos [ 2 ] )
>242	ArgumentList	f
>243	Argument	m_pos [ 2 ]
>244	ArrayIndexing	m_pos [ 2 ]
>245	PrimaryExpression	2
>246	Identifier	m_pos
>247	Argument	spacer
>248	Identifier	spacer
>249	Argument	\"%s    <z> %0.8e </z>\n\"
>250	PrimaryExpression	\"%s    <z> %0.8e </z>\n\"
>251	Argument	f
>252	Identifier	f
>253	Callee	fprintf
>254	Identifier	fprintf
>255	ExpressionStatement	 
>256	CallExpression	fprintf ( f , \"%s    <y> %0.8e </y>\n\" , spacer , m_pos [ 1 ] )
>257	ArgumentList	f
>258	Argument	m_pos [ 1 ]
>259	ArrayIndexing	m_pos [ 1 ]
>260	PrimaryExpression	1
>261	Identifier	m_pos
>262	Argument	spacer
>263	Identifier	spacer
>264	Argument	\"%s    <y> %0.8e </y>\n\"
>265	PrimaryExpression	\"%s    <y> %0.8e </y>\n\"
>266	Argument	f
>267	Identifier	f
>268	Callee	fprintf
>269	Identifier	fprintf
>270	ExpressionStatement	 
>271	CallExpression	fprintf ( f , \"%s    <x> %0.8e </x>\n\" , spacer , m_pos [ 0 ] )
>272	ArgumentList	f
>273	Argument	m_pos [ 0 ]
>274	ArrayIndexing	m_pos [ 0 ]
>275	PrimaryExpression	0
>276	Identifier	m_pos
>277	Argument	spacer
>278	Identifier	spacer
>279	Argument	\"%s    <x> %0.8e </x>\n\"
>280	PrimaryExpression	\"%s    <x> %0.8e </x>\n\"
>281	Argument	f
>282	Identifier	f
>283	Callee	fprintf
>284	Identifier	fprintf
>285	ExpressionStatement	 
>286	CallExpression	fprintf ( f , \"%s  <pos>\n\" , spacer )
>287	ArgumentList	f
>288	Argument	spacer
>289	Identifier	spacer
>290	Argument	\"%s  <pos>\n\"
>291	PrimaryExpression	\"%s  <pos>\n\"
>292	Argument	f
>293	Identifier	f
>294	Callee	fprintf
>295	Identifier	fprintf
>296	ExpressionStatement	 
>297	CallExpression	fprintf ( f , \"%s<point>\n\" , spacer )
>298	ArgumentList	f
>299	Argument	spacer
>300	Identifier	spacer
>301	Argument	\"%s<point>\n\"
>302	PrimaryExpression	\"%s<point>\n\"
>303	Argument	f
>304	Identifier	f
>305	Callee	fprintf
>306	Identifier	fprintf
>307	IdentifierDeclStatement	 
>308	IdentifierDecl	* spacer = \"    \"
>309	AssignmentExpr	* spacer = \"    \"
>310	PrimaryExpression	\"    \"
>311	Identifier	spacer
>312	Identifier	spacer
>313	IdentifierDeclType	const char *
>314	Statement	 
>332	FunctionDef	PointData 
>333	ParameterList	FILE * f
>334	Parameter	 
>335	Identifier	f
>336	ParameterType	FILE *
>337	ReturnType	void
>338	CompoundStatement	 
>343	FunctionDef	PointData 
>344	ParameterList	double size , PlaneData & plane
>345	Parameter	 
>346	Identifier	plane
>347	ParameterType	PlaneData &
>348	Parameter	 
>349	Identifier	size
>350	ParameterType	double
>351	ReturnType	void
>352	CompoundStatement	 
>353	ExpressionStatement	 
>354	AssignmentExpr	plane . m_u_extent = plane . m_v_extent = size
>355	AssignmentExpr	plane . m_v_extent = size
>356	Identifier	size
>357	MemberAccess	plane . m_v_extent
>358	Identifier	m_v_extent
>359	Identifier	plane
>360	MemberAccess	plane . m_u_extent
>361	Identifier	m_u_extent
>362	Identifier	plane
>363	ExpressionStatement	 
>364	CallExpression	matrix_cross ( m_norm , plane . m_uaxis , plane . m_vaxis )
>365	ArgumentList	m_norm
>366	Argument	plane . m_vaxis
>367	MemberAccess	plane . m_vaxis
>368	Identifier	m_vaxis
>369	Identifier	plane
>370	Argument	plane . m_uaxis
>371	MemberAccess	plane . m_uaxis
>372	Identifier	m_uaxis
>373	Identifier	plane
>374	Argument	m_norm
>375	Identifier	m_norm
>376	Callee	matrix_cross
>377	Identifier	matrix_cross
>378	ExpressionStatement	 
>379	CallExpression	matrix_cross ( m_norm , y , plane . m_uaxis )
>380	ArgumentList	m_norm
>381	Argument	plane . m_uaxis
>382	MemberAccess	plane . m_uaxis
>383	Identifier	m_uaxis
>384	Identifier	plane
>385	Argument	y
>386	Identifier	y
>387	Argument	m_norm
>388	Identifier	m_norm
>389	Callee	matrix_cross
>390	Identifier	matrix_cross
>391	IdentifierDeclStatement	 
>392	IdentifierDecl	y [ 3 ] = { 0.0 , 1.0 , 0.0 }
>393	AssignmentExpr	y [ 3 ] = { 0.0 , 1.0 , 0.0 }
>394	InitializerList	0.0
>395	PrimaryExpression	0.0
>396	PrimaryExpression	1.0
>397	PrimaryExpression	0.0
>398	Identifier	y
>399	PrimaryExpression	3
>400	Identifier	y
>401	IdentifierDeclType	double [ 3 ]
>402	ExpressionStatement	 
>403	CallExpression	memcpy ( plane . m_origin , m_pos , 3 * sizeof ( double ) )
>404	ArgumentList	plane . m_origin
>405	Argument	3 * sizeof ( double )
>406	MultiplicativeExpression	3 * sizeof ( double )
>407	SizeofExpr	sizeof ( double )
>408	SizeofOperand	double
>409	Sizeof	sizeof
>410	PrimaryExpression	3
>411	Argument	m_pos
>412	Identifier	m_pos
>413	Argument	plane . m_origin
>414	MemberAccess	plane . m_origin
>415	Identifier	m_origin
>416	Identifier	plane
>417	Callee	memcpy
>418	Identifier	memcpy
>419	ExpressionStatement	 
>420	AssignmentExpr	plane . m_dist = - dist
>421	UnaryOp	- dist
>422	Identifier	dist
>423	UnaryOperator	-
>424	MemberAccess	plane . m_dist
>425	Identifier	m_dist
>426	Identifier	plane
>427	ExpressionStatement	 
>428	CallExpression	matrix_product ( 1 , 3 , 3 , 1 , m_norm , m_pos , & dist )
>429	ArgumentList	1
>430	Argument	& dist
>431	UnaryOp	& dist
>432	Identifier	dist
>433	UnaryOperator	&
>434	Argument	m_pos
>435	Identifier	m_pos
>436	Argument	m_norm
>437	Identifier	m_norm
>438	Argument	1
>439	PrimaryExpression	1
>440	Argument	3
>441	PrimaryExpression	3
>442	Argument	3
>443	PrimaryExpression	3
>444	Argument	1
>445	PrimaryExpression	1
>446	Callee	matrix_product
>447	Identifier	matrix_product
>448	IdentifierDeclStatement	 
>449	IdentifierDecl	dist
>450	Identifier	dist
>451	IdentifierDeclType	double
>452	ExpressionStatement	 
>453	CallExpression	memcpy ( plane . m_normal , m_norm , 3 * sizeof ( double ) )
>454	ArgumentList	plane . m_normal
>455	Argument	3 * sizeof ( double )
>456	MultiplicativeExpression	3 * sizeof ( double )
>457	SizeofExpr	sizeof ( double )
>458	SizeofOperand	double
>459	Sizeof	sizeof
>460	PrimaryExpression	3
>461	Argument	m_norm
>462	Identifier	m_norm
>463	Argument	plane . m_normal
>464	MemberAccess	plane . m_normal
>465	Identifier	m_normal
>466	Identifier	plane
>467	Callee	memcpy
>468	Identifier	memcpy
>486	FunctionDef	TrackData 
>487	ParameterList	FILE * f
>488	Parameter	 
>489	Identifier	f
>490	ParameterType	FILE *
>491	ReturnType	void
>492	CompoundStatement	 
>493	ForStatement	for ( int i = 0 ; i < size ; i ++ )
>494	CompoundStatement	 
>495	ExpressionStatement	 
>496	CallExpression	m_views . push_back ( ik )
>497	ArgumentList	ik
>498	Argument	ik
>499	Identifier	ik
>500	Callee	m_views . push_back
>501	MemberAccess	m_views . push_back
>502	Identifier	push_back
>503	Identifier	m_views
>504	ExpressionStatement	 
>505	CallExpression	fscanf ( f , \"%d %d\" , & ( ik . first ) , & ( ik . second ) )
>506	ArgumentList	f
>507	Argument	& ( ik . second )
>508	UnaryOp	& ( ik . second )
>509	MemberAccess	ik . second
>510	Identifier	second
>511	Identifier	ik
>512	UnaryOperator	&
>513	Argument	& ( ik . first )
>514	UnaryOp	& ( ik . first )
>515	MemberAccess	ik . first
>516	Identifier	first
>517	Identifier	ik
>518	UnaryOperator	&
>519	Argument	\"%d %d\"
>520	PrimaryExpression	\"%d %d\"
>521	Argument	f
>522	Identifier	f
>523	Callee	fscanf
>524	Identifier	fscanf
>525	IdentifierDeclStatement	 
>526	IdentifierDecl	ik
>527	Identifier	ik
>528	IdentifierDeclType	ImageKey
>529	IncDecOp	 
>530	IncDec	++
>531	Identifier	i
>532	Condition	 
>533	RelationalExpression	i < size
>534	Identifier	size
>535	Identifier	i
>536	ForInit	 
>537	IdentifierDeclStatement	int i = 0 ;
>538	IdentifierDecl	i = 0
>539	AssignmentExpr	i = 0
>540	PrimaryExpression	0
>541	Identifier	i
>542	Identifier	i
>543	IdentifierDeclType	int
>544	ExpressionStatement	 
>545	CallExpression	fscanf ( f , \"%d\" , & size )
>546	ArgumentList	f
>547	Argument	& size
>548	UnaryOp	& size
>549	Identifier	size
>550	UnaryOperator	&
>551	Argument	\"%d\"
>552	PrimaryExpression	\"%d\"
>553	Argument	f
>554	Identifier	f
>555	Callee	fscanf
>556	Identifier	fscanf
>557	IdentifierDeclStatement	 
>558	IdentifierDecl	size
>559	Identifier	size
>560	IdentifierDeclType	int
>573	FunctionDef	TrackData 
>574	ParameterList	FILE * f
>575	Parameter	 
>576	Identifier	f
>577	ParameterType	FILE *
>578	ReturnType	void
>579	CompoundStatement	 
>580	ExpressionStatement	 
>581	CallExpression	fprintf ( f , \"\n\" )
>582	ArgumentList	f
>583	Argument	\"\n\"
>584	PrimaryExpression	\"\n\"
>585	Argument	f
>586	Identifier	f
>587	Callee	fprintf
>588	Identifier	fprintf
>589	ForStatement	for ( int i = 0 ; i < size ; i ++ )
>590	CompoundStatement	 
>591	ExpressionStatement	 
>592	CallExpression	fprintf ( f , \" %d %d\" , m_views [ i ] . first , m_views [ i ] . second )
>593	ArgumentList	f
>594	Argument	m_views [ i ] . second
>595	MemberAccess	m_views [ i ] . second
>596	Identifier	second
>597	ArrayIndexing	m_views [ i ]
>598	Identifier	i
>599	Identifier	m_views
>600	Argument	m_views [ i ] . first
>601	MemberAccess	m_views [ i ] . first
>602	Identifier	first
>603	ArrayIndexing	m_views [ i ]
>604	Identifier	i
>605	Identifier	m_views
>606	Argument	\" %d %d\"
>607	PrimaryExpression	\" %d %d\"
>608	Argument	f
>609	Identifier	f
>610	Callee	fprintf
>611	Identifier	fprintf
>612	IncDecOp	 
>613	IncDec	++
>614	Identifier	i
>615	Condition	 
>616	RelationalExpression	i < size
>617	Identifier	size
>618	Identifier	i
>619	ForInit	 
>620	IdentifierDeclStatement	int i = 0 ;
>621	IdentifierDecl	i = 0
>622	AssignmentExpr	i = 0
>623	PrimaryExpression	0
>624	Identifier	i
>625	Identifier	i
>626	IdentifierDeclType	int
>627	ExpressionStatement	 
>628	CallExpression	fprintf ( f , \"%d\" , size )
>629	ArgumentList	f
>630	Argument	size
>631	Identifier	size
>632	Argument	\"%d\"
>633	PrimaryExpression	\"%d\"
>634	Argument	f
>635	Identifier	f
>636	Callee	fprintf
>637	Identifier	fprintf
>638	IdentifierDeclStatement	 
>639	IdentifierDecl	size = ( int ) m_views . size ( )
>640	AssignmentExpr	size = ( int ) m_views . size ( )
>641	CastExpression	( int ) m_views . size ( )
>642	CallExpression	m_views . size ( )
>643	ArgumentList	 
>644	Callee	m_views . size
>645	MemberAccess	m_views . size
>646	Identifier	size
>647	Identifier	m_views
>648	CastTarget	int
>649	Identifier	size
>650	Identifier	size
>651	IdentifierDeclType	int
>666	FunctionDef	Cube 
>667	ParameterList	 
>668	ReturnType	void
>669	CompoundStatement	 
>670	ForStatement	for ( int i = 0 ; i < 2 ; i ++ )
>671	CompoundStatement	 
>672	ForStatement	for ( int j = 0 ; j < 2 ; j ++ )
>673	CompoundStatement	 
>674	ForStatement	for ( int k = 0 ; k < 2 ; k ++ )
>675	CompoundStatement	 
>676	ExpressionStatement	 
>677	IncDecOp	count ++
>678	IncDec	++
>679	Identifier	count
>680	ExpressionStatement	 
>681	AssignmentExpr	m_vertices [ 3 * count + 2 ] = m_origin [ 2 ] + x [ 2 ] + y [ 2 ] + z [ 2 ]
>682	AdditiveExpression	m_origin [ 2 ] + x [ 2 ] + y [ 2 ] + z [ 2 ]
>683	AdditiveExpression	x [ 2 ] + y [ 2 ] + z [ 2 ]
>684	AdditiveExpression	y [ 2 ] + z [ 2 ]
>685	ArrayIndexing	z [ 2 ]
>686	PrimaryExpression	2
>687	Identifier	z
>688	ArrayIndexing	y [ 2 ]
>689	PrimaryExpression	2
>690	Identifier	y
>691	ArrayIndexing	x [ 2 ]
>692	PrimaryExpression	2
>693	Identifier	x
>694	ArrayIndexing	m_origin [ 2 ]
>695	PrimaryExpression	2
>696	Identifier	m_origin
>697	ArrayIndexing	m_vertices [ 3 * count + 2 ]
>698	AdditiveExpression	3 * count + 2
>699	PrimaryExpression	2
>700	MultiplicativeExpression	3 * count
>701	Identifier	count
>702	PrimaryExpression	3
>703	Identifier	m_vertices
>704	ExpressionStatement	 
>705	AssignmentExpr	m_vertices [ 3 * count + 1 ] = m_origin [ 1 ] + x [ 1 ] + y [ 1 ] + z [ 1 ]
>706	AdditiveExpression	m_origin [ 1 ] + x [ 1 ] + y [ 1 ] + z [ 1 ]
>707	AdditiveExpression	x [ 1 ] + y [ 1 ] + z [ 1 ]
>708	AdditiveExpression	y [ 1 ] + z [ 1 ]
>709	ArrayIndexing	z [ 1 ]
>710	PrimaryExpression	1
>711	Identifier	z
>712	ArrayIndexing	y [ 1 ]
>713	PrimaryExpression	1
>714	Identifier	y
>715	ArrayIndexing	x [ 1 ]
>716	PrimaryExpression	1
>717	Identifier	x
>718	ArrayIndexing	m_origin [ 1 ]
>719	PrimaryExpression	1
>720	Identifier	m_origin
>721	ArrayIndexing	m_vertices [ 3 * count + 1 ]
>722	AdditiveExpression	3 * count + 1
>723	PrimaryExpression	1
>724	MultiplicativeExpression	3 * count
>725	Identifier	count
>726	PrimaryExpression	3
>727	Identifier	m_vertices
>728	ExpressionStatement	 
>729	AssignmentExpr	m_vertices [ 3 * count + 0 ] = m_origin [ 0 ] + x [ 0 ] + y [ 0 ] + z [ 0 ]
>730	AdditiveExpression	m_origin [ 0 ] + x [ 0 ] + y [ 0 ] + z [ 0 ]
>731	AdditiveExpression	x [ 0 ] + y [ 0 ] + z [ 0 ]
>732	AdditiveExpression	y [ 0 ] + z [ 0 ]
>733	ArrayIndexing	z [ 0 ]
>734	PrimaryExpression	0
>735	Identifier	z
>736	ArrayIndexing	y [ 0 ]
>737	PrimaryExpression	0
>738	Identifier	y
>739	ArrayIndexing	x [ 0 ]
>740	PrimaryExpression	0
>741	Identifier	x
>742	ArrayIndexing	m_origin [ 0 ]
>743	PrimaryExpression	0
>744	Identifier	m_origin
>745	ArrayIndexing	m_vertices [ 3 * count + 0 ]
>746	AdditiveExpression	3 * count + 0
>747	PrimaryExpression	0
>748	MultiplicativeExpression	3 * count
>749	Identifier	count
>750	PrimaryExpression	3
>751	Identifier	m_vertices
>752	ExpressionStatement	 
>753	CallExpression	matrix_scale ( 3 , 1 , m_z_axis , z_sign * 0.5 * m_z_scale , z )
>754	ArgumentList	3
>755	Argument	z
>756	Identifier	z
>757	Argument	z_sign * 0.5 * m_z_scale
>758	MultiplicativeExpression	z_sign * 0.5 * m_z_scale
>759	MultiplicativeExpression	0.5 * m_z_scale
>760	Identifier	m_z_scale
>761	PrimaryExpression	0.5
>762	Identifier	z_sign
>763	Argument	m_z_axis
>764	Identifier	m_z_axis
>765	Argument	1
>766	PrimaryExpression	1
>767	Argument	3
>768	PrimaryExpression	3
>769	Callee	matrix_scale
>770	Identifier	matrix_scale
>771	ExpressionStatement	 
>772	CallExpression	matrix_scale ( 3 , 1 , m_y_axis , y_sign * 0.5 * m_y_scale , y )
>773	ArgumentList	3
>774	Argument	y
>775	Identifier	y
>776	Argument	y_sign * 0.5 * m_y_scale
>777	MultiplicativeExpression	y_sign * 0.5 * m_y_scale
>778	MultiplicativeExpression	0.5 * m_y_scale
>779	Identifier	m_y_scale
>780	PrimaryExpression	0.5
>781	Identifier	y_sign
>782	Argument	m_y_axis
>783	Identifier	m_y_axis
>784	Argument	1
>785	PrimaryExpression	1
>786	Argument	3
>787	PrimaryExpression	3
>788	Callee	matrix_scale
>789	Identifier	matrix_scale
>790	ExpressionStatement	 
>791	CallExpression	matrix_scale ( 3 , 1 , m_x_axis , x_sign * 0.5 * m_x_scale , x )
>792	ArgumentList	3
>793	Argument	x
>794	Identifier	x
>795	Argument	x_sign * 0.5 * m_x_scale
>796	MultiplicativeExpression	x_sign * 0.5 * m_x_scale
>797	MultiplicativeExpression	0.5 * m_x_scale
>798	Identifier	m_x_scale
>799	PrimaryExpression	0.5
>800	Identifier	x_sign
>801	Argument	m_x_axis
>802	Identifier	m_x_axis
>803	Argument	1
>804	PrimaryExpression	1
>805	Argument	3
>806	PrimaryExpression	3
>807	Callee	matrix_scale
>808	Identifier	matrix_scale
>809	IdentifierDeclStatement	 
>810	IdentifierDecl	z [ 3 ]
>811	PrimaryExpression	3
>812	Identifier	z
>813	IdentifierDeclType	double [ 3 ]
>814	IdentifierDecl	y [ 3 ]
>815	PrimaryExpression	3
>816	Identifier	y
>817	IdentifierDeclType	double [ 3 ]
>818	IdentifierDecl	x [ 3 ]
>819	PrimaryExpression	3
>820	Identifier	x
>821	IdentifierDeclType	double [ 3 ]
>822	IdentifierDeclStatement	 
>823	IdentifierDecl	z_sign = ( k == 0 ) ? - 1 
>824	AssignmentExpr	z_sign = ( k == 0 ) ? - 1 
>825	ConditionalExpression	( k == 0 ) ? - 1 
>826	PrimaryExpression	1
>827	UnaryOp	- 1
>828	PrimaryExpression	1
>829	UnaryOperator	-
>830	Condition	k == 0
>831	EqualityExpression	k == 0
>832	PrimaryExpression	0
>833	Identifier	k
>834	Identifier	z_sign
>835	Identifier	z_sign
>836	IdentifierDeclType	int
>837	IncDecOp	 
>838	IncDec	++
>839	Identifier	k
>840	Condition	 
>841	RelationalExpression	k < 2
>842	PrimaryExpression	2
>843	Identifier	k
>844	ForInit	 
>845	IdentifierDeclStatement	int k = 0 ;
>846	IdentifierDecl	k = 0
>847	AssignmentExpr	k = 0
>848	PrimaryExpression	0
>849	Identifier	k
>850	Identifier	k
>851	IdentifierDeclType	int
>852	IdentifierDeclStatement	 
>853	IdentifierDecl	y_sign = ( j == 0 ) ? - 1 
>854	AssignmentExpr	y_sign = ( j == 0 ) ? - 1 
>855	ConditionalExpression	( j == 0 ) ? - 1 
>856	PrimaryExpression	1
>857	UnaryOp	- 1
>858	PrimaryExpression	1
>859	UnaryOperator	-
>860	Condition	j == 0
>861	EqualityExpression	j == 0
>862	PrimaryExpression	0
>863	Identifier	j
>864	Identifier	y_sign
>865	Identifier	y_sign
>866	IdentifierDeclType	int
>867	IncDecOp	 
>868	IncDec	++
>869	Identifier	j
>870	Condition	 
>871	RelationalExpression	j < 2
>872	PrimaryExpression	2
>873	Identifier	j
>874	ForInit	 
>875	IdentifierDeclStatement	int j = 0 ;
>876	IdentifierDecl	j = 0
>877	AssignmentExpr	j = 0
>878	PrimaryExpression	0
>879	Identifier	j
>880	Identifier	j
>881	IdentifierDeclType	int
>882	IdentifierDeclStatement	 
>883	IdentifierDecl	x_sign = ( i == 0 ) ? - 1 
>884	AssignmentExpr	x_sign = ( i == 0 ) ? - 1 
>885	ConditionalExpression	( i == 0 ) ? - 1 
>886	PrimaryExpression	1
>887	UnaryOp	- 1
>888	PrimaryExpression	1
>889	UnaryOperator	-
>890	Condition	i == 0
>891	EqualityExpression	i == 0
>892	PrimaryExpression	0
>893	Identifier	i
>894	Identifier	x_sign
>895	Identifier	x_sign
>896	IdentifierDeclType	int
>897	IncDecOp	 
>898	IncDec	++
>899	Identifier	i
>900	Condition	 
>901	RelationalExpression	i < 2
>902	PrimaryExpression	2
>903	Identifier	i
>904	ForInit	 
>905	IdentifierDeclStatement	int i = 0 ;
>906	IdentifierDecl	i = 0
>907	AssignmentExpr	i = 0
>908	PrimaryExpression	0
>909	Identifier	i
>910	Identifier	i
>911	IdentifierDeclType	int
>912	IdentifierDeclStatement	 
>913	IdentifierDecl	count = 0
>914	AssignmentExpr	count = 0
>915	PrimaryExpression	0
>916	Identifier	count
>917	Identifier	count
>918	IdentifierDeclType	int
>946	FunctionDef	Cube 
>947	ParameterList	 
>948	ReturnType	void
>949	CompoundStatement	 
>950	ForStatement	for ( int i = 0 ; i < 6 ; i ++ )
>951	CompoundStatement	 
>952	ExpressionStatement	 
>953	CallExpression	glEnd ( )
>954	ArgumentList	 
>955	Callee	glEnd
>956	Identifier	glEnd
>957	ExpressionStatement	 
>958	CallExpression	glVertex3dv ( m_vertices + 3 * vidx3 )
>959	ArgumentList	m_vertices + 3 * vidx3
>960	Argument	m_vertices + 3 * vidx3
>961	AdditiveExpression	m_vertices + 3 * vidx3
>962	MultiplicativeExpression	3 * vidx3
>963	Identifier	vidx3
>964	PrimaryExpression	3
>965	Identifier	m_vertices
>966	Callee	glVertex3dv
>967	Identifier	glVertex3dv
>968	ExpressionStatement	 
>969	CallExpression	glVertex3dv ( m_vertices + 3 * vidx2 )
>970	ArgumentList	m_vertices + 3 * vidx2
>971	Argument	m_vertices + 3 * vidx2
>972	AdditiveExpression	m_vertices + 3 * vidx2
>973	MultiplicativeExpression	3 * vidx2
>974	Identifier	vidx2
>975	PrimaryExpression	3
>976	Identifier	m_vertices
>977	Callee	glVertex3dv
>978	Identifier	glVertex3dv
>979	ExpressionStatement	 
>980	CallExpression	glVertex3dv ( m_vertices + 3 * vidx1 )
>981	ArgumentList	m_vertices + 3 * vidx1
>982	Argument	m_vertices + 3 * vidx1
>983	AdditiveExpression	m_vertices + 3 * vidx1
>984	MultiplicativeExpression	3 * vidx1
>985	Identifier	vidx1
>986	PrimaryExpression	3
>987	Identifier	m_vertices
>988	Callee	glVertex3dv
>989	Identifier	glVertex3dv
>990	ExpressionStatement	 
>991	CallExpression	glVertex3dv ( m_vertices + 3 * vidx0 )
>992	ArgumentList	m_vertices + 3 * vidx0
>993	Argument	m_vertices + 3 * vidx0
>994	AdditiveExpression	m_vertices + 3 * vidx0
>995	MultiplicativeExpression	3 * vidx0
>996	Identifier	vidx0
>997	PrimaryExpression	3
>998	Identifier	m_vertices
>999	Callee	glVertex3dv
>1000	Identifier	glVertex3dv
>1001	IdentifierDeclStatement	 
>1002	IdentifierDecl	vidx3 = cube_faces [ i * 4 + 3 ]
>1003	AssignmentExpr	vidx3 = cube_faces [ i * 4 + 3 ]
>1004	ArrayIndexing	cube_faces [ i * 4 + 3 ]
>1005	AdditiveExpression	i * 4 + 3
>1006	PrimaryExpression	3
>1007	MultiplicativeExpression	i * 4
>1008	PrimaryExpression	4
>1009	Identifier	i
>1010	Identifier	cube_faces
>1011	Identifier	vidx3
>1012	Identifier	vidx3
>1013	IdentifierDeclType	int
>1014	IdentifierDeclStatement	 
>1015	IdentifierDecl	vidx2 = cube_faces [ i * 4 + 2 ]
>1016	AssignmentExpr	vidx2 = cube_faces [ i * 4 + 2 ]
>1017	ArrayIndexing	cube_faces [ i * 4 + 2 ]
>1018	AdditiveExpression	i * 4 + 2
>1019	PrimaryExpression	2
>1020	MultiplicativeExpression	i * 4
>1021	PrimaryExpression	4
>1022	Identifier	i
>1023	Identifier	cube_faces
>1024	Identifier	vidx2
>1025	Identifier	vidx2
>1026	IdentifierDeclType	int
>1027	IdentifierDeclStatement	 
>1028	IdentifierDecl	vidx1 = cube_faces [ i * 4 + 1 ]
>1029	AssignmentExpr	vidx1 = cube_faces [ i * 4 + 1 ]
>1030	ArrayIndexing	cube_faces [ i * 4 + 1 ]
>1031	AdditiveExpression	i * 4 + 1
>1032	PrimaryExpression	1
>1033	MultiplicativeExpression	i * 4
>1034	PrimaryExpression	4
>1035	Identifier	i
>1036	Identifier	cube_faces
>1037	Identifier	vidx1
>1038	Identifier	vidx1
>1039	IdentifierDeclType	int
>1040	IdentifierDeclStatement	 
>1041	IdentifierDecl	vidx0 = cube_faces [ i * 4 + 0 ]
>1042	AssignmentExpr	vidx0 = cube_faces [ i * 4 + 0 ]
>1043	ArrayIndexing	cube_faces [ i * 4 + 0 ]
>1044	AdditiveExpression	i * 4 + 0
>1045	PrimaryExpression	0
>1046	MultiplicativeExpression	i * 4
>1047	PrimaryExpression	4
>1048	Identifier	i
>1049	Identifier	cube_faces
>1050	Identifier	vidx0
>1051	Identifier	vidx0
>1052	IdentifierDeclType	int
>1053	ExpressionStatement	 
>1054	CallExpression	glBegin ( GL_LINE_LOOP )
>1055	ArgumentList	GL_LINE_LOOP
>1056	Argument	GL_LINE_LOOP
>1057	Identifier	GL_LINE_LOOP
>1058	Callee	glBegin
>1059	Identifier	glBegin
>1060	IncDecOp	 
>1061	IncDec	++
>1062	Identifier	i
>1063	Condition	 
>1064	RelationalExpression	i < 6
>1065	PrimaryExpression	6
>1066	Identifier	i
>1067	ForInit	 
>1068	IdentifierDeclStatement	int i = 0 ;
>1069	IdentifierDecl	i = 0
>1070	AssignmentExpr	i = 0
>1071	PrimaryExpression	0
>1072	Identifier	i
>1073	Identifier	i
>1074	IdentifierDeclType	int
>1075	ExpressionStatement	 
>1076	CallExpression	glLineWidth ( 4.0 )
>1077	ArgumentList	4.0
>1078	Argument	4.0
>1079	PrimaryExpression	4.0
>1080	Callee	glLineWidth
>1081	Identifier	glLineWidth
>1082	ExpressionStatement	 
>1083	CallExpression	glColor3f ( 0.0 , 0.0 , 0.0 )
>1084	ArgumentList	0.0
>1085	Argument	0.0
>1086	PrimaryExpression	0.0
>1087	Argument	0.0
>1088	PrimaryExpression	0.0
>1089	Argument	0.0
>1090	PrimaryExpression	0.0
>1091	Callee	glColor3f
>1092	Identifier	glColor3f
>1106	FunctionDef	PlaneData 
>1107	ParameterList	double * p , double * p_proj
>1108	Parameter	 
>1109	Identifier	p_proj
>1110	ParameterType	double *
>1111	Parameter	 
>1112	Identifier	p
>1113	ParameterType	double *
>1114	ReturnType	void
>1115	CompoundStatement	 
>1116	ExpressionStatement	 
>1117	CallExpression	matrix_sum ( 3 , 1 , 3 , 1 , p_perp , vec , p_proj )
>1118	ArgumentList	3
>1119	Argument	p_proj
>1120	Identifier	p_proj
>1121	Argument	vec
>1122	Identifier	vec
>1123	Argument	p_perp
>1124	Identifier	p_perp
>1125	Argument	1
>1126	PrimaryExpression	1
>1127	Argument	3
>1128	PrimaryExpression	3
>1129	Argument	1
>1130	PrimaryExpression	1
>1131	Argument	3
>1132	PrimaryExpression	3
>1133	Callee	matrix_sum
>1134	Identifier	matrix_sum
>1135	ExpressionStatement	 
>1136	CallExpression	matrix_diff ( 3 , 1 , 3 , 1 , p_norm , p_par , p_perp )
>1137	ArgumentList	3
>1138	Argument	p_perp
>1139	Identifier	p_perp
>1140	Argument	p_par
>1141	Identifier	p_par
>1142	Argument	p_norm
>1143	Identifier	p_norm
>1144	Argument	1
>1145	PrimaryExpression	1
>1146	Argument	3
>1147	PrimaryExpression	3
>1148	Argument	1
>1149	PrimaryExpression	1
>1150	Argument	3
>1151	PrimaryExpression	3
>1152	Callee	matrix_diff
>1153	Identifier	matrix_diff
>1154	IdentifierDeclStatement	 
>1155	IdentifierDecl	p_perp [ 3 ]
>1156	PrimaryExpression	3
>1157	Identifier	p_perp
>1158	IdentifierDeclType	double [ 3 ]
>1159	ExpressionStatement	 
>1160	CallExpression	matrix_scale ( 3 , 1 , m_normal , dot , p_par )
>1161	ArgumentList	3
>1162	Argument	p_par
>1163	Identifier	p_par
>1164	Argument	dot
>1165	Identifier	dot
>1166	Argument	m_normal
>1167	Identifier	m_normal
>1168	Argument	1
>1169	PrimaryExpression	1
>1170	Argument	3
>1171	PrimaryExpression	3
>1172	Callee	matrix_scale
>1173	Identifier	matrix_scale
>1174	IdentifierDeclStatement	 
>1175	IdentifierDecl	p_par [ 3 ]
>1176	PrimaryExpression	3
>1177	Identifier	p_par
>1178	IdentifierDeclType	double [ 3 ]
>1179	ExpressionStatement	 
>1180	CallExpression	matrix_product ( 1 , 3 , 3 , 1 , m_normal , p_norm , & dot )
>1181	ArgumentList	1
>1182	Argument	& dot
>1183	UnaryOp	& dot
>1184	Identifier	dot
>1185	UnaryOperator	&
>1186	Argument	p_norm
>1187	Identifier	p_norm
>1188	Argument	m_normal
>1189	Identifier	m_normal
>1190	Argument	1
>1191	PrimaryExpression	1
>1192	Argument	3
>1193	PrimaryExpression	3
>1194	Argument	3
>1195	PrimaryExpression	3
>1196	Argument	1
>1197	PrimaryExpression	1
>1198	Callee	matrix_product
>1199	Identifier	matrix_product
>1200	IdentifierDeclStatement	 
>1201	IdentifierDecl	dot
>1202	Identifier	dot
>1203	IdentifierDeclType	double
>1204	ExpressionStatement	 
>1205	CallExpression	matrix_diff ( 3 , 1 , 3 , 1 , p , vec , p_norm )
>1206	ArgumentList	3
>1207	Argument	p_norm
>1208	Identifier	p_norm
>1209	Argument	vec
>1210	Identifier	vec
>1211	Argument	p
>1212	Identifier	p
>1213	Argument	1
>1214	PrimaryExpression	1
>1215	Argument	3
>1216	PrimaryExpression	3
>1217	Argument	1
>1218	PrimaryExpression	1
>1219	Argument	3
>1220	PrimaryExpression	3
>1221	Callee	matrix_diff
>1222	Identifier	matrix_diff
>1223	IdentifierDeclStatement	 
>1224	IdentifierDecl	p_norm [ 3 ]
>1225	PrimaryExpression	3
>1226	Identifier	p_norm
>1227	IdentifierDeclType	double [ 3 ]
>1228	ExpressionStatement	 
>1229	CallExpression	matrix_scale ( 3 , 1 , m_normal , m_dist , vec )
>1230	ArgumentList	3
>1231	Argument	vec
>1232	Identifier	vec
>1233	Argument	m_dist
>1234	Identifier	m_dist
>1235	Argument	m_normal
>1236	Identifier	m_normal
>1237	Argument	1
>1238	PrimaryExpression	1
>1239	Argument	3
>1240	PrimaryExpression	3
>1241	Callee	matrix_scale
>1242	Identifier	matrix_scale
>1243	IdentifierDeclStatement	 
>1244	IdentifierDecl	vec [ 3 ]
>1245	PrimaryExpression	3
>1246	Identifier	vec
>1247	IdentifierDeclType	double [ 3 ]
>1261	FunctionDef	PlaneData 
>1262	ParameterList	double * p , double * p_proj
>1263	Parameter	 
>1264	Identifier	p_proj
>1265	ParameterType	double *
>1266	Parameter	 
>1267	Identifier	p
>1268	ParameterType	double *
>1269	ReturnType	double
>1270	CompoundStatement	 
>1271	ReturnStatement	 
>1272	Identifier	dot
>1273	ExpressionStatement	 
>1274	CallExpression	matrix_scale ( 3 , 1 , m_uaxis , dot , p_proj )
>1275	ArgumentList	3
>1276	Argument	p_proj
>1277	Identifier	p_proj
>1278	Argument	dot
>1279	Identifier	dot
>1280	Argument	m_uaxis
>1281	Identifier	m_uaxis
>1282	Argument	1
>1283	PrimaryExpression	1
>1284	Argument	3
>1285	PrimaryExpression	3
>1286	Callee	matrix_scale
>1287	Identifier	matrix_scale
>1288	ExpressionStatement	 
>1289	CallExpression	matrix_product ( 1 , 3 , 3 , 1 , p , m_uaxis , & dot )
>1290	ArgumentList	1
>1291	Argument	& dot
>1292	UnaryOp	& dot
>1293	Identifier	dot
>1294	UnaryOperator	&
>1295	Argument	m_uaxis
>1296	Identifier	m_uaxis
>1297	Argument	p
>1298	Identifier	p
>1299	Argument	1
>1300	PrimaryExpression	1
>1301	Argument	3
>1302	PrimaryExpression	3
>1303	Argument	3
>1304	PrimaryExpression	3
>1305	Argument	1
>1306	PrimaryExpression	1
>1307	Callee	matrix_product
>1308	Identifier	matrix_product
>1309	IdentifierDeclStatement	 
>1310	IdentifierDecl	dot
>1311	Identifier	dot
>1312	IdentifierDeclType	double
>1321	FunctionDef	PlaneData 
>1322	ParameterList	double * p , double * p_proj
>1323	Parameter	 
>1324	Identifier	p_proj
>1325	ParameterType	double *
>1326	Parameter	 
>1327	Identifier	p
>1328	ParameterType	double *
>1329	ReturnType	double
>1330	CompoundStatement	 
>1331	ReturnStatement	 
>1332	Identifier	dot
>1333	ExpressionStatement	 
>1334	CallExpression	matrix_scale ( 3 , 1 , m_vaxis , dot , p_proj )
>1335	ArgumentList	3
>1336	Argument	p_proj
>1337	Identifier	p_proj
>1338	Argument	dot
>1339	Identifier	dot
>1340	Argument	m_vaxis
>1341	Identifier	m_vaxis
>1342	Argument	1
>1343	PrimaryExpression	1
>1344	Argument	3
>1345	PrimaryExpression	3
>1346	Callee	matrix_scale
>1347	Identifier	matrix_scale
>1348	ExpressionStatement	 
>1349	CallExpression	matrix_product ( 1 , 3 , 3 , 1 , p , m_vaxis , & dot )
>1350	ArgumentList	1
>1351	Argument	& dot
>1352	UnaryOp	& dot
>1353	Identifier	dot
>1354	UnaryOperator	&
>1355	Argument	m_vaxis
>1356	Identifier	m_vaxis
>1357	Argument	p
>1358	Identifier	p
>1359	Argument	1
>1360	PrimaryExpression	1
>1361	Argument	3
>1362	PrimaryExpression	3
>1363	Argument	3
>1364	PrimaryExpression	3
>1365	Argument	1
>1366	PrimaryExpression	1
>1367	Callee	matrix_product
>1368	Identifier	matrix_product
>1369	IdentifierDeclStatement	 
>1370	IdentifierDecl	dot
>1371	Identifier	dot
>1372	IdentifierDeclType	double
>1381	FunctionDef	PlaneData 
>1382	ParameterList	const double * M
>1383	Parameter	 
>1384	Identifier	M
>1385	ParameterType	const double *
>1386	ReturnType	void
>1387	CompoundStatement	 
>1388	ExpressionStatement	 
>1389	CallExpression	printf ( \"dot1 = %0.3f\n\" , dot1 )
>1390	ArgumentList	\"dot1 = %0.3f\n\"
>1391	Argument	dot1
>1392	Identifier	dot1
>1393	Argument	\"dot1 = %0.3f\n\"
>1394	PrimaryExpression	\"dot1 = %0.3f\n\"
>1395	Callee	printf
>1396	Identifier	printf
>1397	ExpressionStatement	 
>1398	CallExpression	printf ( \"dot0 = %0.3f\n\" , dot0 )
>1399	ArgumentList	\"dot0 = %0.3f\n\"
>1400	Argument	dot0
>1401	Identifier	dot0
>1402	Argument	\"dot0 = %0.3f\n\"
>1403	PrimaryExpression	\"dot0 = %0.3f\n\"
>1404	Callee	printf
>1405	Identifier	printf
>1406	ExpressionStatement	 
>1407	CallExpression	matrix_product ( 1 , 4 , 4 , 1 , pNew , Morigin , & dot1 )
>1408	ArgumentList	1
>1409	Argument	& dot1
>1410	UnaryOp	& dot1
>1411	Identifier	dot1
>1412	UnaryOperator	&
>1413	Argument	Morigin
>1414	Identifier	Morigin
>1415	Argument	pNew
>1416	Identifier	pNew
>1417	Argument	1
>1418	PrimaryExpression	1
>1419	Argument	4
>1420	PrimaryExpression	4
>1421	Argument	4
>1422	PrimaryExpression	4
>1423	Argument	1
>1424	PrimaryExpression	1
>1425	Callee	matrix_product
>1426	Identifier	matrix_product
>1427	ExpressionStatement	 
>1428	CallExpression	matrix_product ( 1 , 4 , 4 , 1 , p , origin , & dot0 )
>1429	ArgumentList	1
>1430	Argument	& dot0
>1431	UnaryOp	& dot0
>1432	Identifier	dot0
>1433	UnaryOperator	&
>1434	Argument	origin
>1435	Identifier	origin
>1436	Argument	p
>1437	Identifier	p
>1438	Argument	1
>1439	PrimaryExpression	1
>1440	Argument	4
>1441	PrimaryExpression	4
>1442	Argument	4
>1443	PrimaryExpression	4
>1444	Argument	1
>1445	PrimaryExpression	1
>1446	Callee	matrix_product
>1447	Identifier	matrix_product
>1448	IdentifierDeclStatement	 
>1449	IdentifierDecl	dot1
>1450	Identifier	dot1
>1451	IdentifierDeclType	double
>1452	IdentifierDecl	dot0
>1453	Identifier	dot0
>1454	IdentifierDeclType	double
>1455	ExpressionStatement	 
>1456	CallExpression	matrix_product ( 4 , 4 , 4 , 1 , ( double * ) M , origin , Morigin )
>1457	ArgumentList	4
>1458	Argument	Morigin
>1459	Identifier	Morigin
>1460	Argument	origin
>1461	Identifier	origin
>1462	Argument	( double * ) M
>1463	CastExpression	( double * ) M
>1464	Identifier	M
>1465	CastTarget	double *
>1466	Argument	1
>1467	PrimaryExpression	1
>1468	Argument	4
>1469	PrimaryExpression	4
>1470	Argument	4
>1471	PrimaryExpression	4
>1472	Argument	4
>1473	PrimaryExpression	4
>1474	Callee	matrix_product
>1475	Identifier	matrix_product
>1476	IdentifierDeclStatement	 
>1477	IdentifierDecl	Morigin [ 4 ]
>1478	PrimaryExpression	4
>1479	Identifier	Morigin
>1480	IdentifierDeclType	double [ 4 ]
>1481	IdentifierDeclStatement	 
>1482	IdentifierDecl	origin [ 4 ] = { m_origin [ 0 ] , m_origin [ 1 ] , m_origin [ 2 ] , 1.0 }
>1483	AssignmentExpr	origin [ 4 ] = { m_origin [ 0 ] , m_origin [ 1 ] , m_origin [ 2 ] , 1.0 }
>1484	InitializerList	m_origin [ 0 ]
>1485	PrimaryExpression	1.0
>1486	ArrayIndexing	m_origin [ 2 ]
>1487	PrimaryExpression	2
>1488	Identifier	m_origin
>1489	ArrayIndexing	m_origin [ 1 ]
>1490	PrimaryExpression	1
>1491	Identifier	m_origin
>1492	ArrayIndexing	m_origin [ 0 ]
>1493	PrimaryExpression	0
>1494	Identifier	m_origin
>1495	Identifier	origin
>1496	PrimaryExpression	4
>1497	Identifier	origin
>1498	IdentifierDeclType	double [ 4 ]
>1499	ExpressionStatement	 
>1500	AssignmentExpr	m_dist = pNew [ 3 ] / len
>1501	MultiplicativeExpression	pNew [ 3 ] / len
>1502	Identifier	len
>1503	ArrayIndexing	pNew [ 3 ]
>1504	PrimaryExpression	3
>1505	Identifier	pNew
>1506	Identifier	m_dist
>1507	ExpressionStatement	 
>1508	AssignmentExpr	m_normal [ 2 ] = pNew [ 2 ] / len
>1509	MultiplicativeExpression	pNew [ 2 ] / len
>1510	Identifier	len
>1511	ArrayIndexing	pNew [ 2 ]
>1512	PrimaryExpression	2
>1513	Identifier	pNew
>1514	ArrayIndexing	m_normal [ 2 ]
>1515	PrimaryExpression	2
>1516	Identifier	m_normal
>1517	ExpressionStatement	 
>1518	AssignmentExpr	m_normal [ 1 ] = pNew [ 1 ] / len
>1519	MultiplicativeExpression	pNew [ 1 ] / len
>1520	Identifier	len
>1521	ArrayIndexing	pNew [ 1 ]
>1522	PrimaryExpression	1
>1523	Identifier	pNew
>1524	ArrayIndexing	m_normal [ 1 ]
>1525	PrimaryExpression	1
>1526	Identifier	m_normal
>1527	ExpressionStatement	 
>1528	AssignmentExpr	m_normal [ 0 ] = pNew [ 0 ] / len
>1529	MultiplicativeExpression	pNew [ 0 ] / len
>1530	Identifier	len
>1531	ArrayIndexing	pNew [ 0 ]
>1532	PrimaryExpression	0
>1533	Identifier	pNew
>1534	ArrayIndexing	m_normal [ 0 ]
>1535	PrimaryExpression	0
>1536	Identifier	m_normal
>1537	IdentifierDeclStatement	 
>1538	IdentifierDecl	len = matrix_norm ( 3 , 1 , pNew )
>1539	AssignmentExpr	len = matrix_norm ( 3 , 1 , pNew )
>1540	CallExpression	matrix_norm ( 3 , 1 , pNew )
>1541	ArgumentList	3
>1542	Argument	pNew
>1543	Identifier	pNew
>1544	Argument	1
>1545	PrimaryExpression	1
>1546	Argument	3
>1547	PrimaryExpression	3
>1548	Callee	matrix_norm
>1549	Identifier	matrix_norm
>1550	Identifier	len
>1551	Identifier	len
>1552	IdentifierDeclType	double
>1553	ExpressionStatement	 
>1554	CallExpression	matrix_transpose_product ( 4 , 4 , 4 , 1 , Minv , p , pNew )
>1555	ArgumentList	4
>1556	Argument	pNew
>1557	Identifier	pNew
>1558	Argument	p
>1559	Identifier	p
>1560	Argument	Minv
>1561	Identifier	Minv
>1562	Argument	1
>1563	PrimaryExpression	1
>1564	Argument	4
>1565	PrimaryExpression	4
>1566	Argument	4
>1567	PrimaryExpression	4
>1568	Argument	4
>1569	PrimaryExpression	4
>1570	Callee	matrix_transpose_product
>1571	Identifier	matrix_transpose_product
>1572	IdentifierDeclStatement	 
>1573	IdentifierDecl	pNew [ 4 ]
>1574	PrimaryExpression	4
>1575	Identifier	pNew
>1576	IdentifierDeclType	double [ 4 ]
>1577	ExpressionStatement	 
>1578	CallExpression	matrix_invert ( 4 , ( double * ) M , Minv )
>1579	ArgumentList	4
>1580	Argument	Minv
>1581	Identifier	Minv
>1582	Argument	( double * ) M
>1583	CastExpression	( double * ) M
>1584	Identifier	M
>1585	CastTarget	double *
>1586	Argument	4
>1587	PrimaryExpression	4
>1588	Callee	matrix_invert
>1589	Identifier	matrix_invert
>1590	IdentifierDeclStatement	 
>1591	IdentifierDecl	Minv [ 16 ]
>1592	PrimaryExpression	16
>1593	Identifier	Minv
>1594	IdentifierDeclType	double [ 16 ]
>1595	IdentifierDeclStatement	 
>1596	IdentifierDecl	p [ 4 ] = { m_normal [ 0 ] , m_normal [ 1 ] , m_normal [ 2 ] , m_dist }
>1597	AssignmentExpr	p [ 4 ] = { m_normal [ 0 ] , m_normal [ 1 ] , m_normal [ 2 ] , m_dist }
>1598	InitializerList	m_normal [ 0 ]
>1599	Identifier	m_dist
>1600	ArrayIndexing	m_normal [ 2 ]
>1601	PrimaryExpression	2
>1602	Identifier	m_normal
>1603	ArrayIndexing	m_normal [ 1 ]
>1604	PrimaryExpression	1
>1605	Identifier	m_normal
>1606	ArrayIndexing	m_normal [ 0 ]
>1607	PrimaryExpression	0
>1608	Identifier	m_normal
>1609	Identifier	p
>1610	PrimaryExpression	4
>1611	Identifier	p
>1612	IdentifierDeclType	double [ 4 ]
>1634	FunctionDef	PlaneData 
>1635	ParameterList	std 
>1636	Parameter	 
>1637	Identifier	up
>1638	ParameterType	double *
>1639	Parameter	 
>1640	Identifier	origin
>1641	ParameterType	double *
>1642	Parameter	 
>1643	Identifier	point_data
>1644	ParameterType	std 
>1645	ReturnType	void
>1646	CompoundStatement	 
>1647	ExpressionStatement	 
>1648	AssignmentExpr	m_views = views
>1649	Identifier	views
>1650	Identifier	m_views
>1651	ForStatement	for ( int i = 0 ; i < num_plane_points ; i ++ )
>1652	CompoundStatement	 
>1653	ForStatement	for ( int j = 0 ; j < ( int ) point_data [ pt_idx ] . m_views . size ( ) ; j ++ )
>1654	CompoundStatement	 
>1655	IfStatement	if ( ! found )
>1656	CompoundStatement	 
>1657	ExpressionStatement	 
>1658	CallExpression	views . push_back ( view )
>1659	ArgumentList	view
>1660	Argument	view
>1661	Identifier	view
>1662	Callee	views . push_back
>1663	MemberAccess	views . push_back
>1664	Identifier	push_back
>1665	Identifier	views
>1666	Condition	 
>1667	UnaryOp	! found
>1668	Identifier	found
>1669	UnaryOperator	!
>1670	ForStatement	for ( int k = 0 ; k < ( int ) views . size ( ) ; k ++ )
>1671	CompoundStatement	 
>1672	IfStatement	if ( views [ k ] == view )
>1673	CompoundStatement	 
>1674	BreakStatement	 
>1675	ExpressionStatement	 
>1676	AssignmentExpr	found = true
>1677	Identifier	true
>1678	Identifier	found
>1679	Condition	 
>1680	EqualityExpression	views [ k ] == view
>1681	Identifier	view
>1682	ArrayIndexing	views [ k ]
>1683	Identifier	k
>1684	Identifier	views
>1685	IncDecOp	 
>1686	IncDec	++
>1687	Identifier	k
>1688	Condition	 
>1689	RelationalExpression	k < ( int ) views . size ( )
>1690	CastExpression	( int ) views . size ( )
>1691	CallExpression	views . size ( )
>1692	ArgumentList	 
>1693	Callee	views . size
>1694	MemberAccess	views . size
>1695	Identifier	size
>1696	Identifier	views
>1697	CastTarget	int
>1698	Identifier	k
>1699	ForInit	 
>1700	IdentifierDeclStatement	int k = 0 ;
>1701	IdentifierDecl	k = 0
>1702	AssignmentExpr	k = 0
>1703	PrimaryExpression	0
>1704	Identifier	k
>1705	Identifier	k
>1706	IdentifierDeclType	int
>1707	IdentifierDeclStatement	 
>1708	IdentifierDecl	found = false
>1709	AssignmentExpr	found = false
>1710	Identifier	false
>1711	Identifier	false
>1712	Identifier	found
>1713	IdentifierDeclType	bool
>1714	IdentifierDeclStatement	 
>1715	IdentifierDecl	view = point_data [ pt_idx ] . m_views [ j ] . first
>1716	AssignmentExpr	view = point_data [ pt_idx ] . m_views [ j ] . first
>1717	MemberAccess	point_data [ pt_idx ] . m_views [ j ] . first
>1718	Identifier	first
>1719	ArrayIndexing	point_data [ pt_idx ] . m_views [ j ]
>1720	Identifier	j
>1721	MemberAccess	point_data [ pt_idx ] . m_views
>1722	Identifier	m_views
>1723	ArrayIndexing	point_data [ pt_idx ]
>1724	Identifier	pt_idx
>1725	Identifier	point_data
>1726	Identifier	view
>1727	Identifier	view
>1728	IdentifierDeclType	int
>1729	IncDecOp	 
>1730	IncDec	++
>1731	Identifier	j
>1732	Condition	 
>1733	RelationalExpression	j < ( int ) point_data [ pt_idx ] . m_views . size ( )
>1734	CastExpression	( int ) point_data [ pt_idx ] . m_views . size ( )
>1735	CallExpression	point_data [ pt_idx ] . m_views . size ( )
>1736	ArgumentList	 
>1737	Callee	point_data [ pt_idx ] . m_views . size
>1738	MemberAccess	point_data [ pt_idx ] . m_views . size
>1739	Identifier	size
>1740	MemberAccess	point_data [ pt_idx ] . m_views
>1741	Identifier	m_views
>1742	ArrayIndexing	point_data [ pt_idx ]
>1743	Identifier	pt_idx
>1744	Identifier	point_data
>1745	CastTarget	int
>1746	Identifier	j
>1747	ForInit	 
>1748	IdentifierDeclStatement	int j = 0 ;
>1749	IdentifierDecl	j = 0
>1750	AssignmentExpr	j = 0
>1751	PrimaryExpression	0
>1752	Identifier	j
>1753	Identifier	j
>1754	IdentifierDeclType	int
>1755	IdentifierDeclStatement	 
>1756	IdentifierDecl	pt_idx = m_points [ i ]
>1757	AssignmentExpr	pt_idx = m_points [ i ]
>1758	ArrayIndexing	m_points [ i ]
>1759	Identifier	i
>1760	Identifier	m_points
>1761	Identifier	pt_idx
>1762	Identifier	pt_idx
>1763	IdentifierDeclType	int
>1764	IncDecOp	 
>1765	IncDec	++
>1766	Identifier	i
>1767	Condition	 
>1768	RelationalExpression	i < num_plane_points
>1769	Identifier	num_plane_points
>1770	Identifier	i
>1771	ForInit	 
>1772	IdentifierDeclStatement	int i = 0 ;
>1773	IdentifierDecl	i = 0
>1774	AssignmentExpr	i = 0
>1775	PrimaryExpression	0
>1776	Identifier	i
>1777	Identifier	i
>1778	IdentifierDeclType	int
>1779	IdentifierDeclStatement	 
>1780	IdentifierDecl	views
>1781	Identifier	views
>1782	IdentifierDeclType	std 
>1783	ExpressionStatement	 
>1784	AssignmentExpr	m_v_extent = 2.0 * v_variance
>1785	MultiplicativeExpression	2.0 * v_variance
>1786	Identifier	v_variance
>1787	PrimaryExpression	2.0
>1788	Identifier	m_v_extent
>1789	ExpressionStatement	 
>1790	AssignmentExpr	m_u_extent = 2.0 * u_variance
>1791	MultiplicativeExpression	2.0 * u_variance
>1792	Identifier	u_variance
>1793	PrimaryExpression	2.0
>1794	Identifier	m_u_extent
>1795	ExpressionStatement	 
>1796	AssignmentExpr	v_variance = sqrt ( v_variance / num_plane_points )
>1797	CallExpression	sqrt ( v_variance / num_plane_points )
>1798	ArgumentList	v_variance / num_plane_points
>1799	Argument	v_variance / num_plane_points
>1800	MultiplicativeExpression	v_variance / num_plane_points
>1801	Identifier	num_plane_points
>1802	Identifier	v_variance
>1803	Callee	sqrt
>1804	Identifier	sqrt
>1805	Identifier	v_variance
>1806	ExpressionStatement	 
>1807	AssignmentExpr	u_variance = sqrt ( u_variance / num_plane_points )
>1808	CallExpression	sqrt ( u_variance / num_plane_points )
>1809	ArgumentList	u_variance / num_plane_points
>1810	Argument	u_variance / num_plane_points
>1811	MultiplicativeExpression	u_variance / num_plane_points
>1812	Identifier	num_plane_points
>1813	Identifier	u_variance
>1814	Callee	sqrt
>1815	Identifier	sqrt
>1816	Identifier	u_variance
>1817	ForStatement	for ( int i = 0 ; i < num_plane_points ; i ++ )
>1818	CompoundStatement	 
>1819	ExpressionStatement	 
>1820	AssignmentExpr	v_variance += matrix_normsq ( 3 , 1 , v_proj )
>1821	CallExpression	matrix_normsq ( 3 , 1 , v_proj )
>1822	ArgumentList	3
>1823	Argument	v_proj
>1824	Identifier	v_proj
>1825	Argument	1
>1826	PrimaryExpression	1
>1827	Argument	3
>1828	PrimaryExpression	3
>1829	Callee	matrix_normsq
>1830	Identifier	matrix_normsq
>1831	Identifier	v_variance
>1832	ExpressionStatement	 
>1833	AssignmentExpr	u_variance += matrix_normsq ( 3 , 1 , u_proj )
>1834	CallExpression	matrix_normsq ( 3 , 1 , u_proj )
>1835	ArgumentList	3
>1836	Argument	u_proj
>1837	Identifier	u_proj
>1838	Argument	1
>1839	PrimaryExpression	1
>1840	Argument	3
>1841	PrimaryExpression	3
>1842	Callee	matrix_normsq
>1843	Identifier	matrix_normsq
>1844	Identifier	u_variance
>1845	ExpressionStatement	 
>1846	CallExpression	ProjectV ( diff , v_proj )
>1847	ArgumentList	diff
>1848	Argument	v_proj
>1849	Identifier	v_proj
>1850	Argument	diff
>1851	Identifier	diff
>1852	Callee	ProjectV
>1853	Identifier	ProjectV
>1854	ExpressionStatement	 
>1855	CallExpression	ProjectU ( diff , u_proj )
>1856	ArgumentList	diff
>1857	Argument	u_proj
>1858	Identifier	u_proj
>1859	Argument	diff
>1860	Identifier	diff
>1861	Callee	ProjectU
>1862	Identifier	ProjectU
>1863	IdentifierDeclStatement	 
>1864	IdentifierDecl	v_proj [ 3 ]
>1865	PrimaryExpression	3
>1866	Identifier	v_proj
>1867	IdentifierDeclType	double [ 3 ]
>1868	IdentifierDecl	u_proj [ 3 ]
>1869	PrimaryExpression	3
>1870	Identifier	u_proj
>1871	IdentifierDeclType	double [ 3 ]
>1872	ExpressionStatement	 
>1873	CallExpression	matrix_diff ( 3 , 1 , 3 , 1 , point_data [ pt_idx ] . m_pos , m_origin , diff )
>1874	ArgumentList	3
>1875	Argument	diff
>1876	Identifier	diff
>1877	Argument	m_origin
>1878	Identifier	m_origin
>1879	Argument	point_data [ pt_idx ] . m_pos
>1880	MemberAccess	point_data [ pt_idx ] . m_pos
>1881	Identifier	m_pos
>1882	ArrayIndexing	point_data [ pt_idx ]
>1883	Identifier	pt_idx
>1884	Identifier	point_data
>1885	Argument	1
>1886	PrimaryExpression	1
>1887	Argument	3
>1888	PrimaryExpression	3
>1889	Argument	1
>1890	PrimaryExpression	1
>1891	Argument	3
>1892	PrimaryExpression	3
>1893	Callee	matrix_diff
>1894	Identifier	matrix_diff
>1895	IdentifierDeclStatement	 
>1896	IdentifierDecl	diff [ 3 ]
>1897	PrimaryExpression	3
>1898	Identifier	diff
>1899	IdentifierDeclType	double [ 3 ]
>1900	IdentifierDeclStatement	 
>1901	IdentifierDecl	pt_idx = m_points [ i ]
>1902	AssignmentExpr	pt_idx = m_points [ i ]
>1903	ArrayIndexing	m_points [ i ]
>1904	Identifier	i
>1905	Identifier	m_points
>1906	Identifier	pt_idx
>1907	Identifier	pt_idx
>1908	IdentifierDeclType	int
>1909	IncDecOp	 
>1910	IncDec	++
>1911	Identifier	i
>1912	Condition	 
>1913	RelationalExpression	i < num_plane_points
>1914	Identifier	num_plane_points
>1915	Identifier	i
>1916	ForInit	 
>1917	IdentifierDeclStatement	int i = 0 ;
>1918	IdentifierDecl	i = 0
>1919	AssignmentExpr	i = 0
>1920	PrimaryExpression	0
>1921	Identifier	i
>1922	Identifier	i
>1923	IdentifierDeclType	int
>1924	IdentifierDeclStatement	 
>1925	IdentifierDecl	v_variance = 0.0
>1926	AssignmentExpr	v_variance = 0.0
>1927	PrimaryExpression	0.0
>1928	Identifier	v_variance
>1929	Identifier	v_variance
>1930	IdentifierDeclType	double
>1931	IdentifierDecl	u_variance = 0.0
>1932	AssignmentExpr	u_variance = 0.0
>1933	PrimaryExpression	0.0
>1934	Identifier	u_variance
>1935	Identifier	u_variance
>1936	IdentifierDeclType	double
>1937	ExpressionStatement	 
>1938	CallExpression	matrix_cross ( m_normal , m_vaxis , m_uaxis )
>1939	ArgumentList	m_normal
>1940	Argument	m_uaxis
>1941	Identifier	m_uaxis
>1942	Argument	m_vaxis
>1943	Identifier	m_vaxis
>1944	Argument	m_normal
>1945	Identifier	m_normal
>1946	Callee	matrix_cross
>1947	Identifier	matrix_cross
>1948	ExpressionStatement	 
>1949	CallExpression	memcpy ( m_vaxis , up , 3 * sizeof ( double ) )
>1950	ArgumentList	m_vaxis
>1951	Argument	3 * sizeof ( double )
>1952	MultiplicativeExpression	3 * sizeof ( double )
>1953	SizeofExpr	sizeof ( double )
>1954	SizeofOperand	double
>1955	Sizeof	sizeof
>1956	PrimaryExpression	3
>1957	Argument	up
>1958	Identifier	up
>1959	Argument	m_vaxis
>1960	Identifier	m_vaxis
>1961	Callee	memcpy
>1962	Identifier	memcpy
>1963	ExpressionStatement	 
>1964	CallExpression	matrix_sum ( 3 , 1 , 3 , 1 , m_origin , origin , m_origin )
>1965	ArgumentList	3
>1966	Argument	m_origin
>1967	Identifier	m_origin
>1968	Argument	origin
>1969	Identifier	origin
>1970	Argument	m_origin
>1971	Identifier	m_origin
>1972	Argument	1
>1973	PrimaryExpression	1
>1974	Argument	3
>1975	PrimaryExpression	3
>1976	Argument	1
>1977	PrimaryExpression	1
>1978	Argument	3
>1979	PrimaryExpression	3
>1980	Callee	matrix_sum
>1981	Identifier	matrix_sum
>1982	ExpressionStatement	 
>1983	CallExpression	Project ( mean , m_origin )
>1984	ArgumentList	mean
>1985	Argument	m_origin
>1986	Identifier	m_origin
>1987	Argument	mean
>1988	Identifier	mean
>1989	Callee	Project
>1990	Identifier	Project
>1991	ExpressionStatement	 
>1992	CallExpression	matrix_diff ( 3 , 1 , 3 , 1 , mean , origin , mean )
>1993	ArgumentList	3
>1994	Argument	mean
>1995	Identifier	mean
>1996	Argument	origin
>1997	Identifier	origin
>1998	Argument	mean
>1999	Identifier	mean
>2000	Argument	1
>2001	PrimaryExpression	1
>2002	Argument	3
>2003	PrimaryExpression	3
>2004	Argument	1
>2005	PrimaryExpression	1
>2006	Argument	3
>2007	PrimaryExpression	3
>2008	Callee	matrix_diff
>2009	Identifier	matrix_diff
>2010	ExpressionStatement	 
>2011	CallExpression	matrix_scale ( 3 , 1 , mean , 1.0 / num_plane_points , mean )
>2012	ArgumentList	3
>2013	Argument	mean
>2014	Identifier	mean
>2015	Argument	1.0 / num_plane_points
>2016	MultiplicativeExpression	1.0 / num_plane_points
>2017	Identifier	num_plane_points
>2018	PrimaryExpression	1.0
>2019	Argument	mean
>2020	Identifier	mean
>2021	Argument	1
>2022	PrimaryExpression	1
>2023	Argument	3
>2024	PrimaryExpression	3
>2025	Callee	matrix_scale
>2026	Identifier	matrix_scale
>2027	ForStatement	for ( int i = 0 ; i < num_plane_points ; i ++ )
>2028	CompoundStatement	 
>2029	ExpressionStatement	 
>2030	AssignmentExpr	mean [ 2 ] += point_data [ pt_idx ] . m_pos [ 2 ]
>2031	ArrayIndexing	point_data [ pt_idx ] . m_pos [ 2 ]
>2032	PrimaryExpression	2
>2033	MemberAccess	point_data [ pt_idx ] . m_pos
>2034	Identifier	m_pos
>2035	ArrayIndexing	point_data [ pt_idx ]
>2036	Identifier	pt_idx
>2037	Identifier	point_data
>2038	ArrayIndexing	mean [ 2 ]
>2039	PrimaryExpression	2
>2040	Identifier	mean
>2041	ExpressionStatement	 
>2042	AssignmentExpr	mean [ 1 ] += point_data [ pt_idx ] . m_pos [ 1 ]
>2043	ArrayIndexing	point_data [ pt_idx ] . m_pos [ 1 ]
>2044	PrimaryExpression	1
>2045	MemberAccess	point_data [ pt_idx ] . m_pos
>2046	Identifier	m_pos
>2047	ArrayIndexing	point_data [ pt_idx ]
>2048	Identifier	pt_idx
>2049	Identifier	point_data
>2050	ArrayIndexing	mean [ 1 ]
>2051	PrimaryExpression	1
>2052	Identifier	mean
>2053	ExpressionStatement	 
>2054	AssignmentExpr	mean [ 0 ] += point_data [ pt_idx ] . m_pos [ 0 ]
>2055	ArrayIndexing	point_data [ pt_idx ] . m_pos [ 0 ]
>2056	PrimaryExpression	0
>2057	MemberAccess	point_data [ pt_idx ] . m_pos
>2058	Identifier	m_pos
>2059	ArrayIndexing	point_data [ pt_idx ]
>2060	Identifier	pt_idx
>2061	Identifier	point_data
>2062	ArrayIndexing	mean [ 0 ]
>2063	PrimaryExpression	0
>2064	Identifier	mean
>2065	IdentifierDeclStatement	 
>2066	IdentifierDecl	pt_idx = m_points [ i ]
>2067	AssignmentExpr	pt_idx = m_points [ i ]
>2068	ArrayIndexing	m_points [ i ]
>2069	Identifier	i
>2070	Identifier	m_points
>2071	Identifier	pt_idx
>2072	Identifier	pt_idx
>2073	IdentifierDeclType	int
>2074	IncDecOp	 
>2075	IncDec	++
>2076	Identifier	i
>2077	Condition	 
>2078	RelationalExpression	i < num_plane_points
>2079	Identifier	num_plane_points
>2080	Identifier	i
>2081	ForInit	 
>2082	IdentifierDeclStatement	int i = 0 ;
>2083	IdentifierDecl	i = 0
>2084	AssignmentExpr	i = 0
>2085	PrimaryExpression	0
>2086	Identifier	i
>2087	Identifier	i
>2088	IdentifierDeclType	int
>2089	IdentifierDeclStatement	 
>2090	IdentifierDecl	num_plane_points = ( int ) m_points . size ( )
>2091	AssignmentExpr	num_plane_points = ( int ) m_points . size ( )
>2092	CastExpression	( int ) m_points . size ( )
>2093	CallExpression	m_points . size ( )
>2094	ArgumentList	 
>2095	Callee	m_points . size
>2096	MemberAccess	m_points . size
>2097	Identifier	size
>2098	Identifier	m_points
>2099	CastTarget	int
>2100	Identifier	num_plane_points
>2101	Identifier	num_plane_points
>2102	IdentifierDeclType	int
>2103	IdentifierDeclStatement	 
>2104	IdentifierDecl	mean [ 3 ] = { 0.0 , 0.0 , 0.0 }
>2105	AssignmentExpr	mean [ 3 ] = { 0.0 , 0.0 , 0.0 }
>2106	InitializerList	0.0
>2107	PrimaryExpression	0.0
>2108	PrimaryExpression	0.0
>2109	PrimaryExpression	0.0
>2110	Identifier	mean
>2111	PrimaryExpression	3
>2112	Identifier	mean
>2113	IdentifierDeclType	double [ 3 ]
>2164	FunctionDef	PlaneData 
>2165	ParameterList	double normal [ 3 ] , double dist
>2166	Parameter	 
>2167	Identifier	dist
>2168	ParameterType	double
>2169	Parameter	 
>2170	Identifier	normal
>2171	ParameterType	double [ 3 ]
>2172	CompoundStatement	 
>2173	ExpressionStatement	 
>2174	AssignmentExpr	m_dist = dist
>2175	Identifier	dist
>2176	Identifier	m_dist
>2177	ForStatement	for ( int i = 0 ; i < 3 ; i ++ )
>2178	ExpressionStatement	 
>2179	AssignmentExpr	m_normal [ i ] = normal [ i ]
>2180	ArrayIndexing	normal [ i ]
>2181	Identifier	i
>2182	Identifier	normal
>2183	ArrayIndexing	m_normal [ i ]
>2184	Identifier	i
>2185	Identifier	m_normal
>2186	IncDecOp	 
>2187	IncDec	++
>2188	Identifier	i
>2189	Condition	 
>2190	RelationalExpression	i < 3
>2191	PrimaryExpression	3
>2192	Identifier	i
>2193	ForInit	 
>2194	IdentifierDeclStatement	int i = 0 ;
>2195	IdentifierDecl	i = 0
>2196	AssignmentExpr	i = 0
>2197	PrimaryExpression	0
>2198	Identifier	i
>2199	Identifier	i
>2200	IdentifierDeclType	int
>2212	FunctionDef	PlaneData 
>2213	ParameterList	double * point
>2214	Parameter	 
>2215	Identifier	point
>2216	ParameterType	double *
>2217	ReturnType	bool
>2218	CompoundStatement	 
>2219	ReturnStatement	 
>2220	Identifier	true
>2221	ForStatement	for ( int i = 0 ; i < 4 ; i ++ )
>2222	CompoundStatement	 
>2223	IfStatement	if ( dp < 0 )
>2224	ReturnStatement	 
>2225	Identifier	false
>2226	Condition	 
>2227	RelationalExpression	dp < 0
>2228	PrimaryExpression	0
>2229	Identifier	dp
>2230	ForStatement	for ( int j = 0 ; j < 3 ; dp += cross1 [ j ] * cross2 [ j ] , j ++ )
>2231	ExpressionStatement	 
>2232	Expression	 
>2233	IncDecOp	j ++
>2234	IncDec	++
>2235	Identifier	j
>2236	AssignmentExpr	dp += cross1 [ j ] * cross2 [ j ]
>2237	MultiplicativeExpression	cross1 [ j ] * cross2 [ j ]
>2238	ArrayIndexing	cross2 [ j ]
>2239	Identifier	j
>2240	Identifier	cross2
>2241	ArrayIndexing	cross1 [ j ]
>2242	Identifier	j
>2243	Identifier	cross1
>2244	Identifier	dp
>2245	Condition	 
>2246	RelationalExpression	j < 3
>2247	PrimaryExpression	3
>2248	Identifier	j
>2249	ForInit	 
>2250	IdentifierDeclStatement	int j = 0 ;
>2251	IdentifierDecl	j = 0
>2252	AssignmentExpr	j = 0
>2253	PrimaryExpression	0
>2254	Identifier	j
>2255	Identifier	j
>2256	IdentifierDeclType	int
>2257	IdentifierDeclStatement	 
>2258	IdentifierDecl	dp = 0
>2259	AssignmentExpr	dp = 0
>2260	PrimaryExpression	0
>2261	Identifier	dp
>2262	Identifier	dp
>2263	IdentifierDeclType	double
>2264	ExpressionStatement	 
>2265	CallExpression	matrix_cross ( side_vec , point_vec , cross2 )
>2266	ArgumentList	side_vec
>2267	Argument	cross2
>2268	Identifier	cross2
>2269	Argument	point_vec
>2270	Identifier	point_vec
>2271	Argument	side_vec
>2272	Identifier	side_vec
>2273	Callee	matrix_cross
>2274	Identifier	matrix_cross
>2275	ExpressionStatement	 
>2276	CallExpression	matrix_cross ( side_vec , poly_vec , cross1 )
>2277	ArgumentList	side_vec
>2278	Argument	cross1
>2279	Identifier	cross1
>2280	Argument	poly_vec
>2281	Identifier	poly_vec
>2282	Argument	side_vec
>2283	Identifier	side_vec
>2284	Callee	matrix_cross
>2285	Identifier	matrix_cross
>2286	ExpressionStatement	 
>2287	CallExpression	matrix_diff ( 3 , 1 , 3 , 1 , point , m_corners + i2 * 3 , point_vec )
>2288	ArgumentList	3
>2289	Argument	point_vec
>2290	Identifier	point_vec
>2291	Argument	m_corners + i2 * 3
>2292	AdditiveExpression	m_corners + i2 * 3
>2293	MultiplicativeExpression	i2 * 3
>2294	PrimaryExpression	3
>2295	Identifier	i2
>2296	Identifier	m_corners
>2297	Argument	point
>2298	Identifier	point
>2299	Argument	1
>2300	PrimaryExpression	1
>2301	Argument	3
>2302	PrimaryExpression	3
>2303	Argument	1
>2304	PrimaryExpression	1
>2305	Argument	3
>2306	PrimaryExpression	3
>2307	Callee	matrix_diff
>2308	Identifier	matrix_diff
>2309	ExpressionStatement	 
>2310	CallExpression	matrix_diff ( 3 , 1 , 3 , 1 , m_corners + i1 * 3 , m_corners + i2 * 3 , poly_vec )
>2311	ArgumentList	3
>2312	Argument	poly_vec
>2313	Identifier	poly_vec
>2314	Argument	m_corners + i2 * 3
>2315	AdditiveExpression	m_corners + i2 * 3
>2316	MultiplicativeExpression	i2 * 3
>2317	PrimaryExpression	3
>2318	Identifier	i2
>2319	Identifier	m_corners
>2320	Argument	m_corners + i1 * 3
>2321	AdditiveExpression	m_corners + i1 * 3
>2322	MultiplicativeExpression	i1 * 3
>2323	PrimaryExpression	3
>2324	Identifier	i1
>2325	Identifier	m_corners
>2326	Argument	1
>2327	PrimaryExpression	1
>2328	Argument	3
>2329	PrimaryExpression	3
>2330	Argument	1
>2331	PrimaryExpression	1
>2332	Argument	3
>2333	PrimaryExpression	3
>2334	Callee	matrix_diff
>2335	Identifier	matrix_diff
>2336	ExpressionStatement	 
>2337	CallExpression	matrix_diff ( 3 , 1 , 3 , 1 , m_corners + i3 * 3 , m_corners + i2 * 3 , side_vec )
>2338	ArgumentList	3
>2339	Argument	side_vec
>2340	Identifier	side_vec
>2341	Argument	m_corners + i2 * 3
>2342	AdditiveExpression	m_corners + i2 * 3
>2343	MultiplicativeExpression	i2 * 3
>2344	PrimaryExpression	3
>2345	Identifier	i2
>2346	Identifier	m_corners
>2347	Argument	m_corners + i3 * 3
>2348	AdditiveExpression	m_corners + i3 * 3
>2349	MultiplicativeExpression	i3 * 3
>2350	PrimaryExpression	3
>2351	Identifier	i3
>2352	Identifier	m_corners
>2353	Argument	1
>2354	PrimaryExpression	1
>2355	Argument	3
>2356	PrimaryExpression	3
>2357	Argument	1
>2358	PrimaryExpression	1
>2359	Argument	3
>2360	PrimaryExpression	3
>2361	Callee	matrix_diff
>2362	Identifier	matrix_diff
>2363	ExpressionStatement	 
>2364	AssignmentExpr	i3 = ( i2 + 1 ) % 4
>2365	MultiplicativeExpression	( i2 + 1 ) % 4
>2366	PrimaryExpression	4
>2367	AdditiveExpression	i2 + 1
>2368	PrimaryExpression	1
>2369	Identifier	i2
>2370	Identifier	i3
>2371	ExpressionStatement	 
>2372	AssignmentExpr	i2 = ( i1 + 1 ) % 4
>2373	MultiplicativeExpression	( i1 + 1 ) % 4
>2374	PrimaryExpression	4
>2375	AdditiveExpression	i1 + 1
>2376	PrimaryExpression	1
>2377	Identifier	i1
>2378	Identifier	i2
>2379	ExpressionStatement	 
>2380	AssignmentExpr	i1 = i
>2381	Identifier	i
>2382	Identifier	i1
>2383	IdentifierDeclStatement	 
>2384	IdentifierDecl	i3
>2385	Identifier	i3
>2386	IdentifierDeclType	int
>2387	IdentifierDecl	i2
>2388	Identifier	i2
>2389	IdentifierDeclType	int
>2390	IdentifierDecl	i1
>2391	Identifier	i1
>2392	IdentifierDeclType	int
>2393	IncDecOp	 
>2394	IncDec	++
>2395	Identifier	i
>2396	Condition	 
>2397	RelationalExpression	i < 4
>2398	PrimaryExpression	4
>2399	Identifier	i
>2400	ForInit	 
>2401	IdentifierDeclStatement	int i = 0 ;
>2402	IdentifierDecl	i = 0
>2403	AssignmentExpr	i = 0
>2404	PrimaryExpression	0
>2405	Identifier	i
>2406	Identifier	i
>2407	IdentifierDeclType	int
>2408	IdentifierDeclStatement	 
>2409	IdentifierDecl	cross2 [ 3 ]
>2410	PrimaryExpression	3
>2411	Identifier	cross2
>2412	IdentifierDeclType	double [ 3 ]
>2413	IdentifierDecl	cross1 [ 3 ]
>2414	PrimaryExpression	3
>2415	Identifier	cross1
>2416	IdentifierDeclType	double [ 3 ]
>2417	IdentifierDecl	point_vec [ 3 ]
>2418	PrimaryExpression	3
>2419	Identifier	point_vec
>2420	IdentifierDeclType	double [ 3 ]
>2421	IdentifierDecl	poly_vec [ 3 ]
>2422	PrimaryExpression	3
>2423	Identifier	poly_vec
>2424	IdentifierDeclType	double [ 3 ]
>2425	IdentifierDecl	side_vec [ 3 ]
>2426	PrimaryExpression	3
>2427	Identifier	side_vec
>2428	IdentifierDeclType	double [ 3 ]
>2450	FunctionDef	PlaneData 
>2451	ParameterList	double * pos , double * ray , double * pt
>2452	Parameter	 
>2453	Identifier	pt
>2454	ParameterType	double *
>2455	Parameter	 
>2456	Identifier	ray
>2457	ParameterType	double *
>2458	Parameter	 
>2459	Identifier	pos
>2460	ParameterType	double *
>2461	ReturnType	double
>2462	CompoundStatement	 
>2463	ReturnStatement	 
>2464	Identifier	t
>2465	ExpressionStatement	 
>2466	AssignmentExpr	pt [ 2 ] = pos [ 2 ] + t * ray [ 2 ]
>2467	AdditiveExpression	pos [ 2 ] + t * ray [ 2 ]
>2468	MultiplicativeExpression	t * ray [ 2 ]
>2469	ArrayIndexing	ray [ 2 ]
>2470	PrimaryExpression	2
>2471	Identifier	ray
>2472	Identifier	t
>2473	ArrayIndexing	pos [ 2 ]
>2474	PrimaryExpression	2
>2475	Identifier	pos
>2476	ArrayIndexing	pt [ 2 ]
>2477	PrimaryExpression	2
>2478	Identifier	pt
>2479	ExpressionStatement	 
>2480	AssignmentExpr	pt [ 1 ] = pos [ 1 ] + t * ray [ 1 ]
>2481	AdditiveExpression	pos [ 1 ] + t * ray [ 1 ]
>2482	MultiplicativeExpression	t * ray [ 1 ]
>2483	ArrayIndexing	ray [ 1 ]
>2484	PrimaryExpression	1
>2485	Identifier	ray
>2486	Identifier	t
>2487	ArrayIndexing	pos [ 1 ]
>2488	PrimaryExpression	1
>2489	Identifier	pos
>2490	ArrayIndexing	pt [ 1 ]
>2491	PrimaryExpression	1
>2492	Identifier	pt
>2493	ExpressionStatement	 
>2494	AssignmentExpr	pt [ 0 ] = pos [ 0 ] + t * ray [ 0 ]
>2495	AdditiveExpression	pos [ 0 ] + t * ray [ 0 ]
>2496	MultiplicativeExpression	t * ray [ 0 ]
>2497	ArrayIndexing	ray [ 0 ]
>2498	PrimaryExpression	0
>2499	Identifier	ray
>2500	Identifier	t
>2501	ArrayIndexing	pos [ 0 ]
>2502	PrimaryExpression	0
>2503	Identifier	pos
>2504	ArrayIndexing	pt [ 0 ]
>2505	PrimaryExpression	0
>2506	Identifier	pt
>2507	IdentifierDeclStatement	 
>2508	IdentifierDecl	t = ( - m_dist - pos_dot ) / ray_dot
>2509	AssignmentExpr	t = ( - m_dist - pos_dot ) / ray_dot
>2510	MultiplicativeExpression	( - m_dist - pos_dot ) / ray_dot
>2511	Identifier	ray_dot
>2512	AdditiveExpression	- m_dist - pos_dot
>2513	Identifier	pos_dot
>2514	UnaryOp	- m_dist
>2515	Identifier	m_dist
>2516	UnaryOperator	-
>2517	Identifier	t
>2518	Identifier	t
>2519	IdentifierDeclType	double
>2520	IfStatement	if ( ray_dot == 0.0 )
>2521	CompoundStatement	 
>2522	ReturnStatement	 
>2523	UnaryOp	- DBL_MAX
>2524	Identifier	DBL_MAX
>2525	UnaryOperator	-
>2526	Condition	 
>2527	EqualityExpression	ray_dot == 0.0
>2528	PrimaryExpression	0.0
>2529	Identifier	ray_dot
>2530	ExpressionStatement	 
>2531	CallExpression	matrix_product ( 1 , 3 , 3 , 1 , ( double * ) m_normal , ray , & ray_dot )
>2532	ArgumentList	1
>2533	Argument	& ray_dot
>2534	UnaryOp	& ray_dot
>2535	Identifier	ray_dot
>2536	UnaryOperator	&
>2537	Argument	ray
>2538	Identifier	ray
>2539	Argument	( double * ) m_normal
>2540	CastExpression	( double * ) m_normal
>2541	Identifier	m_normal
>2542	CastTarget	double *
>2543	Argument	1
>2544	PrimaryExpression	1
>2545	Argument	3
>2546	PrimaryExpression	3
>2547	Argument	3
>2548	PrimaryExpression	3
>2549	Argument	1
>2550	PrimaryExpression	1
>2551	Callee	matrix_product
>2552	Identifier	matrix_product
>2553	ExpressionStatement	 
>2554	CallExpression	matrix_product ( 1 , 3 , 3 , 1 , ( double * ) m_normal , pos , & pos_dot )
>2555	ArgumentList	1
>2556	Argument	& pos_dot
>2557	UnaryOp	& pos_dot
>2558	Identifier	pos_dot
>2559	UnaryOperator	&
>2560	Argument	pos
>2561	Identifier	pos
>2562	Argument	( double * ) m_normal
>2563	CastExpression	( double * ) m_normal
>2564	Identifier	m_normal
>2565	CastTarget	double *
>2566	Argument	1
>2567	PrimaryExpression	1
>2568	Argument	3
>2569	PrimaryExpression	3
>2570	Argument	3
>2571	PrimaryExpression	3
>2572	Argument	1
>2573	PrimaryExpression	1
>2574	Callee	matrix_product
>2575	Identifier	matrix_product
>2576	IdentifierDeclStatement	 
>2577	IdentifierDecl	ray_dot
>2578	Identifier	ray_dot
>2579	IdentifierDeclType	double
>2580	IdentifierDecl	pos_dot
>2581	Identifier	pos_dot
>2582	IdentifierDeclType	double
>2600	FunctionDef	PlaneData 
>2601	ParameterList	double * R , double * t , double f , int w , int h , int ymin , int ymax , int xmin , int xmax
>2602	Parameter	 
>2603	Identifier	xmax
>2604	ParameterType	int
>2605	Parameter	 
>2606	Identifier	xmin
>2607	ParameterType	int
>2608	Parameter	 
>2609	Identifier	ymax
>2610	ParameterType	int
>2611	Parameter	 
>2612	Identifier	ymin
>2613	ParameterType	int
>2614	Parameter	 
>2615	Identifier	h
>2616	ParameterType	int
>2617	Parameter	 
>2618	Identifier	w
>2619	ParameterType	int
>2620	Parameter	 
>2621	Identifier	f
>2622	ParameterType	double
>2623	Parameter	 
>2624	Identifier	t
>2625	ParameterType	double *
>2626	Parameter	 
>2627	Identifier	R
>2628	ParameterType	double *
>2629	ReturnType	bool
>2630	CompoundStatement	 
>2631	IfStatement	if ( t0 > 0.0 && t1 > 0.0 && t2 > 0.0 && t3 > 0.0 )
>2632	ElseStatement	else
>2633	ReturnStatement	 
>2634	Identifier	false
>2635	ReturnStatement	 
>2636	Identifier	true
>2637	Condition	 
>2638	AndExpression	t0 > 0.0 && t1 > 0.0 && t2 > 0.0 && t3 > 0.0
>2639	AndExpression	t1 > 0.0 && t2 > 0.0 && t3 > 0.0
>2640	AndExpression	t2 > 0.0 && t3 > 0.0
>2641	RelationalExpression	t3 > 0.0
>2642	PrimaryExpression	0.0
>2643	Identifier	t3
>2644	RelationalExpression	t2 > 0.0
>2645	PrimaryExpression	0.0
>2646	Identifier	t2
>2647	RelationalExpression	t1 > 0.0
>2648	PrimaryExpression	0.0
>2649	Identifier	t1
>2650	RelationalExpression	t0 > 0.0
>2651	PrimaryExpression	0.0
>2652	Identifier	t0
>2653	IdentifierDeclStatement	 
>2654	IdentifierDecl	t3 = IntersectRay ( center , ray_world + 9 , m_corners + 9 )
>2655	AssignmentExpr	t3 = IntersectRay ( center , ray_world + 9 , m_corners + 9 )
>2656	CallExpression	IntersectRay ( center , ray_world + 9 , m_corners + 9 )
>2657	ArgumentList	center
>2658	Argument	m_corners + 9
>2659	AdditiveExpression	m_corners + 9
>2660	PrimaryExpression	9
>2661	Identifier	m_corners
>2662	Argument	ray_world + 9
>2663	AdditiveExpression	ray_world + 9
>2664	PrimaryExpression	9
>2665	Identifier	ray_world
>2666	Argument	center
>2667	Identifier	center
>2668	Callee	IntersectRay
>2669	Identifier	IntersectRay
>2670	Identifier	t3
>2671	Identifier	t3
>2672	IdentifierDeclType	double
>2673	IdentifierDeclStatement	 
>2674	IdentifierDecl	t2 = IntersectRay ( center , ray_world + 6 , m_corners + 6 )
>2675	AssignmentExpr	t2 = IntersectRay ( center , ray_world + 6 , m_corners + 6 )
>2676	CallExpression	IntersectRay ( center , ray_world + 6 , m_corners + 6 )
>2677	ArgumentList	center
>2678	Argument	m_corners + 6
>2679	AdditiveExpression	m_corners + 6
>2680	PrimaryExpression	6
>2681	Identifier	m_corners
>2682	Argument	ray_world + 6
>2683	AdditiveExpression	ray_world + 6
>2684	PrimaryExpression	6
>2685	Identifier	ray_world
>2686	Argument	center
>2687	Identifier	center
>2688	Callee	IntersectRay
>2689	Identifier	IntersectRay
>2690	Identifier	t2
>2691	Identifier	t2
>2692	IdentifierDeclType	double
>2693	IdentifierDeclStatement	 
>2694	IdentifierDecl	t1 = IntersectRay ( center , ray_world + 3 , m_corners + 3 )
>2695	AssignmentExpr	t1 = IntersectRay ( center , ray_world + 3 , m_corners + 3 )
>2696	CallExpression	IntersectRay ( center , ray_world + 3 , m_corners + 3 )
>2697	ArgumentList	center
>2698	Argument	m_corners + 3
>2699	AdditiveExpression	m_corners + 3
>2700	PrimaryExpression	3
>2701	Identifier	m_corners
>2702	Argument	ray_world + 3
>2703	AdditiveExpression	ray_world + 3
>2704	PrimaryExpression	3
>2705	Identifier	ray_world
>2706	Argument	center
>2707	Identifier	center
>2708	Callee	IntersectRay
>2709	Identifier	IntersectRay
>2710	Identifier	t1
>2711	Identifier	t1
>2712	IdentifierDeclType	double
>2713	IdentifierDeclStatement	 
>2714	IdentifierDecl	t0 = IntersectRay ( center , ray_world + 0 , m_corners + 0 )
>2715	AssignmentExpr	t0 = IntersectRay ( center , ray_world + 0 , m_corners + 0 )
>2716	CallExpression	IntersectRay ( center , ray_world + 0 , m_corners + 0 )
>2717	ArgumentList	center
>2718	Argument	m_corners + 0
>2719	AdditiveExpression	m_corners + 0
>2720	PrimaryExpression	0
>2721	Identifier	m_corners
>2722	Argument	ray_world + 0
>2723	AdditiveExpression	ray_world + 0
>2724	PrimaryExpression	0
>2725	Identifier	ray_world
>2726	Argument	center
>2727	Identifier	center
>2728	Callee	IntersectRay
>2729	Identifier	IntersectRay
>2730	Identifier	t0
>2731	Identifier	t0
>2732	IdentifierDeclType	double
>2733	ExpressionStatement	 
>2734	CallExpression	matrix_product ( 3 , 3 , 3 , 1 , Rt , ray4 , ray_world + 9 )
>2735	ArgumentList	3
>2736	Argument	ray_world + 9
>2737	AdditiveExpression	ray_world + 9
>2738	PrimaryExpression	9
>2739	Identifier	ray_world
>2740	Argument	ray4
>2741	Identifier	ray4
>2742	Argument	Rt
>2743	Identifier	Rt
>2744	Argument	1
>2745	PrimaryExpression	1
>2746	Argument	3
>2747	PrimaryExpression	3
>2748	Argument	3
>2749	PrimaryExpression	3
>2750	Argument	3
>2751	PrimaryExpression	3
>2752	Callee	matrix_product
>2753	Identifier	matrix_product
>2754	ExpressionStatement	 
>2755	CallExpression	matrix_product ( 3 , 3 , 3 , 1 , Rt , ray3 , ray_world + 6 )
>2756	ArgumentList	3
>2757	Argument	ray_world + 6
>2758	AdditiveExpression	ray_world + 6
>2759	PrimaryExpression	6
>2760	Identifier	ray_world
>2761	Argument	ray3
>2762	Identifier	ray3
>2763	Argument	Rt
>2764	Identifier	Rt
>2765	Argument	1
>2766	PrimaryExpression	1
>2767	Argument	3
>2768	PrimaryExpression	3
>2769	Argument	3
>2770	PrimaryExpression	3
>2771	Argument	3
>2772	PrimaryExpression	3
>2773	Callee	matrix_product
>2774	Identifier	matrix_product
>2775	ExpressionStatement	 
>2776	CallExpression	matrix_product ( 3 , 3 , 3 , 1 , Rt , ray2 , ray_world + 3 )
>2777	ArgumentList	3
>2778	Argument	ray_world + 3
>2779	AdditiveExpression	ray_world + 3
>2780	PrimaryExpression	3
>2781	Identifier	ray_world
>2782	Argument	ray2
>2783	Identifier	ray2
>2784	Argument	Rt
>2785	Identifier	Rt
>2786	Argument	1
>2787	PrimaryExpression	1
>2788	Argument	3
>2789	PrimaryExpression	3
>2790	Argument	3
>2791	PrimaryExpression	3
>2792	Argument	3
>2793	PrimaryExpression	3
>2794	Callee	matrix_product
>2795	Identifier	matrix_product
>2796	ExpressionStatement	 
>2797	CallExpression	matrix_product ( 3 , 3 , 3 , 1 , Rt , ray1 , ray_world + 0 )
>2798	ArgumentList	3
>2799	Argument	ray_world + 0
>2800	AdditiveExpression	ray_world + 0
>2801	PrimaryExpression	0
>2802	Identifier	ray_world
>2803	Argument	ray1
>2804	Identifier	ray1
>2805	Argument	Rt
>2806	Identifier	Rt
>2807	Argument	1
>2808	PrimaryExpression	1
>2809	Argument	3
>2810	PrimaryExpression	3
>2811	Argument	3
>2812	PrimaryExpression	3
>2813	Argument	3
>2814	PrimaryExpression	3
>2815	Callee	matrix_product
>2816	Identifier	matrix_product
>2817	IdentifierDeclStatement	 
>2818	IdentifierDecl	ray_world [ 18 ]
>2819	PrimaryExpression	18
>2820	Identifier	ray_world
>2821	IdentifierDeclType	double [ 18 ]
>2822	IdentifierDeclStatement	 
>2823	IdentifierDecl	ray4 [ 3 ] = { xmin - 0.5 * w , ymax - 0.5 * h , - f }
>2824	AssignmentExpr	ray4 [ 3 ] = { xmin - 0.5 * w , ymax - 0.5 * h , - f }
>2825	InitializerList	xmin - 0.5 * w
>2826	UnaryOp	- f
>2827	Identifier	f
>2828	UnaryOperator	-
>2829	AdditiveExpression	ymax - 0.5 * h
>2830	MultiplicativeExpression	0.5 * h
>2831	Identifier	h
>2832	PrimaryExpression	0.5
>2833	Identifier	ymax
>2834	AdditiveExpression	xmin - 0.5 * w
>2835	MultiplicativeExpression	0.5 * w
>2836	Identifier	w
>2837	PrimaryExpression	0.5
>2838	Identifier	xmin
>2839	Identifier	ray4
>2840	PrimaryExpression	3
>2841	Identifier	ray4
>2842	IdentifierDeclType	double [ 3 ]
>2843	IdentifierDeclStatement	 
>2844	IdentifierDecl	ray3 [ 3 ] = { xmax - 0.5 * w , ymax - 0.5 * h , - f }
>2845	AssignmentExpr	ray3 [ 3 ] = { xmax - 0.5 * w , ymax - 0.5 * h , - f }
>2846	InitializerList	xmax - 0.5 * w
>2847	UnaryOp	- f
>2848	Identifier	f
>2849	UnaryOperator	-
>2850	AdditiveExpression	ymax - 0.5 * h
>2851	MultiplicativeExpression	0.5 * h
>2852	Identifier	h
>2853	PrimaryExpression	0.5
>2854	Identifier	ymax
>2855	AdditiveExpression	xmax - 0.5 * w
>2856	MultiplicativeExpression	0.5 * w
>2857	Identifier	w
>2858	PrimaryExpression	0.5
>2859	Identifier	xmax
>2860	Identifier	ray3
>2861	PrimaryExpression	3
>2862	Identifier	ray3
>2863	IdentifierDeclType	double [ 3 ]
>2864	IdentifierDeclStatement	 
>2865	IdentifierDecl	ray2 [ 3 ] = { xmax - 0.5 * w , ymin - 0.5 * h , - f }
>2866	AssignmentExpr	ray2 [ 3 ] = { xmax - 0.5 * w , ymin - 0.5 * h , - f }
>2867	InitializerList	xmax - 0.5 * w
>2868	UnaryOp	- f
>2869	Identifier	f
>2870	UnaryOperator	-
>2871	AdditiveExpression	ymin - 0.5 * h
>2872	MultiplicativeExpression	0.5 * h
>2873	Identifier	h
>2874	PrimaryExpression	0.5
>2875	Identifier	ymin
>2876	AdditiveExpression	xmax - 0.5 * w
>2877	MultiplicativeExpression	0.5 * w
>2878	Identifier	w
>2879	PrimaryExpression	0.5
>2880	Identifier	xmax
>2881	Identifier	ray2
>2882	PrimaryExpression	3
>2883	Identifier	ray2
>2884	IdentifierDeclType	double [ 3 ]
>2885	IdentifierDeclStatement	 
>2886	IdentifierDecl	ray1 [ 3 ] = { xmin - 0.5 * w , ymin - 0.5 * h , - f }
>2887	AssignmentExpr	ray1 [ 3 ] = { xmin - 0.5 * w , ymin - 0.5 * h , - f }
>2888	InitializerList	xmin - 0.5 * w
>2889	UnaryOp	- f
>2890	Identifier	f
>2891	UnaryOperator	-
>2892	AdditiveExpression	ymin - 0.5 * h
>2893	MultiplicativeExpression	0.5 * h
>2894	Identifier	h
>2895	PrimaryExpression	0.5
>2896	Identifier	ymin
>2897	AdditiveExpression	xmin - 0.5 * w
>2898	MultiplicativeExpression	0.5 * w
>2899	Identifier	w
>2900	PrimaryExpression	0.5
>2901	Identifier	xmin
>2902	Identifier	ray1
>2903	PrimaryExpression	3
>2904	Identifier	ray1
>2905	IdentifierDeclType	double [ 3 ]
>2906	ExpressionStatement	 
>2907	CallExpression	matrix_scale ( 3 , 1 , center , - 1.0 , center )
>2908	ArgumentList	3
>2909	Argument	center
>2910	Identifier	center
>2911	Argument	- 1.0
>2912	UnaryOp	- 1.0
>2913	PrimaryExpression	1.0
>2914	UnaryOperator	-
>2915	Argument	center
>2916	Identifier	center
>2917	Argument	1
>2918	PrimaryExpression	1
>2919	Argument	3
>2920	PrimaryExpression	3
>2921	Callee	matrix_scale
>2922	Identifier	matrix_scale
>2923	ExpressionStatement	 
>2924	CallExpression	matrix_product ( 3 , 3 , 3 , 1 , Rt , t , center )
>2925	ArgumentList	3
>2926	Argument	center
>2927	Identifier	center
>2928	Argument	t
>2929	Identifier	t
>2930	Argument	Rt
>2931	Identifier	Rt
>2932	Argument	1
>2933	PrimaryExpression	1
>2934	Argument	3
>2935	PrimaryExpression	3
>2936	Argument	3
>2937	PrimaryExpression	3
>2938	Argument	3
>2939	PrimaryExpression	3
>2940	Callee	matrix_product
>2941	Identifier	matrix_product
>2942	IdentifierDeclStatement	 
>2943	IdentifierDecl	center [ 3 ]
>2944	PrimaryExpression	3
>2945	Identifier	center
>2946	IdentifierDeclType	double [ 3 ]
>2947	ExpressionStatement	 
>2948	CallExpression	matrix_transpose ( 3 , 3 , R , Rt )
>2949	ArgumentList	3
>2950	Argument	Rt
>2951	Identifier	Rt
>2952	Argument	R
>2953	Identifier	R
>2954	Argument	3
>2955	PrimaryExpression	3
>2956	Argument	3
>2957	PrimaryExpression	3
>2958	Callee	matrix_transpose
>2959	Identifier	matrix_transpose
>2960	IdentifierDeclStatement	 
>2961	IdentifierDecl	Rt [ 9 ]
>2962	PrimaryExpression	9
>2963	Identifier	Rt
>2964	IdentifierDeclType	double [ 9 ]
>2965	IfStatement	if ( xmax > w || ymax > h || xmax < - 1 || ymax < - 1 )
>2966	ExpressionStatement	 
>2967	CallExpression	printf ( \"Error in bounding box data w=%d h=%d xmin=%d xmax=%d ymin=%d ymax=%d\n\" , w , h , xmin , xmax , ymin , \
>2968	ArgumentList	\"Error in bounding box data w=%d h=%d xmin=%d xmax=%d ymin=%d ymax=%d\n\"
>2969	Argument	ymax
>2970	Identifier	ymax
>2971	Argument	ymin
>2972	Identifier	ymin
>2973	Argument	xmax
>2974	Identifier	xmax
>2975	Argument	xmin
>2976	Identifier	xmin
>2977	Argument	h
>2978	Identifier	h
>2979	Argument	w
>2980	Identifier	w
>2981	Argument	\"Error in bounding box data w=%d h=%d xmin=%d xmax=%d ymin=%d ymax=%d\n\"
>2982	PrimaryExpression	\"Error in bounding box data w=%d h=%d xmin=%d xmax=%d ymin=%d ymax=%d\n\"
>2983	Callee	printf
>2984	Identifier	printf
>2985	Condition	 
>2986	OrExpression	xmax > w || ymax > h || xmax < - 1 || ymax < - 1
>2987	OrExpression	ymax > h || xmax < - 1 || ymax < - 1
>2988	OrExpression	xmax < - 1 || ymax < - 1
>2989	RelationalExpression	ymax < - 1
>2990	UnaryOp	- 1
>2991	PrimaryExpression	1
>2992	UnaryOperator	-
>2993	Identifier	ymax
>2994	RelationalExpression	xmax < - 1
>2995	UnaryOp	- 1
>2996	PrimaryExpression	1
>2997	UnaryOperator	-
>2998	Identifier	xmax
>2999	RelationalExpression	ymax > h
>3000	Identifier	h
>3001	Identifier	ymax
>3002	RelationalExpression	xmax > w
>3003	Identifier	w
>3004	Identifier	xmax
>3005	IfStatement	if ( ymax == - 1 )
>3006	ExpressionStatement	 
>3007	AssignmentExpr	ymax = h
>3008	Identifier	h
>3009	Identifier	ymax
>3010	Condition	 
>3011	EqualityExpression	ymax == - 1
>3012	UnaryOp	- 1
>3013	PrimaryExpression	1
>3014	UnaryOperator	-
>3015	Identifier	ymax
>3016	IfStatement	if ( xmax == - 1 )
>3017	ExpressionStatement	 
>3018	AssignmentExpr	xmax = w
>3019	Identifier	w
>3020	Identifier	xmax
>3021	Condition	 
>3022	EqualityExpression	xmax == - 1
>3023	UnaryOp	- 1
>3024	PrimaryExpression	1
>3025	UnaryOperator	-
>3026	Identifier	xmax
>3054	FunctionDef	PlaneData 
>3055	ParameterList	FILE * f
>3056	Parameter	 
>3057	Identifier	f
>3058	ParameterType	FILE *
>3059	ReturnType	void
>3060	CompoundStatement	 
>3061	ExpressionStatement	 
>3062	CallExpression	fprintf ( f , \"\n\" )
>3063	ArgumentList	f
>3064	Argument	\"\n\"
>3065	PrimaryExpression	\"\n\"
>3066	Argument	f
>3067	Identifier	f
>3068	Callee	fprintf
>3069	Identifier	fprintf
>3070	ForStatement	for ( int i = 0 ; i < num_points ; i ++ )
>3071	CompoundStatement	 
>3072	ExpressionStatement	 
>3073	CallExpression	m_points . push_back ( point )
>3074	ArgumentList	point
>3075	Argument	point
>3076	Identifier	point
>3077	Callee	m_points . push_back
>3078	MemberAccess	m_points . push_back
>3079	Identifier	push_back
>3080	Identifier	m_points
>3081	ExpressionStatement	 
>3082	CallExpression	fscanf ( f , \"%d\" , & point )
>3083	ArgumentList	f
>3084	Argument	& point
>3085	UnaryOp	& point
>3086	Identifier	point
>3087	UnaryOperator	&
>3088	Argument	\"%d\"
>3089	PrimaryExpression	\"%d\"
>3090	Argument	f
>3091	Identifier	f
>3092	Callee	fscanf
>3093	Identifier	fscanf
>3094	IdentifierDeclStatement	 
>3095	IdentifierDecl	point
>3096	Identifier	point
>3097	IdentifierDeclType	int
>3098	IncDecOp	 
>3099	IncDec	++
>3100	Identifier	i
>3101	Condition	 
>3102	RelationalExpression	i < num_points
>3103	Identifier	num_points
>3104	Identifier	i
>3105	ForInit	 
>3106	IdentifierDeclStatement	int i = 0 ;
>3107	IdentifierDecl	i = 0
>3108	AssignmentExpr	i = 0
>3109	PrimaryExpression	0
>3110	Identifier	i
>3111	Identifier	i
>3112	IdentifierDeclType	int
>3113	ExpressionStatement	 
>3114	CallExpression	fscanf ( f , \"%d\" , & num_points )
>3115	ArgumentList	f
>3116	Argument	& num_points
>3117	UnaryOp	& num_points
>3118	Identifier	num_points
>3119	UnaryOperator	&
>3120	Argument	\"%d\"
>3121	PrimaryExpression	\"%d\"
>3122	Argument	f
>3123	Identifier	f
>3124	Callee	fscanf
>3125	Identifier	fscanf
>3126	IdentifierDeclStatement	 
>3127	IdentifierDecl	num_points
>3128	Identifier	num_points
>3129	IdentifierDeclType	int
>3130	ForStatement	for ( int i = 0 ; i < num_views ; i ++ )
>3131	CompoundStatement	 
>3132	ExpressionStatement	 
>3133	CallExpression	m_views . push_back ( view )
>3134	ArgumentList	view
>3135	Argument	view
>3136	Identifier	view
>3137	Callee	m_views . push_back
>3138	MemberAccess	m_views . push_back
>3139	Identifier	push_back
>3140	Identifier	m_views
>3141	ExpressionStatement	 
>3142	CallExpression	fscanf ( f , \"%d\" , & view )
>3143	ArgumentList	f
>3144	Argument	& view
>3145	UnaryOp	& view
>3146	Identifier	view
>3147	UnaryOperator	&
>3148	Argument	\"%d\"
>3149	PrimaryExpression	\"%d\"
>3150	Argument	f
>3151	Identifier	f
>3152	Callee	fscanf
>3153	Identifier	fscanf
>3154	IdentifierDeclStatement	 
>3155	IdentifierDecl	view
>3156	Identifier	view
>3157	IdentifierDeclType	int
>3158	IncDecOp	 
>3159	IncDec	++
>3160	Identifier	i
>3161	Condition	 
>3162	RelationalExpression	i < num_views
>3163	Identifier	num_views
>3164	Identifier	i
>3165	ForInit	 
>3166	IdentifierDeclStatement	int i = 0 ;
>3167	IdentifierDecl	i = 0
>3168	AssignmentExpr	i = 0
>3169	PrimaryExpression	0
>3170	Identifier	i
>3171	Identifier	i
>3172	IdentifierDeclType	int
>3173	ExpressionStatement	 
>3174	CallExpression	fscanf ( f , \"%d\" , & num_views )
>3175	ArgumentList	f
>3176	Argument	& num_views
>3177	UnaryOp	& num_views
>3178	Identifier	num_views
>3179	UnaryOperator	&
>3180	Argument	\"%d\"
>3181	PrimaryExpression	\"%d\"
>3182	Argument	f
>3183	Identifier	f
>3184	Callee	fscanf
>3185	Identifier	fscanf
>3186	IdentifierDeclStatement	 
>3187	IdentifierDecl	num_views
>3188	Identifier	num_views
>3189	IdentifierDeclType	int
>3190	ExpressionStatement	 
>3191	CallExpression	fscanf ( f , \"%lf %lf\" , & m_u_extent , & m_v_extent )
>3192	ArgumentList	f
>3193	Argument	& m_v_extent
>3194	UnaryOp	& m_v_extent
>3195	Identifier	m_v_extent
>3196	UnaryOperator	&
>3197	Argument	& m_u_extent
>3198	UnaryOp	& m_u_extent
>3199	Identifier	m_u_extent
>3200	UnaryOperator	&
>3201	Argument	\"%lf %lf\"
>3202	PrimaryExpression	\"%lf %lf\"
>3203	Argument	f
>3204	Identifier	f
>3205	Callee	fscanf
>3206	Identifier	fscanf
>3207	ExpressionStatement	 
>3208	CallExpression	fscanf ( f , \"%lf %lf %lf %lf\" , m_color + 0 , m_color + 1 , m_color + 2 , m_color + 3 )
>3209	ArgumentList	f
>3210	Argument	m_color + 3
>3211	AdditiveExpression	m_color + 3
>3212	PrimaryExpression	3
>3213	Identifier	m_color
>3214	Argument	m_color + 2
>3215	AdditiveExpression	m_color + 2
>3216	PrimaryExpression	2
>3217	Identifier	m_color
>3218	Argument	m_color + 1
>3219	AdditiveExpression	m_color + 1
>3220	PrimaryExpression	1
>3221	Identifier	m_color
>3222	Argument	m_color + 0
>3223	AdditiveExpression	m_color + 0
>3224	PrimaryExpression	0
>3225	Identifier	m_color
>3226	Argument	\"%lf %lf %lf %lf\"
>3227	PrimaryExpression	\"%lf %lf %lf %lf\"
>3228	Argument	f
>3229	Identifier	f
>3230	Callee	fscanf
>3231	Identifier	fscanf
>3232	ExpressionStatement	 
>3233	CallExpression	fscanf ( f , \"%lf %lf %lf\" , m_vaxis + 0 , m_vaxis + 1 , m_vaxis + 2 )
>3234	ArgumentList	f
>3235	Argument	m_vaxis + 2
>3236	AdditiveExpression	m_vaxis + 2
>3237	PrimaryExpression	2
>3238	Identifier	m_vaxis
>3239	Argument	m_vaxis + 1
>3240	AdditiveExpression	m_vaxis + 1
>3241	PrimaryExpression	1
>3242	Identifier	m_vaxis
>3243	Argument	m_vaxis + 0
>3244	AdditiveExpression	m_vaxis + 0
>3245	PrimaryExpression	0
>3246	Identifier	m_vaxis
>3247	Argument	\"%lf %lf %lf\"
>3248	PrimaryExpression	\"%lf %lf %lf\"
>3249	Argument	f
>3250	Identifier	f
>3251	Callee	fscanf
>3252	Identifier	fscanf
>3253	ExpressionStatement	 
>3254	CallExpression	fscanf ( f , \"%lf %lf %lf\" , m_uaxis + 0 , m_uaxis + 1 , m_uaxis + 2 )
>3255	ArgumentList	f
>3256	Argument	m_uaxis + 2
>3257	AdditiveExpression	m_uaxis + 2
>3258	PrimaryExpression	2
>3259	Identifier	m_uaxis
>3260	Argument	m_uaxis + 1
>3261	AdditiveExpression	m_uaxis + 1
>3262	PrimaryExpression	1
>3263	Identifier	m_uaxis
>3264	Argument	m_uaxis + 0
>3265	AdditiveExpression	m_uaxis + 0
>3266	PrimaryExpression	0
>3267	Identifier	m_uaxis
>3268	Argument	\"%lf %lf %lf\"
>3269	PrimaryExpression	\"%lf %lf %lf\"
>3270	Argument	f
>3271	Identifier	f
>3272	Callee	fscanf
>3273	Identifier	fscanf
>3274	ExpressionStatement	 
>3275	CallExpression	fscanf ( f , \"%lf %lf %lf\" , m_origin + 0 , m_origin + 1 , m_origin + 2 )
>3276	ArgumentList	f
>3277	Argument	m_origin + 2
>3278	AdditiveExpression	m_origin + 2
>3279	PrimaryExpression	2
>3280	Identifier	m_origin
>3281	Argument	m_origin + 1
>3282	AdditiveExpression	m_origin + 1
>3283	PrimaryExpression	1
>3284	Identifier	m_origin
>3285	Argument	m_origin + 0
>3286	AdditiveExpression	m_origin + 0
>3287	PrimaryExpression	0
>3288	Identifier	m_origin
>3289	Argument	\"%lf %lf %lf\"
>3290	PrimaryExpression	\"%lf %lf %lf\"
>3291	Argument	f
>3292	Identifier	f
>3293	Callee	fscanf
>3294	Identifier	fscanf
>3295	ExpressionStatement	 
>3296	CallExpression	fscanf ( f , \"%lf %lf %lf %lf\" , m_normal + 0 , m_normal + 1 , m_normal + 2 , & m_dist )
>3297	ArgumentList	f
>3298	Argument	& m_dist
>3299	UnaryOp	& m_dist
>3300	Identifier	m_dist
>3301	UnaryOperator	&
>3302	Argument	m_normal + 2
>3303	AdditiveExpression	m_normal + 2
>3304	PrimaryExpression	2
>3305	Identifier	m_normal
>3306	Argument	m_normal + 1
>3307	AdditiveExpression	m_normal + 1
>3308	PrimaryExpression	1
>3309	Identifier	m_normal
>3310	Argument	m_normal + 0
>3311	AdditiveExpression	m_normal + 0
>3312	PrimaryExpression	0
>3313	Identifier	m_normal
>3314	Argument	\"%lf %lf %lf %lf\"
>3315	PrimaryExpression	\"%lf %lf %lf %lf\"
>3316	Argument	f
>3317	Identifier	f
>3318	Callee	fscanf
>3319	Identifier	fscanf
>3343	FunctionDef	PlaneData 
>3344	ParameterList	FILE * f
>3345	Parameter	 
>3346	Identifier	f
>3347	ParameterType	FILE *
>3348	ReturnType	void
>3349	CompoundStatement	 
>3350	ExpressionStatement	 
>3351	CallExpression	fprintf ( f , \"\n\" )
>3352	ArgumentList	f
>3353	Argument	\"\n\"
>3354	PrimaryExpression	\"\n\"
>3355	Argument	f
>3356	Identifier	f
>3357	Callee	fprintf
>3358	Identifier	fprintf
>3359	ForStatement	for ( int i = 0 ; i < ( int ) m_points . size ( ) ; i ++ )
>3360	CompoundStatement	 
>3361	ExpressionStatement	 
>3362	CallExpression	fprintf ( f , \"%d \" , m_points [ i ] )
>3363	ArgumentList	f
>3364	Argument	m_points [ i ]
>3365	ArrayIndexing	m_points [ i ]
>3366	Identifier	i
>3367	Identifier	m_points
>3368	Argument	\"%d \"
>3369	PrimaryExpression	\"%d \"
>3370	Argument	f
>3371	Identifier	f
>3372	Callee	fprintf
>3373	Identifier	fprintf
>3374	IncDecOp	 
>3375	IncDec	++
>3376	Identifier	i
>3377	Condition	 
>3378	RelationalExpression	i < ( int ) m_points . size ( )
>3379	CastExpression	( int ) m_points . size ( )
>3380	CallExpression	m_points . size ( )
>3381	ArgumentList	 
>3382	Callee	m_points . size
>3383	MemberAccess	m_points . size
>3384	Identifier	size
>3385	Identifier	m_points
>3386	CastTarget	int
>3387	Identifier	i
>3388	ForInit	 
>3389	IdentifierDeclStatement	int i = 0 ;
>3390	IdentifierDecl	i = 0
>3391	AssignmentExpr	i = 0
>3392	PrimaryExpression	0
>3393	Identifier	i
>3394	Identifier	i
>3395	IdentifierDeclType	int
>3396	ExpressionStatement	 
>3397	CallExpression	fprintf ( f , \"%d\n\" , ( int ) m_points . size ( ) )
>3398	ArgumentList	f
>3399	Argument	( int ) m_points . size ( )
>3400	CastExpression	( int ) m_points . size ( )
>3401	CallExpression	m_points . size ( )
>3402	ArgumentList	 
>3403	Callee	m_points . size
>3404	MemberAccess	m_points . size
>3405	Identifier	size
>3406	Identifier	m_points
>3407	CastTarget	int
>3408	Argument	\"%d\n\"
>3409	PrimaryExpression	\"%d\n\"
>3410	Argument	f
>3411	Identifier	f
>3412	Callee	fprintf
>3413	Identifier	fprintf
>3414	ExpressionStatement	 
>3415	CallExpression	fprintf ( f , \"\n\" )
>3416	ArgumentList	f
>3417	Argument	\"\n\"
>3418	PrimaryExpression	\"\n\"
>3419	Argument	f
>3420	Identifier	f
>3421	Callee	fprintf
>3422	Identifier	fprintf
>3423	ForStatement	for ( int i = 0 ; i < ( int ) m_views . size ( ) ; i ++ )
>3424	CompoundStatement	 
>3425	ExpressionStatement	 
>3426	CallExpression	fprintf ( f , \"%d \" , m_views [ i ] )
>3427	ArgumentList	f
>3428	Argument	m_views [ i ]
>3429	ArrayIndexing	m_views [ i ]
>3430	Identifier	i
>3431	Identifier	m_views
>3432	Argument	\"%d \"
>3433	PrimaryExpression	\"%d \"
>3434	Argument	f
>3435	Identifier	f
>3436	Callee	fprintf
>3437	Identifier	fprintf
>3438	IncDecOp	 
>3439	IncDec	++
>3440	Identifier	i
>3441	Condition	 
>3442	RelationalExpression	i < ( int ) m_views . size ( )
>3443	CastExpression	( int ) m_views . size ( )
>3444	CallExpression	m_views . size ( )
>3445	ArgumentList	 
>3446	Callee	m_views . size
>3447	MemberAccess	m_views . size
>3448	Identifier	size
>3449	Identifier	m_views
>3450	CastTarget	int
>3451	Identifier	i
>3452	ForInit	 
>3453	IdentifierDeclStatement	int i = 0 ;
>3454	IdentifierDecl	i = 0
>3455	AssignmentExpr	i = 0
>3456	PrimaryExpression	0
>3457	Identifier	i
>3458	Identifier	i
>3459	IdentifierDeclType	int
>3460	ExpressionStatement	 
>3461	CallExpression	fprintf ( f , \"%d\n\" , ( int ) m_views . size ( ) )
>3462	ArgumentList	f
>3463	Argument	( int ) m_views . size ( )
>3464	CastExpression	( int ) m_views . size ( )
>3465	CallExpression	m_views . size ( )
>3466	ArgumentList	 
>3467	Callee	m_views . size
>3468	MemberAccess	m_views . size
>3469	Identifier	size
>3470	Identifier	m_views
>3471	CastTarget	int
>3472	Argument	\"%d\n\"
>3473	PrimaryExpression	\"%d\n\"
>3474	Argument	f
>3475	Identifier	f
>3476	Callee	fprintf
>3477	Identifier	fprintf
>3478	ExpressionStatement	 
>3479	CallExpression	fprintf ( f , \"%0.6lf %0.6lf\n\" , m_u_extent , m_v_extent )
>3480	ArgumentList	f
>3481	Argument	m_v_extent
>3482	Identifier	m_v_extent
>3483	Argument	m_u_extent
>3484	Identifier	m_u_extent
>3485	Argument	\"%0.6lf %0.6lf\n\"
>3486	PrimaryExpression	\"%0.6lf %0.6lf\n\"
>3487	Argument	f
>3488	Identifier	f
>3489	Callee	fprintf
>3490	Identifier	fprintf
>3491	ExpressionStatement	 
>3492	CallExpression	fprintf ( f , \"%0.6lf %0.6lf %0.6lf %0.6lf\n\" , m_color [ 0 ] , m_color [ 1 ] , m_color [ 2 ] , m_color [ 3 ] )
>3493	ArgumentList	f
>3494	Argument	m_color [ 3 ]
>3495	ArrayIndexing	m_color [ 3 ]
>3496	PrimaryExpression	3
>3497	Identifier	m_color
>3498	Argument	m_color [ 2 ]
>3499	ArrayIndexing	m_color [ 2 ]
>3500	PrimaryExpression	2
>3501	Identifier	m_color
>3502	Argument	m_color [ 1 ]
>3503	ArrayIndexing	m_color [ 1 ]
>3504	PrimaryExpression	1
>3505	Identifier	m_color
>3506	Argument	m_color [ 0 ]
>3507	ArrayIndexing	m_color [ 0 ]
>3508	PrimaryExpression	0
>3509	Identifier	m_color
>3510	Argument	\"%0.6lf %0.6lf %0.6lf %0.6lf\n\"
>3511	PrimaryExpression	\"%0.6lf %0.6lf %0.6lf %0.6lf\n\"
>3512	Argument	f
>3513	Identifier	f
>3514	Callee	fprintf
>3515	Identifier	fprintf
>3516	ExpressionStatement	 
>3517	CallExpression	fprintf ( f , \"%0.6lf %0.6lf %0.6lf\n\" , m_vaxis [ 0 ] , m_vaxis [ 1 ] , m_vaxis [ 2 ] )
>3518	ArgumentList	f
>3519	Argument	m_vaxis [ 2 ]
>3520	ArrayIndexing	m_vaxis [ 2 ]
>3521	PrimaryExpression	2
>3522	Identifier	m_vaxis
>3523	Argument	m_vaxis [ 1 ]
>3524	ArrayIndexing	m_vaxis [ 1 ]
>3525	PrimaryExpression	1
>3526	Identifier	m_vaxis
>3527	Argument	m_vaxis [ 0 ]
>3528	ArrayIndexing	m_vaxis [ 0 ]
>3529	PrimaryExpression	0
>3530	Identifier	m_vaxis
>3531	Argument	\"%0.6lf %0.6lf %0.6lf\n\"
>3532	PrimaryExpression	\"%0.6lf %0.6lf %0.6lf\n\"
>3533	Argument	f
>3534	Identifier	f
>3535	Callee	fprintf
>3536	Identifier	fprintf
>3537	ExpressionStatement	 
>3538	CallExpression	fprintf ( f , \"%0.6lf %0.6lf %0.6lf\n\" , m_uaxis [ 0 ] , m_uaxis [ 1 ] , m_uaxis [ 2 ] )
>3539	ArgumentList	f
>3540	Argument	m_uaxis [ 2 ]
>3541	ArrayIndexing	m_uaxis [ 2 ]
>3542	PrimaryExpression	2
>3543	Identifier	m_uaxis
>3544	Argument	m_uaxis [ 1 ]
>3545	ArrayIndexing	m_uaxis [ 1 ]
>3546	PrimaryExpression	1
>3547	Identifier	m_uaxis
>3548	Argument	m_uaxis [ 0 ]
>3549	ArrayIndexing	m_uaxis [ 0 ]
>3550	PrimaryExpression	0
>3551	Identifier	m_uaxis
>3552	Argument	\"%0.6lf %0.6lf %0.6lf\n\"
>3553	PrimaryExpression	\"%0.6lf %0.6lf %0.6lf\n\"
>3554	Argument	f
>3555	Identifier	f
>3556	Callee	fprintf
>3557	Identifier	fprintf
>3558	ExpressionStatement	 
>3559	CallExpression	fprintf ( f , \"%0.6lf %0.6lf %0.6lf\n\" , m_origin [ 0 ] , m_origin [ 1 ] , m_origin [ 2 ] )
>3560	ArgumentList	f
>3561	Argument	m_origin [ 2 ]
>3562	ArrayIndexing	m_origin [ 2 ]
>3563	PrimaryExpression	2
>3564	Identifier	m_origin
>3565	Argument	m_origin [ 1 ]
>3566	ArrayIndexing	m_origin [ 1 ]
>3567	PrimaryExpression	1
>3568	Identifier	m_origin
>3569	Argument	m_origin [ 0 ]
>3570	ArrayIndexing	m_origin [ 0 ]
>3571	PrimaryExpression	0
>3572	Identifier	m_origin
>3573	Argument	\"%0.6lf %0.6lf %0.6lf\n\"
>3574	PrimaryExpression	\"%0.6lf %0.6lf %0.6lf\n\"
>3575	Argument	f
>3576	Identifier	f
>3577	Callee	fprintf
>3578	Identifier	fprintf
>3579	ExpressionStatement	 
>3580	CallExpression	fprintf ( f , \"%0.6lf %0.6lf %0.6lf %0.6lf\n\" , m_normal [ 0 ] , m_normal [ 1 ] , m_normal [ 2 ] , m_dist )
>3581	ArgumentList	f
>3582	Argument	m_dist
>3583	Identifier	m_dist
>3584	Argument	m_normal [ 2 ]
>3585	ArrayIndexing	m_normal [ 2 ]
>3586	PrimaryExpression	2
>3587	Identifier	m_normal
>3588	Argument	m_normal [ 1 ]
>3589	ArrayIndexing	m_normal [ 1 ]
>3590	PrimaryExpression	1
>3591	Identifier	m_normal
>3592	Argument	m_normal [ 0 ]
>3593	ArrayIndexing	m_normal [ 0 ]
>3594	PrimaryExpression	0
>3595	Identifier	m_normal
>3596	Argument	\"%0.6lf %0.6lf %0.6lf %0.6lf\n\"
>3597	PrimaryExpression	\"%0.6lf %0.6lf %0.6lf %0.6lf\n\"
>3598	Argument	f
>3599	Identifier	f
>3600	Callee	fprintf
>3601	Identifier	fprintf
>3627	FunctionDef	PlaneData 
>3628	ParameterList	 
>3629	ReturnType	void
>3630	CompoundStatement	 
>3631	ExpressionStatement	 
>3632	CallExpression	GLCheckForError ( \"PlaneData
>3633	ArgumentList	\"PlaneData
>3634	Argument	\"PlaneData
>3635	PrimaryExpression	\"PlaneData
>3636	Callee	GLCheckForError
>3637	Identifier	GLCheckForError
>3638	IfStatement	if ( texture )
>3639	ExpressionStatement	 
>3640	CallExpression	glDisable ( GL_TEXTURE_2D )
>3641	ArgumentList	GL_TEXTURE_2D
>3642	Argument	GL_TEXTURE_2D
>3643	Identifier	GL_TEXTURE_2D
>3644	Callee	glDisable
>3645	Identifier	glDisable
>3646	Condition	 
>3647	Identifier	texture
>3648	ExpressionStatement	 
>3649	CallExpression	glEnd ( )
>3650	ArgumentList	 
>3651	Callee	glEnd
>3652	Identifier	glEnd
>3653	ExpressionStatement	 
>3654	CallExpression	glVertex3d ( p3 [ 0 ] , p3 [ 1 ] , p3 [ 2 ] )
>3655	ArgumentList	p3 [ 0 ]
>3656	Argument	p3 [ 2 ]
>3657	ArrayIndexing	p3 [ 2 ]
>3658	PrimaryExpression	2
>3659	Identifier	p3
>3660	Argument	p3 [ 1 ]
>3661	ArrayIndexing	p3 [ 1 ]
>3662	PrimaryExpression	1
>3663	Identifier	p3
>3664	Argument	p3 [ 0 ]
>3665	ArrayIndexing	p3 [ 0 ]
>3666	PrimaryExpression	0
>3667	Identifier	p3
>3668	Callee	glVertex3d
>3669	Identifier	glVertex3d
>3670	IfStatement	if ( texture )
>3671	ExpressionStatement	 
>3672	CallExpression	glTexCoord2d ( minx , maxy )
>3673	ArgumentList	minx
>3674	Argument	maxy
>3675	Identifier	maxy
>3676	Argument	minx
>3677	Identifier	minx
>3678	Callee	glTexCoord2d
>3679	Identifier	glTexCoord2d
>3680	Condition	 
>3681	Identifier	texture
>3682	ExpressionStatement	 
>3683	CallExpression	glVertex3d ( p2 [ 0 ] , p2 [ 1 ] , p2 [ 2 ] )
>3684	ArgumentList	p2 [ 0 ]
>3685	Argument	p2 [ 2 ]
>3686	ArrayIndexing	p2 [ 2 ]
>3687	PrimaryExpression	2
>3688	Identifier	p2
>3689	Argument	p2 [ 1 ]
>3690	ArrayIndexing	p2 [ 1 ]
>3691	PrimaryExpression	1
>3692	Identifier	p2
>3693	Argument	p2 [ 0 ]
>3694	ArrayIndexing	p2 [ 0 ]
>3695	PrimaryExpression	0
>3696	Identifier	p2
>3697	Callee	glVertex3d
>3698	Identifier	glVertex3d
>3699	IfStatement	if ( texture )
>3700	ExpressionStatement	 
>3701	CallExpression	glTexCoord2d ( minx , miny )
>3702	ArgumentList	minx
>3703	Argument	miny
>3704	Identifier	miny
>3705	Argument	minx
>3706	Identifier	minx
>3707	Callee	glTexCoord2d
>3708	Identifier	glTexCoord2d
>3709	Condition	 
>3710	Identifier	texture
>3711	ExpressionStatement	 
>3712	CallExpression	glVertex3d ( p1 [ 0 ] , p1 [ 1 ] , p1 [ 2 ] )
>3713	ArgumentList	p1 [ 0 ]
>3714	Argument	p1 [ 2 ]
>3715	ArrayIndexing	p1 [ 2 ]
>3716	PrimaryExpression	2
>3717	Identifier	p1
>3718	Argument	p1 [ 1 ]
>3719	ArrayIndexing	p1 [ 1 ]
>3720	PrimaryExpression	1
>3721	Identifier	p1
>3722	Argument	p1 [ 0 ]
>3723	ArrayIndexing	p1 [ 0 ]
>3724	PrimaryExpression	0
>3725	Identifier	p1
>3726	Callee	glVertex3d
>3727	Identifier	glVertex3d
>3728	IfStatement	if ( texture )
>3729	ExpressionStatement	 
>3730	CallExpression	glTexCoord2d ( maxx , miny )
>3731	ArgumentList	maxx
>3732	Argument	miny
>3733	Identifier	miny
>3734	Argument	maxx
>3735	Identifier	maxx
>3736	Callee	glTexCoord2d
>3737	Identifier	glTexCoord2d
>3738	Condition	 
>3739	Identifier	texture
>3740	ExpressionStatement	 
>3741	CallExpression	glVertex3d ( p0 [ 0 ] , p0 [ 1 ] , p0 [ 2 ] )
>3742	ArgumentList	p0 [ 0 ]
>3743	Argument	p0 [ 2 ]
>3744	ArrayIndexing	p0 [ 2 ]
>3745	PrimaryExpression	2
>3746	Identifier	p0
>3747	Argument	p0 [ 1 ]
>3748	ArrayIndexing	p0 [ 1 ]
>3749	PrimaryExpression	1
>3750	Identifier	p0
>3751	Argument	p0 [ 0 ]
>3752	ArrayIndexing	p0 [ 0 ]
>3753	PrimaryExpression	0
>3754	Identifier	p0
>3755	Callee	glVertex3d
>3756	Identifier	glVertex3d
>3757	IfStatement	if ( texture )
>3758	ExpressionStatement	 
>3759	CallExpression	glTexCoord2d ( maxx , maxy )
>3760	ArgumentList	maxx
>3761	Argument	maxy
>3762	Identifier	maxy
>3763	Argument	maxx
>3764	Identifier	maxx
>3765	Callee	glTexCoord2d
>3766	Identifier	glTexCoord2d
>3767	Condition	 
>3768	Identifier	texture
>3769	ExpressionStatement	 
>3770	CallExpression	glBegin ( GL_QUADS )
>3771	ArgumentList	GL_QUADS
>3772	Argument	GL_QUADS
>3773	Identifier	GL_QUADS
>3774	Callee	glBegin
>3775	Identifier	glBegin
>3776	IdentifierDeclStatement	 
>3777	IdentifierDecl	maxy = m_bounds . m_max_y
>3778	AssignmentExpr	maxy = m_bounds . m_max_y
>3779	MemberAccess	m_bounds . m_max_y
>3780	Identifier	m_max_y
>3781	Identifier	m_bounds
>3782	Identifier	maxy
>3783	Identifier	maxy
>3784	IdentifierDeclType	double
>3785	IdentifierDeclStatement	 
>3786	IdentifierDecl	miny = m_bounds . m_min_y
>3787	AssignmentExpr	miny = m_bounds . m_min_y
>3788	MemberAccess	m_bounds . m_min_y
>3789	Identifier	m_min_y
>3790	Identifier	m_bounds
>3791	Identifier	miny
>3792	Identifier	miny
>3793	IdentifierDeclType	double
>3794	IdentifierDeclStatement	 
>3795	IdentifierDecl	maxx = m_bounds . m_max_x
>3796	AssignmentExpr	maxx = m_bounds . m_max_x
>3797	MemberAccess	m_bounds . m_max_x
>3798	Identifier	m_max_x
>3799	Identifier	m_bounds
>3800	Identifier	maxx
>3801	Identifier	maxx
>3802	IdentifierDeclType	double
>3803	IdentifierDeclStatement	 
>3804	IdentifierDecl	minx = m_bounds . m_min_x
>3805	AssignmentExpr	minx = m_bounds . m_min_x
>3806	MemberAccess	m_bounds . m_min_x
>3807	Identifier	m_min_x
>3808	Identifier	m_bounds
>3809	Identifier	minx
>3810	Identifier	minx
>3811	IdentifierDeclType	double
>3812	IfStatement	if ( ! texture )
>3813	ElseStatement	else
>3814	ExpressionStatement	 
>3815	CallExpression	glColor4d ( 1.0 , 1.0 , 1.0 , 0.3 )
>3816	ArgumentList	1.0
>3817	Argument	0.3
>3818	PrimaryExpression	0.3
>3819	Argument	1.0
>3820	PrimaryExpression	1.0
>3821	Argument	1.0
>3822	PrimaryExpression	1.0
>3823	Argument	1.0
>3824	PrimaryExpression	1.0
>3825	Callee	glColor4d
>3826	Identifier	glColor4d
>3827	ExpressionStatement	 
>3828	CallExpression	glColor4dv ( m_color )
>3829	ArgumentList	m_color
>3830	Argument	m_color
>3831	Identifier	m_color
>3832	Callee	glColor4dv
>3833	Identifier	glColor4dv
>3834	Condition	 
>3835	UnaryOp	! texture
>3836	Identifier	texture
>3837	UnaryOperator	!
>3838	IfStatement	if ( texture )
>3839	CompoundStatement	 
>3840	ExpressionStatement	 
>3841	CallExpression	glBindTexture ( GL_TEXTURE_2D , m_texture_index )
>3842	ArgumentList	GL_TEXTURE_2D
>3843	Argument	m_texture_index
>3844	Identifier	m_texture_index
>3845	Argument	GL_TEXTURE_2D
>3846	Identifier	GL_TEXTURE_2D
>3847	Callee	glBindTexture
>3848	Identifier	glBindTexture
>3849	ExpressionStatement	 
>3850	CallExpression	glEnable ( GL_TEXTURE_2D )
>3851	ArgumentList	GL_TEXTURE_2D
>3852	Argument	GL_TEXTURE_2D
>3853	Identifier	GL_TEXTURE_2D
>3854	Callee	glEnable
>3855	Identifier	glEnable
>3856	Condition	 
>3857	Identifier	texture
>3858	IdentifierDeclStatement	 
>3859	IdentifierDecl	texture = ( m_texture_index != - 1 )
>3860	AssignmentExpr	texture = ( m_texture_index != - 1 )
>3861	EqualityExpression	m_texture_index != - 1
>3862	UnaryOp	- 1
>3863	PrimaryExpression	1
>3864	UnaryOperator	-
>3865	Identifier	m_texture_index
>3866	Identifier	texture
>3867	Identifier	texture
>3868	IdentifierDeclType	bool
>3869	ExpressionStatement	 
>3870	AssignmentExpr	p3 [ 2 ] = m_origin [ 2 ] - u_scale [ 2 ] + v_scale [ 2 ]
>3871	AdditiveExpression	m_origin [ 2 ] - u_scale [ 2 ] + v_scale [ 2 ]
>3872	AdditiveExpression	u_scale [ 2 ] + v_scale [ 2 ]
>3873	ArrayIndexing	v_scale [ 2 ]
>3874	PrimaryExpression	2
>3875	Identifier	v_scale
>3876	ArrayIndexing	u_scale [ 2 ]
>3877	PrimaryExpression	2
>3878	Identifier	u_scale
>3879	ArrayIndexing	m_origin [ 2 ]
>3880	PrimaryExpression	2
>3881	Identifier	m_origin
>3882	ArrayIndexing	p3 [ 2 ]
>3883	PrimaryExpression	2
>3884	Identifier	p3
>3885	ExpressionStatement	 
>3886	AssignmentExpr	p3 [ 1 ] = m_origin [ 1 ] - u_scale [ 1 ] + v_scale [ 1 ]
>3887	AdditiveExpression	m_origin [ 1 ] - u_scale [ 1 ] + v_scale [ 1 ]
>3888	AdditiveExpression	u_scale [ 1 ] + v_scale [ 1 ]
>3889	ArrayIndexing	v_scale [ 1 ]
>3890	PrimaryExpression	1
>3891	Identifier	v_scale
>3892	ArrayIndexing	u_scale [ 1 ]
>3893	PrimaryExpression	1
>3894	Identifier	u_scale
>3895	ArrayIndexing	m_origin [ 1 ]
>3896	PrimaryExpression	1
>3897	Identifier	m_origin
>3898	ArrayIndexing	p3 [ 1 ]
>3899	PrimaryExpression	1
>3900	Identifier	p3
>3901	ExpressionStatement	 
>3902	AssignmentExpr	p3 [ 0 ] = m_origin [ 0 ] - u_scale [ 0 ] + v_scale [ 0 ]
>3903	AdditiveExpression	m_origin [ 0 ] - u_scale [ 0 ] + v_scale [ 0 ]
>3904	AdditiveExpression	u_scale [ 0 ] + v_scale [ 0 ]
>3905	ArrayIndexing	v_scale [ 0 ]
>3906	PrimaryExpression	0
>3907	Identifier	v_scale
>3908	ArrayIndexing	u_scale [ 0 ]
>3909	PrimaryExpression	0
>3910	Identifier	u_scale
>3911	ArrayIndexing	m_origin [ 0 ]
>3912	PrimaryExpression	0
>3913	Identifier	m_origin
>3914	ArrayIndexing	p3 [ 0 ]
>3915	PrimaryExpression	0
>3916	Identifier	p3
>3917	ExpressionStatement	 
>3918	AssignmentExpr	p2 [ 2 ] = m_origin [ 2 ] - u_scale [ 2 ] - v_scale [ 2 ]
>3919	AdditiveExpression	m_origin [ 2 ] - u_scale [ 2 ] - v_scale [ 2 ]
>3920	AdditiveExpression	u_scale [ 2 ] - v_scale [ 2 ]
>3921	ArrayIndexing	v_scale [ 2 ]
>3922	PrimaryExpression	2
>3923	Identifier	v_scale
>3924	ArrayIndexing	u_scale [ 2 ]
>3925	PrimaryExpression	2
>3926	Identifier	u_scale
>3927	ArrayIndexing	m_origin [ 2 ]
>3928	PrimaryExpression	2
>3929	Identifier	m_origin
>3930	ArrayIndexing	p2 [ 2 ]
>3931	PrimaryExpression	2
>3932	Identifier	p2
>3933	ExpressionStatement	 
>3934	AssignmentExpr	p2 [ 1 ] = m_origin [ 1 ] - u_scale [ 1 ] - v_scale [ 1 ]
>3935	AdditiveExpression	m_origin [ 1 ] - u_scale [ 1 ] - v_scale [ 1 ]
>3936	AdditiveExpression	u_scale [ 1 ] - v_scale [ 1 ]
>3937	ArrayIndexing	v_scale [ 1 ]
>3938	PrimaryExpression	1
>3939	Identifier	v_scale
>3940	ArrayIndexing	u_scale [ 1 ]
>3941	PrimaryExpression	1
>3942	Identifier	u_scale
>3943	ArrayIndexing	m_origin [ 1 ]
>3944	PrimaryExpression	1
>3945	Identifier	m_origin
>3946	ArrayIndexing	p2 [ 1 ]
>3947	PrimaryExpression	1
>3948	Identifier	p2
>3949	ExpressionStatement	 
>3950	AssignmentExpr	p2 [ 0 ] = m_origin [ 0 ] - u_scale [ 0 ] - v_scale [ 0 ]
>3951	AdditiveExpression	m_origin [ 0 ] - u_scale [ 0 ] - v_scale [ 0 ]
>3952	AdditiveExpression	u_scale [ 0 ] - v_scale [ 0 ]
>3953	ArrayIndexing	v_scale [ 0 ]
>3954	PrimaryExpression	0
>3955	Identifier	v_scale
>3956	ArrayIndexing	u_scale [ 0 ]
>3957	PrimaryExpression	0
>3958	Identifier	u_scale
>3959	ArrayIndexing	m_origin [ 0 ]
>3960	PrimaryExpression	0
>3961	Identifier	m_origin
>3962	ArrayIndexing	p2 [ 0 ]
>3963	PrimaryExpression	0
>3964	Identifier	p2
>3965	ExpressionStatement	 
>3966	AssignmentExpr	p1 [ 2 ] = m_origin [ 2 ] + u_scale [ 2 ] - v_scale [ 2 ]
>3967	AdditiveExpression	m_origin [ 2 ] + u_scale [ 2 ] - v_scale [ 2 ]
>3968	AdditiveExpression	u_scale [ 2 ] - v_scale [ 2 ]
>3969	ArrayIndexing	v_scale [ 2 ]
>3970	PrimaryExpression	2
>3971	Identifier	v_scale
>3972	ArrayIndexing	u_scale [ 2 ]
>3973	PrimaryExpression	2
>3974	Identifier	u_scale
>3975	ArrayIndexing	m_origin [ 2 ]
>3976	PrimaryExpression	2
>3977	Identifier	m_origin
>3978	ArrayIndexing	p1 [ 2 ]
>3979	PrimaryExpression	2
>3980	Identifier	p1
>3981	ExpressionStatement	 
>3982	AssignmentExpr	p1 [ 1 ] = m_origin [ 1 ] + u_scale [ 1 ] - v_scale [ 1 ]
>3983	AdditiveExpression	m_origin [ 1 ] + u_scale [ 1 ] - v_scale [ 1 ]
>3984	AdditiveExpression	u_scale [ 1 ] - v_scale [ 1 ]
>3985	ArrayIndexing	v_scale [ 1 ]
>3986	PrimaryExpression	1
>3987	Identifier	v_scale
>3988	ArrayIndexing	u_scale [ 1 ]
>3989	PrimaryExpression	1
>3990	Identifier	u_scale
>3991	ArrayIndexing	m_origin [ 1 ]
>3992	PrimaryExpression	1
>3993	Identifier	m_origin
>3994	ArrayIndexing	p1 [ 1 ]
>3995	PrimaryExpression	1
>3996	Identifier	p1
>3997	ExpressionStatement	 
>3998	AssignmentExpr	p1 [ 0 ] = m_origin [ 0 ] + u_scale [ 0 ] - v_scale [ 0 ]
>3999	AdditiveExpression	m_origin [ 0 ] + u_scale [ 0 ] - v_scale [ 0 ]
>4000	AdditiveExpression	u_scale [ 0 ] - v_scale [ 0 ]
>4001	ArrayIndexing	v_scale [ 0 ]
>4002	PrimaryExpression	0
>4003	Identifier	v_scale
>4004	ArrayIndexing	u_scale [ 0 ]
>4005	PrimaryExpression	0
>4006	Identifier	u_scale
>4007	ArrayIndexing	m_origin [ 0 ]
>4008	PrimaryExpression	0
>4009	Identifier	m_origin
>4010	ArrayIndexing	p1 [ 0 ]
>4011	PrimaryExpression	0
>4012	Identifier	p1
>4013	ExpressionStatement	 
>4014	AssignmentExpr	p0 [ 2 ] = m_origin [ 2 ] + u_scale [ 2 ] + v_scale [ 2 ]
>4015	AdditiveExpression	m_origin [ 2 ] + u_scale [ 2 ] + v_scale [ 2 ]
>4016	AdditiveExpression	u_scale [ 2 ] + v_scale [ 2 ]
>4017	ArrayIndexing	v_scale [ 2 ]
>4018	PrimaryExpression	2
>4019	Identifier	v_scale
>4020	ArrayIndexing	u_scale [ 2 ]
>4021	PrimaryExpression	2
>4022	Identifier	u_scale
>4023	ArrayIndexing	m_origin [ 2 ]
>4024	PrimaryExpression	2
>4025	Identifier	m_origin
>4026	ArrayIndexing	p0 [ 2 ]
>4027	PrimaryExpression	2
>4028	Identifier	p0
>4029	ExpressionStatement	 
>4030	AssignmentExpr	p0 [ 1 ] = m_origin [ 1 ] + u_scale [ 1 ] + v_scale [ 1 ]
>4031	AdditiveExpression	m_origin [ 1 ] + u_scale [ 1 ] + v_scale [ 1 ]
>4032	AdditiveExpression	u_scale [ 1 ] + v_scale [ 1 ]
>4033	ArrayIndexing	v_scale [ 1 ]
>4034	PrimaryExpression	1
>4035	Identifier	v_scale
>4036	ArrayIndexing	u_scale [ 1 ]
>4037	PrimaryExpression	1
>4038	Identifier	u_scale
>4039	ArrayIndexing	m_origin [ 1 ]
>4040	PrimaryExpression	1
>4041	Identifier	m_origin
>4042	ArrayIndexing	p0 [ 1 ]
>4043	PrimaryExpression	1
>4044	Identifier	p0
>4045	ExpressionStatement	 
>4046	AssignmentExpr	p0 [ 0 ] = m_origin [ 0 ] + u_scale [ 0 ] + v_scale [ 0 ]
>4047	AdditiveExpression	m_origin [ 0 ] + u_scale [ 0 ] + v_scale [ 0 ]
>4048	AdditiveExpression	u_scale [ 0 ] + v_scale [ 0 ]
>4049	ArrayIndexing	v_scale [ 0 ]
>4050	PrimaryExpression	0
>4051	Identifier	v_scale
>4052	ArrayIndexing	u_scale [ 0 ]
>4053	PrimaryExpression	0
>4054	Identifier	u_scale
>4055	ArrayIndexing	m_origin [ 0 ]
>4056	PrimaryExpression	0
>4057	Identifier	m_origin
>4058	ArrayIndexing	p0 [ 0 ]
>4059	PrimaryExpression	0
>4060	Identifier	p0
>4061	ExpressionStatement	 
>4062	CallExpression	matrix_scale ( 3 , 1 , v_scale , m_v_extent , v_scale )
>4063	ArgumentList	3
>4064	Argument	v_scale
>4065	Identifier	v_scale
>4066	Argument	m_v_extent
>4067	Identifier	m_v_extent
>4068	Argument	v_scale
>4069	Identifier	v_scale
>4070	Argument	1
>4071	PrimaryExpression	1
>4072	Argument	3
>4073	PrimaryExpression	3
>4074	Callee	matrix_scale
>4075	Identifier	matrix_scale
>4076	ExpressionStatement	 
>4077	CallExpression	matrix_scale ( 3 , 1 , u_scale , m_u_extent , u_scale )
>4078	ArgumentList	3
>4079	Argument	u_scale
>4080	Identifier	u_scale
>4081	Argument	m_u_extent
>4082	Identifier	m_u_extent
>4083	Argument	u_scale
>4084	Identifier	u_scale
>4085	Argument	1
>4086	PrimaryExpression	1
>4087	Argument	3
>4088	PrimaryExpression	3
>4089	Callee	matrix_scale
>4090	Identifier	matrix_scale
>4091	ExpressionStatement	 
>4092	CallExpression	memcpy ( v_scale , m_vaxis , 3 * sizeof ( double ) )
>4093	ArgumentList	v_scale
>4094	Argument	3 * sizeof ( double )
>4095	MultiplicativeExpression	3 * sizeof ( double )
>4096	SizeofExpr	sizeof ( double )
>4097	SizeofOperand	double
>4098	Sizeof	sizeof
>4099	PrimaryExpression	3
>4100	Argument	m_vaxis
>4101	Identifier	m_vaxis
>4102	Argument	v_scale
>4103	Identifier	v_scale
>4104	Callee	memcpy
>4105	Identifier	memcpy
>4106	ExpressionStatement	 
>4107	CallExpression	memcpy ( u_scale , m_uaxis , 3 * sizeof ( double ) )
>4108	ArgumentList	u_scale
>4109	Argument	3 * sizeof ( double )
>4110	MultiplicativeExpression	3 * sizeof ( double )
>4111	SizeofExpr	sizeof ( double )
>4112	SizeofOperand	double
>4113	Sizeof	sizeof
>4114	PrimaryExpression	3
>4115	Argument	m_uaxis
>4116	Identifier	m_uaxis
>4117	Argument	u_scale
>4118	Identifier	u_scale
>4119	Callee	memcpy
>4120	Identifier	memcpy
>4121	IdentifierDeclStatement	 
>4122	IdentifierDecl	v_scale [ 3 ]
>4123	PrimaryExpression	3
>4124	Identifier	v_scale
>4125	IdentifierDeclType	double [ 3 ]
>4126	IdentifierDecl	u_scale [ 3 ]
>4127	PrimaryExpression	3
>4128	Identifier	u_scale
>4129	IdentifierDeclType	double [ 3 ]
>4130	IdentifierDeclStatement	 
>4131	IdentifierDecl	p3 [ 3 ]
>4132	PrimaryExpression	3
>4133	Identifier	p3
>4134	IdentifierDeclType	double [ 3 ]
>4135	IdentifierDecl	p2 [ 3 ]
>4136	PrimaryExpression	3
>4137	Identifier	p2
>4138	IdentifierDeclType	double [ 3 ]
>4139	IdentifierDecl	p1 [ 3 ]
>4140	PrimaryExpression	3
>4141	Identifier	p1
>4142	IdentifierDeclType	double [ 3 ]
>4143	IdentifierDecl	p0 [ 3 ]
>4144	PrimaryExpression	3
>4145	Identifier	p0
>4146	IdentifierDeclType	double [ 3 ]
>4147	ExpressionStatement	 
>4148	CallExpression	GLCheckForError ( \"PlaneData
>4149	ArgumentList	\"PlaneData
>4150	Argument	\"PlaneData
>4151	PrimaryExpression	\"PlaneData
>4152	Callee	GLCheckForError
>4153	Identifier	GLCheckForError
>4189	FunctionDef	PlaneData 
>4190	ParameterList	double * params
>4191	Parameter	 
>4192	Identifier	params
>4193	ParameterType	double *
>4194	ReturnType	void
>4195	CompoundStatement	 
>4196	ExpressionStatement	 
>4197	AssignmentExpr	params [ 3 ] = m_dist
>4198	Identifier	m_dist
>4199	ArrayIndexing	params [ 3 ]
>4200	PrimaryExpression	3
>4201	Identifier	params
>4202	ExpressionStatement	 
>4203	AssignmentExpr	params [ 2 ] = m_normal [ 2 ]
>4204	ArrayIndexing	m_normal [ 2 ]
>4205	PrimaryExpression	2
>4206	Identifier	m_normal
>4207	ArrayIndexing	params [ 2 ]
>4208	PrimaryExpression	2
>4209	Identifier	params
>4210	ExpressionStatement	 
>4211	AssignmentExpr	params [ 1 ] = m_normal [ 1 ]
>4212	ArrayIndexing	m_normal [ 1 ]
>4213	PrimaryExpression	1
>4214	Identifier	m_normal
>4215	ArrayIndexing	params [ 1 ]
>4216	PrimaryExpression	1
>4217	Identifier	params
>4218	ExpressionStatement	 
>4219	AssignmentExpr	params [ 0 ] = m_normal [ 0 ]
>4220	ArrayIndexing	m_normal [ 0 ]
>4221	PrimaryExpression	0
>4222	Identifier	m_normal
>4223	ArrayIndexing	params [ 0 ]
>4224	PrimaryExpression	0
>4225	Identifier	params
>4234	FunctionDef	LineSegment2D 
>4235	ParameterList	 
>4236	ReturnType	double
>4237	CompoundStatement	 
>4238	ReturnStatement	 
>4239	CallExpression	sqrt ( dx * dx + dy * dy )
>4240	ArgumentList	dx * dx + dy * dy
>4241	Argument	dx * dx + dy * dy
>4242	AdditiveExpression	dx * dx + dy * dy
>4243	MultiplicativeExpression	dy * dy
>4244	Identifier	dy
>4245	Identifier	dy
>4246	MultiplicativeExpression	dx * dx
>4247	Identifier	dx
>4248	Identifier	dx
>4249	Callee	sqrt
>4250	Identifier	sqrt
>4251	IdentifierDeclStatement	 
>4252	IdentifierDecl	dy = m_p2 [ 1 ] - m_p1 [ 1 ]
>4253	AssignmentExpr	dy = m_p2 [ 1 ] - m_p1 [ 1 ]
>4254	AdditiveExpression	m_p2 [ 1 ] - m_p1 [ 1 ]
>4255	ArrayIndexing	m_p1 [ 1 ]
>4256	PrimaryExpression	1
>4257	Identifier	m_p1
>4258	ArrayIndexing	m_p2 [ 1 ]
>4259	PrimaryExpression	1
>4260	Identifier	m_p2
>4261	Identifier	dy
>4262	Identifier	dy
>4263	IdentifierDeclType	double
>4264	IdentifierDeclStatement	 
>4265	IdentifierDecl	dx = m_p2 [ 0 ] - m_p1 [ 0 ]
>4266	AssignmentExpr	dx = m_p2 [ 0 ] - m_p1 [ 0 ]
>4267	AdditiveExpression	m_p2 [ 0 ] - m_p1 [ 0 ]
>4268	ArrayIndexing	m_p1 [ 0 ]
>4269	PrimaryExpression	0
>4270	Identifier	m_p1
>4271	ArrayIndexing	m_p2 [ 0 ]
>4272	PrimaryExpression	0
>4273	Identifier	m_p2
>4274	Identifier	dx
>4275	Identifier	dx
>4276	IdentifierDeclType	double
>4287	FunctionDef	LineSegment2D 
>4288	ParameterList	double e1 [ 3 ] , double e2 [ 3 ] , double & t , double & u
>4289	Parameter	 
>4290	Identifier	u
>4291	ParameterType	double &
>4292	Parameter	 
>4293	Identifier	t
>4294	ParameterType	double &
>4295	Parameter	 
>4296	Identifier	e2
>4297	ParameterType	double [ 3 ]
>4298	Parameter	 
>4299	Identifier	e1
>4300	ParameterType	double [ 3 ]
>4301	ReturnType	bool
>4302	CompoundStatement	 
>4303	IfStatement	if ( ( t < 0.0 && u < 0.0 ) || ( t > 1.0 && u > 1.0 ) )
>4304	ElseStatement	else
>4305	ReturnStatement	 
>4306	Identifier	true
>4307	ReturnStatement	 
>4308	Identifier	false
>4309	Condition	 
>4310	OrExpression	( t < 0.0 && u < 0.0 ) || ( t > 1.0 && u > 1.0 )
>4311	AndExpression	t > 1.0 && u > 1.0
>4312	RelationalExpression	u > 1.0
>4313	PrimaryExpression	1.0
>4314	Identifier	u
>4315	RelationalExpression	t > 1.0
>4316	PrimaryExpression	1.0
>4317	Identifier	t
>4318	AndExpression	t < 0.0 && u < 0.0
>4319	RelationalExpression	u < 0.0
>4320	PrimaryExpression	0.0
>4321	Identifier	u
>4322	RelationalExpression	t < 0.0
>4323	PrimaryExpression	0.0
>4324	Identifier	t
>4325	ExpressionStatement	 
>4326	AssignmentExpr	u = sign2 * mag2
>4327	MultiplicativeExpression	sign2 * mag2
>4328	Identifier	mag2
>4329	Identifier	sign2
>4330	Identifier	u
>4331	ExpressionStatement	 
>4332	AssignmentExpr	t = sign1 * mag1
>4333	MultiplicativeExpression	sign1 * mag1
>4334	Identifier	mag1
>4335	Identifier	sign1
>4336	Identifier	t
>4337	IdentifierDeclStatement	 
>4338	IdentifierDecl	mag2 = matrix_norm ( 2 , 1 , i2p ) * inv_norm
>4339	AssignmentExpr	mag2 = matrix_norm ( 2 , 1 , i2p ) * inv_norm
>4340	MultiplicativeExpression	matrix_norm ( 2 , 1 , i2p ) * inv_norm
>4341	Identifier	inv_norm
>4342	CallExpression	matrix_norm ( 2 , 1 , i2p )
>4343	ArgumentList	2
>4344	Argument	i2p
>4345	Identifier	i2p
>4346	Argument	1
>4347	PrimaryExpression	1
>4348	Argument	2
>4349	PrimaryExpression	2
>4350	Callee	matrix_norm
>4351	Identifier	matrix_norm
>4352	Identifier	mag2
>4353	Identifier	mag2
>4354	IdentifierDeclType	double
>4355	IdentifierDeclStatement	 
>4356	IdentifierDecl	mag1 = matrix_norm ( 2 , 1 , i1p ) * inv_norm
>4357	AssignmentExpr	mag1 = matrix_norm ( 2 , 1 , i1p ) * inv_norm
>4358	MultiplicativeExpression	matrix_norm ( 2 , 1 , i1p ) * inv_norm
>4359	Identifier	inv_norm
>4360	CallExpression	matrix_norm ( 2 , 1 , i1p )
>4361	ArgumentList	2
>4362	Argument	i1p
>4363	Identifier	i1p
>4364	Argument	1
>4365	PrimaryExpression	1
>4366	Argument	2
>4367	PrimaryExpression	2
>4368	Callee	matrix_norm
>4369	Identifier	matrix_norm
>4370	Identifier	mag1
>4371	Identifier	mag1
>4372	IdentifierDeclType	double
>4373	IdentifierDeclStatement	 
>4374	IdentifierDecl	inv_norm = 1.0 / matrix_norm ( 2 , 1 , qp )
>4375	AssignmentExpr	inv_norm = 1.0 / matrix_norm ( 2 , 1 , qp )
>4376	MultiplicativeExpression	1.0 / matrix_norm ( 2 , 1 , qp )
>4377	CallExpression	matrix_norm ( 2 , 1 , qp )
>4378	ArgumentList	2
>4379	Argument	qp
>4380	Identifier	qp
>4381	Argument	1
>4382	PrimaryExpression	1
>4383	Argument	2
>4384	PrimaryExpression	2
>4385	Callee	matrix_norm
>4386	Identifier	matrix_norm
>4387	PrimaryExpression	1.0
>4388	Identifier	inv_norm
>4389	Identifier	inv_norm
>4390	IdentifierDeclType	double
>4391	IdentifierDeclStatement	 
>4392	IdentifierDecl	sign2 = SGN ( dot2 )
>4393	AssignmentExpr	sign2 = SGN ( dot2 )
>4394	CallExpression	SGN ( dot2 )
>4395	ArgumentList	dot2
>4396	Argument	dot2
>4397	Identifier	dot2
>4398	Callee	SGN
>4399	Identifier	SGN
>4400	Identifier	sign2
>4401	Identifier	sign2
>4402	IdentifierDeclType	int
>4403	IdentifierDeclStatement	 
>4404	IdentifierDecl	sign1 = SGN ( dot1 )
>4405	AssignmentExpr	sign1 = SGN ( dot1 )
>4406	CallExpression	SGN ( dot1 )
>4407	ArgumentList	dot1
>4408	Argument	dot1
>4409	Identifier	dot1
>4410	Callee	SGN
>4411	Identifier	SGN
>4412	Identifier	sign1
>4413	Identifier	sign1
>4414	IdentifierDeclType	int
>4415	ExpressionStatement	 
>4416	CallExpression	matrix_product ( 1 , 2 , 2 , 1 , i2p , qp , & dot2 )
>4417	ArgumentList	1
>4418	Argument	& dot2
>4419	UnaryOp	& dot2
>4420	Identifier	dot2
>4421	UnaryOperator	&
>4422	Argument	qp
>4423	Identifier	qp
>4424	Argument	i2p
>4425	Identifier	i2p
>4426	Argument	1
>4427	PrimaryExpression	1
>4428	Argument	2
>4429	PrimaryExpression	2
>4430	Argument	2
>4431	PrimaryExpression	2
>4432	Argument	1
>4433	PrimaryExpression	1
>4434	Callee	matrix_product
>4435	Identifier	matrix_product
>4436	ExpressionStatement	 
>4437	CallExpression	matrix_product ( 1 , 2 , 2 , 1 , i1p , qp , & dot1 )
>4438	ArgumentList	1
>4439	Argument	& dot1
>4440	UnaryOp	& dot1
>4441	Identifier	dot1
>4442	UnaryOperator	&
>4443	Argument	qp
>4444	Identifier	qp
>4445	Argument	i1p
>4446	Identifier	i1p
>4447	Argument	1
>4448	PrimaryExpression	1
>4449	Argument	2
>4450	PrimaryExpression	2
>4451	Argument	2
>4452	PrimaryExpression	2
>4453	Argument	1
>4454	PrimaryExpression	1
>4455	Callee	matrix_product
>4456	Identifier	matrix_product
>4457	IdentifierDeclStatement	 
>4458	IdentifierDecl	dot2
>4459	Identifier	dot2
>4460	IdentifierDeclType	double
>4461	IdentifierDecl	dot1
>4462	Identifier	dot1
>4463	IdentifierDeclType	double
>4464	ExpressionStatement	 
>4465	CallExpression	matrix_diff ( 2 , 1 , 2 , 1 , i2 , p , i2p )
>4466	ArgumentList	2
>4467	Argument	i2p
>4468	Identifier	i2p
>4469	Argument	p
>4470	Identifier	p
>4471	Argument	i2
>4472	Identifier	i2
>4473	Argument	1
>4474	PrimaryExpression	1
>4475	Argument	2
>4476	PrimaryExpression	2
>4477	Argument	1
>4478	PrimaryExpression	1
>4479	Argument	2
>4480	PrimaryExpression	2
>4481	Callee	matrix_diff
>4482	Identifier	matrix_diff
>4483	ExpressionStatement	 
>4484	CallExpression	matrix_diff ( 2 , 1 , 2 , 1 , i1 , p , i1p )
>4485	ArgumentList	2
>4486	Argument	i1p
>4487	Identifier	i1p
>4488	Argument	p
>4489	Identifier	p
>4490	Argument	i1
>4491	Identifier	i1
>4492	Argument	1
>4493	PrimaryExpression	1
>4494	Argument	2
>4495	PrimaryExpression	2
>4496	Argument	1
>4497	PrimaryExpression	1
>4498	Argument	2
>4499	PrimaryExpression	2
>4500	Callee	matrix_diff
>4501	Identifier	matrix_diff
>4502	ExpressionStatement	 
>4503	CallExpression	matrix_diff ( 2 , 1 , 2 , 1 , q , p , qp )
>4504	ArgumentList	2
>4505	Argument	qp
>4506	Identifier	qp
>4507	Argument	p
>4508	Identifier	p
>4509	Argument	q
>4510	Identifier	q
>4511	Argument	1
>4512	PrimaryExpression	1
>4513	Argument	2
>4514	PrimaryExpression	2
>4515	Argument	1
>4516	PrimaryExpression	1
>4517	Argument	2
>4518	PrimaryExpression	2
>4519	Callee	matrix_diff
>4520	Identifier	matrix_diff
>4521	IdentifierDeclStatement	 
>4522	IdentifierDecl	i2p [ 3 ]
>4523	PrimaryExpression	3
>4524	Identifier	i2p
>4525	IdentifierDeclType	double [ 3 ]
>4526	IdentifierDecl	i1p [ 3 ]
>4527	PrimaryExpression	3
>4528	Identifier	i1p
>4529	IdentifierDeclType	double [ 3 ]
>4530	IdentifierDecl	qp [ 3 ]
>4531	PrimaryExpression	3
>4532	Identifier	qp
>4533	IdentifierDeclType	double [ 3 ]
>4534	ExpressionStatement	 
>4535	AssignmentExpr	i2 [ 1 ] *= inv_i22
>4536	Identifier	inv_i22
>4537	ArrayIndexing	i2 [ 1 ]
>4538	PrimaryExpression	1
>4539	Identifier	i2
>4540	ExpressionStatement	 
>4541	AssignmentExpr	i2 [ 0 ] *= inv_i22
>4542	Identifier	inv_i22
>4543	ArrayIndexing	i2 [ 0 ]
>4544	PrimaryExpression	0
>4545	Identifier	i2
>4546	IdentifierDeclStatement	 
>4547	IdentifierDecl	inv_i22 = 1.0 / i2 [ 2 ]
>4548	AssignmentExpr	inv_i22 = 1.0 / i2 [ 2 ]
>4549	MultiplicativeExpression	1.0 / i2 [ 2 ]
>4550	ArrayIndexing	i2 [ 2 ]
>4551	PrimaryExpression	2
>4552	Identifier	i2
>4553	PrimaryExpression	1.0
>4554	Identifier	inv_i22
>4555	Identifier	inv_i22
>4556	IdentifierDeclType	double
>4557	ExpressionStatement	 
>4558	AssignmentExpr	i1 [ 1 ] *= inv_i12
>4559	Identifier	inv_i12
>4560	ArrayIndexing	i1 [ 1 ]
>4561	PrimaryExpression	1
>4562	Identifier	i1
>4563	ExpressionStatement	 
>4564	AssignmentExpr	i1 [ 0 ] *= inv_i12
>4565	Identifier	inv_i12
>4566	ArrayIndexing	i1 [ 0 ]
>4567	PrimaryExpression	0
>4568	Identifier	i1
>4569	IdentifierDeclStatement	 
>4570	IdentifierDecl	inv_i12 = 1.0 / i1 [ 2 ]
>4571	AssignmentExpr	inv_i12 = 1.0 / i1 [ 2 ]
>4572	MultiplicativeExpression	1.0 / i1 [ 2 ]
>4573	ArrayIndexing	i1 [ 2 ]
>4574	PrimaryExpression	2
>4575	Identifier	i1
>4576	PrimaryExpression	1.0
>4577	Identifier	inv_i12
>4578	Identifier	inv_i12
>4579	IdentifierDeclType	double
>4580	ExpressionStatement	 
>4581	CallExpression	matrix_cross ( l , e2 , i2 )
>4582	ArgumentList	l
>4583	Argument	i2
>4584	Identifier	i2
>4585	Argument	e2
>4586	Identifier	e2
>4587	Argument	l
>4588	Identifier	l
>4589	Callee	matrix_cross
>4590	Identifier	matrix_cross
>4591	ExpressionStatement	 
>4592	CallExpression	matrix_cross ( l , e1 , i1 )
>4593	ArgumentList	l
>4594	Argument	i1
>4595	Identifier	i1
>4596	Argument	e1
>4597	Identifier	e1
>4598	Argument	l
>4599	Identifier	l
>4600	Callee	matrix_cross
>4601	Identifier	matrix_cross
>4602	IdentifierDeclStatement	 
>4603	IdentifierDecl	i2 [ 3 ]
>4604	PrimaryExpression	3
>4605	Identifier	i2
>4606	IdentifierDeclType	double [ 3 ]
>4607	IdentifierDecl	i1 [ 3 ]
>4608	PrimaryExpression	3
>4609	Identifier	i1
>4610	IdentifierDeclType	double [ 3 ]
>4611	ExpressionStatement	 
>4612	CallExpression	matrix_cross ( p , q , l )
>4613	ArgumentList	p
>4614	Argument	l
>4615	Identifier	l
>4616	Argument	q
>4617	Identifier	q
>4618	Argument	p
>4619	Identifier	p
>4620	Callee	matrix_cross
>4621	Identifier	matrix_cross
>4622	IdentifierDeclStatement	 
>4623	IdentifierDecl	l [ 3 ]
>4624	PrimaryExpression	3
>4625	Identifier	l
>4626	IdentifierDeclType	double [ 3 ]
>4627	IdentifierDeclStatement	 
>4628	IdentifierDecl	q [ 3 ] = { m_p2 [ 0 ] , m_p2 [ 1 ] , 1.0 }
>4629	AssignmentExpr	q [ 3 ] = { m_p2 [ 0 ] , m_p2 [ 1 ] , 1.0 }
>4630	InitializerList	m_p2 [ 0 ]
>4631	PrimaryExpression	1.0
>4632	ArrayIndexing	m_p2 [ 1 ]
>4633	PrimaryExpression	1
>4634	Identifier	m_p2
>4635	ArrayIndexing	m_p2 [ 0 ]
>4636	PrimaryExpression	0
>4637	Identifier	m_p2
>4638	Identifier	q
>4639	PrimaryExpression	3
>4640	Identifier	q
>4641	IdentifierDeclType	double [ 3 ]
>4642	IdentifierDeclStatement	 
>4643	IdentifierDecl	p [ 3 ] = { m_p1 [ 0 ] , m_p1 [ 1 ] , 1.0 }
>4644	AssignmentExpr	p [ 3 ] = { m_p1 [ 0 ] , m_p1 [ 1 ] , 1.0 }
>4645	InitializerList	m_p1 [ 0 ]
>4646	PrimaryExpression	1.0
>4647	ArrayIndexing	m_p1 [ 1 ]
>4648	PrimaryExpression	1
>4649	Identifier	m_p1
>4650	ArrayIndexing	m_p1 [ 0 ]
>4651	PrimaryExpression	0
>4652	Identifier	m_p1
>4653	Identifier	p
>4654	PrimaryExpression	3
>4655	Identifier	p
>4656	IdentifierDeclType	double [ 3 ]
>4693	FunctionDef	LineSegment2D 
>4694	ParameterList	double t , double * p
>4695	Parameter	 
>4696	Identifier	p
>4697	ParameterType	double *
>4698	Parameter	 
>4699	Identifier	t
>4700	ParameterType	double
>4701	ReturnType	void
>4702	CompoundStatement	 
>4703	ExpressionStatement	 
>4704	AssignmentExpr	p [ 1 ] = ( 1.0 - t ) * m_p1 [ 1 ] + t * m_p2 [ 1 ]
>4705	AdditiveExpression	( 1.0 - t ) * m_p1 [ 1 ] + t * m_p2 [ 1 ]
>4706	MultiplicativeExpression	t * m_p2 [ 1 ]
>4707	ArrayIndexing	m_p2 [ 1 ]
>4708	PrimaryExpression	1
>4709	Identifier	m_p2
>4710	Identifier	t
>4711	MultiplicativeExpression	( 1.0 - t ) * m_p1 [ 1 ]
>4712	ArrayIndexing	m_p1 [ 1 ]
>4713	PrimaryExpression	1
>4714	Identifier	m_p1
>4715	AdditiveExpression	1.0 - t
>4716	Identifier	t
>4717	PrimaryExpression	1.0
>4718	ArrayIndexing	p [ 1 ]
>4719	PrimaryExpression	1
>4720	Identifier	p
>4721	ExpressionStatement	 
>4722	AssignmentExpr	p [ 0 ] = ( 1.0 - t ) * m_p1 [ 0 ] + t * m_p2 [ 0 ]
>4723	AdditiveExpression	( 1.0 - t ) * m_p1 [ 0 ] + t * m_p2 [ 0 ]
>4724	MultiplicativeExpression	t * m_p2 [ 0 ]
>4725	ArrayIndexing	m_p2 [ 0 ]
>4726	PrimaryExpression	0
>4727	Identifier	m_p2
>4728	Identifier	t
>4729	MultiplicativeExpression	( 1.0 - t ) * m_p1 [ 0 ]
>4730	ArrayIndexing	m_p1 [ 0 ]
>4731	PrimaryExpression	0
>4732	Identifier	m_p1
>4733	AdditiveExpression	1.0 - t
>4734	Identifier	t
>4735	PrimaryExpression	1.0
>4736	ArrayIndexing	p [ 0 ]
>4737	PrimaryExpression	0
>4738	Identifier	p
>4749	FunctionDef	LineSegment2D 
>4750	ParameterList	double * l
>4751	Parameter	 
>4752	Identifier	l
>4753	ParameterType	double *
>4754	ReturnType	void
>4755	CompoundStatement	 
>4756	ExpressionStatement	 
>4757	CallExpression	matrix_scale ( 3 , 1 , l , 1.0 / norm , l )
>4758	ArgumentList	3
>4759	Argument	l
>4760	Identifier	l
>4761	Argument	1.0 / norm
>4762	MultiplicativeExpression	1.0 / norm
>4763	Identifier	norm
>4764	PrimaryExpression	1.0
>4765	Argument	l
>4766	Identifier	l
>4767	Argument	1
>4768	PrimaryExpression	1
>4769	Argument	3
>4770	PrimaryExpression	3
>4771	Callee	matrix_scale
>4772	Identifier	matrix_scale
>4773	IdentifierDeclStatement	 
>4774	IdentifierDecl	norm = matrix_norm ( 3 , 1 , l )
>4775	AssignmentExpr	norm = matrix_norm ( 3 , 1 , l )
>4776	CallExpression	matrix_norm ( 3 , 1 , l )
>4777	ArgumentList	3
>4778	Argument	l
>4779	Identifier	l
>4780	Argument	1
>4781	PrimaryExpression	1
>4782	Argument	3
>4783	PrimaryExpression	3
>4784	Callee	matrix_norm
>4785	Identifier	matrix_norm
>4786	Identifier	norm
>4787	Identifier	norm
>4788	IdentifierDeclType	double
>4789	ExpressionStatement	 
>4790	CallExpression	matrix_cross ( p1 , p2 , l )
>4791	ArgumentList	p1
>4792	Argument	l
>4793	Identifier	l
>4794	Argument	p2
>4795	Identifier	p2
>4796	Argument	p1
>4797	Identifier	p1
>4798	Callee	matrix_cross
>4799	Identifier	matrix_cross
>4800	IdentifierDeclStatement	 
>4801	IdentifierDecl	p2 [ 3 ] = { m_p2 [ 0 ] , m_p2 [ 1 ] , 1.0 }
>4802	AssignmentExpr	p2 [ 3 ] = { m_p2 [ 0 ] , m_p2 [ 1 ] , 1.0 }
>4803	InitializerList	m_p2 [ 0 ]
>4804	PrimaryExpression	1.0
>4805	ArrayIndexing	m_p2 [ 1 ]
>4806	PrimaryExpression	1
>4807	Identifier	m_p2
>4808	ArrayIndexing	m_p2 [ 0 ]
>4809	PrimaryExpression	0
>4810	Identifier	m_p2
>4811	Identifier	p2
>4812	PrimaryExpression	3
>4813	Identifier	p2
>4814	IdentifierDeclType	double [ 3 ]
>4815	IdentifierDeclStatement	 
>4816	IdentifierDecl	p1 [ 3 ] = { m_p1 [ 0 ] , m_p1 [ 1 ] , 1.0 }
>4817	AssignmentExpr	p1 [ 3 ] = { m_p1 [ 0 ] , m_p1 [ 1 ] , 1.0 }
>4818	InitializerList	m_p1 [ 0 ]
>4819	PrimaryExpression	1.0
>4820	ArrayIndexing	m_p1 [ 1 ]
>4821	PrimaryExpression	1
>4822	Identifier	m_p1
>4823	ArrayIndexing	m_p1 [ 0 ]
>4824	PrimaryExpression	0
>4825	Identifier	m_p1
>4826	Identifier	p1
>4827	PrimaryExpression	3
>4828	Identifier	p1
>4829	IdentifierDeclType	double [ 3 ]
>4842	FunctionDef	LineSegment2D 
>4843	ParameterList	FILE * f
>4844	Parameter	 
>4845	Identifier	f
>4846	ParameterType	FILE *
>4847	ReturnType	void
>4848	CompoundStatement	 
>4849	ExpressionStatement	 
>4850	CallExpression	fscanf ( f , \"%lf %lf %lf %lf\" , m_p1 + 0 , m_p1 + 1 , m_p2 + 0 , m_p2 + 1 )
>4851	ArgumentList	f
>4852	Argument	m_p2 + 1
>4853	AdditiveExpression	m_p2 + 1
>4854	PrimaryExpression	1
>4855	Identifier	m_p2
>4856	Argument	m_p2 + 0
>4857	AdditiveExpression	m_p2 + 0
>4858	PrimaryExpression	0
>4859	Identifier	m_p2
>4860	Argument	m_p1 + 1
>4861	AdditiveExpression	m_p1 + 1
>4862	PrimaryExpression	1
>4863	Identifier	m_p1
>4864	Argument	m_p1 + 0
>4865	AdditiveExpression	m_p1 + 0
>4866	PrimaryExpression	0
>4867	Identifier	m_p1
>4868	Argument	\"%lf %lf %lf %lf\"
>4869	PrimaryExpression	\"%lf %lf %lf %lf\"
>4870	Argument	f
>4871	Identifier	f
>4872	Callee	fscanf
>4873	Identifier	fscanf
>4880	FunctionDef	LineSegment2D 
>4881	ParameterList	FILE * f
>4882	Parameter	 
>4883	Identifier	f
>4884	ParameterType	FILE *
>4885	ReturnType	void
>4886	CompoundStatement	 
>4887	ExpressionStatement	 
>4888	CallExpression	fprintf ( f , \"%0.8le %0.8le %0.8le %0.8le\n\" , m_p1 [ 0 ] , m_p1 [ 1 ] , m_p2 [ 0 ] , m_p2 [ 1 ] )
>4889	ArgumentList	f
>4890	Argument	m_p2 [ 1 ]
>4891	ArrayIndexing	m_p2 [ 1 ]
>4892	PrimaryExpression	1
>4893	Identifier	m_p2
>4894	Argument	m_p2 [ 0 ]
>4895	ArrayIndexing	m_p2 [ 0 ]
>4896	PrimaryExpression	0
>4897	Identifier	m_p2
>4898	Argument	m_p1 [ 1 ]
>4899	ArrayIndexing	m_p1 [ 1 ]
>4900	PrimaryExpression	1
>4901	Identifier	m_p1
>4902	Argument	m_p1 [ 0 ]
>4903	ArrayIndexing	m_p1 [ 0 ]
>4904	PrimaryExpression	0
>4905	Identifier	m_p1
>4906	Argument	\"%0.8le %0.8le %0.8le %0.8le\n\"
>4907	PrimaryExpression	\"%0.8le %0.8le %0.8le %0.8le\n\"
>4908	Argument	f
>4909	Identifier	f
>4910	Callee	fprintf
>4911	Identifier	fprintf
>4920	FunctionDef	LineSegment3D 
>4921	ParameterList	FILE * f
>4922	Parameter	 
>4923	Identifier	f
>4924	ParameterType	FILE *
>4925	ReturnType	void
>4926	CompoundStatement	 
>4927	ExpressionStatement	 
>4928	AssignmentExpr	m_ignore = false
>4929	Identifier	false
>4930	Identifier	m_ignore
>4931	ForStatement	for ( int i = 0 ; i < num_views ; i ++ )
>4932	CompoundStatement	 
>4933	ExpressionStatement	 
>4934	CallExpression	m_views . push_back ( v )
>4935	ArgumentList	v
>4936	Argument	v
>4937	Identifier	v
>4938	Callee	m_views . push_back
>4939	MemberAccess	m_views . push_back
>4940	Identifier	push_back
>4941	Identifier	m_views
>4942	ExpressionStatement	 
>4943	CallExpression	fscanf ( f , \"%d\" , & v )
>4944	ArgumentList	f
>4945	Argument	& v
>4946	UnaryOp	& v
>4947	Identifier	v
>4948	UnaryOperator	&
>4949	Argument	\"%d\"
>4950	PrimaryExpression	\"%d\"
>4951	Argument	f
>4952	Identifier	f
>4953	Callee	fscanf
>4954	Identifier	fscanf
>4955	IdentifierDeclStatement	 
>4956	IdentifierDecl	v
>4957	Identifier	v
>4958	IdentifierDeclType	int
>4959	IncDecOp	 
>4960	IncDec	++
>4961	Identifier	i
>4962	Condition	 
>4963	RelationalExpression	i < num_views
>4964	Identifier	num_views
>4965	Identifier	i
>4966	ForInit	 
>4967	IdentifierDeclStatement	int i = 0 ;
>4968	IdentifierDecl	i = 0
>4969	AssignmentExpr	i = 0
>4970	PrimaryExpression	0
>4971	Identifier	i
>4972	Identifier	i
>4973	IdentifierDeclType	int
>4974	ExpressionStatement	 
>4975	CallExpression	fscanf ( f , \"%d\" , & num_views )
>4976	ArgumentList	f
>4977	Argument	& num_views
>4978	UnaryOp	& num_views
>4979	Identifier	num_views
>4980	UnaryOperator	&
>4981	Argument	\"%d\"
>4982	PrimaryExpression	\"%d\"
>4983	Argument	f
>4984	Identifier	f
>4985	Callee	fscanf
>4986	Identifier	fscanf
>4987	IdentifierDeclStatement	 
>4988	IdentifierDecl	num_views
>4989	Identifier	num_views
>4990	IdentifierDeclType	int
>4991	ExpressionStatement	 
>4992	CallExpression	fscanf ( f , \"%lf %lf %lf %lf %lf %lf\" , m_p1 + 0 , m_p1 + 1 , m_p1 + 2 , m_p2 + 0 , m_p2 + 1 , m_p2 + 2 )
>4993	ArgumentList	f
>4994	Argument	m_p2 + 2
>4995	AdditiveExpression	m_p2 + 2
>4996	PrimaryExpression	2
>4997	Identifier	m_p2
>4998	Argument	m_p2 + 1
>4999	AdditiveExpression	m_p2 + 1
>5000	PrimaryExpression	1
>5001	Identifier	m_p2
>5002	Argument	m_p2 + 0
>5003	AdditiveExpression	m_p2 + 0
>5004	PrimaryExpression	0
>5005	Identifier	m_p2
>5006	Argument	m_p1 + 2
>5007	AdditiveExpression	m_p1 + 2
>5008	PrimaryExpression	2
>5009	Identifier	m_p1
>5010	Argument	m_p1 + 1
>5011	AdditiveExpression	m_p1 + 1
>5012	PrimaryExpression	1
>5013	Identifier	m_p1
>5014	Argument	m_p1 + 0
>5015	AdditiveExpression	m_p1 + 0
>5016	PrimaryExpression	0
>5017	Identifier	m_p1
>5018	Argument	\"%lf %lf %lf %lf %lf %lf\"
>5019	PrimaryExpression	\"%lf %lf %lf %lf %lf %lf\"
>5020	Argument	f
>5021	Identifier	f
>5022	Callee	fscanf
>5023	Identifier	fscanf
>5038	FunctionDef	LineSegment3D 
>5039	ParameterList	FILE * f
>5040	Parameter	 
>5041	Identifier	f
>5042	ParameterType	FILE *
>5043	ReturnType	void
>5044	CompoundStatement	 
>5045	ExpressionStatement	 
>5046	CallExpression	fprintf ( f , \"\n\" )
>5047	ArgumentList	f
>5048	Argument	\"\n\"
>5049	PrimaryExpression	\"\n\"
>5050	Argument	f
>5051	Identifier	f
>5052	Callee	fprintf
>5053	Identifier	fprintf
>5054	ForStatement	for ( int i = 0 ; i < num_views ; i ++ )
>5055	ExpressionStatement	 
>5056	CallExpression	fprintf ( f , \"%d \" , m_views [ i ] )
>5057	ArgumentList	f
>5058	Argument	m_views [ i ]
>5059	ArrayIndexing	m_views [ i ]
>5060	Identifier	i
>5061	Identifier	m_views
>5062	Argument	\"%d \"
>5063	PrimaryExpression	\"%d \"
>5064	Argument	f
>5065	Identifier	f
>5066	Callee	fprintf
>5067	Identifier	fprintf
>5068	IncDecOp	 
>5069	IncDec	++
>5070	Identifier	i
>5071	Condition	 
>5072	RelationalExpression	i < num_views
>5073	Identifier	num_views
>5074	Identifier	i
>5075	ForInit	 
>5076	IdentifierDeclStatement	int i = 0 ;
>5077	IdentifierDecl	i = 0
>5078	AssignmentExpr	i = 0
>5079	PrimaryExpression	0
>5080	Identifier	i
>5081	Identifier	i
>5082	IdentifierDeclType	int
>5083	ExpressionStatement	 
>5084	CallExpression	fprintf ( f , \"%d\n\" , num_views )
>5085	ArgumentList	f
>5086	Argument	num_views
>5087	Identifier	num_views
>5088	Argument	\"%d\n\"
>5089	PrimaryExpression	\"%d\n\"
>5090	Argument	f
>5091	Identifier	f
>5092	Callee	fprintf
>5093	Identifier	fprintf
>5094	IdentifierDeclStatement	 
>5095	IdentifierDecl	num_views = ( int ) m_views . size ( )
>5096	AssignmentExpr	num_views = ( int ) m_views . size ( )
>5097	CastExpression	( int ) m_views . size ( )
>5098	CallExpression	m_views . size ( )
>5099	ArgumentList	 
>5100	Callee	m_views . size
>5101	MemberAccess	m_views . size
>5102	Identifier	size
>5103	Identifier	m_views
>5104	CastTarget	int
>5105	Identifier	num_views
>5106	Identifier	num_views
>5107	IdentifierDeclType	int
>5108	ExpressionStatement	 
>5109	CallExpression	fprintf ( f , \"%0.8le %0.8le %0.8le %0.8le %0.8le %0.8le\n\" , m_p1 [ 0 ] , m_p1 [ 1 ] , m_p1 [ 2 ] , m_p2 [ 0 ] , \
>5110	ArgumentList	f
>5111	Argument	m_p2 [ 2 ]
>5112	ArrayIndexing	m_p2 [ 2 ]
>5113	PrimaryExpression	2
>5114	Identifier	m_p2
>5115	Argument	m_p2 [ 1 ]
>5116	ArrayIndexing	m_p2 [ 1 ]
>5117	PrimaryExpression	1
>5118	Identifier	m_p2
>5119	Argument	m_p2 [ 0 ]
>5120	ArrayIndexing	m_p2 [ 0 ]
>5121	PrimaryExpression	0
>5122	Identifier	m_p2
>5123	Argument	m_p1 [ 2 ]
>5124	ArrayIndexing	m_p1 [ 2 ]
>5125	PrimaryExpression	2
>5126	Identifier	m_p1
>5127	Argument	m_p1 [ 1 ]
>5128	ArrayIndexing	m_p1 [ 1 ]
>5129	PrimaryExpression	1
>5130	Identifier	m_p1
>5131	Argument	m_p1 [ 0 ]
>5132	ArrayIndexing	m_p1 [ 0 ]
>5133	PrimaryExpression	0
>5134	Identifier	m_p1
>5135	Argument	\"%0.8le %0.8le %0.8le %0.8le %0.8le %0.8le\n\"
>5136	PrimaryExpression	\"%0.8le %0.8le %0.8le %0.8le %0.8le %0.8le\n\"
>5137	Argument	f
>5138	Identifier	f
>5139	Callee	fprintf
>5140	Identifier	fprintf
>5155	FunctionDef	LineSegment3D 
>5156	ParameterList	const CameraInfo & camera , double max_width , int stroke_texture , ParameterBound stroke_bounds
>5157	Parameter	 
>5158	Identifier	stroke_bounds
>5159	ParameterType	ParameterBound
>5160	Parameter	 
>5161	Identifier	stroke_texture
>5162	ParameterType	int
>5163	Parameter	 
>5164	Identifier	max_width
>5165	ParameterType	double
>5166	Parameter	 
>5167	Identifier	camera
>5168	ParameterType	const CameraInfo &
>5169	ReturnType	void
>5170	CompoundStatement	 
>5171	IfStatement	if ( stroke_texture != - 1 )
>5172	CompoundStatement	 
>5173	ExpressionStatement	 
>5174	CallExpression	glDisable ( GL_TEXTURE_2D )
>5175	ArgumentList	GL_TEXTURE_2D
>5176	Argument	GL_TEXTURE_2D
>5177	Identifier	GL_TEXTURE_2D
>5178	Callee	glDisable
>5179	Identifier	glDisable
>5180	Condition	 
>5181	EqualityExpression	stroke_texture != - 1
>5182	UnaryOp	- 1
>5183	PrimaryExpression	1
>5184	UnaryOperator	-
>5185	Identifier	stroke_texture
>5186	ExpressionStatement	 
>5187	CallExpression	s . render ( )
>5188	ArgumentList	 
>5189	Callee	s . render
>5190	MemberAccess	s . render
>5191	Identifier	render
>5192	Identifier	s
>5193	ExpressionStatement	 
>5194	CallExpression	s . addControlPoint ( proj2 [ 0 ] , proj2 [ 1 ] )
>5195	ArgumentList	proj2 [ 0 ]
>5196	Argument	proj2 [ 1 ]
>5197	ArrayIndexing	proj2 [ 1 ]
>5198	PrimaryExpression	1
>5199	Identifier	proj2
>5200	Argument	proj2 [ 0 ]
>5201	ArrayIndexing	proj2 [ 0 ]
>5202	PrimaryExpression	0
>5203	Identifier	proj2
>5204	Callee	s . addControlPoint
>5205	MemberAccess	s . addControlPoint
>5206	Identifier	addControlPoint
>5207	Identifier	s
>5208	ExpressionStatement	 
>5209	CallExpression	s . addControlPoint ( proj1 [ 0 ] , proj1 [ 1 ] )
>5210	ArgumentList	proj1 [ 0 ]
>5211	Argument	proj1 [ 1 ]
>5212	ArrayIndexing	proj1 [ 1 ]
>5213	PrimaryExpression	1
>5214	Identifier	proj1
>5215	Argument	proj1 [ 0 ]
>5216	ArrayIndexing	proj1 [ 0 ]
>5217	PrimaryExpression	0
>5218	Identifier	proj1
>5219	Callee	s . addControlPoint
>5220	MemberAccess	s . addControlPoint
>5221	Identifier	addControlPoint
>5222	Identifier	s
>5223	IfStatement	if ( stroke_texture == - 1 )
>5224	ElseStatement	else
>5225	CompoundStatement	 
>5226	ExpressionStatement	 
>5227	AssignmentExpr	s . color ( ) = makeColor ( b , b , b , 0.9f )
>5228	CallExpression	makeColor ( b , b , b , 0.9f )
>5229	ArgumentList	b
>5230	Argument	0.9f
>5231	PrimaryExpression	0.9f
>5232	Argument	b
>5233	Identifier	b
>5234	Argument	b
>5235	Identifier	b
>5236	Argument	b
>5237	Identifier	b
>5238	Callee	makeColor
>5239	Identifier	makeColor
>5240	CallExpression	s . color ( )
>5241	ArgumentList	 
>5242	Callee	s . color
>5243	MemberAccess	s . color
>5244	Identifier	color
>5245	Identifier	s
>5246	ExpressionStatement	 
>5247	AssignmentExpr	s . useTexture ( ) = true
>5248	Identifier	true
>5249	CallExpression	s . useTexture ( )
>5250	ArgumentList	 
>5251	Callee	s . useTexture
>5252	MemberAccess	s . useTexture
>5253	Identifier	useTexture
>5254	Identifier	s
>5255	IdentifierDeclStatement	 
>5256	IdentifierDecl	b = 0x0
>5257	AssignmentExpr	b = 0x0
>5258	PrimaryExpression	0x0
>5259	Identifier	b
>5260	Identifier	b
>5261	IdentifierDeclType	GLubyte
>5262	CompoundStatement	 
>5263	ExpressionStatement	 
>5264	AssignmentExpr	s . color ( ) = makeColor ( 0 , 0 , 0 , 0.9f )
>5265	CallExpression	makeColor ( 0 , 0 , 0 , 0.9f )
>5266	ArgumentList	0
>5267	Argument	0.9f
>5268	PrimaryExpression	0.9f
>5269	Argument	0
>5270	PrimaryExpression	0
>5271	Argument	0
>5272	PrimaryExpression	0
>5273	Argument	0
>5274	PrimaryExpression	0
>5275	Callee	makeColor
>5276	Identifier	makeColor
>5277	CallExpression	s . color ( )
>5278	ArgumentList	 
>5279	Callee	s . color
>5280	MemberAccess	s . color
>5281	Identifier	color
>5282	Identifier	s
>5283	ExpressionStatement	 
>5284	AssignmentExpr	s . useTexture ( ) = false
>5285	Identifier	false
>5286	CallExpression	s . useTexture ( )
>5287	ArgumentList	 
>5288	Callee	s . useTexture
>5289	MemberAccess	s . useTexture
>5290	Identifier	useTexture
>5291	Identifier	s
>5292	Condition	 
>5293	EqualityExpression	stroke_texture == - 1
>5294	UnaryOp	- 1
>5295	PrimaryExpression	1
>5296	UnaryOperator	-
>5297	Identifier	stroke_texture
>5298	ExpressionStatement	 
>5299	AssignmentExpr	s . depth ( ) = 1.0
>5300	PrimaryExpression	1.0
>5301	CallExpression	s . depth ( )
>5302	ArgumentList	 
>5303	Callee	s . depth
>5304	MemberAccess	s . depth
>5305	Identifier	depth
>5306	Identifier	s
>5307	ExpressionStatement	 
>5308	AssignmentExpr	s . cap ( ) = false
>5309	Identifier	false
>5310	CallExpression	s . cap ( )
>5311	ArgumentList	 
>5312	Callee	s . cap
>5313	MemberAccess	s . cap
>5314	Identifier	cap
>5315	Identifier	s
>5316	ExpressionStatement	 
>5317	AssignmentExpr	s . radius ( ) = 0.5 * width
>5318	MultiplicativeExpression	0.5 * width
>5319	Identifier	width
>5320	PrimaryExpression	0.5
>5321	CallExpression	s . radius ( )
>5322	ArgumentList	 
>5323	Callee	s . radius
>5324	MemberAccess	s . radius
>5325	Identifier	radius
>5326	Identifier	s
>5327	IdentifierDeclStatement	 
>5328	IdentifierDecl	s
>5329	Identifier	s
>5330	IdentifierDeclType	Stroke
>5331	IdentifierDeclStatement	 
>5332	IdentifierDecl	width = max_width * exp ( - dist * dist / ( LINE_WIDTH_SIGMA * LINE_WIDTH_SIGMA ) )
>5333	AssignmentExpr	width = max_width * exp ( - dist * dist / ( LINE_WIDTH_SIGMA * LINE_WIDTH_SIGMA ) )
>5334	MultiplicativeExpression	max_width * exp ( - dist * dist / ( LINE_WIDTH_SIGMA * LINE_WIDTH_SIGMA ) )
>5335	CallExpression	exp ( - dist * dist / ( LINE_WIDTH_SIGMA * LINE_WIDTH_SIGMA ) )
>5336	ArgumentList	- dist * dist / ( LINE_WIDTH_SIGMA * LINE_WIDTH_SIGMA )
>5337	Argument	- dist * dist / ( LINE_WIDTH_SIGMA * LINE_WIDTH_SIGMA )
>5338	MultiplicativeExpression	- dist * dist / ( LINE_WIDTH_SIGMA * LINE_WIDTH_SIGMA )
>5339	MultiplicativeExpression	dist / ( LINE_WIDTH_SIGMA * LINE_WIDTH_SIGMA )
>5340	MultiplicativeExpression	LINE_WIDTH_SIGMA * LINE_WIDTH_SIGMA
>5341	Identifier	LINE_WIDTH_SIGMA
>5342	Identifier	LINE_WIDTH_SIGMA
>5343	Identifier	dist
>5344	UnaryOp	- dist
>5345	Identifier	dist
>5346	UnaryOperator	-
>5347	Callee	exp
>5348	Identifier	exp
>5349	Identifier	max_width
>5350	Identifier	width
>5351	Identifier	width
>5352	IdentifierDeclType	double
>5353	Statement	 
>5354	Statement	 
>5355	Statement	 
>5356	IfStatement	if ( stroke_texture != - 1 )
>5357	CompoundStatement	 
>5358	ExpressionStatement	 
>5359	CallExpression	glBindTexture ( GL_TEXTURE_2D , stroke_texture )
>5360	ArgumentList	GL_TEXTURE_2D
>5361	Argument	stroke_texture
>5362	Identifier	stroke_texture
>5363	Argument	GL_TEXTURE_2D
>5364	Identifier	GL_TEXTURE_2D
>5365	Callee	glBindTexture
>5366	Identifier	glBindTexture
>5367	ExpressionStatement	 
>5368	CallExpression	glEnable ( GL_TEXTURE_2D )
>5369	ArgumentList	GL_TEXTURE_2D
>5370	Argument	GL_TEXTURE_2D
>5371	Identifier	GL_TEXTURE_2D
>5372	Callee	glEnable
>5373	Identifier	glEnable
>5374	Condition	 
>5375	EqualityExpression	stroke_texture != - 1
>5376	UnaryOp	- 1
>5377	PrimaryExpression	1
>5378	UnaryOperator	-
>5379	Identifier	stroke_texture
>5380	IdentifierDeclStatement	 
>5381	IdentifierDecl	dist = matrix_norm ( 3 , 1 , disp )
>5382	AssignmentExpr	dist = matrix_norm ( 3 , 1 , disp )
>5383	CallExpression	matrix_norm ( 3 , 1 , disp )
>5384	ArgumentList	3
>5385	Argument	disp
>5386	Identifier	disp
>5387	Argument	1
>5388	PrimaryExpression	1
>5389	Argument	3
>5390	PrimaryExpression	3
>5391	Callee	matrix_norm
>5392	Identifier	matrix_norm
>5393	Identifier	dist
>5394	Identifier	dist
>5395	IdentifierDeclType	double
>5396	ExpressionStatement	 
>5397	CallExpression	matrix_diff ( 3 , 1 , 3 , 1 , pos , m_p1 , disp )
>5398	ArgumentList	3
>5399	Argument	disp
>5400	Identifier	disp
>5401	Argument	m_p1
>5402	Identifier	m_p1
>5403	Argument	pos
>5404	Identifier	pos
>5405	Argument	1
>5406	PrimaryExpression	1
>5407	Argument	3
>5408	PrimaryExpression	3
>5409	Argument	1
>5410	PrimaryExpression	1
>5411	Argument	3
>5412	PrimaryExpression	3
>5413	Callee	matrix_diff
>5414	Identifier	matrix_diff
>5415	IdentifierDeclStatement	 
>5416	IdentifierDecl	disp [ 3 ]
>5417	PrimaryExpression	3
>5418	Identifier	disp
>5419	IdentifierDeclType	double [ 3 ]
>5420	ExpressionStatement	 
>5421	CallExpression	camera . GetPosition ( pos )
>5422	ArgumentList	pos
>5423	Argument	pos
>5424	Identifier	pos
>5425	Callee	camera . GetPosition
>5426	MemberAccess	camera . GetPosition
>5427	Identifier	GetPosition
>5428	Identifier	camera
>5429	IdentifierDeclStatement	 
>5430	IdentifierDecl	pos [ 3 ]
>5431	PrimaryExpression	3
>5432	Identifier	pos
>5433	IdentifierDeclType	double [ 3 ]
>5434	IfStatement	if ( ! in_front1 || ! in_front2 )
>5435	ReturnStatement	 
>5436	Condition	 
>5437	OrExpression	! in_front1 || ! in_front2
>5438	UnaryOp	! in_front2
>5439	Identifier	in_front2
>5440	UnaryOperator	!
>5441	UnaryOp	! in_front1
>5442	Identifier	in_front1
>5443	UnaryOperator	!
>5444	IdentifierDeclStatement	 
>5445	IdentifierDecl	in_front2 = camera . Project ( m_p2 , proj2 )
>5446	AssignmentExpr	in_front2 = camera . Project ( m_p2 , proj2 )
>5447	CallExpression	camera . Project ( m_p2 , proj2 )
>5448	ArgumentList	m_p2
>5449	Argument	proj2
>5450	Identifier	proj2
>5451	Argument	m_p2
>5452	Identifier	m_p2
>5453	Callee	camera . Project
>5454	MemberAccess	camera . Project
>5455	Identifier	Project
>5456	Identifier	camera
>5457	Identifier	in_front2
>5458	Identifier	in_front2
>5459	IdentifierDeclType	bool
>5460	IdentifierDeclStatement	 
>5461	IdentifierDecl	in_front1 = camera . Project ( m_p1 , proj1 )
>5462	AssignmentExpr	in_front1 = camera . Project ( m_p1 , proj1 )
>5463	CallExpression	camera . Project ( m_p1 , proj1 )
>5464	ArgumentList	m_p1
>5465	Argument	proj1
>5466	Identifier	proj1
>5467	Argument	m_p1
>5468	Identifier	m_p1
>5469	Callee	camera . Project
>5470	MemberAccess	camera . Project
>5471	Identifier	Project
>5472	Identifier	camera
>5473	Identifier	in_front1
>5474	Identifier	in_front1
>5475	IdentifierDeclType	bool
>5476	ExpressionStatement	 
>5477	AssignmentExpr	proj2 [ 1 ] /= - proj2 [ 2 ]
>5478	UnaryOp	- proj2 [ 2 ]
>5479	ArrayIndexing	proj2 [ 2 ]
>5480	PrimaryExpression	2
>5481	Identifier	proj2
>5482	UnaryOperator	-
>5483	ArrayIndexing	proj2 [ 1 ]
>5484	PrimaryExpression	1
>5485	Identifier	proj2
>5486	ExpressionStatement	 
>5487	AssignmentExpr	proj2 [ 0 ] /= - proj2 [ 2 ]
>5488	UnaryOp	- proj2 [ 2 ]
>5489	ArrayIndexing	proj2 [ 2 ]
>5490	PrimaryExpression	2
>5491	Identifier	proj2
>5492	UnaryOperator	-
>5493	ArrayIndexing	proj2 [ 0 ]
>5494	PrimaryExpression	0
>5495	Identifier	proj2
>5496	ExpressionStatement	 
>5497	AssignmentExpr	proj1 [ 1 ] /= - proj1 [ 2 ]
>5498	UnaryOp	- proj1 [ 2 ]
>5499	ArrayIndexing	proj1 [ 2 ]
>5500	PrimaryExpression	2
>5501	Identifier	proj1
>5502	UnaryOperator	-
>5503	ArrayIndexing	proj1 [ 1 ]
>5504	PrimaryExpression	1
>5505	Identifier	proj1
>5506	ExpressionStatement	 
>5507	AssignmentExpr	proj1 [ 0 ] /= - proj1 [ 2 ]
>5508	UnaryOp	- proj1 [ 2 ]
>5509	ArrayIndexing	proj1 [ 2 ]
>5510	PrimaryExpression	2
>5511	Identifier	proj1
>5512	UnaryOperator	-
>5513	ArrayIndexing	proj1 [ 0 ]
>5514	PrimaryExpression	0
>5515	Identifier	proj1
>5516	IdentifierDeclStatement	 
>5517	IdentifierDecl	width = CLAMP ( 5.0 / ( - proj1 [ 2 ] - proj2 [ 2 ] ) , 0.5 , max_width )
>5518	AssignmentExpr	width = CLAMP ( 5.0 / ( - proj1 [ 2 ] - proj2 [ 2 ] ) , 0.5 , max_width )
>5519	CallExpression	CLAMP ( 5.0 / ( - proj1 [ 2 ] - proj2 [ 2 ] ) , 0.5 , max_width )
>5520	ArgumentList	5.0 / ( - proj1 [ 2 ] - proj2 [ 2 ] )
>5521	Argument	max_width
>5522	Identifier	max_width
>5523	Argument	0.5
>5524	PrimaryExpression	0.5
>5525	Argument	5.0 / ( - proj1 [ 2 ] - proj2 [ 2 ] )
>5526	MultiplicativeExpression	5.0 / ( - proj1 [ 2 ] - proj2 [ 2 ] )
>5527	AdditiveExpression	- proj1 [ 2 ] - proj2 [ 2 ]
>5528	ArrayIndexing	proj2 [ 2 ]
>5529	PrimaryExpression	2
>5530	Identifier	proj2
>5531	UnaryOp	- proj1 [ 2 ]
>5532	ArrayIndexing	proj1 [ 2 ]
>5533	PrimaryExpression	2
>5534	Identifier	proj1
>5535	UnaryOperator	-
>5536	PrimaryExpression	5.0
>5537	Callee	CLAMP
>5538	Identifier	CLAMP
>5539	Identifier	width
>5540	Identifier	width
>5541	IdentifierDeclType	double
>5542	IfStatement	if ( proj1 [ 2 ] >= 0.0 || proj2 [ 2 ] >= 0.0 )
>5543	ReturnStatement	 
>5544	Condition	 
>5545	OrExpression	proj1 [ 2 ] >= 0.0 || proj2 [ 2 ] >= 0.0
>5546	RelationalExpression	proj2 [ 2 ] >= 0.0
>5547	PrimaryExpression	0.0
>5548	ArrayIndexing	proj2 [ 2 ]
>5549	PrimaryExpression	2
>5550	Identifier	proj2
>5551	RelationalExpression	proj1 [ 2 ] >= 0.0
>5552	PrimaryExpression	0.0
>5553	ArrayIndexing	proj1 [ 2 ]
>5554	PrimaryExpression	2
>5555	Identifier	proj1
>5556	ExpressionStatement	 
>5557	CallExpression	matrix_product ( 3 , 4 , 4 , 1 , ( double * ) camera . m_Pmatrix , p2 , proj2 )
>5558	ArgumentList	3
>5559	Argument	proj2
>5560	Identifier	proj2
>5561	Argument	p2
>5562	Identifier	p2
>5563	Argument	( double * ) camera . m_Pmatrix
>5564	CastExpression	( double * ) camera . m_Pmatrix
>5565	MemberAccess	camera . m_Pmatrix
>5566	Identifier	m_Pmatrix
>5567	Identifier	camera
>5568	CastTarget	double *
>5569	Argument	1
>5570	PrimaryExpression	1
>5571	Argument	4
>5572	PrimaryExpression	4
>5573	Argument	4
>5574	PrimaryExpression	4
>5575	Argument	3
>5576	PrimaryExpression	3
>5577	Callee	matrix_product
>5578	Identifier	matrix_product
>5579	ExpressionStatement	 
>5580	CallExpression	matrix_product ( 3 , 4 , 4 , 1 , ( double * ) camera . m_Pmatrix , p1 , proj1 )
>5581	ArgumentList	3
>5582	Argument	proj1
>5583	Identifier	proj1
>5584	Argument	p1
>5585	Identifier	p1
>5586	Argument	( double * ) camera . m_Pmatrix
>5587	CastExpression	( double * ) camera . m_Pmatrix
>5588	MemberAccess	camera . m_Pmatrix
>5589	Identifier	m_Pmatrix
>5590	Identifier	camera
>5591	CastTarget	double *
>5592	Argument	1
>5593	PrimaryExpression	1
>5594	Argument	4
>5595	PrimaryExpression	4
>5596	Argument	4
>5597	PrimaryExpression	4
>5598	Argument	3
>5599	PrimaryExpression	3
>5600	Callee	matrix_product
>5601	Identifier	matrix_product
>5602	IdentifierDeclStatement	 
>5603	IdentifierDecl	proj2 [ 3 ]
>5604	PrimaryExpression	3
>5605	Identifier	proj2
>5606	IdentifierDeclType	double [ 3 ]
>5607	IdentifierDecl	proj1 [ 3 ]
>5608	PrimaryExpression	3
>5609	Identifier	proj1
>5610	IdentifierDeclType	double [ 3 ]
>5611	IdentifierDeclStatement	 
>5612	IdentifierDecl	p2 [ 4 ] = { m_p2 [ 0 ] , m_p2 [ 1 ] , m_p2 [ 2 ] , 1.0 }
>5613	AssignmentExpr	p2 [ 4 ] = { m_p2 [ 0 ] , m_p2 [ 1 ] , m_p2 [ 2 ] , 1.0 }
>5614	InitializerList	m_p2 [ 0 ]
>5615	PrimaryExpression	1.0
>5616	ArrayIndexing	m_p2 [ 2 ]
>5617	PrimaryExpression	2
>5618	Identifier	m_p2
>5619	ArrayIndexing	m_p2 [ 1 ]
>5620	PrimaryExpression	1
>5621	Identifier	m_p2
>5622	ArrayIndexing	m_p2 [ 0 ]
>5623	PrimaryExpression	0
>5624	Identifier	m_p2
>5625	Identifier	p2
>5626	PrimaryExpression	4
>5627	Identifier	p2
>5628	IdentifierDeclType	double [ 4 ]
>5629	IdentifierDeclStatement	 
>5630	IdentifierDecl	p1 [ 4 ] = { m_p1 [ 0 ] , m_p1 [ 1 ] , m_p1 [ 2 ] , 1.0 }
>5631	AssignmentExpr	p1 [ 4 ] = { m_p1 [ 0 ] , m_p1 [ 1 ] , m_p1 [ 2 ] , 1.0 }
>5632	InitializerList	m_p1 [ 0 ]
>5633	PrimaryExpression	1.0
>5634	ArrayIndexing	m_p1 [ 2 ]
>5635	PrimaryExpression	2
>5636	Identifier	m_p1
>5637	ArrayIndexing	m_p1 [ 1 ]
>5638	PrimaryExpression	1
>5639	Identifier	m_p1
>5640	ArrayIndexing	m_p1 [ 0 ]
>5641	PrimaryExpression	0
>5642	Identifier	m_p1
>5643	Identifier	p1
>5644	PrimaryExpression	4
>5645	Identifier	p1
>5646	IdentifierDeclType	double [ 4 ]
>5687	FunctionDef	LineToUnitVector (double * l , double * v)
>5688	ParameterList	double * l , double * v
>5689	Parameter	 
>5690	Identifier	v
>5691	ParameterType	double *
>5692	Parameter	 
>5693	Identifier	l
>5694	ParameterType	double *
>5695	ReturnType	void
>5696	CompoundStatement	 
>5697	ExpressionStatement	 
>5698	AssignmentExpr	v [ 2 ] = 0.0
>5699	PrimaryExpression	0.0
>5700	ArrayIndexing	v [ 2 ]
>5701	PrimaryExpression	2
>5702	Identifier	v
>5703	ExpressionStatement	 
>5704	AssignmentExpr	v [ 1 ] /= mag
>5705	Identifier	mag
>5706	ArrayIndexing	v [ 1 ]
>5707	PrimaryExpression	1
>5708	Identifier	v
>5709	ExpressionStatement	 
>5710	AssignmentExpr	v [ 0 ] /= mag
>5711	Identifier	mag
>5712	ArrayIndexing	v [ 0 ]
>5713	PrimaryExpression	0
>5714	Identifier	v
>5715	IdentifierDeclStatement	 
>5716	IdentifierDecl	mag = sqrt ( v [ 0 ] * v [ 0 ] + v [ 1 ] * v [ 1 ] )
>5717	AssignmentExpr	mag = sqrt ( v [ 0 ] * v [ 0 ] + v [ 1 ] * v [ 1 ] )
>5718	CallExpression	sqrt ( v [ 0 ] * v [ 0 ] + v [ 1 ] * v [ 1 ] )
>5719	ArgumentList	v [ 0 ] * v [ 0 ] + v [ 1 ] * v [ 1 ]
>5720	Argument	v [ 0 ] * v [ 0 ] + v [ 1 ] * v [ 1 ]
>5721	AdditiveExpression	v [ 0 ] * v [ 0 ] + v [ 1 ] * v [ 1 ]
>5722	MultiplicativeExpression	v [ 1 ] * v [ 1 ]
>5723	ArrayIndexing	v [ 1 ]
>5724	PrimaryExpression	1
>5725	Identifier	v
>5726	ArrayIndexing	v [ 1 ]
>5727	PrimaryExpression	1
>5728	Identifier	v
>5729	MultiplicativeExpression	v [ 0 ] * v [ 0 ]
>5730	ArrayIndexing	v [ 0 ]
>5731	PrimaryExpression	0
>5732	Identifier	v
>5733	ArrayIndexing	v [ 0 ]
>5734	PrimaryExpression	0
>5735	Identifier	v
>5736	Callee	sqrt
>5737	Identifier	sqrt
>5738	Identifier	mag
>5739	Identifier	mag
>5740	IdentifierDeclType	double
>5741	ExpressionStatement	 
>5742	AssignmentExpr	v [ 1 ] = l [ 0 ]
>5743	ArrayIndexing	l [ 0 ]
>5744	PrimaryExpression	0
>5745	Identifier	l
>5746	ArrayIndexing	v [ 1 ]
>5747	PrimaryExpression	1
>5748	Identifier	v
>5749	ExpressionStatement	 
>5750	AssignmentExpr	v [ 0 ] = - l [ 1 ]
>5751	UnaryOp	- l [ 1 ]
>5752	ArrayIndexing	l [ 1 ]
>5753	PrimaryExpression	1
>5754	Identifier	l
>5755	UnaryOperator	-
>5756	ArrayIndexing	v [ 0 ]
>5757	PrimaryExpression	0
>5758	Identifier	v
>5768	FunctionDef	FindWeightedRobustMean (const std 
>5769	ParameterList	const std 
>5770	Parameter	 
>5771	Identifier	weights
>5772	ParameterType	const std 
>5773	Parameter	 
>5774	Identifier	points
>5775	ParameterType	const std 
>5776	ReturnType	v3_t
>5777	CompoundStatement	 
>5778	ReturnStatement	 
>5779	ArrayIndexing	points [ best_idx ]
>5780	Identifier	best_idx
>5781	Identifier	points
>5782	IfStatement	if ( best_idx == - 1 )
>5783	ReturnStatement	 
>5784	CallExpression	v3_new ( 0.0 , 0.0 , 0.0 )
>5785	ArgumentList	0.0
>5786	Argument	0.0
>5787	PrimaryExpression	0.0
>5788	Argument	0.0
>5789	PrimaryExpression	0.0
>5790	Argument	0.0
>5791	PrimaryExpression	0.0
>5792	Callee	v3_new
>5793	Identifier	v3_new
>5794	Condition	 
>5795	EqualityExpression	best_idx == - 1
>5796	UnaryOp	- 1
>5797	PrimaryExpression	1
>5798	UnaryOperator	-
>5799	Identifier	best_idx
>5800	ForStatement	for ( int i = 0 ; i < num_points ; i ++ )
>5801	CompoundStatement	 
>5802	IfStatement	if ( sum < best_sum )
>5803	CompoundStatement	 
>5804	ExpressionStatement	 
>5805	AssignmentExpr	best_idx = i
>5806	Identifier	i
>5807	Identifier	best_idx
>5808	ExpressionStatement	 
>5809	AssignmentExpr	best_sum = sum
>5810	Identifier	sum
>5811	Identifier	best_sum
>5812	Condition	 
>5813	RelationalExpression	sum < best_sum
>5814	Identifier	best_sum
>5815	Identifier	sum
>5816	ForStatement	for ( int j = 0 ; j < num_points ; j ++ )
>5817	CompoundStatement	 
>5818	ExpressionStatement	 
>5819	AssignmentExpr	sum += weights [ j ] * ( fabs ( Vx ( diff ) ) + fabs ( Vy ( diff ) ) + fabs ( Vz ( diff ) ) )
>5820	MultiplicativeExpression	weights [ j ] * ( fabs ( Vx ( diff ) ) + fabs ( Vy ( diff ) ) + fabs ( Vz ( diff ) ) )
>5821	AdditiveExpression	fabs ( Vx ( diff ) ) + fabs ( Vy ( diff ) ) + fabs ( Vz ( diff ) )
>5822	AdditiveExpression	fabs ( Vy ( diff ) ) + fabs ( Vz ( diff ) )
>5823	CallExpression	fabs ( Vz ( diff ) )
>5824	ArgumentList	Vz ( diff )
>5825	Argument	Vz ( diff )
>5826	CallExpression	Vz ( diff )
>5827	ArgumentList	diff
>5828	Argument	diff
>5829	Identifier	diff
>5830	Callee	Vz
>5831	Identifier	Vz
>5832	Callee	fabs
>5833	Identifier	fabs
>5834	CallExpression	fabs ( Vy ( diff ) )
>5835	ArgumentList	Vy ( diff )
>5836	Argument	Vy ( diff )
>5837	CallExpression	Vy ( diff )
>5838	ArgumentList	diff
>5839	Argument	diff
>5840	Identifier	diff
>5841	Callee	Vy
>5842	Identifier	Vy
>5843	Callee	fabs
>5844	Identifier	fabs
>5845	CallExpression	fabs ( Vx ( diff ) )
>5846	ArgumentList	Vx ( diff )
>5847	Argument	Vx ( diff )
>5848	CallExpression	Vx ( diff )
>5849	ArgumentList	diff
>5850	Argument	diff
>5851	Identifier	diff
>5852	Callee	Vx
>5853	Identifier	Vx
>5854	Callee	fabs
>5855	Identifier	fabs
>5856	ArrayIndexing	weights [ j ]
>5857	Identifier	j
>5858	Identifier	weights
>5859	Identifier	sum
>5860	IdentifierDeclStatement	 
>5861	IdentifierDecl	diff = v3_sub ( points [ i ] , points [ j ] )
>5862	AssignmentExpr	diff = v3_sub ( points [ i ] , points [ j ] )
>5863	CallExpression	v3_sub ( points [ i ] , points [ j ] )
>5864	ArgumentList	points [ i ]
>5865	Argument	points [ j ]
>5866	ArrayIndexing	points [ j ]
>5867	Identifier	j
>5868	Identifier	points
>5869	Argument	points [ i ]
>5870	ArrayIndexing	points [ i ]
>5871	Identifier	i
>5872	Identifier	points
>5873	Callee	v3_sub
>5874	Identifier	v3_sub
>5875	Identifier	diff
>5876	Identifier	diff
>5877	IdentifierDeclType	v3_t
>5878	IncDecOp	 
>5879	IncDec	++
>5880	Identifier	j
>5881	Condition	 
>5882	RelationalExpression	j < num_points
>5883	Identifier	num_points
>5884	Identifier	j
>5885	ForInit	 
>5886	IdentifierDeclStatement	int j = 0 ;
>5887	IdentifierDecl	j = 0
>5888	AssignmentExpr	j = 0
>5889	PrimaryExpression	0
>5890	Identifier	j
>5891	Identifier	j
>5892	IdentifierDeclType	int
>5893	IdentifierDeclStatement	 
>5894	IdentifierDecl	sum = 0.0
>5895	AssignmentExpr	sum = 0.0
>5896	PrimaryExpression	0.0
>5897	Identifier	sum
>5898	Identifier	sum
>5899	IdentifierDeclType	double
>5900	IncDecOp	 
>5901	IncDec	++
>5902	Identifier	i
>5903	Condition	 
>5904	RelationalExpression	i < num_points
>5905	Identifier	num_points
>5906	Identifier	i
>5907	ForInit	 
>5908	IdentifierDeclStatement	int i = 0 ;
>5909	IdentifierDecl	i = 0
>5910	AssignmentExpr	i = 0
>5911	PrimaryExpression	0
>5912	Identifier	i
>5913	Identifier	i
>5914	IdentifierDeclType	int
>5915	IdentifierDeclStatement	 
>5916	IdentifierDecl	best_idx = - 1
>5917	AssignmentExpr	best_idx = - 1
>5918	UnaryOp	- 1
>5919	PrimaryExpression	1
>5920	UnaryOperator	-
>5921	Identifier	best_idx
>5922	Identifier	best_idx
>5923	IdentifierDeclType	int
>5924	IdentifierDeclStatement	 
>5925	IdentifierDecl	best_sum = DBL_MAX
>5926	AssignmentExpr	best_sum = DBL_MAX
>5927	Identifier	DBL_MAX
>5928	Identifier	DBL_MAX
>5929	Identifier	best_sum
>5930	IdentifierDeclType	double
>5931	IdentifierDeclStatement	 
>5932	IdentifierDecl	num_points = ( int ) points . size ( )
>5933	AssignmentExpr	num_points = ( int ) points . size ( )
>5934	CastExpression	( int ) points . size ( )
>5935	CallExpression	points . size ( )
>5936	ArgumentList	 
>5937	Callee	points . size
>5938	MemberAccess	points . size
>5939	Identifier	size
>5940	Identifier	points
>5941	CastTarget	int
>5942	Identifier	num_points
>5943	Identifier	num_points
>5944	IdentifierDeclType	int
>5970	FunctionDef	FindRobustVariance (v3_t mean , const std 
>5971	ParameterList	v3_t mean , const std 
>5972	Parameter	 
>5973	Identifier	points
>5974	ParameterType	const std 
>5975	Parameter	 
>5976	Identifier	mean
>5977	ParameterType	v3_t
>5978	ReturnType	double
>5979	CompoundStatement	 
>5980	ReturnStatement	 
>5981	ArrayIndexing	dists [ num_points / 2 ]
>5982	MultiplicativeExpression	num_points / 2
>5983	PrimaryExpression	2
>5984	Identifier	num_points
>5985	Identifier	dists
>5986	ExpressionStatement	 
>5987	CallExpression	nth_element ( dists . begin ( ) , dists . begin ( ) + num_points / 2 , dists . end ( ) )
>5988	ArgumentList	dists . begin ( )
>5989	Argument	dists . end ( )
>5990	CallExpression	dists . end ( )
>5991	ArgumentList	 
>5992	Callee	dists . end
>5993	MemberAccess	dists . end
>5994	Identifier	end
>5995	Identifier	dists
>5996	Argument	dists . begin ( ) + num_points / 2
>5997	AdditiveExpression	dists . begin ( ) + num_points / 2
>5998	MultiplicativeExpression	num_points / 2
>5999	PrimaryExpression	2
>6000	Identifier	num_points
>6001	CallExpression	dists . begin ( )
>6002	ArgumentList	 
>6003	Callee	dists . begin
>6004	MemberAccess	dists . begin
>6005	Identifier	begin
>6006	Identifier	dists
>6007	Argument	dists . begin ( )
>6008	CallExpression	dists . begin ( )
>6009	ArgumentList	 
>6010	Callee	dists . begin
>6011	MemberAccess	dists . begin
>6012	Identifier	begin
>6013	Identifier	dists
>6014	Callee	nth_element
>6015	Identifier	nth_element
>6016	ForStatement	for ( int i = 0 ; i < num_points ; i ++ )
>6017	CompoundStatement	 
>6018	ExpressionStatement	 
>6019	CallExpression	dists . push_back ( dist )
>6020	ArgumentList	dist
>6021	Argument	dist
>6022	Identifier	dist
>6023	Callee	dists . push_back
>6024	MemberAccess	dists . push_back
>6025	Identifier	push_back
>6026	Identifier	dists
>6027	IdentifierDeclStatement	 
>6028	IdentifierDecl	dist = v3_magsq ( disp )
>6029	AssignmentExpr	dist = v3_magsq ( disp )
>6030	CallExpression	v3_magsq ( disp )
>6031	ArgumentList	disp
>6032	Argument	disp
>6033	Identifier	disp
>6034	Callee	v3_magsq
>6035	Identifier	v3_magsq
>6036	Identifier	dist
>6037	Identifier	dist
>6038	IdentifierDeclType	double
>6039	IdentifierDeclStatement	 
>6040	IdentifierDecl	disp = v3_sub ( points [ i ] , mean )
>6041	AssignmentExpr	disp = v3_sub ( points [ i ] , mean )
>6042	CallExpression	v3_sub ( points [ i ] , mean )
>6043	ArgumentList	points [ i ]
>6044	Argument	mean
>6045	Identifier	mean
>6046	Argument	points [ i ]
>6047	ArrayIndexing	points [ i ]
>6048	Identifier	i
>6049	Identifier	points
>6050	Callee	v3_sub
>6051	Identifier	v3_sub
>6052	Identifier	disp
>6053	Identifier	disp
>6054	IdentifierDeclType	v3_t
>6055	IncDecOp	 
>6056	IncDec	++
>6057	Identifier	i
>6058	Condition	 
>6059	RelationalExpression	i < num_points
>6060	Identifier	num_points
>6061	Identifier	i
>6062	ForInit	 
>6063	IdentifierDeclStatement	int i = 0 ;
>6064	IdentifierDecl	i = 0
>6065	AssignmentExpr	i = 0
>6066	PrimaryExpression	0
>6067	Identifier	i
>6068	Identifier	i
>6069	IdentifierDeclType	int
>6070	IdentifierDeclStatement	 
>6071	IdentifierDecl	num_points = ( int ) points . size ( )
>6072	AssignmentExpr	num_points = ( int ) points . size ( )
>6073	CastExpression	( int ) points . size ( )
>6074	CallExpression	points . size ( )
>6075	ArgumentList	 
>6076	Callee	points . size
>6077	MemberAccess	points . size
>6078	Identifier	size
>6079	Identifier	points
>6080	CastTarget	int
>6081	Identifier	num_points
>6082	Identifier	num_points
>6083	IdentifierDeclType	int
>6084	IdentifierDeclStatement	 
>6085	IdentifierDecl	dists
>6086	Identifier	dists
>6087	IdentifierDeclType	std 
>6107	FunctionDef	FindRobustMean (const std 
>6108	ParameterList	const std 
>6109	Parameter	 
>6110	Identifier	points
>6111	ParameterType	const std 
>6112	ReturnType	v3_t
>6113	CompoundStatement	 
>6114	ReturnStatement	 
>6115	ArrayIndexing	points [ best_idx ]
>6116	Identifier	best_idx
>6117	Identifier	points
>6118	IfStatement	if ( best_idx == - 1 )
>6119	ReturnStatement	 
>6120	CallExpression	v3_new ( 0.0 , 0.0 , 0.0 )
>6121	ArgumentList	0.0
>6122	Argument	0.0
>6123	PrimaryExpression	0.0
>6124	Argument	0.0
>6125	PrimaryExpression	0.0
>6126	Argument	0.0
>6127	PrimaryExpression	0.0
>6128	Callee	v3_new
>6129	Identifier	v3_new
>6130	Condition	 
>6131	EqualityExpression	best_idx == - 1
>6132	UnaryOp	- 1
>6133	PrimaryExpression	1
>6134	UnaryOperator	-
>6135	Identifier	best_idx
>6136	ForStatement	for ( int i = 0 ; i < num_points ; i ++ )
>6137	CompoundStatement	 
>6138	IfStatement	if ( sum < best_sum )
>6139	CompoundStatement	 
>6140	ExpressionStatement	 
>6141	AssignmentExpr	best_idx = i
>6142	Identifier	i
>6143	Identifier	best_idx
>6144	ExpressionStatement	 
>6145	AssignmentExpr	best_sum = sum
>6146	Identifier	sum
>6147	Identifier	best_sum
>6148	Condition	 
>6149	RelationalExpression	sum < best_sum
>6150	Identifier	best_sum
>6151	Identifier	sum
>6152	ForStatement	for ( int j = 0 ; j < num_points ; j ++ )
>6153	CompoundStatement	 
>6154	ExpressionStatement	 
>6155	AssignmentExpr	sum += fabs ( Vx ( diff ) ) + fabs ( Vy ( diff ) ) + fabs ( Vz ( diff ) )
>6156	AdditiveExpression	fabs ( Vx ( diff ) ) + fabs ( Vy ( diff ) ) + fabs ( Vz ( diff ) )
>6157	AdditiveExpression	fabs ( Vy ( diff ) ) + fabs ( Vz ( diff ) )
>6158	CallExpression	fabs ( Vz ( diff ) )
>6159	ArgumentList	Vz ( diff )
>6160	Argument	Vz ( diff )
>6161	CallExpression	Vz ( diff )
>6162	ArgumentList	diff
>6163	Argument	diff
>6164	Identifier	diff
>6165	Callee	Vz
>6166	Identifier	Vz
>6167	Callee	fabs
>6168	Identifier	fabs
>6169	CallExpression	fabs ( Vy ( diff ) )
>6170	ArgumentList	Vy ( diff )
>6171	Argument	Vy ( diff )
>6172	CallExpression	Vy ( diff )
>6173	ArgumentList	diff
>6174	Argument	diff
>6175	Identifier	diff
>6176	Callee	Vy
>6177	Identifier	Vy
>6178	Callee	fabs
>6179	Identifier	fabs
>6180	CallExpression	fabs ( Vx ( diff ) )
>6181	ArgumentList	Vx ( diff )
>6182	Argument	Vx ( diff )
>6183	CallExpression	Vx ( diff )
>6184	ArgumentList	diff
>6185	Argument	diff
>6186	Identifier	diff
>6187	Callee	Vx
>6188	Identifier	Vx
>6189	Callee	fabs
>6190	Identifier	fabs
>6191	Identifier	sum
>6192	IdentifierDeclStatement	 
>6193	IdentifierDecl	diff = v3_sub ( points [ i ] , points [ j ] )
>6194	AssignmentExpr	diff = v3_sub ( points [ i ] , points [ j ] )
>6195	CallExpression	v3_sub ( points [ i ] , points [ j ] )
>6196	ArgumentList	points [ i ]
>6197	Argument	points [ j ]
>6198	ArrayIndexing	points [ j ]
>6199	Identifier	j
>6200	Identifier	points
>6201	Argument	points [ i ]
>6202	ArrayIndexing	points [ i ]
>6203	Identifier	i
>6204	Identifier	points
>6205	Callee	v3_sub
>6206	Identifier	v3_sub
>6207	Identifier	diff
>6208	Identifier	diff
>6209	IdentifierDeclType	v3_t
>6210	IncDecOp	 
>6211	IncDec	++
>6212	Identifier	j
>6213	Condition	 
>6214	RelationalExpression	j < num_points
>6215	Identifier	num_points
>6216	Identifier	j
>6217	ForInit	 
>6218	IdentifierDeclStatement	int j = 0 ;
>6219	IdentifierDecl	j = 0
>6220	AssignmentExpr	j = 0
>6221	PrimaryExpression	0
>6222	Identifier	j
>6223	Identifier	j
>6224	IdentifierDeclType	int
>6225	IdentifierDeclStatement	 
>6226	IdentifierDecl	sum = 0.0
>6227	AssignmentExpr	sum = 0.0
>6228	PrimaryExpression	0.0
>6229	Identifier	sum
>6230	Identifier	sum
>6231	IdentifierDeclType	double
>6232	IncDecOp	 
>6233	IncDec	++
>6234	Identifier	i
>6235	Condition	 
>6236	RelationalExpression	i < num_points
>6237	Identifier	num_points
>6238	Identifier	i
>6239	ForInit	 
>6240	IdentifierDeclStatement	int i = 0 ;
>6241	IdentifierDecl	i = 0
>6242	AssignmentExpr	i = 0
>6243	PrimaryExpression	0
>6244	Identifier	i
>6245	Identifier	i
>6246	IdentifierDeclType	int
>6247	IdentifierDeclStatement	 
>6248	IdentifierDecl	best_idx = - 1
>6249	AssignmentExpr	best_idx = - 1
>6250	UnaryOp	- 1
>6251	PrimaryExpression	1
>6252	UnaryOperator	-
>6253	Identifier	best_idx
>6254	Identifier	best_idx
>6255	IdentifierDeclType	int
>6256	IdentifierDeclStatement	 
>6257	IdentifierDecl	best_sum = DBL_MAX
>6258	AssignmentExpr	best_sum = DBL_MAX
>6259	Identifier	DBL_MAX
>6260	Identifier	DBL_MAX
>6261	Identifier	best_sum
>6262	IdentifierDeclType	double
>6263	IdentifierDeclStatement	 
>6264	IdentifierDecl	num_points = ( int ) points . size ( )
>6265	AssignmentExpr	num_points = ( int ) points . size ( )
>6266	CastExpression	( int ) points . size ( )
>6267	CallExpression	points . size ( )
>6268	ArgumentList	 
>6269	Callee	points . size
>6270	MemberAccess	points . size
>6271	Identifier	size
>6272	Identifier	points
>6273	CastTarget	int
>6274	Identifier	num_points
>6275	Identifier	num_points
>6276	IdentifierDeclType	int
>6300	FunctionDef	FitPlaneToPoints (const std 
>6301	ParameterList	const std 
>6302	Parameter	 
>6303	Identifier	up
>6304	ParameterType	double *
>6305	Parameter	 
>6306	Identifier	perp_to_up
>6307	ParameterType	bool
>6308	Parameter	 
>6309	Identifier	par_to_up
>6310	ParameterType	bool
>6311	Parameter	 
>6312	Identifier	ransac_threshold
>6313	ParameterType	double
>6314	Parameter	 
>6315	Identifier	ransac_rounds
>6316	ParameterType	int
>6317	Parameter	 
>6318	Identifier	plane
>6319	ParameterType	double *
>6320	Parameter	 
>6321	Identifier	indices
>6322	ParameterType	const std 
>6323	Parameter	 
>6324	Identifier	points
>6325	ParameterType	const std 
>6326	ReturnType	std 
>6327	CompoundStatement	 
>6328	ReturnStatement	 
>6329	Identifier	inliers
>6330	IfStatement	if ( ! par_to_up )
>6331	ElseStatement	else
>6332	CompoundStatement	 
>6333	ForStatement	for ( int i = 0 ; i < num_points ; i ++ )
>6334	CompoundStatement	 
>6335	IfStatement	if ( dist < ransac_threshold )
>6336	CompoundStatement	 
>6337	ExpressionStatement	 
>6338	CallExpression	inliers . push_back ( indices [ i ] )
>6339	ArgumentList	indices [ i ]
>6340	Argument	indices [ i ]
>6341	ArrayIndexing	indices [ i ]
>6342	Identifier	i
>6343	Identifier	indices
>6344	Callee	inliers . push_back
>6345	MemberAccess	inliers . push_back
>6346	Identifier	push_back
>6347	Identifier	inliers
>6348	Condition	 
>6349	RelationalExpression	dist < ransac_threshold
>6350	Identifier	ransac_threshold
>6351	Identifier	dist
>6352	IdentifierDeclStatement	 
>6353	IdentifierDecl	dist = plane_point_distance ( plane , pt )
>6354	AssignmentExpr	dist = plane_point_distance ( plane , pt )
>6355	CallExpression	plane_point_distance ( plane , pt )
>6356	ArgumentList	plane
>6357	Argument	pt
>6358	Identifier	pt
>6359	Argument	plane
>6360	Identifier	plane
>6361	Callee	plane_point_distance
>6362	Identifier	plane_point_distance
>6363	Identifier	dist
>6364	Identifier	dist
>6365	IdentifierDeclType	double
>6366	IdentifierDeclStatement	 
>6367	IdentifierDecl	pt = v3_new ( p . m_pos [ 0 ] , p . m_pos [ 1 ] , p . m_pos [ 2 ] )
>6368	AssignmentExpr	pt = v3_new ( p . m_pos [ 0 ] , p . m_pos [ 1 ] , p . m_pos [ 2 ] )
>6369	CallExpression	v3_new ( p . m_pos [ 0 ] , p . m_pos [ 1 ] , p . m_pos [ 2 ] )
>6370	ArgumentList	p . m_pos [ 0 ]
>6371	Argument	p . m_pos [ 2 ]
>6372	ArrayIndexing	p . m_pos [ 2 ]
>6373	PrimaryExpression	2
>6374	MemberAccess	p . m_pos
>6375	Identifier	m_pos
>6376	Identifier	p
>6377	Argument	p . m_pos [ 1 ]
>6378	ArrayIndexing	p . m_pos [ 1 ]
>6379	PrimaryExpression	1
>6380	MemberAccess	p . m_pos
>6381	Identifier	m_pos
>6382	Identifier	p
>6383	Argument	p . m_pos [ 0 ]
>6384	ArrayIndexing	p . m_pos [ 0 ]
>6385	PrimaryExpression	0
>6386	MemberAccess	p . m_pos
>6387	Identifier	m_pos
>6388	Identifier	p
>6389	Callee	v3_new
>6390	Identifier	v3_new
>6391	Identifier	pt
>6392	Identifier	pt
>6393	IdentifierDeclType	v3_t
>6394	IdentifierDeclStatement	 
>6395	IdentifierDecl	& p = points [ pt_idx ]
>6396	AssignmentExpr	& p = points [ pt_idx ]
>6397	ArrayIndexing	points [ pt_idx ]
>6398	Identifier	pt_idx
>6399	Identifier	points
>6400	Identifier	p
>6401	Identifier	p
>6402	IdentifierDeclType	const PointData &
>6403	IdentifierDeclStatement	 
>6404	IdentifierDecl	pt_idx = indices [ i ]
>6405	AssignmentExpr	pt_idx = indices [ i ]
>6406	ArrayIndexing	indices [ i ]
>6407	Identifier	i
>6408	Identifier	indices
>6409	Identifier	pt_idx
>6410	Identifier	pt_idx
>6411	IdentifierDeclType	int
>6412	IncDecOp	 
>6413	IncDec	++
>6414	Identifier	i
>6415	Condition	 
>6416	RelationalExpression	i < num_points
>6417	Identifier	num_points
>6418	Identifier	i
>6419	ForInit	 
>6420	IdentifierDeclStatement	int i = 0 ;
>6421	IdentifierDecl	i = 0
>6422	AssignmentExpr	i = 0
>6423	PrimaryExpression	0
>6424	Identifier	i
>6425	Identifier	i
>6426	IdentifierDeclType	int
>6427	ExpressionStatement	 
>6428	CallExpression	printf ( \"num_inliers = %d\n\" , num_inliers )
>6429	ArgumentList	\"num_inliers = %d\n\"
>6430	Argument	num_inliers
>6431	Identifier	num_inliers
>6432	Argument	\"num_inliers = %d\n\"
>6433	PrimaryExpression	\"num_inliers = %d\n\"
>6434	Callee	printf
>6435	Identifier	printf
>6436	ExpressionStatement	 
>6437	CallExpression	printf ( \"error = %0.3f\n\" , error )
>6438	ArgumentList	\"error = %0.3f\n\"
>6439	Argument	error
>6440	Identifier	error
>6441	Argument	\"error = %0.3f\n\"
>6442	PrimaryExpression	\"error = %0.3f\n\"
>6443	Callee	printf
>6444	Identifier	printf
>6445	ExpressionStatement	 
>6446	AssignmentExpr	plane [ 3 ] = line [ 2 ]
>6447	ArrayIndexing	line [ 2 ]
>6448	PrimaryExpression	2
>6449	Identifier	line
>6450	ArrayIndexing	plane [ 3 ]
>6451	PrimaryExpression	3
>6452	Identifier	plane
>6453	ExpressionStatement	 
>6454	AssignmentExpr	plane [ 2 ] = line [ 1 ]
>6455	ArrayIndexing	line [ 1 ]
>6456	PrimaryExpression	1
>6457	Identifier	line
>6458	ArrayIndexing	plane [ 2 ]
>6459	PrimaryExpression	2
>6460	Identifier	plane
>6461	ExpressionStatement	 
>6462	AssignmentExpr	plane [ 1 ] = 0.0
>6463	PrimaryExpression	0.0
>6464	ArrayIndexing	plane [ 1 ]
>6465	PrimaryExpression	1
>6466	Identifier	plane
>6467	ExpressionStatement	 
>6468	AssignmentExpr	plane [ 0 ] = line [ 0 ]
>6469	ArrayIndexing	line [ 0 ]
>6470	PrimaryExpression	0
>6471	Identifier	line
>6472	ArrayIndexing	plane [ 0 ]
>6473	PrimaryExpression	0
>6474	Identifier	plane
>6475	IdentifierDeclStatement	 
>6476	IdentifierDecl	error = fit_2D_line_ortreg_ransac ( num_points , pts , ransac_rounds , ransac_threshold , & num_inliers , line )
>6477	AssignmentExpr	error = fit_2D_line_ortreg_ransac ( num_points , pts , ransac_rounds , ransac_threshold , & num_inliers , \
>6478	CallExpression	fit_2D_line_ortreg_ransac ( num_points , pts , ransac_rounds , ransac_threshold , & num_inliers , line )
>6479	ArgumentList	num_points
>6480	Argument	line
>6481	Identifier	line
>6482	Argument	& num_inliers
>6483	UnaryOp	& num_inliers
>6484	Identifier	num_inliers
>6485	UnaryOperator	&
>6486	Argument	ransac_threshold
>6487	Identifier	ransac_threshold
>6488	Argument	ransac_rounds
>6489	Identifier	ransac_rounds
>6490	Argument	pts
>6491	Identifier	pts
>6492	Argument	num_points
>6493	Identifier	num_points
>6494	Callee	fit_2D_line_ortreg_ransac
>6495	Identifier	fit_2D_line_ortreg_ransac
>6496	Identifier	error
>6497	Identifier	error
>6498	IdentifierDeclType	double
>6499	IdentifierDeclStatement	 
>6500	IdentifierDecl	num_inliers = 0
>6501	AssignmentExpr	num_inliers = 0
>6502	PrimaryExpression	0
>6503	Identifier	num_inliers
>6504	Identifier	num_inliers
>6505	IdentifierDeclType	int
>6506	IdentifierDeclStatement	 
>6507	IdentifierDecl	line [ 3 ]
>6508	PrimaryExpression	3
>6509	Identifier	line
>6510	IdentifierDeclType	double [ 3 ]
>6511	ForStatement	for ( int i = 0 ; i < num_points ; i ++ )
>6512	CompoundStatement	 
>6513	ExpressionStatement	 
>6514	AssignmentExpr	pts [ i ] = v2_new ( pt . m_pos [ 0 ] , pt . m_pos [ 2 ] )
>6515	CallExpression	v2_new ( pt . m_pos [ 0 ] , pt . m_pos [ 2 ] )
>6516	ArgumentList	pt . m_pos [ 0 ]
>6517	Argument	pt . m_pos [ 2 ]
>6518	ArrayIndexing	pt . m_pos [ 2 ]
>6519	PrimaryExpression	2
>6520	MemberAccess	pt . m_pos
>6521	Identifier	m_pos
>6522	Identifier	pt
>6523	Argument	pt . m_pos [ 0 ]
>6524	ArrayIndexing	pt . m_pos [ 0 ]
>6525	PrimaryExpression	0
>6526	MemberAccess	pt . m_pos
>6527	Identifier	m_pos
>6528	Identifier	pt
>6529	Callee	v2_new
>6530	Identifier	v2_new
>6531	ArrayIndexing	pts [ i ]
>6532	Identifier	i
>6533	Identifier	pts
>6534	IdentifierDeclStatement	 
>6535	IdentifierDecl	& pt = points [ pt_idx ]
>6536	AssignmentExpr	& pt = points [ pt_idx ]
>6537	ArrayIndexing	points [ pt_idx ]
>6538	Identifier	pt_idx
>6539	Identifier	points
>6540	Identifier	pt
>6541	Identifier	pt
>6542	IdentifierDeclType	const PointData &
>6543	IdentifierDeclStatement	 
>6544	IdentifierDecl	pt_idx = indices [ i ]
>6545	AssignmentExpr	pt_idx = indices [ i ]
>6546	ArrayIndexing	indices [ i ]
>6547	Identifier	i
>6548	Identifier	indices
>6549	Identifier	pt_idx
>6550	Identifier	pt_idx
>6551	IdentifierDeclType	int
>6552	IncDecOp	 
>6553	IncDec	++
>6554	Identifier	i
>6555	Condition	 
>6556	RelationalExpression	i < num_points
>6557	Identifier	num_points
>6558	Identifier	i
>6559	ForInit	 
>6560	IdentifierDeclStatement	int i = 0 ;
>6561	IdentifierDecl	i = 0
>6562	AssignmentExpr	i = 0
>6563	PrimaryExpression	0
>6564	Identifier	i
>6565	Identifier	i
>6566	IdentifierDeclType	int
>6567	IdentifierDeclStatement	 
>6568	IdentifierDecl	* pts = new v2_t [ num_points ]
>6569	AssignmentExpr	* pts = new v2_t [ num_points ]
>6570	Identifier	num_points
>6571	Identifier	num_points
>6572	Identifier	pts
>6573	IdentifierDeclType	v2_t *
>6574	IdentifierDeclStatement	 
>6575	IdentifierDecl	num_points = ( int ) indices . size ( )
>6576	AssignmentExpr	num_points = ( int ) indices . size ( )
>6577	CastExpression	( int ) indices . size ( )
>6578	CallExpression	indices . size ( )
>6579	ArgumentList	 
>6580	Callee	indices . size
>6581	MemberAccess	indices . size
>6582	Identifier	size
>6583	Identifier	indices
>6584	CastTarget	int
>6585	Identifier	num_points
>6586	Identifier	num_points
>6587	IdentifierDeclType	int
>6588	ExpressionStatement	 
>6589	CallExpression	assert ( fabs ( up [ 1 ] - 1.0 ) < 1.0e-5 )
>6590	ArgumentList	fabs ( up [ 1 ] - 1.0 ) < 1.0e-5
>6591	Argument	fabs ( up [ 1 ] - 1.0 ) < 1.0e-5
>6592	RelationalExpression	fabs ( up [ 1 ] - 1.0 ) < 1.0e-5
>6593	PrimaryExpression	1.0e-5
>6594	CallExpression	fabs ( up [ 1 ] - 1.0 )
>6595	ArgumentList	up [ 1 ] - 1.0
>6596	Argument	up [ 1 ] - 1.0
>6597	AdditiveExpression	up [ 1 ] - 1.0
>6598	PrimaryExpression	1.0
>6599	ArrayIndexing	up [ 1 ]
>6600	PrimaryExpression	1
>6601	Identifier	up
>6602	Callee	fabs
>6603	Identifier	fabs
>6604	Callee	assert
>6605	Identifier	assert
>6606	CompoundStatement	 
>6607	ExpressionStatement	 
>6608	Identifier	pts
>6609	Statement	 
>6610	Statement	 
>6611	Statement	 
>6612	IfStatement	if ( perp_to_up )
>6613	CompoundStatement	 
>6614	ExpressionStatement	 
>6615	Identifier	pts_inlier
>6616	Statement	 
>6617	Statement	 
>6618	Statement	 
>6619	ExpressionStatement	 
>6620	AssignmentExpr	plane [ 3 ] = - dot
>6621	UnaryOp	- dot
>6622	Identifier	dot
>6623	UnaryOperator	-
>6624	ArrayIndexing	plane [ 3 ]
>6625	PrimaryExpression	3
>6626	Identifier	plane
>6627	ExpressionStatement	 
>6628	AssignmentExpr	plane [ 2 ] = up [ 2 ]
>6629	ArrayIndexing	up [ 2 ]
>6630	PrimaryExpression	2
>6631	Identifier	up
>6632	ArrayIndexing	plane [ 2 ]
>6633	PrimaryExpression	2
>6634	Identifier	plane
>6635	ExpressionStatement	 
>6636	AssignmentExpr	plane [ 1 ] = up [ 1 ]
>6637	ArrayIndexing	up [ 1 ]
>6638	PrimaryExpression	1
>6639	Identifier	up
>6640	ArrayIndexing	plane [ 1 ]
>6641	PrimaryExpression	1
>6642	Identifier	plane
>6643	ExpressionStatement	 
>6644	AssignmentExpr	plane [ 0 ] = up [ 0 ]
>6645	ArrayIndexing	up [ 0 ]
>6646	PrimaryExpression	0
>6647	Identifier	up
>6648	ArrayIndexing	plane [ 0 ]
>6649	PrimaryExpression	0
>6650	Identifier	plane
>6651	ExpressionStatement	 
>6652	CallExpression	matrix_product ( 1 , 3 , 3 , 1 , up , mean . p , & dot )
>6653	ArgumentList	1
>6654	Argument	& dot
>6655	UnaryOp	& dot
>6656	Identifier	dot
>6657	UnaryOperator	&
>6658	Argument	mean . p
>6659	MemberAccess	mean . p
>6660	Identifier	p
>6661	Identifier	mean
>6662	Argument	up
>6663	Identifier	up
>6664	Argument	1
>6665	PrimaryExpression	1
>6666	Argument	3
>6667	PrimaryExpression	3
>6668	Argument	3
>6669	PrimaryExpression	3
>6670	Argument	1
>6671	PrimaryExpression	1
>6672	Callee	matrix_product
>6673	Identifier	matrix_product
>6674	IdentifierDeclStatement	 
>6675	IdentifierDecl	dot
>6676	Identifier	dot
>6677	IdentifierDeclType	double
>6678	IdentifierDeclStatement	 
>6679	IdentifierDecl	mean = v3_mean ( num_inliers , pts_inlier )
>6680	AssignmentExpr	mean = v3_mean ( num_inliers , pts_inlier )
>6681	CallExpression	v3_mean ( num_inliers , pts_inlier )
>6682	ArgumentList	num_inliers
>6683	Argument	pts_inlier
>6684	Identifier	pts_inlier
>6685	Argument	num_inliers
>6686	Identifier	num_inliers
>6687	Callee	v3_mean
>6688	Identifier	v3_mean
>6689	Identifier	mean
>6690	Identifier	mean
>6691	IdentifierDeclType	v3_t
>6692	ForStatement	for ( int i = 0 ; i < num_inliers ; i ++ )
>6693	CompoundStatement	 
>6694	ExpressionStatement	 
>6695	AssignmentExpr	pts_inlier [ i ] = v3_new ( pt . m_pos [ 0 ] , pt . m_pos [ 1 ] , pt . m_pos [ 2 ] )
>6696	CallExpression	v3_new ( pt . m_pos [ 0 ] , pt . m_pos [ 1 ] , pt . m_pos [ 2 ] )
>6697	ArgumentList	pt . m_pos [ 0 ]
>6698	Argument	pt . m_pos [ 2 ]
>6699	ArrayIndexing	pt . m_pos [ 2 ]
>6700	PrimaryExpression	2
>6701	MemberAccess	pt . m_pos
>6702	Identifier	m_pos
>6703	Identifier	pt
>6704	Argument	pt . m_pos [ 1 ]
>6705	ArrayIndexing	pt . m_pos [ 1 ]
>6706	PrimaryExpression	1
>6707	MemberAccess	pt . m_pos
>6708	Identifier	m_pos
>6709	Identifier	pt
>6710	Argument	pt . m_pos [ 0 ]
>6711	ArrayIndexing	pt . m_pos [ 0 ]
>6712	PrimaryExpression	0
>6713	MemberAccess	pt . m_pos
>6714	Identifier	m_pos
>6715	Identifier	pt
>6716	Callee	v3_new
>6717	Identifier	v3_new
>6718	ArrayIndexing	pts_inlier [ i ]
>6719	Identifier	i
>6720	Identifier	pts_inlier
>6721	IdentifierDeclStatement	 
>6722	IdentifierDecl	& pt = points [ pt_idx ]
>6723	AssignmentExpr	& pt = points [ pt_idx ]
>6724	ArrayIndexing	points [ pt_idx ]
>6725	Identifier	pt_idx
>6726	Identifier	points
>6727	Identifier	pt
>6728	Identifier	pt
>6729	IdentifierDeclType	const PointData &
>6730	IdentifierDeclStatement	 
>6731	IdentifierDecl	pt_idx = inliers [ i ]
>6732	AssignmentExpr	pt_idx = inliers [ i ]
>6733	ArrayIndexing	inliers [ i ]
>6734	Identifier	i
>6735	Identifier	inliers
>6736	Identifier	pt_idx
>6737	Identifier	pt_idx
>6738	IdentifierDeclType	int
>6739	IncDecOp	 
>6740	IncDec	++
>6741	Identifier	i
>6742	Condition	 
>6743	RelationalExpression	i < num_inliers
>6744	Identifier	num_inliers
>6745	Identifier	i
>6746	ForInit	 
>6747	IdentifierDeclStatement	int i = 0 ;
>6748	IdentifierDecl	i = 0
>6749	AssignmentExpr	i = 0
>6750	PrimaryExpression	0
>6751	Identifier	i
>6752	Identifier	i
>6753	IdentifierDeclType	int
>6754	IdentifierDeclStatement	 
>6755	IdentifierDecl	* pts_inlier = new v3_t [ num_inliers ]
>6756	AssignmentExpr	* pts_inlier = new v3_t [ num_inliers ]
>6757	Identifier	num_inliers
>6758	Identifier	num_inliers
>6759	Identifier	pts_inlier
>6760	IdentifierDeclType	v3_t *
>6761	IdentifierDeclStatement	 
>6762	IdentifierDecl	num_inliers = ( int ) inliers . size ( )
>6763	AssignmentExpr	num_inliers = ( int ) inliers . size ( )
>6764	CastExpression	( int ) inliers . size ( )
>6765	CallExpression	inliers . size ( )
>6766	ArgumentList	 
>6767	Callee	inliers . size
>6768	MemberAccess	inliers . size
>6769	Identifier	size
>6770	Identifier	inliers
>6771	CastTarget	int
>6772	Identifier	num_inliers
>6773	Identifier	num_inliers
>6774	IdentifierDeclType	int
>6775	Condition	 
>6776	Identifier	perp_to_up
>6777	ForStatement	for ( int i = 0 ; i < num_points ; i ++ )
>6778	CompoundStatement	 
>6779	IfStatement	if ( dist < ransac_threshold )
>6780	CompoundStatement	 
>6781	ExpressionStatement	 
>6782	CallExpression	inliers . push_back ( indices [ i ] )
>6783	ArgumentList	indices [ i ]
>6784	Argument	indices [ i ]
>6785	ArrayIndexing	indices [ i ]
>6786	Identifier	i
>6787	Identifier	indices
>6788	Callee	inliers . push_back
>6789	MemberAccess	inliers . push_back
>6790	Identifier	push_back
>6791	Identifier	inliers
>6792	Condition	 
>6793	RelationalExpression	dist < ransac_threshold
>6794	Identifier	ransac_threshold
>6795	Identifier	dist
>6796	IdentifierDeclStatement	 
>6797	IdentifierDecl	dist = plane_point_distance ( plane , pts [ i ] )
>6798	AssignmentExpr	dist = plane_point_distance ( plane , pts [ i ] )
>6799	CallExpression	plane_point_distance ( plane , pts [ i ] )
>6800	ArgumentList	plane
>6801	Argument	pts [ i ]
>6802	ArrayIndexing	pts [ i ]
>6803	Identifier	i
>6804	Identifier	pts
>6805	Argument	plane
>6806	Identifier	plane
>6807	Callee	plane_point_distance
>6808	Identifier	plane_point_distance
>6809	Identifier	dist
>6810	Identifier	dist
>6811	IdentifierDeclType	double
>6812	IncDecOp	 
>6813	IncDec	++
>6814	Identifier	i
>6815	Condition	 
>6816	RelationalExpression	i < num_points
>6817	Identifier	num_points
>6818	Identifier	i
>6819	ForInit	 
>6820	IdentifierDeclStatement	int i = 0 ;
>6821	IdentifierDecl	i = 0
>6822	AssignmentExpr	i = 0
>6823	PrimaryExpression	0
>6824	Identifier	i
>6825	Identifier	i
>6826	IdentifierDeclType	int
>6827	ExpressionStatement	 
>6828	CallExpression	printf ( \"error = %0.3f\n\" , error )
>6829	ArgumentList	\"error = %0.3f\n\"
>6830	Argument	error
>6831	Identifier	error
>6832	Argument	\"error = %0.3f\n\"
>6833	PrimaryExpression	\"error = %0.3f\n\"
>6834	Callee	printf
>6835	Identifier	printf
>6836	IdentifierDeclStatement	 
>6837	IdentifierDecl	error = fit_3D_plane_ortreg_ransac ( num_points , pts , ransac_rounds , ransac_threshold , & num_inliers , plane )
>6838	AssignmentExpr	error = fit_3D_plane_ortreg_ransac ( num_points , pts , ransac_rounds , ransac_threshold , & num_inliers , \
>6839	CallExpression	fit_3D_plane_ortreg_ransac ( num_points , pts , ransac_rounds , ransac_threshold , & num_inliers , plane )
>6840	ArgumentList	num_points
>6841	Argument	plane
>6842	Identifier	plane
>6843	Argument	& num_inliers
>6844	UnaryOp	& num_inliers
>6845	Identifier	num_inliers
>6846	UnaryOperator	&
>6847	Argument	ransac_threshold
>6848	Identifier	ransac_threshold
>6849	Argument	ransac_rounds
>6850	Identifier	ransac_rounds
>6851	Argument	pts
>6852	Identifier	pts
>6853	Argument	num_points
>6854	Identifier	num_points
>6855	Callee	fit_3D_plane_ortreg_ransac
>6856	Identifier	fit_3D_plane_ortreg_ransac
>6857	Identifier	error
>6858	Identifier	error
>6859	IdentifierDeclType	double
>6860	IdentifierDeclStatement	 
>6861	IdentifierDecl	num_inliers = 0
>6862	AssignmentExpr	num_inliers = 0
>6863	PrimaryExpression	0
>6864	Identifier	num_inliers
>6865	Identifier	num_inliers
>6866	IdentifierDeclType	int
>6867	ForStatement	for ( int i = 0 ; i < num_points ; i ++ )
>6868	CompoundStatement	 
>6869	ExpressionStatement	 
>6870	AssignmentExpr	pts [ i ] = v3_new ( pt . m_pos [ 0 ] , pt . m_pos [ 1 ] , pt . m_pos [ 2 ] )
>6871	CallExpression	v3_new ( pt . m_pos [ 0 ] , pt . m_pos [ 1 ] , pt . m_pos [ 2 ] )
>6872	ArgumentList	pt . m_pos [ 0 ]
>6873	Argument	pt . m_pos [ 2 ]
>6874	ArrayIndexing	pt . m_pos [ 2 ]
>6875	PrimaryExpression	2
>6876	MemberAccess	pt . m_pos
>6877	Identifier	m_pos
>6878	Identifier	pt
>6879	Argument	pt . m_pos [ 1 ]
>6880	ArrayIndexing	pt . m_pos [ 1 ]
>6881	PrimaryExpression	1
>6882	MemberAccess	pt . m_pos
>6883	Identifier	m_pos
>6884	Identifier	pt
>6885	Argument	pt . m_pos [ 0 ]
>6886	ArrayIndexing	pt . m_pos [ 0 ]
>6887	PrimaryExpression	0
>6888	MemberAccess	pt . m_pos
>6889	Identifier	m_pos
>6890	Identifier	pt
>6891	Callee	v3_new
>6892	Identifier	v3_new
>6893	ArrayIndexing	pts [ i ]
>6894	Identifier	i
>6895	Identifier	pts
>6896	IdentifierDeclStatement	 
>6897	IdentifierDecl	& pt = points [ pt_idx ]
>6898	AssignmentExpr	& pt = points [ pt_idx ]
>6899	ArrayIndexing	points [ pt_idx ]
>6900	Identifier	pt_idx
>6901	Identifier	points
>6902	Identifier	pt
>6903	Identifier	pt
>6904	IdentifierDeclType	const PointData &
>6905	IdentifierDeclStatement	 
>6906	IdentifierDecl	pt_idx = indices [ i ]
>6907	AssignmentExpr	pt_idx = indices [ i ]
>6908	ArrayIndexing	indices [ i ]
>6909	Identifier	i
>6910	Identifier	indices
>6911	Identifier	pt_idx
>6912	Identifier	pt_idx
>6913	IdentifierDeclType	int
>6914	IncDecOp	 
>6915	IncDec	++
>6916	Identifier	i
>6917	Condition	 
>6918	RelationalExpression	i < num_points
>6919	Identifier	num_points
>6920	Identifier	i
>6921	ForInit	 
>6922	IdentifierDeclStatement	int i = 0 ;
>6923	IdentifierDecl	i = 0
>6924	AssignmentExpr	i = 0
>6925	PrimaryExpression	0
>6926	Identifier	i
>6927	Identifier	i
>6928	IdentifierDeclType	int
>6929	IdentifierDeclStatement	 
>6930	IdentifierDecl	* pts = new v3_t [ num_points ]
>6931	AssignmentExpr	* pts = new v3_t [ num_points ]
>6932	Identifier	num_points
>6933	Identifier	num_points
>6934	Identifier	pts
>6935	IdentifierDeclType	v3_t *
>6936	IdentifierDeclStatement	 
>6937	IdentifierDecl	num_points = ( int ) indices . size ( )
>6938	AssignmentExpr	num_points = ( int ) indices . size ( )
>6939	CastExpression	( int ) indices . size ( )
>6940	CallExpression	indices . size ( )
>6941	ArgumentList	 
>6942	Callee	indices . size
>6943	MemberAccess	indices . size
>6944	Identifier	size
>6945	Identifier	indices
>6946	CastTarget	int
>6947	Identifier	num_points
>6948	Identifier	num_points
>6949	IdentifierDeclType	int
>6950	Condition	 
>6951	UnaryOp	! par_to_up
>6952	Identifier	par_to_up
>6953	UnaryOperator	!
>6954	IdentifierDeclStatement	 
>6955	IdentifierDecl	inliers
>6956	Identifier	inliers
>6957	IdentifierDeclType	std 
>6958	IfStatement	if ( par_to_up && perp_to_up )
>6959	CompoundStatement	 
>6960	ExpressionStatement	 
>6961	AssignmentExpr	perp_to_up = false
>6962	Identifier	false
>6963	Identifier	perp_to_up
>6964	ExpressionStatement	 
>6965	Statement	 
>6966	Statement	 
>6967	Statement	 
>6968	Statement	 
>6969	Statement	 
>6970	Condition	 
>6971	AndExpression	par_to_up && perp_to_up
>6972	Identifier	perp_to_up
>6973	Identifier	par_to_up
>7028	FunctionDef	GetPointProjections (const CameraInfo & cam , const std 
>7029	ParameterList	const CameraInfo & cam , const std 
>7030	Parameter	 
>7031	Identifier	num_inside
>7032	ParameterType	int &
>7033	Parameter	 
>7034	Identifier	inside_only
>7035	ParameterType	bool
>7036	Parameter	 
>7037	Identifier	indices
>7038	ParameterType	const std 
>7039	Parameter	 
>7040	Identifier	points
>7041	ParameterType	const std 
>7042	Parameter	 
>7043	Identifier	cam
>7044	ParameterType	const CameraInfo &
>7045	ReturnType	std 
>7046	CompoundStatement	 
>7047	ReturnStatement	 
>7048	Identifier	projs
>7049	ForStatement	for ( int i = 0 ; i < num_points ; i ++ )
>7050	CompoundStatement	 
>7051	IfStatement	if ( inside_only && inside )
>7052	ElseStatement	else
>7053	IfStatement	if ( ! inside_only )
>7054	ExpressionStatement	 
>7055	CallExpression	projs . push_back ( v2_new ( proj [ 0 ] , proj [ 1 ] ) )
>7056	ArgumentList	v2_new ( proj [ 0 ] , proj [ 1 ] )
>7057	Argument	v2_new ( proj [ 0 ] , proj [ 1 ] )
>7058	CallExpression	v2_new ( proj [ 0 ] , proj [ 1 ] )
>7059	ArgumentList	proj [ 0 ]
>7060	Argument	proj [ 1 ]
>7061	ArrayIndexing	proj [ 1 ]
>7062	PrimaryExpression	1
>7063	Identifier	proj
>7064	Argument	proj [ 0 ]
>7065	ArrayIndexing	proj [ 0 ]
>7066	PrimaryExpression	0
>7067	Identifier	proj
>7068	Callee	v2_new
>7069	Identifier	v2_new
>7070	Callee	projs . push_back
>7071	MemberAccess	projs . push_back
>7072	Identifier	push_back
>7073	Identifier	projs
>7074	Condition	 
>7075	UnaryOp	! inside_only
>7076	Identifier	inside_only
>7077	UnaryOperator	!
>7078	ExpressionStatement	 
>7079	CallExpression	projs . push_back ( v2_new ( proj [ 0 ] , proj [ 1 ] ) )
>7080	ArgumentList	v2_new ( proj [ 0 ] , proj [ 1 ] )
>7081	Argument	v2_new ( proj [ 0 ] , proj [ 1 ] )
>7082	CallExpression	v2_new ( proj [ 0 ] , proj [ 1 ] )
>7083	ArgumentList	proj [ 0 ]
>7084	Argument	proj [ 1 ]
>7085	ArrayIndexing	proj [ 1 ]
>7086	PrimaryExpression	1
>7087	Identifier	proj
>7088	Argument	proj [ 0 ]
>7089	ArrayIndexing	proj [ 0 ]
>7090	PrimaryExpression	0
>7091	Identifier	proj
>7092	Callee	v2_new
>7093	Identifier	v2_new
>7094	Callee	projs . push_back
>7095	MemberAccess	projs . push_back
>7096	Identifier	push_back
>7097	Identifier	projs
>7098	Condition	 
>7099	AndExpression	inside_only && inside
>7100	Identifier	inside
>7101	Identifier	inside_only
>7102	IfStatement	if ( inside )
>7103	ExpressionStatement	 
>7104	IncDecOp	num_inside ++
>7105	IncDec	++
>7106	Identifier	num_inside
>7107	Condition	 
>7108	Identifier	inside
>7109	IdentifierDeclStatement	 
>7110	IdentifierDecl	inside = bbox . Contains ( proj [ 0 ] , proj [ 1 ] )
>7111	AssignmentExpr	inside = bbox . Contains ( proj [ 0 ] , proj [ 1 ] )
>7112	CallExpression	bbox . Contains ( proj [ 0 ] , proj [ 1 ] )
>7113	ArgumentList	proj [ 0 ]
>7114	Argument	proj [ 1 ]
>7115	ArrayIndexing	proj [ 1 ]
>7116	PrimaryExpression	1
>7117	Identifier	proj
>7118	Argument	proj [ 0 ]
>7119	ArrayIndexing	proj [ 0 ]
>7120	PrimaryExpression	0
>7121	Identifier	proj
>7122	Callee	bbox . Contains
>7123	MemberAccess	bbox . Contains
>7124	Identifier	Contains
>7125	Identifier	bbox
>7126	Identifier	inside
>7127	Identifier	inside
>7128	IdentifierDeclType	bool
>7129	IfStatement	if ( ! in_front )
>7130	ContinueStatement	 
>7131	Condition	 
>7132	UnaryOp	! in_front
>7133	Identifier	in_front
>7134	UnaryOperator	!
>7135	IdentifierDeclStatement	 
>7136	IdentifierDecl	in_front = cam . Project ( p . m_pos , proj )
>7137	AssignmentExpr	in_front = cam . Project ( p . m_pos , proj )
>7138	CallExpression	cam . Project ( p . m_pos , proj )
>7139	ArgumentList	p . m_pos
>7140	Argument	proj
>7141	Identifier	proj
>7142	Argument	p . m_pos
>7143	MemberAccess	p . m_pos
>7144	Identifier	m_pos
>7145	Identifier	p
>7146	Callee	cam . Project
>7147	MemberAccess	cam . Project
>7148	Identifier	Project
>7149	Identifier	cam
>7150	Identifier	in_front
>7151	Identifier	in_front
>7152	IdentifierDeclType	bool
>7153	IdentifierDeclStatement	 
>7154	IdentifierDecl	proj [ 2 ]
>7155	PrimaryExpression	2
>7156	Identifier	proj
>7157	IdentifierDeclType	double [ 2 ]
>7158	IdentifierDeclStatement	 
>7159	IdentifierDecl	& p = points [ pidx ]
>7160	AssignmentExpr	& p = points [ pidx ]
>7161	ArrayIndexing	points [ pidx ]
>7162	Identifier	pidx
>7163	Identifier	points
>7164	Identifier	p
>7165	Identifier	p
>7166	IdentifierDeclType	const PointData &
>7167	IdentifierDeclStatement	 
>7168	IdentifierDecl	pidx = indices [ i ]
>7169	AssignmentExpr	pidx = indices [ i ]
>7170	ArrayIndexing	indices [ i ]
>7171	Identifier	i
>7172	Identifier	indices
>7173	Identifier	pidx
>7174	Identifier	pidx
>7175	IdentifierDeclType	int
>7176	IncDecOp	 
>7177	IncDec	++
>7178	Identifier	i
>7179	Condition	 
>7180	RelationalExpression	i < num_points
>7181	Identifier	num_points
>7182	Identifier	i
>7183	ForInit	 
>7184	IdentifierDeclStatement	int i = 0 ;
>7185	IdentifierDecl	i = 0
>7186	AssignmentExpr	i = 0
>7187	PrimaryExpression	0
>7188	Identifier	i
>7189	Identifier	i
>7190	IdentifierDeclType	int
>7191	ExpressionStatement	 
>7192	AssignmentExpr	num_inside = 0
>7193	PrimaryExpression	0
>7194	Identifier	num_inside
>7195	IdentifierDeclStatement	 
>7196	IdentifierDecl	bbox = cam . GetBoundingBox ( )
>7197	AssignmentExpr	bbox = cam . GetBoundingBox ( )
>7198	CallExpression	cam . GetBoundingBox ( )
>7199	ArgumentList	 
>7200	Callee	cam . GetBoundingBox
>7201	MemberAccess	cam . GetBoundingBox
>7202	Identifier	GetBoundingBox
>7203	Identifier	cam
>7204	Identifier	bbox
>7205	Identifier	bbox
>7206	IdentifierDeclType	BoundingBox
>7207	IdentifierDeclStatement	 
>7208	IdentifierDecl	projs
>7209	Identifier	projs
>7210	IdentifierDeclType	std 
>7211	IdentifierDeclStatement	 
>7212	IdentifierDecl	num_points = ( int ) indices . size ( )
>7213	AssignmentExpr	num_points = ( int ) indices . size ( )
>7214	CastExpression	( int ) indices . size ( )
>7215	CallExpression	indices . size ( )
>7216	ArgumentList	 
>7217	Callee	indices . size
>7218	MemberAccess	indices . size
>7219	Identifier	size
>7220	Identifier	indices
>7221	CastTarget	int
>7222	Identifier	num_points
>7223	Identifier	num_points
>7224	IdentifierDeclType	int
<3=9,8,4
<4=5
<5=7,6
<9=10
<10=11
<11=29,12
<12=27,25,21,17,13
<13=14
<14=16,15
<17=18
<18=20,19
<21=22
<22=24,23
<25=26
<27=28
<29=30
<37=43,42,38
<38=39
<39=41,40
<43=314,307,296,285,270,255,240,229,218,198,178,158,147,136,122,66,55,44
<44=45
<45=53,46
<46=51,49,47
<47=48
<49=50
<51=52
<53=54
<55=56
<56=64,57
<57=62,60,58
<58=59
<60=61
<62=63
<64=65
<66=114,110,107,67
<67=96,79,68
<68=69
<69=77,70
<70=75,73,71
<71=72
<73=74
<75=76
<77=78
<79=80
<80=94,81
<81=92,90,88,82
<82=83
<83=85,84
<85=87,86
<88=89
<90=91
<92=93
<94=95
<96=97
<97=105,98
<98=103,101,99
<99=100
<101=102
<103=104
<105=106
<107=109,108
<110=111
<111=113,112
<114=115
<115=116
<116=121,120,117
<117=119,118
<122=123
<123=135,134,124
<124=133,125
<125=132,126
<126=128,127
<128=129
<129=131,130
<136=137
<137=145,138
<138=143,141,139
<139=140
<141=142
<143=144
<145=146
<147=148
<148=156,149
<149=154,152,150
<150=151
<152=153
<154=155
<156=157
<158=159
<159=176,160
<160=174,172,170,161
<161=162
<162=168,163
<163=164
<164=165
<165=167,166
<168=169
<170=171
<172=173
<174=175
<176=177
<178=179
<179=196,180
<180=194,192,190,181
<181=182
<182=188,183
<183=184
<184=185
<185=187,186
<188=189
<190=191
<192=193
<194=195
<196=197
<198=199
<199=216,200
<200=214,212,210,201
<201=202
<202=208,203
<203=204
<204=205
<205=207,206
<208=209
<210=211
<212=213
<214=215
<216=217
<218=219
<219=227,220
<220=225,223,221
<221=222
<223=224
<225=226
<227=228
<229=230
<230=238,231
<231=236,234,232
<232=233
<234=235
<236=237
<238=239
<240=241
<241=253,242
<242=251,249,247,243
<243=244
<244=246,245
<247=248
<249=250
<251=252
<253=254
<255=256
<256=268,257
<257=266,264,262,258
<258=259
<259=261,260
<262=263
<264=265
<266=267
<268=269
<270=271
<271=283,272
<272=281,279,277,273
<273=274
<274=276,275
<277=278
<279=280
<281=282
<283=284
<285=286
<286=294,287
<287=292,290,288
<288=289
<290=291
<292=293
<294=295
<296=297
<297=305,298
<298=303,301,299
<299=300
<301=302
<303=304
<305=306
<307=308
<308=313,312,309
<309=311,310
<332=338,337,333
<333=334
<334=336,335
<343=352,351,344
<344=348,345
<345=347,346
<348=350,349
<352=452,448,427,419,402,391,378,363,353
<353=354
<354=360,355
<355=357,356
<357=359,358
<360=362,361
<363=364
<364=376,365
<365=374,370,366
<366=367
<367=369,368
<370=371
<371=373,372
<374=375
<376=377
<378=379
<379=389,380
<380=387,385,381
<381=382
<382=384,383
<385=386
<387=388
<389=390
<391=392
<392=401,400,399,393
<393=398,394
<394=397,396,395
<402=403
<403=417,404
<404=413,411,405
<405=406
<406=410,407
<407=409,408
<411=412
<413=414
<414=416,415
<417=418
<419=420
<420=424,421
<421=423,422
<424=426,425
<427=428
<428=446,429
<429=444,442,440,438,436,434,430
<430=431
<431=433,432
<434=435
<436=437
<438=439
<440=441
<442=443
<444=445
<446=447
<448=449
<449=451,450
<452=453
<453=467,454
<454=463,461,455
<455=456
<456=460,457
<457=459,458
<461=462
<463=464
<464=466,465
<467=468
<486=492,491,487
<487=488
<488=490,489
<492=557,544,493
<493=536,532,529,494
<494=525,504,495
<495=496
<496=500,497
<497=498
<498=499
<500=501
<501=503,502
<504=505
<505=523,506
<506=521,519,513,507
<507=508
<508=512,509
<509=511,510
<513=514
<514=518,515
<515=517,516
<519=520
<521=522
<523=524
<525=526
<526=528,527
<529=531,530
<532=533
<533=535,534
<536=537
<537=538
<538=543,542,539
<539=541,540
<544=545
<545=555,546
<546=553,551,547
<547=548
<548=550,549
<551=552
<553=554
<555=556
<557=558
<558=560,559
<573=579,578,574
<574=575
<575=577,576
<579=638,627,589,580
<580=581
<581=587,582
<582=585,583
<583=584
<585=586
<587=588
<589=619,615,612,590
<590=591
<591=592
<592=610,593
<593=608,606,600,594
<594=595
<595=597,596
<597=599,598
<600=601
<601=603,602
<603=605,604
<606=607
<608=609
<610=611
<612=614,613
<615=616
<616=618,617
<619=620
<620=621
<621=626,625,622
<622=624,623
<627=628
<628=636,629
<629=634,632,630
<630=631
<632=633
<634=635
<636=637
<638=639
<639=651,650,640
<640=649,641
<641=648,642
<642=644,643
<644=645
<645=647,646
<666=669,668,667
<669=912,670
<670=904,900,897,671
<671=882,672
<672=874,870,867,673
<673=852,674
<674=844,840,837,675
<675=822,809,790,771,752,728,704,680,676
<676=677
<677=679,678
<680=681
<681=697,682
<682=694,683
<683=691,684
<684=688,685
<685=687,686
<688=690,689
<691=693,692
<694=696,695
<697=703,698
<698=700,699
<700=702,701
<704=705
<705=721,706
<706=718,707
<707=715,708
<708=712,709
<709=711,710
<712=714,713
<715=717,716
<718=720,719
<721=727,722
<722=724,723
<724=726,725
<728=729
<729=745,730
<730=742,731
<731=739,732
<732=736,733
<733=735,734
<736=738,737
<739=741,740
<742=744,743
<745=751,746
<746=748,747
<748=750,749
<752=753
<753=769,754
<754=767,765,763,757,755
<755=756
<757=758
<758=762,759
<759=761,760
<763=764
<765=766
<767=768
<769=770
<771=772
<772=788,773
<773=786,784,782,776,774
<774=775
<776=777
<777=781,778
<778=780,779
<782=783
<784=785
<786=787
<788=789
<790=791
<791=807,792
<792=805,803,801,795,793
<793=794
<795=796
<796=800,797
<797=799,798
<801=802
<803=804
<805=806
<807=808
<809=818,814,810
<810=813,812,811
<814=817,816,815
<818=821,820,819
<822=823
<823=836,835,824
<824=834,825
<825=830,827,826
<827=829,828
<830=831
<831=833,832
<837=839,838
<840=841
<841=843,842
<844=845
<845=846
<846=851,850,847
<847=849,848
<852=853
<853=866,865,854
<854=864,855
<855=860,857,856
<857=859,858
<860=861
<861=863,862
<867=869,868
<870=871
<871=873,872
<874=875
<875=876
<876=881,880,877
<877=879,878
<882=883
<883=896,895,884
<884=894,885
<885=890,887,886
<887=889,888
<890=891
<891=893,892
<897=899,898
<900=901
<901=903,902
<904=905
<905=906
<906=911,910,907
<907=909,908
<912=913
<913=918,917,914
<914=916,915
<946=949,948,947
<949=1082,1075,950
<950=1067,1063,1060,951
<951=1053,1040,1027,1014,1001,990,979,968,957,952
<952=953
<953=955,954
<955=956
<957=958
<958=966,959
<959=960
<960=961
<961=965,962
<962=964,963
<966=967
<968=969
<969=977,970
<970=971
<971=972
<972=976,973
<973=975,974
<977=978
<979=980
<980=988,981
<981=982
<982=983
<983=987,984
<984=986,985
<988=989
<990=991
<991=999,992
<992=993
<993=994
<994=998,995
<995=997,996
<999=1000
<1001=1002
<1002=1013,1012,1003
<1003=1011,1004
<1004=1010,1005
<1005=1007,1006
<1007=1009,1008
<1014=1015
<1015=1026,1025,1016
<1016=1024,1017
<1017=1023,1018
<1018=1020,1019
<1020=1022,1021
<1027=1028
<1028=1039,1038,1029
<1029=1037,1030
<1030=1036,1031
<1031=1033,1032
<1033=1035,1034
<1040=1041
<1041=1052,1051,1042
<1042=1050,1043
<1043=1049,1044
<1044=1046,1045
<1046=1048,1047
<1053=1054
<1054=1058,1055
<1055=1056
<1056=1057
<1058=1059
<1060=1062,1061
<1063=1064
<1064=1066,1065
<1067=1068
<1068=1069
<1069=1074,1073,1070
<1070=1072,1071
<1075=1076
<1076=1080,1077
<1077=1078
<1078=1079
<1080=1081
<1082=1083
<1083=1091,1084
<1084=1089,1087,1085
<1085=1086
<1087=1088
<1089=1090
<1091=1092
<1106=1115,1114,1107
<1107=1111,1108
<1108=1110,1109
<1111=1113,1112
<1115=1243,1228,1223,1204,1200,1179,1174,1159,1154,1135,1116
<1116=1117
<1117=1133,1118
<1118=1131,1129,1127,1125,1123,1121,1119
<1119=1120
<1121=1122
<1123=1124
<1125=1126
<1127=1128
<1129=1130
<1131=1132
<1133=1134
<1135=1136
<1136=1152,1137
<1137=1150,1148,1146,1144,1142,1140,1138
<1138=1139
<1140=1141
<1142=1143
<1144=1145
<1146=1147
<1148=1149
<1150=1151
<1152=1153
<1154=1155
<1155=1158,1157,1156
<1159=1160
<1160=1172,1161
<1161=1170,1168,1166,1164,1162
<1162=1163
<1164=1165
<1166=1167
<1168=1169
<1170=1171
<1172=1173
<1174=1175
<1175=1178,1177,1176
<1179=1180
<1180=1198,1181
<1181=1196,1194,1192,1190,1188,1186,1182
<1182=1183
<1183=1185,1184
<1186=1187
<1188=1189
<1190=1191
<1192=1193
<1194=1195
<1196=1197
<1198=1199
<1200=1201
<1201=1203,1202
<1204=1205
<1205=1221,1206
<1206=1219,1217,1215,1213,1211,1209,1207
<1207=1208
<1209=1210
<1211=1212
<1213=1214
<1215=1216
<1217=1218
<1219=1220
<1221=1222
<1223=1224
<1224=1227,1226,1225
<1228=1229
<1229=1241,1230
<1230=1239,1237,1235,1233,1231
<1231=1232
<1233=1234
<1235=1236
<1237=1238
<1239=1240
<1241=1242
<1243=1244
<1244=1247,1246,1245
<1261=1270,1269,1262
<1262=1266,1263
<1263=1265,1264
<1266=1268,1267
<1270=1309,1288,1273,1271
<1271=1272
<1273=1274
<1274=1286,1275
<1275=1284,1282,1280,1278,1276
<1276=1277
<1278=1279
<1280=1281
<1282=1283
<1284=1285
<1286=1287
<1288=1289
<1289=1307,1290
<1290=1305,1303,1301,1299,1297,1295,1291
<1291=1292
<1292=1294,1293
<1295=1296
<1297=1298
<1299=1300
<1301=1302
<1303=1304
<1305=1306
<1307=1308
<1309=1310
<1310=1312,1311
<1321=1330,1329,1322
<1322=1326,1323
<1323=1325,1324
<1326=1328,1327
<1330=1369,1348,1333,1331
<1331=1332
<1333=1334
<1334=1346,1335
<1335=1344,1342,1340,1338,1336
<1336=1337
<1338=1339
<1340=1341
<1342=1343
<1344=1345
<1346=1347
<1348=1349
<1349=1367,1350
<1350=1365,1363,1361,1359,1357,1355,1351
<1351=1352
<1352=1354,1353
<1355=1356
<1357=1358
<1359=1360
<1361=1362
<1363=1364
<1365=1366
<1367=1368
<1369=1370
<1370=1372,1371
<1381=1387,1386,1382
<1382=1383
<1383=1385,1384
<1387=1595,1590,1577,1572,1553,1537,1527,1517,1507,1499,1481,1476,1455,1448,1427,1406,1397,1388
<1388=1389
<1389=1395,1390
<1390=1393,1391
<1391=1392
<1393=1394
<1395=1396
<1397=1398
<1398=1404,1399
<1399=1402,1400
<1400=1401
<1402=1403
<1404=1405
<1406=1407
<1407=1425,1408
<1408=1423,1421,1419,1417,1415,1413,1409
<1409=1410
<1410=1412,1411
<1413=1414
<1415=1416
<1417=1418
<1419=1420
<1421=1422
<1423=1424
<1425=1426
<1427=1428
<1428=1446,1429
<1429=1444,1442,1440,1438,1436,1434,1430
<1430=1431
<1431=1433,1432
<1434=1435
<1436=1437
<1438=1439
<1440=1441
<1442=1443
<1444=1445
<1446=1447
<1448=1452,1449
<1449=1451,1450
<1452=1454,1453
<1455=1456
<1456=1474,1457
<1457=1472,1470,1468,1466,1462,1460,1458
<1458=1459
<1460=1461
<1462=1463
<1463=1465,1464
<1466=1467
<1468=1469
<1470=1471
<1472=1473
<1474=1475
<1476=1477
<1477=1480,1479,1478
<1481=1482
<1482=1498,1497,1496,1483
<1483=1495,1484
<1484=1492,1489,1486,1485
<1486=1488,1487
<1489=1491,1490
<1492=1494,1493
<1499=1500
<1500=1506,1501
<1501=1503,1502
<1503=1505,1504
<1507=1508
<1508=1514,1509
<1509=1511,1510
<1511=1513,1512
<1514=1516,1515
<1517=1518
<1518=1524,1519
<1519=1521,1520
<1521=1523,1522
<1524=1526,1525
<1527=1528
<1528=1534,1529
<1529=1531,1530
<1531=1533,1532
<1534=1536,1535
<1537=1538
<1538=1552,1551,1539
<1539=1550,1540
<1540=1548,1541
<1541=1546,1544,1542
<1542=1543
<1544=1545
<1546=1547
<1548=1549
<1553=1554
<1554=1570,1555
<1555=1568,1566,1564,1562,1560,1558,1556
<1556=1557
<1558=1559
<1560=1561
<1562=1563
<1564=1565
<1566=1567
<1568=1569
<1570=1571
<1572=1573
<1573=1576,1575,1574
<1577=1578
<1578=1588,1579
<1579=1586,1582,1580
<1580=1581
<1582=1583
<1583=1585,1584
<1586=1587
<1588=1589
<1590=1591
<1591=1594,1593,1592
<1595=1596
<1596=1612,1611,1610,1597
<1597=1609,1598
<1598=1606,1603,1600,1599
<1600=1602,1601
<1603=1605,1604
<1606=1608,1607
<1634=1646,1645,1635
<1635=1642,1639,1636
<1636=1638,1637
<1639=1641,1640
<1642=1644,1643
<1646=2103,2089,2027,2010,1991,1982,1963,1948,1937,1924,1817,1806,1795,1789,1783,1779,1651,1647
<1647=1648
<1648=1650,1649
<1651=1771,1767,1764,1652
<1652=1755,1653
<1653=1747,1732,1729,1654
<1654=1714,1707,1670,1655
<1655=1666,1656
<1656=1657
<1657=1658
<1658=1662,1659
<1659=1660
<1660=1661
<1662=1663
<1663=1665,1664
<1666=1667
<1667=1669,1668
<1670=1699,1688,1685,1671
<1671=1672
<1672=1679,1673
<1673=1675,1674
<1675=1676
<1676=1678,1677
<1679=1680
<1680=1682,1681
<1682=1684,1683
<1685=1687,1686
<1688=1689
<1689=1698,1690
<1690=1697,1691
<1691=1693,1692
<1693=1694
<1694=1696,1695
<1699=1700
<1700=1701
<1701=1706,1705,1702
<1702=1704,1703
<1707=1708
<1708=1713,1712,1709
<1709=1711,1710
<1714=1715
<1715=1728,1727,1716
<1716=1726,1717
<1717=1719,1718
<1719=1721,1720
<1721=1723,1722
<1723=1725,1724
<1729=1731,1730
<1732=1733
<1733=1746,1734
<1734=1745,1735
<1735=1737,1736
<1737=1738
<1738=1740,1739
<1740=1742,1741
<1742=1744,1743
<1747=1748
<1748=1749
<1749=1754,1753,1750
<1750=1752,1751
<1755=1756
<1756=1763,1762,1757
<1757=1761,1758
<1758=1760,1759
<1764=1766,1765
<1767=1768
<1768=1770,1769
<1771=1772
<1772=1773
<1773=1778,1777,1774
<1774=1776,1775
<1779=1780
<1780=1782,1781
<1783=1784
<1784=1788,1785
<1785=1787,1786
<1789=1790
<1790=1794,1791
<1791=1793,1792
<1795=1796
<1796=1805,1797
<1797=1803,1798
<1798=1799
<1799=1800
<1800=1802,1801
<1803=1804
<1806=1807
<1807=1816,1808
<1808=1814,1809
<1809=1810
<1810=1811
<1811=1813,1812
<1814=1815
<1817=1916,1912,1909,1818
<1818=1900,1895,1872,1863,1854,1845,1832,1819
<1819=1820
<1820=1831,1821
<1821=1829,1822
<1822=1827,1825,1823
<1823=1824
<1825=1826
<1827=1828
<1829=1830
<1832=1833
<1833=1844,1834
<1834=1842,1835
<1835=1840,1838,1836
<1836=1837
<1838=1839
<1840=1841
<1842=1843
<1845=1846
<1846=1852,1847
<1847=1850,1848
<1848=1849
<1850=1851
<1852=1853
<1854=1855
<1855=1861,1856
<1856=1859,1857
<1857=1858
<1859=1860
<1861=1862
<1863=1868,1864
<1864=1867,1866,1865
<1868=1871,1870,1869
<1872=1873
<1873=1893,1874
<1874=1891,1889,1887,1885,1879,1877,1875
<1875=1876
<1877=1878
<1879=1880
<1880=1882,1881
<1882=1884,1883
<1885=1886
<1887=1888
<1889=1890
<1891=1892
<1893=1894
<1895=1896
<1896=1899,1898,1897
<1900=1901
<1901=1908,1907,1902
<1902=1906,1903
<1903=1905,1904
<1909=1911,1910
<1912=1913
<1913=1915,1914
<1916=1917
<1917=1918
<1918=1923,1922,1919
<1919=1921,1920
<1924=1931,1925
<1925=1930,1929,1926
<1926=1928,1927
<1931=1936,1935,1932
<1932=1934,1933
<1937=1938
<1938=1946,1939
<1939=1944,1942,1940
<1940=1941
<1942=1943
<1944=1945
<1946=1947
<1948=1949
<1949=1961,1950
<1950=1959,1957,1951
<1951=1952
<1952=1956,1953
<1953=1955,1954
<1957=1958
<1959=1960
<1961=1962
<1963=1964
<1964=1980,1965
<1965=1978,1976,1974,1972,1970,1968,1966
<1966=1967
<1968=1969
<1970=1971
<1972=1973
<1974=1975
<1976=1977
<1978=1979
<1980=1981
<1982=1983
<1983=1989,1984
<1984=1987,1985
<1985=1986
<1987=1988
<1989=1990
<1991=1992
<1992=2008,1993
<1993=2006,2004,2002,2000,1998,1996,1994
<1994=1995
<1996=1997
<1998=1999
<2000=2001
<2002=2003
<2004=2005
<2006=2007
<2008=2009
<2010=2011
<2011=2025,2012
<2012=2023,2021,2019,2015,2013
<2013=2014
<2015=2016
<2016=2018,2017
<2019=2020
<2021=2022
<2023=2024
<2025=2026
<2027=2081,2077,2074,2028
<2028=2065,2053,2041,2029
<2029=2030
<2030=2038,2031
<2031=2033,2032
<2033=2035,2034
<2035=2037,2036
<2038=2040,2039
<2041=2042
<2042=2050,2043
<2043=2045,2044
<2045=2047,2046
<2047=2049,2048
<2050=2052,2051
<2053=2054
<2054=2062,2055
<2055=2057,2056
<2057=2059,2058
<2059=2061,2060
<2062=2064,2063
<2065=2066
<2066=2073,2072,2067
<2067=2071,2068
<2068=2070,2069
<2074=2076,2075
<2077=2078
<2078=2080,2079
<2081=2082
<2082=2083
<2083=2088,2087,2084
<2084=2086,2085
<2089=2090
<2090=2102,2101,2091
<2091=2100,2092
<2092=2099,2093
<2093=2095,2094
<2095=2096
<2096=2098,2097
<2103=2104
<2104=2113,2112,2111,2105
<2105=2110,2106
<2106=2109,2108,2107
<2164=2172,2165
<2165=2169,2166
<2166=2168,2167
<2169=2171,2170
<2172=2177,2173
<2173=2174
<2174=2176,2175
<2177=2193,2189,2186,2178
<2178=2179
<2179=2183,2180
<2180=2182,2181
<2183=2185,2184
<2186=2188,2187
<2189=2190
<2190=2192,2191
<2193=2194
<2194=2195
<2195=2200,2199,2196
<2196=2198,2197
<2212=2218,2217,2213
<2213=2214
<2214=2216,2215
<2218=2408,2221,2219
<2219=2220
<2221=2400,2396,2393,2222
<2222=2383,2379,2371,2363,2336,2309,2286,2275,2264,2257,2230,2223
<2223=2226,2224
<2224=2225
<2226=2227
<2227=2229,2228
<2230=2249,2245,2232,2231
<2232=2236,2233
<2233=2235,2234
<2236=2244,2237
<2237=2241,2238
<2238=2240,2239
<2241=2243,2242
<2245=2246
<2246=2248,2247
<2249=2250
<2250=2251
<2251=2256,2255,2252
<2252=2254,2253
<2257=2258
<2258=2263,2262,2259
<2259=2261,2260
<2264=2265
<2265=2273,2266
<2266=2271,2269,2267
<2267=2268
<2269=2270
<2271=2272
<2273=2274
<2275=2276
<2276=2284,2277
<2277=2282,2280,2278
<2278=2279
<2280=2281
<2282=2283
<2284=2285
<2286=2287
<2287=2307,2288
<2288=2305,2303,2301,2299,2297,2291,2289
<2289=2290
<2291=2292
<2292=2296,2293
<2293=2295,2294
<2297=2298
<2299=2300
<2301=2302
<2303=2304
<2305=2306
<2307=2308
<2309=2310
<2310=2334,2311
<2311=2332,2330,2328,2326,2320,2314,2312
<2312=2313
<2314=2315
<2315=2319,2316
<2316=2318,2317
<2320=2321
<2321=2325,2322
<2322=2324,2323
<2326=2327
<2328=2329
<2330=2331
<2332=2333
<2334=2335
<2336=2337
<2337=2361,2338
<2338=2359,2357,2355,2353,2347,2341,2339
<2339=2340
<2341=2342
<2342=2346,2343
<2343=2345,2344
<2347=2348
<2348=2352,2349
<2349=2351,2350
<2353=2354
<2355=2356
<2357=2358
<2359=2360
<2361=2362
<2363=2364
<2364=2370,2365
<2365=2367,2366
<2367=2369,2368
<2371=2372
<2372=2378,2373
<2373=2375,2374
<2375=2377,2376
<2379=2380
<2380=2382,2381
<2383=2390,2387,2384
<2384=2386,2385
<2387=2389,2388
<2390=2392,2391
<2393=2395,2394
<2396=2397
<2397=2399,2398
<2400=2401
<2401=2402
<2402=2407,2406,2403
<2403=2405,2404
<2408=2425,2421,2417,2413,2409
<2409=2412,2411,2410
<2413=2416,2415,2414
<2417=2420,2419,2418
<2421=2424,2423,2422
<2425=2428,2427,2426
<2450=2462,2461,2451
<2451=2458,2455,2452
<2452=2454,2453
<2455=2457,2456
<2458=2460,2459
<2462=2576,2553,2530,2520,2507,2493,2479,2465,2463
<2463=2464
<2465=2466
<2466=2476,2467
<2467=2473,2468
<2468=2472,2469
<2469=2471,2470
<2473=2475,2474
<2476=2478,2477
<2479=2480
<2480=2490,2481
<2481=2487,2482
<2482=2486,2483
<2483=2485,2484
<2487=2489,2488
<2490=2492,2491
<2493=2494
<2494=2504,2495
<2495=2501,2496
<2496=2500,2497
<2497=2499,2498
<2501=2503,2502
<2504=2506,2505
<2507=2508
<2508=2519,2518,2509
<2509=2517,2510
<2510=2512,2511
<2512=2514,2513
<2514=2516,2515
<2520=2526,2521
<2521=2522
<2522=2523
<2523=2525,2524
<2526=2527
<2527=2529,2528
<2530=2531
<2531=2551,2532
<2532=2549,2547,2545,2543,2539,2537,2533
<2533=2534
<2534=2536,2535
<2537=2538
<2539=2540
<2540=2542,2541
<2543=2544
<2545=2546
<2547=2548
<2549=2550
<2551=2552
<2553=2554
<2554=2574,2555
<2555=2572,2570,2568,2566,2562,2560,2556
<2556=2557
<2557=2559,2558
<2560=2561
<2562=2563
<2563=2565,2564
<2566=2567
<2568=2569
<2570=2571
<2572=2573
<2574=2575
<2576=2580,2577
<2577=2579,2578
<2580=2582,2581
<2600=2630,2629,2601
<2601=2626,2623,2620,2617,2614,2611,2608,2605,2602
<2602=2604,2603
<2605=2607,2606
<2608=2610,2609
<2611=2613,2612
<2614=2616,2615
<2617=2619,2618
<2620=2622,2621
<2623=2625,2624
<2626=2628,2627
<2630=3016,3005,2965,2960,2947,2942,2923,2906,2885,2864,2843,2822,2817,2796,2775,2754,2733,2713,2693,2673,2653,2631
<2631=2637,2635,2632
<2632=2633
<2633=2634
<2635=2636
<2637=2638
<2638=2650,2639
<2639=2647,2640
<2640=2644,2641
<2641=2643,2642
<2644=2646,2645
<2647=2649,2648
<2650=2652,2651
<2653=2654
<2654=2672,2671,2655
<2655=2670,2656
<2656=2668,2657
<2657=2666,2662,2658
<2658=2659
<2659=2661,2660
<2662=2663
<2663=2665,2664
<2666=2667
<2668=2669
<2673=2674
<2674=2692,2691,2675
<2675=2690,2676
<2676=2688,2677
<2677=2686,2682,2678
<2678=2679
<2679=2681,2680
<2682=2683
<2683=2685,2684
<2686=2687
<2688=2689
<2693=2694
<2694=2712,2711,2695
<2695=2710,2696
<2696=2708,2697
<2697=2706,2702,2698
<2698=2699
<2699=2701,2700
<2702=2703
<2703=2705,2704
<2706=2707
<2708=2709
<2713=2714
<2714=2732,2731,2715
<2715=2730,2716
<2716=2728,2717
<2717=2726,2722,2718
<2718=2719
<2719=2721,2720
<2722=2723
<2723=2725,2724
<2726=2727
<2728=2729
<2733=2734
<2734=2752,2735
<2735=2750,2748,2746,2744,2742,2740,2736
<2736=2737
<2737=2739,2738
<2740=2741
<2742=2743
<2744=2745
<2746=2747
<2748=2749
<2750=2751
<2752=2753
<2754=2755
<2755=2773,2756
<2756=2771,2769,2767,2765,2763,2761,2757
<2757=2758
<2758=2760,2759
<2761=2762
<2763=2764
<2765=2766
<2767=2768
<2769=2770
<2771=2772
<2773=2774
<2775=2776
<2776=2794,2777
<2777=2792,2790,2788,2786,2784,2782,2778
<2778=2779
<2779=2781,2780
<2782=2783
<2784=2785
<2786=2787
<2788=2789
<2790=2791
<2792=2793
<2794=2795
<2796=2797
<2797=2815,2798
<2798=2813,2811,2809,2807,2805,2803,2799
<2799=2800
<2800=2802,2801
<2803=2804
<2805=2806
<2807=2808
<2809=2810
<2811=2812
<2813=2814
<2815=2816
<2817=2818
<2818=2821,2820,2819
<2822=2823
<2823=2842,2841,2840,2824
<2824=2839,2825
<2825=2834,2829,2826
<2826=2828,2827
<2829=2833,2830
<2830=2832,2831
<2834=2838,2835
<2835=2837,2836
<2843=2844
<2844=2863,2862,2861,2845
<2845=2860,2846
<2846=2855,2850,2847
<2847=2849,2848
<2850=2854,2851
<2851=2853,2852
<2855=2859,2856
<2856=2858,2857
<2864=2865
<2865=2884,2883,2882,2866
<2866=2881,2867
<2867=2876,2871,2868
<2868=2870,2869
<2871=2875,2872
<2872=2874,2873
<2876=2880,2877
<2877=2879,2878
<2885=2886
<2886=2905,2904,2903,2887
<2887=2902,2888
<2888=2897,2892,2889
<2889=2891,2890
<2892=2896,2893
<2893=2895,2894
<2897=2901,2898
<2898=2900,2899
<2906=2907
<2907=2921,2908
<2908=2919,2917,2915,2911,2909
<2909=2910
<2911=2912
<2912=2914,2913
<2915=2916
<2917=2918
<2919=2920
<2921=2922
<2923=2924
<2924=2940,2925
<2925=2938,2936,2934,2932,2930,2928,2926
<2926=2927
<2928=2929
<2930=2931
<2932=2933
<2934=2935
<2936=2937
<2938=2939
<2940=2941
<2942=2943
<2943=2946,2945,2944
<2947=2948
<2948=2958,2949
<2949=2956,2954,2952,2950
<2950=2951
<2952=2953
<2954=2955
<2956=2957
<2958=2959
<2960=2961
<2961=2964,2963,2962
<2965=2985,2966
<2966=2967
<2967=2983,2968
<2968=2981,2979,2977,2975,2973,2971,2969
<2969=2970
<2971=2972
<2973=2974
<2975=2976
<2977=2978
<2979=2980
<2981=2982
<2983=2984
<2985=2986
<2986=3002,2987
<2987=2999,2988
<2988=2994,2989
<2989=2993,2990
<2990=2992,2991
<2994=2998,2995
<2995=2997,2996
<2999=3001,3000
<3002=3004,3003
<3005=3010,3006
<3006=3007
<3007=3009,3008
<3010=3011
<3011=3015,3012
<3012=3014,3013
<3016=3021,3017
<3017=3018
<3018=3020,3019
<3021=3022
<3022=3026,3023
<3023=3025,3024
<3054=3060,3059,3055
<3055=3056
<3056=3058,3057
<3060=3295,3274,3253,3232,3207,3190,3186,3173,3130,3126,3113,3070,3061
<3061=3062
<3062=3068,3063
<3063=3066,3064
<3064=3065
<3066=3067
<3068=3069
<3070=3105,3101,3098,3071
<3071=3094,3081,3072
<3072=3073
<3073=3077,3074
<3074=3075
<3075=3076
<3077=3078
<3078=3080,3079
<3081=3082
<3082=3092,3083
<3083=3090,3088,3084
<3084=3085
<3085=3087,3086
<3088=3089
<3090=3091
<3092=3093
<3094=3095
<3095=3097,3096
<3098=3100,3099
<3101=3102
<3102=3104,3103
<3105=3106
<3106=3107
<3107=3112,3111,3108
<3108=3110,3109
<3113=3114
<3114=3124,3115
<3115=3122,3120,3116
<3116=3117
<3117=3119,3118
<3120=3121
<3122=3123
<3124=3125
<3126=3127
<3127=3129,3128
<3130=3165,3161,3158,3131
<3131=3154,3141,3132
<3132=3133
<3133=3137,3134
<3134=3135
<3135=3136
<3137=3138
<3138=3140,3139
<3141=3142
<3142=3152,3143
<3143=3150,3148,3144
<3144=3145
<3145=3147,3146
<3148=3149
<3150=3151
<3152=3153
<3154=3155
<3155=3157,3156
<3158=3160,3159
<3161=3162
<3162=3164,3163
<3165=3166
<3166=3167
<3167=3172,3171,3168
<3168=3170,3169
<3173=3174
<3174=3184,3175
<3175=3182,3180,3176
<3176=3177
<3177=3179,3178
<3180=3181
<3182=3183
<3184=3185
<3186=3187
<3187=3189,3188
<3190=3191
<3191=3205,3192
<3192=3203,3201,3197,3193
<3193=3194
<3194=3196,3195
<3197=3198
<3198=3200,3199
<3201=3202
<3203=3204
<3205=3206
<3207=3208
<3208=3230,3209
<3209=3228,3226,3222,3218,3214,3210
<3210=3211
<3211=3213,3212
<3214=3215
<3215=3217,3216
<3218=3219
<3219=3221,3220
<3222=3223
<3223=3225,3224
<3226=3227
<3228=3229
<3230=3231
<3232=3233
<3233=3251,3234
<3234=3249,3247,3243,3239,3235
<3235=3236
<3236=3238,3237
<3239=3240
<3240=3242,3241
<3243=3244
<3244=3246,3245
<3247=3248
<3249=3250
<3251=3252
<3253=3254
<3254=3272,3255
<3255=3270,3268,3264,3260,3256
<3256=3257
<3257=3259,3258
<3260=3261
<3261=3263,3262
<3264=3265
<3265=3267,3266
<3268=3269
<3270=3271
<3272=3273
<3274=3275
<3275=3293,3276
<3276=3291,3289,3285,3281,3277
<3277=3278
<3278=3280,3279
<3281=3282
<3282=3284,3283
<3285=3286
<3286=3288,3287
<3289=3290
<3291=3292
<3293=3294
<3295=3296
<3296=3318,3297
<3297=3316,3314,3310,3306,3302,3298
<3298=3299
<3299=3301,3300
<3302=3303
<3303=3305,3304
<3306=3307
<3307=3309,3308
<3310=3311
<3311=3313,3312
<3314=3315
<3316=3317
<3318=3319
<3343=3349,3348,3344
<3344=3345
<3345=3347,3346
<3349=3579,3558,3537,3516,3491,3478,3460,3423,3414,3396,3359,3350
<3350=3351
<3351=3357,3352
<3352=3355,3353
<3353=3354
<3355=3356
<3357=3358
<3359=3388,3377,3374,3360
<3360=3361
<3361=3362
<3362=3372,3363
<3363=3370,3368,3364
<3364=3365
<3365=3367,3366
<3368=3369
<3370=3371
<3372=3373
<3374=3376,3375
<3377=3378
<3378=3387,3379
<3379=3386,3380
<3380=3382,3381
<3382=3383
<3383=3385,3384
<3388=3389
<3389=3390
<3390=3395,3394,3391
<3391=3393,3392
<3396=3397
<3397=3412,3398
<3398=3410,3408,3399
<3399=3400
<3400=3407,3401
<3401=3403,3402
<3403=3404
<3404=3406,3405
<3408=3409
<3410=3411
<3412=3413
<3414=3415
<3415=3421,3416
<3416=3419,3417
<3417=3418
<3419=3420
<3421=3422
<3423=3452,3441,3438,3424
<3424=3425
<3425=3426
<3426=3436,3427
<3427=3434,3432,3428
<3428=3429
<3429=3431,3430
<3432=3433
<3434=3435
<3436=3437
<3438=3440,3439
<3441=3442
<3442=3451,3443
<3443=3450,3444
<3444=3446,3445
<3446=3447
<3447=3449,3448
<3452=3453
<3453=3454
<3454=3459,3458,3455
<3455=3457,3456
<3460=3461
<3461=3476,3462
<3462=3474,3472,3463
<3463=3464
<3464=3471,3465
<3465=3467,3466
<3467=3468
<3468=3470,3469
<3472=3473
<3474=3475
<3476=3477
<3478=3479
<3479=3489,3480
<3480=3487,3485,3483,3481
<3481=3482
<3483=3484
<3485=3486
<3487=3488
<3489=3490
<3491=3492
<3492=3514,3493
<3493=3512,3510,3506,3502,3498,3494
<3494=3495
<3495=3497,3496
<3498=3499
<3499=3501,3500
<3502=3503
<3503=3505,3504
<3506=3507
<3507=3509,3508
<3510=3511
<3512=3513
<3514=3515
<3516=3517
<3517=3535,3518
<3518=3533,3531,3527,3523,3519
<3519=3520
<3520=3522,3521
<3523=3524
<3524=3526,3525
<3527=3528
<3528=3530,3529
<3531=3532
<3533=3534
<3535=3536
<3537=3538
<3538=3556,3539
<3539=3554,3552,3548,3544,3540
<3540=3541
<3541=3543,3542
<3544=3545
<3545=3547,3546
<3548=3549
<3549=3551,3550
<3552=3553
<3554=3555
<3556=3557
<3558=3559
<3559=3577,3560
<3560=3575,3573,3569,3565,3561
<3561=3562
<3562=3564,3563
<3565=3566
<3566=3568,3567
<3569=3570
<3570=3572,3571
<3573=3574
<3575=3576
<3577=3578
<3579=3580
<3580=3600,3581
<3581=3598,3596,3592,3588,3584,3582
<3582=3583
<3584=3585
<3585=3587,3586
<3588=3589
<3589=3591,3590
<3592=3593
<3593=3595,3594
<3596=3597
<3598=3599
<3600=3601
<3627=3630,3629,3628
<3630=4147,4130,4121,4106,4091,4076,4061,4045,4029,4013,3997,3981,3965,3949,3933,3917,3901,3885,3869,3858,3838,3812,3803,3794,3785,3776,3769,3757,3740,3728,3711,3699,3682,3670,3653,3648,3638,3631
<3631=3632
<3632=3636,3633
<3633=3634
<3634=3635
<3636=3637
<3638=3646,3639
<3639=3640
<3640=3644,3641
<3641=3642
<3642=3643
<3644=3645
<3646=3647
<3648=3649
<3649=3651,3650
<3651=3652
<3653=3654
<3654=3668,3655
<3655=3664,3660,3656
<3656=3657
<3657=3659,3658
<3660=3661
<3661=3663,3662
<3664=3665
<3665=3667,3666
<3668=3669
<3670=3680,3671
<3671=3672
<3672=3678,3673
<3673=3676,3674
<3674=3675
<3676=3677
<3678=3679
<3680=3681
<3682=3683
<3683=3697,3684
<3684=3693,3689,3685
<3685=3686
<3686=3688,3687
<3689=3690
<3690=3692,3691
<3693=3694
<3694=3696,3695
<3697=3698
<3699=3709,3700
<3700=3701
<3701=3707,3702
<3702=3705,3703
<3703=3704
<3705=3706
<3707=3708
<3709=3710
<3711=3712
<3712=3726,3713
<3713=3722,3718,3714
<3714=3715
<3715=3717,3716
<3718=3719
<3719=3721,3720
<3722=3723
<3723=3725,3724
<3726=3727
<3728=3738,3729
<3729=3730
<3730=3736,3731
<3731=3734,3732
<3732=3733
<3734=3735
<3736=3737
<3738=3739
<3740=3741
<3741=3755,3742
<3742=3751,3747,3743
<3743=3744
<3744=3746,3745
<3747=3748
<3748=3750,3749
<3751=3752
<3752=3754,3753
<3755=3756
<3757=3767,3758
<3758=3759
<3759=3765,3760
<3760=3763,3761
<3761=3762
<3763=3764
<3765=3766
<3767=3768
<3769=3770
<3770=3774,3771
<3771=3772
<3772=3773
<3774=3775
<3776=3777
<3777=3784,3783,3778
<3778=3782,3779
<3779=3781,3780
<3785=3786
<3786=3793,3792,3787
<3787=3791,3788
<3788=3790,3789
<3794=3795
<3795=3802,3801,3796
<3796=3800,3797
<3797=3799,3798
<3803=3804
<3804=3811,3810,3805
<3805=3809,3806
<3806=3808,3807
<3812=3834,3827,3813
<3813=3814
<3814=3815
<3815=3825,3816
<3816=3823,3821,3819,3817
<3817=3818
<3819=3820
<3821=3822
<3823=3824
<3825=3826
<3827=3828
<3828=3832,3829
<3829=3830
<3830=3831
<3832=3833
<3834=3835
<3835=3837,3836
<3838=3856,3839
<3839=3849,3840
<3840=3841
<3841=3847,3842
<3842=3845,3843
<3843=3844
<3845=3846
<3847=3848
<3849=3850
<3850=3854,3851
<3851=3852
<3852=3853
<3854=3855
<3856=3857
<3858=3859
<3859=3868,3867,3860
<3860=3866,3861
<3861=3865,3862
<3862=3864,3863
<3869=3870
<3870=3882,3871
<3871=3879,3872
<3872=3876,3873
<3873=3875,3874
<3876=3878,3877
<3879=3881,3880
<3882=3884,3883
<3885=3886
<3886=3898,3887
<3887=3895,3888
<3888=3892,3889
<3889=3891,3890
<3892=3894,3893
<3895=3897,3896
<3898=3900,3899
<3901=3902
<3902=3914,3903
<3903=3911,3904
<3904=3908,3905
<3905=3907,3906
<3908=3910,3909
<3911=3913,3912
<3914=3916,3915
<3917=3918
<3918=3930,3919
<3919=3927,3920
<3920=3924,3921
<3921=3923,3922
<3924=3926,3925
<3927=3929,3928
<3930=3932,3931
<3933=3934
<3934=3946,3935
<3935=3943,3936
<3936=3940,3937
<3937=3939,3938
<3940=3942,3941
<3943=3945,3944
<3946=3948,3947
<3949=3950
<3950=3962,3951
<3951=3959,3952
<3952=3956,3953
<3953=3955,3954
<3956=3958,3957
<3959=3961,3960
<3962=3964,3963
<3965=3966
<3966=3978,3967
<3967=3975,3968
<3968=3972,3969
<3969=3971,3970
<3972=3974,3973
<3975=3977,3976
<3978=3980,3979
<3981=3982
<3982=3994,3983
<3983=3991,3984
<3984=3988,3985
<3985=3987,3986
<3988=3990,3989
<3991=3993,3992
<3994=3996,3995
<3997=3998
<3998=4010,3999
<3999=4007,4000
<4000=4004,4001
<4001=4003,4002
<4004=4006,4005
<4007=4009,4008
<4010=4012,4011
<4013=4014
<4014=4026,4015
<4015=4023,4016
<4016=4020,4017
<4017=4019,4018
<4020=4022,4021
<4023=4025,4024
<4026=4028,4027
<4029=4030
<4030=4042,4031
<4031=4039,4032
<4032=4036,4033
<4033=4035,4034
<4036=4038,4037
<4039=4041,4040
<4042=4044,4043
<4045=4046
<4046=4058,4047
<4047=4055,4048
<4048=4052,4049
<4049=4051,4050
<4052=4054,4053
<4055=4057,4056
<4058=4060,4059
<4061=4062
<4062=4074,4063
<4063=4072,4070,4068,4066,4064
<4064=4065
<4066=4067
<4068=4069
<4070=4071
<4072=4073
<4074=4075
<4076=4077
<4077=4089,4078
<4078=4087,4085,4083,4081,4079
<4079=4080
<4081=4082
<4083=4084
<4085=4086
<4087=4088
<4089=4090
<4091=4092
<4092=4104,4093
<4093=4102,4100,4094
<4094=4095
<4095=4099,4096
<4096=4098,4097
<4100=4101
<4102=4103
<4104=4105
<4106=4107
<4107=4119,4108
<4108=4117,4115,4109
<4109=4110
<4110=4114,4111
<4111=4113,4112
<4115=4116
<4117=4118
<4119=4120
<4121=4126,4122
<4122=4125,4124,4123
<4126=4129,4128,4127
<4130=4143,4139,4135,4131
<4131=4134,4133,4132
<4135=4138,4137,4136
<4139=4142,4141,4140
<4143=4146,4145,4144
<4147=4148
<4148=4152,4149
<4149=4150
<4150=4151
<4152=4153
<4189=4195,4194,4190
<4190=4191
<4191=4193,4192
<4195=4218,4210,4202,4196
<4196=4197
<4197=4199,4198
<4199=4201,4200
<4202=4203
<4203=4207,4204
<4204=4206,4205
<4207=4209,4208
<4210=4211
<4211=4215,4212
<4212=4214,4213
<4215=4217,4216
<4218=4219
<4219=4223,4220
<4220=4222,4221
<4223=4225,4224
<4234=4237,4236,4235
<4237=4264,4251,4238
<4238=4239
<4239=4249,4240
<4240=4241
<4241=4242
<4242=4246,4243
<4243=4245,4244
<4246=4248,4247
<4249=4250
<4251=4252
<4252=4263,4262,4253
<4253=4261,4254
<4254=4258,4255
<4255=4257,4256
<4258=4260,4259
<4264=4265
<4265=4276,4275,4266
<4266=4274,4267
<4267=4271,4268
<4268=4270,4269
<4271=4273,4272
<4287=4302,4301,4288
<4288=4298,4295,4292,4289
<4289=4291,4290
<4292=4294,4293
<4295=4297,4296
<4298=4300,4299
<4302=4642,4627,4622,4611,4602,4591,4580,4569,4563,4557,4546,4540,4534,4521,4502,4483,4464,4457,4436,4415,4403,4391,4373,4355,4337,4331,4325,4303
<4303=4309,4307,4304
<4304=4305
<4305=4306
<4307=4308
<4309=4310
<4310=4318,4311
<4311=4315,4312
<4312=4314,4313
<4315=4317,4316
<4318=4322,4319
<4319=4321,4320
<4322=4324,4323
<4325=4326
<4326=4330,4327
<4327=4329,4328
<4331=4332
<4332=4336,4333
<4333=4335,4334
<4337=4338
<4338=4354,4353,4339
<4339=4352,4340
<4340=4342,4341
<4342=4350,4343
<4343=4348,4346,4344
<4344=4345
<4346=4347
<4348=4349
<4350=4351
<4355=4356
<4356=4372,4371,4357
<4357=4370,4358
<4358=4360,4359
<4360=4368,4361
<4361=4366,4364,4362
<4362=4363
<4364=4365
<4366=4367
<4368=4369
<4373=4374
<4374=4390,4389,4375
<4375=4388,4376
<4376=4387,4377
<4377=4385,4378
<4378=4383,4381,4379
<4379=4380
<4381=4382
<4383=4384
<4385=4386
<4391=4392
<4392=4402,4401,4393
<4393=4400,4394
<4394=4398,4395
<4395=4396
<4396=4397
<4398=4399
<4403=4404
<4404=4414,4413,4405
<4405=4412,4406
<4406=4410,4407
<4407=4408
<4408=4409
<4410=4411
<4415=4416
<4416=4434,4417
<4417=4432,4430,4428,4426,4424,4422,4418
<4418=4419
<4419=4421,4420
<4422=4423
<4424=4425
<4426=4427
<4428=4429
<4430=4431
<4432=4433
<4434=4435
<4436=4437
<4437=4455,4438
<4438=4453,4451,4449,4447,4445,4443,4439
<4439=4440
<4440=4442,4441
<4443=4444
<4445=4446
<4447=4448
<4449=4450
<4451=4452
<4453=4454
<4455=4456
<4457=4461,4458
<4458=4460,4459
<4461=4463,4462
<4464=4465
<4465=4481,4466
<4466=4479,4477,4475,4473,4471,4469,4467
<4467=4468
<4469=4470
<4471=4472
<4473=4474
<4475=4476
<4477=4478
<4479=4480
<4481=4482
<4483=4484
<4484=4500,4485
<4485=4498,4496,4494,4492,4490,4488,4486
<4486=4487
<4488=4489
<4490=4491
<4492=4493
<4494=4495
<4496=4497
<4498=4499
<4500=4501
<4502=4503
<4503=4519,4504
<4504=4517,4515,4513,4511,4509,4507,4505
<4505=4506
<4507=4508
<4509=4510
<4511=4512
<4513=4514
<4515=4516
<4517=4518
<4519=4520
<4521=4530,4526,4522
<4522=4525,4524,4523
<4526=4529,4528,4527
<4530=4533,4532,4531
<4534=4535
<4535=4537,4536
<4537=4539,4538
<4540=4541
<4541=4543,4542
<4543=4545,4544
<4546=4547
<4547=4556,4555,4548
<4548=4554,4549
<4549=4553,4550
<4550=4552,4551
<4557=4558
<4558=4560,4559
<4560=4562,4561
<4563=4564
<4564=4566,4565
<4566=4568,4567
<4569=4570
<4570=4579,4578,4571
<4571=4577,4572
<4572=4576,4573
<4573=4575,4574
<4580=4581
<4581=4589,4582
<4582=4587,4585,4583
<4583=4584
<4585=4586
<4587=4588
<4589=4590
<4591=4592
<4592=4600,4593
<4593=4598,4596,4594
<4594=4595
<4596=4597
<4598=4599
<4600=4601
<4602=4607,4603
<4603=4606,4605,4604
<4607=4610,4609,4608
<4611=4612
<4612=4620,4613
<4613=4618,4616,4614
<4614=4615
<4616=4617
<4618=4619
<4620=4621
<4622=4623
<4623=4626,4625,4624
<4627=4628
<4628=4641,4640,4639,4629
<4629=4638,4630
<4630=4635,4632,4631
<4632=4634,4633
<4635=4637,4636
<4642=4643
<4643=4656,4655,4654,4644
<4644=4653,4645
<4645=4650,4647,4646
<4647=4649,4648
<4650=4652,4651
<4693=4702,4701,4694
<4694=4698,4695
<4695=4697,4696
<4698=4700,4699
<4702=4721,4703
<4703=4704
<4704=4718,4705
<4705=4711,4706
<4706=4710,4707
<4707=4709,4708
<4711=4715,4712
<4712=4714,4713
<4715=4717,4716
<4718=4720,4719
<4721=4722
<4722=4736,4723
<4723=4729,4724
<4724=4728,4725
<4725=4727,4726
<4729=4733,4730
<4730=4732,4731
<4733=4735,4734
<4736=4738,4737
<4749=4755,4754,4750
<4750=4751
<4751=4753,4752
<4755=4815,4800,4789,4773,4756
<4756=4757
<4757=4771,4758
<4758=4769,4767,4765,4761,4759
<4759=4760
<4761=4762
<4762=4764,4763
<4765=4766
<4767=4768
<4769=4770
<4771=4772
<4773=4774
<4774=4788,4787,4775
<4775=4786,4776
<4776=4784,4777
<4777=4782,4780,4778
<4778=4779
<4780=4781
<4782=4783
<4784=4785
<4789=4790
<4790=4798,4791
<4791=4796,4794,4792
<4792=4793
<4794=4795
<4796=4797
<4798=4799
<4800=4801
<4801=4814,4813,4812,4802
<4802=4811,4803
<4803=4808,4805,4804
<4805=4807,4806
<4808=4810,4809
<4815=4816
<4816=4829,4828,4827,4817
<4817=4826,4818
<4818=4823,4820,4819
<4820=4822,4821
<4823=4825,4824
<4842=4848,4847,4843
<4843=4844
<4844=4846,4845
<4848=4849
<4849=4850
<4850=4872,4851
<4851=4870,4868,4864,4860,4856,4852
<4852=4853
<4853=4855,4854
<4856=4857
<4857=4859,4858
<4860=4861
<4861=4863,4862
<4864=4865
<4865=4867,4866
<4868=4869
<4870=4871
<4872=4873
<4880=4886,4885,4881
<4881=4882
<4882=4884,4883
<4886=4887
<4887=4888
<4888=4910,4889
<4889=4908,4906,4902,4898,4894,4890
<4890=4891
<4891=4893,4892
<4894=4895
<4895=4897,4896
<4898=4899
<4899=4901,4900
<4902=4903
<4903=4905,4904
<4906=4907
<4908=4909
<4910=4911
<4920=4926,4925,4921
<4921=4922
<4922=4924,4923
<4926=4991,4987,4974,4931,4927
<4927=4928
<4928=4930,4929
<4931=4966,4962,4959,4932
<4932=4955,4942,4933
<4933=4934
<4934=4938,4935
<4935=4936
<4936=4937
<4938=4939
<4939=4941,4940
<4942=4943
<4943=4953,4944
<4944=4951,4949,4945
<4945=4946
<4946=4948,4947
<4949=4950
<4951=4952
<4953=4954
<4955=4956
<4956=4958,4957
<4959=4961,4960
<4962=4963
<4963=4965,4964
<4966=4967
<4967=4968
<4968=4973,4972,4969
<4969=4971,4970
<4974=4975
<4975=4985,4976
<4976=4983,4981,4977
<4977=4978
<4978=4980,4979
<4981=4982
<4983=4984
<4985=4986
<4987=4988
<4988=4990,4989
<4991=4992
<4992=5022,4993
<4993=5020,5018,5014,5010,5006,5002,4998,4994
<4994=4995
<4995=4997,4996
<4998=4999
<4999=5001,5000
<5002=5003
<5003=5005,5004
<5006=5007
<5007=5009,5008
<5010=5011
<5011=5013,5012
<5014=5015
<5015=5017,5016
<5018=5019
<5020=5021
<5022=5023
<5038=5044,5043,5039
<5039=5040
<5040=5042,5041
<5044=5108,5094,5083,5054,5045
<5045=5046
<5046=5052,5047
<5047=5050,5048
<5048=5049
<5050=5051
<5052=5053
<5054=5075,5071,5068,5055
<5055=5056
<5056=5066,5057
<5057=5064,5062,5058
<5058=5059
<5059=5061,5060
<5062=5063
<5064=5065
<5066=5067
<5068=5070,5069
<5071=5072
<5072=5074,5073
<5075=5076
<5076=5077
<5077=5082,5081,5078
<5078=5080,5079
<5083=5084
<5084=5092,5085
<5085=5090,5088,5086
<5086=5087
<5088=5089
<5090=5091
<5092=5093
<5094=5095
<5095=5107,5106,5096
<5096=5105,5097
<5097=5104,5098
<5098=5100,5099
<5100=5101
<5101=5103,5102
<5108=5109
<5109=5139,5110
<5110=5137,5135,5131,5127,5123,5119,5115,5111
<5111=5112
<5112=5114,5113
<5115=5116
<5116=5118,5117
<5119=5120
<5120=5122,5121
<5123=5124
<5124=5126,5125
<5127=5128
<5128=5130,5129
<5131=5132
<5132=5134,5133
<5135=5136
<5137=5138
<5139=5140
<5155=5170,5169,5156
<5156=5166,5163,5160,5157
<5157=5159,5158
<5160=5162,5161
<5163=5165,5164
<5166=5168,5167
<5170=5629,5611,5602,5579,5556,5542,5516,5506,5496,5486,5476,5460,5444,5434,5429,5420,5415,5396,5380,5356,5355,5354,5353,5331,5327,5316,5307,5298,5223,5208,5193,5186,5171
<5171=5180,5172
<5172=5173
<5173=5174
<5174=5178,5175
<5175=5176
<5176=5177
<5178=5179
<5180=5181
<5181=5185,5182
<5182=5184,5183
<5186=5187
<5187=5189,5188
<5189=5190
<5190=5192,5191
<5193=5194
<5194=5204,5195
<5195=5200,5196
<5196=5197
<5197=5199,5198
<5200=5201
<5201=5203,5202
<5204=5205
<5205=5207,5206
<5208=5209
<5209=5219,5210
<5210=5215,5211
<5211=5212
<5212=5214,5213
<5215=5216
<5216=5218,5217
<5219=5220
<5220=5222,5221
<5223=5292,5262,5224
<5224=5225
<5225=5255,5246,5226
<5226=5227
<5227=5240,5228
<5228=5238,5229
<5229=5236,5234,5232,5230
<5230=5231
<5232=5233
<5234=5235
<5236=5237
<5238=5239
<5240=5242,5241
<5242=5243
<5243=5245,5244
<5246=5247
<5247=5249,5248
<5249=5251,5250
<5251=5252
<5252=5254,5253
<5255=5256
<5256=5261,5260,5257
<5257=5259,5258
<5262=5283,5263
<5263=5264
<5264=5277,5265
<5265=5275,5266
<5266=5273,5271,5269,5267
<5267=5268
<5269=5270
<5271=5272
<5273=5274
<5275=5276
<5277=5279,5278
<5279=5280
<5280=5282,5281
<5283=5284
<5284=5286,5285
<5286=5288,5287
<5288=5289
<5289=5291,5290
<5292=5293
<5293=5297,5294
<5294=5296,5295
<5298=5299
<5299=5301,5300
<5301=5303,5302
<5303=5304
<5304=5306,5305
<5307=5308
<5308=5310,5309
<5310=5312,5311
<5312=5313
<5313=5315,5314
<5316=5317
<5317=5321,5318
<5318=5320,5319
<5321=5323,5322
<5323=5324
<5324=5326,5325
<5327=5328
<5328=5330,5329
<5331=5332
<5332=5352,5351,5333
<5333=5350,5334
<5334=5349,5335
<5335=5347,5336
<5336=5337
<5337=5338
<5338=5344,5339
<5339=5343,5340
<5340=5342,5341
<5344=5346,5345
<5347=5348
<5356=5374,5357
<5357=5367,5358
<5358=5359
<5359=5365,5360
<5360=5363,5361
<5361=5362
<5363=5364
<5365=5366
<5367=5368
<5368=5372,5369
<5369=5370
<5370=5371
<5372=5373
<5374=5375
<5375=5379,5376
<5376=5378,5377
<5380=5381
<5381=5395,5394,5382
<5382=5393,5383
<5383=5391,5384
<5384=5389,5387,5385
<5385=5386
<5387=5388
<5389=5390
<5391=5392
<5396=5397
<5397=5413,5398
<5398=5411,5409,5407,5405,5403,5401,5399
<5399=5400
<5401=5402
<5403=5404
<5405=5406
<5407=5408
<5409=5410
<5411=5412
<5413=5414
<5415=5416
<5416=5419,5418,5417
<5420=5421
<5421=5425,5422
<5422=5423
<5423=5424
<5425=5426
<5426=5428,5427
<5429=5430
<5430=5433,5432,5431
<5434=5436,5435
<5436=5437
<5437=5441,5438
<5438=5440,5439
<5441=5443,5442
<5444=5445
<5445=5459,5458,5446
<5446=5457,5447
<5447=5453,5448
<5448=5451,5449
<5449=5450
<5451=5452
<5453=5454
<5454=5456,5455
<5460=5461
<5461=5475,5474,5462
<5462=5473,5463
<5463=5469,5464
<5464=5467,5465
<5465=5466
<5467=5468
<5469=5470
<5470=5472,5471
<5476=5477
<5477=5483,5478
<5478=5482,5479
<5479=5481,5480
<5483=5485,5484
<5486=5487
<5487=5493,5488
<5488=5492,5489
<5489=5491,5490
<5493=5495,5494
<5496=5497
<5497=5503,5498
<5498=5502,5499
<5499=5501,5500
<5503=5505,5504
<5506=5507
<5507=5513,5508
<5508=5512,5509
<5509=5511,5510
<5513=5515,5514
<5516=5517
<5517=5541,5540,5518
<5518=5539,5519
<5519=5537,5520
<5520=5525,5523,5521
<5521=5522
<5523=5524
<5525=5526
<5526=5536,5527
<5527=5531,5528
<5528=5530,5529
<5531=5535,5532
<5532=5534,5533
<5537=5538
<5542=5544,5543
<5544=5545
<5545=5551,5546
<5546=5548,5547
<5548=5550,5549
<5551=5553,5552
<5553=5555,5554
<5556=5557
<5557=5577,5558
<5558=5575,5573,5571,5569,5563,5561,5559
<5559=5560
<5561=5562
<5563=5564
<5564=5568,5565
<5565=5567,5566
<5569=5570
<5571=5572
<5573=5574
<5575=5576
<5577=5578
<5579=5580
<5580=5600,5581
<5581=5598,5596,5594,5592,5586,5584,5582
<5582=5583
<5584=5585
<5586=5587
<5587=5591,5588
<5588=5590,5589
<5592=5593
<5594=5595
<5596=5597
<5598=5599
<5600=5601
<5602=5607,5603
<5603=5606,5605,5604
<5607=5610,5609,5608
<5611=5612
<5612=5628,5627,5626,5613
<5613=5625,5614
<5614=5622,5619,5616,5615
<5616=5618,5617
<5619=5621,5620
<5622=5624,5623
<5629=5630
<5630=5646,5645,5644,5631
<5631=5643,5632
<5632=5640,5637,5634,5633
<5634=5636,5635
<5637=5639,5638
<5640=5642,5641
<5687=5696,5695,5688
<5688=5692,5689
<5689=5691,5690
<5692=5694,5693
<5696=5749,5741,5715,5709,5703,5697
<5697=5698
<5698=5700,5699
<5700=5702,5701
<5703=5704
<5704=5706,5705
<5706=5708,5707
<5709=5710
<5710=5712,5711
<5712=5714,5713
<5715=5716
<5716=5740,5739,5717
<5717=5738,5718
<5718=5736,5719
<5719=5720
<5720=5721
<5721=5729,5722
<5722=5726,5723
<5723=5725,5724
<5726=5728,5727
<5729=5733,5730
<5730=5732,5731
<5733=5735,5734
<5736=5737
<5741=5742
<5742=5746,5743
<5743=5745,5744
<5746=5748,5747
<5749=5750
<5750=5756,5751
<5751=5755,5752
<5752=5754,5753
<5756=5758,5757
<5768=5777,5776,5769
<5769=5773,5770
<5770=5772,5771
<5773=5775,5774
<5777=5931,5924,5915,5800,5782,5778
<5778=5779
<5779=5781,5780
<5782=5794,5783
<5783=5784
<5784=5792,5785
<5785=5790,5788,5786
<5786=5787
<5788=5789
<5790=5791
<5792=5793
<5794=5795
<5795=5799,5796
<5796=5798,5797
<5800=5907,5903,5900,5801
<5801=5893,5816,5802
<5802=5812,5803
<5803=5808,5804
<5804=5805
<5805=5807,5806
<5808=5809
<5809=5811,5810
<5812=5813
<5813=5815,5814
<5816=5885,5881,5878,5817
<5817=5860,5818
<5818=5819
<5819=5859,5820
<5820=5856,5821
<5821=5845,5822
<5822=5834,5823
<5823=5832,5824
<5824=5825
<5825=5826
<5826=5830,5827
<5827=5828
<5828=5829
<5830=5831
<5832=5833
<5834=5843,5835
<5835=5836
<5836=5837
<5837=5841,5838
<5838=5839
<5839=5840
<5841=5842
<5843=5844
<5845=5854,5846
<5846=5847
<5847=5848
<5848=5852,5849
<5849=5850
<5850=5851
<5852=5853
<5854=5855
<5856=5858,5857
<5860=5861
<5861=5877,5876,5862
<5862=5875,5863
<5863=5873,5864
<5864=5869,5865
<5865=5866
<5866=5868,5867
<5869=5870
<5870=5872,5871
<5873=5874
<5878=5880,5879
<5881=5882
<5882=5884,5883
<5885=5886
<5886=5887
<5887=5892,5891,5888
<5888=5890,5889
<5893=5894
<5894=5899,5898,5895
<5895=5897,5896
<5900=5902,5901
<5903=5904
<5904=5906,5905
<5907=5908
<5908=5909
<5909=5914,5913,5910
<5910=5912,5911
<5915=5916
<5916=5923,5922,5917
<5917=5921,5918
<5918=5920,5919
<5924=5925
<5925=5930,5929,5926
<5926=5928,5927
<5931=5932
<5932=5944,5943,5933
<5933=5942,5934
<5934=5941,5935
<5935=5937,5936
<5937=5938
<5938=5940,5939
<5970=5979,5978,5971
<5971=5975,5972
<5972=5974,5973
<5975=5977,5976
<5979=6084,6070,6016,5986,5980
<5980=5981
<5981=5985,5982
<5982=5984,5983
<5986=5987
<5987=6014,5988
<5988=6007,5996,5989
<5989=5990
<5990=5992,5991
<5992=5993
<5993=5995,5994
<5996=5997
<5997=6001,5998
<5998=6000,5999
<6001=6003,6002
<6003=6004
<6004=6006,6005
<6007=6008
<6008=6010,6009
<6010=6011
<6011=6013,6012
<6014=6015
<6016=6062,6058,6055,6017
<6017=6039,6027,6018
<6018=6019
<6019=6023,6020
<6020=6021
<6021=6022
<6023=6024
<6024=6026,6025
<6027=6028
<6028=6038,6037,6029
<6029=6036,6030
<6030=6034,6031
<6031=6032
<6032=6033
<6034=6035
<6039=6040
<6040=6054,6053,6041
<6041=6052,6042
<6042=6050,6043
<6043=6046,6044
<6044=6045
<6046=6047
<6047=6049,6048
<6050=6051
<6055=6057,6056
<6058=6059
<6059=6061,6060
<6062=6063
<6063=6064
<6064=6069,6068,6065
<6065=6067,6066
<6070=6071
<6071=6083,6082,6072
<6072=6081,6073
<6073=6080,6074
<6074=6076,6075
<6076=6077
<6077=6079,6078
<6084=6085
<6085=6087,6086
<6107=6113,6112,6108
<6108=6109
<6109=6111,6110
<6113=6263,6256,6247,6136,6118,6114
<6114=6115
<6115=6117,6116
<6118=6130,6119
<6119=6120
<6120=6128,6121
<6121=6126,6124,6122
<6122=6123
<6124=6125
<6126=6127
<6128=6129
<6130=6131
<6131=6135,6132
<6132=6134,6133
<6136=6239,6235,6232,6137
<6137=6225,6152,6138
<6138=6148,6139
<6139=6144,6140
<6140=6141
<6141=6143,6142
<6144=6145
<6145=6147,6146
<6148=6149
<6149=6151,6150
<6152=6217,6213,6210,6153
<6153=6192,6154
<6154=6155
<6155=6191,6156
<6156=6180,6157
<6157=6169,6158
<6158=6167,6159
<6159=6160
<6160=6161
<6161=6165,6162
<6162=6163
<6163=6164
<6165=6166
<6167=6168
<6169=6178,6170
<6170=6171
<6171=6172
<6172=6176,6173
<6173=6174
<6174=6175
<6176=6177
<6178=6179
<6180=6189,6181
<6181=6182
<6182=6183
<6183=6187,6184
<6184=6185
<6185=6186
<6187=6188
<6189=6190
<6192=6193
<6193=6209,6208,6194
<6194=6207,6195
<6195=6205,6196
<6196=6201,6197
<6197=6198
<6198=6200,6199
<6201=6202
<6202=6204,6203
<6205=6206
<6210=6212,6211
<6213=6214
<6214=6216,6215
<6217=6218
<6218=6219
<6219=6224,6223,6220
<6220=6222,6221
<6225=6226
<6226=6231,6230,6227
<6227=6229,6228
<6232=6234,6233
<6235=6236
<6236=6238,6237
<6239=6240
<6240=6241
<6241=6246,6245,6242
<6242=6244,6243
<6247=6248
<6248=6255,6254,6249
<6249=6253,6250
<6250=6252,6251
<6256=6257
<6257=6262,6261,6258
<6258=6260,6259
<6263=6264
<6264=6276,6275,6265
<6265=6274,6266
<6266=6273,6267
<6267=6269,6268
<6269=6270
<6270=6272,6271
<6300=6327,6326,6301
<6301=6323,6320,6317,6314,6311,6308,6305,6302
<6302=6304,6303
<6305=6307,6306
<6308=6310,6309
<6311=6313,6312
<6314=6316,6315
<6317=6319,6318
<6320=6322,6321
<6323=6325,6324
<6327=6958,6954,6330,6328
<6328=6329
<6330=6950,6606,6331
<6331=6332
<6332=6588,6574,6567,6511,6506,6499,6475,6467,6461,6453,6445,6436,6427,6333
<6333=6419,6415,6412,6334
<6334=6403,6394,6366,6352,6335
<6335=6348,6336
<6336=6337
<6337=6338
<6338=6344,6339
<6339=6340
<6340=6341
<6341=6343,6342
<6344=6345
<6345=6347,6346
<6348=6349
<6349=6351,6350
<6352=6353
<6353=6365,6364,6354
<6354=6363,6355
<6355=6361,6356
<6356=6359,6357
<6357=6358
<6359=6360
<6361=6362
<6366=6367
<6367=6393,6392,6368
<6368=6391,6369
<6369=6389,6370
<6370=6383,6377,6371
<6371=6372
<6372=6374,6373
<6374=6376,6375
<6377=6378
<6378=6380,6379
<6380=6382,6381
<6383=6384
<6384=6386,6385
<6386=6388,6387
<6389=6390
<6394=6395
<6395=6402,6401,6396
<6396=6400,6397
<6397=6399,6398
<6403=6404
<6404=6411,6410,6405
<6405=6409,6406
<6406=6408,6407
<6412=6414,6413
<6415=6416
<6416=6418,6417
<6419=6420
<6420=6421
<6421=6426,6425,6422
<6422=6424,6423
<6427=6428
<6428=6434,6429
<6429=6432,6430
<6430=6431
<6432=6433
<6434=6435
<6436=6437
<6437=6443,6438
<6438=6441,6439
<6439=6440
<6441=6442
<6443=6444
<6445=6446
<6446=6450,6447
<6447=6449,6448
<6450=6452,6451
<6453=6454
<6454=6458,6455
<6455=6457,6456
<6458=6460,6459
<6461=6462
<6462=6464,6463
<6464=6466,6465
<6467=6468
<6468=6472,6469
<6469=6471,6470
<6472=6474,6473
<6475=6476
<6476=6498,6497,6477
<6477=6496,6478
<6478=6494,6479
<6479=6492,6490,6488,6486,6482,6480
<6480=6481
<6482=6483
<6483=6485,6484
<6486=6487
<6488=6489
<6490=6491
<6492=6493
<6494=6495
<6499=6500
<6500=6505,6504,6501
<6501=6503,6502
<6506=6507
<6507=6510,6509,6508
<6511=6559,6555,6552,6512
<6512=6543,6534,6513
<6513=6514
<6514=6531,6515
<6515=6529,6516
<6516=6523,6517
<6517=6518
<6518=6520,6519
<6520=6522,6521
<6523=6524
<6524=6526,6525
<6526=6528,6527
<6529=6530
<6531=6533,6532
<6534=6535
<6535=6542,6541,6536
<6536=6540,6537
<6537=6539,6538
<6543=6544
<6544=6551,6550,6545
<6545=6549,6546
<6546=6548,6547
<6552=6554,6553
<6555=6556
<6556=6558,6557
<6559=6560
<6560=6561
<6561=6566,6565,6562
<6562=6564,6563
<6567=6568
<6568=6573,6572,6569
<6569=6571,6570
<6574=6575
<6575=6587,6586,6576
<6576=6585,6577
<6577=6584,6578
<6578=6580,6579
<6580=6581
<6581=6583,6582
<6588=6589
<6589=6604,6590
<6590=6591
<6591=6592
<6592=6594,6593
<6594=6602,6595
<6595=6596
<6596=6597
<6597=6599,6598
<6599=6601,6600
<6602=6603
<6604=6605
<6606=6936,6929,6867,6860,6836,6827,6777,6612,6611,6610,6609,6607
<6607=6608
<6612=6775,6613
<6613=6761,6754,6692,6678,6674,6651,6643,6635,6627,6619,6618,6617,6616,6614
<6614=6615
<6619=6620
<6620=6624,6621
<6621=6623,6622
<6624=6626,6625
<6627=6628
<6628=6632,6629
<6629=6631,6630
<6632=6634,6633
<6635=6636
<6636=6640,6637
<6637=6639,6638
<6640=6642,6641
<6643=6644
<6644=6648,6645
<6645=6647,6646
<6648=6650,6649
<6651=6652
<6652=6672,6653
<6653=6670,6668,6666,6664,6662,6658,6654
<6654=6655
<6655=6657,6656
<6658=6659
<6659=6661,6660
<6662=6663
<6664=6665
<6666=6667
<6668=6669
<6670=6671
<6672=6673
<6674=6675
<6675=6677,6676
<6678=6679
<6679=6691,6690,6680
<6680=6689,6681
<6681=6687,6682
<6682=6685,6683
<6683=6684
<6685=6686
<6687=6688
<6692=6746,6742,6739,6693
<6693=6730,6721,6694
<6694=6695
<6695=6718,6696
<6696=6716,6697
<6697=6710,6704,6698
<6698=6699
<6699=6701,6700
<6701=6703,6702
<6704=6705
<6705=6707,6706
<6707=6709,6708
<6710=6711
<6711=6713,6712
<6713=6715,6714
<6716=6717
<6718=6720,6719
<6721=6722
<6722=6729,6728,6723
<6723=6727,6724
<6724=6726,6725
<6730=6731
<6731=6738,6737,6732
<6732=6736,6733
<6733=6735,6734
<6739=6741,6740
<6742=6743
<6743=6745,6744
<6746=6747
<6747=6748
<6748=6753,6752,6749
<6749=6751,6750
<6754=6755
<6755=6760,6759,6756
<6756=6758,6757
<6761=6762
<6762=6774,6773,6763
<6763=6772,6764
<6764=6771,6765
<6765=6767,6766
<6767=6768
<6768=6770,6769
<6775=6776
<6777=6819,6815,6812,6778
<6778=6796,6779
<6779=6792,6780
<6780=6781
<6781=6782
<6782=6788,6783
<6783=6784
<6784=6785
<6785=6787,6786
<6788=6789
<6789=6791,6790
<6792=6793
<6793=6795,6794
<6796=6797
<6797=6811,6810,6798
<6798=6809,6799
<6799=6807,6800
<6800=6805,6801
<6801=6802
<6802=6804,6803
<6805=6806
<6807=6808
<6812=6814,6813
<6815=6816
<6816=6818,6817
<6819=6820
<6820=6821
<6821=6826,6825,6822
<6822=6824,6823
<6827=6828
<6828=6834,6829
<6829=6832,6830
<6830=6831
<6832=6833
<6834=6835
<6836=6837
<6837=6859,6858,6838
<6838=6857,6839
<6839=6855,6840
<6840=6853,6851,6849,6847,6843,6841
<6841=6842
<6843=6844
<6844=6846,6845
<6847=6848
<6849=6850
<6851=6852
<6853=6854
<6855=6856
<6860=6861
<6861=6866,6865,6862
<6862=6864,6863
<6867=6921,6917,6914,6868
<6868=6905,6896,6869
<6869=6870
<6870=6893,6871
<6871=6891,6872
<6872=6885,6879,6873
<6873=6874
<6874=6876,6875
<6876=6878,6877
<6879=6880
<6880=6882,6881
<6882=6884,6883
<6885=6886
<6886=6888,6887
<6888=6890,6889
<6891=6892
<6893=6895,6894
<6896=6897
<6897=6904,6903,6898
<6898=6902,6899
<6899=6901,6900
<6905=6906
<6906=6913,6912,6907
<6907=6911,6908
<6908=6910,6909
<6914=6916,6915
<6917=6918
<6918=6920,6919
<6921=6922
<6922=6923
<6923=6928,6927,6924
<6924=6926,6925
<6929=6930
<6930=6935,6934,6931
<6931=6933,6932
<6936=6937
<6937=6949,6948,6938
<6938=6947,6939
<6939=6946,6940
<6940=6942,6941
<6942=6943
<6943=6945,6944
<6950=6951
<6951=6953,6952
<6954=6955
<6955=6957,6956
<6958=6970,6959
<6959=6969,6968,6967,6966,6965,6964,6960
<6960=6961
<6961=6963,6962
<6970=6971
<6971=6973,6972
<7028=7046,7045,7029
<7029=7042,7039,7036,7033,7030
<7030=7032,7031
<7033=7035,7034
<7036=7038,7037
<7039=7041,7040
<7042=7044,7043
<7046=7211,7207,7195,7191,7049,7047
<7047=7048
<7049=7183,7179,7176,7050
<7050=7167,7158,7153,7135,7129,7109,7102,7051
<7051=7098,7078,7052
<7052=7053
<7053=7074,7054
<7054=7055
<7055=7070,7056
<7056=7057
<7057=7058
<7058=7068,7059
<7059=7064,7060
<7060=7061
<7061=7063,7062
<7064=7065
<7065=7067,7066
<7068=7069
<7070=7071
<7071=7073,7072
<7074=7075
<7075=7077,7076
<7078=7079
<7079=7094,7080
<7080=7081
<7081=7082
<7082=7092,7083
<7083=7088,7084
<7084=7085
<7085=7087,7086
<7088=7089
<7089=7091,7090
<7092=7093
<7094=7095
<7095=7097,7096
<7098=7099
<7099=7101,7100
<7102=7107,7103
<7103=7104
<7104=7106,7105
<7107=7108
<7109=7110
<7110=7128,7127,7111
<7111=7126,7112
<7112=7122,7113
<7113=7118,7114
<7114=7115
<7115=7117,7116
<7118=7119
<7119=7121,7120
<7122=7123
<7123=7125,7124
<7129=7131,7130
<7131=7132
<7132=7134,7133
<7135=7136
<7136=7152,7151,7137
<7137=7150,7138
<7138=7146,7139
<7139=7142,7140
<7140=7141
<7142=7143
<7143=7145,7144
<7146=7147
<7147=7149,7148
<7153=7154
<7154=7157,7156,7155
<7158=7159
<7159=7166,7165,7160
<7160=7164,7161
<7161=7163,7162
<7167=7168
<7168=7175,7174,7169
<7169=7173,7170
<7170=7172,7171
<7176=7178,7177
<7179=7180
<7180=7182,7181
<7183=7184
<7184=7185
<7185=7190,7189,7186
<7186=7188,7187
<7191=7192
<7192=7194,7193
<7195=7196
<7196=7206,7205,7197
<7197=7204,7198
<7198=7200,7199
<7200=7201
<7201=7203,7202
<7207=7208
<7208=7210,7209
<7211=7212
<7212=7224,7223,7213
<7213=7222,7214
<7214=7221,7215
<7215=7217,7216
<7217=7218
<7218=7220,7219
