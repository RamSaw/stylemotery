>5	FunctionDef	console_ctrl_handler (DWORD ctrl_type)
>6	ParameterList	DWORD ctrl_type
>7	Parameter	 
>8	Identifier	ctrl_type
>9	ParameterType	DWORD
>10	ReturnType	BOOL WINAPI
>11	CompoundStatement	 
>12	SwitchStatement	switch ( ctrl_type )
>13	CompoundStatement	 
>14	ReturnStatement	 
>15	Identifier	FALSE
>16	Label	 
>17	Identifier	default
>18	ReturnStatement	 
>19	Identifier	TRUE
>20	ExpressionStatement	 
>21	CallExpression	console_ctrl_function ( )
>22	ArgumentList	 
>23	Callee	console_ctrl_function
>24	Identifier	console_ctrl_function
>25	Label	 
>26	Identifier	CTRL_SHUTDOWN_EVENT
>27	Label	 
>28	Identifier	CTRL_CLOSE_EVENT
>29	Label	 
>30	Identifier	CTRL_BREAK_EVENT
>31	Label	 
>32	Identifier	CTRL_C_EVENT
>33	Condition	 
>34	Identifier	ctrl_type
>41	FunctionDef	main (int argc , const char * argv [ ])
>42	ParameterList	int argc , const char * argv [ ]
>43	Parameter	 
>44	Identifier	argv
>45	ParameterType	const char * [ ]
>46	Parameter	 
>47	Identifier	argc
>48	ParameterType	int
>49	ReturnType	int
>50	CompoundStatement	 
>51	ReturnStatement	 
>52	PrimaryExpression	0
>53	ExpressionStatement	 
>54	CallExpression	munlockall ( )
>55	ArgumentList	 
>56	Callee	munlockall
>57	Identifier	munlockall
>58	BlockStarter	 
>59	CompoundStatement	 
>60	ReturnStatement	return 1 ;
>61	PrimaryExpression	1
>62	ExpressionStatement	SimpleLogger ( ) . Write ( logWARNING ) << \"exception
>63	ShiftExpression	SimpleLogger ( ) . Write ( logWARNING ) << \"exception
>64	ShiftExpression	\"exception
>65	CallExpression	e . what ( )
>66	ArgumentList	 
>67	Callee	e . what
>68	MemberAccess	e . what
>69	Identifier	what
>70	Identifier	e
>71	PrimaryExpression	\"exception
>72	CallExpression	SimpleLogger ( ) . Write ( logWARNING )
>73	ArgumentList	logWARNING
>74	Argument	logWARNING
>75	Identifier	logWARNING
>76	Callee	SimpleLogger ( ) . Write
>77	MemberAccess	SimpleLogger ( ) . Write
>78	Identifier	Write
>79	CallExpression	SimpleLogger ( )
>80	ArgumentList	 
>81	Callee	SimpleLogger
>82	Identifier	SimpleLogger
>83	Identifier	e
>84	BlockStarter	 
>85	CompoundStatement	 
>86	ExpressionStatement	SimpleLogger ( ) . Write ( ) << \"shutdown completed\"
>87	ShiftExpression	SimpleLogger ( ) . Write ( ) << \"shutdown completed\"
>88	PrimaryExpression	\"shutdown completed\"
>89	CallExpression	SimpleLogger ( ) . Write ( )
>90	ArgumentList	 
>91	Callee	SimpleLogger ( ) . Write
>92	MemberAccess	SimpleLogger ( ) . Write
>93	Identifier	Write
>94	CallExpression	SimpleLogger ( )
>95	ArgumentList	 
>96	Callee	SimpleLogger
>97	Identifier	SimpleLogger
>98	ExpressionStatement	routing_server . reset ( )
>99	CallExpression	routing_server . reset ( )
>100	ArgumentList	 
>101	Callee	routing_server . reset
>102	MemberAccess	routing_server . reset
>103	Identifier	reset
>104	Identifier	routing_server
>105	ExpressionStatement	SimpleLogger ( ) . Write ( ) << \"freeing objects\"
>106	ShiftExpression	SimpleLogger ( ) . Write ( ) << \"freeing objects\"
>107	PrimaryExpression	\"freeing objects\"
>108	CallExpression	SimpleLogger ( ) . Write ( )
>109	ArgumentList	 
>110	Callee	SimpleLogger ( ) . Write
>111	MemberAccess	SimpleLogger ( ) . Write
>112	Identifier	Write
>113	CallExpression	SimpleLogger ( )
>114	ArgumentList	 
>115	Callee	SimpleLogger
>116	Identifier	SimpleLogger
>117	IfStatement	if ( trial_run )
>118	ElseStatement	else
>119	CompoundStatement	 
>120	IfStatement	if ( status == std 
>121	ElseStatement	else
>122	CompoundStatement	 
>123	ExpressionStatement	server_task . reset ( )
>124	CallExpression	server_task . reset ( )
>125	ArgumentList	 
>126	Callee	server_task . reset
>127	MemberAccess	server_task . reset
>128	Identifier	reset
>129	Identifier	server_task
>130	ExpressionStatement	SimpleLogger ( ) . Write ( logWARNING ) << \"Didn't exit within 2 seconds. Hard abort!\"
>131	ShiftExpression	SimpleLogger ( ) . Write ( logWARNING ) << \"Didn't exit within 2 seconds. Hard abort!\"
>132	PrimaryExpression	\"Didn't exit within 2 seconds. Hard abort!\"
>133	CallExpression	SimpleLogger ( ) . Write ( logWARNING )
>134	ArgumentList	logWARNING
>135	Argument	logWARNING
>136	Identifier	logWARNING
>137	Callee	SimpleLogger ( ) . Write
>138	MemberAccess	SimpleLogger ( ) . Write
>139	Identifier	Write
>140	CallExpression	SimpleLogger ( )
>141	ArgumentList	 
>142	Callee	SimpleLogger
>143	Identifier	SimpleLogger
>144	CompoundStatement	 
>145	ExpressionStatement	server_thread . join ( )
>146	CallExpression	server_thread . join ( )
>147	ArgumentList	 
>148	Callee	server_thread . join
>149	MemberAccess	server_thread . join
>150	Identifier	join
>151	Identifier	server_thread
>152	Condition	status == std 
>153	EqualityExpression	status == std 
>154	Identifier	std 
>155	Identifier	status
>156	ExpressionStatement	status = future . wait_for ( std 
>157	AssignmentExpr	status = future . wait_for ( std 
>158	CallExpression	future . wait_for ( std 
>159	ArgumentList	std 
>160	Argument	std 
>161	CallExpression	std 
>162	ArgumentList	2
>163	Argument	2
>164	PrimaryExpression	2
>165	Callee	std 
>166	Identifier	std 
>167	Callee	future . wait_for
>168	MemberAccess	future . wait_for
>169	Identifier	wait_for
>170	Identifier	future
>171	Identifier	status
>172	Statement	auto
>173	ExpressionStatement	SimpleLogger ( ) . Write ( ) << \"stopping threads\"
>174	ShiftExpression	SimpleLogger ( ) . Write ( ) << \"stopping threads\"
>175	PrimaryExpression	\"stopping threads\"
>176	CallExpression	SimpleLogger ( ) . Write ( )
>177	ArgumentList	 
>178	Callee	SimpleLogger ( ) . Write
>179	MemberAccess	SimpleLogger ( ) . Write
>180	Identifier	Write
>181	CallExpression	SimpleLogger ( )
>182	ArgumentList	 
>183	Callee	SimpleLogger
>184	Identifier	SimpleLogger
>185	ExpressionStatement	routing_server -> Stop ( )
>186	CallExpression	routing_server -> Stop ( )
>187	ArgumentList	 
>188	Callee	routing_server -> Stop
>189	PtrMemberAccess	routing_server -> Stop
>190	Identifier	Stop
>191	Identifier	routing_server
>192	ExpressionStatement	SimpleLogger ( ) . Write ( ) << \"initiating shutdown\"
>193	ShiftExpression	SimpleLogger ( ) . Write ( ) << \"initiating shutdown\"
>194	PrimaryExpression	\"initiating shutdown\"
>195	CallExpression	SimpleLogger ( ) . Write ( )
>196	ArgumentList	 
>197	Callee	SimpleLogger ( ) . Write
>198	MemberAccess	SimpleLogger ( ) . Write
>199	Identifier	Write
>200	CallExpression	SimpleLogger ( )
>201	ArgumentList	 
>202	Callee	SimpleLogger
>203	Identifier	SimpleLogger
>204	ExpressionStatement	sigwait ( & wait_mask , & sig )
>205	CallExpression	sigwait ( & wait_mask , & sig )
>206	ArgumentList	& wait_mask
>207	Argument	& sig
>208	UnaryOp	& sig
>209	Identifier	sig
>210	UnaryOperator	&
>211	Argument	& wait_mask
>212	UnaryOp	& wait_mask
>213	Identifier	wait_mask
>214	UnaryOperator	&
>215	Callee	sigwait
>216	Identifier	sigwait
>217	ExpressionStatement	SimpleLogger ( ) . Write ( ) << \"running and waiting for requests\"
>218	ShiftExpression	SimpleLogger ( ) . Write ( ) << \"running and waiting for requests\"
>219	PrimaryExpression	\"running and waiting for requests\"
>220	CallExpression	SimpleLogger ( ) . Write ( )
>221	ArgumentList	 
>222	Callee	SimpleLogger ( ) . Write
>223	MemberAccess	SimpleLogger ( ) . Write
>224	Identifier	Write
>225	CallExpression	SimpleLogger ( )
>226	ArgumentList	 
>227	Callee	SimpleLogger
>228	Identifier	SimpleLogger
>229	ExpressionStatement	pthread_sigmask ( SIG_BLOCK , & wait_mask , 0 )
>230	CallExpression	pthread_sigmask ( SIG_BLOCK , & wait_mask , 0 )
>231	ArgumentList	SIG_BLOCK
>232	Argument	0
>233	PrimaryExpression	0
>234	Argument	& wait_mask
>235	UnaryOp	& wait_mask
>236	Identifier	wait_mask
>237	UnaryOperator	&
>238	Argument	SIG_BLOCK
>239	Identifier	SIG_BLOCK
>240	Callee	pthread_sigmask
>241	Identifier	pthread_sigmask
>242	ExpressionStatement	sigaddset ( & wait_mask , SIGTERM )
>243	CallExpression	sigaddset ( & wait_mask , SIGTERM )
>244	ArgumentList	& wait_mask
>245	Argument	SIGTERM
>246	Identifier	SIGTERM
>247	Argument	& wait_mask
>248	UnaryOp	& wait_mask
>249	Identifier	wait_mask
>250	UnaryOperator	&
>251	Callee	sigaddset
>252	Identifier	sigaddset
>253	ExpressionStatement	sigaddset ( & wait_mask , SIGQUIT )
>254	CallExpression	sigaddset ( & wait_mask , SIGQUIT )
>255	ArgumentList	& wait_mask
>256	Argument	SIGQUIT
>257	Identifier	SIGQUIT
>258	Argument	& wait_mask
>259	UnaryOp	& wait_mask
>260	Identifier	wait_mask
>261	UnaryOperator	&
>262	Callee	sigaddset
>263	Identifier	sigaddset
>264	ExpressionStatement	sigaddset ( & wait_mask , SIGINT )
>265	CallExpression	sigaddset ( & wait_mask , SIGINT )
>266	ArgumentList	& wait_mask
>267	Argument	SIGINT
>268	Identifier	SIGINT
>269	Argument	& wait_mask
>270	UnaryOp	& wait_mask
>271	Identifier	wait_mask
>272	UnaryOperator	&
>273	Callee	sigaddset
>274	Identifier	sigaddset
>275	ExpressionStatement	sigemptyset ( & wait_mask )
>276	CallExpression	sigemptyset ( & wait_mask )
>277	ArgumentList	& wait_mask
>278	Argument	& wait_mask
>279	UnaryOp	& wait_mask
>280	Identifier	wait_mask
>281	UnaryOperator	&
>282	Callee	sigemptyset
>283	Identifier	sigemptyset
>284	ExpressionStatement	pthread_sigmask ( SIG_SETMASK , & old_mask , 0 )
>285	CallExpression	pthread_sigmask ( SIG_SETMASK , & old_mask , 0 )
>286	ArgumentList	SIG_SETMASK
>287	Argument	0
>288	PrimaryExpression	0
>289	Argument	& old_mask
>290	UnaryOp	& old_mask
>291	Identifier	old_mask
>292	UnaryOperator	&
>293	Argument	SIG_SETMASK
>294	Identifier	SIG_SETMASK
>295	Callee	pthread_sigmask
>296	Identifier	pthread_sigmask
>297	IdentifierDeclStatement	sigset_t wait_mask ;
>298	IdentifierDecl	wait_mask
>299	Identifier	wait_mask
>300	IdentifierDeclType	sigset_t
>301	IdentifierDeclStatement	std 
>302	IdentifierDecl	server_thread ( std 
>303	CallExpression	std 
>304	ArgumentList	server_task
>305	Argument	server_task
>306	Identifier	server_task
>307	Callee	std 
>308	Identifier	std 
>309	Identifier	server_thread
>310	IdentifierDeclType	std 
>311	ExpressionStatement	future = server_task . get_future ( )
>312	AssignmentExpr	future = server_task . get_future ( )
>313	CallExpression	server_task . get_future ( )
>314	ArgumentList	 
>315	Callee	server_task . get_future
>316	MemberAccess	server_task . get_future
>317	Identifier	get_future
>318	Identifier	server_task
>319	Identifier	future
>320	Statement	auto
>321	ExpressionStatement	 
>322	Statement	)
>323	CompoundStatement	 
>324	ReturnStatement	return 0 ;
>325	PrimaryExpression	0
>326	ExpressionStatement	routing_server -> Run ( )
>327	CallExpression	routing_server -> Run ( )
>328	ArgumentList	 
>329	Callee	routing_server -> Run
>330	PtrMemberAccess	routing_server -> Run
>331	Identifier	Run
>332	Identifier	routing_server
>333	Statement	int
>334	Statement	->
>335	Statement	)
>336	Statement	(
>337	Statement	]
>338	Statement	&
>339	Statement	[
>340	Statement	(
>341	Statement	server_task
>342	Statement	>
>343	Statement	)
>344	Statement	(
>345	Statement	int
>346	Statement	<
>347	Statement	packaged_task
>348	Statement	 
>349	Statement	std
>350	CompoundStatement	 
>351	ExpressionStatement	SimpleLogger ( ) . Write ( ) << \"trial run, quitting after successful initialization\"
>352	ShiftExpression	SimpleLogger ( ) . Write ( ) << \"trial run, quitting after successful initialization\"
>353	PrimaryExpression	\"trial run, quitting after successful initialization\"
>354	CallExpression	SimpleLogger ( ) . Write ( )
>355	ArgumentList	 
>356	Callee	SimpleLogger ( ) . Write
>357	MemberAccess	SimpleLogger ( ) . Write
>358	Identifier	Write
>359	CallExpression	SimpleLogger ( )
>360	ArgumentList	 
>361	Callee	SimpleLogger
>362	Identifier	SimpleLogger
>363	Condition	trial_run
>364	Identifier	trial_run
>365	ExpressionStatement	routing_server -> GetRequestHandlerPtr ( ) . RegisterRoutingMachine ( & osrm_lib )
>366	CallExpression	routing_server -> GetRequestHandlerPtr ( ) . RegisterRoutingMachine ( & osrm_lib )
>367	ArgumentList	& osrm_lib
>368	Argument	& osrm_lib
>369	UnaryOp	& osrm_lib
>370	Identifier	osrm_lib
>371	UnaryOperator	&
>372	Callee	routing_server -> GetRequestHandlerPtr ( ) . RegisterRoutingMachine
>373	MemberAccess	routing_server -> GetRequestHandlerPtr ( ) . RegisterRoutingMachine
>374	Identifier	RegisterRoutingMachine
>375	CallExpression	routing_server -> GetRequestHandlerPtr ( )
>376	ArgumentList	 
>377	Callee	routing_server -> GetRequestHandlerPtr
>378	PtrMemberAccess	routing_server -> GetRequestHandlerPtr
>379	Identifier	GetRequestHandlerPtr
>380	Identifier	routing_server
>381	ExpressionStatement	routing_server = Server 
>382	AssignmentExpr	routing_server = Server 
>383	CallExpression	Server 
>384	ArgumentList	ip_address
>385	Argument	requested_thread_num
>386	Identifier	requested_thread_num
>387	Argument	ip_port
>388	Identifier	ip_port
>389	Argument	ip_address
>390	Identifier	ip_address
>391	Callee	Server 
>392	Identifier	Server 
>393	Identifier	routing_server
>394	Statement	auto
>395	IdentifierDeclStatement	OSRM osrm_lib ( lib_config ) ;
>396	IdentifierDecl	osrm_lib ( lib_config )
>397	Identifier	lib_config
>398	Identifier	osrm_lib
>399	IdentifierDeclType	OSRM
>400	ExpressionStatement	pthread_sigmask ( SIG_BLOCK , & new_mask , & old_mask )
>401	CallExpression	pthread_sigmask ( SIG_BLOCK , & new_mask , & old_mask )
>402	ArgumentList	SIG_BLOCK
>403	Argument	& old_mask
>404	UnaryOp	& old_mask
>405	Identifier	old_mask
>406	UnaryOperator	&
>407	Argument	& new_mask
>408	UnaryOp	& new_mask
>409	Identifier	new_mask
>410	UnaryOperator	&
>411	Argument	SIG_BLOCK
>412	Identifier	SIG_BLOCK
>413	Callee	pthread_sigmask
>414	Identifier	pthread_sigmask
>415	ExpressionStatement	sigfillset ( & new_mask )
>416	CallExpression	sigfillset ( & new_mask )
>417	ArgumentList	& new_mask
>418	Argument	& new_mask
>419	UnaryOp	& new_mask
>420	Identifier	new_mask
>421	UnaryOperator	&
>422	Callee	sigfillset
>423	Identifier	sigfillset
>424	IdentifierDeclStatement	sigset_t old_mask ;
>425	IdentifierDecl	old_mask
>426	Identifier	old_mask
>427	IdentifierDeclType	sigset_t
>428	IdentifierDeclStatement	sigset_t new_mask ;
>429	IdentifierDecl	new_mask
>430	Identifier	new_mask
>431	IdentifierDeclType	sigset_t
>432	IdentifierDeclStatement	int sig = 0 ;
>433	IdentifierDecl	sig = 0
>434	AssignmentExpr	sig = 0
>435	PrimaryExpression	0
>436	Identifier	sig
>437	Identifier	sig
>438	IdentifierDeclType	int
>439	ExpressionStatement	SimpleLogger ( ) . Write ( logDEBUG ) << \"IP port
>440	ShiftExpression	SimpleLogger ( ) . Write ( logDEBUG ) << \"IP port
>441	ShiftExpression	\"IP port
>442	Identifier	ip_port
>443	PrimaryExpression	\"IP port
>444	CallExpression	SimpleLogger ( ) . Write ( logDEBUG )
>445	ArgumentList	logDEBUG
>446	Argument	logDEBUG
>447	Identifier	logDEBUG
>448	Callee	SimpleLogger ( ) . Write
>449	MemberAccess	SimpleLogger ( ) . Write
>450	Identifier	Write
>451	CallExpression	SimpleLogger ( )
>452	ArgumentList	 
>453	Callee	SimpleLogger
>454	Identifier	SimpleLogger
>455	ExpressionStatement	SimpleLogger ( ) . Write ( logDEBUG ) << \"IP address
>456	ShiftExpression	SimpleLogger ( ) . Write ( logDEBUG ) << \"IP address
>457	ShiftExpression	\"IP address
>458	Identifier	ip_address
>459	PrimaryExpression	\"IP address
>460	CallExpression	SimpleLogger ( ) . Write ( logDEBUG )
>461	ArgumentList	logDEBUG
>462	Argument	logDEBUG
>463	Identifier	logDEBUG
>464	Callee	SimpleLogger ( ) . Write
>465	MemberAccess	SimpleLogger ( ) . Write
>466	Identifier	Write
>467	CallExpression	SimpleLogger ( )
>468	ArgumentList	 
>469	Callee	SimpleLogger
>470	Identifier	SimpleLogger
>471	ExpressionStatement	SimpleLogger ( ) . Write ( logDEBUG ) << \"Threads
>472	ShiftExpression	SimpleLogger ( ) . Write ( logDEBUG ) << \"Threads
>473	ShiftExpression	\"Threads
>474	Identifier	requested_thread_num
>475	PrimaryExpression	\"Threads
>476	CallExpression	SimpleLogger ( ) . Write ( logDEBUG )
>477	ArgumentList	logDEBUG
>478	Argument	logDEBUG
>479	Identifier	logDEBUG
>480	Callee	SimpleLogger ( ) . Write
>481	MemberAccess	SimpleLogger ( ) . Write
>482	Identifier	Write
>483	CallExpression	SimpleLogger ( )
>484	ArgumentList	 
>485	Callee	SimpleLogger
>486	Identifier	SimpleLogger
>487	IfStatement	if ( lib_config . use_shared_memory )
>488	CompoundStatement	 
>489	ExpressionStatement	SimpleLogger ( ) . Write ( logDEBUG ) << \"Loading from shared memory\"
>490	ShiftExpression	SimpleLogger ( ) . Write ( logDEBUG ) << \"Loading from shared memory\"
>491	PrimaryExpression	\"Loading from shared memory\"
>492	CallExpression	SimpleLogger ( ) . Write ( logDEBUG )
>493	ArgumentList	logDEBUG
>494	Argument	logDEBUG
>495	Identifier	logDEBUG
>496	Callee	SimpleLogger ( ) . Write
>497	MemberAccess	SimpleLogger ( ) . Write
>498	Identifier	Write
>499	CallExpression	SimpleLogger ( )
>500	ArgumentList	 
>501	Callee	SimpleLogger
>502	Identifier	SimpleLogger
>503	Condition	lib_config . use_shared_memory
>504	MemberAccess	lib_config . use_shared_memory
>505	Identifier	use_shared_memory
>506	Identifier	lib_config
>507	ExpressionStatement	SimpleLogger ( ) . Write ( ) << \"starting up engines, \" << g_GIT_DESCRIPTION
>508	ShiftExpression	SimpleLogger ( ) . Write ( ) << \"starting up engines, \" << g_GIT_DESCRIPTION
>509	ShiftExpression	\"starting up engines, \" << g_GIT_DESCRIPTION
>510	Identifier	g_GIT_DESCRIPTION
>511	PrimaryExpression	\"starting up engines, \"
>512	CallExpression	SimpleLogger ( ) . Write ( )
>513	ArgumentList	 
>514	Callee	SimpleLogger ( ) . Write
>515	MemberAccess	SimpleLogger ( ) . Write
>516	Identifier	Write
>517	CallExpression	SimpleLogger ( )
>518	ArgumentList	 
>519	Callee	SimpleLogger
>520	Identifier	SimpleLogger
>521	IfStatement	if ( - 1 == mlockall ( lock_flags ) )
>522	CompoundStatement	 
>523	ExpressionStatement	SimpleLogger ( ) . Write ( logWARNING ) << argv [ 0 ] << \" could not be locked to RAM\"
>524	ShiftExpression	SimpleLogger ( ) . Write ( logWARNING ) << argv [ 0 ] << \" could not be locked to RAM\"
>525	ShiftExpression	argv [ 0 ] << \" could not be locked to RAM\"
>526	PrimaryExpression	\" could not be locked to RAM\"
>527	ArrayIndexing	argv [ 0 ]
>528	PrimaryExpression	0
>529	Identifier	argv
>530	CallExpression	SimpleLogger ( ) . Write ( logWARNING )
>531	ArgumentList	logWARNING
>532	Argument	logWARNING
>533	Identifier	logWARNING
>534	Callee	SimpleLogger ( ) . Write
>535	MemberAccess	SimpleLogger ( ) . Write
>536	Identifier	Write
>537	CallExpression	SimpleLogger ( )
>538	ArgumentList	 
>539	Callee	SimpleLogger
>540	Identifier	SimpleLogger
>541	Condition	- 1 == mlockall ( lock_flags )
>542	EqualityExpression	- 1 == mlockall ( lock_flags )
>543	CallExpression	mlockall ( lock_flags )
>544	ArgumentList	lock_flags
>545	Argument	lock_flags
>546	Identifier	lock_flags
>547	Callee	mlockall
>548	Identifier	mlockall
>549	UnaryOp	- 1
>550	PrimaryExpression	1
>551	UnaryOperator	-
>552	IdentifierDeclStatement	const int lock_flags = MCL_CURRENT | MCL_FUTURE ;
>553	IdentifierDecl	lock_flags = MCL_CURRENT | MCL_FUTURE
>554	AssignmentExpr	lock_flags = MCL_CURRENT | MCL_FUTURE
>555	InclusiveOrExpression	MCL_CURRENT | MCL_FUTURE
>556	Identifier	MCL_FUTURE
>557	Identifier	MCL_CURRENT
>558	Identifier	lock_flags
>559	Identifier	lock_flags
>560	IdentifierDeclType	const int
>561	IfStatement	if ( init_result == INIT_FAILED )
>562	CompoundStatement	 
>563	ReturnStatement	return 1 ;
>564	PrimaryExpression	1
>565	Condition	init_result == INIT_FAILED
>566	EqualityExpression	init_result == INIT_FAILED
>567	Identifier	INIT_FAILED
>568	Identifier	init_result
>569	IfStatement	if ( init_result == INIT_OK_DO_NOT_START_ENGINE )
>570	CompoundStatement	 
>571	ReturnStatement	return 0 ;
>572	PrimaryExpression	0
>573	Condition	init_result == INIT_OK_DO_NOT_START_ENGINE
>574	EqualityExpression	init_result == INIT_OK_DO_NOT_START_ENGINE
>575	Identifier	INIT_OK_DO_NOT_START_ENGINE
>576	Identifier	init_result
>577	IdentifierDeclStatement	unsigned init_result = GenerateServerProgramOptions ( argc , argv , lib_config . server_paths , ip_address , ip_\
>578	IdentifierDecl	init_result = GenerateServerProgramOptions ( argc , argv , lib_config . server_paths , ip_address , ip_port , requested_\
>579	AssignmentExpr	init_result = GenerateServerProgramOptions ( argc , argv , lib_config . server_paths , ip_address , ip_\
>580	CallExpression	GenerateServerProgramOptions ( argc , argv , lib_config . server_paths , ip_address , ip_port , requested_thread_\
>581	ArgumentList	argc
>582	Argument	lib_config . max_locations_map_matching
>583	MemberAccess	lib_config . max_locations_map_matching
>584	Identifier	max_locations_map_matching
>585	Identifier	lib_config
>586	Argument	lib_config . max_locations_distance_table
>587	MemberAccess	lib_config . max_locations_distance_table
>588	Identifier	max_locations_distance_table
>589	Identifier	lib_config
>590	Argument	trial_run
>591	Identifier	trial_run
>592	Argument	lib_config . use_shared_memory
>593	MemberAccess	lib_config . use_shared_memory
>594	Identifier	use_shared_memory
>595	Identifier	lib_config
>596	Argument	requested_thread_num
>597	Identifier	requested_thread_num
>598	Argument	ip_port
>599	Identifier	ip_port
>600	Argument	ip_address
>601	Identifier	ip_address
>602	Argument	lib_config . server_paths
>603	MemberAccess	lib_config . server_paths
>604	Identifier	server_paths
>605	Identifier	lib_config
>606	Argument	argv
>607	Identifier	argv
>608	Argument	argc
>609	Identifier	argc
>610	Callee	GenerateServerProgramOptions
>611	Identifier	GenerateServerProgramOptions
>612	Identifier	init_result
>613	Identifier	init_result
>614	IdentifierDeclType	unsigned
>615	Statement	const
>616	ExpressionStatement	lib_config . use_shared_memory = false
>617	AssignmentExpr	lib_config . use_shared_memory = false
>618	Identifier	false
>619	MemberAccess	lib_config . use_shared_memory
>620	Identifier	use_shared_memory
>621	Identifier	lib_config
>622	IdentifierDeclStatement	libosrm_config lib_config ;
>623	IdentifierDecl	lib_config
>624	Identifier	lib_config
>625	IdentifierDeclType	libosrm_config
>626	IdentifierDeclStatement	int ip_port , requested_thread_num ;
>627	IdentifierDecl	requested_thread_num
>628	Identifier	requested_thread_num
>629	IdentifierDeclType	int
>630	IdentifierDecl	ip_port
>631	Identifier	ip_port
>632	IdentifierDeclType	int
>633	IdentifierDeclStatement	std 
>634	IdentifierDecl	ip_address
>635	Identifier	ip_address
>636	IdentifierDeclType	std 
>637	IdentifierDeclStatement	bool trial_run = false ;
>638	IdentifierDecl	trial_run = false
>639	AssignmentExpr	trial_run = false
>640	Identifier	false
>641	Identifier	false
>642	Identifier	trial_run
>643	IdentifierDeclType	bool
>644	ExpressionStatement	LogPolicy 
>645	CallExpression	LogPolicy 
>646	ArgumentList	 
>647	Callee	LogPolicy 
>648	MemberAccess	LogPolicy 
>649	Identifier	Unmute
>650	CallExpression	LogPolicy 
>651	ArgumentList	 
>652	Callee	LogPolicy 
>653	Identifier	LogPolicy 
<5=11,10,6
<6=7
<7=9,8
<11=12
<12=33,13
<13=31,29,27,25,20,18,16,14
<14=15
<16=17
<18=19
<20=21
<21=23,22
<23=24
<25=26
<27=28
<29=30
<31=32
<33=34
<41=50,49,42
<42=46,43
<43=45,44
<46=48,47
<50=84,58,53,51
<51=52
<53=54
<54=56,55
<56=57
<58=83,59
<59=62,60
<60=61
<62=63
<63=72,64
<64=71,65
<65=67,66
<67=68
<68=70,69
<72=76,73
<73=74
<74=75
<76=77
<77=79,78
<79=81,80
<81=82
<84=85
<85=644,637,633,626,622,616,615,577,569,561,552,521,507,487,471,455,439,432,428,424,415,400,395,394,381,365,117,105,98,86
<86=87
<87=89,88
<89=91,90
<91=92
<92=94,93
<94=96,95
<96=97
<98=99
<99=101,100
<101=102
<102=104,103
<105=106
<106=108,107
<108=110,109
<110=111
<111=113,112
<113=115,114
<115=116
<117=363,350,118
<118=119
<119=349,348,347,346,345,344,343,342,341,340,339,338,337,336,335,334,333,323,322,321,320,311,301,297,284,275,264,253,242,229,217,204,192,185,173,172,156,120
<120=152,144,121
<121=122
<122=130,123
<123=124
<124=126,125
<126=127
<127=129,128
<130=131
<131=133,132
<133=137,134
<134=135
<135=136
<137=138
<138=140,139
<140=142,141
<142=143
<144=145
<145=146
<146=148,147
<148=149
<149=151,150
<152=153
<153=155,154
<156=157
<157=171,158
<158=167,159
<159=160
<160=161
<161=165,162
<162=163
<163=164
<165=166
<167=168
<168=170,169
<173=174
<174=176,175
<176=178,177
<178=179
<179=181,180
<181=183,182
<183=184
<185=186
<186=188,187
<188=189
<189=191,190
<192=193
<193=195,194
<195=197,196
<197=198
<198=200,199
<200=202,201
<202=203
<204=205
<205=215,206
<206=211,207
<207=208
<208=210,209
<211=212
<212=214,213
<215=216
<217=218
<218=220,219
<220=222,221
<222=223
<223=225,224
<225=227,226
<227=228
<229=230
<230=240,231
<231=238,234,232
<232=233
<234=235
<235=237,236
<238=239
<240=241
<242=243
<243=251,244
<244=247,245
<245=246
<247=248
<248=250,249
<251=252
<253=254
<254=262,255
<255=258,256
<256=257
<258=259
<259=261,260
<262=263
<264=265
<265=273,266
<266=269,267
<267=268
<269=270
<270=272,271
<273=274
<275=276
<276=282,277
<277=278
<278=279
<279=281,280
<282=283
<284=285
<285=295,286
<286=293,289,287
<287=288
<289=290
<290=292,291
<293=294
<295=296
<297=298
<298=300,299
<301=302
<302=310,309,303
<303=307,304
<304=305
<305=306
<307=308
<311=312
<312=319,313
<313=315,314
<315=316
<316=318,317
<323=326,324
<324=325
<326=327
<327=329,328
<329=330
<330=332,331
<350=351
<351=352
<352=354,353
<354=356,355
<356=357
<357=359,358
<359=361,360
<361=362
<363=364
<365=366
<366=372,367
<367=368
<368=369
<369=371,370
<372=373
<373=375,374
<375=377,376
<377=378
<378=380,379
<381=382
<382=393,383
<383=391,384
<384=389,387,385
<385=386
<387=388
<389=390
<391=392
<395=396
<396=399,398,397
<400=401
<401=413,402
<402=411,407,403
<403=404
<404=406,405
<407=408
<408=410,409
<411=412
<413=414
<415=416
<416=422,417
<417=418
<418=419
<419=421,420
<422=423
<424=425
<425=427,426
<428=429
<429=431,430
<432=433
<433=438,437,434
<434=436,435
<439=440
<440=444,441
<441=443,442
<444=448,445
<445=446
<446=447
<448=449
<449=451,450
<451=453,452
<453=454
<455=456
<456=460,457
<457=459,458
<460=464,461
<461=462
<462=463
<464=465
<465=467,466
<467=469,468
<469=470
<471=472
<472=476,473
<473=475,474
<476=480,477
<477=478
<478=479
<480=481
<481=483,482
<483=485,484
<485=486
<487=503,488
<488=489
<489=490
<490=492,491
<492=496,493
<493=494
<494=495
<496=497
<497=499,498
<499=501,500
<501=502
<503=504
<504=506,505
<507=508
<508=512,509
<509=511,510
<512=514,513
<514=515
<515=517,516
<517=519,518
<519=520
<521=541,522
<522=523
<523=524
<524=530,525
<525=527,526
<527=529,528
<530=534,531
<531=532
<532=533
<534=535
<535=537,536
<537=539,538
<539=540
<541=542
<542=549,543
<543=547,544
<544=545
<545=546
<547=548
<549=551,550
<552=553
<553=560,559,554
<554=558,555
<555=557,556
<561=565,562
<562=563
<563=564
<565=566
<566=568,567
<569=573,570
<570=571
<571=572
<573=574
<574=576,575
<577=578
<578=614,613,579
<579=612,580
<580=610,581
<581=608,606,602,600,598,596,592,590,586,582
<582=583
<583=585,584
<586=587
<587=589,588
<590=591
<592=593
<593=595,594
<596=597
<598=599
<600=601
<602=603
<603=605,604
<606=607
<608=609
<610=611
<616=617
<617=619,618
<619=621,620
<622=623
<623=625,624
<626=630,627
<627=629,628
<630=632,631
<633=634
<634=636,635
<637=638
<638=643,642,639
<639=641,640
<644=645
<645=647,646
<647=648
<648=650,649
<650=652,651
<652=653
