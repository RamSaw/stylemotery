>8	FunctionDef	mysqlmm_thread_init ()
>9	ParameterList	 
>10	CompoundStatement	 
>14	FunctionDef	~mysqlmm_thread_init ()
>15	ParameterList	 
>16	CompoundStatement	 
>17	ExpressionStatement	 
>18	CallExpression	clear ( )
>19	ArgumentList	 
>20	Callee	clear
>21	Identifier	clear
>25	FunctionDef	clear ()
>26	ParameterList	 
>27	ReturnType	void
>28	CompoundStatement	 
>29	ExpressionStatement	 
>30	AssignmentExpr	_drv = nullptr
>31	Identifier	nullptr
>32	Identifier	_drv
>33	ExpressionStatement	 
>34	AssignmentExpr	_init = false
>35	Identifier	false
>36	Identifier	_init
>37	IfStatement	if ( _init && _drv )
>38	CompoundStatement	 
>39	ExpressionStatement	 
>40	CallExpression	_drv -> threadEnd ( )
>41	ArgumentList	 
>42	Callee	_drv -> threadEnd
>43	PtrMemberAccess	_drv -> threadEnd
>44	Identifier	threadEnd
>45	Identifier	_drv
>46	Condition	 
>47	AndExpression	_init && _drv
>48	Identifier	_drv
>49	Identifier	_init
>57	FunctionDef	init (sql 
>58	ParameterList	sql 
>59	Parameter	 
>60	Identifier	drv
>61	ParameterType	sql 
>62	ReturnType	void
>63	CompoundStatement	 
>64	ExpressionStatement	 
>65	CallExpression	_drv -> threadInit ( )
>66	ArgumentList	 
>67	Callee	_drv -> threadInit
>68	PtrMemberAccess	_drv -> threadInit
>69	Identifier	threadInit
>70	Identifier	_drv
>71	ExpressionStatement	 
>72	AssignmentExpr	_drv = drv
>73	Identifier	drv
>74	Identifier	_drv
>75	ExpressionStatement	 
>76	AssignmentExpr	_init = true
>77	Identifier	true
>78	Identifier	_init
>79	IfStatement	if ( _init )
>80	ReturnStatement	 
>81	Condition	 
>82	Identifier	_init
>92	FunctionDef	MySQLMMManager 
>93	ParameterList	const std 
>94	Parameter	 
>95	Identifier	args
>96	ParameterType	const std 
>97	Parameter	 
>98	Identifier	b9f
>99	ParameterType	const bind9_functions &
>100	Parameter	 
>101	Identifier	dlzname
>102	ParameterType	const std 
>103	CompoundStatement	 
>104	ForStatement	for ( unsigned int i = 0 ; i < initial_connections ; ++ i )
>105	ExpressionStatement	 
>106	CallExpression	spawnConnection ( )
>107	ArgumentList	 
>108	Callee	spawnConnection
>109	Identifier	spawnConnection
>110	UnaryExpression	 
>111	Identifier	i
>112	IncDec	++
>113	Condition	 
>114	RelationalExpression	i < initial_connections
>115	Identifier	initial_connections
>116	Identifier	i
>117	ForInit	 
>118	IdentifierDeclStatement	unsigned int i = 0 ;
>119	IdentifierDecl	i = 0
>120	AssignmentExpr	i = 0
>121	PrimaryExpression	0
>122	Identifier	i
>123	Identifier	i
>124	IdentifierDeclType	unsigned int
>125	ExpressionStatement	 
>126	CallExpression	mysqlmm_thread_init_obj . init ( driver )
>127	ArgumentList	driver
>128	Argument	driver
>129	Identifier	driver
>130	Callee	mysqlmm_thread_init_obj . init
>131	MemberAccess	mysqlmm_thread_init_obj . init
>132	Identifier	init
>133	Identifier	mysqlmm_thread_init_obj
>134	ExpressionStatement	 
>135	AssignmentExpr	driver = sql 
>136	CallExpression	sql 
>137	ArgumentList	 
>138	Callee	sql 
>139	Identifier	sql 
>140	Identifier	driver
>141	ExpressionStatement	 
>142	CallExpression	readConfig ( args [ 1 ] )
>143	ArgumentList	args [ 1 ]
>144	Argument	args [ 1 ]
>145	ArrayIndexing	args [ 1 ]
>146	PrimaryExpression	1
>147	Identifier	args
>148	Callee	readConfig
>149	Identifier	readConfig
>150	ExpressionStatement	 
>151	CallExpression	f . log ( ISC_LOG_INFO , \"MySQLMM driver instance \\"%s\\" starting\" , dlzname . c_str ( ) )
>152	ArgumentList	ISC_LOG_INFO
>153	Argument	dlzname . c_str ( )
>154	CallExpression	dlzname . c_str ( )
>155	ArgumentList	 
>156	Callee	dlzname . c_str
>157	MemberAccess	dlzname . c_str
>158	Identifier	c_str
>159	Identifier	dlzname
>160	Argument	\"MySQLMM driver instance \\"%s\\" starting\"
>161	PrimaryExpression	\"MySQLMM driver instance \\"%s\\" starting\"
>162	Argument	ISC_LOG_INFO
>163	Identifier	ISC_LOG_INFO
>164	Callee	f . log
>165	MemberAccess	f . log
>166	Identifier	log
>167	Identifier	f
>168	ExpressionStatement	 
>169	CallExpression	std 
>170	ArgumentList	\"MySQLMM expects exactly one argument\"
>171	Argument	\"MySQLMM expects exactly one argument\"
>172	PrimaryExpression	\"MySQLMM expects exactly one argument\"
>173	Callee	std 
>174	Identifier	std 
>175	IfStatement	if ( args . size ( ) != 2 )
>176	Statement	 
>177	Condition	 
>178	EqualityExpression	args . size ( ) != 2
>179	PrimaryExpression	2
>180	CallExpression	args . size ( )
>181	ArgumentList	 
>182	Callee	args . size
>183	MemberAccess	args . size
>184	Identifier	size
>185	Identifier	args
>202	FunctionDef	MySQLMMManager 
>203	ParameterList	 
>204	CompoundStatement	 
>208	FunctionDef	MySQLMMManager 
>209	ParameterList	const std 
>210	Parameter	 
>211	Identifier	cfg
>212	ParameterType	const std 
>213	ReturnType	void
>214	CompoundStatement	 
>215	BlockStarter	 
>216	CompoundStatement	 
>217	ExpressionStatement	std 
>218	CallExpression	std 
>219	ArgumentList	msg + e . what ( )
>220	Argument	msg + e . what ( )
>221	AdditiveExpression	msg + e . what ( )
>222	CallExpression	e . what ( )
>223	ArgumentList	 
>224	Callee	e . what
>225	MemberAccess	e . what
>226	Identifier	what
>227	Identifier	e
>228	Identifier	msg
>229	Callee	std 
>230	Identifier	std 
>231	Statement	throw
>232	IdentifierDeclStatement	std 
>233	IdentifierDecl	msg = \"Failed reading MySQLMM configuration
>234	AssignmentExpr	msg = \"Failed reading MySQLMM configuration
>235	PrimaryExpression	\"Failed reading MySQLMM configuration
>236	Identifier	msg
>237	Identifier	msg
>238	IdentifierDeclType	std 
>239	ExpressionStatement	queries . clear ( )
>240	CallExpression	queries . clear ( )
>241	ArgumentList	 
>242	Callee	queries . clear
>243	MemberAccess	queries . clear
>244	Identifier	clear
>245	Identifier	queries
>246	Identifier	e
>247	BlockStarter	 
>248	CompoundStatement	 
>249	IfStatement	if ( ! have_findzone || ! have_lookup )
>250	CompoundStatement	 
>251	ExpressionStatement	std 
>252	CallExpression	std 
>253	ArgumentList	\"findzone and lookup queries are required\"
>254	Argument	\"findzone and lookup queries are required\"
>255	PrimaryExpression	\"findzone and lookup queries are required\"
>256	Callee	std 
>257	Identifier	std 
>258	Statement	throw
>259	Condition	! have_findzone || ! have_lookup
>260	OrExpression	! have_findzone || ! have_lookup
>261	UnaryOp	! have_lookup
>262	Identifier	have_lookup
>263	UnaryOperator	!
>264	UnaryOp	! have_findzone
>265	Identifier	have_findzone
>266	UnaryOperator	!
>267	CompoundStatement	 
>268	ExpressionStatement	queries [ qtype ] = std 
>269	AssignmentExpr	queries [ qtype ] = std 
>270	CallExpression	std 
>271	ArgumentList	query
>272	Argument	query
>273	Identifier	query
>274	Callee	std 
>275	Identifier	std 
>276	ArrayIndexing	queries [ qtype ]
>277	Identifier	qtype
>278	Identifier	queries
>279	ExpressionStatement	f . log ( ISC_LOG_INFO , \" - %s query with %d parameters
>280	CallExpression	f . log ( ISC_LOG_INFO , \" - %s query with %d parameters
>281	ArgumentList	ISC_LOG_INFO
>282	Argument	query . sql . c_str ( )
>283	CallExpression	query . sql . c_str ( )
>284	ArgumentList	 
>285	Callee	query . sql . c_str
>286	MemberAccess	query . sql . c_str
>287	Identifier	c_str
>288	MemberAccess	query . sql
>289	Identifier	sql
>290	Identifier	query
>291	Argument	( int ) query . params . size ( )
>292	CastExpression	( int ) query . params . size ( )
>293	CallExpression	query . params . size ( )
>294	ArgumentList	 
>295	Callee	query . params . size
>296	MemberAccess	query . params . size
>297	Identifier	size
>298	MemberAccess	query . params
>299	Identifier	params
>300	Identifier	query
>301	CastTarget	int
>302	Argument	queryname . c_str ( )
>303	CallExpression	queryname . c_str ( )
>304	ArgumentList	 
>305	Callee	queryname . c_str
>306	MemberAccess	queryname . c_str
>307	Identifier	c_str
>308	Identifier	queryname
>309	Argument	\" - %s query with %d parameters
>310	PrimaryExpression	\" - %s query with %d parameters
>311	Argument	ISC_LOG_INFO
>312	Identifier	ISC_LOG_INFO
>313	Callee	f . log
>314	MemberAccess	f . log
>315	Identifier	log
>316	Identifier	f
>317	IfStatement	if ( ( need_zone && ! have_zone ) || ( need_record && ! have_record ) || ( need_client && ! have_client ) )
>318	CompoundStatement	 
>319	ExpressionStatement	std 
>320	CallExpression	std 
>321	ArgumentList	\"Required parameters not present\"
>322	Argument	\"Required parameters not present\"
>323	PrimaryExpression	\"Required parameters not present\"
>324	Callee	std 
>325	Identifier	std 
>326	Statement	throw
>327	ExpressionStatement	f . log ( ISC_LOG_ERROR , \"%s query needs %s%s%s parameters\" , queryname . c_str ( ) , need_zone ? \"zone \" 
>328	CallExpression	f . log ( ISC_LOG_ERROR , \"%s query needs %s%s%s parameters\" , queryname . c_str ( ) , need_zone ? \"zone \" 
>329	ArgumentList	ISC_LOG_ERROR
>330	Argument	need_client ? \"client \" 
>331	ConditionalExpression	need_client ? \"client \" 
>332	PrimaryExpression	\"\"
>333	PrimaryExpression	\"client \"
>334	Condition	need_client
>335	Identifier	need_client
>336	Argument	need_record ? \"record \" 
>337	ConditionalExpression	need_record ? \"record \" 
>338	PrimaryExpression	\"\"
>339	PrimaryExpression	\"record \"
>340	Condition	need_record
>341	Identifier	need_record
>342	Argument	need_zone ? \"zone \" 
>343	ConditionalExpression	need_zone ? \"zone \" 
>344	PrimaryExpression	\"\"
>345	PrimaryExpression	\"zone \"
>346	Condition	need_zone
>347	Identifier	need_zone
>348	Argument	queryname . c_str ( )
>349	CallExpression	queryname . c_str ( )
>350	ArgumentList	 
>351	Callee	queryname . c_str
>352	MemberAccess	queryname . c_str
>353	Identifier	c_str
>354	Identifier	queryname
>355	Argument	\"%s query needs %s%s%s parameters\"
>356	PrimaryExpression	\"%s query needs %s%s%s parameters\"
>357	Argument	ISC_LOG_ERROR
>358	Identifier	ISC_LOG_ERROR
>359	Callee	f . log
>360	MemberAccess	f . log
>361	Identifier	log
>362	Identifier	f
>363	Condition	( need_zone && ! have_zone ) || ( need_record && ! have_record ) || ( need_client && ! have_client )
>364	OrExpression	( need_zone && ! have_zone ) || ( need_record && ! have_record ) || ( need_client && ! have_client )
>365	OrExpression	( need_record && ! have_record ) || ( need_client && ! have_client )
>366	AndExpression	need_client && ! have_client
>367	UnaryOp	! have_client
>368	Identifier	have_client
>369	UnaryOperator	!
>370	Identifier	need_client
>371	AndExpression	need_record && ! have_record
>372	UnaryOp	! have_record
>373	Identifier	have_record
>374	UnaryOperator	!
>375	Identifier	need_record
>376	AndExpression	need_zone && ! have_zone
>377	UnaryOp	! have_zone
>378	Identifier	have_zone
>379	UnaryOperator	!
>380	Identifier	need_zone
>381	IfStatement	if ( paramsArr . isArray ( ) )
>382	CompoundStatement	 
>383	CompoundStatement	 
>384	IfStatement	if ( pstr == \"zone\" )
>385	ElseStatement	else
>386	IfStatement	if ( pstr == \"record\" )
>387	ElseStatement	else
>388	IfStatement	if ( pstr == \"client\" )
>389	ElseStatement	else
>390	CompoundStatement	 
>391	ExpressionStatement	std 
>392	CallExpression	std 
>393	ArgumentList	msg + pstr
>394	Argument	msg + pstr
>395	AdditiveExpression	msg + pstr
>396	Identifier	pstr
>397	Identifier	msg
>398	Callee	std 
>399	Identifier	std 
>400	Statement	throw
>401	IdentifierDeclStatement	std 
>402	IdentifierDecl	msg = \"MySQLMM
>403	AssignmentExpr	msg = \"MySQLMM
>404	PrimaryExpression	\"MySQLMM
>405	Identifier	msg
>406	Identifier	msg
>407	IdentifierDeclType	std 
>408	CompoundStatement	 
>409	ExpressionStatement	have_client = true
>410	AssignmentExpr	have_client = true
>411	Identifier	true
>412	Identifier	have_client
>413	ExpressionStatement	query . params . push_back ( MM_PARAM_CLIENT )
>414	CallExpression	query . params . push_back ( MM_PARAM_CLIENT )
>415	ArgumentList	MM_PARAM_CLIENT
>416	Argument	MM_PARAM_CLIENT
>417	Identifier	MM_PARAM_CLIENT
>418	Callee	query . params . push_back
>419	MemberAccess	query . params . push_back
>420	Identifier	push_back
>421	MemberAccess	query . params
>422	Identifier	params
>423	Identifier	query
>424	Condition	pstr == \"client\"
>425	EqualityExpression	pstr == \"client\"
>426	PrimaryExpression	\"client\"
>427	Identifier	pstr
>428	CompoundStatement	 
>429	ExpressionStatement	have_record = true
>430	AssignmentExpr	have_record = true
>431	Identifier	true
>432	Identifier	have_record
>433	ExpressionStatement	query . params . push_back ( MM_PARAM_RECORD )
>434	CallExpression	query . params . push_back ( MM_PARAM_RECORD )
>435	ArgumentList	MM_PARAM_RECORD
>436	Argument	MM_PARAM_RECORD
>437	Identifier	MM_PARAM_RECORD
>438	Callee	query . params . push_back
>439	MemberAccess	query . params . push_back
>440	Identifier	push_back
>441	MemberAccess	query . params
>442	Identifier	params
>443	Identifier	query
>444	Condition	pstr == \"record\"
>445	EqualityExpression	pstr == \"record\"
>446	PrimaryExpression	\"record\"
>447	Identifier	pstr
>448	CompoundStatement	 
>449	ExpressionStatement	have_zone = true
>450	AssignmentExpr	have_zone = true
>451	Identifier	true
>452	Identifier	have_zone
>453	ExpressionStatement	query . params . push_back ( MM_PARAM_ZONE )
>454	CallExpression	query . params . push_back ( MM_PARAM_ZONE )
>455	ArgumentList	MM_PARAM_ZONE
>456	Argument	MM_PARAM_ZONE
>457	Identifier	MM_PARAM_ZONE
>458	Callee	query . params . push_back
>459	MemberAccess	query . params . push_back
>460	Identifier	push_back
>461	MemberAccess	query . params
>462	Identifier	params
>463	Identifier	query
>464	Condition	pstr == \"zone\"
>465	EqualityExpression	pstr == \"zone\"
>466	PrimaryExpression	\"zone\"
>467	Identifier	pstr
>468	IdentifierDeclStatement	std 
>469	IdentifierDecl	pstr = param . asString ( )
>470	AssignmentExpr	pstr = param . asString ( )
>471	CallExpression	param . asString ( )
>472	ArgumentList	 
>473	Callee	param . asString
>474	MemberAccess	param . asString
>475	Identifier	asString
>476	Identifier	param
>477	Identifier	pstr
>478	Identifier	pstr
>479	IdentifierDeclType	std 
>480	Statement	)
>481	Statement	paramsArr
>482	Label	param 
>483	Identifier	param
>484	Statement	&
>485	Statement	Value
>486	Statement	 
>487	Statement	Json
>488	Statement	const
>489	Statement	(
>490	Statement	for
>491	Condition	paramsArr . isArray ( )
>492	CallExpression	paramsArr . isArray ( )
>493	ArgumentList	 
>494	Callee	paramsArr . isArray
>495	MemberAccess	paramsArr . isArray
>496	Identifier	isArray
>497	Identifier	paramsArr
>498	IdentifierDeclStatement	bool have_client = false ;
>499	IdentifierDecl	have_client = false
>500	AssignmentExpr	have_client = false
>501	Identifier	false
>502	Identifier	false
>503	Identifier	have_client
>504	IdentifierDeclType	bool
>505	IdentifierDeclStatement	bool have_record = false ;
>506	IdentifierDecl	have_record = false
>507	AssignmentExpr	have_record = false
>508	Identifier	false
>509	Identifier	false
>510	Identifier	have_record
>511	IdentifierDeclType	bool
>512	IdentifierDeclStatement	bool have_zone = false ;
>513	IdentifierDecl	have_zone = false
>514	AssignmentExpr	have_zone = false
>515	Identifier	false
>516	Identifier	false
>517	Identifier	have_zone
>518	IdentifierDeclType	bool
>519	IdentifierDeclStatement	Json 
>520	IdentifierDecl	paramsArr = queryval [ \"params\" ]
>521	AssignmentExpr	paramsArr = queryval [ \"params\" ]
>522	ArrayIndexing	queryval [ \"params\" ]
>523	PrimaryExpression	\"params\"
>524	Identifier	queryval
>525	Identifier	paramsArr
>526	Identifier	paramsArr
>527	IdentifierDeclType	Json 
>528	IfStatement	if ( queryname == \"allnodes\" )
>529	ElseStatement	else
>530	IfStatement	if ( queryname == \"lookup\" )
>531	ElseStatement	else
>532	IfStatement	if ( queryname == \"findzone\" )
>533	ElseStatement	else
>534	IfStatement	if ( queryname == \"authority\" )
>535	ElseStatement	else
>536	IfStatement	if ( queryname == \"allowxfr\" )
>537	ElseStatement	else
>538	IfStatement	if ( queryname == \"countzone\" )
>539	ElseStatement	else
>540	CompoundStatement	 
>541	ExpressionStatement	std 
>542	CallExpression	std 
>543	ArgumentList	msg + queryname
>544	Argument	msg + queryname
>545	AdditiveExpression	msg + queryname
>546	Identifier	queryname
>547	Identifier	msg
>548	Callee	std 
>549	Identifier	std 
>550	Statement	throw
>551	IdentifierDeclStatement	std 
>552	IdentifierDecl	msg = \"MySQLMM
>553	AssignmentExpr	msg = \"MySQLMM
>554	PrimaryExpression	\"MySQLMM
>555	Identifier	msg
>556	Identifier	msg
>557	IdentifierDeclType	std 
>558	CompoundStatement	 
>559	ExpressionStatement	need_zone = true
>560	AssignmentExpr	need_zone = true
>561	Identifier	true
>562	Identifier	need_zone
>563	ExpressionStatement	qtype = MM_QUERY_COUNTZONE
>564	AssignmentExpr	qtype = MM_QUERY_COUNTZONE
>565	Identifier	MM_QUERY_COUNTZONE
>566	Identifier	qtype
>567	Condition	queryname == \"countzone\"
>568	EqualityExpression	queryname == \"countzone\"
>569	PrimaryExpression	\"countzone\"
>570	Identifier	queryname
>571	CompoundStatement	 
>572	ExpressionStatement	need_client = true
>573	AssignmentExpr	need_client = true
>574	Identifier	true
>575	Identifier	need_client
>576	ExpressionStatement	need_zone = true
>577	AssignmentExpr	need_zone = true
>578	Identifier	true
>579	Identifier	need_zone
>580	ExpressionStatement	qtype = MM_QUERY_ALLOWXFR
>581	AssignmentExpr	qtype = MM_QUERY_ALLOWXFR
>582	Identifier	MM_QUERY_ALLOWXFR
>583	Identifier	qtype
>584	Condition	queryname == \"allowxfr\"
>585	EqualityExpression	queryname == \"allowxfr\"
>586	PrimaryExpression	\"allowxfr\"
>587	Identifier	queryname
>588	CompoundStatement	 
>589	ExpressionStatement	need_zone = true
>590	AssignmentExpr	need_zone = true
>591	Identifier	true
>592	Identifier	need_zone
>593	ExpressionStatement	qtype = MM_QUERY_AUTHORITY
>594	AssignmentExpr	qtype = MM_QUERY_AUTHORITY
>595	Identifier	MM_QUERY_AUTHORITY
>596	Identifier	qtype
>597	Condition	queryname == \"authority\"
>598	EqualityExpression	queryname == \"authority\"
>599	PrimaryExpression	\"authority\"
>600	Identifier	queryname
>601	CompoundStatement	 
>602	ExpressionStatement	need_zone = true
>603	AssignmentExpr	need_zone = true
>604	Identifier	true
>605	Identifier	need_zone
>606	ExpressionStatement	have_findzone = true
>607	AssignmentExpr	have_findzone = true
>608	Identifier	true
>609	Identifier	have_findzone
>610	ExpressionStatement	qtype = MM_QUERY_FINDZONE
>611	AssignmentExpr	qtype = MM_QUERY_FINDZONE
>612	Identifier	MM_QUERY_FINDZONE
>613	Identifier	qtype
>614	Condition	queryname == \"findzone\"
>615	EqualityExpression	queryname == \"findzone\"
>616	PrimaryExpression	\"findzone\"
>617	Identifier	queryname
>618	CompoundStatement	 
>619	ExpressionStatement	need_record = true
>620	AssignmentExpr	need_record = true
>621	Identifier	true
>622	Identifier	need_record
>623	ExpressionStatement	have_lookup = true
>624	AssignmentExpr	have_lookup = true
>625	Identifier	true
>626	Identifier	have_lookup
>627	ExpressionStatement	qtype = MM_QUERY_LOOKUP
>628	AssignmentExpr	qtype = MM_QUERY_LOOKUP
>629	Identifier	MM_QUERY_LOOKUP
>630	Identifier	qtype
>631	Condition	queryname == \"lookup\"
>632	EqualityExpression	queryname == \"lookup\"
>633	PrimaryExpression	\"lookup\"
>634	Identifier	queryname
>635	CompoundStatement	 
>636	ExpressionStatement	need_zone = true
>637	AssignmentExpr	need_zone = true
>638	Identifier	true
>639	Identifier	need_zone
>640	ExpressionStatement	qtype = MM_QUERY_ALLNODES
>641	AssignmentExpr	qtype = MM_QUERY_ALLNODES
>642	Identifier	MM_QUERY_ALLNODES
>643	Identifier	qtype
>644	Condition	queryname == \"allnodes\"
>645	EqualityExpression	queryname == \"allnodes\"
>646	PrimaryExpression	\"allnodes\"
>647	Identifier	queryname
>648	IdentifierDeclStatement	bool need_record = false ;
>649	IdentifierDecl	need_record = false
>650	AssignmentExpr	need_record = false
>651	Identifier	false
>652	Identifier	false
>653	Identifier	need_record
>654	IdentifierDeclType	bool
>655	IdentifierDeclStatement	bool need_zone = false ;
>656	IdentifierDecl	need_zone = false
>657	AssignmentExpr	need_zone = false
>658	Identifier	false
>659	Identifier	false
>660	Identifier	need_zone
>661	IdentifierDeclType	bool
>662	IdentifierDeclStatement	bool need_client = false ;
>663	IdentifierDecl	need_client = false
>664	AssignmentExpr	need_client = false
>665	Identifier	false
>666	Identifier	false
>667	Identifier	need_client
>668	IdentifierDeclType	bool
>669	ExpressionStatement	query . sql = queryval . get ( \"sql\" , \"\" ) . asString ( )
>670	AssignmentExpr	query . sql = queryval . get ( \"sql\" , \"\" ) . asString ( )
>671	CallExpression	queryval . get ( \"sql\" , \"\" ) . asString ( )
>672	ArgumentList	 
>673	Callee	queryval . get ( \"sql\" , \"\" ) . asString
>674	MemberAccess	queryval . get ( \"sql\" , \"\" ) . asString
>675	Identifier	asString
>676	CallExpression	queryval . get ( \"sql\" , \"\" )
>677	ArgumentList	\"sql\"
>678	Argument	\"\"
>679	PrimaryExpression	\"\"
>680	Argument	\"sql\"
>681	PrimaryExpression	\"sql\"
>682	Callee	queryval . get
>683	MemberAccess	queryval . get
>684	Identifier	get
>685	Identifier	queryval
>686	MemberAccess	query . sql
>687	Identifier	sql
>688	Identifier	query
>689	IdentifierDeclStatement	QueryTypes qtype = MM_QUERY_ALLNODES ;
>690	IdentifierDecl	qtype = MM_QUERY_ALLNODES
>691	AssignmentExpr	qtype = MM_QUERY_ALLNODES
>692	Identifier	MM_QUERY_ALLNODES
>693	Identifier	MM_QUERY_ALLNODES
>694	Identifier	qtype
>695	IdentifierDeclType	QueryTypes
>696	IdentifierDeclStatement	mmquery query ;
>697	IdentifierDecl	query
>698	Identifier	query
>699	IdentifierDeclType	mmquery
>700	ExpressionStatement	strtolower ( queryname )
>701	CallExpression	strtolower ( queryname )
>702	ArgumentList	queryname
>703	Argument	queryname
>704	Identifier	queryname
>705	Callee	strtolower
>706	Identifier	strtolower
>707	IdentifierDeclStatement	Json 
>708	IdentifierDecl	queryval = queriesObj [ queryname ]
>709	AssignmentExpr	queryval = queriesObj [ queryname ]
>710	ArrayIndexing	queriesObj [ queryname ]
>711	Identifier	queryname
>712	Identifier	queriesObj
>713	Identifier	queryval
>714	Identifier	queryval
>715	IdentifierDeclType	Json 
>716	Statement	)
>717	Statement	)
>718	Statement	(
>719	Statement	getMemberNames
>720	Statement	.
>721	Statement	queriesObj
>722	Label	queryname 
>723	Identifier	queryname
>724	Statement	string
>725	Statement	 
>726	Statement	std
>727	Statement	(
>728	Statement	for
>729	IdentifierDeclStatement	bool have_lookup = false ;
>730	IdentifierDecl	have_lookup = false
>731	AssignmentExpr	have_lookup = false
>732	Identifier	false
>733	Identifier	false
>734	Identifier	have_lookup
>735	IdentifierDeclType	bool
>736	IdentifierDeclStatement	bool have_findzone = false ;
>737	IdentifierDecl	have_findzone = false
>738	AssignmentExpr	have_findzone = false
>739	Identifier	false
>740	Identifier	false
>741	Identifier	have_findzone
>742	IdentifierDeclType	bool
>743	IdentifierDeclStatement	Json 
>744	IdentifierDecl	queriesObj = root [ \"queries\" ]
>745	AssignmentExpr	queriesObj = root [ \"queries\" ]
>746	ArrayIndexing	root [ \"queries\" ]
>747	PrimaryExpression	\"queries\"
>748	Identifier	root
>749	Identifier	queriesObj
>750	Identifier	queriesObj
>751	IdentifierDeclType	Json 
>752	ExpressionStatement	f . log ( ISC_LOG_INFO , \" - max_connections = %d\" , max_connections )
>753	CallExpression	f . log ( ISC_LOG_INFO , \" - max_connections = %d\" , max_connections )
>754	ArgumentList	ISC_LOG_INFO
>755	Argument	max_connections
>756	Identifier	max_connections
>757	Argument	\" - max_connections = %d\"
>758	PrimaryExpression	\" - max_connections = %d\"
>759	Argument	ISC_LOG_INFO
>760	Identifier	ISC_LOG_INFO
>761	Callee	f . log
>762	MemberAccess	f . log
>763	Identifier	log
>764	Identifier	f
>765	ExpressionStatement	f . log ( ISC_LOG_INFO , \" - initial_connections = %d\" , initial_connections )
>766	CallExpression	f . log ( ISC_LOG_INFO , \" - initial_connections = %d\" , initial_connections )
>767	ArgumentList	ISC_LOG_INFO
>768	Argument	initial_connections
>769	Identifier	initial_connections
>770	Argument	\" - initial_connections = %d\"
>771	PrimaryExpression	\" - initial_connections = %d\"
>772	Argument	ISC_LOG_INFO
>773	Identifier	ISC_LOG_INFO
>774	Callee	f . log
>775	MemberAccess	f . log
>776	Identifier	log
>777	Identifier	f
>778	ExpressionStatement	f . log ( ISC_LOG_INFO , \" - db = %s\" , db . c_str ( ) )
>779	CallExpression	f . log ( ISC_LOG_INFO , \" - db = %s\" , db . c_str ( ) )
>780	ArgumentList	ISC_LOG_INFO
>781	Argument	db . c_str ( )
>782	CallExpression	db . c_str ( )
>783	ArgumentList	 
>784	Callee	db . c_str
>785	MemberAccess	db . c_str
>786	Identifier	c_str
>787	Identifier	db
>788	Argument	\" - db = %s\"
>789	PrimaryExpression	\" - db = %s\"
>790	Argument	ISC_LOG_INFO
>791	Identifier	ISC_LOG_INFO
>792	Callee	f . log
>793	MemberAccess	f . log
>794	Identifier	log
>795	Identifier	f
>796	ExpressionStatement	f . log ( ISC_LOG_INFO , \" - password %s\" , password . empty ( ) ? \"not set\" 
>797	CallExpression	f . log ( ISC_LOG_INFO , \" - password %s\" , password . empty ( ) ? \"not set\" 
>798	ArgumentList	ISC_LOG_INFO
>799	Argument	password . empty ( ) ? \"not set\" 
>800	ConditionalExpression	password . empty ( ) ? \"not set\" 
>801	PrimaryExpression	\"set\"
>802	PrimaryExpression	\"not set\"
>803	Condition	password . empty ( )
>804	CallExpression	password . empty ( )
>805	ArgumentList	 
>806	Callee	password . empty
>807	MemberAccess	password . empty
>808	Identifier	empty
>809	Identifier	password
>810	Argument	\" - password %s\"
>811	PrimaryExpression	\" - password %s\"
>812	Argument	ISC_LOG_INFO
>813	Identifier	ISC_LOG_INFO
>814	Callee	f . log
>815	MemberAccess	f . log
>816	Identifier	log
>817	Identifier	f
>818	ExpressionStatement	f . log ( ISC_LOG_INFO , \" - user = %s\" , user . c_str ( ) )
>819	CallExpression	f . log ( ISC_LOG_INFO , \" - user = %s\" , user . c_str ( ) )
>820	ArgumentList	ISC_LOG_INFO
>821	Argument	user . c_str ( )
>822	CallExpression	user . c_str ( )
>823	ArgumentList	 
>824	Callee	user . c_str
>825	MemberAccess	user . c_str
>826	Identifier	c_str
>827	Identifier	user
>828	Argument	\" - user = %s\"
>829	PrimaryExpression	\" - user = %s\"
>830	Argument	ISC_LOG_INFO
>831	Identifier	ISC_LOG_INFO
>832	Callee	f . log
>833	MemberAccess	f . log
>834	Identifier	log
>835	Identifier	f
>836	ExpressionStatement	f . log ( ISC_LOG_INFO , \" - url = %s\" , url . c_str ( ) )
>837	CallExpression	f . log ( ISC_LOG_INFO , \" - url = %s\" , url . c_str ( ) )
>838	ArgumentList	ISC_LOG_INFO
>839	Argument	url . c_str ( )
>840	CallExpression	url . c_str ( )
>841	ArgumentList	 
>842	Callee	url . c_str
>843	MemberAccess	url . c_str
>844	Identifier	c_str
>845	Identifier	url
>846	Argument	\" - url = %s\"
>847	PrimaryExpression	\" - url = %s\"
>848	Argument	ISC_LOG_INFO
>849	Identifier	ISC_LOG_INFO
>850	Callee	f . log
>851	MemberAccess	f . log
>852	Identifier	log
>853	Identifier	f
>854	ExpressionStatement	f . log ( ISC_LOG_INFO , \"MySQLMM Settings
>855	CallExpression	f . log ( ISC_LOG_INFO , \"MySQLMM Settings
>856	ArgumentList	ISC_LOG_INFO
>857	Argument	\"MySQLMM Settings
>858	PrimaryExpression	\"MySQLMM Settings
>859	Argument	ISC_LOG_INFO
>860	Identifier	ISC_LOG_INFO
>861	Callee	f . log
>862	MemberAccess	f . log
>863	Identifier	log
>864	Identifier	f
>865	ExpressionStatement	std 
>866	CallExpression	std 
>867	ArgumentList	\"max_connections must be >= initial_connections\"
>868	Argument	\"max_connections must be >= initial_connections\"
>869	PrimaryExpression	\"max_connections must be >= initial_connections\"
>870	Callee	std 
>871	Identifier	std 
>872	IfStatement	if ( max_connections < initial_connections )
>873	Statement	throw
>874	Condition	max_connections < initial_connections
>875	RelationalExpression	max_connections < initial_connections
>876	Identifier	initial_connections
>877	Identifier	max_connections
>878	ExpressionStatement	max_connections = root . get ( \"max_connections\" , initial_connections + 8 ) . asUInt ( )
>879	AssignmentExpr	max_connections = root . get ( \"max_connections\" , initial_connections + 8 ) . asUInt ( )
>880	CallExpression	root . get ( \"max_connections\" , initial_connections + 8 ) . asUInt ( )
>881	ArgumentList	 
>882	Callee	root . get ( \"max_connections\" , initial_connections + 8 ) . asUInt
>883	MemberAccess	root . get ( \"max_connections\" , initial_connections + 8 ) . asUInt
>884	Identifier	asUInt
>885	CallExpression	root . get ( \"max_connections\" , initial_connections + 8 )
>886	ArgumentList	\"max_connections\"
>887	Argument	initial_connections + 8
>888	AdditiveExpression	initial_connections + 8
>889	PrimaryExpression	8
>890	Identifier	initial_connections
>891	Argument	\"max_connections\"
>892	PrimaryExpression	\"max_connections\"
>893	Callee	root . get
>894	MemberAccess	root . get
>895	Identifier	get
>896	Identifier	root
>897	Identifier	max_connections
>898	ExpressionStatement	initial_connections = root . get ( \"initial_connections\" , 1 ) . asUInt ( )
>899	AssignmentExpr	initial_connections = root . get ( \"initial_connections\" , 1 ) . asUInt ( )
>900	CallExpression	root . get ( \"initial_connections\" , 1 ) . asUInt ( )
>901	ArgumentList	 
>902	Callee	root . get ( \"initial_connections\" , 1 ) . asUInt
>903	MemberAccess	root . get ( \"initial_connections\" , 1 ) . asUInt
>904	Identifier	asUInt
>905	CallExpression	root . get ( \"initial_connections\" , 1 )
>906	ArgumentList	\"initial_connections\"
>907	Argument	1
>908	PrimaryExpression	1
>909	Argument	\"initial_connections\"
>910	PrimaryExpression	\"initial_connections\"
>911	Callee	root . get
>912	MemberAccess	root . get
>913	Identifier	get
>914	Identifier	root
>915	Identifier	initial_connections
>916	ExpressionStatement	db = root . get ( \"db\" , \"\" ) . asString ( )
>917	AssignmentExpr	db = root . get ( \"db\" , \"\" ) . asString ( )
>918	CallExpression	root . get ( \"db\" , \"\" ) . asString ( )
>919	ArgumentList	 
>920	Callee	root . get ( \"db\" , \"\" ) . asString
>921	MemberAccess	root . get ( \"db\" , \"\" ) . asString
>922	Identifier	asString
>923	CallExpression	root . get ( \"db\" , \"\" )
>924	ArgumentList	\"db\"
>925	Argument	\"\"
>926	PrimaryExpression	\"\"
>927	Argument	\"db\"
>928	PrimaryExpression	\"db\"
>929	Callee	root . get
>930	MemberAccess	root . get
>931	Identifier	get
>932	Identifier	root
>933	Identifier	db
>934	ExpressionStatement	password = root . get ( \"pass\" , \"\" ) . asString ( )
>935	AssignmentExpr	password = root . get ( \"pass\" , \"\" ) . asString ( )
>936	CallExpression	root . get ( \"pass\" , \"\" ) . asString ( )
>937	ArgumentList	 
>938	Callee	root . get ( \"pass\" , \"\" ) . asString
>939	MemberAccess	root . get ( \"pass\" , \"\" ) . asString
>940	Identifier	asString
>941	CallExpression	root . get ( \"pass\" , \"\" )
>942	ArgumentList	\"pass\"
>943	Argument	\"\"
>944	PrimaryExpression	\"\"
>945	Argument	\"pass\"
>946	PrimaryExpression	\"pass\"
>947	Callee	root . get
>948	MemberAccess	root . get
>949	Identifier	get
>950	Identifier	root
>951	Identifier	password
>952	ExpressionStatement	user = root . get ( \"user\" , \"bind\" ) . asString ( )
>953	AssignmentExpr	user = root . get ( \"user\" , \"bind\" ) . asString ( )
>954	CallExpression	root . get ( \"user\" , \"bind\" ) . asString ( )
>955	ArgumentList	 
>956	Callee	root . get ( \"user\" , \"bind\" ) . asString
>957	MemberAccess	root . get ( \"user\" , \"bind\" ) . asString
>958	Identifier	asString
>959	CallExpression	root . get ( \"user\" , \"bind\" )
>960	ArgumentList	\"user\"
>961	Argument	\"bind\"
>962	PrimaryExpression	\"bind\"
>963	Argument	\"user\"
>964	PrimaryExpression	\"user\"
>965	Callee	root . get
>966	MemberAccess	root . get
>967	Identifier	get
>968	Identifier	root
>969	Identifier	user
>970	ExpressionStatement	url = root . get ( \"url\" , \"tcp
>971	AssignmentExpr	url = root . get ( \"url\" , \"tcp
>972	CallExpression	root . get ( \"url\" , \"tcp
>973	ArgumentList	 
>974	Callee	root . get ( \"url\" , \"tcp
>975	MemberAccess	root . get ( \"url\" , \"tcp
>976	Identifier	asString
>977	CallExpression	root . get ( \"url\" , \"tcp
>978	ArgumentList	\"url\"
>979	Argument	\"tcp
>980	PrimaryExpression	\"tcp
>981	Argument	\"url\"
>982	PrimaryExpression	\"url\"
>983	Callee	root . get
>984	MemberAccess	root . get
>985	Identifier	get
>986	Identifier	root
>987	Identifier	url
>988	ExpressionStatement	std 
>989	CallExpression	std 
>990	ArgumentList	std 
>991	Argument	std 
>992	AdditiveExpression	std 
>993	CallExpression	reader . getFormatedErrorMessages ( )
>994	ArgumentList	 
>995	Callee	reader . getFormatedErrorMessages
>996	MemberAccess	reader . getFormatedErrorMessages
>997	Identifier	getFormatedErrorMessages
>998	Identifier	reader
>999	CallExpression	std 
>1000	ArgumentList	\"Failed parsing MySQLMM config
>1001	Argument	\"Failed parsing MySQLMM config
>1002	PrimaryExpression	\"Failed parsing MySQLMM config
>1003	Callee	std 
>1004	Identifier	std 
>1005	Callee	std 
>1006	Identifier	std 
>1007	IfStatement	if ( ! reader . parse ( ifs , root ) )
>1008	Statement	throw
>1009	Condition	! reader . parse ( ifs , root )
>1010	UnaryOp	! reader . parse ( ifs , root )
>1011	CallExpression	reader . parse ( ifs , root )
>1012	ArgumentList	ifs
>1013	Argument	root
>1014	Identifier	root
>1015	Argument	ifs
>1016	Identifier	ifs
>1017	Callee	reader . parse
>1018	MemberAccess	reader . parse
>1019	Identifier	parse
>1020	Identifier	reader
>1021	UnaryOperator	!
>1022	ExpressionStatement	ifs . open ( cfg )
>1023	CallExpression	ifs . open ( cfg )
>1024	ArgumentList	cfg
>1025	Argument	cfg
>1026	Identifier	cfg
>1027	Callee	ifs . open
>1028	MemberAccess	ifs . open
>1029	Identifier	open
>1030	Identifier	ifs
>1031	IdentifierDeclStatement	std 
>1032	IdentifierDecl	ifs
>1033	Identifier	ifs
>1034	IdentifierDeclType	std 
>1035	IdentifierDeclStatement	Json 
>1036	IdentifierDecl	root
>1037	Identifier	root
>1038	IdentifierDeclType	Json 
>1039	IdentifierDeclStatement	Json 
>1040	IdentifierDecl	reader
>1041	Identifier	reader
>1042	IdentifierDeclType	Json 
>1122	FunctionDef	MySQLMMManager 
>1123	ParameterList	 
>1124	ReturnType	std 
>1125	CompoundStatement	 
>1126	ReturnStatement	 
>1127	Identifier	res
>1128	ExpressionStatement	 
>1129	CallExpression	f . log ( ISC_LOG_INFO , \"MySQLMM spawned new connection, now at %d out of %d maximum connections\" , ( int ) connections \
>1130	ArgumentList	ISC_LOG_INFO
>1131	Argument	max_connections
>1132	Identifier	max_connections
>1133	Argument	( int ) connections . size ( )
>1134	CastExpression	( int ) connections . size ( )
>1135	CallExpression	connections . size ( )
>1136	ArgumentList	 
>1137	Callee	connections . size
>1138	MemberAccess	connections . size
>1139	Identifier	size
>1140	Identifier	connections
>1141	CastTarget	int
>1142	Argument	\"MySQLMM spawned new connection, now at %d out of %d maximum connections\"
>1143	PrimaryExpression	\"MySQLMM spawned new connection, now at %d out of %d maximum connections\"
>1144	Argument	ISC_LOG_INFO
>1145	Identifier	ISC_LOG_INFO
>1146	Callee	f . log
>1147	MemberAccess	f . log
>1148	Identifier	log
>1149	Identifier	f
>1150	ExpressionStatement	 
>1151	CallExpression	connections . insert ( res )
>1152	ArgumentList	res
>1153	Argument	res
>1154	Identifier	res
>1155	Callee	connections . insert
>1156	MemberAccess	connections . insert
>1157	Identifier	insert
>1158	Identifier	connections
>1159	CompoundStatement	 
>1160	ExpressionStatement	 
>1161	CallExpression	std 
>1162	ArgumentList	std 
>1163	Argument	std 
>1164	AdditiveExpression	std 
>1165	MemberAccess	qry . second . sql
>1166	Identifier	sql
>1167	MemberAccess	qry . second
>1168	Identifier	second
>1169	Identifier	qry
>1170	CallExpression	std 
>1171	ArgumentList	\"Failed preparing query
>1172	Argument	\"Failed preparing query
>1173	PrimaryExpression	\"Failed preparing query
>1174	Callee	std 
>1175	Identifier	std 
>1176	Callee	std 
>1177	Identifier	std 
>1178	IfStatement	if ( ! qry . second . prep_stmt )
>1179	Statement	 
>1180	Condition	 
>1181	UnaryOp	! qry . second . prep_stmt
>1182	MemberAccess	qry . second . prep_stmt
>1183	Identifier	prep_stmt
>1184	MemberAccess	qry . second
>1185	Identifier	second
>1186	Identifier	qry
>1187	UnaryOperator	!
>1188	ExpressionStatement	 
>1189	AssignmentExpr	qry . second . prep_stmt = std 
>1190	RelationalExpression	std 
>1191	RelationalExpression	sql 
>1192	CallExpression	res -> connection -> prepareStatement ( qry . second . sql )
>1193	ArgumentList	qry . second . sql
>1194	Argument	qry . second . sql
>1195	MemberAccess	qry . second . sql
>1196	Identifier	sql
>1197	MemberAccess	qry . second
>1198	Identifier	second
>1199	Identifier	qry
>1200	Callee	res -> connection -> prepareStatement
>1201	PtrMemberAccess	res -> connection -> prepareStatement
>1202	Identifier	prepareStatement
>1203	PtrMemberAccess	res -> connection
>1204	Identifier	connection
>1205	Identifier	res
>1206	Identifier	sql 
>1207	Identifier	std 
>1208	MemberAccess	qry . second . prep_stmt
>1209	Identifier	prep_stmt
>1210	MemberAccess	qry . second
>1211	Identifier	second
>1212	Identifier	qry
>1213	Statement	 
>1214	Statement	 
>1215	Statement	 
>1216	Statement	 
>1217	Label	 
>1218	Identifier	qry
>1219	Statement	 
>1220	Statement	 
>1221	Statement	 
>1222	Statement	 
>1223	ExpressionStatement	 
>1224	AssignmentExpr	res -> queries = queries
>1225	Identifier	queries
>1226	PtrMemberAccess	res -> queries
>1227	Identifier	queries
>1228	Identifier	res
>1229	ExpressionStatement	 
>1230	AssignmentExpr	res -> connection = std 
>1231	RelationalExpression	std 
>1232	RelationalExpression	sql 
>1233	CallExpression	driver -> connect ( options )
>1234	ArgumentList	options
>1235	Argument	options
>1236	Identifier	options
>1237	Callee	driver -> connect
>1238	PtrMemberAccess	driver -> connect
>1239	Identifier	connect
>1240	Identifier	driver
>1241	Identifier	sql 
>1242	Identifier	std 
>1243	PtrMemberAccess	res -> connection
>1244	Identifier	connection
>1245	Identifier	res
>1246	IfStatement	if ( ! db . empty ( ) )
>1247	ExpressionStatement	 
>1248	AssignmentExpr	options [ \"schema\" ] = db
>1249	Identifier	db
>1250	ArrayIndexing	options [ \"schema\" ]
>1251	PrimaryExpression	\"schema\"
>1252	Identifier	options
>1253	Condition	 
>1254	UnaryOp	! db . empty ( )
>1255	CallExpression	db . empty ( )
>1256	ArgumentList	 
>1257	Callee	db . empty
>1258	MemberAccess	db . empty
>1259	Identifier	empty
>1260	Identifier	db
>1261	UnaryOperator	!
>1262	ExpressionStatement	 
>1263	AssignmentExpr	options [ \"password\" ] = password
>1264	Identifier	password
>1265	ArrayIndexing	options [ \"password\" ]
>1266	PrimaryExpression	\"password\"
>1267	Identifier	options
>1268	ExpressionStatement	 
>1269	AssignmentExpr	options [ \"userName\" ] = user
>1270	Identifier	user
>1271	ArrayIndexing	options [ \"userName\" ]
>1272	PrimaryExpression	\"userName\"
>1273	Identifier	options
>1274	ExpressionStatement	 
>1275	AssignmentExpr	options [ \"hostName\" ] = url
>1276	Identifier	url
>1277	ArrayIndexing	options [ \"hostName\" ]
>1278	PrimaryExpression	\"hostName\"
>1279	Identifier	options
>1280	IdentifierDeclStatement	 
>1281	IdentifierDecl	options
>1282	Identifier	options
>1283	IdentifierDeclType	sql 
>1284	ExpressionStatement	 
>1285	Statement	 
>1286	Statement	 
>1287	Statement	 
>1288	Statement	 
>1289	Statement	 
>1290	Statement	 
>1291	Statement	 
>1292	Statement	 
>1293	Statement	 
>1294	Statement	 
>1295	Statement	 
>1296	Statement	 
>1297	Statement	 
>1298	Statement	 
>1299	Statement	 
>1300	Statement	 
>1301	ExpressionStatement	 
>1302	CallExpression	std 
>1303	ArgumentList	\"MySQLMM
>1304	Argument	\"MySQLMM
>1305	PrimaryExpression	\"MySQLMM
>1306	Callee	std 
>1307	Identifier	std 
>1308	IfStatement	if ( connections . size ( ) >= max_connections )
>1309	Statement	 
>1310	Condition	 
>1311	RelationalExpression	connections . size ( ) >= max_connections
>1312	Identifier	max_connections
>1313	CallExpression	connections . size ( )
>1314	ArgumentList	 
>1315	Callee	connections . size
>1316	MemberAccess	connections . size
>1317	Identifier	size
>1318	Identifier	connections
>1319	IdentifierDeclStatement	 
>1320	IdentifierDecl	lock ( connectionAquisitionMutex )
>1321	Identifier	connectionAquisitionMutex
>1322	Identifier	lock
>1323	IdentifierDeclType	std 
>1359	FunctionDef	MySQLMMManager 
>1360	ParameterList	 
>1361	ReturnType	std 
>1362	CompoundStatement	 
>1363	ReturnStatement	 
>1364	CallExpression	spawnConnection ( )
>1365	ArgumentList	 
>1366	Callee	spawnConnection
>1367	Identifier	spawnConnection
>1368	CompoundStatement	 
>1369	IfStatement	if ( conn . unique ( ) )
>1370	CompoundStatement	 
>1371	ReturnStatement	 
>1372	Identifier	conn
>1373	Condition	 
>1374	CallExpression	conn . unique ( )
>1375	ArgumentList	 
>1376	Callee	conn . unique
>1377	MemberAccess	conn . unique
>1378	Identifier	unique
>1379	Identifier	conn
>1380	Statement	 
>1381	Statement	 
>1382	Label	 
>1383	Identifier	conn
>1384	Statement	 
>1385	Statement	 
>1386	Statement	 
>1387	Statement	 
>1388	Statement	 
>1389	Statement	 
>1390	Statement	 
>1391	Statement	 
>1392	Statement	 
>1393	Statement	 
>1394	IdentifierDeclStatement	 
>1395	IdentifierDecl	lock ( connectionAquisitionMutex )
>1396	Identifier	connectionAquisitionMutex
>1397	Identifier	lock
>1398	IdentifierDeclType	std 
>1399	ExpressionStatement	 
>1400	CallExpression	mysqlmm_thread_init_obj . init ( driver )
>1401	ArgumentList	driver
>1402	Argument	driver
>1403	Identifier	driver
>1404	Callee	mysqlmm_thread_init_obj . init
>1405	MemberAccess	mysqlmm_thread_init_obj . init
>1406	Identifier	init
>1407	Identifier	mysqlmm_thread_init_obj
>1417	FunctionDef	MySQLMMManager 
>1418	ParameterList	const std 
>1419	Parameter	 
>1420	Identifier	con
>1421	ParameterType	const std 
>1422	ReturnType	void
>1423	CompoundStatement	 
>1424	ExpressionStatement	 
>1425	CallExpression	f . log ( ISC_LOG_WARNING , \"MySQLMM removed dead connection from pool\" )
>1426	ArgumentList	ISC_LOG_WARNING
>1427	Argument	\"MySQLMM removed dead connection from pool\"
>1428	PrimaryExpression	\"MySQLMM removed dead connection from pool\"
>1429	Argument	ISC_LOG_WARNING
>1430	Identifier	ISC_LOG_WARNING
>1431	Callee	f . log
>1432	MemberAccess	f . log
>1433	Identifier	log
>1434	Identifier	f
>1435	ExpressionStatement	 
>1436	CallExpression	std 
>1437	ArgumentList	\"Tried removing a connection that's not in the set of connections!\"
>1438	Argument	\"Tried removing a connection that's not in the set of connections!\"
>1439	PrimaryExpression	\"Tried removing a connection that's not in the set of connections!\"
>1440	Callee	std 
>1441	Identifier	std 
>1442	IfStatement	if ( ! connections . erase ( con ) )
>1443	Statement	 
>1444	Condition	 
>1445	UnaryOp	! connections . erase ( con )
>1446	CallExpression	connections . erase ( con )
>1447	ArgumentList	con
>1448	Argument	con
>1449	Identifier	con
>1450	Callee	connections . erase
>1451	MemberAccess	connections . erase
>1452	Identifier	erase
>1453	Identifier	connections
>1454	UnaryOperator	!
>1455	IdentifierDeclStatement	 
>1456	IdentifierDecl	lock ( connectionAquisitionMutex )
>1457	Identifier	connectionAquisitionMutex
>1458	Identifier	lock
>1459	IdentifierDeclType	std 
>1469	FunctionDef	MySQLMMManager 
>1470	ParameterList	MySQLMMManager 
>1471	Parameter	 
>1472	Identifier	client
>1473	ParameterType	const std 
>1474	Parameter	 
>1475	Identifier	record
>1476	ParameterType	const std 
>1477	Parameter	 
>1478	Identifier	zone
>1479	ParameterType	const std 
>1480	Parameter	 
>1481	Identifier	qry
>1482	ParameterType	MySQLMMManager 
>1483	ReturnType	void
>1484	CompoundStatement	 
>1485	ForStatement	for ( unsigned int i = 0 ; i < qry . params . size ( ) ; ++ i )
>1486	CompoundStatement	 
>1487	SwitchStatement	switch ( qry . params [ i ] )
>1488	CompoundStatement	 
>1489	BreakStatement	 
>1490	ExpressionStatement	 
>1491	CallExpression	qry . prep_stmt -> setString ( i + 1 , record )
>1492	ArgumentList	i + 1
>1493	Argument	record
>1494	Identifier	record
>1495	Argument	i + 1
>1496	AdditiveExpression	i + 1
>1497	PrimaryExpression	1
>1498	Identifier	i
>1499	Callee	qry . prep_stmt -> setString
>1500	PtrMemberAccess	qry . prep_stmt -> setString
>1501	Identifier	setString
>1502	MemberAccess	qry . prep_stmt
>1503	Identifier	prep_stmt
>1504	Identifier	qry
>1505	Label	 
>1506	Identifier	MM_PARAM_RECORD
>1507	BreakStatement	 
>1508	ExpressionStatement	 
>1509	CallExpression	qry . prep_stmt -> setString ( i + 1 , zone )
>1510	ArgumentList	i + 1
>1511	Argument	zone
>1512	Identifier	zone
>1513	Argument	i + 1
>1514	AdditiveExpression	i + 1
>1515	PrimaryExpression	1
>1516	Identifier	i
>1517	Callee	qry . prep_stmt -> setString
>1518	PtrMemberAccess	qry . prep_stmt -> setString
>1519	Identifier	setString
>1520	MemberAccess	qry . prep_stmt
>1521	Identifier	prep_stmt
>1522	Identifier	qry
>1523	Label	 
>1524	Identifier	MM_PARAM_ZONE
>1525	BreakStatement	 
>1526	ExpressionStatement	 
>1527	CallExpression	qry . prep_stmt -> setString ( i + 1 , client )
>1528	ArgumentList	i + 1
>1529	Argument	client
>1530	Identifier	client
>1531	Argument	i + 1
>1532	AdditiveExpression	i + 1
>1533	PrimaryExpression	1
>1534	Identifier	i
>1535	Callee	qry . prep_stmt -> setString
>1536	PtrMemberAccess	qry . prep_stmt -> setString
>1537	Identifier	setString
>1538	MemberAccess	qry . prep_stmt
>1539	Identifier	prep_stmt
>1540	Identifier	qry
>1541	Label	 
>1542	Identifier	MM_PARAM_CLIENT
>1543	Condition	 
>1544	ArrayIndexing	qry . params [ i ]
>1545	Identifier	i
>1546	MemberAccess	qry . params
>1547	Identifier	params
>1548	Identifier	qry
>1549	UnaryExpression	 
>1550	Identifier	i
>1551	IncDec	++
>1552	Condition	 
>1553	RelationalExpression	i < qry . params . size ( )
>1554	CallExpression	qry . params . size ( )
>1555	ArgumentList	 
>1556	Callee	qry . params . size
>1557	MemberAccess	qry . params . size
>1558	Identifier	size
>1559	MemberAccess	qry . params
>1560	Identifier	params
>1561	Identifier	qry
>1562	Identifier	i
>1563	ForInit	 
>1564	IdentifierDeclStatement	unsigned int i = 0 ;
>1565	IdentifierDecl	i = 0
>1566	AssignmentExpr	i = 0
>1567	PrimaryExpression	0
>1568	Identifier	i
>1569	Identifier	i
>1570	IdentifierDeclType	unsigned int
>1585	FunctionDef	MySQLMMManager 
>1586	ParameterList	dns_sdlzlookup_t * lookup , const std 
>1587	Parameter	 
>1588	Identifier	res
>1589	ParameterType	const std 
>1590	Parameter	 
>1591	Identifier	lookup
>1592	ParameterType	dns_sdlzlookup_t *
>1593	ReturnType	bool
>1594	CompoundStatement	 
>1595	ReturnStatement	 
>1596	Identifier	found
>1597	WhileStatement	while ( res -> next ( ) )
>1598	CompoundStatement	 
>1599	ExpressionStatement	 
>1600	AssignmentExpr	found = true
>1601	Identifier	true
>1602	Identifier	found
>1603	ExpressionStatement	 
>1604	CallExpression	std 
>1605	ArgumentList	\"MySQLMM putrr failed\"
>1606	Argument	\"MySQLMM putrr failed\"
>1607	PrimaryExpression	\"MySQLMM putrr failed\"
>1608	Callee	std 
>1609	Identifier	std 
>1610	IfStatement	if ( result != ISC_R_SUCCESS )
>1611	Statement	 
>1612	Condition	 
>1613	EqualityExpression	result != ISC_R_SUCCESS
>1614	Identifier	ISC_R_SUCCESS
>1615	Identifier	result
>1616	SwitchStatement	switch ( cols )
>1617	CompoundStatement	 
>1618	CompoundStatement	 
>1619	ExpressionStatement	 
>1620	CallExpression	f . log ( ISC_LOG_INFO , \"MySQLMM Result +
>1621	ArgumentList	ISC_LOG_INFO
>1622	Argument	str . str ( ) . c_str ( )
>1623	CallExpression	str . str ( ) . c_str ( )
>1624	ArgumentList	 
>1625	Callee	str . str ( ) . c_str
>1626	MemberAccess	str . str ( ) . c_str
>1627	Identifier	c_str
>1628	CallExpression	str . str ( )
>1629	ArgumentList	 
>1630	Callee	str . str
>1631	MemberAccess	str . str
>1632	Identifier	str
>1633	Identifier	str
>1634	Argument	res -> getString ( 2 ) . c_str ( )
>1635	CallExpression	res -> getString ( 2 ) . c_str ( )
>1636	ArgumentList	 
>1637	Callee	res -> getString ( 2 ) . c_str
>1638	MemberAccess	res -> getString ( 2 ) . c_str
>1639	Identifier	c_str
>1640	CallExpression	res -> getString ( 2 )
>1641	ArgumentList	2
>1642	Argument	2
>1643	PrimaryExpression	2
>1644	Callee	res -> getString
>1645	PtrMemberAccess	res -> getString
>1646	Identifier	getString
>1647	Identifier	res
>1648	Argument	\"MySQLMM Result +
>1649	PrimaryExpression	\"MySQLMM Result +
>1650	Argument	ISC_LOG_INFO
>1651	Identifier	ISC_LOG_INFO
>1652	Callee	f . log
>1653	MemberAccess	f . log
>1654	Identifier	log
>1655	Identifier	f
>1656	ExpressionStatement	 
>1657	AssignmentExpr	result = f . putrr ( lookup , res -> getString ( 2 ) . c_str ( ) , res -> getInt ( 1 ) , str . str ( ) \
>1658	CallExpression	f . putrr ( lookup , res -> getString ( 2 ) . c_str ( ) , res -> getInt ( 1 ) , str . str ( ) . c_str ( ) )
>1659	ArgumentList	lookup
>1660	Argument	str . str ( ) . c_str ( )
>1661	CallExpression	str . str ( ) . c_str ( )
>1662	ArgumentList	 
>1663	Callee	str . str ( ) . c_str
>1664	MemberAccess	str . str ( ) . c_str
>1665	Identifier	c_str
>1666	CallExpression	str . str ( )
>1667	ArgumentList	 
>1668	Callee	str . str
>1669	MemberAccess	str . str
>1670	Identifier	str
>1671	Identifier	str
>1672	Argument	res -> getInt ( 1 )
>1673	CallExpression	res -> getInt ( 1 )
>1674	ArgumentList	1
>1675	Argument	1
>1676	PrimaryExpression	1
>1677	Callee	res -> getInt
>1678	PtrMemberAccess	res -> getInt
>1679	Identifier	getInt
>1680	Identifier	res
>1681	Argument	res -> getString ( 2 ) . c_str ( )
>1682	CallExpression	res -> getString ( 2 ) . c_str ( )
>1683	ArgumentList	 
>1684	Callee	res -> getString ( 2 ) . c_str
>1685	MemberAccess	res -> getString ( 2 ) . c_str
>1686	Identifier	c_str
>1687	CallExpression	res -> getString ( 2 )
>1688	ArgumentList	2
>1689	Argument	2
>1690	PrimaryExpression	2
>1691	Callee	res -> getString
>1692	PtrMemberAccess	res -> getString
>1693	Identifier	getString
>1694	Identifier	res
>1695	Argument	lookup
>1696	Identifier	lookup
>1697	Callee	f . putrr
>1698	MemberAccess	f . putrr
>1699	Identifier	putrr
>1700	Identifier	f
>1701	Identifier	result
>1702	ForStatement	for ( unsigned int i = 3 ; i <= cols ; ++ i )
>1703	CompoundStatement	 
>1704	IfStatement	if ( ! part . empty ( ) )
>1705	CompoundStatement	 
>1706	ExpressionStatement	 
>1707	AssignmentExpr	sep = \" \"
>1708	PrimaryExpression	\" \"
>1709	Identifier	sep
>1710	ExpressionStatement	 
>1711	ShiftExpression	str << sep << part
>1712	ShiftExpression	sep << part
>1713	Identifier	part
>1714	Identifier	sep
>1715	Identifier	str
>1716	Condition	 
>1717	UnaryOp	! part . empty ( )
>1718	CallExpression	part . empty ( )
>1719	ArgumentList	 
>1720	Callee	part . empty
>1721	MemberAccess	part . empty
>1722	Identifier	empty
>1723	Identifier	part
>1724	UnaryOperator	!
>1725	IdentifierDeclStatement	 
>1726	IdentifierDecl	part = res -> getString ( i )
>1727	AssignmentExpr	part = res -> getString ( i )
>1728	CallExpression	res -> getString ( i )
>1729	ArgumentList	i
>1730	Argument	i
>1731	Identifier	i
>1732	Callee	res -> getString
>1733	PtrMemberAccess	res -> getString
>1734	Identifier	getString
>1735	Identifier	res
>1736	Identifier	part
>1737	Identifier	part
>1738	IdentifierDeclType	std 
>1739	UnaryExpression	 
>1740	Identifier	i
>1741	IncDec	++
>1742	Condition	 
>1743	RelationalExpression	i <= cols
>1744	Identifier	cols
>1745	Identifier	i
>1746	ForInit	 
>1747	IdentifierDeclStatement	unsigned int i = 3 ;
>1748	IdentifierDecl	i = 3
>1749	AssignmentExpr	i = 3
>1750	PrimaryExpression	3
>1751	Identifier	i
>1752	Identifier	i
>1753	IdentifierDeclType	unsigned int
>1754	IdentifierDeclStatement	 
>1755	IdentifierDecl	sep = \"\"
>1756	AssignmentExpr	sep = \"\"
>1757	PrimaryExpression	\"\"
>1758	Identifier	sep
>1759	Identifier	sep
>1760	IdentifierDeclType	std 
>1761	IdentifierDeclStatement	 
>1762	IdentifierDecl	str
>1763	Identifier	str
>1764	IdentifierDeclType	std 
>1765	Label	 
>1766	Identifier	default
>1767	BreakStatement	 
>1768	ExpressionStatement	 
>1769	CallExpression	f . log ( ISC_LOG_INFO , \"MySQLMM Result 2
>1770	ArgumentList	ISC_LOG_INFO
>1771	Argument	res -> getString ( 2 ) . c_str ( )
>1772	CallExpression	res -> getString ( 2 ) . c_str ( )
>1773	ArgumentList	 
>1774	Callee	res -> getString ( 2 ) . c_str
>1775	MemberAccess	res -> getString ( 2 ) . c_str
>1776	Identifier	c_str
>1777	CallExpression	res -> getString ( 2 )
>1778	ArgumentList	2
>1779	Argument	2
>1780	PrimaryExpression	2
>1781	Callee	res -> getString
>1782	PtrMemberAccess	res -> getString
>1783	Identifier	getString
>1784	Identifier	res
>1785	Argument	res -> getString ( 1 ) . c_str ( )
>1786	CallExpression	res -> getString ( 1 ) . c_str ( )
>1787	ArgumentList	 
>1788	Callee	res -> getString ( 1 ) . c_str
>1789	MemberAccess	res -> getString ( 1 ) . c_str
>1790	Identifier	c_str
>1791	CallExpression	res -> getString ( 1 )
>1792	ArgumentList	1
>1793	Argument	1
>1794	PrimaryExpression	1
>1795	Callee	res -> getString
>1796	PtrMemberAccess	res -> getString
>1797	Identifier	getString
>1798	Identifier	res
>1799	Argument	\"MySQLMM Result 2
>1800	PrimaryExpression	\"MySQLMM Result 2
>1801	Argument	ISC_LOG_INFO
>1802	Identifier	ISC_LOG_INFO
>1803	Callee	f . log
>1804	MemberAccess	f . log
>1805	Identifier	log
>1806	Identifier	f
>1807	ExpressionStatement	 
>1808	AssignmentExpr	result = f . putrr ( lookup , res -> getString ( 1 ) . c_str ( ) , 86400 , res -> getString ( 2 ) . c_\
>1809	CallExpression	f . putrr ( lookup , res -> getString ( 1 ) . c_str ( ) , 86400 , res -> getString ( 2 ) . c_str ( ) )
>1810	ArgumentList	lookup
>1811	Argument	res -> getString ( 2 ) . c_str ( )
>1812	CallExpression	res -> getString ( 2 ) . c_str ( )
>1813	ArgumentList	 
>1814	Callee	res -> getString ( 2 ) . c_str
>1815	MemberAccess	res -> getString ( 2 ) . c_str
>1816	Identifier	c_str
>1817	CallExpression	res -> getString ( 2 )
>1818	ArgumentList	2
>1819	Argument	2
>1820	PrimaryExpression	2
>1821	Callee	res -> getString
>1822	PtrMemberAccess	res -> getString
>1823	Identifier	getString
>1824	Identifier	res
>1825	Argument	86400
>1826	PrimaryExpression	86400
>1827	Argument	res -> getString ( 1 ) . c_str ( )
>1828	CallExpression	res -> getString ( 1 ) . c_str ( )
>1829	ArgumentList	 
>1830	Callee	res -> getString ( 1 ) . c_str
>1831	MemberAccess	res -> getString ( 1 ) . c_str
>1832	Identifier	c_str
>1833	CallExpression	res -> getString ( 1 )
>1834	ArgumentList	1
>1835	Argument	1
>1836	PrimaryExpression	1
>1837	Callee	res -> getString
>1838	PtrMemberAccess	res -> getString
>1839	Identifier	getString
>1840	Identifier	res
>1841	Argument	lookup
>1842	Identifier	lookup
>1843	Callee	f . putrr
>1844	MemberAccess	f . putrr
>1845	Identifier	putrr
>1846	Identifier	f
>1847	Identifier	result
>1848	Label	 
>1849	BreakStatement	 
>1850	ExpressionStatement	 
>1851	CallExpression	f . log ( ISC_LOG_INFO , \"MySQLMM Result 1
>1852	ArgumentList	ISC_LOG_INFO
>1853	Argument	res -> getString ( 1 ) . c_str ( )
>1854	CallExpression	res -> getString ( 1 ) . c_str ( )
>1855	ArgumentList	 
>1856	Callee	res -> getString ( 1 ) . c_str
>1857	MemberAccess	res -> getString ( 1 ) . c_str
>1858	Identifier	c_str
>1859	CallExpression	res -> getString ( 1 )
>1860	ArgumentList	1
>1861	Argument	1
>1862	PrimaryExpression	1
>1863	Callee	res -> getString
>1864	PtrMemberAccess	res -> getString
>1865	Identifier	getString
>1866	Identifier	res
>1867	Argument	\"MySQLMM Result 1
>1868	PrimaryExpression	\"MySQLMM Result 1
>1869	Argument	ISC_LOG_INFO
>1870	Identifier	ISC_LOG_INFO
>1871	Callee	f . log
>1872	MemberAccess	f . log
>1873	Identifier	log
>1874	Identifier	f
>1875	ExpressionStatement	 
>1876	AssignmentExpr	result = f . putrr ( lookup , \"A\" , 86400 , res -> getString ( 1 ) . c_str ( ) )
>1877	CallExpression	f . putrr ( lookup , \"A\" , 86400 , res -> getString ( 1 ) . c_str ( ) )
>1878	ArgumentList	lookup
>1879	Argument	res -> getString ( 1 ) . c_str ( )
>1880	CallExpression	res -> getString ( 1 ) . c_str ( )
>1881	ArgumentList	 
>1882	Callee	res -> getString ( 1 ) . c_str
>1883	MemberAccess	res -> getString ( 1 ) . c_str
>1884	Identifier	c_str
>1885	CallExpression	res -> getString ( 1 )
>1886	ArgumentList	1
>1887	Argument	1
>1888	PrimaryExpression	1
>1889	Callee	res -> getString
>1890	PtrMemberAccess	res -> getString
>1891	Identifier	getString
>1892	Identifier	res
>1893	Argument	86400
>1894	PrimaryExpression	86400
>1895	Argument	\"A\"
>1896	PrimaryExpression	\"A\"
>1897	Argument	lookup
>1898	Identifier	lookup
>1899	Callee	f . putrr
>1900	MemberAccess	f . putrr
>1901	Identifier	putrr
>1902	Identifier	f
>1903	Identifier	result
>1904	Label	 
>1905	BreakStatement	 
>1906	ExpressionStatement	 
>1907	CallExpression	std 
>1908	ArgumentList	\"Zero columns in result!\"
>1909	Argument	\"Zero columns in result!\"
>1910	PrimaryExpression	\"Zero columns in result!\"
>1911	Callee	std 
>1912	Identifier	std 
>1913	Statement	 
>1914	Label	 
>1915	Condition	 
>1916	Identifier	cols
>1917	IdentifierDeclStatement	 
>1918	IdentifierDecl	result
>1919	Identifier	result
>1920	IdentifierDeclType	isc_result_t
>1921	Condition	 
>1922	CallExpression	res -> next ( )
>1923	ArgumentList	 
>1924	Callee	res -> next
>1925	PtrMemberAccess	res -> next
>1926	Identifier	next
>1927	Identifier	res
>1928	IdentifierDeclStatement	 
>1929	IdentifierDecl	cols = meta -> getColumnCount ( )
>1930	AssignmentExpr	cols = meta -> getColumnCount ( )
>1931	CallExpression	meta -> getColumnCount ( )
>1932	ArgumentList	 
>1933	Callee	meta -> getColumnCount
>1934	PtrMemberAccess	meta -> getColumnCount
>1935	Identifier	getColumnCount
>1936	Identifier	meta
>1937	Identifier	cols
>1938	Identifier	cols
>1939	IdentifierDeclType	unsigned int
>1940	IdentifierDeclStatement	 
>1941	IdentifierDecl	found = false
>1942	AssignmentExpr	found = false
>1943	Identifier	false
>1944	Identifier	false
>1945	Identifier	found
>1946	IdentifierDeclType	bool
>1947	ExpressionStatement	 
>1948	CallExpression	std 
>1949	ArgumentList	\"lookup needs result metadata\"
>1950	Argument	\"lookup needs result metadata\"
>1951	PrimaryExpression	\"lookup needs result metadata\"
>1952	Callee	std 
>1953	Identifier	std 
>1954	IfStatement	if ( ! meta )
>1955	Statement	 
>1956	Condition	 
>1957	UnaryOp	! meta
>1958	Identifier	meta
>1959	UnaryOperator	!
>1960	IdentifierDeclStatement	 
>1961	IdentifierDecl	* meta = res -> getMetaData ( )
>1962	AssignmentExpr	* meta = res -> getMetaData ( )
>1963	CallExpression	res -> getMetaData ( )
>1964	ArgumentList	 
>1965	Callee	res -> getMetaData
>1966	PtrMemberAccess	res -> getMetaData
>1967	Identifier	getMetaData
>1968	Identifier	res
>1969	Identifier	meta
>1970	Identifier	meta
>1971	IdentifierDeclType	sql 
>2003	FunctionDef	MySQLMMManager 
>2004	ParameterList	const std 
>2005	Parameter	 
>2006	Identifier	zone
>2007	ParameterType	const std 
>2008	ReturnType	bool
>2009	CompoundStatement	 
>2010	BlockStarter	 
>2011	CompoundStatement	 
>2012	ExpressionStatement	 
>2013	Statement	throw
>2014	IfStatement	if ( con -> connection -> isClosed ( ) )
>2015	ExpressionStatement	removeConnectionFromPool ( con )
>2016	CallExpression	removeConnectionFromPool ( con )
>2017	ArgumentList	con
>2018	Argument	con
>2019	Identifier	con
>2020	Callee	removeConnectionFromPool
>2021	Identifier	removeConnectionFromPool
>2022	Condition	con -> connection -> isClosed ( )
>2023	CallExpression	con -> connection -> isClosed ( )
>2024	ArgumentList	 
>2025	Callee	con -> connection -> isClosed
>2026	PtrMemberAccess	con -> connection -> isClosed
>2027	Identifier	isClosed
>2028	PtrMemberAccess	con -> connection
>2029	Identifier	connection
>2030	Identifier	con
>2031	BlockStarter	 
>2032	CompoundStatement	 
>2033	ReturnStatement	return false ;
>2034	Identifier	false
>2035	ExpressionStatement	f . log ( ISC_LOG_INFO , \"MySQLMM Not found zone %s!\" , zone . c_str ( ) )
>2036	CallExpression	f . log ( ISC_LOG_INFO , \"MySQLMM Not found zone %s!\" , zone . c_str ( ) )
>2037	ArgumentList	ISC_LOG_INFO
>2038	Argument	zone . c_str ( )
>2039	CallExpression	zone . c_str ( )
>2040	ArgumentList	 
>2041	Callee	zone . c_str
>2042	MemberAccess	zone . c_str
>2043	Identifier	c_str
>2044	Identifier	zone
>2045	Argument	\"MySQLMM Not found zone %s!\"
>2046	PrimaryExpression	\"MySQLMM Not found zone %s!\"
>2047	Argument	ISC_LOG_INFO
>2048	Identifier	ISC_LOG_INFO
>2049	Callee	f . log
>2050	MemberAccess	f . log
>2051	Identifier	log
>2052	Identifier	f
>2053	IfStatement	if ( res -> next ( ) )
>2054	CompoundStatement	 
>2055	ReturnStatement	return true ;
>2056	Identifier	true
>2057	ExpressionStatement	f . log ( ISC_LOG_INFO , \"MySQLMM Found zone %s!\" , zone . c_str ( ) )
>2058	CallExpression	f . log ( ISC_LOG_INFO , \"MySQLMM Found zone %s!\" , zone . c_str ( ) )
>2059	ArgumentList	ISC_LOG_INFO
>2060	Argument	zone . c_str ( )
>2061	CallExpression	zone . c_str ( )
>2062	ArgumentList	 
>2063	Callee	zone . c_str
>2064	MemberAccess	zone . c_str
>2065	Identifier	c_str
>2066	Identifier	zone
>2067	Argument	\"MySQLMM Found zone %s!\"
>2068	PrimaryExpression	\"MySQLMM Found zone %s!\"
>2069	Argument	ISC_LOG_INFO
>2070	Identifier	ISC_LOG_INFO
>2071	Callee	f . log
>2072	MemberAccess	f . log
>2073	Identifier	log
>2074	Identifier	f
>2075	Condition	res -> next ( )
>2076	CallExpression	res -> next ( )
>2077	ArgumentList	 
>2078	Callee	res -> next
>2079	PtrMemberAccess	res -> next
>2080	Identifier	next
>2081	Identifier	res
>2082	IdentifierDeclStatement	std 
>2083	IdentifierDecl	res ( qry . prep_stmt -> executeQuery ( ) )
>2084	CallExpression	qry . prep_stmt -> executeQuery ( )
>2085	ArgumentList	 
>2086	Callee	qry . prep_stmt -> executeQuery
>2087	PtrMemberAccess	qry . prep_stmt -> executeQuery
>2088	Identifier	executeQuery
>2089	MemberAccess	qry . prep_stmt
>2090	Identifier	prep_stmt
>2091	Identifier	qry
>2092	Identifier	res
>2093	IdentifierDeclType	std 
>2094	ExpressionStatement	fillPrepQry ( qry , zone )
>2095	CallExpression	fillPrepQry ( qry , zone )
>2096	ArgumentList	qry
>2097	Argument	zone
>2098	Identifier	zone
>2099	Argument	qry
>2100	Identifier	qry
>2101	Callee	fillPrepQry
>2102	Identifier	fillPrepQry
>2103	IdentifierDeclStatement	mmquery & qry = con -> queries . at ( MM_QUERY_FINDZONE ) ;
>2104	IdentifierDecl	& qry = con -> queries . at ( MM_QUERY_FINDZONE )
>2105	AssignmentExpr	& qry = con -> queries . at ( MM_QUERY_FINDZONE )
>2106	CallExpression	con -> queries . at ( MM_QUERY_FINDZONE )
>2107	ArgumentList	MM_QUERY_FINDZONE
>2108	Argument	MM_QUERY_FINDZONE
>2109	Identifier	MM_QUERY_FINDZONE
>2110	Callee	con -> queries . at
>2111	MemberAccess	con -> queries . at
>2112	Identifier	at
>2113	PtrMemberAccess	con -> queries
>2114	Identifier	queries
>2115	Identifier	con
>2116	Identifier	qry
>2117	Identifier	qry
>2118	IdentifierDeclType	mmquery &
>2119	IdentifierDeclStatement	 
>2120	IdentifierDecl	con = getFreeConnection ( )
>2121	AssignmentExpr	con = getFreeConnection ( )
>2122	CallExpression	getFreeConnection ( )
>2123	ArgumentList	 
>2124	Callee	getFreeConnection
>2125	Identifier	getFreeConnection
>2126	Identifier	con
>2127	Identifier	con
>2128	IdentifierDeclType	std 
>2153	FunctionDef	MySQLMMManager 
>2154	ParameterList	const std 
>2155	Parameter	 
>2156	Identifier	lookup
>2157	ParameterType	dns_sdlzlookup_t *
>2158	Parameter	 
>2159	Identifier	name
>2160	ParameterType	const std 
>2161	Parameter	 
>2162	Identifier	zone
>2163	ParameterType	const std 
>2164	ReturnType	bool
>2165	CompoundStatement	 
>2166	BlockStarter	 
>2167	CompoundStatement	 
>2168	ExpressionStatement	 
>2169	Statement	throw
>2170	IfStatement	if ( con -> connection -> isClosed ( ) )
>2171	ExpressionStatement	removeConnectionFromPool ( con )
>2172	CallExpression	removeConnectionFromPool ( con )
>2173	ArgumentList	con
>2174	Argument	con
>2175	Identifier	con
>2176	Callee	removeConnectionFromPool
>2177	Identifier	removeConnectionFromPool
>2178	Condition	con -> connection -> isClosed ( )
>2179	CallExpression	con -> connection -> isClosed ( )
>2180	ArgumentList	 
>2181	Callee	con -> connection -> isClosed
>2182	PtrMemberAccess	con -> connection -> isClosed
>2183	Identifier	isClosed
>2184	PtrMemberAccess	con -> connection
>2185	Identifier	connection
>2186	Identifier	con
>2187	BlockStarter	 
>2188	CompoundStatement	 
>2189	ReturnStatement	return process_look_auth_res ( lookup , res ) ;
>2190	CallExpression	process_look_auth_res ( lookup , res )
>2191	ArgumentList	lookup
>2192	Argument	res
>2193	Identifier	res
>2194	Argument	lookup
>2195	Identifier	lookup
>2196	Callee	process_look_auth_res
>2197	Identifier	process_look_auth_res
>2198	IdentifierDeclStatement	std 
>2199	IdentifierDecl	res ( qry . prep_stmt -> executeQuery ( ) )
>2200	CallExpression	qry . prep_stmt -> executeQuery ( )
>2201	ArgumentList	 
>2202	Callee	qry . prep_stmt -> executeQuery
>2203	PtrMemberAccess	qry . prep_stmt -> executeQuery
>2204	Identifier	executeQuery
>2205	MemberAccess	qry . prep_stmt
>2206	Identifier	prep_stmt
>2207	Identifier	qry
>2208	Identifier	res
>2209	IdentifierDeclType	std 
>2210	ExpressionStatement	fillPrepQry ( qry , zone , name )
>2211	CallExpression	fillPrepQry ( qry , zone , name )
>2212	ArgumentList	qry
>2213	Argument	name
>2214	Identifier	name
>2215	Argument	zone
>2216	Identifier	zone
>2217	Argument	qry
>2218	Identifier	qry
>2219	Callee	fillPrepQry
>2220	Identifier	fillPrepQry
>2221	IdentifierDeclStatement	mmquery & qry = con -> queries . at ( MM_QUERY_LOOKUP ) ;
>2222	IdentifierDecl	& qry = con -> queries . at ( MM_QUERY_LOOKUP )
>2223	AssignmentExpr	& qry = con -> queries . at ( MM_QUERY_LOOKUP )
>2224	CallExpression	con -> queries . at ( MM_QUERY_LOOKUP )
>2225	ArgumentList	MM_QUERY_LOOKUP
>2226	Argument	MM_QUERY_LOOKUP
>2227	Identifier	MM_QUERY_LOOKUP
>2228	Callee	con -> queries . at
>2229	MemberAccess	con -> queries . at
>2230	Identifier	at
>2231	PtrMemberAccess	con -> queries
>2232	Identifier	queries
>2233	Identifier	con
>2234	Identifier	qry
>2235	Identifier	qry
>2236	IdentifierDeclType	mmquery &
>2237	IdentifierDeclStatement	 
>2238	IdentifierDecl	con = getFreeConnection ( )
>2239	AssignmentExpr	con = getFreeConnection ( )
>2240	CallExpression	getFreeConnection ( )
>2241	ArgumentList	 
>2242	Callee	getFreeConnection
>2243	Identifier	getFreeConnection
>2244	Identifier	con
>2245	Identifier	con
>2246	IdentifierDeclType	std 
>2247	ExpressionStatement	 
>2248	CallExpression	f . log ( ISC_LOG_INFO , \"MySQLMM Looking for %s in zone %s!\" , name . c_str ( ) , zone . c_str ( ) )
>2249	ArgumentList	ISC_LOG_INFO
>2250	Argument	zone . c_str ( )
>2251	CallExpression	zone . c_str ( )
>2252	ArgumentList	 
>2253	Callee	zone . c_str
>2254	MemberAccess	zone . c_str
>2255	Identifier	c_str
>2256	Identifier	zone
>2257	Argument	name . c_str ( )
>2258	CallExpression	name . c_str ( )
>2259	ArgumentList	 
>2260	Callee	name . c_str
>2261	MemberAccess	name . c_str
>2262	Identifier	c_str
>2263	Identifier	name
>2264	Argument	\"MySQLMM Looking for %s in zone %s!\"
>2265	PrimaryExpression	\"MySQLMM Looking for %s in zone %s!\"
>2266	Argument	ISC_LOG_INFO
>2267	Identifier	ISC_LOG_INFO
>2268	Callee	f . log
>2269	MemberAccess	f . log
>2270	Identifier	log
>2271	Identifier	f
>2296	FunctionDef	MySQLMMManager 
>2297	ParameterList	const std 
>2298	Parameter	 
>2299	Identifier	lookup
>2300	ParameterType	dns_sdlzlookup_t *
>2301	Parameter	 
>2302	Identifier	zone
>2303	ParameterType	const std 
>2304	ReturnType	bool
>2305	CompoundStatement	 
>2306	BlockStarter	 
>2307	CompoundStatement	 
>2308	ExpressionStatement	 
>2309	Statement	throw
>2310	IfStatement	if ( con -> connection -> isClosed ( ) )
>2311	ExpressionStatement	removeConnectionFromPool ( con )
>2312	CallExpression	removeConnectionFromPool ( con )
>2313	ArgumentList	con
>2314	Argument	con
>2315	Identifier	con
>2316	Callee	removeConnectionFromPool
>2317	Identifier	removeConnectionFromPool
>2318	Condition	con -> connection -> isClosed ( )
>2319	CallExpression	con -> connection -> isClosed ( )
>2320	ArgumentList	 
>2321	Callee	con -> connection -> isClosed
>2322	PtrMemberAccess	con -> connection -> isClosed
>2323	Identifier	isClosed
>2324	PtrMemberAccess	con -> connection
>2325	Identifier	connection
>2326	Identifier	con
>2327	BlockStarter	 
>2328	CompoundStatement	 
>2329	ReturnStatement	return process_look_auth_res ( lookup , res ) ;
>2330	CallExpression	process_look_auth_res ( lookup , res )
>2331	ArgumentList	lookup
>2332	Argument	res
>2333	Identifier	res
>2334	Argument	lookup
>2335	Identifier	lookup
>2336	Callee	process_look_auth_res
>2337	Identifier	process_look_auth_res
>2338	ExpressionStatement	f . log ( ISC_LOG_INFO , \"MySQLMM Looking for authority of %s!\" , zone . c_str ( ) )
>2339	CallExpression	f . log ( ISC_LOG_INFO , \"MySQLMM Looking for authority of %s!\" , zone . c_str ( ) )
>2340	ArgumentList	ISC_LOG_INFO
>2341	Argument	zone . c_str ( )
>2342	CallExpression	zone . c_str ( )
>2343	ArgumentList	 
>2344	Callee	zone . c_str
>2345	MemberAccess	zone . c_str
>2346	Identifier	c_str
>2347	Identifier	zone
>2348	Argument	\"MySQLMM Looking for authority of %s!\"
>2349	PrimaryExpression	\"MySQLMM Looking for authority of %s!\"
>2350	Argument	ISC_LOG_INFO
>2351	Identifier	ISC_LOG_INFO
>2352	Callee	f . log
>2353	MemberAccess	f . log
>2354	Identifier	log
>2355	Identifier	f
>2356	IdentifierDeclStatement	std 
>2357	IdentifierDecl	res ( qry . prep_stmt -> executeQuery ( ) )
>2358	CallExpression	qry . prep_stmt -> executeQuery ( )
>2359	ArgumentList	 
>2360	Callee	qry . prep_stmt -> executeQuery
>2361	PtrMemberAccess	qry . prep_stmt -> executeQuery
>2362	Identifier	executeQuery
>2363	MemberAccess	qry . prep_stmt
>2364	Identifier	prep_stmt
>2365	Identifier	qry
>2366	Identifier	res
>2367	IdentifierDeclType	std 
>2368	ExpressionStatement	fillPrepQry ( qry , zone )
>2369	CallExpression	fillPrepQry ( qry , zone )
>2370	ArgumentList	qry
>2371	Argument	zone
>2372	Identifier	zone
>2373	Argument	qry
>2374	Identifier	qry
>2375	Callee	fillPrepQry
>2376	Identifier	fillPrepQry
>2377	IdentifierDeclStatement	mmquery & qry = con -> queries . at ( MM_QUERY_AUTHORITY ) ;
>2378	IdentifierDecl	& qry = con -> queries . at ( MM_QUERY_AUTHORITY )
>2379	AssignmentExpr	& qry = con -> queries . at ( MM_QUERY_AUTHORITY )
>2380	CallExpression	con -> queries . at ( MM_QUERY_AUTHORITY )
>2381	ArgumentList	MM_QUERY_AUTHORITY
>2382	Argument	MM_QUERY_AUTHORITY
>2383	Identifier	MM_QUERY_AUTHORITY
>2384	Callee	con -> queries . at
>2385	MemberAccess	con -> queries . at
>2386	Identifier	at
>2387	PtrMemberAccess	con -> queries
>2388	Identifier	queries
>2389	Identifier	con
>2390	Identifier	qry
>2391	Identifier	qry
>2392	IdentifierDeclType	mmquery &
>2393	IdentifierDeclStatement	 
>2394	IdentifierDecl	con = getFreeConnection ( )
>2395	AssignmentExpr	con = getFreeConnection ( )
>2396	CallExpression	getFreeConnection ( )
>2397	ArgumentList	 
>2398	Callee	getFreeConnection
>2399	Identifier	getFreeConnection
>2400	Identifier	con
>2401	Identifier	con
>2402	IdentifierDeclType	std 
>2425	FunctionDef	MySQLMMManager 
>2426	ParameterList	const std 
>2427	Parameter	 
>2428	Identifier	allnodes
>2429	ParameterType	dns_sdlzallnodes_t *
>2430	Parameter	 
>2431	Identifier	zone
>2432	ParameterType	const std 
>2433	ReturnType	bool
>2434	CompoundStatement	 
>2435	BlockStarter	 
>2436	CompoundStatement	 
>2437	ExpressionStatement	 
>2438	Statement	throw
>2439	IfStatement	if ( con -> connection -> isClosed ( ) )
>2440	ExpressionStatement	removeConnectionFromPool ( con )
>2441	CallExpression	removeConnectionFromPool ( con )
>2442	ArgumentList	con
>2443	Argument	con
>2444	Identifier	con
>2445	Callee	removeConnectionFromPool
>2446	Identifier	removeConnectionFromPool
>2447	Condition	con -> connection -> isClosed ( )
>2448	CallExpression	con -> connection -> isClosed ( )
>2449	ArgumentList	 
>2450	Callee	con -> connection -> isClosed
>2451	PtrMemberAccess	con -> connection -> isClosed
>2452	Identifier	isClosed
>2453	PtrMemberAccess	con -> connection
>2454	Identifier	connection
>2455	Identifier	con
>2456	BlockStarter	 
>2457	CompoundStatement	 
>2458	ReturnStatement	return found ;
>2459	Identifier	found
>2460	WhileStatement	while ( res -> next ( ) )
>2461	CompoundStatement	 
>2462	ExpressionStatement	found = true
>2463	AssignmentExpr	found = true
>2464	Identifier	true
>2465	Identifier	found
>2466	ExpressionStatement	f . log ( ISC_LOG_INFO , \"MySQLMM allnodes result
>2467	CallExpression	f . log ( ISC_LOG_INFO , \"MySQLMM allnodes result
>2468	ArgumentList	ISC_LOG_INFO
>2469	Argument	str . str ( ) . c_str ( )
>2470	CallExpression	str . str ( ) . c_str ( )
>2471	ArgumentList	 
>2472	Callee	str . str ( ) . c_str
>2473	MemberAccess	str . str ( ) . c_str
>2474	Identifier	c_str
>2475	CallExpression	str . str ( )
>2476	ArgumentList	 
>2477	Callee	str . str
>2478	MemberAccess	str . str
>2479	Identifier	str
>2480	Identifier	str
>2481	Argument	res -> getUInt ( 1 )
>2482	CallExpression	res -> getUInt ( 1 )
>2483	ArgumentList	1
>2484	Argument	1
>2485	PrimaryExpression	1
>2486	Callee	res -> getUInt
>2487	PtrMemberAccess	res -> getUInt
>2488	Identifier	getUInt
>2489	Identifier	res
>2490	Argument	res -> getString ( 2 ) . c_str ( )
>2491	CallExpression	res -> getString ( 2 ) . c_str ( )
>2492	ArgumentList	 
>2493	Callee	res -> getString ( 2 ) . c_str
>2494	MemberAccess	res -> getString ( 2 ) . c_str
>2495	Identifier	c_str
>2496	CallExpression	res -> getString ( 2 )
>2497	ArgumentList	2
>2498	Argument	2
>2499	PrimaryExpression	2
>2500	Callee	res -> getString
>2501	PtrMemberAccess	res -> getString
>2502	Identifier	getString
>2503	Identifier	res
>2504	Argument	res -> getString ( 3 ) . c_str ( )
>2505	CallExpression	res -> getString ( 3 ) . c_str ( )
>2506	ArgumentList	 
>2507	Callee	res -> getString ( 3 ) . c_str
>2508	MemberAccess	res -> getString ( 3 ) . c_str
>2509	Identifier	c_str
>2510	CallExpression	res -> getString ( 3 )
>2511	ArgumentList	3
>2512	Argument	3
>2513	PrimaryExpression	3
>2514	Callee	res -> getString
>2515	PtrMemberAccess	res -> getString
>2516	Identifier	getString
>2517	Identifier	res
>2518	Argument	\"MySQLMM allnodes result
>2519	PrimaryExpression	\"MySQLMM allnodes result
>2520	Argument	ISC_LOG_INFO
>2521	Identifier	ISC_LOG_INFO
>2522	Callee	f . log
>2523	MemberAccess	f . log
>2524	Identifier	log
>2525	Identifier	f
>2526	ExpressionStatement	std 
>2527	CallExpression	std 
>2528	ArgumentList	\"MySQLMM putnamedrr failed\"
>2529	Argument	\"MySQLMM putnamedrr failed\"
>2530	PrimaryExpression	\"MySQLMM putnamedrr failed\"
>2531	Callee	std 
>2532	Identifier	std 
>2533	IfStatement	if ( result != ISC_R_SUCCESS )
>2534	Statement	throw
>2535	Condition	result != ISC_R_SUCCESS
>2536	EqualityExpression	result != ISC_R_SUCCESS
>2537	Identifier	ISC_R_SUCCESS
>2538	Identifier	result
>2539	IdentifierDeclStatement	isc_result_t result = f . putnamedrr ( allnodes , res -> getString ( 3 ) . c_str ( ) , res -> getString ( 2 ) . \
>2540	IdentifierDecl	result = f . putnamedrr ( allnodes , res -> getString ( 3 ) . c_str ( ) , res -> getString ( 2 ) . c_str ( ) , res \
>2541	AssignmentExpr	result = f . putnamedrr ( allnodes , res -> getString ( 3 ) . c_str ( ) , res -> getString ( 2 ) . c_\
>2542	CallExpression	f . putnamedrr ( allnodes , res -> getString ( 3 ) . c_str ( ) , res -> getString ( 2 ) . c_str ( ) , res -> getUInt ( \
>2543	ArgumentList	allnodes
>2544	Argument	str . str ( ) . c_str ( )
>2545	CallExpression	str . str ( ) . c_str ( )
>2546	ArgumentList	 
>2547	Callee	str . str ( ) . c_str
>2548	MemberAccess	str . str ( ) . c_str
>2549	Identifier	c_str
>2550	CallExpression	str . str ( )
>2551	ArgumentList	 
>2552	Callee	str . str
>2553	MemberAccess	str . str
>2554	Identifier	str
>2555	Identifier	str
>2556	Argument	res -> getUInt ( 1 )
>2557	CallExpression	res -> getUInt ( 1 )
>2558	ArgumentList	1
>2559	Argument	1
>2560	PrimaryExpression	1
>2561	Callee	res -> getUInt
>2562	PtrMemberAccess	res -> getUInt
>2563	Identifier	getUInt
>2564	Identifier	res
>2565	Argument	res -> getString ( 2 ) . c_str ( )
>2566	CallExpression	res -> getString ( 2 ) . c_str ( )
>2567	ArgumentList	 
>2568	Callee	res -> getString ( 2 ) . c_str
>2569	MemberAccess	res -> getString ( 2 ) . c_str
>2570	Identifier	c_str
>2571	CallExpression	res -> getString ( 2 )
>2572	ArgumentList	2
>2573	Argument	2
>2574	PrimaryExpression	2
>2575	Callee	res -> getString
>2576	PtrMemberAccess	res -> getString
>2577	Identifier	getString
>2578	Identifier	res
>2579	Argument	res -> getString ( 3 ) . c_str ( )
>2580	CallExpression	res -> getString ( 3 ) . c_str ( )
>2581	ArgumentList	 
>2582	Callee	res -> getString ( 3 ) . c_str
>2583	MemberAccess	res -> getString ( 3 ) . c_str
>2584	Identifier	c_str
>2585	CallExpression	res -> getString ( 3 )
>2586	ArgumentList	3
>2587	Argument	3
>2588	PrimaryExpression	3
>2589	Callee	res -> getString
>2590	PtrMemberAccess	res -> getString
>2591	Identifier	getString
>2592	Identifier	res
>2593	Argument	allnodes
>2594	Identifier	allnodes
>2595	Callee	f . putnamedrr
>2596	MemberAccess	f . putnamedrr
>2597	Identifier	putnamedrr
>2598	Identifier	f
>2599	Identifier	result
>2600	Identifier	result
>2601	IdentifierDeclType	isc_result_t
>2602	ForStatement	for ( unsigned int i = 4 ; i <= cols ; ++ i )
>2603	CompoundStatement	 
>2604	IfStatement	if ( ! part . empty ( ) )
>2605	CompoundStatement	 
>2606	ExpressionStatement	sep = \" \"
>2607	AssignmentExpr	sep = \" \"
>2608	PrimaryExpression	\" \"
>2609	Identifier	sep
>2610	ExpressionStatement	str << sep << part
>2611	ShiftExpression	str << sep << part
>2612	ShiftExpression	sep << part
>2613	Identifier	part
>2614	Identifier	sep
>2615	Identifier	str
>2616	Condition	! part . empty ( )
>2617	UnaryOp	! part . empty ( )
>2618	CallExpression	part . empty ( )
>2619	ArgumentList	 
>2620	Callee	part . empty
>2621	MemberAccess	part . empty
>2622	Identifier	empty
>2623	Identifier	part
>2624	UnaryOperator	!
>2625	IdentifierDeclStatement	std 
>2626	IdentifierDecl	part = res -> getString ( i )
>2627	AssignmentExpr	part = res -> getString ( i )
>2628	CallExpression	res -> getString ( i )
>2629	ArgumentList	i
>2630	Argument	i
>2631	Identifier	i
>2632	Callee	res -> getString
>2633	PtrMemberAccess	res -> getString
>2634	Identifier	getString
>2635	Identifier	res
>2636	Identifier	part
>2637	Identifier	part
>2638	IdentifierDeclType	std 
>2639	UnaryExpression	++ i
>2640	Identifier	i
>2641	IncDec	++
>2642	Condition	i <= cols
>2643	RelationalExpression	i <= cols
>2644	Identifier	cols
>2645	Identifier	i
>2646	ForInit	unsigned int i = 4 ;
>2647	IdentifierDeclStatement	unsigned int i = 4 ;
>2648	IdentifierDecl	i = 4
>2649	AssignmentExpr	i = 4
>2650	PrimaryExpression	4
>2651	Identifier	i
>2652	Identifier	i
>2653	IdentifierDeclType	unsigned int
>2654	IdentifierDeclStatement	std 
>2655	IdentifierDecl	sep = \"\"
>2656	AssignmentExpr	sep = \"\"
>2657	PrimaryExpression	\"\"
>2658	Identifier	sep
>2659	Identifier	sep
>2660	IdentifierDeclType	std 
>2661	IdentifierDeclStatement	std 
>2662	IdentifierDecl	str
>2663	Identifier	str
>2664	IdentifierDeclType	std 
>2665	Condition	res -> next ( )
>2666	CallExpression	res -> next ( )
>2667	ArgumentList	 
>2668	Callee	res -> next
>2669	PtrMemberAccess	res -> next
>2670	Identifier	next
>2671	Identifier	res
>2672	ExpressionStatement	f . log ( ISC_LOG_INFO , \"MySQLMM Looking for allnodes of %s!\" , zone . c_str ( ) )
>2673	CallExpression	f . log ( ISC_LOG_INFO , \"MySQLMM Looking for allnodes of %s!\" , zone . c_str ( ) )
>2674	ArgumentList	ISC_LOG_INFO
>2675	Argument	zone . c_str ( )
>2676	CallExpression	zone . c_str ( )
>2677	ArgumentList	 
>2678	Callee	zone . c_str
>2679	MemberAccess	zone . c_str
>2680	Identifier	c_str
>2681	Identifier	zone
>2682	Argument	\"MySQLMM Looking for allnodes of %s!\"
>2683	PrimaryExpression	\"MySQLMM Looking for allnodes of %s!\"
>2684	Argument	ISC_LOG_INFO
>2685	Identifier	ISC_LOG_INFO
>2686	Callee	f . log
>2687	MemberAccess	f . log
>2688	Identifier	log
>2689	Identifier	f
>2690	ExpressionStatement	std 
>2691	CallExpression	std 
>2692	ArgumentList	\"MySQLMM allnodes query returned less than 4 fields!\"
>2693	Argument	\"MySQLMM allnodes query returned less than 4 fields!\"
>2694	PrimaryExpression	\"MySQLMM allnodes query returned less than 4 fields!\"
>2695	Callee	std 
>2696	Identifier	std 
>2697	IfStatement	if ( cols < 4 )
>2698	Statement	throw
>2699	Condition	cols < 4
>2700	RelationalExpression	cols < 4
>2701	PrimaryExpression	4
>2702	Identifier	cols
>2703	IdentifierDeclStatement	bool found = false ;
>2704	IdentifierDecl	found = false
>2705	AssignmentExpr	found = false
>2706	Identifier	false
>2707	Identifier	false
>2708	Identifier	found
>2709	IdentifierDeclType	bool
>2710	IdentifierDeclStatement	unsigned int cols = meta -> getColumnCount ( ) ;
>2711	IdentifierDecl	cols = meta -> getColumnCount ( )
>2712	AssignmentExpr	cols = meta -> getColumnCount ( )
>2713	CallExpression	meta -> getColumnCount ( )
>2714	ArgumentList	 
>2715	Callee	meta -> getColumnCount
>2716	PtrMemberAccess	meta -> getColumnCount
>2717	Identifier	getColumnCount
>2718	Identifier	meta
>2719	Identifier	cols
>2720	Identifier	cols
>2721	IdentifierDeclType	unsigned int
>2722	ExpressionStatement	std 
>2723	CallExpression	std 
>2724	ArgumentList	\"MySQLMM allnodes needs result metadata\"
>2725	Argument	\"MySQLMM allnodes needs result metadata\"
>2726	PrimaryExpression	\"MySQLMM allnodes needs result metadata\"
>2727	Callee	std 
>2728	Identifier	std 
>2729	IfStatement	if ( ! meta )
>2730	Statement	throw
>2731	Condition	! meta
>2732	UnaryOp	! meta
>2733	Identifier	meta
>2734	UnaryOperator	!
>2735	IdentifierDeclStatement	sql 
>2736	IdentifierDecl	* meta = res -> getMetaData ( )
>2737	AssignmentExpr	* meta = res -> getMetaData ( )
>2738	CallExpression	res -> getMetaData ( )
>2739	ArgumentList	 
>2740	Callee	res -> getMetaData
>2741	PtrMemberAccess	res -> getMetaData
>2742	Identifier	getMetaData
>2743	Identifier	res
>2744	Identifier	meta
>2745	Identifier	meta
>2746	IdentifierDeclType	sql 
>2747	IdentifierDeclStatement	std 
>2748	IdentifierDecl	res ( qry . prep_stmt -> executeQuery ( ) )
>2749	CallExpression	qry . prep_stmt -> executeQuery ( )
>2750	ArgumentList	 
>2751	Callee	qry . prep_stmt -> executeQuery
>2752	PtrMemberAccess	qry . prep_stmt -> executeQuery
>2753	Identifier	executeQuery
>2754	MemberAccess	qry . prep_stmt
>2755	Identifier	prep_stmt
>2756	Identifier	qry
>2757	Identifier	res
>2758	IdentifierDeclType	std 
>2759	ExpressionStatement	fillPrepQry ( qry , zone )
>2760	CallExpression	fillPrepQry ( qry , zone )
>2761	ArgumentList	qry
>2762	Argument	zone
>2763	Identifier	zone
>2764	Argument	qry
>2765	Identifier	qry
>2766	Callee	fillPrepQry
>2767	Identifier	fillPrepQry
>2768	IdentifierDeclStatement	mmquery & qry = con -> queries . at ( MM_QUERY_ALLNODES ) ;
>2769	IdentifierDecl	& qry = con -> queries . at ( MM_QUERY_ALLNODES )
>2770	AssignmentExpr	& qry = con -> queries . at ( MM_QUERY_ALLNODES )
>2771	CallExpression	con -> queries . at ( MM_QUERY_ALLNODES )
>2772	ArgumentList	MM_QUERY_ALLNODES
>2773	Argument	MM_QUERY_ALLNODES
>2774	Identifier	MM_QUERY_ALLNODES
>2775	Callee	con -> queries . at
>2776	MemberAccess	con -> queries . at
>2777	Identifier	at
>2778	PtrMemberAccess	con -> queries
>2779	Identifier	queries
>2780	Identifier	con
>2781	Identifier	qry
>2782	Identifier	qry
>2783	IdentifierDeclType	mmquery &
>2784	IdentifierDeclStatement	 
>2785	IdentifierDecl	con = getFreeConnection ( )
>2786	AssignmentExpr	con = getFreeConnection ( )
>2787	CallExpression	getFreeConnection ( )
>2788	ArgumentList	 
>2789	Callee	getFreeConnection
>2790	Identifier	getFreeConnection
>2791	Identifier	con
>2792	Identifier	con
>2793	IdentifierDeclType	std 
>2839	FunctionDef	MySQLMMManager 
>2840	ParameterList	const std 
>2841	Parameter	 
>2842	Identifier	client
>2843	ParameterType	const std 
>2844	Parameter	 
>2845	Identifier	zone
>2846	ParameterType	const std 
>2847	ReturnType	bool
>2848	CompoundStatement	 
>2849	BlockStarter	 
>2850	CompoundStatement	 
>2851	ExpressionStatement	 
>2852	Statement	throw
>2853	IfStatement	if ( con -> connection -> isClosed ( ) )
>2854	ExpressionStatement	removeConnectionFromPool ( con )
>2855	CallExpression	removeConnectionFromPool ( con )
>2856	ArgumentList	con
>2857	Argument	con
>2858	Identifier	con
>2859	Callee	removeConnectionFromPool
>2860	Identifier	removeConnectionFromPool
>2861	Condition	con -> connection -> isClosed ( )
>2862	CallExpression	con -> connection -> isClosed ( )
>2863	ArgumentList	 
>2864	Callee	con -> connection -> isClosed
>2865	PtrMemberAccess	con -> connection -> isClosed
>2866	Identifier	isClosed
>2867	PtrMemberAccess	con -> connection
>2868	Identifier	connection
>2869	Identifier	con
>2870	BlockStarter	 
>2871	CompoundStatement	 
>2872	ReturnStatement	return false ;
>2873	Identifier	false
>2874	ExpressionStatement	f . log ( ISC_LOG_INFO , \"MySQLMM Client %s NOT allowed xfr in zone %s!\" , client . c_str ( ) , zone . c_str ( ) )
>2875	CallExpression	f . log ( ISC_LOG_INFO , \"MySQLMM Client %s NOT allowed xfr in zone %s!\" , client . c_str ( ) , zone . c_str ( ) )
>2876	ArgumentList	ISC_LOG_INFO
>2877	Argument	zone . c_str ( )
>2878	CallExpression	zone . c_str ( )
>2879	ArgumentList	 
>2880	Callee	zone . c_str
>2881	MemberAccess	zone . c_str
>2882	Identifier	c_str
>2883	Identifier	zone
>2884	Argument	client . c_str ( )
>2885	CallExpression	client . c_str ( )
>2886	ArgumentList	 
>2887	Callee	client . c_str
>2888	MemberAccess	client . c_str
>2889	Identifier	c_str
>2890	Identifier	client
>2891	Argument	\"MySQLMM Client %s NOT allowed xfr in zone %s!\"
>2892	PrimaryExpression	\"MySQLMM Client %s NOT allowed xfr in zone %s!\"
>2893	Argument	ISC_LOG_INFO
>2894	Identifier	ISC_LOG_INFO
>2895	Callee	f . log
>2896	MemberAccess	f . log
>2897	Identifier	log
>2898	Identifier	f
>2899	IfStatement	if ( res -> next ( ) )
>2900	CompoundStatement	 
>2901	ReturnStatement	return true ;
>2902	Identifier	true
>2903	ExpressionStatement	f . log ( ISC_LOG_INFO , \"MySQLMM Client %s allowed xfr in zone %s!\" , client . c_str ( ) , zone . c_str ( ) )
>2904	CallExpression	f . log ( ISC_LOG_INFO , \"MySQLMM Client %s allowed xfr in zone %s!\" , client . c_str ( ) , zone . c_str ( ) )
>2905	ArgumentList	ISC_LOG_INFO
>2906	Argument	zone . c_str ( )
>2907	CallExpression	zone . c_str ( )
>2908	ArgumentList	 
>2909	Callee	zone . c_str
>2910	MemberAccess	zone . c_str
>2911	Identifier	c_str
>2912	Identifier	zone
>2913	Argument	client . c_str ( )
>2914	CallExpression	client . c_str ( )
>2915	ArgumentList	 
>2916	Callee	client . c_str
>2917	MemberAccess	client . c_str
>2918	Identifier	c_str
>2919	Identifier	client
>2920	Argument	\"MySQLMM Client %s allowed xfr in zone %s!\"
>2921	PrimaryExpression	\"MySQLMM Client %s allowed xfr in zone %s!\"
>2922	Argument	ISC_LOG_INFO
>2923	Identifier	ISC_LOG_INFO
>2924	Callee	f . log
>2925	MemberAccess	f . log
>2926	Identifier	log
>2927	Identifier	f
>2928	Condition	res -> next ( )
>2929	CallExpression	res -> next ( )
>2930	ArgumentList	 
>2931	Callee	res -> next
>2932	PtrMemberAccess	res -> next
>2933	Identifier	next
>2934	Identifier	res
>2935	IdentifierDeclStatement	std 
>2936	IdentifierDecl	res ( qry . prep_stmt -> executeQuery ( ) )
>2937	CallExpression	qry . prep_stmt -> executeQuery ( )
>2938	ArgumentList	 
>2939	Callee	qry . prep_stmt -> executeQuery
>2940	PtrMemberAccess	qry . prep_stmt -> executeQuery
>2941	Identifier	executeQuery
>2942	MemberAccess	qry . prep_stmt
>2943	Identifier	prep_stmt
>2944	Identifier	qry
>2945	Identifier	res
>2946	IdentifierDeclType	std 
>2947	ExpressionStatement	fillPrepQry ( qry , zone , \"\" , client )
>2948	CallExpression	fillPrepQry ( qry , zone , \"\" , client )
>2949	ArgumentList	qry
>2950	Argument	client
>2951	Identifier	client
>2952	Argument	\"\"
>2953	PrimaryExpression	\"\"
>2954	Argument	zone
>2955	Identifier	zone
>2956	Argument	qry
>2957	Identifier	qry
>2958	Callee	fillPrepQry
>2959	Identifier	fillPrepQry
>2960	IdentifierDeclStatement	mmquery & qry = con -> queries . at ( MM_QUERY_ALLOWXFR ) ;
>2961	IdentifierDecl	& qry = con -> queries . at ( MM_QUERY_ALLOWXFR )
>2962	AssignmentExpr	& qry = con -> queries . at ( MM_QUERY_ALLOWXFR )
>2963	CallExpression	con -> queries . at ( MM_QUERY_ALLOWXFR )
>2964	ArgumentList	MM_QUERY_ALLOWXFR
>2965	Argument	MM_QUERY_ALLOWXFR
>2966	Identifier	MM_QUERY_ALLOWXFR
>2967	Callee	con -> queries . at
>2968	MemberAccess	con -> queries . at
>2969	Identifier	at
>2970	PtrMemberAccess	con -> queries
>2971	Identifier	queries
>2972	Identifier	con
>2973	Identifier	qry
>2974	Identifier	qry
>2975	IdentifierDeclType	mmquery &
>2976	IdentifierDeclStatement	 
>2977	IdentifierDecl	con = getFreeConnection ( )
>2978	AssignmentExpr	con = getFreeConnection ( )
>2979	CallExpression	getFreeConnection ( )
>2980	ArgumentList	 
>2981	Callee	getFreeConnection
>2982	Identifier	getFreeConnection
>2983	Identifier	con
>2984	Identifier	con
>2985	IdentifierDeclType	std 
>3012	FunctionDef	MySQLMMManager 
>3013	ParameterList	const std 
>3014	Parameter	 
>3015	Identifier	zone
>3016	ParameterType	const std 
>3017	ReturnType	void
>3018	CompoundStatement	 
>3019	BlockStarter	 
>3020	CompoundStatement	 
>3021	ExpressionStatement	 
>3022	Statement	throw
>3023	IfStatement	if ( con -> connection -> isClosed ( ) )
>3024	ExpressionStatement	removeConnectionFromPool ( con )
>3025	CallExpression	removeConnectionFromPool ( con )
>3026	ArgumentList	con
>3027	Argument	con
>3028	Identifier	con
>3029	Callee	removeConnectionFromPool
>3030	Identifier	removeConnectionFromPool
>3031	Condition	con -> connection -> isClosed ( )
>3032	CallExpression	con -> connection -> isClosed ( )
>3033	ArgumentList	 
>3034	Callee	con -> connection -> isClosed
>3035	PtrMemberAccess	con -> connection -> isClosed
>3036	Identifier	isClosed
>3037	PtrMemberAccess	con -> connection
>3038	Identifier	connection
>3039	Identifier	con
>3040	BlockStarter	 
>3041	CompoundStatement	 
>3042	ExpressionStatement	f . log ( ISC_LOG_INFO , \"MySQL Updated zone count for zone %s. result %d\" , zone . c_str ( ) , cnt )
>3043	CallExpression	f . log ( ISC_LOG_INFO , \"MySQL Updated zone count for zone %s. result %d\" , zone . c_str ( ) , cnt )
>3044	ArgumentList	ISC_LOG_INFO
>3045	Argument	cnt
>3046	Identifier	cnt
>3047	Argument	zone . c_str ( )
>3048	CallExpression	zone . c_str ( )
>3049	ArgumentList	 
>3050	Callee	zone . c_str
>3051	MemberAccess	zone . c_str
>3052	Identifier	c_str
>3053	Identifier	zone
>3054	Argument	\"MySQL Updated zone count for zone %s. result %d\"
>3055	PrimaryExpression	\"MySQL Updated zone count for zone %s. result %d\"
>3056	Argument	ISC_LOG_INFO
>3057	Identifier	ISC_LOG_INFO
>3058	Callee	f . log
>3059	MemberAccess	f . log
>3060	Identifier	log
>3061	Identifier	f
>3062	IdentifierDeclStatement	int cnt = qry . prep_stmt -> executeUpdate ( ) ;
>3063	IdentifierDecl	cnt = qry . prep_stmt -> executeUpdate ( )
>3064	AssignmentExpr	cnt = qry . prep_stmt -> executeUpdate ( )
>3065	CallExpression	qry . prep_stmt -> executeUpdate ( )
>3066	ArgumentList	 
>3067	Callee	qry . prep_stmt -> executeUpdate
>3068	PtrMemberAccess	qry . prep_stmt -> executeUpdate
>3069	Identifier	executeUpdate
>3070	MemberAccess	qry . prep_stmt
>3071	Identifier	prep_stmt
>3072	Identifier	qry
>3073	Identifier	cnt
>3074	Identifier	cnt
>3075	IdentifierDeclType	int
>3076	ExpressionStatement	fillPrepQry ( qry , zone )
>3077	CallExpression	fillPrepQry ( qry , zone )
>3078	ArgumentList	qry
>3079	Argument	zone
>3080	Identifier	zone
>3081	Argument	qry
>3082	Identifier	qry
>3083	Callee	fillPrepQry
>3084	Identifier	fillPrepQry
>3085	IdentifierDeclStatement	mmquery & qry = con -> queries . at ( MM_QUERY_COUNTZONE ) ;
>3086	IdentifierDecl	& qry = con -> queries . at ( MM_QUERY_COUNTZONE )
>3087	AssignmentExpr	& qry = con -> queries . at ( MM_QUERY_COUNTZONE )
>3088	CallExpression	con -> queries . at ( MM_QUERY_COUNTZONE )
>3089	ArgumentList	MM_QUERY_COUNTZONE
>3090	Argument	MM_QUERY_COUNTZONE
>3091	Identifier	MM_QUERY_COUNTZONE
>3092	Callee	con -> queries . at
>3093	MemberAccess	con -> queries . at
>3094	Identifier	at
>3095	PtrMemberAccess	con -> queries
>3096	Identifier	queries
>3097	Identifier	con
>3098	Identifier	qry
>3099	Identifier	qry
>3100	IdentifierDeclType	mmquery &
>3101	IdentifierDeclStatement	 
>3102	IdentifierDecl	con = getFreeConnection ( )
>3103	AssignmentExpr	con = getFreeConnection ( )
>3104	CallExpression	getFreeConnection ( )
>3105	ArgumentList	 
>3106	Callee	getFreeConnection
>3107	Identifier	getFreeConnection
>3108	Identifier	con
>3109	Identifier	con
>3110	IdentifierDeclType	std 
<8=10,9
<14=16,15
<16=17
<17=18
<18=20,19
<20=21
<25=28,27,26
<28=37,33,29
<29=30
<30=32,31
<33=34
<34=36,35
<37=46,38
<38=39
<39=40
<40=42,41
<42=43
<43=45,44
<46=47
<47=49,48
<57=63,62,58
<58=59
<59=61,60
<63=79,75,71,64
<64=65
<65=67,66
<67=68
<68=70,69
<71=72
<72=74,73
<75=76
<76=78,77
<79=81,80
<81=82
<92=103,93
<93=100,97,94
<94=96,95
<97=99,98
<100=102,101
<103=175,168,150,141,134,125,104
<104=117,113,110,105
<105=106
<106=108,107
<108=109
<110=112,111
<113=114
<114=116,115
<117=118
<118=119
<119=124,123,120
<120=122,121
<125=126
<126=130,127
<127=128
<128=129
<130=131
<131=133,132
<134=135
<135=140,136
<136=138,137
<138=139
<141=142
<142=148,143
<143=144
<144=145
<145=147,146
<148=149
<150=151
<151=164,152
<152=162,160,153
<153=154
<154=156,155
<156=157
<157=159,158
<160=161
<162=163
<164=165
<165=167,166
<168=169
<169=173,170
<170=171
<171=172
<173=174
<175=177,176
<177=178
<178=180,179
<180=182,181
<182=183
<183=185,184
<202=204,203
<208=214,213,209
<209=210
<210=212,211
<214=247,215
<215=246,216
<216=239,232,231,217
<217=218
<218=229,219
<219=220
<220=221
<221=228,222
<222=224,223
<224=225
<225=227,226
<229=230
<232=233
<233=238,237,234
<234=236,235
<239=240
<240=242,241
<242=243
<243=245,244
<247=248
<248=1039,1035,1031,1022,1007,988,970,952,934,916,898,878,872,865,854,836,818,796,778,765,752,743,736,729,728,727,726,725,724,722,721,720,719,718,717,716,267,249
<249=259,250
<250=258,251
<251=252
<252=256,253
<253=254
<254=255
<256=257
<259=260
<260=264,261
<261=263,262
<264=266,265
<267=707,700,696,689,669,662,655,648,528,519,512,505,498,381,317,279,268
<268=269
<269=276,270
<270=274,271
<271=272
<272=273
<274=275
<276=278,277
<279=280
<280=313,281
<281=311,309,302,291,282
<282=283
<283=285,284
<285=286
<286=288,287
<288=290,289
<291=292
<292=301,293
<293=295,294
<295=296
<296=298,297
<298=300,299
<302=303
<303=305,304
<305=306
<306=308,307
<309=310
<311=312
<313=314
<314=316,315
<317=363,318
<318=327,326,319
<319=320
<320=324,321
<321=322
<322=323
<324=325
<327=328
<328=359,329
<329=357,355,348,342,336,330
<330=331
<331=334,333,332
<334=335
<336=337
<337=340,339,338
<340=341
<342=343
<343=346,345,344
<346=347
<348=349
<349=351,350
<351=352
<352=354,353
<355=356
<357=358
<359=360
<360=362,361
<363=364
<364=376,365
<365=371,366
<366=370,367
<367=369,368
<371=375,372
<372=374,373
<376=380,377
<377=379,378
<381=491,382
<382=490,489,488,487,486,485,484,482,481,480,383
<383=468,384
<384=464,448,385
<385=386
<386=444,428,387
<387=388
<388=424,408,389
<389=390
<390=401,400,391
<391=392
<392=398,393
<393=394
<394=395
<395=397,396
<398=399
<401=402
<402=407,406,403
<403=405,404
<408=413,409
<409=410
<410=412,411
<413=414
<414=418,415
<415=416
<416=417
<418=419
<419=421,420
<421=423,422
<424=425
<425=427,426
<428=433,429
<429=430
<430=432,431
<433=434
<434=438,435
<435=436
<436=437
<438=439
<439=441,440
<441=443,442
<444=445
<445=447,446
<448=453,449
<449=450
<450=452,451
<453=454
<454=458,455
<455=456
<456=457
<458=459
<459=461,460
<461=463,462
<464=465
<465=467,466
<468=469
<469=479,478,470
<470=477,471
<471=473,472
<473=474
<474=476,475
<482=483
<491=492
<492=494,493
<494=495
<495=497,496
<498=499
<499=504,503,500
<500=502,501
<505=506
<506=511,510,507
<507=509,508
<512=513
<513=518,517,514
<514=516,515
<519=520
<520=527,526,521
<521=525,522
<522=524,523
<528=644,635,529
<529=530
<530=631,618,531
<531=532
<532=614,601,533
<533=534
<534=597,588,535
<535=536
<536=584,571,537
<537=538
<538=567,558,539
<539=540
<540=551,550,541
<541=542
<542=548,543
<543=544
<544=545
<545=547,546
<548=549
<551=552
<552=557,556,553
<553=555,554
<558=563,559
<559=560
<560=562,561
<563=564
<564=566,565
<567=568
<568=570,569
<571=580,576,572
<572=573
<573=575,574
<576=577
<577=579,578
<580=581
<581=583,582
<584=585
<585=587,586
<588=593,589
<589=590
<590=592,591
<593=594
<594=596,595
<597=598
<598=600,599
<601=610,606,602
<602=603
<603=605,604
<606=607
<607=609,608
<610=611
<611=613,612
<614=615
<615=617,616
<618=627,623,619
<619=620
<620=622,621
<623=624
<624=626,625
<627=628
<628=630,629
<631=632
<632=634,633
<635=640,636
<636=637
<637=639,638
<640=641
<641=643,642
<644=645
<645=647,646
<648=649
<649=654,653,650
<650=652,651
<655=656
<656=661,660,657
<657=659,658
<662=663
<663=668,667,664
<664=666,665
<669=670
<670=686,671
<671=673,672
<673=674
<674=676,675
<676=682,677
<677=680,678
<678=679
<680=681
<682=683
<683=685,684
<686=688,687
<689=690
<690=695,694,691
<691=693,692
<696=697
<697=699,698
<700=701
<701=705,702
<702=703
<703=704
<705=706
<707=708
<708=715,714,709
<709=713,710
<710=712,711
<722=723
<729=730
<730=735,734,731
<731=733,732
<736=737
<737=742,741,738
<738=740,739
<743=744
<744=751,750,745
<745=749,746
<746=748,747
<752=753
<753=761,754
<754=759,757,755
<755=756
<757=758
<759=760
<761=762
<762=764,763
<765=766
<766=774,767
<767=772,770,768
<768=769
<770=771
<772=773
<774=775
<775=777,776
<778=779
<779=792,780
<780=790,788,781
<781=782
<782=784,783
<784=785
<785=787,786
<788=789
<790=791
<792=793
<793=795,794
<796=797
<797=814,798
<798=812,810,799
<799=800
<800=803,802,801
<803=804
<804=806,805
<806=807
<807=809,808
<810=811
<812=813
<814=815
<815=817,816
<818=819
<819=832,820
<820=830,828,821
<821=822
<822=824,823
<824=825
<825=827,826
<828=829
<830=831
<832=833
<833=835,834
<836=837
<837=850,838
<838=848,846,839
<839=840
<840=842,841
<842=843
<843=845,844
<846=847
<848=849
<850=851
<851=853,852
<854=855
<855=861,856
<856=859,857
<857=858
<859=860
<861=862
<862=864,863
<865=866
<866=870,867
<867=868
<868=869
<870=871
<872=874,873
<874=875
<875=877,876
<878=879
<879=897,880
<880=882,881
<882=883
<883=885,884
<885=893,886
<886=891,887
<887=888
<888=890,889
<891=892
<893=894
<894=896,895
<898=899
<899=915,900
<900=902,901
<902=903
<903=905,904
<905=911,906
<906=909,907
<907=908
<909=910
<911=912
<912=914,913
<916=917
<917=933,918
<918=920,919
<920=921
<921=923,922
<923=929,924
<924=927,925
<925=926
<927=928
<929=930
<930=932,931
<934=935
<935=951,936
<936=938,937
<938=939
<939=941,940
<941=947,942
<942=945,943
<943=944
<945=946
<947=948
<948=950,949
<952=953
<953=969,954
<954=956,955
<956=957
<957=959,958
<959=965,960
<960=963,961
<961=962
<963=964
<965=966
<966=968,967
<970=971
<971=987,972
<972=974,973
<974=975
<975=977,976
<977=983,978
<978=981,979
<979=980
<981=982
<983=984
<984=986,985
<988=989
<989=1005,990
<990=991
<991=992
<992=999,993
<993=995,994
<995=996
<996=998,997
<999=1003,1000
<1000=1001
<1001=1002
<1003=1004
<1005=1006
<1007=1009,1008
<1009=1010
<1010=1021,1011
<1011=1017,1012
<1012=1015,1013
<1013=1014
<1015=1016
<1017=1018
<1018=1020,1019
<1022=1023
<1023=1027,1024
<1024=1025
<1025=1026
<1027=1028
<1028=1030,1029
<1031=1032
<1032=1034,1033
<1035=1036
<1036=1038,1037
<1039=1040
<1040=1042,1041
<1122=1125,1124,1123
<1125=1319,1308,1301,1300,1299,1298,1297,1296,1295,1294,1293,1292,1291,1290,1289,1288,1287,1286,1285,1284,1280,1274,1268,1262,1246,1229,1223,1222,1221,1220,1219,1217,1216,1215,1214,1213,1159,1150,1128,1126
<1126=1127
<1128=1129
<1129=1146,1130
<1130=1144,1142,1133,1131
<1131=1132
<1133=1134
<1134=1141,1135
<1135=1137,1136
<1137=1138
<1138=1140,1139
<1142=1143
<1144=1145
<1146=1147
<1147=1149,1148
<1150=1151
<1151=1155,1152
<1152=1153
<1153=1154
<1155=1156
<1156=1158,1157
<1159=1188,1178,1160
<1160=1161
<1161=1176,1162
<1162=1163
<1163=1164
<1164=1170,1165
<1165=1167,1166
<1167=1169,1168
<1170=1174,1171
<1171=1172
<1172=1173
<1174=1175
<1176=1177
<1178=1180,1179
<1180=1181
<1181=1187,1182
<1182=1184,1183
<1184=1186,1185
<1188=1189
<1189=1208,1190
<1190=1207,1191
<1191=1206,1192
<1192=1200,1193
<1193=1194
<1194=1195
<1195=1197,1196
<1197=1199,1198
<1200=1201
<1201=1203,1202
<1203=1205,1204
<1208=1210,1209
<1210=1212,1211
<1217=1218
<1223=1224
<1224=1226,1225
<1226=1228,1227
<1229=1230
<1230=1243,1231
<1231=1242,1232
<1232=1241,1233
<1233=1237,1234
<1234=1235
<1235=1236
<1237=1238
<1238=1240,1239
<1243=1245,1244
<1246=1253,1247
<1247=1248
<1248=1250,1249
<1250=1252,1251
<1253=1254
<1254=1261,1255
<1255=1257,1256
<1257=1258
<1258=1260,1259
<1262=1263
<1263=1265,1264
<1265=1267,1266
<1268=1269
<1269=1271,1270
<1271=1273,1272
<1274=1275
<1275=1277,1276
<1277=1279,1278
<1280=1281
<1281=1283,1282
<1301=1302
<1302=1306,1303
<1303=1304
<1304=1305
<1306=1307
<1308=1310,1309
<1310=1311
<1311=1313,1312
<1313=1315,1314
<1315=1316
<1316=1318,1317
<1319=1320
<1320=1323,1322,1321
<1359=1362,1361,1360
<1362=1399,1394,1393,1392,1391,1390,1389,1388,1387,1386,1385,1384,1382,1381,1380,1368,1363
<1363=1364
<1364=1366,1365
<1366=1367
<1368=1369
<1369=1373,1370
<1370=1371
<1371=1372
<1373=1374
<1374=1376,1375
<1376=1377
<1377=1379,1378
<1382=1383
<1394=1395
<1395=1398,1397,1396
<1399=1400
<1400=1404,1401
<1401=1402
<1402=1403
<1404=1405
<1405=1407,1406
<1417=1423,1422,1418
<1418=1419
<1419=1421,1420
<1423=1455,1442,1435,1424
<1424=1425
<1425=1431,1426
<1426=1429,1427
<1427=1428
<1429=1430
<1431=1432
<1432=1434,1433
<1435=1436
<1436=1440,1437
<1437=1438
<1438=1439
<1440=1441
<1442=1444,1443
<1444=1445
<1445=1454,1446
<1446=1450,1447
<1447=1448
<1448=1449
<1450=1451
<1451=1453,1452
<1455=1456
<1456=1459,1458,1457
<1469=1484,1483,1470
<1470=1480,1477,1474,1471
<1471=1473,1472
<1474=1476,1475
<1477=1479,1478
<1480=1482,1481
<1484=1485
<1485=1563,1552,1549,1486
<1486=1487
<1487=1543,1488
<1488=1541,1526,1525,1523,1508,1507,1505,1490,1489
<1490=1491
<1491=1499,1492
<1492=1495,1493
<1493=1494
<1495=1496
<1496=1498,1497
<1499=1500
<1500=1502,1501
<1502=1504,1503
<1505=1506
<1508=1509
<1509=1517,1510
<1510=1513,1511
<1511=1512
<1513=1514
<1514=1516,1515
<1517=1518
<1518=1520,1519
<1520=1522,1521
<1523=1524
<1526=1527
<1527=1535,1528
<1528=1531,1529
<1529=1530
<1531=1532
<1532=1534,1533
<1535=1536
<1536=1538,1537
<1538=1540,1539
<1541=1542
<1543=1544
<1544=1546,1545
<1546=1548,1547
<1549=1551,1550
<1552=1553
<1553=1562,1554
<1554=1556,1555
<1556=1557
<1557=1559,1558
<1559=1561,1560
<1563=1564
<1564=1565
<1565=1570,1569,1566
<1566=1568,1567
<1585=1594,1593,1586
<1586=1590,1587
<1587=1589,1588
<1590=1592,1591
<1594=1960,1954,1947,1940,1928,1597,1595
<1595=1596
<1597=1921,1598
<1598=1917,1616,1610,1603,1599
<1599=1600
<1600=1602,1601
<1603=1604
<1604=1608,1605
<1605=1606
<1606=1607
<1608=1609
<1610=1612,1611
<1612=1613
<1613=1615,1614
<1616=1915,1617
<1617=1914,1913,1906,1905,1904,1875,1850,1849,1848,1807,1768,1767,1765,1618
<1618=1761,1754,1702,1656,1619
<1619=1620
<1620=1652,1621
<1621=1650,1648,1634,1622
<1622=1623
<1623=1625,1624
<1625=1626
<1626=1628,1627
<1628=1630,1629
<1630=1631
<1631=1633,1632
<1634=1635
<1635=1637,1636
<1637=1638
<1638=1640,1639
<1640=1644,1641
<1641=1642
<1642=1643
<1644=1645
<1645=1647,1646
<1648=1649
<1650=1651
<1652=1653
<1653=1655,1654
<1656=1657
<1657=1701,1658
<1658=1697,1659
<1659=1695,1681,1672,1660
<1660=1661
<1661=1663,1662
<1663=1664
<1664=1666,1665
<1666=1668,1667
<1668=1669
<1669=1671,1670
<1672=1673
<1673=1677,1674
<1674=1675
<1675=1676
<1677=1678
<1678=1680,1679
<1681=1682
<1682=1684,1683
<1684=1685
<1685=1687,1686
<1687=1691,1688
<1688=1689
<1689=1690
<1691=1692
<1692=1694,1693
<1695=1696
<1697=1698
<1698=1700,1699
<1702=1746,1742,1739,1703
<1703=1725,1704
<1704=1716,1705
<1705=1710,1706
<1706=1707
<1707=1709,1708
<1710=1711
<1711=1715,1712
<1712=1714,1713
<1716=1717
<1717=1724,1718
<1718=1720,1719
<1720=1721
<1721=1723,1722
<1725=1726
<1726=1738,1737,1727
<1727=1736,1728
<1728=1732,1729
<1729=1730
<1730=1731
<1732=1733
<1733=1735,1734
<1739=1741,1740
<1742=1743
<1743=1745,1744
<1746=1747
<1747=1748
<1748=1753,1752,1749
<1749=1751,1750
<1754=1755
<1755=1760,1759,1756
<1756=1758,1757
<1761=1762
<1762=1764,1763
<1765=1766
<1768=1769
<1769=1803,1770
<1770=1801,1799,1785,1771
<1771=1772
<1772=1774,1773
<1774=1775
<1775=1777,1776
<1777=1781,1778
<1778=1779
<1779=1780
<1781=1782
<1782=1784,1783
<1785=1786
<1786=1788,1787
<1788=1789
<1789=1791,1790
<1791=1795,1792
<1792=1793
<1793=1794
<1795=1796
<1796=1798,1797
<1799=1800
<1801=1802
<1803=1804
<1804=1806,1805
<1807=1808
<1808=1847,1809
<1809=1843,1810
<1810=1841,1827,1825,1811
<1811=1812
<1812=1814,1813
<1814=1815
<1815=1817,1816
<1817=1821,1818
<1818=1819
<1819=1820
<1821=1822
<1822=1824,1823
<1825=1826
<1827=1828
<1828=1830,1829
<1830=1831
<1831=1833,1832
<1833=1837,1834
<1834=1835
<1835=1836
<1837=1838
<1838=1840,1839
<1841=1842
<1843=1844
<1844=1846,1845
<1850=1851
<1851=1871,1852
<1852=1869,1867,1853
<1853=1854
<1854=1856,1855
<1856=1857
<1857=1859,1858
<1859=1863,1860
<1860=1861
<1861=1862
<1863=1864
<1864=1866,1865
<1867=1868
<1869=1870
<1871=1872
<1872=1874,1873
<1875=1876
<1876=1903,1877
<1877=1899,1878
<1878=1897,1895,1893,1879
<1879=1880
<1880=1882,1881
<1882=1883
<1883=1885,1884
<1885=1889,1886
<1886=1887
<1887=1888
<1889=1890
<1890=1892,1891
<1893=1894
<1895=1896
<1897=1898
<1899=1900
<1900=1902,1901
<1906=1907
<1907=1911,1908
<1908=1909
<1909=1910
<1911=1912
<1915=1916
<1917=1918
<1918=1920,1919
<1921=1922
<1922=1924,1923
<1924=1925
<1925=1927,1926
<1928=1929
<1929=1939,1938,1930
<1930=1937,1931
<1931=1933,1932
<1933=1934
<1934=1936,1935
<1940=1941
<1941=1946,1945,1942
<1942=1944,1943
<1947=1948
<1948=1952,1949
<1949=1950
<1950=1951
<1952=1953
<1954=1956,1955
<1956=1957
<1957=1959,1958
<1960=1961
<1961=1971,1970,1962
<1962=1969,1963
<1963=1965,1964
<1965=1966
<1966=1968,1967
<2003=2009,2008,2004
<2004=2005
<2005=2007,2006
<2009=2119,2031,2010
<2010=2011
<2011=2014,2013,2012
<2014=2022,2015
<2015=2016
<2016=2020,2017
<2017=2018
<2018=2019
<2020=2021
<2022=2023
<2023=2025,2024
<2025=2026
<2026=2028,2027
<2028=2030,2029
<2031=2032
<2032=2103,2094,2082,2053,2035,2033
<2033=2034
<2035=2036
<2036=2049,2037
<2037=2047,2045,2038
<2038=2039
<2039=2041,2040
<2041=2042
<2042=2044,2043
<2045=2046
<2047=2048
<2049=2050
<2050=2052,2051
<2053=2075,2054
<2054=2057,2055
<2055=2056
<2057=2058
<2058=2071,2059
<2059=2069,2067,2060
<2060=2061
<2061=2063,2062
<2063=2064
<2064=2066,2065
<2067=2068
<2069=2070
<2071=2072
<2072=2074,2073
<2075=2076
<2076=2078,2077
<2078=2079
<2079=2081,2080
<2082=2083
<2083=2093,2092,2084
<2084=2086,2085
<2086=2087
<2087=2089,2088
<2089=2091,2090
<2094=2095
<2095=2101,2096
<2096=2099,2097
<2097=2098
<2099=2100
<2101=2102
<2103=2104
<2104=2118,2117,2105
<2105=2116,2106
<2106=2110,2107
<2107=2108
<2108=2109
<2110=2111
<2111=2113,2112
<2113=2115,2114
<2119=2120
<2120=2128,2127,2121
<2121=2126,2122
<2122=2124,2123
<2124=2125
<2153=2165,2164,2154
<2154=2161,2158,2155
<2155=2157,2156
<2158=2160,2159
<2161=2163,2162
<2165=2247,2237,2187,2166
<2166=2167
<2167=2170,2169,2168
<2170=2178,2171
<2171=2172
<2172=2176,2173
<2173=2174
<2174=2175
<2176=2177
<2178=2179
<2179=2181,2180
<2181=2182
<2182=2184,2183
<2184=2186,2185
<2187=2188
<2188=2221,2210,2198,2189
<2189=2190
<2190=2196,2191
<2191=2194,2192
<2192=2193
<2194=2195
<2196=2197
<2198=2199
<2199=2209,2208,2200
<2200=2202,2201
<2202=2203
<2203=2205,2204
<2205=2207,2206
<2210=2211
<2211=2219,2212
<2212=2217,2215,2213
<2213=2214
<2215=2216
<2217=2218
<2219=2220
<2221=2222
<2222=2236,2235,2223
<2223=2234,2224
<2224=2228,2225
<2225=2226
<2226=2227
<2228=2229
<2229=2231,2230
<2231=2233,2232
<2237=2238
<2238=2246,2245,2239
<2239=2244,2240
<2240=2242,2241
<2242=2243
<2247=2248
<2248=2268,2249
<2249=2266,2264,2257,2250
<2250=2251
<2251=2253,2252
<2253=2254
<2254=2256,2255
<2257=2258
<2258=2260,2259
<2260=2261
<2261=2263,2262
<2264=2265
<2266=2267
<2268=2269
<2269=2271,2270
<2296=2305,2304,2297
<2297=2301,2298
<2298=2300,2299
<2301=2303,2302
<2305=2393,2327,2306
<2306=2307
<2307=2310,2309,2308
<2310=2318,2311
<2311=2312
<2312=2316,2313
<2313=2314
<2314=2315
<2316=2317
<2318=2319
<2319=2321,2320
<2321=2322
<2322=2324,2323
<2324=2326,2325
<2327=2328
<2328=2377,2368,2356,2338,2329
<2329=2330
<2330=2336,2331
<2331=2334,2332
<2332=2333
<2334=2335
<2336=2337
<2338=2339
<2339=2352,2340
<2340=2350,2348,2341
<2341=2342
<2342=2344,2343
<2344=2345
<2345=2347,2346
<2348=2349
<2350=2351
<2352=2353
<2353=2355,2354
<2356=2357
<2357=2367,2366,2358
<2358=2360,2359
<2360=2361
<2361=2363,2362
<2363=2365,2364
<2368=2369
<2369=2375,2370
<2370=2373,2371
<2371=2372
<2373=2374
<2375=2376
<2377=2378
<2378=2392,2391,2379
<2379=2390,2380
<2380=2384,2381
<2381=2382
<2382=2383
<2384=2385
<2385=2387,2386
<2387=2389,2388
<2393=2394
<2394=2402,2401,2395
<2395=2400,2396
<2396=2398,2397
<2398=2399
<2425=2434,2433,2426
<2426=2430,2427
<2427=2429,2428
<2430=2432,2431
<2434=2784,2456,2435
<2435=2436
<2436=2439,2438,2437
<2439=2447,2440
<2440=2441
<2441=2445,2442
<2442=2443
<2443=2444
<2445=2446
<2447=2448
<2448=2450,2449
<2450=2451
<2451=2453,2452
<2453=2455,2454
<2456=2457
<2457=2768,2759,2747,2735,2729,2722,2710,2703,2697,2690,2672,2460,2458
<2458=2459
<2460=2665,2461
<2461=2661,2654,2602,2539,2533,2526,2466,2462
<2462=2463
<2463=2465,2464
<2466=2467
<2467=2522,2468
<2468=2520,2518,2504,2490,2481,2469
<2469=2470
<2470=2472,2471
<2472=2473
<2473=2475,2474
<2475=2477,2476
<2477=2478
<2478=2480,2479
<2481=2482
<2482=2486,2483
<2483=2484
<2484=2485
<2486=2487
<2487=2489,2488
<2490=2491
<2491=2493,2492
<2493=2494
<2494=2496,2495
<2496=2500,2497
<2497=2498
<2498=2499
<2500=2501
<2501=2503,2502
<2504=2505
<2505=2507,2506
<2507=2508
<2508=2510,2509
<2510=2514,2511
<2511=2512
<2512=2513
<2514=2515
<2515=2517,2516
<2518=2519
<2520=2521
<2522=2523
<2523=2525,2524
<2526=2527
<2527=2531,2528
<2528=2529
<2529=2530
<2531=2532
<2533=2535,2534
<2535=2536
<2536=2538,2537
<2539=2540
<2540=2601,2600,2541
<2541=2599,2542
<2542=2595,2543
<2543=2593,2579,2565,2556,2544
<2544=2545
<2545=2547,2546
<2547=2548
<2548=2550,2549
<2550=2552,2551
<2552=2553
<2553=2555,2554
<2556=2557
<2557=2561,2558
<2558=2559
<2559=2560
<2561=2562
<2562=2564,2563
<2565=2566
<2566=2568,2567
<2568=2569
<2569=2571,2570
<2571=2575,2572
<2572=2573
<2573=2574
<2575=2576
<2576=2578,2577
<2579=2580
<2580=2582,2581
<2582=2583
<2583=2585,2584
<2585=2589,2586
<2586=2587
<2587=2588
<2589=2590
<2590=2592,2591
<2593=2594
<2595=2596
<2596=2598,2597
<2602=2646,2642,2639,2603
<2603=2625,2604
<2604=2616,2605
<2605=2610,2606
<2606=2607
<2607=2609,2608
<2610=2611
<2611=2615,2612
<2612=2614,2613
<2616=2617
<2617=2624,2618
<2618=2620,2619
<2620=2621
<2621=2623,2622
<2625=2626
<2626=2638,2637,2627
<2627=2636,2628
<2628=2632,2629
<2629=2630
<2630=2631
<2632=2633
<2633=2635,2634
<2639=2641,2640
<2642=2643
<2643=2645,2644
<2646=2647
<2647=2648
<2648=2653,2652,2649
<2649=2651,2650
<2654=2655
<2655=2660,2659,2656
<2656=2658,2657
<2661=2662
<2662=2664,2663
<2665=2666
<2666=2668,2667
<2668=2669
<2669=2671,2670
<2672=2673
<2673=2686,2674
<2674=2684,2682,2675
<2675=2676
<2676=2678,2677
<2678=2679
<2679=2681,2680
<2682=2683
<2684=2685
<2686=2687
<2687=2689,2688
<2690=2691
<2691=2695,2692
<2692=2693
<2693=2694
<2695=2696
<2697=2699,2698
<2699=2700
<2700=2702,2701
<2703=2704
<2704=2709,2708,2705
<2705=2707,2706
<2710=2711
<2711=2721,2720,2712
<2712=2719,2713
<2713=2715,2714
<2715=2716
<2716=2718,2717
<2722=2723
<2723=2727,2724
<2724=2725
<2725=2726
<2727=2728
<2729=2731,2730
<2731=2732
<2732=2734,2733
<2735=2736
<2736=2746,2745,2737
<2737=2744,2738
<2738=2740,2739
<2740=2741
<2741=2743,2742
<2747=2748
<2748=2758,2757,2749
<2749=2751,2750
<2751=2752
<2752=2754,2753
<2754=2756,2755
<2759=2760
<2760=2766,2761
<2761=2764,2762
<2762=2763
<2764=2765
<2766=2767
<2768=2769
<2769=2783,2782,2770
<2770=2781,2771
<2771=2775,2772
<2772=2773
<2773=2774
<2775=2776
<2776=2778,2777
<2778=2780,2779
<2784=2785
<2785=2793,2792,2786
<2786=2791,2787
<2787=2789,2788
<2789=2790
<2839=2848,2847,2840
<2840=2844,2841
<2841=2843,2842
<2844=2846,2845
<2848=2976,2870,2849
<2849=2850
<2850=2853,2852,2851
<2853=2861,2854
<2854=2855
<2855=2859,2856
<2856=2857
<2857=2858
<2859=2860
<2861=2862
<2862=2864,2863
<2864=2865
<2865=2867,2866
<2867=2869,2868
<2870=2871
<2871=2960,2947,2935,2899,2874,2872
<2872=2873
<2874=2875
<2875=2895,2876
<2876=2893,2891,2884,2877
<2877=2878
<2878=2880,2879
<2880=2881
<2881=2883,2882
<2884=2885
<2885=2887,2886
<2887=2888
<2888=2890,2889
<2891=2892
<2893=2894
<2895=2896
<2896=2898,2897
<2899=2928,2900
<2900=2903,2901
<2901=2902
<2903=2904
<2904=2924,2905
<2905=2922,2920,2913,2906
<2906=2907
<2907=2909,2908
<2909=2910
<2910=2912,2911
<2913=2914
<2914=2916,2915
<2916=2917
<2917=2919,2918
<2920=2921
<2922=2923
<2924=2925
<2925=2927,2926
<2928=2929
<2929=2931,2930
<2931=2932
<2932=2934,2933
<2935=2936
<2936=2946,2945,2937
<2937=2939,2938
<2939=2940
<2940=2942,2941
<2942=2944,2943
<2947=2948
<2948=2958,2949
<2949=2956,2954,2952,2950
<2950=2951
<2952=2953
<2954=2955
<2956=2957
<2958=2959
<2960=2961
<2961=2975,2974,2962
<2962=2973,2963
<2963=2967,2964
<2964=2965
<2965=2966
<2967=2968
<2968=2970,2969
<2970=2972,2971
<2976=2977
<2977=2985,2984,2978
<2978=2983,2979
<2979=2981,2980
<2981=2982
<3012=3018,3017,3013
<3013=3014
<3014=3016,3015
<3018=3101,3040,3019
<3019=3020
<3020=3023,3022,3021
<3023=3031,3024
<3024=3025
<3025=3029,3026
<3026=3027
<3027=3028
<3029=3030
<3031=3032
<3032=3034,3033
<3034=3035
<3035=3037,3036
<3037=3039,3038
<3040=3041
<3041=3085,3076,3062,3042
<3042=3043
<3043=3058,3044
<3044=3056,3054,3047,3045
<3045=3046
<3047=3048
<3048=3050,3049
<3050=3051
<3051=3053,3052
<3054=3055
<3056=3057
<3058=3059
<3059=3061,3060
<3062=3063
<3063=3075,3074,3064
<3064=3073,3065
<3065=3067,3066
<3067=3068
<3068=3070,3069
<3070=3072,3071
<3076=3077
<3077=3083,3078
<3078=3081,3079
<3079=3080
<3081=3082
<3083=3084
<3085=3086
<3086=3100,3099,3087
<3087=3098,3088
<3088=3092,3089
<3089=3090
<3090=3091
<3092=3093
<3093=3095,3094
<3095=3097,3096
<3101=3102
<3102=3110,3109,3103
<3103=3108,3104
<3104=3106,3105
<3106=3107
