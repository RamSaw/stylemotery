>3	FunctionDef	boost_test_init ()
>4	ParameterList	 
>5	ReturnType	bool
>6	CompoundStatement	 
>7	ReturnStatement	 
>8	Identifier	true
>21	FunctionDef	CukeBoostLogInterceptor 
>22	ParameterList	 
>23	ReturnType	void
>24	CompoundStatement	 
>25	ExpressionStatement	 
>26	CallExpression	description . str ( \"\" )
>27	ArgumentList	\"\"
>28	Argument	\"\"
>29	PrimaryExpression	\"\"
>30	Callee	description . str
>31	MemberAccess	description . str
>32	Identifier	str
>33	Identifier	description
>38	FunctionDef	CukeBoostLogInterceptor 
>39	ParameterList	 
>40	ReturnType	const InvokeResult
>41	CompoundStatement	 
>42	IfStatement	if ( d . empty ( ) )
>43	ElseStatement	else
>44	CompoundStatement	 
>45	ReturnStatement	 
>46	CallExpression	InvokeResult 
>47	ArgumentList	description . str ( )
>48	Argument	description . str ( )
>49	CallExpression	description . str ( )
>50	ArgumentList	 
>51	Callee	description . str
>52	MemberAccess	description . str
>53	Identifier	str
>54	Identifier	description
>55	Callee	InvokeResult 
>56	Identifier	InvokeResult 
>57	CompoundStatement	 
>58	ReturnStatement	 
>59	CallExpression	InvokeResult 
>60	ArgumentList	 
>61	Callee	InvokeResult 
>62	Identifier	InvokeResult 
>63	Condition	 
>64	CallExpression	d . empty ( )
>65	ArgumentList	 
>66	Callee	d . empty
>67	MemberAccess	d . empty
>68	Identifier	empty
>69	Identifier	d
>70	IdentifierDeclStatement	 
>71	IdentifierDecl	d = description . str ( )
>72	AssignmentExpr	d = description . str ( )
>73	CallExpression	description . str ( )
>74	ArgumentList	 
>75	Callee	description . str
>76	MemberAccess	description . str
>77	Identifier	str
>78	Identifier	description
>79	Identifier	d
>80	Identifier	d
>81	IdentifierDeclType	std 
>91	FunctionDef	BoostStep 
>92	ParameterList	 
>93	ReturnType	const InvokeResult
>94	CompoundStatement	 
>95	ReturnStatement	 
>96	CallExpression	logInterceptor -> getResult ( )
>97	ArgumentList	 
>98	Callee	logInterceptor -> getResult
>99	PtrMemberAccess	logInterceptor -> getResult
>100	Identifier	getResult
>101	Identifier	logInterceptor
>102	ExpressionStatement	 
>103	CallExpression	runWithMasterSuite ( )
>104	ArgumentList	 
>105	Callee	runWithMasterSuite
>106	Identifier	runWithMasterSuite
>107	ExpressionStatement	 
>108	CallExpression	logInterceptor -> reset ( )
>109	ArgumentList	 
>110	Callee	logInterceptor -> reset
>111	PtrMemberAccess	logInterceptor -> reset
>112	Identifier	reset
>113	Identifier	logInterceptor
>114	ExpressionStatement	 
>115	CallExpression	initBoostTest ( )
>116	ArgumentList	 
>117	Callee	initBoostTest
>118	Identifier	initBoostTest
>125	FunctionDef	BoostStep 
>126	ParameterList	 
>127	ReturnType	void
>128	CompoundStatement	 
>129	IfStatement	if ( ! framework 
>130	CompoundStatement	 
>131	ExpressionStatement	 
>132	CallExpression	boost 
>133	ArgumentList	log_all_errors
>134	Argument	log_all_errors
>135	Identifier	log_all_errors
>136	Callee	boost 
>137	MemberAccess	boost 
>138	Identifier	set_threshold_level
>139	Identifier	boost 
>140	Statement	 
>141	ExpressionStatement	 
>142	CallExpression	boost 
>143	ArgumentList	logInterceptor
>144	Argument	logInterceptor
>145	Identifier	logInterceptor
>146	Callee	boost 
>147	MemberAccess	boost 
>148	Identifier	set_formatter
>149	Identifier	boost 
>150	Statement	 
>151	ExpressionStatement	 
>152	Identifier	CukeBoostLogInterceptor
>153	Statement	 
>154	Statement	 
>155	Statement	 
>156	ExpressionStatement	 
>157	CallExpression	framework 
>158	ArgumentList	& boost_test_init
>159	Argument	argv
>160	Identifier	argv
>161	Argument	argc
>162	Identifier	argc
>163	Argument	& boost_test_init
>164	UnaryOp	& boost_test_init
>165	Identifier	boost_test_init
>166	UnaryOperator	&
>167	Callee	framework 
>168	Identifier	framework 
>169	IdentifierDeclStatement	 
>170	IdentifierDecl	* argv [ ] = { ( char * ) \"\" , ( char * ) \"\" }
>171	AssignmentExpr	* argv [ ] = { ( char * ) \"\" , ( char * ) \"\" }
>172	InitializerList	( char * ) \"\"
>173	CastExpression	( char * ) \"\"
>174	PrimaryExpression	\"\"
>175	CastTarget	char *
>176	CastExpression	( char * ) \"\"
>177	PrimaryExpression	\"\"
>178	CastTarget	char *
>179	Identifier	argv
>180	Identifier	argv
>181	IdentifierDeclType	char * [ ]
>182	IdentifierDeclStatement	 
>183	IdentifierDecl	argc = 2
>184	AssignmentExpr	argc = 2
>185	PrimaryExpression	2
>186	Identifier	argc
>187	Identifier	argc
>188	IdentifierDeclType	int
>189	Condition	 
>190	UnaryOp	! framework 
>191	CallExpression	framework 
>192	ArgumentList	 
>193	Callee	framework 
>194	Identifier	framework 
>195	UnaryOperator	!
>206	FunctionDef	BoostStep 
>207	ParameterList	 
>208	ReturnType	void
>209	CompoundStatement	 
>210	ExpressionStatement	 
>211	CallExpression	framework 
>212	ArgumentList	tc -> p_id
>213	Argument	tc -> p_id
>214	PtrMemberAccess	tc -> p_id
>215	Identifier	p_id
>216	Identifier	tc
>217	Callee	framework 
>218	MemberAccess	framework 
>219	Identifier	remove
>220	CallExpression	framework 
>221	ArgumentList	 
>222	Callee	framework 
>223	Identifier	framework 
>224	ExpressionStatement	 
>225	CallExpression	framework 
>226	ArgumentList	tc
>227	Argument	false
>228	Identifier	false
>229	Argument	tc
>230	Identifier	tc
>231	Callee	framework 
>232	Identifier	framework 
>233	ExpressionStatement	 
>234	CallExpression	framework 
>235	ArgumentList	tc
>236	Argument	tc
>237	Identifier	tc
>238	Callee	framework 
>239	MemberAccess	framework 
>240	Identifier	add
>241	CallExpression	framework 
>242	ArgumentList	 
>243	Callee	framework 
>244	Identifier	framework 
>245	IdentifierDeclStatement	 
>246	IdentifierDecl	* tc = BOOST_TEST_CASE ( boost 
>247	AssignmentExpr	* tc = BOOST_TEST_CASE ( boost 
>248	CallExpression	BOOST_TEST_CASE ( boost 
>249	ArgumentList	boost 
>250	Argument	boost 
>251	CallExpression	boost 
>252	ArgumentList	& BoostStep 
>253	Argument	this
>254	Identifier	this
>255	Argument	& BoostStep 
>256	UnaryOp	& BoostStep 
>257	Identifier	BoostStep 
>258	UnaryOperator	&
>259	Callee	boost 
>260	Identifier	boost 
>261	Callee	BOOST_TEST_CASE
>262	Identifier	BOOST_TEST_CASE
>263	Identifier	tc
>264	Identifier	tc
>265	IdentifierDeclType	test_case *
>266	ExpressionStatement	 
>267	Identifier	boost 
>268	Statement	 
>269	Statement	 
>270	Statement	 
<3=6,5,4
<6=7
<7=8
<21=24,23,22
<24=25
<25=26
<26=30,27
<27=28
<28=29
<30=31
<31=33,32
<38=41,40,39
<41=70,42
<42=63,57,43
<43=44
<44=45
<45=46
<46=55,47
<47=48
<48=49
<49=51,50
<51=52
<52=54,53
<55=56
<57=58
<58=59
<59=61,60
<61=62
<63=64
<64=66,65
<66=67
<67=69,68
<70=71
<71=81,80,72
<72=79,73
<73=75,74
<75=76
<76=78,77
<91=94,93,92
<94=114,107,102,95
<95=96
<96=98,97
<98=99
<99=101,100
<102=103
<103=105,104
<105=106
<107=108
<108=110,109
<110=111
<111=113,112
<114=115
<115=117,116
<117=118
<125=128,127,126
<128=129
<129=189,130
<130=182,169,156,155,154,153,151,150,141,140,131
<131=132
<132=136,133
<133=134
<134=135
<136=137
<137=139,138
<141=142
<142=146,143
<143=144
<144=145
<146=147
<147=149,148
<151=152
<156=157
<157=167,158
<158=163,161,159
<159=160
<161=162
<163=164
<164=166,165
<167=168
<169=170
<170=181,180,171
<171=179,172
<172=176,173
<173=175,174
<176=178,177
<182=183
<183=188,187,184
<184=186,185
<189=190
<190=195,191
<191=193,192
<193=194
<206=209,208,207
<209=270,269,268,266,245,233,224,210
<210=211
<211=217,212
<212=213
<213=214
<214=216,215
<217=218
<218=220,219
<220=222,221
<222=223
<224=225
<225=231,226
<226=229,227
<227=228
<229=230
<231=232
<233=234
<234=238,235
<235=236
<236=237
<238=239
<239=241,240
<241=243,242
<243=244
<245=246
<246=265,264,247
<247=263,248
<248=261,249
<249=250
<250=251
<251=259,252
<252=255,253
<253=254
<255=256
<256=258,257
<259=260
<261=262
<266=267
