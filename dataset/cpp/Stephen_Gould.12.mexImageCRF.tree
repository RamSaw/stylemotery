>5	FunctionDef	usage ()
>6	ParameterList	 
>7	ReturnType	void
>8	CompoundStatement	 
>9	ExpressionStatement	 
>10	CallExpression	mexPrintf ( \"\n\" )
>11	ArgumentList	\"\n\"
>12	Argument	\"\n\"
>13	PrimaryExpression	\"\n\"
>14	Callee	mexPrintf
>15	Identifier	mexPrintf
>16	ExpressionStatement	 
>17	CallExpression	drwnMatlabUtils 
>18	ArgumentList	 
>19	Callee	drwnMatlabUtils 
>20	Identifier	drwnMatlabUtils 
>21	ExpressionStatement	 
>22	CallExpression	mexPrintf ( \"OPTIONS
>23	ArgumentList	\"OPTIONS
>24	Argument	\"OPTIONS
>25	PrimaryExpression	\"OPTIONS
>26	Callee	mexPrintf
>27	Identifier	mexPrintf
>28	ExpressionStatement	 
>29	CallExpression	mexPrintf ( \"  lambda_H 
>30	ArgumentList	\"  lambda_H 
>31	Argument	\"  lambda_H 
>32	PrimaryExpression	\"  lambda_H 
>33	Callee	mexPrintf
>34	Identifier	mexPrintf
>35	ExpressionStatement	 
>36	CallExpression	mexPrintf ( \"  regions  
>37	ArgumentList	\"  regions  
>38	Argument	\"  regions  
>39	PrimaryExpression	\"  regions  
>40	Callee	mexPrintf
>41	Identifier	mexPrintf
>42	ExpressionStatement	 
>43	CallExpression	mexPrintf ( \"  lambda_P 
>44	ArgumentList	\"  lambda_P 
>45	Argument	\"  lambda_P 
>46	PrimaryExpression	\"  lambda_P 
>47	Callee	mexPrintf
>48	Identifier	mexPrintf
>49	ExpressionStatement	 
>50	CallExpression	mexPrintf ( \"  unary    
>51	ArgumentList	\"  unary    
>52	Argument	\"  unary    
>53	PrimaryExpression	\"  unary    
>54	Callee	mexPrintf
>55	Identifier	mexPrintf
>56	ExpressionStatement	 
>57	CallExpression	mexPrintf ( \"  image    
>58	ArgumentList	\"  image    
>59	Argument	\"  image    
>60	PrimaryExpression	\"  image    
>61	Callee	mexPrintf
>62	Identifier	mexPrintf
>63	ExpressionStatement	 
>64	CallExpression	mexPrintf ( \"USAGE
>65	ArgumentList	\"USAGE
>66	Argument	\"USAGE
>67	PrimaryExpression	\"USAGE
>68	Callee	mexPrintf
>69	Identifier	mexPrintf
>70	ExpressionStatement	 
>71	CallExpression	mexPrintf ( \"\n\" )
>72	ArgumentList	\"\n\"
>73	Argument	\"\n\"
>74	PrimaryExpression	\"\n\"
>75	Callee	mexPrintf
>76	Identifier	mexPrintf
>77	ExpressionStatement	 
>78	CallExpression	mexPrintf ( DRWN_USAGE_HEADER )
>79	ArgumentList	DRWN_USAGE_HEADER
>80	Argument	DRWN_USAGE_HEADER
>81	Identifier	DRWN_USAGE_HEADER
>82	Callee	mexPrintf
>83	Identifier	mexPrintf
>88	FunctionDef	mexFunction (int nlhs , mxArray * plhs [ ] , int nrhs , const mxArray * prhs [ ])
>89	ParameterList	int nlhs , mxArray * plhs [ ] , int nrhs , const mxArray * prhs [ ]
>90	Parameter	 
>91	Identifier	prhs
>92	ParameterType	const mxArray * [ ]
>93	Parameter	 
>94	Identifier	nrhs
>95	ParameterType	int
>96	Parameter	 
>97	Identifier	plhs
>98	ParameterType	mxArray * [ ]
>99	Parameter	 
>100	Identifier	nlhs
>101	ParameterType	int
>102	ReturnType	void
>103	CompoundStatement	 
>104	ExpressionStatement	 
>105	CallExpression	drwnCodeProfiler 
>106	ArgumentList	 
>107	Callee	drwnCodeProfiler 
>108	Identifier	drwnCodeProfiler 
>109	ExpressionStatement	 
>110	CallExpression	drwnCodeProfiler 
>111	ArgumentList	drwnCodeProfiler 
>112	Argument	drwnCodeProfiler 
>113	CallExpression	drwnCodeProfiler 
>114	ArgumentList	\"mex\"
>115	Argument	\"mex\"
>116	PrimaryExpression	\"mex\"
>117	Callee	drwnCodeProfiler 
>118	Identifier	drwnCodeProfiler 
>119	Callee	drwnCodeProfiler 
>120	Identifier	drwnCodeProfiler 
>121	IfStatement	if ( nlhs == 1 )
>122	CompoundStatement	 
>123	ForStatement	for ( int x = 0 ; x < W ; x ++ )
>124	CompoundStatement	 
>125	ForStatement	for ( int y = 0 ; y < H ; y ++ )
>126	CompoundStatement	 
>127	ExpressionStatement	 
>128	AssignmentExpr	* px ++ = ( double ) instance . pixelLabels ( y , x ) + 1
>129	AdditiveExpression	( double ) instance . pixelLabels ( y , x ) + 1
>130	PrimaryExpression	1
>131	CastExpression	( double ) instance . pixelLabels ( y , x )
>132	CallExpression	instance . pixelLabels ( y , x )
>133	ArgumentList	y
>134	Argument	x
>135	Identifier	x
>136	Argument	y
>137	Identifier	y
>138	Callee	instance . pixelLabels
>139	MemberAccess	instance . pixelLabels
>140	Identifier	pixelLabels
>141	Identifier	instance
>142	CastTarget	double
>143	UnaryOp	* px ++
>144	IncDecOp	px ++
>145	IncDec	++
>146	Identifier	px
>147	UnaryOperator	*
>148	IncDecOp	 
>149	IncDec	++
>150	Identifier	y
>151	Condition	 
>152	RelationalExpression	y < H
>153	Identifier	H
>154	Identifier	y
>155	ForInit	 
>156	IdentifierDeclStatement	int y = 0 ;
>157	IdentifierDecl	y = 0
>158	AssignmentExpr	y = 0
>159	PrimaryExpression	0
>160	Identifier	y
>161	Identifier	y
>162	IdentifierDeclType	int
>163	IncDecOp	 
>164	IncDec	++
>165	Identifier	x
>166	Condition	 
>167	RelationalExpression	x < W
>168	Identifier	W
>169	Identifier	x
>170	ForInit	 
>171	IdentifierDeclStatement	int x = 0 ;
>172	IdentifierDecl	x = 0
>173	AssignmentExpr	x = 0
>174	PrimaryExpression	0
>175	Identifier	x
>176	Identifier	x
>177	IdentifierDeclType	int
>178	IdentifierDeclStatement	 
>179	IdentifierDecl	* px = mxGetPr ( plhs [ 0 ] )
>180	AssignmentExpr	* px = mxGetPr ( plhs [ 0 ] )
>181	CallExpression	mxGetPr ( plhs [ 0 ] )
>182	ArgumentList	plhs [ 0 ]
>183	Argument	plhs [ 0 ]
>184	ArrayIndexing	plhs [ 0 ]
>185	PrimaryExpression	0
>186	Identifier	plhs
>187	Callee	mxGetPr
>188	Identifier	mxGetPr
>189	Identifier	px
>190	Identifier	px
>191	IdentifierDeclType	double *
>192	ExpressionStatement	 
>193	AssignmentExpr	plhs [ 0 ] = mxCreateDoubleMatrix ( H , W , mxREAL )
>194	CallExpression	mxCreateDoubleMatrix ( H , W , mxREAL )
>195	ArgumentList	H
>196	Argument	mxREAL
>197	Identifier	mxREAL
>198	Argument	W
>199	Identifier	W
>200	Argument	H
>201	Identifier	H
>202	Callee	mxCreateDoubleMatrix
>203	Identifier	mxCreateDoubleMatrix
>204	ArrayIndexing	plhs [ 0 ]
>205	PrimaryExpression	0
>206	Identifier	plhs
>207	Condition	 
>208	EqualityExpression	nlhs == 1
>209	PrimaryExpression	1
>210	Identifier	nlhs
>211	ExpressionStatement	 
>212	CallExpression	inf . alphaExpansion ( & instance , lambda_p , lambda_h )
>213	ArgumentList	& instance
>214	Argument	lambda_h
>215	Identifier	lambda_h
>216	Argument	lambda_p
>217	Identifier	lambda_p
>218	Argument	& instance
>219	UnaryOp	& instance
>220	Identifier	instance
>221	UnaryOperator	&
>222	Callee	inf . alphaExpansion
>223	MemberAccess	inf . alphaExpansion
>224	Identifier	alphaExpansion
>225	Identifier	inf
>226	IdentifierDeclStatement	 
>227	IdentifierDecl	inf
>228	Identifier	inf
>229	IdentifierDeclType	drwnRobustPottsCRFInference
>230	ExpressionStatement	 
>231	CallExpression	DRWN_ASSERT_MSG ( lambda_h >= 0.0 , \"lambda_H must be non-negative\" )
>232	ArgumentList	lambda_h >= 0.0
>233	Argument	\"lambda_H must be non-negative\"
>234	PrimaryExpression	\"lambda_H must be non-negative\"
>235	Argument	lambda_h >= 0.0
>236	RelationalExpression	lambda_h >= 0.0
>237	PrimaryExpression	0.0
>238	Identifier	lambda_h
>239	Callee	DRWN_ASSERT_MSG
>240	Identifier	DRWN_ASSERT_MSG
>241	IdentifierDeclStatement	 
>242	IdentifierDecl	lambda_h = ( nrhs < 5 ) ? 0.0 
>243	AssignmentExpr	lambda_h = ( nrhs < 5 ) ? 0.0 
>244	ConditionalExpression	( nrhs < 5 ) ? 0.0 
>245	CallExpression	mxGetScalar ( prhs [ 4 ] )
>246	ArgumentList	prhs [ 4 ]
>247	Argument	prhs [ 4 ]
>248	ArrayIndexing	prhs [ 4 ]
>249	PrimaryExpression	4
>250	Identifier	prhs
>251	Callee	mxGetScalar
>252	Identifier	mxGetScalar
>253	PrimaryExpression	0.0
>254	Condition	nrhs < 5
>255	RelationalExpression	nrhs < 5
>256	PrimaryExpression	5
>257	Identifier	nrhs
>258	Identifier	lambda_h
>259	Identifier	lambda_h
>260	IdentifierDeclType	const double
>261	IfStatement	if ( nrhs >= 5 )
>262	CompoundStatement	 
>263	ForStatement	for ( int k = 0 ; k < regions . size ( ) ; k ++ )
>264	CompoundStatement	 
>265	ExpressionStatement	 
>266	CallExpression	instance . superpixels . addSuperpixels ( seg )
>267	ArgumentList	seg
>268	Argument	seg
>269	Identifier	seg
>270	Callee	instance . superpixels . addSuperpixels
>271	MemberAccess	instance . superpixels . addSuperpixels
>272	Identifier	addSuperpixels
>273	MemberAccess	instance . superpixels
>274	Identifier	superpixels
>275	Identifier	instance
>276	ForStatement	for ( int y = 0 ; y < H ; y ++ )
>277	CompoundStatement	 
>278	ForStatement	for ( int x = 0 ; x < W ; x ++ )
>279	CompoundStatement	 
>280	ExpressionStatement	 
>281	AssignmentExpr	seg . at < int > ( y , x ) = regions [ k ] ( y , x )
>282	CallExpression	regions [ k ] ( y , x )
>283	ArgumentList	y
>284	Argument	x
>285	Identifier	x
>286	Argument	y
>287	Identifier	y
>288	Callee	regions [ k ]
>289	ArrayIndexing	regions [ k ]
>290	Identifier	k
>291	Identifier	regions
>292	RelationalExpression	seg . at < int > ( y , x )
>293	RelationalExpression	int > ( y , x )
>294	Expression	y , x
>295	Identifier	x
>296	Identifier	y
>297	Identifier	int
>298	MemberAccess	seg . at
>299	Identifier	at
>300	Identifier	seg
>301	IncDecOp	 
>302	IncDec	++
>303	Identifier	x
>304	Condition	 
>305	RelationalExpression	x < W
>306	Identifier	W
>307	Identifier	x
>308	ForInit	 
>309	IdentifierDeclStatement	int x = 0 ;
>310	IdentifierDecl	x = 0
>311	AssignmentExpr	x = 0
>312	PrimaryExpression	0
>313	Identifier	x
>314	Identifier	x
>315	IdentifierDeclType	int
>316	IncDecOp	 
>317	IncDec	++
>318	Identifier	y
>319	Condition	 
>320	RelationalExpression	y < H
>321	Identifier	H
>322	Identifier	y
>323	ForInit	 
>324	IdentifierDeclStatement	int y = 0 ;
>325	IdentifierDecl	y = 0
>326	AssignmentExpr	y = 0
>327	PrimaryExpression	0
>328	Identifier	y
>329	Identifier	y
>330	IdentifierDeclType	int
>331	IdentifierDeclStatement	 
>332	IdentifierDecl	seg ( H , W , CV_32SC1 )
>333	Expression	H , W , CV_32SC1
>334	Expression	W , CV_32SC1
>335	Identifier	CV_32SC1
>336	Identifier	W
>337	Identifier	H
>338	Identifier	seg
>339	IdentifierDeclType	cv 
>340	IncDecOp	 
>341	IncDec	++
>342	Identifier	k
>343	Condition	 
>344	RelationalExpression	k < regions . size ( )
>345	CallExpression	regions . size ( )
>346	ArgumentList	 
>347	Callee	regions . size
>348	MemberAccess	regions . size
>349	Identifier	size
>350	Identifier	regions
>351	Identifier	k
>352	ForInit	 
>353	IdentifierDeclStatement	int k = 0 ;
>354	IdentifierDecl	k = 0
>355	AssignmentExpr	k = 0
>356	PrimaryExpression	0
>357	Identifier	k
>358	Identifier	k
>359	IdentifierDeclType	int
>360	ExpressionStatement	 
>361	CallExpression	drwnMatlabUtils 
>362	ArgumentList	prhs [ 3 ]
>363	Argument	regions
>364	Identifier	regions
>365	Argument	prhs [ 3 ]
>366	ArrayIndexing	prhs [ 3 ]
>367	PrimaryExpression	3
>368	Identifier	prhs
>369	Callee	drwnMatlabUtils 
>370	Identifier	drwnMatlabUtils 
>371	IdentifierDeclStatement	 
>372	IdentifierDecl	regions
>373	Identifier	regions
>374	IdentifierDeclType	vector < MatrixXd >
>375	Condition	 
>376	RelationalExpression	nrhs >= 5
>377	PrimaryExpression	5
>378	Identifier	nrhs
>379	ExpressionStatement	 
>380	CallExpression	DRWN_ASSERT_MSG ( lambda_p >= 0.0 , \"lambda_P must be non-negative\" )
>381	ArgumentList	lambda_p >= 0.0
>382	Argument	\"lambda_P must be non-negative\"
>383	PrimaryExpression	\"lambda_P must be non-negative\"
>384	Argument	lambda_p >= 0.0
>385	RelationalExpression	lambda_p >= 0.0
>386	PrimaryExpression	0.0
>387	Identifier	lambda_p
>388	Callee	DRWN_ASSERT_MSG
>389	Identifier	DRWN_ASSERT_MSG
>390	IdentifierDeclStatement	 
>391	IdentifierDecl	lambda_p = mxGetScalar ( prhs [ 2 ] )
>392	AssignmentExpr	lambda_p = mxGetScalar ( prhs [ 2 ] )
>393	CallExpression	mxGetScalar ( prhs [ 2 ] )
>394	ArgumentList	prhs [ 2 ]
>395	Argument	prhs [ 2 ]
>396	ArrayIndexing	prhs [ 2 ]
>397	PrimaryExpression	2
>398	Identifier	prhs
>399	Callee	mxGetScalar
>400	Identifier	mxGetScalar
>401	Identifier	lambda_p
>402	Identifier	lambda_p
>403	IdentifierDeclType	const double
>404	ForStatement	for ( int l = 0 ; l < L ; l ++ )
>405	CompoundStatement	 
>406	ForStatement	for ( int y = 0 ; y < H ; y ++ )
>407	CompoundStatement	 
>408	ForStatement	for ( int x = 0 ; x < W ; x ++ )
>409	CompoundStatement	 
>410	ExpressionStatement	 
>411	AssignmentExpr	instance . unaries [ instance . pixel2Indx ( x , y ) ] [ l ] = unary [ l ] ( y , x )
>412	CallExpression	unary [ l ] ( y , x )
>413	ArgumentList	y
>414	Argument	x
>415	Identifier	x
>416	Argument	y
>417	Identifier	y
>418	Callee	unary [ l ]
>419	ArrayIndexing	unary [ l ]
>420	Identifier	l
>421	Identifier	unary
>422	ArrayIndexing	instance . unaries [ instance . pixel2Indx ( x , y ) ] [ l ]
>423	Identifier	l
>424	ArrayIndexing	instance . unaries [ instance . pixel2Indx ( x , y ) ]
>425	CallExpression	instance . pixel2Indx ( x , y )
>426	ArgumentList	x
>427	Argument	y
>428	Identifier	y
>429	Argument	x
>430	Identifier	x
>431	Callee	instance . pixel2Indx
>432	MemberAccess	instance . pixel2Indx
>433	Identifier	pixel2Indx
>434	Identifier	instance
>435	MemberAccess	instance . unaries
>436	Identifier	unaries
>437	Identifier	instance
>438	IncDecOp	 
>439	IncDec	++
>440	Identifier	x
>441	Condition	 
>442	RelationalExpression	x < W
>443	Identifier	W
>444	Identifier	x
>445	ForInit	 
>446	IdentifierDeclStatement	int x = 0 ;
>447	IdentifierDecl	x = 0
>448	AssignmentExpr	x = 0
>449	PrimaryExpression	0
>450	Identifier	x
>451	Identifier	x
>452	IdentifierDeclType	int
>453	IncDecOp	 
>454	IncDec	++
>455	Identifier	y
>456	Condition	 
>457	RelationalExpression	y < H
>458	Identifier	H
>459	Identifier	y
>460	ForInit	 
>461	IdentifierDeclStatement	int y = 0 ;
>462	IdentifierDecl	y = 0
>463	AssignmentExpr	y = 0
>464	PrimaryExpression	0
>465	Identifier	y
>466	Identifier	y
>467	IdentifierDeclType	int
>468	IncDecOp	 
>469	IncDec	++
>470	Identifier	l
>471	Condition	 
>472	RelationalExpression	l < L
>473	Identifier	L
>474	Identifier	l
>475	ForInit	 
>476	IdentifierDeclStatement	int l = 0 ;
>477	IdentifierDecl	l = 0
>478	AssignmentExpr	l = 0
>479	PrimaryExpression	0
>480	Identifier	l
>481	Identifier	l
>482	IdentifierDeclType	int
>483	ExpressionStatement	 
>484	CallExpression	instance . unaries . resize ( H * W , vector < double > ( L ) )
>485	ArgumentList	H * W
>486	Argument	vector < double > ( L )
>487	RelationalExpression	vector < double > ( L )
>488	RelationalExpression	double > ( L )
>489	Identifier	L
>490	Identifier	double
>491	Identifier	vector
>492	Argument	H * W
>493	MultiplicativeExpression	H * W
>494	Identifier	W
>495	Identifier	H
>496	Callee	instance . unaries . resize
>497	MemberAccess	instance . unaries . resize
>498	Identifier	resize
>499	MemberAccess	instance . unaries
>500	Identifier	unaries
>501	Identifier	instance
>502	ExpressionStatement	 
>503	CallExpression	DRWN_ASSERT_MSG ( ( unary [ 0 ] . rows ( ) == H ) && ( unary [ 0 ] . cols ( ) == W ) , \"unary potentials must match \
>504	ArgumentList	( unary [ 0 ] . rows ( ) == H ) && ( unary [ 0 ] . cols ( ) == W )
>505	Argument	\"unary potentials must match image size \" << H << \"-by-\" << W
>506	ShiftExpression	\"unary potentials must match image size \" << H << \"-by-\" << W
>507	ShiftExpression	H << \"-by-\" << W
>508	ShiftExpression	\"-by-\" << W
>509	Identifier	W
>510	PrimaryExpression	\"-by-\"
>511	Identifier	H
>512	PrimaryExpression	\"unary potentials must match image size \"
>513	Argument	( unary [ 0 ] . rows ( ) == H ) && ( unary [ 0 ] . cols ( ) == W )
>514	AndExpression	( unary [ 0 ] . rows ( ) == H ) && ( unary [ 0 ] . cols ( ) == W )
>515	EqualityExpression	unary [ 0 ] . cols ( ) == W
>516	Identifier	W
>517	CallExpression	unary [ 0 ] . cols ( )
>518	ArgumentList	 
>519	Callee	unary [ 0 ] . cols
>520	MemberAccess	unary [ 0 ] . cols
>521	Identifier	cols
>522	ArrayIndexing	unary [ 0 ]
>523	PrimaryExpression	0
>524	Identifier	unary
>525	EqualityExpression	unary [ 0 ] . rows ( ) == H
>526	Identifier	H
>527	CallExpression	unary [ 0 ] . rows ( )
>528	ArgumentList	 
>529	Callee	unary [ 0 ] . rows
>530	MemberAccess	unary [ 0 ] . rows
>531	Identifier	rows
>532	ArrayIndexing	unary [ 0 ]
>533	PrimaryExpression	0
>534	Identifier	unary
>535	Callee	DRWN_ASSERT_MSG
>536	Identifier	DRWN_ASSERT_MSG
>537	ExpressionStatement	 
>538	CallExpression	DRWN_ASSERT_MSG ( L > 1 , \"invalid number of labels\" )
>539	ArgumentList	L > 1
>540	Argument	\"invalid number of labels\"
>541	PrimaryExpression	\"invalid number of labels\"
>542	Argument	L > 1
>543	RelationalExpression	L > 1
>544	PrimaryExpression	1
>545	Identifier	L
>546	Callee	DRWN_ASSERT_MSG
>547	Identifier	DRWN_ASSERT_MSG
>548	IdentifierDeclStatement	 
>549	IdentifierDecl	L = ( int ) unary . size ( )
>550	AssignmentExpr	L = ( int ) unary . size ( )
>551	CastExpression	( int ) unary . size ( )
>552	CallExpression	unary . size ( )
>553	ArgumentList	 
>554	Callee	unary . size
>555	MemberAccess	unary . size
>556	Identifier	size
>557	Identifier	unary
>558	CastTarget	int
>559	Identifier	L
>560	Identifier	L
>561	IdentifierDeclType	const int
>562	ExpressionStatement	 
>563	CallExpression	drwnMatlabUtils 
>564	ArgumentList	prhs [ 1 ]
>565	Argument	unary
>566	Identifier	unary
>567	Argument	prhs [ 1 ]
>568	ArrayIndexing	prhs [ 1 ]
>569	PrimaryExpression	1
>570	Identifier	prhs
>571	Callee	drwnMatlabUtils 
>572	Identifier	drwnMatlabUtils 
>573	IdentifierDeclStatement	 
>574	IdentifierDecl	unary
>575	Identifier	unary
>576	IdentifierDeclType	vector < MatrixXd >
>577	IdentifierDeclStatement	 
>578	IdentifierDecl	instance ( image )
>579	Identifier	image
>580	Identifier	instance
>581	IdentifierDeclType	drwnSegImageInstance
>582	IdentifierDeclStatement	 
>583	IdentifierDecl	W = image . cols
>584	AssignmentExpr	W = image . cols
>585	MemberAccess	image . cols
>586	Identifier	cols
>587	Identifier	image
>588	Identifier	W
>589	Identifier	W
>590	IdentifierDeclType	const int
>591	IdentifierDeclStatement	 
>592	IdentifierDecl	H = image . rows
>593	AssignmentExpr	H = image . rows
>594	MemberAccess	image . rows
>595	Identifier	rows
>596	Identifier	image
>597	Identifier	H
>598	Identifier	H
>599	IdentifierDeclType	const int
>600	ExpressionStatement	 
>601	CallExpression	DRWN_ASSERT ( image . data != NULL )
>602	ArgumentList	image . data != NULL
>603	Argument	image . data != NULL
>604	EqualityExpression	image . data != NULL
>605	Identifier	NULL
>606	MemberAccess	image . data
>607	Identifier	data
>608	Identifier	image
>609	Callee	DRWN_ASSERT
>610	Identifier	DRWN_ASSERT
>611	IdentifierDeclStatement	 
>612	IdentifierDecl	image = parseImage ( prhs [ 0 ] )
>613	AssignmentExpr	image = parseImage ( prhs [ 0 ] )
>614	CallExpression	parseImage ( prhs [ 0 ] )
>615	ArgumentList	prhs [ 0 ]
>616	Argument	prhs [ 0 ]
>617	ArrayIndexing	prhs [ 0 ]
>618	PrimaryExpression	0
>619	Identifier	prhs
>620	Callee	parseImage
>621	Identifier	parseImage
>622	Identifier	image
>623	Identifier	image
>624	IdentifierDeclType	cv 
>625	ExpressionStatement	 
>626	CallExpression	drwnCodeProfiler 
>627	ArgumentList	drwnCodeProfiler 
>628	Argument	drwnCodeProfiler 
>629	CallExpression	drwnCodeProfiler 
>630	ArgumentList	\"mex\"
>631	Argument	\"mex\"
>632	PrimaryExpression	\"mex\"
>633	Callee	drwnCodeProfiler 
>634	Identifier	drwnCodeProfiler 
>635	Callee	drwnCodeProfiler 
>636	Identifier	drwnCodeProfiler 
>637	ExpressionStatement	 
>638	CallExpression	drwnMatlabUtils 
>639	ArgumentList	options
>640	Argument	options
>641	Identifier	options
>642	Callee	drwnMatlabUtils 
>643	Identifier	drwnMatlabUtils 
>644	IfStatement	if ( ( nrhs == 4 ) || ( nrhs == 6 ) )
>645	CompoundStatement	 
>646	ExpressionStatement	 
>647	CallExpression	drwnMatlabUtils 
>648	ArgumentList	prhs [ nrhs - 1 ]
>649	Argument	options
>650	Identifier	options
>651	Argument	prhs [ nrhs - 1 ]
>652	ArrayIndexing	prhs [ nrhs - 1 ]
>653	AdditiveExpression	nrhs - 1
>654	PrimaryExpression	1
>655	Identifier	nrhs
>656	Identifier	prhs
>657	Callee	drwnMatlabUtils 
>658	Identifier	drwnMatlabUtils 
>659	Condition	 
>660	OrExpression	( nrhs == 4 ) || ( nrhs == 6 )
>661	EqualityExpression	nrhs == 6
>662	PrimaryExpression	6
>663	Identifier	nrhs
>664	EqualityExpression	nrhs == 4
>665	PrimaryExpression	4
>666	Identifier	nrhs
>667	ExpressionStatement	 
>668	CallExpression	drwnMatlabUtils 
>669	ArgumentList	options
>670	Argument	options
>671	Identifier	options
>672	Callee	drwnMatlabUtils 
>673	Identifier	drwnMatlabUtils 
>674	IdentifierDeclStatement	 
>675	IdentifierDecl	options
>676	Identifier	options
>677	IdentifierDeclType	map < string , string >
>678	IfStatement	if ( ( nrhs != 3 ) && ( nrhs != 4 ) && ( nrhs != 5 ) && ( nrhs != 6 ) )
>679	CompoundStatement	 
>680	ExpressionStatement	 
>681	CallExpression	mexErrMsgTxt ( \"incorrect number of input arguments\" )
>682	ArgumentList	\"incorrect number of input arguments\"
>683	Argument	\"incorrect number of input arguments\"
>684	PrimaryExpression	\"incorrect number of input arguments\"
>685	Callee	mexErrMsgTxt
>686	Identifier	mexErrMsgTxt
>687	ExpressionStatement	 
>688	CallExpression	usage ( )
>689	ArgumentList	 
>690	Callee	usage
>691	Identifier	usage
>692	Condition	 
>693	AndExpression	( nrhs != 3 ) && ( nrhs != 4 ) && ( nrhs != 5 ) && ( nrhs != 6 )
>694	AndExpression	( nrhs != 4 ) && ( nrhs != 5 ) && ( nrhs != 6 )
>695	AndExpression	( nrhs != 5 ) && ( nrhs != 6 )
>696	EqualityExpression	nrhs != 6
>697	PrimaryExpression	6
>698	Identifier	nrhs
>699	EqualityExpression	nrhs != 5
>700	PrimaryExpression	5
>701	Identifier	nrhs
>702	EqualityExpression	nrhs != 4
>703	PrimaryExpression	4
>704	Identifier	nrhs
>705	EqualityExpression	nrhs != 3
>706	PrimaryExpression	3
>707	Identifier	nrhs
>708	ExpressionStatement	 
>709	CallExpression	drwnMatlabUtils 
>710	ArgumentList	 
>711	Callee	drwnMatlabUtils 
>712	Identifier	drwnMatlabUtils 
>775	FunctionDef	parseImage (const mxArray * m)
>776	ParameterList	const mxArray * m
>777	Parameter	 
>778	Identifier	m
>779	ParameterType	const mxArray *
>780	ReturnType	cv 
>781	CompoundStatement	 
>782	ReturnStatement	 
>783	Identifier	img
>784	ForStatement	for ( int c = 0 ; c < img . channels ( ) ; c ++ )
>785	CompoundStatement	 
>786	ForStatement	for ( int x = 0 ; x < W ; x ++ )
>787	CompoundStatement	 
>788	ForStatement	for ( int y = 0 ; y < H ; y ++ )
>789	CompoundStatement	 
>790	ExpressionStatement	 
>791	AssignmentExpr	char > ( y , img . channels ( ) * x + c ) = ( unsigned char ) ( 255 * ( * p ++ ) )
>792	CastExpression	( unsigned char ) ( 255 * ( * p ++ ) )
>793	MultiplicativeExpression	255 * ( * p ++ )
>794	UnaryOp	* p ++
>795	IncDecOp	p ++
>796	IncDec	++
>797	Identifier	p
>798	UnaryOperator	*
>799	PrimaryExpression	255
>800	CastTarget	unsigned char
>801	RelationalExpression	char > ( y , img . channels ( ) * x + c )
>802	Expression	y , img . channels ( ) * x + c
>803	AdditiveExpression	img . channels ( ) * x + c
>804	Identifier	c
>805	MultiplicativeExpression	img . channels ( ) * x
>806	Identifier	x
>807	CallExpression	img . channels ( )
>808	ArgumentList	 
>809	Callee	img . channels
>810	MemberAccess	img . channels
>811	Identifier	channels
>812	Identifier	img
>813	Identifier	y
>814	Identifier	char
>815	Statement	 
>816	Statement	 
>817	Statement	 
>818	Statement	 
>819	Statement	 
>820	IncDecOp	 
>821	IncDec	++
>822	Identifier	y
>823	Condition	 
>824	RelationalExpression	y < H
>825	Identifier	H
>826	Identifier	y
>827	ForInit	 
>828	IdentifierDeclStatement	int y = 0 ;
>829	IdentifierDecl	y = 0
>830	AssignmentExpr	y = 0
>831	PrimaryExpression	0
>832	Identifier	y
>833	Identifier	y
>834	IdentifierDeclType	int
>835	IncDecOp	 
>836	IncDec	++
>837	Identifier	x
>838	Condition	 
>839	RelationalExpression	x < W
>840	Identifier	W
>841	Identifier	x
>842	ForInit	 
>843	IdentifierDeclStatement	int x = 0 ;
>844	IdentifierDecl	x = 0
>845	AssignmentExpr	x = 0
>846	PrimaryExpression	0
>847	Identifier	x
>848	Identifier	x
>849	IdentifierDeclType	int
>850	IncDecOp	 
>851	IncDec	++
>852	Identifier	c
>853	Condition	 
>854	RelationalExpression	c < img . channels ( )
>855	CallExpression	img . channels ( )
>856	ArgumentList	 
>857	Callee	img . channels
>858	MemberAccess	img . channels
>859	Identifier	channels
>860	Identifier	img
>861	Identifier	c
>862	ForInit	 
>863	IdentifierDeclStatement	int c = 0 ;
>864	IdentifierDecl	c = 0
>865	AssignmentExpr	c = 0
>866	PrimaryExpression	0
>867	Identifier	c
>868	Identifier	c
>869	IdentifierDeclType	int
>870	IdentifierDeclStatement	 
>871	IdentifierDecl	* p = mxGetPr ( m )
>872	AssignmentExpr	* p = mxGetPr ( m )
>873	CallExpression	mxGetPr ( m )
>874	ArgumentList	m
>875	Argument	m
>876	Identifier	m
>877	Callee	mxGetPr
>878	Identifier	mxGetPr
>879	Identifier	p
>880	Identifier	p
>881	IdentifierDeclType	const double *
>882	IdentifierDeclStatement	 
>883	IdentifierDecl	img = ( dims == 2 ? cv 
>884	AssignmentExpr	img = ( dims == 2 ? cv 
>885	ConditionalExpression	dims == 2 ? cv 
>886	CallExpression	cv 
>887	ArgumentList	H
>888	Argument	CV_8UC3
>889	Identifier	CV_8UC3
>890	Argument	W
>891	Identifier	W
>892	Argument	H
>893	Identifier	H
>894	Callee	cv 
>895	Identifier	cv 
>896	CallExpression	cv 
>897	ArgumentList	H
>898	Argument	CV_8UC1
>899	Identifier	CV_8UC1
>900	Argument	W
>901	Identifier	W
>902	Argument	H
>903	Identifier	H
>904	Callee	cv 
>905	Identifier	cv 
>906	Condition	dims == 2
>907	EqualityExpression	dims == 2
>908	PrimaryExpression	2
>909	Identifier	dims
>910	Identifier	img
>911	Identifier	img
>912	IdentifierDeclType	cv 
>913	IdentifierDeclStatement	 
>914	IdentifierDecl	W = mxGetDimensions ( m ) [ 1 ]
>915	AssignmentExpr	W = mxGetDimensions ( m ) [ 1 ]
>916	ArrayIndexing	mxGetDimensions ( m ) [ 1 ]
>917	PrimaryExpression	1
>918	CallExpression	mxGetDimensions ( m )
>919	ArgumentList	m
>920	Argument	m
>921	Identifier	m
>922	Callee	mxGetDimensions
>923	Identifier	mxGetDimensions
>924	Identifier	W
>925	Identifier	W
>926	IdentifierDeclType	const int
>927	IdentifierDeclStatement	 
>928	IdentifierDecl	H = mxGetDimensions ( m ) [ 0 ]
>929	AssignmentExpr	H = mxGetDimensions ( m ) [ 0 ]
>930	ArrayIndexing	mxGetDimensions ( m ) [ 0 ]
>931	PrimaryExpression	0
>932	CallExpression	mxGetDimensions ( m )
>933	ArgumentList	m
>934	Argument	m
>935	Identifier	m
>936	Callee	mxGetDimensions
>937	Identifier	mxGetDimensions
>938	Identifier	H
>939	Identifier	H
>940	IdentifierDeclType	const int
>941	ExpressionStatement	 
>942	CallExpression	DRWN_ASSERT_MSG ( ( dims == 2 ) || ( ( dims == 3 ) && ( mxGetDimensions ( m ) [ 2 ] == 3 ) ) , \"image must be H-by-W \
>943	ArgumentList	( dims == 2 ) || ( ( dims == 3 ) && ( mxGetDimensions ( m ) [ 2 ] == 3 ) )
>944	Argument	\"image must be H-by-W or H-by-W-by-3\"
>945	PrimaryExpression	\"image must be H-by-W or H-by-W-by-3\"
>946	Argument	( dims == 2 ) || ( ( dims == 3 ) && ( mxGetDimensions ( m ) [ 2 ] == 3 ) )
>947	OrExpression	( dims == 2 ) || ( ( dims == 3 ) && ( mxGetDimensions ( m ) [ 2 ] == 3 ) )
>948	AndExpression	( dims == 3 ) && ( mxGetDimensions ( m ) [ 2 ] == 3 )
>949	EqualityExpression	mxGetDimensions ( m ) [ 2 ] == 3
>950	PrimaryExpression	3
>951	ArrayIndexing	mxGetDimensions ( m ) [ 2 ]
>952	PrimaryExpression	2
>953	CallExpression	mxGetDimensions ( m )
>954	ArgumentList	m
>955	Argument	m
>956	Identifier	m
>957	Callee	mxGetDimensions
>958	Identifier	mxGetDimensions
>959	EqualityExpression	dims == 3
>960	PrimaryExpression	3
>961	Identifier	dims
>962	EqualityExpression	dims == 2
>963	PrimaryExpression	2
>964	Identifier	dims
>965	Callee	DRWN_ASSERT_MSG
>966	Identifier	DRWN_ASSERT_MSG
>967	IdentifierDeclStatement	 
>968	IdentifierDecl	dims = mxGetNumberOfDimensions ( m )
>969	AssignmentExpr	dims = mxGetNumberOfDimensions ( m )
>970	CallExpression	mxGetNumberOfDimensions ( m )
>971	ArgumentList	m
>972	Argument	m
>973	Identifier	m
>974	Callee	mxGetNumberOfDimensions
>975	Identifier	mxGetNumberOfDimensions
>976	Identifier	dims
>977	Identifier	dims
>978	IdentifierDeclType	mwSize
>979	ExpressionStatement	 
>980	CallExpression	DRWN_ASSERT ( ( m != NULL ) && ( mxIsNumeric ( m ) ) )
>981	ArgumentList	( m != NULL ) && ( mxIsNumeric ( m ) )
>982	Argument	( m != NULL ) && ( mxIsNumeric ( m ) )
>983	AndExpression	( m != NULL ) && ( mxIsNumeric ( m ) )
>984	CallExpression	mxIsNumeric ( m )
>985	ArgumentList	m
>986	Argument	m
>987	Identifier	m
>988	Callee	mxIsNumeric
>989	Identifier	mxIsNumeric
>990	EqualityExpression	m != NULL
>991	Identifier	NULL
>992	Identifier	m
>993	Callee	DRWN_ASSERT
>994	Identifier	DRWN_ASSERT
<5=8,7,6
<8=77,70,63,56,49,42,35,28,21,16,9
<9=10
<10=14,11
<11=12
<12=13
<14=15
<16=17
<17=19,18
<19=20
<21=22
<22=26,23
<23=24
<24=25
<26=27
<28=29
<29=33,30
<30=31
<31=32
<33=34
<35=36
<36=40,37
<37=38
<38=39
<40=41
<42=43
<43=47,44
<44=45
<45=46
<47=48
<49=50
<50=54,51
<51=52
<52=53
<54=55
<56=57
<57=61,58
<58=59
<59=60
<61=62
<63=64
<64=68,65
<65=66
<66=67
<68=69
<70=71
<71=75,72
<72=73
<73=74
<75=76
<77=78
<78=82,79
<79=80
<80=81
<82=83
<88=103,102,89
<89=99,96,93,90
<90=92,91
<93=95,94
<96=98,97
<99=101,100
<103=708,678,674,667,644,637,625,611,600,591,582,577,573,562,548,537,502,483,404,390,379,261,241,230,226,211,121,109,104
<104=105
<105=107,106
<107=108
<109=110
<110=119,111
<111=112
<112=113
<113=117,114
<114=115
<115=116
<117=118
<119=120
<121=207,122
<122=192,178,123
<123=170,166,163,124
<124=125
<125=155,151,148,126
<126=127
<127=128
<128=143,129
<129=131,130
<131=142,132
<132=138,133
<133=136,134
<134=135
<136=137
<138=139
<139=141,140
<143=147,144
<144=146,145
<148=150,149
<151=152
<152=154,153
<155=156
<156=157
<157=162,161,158
<158=160,159
<163=165,164
<166=167
<167=169,168
<170=171
<171=172
<172=177,176,173
<173=175,174
<178=179
<179=191,190,180
<180=189,181
<181=187,182
<182=183
<183=184
<184=186,185
<187=188
<192=193
<193=204,194
<194=202,195
<195=200,198,196
<196=197
<198=199
<200=201
<202=203
<204=206,205
<207=208
<208=210,209
<211=212
<212=222,213
<213=218,216,214
<214=215
<216=217
<218=219
<219=221,220
<222=223
<223=225,224
<226=227
<227=229,228
<230=231
<231=239,232
<232=235,233
<233=234
<235=236
<236=238,237
<239=240
<241=242
<242=260,259,243
<243=258,244
<244=254,253,245
<245=251,246
<246=247
<247=248
<248=250,249
<251=252
<254=255
<255=257,256
<261=375,262
<262=371,360,263
<263=352,343,340,264
<264=331,276,265
<265=266
<266=270,267
<267=268
<268=269
<270=271
<271=273,272
<273=275,274
<276=323,319,316,277
<277=278
<278=308,304,301,279
<279=280
<280=281
<281=292,282
<282=288,283
<283=286,284
<284=285
<286=287
<288=289
<289=291,290
<292=298,293
<293=297,294
<294=296,295
<298=300,299
<301=303,302
<304=305
<305=307,306
<308=309
<309=310
<310=315,314,311
<311=313,312
<316=318,317
<319=320
<320=322,321
<323=324
<324=325
<325=330,329,326
<326=328,327
<331=332
<332=339,338,333
<333=337,334
<334=336,335
<340=342,341
<343=344
<344=351,345
<345=347,346
<347=348
<348=350,349
<352=353
<353=354
<354=359,358,355
<355=357,356
<360=361
<361=369,362
<362=365,363
<363=364
<365=366
<366=368,367
<369=370
<371=372
<372=374,373
<375=376
<376=378,377
<379=380
<380=388,381
<381=384,382
<382=383
<384=385
<385=387,386
<388=389
<390=391
<391=403,402,392
<392=401,393
<393=399,394
<394=395
<395=396
<396=398,397
<399=400
<404=475,471,468,405
<405=406
<406=460,456,453,407
<407=408
<408=445,441,438,409
<409=410
<410=411
<411=422,412
<412=418,413
<413=416,414
<414=415
<416=417
<418=419
<419=421,420
<422=424,423
<424=435,425
<425=431,426
<426=429,427
<427=428
<429=430
<431=432
<432=434,433
<435=437,436
<438=440,439
<441=442
<442=444,443
<445=446
<446=447
<447=452,451,448
<448=450,449
<453=455,454
<456=457
<457=459,458
<460=461
<461=462
<462=467,466,463
<463=465,464
<468=470,469
<471=472
<472=474,473
<475=476
<476=477
<477=482,481,478
<478=480,479
<483=484
<484=496,485
<485=492,486
<486=487
<487=491,488
<488=490,489
<492=493
<493=495,494
<496=497
<497=499,498
<499=501,500
<502=503
<503=535,504
<504=513,505
<505=506
<506=512,507
<507=511,508
<508=510,509
<513=514
<514=525,515
<515=517,516
<517=519,518
<519=520
<520=522,521
<522=524,523
<525=527,526
<527=529,528
<529=530
<530=532,531
<532=534,533
<535=536
<537=538
<538=546,539
<539=542,540
<540=541
<542=543
<543=545,544
<546=547
<548=549
<549=561,560,550
<550=559,551
<551=558,552
<552=554,553
<554=555
<555=557,556
<562=563
<563=571,564
<564=567,565
<565=566
<567=568
<568=570,569
<571=572
<573=574
<574=576,575
<577=578
<578=581,580,579
<582=583
<583=590,589,584
<584=588,585
<585=587,586
<591=592
<592=599,598,593
<593=597,594
<594=596,595
<600=601
<601=609,602
<602=603
<603=604
<604=606,605
<606=608,607
<609=610
<611=612
<612=624,623,613
<613=622,614
<614=620,615
<615=616
<616=617
<617=619,618
<620=621
<625=626
<626=635,627
<627=628
<628=629
<629=633,630
<630=631
<631=632
<633=634
<635=636
<637=638
<638=642,639
<639=640
<640=641
<642=643
<644=659,645
<645=646
<646=647
<647=657,648
<648=651,649
<649=650
<651=652
<652=656,653
<653=655,654
<657=658
<659=660
<660=664,661
<661=663,662
<664=666,665
<667=668
<668=672,669
<669=670
<670=671
<672=673
<674=675
<675=677,676
<678=692,679
<679=687,680
<680=681
<681=685,682
<682=683
<683=684
<685=686
<687=688
<688=690,689
<690=691
<692=693
<693=705,694
<694=702,695
<695=699,696
<696=698,697
<699=701,700
<702=704,703
<705=707,706
<708=709
<709=711,710
<711=712
<775=781,780,776
<776=777
<777=779,778
<781=979,967,941,927,913,882,870,784,782
<782=783
<784=862,853,850,785
<785=786
<786=842,838,835,787
<787=788
<788=827,823,820,789
<789=819,818,817,816,815,790
<790=791
<791=801,792
<792=800,793
<793=799,794
<794=798,795
<795=797,796
<801=814,802
<802=813,803
<803=805,804
<805=807,806
<807=809,808
<809=810
<810=812,811
<820=822,821
<823=824
<824=826,825
<827=828
<828=829
<829=834,833,830
<830=832,831
<835=837,836
<838=839
<839=841,840
<842=843
<843=844
<844=849,848,845
<845=847,846
<850=852,851
<853=854
<854=861,855
<855=857,856
<857=858
<858=860,859
<862=863
<863=864
<864=869,868,865
<865=867,866
<870=871
<871=881,880,872
<872=879,873
<873=877,874
<874=875
<875=876
<877=878
<882=883
<883=912,911,884
<884=910,885
<885=906,896,886
<886=894,887
<887=892,890,888
<888=889
<890=891
<892=893
<894=895
<896=904,897
<897=902,900,898
<898=899
<900=901
<902=903
<904=905
<906=907
<907=909,908
<913=914
<914=926,925,915
<915=924,916
<916=918,917
<918=922,919
<919=920
<920=921
<922=923
<927=928
<928=940,939,929
<929=938,930
<930=932,931
<932=936,933
<933=934
<934=935
<936=937
<941=942
<942=965,943
<943=946,944
<944=945
<946=947
<947=962,948
<948=959,949
<949=951,950
<951=953,952
<953=957,954
<954=955
<955=956
<957=958
<959=961,960
<962=964,963
<965=966
<967=968
<968=978,977,969
<969=976,970
<970=974,971
<971=972
<972=973
<974=975
<979=980
<980=993,981
<981=982
<982=983
<983=990,984
<984=988,985
<985=986
<986=987
<988=989
<990=992,991
<993=994
