>3	FunctionDef	usage ()
>4	ParameterList	 
>5	ReturnType	void
>6	CompoundStatement	 
>7	ExpressionStatement	 
>8	CallExpression	mexPrintf ( \"\n\" )
>9	ArgumentList	\"\n\"
>10	Argument	\"\n\"
>11	PrimaryExpression	\"\n\"
>12	Callee	mexPrintf
>13	Identifier	mexPrintf
>14	ExpressionStatement	 
>15	CallExpression	mexPrintf ( \"  method  
>16	ArgumentList	\"  method  
>17	Argument	\"  method  
>18	PrimaryExpression	\"  method  
>19	Callee	mexPrintf
>20	Identifier	mexPrintf
>21	ExpressionStatement	 
>22	CallExpression	drwnMatlabUtils 
>23	ArgumentList	 
>24	Callee	drwnMatlabUtils 
>25	Identifier	drwnMatlabUtils 
>26	ExpressionStatement	 
>27	CallExpression	mexPrintf ( \"OPTIONS
>28	ArgumentList	\"OPTIONS
>29	Argument	\"OPTIONS
>30	PrimaryExpression	\"OPTIONS
>31	Callee	mexPrintf
>32	Identifier	mexPrintf
>33	ExpressionStatement	 
>34	CallExpression	mexPrintf ( \"  edges    
>35	ArgumentList	\"  edges    
>36	Argument	\"  edges    
>37	PrimaryExpression	\"  edges    
>38	Callee	mexPrintf
>39	Identifier	mexPrintf
>40	ExpressionStatement	 
>41	CallExpression	mexPrintf ( \"  factors  
>42	ArgumentList	\"  factors  
>43	Argument	\"  factors  
>44	PrimaryExpression	\"  factors  
>45	Callee	mexPrintf
>46	Identifier	mexPrintf
>47	ExpressionStatement	 
>48	CallExpression	mexPrintf ( \"  universe 
>49	ArgumentList	\"  universe 
>50	Argument	\"  universe 
>51	PrimaryExpression	\"  universe 
>52	Callee	mexPrintf
>53	Identifier	mexPrintf
>54	ExpressionStatement	 
>55	CallExpression	mexPrintf ( \"USAGE
>56	ArgumentList	\"USAGE
>57	Argument	\"USAGE
>58	PrimaryExpression	\"USAGE
>59	Callee	mexPrintf
>60	Identifier	mexPrintf
>61	ExpressionStatement	 
>62	CallExpression	mexPrintf ( \"\n\" )
>63	ArgumentList	\"\n\"
>64	Argument	\"\n\"
>65	PrimaryExpression	\"\n\"
>66	Callee	mexPrintf
>67	Identifier	mexPrintf
>68	ExpressionStatement	 
>69	CallExpression	mexPrintf ( DRWN_USAGE_HEADER )
>70	ArgumentList	DRWN_USAGE_HEADER
>71	Argument	DRWN_USAGE_HEADER
>72	Identifier	DRWN_USAGE_HEADER
>73	Callee	mexPrintf
>74	Identifier	mexPrintf
>79	FunctionDef	mexFunction (int nlhs , mxArray * plhs [ ] , int nrhs , const mxArray * prhs [ ])
>80	ParameterList	int nlhs , mxArray * plhs [ ] , int nrhs , const mxArray * prhs [ ]
>81	Parameter	 
>82	Identifier	prhs
>83	ParameterType	const mxArray * [ ]
>84	Parameter	 
>85	Identifier	nrhs
>86	ParameterType	int
>87	Parameter	 
>88	Identifier	plhs
>89	ParameterType	mxArray * [ ]
>90	Parameter	 
>91	Identifier	nlhs
>92	ParameterType	int
>93	ReturnType	void
>94	CompoundStatement	 
>95	ExpressionStatement	 
>96	CallExpression	drwnCodeProfiler 
>97	ArgumentList	 
>98	Callee	drwnCodeProfiler 
>99	Identifier	drwnCodeProfiler 
>100	ExpressionStatement	 
>101	CallExpression	drwnCodeProfiler 
>102	ArgumentList	drwnCodeProfiler 
>103	Argument	drwnCodeProfiler 
>104	CallExpression	drwnCodeProfiler 
>105	ArgumentList	\"mex\"
>106	Argument	\"mex\"
>107	PrimaryExpression	\"mex\"
>108	Callee	drwnCodeProfiler 
>109	Identifier	drwnCodeProfiler 
>110	Callee	drwnCodeProfiler 
>111	Identifier	drwnCodeProfiler 
>112	IfStatement	if ( nlhs == 1 )
>113	CompoundStatement	 
>114	ForStatement	for ( unsigned i = 0 ; i < assignment . size ( ) ; i ++ )
>115	CompoundStatement	 
>116	ExpressionStatement	 
>117	AssignmentExpr	p [ i ] = ( double ) assignment [ i ]
>118	CastExpression	( double ) assignment [ i ]
>119	ArrayIndexing	assignment [ i ]
>120	Identifier	i
>121	Identifier	assignment
>122	CastTarget	double
>123	ArrayIndexing	p [ i ]
>124	Identifier	i
>125	Identifier	p
>126	IncDecOp	 
>127	IncDec	++
>128	Identifier	i
>129	Condition	 
>130	RelationalExpression	i < assignment . size ( )
>131	CallExpression	assignment . size ( )
>132	ArgumentList	 
>133	Callee	assignment . size
>134	MemberAccess	assignment . size
>135	Identifier	size
>136	Identifier	assignment
>137	Identifier	i
>138	ForInit	 
>139	IdentifierDeclStatement	unsigned i = 0 ;
>140	IdentifierDecl	i = 0
>141	AssignmentExpr	i = 0
>142	PrimaryExpression	0
>143	Identifier	i
>144	Identifier	i
>145	IdentifierDeclType	unsigned
>146	IdentifierDeclStatement	 
>147	IdentifierDecl	* p = mxGetPr ( plhs [ 0 ] )
>148	AssignmentExpr	* p = mxGetPr ( plhs [ 0 ] )
>149	CallExpression	mxGetPr ( plhs [ 0 ] )
>150	ArgumentList	plhs [ 0 ]
>151	Argument	plhs [ 0 ]
>152	ArrayIndexing	plhs [ 0 ]
>153	PrimaryExpression	0
>154	Identifier	plhs
>155	Callee	mxGetPr
>156	Identifier	mxGetPr
>157	Identifier	p
>158	Identifier	p
>159	IdentifierDeclType	double *
>160	ExpressionStatement	 
>161	AssignmentExpr	plhs [ 0 ] = mxCreateDoubleMatrix ( assignment . size ( ) , 1 , mxREAL )
>162	CallExpression	mxCreateDoubleMatrix ( assignment . size ( ) , 1 , mxREAL )
>163	ArgumentList	assignment . size ( )
>164	Argument	mxREAL
>165	Identifier	mxREAL
>166	Argument	1
>167	PrimaryExpression	1
>168	Argument	assignment . size ( )
>169	CallExpression	assignment . size ( )
>170	ArgumentList	 
>171	Callee	assignment . size
>172	MemberAccess	assignment . size
>173	Identifier	size
>174	Identifier	assignment
>175	Callee	mxCreateDoubleMatrix
>176	Identifier	mxCreateDoubleMatrix
>177	ArrayIndexing	plhs [ 0 ]
>178	PrimaryExpression	0
>179	Identifier	plhs
>180	Condition	 
>181	EqualityExpression	nlhs == 1
>182	PrimaryExpression	1
>183	Identifier	nlhs
>184	ExpressionStatement	 
>185	Identifier	inf
>186	Statement	 
>187	ExpressionStatement	 
>188	CallExpression	DRWN_ASSERT ( universe -> numVariables ( ) == assignment . size ( ) )
>189	ArgumentList	universe -> numVariables ( ) == assignment . size ( )
>190	Argument	universe -> numVariables ( ) == assignment . size ( )
>191	EqualityExpression	universe -> numVariables ( ) == assignment . size ( )
>192	CallExpression	assignment . size ( )
>193	ArgumentList	 
>194	Callee	assignment . size
>195	MemberAccess	assignment . size
>196	Identifier	size
>197	Identifier	assignment
>198	CallExpression	universe -> numVariables ( )
>199	ArgumentList	 
>200	Callee	universe -> numVariables
>201	PtrMemberAccess	universe -> numVariables
>202	Identifier	numVariables
>203	Identifier	universe
>204	Callee	DRWN_ASSERT
>205	Identifier	DRWN_ASSERT
>206	ExpressionStatement	 
>207	CallExpression	DRWN_LOG_VERBOSE ( \"map assignment is \" << toString ( assignment ) )
>208	ArgumentList	\"map assignment is \" << toString ( assignment )
>209	Argument	\"map assignment is \" << toString ( assignment )
>210	ShiftExpression	\"map assignment is \" << toString ( assignment )
>211	CallExpression	toString ( assignment )
>212	ArgumentList	assignment
>213	Argument	assignment
>214	Identifier	assignment
>215	Callee	toString
>216	Identifier	toString
>217	PrimaryExpression	\"map assignment is \"
>218	Callee	DRWN_LOG_VERBOSE
>219	Identifier	DRWN_LOG_VERBOSE
>220	ExpressionStatement	 
>221	CallExpression	DRWN_LOG_MESSAGE ( \"map assignment has energy \" << e )
>222	ArgumentList	\"map assignment has energy \" << e
>223	Argument	\"map assignment has energy \" << e
>224	ShiftExpression	\"map assignment has energy \" << e
>225	Identifier	e
>226	PrimaryExpression	\"map assignment has energy \"
>227	Callee	DRWN_LOG_MESSAGE
>228	Identifier	DRWN_LOG_MESSAGE
>229	ExpressionStatement	 
>230	AssignmentExpr	e += inf -> inference ( assignment ) . first
>231	MemberAccess	inf -> inference ( assignment ) . first
>232	Identifier	first
>233	CallExpression	inf -> inference ( assignment )
>234	ArgumentList	assignment
>235	Argument	assignment
>236	Identifier	assignment
>237	Callee	inf -> inference
>238	PtrMemberAccess	inf -> inference
>239	Identifier	inference
>240	Identifier	inf
>241	Identifier	e
>242	IdentifierDeclStatement	 
>243	IdentifierDecl	assignment
>244	Identifier	assignment
>245	IdentifierDeclType	drwnFullAssignment
>246	IfStatement	if ( inf == NULL )
>247	CompoundStatement	 
>248	ReturnStatement	 
>249	ExpressionStatement	 
>250	CallExpression	DRWN_LOG_ERROR ( \"options are
>251	ArgumentList	\"options are
>252	Argument	\"options are
>253	ShiftExpression	\"options are
>254	CallExpression	toString ( drwnMAPInferenceFactory 
>255	ArgumentList	drwnMAPInferenceFactory 
>256	Argument	drwnMAPInferenceFactory 
>257	CallExpression	drwnMAPInferenceFactory 
>258	ArgumentList	 
>259	Callee	drwnMAPInferenceFactory 
>260	MemberAccess	drwnMAPInferenceFactory 
>261	Identifier	getRegisteredClasses
>262	CallExpression	drwnMAPInferenceFactory 
>263	ArgumentList	 
>264	Callee	drwnMAPInferenceFactory 
>265	Identifier	drwnMAPInferenceFactory 
>266	Callee	toString
>267	Identifier	toString
>268	PrimaryExpression	\"options are
>269	Callee	DRWN_LOG_ERROR
>270	Identifier	DRWN_LOG_ERROR
>271	ExpressionStatement	 
>272	CallExpression	DRWN_LOG_ERROR ( \"unknown inference method \" << options [ string ( \"method\" ) ] )
>273	ArgumentList	\"unknown inference method \" << options [ string ( \"method\" ) ]
>274	Argument	\"unknown inference method \" << options [ string ( \"method\" ) ]
>275	ShiftExpression	\"unknown inference method \" << options [ string ( \"method\" ) ]
>276	ArrayIndexing	options [ string ( \"method\" ) ]
>277	CallExpression	string ( \"method\" )
>278	ArgumentList	\"method\"
>279	Argument	\"method\"
>280	PrimaryExpression	\"method\"
>281	Callee	string
>282	Identifier	string
>283	Identifier	options
>284	PrimaryExpression	\"unknown inference method \"
>285	Callee	DRWN_LOG_ERROR
>286	Identifier	DRWN_LOG_ERROR
>287	Condition	 
>288	EqualityExpression	inf == NULL
>289	Identifier	NULL
>290	Identifier	inf
>291	IdentifierDeclStatement	 
>292	IdentifierDecl	* inf = drwnMAPInferenceFactory 
>293	AssignmentExpr	* inf = drwnMAPInferenceFactory 
>294	CallExpression	drwnMAPInferenceFactory 
>295	ArgumentList	options [ string ( \"method\" ) ] . c_str ( )
>296	Argument	graph
>297	Identifier	graph
>298	Argument	options [ string ( \"method\" ) ] . c_str ( )
>299	CallExpression	options [ string ( \"method\" ) ] . c_str ( )
>300	ArgumentList	 
>301	Callee	options [ string ( \"method\" ) ] . c_str
>302	MemberAccess	options [ string ( \"method\" ) ] . c_str
>303	Identifier	c_str
>304	ArrayIndexing	options [ string ( \"method\" ) ]
>305	CallExpression	string ( \"method\" )
>306	ArgumentList	\"method\"
>307	Argument	\"method\"
>308	PrimaryExpression	\"method\"
>309	Callee	string
>310	Identifier	string
>311	Identifier	options
>312	Callee	drwnMAPInferenceFactory 
>313	MemberAccess	drwnMAPInferenceFactory 
>314	Identifier	create
>315	CallExpression	drwnMAPInferenceFactory 
>316	ArgumentList	 
>317	Callee	drwnMAPInferenceFactory 
>318	Identifier	drwnMAPInferenceFactory 
>319	Identifier	inf
>320	Identifier	inf
>321	IdentifierDeclType	drwnMAPInference *
>322	IdentifierDeclStatement	 
>323	IdentifierDecl	e = drwnFactorGraphUtils 
>324	AssignmentExpr	e = drwnFactorGraphUtils 
>325	CallExpression	drwnFactorGraphUtils 
>326	ArgumentList	graph
>327	Argument	graph
>328	Identifier	graph
>329	Callee	drwnFactorGraphUtils 
>330	Identifier	drwnFactorGraphUtils 
>331	Identifier	e
>332	Identifier	e
>333	IdentifierDeclType	double
>334	ExpressionStatement	 
>335	CallExpression	DRWN_LOG_DEBUG ( \"using inference method \" << options [ string ( \"method\" ) ] )
>336	ArgumentList	\"using inference method \" << options [ string ( \"method\" ) ]
>337	Argument	\"using inference method \" << options [ string ( \"method\" ) ]
>338	ShiftExpression	\"using inference method \" << options [ string ( \"method\" ) ]
>339	ArrayIndexing	options [ string ( \"method\" ) ]
>340	CallExpression	string ( \"method\" )
>341	ArgumentList	\"method\"
>342	Argument	\"method\"
>343	PrimaryExpression	\"method\"
>344	Callee	string
>345	Identifier	string
>346	Identifier	options
>347	PrimaryExpression	\"using inference method \"
>348	Callee	DRWN_LOG_DEBUG
>349	Identifier	DRWN_LOG_DEBUG
>350	IfStatement	if ( drwnLogger 
>351	CompoundStatement	 
>352	ExpressionStatement	 
>353	CallExpression	graph . dump ( )
>354	ArgumentList	 
>355	Callee	graph . dump
>356	MemberAccess	graph . dump
>357	Identifier	dump
>358	Identifier	graph
>359	Condition	 
>360	RelationalExpression	drwnLogger 
>361	Identifier	DRWN_LL_DEBUG
>362	CallExpression	drwnLogger 
>363	ArgumentList	 
>364	Callee	drwnLogger 
>365	Identifier	drwnLogger 
>366	IfStatement	if ( ( nrhs > 2 ) && ( ! mxIsEmpty ( prhs [ 2 ] ) ) )
>367	ElseStatement	else
>368	CompoundStatement	 
>369	ExpressionStatement	 
>370	CallExpression	graph . connectGraph ( )
>371	ArgumentList	 
>372	Callee	graph . connectGraph
>373	MemberAccess	graph . connectGraph
>374	Identifier	connectGraph
>375	Identifier	graph
>376	CompoundStatement	 
>377	ExpressionStatement	 
>378	CallExpression	graph . connectGraph ( edges )
>379	ArgumentList	edges
>380	Argument	edges
>381	Identifier	edges
>382	Callee	graph . connectGraph
>383	MemberAccess	graph . connectGraph
>384	Identifier	connectGraph
>385	Identifier	graph
>386	ForStatement	for ( int i = 0 ; i < m / 2 ; i ++ )
>387	CompoundStatement	 
>388	ExpressionStatement	 
>389	CallExpression	edges . insert ( drwnEdge ( mxGetPr ( prhs [ 2 ] ) [ i ] , mxGetPr ( prhs [ 2 ] ) [ i + m / 2 ] ) )
>390	ArgumentList	drwnEdge ( mxGetPr ( prhs [ 2 ] ) [ i ] , mxGetPr ( prhs [ 2 ] ) [ i + m / 2 ] )
>391	Argument	drwnEdge ( mxGetPr ( prhs [ 2 ] ) [ i ] , mxGetPr ( prhs [ 2 ] ) [ i + m / 2 ] )
>392	CallExpression	drwnEdge ( mxGetPr ( prhs [ 2 ] ) [ i ] , mxGetPr ( prhs [ 2 ] ) [ i + m / 2 ] )
>393	ArgumentList	mxGetPr ( prhs [ 2 ] ) [ i ]
>394	Argument	mxGetPr ( prhs [ 2 ] ) [ i + m / 2 ]
>395	ArrayIndexing	mxGetPr ( prhs [ 2 ] ) [ i + m / 2 ]
>396	AdditiveExpression	i + m / 2
>397	MultiplicativeExpression	m / 2
>398	PrimaryExpression	2
>399	Identifier	m
>400	Identifier	i
>401	CallExpression	mxGetPr ( prhs [ 2 ] )
>402	ArgumentList	prhs [ 2 ]
>403	Argument	prhs [ 2 ]
>404	ArrayIndexing	prhs [ 2 ]
>405	PrimaryExpression	2
>406	Identifier	prhs
>407	Callee	mxGetPr
>408	Identifier	mxGetPr
>409	Argument	mxGetPr ( prhs [ 2 ] ) [ i ]
>410	ArrayIndexing	mxGetPr ( prhs [ 2 ] ) [ i ]
>411	Identifier	i
>412	CallExpression	mxGetPr ( prhs [ 2 ] )
>413	ArgumentList	prhs [ 2 ]
>414	Argument	prhs [ 2 ]
>415	ArrayIndexing	prhs [ 2 ]
>416	PrimaryExpression	2
>417	Identifier	prhs
>418	Callee	mxGetPr
>419	Identifier	mxGetPr
>420	Callee	drwnEdge
>421	Identifier	drwnEdge
>422	Callee	edges . insert
>423	MemberAccess	edges . insert
>424	Identifier	insert
>425	Identifier	edges
>426	IncDecOp	 
>427	IncDec	++
>428	Identifier	i
>429	Condition	 
>430	RelationalExpression	i < m / 2
>431	MultiplicativeExpression	m / 2
>432	PrimaryExpression	2
>433	Identifier	m
>434	Identifier	i
>435	ForInit	 
>436	IdentifierDeclStatement	int i = 0 ;
>437	IdentifierDecl	i = 0
>438	AssignmentExpr	i = 0
>439	PrimaryExpression	0
>440	Identifier	i
>441	Identifier	i
>442	IdentifierDeclType	int
>443	IdentifierDeclStatement	 
>444	IdentifierDecl	edges
>445	Identifier	edges
>446	IdentifierDeclType	set < drwnEdge >
>447	IfStatement	if ( m % 2 != 0 )
>448	CompoundStatement	 
>449	ReturnStatement	 
>450	ExpressionStatement	 
>451	CallExpression	DRWN_LOG_ERROR ( \"edges must be m-by-2 array\" )
>452	ArgumentList	\"edges must be m-by-2 array\"
>453	Argument	\"edges must be m-by-2 array\"
>454	PrimaryExpression	\"edges must be m-by-2 array\"
>455	Callee	DRWN_LOG_ERROR
>456	Identifier	DRWN_LOG_ERROR
>457	Condition	 
>458	EqualityExpression	m % 2 != 0
>459	PrimaryExpression	0
>460	MultiplicativeExpression	m % 2
>461	PrimaryExpression	2
>462	Identifier	m
>463	IdentifierDeclStatement	 
>464	IdentifierDecl	m = mxGetNumberOfElements ( prhs [ 2 ] )
>465	AssignmentExpr	m = mxGetNumberOfElements ( prhs [ 2 ] )
>466	CallExpression	mxGetNumberOfElements ( prhs [ 2 ] )
>467	ArgumentList	prhs [ 2 ]
>468	Argument	prhs [ 2 ]
>469	ArrayIndexing	prhs [ 2 ]
>470	PrimaryExpression	2
>471	Identifier	prhs
>472	Callee	mxGetNumberOfElements
>473	Identifier	mxGetNumberOfElements
>474	Identifier	m
>475	Identifier	m
>476	IdentifierDeclType	const int
>477	Condition	 
>478	AndExpression	( nrhs > 2 ) && ( ! mxIsEmpty ( prhs [ 2 ] ) )
>479	UnaryOp	! mxIsEmpty ( prhs [ 2 ] )
>480	CallExpression	mxIsEmpty ( prhs [ 2 ] )
>481	ArgumentList	prhs [ 2 ]
>482	Argument	prhs [ 2 ]
>483	ArrayIndexing	prhs [ 2 ]
>484	PrimaryExpression	2
>485	Identifier	prhs
>486	Callee	mxIsEmpty
>487	Identifier	mxIsEmpty
>488	UnaryOperator	!
>489	RelationalExpression	nrhs > 2
>490	PrimaryExpression	2
>491	Identifier	nrhs
>492	ForStatement	for ( int i = 0 ; i < mxGetNumberOfElements ( prhs [ 1 ] ) ; i ++ )
>493	CompoundStatement	 
>494	ExpressionStatement	 
>495	CallExpression	graph . addFactor ( drwnMatlabUtils 
>496	ArgumentList	drwnMatlabUtils 
>497	Argument	drwnMatlabUtils 
>498	CallExpression	drwnMatlabUtils 
>499	ArgumentList	universe
>500	Argument	i
>501	Identifier	i
>502	Argument	prhs [ 1 ]
>503	ArrayIndexing	prhs [ 1 ]
>504	PrimaryExpression	1
>505	Identifier	prhs
>506	Argument	universe
>507	Identifier	universe
>508	Callee	drwnMatlabUtils 
>509	Identifier	drwnMatlabUtils 
>510	Callee	graph . addFactor
>511	MemberAccess	graph . addFactor
>512	Identifier	addFactor
>513	Identifier	graph
>514	IncDecOp	 
>515	IncDec	++
>516	Identifier	i
>517	Condition	 
>518	RelationalExpression	i < mxGetNumberOfElements ( prhs [ 1 ] )
>519	CallExpression	mxGetNumberOfElements ( prhs [ 1 ] )
>520	ArgumentList	prhs [ 1 ]
>521	Argument	prhs [ 1 ]
>522	ArrayIndexing	prhs [ 1 ]
>523	PrimaryExpression	1
>524	Identifier	prhs
>525	Callee	mxGetNumberOfElements
>526	Identifier	mxGetNumberOfElements
>527	Identifier	i
>528	ForInit	 
>529	IdentifierDeclStatement	int i = 0 ;
>530	IdentifierDecl	i = 0
>531	AssignmentExpr	i = 0
>532	PrimaryExpression	0
>533	Identifier	i
>534	Identifier	i
>535	IdentifierDeclType	int
>536	IdentifierDeclStatement	 
>537	IdentifierDecl	graph ( universe )
>538	Identifier	universe
>539	Identifier	graph
>540	IdentifierDeclType	drwnFactorGraph
>541	ForStatement	for ( int i = 0 ; i < mxGetNumberOfElements ( prhs [ 0 ] ) ; i ++ )
>542	CompoundStatement	 
>543	ExpressionStatement	 
>544	CallExpression	universe -> addVariable ( ( int ) mxGetPr ( prhs [ 0 ] ) [ i ] )
>545	ArgumentList	( int ) mxGetPr ( prhs [ 0 ] ) [ i ]
>546	Argument	( int ) mxGetPr ( prhs [ 0 ] ) [ i ]
>547	CastExpression	( int ) mxGetPr ( prhs [ 0 ] ) [ i ]
>548	ArrayIndexing	mxGetPr ( prhs [ 0 ] ) [ i ]
>549	Identifier	i
>550	CallExpression	mxGetPr ( prhs [ 0 ] )
>551	ArgumentList	prhs [ 0 ]
>552	Argument	prhs [ 0 ]
>553	ArrayIndexing	prhs [ 0 ]
>554	PrimaryExpression	0
>555	Identifier	prhs
>556	Callee	mxGetPr
>557	Identifier	mxGetPr
>558	CastTarget	int
>559	Callee	universe -> addVariable
>560	PtrMemberAccess	universe -> addVariable
>561	Identifier	addVariable
>562	Identifier	universe
>563	IncDecOp	 
>564	IncDec	++
>565	Identifier	i
>566	Condition	 
>567	RelationalExpression	i < mxGetNumberOfElements ( prhs [ 0 ] )
>568	CallExpression	mxGetNumberOfElements ( prhs [ 0 ] )
>569	ArgumentList	prhs [ 0 ]
>570	Argument	prhs [ 0 ]
>571	ArrayIndexing	prhs [ 0 ]
>572	PrimaryExpression	0
>573	Identifier	prhs
>574	Callee	mxGetNumberOfElements
>575	Identifier	mxGetNumberOfElements
>576	Identifier	i
>577	ForInit	 
>578	IdentifierDeclStatement	int i = 0 ;
>579	IdentifierDecl	i = 0
>580	AssignmentExpr	i = 0
>581	PrimaryExpression	0
>582	Identifier	i
>583	Identifier	i
>584	IdentifierDeclType	int
>585	IdentifierDeclStatement	 
>586	IdentifierDecl	universe ( new drwnVarUniverse ( ) )
>587	UnaryExpression	new drwnVarUniverse ( )
>588	Identifier	universe
>589	IdentifierDeclType	drwnVarUniversePtr
>590	ExpressionStatement	 
>591	CallExpression	drwnCodeProfiler 
>592	ArgumentList	drwnCodeProfiler 
>593	Argument	drwnCodeProfiler 
>594	CallExpression	drwnCodeProfiler 
>595	ArgumentList	\"mex\"
>596	Argument	\"mex\"
>597	PrimaryExpression	\"mex\"
>598	Callee	drwnCodeProfiler 
>599	Identifier	drwnCodeProfiler 
>600	Callee	drwnCodeProfiler 
>601	Identifier	drwnCodeProfiler 
>602	ExpressionStatement	 
>603	CallExpression	drwnMatlabUtils 
>604	ArgumentList	options
>605	Argument	options
>606	Identifier	options
>607	Callee	drwnMatlabUtils 
>608	Identifier	drwnMatlabUtils 
>609	IfStatement	if ( nrhs == 4 )
>610	CompoundStatement	 
>611	ExpressionStatement	 
>612	CallExpression	drwnMatlabUtils 
>613	ArgumentList	prhs [ nrhs - 1 ]
>614	Argument	options
>615	Identifier	options
>616	Argument	prhs [ nrhs - 1 ]
>617	ArrayIndexing	prhs [ nrhs - 1 ]
>618	AdditiveExpression	nrhs - 1
>619	PrimaryExpression	1
>620	Identifier	nrhs
>621	Identifier	prhs
>622	Callee	drwnMatlabUtils 
>623	Identifier	drwnMatlabUtils 
>624	Condition	 
>625	EqualityExpression	nrhs == 4
>626	PrimaryExpression	4
>627	Identifier	nrhs
>628	ExpressionStatement	 
>629	AssignmentExpr	options [ string ( \"method\" ) ] = string ( \"drwnAsyncMaxProdInference\" )
>630	CallExpression	string ( \"drwnAsyncMaxProdInference\" )
>631	ArgumentList	\"drwnAsyncMaxProdInference\"
>632	Argument	\"drwnAsyncMaxProdInference\"
>633	PrimaryExpression	\"drwnAsyncMaxProdInference\"
>634	Callee	string
>635	Identifier	string
>636	ArrayIndexing	options [ string ( \"method\" ) ]
>637	CallExpression	string ( \"method\" )
>638	ArgumentList	\"method\"
>639	Argument	\"method\"
>640	PrimaryExpression	\"method\"
>641	Callee	string
>642	Identifier	string
>643	Identifier	options
>644	ExpressionStatement	 
>645	CallExpression	drwnMatlabUtils 
>646	ArgumentList	options
>647	Argument	options
>648	Identifier	options
>649	Callee	drwnMatlabUtils 
>650	Identifier	drwnMatlabUtils 
>651	IdentifierDeclStatement	 
>652	IdentifierDecl	options
>653	Identifier	options
>654	IdentifierDeclType	map < string , string >
>655	IfStatement	if ( ( nrhs < 2 ) && ( nrhs > 4 ) )
>656	CompoundStatement	 
>657	ExpressionStatement	 
>658	CallExpression	mexErrMsgTxt ( \"incorrect number of input arguments\" )
>659	ArgumentList	\"incorrect number of input arguments\"
>660	Argument	\"incorrect number of input arguments\"
>661	PrimaryExpression	\"incorrect number of input arguments\"
>662	Callee	mexErrMsgTxt
>663	Identifier	mexErrMsgTxt
>664	ExpressionStatement	 
>665	CallExpression	usage ( )
>666	ArgumentList	 
>667	Callee	usage
>668	Identifier	usage
>669	Condition	 
>670	AndExpression	( nrhs < 2 ) && ( nrhs > 4 )
>671	RelationalExpression	nrhs > 4
>672	PrimaryExpression	4
>673	Identifier	nrhs
>674	RelationalExpression	nrhs < 2
>675	PrimaryExpression	2
>676	Identifier	nrhs
>677	IfStatement	if ( nrhs == 0 )
>678	CompoundStatement	 
>679	ReturnStatement	 
>680	ExpressionStatement	 
>681	CallExpression	usage ( )
>682	ArgumentList	 
>683	Callee	usage
>684	Identifier	usage
>685	Condition	 
>686	EqualityExpression	nrhs == 0
>687	PrimaryExpression	0
>688	Identifier	nrhs
>689	ExpressionStatement	 
>690	CallExpression	drwnMatlabUtils 
>691	ArgumentList	 
>692	Callee	drwnMatlabUtils 
>693	Identifier	drwnMatlabUtils 
<3=6,5,4
<6=68,61,54,47,40,33,26,21,14,7
<7=8
<8=12,9
<9=10
<10=11
<12=13
<14=15
<15=19,16
<16=17
<17=18
<19=20
<21=22
<22=24,23
<24=25
<26=27
<27=31,28
<28=29
<29=30
<31=32
<33=34
<34=38,35
<35=36
<36=37
<38=39
<40=41
<41=45,42
<42=43
<43=44
<45=46
<47=48
<48=52,49
<49=50
<50=51
<52=53
<54=55
<55=59,56
<56=57
<57=58
<59=60
<61=62
<62=66,63
<63=64
<64=65
<66=67
<68=69
<69=73,70
<70=71
<71=72
<73=74
<79=94,93,80
<80=90,87,84,81
<81=83,82
<84=86,85
<87=89,88
<90=92,91
<94=689,677,655,651,644,628,609,602,590,585,541,536,492,366,350,334,322,291,246,242,229,220,206,187,186,184,112,100,95
<95=96
<96=98,97
<98=99
<100=101
<101=110,102
<102=103
<103=104
<104=108,105
<105=106
<106=107
<108=109
<110=111
<112=180,113
<113=160,146,114
<114=138,129,126,115
<115=116
<116=117
<117=123,118
<118=122,119
<119=121,120
<123=125,124
<126=128,127
<129=130
<130=137,131
<131=133,132
<133=134
<134=136,135
<138=139
<139=140
<140=145,144,141
<141=143,142
<146=147
<147=159,158,148
<148=157,149
<149=155,150
<150=151
<151=152
<152=154,153
<155=156
<160=161
<161=177,162
<162=175,163
<163=168,166,164
<164=165
<166=167
<168=169
<169=171,170
<171=172
<172=174,173
<175=176
<177=179,178
<180=181
<181=183,182
<184=185
<187=188
<188=204,189
<189=190
<190=191
<191=198,192
<192=194,193
<194=195
<195=197,196
<198=200,199
<200=201
<201=203,202
<204=205
<206=207
<207=218,208
<208=209
<209=210
<210=217,211
<211=215,212
<212=213
<213=214
<215=216
<218=219
<220=221
<221=227,222
<222=223
<223=224
<224=226,225
<227=228
<229=230
<230=241,231
<231=233,232
<233=237,234
<234=235
<235=236
<237=238
<238=240,239
<242=243
<243=245,244
<246=287,247
<247=271,249,248
<249=250
<250=269,251
<251=252
<252=253
<253=268,254
<254=266,255
<255=256
<256=257
<257=259,258
<259=260
<260=262,261
<262=264,263
<264=265
<266=267
<269=270
<271=272
<272=285,273
<273=274
<274=275
<275=284,276
<276=283,277
<277=281,278
<278=279
<279=280
<281=282
<285=286
<287=288
<288=290,289
<291=292
<292=321,320,293
<293=319,294
<294=312,295
<295=298,296
<296=297
<298=299
<299=301,300
<301=302
<302=304,303
<304=311,305
<305=309,306
<306=307
<307=308
<309=310
<312=313
<313=315,314
<315=317,316
<317=318
<322=323
<323=333,332,324
<324=331,325
<325=329,326
<326=327
<327=328
<329=330
<334=335
<335=348,336
<336=337
<337=338
<338=347,339
<339=346,340
<340=344,341
<341=342
<342=343
<344=345
<348=349
<350=359,351
<351=352
<352=353
<353=355,354
<355=356
<356=358,357
<359=360
<360=362,361
<362=364,363
<364=365
<366=477,376,367
<367=368
<368=369
<369=370
<370=372,371
<372=373
<373=375,374
<376=463,447,443,386,377
<377=378
<378=382,379
<379=380
<380=381
<382=383
<383=385,384
<386=435,429,426,387
<387=388
<388=389
<389=422,390
<390=391
<391=392
<392=420,393
<393=409,394
<394=395
<395=401,396
<396=400,397
<397=399,398
<401=407,402
<402=403
<403=404
<404=406,405
<407=408
<409=410
<410=412,411
<412=418,413
<413=414
<414=415
<415=417,416
<418=419
<420=421
<422=423
<423=425,424
<426=428,427
<429=430
<430=434,431
<431=433,432
<435=436
<436=437
<437=442,441,438
<438=440,439
<443=444
<444=446,445
<447=457,448
<448=450,449
<450=451
<451=455,452
<452=453
<453=454
<455=456
<457=458
<458=460,459
<460=462,461
<463=464
<464=476,475,465
<465=474,466
<466=472,467
<467=468
<468=469
<469=471,470
<472=473
<477=478
<478=489,479
<479=488,480
<480=486,481
<481=482
<482=483
<483=485,484
<486=487
<489=491,490
<492=528,517,514,493
<493=494
<494=495
<495=510,496
<496=497
<497=498
<498=508,499
<499=506,502,500
<500=501
<502=503
<503=505,504
<506=507
<508=509
<510=511
<511=513,512
<514=516,515
<517=518
<518=527,519
<519=525,520
<520=521
<521=522
<522=524,523
<525=526
<528=529
<529=530
<530=535,534,531
<531=533,532
<536=537
<537=540,539,538
<541=577,566,563,542
<542=543
<543=544
<544=559,545
<545=546
<546=547
<547=558,548
<548=550,549
<550=556,551
<551=552
<552=553
<553=555,554
<556=557
<559=560
<560=562,561
<563=565,564
<566=567
<567=576,568
<568=574,569
<569=570
<570=571
<571=573,572
<574=575
<577=578
<578=579
<579=584,583,580
<580=582,581
<585=586
<586=589,588,587
<590=591
<591=600,592
<592=593
<593=594
<594=598,595
<595=596
<596=597
<598=599
<600=601
<602=603
<603=607,604
<604=605
<605=606
<607=608
<609=624,610
<610=611
<611=612
<612=622,613
<613=616,614
<614=615
<616=617
<617=621,618
<618=620,619
<622=623
<624=625
<625=627,626
<628=629
<629=636,630
<630=634,631
<631=632
<632=633
<634=635
<636=643,637
<637=641,638
<638=639
<639=640
<641=642
<644=645
<645=649,646
<646=647
<647=648
<649=650
<651=652
<652=654,653
<655=669,656
<656=664,657
<657=658
<658=662,659
<659=660
<660=661
<662=663
<664=665
<665=667,666
<667=668
<669=670
<670=674,671
<671=673,672
<674=676,675
<677=685,678
<678=680,679
<680=681
<681=683,682
<683=684
<685=686
<686=688,687
<689=690
<690=692,691
<692=693
