>9	FunctionDef	toScalar (const YAML 
>10	ParameterList	const YAML 
>11	Parameter	 
>12	Identifier	s
>13	ParameterType	boost 
>14	Parameter	 
>15	Identifier	node
>16	ParameterType	const YAML 
>17	ReturnType	static void
>18	CompoundStatement	 
>19	SwitchStatement	switch ( s -> getType ( ) )
>20	CompoundStatement	 
>21	ExpressionStatement	 
>22	ShiftExpression	NTA_THROW << \"Unknown data type \" << s -> getType ( ) << \" for yaml node '\" << val << \"'\"
>23	ShiftExpression	\"Unknown data type \" << s -> getType ( ) << \" for yaml node '\" << val << \"'\"
>24	ShiftExpression	s -> getType ( ) << \" for yaml node '\" << val << \"'\"
>25	ShiftExpression	\" for yaml node '\" << val << \"'\"
>26	ShiftExpression	val << \"'\"
>27	PrimaryExpression	\"'\"
>28	Identifier	val
>29	PrimaryExpression	\" for yaml node '\"
>30	CallExpression	s -> getType ( )
>31	ArgumentList	 
>32	Callee	s -> getType
>33	PtrMemberAccess	s -> getType
>34	Identifier	getType
>35	Identifier	s
>36	PrimaryExpression	\"Unknown data type \"
>37	Identifier	NTA_THROW
>38	ExpressionStatement	 
>39	ShiftExpression	node >> val
>40	Identifier	val
>41	Identifier	node
>42	IdentifierDeclStatement	 
>43	IdentifierDecl	val
>44	Identifier	val
>45	IdentifierDeclType	std 
>46	Label	 
>47	Identifier	default
>48	BreakStatement	 
>49	ExpressionStatement	 
>50	ShiftExpression	NTA_THROW << \"Attempt to specify a YAML value for a scalar of type Handle\"
>51	PrimaryExpression	\"Attempt to specify a YAML value for a scalar of type Handle\"
>52	Identifier	NTA_THROW
>53	Label	 
>54	Identifier	NTA_BasicType_Handle
>55	BreakStatement	 
>56	ExpressionStatement	 
>57	ShiftExpression	node >> s -> value . real64
>58	MemberAccess	s -> value . real64
>59	Identifier	real64
>60	PtrMemberAccess	s -> value
>61	Identifier	value
>62	Identifier	s
>63	Identifier	node
>64	Label	 
>65	Identifier	NTA_BasicType_Real64
>66	BreakStatement	 
>67	ExpressionStatement	 
>68	ShiftExpression	node >> s -> value . real32
>69	MemberAccess	s -> value . real32
>70	Identifier	real32
>71	PtrMemberAccess	s -> value
>72	Identifier	value
>73	Identifier	s
>74	Identifier	node
>75	Label	 
>76	Identifier	NTA_BasicType_Real32
>77	BreakStatement	 
>78	ExpressionStatement	 
>79	ShiftExpression	node >> s -> value . int64
>80	MemberAccess	s -> value . int64
>81	Identifier	int64
>82	PtrMemberAccess	s -> value
>83	Identifier	value
>84	Identifier	s
>85	Identifier	node
>86	Label	 
>87	Identifier	NTA_BasicType_Int64
>88	BreakStatement	 
>89	ExpressionStatement	 
>90	ShiftExpression	node >> s -> value . uint64
>91	MemberAccess	s -> value . uint64
>92	Identifier	uint64
>93	PtrMemberAccess	s -> value
>94	Identifier	value
>95	Identifier	s
>96	Identifier	node
>97	Label	 
>98	Identifier	NTA_BasicType_UInt64
>99	BreakStatement	 
>100	ExpressionStatement	 
>101	ShiftExpression	node >> s -> value . int32
>102	MemberAccess	s -> value . int32
>103	Identifier	int32
>104	PtrMemberAccess	s -> value
>105	Identifier	value
>106	Identifier	s
>107	Identifier	node
>108	Label	 
>109	Identifier	NTA_BasicType_Int32
>110	BreakStatement	 
>111	ExpressionStatement	 
>112	ShiftExpression	node >> s -> value . uint32
>113	MemberAccess	s -> value . uint32
>114	Identifier	uint32
>115	PtrMemberAccess	s -> value
>116	Identifier	value
>117	Identifier	s
>118	Identifier	node
>119	Label	 
>120	Identifier	NTA_BasicType_UInt32
>121	BreakStatement	 
>122	ExpressionStatement	 
>123	ShiftExpression	node >> s -> value . int16
>124	MemberAccess	s -> value . int16
>125	Identifier	int16
>126	PtrMemberAccess	s -> value
>127	Identifier	value
>128	Identifier	s
>129	Identifier	node
>130	Label	 
>131	Identifier	NTA_BasicType_Int16
>132	BreakStatement	 
>133	ExpressionStatement	 
>134	ShiftExpression	node >> s -> value . uint16
>135	MemberAccess	s -> value . uint16
>136	Identifier	uint16
>137	PtrMemberAccess	s -> value
>138	Identifier	value
>139	Identifier	s
>140	Identifier	node
>141	Label	 
>142	Identifier	NTA_BasicType_UInt16
>143	BreakStatement	 
>144	ExpressionStatement	 
>145	ShiftExpression	NTA_THROW << \"Internal error
>146	PrimaryExpression	\"Internal error
>147	Identifier	NTA_THROW
>148	Label	 
>149	Identifier	NTA_BasicType_Byte
>150	Condition	 
>151	CallExpression	s -> getType ( )
>152	ArgumentList	 
>153	Callee	s -> getType
>154	PtrMemberAccess	s -> getType
>155	Identifier	getType
>156	Identifier	s
>157	ExpressionStatement	 
>158	CallExpression	NTA_CHECK ( node . GetType ( ) == YAML 
>159	ArgumentList	node . GetType ( ) == YAML 
>160	Argument	node . GetType ( ) == YAML 
>161	EqualityExpression	node . GetType ( ) == YAML 
>162	Identifier	YAML 
>163	CallExpression	node . GetType ( )
>164	ArgumentList	 
>165	Callee	node . GetType
>166	MemberAccess	node . GetType
>167	Identifier	GetType
>168	Identifier	node
>169	Callee	NTA_CHECK
>170	Identifier	NTA_CHECK
>182	FunctionDef	toArray (const YAML 
>183	ParameterList	const YAML 
>184	Parameter	 
>185	Identifier	a
>186	ParameterType	boost 
>187	Parameter	 
>188	Identifier	node
>189	ParameterType	const YAML 
>190	ReturnType	static void
>191	CompoundStatement	 
>192	ForStatement	for ( size_t i = 0 ; i < node . size ( ) ; i ++ )
>193	CompoundStatement	 
>194	SwitchStatement	switch ( a -> getType ( ) )
>195	CompoundStatement	 
>196	ExpressionStatement	 
>197	ShiftExpression	NTA_THROW << \"Unknown data type \" << a -> getType ( )
>198	ShiftExpression	\"Unknown data type \" << a -> getType ( )
>199	CallExpression	a -> getType ( )
>200	ArgumentList	 
>201	Callee	a -> getType
>202	PtrMemberAccess	a -> getType
>203	Identifier	getType
>204	Identifier	a
>205	PrimaryExpression	\"Unknown data type \"
>206	Identifier	NTA_THROW
>207	Label	 
>208	Identifier	default
>209	BreakStatement	 
>210	ExpressionStatement	 
>211	RelationalExpression	item . Read < Real64 > ( ( ( Real64 * ) buffer ) [ i ] )
>212	RelationalExpression	Real64 > ( ( ( Real64 * ) buffer ) [ i ] )
>213	ArrayIndexing	( ( Real64 * ) buffer ) [ i ]
>214	Identifier	i
>215	CastExpression	( Real64 * ) buffer
>216	Identifier	buffer
>217	CastTarget	Real64 *
>218	Identifier	Real64
>219	MemberAccess	item . Read
>220	Identifier	Read
>221	Identifier	item
>222	Label	 
>223	Identifier	NTA_BasicType_Real64
>224	BreakStatement	 
>225	ExpressionStatement	 
>226	RelationalExpression	item . Read < Real32 > ( ( ( Real32 * ) buffer ) [ i ] )
>227	RelationalExpression	Real32 > ( ( ( Real32 * ) buffer ) [ i ] )
>228	ArrayIndexing	( ( Real32 * ) buffer ) [ i ]
>229	Identifier	i
>230	CastExpression	( Real32 * ) buffer
>231	Identifier	buffer
>232	CastTarget	Real32 *
>233	Identifier	Real32
>234	MemberAccess	item . Read
>235	Identifier	Read
>236	Identifier	item
>237	Label	 
>238	Identifier	NTA_BasicType_Real32
>239	BreakStatement	 
>240	ExpressionStatement	 
>241	RelationalExpression	item . Read < Int64 > ( ( ( Int64 * ) buffer ) [ i ] )
>242	RelationalExpression	Int64 > ( ( ( Int64 * ) buffer ) [ i ] )
>243	ArrayIndexing	( ( Int64 * ) buffer ) [ i ]
>244	Identifier	i
>245	CastExpression	( Int64 * ) buffer
>246	Identifier	buffer
>247	CastTarget	Int64 *
>248	Identifier	Int64
>249	MemberAccess	item . Read
>250	Identifier	Read
>251	Identifier	item
>252	Label	 
>253	Identifier	NTA_BasicType_Int64
>254	BreakStatement	 
>255	ExpressionStatement	 
>256	RelationalExpression	item . Read < UInt64 > ( ( ( UInt64 * ) buffer ) [ i ] )
>257	RelationalExpression	UInt64 > ( ( ( UInt64 * ) buffer ) [ i ] )
>258	ArrayIndexing	( ( UInt64 * ) buffer ) [ i ]
>259	Identifier	i
>260	CastExpression	( UInt64 * ) buffer
>261	Identifier	buffer
>262	CastTarget	UInt64 *
>263	Identifier	UInt64
>264	MemberAccess	item . Read
>265	Identifier	Read
>266	Identifier	item
>267	Label	 
>268	Identifier	NTA_BasicType_UInt64
>269	BreakStatement	 
>270	ExpressionStatement	 
>271	RelationalExpression	item . Read < Int32 > ( ( ( Int32 * ) buffer ) [ i ] )
>272	RelationalExpression	Int32 > ( ( ( Int32 * ) buffer ) [ i ] )
>273	ArrayIndexing	( ( Int32 * ) buffer ) [ i ]
>274	Identifier	i
>275	CastExpression	( Int32 * ) buffer
>276	Identifier	buffer
>277	CastTarget	Int32 *
>278	Identifier	Int32
>279	MemberAccess	item . Read
>280	Identifier	Read
>281	Identifier	item
>282	Label	 
>283	Identifier	NTA_BasicType_Int32
>284	BreakStatement	 
>285	ExpressionStatement	 
>286	RelationalExpression	item . Read < UInt32 > ( ( ( UInt32 * ) buffer ) [ i ] )
>287	RelationalExpression	UInt32 > ( ( ( UInt32 * ) buffer ) [ i ] )
>288	ArrayIndexing	( ( UInt32 * ) buffer ) [ i ]
>289	Identifier	i
>290	CastExpression	( UInt32 * ) buffer
>291	Identifier	buffer
>292	CastTarget	UInt32 *
>293	Identifier	UInt32
>294	MemberAccess	item . Read
>295	Identifier	Read
>296	Identifier	item
>297	Label	 
>298	Identifier	NTA_BasicType_UInt32
>299	BreakStatement	 
>300	ExpressionStatement	 
>301	RelationalExpression	item . Read < Int16 > ( ( ( Int16 * ) buffer ) [ i ] )
>302	RelationalExpression	Int16 > ( ( ( Int16 * ) buffer ) [ i ] )
>303	ArrayIndexing	( ( Int16 * ) buffer ) [ i ]
>304	Identifier	i
>305	CastExpression	( Int16 * ) buffer
>306	Identifier	buffer
>307	CastTarget	Int16 *
>308	Identifier	Int16
>309	MemberAccess	item . Read
>310	Identifier	Read
>311	Identifier	item
>312	Label	 
>313	Identifier	NTA_BasicType_Int16
>314	BreakStatement	 
>315	ExpressionStatement	 
>316	RelationalExpression	item . Read < UInt16 > ( ( ( UInt16 * ) buffer ) [ i ] )
>317	RelationalExpression	UInt16 > ( ( ( UInt16 * ) buffer ) [ i ] )
>318	ArrayIndexing	( ( UInt16 * ) buffer ) [ i ]
>319	Identifier	i
>320	CastExpression	( UInt16 * ) buffer
>321	Identifier	buffer
>322	CastTarget	UInt16 *
>323	Identifier	UInt16
>324	MemberAccess	item . Read
>325	Identifier	Read
>326	Identifier	item
>327	Label	 
>328	Identifier	NTA_BasicType_UInt16
>329	BreakStatement	 
>330	ExpressionStatement	 
>331	ShiftExpression	NTA_THROW << \"Internal error
>332	PrimaryExpression	\"Internal error
>333	Identifier	NTA_THROW
>334	Label	 
>335	Identifier	NTA_BasicType_Byte
>336	Condition	 
>337	CallExpression	a -> getType ( )
>338	ArgumentList	 
>339	Callee	a -> getType
>340	PtrMemberAccess	a -> getType
>341	Identifier	getType
>342	Identifier	a
>343	ExpressionStatement	 
>344	CallExpression	NTA_CHECK ( item . GetType ( ) == YAML 
>345	ArgumentList	item . GetType ( ) == YAML 
>346	Argument	item . GetType ( ) == YAML 
>347	EqualityExpression	item . GetType ( ) == YAML 
>348	Identifier	YAML 
>349	CallExpression	item . GetType ( )
>350	ArgumentList	 
>351	Callee	item . GetType
>352	MemberAccess	item . GetType
>353	Identifier	GetType
>354	Identifier	item
>355	Callee	NTA_CHECK
>356	Identifier	NTA_CHECK
>357	IdentifierDeclStatement	 
>358	IdentifierDecl	& item = node [ i ]
>359	AssignmentExpr	& item = node [ i ]
>360	ArrayIndexing	node [ i ]
>361	Identifier	i
>362	Identifier	node
>363	Identifier	item
>364	Identifier	item
>365	IdentifierDeclType	const YAML 
>366	IncDecOp	 
>367	IncDec	++
>368	Identifier	i
>369	Condition	 
>370	RelationalExpression	i < node . size ( )
>371	CallExpression	node . size ( )
>372	ArgumentList	 
>373	Callee	node . size
>374	MemberAccess	node . size
>375	Identifier	size
>376	Identifier	node
>377	Identifier	i
>378	ForInit	 
>379	IdentifierDeclStatement	size_t i = 0 ;
>380	IdentifierDecl	i = 0
>381	AssignmentExpr	i = 0
>382	PrimaryExpression	0
>383	Identifier	i
>384	Identifier	i
>385	IdentifierDeclType	size_t
>386	IdentifierDeclStatement	 
>387	IdentifierDecl	* buffer = a -> getBuffer ( )
>388	AssignmentExpr	* buffer = a -> getBuffer ( )
>389	CallExpression	a -> getBuffer ( )
>390	ArgumentList	 
>391	Callee	a -> getBuffer
>392	PtrMemberAccess	a -> getBuffer
>393	Identifier	getBuffer
>394	Identifier	a
>395	Identifier	buffer
>396	Identifier	buffer
>397	IdentifierDeclType	void *
>398	ExpressionStatement	 
>399	CallExpression	a -> allocateBuffer ( node . size ( ) )
>400	ArgumentList	node . size ( )
>401	Argument	node . size ( )
>402	CallExpression	node . size ( )
>403	ArgumentList	 
>404	Callee	node . size
>405	MemberAccess	node . size
>406	Identifier	size
>407	Identifier	node
>408	Callee	a -> allocateBuffer
>409	PtrMemberAccess	a -> allocateBuffer
>410	Identifier	allocateBuffer
>411	Identifier	a
>412	ExpressionStatement	 
>413	CallExpression	NTA_CHECK ( node . GetType ( ) == YAML 
>414	ArgumentList	node . GetType ( ) == YAML 
>415	Argument	node . GetType ( ) == YAML 
>416	EqualityExpression	node . GetType ( ) == YAML 
>417	Identifier	YAML 
>418	CallExpression	node . GetType ( )
>419	ArgumentList	 
>420	Callee	node . GetType
>421	MemberAccess	node . GetType
>422	Identifier	GetType
>423	Identifier	node
>424	Callee	NTA_CHECK
>425	Identifier	NTA_CHECK
>444	FunctionDef	toValue (const YAML 
>445	ParameterList	const YAML 
>446	Parameter	 
>447	Identifier	dataType
>448	ParameterType	NTA_BasicType
>449	Parameter	 
>450	Identifier	node
>451	ParameterType	const YAML 
>452	ReturnType	static Value
>453	CompoundStatement	 
>454	IfStatement	if ( node . GetType ( ) == YAML 
>455	ElseStatement	else
>456	CompoundStatement	 
>457	ReturnStatement	 
>458	Identifier	v
>459	IdentifierDeclStatement	 
>460	IdentifierDecl	v ( a )
>461	Identifier	a
>462	Identifier	v
>463	IdentifierDeclType	Value
>464	ExpressionStatement	 
>465	CallExpression	toArray ( node , a )
>466	ArgumentList	node
>467	Argument	a
>468	Identifier	a
>469	Argument	node
>470	Identifier	node
>471	Callee	toArray
>472	Identifier	toArray
>473	IdentifierDeclStatement	 
>474	IdentifierDecl	a ( new Array ( dataType ) )
>475	Identifier	dataType
>476	Identifier	a
>477	IdentifierDeclType	boost 
>478	CompoundStatement	 
>479	IfStatement	if ( dataType == NTA_BasicType_Byte )
>480	ElseStatement	else
>481	CompoundStatement	 
>482	ReturnStatement	 
>483	Identifier	v
>484	IdentifierDeclStatement	 
>485	IdentifierDecl	v ( s )
>486	Identifier	s
>487	Identifier	v
>488	IdentifierDeclType	Value
>489	ExpressionStatement	 
>490	CallExpression	toScalar ( node , s )
>491	ArgumentList	node
>492	Argument	s
>493	Identifier	s
>494	Argument	node
>495	Identifier	node
>496	Callee	toScalar
>497	Identifier	toScalar
>498	IdentifierDeclStatement	 
>499	IdentifierDecl	s ( new Scalar ( dataType ) )
>500	Identifier	dataType
>501	Identifier	s
>502	IdentifierDeclType	boost 
>503	CompoundStatement	 
>504	ReturnStatement	 
>505	Identifier	v
>506	IdentifierDeclStatement	 
>507	IdentifierDecl	v ( str )
>508	Identifier	str
>509	Identifier	v
>510	IdentifierDeclType	Value
>511	IdentifierDeclStatement	 
>512	IdentifierDecl	str ( new std 
>513	Identifier	val
>514	Identifier	str
>515	IdentifierDeclType	boost 
>516	ExpressionStatement	 
>517	CallExpression	node . Read ( val )
>518	ArgumentList	val
>519	Argument	val
>520	Identifier	val
>521	Callee	node . Read
>522	MemberAccess	node . Read
>523	Identifier	Read
>524	Identifier	node
>525	IdentifierDeclStatement	 
>526	IdentifierDecl	val
>527	Identifier	val
>528	IdentifierDeclType	std 
>529	Condition	 
>530	EqualityExpression	dataType == NTA_BasicType_Byte
>531	Identifier	NTA_BasicType_Byte
>532	Identifier	dataType
>533	Condition	 
>534	EqualityExpression	node . GetType ( ) == YAML 
>535	Identifier	YAML 
>536	CallExpression	node . GetType ( )
>537	ArgumentList	 
>538	Callee	node . GetType
>539	MemberAccess	node . GetType
>540	Identifier	GetType
>541	Identifier	node
>542	IfStatement	if ( node . GetType ( ) == YAML 
>543	CompoundStatement	 
>544	ExpressionStatement	 
>545	ShiftExpression	NTA_THROW << \"YAML string does not not represent a value.\"
>546	PrimaryExpression	\"YAML string does not not represent a value.\"
>547	Identifier	NTA_THROW
>548	Condition	 
>549	OrExpression	node . GetType ( ) == YAML 
>550	EqualityExpression	node . GetType ( ) == YAML 
>551	Identifier	YAML 
>552	CallExpression	node . GetType ( )
>553	ArgumentList	 
>554	Callee	node . GetType
>555	MemberAccess	node . GetType
>556	Identifier	GetType
>557	Identifier	node
>558	EqualityExpression	node . GetType ( ) == YAML 
>559	Identifier	YAML 
>560	CallExpression	node . GetType ( )
>561	ArgumentList	 
>562	Callee	node . GetType
>563	MemberAccess	node . GetType
>564	Identifier	GetType
>565	Identifier	node
>581	FunctionDef	toValue (const std 
>582	ParameterList	const std 
>583	Parameter	 
>584	Identifier	dataType
>585	ParameterType	NTA_BasicType
>586	Parameter	 
>587	Identifier	yamlstring
>588	ParameterType	const std 
>589	ReturnType	Value
>590	CompoundStatement	 
>591	ReturnStatement	 
>592	Identifier	v
>593	IdentifierDeclStatement	 
>594	IdentifierDecl	v = toValue ( doc , dataType )
>595	AssignmentExpr	v = toValue ( doc , dataType )
>596	CallExpression	toValue ( doc , dataType )
>597	ArgumentList	doc
>598	Argument	dataType
>599	Identifier	dataType
>600	Argument	doc
>601	Identifier	doc
>602	Callee	toValue
>603	Identifier	toValue
>604	Identifier	v
>605	Identifier	v
>606	IdentifierDeclType	Value
>607	IfStatement	if ( ! success )
>608	CompoundStatement	 
>609	ExpressionStatement	 
>610	ShiftExpression	NTA_THROW << \"Unable to parse YAML string '\" << ys << \"' for a scalar value\"
>611	ShiftExpression	\"Unable to parse YAML string '\" << ys << \"' for a scalar value\"
>612	ShiftExpression	ys << \"' for a scalar value\"
>613	PrimaryExpression	\"' for a scalar value\"
>614	Identifier	ys
>615	PrimaryExpression	\"Unable to parse YAML string '\"
>616	Identifier	NTA_THROW
>617	IfStatement	if ( ys . size ( ) > 30 )
>618	CompoundStatement	 
>619	ExpressionStatement	 
>620	AssignmentExpr	ys = ys . substr ( 0 , 30 ) + \"...\"
>621	AdditiveExpression	ys . substr ( 0 , 30 ) + \"...\"
>622	PrimaryExpression	\"...\"
>623	CallExpression	ys . substr ( 0 , 30 )
>624	ArgumentList	0
>625	Argument	30
>626	PrimaryExpression	30
>627	Argument	0
>628	PrimaryExpression	0
>629	Callee	ys . substr
>630	MemberAccess	ys . substr
>631	Identifier	substr
>632	Identifier	ys
>633	Identifier	ys
>634	Condition	 
>635	RelationalExpression	ys . size ( ) > 30
>636	PrimaryExpression	30
>637	CallExpression	ys . size ( )
>638	ArgumentList	 
>639	Callee	ys . size
>640	MemberAccess	ys . size
>641	Identifier	size
>642	Identifier	ys
>643	IdentifierDeclStatement	 
>644	IdentifierDecl	ys ( paddedstring )
>645	Identifier	paddedstring
>646	Identifier	ys
>647	IdentifierDeclType	std 
>648	Condition	 
>649	UnaryOp	! success
>650	Identifier	success
>651	UnaryOperator	!
>652	CompoundStatement	 
>653	ExpressionStatement	 
>654	AssignmentExpr	success = false
>655	Identifier	false
>656	Identifier	success
>657	Statement	 
>658	Statement	 
>659	Statement	 
>660	Statement	 
>661	Statement	 
>662	Statement	 
>663	BlockStarter	 
>664	CompoundStatement	 
>665	ExpressionStatement	success = parser . GetNextDocument ( doc )
>666	AssignmentExpr	success = parser . GetNextDocument ( doc )
>667	CallExpression	parser . GetNextDocument ( doc )
>668	ArgumentList	doc
>669	Argument	doc
>670	Identifier	doc
>671	Callee	parser . GetNextDocument
>672	MemberAccess	parser . GetNextDocument
>673	Identifier	GetNextDocument
>674	Identifier	parser
>675	Identifier	success
>676	IdentifierDeclStatement	YAML 
>677	IdentifierDecl	parser ( s )
>678	Identifier	s
>679	Identifier	parser
>680	IdentifierDeclType	YAML 
>681	IdentifierDeclStatement	 
>682	IdentifierDecl	doc
>683	Identifier	doc
>684	IdentifierDeclType	YAML 
>685	IdentifierDeclStatement	 
>686	IdentifierDecl	success = false
>687	AssignmentExpr	success = false
>688	Identifier	false
>689	Identifier	false
>690	Identifier	success
>691	IdentifierDeclType	bool
>692	IdentifierDeclStatement	 
>693	IdentifierDecl	s ( paddedstring )
>694	Identifier	paddedstring
>695	Identifier	s
>696	IdentifierDeclType	std 
>697	IfStatement	if ( paddedstring . size ( ) < 2 )
>698	ExpressionStatement	 
>699	AssignmentExpr	paddedstring = paddedstring + \" \"
>700	AdditiveExpression	paddedstring + \" \"
>701	PrimaryExpression	\" \"
>702	Identifier	paddedstring
>703	Identifier	paddedstring
>704	Condition	 
>705	RelationalExpression	paddedstring . size ( ) < 2
>706	PrimaryExpression	2
>707	CallExpression	paddedstring . size ( )
>708	ArgumentList	 
>709	Callee	paddedstring . size
>710	MemberAccess	paddedstring . size
>711	Identifier	size
>712	Identifier	paddedstring
>713	IdentifierDeclStatement	 
>714	IdentifierDecl	paddedstring ( yamlstring )
>715	Identifier	yamlstring
>716	Identifier	paddedstring
>717	IdentifierDeclType	std 
>736	FunctionDef	toValueMap (const char * yamlstring , Collection < ParameterSpec > & parameters , const std 
>737	ParameterList	const char * yamlstring , Collection < ParameterSpec > & parameters , const std 
>738	Parameter	 
>739	Identifier	regionName
>740	ParameterType	const std 
>741	Parameter	 
>742	Identifier	nodeType
>743	ParameterType	const std 
>744	Parameter	 
>745	Identifier	parameters
>746	ParameterType	Collection < ParameterSpec > &
>747	Parameter	 
>748	Identifier	yamlstring
>749	ParameterType	const char *
>750	ReturnType	ValueMap
>751	CompoundStatement	 
>752	ReturnStatement	 
>753	Identifier	vm
>754	ForStatement	for ( size_t i = 0 ; i < parameters . getCount ( ) ; i ++ )
>755	CompoundStatement	 
>756	IfStatement	if ( ! vm . contains ( item . first ) )
>757	CompoundStatement	 
>758	IfStatement	if ( ps . defaultValue != \"\" )
>759	CompoundStatement	 
>760	CompoundStatement	 
>761	ExpressionStatement	 
>762	ShiftExpression	NTA_THROW << \"Unable to set default value for item '\" << item . first << \"' of datatype \" << BasicType 
>763	ShiftExpression	\"Unable to set default value for item '\" << item . first << \"' of datatype \" << BasicType 
>764	ShiftExpression	item . first << \"' of datatype \" << BasicType 
>765	ShiftExpression	\"' of datatype \" << BasicType 
>766	ShiftExpression	BasicType 
>767	ShiftExpression	\" with value '\" << ps . defaultValue << \"'\"
>768	ShiftExpression	ps . defaultValue << \"'\"
>769	PrimaryExpression	\"'\"
>770	MemberAccess	ps . defaultValue
>771	Identifier	defaultValue
>772	Identifier	ps
>773	PrimaryExpression	\" with value '\"
>774	CallExpression	BasicType 
>775	ArgumentList	ps . dataType
>776	Argument	ps . dataType
>777	MemberAccess	ps . dataType
>778	Identifier	dataType
>779	Identifier	ps
>780	Callee	BasicType 
>781	Identifier	BasicType 
>782	PrimaryExpression	\"' of datatype \"
>783	MemberAccess	item . first
>784	Identifier	first
>785	Identifier	item
>786	PrimaryExpression	\"Unable to set default value for item '\"
>787	Identifier	NTA_THROW
>788	Statement	 
>789	Statement	 
>790	Statement	 
>791	Statement	 
>792	Statement	 
>793	Statement	 
>794	BlockStarter	 
>795	CompoundStatement	 
>796	ExpressionStatement	vm . add ( item . first , v )
>797	CallExpression	vm . add ( item . first , v )
>798	ArgumentList	item . first
>799	Argument	v
>800	Identifier	v
>801	Argument	item . first
>802	MemberAccess	item . first
>803	Identifier	first
>804	Identifier	item
>805	Callee	vm . add
>806	MemberAccess	vm . add
>807	Identifier	add
>808	Identifier	vm
>809	IdentifierDeclStatement	Value v = toValue ( ps . defaultValue , ps . dataType ) ;
>810	IdentifierDecl	v = toValue ( ps . defaultValue , ps . dataType )
>811	AssignmentExpr	v = toValue ( ps . defaultValue , ps . dataType )
>812	CallExpression	toValue ( ps . defaultValue , ps . dataType )
>813	ArgumentList	ps . defaultValue
>814	Argument	ps . dataType
>815	MemberAccess	ps . dataType
>816	Identifier	dataType
>817	Identifier	ps
>818	Argument	ps . defaultValue
>819	MemberAccess	ps . defaultValue
>820	Identifier	defaultValue
>821	Identifier	ps
>822	Callee	toValue
>823	Identifier	toValue
>824	Identifier	v
>825	Identifier	v
>826	IdentifierDeclType	Value
>827	ExpressionStatement	NTA_DEBUG << \"Adding default value '\" << ps . defaultValue << \"' to parameter \" << item . first << \" of type \" << \
>828	ShiftExpression	NTA_DEBUG << \"Adding default value '\" << ps . defaultValue << \"' to parameter \" << item . first << \" \
>829	ShiftExpression	\"Adding default value '\" << ps . defaultValue << \"' to parameter \" << item . first << \" of type \" << \
>830	ShiftExpression	ps . defaultValue << \"' to parameter \" << item . first << \" of type \" << BasicType 
>831	ShiftExpression	\"' to parameter \" << item . first << \" of type \" << BasicType 
>832	ShiftExpression	item . first << \" of type \" << BasicType 
>833	ShiftExpression	\" of type \" << BasicType 
>834	ShiftExpression	BasicType 
>835	ShiftExpression	\" count \" << ps . count
>836	MemberAccess	ps . count
>837	Identifier	count
>838	Identifier	ps
>839	PrimaryExpression	\" count \"
>840	CallExpression	BasicType 
>841	ArgumentList	ps . dataType
>842	Argument	ps . dataType
>843	MemberAccess	ps . dataType
>844	Identifier	dataType
>845	Identifier	ps
>846	Callee	BasicType 
>847	Identifier	BasicType 
>848	PrimaryExpression	\" of type \"
>849	MemberAccess	item . first
>850	Identifier	first
>851	Identifier	item
>852	PrimaryExpression	\"' to parameter \"
>853	MemberAccess	ps . defaultValue
>854	Identifier	defaultValue
>855	Identifier	ps
>856	PrimaryExpression	\"Adding default value '\"
>857	Identifier	NTA_DEBUG
>858	Condition	 
>859	EqualityExpression	ps . defaultValue != \"\"
>860	PrimaryExpression	\"\"
>861	MemberAccess	ps . defaultValue
>862	Identifier	defaultValue
>863	Identifier	ps
>864	IdentifierDeclStatement	 
>865	IdentifierDecl	& ps = item . second
>866	AssignmentExpr	& ps = item . second
>867	MemberAccess	item . second
>868	Identifier	second
>869	Identifier	item
>870	Identifier	ps
>871	Identifier	ps
>872	IdentifierDeclType	ParameterSpec &
>873	Condition	 
>874	UnaryOp	! vm . contains ( item . first )
>875	CallExpression	vm . contains ( item . first )
>876	ArgumentList	item . first
>877	Argument	item . first
>878	MemberAccess	item . first
>879	Identifier	first
>880	Identifier	item
>881	Callee	vm . contains
>882	MemberAccess	vm . contains
>883	Identifier	contains
>884	Identifier	vm
>885	UnaryOperator	!
>886	IdentifierDeclStatement	 
>887	IdentifierDecl	& item = parameters . getByIndex ( i )
>888	AssignmentExpr	& item = parameters . getByIndex ( i )
>889	CallExpression	parameters . getByIndex ( i )
>890	ArgumentList	i
>891	Argument	i
>892	Identifier	i
>893	Callee	parameters . getByIndex
>894	MemberAccess	parameters . getByIndex
>895	Identifier	getByIndex
>896	Identifier	parameters
>897	Identifier	item
>898	Identifier	item
>899	IdentifierDeclType	std 
>900	IncDecOp	 
>901	IncDec	++
>902	Identifier	i
>903	Condition	 
>904	RelationalExpression	i < parameters . getCount ( )
>905	CallExpression	parameters . getCount ( )
>906	ArgumentList	 
>907	Callee	parameters . getCount
>908	MemberAccess	parameters . getCount
>909	Identifier	getCount
>910	Identifier	parameters
>911	Identifier	i
>912	ForInit	 
>913	IdentifierDeclStatement	size_t i = 0 ;
>914	IdentifierDecl	i = 0
>915	AssignmentExpr	i = 0
>916	PrimaryExpression	0
>917	Identifier	i
>918	Identifier	i
>919	IdentifierDeclType	size_t
>920	ForStatement	for ( i = doc . begin ( ) ; i != doc . end ( ) ; i ++ )
>921	CompoundStatement	 
>922	BlockStarter	 
>923	CompoundStatement	 
>924	ExpressionStatement	NTA_THROW << \"Unable to set parameter '\" << key << \"'. \" << e . what ( )
>925	ShiftExpression	NTA_THROW << \"Unable to set parameter '\" << key << \"'. \" << e . what ( )
>926	ShiftExpression	\"Unable to set parameter '\" << key << \"'. \" << e . what ( )
>927	ShiftExpression	key << \"'. \" << e . what ( )
>928	ShiftExpression	\"'. \" << e . what ( )
>929	CallExpression	e . what ( )
>930	ArgumentList	 
>931	Callee	e . what
>932	MemberAccess	e . what
>933	Identifier	what
>934	Identifier	e
>935	PrimaryExpression	\"'. \"
>936	Identifier	key
>937	PrimaryExpression	\"Unable to set parameter '\"
>938	Identifier	NTA_THROW
>939	Identifier	e
>940	BlockStarter	 
>941	CompoundStatement	 
>942	ExpressionStatement	vm . add ( key , v )
>943	CallExpression	vm . add ( key , v )
>944	ArgumentList	key
>945	Argument	v
>946	Identifier	v
>947	Argument	key
>948	Identifier	key
>949	Callee	vm . add
>950	MemberAccess	vm . add
>951	Identifier	add
>952	Identifier	vm
>953	IfStatement	if ( ! v . isScalar ( ) && spec . count == 1 )
>954	CompoundStatement	 
>955	ExpressionStatement	std 
>956	CallExpression	std 
>957	ArgumentList	\"Expected scalar value but got array value\"
>958	Argument	\"Expected scalar value but got array value\"
>959	PrimaryExpression	\"Expected scalar value but got array value\"
>960	Callee	std 
>961	Identifier	std 
>962	Statement	throw
>963	Condition	! v . isScalar ( ) && spec . count == 1
>964	AndExpression	! v . isScalar ( ) && spec . count == 1
>965	EqualityExpression	spec . count == 1
>966	PrimaryExpression	1
>967	MemberAccess	spec . count
>968	Identifier	count
>969	Identifier	spec
>970	UnaryOp	! v . isScalar ( )
>971	CallExpression	v . isScalar ( )
>972	ArgumentList	 
>973	Callee	v . isScalar
>974	MemberAccess	v . isScalar
>975	Identifier	isScalar
>976	Identifier	v
>977	UnaryOperator	!
>978	IfStatement	if ( v . isScalar ( ) && spec . count != 1 )
>979	CompoundStatement	 
>980	ExpressionStatement	std 
>981	CallExpression	std 
>982	ArgumentList	\"Expected array value but got scalar value\"
>983	Argument	\"Expected array value but got scalar value\"
>984	PrimaryExpression	\"Expected array value but got scalar value\"
>985	Callee	std 
>986	Identifier	std 
>987	Statement	throw
>988	Condition	v . isScalar ( ) && spec . count != 1
>989	AndExpression	v . isScalar ( ) && spec . count != 1
>990	EqualityExpression	spec . count != 1
>991	PrimaryExpression	1
>992	MemberAccess	spec . count
>993	Identifier	count
>994	Identifier	spec
>995	CallExpression	v . isScalar ( )
>996	ArgumentList	 
>997	Callee	v . isScalar
>998	MemberAccess	v . isScalar
>999	Identifier	isScalar
>1000	Identifier	v
>1001	IdentifierDeclStatement	Value v = toValue ( i . second ( ) , spec . dataType ) ;
>1002	IdentifierDecl	v = toValue ( i . second ( ) , spec . dataType )
>1003	AssignmentExpr	v = toValue ( i . second ( ) , spec . dataType )
>1004	CallExpression	toValue ( i . second ( ) , spec . dataType )
>1005	ArgumentList	i . second ( )
>1006	Argument	spec . dataType
>1007	MemberAccess	spec . dataType
>1008	Identifier	dataType
>1009	Identifier	spec
>1010	Argument	i . second ( )
>1011	CallExpression	i . second ( )
>1012	ArgumentList	 
>1013	Callee	i . second
>1014	MemberAccess	i . second
>1015	Identifier	second
>1016	Identifier	i
>1017	Callee	toValue
>1018	Identifier	toValue
>1019	Identifier	v
>1020	Identifier	v
>1021	IdentifierDeclType	Value
>1022	IdentifierDeclStatement	 
>1023	IdentifierDecl	spec = parameters . getByName ( key )
>1024	AssignmentExpr	spec = parameters . getByName ( key )
>1025	CallExpression	parameters . getByName ( key )
>1026	ArgumentList	key
>1027	Argument	key
>1028	Identifier	key
>1029	Callee	parameters . getByName
>1030	MemberAccess	parameters . getByName
>1031	Identifier	getByName
>1032	Identifier	parameters
>1033	Identifier	spec
>1034	Identifier	spec
>1035	IdentifierDeclType	ParameterSpec
>1036	IfStatement	if ( vm . contains ( key ) )
>1037	ExpressionStatement	 
>1038	ShiftExpression	NTA_THROW << \"Parameter '\" << key << \"' specified more than once in YAML document\"
>1039	ShiftExpression	\"Parameter '\" << key << \"' specified more than once in YAML document\"
>1040	ShiftExpression	key << \"' specified more than once in YAML document\"
>1041	PrimaryExpression	\"' specified more than once in YAML document\"
>1042	Identifier	key
>1043	PrimaryExpression	\"Parameter '\"
>1044	Identifier	NTA_THROW
>1045	Condition	 
>1046	CallExpression	vm . contains ( key )
>1047	ArgumentList	key
>1048	Argument	key
>1049	Identifier	key
>1050	Callee	vm . contains
>1051	MemberAccess	vm . contains
>1052	Identifier	contains
>1053	Identifier	vm
>1054	IfStatement	if ( ! parameters . contains ( key ) )
>1055	CompoundStatement	 
>1056	IfStatement	if ( nodeType == std 
>1057	ElseStatement	else
>1058	CompoundStatement	 
>1059	ExpressionStatement	 
>1060	ShiftExpression	NTA_THROW << \"Unknown parameter '\" << key << \"' for region '\" << regionName << \"' of type '\" << nodeType << \"'\n\" << \"\
>1061	ShiftExpression	\"Unknown parameter '\" << key << \"' for region '\" << regionName << \"' of type '\" << nodeType << \"'\n\" << \"\
>1062	ShiftExpression	key << \"' for region '\" << regionName << \"' of type '\" << nodeType << \"'\n\" << \"Valid parameters are
>1063	ShiftExpression	\"' for region '\" << regionName << \"' of type '\" << nodeType << \"'\n\" << \"Valid parameters are
>1064	ShiftExpression	regionName << \"' of type '\" << nodeType << \"'\n\" << \"Valid parameters are
>1065	ShiftExpression	\"' of type '\" << nodeType << \"'\n\" << \"Valid parameters are
>1066	ShiftExpression	nodeType << \"'\n\" << \"Valid parameters are
>1067	ShiftExpression	\"'\n\" << \"Valid parameters are
>1068	ShiftExpression	\"Valid parameters are
>1069	CallExpression	ss . str ( )
>1070	ArgumentList	 
>1071	Callee	ss . str
>1072	MemberAccess	ss . str
>1073	Identifier	str
>1074	Identifier	ss
>1075	PrimaryExpression	\"Valid parameters are
>1076	PrimaryExpression	\"'\n\"
>1077	Identifier	nodeType
>1078	PrimaryExpression	\"' of type '\"
>1079	Identifier	regionName
>1080	PrimaryExpression	\"' for region '\"
>1081	Identifier	key
>1082	PrimaryExpression	\"Unknown parameter '\"
>1083	Identifier	NTA_THROW
>1084	ExpressionStatement	 
>1085	CallExpression	NTA_CHECK ( regionName != std 
>1086	ArgumentList	regionName != std 
>1087	Argument	regionName != std 
>1088	EqualityExpression	regionName != std 
>1089	CallExpression	std 
>1090	ArgumentList	\"\"
>1091	Argument	\"\"
>1092	PrimaryExpression	\"\"
>1093	Callee	std 
>1094	Identifier	std 
>1095	Identifier	regionName
>1096	Callee	NTA_CHECK
>1097	Identifier	NTA_CHECK
>1098	CompoundStatement	 
>1099	ExpressionStatement	 
>1100	ShiftExpression	NTA_THROW << \"Unknown parameter '\" << key << \"'\n\" << \"Valid parameters are
>1101	ShiftExpression	\"Unknown parameter '\" << key << \"'\n\" << \"Valid parameters are
>1102	ShiftExpression	key << \"'\n\" << \"Valid parameters are
>1103	ShiftExpression	\"'\n\" << \"Valid parameters are
>1104	ShiftExpression	\"Valid parameters are
>1105	CallExpression	ss . str ( )
>1106	ArgumentList	 
>1107	Callee	ss . str
>1108	MemberAccess	ss . str
>1109	Identifier	str
>1110	Identifier	ss
>1111	PrimaryExpression	\"Valid parameters are
>1112	PrimaryExpression	\"'\n\"
>1113	Identifier	key
>1114	PrimaryExpression	\"Unknown parameter '\"
>1115	Identifier	NTA_THROW
>1116	Condition	 
>1117	EqualityExpression	nodeType == std 
>1118	CallExpression	std 
>1119	ArgumentList	\"\"
>1120	Argument	\"\"
>1121	PrimaryExpression	\"\"
>1122	Callee	std 
>1123	Identifier	std 
>1124	Identifier	nodeType
>1125	ForStatement	for ( UInt j = 0 ; j < parameters . getCount ( ) ; j ++ )
>1126	CompoundStatement	 
>1127	ExpressionStatement	 
>1128	ShiftExpression	ss << \"   \" << parameters . getByIndex ( j ) . first << \"\n\"
>1129	ShiftExpression	\"   \" << parameters . getByIndex ( j ) . first << \"\n\"
>1130	ShiftExpression	parameters . getByIndex ( j ) . first << \"\n\"
>1131	PrimaryExpression	\"\n\"
>1132	MemberAccess	parameters . getByIndex ( j ) . first
>1133	Identifier	first
>1134	CallExpression	parameters . getByIndex ( j )
>1135	ArgumentList	j
>1136	Argument	j
>1137	Identifier	j
>1138	Callee	parameters . getByIndex
>1139	MemberAccess	parameters . getByIndex
>1140	Identifier	getByIndex
>1141	Identifier	parameters
>1142	PrimaryExpression	\"   \"
>1143	Identifier	ss
>1144	IncDecOp	 
>1145	IncDec	++
>1146	Identifier	j
>1147	Condition	 
>1148	RelationalExpression	j < parameters . getCount ( )
>1149	CallExpression	parameters . getCount ( )
>1150	ArgumentList	 
>1151	Callee	parameters . getCount
>1152	MemberAccess	parameters . getCount
>1153	Identifier	getCount
>1154	Identifier	parameters
>1155	Identifier	j
>1156	ForInit	 
>1157	IdentifierDeclStatement	UInt j = 0 ;
>1158	IdentifierDecl	j = 0
>1159	AssignmentExpr	j = 0
>1160	PrimaryExpression	0
>1161	Identifier	j
>1162	Identifier	j
>1163	IdentifierDeclType	UInt
>1164	IdentifierDeclStatement	 
>1165	IdentifierDecl	ss
>1166	Identifier	ss
>1167	IdentifierDeclType	std 
>1168	Condition	 
>1169	UnaryOp	! parameters . contains ( key )
>1170	CallExpression	parameters . contains ( key )
>1171	ArgumentList	key
>1172	Argument	key
>1173	Identifier	key
>1174	Callee	parameters . contains
>1175	MemberAccess	parameters . contains
>1176	Identifier	contains
>1177	Identifier	parameters
>1178	UnaryOperator	!
>1179	ExpressionStatement	 
>1180	Statement	 
>1181	Statement	 
>1182	Statement	 
>1183	Statement	 
>1184	Statement	 
>1185	Statement	 
>1186	Statement	 
>1187	Statement	 
>1188	Statement	 
>1189	Statement	 
>1190	Statement	 
>1191	Statement	 
>1192	Statement	 
>1193	Statement	 
>1194	Statement	 
>1195	Statement	 
>1196	Statement	 
>1197	Statement	 
>1198	Statement	 
>1199	Statement	 
>1200	IncDecOp	 
>1201	IncDec	++
>1202	Identifier	i
>1203	Condition	 
>1204	EqualityExpression	i != doc . end ( )
>1205	CallExpression	doc . end ( )
>1206	ArgumentList	 
>1207	Callee	doc . end
>1208	MemberAccess	doc . end
>1209	Identifier	end
>1210	Identifier	doc
>1211	Identifier	i
>1212	ForInit	 
>1213	AssignmentExpr	i = doc . begin ( )
>1214	CallExpression	doc . begin ( )
>1215	ArgumentList	 
>1216	Callee	doc . begin
>1217	MemberAccess	doc . begin
>1218	Identifier	begin
>1219	Identifier	doc
>1220	Identifier	i
>1221	IdentifierDeclStatement	 
>1222	IdentifierDecl	i
>1223	Identifier	i
>1224	IdentifierDeclType	YAML 
>1225	IfStatement	if ( ! empty )
>1226	CompoundStatement	 
>1227	IfStatement	if ( doc . GetType ( ) != YAML 
>1228	CompoundStatement	 
>1229	ExpressionStatement	 
>1230	ShiftExpression	NTA_THROW << \"YAML string '\" << ys << \"' does not not specify a dictionary of key-value pairs. \" << \"\
>1231	ShiftExpression	\"YAML string '\" << ys << \"' does not not specify a dictionary of key-value pairs. \" << \"Region and Link \
>1232	ShiftExpression	ys << \"' does not not specify a dictionary of key-value pairs. \" << \"Region and Link parameters must \
>1233	ShiftExpression	\"' does not not specify a dictionary of key-value pairs. \" << \"Region and Link parameters must be specified \
>1234	PrimaryExpression	\"Region and Link parameters must be specified at a dictionary\"
>1235	PrimaryExpression	\"' does not not specify a dictionary of key-value pairs. \"
>1236	Identifier	ys
>1237	PrimaryExpression	\"YAML string '\"
>1238	Identifier	NTA_THROW
>1239	IfStatement	if ( ys . size ( ) > 30 )
>1240	CompoundStatement	 
>1241	ExpressionStatement	 
>1242	AssignmentExpr	ys = ys . substr ( 0 , 30 ) + \"...\"
>1243	AdditiveExpression	ys . substr ( 0 , 30 ) + \"...\"
>1244	PrimaryExpression	\"...\"
>1245	CallExpression	ys . substr ( 0 , 30 )
>1246	ArgumentList	0
>1247	Argument	30
>1248	PrimaryExpression	30
>1249	Argument	0
>1250	PrimaryExpression	0
>1251	Callee	ys . substr
>1252	MemberAccess	ys . substr
>1253	Identifier	substr
>1254	Identifier	ys
>1255	Identifier	ys
>1256	Condition	 
>1257	RelationalExpression	ys . size ( ) > 30
>1258	PrimaryExpression	30
>1259	CallExpression	ys . size ( )
>1260	ArgumentList	 
>1261	Callee	ys . size
>1262	MemberAccess	ys . size
>1263	Identifier	size
>1264	Identifier	ys
>1265	IdentifierDeclStatement	 
>1266	IdentifierDecl	ys ( yamlstring )
>1267	Identifier	yamlstring
>1268	Identifier	ys
>1269	IdentifierDeclType	std 
>1270	Condition	 
>1271	EqualityExpression	doc . GetType ( ) != YAML 
>1272	Identifier	YAML 
>1273	CallExpression	doc . GetType ( )
>1274	ArgumentList	 
>1275	Callee	doc . GetType
>1276	MemberAccess	doc . GetType
>1277	Identifier	GetType
>1278	Identifier	doc
>1279	IfStatement	if ( ! success )
>1280	ExpressionStatement	 
>1281	ShiftExpression	NTA_THROW << \"Unable to find document in YAML string\"
>1282	PrimaryExpression	\"Unable to find document in YAML string\"
>1283	Identifier	NTA_THROW
>1284	Condition	 
>1285	UnaryOp	! success
>1286	Identifier	success
>1287	UnaryOperator	!
>1288	IdentifierDeclStatement	 
>1289	IdentifierDecl	success = parser . GetNextDocument ( doc )
>1290	AssignmentExpr	success = parser . GetNextDocument ( doc )
>1291	CallExpression	parser . GetNextDocument ( doc )
>1292	ArgumentList	doc
>1293	Argument	doc
>1294	Identifier	doc
>1295	Callee	parser . GetNextDocument
>1296	MemberAccess	parser . GetNextDocument
>1297	Identifier	GetNextDocument
>1298	Identifier	parser
>1299	Identifier	success
>1300	Identifier	success
>1301	IdentifierDeclType	bool
>1302	IdentifierDeclStatement	 
>1303	IdentifierDecl	parser ( s )
>1304	Identifier	s
>1305	Identifier	parser
>1306	IdentifierDeclType	YAML 
>1307	Condition	 
>1308	UnaryOp	! empty
>1309	Identifier	empty
>1310	UnaryOperator	!
>1311	IdentifierDeclStatement	 
>1312	IdentifierDecl	doc
>1313	Identifier	doc
>1314	IdentifierDeclType	YAML 
>1315	IdentifierDeclStatement	 
>1316	IdentifierDecl	s ( paddedstring )
>1317	Identifier	paddedstring
>1318	Identifier	s
>1319	IdentifierDeclType	std 
>1320	IfStatement	if ( paddedstring . size ( ) < 2 )
>1321	ExpressionStatement	 
>1322	AssignmentExpr	paddedstring = paddedstring + \" \"
>1323	AdditiveExpression	paddedstring + \" \"
>1324	PrimaryExpression	\" \"
>1325	Identifier	paddedstring
>1326	Identifier	paddedstring
>1327	Condition	 
>1328	RelationalExpression	paddedstring . size ( ) < 2
>1329	PrimaryExpression	2
>1330	CallExpression	paddedstring . size ( )
>1331	ArgumentList	 
>1332	Callee	paddedstring . size
>1333	MemberAccess	paddedstring . size
>1334	Identifier	size
>1335	Identifier	paddedstring
>1336	IdentifierDeclStatement	 
>1337	IdentifierDecl	empty = ( paddedstring . size ( ) == 0 )
>1338	AssignmentExpr	empty = ( paddedstring . size ( ) == 0 )
>1339	EqualityExpression	paddedstring . size ( ) == 0
>1340	PrimaryExpression	0
>1341	CallExpression	paddedstring . size ( )
>1342	ArgumentList	 
>1343	Callee	paddedstring . size
>1344	MemberAccess	paddedstring . size
>1345	Identifier	size
>1346	Identifier	paddedstring
>1347	Identifier	empty
>1348	Identifier	empty
>1349	IdentifierDeclType	bool
>1350	IdentifierDeclStatement	 
>1351	IdentifierDecl	paddedstring ( yamlstring )
>1352	Identifier	yamlstring
>1353	Identifier	paddedstring
>1354	IdentifierDeclType	std 
>1355	IdentifierDeclStatement	 
>1356	IdentifierDecl	vm
>1357	Identifier	vm
>1358	IdentifierDeclType	ValueMap
<9=18,17,10
<10=14,11
<11=13,12
<14=16,15
<18=157,19
<19=150,20
<20=148,144,143,141,133,132,130,122,121,119,111,110,108,100,99,97,89,88,86,78,77,75,67,66,64,56,55,53,49,48,46,42,38,21
<21=22
<22=37,23
<23=36,24
<24=30,25
<25=29,26
<26=28,27
<30=32,31
<32=33
<33=35,34
<38=39
<39=41,40
<42=43
<43=45,44
<46=47
<49=50
<50=52,51
<53=54
<56=57
<57=63,58
<58=60,59
<60=62,61
<64=65
<67=68
<68=74,69
<69=71,70
<71=73,72
<75=76
<78=79
<79=85,80
<80=82,81
<82=84,83
<86=87
<89=90
<90=96,91
<91=93,92
<93=95,94
<97=98
<100=101
<101=107,102
<102=104,103
<104=106,105
<108=109
<111=112
<112=118,113
<113=115,114
<115=117,116
<119=120
<122=123
<123=129,124
<124=126,125
<126=128,127
<130=131
<133=134
<134=140,135
<135=137,136
<137=139,138
<141=142
<144=145
<145=147,146
<148=149
<150=151
<151=153,152
<153=154
<154=156,155
<157=158
<158=169,159
<159=160
<160=161
<161=163,162
<163=165,164
<165=166
<166=168,167
<169=170
<182=191,190,183
<183=187,184
<184=186,185
<187=189,188
<191=412,398,386,192
<192=378,369,366,193
<193=357,343,194
<194=336,195
<195=334,330,329,327,315,314,312,300,299,297,285,284,282,270,269,267,255,254,252,240,239,237,225,224,222,210,209,207,196
<196=197
<197=206,198
<198=205,199
<199=201,200
<201=202
<202=204,203
<207=208
<210=211
<211=219,212
<212=218,213
<213=215,214
<215=217,216
<219=221,220
<222=223
<225=226
<226=234,227
<227=233,228
<228=230,229
<230=232,231
<234=236,235
<237=238
<240=241
<241=249,242
<242=248,243
<243=245,244
<245=247,246
<249=251,250
<252=253
<255=256
<256=264,257
<257=263,258
<258=260,259
<260=262,261
<264=266,265
<267=268
<270=271
<271=279,272
<272=278,273
<273=275,274
<275=277,276
<279=281,280
<282=283
<285=286
<286=294,287
<287=293,288
<288=290,289
<290=292,291
<294=296,295
<297=298
<300=301
<301=309,302
<302=308,303
<303=305,304
<305=307,306
<309=311,310
<312=313
<315=316
<316=324,317
<317=323,318
<318=320,319
<320=322,321
<324=326,325
<327=328
<330=331
<331=333,332
<334=335
<336=337
<337=339,338
<339=340
<340=342,341
<343=344
<344=355,345
<345=346
<346=347
<347=349,348
<349=351,350
<351=352
<352=354,353
<355=356
<357=358
<358=365,364,359
<359=363,360
<360=362,361
<366=368,367
<369=370
<370=377,371
<371=373,372
<373=374
<374=376,375
<378=379
<379=380
<380=385,384,381
<381=383,382
<386=387
<387=397,396,388
<388=395,389
<389=391,390
<391=392
<392=394,393
<398=399
<399=408,400
<400=401
<401=402
<402=404,403
<404=405
<405=407,406
<408=409
<409=411,410
<412=413
<413=424,414
<414=415
<415=416
<416=418,417
<418=420,419
<420=421
<421=423,422
<424=425
<444=453,452,445
<445=449,446
<446=448,447
<449=451,450
<453=542,454
<454=533,478,455
<455=456
<456=473,464,459,457
<457=458
<459=460
<460=463,462,461
<464=465
<465=471,466
<466=469,467
<467=468
<469=470
<471=472
<473=474
<474=477,476,475
<478=479
<479=529,503,480
<480=481
<481=498,489,484,482
<482=483
<484=485
<485=488,487,486
<489=490
<490=496,491
<491=494,492
<492=493
<494=495
<496=497
<498=499
<499=502,501,500
<503=525,516,511,506,504
<504=505
<506=507
<507=510,509,508
<511=512
<512=515,514,513
<516=517
<517=521,518
<518=519
<519=520
<521=522
<522=524,523
<525=526
<526=528,527
<529=530
<530=532,531
<533=534
<534=536,535
<536=538,537
<538=539
<539=541,540
<542=548,543
<543=544
<544=545
<545=547,546
<548=549
<549=558,550
<550=552,551
<552=554,553
<554=555
<555=557,556
<558=560,559
<560=562,561
<562=563
<563=565,564
<581=590,589,582
<582=586,583
<583=585,584
<586=588,587
<590=713,697,692,685,681,663,662,661,660,659,658,657,652,607,593,591
<591=592
<593=594
<594=606,605,595
<595=604,596
<596=602,597
<597=600,598
<598=599
<600=601
<602=603
<607=648,608
<608=643,617,609
<609=610
<610=616,611
<611=615,612
<612=614,613
<617=634,618
<618=619
<619=620
<620=633,621
<621=623,622
<623=629,624
<624=627,625
<625=626
<627=628
<629=630
<630=632,631
<634=635
<635=637,636
<637=639,638
<639=640
<640=642,641
<643=644
<644=647,646,645
<648=649
<649=651,650
<652=653
<653=654
<654=656,655
<663=664
<664=676,665
<665=666
<666=675,667
<667=671,668
<668=669
<669=670
<671=672
<672=674,673
<676=677
<677=680,679,678
<681=682
<682=684,683
<685=686
<686=691,690,687
<687=689,688
<692=693
<693=696,695,694
<697=704,698
<698=699
<699=703,700
<700=702,701
<704=705
<705=707,706
<707=709,708
<709=710
<710=712,711
<713=714
<714=717,716,715
<736=751,750,737
<737=747,744,741,738
<738=740,739
<741=743,742
<744=746,745
<747=749,748
<751=1355,1350,1336,1320,1315,1311,1225,1221,920,754,752
<752=753
<754=912,903,900,755
<755=886,756
<756=873,757
<757=864,758
<758=858,759
<759=794,793,792,791,790,789,788,760
<760=761
<761=762
<762=787,763
<763=786,764
<764=783,765
<765=782,766
<766=774,767
<767=773,768
<768=770,769
<770=772,771
<774=780,775
<775=776
<776=777
<777=779,778
<780=781
<783=785,784
<794=795
<795=827,809,796
<796=797
<797=805,798
<798=801,799
<799=800
<801=802
<802=804,803
<805=806
<806=808,807
<809=810
<810=826,825,811
<811=824,812
<812=822,813
<813=818,814
<814=815
<815=817,816
<818=819
<819=821,820
<822=823
<827=828
<828=857,829
<829=856,830
<830=853,831
<831=852,832
<832=849,833
<833=848,834
<834=840,835
<835=839,836
<836=838,837
<840=846,841
<841=842
<842=843
<843=845,844
<846=847
<849=851,850
<853=855,854
<858=859
<859=861,860
<861=863,862
<864=865
<865=872,871,866
<866=870,867
<867=869,868
<873=874
<874=885,875
<875=881,876
<876=877
<877=878
<878=880,879
<881=882
<882=884,883
<886=887
<887=899,898,888
<888=897,889
<889=893,890
<890=891
<891=892
<893=894
<894=896,895
<900=902,901
<903=904
<904=911,905
<905=907,906
<907=908
<908=910,909
<912=913
<913=914
<914=919,918,915
<915=917,916
<920=1212,1203,1200,921
<921=1199,1198,1197,1196,1195,1194,1193,1192,1191,1190,1189,1188,1187,1186,1185,1184,1183,1182,1181,1180,1179,1054,1036,1022,940,922
<922=939,923
<923=924
<924=925
<925=938,926
<926=937,927
<927=936,928
<928=935,929
<929=931,930
<931=932
<932=934,933
<940=941
<941=1001,978,953,942
<942=943
<943=949,944
<944=947,945
<945=946
<947=948
<949=950
<950=952,951
<953=963,954
<954=962,955
<955=956
<956=960,957
<957=958
<958=959
<960=961
<963=964
<964=970,965
<965=967,966
<967=969,968
<970=977,971
<971=973,972
<973=974
<974=976,975
<978=988,979
<979=987,980
<980=981
<981=985,982
<982=983
<983=984
<985=986
<988=989
<989=995,990
<990=992,991
<992=994,993
<995=997,996
<997=998
<998=1000,999
<1001=1002
<1002=1021,1020,1003
<1003=1019,1004
<1004=1017,1005
<1005=1010,1006
<1006=1007
<1007=1009,1008
<1010=1011
<1011=1013,1012
<1013=1014
<1014=1016,1015
<1017=1018
<1022=1023
<1023=1035,1034,1024
<1024=1033,1025
<1025=1029,1026
<1026=1027
<1027=1028
<1029=1030
<1030=1032,1031
<1036=1045,1037
<1037=1038
<1038=1044,1039
<1039=1043,1040
<1040=1042,1041
<1045=1046
<1046=1050,1047
<1047=1048
<1048=1049
<1050=1051
<1051=1053,1052
<1054=1168,1055
<1055=1164,1125,1056
<1056=1116,1098,1057
<1057=1058
<1058=1084,1059
<1059=1060
<1060=1083,1061
<1061=1082,1062
<1062=1081,1063
<1063=1080,1064
<1064=1079,1065
<1065=1078,1066
<1066=1077,1067
<1067=1076,1068
<1068=1075,1069
<1069=1071,1070
<1071=1072
<1072=1074,1073
<1084=1085
<1085=1096,1086
<1086=1087
<1087=1088
<1088=1095,1089
<1089=1093,1090
<1090=1091
<1091=1092
<1093=1094
<1096=1097
<1098=1099
<1099=1100
<1100=1115,1101
<1101=1114,1102
<1102=1113,1103
<1103=1112,1104
<1104=1111,1105
<1105=1107,1106
<1107=1108
<1108=1110,1109
<1116=1117
<1117=1124,1118
<1118=1122,1119
<1119=1120
<1120=1121
<1122=1123
<1125=1156,1147,1144,1126
<1126=1127
<1127=1128
<1128=1143,1129
<1129=1142,1130
<1130=1132,1131
<1132=1134,1133
<1134=1138,1135
<1135=1136
<1136=1137
<1138=1139
<1139=1141,1140
<1144=1146,1145
<1147=1148
<1148=1155,1149
<1149=1151,1150
<1151=1152
<1152=1154,1153
<1156=1157
<1157=1158
<1158=1163,1162,1159
<1159=1161,1160
<1164=1165
<1165=1167,1166
<1168=1169
<1169=1178,1170
<1170=1174,1171
<1171=1172
<1172=1173
<1174=1175
<1175=1177,1176
<1200=1202,1201
<1203=1204
<1204=1211,1205
<1205=1207,1206
<1207=1208
<1208=1210,1209
<1212=1213
<1213=1220,1214
<1214=1216,1215
<1216=1217
<1217=1219,1218
<1221=1222
<1222=1224,1223
<1225=1307,1226
<1226=1302,1288,1279,1227
<1227=1270,1228
<1228=1265,1239,1229
<1229=1230
<1230=1238,1231
<1231=1237,1232
<1232=1236,1233
<1233=1235,1234
<1239=1256,1240
<1240=1241
<1241=1242
<1242=1255,1243
<1243=1245,1244
<1245=1251,1246
<1246=1249,1247
<1247=1248
<1249=1250
<1251=1252
<1252=1254,1253
<1256=1257
<1257=1259,1258
<1259=1261,1260
<1261=1262
<1262=1264,1263
<1265=1266
<1266=1269,1268,1267
<1270=1271
<1271=1273,1272
<1273=1275,1274
<1275=1276
<1276=1278,1277
<1279=1284,1280
<1280=1281
<1281=1283,1282
<1284=1285
<1285=1287,1286
<1288=1289
<1289=1301,1300,1290
<1290=1299,1291
<1291=1295,1292
<1292=1293
<1293=1294
<1295=1296
<1296=1298,1297
<1302=1303
<1303=1306,1305,1304
<1307=1308
<1308=1310,1309
<1311=1312
<1312=1314,1313
<1315=1316
<1316=1319,1318,1317
<1320=1327,1321
<1321=1322
<1322=1326,1323
<1323=1325,1324
<1327=1328
<1328=1330,1329
<1330=1332,1331
<1332=1333
<1333=1335,1334
<1336=1337
<1337=1349,1348,1338
<1338=1347,1339
<1339=1341,1340
<1341=1343,1342
<1343=1344
<1344=1346,1345
<1350=1351
<1351=1354,1353,1352
<1355=1356
<1356=1358,1357
