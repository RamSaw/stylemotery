>3	FunctionDef	Profile 
>4	ParameterList	 
>5	CompoundStatement	 
>9	FunctionDef	Profile 
>10	ParameterList	 
>11	CompoundStatement	 
>15	FunctionDef	Profile 
>16	ParameterList	 
>17	ReturnType	void
>18	CompoundStatement	 
>19	ExpressionStatement	 
>20	CallExpression	mCertificate . setNull ( )
>21	ArgumentList	 
>22	Callee	mCertificate . setNull
>23	MemberAccess	mCertificate . setNull
>24	Identifier	setNull
>25	Identifier	mCertificate
>26	ExpressionStatement	 
>27	CallExpression	mPrivateKey . setNull ( )
>28	ArgumentList	 
>29	Callee	mPrivateKey . setNull
>30	MemberAccess	mPrivateKey . setNull
>31	Identifier	setNull
>32	Identifier	mPrivateKey
>33	ExpressionStatement	 
>34	AssignmentExpr	mUserId = 0
>35	PrimaryExpression	0
>36	Identifier	mUserId
>37	ExpressionStatement	 
>38	AssignmentExpr	mId = 0
>39	PrimaryExpression	0
>40	Identifier	mId
>48	FunctionDef	Profile 
>49	ParameterList	 
>50	ReturnType	PublicKeyRef
>51	CompoundStatement	 
>52	ReturnStatement	 
>53	Identifier	rval
>54	ExpressionStatement	 
>55	CallExpression	mCertificate . setNull ( )
>56	ArgumentList	 
>57	Callee	mCertificate . setNull
>58	MemberAccess	mCertificate . setNull
>59	Identifier	setNull
>60	Identifier	mCertificate
>61	ExpressionStatement	 
>62	CallExpression	afk . createKeyPair ( \"RSA\" , mPrivateKey , rval )
>63	ArgumentList	\"RSA\"
>64	Argument	rval
>65	Identifier	rval
>66	Argument	mPrivateKey
>67	Identifier	mPrivateKey
>68	Argument	\"RSA\"
>69	PrimaryExpression	\"RSA\"
>70	Callee	afk . createKeyPair
>71	MemberAccess	afk . createKeyPair
>72	Identifier	createKeyPair
>73	Identifier	afk
>74	IdentifierDeclStatement	 
>75	IdentifierDecl	afk
>76	Identifier	afk
>77	IdentifierDeclType	AsymmetricKeyFactory
>78	ExpressionStatement	 
>79	CallExpression	mPrivateKey . setNull ( )
>80	ArgumentList	 
>81	Callee	mPrivateKey . setNull
>82	MemberAccess	mPrivateKey . setNull
>83	Identifier	setNull
>84	Identifier	mPrivateKey
>85	IdentifierDeclStatement	 
>86	IdentifierDecl	rval ( NULL )
>87	Identifier	NULL
>88	Identifier	rval
>89	IdentifierDeclType	PublicKeyRef
>97	FunctionDef	Profile 
>98	ParameterList	const char * password , OutputStream * os
>99	Parameter	 
>100	Identifier	os
>101	ParameterType	OutputStream *
>102	Parameter	 
>103	Identifier	password
>104	ParameterType	const char *
>105	ReturnType	bool
>106	CompoundStatement	 
>107	ReturnStatement	 
>108	CallExpression	writer . write ( profile , os )
>109	ArgumentList	profile
>110	Argument	os
>111	Identifier	os
>112	Argument	profile
>113	Identifier	profile
>114	Callee	writer . write
>115	MemberAccess	writer . write
>116	Identifier	write
>117	Identifier	writer
>118	ExpressionStatement	 
>119	CallExpression	writer . setIndentation ( 0 , 1 )
>120	ArgumentList	0
>121	Argument	1
>122	PrimaryExpression	1
>123	Argument	0
>124	PrimaryExpression	0
>125	Callee	writer . setIndentation
>126	MemberAccess	writer . setIndentation
>127	Identifier	setIndentation
>128	Identifier	writer
>129	ExpressionStatement	 
>130	CallExpression	writer . setCompact ( false )
>131	ArgumentList	false
>132	Argument	false
>133	Identifier	false
>134	Callee	writer . setCompact
>135	MemberAccess	writer . setCompact
>136	Identifier	setCompact
>137	Identifier	writer
>138	IdentifierDeclStatement	 
>139	IdentifierDecl	writer
>140	Identifier	writer
>141	IdentifierDeclType	JsonWriter
>142	IfStatement	if ( ! mCertificate . isNull ( ) )
>143	CompoundStatement	 
>144	ExpressionStatement	 
>145	AssignmentExpr	profile [ \"certificate\" ] = afk . writeCertificateToPem ( mCertificate ) . c_str ( )
>146	CallExpression	afk . writeCertificateToPem ( mCertificate ) . c_str ( )
>147	ArgumentList	 
>148	Callee	afk . writeCertificateToPem ( mCertificate ) . c_str
>149	MemberAccess	afk . writeCertificateToPem ( mCertificate ) . c_str
>150	Identifier	c_str
>151	CallExpression	afk . writeCertificateToPem ( mCertificate )
>152	ArgumentList	mCertificate
>153	Argument	mCertificate
>154	Identifier	mCertificate
>155	Callee	afk . writeCertificateToPem
>156	MemberAccess	afk . writeCertificateToPem
>157	Identifier	writeCertificateToPem
>158	Identifier	afk
>159	ArrayIndexing	profile [ \"certificate\" ]
>160	PrimaryExpression	\"certificate\"
>161	Identifier	profile
>162	Condition	 
>163	UnaryOp	! mCertificate . isNull ( )
>164	CallExpression	mCertificate . isNull ( )
>165	ArgumentList	 
>166	Callee	mCertificate . isNull
>167	MemberAccess	mCertificate . isNull
>168	Identifier	isNull
>169	Identifier	mCertificate
>170	UnaryOperator	!
>171	ExpressionStatement	 
>172	AssignmentExpr	profile [ \"privateKey\" ] = afk . writePrivateKeyToPem ( mPrivateKey , password ) . c_str ( )
>173	CallExpression	afk . writePrivateKeyToPem ( mPrivateKey , password ) . c_str ( )
>174	ArgumentList	 
>175	Callee	afk . writePrivateKeyToPem ( mPrivateKey , password ) . c_str
>176	MemberAccess	afk . writePrivateKeyToPem ( mPrivateKey , password ) . c_str
>177	Identifier	c_str
>178	CallExpression	afk . writePrivateKeyToPem ( mPrivateKey , password )
>179	ArgumentList	mPrivateKey
>180	Argument	password
>181	Identifier	password
>182	Argument	mPrivateKey
>183	Identifier	mPrivateKey
>184	Callee	afk . writePrivateKeyToPem
>185	MemberAccess	afk . writePrivateKeyToPem
>186	Identifier	writePrivateKeyToPem
>187	Identifier	afk
>188	ArrayIndexing	profile [ \"privateKey\" ]
>189	PrimaryExpression	\"privateKey\"
>190	Identifier	profile
>191	IdentifierDeclStatement	 
>192	IdentifierDecl	afk
>193	Identifier	afk
>194	IdentifierDeclType	AsymmetricKeyFactory
>195	ExpressionStatement	 
>196	CallExpression	BM_ID_SET ( profile [ \"userId\" ] , mUserId )
>197	ArgumentList	profile [ \"userId\" ]
>198	Argument	mUserId
>199	Identifier	mUserId
>200	Argument	profile [ \"userId\" ]
>201	ArrayIndexing	profile [ \"userId\" ]
>202	PrimaryExpression	\"userId\"
>203	Identifier	profile
>204	Callee	BM_ID_SET
>205	Identifier	BM_ID_SET
>206	ExpressionStatement	 
>207	CallExpression	BM_ID_SET ( profile [ \"id\" ] , mId )
>208	ArgumentList	profile [ \"id\" ]
>209	Argument	mId
>210	Identifier	mId
>211	Argument	profile [ \"id\" ]
>212	ArrayIndexing	profile [ \"id\" ]
>213	PrimaryExpression	\"id\"
>214	Identifier	profile
>215	Callee	BM_ID_SET
>216	Identifier	BM_ID_SET
>217	IdentifierDeclStatement	 
>218	IdentifierDecl	profile
>219	Identifier	profile
>220	IdentifierDeclType	DynamicObject
>241	FunctionDef	Profile 
>242	ParameterList	const char * password , InputStream * is
>243	Parameter	 
>244	Identifier	is
>245	ParameterType	InputStream *
>246	Parameter	 
>247	Identifier	password
>248	ParameterType	const char *
>249	ReturnType	bool
>250	CompoundStatement	 
>251	ReturnStatement	 
>252	Identifier	rval
>253	IfStatement	if ( rval && profile -> hasMember ( \"certificate\" ) )
>254	CompoundStatement	 
>255	ExpressionStatement	 
>256	AssignmentExpr	rval = ! mPrivateKey . isNull ( )
>257	UnaryOp	! mPrivateKey . isNull ( )
>258	CallExpression	mPrivateKey . isNull ( )
>259	ArgumentList	 
>260	Callee	mPrivateKey . isNull
>261	MemberAccess	mPrivateKey . isNull
>262	Identifier	isNull
>263	Identifier	mPrivateKey
>264	UnaryOperator	!
>265	Identifier	rval
>266	ExpressionStatement	 
>267	CallExpression	setCertificate ( cert )
>268	ArgumentList	cert
>269	Argument	cert
>270	Identifier	cert
>271	Callee	setCertificate
>272	Identifier	setCertificate
>273	ExpressionStatement	 
>274	AssignmentExpr	cert = akf . loadCertificateFromPem ( profile [ \"certificate\" ] -> getString ( ) , profile [ \"certificate\" ] \
>275	CallExpression	akf . loadCertificateFromPem ( profile [ \"certificate\" ] -> getString ( ) , profile [ \"certificate\" ] -> length ( ) )
>276	ArgumentList	profile [ \"certificate\" ] -> getString ( )
>277	Argument	profile [ \"certificate\" ] -> length ( )
>278	CallExpression	profile [ \"certificate\" ] -> length ( )
>279	ArgumentList	 
>280	Callee	profile [ \"certificate\" ] -> length
>281	PtrMemberAccess	profile [ \"certificate\" ] -> length
>282	Identifier	length
>283	ArrayIndexing	profile [ \"certificate\" ]
>284	PrimaryExpression	\"certificate\"
>285	Identifier	profile
>286	Argument	profile [ \"certificate\" ] -> getString ( )
>287	CallExpression	profile [ \"certificate\" ] -> getString ( )
>288	ArgumentList	 
>289	Callee	profile [ \"certificate\" ] -> getString
>290	PtrMemberAccess	profile [ \"certificate\" ] -> getString
>291	Identifier	getString
>292	ArrayIndexing	profile [ \"certificate\" ]
>293	PrimaryExpression	\"certificate\"
>294	Identifier	profile
>295	Callee	akf . loadCertificateFromPem
>296	MemberAccess	akf . loadCertificateFromPem
>297	Identifier	loadCertificateFromPem
>298	Identifier	akf
>299	Identifier	cert
>300	IdentifierDeclStatement	 
>301	IdentifierDecl	akf
>302	Identifier	akf
>303	IdentifierDeclType	AsymmetricKeyFactory
>304	IdentifierDeclStatement	 
>305	IdentifierDecl	cert
>306	Identifier	cert
>307	IdentifierDeclType	X509CertificateRef
>308	Condition	 
>309	AndExpression	rval && profile -> hasMember ( \"certificate\" )
>310	CallExpression	profile -> hasMember ( \"certificate\" )
>311	ArgumentList	\"certificate\"
>312	Argument	\"certificate\"
>313	PrimaryExpression	\"certificate\"
>314	Callee	profile -> hasMember
>315	PtrMemberAccess	profile -> hasMember
>316	Identifier	hasMember
>317	Identifier	profile
>318	Identifier	rval
>319	IfStatement	if ( rval )
>320	CompoundStatement	 
>321	IfStatement	if ( profile -> hasMember ( \"id\" ) )
>322	ElseStatement	else
>323	CompoundStatement	 
>324	ExpressionStatement	 
>325	AssignmentExpr	rval = false
>326	Identifier	false
>327	Identifier	rval
>328	ExpressionStatement	 
>329	CallExpression	Exception 
>330	ArgumentList	e
>331	Argument	e
>332	Identifier	e
>333	Callee	Exception 
>334	Identifier	Exception 
>335	IdentifierDeclStatement	 
>336	IdentifierDecl	e = new Exception ( \"Could not load Profile, missing profile ID.\" , \"bitmunk.InvalidProfileId\" )
>337	AssignmentExpr	e = new Exception ( \"Could not load Profile, missing profile ID.\" , \"bitmunk.InvalidProfileId\" )
>338	Expression	\"Could not load Profile, missing profile ID.\" , \"bitmunk.InvalidProfileId\"
>339	PrimaryExpression	\"bitmunk.InvalidProfileId\"
>340	PrimaryExpression	\"Could not load Profile, missing profile ID.\"
>341	Identifier	e
>342	Identifier	e
>343	IdentifierDeclType	ExceptionRef
>344	CompoundStatement	 
>345	ExpressionStatement	 
>346	AssignmentExpr	rval = ! mPrivateKey . isNull ( )
>347	UnaryOp	! mPrivateKey . isNull ( )
>348	CallExpression	mPrivateKey . isNull ( )
>349	ArgumentList	 
>350	Callee	mPrivateKey . isNull
>351	MemberAccess	mPrivateKey . isNull
>352	Identifier	isNull
>353	Identifier	mPrivateKey
>354	UnaryOperator	!
>355	Identifier	rval
>356	ExpressionStatement	 
>357	AssignmentExpr	mPrivateKey = afk . loadPrivateKeyFromPem ( pem , strlen ( pem ) , password )
>358	CallExpression	afk . loadPrivateKeyFromPem ( pem , strlen ( pem ) , password )
>359	ArgumentList	pem
>360	Argument	password
>361	Identifier	password
>362	Argument	strlen ( pem )
>363	CallExpression	strlen ( pem )
>364	ArgumentList	pem
>365	Argument	pem
>366	Identifier	pem
>367	Callee	strlen
>368	Identifier	strlen
>369	Argument	pem
>370	Identifier	pem
>371	Callee	afk . loadPrivateKeyFromPem
>372	MemberAccess	afk . loadPrivateKeyFromPem
>373	Identifier	loadPrivateKeyFromPem
>374	Identifier	afk
>375	Identifier	mPrivateKey
>376	IdentifierDeclStatement	 
>377	IdentifierDecl	afk
>378	Identifier	afk
>379	IdentifierDeclType	AsymmetricKeyFactory
>380	IdentifierDeclStatement	 
>381	IdentifierDecl	* pem = profile [ \"privateKey\" ] -> getString ( )
>382	AssignmentExpr	* pem = profile [ \"privateKey\" ] -> getString ( )
>383	CallExpression	profile [ \"privateKey\" ] -> getString ( )
>384	ArgumentList	 
>385	Callee	profile [ \"privateKey\" ] -> getString
>386	PtrMemberAccess	profile [ \"privateKey\" ] -> getString
>387	Identifier	getString
>388	ArrayIndexing	profile [ \"privateKey\" ]
>389	PrimaryExpression	\"privateKey\"
>390	Identifier	profile
>391	Identifier	pem
>392	Identifier	pem
>393	IdentifierDeclType	const char *
>394	ExpressionStatement	 
>395	CallExpression	setId ( BM_PROFILE_ID ( profile [ \"id\" ] ) )
>396	ArgumentList	BM_PROFILE_ID ( profile [ \"id\" ] )
>397	Argument	BM_PROFILE_ID ( profile [ \"id\" ] )
>398	CallExpression	BM_PROFILE_ID ( profile [ \"id\" ] )
>399	ArgumentList	profile [ \"id\" ]
>400	Argument	profile [ \"id\" ]
>401	ArrayIndexing	profile [ \"id\" ]
>402	PrimaryExpression	\"id\"
>403	Identifier	profile
>404	Callee	BM_PROFILE_ID
>405	Identifier	BM_PROFILE_ID
>406	Callee	setId
>407	Identifier	setId
>408	Condition	 
>409	CallExpression	profile -> hasMember ( \"id\" )
>410	ArgumentList	\"id\"
>411	Argument	\"id\"
>412	PrimaryExpression	\"id\"
>413	Callee	profile -> hasMember
>414	PtrMemberAccess	profile -> hasMember
>415	Identifier	hasMember
>416	Identifier	profile
>417	Condition	 
>418	Identifier	rval
>419	IfStatement	if ( rval && ! BM_USER_ID_EQUALS ( BM_USER_ID ( profile [ \"userId\" ] ) , mUserId ) )
>420	CompoundStatement	 
>421	ExpressionStatement	 
>422	AssignmentExpr	rval = false
>423	Identifier	false
>424	Identifier	rval
>425	ExpressionStatement	 
>426	CallExpression	Exception 
>427	ArgumentList	e
>428	Argument	e
>429	Identifier	e
>430	Callee	Exception 
>431	Identifier	Exception 
>432	ExpressionStatement	 
>433	CallExpression	BM_ID_SET ( e -> getDetails ( ) [ \"expectedUserId\" ] , mUserId )
>434	ArgumentList	e -> getDetails ( ) [ \"expectedUserId\" ]
>435	Argument	mUserId
>436	Identifier	mUserId
>437	Argument	e -> getDetails ( ) [ \"expectedUserId\" ]
>438	ArrayIndexing	e -> getDetails ( ) [ \"expectedUserId\" ]
>439	PrimaryExpression	\"expectedUserId\"
>440	CallExpression	e -> getDetails ( )
>441	ArgumentList	 
>442	Callee	e -> getDetails
>443	PtrMemberAccess	e -> getDetails
>444	Identifier	getDetails
>445	Identifier	e
>446	Callee	BM_ID_SET
>447	Identifier	BM_ID_SET
>448	ExpressionStatement	 
>449	CallExpression	BM_ID_SET ( e -> getDetails ( ) [ \"loadedUserId\" ] , BM_USER_ID ( profile [ \"userId\" ] ) )
>450	ArgumentList	e -> getDetails ( ) [ \"loadedUserId\" ]
>451	Argument	BM_USER_ID ( profile [ \"userId\" ] )
>452	CallExpression	BM_USER_ID ( profile [ \"userId\" ] )
>453	ArgumentList	profile [ \"userId\" ]
>454	Argument	profile [ \"userId\" ]
>455	ArrayIndexing	profile [ \"userId\" ]
>456	PrimaryExpression	\"userId\"
>457	Identifier	profile
>458	Callee	BM_USER_ID
>459	Identifier	BM_USER_ID
>460	Argument	e -> getDetails ( ) [ \"loadedUserId\" ]
>461	ArrayIndexing	e -> getDetails ( ) [ \"loadedUserId\" ]
>462	PrimaryExpression	\"loadedUserId\"
>463	CallExpression	e -> getDetails ( )
>464	ArgumentList	 
>465	Callee	e -> getDetails
>466	PtrMemberAccess	e -> getDetails
>467	Identifier	getDetails
>468	Identifier	e
>469	Callee	BM_ID_SET
>470	Identifier	BM_ID_SET
>471	IdentifierDeclStatement	 
>472	IdentifierDecl	e = new Exception ( \"Could not load Profile, invalid user ID.\" , \"bitmunk.InvalidProfileUserId\" )
>473	AssignmentExpr	e = new Exception ( \"Could not load Profile, invalid user ID.\" , \"bitmunk.InvalidProfileUserId\" )
>474	Expression	\"Could not load Profile, invalid user ID.\" , \"bitmunk.InvalidProfileUserId\"
>475	PrimaryExpression	\"bitmunk.InvalidProfileUserId\"
>476	PrimaryExpression	\"Could not load Profile, invalid user ID.\"
>477	Identifier	e
>478	Identifier	e
>479	IdentifierDeclType	ExceptionRef
>480	Condition	 
>481	AndExpression	rval && ! BM_USER_ID_EQUALS ( BM_USER_ID ( profile [ \"userId\" ] ) , mUserId )
>482	UnaryOp	! BM_USER_ID_EQUALS ( BM_USER_ID ( profile [ \"userId\" ] ) , mUserId )
>483	CallExpression	BM_USER_ID_EQUALS ( BM_USER_ID ( profile [ \"userId\" ] ) , mUserId )
>484	ArgumentList	BM_USER_ID ( profile [ \"userId\" ] )
>485	Argument	mUserId
>486	Identifier	mUserId
>487	Argument	BM_USER_ID ( profile [ \"userId\" ] )
>488	CallExpression	BM_USER_ID ( profile [ \"userId\" ] )
>489	ArgumentList	profile [ \"userId\" ]
>490	Argument	profile [ \"userId\" ]
>491	ArrayIndexing	profile [ \"userId\" ]
>492	PrimaryExpression	\"userId\"
>493	Identifier	profile
>494	Callee	BM_USER_ID
>495	Identifier	BM_USER_ID
>496	Callee	BM_USER_ID_EQUALS
>497	Identifier	BM_USER_ID_EQUALS
>498	UnaryOperator	!
>499	Identifier	rval
>500	ExpressionStatement	 
>501	AssignmentExpr	rval = reader . read ( is ) && reader . finish ( )
>502	AndExpression	reader . read ( is ) && reader . finish ( )
>503	CallExpression	reader . finish ( )
>504	ArgumentList	 
>505	Callee	reader . finish
>506	MemberAccess	reader . finish
>507	Identifier	finish
>508	Identifier	reader
>509	CallExpression	reader . read ( is )
>510	ArgumentList	is
>511	Argument	is
>512	Identifier	is
>513	Callee	reader . read
>514	MemberAccess	reader . read
>515	Identifier	read
>516	Identifier	reader
>517	Identifier	rval
>518	ExpressionStatement	 
>519	CallExpression	reader . start ( profile )
>520	ArgumentList	profile
>521	Argument	profile
>522	Identifier	profile
>523	Callee	reader . start
>524	MemberAccess	reader . start
>525	Identifier	start
>526	Identifier	reader
>527	IdentifierDeclStatement	 
>528	IdentifierDecl	reader
>529	Identifier	reader
>530	IdentifierDeclType	JsonReader
>531	IdentifierDeclStatement	 
>532	IdentifierDecl	profile
>533	Identifier	profile
>534	IdentifierDeclType	DynamicObject
>535	IdentifierDeclStatement	 
>536	IdentifierDecl	rval = true
>537	AssignmentExpr	rval = true
>538	Identifier	true
>539	Identifier	true
>540	Identifier	rval
>541	IdentifierDeclType	bool
>578	FunctionDef	Profile 
>579	ParameterList	UserId id
>580	Parameter	 
>581	Identifier	id
>582	ParameterType	UserId
>583	ReturnType	void
>584	CompoundStatement	 
>585	ExpressionStatement	 
>586	AssignmentExpr	mUserId = id
>587	Identifier	id
>588	Identifier	mUserId
>594	FunctionDef	Profile 
>595	ParameterList	 
>596	ReturnType	UserId
>597	CompoundStatement	 
>598	ReturnStatement	 
>599	Identifier	mUserId
>604	FunctionDef	Profile 
>605	ParameterList	ProfileId id
>606	Parameter	 
>607	Identifier	id
>608	ParameterType	ProfileId
>609	ReturnType	void
>610	CompoundStatement	 
>611	ExpressionStatement	 
>612	AssignmentExpr	mId = id
>613	Identifier	id
>614	Identifier	mId
>620	FunctionDef	Profile 
>621	ParameterList	 
>622	ReturnType	ProfileId
>623	CompoundStatement	 
>624	ReturnStatement	 
>625	Identifier	mId
>630	FunctionDef	Profile 
>631	ParameterList	PrivateKeyRef & key
>632	Parameter	 
>633	Identifier	key
>634	ParameterType	PrivateKeyRef &
>635	ReturnType	void
>636	CompoundStatement	 
>637	ExpressionStatement	 
>638	AssignmentExpr	mPrivateKey = key
>639	Identifier	key
>640	Identifier	mPrivateKey
>646	FunctionDef	Profile 
>647	ParameterList	 
>648	ReturnType	PrivateKeyRef &
>649	CompoundStatement	 
>650	ReturnStatement	 
>651	Identifier	mPrivateKey
>656	FunctionDef	Profile 
>657	ParameterList	 
>658	ReturnType	DigitalSignature *
>659	CompoundStatement	 
>660	ReturnStatement	 
>661	ConditionalExpression	! mPrivateKey . isNull ( ) ? new DigitalSignature ( mPrivateKey ) 
>662	Identifier	NULL
>663	Identifier	mPrivateKey
>664	Condition	! mPrivateKey . isNull ( )
>665	UnaryOp	! mPrivateKey . isNull ( )
>666	CallExpression	mPrivateKey . isNull ( )
>667	ArgumentList	 
>668	Callee	mPrivateKey . isNull
>669	MemberAccess	mPrivateKey . isNull
>670	Identifier	isNull
>671	Identifier	mPrivateKey
>672	UnaryOperator	!
>679	FunctionDef	Profile 
>680	ParameterList	monarch 
>681	Parameter	 
>682	Identifier	cert
>683	ParameterType	monarch 
>684	ReturnType	void
>685	CompoundStatement	 
>686	ExpressionStatement	 
>687	AssignmentExpr	mCertificate = cert
>688	Identifier	cert
>689	Identifier	mCertificate
>695	FunctionDef	Profile 
>696	ParameterList	 
>697	ReturnType	monarch 
>698	CompoundStatement	 
>699	ReturnStatement	 
>700	Identifier	mCertificate
<3=5,4
<9=11,10
<15=18,17,16
<18=37,33,26,19
<19=20
<20=22,21
<22=23
<23=25,24
<26=27
<27=29,28
<29=30
<30=32,31
<33=34
<34=36,35
<37=38
<38=40,39
<48=51,50,49
<51=85,78,74,61,54,52
<52=53
<54=55
<55=57,56
<57=58
<58=60,59
<61=62
<62=70,63
<63=68,66,64
<64=65
<66=67
<68=69
<70=71
<71=73,72
<74=75
<75=77,76
<78=79
<79=81,80
<81=82
<82=84,83
<85=86
<86=89,88,87
<97=106,105,98
<98=102,99
<99=101,100
<102=104,103
<106=217,206,195,191,171,142,138,129,118,107
<107=108
<108=114,109
<109=112,110
<110=111
<112=113
<114=115
<115=117,116
<118=119
<119=125,120
<120=123,121
<121=122
<123=124
<125=126
<126=128,127
<129=130
<130=134,131
<131=132
<132=133
<134=135
<135=137,136
<138=139
<139=141,140
<142=162,143
<143=144
<144=145
<145=159,146
<146=148,147
<148=149
<149=151,150
<151=155,152
<152=153
<153=154
<155=156
<156=158,157
<159=161,160
<162=163
<163=170,164
<164=166,165
<166=167
<167=169,168
<171=172
<172=188,173
<173=175,174
<175=176
<176=178,177
<178=184,179
<179=182,180
<180=181
<182=183
<184=185
<185=187,186
<188=190,189
<191=192
<192=194,193
<195=196
<196=204,197
<197=200,198
<198=199
<200=201
<201=203,202
<204=205
<206=207
<207=215,208
<208=211,209
<209=210
<211=212
<212=214,213
<215=216
<217=218
<218=220,219
<241=250,249,242
<242=246,243
<243=245,244
<246=248,247
<250=535,531,527,518,500,419,319,253,251
<251=252
<253=308,254
<254=304,300,273,266,255
<255=256
<256=265,257
<257=264,258
<258=260,259
<260=261
<261=263,262
<266=267
<267=271,268
<268=269
<269=270
<271=272
<273=274
<274=299,275
<275=295,276
<276=286,277
<277=278
<278=280,279
<280=281
<281=283,282
<283=285,284
<286=287
<287=289,288
<289=290
<290=292,291
<292=294,293
<295=296
<296=298,297
<300=301
<301=303,302
<304=305
<305=307,306
<308=309
<309=318,310
<310=314,311
<311=312
<312=313
<314=315
<315=317,316
<319=417,320
<320=321
<321=408,344,322
<322=323
<323=335,328,324
<324=325
<325=327,326
<328=329
<329=333,330
<330=331
<331=332
<333=334
<335=336
<336=343,342,337
<337=341,338
<338=340,339
<344=394,380,376,356,345
<345=346
<346=355,347
<347=354,348
<348=350,349
<350=351
<351=353,352
<356=357
<357=375,358
<358=371,359
<359=369,362,360
<360=361
<362=363
<363=367,364
<364=365
<365=366
<367=368
<369=370
<371=372
<372=374,373
<376=377
<377=379,378
<380=381
<381=393,392,382
<382=391,383
<383=385,384
<385=386
<386=388,387
<388=390,389
<394=395
<395=406,396
<396=397
<397=398
<398=404,399
<399=400
<400=401
<401=403,402
<404=405
<406=407
<408=409
<409=413,410
<410=411
<411=412
<413=414
<414=416,415
<417=418
<419=480,420
<420=471,448,432,425,421
<421=422
<422=424,423
<425=426
<426=430,427
<427=428
<428=429
<430=431
<432=433
<433=446,434
<434=437,435
<435=436
<437=438
<438=440,439
<440=442,441
<442=443
<443=445,444
<446=447
<448=449
<449=469,450
<450=460,451
<451=452
<452=458,453
<453=454
<454=455
<455=457,456
<458=459
<460=461
<461=463,462
<463=465,464
<465=466
<466=468,467
<469=470
<471=472
<472=479,478,473
<473=477,474
<474=476,475
<480=481
<481=499,482
<482=498,483
<483=496,484
<484=487,485
<485=486
<487=488
<488=494,489
<489=490
<490=491
<491=493,492
<494=495
<496=497
<500=501
<501=517,502
<502=509,503
<503=505,504
<505=506
<506=508,507
<509=513,510
<510=511
<511=512
<513=514
<514=516,515
<518=519
<519=523,520
<520=521
<521=522
<523=524
<524=526,525
<527=528
<528=530,529
<531=532
<532=534,533
<535=536
<536=541,540,537
<537=539,538
<578=584,583,579
<579=580
<580=582,581
<584=585
<585=586
<586=588,587
<594=597,596,595
<597=598
<598=599
<604=610,609,605
<605=606
<606=608,607
<610=611
<611=612
<612=614,613
<620=623,622,621
<623=624
<624=625
<630=636,635,631
<631=632
<632=634,633
<636=637
<637=638
<638=640,639
<646=649,648,647
<649=650
<650=651
<656=659,658,657
<659=660
<660=661
<661=664,663,662
<664=665
<665=672,666
<666=668,667
<668=669
<669=671,670
<679=685,684,680
<680=681
<681=683,682
<685=686
<686=687
<687=689,688
<695=698,697,696
<698=699
<699=700
