>3	FunctionDef	operator new (size_t size)
>4	ParameterList	size_t size
>5	Parameter	 
>6	Identifier	size
>7	ParameterType	size_t
>8	ReturnType	void *
>9	CompoundStatement	 
>10	ExpressionStatement	 
>11	CallExpression	std 
>12	ArgumentList	 
>13	Callee	std 
>14	Identifier	std 
>15	Statement	 
>16	IfStatement	if ( void * ptr = scalable_malloc ( size ) )
>17	ReturnStatement	 
>18	Identifier	ptr
>19	Condition	 
>20	CallExpression	scalable_malloc ( size )
>21	ArgumentList	size
>22	Argument	size
>23	Identifier	size
>24	Callee	scalable_malloc
>25	Identifier	scalable_malloc
>26	Identifier	ptr
>27	IfStatement	if ( size == 0 )
>28	ExpressionStatement	 
>29	AssignmentExpr	size = 1
>30	PrimaryExpression	1
>31	Identifier	size
>32	Condition	 
>33	EqualityExpression	size == 0
>34	PrimaryExpression	0
>35	Identifier	size
>42	FunctionDef	operator new [ ] (size_t size)
>43	ParameterList	size_t size
>44	Parameter	 
>45	Identifier	size
>46	ParameterType	size_t
>47	ReturnType	void *
>48	CompoundStatement	 
>49	ExpressionStatement	 
>50	Identifier	size
>51	Statement	 
>52	Statement	 
>53	Statement	 
>58	FunctionDef	operator delete (void * ptr)
>59	ParameterList	void * ptr
>60	Parameter	 
>61	Identifier	ptr
>62	ParameterType	void *
>63	ReturnType	void
>64	CompoundStatement	 
>65	IfStatement	if ( ptr != 0 )
>66	ExpressionStatement	 
>67	CallExpression	scalable_free ( ptr )
>68	ArgumentList	ptr
>69	Argument	ptr
>70	Identifier	ptr
>71	Callee	scalable_free
>72	Identifier	scalable_free
>73	Condition	 
>74	EqualityExpression	ptr != 0
>75	PrimaryExpression	0
>76	Identifier	ptr
>81	FunctionDef	operator delete [ ] (void * ptr)
>82	ParameterList	void * ptr
>83	Parameter	 
>84	Identifier	ptr
>85	ParameterType	void *
>86	ReturnType	void
>87	CompoundStatement	 
>88	ExpressionStatement	 
>89	Identifier	ptr
>90	Statement	 
>91	Statement	 
>96	FunctionDef	swap (argument_type * a , argument_type * b)
>97	ParameterList	argument_type * a , argument_type * b
>98	Parameter	 
>99	Identifier	b
>100	ParameterType	argument_type *
>101	Parameter	 
>102	Identifier	a
>103	ParameterType	argument_type *
>104	ReturnType	inline void
>105	CompoundStatement	 
>106	ExpressionStatement	 
>107	AssignmentExpr	* b = t
>108	Identifier	t
>109	UnaryOp	* b
>110	Identifier	b
>111	UnaryOperator	*
>112	ExpressionStatement	 
>113	AssignmentExpr	* a = * b
>114	UnaryOp	* b
>115	Identifier	b
>116	UnaryOperator	*
>117	UnaryOp	* a
>118	Identifier	a
>119	UnaryOperator	*
>120	IdentifierDeclStatement	 
>121	IdentifierDecl	t = * a
>122	AssignmentExpr	t = * a
>123	UnaryOp	* a
>124	Identifier	a
>125	UnaryOperator	*
>126	Identifier	t
>127	Identifier	t
>128	IdentifierDeclType	argument_type
>137	FunctionDef	vector_dump (const argument_type * array , const size_t size)
>138	ParameterList	const argument_type * array , const size_t size
>139	Parameter	 
>140	Identifier	size
>141	ParameterType	const size_t
>142	Parameter	 
>143	Identifier	array
>144	ParameterType	const argument_type *
>145	ReturnType	inline void
>146	CompoundStatement	 
>147	ExpressionStatement	 
>148	ShiftExpression	std 
>149	Identifier	std 
>150	Identifier	std 
>151	ForStatement	for ( size_t i = 1 ; i < size ; ++ i )
>152	CompoundStatement	 
>153	ExpressionStatement	 
>154	ShiftExpression	std 
>155	ShiftExpression	\", \" << array [ i ]
>156	ArrayIndexing	array [ i ]
>157	Identifier	i
>158	Identifier	array
>159	PrimaryExpression	\", \"
>160	Identifier	std 
>161	UnaryExpression	 
>162	Identifier	i
>163	IncDec	++
>164	Condition	 
>165	RelationalExpression	i < size
>166	Identifier	size
>167	Identifier	i
>168	ForInit	 
>169	IdentifierDeclStatement	size_t i = 1 ;
>170	IdentifierDecl	i = 1
>171	AssignmentExpr	i = 1
>172	PrimaryExpression	1
>173	Identifier	i
>174	Identifier	i
>175	IdentifierDeclType	size_t
>176	ExpressionStatement	 
>177	ShiftExpression	std 
>178	ArrayIndexing	array [ 0 ]
>179	PrimaryExpression	0
>180	Identifier	array
>181	Identifier	std 
>188	FunctionDef	vector_init (T * array , const size_t size , size_t mod)
>189	ParameterList	T * array , const size_t size , size_t mod
>190	Parameter	 
>191	Identifier	mod
>192	ParameterType	size_t
>193	Parameter	 
>194	Identifier	size
>195	ParameterType	const size_t
>196	Parameter	 
>197	Identifier	array
>198	ParameterType	T *
>199	ReturnType	inline void
>200	CompoundStatement	 
>201	ExpressionStatement	 
>202	CallExpression	assert ( 0 )
>203	ArgumentList	0
>204	Argument	0
>205	PrimaryExpression	0
>206	Callee	assert
>207	Identifier	assert
>220	FunctionDef	partition (argument_type * array , size_t size , bool verbose)
>221	ParameterList	argument_type * array , size_t size , bool verbose
>222	Parameter	 
>223	Identifier	verbose
>224	ParameterType	bool
>225	Parameter	 
>226	Identifier	size
>227	ParameterType	size_t
>228	Parameter	 
>229	Identifier	array
>230	ParameterType	argument_type *
>231	ReturnType	inline size_t
>232	CompoundStatement	 
>233	ReturnStatement	 
>234	Identifier	i
>235	ExpressionStatement	 
>236	CallExpression	swap ( & array [ 0 ] , & array [ i ] )
>237	ArgumentList	& array [ 0 ]
>238	Argument	& array [ i ]
>239	UnaryOp	& array [ i ]
>240	ArrayIndexing	array [ i ]
>241	Identifier	i
>242	Identifier	array
>243	UnaryOperator	&
>244	Argument	& array [ 0 ]
>245	UnaryOp	& array [ 0 ]
>246	ArrayIndexing	array [ 0 ]
>247	PrimaryExpression	0
>248	Identifier	array
>249	UnaryOperator	&
>250	Callee	swap
>251	Identifier	swap
>252	ExpressionStatement	 
>253	CallExpression	assert ( i == j )
>254	ArgumentList	i == j
>255	Argument	i == j
>256	EqualityExpression	i == j
>257	Identifier	j
>258	Identifier	i
>259	Callee	assert
>260	Identifier	assert
>261	IfStatement	if ( verbose )
>262	CompoundStatement	 
>263	ExpressionStatement	 
>264	ShiftExpression	std 
>265	ShiftExpression	\"i(\" << i << \") j(\" << j << \")\" << std 
>266	ShiftExpression	i << \") j(\" << j << \")\" << std 
>267	ShiftExpression	\") j(\" << j << \")\" << std 
>268	ShiftExpression	j << \")\" << std 
>269	ShiftExpression	\")\" << std 
>270	Identifier	std 
>271	PrimaryExpression	\")\"
>272	Identifier	j
>273	PrimaryExpression	\") j(\"
>274	Identifier	i
>275	PrimaryExpression	\"i(\"
>276	Identifier	std 
>277	Condition	 
>278	Identifier	verbose
>279	Label	 
>280	Identifier	done
>281	ForStatement	for ( ; ; )
>282	CompoundStatement	 
>283	ExpressionStatement	 
>284	CallExpression	swap ( & array [ i ] , & array [ j ] )
>285	ArgumentList	& array [ i ]
>286	Argument	& array [ j ]
>287	UnaryOp	& array [ j ]
>288	ArrayIndexing	array [ j ]
>289	Identifier	j
>290	Identifier	array
>291	UnaryOperator	&
>292	Argument	& array [ i ]
>293	UnaryOp	& array [ i ]
>294	ArrayIndexing	array [ i ]
>295	Identifier	i
>296	Identifier	array
>297	UnaryOperator	&
>298	Callee	swap
>299	Identifier	swap
>300	IfStatement	if ( i == j )
>301	GotoStatement	 
>302	Identifier	done
>303	Condition	 
>304	EqualityExpression	i == j
>305	Identifier	j
>306	Identifier	i
>307	IfStatement	if ( verbose )
>308	CompoundStatement	 
>309	ExpressionStatement	 
>310	ShiftExpression	std 
>311	ShiftExpression	\"i(\" << i << \") j(\" << j << \")\" << std 
>312	ShiftExpression	i << \") j(\" << j << \")\" << std 
>313	ShiftExpression	\") j(\" << j << \")\" << std 
>314	ShiftExpression	j << \")\" << std 
>315	ShiftExpression	\")\" << std 
>316	Identifier	std 
>317	PrimaryExpression	\")\"
>318	Identifier	j
>319	PrimaryExpression	\") j(\"
>320	Identifier	i
>321	PrimaryExpression	\"i(\"
>322	Identifier	std 
>323	Condition	 
>324	Identifier	verbose
>325	DoStatement	do
>326	Condition	 
>327	RelationalExpression	array [ i ] < pivot
>328	Identifier	pivot
>329	ArrayIndexing	array [ i ]
>330	Identifier	i
>331	Identifier	array
>332	CompoundStatement	 
>333	ExpressionStatement	 
>334	UnaryExpression	++ i
>335	Identifier	i
>336	IncDec	++
>337	IfStatement	if ( i == j )
>338	GotoStatement	 
>339	Identifier	done
>340	Condition	 
>341	EqualityExpression	i == j
>342	Identifier	j
>343	Identifier	i
>344	ExpressionStatement	 
>345	CallExpression	assert ( i <= j )
>346	ArgumentList	i <= j
>347	Argument	i <= j
>348	RelationalExpression	i <= j
>349	Identifier	j
>350	Identifier	i
>351	Callee	assert
>352	Identifier	assert
>353	IfStatement	if ( verbose )
>354	CompoundStatement	 
>355	ExpressionStatement	 
>356	ShiftExpression	std 
>357	ShiftExpression	\"i(\" << i << \") j(\" << j << \")\" << std 
>358	ShiftExpression	i << \") j(\" << j << \")\" << std 
>359	ShiftExpression	\") j(\" << j << \")\" << std 
>360	ShiftExpression	j << \")\" << std 
>361	ShiftExpression	\")\" << std 
>362	Identifier	std 
>363	PrimaryExpression	\")\"
>364	Identifier	j
>365	PrimaryExpression	\") j(\"
>366	Identifier	i
>367	PrimaryExpression	\"i(\"
>368	Identifier	std 
>369	Condition	 
>370	Identifier	verbose
>371	DoStatement	do
>372	Condition	 
>373	RelationalExpression	array [ j ] > pivot
>374	Identifier	pivot
>375	ArrayIndexing	array [ j ]
>376	Identifier	j
>377	Identifier	array
>378	CompoundStatement	 
>379	ExpressionStatement	 
>380	CallExpression	assert ( i <= j )
>381	ArgumentList	i <= j
>382	Argument	i <= j
>383	RelationalExpression	i <= j
>384	Identifier	j
>385	Identifier	i
>386	Callee	assert
>387	Identifier	assert
>388	ExpressionStatement	 
>389	UnaryExpression	-- j
>390	Identifier	j
>391	IncDec	--
>392	ExpressionStatement	 
>393	CallExpression	assert ( i < j )
>394	ArgumentList	i < j
>395	Argument	i < j
>396	RelationalExpression	i < j
>397	Identifier	j
>398	Identifier	i
>399	Callee	assert
>400	Identifier	assert
>401	IfStatement	if ( verbose )
>402	CompoundStatement	 
>403	ExpressionStatement	 
>404	CallExpression	vector_dump ( array , size )
>405	ArgumentList	array
>406	Argument	size
>407	Identifier	size
>408	Argument	array
>409	Identifier	array
>410	Callee	vector_dump
>411	Identifier	vector_dump
>412	ExpressionStatement	 
>413	ShiftExpression	std 
>414	ShiftExpression	\"for(;;)\" << std 
>415	Identifier	std 
>416	PrimaryExpression	\"for(;;)\"
>417	Identifier	std 
>418	Condition	 
>419	Identifier	verbose
>420	IdentifierDeclStatement	 
>421	IdentifierDecl	j = size
>422	AssignmentExpr	j = size
>423	Identifier	size
>424	Identifier	size
>425	Identifier	j
>426	IdentifierDeclType	int
>427	IdentifierDeclStatement	 
>428	IdentifierDecl	i = 0
>429	AssignmentExpr	i = 0
>430	PrimaryExpression	0
>431	Identifier	i
>432	Identifier	i
>433	IdentifierDeclType	int
>434	IdentifierDeclStatement	 
>435	IdentifierDecl	pivot = array [ 0 ]
>436	AssignmentExpr	pivot = array [ 0 ]
>437	ArrayIndexing	array [ 0 ]
>438	PrimaryExpression	0
>439	Identifier	array
>440	Identifier	pivot
>441	Identifier	pivot
>442	IdentifierDeclType	argument_type
>443	ExpressionStatement	 
>444	CallExpression	swap ( & array [ 0 ] , & array [ middleIndex ] )
>445	ArgumentList	& array [ 0 ]
>446	Argument	& array [ middleIndex ]
>447	UnaryOp	& array [ middleIndex ]
>448	ArrayIndexing	array [ middleIndex ]
>449	Identifier	middleIndex
>450	Identifier	array
>451	UnaryOperator	&
>452	Argument	& array [ 0 ]
>453	UnaryOp	& array [ 0 ]
>454	ArrayIndexing	array [ 0 ]
>455	PrimaryExpression	0
>456	Identifier	array
>457	UnaryOperator	&
>458	Callee	swap
>459	Identifier	swap
>460	IdentifierDeclStatement	 
>461	IdentifierDecl	middleIndex = size / 2
>462	AssignmentExpr	middleIndex = size / 2
>463	MultiplicativeExpression	size / 2
>464	PrimaryExpression	2
>465	Identifier	size
>466	Identifier	middleIndex
>467	Identifier	middleIndex
>468	IdentifierDeclType	size_t
>487	FunctionDef	serial_quicksort_helper (argument_type * array , size_t size , bool verbose)
>488	ParameterList	argument_type * array , size_t size , bool verbose
>489	Parameter	 
>490	Identifier	verbose
>491	ParameterType	bool
>492	Parameter	 
>493	Identifier	size
>494	ParameterType	size_t
>495	Parameter	 
>496	Identifier	array
>497	ParameterType	argument_type *
>498	ReturnType	inline void
>499	CompoundStatement	 
>500	IfStatement	if ( size > 1 )
>501	CompoundStatement	 
>502	IfStatement	if ( size == 2 )
>503	ElseStatement	else
>504	CompoundStatement	 
>505	ExpressionStatement	 
>506	CallExpression	serial_quicksort_helper ( & array [ i + 1 ] , size - ( i + 1 ) , verbose )
>507	ArgumentList	& array [ i + 1 ]
>508	Argument	verbose
>509	Identifier	verbose
>510	Argument	size - ( i + 1 )
>511	AdditiveExpression	size - ( i + 1 )
>512	AdditiveExpression	i + 1
>513	PrimaryExpression	1
>514	Identifier	i
>515	Identifier	size
>516	Argument	& array [ i + 1 ]
>517	UnaryOp	& array [ i + 1 ]
>518	ArrayIndexing	array [ i + 1 ]
>519	AdditiveExpression	i + 1
>520	PrimaryExpression	1
>521	Identifier	i
>522	Identifier	array
>523	UnaryOperator	&
>524	Callee	serial_quicksort_helper
>525	Identifier	serial_quicksort_helper
>526	ExpressionStatement	 
>527	CallExpression	serial_quicksort_helper ( array , i , verbose )
>528	ArgumentList	array
>529	Argument	verbose
>530	Identifier	verbose
>531	Argument	i
>532	Identifier	i
>533	Argument	array
>534	Identifier	array
>535	Callee	serial_quicksort_helper
>536	Identifier	serial_quicksort_helper
>537	IfStatement	if ( verbose )
>538	CompoundStatement	 
>539	ExpressionStatement	 
>540	CallExpression	vector_dump ( array , size )
>541	ArgumentList	array
>542	Argument	size
>543	Identifier	size
>544	Argument	array
>545	Identifier	array
>546	Callee	vector_dump
>547	Identifier	vector_dump
>548	Condition	 
>549	Identifier	verbose
>550	IdentifierDeclStatement	 
>551	IdentifierDecl	i = partition ( array , size , verbose )
>552	AssignmentExpr	i = partition ( array , size , verbose )
>553	CallExpression	partition ( array , size , verbose )
>554	ArgumentList	array
>555	Argument	verbose
>556	Identifier	verbose
>557	Argument	size
>558	Identifier	size
>559	Argument	array
>560	Identifier	array
>561	Callee	partition
>562	Identifier	partition
>563	Identifier	i
>564	Identifier	i
>565	IdentifierDeclType	size_t
>566	IfStatement	if ( verbose )
>567	CompoundStatement	 
>568	ExpressionStatement	 
>569	CallExpression	vector_dump ( array , size )
>570	ArgumentList	array
>571	Argument	size
>572	Identifier	size
>573	Argument	array
>574	Identifier	array
>575	Callee	vector_dump
>576	Identifier	vector_dump
>577	ExpressionStatement	 
>578	ShiftExpression	std 
>579	ShiftExpression	\"qs( \" << std 
>580	ShiftExpression	std 
>581	ShiftExpression	array << std 
>582	ShiftExpression	std 
>583	ShiftExpression	\",\" << size << \")\" << std 
>584	ShiftExpression	size << \")\" << std 
>585	ShiftExpression	\")\" << std 
>586	Identifier	std 
>587	PrimaryExpression	\")\"
>588	Identifier	size
>589	PrimaryExpression	\",\"
>590	Identifier	std 
>591	Identifier	array
>592	Identifier	std 
>593	PrimaryExpression	\"qs( \"
>594	Identifier	std 
>595	Condition	 
>596	Identifier	verbose
>597	CompoundStatement	 
>598	IfStatement	if ( array [ 1 ] < array [ 0 ] )
>599	CompoundStatement	 
>600	ExpressionStatement	 
>601	CallExpression	swap ( & array [ 0 ] , & array [ 1 ] )
>602	ArgumentList	& array [ 0 ]
>603	Argument	& array [ 1 ]
>604	UnaryOp	& array [ 1 ]
>605	ArrayIndexing	array [ 1 ]
>606	PrimaryExpression	1
>607	Identifier	array
>608	UnaryOperator	&
>609	Argument	& array [ 0 ]
>610	UnaryOp	& array [ 0 ]
>611	ArrayIndexing	array [ 0 ]
>612	PrimaryExpression	0
>613	Identifier	array
>614	UnaryOperator	&
>615	Callee	swap
>616	Identifier	swap
>617	Condition	 
>618	RelationalExpression	array [ 1 ] < array [ 0 ]
>619	ArrayIndexing	array [ 0 ]
>620	PrimaryExpression	0
>621	Identifier	array
>622	ArrayIndexing	array [ 1 ]
>623	PrimaryExpression	1
>624	Identifier	array
>625	Condition	 
>626	EqualityExpression	size == 2
>627	PrimaryExpression	2
>628	Identifier	size
>629	Condition	 
>630	RelationalExpression	size > 1
>631	PrimaryExpression	1
>632	Identifier	size
>645	FunctionDef	vector_base (size_t size , bool verbose)
>646	ParameterList	size_t size , bool verbose
>647	Parameter	 
>648	Identifier	verbose
>649	ParameterType	bool
>650	Parameter	 
>651	Identifier	size
>652	ParameterType	size_t
>653	CompoundStatement	 
>659	FunctionDef	vector_base ()
>660	ParameterList	 
>661	CompoundStatement	 
>665	FunctionDef	~vector_base ()
>666	ParameterList	 
>667	CompoundStatement	 
>671	FunctionDef	size ()
>672	ParameterList	 
>673	ReturnType	size_t
>674	CompoundStatement	 
>675	ReturnStatement	 
>676	Identifier	m_size
>681	FunctionDef	print ()
>682	ParameterList	 
>683	ReturnType	void
>684	CompoundStatement	 
>685	ExpressionStatement	 
>686	CallExpression	vector_dump ( m_array , m_size )
>687	ArgumentList	m_array
>688	Argument	m_size
>689	Identifier	m_size
>690	Argument	m_array
>691	Identifier	m_array
>692	Callee	vector_dump
>693	Identifier	vector_dump
>699	FunctionDef	isSorted ()
>700	ParameterList	 
>701	ReturnType	bool
>702	CompoundStatement	 
>703	ReturnStatement	 
>704	Identifier	sortedTillNow
>705	IfStatement	if ( m_size > 1 )
>706	CompoundStatement	 
>707	ForStatement	for ( size_t i = 1 ; i < size && sortedTillNow ; ++ i )
>708	CompoundStatement	 
>709	ExpressionStatement	 
>710	AssignmentExpr	last = m_array [ i ]
>711	ArrayIndexing	m_array [ i ]
>712	Identifier	i
>713	Identifier	m_array
>714	Identifier	last
>715	ExpressionStatement	 
>716	AssignmentExpr	sortedTillNow = sortedTillNow && comparator ( last , m_array [ i ] )
>717	AndExpression	sortedTillNow && comparator ( last , m_array [ i ] )
>718	CallExpression	comparator ( last , m_array [ i ] )
>719	ArgumentList	last
>720	Argument	m_array [ i ]
>721	ArrayIndexing	m_array [ i ]
>722	Identifier	i
>723	Identifier	m_array
>724	Argument	last
>725	Identifier	last
>726	Callee	comparator
>727	Identifier	comparator
>728	Identifier	sortedTillNow
>729	Identifier	sortedTillNow
>730	UnaryExpression	 
>731	Identifier	i
>732	IncDec	++
>733	Condition	 
>734	AndExpression	i < size && sortedTillNow
>735	Identifier	sortedTillNow
>736	RelationalExpression	i < size
>737	Identifier	size
>738	Identifier	i
>739	ForInit	 
>740	IdentifierDeclStatement	size_t i = 1 ;
>741	IdentifierDecl	i = 1
>742	AssignmentExpr	i = 1
>743	PrimaryExpression	1
>744	Identifier	i
>745	Identifier	i
>746	IdentifierDeclType	size_t
>747	IdentifierDeclStatement	 
>748	IdentifierDecl	last ( m_array [ 0 ] )
>749	ArrayIndexing	m_array [ 0 ]
>750	PrimaryExpression	0
>751	Identifier	m_array
>752	Identifier	last
>753	IdentifierDeclType	argument_type
>754	IdentifierDeclStatement	 
>755	IdentifierDecl	size = m_size
>756	AssignmentExpr	size = m_size
>757	Identifier	m_size
>758	Identifier	m_size
>759	Identifier	size
>760	IdentifierDeclType	size_t
>761	Condition	 
>762	RelationalExpression	m_size > 1
>763	PrimaryExpression	1
>764	Identifier	m_size
>765	IdentifierDeclStatement	 
>766	IdentifierDecl	comparator
>767	Identifier	comparator
>768	IdentifierDeclType	comparator_type
>769	IdentifierDeclStatement	 
>770	IdentifierDecl	sortedTillNow = true
>771	AssignmentExpr	sortedTillNow = true
>772	Identifier	true
>773	Identifier	true
>774	Identifier	sortedTillNow
>775	IdentifierDeclType	bool
>802	FunctionDef	my_vector_type ()
>803	ParameterList	 
>804	CompoundStatement	 
>805	ExpressionStatement	 
>806	AssignmentExpr	m_array_to_copy_from = this -> m_array
>807	PtrMemberAccess	this -> m_array
>808	Identifier	m_array
>809	Identifier	this
>810	Identifier	m_array_to_copy_from
>818	FunctionDef	print ()
>819	ParameterList	 
>820	ReturnType	void
>821	CompoundStatement	 
>822	ExpressionStatement	 
>823	CallExpression	vector_dump ( m_array_to_copy_from , this -> m_size )
>824	ArgumentList	m_array_to_copy_from
>825	Argument	this -> m_size
>826	PtrMemberAccess	this -> m_size
>827	Identifier	m_size
>828	Identifier	this
>829	Argument	m_array_to_copy_from
>830	Identifier	m_array_to_copy_from
>831	Callee	vector_dump
>832	Identifier	vector_dump
>840	FunctionDef	serial_quicksort ()
>841	ParameterList	 
>842	ReturnType	void
>843	CompoundStatement	 
>844	ExpressionStatement	 
>845	CallExpression	serial_quicksort_helper ( m_array_to_copy_from , this -> m_size , this -> m_verbose )
>846	ArgumentList	m_array_to_copy_from
>847	Argument	this -> m_verbose
>848	PtrMemberAccess	this -> m_verbose
>849	Identifier	m_verbose
>850	Identifier	this
>851	Argument	this -> m_size
>852	PtrMemberAccess	this -> m_size
>853	Identifier	m_size
>854	Identifier	this
>855	Argument	m_array_to_copy_from
>856	Identifier	m_array_to_copy_from
>857	Callee	serial_quicksort_helper
>858	Identifier	serial_quicksort_helper
>867	FunctionDef	my_vector_type (size_t size , bool verbose)
>868	ParameterList	size_t size , bool verbose
>869	Parameter	 
>870	Identifier	verbose
>871	ParameterType	bool
>872	Parameter	 
>873	Identifier	size
>874	ParameterType	size_t
>875	CompoundStatement	 
>876	ExpressionStatement	 
>877	RelationalExpression	vector_init < argument_type > ( this -> m_array , size , size * 100 )
>878	RelationalExpression	argument_type > ( this -> m_array , size , size * 100 )
>879	Expression	this -> m_array , size , size * 100
>880	Expression	size , size * 100
>881	MultiplicativeExpression	size * 100
>882	PrimaryExpression	100
>883	Identifier	size
>884	Identifier	size
>885	PtrMemberAccess	this -> m_array
>886	Identifier	m_array
>887	Identifier	this
>888	Identifier	argument_type
>889	Identifier	vector_init
>890	ExpressionStatement	 
>891	AssignmentExpr	m_array_to_copy_from = this -> m_array = new argument_type [ size ]
>892	AssignmentExpr	this -> m_array = new argument_type [ size ]
>893	Identifier	size
>894	PtrMemberAccess	this -> m_array
>895	Identifier	m_array
>896	Identifier	this
>897	Identifier	m_array_to_copy_from
>907	FunctionDef	~my_vector_type ()
>908	ParameterList	 
>909	CompoundStatement	 
>910	ExpressionStatement	 
>911	PtrMemberAccess	this -> m_array
>912	Identifier	m_array
>913	Identifier	this
>914	Statement	 
>915	Statement	 
>916	Statement	 
>921	FunctionDef	filter (int childIndex)
>922	ParameterList	int childIndex
>923	Parameter	 
>924	Identifier	childIndex
>925	ParameterType	int
>926	ReturnType	void
>927	CompoundStatement	 
>928	ExpressionStatement	 
>929	SwitchStatement	switch ( childIndex )
>930	CompoundStatement	 
>931	BreakStatement	 
>932	ExpressionStatement	 
>933	AssignmentExpr	m_array_to_copy_from += ( 1 + pivotIndex )
>934	AdditiveExpression	1 + pivotIndex
>935	Identifier	pivotIndex
>936	PrimaryExpression	1
>937	Identifier	m_array_to_copy_from
>938	ExpressionStatement	 
>939	AssignmentExpr	this -> m_size -= ( 1 + pivotIndex )
>940	AdditiveExpression	1 + pivotIndex
>941	Identifier	pivotIndex
>942	PrimaryExpression	1
>943	PtrMemberAccess	this -> m_size
>944	Identifier	m_size
>945	Identifier	this
>946	Label	 
>947	Identifier	base_type 
>948	BreakStatement	 
>949	ExpressionStatement	 
>950	AssignmentExpr	this -> m_size = pivotIndex
>951	Identifier	pivotIndex
>952	PtrMemberAccess	this -> m_size
>953	Identifier	m_size
>954	Identifier	this
>955	Label	 
>956	Identifier	base_type 
>957	Condition	 
>958	Identifier	childIndex
>959	IdentifierDeclStatement	 
>960	IdentifierDecl	pivotIndex = partition ( this -> m_array , this -> m_size , this -> m_verbose )
>961	AssignmentExpr	pivotIndex = partition ( this -> m_array , this -> m_size , this -> m_verbose )
>962	CallExpression	partition ( this -> m_array , this -> m_size , this -> m_verbose )
>963	ArgumentList	this -> m_array
>964	Argument	this -> m_verbose
>965	PtrMemberAccess	this -> m_verbose
>966	Identifier	m_verbose
>967	Identifier	this
>968	Argument	this -> m_size
>969	PtrMemberAccess	this -> m_size
>970	Identifier	m_size
>971	Identifier	this
>972	Argument	this -> m_array
>973	PtrMemberAccess	this -> m_array
>974	Identifier	m_array
>975	Identifier	this
>976	Callee	partition
>977	Identifier	partition
>978	Identifier	pivotIndex
>979	Identifier	pivotIndex
>980	IdentifierDeclType	size_t
>993	FunctionDef	operator [ ] (size_t index)
>994	ParameterList	size_t index
>995	Parameter	 
>996	Identifier	index
>997	ParameterType	size_t
>998	ReturnType	argument_type
>999	CompoundStatement	 
>1000	ReturnStatement	 
>1001	ArrayIndexing	this -> m_array [ index ]
>1002	Identifier	index
>1003	PtrMemberAccess	this -> m_array
>1004	Identifier	m_array
>1005	Identifier	this
>1016	FunctionDef	getPivot (int childIndex)
>1017	ParameterList	int childIndex
>1018	Parameter	 
>1019	Identifier	childIndex
>1020	ParameterType	int
>1021	ReturnType	inline argument_type
>1022	CompoundStatement	 
>1023	ReturnStatement	 
>1024	ArrayIndexing	this -> m_array_to_copy_from [ pivotIndex ]
>1025	Identifier	pivotIndex
>1026	PtrMemberAccess	this -> m_array_to_copy_from
>1027	Identifier	m_array_to_copy_from
>1028	Identifier	this
>1029	ExpressionStatement	 
>1030	SwitchStatement	switch ( childIndex )
>1031	CompoundStatement	 
>1032	BreakStatement	 
>1033	ExpressionStatement	 
>1034	AssignmentExpr	pivotIndex = - 1
>1035	UnaryOp	- 1
>1036	PrimaryExpression	1
>1037	UnaryOperator	-
>1038	Identifier	pivotIndex
>1039	Label	 
>1040	Identifier	base_type 
>1041	BreakStatement	 
>1042	ExpressionStatement	 
>1043	AssignmentExpr	pivotIndex = this -> m_size
>1044	PtrMemberAccess	this -> m_size
>1045	Identifier	m_size
>1046	Identifier	this
>1047	Identifier	pivotIndex
>1048	Label	 
>1049	Identifier	base_type 
>1050	Condition	 
>1051	Identifier	childIndex
>1052	IdentifierDeclStatement	 
>1053	IdentifierDecl	pivotIndex = 0
>1054	AssignmentExpr	pivotIndex = 0
>1055	PrimaryExpression	0
>1056	Identifier	pivotIndex
>1057	Identifier	pivotIndex
>1058	IdentifierDeclType	int
>1071	FunctionDef	my_vector_type (const my_vector_type & copied)
>1072	ParameterList	const my_vector_type & copied
>1073	Parameter	 
>1074	Identifier	copied
>1075	ParameterType	const my_vector_type &
>1076	CompoundStatement	 
>1077	ExpressionStatement	 
>1078	AssignmentExpr	* this = copied
>1079	Identifier	copied
>1080	UnaryOp	* this
>1081	Identifier	this
>1082	UnaryOperator	*
>1089	FunctionDef	operator = (const my_vector_type & copied)
>1090	ParameterList	const my_vector_type & copied
>1091	Parameter	 
>1092	Identifier	copied
>1093	ParameterType	const my_vector_type &
>1094	ReturnType	my_vector_type &
>1095	CompoundStatement	 
>1096	ReturnStatement	 
>1097	UnaryOp	* this
>1098	Identifier	this
>1099	UnaryOperator	*
>1100	ForStatement	for ( size_t i = 0 ; i < size ; ++ i )
>1101	CompoundStatement	 
>1102	ExpressionStatement	 
>1103	AssignmentExpr	my_array [ i ] = copied_array [ i ]
>1104	ArrayIndexing	copied_array [ i ]
>1105	Identifier	i
>1106	Identifier	copied_array
>1107	ArrayIndexing	my_array [ i ]
>1108	Identifier	i
>1109	Identifier	my_array
>1110	UnaryExpression	 
>1111	Identifier	i
>1112	IncDec	++
>1113	Condition	 
>1114	RelationalExpression	i < size
>1115	Identifier	size
>1116	Identifier	i
>1117	ForInit	 
>1118	IdentifierDeclStatement	size_t i = 0 ;
>1119	IdentifierDecl	i = 0
>1120	AssignmentExpr	i = 0
>1121	PrimaryExpression	0
>1122	Identifier	i
>1123	Identifier	i
>1124	IdentifierDeclType	size_t
>1125	IdentifierDeclStatement	 
>1126	IdentifierDecl	* copied_array = copied . m_array_to_copy_from
>1127	AssignmentExpr	* copied_array = copied . m_array_to_copy_from
>1128	MemberAccess	copied . m_array_to_copy_from
>1129	Identifier	m_array_to_copy_from
>1130	Identifier	copied
>1131	Identifier	copied_array
>1132	Identifier	copied_array
>1133	IdentifierDeclType	argument_type *
>1134	IdentifierDeclStatement	 
>1135	IdentifierDecl	* my_array = this -> m_array = m_array_to_copy_from = new argument_type [ size ]
>1136	AssignmentExpr	* my_array = this -> m_array = m_array_to_copy_from = new argument_type [ size ]
>1137	AssignmentExpr	this -> m_array = m_array_to_copy_from = new argument_type [ size ]
>1138	AssignmentExpr	m_array_to_copy_from = new argument_type [ size ]
>1139	Identifier	size
>1140	Identifier	m_array_to_copy_from
>1141	PtrMemberAccess	this -> m_array
>1142	Identifier	m_array
>1143	Identifier	this
>1144	Identifier	my_array
>1145	Identifier	my_array
>1146	IdentifierDeclType	argument_type *
>1147	IdentifierDeclStatement	 
>1148	IdentifierDecl	size = this -> m_size = copied . m_size
>1149	AssignmentExpr	size = this -> m_size = copied . m_size
>1150	AssignmentExpr	this -> m_size = copied . m_size
>1151	MemberAccess	copied . m_size
>1152	Identifier	m_size
>1153	Identifier	copied
>1154	PtrMemberAccess	this -> m_size
>1155	Identifier	m_size
>1156	Identifier	this
>1157	Identifier	size
>1158	Identifier	size
>1159	IdentifierDeclType	size_t
>1160	ExpressionStatement	 
>1161	CallExpression	assert ( this -> m_array == NULL || this -> m_array == copied . m_array )
>1162	ArgumentList	this -> m_array == NULL || this -> m_array == copied . m_array
>1163	Argument	this -> m_array == NULL || this -> m_array == copied . m_array
>1164	OrExpression	this -> m_array == NULL || this -> m_array == copied . m_array
>1165	EqualityExpression	this -> m_array == copied . m_array
>1166	MemberAccess	copied . m_array
>1167	Identifier	m_array
>1168	Identifier	copied
>1169	PtrMemberAccess	this -> m_array
>1170	Identifier	m_array
>1171	Identifier	this
>1172	EqualityExpression	this -> m_array == NULL
>1173	Identifier	NULL
>1174	PtrMemberAccess	this -> m_array
>1175	Identifier	m_array
>1176	Identifier	this
>1177	Callee	assert
>1178	Identifier	assert
>1211	FunctionDef	computeChildTag (ancestry_path_tag_type parent , int childIndex)
>1212	ParameterList	ancestry_path_tag_type parent , int childIndex
>1213	Parameter	 
>1214	Identifier	childIndex
>1215	ParameterType	int
>1216	Parameter	 
>1217	Identifier	parent
>1218	ParameterType	ancestry_path_tag_type
>1219	ReturnType	inline ancestry_path_tag_type
>1220	CompoundStatement	 
>1221	ReturnStatement	 
>1222	AdditiveExpression	( parent << 1 ) + childIndex
>1223	Identifier	childIndex
>1224	ShiftExpression	parent << 1
>1225	PrimaryExpression	1
>1226	Identifier	parent
>1232	FunctionDef	computeParentTag (ancestry_path_tag_type child)
>1233	ParameterList	ancestry_path_tag_type child
>1234	Parameter	 
>1235	Identifier	child
>1236	ParameterType	ancestry_path_tag_type
>1237	ReturnType	inline ancestry_path_tag_type
>1238	CompoundStatement	 
>1239	ReturnStatement	 
>1240	ShiftExpression	( child - 1 ) >> 1
>1241	PrimaryExpression	1
>1242	AdditiveExpression	child - 1
>1243	PrimaryExpression	1
>1244	Identifier	child
>1286	FunctionDef	helper (const ancestry_path_tag_type & ancestry , int childIndex , templated_context_type & graph)
>1287	ParameterList	const ancestry_path_tag_type & ancestry , int childIndex , templated_context_type & graph
>1288	Parameter	 
>1289	Identifier	graph
>1290	ParameterType	templated_context_type &
>1291	Parameter	 
>1292	Identifier	childIndex
>1293	ParameterType	int
>1294	Parameter	 
>1295	Identifier	ancestry
>1296	ParameterType	const ancestry_path_tag_type &
>1297	CompoundStatement	 
>1298	ReturnStatement	 
>1299	Identifier	CnC 
>1300	IfStatement	if ( currentVectorSize <= SERIAL_THRESHOLD )
>1301	ElseStatement	else
>1302	CompoundStatement	 
>1303	ExpressionStatement	 
>1304	CallExpression	graph . ancestryPathSplitTagSpace . put ( childTag )
>1305	ArgumentList	childTag
>1306	Argument	childTag
>1307	Identifier	childTag
>1308	Callee	graph . ancestryPathSplitTagSpace . put
>1309	MemberAccess	graph . ancestryPathSplitTagSpace . put
>1310	Identifier	put
>1311	MemberAccess	graph . ancestryPathSplitTagSpace
>1312	Identifier	ancestryPathSplitTagSpace
>1313	Identifier	graph
>1314	ExpressionStatement	 
>1315	CallExpression	graph . unsortedVectorSpace . put ( childTag , currentVector )
>1316	ArgumentList	childTag
>1317	Argument	currentVector
>1318	Identifier	currentVector
>1319	Argument	childTag
>1320	Identifier	childTag
>1321	Callee	graph . unsortedVectorSpace . put
>1322	MemberAccess	graph . unsortedVectorSpace . put
>1323	Identifier	put
>1324	MemberAccess	graph . unsortedVectorSpace
>1325	Identifier	unsortedVectorSpace
>1326	Identifier	graph
>1327	CompoundStatement	 
>1328	IfStatement	if ( ancestry > 0 )
>1329	CompoundStatement	 
>1330	ExpressionStatement	 
>1331	CallExpression	graph . ancestryPathConcatTagSpace . put ( ancestry )
>1332	ArgumentList	ancestry
>1333	Argument	ancestry
>1334	Identifier	ancestry
>1335	Callee	graph . ancestryPathConcatTagSpace . put
>1336	MemberAccess	graph . ancestryPathConcatTagSpace . put
>1337	Identifier	put
>1338	MemberAccess	graph . ancestryPathConcatTagSpace
>1339	Identifier	ancestryPathConcatTagSpace
>1340	Identifier	graph
>1341	Condition	 
>1342	RelationalExpression	ancestry > 0
>1343	PrimaryExpression	0
>1344	Identifier	ancestry
>1345	ExpressionStatement	 
>1346	CallExpression	graph . sortedVectorSpace . put ( childTag , currentVector )
>1347	ArgumentList	childTag
>1348	Argument	currentVector
>1349	Identifier	currentVector
>1350	Argument	childTag
>1351	Identifier	childTag
>1352	Callee	graph . sortedVectorSpace . put
>1353	MemberAccess	graph . sortedVectorSpace . put
>1354	Identifier	put
>1355	MemberAccess	graph . sortedVectorSpace
>1356	Identifier	sortedVectorSpace
>1357	Identifier	graph
>1358	ExpressionStatement	 
>1359	CallExpression	currentVector . serial_quicksort ( )
>1360	ArgumentList	 
>1361	Callee	currentVector . serial_quicksort
>1362	MemberAccess	currentVector . serial_quicksort
>1363	Identifier	serial_quicksort
>1364	Identifier	currentVector
>1365	Condition	 
>1366	RelationalExpression	currentVectorSize <= SERIAL_THRESHOLD
>1367	Identifier	SERIAL_THRESHOLD
>1368	Identifier	currentVectorSize
>1369	IdentifierDeclStatement	 
>1370	IdentifierDecl	childTag = computeChildTag ( ancestry , childIndex )
>1371	AssignmentExpr	childTag = computeChildTag ( ancestry , childIndex )
>1372	CallExpression	computeChildTag ( ancestry , childIndex )
>1373	ArgumentList	ancestry
>1374	Argument	childIndex
>1375	Identifier	childIndex
>1376	Argument	ancestry
>1377	Identifier	ancestry
>1378	Callee	computeChildTag
>1379	Identifier	computeChildTag
>1380	Identifier	childTag
>1381	Identifier	childTag
>1382	IdentifierDeclType	ancestry_path_tag_type
>1383	IdentifierDeclStatement	 
>1384	IdentifierDecl	currentVectorSize = currentVector . size ( )
>1385	AssignmentExpr	currentVectorSize = currentVector . size ( )
>1386	CallExpression	currentVector . size ( )
>1387	ArgumentList	 
>1388	Callee	currentVector . size
>1389	MemberAccess	currentVector . size
>1390	Identifier	size
>1391	Identifier	currentVector
>1392	Identifier	currentVectorSize
>1393	Identifier	currentVectorSize
>1394	IdentifierDeclType	size_t
>1395	ExpressionStatement	 
>1396	CallExpression	graph . pivotSpace . put ( ancestry , currentVector . getPivot ( childIndex ) )
>1397	ArgumentList	ancestry
>1398	Argument	currentVector . getPivot ( childIndex )
>1399	CallExpression	currentVector . getPivot ( childIndex )
>1400	ArgumentList	childIndex
>1401	Argument	childIndex
>1402	Identifier	childIndex
>1403	Callee	currentVector . getPivot
>1404	MemberAccess	currentVector . getPivot
>1405	Identifier	getPivot
>1406	Identifier	currentVector
>1407	Argument	ancestry
>1408	Identifier	ancestry
>1409	Callee	graph . pivotSpace . put
>1410	MemberAccess	graph . pivotSpace . put
>1411	Identifier	put
>1412	MemberAccess	graph . pivotSpace
>1413	Identifier	pivotSpace
>1414	Identifier	graph
>1415	ExpressionStatement	 
>1416	CallExpression	currentVector . filter ( childIndex )
>1417	ArgumentList	childIndex
>1418	Argument	childIndex
>1419	Identifier	childIndex
>1420	Callee	currentVector . filter
>1421	MemberAccess	currentVector . filter
>1422	Identifier	filter
>1423	Identifier	currentVector
>1424	ExpressionStatement	 
>1425	CallExpression	graph . unsortedVectorSpace . get ( ancestry , currentVector )
>1426	ArgumentList	ancestry
>1427	Argument	currentVector
>1428	Identifier	currentVector
>1429	Argument	ancestry
>1430	Identifier	ancestry
>1431	Callee	graph . unsortedVectorSpace . get
>1432	MemberAccess	graph . unsortedVectorSpace . get
>1433	Identifier	get
>1434	MemberAccess	graph . unsortedVectorSpace
>1435	Identifier	unsortedVectorSpace
>1436	Identifier	graph
>1437	IdentifierDeclStatement	 
>1438	IdentifierDecl	currentVector
>1439	Identifier	currentVector
>1440	IdentifierDeclType	vector_type
>1460	FunctionDef	execute (const ancestry_path_tag_type & ancestry , templated_context_type & graph)
>1461	ParameterList	const ancestry_path_tag_type & ancestry , templated_context_type & graph
>1462	Parameter	 
>1463	Identifier	graph
>1464	ParameterType	templated_context_type &
>1465	Parameter	 
>1466	Identifier	ancestry
>1467	ParameterType	const ancestry_path_tag_type &
>1468	CompoundStatement	 
>1469	ReturnStatement	 
>1470	CallExpression	this -> helper ( ancestry , vector_type 
>1471	ArgumentList	ancestry
>1472	Argument	graph
>1473	Identifier	graph
>1474	Argument	vector_type 
>1475	Identifier	vector_type 
>1476	Argument	ancestry
>1477	Identifier	ancestry
>1478	Callee	this -> helper
>1479	PtrMemberAccess	this -> helper
>1480	Identifier	helper
>1481	Identifier	this
>1491	FunctionDef	execute (const ancestry_path_tag_type & ancestry , templated_context_type & graph)
>1492	ParameterList	const ancestry_path_tag_type & ancestry , templated_context_type & graph
>1493	Parameter	 
>1494	Identifier	graph
>1495	ParameterType	templated_context_type &
>1496	Parameter	 
>1497	Identifier	ancestry
>1498	ParameterType	const ancestry_path_tag_type &
>1499	CompoundStatement	 
>1500	ReturnStatement	 
>1501	CallExpression	this -> helper ( ancestry , vector_type 
>1502	ArgumentList	ancestry
>1503	Argument	graph
>1504	Identifier	graph
>1505	Argument	vector_type 
>1506	Identifier	vector_type 
>1507	Argument	ancestry
>1508	Identifier	ancestry
>1509	Callee	this -> helper
>1510	PtrMemberAccess	this -> helper
>1511	Identifier	helper
>1512	Identifier	this
>1522	FunctionDef	execute (const ancestry_path_tag_type & ancestry , templated_context_type & graph)
>1523	ParameterList	const ancestry_path_tag_type & ancestry , templated_context_type & graph
>1524	Parameter	 
>1525	Identifier	graph
>1526	ParameterType	templated_context_type &
>1527	Parameter	 
>1528	Identifier	ancestry
>1529	ParameterType	const ancestry_path_tag_type &
>1530	CompoundStatement	 
>1531	ReturnStatement	 
>1532	Identifier	CnC 
>1533	IfStatement	if ( ancestry > 0 )
>1534	CompoundStatement	 
>1535	ExpressionStatement	 
>1536	CallExpression	graph . ancestryPathConcatTagSpace . put ( computeParentTag ( ancestry ) )
>1537	ArgumentList	computeParentTag ( ancestry )
>1538	Argument	computeParentTag ( ancestry )
>1539	CallExpression	computeParentTag ( ancestry )
>1540	ArgumentList	ancestry
>1541	Argument	ancestry
>1542	Identifier	ancestry
>1543	Callee	computeParentTag
>1544	Identifier	computeParentTag
>1545	Callee	graph . ancestryPathConcatTagSpace . put
>1546	MemberAccess	graph . ancestryPathConcatTagSpace . put
>1547	Identifier	put
>1548	MemberAccess	graph . ancestryPathConcatTagSpace
>1549	Identifier	ancestryPathConcatTagSpace
>1550	Identifier	graph
>1551	Condition	 
>1552	RelationalExpression	ancestry > 0
>1553	PrimaryExpression	0
>1554	Identifier	ancestry
>1555	ExpressionStatement	 
>1556	CallExpression	graph . sortedVectorSpace . put ( ancestry , currentSortedVector )
>1557	ArgumentList	ancestry
>1558	Argument	currentSortedVector
>1559	Identifier	currentSortedVector
>1560	Argument	ancestry
>1561	Identifier	ancestry
>1562	Callee	graph . sortedVectorSpace . put
>1563	MemberAccess	graph . sortedVectorSpace . put
>1564	Identifier	put
>1565	MemberAccess	graph . sortedVectorSpace
>1566	Identifier	sortedVectorSpace
>1567	Identifier	graph
>1568	IdentifierDeclStatement	 
>1569	IdentifierDecl	currentSortedVector ( leftChildVector , pivot , rightChildVector )
>1570	Expression	leftChildVector , pivot , rightChildVector
>1571	Expression	pivot , rightChildVector
>1572	Identifier	rightChildVector
>1573	Identifier	pivot
>1574	Identifier	leftChildVector
>1575	Identifier	currentSortedVector
>1576	IdentifierDeclType	vector_type
>1577	ExpressionStatement	 
>1578	CallExpression	graph . pivotSpace . get ( ancestry , pivot )
>1579	ArgumentList	ancestry
>1580	Argument	pivot
>1581	Identifier	pivot
>1582	Argument	ancestry
>1583	Identifier	ancestry
>1584	Callee	graph . pivotSpace . get
>1585	MemberAccess	graph . pivotSpace . get
>1586	Identifier	get
>1587	MemberAccess	graph . pivotSpace
>1588	Identifier	pivotSpace
>1589	Identifier	graph
>1590	IdentifierDeclStatement	 
>1591	IdentifierDecl	pivot
>1592	Identifier	pivot
>1593	IdentifierDeclType	vector_member_type
>1594	ExpressionStatement	 
>1595	CallExpression	graph . sortedVectorSpace . get ( computeChildTag ( ancestry , vector_type 
>1596	ArgumentList	computeChildTag ( ancestry , vector_type 
>1597	Argument	leftChildVector
>1598	Identifier	leftChildVector
>1599	Argument	computeChildTag ( ancestry , vector_type 
>1600	CallExpression	computeChildTag ( ancestry , vector_type 
>1601	ArgumentList	ancestry
>1602	Argument	vector_type 
>1603	Identifier	vector_type 
>1604	Argument	ancestry
>1605	Identifier	ancestry
>1606	Callee	computeChildTag
>1607	Identifier	computeChildTag
>1608	Callee	graph . sortedVectorSpace . get
>1609	MemberAccess	graph . sortedVectorSpace . get
>1610	Identifier	get
>1611	MemberAccess	graph . sortedVectorSpace
>1612	Identifier	sortedVectorSpace
>1613	Identifier	graph
>1614	IdentifierDeclStatement	 
>1615	IdentifierDecl	leftChildVector
>1616	Identifier	leftChildVector
>1617	IdentifierDeclType	vector_type
>1618	ExpressionStatement	 
>1619	CallExpression	graph . sortedVectorSpace . get ( computeChildTag ( ancestry , vector_type 
>1620	ArgumentList	computeChildTag ( ancestry , vector_type 
>1621	Argument	rightChildVector
>1622	Identifier	rightChildVector
>1623	Argument	computeChildTag ( ancestry , vector_type 
>1624	CallExpression	computeChildTag ( ancestry , vector_type 
>1625	ArgumentList	ancestry
>1626	Argument	vector_type 
>1627	Identifier	vector_type 
>1628	Argument	ancestry
>1629	Identifier	ancestry
>1630	Callee	computeChildTag
>1631	Identifier	computeChildTag
>1632	Callee	graph . sortedVectorSpace . get
>1633	MemberAccess	graph . sortedVectorSpace . get
>1634	Identifier	get
>1635	MemberAccess	graph . sortedVectorSpace
>1636	Identifier	sortedVectorSpace
>1637	Identifier	graph
>1638	IdentifierDeclStatement	 
>1639	IdentifierDecl	rightChildVector
>1640	Identifier	rightChildVector
>1641	IdentifierDeclType	vector_type
>1659	FunctionDef	main (int argc , char * argv [ ])
>1660	ParameterList	int argc , char * argv [ ]
>1661	Parameter	 
>1662	Identifier	argv
>1663	ParameterType	char * [ ]
>1664	Parameter	 
>1665	Identifier	argc
>1666	ParameterType	int
>1667	ReturnType	int
>1668	CompoundStatement	 
>1669	ReturnStatement	 
>1670	Identifier	toBeReturned
>1671	IfStatement	if ( argc < 2 )
>1672	ElseStatement	else
>1673	CompoundStatement	 
>1674	ExpressionStatement	 
>1675	CallExpression	printf ( \"Computed in %g seconds\n\" , ( t1 - t0 ) . seconds ( ) )
>1676	ArgumentList	\"Computed in %g seconds\n\"
>1677	Argument	( t1 - t0 ) . seconds ( )
>1678	CallExpression	( t1 - t0 ) . seconds ( )
>1679	ArgumentList	 
>1680	Callee	( t1 - t0 ) . seconds
>1681	MemberAccess	( t1 - t0 ) . seconds
>1682	Identifier	seconds
>1683	AdditiveExpression	t1 - t0
>1684	Identifier	t0
>1685	Identifier	t1
>1686	Argument	\"Computed in %g seconds\n\"
>1687	PrimaryExpression	\"Computed in %g seconds\n\"
>1688	Callee	printf
>1689	Identifier	printf
>1690	ExpressionStatement	 
>1691	Statement	 
>1692	Statement	 
>1693	Statement	 
>1694	Statement	 
>1695	Statement	 
>1696	Statement	 
>1697	Statement	 
>1698	Statement	 
>1699	Statement	 
>1700	Statement	 
>1701	Statement	 
>1702	Statement	 
>1703	Statement	 
>1704	Statement	 
>1705	Statement	 
>1706	Statement	 
>1707	ExpressionStatement	 
>1708	CallExpression	assert ( sorted . size ( ) == integerVector . size ( ) )
>1709	ArgumentList	sorted . size ( ) == integerVector . size ( )
>1710	Argument	sorted . size ( ) == integerVector . size ( )
>1711	EqualityExpression	sorted . size ( ) == integerVector . size ( )
>1712	CallExpression	integerVector . size ( )
>1713	ArgumentList	 
>1714	Callee	integerVector . size
>1715	MemberAccess	integerVector . size
>1716	Identifier	size
>1717	Identifier	integerVector
>1718	CallExpression	sorted . size ( )
>1719	ArgumentList	 
>1720	Callee	sorted . size
>1721	MemberAccess	sorted . size
>1722	Identifier	size
>1723	Identifier	sorted
>1724	Callee	assert
>1725	Identifier	assert
>1726	IdentifierDeclStatement	 
>1727	IdentifierDecl	t1 = tbb 
>1728	AssignmentExpr	t1 = tbb 
>1729	CallExpression	tbb 
>1730	ArgumentList	 
>1731	Callee	tbb 
>1732	Identifier	tbb 
>1733	Identifier	t1
>1734	Identifier	t1
>1735	IdentifierDeclType	tbb 
>1736	ExpressionStatement	 
>1737	CallExpression	graph . wait ( )
>1738	ArgumentList	 
>1739	Callee	graph . wait
>1740	MemberAccess	graph . wait
>1741	Identifier	wait
>1742	Identifier	graph
>1743	ExpressionStatement	 
>1744	CallExpression	graph . sortedVectorSpace . get ( 0 , sorted )
>1745	ArgumentList	0
>1746	Argument	sorted
>1747	Identifier	sorted
>1748	Argument	0
>1749	PrimaryExpression	0
>1750	Callee	graph . sortedVectorSpace . get
>1751	MemberAccess	graph . sortedVectorSpace . get
>1752	Identifier	get
>1753	MemberAccess	graph . sortedVectorSpace
>1754	Identifier	sortedVectorSpace
>1755	Identifier	graph
>1756	IdentifierDeclStatement	 
>1757	IdentifierDecl	sorted
>1758	Identifier	sorted
>1759	IdentifierDeclType	my_vector_type < double >
>1760	ExpressionStatement	 
>1761	CallExpression	graph . ancestryPathSplitTagSpace . put ( 0 )
>1762	ArgumentList	0
>1763	Argument	0
>1764	PrimaryExpression	0
>1765	Callee	graph . ancestryPathSplitTagSpace . put
>1766	MemberAccess	graph . ancestryPathSplitTagSpace . put
>1767	Identifier	put
>1768	MemberAccess	graph . ancestryPathSplitTagSpace
>1769	Identifier	ancestryPathSplitTagSpace
>1770	Identifier	graph
>1771	ExpressionStatement	 
>1772	CallExpression	graph . unsortedVectorSpace . put ( ancestry_path_tag_type ( 0 ) , integerVector )
>1773	ArgumentList	ancestry_path_tag_type ( 0 )
>1774	Argument	integerVector
>1775	Identifier	integerVector
>1776	Argument	ancestry_path_tag_type ( 0 )
>1777	CallExpression	ancestry_path_tag_type ( 0 )
>1778	ArgumentList	0
>1779	Argument	0
>1780	PrimaryExpression	0
>1781	Callee	ancestry_path_tag_type
>1782	Identifier	ancestry_path_tag_type
>1783	Callee	graph . unsortedVectorSpace . put
>1784	MemberAccess	graph . unsortedVectorSpace . put
>1785	Identifier	put
>1786	MemberAccess	graph . unsortedVectorSpace
>1787	Identifier	unsortedVectorSpace
>1788	Identifier	graph
>1789	ExpressionStatement	 
>1790	CallExpression	CnC 
>1791	ArgumentList	graph . ancestryPathConcatTagSpace
>1792	Argument	\"ancestryPathConcatTagSpace\"
>1793	PrimaryExpression	\"ancestryPathConcatTagSpace\"
>1794	Argument	graph . ancestryPathConcatTagSpace
>1795	MemberAccess	graph . ancestryPathConcatTagSpace
>1796	Identifier	ancestryPathConcatTagSpace
>1797	Identifier	graph
>1798	Callee	CnC 
>1799	Identifier	CnC 
>1800	ExpressionStatement	 
>1801	CallExpression	CnC 
>1802	ArgumentList	graph . ancestryPathSplitTagSpace
>1803	Argument	\"ancestryPathSplitTagSpace\"
>1804	PrimaryExpression	\"ancestryPathSplitTagSpace\"
>1805	Argument	graph . ancestryPathSplitTagSpace
>1806	MemberAccess	graph . ancestryPathSplitTagSpace
>1807	Identifier	ancestryPathSplitTagSpace
>1808	Identifier	graph
>1809	Callee	CnC 
>1810	Identifier	CnC 
>1811	ExpressionStatement	 
>1812	CallExpression	CnC 
>1813	ArgumentList	graph . pivotSpace
>1814	Argument	\"pivotSpace\"
>1815	PrimaryExpression	\"pivotSpace\"
>1816	Argument	graph . pivotSpace
>1817	MemberAccess	graph . pivotSpace
>1818	Identifier	pivotSpace
>1819	Identifier	graph
>1820	Callee	CnC 
>1821	Identifier	CnC 
>1822	ExpressionStatement	 
>1823	CallExpression	CnC 
>1824	ArgumentList	graph . unsortedVectorSpace
>1825	Argument	\"unsortedVectorSpace \"
>1826	PrimaryExpression	\"unsortedVectorSpace \"
>1827	Argument	graph . unsortedVectorSpace
>1828	MemberAccess	graph . unsortedVectorSpace
>1829	Identifier	unsortedVectorSpace
>1830	Identifier	graph
>1831	Callee	CnC 
>1832	Identifier	CnC 
>1833	ExpressionStatement	 
>1834	CallExpression	CnC 
>1835	ArgumentList	graph . sortedVectorSpace
>1836	Argument	\"sortedVectorSpace \"
>1837	PrimaryExpression	\"sortedVectorSpace \"
>1838	Argument	graph . sortedVectorSpace
>1839	MemberAccess	graph . sortedVectorSpace
>1840	Identifier	sortedVectorSpace
>1841	Identifier	graph
>1842	Callee	CnC 
>1843	Identifier	CnC 
>1844	IdentifierDeclStatement	 
>1845	IdentifierDecl	graph
>1846	Identifier	graph
>1847	IdentifierDeclType	quick_sort_context < double >
>1848	IdentifierDeclStatement	 
>1849	IdentifierDecl	t0 = tbb 
>1850	AssignmentExpr	t0 = tbb 
>1851	CallExpression	tbb 
>1852	ArgumentList	 
>1853	Callee	tbb 
>1854	Identifier	tbb 
>1855	Identifier	t0
>1856	Identifier	t0
>1857	IdentifierDeclType	tbb 
>1858	IdentifierDeclStatement	 
>1859	IdentifierDecl	integerVector ( size_t ( size ) , verbose )
>1860	Expression	size_t ( size ) , verbose
>1861	Identifier	verbose
>1862	CallExpression	size_t ( size )
>1863	ArgumentList	size
>1864	Argument	size
>1865	Identifier	size
>1866	Callee	size_t
>1867	Identifier	size_t
>1868	Identifier	integerVector
>1869	IdentifierDeclType	my_vector_type < double >
>1870	IdentifierDeclStatement	 
>1871	IdentifierDecl	verbose = argc == 3 && ! strcmp ( \"-v\" , argv [ 2 ] )
>1872	AssignmentExpr	verbose = argc == 3 && ! strcmp ( \"-v\" , argv [ 2 ] )
>1873	AndExpression	argc == 3 && ! strcmp ( \"-v\" , argv [ 2 ] )
>1874	UnaryOp	! strcmp ( \"-v\" , argv [ 2 ] )
>1875	CallExpression	strcmp ( \"-v\" , argv [ 2 ] )
>1876	ArgumentList	\"-v\"
>1877	Argument	argv [ 2 ]
>1878	ArrayIndexing	argv [ 2 ]
>1879	PrimaryExpression	2
>1880	Identifier	argv
>1881	Argument	\"-v\"
>1882	PrimaryExpression	\"-v\"
>1883	Callee	strcmp
>1884	Identifier	strcmp
>1885	UnaryOperator	!
>1886	EqualityExpression	argc == 3
>1887	PrimaryExpression	3
>1888	Identifier	argc
>1889	Identifier	verbose
>1890	Identifier	verbose
>1891	IdentifierDeclType	bool
>1892	IdentifierDeclStatement	 
>1893	IdentifierDecl	size = atoi ( argv [ 1 ] )
>1894	AssignmentExpr	size = atoi ( argv [ 1 ] )
>1895	CallExpression	atoi ( argv [ 1 ] )
>1896	ArgumentList	argv [ 1 ]
>1897	Argument	argv [ 1 ]
>1898	ArrayIndexing	argv [ 1 ]
>1899	PrimaryExpression	1
>1900	Identifier	argv
>1901	Callee	atoi
>1902	Identifier	atoi
>1903	Identifier	size
>1904	Identifier	size
>1905	IdentifierDeclType	int
>1906	ExpressionStatement	 
>1907	CallExpression	srand ( 0xdeadbeef )
>1908	ArgumentList	0xdeadbeef
>1909	Argument	0xdeadbeef
>1910	PrimaryExpression	0xdeadbeef
>1911	Callee	srand
>1912	Identifier	srand
>1913	CompoundStatement	 
>1914	ExpressionStatement	 
>1915	AssignmentExpr	toBeReturned = 1
>1916	PrimaryExpression	1
>1917	Identifier	toBeReturned
>1918	ExpressionStatement	 
>1919	ShiftExpression	std 
>1920	PrimaryExpression	\"usage
>1921	Identifier	std 
>1922	Condition	 
>1923	RelationalExpression	argc < 2
>1924	PrimaryExpression	2
>1925	Identifier	argc
>1926	ExpressionStatement	 
>1927	CallExpression	setbuf ( stderr , NULL )
>1928	ArgumentList	stderr
>1929	Argument	NULL
>1930	Identifier	NULL
>1931	Argument	stderr
>1932	Identifier	stderr
>1933	Callee	setbuf
>1934	Identifier	setbuf
>1935	ExpressionStatement	 
>1936	CallExpression	setbuf ( stdout , NULL )
>1937	ArgumentList	stdout
>1938	Argument	NULL
>1939	Identifier	NULL
>1940	Argument	stdout
>1941	Identifier	stdout
>1942	Callee	setbuf
>1943	Identifier	setbuf
>1944	IdentifierDeclStatement	 
>1945	IdentifierDecl	toBeReturned = 0
>1946	AssignmentExpr	toBeReturned = 0
>1947	PrimaryExpression	0
>1948	Identifier	toBeReturned
>1949	Identifier	toBeReturned
>1950	IdentifierDeclType	int
<3=9,8,4
<4=5
<5=7,6
<9=27,16,15,10
<10=11
<11=13,12
<13=14
<16=19,17
<17=18
<19=26,20
<20=24,21
<21=22
<22=23
<24=25
<27=32,28
<28=29
<29=31,30
<32=33
<33=35,34
<42=48,47,43
<43=44
<44=46,45
<48=53,52,51,49
<49=50
<58=64,63,59
<59=60
<60=62,61
<64=65
<65=73,66
<66=67
<67=71,68
<68=69
<69=70
<71=72
<73=74
<74=76,75
<81=87,86,82
<82=83
<83=85,84
<87=91,90,88
<88=89
<96=105,104,97
<97=101,98
<98=100,99
<101=103,102
<105=120,112,106
<106=107
<107=109,108
<109=111,110
<112=113
<113=117,114
<114=116,115
<117=119,118
<120=121
<121=128,127,122
<122=126,123
<123=125,124
<137=146,145,138
<138=142,139
<139=141,140
<142=144,143
<146=176,151,147
<147=148
<148=150,149
<151=168,164,161,152
<152=153
<153=154
<154=160,155
<155=159,156
<156=158,157
<161=163,162
<164=165
<165=167,166
<168=169
<169=170
<170=175,174,171
<171=173,172
<176=177
<177=181,178
<178=180,179
<188=200,199,189
<189=196,193,190
<190=192,191
<193=195,194
<196=198,197
<200=201
<201=202
<202=206,203
<203=204
<204=205
<206=207
<220=232,231,221
<221=228,225,222
<222=224,223
<225=227,226
<228=230,229
<232=460,443,434,427,420,281,279,261,252,235,233
<233=234
<235=236
<236=250,237
<237=244,238
<238=239
<239=243,240
<240=242,241
<244=245
<245=249,246
<246=248,247
<250=251
<252=253
<253=259,254
<254=255
<255=256
<256=258,257
<259=260
<261=277,262
<262=263
<263=264
<264=276,265
<265=275,266
<266=274,267
<267=273,268
<268=272,269
<269=271,270
<277=278
<279=280
<281=282
<282=401,392,371,353,325,307,300,283
<283=284
<284=298,285
<285=292,286
<286=287
<287=291,288
<288=290,289
<292=293
<293=297,294
<294=296,295
<298=299
<300=303,301
<301=302
<303=304
<304=306,305
<307=323,308
<308=309
<309=310
<310=322,311
<311=321,312
<312=320,313
<313=319,314
<314=318,315
<315=317,316
<323=324
<325=332,326
<326=327
<327=329,328
<329=331,330
<332=344,337,333
<333=334
<334=336,335
<337=340,338
<338=339
<340=341
<341=343,342
<344=345
<345=351,346
<346=347
<347=348
<348=350,349
<351=352
<353=369,354
<354=355
<355=356
<356=368,357
<357=367,358
<358=366,359
<359=365,360
<360=364,361
<361=363,362
<369=370
<371=378,372
<372=373
<373=375,374
<375=377,376
<378=388,379
<379=380
<380=386,381
<381=382
<382=383
<383=385,384
<386=387
<388=389
<389=391,390
<392=393
<393=399,394
<394=395
<395=396
<396=398,397
<399=400
<401=418,402
<402=412,403
<403=404
<404=410,405
<405=408,406
<406=407
<408=409
<410=411
<412=413
<413=417,414
<414=416,415
<418=419
<420=421
<421=426,425,422
<422=424,423
<427=428
<428=433,432,429
<429=431,430
<434=435
<435=442,441,436
<436=440,437
<437=439,438
<443=444
<444=458,445
<445=452,446
<446=447
<447=451,448
<448=450,449
<452=453
<453=457,454
<454=456,455
<458=459
<460=461
<461=468,467,462
<462=466,463
<463=465,464
<487=499,498,488
<488=495,492,489
<489=491,490
<492=494,493
<495=497,496
<499=500
<500=629,501
<501=502
<502=625,597,503
<503=504
<504=566,550,537,526,505
<505=506
<506=524,507
<507=516,510,508
<508=509
<510=511
<511=515,512
<512=514,513
<516=517
<517=523,518
<518=522,519
<519=521,520
<524=525
<526=527
<527=535,528
<528=533,531,529
<529=530
<531=532
<533=534
<535=536
<537=548,538
<538=539
<539=540
<540=546,541
<541=544,542
<542=543
<544=545
<546=547
<548=549
<550=551
<551=565,564,552
<552=563,553
<553=561,554
<554=559,557,555
<555=556
<557=558
<559=560
<561=562
<566=595,567
<567=577,568
<568=569
<569=575,570
<570=573,571
<571=572
<573=574
<575=576
<577=578
<578=594,579
<579=593,580
<580=592,581
<581=591,582
<582=590,583
<583=589,584
<584=588,585
<585=587,586
<595=596
<597=598
<598=617,599
<599=600
<600=601
<601=615,602
<602=609,603
<603=604
<604=608,605
<605=607,606
<609=610
<610=614,611
<611=613,612
<615=616
<617=618
<618=622,619
<619=621,620
<622=624,623
<625=626
<626=628,627
<629=630
<630=632,631
<645=653,646
<646=650,647
<647=649,648
<650=652,651
<659=661,660
<665=667,666
<671=674,673,672
<674=675
<675=676
<681=684,683,682
<684=685
<685=686
<686=692,687
<687=690,688
<688=689
<690=691
<692=693
<699=702,701,700
<702=769,765,705,703
<703=704
<705=761,706
<706=754,747,707
<707=739,733,730,708
<708=715,709
<709=710
<710=714,711
<711=713,712
<715=716
<716=729,717
<717=728,718
<718=726,719
<719=724,720
<720=721
<721=723,722
<724=725
<726=727
<730=732,731
<733=734
<734=736,735
<736=738,737
<739=740
<740=741
<741=746,745,742
<742=744,743
<747=748
<748=753,752,749
<749=751,750
<754=755
<755=760,759,756
<756=758,757
<761=762
<762=764,763
<765=766
<766=768,767
<769=770
<770=775,774,771
<771=773,772
<802=804,803
<804=805
<805=806
<806=810,807
<807=809,808
<818=821,820,819
<821=822
<822=823
<823=831,824
<824=829,825
<825=826
<826=828,827
<829=830
<831=832
<840=843,842,841
<843=844
<844=845
<845=857,846
<846=855,851,847
<847=848
<848=850,849
<851=852
<852=854,853
<855=856
<857=858
<867=875,868
<868=872,869
<869=871,870
<872=874,873
<875=890,876
<876=877
<877=889,878
<878=888,879
<879=885,880
<880=884,881
<881=883,882
<885=887,886
<890=891
<891=897,892
<892=894,893
<894=896,895
<907=909,908
<909=916,915,914,910
<910=911
<911=913,912
<921=927,926,922
<922=923
<923=925,924
<927=959,929,928
<929=957,930
<930=955,949,948,946,938,932,931
<932=933
<933=937,934
<934=936,935
<938=939
<939=943,940
<940=942,941
<943=945,944
<946=947
<949=950
<950=952,951
<952=954,953
<955=956
<957=958
<959=960
<960=980,979,961
<961=978,962
<962=976,963
<963=972,968,964
<964=965
<965=967,966
<968=969
<969=971,970
<972=973
<973=975,974
<976=977
<993=999,998,994
<994=995
<995=997,996
<999=1000
<1000=1001
<1001=1003,1002
<1003=1005,1004
<1016=1022,1021,1017
<1017=1018
<1018=1020,1019
<1022=1052,1030,1029,1023
<1023=1024
<1024=1026,1025
<1026=1028,1027
<1030=1050,1031
<1031=1048,1042,1041,1039,1033,1032
<1033=1034
<1034=1038,1035
<1035=1037,1036
<1039=1040
<1042=1043
<1043=1047,1044
<1044=1046,1045
<1048=1049
<1050=1051
<1052=1053
<1053=1058,1057,1054
<1054=1056,1055
<1071=1076,1072
<1072=1073
<1073=1075,1074
<1076=1077
<1077=1078
<1078=1080,1079
<1080=1082,1081
<1089=1095,1094,1090
<1090=1091
<1091=1093,1092
<1095=1160,1147,1134,1125,1100,1096
<1096=1097
<1097=1099,1098
<1100=1117,1113,1110,1101
<1101=1102
<1102=1103
<1103=1107,1104
<1104=1106,1105
<1107=1109,1108
<1110=1112,1111
<1113=1114
<1114=1116,1115
<1117=1118
<1118=1119
<1119=1124,1123,1120
<1120=1122,1121
<1125=1126
<1126=1133,1132,1127
<1127=1131,1128
<1128=1130,1129
<1134=1135
<1135=1146,1145,1136
<1136=1144,1137
<1137=1141,1138
<1138=1140,1139
<1141=1143,1142
<1147=1148
<1148=1159,1158,1149
<1149=1157,1150
<1150=1154,1151
<1151=1153,1152
<1154=1156,1155
<1160=1161
<1161=1177,1162
<1162=1163
<1163=1164
<1164=1172,1165
<1165=1169,1166
<1166=1168,1167
<1169=1171,1170
<1172=1174,1173
<1174=1176,1175
<1177=1178
<1211=1220,1219,1212
<1212=1216,1213
<1213=1215,1214
<1216=1218,1217
<1220=1221
<1221=1222
<1222=1224,1223
<1224=1226,1225
<1232=1238,1237,1233
<1233=1234
<1234=1236,1235
<1238=1239
<1239=1240
<1240=1242,1241
<1242=1244,1243
<1286=1297,1287
<1287=1294,1291,1288
<1288=1290,1289
<1291=1293,1292
<1294=1296,1295
<1297=1437,1424,1415,1395,1383,1369,1300,1298
<1298=1299
<1300=1365,1327,1301
<1301=1302
<1302=1314,1303
<1303=1304
<1304=1308,1305
<1305=1306
<1306=1307
<1308=1309
<1309=1311,1310
<1311=1313,1312
<1314=1315
<1315=1321,1316
<1316=1319,1317
<1317=1318
<1319=1320
<1321=1322
<1322=1324,1323
<1324=1326,1325
<1327=1358,1345,1328
<1328=1341,1329
<1329=1330
<1330=1331
<1331=1335,1332
<1332=1333
<1333=1334
<1335=1336
<1336=1338,1337
<1338=1340,1339
<1341=1342
<1342=1344,1343
<1345=1346
<1346=1352,1347
<1347=1350,1348
<1348=1349
<1350=1351
<1352=1353
<1353=1355,1354
<1355=1357,1356
<1358=1359
<1359=1361,1360
<1361=1362
<1362=1364,1363
<1365=1366
<1366=1368,1367
<1369=1370
<1370=1382,1381,1371
<1371=1380,1372
<1372=1378,1373
<1373=1376,1374
<1374=1375
<1376=1377
<1378=1379
<1383=1384
<1384=1394,1393,1385
<1385=1392,1386
<1386=1388,1387
<1388=1389
<1389=1391,1390
<1395=1396
<1396=1409,1397
<1397=1407,1398
<1398=1399
<1399=1403,1400
<1400=1401
<1401=1402
<1403=1404
<1404=1406,1405
<1407=1408
<1409=1410
<1410=1412,1411
<1412=1414,1413
<1415=1416
<1416=1420,1417
<1417=1418
<1418=1419
<1420=1421
<1421=1423,1422
<1424=1425
<1425=1431,1426
<1426=1429,1427
<1427=1428
<1429=1430
<1431=1432
<1432=1434,1433
<1434=1436,1435
<1437=1438
<1438=1440,1439
<1460=1468,1461
<1461=1465,1462
<1462=1464,1463
<1465=1467,1466
<1468=1469
<1469=1470
<1470=1478,1471
<1471=1476,1474,1472
<1472=1473
<1474=1475
<1476=1477
<1478=1479
<1479=1481,1480
<1491=1499,1492
<1492=1496,1493
<1493=1495,1494
<1496=1498,1497
<1499=1500
<1500=1501
<1501=1509,1502
<1502=1507,1505,1503
<1503=1504
<1505=1506
<1507=1508
<1509=1510
<1510=1512,1511
<1522=1530,1523
<1523=1527,1524
<1524=1526,1525
<1527=1529,1528
<1530=1638,1618,1614,1594,1590,1577,1568,1555,1533,1531
<1531=1532
<1533=1551,1534
<1534=1535
<1535=1536
<1536=1545,1537
<1537=1538
<1538=1539
<1539=1543,1540
<1540=1541
<1541=1542
<1543=1544
<1545=1546
<1546=1548,1547
<1548=1550,1549
<1551=1552
<1552=1554,1553
<1555=1556
<1556=1562,1557
<1557=1560,1558
<1558=1559
<1560=1561
<1562=1563
<1563=1565,1564
<1565=1567,1566
<1568=1569
<1569=1576,1575,1570
<1570=1574,1571
<1571=1573,1572
<1577=1578
<1578=1584,1579
<1579=1582,1580
<1580=1581
<1582=1583
<1584=1585
<1585=1587,1586
<1587=1589,1588
<1590=1591
<1591=1593,1592
<1594=1595
<1595=1608,1596
<1596=1599,1597
<1597=1598
<1599=1600
<1600=1606,1601
<1601=1604,1602
<1602=1603
<1604=1605
<1606=1607
<1608=1609
<1609=1611,1610
<1611=1613,1612
<1614=1615
<1615=1617,1616
<1618=1619
<1619=1632,1620
<1620=1623,1621
<1621=1622
<1623=1624
<1624=1630,1625
<1625=1628,1626
<1626=1627
<1628=1629
<1630=1631
<1632=1633
<1633=1635,1634
<1635=1637,1636
<1638=1639
<1639=1641,1640
<1659=1668,1667,1660
<1660=1664,1661
<1661=1663,1662
<1664=1666,1665
<1668=1944,1935,1926,1671,1669
<1669=1670
<1671=1922,1913,1672
<1672=1673
<1673=1906,1892,1870,1858,1848,1844,1833,1822,1811,1800,1789,1771,1760,1756,1743,1736,1726,1707,1706,1705,1704,1703,1702,1701,1700,1699,1698,1697,1696,1695,1694,1693,1692,1691,1690,1674
<1674=1675
<1675=1688,1676
<1676=1686,1677
<1677=1678
<1678=1680,1679
<1680=1681
<1681=1683,1682
<1683=1685,1684
<1686=1687
<1688=1689
<1707=1708
<1708=1724,1709
<1709=1710
<1710=1711
<1711=1718,1712
<1712=1714,1713
<1714=1715
<1715=1717,1716
<1718=1720,1719
<1720=1721
<1721=1723,1722
<1724=1725
<1726=1727
<1727=1735,1734,1728
<1728=1733,1729
<1729=1731,1730
<1731=1732
<1736=1737
<1737=1739,1738
<1739=1740
<1740=1742,1741
<1743=1744
<1744=1750,1745
<1745=1748,1746
<1746=1747
<1748=1749
<1750=1751
<1751=1753,1752
<1753=1755,1754
<1756=1757
<1757=1759,1758
<1760=1761
<1761=1765,1762
<1762=1763
<1763=1764
<1765=1766
<1766=1768,1767
<1768=1770,1769
<1771=1772
<1772=1783,1773
<1773=1776,1774
<1774=1775
<1776=1777
<1777=1781,1778
<1778=1779
<1779=1780
<1781=1782
<1783=1784
<1784=1786,1785
<1786=1788,1787
<1789=1790
<1790=1798,1791
<1791=1794,1792
<1792=1793
<1794=1795
<1795=1797,1796
<1798=1799
<1800=1801
<1801=1809,1802
<1802=1805,1803
<1803=1804
<1805=1806
<1806=1808,1807
<1809=1810
<1811=1812
<1812=1820,1813
<1813=1816,1814
<1814=1815
<1816=1817
<1817=1819,1818
<1820=1821
<1822=1823
<1823=1831,1824
<1824=1827,1825
<1825=1826
<1827=1828
<1828=1830,1829
<1831=1832
<1833=1834
<1834=1842,1835
<1835=1838,1836
<1836=1837
<1838=1839
<1839=1841,1840
<1842=1843
<1844=1845
<1845=1847,1846
<1848=1849
<1849=1857,1856,1850
<1850=1855,1851
<1851=1853,1852
<1853=1854
<1858=1859
<1859=1869,1868,1860
<1860=1862,1861
<1862=1866,1863
<1863=1864
<1864=1865
<1866=1867
<1870=1871
<1871=1891,1890,1872
<1872=1889,1873
<1873=1886,1874
<1874=1885,1875
<1875=1883,1876
<1876=1881,1877
<1877=1878
<1878=1880,1879
<1881=1882
<1883=1884
<1886=1888,1887
<1892=1893
<1893=1905,1904,1894
<1894=1903,1895
<1895=1901,1896
<1896=1897
<1897=1898
<1898=1900,1899
<1901=1902
<1906=1907
<1907=1911,1908
<1908=1909
<1909=1910
<1911=1912
<1913=1918,1914
<1914=1915
<1915=1917,1916
<1918=1919
<1919=1921,1920
<1922=1923
<1923=1925,1924
<1926=1927
<1927=1933,1928
<1928=1931,1929
<1929=1930
<1931=1932
<1933=1934
<1935=1936
<1936=1942,1937
<1937=1940,1938
<1938=1939
<1940=1941
<1942=1943
<1944=1945
<1945=1950,1949,1946
<1946=1948,1947
