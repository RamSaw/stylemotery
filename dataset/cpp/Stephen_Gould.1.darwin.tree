>7	FunctionDef	messageCallback (const char * message)
>8	ParameterList	const char * message
>9	Parameter	 
>10	Identifier	message
>11	ParameterType	const char *
>12	ReturnType	void
>13	CompoundStatement	 
>14	IfStatement	if ( gMainWindow == NULL )
>15	ElseStatement	else
>16	CompoundStatement	 
>17	ExpressionStatement	 
>18	CallExpression	gMainWindow -> logMessage ( message )
>19	ArgumentList	message
>20	Argument	message
>21	Identifier	message
>22	Callee	gMainWindow -> logMessage
>23	PtrMemberAccess	gMainWindow -> logMessage
>24	Identifier	logMessage
>25	Identifier	gMainWindow
>26	IfStatement	if ( drwnLogger 
>27	CompoundStatement	 
>28	ExpressionStatement	 
>29	ShiftExpression	cout << \"--- \" << message << \"\n\"
>30	ShiftExpression	\"--- \" << message << \"\n\"
>31	ShiftExpression	message << \"\n\"
>32	PrimaryExpression	\"\n\"
>33	Identifier	message
>34	PrimaryExpression	\"--- \"
>35	Identifier	cout
>36	Condition	 
>37	RelationalExpression	drwnLogger 
>38	Identifier	DRWN_LL_DEBUG
>39	CallExpression	drwnLogger 
>40	ArgumentList	 
>41	Callee	drwnLogger 
>42	Identifier	drwnLogger 
>43	CompoundStatement	 
>44	ExpressionStatement	 
>45	ShiftExpression	cout << \"--- \" << message << \"\n\"
>46	ShiftExpression	\"--- \" << message << \"\n\"
>47	ShiftExpression	message << \"\n\"
>48	PrimaryExpression	\"\n\"
>49	Identifier	message
>50	PrimaryExpression	\"--- \"
>51	Identifier	cout
>52	Condition	 
>53	EqualityExpression	gMainWindow == NULL
>54	Identifier	NULL
>55	Identifier	gMainWindow
>64	FunctionDef	warningCallback (const char * message)
>65	ParameterList	const char * message
>66	Parameter	 
>67	Identifier	message
>68	ParameterType	const char *
>69	ReturnType	void
>70	CompoundStatement	 
>71	ExpressionStatement	 
>72	CallExpression	gMainWindow -> logMessage ( ( string ( \"WARNING
>73	ArgumentList	( string ( \"WARNING
>74	Argument	wxTextAttr ( * wxBLUE )
>75	CallExpression	wxTextAttr ( * wxBLUE )
>76	ArgumentList	* wxBLUE
>77	Argument	* wxBLUE
>78	UnaryOp	* wxBLUE
>79	Identifier	wxBLUE
>80	UnaryOperator	*
>81	Callee	wxTextAttr
>82	Identifier	wxTextAttr
>83	Argument	( string ( \"WARNING
>84	CallExpression	( string ( \"WARNING
>85	ArgumentList	 
>86	Callee	( string ( \"WARNING
>87	MemberAccess	( string ( \"WARNING
>88	Identifier	c_str
>89	AdditiveExpression	string ( \"WARNING
>90	CallExpression	string ( message )
>91	ArgumentList	message
>92	Argument	message
>93	Identifier	message
>94	Callee	string
>95	Identifier	string
>96	CallExpression	string ( \"WARNING
>97	ArgumentList	\"WARNING
>98	Argument	\"WARNING
>99	PrimaryExpression	\"WARNING
>100	Callee	string
>101	Identifier	string
>102	Callee	gMainWindow -> logMessage
>103	PtrMemberAccess	gMainWindow -> logMessage
>104	Identifier	logMessage
>105	Identifier	gMainWindow
>106	IfStatement	if ( drwnLogger 
>107	CompoundStatement	 
>108	ExpressionStatement	 
>109	ShiftExpression	cerr << \"-W- \" << message << \"\n\"
>110	ShiftExpression	\"-W- \" << message << \"\n\"
>111	ShiftExpression	message << \"\n\"
>112	PrimaryExpression	\"\n\"
>113	Identifier	message
>114	PrimaryExpression	\"-W- \"
>115	Identifier	cerr
>116	Condition	 
>117	RelationalExpression	drwnLogger 
>118	Identifier	DRWN_LL_DEBUG
>119	CallExpression	drwnLogger 
>120	ArgumentList	 
>121	Callee	drwnLogger 
>122	Identifier	drwnLogger 
>135	FunctionDef	errorCallback (const char * message)
>136	ParameterList	const char * message
>137	Parameter	 
>138	Identifier	message
>139	ParameterType	const char *
>140	ReturnType	void
>141	CompoundStatement	 
>142	ExpressionStatement	 
>143	CallExpression	gMainWindow -> logMessage ( ( string ( \"ERROR
>144	ArgumentList	( string ( \"ERROR
>145	Argument	wxTextAttr ( * wxRED )
>146	CallExpression	wxTextAttr ( * wxRED )
>147	ArgumentList	* wxRED
>148	Argument	* wxRED
>149	UnaryOp	* wxRED
>150	Identifier	wxRED
>151	UnaryOperator	*
>152	Callee	wxTextAttr
>153	Identifier	wxTextAttr
>154	Argument	( string ( \"ERROR
>155	CallExpression	( string ( \"ERROR
>156	ArgumentList	 
>157	Callee	( string ( \"ERROR
>158	MemberAccess	( string ( \"ERROR
>159	Identifier	c_str
>160	AdditiveExpression	string ( \"ERROR
>161	CallExpression	string ( message )
>162	ArgumentList	message
>163	Argument	message
>164	Identifier	message
>165	Callee	string
>166	Identifier	string
>167	CallExpression	string ( \"ERROR
>168	ArgumentList	\"ERROR
>169	Argument	\"ERROR
>170	PrimaryExpression	\"ERROR
>171	Callee	string
>172	Identifier	string
>173	Callee	gMainWindow -> logMessage
>174	PtrMemberAccess	gMainWindow -> logMessage
>175	Identifier	logMessage
>176	Identifier	gMainWindow
>177	IfStatement	if ( drwnLogger 
>178	CompoundStatement	 
>179	ExpressionStatement	 
>180	ShiftExpression	cerr << \"-E- \" << message << \"\n\"
>181	ShiftExpression	\"-E- \" << message << \"\n\"
>182	ShiftExpression	message << \"\n\"
>183	PrimaryExpression	\"\n\"
>184	Identifier	message
>185	PrimaryExpression	\"-E- \"
>186	Identifier	cerr
>187	Condition	 
>188	RelationalExpression	drwnLogger 
>189	Identifier	DRWN_LL_DEBUG
>190	CallExpression	drwnLogger 
>191	ArgumentList	 
>192	Callee	drwnLogger 
>193	Identifier	drwnLogger 
>206	FunctionDef	fatalCallback (const char * message)
>207	ParameterList	const char * message
>208	Parameter	 
>209	Identifier	message
>210	ParameterType	const char *
>211	ReturnType	void
>212	CompoundStatement	 
>213	ExpressionStatement	 
>214	CallExpression	exit ( - 1 )
>215	ArgumentList	- 1
>216	Argument	- 1
>217	UnaryOp	- 1
>218	PrimaryExpression	1
>219	UnaryOperator	-
>220	Callee	exit
>221	Identifier	exit
>222	ExpressionStatement	 
>223	CallExpression	wxMessageBox ( message , \"Fatal Error\" , wxOK | wxICON_ERROR , NULL )
>224	ArgumentList	message
>225	Argument	NULL
>226	Identifier	NULL
>227	Argument	wxOK | wxICON_ERROR
>228	InclusiveOrExpression	wxOK | wxICON_ERROR
>229	Identifier	wxICON_ERROR
>230	Identifier	wxOK
>231	Argument	\"Fatal Error\"
>232	PrimaryExpression	\"Fatal Error\"
>233	Argument	message
>234	Identifier	message
>235	Callee	wxMessageBox
>236	Identifier	wxMessageBox
>237	ExpressionStatement	 
>238	ShiftExpression	cerr << \"-*- \" << message << \"\n\"
>239	ShiftExpression	\"-*- \" << message << \"\n\"
>240	ShiftExpression	message << \"\n\"
>241	PrimaryExpression	\"\n\"
>242	Identifier	message
>243	PrimaryExpression	\"-*- \"
>244	Identifier	cerr
>252	FunctionDef	progressCallback (const char * status , double progress)
>253	ParameterList	const char * status , double progress
>254	Parameter	 
>255	Identifier	progress
>256	ParameterType	double
>257	Parameter	 
>258	Identifier	status
>259	ParameterType	const char *
>260	ReturnType	void
>261	CompoundStatement	 
>262	IfStatement	if ( gMainWindow != NULL )
>263	CompoundStatement	 
>264	ExpressionStatement	 
>265	CallExpression	gMainWindow -> updateProgress ( status , progress )
>266	ArgumentList	status
>267	Argument	progress
>268	Identifier	progress
>269	Argument	status
>270	Identifier	status
>271	Callee	gMainWindow -> updateProgress
>272	PtrMemberAccess	gMainWindow -> updateProgress
>273	Identifier	updateProgress
>274	Identifier	gMainWindow
>275	Condition	 
>276	EqualityExpression	gMainWindow != NULL
>277	Identifier	NULL
>278	Identifier	gMainWindow
>288	FunctionDef	MainCanvas 
>289	ParameterList	wxWindow * parent , wxWindowID id , const wxPoint & pos , const wxSize & size , long style , const wxString & name
>290	Parameter	 
>291	Identifier	name
>292	ParameterType	const wxString &
>293	Parameter	 
>294	Identifier	style
>295	ParameterType	long
>296	Parameter	 
>297	Identifier	size
>298	ParameterType	const wxSize &
>299	Parameter	 
>300	Identifier	pos
>301	ParameterType	const wxPoint &
>302	Parameter	 
>303	Identifier	id
>304	ParameterType	wxWindowID
>305	Parameter	 
>306	Identifier	parent
>307	ParameterType	wxWindow *
>308	CompoundStatement	 
>309	ForStatement	for ( vector < string > 
>310	CompoundStatement	 
>311	ExpressionStatement	 
>312	CallExpression	_newNodePopupMenu -> AppendSubMenu ( groupMenu , ( string ( \"Add \" ) + * ig ) . c_str ( ) )
>313	ArgumentList	groupMenu
>314	Argument	( string ( \"Add \" ) + * ig ) . c_str ( )
>315	CallExpression	( string ( \"Add \" ) + * ig ) . c_str ( )
>316	ArgumentList	 
>317	Callee	( string ( \"Add \" ) + * ig ) . c_str
>318	MemberAccess	( string ( \"Add \" ) + * ig ) . c_str
>319	Identifier	c_str
>320	AdditiveExpression	string ( \"Add \" ) + * ig
>321	UnaryOp	* ig
>322	Identifier	ig
>323	UnaryOperator	*
>324	CallExpression	string ( \"Add \" )
>325	ArgumentList	\"Add \"
>326	Argument	\"Add \"
>327	PrimaryExpression	\"Add \"
>328	Callee	string
>329	Identifier	string
>330	Argument	groupMenu
>331	Identifier	groupMenu
>332	Callee	_newNodePopupMenu -> AppendSubMenu
>333	PtrMemberAccess	_newNodePopupMenu -> AppendSubMenu
>334	Identifier	AppendSubMenu
>335	Identifier	_newNodePopupMenu
>336	ForStatement	for ( vector < string > 
>337	CompoundStatement	 
>338	ExpressionStatement	 
>339	IncDecOp	indx ++
>340	IncDec	++
>341	Identifier	indx
>342	ExpressionStatement	 
>343	CallExpression	groupMenu -> Append ( POPUP_NODE_INSERT_BASE + indx , name )
>344	ArgumentList	POPUP_NODE_INSERT_BASE + indx
>345	Argument	name
>346	Identifier	name
>347	Argument	POPUP_NODE_INSERT_BASE + indx
>348	AdditiveExpression	POPUP_NODE_INSERT_BASE + indx
>349	Identifier	indx
>350	Identifier	POPUP_NODE_INSERT_BASE
>351	Callee	groupMenu -> Append
>352	PtrMemberAccess	groupMenu -> Append
>353	Identifier	Append
>354	Identifier	groupMenu
>355	IdentifierDeclStatement	 
>356	IdentifierDecl	name = drwn 
>357	AssignmentExpr	name = drwn 
>358	CallExpression	drwn 
>359	ArgumentList	drwn 
>360	Argument	string ( )
>361	CallExpression	string ( )
>362	ArgumentList	 
>363	Callee	string
>364	Identifier	string
>365	Argument	string ( \"drwn \" )
>366	CallExpression	string ( \"drwn \" )
>367	ArgumentList	\"drwn \"
>368	Argument	\"drwn \"
>369	PrimaryExpression	\"drwn \"
>370	Callee	string
>371	Identifier	string
>372	Argument	drwn 
>373	CallExpression	drwn 
>374	ArgumentList	* it
>375	Argument	* it
>376	UnaryOp	* it
>377	Identifier	it
>378	UnaryOperator	*
>379	Callee	drwn 
>380	Identifier	drwn 
>381	Callee	drwn 
>382	Identifier	drwn 
>383	Identifier	name
>384	Identifier	name
>385	IdentifierDeclType	string
>386	IncDecOp	 
>387	IncDec	++
>388	Identifier	it
>389	Condition	 
>390	EqualityExpression	it != nodeNames . end ( )
>391	CallExpression	nodeNames . end ( )
>392	ArgumentList	 
>393	Callee	nodeNames . end
>394	MemberAccess	nodeNames . end
>395	Identifier	end
>396	Identifier	nodeNames
>397	Identifier	it
>398	ForInit	 
>399	IdentifierDeclStatement	vector < string > 
>400	IdentifierDecl	it = nodeNames . begin ( )
>401	AssignmentExpr	it = nodeNames . begin ( )
>402	CallExpression	nodeNames . begin ( )
>403	ArgumentList	 
>404	Callee	nodeNames . begin
>405	MemberAccess	nodeNames . begin
>406	Identifier	begin
>407	Identifier	nodeNames
>408	Identifier	it
>409	Identifier	it
>410	IdentifierDeclType	vector < string > 
>411	IdentifierDeclStatement	 
>412	IdentifierDecl	nodeNames = drwnNodeFactory 
>413	AssignmentExpr	nodeNames = drwnNodeFactory 
>414	CallExpression	drwnNodeFactory 
>415	ArgumentList	ig -> c_str ( )
>416	Argument	ig -> c_str ( )
>417	CallExpression	ig -> c_str ( )
>418	ArgumentList	 
>419	Callee	ig -> c_str
>420	PtrMemberAccess	ig -> c_str
>421	Identifier	c_str
>422	Identifier	ig
>423	Callee	drwnNodeFactory 
>424	MemberAccess	drwnNodeFactory 
>425	Identifier	getNodes
>426	CallExpression	drwnNodeFactory 
>427	ArgumentList	 
>428	Callee	drwnNodeFactory 
>429	Identifier	drwnNodeFactory 
>430	Identifier	nodeNames
>431	Identifier	nodeNames
>432	IdentifierDeclType	vector < string >
>433	IdentifierDeclStatement	 
>434	IdentifierDecl	* groupMenu = new wxMenu ( )
>435	AssignmentExpr	* groupMenu = new wxMenu ( )
>436	UnaryExpression	new wxMenu ( )
>437	Identifier	groupMenu
>438	Identifier	groupMenu
>439	IdentifierDeclType	wxMenu *
>440	IncDecOp	 
>441	IncDec	++
>442	Identifier	ig
>443	Condition	 
>444	EqualityExpression	ig != groupNames . end ( )
>445	CallExpression	groupNames . end ( )
>446	ArgumentList	 
>447	Callee	groupNames . end
>448	MemberAccess	groupNames . end
>449	Identifier	end
>450	Identifier	groupNames
>451	Identifier	ig
>452	ForInit	 
>453	IdentifierDeclStatement	vector < string > 
>454	IdentifierDecl	ig = groupNames . begin ( )
>455	AssignmentExpr	ig = groupNames . begin ( )
>456	CallExpression	groupNames . begin ( )
>457	ArgumentList	 
>458	Callee	groupNames . begin
>459	MemberAccess	groupNames . begin
>460	Identifier	begin
>461	Identifier	groupNames
>462	Identifier	ig
>463	Identifier	ig
>464	IdentifierDeclType	vector < string > 
>465	IdentifierDeclStatement	 
>466	IdentifierDecl	groupNames = drwnNodeFactory 
>467	AssignmentExpr	groupNames = drwnNodeFactory 
>468	CallExpression	drwnNodeFactory 
>469	ArgumentList	 
>470	Callee	drwnNodeFactory 
>471	MemberAccess	drwnNodeFactory 
>472	Identifier	getGroups
>473	CallExpression	drwnNodeFactory 
>474	ArgumentList	 
>475	Callee	drwnNodeFactory 
>476	Identifier	drwnNodeFactory 
>477	Identifier	groupNames
>478	Identifier	groupNames
>479	IdentifierDeclType	vector < string >
>480	IdentifierDeclStatement	 
>481	IdentifierDecl	indx = 0
>482	AssignmentExpr	indx = 0
>483	PrimaryExpression	0
>484	Identifier	indx
>485	Identifier	indx
>486	IdentifierDeclType	int
>487	ExpressionStatement	 
>488	CallExpression	_newNodePopupMenu -> AppendSeparator ( )
>489	ArgumentList	 
>490	Callee	_newNodePopupMenu -> AppendSeparator
>491	PtrMemberAccess	_newNodePopupMenu -> AppendSeparator
>492	Identifier	AppendSeparator
>493	Identifier	_newNodePopupMenu
>494	ExpressionStatement	 
>495	CallExpression	_newNodePopupMenu -> Append ( POPUP_SET_TITLE , \"Set &Title...\" )
>496	ArgumentList	POPUP_SET_TITLE
>497	Argument	\"Set &Title...\"
>498	PrimaryExpression	\"Set &Title...\"
>499	Argument	POPUP_SET_TITLE
>500	Identifier	POPUP_SET_TITLE
>501	Callee	_newNodePopupMenu -> Append
>502	PtrMemberAccess	_newNodePopupMenu -> Append
>503	Identifier	Append
>504	Identifier	_newNodePopupMenu
>505	ExpressionStatement	 
>506	AssignmentExpr	_newNodePopupMenu = new wxMenu ( )
>507	UnaryExpression	new wxMenu ( )
>508	Identifier	_newNodePopupMenu
>509	ExpressionStatement	 
>510	CallExpression	_nodePopupMenu -> Append ( NODE_POPUP_DELETE , \"&Delete\" )
>511	ArgumentList	NODE_POPUP_DELETE
>512	Argument	\"&Delete\"
>513	PrimaryExpression	\"&Delete\"
>514	Argument	NODE_POPUP_DELETE
>515	Identifier	NODE_POPUP_DELETE
>516	Callee	_nodePopupMenu -> Append
>517	PtrMemberAccess	_nodePopupMenu -> Append
>518	Identifier	Append
>519	Identifier	_nodePopupMenu
>520	ExpressionStatement	 
>521	CallExpression	_nodePopupMenu -> AppendSeparator ( )
>522	ArgumentList	 
>523	Callee	_nodePopupMenu -> AppendSeparator
>524	PtrMemberAccess	_nodePopupMenu -> AppendSeparator
>525	Identifier	AppendSeparator
>526	Identifier	_nodePopupMenu
>527	ExpressionStatement	 
>528	CallExpression	_nodePopupMenu -> Append ( NODE_POPUP_DISCONNECT , \"Disconnect &All\" )
>529	ArgumentList	NODE_POPUP_DISCONNECT
>530	Argument	\"Disconnect &All\"
>531	PrimaryExpression	\"Disconnect &All\"
>532	Argument	NODE_POPUP_DISCONNECT
>533	Identifier	NODE_POPUP_DISCONNECT
>534	Callee	_nodePopupMenu -> Append
>535	PtrMemberAccess	_nodePopupMenu -> Append
>536	Identifier	Append
>537	Identifier	_nodePopupMenu
>538	ExpressionStatement	 
>539	AssignmentExpr	_connectPopupMenu = new wxMenu ( )
>540	UnaryExpression	new wxMenu ( )
>541	Identifier	_connectPopupMenu
>542	ExpressionStatement	 
>543	AssignmentExpr	_portSubMenuItem = _nodePopupMenu -> AppendSubMenu ( new wxMenu ( ) , \"Connect\" )
>544	CallExpression	_nodePopupMenu -> AppendSubMenu ( new wxMenu ( ) , \"Connect\" )
>545	ArgumentList	new wxMenu ( )
>546	Argument	\"Connect\"
>547	PrimaryExpression	\"Connect\"
>548	Argument	new wxMenu ( )
>549	UnaryExpression	new wxMenu ( )
>550	Callee	_nodePopupMenu -> AppendSubMenu
>551	PtrMemberAccess	_nodePopupMenu -> AppendSubMenu
>552	Identifier	AppendSubMenu
>553	Identifier	_nodePopupMenu
>554	Identifier	_portSubMenuItem
>555	ExpressionStatement	 
>556	CallExpression	_nodePopupMenu -> AppendSeparator ( )
>557	ArgumentList	 
>558	Callee	_nodePopupMenu -> AppendSeparator
>559	PtrMemberAccess	_nodePopupMenu -> AppendSeparator
>560	Identifier	AppendSeparator
>561	Identifier	_nodePopupMenu
>562	ExpressionStatement	 
>563	CallExpression	_nodePopupMenu -> Append ( NODE_POPUP_INITPARAMS , \"&Estimate Parameters\" )
>564	ArgumentList	NODE_POPUP_INITPARAMS
>565	Argument	\"&Estimate Parameters\"
>566	PrimaryExpression	\"&Estimate Parameters\"
>567	Argument	NODE_POPUP_INITPARAMS
>568	Identifier	NODE_POPUP_INITPARAMS
>569	Callee	_nodePopupMenu -> Append
>570	PtrMemberAccess	_nodePopupMenu -> Append
>571	Identifier	Append
>572	Identifier	_nodePopupMenu
>573	ExpressionStatement	 
>574	CallExpression	_nodePopupMenu -> Append ( NODE_POPUP_RESETPARAMS , \"&Reset Parameters\" )
>575	ArgumentList	NODE_POPUP_RESETPARAMS
>576	Argument	\"&Reset Parameters\"
>577	PrimaryExpression	\"&Reset Parameters\"
>578	Argument	NODE_POPUP_RESETPARAMS
>579	Identifier	NODE_POPUP_RESETPARAMS
>580	Callee	_nodePopupMenu -> Append
>581	PtrMemberAccess	_nodePopupMenu -> Append
>582	Identifier	Append
>583	Identifier	_nodePopupMenu
>584	ExpressionStatement	 
>585	CallExpression	_nodePopupMenu -> Append ( NODE_POPUP_PROPBACK , \"&Propagate Backwards\" )
>586	ArgumentList	NODE_POPUP_PROPBACK
>587	Argument	\"&Propagate Backwards\"
>588	PrimaryExpression	\"&Propagate Backwards\"
>589	Argument	NODE_POPUP_PROPBACK
>590	Identifier	NODE_POPUP_PROPBACK
>591	Callee	_nodePopupMenu -> Append
>592	PtrMemberAccess	_nodePopupMenu -> Append
>593	Identifier	Append
>594	Identifier	_nodePopupMenu
>595	ExpressionStatement	 
>596	CallExpression	_nodePopupMenu -> Append ( NODE_POPUP_UPDATE , \"&Update Forwards\" )
>597	ArgumentList	NODE_POPUP_UPDATE
>598	Argument	\"&Update Forwards\"
>599	PrimaryExpression	\"&Update Forwards\"
>600	Argument	NODE_POPUP_UPDATE
>601	Identifier	NODE_POPUP_UPDATE
>602	Callee	_nodePopupMenu -> Append
>603	PtrMemberAccess	_nodePopupMenu -> Append
>604	Identifier	Append
>605	Identifier	_nodePopupMenu
>606	ExpressionStatement	 
>607	CallExpression	_nodePopupMenu -> Append ( NODE_POPUP_EVALUATE , \"&Evaluate Forwards\" )
>608	ArgumentList	NODE_POPUP_EVALUATE
>609	Argument	\"&Evaluate Forwards\"
>610	PrimaryExpression	\"&Evaluate Forwards\"
>611	Argument	NODE_POPUP_EVALUATE
>612	Identifier	NODE_POPUP_EVALUATE
>613	Callee	_nodePopupMenu -> Append
>614	PtrMemberAccess	_nodePopupMenu -> Append
>615	Identifier	Append
>616	Identifier	_nodePopupMenu
>617	ExpressionStatement	 
>618	CallExpression	_nodePopupMenu -> AppendSeparator ( )
>619	ArgumentList	 
>620	Callee	_nodePopupMenu -> AppendSeparator
>621	PtrMemberAccess	_nodePopupMenu -> AppendSeparator
>622	Identifier	AppendSeparator
>623	Identifier	_nodePopupMenu
>624	ExpressionStatement	 
>625	CallExpression	_nodePopupMenu -> Append ( NODE_POPUP_SHOWHIDE , \"&Show...\" )
>626	ArgumentList	NODE_POPUP_SHOWHIDE
>627	Argument	\"&Show...\"
>628	PrimaryExpression	\"&Show...\"
>629	Argument	NODE_POPUP_SHOWHIDE
>630	Identifier	NODE_POPUP_SHOWHIDE
>631	Callee	_nodePopupMenu -> Append
>632	PtrMemberAccess	_nodePopupMenu -> Append
>633	Identifier	Append
>634	Identifier	_nodePopupMenu
>635	ExpressionStatement	 
>636	CallExpression	_nodePopupMenu -> AppendSeparator ( )
>637	ArgumentList	 
>638	Callee	_nodePopupMenu -> AppendSeparator
>639	PtrMemberAccess	_nodePopupMenu -> AppendSeparator
>640	Identifier	AppendSeparator
>641	Identifier	_nodePopupMenu
>642	ExpressionStatement	 
>643	CallExpression	_nodePopupMenu -> Append ( NODE_POPUP_PROPERTIES , \"&Properties...\" )
>644	ArgumentList	NODE_POPUP_PROPERTIES
>645	Argument	\"&Properties...\"
>646	PrimaryExpression	\"&Properties...\"
>647	Argument	NODE_POPUP_PROPERTIES
>648	Identifier	NODE_POPUP_PROPERTIES
>649	Callee	_nodePopupMenu -> Append
>650	PtrMemberAccess	_nodePopupMenu -> Append
>651	Identifier	Append
>652	Identifier	_nodePopupMenu
>653	ExpressionStatement	 
>654	CallExpression	_nodePopupMenu -> Append ( NODE_POPUP_SET_NAME , \"Set &Name...\" )
>655	ArgumentList	NODE_POPUP_SET_NAME
>656	Argument	\"Set &Name...\"
>657	PrimaryExpression	\"Set &Name...\"
>658	Argument	NODE_POPUP_SET_NAME
>659	Identifier	NODE_POPUP_SET_NAME
>660	Callee	_nodePopupMenu -> Append
>661	PtrMemberAccess	_nodePopupMenu -> Append
>662	Identifier	Append
>663	Identifier	_nodePopupMenu
>664	ExpressionStatement	 
>665	AssignmentExpr	_nodePopupMenu = new wxMenu ( )
>666	UnaryExpression	new wxMenu ( )
>667	Identifier	_nodePopupMenu
>668	ExpressionStatement	 
>669	CallExpression	this -> SetScrollRate ( 1 , 1 )
>670	ArgumentList	1
>671	Argument	1
>672	PrimaryExpression	1
>673	Argument	1
>674	PrimaryExpression	1
>675	Callee	this -> SetScrollRate
>676	PtrMemberAccess	this -> SetScrollRate
>677	Identifier	SetScrollRate
>678	Identifier	this
>679	ExpressionStatement	 
>680	CallExpression	this -> SetVirtualSize ( 1024 , 1024 )
>681	ArgumentList	1024
>682	Argument	1024
>683	PrimaryExpression	1024
>684	Argument	1024
>685	PrimaryExpression	1024
>686	Callee	this -> SetVirtualSize
>687	PtrMemberAccess	this -> SetVirtualSize
>688	Identifier	SetVirtualSize
>689	Identifier	this
>690	ExpressionStatement	 
>691	CallExpression	this -> SetBackgroundColour ( * wxWHITE )
>692	ArgumentList	* wxWHITE
>693	Argument	* wxWHITE
>694	UnaryOp	* wxWHITE
>695	Identifier	wxWHITE
>696	UnaryOperator	*
>697	Callee	this -> SetBackgroundColour
>698	PtrMemberAccess	this -> SetBackgroundColour
>699	Identifier	SetBackgroundColour
>700	Identifier	this
>701	ExpressionStatement	 
>702	CallExpression	this -> SetBackgroundStyle ( wxBG_STYLE_PAINT )
>703	ArgumentList	wxBG_STYLE_PAINT
>704	Argument	wxBG_STYLE_PAINT
>705	Identifier	wxBG_STYLE_PAINT
>706	Callee	this -> SetBackgroundStyle
>707	PtrMemberAccess	this -> SetBackgroundStyle
>708	Identifier	SetBackgroundStyle
>709	Identifier	this
>710	ExpressionStatement	 
>711	AssignmentExpr	_graph = new drwnGraph ( ( \"New Network \" + toString ( _creationCount ) ) . c_str ( ) )
>712	CallExpression	( \"New Network \" + toString ( _creationCount ) ) . c_str ( )
>713	ArgumentList	 
>714	Callee	( \"New Network \" + toString ( _creationCount ) ) . c_str
>715	MemberAccess	( \"New Network \" + toString ( _creationCount ) ) . c_str
>716	Identifier	c_str
>717	AdditiveExpression	\"New Network \" + toString ( _creationCount )
>718	CallExpression	toString ( _creationCount )
>719	ArgumentList	_creationCount
>720	Argument	_creationCount
>721	Identifier	_creationCount
>722	Callee	toString
>723	Identifier	toString
>724	PrimaryExpression	\"New Network \"
>725	Identifier	_graph
>726	ExpressionStatement	 
>727	AssignmentExpr	_creationCount += 1
>728	PrimaryExpression	1
>729	Identifier	_creationCount
>785	FunctionDef	MainCanvas 
>786	ParameterList	 
>787	CompoundStatement	 
>788	IfStatement	if ( _connectPopupMenu != NULL )
>789	CompoundStatement	 
>790	ExpressionStatement	 
>791	Identifier	_connectPopupMenu
>792	Statement	 
>793	Condition	 
>794	EqualityExpression	_connectPopupMenu != NULL
>795	Identifier	NULL
>796	Identifier	_connectPopupMenu
>797	IfStatement	if ( _newNodePopupMenu != NULL )
>798	CompoundStatement	 
>799	ExpressionStatement	 
>800	Identifier	_newNodePopupMenu
>801	Statement	 
>802	Condition	 
>803	EqualityExpression	_newNodePopupMenu != NULL
>804	Identifier	NULL
>805	Identifier	_newNodePopupMenu
>806	IfStatement	if ( _nodePopupMenu != NULL )
>807	CompoundStatement	 
>808	ExpressionStatement	 
>809	Identifier	_nodePopupMenu
>810	Statement	 
>811	Condition	 
>812	EqualityExpression	_nodePopupMenu != NULL
>813	Identifier	NULL
>814	Identifier	_nodePopupMenu
>815	IfStatement	if ( _graph != NULL )
>816	CompoundStatement	 
>817	ExpressionStatement	 
>818	Identifier	_graph
>819	Statement	 
>820	Condition	 
>821	EqualityExpression	_graph != NULL
>822	Identifier	NULL
>823	Identifier	_graph
>832	FunctionDef	MainCanvas 
>833	ParameterList	wxEraseEvent & event
>834	Parameter	 
>835	Identifier	event
>836	ParameterType	wxEraseEvent &
>837	ReturnType	void
>838	CompoundStatement	 
>843	FunctionDef	MainCanvas 
>844	ParameterList	wxPaintEvent & WXUNUSED ( event )
>845	Parameter	 
>846	Identifier	WXUNUSED
>847	ParameterType	wxPaintEvent & ( event )
>848	ReturnType	void
>849	CompoundStatement	 
>850	IfStatement	if ( ( _mouseMode == MM_CONNECTING_INPUT ) || ( _mouseMode == MM_CONNECTING_OUTPUT ) )
>851	CompoundStatement	 
>852	ExpressionStatement	 
>853	CallExpression	dc . DrawLine ( node -> getLocationX ( ) + 32 / 2 , node -> getLocationY ( ) + 32 / 2 , _lastMousePoint . x , _lastMousePoint \
>854	ArgumentList	node -> getLocationX ( ) + 32 / 2
>855	Argument	_lastMousePoint . y
>856	MemberAccess	_lastMousePoint . y
>857	Identifier	y
>858	Identifier	_lastMousePoint
>859	Argument	_lastMousePoint . x
>860	MemberAccess	_lastMousePoint . x
>861	Identifier	x
>862	Identifier	_lastMousePoint
>863	Argument	node -> getLocationY ( ) + 32 / 2
>864	AdditiveExpression	node -> getLocationY ( ) + 32 / 2
>865	MultiplicativeExpression	32 / 2
>866	PrimaryExpression	2
>867	PrimaryExpression	32
>868	CallExpression	node -> getLocationY ( )
>869	ArgumentList	 
>870	Callee	node -> getLocationY
>871	PtrMemberAccess	node -> getLocationY
>872	Identifier	getLocationY
>873	Identifier	node
>874	Argument	node -> getLocationX ( ) + 32 / 2
>875	AdditiveExpression	node -> getLocationX ( ) + 32 / 2
>876	MultiplicativeExpression	32 / 2
>877	PrimaryExpression	2
>878	PrimaryExpression	32
>879	CallExpression	node -> getLocationX ( )
>880	ArgumentList	 
>881	Callee	node -> getLocationX
>882	PtrMemberAccess	node -> getLocationX
>883	Identifier	getLocationX
>884	Identifier	node
>885	Callee	dc . DrawLine
>886	MemberAccess	dc . DrawLine
>887	Identifier	DrawLine
>888	Identifier	dc
>889	ExpressionStatement	 
>890	CallExpression	dc . SetPen ( wxPen ( * wxRED , 2 ) )
>891	ArgumentList	wxPen ( * wxRED , 2 )
>892	Argument	wxPen ( * wxRED , 2 )
>893	CallExpression	wxPen ( * wxRED , 2 )
>894	ArgumentList	* wxRED
>895	Argument	2
>896	PrimaryExpression	2
>897	Argument	* wxRED
>898	UnaryOp	* wxRED
>899	Identifier	wxRED
>900	UnaryOperator	*
>901	Callee	wxPen
>902	Identifier	wxPen
>903	Callee	dc . SetPen
>904	MemberAccess	dc . SetPen
>905	Identifier	SetPen
>906	Identifier	dc
>907	IdentifierDeclStatement	 
>908	IdentifierDecl	* node = _activePort -> getOwner ( )
>909	AssignmentExpr	* node = _activePort -> getOwner ( )
>910	CallExpression	_activePort -> getOwner ( )
>911	ArgumentList	 
>912	Callee	_activePort -> getOwner
>913	PtrMemberAccess	_activePort -> getOwner
>914	Identifier	getOwner
>915	Identifier	_activePort
>916	Identifier	node
>917	Identifier	node
>918	IdentifierDeclType	drwnNode *
>919	Condition	 
>920	OrExpression	( _mouseMode == MM_CONNECTING_INPUT ) || ( _mouseMode == MM_CONNECTING_OUTPUT )
>921	EqualityExpression	_mouseMode == MM_CONNECTING_OUTPUT
>922	Identifier	MM_CONNECTING_OUTPUT
>923	Identifier	_mouseMode
>924	EqualityExpression	_mouseMode == MM_CONNECTING_INPUT
>925	Identifier	MM_CONNECTING_INPUT
>926	Identifier	_mouseMode
>927	ForStatement	for ( int i = 0 ; i < _graph -> numNodes ( ) ; i ++ )
>928	CompoundStatement	 
>929	ForStatement	for ( int i = 0 ; i < ( int ) lines . size ( ) ; i ++ )
>930	CompoundStatement	 
>931	ExpressionStatement	 
>932	CallExpression	dc . DrawText ( lines [ i ] . c_str ( ) , nx + ( nodeIcon -> GetWidth ( ) - s . x ) / 2 , ny + nodeIcon -> GetHeight ( ) + \
>933	ArgumentList	lines [ i ] . c_str ( )
>934	Argument	ny + nodeIcon -> GetHeight ( ) + i * s . y + 2
>935	AdditiveExpression	ny + nodeIcon -> GetHeight ( ) + i * s . y + 2
>936	AdditiveExpression	nodeIcon -> GetHeight ( ) + i * s . y + 2
>937	AdditiveExpression	i * s . y + 2
>938	PrimaryExpression	2
>939	MultiplicativeExpression	i * s . y
>940	MemberAccess	s . y
>941	Identifier	y
>942	Identifier	s
>943	Identifier	i
>944	CallExpression	nodeIcon -> GetHeight ( )
>945	ArgumentList	 
>946	Callee	nodeIcon -> GetHeight
>947	PtrMemberAccess	nodeIcon -> GetHeight
>948	Identifier	GetHeight
>949	Identifier	nodeIcon
>950	Identifier	ny
>951	Argument	nx + ( nodeIcon -> GetWidth ( ) - s . x ) / 2
>952	AdditiveExpression	nx + ( nodeIcon -> GetWidth ( ) - s . x ) / 2
>953	MultiplicativeExpression	( nodeIcon -> GetWidth ( ) - s . x ) / 2
>954	PrimaryExpression	2
>955	AdditiveExpression	nodeIcon -> GetWidth ( ) - s . x
>956	MemberAccess	s . x
>957	Identifier	x
>958	Identifier	s
>959	CallExpression	nodeIcon -> GetWidth ( )
>960	ArgumentList	 
>961	Callee	nodeIcon -> GetWidth
>962	PtrMemberAccess	nodeIcon -> GetWidth
>963	Identifier	GetWidth
>964	Identifier	nodeIcon
>965	Identifier	nx
>966	Argument	lines [ i ] . c_str ( )
>967	CallExpression	lines [ i ] . c_str ( )
>968	ArgumentList	 
>969	Callee	lines [ i ] . c_str
>970	MemberAccess	lines [ i ] . c_str
>971	Identifier	c_str
>972	ArrayIndexing	lines [ i ]
>973	Identifier	i
>974	Identifier	lines
>975	Callee	dc . DrawText
>976	MemberAccess	dc . DrawText
>977	Identifier	DrawText
>978	Identifier	dc
>979	ExpressionStatement	 
>980	AssignmentExpr	s = dc . GetTextExtent ( lines [ i ] )
>981	CallExpression	dc . GetTextExtent ( lines [ i ] )
>982	ArgumentList	lines [ i ]
>983	Argument	lines [ i ]
>984	ArrayIndexing	lines [ i ]
>985	Identifier	i
>986	Identifier	lines
>987	Callee	dc . GetTextExtent
>988	MemberAccess	dc . GetTextExtent
>989	Identifier	GetTextExtent
>990	Identifier	dc
>991	Identifier	s
>992	IncDecOp	 
>993	IncDec	++
>994	Identifier	i
>995	Condition	 
>996	RelationalExpression	i < ( int ) lines . size ( )
>997	CastExpression	( int ) lines . size ( )
>998	CallExpression	lines . size ( )
>999	ArgumentList	 
>1000	Callee	lines . size
>1001	MemberAccess	lines . size
>1002	Identifier	size
>1003	Identifier	lines
>1004	CastTarget	int
>1005	Identifier	i
>1006	ForInit	 
>1007	IdentifierDeclStatement	int i = 0 ;
>1008	IdentifierDecl	i = 0
>1009	AssignmentExpr	i = 0
>1010	PrimaryExpression	0
>1011	Identifier	i
>1012	Identifier	i
>1013	IdentifierDeclType	int
>1014	ExpressionStatement	 
>1015	CallExpression	dc . SetTextForeground ( bSelected ? wxSystemSettings 
>1016	ArgumentList	bSelected ? wxSystemSettings 
>1017	Argument	bSelected ? wxSystemSettings 
>1018	ConditionalExpression	bSelected ? wxSystemSettings 
>1019	CallExpression	wxColor ( 0 , 0 , 0 )
>1020	ArgumentList	0
>1021	Argument	0
>1022	PrimaryExpression	0
>1023	Argument	0
>1024	PrimaryExpression	0
>1025	Argument	0
>1026	PrimaryExpression	0
>1027	Callee	wxColor
>1028	Identifier	wxColor
>1029	CallExpression	wxSystemSettings 
>1030	ArgumentList	wxSYS_COLOUR_HIGHLIGHTTEXT
>1031	Argument	wxSYS_COLOUR_HIGHLIGHTTEXT
>1032	Identifier	wxSYS_COLOUR_HIGHLIGHTTEXT
>1033	Callee	wxSystemSettings 
>1034	Identifier	wxSystemSettings 
>1035	Condition	bSelected
>1036	Identifier	bSelected
>1037	Callee	dc . SetTextForeground
>1038	MemberAccess	dc . SetTextForeground
>1039	Identifier	SetTextForeground
>1040	Identifier	dc
>1041	ForStatement	for ( int i = 0 ; i < ( int ) lines . size ( ) ; i ++ )
>1042	CompoundStatement	 
>1043	ExpressionStatement	 
>1044	CallExpression	dc . DrawText ( lines [ i ] . c_str ( ) , nx + ( nodeIcon -> GetWidth ( ) - s . x ) / 2 + 2 , ny + nodeIcon -> GetHeight ( ) + \
>1045	ArgumentList	lines [ i ] . c_str ( )
>1046	Argument	ny + nodeIcon -> GetHeight ( ) + i * s . y + 2 - 2
>1047	AdditiveExpression	ny + nodeIcon -> GetHeight ( ) + i * s . y + 2 - 2
>1048	AdditiveExpression	nodeIcon -> GetHeight ( ) + i * s . y + 2 - 2
>1049	AdditiveExpression	i * s . y + 2 - 2
>1050	AdditiveExpression	2 - 2
>1051	PrimaryExpression	2
>1052	PrimaryExpression	2
>1053	MultiplicativeExpression	i * s . y
>1054	MemberAccess	s . y
>1055	Identifier	y
>1056	Identifier	s
>1057	Identifier	i
>1058	CallExpression	nodeIcon -> GetHeight ( )
>1059	ArgumentList	 
>1060	Callee	nodeIcon -> GetHeight
>1061	PtrMemberAccess	nodeIcon -> GetHeight
>1062	Identifier	GetHeight
>1063	Identifier	nodeIcon
>1064	Identifier	ny
>1065	Argument	nx + ( nodeIcon -> GetWidth ( ) - s . x ) / 2 + 2
>1066	AdditiveExpression	nx + ( nodeIcon -> GetWidth ( ) - s . x ) / 2 + 2
>1067	AdditiveExpression	( nodeIcon -> GetWidth ( ) - s . x ) / 2 + 2
>1068	PrimaryExpression	2
>1069	MultiplicativeExpression	( nodeIcon -> GetWidth ( ) - s . x ) / 2
>1070	PrimaryExpression	2
>1071	AdditiveExpression	nodeIcon -> GetWidth ( ) - s . x
>1072	MemberAccess	s . x
>1073	Identifier	x
>1074	Identifier	s
>1075	CallExpression	nodeIcon -> GetWidth ( )
>1076	ArgumentList	 
>1077	Callee	nodeIcon -> GetWidth
>1078	PtrMemberAccess	nodeIcon -> GetWidth
>1079	Identifier	GetWidth
>1080	Identifier	nodeIcon
>1081	Identifier	nx
>1082	Argument	lines [ i ] . c_str ( )
>1083	CallExpression	lines [ i ] . c_str ( )
>1084	ArgumentList	 
>1085	Callee	lines [ i ] . c_str
>1086	MemberAccess	lines [ i ] . c_str
>1087	Identifier	c_str
>1088	ArrayIndexing	lines [ i ]
>1089	Identifier	i
>1090	Identifier	lines
>1091	Callee	dc . DrawText
>1092	MemberAccess	dc . DrawText
>1093	Identifier	DrawText
>1094	Identifier	dc
>1095	ExpressionStatement	 
>1096	CallExpression	dc . DrawText ( lines [ i ] . c_str ( ) , nx + ( nodeIcon -> GetWidth ( ) - s . x ) / 2 - 2 , ny + nodeIcon -> GetHeight ( ) + \
>1097	ArgumentList	lines [ i ] . c_str ( )
>1098	Argument	ny + nodeIcon -> GetHeight ( ) + i * s . y + 2 + 2
>1099	AdditiveExpression	ny + nodeIcon -> GetHeight ( ) + i * s . y + 2 + 2
>1100	AdditiveExpression	nodeIcon -> GetHeight ( ) + i * s . y + 2 + 2
>1101	AdditiveExpression	i * s . y + 2 + 2
>1102	AdditiveExpression	2 + 2
>1103	PrimaryExpression	2
>1104	PrimaryExpression	2
>1105	MultiplicativeExpression	i * s . y
>1106	MemberAccess	s . y
>1107	Identifier	y
>1108	Identifier	s
>1109	Identifier	i
>1110	CallExpression	nodeIcon -> GetHeight ( )
>1111	ArgumentList	 
>1112	Callee	nodeIcon -> GetHeight
>1113	PtrMemberAccess	nodeIcon -> GetHeight
>1114	Identifier	GetHeight
>1115	Identifier	nodeIcon
>1116	Identifier	ny
>1117	Argument	nx + ( nodeIcon -> GetWidth ( ) - s . x ) / 2 - 2
>1118	AdditiveExpression	nx + ( nodeIcon -> GetWidth ( ) - s . x ) / 2 - 2
>1119	AdditiveExpression	( nodeIcon -> GetWidth ( ) - s . x ) / 2 - 2
>1120	PrimaryExpression	2
>1121	MultiplicativeExpression	( nodeIcon -> GetWidth ( ) - s . x ) / 2
>1122	PrimaryExpression	2
>1123	AdditiveExpression	nodeIcon -> GetWidth ( ) - s . x
>1124	MemberAccess	s . x
>1125	Identifier	x
>1126	Identifier	s
>1127	CallExpression	nodeIcon -> GetWidth ( )
>1128	ArgumentList	 
>1129	Callee	nodeIcon -> GetWidth
>1130	PtrMemberAccess	nodeIcon -> GetWidth
>1131	Identifier	GetWidth
>1132	Identifier	nodeIcon
>1133	Identifier	nx
>1134	Argument	lines [ i ] . c_str ( )
>1135	CallExpression	lines [ i ] . c_str ( )
>1136	ArgumentList	 
>1137	Callee	lines [ i ] . c_str
>1138	MemberAccess	lines [ i ] . c_str
>1139	Identifier	c_str
>1140	ArrayIndexing	lines [ i ]
>1141	Identifier	i
>1142	Identifier	lines
>1143	Callee	dc . DrawText
>1144	MemberAccess	dc . DrawText
>1145	Identifier	DrawText
>1146	Identifier	dc
>1147	ExpressionStatement	 
>1148	CallExpression	dc . DrawText ( lines [ i ] . c_str ( ) , nx + ( nodeIcon -> GetWidth ( ) - s . x ) / 2 + 2 , ny + nodeIcon -> GetHeight ( ) + \
>1149	ArgumentList	lines [ i ] . c_str ( )
>1150	Argument	ny + nodeIcon -> GetHeight ( ) + i * s . y + 2 + 2
>1151	AdditiveExpression	ny + nodeIcon -> GetHeight ( ) + i * s . y + 2 + 2
>1152	AdditiveExpression	nodeIcon -> GetHeight ( ) + i * s . y + 2 + 2
>1153	AdditiveExpression	i * s . y + 2 + 2
>1154	AdditiveExpression	2 + 2
>1155	PrimaryExpression	2
>1156	PrimaryExpression	2
>1157	MultiplicativeExpression	i * s . y
>1158	MemberAccess	s . y
>1159	Identifier	y
>1160	Identifier	s
>1161	Identifier	i
>1162	CallExpression	nodeIcon -> GetHeight ( )
>1163	ArgumentList	 
>1164	Callee	nodeIcon -> GetHeight
>1165	PtrMemberAccess	nodeIcon -> GetHeight
>1166	Identifier	GetHeight
>1167	Identifier	nodeIcon
>1168	Identifier	ny
>1169	Argument	nx + ( nodeIcon -> GetWidth ( ) - s . x ) / 2 + 2
>1170	AdditiveExpression	nx + ( nodeIcon -> GetWidth ( ) - s . x ) / 2 + 2
>1171	AdditiveExpression	( nodeIcon -> GetWidth ( ) - s . x ) / 2 + 2
>1172	PrimaryExpression	2
>1173	MultiplicativeExpression	( nodeIcon -> GetWidth ( ) - s . x ) / 2
>1174	PrimaryExpression	2
>1175	AdditiveExpression	nodeIcon -> GetWidth ( ) - s . x
>1176	MemberAccess	s . x
>1177	Identifier	x
>1178	Identifier	s
>1179	CallExpression	nodeIcon -> GetWidth ( )
>1180	ArgumentList	 
>1181	Callee	nodeIcon -> GetWidth
>1182	PtrMemberAccess	nodeIcon -> GetWidth
>1183	Identifier	GetWidth
>1184	Identifier	nodeIcon
>1185	Identifier	nx
>1186	Argument	lines [ i ] . c_str ( )
>1187	CallExpression	lines [ i ] . c_str ( )
>1188	ArgumentList	 
>1189	Callee	lines [ i ] . c_str
>1190	MemberAccess	lines [ i ] . c_str
>1191	Identifier	c_str
>1192	ArrayIndexing	lines [ i ]
>1193	Identifier	i
>1194	Identifier	lines
>1195	Callee	dc . DrawText
>1196	MemberAccess	dc . DrawText
>1197	Identifier	DrawText
>1198	Identifier	dc
>1199	ExpressionStatement	 
>1200	CallExpression	dc . DrawText ( lines [ i ] . c_str ( ) , nx + ( nodeIcon -> GetWidth ( ) - s . x ) / 2 - 2 , ny + nodeIcon -> GetHeight ( ) + \
>1201	ArgumentList	lines [ i ] . c_str ( )
>1202	Argument	ny + nodeIcon -> GetHeight ( ) + i * s . y + 2 - 2
>1203	AdditiveExpression	ny + nodeIcon -> GetHeight ( ) + i * s . y + 2 - 2
>1204	AdditiveExpression	nodeIcon -> GetHeight ( ) + i * s . y + 2 - 2
>1205	AdditiveExpression	i * s . y + 2 - 2
>1206	AdditiveExpression	2 - 2
>1207	PrimaryExpression	2
>1208	PrimaryExpression	2
>1209	MultiplicativeExpression	i * s . y
>1210	MemberAccess	s . y
>1211	Identifier	y
>1212	Identifier	s
>1213	Identifier	i
>1214	CallExpression	nodeIcon -> GetHeight ( )
>1215	ArgumentList	 
>1216	Callee	nodeIcon -> GetHeight
>1217	PtrMemberAccess	nodeIcon -> GetHeight
>1218	Identifier	GetHeight
>1219	Identifier	nodeIcon
>1220	Identifier	ny
>1221	Argument	nx + ( nodeIcon -> GetWidth ( ) - s . x ) / 2 - 2
>1222	AdditiveExpression	nx + ( nodeIcon -> GetWidth ( ) - s . x ) / 2 - 2
>1223	AdditiveExpression	( nodeIcon -> GetWidth ( ) - s . x ) / 2 - 2
>1224	PrimaryExpression	2
>1225	MultiplicativeExpression	( nodeIcon -> GetWidth ( ) - s . x ) / 2
>1226	PrimaryExpression	2
>1227	AdditiveExpression	nodeIcon -> GetWidth ( ) - s . x
>1228	MemberAccess	s . x
>1229	Identifier	x
>1230	Identifier	s
>1231	CallExpression	nodeIcon -> GetWidth ( )
>1232	ArgumentList	 
>1233	Callee	nodeIcon -> GetWidth
>1234	PtrMemberAccess	nodeIcon -> GetWidth
>1235	Identifier	GetWidth
>1236	Identifier	nodeIcon
>1237	Identifier	nx
>1238	Argument	lines [ i ] . c_str ( )
>1239	CallExpression	lines [ i ] . c_str ( )
>1240	ArgumentList	 
>1241	Callee	lines [ i ] . c_str
>1242	MemberAccess	lines [ i ] . c_str
>1243	Identifier	c_str
>1244	ArrayIndexing	lines [ i ]
>1245	Identifier	i
>1246	Identifier	lines
>1247	Callee	dc . DrawText
>1248	MemberAccess	dc . DrawText
>1249	Identifier	DrawText
>1250	Identifier	dc
>1251	ExpressionStatement	 
>1252	CallExpression	dc . DrawText ( lines [ i ] . c_str ( ) , nx + ( nodeIcon -> GetWidth ( ) - s . x ) / 2 + 1 , ny + nodeIcon -> GetHeight ( ) + \
>1253	ArgumentList	lines [ i ] . c_str ( )
>1254	Argument	ny + nodeIcon -> GetHeight ( ) + i * s . y + 2 - 1
>1255	AdditiveExpression	ny + nodeIcon -> GetHeight ( ) + i * s . y + 2 - 1
>1256	AdditiveExpression	nodeIcon -> GetHeight ( ) + i * s . y + 2 - 1
>1257	AdditiveExpression	i * s . y + 2 - 1
>1258	AdditiveExpression	2 - 1
>1259	PrimaryExpression	1
>1260	PrimaryExpression	2
>1261	MultiplicativeExpression	i * s . y
>1262	MemberAccess	s . y
>1263	Identifier	y
>1264	Identifier	s
>1265	Identifier	i
>1266	CallExpression	nodeIcon -> GetHeight ( )
>1267	ArgumentList	 
>1268	Callee	nodeIcon -> GetHeight
>1269	PtrMemberAccess	nodeIcon -> GetHeight
>1270	Identifier	GetHeight
>1271	Identifier	nodeIcon
>1272	Identifier	ny
>1273	Argument	nx + ( nodeIcon -> GetWidth ( ) - s . x ) / 2 + 1
>1274	AdditiveExpression	nx + ( nodeIcon -> GetWidth ( ) - s . x ) / 2 + 1
>1275	AdditiveExpression	( nodeIcon -> GetWidth ( ) - s . x ) / 2 + 1
>1276	PrimaryExpression	1
>1277	MultiplicativeExpression	( nodeIcon -> GetWidth ( ) - s . x ) / 2
>1278	PrimaryExpression	2
>1279	AdditiveExpression	nodeIcon -> GetWidth ( ) - s . x
>1280	MemberAccess	s . x
>1281	Identifier	x
>1282	Identifier	s
>1283	CallExpression	nodeIcon -> GetWidth ( )
>1284	ArgumentList	 
>1285	Callee	nodeIcon -> GetWidth
>1286	PtrMemberAccess	nodeIcon -> GetWidth
>1287	Identifier	GetWidth
>1288	Identifier	nodeIcon
>1289	Identifier	nx
>1290	Argument	lines [ i ] . c_str ( )
>1291	CallExpression	lines [ i ] . c_str ( )
>1292	ArgumentList	 
>1293	Callee	lines [ i ] . c_str
>1294	MemberAccess	lines [ i ] . c_str
>1295	Identifier	c_str
>1296	ArrayIndexing	lines [ i ]
>1297	Identifier	i
>1298	Identifier	lines
>1299	Callee	dc . DrawText
>1300	MemberAccess	dc . DrawText
>1301	Identifier	DrawText
>1302	Identifier	dc
>1303	ExpressionStatement	 
>1304	CallExpression	dc . DrawText ( lines [ i ] . c_str ( ) , nx + ( nodeIcon -> GetWidth ( ) - s . x ) / 2 - 1 , ny + nodeIcon -> GetHeight ( ) + \
>1305	ArgumentList	lines [ i ] . c_str ( )
>1306	Argument	ny + nodeIcon -> GetHeight ( ) + i * s . y + 2 + 1
>1307	AdditiveExpression	ny + nodeIcon -> GetHeight ( ) + i * s . y + 2 + 1
>1308	AdditiveExpression	nodeIcon -> GetHeight ( ) + i * s . y + 2 + 1
>1309	AdditiveExpression	i * s . y + 2 + 1
>1310	AdditiveExpression	2 + 1
>1311	PrimaryExpression	1
>1312	PrimaryExpression	2
>1313	MultiplicativeExpression	i * s . y
>1314	MemberAccess	s . y
>1315	Identifier	y
>1316	Identifier	s
>1317	Identifier	i
>1318	CallExpression	nodeIcon -> GetHeight ( )
>1319	ArgumentList	 
>1320	Callee	nodeIcon -> GetHeight
>1321	PtrMemberAccess	nodeIcon -> GetHeight
>1322	Identifier	GetHeight
>1323	Identifier	nodeIcon
>1324	Identifier	ny
>1325	Argument	nx + ( nodeIcon -> GetWidth ( ) - s . x ) / 2 - 1
>1326	AdditiveExpression	nx + ( nodeIcon -> GetWidth ( ) - s . x ) / 2 - 1
>1327	AdditiveExpression	( nodeIcon -> GetWidth ( ) - s . x ) / 2 - 1
>1328	PrimaryExpression	1
>1329	MultiplicativeExpression	( nodeIcon -> GetWidth ( ) - s . x ) / 2
>1330	PrimaryExpression	2
>1331	AdditiveExpression	nodeIcon -> GetWidth ( ) - s . x
>1332	MemberAccess	s . x
>1333	Identifier	x
>1334	Identifier	s
>1335	CallExpression	nodeIcon -> GetWidth ( )
>1336	ArgumentList	 
>1337	Callee	nodeIcon -> GetWidth
>1338	PtrMemberAccess	nodeIcon -> GetWidth
>1339	Identifier	GetWidth
>1340	Identifier	nodeIcon
>1341	Identifier	nx
>1342	Argument	lines [ i ] . c_str ( )
>1343	CallExpression	lines [ i ] . c_str ( )
>1344	ArgumentList	 
>1345	Callee	lines [ i ] . c_str
>1346	MemberAccess	lines [ i ] . c_str
>1347	Identifier	c_str
>1348	ArrayIndexing	lines [ i ]
>1349	Identifier	i
>1350	Identifier	lines
>1351	Callee	dc . DrawText
>1352	MemberAccess	dc . DrawText
>1353	Identifier	DrawText
>1354	Identifier	dc
>1355	ExpressionStatement	 
>1356	CallExpression	dc . DrawText ( lines [ i ] . c_str ( ) , nx + ( nodeIcon -> GetWidth ( ) - s . x ) / 2 + 1 , ny + nodeIcon -> GetHeight ( ) + \
>1357	ArgumentList	lines [ i ] . c_str ( )
>1358	Argument	ny + nodeIcon -> GetHeight ( ) + i * s . y + 2 + 1
>1359	AdditiveExpression	ny + nodeIcon -> GetHeight ( ) + i * s . y + 2 + 1
>1360	AdditiveExpression	nodeIcon -> GetHeight ( ) + i * s . y + 2 + 1
>1361	AdditiveExpression	i * s . y + 2 + 1
>1362	AdditiveExpression	2 + 1
>1363	PrimaryExpression	1
>1364	PrimaryExpression	2
>1365	MultiplicativeExpression	i * s . y
>1366	MemberAccess	s . y
>1367	Identifier	y
>1368	Identifier	s
>1369	Identifier	i
>1370	CallExpression	nodeIcon -> GetHeight ( )
>1371	ArgumentList	 
>1372	Callee	nodeIcon -> GetHeight
>1373	PtrMemberAccess	nodeIcon -> GetHeight
>1374	Identifier	GetHeight
>1375	Identifier	nodeIcon
>1376	Identifier	ny
>1377	Argument	nx + ( nodeIcon -> GetWidth ( ) - s . x ) / 2 + 1
>1378	AdditiveExpression	nx + ( nodeIcon -> GetWidth ( ) - s . x ) / 2 + 1
>1379	AdditiveExpression	( nodeIcon -> GetWidth ( ) - s . x ) / 2 + 1
>1380	PrimaryExpression	1
>1381	MultiplicativeExpression	( nodeIcon -> GetWidth ( ) - s . x ) / 2
>1382	PrimaryExpression	2
>1383	AdditiveExpression	nodeIcon -> GetWidth ( ) - s . x
>1384	MemberAccess	s . x
>1385	Identifier	x
>1386	Identifier	s
>1387	CallExpression	nodeIcon -> GetWidth ( )
>1388	ArgumentList	 
>1389	Callee	nodeIcon -> GetWidth
>1390	PtrMemberAccess	nodeIcon -> GetWidth
>1391	Identifier	GetWidth
>1392	Identifier	nodeIcon
>1393	Identifier	nx
>1394	Argument	lines [ i ] . c_str ( )
>1395	CallExpression	lines [ i ] . c_str ( )
>1396	ArgumentList	 
>1397	Callee	lines [ i ] . c_str
>1398	MemberAccess	lines [ i ] . c_str
>1399	Identifier	c_str
>1400	ArrayIndexing	lines [ i ]
>1401	Identifier	i
>1402	Identifier	lines
>1403	Callee	dc . DrawText
>1404	MemberAccess	dc . DrawText
>1405	Identifier	DrawText
>1406	Identifier	dc
>1407	ExpressionStatement	 
>1408	CallExpression	dc . DrawText ( lines [ i ] . c_str ( ) , nx + ( nodeIcon -> GetWidth ( ) - s . x ) / 2 - 1 , ny + nodeIcon -> GetHeight ( ) + \
>1409	ArgumentList	lines [ i ] . c_str ( )
>1410	Argument	ny + nodeIcon -> GetHeight ( ) + i * s . y + 2 - 1
>1411	AdditiveExpression	ny + nodeIcon -> GetHeight ( ) + i * s . y + 2 - 1
>1412	AdditiveExpression	nodeIcon -> GetHeight ( ) + i * s . y + 2 - 1
>1413	AdditiveExpression	i * s . y + 2 - 1
>1414	AdditiveExpression	2 - 1
>1415	PrimaryExpression	1
>1416	PrimaryExpression	2
>1417	MultiplicativeExpression	i * s . y
>1418	MemberAccess	s . y
>1419	Identifier	y
>1420	Identifier	s
>1421	Identifier	i
>1422	CallExpression	nodeIcon -> GetHeight ( )
>1423	ArgumentList	 
>1424	Callee	nodeIcon -> GetHeight
>1425	PtrMemberAccess	nodeIcon -> GetHeight
>1426	Identifier	GetHeight
>1427	Identifier	nodeIcon
>1428	Identifier	ny
>1429	Argument	nx + ( nodeIcon -> GetWidth ( ) - s . x ) / 2 - 1
>1430	AdditiveExpression	nx + ( nodeIcon -> GetWidth ( ) - s . x ) / 2 - 1
>1431	AdditiveExpression	( nodeIcon -> GetWidth ( ) - s . x ) / 2 - 1
>1432	PrimaryExpression	1
>1433	MultiplicativeExpression	( nodeIcon -> GetWidth ( ) - s . x ) / 2
>1434	PrimaryExpression	2
>1435	AdditiveExpression	nodeIcon -> GetWidth ( ) - s . x
>1436	MemberAccess	s . x
>1437	Identifier	x
>1438	Identifier	s
>1439	CallExpression	nodeIcon -> GetWidth ( )
>1440	ArgumentList	 
>1441	Callee	nodeIcon -> GetWidth
>1442	PtrMemberAccess	nodeIcon -> GetWidth
>1443	Identifier	GetWidth
>1444	Identifier	nodeIcon
>1445	Identifier	nx
>1446	Argument	lines [ i ] . c_str ( )
>1447	CallExpression	lines [ i ] . c_str ( )
>1448	ArgumentList	 
>1449	Callee	lines [ i ] . c_str
>1450	MemberAccess	lines [ i ] . c_str
>1451	Identifier	c_str
>1452	ArrayIndexing	lines [ i ]
>1453	Identifier	i
>1454	Identifier	lines
>1455	Callee	dc . DrawText
>1456	MemberAccess	dc . DrawText
>1457	Identifier	DrawText
>1458	Identifier	dc
>1459	ExpressionStatement	 
>1460	AssignmentExpr	s = dc . GetTextExtent ( lines [ i ] )
>1461	CallExpression	dc . GetTextExtent ( lines [ i ] )
>1462	ArgumentList	lines [ i ]
>1463	Argument	lines [ i ]
>1464	ArrayIndexing	lines [ i ]
>1465	Identifier	i
>1466	Identifier	lines
>1467	Callee	dc . GetTextExtent
>1468	MemberAccess	dc . GetTextExtent
>1469	Identifier	GetTextExtent
>1470	Identifier	dc
>1471	Identifier	s
>1472	IncDecOp	 
>1473	IncDec	++
>1474	Identifier	i
>1475	Condition	 
>1476	RelationalExpression	i < ( int ) lines . size ( )
>1477	CastExpression	( int ) lines . size ( )
>1478	CallExpression	lines . size ( )
>1479	ArgumentList	 
>1480	Callee	lines . size
>1481	MemberAccess	lines . size
>1482	Identifier	size
>1483	Identifier	lines
>1484	CastTarget	int
>1485	Identifier	i
>1486	ForInit	 
>1487	IdentifierDeclStatement	int i = 0 ;
>1488	IdentifierDecl	i = 0
>1489	AssignmentExpr	i = 0
>1490	PrimaryExpression	0
>1491	Identifier	i
>1492	Identifier	i
>1493	IdentifierDeclType	int
>1494	ExpressionStatement	 
>1495	CallExpression	dc . SetTextForeground ( bSelected ? wxSystemSettings 
>1496	ArgumentList	bSelected ? wxSystemSettings 
>1497	Argument	bSelected ? wxSystemSettings 
>1498	ConditionalExpression	bSelected ? wxSystemSettings 
>1499	CallExpression	dc . GetTextBackground ( )
>1500	ArgumentList	 
>1501	Callee	dc . GetTextBackground
>1502	MemberAccess	dc . GetTextBackground
>1503	Identifier	GetTextBackground
>1504	Identifier	dc
>1505	CallExpression	wxSystemSettings 
>1506	ArgumentList	wxSYS_COLOUR_HIGHLIGHT
>1507	Argument	wxSYS_COLOUR_HIGHLIGHT
>1508	Identifier	wxSYS_COLOUR_HIGHLIGHT
>1509	Callee	wxSystemSettings 
>1510	Identifier	wxSystemSettings 
>1511	Condition	bSelected
>1512	Identifier	bSelected
>1513	Callee	dc . SetTextForeground
>1514	MemberAccess	dc . SetTextForeground
>1515	Identifier	SetTextForeground
>1516	Identifier	dc
>1517	IfStatement	if ( bSelected )
>1518	CompoundStatement	 
>1519	ExpressionStatement	 
>1520	CallExpression	dc . DrawRectangle ( nx + ( nodeIcon -> GetWidth ( ) - maxExtentX ) / 2 - SELWIDTH , ny + nodeIcon -> GetHeight ( ) , \
>1521	ArgumentList	nx + ( nodeIcon -> GetWidth ( ) - maxExtentX ) / 2 - SELWIDTH
>1522	Argument	lines . size ( ) * s . y + SELWIDTH
>1523	AdditiveExpression	lines . size ( ) * s . y + SELWIDTH
>1524	Identifier	SELWIDTH
>1525	MultiplicativeExpression	lines . size ( ) * s . y
>1526	MemberAccess	s . y
>1527	Identifier	y
>1528	Identifier	s
>1529	CallExpression	lines . size ( )
>1530	ArgumentList	 
>1531	Callee	lines . size
>1532	MemberAccess	lines . size
>1533	Identifier	size
>1534	Identifier	lines
>1535	Argument	maxExtentX + 2 * SELWIDTH
>1536	AdditiveExpression	maxExtentX + 2 * SELWIDTH
>1537	MultiplicativeExpression	2 * SELWIDTH
>1538	Identifier	SELWIDTH
>1539	PrimaryExpression	2
>1540	Identifier	maxExtentX
>1541	Argument	ny + nodeIcon -> GetHeight ( )
>1542	AdditiveExpression	ny + nodeIcon -> GetHeight ( )
>1543	CallExpression	nodeIcon -> GetHeight ( )
>1544	ArgumentList	 
>1545	Callee	nodeIcon -> GetHeight
>1546	PtrMemberAccess	nodeIcon -> GetHeight
>1547	Identifier	GetHeight
>1548	Identifier	nodeIcon
>1549	Identifier	ny
>1550	Argument	nx + ( nodeIcon -> GetWidth ( ) - maxExtentX ) / 2 - SELWIDTH
>1551	AdditiveExpression	nx + ( nodeIcon -> GetWidth ( ) - maxExtentX ) / 2 - SELWIDTH
>1552	AdditiveExpression	( nodeIcon -> GetWidth ( ) - maxExtentX ) / 2 - SELWIDTH
>1553	Identifier	SELWIDTH
>1554	MultiplicativeExpression	( nodeIcon -> GetWidth ( ) - maxExtentX ) / 2
>1555	PrimaryExpression	2
>1556	AdditiveExpression	nodeIcon -> GetWidth ( ) - maxExtentX
>1557	Identifier	maxExtentX
>1558	CallExpression	nodeIcon -> GetWidth ( )
>1559	ArgumentList	 
>1560	Callee	nodeIcon -> GetWidth
>1561	PtrMemberAccess	nodeIcon -> GetWidth
>1562	Identifier	GetWidth
>1563	Identifier	nodeIcon
>1564	Identifier	nx
>1565	Callee	dc . DrawRectangle
>1566	MemberAccess	dc . DrawRectangle
>1567	Identifier	DrawRectangle
>1568	Identifier	dc
>1569	ExpressionStatement	 
>1570	CallExpression	dc . SetBrush ( selBrush )
>1571	ArgumentList	selBrush
>1572	Argument	selBrush
>1573	Identifier	selBrush
>1574	Callee	dc . SetBrush
>1575	MemberAccess	dc . SetBrush
>1576	Identifier	SetBrush
>1577	Identifier	dc
>1578	ExpressionStatement	 
>1579	CallExpression	dc . SetPen ( * wxTRANSPARENT_PEN )
>1580	ArgumentList	* wxTRANSPARENT_PEN
>1581	Argument	* wxTRANSPARENT_PEN
>1582	UnaryOp	* wxTRANSPARENT_PEN
>1583	Identifier	wxTRANSPARENT_PEN
>1584	UnaryOperator	*
>1585	Callee	dc . SetPen
>1586	MemberAccess	dc . SetPen
>1587	Identifier	SetPen
>1588	Identifier	dc
>1589	ForStatement	for ( int i = 0 ; i < ( int ) lines . size ( ) ; i ++ )
>1590	CompoundStatement	 
>1591	ExpressionStatement	 
>1592	AssignmentExpr	maxExtentX = std 
>1593	CallExpression	std 
>1594	ArgumentList	maxExtentX
>1595	Argument	s . x
>1596	MemberAccess	s . x
>1597	Identifier	x
>1598	Identifier	s
>1599	Argument	maxExtentX
>1600	Identifier	maxExtentX
>1601	Callee	std 
>1602	Identifier	std 
>1603	Identifier	maxExtentX
>1604	ExpressionStatement	 
>1605	AssignmentExpr	s = dc . GetTextExtent ( lines [ i ] )
>1606	CallExpression	dc . GetTextExtent ( lines [ i ] )
>1607	ArgumentList	lines [ i ]
>1608	Argument	lines [ i ]
>1609	ArrayIndexing	lines [ i ]
>1610	Identifier	i
>1611	Identifier	lines
>1612	Callee	dc . GetTextExtent
>1613	MemberAccess	dc . GetTextExtent
>1614	Identifier	GetTextExtent
>1615	Identifier	dc
>1616	Identifier	s
>1617	IncDecOp	 
>1618	IncDec	++
>1619	Identifier	i
>1620	Condition	 
>1621	RelationalExpression	i < ( int ) lines . size ( )
>1622	CastExpression	( int ) lines . size ( )
>1623	CallExpression	lines . size ( )
>1624	ArgumentList	 
>1625	Callee	lines . size
>1626	MemberAccess	lines . size
>1627	Identifier	size
>1628	Identifier	lines
>1629	CastTarget	int
>1630	Identifier	i
>1631	ForInit	 
>1632	IdentifierDeclStatement	int i = 0 ;
>1633	IdentifierDecl	i = 0
>1634	AssignmentExpr	i = 0
>1635	PrimaryExpression	0
>1636	Identifier	i
>1637	Identifier	i
>1638	IdentifierDeclType	int
>1639	IdentifierDeclStatement	 
>1640	IdentifierDecl	maxExtentX = 0
>1641	AssignmentExpr	maxExtentX = 0
>1642	PrimaryExpression	0
>1643	Identifier	maxExtentX
>1644	Identifier	maxExtentX
>1645	IdentifierDeclType	int
>1646	Condition	 
>1647	Identifier	bSelected
>1648	IfStatement	if ( ! bSelected )
>1649	CompoundStatement	 
>1650	ForStatement	for ( int i = 0 ; i < ( int ) lines . size ( ) ; i ++ )
>1651	CompoundStatement	 
>1652	IfStatement	if ( s . x > 3 * nodeIcon -> GetWidth ( ) )
>1653	CompoundStatement	 
>1654	ExpressionStatement	 
>1655	AssignmentExpr	lines [ i ] = lines [ i ] + string ( \"...\" )
>1656	AdditiveExpression	lines [ i ] + string ( \"...\" )
>1657	CallExpression	string ( \"...\" )
>1658	ArgumentList	\"...\"
>1659	Argument	\"...\"
>1660	PrimaryExpression	\"...\"
>1661	Callee	string
>1662	Identifier	string
>1663	ArrayIndexing	lines [ i ]
>1664	Identifier	i
>1665	Identifier	lines
>1666	ArrayIndexing	lines [ i ]
>1667	Identifier	i
>1668	Identifier	lines
>1669	WhileStatement	while ( s . x > 3 * nodeIcon -> GetWidth ( ) )
>1670	CompoundStatement	 
>1671	ExpressionStatement	 
>1672	AssignmentExpr	s = dc . GetTextExtent ( lines [ i ] + string ( \"...\" ) )
>1673	CallExpression	dc . GetTextExtent ( lines [ i ] + string ( \"...\" ) )
>1674	ArgumentList	lines [ i ] + string ( \"...\" )
>1675	Argument	lines [ i ] + string ( \"...\" )
>1676	AdditiveExpression	lines [ i ] + string ( \"...\" )
>1677	CallExpression	string ( \"...\" )
>1678	ArgumentList	\"...\"
>1679	Argument	\"...\"
>1680	PrimaryExpression	\"...\"
>1681	Callee	string
>1682	Identifier	string
>1683	ArrayIndexing	lines [ i ]
>1684	Identifier	i
>1685	Identifier	lines
>1686	Callee	dc . GetTextExtent
>1687	MemberAccess	dc . GetTextExtent
>1688	Identifier	GetTextExtent
>1689	Identifier	dc
>1690	Identifier	s
>1691	ExpressionStatement	 
>1692	CallExpression	lines [ i ] . resize ( lines [ i ] . length ( ) - 1 )
>1693	ArgumentList	lines [ i ] . length ( ) - 1
>1694	Argument	lines [ i ] . length ( ) - 1
>1695	AdditiveExpression	lines [ i ] . length ( ) - 1
>1696	PrimaryExpression	1
>1697	CallExpression	lines [ i ] . length ( )
>1698	ArgumentList	 
>1699	Callee	lines [ i ] . length
>1700	MemberAccess	lines [ i ] . length
>1701	Identifier	length
>1702	ArrayIndexing	lines [ i ]
>1703	Identifier	i
>1704	Identifier	lines
>1705	Callee	lines [ i ] . resize
>1706	MemberAccess	lines [ i ] . resize
>1707	Identifier	resize
>1708	ArrayIndexing	lines [ i ]
>1709	Identifier	i
>1710	Identifier	lines
>1711	Condition	 
>1712	RelationalExpression	s . x > 3 * nodeIcon -> GetWidth ( )
>1713	MultiplicativeExpression	3 * nodeIcon -> GetWidth ( )
>1714	CallExpression	nodeIcon -> GetWidth ( )
>1715	ArgumentList	 
>1716	Callee	nodeIcon -> GetWidth
>1717	PtrMemberAccess	nodeIcon -> GetWidth
>1718	Identifier	GetWidth
>1719	Identifier	nodeIcon
>1720	PrimaryExpression	3
>1721	MemberAccess	s . x
>1722	Identifier	x
>1723	Identifier	s
>1724	Condition	 
>1725	RelationalExpression	s . x > 3 * nodeIcon -> GetWidth ( )
>1726	MultiplicativeExpression	3 * nodeIcon -> GetWidth ( )
>1727	CallExpression	nodeIcon -> GetWidth ( )
>1728	ArgumentList	 
>1729	Callee	nodeIcon -> GetWidth
>1730	PtrMemberAccess	nodeIcon -> GetWidth
>1731	Identifier	GetWidth
>1732	Identifier	nodeIcon
>1733	PrimaryExpression	3
>1734	MemberAccess	s . x
>1735	Identifier	x
>1736	Identifier	s
>1737	ExpressionStatement	 
>1738	AssignmentExpr	s = dc . GetTextExtent ( lines [ i ] )
>1739	CallExpression	dc . GetTextExtent ( lines [ i ] )
>1740	ArgumentList	lines [ i ]
>1741	Argument	lines [ i ]
>1742	ArrayIndexing	lines [ i ]
>1743	Identifier	i
>1744	Identifier	lines
>1745	Callee	dc . GetTextExtent
>1746	MemberAccess	dc . GetTextExtent
>1747	Identifier	GetTextExtent
>1748	Identifier	dc
>1749	Identifier	s
>1750	IncDecOp	 
>1751	IncDec	++
>1752	Identifier	i
>1753	Condition	 
>1754	RelationalExpression	i < ( int ) lines . size ( )
>1755	CastExpression	( int ) lines . size ( )
>1756	CallExpression	lines . size ( )
>1757	ArgumentList	 
>1758	Callee	lines . size
>1759	MemberAccess	lines . size
>1760	Identifier	size
>1761	Identifier	lines
>1762	CastTarget	int
>1763	Identifier	i
>1764	ForInit	 
>1765	IdentifierDeclStatement	int i = 0 ;
>1766	IdentifierDecl	i = 0
>1767	AssignmentExpr	i = 0
>1768	PrimaryExpression	0
>1769	Identifier	i
>1770	Identifier	i
>1771	IdentifierDeclType	int
>1772	Condition	 
>1773	UnaryOp	! bSelected
>1774	Identifier	bSelected
>1775	UnaryOperator	!
>1776	ForStatement	for ( int i = 1 ; i < ( int ) nameTokens . size ( ) ; i ++ )
>1777	CompoundStatement	 
>1778	IfStatement	if ( s . x > 3 * nodeIcon -> GetWidth ( ) )
>1779	ElseStatement	else
>1780	CompoundStatement	 
>1781	ExpressionStatement	 
>1782	AssignmentExpr	lines . back ( ) += string ( \" \" ) + nameTokens [ i ]
>1783	AdditiveExpression	string ( \" \" ) + nameTokens [ i ]
>1784	ArrayIndexing	nameTokens [ i ]
>1785	Identifier	i
>1786	Identifier	nameTokens
>1787	CallExpression	string ( \" \" )
>1788	ArgumentList	\" \"
>1789	Argument	\" \"
>1790	PrimaryExpression	\" \"
>1791	Callee	string
>1792	Identifier	string
>1793	CallExpression	lines . back ( )
>1794	ArgumentList	 
>1795	Callee	lines . back
>1796	MemberAccess	lines . back
>1797	Identifier	back
>1798	Identifier	lines
>1799	CompoundStatement	 
>1800	ExpressionStatement	 
>1801	CallExpression	lines . push_back ( nameTokens [ i ] )
>1802	ArgumentList	nameTokens [ i ]
>1803	Argument	nameTokens [ i ]
>1804	ArrayIndexing	nameTokens [ i ]
>1805	Identifier	i
>1806	Identifier	nameTokens
>1807	Callee	lines . push_back
>1808	MemberAccess	lines . push_back
>1809	Identifier	push_back
>1810	Identifier	lines
>1811	IfStatement	if ( ! bSelected && ( lines . size ( ) == 2 ) )
>1812	CompoundStatement	 
>1813	BreakStatement	 
>1814	ExpressionStatement	 
>1815	CallExpression	lines . push_back ( string ( \"...\" ) )
>1816	ArgumentList	string ( \"...\" )
>1817	Argument	string ( \"...\" )
>1818	CallExpression	string ( \"...\" )
>1819	ArgumentList	\"...\"
>1820	Argument	\"...\"
>1821	PrimaryExpression	\"...\"
>1822	Callee	string
>1823	Identifier	string
>1824	Callee	lines . push_back
>1825	MemberAccess	lines . push_back
>1826	Identifier	push_back
>1827	Identifier	lines
>1828	Condition	 
>1829	AndExpression	! bSelected && ( lines . size ( ) == 2 )
>1830	EqualityExpression	lines . size ( ) == 2
>1831	PrimaryExpression	2
>1832	CallExpression	lines . size ( )
>1833	ArgumentList	 
>1834	Callee	lines . size
>1835	MemberAccess	lines . size
>1836	Identifier	size
>1837	Identifier	lines
>1838	UnaryOp	! bSelected
>1839	Identifier	bSelected
>1840	UnaryOperator	!
>1841	Condition	 
>1842	RelationalExpression	s . x > 3 * nodeIcon -> GetWidth ( )
>1843	MultiplicativeExpression	3 * nodeIcon -> GetWidth ( )
>1844	CallExpression	nodeIcon -> GetWidth ( )
>1845	ArgumentList	 
>1846	Callee	nodeIcon -> GetWidth
>1847	PtrMemberAccess	nodeIcon -> GetWidth
>1848	Identifier	GetWidth
>1849	Identifier	nodeIcon
>1850	PrimaryExpression	3
>1851	MemberAccess	s . x
>1852	Identifier	x
>1853	Identifier	s
>1854	IdentifierDeclStatement	 
>1855	IdentifierDecl	s = dc . GetTextExtent ( lines . back ( ) + string ( \" \" ) + nameTokens [ i ] )
>1856	AssignmentExpr	s = dc . GetTextExtent ( lines . back ( ) + string ( \" \" ) + nameTokens [ i ] )
>1857	CallExpression	dc . GetTextExtent ( lines . back ( ) + string ( \" \" ) + nameTokens [ i ] )
>1858	ArgumentList	lines . back ( ) + string ( \" \" ) + nameTokens [ i ]
>1859	Argument	lines . back ( ) + string ( \" \" ) + nameTokens [ i ]
>1860	AdditiveExpression	lines . back ( ) + string ( \" \" ) + nameTokens [ i ]
>1861	AdditiveExpression	string ( \" \" ) + nameTokens [ i ]
>1862	ArrayIndexing	nameTokens [ i ]
>1863	Identifier	i
>1864	Identifier	nameTokens
>1865	CallExpression	string ( \" \" )
>1866	ArgumentList	\" \"
>1867	Argument	\" \"
>1868	PrimaryExpression	\" \"
>1869	Callee	string
>1870	Identifier	string
>1871	CallExpression	lines . back ( )
>1872	ArgumentList	 
>1873	Callee	lines . back
>1874	MemberAccess	lines . back
>1875	Identifier	back
>1876	Identifier	lines
>1877	Callee	dc . GetTextExtent
>1878	MemberAccess	dc . GetTextExtent
>1879	Identifier	GetTextExtent
>1880	Identifier	dc
>1881	Identifier	s
>1882	Identifier	s
>1883	IdentifierDeclType	wxSize
>1884	IncDecOp	 
>1885	IncDec	++
>1886	Identifier	i
>1887	Condition	 
>1888	RelationalExpression	i < ( int ) nameTokens . size ( )
>1889	CastExpression	( int ) nameTokens . size ( )
>1890	CallExpression	nameTokens . size ( )
>1891	ArgumentList	 
>1892	Callee	nameTokens . size
>1893	MemberAccess	nameTokens . size
>1894	Identifier	size
>1895	Identifier	nameTokens
>1896	CastTarget	int
>1897	Identifier	i
>1898	ForInit	 
>1899	IdentifierDeclStatement	int i = 1 ;
>1900	IdentifierDecl	i = 1
>1901	AssignmentExpr	i = 1
>1902	PrimaryExpression	1
>1903	Identifier	i
>1904	Identifier	i
>1905	IdentifierDeclType	int
>1906	ExpressionStatement	 
>1907	CallExpression	lines . push_back ( nameTokens [ 0 ] )
>1908	ArgumentList	nameTokens [ 0 ]
>1909	Argument	nameTokens [ 0 ]
>1910	ArrayIndexing	nameTokens [ 0 ]
>1911	PrimaryExpression	0
>1912	Identifier	nameTokens
>1913	Callee	lines . push_back
>1914	MemberAccess	lines . push_back
>1915	Identifier	push_back
>1916	Identifier	lines
>1917	IdentifierDeclStatement	 
>1918	IdentifierDecl	lines
>1919	Identifier	lines
>1920	IdentifierDeclType	vector < string >
>1921	ExpressionStatement	 
>1922	CallExpression	DRWN_ASSERT_MSG ( ! nameTokens . empty ( ) , \"\\"\" << node -> getName ( ) << \"\\"\" )
>1923	ArgumentList	! nameTokens . empty ( )
>1924	Argument	\"\\"\" << node -> getName ( ) << \"\\"\"
>1925	ShiftExpression	\"\\"\" << node -> getName ( ) << \"\\"\"
>1926	ShiftExpression	node -> getName ( ) << \"\\"\"
>1927	PrimaryExpression	\"\\"\"
>1928	CallExpression	node -> getName ( )
>1929	ArgumentList	 
>1930	Callee	node -> getName
>1931	PtrMemberAccess	node -> getName
>1932	Identifier	getName
>1933	Identifier	node
>1934	PrimaryExpression	\"\\"\"
>1935	Argument	! nameTokens . empty ( )
>1936	UnaryOp	! nameTokens . empty ( )
>1937	CallExpression	nameTokens . empty ( )
>1938	ArgumentList	 
>1939	Callee	nameTokens . empty
>1940	MemberAccess	nameTokens . empty
>1941	Identifier	empty
>1942	Identifier	nameTokens
>1943	UnaryOperator	!
>1944	Callee	DRWN_ASSERT_MSG
>1945	Identifier	DRWN_ASSERT_MSG
>1946	ExpressionStatement	 
>1947	CallExpression	drwn 
>1948	ArgumentList	node -> getName ( )
>1949	Argument	nameTokens
>1950	Identifier	nameTokens
>1951	Argument	node -> getName ( )
>1952	CallExpression	node -> getName ( )
>1953	ArgumentList	 
>1954	Callee	node -> getName
>1955	PtrMemberAccess	node -> getName
>1956	Identifier	getName
>1957	Identifier	node
>1958	Callee	drwn 
>1959	Identifier	drwn 
>1960	IdentifierDeclStatement	 
>1961	IdentifierDecl	nameTokens
>1962	Identifier	nameTokens
>1963	IdentifierDeclType	vector < string >
>1964	ExpressionStatement	 
>1965	CallExpression	dc . DrawBitmap ( * nodeIcon , nx , ny , true )
>1966	ArgumentList	* nodeIcon
>1967	Argument	true
>1968	Identifier	true
>1969	Argument	ny
>1970	Identifier	ny
>1971	Argument	nx
>1972	Identifier	nx
>1973	Argument	* nodeIcon
>1974	UnaryOp	* nodeIcon
>1975	Identifier	nodeIcon
>1976	UnaryOperator	*
>1977	Callee	dc . DrawBitmap
>1978	MemberAccess	dc . DrawBitmap
>1979	Identifier	DrawBitmap
>1980	Identifier	dc
>1981	IfStatement	if ( bSelected )
>1982	CompoundStatement	 
>1983	ExpressionStatement	 
>1984	CallExpression	dc . DrawRectangle ( nx - SELWIDTH , ny - SELWIDTH , nodeIcon -> GetWidth ( ) + 2 * SELWIDTH , nodeIcon -> GetHeight ( ) + \
>1985	ArgumentList	nx - SELWIDTH
>1986	Argument	nodeIcon -> GetHeight ( ) + 2 * SELWIDTH
>1987	AdditiveExpression	nodeIcon -> GetHeight ( ) + 2 * SELWIDTH
>1988	MultiplicativeExpression	2 * SELWIDTH
>1989	Identifier	SELWIDTH
>1990	PrimaryExpression	2
>1991	CallExpression	nodeIcon -> GetHeight ( )
>1992	ArgumentList	 
>1993	Callee	nodeIcon -> GetHeight
>1994	PtrMemberAccess	nodeIcon -> GetHeight
>1995	Identifier	GetHeight
>1996	Identifier	nodeIcon
>1997	Argument	nodeIcon -> GetWidth ( ) + 2 * SELWIDTH
>1998	AdditiveExpression	nodeIcon -> GetWidth ( ) + 2 * SELWIDTH
>1999	MultiplicativeExpression	2 * SELWIDTH
>2000	Identifier	SELWIDTH
>2001	PrimaryExpression	2
>2002	CallExpression	nodeIcon -> GetWidth ( )
>2003	ArgumentList	 
>2004	Callee	nodeIcon -> GetWidth
>2005	PtrMemberAccess	nodeIcon -> GetWidth
>2006	Identifier	GetWidth
>2007	Identifier	nodeIcon
>2008	Argument	ny - SELWIDTH
>2009	AdditiveExpression	ny - SELWIDTH
>2010	Identifier	SELWIDTH
>2011	Identifier	ny
>2012	Argument	nx - SELWIDTH
>2013	AdditiveExpression	nx - SELWIDTH
>2014	Identifier	SELWIDTH
>2015	Identifier	nx
>2016	Callee	dc . DrawRectangle
>2017	MemberAccess	dc . DrawRectangle
>2018	Identifier	DrawRectangle
>2019	Identifier	dc
>2020	ExpressionStatement	 
>2021	CallExpression	dc . SetBrush ( selBrush )
>2022	ArgumentList	selBrush
>2023	Argument	selBrush
>2024	Identifier	selBrush
>2025	Callee	dc . SetBrush
>2026	MemberAccess	dc . SetBrush
>2027	Identifier	SetBrush
>2028	Identifier	dc
>2029	ExpressionStatement	 
>2030	CallExpression	dc . SetPen ( * wxTRANSPARENT_PEN )
>2031	ArgumentList	* wxTRANSPARENT_PEN
>2032	Argument	* wxTRANSPARENT_PEN
>2033	UnaryOp	* wxTRANSPARENT_PEN
>2034	Identifier	wxTRANSPARENT_PEN
>2035	UnaryOperator	*
>2036	Callee	dc . SetPen
>2037	MemberAccess	dc . SetPen
>2038	Identifier	SetPen
>2039	Identifier	dc
>2040	Condition	 
>2041	Identifier	bSelected
>2042	IdentifierDeclStatement	 
>2043	IdentifierDecl	* nodeIcon = gIconFactory . getIcon ( node -> type ( ) )
>2044	AssignmentExpr	* nodeIcon = gIconFactory . getIcon ( node -> type ( ) )
>2045	CallExpression	gIconFactory . getIcon ( node -> type ( ) )
>2046	ArgumentList	node -> type ( )
>2047	Argument	node -> type ( )
>2048	CallExpression	node -> type ( )
>2049	ArgumentList	 
>2050	Callee	node -> type
>2051	PtrMemberAccess	node -> type
>2052	Identifier	type
>2053	Identifier	node
>2054	Callee	gIconFactory . getIcon
>2055	MemberAccess	gIconFactory . getIcon
>2056	Identifier	getIcon
>2057	Identifier	gIconFactory
>2058	Identifier	nodeIcon
>2059	Identifier	nodeIcon
>2060	IdentifierDeclType	const wxBitmap *
>2061	IdentifierDeclStatement	 
>2062	IdentifierDecl	bSelected = ( _selectedNodes . find ( node ) != _selectedNodes . end ( ) ) && ( _mouseMode != MM_DRAGGING )
>2063	AssignmentExpr	bSelected = ( _selectedNodes . find ( node ) != _selectedNodes . end ( ) ) && ( _mouseMode != MM_DRAGGING )
>2064	AndExpression	( _selectedNodes . find ( node ) != _selectedNodes . end ( ) ) && ( _mouseMode != MM_DRAGGING )
>2065	EqualityExpression	_mouseMode != MM_DRAGGING
>2066	Identifier	MM_DRAGGING
>2067	Identifier	_mouseMode
>2068	EqualityExpression	_selectedNodes . find ( node ) != _selectedNodes . end ( )
>2069	CallExpression	_selectedNodes . end ( )
>2070	ArgumentList	 
>2071	Callee	_selectedNodes . end
>2072	MemberAccess	_selectedNodes . end
>2073	Identifier	end
>2074	Identifier	_selectedNodes
>2075	CallExpression	_selectedNodes . find ( node )
>2076	ArgumentList	node
>2077	Argument	node
>2078	Identifier	node
>2079	Callee	_selectedNodes . find
>2080	MemberAccess	_selectedNodes . find
>2081	Identifier	find
>2082	Identifier	_selectedNodes
>2083	Identifier	bSelected
>2084	Identifier	bSelected
>2085	IdentifierDeclType	bool
>2086	IdentifierDeclStatement	 
>2087	IdentifierDecl	ny = node -> getLocationY ( )
>2088	AssignmentExpr	ny = node -> getLocationY ( )
>2089	CallExpression	node -> getLocationY ( )
>2090	ArgumentList	 
>2091	Callee	node -> getLocationY
>2092	PtrMemberAccess	node -> getLocationY
>2093	Identifier	getLocationY
>2094	Identifier	node
>2095	Identifier	ny
>2096	Identifier	ny
>2097	IdentifierDeclType	int
>2098	IdentifierDeclStatement	 
>2099	IdentifierDecl	nx = node -> getLocationX ( )
>2100	AssignmentExpr	nx = node -> getLocationX ( )
>2101	CallExpression	node -> getLocationX ( )
>2102	ArgumentList	 
>2103	Callee	node -> getLocationX
>2104	PtrMemberAccess	node -> getLocationX
>2105	Identifier	getLocationX
>2106	Identifier	node
>2107	Identifier	nx
>2108	Identifier	nx
>2109	IdentifierDeclType	int
>2110	IdentifierDeclStatement	 
>2111	IdentifierDecl	* node = _graph -> getNode ( i )
>2112	AssignmentExpr	* node = _graph -> getNode ( i )
>2113	CallExpression	_graph -> getNode ( i )
>2114	ArgumentList	i
>2115	Argument	i
>2116	Identifier	i
>2117	Callee	_graph -> getNode
>2118	PtrMemberAccess	_graph -> getNode
>2119	Identifier	getNode
>2120	Identifier	_graph
>2121	Identifier	node
>2122	Identifier	node
>2123	IdentifierDeclType	drwnNode *
>2124	IncDecOp	 
>2125	IncDec	++
>2126	Identifier	i
>2127	Condition	 
>2128	RelationalExpression	i < _graph -> numNodes ( )
>2129	CallExpression	_graph -> numNodes ( )
>2130	ArgumentList	 
>2131	Callee	_graph -> numNodes
>2132	PtrMemberAccess	_graph -> numNodes
>2133	Identifier	numNodes
>2134	Identifier	_graph
>2135	Identifier	i
>2136	ForInit	 
>2137	IdentifierDeclStatement	int i = 0 ;
>2138	IdentifierDecl	i = 0
>2139	AssignmentExpr	i = 0
>2140	PrimaryExpression	0
>2141	Identifier	i
>2142	Identifier	i
>2143	IdentifierDeclType	int
>2144	IdentifierDeclStatement	 
>2145	IdentifierDecl	selBrush ( wxSystemSettings 
>2146	Expression	wxSystemSettings 
>2147	Identifier	wxSOLID
>2148	CallExpression	wxSystemSettings 
>2149	ArgumentList	wxSYS_COLOUR_HIGHLIGHT
>2150	Argument	wxSYS_COLOUR_HIGHLIGHT
>2151	Identifier	wxSYS_COLOUR_HIGHLIGHT
>2152	Callee	wxSystemSettings 
>2153	Identifier	wxSystemSettings 
>2154	Identifier	selBrush
>2155	IdentifierDeclType	wxBrush
>2156	ForStatement	for ( int i = 0 ; i < _graph -> numNodes ( ) ; i ++ )
>2157	CompoundStatement	 
>2158	ForStatement	for ( int j = 0 ; j < node -> numInputPorts ( ) ; j ++ )
>2159	CompoundStatement	 
>2160	ExpressionStatement	 
>2161	CallExpression	dc . DrawPolygon ( 3 , arrow )
>2162	ArgumentList	3
>2163	Argument	arrow
>2164	Identifier	arrow
>2165	Argument	3
>2166	PrimaryExpression	3
>2167	Callee	dc . DrawPolygon
>2168	MemberAccess	dc . DrawPolygon
>2169	Identifier	DrawPolygon
>2170	Identifier	dc
>2171	ExpressionStatement	 
>2172	CallExpression	dc . SetBrush ( * wxBLACK_BRUSH )
>2173	ArgumentList	* wxBLACK_BRUSH
>2174	Argument	* wxBLACK_BRUSH
>2175	UnaryOp	* wxBLACK_BRUSH
>2176	Identifier	wxBLACK_BRUSH
>2177	UnaryOperator	*
>2178	Callee	dc . SetBrush
>2179	MemberAccess	dc . SetBrush
>2180	Identifier	SetBrush
>2181	Identifier	dc
>2182	ExpressionStatement	 
>2183	CallExpression	dc . SetPen ( wxPen ( * wxBLACK , 1 ) )
>2184	ArgumentList	wxPen ( * wxBLACK , 1 )
>2185	Argument	wxPen ( * wxBLACK , 1 )
>2186	CallExpression	wxPen ( * wxBLACK , 1 )
>2187	ArgumentList	* wxBLACK
>2188	Argument	1
>2189	PrimaryExpression	1
>2190	Argument	* wxBLACK
>2191	UnaryOp	* wxBLACK
>2192	Identifier	wxBLACK
>2193	UnaryOperator	*
>2194	Callee	wxPen
>2195	Identifier	wxPen
>2196	Callee	dc . SetPen
>2197	MemberAccess	dc . SetPen
>2198	Identifier	SetPen
>2199	Identifier	dc
>2200	ExpressionStatement	 
>2201	AssignmentExpr	arrow [ 2 ] = wxPoint ( ( int ) ( tx - ddx - ARROWLEN * dx - ARROWWTH * dy ) , ( int ) ( ty - ddy - ARROWLEN * \
>2202	CallExpression	wxPoint ( ( int ) ( tx - ddx - ARROWLEN * dx - ARROWWTH * dy ) , ( int ) ( ty - ddy - ARROWLEN * dy + ARROWWTH * \
>2203	ArgumentList	( int ) ( tx - ddx - ARROWLEN * dx - ARROWWTH * dy )
>2204	Argument	( int ) ( ty - ddy - ARROWLEN * dy + ARROWWTH * dx )
>2205	CastExpression	( int ) ( ty - ddy - ARROWLEN * dy + ARROWWTH * dx )
>2206	AdditiveExpression	ty - ddy - ARROWLEN * dy + ARROWWTH * dx
>2207	AdditiveExpression	ddy - ARROWLEN * dy + ARROWWTH * dx
>2208	AdditiveExpression	ARROWLEN * dy + ARROWWTH * dx
>2209	MultiplicativeExpression	ARROWWTH * dx
>2210	Identifier	dx
>2211	Identifier	ARROWWTH
>2212	MultiplicativeExpression	ARROWLEN * dy
>2213	Identifier	dy
>2214	Identifier	ARROWLEN
>2215	Identifier	ddy
>2216	Identifier	ty
>2217	CastTarget	int
>2218	Argument	( int ) ( tx - ddx - ARROWLEN * dx - ARROWWTH * dy )
>2219	CastExpression	( int ) ( tx - ddx - ARROWLEN * dx - ARROWWTH * dy )
>2220	AdditiveExpression	tx - ddx - ARROWLEN * dx - ARROWWTH * dy
>2221	AdditiveExpression	ddx - ARROWLEN * dx - ARROWWTH * dy
>2222	AdditiveExpression	ARROWLEN * dx - ARROWWTH * dy
>2223	MultiplicativeExpression	ARROWWTH * dy
>2224	Identifier	dy
>2225	Identifier	ARROWWTH
>2226	MultiplicativeExpression	ARROWLEN * dx
>2227	Identifier	dx
>2228	Identifier	ARROWLEN
>2229	Identifier	ddx
>2230	Identifier	tx
>2231	CastTarget	int
>2232	Callee	wxPoint
>2233	Identifier	wxPoint
>2234	ArrayIndexing	arrow [ 2 ]
>2235	PrimaryExpression	2
>2236	Identifier	arrow
>2237	ExpressionStatement	 
>2238	AssignmentExpr	arrow [ 1 ] = wxPoint ( ( int ) ( tx - ddx - ARROWLEN * dx + ARROWWTH * dy ) , ( int ) ( ty - ddy - ARROWLEN * \
>2239	CallExpression	wxPoint ( ( int ) ( tx - ddx - ARROWLEN * dx + ARROWWTH * dy ) , ( int ) ( ty - ddy - ARROWLEN * dy - ARROWWTH * \
>2240	ArgumentList	( int ) ( tx - ddx - ARROWLEN * dx + ARROWWTH * dy )
>2241	Argument	( int ) ( ty - ddy - ARROWLEN * dy - ARROWWTH * dx )
>2242	CastExpression	( int ) ( ty - ddy - ARROWLEN * dy - ARROWWTH * dx )
>2243	AdditiveExpression	ty - ddy - ARROWLEN * dy - ARROWWTH * dx
>2244	AdditiveExpression	ddy - ARROWLEN * dy - ARROWWTH * dx
>2245	AdditiveExpression	ARROWLEN * dy - ARROWWTH * dx
>2246	MultiplicativeExpression	ARROWWTH * dx
>2247	Identifier	dx
>2248	Identifier	ARROWWTH
>2249	MultiplicativeExpression	ARROWLEN * dy
>2250	Identifier	dy
>2251	Identifier	ARROWLEN
>2252	Identifier	ddy
>2253	Identifier	ty
>2254	CastTarget	int
>2255	Argument	( int ) ( tx - ddx - ARROWLEN * dx + ARROWWTH * dy )
>2256	CastExpression	( int ) ( tx - ddx - ARROWLEN * dx + ARROWWTH * dy )
>2257	AdditiveExpression	tx - ddx - ARROWLEN * dx + ARROWWTH * dy
>2258	AdditiveExpression	ddx - ARROWLEN * dx + ARROWWTH * dy
>2259	AdditiveExpression	ARROWLEN * dx + ARROWWTH * dy
>2260	MultiplicativeExpression	ARROWWTH * dy
>2261	Identifier	dy
>2262	Identifier	ARROWWTH
>2263	MultiplicativeExpression	ARROWLEN * dx
>2264	Identifier	dx
>2265	Identifier	ARROWLEN
>2266	Identifier	ddx
>2267	Identifier	tx
>2268	CastTarget	int
>2269	Callee	wxPoint
>2270	Identifier	wxPoint
>2271	ArrayIndexing	arrow [ 1 ]
>2272	PrimaryExpression	1
>2273	Identifier	arrow
>2274	ExpressionStatement	 
>2275	AssignmentExpr	arrow [ 0 ] = wxPoint ( ( int ) ( tx - ddx ) , ( int ) ( ty - ddy ) )
>2276	CallExpression	wxPoint ( ( int ) ( tx - ddx ) , ( int ) ( ty - ddy ) )
>2277	ArgumentList	( int ) ( tx - ddx )
>2278	Argument	( int ) ( ty - ddy )
>2279	CastExpression	( int ) ( ty - ddy )
>2280	AdditiveExpression	ty - ddy
>2281	Identifier	ddy
>2282	Identifier	ty
>2283	CastTarget	int
>2284	Argument	( int ) ( tx - ddx )
>2285	CastExpression	( int ) ( tx - ddx )
>2286	AdditiveExpression	tx - ddx
>2287	Identifier	ddx
>2288	Identifier	tx
>2289	CastTarget	int
>2290	Callee	wxPoint
>2291	Identifier	wxPoint
>2292	ArrayIndexing	arrow [ 0 ]
>2293	PrimaryExpression	0
>2294	Identifier	arrow
>2295	IdentifierDeclStatement	 
>2296	IdentifierDecl	arrow [ 3 ]
>2297	PrimaryExpression	3
>2298	Identifier	arrow
>2299	IdentifierDeclType	wxPoint [ 3 ]
>2300	ExpressionStatement	 
>2301	CallExpression	dc . DrawLine ( ( int ) ( sx + ddx ) , ( int ) ( sy + ddy ) , ( int ) ( tx - ddx ) , ( int ) ( ty - ddy ) )
>2302	ArgumentList	( int ) ( sx + ddx )
>2303	Argument	( int ) ( ty - ddy )
>2304	CastExpression	( int ) ( ty - ddy )
>2305	AdditiveExpression	ty - ddy
>2306	Identifier	ddy
>2307	Identifier	ty
>2308	CastTarget	int
>2309	Argument	( int ) ( tx - ddx )
>2310	CastExpression	( int ) ( tx - ddx )
>2311	AdditiveExpression	tx - ddx
>2312	Identifier	ddx
>2313	Identifier	tx
>2314	CastTarget	int
>2315	Argument	( int ) ( sy + ddy )
>2316	CastExpression	( int ) ( sy + ddy )
>2317	AdditiveExpression	sy + ddy
>2318	Identifier	ddy
>2319	Identifier	sy
>2320	CastTarget	int
>2321	Argument	( int ) ( sx + ddx )
>2322	CastExpression	( int ) ( sx + ddx )
>2323	AdditiveExpression	sx + ddx
>2324	Identifier	ddx
>2325	Identifier	sx
>2326	CastTarget	int
>2327	Callee	dc . DrawLine
>2328	MemberAccess	dc . DrawLine
>2329	Identifier	DrawLine
>2330	Identifier	dc
>2331	ExpressionStatement	 
>2332	CallExpression	dc . SetPen ( wxPen ( * wxBLACK , 2 ) )
>2333	ArgumentList	wxPen ( * wxBLACK , 2 )
>2334	Argument	wxPen ( * wxBLACK , 2 )
>2335	CallExpression	wxPen ( * wxBLACK , 2 )
>2336	ArgumentList	* wxBLACK
>2337	Argument	2
>2338	PrimaryExpression	2
>2339	Argument	* wxBLACK
>2340	UnaryOp	* wxBLACK
>2341	Identifier	wxBLACK
>2342	UnaryOperator	*
>2343	Callee	wxPen
>2344	Identifier	wxPen
>2345	Callee	dc . SetPen
>2346	MemberAccess	dc . SetPen
>2347	Identifier	SetPen
>2348	Identifier	dc
>2349	IdentifierDeclStatement	 
>2350	IdentifierDecl	ddy = ( int ) ( nodeIcon -> GetHeight ( ) * dy * M_SQRT1_2 )
>2351	AssignmentExpr	ddy = ( int ) ( nodeIcon -> GetHeight ( ) * dy * M_SQRT1_2 )
>2352	CastExpression	( int ) ( nodeIcon -> GetHeight ( ) * dy * M_SQRT1_2 )
>2353	MultiplicativeExpression	nodeIcon -> GetHeight ( ) * dy * M_SQRT1_2
>2354	MultiplicativeExpression	dy * M_SQRT1_2
>2355	Identifier	M_SQRT1_2
>2356	Identifier	dy
>2357	CallExpression	nodeIcon -> GetHeight ( )
>2358	ArgumentList	 
>2359	Callee	nodeIcon -> GetHeight
>2360	PtrMemberAccess	nodeIcon -> GetHeight
>2361	Identifier	GetHeight
>2362	Identifier	nodeIcon
>2363	CastTarget	int
>2364	Identifier	ddy
>2365	Identifier	ddy
>2366	IdentifierDeclType	int
>2367	IdentifierDeclStatement	 
>2368	IdentifierDecl	ddx = ( int ) ( nodeIcon -> GetWidth ( ) * dx * M_SQRT1_2 )
>2369	AssignmentExpr	ddx = ( int ) ( nodeIcon -> GetWidth ( ) * dx * M_SQRT1_2 )
>2370	CastExpression	( int ) ( nodeIcon -> GetWidth ( ) * dx * M_SQRT1_2 )
>2371	MultiplicativeExpression	nodeIcon -> GetWidth ( ) * dx * M_SQRT1_2
>2372	MultiplicativeExpression	dx * M_SQRT1_2
>2373	Identifier	M_SQRT1_2
>2374	Identifier	dx
>2375	CallExpression	nodeIcon -> GetWidth ( )
>2376	ArgumentList	 
>2377	Callee	nodeIcon -> GetWidth
>2378	PtrMemberAccess	nodeIcon -> GetWidth
>2379	Identifier	GetWidth
>2380	Identifier	nodeIcon
>2381	CastTarget	int
>2382	Identifier	ddx
>2383	Identifier	ddx
>2384	IdentifierDeclType	int
>2385	ExpressionStatement	 
>2386	AssignmentExpr	dy /= len
>2387	Identifier	len
>2388	Identifier	dy
>2389	ExpressionStatement	 
>2390	AssignmentExpr	dx /= len
>2391	Identifier	len
>2392	Identifier	dx
>2393	IdentifierDeclStatement	 
>2394	IdentifierDecl	len = sqrt ( dx * dx + dy * dy )
>2395	AssignmentExpr	len = sqrt ( dx * dx + dy * dy )
>2396	CallExpression	sqrt ( dx * dx + dy * dy )
>2397	ArgumentList	dx * dx + dy * dy
>2398	Argument	dx * dx + dy * dy
>2399	AdditiveExpression	dx * dx + dy * dy
>2400	MultiplicativeExpression	dy * dy
>2401	Identifier	dy
>2402	Identifier	dy
>2403	MultiplicativeExpression	dx * dx
>2404	Identifier	dx
>2405	Identifier	dx
>2406	Callee	sqrt
>2407	Identifier	sqrt
>2408	Identifier	len
>2409	Identifier	len
>2410	IdentifierDeclType	double
>2411	IdentifierDeclStatement	 
>2412	IdentifierDecl	dy = ty - sy
>2413	AssignmentExpr	dy = ty - sy
>2414	AdditiveExpression	ty - sy
>2415	Identifier	sy
>2416	Identifier	ty
>2417	Identifier	dy
>2418	Identifier	dy
>2419	IdentifierDeclType	double
>2420	IdentifierDeclStatement	 
>2421	IdentifierDecl	dx = tx - sx
>2422	AssignmentExpr	dx = tx - sx
>2423	AdditiveExpression	tx - sx
>2424	Identifier	sx
>2425	Identifier	tx
>2426	Identifier	dx
>2427	Identifier	dx
>2428	IdentifierDeclType	double
>2429	IdentifierDeclStatement	 
>2430	IdentifierDecl	sy = dstNode -> getLocationY ( ) + nodeIcon -> GetHeight ( ) / 2
>2431	AssignmentExpr	sy = dstNode -> getLocationY ( ) + nodeIcon -> GetHeight ( ) / 2
>2432	AdditiveExpression	dstNode -> getLocationY ( ) + nodeIcon -> GetHeight ( ) / 2
>2433	MultiplicativeExpression	nodeIcon -> GetHeight ( ) / 2
>2434	PrimaryExpression	2
>2435	CallExpression	nodeIcon -> GetHeight ( )
>2436	ArgumentList	 
>2437	Callee	nodeIcon -> GetHeight
>2438	PtrMemberAccess	nodeIcon -> GetHeight
>2439	Identifier	GetHeight
>2440	Identifier	nodeIcon
>2441	CallExpression	dstNode -> getLocationY ( )
>2442	ArgumentList	 
>2443	Callee	dstNode -> getLocationY
>2444	PtrMemberAccess	dstNode -> getLocationY
>2445	Identifier	getLocationY
>2446	Identifier	dstNode
>2447	Identifier	sy
>2448	Identifier	sy
>2449	IdentifierDeclType	int
>2450	IdentifierDeclStatement	 
>2451	IdentifierDecl	sx = dstNode -> getLocationX ( ) + nodeIcon -> GetWidth ( ) / 2
>2452	AssignmentExpr	sx = dstNode -> getLocationX ( ) + nodeIcon -> GetWidth ( ) / 2
>2453	AdditiveExpression	dstNode -> getLocationX ( ) + nodeIcon -> GetWidth ( ) / 2
>2454	MultiplicativeExpression	nodeIcon -> GetWidth ( ) / 2
>2455	PrimaryExpression	2
>2456	CallExpression	nodeIcon -> GetWidth ( )
>2457	ArgumentList	 
>2458	Callee	nodeIcon -> GetWidth
>2459	PtrMemberAccess	nodeIcon -> GetWidth
>2460	Identifier	GetWidth
>2461	Identifier	nodeIcon
>2462	CallExpression	dstNode -> getLocationX ( )
>2463	ArgumentList	 
>2464	Callee	dstNode -> getLocationX
>2465	PtrMemberAccess	dstNode -> getLocationX
>2466	Identifier	getLocationX
>2467	Identifier	dstNode
>2468	Identifier	sx
>2469	Identifier	sx
>2470	IdentifierDeclType	int
>2471	IfStatement	if ( dstNode == NULL )
>2472	ContinueStatement	 
>2473	Condition	 
>2474	EqualityExpression	dstNode == NULL
>2475	Identifier	NULL
>2476	Identifier	dstNode
>2477	IdentifierDeclStatement	 
>2478	IdentifierDecl	* dstNode = port -> getSource ( ) -> getOwner ( )
>2479	AssignmentExpr	* dstNode = port -> getSource ( ) -> getOwner ( )
>2480	CallExpression	port -> getSource ( ) -> getOwner ( )
>2481	ArgumentList	 
>2482	Callee	port -> getSource ( ) -> getOwner
>2483	PtrMemberAccess	port -> getSource ( ) -> getOwner
>2484	Identifier	getOwner
>2485	CallExpression	port -> getSource ( )
>2486	ArgumentList	 
>2487	Callee	port -> getSource
>2488	PtrMemberAccess	port -> getSource
>2489	Identifier	getSource
>2490	Identifier	port
>2491	Identifier	dstNode
>2492	Identifier	dstNode
>2493	IdentifierDeclType	const drwnNode *
>2494	IfStatement	if ( port -> getSource ( ) == NULL )
>2495	ContinueStatement	 
>2496	Condition	 
>2497	EqualityExpression	port -> getSource ( ) == NULL
>2498	Identifier	NULL
>2499	CallExpression	port -> getSource ( )
>2500	ArgumentList	 
>2501	Callee	port -> getSource
>2502	PtrMemberAccess	port -> getSource
>2503	Identifier	getSource
>2504	Identifier	port
>2505	IdentifierDeclStatement	 
>2506	IdentifierDecl	* port = node -> getInputPort ( j )
>2507	AssignmentExpr	* port = node -> getInputPort ( j )
>2508	CallExpression	node -> getInputPort ( j )
>2509	ArgumentList	j
>2510	Argument	j
>2511	Identifier	j
>2512	Callee	node -> getInputPort
>2513	PtrMemberAccess	node -> getInputPort
>2514	Identifier	getInputPort
>2515	Identifier	node
>2516	Identifier	port
>2517	Identifier	port
>2518	IdentifierDeclType	const drwnInputPort *
>2519	IncDecOp	 
>2520	IncDec	++
>2521	Identifier	j
>2522	Condition	 
>2523	RelationalExpression	j < node -> numInputPorts ( )
>2524	CallExpression	node -> numInputPorts ( )
>2525	ArgumentList	 
>2526	Callee	node -> numInputPorts
>2527	PtrMemberAccess	node -> numInputPorts
>2528	Identifier	numInputPorts
>2529	Identifier	node
>2530	Identifier	j
>2531	ForInit	 
>2532	IdentifierDeclStatement	int j = 0 ;
>2533	IdentifierDecl	j = 0
>2534	AssignmentExpr	j = 0
>2535	PrimaryExpression	0
>2536	Identifier	j
>2537	Identifier	j
>2538	IdentifierDeclType	int
>2539	IdentifierDeclStatement	 
>2540	IdentifierDecl	ty = node -> getLocationY ( ) + nodeIcon -> GetHeight ( ) / 2
>2541	AssignmentExpr	ty = node -> getLocationY ( ) + nodeIcon -> GetHeight ( ) / 2
>2542	AdditiveExpression	node -> getLocationY ( ) + nodeIcon -> GetHeight ( ) / 2
>2543	MultiplicativeExpression	nodeIcon -> GetHeight ( ) / 2
>2544	PrimaryExpression	2
>2545	CallExpression	nodeIcon -> GetHeight ( )
>2546	ArgumentList	 
>2547	Callee	nodeIcon -> GetHeight
>2548	PtrMemberAccess	nodeIcon -> GetHeight
>2549	Identifier	GetHeight
>2550	Identifier	nodeIcon
>2551	CallExpression	node -> getLocationY ( )
>2552	ArgumentList	 
>2553	Callee	node -> getLocationY
>2554	PtrMemberAccess	node -> getLocationY
>2555	Identifier	getLocationY
>2556	Identifier	node
>2557	Identifier	ty
>2558	Identifier	ty
>2559	IdentifierDeclType	int
>2560	IdentifierDeclStatement	 
>2561	IdentifierDecl	tx = node -> getLocationX ( ) + nodeIcon -> GetWidth ( ) / 2
>2562	AssignmentExpr	tx = node -> getLocationX ( ) + nodeIcon -> GetWidth ( ) / 2
>2563	AdditiveExpression	node -> getLocationX ( ) + nodeIcon -> GetWidth ( ) / 2
>2564	MultiplicativeExpression	nodeIcon -> GetWidth ( ) / 2
>2565	PrimaryExpression	2
>2566	CallExpression	nodeIcon -> GetWidth ( )
>2567	ArgumentList	 
>2568	Callee	nodeIcon -> GetWidth
>2569	PtrMemberAccess	nodeIcon -> GetWidth
>2570	Identifier	GetWidth
>2571	Identifier	nodeIcon
>2572	CallExpression	node -> getLocationX ( )
>2573	ArgumentList	 
>2574	Callee	node -> getLocationX
>2575	PtrMemberAccess	node -> getLocationX
>2576	Identifier	getLocationX
>2577	Identifier	node
>2578	Identifier	tx
>2579	Identifier	tx
>2580	IdentifierDeclType	int
>2581	IdentifierDeclStatement	 
>2582	IdentifierDecl	* nodeIcon = gIconFactory . getIcon ( node -> type ( ) )
>2583	AssignmentExpr	* nodeIcon = gIconFactory . getIcon ( node -> type ( ) )
>2584	CallExpression	gIconFactory . getIcon ( node -> type ( ) )
>2585	ArgumentList	node -> type ( )
>2586	Argument	node -> type ( )
>2587	CallExpression	node -> type ( )
>2588	ArgumentList	 
>2589	Callee	node -> type
>2590	PtrMemberAccess	node -> type
>2591	Identifier	type
>2592	Identifier	node
>2593	Callee	gIconFactory . getIcon
>2594	MemberAccess	gIconFactory . getIcon
>2595	Identifier	getIcon
>2596	Identifier	gIconFactory
>2597	Identifier	nodeIcon
>2598	Identifier	nodeIcon
>2599	IdentifierDeclType	const wxBitmap *
>2600	IdentifierDeclStatement	 
>2601	IdentifierDecl	* node = _graph -> getNode ( i )
>2602	AssignmentExpr	* node = _graph -> getNode ( i )
>2603	CallExpression	_graph -> getNode ( i )
>2604	ArgumentList	i
>2605	Argument	i
>2606	Identifier	i
>2607	Callee	_graph -> getNode
>2608	PtrMemberAccess	_graph -> getNode
>2609	Identifier	getNode
>2610	Identifier	_graph
>2611	Identifier	node
>2612	Identifier	node
>2613	IdentifierDeclType	const drwnNode *
>2614	IncDecOp	 
>2615	IncDec	++
>2616	Identifier	i
>2617	Condition	 
>2618	RelationalExpression	i < _graph -> numNodes ( )
>2619	CallExpression	_graph -> numNodes ( )
>2620	ArgumentList	 
>2621	Callee	_graph -> numNodes
>2622	PtrMemberAccess	_graph -> numNodes
>2623	Identifier	numNodes
>2624	Identifier	_graph
>2625	Identifier	i
>2626	ForInit	 
>2627	IdentifierDeclStatement	int i = 0 ;
>2628	IdentifierDecl	i = 0
>2629	AssignmentExpr	i = 0
>2630	PrimaryExpression	0
>2631	Identifier	i
>2632	Identifier	i
>2633	IdentifierDeclType	int
>2634	ExpressionStatement	 
>2635	CallExpression	dc . DrawText ( _graph -> getTitle ( ) . c_str ( ) , ( int ) ( clientWidth - s . x ) / 2 , 0 )
>2636	ArgumentList	_graph -> getTitle ( ) . c_str ( )
>2637	Argument	0
>2638	PrimaryExpression	0
>2639	Argument	( int ) ( clientWidth - s . x ) / 2
>2640	MultiplicativeExpression	( int ) ( clientWidth - s . x ) / 2
>2641	PrimaryExpression	2
>2642	CastExpression	( int ) ( clientWidth - s . x )
>2643	AdditiveExpression	clientWidth - s . x
>2644	MemberAccess	s . x
>2645	Identifier	x
>2646	Identifier	s
>2647	Identifier	clientWidth
>2648	CastTarget	int
>2649	Argument	_graph -> getTitle ( ) . c_str ( )
>2650	CallExpression	_graph -> getTitle ( ) . c_str ( )
>2651	ArgumentList	 
>2652	Callee	_graph -> getTitle ( ) . c_str
>2653	MemberAccess	_graph -> getTitle ( ) . c_str
>2654	Identifier	c_str
>2655	CallExpression	_graph -> getTitle ( )
>2656	ArgumentList	 
>2657	Callee	_graph -> getTitle
>2658	PtrMemberAccess	_graph -> getTitle
>2659	Identifier	getTitle
>2660	Identifier	_graph
>2661	Callee	dc . DrawText
>2662	MemberAccess	dc . DrawText
>2663	Identifier	DrawText
>2664	Identifier	dc
>2665	IdentifierDeclStatement	 
>2666	IdentifierDecl	s = dc . GetTextExtent ( _graph -> getTitle ( ) . c_str ( ) )
>2667	AssignmentExpr	s = dc . GetTextExtent ( _graph -> getTitle ( ) . c_str ( ) )
>2668	CallExpression	dc . GetTextExtent ( _graph -> getTitle ( ) . c_str ( ) )
>2669	ArgumentList	_graph -> getTitle ( ) . c_str ( )
>2670	Argument	_graph -> getTitle ( ) . c_str ( )
>2671	CallExpression	_graph -> getTitle ( ) . c_str ( )
>2672	ArgumentList	 
>2673	Callee	_graph -> getTitle ( ) . c_str
>2674	MemberAccess	_graph -> getTitle ( ) . c_str
>2675	Identifier	c_str
>2676	CallExpression	_graph -> getTitle ( )
>2677	ArgumentList	 
>2678	Callee	_graph -> getTitle
>2679	PtrMemberAccess	_graph -> getTitle
>2680	Identifier	getTitle
>2681	Identifier	_graph
>2682	Callee	dc . GetTextExtent
>2683	MemberAccess	dc . GetTextExtent
>2684	Identifier	GetTextExtent
>2685	Identifier	dc
>2686	Identifier	s
>2687	Identifier	s
>2688	IdentifierDeclType	wxSize
>2689	ExpressionStatement	 
>2690	CallExpression	dc . SetTextForeground ( wxColor ( 0 , 0 , 255 ) )
>2691	ArgumentList	wxColor ( 0 , 0 , 255 )
>2692	Argument	wxColor ( 0 , 0 , 255 )
>2693	CallExpression	wxColor ( 0 , 0 , 255 )
>2694	ArgumentList	0
>2695	Argument	255
>2696	PrimaryExpression	255
>2697	Argument	0
>2698	PrimaryExpression	0
>2699	Argument	0
>2700	PrimaryExpression	0
>2701	Callee	wxColor
>2702	Identifier	wxColor
>2703	Callee	dc . SetTextForeground
>2704	MemberAccess	dc . SetTextForeground
>2705	Identifier	SetTextForeground
>2706	Identifier	dc
>2707	ExpressionStatement	 
>2708	CallExpression	DRWN_ASSERT ( _graph != NULL )
>2709	ArgumentList	_graph != NULL
>2710	Argument	_graph != NULL
>2711	EqualityExpression	_graph != NULL
>2712	Identifier	NULL
>2713	Identifier	_graph
>2714	Callee	DRWN_ASSERT
>2715	Identifier	DRWN_ASSERT
>2716	IfStatement	if ( _bSnapToGrid )
>2717	CompoundStatement	 
>2718	ForStatement	for ( int x = 16 ; x < width - 1 ; x += 32 )
>2719	CompoundStatement	 
>2720	ExpressionStatement	 
>2721	CallExpression	dc . DrawLine ( x , 0 , x , height )
>2722	ArgumentList	x
>2723	Argument	height
>2724	Identifier	height
>2725	Argument	x
>2726	Identifier	x
>2727	Argument	0
>2728	PrimaryExpression	0
>2729	Argument	x
>2730	Identifier	x
>2731	Callee	dc . DrawLine
>2732	MemberAccess	dc . DrawLine
>2733	Identifier	DrawLine
>2734	Identifier	dc
>2735	AssignmentExpr	 
>2736	PrimaryExpression	32
>2737	Identifier	x
>2738	Condition	 
>2739	RelationalExpression	x < width - 1
>2740	AdditiveExpression	width - 1
>2741	PrimaryExpression	1
>2742	Identifier	width
>2743	Identifier	x
>2744	ForInit	 
>2745	IdentifierDeclStatement	int x = 16 ;
>2746	IdentifierDecl	x = 16
>2747	AssignmentExpr	x = 16
>2748	PrimaryExpression	16
>2749	Identifier	x
>2750	Identifier	x
>2751	IdentifierDeclType	int
>2752	ForStatement	for ( int y = 16 ; y < height - 1 ; y += 32 )
>2753	CompoundStatement	 
>2754	ExpressionStatement	 
>2755	CallExpression	dc . DrawLine ( 0 , y , width , y )
>2756	ArgumentList	0
>2757	Argument	y
>2758	Identifier	y
>2759	Argument	width
>2760	Identifier	width
>2761	Argument	y
>2762	Identifier	y
>2763	Argument	0
>2764	PrimaryExpression	0
>2765	Callee	dc . DrawLine
>2766	MemberAccess	dc . DrawLine
>2767	Identifier	DrawLine
>2768	Identifier	dc
>2769	AssignmentExpr	 
>2770	PrimaryExpression	32
>2771	Identifier	y
>2772	Condition	 
>2773	RelationalExpression	y < height - 1
>2774	AdditiveExpression	height - 1
>2775	PrimaryExpression	1
>2776	Identifier	height
>2777	Identifier	y
>2778	ForInit	 
>2779	IdentifierDeclStatement	int y = 16 ;
>2780	IdentifierDecl	y = 16
>2781	AssignmentExpr	y = 16
>2782	PrimaryExpression	16
>2783	Identifier	y
>2784	Identifier	y
>2785	IdentifierDeclType	int
>2786	ExpressionStatement	 
>2787	CallExpression	dc . SetPen ( wxPen ( * wxLIGHT_GREY , 1 , wxSHORT_DASH ) )
>2788	ArgumentList	wxPen ( * wxLIGHT_GREY , 1 , wxSHORT_DASH )
>2789	Argument	wxPen ( * wxLIGHT_GREY , 1 , wxSHORT_DASH )
>2790	CallExpression	wxPen ( * wxLIGHT_GREY , 1 , wxSHORT_DASH )
>2791	ArgumentList	* wxLIGHT_GREY
>2792	Argument	wxSHORT_DASH
>2793	Identifier	wxSHORT_DASH
>2794	Argument	1
>2795	PrimaryExpression	1
>2796	Argument	* wxLIGHT_GREY
>2797	UnaryOp	* wxLIGHT_GREY
>2798	Identifier	wxLIGHT_GREY
>2799	UnaryOperator	*
>2800	Callee	wxPen
>2801	Identifier	wxPen
>2802	Callee	dc . SetPen
>2803	MemberAccess	dc . SetPen
>2804	Identifier	SetPen
>2805	Identifier	dc
>2806	Condition	 
>2807	Identifier	_bSnapToGrid
>2808	ExpressionStatement	 
>2809	CallExpression	dc . SetFont ( wxSystemSettings 
>2810	ArgumentList	wxSystemSettings 
>2811	Argument	wxSystemSettings 
>2812	CallExpression	wxSystemSettings 
>2813	ArgumentList	wxSYS_DEFAULT_GUI_FONT
>2814	Argument	wxSYS_DEFAULT_GUI_FONT
>2815	Identifier	wxSYS_DEFAULT_GUI_FONT
>2816	Callee	wxSystemSettings 
>2817	Identifier	wxSystemSettings 
>2818	Callee	dc . SetFont
>2819	MemberAccess	dc . SetFont
>2820	Identifier	SetFont
>2821	Identifier	dc
>2822	ExpressionStatement	 
>2823	CallExpression	dc . Clear ( )
>2824	ArgumentList	 
>2825	Callee	dc . Clear
>2826	MemberAccess	dc . Clear
>2827	Identifier	Clear
>2828	Identifier	dc
>2829	ExpressionStatement	 
>2830	CallExpression	DoPrepareDC ( dc )
>2831	ArgumentList	dc
>2832	Argument	dc
>2833	Identifier	dc
>2834	Callee	DoPrepareDC
>2835	Identifier	DoPrepareDC
>2836	IdentifierDeclStatement	 
>2837	IdentifierDecl	dc ( this )
>2838	Identifier	this
>2839	Identifier	dc
>2840	IdentifierDeclType	wxAutoBufferedPaintDC
>2841	ExpressionStatement	 
>2842	CallExpression	GetClientSize ( & clientWidth , & clientHeight )
>2843	ArgumentList	& clientWidth
>2844	Argument	& clientHeight
>2845	UnaryOp	& clientHeight
>2846	Identifier	clientHeight
>2847	UnaryOperator	&
>2848	Argument	& clientWidth
>2849	UnaryOp	& clientWidth
>2850	Identifier	clientWidth
>2851	UnaryOperator	&
>2852	Callee	GetClientSize
>2853	Identifier	GetClientSize
>2854	ExpressionStatement	 
>2855	CallExpression	GetViewStart ( & clientX , & clientY )
>2856	ArgumentList	& clientX
>2857	Argument	& clientY
>2858	UnaryOp	& clientY
>2859	Identifier	clientY
>2860	UnaryOperator	&
>2861	Argument	& clientX
>2862	UnaryOp	& clientX
>2863	Identifier	clientX
>2864	UnaryOperator	&
>2865	Callee	GetViewStart
>2866	Identifier	GetViewStart
>2867	IdentifierDeclStatement	 
>2868	IdentifierDecl	clientHeight
>2869	Identifier	clientHeight
>2870	IdentifierDeclType	int
>2871	IdentifierDecl	clientWidth
>2872	Identifier	clientWidth
>2873	IdentifierDeclType	int
>2874	IdentifierDecl	clientY
>2875	Identifier	clientY
>2876	IdentifierDeclType	int
>2877	IdentifierDecl	clientX
>2878	Identifier	clientX
>2879	IdentifierDeclType	int
>2880	ExpressionStatement	 
>2881	CallExpression	GetVirtualSize ( & width , & height )
>2882	ArgumentList	& width
>2883	Argument	& height
>2884	UnaryOp	& height
>2885	Identifier	height
>2886	UnaryOperator	&
>2887	Argument	& width
>2888	UnaryOp	& width
>2889	Identifier	width
>2890	UnaryOperator	&
>2891	Callee	GetVirtualSize
>2892	Identifier	GetVirtualSize
>2893	IdentifierDeclStatement	 
>2894	IdentifierDecl	height
>2895	Identifier	height
>2896	IdentifierDeclType	int
>2897	IdentifierDecl	width
>2898	Identifier	width
>2899	IdentifierDeclType	int
>2900	IdentifierDeclStatement	 
>2901	IdentifierDecl	ARROWWTH = 4
>2902	AssignmentExpr	ARROWWTH = 4
>2903	PrimaryExpression	4
>2904	Identifier	ARROWWTH
>2905	Identifier	ARROWWTH
>2906	IdentifierDeclType	const int
>2907	IdentifierDeclStatement	 
>2908	IdentifierDecl	ARROWLEN = 7
>2909	AssignmentExpr	ARROWLEN = 7
>2910	PrimaryExpression	7
>2911	Identifier	ARROWLEN
>2912	Identifier	ARROWLEN
>2913	IdentifierDeclType	const int
>2914	IdentifierDeclStatement	 
>2915	IdentifierDecl	SELWIDTH = 3
>2916	AssignmentExpr	SELWIDTH = 3
>2917	PrimaryExpression	3
>2918	Identifier	SELWIDTH
>2919	Identifier	SELWIDTH
>2920	IdentifierDeclType	const int
>3046	FunctionDef	MainCanvas 
>3047	ParameterList	wxSizeEvent & event
>3048	Parameter	 
>3049	Identifier	event
>3050	ParameterType	wxSizeEvent &
>3051	ReturnType	void
>3052	CompoundStatement	 
>3053	ExpressionStatement	 
>3054	CallExpression	this -> Update ( )
>3055	ArgumentList	 
>3056	Callee	this -> Update
>3057	PtrMemberAccess	this -> Update
>3058	Identifier	Update
>3059	Identifier	this
>3060	ExpressionStatement	 
>3061	CallExpression	this -> Refresh ( false )
>3062	ArgumentList	false
>3063	Argument	false
>3064	Identifier	false
>3065	Callee	this -> Refresh
>3066	PtrMemberAccess	this -> Refresh
>3067	Identifier	Refresh
>3068	Identifier	this
>3069	ExpressionStatement	 
>3070	CallExpression	GetClientSize ( & width , & height )
>3071	ArgumentList	& width
>3072	Argument	& height
>3073	UnaryOp	& height
>3074	Identifier	height
>3075	UnaryOperator	&
>3076	Argument	& width
>3077	UnaryOp	& width
>3078	Identifier	width
>3079	UnaryOperator	&
>3080	Callee	GetClientSize
>3081	Identifier	GetClientSize
>3082	IdentifierDeclStatement	 
>3083	IdentifierDecl	height
>3084	Identifier	height
>3085	IdentifierDeclType	int
>3086	IdentifierDecl	width
>3087	Identifier	width
>3088	IdentifierDeclType	int
>3099	FunctionDef	MainCanvas 
>3100	ParameterList	wxKeyEvent & event
>3101	Parameter	 
>3102	Identifier	event
>3103	ParameterType	wxKeyEvent &
>3104	ReturnType	void
>3105	CompoundStatement	 
>3106	ExpressionStatement	 
>3107	CallExpression	this -> Update ( )
>3108	ArgumentList	 
>3109	Callee	this -> Update
>3110	PtrMemberAccess	this -> Update
>3111	Identifier	Update
>3112	Identifier	this
>3113	ExpressionStatement	 
>3114	CallExpression	this -> Refresh ( false )
>3115	ArgumentList	false
>3116	Argument	false
>3117	Identifier	false
>3118	Callee	this -> Refresh
>3119	PtrMemberAccess	this -> Refresh
>3120	Identifier	Refresh
>3121	Identifier	this
>3122	ExpressionStatement	 
>3123	CallExpression	updateStatusBar ( )
>3124	ArgumentList	 
>3125	Callee	updateStatusBar
>3126	Identifier	updateStatusBar
>3127	SwitchStatement	switch ( event . m_keyCode )
>3128	CompoundStatement	 
>3129	ExpressionStatement	 
>3130	CallExpression	event . Skip ( )
>3131	ArgumentList	 
>3132	Callee	event . Skip
>3133	MemberAccess	event . Skip
>3134	Identifier	Skip
>3135	Identifier	event
>3136	Label	 
>3137	Identifier	default
>3138	CompoundStatement	 
>3139	BreakStatement	 
>3140	IfStatement	if ( _graph -> numNodes ( ) > 0 )
>3141	CompoundStatement	 
>3142	ExpressionStatement	 
>3143	CallExpression	_selectedNodes . insert ( _graph -> getNode ( indx ) )
>3144	ArgumentList	_graph -> getNode ( indx )
>3145	Argument	_graph -> getNode ( indx )
>3146	CallExpression	_graph -> getNode ( indx )
>3147	ArgumentList	indx
>3148	Argument	indx
>3149	Identifier	indx
>3150	Callee	_graph -> getNode
>3151	PtrMemberAccess	_graph -> getNode
>3152	Identifier	getNode
>3153	Identifier	_graph
>3154	Callee	_selectedNodes . insert
>3155	MemberAccess	_selectedNodes . insert
>3156	Identifier	insert
>3157	Identifier	_selectedNodes
>3158	ExpressionStatement	 
>3159	CallExpression	_selectedNodes . clear ( )
>3160	ArgumentList	 
>3161	Callee	_selectedNodes . clear
>3162	MemberAccess	_selectedNodes . clear
>3163	Identifier	clear
>3164	Identifier	_selectedNodes
>3165	IfStatement	if ( ! _selectedNodes . empty ( ) )
>3166	CompoundStatement	 
>3167	IfStatement	if ( event . m_shiftDown )
>3168	ElseStatement	else
>3169	CompoundStatement	 
>3170	ExpressionStatement	 
>3171	AssignmentExpr	indx = ( indx + 1 ) % _graph -> numNodes ( )
>3172	MultiplicativeExpression	( indx + 1 ) % _graph -> numNodes ( )
>3173	CallExpression	_graph -> numNodes ( )
>3174	ArgumentList	 
>3175	Callee	_graph -> numNodes
>3176	PtrMemberAccess	_graph -> numNodes
>3177	Identifier	numNodes
>3178	Identifier	_graph
>3179	AdditiveExpression	indx + 1
>3180	PrimaryExpression	1
>3181	Identifier	indx
>3182	Identifier	indx
>3183	CompoundStatement	 
>3184	ExpressionStatement	 
>3185	AssignmentExpr	indx = ( indx + _graph -> numNodes ( ) - 1 ) % _graph -> numNodes ( )
>3186	MultiplicativeExpression	( indx + _graph -> numNodes ( ) - 1 ) % _graph -> numNodes ( )
>3187	CallExpression	_graph -> numNodes ( )
>3188	ArgumentList	 
>3189	Callee	_graph -> numNodes
>3190	PtrMemberAccess	_graph -> numNodes
>3191	Identifier	numNodes
>3192	Identifier	_graph
>3193	AdditiveExpression	indx + _graph -> numNodes ( ) - 1
>3194	AdditiveExpression	_graph -> numNodes ( ) - 1
>3195	PrimaryExpression	1
>3196	CallExpression	_graph -> numNodes ( )
>3197	ArgumentList	 
>3198	Callee	_graph -> numNodes
>3199	PtrMemberAccess	_graph -> numNodes
>3200	Identifier	numNodes
>3201	Identifier	_graph
>3202	Identifier	indx
>3203	Identifier	indx
>3204	Condition	 
>3205	MemberAccess	event . m_shiftDown
>3206	Identifier	m_shiftDown
>3207	Identifier	event
>3208	WhileStatement	while ( _graph -> getNode ( indx ) != * _selectedNodes . begin ( ) )
>3209	CompoundStatement	 
>3210	ExpressionStatement	 
>3211	IncDecOp	indx ++
>3212	IncDec	++
>3213	Identifier	indx
>3214	Condition	 
>3215	EqualityExpression	_graph -> getNode ( indx ) != * _selectedNodes . begin ( )
>3216	UnaryOp	* _selectedNodes . begin ( )
>3217	CallExpression	_selectedNodes . begin ( )
>3218	ArgumentList	 
>3219	Callee	_selectedNodes . begin
>3220	MemberAccess	_selectedNodes . begin
>3221	Identifier	begin
>3222	Identifier	_selectedNodes
>3223	UnaryOperator	*
>3224	CallExpression	_graph -> getNode ( indx )
>3225	ArgumentList	indx
>3226	Argument	indx
>3227	Identifier	indx
>3228	Callee	_graph -> getNode
>3229	PtrMemberAccess	_graph -> getNode
>3230	Identifier	getNode
>3231	Identifier	_graph
>3232	Condition	 
>3233	UnaryOp	! _selectedNodes . empty ( )
>3234	CallExpression	_selectedNodes . empty ( )
>3235	ArgumentList	 
>3236	Callee	_selectedNodes . empty
>3237	MemberAccess	_selectedNodes . empty
>3238	Identifier	empty
>3239	Identifier	_selectedNodes
>3240	UnaryOperator	!
>3241	IdentifierDeclStatement	 
>3242	IdentifierDecl	indx = 0
>3243	AssignmentExpr	indx = 0
>3244	PrimaryExpression	0
>3245	Identifier	indx
>3246	Identifier	indx
>3247	IdentifierDeclType	int
>3248	Condition	 
>3249	RelationalExpression	_graph -> numNodes ( ) > 0
>3250	PrimaryExpression	0
>3251	CallExpression	_graph -> numNodes ( )
>3252	ArgumentList	 
>3253	Callee	_graph -> numNodes
>3254	PtrMemberAccess	_graph -> numNodes
>3255	Identifier	numNodes
>3256	Identifier	_graph
>3257	Label	 
>3258	Identifier	WXK_TAB
>3259	Condition	 
>3260	MemberAccess	event . m_keyCode
>3261	Identifier	m_keyCode
>3262	Identifier	event
>3282	FunctionDef	MainCanvas 
>3283	ParameterList	wxMouseEvent & event
>3284	Parameter	 
>3285	Identifier	event
>3286	ParameterType	wxMouseEvent &
>3287	ReturnType	void
>3288	CompoundStatement	 
>3289	ExpressionStatement	 
>3290	CallExpression	updateStatusBar ( )
>3291	ArgumentList	 
>3292	Callee	updateStatusBar
>3293	Identifier	updateStatusBar
>3294	ExpressionStatement	 
>3295	AssignmentExpr	_lastMousePoint = _mousePoint
>3296	Identifier	_mousePoint
>3297	Identifier	_lastMousePoint
>3298	IfStatement	if ( ( _mouseMode == MM_CONNECTING_INPUT ) || ( _mouseMode == MM_CONNECTING_OUTPUT ) )
>3299	CompoundStatement	 
>3300	ExpressionStatement	 
>3301	CallExpression	this -> Update ( )
>3302	ArgumentList	 
>3303	Callee	this -> Update
>3304	PtrMemberAccess	this -> Update
>3305	Identifier	Update
>3306	Identifier	this
>3307	ExpressionStatement	 
>3308	CallExpression	this -> Refresh ( false )
>3309	ArgumentList	false
>3310	Argument	false
>3311	Identifier	false
>3312	Callee	this -> Refresh
>3313	PtrMemberAccess	this -> Refresh
>3314	Identifier	Refresh
>3315	Identifier	this
>3316	Condition	 
>3317	OrExpression	( _mouseMode == MM_CONNECTING_INPUT ) || ( _mouseMode == MM_CONNECTING_OUTPUT )
>3318	EqualityExpression	_mouseMode == MM_CONNECTING_OUTPUT
>3319	Identifier	MM_CONNECTING_OUTPUT
>3320	Identifier	_mouseMode
>3321	EqualityExpression	_mouseMode == MM_CONNECTING_INPUT
>3322	Identifier	MM_CONNECTING_INPUT
>3323	Identifier	_mouseMode
>3324	IfStatement	if ( delta != 0 )
>3325	CompoundStatement	 
>3326	ExpressionStatement	 
>3327	CallExpression	this -> Scroll ( clientX , std 
>3328	ArgumentList	clientX
>3329	Argument	std 
>3330	CallExpression	std 
>3331	ArgumentList	0
>3332	Argument	clientY - delta
>3333	AdditiveExpression	clientY - delta
>3334	Identifier	delta
>3335	Identifier	clientY
>3336	Argument	0
>3337	PrimaryExpression	0
>3338	Callee	std 
>3339	Identifier	std 
>3340	Argument	clientX
>3341	Identifier	clientX
>3342	Callee	this -> Scroll
>3343	PtrMemberAccess	this -> Scroll
>3344	Identifier	Scroll
>3345	Identifier	this
>3346	ExpressionStatement	 
>3347	CallExpression	this -> GetViewStart ( & clientX , & clientY )
>3348	ArgumentList	& clientX
>3349	Argument	& clientY
>3350	UnaryOp	& clientY
>3351	Identifier	clientY
>3352	UnaryOperator	&
>3353	Argument	& clientX
>3354	UnaryOp	& clientX
>3355	Identifier	clientX
>3356	UnaryOperator	&
>3357	Callee	this -> GetViewStart
>3358	PtrMemberAccess	this -> GetViewStart
>3359	Identifier	GetViewStart
>3360	Identifier	this
>3361	IdentifierDeclStatement	 
>3362	IdentifierDecl	clientY
>3363	Identifier	clientY
>3364	IdentifierDeclType	int
>3365	IdentifierDecl	clientX
>3366	Identifier	clientX
>3367	IdentifierDeclType	int
>3368	Condition	 
>3369	EqualityExpression	delta != 0
>3370	PrimaryExpression	0
>3371	Identifier	delta
>3372	IdentifierDeclStatement	 
>3373	IdentifierDecl	delta = event . GetWheelRotation ( )
>3374	AssignmentExpr	delta = event . GetWheelRotation ( )
>3375	CallExpression	event . GetWheelRotation ( )
>3376	ArgumentList	 
>3377	Callee	event . GetWheelRotation
>3378	MemberAccess	event . GetWheelRotation
>3379	Identifier	GetWheelRotation
>3380	Identifier	event
>3381	Identifier	delta
>3382	Identifier	delta
>3383	IdentifierDeclType	int
>3384	IfStatement	if ( event . LeftDown ( ) )
>3385	ElseStatement	else
>3386	IfStatement	if ( event . LeftUp ( ) && ( _mouseMode == MM_NONE ) )
>3387	ElseStatement	else
>3388	IfStatement	if ( event . LeftUp ( ) )
>3389	ElseStatement	else
>3390	IfStatement	if ( ( event . Entering ( ) || event . Leaving ( ) ) && ( _mouseMode == MM_SELECTING ) )
>3391	ElseStatement	else
>3392	IfStatement	if ( event . Dragging ( ) )
>3393	ElseStatement	else
>3394	IfStatement	if ( event . RightDown ( ) )
>3395	ElseStatement	else
>3396	IfStatement	if ( event . LeftDClick ( ) )
>3397	ElseStatement	else
>3398	IfStatement	if ( event . Moving ( ) )
>3399	CompoundStatement	 
>3400	ExpressionStatement	 
>3401	AssignmentExpr	_activeNode = ( indx < 0 ) ? NULL 
>3402	ConditionalExpression	( indx < 0 ) ? NULL 
>3403	CallExpression	_graph -> getNode ( indx )
>3404	ArgumentList	indx
>3405	Argument	indx
>3406	Identifier	indx
>3407	Callee	_graph -> getNode
>3408	PtrMemberAccess	_graph -> getNode
>3409	Identifier	getNode
>3410	Identifier	_graph
>3411	Identifier	NULL
>3412	Condition	indx < 0
>3413	RelationalExpression	indx < 0
>3414	PrimaryExpression	0
>3415	Identifier	indx
>3416	Identifier	_activeNode
>3417	IdentifierDeclStatement	 
>3418	IdentifierDecl	indx = findNodeAtLocation ( _mousePoint . x , _mousePoint . y )
>3419	AssignmentExpr	indx = findNodeAtLocation ( _mousePoint . x , _mousePoint . y )
>3420	CallExpression	findNodeAtLocation ( _mousePoint . x , _mousePoint . y )
>3421	ArgumentList	_mousePoint . x
>3422	Argument	_mousePoint . y
>3423	MemberAccess	_mousePoint . y
>3424	Identifier	y
>3425	Identifier	_mousePoint
>3426	Argument	_mousePoint . x
>3427	MemberAccess	_mousePoint . x
>3428	Identifier	x
>3429	Identifier	_mousePoint
>3430	Callee	findNodeAtLocation
>3431	Identifier	findNodeAtLocation
>3432	Identifier	indx
>3433	Identifier	indx
>3434	IdentifierDeclType	int
>3435	Condition	 
>3436	CallExpression	event . Moving ( )
>3437	ArgumentList	 
>3438	Callee	event . Moving
>3439	MemberAccess	event . Moving
>3440	Identifier	Moving
>3441	Identifier	event
>3442	CompoundStatement	 
>3443	IfStatement	if ( _activeNode != NULL )
>3444	CompoundStatement	 
>3445	IfStatement	if ( dlg . ShowModal ( ) == wxID_OK )
>3446	CompoundStatement	 
>3447	ExpressionStatement	 
>3448	CallExpression	this -> Update ( )
>3449	ArgumentList	 
>3450	Callee	this -> Update
>3451	PtrMemberAccess	this -> Update
>3452	Identifier	Update
>3453	Identifier	this
>3454	ExpressionStatement	 
>3455	CallExpression	this -> Refresh ( false )
>3456	ArgumentList	false
>3457	Argument	false
>3458	Identifier	false
>3459	Callee	this -> Refresh
>3460	PtrMemberAccess	this -> Refresh
>3461	Identifier	Refresh
>3462	Identifier	this
>3463	Condition	 
>3464	EqualityExpression	dlg . ShowModal ( ) == wxID_OK
>3465	Identifier	wxID_OK
>3466	CallExpression	dlg . ShowModal ( )
>3467	ArgumentList	 
>3468	Callee	dlg . ShowModal
>3469	MemberAccess	dlg . ShowModal
>3470	Identifier	ShowModal
>3471	Identifier	dlg
>3472	IdentifierDeclStatement	 
>3473	IdentifierDecl	dlg ( this , _activeNode )
>3474	Expression	this , _activeNode
>3475	Identifier	_activeNode
>3476	Identifier	this
>3477	Identifier	dlg
>3478	IdentifierDeclType	drwnOptionsEditor
>3479	Condition	 
>3480	EqualityExpression	_activeNode != NULL
>3481	Identifier	NULL
>3482	Identifier	_activeNode
>3483	Condition	 
>3484	CallExpression	event . LeftDClick ( )
>3485	ArgumentList	 
>3486	Callee	event . LeftDClick
>3487	MemberAccess	event . LeftDClick
>3488	Identifier	LeftDClick
>3489	Identifier	event
>3490	CompoundStatement	 
>3491	IfStatement	if ( _activeNode == NULL )
>3492	ElseStatement	else
>3493	CompoundStatement	 
>3494	IfStatement	if ( ( _mouseMode == MM_CONNECTING_INPUT ) || ( _mouseMode == MM_CONNECTING_OUTPUT ) )
>3495	ElseStatement	else
>3496	CompoundStatement	 
>3497	ExpressionStatement	 
>3498	CallExpression	PopupMenu ( _nodePopupMenu )
>3499	ArgumentList	_nodePopupMenu
>3500	Argument	_nodePopupMenu
>3501	Identifier	_nodePopupMenu
>3502	Callee	PopupMenu
>3503	Identifier	PopupMenu
>3504	CompoundStatement	 
>3505	ExpressionStatement	 
>3506	CallExpression	PopupMenu ( _connectPopupMenu )
>3507	ArgumentList	_connectPopupMenu
>3508	Argument	_connectPopupMenu
>3509	Identifier	_connectPopupMenu
>3510	Callee	PopupMenu
>3511	Identifier	PopupMenu
>3512	Condition	 
>3513	OrExpression	( _mouseMode == MM_CONNECTING_INPUT ) || ( _mouseMode == MM_CONNECTING_OUTPUT )
>3514	EqualityExpression	_mouseMode == MM_CONNECTING_OUTPUT
>3515	Identifier	MM_CONNECTING_OUTPUT
>3516	Identifier	_mouseMode
>3517	EqualityExpression	_mouseMode == MM_CONNECTING_INPUT
>3518	Identifier	MM_CONNECTING_INPUT
>3519	Identifier	_mouseMode
>3520	ExpressionStatement	 
>3521	CallExpression	updatePortSubMenu ( _activeNode )
>3522	ArgumentList	_activeNode
>3523	Argument	_activeNode
>3524	Identifier	_activeNode
>3525	Callee	updatePortSubMenu
>3526	Identifier	updatePortSubMenu
>3527	CompoundStatement	 
>3528	ExpressionStatement	 
>3529	CallExpression	PopupMenu ( _newNodePopupMenu )
>3530	ArgumentList	_newNodePopupMenu
>3531	Argument	_newNodePopupMenu
>3532	Identifier	_newNodePopupMenu
>3533	Callee	PopupMenu
>3534	Identifier	PopupMenu
>3535	Condition	 
>3536	EqualityExpression	_activeNode == NULL
>3537	Identifier	NULL
>3538	Identifier	_activeNode
>3539	Condition	 
>3540	CallExpression	event . RightDown ( )
>3541	ArgumentList	 
>3542	Callee	event . RightDown
>3543	MemberAccess	event . RightDown
>3544	Identifier	RightDown
>3545	Identifier	event
>3546	CompoundStatement	 
>3547	IfStatement	if ( _activeNode == NULL )
>3548	ElseStatement	else
>3549	CompoundStatement	 
>3550	ExpressionStatement	 
>3551	CallExpression	this -> Update ( )
>3552	ArgumentList	 
>3553	Callee	this -> Update
>3554	PtrMemberAccess	this -> Update
>3555	Identifier	Update
>3556	Identifier	this
>3557	ExpressionStatement	 
>3558	CallExpression	this -> Refresh ( false )
>3559	ArgumentList	false
>3560	Argument	false
>3561	Identifier	false
>3562	Callee	this -> Refresh
>3563	PtrMemberAccess	this -> Refresh
>3564	Identifier	Refresh
>3565	Identifier	this
>3566	ExpressionStatement	 
>3567	AssignmentExpr	_mouseMode = MM_DRAGGING
>3568	Identifier	MM_DRAGGING
>3569	Identifier	_mouseMode
>3570	ForStatement	for ( set < drwnNode * > 
>3571	CompoundStatement	 
>3572	ExpressionStatement	 
>3573	CallExpression	( * it ) -> setLocation ( ( * it ) -> getLocationX ( ) + _mousePoint . x - _lastMousePoint . x , ( * it ) -> getLocationY ( ) + _\
>3574	ArgumentList	( * it ) -> getLocationX ( ) + _mousePoint . x - _lastMousePoint . x
>3575	Argument	( * it ) -> getLocationY ( ) + _mousePoint . y - _lastMousePoint . y
>3576	AdditiveExpression	( * it ) -> getLocationY ( ) + _mousePoint . y - _lastMousePoint . y
>3577	AdditiveExpression	_mousePoint . y - _lastMousePoint . y
>3578	MemberAccess	_lastMousePoint . y
>3579	Identifier	y
>3580	Identifier	_lastMousePoint
>3581	MemberAccess	_mousePoint . y
>3582	Identifier	y
>3583	Identifier	_mousePoint
>3584	CallExpression	( * it ) -> getLocationY ( )
>3585	ArgumentList	 
>3586	Callee	( * it ) -> getLocationY
>3587	PtrMemberAccess	( * it ) -> getLocationY
>3588	Identifier	getLocationY
>3589	UnaryOp	* it
>3590	Identifier	it
>3591	UnaryOperator	*
>3592	Argument	( * it ) -> getLocationX ( ) + _mousePoint . x - _lastMousePoint . x
>3593	AdditiveExpression	( * it ) -> getLocationX ( ) + _mousePoint . x - _lastMousePoint . x
>3594	AdditiveExpression	_mousePoint . x - _lastMousePoint . x
>3595	MemberAccess	_lastMousePoint . x
>3596	Identifier	x
>3597	Identifier	_lastMousePoint
>3598	MemberAccess	_mousePoint . x
>3599	Identifier	x
>3600	Identifier	_mousePoint
>3601	CallExpression	( * it ) -> getLocationX ( )
>3602	ArgumentList	 
>3603	Callee	( * it ) -> getLocationX
>3604	PtrMemberAccess	( * it ) -> getLocationX
>3605	Identifier	getLocationX
>3606	UnaryOp	* it
>3607	Identifier	it
>3608	UnaryOperator	*
>3609	Callee	( * it ) -> setLocation
>3610	PtrMemberAccess	( * it ) -> setLocation
>3611	Identifier	setLocation
>3612	UnaryOp	* it
>3613	Identifier	it
>3614	UnaryOperator	*
>3615	IncDecOp	 
>3616	IncDec	++
>3617	Identifier	it
>3618	Condition	 
>3619	EqualityExpression	it != _selectedNodes . end ( )
>3620	CallExpression	_selectedNodes . end ( )
>3621	ArgumentList	 
>3622	Callee	_selectedNodes . end
>3623	MemberAccess	_selectedNodes . end
>3624	Identifier	end
>3625	Identifier	_selectedNodes
>3626	Identifier	it
>3627	ForInit	 
>3628	IdentifierDeclStatement	set < drwnNode * > 
>3629	IdentifierDecl	it = _selectedNodes . begin ( )
>3630	AssignmentExpr	it = _selectedNodes . begin ( )
>3631	CallExpression	_selectedNodes . begin ( )
>3632	ArgumentList	 
>3633	Callee	_selectedNodes . begin
>3634	MemberAccess	_selectedNodes . begin
>3635	Identifier	begin
>3636	Identifier	_selectedNodes
>3637	Identifier	it
>3638	Identifier	it
>3639	IdentifierDeclType	set < drwnNode * > 
>3640	IfStatement	if ( _mouseMode != MM_DRAGGING )
>3641	CompoundStatement	 
>3642	IfStatement	if ( _selectedNodes . find ( _activeNode ) == _selectedNodes . end ( ) )
>3643	CompoundStatement	 
>3644	ExpressionStatement	 
>3645	CallExpression	_selectedNodes . insert ( _activeNode )
>3646	ArgumentList	_activeNode
>3647	Argument	_activeNode
>3648	Identifier	_activeNode
>3649	Callee	_selectedNodes . insert
>3650	MemberAccess	_selectedNodes . insert
>3651	Identifier	insert
>3652	Identifier	_selectedNodes
>3653	IfStatement	if ( ! event . ShiftDown ( ) )
>3654	CompoundStatement	 
>3655	ExpressionStatement	 
>3656	CallExpression	_selectedNodes . clear ( )
>3657	ArgumentList	 
>3658	Callee	_selectedNodes . clear
>3659	MemberAccess	_selectedNodes . clear
>3660	Identifier	clear
>3661	Identifier	_selectedNodes
>3662	Condition	 
>3663	UnaryOp	! event . ShiftDown ( )
>3664	CallExpression	event . ShiftDown ( )
>3665	ArgumentList	 
>3666	Callee	event . ShiftDown
>3667	MemberAccess	event . ShiftDown
>3668	Identifier	ShiftDown
>3669	Identifier	event
>3670	UnaryOperator	!
>3671	Condition	 
>3672	EqualityExpression	_selectedNodes . find ( _activeNode ) == _selectedNodes . end ( )
>3673	CallExpression	_selectedNodes . end ( )
>3674	ArgumentList	 
>3675	Callee	_selectedNodes . end
>3676	MemberAccess	_selectedNodes . end
>3677	Identifier	end
>3678	Identifier	_selectedNodes
>3679	CallExpression	_selectedNodes . find ( _activeNode )
>3680	ArgumentList	_activeNode
>3681	Argument	_activeNode
>3682	Identifier	_activeNode
>3683	Callee	_selectedNodes . find
>3684	MemberAccess	_selectedNodes . find
>3685	Identifier	find
>3686	Identifier	_selectedNodes
>3687	Condition	 
>3688	EqualityExpression	_mouseMode != MM_DRAGGING
>3689	Identifier	MM_DRAGGING
>3690	Identifier	_mouseMode
>3691	CompoundStatement	 
>3692	ExpressionStatement	 
>3693	AssignmentExpr	_mouseMode = MM_SELECTING
>3694	Identifier	MM_SELECTING
>3695	Identifier	_mouseMode
>3696	ExpressionStatement	 
>3697	CallExpression	dc . DrawRectangle ( _buttonDownPoint . x , _buttonDownPoint . y , _mousePoint . x - _buttonDownPoint . x , _mousePoint \
>3698	ArgumentList	_buttonDownPoint . x
>3699	Argument	_mousePoint . y - _buttonDownPoint . y
>3700	AdditiveExpression	_mousePoint . y - _buttonDownPoint . y
>3701	MemberAccess	_buttonDownPoint . y
>3702	Identifier	y
>3703	Identifier	_buttonDownPoint
>3704	MemberAccess	_mousePoint . y
>3705	Identifier	y
>3706	Identifier	_mousePoint
>3707	Argument	_mousePoint . x - _buttonDownPoint . x
>3708	AdditiveExpression	_mousePoint . x - _buttonDownPoint . x
>3709	MemberAccess	_buttonDownPoint . x
>3710	Identifier	x
>3711	Identifier	_buttonDownPoint
>3712	MemberAccess	_mousePoint . x
>3713	Identifier	x
>3714	Identifier	_mousePoint
>3715	Argument	_buttonDownPoint . y
>3716	MemberAccess	_buttonDownPoint . y
>3717	Identifier	y
>3718	Identifier	_buttonDownPoint
>3719	Argument	_buttonDownPoint . x
>3720	MemberAccess	_buttonDownPoint . x
>3721	Identifier	x
>3722	Identifier	_buttonDownPoint
>3723	Callee	dc . DrawRectangle
>3724	MemberAccess	dc . DrawRectangle
>3725	Identifier	DrawRectangle
>3726	Identifier	dc
>3727	IfStatement	if ( _mouseMode == MM_SELECTING )
>3728	CompoundStatement	 
>3729	ExpressionStatement	 
>3730	CallExpression	dc . DrawRectangle ( _buttonDownPoint . x , _buttonDownPoint . y , _lastMousePoint . x - _buttonDownPoint . x , _\
>3731	ArgumentList	_buttonDownPoint . x
>3732	Argument	_lastMousePoint . y - _buttonDownPoint . y
>3733	AdditiveExpression	_lastMousePoint . y - _buttonDownPoint . y
>3734	MemberAccess	_buttonDownPoint . y
>3735	Identifier	y
>3736	Identifier	_buttonDownPoint
>3737	MemberAccess	_lastMousePoint . y
>3738	Identifier	y
>3739	Identifier	_lastMousePoint
>3740	Argument	_lastMousePoint . x - _buttonDownPoint . x
>3741	AdditiveExpression	_lastMousePoint . x - _buttonDownPoint . x
>3742	MemberAccess	_buttonDownPoint . x
>3743	Identifier	x
>3744	Identifier	_buttonDownPoint
>3745	MemberAccess	_lastMousePoint . x
>3746	Identifier	x
>3747	Identifier	_lastMousePoint
>3748	Argument	_buttonDownPoint . y
>3749	MemberAccess	_buttonDownPoint . y
>3750	Identifier	y
>3751	Identifier	_buttonDownPoint
>3752	Argument	_buttonDownPoint . x
>3753	MemberAccess	_buttonDownPoint . x
>3754	Identifier	x
>3755	Identifier	_buttonDownPoint
>3756	Callee	dc . DrawRectangle
>3757	MemberAccess	dc . DrawRectangle
>3758	Identifier	DrawRectangle
>3759	Identifier	dc
>3760	Condition	 
>3761	EqualityExpression	_mouseMode == MM_SELECTING
>3762	Identifier	MM_SELECTING
>3763	Identifier	_mouseMode
>3764	ExpressionStatement	 
>3765	CallExpression	dc . SetLogicalFunction ( wxINVERT )
>3766	ArgumentList	wxINVERT
>3767	Argument	wxINVERT
>3768	Identifier	wxINVERT
>3769	Callee	dc . SetLogicalFunction
>3770	MemberAccess	dc . SetLogicalFunction
>3771	Identifier	SetLogicalFunction
>3772	Identifier	dc
>3773	ExpressionStatement	 
>3774	CallExpression	dc . SetBrush ( * wxTRANSPARENT_BRUSH )
>3775	ArgumentList	* wxTRANSPARENT_BRUSH
>3776	Argument	* wxTRANSPARENT_BRUSH
>3777	UnaryOp	* wxTRANSPARENT_BRUSH
>3778	Identifier	wxTRANSPARENT_BRUSH
>3779	UnaryOperator	*
>3780	Callee	dc . SetBrush
>3781	MemberAccess	dc . SetBrush
>3782	Identifier	SetBrush
>3783	Identifier	dc
>3784	ExpressionStatement	 
>3785	CallExpression	dc . SetPen ( * wxBLACK_PEN )
>3786	ArgumentList	* wxBLACK_PEN
>3787	Argument	* wxBLACK_PEN
>3788	UnaryOp	* wxBLACK_PEN
>3789	Identifier	wxBLACK_PEN
>3790	UnaryOperator	*
>3791	Callee	dc . SetPen
>3792	MemberAccess	dc . SetPen
>3793	Identifier	SetPen
>3794	Identifier	dc
>3795	ExpressionStatement	 
>3796	CallExpression	DoPrepareDC ( dc )
>3797	ArgumentList	dc
>3798	Argument	dc
>3799	Identifier	dc
>3800	Callee	DoPrepareDC
>3801	Identifier	DoPrepareDC
>3802	IdentifierDeclStatement	 
>3803	IdentifierDecl	dc ( this )
>3804	Identifier	this
>3805	Identifier	dc
>3806	IdentifierDeclType	wxClientDC
>3807	Condition	 
>3808	EqualityExpression	_activeNode == NULL
>3809	Identifier	NULL
>3810	Identifier	_activeNode
>3811	Condition	 
>3812	CallExpression	event . Dragging ( )
>3813	ArgumentList	 
>3814	Callee	event . Dragging
>3815	MemberAccess	event . Dragging
>3816	Identifier	Dragging
>3817	Identifier	event
>3818	CompoundStatement	 
>3819	ExpressionStatement	 
>3820	AssignmentExpr	_mouseMode = MM_SELECTING_NOERASE
>3821	Identifier	MM_SELECTING_NOERASE
>3822	Identifier	_mouseMode
>3823	ExpressionStatement	 
>3824	CallExpression	this -> Update ( )
>3825	ArgumentList	 
>3826	Callee	this -> Update
>3827	PtrMemberAccess	this -> Update
>3828	Identifier	Update
>3829	Identifier	this
>3830	ExpressionStatement	 
>3831	CallExpression	this -> Refresh ( false )
>3832	ArgumentList	false
>3833	Argument	false
>3834	Identifier	false
>3835	Callee	this -> Refresh
>3836	PtrMemberAccess	this -> Refresh
>3837	Identifier	Refresh
>3838	Identifier	this
>3839	Condition	 
>3840	AndExpression	( event . Entering ( ) || event . Leaving ( ) ) && ( _mouseMode == MM_SELECTING )
>3841	EqualityExpression	_mouseMode == MM_SELECTING
>3842	Identifier	MM_SELECTING
>3843	Identifier	_mouseMode
>3844	OrExpression	event . Entering ( ) || event . Leaving ( )
>3845	CallExpression	event . Leaving ( )
>3846	ArgumentList	 
>3847	Callee	event . Leaving
>3848	MemberAccess	event . Leaving
>3849	Identifier	Leaving
>3850	Identifier	event
>3851	CallExpression	event . Entering ( )
>3852	ArgumentList	 
>3853	Callee	event . Entering
>3854	MemberAccess	event . Entering
>3855	Identifier	Entering
>3856	Identifier	event
>3857	CompoundStatement	 
>3858	ExpressionStatement	 
>3859	CallExpression	this -> Update ( )
>3860	ArgumentList	 
>3861	Callee	this -> Update
>3862	PtrMemberAccess	this -> Update
>3863	Identifier	Update
>3864	Identifier	this
>3865	ExpressionStatement	 
>3866	CallExpression	this -> Refresh ( false )
>3867	ArgumentList	false
>3868	Argument	false
>3869	Identifier	false
>3870	Callee	this -> Refresh
>3871	PtrMemberAccess	this -> Refresh
>3872	Identifier	Refresh
>3873	Identifier	this
>3874	IfStatement	if ( ( _mouseMode == MM_SELECTING ) || ( _mouseMode == MM_SELECTING_NOERASE ) )
>3875	ElseStatement	else
>3876	IfStatement	if ( _mouseMode == MM_DRAGGING )
>3877	CompoundStatement	 
>3878	ExpressionStatement	 
>3879	AssignmentExpr	_mouseMode = MM_NONE
>3880	Identifier	MM_NONE
>3881	Identifier	_mouseMode
>3882	IfStatement	if ( _bSnapToGrid )
>3883	CompoundStatement	 
>3884	ForStatement	for ( set < drwnNode * > 
>3885	CompoundStatement	 
>3886	ExpressionStatement	 
>3887	CallExpression	( * it ) -> setLocation ( nx , ny )
>3888	ArgumentList	nx
>3889	Argument	ny
>3890	Identifier	ny
>3891	Argument	nx
>3892	Identifier	nx
>3893	Callee	( * it ) -> setLocation
>3894	PtrMemberAccess	( * it ) -> setLocation
>3895	Identifier	setLocation
>3896	UnaryOp	* it
>3897	Identifier	it
>3898	UnaryOperator	*
>3899	IdentifierDeclStatement	 
>3900	IdentifierDecl	ny = 32 * ( ( int ) ( ( * it ) -> getLocationY ( ) + 16 ) / 32 )
>3901	AssignmentExpr	ny = 32 * ( ( int ) ( ( * it ) -> getLocationY ( ) + 16 ) / 32 )
>3902	MultiplicativeExpression	32 * ( ( int ) ( ( * it ) -> getLocationY ( ) + 16 ) / 32 )
>3903	MultiplicativeExpression	( int ) ( ( * it ) -> getLocationY ( ) + 16 ) / 32
>3904	PrimaryExpression	32
>3905	CastExpression	( int ) ( ( * it ) -> getLocationY ( ) + 16 )
>3906	AdditiveExpression	( * it ) -> getLocationY ( ) + 16
>3907	PrimaryExpression	16
>3908	CallExpression	( * it ) -> getLocationY ( )
>3909	ArgumentList	 
>3910	Callee	( * it ) -> getLocationY
>3911	PtrMemberAccess	( * it ) -> getLocationY
>3912	Identifier	getLocationY
>3913	UnaryOp	* it
>3914	Identifier	it
>3915	UnaryOperator	*
>3916	CastTarget	int
>3917	PrimaryExpression	32
>3918	Identifier	ny
>3919	Identifier	ny
>3920	IdentifierDeclType	int
>3921	IdentifierDeclStatement	 
>3922	IdentifierDecl	nx = 32 * ( ( int ) ( ( * it ) -> getLocationX ( ) + 16 ) / 32 )
>3923	AssignmentExpr	nx = 32 * ( ( int ) ( ( * it ) -> getLocationX ( ) + 16 ) / 32 )
>3924	MultiplicativeExpression	32 * ( ( int ) ( ( * it ) -> getLocationX ( ) + 16 ) / 32 )
>3925	MultiplicativeExpression	( int ) ( ( * it ) -> getLocationX ( ) + 16 ) / 32
>3926	PrimaryExpression	32
>3927	CastExpression	( int ) ( ( * it ) -> getLocationX ( ) + 16 )
>3928	AdditiveExpression	( * it ) -> getLocationX ( ) + 16
>3929	PrimaryExpression	16
>3930	CallExpression	( * it ) -> getLocationX ( )
>3931	ArgumentList	 
>3932	Callee	( * it ) -> getLocationX
>3933	PtrMemberAccess	( * it ) -> getLocationX
>3934	Identifier	getLocationX
>3935	UnaryOp	* it
>3936	Identifier	it
>3937	UnaryOperator	*
>3938	CastTarget	int
>3939	PrimaryExpression	32
>3940	Identifier	nx
>3941	Identifier	nx
>3942	IdentifierDeclType	int
>3943	IncDecOp	 
>3944	IncDec	++
>3945	Identifier	it
>3946	Condition	 
>3947	EqualityExpression	it != _selectedNodes . end ( )
>3948	CallExpression	_selectedNodes . end ( )
>3949	ArgumentList	 
>3950	Callee	_selectedNodes . end
>3951	MemberAccess	_selectedNodes . end
>3952	Identifier	end
>3953	Identifier	_selectedNodes
>3954	Identifier	it
>3955	ForInit	 
>3956	IdentifierDeclStatement	set < drwnNode * > 
>3957	IdentifierDecl	it = _selectedNodes . begin ( )
>3958	AssignmentExpr	it = _selectedNodes . begin ( )
>3959	CallExpression	_selectedNodes . begin ( )
>3960	ArgumentList	 
>3961	Callee	_selectedNodes . begin
>3962	MemberAccess	_selectedNodes . begin
>3963	Identifier	begin
>3964	Identifier	_selectedNodes
>3965	Identifier	it
>3966	Identifier	it
>3967	IdentifierDeclType	set < drwnNode * > 
>3968	Condition	 
>3969	Identifier	_bSnapToGrid
>3970	Condition	 
>3971	EqualityExpression	_mouseMode == MM_DRAGGING
>3972	Identifier	MM_DRAGGING
>3973	Identifier	_mouseMode
>3974	CompoundStatement	 
>3975	ExpressionStatement	 
>3976	AssignmentExpr	_mouseMode = MM_NONE
>3977	Identifier	MM_NONE
>3978	Identifier	_mouseMode
>3979	ExpressionStatement	 
>3980	CallExpression	selectNodesInRegion ( _buttonDownPoint . x , _buttonDownPoint . y , _lastMousePoint . x - _buttonDownPoint . x , _\
>3981	ArgumentList	_buttonDownPoint . x
>3982	Argument	_lastMousePoint . y - _buttonDownPoint . y
>3983	AdditiveExpression	_lastMousePoint . y - _buttonDownPoint . y
>3984	MemberAccess	_buttonDownPoint . y
>3985	Identifier	y
>3986	Identifier	_buttonDownPoint
>3987	MemberAccess	_lastMousePoint . y
>3988	Identifier	y
>3989	Identifier	_lastMousePoint
>3990	Argument	_lastMousePoint . x - _buttonDownPoint . x
>3991	AdditiveExpression	_lastMousePoint . x - _buttonDownPoint . x
>3992	MemberAccess	_buttonDownPoint . x
>3993	Identifier	x
>3994	Identifier	_buttonDownPoint
>3995	MemberAccess	_lastMousePoint . x
>3996	Identifier	x
>3997	Identifier	_lastMousePoint
>3998	Argument	_buttonDownPoint . y
>3999	MemberAccess	_buttonDownPoint . y
>4000	Identifier	y
>4001	Identifier	_buttonDownPoint
>4002	Argument	_buttonDownPoint . x
>4003	MemberAccess	_buttonDownPoint . x
>4004	Identifier	x
>4005	Identifier	_buttonDownPoint
>4006	Callee	selectNodesInRegion
>4007	Identifier	selectNodesInRegion
>4008	IfStatement	if ( ! event . ShiftDown ( ) )
>4009	CompoundStatement	 
>4010	ExpressionStatement	 
>4011	CallExpression	_selectedNodes . clear ( )
>4012	ArgumentList	 
>4013	Callee	_selectedNodes . clear
>4014	MemberAccess	_selectedNodes . clear
>4015	Identifier	clear
>4016	Identifier	_selectedNodes
>4017	Condition	 
>4018	UnaryOp	! event . ShiftDown ( )
>4019	CallExpression	event . ShiftDown ( )
>4020	ArgumentList	 
>4021	Callee	event . ShiftDown
>4022	MemberAccess	event . ShiftDown
>4023	Identifier	ShiftDown
>4024	Identifier	event
>4025	UnaryOperator	!
>4026	Condition	 
>4027	OrExpression	( _mouseMode == MM_SELECTING ) || ( _mouseMode == MM_SELECTING_NOERASE )
>4028	EqualityExpression	_mouseMode == MM_SELECTING_NOERASE
>4029	Identifier	MM_SELECTING_NOERASE
>4030	Identifier	_mouseMode
>4031	EqualityExpression	_mouseMode == MM_SELECTING
>4032	Identifier	MM_SELECTING
>4033	Identifier	_mouseMode
>4034	Condition	 
>4035	CallExpression	event . LeftUp ( )
>4036	ArgumentList	 
>4037	Callee	event . LeftUp
>4038	MemberAccess	event . LeftUp
>4039	Identifier	LeftUp
>4040	Identifier	event
>4041	CompoundStatement	 
>4042	ExpressionStatement	 
>4043	CallExpression	this -> Update ( )
>4044	ArgumentList	 
>4045	Callee	this -> Update
>4046	PtrMemberAccess	this -> Update
>4047	Identifier	Update
>4048	Identifier	this
>4049	ExpressionStatement	 
>4050	CallExpression	this -> Refresh ( false )
>4051	ArgumentList	false
>4052	Argument	false
>4053	Identifier	false
>4054	Callee	this -> Refresh
>4055	PtrMemberAccess	this -> Refresh
>4056	Identifier	Refresh
>4057	Identifier	this
>4058	IfStatement	if ( _activeNode != NULL )
>4059	ElseStatement	else
>4060	IfStatement	if ( ! event . ShiftDown ( ) )
>4061	CompoundStatement	 
>4062	ExpressionStatement	 
>4063	CallExpression	_selectedNodes . clear ( )
>4064	ArgumentList	 
>4065	Callee	_selectedNodes . clear
>4066	MemberAccess	_selectedNodes . clear
>4067	Identifier	clear
>4068	Identifier	_selectedNodes
>4069	Condition	 
>4070	UnaryOp	! event . ShiftDown ( )
>4071	CallExpression	event . ShiftDown ( )
>4072	ArgumentList	 
>4073	Callee	event . ShiftDown
>4074	MemberAccess	event . ShiftDown
>4075	Identifier	ShiftDown
>4076	Identifier	event
>4077	UnaryOperator	!
>4078	CompoundStatement	 
>4079	IfStatement	if ( _selectedNodes . find ( _activeNode ) == _selectedNodes . end ( ) )
>4080	ElseStatement	else
>4081	CompoundStatement	 
>4082	IfStatement	if ( ! event . ShiftDown ( ) && ! event . ControlDown ( ) )
>4083	ElseStatement	else
>4084	CompoundStatement	 
>4085	ExpressionStatement	 
>4086	CallExpression	_selectedNodes . erase ( _activeNode )
>4087	ArgumentList	_activeNode
>4088	Argument	_activeNode
>4089	Identifier	_activeNode
>4090	Callee	_selectedNodes . erase
>4091	MemberAccess	_selectedNodes . erase
>4092	Identifier	erase
>4093	Identifier	_selectedNodes
>4094	CompoundStatement	 
>4095	IfStatement	if ( _selectedNodes . size ( ) > 1 )
>4096	ElseStatement	else
>4097	CompoundStatement	 
>4098	ExpressionStatement	 
>4099	CallExpression	_selectedNodes . clear ( )
>4100	ArgumentList	 
>4101	Callee	_selectedNodes . clear
>4102	MemberAccess	_selectedNodes . clear
>4103	Identifier	clear
>4104	Identifier	_selectedNodes
>4105	CompoundStatement	 
>4106	ExpressionStatement	 
>4107	CallExpression	_selectedNodes . insert ( _activeNode )
>4108	ArgumentList	_activeNode
>4109	Argument	_activeNode
>4110	Identifier	_activeNode
>4111	Callee	_selectedNodes . insert
>4112	MemberAccess	_selectedNodes . insert
>4113	Identifier	insert
>4114	Identifier	_selectedNodes
>4115	ExpressionStatement	 
>4116	CallExpression	_selectedNodes . clear ( )
>4117	ArgumentList	 
>4118	Callee	_selectedNodes . clear
>4119	MemberAccess	_selectedNodes . clear
>4120	Identifier	clear
>4121	Identifier	_selectedNodes
>4122	Condition	 
>4123	RelationalExpression	_selectedNodes . size ( ) > 1
>4124	PrimaryExpression	1
>4125	CallExpression	_selectedNodes . size ( )
>4126	ArgumentList	 
>4127	Callee	_selectedNodes . size
>4128	MemberAccess	_selectedNodes . size
>4129	Identifier	size
>4130	Identifier	_selectedNodes
>4131	Condition	 
>4132	AndExpression	! event . ShiftDown ( ) && ! event . ControlDown ( )
>4133	UnaryOp	! event . ControlDown ( )
>4134	CallExpression	event . ControlDown ( )
>4135	ArgumentList	 
>4136	Callee	event . ControlDown
>4137	MemberAccess	event . ControlDown
>4138	Identifier	ControlDown
>4139	Identifier	event
>4140	UnaryOperator	!
>4141	UnaryOp	! event . ShiftDown ( )
>4142	CallExpression	event . ShiftDown ( )
>4143	ArgumentList	 
>4144	Callee	event . ShiftDown
>4145	MemberAccess	event . ShiftDown
>4146	Identifier	ShiftDown
>4147	Identifier	event
>4148	UnaryOperator	!
>4149	CompoundStatement	 
>4150	ExpressionStatement	 
>4151	CallExpression	_selectedNodes . insert ( _activeNode )
>4152	ArgumentList	_activeNode
>4153	Argument	_activeNode
>4154	Identifier	_activeNode
>4155	Callee	_selectedNodes . insert
>4156	MemberAccess	_selectedNodes . insert
>4157	Identifier	insert
>4158	Identifier	_selectedNodes
>4159	IfStatement	if ( ! event . ShiftDown ( ) && ! event . ControlDown ( ) )
>4160	CompoundStatement	 
>4161	ExpressionStatement	 
>4162	CallExpression	_selectedNodes . clear ( )
>4163	ArgumentList	 
>4164	Callee	_selectedNodes . clear
>4165	MemberAccess	_selectedNodes . clear
>4166	Identifier	clear
>4167	Identifier	_selectedNodes
>4168	Condition	 
>4169	AndExpression	! event . ShiftDown ( ) && ! event . ControlDown ( )
>4170	UnaryOp	! event . ControlDown ( )
>4171	CallExpression	event . ControlDown ( )
>4172	ArgumentList	 
>4173	Callee	event . ControlDown
>4174	MemberAccess	event . ControlDown
>4175	Identifier	ControlDown
>4176	Identifier	event
>4177	UnaryOperator	!
>4178	UnaryOp	! event . ShiftDown ( )
>4179	CallExpression	event . ShiftDown ( )
>4180	ArgumentList	 
>4181	Callee	event . ShiftDown
>4182	MemberAccess	event . ShiftDown
>4183	Identifier	ShiftDown
>4184	Identifier	event
>4185	UnaryOperator	!
>4186	Condition	 
>4187	EqualityExpression	_selectedNodes . find ( _activeNode ) == _selectedNodes . end ( )
>4188	CallExpression	_selectedNodes . end ( )
>4189	ArgumentList	 
>4190	Callee	_selectedNodes . end
>4191	MemberAccess	_selectedNodes . end
>4192	Identifier	end
>4193	Identifier	_selectedNodes
>4194	CallExpression	_selectedNodes . find ( _activeNode )
>4195	ArgumentList	_activeNode
>4196	Argument	_activeNode
>4197	Identifier	_activeNode
>4198	Callee	_selectedNodes . find
>4199	MemberAccess	_selectedNodes . find
>4200	Identifier	find
>4201	Identifier	_selectedNodes
>4202	Condition	 
>4203	EqualityExpression	_activeNode != NULL
>4204	Identifier	NULL
>4205	Identifier	_activeNode
>4206	Condition	 
>4207	AndExpression	event . LeftUp ( ) && ( _mouseMode == MM_NONE )
>4208	EqualityExpression	_mouseMode == MM_NONE
>4209	Identifier	MM_NONE
>4210	Identifier	_mouseMode
>4211	CallExpression	event . LeftUp ( )
>4212	ArgumentList	 
>4213	Callee	event . LeftUp
>4214	MemberAccess	event . LeftUp
>4215	Identifier	LeftUp
>4216	Identifier	event
>4217	CompoundStatement	 
>4218	IfStatement	if ( ( _mouseMode == MM_CONNECTING_INPUT ) || ( _mouseMode == MM_CONNECTING_OUTPUT ) )
>4219	CompoundStatement	 
>4220	IfStatement	if ( ( _activeNode == NULL ) || ( _activeNode == _activePort -> getOwner ( ) ) )
>4221	ElseStatement	else
>4222	IfStatement	if ( _activeNode != NULL )
>4223	CompoundStatement	 
>4224	ExpressionStatement	 
>4225	CallExpression	PopupMenu ( _connectPopupMenu )
>4226	ArgumentList	_connectPopupMenu
>4227	Argument	_connectPopupMenu
>4228	Identifier	_connectPopupMenu
>4229	Callee	PopupMenu
>4230	Identifier	PopupMenu
>4231	ExpressionStatement	 
>4232	CallExpression	updatePortSubMenu ( _activeNode )
>4233	ArgumentList	_activeNode
>4234	Argument	_activeNode
>4235	Identifier	_activeNode
>4236	Callee	updatePortSubMenu
>4237	Identifier	updatePortSubMenu
>4238	Condition	 
>4239	EqualityExpression	_activeNode != NULL
>4240	Identifier	NULL
>4241	Identifier	_activeNode
>4242	CompoundStatement	 
>4243	ExpressionStatement	 
>4244	AssignmentExpr	_activePort = NULL
>4245	Identifier	NULL
>4246	Identifier	_activePort
>4247	ExpressionStatement	 
>4248	AssignmentExpr	_mouseMode = MM_NONE
>4249	Identifier	MM_NONE
>4250	Identifier	_mouseMode
>4251	IfStatement	if ( _mouseMode == MM_CONNECTING_INPUT )
>4252	ElseStatement	else
>4253	CompoundStatement	 
>4254	ExpressionStatement	 
>4255	CallExpression	( ( drwnOutputPort * ) _activePort ) -> disconnect ( )
>4256	ArgumentList	 
>4257	Callee	( ( drwnOutputPort * ) _activePort ) -> disconnect
>4258	PtrMemberAccess	( ( drwnOutputPort * ) _activePort ) -> disconnect
>4259	Identifier	disconnect
>4260	CastExpression	( drwnOutputPort * ) _activePort
>4261	Identifier	_activePort
>4262	CastTarget	drwnOutputPort *
>4263	CompoundStatement	 
>4264	ExpressionStatement	 
>4265	CallExpression	( ( drwnInputPort * ) _activePort ) -> disconnect ( )
>4266	ArgumentList	 
>4267	Callee	( ( drwnInputPort * ) _activePort ) -> disconnect
>4268	PtrMemberAccess	( ( drwnInputPort * ) _activePort ) -> disconnect
>4269	Identifier	disconnect
>4270	CastExpression	( drwnInputPort * ) _activePort
>4271	Identifier	_activePort
>4272	CastTarget	drwnInputPort *
>4273	Condition	 
>4274	EqualityExpression	_mouseMode == MM_CONNECTING_INPUT
>4275	Identifier	MM_CONNECTING_INPUT
>4276	Identifier	_mouseMode
>4277	Condition	 
>4278	OrExpression	( _activeNode == NULL ) || ( _activeNode == _activePort -> getOwner ( ) )
>4279	EqualityExpression	_activeNode == _activePort -> getOwner ( )
>4280	CallExpression	_activePort -> getOwner ( )
>4281	ArgumentList	 
>4282	Callee	_activePort -> getOwner
>4283	PtrMemberAccess	_activePort -> getOwner
>4284	Identifier	getOwner
>4285	Identifier	_activePort
>4286	Identifier	_activeNode
>4287	EqualityExpression	_activeNode == NULL
>4288	Identifier	NULL
>4289	Identifier	_activeNode
>4290	Condition	 
>4291	OrExpression	( _mouseMode == MM_CONNECTING_INPUT ) || ( _mouseMode == MM_CONNECTING_OUTPUT )
>4292	EqualityExpression	_mouseMode == MM_CONNECTING_OUTPUT
>4293	Identifier	MM_CONNECTING_OUTPUT
>4294	Identifier	_mouseMode
>4295	EqualityExpression	_mouseMode == MM_CONNECTING_INPUT
>4296	Identifier	MM_CONNECTING_INPUT
>4297	Identifier	_mouseMode
>4298	ExpressionStatement	 
>4299	CallExpression	CalcUnscrolledPosition ( event . m_x , event . m_y , & _buttonDownPoint . x , & _buttonDownPoint . y )
>4300	ArgumentList	event . m_x
>4301	Argument	& _buttonDownPoint . y
>4302	UnaryOp	& _buttonDownPoint . y
>4303	MemberAccess	_buttonDownPoint . y
>4304	Identifier	y
>4305	Identifier	_buttonDownPoint
>4306	UnaryOperator	&
>4307	Argument	& _buttonDownPoint . x
>4308	UnaryOp	& _buttonDownPoint . x
>4309	MemberAccess	_buttonDownPoint . x
>4310	Identifier	x
>4311	Identifier	_buttonDownPoint
>4312	UnaryOperator	&
>4313	Argument	event . m_y
>4314	MemberAccess	event . m_y
>4315	Identifier	m_y
>4316	Identifier	event
>4317	Argument	event . m_x
>4318	MemberAccess	event . m_x
>4319	Identifier	m_x
>4320	Identifier	event
>4321	Callee	CalcUnscrolledPosition
>4322	Identifier	CalcUnscrolledPosition
>4323	Condition	 
>4324	CallExpression	event . LeftDown ( )
>4325	ArgumentList	 
>4326	Callee	event . LeftDown
>4327	MemberAccess	event . LeftDown
>4328	Identifier	LeftDown
>4329	Identifier	event
>4330	ExpressionStatement	 
>4331	CallExpression	CalcUnscrolledPosition ( event . m_x , event . m_y , & _mousePoint . x , & _mousePoint . y )
>4332	ArgumentList	event . m_x
>4333	Argument	& _mousePoint . y
>4334	UnaryOp	& _mousePoint . y
>4335	MemberAccess	_mousePoint . y
>4336	Identifier	y
>4337	Identifier	_mousePoint
>4338	UnaryOperator	&
>4339	Argument	& _mousePoint . x
>4340	UnaryOp	& _mousePoint . x
>4341	MemberAccess	_mousePoint . x
>4342	Identifier	x
>4343	Identifier	_mousePoint
>4344	UnaryOperator	&
>4345	Argument	event . m_y
>4346	MemberAccess	event . m_y
>4347	Identifier	m_y
>4348	Identifier	event
>4349	Argument	event . m_x
>4350	MemberAccess	event . m_x
>4351	Identifier	m_x
>4352	Identifier	event
>4353	Callee	CalcUnscrolledPosition
>4354	Identifier	CalcUnscrolledPosition
>4437	FunctionDef	MainCanvas 
>4438	ParameterList	wxCommandEvent & event
>4439	Parameter	 
>4440	Identifier	event
>4441	ParameterType	wxCommandEvent &
>4442	ReturnType	void
>4443	CompoundStatement	 
>4444	ExpressionStatement	 
>4445	CallExpression	this -> Update ( )
>4446	ArgumentList	 
>4447	Callee	this -> Update
>4448	PtrMemberAccess	this -> Update
>4449	Identifier	Update
>4450	Identifier	this
>4451	ExpressionStatement	 
>4452	CallExpression	this -> Refresh ( false )
>4453	ArgumentList	false
>4454	Argument	false
>4455	Identifier	false
>4456	Callee	this -> Refresh
>4457	PtrMemberAccess	this -> Refresh
>4458	Identifier	Refresh
>4459	Identifier	this
>4460	IfStatement	if ( event . GetId ( ) == NODE_POPUP_SET_NAME )
>4461	ElseStatement	else
>4462	IfStatement	if ( event . GetId ( ) == NODE_POPUP_PROPERTIES )
>4463	ElseStatement	else
>4464	IfStatement	if ( event . GetId ( ) == NODE_POPUP_SHOWHIDE )
>4465	ElseStatement	else
>4466	IfStatement	if ( event . GetId ( ) == NODE_POPUP_EVALUATE )
>4467	ElseStatement	else
>4468	IfStatement	if ( event . GetId ( ) == NODE_POPUP_UPDATE )
>4469	ElseStatement	else
>4470	IfStatement	if ( event . GetId ( ) == NODE_POPUP_RESETPARAMS )
>4471	ElseStatement	else
>4472	IfStatement	if ( event . GetId ( ) == NODE_POPUP_INITPARAMS )
>4473	ElseStatement	else
>4474	IfStatement	if ( ( event . GetId ( ) >= NODE_POPUP_INPORT_BASE ) && ( event . GetId ( ) < NODE_POPUP_INPORT_BASE + 100 ) )
>4475	ElseStatement	else
>4476	IfStatement	if ( ( event . GetId ( ) >= NODE_POPUP_OUTPORT_BASE ) && ( event . GetId ( ) < NODE_POPUP_OUTPORT_BASE + 100 ) )
>4477	ElseStatement	else
>4478	IfStatement	if ( event . GetId ( ) == NODE_POPUP_DISCONNECT )
>4479	ElseStatement	else
>4480	IfStatement	if ( event . GetId ( ) == NODE_POPUP_DELETE )
>4481	ElseStatement	else
>4482	IfStatement	if ( event . GetId ( ) == POPUP_SET_TITLE )
>4483	ElseStatement	else
>4484	IfStatement	if ( event . GetId ( ) >= POPUP_NODE_INSERT_BASE )
>4485	CompoundStatement	 
>4486	ExpressionStatement	 
>4487	CallExpression	_graph -> addNode ( node )
>4488	ArgumentList	node
>4489	Argument	node
>4490	Identifier	node
>4491	Callee	_graph -> addNode
>4492	PtrMemberAccess	_graph -> addNode
>4493	Identifier	addNode
>4494	Identifier	_graph
>4495	IfStatement	if ( _bSnapToGrid )
>4496	ElseStatement	else
>4497	CompoundStatement	 
>4498	ExpressionStatement	 
>4499	CallExpression	node -> setLocation ( _mousePoint . x , _mousePoint . y )
>4500	ArgumentList	_mousePoint . x
>4501	Argument	_mousePoint . y
>4502	MemberAccess	_mousePoint . y
>4503	Identifier	y
>4504	Identifier	_mousePoint
>4505	Argument	_mousePoint . x
>4506	MemberAccess	_mousePoint . x
>4507	Identifier	x
>4508	Identifier	_mousePoint
>4509	Callee	node -> setLocation
>4510	PtrMemberAccess	node -> setLocation
>4511	Identifier	setLocation
>4512	Identifier	node
>4513	CompoundStatement	 
>4514	ExpressionStatement	 
>4515	CallExpression	node -> setLocation ( nx , ny )
>4516	ArgumentList	nx
>4517	Argument	ny
>4518	Identifier	ny
>4519	Argument	nx
>4520	Identifier	nx
>4521	Callee	node -> setLocation
>4522	PtrMemberAccess	node -> setLocation
>4523	Identifier	setLocation
>4524	Identifier	node
>4525	IdentifierDeclStatement	 
>4526	IdentifierDecl	ny = 32 * ( ( int ) ( _mousePoint . y + 16 ) / 32 )
>4527	AssignmentExpr	ny = 32 * ( ( int ) ( _mousePoint . y + 16 ) / 32 )
>4528	MultiplicativeExpression	32 * ( ( int ) ( _mousePoint . y + 16 ) / 32 )
>4529	MultiplicativeExpression	( int ) ( _mousePoint . y + 16 ) / 32
>4530	PrimaryExpression	32
>4531	CastExpression	( int ) ( _mousePoint . y + 16 )
>4532	AdditiveExpression	_mousePoint . y + 16
>4533	PrimaryExpression	16
>4534	MemberAccess	_mousePoint . y
>4535	Identifier	y
>4536	Identifier	_mousePoint
>4537	CastTarget	int
>4538	PrimaryExpression	32
>4539	Identifier	ny
>4540	Identifier	ny
>4541	IdentifierDeclType	int
>4542	IdentifierDeclStatement	 
>4543	IdentifierDecl	nx = 32 * ( ( int ) ( _mousePoint . x + 16 ) / 32 )
>4544	AssignmentExpr	nx = 32 * ( ( int ) ( _mousePoint . x + 16 ) / 32 )
>4545	MultiplicativeExpression	32 * ( ( int ) ( _mousePoint . x + 16 ) / 32 )
>4546	MultiplicativeExpression	( int ) ( _mousePoint . x + 16 ) / 32
>4547	PrimaryExpression	32
>4548	CastExpression	( int ) ( _mousePoint . x + 16 )
>4549	AdditiveExpression	_mousePoint . x + 16
>4550	PrimaryExpression	16
>4551	MemberAccess	_mousePoint . x
>4552	Identifier	x
>4553	Identifier	_mousePoint
>4554	CastTarget	int
>4555	PrimaryExpression	32
>4556	Identifier	nx
>4557	Identifier	nx
>4558	IdentifierDeclType	int
>4559	Condition	 
>4560	Identifier	_bSnapToGrid
>4561	ExpressionStatement	 
>4562	CallExpression	DRWN_ASSERT ( node != NULL )
>4563	ArgumentList	node != NULL
>4564	Argument	node != NULL
>4565	EqualityExpression	node != NULL
>4566	Identifier	NULL
>4567	Identifier	node
>4568	Callee	DRWN_ASSERT
>4569	Identifier	DRWN_ASSERT
>4570	ForStatement	for ( vector < string > 
>4571	CompoundStatement	 
>4572	IfStatement	if ( node != NULL )
>4573	BreakStatement	 
>4574	Condition	 
>4575	EqualityExpression	node != NULL
>4576	Identifier	NULL
>4577	Identifier	node
>4578	ForStatement	for ( vector < string > 
>4579	CompoundStatement	 
>4580	IfStatement	if ( -- indx < 0 )
>4581	CompoundStatement	 
>4582	BreakStatement	 
>4583	ExpressionStatement	 
>4584	AssignmentExpr	node = drwnNodeFactory 
>4585	CallExpression	drwnNodeFactory 
>4586	ArgumentList	it -> c_str ( )
>4587	Argument	it -> c_str ( )
>4588	CallExpression	it -> c_str ( )
>4589	ArgumentList	 
>4590	Callee	it -> c_str
>4591	PtrMemberAccess	it -> c_str
>4592	Identifier	c_str
>4593	Identifier	it
>4594	Callee	drwnNodeFactory 
>4595	MemberAccess	drwnNodeFactory 
>4596	Identifier	create
>4597	CallExpression	drwnNodeFactory 
>4598	ArgumentList	 
>4599	Callee	drwnNodeFactory 
>4600	Identifier	drwnNodeFactory 
>4601	Identifier	node
>4602	ExpressionStatement	 
>4603	CallExpression	DRWN_LOG_VERBOSE ( \"Creating new node of type \\"\" << it -> c_str ( ) << \"\\" from group \\"\" << ig -> c_str ( ) << \"\\"\" )
>4604	ArgumentList	\"Creating new node of type \\"\" << it -> c_str ( ) << \"\\" from group \\"\" << ig -> c_str ( ) << \"\\"\"
>4605	Argument	\"Creating new node of type \\"\" << it -> c_str ( ) << \"\\" from group \\"\" << ig -> c_str ( ) << \"\\"\"
>4606	ShiftExpression	\"Creating new node of type \\"\" << it -> c_str ( ) << \"\\" from group \\"\" << ig -> c_str ( ) << \"\\"\"
>4607	ShiftExpression	it -> c_str ( ) << \"\\" from group \\"\" << ig -> c_str ( ) << \"\\"\"
>4608	ShiftExpression	\"\\" from group \\"\" << ig -> c_str ( ) << \"\\"\"
>4609	ShiftExpression	ig -> c_str ( ) << \"\\"\"
>4610	PrimaryExpression	\"\\"\"
>4611	CallExpression	ig -> c_str ( )
>4612	ArgumentList	 
>4613	Callee	ig -> c_str
>4614	PtrMemberAccess	ig -> c_str
>4615	Identifier	c_str
>4616	Identifier	ig
>4617	PrimaryExpression	\"\\" from group \\"\"
>4618	CallExpression	it -> c_str ( )
>4619	ArgumentList	 
>4620	Callee	it -> c_str
>4621	PtrMemberAccess	it -> c_str
>4622	Identifier	c_str
>4623	Identifier	it
>4624	PrimaryExpression	\"Creating new node of type \\"\"
>4625	Callee	DRWN_LOG_VERBOSE
>4626	Identifier	DRWN_LOG_VERBOSE
>4627	Condition	 
>4628	RelationalExpression	-- indx < 0
>4629	PrimaryExpression	0
>4630	UnaryExpression	-- indx
>4631	Identifier	indx
>4632	IncDec	--
>4633	IncDecOp	 
>4634	IncDec	++
>4635	Identifier	it
>4636	Condition	 
>4637	EqualityExpression	it != nodeNames . end ( )
>4638	CallExpression	nodeNames . end ( )
>4639	ArgumentList	 
>4640	Callee	nodeNames . end
>4641	MemberAccess	nodeNames . end
>4642	Identifier	end
>4643	Identifier	nodeNames
>4644	Identifier	it
>4645	ForInit	 
>4646	IdentifierDeclStatement	vector < string > 
>4647	IdentifierDecl	it = nodeNames . begin ( )
>4648	AssignmentExpr	it = nodeNames . begin ( )
>4649	CallExpression	nodeNames . begin ( )
>4650	ArgumentList	 
>4651	Callee	nodeNames . begin
>4652	MemberAccess	nodeNames . begin
>4653	Identifier	begin
>4654	Identifier	nodeNames
>4655	Identifier	it
>4656	Identifier	it
>4657	IdentifierDeclType	vector < string > 
>4658	IdentifierDeclStatement	 
>4659	IdentifierDecl	nodeNames = drwnNodeFactory 
>4660	AssignmentExpr	nodeNames = drwnNodeFactory 
>4661	CallExpression	drwnNodeFactory 
>4662	ArgumentList	ig -> c_str ( )
>4663	Argument	ig -> c_str ( )
>4664	CallExpression	ig -> c_str ( )
>4665	ArgumentList	 
>4666	Callee	ig -> c_str
>4667	PtrMemberAccess	ig -> c_str
>4668	Identifier	c_str
>4669	Identifier	ig
>4670	Callee	drwnNodeFactory 
>4671	MemberAccess	drwnNodeFactory 
>4672	Identifier	getNodes
>4673	CallExpression	drwnNodeFactory 
>4674	ArgumentList	 
>4675	Callee	drwnNodeFactory 
>4676	Identifier	drwnNodeFactory 
>4677	Identifier	nodeNames
>4678	Identifier	nodeNames
>4679	IdentifierDeclType	vector < string >
>4680	IncDecOp	 
>4681	IncDec	++
>4682	Identifier	ig
>4683	Condition	 
>4684	EqualityExpression	ig != groupNames . end ( )
>4685	CallExpression	groupNames . end ( )
>4686	ArgumentList	 
>4687	Callee	groupNames . end
>4688	MemberAccess	groupNames . end
>4689	Identifier	end
>4690	Identifier	groupNames
>4691	Identifier	ig
>4692	ForInit	 
>4693	IdentifierDeclStatement	vector < string > 
>4694	IdentifierDecl	ig = groupNames . begin ( )
>4695	AssignmentExpr	ig = groupNames . begin ( )
>4696	CallExpression	groupNames . begin ( )
>4697	ArgumentList	 
>4698	Callee	groupNames . begin
>4699	MemberAccess	groupNames . begin
>4700	Identifier	begin
>4701	Identifier	groupNames
>4702	Identifier	ig
>4703	Identifier	ig
>4704	IdentifierDeclType	vector < string > 
>4705	IdentifierDeclStatement	 
>4706	IdentifierDecl	groupNames = drwnNodeFactory 
>4707	AssignmentExpr	groupNames = drwnNodeFactory 
>4708	CallExpression	drwnNodeFactory 
>4709	ArgumentList	 
>4710	Callee	drwnNodeFactory 
>4711	MemberAccess	drwnNodeFactory 
>4712	Identifier	getGroups
>4713	CallExpression	drwnNodeFactory 
>4714	ArgumentList	 
>4715	Callee	drwnNodeFactory 
>4716	Identifier	drwnNodeFactory 
>4717	Identifier	groupNames
>4718	Identifier	groupNames
>4719	IdentifierDeclType	vector < string >
>4720	IdentifierDeclStatement	 
>4721	IdentifierDecl	indx = event . GetId ( ) - POPUP_NODE_INSERT_BASE
>4722	AssignmentExpr	indx = event . GetId ( ) - POPUP_NODE_INSERT_BASE
>4723	AdditiveExpression	event . GetId ( ) - POPUP_NODE_INSERT_BASE
>4724	Identifier	POPUP_NODE_INSERT_BASE
>4725	CallExpression	event . GetId ( )
>4726	ArgumentList	 
>4727	Callee	event . GetId
>4728	MemberAccess	event . GetId
>4729	Identifier	GetId
>4730	Identifier	event
>4731	Identifier	indx
>4732	Identifier	indx
>4733	IdentifierDeclType	int
>4734	IdentifierDeclStatement	 
>4735	IdentifierDecl	* node = NULL
>4736	AssignmentExpr	* node = NULL
>4737	Identifier	NULL
>4738	Identifier	NULL
>4739	Identifier	node
>4740	IdentifierDeclType	drwnNode *
>4741	ExpressionStatement	 
>4742	CallExpression	DRWN_LOG_DEBUG ( \"node insert popup selected (id
>4743	ArgumentList	\"node insert popup selected (id
>4744	Argument	\"node insert popup selected (id
>4745	ShiftExpression	\"node insert popup selected (id
>4746	ShiftExpression	( event . GetId ( ) - POPUP_NODE_INSERT_BASE ) << \")\"
>4747	PrimaryExpression	\")\"
>4748	AdditiveExpression	event . GetId ( ) - POPUP_NODE_INSERT_BASE
>4749	Identifier	POPUP_NODE_INSERT_BASE
>4750	CallExpression	event . GetId ( )
>4751	ArgumentList	 
>4752	Callee	event . GetId
>4753	MemberAccess	event . GetId
>4754	Identifier	GetId
>4755	Identifier	event
>4756	PrimaryExpression	\"node insert popup selected (id
>4757	Callee	DRWN_LOG_DEBUG
>4758	Identifier	DRWN_LOG_DEBUG
>4759	Condition	 
>4760	RelationalExpression	event . GetId ( ) >= POPUP_NODE_INSERT_BASE
>4761	Identifier	POPUP_NODE_INSERT_BASE
>4762	CallExpression	event . GetId ( )
>4763	ArgumentList	 
>4764	Callee	event . GetId
>4765	MemberAccess	event . GetId
>4766	Identifier	GetId
>4767	Identifier	event
>4768	CompoundStatement	 
>4769	IfStatement	if ( dlg . ShowModal ( ) == wxID_OK )
>4770	CompoundStatement	 
>4771	ExpressionStatement	 
>4772	CallExpression	_graph -> setTitle ( dlg . GetValue ( ) . ToStdString ( ) )
>4773	ArgumentList	dlg . GetValue ( ) . ToStdString ( )
>4774	Argument	dlg . GetValue ( ) . ToStdString ( )
>4775	CallExpression	dlg . GetValue ( ) . ToStdString ( )
>4776	ArgumentList	 
>4777	Callee	dlg . GetValue ( ) . ToStdString
>4778	MemberAccess	dlg . GetValue ( ) . ToStdString
>4779	Identifier	ToStdString
>4780	CallExpression	dlg . GetValue ( )
>4781	ArgumentList	 
>4782	Callee	dlg . GetValue
>4783	MemberAccess	dlg . GetValue
>4784	Identifier	GetValue
>4785	Identifier	dlg
>4786	Callee	_graph -> setTitle
>4787	PtrMemberAccess	_graph -> setTitle
>4788	Identifier	setTitle
>4789	Identifier	_graph
>4790	Condition	 
>4791	EqualityExpression	dlg . ShowModal ( ) == wxID_OK
>4792	Identifier	wxID_OK
>4793	CallExpression	dlg . ShowModal ( )
>4794	ArgumentList	 
>4795	Callee	dlg . ShowModal
>4796	MemberAccess	dlg . ShowModal
>4797	Identifier	ShowModal
>4798	Identifier	dlg
>4799	IdentifierDeclStatement	 
>4800	IdentifierDecl	dlg ( this , \"Set title for the data flow network
>4801	Expression	this , \"Set title for the data flow network
>4802	Expression	\"Set title for the data flow network
>4803	Expression	\"Set Title\" , _graph -> getTitle ( )
>4804	CallExpression	_graph -> getTitle ( )
>4805	ArgumentList	 
>4806	Callee	_graph -> getTitle
>4807	PtrMemberAccess	_graph -> getTitle
>4808	Identifier	getTitle
>4809	Identifier	_graph
>4810	PrimaryExpression	\"Set Title\"
>4811	PrimaryExpression	\"Set title for the data flow network
>4812	Identifier	this
>4813	Identifier	dlg
>4814	IdentifierDeclType	wxTextEntryDialog
>4815	Condition	 
>4816	EqualityExpression	event . GetId ( ) == POPUP_SET_TITLE
>4817	Identifier	POPUP_SET_TITLE
>4818	CallExpression	event . GetId ( )
>4819	ArgumentList	 
>4820	Callee	event . GetId
>4821	MemberAccess	event . GetId
>4822	Identifier	GetId
>4823	Identifier	event
>4824	CompoundStatement	 
>4825	IfStatement	if ( dlg . ShowModal ( ) == wxID_YES )
>4826	CompoundStatement	 
>4827	IfStatement	if ( _selectedNodes . find ( a ) != _selectedNodes . end ( ) )
>4828	CompoundStatement	 
>4829	ExpressionStatement	 
>4830	CallExpression	_selectedNodes . erase ( a )
>4831	ArgumentList	a
>4832	Argument	a
>4833	Identifier	a
>4834	Callee	_selectedNodes . erase
>4835	MemberAccess	_selectedNodes . erase
>4836	Identifier	erase
>4837	Identifier	_selectedNodes
>4838	Condition	 
>4839	EqualityExpression	_selectedNodes . find ( a ) != _selectedNodes . end ( )
>4840	CallExpression	_selectedNodes . end ( )
>4841	ArgumentList	 
>4842	Callee	_selectedNodes . end
>4843	MemberAccess	_selectedNodes . end
>4844	Identifier	end
>4845	Identifier	_selectedNodes
>4846	CallExpression	_selectedNodes . find ( a )
>4847	ArgumentList	a
>4848	Argument	a
>4849	Identifier	a
>4850	Callee	_selectedNodes . find
>4851	MemberAccess	_selectedNodes . find
>4852	Identifier	find
>4853	Identifier	_selectedNodes
>4854	IfStatement	if ( _activeNode == a )
>4855	ExpressionStatement	 
>4856	AssignmentExpr	_activeNode = NULL
>4857	Identifier	NULL
>4858	Identifier	_activeNode
>4859	Condition	 
>4860	EqualityExpression	_activeNode == a
>4861	Identifier	a
>4862	Identifier	_activeNode
>4863	ExpressionStatement	 
>4864	CallExpression	_graph -> delNode ( a )
>4865	ArgumentList	a
>4866	Argument	a
>4867	Identifier	a
>4868	Callee	_graph -> delNode
>4869	PtrMemberAccess	_graph -> delNode
>4870	Identifier	delNode
>4871	Identifier	_graph
>4872	Condition	 
>4873	EqualityExpression	dlg . ShowModal ( ) == wxID_YES
>4874	Identifier	wxID_YES
>4875	CallExpression	dlg . ShowModal ( )
>4876	ArgumentList	 
>4877	Callee	dlg . ShowModal
>4878	MemberAccess	dlg . ShowModal
>4879	Identifier	ShowModal
>4880	Identifier	dlg
>4881	IdentifierDeclStatement	 
>4882	IdentifierDecl	dlg ( this , string ( \"Delete node \" ) + a -> getName ( ) + string ( \"?\" ) , \"Confirm\" , wxYES_NO | wxICON_QUESTION )
>4883	Expression	this , string ( \"Delete node \" ) + a -> getName ( ) + string ( \"?\" ) , \"Confirm\" , wxYES_NO | wxICON_QUESTION
>4884	Expression	string ( \"Delete node \" ) + a -> getName ( ) + string ( \"?\" ) , \"Confirm\" , wxYES_NO | wxICON_QUESTION
>4885	Expression	\"Confirm\" , wxYES_NO | wxICON_QUESTION
>4886	InclusiveOrExpression	wxYES_NO | wxICON_QUESTION
>4887	Identifier	wxICON_QUESTION
>4888	Identifier	wxYES_NO
>4889	PrimaryExpression	\"Confirm\"
>4890	AdditiveExpression	string ( \"Delete node \" ) + a -> getName ( ) + string ( \"?\" )
>4891	AdditiveExpression	a -> getName ( ) + string ( \"?\" )
>4892	CallExpression	string ( \"?\" )
>4893	ArgumentList	\"?\"
>4894	Argument	\"?\"
>4895	PrimaryExpression	\"?\"
>4896	Callee	string
>4897	Identifier	string
>4898	CallExpression	a -> getName ( )
>4899	ArgumentList	 
>4900	Callee	a -> getName
>4901	PtrMemberAccess	a -> getName
>4902	Identifier	getName
>4903	Identifier	a
>4904	CallExpression	string ( \"Delete node \" )
>4905	ArgumentList	\"Delete node \"
>4906	Argument	\"Delete node \"
>4907	PrimaryExpression	\"Delete node \"
>4908	Callee	string
>4909	Identifier	string
>4910	Identifier	this
>4911	Identifier	dlg
>4912	IdentifierDeclType	wxMessageDialog
>4913	IdentifierDeclStatement	 
>4914	IdentifierDecl	* a = _activeNode
>4915	AssignmentExpr	* a = _activeNode
>4916	Identifier	_activeNode
>4917	Identifier	_activeNode
>4918	Identifier	a
>4919	IdentifierDeclType	drwnNode *
>4920	ExpressionStatement	 
>4921	CallExpression	DRWN_ASSERT ( _activeNode != NULL )
>4922	ArgumentList	_activeNode != NULL
>4923	Argument	_activeNode != NULL
>4924	EqualityExpression	_activeNode != NULL
>4925	Identifier	NULL
>4926	Identifier	_activeNode
>4927	Callee	DRWN_ASSERT
>4928	Identifier	DRWN_ASSERT
>4929	Condition	 
>4930	EqualityExpression	event . GetId ( ) == NODE_POPUP_DELETE
>4931	Identifier	NODE_POPUP_DELETE
>4932	CallExpression	event . GetId ( )
>4933	ArgumentList	 
>4934	Callee	event . GetId
>4935	MemberAccess	event . GetId
>4936	Identifier	GetId
>4937	Identifier	event
>4938	CompoundStatement	 
>4939	ForStatement	for ( int i = 0 ; i < _activeNode -> numOutputPorts ( ) ; i ++ )
>4940	CompoundStatement	 
>4941	ExpressionStatement	 
>4942	CallExpression	_activeNode -> getOutputPort ( i ) -> disconnect ( )
>4943	ArgumentList	 
>4944	Callee	_activeNode -> getOutputPort ( i ) -> disconnect
>4945	PtrMemberAccess	_activeNode -> getOutputPort ( i ) -> disconnect
>4946	Identifier	disconnect
>4947	CallExpression	_activeNode -> getOutputPort ( i )
>4948	ArgumentList	i
>4949	Argument	i
>4950	Identifier	i
>4951	Callee	_activeNode -> getOutputPort
>4952	PtrMemberAccess	_activeNode -> getOutputPort
>4953	Identifier	getOutputPort
>4954	Identifier	_activeNode
>4955	IncDecOp	 
>4956	IncDec	++
>4957	Identifier	i
>4958	Condition	 
>4959	RelationalExpression	i < _activeNode -> numOutputPorts ( )
>4960	CallExpression	_activeNode -> numOutputPorts ( )
>4961	ArgumentList	 
>4962	Callee	_activeNode -> numOutputPorts
>4963	PtrMemberAccess	_activeNode -> numOutputPorts
>4964	Identifier	numOutputPorts
>4965	Identifier	_activeNode
>4966	Identifier	i
>4967	ForInit	 
>4968	IdentifierDeclStatement	int i = 0 ;
>4969	IdentifierDecl	i = 0
>4970	AssignmentExpr	i = 0
>4971	PrimaryExpression	0
>4972	Identifier	i
>4973	Identifier	i
>4974	IdentifierDeclType	int
>4975	ForStatement	for ( int i = 0 ; i < _activeNode -> numInputPorts ( ) ; i ++ )
>4976	CompoundStatement	 
>4977	ExpressionStatement	 
>4978	CallExpression	_activeNode -> getInputPort ( i ) -> disconnect ( )
>4979	ArgumentList	 
>4980	Callee	_activeNode -> getInputPort ( i ) -> disconnect
>4981	PtrMemberAccess	_activeNode -> getInputPort ( i ) -> disconnect
>4982	Identifier	disconnect
>4983	CallExpression	_activeNode -> getInputPort ( i )
>4984	ArgumentList	i
>4985	Argument	i
>4986	Identifier	i
>4987	Callee	_activeNode -> getInputPort
>4988	PtrMemberAccess	_activeNode -> getInputPort
>4989	Identifier	getInputPort
>4990	Identifier	_activeNode
>4991	IncDecOp	 
>4992	IncDec	++
>4993	Identifier	i
>4994	Condition	 
>4995	RelationalExpression	i < _activeNode -> numInputPorts ( )
>4996	CallExpression	_activeNode -> numInputPorts ( )
>4997	ArgumentList	 
>4998	Callee	_activeNode -> numInputPorts
>4999	PtrMemberAccess	_activeNode -> numInputPorts
>5000	Identifier	numInputPorts
>5001	Identifier	_activeNode
>5002	Identifier	i
>5003	ForInit	 
>5004	IdentifierDeclStatement	int i = 0 ;
>5005	IdentifierDecl	i = 0
>5006	AssignmentExpr	i = 0
>5007	PrimaryExpression	0
>5008	Identifier	i
>5009	Identifier	i
>5010	IdentifierDeclType	int
>5011	Condition	 
>5012	EqualityExpression	event . GetId ( ) == NODE_POPUP_DISCONNECT
>5013	Identifier	NODE_POPUP_DISCONNECT
>5014	CallExpression	event . GetId ( )
>5015	ArgumentList	 
>5016	Callee	event . GetId
>5017	MemberAccess	event . GetId
>5018	Identifier	GetId
>5019	Identifier	event
>5020	CompoundStatement	 
>5021	IfStatement	if ( _mouseMode == MM_CONNECTING_INPUT )
>5022	ElseStatement	else
>5023	CompoundStatement	 
>5024	ExpressionStatement	 
>5025	AssignmentExpr	_mouseMode = MM_CONNECTING_OUTPUT
>5026	Identifier	MM_CONNECTING_OUTPUT
>5027	Identifier	_mouseMode
>5028	ExpressionStatement	 
>5029	AssignmentExpr	_activePort = _activeNode -> getOutputPort ( portId )
>5030	CallExpression	_activeNode -> getOutputPort ( portId )
>5031	ArgumentList	portId
>5032	Argument	portId
>5033	Identifier	portId
>5034	Callee	_activeNode -> getOutputPort
>5035	PtrMemberAccess	_activeNode -> getOutputPort
>5036	Identifier	getOutputPort
>5037	Identifier	_activeNode
>5038	Identifier	_activePort
>5039	CompoundStatement	 
>5040	ExpressionStatement	 
>5041	AssignmentExpr	_mouseMode = MM_NONE
>5042	Identifier	MM_NONE
>5043	Identifier	_mouseMode
>5044	ExpressionStatement	 
>5045	AssignmentExpr	_activeNode = NULL
>5046	Identifier	NULL
>5047	Identifier	_activeNode
>5048	ExpressionStatement	 
>5049	CallExpression	_activeNode -> getOutputPort ( portId ) -> connect ( ( drwnInputPort * ) _activePort )
>5050	ArgumentList	( drwnInputPort * ) _activePort
>5051	Argument	( drwnInputPort * ) _activePort
>5052	CastExpression	( drwnInputPort * ) _activePort
>5053	Identifier	_activePort
>5054	CastTarget	drwnInputPort *
>5055	Callee	_activeNode -> getOutputPort ( portId ) -> connect
>5056	PtrMemberAccess	_activeNode -> getOutputPort ( portId ) -> connect
>5057	Identifier	connect
>5058	CallExpression	_activeNode -> getOutputPort ( portId )
>5059	ArgumentList	portId
>5060	Argument	portId
>5061	Identifier	portId
>5062	Callee	_activeNode -> getOutputPort
>5063	PtrMemberAccess	_activeNode -> getOutputPort
>5064	Identifier	getOutputPort
>5065	Identifier	_activeNode
>5066	ExpressionStatement	 
>5067	CallExpression	DRWN_ASSERT ( _activePort != NULL )
>5068	ArgumentList	_activePort != NULL
>5069	Argument	_activePort != NULL
>5070	EqualityExpression	_activePort != NULL
>5071	Identifier	NULL
>5072	Identifier	_activePort
>5073	Callee	DRWN_ASSERT
>5074	Identifier	DRWN_ASSERT
>5075	Condition	 
>5076	EqualityExpression	_mouseMode == MM_CONNECTING_INPUT
>5077	Identifier	MM_CONNECTING_INPUT
>5078	Identifier	_mouseMode
>5079	IdentifierDeclStatement	 
>5080	IdentifierDecl	portId = event . GetId ( ) - NODE_POPUP_OUTPORT_BASE
>5081	AssignmentExpr	portId = event . GetId ( ) - NODE_POPUP_OUTPORT_BASE
>5082	AdditiveExpression	event . GetId ( ) - NODE_POPUP_OUTPORT_BASE
>5083	Identifier	NODE_POPUP_OUTPORT_BASE
>5084	CallExpression	event . GetId ( )
>5085	ArgumentList	 
>5086	Callee	event . GetId
>5087	MemberAccess	event . GetId
>5088	Identifier	GetId
>5089	Identifier	event
>5090	Identifier	portId
>5091	Identifier	portId
>5092	IdentifierDeclType	int
>5093	Condition	 
>5094	AndExpression	( event . GetId ( ) >= NODE_POPUP_OUTPORT_BASE ) && ( event . GetId ( ) < NODE_POPUP_OUTPORT_BASE + \
>5095	RelationalExpression	event . GetId ( ) < NODE_POPUP_OUTPORT_BASE + 100
>5096	AdditiveExpression	NODE_POPUP_OUTPORT_BASE + 100
>5097	PrimaryExpression	100
>5098	Identifier	NODE_POPUP_OUTPORT_BASE
>5099	CallExpression	event . GetId ( )
>5100	ArgumentList	 
>5101	Callee	event . GetId
>5102	MemberAccess	event . GetId
>5103	Identifier	GetId
>5104	Identifier	event
>5105	RelationalExpression	event . GetId ( ) >= NODE_POPUP_OUTPORT_BASE
>5106	Identifier	NODE_POPUP_OUTPORT_BASE
>5107	CallExpression	event . GetId ( )
>5108	ArgumentList	 
>5109	Callee	event . GetId
>5110	MemberAccess	event . GetId
>5111	Identifier	GetId
>5112	Identifier	event
>5113	CompoundStatement	 
>5114	IfStatement	if ( _mouseMode == MM_CONNECTING_OUTPUT )
>5115	ElseStatement	else
>5116	CompoundStatement	 
>5117	ExpressionStatement	 
>5118	AssignmentExpr	_mouseMode = MM_CONNECTING_INPUT
>5119	Identifier	MM_CONNECTING_INPUT
>5120	Identifier	_mouseMode
>5121	ExpressionStatement	 
>5122	AssignmentExpr	_activePort = _activeNode -> getInputPort ( portId )
>5123	CallExpression	_activeNode -> getInputPort ( portId )
>5124	ArgumentList	portId
>5125	Argument	portId
>5126	Identifier	portId
>5127	Callee	_activeNode -> getInputPort
>5128	PtrMemberAccess	_activeNode -> getInputPort
>5129	Identifier	getInputPort
>5130	Identifier	_activeNode
>5131	Identifier	_activePort
>5132	CompoundStatement	 
>5133	ExpressionStatement	 
>5134	AssignmentExpr	_mouseMode = MM_NONE
>5135	Identifier	MM_NONE
>5136	Identifier	_mouseMode
>5137	ExpressionStatement	 
>5138	AssignmentExpr	_activeNode = NULL
>5139	Identifier	NULL
>5140	Identifier	_activeNode
>5141	ExpressionStatement	 
>5142	CallExpression	_activeNode -> getInputPort ( portId ) -> connect ( ( drwnOutputPort * ) _activePort )
>5143	ArgumentList	( drwnOutputPort * ) _activePort
>5144	Argument	( drwnOutputPort * ) _activePort
>5145	CastExpression	( drwnOutputPort * ) _activePort
>5146	Identifier	_activePort
>5147	CastTarget	drwnOutputPort *
>5148	Callee	_activeNode -> getInputPort ( portId ) -> connect
>5149	PtrMemberAccess	_activeNode -> getInputPort ( portId ) -> connect
>5150	Identifier	connect
>5151	CallExpression	_activeNode -> getInputPort ( portId )
>5152	ArgumentList	portId
>5153	Argument	portId
>5154	Identifier	portId
>5155	Callee	_activeNode -> getInputPort
>5156	PtrMemberAccess	_activeNode -> getInputPort
>5157	Identifier	getInputPort
>5158	Identifier	_activeNode
>5159	ExpressionStatement	 
>5160	CallExpression	DRWN_ASSERT ( _activePort != NULL )
>5161	ArgumentList	_activePort != NULL
>5162	Argument	_activePort != NULL
>5163	EqualityExpression	_activePort != NULL
>5164	Identifier	NULL
>5165	Identifier	_activePort
>5166	Callee	DRWN_ASSERT
>5167	Identifier	DRWN_ASSERT
>5168	Condition	 
>5169	EqualityExpression	_mouseMode == MM_CONNECTING_OUTPUT
>5170	Identifier	MM_CONNECTING_OUTPUT
>5171	Identifier	_mouseMode
>5172	IdentifierDeclStatement	 
>5173	IdentifierDecl	portId = event . GetId ( ) - NODE_POPUP_INPORT_BASE
>5174	AssignmentExpr	portId = event . GetId ( ) - NODE_POPUP_INPORT_BASE
>5175	AdditiveExpression	event . GetId ( ) - NODE_POPUP_INPORT_BASE
>5176	Identifier	NODE_POPUP_INPORT_BASE
>5177	CallExpression	event . GetId ( )
>5178	ArgumentList	 
>5179	Callee	event . GetId
>5180	MemberAccess	event . GetId
>5181	Identifier	GetId
>5182	Identifier	event
>5183	Identifier	portId
>5184	Identifier	portId
>5185	IdentifierDeclType	int
>5186	Condition	 
>5187	AndExpression	( event . GetId ( ) >= NODE_POPUP_INPORT_BASE ) && ( event . GetId ( ) < NODE_POPUP_INPORT_BASE + 100 )
>5188	RelationalExpression	event . GetId ( ) < NODE_POPUP_INPORT_BASE + 100
>5189	AdditiveExpression	NODE_POPUP_INPORT_BASE + 100
>5190	PrimaryExpression	100
>5191	Identifier	NODE_POPUP_INPORT_BASE
>5192	CallExpression	event . GetId ( )
>5193	ArgumentList	 
>5194	Callee	event . GetId
>5195	MemberAccess	event . GetId
>5196	Identifier	GetId
>5197	Identifier	event
>5198	RelationalExpression	event . GetId ( ) >= NODE_POPUP_INPORT_BASE
>5199	Identifier	NODE_POPUP_INPORT_BASE
>5200	CallExpression	event . GetId ( )
>5201	ArgumentList	 
>5202	Callee	event . GetId
>5203	MemberAccess	event . GetId
>5204	Identifier	GetId
>5205	Identifier	event
>5206	CompoundStatement	 
>5207	ExpressionStatement	 
>5208	CallExpression	drwnLogger 
>5209	ArgumentList	false
>5210	Argument	false
>5211	Identifier	false
>5212	Callee	drwnLogger 
>5213	Identifier	drwnLogger 
>5214	ExpressionStatement	 
>5215	CallExpression	_activeNode -> initializeParameters ( )
>5216	ArgumentList	 
>5217	Callee	_activeNode -> initializeParameters
>5218	PtrMemberAccess	_activeNode -> initializeParameters
>5219	Identifier	initializeParameters
>5220	Identifier	_activeNode
>5221	ExpressionStatement	 
>5222	CallExpression	drwnLogger 
>5223	ArgumentList	true
>5224	Argument	true
>5225	Identifier	true
>5226	Callee	drwnLogger 
>5227	Identifier	drwnLogger 
>5228	Condition	 
>5229	EqualityExpression	event . GetId ( ) == NODE_POPUP_INITPARAMS
>5230	Identifier	NODE_POPUP_INITPARAMS
>5231	CallExpression	event . GetId ( )
>5232	ArgumentList	 
>5233	Callee	event . GetId
>5234	MemberAccess	event . GetId
>5235	Identifier	GetId
>5236	Identifier	event
>5237	CompoundStatement	 
>5238	ExpressionStatement	 
>5239	CallExpression	_activeNode -> resetParameters ( )
>5240	ArgumentList	 
>5241	Callee	_activeNode -> resetParameters
>5242	PtrMemberAccess	_activeNode -> resetParameters
>5243	Identifier	resetParameters
>5244	Identifier	_activeNode
>5245	Condition	 
>5246	EqualityExpression	event . GetId ( ) == NODE_POPUP_RESETPARAMS
>5247	Identifier	NODE_POPUP_RESETPARAMS
>5248	CallExpression	event . GetId ( )
>5249	ArgumentList	 
>5250	Callee	event . GetId
>5251	MemberAccess	event . GetId
>5252	Identifier	GetId
>5253	Identifier	event
>5254	CompoundStatement	 
>5255	ExpressionStatement	 
>5256	CallExpression	drwnLogger 
>5257	ArgumentList	false
>5258	Argument	false
>5259	Identifier	false
>5260	Callee	drwnLogger 
>5261	Identifier	drwnLogger 
>5262	ExpressionStatement	 
>5263	CallExpression	_activeNode -> finalizeForwards ( )
>5264	ArgumentList	 
>5265	Callee	_activeNode -> finalizeForwards
>5266	PtrMemberAccess	_activeNode -> finalizeForwards
>5267	Identifier	finalizeForwards
>5268	Identifier	_activeNode
>5269	ExpressionStatement	 
>5270	CallExpression	_activeNode -> updateForwards ( )
>5271	ArgumentList	 
>5272	Callee	_activeNode -> updateForwards
>5273	PtrMemberAccess	_activeNode -> updateForwards
>5274	Identifier	updateForwards
>5275	Identifier	_activeNode
>5276	ExpressionStatement	 
>5277	CallExpression	_activeNode -> initializeForwards ( false )
>5278	ArgumentList	false
>5279	Argument	false
>5280	Identifier	false
>5281	Callee	_activeNode -> initializeForwards
>5282	PtrMemberAccess	_activeNode -> initializeForwards
>5283	Identifier	initializeForwards
>5284	Identifier	_activeNode
>5285	ExpressionStatement	 
>5286	CallExpression	drwnLogger 
>5287	ArgumentList	true
>5288	Argument	true
>5289	Identifier	true
>5290	Callee	drwnLogger 
>5291	Identifier	drwnLogger 
>5292	Condition	 
>5293	EqualityExpression	event . GetId ( ) == NODE_POPUP_UPDATE
>5294	Identifier	NODE_POPUP_UPDATE
>5295	CallExpression	event . GetId ( )
>5296	ArgumentList	 
>5297	Callee	event . GetId
>5298	MemberAccess	event . GetId
>5299	Identifier	GetId
>5300	Identifier	event
>5301	CompoundStatement	 
>5302	ExpressionStatement	 
>5303	CallExpression	drwnLogger 
>5304	ArgumentList	false
>5305	Argument	false
>5306	Identifier	false
>5307	Callee	drwnLogger 
>5308	Identifier	drwnLogger 
>5309	ExpressionStatement	 
>5310	CallExpression	_activeNode -> finalizeForwards ( )
>5311	ArgumentList	 
>5312	Callee	_activeNode -> finalizeForwards
>5313	PtrMemberAccess	_activeNode -> finalizeForwards
>5314	Identifier	finalizeForwards
>5315	Identifier	_activeNode
>5316	ExpressionStatement	 
>5317	CallExpression	_activeNode -> evaluateForwards ( )
>5318	ArgumentList	 
>5319	Callee	_activeNode -> evaluateForwards
>5320	PtrMemberAccess	_activeNode -> evaluateForwards
>5321	Identifier	evaluateForwards
>5322	Identifier	_activeNode
>5323	ExpressionStatement	 
>5324	CallExpression	_activeNode -> initializeForwards ( )
>5325	ArgumentList	 
>5326	Callee	_activeNode -> initializeForwards
>5327	PtrMemberAccess	_activeNode -> initializeForwards
>5328	Identifier	initializeForwards
>5329	Identifier	_activeNode
>5330	ExpressionStatement	 
>5331	CallExpression	drwnLogger 
>5332	ArgumentList	true
>5333	Argument	true
>5334	Identifier	true
>5335	Callee	drwnLogger 
>5336	Identifier	drwnLogger 
>5337	Condition	 
>5338	EqualityExpression	event . GetId ( ) == NODE_POPUP_EVALUATE
>5339	Identifier	NODE_POPUP_EVALUATE
>5340	CallExpression	event . GetId ( )
>5341	ArgumentList	 
>5342	Callee	event . GetId
>5343	MemberAccess	event . GetId
>5344	Identifier	GetId
>5345	Identifier	event
>5346	CompoundStatement	 
>5347	IfStatement	if ( _activeNode -> isShowingWindow ( ) )
>5348	ElseStatement	else
>5349	CompoundStatement	 
>5350	ExpressionStatement	 
>5351	CallExpression	_activeNode -> showWindow ( )
>5352	ArgumentList	 
>5353	Callee	_activeNode -> showWindow
>5354	PtrMemberAccess	_activeNode -> showWindow
>5355	Identifier	showWindow
>5356	Identifier	_activeNode
>5357	CompoundStatement	 
>5358	ExpressionStatement	 
>5359	CallExpression	_activeNode -> hideWindow ( )
>5360	ArgumentList	 
>5361	Callee	_activeNode -> hideWindow
>5362	PtrMemberAccess	_activeNode -> hideWindow
>5363	Identifier	hideWindow
>5364	Identifier	_activeNode
>5365	Condition	 
>5366	CallExpression	_activeNode -> isShowingWindow ( )
>5367	ArgumentList	 
>5368	Callee	_activeNode -> isShowingWindow
>5369	PtrMemberAccess	_activeNode -> isShowingWindow
>5370	Identifier	isShowingWindow
>5371	Identifier	_activeNode
>5372	Condition	 
>5373	EqualityExpression	event . GetId ( ) == NODE_POPUP_SHOWHIDE
>5374	Identifier	NODE_POPUP_SHOWHIDE
>5375	CallExpression	event . GetId ( )
>5376	ArgumentList	 
>5377	Callee	event . GetId
>5378	MemberAccess	event . GetId
>5379	Identifier	GetId
>5380	Identifier	event
>5381	CompoundStatement	 
>5382	IfStatement	if ( dlg . ShowModal ( ) == wxID_OK )
>5383	CompoundStatement	 
>5384	ExpressionStatement	 
>5385	CallExpression	this -> Update ( )
>5386	ArgumentList	 
>5387	Callee	this -> Update
>5388	PtrMemberAccess	this -> Update
>5389	Identifier	Update
>5390	Identifier	this
>5391	ExpressionStatement	 
>5392	CallExpression	this -> Refresh ( false )
>5393	ArgumentList	false
>5394	Argument	false
>5395	Identifier	false
>5396	Callee	this -> Refresh
>5397	PtrMemberAccess	this -> Refresh
>5398	Identifier	Refresh
>5399	Identifier	this
>5400	Condition	 
>5401	EqualityExpression	dlg . ShowModal ( ) == wxID_OK
>5402	Identifier	wxID_OK
>5403	CallExpression	dlg . ShowModal ( )
>5404	ArgumentList	 
>5405	Callee	dlg . ShowModal
>5406	MemberAccess	dlg . ShowModal
>5407	Identifier	ShowModal
>5408	Identifier	dlg
>5409	IdentifierDeclStatement	 
>5410	IdentifierDecl	dlg ( this , _activeNode )
>5411	Expression	this , _activeNode
>5412	Identifier	_activeNode
>5413	Identifier	this
>5414	Identifier	dlg
>5415	IdentifierDeclType	drwnOptionsEditor
>5416	Condition	 
>5417	EqualityExpression	event . GetId ( ) == NODE_POPUP_PROPERTIES
>5418	Identifier	NODE_POPUP_PROPERTIES
>5419	CallExpression	event . GetId ( )
>5420	ArgumentList	 
>5421	Callee	event . GetId
>5422	MemberAccess	event . GetId
>5423	Identifier	GetId
>5424	Identifier	event
>5425	CompoundStatement	 
>5426	IfStatement	if ( dlg . ShowModal ( ) == wxID_OK )
>5427	CompoundStatement	 
>5428	ExpressionStatement	 
>5429	CallExpression	a -> setName ( dlg . GetValue ( ) . ToStdString ( ) )
>5430	ArgumentList	dlg . GetValue ( ) . ToStdString ( )
>5431	Argument	dlg . GetValue ( ) . ToStdString ( )
>5432	CallExpression	dlg . GetValue ( ) . ToStdString ( )
>5433	ArgumentList	 
>5434	Callee	dlg . GetValue ( ) . ToStdString
>5435	MemberAccess	dlg . GetValue ( ) . ToStdString
>5436	Identifier	ToStdString
>5437	CallExpression	dlg . GetValue ( )
>5438	ArgumentList	 
>5439	Callee	dlg . GetValue
>5440	MemberAccess	dlg . GetValue
>5441	Identifier	GetValue
>5442	Identifier	dlg
>5443	Callee	a -> setName
>5444	PtrMemberAccess	a -> setName
>5445	Identifier	setName
>5446	Identifier	a
>5447	Condition	 
>5448	EqualityExpression	dlg . ShowModal ( ) == wxID_OK
>5449	Identifier	wxID_OK
>5450	CallExpression	dlg . ShowModal ( )
>5451	ArgumentList	 
>5452	Callee	dlg . ShowModal
>5453	MemberAccess	dlg . ShowModal
>5454	Identifier	ShowModal
>5455	Identifier	dlg
>5456	IdentifierDeclStatement	 
>5457	IdentifierDecl	dlg ( this , \"Set the node's name
>5458	Expression	this , \"Set the node's name
>5459	Expression	\"Set the node's name
>5460	Expression	\"Set Name\" , _activeNode -> getName ( )
>5461	CallExpression	_activeNode -> getName ( )
>5462	ArgumentList	 
>5463	Callee	_activeNode -> getName
>5464	PtrMemberAccess	_activeNode -> getName
>5465	Identifier	getName
>5466	Identifier	_activeNode
>5467	PrimaryExpression	\"Set Name\"
>5468	PrimaryExpression	\"Set the node's name
>5469	Identifier	this
>5470	Identifier	dlg
>5471	IdentifierDeclType	wxTextEntryDialog
>5472	IdentifierDeclStatement	 
>5473	IdentifierDecl	* a = _activeNode
>5474	AssignmentExpr	* a = _activeNode
>5475	Identifier	_activeNode
>5476	Identifier	_activeNode
>5477	Identifier	a
>5478	IdentifierDeclType	drwnNode *
>5479	ExpressionStatement	 
>5480	CallExpression	DRWN_ASSERT ( _activeNode != NULL )
>5481	ArgumentList	_activeNode != NULL
>5482	Argument	_activeNode != NULL
>5483	EqualityExpression	_activeNode != NULL
>5484	Identifier	NULL
>5485	Identifier	_activeNode
>5486	Callee	DRWN_ASSERT
>5487	Identifier	DRWN_ASSERT
>5488	Condition	 
>5489	EqualityExpression	event . GetId ( ) == NODE_POPUP_SET_NAME
>5490	Identifier	NODE_POPUP_SET_NAME
>5491	CallExpression	event . GetId ( )
>5492	ArgumentList	 
>5493	Callee	event . GetId
>5494	MemberAccess	event . GetId
>5495	Identifier	GetId
>5496	Identifier	event
>5568	FunctionDef	MainCanvas 
>5569	ParameterList	int x , int y , int w , int h
>5570	Parameter	 
>5571	Identifier	h
>5572	ParameterType	int
>5573	Parameter	 
>5574	Identifier	w
>5575	ParameterType	int
>5576	Parameter	 
>5577	Identifier	y
>5578	ParameterType	int
>5579	Parameter	 
>5580	Identifier	x
>5581	ParameterType	int
>5582	ReturnType	void
>5583	CompoundStatement	 
>5584	ExpressionStatement	 
>5585	CallExpression	this -> Update ( )
>5586	ArgumentList	 
>5587	Callee	this -> Update
>5588	PtrMemberAccess	this -> Update
>5589	Identifier	Update
>5590	Identifier	this
>5591	ExpressionStatement	 
>5592	CallExpression	this -> Refresh ( false )
>5593	ArgumentList	false
>5594	Argument	false
>5595	Identifier	false
>5596	Callee	this -> Refresh
>5597	PtrMemberAccess	this -> Refresh
>5598	Identifier	Refresh
>5599	Identifier	this
>5600	ForStatement	for ( int i = 0 ; i < _graph -> numNodes ( ) ; i ++ )
>5601	CompoundStatement	 
>5602	IfStatement	if ( ( x < node -> getLocationX ( ) ) && ( x + w > node -> getLocationX ( ) + 32 ) && ( y < node -> getLocationY ( ) ) && ( \
>5603	CompoundStatement	 
>5604	ExpressionStatement	 
>5605	CallExpression	_selectedNodes . insert ( node )
>5606	ArgumentList	node
>5607	Argument	node
>5608	Identifier	node
>5609	Callee	_selectedNodes . insert
>5610	MemberAccess	_selectedNodes . insert
>5611	Identifier	insert
>5612	Identifier	_selectedNodes
>5613	Condition	 
>5614	AndExpression	( x < node -> getLocationX ( ) ) && ( x + w > node -> getLocationX ( ) + 32 ) && ( y < node -> getLocationY ( ) ) && ( \
>5615	AndExpression	( x + w > node -> getLocationX ( ) + 32 ) && ( y < node -> getLocationY ( ) ) && ( y + h > node -> getLocationY ( ) + \
>5616	AndExpression	( y < node -> getLocationY ( ) ) && ( y + h > node -> getLocationY ( ) + 32 )
>5617	RelationalExpression	y + h > node -> getLocationY ( ) + 32
>5618	AdditiveExpression	node -> getLocationY ( ) + 32
>5619	PrimaryExpression	32
>5620	CallExpression	node -> getLocationY ( )
>5621	ArgumentList	 
>5622	Callee	node -> getLocationY
>5623	PtrMemberAccess	node -> getLocationY
>5624	Identifier	getLocationY
>5625	Identifier	node
>5626	AdditiveExpression	y + h
>5627	Identifier	h
>5628	Identifier	y
>5629	RelationalExpression	y < node -> getLocationY ( )
>5630	CallExpression	node -> getLocationY ( )
>5631	ArgumentList	 
>5632	Callee	node -> getLocationY
>5633	PtrMemberAccess	node -> getLocationY
>5634	Identifier	getLocationY
>5635	Identifier	node
>5636	Identifier	y
>5637	RelationalExpression	x + w > node -> getLocationX ( ) + 32
>5638	AdditiveExpression	node -> getLocationX ( ) + 32
>5639	PrimaryExpression	32
>5640	CallExpression	node -> getLocationX ( )
>5641	ArgumentList	 
>5642	Callee	node -> getLocationX
>5643	PtrMemberAccess	node -> getLocationX
>5644	Identifier	getLocationX
>5645	Identifier	node
>5646	AdditiveExpression	x + w
>5647	Identifier	w
>5648	Identifier	x
>5649	RelationalExpression	x < node -> getLocationX ( )
>5650	CallExpression	node -> getLocationX ( )
>5651	ArgumentList	 
>5652	Callee	node -> getLocationX
>5653	PtrMemberAccess	node -> getLocationX
>5654	Identifier	getLocationX
>5655	Identifier	node
>5656	Identifier	x
>5657	IdentifierDeclStatement	 
>5658	IdentifierDecl	* node = _graph -> getNode ( i )
>5659	AssignmentExpr	* node = _graph -> getNode ( i )
>5660	CallExpression	_graph -> getNode ( i )
>5661	ArgumentList	i
>5662	Argument	i
>5663	Identifier	i
>5664	Callee	_graph -> getNode
>5665	PtrMemberAccess	_graph -> getNode
>5666	Identifier	getNode
>5667	Identifier	_graph
>5668	Identifier	node
>5669	Identifier	node
>5670	IdentifierDeclType	drwnNode *
>5671	IncDecOp	 
>5672	IncDec	++
>5673	Identifier	i
>5674	Condition	 
>5675	RelationalExpression	i < _graph -> numNodes ( )
>5676	CallExpression	_graph -> numNodes ( )
>5677	ArgumentList	 
>5678	Callee	_graph -> numNodes
>5679	PtrMemberAccess	_graph -> numNodes
>5680	Identifier	numNodes
>5681	Identifier	_graph
>5682	Identifier	i
>5683	ForInit	 
>5684	IdentifierDeclStatement	int i = 0 ;
>5685	IdentifierDecl	i = 0
>5686	AssignmentExpr	i = 0
>5687	PrimaryExpression	0
>5688	Identifier	i
>5689	Identifier	i
>5690	IdentifierDeclType	int
>5691	IfStatement	if ( h < 0 )
>5692	CompoundStatement	 
>5693	ExpressionStatement	 
>5694	AssignmentExpr	h = - h
>5695	UnaryOp	- h
>5696	Identifier	h
>5697	UnaryOperator	-
>5698	Identifier	h
>5699	ExpressionStatement	 
>5700	AssignmentExpr	y += h
>5701	Identifier	h
>5702	Identifier	y
>5703	Condition	 
>5704	RelationalExpression	h < 0
>5705	PrimaryExpression	0
>5706	Identifier	h
>5707	IfStatement	if ( w < 0 )
>5708	CompoundStatement	 
>5709	ExpressionStatement	 
>5710	AssignmentExpr	w = - w
>5711	UnaryOp	- w
>5712	Identifier	w
>5713	UnaryOperator	-
>5714	Identifier	w
>5715	ExpressionStatement	 
>5716	AssignmentExpr	x += w
>5717	Identifier	w
>5718	Identifier	x
>5719	Condition	 
>5720	RelationalExpression	w < 0
>5721	PrimaryExpression	0
>5722	Identifier	w
>5742	FunctionDef	MainCanvas 
>5743	ParameterList	 
>5744	ReturnType	void
>5745	CompoundStatement	 
>5746	ExpressionStatement	 
>5747	CallExpression	this -> Update ( )
>5748	ArgumentList	 
>5749	Callee	this -> Update
>5750	PtrMemberAccess	this -> Update
>5751	Identifier	Update
>5752	Identifier	this
>5753	ExpressionStatement	 
>5754	CallExpression	this -> Refresh ( false )
>5755	ArgumentList	false
>5756	Argument	false
>5757	Identifier	false
>5758	Callee	this -> Refresh
>5759	PtrMemberAccess	this -> Refresh
>5760	Identifier	Refresh
>5761	Identifier	this
>5762	ForStatement	for ( int i = 0 ; i < _graph -> numNodes ( ) ; i ++ )
>5763	CompoundStatement	 
>5764	ExpressionStatement	 
>5765	CallExpression	_selectedNodes . insert ( _graph -> getNode ( i ) )
>5766	ArgumentList	_graph -> getNode ( i )
>5767	Argument	_graph -> getNode ( i )
>5768	CallExpression	_graph -> getNode ( i )
>5769	ArgumentList	i
>5770	Argument	i
>5771	Identifier	i
>5772	Callee	_graph -> getNode
>5773	PtrMemberAccess	_graph -> getNode
>5774	Identifier	getNode
>5775	Identifier	_graph
>5776	Callee	_selectedNodes . insert
>5777	MemberAccess	_selectedNodes . insert
>5778	Identifier	insert
>5779	Identifier	_selectedNodes
>5780	IncDecOp	 
>5781	IncDec	++
>5782	Identifier	i
>5783	Condition	 
>5784	RelationalExpression	i < _graph -> numNodes ( )
>5785	CallExpression	_graph -> numNodes ( )
>5786	ArgumentList	 
>5787	Callee	_graph -> numNodes
>5788	PtrMemberAccess	_graph -> numNodes
>5789	Identifier	numNodes
>5790	Identifier	_graph
>5791	Identifier	i
>5792	ForInit	 
>5793	IdentifierDeclStatement	int i = 0 ;
>5794	IdentifierDecl	i = 0
>5795	AssignmentExpr	i = 0
>5796	PrimaryExpression	0
>5797	Identifier	i
>5798	Identifier	i
>5799	IdentifierDeclType	int
>5800	IfStatement	if ( ( int ) _selectedNodes . size ( ) == _graph -> numNodes ( ) )
>5801	ReturnStatement	 
>5802	Condition	 
>5803	EqualityExpression	( int ) _selectedNodes . size ( ) == _graph -> numNodes ( )
>5804	CallExpression	_graph -> numNodes ( )
>5805	ArgumentList	 
>5806	Callee	_graph -> numNodes
>5807	PtrMemberAccess	_graph -> numNodes
>5808	Identifier	numNodes
>5809	Identifier	_graph
>5810	CastExpression	( int ) _selectedNodes . size ( )
>5811	CallExpression	_selectedNodes . size ( )
>5812	ArgumentList	 
>5813	Callee	_selectedNodes . size
>5814	MemberAccess	_selectedNodes . size
>5815	Identifier	size
>5816	Identifier	_selectedNodes
>5817	CastTarget	int
>5830	FunctionDef	MainCanvas 
>5831	ParameterList	 
>5832	ReturnType	void
>5833	CompoundStatement	 
>5834	ExpressionStatement	 
>5835	CallExpression	this -> Update ( )
>5836	ArgumentList	 
>5837	Callee	this -> Update
>5838	PtrMemberAccess	this -> Update
>5839	Identifier	Update
>5840	Identifier	this
>5841	ExpressionStatement	 
>5842	CallExpression	this -> Refresh ( false )
>5843	ArgumentList	false
>5844	Argument	false
>5845	Identifier	false
>5846	Callee	this -> Refresh
>5847	PtrMemberAccess	this -> Refresh
>5848	Identifier	Refresh
>5849	Identifier	this
>5850	ExpressionStatement	 
>5851	CallExpression	_selectedNodes . clear ( )
>5852	ArgumentList	 
>5853	Callee	_selectedNodes . clear
>5854	MemberAccess	_selectedNodes . clear
>5855	Identifier	clear
>5856	Identifier	_selectedNodes
>5857	IfStatement	if ( _selectedNodes . empty ( ) )
>5858	ReturnStatement	 
>5859	Condition	 
>5860	CallExpression	_selectedNodes . empty ( )
>5861	ArgumentList	 
>5862	Callee	_selectedNodes . empty
>5863	MemberAccess	_selectedNodes . empty
>5864	Identifier	empty
>5865	Identifier	_selectedNodes
>5873	FunctionDef	MainCanvas 
>5874	ParameterList	 
>5875	ReturnType	void
>5876	CompoundStatement	 
>5880	FunctionDef	MainCanvas 
>5881	ParameterList	 
>5882	ReturnType	void
>5883	CompoundStatement	 
>5887	FunctionDef	MainCanvas 
>5888	ParameterList	 
>5889	ReturnType	void
>5890	CompoundStatement	 
>5891	IfStatement	if ( _activeNode != NULL )
>5892	ElseStatement	else
>5893	CompoundStatement	 
>5894	ExpressionStatement	 
>5895	CallExpression	gMainWindow -> _statusBar -> SetStatusText ( \"\" , 3 )
>5896	ArgumentList	\"\"
>5897	Argument	3
>5898	PrimaryExpression	3
>5899	Argument	\"\"
>5900	PrimaryExpression	\"\"
>5901	Callee	gMainWindow -> _statusBar -> SetStatusText
>5902	PtrMemberAccess	gMainWindow -> _statusBar -> SetStatusText
>5903	Identifier	SetStatusText
>5904	PtrMemberAccess	gMainWindow -> _statusBar
>5905	Identifier	_statusBar
>5906	Identifier	gMainWindow
>5907	ExpressionStatement	 
>5908	CallExpression	gMainWindow -> _statusBar -> updateMessage ( \"\" )
>5909	ArgumentList	\"\"
>5910	Argument	\"\"
>5911	PrimaryExpression	\"\"
>5912	Callee	gMainWindow -> _statusBar -> updateMessage
>5913	PtrMemberAccess	gMainWindow -> _statusBar -> updateMessage
>5914	Identifier	updateMessage
>5915	PtrMemberAccess	gMainWindow -> _statusBar
>5916	Identifier	_statusBar
>5917	Identifier	gMainWindow
>5918	CompoundStatement	 
>5919	ExpressionStatement	 
>5920	CallExpression	gMainWindow -> _statusBar -> SetStatusText ( _activeNode -> getDescription ( ) , 3 )
>5921	ArgumentList	_activeNode -> getDescription ( )
>5922	Argument	3
>5923	PrimaryExpression	3
>5924	Argument	_activeNode -> getDescription ( )
>5925	CallExpression	_activeNode -> getDescription ( )
>5926	ArgumentList	 
>5927	Callee	_activeNode -> getDescription
>5928	PtrMemberAccess	_activeNode -> getDescription
>5929	Identifier	getDescription
>5930	Identifier	_activeNode
>5931	Callee	gMainWindow -> _statusBar -> SetStatusText
>5932	PtrMemberAccess	gMainWindow -> _statusBar -> SetStatusText
>5933	Identifier	SetStatusText
>5934	PtrMemberAccess	gMainWindow -> _statusBar
>5935	Identifier	_statusBar
>5936	Identifier	gMainWindow
>5937	ExpressionStatement	 
>5938	CallExpression	gMainWindow -> _statusBar -> updateMessage ( _activeNode -> getName ( ) . c_str ( ) )
>5939	ArgumentList	_activeNode -> getName ( ) . c_str ( )
>5940	Argument	_activeNode -> getName ( ) . c_str ( )
>5941	CallExpression	_activeNode -> getName ( ) . c_str ( )
>5942	ArgumentList	 
>5943	Callee	_activeNode -> getName ( ) . c_str
>5944	MemberAccess	_activeNode -> getName ( ) . c_str
>5945	Identifier	c_str
>5946	CallExpression	_activeNode -> getName ( )
>5947	ArgumentList	 
>5948	Callee	_activeNode -> getName
>5949	PtrMemberAccess	_activeNode -> getName
>5950	Identifier	getName
>5951	Identifier	_activeNode
>5952	Callee	gMainWindow -> _statusBar -> updateMessage
>5953	PtrMemberAccess	gMainWindow -> _statusBar -> updateMessage
>5954	Identifier	updateMessage
>5955	PtrMemberAccess	gMainWindow -> _statusBar
>5956	Identifier	_statusBar
>5957	Identifier	gMainWindow
>5958	Condition	 
>5959	EqualityExpression	_activeNode != NULL
>5960	Identifier	NULL
>5961	Identifier	_activeNode
>5974	FunctionDef	MainCanvas 
>5975	ParameterList	int x , int y
>5976	Parameter	 
>5977	Identifier	y
>5978	ParameterType	int
>5979	Parameter	 
>5980	Identifier	x
>5981	ParameterType	int
>5982	ReturnType	int
>5983	CompoundStatement	 
>5984	ReturnStatement	 
>5985	UnaryOp	- 1
>5986	PrimaryExpression	1
>5987	UnaryOperator	-
>5988	ForStatement	for ( int i = 0 ; i < _graph -> numNodes ( ) ; i ++ )
>5989	CompoundStatement	 
>5990	IfStatement	if ( ( x > nx ) && ( x < nx + 32 ) && ( y > ny ) && ( y < ny + 32 ) )
>5991	CompoundStatement	 
>5992	ReturnStatement	 
>5993	Identifier	i
>5994	Condition	 
>5995	AndExpression	( x > nx ) && ( x < nx + 32 ) && ( y > ny ) && ( y < ny + 32 )
>5996	AndExpression	( x < nx + 32 ) && ( y > ny ) && ( y < ny + 32 )
>5997	AndExpression	( y > ny ) && ( y < ny + 32 )
>5998	RelationalExpression	y < ny + 32
>5999	AdditiveExpression	ny + 32
>6000	PrimaryExpression	32
>6001	Identifier	ny
>6002	Identifier	y
>6003	RelationalExpression	y > ny
>6004	Identifier	ny
>6005	Identifier	y
>6006	RelationalExpression	x < nx + 32
>6007	AdditiveExpression	nx + 32
>6008	PrimaryExpression	32
>6009	Identifier	nx
>6010	Identifier	x
>6011	RelationalExpression	x > nx
>6012	Identifier	nx
>6013	Identifier	x
>6014	IdentifierDeclStatement	 
>6015	IdentifierDecl	ny = node -> getLocationY ( )
>6016	AssignmentExpr	ny = node -> getLocationY ( )
>6017	CallExpression	node -> getLocationY ( )
>6018	ArgumentList	 
>6019	Callee	node -> getLocationY
>6020	PtrMemberAccess	node -> getLocationY
>6021	Identifier	getLocationY
>6022	Identifier	node
>6023	Identifier	ny
>6024	Identifier	ny
>6025	IdentifierDeclType	int
>6026	IdentifierDeclStatement	 
>6027	IdentifierDecl	nx = node -> getLocationX ( )
>6028	AssignmentExpr	nx = node -> getLocationX ( )
>6029	CallExpression	node -> getLocationX ( )
>6030	ArgumentList	 
>6031	Callee	node -> getLocationX
>6032	PtrMemberAccess	node -> getLocationX
>6033	Identifier	getLocationX
>6034	Identifier	node
>6035	Identifier	nx
>6036	Identifier	nx
>6037	IdentifierDeclType	int
>6038	IdentifierDeclStatement	 
>6039	IdentifierDecl	* node = _graph -> getNode ( i )
>6040	AssignmentExpr	* node = _graph -> getNode ( i )
>6041	CallExpression	_graph -> getNode ( i )
>6042	ArgumentList	i
>6043	Argument	i
>6044	Identifier	i
>6045	Callee	_graph -> getNode
>6046	PtrMemberAccess	_graph -> getNode
>6047	Identifier	getNode
>6048	Identifier	_graph
>6049	Identifier	node
>6050	Identifier	node
>6051	IdentifierDeclType	const drwnNode *
>6052	IncDecOp	 
>6053	IncDec	++
>6054	Identifier	i
>6055	Condition	 
>6056	RelationalExpression	i < _graph -> numNodes ( )
>6057	CallExpression	_graph -> numNodes ( )
>6058	ArgumentList	 
>6059	Callee	_graph -> numNodes
>6060	PtrMemberAccess	_graph -> numNodes
>6061	Identifier	numNodes
>6062	Identifier	_graph
>6063	Identifier	i
>6064	ForInit	 
>6065	IdentifierDeclStatement	int i = 0 ;
>6066	IdentifierDecl	i = 0
>6067	AssignmentExpr	i = 0
>6068	PrimaryExpression	0
>6069	Identifier	i
>6070	Identifier	i
>6071	IdentifierDeclType	int
>6072	ExpressionStatement	 
>6073	CallExpression	DRWN_ASSERT ( _graph != NULL )
>6074	ArgumentList	_graph != NULL
>6075	Argument	_graph != NULL
>6076	EqualityExpression	_graph != NULL
>6077	Identifier	NULL
>6078	Identifier	_graph
>6079	Callee	DRWN_ASSERT
>6080	Identifier	DRWN_ASSERT
>6098	FunctionDef	MainCanvas 
>6099	ParameterList	const drwnNode * node
>6100	Parameter	 
>6101	Identifier	node
>6102	ParameterType	const drwnNode *
>6103	ReturnType	void
>6104	CompoundStatement	 
>6105	ForStatement	for ( int i = 0 ; i < node -> numOutputPorts ( ) ; i ++ )
>6106	CompoundStatement	 
>6107	IfStatement	if ( _mouseMode == MM_CONNECTING_OUTPUT )
>6108	CompoundStatement	 
>6109	ExpressionStatement	 
>6110	CallExpression	_connectPopupMenu -> Enable ( NODE_POPUP_OUTPORT_BASE + i , false )
>6111	ArgumentList	NODE_POPUP_OUTPORT_BASE + i
>6112	Argument	false
>6113	Identifier	false
>6114	Argument	NODE_POPUP_OUTPORT_BASE + i
>6115	AdditiveExpression	NODE_POPUP_OUTPORT_BASE + i
>6116	Identifier	i
>6117	Identifier	NODE_POPUP_OUTPORT_BASE
>6118	Callee	_connectPopupMenu -> Enable
>6119	PtrMemberAccess	_connectPopupMenu -> Enable
>6120	Identifier	Enable
>6121	Identifier	_connectPopupMenu
>6122	ExpressionStatement	 
>6123	CallExpression	portMenu -> Enable ( NODE_POPUP_OUTPORT_BASE + i , false )
>6124	ArgumentList	NODE_POPUP_OUTPORT_BASE + i
>6125	Argument	false
>6126	Identifier	false
>6127	Argument	NODE_POPUP_OUTPORT_BASE + i
>6128	AdditiveExpression	NODE_POPUP_OUTPORT_BASE + i
>6129	Identifier	i
>6130	Identifier	NODE_POPUP_OUTPORT_BASE
>6131	Callee	portMenu -> Enable
>6132	PtrMemberAccess	portMenu -> Enable
>6133	Identifier	Enable
>6134	Identifier	portMenu
>6135	Condition	 
>6136	EqualityExpression	_mouseMode == MM_CONNECTING_OUTPUT
>6137	Identifier	MM_CONNECTING_OUTPUT
>6138	Identifier	_mouseMode
>6139	ExpressionStatement	 
>6140	CallExpression	_connectPopupMenu -> Append ( NODE_POPUP_OUTPORT_BASE + i , node -> getOutputPort ( i ) -> getName ( ) )
>6141	ArgumentList	NODE_POPUP_OUTPORT_BASE + i
>6142	Argument	node -> getOutputPort ( i ) -> getName ( )
>6143	CallExpression	node -> getOutputPort ( i ) -> getName ( )
>6144	ArgumentList	 
>6145	Callee	node -> getOutputPort ( i ) -> getName
>6146	PtrMemberAccess	node -> getOutputPort ( i ) -> getName
>6147	Identifier	getName
>6148	CallExpression	node -> getOutputPort ( i )
>6149	ArgumentList	i
>6150	Argument	i
>6151	Identifier	i
>6152	Callee	node -> getOutputPort
>6153	PtrMemberAccess	node -> getOutputPort
>6154	Identifier	getOutputPort
>6155	Identifier	node
>6156	Argument	NODE_POPUP_OUTPORT_BASE + i
>6157	AdditiveExpression	NODE_POPUP_OUTPORT_BASE + i
>6158	Identifier	i
>6159	Identifier	NODE_POPUP_OUTPORT_BASE
>6160	Callee	_connectPopupMenu -> Append
>6161	PtrMemberAccess	_connectPopupMenu -> Append
>6162	Identifier	Append
>6163	Identifier	_connectPopupMenu
>6164	ExpressionStatement	 
>6165	CallExpression	portMenu -> Append ( NODE_POPUP_OUTPORT_BASE + i , node -> getOutputPort ( i ) -> getName ( ) )
>6166	ArgumentList	NODE_POPUP_OUTPORT_BASE + i
>6167	Argument	node -> getOutputPort ( i ) -> getName ( )
>6168	CallExpression	node -> getOutputPort ( i ) -> getName ( )
>6169	ArgumentList	 
>6170	Callee	node -> getOutputPort ( i ) -> getName
>6171	PtrMemberAccess	node -> getOutputPort ( i ) -> getName
>6172	Identifier	getName
>6173	CallExpression	node -> getOutputPort ( i )
>6174	ArgumentList	i
>6175	Argument	i
>6176	Identifier	i
>6177	Callee	node -> getOutputPort
>6178	PtrMemberAccess	node -> getOutputPort
>6179	Identifier	getOutputPort
>6180	Identifier	node
>6181	Argument	NODE_POPUP_OUTPORT_BASE + i
>6182	AdditiveExpression	NODE_POPUP_OUTPORT_BASE + i
>6183	Identifier	i
>6184	Identifier	NODE_POPUP_OUTPORT_BASE
>6185	Callee	portMenu -> Append
>6186	PtrMemberAccess	portMenu -> Append
>6187	Identifier	Append
>6188	Identifier	portMenu
>6189	IncDecOp	 
>6190	IncDec	++
>6191	Identifier	i
>6192	Condition	 
>6193	RelationalExpression	i < node -> numOutputPorts ( )
>6194	CallExpression	node -> numOutputPorts ( )
>6195	ArgumentList	 
>6196	Callee	node -> numOutputPorts
>6197	PtrMemberAccess	node -> numOutputPorts
>6198	Identifier	numOutputPorts
>6199	Identifier	node
>6200	Identifier	i
>6201	ForInit	 
>6202	IdentifierDeclStatement	int i = 0 ;
>6203	IdentifierDecl	i = 0
>6204	AssignmentExpr	i = 0
>6205	PrimaryExpression	0
>6206	Identifier	i
>6207	Identifier	i
>6208	IdentifierDeclType	int
>6209	IfStatement	if ( ( node -> numInputPorts ( ) > 0 ) && ( node -> numOutputPorts ( ) > 0 ) )
>6210	CompoundStatement	 
>6211	ExpressionStatement	 
>6212	CallExpression	_connectPopupMenu -> AppendSeparator ( )
>6213	ArgumentList	 
>6214	Callee	_connectPopupMenu -> AppendSeparator
>6215	PtrMemberAccess	_connectPopupMenu -> AppendSeparator
>6216	Identifier	AppendSeparator
>6217	Identifier	_connectPopupMenu
>6218	ExpressionStatement	 
>6219	CallExpression	portMenu -> AppendSeparator ( )
>6220	ArgumentList	 
>6221	Callee	portMenu -> AppendSeparator
>6222	PtrMemberAccess	portMenu -> AppendSeparator
>6223	Identifier	AppendSeparator
>6224	Identifier	portMenu
>6225	Condition	 
>6226	AndExpression	( node -> numInputPorts ( ) > 0 ) && ( node -> numOutputPorts ( ) > 0 )
>6227	RelationalExpression	node -> numOutputPorts ( ) > 0
>6228	PrimaryExpression	0
>6229	CallExpression	node -> numOutputPorts ( )
>6230	ArgumentList	 
>6231	Callee	node -> numOutputPorts
>6232	PtrMemberAccess	node -> numOutputPorts
>6233	Identifier	numOutputPorts
>6234	Identifier	node
>6235	RelationalExpression	node -> numInputPorts ( ) > 0
>6236	PrimaryExpression	0
>6237	CallExpression	node -> numInputPorts ( )
>6238	ArgumentList	 
>6239	Callee	node -> numInputPorts
>6240	PtrMemberAccess	node -> numInputPorts
>6241	Identifier	numInputPorts
>6242	Identifier	node
>6243	ForStatement	for ( int i = 0 ; i < node -> numInputPorts ( ) ; i ++ )
>6244	CompoundStatement	 
>6245	IfStatement	if ( _mouseMode == MM_CONNECTING_INPUT )
>6246	CompoundStatement	 
>6247	ExpressionStatement	 
>6248	CallExpression	_connectPopupMenu -> Enable ( NODE_POPUP_INPORT_BASE + i , false )
>6249	ArgumentList	NODE_POPUP_INPORT_BASE + i
>6250	Argument	false
>6251	Identifier	false
>6252	Argument	NODE_POPUP_INPORT_BASE + i
>6253	AdditiveExpression	NODE_POPUP_INPORT_BASE + i
>6254	Identifier	i
>6255	Identifier	NODE_POPUP_INPORT_BASE
>6256	Callee	_connectPopupMenu -> Enable
>6257	PtrMemberAccess	_connectPopupMenu -> Enable
>6258	Identifier	Enable
>6259	Identifier	_connectPopupMenu
>6260	ExpressionStatement	 
>6261	CallExpression	portMenu -> Enable ( NODE_POPUP_INPORT_BASE + i , false )
>6262	ArgumentList	NODE_POPUP_INPORT_BASE + i
>6263	Argument	false
>6264	Identifier	false
>6265	Argument	NODE_POPUP_INPORT_BASE + i
>6266	AdditiveExpression	NODE_POPUP_INPORT_BASE + i
>6267	Identifier	i
>6268	Identifier	NODE_POPUP_INPORT_BASE
>6269	Callee	portMenu -> Enable
>6270	PtrMemberAccess	portMenu -> Enable
>6271	Identifier	Enable
>6272	Identifier	portMenu
>6273	Condition	 
>6274	EqualityExpression	_mouseMode == MM_CONNECTING_INPUT
>6275	Identifier	MM_CONNECTING_INPUT
>6276	Identifier	_mouseMode
>6277	ExpressionStatement	 
>6278	CallExpression	_connectPopupMenu -> Append ( NODE_POPUP_INPORT_BASE + i , node -> getInputPort ( i ) -> getName ( ) )
>6279	ArgumentList	NODE_POPUP_INPORT_BASE + i
>6280	Argument	node -> getInputPort ( i ) -> getName ( )
>6281	CallExpression	node -> getInputPort ( i ) -> getName ( )
>6282	ArgumentList	 
>6283	Callee	node -> getInputPort ( i ) -> getName
>6284	PtrMemberAccess	node -> getInputPort ( i ) -> getName
>6285	Identifier	getName
>6286	CallExpression	node -> getInputPort ( i )
>6287	ArgumentList	i
>6288	Argument	i
>6289	Identifier	i
>6290	Callee	node -> getInputPort
>6291	PtrMemberAccess	node -> getInputPort
>6292	Identifier	getInputPort
>6293	Identifier	node
>6294	Argument	NODE_POPUP_INPORT_BASE + i
>6295	AdditiveExpression	NODE_POPUP_INPORT_BASE + i
>6296	Identifier	i
>6297	Identifier	NODE_POPUP_INPORT_BASE
>6298	Callee	_connectPopupMenu -> Append
>6299	PtrMemberAccess	_connectPopupMenu -> Append
>6300	Identifier	Append
>6301	Identifier	_connectPopupMenu
>6302	ExpressionStatement	 
>6303	CallExpression	portMenu -> Append ( NODE_POPUP_INPORT_BASE + i , node -> getInputPort ( i ) -> getName ( ) )
>6304	ArgumentList	NODE_POPUP_INPORT_BASE + i
>6305	Argument	node -> getInputPort ( i ) -> getName ( )
>6306	CallExpression	node -> getInputPort ( i ) -> getName ( )
>6307	ArgumentList	 
>6308	Callee	node -> getInputPort ( i ) -> getName
>6309	PtrMemberAccess	node -> getInputPort ( i ) -> getName
>6310	Identifier	getName
>6311	CallExpression	node -> getInputPort ( i )
>6312	ArgumentList	i
>6313	Argument	i
>6314	Identifier	i
>6315	Callee	node -> getInputPort
>6316	PtrMemberAccess	node -> getInputPort
>6317	Identifier	getInputPort
>6318	Identifier	node
>6319	Argument	NODE_POPUP_INPORT_BASE + i
>6320	AdditiveExpression	NODE_POPUP_INPORT_BASE + i
>6321	Identifier	i
>6322	Identifier	NODE_POPUP_INPORT_BASE
>6323	Callee	portMenu -> Append
>6324	PtrMemberAccess	portMenu -> Append
>6325	Identifier	Append
>6326	Identifier	portMenu
>6327	IncDecOp	 
>6328	IncDec	++
>6329	Identifier	i
>6330	Condition	 
>6331	RelationalExpression	i < node -> numInputPorts ( )
>6332	CallExpression	node -> numInputPorts ( )
>6333	ArgumentList	 
>6334	Callee	node -> numInputPorts
>6335	PtrMemberAccess	node -> numInputPorts
>6336	Identifier	numInputPorts
>6337	Identifier	node
>6338	Identifier	i
>6339	ForInit	 
>6340	IdentifierDeclStatement	int i = 0 ;
>6341	IdentifierDecl	i = 0
>6342	AssignmentExpr	i = 0
>6343	PrimaryExpression	0
>6344	Identifier	i
>6345	Identifier	i
>6346	IdentifierDeclType	int
>6347	ExpressionStatement	 
>6348	AssignmentExpr	_connectPopupMenu = new wxMenu ( )
>6349	UnaryExpression	new wxMenu ( )
>6350	Identifier	_connectPopupMenu
>6351	ExpressionStatement	 
>6352	Identifier	_connectPopupMenu
>6353	Statement	 
>6354	ExpressionStatement	 
>6355	CallExpression	_portSubMenuItem -> SetSubMenu ( portMenu = new wxMenu ( ) )
>6356	ArgumentList	portMenu = new wxMenu ( )
>6357	Argument	portMenu = new wxMenu ( )
>6358	AssignmentExpr	portMenu = new wxMenu ( )
>6359	UnaryExpression	new wxMenu ( )
>6360	Identifier	portMenu
>6361	Callee	_portSubMenuItem -> SetSubMenu
>6362	PtrMemberAccess	_portSubMenuItem -> SetSubMenu
>6363	Identifier	SetSubMenu
>6364	Identifier	_portSubMenuItem
>6365	IdentifierDeclStatement	 
>6366	IdentifierDecl	* portMenu
>6367	Identifier	portMenu
>6368	IdentifierDeclType	wxMenu *
>6369	ExpressionStatement	 
>6370	CallExpression	_portSubMenuItem -> GetSubMenu ( )
>6371	ArgumentList	 
>6372	Callee	_portSubMenuItem -> GetSubMenu
>6373	PtrMemberAccess	_portSubMenuItem -> GetSubMenu
>6374	Identifier	GetSubMenu
>6375	Identifier	_portSubMenuItem
>6376	Statement	 
>6377	IfStatement	if ( node -> isShowingWindow ( ) )
>6378	ElseStatement	else
>6379	CompoundStatement	 
>6380	ExpressionStatement	 
>6381	CallExpression	_nodePopupMenu -> SetLabel ( NODE_POPUP_SHOWHIDE , \"&Show...\" )
>6382	ArgumentList	NODE_POPUP_SHOWHIDE
>6383	Argument	\"&Show...\"
>6384	PrimaryExpression	\"&Show...\"
>6385	Argument	NODE_POPUP_SHOWHIDE
>6386	Identifier	NODE_POPUP_SHOWHIDE
>6387	Callee	_nodePopupMenu -> SetLabel
>6388	PtrMemberAccess	_nodePopupMenu -> SetLabel
>6389	Identifier	SetLabel
>6390	Identifier	_nodePopupMenu
>6391	CompoundStatement	 
>6392	ExpressionStatement	 
>6393	CallExpression	_nodePopupMenu -> SetLabel ( NODE_POPUP_SHOWHIDE , \"&Hide\" )
>6394	ArgumentList	NODE_POPUP_SHOWHIDE
>6395	Argument	\"&Hide\"
>6396	PrimaryExpression	\"&Hide\"
>6397	Argument	NODE_POPUP_SHOWHIDE
>6398	Identifier	NODE_POPUP_SHOWHIDE
>6399	Callee	_nodePopupMenu -> SetLabel
>6400	PtrMemberAccess	_nodePopupMenu -> SetLabel
>6401	Identifier	SetLabel
>6402	Identifier	_nodePopupMenu
>6403	Condition	 
>6404	CallExpression	node -> isShowingWindow ( )
>6405	ArgumentList	 
>6406	Callee	node -> isShowingWindow
>6407	PtrMemberAccess	node -> isShowingWindow
>6408	Identifier	isShowingWindow
>6409	Identifier	node
>6410	ExpressionStatement	 
>6411	CallExpression	DRWN_ASSERT ( _portSubMenuItem -> GetSubMenu ( ) != NULL )
>6412	ArgumentList	_portSubMenuItem -> GetSubMenu ( ) != NULL
>6413	Argument	_portSubMenuItem -> GetSubMenu ( ) != NULL
>6414	EqualityExpression	_portSubMenuItem -> GetSubMenu ( ) != NULL
>6415	Identifier	NULL
>6416	CallExpression	_portSubMenuItem -> GetSubMenu ( )
>6417	ArgumentList	 
>6418	Callee	_portSubMenuItem -> GetSubMenu
>6419	PtrMemberAccess	_portSubMenuItem -> GetSubMenu
>6420	Identifier	GetSubMenu
>6421	Identifier	_portSubMenuItem
>6422	Callee	DRWN_ASSERT
>6423	Identifier	DRWN_ASSERT
>6424	ExpressionStatement	 
>6425	CallExpression	DRWN_ASSERT ( ( node != NULL ) && ( _portSubMenuItem != NULL ) )
>6426	ArgumentList	( node != NULL ) && ( _portSubMenuItem != NULL )
>6427	Argument	( node != NULL ) && ( _portSubMenuItem != NULL )
>6428	AndExpression	( node != NULL ) && ( _portSubMenuItem != NULL )
>6429	EqualityExpression	_portSubMenuItem != NULL
>6430	Identifier	NULL
>6431	Identifier	_portSubMenuItem
>6432	EqualityExpression	node != NULL
>6433	Identifier	NULL
>6434	Identifier	node
>6435	Callee	DRWN_ASSERT
>6436	Identifier	DRWN_ASSERT
>6467	FunctionDef	MainWindow 
>6468	ParameterList	wxWindow * parent , wxWindowID id , const wxString & title , const wxPoint & pos , const wxSize & size , long style
>6469	Parameter	 
>6470	Identifier	style
>6471	ParameterType	long
>6472	Parameter	 
>6473	Identifier	size
>6474	ParameterType	const wxSize &
>6475	Parameter	 
>6476	Identifier	pos
>6477	ParameterType	const wxPoint &
>6478	Parameter	 
>6479	Identifier	title
>6480	ParameterType	const wxString &
>6481	Parameter	 
>6482	Identifier	id
>6483	ParameterType	wxWindowID
>6484	Parameter	 
>6485	Identifier	parent
>6486	ParameterType	wxWindow *
>6487	CompoundStatement	 
>6488	ExpressionStatement	 
>6489	CallExpression	_sessionLog -> AppendText ( wxString ( \"Session log started
>6490	ArgumentList	wxString ( \"Session log started
>6491	Argument	wxString ( \"Session log started
>6492	AdditiveExpression	wxString ( \"Session log started
>6493	AdditiveExpression	now . Format ( ) + wxString ( \"\n\" )
>6494	CallExpression	wxString ( \"\n\" )
>6495	ArgumentList	\"\n\"
>6496	Argument	\"\n\"
>6497	PrimaryExpression	\"\n\"
>6498	Callee	wxString
>6499	Identifier	wxString
>6500	CallExpression	now . Format ( )
>6501	ArgumentList	 
>6502	Callee	now . Format
>6503	MemberAccess	now . Format
>6504	Identifier	Format
>6505	Identifier	now
>6506	CallExpression	wxString ( \"Session log started
>6507	ArgumentList	\"Session log started
>6508	Argument	\"Session log started
>6509	PrimaryExpression	\"Session log started
>6510	Callee	wxString
>6511	Identifier	wxString
>6512	Callee	_sessionLog -> AppendText
>6513	PtrMemberAccess	_sessionLog -> AppendText
>6514	Identifier	AppendText
>6515	Identifier	_sessionLog
>6516	IdentifierDeclStatement	 
>6517	IdentifierDecl	now = wxDateTime 
>6518	AssignmentExpr	now = wxDateTime 
>6519	CallExpression	wxDateTime 
>6520	ArgumentList	 
>6521	Callee	wxDateTime 
>6522	Identifier	wxDateTime 
>6523	Identifier	now
>6524	Identifier	now
>6525	IdentifierDeclType	wxDateTime
>6526	ExpressionStatement	 
>6527	CallExpression	_sessionLog -> SetDefaultStyle ( wxTextAttr ( * wxBLACK ) )
>6528	ArgumentList	wxTextAttr ( * wxBLACK )
>6529	Argument	wxTextAttr ( * wxBLACK )
>6530	CallExpression	wxTextAttr ( * wxBLACK )
>6531	ArgumentList	* wxBLACK
>6532	Argument	* wxBLACK
>6533	UnaryOp	* wxBLACK
>6534	Identifier	wxBLACK
>6535	UnaryOperator	*
>6536	Callee	wxTextAttr
>6537	Identifier	wxTextAttr
>6538	Callee	_sessionLog -> SetDefaultStyle
>6539	PtrMemberAccess	_sessionLog -> SetDefaultStyle
>6540	Identifier	SetDefaultStyle
>6541	Identifier	_sessionLog
>6542	ExpressionStatement	 
>6543	CallExpression	updateGUIElements ( )
>6544	ArgumentList	 
>6545	Callee	updateGUIElements
>6546	Identifier	updateGUIElements
>6547	ExpressionStatement	 
>6548	CallExpression	_canvases . push_back ( _activeCanvas )
>6549	ArgumentList	_activeCanvas
>6550	Argument	_activeCanvas
>6551	Identifier	_activeCanvas
>6552	Callee	_canvases . push_back
>6553	MemberAccess	_canvases . push_back
>6554	Identifier	push_back
>6555	Identifier	_canvases
>6556	ExpressionStatement	 
>6557	CallExpression	_activeCanvas -> SetFocus ( )
>6558	ArgumentList	 
>6559	Callee	_activeCanvas -> SetFocus
>6560	PtrMemberAccess	_activeCanvas -> SetFocus
>6561	Identifier	SetFocus
>6562	Identifier	_activeCanvas
>6563	ExpressionStatement	 
>6564	CallExpression	_sessionLog -> SetBackgroundColour ( wxColour ( 255 , 255 , 192 ) )
>6565	ArgumentList	wxColour ( 255 , 255 , 192 )
>6566	Argument	wxColour ( 255 , 255 , 192 )
>6567	CallExpression	wxColour ( 255 , 255 , 192 )
>6568	ArgumentList	255
>6569	Argument	192
>6570	PrimaryExpression	192
>6571	Argument	255
>6572	PrimaryExpression	255
>6573	Argument	255
>6574	PrimaryExpression	255
>6575	Callee	wxColour
>6576	Identifier	wxColour
>6577	Callee	_sessionLog -> SetBackgroundColour
>6578	PtrMemberAccess	_sessionLog -> SetBackgroundColour
>6579	Identifier	SetBackgroundColour
>6580	Identifier	_sessionLog
>6581	ExpressionStatement	 
>6582	CallExpression	SetSizer ( _splitterWnd )
>6583	ArgumentList	_splitterWnd
>6584	Argument	_splitterWnd
>6585	Identifier	_splitterWnd
>6586	Callee	SetSizer
>6587	Identifier	SetSizer
>6588	ExpressionStatement	 
>6589	CallExpression	_splitterWnd -> Add ( _sessionLog = new wxTextCtrl ( this , wxID_ANY , \"\" , wxDefaultPosition , wxDefaultSize , \
>6590	ArgumentList	_sessionLog = new wxTextCtrl ( this , wxID_ANY , \"\" , wxDefaultPosition , wxDefaultSize , wxTE_MULTILINE | wxTE_\
>6591	Argument	wxEXPAND | wxALL
>6592	InclusiveOrExpression	wxEXPAND | wxALL
>6593	Identifier	wxALL
>6594	Identifier	wxEXPAND
>6595	Argument	0
>6596	PrimaryExpression	0
>6597	Argument	_sessionLog = new wxTextCtrl ( this , wxID_ANY , \"\" , wxDefaultPosition , wxDefaultSize , wxTE_MULTILINE | wxTE_\
>6598	AssignmentExpr	_sessionLog = new wxTextCtrl ( this , wxID_ANY , \"\" , wxDefaultPosition , wxDefaultSize , wxTE_MULTILINE | \
>6599	Expression	this , wxID_ANY , \"\" , wxDefaultPosition , wxDefaultSize , wxTE_MULTILINE | wxTE_PROCESS_ENTER | wxRESIZE_BORDER | \
>6600	Expression	wxID_ANY , \"\" , wxDefaultPosition , wxDefaultSize , wxTE_MULTILINE | wxTE_PROCESS_ENTER | wxRESIZE_BORDER | wxVSCROLL | \
>6601	Expression	\"\" , wxDefaultPosition , wxDefaultSize , wxTE_MULTILINE | wxTE_PROCESS_ENTER | wxRESIZE_BORDER | wxVSCROLL | wxTE_\
>6602	Expression	wxDefaultPosition , wxDefaultSize , wxTE_MULTILINE | wxTE_PROCESS_ENTER | wxRESIZE_BORDER | wxVSCROLL | wxTE_RICH
>6603	Expression	wxDefaultSize , wxTE_MULTILINE | wxTE_PROCESS_ENTER | wxRESIZE_BORDER | wxVSCROLL | wxTE_RICH
>6604	InclusiveOrExpression	wxTE_MULTILINE | wxTE_PROCESS_ENTER | wxRESIZE_BORDER | wxVSCROLL | wxTE_RICH
>6605	InclusiveOrExpression	wxTE_PROCESS_ENTER | wxRESIZE_BORDER | wxVSCROLL | wxTE_RICH
>6606	InclusiveOrExpression	wxRESIZE_BORDER | wxVSCROLL | wxTE_RICH
>6607	InclusiveOrExpression	wxVSCROLL | wxTE_RICH
>6608	Identifier	wxTE_RICH
>6609	Identifier	wxVSCROLL
>6610	Identifier	wxRESIZE_BORDER
>6611	Identifier	wxTE_PROCESS_ENTER
>6612	Identifier	wxTE_MULTILINE
>6613	Identifier	wxDefaultSize
>6614	Identifier	wxDefaultPosition
>6615	PrimaryExpression	\"\"
>6616	Identifier	wxID_ANY
>6617	Identifier	this
>6618	Identifier	_sessionLog
>6619	Callee	_splitterWnd -> Add
>6620	PtrMemberAccess	_splitterWnd -> Add
>6621	Identifier	Add
>6622	Identifier	_splitterWnd
>6623	ExpressionStatement	 
>6624	CallExpression	_splitterWnd -> Add ( _activeCanvas = new MainCanvas ( this ) , 1 , wxEXPAND | wxALL )
>6625	ArgumentList	_activeCanvas = new MainCanvas ( this )
>6626	Argument	wxEXPAND | wxALL
>6627	InclusiveOrExpression	wxEXPAND | wxALL
>6628	Identifier	wxALL
>6629	Identifier	wxEXPAND
>6630	Argument	1
>6631	PrimaryExpression	1
>6632	Argument	_activeCanvas = new MainCanvas ( this )
>6633	AssignmentExpr	_activeCanvas = new MainCanvas ( this )
>6634	Identifier	this
>6635	Identifier	_activeCanvas
>6636	Callee	_splitterWnd -> Add
>6637	PtrMemberAccess	_splitterWnd -> Add
>6638	Identifier	Add
>6639	Identifier	_splitterWnd
>6640	ExpressionStatement	 
>6641	CallExpression	_splitterWnd -> SetMinSize ( wxSize ( 320 , 240 ) )
>6642	ArgumentList	wxSize ( 320 , 240 )
>6643	Argument	wxSize ( 320 , 240 )
>6644	CallExpression	wxSize ( 320 , 240 )
>6645	ArgumentList	320
>6646	Argument	240
>6647	PrimaryExpression	240
>6648	Argument	320
>6649	PrimaryExpression	320
>6650	Callee	wxSize
>6651	Identifier	wxSize
>6652	Callee	_splitterWnd -> SetMinSize
>6653	PtrMemberAccess	_splitterWnd -> SetMinSize
>6654	Identifier	SetMinSize
>6655	Identifier	_splitterWnd
>6656	ExpressionStatement	 
>6657	AssignmentExpr	_splitterWnd = new wxBoxSizer ( wxVERTICAL )
>6658	Identifier	wxVERTICAL
>6659	Identifier	_splitterWnd
>6660	ExpressionStatement	 
>6661	CallExpression	this -> SetStatusBarPane ( 3 )
>6662	ArgumentList	3
>6663	Argument	3
>6664	PrimaryExpression	3
>6665	Callee	this -> SetStatusBarPane
>6666	PtrMemberAccess	this -> SetStatusBarPane
>6667	Identifier	SetStatusBarPane
>6668	Identifier	this
>6669	ExpressionStatement	 
>6670	CallExpression	this -> SetStatusBar ( _statusBar )
>6671	ArgumentList	_statusBar
>6672	Argument	_statusBar
>6673	Identifier	_statusBar
>6674	Callee	this -> SetStatusBar
>6675	PtrMemberAccess	this -> SetStatusBar
>6676	Identifier	SetStatusBar
>6677	Identifier	this
>6678	ExpressionStatement	 
>6679	AssignmentExpr	_statusBar = new drwnStatusBar ( this )
>6680	Identifier	this
>6681	Identifier	_statusBar
>6682	ExpressionStatement	 
>6683	CallExpression	options_menu -> Check ( OPTIONS_DISPLAY_WARNING , drwnLogger 
>6684	ArgumentList	OPTIONS_DISPLAY_WARNING
>6685	Argument	drwnLogger 
>6686	RelationalExpression	drwnLogger 
>6687	Identifier	DRWN_LL_WARNING
>6688	CallExpression	drwnLogger 
>6689	ArgumentList	 
>6690	Callee	drwnLogger 
>6691	Identifier	drwnLogger 
>6692	Argument	OPTIONS_DISPLAY_WARNING
>6693	Identifier	OPTIONS_DISPLAY_WARNING
>6694	Callee	options_menu -> Check
>6695	PtrMemberAccess	options_menu -> Check
>6696	Identifier	Check
>6697	Identifier	options_menu
>6698	ExpressionStatement	 
>6699	CallExpression	options_menu -> Check ( OPTIONS_DISPLAY_MESSAGE , drwnLogger 
>6700	ArgumentList	OPTIONS_DISPLAY_MESSAGE
>6701	Argument	drwnLogger 
>6702	EqualityExpression	drwnLogger 
>6703	Identifier	DRWN_LL_MESSAGE
>6704	CallExpression	drwnLogger 
>6705	ArgumentList	 
>6706	Callee	drwnLogger 
>6707	Identifier	drwnLogger 
>6708	Argument	OPTIONS_DISPLAY_MESSAGE
>6709	Identifier	OPTIONS_DISPLAY_MESSAGE
>6710	Callee	options_menu -> Check
>6711	PtrMemberAccess	options_menu -> Check
>6712	Identifier	Check
>6713	Identifier	options_menu
>6714	ExpressionStatement	 
>6715	CallExpression	options_menu -> Check ( OPTIONS_DISPLAY_VERBOSE , drwnLogger 
>6716	ArgumentList	OPTIONS_DISPLAY_VERBOSE
>6717	Argument	drwnLogger 
>6718	RelationalExpression	drwnLogger 
>6719	Identifier	DRWN_LL_VERBOSE
>6720	CallExpression	drwnLogger 
>6721	ArgumentList	 
>6722	Callee	drwnLogger 
>6723	Identifier	drwnLogger 
>6724	Argument	OPTIONS_DISPLAY_VERBOSE
>6725	Identifier	OPTIONS_DISPLAY_VERBOSE
>6726	Callee	options_menu -> Check
>6727	PtrMemberAccess	options_menu -> Check
>6728	Identifier	Check
>6729	Identifier	options_menu
>6730	ExpressionStatement	 
>6731	CallExpression	options_menu -> Check ( OPTIONS_BEEP , false )
>6732	ArgumentList	OPTIONS_BEEP
>6733	Argument	false
>6734	Identifier	false
>6735	Argument	OPTIONS_BEEP
>6736	Identifier	OPTIONS_BEEP
>6737	Callee	options_menu -> Check
>6738	PtrMemberAccess	options_menu -> Check
>6739	Identifier	Check
>6740	Identifier	options_menu
>6741	ExpressionStatement	 
>6742	CallExpression	network_menu -> Check ( NETWORK_GRIDSNAP , true )
>6743	ArgumentList	NETWORK_GRIDSNAP
>6744	Argument	true
>6745	Identifier	true
>6746	Argument	NETWORK_GRIDSNAP
>6747	Identifier	NETWORK_GRIDSNAP
>6748	Callee	network_menu -> Check
>6749	PtrMemberAccess	network_menu -> Check
>6750	Identifier	Check
>6751	Identifier	network_menu
>6752	ExpressionStatement	 
>6753	CallExpression	SetMenuBar ( menu_bar )
>6754	ArgumentList	menu_bar
>6755	Argument	menu_bar
>6756	Identifier	menu_bar
>6757	Callee	SetMenuBar
>6758	Identifier	SetMenuBar
>6759	ExpressionStatement	 
>6760	CallExpression	menu_bar -> Append ( help_menu , \"&Help\" )
>6761	ArgumentList	help_menu
>6762	Argument	\"&Help\"
>6763	PrimaryExpression	\"&Help\"
>6764	Argument	help_menu
>6765	Identifier	help_menu
>6766	Callee	menu_bar -> Append
>6767	PtrMemberAccess	menu_bar -> Append
>6768	Identifier	Append
>6769	Identifier	menu_bar
>6770	ExpressionStatement	 
>6771	CallExpression	menu_bar -> Append ( _windowMenu , \"&Window\" )
>6772	ArgumentList	_windowMenu
>6773	Argument	\"&Window\"
>6774	PrimaryExpression	\"&Window\"
>6775	Argument	_windowMenu
>6776	Identifier	_windowMenu
>6777	Callee	menu_bar -> Append
>6778	PtrMemberAccess	menu_bar -> Append
>6779	Identifier	Append
>6780	Identifier	menu_bar
>6781	ExpressionStatement	 
>6782	CallExpression	menu_bar -> Append ( options_menu , \"&Options\" )
>6783	ArgumentList	options_menu
>6784	Argument	\"&Options\"
>6785	PrimaryExpression	\"&Options\"
>6786	Argument	options_menu
>6787	Identifier	options_menu
>6788	Callee	menu_bar -> Append
>6789	PtrMemberAccess	menu_bar -> Append
>6790	Identifier	Append
>6791	Identifier	menu_bar
>6792	ExpressionStatement	 
>6793	CallExpression	menu_bar -> Append ( database_menu , \"&Database\" )
>6794	ArgumentList	database_menu
>6795	Argument	\"&Database\"
>6796	PrimaryExpression	\"&Database\"
>6797	Argument	database_menu
>6798	Identifier	database_menu
>6799	Callee	menu_bar -> Append
>6800	PtrMemberAccess	menu_bar -> Append
>6801	Identifier	Append
>6802	Identifier	menu_bar
>6803	ExpressionStatement	 
>6804	CallExpression	menu_bar -> Append ( network_menu , \"&Network\" )
>6805	ArgumentList	network_menu
>6806	Argument	\"&Network\"
>6807	PrimaryExpression	\"&Network\"
>6808	Argument	network_menu
>6809	Identifier	network_menu
>6810	Callee	menu_bar -> Append
>6811	PtrMemberAccess	menu_bar -> Append
>6812	Identifier	Append
>6813	Identifier	menu_bar
>6814	ExpressionStatement	 
>6815	CallExpression	menu_bar -> Append ( edit_menu , \"&Edit\" )
>6816	ArgumentList	edit_menu
>6817	Argument	\"&Edit\"
>6818	PrimaryExpression	\"&Edit\"
>6819	Argument	edit_menu
>6820	Identifier	edit_menu
>6821	Callee	menu_bar -> Append
>6822	PtrMemberAccess	menu_bar -> Append
>6823	Identifier	Append
>6824	Identifier	menu_bar
>6825	ExpressionStatement	 
>6826	CallExpression	menu_bar -> Append ( file_menu , \"&File\" )
>6827	ArgumentList	file_menu
>6828	Argument	\"&File\"
>6829	PrimaryExpression	\"&File\"
>6830	Argument	file_menu
>6831	Identifier	file_menu
>6832	Callee	menu_bar -> Append
>6833	PtrMemberAccess	menu_bar -> Append
>6834	Identifier	Append
>6835	Identifier	menu_bar
>6836	IdentifierDeclStatement	 
>6837	IdentifierDecl	* menu_bar = new wxMenuBar ( )
>6838	AssignmentExpr	* menu_bar = new wxMenuBar ( )
>6839	UnaryExpression	new wxMenuBar ( )
>6840	Identifier	menu_bar
>6841	Identifier	menu_bar
>6842	IdentifierDeclType	wxMenuBar *
>6843	ExpressionStatement	 
>6844	CallExpression	help_menu -> Append ( HELP_ABOUT , \"&About...\" , \"Show about dialog\" )
>6845	ArgumentList	HELP_ABOUT
>6846	Argument	\"Show about dialog\"
>6847	PrimaryExpression	\"Show about dialog\"
>6848	Argument	\"&About...\"
>6849	PrimaryExpression	\"&About...\"
>6850	Argument	HELP_ABOUT
>6851	Identifier	HELP_ABOUT
>6852	Callee	help_menu -> Append
>6853	PtrMemberAccess	help_menu -> Append
>6854	Identifier	Append
>6855	Identifier	help_menu
>6856	ExpressionStatement	 
>6857	CallExpression	help_menu -> Append ( HELP_RELEASE_NOTES , \"&Release Notes...\" , \"Show release notes\" )
>6858	ArgumentList	HELP_RELEASE_NOTES
>6859	Argument	\"Show release notes\"
>6860	PrimaryExpression	\"Show release notes\"
>6861	Argument	\"&Release Notes...\"
>6862	PrimaryExpression	\"&Release Notes...\"
>6863	Argument	HELP_RELEASE_NOTES
>6864	Identifier	HELP_RELEASE_NOTES
>6865	Callee	help_menu -> Append
>6866	PtrMemberAccess	help_menu -> Append
>6867	Identifier	Append
>6868	Identifier	help_menu
>6869	ExpressionStatement	 
>6870	CallExpression	help_menu -> Append ( HELP_DRWN_CONTENTS , \"&Contents...\tF1\" , \"Show help information\" )
>6871	ArgumentList	HELP_DRWN_CONTENTS
>6872	Argument	\"Show help information\"
>6873	PrimaryExpression	\"Show help information\"
>6874	Argument	\"&Contents...\tF1\"
>6875	PrimaryExpression	\"&Contents...\tF1\"
>6876	Argument	HELP_DRWN_CONTENTS
>6877	Identifier	HELP_DRWN_CONTENTS
>6878	Callee	help_menu -> Append
>6879	PtrMemberAccess	help_menu -> Append
>6880	Identifier	Append
>6881	Identifier	help_menu
>6882	ExpressionStatement	 
>6883	CallExpression	options_menu -> Append ( OPTIONS_SAVE_LOG , \"&Save log...\" , \"Save session log\" )
>6884	ArgumentList	OPTIONS_SAVE_LOG
>6885	Argument	\"Save session log\"
>6886	PrimaryExpression	\"Save session log\"
>6887	Argument	\"&Save log...\"
>6888	PrimaryExpression	\"&Save log...\"
>6889	Argument	OPTIONS_SAVE_LOG
>6890	Identifier	OPTIONS_SAVE_LOG
>6891	Callee	options_menu -> Append
>6892	PtrMemberAccess	options_menu -> Append
>6893	Identifier	Append
>6894	Identifier	options_menu
>6895	ExpressionStatement	 
>6896	CallExpression	options_menu -> Append ( OPTIONS_CLEAR_LOG , \"&Clear log...\" , \"Clear session log\" )
>6897	ArgumentList	OPTIONS_CLEAR_LOG
>6898	Argument	\"Clear session log\"
>6899	PrimaryExpression	\"Clear session log\"
>6900	Argument	\"&Clear log...\"
>6901	PrimaryExpression	\"&Clear log...\"
>6902	Argument	OPTIONS_CLEAR_LOG
>6903	Identifier	OPTIONS_CLEAR_LOG
>6904	Callee	options_menu -> Append
>6905	PtrMemberAccess	options_menu -> Append
>6906	Identifier	Append
>6907	Identifier	options_menu
>6908	ExpressionStatement	 
>6909	CallExpression	options_menu -> AppendSeparator ( )
>6910	ArgumentList	 
>6911	Callee	options_menu -> AppendSeparator
>6912	PtrMemberAccess	options_menu -> AppendSeparator
>6913	Identifier	AppendSeparator
>6914	Identifier	options_menu
>6915	ExpressionStatement	 
>6916	CallExpression	options_menu -> AppendCheckItem ( OPTIONS_BEEP , \"&Beep\" , \"Beep on completion\" )
>6917	ArgumentList	OPTIONS_BEEP
>6918	Argument	\"Beep on completion\"
>6919	PrimaryExpression	\"Beep on completion\"
>6920	Argument	\"&Beep\"
>6921	PrimaryExpression	\"&Beep\"
>6922	Argument	OPTIONS_BEEP
>6923	Identifier	OPTIONS_BEEP
>6924	Callee	options_menu -> AppendCheckItem
>6925	PtrMemberAccess	options_menu -> AppendCheckItem
>6926	Identifier	AppendCheckItem
>6927	Identifier	options_menu
>6928	ExpressionStatement	 
>6929	CallExpression	options_menu -> AppendSeparator ( )
>6930	ArgumentList	 
>6931	Callee	options_menu -> AppendSeparator
>6932	PtrMemberAccess	options_menu -> AppendSeparator
>6933	Identifier	AppendSeparator
>6934	Identifier	options_menu
>6935	ExpressionStatement	 
>6936	CallExpression	options_menu -> AppendRadioItem ( OPTIONS_DISPLAY_WARNING , \"Display &Warnings\" , \"Display warnings and errors only\" )
>6937	ArgumentList	OPTIONS_DISPLAY_WARNING
>6938	Argument	\"Display warnings and errors only\"
>6939	PrimaryExpression	\"Display warnings and errors only\"
>6940	Argument	\"Display &Warnings\"
>6941	PrimaryExpression	\"Display &Warnings\"
>6942	Argument	OPTIONS_DISPLAY_WARNING
>6943	Identifier	OPTIONS_DISPLAY_WARNING
>6944	Callee	options_menu -> AppendRadioItem
>6945	PtrMemberAccess	options_menu -> AppendRadioItem
>6946	Identifier	AppendRadioItem
>6947	Identifier	options_menu
>6948	ExpressionStatement	 
>6949	CallExpression	options_menu -> AppendRadioItem ( OPTIONS_DISPLAY_MESSAGE , \"Display &Messages\" , \"Display messages, warnings and \
>6950	ArgumentList	OPTIONS_DISPLAY_MESSAGE
>6951	Argument	\"Display messages, warnings and errors\"
>6952	PrimaryExpression	\"Display messages, warnings and errors\"
>6953	Argument	\"Display &Messages\"
>6954	PrimaryExpression	\"Display &Messages\"
>6955	Argument	OPTIONS_DISPLAY_MESSAGE
>6956	Identifier	OPTIONS_DISPLAY_MESSAGE
>6957	Callee	options_menu -> AppendRadioItem
>6958	PtrMemberAccess	options_menu -> AppendRadioItem
>6959	Identifier	AppendRadioItem
>6960	Identifier	options_menu
>6961	ExpressionStatement	 
>6962	CallExpression	options_menu -> AppendRadioItem ( OPTIONS_DISPLAY_VERBOSE , \"Display &Audit Messages\" , \"Display audit (verbose) \
>6963	ArgumentList	OPTIONS_DISPLAY_VERBOSE
>6964	Argument	\"Display audit (verbose) messages\"
>6965	PrimaryExpression	\"Display audit (verbose) messages\"
>6966	Argument	\"Display &Audit Messages\"
>6967	PrimaryExpression	\"Display &Audit Messages\"
>6968	Argument	OPTIONS_DISPLAY_VERBOSE
>6969	Identifier	OPTIONS_DISPLAY_VERBOSE
>6970	Callee	options_menu -> AppendRadioItem
>6971	PtrMemberAccess	options_menu -> AppendRadioItem
>6972	Identifier	AppendRadioItem
>6973	Identifier	options_menu
>6974	ExpressionStatement	 
>6975	CallExpression	database_menu -> Append ( DATABASE_FLUSH_CACHE , \"&Flush Cache\" , \"Flush and clear the record cache\" )
>6976	ArgumentList	DATABASE_FLUSH_CACHE
>6977	Argument	\"Flush and clear the record cache\"
>6978	PrimaryExpression	\"Flush and clear the record cache\"
>6979	Argument	\"&Flush Cache\"
>6980	PrimaryExpression	\"&Flush Cache\"
>6981	Argument	DATABASE_FLUSH_CACHE
>6982	Identifier	DATABASE_FLUSH_CACHE
>6983	Callee	database_menu -> Append
>6984	PtrMemberAccess	database_menu -> Append
>6985	Identifier	Append
>6986	Identifier	database_menu
>6987	ExpressionStatement	 
>6988	CallExpression	database_menu -> AppendSeparator ( )
>6989	ArgumentList	 
>6990	Callee	database_menu -> AppendSeparator
>6991	PtrMemberAccess	database_menu -> AppendSeparator
>6992	Identifier	AppendSeparator
>6993	Identifier	database_menu
>6994	ExpressionStatement	 
>6995	CallExpression	database_menu -> Append ( DATABASE_RANDOMIZE_COLOURS , \"&Randomize Colours...\" , \"Randomly sample data partitioning (\
>6996	ArgumentList	DATABASE_RANDOMIZE_COLOURS
>6997	Argument	\"Randomly sample data partitioning (colours)\"
>6998	PrimaryExpression	\"Randomly sample data partitioning (colours)\"
>6999	Argument	\"&Randomize Colours...\"
>7000	PrimaryExpression	\"&Randomize Colours...\"
>7001	Argument	DATABASE_RANDOMIZE_COLOURS
>7002	Identifier	DATABASE_RANDOMIZE_COLOURS
>7003	Callee	database_menu -> Append
>7004	PtrMemberAccess	database_menu -> Append
>7005	Identifier	Append
>7006	Identifier	database_menu
>7007	ExpressionStatement	 
>7008	CallExpression	database_menu -> Append ( DATABASE_IMPORT_COLOURS , \"Import Colo&urs...\" , \"Import data partitioning (colours)\" )
>7009	ArgumentList	DATABASE_IMPORT_COLOURS
>7010	Argument	\"Import data partitioning (colours)\"
>7011	PrimaryExpression	\"Import data partitioning (colours)\"
>7012	Argument	\"Import Colo&urs...\"
>7013	PrimaryExpression	\"Import Colo&urs...\"
>7014	Argument	DATABASE_IMPORT_COLOURS
>7015	Identifier	DATABASE_IMPORT_COLOURS
>7016	Callee	database_menu -> Append
>7017	PtrMemberAccess	database_menu -> Append
>7018	Identifier	Append
>7019	Identifier	database_menu
>7020	ExpressionStatement	 
>7021	CallExpression	database_menu -> AppendSeparator ( )
>7022	ArgumentList	 
>7023	Callee	database_menu -> AppendSeparator
>7024	PtrMemberAccess	database_menu -> AppendSeparator
>7025	Identifier	AppendSeparator
>7026	Identifier	database_menu
>7027	ExpressionStatement	 
>7028	CallExpression	database_menu -> Append ( DATABASE_VIEW_INSTANCES , \"View &Instance...\" , \"View data instances\" )
>7029	ArgumentList	DATABASE_VIEW_INSTANCES
>7030	Argument	\"View data instances\"
>7031	PrimaryExpression	\"View data instances\"
>7032	Argument	\"View &Instance...\"
>7033	PrimaryExpression	\"View &Instance...\"
>7034	Argument	DATABASE_VIEW_INSTANCES
>7035	Identifier	DATABASE_VIEW_INSTANCES
>7036	Callee	database_menu -> Append
>7037	PtrMemberAccess	database_menu -> Append
>7038	Identifier	Append
>7039	Identifier	database_menu
>7040	ExpressionStatement	 
>7041	CallExpression	database_menu -> Append ( DATABASE_VIEW_TABLES , \"&View Table...\" , \"View database tables\" )
>7042	ArgumentList	DATABASE_VIEW_TABLES
>7043	Argument	\"View database tables\"
>7044	PrimaryExpression	\"View database tables\"
>7045	Argument	\"&View Table...\"
>7046	PrimaryExpression	\"&View Table...\"
>7047	Argument	DATABASE_VIEW_TABLES
>7048	Identifier	DATABASE_VIEW_TABLES
>7049	Callee	database_menu -> Append
>7050	PtrMemberAccess	database_menu -> Append
>7051	Identifier	Append
>7052	Identifier	database_menu
>7053	ExpressionStatement	 
>7054	CallExpression	database_menu -> Append ( DATABASE_CONNECT , \"&Connect...\" , \"Connect to data storage\" )
>7055	ArgumentList	DATABASE_CONNECT
>7056	Argument	\"Connect to data storage\"
>7057	PrimaryExpression	\"Connect to data storage\"
>7058	Argument	\"&Connect...\"
>7059	PrimaryExpression	\"&Connect...\"
>7060	Argument	DATABASE_CONNECT
>7061	Identifier	DATABASE_CONNECT
>7062	Callee	database_menu -> Append
>7063	PtrMemberAccess	database_menu -> Append
>7064	Identifier	Append
>7065	Identifier	database_menu
>7066	ExpressionStatement	 
>7067	CallExpression	network_menu -> AppendCheckItem ( NETWORK_GRIDSNAP , \"Snap to &Grid\" , \"Snap nodes to grid when inserting and moving\" )
>7068	ArgumentList	NETWORK_GRIDSNAP
>7069	Argument	\"Snap nodes to grid when inserting and moving\"
>7070	PrimaryExpression	\"Snap nodes to grid when inserting and moving\"
>7071	Argument	\"Snap to &Grid\"
>7072	PrimaryExpression	\"Snap to &Grid\"
>7073	Argument	NETWORK_GRIDSNAP
>7074	Identifier	NETWORK_GRIDSNAP
>7075	Callee	network_menu -> AppendCheckItem
>7076	PtrMemberAccess	network_menu -> AppendCheckItem
>7077	Identifier	AppendCheckItem
>7078	Identifier	network_menu
>7079	ExpressionStatement	 
>7080	CallExpression	network_menu -> AppendSeparator ( )
>7081	ArgumentList	 
>7082	Callee	network_menu -> AppendSeparator
>7083	PtrMemberAccess	network_menu -> AppendSeparator
>7084	Identifier	AppendSeparator
>7085	Identifier	network_menu
>7086	ExpressionStatement	 
>7087	CallExpression	network_menu -> Append ( NETWORK_INITPARAMS , \"&Initialize\tF5\" , \"Initialize network parameters (updating forwards \
>7088	ArgumentList	NETWORK_INITPARAMS
>7089	Argument	\"Initialize network parameters (updating forwards where necessary)\"
>7090	PrimaryExpression	\"Initialize network parameters (updating forwards where necessary)\"
>7091	Argument	\"&Initialize\tF5\"
>7092	PrimaryExpression	\"&Initialize\tF5\"
>7093	Argument	NETWORK_INITPARAMS
>7094	Identifier	NETWORK_INITPARAMS
>7095	Callee	network_menu -> Append
>7096	PtrMemberAccess	network_menu -> Append
>7097	Identifier	Append
>7098	Identifier	network_menu
>7099	ExpressionStatement	 
>7100	CallExpression	network_menu -> Append ( NETWORK_UPDATE , \"&Update\" , \"Evaluate network forwards (unprocessed records only)\" )
>7101	ArgumentList	NETWORK_UPDATE
>7102	Argument	\"Evaluate network forwards (unprocessed records only)\"
>7103	PrimaryExpression	\"Evaluate network forwards (unprocessed records only)\"
>7104	Argument	\"&Update\"
>7105	PrimaryExpression	\"&Update\"
>7106	Argument	NETWORK_UPDATE
>7107	Identifier	NETWORK_UPDATE
>7108	Callee	network_menu -> Append
>7109	PtrMemberAccess	network_menu -> Append
>7110	Identifier	Append
>7111	Identifier	network_menu
>7112	ExpressionStatement	 
>7113	CallExpression	network_menu -> Append ( NETWORK_EVALUATE , \"&Evaluate\tF9\" , \"Evaluate network forwards\" )
>7114	ArgumentList	NETWORK_EVALUATE
>7115	Argument	\"Evaluate network forwards\"
>7116	PrimaryExpression	\"Evaluate network forwards\"
>7117	Argument	\"&Evaluate\tF9\"
>7118	PrimaryExpression	\"&Evaluate\tF9\"
>7119	Argument	NETWORK_EVALUATE
>7120	Identifier	NETWORK_EVALUATE
>7121	Callee	network_menu -> Append
>7122	PtrMemberAccess	network_menu -> Append
>7123	Identifier	Append
>7124	Identifier	network_menu
>7125	ExpressionStatement	 
>7126	CallExpression	network_menu -> Append ( NETWORK_RESET , \"&Reset\" , \"Reset all network parameters and clear data\" )
>7127	ArgumentList	NETWORK_RESET
>7128	Argument	\"Reset all network parameters and clear data\"
>7129	PrimaryExpression	\"Reset all network parameters and clear data\"
>7130	Argument	\"&Reset\"
>7131	PrimaryExpression	\"&Reset\"
>7132	Argument	NETWORK_RESET
>7133	Identifier	NETWORK_RESET
>7134	Callee	network_menu -> Append
>7135	PtrMemberAccess	network_menu -> Append
>7136	Identifier	Append
>7137	Identifier	network_menu
>7138	ExpressionStatement	 
>7139	CallExpression	edit_menu -> Append ( EDIT_DESELECTALL , \"Deselect all\" , \"Deselect all nodes\" )
>7140	ArgumentList	EDIT_DESELECTALL
>7141	Argument	\"Deselect all nodes\"
>7142	PrimaryExpression	\"Deselect all nodes\"
>7143	Argument	\"Deselect all\"
>7144	PrimaryExpression	\"Deselect all\"
>7145	Argument	EDIT_DESELECTALL
>7146	Identifier	EDIT_DESELECTALL
>7147	Callee	edit_menu -> Append
>7148	PtrMemberAccess	edit_menu -> Append
>7149	Identifier	Append
>7150	Identifier	edit_menu
>7151	ExpressionStatement	 
>7152	CallExpression	edit_menu -> Append ( EDIT_SELECTALL , \"Select &all\tCtrl-A\" , \"Select all nodes\" )
>7153	ArgumentList	EDIT_SELECTALL
>7154	Argument	\"Select all nodes\"
>7155	PrimaryExpression	\"Select all nodes\"
>7156	Argument	\"Select &all\tCtrl-A\"
>7157	PrimaryExpression	\"Select &all\tCtrl-A\"
>7158	Argument	EDIT_SELECTALL
>7159	Identifier	EDIT_SELECTALL
>7160	Callee	edit_menu -> Append
>7161	PtrMemberAccess	edit_menu -> Append
>7162	Identifier	Append
>7163	Identifier	edit_menu
>7164	ExpressionStatement	 
>7165	CallExpression	edit_menu -> AppendSeparator ( )
>7166	ArgumentList	 
>7167	Callee	edit_menu -> AppendSeparator
>7168	PtrMemberAccess	edit_menu -> AppendSeparator
>7169	Identifier	AppendSeparator
>7170	Identifier	edit_menu
>7171	ExpressionStatement	 
>7172	CallExpression	edit_menu -> Append ( EDIT_FIND , \"&Find...\" , \"Find nodes\" )
>7173	ArgumentList	EDIT_FIND
>7174	Argument	\"Find nodes\"
>7175	PrimaryExpression	\"Find nodes\"
>7176	Argument	\"&Find...\"
>7177	PrimaryExpression	\"&Find...\"
>7178	Argument	EDIT_FIND
>7179	Identifier	EDIT_FIND
>7180	Callee	edit_menu -> Append
>7181	PtrMemberAccess	edit_menu -> Append
>7182	Identifier	Append
>7183	Identifier	edit_menu
>7184	ExpressionStatement	 
>7185	CallExpression	edit_menu -> AppendSeparator ( )
>7186	ArgumentList	 
>7187	Callee	edit_menu -> AppendSeparator
>7188	PtrMemberAccess	edit_menu -> AppendSeparator
>7189	Identifier	AppendSeparator
>7190	Identifier	edit_menu
>7191	ExpressionStatement	 
>7192	CallExpression	edit_menu -> Append ( EDIT_DELETE , \"&Delete\tDEL\" , \"Delete selected nodes\" )
>7193	ArgumentList	EDIT_DELETE
>7194	Argument	\"Delete selected nodes\"
>7195	PrimaryExpression	\"Delete selected nodes\"
>7196	Argument	\"&Delete\tDEL\"
>7197	PrimaryExpression	\"&Delete\tDEL\"
>7198	Argument	EDIT_DELETE
>7199	Identifier	EDIT_DELETE
>7200	Callee	edit_menu -> Append
>7201	PtrMemberAccess	edit_menu -> Append
>7202	Identifier	Append
>7203	Identifier	edit_menu
>7204	ExpressionStatement	 
>7205	CallExpression	edit_menu -> Append ( EDIT_PASTE , \"&Paste\tCtrl-V\" , \"Paste copied nodes\" )
>7206	ArgumentList	EDIT_PASTE
>7207	Argument	\"Paste copied nodes\"
>7208	PrimaryExpression	\"Paste copied nodes\"
>7209	Argument	\"&Paste\tCtrl-V\"
>7210	PrimaryExpression	\"&Paste\tCtrl-V\"
>7211	Argument	EDIT_PASTE
>7212	Identifier	EDIT_PASTE
>7213	Callee	edit_menu -> Append
>7214	PtrMemberAccess	edit_menu -> Append
>7215	Identifier	Append
>7216	Identifier	edit_menu
>7217	ExpressionStatement	 
>7218	CallExpression	edit_menu -> Append ( EDIT_COPY , \"Copy\tCtrl-C\" , \"Copy selected nodes\" )
>7219	ArgumentList	EDIT_COPY
>7220	Argument	\"Copy selected nodes\"
>7221	PrimaryExpression	\"Copy selected nodes\"
>7222	Argument	\"Copy\tCtrl-C\"
>7223	PrimaryExpression	\"Copy\tCtrl-C\"
>7224	Argument	EDIT_COPY
>7225	Identifier	EDIT_COPY
>7226	Callee	edit_menu -> Append
>7227	PtrMemberAccess	edit_menu -> Append
>7228	Identifier	Append
>7229	Identifier	edit_menu
>7230	ExpressionStatement	 
>7231	CallExpression	edit_menu -> Append ( EDIT_CUT , \"&Cut\tCtrl-X\" , \"Cut selected nodes\" )
>7232	ArgumentList	EDIT_CUT
>7233	Argument	\"Cut selected nodes\"
>7234	PrimaryExpression	\"Cut selected nodes\"
>7235	Argument	\"&Cut\tCtrl-X\"
>7236	PrimaryExpression	\"&Cut\tCtrl-X\"
>7237	Argument	EDIT_CUT
>7238	Identifier	EDIT_CUT
>7239	Callee	edit_menu -> Append
>7240	PtrMemberAccess	edit_menu -> Append
>7241	Identifier	Append
>7242	Identifier	edit_menu
>7243	ExpressionStatement	 
>7244	CallExpression	edit_menu -> AppendSeparator ( )
>7245	ArgumentList	 
>7246	Callee	edit_menu -> AppendSeparator
>7247	PtrMemberAccess	edit_menu -> AppendSeparator
>7248	Identifier	AppendSeparator
>7249	Identifier	edit_menu
>7250	ExpressionStatement	 
>7251	CallExpression	edit_menu -> Append ( EDIT_REDO , \"&Redo\tCtrl-Y\" , \"Redo last change\" )
>7252	ArgumentList	EDIT_REDO
>7253	Argument	\"Redo last change\"
>7254	PrimaryExpression	\"Redo last change\"
>7255	Argument	\"&Redo\tCtrl-Y\"
>7256	PrimaryExpression	\"&Redo\tCtrl-Y\"
>7257	Argument	EDIT_REDO
>7258	Identifier	EDIT_REDO
>7259	Callee	edit_menu -> Append
>7260	PtrMemberAccess	edit_menu -> Append
>7261	Identifier	Append
>7262	Identifier	edit_menu
>7263	ExpressionStatement	 
>7264	CallExpression	edit_menu -> Append ( EDIT_UNDO , \"&Undo\tCtrl-Z\" , \"Undo last change\" )
>7265	ArgumentList	EDIT_UNDO
>7266	Argument	\"Undo last change\"
>7267	PrimaryExpression	\"Undo last change\"
>7268	Argument	\"&Undo\tCtrl-Z\"
>7269	PrimaryExpression	\"&Undo\tCtrl-Z\"
>7270	Argument	EDIT_UNDO
>7271	Identifier	EDIT_UNDO
>7272	Callee	edit_menu -> Append
>7273	PtrMemberAccess	edit_menu -> Append
>7274	Identifier	Append
>7275	Identifier	edit_menu
>7276	ExpressionStatement	 
>7277	CallExpression	file_menu -> Append ( FILE_EXIT , \"E&xit\tAlt-X\" , \"Exit this program\" )
>7278	ArgumentList	FILE_EXIT
>7279	Argument	\"Exit this program\"
>7280	PrimaryExpression	\"Exit this program\"
>7281	Argument	\"E&xit\tAlt-X\"
>7282	PrimaryExpression	\"E&xit\tAlt-X\"
>7283	Argument	FILE_EXIT
>7284	Identifier	FILE_EXIT
>7285	Callee	file_menu -> Append
>7286	PtrMemberAccess	file_menu -> Append
>7287	Identifier	Append
>7288	Identifier	file_menu
>7289	ExpressionStatement	 
>7290	CallExpression	file_menu -> AppendSeparator ( )
>7291	ArgumentList	 
>7292	Callee	file_menu -> AppendSeparator
>7293	PtrMemberAccess	file_menu -> AppendSeparator
>7294	Identifier	AppendSeparator
>7295	Identifier	file_menu
>7296	ExpressionStatement	 
>7297	CallExpression	file_menu -> Append ( FILE_CLOSEALL , \"Close All\" , \"Close all dataflow networks\" )
>7298	ArgumentList	FILE_CLOSEALL
>7299	Argument	\"Close all dataflow networks\"
>7300	PrimaryExpression	\"Close all dataflow networks\"
>7301	Argument	\"Close All\"
>7302	PrimaryExpression	\"Close All\"
>7303	Argument	FILE_CLOSEALL
>7304	Identifier	FILE_CLOSEALL
>7305	Callee	file_menu -> Append
>7306	PtrMemberAccess	file_menu -> Append
>7307	Identifier	Append
>7308	Identifier	file_menu
>7309	ExpressionStatement	 
>7310	CallExpression	file_menu -> Append ( FILE_CLOSE , \"&Close\" , \"Close dataflow network\" )
>7311	ArgumentList	FILE_CLOSE
>7312	Argument	\"Close dataflow network\"
>7313	PrimaryExpression	\"Close dataflow network\"
>7314	Argument	\"&Close\"
>7315	PrimaryExpression	\"&Close\"
>7316	Argument	FILE_CLOSE
>7317	Identifier	FILE_CLOSE
>7318	Callee	file_menu -> Append
>7319	PtrMemberAccess	file_menu -> Append
>7320	Identifier	Append
>7321	Identifier	file_menu
>7322	ExpressionStatement	 
>7323	CallExpression	file_menu -> AppendSeparator ( )
>7324	ArgumentList	 
>7325	Callee	file_menu -> AppendSeparator
>7326	PtrMemberAccess	file_menu -> AppendSeparator
>7327	Identifier	AppendSeparator
>7328	Identifier	file_menu
>7329	ExpressionStatement	 
>7330	CallExpression	file_menu -> AppendSubMenu ( file_export_menu , \"&Export\" )
>7331	ArgumentList	file_export_menu
>7332	Argument	\"&Export\"
>7333	PrimaryExpression	\"&Export\"
>7334	Argument	file_export_menu
>7335	Identifier	file_export_menu
>7336	Callee	file_menu -> AppendSubMenu
>7337	PtrMemberAccess	file_menu -> AppendSubMenu
>7338	Identifier	AppendSubMenu
>7339	Identifier	file_menu
>7340	ExpressionStatement	 
>7341	CallExpression	file_export_menu -> Append ( FILE_EXPORT_SCRIPT , \"Export &Script...\" , \"Export network generation script\" )
>7342	ArgumentList	FILE_EXPORT_SCRIPT
>7343	Argument	\"Export network generation script\"
>7344	PrimaryExpression	\"Export network generation script\"
>7345	Argument	\"Export &Script...\"
>7346	PrimaryExpression	\"Export &Script...\"
>7347	Argument	FILE_EXPORT_SCRIPT
>7348	Identifier	FILE_EXPORT_SCRIPT
>7349	Callee	file_export_menu -> Append
>7350	PtrMemberAccess	file_export_menu -> Append
>7351	Identifier	Append
>7352	Identifier	file_export_menu
>7353	ExpressionStatement	 
>7354	CallExpression	file_export_menu -> Append ( FILE_EXPORT_CODE , \"Export &Code...\" , \"Export source code\" )
>7355	ArgumentList	FILE_EXPORT_CODE
>7356	Argument	\"Export source code\"
>7357	PrimaryExpression	\"Export source code\"
>7358	Argument	\"Export &Code...\"
>7359	PrimaryExpression	\"Export &Code...\"
>7360	Argument	FILE_EXPORT_CODE
>7361	Identifier	FILE_EXPORT_CODE
>7362	Callee	file_export_menu -> Append
>7363	PtrMemberAccess	file_export_menu -> Append
>7364	Identifier	Append
>7365	Identifier	file_export_menu
>7366	ExpressionStatement	 
>7367	CallExpression	file_export_menu -> Append ( FILE_EXPORT_HTML , \"Export &HTML...\" , \"Export HTML report\" )
>7368	ArgumentList	FILE_EXPORT_HTML
>7369	Argument	\"Export HTML report\"
>7370	PrimaryExpression	\"Export HTML report\"
>7371	Argument	\"Export &HTML...\"
>7372	PrimaryExpression	\"Export &HTML...\"
>7373	Argument	FILE_EXPORT_HTML
>7374	Identifier	FILE_EXPORT_HTML
>7375	Callee	file_export_menu -> Append
>7376	PtrMemberAccess	file_export_menu -> Append
>7377	Identifier	Append
>7378	Identifier	file_export_menu
>7379	ExpressionStatement	 
>7380	CallExpression	file_menu -> AppendSeparator ( )
>7381	ArgumentList	 
>7382	Callee	file_menu -> AppendSeparator
>7383	PtrMemberAccess	file_menu -> AppendSeparator
>7384	Identifier	AppendSeparator
>7385	Identifier	file_menu
>7386	ExpressionStatement	 
>7387	CallExpression	file_menu -> Append ( FILE_SAVEAS , \"Save &As...\" , \"Save dataflow network\" )
>7388	ArgumentList	FILE_SAVEAS
>7389	Argument	\"Save dataflow network\"
>7390	PrimaryExpression	\"Save dataflow network\"
>7391	Argument	\"Save &As...\"
>7392	PrimaryExpression	\"Save &As...\"
>7393	Argument	FILE_SAVEAS
>7394	Identifier	FILE_SAVEAS
>7395	Callee	file_menu -> Append
>7396	PtrMemberAccess	file_menu -> Append
>7397	Identifier	Append
>7398	Identifier	file_menu
>7399	ExpressionStatement	 
>7400	CallExpression	file_menu -> Append ( FILE_SAVE , \"&Save\tCtrl-S\" , \"Save dataflow network\" )
>7401	ArgumentList	FILE_SAVE
>7402	Argument	\"Save dataflow network\"
>7403	PrimaryExpression	\"Save dataflow network\"
>7404	Argument	\"&Save\tCtrl-S\"
>7405	PrimaryExpression	\"&Save\tCtrl-S\"
>7406	Argument	FILE_SAVE
>7407	Identifier	FILE_SAVE
>7408	Callee	file_menu -> Append
>7409	PtrMemberAccess	file_menu -> Append
>7410	Identifier	Append
>7411	Identifier	file_menu
>7412	ExpressionStatement	 
>7413	CallExpression	file_menu -> AppendSeparator ( )
>7414	ArgumentList	 
>7415	Callee	file_menu -> AppendSeparator
>7416	PtrMemberAccess	file_menu -> AppendSeparator
>7417	Identifier	AppendSeparator
>7418	Identifier	file_menu
>7419	ExpressionStatement	 
>7420	CallExpression	file_menu -> Append ( FILE_OPEN , \"&Open...\tCtrl-O\" , \"Open dataflow network\" )
>7421	ArgumentList	FILE_OPEN
>7422	Argument	\"Open dataflow network\"
>7423	PrimaryExpression	\"Open dataflow network\"
>7424	Argument	\"&Open...\tCtrl-O\"
>7425	PrimaryExpression	\"&Open...\tCtrl-O\"
>7426	Argument	FILE_OPEN
>7427	Identifier	FILE_OPEN
>7428	Callee	file_menu -> Append
>7429	PtrMemberAccess	file_menu -> Append
>7430	Identifier	Append
>7431	Identifier	file_menu
>7432	ExpressionStatement	 
>7433	CallExpression	file_menu -> Append ( FILE_NEW , \"&New\tCtrl-N\" , \"New dataflow network\" )
>7434	ArgumentList	FILE_NEW
>7435	Argument	\"New dataflow network\"
>7436	PrimaryExpression	\"New dataflow network\"
>7437	Argument	\"&New\tCtrl-N\"
>7438	PrimaryExpression	\"&New\tCtrl-N\"
>7439	Argument	FILE_NEW
>7440	Identifier	FILE_NEW
>7441	Callee	file_menu -> Append
>7442	PtrMemberAccess	file_menu -> Append
>7443	Identifier	Append
>7444	Identifier	file_menu
>7445	ExpressionStatement	 
>7446	Identifier	wxMenu
>7447	Statement	 
>7448	Statement	 
>7449	Statement	 
>7450	Statement	 
>7451	Statement	 
>7452	ExpressionStatement	 
>7453	Identifier	wxMenu
>7454	Statement	 
>7455	Statement	 
>7456	Statement	 
>7457	ExpressionStatement	 
>7458	Identifier	wxMenu
>7459	Statement	 
>7460	Statement	 
>7461	Statement	 
>7462	Statement	 
>7463	Statement	 
>7464	ExpressionStatement	 
>7465	Identifier	wxMenu
>7466	Statement	 
>7467	Statement	 
>7468	Statement	 
>7469	Statement	 
>7470	Statement	 
>7471	ExpressionStatement	 
>7472	Identifier	wxMenu
>7473	Statement	 
>7474	Statement	 
>7475	Statement	 
>7476	Statement	 
>7477	Statement	 
>7478	ExpressionStatement	 
>7479	Identifier	wxMenu
>7480	Statement	 
>7481	Statement	 
>7482	Statement	 
>7483	Statement	 
>7484	Statement	 
>7485	ExpressionStatement	 
>7486	Identifier	wxMenu
>7487	Statement	 
>7488	Statement	 
>7489	Statement	 
>7490	Statement	 
>7491	Statement	 
>7492	ExpressionStatement	 
>7493	Identifier	wxMenu
>7494	Statement	 
>7495	Statement	 
>7496	Statement	 
>7497	Statement	 
>7498	Statement	 
>7499	ExpressionStatement	 
>7500	CallExpression	SetIcon ( wxICON ( darwin ) )
>7501	ArgumentList	wxICON ( darwin )
>7502	Argument	wxICON ( darwin )
>7503	CallExpression	wxICON ( darwin )
>7504	ArgumentList	darwin
>7505	Argument	darwin
>7506	Identifier	darwin
>7507	Callee	wxICON
>7508	Identifier	wxICON
>7509	Callee	SetIcon
>7510	Identifier	SetIcon
>7602	FunctionDef	MainWindow 
>7603	ParameterList	 
>7604	CompoundStatement	 
>7605	IfStatement	if ( drwnCodeProfiler 
>7606	CompoundStatement	 
>7607	ExpressionStatement	 
>7608	CallExpression	drwnCodeProfiler 
>7609	ArgumentList	 
>7610	Callee	drwnCodeProfiler 
>7611	Identifier	drwnCodeProfiler 
>7612	Condition	 
>7613	Identifier	drwnCodeProfiler 
>7614	ForStatement	for ( int i = 0 ; i < ( int ) _canvases . size ( ) ; i ++ )
>7615	CompoundStatement	 
>7616	IfStatement	if ( _canvases [ i ] != _activeCanvas )
>7617	CompoundStatement	 
>7618	ExpressionStatement	 
>7619	ArrayIndexing	_canvases [ i ]
>7620	Identifier	i
>7621	Identifier	_canvases
>7622	Statement	 
>7623	Condition	 
>7624	EqualityExpression	_canvases [ i ] != _activeCanvas
>7625	Identifier	_activeCanvas
>7626	ArrayIndexing	_canvases [ i ]
>7627	Identifier	i
>7628	Identifier	_canvases
>7629	IncDecOp	 
>7630	IncDec	++
>7631	Identifier	i
>7632	Condition	 
>7633	RelationalExpression	i < ( int ) _canvases . size ( )
>7634	CastExpression	( int ) _canvases . size ( )
>7635	CallExpression	_canvases . size ( )
>7636	ArgumentList	 
>7637	Callee	_canvases . size
>7638	MemberAccess	_canvases . size
>7639	Identifier	size
>7640	Identifier	_canvases
>7641	CastTarget	int
>7642	Identifier	i
>7643	ForInit	 
>7644	IdentifierDeclStatement	int i = 0 ;
>7645	IdentifierDecl	i = 0
>7646	AssignmentExpr	i = 0
>7647	PrimaryExpression	0
>7648	Identifier	i
>7649	Identifier	i
>7650	IdentifierDeclType	int
>7651	ExpressionStatement	 
>7652	CallExpression	clearCopyBuffer ( )
>7653	ArgumentList	 
>7654	Callee	clearCopyBuffer
>7655	Identifier	clearCopyBuffer
>7656	ExpressionStatement	 
>7657	Identifier	_statusBar
>7658	IfStatement	if ( _statusBar != NULL )
>7659	Statement	 
>7660	Condition	 
>7661	EqualityExpression	_statusBar != NULL
>7662	Identifier	NULL
>7663	Identifier	_statusBar
>7664	ExpressionStatement	 
>7665	CallExpression	SetStatusBar ( NULL )
>7666	ArgumentList	NULL
>7667	Argument	NULL
>7668	Identifier	NULL
>7669	Callee	SetStatusBar
>7670	Identifier	SetStatusBar
>7683	FunctionDef	MainWindow 
>7684	ParameterList	wxIdleEvent & event
>7685	Parameter	 
>7686	Identifier	event
>7687	ParameterType	wxIdleEvent &
>7688	ReturnType	void
>7689	CompoundStatement	 
>7690	ExpressionStatement	 
>7691	CallExpression	drwnDataCache 
>7692	ArgumentList	 
>7693	Callee	drwnDataCache 
>7694	MemberAccess	drwnDataCache 
>7695	Identifier	idleFlush
>7696	CallExpression	drwnDataCache 
>7697	ArgumentList	 
>7698	Callee	drwnDataCache 
>7699	Identifier	drwnDataCache 
>7705	FunctionDef	MainWindow 
>7706	ParameterList	wxCloseEvent & event
>7707	Parameter	 
>7708	Identifier	event
>7709	ParameterType	wxCloseEvent &
>7710	ReturnType	void
>7711	CompoundStatement	 
>7712	ExpressionStatement	 
>7713	CallExpression	event . Skip ( )
>7714	ArgumentList	 
>7715	Callee	event . Skip
>7716	MemberAccess	event . Skip
>7717	Identifier	Skip
>7718	Identifier	event
>7723	FunctionDef	MainWindow 
>7724	ParameterList	wxCommandEvent & event
>7725	Parameter	 
>7726	Identifier	event
>7727	ParameterType	wxCommandEvent &
>7728	ReturnType	void
>7729	CompoundStatement	 
>7730	ExpressionStatement	 
>7731	CallExpression	Update ( )
>7732	ArgumentList	 
>7733	Callee	Update
>7734	Identifier	Update
>7735	ExpressionStatement	 
>7736	CallExpression	Refresh ( false )
>7737	ArgumentList	false
>7738	Argument	false
>7739	Identifier	false
>7740	Callee	Refresh
>7741	Identifier	Refresh
>7742	IfStatement	if ( event . GetId ( ) == FILE_NEW )
>7743	ElseStatement	else
>7744	IfStatement	if ( event . GetId ( ) == FILE_OPEN )
>7745	ElseStatement	else
>7746	IfStatement	if ( ( event . GetId ( ) == FILE_SAVE ) && ! _activeCanvas -> _filename . empty ( ) )
>7747	ElseStatement	else
>7748	IfStatement	if ( ( event . GetId ( ) == FILE_SAVEAS ) || ( event . GetId ( ) == FILE_SAVE ) )
>7749	ElseStatement	else
>7750	IfStatement	if ( event . GetId ( ) == FILE_EXPORT_HTML )
>7751	ElseStatement	else
>7752	IfStatement	if ( event . GetId ( ) == FILE_EXPORT_HTML )
>7753	ElseStatement	else
>7754	IfStatement	if ( event . GetId ( ) == FILE_EXPORT_SCRIPT )
>7755	ElseStatement	else
>7756	IfStatement	if ( event . GetId ( ) == FILE_CLOSE )
>7757	ElseStatement	else
>7758	IfStatement	if ( event . GetId ( ) == FILE_CLOSEALL )
>7759	ElseStatement	else
>7760	IfStatement	if ( event . GetId ( ) == FILE_EXIT )
>7761	CompoundStatement	 
>7762	ExpressionStatement	 
>7763	CallExpression	Close ( true )
>7764	ArgumentList	true
>7765	Argument	true
>7766	Identifier	true
>7767	Callee	Close
>7768	Identifier	Close
>7769	Condition	 
>7770	EqualityExpression	event . GetId ( ) == FILE_EXIT
>7771	Identifier	FILE_EXIT
>7772	CallExpression	event . GetId ( )
>7773	ArgumentList	 
>7774	Callee	event . GetId
>7775	MemberAccess	event . GetId
>7776	Identifier	GetId
>7777	Identifier	event
>7778	CompoundStatement	 
>7779	ExpressionStatement	 
>7780	CallExpression	updateGUIElements ( )
>7781	ArgumentList	 
>7782	Callee	updateGUIElements
>7783	Identifier	updateGUIElements
>7784	ExpressionStatement	 
>7785	AssignmentExpr	_activeCanvas = _canvases . back ( )
>7786	CallExpression	_canvases . back ( )
>7787	ArgumentList	 
>7788	Callee	_canvases . back
>7789	MemberAccess	_canvases . back
>7790	Identifier	back
>7791	Identifier	_canvases
>7792	Identifier	_activeCanvas
>7793	ExpressionStatement	 
>7794	Identifier	_activeCanvas
>7795	Statement	 
>7796	ExpressionStatement	 
>7797	CallExpression	_splitterWnd -> ReplaceWindow ( _activeCanvas , _canvases . back ( ) )
>7798	ArgumentList	_activeCanvas
>7799	Argument	_canvases . back ( )
>7800	CallExpression	_canvases . back ( )
>7801	ArgumentList	 
>7802	Callee	_canvases . back
>7803	MemberAccess	_canvases . back
>7804	Identifier	back
>7805	Identifier	_canvases
>7806	Argument	_activeCanvas
>7807	Identifier	_activeCanvas
>7808	Callee	_splitterWnd -> ReplaceWindow
>7809	PtrMemberAccess	_splitterWnd -> ReplaceWindow
>7810	Identifier	ReplaceWindow
>7811	Identifier	_splitterWnd
>7812	ExpressionStatement	 
>7813	CallExpression	_canvases . push_back ( new MainCanvas ( _splitterWnd ) )
>7814	ArgumentList	_splitterWnd
>7815	Argument	_splitterWnd
>7816	Identifier	_splitterWnd
>7817	Callee	_canvases . push_back
>7818	MemberAccess	_canvases . push_back
>7819	Identifier	push_back
>7820	Identifier	_canvases
>7821	ExpressionStatement	 
>7822	CallExpression	_canvases . clear ( )
>7823	ArgumentList	 
>7824	Callee	_canvases . clear
>7825	MemberAccess	_canvases . clear
>7826	Identifier	clear
>7827	Identifier	_canvases
>7828	ForStatement	for ( vector < MainCanvas * > 
>7829	CompoundStatement	 
>7830	IfStatement	if ( * it != _activeCanvas )
>7831	CompoundStatement	 
>7832	ExpressionStatement	 
>7833	UnaryOp	* it
>7834	Identifier	it
>7835	UnaryOperator	*
>7836	Statement	 
>7837	Condition	 
>7838	EqualityExpression	* it != _activeCanvas
>7839	Identifier	_activeCanvas
>7840	UnaryOp	* it
>7841	Identifier	it
>7842	UnaryOperator	*
>7843	IncDecOp	 
>7844	IncDec	++
>7845	Identifier	it
>7846	Condition	 
>7847	EqualityExpression	it != _canvases . end ( )
>7848	CallExpression	_canvases . end ( )
>7849	ArgumentList	 
>7850	Callee	_canvases . end
>7851	MemberAccess	_canvases . end
>7852	Identifier	end
>7853	Identifier	_canvases
>7854	Identifier	it
>7855	ForInit	 
>7856	IdentifierDeclStatement	vector < MainCanvas * > 
>7857	IdentifierDecl	it = _canvases . begin ( )
>7858	AssignmentExpr	it = _canvases . begin ( )
>7859	CallExpression	_canvases . begin ( )
>7860	ArgumentList	 
>7861	Callee	_canvases . begin
>7862	MemberAccess	_canvases . begin
>7863	Identifier	begin
>7864	Identifier	_canvases
>7865	Identifier	it
>7866	Identifier	it
>7867	IdentifierDeclType	vector < MainCanvas * > 
>7868	Condition	 
>7869	EqualityExpression	event . GetId ( ) == FILE_CLOSEALL
>7870	Identifier	FILE_CLOSEALL
>7871	CallExpression	event . GetId ( )
>7872	ArgumentList	 
>7873	Callee	event . GetId
>7874	MemberAccess	event . GetId
>7875	Identifier	GetId
>7876	Identifier	event
>7877	CompoundStatement	 
>7878	ExpressionStatement	 
>7879	CallExpression	updateGUIElements ( )
>7880	ArgumentList	 
>7881	Callee	updateGUIElements
>7882	Identifier	updateGUIElements
>7883	ExpressionStatement	 
>7884	AssignmentExpr	_activeCanvas = _canvases . back ( )
>7885	CallExpression	_canvases . back ( )
>7886	ArgumentList	 
>7887	Callee	_canvases . back
>7888	MemberAccess	_canvases . back
>7889	Identifier	back
>7890	Identifier	_canvases
>7891	Identifier	_activeCanvas
>7892	ExpressionStatement	 
>7893	Identifier	_activeCanvas
>7894	Statement	 
>7895	ExpressionStatement	 
>7896	CallExpression	_splitterWnd -> ReplaceWindow ( _activeCanvas , _canvases . back ( ) )
>7897	ArgumentList	_activeCanvas
>7898	Argument	_canvases . back ( )
>7899	CallExpression	_canvases . back ( )
>7900	ArgumentList	 
>7901	Callee	_canvases . back
>7902	MemberAccess	_canvases . back
>7903	Identifier	back
>7904	Identifier	_canvases
>7905	Argument	_activeCanvas
>7906	Identifier	_activeCanvas
>7907	Callee	_splitterWnd -> ReplaceWindow
>7908	PtrMemberAccess	_splitterWnd -> ReplaceWindow
>7909	Identifier	ReplaceWindow
>7910	Identifier	_splitterWnd
>7911	IfStatement	if ( _canvases . size ( ) == 1 )
>7912	ElseStatement	else
>7913	CompoundStatement	 
>7914	ForStatement	for ( vector < MainCanvas * > 
>7915	CompoundStatement	 
>7916	IfStatement	if ( * it == _activeCanvas )
>7917	CompoundStatement	 
>7918	BreakStatement	 
>7919	ExpressionStatement	 
>7920	CallExpression	_canvases . erase ( it )
>7921	ArgumentList	it
>7922	Argument	it
>7923	Identifier	it
>7924	Callee	_canvases . erase
>7925	MemberAccess	_canvases . erase
>7926	Identifier	erase
>7927	Identifier	_canvases
>7928	Condition	 
>7929	EqualityExpression	* it == _activeCanvas
>7930	Identifier	_activeCanvas
>7931	UnaryOp	* it
>7932	Identifier	it
>7933	UnaryOperator	*
>7934	IncDecOp	 
>7935	IncDec	++
>7936	Identifier	it
>7937	Condition	 
>7938	EqualityExpression	it != _canvases . end ( )
>7939	CallExpression	_canvases . end ( )
>7940	ArgumentList	 
>7941	Callee	_canvases . end
>7942	MemberAccess	_canvases . end
>7943	Identifier	end
>7944	Identifier	_canvases
>7945	Identifier	it
>7946	ForInit	 
>7947	IdentifierDeclStatement	vector < MainCanvas * > 
>7948	IdentifierDecl	it = _canvases . begin ( )
>7949	AssignmentExpr	it = _canvases . begin ( )
>7950	CallExpression	_canvases . begin ( )
>7951	ArgumentList	 
>7952	Callee	_canvases . begin
>7953	MemberAccess	_canvases . begin
>7954	Identifier	begin
>7955	Identifier	_canvases
>7956	Identifier	it
>7957	Identifier	it
>7958	IdentifierDeclType	vector < MainCanvas * > 
>7959	CompoundStatement	 
>7960	ExpressionStatement	 
>7961	AssignmentExpr	_canvases [ 0 ] = new MainCanvas ( _splitterWnd )
>7962	Identifier	_splitterWnd
>7963	ArrayIndexing	_canvases [ 0 ]
>7964	PrimaryExpression	0
>7965	Identifier	_canvases
>7966	Condition	 
>7967	EqualityExpression	_canvases . size ( ) == 1
>7968	PrimaryExpression	1
>7969	CallExpression	_canvases . size ( )
>7970	ArgumentList	 
>7971	Callee	_canvases . size
>7972	MemberAccess	_canvases . size
>7973	Identifier	size
>7974	Identifier	_canvases
>7975	Condition	 
>7976	EqualityExpression	event . GetId ( ) == FILE_CLOSE
>7977	Identifier	FILE_CLOSE
>7978	CallExpression	event . GetId ( )
>7979	ArgumentList	 
>7980	Callee	event . GetId
>7981	MemberAccess	event . GetId
>7982	Identifier	GetId
>7983	Identifier	event
>7984	CompoundStatement	 
>7985	ExpressionStatement	 
>7986	Identifier	NOT_IMPLEMENTED_YET
>7987	Condition	 
>7988	EqualityExpression	event . GetId ( ) == FILE_EXPORT_SCRIPT
>7989	Identifier	FILE_EXPORT_SCRIPT
>7990	CallExpression	event . GetId ( )
>7991	ArgumentList	 
>7992	Callee	event . GetId
>7993	MemberAccess	event . GetId
>7994	Identifier	GetId
>7995	Identifier	event
>7996	CompoundStatement	 
>7997	ExpressionStatement	 
>7998	Identifier	NOT_IMPLEMENTED_YET
>7999	Condition	 
>8000	EqualityExpression	event . GetId ( ) == FILE_EXPORT_HTML
>8001	Identifier	FILE_EXPORT_HTML
>8002	CallExpression	event . GetId ( )
>8003	ArgumentList	 
>8004	Callee	event . GetId
>8005	MemberAccess	event . GetId
>8006	Identifier	GetId
>8007	Identifier	event
>8008	CompoundStatement	 
>8009	IfStatement	if ( dlg . ShowModal ( ) == wxID_OK )
>8010	CompoundStatement	 
>8011	ExpressionStatement	 
>8012	CallExpression	report . write ( dlg . GetPath ( ) . c_str ( ) , graph )
>8013	ArgumentList	dlg . GetPath ( ) . c_str ( )
>8014	Argument	graph
>8015	Identifier	graph
>8016	Argument	dlg . GetPath ( ) . c_str ( )
>8017	CallExpression	dlg . GetPath ( ) . c_str ( )
>8018	ArgumentList	 
>8019	Callee	dlg . GetPath ( ) . c_str
>8020	MemberAccess	dlg . GetPath ( ) . c_str
>8021	Identifier	c_str
>8022	CallExpression	dlg . GetPath ( )
>8023	ArgumentList	 
>8024	Callee	dlg . GetPath
>8025	MemberAccess	dlg . GetPath
>8026	Identifier	GetPath
>8027	Identifier	dlg
>8028	Callee	report . write
>8029	MemberAccess	report . write
>8030	Identifier	write
>8031	Identifier	report
>8032	IdentifierDeclStatement	 
>8033	IdentifierDecl	report
>8034	Identifier	report
>8035	IdentifierDeclType	drwnHTMLReport
>8036	Condition	 
>8037	EqualityExpression	dlg . ShowModal ( ) == wxID_OK
>8038	Identifier	wxID_OK
>8039	CallExpression	dlg . ShowModal ( )
>8040	ArgumentList	 
>8041	Callee	dlg . ShowModal
>8042	MemberAccess	dlg . ShowModal
>8043	Identifier	ShowModal
>8044	Identifier	dlg
>8045	IdentifierDeclStatement	 
>8046	IdentifierDecl	dlg ( this , string ( \"Export HTML for \" ) + graph -> getTitle ( ) + string ( \" as
>8047	Expression	this , string ( \"Export HTML for \" ) + graph -> getTitle ( ) + string ( \" as
>8048	Expression	string ( \"Export HTML for \" ) + graph -> getTitle ( ) + string ( \" as
>8049	Expression	\"\" , filenameProposal , \"HTML Files (*.html)|*.html|All Files (*.*)|*.*\" , wxFD_SAVE | wxFD_CHANGE_DIR
>8050	Expression	filenameProposal , \"HTML Files (*.html)|*.html|All Files (*.*)|*.*\" , wxFD_SAVE | wxFD_CHANGE_DIR
>8051	Expression	\"HTML Files (*.html)|*.html|All Files (*.*)|*.*\" , wxFD_SAVE | wxFD_CHANGE_DIR
>8052	InclusiveOrExpression	wxFD_SAVE | wxFD_CHANGE_DIR
>8053	Identifier	wxFD_CHANGE_DIR
>8054	Identifier	wxFD_SAVE
>8055	PrimaryExpression	\"HTML Files (*.html)|*.html|All Files (*.*)|*.*\"
>8056	Identifier	filenameProposal
>8057	PrimaryExpression	\"\"
>8058	AdditiveExpression	string ( \"Export HTML for \" ) + graph -> getTitle ( ) + string ( \" as
>8059	AdditiveExpression	graph -> getTitle ( ) + string ( \" as
>8060	CallExpression	string ( \" as
>8061	ArgumentList	\" as
>8062	Argument	\" as
>8063	PrimaryExpression	\" as
>8064	Callee	string
>8065	Identifier	string
>8066	CallExpression	graph -> getTitle ( )
>8067	ArgumentList	 
>8068	Callee	graph -> getTitle
>8069	PtrMemberAccess	graph -> getTitle
>8070	Identifier	getTitle
>8071	Identifier	graph
>8072	CallExpression	string ( \"Export HTML for \" )
>8073	ArgumentList	\"Export HTML for \"
>8074	Argument	\"Export HTML for \"
>8075	PrimaryExpression	\"Export HTML for \"
>8076	Callee	string
>8077	Identifier	string
>8078	Identifier	this
>8079	Identifier	dlg
>8080	IdentifierDeclType	wxFileDialog
>8081	IfStatement	if ( ! _activeCanvas -> _filename . empty ( ) )
>8082	CompoundStatement	 
>8083	ExpressionStatement	 
>8084	AssignmentExpr	filenameProposal = drwn 
>8085	CallExpression	drwn 
>8086	ArgumentList	_activeCanvas -> _filename
>8087	Argument	string ( \".html\" )
>8088	CallExpression	string ( \".html\" )
>8089	ArgumentList	\".html\"
>8090	Argument	\".html\"
>8091	PrimaryExpression	\".html\"
>8092	Callee	string
>8093	Identifier	string
>8094	Argument	_activeCanvas -> _filename
>8095	PtrMemberAccess	_activeCanvas -> _filename
>8096	Identifier	_filename
>8097	Identifier	_activeCanvas
>8098	Callee	drwn 
>8099	Identifier	drwn 
>8100	Identifier	filenameProposal
>8101	Condition	 
>8102	UnaryOp	! _activeCanvas -> _filename . empty ( )
>8103	CallExpression	_activeCanvas -> _filename . empty ( )
>8104	ArgumentList	 
>8105	Callee	_activeCanvas -> _filename . empty
>8106	MemberAccess	_activeCanvas -> _filename . empty
>8107	Identifier	empty
>8108	PtrMemberAccess	_activeCanvas -> _filename
>8109	Identifier	_filename
>8110	Identifier	_activeCanvas
>8111	UnaryOperator	!
>8112	IdentifierDeclStatement	 
>8113	IdentifierDecl	filenameProposal
>8114	Identifier	filenameProposal
>8115	IdentifierDeclType	string
>8116	IdentifierDeclStatement	 
>8117	IdentifierDecl	* graph = _activeCanvas -> _graph
>8118	AssignmentExpr	* graph = _activeCanvas -> _graph
>8119	PtrMemberAccess	_activeCanvas -> _graph
>8120	Identifier	_graph
>8121	Identifier	_activeCanvas
>8122	Identifier	graph
>8123	Identifier	graph
>8124	IdentifierDeclType	drwnGraph *
>8125	Condition	 
>8126	EqualityExpression	event . GetId ( ) == FILE_EXPORT_HTML
>8127	Identifier	FILE_EXPORT_HTML
>8128	CallExpression	event . GetId ( )
>8129	ArgumentList	 
>8130	Callee	event . GetId
>8131	MemberAccess	event . GetId
>8132	Identifier	GetId
>8133	Identifier	event
>8134	CompoundStatement	 
>8135	IfStatement	if ( dlg . ShowModal ( ) == wxID_OK )
>8136	CompoundStatement	 
>8137	ExpressionStatement	 
>8138	CallExpression	graph -> write ( dlg . GetPath ( ) . c_str ( ) )
>8139	ArgumentList	dlg . GetPath ( ) . c_str ( )
>8140	Argument	dlg . GetPath ( ) . c_str ( )
>8141	CallExpression	dlg . GetPath ( ) . c_str ( )
>8142	ArgumentList	 
>8143	Callee	dlg . GetPath ( ) . c_str
>8144	MemberAccess	dlg . GetPath ( ) . c_str
>8145	Identifier	c_str
>8146	CallExpression	dlg . GetPath ( )
>8147	ArgumentList	 
>8148	Callee	dlg . GetPath
>8149	MemberAccess	dlg . GetPath
>8150	Identifier	GetPath
>8151	Identifier	dlg
>8152	Callee	graph -> write
>8153	PtrMemberAccess	graph -> write
>8154	Identifier	write
>8155	Identifier	graph
>8156	ExpressionStatement	 
>8157	AssignmentExpr	_activeCanvas -> _filename = dlg . GetPath ( )
>8158	CallExpression	dlg . GetPath ( )
>8159	ArgumentList	 
>8160	Callee	dlg . GetPath
>8161	MemberAccess	dlg . GetPath
>8162	Identifier	GetPath
>8163	Identifier	dlg
>8164	PtrMemberAccess	_activeCanvas -> _filename
>8165	Identifier	_filename
>8166	Identifier	_activeCanvas
>8167	Condition	 
>8168	EqualityExpression	dlg . ShowModal ( ) == wxID_OK
>8169	Identifier	wxID_OK
>8170	CallExpression	dlg . ShowModal ( )
>8171	ArgumentList	 
>8172	Callee	dlg . ShowModal
>8173	MemberAccess	dlg . ShowModal
>8174	Identifier	ShowModal
>8175	Identifier	dlg
>8176	IdentifierDeclStatement	 
>8177	IdentifierDecl	dlg ( this , string ( \"Save \" ) + graph -> getTitle ( ) + string ( \" as
>8178	Expression	this , string ( \"Save \" ) + graph -> getTitle ( ) + string ( \" as
>8179	Expression	string ( \"Save \" ) + graph -> getTitle ( ) + string ( \" as
>8180	Expression	\"\" , _activeCanvas -> _filename , \"XML Files (*.xml)|*.xml|All Files (*.*)|*.*\" , wxFD_SAVE | wxFD_CHANGE_DIR
>8181	Expression	_activeCanvas -> _filename , \"XML Files (*.xml)|*.xml|All Files (*.*)|*.*\" , wxFD_SAVE | wxFD_CHANGE_DIR
>8182	Expression	\"XML Files (*.xml)|*.xml|All Files (*.*)|*.*\" , wxFD_SAVE | wxFD_CHANGE_DIR
>8183	InclusiveOrExpression	wxFD_SAVE | wxFD_CHANGE_DIR
>8184	Identifier	wxFD_CHANGE_DIR
>8185	Identifier	wxFD_SAVE
>8186	PrimaryExpression	\"XML Files (*.xml)|*.xml|All Files (*.*)|*.*\"
>8187	PtrMemberAccess	_activeCanvas -> _filename
>8188	Identifier	_filename
>8189	Identifier	_activeCanvas
>8190	PrimaryExpression	\"\"
>8191	AdditiveExpression	string ( \"Save \" ) + graph -> getTitle ( ) + string ( \" as
>8192	AdditiveExpression	graph -> getTitle ( ) + string ( \" as
>8193	CallExpression	string ( \" as
>8194	ArgumentList	\" as
>8195	Argument	\" as
>8196	PrimaryExpression	\" as
>8197	Callee	string
>8198	Identifier	string
>8199	CallExpression	graph -> getTitle ( )
>8200	ArgumentList	 
>8201	Callee	graph -> getTitle
>8202	PtrMemberAccess	graph -> getTitle
>8203	Identifier	getTitle
>8204	Identifier	graph
>8205	CallExpression	string ( \"Save \" )
>8206	ArgumentList	\"Save \"
>8207	Argument	\"Save \"
>8208	PrimaryExpression	\"Save \"
>8209	Callee	string
>8210	Identifier	string
>8211	Identifier	this
>8212	Identifier	dlg
>8213	IdentifierDeclType	wxFileDialog
>8214	IdentifierDeclStatement	 
>8215	IdentifierDecl	* graph = _activeCanvas -> _graph
>8216	AssignmentExpr	* graph = _activeCanvas -> _graph
>8217	PtrMemberAccess	_activeCanvas -> _graph
>8218	Identifier	_graph
>8219	Identifier	_activeCanvas
>8220	Identifier	graph
>8221	Identifier	graph
>8222	IdentifierDeclType	drwnGraph *
>8223	Condition	 
>8224	OrExpression	( event . GetId ( ) == FILE_SAVEAS ) || ( event . GetId ( ) == FILE_SAVE )
>8225	EqualityExpression	event . GetId ( ) == FILE_SAVE
>8226	Identifier	FILE_SAVE
>8227	CallExpression	event . GetId ( )
>8228	ArgumentList	 
>8229	Callee	event . GetId
>8230	MemberAccess	event . GetId
>8231	Identifier	GetId
>8232	Identifier	event
>8233	EqualityExpression	event . GetId ( ) == FILE_SAVEAS
>8234	Identifier	FILE_SAVEAS
>8235	CallExpression	event . GetId ( )
>8236	ArgumentList	 
>8237	Callee	event . GetId
>8238	MemberAccess	event . GetId
>8239	Identifier	GetId
>8240	Identifier	event
>8241	CompoundStatement	 
>8242	ExpressionStatement	 
>8243	CallExpression	_activeCanvas -> _graph -> write ( _activeCanvas -> _filename . c_str ( ) )
>8244	ArgumentList	_activeCanvas -> _filename . c_str ( )
>8245	Argument	_activeCanvas -> _filename . c_str ( )
>8246	CallExpression	_activeCanvas -> _filename . c_str ( )
>8247	ArgumentList	 
>8248	Callee	_activeCanvas -> _filename . c_str
>8249	MemberAccess	_activeCanvas -> _filename . c_str
>8250	Identifier	c_str
>8251	PtrMemberAccess	_activeCanvas -> _filename
>8252	Identifier	_filename
>8253	Identifier	_activeCanvas
>8254	Callee	_activeCanvas -> _graph -> write
>8255	PtrMemberAccess	_activeCanvas -> _graph -> write
>8256	Identifier	write
>8257	PtrMemberAccess	_activeCanvas -> _graph
>8258	Identifier	_graph
>8259	Identifier	_activeCanvas
>8260	Condition	 
>8261	AndExpression	( event . GetId ( ) == FILE_SAVE ) && ! _activeCanvas -> _filename . empty ( )
>8262	UnaryOp	! _activeCanvas -> _filename . empty ( )
>8263	CallExpression	_activeCanvas -> _filename . empty ( )
>8264	ArgumentList	 
>8265	Callee	_activeCanvas -> _filename . empty
>8266	MemberAccess	_activeCanvas -> _filename . empty
>8267	Identifier	empty
>8268	PtrMemberAccess	_activeCanvas -> _filename
>8269	Identifier	_filename
>8270	Identifier	_activeCanvas
>8271	UnaryOperator	!
>8272	EqualityExpression	event . GetId ( ) == FILE_SAVE
>8273	Identifier	FILE_SAVE
>8274	CallExpression	event . GetId ( )
>8275	ArgumentList	 
>8276	Callee	event . GetId
>8277	MemberAccess	event . GetId
>8278	Identifier	GetId
>8279	Identifier	event
>8280	CompoundStatement	 
>8281	IfStatement	if ( dlg . ShowModal ( ) == wxID_OK )
>8282	CompoundStatement	 
>8283	ExpressionStatement	 
>8284	CallExpression	openGraphFile ( dlg . GetPath ( ) . c_str ( ) )
>8285	ArgumentList	dlg . GetPath ( ) . c_str ( )
>8286	Argument	dlg . GetPath ( ) . c_str ( )
>8287	CallExpression	dlg . GetPath ( ) . c_str ( )
>8288	ArgumentList	 
>8289	Callee	dlg . GetPath ( ) . c_str
>8290	MemberAccess	dlg . GetPath ( ) . c_str
>8291	Identifier	c_str
>8292	CallExpression	dlg . GetPath ( )
>8293	ArgumentList	 
>8294	Callee	dlg . GetPath
>8295	MemberAccess	dlg . GetPath
>8296	Identifier	GetPath
>8297	Identifier	dlg
>8298	Callee	openGraphFile
>8299	Identifier	openGraphFile
>8300	Condition	 
>8301	EqualityExpression	dlg . ShowModal ( ) == wxID_OK
>8302	Identifier	wxID_OK
>8303	CallExpression	dlg . ShowModal ( )
>8304	ArgumentList	 
>8305	Callee	dlg . ShowModal
>8306	MemberAccess	dlg . ShowModal
>8307	Identifier	ShowModal
>8308	Identifier	dlg
>8309	IdentifierDeclStatement	 
>8310	IdentifierDecl	dlg ( this , \"Open data flow graph\" , \"\" , \"\" , \"XML Files (*.xml)|*.xml|All Files (*.*)|*.*\" , wxFD_OPEN | wxFD_\
>8311	Expression	this , \"Open data flow graph\" , \"\" , \"\" , \"XML Files (*.xml)|*.xml|All Files (*.*)|*.*\" , wxFD_OPEN | wxFD_CHANGE_\
>8312	Expression	\"Open data flow graph\" , \"\" , \"\" , \"XML Files (*.xml)|*.xml|All Files (*.*)|*.*\" , wxFD_OPEN | wxFD_CHANGE_DIR
>8313	Expression	\"\" , \"\" , \"XML Files (*.xml)|*.xml|All Files (*.*)|*.*\" , wxFD_OPEN | wxFD_CHANGE_DIR
>8314	Expression	\"\" , \"XML Files (*.xml)|*.xml|All Files (*.*)|*.*\" , wxFD_OPEN | wxFD_CHANGE_DIR
>8315	Expression	\"XML Files (*.xml)|*.xml|All Files (*.*)|*.*\" , wxFD_OPEN | wxFD_CHANGE_DIR
>8316	InclusiveOrExpression	wxFD_OPEN | wxFD_CHANGE_DIR
>8317	Identifier	wxFD_CHANGE_DIR
>8318	Identifier	wxFD_OPEN
>8319	PrimaryExpression	\"XML Files (*.xml)|*.xml|All Files (*.*)|*.*\"
>8320	PrimaryExpression	\"\"
>8321	PrimaryExpression	\"\"
>8322	PrimaryExpression	\"Open data flow graph\"
>8323	Identifier	this
>8324	Identifier	dlg
>8325	IdentifierDeclType	wxFileDialog
>8326	Condition	 
>8327	EqualityExpression	event . GetId ( ) == FILE_OPEN
>8328	Identifier	FILE_OPEN
>8329	CallExpression	event . GetId ( )
>8330	ArgumentList	 
>8331	Callee	event . GetId
>8332	MemberAccess	event . GetId
>8333	Identifier	GetId
>8334	Identifier	event
>8335	CompoundStatement	 
>8336	ExpressionStatement	 
>8337	CallExpression	updateGUIElements ( )
>8338	ArgumentList	 
>8339	Callee	updateGUIElements
>8340	Identifier	updateGUIElements
>8341	ExpressionStatement	 
>8342	AssignmentExpr	_activeCanvas = _canvases . back ( )
>8343	CallExpression	_canvases . back ( )
>8344	ArgumentList	 
>8345	Callee	_canvases . back
>8346	MemberAccess	_canvases . back
>8347	Identifier	back
>8348	Identifier	_canvases
>8349	Identifier	_activeCanvas
>8350	ExpressionStatement	 
>8351	CallExpression	_splitterWnd -> ReplaceWindow ( _activeCanvas , _canvases . back ( ) )
>8352	ArgumentList	_activeCanvas
>8353	Argument	_canvases . back ( )
>8354	CallExpression	_canvases . back ( )
>8355	ArgumentList	 
>8356	Callee	_canvases . back
>8357	MemberAccess	_canvases . back
>8358	Identifier	back
>8359	Identifier	_canvases
>8360	Argument	_activeCanvas
>8361	Identifier	_activeCanvas
>8362	Callee	_splitterWnd -> ReplaceWindow
>8363	PtrMemberAccess	_splitterWnd -> ReplaceWindow
>8364	Identifier	ReplaceWindow
>8365	Identifier	_splitterWnd
>8366	ExpressionStatement	 
>8367	CallExpression	_canvases . push_back ( new MainCanvas ( _splitterWnd ) )
>8368	ArgumentList	_splitterWnd
>8369	Argument	_splitterWnd
>8370	Identifier	_splitterWnd
>8371	Callee	_canvases . push_back
>8372	MemberAccess	_canvases . push_back
>8373	Identifier	push_back
>8374	Identifier	_canvases
>8375	Condition	 
>8376	EqualityExpression	event . GetId ( ) == FILE_NEW
>8377	Identifier	FILE_NEW
>8378	CallExpression	event . GetId ( )
>8379	ArgumentList	 
>8380	Callee	event . GetId
>8381	MemberAccess	event . GetId
>8382	Identifier	GetId
>8383	Identifier	event
>8425	FunctionDef	MainWindow 
>8426	ParameterList	wxCommandEvent & event
>8427	Parameter	 
>8428	Identifier	event
>8429	ParameterType	wxCommandEvent &
>8430	ReturnType	void
>8431	CompoundStatement	 
>8432	ExpressionStatement	 
>8433	CallExpression	Update ( )
>8434	ArgumentList	 
>8435	Callee	Update
>8436	Identifier	Update
>8437	ExpressionStatement	 
>8438	CallExpression	Refresh ( false )
>8439	ArgumentList	false
>8440	Argument	false
>8441	Identifier	false
>8442	Callee	Refresh
>8443	Identifier	Refresh
>8444	IfStatement	if ( event . GetId ( ) == EDIT_CUT )
>8445	ElseStatement	else
>8446	IfStatement	if ( event . GetId ( ) == EDIT_COPY )
>8447	ElseStatement	else
>8448	IfStatement	if ( event . GetId ( ) == EDIT_PASTE )
>8449	ElseStatement	else
>8450	IfStatement	if ( event . GetId ( ) == EDIT_DELETE )
>8451	ElseStatement	else
>8452	IfStatement	if ( event . GetId ( ) == EDIT_FIND )
>8453	ElseStatement	else
>8454	IfStatement	if ( event . GetId ( ) == EDIT_SELECTALL )
>8455	ElseStatement	else
>8456	IfStatement	if ( event . GetId ( ) == EDIT_DESELECTALL )
>8457	CompoundStatement	 
>8458	ExpressionStatement	 
>8459	CallExpression	_activeCanvas -> deselectAllNodes ( )
>8460	ArgumentList	 
>8461	Callee	_activeCanvas -> deselectAllNodes
>8462	PtrMemberAccess	_activeCanvas -> deselectAllNodes
>8463	Identifier	deselectAllNodes
>8464	Identifier	_activeCanvas
>8465	Condition	 
>8466	EqualityExpression	event . GetId ( ) == EDIT_DESELECTALL
>8467	Identifier	EDIT_DESELECTALL
>8468	CallExpression	event . GetId ( )
>8469	ArgumentList	 
>8470	Callee	event . GetId
>8471	MemberAccess	event . GetId
>8472	Identifier	GetId
>8473	Identifier	event
>8474	CompoundStatement	 
>8475	ExpressionStatement	 
>8476	CallExpression	_activeCanvas -> selectAllNodes ( )
>8477	ArgumentList	 
>8478	Callee	_activeCanvas -> selectAllNodes
>8479	PtrMemberAccess	_activeCanvas -> selectAllNodes
>8480	Identifier	selectAllNodes
>8481	Identifier	_activeCanvas
>8482	Condition	 
>8483	EqualityExpression	event . GetId ( ) == EDIT_SELECTALL
>8484	Identifier	EDIT_SELECTALL
>8485	CallExpression	event . GetId ( )
>8486	ArgumentList	 
>8487	Callee	event . GetId
>8488	MemberAccess	event . GetId
>8489	Identifier	GetId
>8490	Identifier	event
>8491	CompoundStatement	 
>8492	IfStatement	if ( dlg . ShowModal ( ) == wxID_OK )
>8493	CompoundStatement	 
>8494	ForStatement	for ( int i = 0 ; i < g -> numNodes ( ) ; i ++ )
>8495	CompoundStatement	 
>8496	IfStatement	if ( g -> getNode ( i ) -> getName ( ) . find ( searchStr ) != string 
>8497	CompoundStatement	 
>8498	ExpressionStatement	 
>8499	CallExpression	_activeCanvas -> _selectedNodes . insert ( g -> getNode ( i ) )
>8500	ArgumentList	g -> getNode ( i )
>8501	Argument	g -> getNode ( i )
>8502	CallExpression	g -> getNode ( i )
>8503	ArgumentList	i
>8504	Argument	i
>8505	Identifier	i
>8506	Callee	g -> getNode
>8507	PtrMemberAccess	g -> getNode
>8508	Identifier	getNode
>8509	Identifier	g
>8510	Callee	_activeCanvas -> _selectedNodes . insert
>8511	MemberAccess	_activeCanvas -> _selectedNodes . insert
>8512	Identifier	insert
>8513	PtrMemberAccess	_activeCanvas -> _selectedNodes
>8514	Identifier	_selectedNodes
>8515	Identifier	_activeCanvas
>8516	Condition	 
>8517	EqualityExpression	g -> getNode ( i ) -> getName ( ) . find ( searchStr ) != string 
>8518	Identifier	string 
>8519	CallExpression	g -> getNode ( i ) -> getName ( ) . find ( searchStr )
>8520	ArgumentList	searchStr
>8521	Argument	searchStr
>8522	Identifier	searchStr
>8523	Callee	g -> getNode ( i ) -> getName ( ) . find
>8524	MemberAccess	g -> getNode ( i ) -> getName ( ) . find
>8525	Identifier	find
>8526	CallExpression	g -> getNode ( i ) -> getName ( )
>8527	ArgumentList	 
>8528	Callee	g -> getNode ( i ) -> getName
>8529	PtrMemberAccess	g -> getNode ( i ) -> getName
>8530	Identifier	getName
>8531	CallExpression	g -> getNode ( i )
>8532	ArgumentList	i
>8533	Argument	i
>8534	Identifier	i
>8535	Callee	g -> getNode
>8536	PtrMemberAccess	g -> getNode
>8537	Identifier	getNode
>8538	Identifier	g
>8539	IncDecOp	 
>8540	IncDec	++
>8541	Identifier	i
>8542	Condition	 
>8543	RelationalExpression	i < g -> numNodes ( )
>8544	CallExpression	g -> numNodes ( )
>8545	ArgumentList	 
>8546	Callee	g -> numNodes
>8547	PtrMemberAccess	g -> numNodes
>8548	Identifier	numNodes
>8549	Identifier	g
>8550	Identifier	i
>8551	ForInit	 
>8552	IdentifierDeclStatement	int i = 0 ;
>8553	IdentifierDecl	i = 0
>8554	AssignmentExpr	i = 0
>8555	PrimaryExpression	0
>8556	Identifier	i
>8557	Identifier	i
>8558	IdentifierDeclType	int
>8559	ExpressionStatement	 
>8560	CallExpression	_activeCanvas -> _selectedNodes . clear ( )
>8561	ArgumentList	 
>8562	Callee	_activeCanvas -> _selectedNodes . clear
>8563	MemberAccess	_activeCanvas -> _selectedNodes . clear
>8564	Identifier	clear
>8565	PtrMemberAccess	_activeCanvas -> _selectedNodes
>8566	Identifier	_selectedNodes
>8567	Identifier	_activeCanvas
>8568	IdentifierDeclStatement	 
>8569	IdentifierDecl	* g = _activeCanvas -> _graph
>8570	AssignmentExpr	* g = _activeCanvas -> _graph
>8571	PtrMemberAccess	_activeCanvas -> _graph
>8572	Identifier	_graph
>8573	Identifier	_activeCanvas
>8574	Identifier	g
>8575	Identifier	g
>8576	IdentifierDeclType	const drwnGraph *
>8577	IdentifierDeclStatement	 
>8578	IdentifierDecl	searchStr = string ( dlg . GetValue ( ) . c_str ( ) )
>8579	AssignmentExpr	searchStr = string ( dlg . GetValue ( ) . c_str ( ) )
>8580	CallExpression	string ( dlg . GetValue ( ) . c_str ( ) )
>8581	ArgumentList	dlg . GetValue ( ) . c_str ( )
>8582	Argument	dlg . GetValue ( ) . c_str ( )
>8583	CallExpression	dlg . GetValue ( ) . c_str ( )
>8584	ArgumentList	 
>8585	Callee	dlg . GetValue ( ) . c_str
>8586	MemberAccess	dlg . GetValue ( ) . c_str
>8587	Identifier	c_str
>8588	CallExpression	dlg . GetValue ( )
>8589	ArgumentList	 
>8590	Callee	dlg . GetValue
>8591	MemberAccess	dlg . GetValue
>8592	Identifier	GetValue
>8593	Identifier	dlg
>8594	Callee	string
>8595	Identifier	string
>8596	Identifier	searchStr
>8597	Identifier	searchStr
>8598	IdentifierDeclType	string
>8599	Condition	 
>8600	EqualityExpression	dlg . ShowModal ( ) == wxID_OK
>8601	Identifier	wxID_OK
>8602	CallExpression	dlg . ShowModal ( )
>8603	ArgumentList	 
>8604	Callee	dlg . ShowModal
>8605	MemberAccess	dlg . ShowModal
>8606	Identifier	ShowModal
>8607	Identifier	dlg
>8608	IdentifierDeclStatement	 
>8609	IdentifierDecl	dlg ( this , \"Search string
>8610	Expression	this , \"Search string
>8611	Expression	\"Search string
>8612	PrimaryExpression	\"Find\"
>8613	PrimaryExpression	\"Search string
>8614	Identifier	this
>8615	Identifier	dlg
>8616	IdentifierDeclType	wxTextEntryDialog
>8617	Condition	 
>8618	EqualityExpression	event . GetId ( ) == EDIT_FIND
>8619	Identifier	EDIT_FIND
>8620	CallExpression	event . GetId ( )
>8621	ArgumentList	 
>8622	Callee	event . GetId
>8623	MemberAccess	event . GetId
>8624	Identifier	GetId
>8625	Identifier	event
>8626	CompoundStatement	 
>8627	IfStatement	if ( _activeCanvas -> _selectedNodes . empty ( ) )
>8628	ElseStatement	else
>8629	CompoundStatement	 
>8630	IfStatement	if ( dlg . ShowModal ( ) == wxID_YES )
>8631	CompoundStatement	 
>8632	ExpressionStatement	 
>8633	AssignmentExpr	_activeCanvas -> _activeNode = NULL
>8634	Identifier	NULL
>8635	PtrMemberAccess	_activeCanvas -> _activeNode
>8636	Identifier	_activeNode
>8637	Identifier	_activeCanvas
>8638	ExpressionStatement	 
>8639	CallExpression	_activeCanvas -> _selectedNodes . clear ( )
>8640	ArgumentList	 
>8641	Callee	_activeCanvas -> _selectedNodes . clear
>8642	MemberAccess	_activeCanvas -> _selectedNodes . clear
>8643	Identifier	clear
>8644	PtrMemberAccess	_activeCanvas -> _selectedNodes
>8645	Identifier	_selectedNodes
>8646	Identifier	_activeCanvas
>8647	ForStatement	for ( set < drwnNode * > 
>8648	CompoundStatement	 
>8649	ExpressionStatement	 
>8650	CallExpression	_activeCanvas -> _graph -> delNode ( * it )
>8651	ArgumentList	* it
>8652	Argument	* it
>8653	UnaryOp	* it
>8654	Identifier	it
>8655	UnaryOperator	*
>8656	Callee	_activeCanvas -> _graph -> delNode
>8657	PtrMemberAccess	_activeCanvas -> _graph -> delNode
>8658	Identifier	delNode
>8659	PtrMemberAccess	_activeCanvas -> _graph
>8660	Identifier	_graph
>8661	Identifier	_activeCanvas
>8662	IncDecOp	 
>8663	IncDec	++
>8664	Identifier	it
>8665	Condition	 
>8666	EqualityExpression	it != _activeCanvas -> _selectedNodes . end ( )
>8667	CallExpression	_activeCanvas -> _selectedNodes . end ( )
>8668	ArgumentList	 
>8669	Callee	_activeCanvas -> _selectedNodes . end
>8670	MemberAccess	_activeCanvas -> _selectedNodes . end
>8671	Identifier	end
>8672	PtrMemberAccess	_activeCanvas -> _selectedNodes
>8673	Identifier	_selectedNodes
>8674	Identifier	_activeCanvas
>8675	Identifier	it
>8676	ForInit	 
>8677	IdentifierDeclStatement	set < drwnNode * > 
>8678	IdentifierDecl	it = _activeCanvas -> _selectedNodes . begin ( )
>8679	AssignmentExpr	it = _activeCanvas -> _selectedNodes . begin ( )
>8680	CallExpression	_activeCanvas -> _selectedNodes . begin ( )
>8681	ArgumentList	 
>8682	Callee	_activeCanvas -> _selectedNodes . begin
>8683	MemberAccess	_activeCanvas -> _selectedNodes . begin
>8684	Identifier	begin
>8685	PtrMemberAccess	_activeCanvas -> _selectedNodes
>8686	Identifier	_selectedNodes
>8687	Identifier	_activeCanvas
>8688	Identifier	it
>8689	Identifier	it
>8690	IdentifierDeclType	set < drwnNode * > 
>8691	Condition	 
>8692	EqualityExpression	dlg . ShowModal ( ) == wxID_YES
>8693	Identifier	wxID_YES
>8694	CallExpression	dlg . ShowModal ( )
>8695	ArgumentList	 
>8696	Callee	dlg . ShowModal
>8697	MemberAccess	dlg . ShowModal
>8698	Identifier	ShowModal
>8699	Identifier	dlg
>8700	IdentifierDeclStatement	 
>8701	IdentifierDecl	dlg ( this , wxString 
>8702	Expression	this , wxString 
>8703	Expression	wxString 
>8704	Expression	\"Delete\" , wxYES_NO
>8705	Identifier	wxYES_NO
>8706	PrimaryExpression	\"Delete\"
>8707	CallExpression	wxString 
>8708	ArgumentList	\"Delete %d nodes? All associated data will be lost.\"
>8709	Argument	( int ) _activeCanvas -> _selectedNodes . size ( )
>8710	CastExpression	( int ) _activeCanvas -> _selectedNodes . size ( )
>8711	CallExpression	_activeCanvas -> _selectedNodes . size ( )
>8712	ArgumentList	 
>8713	Callee	_activeCanvas -> _selectedNodes . size
>8714	MemberAccess	_activeCanvas -> _selectedNodes . size
>8715	Identifier	size
>8716	PtrMemberAccess	_activeCanvas -> _selectedNodes
>8717	Identifier	_selectedNodes
>8718	Identifier	_activeCanvas
>8719	CastTarget	int
>8720	Argument	\"Delete %d nodes? All associated data will be lost.\"
>8721	PrimaryExpression	\"Delete %d nodes? All associated data will be lost.\"
>8722	Callee	wxString 
>8723	Identifier	wxString 
>8724	Identifier	this
>8725	Identifier	dlg
>8726	IdentifierDeclType	wxMessageDialog
>8727	CompoundStatement	 
>8728	ExpressionStatement	 
>8729	CallExpression	wxMessageBox ( \"No nodes selected.\" , \"Delete\" , wxOK | wxICON_INFORMATION , this )
>8730	ArgumentList	\"No nodes selected.\"
>8731	Argument	this
>8732	Identifier	this
>8733	Argument	wxOK | wxICON_INFORMATION
>8734	InclusiveOrExpression	wxOK | wxICON_INFORMATION
>8735	Identifier	wxICON_INFORMATION
>8736	Identifier	wxOK
>8737	Argument	\"Delete\"
>8738	PrimaryExpression	\"Delete\"
>8739	Argument	\"No nodes selected.\"
>8740	PrimaryExpression	\"No nodes selected.\"
>8741	Callee	wxMessageBox
>8742	Identifier	wxMessageBox
>8743	Condition	 
>8744	CallExpression	_activeCanvas -> _selectedNodes . empty ( )
>8745	ArgumentList	 
>8746	Callee	_activeCanvas -> _selectedNodes . empty
>8747	MemberAccess	_activeCanvas -> _selectedNodes . empty
>8748	Identifier	empty
>8749	PtrMemberAccess	_activeCanvas -> _selectedNodes
>8750	Identifier	_selectedNodes
>8751	Identifier	_activeCanvas
>8752	Condition	 
>8753	EqualityExpression	event . GetId ( ) == EDIT_DELETE
>8754	Identifier	EDIT_DELETE
>8755	CallExpression	event . GetId ( )
>8756	ArgumentList	 
>8757	Callee	event . GetId
>8758	MemberAccess	event . GetId
>8759	Identifier	GetId
>8760	Identifier	event
>8761	CompoundStatement	 
>8762	ExpressionStatement	 
>8763	CallExpression	DRWN_LOG_VERBOSE ( _copyBuffer . size ( ) << \" nodes pasted\" )
>8764	ArgumentList	_copyBuffer . size ( ) << \" nodes pasted\"
>8765	Argument	_copyBuffer . size ( ) << \" nodes pasted\"
>8766	ShiftExpression	_copyBuffer . size ( ) << \" nodes pasted\"
>8767	PrimaryExpression	\" nodes pasted\"
>8768	CallExpression	_copyBuffer . size ( )
>8769	ArgumentList	 
>8770	Callee	_copyBuffer . size
>8771	MemberAccess	_copyBuffer . size
>8772	Identifier	size
>8773	Identifier	_copyBuffer
>8774	Callee	DRWN_LOG_VERBOSE
>8775	Identifier	DRWN_LOG_VERBOSE
>8776	ForStatement	for ( int i = _activeCanvas -> _graph -> numNodes ( ) - _copyBuffer . size ( ) ; i < _activeCanvas -> _graph -> \
>8777	CompoundStatement	 
>8778	ExpressionStatement	 
>8779	CallExpression	_activeCanvas -> _selectedNodes . insert ( _activeCanvas -> _graph -> getNode ( i ) )
>8780	ArgumentList	_activeCanvas -> _graph -> getNode ( i )
>8781	Argument	_activeCanvas -> _graph -> getNode ( i )
>8782	CallExpression	_activeCanvas -> _graph -> getNode ( i )
>8783	ArgumentList	i
>8784	Argument	i
>8785	Identifier	i
>8786	Callee	_activeCanvas -> _graph -> getNode
>8787	PtrMemberAccess	_activeCanvas -> _graph -> getNode
>8788	Identifier	getNode
>8789	PtrMemberAccess	_activeCanvas -> _graph
>8790	Identifier	_graph
>8791	Identifier	_activeCanvas
>8792	Callee	_activeCanvas -> _selectedNodes . insert
>8793	MemberAccess	_activeCanvas -> _selectedNodes . insert
>8794	Identifier	insert
>8795	PtrMemberAccess	_activeCanvas -> _selectedNodes
>8796	Identifier	_selectedNodes
>8797	Identifier	_activeCanvas
>8798	IncDecOp	 
>8799	IncDec	++
>8800	Identifier	i
>8801	Condition	 
>8802	RelationalExpression	i < _activeCanvas -> _graph -> numNodes ( )
>8803	CallExpression	_activeCanvas -> _graph -> numNodes ( )
>8804	ArgumentList	 
>8805	Callee	_activeCanvas -> _graph -> numNodes
>8806	PtrMemberAccess	_activeCanvas -> _graph -> numNodes
>8807	Identifier	numNodes
>8808	PtrMemberAccess	_activeCanvas -> _graph
>8809	Identifier	_graph
>8810	Identifier	_activeCanvas
>8811	Identifier	i
>8812	ForInit	 
>8813	IdentifierDeclStatement	int i = _activeCanvas -> _graph -> numNodes ( ) - _copyBuffer . size ( ) ;
>8814	IdentifierDecl	i = _activeCanvas -> _graph -> numNodes ( ) - _copyBuffer . size ( )
>8815	AssignmentExpr	i = _activeCanvas -> _graph -> numNodes ( ) - _copyBuffer . size ( )
>8816	AdditiveExpression	_activeCanvas -> _graph -> numNodes ( ) - _copyBuffer . size ( )
>8817	CallExpression	_copyBuffer . size ( )
>8818	ArgumentList	 
>8819	Callee	_copyBuffer . size
>8820	MemberAccess	_copyBuffer . size
>8821	Identifier	size
>8822	Identifier	_copyBuffer
>8823	CallExpression	_activeCanvas -> _graph -> numNodes ( )
>8824	ArgumentList	 
>8825	Callee	_activeCanvas -> _graph -> numNodes
>8826	PtrMemberAccess	_activeCanvas -> _graph -> numNodes
>8827	Identifier	numNodes
>8828	PtrMemberAccess	_activeCanvas -> _graph
>8829	Identifier	_graph
>8830	Identifier	_activeCanvas
>8831	Identifier	i
>8832	Identifier	i
>8833	IdentifierDeclType	int
>8834	ExpressionStatement	 
>8835	CallExpression	_activeCanvas -> _selectedNodes . clear ( )
>8836	ArgumentList	 
>8837	Callee	_activeCanvas -> _selectedNodes . clear
>8838	MemberAccess	_activeCanvas -> _selectedNodes . clear
>8839	Identifier	clear
>8840	PtrMemberAccess	_activeCanvas -> _selectedNodes
>8841	Identifier	_selectedNodes
>8842	Identifier	_activeCanvas
>8843	ExpressionStatement	 
>8844	CallExpression	_activeCanvas -> _graph -> pasteSubGraph ( _copyBuffer , x , y )
>8845	ArgumentList	_copyBuffer
>8846	Argument	y
>8847	Identifier	y
>8848	Argument	x
>8849	Identifier	x
>8850	Argument	_copyBuffer
>8851	Identifier	_copyBuffer
>8852	Callee	_activeCanvas -> _graph -> pasteSubGraph
>8853	PtrMemberAccess	_activeCanvas -> _graph -> pasteSubGraph
>8854	Identifier	pasteSubGraph
>8855	PtrMemberAccess	_activeCanvas -> _graph
>8856	Identifier	_graph
>8857	Identifier	_activeCanvas
>8858	IfStatement	if ( _activeCanvas -> _bSnapToGrid )
>8859	CompoundStatement	 
>8860	ExpressionStatement	 
>8861	AssignmentExpr	y = 32 * ( ( int ) ( y + 16 ) / 32 )
>8862	MultiplicativeExpression	32 * ( ( int ) ( y + 16 ) / 32 )
>8863	MultiplicativeExpression	( int ) ( y + 16 ) / 32
>8864	PrimaryExpression	32
>8865	CastExpression	( int ) ( y + 16 )
>8866	AdditiveExpression	y + 16
>8867	PrimaryExpression	16
>8868	Identifier	y
>8869	CastTarget	int
>8870	PrimaryExpression	32
>8871	Identifier	y
>8872	ExpressionStatement	 
>8873	AssignmentExpr	x = 32 * ( ( int ) ( x + 16 ) / 32 )
>8874	MultiplicativeExpression	32 * ( ( int ) ( x + 16 ) / 32 )
>8875	MultiplicativeExpression	( int ) ( x + 16 ) / 32
>8876	PrimaryExpression	32
>8877	CastExpression	( int ) ( x + 16 )
>8878	AdditiveExpression	x + 16
>8879	PrimaryExpression	16
>8880	Identifier	x
>8881	CastTarget	int
>8882	PrimaryExpression	32
>8883	Identifier	x
>8884	Condition	 
>8885	PtrMemberAccess	_activeCanvas -> _bSnapToGrid
>8886	Identifier	_bSnapToGrid
>8887	Identifier	_activeCanvas
>8888	ExpressionStatement	 
>8889	CallExpression	_activeCanvas -> CalcUnscrolledPosition ( width / 2 , height / 2 , & x , & y )
>8890	ArgumentList	width / 2
>8891	Argument	& y
>8892	UnaryOp	& y
>8893	Identifier	y
>8894	UnaryOperator	&
>8895	Argument	& x
>8896	UnaryOp	& x
>8897	Identifier	x
>8898	UnaryOperator	&
>8899	Argument	height / 2
>8900	MultiplicativeExpression	height / 2
>8901	PrimaryExpression	2
>8902	Identifier	height
>8903	Argument	width / 2
>8904	MultiplicativeExpression	width / 2
>8905	PrimaryExpression	2
>8906	Identifier	width
>8907	Callee	_activeCanvas -> CalcUnscrolledPosition
>8908	PtrMemberAccess	_activeCanvas -> CalcUnscrolledPosition
>8909	Identifier	CalcUnscrolledPosition
>8910	Identifier	_activeCanvas
>8911	ExpressionStatement	 
>8912	CallExpression	_activeCanvas -> GetClientSize ( & width , & height )
>8913	ArgumentList	& width
>8914	Argument	& height
>8915	UnaryOp	& height
>8916	Identifier	height
>8917	UnaryOperator	&
>8918	Argument	& width
>8919	UnaryOp	& width
>8920	Identifier	width
>8921	UnaryOperator	&
>8922	Callee	_activeCanvas -> GetClientSize
>8923	PtrMemberAccess	_activeCanvas -> GetClientSize
>8924	Identifier	GetClientSize
>8925	Identifier	_activeCanvas
>8926	IdentifierDeclStatement	 
>8927	IdentifierDecl	y
>8928	Identifier	y
>8929	IdentifierDeclType	int
>8930	IdentifierDecl	x
>8931	Identifier	x
>8932	IdentifierDeclType	int
>8933	IdentifierDecl	height
>8934	Identifier	height
>8935	IdentifierDeclType	int
>8936	IdentifierDecl	width
>8937	Identifier	width
>8938	IdentifierDeclType	int
>8939	Condition	 
>8940	EqualityExpression	event . GetId ( ) == EDIT_PASTE
>8941	Identifier	EDIT_PASTE
>8942	CallExpression	event . GetId ( )
>8943	ArgumentList	 
>8944	Callee	event . GetId
>8945	MemberAccess	event . GetId
>8946	Identifier	GetId
>8947	Identifier	event
>8948	CompoundStatement	 
>8949	ExpressionStatement	 
>8950	CallExpression	DRWN_LOG_VERBOSE ( _copyBuffer . size ( ) << \" nodes copied\" )
>8951	ArgumentList	_copyBuffer . size ( ) << \" nodes copied\"
>8952	Argument	_copyBuffer . size ( ) << \" nodes copied\"
>8953	ShiftExpression	_copyBuffer . size ( ) << \" nodes copied\"
>8954	PrimaryExpression	\" nodes copied\"
>8955	CallExpression	_copyBuffer . size ( )
>8956	ArgumentList	 
>8957	Callee	_copyBuffer . size
>8958	MemberAccess	_copyBuffer . size
>8959	Identifier	size
>8960	Identifier	_copyBuffer
>8961	Callee	DRWN_LOG_VERBOSE
>8962	Identifier	DRWN_LOG_VERBOSE
>8963	ExpressionStatement	 
>8964	AssignmentExpr	_copyBuffer = _activeCanvas -> _graph -> copySubGraph ( _activeCanvas -> _selectedNodes )
>8965	CallExpression	_activeCanvas -> _graph -> copySubGraph ( _activeCanvas -> _selectedNodes )
>8966	ArgumentList	_activeCanvas -> _selectedNodes
>8967	Argument	_activeCanvas -> _selectedNodes
>8968	PtrMemberAccess	_activeCanvas -> _selectedNodes
>8969	Identifier	_selectedNodes
>8970	Identifier	_activeCanvas
>8971	Callee	_activeCanvas -> _graph -> copySubGraph
>8972	PtrMemberAccess	_activeCanvas -> _graph -> copySubGraph
>8973	Identifier	copySubGraph
>8974	PtrMemberAccess	_activeCanvas -> _graph
>8975	Identifier	_graph
>8976	Identifier	_activeCanvas
>8977	Identifier	_copyBuffer
>8978	ExpressionStatement	 
>8979	CallExpression	clearCopyBuffer ( )
>8980	ArgumentList	 
>8981	Callee	clearCopyBuffer
>8982	Identifier	clearCopyBuffer
>8983	Condition	 
>8984	EqualityExpression	event . GetId ( ) == EDIT_COPY
>8985	Identifier	EDIT_COPY
>8986	CallExpression	event . GetId ( )
>8987	ArgumentList	 
>8988	Callee	event . GetId
>8989	MemberAccess	event . GetId
>8990	Identifier	GetId
>8991	Identifier	event
>8992	CompoundStatement	 
>8993	ExpressionStatement	 
>8994	CallExpression	DRWN_LOG_VERBOSE ( _copyBuffer . size ( ) << \" nodes cut\" )
>8995	ArgumentList	_copyBuffer . size ( ) << \" nodes cut\"
>8996	Argument	_copyBuffer . size ( ) << \" nodes cut\"
>8997	ShiftExpression	_copyBuffer . size ( ) << \" nodes cut\"
>8998	PrimaryExpression	\" nodes cut\"
>8999	CallExpression	_copyBuffer . size ( )
>9000	ArgumentList	 
>9001	Callee	_copyBuffer . size
>9002	MemberAccess	_copyBuffer . size
>9003	Identifier	size
>9004	Identifier	_copyBuffer
>9005	Callee	DRWN_LOG_VERBOSE
>9006	Identifier	DRWN_LOG_VERBOSE
>9007	ExpressionStatement	 
>9008	AssignmentExpr	_activeCanvas -> _activeNode = NULL
>9009	Identifier	NULL
>9010	PtrMemberAccess	_activeCanvas -> _activeNode
>9011	Identifier	_activeNode
>9012	Identifier	_activeCanvas
>9013	ExpressionStatement	 
>9014	CallExpression	_activeCanvas -> _selectedNodes . clear ( )
>9015	ArgumentList	 
>9016	Callee	_activeCanvas -> _selectedNodes . clear
>9017	MemberAccess	_activeCanvas -> _selectedNodes . clear
>9018	Identifier	clear
>9019	PtrMemberAccess	_activeCanvas -> _selectedNodes
>9020	Identifier	_selectedNodes
>9021	Identifier	_activeCanvas
>9022	ForStatement	for ( set < drwnNode * > 
>9023	CompoundStatement	 
>9024	ExpressionStatement	 
>9025	CallExpression	_activeCanvas -> _graph -> delNode ( * it )
>9026	ArgumentList	* it
>9027	Argument	* it
>9028	UnaryOp	* it
>9029	Identifier	it
>9030	UnaryOperator	*
>9031	Callee	_activeCanvas -> _graph -> delNode
>9032	PtrMemberAccess	_activeCanvas -> _graph -> delNode
>9033	Identifier	delNode
>9034	PtrMemberAccess	_activeCanvas -> _graph
>9035	Identifier	_graph
>9036	Identifier	_activeCanvas
>9037	IncDecOp	 
>9038	IncDec	++
>9039	Identifier	it
>9040	Condition	 
>9041	EqualityExpression	it != _activeCanvas -> _selectedNodes . end ( )
>9042	CallExpression	_activeCanvas -> _selectedNodes . end ( )
>9043	ArgumentList	 
>9044	Callee	_activeCanvas -> _selectedNodes . end
>9045	MemberAccess	_activeCanvas -> _selectedNodes . end
>9046	Identifier	end
>9047	PtrMemberAccess	_activeCanvas -> _selectedNodes
>9048	Identifier	_selectedNodes
>9049	Identifier	_activeCanvas
>9050	Identifier	it
>9051	ForInit	 
>9052	IdentifierDeclStatement	set < drwnNode * > 
>9053	IdentifierDecl	it = _activeCanvas -> _selectedNodes . begin ( )
>9054	AssignmentExpr	it = _activeCanvas -> _selectedNodes . begin ( )
>9055	CallExpression	_activeCanvas -> _selectedNodes . begin ( )
>9056	ArgumentList	 
>9057	Callee	_activeCanvas -> _selectedNodes . begin
>9058	MemberAccess	_activeCanvas -> _selectedNodes . begin
>9059	Identifier	begin
>9060	PtrMemberAccess	_activeCanvas -> _selectedNodes
>9061	Identifier	_selectedNodes
>9062	Identifier	_activeCanvas
>9063	Identifier	it
>9064	Identifier	it
>9065	IdentifierDeclType	set < drwnNode * > 
>9066	ExpressionStatement	 
>9067	AssignmentExpr	_copyBuffer = _activeCanvas -> _graph -> copySubGraph ( _activeCanvas -> _selectedNodes )
>9068	CallExpression	_activeCanvas -> _graph -> copySubGraph ( _activeCanvas -> _selectedNodes )
>9069	ArgumentList	_activeCanvas -> _selectedNodes
>9070	Argument	_activeCanvas -> _selectedNodes
>9071	PtrMemberAccess	_activeCanvas -> _selectedNodes
>9072	Identifier	_selectedNodes
>9073	Identifier	_activeCanvas
>9074	Callee	_activeCanvas -> _graph -> copySubGraph
>9075	PtrMemberAccess	_activeCanvas -> _graph -> copySubGraph
>9076	Identifier	copySubGraph
>9077	PtrMemberAccess	_activeCanvas -> _graph
>9078	Identifier	_graph
>9079	Identifier	_activeCanvas
>9080	Identifier	_copyBuffer
>9081	ExpressionStatement	 
>9082	CallExpression	clearCopyBuffer ( )
>9083	ArgumentList	 
>9084	Callee	clearCopyBuffer
>9085	Identifier	clearCopyBuffer
>9086	Condition	 
>9087	EqualityExpression	event . GetId ( ) == EDIT_CUT
>9088	Identifier	EDIT_CUT
>9089	CallExpression	event . GetId ( )
>9090	ArgumentList	 
>9091	Callee	event . GetId
>9092	MemberAccess	event . GetId
>9093	Identifier	GetId
>9094	Identifier	event
>9157	FunctionDef	MainWindow 
>9158	ParameterList	wxCommandEvent & event
>9159	Parameter	 
>9160	Identifier	event
>9161	ParameterType	wxCommandEvent &
>9162	ReturnType	void
>9163	CompoundStatement	 
>9164	ExpressionStatement	 
>9165	CallExpression	Update ( )
>9166	ArgumentList	 
>9167	Callee	Update
>9168	Identifier	Update
>9169	ExpressionStatement	 
>9170	CallExpression	Refresh ( false )
>9171	ArgumentList	false
>9172	Argument	false
>9173	Identifier	false
>9174	Callee	Refresh
>9175	Identifier	Refresh
>9176	IfStatement	if ( event . GetId ( ) == NETWORK_RESET )
>9177	ElseStatement	else
>9178	IfStatement	if ( event . GetId ( ) == NETWORK_EVALUATE )
>9179	ElseStatement	else
>9180	IfStatement	if ( event . GetId ( ) == NETWORK_UPDATE )
>9181	ElseStatement	else
>9182	IfStatement	if ( event . GetId ( ) == NETWORK_INITPARAMS )
>9183	ElseStatement	else
>9184	IfStatement	if ( event . GetId ( ) == NETWORK_GRIDSNAP )
>9185	CompoundStatement	 
>9186	ExpressionStatement	 
>9187	AssignmentExpr	_activeCanvas -> snapToGrid ( ) = event . IsChecked ( )
>9188	CallExpression	event . IsChecked ( )
>9189	ArgumentList	 
>9190	Callee	event . IsChecked
>9191	MemberAccess	event . IsChecked
>9192	Identifier	IsChecked
>9193	Identifier	event
>9194	CallExpression	_activeCanvas -> snapToGrid ( )
>9195	ArgumentList	 
>9196	Callee	_activeCanvas -> snapToGrid
>9197	PtrMemberAccess	_activeCanvas -> snapToGrid
>9198	Identifier	snapToGrid
>9199	Identifier	_activeCanvas
>9200	Condition	 
>9201	EqualityExpression	event . GetId ( ) == NETWORK_GRIDSNAP
>9202	Identifier	NETWORK_GRIDSNAP
>9203	CallExpression	event . GetId ( )
>9204	ArgumentList	 
>9205	Callee	event . GetId
>9206	MemberAccess	event . GetId
>9207	Identifier	GetId
>9208	Identifier	event
>9209	CompoundStatement	 
>9210	ExpressionStatement	 
>9211	CallExpression	_activeCanvas -> _graph -> initializeParameters ( _activeCanvas -> _selectedNodes )
>9212	ArgumentList	_activeCanvas -> _selectedNodes
>9213	Argument	_activeCanvas -> _selectedNodes
>9214	PtrMemberAccess	_activeCanvas -> _selectedNodes
>9215	Identifier	_selectedNodes
>9216	Identifier	_activeCanvas
>9217	Callee	_activeCanvas -> _graph -> initializeParameters
>9218	PtrMemberAccess	_activeCanvas -> _graph -> initializeParameters
>9219	Identifier	initializeParameters
>9220	PtrMemberAccess	_activeCanvas -> _graph
>9221	Identifier	_graph
>9222	Identifier	_activeCanvas
>9223	Condition	 
>9224	EqualityExpression	event . GetId ( ) == NETWORK_INITPARAMS
>9225	Identifier	NETWORK_INITPARAMS
>9226	CallExpression	event . GetId ( )
>9227	ArgumentList	 
>9228	Callee	event . GetId
>9229	MemberAccess	event . GetId
>9230	Identifier	GetId
>9231	Identifier	event
>9232	CompoundStatement	 
>9233	ExpressionStatement	 
>9234	CallExpression	_activeCanvas -> _graph -> updateForwards ( _activeCanvas -> _selectedNodes )
>9235	ArgumentList	_activeCanvas -> _selectedNodes
>9236	Argument	_activeCanvas -> _selectedNodes
>9237	PtrMemberAccess	_activeCanvas -> _selectedNodes
>9238	Identifier	_selectedNodes
>9239	Identifier	_activeCanvas
>9240	Callee	_activeCanvas -> _graph -> updateForwards
>9241	PtrMemberAccess	_activeCanvas -> _graph -> updateForwards
>9242	Identifier	updateForwards
>9243	PtrMemberAccess	_activeCanvas -> _graph
>9244	Identifier	_graph
>9245	Identifier	_activeCanvas
>9246	Condition	 
>9247	EqualityExpression	event . GetId ( ) == NETWORK_UPDATE
>9248	Identifier	NETWORK_UPDATE
>9249	CallExpression	event . GetId ( )
>9250	ArgumentList	 
>9251	Callee	event . GetId
>9252	MemberAccess	event . GetId
>9253	Identifier	GetId
>9254	Identifier	event
>9255	CompoundStatement	 
>9256	ExpressionStatement	 
>9257	CallExpression	_activeCanvas -> _graph -> evaluateForwards ( _activeCanvas -> _selectedNodes )
>9258	ArgumentList	_activeCanvas -> _selectedNodes
>9259	Argument	_activeCanvas -> _selectedNodes
>9260	PtrMemberAccess	_activeCanvas -> _selectedNodes
>9261	Identifier	_selectedNodes
>9262	Identifier	_activeCanvas
>9263	Callee	_activeCanvas -> _graph -> evaluateForwards
>9264	PtrMemberAccess	_activeCanvas -> _graph -> evaluateForwards
>9265	Identifier	evaluateForwards
>9266	PtrMemberAccess	_activeCanvas -> _graph
>9267	Identifier	_graph
>9268	Identifier	_activeCanvas
>9269	Condition	 
>9270	EqualityExpression	event . GetId ( ) == NETWORK_EVALUATE
>9271	Identifier	NETWORK_EVALUATE
>9272	CallExpression	event . GetId ( )
>9273	ArgumentList	 
>9274	Callee	event . GetId
>9275	MemberAccess	event . GetId
>9276	Identifier	GetId
>9277	Identifier	event
>9278	CompoundStatement	 
>9279	ExpressionStatement	 
>9280	CallExpression	_activeCanvas -> _graph -> resetParameters ( _activeCanvas -> _selectedNodes )
>9281	ArgumentList	_activeCanvas -> _selectedNodes
>9282	Argument	_activeCanvas -> _selectedNodes
>9283	PtrMemberAccess	_activeCanvas -> _selectedNodes
>9284	Identifier	_selectedNodes
>9285	Identifier	_activeCanvas
>9286	Callee	_activeCanvas -> _graph -> resetParameters
>9287	PtrMemberAccess	_activeCanvas -> _graph -> resetParameters
>9288	Identifier	resetParameters
>9289	PtrMemberAccess	_activeCanvas -> _graph
>9290	Identifier	_graph
>9291	Identifier	_activeCanvas
>9292	Condition	 
>9293	EqualityExpression	event . GetId ( ) == NETWORK_RESET
>9294	Identifier	NETWORK_RESET
>9295	CallExpression	event . GetId ( )
>9296	ArgumentList	 
>9297	Callee	event . GetId
>9298	MemberAccess	event . GetId
>9299	Identifier	GetId
>9300	Identifier	event
>9318	FunctionDef	MainWindow 
>9319	ParameterList	wxCommandEvent & event
>9320	Parameter	 
>9321	Identifier	event
>9322	ParameterType	wxCommandEvent &
>9323	ReturnType	void
>9324	CompoundStatement	 
>9325	ExpressionStatement	 
>9326	CallExpression	Update ( )
>9327	ArgumentList	 
>9328	Callee	Update
>9329	Identifier	Update
>9330	ExpressionStatement	 
>9331	CallExpression	Refresh ( false )
>9332	ArgumentList	false
>9333	Argument	false
>9334	Identifier	false
>9335	Callee	Refresh
>9336	Identifier	Refresh
>9337	IfStatement	if ( event . GetId ( ) == DATABASE_CONNECT )
>9338	ElseStatement	else
>9339	IfStatement	if ( event . GetId ( ) == DATABASE_VIEW_TABLES )
>9340	ElseStatement	else
>9341	IfStatement	if ( event . GetId ( ) == DATABASE_VIEW_INSTANCES )
>9342	ElseStatement	else
>9343	IfStatement	if ( event . GetId ( ) == DATABASE_IMPORT_COLOURS )
>9344	ElseStatement	else
>9345	IfStatement	if ( event . GetId ( ) == DATABASE_RANDOMIZE_COLOURS )
>9346	ElseStatement	else
>9347	IfStatement	if ( event . GetId ( ) == DATABASE_FLUSH_CACHE )
>9348	CompoundStatement	 
>9349	ExpressionStatement	 
>9350	CallExpression	drwnDataCache 
>9351	ArgumentList	 
>9352	Callee	drwnDataCache 
>9353	MemberAccess	drwnDataCache 
>9354	Identifier	clear
>9355	CallExpression	drwnDataCache 
>9356	ArgumentList	 
>9357	Callee	drwnDataCache 
>9358	Identifier	drwnDataCache 
>9359	ExpressionStatement	 
>9360	CallExpression	drwnDataCache 
>9361	ArgumentList	 
>9362	Callee	drwnDataCache 
>9363	MemberAccess	drwnDataCache 
>9364	Identifier	flush
>9365	CallExpression	drwnDataCache 
>9366	ArgumentList	 
>9367	Callee	drwnDataCache 
>9368	Identifier	drwnDataCache 
>9369	Condition	 
>9370	EqualityExpression	event . GetId ( ) == DATABASE_FLUSH_CACHE
>9371	Identifier	DATABASE_FLUSH_CACHE
>9372	CallExpression	event . GetId ( )
>9373	ArgumentList	 
>9374	Callee	event . GetId
>9375	MemberAccess	event . GetId
>9376	Identifier	GetId
>9377	Identifier	event
>9378	CompoundStatement	 
>9379	IfStatement	if ( dlg . ShowModal ( ) )
>9380	CompoundStatement	 
>9381	IfStatement	if ( numColours <= 0 )
>9382	ElseStatement	else
>9383	CompoundStatement	 
>9384	ForStatement	for ( vector < string > 
>9385	CompoundStatement	 
>9386	ExpressionStatement	 
>9387	CallExpression	db -> setColour ( * it , rand ( ) % numColours )
>9388	ArgumentList	* it
>9389	Argument	rand ( ) % numColours
>9390	MultiplicativeExpression	rand ( ) % numColours
>9391	Identifier	numColours
>9392	CallExpression	rand ( )
>9393	ArgumentList	 
>9394	Callee	rand
>9395	Identifier	rand
>9396	Argument	* it
>9397	UnaryOp	* it
>9398	Identifier	it
>9399	UnaryOperator	*
>9400	Callee	db -> setColour
>9401	PtrMemberAccess	db -> setColour
>9402	Identifier	setColour
>9403	Identifier	db
>9404	IncDecOp	 
>9405	IncDec	++
>9406	Identifier	it
>9407	Condition	 
>9408	EqualityExpression	it != keys . end ( )
>9409	CallExpression	keys . end ( )
>9410	ArgumentList	 
>9411	Callee	keys . end
>9412	MemberAccess	keys . end
>9413	Identifier	end
>9414	Identifier	keys
>9415	Identifier	it
>9416	ForInit	 
>9417	IdentifierDeclStatement	vector < string > 
>9418	IdentifierDecl	it = keys . begin ( )
>9419	AssignmentExpr	it = keys . begin ( )
>9420	CallExpression	keys . begin ( )
>9421	ArgumentList	 
>9422	Callee	keys . begin
>9423	MemberAccess	keys . begin
>9424	Identifier	begin
>9425	Identifier	keys
>9426	Identifier	it
>9427	Identifier	it
>9428	IdentifierDeclType	vector < string > 
>9429	IdentifierDeclStatement	 
>9430	IdentifierDecl	keys = db -> getAllKeys ( )
>9431	AssignmentExpr	keys = db -> getAllKeys ( )
>9432	CallExpression	db -> getAllKeys ( )
>9433	ArgumentList	 
>9434	Callee	db -> getAllKeys
>9435	PtrMemberAccess	db -> getAllKeys
>9436	Identifier	getAllKeys
>9437	Identifier	db
>9438	Identifier	keys
>9439	Identifier	keys
>9440	IdentifierDeclType	vector < string >
>9441	ExpressionStatement	 
>9442	CallExpression	drwnInitializeRand ( )
>9443	ArgumentList	 
>9444	Callee	drwnInitializeRand
>9445	Identifier	drwnInitializeRand
>9446	CompoundStatement	 
>9447	ExpressionStatement	 
>9448	CallExpression	db -> clearColours ( )
>9449	ArgumentList	 
>9450	Callee	db -> clearColours
>9451	PtrMemberAccess	db -> clearColours
>9452	Identifier	clearColours
>9453	Identifier	db
>9454	Condition	 
>9455	RelationalExpression	numColours <= 0
>9456	PrimaryExpression	0
>9457	Identifier	numColours
>9458	IdentifierDeclStatement	 
>9459	IdentifierDecl	numColours = atoi ( dlg . GetValue ( ) . c_str ( ) )
>9460	AssignmentExpr	numColours = atoi ( dlg . GetValue ( ) . c_str ( ) )
>9461	CallExpression	atoi ( dlg . GetValue ( ) . c_str ( ) )
>9462	ArgumentList	dlg . GetValue ( ) . c_str ( )
>9463	Argument	dlg . GetValue ( ) . c_str ( )
>9464	CallExpression	dlg . GetValue ( ) . c_str ( )
>9465	ArgumentList	 
>9466	Callee	dlg . GetValue ( ) . c_str
>9467	MemberAccess	dlg . GetValue ( ) . c_str
>9468	Identifier	c_str
>9469	CallExpression	dlg . GetValue ( )
>9470	ArgumentList	 
>9471	Callee	dlg . GetValue
>9472	MemberAccess	dlg . GetValue
>9473	Identifier	GetValue
>9474	Identifier	dlg
>9475	Callee	atoi
>9476	Identifier	atoi
>9477	Identifier	numColours
>9478	Identifier	numColours
>9479	IdentifierDeclType	int
>9480	IdentifierDeclStatement	 
>9481	IdentifierDecl	* db = _activeCanvas -> _graph -> getDatabase ( )
>9482	AssignmentExpr	* db = _activeCanvas -> _graph -> getDatabase ( )
>9483	CallExpression	_activeCanvas -> _graph -> getDatabase ( )
>9484	ArgumentList	 
>9485	Callee	_activeCanvas -> _graph -> getDatabase
>9486	PtrMemberAccess	_activeCanvas -> _graph -> getDatabase
>9487	Identifier	getDatabase
>9488	PtrMemberAccess	_activeCanvas -> _graph
>9489	Identifier	_graph
>9490	Identifier	_activeCanvas
>9491	Identifier	db
>9492	Identifier	db
>9493	IdentifierDeclType	drwnDatabase *
>9494	Condition	 
>9495	CallExpression	dlg . ShowModal ( )
>9496	ArgumentList	 
>9497	Callee	dlg . ShowModal
>9498	MemberAccess	dlg . ShowModal
>9499	Identifier	ShowModal
>9500	Identifier	dlg
>9501	IdentifierDeclStatement	 
>9502	IdentifierDecl	dlg ( this , \"Enter number of data partitions (colours)
>9503	Expression	this , \"Enter number of data partitions (colours)
>9504	Expression	\"Enter number of data partitions (colours)
>9505	Expression	\"Randomize Colours\" , \"2\"
>9506	PrimaryExpression	\"2\"
>9507	PrimaryExpression	\"Randomize Colours\"
>9508	PrimaryExpression	\"Enter number of data partitions (colours)
>9509	Identifier	this
>9510	Identifier	dlg
>9511	IdentifierDeclType	wxTextEntryDialog
>9512	Condition	 
>9513	EqualityExpression	event . GetId ( ) == DATABASE_RANDOMIZE_COLOURS
>9514	Identifier	DATABASE_RANDOMIZE_COLOURS
>9515	CallExpression	event . GetId ( )
>9516	ArgumentList	 
>9517	Callee	event . GetId
>9518	MemberAccess	event . GetId
>9519	Identifier	GetId
>9520	Identifier	event
>9521	CompoundStatement	 
>9522	ExpressionStatement	 
>9523	Identifier	NOT_IMPLEMENTED_YET
>9524	Condition	 
>9525	EqualityExpression	event . GetId ( ) == DATABASE_IMPORT_COLOURS
>9526	Identifier	DATABASE_IMPORT_COLOURS
>9527	CallExpression	event . GetId ( )
>9528	ArgumentList	 
>9529	Callee	event . GetId
>9530	MemberAccess	event . GetId
>9531	Identifier	GetId
>9532	Identifier	event
>9533	CompoundStatement	 
>9534	ExpressionStatement	 
>9535	Identifier	choices
>9536	Statement	 
>9537	Statement	 
>9538	Statement	 
>9539	IfStatement	if ( dlg . ShowModal ( ) == wxID_OK )
>9540	CompoundStatement	 
>9541	ExpressionStatement	 
>9542	CallExpression	recordDlg . ShowModal ( )
>9543	ArgumentList	 
>9544	Callee	recordDlg . ShowModal
>9545	MemberAccess	recordDlg . ShowModal
>9546	Identifier	ShowModal
>9547	Identifier	recordDlg
>9548	ForStatement	for ( vector < string > 
>9549	CompoundStatement	 
>9550	ExpressionStatement	 
>9551	CallExpression	recordDlg . addLine ( )
>9552	ArgumentList	 
>9553	Callee	recordDlg . addLine
>9554	MemberAccess	recordDlg . addLine
>9555	Identifier	addLine
>9556	Identifier	recordDlg
>9557	IfStatement	if ( tbl -> hasKey ( k ) )
>9558	ElseStatement	else
>9559	CompoundStatement	 
>9560	ExpressionStatement	 
>9561	CallExpression	recordDlg . addLine ( \"  no data\" )
>9562	ArgumentList	\"  no data\"
>9563	Argument	\"  no data\"
>9564	PrimaryExpression	\"  no data\"
>9565	Callee	recordDlg . addLine
>9566	MemberAccess	recordDlg . addLine
>9567	Identifier	addLine
>9568	Identifier	recordDlg
>9569	CompoundStatement	 
>9570	ExpressionStatement	 
>9571	CallExpression	tbl -> unlockRecord ( k )
>9572	ArgumentList	k
>9573	Argument	k
>9574	Identifier	k
>9575	Callee	tbl -> unlockRecord
>9576	PtrMemberAccess	tbl -> unlockRecord
>9577	Identifier	unlockRecord
>9578	Identifier	tbl
>9579	IfStatement	if ( rec -> isEmpty ( ) )
>9580	ElseStatement	else
>9581	CompoundStatement	 
>9582	ForStatement	for ( int i = 0 ; i < d . rows ( ) ; i ++ )
>9583	CompoundStatement	 
>9584	ExpressionStatement	 
>9585	CallExpression	recordDlg . addLine ( ( string ( \"  \" ) + toString ( v ) ) . c_str ( ) )
>9586	ArgumentList	( string ( \"  \" ) + toString ( v ) ) . c_str ( )
>9587	Argument	( string ( \"  \" ) + toString ( v ) ) . c_str ( )
>9588	CallExpression	( string ( \"  \" ) + toString ( v ) ) . c_str ( )
>9589	ArgumentList	 
>9590	Callee	( string ( \"  \" ) + toString ( v ) ) . c_str
>9591	MemberAccess	( string ( \"  \" ) + toString ( v ) ) . c_str
>9592	Identifier	c_str
>9593	AdditiveExpression	string ( \"  \" ) + toString ( v )
>9594	CallExpression	toString ( v )
>9595	ArgumentList	v
>9596	Argument	v
>9597	Identifier	v
>9598	Callee	toString
>9599	Identifier	toString
>9600	CallExpression	string ( \"  \" )
>9601	ArgumentList	\"  \"
>9602	Argument	\"  \"
>9603	PrimaryExpression	\"  \"
>9604	Callee	string
>9605	Identifier	string
>9606	Callee	recordDlg . addLine
>9607	MemberAccess	recordDlg . addLine
>9608	Identifier	addLine
>9609	Identifier	recordDlg
>9610	ExpressionStatement	 
>9611	AssignmentExpr	Eigen 
>9612	CallExpression	d . row ( i )
>9613	ArgumentList	i
>9614	Argument	i
>9615	Identifier	i
>9616	Callee	d . row
>9617	MemberAccess	d . row
>9618	Identifier	row
>9619	Identifier	d
>9620	RelationalExpression	Eigen 
>9621	RelationalExpression	VectorXd > ( & v [ 0 ] , v . size ( ) )
>9622	Expression	& v [ 0 ] , v . size ( )
>9623	CallExpression	v . size ( )
>9624	ArgumentList	 
>9625	Callee	v . size
>9626	MemberAccess	v . size
>9627	Identifier	size
>9628	Identifier	v
>9629	UnaryOp	& v [ 0 ]
>9630	ArrayIndexing	v [ 0 ]
>9631	PrimaryExpression	0
>9632	Identifier	v
>9633	UnaryOperator	&
>9634	Identifier	VectorXd
>9635	Identifier	Eigen 
>9636	IdentifierDeclStatement	 
>9637	IdentifierDecl	v ( d . cols ( ) )
>9638	CallExpression	d . cols ( )
>9639	ArgumentList	 
>9640	Callee	d . cols
>9641	MemberAccess	d . cols
>9642	Identifier	cols
>9643	Identifier	d
>9644	Identifier	v
>9645	IdentifierDeclType	vector < double >
>9646	IncDecOp	 
>9647	IncDec	++
>9648	Identifier	i
>9649	Condition	 
>9650	RelationalExpression	i < d . rows ( )
>9651	CallExpression	d . rows ( )
>9652	ArgumentList	 
>9653	Callee	d . rows
>9654	MemberAccess	d . rows
>9655	Identifier	rows
>9656	Identifier	d
>9657	Identifier	i
>9658	ForInit	 
>9659	IdentifierDeclStatement	int i = 0 ;
>9660	IdentifierDecl	i = 0
>9661	AssignmentExpr	i = 0
>9662	PrimaryExpression	0
>9663	Identifier	i
>9664	Identifier	i
>9665	IdentifierDeclType	int
>9666	IdentifierDeclStatement	 
>9667	IdentifierDecl	& d = rec -> data ( )
>9668	AssignmentExpr	& d = rec -> data ( )
>9669	CallExpression	rec -> data ( )
>9670	ArgumentList	 
>9671	Callee	rec -> data
>9672	PtrMemberAccess	rec -> data
>9673	Identifier	data
>9674	Identifier	rec
>9675	Identifier	d
>9676	Identifier	d
>9677	IdentifierDeclType	const MatrixXd &
>9678	CompoundStatement	 
>9679	ExpressionStatement	 
>9680	CallExpression	recordDlg . addLine ( \"  empty\" )
>9681	ArgumentList	\"  empty\"
>9682	Argument	\"  empty\"
>9683	PrimaryExpression	\"  empty\"
>9684	Callee	recordDlg . addLine
>9685	MemberAccess	recordDlg . addLine
>9686	Identifier	addLine
>9687	Identifier	recordDlg
>9688	Condition	 
>9689	CallExpression	rec -> isEmpty ( )
>9690	ArgumentList	 
>9691	Callee	rec -> isEmpty
>9692	PtrMemberAccess	rec -> isEmpty
>9693	Identifier	isEmpty
>9694	Identifier	rec
>9695	IdentifierDeclStatement	 
>9696	IdentifierDecl	* rec = tbl -> lockRecord ( k )
>9697	AssignmentExpr	* rec = tbl -> lockRecord ( k )
>9698	CallExpression	tbl -> lockRecord ( k )
>9699	ArgumentList	k
>9700	Argument	k
>9701	Identifier	k
>9702	Callee	tbl -> lockRecord
>9703	PtrMemberAccess	tbl -> lockRecord
>9704	Identifier	lockRecord
>9705	Identifier	tbl
>9706	Identifier	rec
>9707	Identifier	rec
>9708	IdentifierDeclType	drwnDataRecord *
>9709	Condition	 
>9710	CallExpression	tbl -> hasKey ( k )
>9711	ArgumentList	k
>9712	Argument	k
>9713	Identifier	k
>9714	Callee	tbl -> hasKey
>9715	PtrMemberAccess	tbl -> hasKey
>9716	Identifier	hasKey
>9717	Identifier	tbl
>9718	ExpressionStatement	 
>9719	CallExpression	recordDlg . addLine ( it -> c_str ( ) , true )
>9720	ArgumentList	it -> c_str ( )
>9721	Argument	true
>9722	Identifier	true
>9723	Argument	it -> c_str ( )
>9724	CallExpression	it -> c_str ( )
>9725	ArgumentList	 
>9726	Callee	it -> c_str
>9727	PtrMemberAccess	it -> c_str
>9728	Identifier	c_str
>9729	Identifier	it
>9730	Callee	recordDlg . addLine
>9731	MemberAccess	recordDlg . addLine
>9732	Identifier	addLine
>9733	Identifier	recordDlg
>9734	IdentifierDeclStatement	 
>9735	IdentifierDecl	* tbl = db -> getTable ( * it )
>9736	AssignmentExpr	* tbl = db -> getTable ( * it )
>9737	CallExpression	db -> getTable ( * it )
>9738	ArgumentList	* it
>9739	Argument	* it
>9740	UnaryOp	* it
>9741	Identifier	it
>9742	UnaryOperator	*
>9743	Callee	db -> getTable
>9744	PtrMemberAccess	db -> getTable
>9745	Identifier	getTable
>9746	Identifier	db
>9747	Identifier	tbl
>9748	Identifier	tbl
>9749	IdentifierDeclType	drwnDataTable *
>9750	IncDecOp	 
>9751	IncDec	++
>9752	Identifier	it
>9753	Condition	 
>9754	EqualityExpression	it != tblNames . end ( )
>9755	CallExpression	tblNames . end ( )
>9756	ArgumentList	 
>9757	Callee	tblNames . end
>9758	MemberAccess	tblNames . end
>9759	Identifier	end
>9760	Identifier	tblNames
>9761	Identifier	it
>9762	ForInit	 
>9763	IdentifierDeclStatement	vector < string > 
>9764	IdentifierDecl	it = tblNames . begin ( )
>9765	AssignmentExpr	it = tblNames . begin ( )
>9766	CallExpression	tblNames . begin ( )
>9767	ArgumentList	 
>9768	Callee	tblNames . begin
>9769	MemberAccess	tblNames . begin
>9770	Identifier	begin
>9771	Identifier	tblNames
>9772	Identifier	it
>9773	Identifier	it
>9774	IdentifierDeclType	vector < string > 
>9775	IdentifierDeclStatement	 
>9776	IdentifierDecl	tblNames = db -> getTableNames ( )
>9777	AssignmentExpr	tblNames = db -> getTableNames ( )
>9778	CallExpression	db -> getTableNames ( )
>9779	ArgumentList	 
>9780	Callee	db -> getTableNames
>9781	PtrMemberAccess	db -> getTableNames
>9782	Identifier	getTableNames
>9783	Identifier	db
>9784	Identifier	tblNames
>9785	Identifier	tblNames
>9786	IdentifierDeclType	vector < string >
>9787	IdentifierDeclStatement	 
>9788	IdentifierDecl	recordDlg ( this , k . c_str ( ) , true )
>9789	Expression	this , k . c_str ( ) , true
>9790	Expression	k . c_str ( ) , true
>9791	Identifier	true
>9792	CallExpression	k . c_str ( )
>9793	ArgumentList	 
>9794	Callee	k . c_str
>9795	MemberAccess	k . c_str
>9796	Identifier	c_str
>9797	Identifier	k
>9798	Identifier	this
>9799	Identifier	recordDlg
>9800	IdentifierDeclType	drwnTextEditor
>9801	IdentifierDeclStatement	 
>9802	IdentifierDecl	k = keys [ dlg . GetSelection ( ) ]
>9803	AssignmentExpr	k = keys [ dlg . GetSelection ( ) ]
>9804	ArrayIndexing	keys [ dlg . GetSelection ( ) ]
>9805	CallExpression	dlg . GetSelection ( )
>9806	ArgumentList	 
>9807	Callee	dlg . GetSelection
>9808	MemberAccess	dlg . GetSelection
>9809	Identifier	GetSelection
>9810	Identifier	dlg
>9811	Identifier	keys
>9812	Identifier	k
>9813	Identifier	k
>9814	IdentifierDeclType	string
>9815	Condition	 
>9816	EqualityExpression	dlg . ShowModal ( ) == wxID_OK
>9817	Identifier	wxID_OK
>9818	CallExpression	dlg . ShowModal ( )
>9819	ArgumentList	 
>9820	Callee	dlg . ShowModal
>9821	MemberAccess	dlg . ShowModal
>9822	Identifier	ShowModal
>9823	Identifier	dlg
>9824	IdentifierDeclStatement	 
>9825	IdentifierDecl	dlg ( this , \"Select data instance
>9826	Expression	this , \"Select data instance
>9827	Expression	\"Select data instance
>9828	Expression	\"View Records\" , ( int ) keys . size ( ) , choices
>9829	Expression	( int ) keys . size ( ) , choices
>9830	Identifier	choices
>9831	CastExpression	( int ) keys . size ( )
>9832	CallExpression	keys . size ( )
>9833	ArgumentList	 
>9834	Callee	keys . size
>9835	MemberAccess	keys . size
>9836	Identifier	size
>9837	Identifier	keys
>9838	CastTarget	int
>9839	PrimaryExpression	\"View Records\"
>9840	PrimaryExpression	\"Select data instance
>9841	Identifier	this
>9842	Identifier	dlg
>9843	IdentifierDeclType	wxSingleChoiceDialog
>9844	ForStatement	for ( unsigned i = 0 ; i < keys . size ( ) ; i ++ )
>9845	CompoundStatement	 
>9846	ExpressionStatement	 
>9847	AssignmentExpr	choices [ i ] = wxString 
>9848	CallExpression	wxString 
>9849	ArgumentList	\"%s (colour %d)\"
>9850	Argument	db -> getColour ( keys [ i ] )
>9851	CallExpression	db -> getColour ( keys [ i ] )
>9852	ArgumentList	keys [ i ]
>9853	Argument	keys [ i ]
>9854	ArrayIndexing	keys [ i ]
>9855	Identifier	i
>9856	Identifier	keys
>9857	Callee	db -> getColour
>9858	PtrMemberAccess	db -> getColour
>9859	Identifier	getColour
>9860	Identifier	db
>9861	Argument	keys [ i ] . c_str ( )
>9862	CallExpression	keys [ i ] . c_str ( )
>9863	ArgumentList	 
>9864	Callee	keys [ i ] . c_str
>9865	MemberAccess	keys [ i ] . c_str
>9866	Identifier	c_str
>9867	ArrayIndexing	keys [ i ]
>9868	Identifier	i
>9869	Identifier	keys
>9870	Argument	\"%s (colour %d)\"
>9871	PrimaryExpression	\"%s (colour %d)\"
>9872	Callee	wxString 
>9873	Identifier	wxString 
>9874	ArrayIndexing	choices [ i ]
>9875	Identifier	i
>9876	Identifier	choices
>9877	IncDecOp	 
>9878	IncDec	++
>9879	Identifier	i
>9880	Condition	 
>9881	RelationalExpression	i < keys . size ( )
>9882	CallExpression	keys . size ( )
>9883	ArgumentList	 
>9884	Callee	keys . size
>9885	MemberAccess	keys . size
>9886	Identifier	size
>9887	Identifier	keys
>9888	Identifier	i
>9889	ForInit	 
>9890	IdentifierDeclStatement	unsigned i = 0 ;
>9891	IdentifierDecl	i = 0
>9892	AssignmentExpr	i = 0
>9893	PrimaryExpression	0
>9894	Identifier	i
>9895	Identifier	i
>9896	IdentifierDeclType	unsigned
>9897	IdentifierDeclStatement	 
>9898	IdentifierDecl	* choices = new wxString [ keys . size ( ) ]
>9899	AssignmentExpr	* choices = new wxString [ keys . size ( ) ]
>9900	CallExpression	keys . size ( )
>9901	ArgumentList	 
>9902	Callee	keys . size
>9903	MemberAccess	keys . size
>9904	Identifier	size
>9905	Identifier	keys
>9906	Identifier	choices
>9907	Identifier	choices
>9908	IdentifierDeclType	wxString *
>9909	IfStatement	if ( keys . empty ( ) )
>9910	CompoundStatement	 
>9911	ReturnStatement	 
>9912	ExpressionStatement	 
>9913	CallExpression	DRWN_LOG_ERROR ( \"database has no records\" )
>9914	ArgumentList	\"database has no records\"
>9915	Argument	\"database has no records\"
>9916	PrimaryExpression	\"database has no records\"
>9917	Callee	DRWN_LOG_ERROR
>9918	Identifier	DRWN_LOG_ERROR
>9919	Condition	 
>9920	CallExpression	keys . empty ( )
>9921	ArgumentList	 
>9922	Callee	keys . empty
>9923	MemberAccess	keys . empty
>9924	Identifier	empty
>9925	Identifier	keys
>9926	IdentifierDeclStatement	 
>9927	IdentifierDecl	keys = db -> getAllKeys ( )
>9928	AssignmentExpr	keys = db -> getAllKeys ( )
>9929	CallExpression	db -> getAllKeys ( )
>9930	ArgumentList	 
>9931	Callee	db -> getAllKeys
>9932	PtrMemberAccess	db -> getAllKeys
>9933	Identifier	getAllKeys
>9934	Identifier	db
>9935	Identifier	keys
>9936	Identifier	keys
>9937	IdentifierDeclType	vector < string >
>9938	IdentifierDeclStatement	 
>9939	IdentifierDecl	* db = _activeCanvas -> _graph -> getDatabase ( )
>9940	AssignmentExpr	* db = _activeCanvas -> _graph -> getDatabase ( )
>9941	CallExpression	_activeCanvas -> _graph -> getDatabase ( )
>9942	ArgumentList	 
>9943	Callee	_activeCanvas -> _graph -> getDatabase
>9944	PtrMemberAccess	_activeCanvas -> _graph -> getDatabase
>9945	Identifier	getDatabase
>9946	PtrMemberAccess	_activeCanvas -> _graph
>9947	Identifier	_graph
>9948	Identifier	_activeCanvas
>9949	Identifier	db
>9950	Identifier	db
>9951	IdentifierDeclType	drwnDatabase *
>9952	Condition	 
>9953	EqualityExpression	event . GetId ( ) == DATABASE_VIEW_INSTANCES
>9954	Identifier	DATABASE_VIEW_INSTANCES
>9955	CallExpression	event . GetId ( )
>9956	ArgumentList	 
>9957	Callee	event . GetId
>9958	MemberAccess	event . GetId
>9959	Identifier	GetId
>9960	Identifier	event
>9961	CompoundStatement	 
>9962	ExpressionStatement	 
>9963	Identifier	choices
>9964	Statement	 
>9965	Statement	 
>9966	Statement	 
>9967	IfStatement	if ( dlg . ShowModal ( ) == wxID_OK )
>9968	CompoundStatement	 
>9969	ExpressionStatement	 
>9970	Identifier	NOT_IMPLEMENTED_YET
>9971	ExpressionStatement	 
>9972	CallExpression	DRWN_LOG_MESSAGE ( \"TODO
>9973	ArgumentList	\"TODO
>9974	Argument	\"TODO
>9975	ShiftExpression	\"TODO
>9976	ArrayIndexing	tblNames [ dlg . GetSelection ( ) ]
>9977	CallExpression	dlg . GetSelection ( )
>9978	ArgumentList	 
>9979	Callee	dlg . GetSelection
>9980	MemberAccess	dlg . GetSelection
>9981	Identifier	GetSelection
>9982	Identifier	dlg
>9983	Identifier	tblNames
>9984	PrimaryExpression	\"TODO
>9985	Callee	DRWN_LOG_MESSAGE
>9986	Identifier	DRWN_LOG_MESSAGE
>9987	Condition	 
>9988	EqualityExpression	dlg . ShowModal ( ) == wxID_OK
>9989	Identifier	wxID_OK
>9990	CallExpression	dlg . ShowModal ( )
>9991	ArgumentList	 
>9992	Callee	dlg . ShowModal
>9993	MemberAccess	dlg . ShowModal
>9994	Identifier	ShowModal
>9995	Identifier	dlg
>9996	IdentifierDeclStatement	 
>9997	IdentifierDecl	dlg ( this , \"Select table
>9998	Expression	this , \"Select table
>9999	Expression	\"Select table
>10000	Expression	\"View Table\" , ( int ) tblNames . size ( ) , choices
>10001	Expression	( int ) tblNames . size ( ) , choices
>10002	Identifier	choices
>10003	CastExpression	( int ) tblNames . size ( )
>10004	CallExpression	tblNames . size ( )
>10005	ArgumentList	 
>10006	Callee	tblNames . size
>10007	MemberAccess	tblNames . size
>10008	Identifier	size
>10009	Identifier	tblNames
>10010	CastTarget	int
>10011	PrimaryExpression	\"View Table\"
>10012	PrimaryExpression	\"Select table
>10013	Identifier	this
>10014	Identifier	dlg
>10015	IdentifierDeclType	wxSingleChoiceDialog
>10016	ForStatement	for ( unsigned i = 0 ; i < tblNames . size ( ) ; i ++ )
>10017	CompoundStatement	 
>10018	ExpressionStatement	 
>10019	AssignmentExpr	choices [ i ] = wxString 
>10020	CallExpression	wxString 
>10021	ArgumentList	\"%s (%d records)\"
>10022	Argument	db -> getTable ( tblNames [ i ] ) -> numRecords ( )
>10023	CallExpression	db -> getTable ( tblNames [ i ] ) -> numRecords ( )
>10024	ArgumentList	 
>10025	Callee	db -> getTable ( tblNames [ i ] ) -> numRecords
>10026	PtrMemberAccess	db -> getTable ( tblNames [ i ] ) -> numRecords
>10027	Identifier	numRecords
>10028	CallExpression	db -> getTable ( tblNames [ i ] )
>10029	ArgumentList	tblNames [ i ]
>10030	Argument	tblNames [ i ]
>10031	ArrayIndexing	tblNames [ i ]
>10032	Identifier	i
>10033	Identifier	tblNames
>10034	Callee	db -> getTable
>10035	PtrMemberAccess	db -> getTable
>10036	Identifier	getTable
>10037	Identifier	db
>10038	Argument	tblNames [ i ] . c_str ( )
>10039	CallExpression	tblNames [ i ] . c_str ( )
>10040	ArgumentList	 
>10041	Callee	tblNames [ i ] . c_str
>10042	MemberAccess	tblNames [ i ] . c_str
>10043	Identifier	c_str
>10044	ArrayIndexing	tblNames [ i ]
>10045	Identifier	i
>10046	Identifier	tblNames
>10047	Argument	\"%s (%d records)\"
>10048	PrimaryExpression	\"%s (%d records)\"
>10049	Callee	wxString 
>10050	Identifier	wxString 
>10051	ArrayIndexing	choices [ i ]
>10052	Identifier	i
>10053	Identifier	choices
>10054	IncDecOp	 
>10055	IncDec	++
>10056	Identifier	i
>10057	Condition	 
>10058	RelationalExpression	i < tblNames . size ( )
>10059	CallExpression	tblNames . size ( )
>10060	ArgumentList	 
>10061	Callee	tblNames . size
>10062	MemberAccess	tblNames . size
>10063	Identifier	size
>10064	Identifier	tblNames
>10065	Identifier	i
>10066	ForInit	 
>10067	IdentifierDeclStatement	unsigned i = 0 ;
>10068	IdentifierDecl	i = 0
>10069	AssignmentExpr	i = 0
>10070	PrimaryExpression	0
>10071	Identifier	i
>10072	Identifier	i
>10073	IdentifierDeclType	unsigned
>10074	IdentifierDeclStatement	 
>10075	IdentifierDecl	* choices = new wxString [ tblNames . size ( ) ]
>10076	AssignmentExpr	* choices = new wxString [ tblNames . size ( ) ]
>10077	CallExpression	tblNames . size ( )
>10078	ArgumentList	 
>10079	Callee	tblNames . size
>10080	MemberAccess	tblNames . size
>10081	Identifier	size
>10082	Identifier	tblNames
>10083	Identifier	choices
>10084	Identifier	choices
>10085	IdentifierDeclType	wxString *
>10086	IfStatement	if ( tblNames . empty ( ) )
>10087	CompoundStatement	 
>10088	ReturnStatement	 
>10089	ExpressionStatement	 
>10090	CallExpression	DRWN_LOG_ERROR ( \"database has no tables\" )
>10091	ArgumentList	\"database has no tables\"
>10092	Argument	\"database has no tables\"
>10093	PrimaryExpression	\"database has no tables\"
>10094	Callee	DRWN_LOG_ERROR
>10095	Identifier	DRWN_LOG_ERROR
>10096	Condition	 
>10097	CallExpression	tblNames . empty ( )
>10098	ArgumentList	 
>10099	Callee	tblNames . empty
>10100	MemberAccess	tblNames . empty
>10101	Identifier	empty
>10102	Identifier	tblNames
>10103	IdentifierDeclStatement	 
>10104	IdentifierDecl	tblNames = db -> getTableNames ( )
>10105	AssignmentExpr	tblNames = db -> getTableNames ( )
>10106	CallExpression	db -> getTableNames ( )
>10107	ArgumentList	 
>10108	Callee	db -> getTableNames
>10109	PtrMemberAccess	db -> getTableNames
>10110	Identifier	getTableNames
>10111	Identifier	db
>10112	Identifier	tblNames
>10113	Identifier	tblNames
>10114	IdentifierDeclType	vector < string >
>10115	IdentifierDeclStatement	 
>10116	IdentifierDecl	* db = _activeCanvas -> _graph -> getDatabase ( )
>10117	AssignmentExpr	* db = _activeCanvas -> _graph -> getDatabase ( )
>10118	CallExpression	_activeCanvas -> _graph -> getDatabase ( )
>10119	ArgumentList	 
>10120	Callee	_activeCanvas -> _graph -> getDatabase
>10121	PtrMemberAccess	_activeCanvas -> _graph -> getDatabase
>10122	Identifier	getDatabase
>10123	PtrMemberAccess	_activeCanvas -> _graph
>10124	Identifier	_graph
>10125	Identifier	_activeCanvas
>10126	Identifier	db
>10127	Identifier	db
>10128	IdentifierDeclType	drwnDatabase *
>10129	Condition	 
>10130	EqualityExpression	event . GetId ( ) == DATABASE_VIEW_TABLES
>10131	Identifier	DATABASE_VIEW_TABLES
>10132	CallExpression	event . GetId ( )
>10133	ArgumentList	 
>10134	Callee	event . GetId
>10135	MemberAccess	event . GetId
>10136	Identifier	GetId
>10137	Identifier	event
>10138	CompoundStatement	 
>10139	ExpressionStatement	 
>10140	CallExpression	updateGUIElements ( )
>10141	ArgumentList	 
>10142	Callee	updateGUIElements
>10143	Identifier	updateGUIElements
>10144	IfStatement	if ( dlg . ShowModal ( ) == wxID_OK )
>10145	CompoundStatement	 
>10146	ExpressionStatement	 
>10147	CallExpression	_activeCanvas -> _graph -> setDatabase ( dlg . GetPath ( ) . c_str ( ) )
>10148	ArgumentList	dlg . GetPath ( ) . c_str ( )
>10149	Argument	dlg . GetPath ( ) . c_str ( )
>10150	CallExpression	dlg . GetPath ( ) . c_str ( )
>10151	ArgumentList	 
>10152	Callee	dlg . GetPath ( ) . c_str
>10153	MemberAccess	dlg . GetPath ( ) . c_str
>10154	Identifier	c_str
>10155	CallExpression	dlg . GetPath ( )
>10156	ArgumentList	 
>10157	Callee	dlg . GetPath
>10158	MemberAccess	dlg . GetPath
>10159	Identifier	GetPath
>10160	Identifier	dlg
>10161	Callee	_activeCanvas -> _graph -> setDatabase
>10162	PtrMemberAccess	_activeCanvas -> _graph -> setDatabase
>10163	Identifier	setDatabase
>10164	PtrMemberAccess	_activeCanvas -> _graph
>10165	Identifier	_graph
>10166	Identifier	_activeCanvas
>10167	Condition	 
>10168	EqualityExpression	dlg . ShowModal ( ) == wxID_OK
>10169	Identifier	wxID_OK
>10170	CallExpression	dlg . ShowModal ( )
>10171	ArgumentList	 
>10172	Callee	dlg . ShowModal
>10173	MemberAccess	dlg . ShowModal
>10174	Identifier	ShowModal
>10175	Identifier	dlg
>10176	IdentifierDeclStatement	 
>10177	IdentifierDecl	dlg ( this , string ( \"Select database for \" ) + _activeCanvas -> _graph -> getTitle ( ) , ( db -> isPersistent ( ) ? \
>10178	Expression	this , string ( \"Select database for \" ) + _activeCanvas -> _graph -> getTitle ( ) , ( db -> isPersistent ( ) ? \
>10179	Expression	string ( \"Select database for \" ) + _activeCanvas -> _graph -> getTitle ( ) , ( db -> isPersistent ( ) ? drwn 
>10180	Expression	( db -> isPersistent ( ) ? drwn 
>10181	Identifier	wxDD_DEFAULT_STYLE
>10182	ConditionalExpression	db -> isPersistent ( ) ? drwn 
>10183	PrimaryExpression	\"\"
>10184	CallExpression	drwn 
>10185	ArgumentList	 
>10186	Callee	drwn 
>10187	MemberAccess	drwn 
>10188	Identifier	c_str
>10189	CallExpression	drwn 
>10190	ArgumentList	db -> name ( )
>10191	Argument	db -> name ( )
>10192	CallExpression	db -> name ( )
>10193	ArgumentList	 
>10194	Callee	db -> name
>10195	PtrMemberAccess	db -> name
>10196	Identifier	name
>10197	Identifier	db
>10198	Callee	drwn 
>10199	Identifier	drwn 
>10200	Condition	db -> isPersistent ( )
>10201	CallExpression	db -> isPersistent ( )
>10202	ArgumentList	 
>10203	Callee	db -> isPersistent
>10204	PtrMemberAccess	db -> isPersistent
>10205	Identifier	isPersistent
>10206	Identifier	db
>10207	AdditiveExpression	string ( \"Select database for \" ) + _activeCanvas -> _graph -> getTitle ( )
>10208	CallExpression	_activeCanvas -> _graph -> getTitle ( )
>10209	ArgumentList	 
>10210	Callee	_activeCanvas -> _graph -> getTitle
>10211	PtrMemberAccess	_activeCanvas -> _graph -> getTitle
>10212	Identifier	getTitle
>10213	PtrMemberAccess	_activeCanvas -> _graph
>10214	Identifier	_graph
>10215	Identifier	_activeCanvas
>10216	CallExpression	string ( \"Select database for \" )
>10217	ArgumentList	\"Select database for \"
>10218	Argument	\"Select database for \"
>10219	PrimaryExpression	\"Select database for \"
>10220	Callee	string
>10221	Identifier	string
>10222	Identifier	this
>10223	Identifier	dlg
>10224	IdentifierDeclType	wxDirDialog
>10225	IdentifierDeclStatement	 
>10226	IdentifierDecl	* db = _activeCanvas -> _graph -> getDatabase ( )
>10227	AssignmentExpr	* db = _activeCanvas -> _graph -> getDatabase ( )
>10228	CallExpression	_activeCanvas -> _graph -> getDatabase ( )
>10229	ArgumentList	 
>10230	Callee	_activeCanvas -> _graph -> getDatabase
>10231	PtrMemberAccess	_activeCanvas -> _graph -> getDatabase
>10232	Identifier	getDatabase
>10233	PtrMemberAccess	_activeCanvas -> _graph
>10234	Identifier	_graph
>10235	Identifier	_activeCanvas
>10236	Identifier	db
>10237	Identifier	db
>10238	IdentifierDeclType	drwnDatabase *
>10239	Condition	 
>10240	EqualityExpression	event . GetId ( ) == DATABASE_CONNECT
>10241	Identifier	DATABASE_CONNECT
>10242	CallExpression	event . GetId ( )
>10243	ArgumentList	 
>10244	Callee	event . GetId
>10245	MemberAccess	event . GetId
>10246	Identifier	GetId
>10247	Identifier	event
>10336	FunctionDef	MainWindow 
>10337	ParameterList	wxCommandEvent & event
>10338	Parameter	 
>10339	Identifier	event
>10340	ParameterType	wxCommandEvent &
>10341	ReturnType	void
>10342	CompoundStatement	 
>10343	ExpressionStatement	 
>10344	CallExpression	Update ( )
>10345	ArgumentList	 
>10346	Callee	Update
>10347	Identifier	Update
>10348	ExpressionStatement	 
>10349	CallExpression	Refresh ( false )
>10350	ArgumentList	false
>10351	Argument	false
>10352	Identifier	false
>10353	Callee	Refresh
>10354	Identifier	Refresh
>10355	IfStatement	if ( event . GetId ( ) == OPTIONS_DISPLAY_VERBOSE )
>10356	ElseStatement	else
>10357	IfStatement	if ( event . GetId ( ) == OPTIONS_DISPLAY_MESSAGE )
>10358	ElseStatement	else
>10359	IfStatement	if ( event . GetId ( ) == OPTIONS_DISPLAY_WARNING )
>10360	ElseStatement	else
>10361	IfStatement	if ( event . GetId ( ) == OPTIONS_BEEP )
>10362	ElseStatement	else
>10363	IfStatement	if ( event . GetId ( ) == OPTIONS_CLEAR_LOG )
>10364	ElseStatement	else
>10365	IfStatement	if ( event . GetId ( ) == OPTIONS_SAVE_LOG )
>10366	CompoundStatement	 
>10367	IfStatement	if ( dlg . ShowModal ( ) == wxID_OK )
>10368	CompoundStatement	 
>10369	ExpressionStatement	 
>10370	CallExpression	drwnLogger 
>10371	ArgumentList	dlg . GetPath ( ) . c_str ( )
>10372	Argument	false
>10373	Identifier	false
>10374	Argument	dlg . GetPath ( ) . c_str ( )
>10375	CallExpression	dlg . GetPath ( ) . c_str ( )
>10376	ArgumentList	 
>10377	Callee	dlg . GetPath ( ) . c_str
>10378	MemberAccess	dlg . GetPath ( ) . c_str
>10379	Identifier	c_str
>10380	CallExpression	dlg . GetPath ( )
>10381	ArgumentList	 
>10382	Callee	dlg . GetPath
>10383	MemberAccess	dlg . GetPath
>10384	Identifier	GetPath
>10385	Identifier	dlg
>10386	Callee	drwnLogger 
>10387	Identifier	drwnLogger 
>10388	Condition	 
>10389	EqualityExpression	dlg . ShowModal ( ) == wxID_OK
>10390	Identifier	wxID_OK
>10391	CallExpression	dlg . ShowModal ( )
>10392	ArgumentList	 
>10393	Callee	dlg . ShowModal
>10394	MemberAccess	dlg . ShowModal
>10395	Identifier	ShowModal
>10396	Identifier	dlg
>10397	IdentifierDeclStatement	 
>10398	IdentifierDecl	dlg ( this , \"Save log file as
>10399	Expression	this , \"Save log file as
>10400	Expression	\"Save log file as
>10401	Expression	\"\" , \"\" , \"Text Files (*.txt)|*.txt|All Files (*.*)|*.*\" , wxFD_SAVE
>10402	Expression	\"\" , \"Text Files (*.txt)|*.txt|All Files (*.*)|*.*\" , wxFD_SAVE
>10403	Expression	\"Text Files (*.txt)|*.txt|All Files (*.*)|*.*\" , wxFD_SAVE
>10404	Identifier	wxFD_SAVE
>10405	PrimaryExpression	\"Text Files (*.txt)|*.txt|All Files (*.*)|*.*\"
>10406	PrimaryExpression	\"\"
>10407	PrimaryExpression	\"\"
>10408	PrimaryExpression	\"Save log file as
>10409	Identifier	this
>10410	Identifier	dlg
>10411	IdentifierDeclType	wxFileDialog
>10412	Condition	 
>10413	EqualityExpression	event . GetId ( ) == OPTIONS_SAVE_LOG
>10414	Identifier	OPTIONS_SAVE_LOG
>10415	CallExpression	event . GetId ( )
>10416	ArgumentList	 
>10417	Callee	event . GetId
>10418	MemberAccess	event . GetId
>10419	Identifier	GetId
>10420	Identifier	event
>10421	CompoundStatement	 
>10422	IfStatement	if ( dlg . ShowModal ( ) == wxID_YES )
>10423	CompoundStatement	 
>10424	ExpressionStatement	 
>10425	CallExpression	_sessionLog -> AppendText ( wxString ( \"Session log restarted
>10426	ArgumentList	wxString ( \"Session log restarted
>10427	Argument	wxString ( \"Session log restarted
>10428	AdditiveExpression	wxString ( \"Session log restarted
>10429	AdditiveExpression	now . Format ( ) + wxString ( \"\n\" )
>10430	CallExpression	wxString ( \"\n\" )
>10431	ArgumentList	\"\n\"
>10432	Argument	\"\n\"
>10433	PrimaryExpression	\"\n\"
>10434	Callee	wxString
>10435	Identifier	wxString
>10436	CallExpression	now . Format ( )
>10437	ArgumentList	 
>10438	Callee	now . Format
>10439	MemberAccess	now . Format
>10440	Identifier	Format
>10441	Identifier	now
>10442	CallExpression	wxString ( \"Session log restarted
>10443	ArgumentList	\"Session log restarted
>10444	Argument	\"Session log restarted
>10445	PrimaryExpression	\"Session log restarted
>10446	Callee	wxString
>10447	Identifier	wxString
>10448	Callee	_sessionLog -> AppendText
>10449	PtrMemberAccess	_sessionLog -> AppendText
>10450	Identifier	AppendText
>10451	Identifier	_sessionLog
>10452	IdentifierDeclStatement	 
>10453	IdentifierDecl	now = wxDateTime 
>10454	AssignmentExpr	now = wxDateTime 
>10455	CallExpression	wxDateTime 
>10456	ArgumentList	 
>10457	Callee	wxDateTime 
>10458	Identifier	wxDateTime 
>10459	Identifier	now
>10460	Identifier	now
>10461	IdentifierDeclType	wxDateTime
>10462	ExpressionStatement	 
>10463	CallExpression	_sessionLog -> SetDefaultStyle ( wxTextAttr ( * wxBLACK ) )
>10464	ArgumentList	wxTextAttr ( * wxBLACK )
>10465	Argument	wxTextAttr ( * wxBLACK )
>10466	CallExpression	wxTextAttr ( * wxBLACK )
>10467	ArgumentList	* wxBLACK
>10468	Argument	* wxBLACK
>10469	UnaryOp	* wxBLACK
>10470	Identifier	wxBLACK
>10471	UnaryOperator	*
>10472	Callee	wxTextAttr
>10473	Identifier	wxTextAttr
>10474	Callee	_sessionLog -> SetDefaultStyle
>10475	PtrMemberAccess	_sessionLog -> SetDefaultStyle
>10476	Identifier	SetDefaultStyle
>10477	Identifier	_sessionLog
>10478	ExpressionStatement	 
>10479	CallExpression	_sessionLog -> Clear ( )
>10480	ArgumentList	 
>10481	Callee	_sessionLog -> Clear
>10482	PtrMemberAccess	_sessionLog -> Clear
>10483	Identifier	Clear
>10484	Identifier	_sessionLog
>10485	Condition	 
>10486	EqualityExpression	dlg . ShowModal ( ) == wxID_YES
>10487	Identifier	wxID_YES
>10488	CallExpression	dlg . ShowModal ( )
>10489	ArgumentList	 
>10490	Callee	dlg . ShowModal
>10491	MemberAccess	dlg . ShowModal
>10492	Identifier	ShowModal
>10493	Identifier	dlg
>10494	IdentifierDeclStatement	 
>10495	IdentifierDecl	dlg ( this , \"Do you really want to clear all session log messages?\" , \"Session Log\" , wxYES_NO | wxICON_QUESTION )
>10496	Expression	this , \"Do you really want to clear all session log messages?\" , \"Session Log\" , wxYES_NO | wxICON_QUESTION
>10497	Expression	\"Do you really want to clear all session log messages?\" , \"Session Log\" , wxYES_NO | wxICON_QUESTION
>10498	Expression	\"Session Log\" , wxYES_NO | wxICON_QUESTION
>10499	InclusiveOrExpression	wxYES_NO | wxICON_QUESTION
>10500	Identifier	wxICON_QUESTION
>10501	Identifier	wxYES_NO
>10502	PrimaryExpression	\"Session Log\"
>10503	PrimaryExpression	\"Do you really want to clear all session log messages?\"
>10504	Identifier	this
>10505	Identifier	dlg
>10506	IdentifierDeclType	wxMessageDialog
>10507	Condition	 
>10508	EqualityExpression	event . GetId ( ) == OPTIONS_CLEAR_LOG
>10509	Identifier	OPTIONS_CLEAR_LOG
>10510	CallExpression	event . GetId ( )
>10511	ArgumentList	 
>10512	Callee	event . GetId
>10513	MemberAccess	event . GetId
>10514	Identifier	GetId
>10515	Identifier	event
>10516	CompoundStatement	 
>10517	ExpressionStatement	 
>10518	CallExpression	wxBell ( )
>10519	ArgumentList	 
>10520	Callee	wxBell
>10521	Identifier	wxBell
>10522	Statement	 
>10523	Condition	 
>10524	EqualityExpression	event . GetId ( ) == OPTIONS_BEEP
>10525	Identifier	OPTIONS_BEEP
>10526	CallExpression	event . GetId ( )
>10527	ArgumentList	 
>10528	Callee	event . GetId
>10529	MemberAccess	event . GetId
>10530	Identifier	GetId
>10531	Identifier	event
>10532	CompoundStatement	 
>10533	ExpressionStatement	 
>10534	CallExpression	drwnLogger 
>10535	ArgumentList	DRWN_LL_WARNING
>10536	Argument	DRWN_LL_WARNING
>10537	Identifier	DRWN_LL_WARNING
>10538	Callee	drwnLogger 
>10539	Identifier	drwnLogger 
>10540	Condition	 
>10541	EqualityExpression	event . GetId ( ) == OPTIONS_DISPLAY_WARNING
>10542	Identifier	OPTIONS_DISPLAY_WARNING
>10543	CallExpression	event . GetId ( )
>10544	ArgumentList	 
>10545	Callee	event . GetId
>10546	MemberAccess	event . GetId
>10547	Identifier	GetId
>10548	Identifier	event
>10549	CompoundStatement	 
>10550	ExpressionStatement	 
>10551	CallExpression	drwnLogger 
>10552	ArgumentList	DRWN_LL_MESSAGE
>10553	Argument	DRWN_LL_MESSAGE
>10554	Identifier	DRWN_LL_MESSAGE
>10555	Callee	drwnLogger 
>10556	Identifier	drwnLogger 
>10557	Condition	 
>10558	EqualityExpression	event . GetId ( ) == OPTIONS_DISPLAY_MESSAGE
>10559	Identifier	OPTIONS_DISPLAY_MESSAGE
>10560	CallExpression	event . GetId ( )
>10561	ArgumentList	 
>10562	Callee	event . GetId
>10563	MemberAccess	event . GetId
>10564	Identifier	GetId
>10565	Identifier	event
>10566	CompoundStatement	 
>10567	ExpressionStatement	 
>10568	CallExpression	drwnLogger 
>10569	ArgumentList	DRWN_LL_VERBOSE
>10570	Argument	DRWN_LL_VERBOSE
>10571	Identifier	DRWN_LL_VERBOSE
>10572	Callee	drwnLogger 
>10573	Identifier	drwnLogger 
>10574	Condition	 
>10575	EqualityExpression	event . GetId ( ) == OPTIONS_DISPLAY_VERBOSE
>10576	Identifier	OPTIONS_DISPLAY_VERBOSE
>10577	CallExpression	event . GetId ( )
>10578	ArgumentList	 
>10579	Callee	event . GetId
>10580	MemberAccess	event . GetId
>10581	Identifier	GetId
>10582	Identifier	event
>10612	FunctionDef	MainWindow 
>10613	ParameterList	wxCommandEvent & event
>10614	Parameter	 
>10615	Identifier	event
>10616	ParameterType	wxCommandEvent &
>10617	ReturnType	void
>10618	CompoundStatement	 
>10619	ExpressionStatement	 
>10620	CallExpression	Update ( )
>10621	ArgumentList	 
>10622	Callee	Update
>10623	Identifier	Update
>10624	ExpressionStatement	 
>10625	CallExpression	Refresh ( false )
>10626	ArgumentList	false
>10627	Argument	false
>10628	Identifier	false
>10629	Callee	Refresh
>10630	Identifier	Refresh
>10631	IfStatement	if ( ( event . GetId ( ) >= WINDOW_MENU_BASE ) && ( event . GetId ( ) < WINDOW_MENU_BASE + 100 ) )
>10632	CompoundStatement	 
>10633	ExpressionStatement	 
>10634	CallExpression	updateGUIElements ( )
>10635	ArgumentList	 
>10636	Callee	updateGUIElements
>10637	Identifier	updateGUIElements
>10638	IfStatement	if ( _canvases [ windowId ] != _activeCanvas )
>10639	CompoundStatement	 
>10640	ExpressionStatement	 
>10641	AssignmentExpr	_activeCanvas = _canvases [ windowId ]
>10642	ArrayIndexing	_canvases [ windowId ]
>10643	Identifier	windowId
>10644	Identifier	_canvases
>10645	Identifier	_activeCanvas
>10646	ExpressionStatement	 
>10647	CallExpression	_splitterWnd -> ReplaceWindow ( _activeCanvas , _canvases [ windowId ] )
>10648	ArgumentList	_activeCanvas
>10649	Argument	_canvases [ windowId ]
>10650	ArrayIndexing	_canvases [ windowId ]
>10651	Identifier	windowId
>10652	Identifier	_canvases
>10653	Argument	_activeCanvas
>10654	Identifier	_activeCanvas
>10655	Callee	_splitterWnd -> ReplaceWindow
>10656	PtrMemberAccess	_splitterWnd -> ReplaceWindow
>10657	Identifier	ReplaceWindow
>10658	Identifier	_splitterWnd
>10659	Condition	 
>10660	EqualityExpression	_canvases [ windowId ] != _activeCanvas
>10661	Identifier	_activeCanvas
>10662	ArrayIndexing	_canvases [ windowId ]
>10663	Identifier	windowId
>10664	Identifier	_canvases
>10665	IdentifierDeclStatement	 
>10666	IdentifierDecl	windowId = event . GetId ( ) - WINDOW_MENU_BASE
>10667	AssignmentExpr	windowId = event . GetId ( ) - WINDOW_MENU_BASE
>10668	AdditiveExpression	event . GetId ( ) - WINDOW_MENU_BASE
>10669	Identifier	WINDOW_MENU_BASE
>10670	CallExpression	event . GetId ( )
>10671	ArgumentList	 
>10672	Callee	event . GetId
>10673	MemberAccess	event . GetId
>10674	Identifier	GetId
>10675	Identifier	event
>10676	Identifier	windowId
>10677	Identifier	windowId
>10678	IdentifierDeclType	int
>10679	Condition	 
>10680	AndExpression	( event . GetId ( ) >= WINDOW_MENU_BASE ) && ( event . GetId ( ) < WINDOW_MENU_BASE + 100 )
>10681	RelationalExpression	event . GetId ( ) < WINDOW_MENU_BASE + 100
>10682	AdditiveExpression	WINDOW_MENU_BASE + 100
>10683	PrimaryExpression	100
>10684	Identifier	WINDOW_MENU_BASE
>10685	CallExpression	event . GetId ( )
>10686	ArgumentList	 
>10687	Callee	event . GetId
>10688	MemberAccess	event . GetId
>10689	Identifier	GetId
>10690	Identifier	event
>10691	RelationalExpression	event . GetId ( ) >= WINDOW_MENU_BASE
>10692	Identifier	WINDOW_MENU_BASE
>10693	CallExpression	event . GetId ( )
>10694	ArgumentList	 
>10695	Callee	event . GetId
>10696	MemberAccess	event . GetId
>10697	Identifier	GetId
>10698	Identifier	event
>10712	FunctionDef	MainWindow 
>10713	ParameterList	wxCommandEvent & event
>10714	Parameter	 
>10715	Identifier	event
>10716	ParameterType	wxCommandEvent &
>10717	ReturnType	void
>10718	CompoundStatement	 
>10719	IfStatement	if ( event . GetId ( ) == HELP_DRWN_CONTENTS )
>10720	ElseStatement	else
>10721	IfStatement	if ( event . GetId ( ) == HELP_RELEASE_NOTES )
>10722	ElseStatement	else
>10723	IfStatement	if ( event . GetId ( ) == HELP_ABOUT )
>10724	CompoundStatement	 
>10725	ExpressionStatement	 
>10726	CallExpression	wxAboutBox ( info )
>10727	ArgumentList	info
>10728	Argument	info
>10729	Identifier	info
>10730	Callee	wxAboutBox
>10731	Identifier	wxAboutBox
>10732	ExpressionStatement	 
>10733	CallExpression	info . SetCopyright ( DRWN_COPYRIGHT )
>10734	ArgumentList	DRWN_COPYRIGHT
>10735	Argument	DRWN_COPYRIGHT
>10736	Identifier	DRWN_COPYRIGHT
>10737	Callee	info . SetCopyright
>10738	MemberAccess	info . SetCopyright
>10739	Identifier	SetCopyright
>10740	Identifier	info
>10741	ExpressionStatement	 
>10742	CallExpression	info . SetDescription ( \"A framework for machine learning\nresearch and development.\" )
>10743	ArgumentList	\"A framework for machine learning\nresearch and development.\"
>10744	Argument	\"A framework for machine learning\nresearch and development.\"
>10745	PrimaryExpression	\"A framework for machine learning\nresearch and development.\"
>10746	Callee	info . SetDescription
>10747	MemberAccess	info . SetDescription
>10748	Identifier	SetDescription
>10749	Identifier	info
>10750	ExpressionStatement	 
>10751	CallExpression	info . SetVersion ( DRWN_VERSION )
>10752	ArgumentList	DRWN_VERSION
>10753	Argument	DRWN_VERSION
>10754	Identifier	DRWN_VERSION
>10755	Callee	info . SetVersion
>10756	MemberAccess	info . SetVersion
>10757	Identifier	SetVersion
>10758	Identifier	info
>10759	ExpressionStatement	 
>10760	CallExpression	info . SetName ( \"Darwin\" )
>10761	ArgumentList	\"Darwin\"
>10762	Argument	\"Darwin\"
>10763	PrimaryExpression	\"Darwin\"
>10764	Callee	info . SetName
>10765	MemberAccess	info . SetName
>10766	Identifier	SetName
>10767	Identifier	info
>10768	IdentifierDeclStatement	 
>10769	IdentifierDecl	info
>10770	Identifier	info
>10771	IdentifierDeclType	wxAboutDialogInfo
>10772	Condition	 
>10773	EqualityExpression	event . GetId ( ) == HELP_ABOUT
>10774	Identifier	HELP_ABOUT
>10775	CallExpression	event . GetId ( )
>10776	ArgumentList	 
>10777	Callee	event . GetId
>10778	MemberAccess	event . GetId
>10779	Identifier	GetId
>10780	Identifier	event
>10781	CompoundStatement	 
>10782	ExpressionStatement	 
>10783	CallExpression	DRWN_LOG_ERROR ( \"Help|Release Notes not implemented yet\" )
>10784	ArgumentList	\"Help|Release Notes not implemented yet\"
>10785	Argument	\"Help|Release Notes not implemented yet\"
>10786	PrimaryExpression	\"Help|Release Notes not implemented yet\"
>10787	Callee	DRWN_LOG_ERROR
>10788	Identifier	DRWN_LOG_ERROR
>10789	ExpressionStatement	 
>10790	CallExpression	wxLaunchDefaultBrowser ( \"http
>10791	ArgumentList	\"http
>10792	Argument	wxBROWSER_NEW_WINDOW
>10793	Identifier	wxBROWSER_NEW_WINDOW
>10794	Argument	\"http
>10795	PrimaryExpression	\"http
>10796	Callee	wxLaunchDefaultBrowser
>10797	Identifier	wxLaunchDefaultBrowser
>10798	Statement	 
>10799	Condition	 
>10800	EqualityExpression	event . GetId ( ) == HELP_RELEASE_NOTES
>10801	Identifier	HELP_RELEASE_NOTES
>10802	CallExpression	event . GetId ( )
>10803	ArgumentList	 
>10804	Callee	event . GetId
>10805	MemberAccess	event . GetId
>10806	Identifier	GetId
>10807	Identifier	event
>10808	CompoundStatement	 
>10809	ExpressionStatement	 
>10810	CallExpression	DRWN_LOG_ERROR ( \"Help|Contents not implemented yet\" )
>10811	ArgumentList	\"Help|Contents not implemented yet\"
>10812	Argument	\"Help|Contents not implemented yet\"
>10813	PrimaryExpression	\"Help|Contents not implemented yet\"
>10814	Callee	DRWN_LOG_ERROR
>10815	Identifier	DRWN_LOG_ERROR
>10816	ExpressionStatement	 
>10817	CallExpression	wxLaunchDefaultBrowser ( \"http
>10818	ArgumentList	\"http
>10819	Argument	wxBROWSER_NEW_WINDOW
>10820	Identifier	wxBROWSER_NEW_WINDOW
>10821	Argument	\"http
>10822	PrimaryExpression	\"http
>10823	Callee	wxLaunchDefaultBrowser
>10824	Identifier	wxLaunchDefaultBrowser
>10825	Statement	 
>10826	Condition	 
>10827	EqualityExpression	event . GetId ( ) == HELP_DRWN_CONTENTS
>10828	Identifier	HELP_DRWN_CONTENTS
>10829	CallExpression	event . GetId ( )
>10830	ArgumentList	 
>10831	Callee	event . GetId
>10832	MemberAccess	event . GetId
>10833	Identifier	GetId
>10834	Identifier	event
>10847	FunctionDef	MainWindow 
>10848	ParameterList	const char * msg , const wxTextAttr style
>10849	Parameter	 
>10850	Identifier	style
>10851	ParameterType	const wxTextAttr
>10852	Parameter	 
>10853	Identifier	msg
>10854	ParameterType	const char *
>10855	ReturnType	void
>10856	CompoundStatement	 
>10857	ExpressionStatement	 
>10858	CallExpression	_sessionLog -> AppendText ( wxString ( msg ) + wxString ( \"\n\" ) )
>10859	ArgumentList	wxString ( msg ) + wxString ( \"\n\" )
>10860	Argument	wxString ( msg ) + wxString ( \"\n\" )
>10861	AdditiveExpression	wxString ( msg ) + wxString ( \"\n\" )
>10862	CallExpression	wxString ( \"\n\" )
>10863	ArgumentList	\"\n\"
>10864	Argument	\"\n\"
>10865	PrimaryExpression	\"\n\"
>10866	Callee	wxString
>10867	Identifier	wxString
>10868	CallExpression	wxString ( msg )
>10869	ArgumentList	msg
>10870	Argument	msg
>10871	Identifier	msg
>10872	Callee	wxString
>10873	Identifier	wxString
>10874	Callee	_sessionLog -> AppendText
>10875	PtrMemberAccess	_sessionLog -> AppendText
>10876	Identifier	AppendText
>10877	Identifier	_sessionLog
>10878	ExpressionStatement	 
>10879	CallExpression	_sessionLog -> SetDefaultStyle ( style )
>10880	ArgumentList	style
>10881	Argument	style
>10882	Identifier	style
>10883	Callee	_sessionLog -> SetDefaultStyle
>10884	PtrMemberAccess	_sessionLog -> SetDefaultStyle
>10885	Identifier	SetDefaultStyle
>10886	Identifier	_sessionLog
>10894	FunctionDef	MainWindow 
>10895	ParameterList	const char * status , double progress
>10896	Parameter	 
>10897	Identifier	progress
>10898	ParameterType	double
>10899	Parameter	 
>10900	Identifier	status
>10901	ParameterType	const char *
>10902	ReturnType	void
>10903	CompoundStatement	 
>10904	CompoundStatement	 
>10905	IfStatement	if ( drwnLogger 
>10906	CompoundStatement	 
>10907	ExpressionStatement	 
>10908	CallExpression	wxSafeYield ( NULL , true )
>10909	ArgumentList	NULL
>10910	Argument	true
>10911	Identifier	true
>10912	Argument	NULL
>10913	Identifier	NULL
>10914	Callee	wxSafeYield
>10915	Identifier	wxSafeYield
>10916	Statement	 
>10917	ExpressionStatement	 
>10918	CallExpression	drwnLogger 
>10919	ArgumentList	false
>10920	Argument	false
>10921	Identifier	false
>10922	Callee	drwnLogger 
>10923	Identifier	drwnLogger 
>10924	ExpressionStatement	 
>10925	CallExpression	DRWN_LOG_WARNING ( \"Terminating current operation. Please wait...\" )
>10926	ArgumentList	\"Terminating current operation. Please wait...\"
>10927	Argument	\"Terminating current operation. Please wait...\"
>10928	PrimaryExpression	\"Terminating current operation. Please wait...\"
>10929	Callee	DRWN_LOG_WARNING
>10930	Identifier	DRWN_LOG_WARNING
>10931	Condition	 
>10932	CallExpression	drwnLogger 
>10933	ArgumentList	 
>10934	Callee	drwnLogger 
>10935	Identifier	drwnLogger 
>10936	Statement	 
>10937	Statement	 
>10938	Statement	 
>10939	Statement	 
>10940	Statement	 
>10941	Statement	 
>10942	Statement	 
>10943	Statement	 
>10944	IfStatement	if ( thisClock - _lastClock > CLOCKS_PER_SEC / 100 )
>10945	CompoundStatement	 
>10946	ExpressionStatement	 
>10947	AssignmentExpr	_lastClock = thisClock
>10948	Identifier	thisClock
>10949	Identifier	_lastClock
>10950	ExpressionStatement	 
>10951	CallExpression	this -> Update ( )
>10952	ArgumentList	 
>10953	Callee	this -> Update
>10954	PtrMemberAccess	this -> Update
>10955	Identifier	Update
>10956	Identifier	this
>10957	Condition	 
>10958	RelationalExpression	thisClock - _lastClock > CLOCKS_PER_SEC / 100
>10959	MultiplicativeExpression	CLOCKS_PER_SEC / 100
>10960	PrimaryExpression	100
>10961	Identifier	CLOCKS_PER_SEC
>10962	AdditiveExpression	thisClock - _lastClock
>10963	Identifier	_lastClock
>10964	Identifier	thisClock
>10965	IdentifierDeclStatement	 
>10966	IdentifierDecl	thisClock = clock ( )
>10967	AssignmentExpr	thisClock = clock ( )
>10968	CallExpression	clock ( )
>10969	ArgumentList	 
>10970	Callee	clock
>10971	Identifier	clock
>10972	Identifier	thisClock
>10973	Identifier	thisClock
>10974	IdentifierDeclType	clock_t
>10975	ExpressionStatement	 
>10976	CallExpression	_statusBar -> Refresh ( false )
>10977	ArgumentList	false
>10978	Argument	false
>10979	Identifier	false
>10980	Callee	_statusBar -> Refresh
>10981	PtrMemberAccess	_statusBar -> Refresh
>10982	Identifier	Refresh
>10983	Identifier	_statusBar
>10984	ExpressionStatement	 
>10985	CallExpression	_statusBar -> updateProgress ( progress )
>10986	ArgumentList	progress
>10987	Argument	progress
>10988	Identifier	progress
>10989	Callee	_statusBar -> updateProgress
>10990	PtrMemberAccess	_statusBar -> updateProgress
>10991	Identifier	updateProgress
>10992	Identifier	_statusBar
>10993	ExpressionStatement	 
>10994	CallExpression	_statusBar -> updateMessage ( wxString ( status ) )
>10995	ArgumentList	wxString ( status )
>10996	Argument	wxString ( status )
>10997	CallExpression	wxString ( status )
>10998	ArgumentList	status
>10999	Argument	status
>11000	Identifier	status
>11001	Callee	wxString
>11002	Identifier	wxString
>11003	Callee	_statusBar -> updateMessage
>11004	PtrMemberAccess	_statusBar -> updateMessage
>11005	Identifier	updateMessage
>11006	Identifier	_statusBar
>11007	IdentifierDeclStatement	 
>11008	IdentifierDecl	_lastClock = clock ( )
>11009	AssignmentExpr	_lastClock = clock ( )
>11010	CallExpression	clock ( )
>11011	ArgumentList	 
>11012	Callee	clock
>11013	Identifier	clock
>11014	Identifier	_lastClock
>11015	Identifier	_lastClock
>11016	IdentifierDeclType	clock_t
>11017	Statement	 
>11034	FunctionDef	MainWindow 
>11035	ParameterList	 
>11036	ReturnType	void
>11037	CompoundStatement	 
>11038	ExpressionStatement	 
>11039	CallExpression	_statusBar -> updateDatabase ( _activeCanvas -> _graph -> getDatabase ( ) )
>11040	ArgumentList	_activeCanvas -> _graph -> getDatabase ( )
>11041	Argument	_activeCanvas -> _graph -> getDatabase ( )
>11042	CallExpression	_activeCanvas -> _graph -> getDatabase ( )
>11043	ArgumentList	 
>11044	Callee	_activeCanvas -> _graph -> getDatabase
>11045	PtrMemberAccess	_activeCanvas -> _graph -> getDatabase
>11046	Identifier	getDatabase
>11047	PtrMemberAccess	_activeCanvas -> _graph
>11048	Identifier	_graph
>11049	Identifier	_activeCanvas
>11050	Callee	_statusBar -> updateDatabase
>11051	PtrMemberAccess	_statusBar -> updateDatabase
>11052	Identifier	updateDatabase
>11053	Identifier	_statusBar
>11054	ForStatement	for ( int i = 0 ; i < ( int ) _canvases . size ( ) ; i ++ )
>11055	CompoundStatement	 
>11056	IfStatement	if ( _canvases [ i ] == _activeCanvas )
>11057	CompoundStatement	 
>11058	ExpressionStatement	 
>11059	CallExpression	_windowMenu -> Enable ( WINDOW_MENU_BASE + i , false )
>11060	ArgumentList	WINDOW_MENU_BASE + i
>11061	Argument	false
>11062	Identifier	false
>11063	Argument	WINDOW_MENU_BASE + i
>11064	AdditiveExpression	WINDOW_MENU_BASE + i
>11065	Identifier	i
>11066	Identifier	WINDOW_MENU_BASE
>11067	Callee	_windowMenu -> Enable
>11068	PtrMemberAccess	_windowMenu -> Enable
>11069	Identifier	Enable
>11070	Identifier	_windowMenu
>11071	Condition	 
>11072	EqualityExpression	_canvases [ i ] == _activeCanvas
>11073	Identifier	_activeCanvas
>11074	ArrayIndexing	_canvases [ i ]
>11075	Identifier	i
>11076	Identifier	_canvases
>11077	ExpressionStatement	 
>11078	CallExpression	_windowMenu -> Append ( WINDOW_MENU_BASE + i , _canvases [ i ] -> _graph -> getTitle ( ) )
>11079	ArgumentList	WINDOW_MENU_BASE + i
>11080	Argument	_canvases [ i ] -> _graph -> getTitle ( )
>11081	CallExpression	_canvases [ i ] -> _graph -> getTitle ( )
>11082	ArgumentList	 
>11083	Callee	_canvases [ i ] -> _graph -> getTitle
>11084	PtrMemberAccess	_canvases [ i ] -> _graph -> getTitle
>11085	Identifier	getTitle
>11086	PtrMemberAccess	_canvases [ i ] -> _graph
>11087	Identifier	_graph
>11088	ArrayIndexing	_canvases [ i ]
>11089	Identifier	i
>11090	Identifier	_canvases
>11091	Argument	WINDOW_MENU_BASE + i
>11092	AdditiveExpression	WINDOW_MENU_BASE + i
>11093	Identifier	i
>11094	Identifier	WINDOW_MENU_BASE
>11095	Callee	_windowMenu -> Append
>11096	PtrMemberAccess	_windowMenu -> Append
>11097	Identifier	Append
>11098	Identifier	_windowMenu
>11099	IncDecOp	 
>11100	IncDec	++
>11101	Identifier	i
>11102	Condition	 
>11103	RelationalExpression	i < ( int ) _canvases . size ( )
>11104	CastExpression	( int ) _canvases . size ( )
>11105	CallExpression	_canvases . size ( )
>11106	ArgumentList	 
>11107	Callee	_canvases . size
>11108	MemberAccess	_canvases . size
>11109	Identifier	size
>11110	Identifier	_canvases
>11111	CastTarget	int
>11112	Identifier	i
>11113	ForInit	 
>11114	IdentifierDeclStatement	int i = 0 ;
>11115	IdentifierDecl	i = 0
>11116	AssignmentExpr	i = 0
>11117	PrimaryExpression	0
>11118	Identifier	i
>11119	Identifier	i
>11120	IdentifierDeclType	int
>11121	WhileStatement	while ( _windowMenu -> GetMenuItemCount ( ) > 0 )
>11122	CompoundStatement	 
>11123	ExpressionStatement	 
>11124	CallExpression	_windowMenu -> Destroy ( _windowMenu -> FindItemByPosition ( 0 ) )
>11125	ArgumentList	_windowMenu -> FindItemByPosition ( 0 )
>11126	Argument	_windowMenu -> FindItemByPosition ( 0 )
>11127	CallExpression	_windowMenu -> FindItemByPosition ( 0 )
>11128	ArgumentList	0
>11129	Argument	0
>11130	PrimaryExpression	0
>11131	Callee	_windowMenu -> FindItemByPosition
>11132	PtrMemberAccess	_windowMenu -> FindItemByPosition
>11133	Identifier	FindItemByPosition
>11134	Identifier	_windowMenu
>11135	Callee	_windowMenu -> Destroy
>11136	PtrMemberAccess	_windowMenu -> Destroy
>11137	Identifier	Destroy
>11138	Identifier	_windowMenu
>11139	Condition	 
>11140	RelationalExpression	_windowMenu -> GetMenuItemCount ( ) > 0
>11141	PrimaryExpression	0
>11142	CallExpression	_windowMenu -> GetMenuItemCount ( )
>11143	ArgumentList	 
>11144	Callee	_windowMenu -> GetMenuItemCount
>11145	PtrMemberAccess	_windowMenu -> GetMenuItemCount
>11146	Identifier	GetMenuItemCount
>11147	Identifier	_windowMenu
>11148	ForStatement	for ( int i = 0 ; i < ( int ) _canvases . size ( ) ; i ++ )
>11149	CompoundStatement	 
>11150	ExpressionStatement	 
>11151	CallExpression	_canvases [ i ] -> Show ( _canvases [ i ] == _activeCanvas )
>11152	ArgumentList	_canvases [ i ] == _activeCanvas
>11153	Argument	_canvases [ i ] == _activeCanvas
>11154	EqualityExpression	_canvases [ i ] == _activeCanvas
>11155	Identifier	_activeCanvas
>11156	ArrayIndexing	_canvases [ i ]
>11157	Identifier	i
>11158	Identifier	_canvases
>11159	Callee	_canvases [ i ] -> Show
>11160	PtrMemberAccess	_canvases [ i ] -> Show
>11161	Identifier	Show
>11162	ArrayIndexing	_canvases [ i ]
>11163	Identifier	i
>11164	Identifier	_canvases
>11165	IncDecOp	 
>11166	IncDec	++
>11167	Identifier	i
>11168	Condition	 
>11169	RelationalExpression	i < ( int ) _canvases . size ( )
>11170	CastExpression	( int ) _canvases . size ( )
>11171	CallExpression	_canvases . size ( )
>11172	ArgumentList	 
>11173	Callee	_canvases . size
>11174	MemberAccess	_canvases . size
>11175	Identifier	size
>11176	Identifier	_canvases
>11177	CastTarget	int
>11178	Identifier	i
>11179	ForInit	 
>11180	IdentifierDeclStatement	int i = 0 ;
>11181	IdentifierDecl	i = 0
>11182	AssignmentExpr	i = 0
>11183	PrimaryExpression	0
>11184	Identifier	i
>11185	Identifier	i
>11186	IdentifierDeclType	int
>11215	FunctionDef	MainWindow 
>11216	ParameterList	 
>11217	ReturnType	void
>11218	CompoundStatement	 
>11219	ExpressionStatement	 
>11220	CallExpression	_copyBuffer . clear ( )
>11221	ArgumentList	 
>11222	Callee	_copyBuffer . clear
>11223	MemberAccess	_copyBuffer . clear
>11224	Identifier	clear
>11225	Identifier	_copyBuffer
>11226	ForStatement	for ( set < drwnNode * > 
>11227	CompoundStatement	 
>11228	ExpressionStatement	 
>11229	UnaryOp	* it
>11230	Identifier	it
>11231	UnaryOperator	*
>11232	Statement	 
>11233	IncDecOp	 
>11234	IncDec	++
>11235	Identifier	it
>11236	Condition	 
>11237	EqualityExpression	it != _copyBuffer . end ( )
>11238	CallExpression	_copyBuffer . end ( )
>11239	ArgumentList	 
>11240	Callee	_copyBuffer . end
>11241	MemberAccess	_copyBuffer . end
>11242	Identifier	end
>11243	Identifier	_copyBuffer
>11244	Identifier	it
>11245	ForInit	 
>11246	IdentifierDeclStatement	set < drwnNode * > 
>11247	IdentifierDecl	it = _copyBuffer . begin ( )
>11248	AssignmentExpr	it = _copyBuffer . begin ( )
>11249	CallExpression	_copyBuffer . begin ( )
>11250	ArgumentList	 
>11251	Callee	_copyBuffer . begin
>11252	MemberAccess	_copyBuffer . begin
>11253	Identifier	begin
>11254	Identifier	_copyBuffer
>11255	Identifier	it
>11256	Identifier	it
>11257	IdentifierDeclType	set < drwnNode * > 
>11265	FunctionDef	MainWindow 
>11266	ParameterList	const char * filename
>11267	Parameter	 
>11268	Identifier	filename
>11269	ParameterType	const char *
>11270	ReturnType	bool
>11271	CompoundStatement	 
>11272	ReturnStatement	 
>11273	Identifier	true
>11274	ExpressionStatement	 
>11275	CallExpression	updateGUIElements ( )
>11276	ArgumentList	 
>11277	Callee	updateGUIElements
>11278	Identifier	updateGUIElements
>11279	ExpressionStatement	 
>11280	CallExpression	_activeCanvas -> Scroll ( 0 , 0 )
>11281	ArgumentList	0
>11282	Argument	0
>11283	PrimaryExpression	0
>11284	Argument	0
>11285	PrimaryExpression	0
>11286	Callee	_activeCanvas -> Scroll
>11287	PtrMemberAccess	_activeCanvas -> Scroll
>11288	Identifier	Scroll
>11289	Identifier	_activeCanvas
>11290	ExpressionStatement	 
>11291	AssignmentExpr	_activeCanvas -> _filename = string ( filename )
>11292	CallExpression	string ( filename )
>11293	ArgumentList	filename
>11294	Argument	filename
>11295	Identifier	filename
>11296	Callee	string
>11297	Identifier	string
>11298	PtrMemberAccess	_activeCanvas -> _filename
>11299	Identifier	_filename
>11300	Identifier	_activeCanvas
>11301	ExpressionStatement	 
>11302	CallExpression	_activeCanvas -> _graph -> read ( filename )
>11303	ArgumentList	filename
>11304	Argument	filename
>11305	Identifier	filename
>11306	Callee	_activeCanvas -> _graph -> read
>11307	PtrMemberAccess	_activeCanvas -> _graph -> read
>11308	Identifier	read
>11309	PtrMemberAccess	_activeCanvas -> _graph
>11310	Identifier	_graph
>11311	Identifier	_activeCanvas
>11312	IfStatement	if ( _activeCanvas -> _graph -> numNodes ( ) != 0 )
>11313	CompoundStatement	 
>11314	ExpressionStatement	 
>11315	AssignmentExpr	_activeCanvas = _canvases . back ( )
>11316	CallExpression	_canvases . back ( )
>11317	ArgumentList	 
>11318	Callee	_canvases . back
>11319	MemberAccess	_canvases . back
>11320	Identifier	back
>11321	Identifier	_canvases
>11322	Identifier	_activeCanvas
>11323	ExpressionStatement	 
>11324	CallExpression	_splitterWnd -> ReplaceWindow ( _activeCanvas , _canvases . back ( ) )
>11325	ArgumentList	_activeCanvas
>11326	Argument	_canvases . back ( )
>11327	CallExpression	_canvases . back ( )
>11328	ArgumentList	 
>11329	Callee	_canvases . back
>11330	MemberAccess	_canvases . back
>11331	Identifier	back
>11332	Identifier	_canvases
>11333	Argument	_activeCanvas
>11334	Identifier	_activeCanvas
>11335	Callee	_splitterWnd -> ReplaceWindow
>11336	PtrMemberAccess	_splitterWnd -> ReplaceWindow
>11337	Identifier	ReplaceWindow
>11338	Identifier	_splitterWnd
>11339	ExpressionStatement	 
>11340	CallExpression	_canvases . push_back ( new MainCanvas ( _splitterWnd ) )
>11341	ArgumentList	_splitterWnd
>11342	Argument	_splitterWnd
>11343	Identifier	_splitterWnd
>11344	Callee	_canvases . push_back
>11345	MemberAccess	_canvases . push_back
>11346	Identifier	push_back
>11347	Identifier	_canvases
>11348	Condition	 
>11349	EqualityExpression	_activeCanvas -> _graph -> numNodes ( ) != 0
>11350	PrimaryExpression	0
>11351	CallExpression	_activeCanvas -> _graph -> numNodes ( )
>11352	ArgumentList	 
>11353	Callee	_activeCanvas -> _graph -> numNodes
>11354	PtrMemberAccess	_activeCanvas -> _graph -> numNodes
>11355	Identifier	numNodes
>11356	PtrMemberAccess	_activeCanvas -> _graph
>11357	Identifier	_graph
>11358	Identifier	_activeCanvas
>11359	ForStatement	for ( vector < MainCanvas * > 
>11360	CompoundStatement	 
>11361	IfStatement	if ( ( * it ) -> _filename == string ( filename ) )
>11362	CompoundStatement	 
>11363	ReturnStatement	 
>11364	Identifier	true
>11365	IfStatement	if ( * it != _activeCanvas )
>11366	CompoundStatement	 
>11367	ExpressionStatement	 
>11368	CallExpression	updateGUIElements ( )
>11369	ArgumentList	 
>11370	Callee	updateGUIElements
>11371	Identifier	updateGUIElements
>11372	ExpressionStatement	 
>11373	AssignmentExpr	_activeCanvas = * it
>11374	UnaryOp	* it
>11375	Identifier	it
>11376	UnaryOperator	*
>11377	Identifier	_activeCanvas
>11378	ExpressionStatement	 
>11379	CallExpression	_splitterWnd -> ReplaceWindow ( _activeCanvas , * it )
>11380	ArgumentList	_activeCanvas
>11381	Argument	* it
>11382	UnaryOp	* it
>11383	Identifier	it
>11384	UnaryOperator	*
>11385	Argument	_activeCanvas
>11386	Identifier	_activeCanvas
>11387	Callee	_splitterWnd -> ReplaceWindow
>11388	PtrMemberAccess	_splitterWnd -> ReplaceWindow
>11389	Identifier	ReplaceWindow
>11390	Identifier	_splitterWnd
>11391	Condition	 
>11392	EqualityExpression	* it != _activeCanvas
>11393	Identifier	_activeCanvas
>11394	UnaryOp	* it
>11395	Identifier	it
>11396	UnaryOperator	*
>11397	ExpressionStatement	 
>11398	CallExpression	wxMessageBox ( wxString 
>11399	ArgumentList	wxString 
>11400	Argument	NULL
>11401	Identifier	NULL
>11402	Argument	wxOK | wxICON_EXCLAMATION
>11403	InclusiveOrExpression	wxOK | wxICON_EXCLAMATION
>11404	Identifier	wxICON_EXCLAMATION
>11405	Identifier	wxOK
>11406	Argument	\"Open...\"
>11407	PrimaryExpression	\"Open...\"
>11408	Argument	wxString 
>11409	CallExpression	wxString 
>11410	ArgumentList	\"Dataflow graph \\"%s\\" is already open.\"
>11411	Argument	filename
>11412	Identifier	filename
>11413	Argument	\"Dataflow graph \\"%s\\" is already open.\"
>11414	PrimaryExpression	\"Dataflow graph \\"%s\\" is already open.\"
>11415	Callee	wxString 
>11416	Identifier	wxString 
>11417	Callee	wxMessageBox
>11418	Identifier	wxMessageBox
>11419	Condition	 
>11420	EqualityExpression	( * it ) -> _filename == string ( filename )
>11421	CallExpression	string ( filename )
>11422	ArgumentList	filename
>11423	Argument	filename
>11424	Identifier	filename
>11425	Callee	string
>11426	Identifier	string
>11427	PtrMemberAccess	( * it ) -> _filename
>11428	Identifier	_filename
>11429	UnaryOp	* it
>11430	Identifier	it
>11431	UnaryOperator	*
>11432	IncDecOp	 
>11433	IncDec	++
>11434	Identifier	it
>11435	Condition	 
>11436	EqualityExpression	it != _canvases . end ( )
>11437	CallExpression	_canvases . end ( )
>11438	ArgumentList	 
>11439	Callee	_canvases . end
>11440	MemberAccess	_canvases . end
>11441	Identifier	end
>11442	Identifier	_canvases
>11443	Identifier	it
>11444	ForInit	 
>11445	IdentifierDeclStatement	vector < MainCanvas * > 
>11446	IdentifierDecl	it = _canvases . begin ( )
>11447	AssignmentExpr	it = _canvases . begin ( )
>11448	CallExpression	_canvases . begin ( )
>11449	ArgumentList	 
>11450	Callee	_canvases . begin
>11451	MemberAccess	_canvases . begin
>11452	Identifier	begin
>11453	Identifier	_canvases
>11454	Identifier	it
>11455	Identifier	it
>11456	IdentifierDeclType	vector < MainCanvas * > 
>11457	ExpressionStatement	 
>11458	CallExpression	DRWN_ASSERT ( filename != NULL )
>11459	ArgumentList	filename != NULL
>11460	Argument	filename != NULL
>11461	EqualityExpression	filename != NULL
>11462	Identifier	NULL
>11463	Identifier	filename
>11464	Callee	DRWN_ASSERT
>11465	Identifier	DRWN_ASSERT
>11492	FunctionDef	usage ()
>11493	ParameterList	 
>11494	ReturnType	void
>11495	CompoundStatement	 
>11496	ExpressionStatement	 
>11497	ShiftExpression	cerr << \"OPTIONS
>11498	ShiftExpression	\"OPTIONS
>11499	ShiftExpression	\"  -plugin <path>    
>11500	ShiftExpression	DRWN_STANDARD_OPTIONS_USAGE << endl
>11501	Identifier	endl
>11502	Identifier	DRWN_STANDARD_OPTIONS_USAGE
>11503	PrimaryExpression	\"  -plugin <path>    
>11504	PrimaryExpression	\"OPTIONS
>11505	Identifier	cerr
>11506	ExpressionStatement	 
>11507	ShiftExpression	cerr << \"USAGE
>11508	PrimaryExpression	\"USAGE
>11509	Identifier	cerr
>11510	ExpressionStatement	 
>11511	ShiftExpression	cerr << DRWN_USAGE_HEADER << \"\n\"
>11512	ShiftExpression	DRWN_USAGE_HEADER << \"\n\"
>11513	PrimaryExpression	\"\n\"
>11514	Identifier	DRWN_USAGE_HEADER
>11515	Identifier	cerr
>11519	FunctionDef	DarwinApp 
>11520	ParameterList	 
>11521	ReturnType	bool
>11522	CompoundStatement	 
>11523	ReturnStatement	 
>11524	Identifier	true
>11525	IfStatement	if ( DRWN_CMDLINE_ARGC == 1 )
>11526	CompoundStatement	 
>11527	ExpressionStatement	 
>11528	CallExpression	gMainWindow -> openGraphFile ( drwn 
>11529	ArgumentList	drwn 
>11530	Argument	drwn 
>11531	CallExpression	drwn 
>11532	ArgumentList	 
>11533	Callee	drwn 
>11534	MemberAccess	drwn 
>11535	Identifier	c_str
>11536	CallExpression	drwn 
>11537	ArgumentList	fullPath
>11538	Argument	fullPath
>11539	Identifier	fullPath
>11540	Callee	drwn 
>11541	Identifier	drwn 
>11542	Callee	gMainWindow -> openGraphFile
>11543	PtrMemberAccess	gMainWindow -> openGraphFile
>11544	Identifier	openGraphFile
>11545	Identifier	gMainWindow
>11546	ExpressionStatement	 
>11547	CallExpression	drwnChangeCurrentDir ( drwn 
>11548	ArgumentList	drwn 
>11549	Argument	drwn 
>11550	CallExpression	drwn 
>11551	ArgumentList	 
>11552	Callee	drwn 
>11553	MemberAccess	drwn 
>11554	Identifier	c_str
>11555	CallExpression	drwn 
>11556	ArgumentList	fullPath
>11557	Argument	fullPath
>11558	Identifier	fullPath
>11559	Callee	drwn 
>11560	Identifier	drwn 
>11561	Callee	drwnChangeCurrentDir
>11562	Identifier	drwnChangeCurrentDir
>11563	IdentifierDeclStatement	 
>11564	IdentifierDecl	fullPath = string ( DRWN_CMDLINE_ARGV [ 0 ] )
>11565	AssignmentExpr	fullPath = string ( DRWN_CMDLINE_ARGV [ 0 ] )
>11566	CallExpression	string ( DRWN_CMDLINE_ARGV [ 0 ] )
>11567	ArgumentList	DRWN_CMDLINE_ARGV [ 0 ]
>11568	Argument	DRWN_CMDLINE_ARGV [ 0 ]
>11569	ArrayIndexing	DRWN_CMDLINE_ARGV [ 0 ]
>11570	PrimaryExpression	0
>11571	Identifier	DRWN_CMDLINE_ARGV
>11572	Callee	string
>11573	Identifier	string
>11574	Identifier	fullPath
>11575	Identifier	fullPath
>11576	IdentifierDeclType	string
>11577	Condition	 
>11578	EqualityExpression	DRWN_CMDLINE_ARGC == 1
>11579	PrimaryExpression	1
>11580	Identifier	DRWN_CMDLINE_ARGC
>11581	ExpressionStatement	 
>11582	AssignmentExpr	drwnLogger 
>11583	Identifier	progressCallback
>11584	Identifier	drwnLogger 
>11585	ExpressionStatement	 
>11586	AssignmentExpr	drwnLogger 
>11587	Identifier	fatalCallback
>11588	Identifier	drwnLogger 
>11589	ExpressionStatement	 
>11590	AssignmentExpr	drwnLogger 
>11591	Identifier	errorCallback
>11592	Identifier	drwnLogger 
>11593	ExpressionStatement	 
>11594	AssignmentExpr	drwnLogger 
>11595	Identifier	warningCallback
>11596	Identifier	drwnLogger 
>11597	ExpressionStatement	 
>11598	AssignmentExpr	drwnLogger 
>11599	Identifier	messageCallback
>11600	Identifier	drwnLogger 
>11601	ExpressionStatement	 
>11602	CallExpression	gMainWindow -> SetFocus ( )
>11603	ArgumentList	 
>11604	Callee	gMainWindow -> SetFocus
>11605	PtrMemberAccess	gMainWindow -> SetFocus
>11606	Identifier	SetFocus
>11607	Identifier	gMainWindow
>11608	ExpressionStatement	 
>11609	CallExpression	gMainWindow -> Show ( )
>11610	ArgumentList	 
>11611	Callee	gMainWindow -> Show
>11612	PtrMemberAccess	gMainWindow -> Show
>11613	Identifier	Show
>11614	Identifier	gMainWindow
>11615	ExpressionStatement	 
>11616	CallExpression	SetTopWindow ( gMainWindow )
>11617	ArgumentList	gMainWindow
>11618	Argument	gMainWindow
>11619	Identifier	gMainWindow
>11620	Callee	SetTopWindow
>11621	Identifier	SetTopWindow
>11622	ExpressionStatement	 
>11623	AssignmentExpr	gMainWindow = new MainWindow ( NULL , wxID_ANY , \"Darwin GUI\" , wxDefaultPosition , wxSize ( 640 , 480 ) )
>11624	Expression	NULL , wxID_ANY , \"Darwin GUI\" , wxDefaultPosition , wxSize ( 640 , 480 )
>11625	Expression	wxID_ANY , \"Darwin GUI\" , wxDefaultPosition , wxSize ( 640 , 480 )
>11626	Expression	\"Darwin GUI\" , wxDefaultPosition , wxSize ( 640 , 480 )
>11627	Expression	wxDefaultPosition , wxSize ( 640 , 480 )
>11628	CallExpression	wxSize ( 640 , 480 )
>11629	ArgumentList	640
>11630	Argument	480
>11631	PrimaryExpression	480
>11632	Argument	640
>11633	PrimaryExpression	640
>11634	Callee	wxSize
>11635	Identifier	wxSize
>11636	Identifier	wxDefaultPosition
>11637	PrimaryExpression	\"Darwin GUI\"
>11638	Identifier	wxID_ANY
>11639	Identifier	NULL
>11640	Identifier	gMainWindow
>11641	IfStatement	if ( DRWN_CMDLINE_ARGC > 1 )
>11642	CompoundStatement	 
>11643	ReturnStatement	 
>11644	Identifier	false
>11645	ExpressionStatement	 
>11646	CallExpression	usage ( )
>11647	ArgumentList	 
>11648	Callee	usage
>11649	Identifier	usage
>11650	Condition	 
>11651	RelationalExpression	DRWN_CMDLINE_ARGC > 1
>11652	PrimaryExpression	1
>11653	Identifier	DRWN_CMDLINE_ARGC
>11654	ExpressionStatement	 
>11655	CallExpression	DRWN_END_CMDLINE_PROCESSING ( usage ( ) )
>11656	ArgumentList	usage ( )
>11657	Argument	usage ( )
>11658	CallExpression	usage ( )
>11659	ArgumentList	 
>11660	Callee	usage
>11661	Identifier	usage
>11662	Callee	DRWN_END_CMDLINE_PROCESSING
>11663	Identifier	DRWN_END_CMDLINE_PROCESSING
>11664	Statement	 
>11665	Statement	 
>11666	Statement	 
>11667	Statement	 
>11668	IfStatement	if ( h == NULL )
>11669	CompoundStatement	 
>11670	ExpressionStatement	 
>11671	CallExpression	DRWN_LOG_ERROR ( dlerror ( ) )
>11672	ArgumentList	dlerror ( )
>11673	Argument	dlerror ( )
>11674	CallExpression	dlerror ( )
>11675	ArgumentList	 
>11676	Callee	dlerror
>11677	Identifier	dlerror
>11678	Callee	DRWN_LOG_ERROR
>11679	Identifier	DRWN_LOG_ERROR
>11680	Condition	 
>11681	EqualityExpression	h == NULL
>11682	Identifier	NULL
>11683	Identifier	h
>11684	IdentifierDeclStatement	 
>11685	IdentifierDecl	* h = dlopen ( p [ 0 ] , RTLD_NOW )
>11686	AssignmentExpr	* h = dlopen ( p [ 0 ] , RTLD_NOW )
>11687	CallExpression	dlopen ( p [ 0 ] , RTLD_NOW )
>11688	ArgumentList	p [ 0 ]
>11689	Argument	RTLD_NOW
>11690	Identifier	RTLD_NOW
>11691	Argument	p [ 0 ]
>11692	ArrayIndexing	p [ 0 ]
>11693	PrimaryExpression	0
>11694	Identifier	p
>11695	Callee	dlopen
>11696	Identifier	dlopen
>11697	Identifier	h
>11698	Identifier	h
>11699	IdentifierDeclType	void *
>11700	Statement	 
>11701	Statement	 
>11702	Statement	 
>11703	Statement	 
>11704	Statement	 
>11705	Statement	 
>11706	Statement	 
>11707	Statement	 
>11708	Statement	 
>11709	Statement	 
>11710	Statement	 
>11711	Statement	 
>11712	IdentifierDeclStatement	 
>11713	IdentifierDecl	* * argv = wxAppConsole 
>11714	AssignmentExpr	* * argv = wxAppConsole 
>11715	Identifier	wxAppConsole 
>11716	Identifier	wxAppConsole 
>11717	Identifier	argv
>11718	IdentifierDeclType	char * *
>11719	IdentifierDeclStatement	 
>11720	IdentifierDecl	argc = wxAppConsole 
>11721	AssignmentExpr	argc = wxAppConsole 
>11722	Identifier	wxAppConsole 
>11723	Identifier	wxAppConsole 
>11724	Identifier	argc
>11725	IdentifierDeclType	int
>11726	ExpressionStatement	 
>11727	CallExpression	TransformProcessType ( & PSN , kProcessTransformToForegroundApplication )
>11728	ArgumentList	& PSN
>11729	Argument	kProcessTransformToForegroundApplication
>11730	Identifier	kProcessTransformToForegroundApplication
>11731	Argument	& PSN
>11732	UnaryOp	& PSN
>11733	Identifier	PSN
>11734	UnaryOperator	&
>11735	Callee	TransformProcessType
>11736	Identifier	TransformProcessType
>11737	ExpressionStatement	 
>11738	CallExpression	GetCurrentProcess ( & PSN )
>11739	ArgumentList	& PSN
>11740	Argument	& PSN
>11741	UnaryOp	& PSN
>11742	Identifier	PSN
>11743	UnaryOperator	&
>11744	Callee	GetCurrentProcess
>11745	Identifier	GetCurrentProcess
>11746	IdentifierDeclStatement	 
>11747	IdentifierDecl	PSN
>11748	Identifier	PSN
>11749	IdentifierDeclType	ProcessSerialNumber
>11793	FunctionDef	DarwinApp 
>11794	ParameterList	 
>11795	ReturnType	int
>11796	CompoundStatement	 
>11797	ReturnStatement	 
>11798	PrimaryExpression	0
>11799	ExpressionStatement	 
>11800	AssignmentExpr	drwnLogger 
>11801	Identifier	NULL
>11802	Identifier	drwnLogger 
>11803	ExpressionStatement	 
>11804	AssignmentExpr	drwnLogger 
>11805	Identifier	NULL
>11806	Identifier	drwnLogger 
>11807	ExpressionStatement	 
>11808	AssignmentExpr	drwnLogger 
>11809	Identifier	NULL
>11810	Identifier	drwnLogger 
>11811	ExpressionStatement	 
>11812	AssignmentExpr	drwnLogger 
>11813	Identifier	NULL
>11814	Identifier	drwnLogger 
>11815	ExpressionStatement	 
>11816	AssignmentExpr	drwnLogger 
>11817	Identifier	NULL
>11818	Identifier	drwnLogger 
<7=13,12,8
<8=9
<9=11,10
<13=14
<14=52,43,15
<15=16
<16=26,17
<17=18
<18=22,19
<19=20
<20=21
<22=23
<23=25,24
<26=36,27
<27=28
<28=29
<29=35,30
<30=34,31
<31=33,32
<36=37
<37=39,38
<39=41,40
<41=42
<43=44
<44=45
<45=51,46
<46=50,47
<47=49,48
<52=53
<53=55,54
<64=70,69,65
<65=66
<66=68,67
<70=106,71
<71=72
<72=102,73
<73=83,74
<74=75
<75=81,76
<76=77
<77=78
<78=80,79
<81=82
<83=84
<84=86,85
<86=87
<87=89,88
<89=96,90
<90=94,91
<91=92
<92=93
<94=95
<96=100,97
<97=98
<98=99
<100=101
<102=103
<103=105,104
<106=116,107
<107=108
<108=109
<109=115,110
<110=114,111
<111=113,112
<116=117
<117=119,118
<119=121,120
<121=122
<135=141,140,136
<136=137
<137=139,138
<141=177,142
<142=143
<143=173,144
<144=154,145
<145=146
<146=152,147
<147=148
<148=149
<149=151,150
<152=153
<154=155
<155=157,156
<157=158
<158=160,159
<160=167,161
<161=165,162
<162=163
<163=164
<165=166
<167=171,168
<168=169
<169=170
<171=172
<173=174
<174=176,175
<177=187,178
<178=179
<179=180
<180=186,181
<181=185,182
<182=184,183
<187=188
<188=190,189
<190=192,191
<192=193
<206=212,211,207
<207=208
<208=210,209
<212=237,222,213
<213=214
<214=220,215
<215=216
<216=217
<217=219,218
<220=221
<222=223
<223=235,224
<224=233,231,227,225
<225=226
<227=228
<228=230,229
<231=232
<233=234
<235=236
<237=238
<238=244,239
<239=243,240
<240=242,241
<252=261,260,253
<253=257,254
<254=256,255
<257=259,258
<261=262
<262=275,263
<263=264
<264=265
<265=271,266
<266=269,267
<267=268
<269=270
<271=272
<272=274,273
<275=276
<276=278,277
<288=308,289
<289=305,302,299,296,293,290
<290=292,291
<293=295,294
<296=298,297
<299=301,300
<302=304,303
<305=307,306
<308=726,710,701,690,679,668,664,653,642,635,624,617,606,595,584,573,562,555,542,538,527,520,509,505,494,487,480,465,309
<309=452,443,440,310
<310=433,411,336,311
<311=312
<312=332,313
<313=330,314
<314=315
<315=317,316
<317=318
<318=320,319
<320=324,321
<321=323,322
<324=328,325
<325=326
<326=327
<328=329
<330=331
<332=333
<333=335,334
<336=398,389,386,337
<337=355,342,338
<338=339
<339=341,340
<342=343
<343=351,344
<344=347,345
<345=346
<347=348
<348=350,349
<351=352
<352=354,353
<355=356
<356=385,384,357
<357=383,358
<358=381,359
<359=372,365,360
<360=361
<361=363,362
<363=364
<365=366
<366=370,367
<367=368
<368=369
<370=371
<372=373
<373=379,374
<374=375
<375=376
<376=378,377
<379=380
<381=382
<386=388,387
<389=390
<390=397,391
<391=393,392
<393=394
<394=396,395
<398=399
<399=400
<400=410,409,401
<401=408,402
<402=404,403
<404=405
<405=407,406
<411=412
<412=432,431,413
<413=430,414
<414=423,415
<415=416
<416=417
<417=419,418
<419=420
<420=422,421
<423=424
<424=426,425
<426=428,427
<428=429
<433=434
<434=439,438,435
<435=437,436
<440=442,441
<443=444
<444=451,445
<445=447,446
<447=448
<448=450,449
<452=453
<453=454
<454=464,463,455
<455=462,456
<456=458,457
<458=459
<459=461,460
<465=466
<466=479,478,467
<467=477,468
<468=470,469
<470=471
<471=473,472
<473=475,474
<475=476
<480=481
<481=486,485,482
<482=484,483
<487=488
<488=490,489
<490=491
<491=493,492
<494=495
<495=501,496
<496=499,497
<497=498
<499=500
<501=502
<502=504,503
<505=506
<506=508,507
<509=510
<510=516,511
<511=514,512
<512=513
<514=515
<516=517
<517=519,518
<520=521
<521=523,522
<523=524
<524=526,525
<527=528
<528=534,529
<529=532,530
<530=531
<532=533
<534=535
<535=537,536
<538=539
<539=541,540
<542=543
<543=554,544
<544=550,545
<545=548,546
<546=547
<548=549
<550=551
<551=553,552
<555=556
<556=558,557
<558=559
<559=561,560
<562=563
<563=569,564
<564=567,565
<565=566
<567=568
<569=570
<570=572,571
<573=574
<574=580,575
<575=578,576
<576=577
<578=579
<580=581
<581=583,582
<584=585
<585=591,586
<586=589,587
<587=588
<589=590
<591=592
<592=594,593
<595=596
<596=602,597
<597=600,598
<598=599
<600=601
<602=603
<603=605,604
<606=607
<607=613,608
<608=611,609
<609=610
<611=612
<613=614
<614=616,615
<617=618
<618=620,619
<620=621
<621=623,622
<624=625
<625=631,626
<626=629,627
<627=628
<629=630
<631=632
<632=634,633
<635=636
<636=638,637
<638=639
<639=641,640
<642=643
<643=649,644
<644=647,645
<645=646
<647=648
<649=650
<650=652,651
<653=654
<654=660,655
<655=658,656
<656=657
<658=659
<660=661
<661=663,662
<664=665
<665=667,666
<668=669
<669=675,670
<670=673,671
<671=672
<673=674
<675=676
<676=678,677
<679=680
<680=686,681
<681=684,682
<682=683
<684=685
<686=687
<687=689,688
<690=691
<691=697,692
<692=693
<693=694
<694=696,695
<697=698
<698=700,699
<701=702
<702=706,703
<703=704
<704=705
<706=707
<707=709,708
<710=711
<711=725,712
<712=714,713
<714=715
<715=717,716
<717=724,718
<718=722,719
<719=720
<720=721
<722=723
<726=727
<727=729,728
<785=787,786
<787=815,806,797,788
<788=793,789
<789=792,790
<790=791
<793=794
<794=796,795
<797=802,798
<798=801,799
<799=800
<802=803
<803=805,804
<806=811,807
<807=810,808
<808=809
<811=812
<812=814,813
<815=820,816
<816=819,817
<817=818
<820=821
<821=823,822
<832=838,837,833
<833=834
<834=836,835
<843=849,848,844
<844=845
<845=847,846
<849=2914,2907,2900,2893,2880,2867,2854,2841,2836,2829,2822,2808,2716,2707,2689,2665,2634,2156,2144,927,850
<850=919,851
<851=907,889,852
<852=853
<853=885,854
<854=874,863,859,855
<855=856
<856=858,857
<859=860
<860=862,861
<863=864
<864=868,865
<865=867,866
<868=870,869
<870=871
<871=873,872
<874=875
<875=879,876
<876=878,877
<879=881,880
<881=882
<882=884,883
<885=886
<886=888,887
<889=890
<890=903,891
<891=892
<892=893
<893=901,894
<894=897,895
<895=896
<897=898
<898=900,899
<901=902
<903=904
<904=906,905
<907=908
<908=918,917,909
<909=916,910
<910=912,911
<912=913
<913=915,914
<919=920
<920=924,921
<921=923,922
<924=926,925
<927=2136,2127,2124,928
<928=2110,2098,2086,2061,2042,1981,1964,1960,1946,1921,1917,1906,1776,1648,1517,1494,1041,1014,929
<929=1006,995,992,930
<930=979,931
<931=932
<932=975,933
<933=966,951,934
<934=935
<935=950,936
<936=944,937
<937=939,938
<939=943,940
<940=942,941
<944=946,945
<946=947
<947=949,948
<951=952
<952=965,953
<953=955,954
<955=959,956
<956=958,957
<959=961,960
<961=962
<962=964,963
<966=967
<967=969,968
<969=970
<970=972,971
<972=974,973
<975=976
<976=978,977
<979=980
<980=991,981
<981=987,982
<982=983
<983=984
<984=986,985
<987=988
<988=990,989
<992=994,993
<995=996
<996=1005,997
<997=1004,998
<998=1000,999
<1000=1001
<1001=1003,1002
<1006=1007
<1007=1008
<1008=1013,1012,1009
<1009=1011,1010
<1014=1015
<1015=1037,1016
<1016=1017
<1017=1018
<1018=1035,1029,1019
<1019=1027,1020
<1020=1025,1023,1021
<1021=1022
<1023=1024
<1025=1026
<1027=1028
<1029=1033,1030
<1030=1031
<1031=1032
<1033=1034
<1035=1036
<1037=1038
<1038=1040,1039
<1041=1486,1475,1472,1042
<1042=1459,1407,1355,1303,1251,1199,1147,1095,1043
<1043=1044
<1044=1091,1045
<1045=1082,1065,1046
<1046=1047
<1047=1064,1048
<1048=1058,1049
<1049=1053,1050
<1050=1052,1051
<1053=1057,1054
<1054=1056,1055
<1058=1060,1059
<1060=1061
<1061=1063,1062
<1065=1066
<1066=1081,1067
<1067=1069,1068
<1069=1071,1070
<1071=1075,1072
<1072=1074,1073
<1075=1077,1076
<1077=1078
<1078=1080,1079
<1082=1083
<1083=1085,1084
<1085=1086
<1086=1088,1087
<1088=1090,1089
<1091=1092
<1092=1094,1093
<1095=1096
<1096=1143,1097
<1097=1134,1117,1098
<1098=1099
<1099=1116,1100
<1100=1110,1101
<1101=1105,1102
<1102=1104,1103
<1105=1109,1106
<1106=1108,1107
<1110=1112,1111
<1112=1113
<1113=1115,1114
<1117=1118
<1118=1133,1119
<1119=1121,1120
<1121=1123,1122
<1123=1127,1124
<1124=1126,1125
<1127=1129,1128
<1129=1130
<1130=1132,1131
<1134=1135
<1135=1137,1136
<1137=1138
<1138=1140,1139
<1140=1142,1141
<1143=1144
<1144=1146,1145
<1147=1148
<1148=1195,1149
<1149=1186,1169,1150
<1150=1151
<1151=1168,1152
<1152=1162,1153
<1153=1157,1154
<1154=1156,1155
<1157=1161,1158
<1158=1160,1159
<1162=1164,1163
<1164=1165
<1165=1167,1166
<1169=1170
<1170=1185,1171
<1171=1173,1172
<1173=1175,1174
<1175=1179,1176
<1176=1178,1177
<1179=1181,1180
<1181=1182
<1182=1184,1183
<1186=1187
<1187=1189,1188
<1189=1190
<1190=1192,1191
<1192=1194,1193
<1195=1196
<1196=1198,1197
<1199=1200
<1200=1247,1201
<1201=1238,1221,1202
<1202=1203
<1203=1220,1204
<1204=1214,1205
<1205=1209,1206
<1206=1208,1207
<1209=1213,1210
<1210=1212,1211
<1214=1216,1215
<1216=1217
<1217=1219,1218
<1221=1222
<1222=1237,1223
<1223=1225,1224
<1225=1227,1226
<1227=1231,1228
<1228=1230,1229
<1231=1233,1232
<1233=1234
<1234=1236,1235
<1238=1239
<1239=1241,1240
<1241=1242
<1242=1244,1243
<1244=1246,1245
<1247=1248
<1248=1250,1249
<1251=1252
<1252=1299,1253
<1253=1290,1273,1254
<1254=1255
<1255=1272,1256
<1256=1266,1257
<1257=1261,1258
<1258=1260,1259
<1261=1265,1262
<1262=1264,1263
<1266=1268,1267
<1268=1269
<1269=1271,1270
<1273=1274
<1274=1289,1275
<1275=1277,1276
<1277=1279,1278
<1279=1283,1280
<1280=1282,1281
<1283=1285,1284
<1285=1286
<1286=1288,1287
<1290=1291
<1291=1293,1292
<1293=1294
<1294=1296,1295
<1296=1298,1297
<1299=1300
<1300=1302,1301
<1303=1304
<1304=1351,1305
<1305=1342,1325,1306
<1306=1307
<1307=1324,1308
<1308=1318,1309
<1309=1313,1310
<1310=1312,1311
<1313=1317,1314
<1314=1316,1315
<1318=1320,1319
<1320=1321
<1321=1323,1322
<1325=1326
<1326=1341,1327
<1327=1329,1328
<1329=1331,1330
<1331=1335,1332
<1332=1334,1333
<1335=1337,1336
<1337=1338
<1338=1340,1339
<1342=1343
<1343=1345,1344
<1345=1346
<1346=1348,1347
<1348=1350,1349
<1351=1352
<1352=1354,1353
<1355=1356
<1356=1403,1357
<1357=1394,1377,1358
<1358=1359
<1359=1376,1360
<1360=1370,1361
<1361=1365,1362
<1362=1364,1363
<1365=1369,1366
<1366=1368,1367
<1370=1372,1371
<1372=1373
<1373=1375,1374
<1377=1378
<1378=1393,1379
<1379=1381,1380
<1381=1383,1382
<1383=1387,1384
<1384=1386,1385
<1387=1389,1388
<1389=1390
<1390=1392,1391
<1394=1395
<1395=1397,1396
<1397=1398
<1398=1400,1399
<1400=1402,1401
<1403=1404
<1404=1406,1405
<1407=1408
<1408=1455,1409
<1409=1446,1429,1410
<1410=1411
<1411=1428,1412
<1412=1422,1413
<1413=1417,1414
<1414=1416,1415
<1417=1421,1418
<1418=1420,1419
<1422=1424,1423
<1424=1425
<1425=1427,1426
<1429=1430
<1430=1445,1431
<1431=1433,1432
<1433=1435,1434
<1435=1439,1436
<1436=1438,1437
<1439=1441,1440
<1441=1442
<1442=1444,1443
<1446=1447
<1447=1449,1448
<1449=1450
<1450=1452,1451
<1452=1454,1453
<1455=1456
<1456=1458,1457
<1459=1460
<1460=1471,1461
<1461=1467,1462
<1462=1463
<1463=1464
<1464=1466,1465
<1467=1468
<1468=1470,1469
<1472=1474,1473
<1475=1476
<1476=1485,1477
<1477=1484,1478
<1478=1480,1479
<1480=1481
<1481=1483,1482
<1486=1487
<1487=1488
<1488=1493,1492,1489
<1489=1491,1490
<1494=1495
<1495=1513,1496
<1496=1497
<1497=1498
<1498=1511,1505,1499
<1499=1501,1500
<1501=1502
<1502=1504,1503
<1505=1509,1506
<1506=1507
<1507=1508
<1509=1510
<1511=1512
<1513=1514
<1514=1516,1515
<1517=1646,1518
<1518=1639,1589,1578,1569,1519
<1519=1520
<1520=1565,1521
<1521=1550,1541,1535,1522
<1522=1523
<1523=1525,1524
<1525=1529,1526
<1526=1528,1527
<1529=1531,1530
<1531=1532
<1532=1534,1533
<1535=1536
<1536=1540,1537
<1537=1539,1538
<1541=1542
<1542=1549,1543
<1543=1545,1544
<1545=1546
<1546=1548,1547
<1550=1551
<1551=1564,1552
<1552=1554,1553
<1554=1556,1555
<1556=1558,1557
<1558=1560,1559
<1560=1561
<1561=1563,1562
<1565=1566
<1566=1568,1567
<1569=1570
<1570=1574,1571
<1571=1572
<1572=1573
<1574=1575
<1575=1577,1576
<1578=1579
<1579=1585,1580
<1580=1581
<1581=1582
<1582=1584,1583
<1585=1586
<1586=1588,1587
<1589=1631,1620,1617,1590
<1590=1604,1591
<1591=1592
<1592=1603,1593
<1593=1601,1594
<1594=1599,1595
<1595=1596
<1596=1598,1597
<1599=1600
<1601=1602
<1604=1605
<1605=1616,1606
<1606=1612,1607
<1607=1608
<1608=1609
<1609=1611,1610
<1612=1613
<1613=1615,1614
<1617=1619,1618
<1620=1621
<1621=1630,1622
<1622=1629,1623
<1623=1625,1624
<1625=1626
<1626=1628,1627
<1631=1632
<1632=1633
<1633=1638,1637,1634
<1634=1636,1635
<1639=1640
<1640=1645,1644,1641
<1641=1643,1642
<1646=1647
<1648=1772,1649
<1649=1650
<1650=1764,1753,1750,1651
<1651=1737,1652
<1652=1724,1653
<1653=1669,1654
<1654=1655
<1655=1666,1656
<1656=1663,1657
<1657=1661,1658
<1658=1659
<1659=1660
<1661=1662
<1663=1665,1664
<1666=1668,1667
<1669=1711,1670
<1670=1691,1671
<1671=1672
<1672=1690,1673
<1673=1686,1674
<1674=1675
<1675=1676
<1676=1683,1677
<1677=1681,1678
<1678=1679
<1679=1680
<1681=1682
<1683=1685,1684
<1686=1687
<1687=1689,1688
<1691=1692
<1692=1705,1693
<1693=1694
<1694=1695
<1695=1697,1696
<1697=1699,1698
<1699=1700
<1700=1702,1701
<1702=1704,1703
<1705=1706
<1706=1708,1707
<1708=1710,1709
<1711=1712
<1712=1721,1713
<1713=1720,1714
<1714=1716,1715
<1716=1717
<1717=1719,1718
<1721=1723,1722
<1724=1725
<1725=1734,1726
<1726=1733,1727
<1727=1729,1728
<1729=1730
<1730=1732,1731
<1734=1736,1735
<1737=1738
<1738=1749,1739
<1739=1745,1740
<1740=1741
<1741=1742
<1742=1744,1743
<1745=1746
<1746=1748,1747
<1750=1752,1751
<1753=1754
<1754=1763,1755
<1755=1762,1756
<1756=1758,1757
<1758=1759
<1759=1761,1760
<1764=1765
<1765=1766
<1766=1771,1770,1767
<1767=1769,1768
<1772=1773
<1773=1775,1774
<1776=1898,1887,1884,1777
<1777=1854,1778
<1778=1841,1799,1779
<1779=1780
<1780=1781
<1781=1782
<1782=1793,1783
<1783=1787,1784
<1784=1786,1785
<1787=1791,1788
<1788=1789
<1789=1790
<1791=1792
<1793=1795,1794
<1795=1796
<1796=1798,1797
<1799=1811,1800
<1800=1801
<1801=1807,1802
<1802=1803
<1803=1804
<1804=1806,1805
<1807=1808
<1808=1810,1809
<1811=1828,1812
<1812=1814,1813
<1814=1815
<1815=1824,1816
<1816=1817
<1817=1818
<1818=1822,1819
<1819=1820
<1820=1821
<1822=1823
<1824=1825
<1825=1827,1826
<1828=1829
<1829=1838,1830
<1830=1832,1831
<1832=1834,1833
<1834=1835
<1835=1837,1836
<1838=1840,1839
<1841=1842
<1842=1851,1843
<1843=1850,1844
<1844=1846,1845
<1846=1847
<1847=1849,1848
<1851=1853,1852
<1854=1855
<1855=1883,1882,1856
<1856=1881,1857
<1857=1877,1858
<1858=1859
<1859=1860
<1860=1871,1861
<1861=1865,1862
<1862=1864,1863
<1865=1869,1866
<1866=1867
<1867=1868
<1869=1870
<1871=1873,1872
<1873=1874
<1874=1876,1875
<1877=1878
<1878=1880,1879
<1884=1886,1885
<1887=1888
<1888=1897,1889
<1889=1896,1890
<1890=1892,1891
<1892=1893
<1893=1895,1894
<1898=1899
<1899=1900
<1900=1905,1904,1901
<1901=1903,1902
<1906=1907
<1907=1913,1908
<1908=1909
<1909=1910
<1910=1912,1911
<1913=1914
<1914=1916,1915
<1917=1918
<1918=1920,1919
<1921=1922
<1922=1944,1923
<1923=1935,1924
<1924=1925
<1925=1934,1926
<1926=1928,1927
<1928=1930,1929
<1930=1931
<1931=1933,1932
<1935=1936
<1936=1943,1937
<1937=1939,1938
<1939=1940
<1940=1942,1941
<1944=1945
<1946=1947
<1947=1958,1948
<1948=1951,1949
<1949=1950
<1951=1952
<1952=1954,1953
<1954=1955
<1955=1957,1956
<1958=1959
<1960=1961
<1961=1963,1962
<1964=1965
<1965=1977,1966
<1966=1973,1971,1969,1967
<1967=1968
<1969=1970
<1971=1972
<1973=1974
<1974=1976,1975
<1977=1978
<1978=1980,1979
<1981=2040,1982
<1982=2029,2020,1983
<1983=1984
<1984=2016,1985
<1985=2012,2008,1997,1986
<1986=1987
<1987=1991,1988
<1988=1990,1989
<1991=1993,1992
<1993=1994
<1994=1996,1995
<1997=1998
<1998=2002,1999
<1999=2001,2000
<2002=2004,2003
<2004=2005
<2005=2007,2006
<2008=2009
<2009=2011,2010
<2012=2013
<2013=2015,2014
<2016=2017
<2017=2019,2018
<2020=2021
<2021=2025,2022
<2022=2023
<2023=2024
<2025=2026
<2026=2028,2027
<2029=2030
<2030=2036,2031
<2031=2032
<2032=2033
<2033=2035,2034
<2036=2037
<2037=2039,2038
<2040=2041
<2042=2043
<2043=2060,2059,2044
<2044=2058,2045
<2045=2054,2046
<2046=2047
<2047=2048
<2048=2050,2049
<2050=2051
<2051=2053,2052
<2054=2055
<2055=2057,2056
<2061=2062
<2062=2085,2084,2063
<2063=2083,2064
<2064=2068,2065
<2065=2067,2066
<2068=2075,2069
<2069=2071,2070
<2071=2072
<2072=2074,2073
<2075=2079,2076
<2076=2077
<2077=2078
<2079=2080
<2080=2082,2081
<2086=2087
<2087=2097,2096,2088
<2088=2095,2089
<2089=2091,2090
<2091=2092
<2092=2094,2093
<2098=2099
<2099=2109,2108,2100
<2100=2107,2101
<2101=2103,2102
<2103=2104
<2104=2106,2105
<2110=2111
<2111=2123,2122,2112
<2112=2121,2113
<2113=2117,2114
<2114=2115
<2115=2116
<2117=2118
<2118=2120,2119
<2124=2126,2125
<2127=2128
<2128=2135,2129
<2129=2131,2130
<2131=2132
<2132=2134,2133
<2136=2137
<2137=2138
<2138=2143,2142,2139
<2139=2141,2140
<2144=2145
<2145=2155,2154,2146
<2146=2148,2147
<2148=2152,2149
<2149=2150
<2150=2151
<2152=2153
<2156=2626,2617,2614,2157
<2157=2600,2581,2560,2539,2158
<2158=2531,2522,2519,2159
<2159=2505,2494,2477,2471,2450,2429,2420,2411,2393,2389,2385,2367,2349,2331,2300,2295,2274,2237,2200,2182,2171,2160
<2160=2161
<2161=2167,2162
<2162=2165,2163
<2163=2164
<2165=2166
<2167=2168
<2168=2170,2169
<2171=2172
<2172=2178,2173
<2173=2174
<2174=2175
<2175=2177,2176
<2178=2179
<2179=2181,2180
<2182=2183
<2183=2196,2184
<2184=2185
<2185=2186
<2186=2194,2187
<2187=2190,2188
<2188=2189
<2190=2191
<2191=2193,2192
<2194=2195
<2196=2197
<2197=2199,2198
<2200=2201
<2201=2234,2202
<2202=2232,2203
<2203=2218,2204
<2204=2205
<2205=2217,2206
<2206=2216,2207
<2207=2215,2208
<2208=2212,2209
<2209=2211,2210
<2212=2214,2213
<2218=2219
<2219=2231,2220
<2220=2230,2221
<2221=2229,2222
<2222=2226,2223
<2223=2225,2224
<2226=2228,2227
<2232=2233
<2234=2236,2235
<2237=2238
<2238=2271,2239
<2239=2269,2240
<2240=2255,2241
<2241=2242
<2242=2254,2243
<2243=2253,2244
<2244=2252,2245
<2245=2249,2246
<2246=2248,2247
<2249=2251,2250
<2255=2256
<2256=2268,2257
<2257=2267,2258
<2258=2266,2259
<2259=2263,2260
<2260=2262,2261
<2263=2265,2264
<2269=2270
<2271=2273,2272
<2274=2275
<2275=2292,2276
<2276=2290,2277
<2277=2284,2278
<2278=2279
<2279=2283,2280
<2280=2282,2281
<2284=2285
<2285=2289,2286
<2286=2288,2287
<2290=2291
<2292=2294,2293
<2295=2296
<2296=2299,2298,2297
<2300=2301
<2301=2327,2302
<2302=2321,2315,2309,2303
<2303=2304
<2304=2308,2305
<2305=2307,2306
<2309=2310
<2310=2314,2311
<2311=2313,2312
<2315=2316
<2316=2320,2317
<2317=2319,2318
<2321=2322
<2322=2326,2323
<2323=2325,2324
<2327=2328
<2328=2330,2329
<2331=2332
<2332=2345,2333
<2333=2334
<2334=2335
<2335=2343,2336
<2336=2339,2337
<2337=2338
<2339=2340
<2340=2342,2341
<2343=2344
<2345=2346
<2346=2348,2347
<2349=2350
<2350=2366,2365,2351
<2351=2364,2352
<2352=2363,2353
<2353=2357,2354
<2354=2356,2355
<2357=2359,2358
<2359=2360
<2360=2362,2361
<2367=2368
<2368=2384,2383,2369
<2369=2382,2370
<2370=2381,2371
<2371=2375,2372
<2372=2374,2373
<2375=2377,2376
<2377=2378
<2378=2380,2379
<2385=2386
<2386=2388,2387
<2389=2390
<2390=2392,2391
<2393=2394
<2394=2410,2409,2395
<2395=2408,2396
<2396=2406,2397
<2397=2398
<2398=2399
<2399=2403,2400
<2400=2402,2401
<2403=2405,2404
<2406=2407
<2411=2412
<2412=2419,2418,2413
<2413=2417,2414
<2414=2416,2415
<2420=2421
<2421=2428,2427,2422
<2422=2426,2423
<2423=2425,2424
<2429=2430
<2430=2449,2448,2431
<2431=2447,2432
<2432=2441,2433
<2433=2435,2434
<2435=2437,2436
<2437=2438
<2438=2440,2439
<2441=2443,2442
<2443=2444
<2444=2446,2445
<2450=2451
<2451=2470,2469,2452
<2452=2468,2453
<2453=2462,2454
<2454=2456,2455
<2456=2458,2457
<2458=2459
<2459=2461,2460
<2462=2464,2463
<2464=2465
<2465=2467,2466
<2471=2473,2472
<2473=2474
<2474=2476,2475
<2477=2478
<2478=2493,2492,2479
<2479=2491,2480
<2480=2482,2481
<2482=2483
<2483=2485,2484
<2485=2487,2486
<2487=2488
<2488=2490,2489
<2494=2496,2495
<2496=2497
<2497=2499,2498
<2499=2501,2500
<2501=2502
<2502=2504,2503
<2505=2506
<2506=2518,2517,2507
<2507=2516,2508
<2508=2512,2509
<2509=2510
<2510=2511
<2512=2513
<2513=2515,2514
<2519=2521,2520
<2522=2523
<2523=2530,2524
<2524=2526,2525
<2526=2527
<2527=2529,2528
<2531=2532
<2532=2533
<2533=2538,2537,2534
<2534=2536,2535
<2539=2540
<2540=2559,2558,2541
<2541=2557,2542
<2542=2551,2543
<2543=2545,2544
<2545=2547,2546
<2547=2548
<2548=2550,2549
<2551=2553,2552
<2553=2554
<2554=2556,2555
<2560=2561
<2561=2580,2579,2562
<2562=2578,2563
<2563=2572,2564
<2564=2566,2565
<2566=2568,2567
<2568=2569
<2569=2571,2570
<2572=2574,2573
<2574=2575
<2575=2577,2576
<2581=2582
<2582=2599,2598,2583
<2583=2597,2584
<2584=2593,2585
<2585=2586
<2586=2587
<2587=2589,2588
<2589=2590
<2590=2592,2591
<2593=2594
<2594=2596,2595
<2600=2601
<2601=2613,2612,2602
<2602=2611,2603
<2603=2607,2604
<2604=2605
<2605=2606
<2607=2608
<2608=2610,2609
<2614=2616,2615
<2617=2618
<2618=2625,2619
<2619=2621,2620
<2621=2622
<2622=2624,2623
<2626=2627
<2627=2628
<2628=2633,2632,2629
<2629=2631,2630
<2634=2635
<2635=2661,2636
<2636=2649,2639,2637
<2637=2638
<2639=2640
<2640=2642,2641
<2642=2648,2643
<2643=2647,2644
<2644=2646,2645
<2649=2650
<2650=2652,2651
<2652=2653
<2653=2655,2654
<2655=2657,2656
<2657=2658
<2658=2660,2659
<2661=2662
<2662=2664,2663
<2665=2666
<2666=2688,2687,2667
<2667=2686,2668
<2668=2682,2669
<2669=2670
<2670=2671
<2671=2673,2672
<2673=2674
<2674=2676,2675
<2676=2678,2677
<2678=2679
<2679=2681,2680
<2682=2683
<2683=2685,2684
<2689=2690
<2690=2703,2691
<2691=2692
<2692=2693
<2693=2701,2694
<2694=2699,2697,2695
<2695=2696
<2697=2698
<2699=2700
<2701=2702
<2703=2704
<2704=2706,2705
<2707=2708
<2708=2714,2709
<2709=2710
<2710=2711
<2711=2713,2712
<2714=2715
<2716=2806,2717
<2717=2786,2752,2718
<2718=2744,2738,2735,2719
<2719=2720
<2720=2721
<2721=2731,2722
<2722=2729,2727,2725,2723
<2723=2724
<2725=2726
<2727=2728
<2729=2730
<2731=2732
<2732=2734,2733
<2735=2737,2736
<2738=2739
<2739=2743,2740
<2740=2742,2741
<2744=2745
<2745=2746
<2746=2751,2750,2747
<2747=2749,2748
<2752=2778,2772,2769,2753
<2753=2754
<2754=2755
<2755=2765,2756
<2756=2763,2761,2759,2757
<2757=2758
<2759=2760
<2761=2762
<2763=2764
<2765=2766
<2766=2768,2767
<2769=2771,2770
<2772=2773
<2773=2777,2774
<2774=2776,2775
<2778=2779
<2779=2780
<2780=2785,2784,2781
<2781=2783,2782
<2786=2787
<2787=2802,2788
<2788=2789
<2789=2790
<2790=2800,2791
<2791=2796,2794,2792
<2792=2793
<2794=2795
<2796=2797
<2797=2799,2798
<2800=2801
<2802=2803
<2803=2805,2804
<2806=2807
<2808=2809
<2809=2818,2810
<2810=2811
<2811=2812
<2812=2816,2813
<2813=2814
<2814=2815
<2816=2817
<2818=2819
<2819=2821,2820
<2822=2823
<2823=2825,2824
<2825=2826
<2826=2828,2827
<2829=2830
<2830=2834,2831
<2831=2832
<2832=2833
<2834=2835
<2836=2837
<2837=2840,2839,2838
<2841=2842
<2842=2852,2843
<2843=2848,2844
<2844=2845
<2845=2847,2846
<2848=2849
<2849=2851,2850
<2852=2853
<2854=2855
<2855=2865,2856
<2856=2861,2857
<2857=2858
<2858=2860,2859
<2861=2862
<2862=2864,2863
<2865=2866
<2867=2877,2874,2871,2868
<2868=2870,2869
<2871=2873,2872
<2874=2876,2875
<2877=2879,2878
<2880=2881
<2881=2891,2882
<2882=2887,2883
<2883=2884
<2884=2886,2885
<2887=2888
<2888=2890,2889
<2891=2892
<2893=2897,2894
<2894=2896,2895
<2897=2899,2898
<2900=2901
<2901=2906,2905,2902
<2902=2904,2903
<2907=2908
<2908=2913,2912,2909
<2909=2911,2910
<2914=2915
<2915=2920,2919,2916
<2916=2918,2917
<3046=3052,3051,3047
<3047=3048
<3048=3050,3049
<3052=3082,3069,3060,3053
<3053=3054
<3054=3056,3055
<3056=3057
<3057=3059,3058
<3060=3061
<3061=3065,3062
<3062=3063
<3063=3064
<3065=3066
<3066=3068,3067
<3069=3070
<3070=3080,3071
<3071=3076,3072
<3072=3073
<3073=3075,3074
<3076=3077
<3077=3079,3078
<3080=3081
<3082=3086,3083
<3083=3085,3084
<3086=3088,3087
<3099=3105,3104,3100
<3100=3101
<3101=3103,3102
<3105=3127,3122,3113,3106
<3106=3107
<3107=3109,3108
<3109=3110
<3110=3112,3111
<3113=3114
<3114=3118,3115
<3115=3116
<3116=3117
<3118=3119
<3119=3121,3120
<3122=3123
<3123=3125,3124
<3125=3126
<3127=3259,3128
<3128=3257,3138,3136,3129
<3129=3130
<3130=3132,3131
<3132=3133
<3133=3135,3134
<3136=3137
<3138=3140,3139
<3140=3248,3141
<3141=3241,3165,3158,3142
<3142=3143
<3143=3154,3144
<3144=3145
<3145=3146
<3146=3150,3147
<3147=3148
<3148=3149
<3150=3151
<3151=3153,3152
<3154=3155
<3155=3157,3156
<3158=3159
<3159=3161,3160
<3161=3162
<3162=3164,3163
<3165=3232,3166
<3166=3208,3167
<3167=3204,3183,3168
<3168=3169
<3169=3170
<3170=3171
<3171=3182,3172
<3172=3179,3173
<3173=3175,3174
<3175=3176
<3176=3178,3177
<3179=3181,3180
<3183=3184
<3184=3185
<3185=3203,3186
<3186=3193,3187
<3187=3189,3188
<3189=3190
<3190=3192,3191
<3193=3202,3194
<3194=3196,3195
<3196=3198,3197
<3198=3199
<3199=3201,3200
<3204=3205
<3205=3207,3206
<3208=3214,3209
<3209=3210
<3210=3211
<3211=3213,3212
<3214=3215
<3215=3224,3216
<3216=3223,3217
<3217=3219,3218
<3219=3220
<3220=3222,3221
<3224=3228,3225
<3225=3226
<3226=3227
<3228=3229
<3229=3231,3230
<3232=3233
<3233=3240,3234
<3234=3236,3235
<3236=3237
<3237=3239,3238
<3241=3242
<3242=3247,3246,3243
<3243=3245,3244
<3248=3249
<3249=3251,3250
<3251=3253,3252
<3253=3254
<3254=3256,3255
<3257=3258
<3259=3260
<3260=3262,3261
<3282=3288,3287,3283
<3283=3284
<3284=3286,3285
<3288=4330,3384,3372,3324,3298,3294,3289
<3289=3290
<3290=3292,3291
<3292=3293
<3294=3295
<3295=3297,3296
<3298=3316,3299
<3299=3307,3300
<3300=3301
<3301=3303,3302
<3303=3304
<3304=3306,3305
<3307=3308
<3308=3312,3309
<3309=3310
<3310=3311
<3312=3313
<3313=3315,3314
<3316=3317
<3317=3321,3318
<3318=3320,3319
<3321=3323,3322
<3324=3368,3325
<3325=3361,3346,3326
<3326=3327
<3327=3342,3328
<3328=3340,3329
<3329=3330
<3330=3338,3331
<3331=3336,3332
<3332=3333
<3333=3335,3334
<3336=3337
<3338=3339
<3340=3341
<3342=3343
<3343=3345,3344
<3346=3347
<3347=3357,3348
<3348=3353,3349
<3349=3350
<3350=3352,3351
<3353=3354
<3354=3356,3355
<3357=3358
<3358=3360,3359
<3361=3365,3362
<3362=3364,3363
<3365=3367,3366
<3368=3369
<3369=3371,3370
<3372=3373
<3373=3383,3382,3374
<3374=3381,3375
<3375=3377,3376
<3377=3378
<3378=3380,3379
<3384=4323,4217,3385
<3385=3386
<3386=4206,4041,3387
<3387=3388
<3388=4034,3857,3389
<3389=3390
<3390=3839,3818,3391
<3391=3392
<3392=3811,3546,3393
<3393=3394
<3394=3539,3490,3395
<3395=3396
<3396=3483,3442,3397
<3397=3398
<3398=3435,3399
<3399=3417,3400
<3400=3401
<3401=3416,3402
<3402=3412,3411,3403
<3403=3407,3404
<3404=3405
<3405=3406
<3407=3408
<3408=3410,3409
<3412=3413
<3413=3415,3414
<3417=3418
<3418=3434,3433,3419
<3419=3432,3420
<3420=3430,3421
<3421=3426,3422
<3422=3423
<3423=3425,3424
<3426=3427
<3427=3429,3428
<3430=3431
<3435=3436
<3436=3438,3437
<3438=3439
<3439=3441,3440
<3442=3443
<3443=3479,3444
<3444=3472,3445
<3445=3463,3446
<3446=3454,3447
<3447=3448
<3448=3450,3449
<3450=3451
<3451=3453,3452
<3454=3455
<3455=3459,3456
<3456=3457
<3457=3458
<3459=3460
<3460=3462,3461
<3463=3464
<3464=3466,3465
<3466=3468,3467
<3468=3469
<3469=3471,3470
<3472=3473
<3473=3478,3477,3474
<3474=3476,3475
<3479=3480
<3480=3482,3481
<3483=3484
<3484=3486,3485
<3486=3487
<3487=3489,3488
<3490=3491
<3491=3535,3527,3492
<3492=3493
<3493=3520,3494
<3494=3512,3504,3495
<3495=3496
<3496=3497
<3497=3498
<3498=3502,3499
<3499=3500
<3500=3501
<3502=3503
<3504=3505
<3505=3506
<3506=3510,3507
<3507=3508
<3508=3509
<3510=3511
<3512=3513
<3513=3517,3514
<3514=3516,3515
<3517=3519,3518
<3520=3521
<3521=3525,3522
<3522=3523
<3523=3524
<3525=3526
<3527=3528
<3528=3529
<3529=3533,3530
<3530=3531
<3531=3532
<3533=3534
<3535=3536
<3536=3538,3537
<3539=3540
<3540=3542,3541
<3542=3543
<3543=3545,3544
<3546=3547
<3547=3807,3691,3548
<3548=3549
<3549=3640,3570,3566,3557,3550
<3550=3551
<3551=3553,3552
<3553=3554
<3554=3556,3555
<3557=3558
<3558=3562,3559
<3559=3560
<3560=3561
<3562=3563
<3563=3565,3564
<3566=3567
<3567=3569,3568
<3570=3627,3618,3615,3571
<3571=3572
<3572=3573
<3573=3609,3574
<3574=3592,3575
<3575=3576
<3576=3584,3577
<3577=3581,3578
<3578=3580,3579
<3581=3583,3582
<3584=3586,3585
<3586=3587
<3587=3589,3588
<3589=3591,3590
<3592=3593
<3593=3601,3594
<3594=3598,3595
<3595=3597,3596
<3598=3600,3599
<3601=3603,3602
<3603=3604
<3604=3606,3605
<3606=3608,3607
<3609=3610
<3610=3612,3611
<3612=3614,3613
<3615=3617,3616
<3618=3619
<3619=3626,3620
<3620=3622,3621
<3622=3623
<3623=3625,3624
<3627=3628
<3628=3629
<3629=3639,3638,3630
<3630=3637,3631
<3631=3633,3632
<3633=3634
<3634=3636,3635
<3640=3687,3641
<3641=3642
<3642=3671,3643
<3643=3653,3644
<3644=3645
<3645=3649,3646
<3646=3647
<3647=3648
<3649=3650
<3650=3652,3651
<3653=3662,3654
<3654=3655
<3655=3656
<3656=3658,3657
<3658=3659
<3659=3661,3660
<3662=3663
<3663=3670,3664
<3664=3666,3665
<3666=3667
<3667=3669,3668
<3671=3672
<3672=3679,3673
<3673=3675,3674
<3675=3676
<3676=3678,3677
<3679=3683,3680
<3680=3681
<3681=3682
<3683=3684
<3684=3686,3685
<3687=3688
<3688=3690,3689
<3691=3802,3795,3784,3773,3764,3727,3696,3692
<3692=3693
<3693=3695,3694
<3696=3697
<3697=3723,3698
<3698=3719,3715,3707,3699
<3699=3700
<3700=3704,3701
<3701=3703,3702
<3704=3706,3705
<3707=3708
<3708=3712,3709
<3709=3711,3710
<3712=3714,3713
<3715=3716
<3716=3718,3717
<3719=3720
<3720=3722,3721
<3723=3724
<3724=3726,3725
<3727=3760,3728
<3728=3729
<3729=3730
<3730=3756,3731
<3731=3752,3748,3740,3732
<3732=3733
<3733=3737,3734
<3734=3736,3735
<3737=3739,3738
<3740=3741
<3741=3745,3742
<3742=3744,3743
<3745=3747,3746
<3748=3749
<3749=3751,3750
<3752=3753
<3753=3755,3754
<3756=3757
<3757=3759,3758
<3760=3761
<3761=3763,3762
<3764=3765
<3765=3769,3766
<3766=3767
<3767=3768
<3769=3770
<3770=3772,3771
<3773=3774
<3774=3780,3775
<3775=3776
<3776=3777
<3777=3779,3778
<3780=3781
<3781=3783,3782
<3784=3785
<3785=3791,3786
<3786=3787
<3787=3788
<3788=3790,3789
<3791=3792
<3792=3794,3793
<3795=3796
<3796=3800,3797
<3797=3798
<3798=3799
<3800=3801
<3802=3803
<3803=3806,3805,3804
<3807=3808
<3808=3810,3809
<3811=3812
<3812=3814,3813
<3814=3815
<3815=3817,3816
<3818=3830,3823,3819
<3819=3820
<3820=3822,3821
<3823=3824
<3824=3826,3825
<3826=3827
<3827=3829,3828
<3830=3831
<3831=3835,3832
<3832=3833
<3833=3834
<3835=3836
<3836=3838,3837
<3839=3840
<3840=3844,3841
<3841=3843,3842
<3844=3851,3845
<3845=3847,3846
<3847=3848
<3848=3850,3849
<3851=3853,3852
<3853=3854
<3854=3856,3855
<3857=3874,3865,3858
<3858=3859
<3859=3861,3860
<3861=3862
<3862=3864,3863
<3865=3866
<3866=3870,3867
<3867=3868
<3868=3869
<3870=3871
<3871=3873,3872
<3874=4026,3974,3875
<3875=3876
<3876=3970,3877
<3877=3882,3878
<3878=3879
<3879=3881,3880
<3882=3968,3883
<3883=3884
<3884=3955,3946,3943,3885
<3885=3921,3899,3886
<3886=3887
<3887=3893,3888
<3888=3891,3889
<3889=3890
<3891=3892
<3893=3894
<3894=3896,3895
<3896=3898,3897
<3899=3900
<3900=3920,3919,3901
<3901=3918,3902
<3902=3917,3903
<3903=3905,3904
<3905=3916,3906
<3906=3908,3907
<3908=3910,3909
<3910=3911
<3911=3913,3912
<3913=3915,3914
<3921=3922
<3922=3942,3941,3923
<3923=3940,3924
<3924=3939,3925
<3925=3927,3926
<3927=3938,3928
<3928=3930,3929
<3930=3932,3931
<3932=3933
<3933=3935,3934
<3935=3937,3936
<3943=3945,3944
<3946=3947
<3947=3954,3948
<3948=3950,3949
<3950=3951
<3951=3953,3952
<3955=3956
<3956=3957
<3957=3967,3966,3958
<3958=3965,3959
<3959=3961,3960
<3961=3962
<3962=3964,3963
<3968=3969
<3970=3971
<3971=3973,3972
<3974=4008,3979,3975
<3975=3976
<3976=3978,3977
<3979=3980
<3980=4006,3981
<3981=4002,3998,3990,3982
<3982=3983
<3983=3987,3984
<3984=3986,3985
<3987=3989,3988
<3990=3991
<3991=3995,3992
<3992=3994,3993
<3995=3997,3996
<3998=3999
<3999=4001,4000
<4002=4003
<4003=4005,4004
<4006=4007
<4008=4017,4009
<4009=4010
<4010=4011
<4011=4013,4012
<4013=4014
<4014=4016,4015
<4017=4018
<4018=4025,4019
<4019=4021,4020
<4021=4022
<4022=4024,4023
<4026=4027
<4027=4031,4028
<4028=4030,4029
<4031=4033,4032
<4034=4035
<4035=4037,4036
<4037=4038
<4038=4040,4039
<4041=4058,4049,4042
<4042=4043
<4043=4045,4044
<4045=4046
<4046=4048,4047
<4049=4050
<4050=4054,4051
<4051=4052
<4052=4053
<4054=4055
<4055=4057,4056
<4058=4202,4078,4059
<4059=4060
<4060=4069,4061
<4061=4062
<4062=4063
<4063=4065,4064
<4065=4066
<4066=4068,4067
<4069=4070
<4070=4077,4071
<4071=4073,4072
<4073=4074
<4074=4076,4075
<4078=4079
<4079=4186,4149,4080
<4080=4081
<4081=4082
<4082=4131,4094,4083
<4083=4084
<4084=4085
<4085=4086
<4086=4090,4087
<4087=4088
<4088=4089
<4090=4091
<4091=4093,4092
<4094=4095
<4095=4122,4105,4096
<4096=4097
<4097=4098
<4098=4099
<4099=4101,4100
<4101=4102
<4102=4104,4103
<4105=4115,4106
<4106=4107
<4107=4111,4108
<4108=4109
<4109=4110
<4111=4112
<4112=4114,4113
<4115=4116
<4116=4118,4117
<4118=4119
<4119=4121,4120
<4122=4123
<4123=4125,4124
<4125=4127,4126
<4127=4128
<4128=4130,4129
<4131=4132
<4132=4141,4133
<4133=4140,4134
<4134=4136,4135
<4136=4137
<4137=4139,4138
<4141=4148,4142
<4142=4144,4143
<4144=4145
<4145=4147,4146
<4149=4159,4150
<4150=4151
<4151=4155,4152
<4152=4153
<4153=4154
<4155=4156
<4156=4158,4157
<4159=4168,4160
<4160=4161
<4161=4162
<4162=4164,4163
<4164=4165
<4165=4167,4166
<4168=4169
<4169=4178,4170
<4170=4177,4171
<4171=4173,4172
<4173=4174
<4174=4176,4175
<4178=4185,4179
<4179=4181,4180
<4181=4182
<4182=4184,4183
<4186=4187
<4187=4194,4188
<4188=4190,4189
<4190=4191
<4191=4193,4192
<4194=4198,4195
<4195=4196
<4196=4197
<4198=4199
<4199=4201,4200
<4202=4203
<4203=4205,4204
<4206=4207
<4207=4211,4208
<4208=4210,4209
<4211=4213,4212
<4213=4214
<4214=4216,4215
<4217=4298,4218
<4218=4290,4219
<4219=4220
<4220=4277,4242,4221
<4221=4222
<4222=4238,4223
<4223=4231,4224
<4224=4225
<4225=4229,4226
<4226=4227
<4227=4228
<4229=4230
<4231=4232
<4232=4236,4233
<4233=4234
<4234=4235
<4236=4237
<4238=4239
<4239=4241,4240
<4242=4251,4247,4243
<4243=4244
<4244=4246,4245
<4247=4248
<4248=4250,4249
<4251=4273,4263,4252
<4252=4253
<4253=4254
<4254=4255
<4255=4257,4256
<4257=4258
<4258=4260,4259
<4260=4262,4261
<4263=4264
<4264=4265
<4265=4267,4266
<4267=4268
<4268=4270,4269
<4270=4272,4271
<4273=4274
<4274=4276,4275
<4277=4278
<4278=4287,4279
<4279=4286,4280
<4280=4282,4281
<4282=4283
<4283=4285,4284
<4287=4289,4288
<4290=4291
<4291=4295,4292
<4292=4294,4293
<4295=4297,4296
<4298=4299
<4299=4321,4300
<4300=4317,4313,4307,4301
<4301=4302
<4302=4306,4303
<4303=4305,4304
<4307=4308
<4308=4312,4309
<4309=4311,4310
<4313=4314
<4314=4316,4315
<4317=4318
<4318=4320,4319
<4321=4322
<4323=4324
<4324=4326,4325
<4326=4327
<4327=4329,4328
<4330=4331
<4331=4353,4332
<4332=4349,4345,4339,4333
<4333=4334
<4334=4338,4335
<4335=4337,4336
<4339=4340
<4340=4344,4341
<4341=4343,4342
<4345=4346
<4346=4348,4347
<4349=4350
<4350=4352,4351
<4353=4354
<4437=4443,4442,4438
<4438=4439
<4439=4441,4440
<4443=4460,4451,4444
<4444=4445
<4445=4447,4446
<4447=4448
<4448=4450,4449
<4451=4452
<4452=4456,4453
<4453=4454
<4454=4455
<4456=4457
<4457=4459,4458
<4460=5488,5425,4461
<4461=4462
<4462=5416,5381,4463
<4463=4464
<4464=5372,5346,4465
<4465=4466
<4466=5337,5301,4467
<4467=4468
<4468=5292,5254,4469
<4469=4470
<4470=5245,5237,4471
<4471=4472
<4472=5228,5206,4473
<4473=4474
<4474=5186,5113,4475
<4475=4476
<4476=5093,5020,4477
<4477=4478
<4478=5011,4938,4479
<4479=4480
<4480=4929,4824,4481
<4481=4482
<4482=4815,4768,4483
<4483=4484
<4484=4759,4485
<4485=4741,4734,4720,4705,4570,4561,4495,4486
<4486=4487
<4487=4491,4488
<4488=4489
<4489=4490
<4491=4492
<4492=4494,4493
<4495=4559,4513,4496
<4496=4497
<4497=4498
<4498=4499
<4499=4509,4500
<4500=4505,4501
<4501=4502
<4502=4504,4503
<4505=4506
<4506=4508,4507
<4509=4510
<4510=4512,4511
<4513=4542,4525,4514
<4514=4515
<4515=4521,4516
<4516=4519,4517
<4517=4518
<4519=4520
<4521=4522
<4522=4524,4523
<4525=4526
<4526=4541,4540,4527
<4527=4539,4528
<4528=4538,4529
<4529=4531,4530
<4531=4537,4532
<4532=4534,4533
<4534=4536,4535
<4542=4543
<4543=4558,4557,4544
<4544=4556,4545
<4545=4555,4546
<4546=4548,4547
<4548=4554,4549
<4549=4551,4550
<4551=4553,4552
<4559=4560
<4561=4562
<4562=4568,4563
<4563=4564
<4564=4565
<4565=4567,4566
<4568=4569
<4570=4692,4683,4680,4571
<4571=4658,4578,4572
<4572=4574,4573
<4574=4575
<4575=4577,4576
<4578=4645,4636,4633,4579
<4579=4580
<4580=4627,4581
<4581=4602,4583,4582
<4583=4584
<4584=4601,4585
<4585=4594,4586
<4586=4587
<4587=4588
<4588=4590,4589
<4590=4591
<4591=4593,4592
<4594=4595
<4595=4597,4596
<4597=4599,4598
<4599=4600
<4602=4603
<4603=4625,4604
<4604=4605
<4605=4606
<4606=4624,4607
<4607=4618,4608
<4608=4617,4609
<4609=4611,4610
<4611=4613,4612
<4613=4614
<4614=4616,4615
<4618=4620,4619
<4620=4621
<4621=4623,4622
<4625=4626
<4627=4628
<4628=4630,4629
<4630=4632,4631
<4633=4635,4634
<4636=4637
<4637=4644,4638
<4638=4640,4639
<4640=4641
<4641=4643,4642
<4645=4646
<4646=4647
<4647=4657,4656,4648
<4648=4655,4649
<4649=4651,4650
<4651=4652
<4652=4654,4653
<4658=4659
<4659=4679,4678,4660
<4660=4677,4661
<4661=4670,4662
<4662=4663
<4663=4664
<4664=4666,4665
<4666=4667
<4667=4669,4668
<4670=4671
<4671=4673,4672
<4673=4675,4674
<4675=4676
<4680=4682,4681
<4683=4684
<4684=4691,4685
<4685=4687,4686
<4687=4688
<4688=4690,4689
<4692=4693
<4693=4694
<4694=4704,4703,4695
<4695=4702,4696
<4696=4698,4697
<4698=4699
<4699=4701,4700
<4705=4706
<4706=4719,4718,4707
<4707=4717,4708
<4708=4710,4709
<4710=4711
<4711=4713,4712
<4713=4715,4714
<4715=4716
<4720=4721
<4721=4733,4732,4722
<4722=4731,4723
<4723=4725,4724
<4725=4727,4726
<4727=4728
<4728=4730,4729
<4734=4735
<4735=4740,4739,4736
<4736=4738,4737
<4741=4742
<4742=4757,4743
<4743=4744
<4744=4745
<4745=4756,4746
<4746=4748,4747
<4748=4750,4749
<4750=4752,4751
<4752=4753
<4753=4755,4754
<4757=4758
<4759=4760
<4760=4762,4761
<4762=4764,4763
<4764=4765
<4765=4767,4766
<4768=4799,4769
<4769=4790,4770
<4770=4771
<4771=4772
<4772=4786,4773
<4773=4774
<4774=4775
<4775=4777,4776
<4777=4778
<4778=4780,4779
<4780=4782,4781
<4782=4783
<4783=4785,4784
<4786=4787
<4787=4789,4788
<4790=4791
<4791=4793,4792
<4793=4795,4794
<4795=4796
<4796=4798,4797
<4799=4800
<4800=4814,4813,4801
<4801=4812,4802
<4802=4811,4803
<4803=4810,4804
<4804=4806,4805
<4806=4807
<4807=4809,4808
<4815=4816
<4816=4818,4817
<4818=4820,4819
<4820=4821
<4821=4823,4822
<4824=4920,4913,4881,4825
<4825=4872,4826
<4826=4863,4854,4827
<4827=4838,4828
<4828=4829
<4829=4830
<4830=4834,4831
<4831=4832
<4832=4833
<4834=4835
<4835=4837,4836
<4838=4839
<4839=4846,4840
<4840=4842,4841
<4842=4843
<4843=4845,4844
<4846=4850,4847
<4847=4848
<4848=4849
<4850=4851
<4851=4853,4852
<4854=4859,4855
<4855=4856
<4856=4858,4857
<4859=4860
<4860=4862,4861
<4863=4864
<4864=4868,4865
<4865=4866
<4866=4867
<4868=4869
<4869=4871,4870
<4872=4873
<4873=4875,4874
<4875=4877,4876
<4877=4878
<4878=4880,4879
<4881=4882
<4882=4912,4911,4883
<4883=4910,4884
<4884=4890,4885
<4885=4889,4886
<4886=4888,4887
<4890=4904,4891
<4891=4898,4892
<4892=4896,4893
<4893=4894
<4894=4895
<4896=4897
<4898=4900,4899
<4900=4901
<4901=4903,4902
<4904=4908,4905
<4905=4906
<4906=4907
<4908=4909
<4913=4914
<4914=4919,4918,4915
<4915=4917,4916
<4920=4921
<4921=4927,4922
<4922=4923
<4923=4924
<4924=4926,4925
<4927=4928
<4929=4930
<4930=4932,4931
<4932=4934,4933
<4934=4935
<4935=4937,4936
<4938=4975,4939
<4939=4967,4958,4955,4940
<4940=4941
<4941=4942
<4942=4944,4943
<4944=4945
<4945=4947,4946
<4947=4951,4948
<4948=4949
<4949=4950
<4951=4952
<4952=4954,4953
<4955=4957,4956
<4958=4959
<4959=4966,4960
<4960=4962,4961
<4962=4963
<4963=4965,4964
<4967=4968
<4968=4969
<4969=4974,4973,4970
<4970=4972,4971
<4975=5003,4994,4991,4976
<4976=4977
<4977=4978
<4978=4980,4979
<4980=4981
<4981=4983,4982
<4983=4987,4984
<4984=4985
<4985=4986
<4987=4988
<4988=4990,4989
<4991=4993,4992
<4994=4995
<4995=5002,4996
<4996=4998,4997
<4998=4999
<4999=5001,5000
<5003=5004
<5004=5005
<5005=5010,5009,5006
<5006=5008,5007
<5011=5012
<5012=5014,5013
<5014=5016,5015
<5016=5017
<5017=5019,5018
<5020=5079,5021
<5021=5075,5039,5022
<5022=5023
<5023=5028,5024
<5024=5025
<5025=5027,5026
<5028=5029
<5029=5038,5030
<5030=5034,5031
<5031=5032
<5032=5033
<5034=5035
<5035=5037,5036
<5039=5066,5048,5044,5040
<5040=5041
<5041=5043,5042
<5044=5045
<5045=5047,5046
<5048=5049
<5049=5055,5050
<5050=5051
<5051=5052
<5052=5054,5053
<5055=5056
<5056=5058,5057
<5058=5062,5059
<5059=5060
<5060=5061
<5062=5063
<5063=5065,5064
<5066=5067
<5067=5073,5068
<5068=5069
<5069=5070
<5070=5072,5071
<5073=5074
<5075=5076
<5076=5078,5077
<5079=5080
<5080=5092,5091,5081
<5081=5090,5082
<5082=5084,5083
<5084=5086,5085
<5086=5087
<5087=5089,5088
<5093=5094
<5094=5105,5095
<5095=5099,5096
<5096=5098,5097
<5099=5101,5100
<5101=5102
<5102=5104,5103
<5105=5107,5106
<5107=5109,5108
<5109=5110
<5110=5112,5111
<5113=5172,5114
<5114=5168,5132,5115
<5115=5116
<5116=5121,5117
<5117=5118
<5118=5120,5119
<5121=5122
<5122=5131,5123
<5123=5127,5124
<5124=5125
<5125=5126
<5127=5128
<5128=5130,5129
<5132=5159,5141,5137,5133
<5133=5134
<5134=5136,5135
<5137=5138
<5138=5140,5139
<5141=5142
<5142=5148,5143
<5143=5144
<5144=5145
<5145=5147,5146
<5148=5149
<5149=5151,5150
<5151=5155,5152
<5152=5153
<5153=5154
<5155=5156
<5156=5158,5157
<5159=5160
<5160=5166,5161
<5161=5162
<5162=5163
<5163=5165,5164
<5166=5167
<5168=5169
<5169=5171,5170
<5172=5173
<5173=5185,5184,5174
<5174=5183,5175
<5175=5177,5176
<5177=5179,5178
<5179=5180
<5180=5182,5181
<5186=5187
<5187=5198,5188
<5188=5192,5189
<5189=5191,5190
<5192=5194,5193
<5194=5195
<5195=5197,5196
<5198=5200,5199
<5200=5202,5201
<5202=5203
<5203=5205,5204
<5206=5221,5214,5207
<5207=5208
<5208=5212,5209
<5209=5210
<5210=5211
<5212=5213
<5214=5215
<5215=5217,5216
<5217=5218
<5218=5220,5219
<5221=5222
<5222=5226,5223
<5223=5224
<5224=5225
<5226=5227
<5228=5229
<5229=5231,5230
<5231=5233,5232
<5233=5234
<5234=5236,5235
<5237=5238
<5238=5239
<5239=5241,5240
<5241=5242
<5242=5244,5243
<5245=5246
<5246=5248,5247
<5248=5250,5249
<5250=5251
<5251=5253,5252
<5254=5285,5276,5269,5262,5255
<5255=5256
<5256=5260,5257
<5257=5258
<5258=5259
<5260=5261
<5262=5263
<5263=5265,5264
<5265=5266
<5266=5268,5267
<5269=5270
<5270=5272,5271
<5272=5273
<5273=5275,5274
<5276=5277
<5277=5281,5278
<5278=5279
<5279=5280
<5281=5282
<5282=5284,5283
<5285=5286
<5286=5290,5287
<5287=5288
<5288=5289
<5290=5291
<5292=5293
<5293=5295,5294
<5295=5297,5296
<5297=5298
<5298=5300,5299
<5301=5330,5323,5316,5309,5302
<5302=5303
<5303=5307,5304
<5304=5305
<5305=5306
<5307=5308
<5309=5310
<5310=5312,5311
<5312=5313
<5313=5315,5314
<5316=5317
<5317=5319,5318
<5319=5320
<5320=5322,5321
<5323=5324
<5324=5326,5325
<5326=5327
<5327=5329,5328
<5330=5331
<5331=5335,5332
<5332=5333
<5333=5334
<5335=5336
<5337=5338
<5338=5340,5339
<5340=5342,5341
<5342=5343
<5343=5345,5344
<5346=5347
<5347=5365,5357,5348
<5348=5349
<5349=5350
<5350=5351
<5351=5353,5352
<5353=5354
<5354=5356,5355
<5357=5358
<5358=5359
<5359=5361,5360
<5361=5362
<5362=5364,5363
<5365=5366
<5366=5368,5367
<5368=5369
<5369=5371,5370
<5372=5373
<5373=5375,5374
<5375=5377,5376
<5377=5378
<5378=5380,5379
<5381=5409,5382
<5382=5400,5383
<5383=5391,5384
<5384=5385
<5385=5387,5386
<5387=5388
<5388=5390,5389
<5391=5392
<5392=5396,5393
<5393=5394
<5394=5395
<5396=5397
<5397=5399,5398
<5400=5401
<5401=5403,5402
<5403=5405,5404
<5405=5406
<5406=5408,5407
<5409=5410
<5410=5415,5414,5411
<5411=5413,5412
<5416=5417
<5417=5419,5418
<5419=5421,5420
<5421=5422
<5422=5424,5423
<5425=5479,5472,5456,5426
<5426=5447,5427
<5427=5428
<5428=5429
<5429=5443,5430
<5430=5431
<5431=5432
<5432=5434,5433
<5434=5435
<5435=5437,5436
<5437=5439,5438
<5439=5440
<5440=5442,5441
<5443=5444
<5444=5446,5445
<5447=5448
<5448=5450,5449
<5450=5452,5451
<5452=5453
<5453=5455,5454
<5456=5457
<5457=5471,5470,5458
<5458=5469,5459
<5459=5468,5460
<5460=5467,5461
<5461=5463,5462
<5463=5464
<5464=5466,5465
<5472=5473
<5473=5478,5477,5474
<5474=5476,5475
<5479=5480
<5480=5486,5481
<5481=5482
<5482=5483
<5483=5485,5484
<5486=5487
<5488=5489
<5489=5491,5490
<5491=5493,5492
<5493=5494
<5494=5496,5495
<5568=5583,5582,5569
<5569=5579,5576,5573,5570
<5570=5572,5571
<5573=5575,5574
<5576=5578,5577
<5579=5581,5580
<5583=5707,5691,5600,5591,5584
<5584=5585
<5585=5587,5586
<5587=5588
<5588=5590,5589
<5591=5592
<5592=5596,5593
<5593=5594
<5594=5595
<5596=5597
<5597=5599,5598
<5600=5683,5674,5671,5601
<5601=5657,5602
<5602=5613,5603
<5603=5604
<5604=5605
<5605=5609,5606
<5606=5607
<5607=5608
<5609=5610
<5610=5612,5611
<5613=5614
<5614=5649,5615
<5615=5637,5616
<5616=5629,5617
<5617=5626,5618
<5618=5620,5619
<5620=5622,5621
<5622=5623
<5623=5625,5624
<5626=5628,5627
<5629=5636,5630
<5630=5632,5631
<5632=5633
<5633=5635,5634
<5637=5646,5638
<5638=5640,5639
<5640=5642,5641
<5642=5643
<5643=5645,5644
<5646=5648,5647
<5649=5656,5650
<5650=5652,5651
<5652=5653
<5653=5655,5654
<5657=5658
<5658=5670,5669,5659
<5659=5668,5660
<5660=5664,5661
<5661=5662
<5662=5663
<5664=5665
<5665=5667,5666
<5671=5673,5672
<5674=5675
<5675=5682,5676
<5676=5678,5677
<5678=5679
<5679=5681,5680
<5683=5684
<5684=5685
<5685=5690,5689,5686
<5686=5688,5687
<5691=5703,5692
<5692=5699,5693
<5693=5694
<5694=5698,5695
<5695=5697,5696
<5699=5700
<5700=5702,5701
<5703=5704
<5704=5706,5705
<5707=5719,5708
<5708=5715,5709
<5709=5710
<5710=5714,5711
<5711=5713,5712
<5715=5716
<5716=5718,5717
<5719=5720
<5720=5722,5721
<5742=5745,5744,5743
<5745=5800,5762,5753,5746
<5746=5747
<5747=5749,5748
<5749=5750
<5750=5752,5751
<5753=5754
<5754=5758,5755
<5755=5756
<5756=5757
<5758=5759
<5759=5761,5760
<5762=5792,5783,5780,5763
<5763=5764
<5764=5765
<5765=5776,5766
<5766=5767
<5767=5768
<5768=5772,5769
<5769=5770
<5770=5771
<5772=5773
<5773=5775,5774
<5776=5777
<5777=5779,5778
<5780=5782,5781
<5783=5784
<5784=5791,5785
<5785=5787,5786
<5787=5788
<5788=5790,5789
<5792=5793
<5793=5794
<5794=5799,5798,5795
<5795=5797,5796
<5800=5802,5801
<5802=5803
<5803=5810,5804
<5804=5806,5805
<5806=5807
<5807=5809,5808
<5810=5817,5811
<5811=5813,5812
<5813=5814
<5814=5816,5815
<5830=5833,5832,5831
<5833=5857,5850,5841,5834
<5834=5835
<5835=5837,5836
<5837=5838
<5838=5840,5839
<5841=5842
<5842=5846,5843
<5843=5844
<5844=5845
<5846=5847
<5847=5849,5848
<5850=5851
<5851=5853,5852
<5853=5854
<5854=5856,5855
<5857=5859,5858
<5859=5860
<5860=5862,5861
<5862=5863
<5863=5865,5864
<5873=5876,5875,5874
<5880=5883,5882,5881
<5887=5890,5889,5888
<5890=5891
<5891=5958,5918,5892
<5892=5893
<5893=5907,5894
<5894=5895
<5895=5901,5896
<5896=5899,5897
<5897=5898
<5899=5900
<5901=5902
<5902=5904,5903
<5904=5906,5905
<5907=5908
<5908=5912,5909
<5909=5910
<5910=5911
<5912=5913
<5913=5915,5914
<5915=5917,5916
<5918=5937,5919
<5919=5920
<5920=5931,5921
<5921=5924,5922
<5922=5923
<5924=5925
<5925=5927,5926
<5927=5928
<5928=5930,5929
<5931=5932
<5932=5934,5933
<5934=5936,5935
<5937=5938
<5938=5952,5939
<5939=5940
<5940=5941
<5941=5943,5942
<5943=5944
<5944=5946,5945
<5946=5948,5947
<5948=5949
<5949=5951,5950
<5952=5953
<5953=5955,5954
<5955=5957,5956
<5958=5959
<5959=5961,5960
<5974=5983,5982,5975
<5975=5979,5976
<5976=5978,5977
<5979=5981,5980
<5983=6072,5988,5984
<5984=5985
<5985=5987,5986
<5988=6064,6055,6052,5989
<5989=6038,6026,6014,5990
<5990=5994,5991
<5991=5992
<5992=5993
<5994=5995
<5995=6011,5996
<5996=6006,5997
<5997=6003,5998
<5998=6002,5999
<5999=6001,6000
<6003=6005,6004
<6006=6010,6007
<6007=6009,6008
<6011=6013,6012
<6014=6015
<6015=6025,6024,6016
<6016=6023,6017
<6017=6019,6018
<6019=6020
<6020=6022,6021
<6026=6027
<6027=6037,6036,6028
<6028=6035,6029
<6029=6031,6030
<6031=6032
<6032=6034,6033
<6038=6039
<6039=6051,6050,6040
<6040=6049,6041
<6041=6045,6042
<6042=6043
<6043=6044
<6045=6046
<6046=6048,6047
<6052=6054,6053
<6055=6056
<6056=6063,6057
<6057=6059,6058
<6059=6060
<6060=6062,6061
<6064=6065
<6065=6066
<6066=6071,6070,6067
<6067=6069,6068
<6072=6073
<6073=6079,6074
<6074=6075
<6075=6076
<6076=6078,6077
<6079=6080
<6098=6104,6103,6099
<6099=6100
<6100=6102,6101
<6104=6424,6410,6377,6376,6369,6365,6354,6353,6351,6347,6243,6209,6105
<6105=6201,6192,6189,6106
<6106=6164,6139,6107
<6107=6135,6108
<6108=6122,6109
<6109=6110
<6110=6118,6111
<6111=6114,6112
<6112=6113
<6114=6115
<6115=6117,6116
<6118=6119
<6119=6121,6120
<6122=6123
<6123=6131,6124
<6124=6127,6125
<6125=6126
<6127=6128
<6128=6130,6129
<6131=6132
<6132=6134,6133
<6135=6136
<6136=6138,6137
<6139=6140
<6140=6160,6141
<6141=6156,6142
<6142=6143
<6143=6145,6144
<6145=6146
<6146=6148,6147
<6148=6152,6149
<6149=6150
<6150=6151
<6152=6153
<6153=6155,6154
<6156=6157
<6157=6159,6158
<6160=6161
<6161=6163,6162
<6164=6165
<6165=6185,6166
<6166=6181,6167
<6167=6168
<6168=6170,6169
<6170=6171
<6171=6173,6172
<6173=6177,6174
<6174=6175
<6175=6176
<6177=6178
<6178=6180,6179
<6181=6182
<6182=6184,6183
<6185=6186
<6186=6188,6187
<6189=6191,6190
<6192=6193
<6193=6200,6194
<6194=6196,6195
<6196=6197
<6197=6199,6198
<6201=6202
<6202=6203
<6203=6208,6207,6204
<6204=6206,6205
<6209=6225,6210
<6210=6218,6211
<6211=6212
<6212=6214,6213
<6214=6215
<6215=6217,6216
<6218=6219
<6219=6221,6220
<6221=6222
<6222=6224,6223
<6225=6226
<6226=6235,6227
<6227=6229,6228
<6229=6231,6230
<6231=6232
<6232=6234,6233
<6235=6237,6236
<6237=6239,6238
<6239=6240
<6240=6242,6241
<6243=6339,6330,6327,6244
<6244=6302,6277,6245
<6245=6273,6246
<6246=6260,6247
<6247=6248
<6248=6256,6249
<6249=6252,6250
<6250=6251
<6252=6253
<6253=6255,6254
<6256=6257
<6257=6259,6258
<6260=6261
<6261=6269,6262
<6262=6265,6263
<6263=6264
<6265=6266
<6266=6268,6267
<6269=6270
<6270=6272,6271
<6273=6274
<6274=6276,6275
<6277=6278
<6278=6298,6279
<6279=6294,6280
<6280=6281
<6281=6283,6282
<6283=6284
<6284=6286,6285
<6286=6290,6287
<6287=6288
<6288=6289
<6290=6291
<6291=6293,6292
<6294=6295
<6295=6297,6296
<6298=6299
<6299=6301,6300
<6302=6303
<6303=6323,6304
<6304=6319,6305
<6305=6306
<6306=6308,6307
<6308=6309
<6309=6311,6310
<6311=6315,6312
<6312=6313
<6313=6314
<6315=6316
<6316=6318,6317
<6319=6320
<6320=6322,6321
<6323=6324
<6324=6326,6325
<6327=6329,6328
<6330=6331
<6331=6338,6332
<6332=6334,6333
<6334=6335
<6335=6337,6336
<6339=6340
<6340=6341
<6341=6346,6345,6342
<6342=6344,6343
<6347=6348
<6348=6350,6349
<6351=6352
<6354=6355
<6355=6361,6356
<6356=6357
<6357=6358
<6358=6360,6359
<6361=6362
<6362=6364,6363
<6365=6366
<6366=6368,6367
<6369=6370
<6370=6372,6371
<6372=6373
<6373=6375,6374
<6377=6403,6391,6378
<6378=6379
<6379=6380
<6380=6381
<6381=6387,6382
<6382=6385,6383
<6383=6384
<6385=6386
<6387=6388
<6388=6390,6389
<6391=6392
<6392=6393
<6393=6399,6394
<6394=6397,6395
<6395=6396
<6397=6398
<6399=6400
<6400=6402,6401
<6403=6404
<6404=6406,6405
<6406=6407
<6407=6409,6408
<6410=6411
<6411=6422,6412
<6412=6413
<6413=6414
<6414=6416,6415
<6416=6418,6417
<6418=6419
<6419=6421,6420
<6422=6423
<6424=6425
<6425=6435,6426
<6426=6427
<6427=6428
<6428=6432,6429
<6429=6431,6430
<6432=6434,6433
<6435=6436
<6467=6487,6468
<6468=6484,6481,6478,6475,6472,6469
<6469=6471,6470
<6472=6474,6473
<6475=6477,6476
<6478=6480,6479
<6481=6483,6482
<6484=6486,6485
<6487=7499,7498,7497,7496,7495,7494,7492,7491,7490,7489,7488,7487,7485,7484,7483,7482,7481,7480,7478,7477,7476,7475,7474,7473,7471,7470,7469,7468,7467,7466,7464,7463,7462,7461,7460,7459,7457,7456,7455,7454,7452,7451,7450,7449,7448,7447,7445,7432,7419,7412,7399,7386,7379,7366,7353,7340,7329,7322,7309,7296,7289,7276,7263,7250,7243,7230,7217,7204,7191,7184,7171,7164,7151,7138,7125,7112,7099,7086,6488,6516,6526,6542,6547,6556,6563,6581,6588,6623,6640,6656,6660,6669,6678,6682,6698,6714,6730,6741,6752,6759,6770,6781,6792,6803,6814,6825,6836,6843,6856,6869,6882,6895,6908,6915,6928,6935,6948,6961,6974,6987,6994,7007,7020,7027,7040,7053,7066,7079
<6488=6489
<6489=6512,6490
<6490=6491
<6491=6492
<6492=6506,6493
<6493=6500,6494
<6494=6498,6495
<6495=6496
<6496=6497
<6498=6499
<6500=6502,6501
<6502=6503
<6503=6505,6504
<6506=6510,6507
<6507=6508
<6508=6509
<6510=6511
<6512=6513
<6513=6515,6514
<6516=6517
<6517=6525,6524,6518
<6518=6523,6519
<6519=6521,6520
<6521=6522
<6526=6527
<6527=6538,6528
<6528=6529
<6529=6530
<6530=6536,6531
<6531=6532
<6532=6533
<6533=6535,6534
<6536=6537
<6538=6539
<6539=6541,6540
<6542=6543
<6543=6545,6544
<6545=6546
<6547=6548
<6548=6552,6549
<6549=6550
<6550=6551
<6552=6553
<6553=6555,6554
<6556=6557
<6557=6559,6558
<6559=6560
<6560=6562,6561
<6563=6564
<6564=6577,6565
<6565=6566
<6566=6567
<6567=6575,6568
<6568=6573,6571,6569
<6569=6570
<6571=6572
<6573=6574
<6575=6576
<6577=6578
<6578=6580,6579
<6581=6582
<6582=6586,6583
<6583=6584
<6584=6585
<6586=6587
<6588=6589
<6589=6619,6590
<6590=6597,6595,6591
<6591=6592
<6592=6594,6593
<6595=6596
<6597=6598
<6598=6618,6599
<6599=6617,6600
<6600=6616,6601
<6601=6615,6602
<6602=6614,6603
<6603=6613,6604
<6604=6612,6605
<6605=6611,6606
<6606=6610,6607
<6607=6609,6608
<6619=6620
<6620=6622,6621
<6623=6624
<6624=6636,6625
<6625=6632,6630,6626
<6626=6627
<6627=6629,6628
<6630=6631
<6632=6633
<6633=6635,6634
<6636=6637
<6637=6639,6638
<6640=6641
<6641=6652,6642
<6642=6643
<6643=6644
<6644=6650,6645
<6645=6648,6646
<6646=6647
<6648=6649
<6650=6651
<6652=6653
<6653=6655,6654
<6656=6657
<6657=6659,6658
<6660=6661
<6661=6665,6662
<6662=6663
<6663=6664
<6665=6666
<6666=6668,6667
<6669=6670
<6670=6674,6671
<6671=6672
<6672=6673
<6674=6675
<6675=6677,6676
<6678=6679
<6679=6681,6680
<6682=6683
<6683=6694,6684
<6684=6692,6685
<6685=6686
<6686=6688,6687
<6688=6690,6689
<6690=6691
<6692=6693
<6694=6695
<6695=6697,6696
<6698=6699
<6699=6710,6700
<6700=6708,6701
<6701=6702
<6702=6704,6703
<6704=6706,6705
<6706=6707
<6708=6709
<6710=6711
<6711=6713,6712
<6714=6715
<6715=6726,6716
<6716=6724,6717
<6717=6718
<6718=6720,6719
<6720=6722,6721
<6722=6723
<6724=6725
<6726=6727
<6727=6729,6728
<6730=6731
<6731=6737,6732
<6732=6735,6733
<6733=6734
<6735=6736
<6737=6738
<6738=6740,6739
<6741=6742
<6742=6748,6743
<6743=6746,6744
<6744=6745
<6746=6747
<6748=6749
<6749=6751,6750
<6752=6753
<6753=6757,6754
<6754=6755
<6755=6756
<6757=6758
<6759=6760
<6760=6766,6761
<6761=6764,6762
<6762=6763
<6764=6765
<6766=6767
<6767=6769,6768
<6770=6771
<6771=6777,6772
<6772=6775,6773
<6773=6774
<6775=6776
<6777=6778
<6778=6780,6779
<6781=6782
<6782=6788,6783
<6783=6786,6784
<6784=6785
<6786=6787
<6788=6789
<6789=6791,6790
<6792=6793
<6793=6799,6794
<6794=6797,6795
<6795=6796
<6797=6798
<6799=6800
<6800=6802,6801
<6803=6804
<6804=6810,6805
<6805=6808,6806
<6806=6807
<6808=6809
<6810=6811
<6811=6813,6812
<6814=6815
<6815=6821,6816
<6816=6819,6817
<6817=6818
<6819=6820
<6821=6822
<6822=6824,6823
<6825=6826
<6826=6832,6827
<6827=6830,6828
<6828=6829
<6830=6831
<6832=6833
<6833=6835,6834
<6836=6837
<6837=6842,6841,6838
<6838=6840,6839
<6843=6844
<6844=6852,6845
<6845=6850,6848,6846
<6846=6847
<6848=6849
<6850=6851
<6852=6853
<6853=6855,6854
<6856=6857
<6857=6865,6858
<6858=6863,6861,6859
<6859=6860
<6861=6862
<6863=6864
<6865=6866
<6866=6868,6867
<6869=6870
<6870=6878,6871
<6871=6876,6874,6872
<6872=6873
<6874=6875
<6876=6877
<6878=6879
<6879=6881,6880
<6882=6883
<6883=6891,6884
<6884=6889,6887,6885
<6885=6886
<6887=6888
<6889=6890
<6891=6892
<6892=6894,6893
<6895=6896
<6896=6904,6897
<6897=6902,6900,6898
<6898=6899
<6900=6901
<6902=6903
<6904=6905
<6905=6907,6906
<6908=6909
<6909=6911,6910
<6911=6912
<6912=6914,6913
<6915=6916
<6916=6924,6917
<6917=6922,6920,6918
<6918=6919
<6920=6921
<6922=6923
<6924=6925
<6925=6927,6926
<6928=6929
<6929=6931,6930
<6931=6932
<6932=6934,6933
<6935=6936
<6936=6944,6937
<6937=6942,6940,6938
<6938=6939
<6940=6941
<6942=6943
<6944=6945
<6945=6947,6946
<6948=6949
<6949=6957,6950
<6950=6955,6953,6951
<6951=6952
<6953=6954
<6955=6956
<6957=6958
<6958=6960,6959
<6961=6962
<6962=6970,6963
<6963=6968,6966,6964
<6964=6965
<6966=6967
<6968=6969
<6970=6971
<6971=6973,6972
<6974=6975
<6975=6983,6976
<6976=6981,6979,6977
<6977=6978
<6979=6980
<6981=6982
<6983=6984
<6984=6986,6985
<6987=6988
<6988=6990,6989
<6990=6991
<6991=6993,6992
<6994=6995
<6995=7003,6996
<6996=7001,6999,6997
<6997=6998
<6999=7000
<7001=7002
<7003=7004
<7004=7006,7005
<7007=7008
<7008=7016,7009
<7009=7014,7012,7010
<7010=7011
<7012=7013
<7014=7015
<7016=7017
<7017=7019,7018
<7020=7021
<7021=7023,7022
<7023=7024
<7024=7026,7025
<7027=7028
<7028=7036,7029
<7029=7034,7032,7030
<7030=7031
<7032=7033
<7034=7035
<7036=7037
<7037=7039,7038
<7040=7041
<7041=7049,7042
<7042=7047,7045,7043
<7043=7044
<7045=7046
<7047=7048
<7049=7050
<7050=7052,7051
<7053=7054
<7054=7062,7055
<7055=7060,7058,7056
<7056=7057
<7058=7059
<7060=7061
<7062=7063
<7063=7065,7064
<7066=7067
<7067=7075,7068
<7068=7073,7071,7069
<7069=7070
<7071=7072
<7073=7074
<7075=7076
<7076=7078,7077
<7079=7080
<7080=7082,7081
<7082=7083
<7083=7085,7084
<7086=7087
<7087=7095,7088
<7088=7093,7091,7089
<7089=7090
<7091=7092
<7093=7094
<7095=7096
<7096=7098,7097
<7099=7100
<7100=7108,7101
<7101=7106,7104,7102
<7102=7103
<7104=7105
<7106=7107
<7108=7109
<7109=7111,7110
<7112=7113
<7113=7121,7114
<7114=7119,7117,7115
<7115=7116
<7117=7118
<7119=7120
<7121=7122
<7122=7124,7123
<7125=7126
<7126=7134,7127
<7127=7132,7130,7128
<7128=7129
<7130=7131
<7132=7133
<7134=7135
<7135=7137,7136
<7138=7139
<7139=7147,7140
<7140=7145,7143,7141
<7141=7142
<7143=7144
<7145=7146
<7147=7148
<7148=7150,7149
<7151=7152
<7152=7160,7153
<7153=7158,7156,7154
<7154=7155
<7156=7157
<7158=7159
<7160=7161
<7161=7163,7162
<7164=7165
<7165=7167,7166
<7167=7168
<7168=7170,7169
<7171=7172
<7172=7180,7173
<7173=7178,7176,7174
<7174=7175
<7176=7177
<7178=7179
<7180=7181
<7181=7183,7182
<7184=7185
<7185=7187,7186
<7187=7188
<7188=7190,7189
<7191=7192
<7192=7200,7193
<7193=7198,7196,7194
<7194=7195
<7196=7197
<7198=7199
<7200=7201
<7201=7203,7202
<7204=7205
<7205=7213,7206
<7206=7211,7209,7207
<7207=7208
<7209=7210
<7211=7212
<7213=7214
<7214=7216,7215
<7217=7218
<7218=7226,7219
<7219=7224,7222,7220
<7220=7221
<7222=7223
<7224=7225
<7226=7227
<7227=7229,7228
<7230=7231
<7231=7239,7232
<7232=7237,7235,7233
<7233=7234
<7235=7236
<7237=7238
<7239=7240
<7240=7242,7241
<7243=7244
<7244=7246,7245
<7246=7247
<7247=7249,7248
<7250=7251
<7251=7259,7252
<7252=7257,7255,7253
<7253=7254
<7255=7256
<7257=7258
<7259=7260
<7260=7262,7261
<7263=7264
<7264=7272,7265
<7265=7270,7268,7266
<7266=7267
<7268=7269
<7270=7271
<7272=7273
<7273=7275,7274
<7276=7277
<7277=7285,7278
<7278=7283,7281,7279
<7279=7280
<7281=7282
<7283=7284
<7285=7286
<7286=7288,7287
<7289=7290
<7290=7292,7291
<7292=7293
<7293=7295,7294
<7296=7297
<7297=7305,7298
<7298=7303,7301,7299
<7299=7300
<7301=7302
<7303=7304
<7305=7306
<7306=7308,7307
<7309=7310
<7310=7318,7311
<7311=7316,7314,7312
<7312=7313
<7314=7315
<7316=7317
<7318=7319
<7319=7321,7320
<7322=7323
<7323=7325,7324
<7325=7326
<7326=7328,7327
<7329=7330
<7330=7336,7331
<7331=7334,7332
<7332=7333
<7334=7335
<7336=7337
<7337=7339,7338
<7340=7341
<7341=7349,7342
<7342=7347,7345,7343
<7343=7344
<7345=7346
<7347=7348
<7349=7350
<7350=7352,7351
<7353=7354
<7354=7362,7355
<7355=7360,7358,7356
<7356=7357
<7358=7359
<7360=7361
<7362=7363
<7363=7365,7364
<7366=7367
<7367=7375,7368
<7368=7373,7371,7369
<7369=7370
<7371=7372
<7373=7374
<7375=7376
<7376=7378,7377
<7379=7380
<7380=7382,7381
<7382=7383
<7383=7385,7384
<7386=7387
<7387=7395,7388
<7388=7393,7391,7389
<7389=7390
<7391=7392
<7393=7394
<7395=7396
<7396=7398,7397
<7399=7400
<7400=7408,7401
<7401=7406,7404,7402
<7402=7403
<7404=7405
<7406=7407
<7408=7409
<7409=7411,7410
<7412=7413
<7413=7415,7414
<7415=7416
<7416=7418,7417
<7419=7420
<7420=7428,7421
<7421=7426,7424,7422
<7422=7423
<7424=7425
<7426=7427
<7428=7429
<7429=7431,7430
<7432=7433
<7433=7441,7434
<7434=7439,7437,7435
<7435=7436
<7437=7438
<7439=7440
<7441=7442
<7442=7444,7443
<7445=7446
<7452=7453
<7457=7458
<7464=7465
<7471=7472
<7478=7479
<7485=7486
<7492=7493
<7499=7500
<7500=7509,7501
<7501=7502
<7502=7503
<7503=7507,7504
<7504=7505
<7505=7506
<7507=7508
<7509=7510
<7602=7604,7603
<7604=7664,7658,7656,7651,7614,7605
<7605=7612,7606
<7606=7607
<7607=7608
<7608=7610,7609
<7610=7611
<7612=7613
<7614=7643,7632,7629,7615
<7615=7616
<7616=7623,7617
<7617=7622,7618
<7618=7619
<7619=7621,7620
<7623=7624
<7624=7626,7625
<7626=7628,7627
<7629=7631,7630
<7632=7633
<7633=7642,7634
<7634=7641,7635
<7635=7637,7636
<7637=7638
<7638=7640,7639
<7643=7644
<7644=7645
<7645=7650,7649,7646
<7646=7648,7647
<7651=7652
<7652=7654,7653
<7654=7655
<7656=7657
<7658=7660,7659
<7660=7661
<7661=7663,7662
<7664=7665
<7665=7669,7666
<7666=7667
<7667=7668
<7669=7670
<7683=7689,7688,7684
<7684=7685
<7685=7687,7686
<7689=7690
<7690=7691
<7691=7693,7692
<7693=7694
<7694=7696,7695
<7696=7698,7697
<7698=7699
<7705=7711,7710,7706
<7706=7707
<7707=7709,7708
<7711=7712
<7712=7713
<7713=7715,7714
<7715=7716
<7716=7718,7717
<7723=7729,7728,7724
<7724=7725
<7725=7727,7726
<7729=7742,7735,7730
<7730=7731
<7731=7733,7732
<7733=7734
<7735=7736
<7736=7740,7737
<7737=7738
<7738=7739
<7740=7741
<7742=8375,8335,7743
<7743=7744
<7744=8326,8280,7745
<7745=7746
<7746=8260,8241,7747
<7747=7748
<7748=8223,8134,7749
<7749=7750
<7750=8125,8008,7751
<7751=7752
<7752=7999,7996,7753
<7753=7754
<7754=7987,7984,7755
<7755=7756
<7756=7975,7877,7757
<7757=7758
<7758=7868,7778,7759
<7759=7760
<7760=7769,7761
<7761=7762
<7762=7763
<7763=7767,7764
<7764=7765
<7765=7766
<7767=7768
<7769=7770
<7770=7772,7771
<7772=7774,7773
<7774=7775
<7775=7777,7776
<7778=7828,7821,7812,7796,7795,7793,7784,7779
<7779=7780
<7780=7782,7781
<7782=7783
<7784=7785
<7785=7792,7786
<7786=7788,7787
<7788=7789
<7789=7791,7790
<7793=7794
<7796=7797
<7797=7808,7798
<7798=7806,7799
<7799=7800
<7800=7802,7801
<7802=7803
<7803=7805,7804
<7806=7807
<7808=7809
<7809=7811,7810
<7812=7813
<7813=7817,7814
<7814=7815
<7815=7816
<7817=7818
<7818=7820,7819
<7821=7822
<7822=7824,7823
<7824=7825
<7825=7827,7826
<7828=7855,7846,7843,7829
<7829=7830
<7830=7837,7831
<7831=7836,7832
<7832=7833
<7833=7835,7834
<7837=7838
<7838=7840,7839
<7840=7842,7841
<7843=7845,7844
<7846=7847
<7847=7854,7848
<7848=7850,7849
<7850=7851
<7851=7853,7852
<7855=7856
<7856=7857
<7857=7867,7866,7858
<7858=7865,7859
<7859=7861,7860
<7861=7862
<7862=7864,7863
<7868=7869
<7869=7871,7870
<7871=7873,7872
<7873=7874
<7874=7876,7875
<7877=7911,7895,7894,7892,7883,7878
<7878=7879
<7879=7881,7880
<7881=7882
<7883=7884
<7884=7891,7885
<7885=7887,7886
<7887=7888
<7888=7890,7889
<7892=7893
<7895=7896
<7896=7907,7897
<7897=7905,7898
<7898=7899
<7899=7901,7900
<7901=7902
<7902=7904,7903
<7905=7906
<7907=7908
<7908=7910,7909
<7911=7966,7959,7912
<7912=7913
<7913=7914
<7914=7946,7937,7934,7915
<7915=7916
<7916=7928,7917
<7917=7919,7918
<7919=7920
<7920=7924,7921
<7921=7922
<7922=7923
<7924=7925
<7925=7927,7926
<7928=7929
<7929=7931,7930
<7931=7933,7932
<7934=7936,7935
<7937=7938
<7938=7945,7939
<7939=7941,7940
<7941=7942
<7942=7944,7943
<7946=7947
<7947=7948
<7948=7958,7957,7949
<7949=7956,7950
<7950=7952,7951
<7952=7953
<7953=7955,7954
<7959=7960
<7960=7961
<7961=7963,7962
<7963=7965,7964
<7966=7967
<7967=7969,7968
<7969=7971,7970
<7971=7972
<7972=7974,7973
<7975=7976
<7976=7978,7977
<7978=7980,7979
<7980=7981
<7981=7983,7982
<7984=7985
<7985=7986
<7987=7988
<7988=7990,7989
<7990=7992,7991
<7992=7993
<7993=7995,7994
<7996=7997
<7997=7998
<7999=8000
<8000=8002,8001
<8002=8004,8003
<8004=8005
<8005=8007,8006
<8008=8116,8112,8081,8045,8009
<8009=8036,8010
<8010=8032,8011
<8011=8012
<8012=8028,8013
<8013=8016,8014
<8014=8015
<8016=8017
<8017=8019,8018
<8019=8020
<8020=8022,8021
<8022=8024,8023
<8024=8025
<8025=8027,8026
<8028=8029
<8029=8031,8030
<8032=8033
<8033=8035,8034
<8036=8037
<8037=8039,8038
<8039=8041,8040
<8041=8042
<8042=8044,8043
<8045=8046
<8046=8080,8079,8047
<8047=8078,8048
<8048=8058,8049
<8049=8057,8050
<8050=8056,8051
<8051=8055,8052
<8052=8054,8053
<8058=8072,8059
<8059=8066,8060
<8060=8064,8061
<8061=8062
<8062=8063
<8064=8065
<8066=8068,8067
<8068=8069
<8069=8071,8070
<8072=8076,8073
<8073=8074
<8074=8075
<8076=8077
<8081=8101,8082
<8082=8083
<8083=8084
<8084=8100,8085
<8085=8098,8086
<8086=8094,8087
<8087=8088
<8088=8092,8089
<8089=8090
<8090=8091
<8092=8093
<8094=8095
<8095=8097,8096
<8098=8099
<8101=8102
<8102=8111,8103
<8103=8105,8104
<8105=8106
<8106=8108,8107
<8108=8110,8109
<8112=8113
<8113=8115,8114
<8116=8117
<8117=8124,8123,8118
<8118=8122,8119
<8119=8121,8120
<8125=8126
<8126=8128,8127
<8128=8130,8129
<8130=8131
<8131=8133,8132
<8134=8214,8176,8135
<8135=8167,8136
<8136=8156,8137
<8137=8138
<8138=8152,8139
<8139=8140
<8140=8141
<8141=8143,8142
<8143=8144
<8144=8146,8145
<8146=8148,8147
<8148=8149
<8149=8151,8150
<8152=8153
<8153=8155,8154
<8156=8157
<8157=8164,8158
<8158=8160,8159
<8160=8161
<8161=8163,8162
<8164=8166,8165
<8167=8168
<8168=8170,8169
<8170=8172,8171
<8172=8173
<8173=8175,8174
<8176=8177
<8177=8213,8212,8178
<8178=8211,8179
<8179=8191,8180
<8180=8190,8181
<8181=8187,8182
<8182=8186,8183
<8183=8185,8184
<8187=8189,8188
<8191=8205,8192
<8192=8199,8193
<8193=8197,8194
<8194=8195
<8195=8196
<8197=8198
<8199=8201,8200
<8201=8202
<8202=8204,8203
<8205=8209,8206
<8206=8207
<8207=8208
<8209=8210
<8214=8215
<8215=8222,8221,8216
<8216=8220,8217
<8217=8219,8218
<8223=8224
<8224=8233,8225
<8225=8227,8226
<8227=8229,8228
<8229=8230
<8230=8232,8231
<8233=8235,8234
<8235=8237,8236
<8237=8238
<8238=8240,8239
<8241=8242
<8242=8243
<8243=8254,8244
<8244=8245
<8245=8246
<8246=8248,8247
<8248=8249
<8249=8251,8250
<8251=8253,8252
<8254=8255
<8255=8257,8256
<8257=8259,8258
<8260=8261
<8261=8272,8262
<8262=8271,8263
<8263=8265,8264
<8265=8266
<8266=8268,8267
<8268=8270,8269
<8272=8274,8273
<8274=8276,8275
<8276=8277
<8277=8279,8278
<8280=8309,8281
<8281=8300,8282
<8282=8283
<8283=8284
<8284=8298,8285
<8285=8286
<8286=8287
<8287=8289,8288
<8289=8290
<8290=8292,8291
<8292=8294,8293
<8294=8295
<8295=8297,8296
<8298=8299
<8300=8301
<8301=8303,8302
<8303=8305,8304
<8305=8306
<8306=8308,8307
<8309=8310
<8310=8325,8324,8311
<8311=8323,8312
<8312=8322,8313
<8313=8321,8314
<8314=8320,8315
<8315=8319,8316
<8316=8318,8317
<8326=8327
<8327=8329,8328
<8329=8331,8330
<8331=8332
<8332=8334,8333
<8335=8366,8350,8341,8336
<8336=8337
<8337=8339,8338
<8339=8340
<8341=8342
<8342=8349,8343
<8343=8345,8344
<8345=8346
<8346=8348,8347
<8350=8351
<8351=8362,8352
<8352=8360,8353
<8353=8354
<8354=8356,8355
<8356=8357
<8357=8359,8358
<8360=8361
<8362=8363
<8363=8365,8364
<8366=8367
<8367=8371,8368
<8368=8369
<8369=8370
<8371=8372
<8372=8374,8373
<8375=8376
<8376=8378,8377
<8378=8380,8379
<8380=8381
<8381=8383,8382
<8425=8431,8430,8426
<8426=8427
<8427=8429,8428
<8431=8444,8437,8432
<8432=8433
<8433=8435,8434
<8435=8436
<8437=8438
<8438=8442,8439
<8439=8440
<8440=8441
<8442=8443
<8444=9086,8992,8445
<8445=8446
<8446=8983,8948,8447
<8447=8448
<8448=8939,8761,8449
<8449=8450
<8450=8752,8626,8451
<8451=8452
<8452=8617,8491,8453
<8453=8454
<8454=8482,8474,8455
<8455=8456
<8456=8465,8457
<8457=8458
<8458=8459
<8459=8461,8460
<8461=8462
<8462=8464,8463
<8465=8466
<8466=8468,8467
<8468=8470,8469
<8470=8471
<8471=8473,8472
<8474=8475
<8475=8476
<8476=8478,8477
<8478=8479
<8479=8481,8480
<8482=8483
<8483=8485,8484
<8485=8487,8486
<8487=8488
<8488=8490,8489
<8491=8608,8492
<8492=8599,8493
<8493=8577,8568,8559,8494
<8494=8551,8542,8539,8495
<8495=8496
<8496=8516,8497
<8497=8498
<8498=8499
<8499=8510,8500
<8500=8501
<8501=8502
<8502=8506,8503
<8503=8504
<8504=8505
<8506=8507
<8507=8509,8508
<8510=8511
<8511=8513,8512
<8513=8515,8514
<8516=8517
<8517=8519,8518
<8519=8523,8520
<8520=8521
<8521=8522
<8523=8524
<8524=8526,8525
<8526=8528,8527
<8528=8529
<8529=8531,8530
<8531=8535,8532
<8532=8533
<8533=8534
<8535=8536
<8536=8538,8537
<8539=8541,8540
<8542=8543
<8543=8550,8544
<8544=8546,8545
<8546=8547
<8547=8549,8548
<8551=8552
<8552=8553
<8553=8558,8557,8554
<8554=8556,8555
<8559=8560
<8560=8562,8561
<8562=8563
<8563=8565,8564
<8565=8567,8566
<8568=8569
<8569=8576,8575,8570
<8570=8574,8571
<8571=8573,8572
<8577=8578
<8578=8598,8597,8579
<8579=8596,8580
<8580=8594,8581
<8581=8582
<8582=8583
<8583=8585,8584
<8585=8586
<8586=8588,8587
<8588=8590,8589
<8590=8591
<8591=8593,8592
<8594=8595
<8599=8600
<8600=8602,8601
<8602=8604,8603
<8604=8605
<8605=8607,8606
<8608=8609
<8609=8616,8615,8610
<8610=8614,8611
<8611=8613,8612
<8617=8618
<8618=8620,8619
<8620=8622,8621
<8622=8623
<8623=8625,8624
<8626=8627
<8627=8743,8727,8628
<8628=8629
<8629=8700,8630
<8630=8691,8631
<8631=8647,8638,8632
<8632=8633
<8633=8635,8634
<8635=8637,8636
<8638=8639
<8639=8641,8640
<8641=8642
<8642=8644,8643
<8644=8646,8645
<8647=8676,8665,8662,8648
<8648=8649
<8649=8650
<8650=8656,8651
<8651=8652
<8652=8653
<8653=8655,8654
<8656=8657
<8657=8659,8658
<8659=8661,8660
<8662=8664,8663
<8665=8666
<8666=8675,8667
<8667=8669,8668
<8669=8670
<8670=8672,8671
<8672=8674,8673
<8676=8677
<8677=8678
<8678=8690,8689,8679
<8679=8688,8680
<8680=8682,8681
<8682=8683
<8683=8685,8684
<8685=8687,8686
<8691=8692
<8692=8694,8693
<8694=8696,8695
<8696=8697
<8697=8699,8698
<8700=8701
<8701=8726,8725,8702
<8702=8724,8703
<8703=8707,8704
<8704=8706,8705
<8707=8722,8708
<8708=8720,8709
<8709=8710
<8710=8719,8711
<8711=8713,8712
<8713=8714
<8714=8716,8715
<8716=8718,8717
<8720=8721
<8722=8723
<8727=8728
<8728=8729
<8729=8741,8730
<8730=8739,8737,8733,8731
<8731=8732
<8733=8734
<8734=8736,8735
<8737=8738
<8739=8740
<8741=8742
<8743=8744
<8744=8746,8745
<8746=8747
<8747=8749,8748
<8749=8751,8750
<8752=8753
<8753=8755,8754
<8755=8757,8756
<8757=8758
<8758=8760,8759
<8761=8926,8911,8888,8858,8843,8834,8776,8762
<8762=8763
<8763=8774,8764
<8764=8765
<8765=8766
<8766=8768,8767
<8768=8770,8769
<8770=8771
<8771=8773,8772
<8774=8775
<8776=8812,8801,8798,8777
<8777=8778
<8778=8779
<8779=8792,8780
<8780=8781
<8781=8782
<8782=8786,8783
<8783=8784
<8784=8785
<8786=8787
<8787=8789,8788
<8789=8791,8790
<8792=8793
<8793=8795,8794
<8795=8797,8796
<8798=8800,8799
<8801=8802
<8802=8811,8803
<8803=8805,8804
<8805=8806
<8806=8808,8807
<8808=8810,8809
<8812=8813
<8813=8814
<8814=8833,8832,8815
<8815=8831,8816
<8816=8823,8817
<8817=8819,8818
<8819=8820
<8820=8822,8821
<8823=8825,8824
<8825=8826
<8826=8828,8827
<8828=8830,8829
<8834=8835
<8835=8837,8836
<8837=8838
<8838=8840,8839
<8840=8842,8841
<8843=8844
<8844=8852,8845
<8845=8850,8848,8846
<8846=8847
<8848=8849
<8850=8851
<8852=8853
<8853=8855,8854
<8855=8857,8856
<8858=8884,8859
<8859=8872,8860
<8860=8861
<8861=8871,8862
<8862=8870,8863
<8863=8865,8864
<8865=8869,8866
<8866=8868,8867
<8872=8873
<8873=8883,8874
<8874=8882,8875
<8875=8877,8876
<8877=8881,8878
<8878=8880,8879
<8884=8885
<8885=8887,8886
<8888=8889
<8889=8907,8890
<8890=8903,8899,8895,8891
<8891=8892
<8892=8894,8893
<8895=8896
<8896=8898,8897
<8899=8900
<8900=8902,8901
<8903=8904
<8904=8906,8905
<8907=8908
<8908=8910,8909
<8911=8912
<8912=8922,8913
<8913=8918,8914
<8914=8915
<8915=8917,8916
<8918=8919
<8919=8921,8920
<8922=8923
<8923=8925,8924
<8926=8936,8933,8930,8927
<8927=8929,8928
<8930=8932,8931
<8933=8935,8934
<8936=8938,8937
<8939=8940
<8940=8942,8941
<8942=8944,8943
<8944=8945
<8945=8947,8946
<8948=8978,8963,8949
<8949=8950
<8950=8961,8951
<8951=8952
<8952=8953
<8953=8955,8954
<8955=8957,8956
<8957=8958
<8958=8960,8959
<8961=8962
<8963=8964
<8964=8977,8965
<8965=8971,8966
<8966=8967
<8967=8968
<8968=8970,8969
<8971=8972
<8972=8974,8973
<8974=8976,8975
<8978=8979
<8979=8981,8980
<8981=8982
<8983=8984
<8984=8986,8985
<8986=8988,8987
<8988=8989
<8989=8991,8990
<8992=9081,9066,9022,9013,9007,8993
<8993=8994
<8994=9005,8995
<8995=8996
<8996=8997
<8997=8999,8998
<8999=9001,9000
<9001=9002
<9002=9004,9003
<9005=9006
<9007=9008
<9008=9010,9009
<9010=9012,9011
<9013=9014
<9014=9016,9015
<9016=9017
<9017=9019,9018
<9019=9021,9020
<9022=9051,9040,9037,9023
<9023=9024
<9024=9025
<9025=9031,9026
<9026=9027
<9027=9028
<9028=9030,9029
<9031=9032
<9032=9034,9033
<9034=9036,9035
<9037=9039,9038
<9040=9041
<9041=9050,9042
<9042=9044,9043
<9044=9045
<9045=9047,9046
<9047=9049,9048
<9051=9052
<9052=9053
<9053=9065,9064,9054
<9054=9063,9055
<9055=9057,9056
<9057=9058
<9058=9060,9059
<9060=9062,9061
<9066=9067
<9067=9080,9068
<9068=9074,9069
<9069=9070
<9070=9071
<9071=9073,9072
<9074=9075
<9075=9077,9076
<9077=9079,9078
<9081=9082
<9082=9084,9083
<9084=9085
<9086=9087
<9087=9089,9088
<9089=9091,9090
<9091=9092
<9092=9094,9093
<9157=9163,9162,9158
<9158=9159
<9159=9161,9160
<9163=9176,9169,9164
<9164=9165
<9165=9167,9166
<9167=9168
<9169=9170
<9170=9174,9171
<9171=9172
<9172=9173
<9174=9175
<9176=9292,9278,9177
<9177=9178
<9178=9269,9255,9179
<9179=9180
<9180=9246,9232,9181
<9181=9182
<9182=9223,9209,9183
<9183=9184
<9184=9200,9185
<9185=9186
<9186=9187
<9187=9194,9188
<9188=9190,9189
<9190=9191
<9191=9193,9192
<9194=9196,9195
<9196=9197
<9197=9199,9198
<9200=9201
<9201=9203,9202
<9203=9205,9204
<9205=9206
<9206=9208,9207
<9209=9210
<9210=9211
<9211=9217,9212
<9212=9213
<9213=9214
<9214=9216,9215
<9217=9218
<9218=9220,9219
<9220=9222,9221
<9223=9224
<9224=9226,9225
<9226=9228,9227
<9228=9229
<9229=9231,9230
<9232=9233
<9233=9234
<9234=9240,9235
<9235=9236
<9236=9237
<9237=9239,9238
<9240=9241
<9241=9243,9242
<9243=9245,9244
<9246=9247
<9247=9249,9248
<9249=9251,9250
<9251=9252
<9252=9254,9253
<9255=9256
<9256=9257
<9257=9263,9258
<9258=9259
<9259=9260
<9260=9262,9261
<9263=9264
<9264=9266,9265
<9266=9268,9267
<9269=9270
<9270=9272,9271
<9272=9274,9273
<9274=9275
<9275=9277,9276
<9278=9279
<9279=9280
<9280=9286,9281
<9281=9282
<9282=9283
<9283=9285,9284
<9286=9287
<9287=9289,9288
<9289=9291,9290
<9292=9293
<9293=9295,9294
<9295=9297,9296
<9297=9298
<9298=9300,9299
<9318=9324,9323,9319
<9319=9320
<9320=9322,9321
<9324=9337,9330,9325
<9325=9326
<9326=9328,9327
<9328=9329
<9330=9331
<9331=9335,9332
<9332=9333
<9333=9334
<9335=9336
<9337=10239,10138,9338
<9338=9339
<9339=10129,9961,9340
<9340=9341
<9341=9952,9533,9342
<9342=9343
<9343=9524,9521,9344
<9344=9345
<9345=9512,9378,9346
<9346=9347
<9347=9369,9348
<9348=9359,9349
<9349=9350
<9350=9352,9351
<9352=9353
<9353=9355,9354
<9355=9357,9356
<9357=9358
<9359=9360
<9360=9362,9361
<9362=9363
<9363=9365,9364
<9365=9367,9366
<9367=9368
<9369=9370
<9370=9372,9371
<9372=9374,9373
<9374=9375
<9375=9377,9376
<9378=9501,9379
<9379=9494,9380
<9380=9480,9458,9381
<9381=9454,9446,9382
<9382=9383
<9383=9441,9429,9384
<9384=9416,9407,9404,9385
<9385=9386
<9386=9387
<9387=9400,9388
<9388=9396,9389
<9389=9390
<9390=9392,9391
<9392=9394,9393
<9394=9395
<9396=9397
<9397=9399,9398
<9400=9401
<9401=9403,9402
<9404=9406,9405
<9407=9408
<9408=9415,9409
<9409=9411,9410
<9411=9412
<9412=9414,9413
<9416=9417
<9417=9418
<9418=9428,9427,9419
<9419=9426,9420
<9420=9422,9421
<9422=9423
<9423=9425,9424
<9429=9430
<9430=9440,9439,9431
<9431=9438,9432
<9432=9434,9433
<9434=9435
<9435=9437,9436
<9441=9442
<9442=9444,9443
<9444=9445
<9446=9447
<9447=9448
<9448=9450,9449
<9450=9451
<9451=9453,9452
<9454=9455
<9455=9457,9456
<9458=9459
<9459=9479,9478,9460
<9460=9477,9461
<9461=9475,9462
<9462=9463
<9463=9464
<9464=9466,9465
<9466=9467
<9467=9469,9468
<9469=9471,9470
<9471=9472
<9472=9474,9473
<9475=9476
<9480=9481
<9481=9493,9492,9482
<9482=9491,9483
<9483=9485,9484
<9485=9486
<9486=9488,9487
<9488=9490,9489
<9494=9495
<9495=9497,9496
<9497=9498
<9498=9500,9499
<9501=9502
<9502=9511,9510,9503
<9503=9509,9504
<9504=9508,9505
<9505=9507,9506
<9512=9513
<9513=9515,9514
<9515=9517,9516
<9517=9518
<9518=9520,9519
<9521=9522
<9522=9523
<9524=9525
<9525=9527,9526
<9527=9529,9528
<9529=9530
<9530=9532,9531
<9533=9938,9926,9909,9897,9844,9824,9539,9538,9537,9536,9534
<9534=9535
<9539=9815,9540
<9540=9801,9787,9775,9548,9541
<9541=9542
<9542=9544,9543
<9544=9545
<9545=9547,9546
<9548=9762,9753,9750,9549
<9549=9734,9718,9557,9550
<9550=9551
<9551=9553,9552
<9553=9554
<9554=9556,9555
<9557=9709,9569,9558
<9558=9559
<9559=9560
<9560=9561
<9561=9565,9562
<9562=9563
<9563=9564
<9565=9566
<9566=9568,9567
<9569=9695,9579,9570
<9570=9571
<9571=9575,9572
<9572=9573
<9573=9574
<9575=9576
<9576=9578,9577
<9579=9688,9678,9580
<9580=9581
<9581=9666,9582
<9582=9658,9649,9646,9583
<9583=9636,9610,9584
<9584=9585
<9585=9606,9586
<9586=9587
<9587=9588
<9588=9590,9589
<9590=9591
<9591=9593,9592
<9593=9600,9594
<9594=9598,9595
<9595=9596
<9596=9597
<9598=9599
<9600=9604,9601
<9601=9602
<9602=9603
<9604=9605
<9606=9607
<9607=9609,9608
<9610=9611
<9611=9620,9612
<9612=9616,9613
<9613=9614
<9614=9615
<9616=9617
<9617=9619,9618
<9620=9635,9621
<9621=9634,9622
<9622=9629,9623
<9623=9625,9624
<9625=9626
<9626=9628,9627
<9629=9633,9630
<9630=9632,9631
<9636=9637
<9637=9645,9644,9638
<9638=9640,9639
<9640=9641
<9641=9643,9642
<9646=9648,9647
<9649=9650
<9650=9657,9651
<9651=9653,9652
<9653=9654
<9654=9656,9655
<9658=9659
<9659=9660
<9660=9665,9664,9661
<9661=9663,9662
<9666=9667
<9667=9677,9676,9668
<9668=9675,9669
<9669=9671,9670
<9671=9672
<9672=9674,9673
<9678=9679
<9679=9680
<9680=9684,9681
<9681=9682
<9682=9683
<9684=9685
<9685=9687,9686
<9688=9689
<9689=9691,9690
<9691=9692
<9692=9694,9693
<9695=9696
<9696=9708,9707,9697
<9697=9706,9698
<9698=9702,9699
<9699=9700
<9700=9701
<9702=9703
<9703=9705,9704
<9709=9710
<9710=9714,9711
<9711=9712
<9712=9713
<9714=9715
<9715=9717,9716
<9718=9719
<9719=9730,9720
<9720=9723,9721
<9721=9722
<9723=9724
<9724=9726,9725
<9726=9727
<9727=9729,9728
<9730=9731
<9731=9733,9732
<9734=9735
<9735=9749,9748,9736
<9736=9747,9737
<9737=9743,9738
<9738=9739
<9739=9740
<9740=9742,9741
<9743=9744
<9744=9746,9745
<9750=9752,9751
<9753=9754
<9754=9761,9755
<9755=9757,9756
<9757=9758
<9758=9760,9759
<9762=9763
<9763=9764
<9764=9774,9773,9765
<9765=9772,9766
<9766=9768,9767
<9768=9769
<9769=9771,9770
<9775=9776
<9776=9786,9785,9777
<9777=9784,9778
<9778=9780,9779
<9780=9781
<9781=9783,9782
<9787=9788
<9788=9800,9799,9789
<9789=9798,9790
<9790=9792,9791
<9792=9794,9793
<9794=9795
<9795=9797,9796
<9801=9802
<9802=9814,9813,9803
<9803=9812,9804
<9804=9811,9805
<9805=9807,9806
<9807=9808
<9808=9810,9809
<9815=9816
<9816=9818,9817
<9818=9820,9819
<9820=9821
<9821=9823,9822
<9824=9825
<9825=9843,9842,9826
<9826=9841,9827
<9827=9840,9828
<9828=9839,9829
<9829=9831,9830
<9831=9838,9832
<9832=9834,9833
<9834=9835
<9835=9837,9836
<9844=9889,9880,9877,9845
<9845=9846
<9846=9847
<9847=9874,9848
<9848=9872,9849
<9849=9870,9861,9850
<9850=9851
<9851=9857,9852
<9852=9853
<9853=9854
<9854=9856,9855
<9857=9858
<9858=9860,9859
<9861=9862
<9862=9864,9863
<9864=9865
<9865=9867,9866
<9867=9869,9868
<9870=9871
<9872=9873
<9874=9876,9875
<9877=9879,9878
<9880=9881
<9881=9888,9882
<9882=9884,9883
<9884=9885
<9885=9887,9886
<9889=9890
<9890=9891
<9891=9896,9895,9892
<9892=9894,9893
<9897=9898
<9898=9908,9907,9899
<9899=9906,9900
<9900=9902,9901
<9902=9903
<9903=9905,9904
<9909=9919,9910
<9910=9912,9911
<9912=9913
<9913=9917,9914
<9914=9915
<9915=9916
<9917=9918
<9919=9920
<9920=9922,9921
<9922=9923
<9923=9925,9924
<9926=9927
<9927=9937,9936,9928
<9928=9935,9929
<9929=9931,9930
<9931=9932
<9932=9934,9933
<9938=9939
<9939=9951,9950,9940
<9940=9949,9941
<9941=9943,9942
<9943=9944
<9944=9946,9945
<9946=9948,9947
<9952=9953
<9953=9955,9954
<9955=9957,9956
<9957=9958
<9958=9960,9959
<9961=10115,10103,10086,10074,10016,9996,9967,9966,9965,9964,9962
<9962=9963
<9967=9987,9968
<9968=9971,9969
<9969=9970
<9971=9972
<9972=9985,9973
<9973=9974
<9974=9975
<9975=9984,9976
<9976=9983,9977
<9977=9979,9978
<9979=9980
<9980=9982,9981
<9985=9986
<9987=9988
<9988=9990,9989
<9990=9992,9991
<9992=9993
<9993=9995,9994
<9996=9997
<9997=10015,10014,9998
<9998=10013,9999
<9999=10012,10000
<10000=10011,10001
<10001=10003,10002
<10003=10010,10004
<10004=10006,10005
<10006=10007
<10007=10009,10008
<10016=10066,10057,10054,10017
<10017=10018
<10018=10019
<10019=10051,10020
<10020=10049,10021
<10021=10047,10038,10022
<10022=10023
<10023=10025,10024
<10025=10026
<10026=10028,10027
<10028=10034,10029
<10029=10030
<10030=10031
<10031=10033,10032
<10034=10035
<10035=10037,10036
<10038=10039
<10039=10041,10040
<10041=10042
<10042=10044,10043
<10044=10046,10045
<10047=10048
<10049=10050
<10051=10053,10052
<10054=10056,10055
<10057=10058
<10058=10065,10059
<10059=10061,10060
<10061=10062
<10062=10064,10063
<10066=10067
<10067=10068
<10068=10073,10072,10069
<10069=10071,10070
<10074=10075
<10075=10085,10084,10076
<10076=10083,10077
<10077=10079,10078
<10079=10080
<10080=10082,10081
<10086=10096,10087
<10087=10089,10088
<10089=10090
<10090=10094,10091
<10091=10092
<10092=10093
<10094=10095
<10096=10097
<10097=10099,10098
<10099=10100
<10100=10102,10101
<10103=10104
<10104=10114,10113,10105
<10105=10112,10106
<10106=10108,10107
<10108=10109
<10109=10111,10110
<10115=10116
<10116=10128,10127,10117
<10117=10126,10118
<10118=10120,10119
<10120=10121
<10121=10123,10122
<10123=10125,10124
<10129=10130
<10130=10132,10131
<10132=10134,10133
<10134=10135
<10135=10137,10136
<10138=10225,10176,10144,10139
<10139=10140
<10140=10142,10141
<10142=10143
<10144=10167,10145
<10145=10146
<10146=10147
<10147=10161,10148
<10148=10149
<10149=10150
<10150=10152,10151
<10152=10153
<10153=10155,10154
<10155=10157,10156
<10157=10158
<10158=10160,10159
<10161=10162
<10162=10164,10163
<10164=10166,10165
<10167=10168
<10168=10170,10169
<10170=10172,10171
<10172=10173
<10173=10175,10174
<10176=10177
<10177=10224,10223,10178
<10178=10222,10179
<10179=10207,10180
<10180=10182,10181
<10182=10200,10184,10183
<10184=10186,10185
<10186=10187
<10187=10189,10188
<10189=10198,10190
<10190=10191
<10191=10192
<10192=10194,10193
<10194=10195
<10195=10197,10196
<10198=10199
<10200=10201
<10201=10203,10202
<10203=10204
<10204=10206,10205
<10207=10216,10208
<10208=10210,10209
<10210=10211
<10211=10213,10212
<10213=10215,10214
<10216=10220,10217
<10217=10218
<10218=10219
<10220=10221
<10225=10226
<10226=10238,10237,10227
<10227=10236,10228
<10228=10230,10229
<10230=10231
<10231=10233,10232
<10233=10235,10234
<10239=10240
<10240=10242,10241
<10242=10244,10243
<10244=10245
<10245=10247,10246
<10336=10342,10341,10337
<10337=10338
<10338=10340,10339
<10342=10355,10348,10343
<10343=10344
<10344=10346,10345
<10346=10347
<10348=10349
<10349=10353,10350
<10350=10351
<10351=10352
<10353=10354
<10355=10574,10566,10356
<10356=10357
<10357=10557,10549,10358
<10358=10359
<10359=10540,10532,10360
<10360=10361
<10361=10523,10516,10362
<10362=10363
<10363=10507,10421,10364
<10364=10365
<10365=10412,10366
<10366=10397,10367
<10367=10388,10368
<10368=10369
<10369=10370
<10370=10386,10371
<10371=10374,10372
<10372=10373
<10374=10375
<10375=10377,10376
<10377=10378
<10378=10380,10379
<10380=10382,10381
<10382=10383
<10383=10385,10384
<10386=10387
<10388=10389
<10389=10391,10390
<10391=10393,10392
<10393=10394
<10394=10396,10395
<10397=10398
<10398=10411,10410,10399
<10399=10409,10400
<10400=10408,10401
<10401=10407,10402
<10402=10406,10403
<10403=10405,10404
<10412=10413
<10413=10415,10414
<10415=10417,10416
<10417=10418
<10418=10420,10419
<10421=10494,10422
<10422=10485,10423
<10423=10478,10462,10452,10424
<10424=10425
<10425=10448,10426
<10426=10427
<10427=10428
<10428=10442,10429
<10429=10436,10430
<10430=10434,10431
<10431=10432
<10432=10433
<10434=10435
<10436=10438,10437
<10438=10439
<10439=10441,10440
<10442=10446,10443
<10443=10444
<10444=10445
<10446=10447
<10448=10449
<10449=10451,10450
<10452=10453
<10453=10461,10460,10454
<10454=10459,10455
<10455=10457,10456
<10457=10458
<10462=10463
<10463=10474,10464
<10464=10465
<10465=10466
<10466=10472,10467
<10467=10468
<10468=10469
<10469=10471,10470
<10472=10473
<10474=10475
<10475=10477,10476
<10478=10479
<10479=10481,10480
<10481=10482
<10482=10484,10483
<10485=10486
<10486=10488,10487
<10488=10490,10489
<10490=10491
<10491=10493,10492
<10494=10495
<10495=10506,10505,10496
<10496=10504,10497
<10497=10503,10498
<10498=10502,10499
<10499=10501,10500
<10507=10508
<10508=10510,10509
<10510=10512,10511
<10512=10513
<10513=10515,10514
<10516=10522,10517
<10517=10518
<10518=10520,10519
<10520=10521
<10523=10524
<10524=10526,10525
<10526=10528,10527
<10528=10529
<10529=10531,10530
<10532=10533
<10533=10534
<10534=10538,10535
<10535=10536
<10536=10537
<10538=10539
<10540=10541
<10541=10543,10542
<10543=10545,10544
<10545=10546
<10546=10548,10547
<10549=10550
<10550=10551
<10551=10555,10552
<10552=10553
<10553=10554
<10555=10556
<10557=10558
<10558=10560,10559
<10560=10562,10561
<10562=10563
<10563=10565,10564
<10566=10567
<10567=10568
<10568=10572,10569
<10569=10570
<10570=10571
<10572=10573
<10574=10575
<10575=10577,10576
<10577=10579,10578
<10579=10580
<10580=10582,10581
<10612=10618,10617,10613
<10613=10614
<10614=10616,10615
<10618=10631,10624,10619
<10619=10620
<10620=10622,10621
<10622=10623
<10624=10625
<10625=10629,10626
<10626=10627
<10627=10628
<10629=10630
<10631=10679,10632
<10632=10665,10638,10633
<10633=10634
<10634=10636,10635
<10636=10637
<10638=10659,10639
<10639=10646,10640
<10640=10641
<10641=10645,10642
<10642=10644,10643
<10646=10647
<10647=10655,10648
<10648=10653,10649
<10649=10650
<10650=10652,10651
<10653=10654
<10655=10656
<10656=10658,10657
<10659=10660
<10660=10662,10661
<10662=10664,10663
<10665=10666
<10666=10678,10677,10667
<10667=10676,10668
<10668=10670,10669
<10670=10672,10671
<10672=10673
<10673=10675,10674
<10679=10680
<10680=10691,10681
<10681=10685,10682
<10682=10684,10683
<10685=10687,10686
<10687=10688
<10688=10690,10689
<10691=10693,10692
<10693=10695,10694
<10695=10696
<10696=10698,10697
<10712=10718,10717,10713
<10713=10714
<10714=10716,10715
<10718=10719
<10719=10826,10808,10720
<10720=10721
<10721=10799,10781,10722
<10722=10723
<10723=10772,10724
<10724=10768,10759,10750,10741,10732,10725
<10725=10726
<10726=10730,10727
<10727=10728
<10728=10729
<10730=10731
<10732=10733
<10733=10737,10734
<10734=10735
<10735=10736
<10737=10738
<10738=10740,10739
<10741=10742
<10742=10746,10743
<10743=10744
<10744=10745
<10746=10747
<10747=10749,10748
<10750=10751
<10751=10755,10752
<10752=10753
<10753=10754
<10755=10756
<10756=10758,10757
<10759=10760
<10760=10764,10761
<10761=10762
<10762=10763
<10764=10765
<10765=10767,10766
<10768=10769
<10769=10771,10770
<10772=10773
<10773=10775,10774
<10775=10777,10776
<10777=10778
<10778=10780,10779
<10781=10798,10789,10782
<10782=10783
<10783=10787,10784
<10784=10785
<10785=10786
<10787=10788
<10789=10790
<10790=10796,10791
<10791=10794,10792
<10792=10793
<10794=10795
<10796=10797
<10799=10800
<10800=10802,10801
<10802=10804,10803
<10804=10805
<10805=10807,10806
<10808=10825,10816,10809
<10809=10810
<10810=10814,10811
<10811=10812
<10812=10813
<10814=10815
<10816=10817
<10817=10823,10818
<10818=10821,10819
<10819=10820
<10821=10822
<10823=10824
<10826=10827
<10827=10829,10828
<10829=10831,10830
<10831=10832
<10832=10834,10833
<10847=10856,10855,10848
<10848=10852,10849
<10849=10851,10850
<10852=10854,10853
<10856=10878,10857
<10857=10858
<10858=10874,10859
<10859=10860
<10860=10861
<10861=10868,10862
<10862=10866,10863
<10863=10864
<10864=10865
<10866=10867
<10868=10872,10869
<10869=10870
<10870=10871
<10872=10873
<10874=10875
<10875=10877,10876
<10878=10879
<10879=10883,10880
<10880=10881
<10881=10882
<10883=10884
<10884=10886,10885
<10894=10903,10902,10895
<10895=10899,10896
<10896=10898,10897
<10899=10901,10900
<10903=11017,11007,10993,10984,10975,10965,10944,10943,10942,10941,10940,10939,10938,10937,10936,10904
<10904=10905
<10905=10931,10906
<10906=10924,10917,10916,10907
<10907=10908
<10908=10914,10909
<10909=10912,10910
<10910=10911
<10912=10913
<10914=10915
<10917=10918
<10918=10922,10919
<10919=10920
<10920=10921
<10922=10923
<10924=10925
<10925=10929,10926
<10926=10927
<10927=10928
<10929=10930
<10931=10932
<10932=10934,10933
<10934=10935
<10944=10957,10945
<10945=10950,10946
<10946=10947
<10947=10949,10948
<10950=10951
<10951=10953,10952
<10953=10954
<10954=10956,10955
<10957=10958
<10958=10962,10959
<10959=10961,10960
<10962=10964,10963
<10965=10966
<10966=10974,10973,10967
<10967=10972,10968
<10968=10970,10969
<10970=10971
<10975=10976
<10976=10980,10977
<10977=10978
<10978=10979
<10980=10981
<10981=10983,10982
<10984=10985
<10985=10989,10986
<10986=10987
<10987=10988
<10989=10990
<10990=10992,10991
<10993=10994
<10994=11003,10995
<10995=10996
<10996=10997
<10997=11001,10998
<10998=10999
<10999=11000
<11001=11002
<11003=11004
<11004=11006,11005
<11007=11008
<11008=11016,11015,11009
<11009=11014,11010
<11010=11012,11011
<11012=11013
<11034=11037,11036,11035
<11037=11148,11121,11054,11038
<11038=11039
<11039=11050,11040
<11040=11041
<11041=11042
<11042=11044,11043
<11044=11045
<11045=11047,11046
<11047=11049,11048
<11050=11051
<11051=11053,11052
<11054=11113,11102,11099,11055
<11055=11077,11056
<11056=11071,11057
<11057=11058
<11058=11059
<11059=11067,11060
<11060=11063,11061
<11061=11062
<11063=11064
<11064=11066,11065
<11067=11068
<11068=11070,11069
<11071=11072
<11072=11074,11073
<11074=11076,11075
<11077=11078
<11078=11095,11079
<11079=11091,11080
<11080=11081
<11081=11083,11082
<11083=11084
<11084=11086,11085
<11086=11088,11087
<11088=11090,11089
<11091=11092
<11092=11094,11093
<11095=11096
<11096=11098,11097
<11099=11101,11100
<11102=11103
<11103=11112,11104
<11104=11111,11105
<11105=11107,11106
<11107=11108
<11108=11110,11109
<11113=11114
<11114=11115
<11115=11120,11119,11116
<11116=11118,11117
<11121=11139,11122
<11122=11123
<11123=11124
<11124=11135,11125
<11125=11126
<11126=11127
<11127=11131,11128
<11128=11129
<11129=11130
<11131=11132
<11132=11134,11133
<11135=11136
<11136=11138,11137
<11139=11140
<11140=11142,11141
<11142=11144,11143
<11144=11145
<11145=11147,11146
<11148=11179,11168,11165,11149
<11149=11150
<11150=11151
<11151=11159,11152
<11152=11153
<11153=11154
<11154=11156,11155
<11156=11158,11157
<11159=11160
<11160=11162,11161
<11162=11164,11163
<11165=11167,11166
<11168=11169
<11169=11178,11170
<11170=11177,11171
<11171=11173,11172
<11173=11174
<11174=11176,11175
<11179=11180
<11180=11181
<11181=11186,11185,11182
<11182=11184,11183
<11215=11218,11217,11216
<11218=11226,11219
<11219=11220
<11220=11222,11221
<11222=11223
<11223=11225,11224
<11226=11245,11236,11233,11227
<11227=11232,11228
<11228=11229
<11229=11231,11230
<11233=11235,11234
<11236=11237
<11237=11244,11238
<11238=11240,11239
<11240=11241
<11241=11243,11242
<11245=11246
<11246=11247
<11247=11257,11256,11248
<11248=11255,11249
<11249=11251,11250
<11251=11252
<11252=11254,11253
<11265=11271,11270,11266
<11266=11267
<11267=11269,11268
<11271=11457,11359,11312,11301,11290,11279,11274,11272
<11272=11273
<11274=11275
<11275=11277,11276
<11277=11278
<11279=11280
<11280=11286,11281
<11281=11284,11282
<11282=11283
<11284=11285
<11286=11287
<11287=11289,11288
<11290=11291
<11291=11298,11292
<11292=11296,11293
<11293=11294
<11294=11295
<11296=11297
<11298=11300,11299
<11301=11302
<11302=11306,11303
<11303=11304
<11304=11305
<11306=11307
<11307=11309,11308
<11309=11311,11310
<11312=11348,11313
<11313=11339,11323,11314
<11314=11315
<11315=11322,11316
<11316=11318,11317
<11318=11319
<11319=11321,11320
<11323=11324
<11324=11335,11325
<11325=11333,11326
<11326=11327
<11327=11329,11328
<11329=11330
<11330=11332,11331
<11333=11334
<11335=11336
<11336=11338,11337
<11339=11340
<11340=11344,11341
<11341=11342
<11342=11343
<11344=11345
<11345=11347,11346
<11348=11349
<11349=11351,11350
<11351=11353,11352
<11353=11354
<11354=11356,11355
<11356=11358,11357
<11359=11444,11435,11432,11360
<11360=11361
<11361=11419,11362
<11362=11397,11365,11363
<11363=11364
<11365=11391,11366
<11366=11378,11372,11367
<11367=11368
<11368=11370,11369
<11370=11371
<11372=11373
<11373=11377,11374
<11374=11376,11375
<11378=11379
<11379=11387,11380
<11380=11385,11381
<11381=11382
<11382=11384,11383
<11385=11386
<11387=11388
<11388=11390,11389
<11391=11392
<11392=11394,11393
<11394=11396,11395
<11397=11398
<11398=11417,11399
<11399=11408,11406,11402,11400
<11400=11401
<11402=11403
<11403=11405,11404
<11406=11407
<11408=11409
<11409=11415,11410
<11410=11413,11411
<11411=11412
<11413=11414
<11415=11416
<11417=11418
<11419=11420
<11420=11427,11421
<11421=11425,11422
<11422=11423
<11423=11424
<11425=11426
<11427=11429,11428
<11429=11431,11430
<11432=11434,11433
<11435=11436
<11436=11443,11437
<11437=11439,11438
<11439=11440
<11440=11442,11441
<11444=11445
<11445=11446
<11446=11456,11455,11447
<11447=11454,11448
<11448=11450,11449
<11450=11451
<11451=11453,11452
<11457=11458
<11458=11464,11459
<11459=11460
<11460=11461
<11461=11463,11462
<11464=11465
<11492=11495,11494,11493
<11495=11510,11506,11496
<11496=11497
<11497=11505,11498
<11498=11504,11499
<11499=11503,11500
<11500=11502,11501
<11506=11507
<11507=11509,11508
<11510=11511
<11511=11515,11512
<11512=11514,11513
<11519=11522,11521,11520
<11522=11746,11737,11726,11719,11712,11711,11710,11709,11708,11707,11706,11705,11704,11703,11702,11701,11700,11684,11668,11667,11666,11665,11664,11654,11641,11622,11615,11608,11601,11597,11593,11589,11585,11581,11525,11523
<11523=11524
<11525=11577,11526
<11526=11563,11546,11527
<11527=11528
<11528=11542,11529
<11529=11530
<11530=11531
<11531=11533,11532
<11533=11534
<11534=11536,11535
<11536=11540,11537
<11537=11538
<11538=11539
<11540=11541
<11542=11543
<11543=11545,11544
<11546=11547
<11547=11561,11548
<11548=11549
<11549=11550
<11550=11552,11551
<11552=11553
<11553=11555,11554
<11555=11559,11556
<11556=11557
<11557=11558
<11559=11560
<11561=11562
<11563=11564
<11564=11576,11575,11565
<11565=11574,11566
<11566=11572,11567
<11567=11568
<11568=11569
<11569=11571,11570
<11572=11573
<11577=11578
<11578=11580,11579
<11581=11582
<11582=11584,11583
<11585=11586
<11586=11588,11587
<11589=11590
<11590=11592,11591
<11593=11594
<11594=11596,11595
<11597=11598
<11598=11600,11599
<11601=11602
<11602=11604,11603
<11604=11605
<11605=11607,11606
<11608=11609
<11609=11611,11610
<11611=11612
<11612=11614,11613
<11615=11616
<11616=11620,11617
<11617=11618
<11618=11619
<11620=11621
<11622=11623
<11623=11640,11624
<11624=11639,11625
<11625=11638,11626
<11626=11637,11627
<11627=11636,11628
<11628=11634,11629
<11629=11632,11630
<11630=11631
<11632=11633
<11634=11635
<11641=11650,11642
<11642=11645,11643
<11643=11644
<11645=11646
<11646=11648,11647
<11648=11649
<11650=11651
<11651=11653,11652
<11654=11655
<11655=11662,11656
<11656=11657
<11657=11658
<11658=11660,11659
<11660=11661
<11662=11663
<11668=11680,11669
<11669=11670
<11670=11671
<11671=11678,11672
<11672=11673
<11673=11674
<11674=11676,11675
<11676=11677
<11678=11679
<11680=11681
<11681=11683,11682
<11684=11685
<11685=11699,11698,11686
<11686=11697,11687
<11687=11695,11688
<11688=11691,11689
<11689=11690
<11691=11692
<11692=11694,11693
<11695=11696
<11712=11713
<11713=11718,11717,11714
<11714=11716,11715
<11719=11720
<11720=11725,11724,11721
<11721=11723,11722
<11726=11727
<11727=11735,11728
<11728=11731,11729
<11729=11730
<11731=11732
<11732=11734,11733
<11735=11736
<11737=11738
<11738=11744,11739
<11739=11740
<11740=11741
<11741=11743,11742
<11744=11745
<11746=11747
<11747=11749,11748
<11793=11796,11795,11794
<11796=11815,11811,11807,11803,11799,11797
<11797=11798
<11799=11800
<11800=11802,11801
<11803=11804
<11804=11806,11805
<11807=11808
<11808=11810,11809
<11811=11812
<11812=11814,11813
<11815=11816
<11816=11818,11817
