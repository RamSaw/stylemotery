>11	FunctionDef	ParticleManager 
>12	ParameterList	int size
>13	Parameter	 
>14	Identifier	size
>15	ParameterType	int
>16	CompoundStatement	 
>17	ExpressionStatement	 
>18	CallExpression	setSize ( size )
>19	ArgumentList	size
>20	Argument	size
>21	Identifier	size
>22	Callee	setSize
>23	Identifier	setSize
>24	ExpressionStatement	 
>25	AssignmentExpr	numActive = 0
>26	PrimaryExpression	0
>27	Identifier	numActive
>28	ExpressionStatement	 
>29	AssignmentExpr	specialFunction = 0
>30	PrimaryExpression	0
>31	Identifier	specialFunction
>32	ExpressionStatement	 
>33	AssignmentExpr	collideFunction = 0
>34	PrimaryExpression	0
>35	Identifier	collideFunction
>36	ExpressionStatement	 
>37	AssignmentExpr	oldFree = 0
>38	PrimaryExpression	0
>39	Identifier	oldFree
>40	ExpressionStatement	 
>41	AssignmentExpr	free = 0
>42	PrimaryExpression	0
>43	Identifier	free
>44	ExpressionStatement	 
>45	AssignmentExpr	used = 0
>46	PrimaryExpression	0
>47	Identifier	used
>48	ExpressionStatement	 
>49	CallExpression	particles . resize ( size )
>50	ArgumentList	size
>51	Argument	size
>52	Identifier	size
>53	Callee	particles . resize
>54	MemberAccess	particles . resize
>55	Identifier	resize
>56	Identifier	particles
>57	ExpressionStatement	 
>58	AssignmentExpr	particleManager = this
>59	Identifier	this
>60	Identifier	particleManager
>74	FunctionDef	ParticleManager 
>75	ParameterList	int size
>76	Parameter	 
>77	Identifier	size
>78	ParameterType	int
>79	ReturnType	void
>80	CompoundStatement	 
>81	ExpressionStatement	 
>82	AssignmentExpr	free = oldFree = 0
>83	AssignmentExpr	oldFree = 0
>84	PrimaryExpression	0
>85	Identifier	oldFree
>86	Identifier	free
>87	ExpressionStatement	 
>88	AssignmentExpr	this -> halfSize = size * 0.5f
>89	MultiplicativeExpression	size * 0.5f
>90	PrimaryExpression	0.5f
>91	Identifier	size
>92	PtrMemberAccess	this -> halfSize
>93	Identifier	halfSize
>94	Identifier	this
>95	ExpressionStatement	 
>96	AssignmentExpr	this -> size = size
>97	Identifier	size
>98	PtrMemberAccess	this -> size
>99	Identifier	size
>100	Identifier	this
>101	ExpressionStatement	 
>102	CallExpression	particles . resize ( size )
>103	ArgumentList	size
>104	Argument	size
>105	Identifier	size
>106	Callee	particles . resize
>107	MemberAccess	particles . resize
>108	Identifier	resize
>109	Identifier	particles
>110	ExpressionStatement	 
>111	CallExpression	particles . clear ( )
>112	ArgumentList	 
>113	Callee	particles . clear
>114	MemberAccess	particles . clear
>115	Identifier	clear
>116	Identifier	particles
>117	ForStatement	for ( int i = 0 ; i < particles . size ( ) ; i ++ )
>118	CompoundStatement	 
>119	IfStatement	if ( p -> emitter )
>120	CompoundStatement	 
>121	ExpressionStatement	 
>122	CallExpression	p -> emitter -> removeParticle ( p )
>123	ArgumentList	p
>124	Argument	p
>125	Identifier	p
>126	Callee	p -> emitter -> removeParticle
>127	PtrMemberAccess	p -> emitter -> removeParticle
>128	Identifier	removeParticle
>129	PtrMemberAccess	p -> emitter
>130	Identifier	emitter
>131	Identifier	p
>132	Condition	 
>133	PtrMemberAccess	p -> emitter
>134	Identifier	emitter
>135	Identifier	p
>136	IdentifierDeclStatement	 
>137	IdentifierDecl	* p = & particles [ i ]
>138	AssignmentExpr	* p = & particles [ i ]
>139	UnaryOp	& particles [ i ]
>140	ArrayIndexing	particles [ i ]
>141	Identifier	i
>142	Identifier	particles
>143	UnaryOperator	&
>144	Identifier	p
>145	Identifier	p
>146	IdentifierDeclType	Particle *
>147	IncDecOp	 
>148	IncDec	++
>149	Identifier	i
>150	Condition	 
>151	RelationalExpression	i < particles . size ( )
>152	CallExpression	particles . size ( )
>153	ArgumentList	 
>154	Callee	particles . size
>155	MemberAccess	particles . size
>156	Identifier	size
>157	Identifier	particles
>158	Identifier	i
>159	ForInit	 
>160	IdentifierDeclStatement	int i = 0 ;
>161	IdentifierDecl	i = 0
>162	AssignmentExpr	i = 0
>163	PrimaryExpression	0
>164	Identifier	i
>165	Identifier	i
>166	IdentifierDeclType	int
>185	FunctionDef	ParticleManager 
>186	ParameterList	int num
>187	Parameter	 
>188	Identifier	num
>189	ParameterType	int
>190	ReturnType	void
>191	CompoundStatement	 
>192	ExpressionStatement	 
>193	CallExpression	suckPositions . resize ( num )
>194	ArgumentList	num
>195	Argument	num
>196	Identifier	num
>197	Callee	suckPositions . resize
>198	MemberAccess	suckPositions . resize
>199	Identifier	resize
>200	Identifier	suckPositions
>206	FunctionDef	ParticleManager 
>207	ParameterList	int idx , const Vector & pos
>208	Parameter	 
>209	Identifier	pos
>210	ParameterType	const Vector &
>211	Parameter	 
>212	Identifier	idx
>213	ParameterType	int
>214	ReturnType	void
>215	CompoundStatement	 
>216	ExpressionStatement	 
>217	AssignmentExpr	suckPositions [ idx ] = pos
>218	Identifier	pos
>219	ArrayIndexing	suckPositions [ idx ]
>220	Identifier	idx
>221	Identifier	suckPositions
>222	IfStatement	if ( idx < 0 || idx >= suckPositions . size ( ) )
>223	ReturnStatement	 
>224	Condition	 
>225	OrExpression	idx < 0 || idx >= suckPositions . size ( )
>226	RelationalExpression	idx >= suckPositions . size ( )
>227	CallExpression	suckPositions . size ( )
>228	ArgumentList	 
>229	Callee	suckPositions . size
>230	MemberAccess	suckPositions . size
>231	Identifier	size
>232	Identifier	suckPositions
>233	Identifier	idx
>234	RelationalExpression	idx < 0
>235	PrimaryExpression	0
>236	Identifier	idx
>246	FunctionDef	ParticleManager 
>247	ParameterList	int idx
>248	Parameter	 
>249	Identifier	idx
>250	ParameterType	int
>251	ReturnType	Vector *
>252	CompoundStatement	 
>253	ReturnStatement	 
>254	UnaryOp	& suckPositions [ idx ]
>255	ArrayIndexing	suckPositions [ idx ]
>256	Identifier	idx
>257	Identifier	suckPositions
>258	UnaryOperator	&
>259	IfStatement	if ( idx < 0 || idx >= suckPositions . size ( ) )
>260	ReturnStatement	 
>261	PrimaryExpression	0
>262	Condition	 
>263	OrExpression	idx < 0 || idx >= suckPositions . size ( )
>264	RelationalExpression	idx >= suckPositions . size ( )
>265	CallExpression	suckPositions . size ( )
>266	ArgumentList	 
>267	Callee	suckPositions . size
>268	MemberAccess	suckPositions . size
>269	Identifier	size
>270	Identifier	suckPositions
>271	Identifier	idx
>272	RelationalExpression	idx < 0
>273	PrimaryExpression	0
>274	Identifier	idx
>283	FunctionDef	ParticleManager 
>284	ParameterList	Particle * p , float dt
>285	Parameter	 
>286	Identifier	dt
>287	ParameterType	float
>288	Parameter	 
>289	Identifier	p
>290	ParameterType	Particle *
>291	ReturnType	void
>292	CompoundStatement	 
>293	IfStatement	if ( p -> life <= 0 )
>294	CompoundStatement	 
>295	ExpressionStatement	 
>296	CallExpression	endParticle ( p )
>297	ArgumentList	p
>298	Argument	p
>299	Identifier	p
>300	Callee	endParticle
>301	Identifier	endParticle
>302	Condition	 
>303	RelationalExpression	p -> life <= 0
>304	PrimaryExpression	0
>305	PtrMemberAccess	p -> life
>306	Identifier	life
>307	Identifier	p
>308	ExpressionStatement	 
>309	AssignmentExpr	p -> lpos = p -> pos
>310	PtrMemberAccess	p -> pos
>311	Identifier	pos
>312	Identifier	p
>313	PtrMemberAccess	p -> lpos
>314	Identifier	lpos
>315	Identifier	p
>316	IfStatement	if ( p -> emitter )
>317	CompoundStatement	 
>318	IfStatement	if ( p -> rot . z != 0 || p -> rot . isInterpolating ( ) )
>319	ExpressionStatement	 
>320	AssignmentExpr	p -> emitter -> hasRot = true
>321	Identifier	true
>322	PtrMemberAccess	p -> emitter -> hasRot
>323	Identifier	hasRot
>324	PtrMemberAccess	p -> emitter
>325	Identifier	emitter
>326	Identifier	p
>327	Condition	 
>328	OrExpression	p -> rot . z != 0 || p -> rot . isInterpolating ( )
>329	CallExpression	p -> rot . isInterpolating ( )
>330	ArgumentList	 
>331	Callee	p -> rot . isInterpolating
>332	MemberAccess	p -> rot . isInterpolating
>333	Identifier	isInterpolating
>334	PtrMemberAccess	p -> rot
>335	Identifier	rot
>336	Identifier	p
>337	EqualityExpression	p -> rot . z != 0
>338	PrimaryExpression	0
>339	MemberAccess	p -> rot . z
>340	Identifier	z
>341	PtrMemberAccess	p -> rot
>342	Identifier	rot
>343	Identifier	p
>344	IfStatement	if ( p -> emitter -> data . suckIndex > - 1 )
>345	CompoundStatement	 
>346	IfStatement	if ( suckPos )
>347	CompoundStatement	 
>348	ExpressionStatement	 
>349	AssignmentExpr	p -> vel += dir * dt
>350	MultiplicativeExpression	dir * dt
>351	Identifier	dt
>352	Identifier	dir
>353	PtrMemberAccess	p -> vel
>354	Identifier	vel
>355	Identifier	p
>356	ExpressionStatement	 
>357	CallExpression	dir . setLength2D ( p -> emitter -> data . suckStr )
>358	ArgumentList	p -> emitter -> data . suckStr
>359	Argument	p -> emitter -> data . suckStr
>360	MemberAccess	p -> emitter -> data . suckStr
>361	Identifier	suckStr
>362	PtrMemberAccess	p -> emitter -> data
>363	Identifier	data
>364	PtrMemberAccess	p -> emitter
>365	Identifier	emitter
>366	Identifier	p
>367	Callee	dir . setLength2D
>368	MemberAccess	dir . setLength2D
>369	Identifier	setLength2D
>370	Identifier	dir
>371	IfStatement	if ( ! p -> emitter -> data . spawnLocal && p -> emitter -> getParent ( ) )
>372	ExpressionStatement	 
>373	AssignmentExpr	dir += p -> emitter -> getParent ( ) -> position
>374	PtrMemberAccess	p -> emitter -> getParent ( ) -> position
>375	Identifier	position
>376	CallExpression	p -> emitter -> getParent ( )
>377	ArgumentList	 
>378	Callee	p -> emitter -> getParent
>379	PtrMemberAccess	p -> emitter -> getParent
>380	Identifier	getParent
>381	PtrMemberAccess	p -> emitter
>382	Identifier	emitter
>383	Identifier	p
>384	Identifier	dir
>385	Condition	 
>386	AndExpression	! p -> emitter -> data . spawnLocal && p -> emitter -> getParent ( )
>387	CallExpression	p -> emitter -> getParent ( )
>388	ArgumentList	 
>389	Callee	p -> emitter -> getParent
>390	PtrMemberAccess	p -> emitter -> getParent
>391	Identifier	getParent
>392	PtrMemberAccess	p -> emitter
>393	Identifier	emitter
>394	Identifier	p
>395	UnaryOp	! p -> emitter -> data . spawnLocal
>396	MemberAccess	p -> emitter -> data . spawnLocal
>397	Identifier	spawnLocal
>398	PtrMemberAccess	p -> emitter -> data
>399	Identifier	data
>400	PtrMemberAccess	p -> emitter
>401	Identifier	emitter
>402	Identifier	p
>403	UnaryOperator	!
>404	IdentifierDeclStatement	 
>405	IdentifierDecl	dir = ( * suckPos ) - p -> emitter -> getWorldCollidePosition ( p -> pos )
>406	AssignmentExpr	dir = ( * suckPos ) - p -> emitter -> getWorldCollidePosition ( p -> pos )
>407	AdditiveExpression	( * suckPos ) - p -> emitter -> getWorldCollidePosition ( p -> pos )
>408	CallExpression	p -> emitter -> getWorldCollidePosition ( p -> pos )
>409	ArgumentList	p -> pos
>410	Argument	p -> pos
>411	PtrMemberAccess	p -> pos
>412	Identifier	pos
>413	Identifier	p
>414	Callee	p -> emitter -> getWorldCollidePosition
>415	PtrMemberAccess	p -> emitter -> getWorldCollidePosition
>416	Identifier	getWorldCollidePosition
>417	PtrMemberAccess	p -> emitter
>418	Identifier	emitter
>419	Identifier	p
>420	UnaryOp	* suckPos
>421	Identifier	suckPos
>422	UnaryOperator	*
>423	Identifier	dir
>424	Identifier	dir
>425	IdentifierDeclType	Vector
>426	Condition	 
>427	Identifier	suckPos
>428	IdentifierDeclStatement	 
>429	IdentifierDecl	* suckPos = getSuckPosition ( p -> emitter -> data . suckIndex )
>430	AssignmentExpr	* suckPos = getSuckPosition ( p -> emitter -> data . suckIndex )
>431	CallExpression	getSuckPosition ( p -> emitter -> data . suckIndex )
>432	ArgumentList	p -> emitter -> data . suckIndex
>433	Argument	p -> emitter -> data . suckIndex
>434	MemberAccess	p -> emitter -> data . suckIndex
>435	Identifier	suckIndex
>436	PtrMemberAccess	p -> emitter -> data
>437	Identifier	data
>438	PtrMemberAccess	p -> emitter
>439	Identifier	emitter
>440	Identifier	p
>441	Callee	getSuckPosition
>442	Identifier	getSuckPosition
>443	Identifier	suckPos
>444	Identifier	suckPos
>445	IdentifierDeclType	Vector *
>446	Condition	 
>447	RelationalExpression	p -> emitter -> data . suckIndex > - 1
>448	UnaryOp	- 1
>449	PrimaryExpression	1
>450	UnaryOperator	-
>451	MemberAccess	p -> emitter -> data . suckIndex
>452	Identifier	suckIndex
>453	PtrMemberAccess	p -> emitter -> data
>454	Identifier	data
>455	PtrMemberAccess	p -> emitter
>456	Identifier	emitter
>457	Identifier	p
>458	IfStatement	if ( p -> emitter -> data . influenced )
>459	CompoundStatement	 
>460	ForStatement	for ( ; i != influences . end ( ) ; i ++ )
>461	CompoundStatement	 
>462	IfStatement	if ( ( pinf -> pos - pos ) . isLength2DIn ( pinf -> size + p -> emitter -> data . influenced ) )
>463	CompoundStatement	 
>464	IfStatement	if ( ! pinf -> pull )
>465	ElseStatement	else
>466	ExpressionStatement	 
>467	AssignmentExpr	p -> vel -= dir * dt
>468	MultiplicativeExpression	dir * dt
>469	Identifier	dt
>470	Identifier	dir
>471	PtrMemberAccess	p -> vel
>472	Identifier	vel
>473	Identifier	p
>474	ExpressionStatement	 
>475	AssignmentExpr	p -> vel += dir * dt
>476	MultiplicativeExpression	dir * dt
>477	Identifier	dt
>478	Identifier	dir
>479	PtrMemberAccess	p -> vel
>480	Identifier	vel
>481	Identifier	p
>482	Condition	 
>483	UnaryOp	! pinf -> pull
>484	PtrMemberAccess	pinf -> pull
>485	Identifier	pull
>486	Identifier	pinf
>487	UnaryOperator	!
>488	ExpressionStatement	 
>489	CallExpression	dir . setLength2D ( pinf -> spd )
>490	ArgumentList	pinf -> spd
>491	Argument	pinf -> spd
>492	PtrMemberAccess	pinf -> spd
>493	Identifier	spd
>494	Identifier	pinf
>495	Callee	dir . setLength2D
>496	MemberAccess	dir . setLength2D
>497	Identifier	setLength2D
>498	Identifier	dir
>499	IdentifierDeclStatement	 
>500	IdentifierDecl	dir = pos - pinf -> pos
>501	AssignmentExpr	dir = pos - pinf -> pos
>502	AdditiveExpression	pos - pinf -> pos
>503	PtrMemberAccess	pinf -> pos
>504	Identifier	pos
>505	Identifier	pinf
>506	Identifier	pos
>507	Identifier	dir
>508	Identifier	dir
>509	IdentifierDeclType	Vector
>510	Condition	 
>511	CallExpression	( pinf -> pos - pos ) . isLength2DIn ( pinf -> size + p -> emitter -> data . influenced )
>512	ArgumentList	pinf -> size + p -> emitter -> data . influenced
>513	Argument	pinf -> size + p -> emitter -> data . influenced
>514	AdditiveExpression	pinf -> size + p -> emitter -> data . influenced
>515	MemberAccess	p -> emitter -> data . influenced
>516	Identifier	influenced
>517	PtrMemberAccess	p -> emitter -> data
>518	Identifier	data
>519	PtrMemberAccess	p -> emitter
>520	Identifier	emitter
>521	Identifier	p
>522	PtrMemberAccess	pinf -> size
>523	Identifier	size
>524	Identifier	pinf
>525	Callee	( pinf -> pos - pos ) . isLength2DIn
>526	MemberAccess	( pinf -> pos - pos ) . isLength2DIn
>527	Identifier	isLength2DIn
>528	AdditiveExpression	pinf -> pos - pos
>529	Identifier	pos
>530	PtrMemberAccess	pinf -> pos
>531	Identifier	pos
>532	Identifier	pinf
>533	IfStatement	if ( p -> emitter -> data . spawnLocal && p -> emitter -> getParent ( ) )
>534	ExpressionStatement	 
>535	AssignmentExpr	pos += p -> emitter -> getParent ( ) -> position
>536	PtrMemberAccess	p -> emitter -> getParent ( ) -> position
>537	Identifier	position
>538	CallExpression	p -> emitter -> getParent ( )
>539	ArgumentList	 
>540	Callee	p -> emitter -> getParent
>541	PtrMemberAccess	p -> emitter -> getParent
>542	Identifier	getParent
>543	PtrMemberAccess	p -> emitter
>544	Identifier	emitter
>545	Identifier	p
>546	Identifier	pos
>547	Condition	 
>548	AndExpression	p -> emitter -> data . spawnLocal && p -> emitter -> getParent ( )
>549	CallExpression	p -> emitter -> getParent ( )
>550	ArgumentList	 
>551	Callee	p -> emitter -> getParent
>552	PtrMemberAccess	p -> emitter -> getParent
>553	Identifier	getParent
>554	PtrMemberAccess	p -> emitter
>555	Identifier	emitter
>556	Identifier	p
>557	MemberAccess	p -> emitter -> data . spawnLocal
>558	Identifier	spawnLocal
>559	PtrMemberAccess	p -> emitter -> data
>560	Identifier	data
>561	PtrMemberAccess	p -> emitter
>562	Identifier	emitter
>563	Identifier	p
>564	IdentifierDeclStatement	 
>565	IdentifierDecl	pos = p -> pos
>566	AssignmentExpr	pos = p -> pos
>567	PtrMemberAccess	p -> pos
>568	Identifier	pos
>569	Identifier	p
>570	Identifier	pos
>571	Identifier	pos
>572	IdentifierDeclType	Vector
>573	ExpressionStatement	 
>574	AssignmentExpr	pinf = & ( * i )
>575	UnaryOp	& ( * i )
>576	UnaryOp	* i
>577	Identifier	i
>578	UnaryOperator	*
>579	UnaryOperator	&
>580	Identifier	pinf
>581	IncDecOp	 
>582	IncDec	++
>583	Identifier	i
>584	Condition	 
>585	EqualityExpression	i != influences . end ( )
>586	CallExpression	influences . end ( )
>587	ArgumentList	 
>588	Callee	influences . end
>589	MemberAccess	influences . end
>590	Identifier	end
>591	Identifier	influences
>592	Identifier	i
>593	IdentifierDeclStatement	 
>594	IdentifierDecl	i = influences . begin ( )
>595	AssignmentExpr	i = influences . begin ( )
>596	CallExpression	influences . begin ( )
>597	ArgumentList	 
>598	Callee	influences . begin
>599	MemberAccess	influences . begin
>600	Identifier	begin
>601	Identifier	influences
>602	Identifier	i
>603	Identifier	i
>604	IdentifierDeclType	Influences 
>605	ExpressionStatement	 
>606	AssignmentExpr	p -> lpos = p -> pos
>607	PtrMemberAccess	p -> pos
>608	Identifier	pos
>609	Identifier	p
>610	PtrMemberAccess	p -> lpos
>611	Identifier	lpos
>612	Identifier	p
>613	IfStatement	if ( specialFunction )
>614	CompoundStatement	 
>615	ExpressionStatement	 
>616	CallExpression	specialFunction ( p )
>617	ArgumentList	p
>618	Argument	p
>619	Identifier	p
>620	Callee	specialFunction
>621	Identifier	specialFunction
>622	Condition	 
>623	Identifier	specialFunction
>624	IfStatement	if ( collideFunction )
>625	CompoundStatement	 
>626	IfStatement	if ( collideFunction ( p -> pos ) )
>627	CompoundStatement	 
>628	IfStatement	if ( bounce )
>629	ElseStatement	else
>630	CompoundStatement	 
>631	ReturnStatement	 
>632	ExpressionStatement	 
>633	CallExpression	endParticle ( p )
>634	ArgumentList	p
>635	Argument	p
>636	Identifier	p
>637	Callee	endParticle
>638	Identifier	endParticle
>639	ExpressionStatement	 
>640	AssignmentExpr	p -> vel = 0
>641	PrimaryExpression	0
>642	PtrMemberAccess	p -> vel
>643	Identifier	vel
>644	Identifier	p
>645	CompoundStatement	 
>646	ExpressionStatement	 
>647	AssignmentExpr	p -> vel = - p -> vel
>648	UnaryOp	- p -> vel
>649	PtrMemberAccess	p -> vel
>650	Identifier	vel
>651	Identifier	p
>652	UnaryOperator	-
>653	PtrMemberAccess	p -> vel
>654	Identifier	vel
>655	Identifier	p
>656	ExpressionStatement	 
>657	AssignmentExpr	p -> pos = p -> lpos
>658	PtrMemberAccess	p -> lpos
>659	Identifier	lpos
>660	Identifier	p
>661	PtrMemberAccess	p -> pos
>662	Identifier	pos
>663	Identifier	p
>664	Condition	 
>665	Identifier	bounce
>666	IdentifierDeclStatement	 
>667	IdentifierDecl	bounce = false
>668	AssignmentExpr	bounce = false
>669	Identifier	false
>670	Identifier	false
>671	Identifier	bounce
>672	IdentifierDeclType	const bool
>673	Condition	 
>674	CallExpression	collideFunction ( p -> pos )
>675	ArgumentList	p -> pos
>676	Argument	p -> pos
>677	PtrMemberAccess	p -> pos
>678	Identifier	pos
>679	Identifier	p
>680	Callee	collideFunction
>681	Identifier	collideFunction
>682	Condition	 
>683	Identifier	collideFunction
>684	IdentifierDeclStatement	 
>685	IdentifierDecl	* pinf = 0
>686	AssignmentExpr	* pinf = 0
>687	PrimaryExpression	0
>688	Identifier	pinf
>689	Identifier	pinf
>690	IdentifierDeclType	ParticleInfluence *
>691	Condition	 
>692	MemberAccess	p -> emitter -> data . influenced
>693	Identifier	influenced
>694	PtrMemberAccess	p -> emitter -> data
>695	Identifier	data
>696	PtrMemberAccess	p -> emitter
>697	Identifier	emitter
>698	Identifier	p
>699	Condition	 
>700	PtrMemberAccess	p -> emitter
>701	Identifier	emitter
>702	Identifier	p
>703	ExpressionStatement	 
>704	AssignmentExpr	p -> vel += p -> gvy * dt
>705	MultiplicativeExpression	p -> gvy * dt
>706	Identifier	dt
>707	PtrMemberAccess	p -> gvy
>708	Identifier	gvy
>709	Identifier	p
>710	PtrMemberAccess	p -> vel
>711	Identifier	vel
>712	Identifier	p
>713	ExpressionStatement	 
>714	AssignmentExpr	p -> life = p -> life - dt
>715	AdditiveExpression	p -> life - dt
>716	Identifier	dt
>717	PtrMemberAccess	p -> life
>718	Identifier	life
>719	Identifier	p
>720	PtrMemberAccess	p -> life
>721	Identifier	life
>722	Identifier	p
>723	ExpressionStatement	 
>724	AssignmentExpr	p -> pos += p -> vel * dt
>725	MultiplicativeExpression	p -> vel * dt
>726	Identifier	dt
>727	PtrMemberAccess	p -> vel
>728	Identifier	vel
>729	Identifier	p
>730	PtrMemberAccess	p -> pos
>731	Identifier	pos
>732	Identifier	p
>733	ExpressionStatement	 
>734	CallExpression	p -> rot . update ( dt )
>735	ArgumentList	dt
>736	Argument	dt
>737	Identifier	dt
>738	Callee	p -> rot . update
>739	MemberAccess	p -> rot . update
>740	Identifier	update
>741	PtrMemberAccess	p -> rot
>742	Identifier	rot
>743	Identifier	p
>744	ExpressionStatement	 
>745	CallExpression	p -> scale . update ( dt )
>746	ArgumentList	dt
>747	Argument	dt
>748	Identifier	dt
>749	Callee	p -> scale . update
>750	MemberAccess	p -> scale . update
>751	Identifier	update
>752	PtrMemberAccess	p -> scale
>753	Identifier	scale
>754	Identifier	p
>755	ExpressionStatement	 
>756	CallExpression	p -> alpha . update ( dt )
>757	ArgumentList	dt
>758	Argument	dt
>759	Identifier	dt
>760	Callee	p -> alpha . update
>761	MemberAccess	p -> alpha . update
>762	Identifier	update
>763	PtrMemberAccess	p -> alpha
>764	Identifier	alpha
>765	Identifier	p
>766	ExpressionStatement	 
>767	CallExpression	p -> color . update ( dt )
>768	ArgumentList	dt
>769	Argument	dt
>770	Identifier	dt
>771	Callee	p -> color . update
>772	MemberAccess	p -> color . update
>773	Identifier	update
>774	PtrMemberAccess	p -> color
>775	Identifier	color
>776	Identifier	p
>777	IfStatement	if ( p -> emitter && p -> emitter -> data . pauseLevel < core -> particlesPaused )
>778	ReturnStatement	 
>779	Condition	 
>780	AndExpression	p -> emitter && p -> emitter -> data . pauseLevel < core -> particlesPaused
>781	RelationalExpression	p -> emitter -> data . pauseLevel < core -> particlesPaused
>782	PtrMemberAccess	core -> particlesPaused
>783	Identifier	particlesPaused
>784	Identifier	core
>785	MemberAccess	p -> emitter -> data . pauseLevel
>786	Identifier	pauseLevel
>787	PtrMemberAccess	p -> emitter -> data
>788	Identifier	data
>789	PtrMemberAccess	p -> emitter
>790	Identifier	emitter
>791	Identifier	p
>792	PtrMemberAccess	p -> emitter
>793	Identifier	emitter
>794	Identifier	p
>795	ExpressionStatement	 
>796	IncDecOp	numActive ++
>797	IncDec	++
>798	Identifier	numActive
>799	IfStatement	if ( ! p -> active )
>800	ReturnStatement	 
>801	Condition	 
>802	UnaryOp	! p -> active
>803	PtrMemberAccess	p -> active
>804	Identifier	active
>805	Identifier	p
>806	UnaryOperator	!
>867	FunctionDef	ParticleManager 
>868	ParameterList	Particle * p
>869	Parameter	 
>870	Identifier	p
>871	ParameterType	Particle *
>872	ReturnType	void
>873	CompoundStatement	 
>874	ExpressionStatement	 
>875	CallExpression	p -> reset ( )
>876	ArgumentList	 
>877	Callee	p -> reset
>878	PtrMemberAccess	p -> reset
>879	Identifier	reset
>880	Identifier	p
>881	IfStatement	if ( p -> index != - 1 )
>882	CompoundStatement	 
>883	Condition	 
>884	EqualityExpression	p -> index != - 1
>885	UnaryOp	- 1
>886	PrimaryExpression	1
>887	UnaryOperator	-
>888	PtrMemberAccess	p -> index
>889	Identifier	index
>890	Identifier	p
>891	IfStatement	if ( p -> emitter )
>892	CompoundStatement	 
>893	ExpressionStatement	 
>894	CallExpression	p -> emitter -> removeParticle ( p )
>895	ArgumentList	p
>896	Argument	p
>897	Identifier	p
>898	Callee	p -> emitter -> removeParticle
>899	PtrMemberAccess	p -> emitter -> removeParticle
>900	Identifier	removeParticle
>901	PtrMemberAccess	p -> emitter
>902	Identifier	emitter
>903	Identifier	p
>904	IfStatement	if ( ! p -> emitter -> data . deathPrt . empty ( ) )
>905	CompoundStatement	 
>906	IfStatement	if ( r )
>907	ExpressionStatement	 
>908	CallExpression	core -> createParticleEffect ( p -> emitter -> data . deathPrt , p -> pos , r -> layer , p -> rot . z )
>909	ArgumentList	p -> emitter -> data . deathPrt
>910	Argument	p -> rot . z
>911	MemberAccess	p -> rot . z
>912	Identifier	z
>913	PtrMemberAccess	p -> rot
>914	Identifier	rot
>915	Identifier	p
>916	Argument	r -> layer
>917	PtrMemberAccess	r -> layer
>918	Identifier	layer
>919	Identifier	r
>920	Argument	p -> pos
>921	PtrMemberAccess	p -> pos
>922	Identifier	pos
>923	Identifier	p
>924	Argument	p -> emitter -> data . deathPrt
>925	MemberAccess	p -> emitter -> data . deathPrt
>926	Identifier	deathPrt
>927	PtrMemberAccess	p -> emitter -> data
>928	Identifier	data
>929	PtrMemberAccess	p -> emitter
>930	Identifier	emitter
>931	Identifier	p
>932	Callee	core -> createParticleEffect
>933	PtrMemberAccess	core -> createParticleEffect
>934	Identifier	createParticleEffect
>935	Identifier	core
>936	Condition	 
>937	Identifier	r
>938	IdentifierDeclStatement	 
>939	IdentifierDecl	* r = p -> emitter -> getTopParent ( )
>940	AssignmentExpr	* r = p -> emitter -> getTopParent ( )
>941	CallExpression	p -> emitter -> getTopParent ( )
>942	ArgumentList	 
>943	Callee	p -> emitter -> getTopParent
>944	PtrMemberAccess	p -> emitter -> getTopParent
>945	Identifier	getTopParent
>946	PtrMemberAccess	p -> emitter
>947	Identifier	emitter
>948	Identifier	p
>949	Identifier	r
>950	Identifier	r
>951	IdentifierDeclType	RenderObject *
>952	Condition	 
>953	UnaryOp	! p -> emitter -> data . deathPrt . empty ( )
>954	CallExpression	p -> emitter -> data . deathPrt . empty ( )
>955	ArgumentList	 
>956	Callee	p -> emitter -> data . deathPrt . empty
>957	MemberAccess	p -> emitter -> data . deathPrt . empty
>958	Identifier	empty
>959	MemberAccess	p -> emitter -> data . deathPrt
>960	Identifier	deathPrt
>961	PtrMemberAccess	p -> emitter -> data
>962	Identifier	data
>963	PtrMemberAccess	p -> emitter
>964	Identifier	emitter
>965	Identifier	p
>966	UnaryOperator	!
>967	Condition	 
>968	PtrMemberAccess	p -> emitter
>969	Identifier	emitter
>970	Identifier	p
>971	IfStatement	if ( ! p )
>972	ReturnStatement	 
>973	Condition	 
>974	UnaryOp	! p
>975	Identifier	p
>976	UnaryOperator	!
>997	FunctionDef	ParticleManager 
>998	ParameterList	int jump
>999	Parameter	 
>1000	Identifier	jump
>1001	ParameterType	int
>1002	ReturnType	void
>1003	CompoundStatement	 
>1004	IfStatement	if ( free >= size )
>1005	ExpressionStatement	 
>1006	AssignmentExpr	free -= size
>1007	Identifier	size
>1008	Identifier	free
>1009	Condition	 
>1010	RelationalExpression	free >= size
>1011	Identifier	size
>1012	Identifier	free
>1013	ExpressionStatement	 
>1014	AssignmentExpr	free += jump
>1015	Identifier	jump
>1016	Identifier	free
>1023	FunctionDef	ParticleManager 
>1024	ParameterList	int jump
>1025	Parameter	 
>1026	Identifier	jump
>1027	ParameterType	int
>1028	ReturnType	void
>1029	CompoundStatement	 
>1030	IfStatement	if ( free < 0 )
>1031	ExpressionStatement	 
>1032	AssignmentExpr	free += size
>1033	Identifier	size
>1034	Identifier	free
>1035	Condition	 
>1036	RelationalExpression	free < 0
>1037	PrimaryExpression	0
>1038	Identifier	free
>1039	ExpressionStatement	 
>1040	AssignmentExpr	free -= jump
>1041	Identifier	jump
>1042	Identifier	free
>1049	FunctionDef	ParticleManager 
>1050	ParameterList	int free
>1051	Parameter	 
>1052	Identifier	free
>1053	ParameterType	int
>1054	ReturnType	void
>1055	CompoundStatement	 
>1056	IfStatement	if ( free != - 1 )
>1057	CompoundStatement	 
>1058	ExpressionStatement	 
>1059	AssignmentExpr	this -> free = free
>1060	Identifier	free
>1061	PtrMemberAccess	this -> free
>1062	Identifier	free
>1063	Identifier	this
>1064	Condition	 
>1065	EqualityExpression	free != - 1
>1066	UnaryOp	- 1
>1067	PrimaryExpression	1
>1068	UnaryOperator	-
>1069	Identifier	free
>1081	FunctionDef	ParticleManager 
>1082	ParameterList	 
>1083	ReturnType	Particle *
>1084	CompoundStatement	 
>1085	ReturnStatement	 
>1086	Identifier	p
>1087	ExpressionStatement	 
>1088	AssignmentExpr	p -> index = idx
>1089	Identifier	idx
>1090	PtrMemberAccess	p -> index
>1091	Identifier	index
>1092	Identifier	p
>1093	ExpressionStatement	 
>1094	CallExpression	endParticle ( p )
>1095	ArgumentList	p
>1096	Argument	p
>1097	Identifier	p
>1098	Callee	endParticle
>1099	Identifier	endParticle
>1100	IfStatement	if ( exceed )
>1101	CompoundStatement	 
>1102	Condition	 
>1103	Identifier	exceed
>1104	DoStatement	do
>1105	Condition	 
>1106	PtrMemberAccess	p -> active
>1107	Identifier	active
>1108	Identifier	p
>1109	CompoundStatement	 
>1110	ExpressionStatement	 
>1111	IncDecOp	c ++
>1112	IncDec	++
>1113	Identifier	c
>1114	ExpressionStatement	 
>1115	CallExpression	nextFree ( )
>1116	ArgumentList	 
>1117	Callee	nextFree
>1118	Identifier	nextFree
>1119	ExpressionStatement	 
>1120	AssignmentExpr	idx = free
>1121	Identifier	free
>1122	Identifier	idx
>1123	ExpressionStatement	 
>1124	AssignmentExpr	p = & particles [ free ]
>1125	UnaryOp	& particles [ free ]
>1126	ArrayIndexing	particles [ free ]
>1127	Identifier	free
>1128	Identifier	particles
>1129	UnaryOperator	&
>1130	Identifier	p
>1131	IfStatement	if ( c >= spreadCheck )
>1132	CompoundStatement	 
>1133	BreakStatement	 
>1134	ExpressionStatement	 
>1135	AssignmentExpr	exceed = true
>1136	Identifier	true
>1137	Identifier	exceed
>1138	Condition	 
>1139	RelationalExpression	c >= spreadCheck
>1140	Identifier	spreadCheck
>1141	Identifier	c
>1142	ExpressionStatement	 
>1143	CallExpression	nextFree ( )
>1144	ArgumentList	 
>1145	Callee	nextFree
>1146	Identifier	nextFree
>1147	IdentifierDeclStatement	 
>1148	IdentifierDecl	exceed = false
>1149	AssignmentExpr	exceed = false
>1150	Identifier	false
>1151	Identifier	false
>1152	Identifier	exceed
>1153	IdentifierDeclType	bool
>1154	IdentifierDeclStatement	 
>1155	IdentifierDecl	* p = 0
>1156	AssignmentExpr	* p = 0
>1157	PrimaryExpression	0
>1158	Identifier	p
>1159	Identifier	p
>1160	IdentifierDeclType	Particle *
>1161	IdentifierDeclStatement	 
>1162	IdentifierDecl	idx = - 1
>1163	AssignmentExpr	idx = - 1
>1164	UnaryOp	- 1
>1165	PrimaryExpression	1
>1166	UnaryOperator	-
>1167	Identifier	idx
>1168	Identifier	idx
>1169	IdentifierDeclType	int
>1170	IdentifierDecl	c = 0
>1171	AssignmentExpr	c = 0
>1172	PrimaryExpression	0
>1173	Identifier	c
>1174	Identifier	c
>1175	IdentifierDeclType	int
>1193	FunctionDef	ParticleManager 
>1194	ParameterList	Emitter * emitter
>1195	Parameter	 
>1196	Identifier	emitter
>1197	ParameterType	Emitter *
>1198	ReturnType	Particle *
>1199	CompoundStatement	 
>1200	ReturnStatement	 
>1201	Identifier	p
>1202	IfStatement	if ( emitter )
>1203	CompoundStatement	 
>1204	ExpressionStatement	 
>1205	CallExpression	emitter -> addParticle ( p )
>1206	ArgumentList	p
>1207	Argument	p
>1208	Identifier	p
>1209	Callee	emitter -> addParticle
>1210	PtrMemberAccess	emitter -> addParticle
>1211	Identifier	addParticle
>1212	Identifier	emitter
>1213	ExpressionStatement	 
>1214	AssignmentExpr	p -> emitter = emitter
>1215	Identifier	emitter
>1216	PtrMemberAccess	p -> emitter
>1217	Identifier	emitter
>1218	Identifier	p
>1219	Condition	 
>1220	Identifier	emitter
>1221	IfStatement	if ( p -> active )
>1222	ElseStatement	else
>1223	CompoundStatement	 
>1224	ExpressionStatement	 
>1225	CallExpression	nextFree ( spread )
>1226	ArgumentList	spread
>1227	Argument	spread
>1228	Identifier	spread
>1229	Callee	nextFree
>1230	Identifier	nextFree
>1231	ExpressionStatement	 
>1232	AssignmentExpr	p -> index = free
>1233	Identifier	free
>1234	PtrMemberAccess	p -> index
>1235	Identifier	index
>1236	Identifier	p
>1237	ExpressionStatement	 
>1238	CallExpression	endParticle ( p )
>1239	ArgumentList	p
>1240	Argument	p
>1241	Identifier	p
>1242	Callee	endParticle
>1243	Identifier	endParticle
>1244	CompoundStatement	 
>1245	ExpressionStatement	 
>1246	AssignmentExpr	p = stomp ( )
>1247	CallExpression	stomp ( )
>1248	ArgumentList	 
>1249	Callee	stomp
>1250	Identifier	stomp
>1251	Identifier	p
>1252	Condition	 
>1253	PtrMemberAccess	p -> active
>1254	Identifier	active
>1255	Identifier	p
>1256	ExpressionStatement	 
>1257	AssignmentExpr	p = & particles [ free ]
>1258	UnaryOp	& particles [ free ]
>1259	ArrayIndexing	particles [ free ]
>1260	Identifier	free
>1261	Identifier	particles
>1262	UnaryOperator	&
>1263	Identifier	p
>1264	IdentifierDeclStatement	 
>1265	IdentifierDecl	* p = 0
>1266	AssignmentExpr	* p = 0
>1267	PrimaryExpression	0
>1268	Identifier	p
>1269	Identifier	p
>1270	IdentifierDeclType	Particle *
>1271	IfStatement	if ( size == 0 )
>1272	ReturnStatement	 
>1273	PrimaryExpression	0
>1274	Condition	 
>1275	EqualityExpression	size == 0
>1276	PrimaryExpression	0
>1277	Identifier	size
>1278	ExpressionStatement	 
>1279	CallExpression	BBGE_PROF ( ParticleManager_getFreeParticle )
>1280	ArgumentList	ParticleManager_getFreeParticle
>1281	Argument	ParticleManager_getFreeParticle
>1282	Identifier	ParticleManager_getFreeParticle
>1283	Callee	BBGE_PROF
>1284	Identifier	BBGE_PROF
>1302	FunctionDef	loadParticleCallback (const std 
>1303	ParameterList	const std 
>1304	Parameter	 
>1305	Identifier	param
>1306	ParameterType	intptr_t
>1307	Parameter	 
>1308	Identifier	filename
>1309	ParameterType	const std 
>1310	ReturnType	void
>1311	CompoundStatement	 
>1312	ExpressionStatement	 
>1313	AssignmentExpr	particleBank [ ident ] = e
>1314	Identifier	e
>1315	ArrayIndexing	particleBank [ ident ]
>1316	Identifier	ident
>1317	Identifier	particleBank
>1318	ExpressionStatement	 
>1319	CallExpression	e -> bankLoad ( ident , ParticleManager 
>1320	ArgumentList	ident
>1321	Argument	ParticleManager 
>1322	Identifier	ParticleManager 
>1323	Argument	ident
>1324	Identifier	ident
>1325	Callee	e -> bankLoad
>1326	PtrMemberAccess	e -> bankLoad
>1327	Identifier	bankLoad
>1328	Identifier	e
>1329	ExpressionStatement	 
>1330	CallExpression	stringToLower ( ident )
>1331	ArgumentList	ident
>1332	Argument	ident
>1333	Identifier	ident
>1334	Callee	stringToLower
>1335	Identifier	stringToLower
>1336	ExpressionStatement	 
>1337	AssignmentExpr	ident = filename . substr ( first , filename . find_last_of ( '.' ) - first )
>1338	CallExpression	filename . substr ( first , filename . find_last_of ( '.' ) - first )
>1339	ArgumentList	first
>1340	Argument	filename . find_last_of ( '.' ) - first
>1341	AdditiveExpression	filename . find_last_of ( '.' ) - first
>1342	Identifier	first
>1343	CallExpression	filename . find_last_of ( '.' )
>1344	ArgumentList	'.'
>1345	Argument	'.'
>1346	PrimaryExpression	'.'
>1347	Callee	filename . find_last_of
>1348	MemberAccess	filename . find_last_of
>1349	Identifier	find_last_of
>1350	Identifier	filename
>1351	Argument	first
>1352	Identifier	first
>1353	Callee	filename . substr
>1354	MemberAccess	filename . substr
>1355	Identifier	substr
>1356	Identifier	filename
>1357	Identifier	ident
>1358	IdentifierDeclStatement	 
>1359	IdentifierDecl	first = filename . find_last_of ( '/' ) + 1
>1360	AssignmentExpr	first = filename . find_last_of ( '/' ) + 1
>1361	AdditiveExpression	filename . find_last_of ( '/' ) + 1
>1362	PrimaryExpression	1
>1363	CallExpression	filename . find_last_of ( '/' )
>1364	ArgumentList	'/'
>1365	Argument	'/'
>1366	PrimaryExpression	'/'
>1367	Callee	filename . find_last_of
>1368	MemberAccess	filename . find_last_of
>1369	Identifier	find_last_of
>1370	Identifier	filename
>1371	Identifier	first
>1372	Identifier	first
>1373	IdentifierDeclType	int
>1374	IdentifierDeclStatement	 
>1375	IdentifierDecl	ident
>1376	Identifier	ident
>1377	IdentifierDeclType	std 
>1378	IdentifierDeclStatement	 
>1379	IdentifierDecl	* e = new ParticleEffect ( )
>1380	AssignmentExpr	* e = new ParticleEffect ( )
>1381	UnaryExpression	new ParticleEffect ( )
>1382	Identifier	e
>1383	Identifier	e
>1384	IdentifierDeclType	ParticleEffect *
>1399	FunctionDef	ParticleManager 
>1400	ParameterList	const std 
>1401	Parameter	 
>1402	Identifier	bank2
>1403	ParameterType	const std 
>1404	Parameter	 
>1405	Identifier	bank1
>1406	ParameterType	const std 
>1407	ReturnType	void
>1408	CompoundStatement	 
>1409	ExpressionStatement	 
>1410	AssignmentExpr	particleBankPath = \"\"
>1411	PrimaryExpression	\"\"
>1412	Identifier	particleBankPath
>1413	IfStatement	if ( ! bank2 . empty ( ) )
>1414	CompoundStatement	 
>1415	ExpressionStatement	 
>1416	CallExpression	forEachFile ( bank2 , \".txt\" , loadParticleCallback , 0 )
>1417	ArgumentList	bank2
>1418	Argument	0
>1419	PrimaryExpression	0
>1420	Argument	loadParticleCallback
>1421	Identifier	loadParticleCallback
>1422	Argument	\".txt\"
>1423	PrimaryExpression	\".txt\"
>1424	Argument	bank2
>1425	Identifier	bank2
>1426	Callee	forEachFile
>1427	Identifier	forEachFile
>1428	ExpressionStatement	 
>1429	AssignmentExpr	particleBankPath = bank2
>1430	Identifier	bank2
>1431	Identifier	particleBankPath
>1432	Condition	 
>1433	UnaryOp	! bank2 . empty ( )
>1434	CallExpression	bank2 . empty ( )
>1435	ArgumentList	 
>1436	Callee	bank2 . empty
>1437	MemberAccess	bank2 . empty
>1438	Identifier	empty
>1439	Identifier	bank2
>1440	UnaryOperator	!
>1441	ExpressionStatement	 
>1442	CallExpression	forEachFile ( bank1 , \".txt\" , loadParticleCallback , 0 )
>1443	ArgumentList	bank1
>1444	Argument	0
>1445	PrimaryExpression	0
>1446	Argument	loadParticleCallback
>1447	Identifier	loadParticleCallback
>1448	Argument	\".txt\"
>1449	PrimaryExpression	\".txt\"
>1450	Argument	bank1
>1451	Identifier	bank1
>1452	Callee	forEachFile
>1453	Identifier	forEachFile
>1454	ExpressionStatement	 
>1455	AssignmentExpr	particleBankPath = bank1
>1456	Identifier	bank1
>1457	Identifier	particleBankPath
>1458	ExpressionStatement	 
>1459	CallExpression	clearParticleBank ( )
>1460	ArgumentList	 
>1461	Callee	clearParticleBank
>1462	Identifier	clearParticleBank
>1471	FunctionDef	ParticleManager 
>1472	ParameterList	const std 
>1473	Parameter	 
>1474	Identifier	load
>1475	ParameterType	ParticleEffect *
>1476	Parameter	 
>1477	Identifier	name
>1478	ParameterType	const std 
>1479	ReturnType	void
>1480	CompoundStatement	 
>1481	IfStatement	if ( fx )
>1482	ElseStatement	else
>1483	CompoundStatement	 
>1484	ExpressionStatement	 
>1485	CallExpression	debugLog ( os . str ( ) )
>1486	ArgumentList	os . str ( )
>1487	Argument	os . str ( )
>1488	CallExpression	os . str ( )
>1489	ArgumentList	 
>1490	Callee	os . str
>1491	MemberAccess	os . str
>1492	Identifier	str
>1493	Identifier	os
>1494	Callee	debugLog
>1495	Identifier	debugLog
>1496	ExpressionStatement	 
>1497	ShiftExpression	os << \"Did not find PE [\" << name << \"] in particle bank\"
>1498	ShiftExpression	\"Did not find PE [\" << name << \"] in particle bank\"
>1499	ShiftExpression	name << \"] in particle bank\"
>1500	PrimaryExpression	\"] in particle bank\"
>1501	Identifier	name
>1502	PrimaryExpression	\"Did not find PE [\"
>1503	Identifier	os
>1504	IdentifierDeclStatement	 
>1505	IdentifierDecl	os
>1506	Identifier	os
>1507	IdentifierDeclType	std 
>1508	ExpressionStatement	 
>1509	CallExpression	fx -> transfer ( load )
>1510	ArgumentList	load
>1511	Argument	load
>1512	Identifier	load
>1513	Callee	fx -> transfer
>1514	PtrMemberAccess	fx -> transfer
>1515	Identifier	transfer
>1516	Identifier	fx
>1517	Condition	 
>1518	Identifier	fx
>1519	IdentifierDeclStatement	 
>1520	IdentifierDecl	* fx = particleBank [ realName ]
>1521	AssignmentExpr	* fx = particleBank [ realName ]
>1522	ArrayIndexing	particleBank [ realName ]
>1523	Identifier	realName
>1524	Identifier	particleBank
>1525	Identifier	fx
>1526	Identifier	fx
>1527	IdentifierDeclType	ParticleEffect *
>1528	ExpressionStatement	 
>1529	CallExpression	stringToLower ( realName )
>1530	ArgumentList	realName
>1531	Argument	realName
>1532	Identifier	realName
>1533	Callee	stringToLower
>1534	Identifier	stringToLower
>1535	IdentifierDeclStatement	 
>1536	IdentifierDecl	realName = name
>1537	AssignmentExpr	realName = name
>1538	Identifier	name
>1539	Identifier	name
>1540	Identifier	realName
>1541	IdentifierDeclType	std 
>1554	FunctionDef	ParticleManager 
>1555	ParameterList	 
>1556	ReturnType	void
>1557	CompoundStatement	 
>1558	ExpressionStatement	 
>1559	CallExpression	particleBank . clear ( )
>1560	ArgumentList	 
>1561	Callee	particleBank . clear
>1562	MemberAccess	particleBank . clear
>1563	Identifier	clear
>1564	Identifier	particleBank
>1565	ForStatement	for ( ParticleBank 
>1566	CompoundStatement	 
>1567	IfStatement	if ( e )
>1568	CompoundStatement	 
>1569	ExpressionStatement	 
>1570	Identifier	e
>1571	Statement	 
>1572	ExpressionStatement	 
>1573	CallExpression	e -> destroy ( )
>1574	ArgumentList	 
>1575	Callee	e -> destroy
>1576	PtrMemberAccess	e -> destroy
>1577	Identifier	destroy
>1578	Identifier	e
>1579	Condition	 
>1580	Identifier	e
>1581	IdentifierDeclStatement	 
>1582	IdentifierDecl	* e = ( * i ) . second
>1583	AssignmentExpr	* e = ( * i ) . second
>1584	MemberAccess	( * i ) . second
>1585	Identifier	second
>1586	UnaryOp	* i
>1587	Identifier	i
>1588	UnaryOperator	*
>1589	Identifier	e
>1590	Identifier	e
>1591	IdentifierDeclType	ParticleEffect *
>1592	IncDecOp	 
>1593	IncDec	++
>1594	Identifier	i
>1595	Condition	 
>1596	EqualityExpression	i != particleBank . end ( )
>1597	CallExpression	particleBank . end ( )
>1598	ArgumentList	 
>1599	Callee	particleBank . end
>1600	MemberAccess	particleBank . end
>1601	Identifier	end
>1602	Identifier	particleBank
>1603	Identifier	i
>1604	ForInit	 
>1605	IdentifierDeclStatement	ParticleBank 
>1606	IdentifierDecl	i = particleBank . begin ( )
>1607	AssignmentExpr	i = particleBank . begin ( )
>1608	CallExpression	particleBank . begin ( )
>1609	ArgumentList	 
>1610	Callee	particleBank . begin
>1611	MemberAccess	particleBank . begin
>1612	Identifier	begin
>1613	Identifier	particleBank
>1614	Identifier	i
>1615	Identifier	i
>1616	IdentifierDeclType	ParticleBank 
>1627	FunctionDef	ParticleManager 
>1628	ParameterList	 
>1629	ReturnType	int
>1630	CompoundStatement	 
>1631	ReturnStatement	 
>1632	Identifier	size
>1637	FunctionDef	ParticleManager 
>1638	ParameterList	float dt
>1639	Parameter	 
>1640	Identifier	dt
>1641	ParameterType	float
>1642	ReturnType	void
>1643	CompoundStatement	 
>1644	ForStatement	for ( int i = 0 ; i < particles . size ( ) ; i ++ )
>1645	CompoundStatement	 
>1646	IfStatement	if ( particles [ i ] . active )
>1647	CompoundStatement	 
>1648	ExpressionStatement	 
>1649	CallExpression	updateParticle ( & particles [ i ] , dt )
>1650	ArgumentList	& particles [ i ]
>1651	Argument	dt
>1652	Identifier	dt
>1653	Argument	& particles [ i ]
>1654	UnaryOp	& particles [ i ]
>1655	ArrayIndexing	particles [ i ]
>1656	Identifier	i
>1657	Identifier	particles
>1658	UnaryOperator	&
>1659	Callee	updateParticle
>1660	Identifier	updateParticle
>1661	Condition	 
>1662	MemberAccess	particles [ i ] . active
>1663	Identifier	active
>1664	ArrayIndexing	particles [ i ]
>1665	Identifier	i
>1666	Identifier	particles
>1667	IncDecOp	 
>1668	IncDec	++
>1669	Identifier	i
>1670	Condition	 
>1671	RelationalExpression	i < particles . size ( )
>1672	CallExpression	particles . size ( )
>1673	ArgumentList	 
>1674	Callee	particles . size
>1675	MemberAccess	particles . size
>1676	Identifier	size
>1677	Identifier	particles
>1678	Identifier	i
>1679	ForInit	 
>1680	IdentifierDeclStatement	int i = 0 ;
>1681	IdentifierDecl	i = 0
>1682	AssignmentExpr	i = 0
>1683	PrimaryExpression	0
>1684	Identifier	i
>1685	Identifier	i
>1686	IdentifierDeclType	int
>1687	ExpressionStatement	 
>1688	AssignmentExpr	numActive = 0
>1689	PrimaryExpression	0
>1690	Identifier	numActive
>1691	ExpressionStatement	 
>1692	CallExpression	BBGE_PROF ( ParticleManager_update )
>1693	ArgumentList	ParticleManager_update
>1694	Argument	ParticleManager_update
>1695	Identifier	ParticleManager_update
>1696	Callee	BBGE_PROF
>1697	Identifier	BBGE_PROF
>1712	FunctionDef	ParticleManager 
>1713	ParameterList	 
>1714	ReturnType	void
>1715	CompoundStatement	 
>1716	ExpressionStatement	 
>1717	CallExpression	influences . clear ( )
>1718	ArgumentList	 
>1719	Callee	influences . clear
>1720	MemberAccess	influences . clear
>1721	Identifier	clear
>1722	Identifier	influences
>1727	FunctionDef	ParticleManager 
>1728	ParameterList	ParticleInfluence inf
>1729	Parameter	 
>1730	Identifier	inf
>1731	ParameterType	ParticleInfluence
>1732	ReturnType	void
>1733	CompoundStatement	 
>1734	ExpressionStatement	 
>1735	CallExpression	influences . push_back ( inf )
>1736	ArgumentList	inf
>1737	Argument	inf
>1738	Identifier	inf
>1739	Callee	influences . push_back
>1740	MemberAccess	influences . push_back
>1741	Identifier	push_back
>1742	Identifier	influences
<11=16,12
<12=13
<13=15,14
<16=57,48,44,40,36,32,28,24,17
<17=18
<18=22,19
<19=20
<20=21
<22=23
<24=25
<25=27,26
<28=29
<29=31,30
<32=33
<33=35,34
<36=37
<37=39,38
<40=41
<41=43,42
<44=45
<45=47,46
<48=49
<49=53,50
<50=51
<51=52
<53=54
<54=56,55
<57=58
<58=60,59
<74=80,79,75
<75=76
<76=78,77
<80=117,110,101,95,87,81
<81=82
<82=86,83
<83=85,84
<87=88
<88=92,89
<89=91,90
<92=94,93
<95=96
<96=98,97
<98=100,99
<101=102
<102=106,103
<103=104
<104=105
<106=107
<107=109,108
<110=111
<111=113,112
<113=114
<114=116,115
<117=159,150,147,118
<118=136,119
<119=132,120
<120=121
<121=122
<122=126,123
<123=124
<124=125
<126=127
<127=129,128
<129=131,130
<132=133
<133=135,134
<136=137
<137=146,145,138
<138=144,139
<139=143,140
<140=142,141
<147=149,148
<150=151
<151=158,152
<152=154,153
<154=155
<155=157,156
<159=160
<160=161
<161=166,165,162
<162=164,163
<185=191,190,186
<186=187
<187=189,188
<191=192
<192=193
<193=197,194
<194=195
<195=196
<197=198
<198=200,199
<206=215,214,207
<207=211,208
<208=210,209
<211=213,212
<215=222,216
<216=217
<217=219,218
<219=221,220
<222=224,223
<224=225
<225=234,226
<226=233,227
<227=229,228
<229=230
<230=232,231
<234=236,235
<246=252,251,247
<247=248
<248=250,249
<252=259,253
<253=254
<254=258,255
<255=257,256
<259=262,260
<260=261
<262=263
<263=272,264
<264=271,265
<265=267,266
<267=268
<268=270,269
<272=274,273
<283=292,291,284
<284=288,285
<285=287,286
<288=290,289
<292=799,795,777,766,755,744,733,723,713,703,316,308,293
<293=302,294
<294=295
<295=296
<296=300,297
<297=298
<298=299
<300=301
<302=303
<303=305,304
<305=307,306
<308=309
<309=313,310
<310=312,311
<313=315,314
<316=699,317
<317=458,344,318
<318=327,319
<319=320
<320=322,321
<322=324,323
<324=326,325
<327=328
<328=337,329
<329=331,330
<331=332
<332=334,333
<334=336,335
<337=339,338
<339=341,340
<341=343,342
<344=446,345
<345=428,346
<346=426,347
<347=404,371,356,348
<348=349
<349=353,350
<350=352,351
<353=355,354
<356=357
<357=367,358
<358=359
<359=360
<360=362,361
<362=364,363
<364=366,365
<367=368
<368=370,369
<371=385,372
<372=373
<373=384,374
<374=376,375
<376=378,377
<378=379
<379=381,380
<381=383,382
<385=386
<386=395,387
<387=389,388
<389=390
<390=392,391
<392=394,393
<395=403,396
<396=398,397
<398=400,399
<400=402,401
<404=405
<405=425,424,406
<406=423,407
<407=420,408
<408=414,409
<409=410
<410=411
<411=413,412
<414=415
<415=417,416
<417=419,418
<420=422,421
<426=427
<428=429
<429=445,444,430
<430=443,431
<431=441,432
<432=433
<433=434
<434=436,435
<436=438,437
<438=440,439
<441=442
<446=447
<447=451,448
<448=450,449
<451=453,452
<453=455,454
<455=457,456
<458=691,459
<459=684,624,613,605,593,460
<460=584,581,461
<461=573,564,533,462
<462=510,463
<463=499,488,464
<464=482,474,465
<465=466
<466=467
<467=471,468
<468=470,469
<471=473,472
<474=475
<475=479,476
<476=478,477
<479=481,480
<482=483
<483=487,484
<484=486,485
<488=489
<489=495,490
<490=491
<491=492
<492=494,493
<495=496
<496=498,497
<499=500
<500=509,508,501
<501=507,502
<502=506,503
<503=505,504
<510=511
<511=525,512
<512=513
<513=514
<514=522,515
<515=517,516
<517=519,518
<519=521,520
<522=524,523
<525=526
<526=528,527
<528=530,529
<530=532,531
<533=547,534
<534=535
<535=546,536
<536=538,537
<538=540,539
<540=541
<541=543,542
<543=545,544
<547=548
<548=557,549
<549=551,550
<551=552
<552=554,553
<554=556,555
<557=559,558
<559=561,560
<561=563,562
<564=565
<565=572,571,566
<566=570,567
<567=569,568
<573=574
<574=580,575
<575=579,576
<576=578,577
<581=583,582
<584=585
<585=592,586
<586=588,587
<588=589
<589=591,590
<593=594
<594=604,603,595
<595=602,596
<596=598,597
<598=599
<599=601,600
<605=606
<606=610,607
<607=609,608
<610=612,611
<613=622,614
<614=615
<615=616
<616=620,617
<617=618
<618=619
<620=621
<622=623
<624=682,625
<625=626
<626=673,627
<627=666,628
<628=664,645,629
<629=630
<630=639,632,631
<632=633
<633=637,634
<634=635
<635=636
<637=638
<639=640
<640=642,641
<642=644,643
<645=656,646
<646=647
<647=653,648
<648=652,649
<649=651,650
<653=655,654
<656=657
<657=661,658
<658=660,659
<661=663,662
<664=665
<666=667
<667=672,671,668
<668=670,669
<673=674
<674=680,675
<675=676
<676=677
<677=679,678
<680=681
<682=683
<684=685
<685=690,689,686
<686=688,687
<691=692
<692=694,693
<694=696,695
<696=698,697
<699=700
<700=702,701
<703=704
<704=710,705
<705=707,706
<707=709,708
<710=712,711
<713=714
<714=720,715
<715=717,716
<717=719,718
<720=722,721
<723=724
<724=730,725
<725=727,726
<727=729,728
<730=732,731
<733=734
<734=738,735
<735=736
<736=737
<738=739
<739=741,740
<741=743,742
<744=745
<745=749,746
<746=747
<747=748
<749=750
<750=752,751
<752=754,753
<755=756
<756=760,757
<757=758
<758=759
<760=761
<761=763,762
<763=765,764
<766=767
<767=771,768
<768=769
<769=770
<771=772
<772=774,773
<774=776,775
<777=779,778
<779=780
<780=792,781
<781=785,782
<782=784,783
<785=787,786
<787=789,788
<789=791,790
<792=794,793
<795=796
<796=798,797
<799=801,800
<801=802
<802=806,803
<803=805,804
<867=873,872,868
<868=869
<869=871,870
<873=971,891,881,874
<874=875
<875=877,876
<877=878
<878=880,879
<881=883,882
<883=884
<884=888,885
<885=887,886
<888=890,889
<891=967,892
<892=904,893
<893=894
<894=898,895
<895=896
<896=897
<898=899
<899=901,900
<901=903,902
<904=952,905
<905=938,906
<906=936,907
<907=908
<908=932,909
<909=924,920,916,910
<910=911
<911=913,912
<913=915,914
<916=917
<917=919,918
<920=921
<921=923,922
<924=925
<925=927,926
<927=929,928
<929=931,930
<932=933
<933=935,934
<936=937
<938=939
<939=951,950,940
<940=949,941
<941=943,942
<943=944
<944=946,945
<946=948,947
<952=953
<953=966,954
<954=956,955
<956=957
<957=959,958
<959=961,960
<961=963,962
<963=965,964
<967=968
<968=970,969
<971=973,972
<973=974
<974=976,975
<997=1003,1002,998
<998=999
<999=1001,1000
<1003=1013,1004
<1004=1009,1005
<1005=1006
<1006=1008,1007
<1009=1010
<1010=1012,1011
<1013=1014
<1014=1016,1015
<1023=1029,1028,1024
<1024=1025
<1025=1027,1026
<1029=1039,1030
<1030=1035,1031
<1031=1032
<1032=1034,1033
<1035=1036
<1036=1038,1037
<1039=1040
<1040=1042,1041
<1049=1055,1054,1050
<1050=1051
<1051=1053,1052
<1055=1056
<1056=1064,1057
<1057=1058
<1058=1059
<1059=1061,1060
<1061=1063,1062
<1064=1065
<1065=1069,1066
<1066=1068,1067
<1081=1084,1083,1082
<1084=1161,1154,1147,1142,1104,1100,1093,1087,1085
<1085=1086
<1087=1088
<1088=1090,1089
<1090=1092,1091
<1093=1094
<1094=1098,1095
<1095=1096
<1096=1097
<1098=1099
<1100=1102,1101
<1102=1103
<1104=1109,1105
<1105=1106
<1106=1108,1107
<1109=1131,1123,1119,1114,1110
<1110=1111
<1111=1113,1112
<1114=1115
<1115=1117,1116
<1117=1118
<1119=1120
<1120=1122,1121
<1123=1124
<1124=1130,1125
<1125=1129,1126
<1126=1128,1127
<1131=1138,1132
<1132=1134,1133
<1134=1135
<1135=1137,1136
<1138=1139
<1139=1141,1140
<1142=1143
<1143=1145,1144
<1145=1146
<1147=1148
<1148=1153,1152,1149
<1149=1151,1150
<1154=1155
<1155=1160,1159,1156
<1156=1158,1157
<1161=1170,1162
<1162=1169,1168,1163
<1163=1167,1164
<1164=1166,1165
<1170=1175,1174,1171
<1171=1173,1172
<1193=1199,1198,1194
<1194=1195
<1195=1197,1196
<1199=1278,1271,1264,1256,1221,1202,1200
<1200=1201
<1202=1219,1203
<1203=1213,1204
<1204=1205
<1205=1209,1206
<1206=1207
<1207=1208
<1209=1210
<1210=1212,1211
<1213=1214
<1214=1216,1215
<1216=1218,1217
<1219=1220
<1221=1252,1244,1222
<1222=1223
<1223=1237,1231,1224
<1224=1225
<1225=1229,1226
<1226=1227
<1227=1228
<1229=1230
<1231=1232
<1232=1234,1233
<1234=1236,1235
<1237=1238
<1238=1242,1239
<1239=1240
<1240=1241
<1242=1243
<1244=1245
<1245=1246
<1246=1251,1247
<1247=1249,1248
<1249=1250
<1252=1253
<1253=1255,1254
<1256=1257
<1257=1263,1258
<1258=1262,1259
<1259=1261,1260
<1264=1265
<1265=1270,1269,1266
<1266=1268,1267
<1271=1274,1272
<1272=1273
<1274=1275
<1275=1277,1276
<1278=1279
<1279=1283,1280
<1280=1281
<1281=1282
<1283=1284
<1302=1311,1310,1303
<1303=1307,1304
<1304=1306,1305
<1307=1309,1308
<1311=1378,1374,1358,1336,1329,1318,1312
<1312=1313
<1313=1315,1314
<1315=1317,1316
<1318=1319
<1319=1325,1320
<1320=1323,1321
<1321=1322
<1323=1324
<1325=1326
<1326=1328,1327
<1329=1330
<1330=1334,1331
<1331=1332
<1332=1333
<1334=1335
<1336=1337
<1337=1357,1338
<1338=1353,1339
<1339=1351,1340
<1340=1341
<1341=1343,1342
<1343=1347,1344
<1344=1345
<1345=1346
<1347=1348
<1348=1350,1349
<1351=1352
<1353=1354
<1354=1356,1355
<1358=1359
<1359=1373,1372,1360
<1360=1371,1361
<1361=1363,1362
<1363=1367,1364
<1364=1365
<1365=1366
<1367=1368
<1368=1370,1369
<1374=1375
<1375=1377,1376
<1378=1379
<1379=1384,1383,1380
<1380=1382,1381
<1399=1408,1407,1400
<1400=1404,1401
<1401=1403,1402
<1404=1406,1405
<1408=1458,1454,1441,1413,1409
<1409=1410
<1410=1412,1411
<1413=1432,1414
<1414=1428,1415
<1415=1416
<1416=1426,1417
<1417=1424,1422,1420,1418
<1418=1419
<1420=1421
<1422=1423
<1424=1425
<1426=1427
<1428=1429
<1429=1431,1430
<1432=1433
<1433=1440,1434
<1434=1436,1435
<1436=1437
<1437=1439,1438
<1441=1442
<1442=1452,1443
<1443=1450,1448,1446,1444
<1444=1445
<1446=1447
<1448=1449
<1450=1451
<1452=1453
<1454=1455
<1455=1457,1456
<1458=1459
<1459=1461,1460
<1461=1462
<1471=1480,1479,1472
<1472=1476,1473
<1473=1475,1474
<1476=1478,1477
<1480=1535,1528,1519,1481
<1481=1517,1508,1482
<1482=1483
<1483=1504,1496,1484
<1484=1485
<1485=1494,1486
<1486=1487
<1487=1488
<1488=1490,1489
<1490=1491
<1491=1493,1492
<1494=1495
<1496=1497
<1497=1503,1498
<1498=1502,1499
<1499=1501,1500
<1504=1505
<1505=1507,1506
<1508=1509
<1509=1513,1510
<1510=1511
<1511=1512
<1513=1514
<1514=1516,1515
<1517=1518
<1519=1520
<1520=1527,1526,1521
<1521=1525,1522
<1522=1524,1523
<1528=1529
<1529=1533,1530
<1530=1531
<1531=1532
<1533=1534
<1535=1536
<1536=1541,1540,1537
<1537=1539,1538
<1554=1557,1556,1555
<1557=1565,1558
<1558=1559
<1559=1561,1560
<1561=1562
<1562=1564,1563
<1565=1604,1595,1592,1566
<1566=1581,1567
<1567=1579,1568
<1568=1572,1571,1569
<1569=1570
<1572=1573
<1573=1575,1574
<1575=1576
<1576=1578,1577
<1579=1580
<1581=1582
<1582=1591,1590,1583
<1583=1589,1584
<1584=1586,1585
<1586=1588,1587
<1592=1594,1593
<1595=1596
<1596=1603,1597
<1597=1599,1598
<1599=1600
<1600=1602,1601
<1604=1605
<1605=1606
<1606=1616,1615,1607
<1607=1614,1608
<1608=1610,1609
<1610=1611
<1611=1613,1612
<1627=1630,1629,1628
<1630=1631
<1631=1632
<1637=1643,1642,1638
<1638=1639
<1639=1641,1640
<1643=1691,1687,1644
<1644=1679,1670,1667,1645
<1645=1646
<1646=1661,1647
<1647=1648
<1648=1649
<1649=1659,1650
<1650=1653,1651
<1651=1652
<1653=1654
<1654=1658,1655
<1655=1657,1656
<1659=1660
<1661=1662
<1662=1664,1663
<1664=1666,1665
<1667=1669,1668
<1670=1671
<1671=1678,1672
<1672=1674,1673
<1674=1675
<1675=1677,1676
<1679=1680
<1680=1681
<1681=1686,1685,1682
<1682=1684,1683
<1687=1688
<1688=1690,1689
<1691=1692
<1692=1696,1693
<1693=1694
<1694=1695
<1696=1697
<1712=1715,1714,1713
<1715=1716
<1716=1717
<1717=1719,1718
<1719=1720
<1720=1722,1721
<1727=1733,1732,1728
<1728=1729
<1729=1731,1730
<1733=1734
<1734=1735
<1735=1739,1736
<1736=1737
<1737=1738
<1739=1740
<1740=1742,1741
