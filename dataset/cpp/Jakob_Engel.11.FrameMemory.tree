>3	FunctionDef	FrameMemory 
>4	ParameterList	 
>5	CompoundStatement	 
>9	FunctionDef	FrameMemory 
>10	ParameterList	 
>11	ReturnType	FrameMemory &
>12	CompoundStatement	 
>13	ReturnStatement	 
>14	Identifier	theOneAndOnly
>15	IdentifierDeclStatement	 
>16	IdentifierDecl	theOneAndOnly
>17	Identifier	theOneAndOnly
>18	IdentifierDeclType	FrameMemory
>19	Statement	 
>24	FunctionDef	FrameMemory 
>25	ParameterList	 
>26	ReturnType	void
>27	CompoundStatement	 
>28	IfStatement	if ( printMemoryDebugInfo )
>29	ExpressionStatement	 
>30	CallExpression	printf ( \"released %.1f MB!\n\" , total / ( 1000000.0f ) )
>31	ArgumentList	\"released %.1f MB!\n\"
>32	Argument	total / ( 1000000.0f )
>33	MultiplicativeExpression	total / ( 1000000.0f )
>34	PrimaryExpression	1000000.0f
>35	Identifier	total
>36	Argument	\"released %.1f MB!\n\"
>37	PrimaryExpression	\"released %.1f MB!\n\"
>38	Callee	printf
>39	Identifier	printf
>40	Condition	 
>41	Identifier	printMemoryDebugInfo
>42	ExpressionStatement	 
>43	CallExpression	availableBuffers . clear ( )
>44	ArgumentList	 
>45	Callee	availableBuffers . clear
>46	MemberAccess	availableBuffers . clear
>47	Identifier	clear
>48	Identifier	availableBuffers
>49	CompoundStatement	 
>50	ExpressionStatement	 
>51	CallExpression	p . second . clear ( )
>52	ArgumentList	 
>53	Callee	p . second . clear
>54	MemberAccess	p . second . clear
>55	Identifier	clear
>56	MemberAccess	p . second
>57	Identifier	second
>58	Identifier	p
>59	ForStatement	for ( unsigned int i = 0 ; i < p . second . size ( ) ; i ++ )
>60	CompoundStatement	 
>61	ExpressionStatement	 
>62	CallExpression	bufferSizes . erase ( p . second [ i ] )
>63	ArgumentList	p . second [ i ]
>64	Argument	p . second [ i ]
>65	ArrayIndexing	p . second [ i ]
>66	Identifier	i
>67	MemberAccess	p . second
>68	Identifier	second
>69	Identifier	p
>70	Callee	bufferSizes . erase
>71	MemberAccess	bufferSizes . erase
>72	Identifier	erase
>73	Identifier	bufferSizes
>74	ExpressionStatement	 
>75	CallExpression	Eigen 
>76	ArgumentList	p . second [ i ]
>77	Argument	p . second [ i ]
>78	ArrayIndexing	p . second [ i ]
>79	Identifier	i
>80	MemberAccess	p . second
>81	Identifier	second
>82	Identifier	p
>83	Callee	Eigen 
>84	Identifier	Eigen 
>85	IncDecOp	 
>86	IncDec	++
>87	Identifier	i
>88	Condition	 
>89	RelationalExpression	i < p . second . size ( )
>90	CallExpression	p . second . size ( )
>91	ArgumentList	 
>92	Callee	p . second . size
>93	MemberAccess	p . second . size
>94	Identifier	size
>95	MemberAccess	p . second
>96	Identifier	second
>97	Identifier	p
>98	Identifier	i
>99	ForInit	 
>100	IdentifierDeclStatement	unsigned int i = 0 ;
>101	IdentifierDecl	i = 0
>102	AssignmentExpr	i = 0
>103	PrimaryExpression	0
>104	Identifier	i
>105	Identifier	i
>106	IdentifierDeclType	unsigned int
>107	ExpressionStatement	 
>108	AssignmentExpr	total += p . second . size ( ) * p . first
>109	MultiplicativeExpression	p . second . size ( ) * p . first
>110	MemberAccess	p . first
>111	Identifier	first
>112	Identifier	p
>113	CallExpression	p . second . size ( )
>114	ArgumentList	 
>115	Callee	p . second . size
>116	MemberAccess	p . second . size
>117	Identifier	size
>118	MemberAccess	p . second
>119	Identifier	second
>120	Identifier	p
>121	Identifier	total
>122	IfStatement	if ( printMemoryDebugInfo )
>123	ExpressionStatement	 
>124	CallExpression	printf ( \"deleting %d buffers of size %d!\n\" , ( int ) p . second . size ( ) , ( int ) p . first )
>125	ArgumentList	\"deleting %d buffers of size %d!\n\"
>126	Argument	( int ) p . first
>127	CastExpression	( int ) p . first
>128	MemberAccess	p . first
>129	Identifier	first
>130	Identifier	p
>131	CastTarget	int
>132	Argument	( int ) p . second . size ( )
>133	CastExpression	( int ) p . second . size ( )
>134	CallExpression	p . second . size ( )
>135	ArgumentList	 
>136	Callee	p . second . size
>137	MemberAccess	p . second . size
>138	Identifier	size
>139	MemberAccess	p . second
>140	Identifier	second
>141	Identifier	p
>142	CastTarget	int
>143	Argument	\"deleting %d buffers of size %d!\n\"
>144	PrimaryExpression	\"deleting %d buffers of size %d!\n\"
>145	Callee	printf
>146	Identifier	printf
>147	Condition	 
>148	Identifier	printMemoryDebugInfo
>149	Statement	 
>150	Statement	 
>151	Label	 
>152	Identifier	p
>153	Statement	 
>154	Statement	 
>155	Statement	 
>156	IdentifierDeclStatement	 
>157	IdentifierDecl	total = 0
>158	AssignmentExpr	total = 0
>159	PrimaryExpression	0
>160	Identifier	total
>161	Identifier	total
>162	IdentifierDeclType	int
>163	IdentifierDeclStatement	 
>164	IdentifierDecl	lock ( accessMutex )
>165	Identifier	accessMutex
>166	Identifier	lock
>167	IdentifierDeclType	boost 
>184	FunctionDef	FrameMemory 
>185	ParameterList	unsigned int sizeInByte
>186	Parameter	 
>187	Identifier	sizeInByte
>188	ParameterType	unsigned int
>189	ReturnType	void *
>190	CompoundStatement	 
>191	IfStatement	if ( availableBuffers . count ( sizeInByte ) > 0 )
>192	ElseStatement	else
>193	CompoundStatement	 
>194	ReturnStatement	 
>195	Identifier	buffer
>196	IdentifierDeclStatement	 
>197	IdentifierDecl	* buffer = allocateBuffer ( sizeInByte )
>198	AssignmentExpr	* buffer = allocateBuffer ( sizeInByte )
>199	CallExpression	allocateBuffer ( sizeInByte )
>200	ArgumentList	sizeInByte
>201	Argument	sizeInByte
>202	Identifier	sizeInByte
>203	Callee	allocateBuffer
>204	Identifier	allocateBuffer
>205	Identifier	buffer
>206	Identifier	buffer
>207	IdentifierDeclType	void *
>208	CompoundStatement	 
>209	IfStatement	if ( availableOfSize . empty ( ) )
>210	ElseStatement	else
>211	CompoundStatement	 
>212	ReturnStatement	 
>213	Identifier	buffer
>214	ExpressionStatement	 
>215	CallExpression	availableOfSize . pop_back ( )
>216	ArgumentList	 
>217	Callee	availableOfSize . pop_back
>218	MemberAccess	availableOfSize . pop_back
>219	Identifier	pop_back
>220	Identifier	availableOfSize
>221	IdentifierDeclStatement	 
>222	IdentifierDecl	* buffer = availableOfSize . back ( )
>223	AssignmentExpr	* buffer = availableOfSize . back ( )
>224	CallExpression	availableOfSize . back ( )
>225	ArgumentList	 
>226	Callee	availableOfSize . back
>227	MemberAccess	availableOfSize . back
>228	Identifier	back
>229	Identifier	availableOfSize
>230	Identifier	buffer
>231	Identifier	buffer
>232	IdentifierDeclType	void *
>233	CompoundStatement	 
>234	ReturnStatement	 
>235	Identifier	buffer
>236	IdentifierDeclStatement	 
>237	IdentifierDecl	* buffer = allocateBuffer ( sizeInByte )
>238	AssignmentExpr	* buffer = allocateBuffer ( sizeInByte )
>239	CallExpression	allocateBuffer ( sizeInByte )
>240	ArgumentList	sizeInByte
>241	Argument	sizeInByte
>242	Identifier	sizeInByte
>243	Callee	allocateBuffer
>244	Identifier	allocateBuffer
>245	Identifier	buffer
>246	Identifier	buffer
>247	IdentifierDeclType	void *
>248	Condition	 
>249	CallExpression	availableOfSize . empty ( )
>250	ArgumentList	 
>251	Callee	availableOfSize . empty
>252	MemberAccess	availableOfSize . empty
>253	Identifier	empty
>254	Identifier	availableOfSize
>255	IdentifierDeclStatement	 
>256	IdentifierDecl	& availableOfSize = availableBuffers . at ( sizeInByte )
>257	AssignmentExpr	& availableOfSize = availableBuffers . at ( sizeInByte )
>258	CallExpression	availableBuffers . at ( sizeInByte )
>259	ArgumentList	sizeInByte
>260	Argument	sizeInByte
>261	Identifier	sizeInByte
>262	Callee	availableBuffers . at
>263	MemberAccess	availableBuffers . at
>264	Identifier	at
>265	Identifier	availableBuffers
>266	Identifier	availableOfSize
>267	Identifier	availableOfSize
>268	IdentifierDeclType	std 
>269	Condition	 
>270	RelationalExpression	availableBuffers . count ( sizeInByte ) > 0
>271	PrimaryExpression	0
>272	CallExpression	availableBuffers . count ( sizeInByte )
>273	ArgumentList	sizeInByte
>274	Argument	sizeInByte
>275	Identifier	sizeInByte
>276	Callee	availableBuffers . count
>277	MemberAccess	availableBuffers . count
>278	Identifier	count
>279	Identifier	availableBuffers
>280	IdentifierDeclStatement	 
>281	IdentifierDecl	lock ( accessMutex )
>282	Identifier	accessMutex
>283	Identifier	lock
>284	IdentifierDeclType	boost 
>298	FunctionDef	FrameMemory 
>299	ParameterList	unsigned int size
>300	Parameter	 
>301	Identifier	size
>302	ParameterType	unsigned int
>303	ReturnType	float *
>304	CompoundStatement	 
>305	ReturnStatement	 
>306	CastExpression	( float * ) getBuffer ( sizeof ( float ) * size )
>307	CallExpression	getBuffer ( sizeof ( float ) * size )
>308	ArgumentList	sizeof ( float ) * size
>309	Argument	sizeof ( float ) * size
>310	MultiplicativeExpression	sizeof ( float ) * size
>311	Identifier	size
>312	SizeofExpr	sizeof ( float )
>313	SizeofOperand	float
>314	Sizeof	sizeof
>315	Callee	getBuffer
>316	Identifier	getBuffer
>317	CastTarget	float *
>323	FunctionDef	FrameMemory 
>324	ParameterList	void * buffer
>325	Parameter	 
>326	Identifier	buffer
>327	ParameterType	void *
>328	ReturnType	void
>329	CompoundStatement	 
>330	IfStatement	if ( availableBuffers . count ( size ) > 0 )
>331	ElseStatement	else
>332	CompoundStatement	 
>333	ExpressionStatement	 
>334	CallExpression	availableBuffers . insert ( std 
>335	ArgumentList	std 
>336	Argument	std 
>337	CallExpression	std 
>338	ArgumentList	size
>339	Argument	availableOfSize
>340	Identifier	availableOfSize
>341	Argument	size
>342	Identifier	size
>343	Callee	std 
>344	Identifier	std 
>345	Callee	availableBuffers . insert
>346	MemberAccess	availableBuffers . insert
>347	Identifier	insert
>348	Identifier	availableBuffers
>349	ExpressionStatement	 
>350	CallExpression	availableOfSize . push_back ( buffer )
>351	ArgumentList	buffer
>352	Argument	buffer
>353	Identifier	buffer
>354	Callee	availableOfSize . push_back
>355	MemberAccess	availableOfSize . push_back
>356	Identifier	push_back
>357	Identifier	availableOfSize
>358	IdentifierDeclStatement	 
>359	IdentifierDecl	availableOfSize
>360	Identifier	availableOfSize
>361	IdentifierDeclType	std 
>362	ExpressionStatement	 
>363	CallExpression	availableBuffers . at ( size ) . push_back ( buffer )
>364	ArgumentList	buffer
>365	Argument	buffer
>366	Identifier	buffer
>367	Callee	availableBuffers . at ( size ) . push_back
>368	MemberAccess	availableBuffers . at ( size ) . push_back
>369	Identifier	push_back
>370	CallExpression	availableBuffers . at ( size )
>371	ArgumentList	size
>372	Argument	size
>373	Identifier	size
>374	Callee	availableBuffers . at
>375	MemberAccess	availableBuffers . at
>376	Identifier	at
>377	Identifier	availableBuffers
>378	Condition	 
>379	RelationalExpression	availableBuffers . count ( size ) > 0
>380	PrimaryExpression	0
>381	CallExpression	availableBuffers . count ( size )
>382	ArgumentList	size
>383	Argument	size
>384	Identifier	size
>385	Callee	availableBuffers . count
>386	MemberAccess	availableBuffers . count
>387	Identifier	count
>388	Identifier	availableBuffers
>389	IdentifierDeclStatement	 
>390	IdentifierDecl	size = bufferSizes . at ( buffer )
>391	AssignmentExpr	size = bufferSizes . at ( buffer )
>392	CallExpression	bufferSizes . at ( buffer )
>393	ArgumentList	buffer
>394	Argument	buffer
>395	Identifier	buffer
>396	Callee	bufferSizes . at
>397	MemberAccess	bufferSizes . at
>398	Identifier	at
>399	Identifier	bufferSizes
>400	Identifier	size
>401	Identifier	size
>402	IdentifierDeclType	unsigned int
>403	IdentifierDeclStatement	 
>404	IdentifierDecl	lock ( accessMutex )
>405	Identifier	accessMutex
>406	Identifier	lock
>407	IdentifierDeclType	boost 
>408	IfStatement	if ( buffer == 0 )
>409	ReturnStatement	 
>410	Condition	 
>411	EqualityExpression	buffer == 0
>412	PrimaryExpression	0
>413	Identifier	buffer
>427	FunctionDef	FrameMemory 
>428	ParameterList	unsigned int size
>429	Parameter	 
>430	Identifier	size
>431	ParameterType	unsigned int
>432	ReturnType	void *
>433	CompoundStatement	 
>434	ReturnStatement	 
>435	Identifier	buffer
>436	ExpressionStatement	 
>437	CallExpression	bufferSizes . insert ( std 
>438	ArgumentList	std 
>439	Argument	std 
>440	CallExpression	std 
>441	ArgumentList	buffer
>442	Argument	size
>443	Identifier	size
>444	Argument	buffer
>445	Identifier	buffer
>446	Callee	std 
>447	Identifier	std 
>448	Callee	bufferSizes . insert
>449	MemberAccess	bufferSizes . insert
>450	Identifier	insert
>451	Identifier	bufferSizes
>452	IdentifierDeclStatement	 
>453	IdentifierDecl	* buffer = Eigen 
>454	AssignmentExpr	* buffer = Eigen 
>455	CallExpression	Eigen 
>456	ArgumentList	size
>457	Argument	size
>458	Identifier	size
>459	Callee	Eigen 
>460	Identifier	Eigen 
>461	Identifier	buffer
>462	Identifier	buffer
>463	IdentifierDeclType	void *
>472	FunctionDef	FrameMemory 
>473	ParameterList	Frame * frame
>474	Parameter	 
>475	Identifier	frame
>476	ParameterType	Frame *
>477	ReturnType	boost 
>478	CompoundStatement	 
>479	ReturnStatement	 
>480	RelationalExpression	boost 
>481	RelationalExpression	boost 
>482	PtrMemberAccess	frame -> activeMutex
>483	Identifier	activeMutex
>484	Identifier	frame
>485	Identifier	boost 
>486	Identifier	boost 
>487	ExpressionStatement	 
>488	AssignmentExpr	frame -> isActive = true
>489	Identifier	true
>490	PtrMemberAccess	frame -> isActive
>491	Identifier	isActive
>492	Identifier	frame
>493	ExpressionStatement	 
>494	CallExpression	activeFrames . push_front ( frame )
>495	ArgumentList	frame
>496	Argument	frame
>497	Identifier	frame
>498	Callee	activeFrames . push_front
>499	MemberAccess	activeFrames . push_front
>500	Identifier	push_front
>501	Identifier	activeFrames
>502	IfStatement	if ( frame -> isActive )
>503	ExpressionStatement	 
>504	CallExpression	activeFrames . remove ( frame )
>505	ArgumentList	frame
>506	Argument	frame
>507	Identifier	frame
>508	Callee	activeFrames . remove
>509	MemberAccess	activeFrames . remove
>510	Identifier	remove
>511	Identifier	activeFrames
>512	Condition	 
>513	PtrMemberAccess	frame -> isActive
>514	Identifier	isActive
>515	Identifier	frame
>516	IdentifierDeclStatement	 
>517	IdentifierDecl	lock ( activeFramesMutex )
>518	Identifier	activeFramesMutex
>519	Identifier	lock
>520	IdentifierDeclType	boost 
>533	FunctionDef	FrameMemory 
>534	ParameterList	Frame * frame
>535	Parameter	 
>536	Identifier	frame
>537	ParameterType	Frame *
>538	ReturnType	void
>539	CompoundStatement	 
>540	ExpressionStatement	 
>541	AssignmentExpr	frame -> isActive = false
>542	Identifier	false
>543	PtrMemberAccess	frame -> isActive
>544	Identifier	isActive
>545	Identifier	frame
>546	WhileStatement	while ( ! frame -> minimizeInMemory ( ) )
>547	ExpressionStatement	 
>548	CallExpression	printf ( \"cannot deactivateFrame frame %d, as some acvite-lock is lingering. May cause deadlock!\n\" , frame -> id ( ) )
>549	ArgumentList	\"cannot deactivateFrame frame %d, as some acvite-lock is lingering. May cause deadlock!\n\"
>550	Argument	frame -> id ( )
>551	CallExpression	frame -> id ( )
>552	ArgumentList	 
>553	Callee	frame -> id
>554	PtrMemberAccess	frame -> id
>555	Identifier	id
>556	Identifier	frame
>557	Argument	\"cannot deactivateFrame frame %d, as some acvite-lock is lingering. May cause deadlock!\n\"
>558	PrimaryExpression	\"cannot deactivateFrame frame %d, as some acvite-lock is lingering. May cause deadlock!\n\"
>559	Callee	printf
>560	Identifier	printf
>561	Condition	 
>562	UnaryOp	! frame -> minimizeInMemory ( )
>563	CallExpression	frame -> minimizeInMemory ( )
>564	ArgumentList	 
>565	Callee	frame -> minimizeInMemory
>566	PtrMemberAccess	frame -> minimizeInMemory
>567	Identifier	minimizeInMemory
>568	Identifier	frame
>569	UnaryOperator	!
>570	ExpressionStatement	 
>571	CallExpression	activeFrames . remove ( frame )
>572	ArgumentList	frame
>573	Argument	frame
>574	Identifier	frame
>575	Callee	activeFrames . remove
>576	MemberAccess	activeFrames . remove
>577	Identifier	remove
>578	Identifier	activeFrames
>579	IfStatement	if ( ! frame -> isActive )
>580	ReturnStatement	 
>581	Condition	 
>582	UnaryOp	! frame -> isActive
>583	PtrMemberAccess	frame -> isActive
>584	Identifier	isActive
>585	Identifier	frame
>586	UnaryOperator	!
>587	IdentifierDeclStatement	 
>588	IdentifierDecl	lock ( activeFramesMutex )
>589	Identifier	activeFramesMutex
>590	Identifier	lock
>591	IdentifierDeclType	boost 
>603	FunctionDef	FrameMemory 
>604	ParameterList	 
>605	ReturnType	void
>606	CompoundStatement	 
>607	WhileStatement	while ( ( int ) activeFrames . size ( ) > maxLoopClosureCandidates + 20 )
>608	CompoundStatement	 
>609	ExpressionStatement	 
>610	CallExpression	activeFrames . pop_back ( )
>611	ArgumentList	 
>612	Callee	activeFrames . pop_back
>613	MemberAccess	activeFrames . pop_back
>614	Identifier	pop_back
>615	Identifier	activeFrames
>616	ExpressionStatement	 
>617	AssignmentExpr	activeFrames . back ( ) -> isActive = false
>618	Identifier	false
>619	PtrMemberAccess	activeFrames . back ( ) -> isActive
>620	Identifier	isActive
>621	CallExpression	activeFrames . back ( )
>622	ArgumentList	 
>623	Callee	activeFrames . back
>624	MemberAccess	activeFrames . back
>625	Identifier	back
>626	Identifier	activeFrames
>627	IfStatement	if ( ! activeFrames . back ( ) -> minimizeInMemory ( ) )
>628	CompoundStatement	 
>629	IfStatement	if ( ! activeFrames . back ( ) -> minimizeInMemory ( ) )
>630	CompoundStatement	 
>631	ReturnStatement	 
>632	ExpressionStatement	 
>633	CallExpression	printf ( \"failed to minimize frame %d twice. maybe some active-lock is lingering?\n\" , activeFrames . back ( ) -> \
>634	ArgumentList	\"failed to minimize frame %d twice. maybe some active-lock is lingering?\n\"
>635	Argument	activeFrames . back ( ) -> id ( )
>636	CallExpression	activeFrames . back ( ) -> id ( )
>637	ArgumentList	 
>638	Callee	activeFrames . back ( ) -> id
>639	PtrMemberAccess	activeFrames . back ( ) -> id
>640	Identifier	id
>641	CallExpression	activeFrames . back ( )
>642	ArgumentList	 
>643	Callee	activeFrames . back
>644	MemberAccess	activeFrames . back
>645	Identifier	back
>646	Identifier	activeFrames
>647	Argument	\"failed to minimize frame %d twice. maybe some active-lock is lingering?\n\"
>648	PrimaryExpression	\"failed to minimize frame %d twice. maybe some active-lock is lingering?\n\"
>649	Callee	printf
>650	Identifier	printf
>651	Condition	 
>652	UnaryOp	! activeFrames . back ( ) -> minimizeInMemory ( )
>653	CallExpression	activeFrames . back ( ) -> minimizeInMemory ( )
>654	ArgumentList	 
>655	Callee	activeFrames . back ( ) -> minimizeInMemory
>656	PtrMemberAccess	activeFrames . back ( ) -> minimizeInMemory
>657	Identifier	minimizeInMemory
>658	CallExpression	activeFrames . back ( )
>659	ArgumentList	 
>660	Callee	activeFrames . back
>661	MemberAccess	activeFrames . back
>662	Identifier	back
>663	Identifier	activeFrames
>664	UnaryOperator	!
>665	Condition	 
>666	UnaryOp	! activeFrames . back ( ) -> minimizeInMemory ( )
>667	CallExpression	activeFrames . back ( ) -> minimizeInMemory ( )
>668	ArgumentList	 
>669	Callee	activeFrames . back ( ) -> minimizeInMemory
>670	PtrMemberAccess	activeFrames . back ( ) -> minimizeInMemory
>671	Identifier	minimizeInMemory
>672	CallExpression	activeFrames . back ( )
>673	ArgumentList	 
>674	Callee	activeFrames . back
>675	MemberAccess	activeFrames . back
>676	Identifier	back
>677	Identifier	activeFrames
>678	UnaryOperator	!
>679	Condition	 
>680	RelationalExpression	( int ) activeFrames . size ( ) > maxLoopClosureCandidates + 20
>681	AdditiveExpression	maxLoopClosureCandidates + 20
>682	PrimaryExpression	20
>683	Identifier	maxLoopClosureCandidates
>684	CastExpression	( int ) activeFrames . size ( )
>685	CallExpression	activeFrames . size ( )
>686	ArgumentList	 
>687	Callee	activeFrames . size
>688	MemberAccess	activeFrames . size
>689	Identifier	size
>690	Identifier	activeFrames
>691	CastTarget	int
>692	IdentifierDeclStatement	 
>693	IdentifierDecl	lock ( activeFramesMutex )
>694	Identifier	activeFramesMutex
>695	Identifier	lock
>696	IdentifierDeclType	boost 
<3=5,4
<9=12,11,10
<12=19,15,13
<13=14
<15=16
<16=18,17
<24=27,26,25
<27=163,156,155,154,153,151,150,149,49,42,28
<28=40,29
<29=30
<30=38,31
<31=36,32
<32=33
<33=35,34
<36=37
<38=39
<40=41
<42=43
<43=45,44
<45=46
<46=48,47
<49=122,107,59,50
<50=51
<51=53,52
<53=54
<54=56,55
<56=58,57
<59=99,88,85,60
<60=74,61
<61=62
<62=70,63
<63=64
<64=65
<65=67,66
<67=69,68
<70=71
<71=73,72
<74=75
<75=83,76
<76=77
<77=78
<78=80,79
<80=82,81
<83=84
<85=87,86
<88=89
<89=98,90
<90=92,91
<92=93
<93=95,94
<95=97,96
<99=100
<100=101
<101=106,105,102
<102=104,103
<107=108
<108=121,109
<109=113,110
<110=112,111
<113=115,114
<115=116
<116=118,117
<118=120,119
<122=147,123
<123=124
<124=145,125
<125=143,132,126
<126=127
<127=131,128
<128=130,129
<132=133
<133=142,134
<134=136,135
<136=137
<137=139,138
<139=141,140
<143=144
<145=146
<147=148
<151=152
<156=157
<157=162,161,158
<158=160,159
<163=164
<164=167,166,165
<184=190,189,185
<185=186
<186=188,187
<190=280,191
<191=269,208,192
<192=193
<193=196,194
<194=195
<196=197
<197=207,206,198
<198=205,199
<199=203,200
<200=201
<201=202
<203=204
<208=255,209
<209=248,233,210
<210=211
<211=221,214,212
<212=213
<214=215
<215=217,216
<217=218
<218=220,219
<221=222
<222=232,231,223
<223=230,224
<224=226,225
<226=227
<227=229,228
<233=236,234
<234=235
<236=237
<237=247,246,238
<238=245,239
<239=243,240
<240=241
<241=242
<243=244
<248=249
<249=251,250
<251=252
<252=254,253
<255=256
<256=268,267,257
<257=266,258
<258=262,259
<259=260
<260=261
<262=263
<263=265,264
<269=270
<270=272,271
<272=276,273
<273=274
<274=275
<276=277
<277=279,278
<280=281
<281=284,283,282
<298=304,303,299
<299=300
<300=302,301
<304=305
<305=306
<306=317,307
<307=315,308
<308=309
<309=310
<310=312,311
<312=314,313
<315=316
<323=329,328,324
<324=325
<325=327,326
<329=408,403,389,330
<330=378,362,331
<331=332
<332=358,349,333
<333=334
<334=345,335
<335=336
<336=337
<337=343,338
<338=341,339
<339=340
<341=342
<343=344
<345=346
<346=348,347
<349=350
<350=354,351
<351=352
<352=353
<354=355
<355=357,356
<358=359
<359=361,360
<362=363
<363=367,364
<364=365
<365=366
<367=368
<368=370,369
<370=374,371
<371=372
<372=373
<374=375
<375=377,376
<378=379
<379=381,380
<381=385,382
<382=383
<383=384
<385=386
<386=388,387
<389=390
<390=402,401,391
<391=400,392
<392=396,393
<393=394
<394=395
<396=397
<397=399,398
<403=404
<404=407,406,405
<408=410,409
<410=411
<411=413,412
<427=433,432,428
<428=429
<429=431,430
<433=452,436,434
<434=435
<436=437
<437=448,438
<438=439
<439=440
<440=446,441
<441=444,442
<442=443
<444=445
<446=447
<448=449
<449=451,450
<452=453
<453=463,462,454
<454=461,455
<455=459,456
<456=457
<457=458
<459=460
<472=478,477,473
<473=474
<474=476,475
<478=516,502,493,487,479
<479=480
<480=486,481
<481=485,482
<482=484,483
<487=488
<488=490,489
<490=492,491
<493=494
<494=498,495
<495=496
<496=497
<498=499
<499=501,500
<502=512,503
<503=504
<504=508,505
<505=506
<506=507
<508=509
<509=511,510
<512=513
<513=515,514
<516=517
<517=520,519,518
<533=539,538,534
<534=535
<535=537,536
<539=587,579,570,546,540
<540=541
<541=543,542
<543=545,544
<546=561,547
<547=548
<548=559,549
<549=557,550
<550=551
<551=553,552
<553=554
<554=556,555
<557=558
<559=560
<561=562
<562=569,563
<563=565,564
<565=566
<566=568,567
<570=571
<571=575,572
<572=573
<573=574
<575=576
<576=578,577
<579=581,580
<581=582
<582=586,583
<583=585,584
<587=588
<588=591,590,589
<603=606,605,604
<606=692,607
<607=679,608
<608=627,616,609
<609=610
<610=612,611
<612=613
<613=615,614
<616=617
<617=619,618
<619=621,620
<621=623,622
<623=624
<624=626,625
<627=665,628
<628=629
<629=651,630
<630=632,631
<632=633
<633=649,634
<634=647,635
<635=636
<636=638,637
<638=639
<639=641,640
<641=643,642
<643=644
<644=646,645
<647=648
<649=650
<651=652
<652=664,653
<653=655,654
<655=656
<656=658,657
<658=660,659
<660=661
<661=663,662
<665=666
<666=678,667
<667=669,668
<669=670
<670=672,671
<672=674,673
<674=675
<675=677,676
<679=680
<680=684,681
<681=683,682
<684=691,685
<685=687,686
<687=688
<688=690,689
<692=693
<693=696,695,694
