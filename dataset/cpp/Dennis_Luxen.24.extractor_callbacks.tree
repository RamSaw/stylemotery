>3	FunctionDef	ExtractorCallbacks 
>4	ParameterList	ExtractionContainers & extraction_containers
>5	Parameter	 
>6	Identifier	extraction_containers
>7	ParameterType	ExtractionContainers &
>8	ReturnType	include < vector >
>9	CompoundStatement	 
>10	ExpressionStatement	 
>11	AssignmentExpr	string_map [ \"\" ] = 0
>12	PrimaryExpression	0
>13	ArrayIndexing	string_map [ \"\" ]
>14	PrimaryExpression	\"\"
>15	Identifier	string_map
>22	FunctionDef	ExtractorCallbacks 
>23	ParameterList	const osmium 
>24	Parameter	 
>25	Identifier	result_node
>26	ParameterType	const ExtractionNode &
>27	Parameter	 
>28	Identifier	input_node
>29	ParameterType	const osmium 
>30	ReturnType	void
>31	CompoundStatement	 
>32	ExpressionStatement	 
>33	Statement	 
>34	CompoundStatement	 
>35	Statement	 
>36	Statement	 
>37	Statement	 
>38	Statement	 
>39	Statement	 
>40	Statement	 
>41	Statement	 
>42	Statement	 
>43	Statement	 
>44	Statement	 
>45	Statement	 
>46	Statement	 
>47	Statement	 
>48	Statement	 
>49	Statement	 
>50	Statement	 
>51	Statement	 
>52	Statement	 
>53	Statement	 
>54	Statement	 
>55	Statement	 
>56	Statement	 
>57	Statement	 
>58	Statement	 
>59	Statement	 
>60	Statement	 
>61	Statement	 
>62	Statement	 
>63	Statement	 
>64	Statement	 
>65	Statement	 
>66	Statement	 
>67	Statement	 
>68	Statement	 
>69	Statement	 
>70	Statement	 
>71	Statement	 
>72	Statement	 
>73	Statement	 
>74	Statement	 
>75	Statement	 
>76	Statement	 
>77	Statement	 
>78	Statement	 
>79	Statement	 
>80	Statement	 
>81	Statement	 
>82	Statement	 
>83	Statement	 
>84	Statement	 
>85	Statement	 
>86	Statement	 
>87	Statement	 
>88	Statement	 
>89	Statement	 
>90	Statement	 
>91	Statement	 
>92	Statement	 
>93	Statement	 
>94	Statement	 
>95	Statement	 
>101	FunctionDef	ExtractorCallbacks 
>102	ParameterList	const mapbox 
>103	Parameter	 
>104	Identifier	restriction
>105	ParameterType	const mapbox 
>106	ReturnType	void
>107	CompoundStatement	 
>108	IfStatement	if ( restriction )
>109	CompoundStatement	 
>110	ExpressionStatement	 
>111	CallExpression	external_memory . restrictions_list . push_back ( restriction . get ( ) )
>112	ArgumentList	restriction . get ( )
>113	Argument	restriction . get ( )
>114	CallExpression	restriction . get ( )
>115	ArgumentList	 
>116	Callee	restriction . get
>117	MemberAccess	restriction . get
>118	Identifier	get
>119	Identifier	restriction
>120	Callee	external_memory . restrictions_list . push_back
>121	MemberAccess	external_memory . restrictions_list . push_back
>122	Identifier	push_back
>123	MemberAccess	external_memory . restrictions_list
>124	Identifier	restrictions_list
>125	Identifier	external_memory
>126	Condition	 
>127	Identifier	restriction
>135	FunctionDef	ExtractorCallbacks 
>136	ParameterList	const osmium 
>137	Parameter	 
>138	Identifier	parsed_way
>139	ParameterType	const ExtractionWay &
>140	Parameter	 
>141	Identifier	input_way
>142	ParameterType	const osmium 
>143	ReturnType	void
>144	CompoundStatement	 
>145	IfStatement	if ( is_opposite_way )
>146	ElseStatement	else
>147	CompoundStatement	 
>148	ExpressionStatement	 
>149	Statement	 
>150	CompoundStatement	 
>151	Statement	 
>152	Statement	 
>153	Statement	 
>154	Statement	 
>155	Statement	 
>156	Statement	 
>157	Statement	 
>158	Statement	 
>159	Statement	 
>160	Statement	 
>161	Statement	 
>162	Statement	 
>163	Statement	 
>164	Statement	 
>165	Statement	 
>166	Statement	 
>167	Statement	 
>168	Statement	 
>169	Statement	 
>170	Statement	 
>171	Statement	 
>172	Statement	 
>173	Statement	 
>174	Statement	 
>175	Statement	 
>176	Statement	 
>177	Statement	 
>178	Statement	 
>179	Statement	 
>180	Statement	 
>181	Statement	 
>182	Statement	 
>183	Statement	 
>184	Statement	 
>185	Statement	 
>186	Statement	 
>187	Statement	 
>188	Statement	 
>189	Statement	 
>190	Statement	 
>191	Statement	 
>192	Statement	 
>193	Statement	 
>194	Statement	 
>195	Statement	 
>196	Statement	 
>197	Statement	 
>198	Statement	 
>199	Statement	 
>200	Statement	 
>201	Statement	 
>202	Statement	 
>203	Statement	 
>204	Statement	 
>205	Statement	 
>206	Statement	 
>207	Statement	 
>208	Statement	 
>209	Statement	 
>210	Statement	 
>211	Statement	 
>212	Statement	 
>213	Statement	 
>214	Statement	 
>215	Statement	 
>216	Statement	 
>217	Statement	 
>218	Statement	 
>219	Statement	 
>220	Statement	 
>221	Statement	 
>222	Statement	 
>223	Statement	 
>224	Statement	 
>225	Statement	 
>226	Statement	 
>227	Statement	 
>228	Statement	 
>229	Statement	 
>230	Statement	 
>231	Statement	 
>232	Statement	 
>233	Statement	 
>234	Statement	 
>235	Statement	 
>236	Statement	 
>237	Statement	 
>238	Statement	 
>239	Statement	 
>240	Statement	 
>241	Statement	 
>242	Statement	 
>243	Statement	 
>244	Statement	 
>245	Statement	 
>246	Statement	 
>247	Statement	 
>248	Statement	 
>249	Statement	 
>250	Statement	 
>251	Statement	 
>252	Statement	 
>253	Statement	 
>254	Statement	 
>255	IfStatement	if ( split_edge )
>256	CompoundStatement	 
>257	ExpressionStatement	 
>258	Statement	 
>259	CompoundStatement	 
>260	ExpressionStatement	 
>261	CallExpression	external_memory . all_edges_list . push_back ( InternalExtractorEdge ( first_node . ref ( ) , last_node . ref ( ) , \
>262	ArgumentList	InternalExtractorEdge ( first_node . ref ( ) , last_node . ref ( ) , name_id , backward_weight_data , false , true , \
>263	Argument	InternalExtractorEdge ( first_node . ref ( ) , last_node . ref ( ) , name_id , backward_weight_data , false , true , \
>264	CallExpression	InternalExtractorEdge ( first_node . ref ( ) , last_node . ref ( ) , name_id , backward_weight_data , false , true , \
>265	ArgumentList	first_node . ref ( )
>266	Argument	true
>267	Identifier	true
>268	Argument	parsed_way . backward_travel_mode
>269	MemberAccess	parsed_way . backward_travel_mode
>270	Identifier	backward_travel_mode
>271	Identifier	parsed_way
>272	Argument	parsed_way . is_access_restricted
>273	MemberAccess	parsed_way . is_access_restricted
>274	Identifier	is_access_restricted
>275	Identifier	parsed_way
>276	Argument	parsed_way . ignore_in_grid
>277	MemberAccess	parsed_way . ignore_in_grid
>278	Identifier	ignore_in_grid
>279	Identifier	parsed_way
>280	Argument	parsed_way . roundabout
>281	MemberAccess	parsed_way . roundabout
>282	Identifier	roundabout
>283	Identifier	parsed_way
>284	Argument	true
>285	Identifier	true
>286	Argument	false
>287	Identifier	false
>288	Argument	backward_weight_data
>289	Identifier	backward_weight_data
>290	Argument	name_id
>291	Identifier	name_id
>292	Argument	last_node . ref ( )
>293	CallExpression	last_node . ref ( )
>294	ArgumentList	 
>295	Callee	last_node . ref
>296	MemberAccess	last_node . ref
>297	Identifier	ref
>298	Identifier	last_node
>299	Argument	first_node . ref ( )
>300	CallExpression	first_node . ref ( )
>301	ArgumentList	 
>302	Callee	first_node . ref
>303	MemberAccess	first_node . ref
>304	Identifier	ref
>305	Identifier	first_node
>306	Callee	InternalExtractorEdge
>307	Identifier	InternalExtractorEdge
>308	Callee	external_memory . all_edges_list . push_back
>309	MemberAccess	external_memory . all_edges_list . push_back
>310	Identifier	push_back
>311	MemberAccess	external_memory . all_edges_list
>312	Identifier	all_edges_list
>313	Identifier	external_memory
>314	Statement	 
>315	Statement	 
>316	Statement	 
>317	Statement	 
>318	Statement	 
>319	Statement	 
>320	Statement	 
>321	Statement	 
>322	Statement	 
>323	Statement	 
>324	Statement	 
>325	Statement	 
>326	Statement	 
>327	Statement	 
>328	Statement	 
>329	Statement	 
>330	Statement	 
>331	Statement	 
>332	Statement	 
>333	Statement	 
>334	Statement	 
>335	Statement	 
>336	Statement	 
>337	Statement	 
>338	Statement	 
>339	Statement	 
>340	Statement	 
>341	Statement	 
>342	Statement	 
>343	Statement	 
>344	Statement	 
>345	Statement	 
>346	Statement	 
>347	Statement	 
>348	Statement	 
>349	Statement	 
>350	Statement	 
>351	Statement	 
>352	Statement	 
>353	Statement	 
>354	Statement	 
>355	Statement	 
>356	ExpressionStatement	 
>357	CallExpression	BOOST_ASSERT ( parsed_way . backward_travel_mode != TRAVEL_MODE_INACCESSIBLE )
>358	ArgumentList	parsed_way . backward_travel_mode != TRAVEL_MODE_INACCESSIBLE
>359	Argument	parsed_way . backward_travel_mode != TRAVEL_MODE_INACCESSIBLE
>360	EqualityExpression	parsed_way . backward_travel_mode != TRAVEL_MODE_INACCESSIBLE
>361	Identifier	TRAVEL_MODE_INACCESSIBLE
>362	MemberAccess	parsed_way . backward_travel_mode
>363	Identifier	backward_travel_mode
>364	Identifier	parsed_way
>365	Callee	BOOST_ASSERT
>366	Identifier	BOOST_ASSERT
>367	Condition	 
>368	Identifier	split_edge
>369	ExpressionStatement	 
>370	Statement	 
>371	CompoundStatement	 
>372	ExpressionStatement	 
>373	CallExpression	external_memory . all_edges_list . push_back ( InternalExtractorEdge ( first_node . ref ( ) , last_node . ref ( ) , \
>374	ArgumentList	InternalExtractorEdge ( first_node . ref ( ) , last_node . ref ( ) , name_id , forward_weight_data , true , ! forward_\
>375	Argument	InternalExtractorEdge ( first_node . ref ( ) , last_node . ref ( ) , name_id , forward_weight_data , true , ! forward_\
>376	CallExpression	InternalExtractorEdge ( first_node . ref ( ) , last_node . ref ( ) , name_id , forward_weight_data , true , ! forward_\
>377	ArgumentList	first_node . ref ( )
>378	Argument	split_edge
>379	Identifier	split_edge
>380	Argument	parsed_way . forward_travel_mode
>381	MemberAccess	parsed_way . forward_travel_mode
>382	Identifier	forward_travel_mode
>383	Identifier	parsed_way
>384	Argument	parsed_way . is_access_restricted
>385	MemberAccess	parsed_way . is_access_restricted
>386	Identifier	is_access_restricted
>387	Identifier	parsed_way
>388	Argument	parsed_way . ignore_in_grid
>389	MemberAccess	parsed_way . ignore_in_grid
>390	Identifier	ignore_in_grid
>391	Identifier	parsed_way
>392	Argument	parsed_way . roundabout
>393	MemberAccess	parsed_way . roundabout
>394	Identifier	roundabout
>395	Identifier	parsed_way
>396	Argument	! forward_only
>397	UnaryOp	! forward_only
>398	Identifier	forward_only
>399	UnaryOperator	!
>400	Argument	true
>401	Identifier	true
>402	Argument	forward_weight_data
>403	Identifier	forward_weight_data
>404	Argument	name_id
>405	Identifier	name_id
>406	Argument	last_node . ref ( )
>407	CallExpression	last_node . ref ( )
>408	ArgumentList	 
>409	Callee	last_node . ref
>410	MemberAccess	last_node . ref
>411	Identifier	ref
>412	Identifier	last_node
>413	Argument	first_node . ref ( )
>414	CallExpression	first_node . ref ( )
>415	ArgumentList	 
>416	Callee	first_node . ref
>417	MemberAccess	first_node . ref
>418	Identifier	ref
>419	Identifier	first_node
>420	Callee	InternalExtractorEdge
>421	Identifier	InternalExtractorEdge
>422	Callee	external_memory . all_edges_list . push_back
>423	MemberAccess	external_memory . all_edges_list . push_back
>424	Identifier	push_back
>425	MemberAccess	external_memory . all_edges_list
>426	Identifier	all_edges_list
>427	Identifier	external_memory
>428	Statement	 
>429	Statement	 
>430	Statement	 
>431	Statement	 
>432	Statement	 
>433	Statement	 
>434	Statement	 
>435	Statement	 
>436	Statement	 
>437	Statement	 
>438	Statement	 
>439	Statement	 
>440	Statement	 
>441	Statement	 
>442	Statement	 
>443	Statement	 
>444	Statement	 
>445	Statement	 
>446	Statement	 
>447	Statement	 
>448	Statement	 
>449	Statement	 
>450	Statement	 
>451	Statement	 
>452	Statement	 
>453	Statement	 
>454	Statement	 
>455	Statement	 
>456	Statement	 
>457	Statement	 
>458	Statement	 
>459	Statement	 
>460	Statement	 
>461	Statement	 
>462	Statement	 
>463	Statement	 
>464	Statement	 
>465	Statement	 
>466	Statement	 
>467	Statement	 
>468	Statement	 
>469	Statement	 
>470	IdentifierDeclStatement	 
>471	IdentifierDecl	forward_only = split_edge || TRAVEL_MODE_INACCESSIBLE == parsed_way . backward_travel_mode
>472	AssignmentExpr	forward_only = split_edge || TRAVEL_MODE_INACCESSIBLE == parsed_way . backward_travel_mode
>473	OrExpression	split_edge || TRAVEL_MODE_INACCESSIBLE == parsed_way . backward_travel_mode
>474	EqualityExpression	TRAVEL_MODE_INACCESSIBLE == parsed_way . backward_travel_mode
>475	MemberAccess	parsed_way . backward_travel_mode
>476	Identifier	backward_travel_mode
>477	Identifier	parsed_way
>478	Identifier	TRAVEL_MODE_INACCESSIBLE
>479	Identifier	split_edge
>480	Identifier	forward_only
>481	Identifier	forward_only
>482	IdentifierDeclType	const bool
>483	CompoundStatement	 
>484	ExpressionStatement	 
>485	Statement	 
>486	CompoundStatement	 
>487	Statement	 
>488	Statement	 
>489	Statement	 
>490	Statement	 
>491	Statement	 
>492	Statement	 
>493	Statement	 
>494	Statement	 
>495	Statement	 
>496	Statement	 
>497	Statement	 
>498	Statement	 
>499	Statement	 
>500	Statement	 
>501	Statement	 
>502	Statement	 
>503	Statement	 
>504	Statement	 
>505	Statement	 
>506	Statement	 
>507	Statement	 
>508	Statement	 
>509	Statement	 
>510	Statement	 
>511	Statement	 
>512	Statement	 
>513	Statement	 
>514	Statement	 
>515	Statement	 
>516	Statement	 
>517	Statement	 
>518	Statement	 
>519	Statement	 
>520	Statement	 
>521	Statement	 
>522	Statement	 
>523	Statement	 
>524	Statement	 
>525	Statement	 
>526	Statement	 
>527	Statement	 
>528	Statement	 
>529	Statement	 
>530	Statement	 
>531	Statement	 
>532	Statement	 
>533	Statement	 
>534	Statement	 
>535	Statement	 
>536	Statement	 
>537	Statement	 
>538	Statement	 
>539	Statement	 
>540	Statement	 
>541	Statement	 
>542	Statement	 
>543	Statement	 
>544	Statement	 
>545	Statement	 
>546	Statement	 
>547	Statement	 
>548	Statement	 
>549	Statement	 
>550	Statement	 
>551	Statement	 
>552	Statement	 
>553	Statement	 
>554	Statement	 
>555	Statement	 
>556	Statement	 
>557	Statement	 
>558	Statement	 
>559	Statement	 
>560	Statement	 
>561	Statement	 
>562	Statement	 
>563	Statement	 
>564	Statement	 
>565	Statement	 
>566	Statement	 
>567	Statement	 
>568	Statement	 
>569	Statement	 
>570	Statement	 
>571	Statement	 
>572	Statement	 
>573	Statement	 
>574	Statement	 
>575	Statement	 
>576	Statement	 
>577	Statement	 
>578	Statement	 
>579	Statement	 
>580	Statement	 
>581	Statement	 
>582	Statement	 
>583	Statement	 
>584	Statement	 
>585	Statement	 
>586	Statement	 
>587	Statement	 
>588	Statement	 
>589	Statement	 
>590	Statement	 
>591	ExpressionStatement	 
>592	Statement	 
>593	CompoundStatement	 
>594	ExpressionStatement	 
>595	CallExpression	external_memory . all_edges_list . push_back ( InternalExtractorEdge ( first_node . ref ( ) , last_node . ref ( ) , \
>596	ArgumentList	InternalExtractorEdge ( first_node . ref ( ) , last_node . ref ( ) , name_id , backward_weight_data , true , false , \
>597	Argument	InternalExtractorEdge ( first_node . ref ( ) , last_node . ref ( ) , name_id , backward_weight_data , true , false , \
>598	CallExpression	InternalExtractorEdge ( first_node . ref ( ) , last_node . ref ( ) , name_id , backward_weight_data , true , false , \
>599	ArgumentList	first_node . ref ( )
>600	Argument	false
>601	Identifier	false
>602	Argument	parsed_way . backward_travel_mode
>603	MemberAccess	parsed_way . backward_travel_mode
>604	Identifier	backward_travel_mode
>605	Identifier	parsed_way
>606	Argument	parsed_way . is_access_restricted
>607	MemberAccess	parsed_way . is_access_restricted
>608	Identifier	is_access_restricted
>609	Identifier	parsed_way
>610	Argument	parsed_way . ignore_in_grid
>611	MemberAccess	parsed_way . ignore_in_grid
>612	Identifier	ignore_in_grid
>613	Identifier	parsed_way
>614	Argument	parsed_way . roundabout
>615	MemberAccess	parsed_way . roundabout
>616	Identifier	roundabout
>617	Identifier	parsed_way
>618	Argument	false
>619	Identifier	false
>620	Argument	true
>621	Identifier	true
>622	Argument	backward_weight_data
>623	Identifier	backward_weight_data
>624	Argument	name_id
>625	Identifier	name_id
>626	Argument	last_node . ref ( )
>627	CallExpression	last_node . ref ( )
>628	ArgumentList	 
>629	Callee	last_node . ref
>630	MemberAccess	last_node . ref
>631	Identifier	ref
>632	Identifier	last_node
>633	Argument	first_node . ref ( )
>634	CallExpression	first_node . ref ( )
>635	ArgumentList	 
>636	Callee	first_node . ref
>637	MemberAccess	first_node . ref
>638	Identifier	ref
>639	Identifier	first_node
>640	Callee	InternalExtractorEdge
>641	Identifier	InternalExtractorEdge
>642	Callee	external_memory . all_edges_list . push_back
>643	MemberAccess	external_memory . all_edges_list . push_back
>644	Identifier	push_back
>645	MemberAccess	external_memory . all_edges_list
>646	Identifier	all_edges_list
>647	Identifier	external_memory
>648	Statement	 
>649	Statement	 
>650	Statement	 
>651	Statement	 
>652	Statement	 
>653	Statement	 
>654	Statement	 
>655	Statement	 
>656	Statement	 
>657	Statement	 
>658	Statement	 
>659	Statement	 
>660	Statement	 
>661	Statement	 
>662	Statement	 
>663	Statement	 
>664	Statement	 
>665	Statement	 
>666	Statement	 
>667	Statement	 
>668	Statement	 
>669	Statement	 
>670	Statement	 
>671	Statement	 
>672	Statement	 
>673	Statement	 
>674	Statement	 
>675	Statement	 
>676	Statement	 
>677	Statement	 
>678	Statement	 
>679	Statement	 
>680	Statement	 
>681	Statement	 
>682	Statement	 
>683	Statement	 
>684	Statement	 
>685	Statement	 
>686	Statement	 
>687	Statement	 
>688	Statement	 
>689	Statement	 
>690	ExpressionStatement	 
>691	CallExpression	BOOST_ASSERT ( parsed_way . backward_travel_mode != TRAVEL_MODE_INACCESSIBLE )
>692	ArgumentList	parsed_way . backward_travel_mode != TRAVEL_MODE_INACCESSIBLE
>693	Argument	parsed_way . backward_travel_mode != TRAVEL_MODE_INACCESSIBLE
>694	EqualityExpression	parsed_way . backward_travel_mode != TRAVEL_MODE_INACCESSIBLE
>695	Identifier	TRAVEL_MODE_INACCESSIBLE
>696	MemberAccess	parsed_way . backward_travel_mode
>697	Identifier	backward_travel_mode
>698	Identifier	parsed_way
>699	Callee	BOOST_ASSERT
>700	Identifier	BOOST_ASSERT
>701	ExpressionStatement	 
>702	CallExpression	BOOST_ASSERT ( split_edge == false )
>703	ArgumentList	split_edge == false
>704	Argument	split_edge == false
>705	EqualityExpression	split_edge == false
>706	Identifier	false
>707	Identifier	split_edge
>708	Callee	BOOST_ASSERT
>709	Identifier	BOOST_ASSERT
>710	Condition	 
>711	Identifier	is_opposite_way
>712	IdentifierDeclStatement	 
>713	IdentifierDecl	is_opposite_way = TRAVEL_MODE_INACCESSIBLE == parsed_way . forward_travel_mode
>714	AssignmentExpr	is_opposite_way = TRAVEL_MODE_INACCESSIBLE == parsed_way . forward_travel_mode
>715	EqualityExpression	TRAVEL_MODE_INACCESSIBLE == parsed_way . forward_travel_mode
>716	MemberAccess	parsed_way . forward_travel_mode
>717	Identifier	forward_travel_mode
>718	Identifier	parsed_way
>719	Identifier	TRAVEL_MODE_INACCESSIBLE
>720	Identifier	is_opposite_way
>721	Identifier	is_opposite_way
>722	IdentifierDeclType	const bool
>723	ExpressionStatement	 
>724	Statement	 
>725	CompoundStatement	 
>726	ReturnStatement	 
>727	CallExpression	ref . ref ( )
>728	ArgumentList	 
>729	Callee	ref . ref
>730	MemberAccess	ref . ref
>731	Identifier	ref
>732	Identifier	ref
>733	Statement	 
>734	Statement	 
>735	Statement	 
>736	Statement	 
>737	Statement	 
>738	Statement	 
>739	Statement	 
>740	Statement	 
>741	Statement	 
>742	Statement	 
>743	Statement	 
>744	Statement	 
>745	Statement	 
>746	Statement	 
>747	Statement	 
>748	Statement	 
>749	Statement	 
>750	Statement	 
>751	Statement	 
>752	Statement	 
>753	Statement	 
>754	Statement	 
>755	Statement	 
>756	Statement	 
>757	Statement	 
>758	Statement	 
>759	Statement	 
>760	Statement	 
>761	Statement	 
>762	Statement	 
>763	Statement	 
>764	Statement	 
>765	Statement	 
>766	Statement	 
>767	Statement	 
>768	Statement	 
>769	Statement	 
>770	Statement	 
>771	Statement	 
>772	Statement	 
>773	Statement	 
>774	Statement	 
>775	Statement	 
>776	IdentifierDeclStatement	 
>777	IdentifierDecl	split_edge = ( parsed_way . forward_speed > 0 ) && ( TRAVEL_MODE_INACCESSIBLE != parsed_way . forward_travel_mode ) && ( \
>778	AssignmentExpr	split_edge = ( parsed_way . forward_speed > 0 ) && ( TRAVEL_MODE_INACCESSIBLE != parsed_way . forward_\
>779	AndExpression	( parsed_way . forward_speed > 0 ) && ( TRAVEL_MODE_INACCESSIBLE != parsed_way . forward_travel_mode ) && ( \
>780	AndExpression	( TRAVEL_MODE_INACCESSIBLE != parsed_way . forward_travel_mode ) && ( parsed_way . backward_speed > \
>781	AndExpression	( parsed_way . backward_speed > 0 ) && ( TRAVEL_MODE_INACCESSIBLE != parsed_way . backward_travel_mode ) && ( ( \
>782	AndExpression	( TRAVEL_MODE_INACCESSIBLE != parsed_way . backward_travel_mode ) && ( ( parsed_way . forward_speed != \
>783	OrExpression	( parsed_way . forward_speed != parsed_way . backward_speed ) || ( parsed_way . forward_travel_mode != \
>784	EqualityExpression	parsed_way . forward_travel_mode != parsed_way . backward_travel_mode
>785	MemberAccess	parsed_way . backward_travel_mode
>786	Identifier	backward_travel_mode
>787	Identifier	parsed_way
>788	MemberAccess	parsed_way . forward_travel_mode
>789	Identifier	forward_travel_mode
>790	Identifier	parsed_way
>791	EqualityExpression	parsed_way . forward_speed != parsed_way . backward_speed
>792	MemberAccess	parsed_way . backward_speed
>793	Identifier	backward_speed
>794	Identifier	parsed_way
>795	MemberAccess	parsed_way . forward_speed
>796	Identifier	forward_speed
>797	Identifier	parsed_way
>798	EqualityExpression	TRAVEL_MODE_INACCESSIBLE != parsed_way . backward_travel_mode
>799	MemberAccess	parsed_way . backward_travel_mode
>800	Identifier	backward_travel_mode
>801	Identifier	parsed_way
>802	Identifier	TRAVEL_MODE_INACCESSIBLE
>803	RelationalExpression	parsed_way . backward_speed > 0
>804	PrimaryExpression	0
>805	MemberAccess	parsed_way . backward_speed
>806	Identifier	backward_speed
>807	Identifier	parsed_way
>808	EqualityExpression	TRAVEL_MODE_INACCESSIBLE != parsed_way . forward_travel_mode
>809	MemberAccess	parsed_way . forward_travel_mode
>810	Identifier	forward_travel_mode
>811	Identifier	parsed_way
>812	Identifier	TRAVEL_MODE_INACCESSIBLE
>813	RelationalExpression	parsed_way . forward_speed > 0
>814	PrimaryExpression	0
>815	MemberAccess	parsed_way . forward_speed
>816	Identifier	forward_speed
>817	Identifier	parsed_way
>818	Identifier	split_edge
>819	Identifier	split_edge
>820	IdentifierDeclType	const bool
>821	IfStatement	if ( string_map . end ( ) == string_map_iterator )
>822	ElseStatement	else
>823	CompoundStatement	 
>824	ExpressionStatement	 
>825	AssignmentExpr	name_id = string_map_iterator -> second
>826	PtrMemberAccess	string_map_iterator -> second
>827	Identifier	second
>828	Identifier	string_map_iterator
>829	Identifier	name_id
>830	CompoundStatement	 
>831	ExpressionStatement	 
>832	CallExpression	string_map . insert ( std 
>833	ArgumentList	std 
>834	Argument	std 
>835	CallExpression	std 
>836	ArgumentList	parsed_way . name
>837	Argument	name_id
>838	Identifier	name_id
>839	Argument	parsed_way . name
>840	MemberAccess	parsed_way . name
>841	Identifier	name
>842	Identifier	parsed_way
>843	Callee	std 
>844	Identifier	std 
>845	Callee	string_map . insert
>846	MemberAccess	string_map . insert
>847	Identifier	insert
>848	Identifier	string_map
>849	ExpressionStatement	 
>850	CallExpression	external_memory . name_list . push_back ( parsed_way . name )
>851	ArgumentList	parsed_way . name
>852	Argument	parsed_way . name
>853	MemberAccess	parsed_way . name
>854	Identifier	name
>855	Identifier	parsed_way
>856	Callee	external_memory . name_list . push_back
>857	MemberAccess	external_memory . name_list . push_back
>858	Identifier	push_back
>859	MemberAccess	external_memory . name_list
>860	Identifier	name_list
>861	Identifier	external_memory
>862	Condition	 
>863	EqualityExpression	string_map . end ( ) == string_map_iterator
>864	Identifier	string_map_iterator
>865	CallExpression	string_map . end ( )
>866	ArgumentList	 
>867	Callee	string_map . end
>868	MemberAccess	string_map . end
>869	Identifier	end
>870	Identifier	string_map
>871	IdentifierDeclStatement	 
>872	IdentifierDecl	name_id = external_memory . name_list . size ( )
>873	AssignmentExpr	name_id = external_memory . name_list . size ( )
>874	CallExpression	external_memory . name_list . size ( )
>875	ArgumentList	 
>876	Callee	external_memory . name_list . size
>877	MemberAccess	external_memory . name_list . size
>878	Identifier	size
>879	MemberAccess	external_memory . name_list
>880	Identifier	name_list
>881	Identifier	external_memory
>882	Identifier	name_id
>883	Identifier	name_id
>884	IdentifierDeclType	unsigned
>885	ExpressionStatement	 
>886	AssignmentExpr	& string_map_iterator = string_map . find ( parsed_way . name )
>887	CallExpression	string_map . find ( parsed_way . name )
>888	ArgumentList	parsed_way . name
>889	Argument	parsed_way . name
>890	MemberAccess	parsed_way . name
>891	Identifier	name
>892	Identifier	parsed_way
>893	Callee	string_map . find
>894	MemberAccess	string_map . find
>895	Identifier	find
>896	Identifier	string_map
>897	UnaryOp	& string_map_iterator
>898	Identifier	string_map_iterator
>899	UnaryOperator	&
>900	Statement	 
>901	Statement	 
>902	IfStatement	if ( forward_weight_data . type == InternalExtractorEdge 
>903	CompoundStatement	 
>904	ReturnStatement	 
>905	ExpressionStatement	 
>906	ShiftExpression	SimpleLogger ( ) . Write ( logDEBUG ) << \"found way with bogus speed, id
>907	ShiftExpression	\"found way with bogus speed, id
>908	CallExpression	input_way . id ( )
>909	ArgumentList	 
>910	Callee	input_way . id
>911	MemberAccess	input_way . id
>912	Identifier	id
>913	Identifier	input_way
>914	PrimaryExpression	\"found way with bogus speed, id
>915	CallExpression	SimpleLogger ( ) . Write ( logDEBUG )
>916	ArgumentList	logDEBUG
>917	Argument	logDEBUG
>918	Identifier	logDEBUG
>919	Callee	SimpleLogger ( ) . Write
>920	MemberAccess	SimpleLogger ( ) . Write
>921	Identifier	Write
>922	CallExpression	SimpleLogger ( )
>923	ArgumentList	 
>924	Callee	SimpleLogger
>925	Identifier	SimpleLogger
>926	Condition	 
>927	AndExpression	forward_weight_data . type == InternalExtractorEdge 
>928	EqualityExpression	backward_weight_data . type == InternalExtractorEdge 
>929	Identifier	InternalExtractorEdge 
>930	MemberAccess	backward_weight_data . type
>931	Identifier	type
>932	Identifier	backward_weight_data
>933	EqualityExpression	forward_weight_data . type == InternalExtractorEdge 
>934	Identifier	InternalExtractorEdge 
>935	MemberAccess	forward_weight_data . type
>936	Identifier	type
>937	Identifier	forward_weight_data
>938	IfStatement	if ( 0 < parsed_way . duration )
>939	ElseStatement	else
>940	CompoundStatement	 
>941	IfStatement	if ( parsed_way . backward_speed > 0 && parsed_way . backward_travel_mode != TRAVEL_MODE_INACCESSIBLE )
>942	CompoundStatement	 
>943	ExpressionStatement	 
>944	AssignmentExpr	backward_weight_data . type = InternalExtractorEdge 
>945	Identifier	InternalExtractorEdge 
>946	MemberAccess	backward_weight_data . type
>947	Identifier	type
>948	Identifier	backward_weight_data
>949	ExpressionStatement	 
>950	AssignmentExpr	backward_weight_data . speed = parsed_way . backward_speed
>951	MemberAccess	parsed_way . backward_speed
>952	Identifier	backward_speed
>953	Identifier	parsed_way
>954	MemberAccess	backward_weight_data . speed
>955	Identifier	speed
>956	Identifier	backward_weight_data
>957	Condition	 
>958	AndExpression	parsed_way . backward_speed > 0 && parsed_way . backward_travel_mode != TRAVEL_MODE_INACCESSIBLE
>959	EqualityExpression	parsed_way . backward_travel_mode != TRAVEL_MODE_INACCESSIBLE
>960	Identifier	TRAVEL_MODE_INACCESSIBLE
>961	MemberAccess	parsed_way . backward_travel_mode
>962	Identifier	backward_travel_mode
>963	Identifier	parsed_way
>964	RelationalExpression	parsed_way . backward_speed > 0
>965	PrimaryExpression	0
>966	MemberAccess	parsed_way . backward_speed
>967	Identifier	backward_speed
>968	Identifier	parsed_way
>969	IfStatement	if ( parsed_way . forward_speed > 0 && parsed_way . forward_travel_mode != TRAVEL_MODE_INACCESSIBLE )
>970	CompoundStatement	 
>971	ExpressionStatement	 
>972	AssignmentExpr	forward_weight_data . type = InternalExtractorEdge 
>973	Identifier	InternalExtractorEdge 
>974	MemberAccess	forward_weight_data . type
>975	Identifier	type
>976	Identifier	forward_weight_data
>977	ExpressionStatement	 
>978	AssignmentExpr	forward_weight_data . speed = parsed_way . forward_speed
>979	MemberAccess	parsed_way . forward_speed
>980	Identifier	forward_speed
>981	Identifier	parsed_way
>982	MemberAccess	forward_weight_data . speed
>983	Identifier	speed
>984	Identifier	forward_weight_data
>985	Condition	 
>986	AndExpression	parsed_way . forward_speed > 0 && parsed_way . forward_travel_mode != TRAVEL_MODE_INACCESSIBLE
>987	EqualityExpression	parsed_way . forward_travel_mode != TRAVEL_MODE_INACCESSIBLE
>988	Identifier	TRAVEL_MODE_INACCESSIBLE
>989	MemberAccess	parsed_way . forward_travel_mode
>990	Identifier	forward_travel_mode
>991	Identifier	parsed_way
>992	RelationalExpression	parsed_way . forward_speed > 0
>993	PrimaryExpression	0
>994	MemberAccess	parsed_way . forward_speed
>995	Identifier	forward_speed
>996	Identifier	parsed_way
>997	CompoundStatement	 
>998	ExpressionStatement	 
>999	AssignmentExpr	backward_weight_data . type = InternalExtractorEdge 
>1000	Identifier	InternalExtractorEdge 
>1001	MemberAccess	backward_weight_data . type
>1002	Identifier	type
>1003	Identifier	backward_weight_data
>1004	ExpressionStatement	 
>1005	AssignmentExpr	backward_weight_data . duration = parsed_way . duration / num_edges
>1006	MultiplicativeExpression	parsed_way . duration / num_edges
>1007	Identifier	num_edges
>1008	MemberAccess	parsed_way . duration
>1009	Identifier	duration
>1010	Identifier	parsed_way
>1011	MemberAccess	backward_weight_data . duration
>1012	Identifier	duration
>1013	Identifier	backward_weight_data
>1014	ExpressionStatement	 
>1015	AssignmentExpr	forward_weight_data . type = InternalExtractorEdge 
>1016	Identifier	InternalExtractorEdge 
>1017	MemberAccess	forward_weight_data . type
>1018	Identifier	type
>1019	Identifier	forward_weight_data
>1020	ExpressionStatement	 
>1021	AssignmentExpr	forward_weight_data . duration = parsed_way . duration / num_edges
>1022	MultiplicativeExpression	parsed_way . duration / num_edges
>1023	Identifier	num_edges
>1024	MemberAccess	parsed_way . duration
>1025	Identifier	duration
>1026	Identifier	parsed_way
>1027	MemberAccess	forward_weight_data . duration
>1028	Identifier	duration
>1029	Identifier	forward_weight_data
>1030	IdentifierDeclStatement	 
>1031	IdentifierDecl	num_edges = ( input_way . nodes ( ) . size ( ) - 1 )
>1032	AssignmentExpr	num_edges = ( input_way . nodes ( ) . size ( ) - 1 )
>1033	AdditiveExpression	input_way . nodes ( ) . size ( ) - 1
>1034	PrimaryExpression	1
>1035	CallExpression	input_way . nodes ( ) . size ( )
>1036	ArgumentList	 
>1037	Callee	input_way . nodes ( ) . size
>1038	MemberAccess	input_way . nodes ( ) . size
>1039	Identifier	size
>1040	CallExpression	input_way . nodes ( )
>1041	ArgumentList	 
>1042	Callee	input_way . nodes
>1043	MemberAccess	input_way . nodes
>1044	Identifier	nodes
>1045	Identifier	input_way
>1046	Identifier	num_edges
>1047	Identifier	num_edges
>1048	IdentifierDeclType	unsigned
>1049	Statement	 
>1050	Condition	 
>1051	RelationalExpression	0 < parsed_way . duration
>1052	MemberAccess	parsed_way . duration
>1053	Identifier	duration
>1054	Identifier	parsed_way
>1055	PrimaryExpression	0
>1056	IdentifierDeclStatement	 
>1057	IdentifierDecl	backward_weight_data
>1058	Identifier	backward_weight_data
>1059	IdentifierDeclType	InternalExtractorEdge 
>1060	IdentifierDeclStatement	 
>1061	IdentifierDecl	forward_weight_data
>1062	Identifier	forward_weight_data
>1063	IdentifierDeclType	InternalExtractorEdge 
>1064	CompoundStatement	 
>1065	ReturnStatement	 
>1066	ExpressionStatement	 
>1067	ShiftExpression	SimpleLogger ( ) . Write ( logDEBUG ) << \"found bogus way with id
>1068	ShiftExpression	\"found bogus way with id
>1069	ShiftExpression	input_way . id ( ) << \" of size \" << input_way . nodes ( ) . size ( )
>1070	ShiftExpression	\" of size \" << input_way . nodes ( ) . size ( )
>1071	CallExpression	input_way . nodes ( ) . size ( )
>1072	ArgumentList	 
>1073	Callee	input_way . nodes ( ) . size
>1074	MemberAccess	input_way . nodes ( ) . size
>1075	Identifier	size
>1076	CallExpression	input_way . nodes ( )
>1077	ArgumentList	 
>1078	Callee	input_way . nodes
>1079	MemberAccess	input_way . nodes
>1080	Identifier	nodes
>1081	Identifier	input_way
>1082	PrimaryExpression	\" of size \"
>1083	CallExpression	input_way . id ( )
>1084	ArgumentList	 
>1085	Callee	input_way . id
>1086	MemberAccess	input_way . id
>1087	Identifier	id
>1088	Identifier	input_way
>1089	PrimaryExpression	\"found bogus way with id
>1090	CallExpression	SimpleLogger ( ) . Write ( logDEBUG )
>1091	ArgumentList	logDEBUG
>1092	Argument	logDEBUG
>1093	Identifier	logDEBUG
>1094	Callee	SimpleLogger ( ) . Write
>1095	MemberAccess	SimpleLogger ( ) . Write
>1096	Identifier	Write
>1097	CallExpression	SimpleLogger ( )
>1098	ArgumentList	 
>1099	Callee	SimpleLogger
>1100	Identifier	SimpleLogger
>1101	Statement	 
>1102	Statement	 
>1103	Statement	 
>1104	Statement	 
>1105	Statement	 
>1106	Statement	 
>1107	Statement	 
>1108	Statement	 
>1109	Statement	 
>1110	Statement	 
>1111	Statement	 
>1112	Statement	 
>1113	Statement	 
>1114	Statement	 
>1115	Statement	 
>1116	Statement	 
>1117	Statement	 
>1118	Statement	 
>1119	Statement	 
>1120	Statement	 
>1121	Statement	 
>1122	Statement	 
>1123	Statement	 
>1124	Statement	 
>1125	Statement	 
>1126	Statement	 
>1127	IfStatement	if ( input_way . nodes ( ) . size ( ) <= 1 )
>1128	CompoundStatement	 
>1129	ReturnStatement	 
>1130	Condition	 
>1131	RelationalExpression	input_way . nodes ( ) . size ( ) <= 1
>1132	PrimaryExpression	1
>1133	CallExpression	input_way . nodes ( ) . size ( )
>1134	ArgumentList	 
>1135	Callee	input_way . nodes ( ) . size
>1136	MemberAccess	input_way . nodes ( ) . size
>1137	Identifier	size
>1138	CallExpression	input_way . nodes ( )
>1139	ArgumentList	 
>1140	Callee	input_way . nodes
>1141	MemberAccess	input_way . nodes
>1142	Identifier	nodes
>1143	Identifier	input_way
>1144	IfStatement	if ( ( ( 0 >= parsed_way . forward_speed ) || ( TRAVEL_MODE_INACCESSIBLE == parsed_way . forward_travel_mode ) ) && ( ( \
>1145	CompoundStatement	 
>1146	ReturnStatement	 
>1147	Condition	 
>1148	AndExpression	( ( 0 >= parsed_way . forward_speed ) || ( TRAVEL_MODE_INACCESSIBLE == parsed_way . forward_travel_mode ) ) && ( ( \
>1149	AndExpression	( ( 0 >= parsed_way . backward_speed ) || ( TRAVEL_MODE_INACCESSIBLE == parsed_way . backward_travel_\
>1150	RelationalExpression	0 >= parsed_way . duration
>1151	MemberAccess	parsed_way . duration
>1152	Identifier	duration
>1153	Identifier	parsed_way
>1154	PrimaryExpression	0
>1155	OrExpression	( 0 >= parsed_way . backward_speed ) || ( TRAVEL_MODE_INACCESSIBLE == parsed_way . backward_travel_mode )
>1156	EqualityExpression	TRAVEL_MODE_INACCESSIBLE == parsed_way . backward_travel_mode
>1157	MemberAccess	parsed_way . backward_travel_mode
>1158	Identifier	backward_travel_mode
>1159	Identifier	parsed_way
>1160	Identifier	TRAVEL_MODE_INACCESSIBLE
>1161	RelationalExpression	0 >= parsed_way . backward_speed
>1162	MemberAccess	parsed_way . backward_speed
>1163	Identifier	backward_speed
>1164	Identifier	parsed_way
>1165	PrimaryExpression	0
>1166	OrExpression	( 0 >= parsed_way . forward_speed ) || ( TRAVEL_MODE_INACCESSIBLE == parsed_way . forward_travel_mode )
>1167	EqualityExpression	TRAVEL_MODE_INACCESSIBLE == parsed_way . forward_travel_mode
>1168	MemberAccess	parsed_way . forward_travel_mode
>1169	Identifier	forward_travel_mode
>1170	Identifier	parsed_way
>1171	Identifier	TRAVEL_MODE_INACCESSIBLE
>1172	RelationalExpression	0 >= parsed_way . forward_speed
>1173	MemberAccess	parsed_way . forward_speed
>1174	Identifier	forward_speed
>1175	Identifier	parsed_way
>1176	PrimaryExpression	0
<3=9,8,4
<4=5
<5=7,6
<9=10
<10=11
<11=13,12
<13=15,14
<22=31,30,23
<23=27,24
<24=26,25
<27=29,28
<31=95,94,93,92,91,90,34,33,32
<34=89,88,87,86,85,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84
<101=107,106,102
<102=103
<103=105,104
<107=108
<108=126,109
<109=110
<110=111
<111=120,112
<112=113
<113=114
<114=116,115
<116=117
<117=119,118
<120=121
<121=123,122
<123=125,124
<126=127
<135=144,143,136
<136=140,137
<137=139,138
<140=142,141
<144=1144,1127,1126,1125,1124,1123,1122,1121,1120,1119,1118,1117,1116,1115,1114,1113,1112,1111,1110,1109,1108,1107,1106,1105,1104,1103,1102,1101,1064,1060,1056,938,902,901,900,885,871,145,712,723,724,725,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,821
<145=710,483,146
<146=147
<147=470,469,468,467,466,465,148,149,150,249,250,251,252,253,254,255,369,370,371,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464
<150=248,247,246,245,244,243,242,241,240,239,238,237,236,235,234,233,232,231,230,229,228,227,226,225,224,223,222,221,220,219,218,217,216,215,214,213,212,211,210,209,208,207,206,205,204,203,202,201,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200
<255=367,256
<256=356,355,354,353,352,351,350,349,348,347,346,345,344,343,342,341,340,339,338,337,336,335,334,333,332,331,330,329,328,327,326,325,324,323,322,321,320,319,318,317,316,315,314,259,258,257
<259=260
<260=261
<261=308,262
<262=263
<263=264
<264=306,265
<265=299,292,290,288,286,284,280,276,272,268,266
<266=267
<268=269
<269=271,270
<272=273
<273=275,274
<276=277
<277=279,278
<280=281
<281=283,282
<284=285
<286=287
<288=289
<290=291
<292=293
<293=295,294
<295=296
<296=298,297
<299=300
<300=302,301
<302=303
<303=305,304
<306=307
<308=309
<309=311,310
<311=313,312
<356=357
<357=365,358
<358=359
<359=360
<360=362,361
<362=364,363
<365=366
<367=368
<371=372
<372=373
<373=422,374
<374=375
<375=376
<376=420,377
<377=413,406,404,402,400,396,392,388,384,380,378
<378=379
<380=381
<381=383,382
<384=385
<385=387,386
<388=389
<389=391,390
<392=393
<393=395,394
<396=397
<397=399,398
<400=401
<402=403
<404=405
<406=407
<407=409,408
<409=410
<410=412,411
<413=414
<414=416,415
<416=417
<417=419,418
<420=421
<422=423
<423=425,424
<425=427,426
<470=471
<471=482,481,472
<472=480,473
<473=479,474
<474=478,475
<475=477,476
<483=701,690,689,688,687,686,484,485,486,585,586,587,588,589,590,591,592,593,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685
<486=584,583,582,581,580,579,578,577,576,575,574,573,572,571,570,569,568,567,566,565,564,563,562,561,560,559,558,557,556,555,554,553,552,551,550,549,548,547,546,545,544,543,542,541,540,539,538,537,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536
<593=594
<594=595
<595=642,596
<596=597
<597=598
<598=640,599
<599=633,626,624,622,620,618,614,610,606,602,600
<600=601
<602=603
<603=605,604
<606=607
<607=609,608
<610=611
<611=613,612
<614=615
<615=617,616
<618=619
<620=621
<622=623
<624=625
<626=627
<627=629,628
<629=630
<630=632,631
<633=634
<634=636,635
<636=637
<637=639,638
<640=641
<642=643
<643=645,644
<645=647,646
<690=691
<691=699,692
<692=693
<693=694
<694=696,695
<696=698,697
<699=700
<701=702
<702=708,703
<703=704
<704=705
<705=707,706
<708=709
<710=711
<712=713
<713=722,721,714
<714=720,715
<715=719,716
<716=718,717
<725=726
<726=727
<727=729,728
<729=730
<730=732,731
<776=777
<777=820,819,778
<778=818,779
<779=813,780
<780=808,781
<781=803,782
<782=798,783
<783=791,784
<784=788,785
<785=787,786
<788=790,789
<791=795,792
<792=794,793
<795=797,796
<798=802,799
<799=801,800
<803=805,804
<805=807,806
<808=812,809
<809=811,810
<813=815,814
<815=817,816
<821=862,830,822
<822=823
<823=824
<824=825
<825=829,826
<826=828,827
<830=849,831
<831=832
<832=845,833
<833=834
<834=835
<835=843,836
<836=839,837
<837=838
<839=840
<840=842,841
<843=844
<845=846
<846=848,847
<849=850
<850=856,851
<851=852
<852=853
<853=855,854
<856=857
<857=859,858
<859=861,860
<862=863
<863=865,864
<865=867,866
<867=868
<868=870,869
<871=872
<872=884,883,873
<873=882,874
<874=876,875
<876=877
<877=879,878
<879=881,880
<885=886
<886=897,887
<887=893,888
<888=889
<889=890
<890=892,891
<893=894
<894=896,895
<897=899,898
<902=926,903
<903=905,904
<905=906
<906=915,907
<907=914,908
<908=910,909
<910=911
<911=913,912
<915=919,916
<916=917
<917=918
<919=920
<920=922,921
<922=924,923
<924=925
<926=927
<927=933,928
<928=930,929
<930=932,931
<933=935,934
<935=937,936
<938=1050,997,939
<939=940
<940=969,941
<941=957,942
<942=949,943
<943=944
<944=946,945
<946=948,947
<949=950
<950=954,951
<951=953,952
<954=956,955
<957=958
<958=964,959
<959=961,960
<961=963,962
<964=966,965
<966=968,967
<969=985,970
<970=977,971
<971=972
<972=974,973
<974=976,975
<977=978
<978=982,979
<979=981,980
<982=984,983
<985=986
<986=992,987
<987=989,988
<989=991,990
<992=994,993
<994=996,995
<997=1049,1030,1020,1014,1004,998
<998=999
<999=1001,1000
<1001=1003,1002
<1004=1005
<1005=1011,1006
<1006=1008,1007
<1008=1010,1009
<1011=1013,1012
<1014=1015
<1015=1017,1016
<1017=1019,1018
<1020=1021
<1021=1027,1022
<1022=1024,1023
<1024=1026,1025
<1027=1029,1028
<1030=1031
<1031=1048,1047,1032
<1032=1046,1033
<1033=1035,1034
<1035=1037,1036
<1037=1038
<1038=1040,1039
<1040=1042,1041
<1042=1043
<1043=1045,1044
<1050=1051
<1051=1055,1052
<1052=1054,1053
<1056=1057
<1057=1059,1058
<1060=1061
<1061=1063,1062
<1064=1066,1065
<1066=1067
<1067=1090,1068
<1068=1089,1069
<1069=1083,1070
<1070=1082,1071
<1071=1073,1072
<1073=1074
<1074=1076,1075
<1076=1078,1077
<1078=1079
<1079=1081,1080
<1083=1085,1084
<1085=1086
<1086=1088,1087
<1090=1094,1091
<1091=1092
<1092=1093
<1094=1095
<1095=1097,1096
<1097=1099,1098
<1099=1100
<1127=1130,1128
<1128=1129
<1130=1131
<1131=1133,1132
<1133=1135,1134
<1135=1136
<1136=1138,1137
<1138=1140,1139
<1140=1141
<1141=1143,1142
<1144=1147,1145
<1145=1146
<1147=1148
<1148=1166,1149
<1149=1155,1150
<1150=1154,1151
<1151=1153,1152
<1155=1161,1156
<1156=1160,1157
<1157=1159,1158
<1161=1165,1162
<1162=1164,1163
<1166=1172,1167
<1167=1171,1168
<1168=1170,1169
<1172=1176,1173
<1173=1175,1174
