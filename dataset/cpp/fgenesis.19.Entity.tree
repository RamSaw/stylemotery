>3	FunctionDef	Entity 
>4	ParameterList	 
>5	ReturnType	void
>6	CompoundStatement	 
>7	IfStatement	if ( dsq -> game -> avatar -> pullTarget == this )
>8	CompoundStatement	 
>9	ExpressionStatement	 
>10	AssignmentExpr	dsq -> game -> avatar -> pullTarget = 0
>11	PrimaryExpression	0
>12	PtrMemberAccess	dsq -> game -> avatar -> pullTarget
>13	Identifier	pullTarget
>14	PtrMemberAccess	dsq -> game -> avatar
>15	Identifier	avatar
>16	PtrMemberAccess	dsq -> game
>17	Identifier	game
>18	Identifier	dsq
>19	Condition	 
>20	EqualityExpression	dsq -> game -> avatar -> pullTarget == this
>21	Identifier	this
>22	PtrMemberAccess	dsq -> game -> avatar -> pullTarget
>23	Identifier	pullTarget
>24	PtrMemberAccess	dsq -> game -> avatar
>25	Identifier	avatar
>26	PtrMemberAccess	dsq -> game
>27	Identifier	game
>28	Identifier	dsq
>43	FunctionDef	Entity 
>44	ParameterList	const std 
>45	Parameter	 
>46	Identifier	name
>47	ParameterType	const std 
>48	ReturnType	void
>49	CompoundStatement	 
>50	ExpressionStatement	 
>51	AssignmentExpr	ingredientData = dsq -> continuity . getIngredientDataByName ( name )
>52	CallExpression	dsq -> continuity . getIngredientDataByName ( name )
>53	ArgumentList	name
>54	Argument	name
>55	Identifier	name
>56	Callee	dsq -> continuity . getIngredientDataByName
>57	MemberAccess	dsq -> continuity . getIngredientDataByName
>58	Identifier	getIngredientDataByName
>59	PtrMemberAccess	dsq -> continuity
>60	Identifier	continuity
>61	Identifier	dsq
>62	Identifier	ingredientData
>72	FunctionDef	Entity 
>73	ParameterList	Entity * e
>74	Parameter	 
>75	Identifier	e
>76	ParameterType	Entity *
>77	ReturnType	void
>78	CompoundStatement	 
>79	IfStatement	if ( boneLock . on )
>80	CompoundStatement	 
>81	IfStatement	if ( boneLock . entity == e )
>82	CompoundStatement	 
>83	ExpressionStatement	 
>84	CallExpression	setBoneLock ( BoneLock ( ) )
>85	ArgumentList	BoneLock ( )
>86	Argument	BoneLock ( )
>87	CallExpression	BoneLock ( )
>88	ArgumentList	 
>89	Callee	BoneLock
>90	Identifier	BoneLock
>91	Callee	setBoneLock
>92	Identifier	setBoneLock
>93	Condition	 
>94	EqualityExpression	boneLock . entity == e
>95	Identifier	e
>96	MemberAccess	boneLock . entity
>97	Identifier	entity
>98	Identifier	boneLock
>99	Condition	 
>100	MemberAccess	boneLock . on
>101	Identifier	on
>102	Identifier	boneLock
>103	ForStatement	for ( int i = 0 ; i < targets . size ( ) ; i ++ )
>104	CompoundStatement	 
>105	ExpressionStatement	 
>106	AssignmentExpr	targets [ i ] = 0
>107	PrimaryExpression	0
>108	ArrayIndexing	targets [ i ]
>109	Identifier	i
>110	Identifier	targets
>111	IncDecOp	 
>112	IncDec	++
>113	Identifier	i
>114	Condition	 
>115	RelationalExpression	i < targets . size ( )
>116	CallExpression	targets . size ( )
>117	ArgumentList	 
>118	Callee	targets . size
>119	MemberAccess	targets . size
>120	Identifier	size
>121	Identifier	targets
>122	Identifier	i
>123	ForInit	 
>124	IdentifierDeclStatement	int i = 0 ;
>125	IdentifierDecl	i = 0
>126	AssignmentExpr	i = 0
>127	PrimaryExpression	0
>128	Identifier	i
>129	Identifier	i
>130	IdentifierDeclType	int
>144	FunctionDef	Entity 
>145	ParameterList	BounceType bt
>146	Parameter	 
>147	Identifier	bt
>148	ParameterType	BounceType
>149	ReturnType	void
>150	CompoundStatement	 
>151	ExpressionStatement	 
>152	AssignmentExpr	bounceType = bt
>153	Identifier	bt
>154	Identifier	bounceType
>160	FunctionDef	Entity 
>161	ParameterList	 
>162	ReturnType	BounceType
>163	CompoundStatement	 
>164	ReturnStatement	 
>165	Identifier	bounceType
>170	FunctionDef	Entity 
>171	ParameterList	int ovrCollideRadius
>172	Parameter	 
>173	Identifier	ovrCollideRadius
>174	ParameterType	int
>175	ReturnType	void
>176	CompoundStatement	 
>177	IfStatement	if ( this -> skeletalSprite . isLoaded ( ) )
>178	CompoundStatement	 
>179	ForStatement	for ( int i = 0 ; i < skeletalSprite . bones . size ( ) ; i ++ )
>180	CompoundStatement	 
>181	IfStatement	if ( skeletalSprite . bones [ i ] -> generateCollisionMask )
>182	CompoundStatement	 
>183	ExpressionStatement	 
>184	CallExpression	dsq -> game -> generateCollisionMask ( skeletalSprite . bones [ i ] , ovrCollideRadius )
>185	ArgumentList	skeletalSprite . bones [ i ]
>186	Argument	ovrCollideRadius
>187	Identifier	ovrCollideRadius
>188	Argument	skeletalSprite . bones [ i ]
>189	ArrayIndexing	skeletalSprite . bones [ i ]
>190	Identifier	i
>191	MemberAccess	skeletalSprite . bones
>192	Identifier	bones
>193	Identifier	skeletalSprite
>194	Callee	dsq -> game -> generateCollisionMask
>195	PtrMemberAccess	dsq -> game -> generateCollisionMask
>196	Identifier	generateCollisionMask
>197	PtrMemberAccess	dsq -> game
>198	Identifier	game
>199	Identifier	dsq
>200	Condition	 
>201	PtrMemberAccess	skeletalSprite . bones [ i ] -> generateCollisionMask
>202	Identifier	generateCollisionMask
>203	ArrayIndexing	skeletalSprite . bones [ i ]
>204	Identifier	i
>205	MemberAccess	skeletalSprite . bones
>206	Identifier	bones
>207	Identifier	skeletalSprite
>208	IncDecOp	 
>209	IncDec	++
>210	Identifier	i
>211	Condition	 
>212	RelationalExpression	i < skeletalSprite . bones . size ( )
>213	CallExpression	skeletalSprite . bones . size ( )
>214	ArgumentList	 
>215	Callee	skeletalSprite . bones . size
>216	MemberAccess	skeletalSprite . bones . size
>217	Identifier	size
>218	MemberAccess	skeletalSprite . bones
>219	Identifier	bones
>220	Identifier	skeletalSprite
>221	Identifier	i
>222	ForInit	 
>223	IdentifierDeclStatement	int i = 0 ;
>224	IdentifierDecl	i = 0
>225	AssignmentExpr	i = 0
>226	PrimaryExpression	0
>227	Identifier	i
>228	Identifier	i
>229	IdentifierDeclType	int
>230	Condition	 
>231	CallExpression	this -> skeletalSprite . isLoaded ( )
>232	ArgumentList	 
>233	Callee	this -> skeletalSprite . isLoaded
>234	MemberAccess	this -> skeletalSprite . isLoaded
>235	Identifier	isLoaded
>236	PtrMemberAccess	this -> skeletalSprite
>237	Identifier	skeletalSprite
>238	Identifier	this
>261	FunctionDef	Entity 
>262	ParameterList	const BoneLock & boneLock
>263	Parameter	 
>264	Identifier	boneLock
>265	ParameterType	const BoneLock &
>266	ReturnType	bool
>267	CompoundStatement	 
>268	ReturnStatement	 
>269	Identifier	true
>270	ExpressionStatement	 
>271	CallExpression	onSetBoneLock ( )
>272	ArgumentList	 
>273	Callee	onSetBoneLock
>274	Identifier	onSetBoneLock
>275	ExpressionStatement	 
>276	CallExpression	setv ( EV_BONELOCKED , boneLock . on )
>277	ArgumentList	EV_BONELOCKED
>278	Argument	boneLock . on
>279	MemberAccess	boneLock . on
>280	Identifier	on
>281	Identifier	boneLock
>282	Argument	EV_BONELOCKED
>283	Identifier	EV_BONELOCKED
>284	Callee	setv
>285	Identifier	setv
>286	IfStatement	if ( this -> boneLock . on && ! boneLock . on )
>287	ElseStatement	else
>288	CompoundStatement	 
>289	IfStatement	if ( boneLock . entity && ! boneLock . bone )
>290	ElseStatement	else
>291	CompoundStatement	 
>292	ExpressionStatement	 
>293	AssignmentExpr	this -> boneLock . origRot = boneLock . bone -> getWorldRotation ( )
>294	CallExpression	boneLock . bone -> getWorldRotation ( )
>295	ArgumentList	 
>296	Callee	boneLock . bone -> getWorldRotation
>297	PtrMemberAccess	boneLock . bone -> getWorldRotation
>298	Identifier	getWorldRotation
>299	MemberAccess	boneLock . bone
>300	Identifier	bone
>301	Identifier	boneLock
>302	MemberAccess	this -> boneLock . origRot
>303	Identifier	origRot
>304	PtrMemberAccess	this -> boneLock
>305	Identifier	boneLock
>306	Identifier	this
>307	ExpressionStatement	 
>308	AssignmentExpr	this -> boneLock . localOffset = boneLock . bone -> getInvRotPosition ( this -> boneLock . localOffset )
>309	CallExpression	boneLock . bone -> getInvRotPosition ( this -> boneLock . localOffset )
>310	ArgumentList	this -> boneLock . localOffset
>311	Argument	this -> boneLock . localOffset
>312	MemberAccess	this -> boneLock . localOffset
>313	Identifier	localOffset
>314	PtrMemberAccess	this -> boneLock
>315	Identifier	boneLock
>316	Identifier	this
>317	Callee	boneLock . bone -> getInvRotPosition
>318	PtrMemberAccess	boneLock . bone -> getInvRotPosition
>319	Identifier	getInvRotPosition
>320	MemberAccess	boneLock . bone
>321	Identifier	bone
>322	Identifier	boneLock
>323	MemberAccess	this -> boneLock . localOffset
>324	Identifier	localOffset
>325	PtrMemberAccess	this -> boneLock
>326	Identifier	boneLock
>327	Identifier	this
>328	ExpressionStatement	 
>329	AssignmentExpr	this -> boneLock . localOffset = this -> position - ( boneLock . bone -> getWorldPosition ( ) )
>330	AdditiveExpression	this -> position - ( boneLock . bone -> getWorldPosition ( ) )
>331	CallExpression	boneLock . bone -> getWorldPosition ( )
>332	ArgumentList	 
>333	Callee	boneLock . bone -> getWorldPosition
>334	PtrMemberAccess	boneLock . bone -> getWorldPosition
>335	Identifier	getWorldPosition
>336	MemberAccess	boneLock . bone
>337	Identifier	bone
>338	Identifier	boneLock
>339	PtrMemberAccess	this -> position
>340	Identifier	position
>341	Identifier	this
>342	MemberAccess	this -> boneLock . localOffset
>343	Identifier	localOffset
>344	PtrMemberAccess	this -> boneLock
>345	Identifier	boneLock
>346	Identifier	this
>347	ExpressionStatement	 
>348	AssignmentExpr	this -> boneLock = boneLock
>349	Identifier	boneLock
>350	PtrMemberAccess	this -> boneLock
>351	Identifier	boneLock
>352	Identifier	this
>353	CompoundStatement	 
>354	ExpressionStatement	 
>355	AssignmentExpr	this -> boneLock . origRot = boneLock . entity -> rotation . z
>356	MemberAccess	boneLock . entity -> rotation . z
>357	Identifier	z
>358	PtrMemberAccess	boneLock . entity -> rotation
>359	Identifier	rotation
>360	MemberAccess	boneLock . entity
>361	Identifier	entity
>362	Identifier	boneLock
>363	MemberAccess	this -> boneLock . origRot
>364	Identifier	origRot
>365	PtrMemberAccess	this -> boneLock
>366	Identifier	boneLock
>367	Identifier	this
>368	ExpressionStatement	 
>369	CallExpression	this -> boneLock . circleOffset . setLength2D ( boneLock . entity -> collideRadius )
>370	ArgumentList	boneLock . entity -> collideRadius
>371	Argument	boneLock . entity -> collideRadius
>372	PtrMemberAccess	boneLock . entity -> collideRadius
>373	Identifier	collideRadius
>374	MemberAccess	boneLock . entity
>375	Identifier	entity
>376	Identifier	boneLock
>377	Callee	this -> boneLock . circleOffset . setLength2D
>378	MemberAccess	this -> boneLock . circleOffset . setLength2D
>379	Identifier	setLength2D
>380	MemberAccess	this -> boneLock . circleOffset
>381	Identifier	circleOffset
>382	PtrMemberAccess	this -> boneLock
>383	Identifier	boneLock
>384	Identifier	this
>385	ExpressionStatement	 
>386	AssignmentExpr	this -> boneLock . circleOffset = this -> position - ( boneLock . entity -> getWorldPosition ( ) )
>387	AdditiveExpression	this -> position - ( boneLock . entity -> getWorldPosition ( ) )
>388	CallExpression	boneLock . entity -> getWorldPosition ( )
>389	ArgumentList	 
>390	Callee	boneLock . entity -> getWorldPosition
>391	PtrMemberAccess	boneLock . entity -> getWorldPosition
>392	Identifier	getWorldPosition
>393	MemberAccess	boneLock . entity
>394	Identifier	entity
>395	Identifier	boneLock
>396	PtrMemberAccess	this -> position
>397	Identifier	position
>398	Identifier	this
>399	MemberAccess	this -> boneLock . circleOffset
>400	Identifier	circleOffset
>401	PtrMemberAccess	this -> boneLock
>402	Identifier	boneLock
>403	Identifier	this
>404	ExpressionStatement	 
>405	AssignmentExpr	this -> boneLock = boneLock
>406	Identifier	boneLock
>407	PtrMemberAccess	this -> boneLock
>408	Identifier	boneLock
>409	Identifier	this
>410	Condition	 
>411	AndExpression	boneLock . entity && ! boneLock . bone
>412	UnaryOp	! boneLock . bone
>413	MemberAccess	boneLock . bone
>414	Identifier	bone
>415	Identifier	boneLock
>416	UnaryOperator	!
>417	MemberAccess	boneLock . entity
>418	Identifier	entity
>419	Identifier	boneLock
>420	IfStatement	if ( ! boneLock . entity )
>421	ReturnStatement	 
>422	Identifier	false
>423	Condition	 
>424	UnaryOp	! boneLock . entity
>425	MemberAccess	boneLock . entity
>426	Identifier	entity
>427	Identifier	boneLock
>428	UnaryOperator	!
>429	CompoundStatement	 
>430	ExpressionStatement	 
>431	AssignmentExpr	this -> boneLock = boneLock
>432	Identifier	boneLock
>433	PtrMemberAccess	this -> boneLock
>434	Identifier	boneLock
>435	Identifier	this
>436	ExpressionStatement	 
>437	AssignmentExpr	boneLockDelay = 0.1
>438	PrimaryExpression	0.1
>439	Identifier	boneLockDelay
>440	Condition	 
>441	AndExpression	this -> boneLock . on && ! boneLock . on
>442	UnaryOp	! boneLock . on
>443	MemberAccess	boneLock . on
>444	Identifier	on
>445	Identifier	boneLock
>446	UnaryOperator	!
>447	MemberAccess	this -> boneLock . on
>448	Identifier	on
>449	PtrMemberAccess	this -> boneLock
>450	Identifier	boneLock
>451	Identifier	this
>452	IfStatement	if ( this -> boneLock . on && boneLock . on )
>453	ReturnStatement	 
>454	Identifier	false
>455	Condition	 
>456	AndExpression	this -> boneLock . on && boneLock . on
>457	MemberAccess	boneLock . on
>458	Identifier	on
>459	Identifier	boneLock
>460	MemberAccess	this -> boneLock . on
>461	Identifier	on
>462	PtrMemberAccess	this -> boneLock
>463	Identifier	boneLock
>464	Identifier	this
>465	IfStatement	if ( boneLock . on && boneLockDelay > 0 )
>466	ReturnStatement	 
>467	Identifier	false
>468	Condition	 
>469	AndExpression	boneLock . on && boneLockDelay > 0
>470	RelationalExpression	boneLockDelay > 0
>471	PrimaryExpression	0
>472	Identifier	boneLockDelay
>473	MemberAccess	boneLock . on
>474	Identifier	on
>475	Identifier	boneLock
>476	IfStatement	if ( ! canSetBoneLock ( ) )
>477	ReturnStatement	 
>478	Identifier	false
>479	Condition	 
>480	UnaryOp	! canSetBoneLock ( )
>481	CallExpression	canSetBoneLock ( )
>482	ArgumentList	 
>483	Callee	canSetBoneLock
>484	Identifier	canSetBoneLock
>485	UnaryOperator	!
>516	FunctionDef	Entity 
>517	ParameterList	 
>518	ReturnType	bool
>519	CompoundStatement	 
>520	ReturnStatement	 
>521	Identifier	true
>526	FunctionDef	Entity 
>527	ParameterList	 
>528	CompoundStatement	 
>529	ExpressionStatement	 
>530	AssignmentExpr	stopSoundsOnDeath = false
>531	Identifier	false
>532	Identifier	stopSoundsOnDeath
>533	ExpressionStatement	 
>534	CallExpression	setDamageTarget ( DT_AVATAR_SEED , false )
>535	ArgumentList	DT_AVATAR_SEED
>536	Argument	false
>537	Identifier	false
>538	Argument	DT_AVATAR_SEED
>539	Identifier	DT_AVATAR_SEED
>540	Callee	setDamageTarget
>541	Identifier	setDamageTarget
>542	ExpressionStatement	 
>543	CallExpression	setDamageTarget ( DT_AVATAR_BUBBLE , false )
>544	ArgumentList	DT_AVATAR_BUBBLE
>545	Argument	false
>546	Identifier	false
>547	Argument	DT_AVATAR_BUBBLE
>548	Identifier	DT_AVATAR_BUBBLE
>549	Callee	setDamageTarget
>550	Identifier	setDamageTarget
>551	ExpressionStatement	 
>552	CallExpression	setDamageTarget ( DT_AVATAR_LIZAP , true )
>553	ArgumentList	DT_AVATAR_LIZAP
>554	Argument	true
>555	Identifier	true
>556	Argument	DT_AVATAR_LIZAP
>557	Identifier	DT_AVATAR_LIZAP
>558	Callee	setDamageTarget
>559	Identifier	setDamageTarget
>560	ExpressionStatement	 
>561	CallExpression	setDamageTarget ( DT_AVATAR_NATURE , false )
>562	ArgumentList	DT_AVATAR_NATURE
>563	Argument	false
>564	Identifier	false
>565	Argument	DT_AVATAR_NATURE
>566	Identifier	DT_AVATAR_NATURE
>567	Callee	setDamageTarget
>568	Identifier	setDamageTarget
>569	ExpressionStatement	 
>570	CallExpression	addChild ( & skeletalSprite , PM_STATIC )
>571	ArgumentList	& skeletalSprite
>572	Argument	PM_STATIC
>573	Identifier	PM_STATIC
>574	Argument	& skeletalSprite
>575	UnaryOp	& skeletalSprite
>576	Identifier	skeletalSprite
>577	UnaryOperator	&
>578	Callee	addChild
>579	Identifier	addChild
>580	ExpressionStatement	 
>581	CallExpression	skeletalSprite . setAnimationKeyNotify ( this )
>582	ArgumentList	this
>583	Argument	this
>584	Identifier	this
>585	Callee	skeletalSprite . setAnimationKeyNotify
>586	MemberAccess	skeletalSprite . setAnimationKeyNotify
>587	Identifier	setAnimationKeyNotify
>588	Identifier	skeletalSprite
>589	ExpressionStatement	 
>590	AssignmentExpr	skeletalSprite . updateAfterParent = 1
>591	PrimaryExpression	1
>592	MemberAccess	skeletalSprite . updateAfterParent
>593	Identifier	updateAfterParent
>594	Identifier	skeletalSprite
>595	ExpressionStatement	 
>596	AssignmentExpr	bubble = 0
>597	PrimaryExpression	0
>598	Identifier	bubble
>599	ExpressionStatement	 
>600	AssignmentExpr	followEntity = 0
>601	PrimaryExpression	0
>602	Identifier	followEntity
>603	ExpressionStatement	 
>604	AssignmentExpr	activationRange = 600
>605	PrimaryExpression	600
>606	Identifier	activationRange
>607	ExpressionStatement	 
>608	AssignmentExpr	activationRadius = 40
>609	PrimaryExpression	40
>610	Identifier	activationRadius
>611	ExpressionStatement	 
>612	AssignmentExpr	invincibleBreak = false
>613	Identifier	false
>614	Identifier	invincibleBreak
>615	ExpressionStatement	 
>616	AssignmentExpr	health = maxHealth = 5
>617	AssignmentExpr	maxHealth = 5
>618	PrimaryExpression	5
>619	Identifier	maxHealth
>620	Identifier	health
>621	ExpressionStatement	 
>622	AssignmentExpr	entityDead = false
>623	Identifier	false
>624	Identifier	entityDead
>625	ExpressionStatement	 
>626	AssignmentExpr	maxSpeed = 300
>627	PrimaryExpression	300
>628	Identifier	maxSpeed
>629	ExpressionStatement	 
>630	CallExpression	dsq -> addEntity ( this )
>631	ArgumentList	this
>632	Argument	this
>633	Identifier	this
>634	Callee	dsq -> addEntity
>635	PtrMemberAccess	dsq -> addEntity
>636	Identifier	addEntity
>637	Identifier	dsq
>638	ExpressionStatement	 
>639	AssignmentExpr	pushDamage = 0
>640	PrimaryExpression	0
>641	Identifier	pushDamage
>642	ExpressionStatement	 
>643	AssignmentExpr	activationType = ACT_NONE
>644	Identifier	ACT_NONE
>645	Identifier	activationType
>646	ExpressionStatement	 
>647	AssignmentExpr	activationRange = 0
>648	PrimaryExpression	0
>649	Identifier	activationRange
>650	ExpressionStatement	 
>651	AssignmentExpr	canBeTargetedByAvatar = false
>652	Identifier	false
>653	Identifier	canBeTargetedByAvatar
>654	ExpressionStatement	 
>655	AssignmentExpr	frozenTimer = 0
>656	PrimaryExpression	0
>657	Identifier	frozenTimer
>658	ExpressionStatement	 
>659	AssignmentExpr	attachedTo = 0
>660	PrimaryExpression	0
>661	Identifier	attachedTo
>662	ExpressionStatement	 
>663	CallExpression	targets . resize ( 10 )
>664	ArgumentList	10
>665	Argument	10
>666	PrimaryExpression	10
>667	Callee	targets . resize
>668	MemberAccess	targets . resize
>669	Identifier	resize
>670	Identifier	targets
>671	ExpressionStatement	 
>672	AssignmentExpr	entityType = EntityType ( 0 )
>673	CallExpression	EntityType ( 0 )
>674	ArgumentList	0
>675	Argument	0
>676	PrimaryExpression	0
>677	Callee	EntityType
>678	Identifier	EntityType
>679	Identifier	entityType
>680	ExpressionStatement	 
>681	AssignmentExpr	collideRadius = 24
>682	PrimaryExpression	24
>683	Identifier	collideRadius
>684	ExpressionStatement	 
>685	AssignmentExpr	multColor = Vector ( 1 , 1 , 1 )
>686	CallExpression	Vector ( 1 , 1 , 1 )
>687	ArgumentList	1
>688	Argument	1
>689	PrimaryExpression	1
>690	Argument	1
>691	PrimaryExpression	1
>692	Argument	1
>693	PrimaryExpression	1
>694	Callee	Vector
>695	Identifier	Vector
>696	Identifier	multColor
>697	ExpressionStatement	 
>698	AssignmentExpr	deleteOnPathEnd = false
>699	Identifier	false
>700	Identifier	deleteOnPathEnd
>701	ExpressionStatement	 
>702	AssignmentExpr	currentEntityTarget = 0
>703	PrimaryExpression	0
>704	Identifier	currentEntityTarget
>705	ExpressionStatement	 
>706	AssignmentExpr	swimPath = false
>707	Identifier	false
>708	Identifier	swimPath
>709	ExpressionStatement	 
>710	AssignmentExpr	watchingEntity = 0
>711	PrimaryExpression	0
>712	Identifier	watchingEntity
>713	ExpressionStatement	 
>714	AssignmentExpr	followPos = 0
>715	PrimaryExpression	0
>716	Identifier	followPos
>717	ExpressionStatement	 
>718	AssignmentExpr	slowingToStopPath = 0
>719	PrimaryExpression	0
>720	Identifier	slowingToStopPath
>721	ExpressionStatement	 
>722	AssignmentExpr	slowingToStopPathTimer = 0
>723	PrimaryExpression	0
>724	Identifier	slowingToStopPathTimer
>725	ExpressionStatement	 
>726	AssignmentExpr	damageTime = vars -> entityDamageTime
>727	PtrMemberAccess	vars -> entityDamageTime
>728	Identifier	entityDamageTime
>729	Identifier	vars
>730	Identifier	damageTime
>731	ExpressionStatement	 
>732	AssignmentExpr	entityTypeIdx = - 1
>733	UnaryOp	- 1
>734	PrimaryExpression	1
>735	UnaryOperator	-
>736	Identifier	entityTypeIdx
>737	ForStatement	for ( int i = 0 ; i < entityProperties . size ( ) ; i ++ )
>738	CompoundStatement	 
>739	ExpressionStatement	 
>740	AssignmentExpr	entityProperties [ i ] = false
>741	Identifier	false
>742	ArrayIndexing	entityProperties [ i ]
>743	Identifier	i
>744	Identifier	entityProperties
>745	IncDecOp	 
>746	IncDec	++
>747	Identifier	i
>748	Condition	 
>749	RelationalExpression	i < entityProperties . size ( )
>750	CallExpression	entityProperties . size ( )
>751	ArgumentList	 
>752	Callee	entityProperties . size
>753	MemberAccess	entityProperties . size
>754	Identifier	size
>755	Identifier	entityProperties
>756	Identifier	i
>757	ForInit	 
>758	IdentifierDeclStatement	int i = 0 ;
>759	IdentifierDecl	i = 0
>760	AssignmentExpr	i = 0
>761	PrimaryExpression	0
>762	Identifier	i
>763	Identifier	i
>764	IdentifierDeclType	int
>765	ExpressionStatement	 
>766	CallExpression	entityProperties . resize ( EP_MAX )
>767	ArgumentList	EP_MAX
>768	Argument	EP_MAX
>769	Identifier	EP_MAX
>770	Callee	entityProperties . resize
>771	MemberAccess	entityProperties . resize
>772	Identifier	resize
>773	Identifier	entityProperties
>774	ExpressionStatement	 
>775	AssignmentExpr	inCurrent = false
>776	Identifier	false
>777	Identifier	inCurrent
>778	ExpressionStatement	 
>779	AssignmentExpr	dropChance = 0
>780	PrimaryExpression	0
>781	Identifier	dropChance
>782	ExpressionStatement	 
>783	AssignmentExpr	fillGridFromQuad = false
>784	Identifier	false
>785	Identifier	fillGridFromQuad
>786	ExpressionStatement	 
>787	AssignmentExpr	maxSpeedLerp = 1
>788	PrimaryExpression	1
>789	Identifier	maxSpeedLerp
>790	ExpressionStatement	 
>791	AssignmentExpr	hair = 0
>792	PrimaryExpression	0
>793	Identifier	hair
>794	ExpressionStatement	 
>795	AssignmentExpr	entityID = 0
>796	PrimaryExpression	0
>797	Identifier	entityID
>798	ExpressionStatement	 
>799	AssignmentExpr	deathSound = \"GenericDeath\"
>800	PrimaryExpression	\"GenericDeath\"
>801	Identifier	deathSound
>802	ExpressionStatement	 
>803	AssignmentExpr	targetRange = 32
>804	PrimaryExpression	32
>805	Identifier	targetRange
>806	ExpressionStatement	 
>807	AssignmentExpr	ridingOnEntity = 0
>808	PrimaryExpression	0
>809	Identifier	ridingOnEntity
>810	ExpressionStatement	 
>811	AssignmentExpr	targetPriority = 0
>812	PrimaryExpression	0
>813	Identifier	targetPriority
>814	ExpressionStatement	 
>815	AssignmentExpr	canLeaveWater = false
>816	Identifier	false
>817	Identifier	canLeaveWater
>818	ExpressionStatement	 
>819	AssignmentExpr	pauseFreeze = true
>820	Identifier	true
>821	Identifier	pauseFreeze
>822	ExpressionStatement	 
>823	AssignmentExpr	spiritFreeze = true
>824	Identifier	true
>825	Identifier	spiritFreeze
>826	ExpressionStatement	 
>827	AssignmentExpr	stickToNaijasHead = false
>828	Identifier	false
>829	Identifier	stickToNaijasHead
>830	ExpressionStatement	 
>831	AssignmentExpr	eatType = EAT_DEFAULT
>832	Identifier	EAT_DEFAULT
>833	Identifier	eatType
>834	ExpressionStatement	 
>835	AssignmentExpr	riding = 0
>836	PrimaryExpression	0
>837	Identifier	riding
>838	ExpressionStatement	 
>839	AssignmentExpr	bounceType = BOUNCE_SIMPLE
>840	Identifier	BOUNCE_SIMPLE
>841	Identifier	bounceType
>842	ExpressionStatement	 
>843	AssignmentExpr	dieTimer = 0
>844	PrimaryExpression	0
>845	Identifier	dieTimer
>846	ExpressionStatement	 
>847	AssignmentExpr	deathScene = false
>848	Identifier	false
>849	Identifier	deathScene
>850	ExpressionStatement	 
>851	AssignmentExpr	wasUnderWater = true
>852	Identifier	true
>853	Identifier	wasUnderWater
>854	ExpressionStatement	 
>855	AssignmentExpr	flipScale = Vector ( 1 , 1 )
>856	CallExpression	Vector ( 1 , 1 )
>857	ArgumentList	1
>858	Argument	1
>859	PrimaryExpression	1
>860	Argument	1
>861	PrimaryExpression	1
>862	Callee	Vector
>863	Identifier	Vector
>864	Identifier	flipScale
>865	ExpressionStatement	 
>866	AssignmentExpr	fhScale = fvScale = 0
>867	AssignmentExpr	fvScale = 0
>868	PrimaryExpression	0
>869	Identifier	fvScale
>870	Identifier	fhScale
>871	ExpressionStatement	 
>872	AssignmentExpr	beautyFlip = true
>873	Identifier	true
>874	Identifier	beautyFlip
>875	ExpressionStatement	 
>876	AssignmentExpr	lanceBone = 0
>877	PrimaryExpression	0
>878	Identifier	lanceBone
>879	ExpressionStatement	 
>880	AssignmentExpr	lanceGfx = 0
>881	PrimaryExpression	0
>882	Identifier	lanceGfx
>883	ExpressionStatement	 
>884	AssignmentExpr	lanceTimer = 0
>885	PrimaryExpression	0
>886	Identifier	lanceTimer
>887	ExpressionStatement	 
>888	AssignmentExpr	lance = 0
>889	PrimaryExpression	0
>890	Identifier	lance
>891	ExpressionStatement	 
>892	AssignmentExpr	lanceDelay = 0
>893	PrimaryExpression	0
>894	Identifier	lanceDelay
>895	ExpressionStatement	 
>896	AssignmentExpr	invincible = false
>897	Identifier	false
>898	Identifier	invincible
>899	ExpressionStatement	 
>900	CallExpression	setv ( EV_WEBSLOW , 100 )
>901	ArgumentList	EV_WEBSLOW
>902	Argument	100
>903	PrimaryExpression	100
>904	Argument	EV_WEBSLOW
>905	Identifier	EV_WEBSLOW
>906	Callee	setv
>907	Identifier	setv
>908	ExpressionStatement	 
>909	CallExpression	setv ( EV_BEASTBURST , 1 )
>910	ArgumentList	EV_BEASTBURST
>911	Argument	1
>912	PrimaryExpression	1
>913	Argument	EV_BEASTBURST
>914	Identifier	EV_BEASTBURST
>915	Callee	setv
>916	Identifier	setv
>917	ExpressionStatement	 
>918	CallExpression	setv ( EV_VINEPUSH , 1 )
>919	ArgumentList	EV_VINEPUSH
>920	Argument	1
>921	PrimaryExpression	1
>922	Argument	EV_VINEPUSH
>923	Identifier	EV_VINEPUSH
>924	Callee	setv
>925	Identifier	setv
>926	ExpressionStatement	 
>927	CallExpression	setv ( EV_NOINPUTNOVEL , 1 )
>928	ArgumentList	EV_NOINPUTNOVEL
>929	Argument	1
>930	PrimaryExpression	1
>931	Argument	EV_NOINPUTNOVEL
>932	Identifier	EV_NOINPUTNOVEL
>933	Callee	setv
>934	Identifier	setv
>935	ExpressionStatement	 
>936	CallExpression	setv ( EV_FLIPTOPATH , 1 )
>937	ArgumentList	EV_FLIPTOPATH
>938	Argument	1
>939	PrimaryExpression	1
>940	Argument	EV_FLIPTOPATH
>941	Identifier	EV_FLIPTOPATH
>942	Callee	setv
>943	Identifier	setv
>944	ExpressionStatement	 
>945	CallExpression	setvf ( EV_CLAMPTRANSF , 0.2 )
>946	ArgumentList	EV_CLAMPTRANSF
>947	Argument	0.2
>948	PrimaryExpression	0.2
>949	Argument	EV_CLAMPTRANSF
>950	Identifier	EV_CLAMPTRANSF
>951	Callee	setvf
>952	Identifier	setvf
>953	ExpressionStatement	 
>954	CallExpression	setv ( EV_SWITCHCLAMP , 1 )
>955	ArgumentList	EV_SWITCHCLAMP
>956	Argument	1
>957	PrimaryExpression	1
>958	Argument	EV_SWITCHCLAMP
>959	Identifier	EV_SWITCHCLAMP
>960	Callee	setv
>961	Identifier	setv
>962	ExpressionStatement	 
>963	CallExpression	setv ( EV_LOOKAT , 1 )
>964	ArgumentList	EV_LOOKAT
>965	Argument	1
>966	PrimaryExpression	1
>967	Argument	EV_LOOKAT
>968	Identifier	EV_LOOKAT
>969	Callee	setv
>970	Identifier	setv
>971	ExpressionStatement	 
>972	CallExpression	setv ( EV_COLLIDELEVEL , 1 )
>973	ArgumentList	EV_COLLIDELEVEL
>974	Argument	1
>975	PrimaryExpression	1
>976	Argument	EV_COLLIDELEVEL
>977	Identifier	EV_COLLIDELEVEL
>978	Callee	setv
>979	Identifier	setv
>980	ForStatement	for ( int i = 0 ; i < EV_MAX ; i ++ )
>981	CompoundStatement	 
>982	ExpressionStatement	 
>983	AssignmentExpr	vs [ i ] = 0
>984	PrimaryExpression	0
>985	ArrayIndexing	vs [ i ]
>986	Identifier	i
>987	Identifier	vs
>988	IncDecOp	 
>989	IncDec	++
>990	Identifier	i
>991	Condition	 
>992	RelationalExpression	i < EV_MAX
>993	Identifier	EV_MAX
>994	Identifier	i
>995	ForInit	 
>996	IdentifierDeclStatement	int i = 0 ;
>997	IdentifierDecl	i = 0
>998	AssignmentExpr	i = 0
>999	PrimaryExpression	0
>1000	Identifier	i
>1001	Identifier	i
>1002	IdentifierDeclType	int
>1003	ExpressionStatement	 
>1004	AssignmentExpr	ingredientData = 0
>1005	PrimaryExpression	0
>1006	Identifier	ingredientData
>1007	ExpressionStatement	 
>1008	AssignmentExpr	boneLockDelay = 0
>1009	PrimaryExpression	0
>1010	Identifier	boneLockDelay
>1011	ExpressionStatement	 
>1012	AssignmentExpr	ridingRotation = 0
>1013	PrimaryExpression	0
>1014	Identifier	ridingRotation
>1015	ExpressionStatement	 
>1016	AssignmentExpr	ridingFlip = false
>1017	Identifier	false
>1018	Identifier	ridingFlip
>1019	ExpressionStatement	 
>1020	AssignmentExpr	waterBubble = 0
>1021	PrimaryExpression	0
>1022	Identifier	waterBubble
>1023	ExpressionStatement	 
>1024	AssignmentExpr	wasUnderWater = true
>1025	Identifier	true
>1026	Identifier	wasUnderWater
>1027	ExpressionStatement	 
>1028	AssignmentExpr	calledEntityDied = false
>1029	Identifier	false
>1030	Identifier	calledEntityDied
>1031	ExpressionStatement	 
>1032	AssignmentExpr	poison = 0.0f
>1033	PrimaryExpression	0.0f
>1034	Identifier	poison
>1035	ExpressionStatement	 
>1036	CallExpression	addType ( SCO_ENTITY )
>1037	ArgumentList	SCO_ENTITY
>1038	Argument	SCO_ENTITY
>1039	Identifier	SCO_ENTITY
>1040	Callee	addType
>1041	Identifier	addType
>1149	FunctionDef	Entity 
>1150	ParameterList	bool v
>1151	Parameter	 
>1152	Identifier	v
>1153	ParameterType	bool
>1154	ReturnType	void
>1155	CompoundStatement	 
>1156	ExpressionStatement	 
>1157	AssignmentExpr	deathScene = v
>1158	Identifier	v
>1159	Identifier	deathScene
>1165	FunctionDef	Entity 
>1166	ParameterList	bool v
>1167	Parameter	 
>1168	Identifier	v
>1169	ParameterType	bool
>1170	ReturnType	void
>1171	CompoundStatement	 
>1172	ExpressionStatement	 
>1173	AssignmentExpr	canLeaveWater = v
>1174	Identifier	v
>1175	Identifier	canLeaveWater
>1181	FunctionDef	Entity 
>1182	ParameterList	const Vector & o
>1183	Parameter	 
>1184	Identifier	o
>1185	ParameterType	const Vector &
>1186	ReturnType	bool
>1187	CompoundStatement	 
>1188	ReturnStatement	 
>1189	Identifier	changed
>1190	IfStatement	if ( changed )
>1191	CompoundStatement	 
>1192	ExpressionStatement	 
>1193	CallExpression	dsq -> spawnParticleEffect ( \"Splash\" , check , angle )
>1194	ArgumentList	\"Splash\"
>1195	Argument	angle
>1196	Identifier	angle
>1197	Argument	check
>1198	Identifier	check
>1199	Argument	\"Splash\"
>1200	PrimaryExpression	\"Splash\"
>1201	Callee	dsq -> spawnParticleEffect
>1202	PtrMemberAccess	dsq -> spawnParticleEffect
>1203	Identifier	spawnParticleEffect
>1204	Identifier	dsq
>1205	IfStatement	if ( ! wasUnderWater && waterBubble )
>1206	ElseStatement	else
>1207	IfStatement	if ( wasUnderWater && lastWaterBubble )
>1208	ElseStatement	else
>1209	CompoundStatement	 
>1210	ExpressionStatement	 
>1211	AssignmentExpr	angle = MathFunctions 
>1212	CallExpression	MathFunctions 
>1213	ArgumentList	vel + vel2
>1214	Argument	0
>1215	PrimaryExpression	0
>1216	Argument	vel + vel2
>1217	AdditiveExpression	vel + vel2
>1218	Identifier	vel2
>1219	Identifier	vel
>1220	Callee	MathFunctions 
>1221	Identifier	MathFunctions 
>1222	Identifier	angle
>1223	CompoundStatement	 
>1224	ExpressionStatement	 
>1225	AssignmentExpr	angle = MathFunctions 
>1226	CallExpression	MathFunctions 
>1227	ArgumentList	diff
>1228	Argument	0
>1229	PrimaryExpression	0
>1230	Argument	diff
>1231	Identifier	diff
>1232	Callee	MathFunctions 
>1233	Identifier	MathFunctions 
>1234	Identifier	angle
>1235	IdentifierDeclStatement	 
>1236	IdentifierDecl	diff = position - lastWaterBubble -> nodes [ 0 ] . position
>1237	AssignmentExpr	diff = position - lastWaterBubble -> nodes [ 0 ] . position
>1238	AdditiveExpression	position - lastWaterBubble -> nodes [ 0 ] . position
>1239	MemberAccess	lastWaterBubble -> nodes [ 0 ] . position
>1240	Identifier	position
>1241	ArrayIndexing	lastWaterBubble -> nodes [ 0 ]
>1242	PrimaryExpression	0
>1243	PtrMemberAccess	lastWaterBubble -> nodes
>1244	Identifier	nodes
>1245	Identifier	lastWaterBubble
>1246	Identifier	position
>1247	Identifier	diff
>1248	Identifier	diff
>1249	IdentifierDeclType	Vector
>1250	Condition	 
>1251	AndExpression	wasUnderWater && lastWaterBubble
>1252	Identifier	lastWaterBubble
>1253	Identifier	wasUnderWater
>1254	CompoundStatement	 
>1255	ExpressionStatement	 
>1256	AssignmentExpr	angle = MathFunctions 
>1257	AdditiveExpression	MathFunctions 
>1258	PrimaryExpression	180
>1259	CallExpression	MathFunctions 
>1260	ArgumentList	diff
>1261	Argument	0
>1262	PrimaryExpression	0
>1263	Argument	diff
>1264	Identifier	diff
>1265	Callee	MathFunctions 
>1266	Identifier	MathFunctions 
>1267	Identifier	angle
>1268	IdentifierDeclStatement	 
>1269	IdentifierDecl	diff = position - waterBubble -> nodes [ 0 ] . position
>1270	AssignmentExpr	diff = position - waterBubble -> nodes [ 0 ] . position
>1271	AdditiveExpression	position - waterBubble -> nodes [ 0 ] . position
>1272	MemberAccess	waterBubble -> nodes [ 0 ] . position
>1273	Identifier	position
>1274	ArrayIndexing	waterBubble -> nodes [ 0 ]
>1275	PrimaryExpression	0
>1276	PtrMemberAccess	waterBubble -> nodes
>1277	Identifier	nodes
>1278	Identifier	waterBubble
>1279	Identifier	position
>1280	Identifier	diff
>1281	Identifier	diff
>1282	IdentifierDeclType	Vector
>1283	Condition	 
>1284	AndExpression	! wasUnderWater && waterBubble
>1285	Identifier	waterBubble
>1286	UnaryOp	! wasUnderWater
>1287	Identifier	wasUnderWater
>1288	UnaryOperator	!
>1289	IdentifierDeclStatement	 
>1290	IdentifierDecl	angle
>1291	Identifier	angle
>1292	IdentifierDeclType	float
>1293	Condition	 
>1294	Identifier	changed
>1295	IfStatement	if ( wasUnderWater && ! isUnderWater ( o ) )
>1296	ElseStatement	else
>1297	IfStatement	if ( ! wasUnderWater && isUnderWater ( o ) )
>1298	CompoundStatement	 
>1299	ExpressionStatement	 
>1300	AssignmentExpr	wasUnderWater = true
>1301	Identifier	true
>1302	Identifier	wasUnderWater
>1303	ExpressionStatement	 
>1304	AssignmentExpr	changed = true
>1305	Identifier	true
>1306	Identifier	changed
>1307	ExpressionStatement	 
>1308	CallExpression	sound ( \"splash-into\" )
>1309	ArgumentList	\"splash-into\"
>1310	Argument	\"splash-into\"
>1311	PrimaryExpression	\"splash-into\"
>1312	Callee	sound
>1313	Identifier	sound
>1314	Condition	 
>1315	AndExpression	! wasUnderWater && isUnderWater ( o )
>1316	CallExpression	isUnderWater ( o )
>1317	ArgumentList	o
>1318	Argument	o
>1319	Identifier	o
>1320	Callee	isUnderWater
>1321	Identifier	isUnderWater
>1322	UnaryOp	! wasUnderWater
>1323	Identifier	wasUnderWater
>1324	UnaryOperator	!
>1325	CompoundStatement	 
>1326	ExpressionStatement	 
>1327	AssignmentExpr	wasUnderWater = false
>1328	Identifier	false
>1329	Identifier	wasUnderWater
>1330	ExpressionStatement	 
>1331	AssignmentExpr	changed = true
>1332	Identifier	true
>1333	Identifier	changed
>1334	ExpressionStatement	 
>1335	CallExpression	sound ( \"splash-outof\" )
>1336	ArgumentList	\"splash-outof\"
>1337	Argument	\"splash-outof\"
>1338	PrimaryExpression	\"splash-outof\"
>1339	Callee	sound
>1340	Identifier	sound
>1341	Condition	 
>1342	AndExpression	wasUnderWater && ! isUnderWater ( o )
>1343	UnaryOp	! isUnderWater ( o )
>1344	CallExpression	isUnderWater ( o )
>1345	ArgumentList	o
>1346	Argument	o
>1347	Identifier	o
>1348	Callee	isUnderWater
>1349	Identifier	isUnderWater
>1350	UnaryOperator	!
>1351	Identifier	wasUnderWater
>1352	IdentifierDeclStatement	 
>1353	IdentifierDecl	changed = false
>1354	AssignmentExpr	changed = false
>1355	Identifier	false
>1356	Identifier	false
>1357	Identifier	changed
>1358	IdentifierDeclType	bool
>1359	IfStatement	if ( ! o . isZero ( ) )
>1360	ExpressionStatement	 
>1361	AssignmentExpr	check = o
>1362	Identifier	o
>1363	Identifier	check
>1364	Condition	 
>1365	UnaryOp	! o . isZero ( )
>1366	CallExpression	o . isZero ( )
>1367	ArgumentList	 
>1368	Callee	o . isZero
>1369	MemberAccess	o . isZero
>1370	Identifier	isZero
>1371	Identifier	o
>1372	UnaryOperator	!
>1373	IdentifierDeclStatement	 
>1374	IdentifierDecl	check = position
>1375	AssignmentExpr	check = position
>1376	Identifier	position
>1377	Identifier	position
>1378	Identifier	check
>1379	IdentifierDeclType	Vector
>1380	IdentifierDeclStatement	 
>1381	IdentifierDecl	* lastWaterBubble = waterBubble
>1382	AssignmentExpr	* lastWaterBubble = waterBubble
>1383	Identifier	waterBubble
>1384	Identifier	waterBubble
>1385	Identifier	lastWaterBubble
>1386	IdentifierDeclType	Path *
>1417	FunctionDef	Entity 
>1418	ParameterList	bool v
>1419	Parameter	 
>1420	Identifier	v
>1421	ParameterType	bool
>1422	ReturnType	void
>1423	CompoundStatement	 
>1424	ExpressionStatement	 
>1425	AssignmentExpr	spiritFreeze = v
>1426	Identifier	v
>1427	Identifier	spiritFreeze
>1433	FunctionDef	Entity 
>1434	ParameterList	bool v
>1435	Parameter	 
>1436	Identifier	v
>1437	ParameterType	bool
>1438	ReturnType	void
>1439	CompoundStatement	 
>1440	ExpressionStatement	 
>1441	AssignmentExpr	pauseFreeze = v
>1442	Identifier	v
>1443	Identifier	pauseFreeze
>1449	FunctionDef	Entity 
>1450	ParameterList	EntityProperty ep , bool value
>1451	Parameter	 
>1452	Identifier	value
>1453	ParameterType	bool
>1454	Parameter	 
>1455	Identifier	ep
>1456	ParameterType	EntityProperty
>1457	ReturnType	void
>1458	CompoundStatement	 
>1459	ExpressionStatement	 
>1460	AssignmentExpr	entityProperties [ int ( ep ) ] = value
>1461	Identifier	value
>1462	ArrayIndexing	entityProperties [ int ( ep ) ]
>1463	CallExpression	int ( ep )
>1464	ArgumentList	ep
>1465	Argument	ep
>1466	Identifier	ep
>1467	Callee	int
>1468	Identifier	int
>1469	Identifier	entityProperties
>1479	FunctionDef	Entity 
>1480	ParameterList	EntityProperty ep
>1481	Parameter	 
>1482	Identifier	ep
>1483	ParameterType	EntityProperty
>1484	ReturnType	bool
>1485	CompoundStatement	 
>1486	ReturnStatement	 
>1487	ArrayIndexing	entityProperties [ int ( ep ) ]
>1488	CallExpression	int ( ep )
>1489	ArgumentList	ep
>1490	Argument	ep
>1491	Identifier	ep
>1492	Callee	int
>1493	Identifier	int
>1494	Identifier	entityProperties
>1503	FunctionDef	Entity 
>1504	ParameterList	 
>1505	ReturnType	Vector
>1506	CompoundStatement	 
>1507	ReturnStatement	 
>1508	Identifier	ridingPosition
>1509	IfStatement	if ( ridingPosition . isZero ( ) )
>1510	ReturnStatement	 
>1511	Identifier	position
>1512	Condition	 
>1513	CallExpression	ridingPosition . isZero ( )
>1514	ArgumentList	 
>1515	Callee	ridingPosition . isZero
>1516	MemberAccess	ridingPosition . isZero
>1517	Identifier	isZero
>1518	Identifier	ridingPosition
>1525	FunctionDef	Entity 
>1526	ParameterList	 
>1527	ReturnType	float
>1528	CompoundStatement	 
>1529	ReturnStatement	 
>1530	Identifier	ridingRotation
>1531	IfStatement	if ( ridingRotation == 0 )
>1532	ReturnStatement	 
>1533	MemberAccess	rotation . z
>1534	Identifier	z
>1535	Identifier	rotation
>1536	Condition	 
>1537	EqualityExpression	ridingRotation == 0
>1538	PrimaryExpression	0
>1539	Identifier	ridingRotation
>1546	FunctionDef	Entity 
>1547	ParameterList	bool on
>1548	Parameter	 
>1549	Identifier	on
>1550	ParameterType	bool
>1551	ReturnType	void
>1552	CompoundStatement	 
>1553	ExpressionStatement	 
>1554	AssignmentExpr	ridingFlip = on
>1555	Identifier	on
>1556	Identifier	ridingFlip
>1562	FunctionDef	Entity 
>1563	ParameterList	 
>1564	ReturnType	bool
>1565	CompoundStatement	 
>1566	ReturnStatement	 
>1567	Identifier	ridingFlip
>1572	FunctionDef	Entity 
>1573	ParameterList	const Vector & pos , float rot , bool fh
>1574	Parameter	 
>1575	Identifier	fh
>1576	ParameterType	bool
>1577	Parameter	 
>1578	Identifier	rot
>1579	ParameterType	float
>1580	Parameter	 
>1581	Identifier	pos
>1582	ParameterType	const Vector &
>1583	ReturnType	void
>1584	CompoundStatement	 
>1585	ExpressionStatement	 
>1586	CallExpression	setRidingFlip ( fh )
>1587	ArgumentList	fh
>1588	Argument	fh
>1589	Identifier	fh
>1590	Callee	setRidingFlip
>1591	Identifier	setRidingFlip
>1592	ExpressionStatement	 
>1593	CallExpression	setRidingRotation ( rot )
>1594	ArgumentList	rot
>1595	Argument	rot
>1596	Identifier	rot
>1597	Callee	setRidingRotation
>1598	Identifier	setRidingRotation
>1599	ExpressionStatement	 
>1600	CallExpression	setRidingPosition ( pos )
>1601	ArgumentList	pos
>1602	Argument	pos
>1603	Identifier	pos
>1604	Callee	setRidingPosition
>1605	Identifier	setRidingPosition
>1612	FunctionDef	Entity 
>1613	ParameterList	const Vector & pos
>1614	Parameter	 
>1615	Identifier	pos
>1616	ParameterType	const Vector &
>1617	ReturnType	void
>1618	CompoundStatement	 
>1619	ExpressionStatement	 
>1620	AssignmentExpr	ridingPosition = pos
>1621	Identifier	pos
>1622	Identifier	ridingPosition
>1628	FunctionDef	Entity 
>1629	ParameterList	float rot
>1630	Parameter	 
>1631	Identifier	rot
>1632	ParameterType	float
>1633	ReturnType	void
>1634	CompoundStatement	 
>1635	ExpressionStatement	 
>1636	AssignmentExpr	ridingRotation = rot
>1637	Identifier	rot
>1638	Identifier	ridingRotation
>1644	FunctionDef	Entity 
>1645	ParameterList	float dt
>1646	Parameter	 
>1647	Identifier	dt
>1648	ParameterType	float
>1649	ReturnType	void
>1650	CompoundStatement	 
>1651	IfStatement	if ( vel . getSquaredLength2D ( ) > 0 )
>1652	CompoundStatement	 
>1653	IfStatement	if ( ! wasIn && vel . isLength2DIn ( velStopLen ) )
>1654	ExpressionStatement	 
>1655	AssignmentExpr	vel = 0
>1656	PrimaryExpression	0
>1657	Identifier	vel
>1658	Condition	 
>1659	AndExpression	! wasIn && vel . isLength2DIn ( velStopLen )
>1660	CallExpression	vel . isLength2DIn ( velStopLen )
>1661	ArgumentList	velStopLen
>1662	Argument	velStopLen
>1663	Identifier	velStopLen
>1664	Callee	vel . isLength2DIn
>1665	MemberAccess	vel . isLength2DIn
>1666	Identifier	isLength2DIn
>1667	Identifier	vel
>1668	UnaryOp	! wasIn
>1669	Identifier	wasIn
>1670	UnaryOperator	!
>1671	ExpressionStatement	 
>1672	AssignmentExpr	vel -= d * dt
>1673	MultiplicativeExpression	d * dt
>1674	Identifier	dt
>1675	Identifier	d
>1676	Identifier	vel
>1677	ExpressionStatement	 
>1678	CallExpression	d . setLength2D ( vars -> frictionForce )
>1679	ArgumentList	vars -> frictionForce
>1680	Argument	vars -> frictionForce
>1681	PtrMemberAccess	vars -> frictionForce
>1682	Identifier	frictionForce
>1683	Identifier	vars
>1684	Callee	d . setLength2D
>1685	MemberAccess	d . setLength2D
>1686	Identifier	setLength2D
>1687	Identifier	d
>1688	IdentifierDeclStatement	 
>1689	IdentifierDecl	d = vel
>1690	AssignmentExpr	d = vel
>1691	Identifier	vel
>1692	Identifier	vel
>1693	Identifier	d
>1694	IdentifierDeclType	Vector
>1695	IdentifierDeclStatement	 
>1696	IdentifierDecl	wasIn = vel . isLength2DIn ( velStopLen )
>1697	AssignmentExpr	wasIn = vel . isLength2DIn ( velStopLen )
>1698	CallExpression	vel . isLength2DIn ( velStopLen )
>1699	ArgumentList	velStopLen
>1700	Argument	velStopLen
>1701	Identifier	velStopLen
>1702	Callee	vel . isLength2DIn
>1703	MemberAccess	vel . isLength2DIn
>1704	Identifier	isLength2DIn
>1705	Identifier	vel
>1706	Identifier	wasIn
>1707	Identifier	wasIn
>1708	IdentifierDeclType	bool
>1709	IdentifierDeclStatement	 
>1710	IdentifierDecl	velStopLen = 10
>1711	AssignmentExpr	velStopLen = 10
>1712	PrimaryExpression	10
>1713	Identifier	velStopLen
>1714	Identifier	velStopLen
>1715	IdentifierDeclType	const float
>1716	Condition	 
>1717	RelationalExpression	vel . getSquaredLength2D ( ) > 0
>1718	PrimaryExpression	0
>1719	CallExpression	vel . getSquaredLength2D ( )
>1720	ArgumentList	 
>1721	Callee	vel . getSquaredLength2D
>1722	MemberAccess	vel . getSquaredLength2D
>1723	Identifier	getSquaredLength2D
>1724	Identifier	vel
>1738	FunctionDef	Entity 
>1739	ParameterList	float dt , float len
>1740	Parameter	 
>1741	Identifier	len
>1742	ParameterType	float
>1743	Parameter	 
>1744	Identifier	dt
>1745	ParameterType	float
>1746	ReturnType	void
>1747	CompoundStatement	 
>1748	IfStatement	if ( ! v . isZero ( ) )
>1749	CompoundStatement	 
>1750	ExpressionStatement	 
>1751	AssignmentExpr	vel -= v
>1752	Identifier	v
>1753	Identifier	vel
>1754	ExpressionStatement	 
>1755	CallExpression	v . setLength2D ( dt * len )
>1756	ArgumentList	dt * len
>1757	Argument	dt * len
>1758	MultiplicativeExpression	dt * len
>1759	Identifier	len
>1760	Identifier	dt
>1761	Callee	v . setLength2D
>1762	MemberAccess	v . setLength2D
>1763	Identifier	setLength2D
>1764	Identifier	v
>1765	Condition	 
>1766	UnaryOp	! v . isZero ( )
>1767	CallExpression	v . isZero ( )
>1768	ArgumentList	 
>1769	Callee	v . isZero
>1770	MemberAccess	v . isZero
>1771	Identifier	isZero
>1772	Identifier	v
>1773	UnaryOperator	!
>1774	IdentifierDeclStatement	 
>1775	IdentifierDecl	v = vel
>1776	AssignmentExpr	v = vel
>1777	Identifier	vel
>1778	Identifier	vel
>1779	Identifier	v
>1780	IdentifierDeclType	Vector
>1789	FunctionDef	Entity 
>1790	ParameterList	const std 
>1791	Parameter	 
>1792	Identifier	name
>1793	ParameterType	const std 
>1794	ReturnType	void
>1795	CompoundStatement	 
>1796	ExpressionStatement	 
>1797	AssignmentExpr	this -> name = name
>1798	Identifier	name
>1799	PtrMemberAccess	this -> name
>1800	Identifier	name
>1801	Identifier	this
>1809	FunctionDef	Entity 
>1810	ParameterList	Path * p , float speed , int dir , bool deleteOnEnd
>1811	Parameter	 
>1812	Identifier	deleteOnEnd
>1813	ParameterType	bool
>1814	Parameter	 
>1815	Identifier	dir
>1816	ParameterType	int
>1817	Parameter	 
>1818	Identifier	speed
>1819	ParameterType	float
>1820	Parameter	 
>1821	Identifier	p
>1822	ParameterType	Path *
>1823	ReturnType	float
>1824	CompoundStatement	 
>1825	ReturnStatement	 
>1826	Identifier	time
>1827	ExpressionStatement	 
>1828	CallExpression	position . startPath ( time )
>1829	ArgumentList	time
>1830	Argument	time
>1831	Identifier	time
>1832	Callee	position . startPath
>1833	MemberAccess	position . startPath
>1834	Identifier	startPath
>1835	Identifier	position
>1836	ExpressionStatement	 
>1837	AssignmentExpr	position . data -> path . getPathNode ( 0 ) -> value = position
>1838	Identifier	position
>1839	PtrMemberAccess	position . data -> path . getPathNode ( 0 ) -> value
>1840	Identifier	value
>1841	CallExpression	position . data -> path . getPathNode ( 0 )
>1842	ArgumentList	0
>1843	Argument	0
>1844	PrimaryExpression	0
>1845	Callee	position . data -> path . getPathNode
>1846	MemberAccess	position . data -> path . getPathNode
>1847	Identifier	getPathNode
>1848	PtrMemberAccess	position . data -> path
>1849	Identifier	path
>1850	MemberAccess	position . data
>1851	Identifier	data
>1852	Identifier	position
>1853	IdentifierDeclStatement	 
>1854	IdentifierDecl	time = position . data -> path . getLength ( ) / speed
>1855	AssignmentExpr	time = position . data -> path . getLength ( ) / speed
>1856	MultiplicativeExpression	position . data -> path . getLength ( ) / speed
>1857	Identifier	speed
>1858	CallExpression	position . data -> path . getLength ( )
>1859	ArgumentList	 
>1860	Callee	position . data -> path . getLength
>1861	MemberAccess	position . data -> path . getLength
>1862	Identifier	getLength
>1863	PtrMemberAccess	position . data -> path
>1864	Identifier	path
>1865	MemberAccess	position . data
>1866	Identifier	data
>1867	Identifier	position
>1868	Identifier	time
>1869	Identifier	time
>1870	IdentifierDeclType	float
>1871	IfStatement	if ( dir )
>1872	ElseStatement	else
>1873	CompoundStatement	 
>1874	ForStatement	for ( int i = 0 ; i < p -> nodes . size ( ) ; i ++ )
>1875	CompoundStatement	 
>1876	ExpressionStatement	 
>1877	CallExpression	position . data -> path . addPathNode ( pn . position , float ( i / float ( p -> nodes . size ( ) ) ) )
>1878	ArgumentList	pn . position
>1879	Argument	float ( i / float ( p -> nodes . size ( ) ) )
>1880	CallExpression	float ( i / float ( p -> nodes . size ( ) ) )
>1881	ArgumentList	i / float ( p -> nodes . size ( ) )
>1882	Argument	i / float ( p -> nodes . size ( ) )
>1883	MultiplicativeExpression	i / float ( p -> nodes . size ( ) )
>1884	CallExpression	float ( p -> nodes . size ( ) )
>1885	ArgumentList	p -> nodes . size ( )
>1886	Argument	p -> nodes . size ( )
>1887	CallExpression	p -> nodes . size ( )
>1888	ArgumentList	 
>1889	Callee	p -> nodes . size
>1890	MemberAccess	p -> nodes . size
>1891	Identifier	size
>1892	PtrMemberAccess	p -> nodes
>1893	Identifier	nodes
>1894	Identifier	p
>1895	Callee	float
>1896	Identifier	float
>1897	Identifier	i
>1898	Callee	float
>1899	Identifier	float
>1900	Argument	pn . position
>1901	MemberAccess	pn . position
>1902	Identifier	position
>1903	Identifier	pn
>1904	Callee	position . data -> path . addPathNode
>1905	MemberAccess	position . data -> path . addPathNode
>1906	Identifier	addPathNode
>1907	PtrMemberAccess	position . data -> path
>1908	Identifier	path
>1909	MemberAccess	position . data
>1910	Identifier	data
>1911	Identifier	position
>1912	IdentifierDeclStatement	 
>1913	IdentifierDecl	pn = p -> nodes [ i ]
>1914	AssignmentExpr	pn = p -> nodes [ i ]
>1915	ArrayIndexing	p -> nodes [ i ]
>1916	Identifier	i
>1917	PtrMemberAccess	p -> nodes
>1918	Identifier	nodes
>1919	Identifier	p
>1920	Identifier	pn
>1921	Identifier	pn
>1922	IdentifierDeclType	PathNode
>1923	IncDecOp	 
>1924	IncDec	++
>1925	Identifier	i
>1926	Condition	 
>1927	RelationalExpression	i < p -> nodes . size ( )
>1928	CallExpression	p -> nodes . size ( )
>1929	ArgumentList	 
>1930	Callee	p -> nodes . size
>1931	MemberAccess	p -> nodes . size
>1932	Identifier	size
>1933	PtrMemberAccess	p -> nodes
>1934	Identifier	nodes
>1935	Identifier	p
>1936	Identifier	i
>1937	ForInit	 
>1938	IdentifierDeclStatement	int i = 0 ;
>1939	IdentifierDecl	i = 0
>1940	AssignmentExpr	i = 0
>1941	PrimaryExpression	0
>1942	Identifier	i
>1943	Identifier	i
>1944	IdentifierDeclType	int
>1945	CompoundStatement	 
>1946	ForStatement	for ( int i = p -> nodes . size ( ) - 1 ; i >= 0 ; i -- )
>1947	CompoundStatement	 
>1948	ExpressionStatement	 
>1949	CallExpression	position . data -> path . addPathNode ( pn . position , 1.0f - ( float ( i / float ( p -> nodes . size ( ) ) ) ) )
>1950	ArgumentList	pn . position
>1951	Argument	1.0f - ( float ( i / float ( p -> nodes . size ( ) ) ) )
>1952	AdditiveExpression	1.0f - ( float ( i / float ( p -> nodes . size ( ) ) ) )
>1953	CallExpression	float ( i / float ( p -> nodes . size ( ) ) )
>1954	ArgumentList	i / float ( p -> nodes . size ( ) )
>1955	Argument	i / float ( p -> nodes . size ( ) )
>1956	MultiplicativeExpression	i / float ( p -> nodes . size ( ) )
>1957	CallExpression	float ( p -> nodes . size ( ) )
>1958	ArgumentList	p -> nodes . size ( )
>1959	Argument	p -> nodes . size ( )
>1960	CallExpression	p -> nodes . size ( )
>1961	ArgumentList	 
>1962	Callee	p -> nodes . size
>1963	MemberAccess	p -> nodes . size
>1964	Identifier	size
>1965	PtrMemberAccess	p -> nodes
>1966	Identifier	nodes
>1967	Identifier	p
>1968	Callee	float
>1969	Identifier	float
>1970	Identifier	i
>1971	Callee	float
>1972	Identifier	float
>1973	PrimaryExpression	1.0f
>1974	Argument	pn . position
>1975	MemberAccess	pn . position
>1976	Identifier	position
>1977	Identifier	pn
>1978	Callee	position . data -> path . addPathNode
>1979	MemberAccess	position . data -> path . addPathNode
>1980	Identifier	addPathNode
>1981	PtrMemberAccess	position . data -> path
>1982	Identifier	path
>1983	MemberAccess	position . data
>1984	Identifier	data
>1985	Identifier	position
>1986	IdentifierDeclStatement	 
>1987	IdentifierDecl	pn = p -> nodes [ i ]
>1988	AssignmentExpr	pn = p -> nodes [ i ]
>1989	ArrayIndexing	p -> nodes [ i ]
>1990	Identifier	i
>1991	PtrMemberAccess	p -> nodes
>1992	Identifier	nodes
>1993	Identifier	p
>1994	Identifier	pn
>1995	Identifier	pn
>1996	IdentifierDeclType	PathNode
>1997	IncDecOp	 
>1998	IncDec	--
>1999	Identifier	i
>2000	Condition	 
>2001	RelationalExpression	i >= 0
>2002	PrimaryExpression	0
>2003	Identifier	i
>2004	ForInit	 
>2005	IdentifierDeclStatement	int i = p -> nodes . size ( ) - 1 ;
>2006	IdentifierDecl	i = p -> nodes . size ( ) - 1
>2007	AssignmentExpr	i = p -> nodes . size ( ) - 1
>2008	AdditiveExpression	p -> nodes . size ( ) - 1
>2009	PrimaryExpression	1
>2010	CallExpression	p -> nodes . size ( )
>2011	ArgumentList	 
>2012	Callee	p -> nodes . size
>2013	MemberAccess	p -> nodes . size
>2014	Identifier	size
>2015	PtrMemberAccess	p -> nodes
>2016	Identifier	nodes
>2017	Identifier	p
>2018	Identifier	i
>2019	Identifier	i
>2020	IdentifierDeclType	int
>2021	Condition	 
>2022	Identifier	dir
>2023	ExpressionStatement	 
>2024	CallExpression	position . data -> path . clear ( )
>2025	ArgumentList	 
>2026	Callee	position . data -> path . clear
>2027	MemberAccess	position . data -> path . clear
>2028	Identifier	clear
>2029	PtrMemberAccess	position . data -> path
>2030	Identifier	path
>2031	MemberAccess	position . data
>2032	Identifier	data
>2033	Identifier	position
>2034	ExpressionStatement	 
>2035	CallExpression	position . ensureData ( )
>2036	ArgumentList	 
>2037	Callee	position . ensureData
>2038	MemberAccess	position . ensureData
>2039	Identifier	ensureData
>2040	Identifier	position
>2041	ExpressionStatement	 
>2042	CallExpression	position . stopPath ( )
>2043	ArgumentList	 
>2044	Callee	position . stopPath
>2045	MemberAccess	position . stopPath
>2046	Identifier	stopPath
>2047	Identifier	position
>2048	ExpressionStatement	 
>2049	AssignmentExpr	deleteOnPathEnd = deleteOnEnd
>2050	Identifier	deleteOnEnd
>2051	Identifier	deleteOnPathEnd
>2052	IfStatement	if ( ! speed )
>2053	ExpressionStatement	 
>2054	AssignmentExpr	speed = getMaxSpeed ( )
>2055	CallExpression	getMaxSpeed ( )
>2056	ArgumentList	 
>2057	Callee	getMaxSpeed
>2058	Identifier	getMaxSpeed
>2059	Identifier	speed
>2060	Condition	 
>2061	UnaryOp	! speed
>2062	Identifier	speed
>2063	UnaryOperator	!
>2096	FunctionDef	Entity 
>2097	ParameterList	Vector dest , float speed , int dieOnPathEnd , bool swim
>2098	Parameter	 
>2099	Identifier	swim
>2100	ParameterType	bool
>2101	Parameter	 
>2102	Identifier	dieOnPathEnd
>2103	ParameterType	int
>2104	Parameter	 
>2105	Identifier	speed
>2106	ParameterType	float
>2107	Parameter	 
>2108	Identifier	dest
>2109	ParameterType	Vector
>2110	ReturnType	float
>2111	CompoundStatement	 
>2112	ReturnStatement	 
>2113	Identifier	time
>2114	ExpressionStatement	 
>2115	AssignmentExpr	deleteOnPathEnd = dieOnPathEnd
>2116	Identifier	dieOnPathEnd
>2117	Identifier	deleteOnPathEnd
>2118	ExpressionStatement	 
>2119	CallExpression	position . startPath ( time )
>2120	ArgumentList	time
>2121	Argument	time
>2122	Identifier	time
>2123	Callee	position . startPath
>2124	MemberAccess	position . startPath
>2125	Identifier	startPath
>2126	Identifier	position
>2127	ExpressionStatement	 
>2128	AssignmentExpr	position . data -> path . getPathNode ( 0 ) -> value = position
>2129	Identifier	position
>2130	PtrMemberAccess	position . data -> path . getPathNode ( 0 ) -> value
>2131	Identifier	value
>2132	CallExpression	position . data -> path . getPathNode ( 0 )
>2133	ArgumentList	0
>2134	Argument	0
>2135	PrimaryExpression	0
>2136	Callee	position . data -> path . getPathNode
>2137	MemberAccess	position . data -> path . getPathNode
>2138	Identifier	getPathNode
>2139	PtrMemberAccess	position . data -> path
>2140	Identifier	path
>2141	MemberAccess	position . data
>2142	Identifier	data
>2143	Identifier	position
>2144	IdentifierDeclStatement	 
>2145	IdentifierDecl	time = position . data -> path . getLength ( ) / speed
>2146	AssignmentExpr	time = position . data -> path . getLength ( ) / speed
>2147	MultiplicativeExpression	position . data -> path . getLength ( ) / speed
>2148	Identifier	speed
>2149	CallExpression	position . data -> path . getLength ( )
>2150	ArgumentList	 
>2151	Callee	position . data -> path . getLength
>2152	MemberAccess	position . data -> path . getLength
>2153	Identifier	getLength
>2154	PtrMemberAccess	position . data -> path
>2155	Identifier	path
>2156	MemberAccess	position . data
>2157	Identifier	data
>2158	Identifier	position
>2159	Identifier	time
>2160	Identifier	time
>2161	IdentifierDeclType	float
>2162	ExpressionStatement	 
>2163	CallExpression	PathFinding 
>2164	ArgumentList	position . data -> path
>2165	Argument	dest
>2166	Identifier	dest
>2167	Argument	start
>2168	Identifier	start
>2169	Argument	position . data -> path
>2170	PtrMemberAccess	position . data -> path
>2171	Identifier	path
>2172	MemberAccess	position . data
>2173	Identifier	data
>2174	Identifier	position
>2175	Callee	PathFinding 
>2176	Identifier	PathFinding 
>2177	ExpressionStatement	 
>2178	CallExpression	PathFinding 
>2179	ArgumentList	position . data -> path
>2180	Argument	position . data -> path
>2181	PtrMemberAccess	position . data -> path
>2182	Identifier	path
>2183	MemberAccess	position . data
>2184	Identifier	data
>2185	Identifier	position
>2186	Callee	PathFinding 
>2187	Identifier	PathFinding 
>2188	ExpressionStatement	 
>2189	AssignmentExpr	this -> vel = 0
>2190	PrimaryExpression	0
>2191	PtrMemberAccess	this -> vel
>2192	Identifier	vel
>2193	Identifier	this
>2194	ExpressionStatement	 
>2195	CallExpression	PathFinding 
>2196	ArgumentList	this
>2197	Argument	TileVector ( dest )
>2198	CallExpression	TileVector ( dest )
>2199	ArgumentList	dest
>2200	Argument	dest
>2201	Identifier	dest
>2202	Callee	TileVector
>2203	Identifier	TileVector
>2204	Argument	TileVector ( start )
>2205	CallExpression	TileVector ( start )
>2206	ArgumentList	start
>2207	Argument	start
>2208	Identifier	start
>2209	Callee	TileVector
>2210	Identifier	TileVector
>2211	Argument	this
>2212	Identifier	this
>2213	Callee	PathFinding 
>2214	Identifier	PathFinding 
>2215	ExpressionStatement	 
>2216	AssignmentExpr	swimPath = swim
>2217	Identifier	swim
>2218	Identifier	swimPath
>2219	ExpressionStatement	 
>2220	CallExpression	position . stop ( )
>2221	ArgumentList	 
>2222	Callee	position . stop
>2223	MemberAccess	position . stop
>2224	Identifier	stop
>2225	Identifier	position
>2226	ExpressionStatement	 
>2227	CallExpression	position . data -> path . clear ( )
>2228	ArgumentList	 
>2229	Callee	position . data -> path . clear
>2230	MemberAccess	position . data -> path . clear
>2231	Identifier	clear
>2232	PtrMemberAccess	position . data -> path
>2233	Identifier	path
>2234	MemberAccess	position . data
>2235	Identifier	data
>2236	Identifier	position
>2237	ExpressionStatement	 
>2238	CallExpression	position . ensureData ( )
>2239	ArgumentList	 
>2240	Callee	position . ensureData
>2241	MemberAccess	position . ensureData
>2242	Identifier	ensureData
>2243	Identifier	position
>2244	ExpressionStatement	 
>2245	AssignmentExpr	followEntity = 0
>2246	PrimaryExpression	0
>2247	Identifier	followEntity
>2248	IdentifierDeclStatement	 
>2249	IdentifierDecl	start = position
>2250	AssignmentExpr	start = position
>2251	Identifier	position
>2252	Identifier	position
>2253	Identifier	start
>2254	IdentifierDeclType	Vector
>2255	IfStatement	if ( ! speed )
>2256	ExpressionStatement	 
>2257	AssignmentExpr	speed = getMaxSpeed ( )
>2258	CallExpression	getMaxSpeed ( )
>2259	ArgumentList	 
>2260	Callee	getMaxSpeed
>2261	Identifier	getMaxSpeed
>2262	Identifier	speed
>2263	Condition	 
>2264	UnaryOp	! speed
>2265	Identifier	speed
>2266	UnaryOperator	!
>2296	FunctionDef	Entity 
>2297	ParameterList	 
>2298	ReturnType	void
>2299	CompoundStatement	 
>2300	ExpressionStatement	 
>2301	CallExpression	position . stopPath ( )
>2302	ArgumentList	 
>2303	Callee	position . stopPath
>2304	MemberAccess	position . stopPath
>2305	Identifier	stopPath
>2306	Identifier	position
>2311	FunctionDef	Entity 
>2312	ParameterList	Vector pos
>2313	Parameter	 
>2314	Identifier	pos
>2315	ParameterType	Vector
>2316	ReturnType	void
>2317	CompoundStatement	 
>2318	IfStatement	if ( pos . x > position . x )
>2319	ElseStatement	else
>2320	IfStatement	if ( pos . x < position . x )
>2321	CompoundStatement	 
>2322	IfStatement	if ( isfh ( ) )
>2323	ExpressionStatement	 
>2324	CallExpression	flipHorizontal ( )
>2325	ArgumentList	 
>2326	Callee	flipHorizontal
>2327	Identifier	flipHorizontal
>2328	Condition	 
>2329	CallExpression	isfh ( )
>2330	ArgumentList	 
>2331	Callee	isfh
>2332	Identifier	isfh
>2333	Condition	 
>2334	RelationalExpression	pos . x < position . x
>2335	MemberAccess	position . x
>2336	Identifier	x
>2337	Identifier	position
>2338	MemberAccess	pos . x
>2339	Identifier	x
>2340	Identifier	pos
>2341	CompoundStatement	 
>2342	IfStatement	if ( ! isfh ( ) )
>2343	ExpressionStatement	 
>2344	CallExpression	flipHorizontal ( )
>2345	ArgumentList	 
>2346	Callee	flipHorizontal
>2347	Identifier	flipHorizontal
>2348	Condition	 
>2349	UnaryOp	! isfh ( )
>2350	CallExpression	isfh ( )
>2351	ArgumentList	 
>2352	Callee	isfh
>2353	Identifier	isfh
>2354	UnaryOperator	!
>2355	Condition	 
>2356	RelationalExpression	pos . x > position . x
>2357	MemberAccess	position . x
>2358	Identifier	x
>2359	Identifier	position
>2360	MemberAccess	pos . x
>2361	Identifier	x
>2362	Identifier	pos
>2371	FunctionDef	Entity 
>2372	ParameterList	int t
>2373	Parameter	 
>2374	Identifier	t
>2375	ParameterType	int
>2376	ReturnType	Entity *
>2377	CompoundStatement	 
>2378	ReturnStatement	 
>2379	ArrayIndexing	targets [ t ]
>2380	Identifier	t
>2381	Identifier	targets
>2389	FunctionDef	Entity 
>2390	ParameterList	Entity * e , int t
>2391	Parameter	 
>2392	Identifier	t
>2393	ParameterType	int
>2394	Parameter	 
>2395	Identifier	e
>2396	ParameterType	Entity *
>2397	ReturnType	void
>2398	CompoundStatement	 
>2399	ExpressionStatement	 
>2400	AssignmentExpr	targets [ t ] = e
>2401	Identifier	e
>2402	ArrayIndexing	targets [ t ]
>2403	Identifier	t
>2404	Identifier	targets
>2413	FunctionDef	Entity 
>2414	ParameterList	int t
>2415	Parameter	 
>2416	Identifier	t
>2417	ParameterType	int
>2418	ReturnType	bool
>2419	CompoundStatement	 
>2420	ReturnStatement	 
>2421	EqualityExpression	targets [ t ] != 0
>2422	PrimaryExpression	0
>2423	ArrayIndexing	targets [ t ]
>2424	Identifier	t
>2425	Identifier	targets
>2433	FunctionDef	Entity 
>2434	ParameterList	Entity * e
>2435	Parameter	 
>2436	Identifier	e
>2437	ParameterType	Entity *
>2438	ReturnType	void
>2439	CompoundStatement	 
>2440	ExpressionStatement	 
>2441	AssignmentExpr	watchingEntity = e
>2442	Identifier	e
>2443	Identifier	watchingEntity
>2449	FunctionDef	Entity 
>2450	ParameterList	 
>2451	ReturnType	void
>2452	CompoundStatement	 
>2453	ExpressionStatement	 
>2454	CallExpression	Quad 
>2455	ArgumentList	 
>2456	Callee	Quad 
>2457	Identifier	Quad 
>2458	ExpressionStatement	 
>2459	CallExpression	dsq -> removeEntity ( this )
>2460	ArgumentList	this
>2461	Argument	this
>2462	Identifier	this
>2463	Callee	dsq -> removeEntity
>2464	PtrMemberAccess	dsq -> removeEntity
>2465	Identifier	removeEntity
>2466	Identifier	dsq
>2467	ExpressionStatement	 
>2468	CallExpression	Shot 
>2469	ArgumentList	this
>2470	Argument	this
>2471	Identifier	this
>2472	Callee	Shot 
>2473	Identifier	Shot 
>2474	IfStatement	if ( hair )
>2475	CompoundStatement	 
>2476	ExpressionStatement	 
>2477	AssignmentExpr	hair = 0
>2478	PrimaryExpression	0
>2479	Identifier	hair
>2480	Condition	 
>2481	Identifier	hair
>2482	ExpressionStatement	 
>2483	CallExpression	this -> unlinkAllSounds ( )
>2484	ArgumentList	 
>2485	Callee	this -> unlinkAllSounds
>2486	PtrMemberAccess	this -> unlinkAllSounds
>2487	Identifier	unlinkAllSounds
>2488	Identifier	this
>2489	IfStatement	if ( stopSoundsOnDeath )
>2490	ExpressionStatement	 
>2491	CallExpression	this -> stopAllSounds ( )
>2492	ArgumentList	 
>2493	Callee	this -> stopAllSounds
>2494	PtrMemberAccess	this -> stopAllSounds
>2495	Identifier	stopAllSounds
>2496	Identifier	this
>2497	Condition	 
>2498	Identifier	stopSoundsOnDeath
>2506	FunctionDef	Entity 
>2507	ParameterList	int tcheck , int state , float statet
>2508	Parameter	 
>2509	Identifier	statet
>2510	ParameterType	float
>2511	Parameter	 
>2512	Identifier	state
>2513	ParameterType	int
>2514	Parameter	 
>2515	Identifier	tcheck
>2516	ParameterType	int
>2517	ReturnType	bool
>2518	CompoundStatement	 
>2519	ReturnStatement	 
>2520	Identifier	false
>2521	IfStatement	if ( isNearObstruction ( tcheck , OBSCHECK_8DIR , & hitTile ) )
>2522	CompoundStatement	 
>2523	IfStatement	if ( clampToSurface ( tcheck , Vector ( 0 , 0 ) , hitTile ) )
>2524	CompoundStatement	 
>2525	ReturnStatement	 
>2526	Identifier	true
>2527	ExpressionStatement	 
>2528	CallExpression	setState ( state , statet )
>2529	ArgumentList	state
>2530	Argument	statet
>2531	Identifier	statet
>2532	Argument	state
>2533	Identifier	state
>2534	Callee	setState
>2535	Identifier	setState
>2536	Condition	 
>2537	CallExpression	clampToSurface ( tcheck , Vector ( 0 , 0 ) , hitTile )
>2538	ArgumentList	tcheck
>2539	Argument	hitTile
>2540	Identifier	hitTile
>2541	Argument	Vector ( 0 , 0 )
>2542	CallExpression	Vector ( 0 , 0 )
>2543	ArgumentList	0
>2544	Argument	0
>2545	PrimaryExpression	0
>2546	Argument	0
>2547	PrimaryExpression	0
>2548	Callee	Vector
>2549	Identifier	Vector
>2550	Argument	tcheck
>2551	Identifier	tcheck
>2552	Callee	clampToSurface
>2553	Identifier	clampToSurface
>2554	Condition	 
>2555	CallExpression	isNearObstruction ( tcheck , OBSCHECK_8DIR , & hitTile )
>2556	ArgumentList	tcheck
>2557	Argument	& hitTile
>2558	UnaryOp	& hitTile
>2559	Identifier	hitTile
>2560	UnaryOperator	&
>2561	Argument	OBSCHECK_8DIR
>2562	Identifier	OBSCHECK_8DIR
>2563	Argument	tcheck
>2564	Identifier	tcheck
>2565	Callee	isNearObstruction
>2566	Identifier	isNearObstruction
>2567	IdentifierDeclStatement	 
>2568	IdentifierDecl	hitTile
>2569	Identifier	hitTile
>2570	IdentifierDeclType	TileVector
>2585	FunctionDef	Entity 
>2586	ParameterList	float t , int n , int rot
>2587	Parameter	 
>2588	Identifier	rot
>2589	ParameterType	int
>2590	Parameter	 
>2591	Identifier	n
>2592	ParameterType	int
>2593	Parameter	 
>2594	Identifier	t
>2595	ParameterType	float
>2596	ReturnType	void
>2597	CompoundStatement	 
>2598	IfStatement	if ( ! v . isZero ( ) )
>2599	CompoundStatement	 
>2600	ExpressionStatement	 
>2601	CallExpression	rotateToVec ( v , t , rot )
>2602	ArgumentList	v
>2603	Argument	rot
>2604	Identifier	rot
>2605	Argument	t
>2606	Identifier	t
>2607	Argument	v
>2608	Identifier	v
>2609	Callee	rotateToVec
>2610	Identifier	rotateToVec
>2611	Condition	 
>2612	UnaryOp	! v . isZero ( )
>2613	CallExpression	v . isZero ( )
>2614	ArgumentList	 
>2615	Callee	v . isZero
>2616	MemberAccess	v . isZero
>2617	Identifier	isZero
>2618	Identifier	v
>2619	UnaryOperator	!
>2620	IfStatement	if ( ridingOnEntity )
>2621	ElseStatement	else
>2622	CompoundStatement	 
>2623	IfStatement	if ( n == 0 )
>2624	ElseStatement	else
>2625	ExpressionStatement	 
>2626	AssignmentExpr	v = dsq -> game -> getWallNormal ( position , n )
>2627	CallExpression	dsq -> game -> getWallNormal ( position , n )
>2628	ArgumentList	position
>2629	Argument	n
>2630	Identifier	n
>2631	Argument	position
>2632	Identifier	position
>2633	Callee	dsq -> game -> getWallNormal
>2634	PtrMemberAccess	dsq -> game -> getWallNormal
>2635	Identifier	getWallNormal
>2636	PtrMemberAccess	dsq -> game
>2637	Identifier	game
>2638	Identifier	dsq
>2639	Identifier	v
>2640	ExpressionStatement	 
>2641	AssignmentExpr	v = dsq -> game -> getWallNormal ( position )
>2642	CallExpression	dsq -> game -> getWallNormal ( position )
>2643	ArgumentList	position
>2644	Argument	position
>2645	Identifier	position
>2646	Callee	dsq -> game -> getWallNormal
>2647	PtrMemberAccess	dsq -> game -> getWallNormal
>2648	Identifier	getWallNormal
>2649	PtrMemberAccess	dsq -> game
>2650	Identifier	game
>2651	Identifier	dsq
>2652	Identifier	v
>2653	Condition	 
>2654	EqualityExpression	n == 0
>2655	PrimaryExpression	0
>2656	Identifier	n
>2657	CompoundStatement	 
>2658	ExpressionStatement	 
>2659	AssignmentExpr	v = position - ridingOnEntity -> position
>2660	AdditiveExpression	position - ridingOnEntity -> position
>2661	PtrMemberAccess	ridingOnEntity -> position
>2662	Identifier	position
>2663	Identifier	ridingOnEntity
>2664	Identifier	position
>2665	Identifier	v
>2666	Condition	 
>2667	Identifier	ridingOnEntity
>2668	IdentifierDeclStatement	 
>2669	IdentifierDecl	v
>2670	Identifier	v
>2671	IdentifierDeclType	Vector
>2690	FunctionDef	Entity 
>2691	ParameterList	EV ev
>2692	Parameter	 
>2693	Identifier	ev
>2694	ParameterType	EV
>2695	ReturnType	int
>2696	CompoundStatement	 
>2697	ReturnStatement	 
>2698	ArrayIndexing	vs [ ev ]
>2699	Identifier	ev
>2700	Identifier	vs
>2708	FunctionDef	Entity 
>2709	ParameterList	EV ev
>2710	Parameter	 
>2711	Identifier	ev
>2712	ParameterType	EV
>2713	ReturnType	float
>2714	CompoundStatement	 
>2715	ReturnStatement	 
>2716	MultiplicativeExpression	float ( vs [ ev ] ) * 0.01f
>2717	PrimaryExpression	0.01f
>2718	CallExpression	float ( vs [ ev ] )
>2719	ArgumentList	vs [ ev ]
>2720	Argument	vs [ ev ]
>2721	ArrayIndexing	vs [ ev ]
>2722	Identifier	ev
>2723	Identifier	vs
>2724	Callee	float
>2725	Identifier	float
>2734	FunctionDef	Entity 
>2735	ParameterList	EV ev , int v
>2736	Parameter	 
>2737	Identifier	v
>2738	ParameterType	int
>2739	Parameter	 
>2740	Identifier	ev
>2741	ParameterType	EV
>2742	ReturnType	bool
>2743	CompoundStatement	 
>2744	ReturnStatement	 
>2745	EqualityExpression	vs [ ev ] == v
>2746	Identifier	v
>2747	ArrayIndexing	vs [ ev ]
>2748	Identifier	ev
>2749	Identifier	vs
>2758	FunctionDef	Entity 
>2759	ParameterList	EV ev , int v
>2760	Parameter	 
>2761	Identifier	v
>2762	ParameterType	int
>2763	Parameter	 
>2764	Identifier	ev
>2765	ParameterType	EV
>2766	ReturnType	void
>2767	CompoundStatement	 
>2768	ExpressionStatement	 
>2769	AssignmentExpr	vs [ ev ] = v
>2770	Identifier	v
>2771	ArrayIndexing	vs [ ev ]
>2772	Identifier	ev
>2773	Identifier	vs
>2782	FunctionDef	Entity 
>2783	ParameterList	EV ev , float v
>2784	Parameter	 
>2785	Identifier	v
>2786	ParameterType	float
>2787	Parameter	 
>2788	Identifier	ev
>2789	ParameterType	EV
>2790	ReturnType	void
>2791	CompoundStatement	 
>2792	ExpressionStatement	 
>2793	AssignmentExpr	vs [ ev ] = int ( v * 100.0f )
>2794	CallExpression	int ( v * 100.0f )
>2795	ArgumentList	v * 100.0f
>2796	Argument	v * 100.0f
>2797	MultiplicativeExpression	v * 100.0f
>2798	PrimaryExpression	100.0f
>2799	Identifier	v
>2800	Callee	int
>2801	Identifier	int
>2802	ArrayIndexing	vs [ ev ]
>2803	Identifier	ev
>2804	Identifier	vs
>2814	FunctionDef	Entity 
>2815	ParameterList	int tcheck , Vector usePos , TileVector hitTile
>2816	Parameter	 
>2817	Identifier	hitTile
>2818	ParameterType	TileVector
>2819	Parameter	 
>2820	Identifier	usePos
>2821	ParameterType	Vector
>2822	Parameter	 
>2823	Identifier	tcheck
>2824	ParameterType	int
>2825	ReturnType	bool
>2826	CompoundStatement	 
>2827	ReturnStatement	 
>2828	Identifier	clamped
>2829	IfStatement	if ( clamped )
>2830	CompoundStatement	 
>2831	ExpressionStatement	 
>2832	AssignmentExpr	vel2 = Vector ( 0 , 0 , 0 )
>2833	CallExpression	Vector ( 0 , 0 , 0 )
>2834	ArgumentList	0
>2835	Argument	0
>2836	PrimaryExpression	0
>2837	Argument	0
>2838	PrimaryExpression	0
>2839	Argument	0
>2840	PrimaryExpression	0
>2841	Callee	Vector
>2842	Identifier	Vector
>2843	Identifier	vel2
>2844	ExpressionStatement	 
>2845	AssignmentExpr	vel = Vector ( 0 , 0 , 0 )
>2846	CallExpression	Vector ( 0 , 0 , 0 )
>2847	ArgumentList	0
>2848	Argument	0
>2849	PrimaryExpression	0
>2850	Argument	0
>2851	PrimaryExpression	0
>2852	Argument	0
>2853	PrimaryExpression	0
>2854	Callee	Vector
>2855	Identifier	Vector
>2856	Identifier	vel
>2857	Condition	 
>2858	Identifier	clamped
>2859	IfStatement	if ( t > 0 )
>2860	ElseStatement	else
>2861	ExpressionStatement	 
>2862	AssignmentExpr	position = pos
>2863	Identifier	pos
>2864	Identifier	position
>2865	CompoundStatement	 
>2866	ExpressionStatement	 
>2867	CallExpression	setv ( EV_CLAMPING , 1 )
>2868	ArgumentList	EV_CLAMPING
>2869	Argument	1
>2870	PrimaryExpression	1
>2871	Argument	EV_CLAMPING
>2872	Identifier	EV_CLAMPING
>2873	Callee	setv
>2874	Identifier	setv
>2875	ExpressionStatement	 
>2876	CallExpression	rotateToSurfaceNormal ( 0 )
>2877	ArgumentList	0
>2878	Argument	0
>2879	PrimaryExpression	0
>2880	Callee	rotateToSurfaceNormal
>2881	Identifier	rotateToSurfaceNormal
>2882	ExpressionStatement	 
>2883	AssignmentExpr	position = pos
>2884	Identifier	pos
>2885	Identifier	position
>2886	ExpressionStatement	 
>2887	CallExpression	offset . interpolateTo ( n , t )
>2888	ArgumentList	n
>2889	Argument	t
>2890	Identifier	t
>2891	Argument	n
>2892	Identifier	n
>2893	Callee	offset . interpolateTo
>2894	MemberAccess	offset . interpolateTo
>2895	Identifier	interpolateTo
>2896	Identifier	offset
>2897	ExpressionStatement	 
>2898	AssignmentExpr	offset = diff
>2899	Identifier	diff
>2900	Identifier	offset
>2901	IdentifierDeclStatement	 
>2902	IdentifierDecl	diff = getWorldPosition ( ) - pos
>2903	AssignmentExpr	diff = getWorldPosition ( ) - pos
>2904	AdditiveExpression	getWorldPosition ( ) - pos
>2905	Identifier	pos
>2906	CallExpression	getWorldPosition ( )
>2907	ArgumentList	 
>2908	Callee	getWorldPosition
>2909	Identifier	getWorldPosition
>2910	Identifier	diff
>2911	Identifier	diff
>2912	IdentifierDeclType	Vector
>2913	ExpressionStatement	 
>2914	AssignmentExpr	n *= getv ( EV_WALLOUT )
>2915	CallExpression	getv ( EV_WALLOUT )
>2916	ArgumentList	EV_WALLOUT
>2917	Argument	EV_WALLOUT
>2918	Identifier	EV_WALLOUT
>2919	Callee	getv
>2920	Identifier	getv
>2921	Identifier	n
>2922	IdentifierDeclStatement	 
>2923	IdentifierDecl	n = dsq -> game -> getWallNormal ( pos )
>2924	AssignmentExpr	n = dsq -> game -> getWallNormal ( pos )
>2925	CallExpression	dsq -> game -> getWallNormal ( pos )
>2926	ArgumentList	pos
>2927	Argument	pos
>2928	Identifier	pos
>2929	Callee	dsq -> game -> getWallNormal
>2930	PtrMemberAccess	dsq -> game -> getWallNormal
>2931	Identifier	getWallNormal
>2932	PtrMemberAccess	dsq -> game
>2933	Identifier	game
>2934	Identifier	dsq
>2935	Identifier	n
>2936	Identifier	n
>2937	IdentifierDeclType	Vector
>2938	Condition	 
>2939	RelationalExpression	t > 0
>2940	PrimaryExpression	0
>2941	Identifier	t
>2942	IfStatement	if ( ! hitTile . isZero ( ) )
>2943	ElseStatement	else
>2944	CompoundStatement	 
>2945	IfStatement	if ( vel . getSquaredLength2D ( ) < 1 )
>2946	ElseStatement	else
>2947	CompoundStatement	 
>2948	IfStatement	if ( ! clamped )
>2949	GotoStatement	 
>2950	Identifier	longCheck
>2951	Condition	 
>2952	UnaryOp	! clamped
>2953	Identifier	clamped
>2954	UnaryOperator	!
>2955	ForStatement	for ( int i = 0 ; i < tcheck ; i ++ )
>2956	CompoundStatement	 
>2957	IfStatement	if ( dsq -> game -> isObstructed ( TileVector ( pos + v * TILE_SIZE * i ) ) )
>2958	CompoundStatement	 
>2959	BreakStatement	 
>2960	ExpressionStatement	 
>2961	AssignmentExpr	clamped = true
>2962	Identifier	true
>2963	Identifier	clamped
>2964	ExpressionStatement	 
>2965	AssignmentExpr	pos = t . worldVector ( )
>2966	CallExpression	t . worldVector ( )
>2967	ArgumentList	 
>2968	Callee	t . worldVector
>2969	MemberAccess	t . worldVector
>2970	Identifier	worldVector
>2971	Identifier	t
>2972	Identifier	pos
>2973	IdentifierDeclStatement	 
>2974	IdentifierDecl	t ( pos + v * TILE_SIZE * ( i - 1 ) )
>2975	AdditiveExpression	pos + v * TILE_SIZE * ( i - 1 )
>2976	MultiplicativeExpression	v * TILE_SIZE * ( i - 1 )
>2977	MultiplicativeExpression	TILE_SIZE * ( i - 1 )
>2978	AdditiveExpression	i - 1
>2979	PrimaryExpression	1
>2980	Identifier	i
>2981	Identifier	TILE_SIZE
>2982	Identifier	v
>2983	Identifier	pos
>2984	Identifier	t
>2985	IdentifierDeclType	TileVector
>2986	Condition	 
>2987	CallExpression	dsq -> game -> isObstructed ( TileVector ( pos + v * TILE_SIZE * i ) )
>2988	ArgumentList	TileVector ( pos + v * TILE_SIZE * i )
>2989	Argument	TileVector ( pos + v * TILE_SIZE * i )
>2990	CallExpression	TileVector ( pos + v * TILE_SIZE * i )
>2991	ArgumentList	pos + v * TILE_SIZE * i
>2992	Argument	pos + v * TILE_SIZE * i
>2993	AdditiveExpression	pos + v * TILE_SIZE * i
>2994	MultiplicativeExpression	v * TILE_SIZE * i
>2995	MultiplicativeExpression	TILE_SIZE * i
>2996	Identifier	i
>2997	Identifier	TILE_SIZE
>2998	Identifier	v
>2999	Identifier	pos
>3000	Callee	TileVector
>3001	Identifier	TileVector
>3002	Callee	dsq -> game -> isObstructed
>3003	PtrMemberAccess	dsq -> game -> isObstructed
>3004	Identifier	isObstructed
>3005	PtrMemberAccess	dsq -> game
>3006	Identifier	game
>3007	Identifier	dsq
>3008	IncDecOp	 
>3009	IncDec	++
>3010	Identifier	i
>3011	Condition	 
>3012	RelationalExpression	i < tcheck
>3013	Identifier	tcheck
>3014	Identifier	i
>3015	ForInit	 
>3016	IdentifierDeclStatement	int i = 0 ;
>3017	IdentifierDecl	i = 0
>3018	AssignmentExpr	i = 0
>3019	PrimaryExpression	0
>3020	Identifier	i
>3021	Identifier	i
>3022	IdentifierDeclType	int
>3023	ExpressionStatement	 
>3024	CallExpression	v . normalize2D ( )
>3025	ArgumentList	 
>3026	Callee	v . normalize2D
>3027	MemberAccess	v . normalize2D
>3028	Identifier	normalize2D
>3029	Identifier	v
>3030	IdentifierDeclStatement	 
>3031	IdentifierDecl	v = vel
>3032	AssignmentExpr	v = vel
>3033	Identifier	vel
>3034	Identifier	vel
>3035	Identifier	v
>3036	IdentifierDeclType	Vector
>3037	CompoundStatement	 
>3038	ForStatement	for ( int i = 0 ; i < tcheck ; i ++ )
>3039	CompoundStatement	 
>3040	IfStatement	if ( dsq -> game -> isObstructed ( TileVector ( pos + Vector ( bit , bit ) ) ) )
>3041	CompoundStatement	 
>3042	BreakStatement	 
>3043	ExpressionStatement	 
>3044	AssignmentExpr	clamped = true
>3045	Identifier	true
>3046	Identifier	clamped
>3047	ExpressionStatement	 
>3048	AssignmentExpr	pos = t . worldVector ( )
>3049	CallExpression	t . worldVector ( )
>3050	ArgumentList	 
>3051	Callee	t . worldVector
>3052	MemberAccess	t . worldVector
>3053	Identifier	worldVector
>3054	Identifier	t
>3055	Identifier	pos
>3056	IdentifierDeclStatement	 
>3057	IdentifierDecl	t ( pos + Vector ( backBit , backBit ) )
>3058	AdditiveExpression	pos + Vector ( backBit , backBit )
>3059	CallExpression	Vector ( backBit , backBit )
>3060	ArgumentList	backBit
>3061	Argument	backBit
>3062	Identifier	backBit
>3063	Argument	backBit
>3064	Identifier	backBit
>3065	Callee	Vector
>3066	Identifier	Vector
>3067	Identifier	pos
>3068	Identifier	t
>3069	IdentifierDeclType	TileVector
>3070	Condition	 
>3071	CallExpression	dsq -> game -> isObstructed ( TileVector ( pos + Vector ( bit , bit ) ) )
>3072	ArgumentList	TileVector ( pos + Vector ( bit , bit ) )
>3073	Argument	TileVector ( pos + Vector ( bit , bit ) )
>3074	CallExpression	TileVector ( pos + Vector ( bit , bit ) )
>3075	ArgumentList	pos + Vector ( bit , bit )
>3076	Argument	pos + Vector ( bit , bit )
>3077	AdditiveExpression	pos + Vector ( bit , bit )
>3078	CallExpression	Vector ( bit , bit )
>3079	ArgumentList	bit
>3080	Argument	bit
>3081	Identifier	bit
>3082	Argument	bit
>3083	Identifier	bit
>3084	Callee	Vector
>3085	Identifier	Vector
>3086	Identifier	pos
>3087	Callee	TileVector
>3088	Identifier	TileVector
>3089	Callee	dsq -> game -> isObstructed
>3090	PtrMemberAccess	dsq -> game -> isObstructed
>3091	Identifier	isObstructed
>3092	PtrMemberAccess	dsq -> game
>3093	Identifier	game
>3094	Identifier	dsq
>3095	IfStatement	if ( dsq -> game -> isObstructed ( TileVector ( pos + Vector ( bit , - bit ) ) ) )
>3096	CompoundStatement	 
>3097	BreakStatement	 
>3098	ExpressionStatement	 
>3099	AssignmentExpr	clamped = true
>3100	Identifier	true
>3101	Identifier	clamped
>3102	ExpressionStatement	 
>3103	AssignmentExpr	pos = t . worldVector ( )
>3104	CallExpression	t . worldVector ( )
>3105	ArgumentList	 
>3106	Callee	t . worldVector
>3107	MemberAccess	t . worldVector
>3108	Identifier	worldVector
>3109	Identifier	t
>3110	Identifier	pos
>3111	IdentifierDeclStatement	 
>3112	IdentifierDecl	t ( pos + Vector ( backBit , - backBit ) )
>3113	AdditiveExpression	pos + Vector ( backBit , - backBit )
>3114	CallExpression	Vector ( backBit , - backBit )
>3115	ArgumentList	backBit
>3116	Argument	- backBit
>3117	UnaryOp	- backBit
>3118	Identifier	backBit
>3119	UnaryOperator	-
>3120	Argument	backBit
>3121	Identifier	backBit
>3122	Callee	Vector
>3123	Identifier	Vector
>3124	Identifier	pos
>3125	Identifier	t
>3126	IdentifierDeclType	TileVector
>3127	Condition	 
>3128	CallExpression	dsq -> game -> isObstructed ( TileVector ( pos + Vector ( bit , - bit ) ) )
>3129	ArgumentList	TileVector ( pos + Vector ( bit , - bit ) )
>3130	Argument	TileVector ( pos + Vector ( bit , - bit ) )
>3131	CallExpression	TileVector ( pos + Vector ( bit , - bit ) )
>3132	ArgumentList	pos + Vector ( bit , - bit )
>3133	Argument	pos + Vector ( bit , - bit )
>3134	AdditiveExpression	pos + Vector ( bit , - bit )
>3135	CallExpression	Vector ( bit , - bit )
>3136	ArgumentList	bit
>3137	Argument	- bit
>3138	UnaryOp	- bit
>3139	Identifier	bit
>3140	UnaryOperator	-
>3141	Argument	bit
>3142	Identifier	bit
>3143	Callee	Vector
>3144	Identifier	Vector
>3145	Identifier	pos
>3146	Callee	TileVector
>3147	Identifier	TileVector
>3148	Callee	dsq -> game -> isObstructed
>3149	PtrMemberAccess	dsq -> game -> isObstructed
>3150	Identifier	isObstructed
>3151	PtrMemberAccess	dsq -> game
>3152	Identifier	game
>3153	Identifier	dsq
>3154	IfStatement	if ( dsq -> game -> isObstructed ( TileVector ( pos + Vector ( - bit , bit ) ) ) )
>3155	CompoundStatement	 
>3156	BreakStatement	 
>3157	ExpressionStatement	 
>3158	AssignmentExpr	clamped = true
>3159	Identifier	true
>3160	Identifier	clamped
>3161	ExpressionStatement	 
>3162	AssignmentExpr	pos = t . worldVector ( )
>3163	CallExpression	t . worldVector ( )
>3164	ArgumentList	 
>3165	Callee	t . worldVector
>3166	MemberAccess	t . worldVector
>3167	Identifier	worldVector
>3168	Identifier	t
>3169	Identifier	pos
>3170	IdentifierDeclStatement	 
>3171	IdentifierDecl	t ( pos + Vector ( - backBit , backBit ) )
>3172	AdditiveExpression	pos + Vector ( - backBit , backBit )
>3173	CallExpression	Vector ( - backBit , backBit )
>3174	ArgumentList	- backBit
>3175	Argument	backBit
>3176	Identifier	backBit
>3177	Argument	- backBit
>3178	UnaryOp	- backBit
>3179	Identifier	backBit
>3180	UnaryOperator	-
>3181	Callee	Vector
>3182	Identifier	Vector
>3183	Identifier	pos
>3184	Identifier	t
>3185	IdentifierDeclType	TileVector
>3186	Condition	 
>3187	CallExpression	dsq -> game -> isObstructed ( TileVector ( pos + Vector ( - bit , bit ) ) )
>3188	ArgumentList	TileVector ( pos + Vector ( - bit , bit ) )
>3189	Argument	TileVector ( pos + Vector ( - bit , bit ) )
>3190	CallExpression	TileVector ( pos + Vector ( - bit , bit ) )
>3191	ArgumentList	pos + Vector ( - bit , bit )
>3192	Argument	pos + Vector ( - bit , bit )
>3193	AdditiveExpression	pos + Vector ( - bit , bit )
>3194	CallExpression	Vector ( - bit , bit )
>3195	ArgumentList	- bit
>3196	Argument	bit
>3197	Identifier	bit
>3198	Argument	- bit
>3199	UnaryOp	- bit
>3200	Identifier	bit
>3201	UnaryOperator	-
>3202	Callee	Vector
>3203	Identifier	Vector
>3204	Identifier	pos
>3205	Callee	TileVector
>3206	Identifier	TileVector
>3207	Callee	dsq -> game -> isObstructed
>3208	PtrMemberAccess	dsq -> game -> isObstructed
>3209	Identifier	isObstructed
>3210	PtrMemberAccess	dsq -> game
>3211	Identifier	game
>3212	Identifier	dsq
>3213	IfStatement	if ( dsq -> game -> isObstructed ( TileVector ( pos + Vector ( - bit , - bit ) ) ) )
>3214	CompoundStatement	 
>3215	BreakStatement	 
>3216	ExpressionStatement	 
>3217	AssignmentExpr	clamped = true
>3218	Identifier	true
>3219	Identifier	clamped
>3220	ExpressionStatement	 
>3221	AssignmentExpr	pos = t . worldVector ( )
>3222	CallExpression	t . worldVector ( )
>3223	ArgumentList	 
>3224	Callee	t . worldVector
>3225	MemberAccess	t . worldVector
>3226	Identifier	worldVector
>3227	Identifier	t
>3228	Identifier	pos
>3229	IdentifierDeclStatement	 
>3230	IdentifierDecl	t ( pos + Vector ( - backBit , - backBit ) )
>3231	AdditiveExpression	pos + Vector ( - backBit , - backBit )
>3232	CallExpression	Vector ( - backBit , - backBit )
>3233	ArgumentList	- backBit
>3234	Argument	- backBit
>3235	UnaryOp	- backBit
>3236	Identifier	backBit
>3237	UnaryOperator	-
>3238	Argument	- backBit
>3239	UnaryOp	- backBit
>3240	Identifier	backBit
>3241	UnaryOperator	-
>3242	Callee	Vector
>3243	Identifier	Vector
>3244	Identifier	pos
>3245	Identifier	t
>3246	IdentifierDeclType	TileVector
>3247	Condition	 
>3248	CallExpression	dsq -> game -> isObstructed ( TileVector ( pos + Vector ( - bit , - bit ) ) )
>3249	ArgumentList	TileVector ( pos + Vector ( - bit , - bit ) )
>3250	Argument	TileVector ( pos + Vector ( - bit , - bit ) )
>3251	CallExpression	TileVector ( pos + Vector ( - bit , - bit ) )
>3252	ArgumentList	pos + Vector ( - bit , - bit )
>3253	Argument	pos + Vector ( - bit , - bit )
>3254	AdditiveExpression	pos + Vector ( - bit , - bit )
>3255	CallExpression	Vector ( - bit , - bit )
>3256	ArgumentList	- bit
>3257	Argument	- bit
>3258	UnaryOp	- bit
>3259	Identifier	bit
>3260	UnaryOperator	-
>3261	Argument	- bit
>3262	UnaryOp	- bit
>3263	Identifier	bit
>3264	UnaryOperator	-
>3265	Callee	Vector
>3266	Identifier	Vector
>3267	Identifier	pos
>3268	Callee	TileVector
>3269	Identifier	TileVector
>3270	Callee	dsq -> game -> isObstructed
>3271	PtrMemberAccess	dsq -> game -> isObstructed
>3272	Identifier	isObstructed
>3273	PtrMemberAccess	dsq -> game
>3274	Identifier	game
>3275	Identifier	dsq
>3276	IfStatement	if ( dsq -> game -> isObstructed ( TileVector ( pos + Vector ( 0 , bit ) ) ) )
>3277	CompoundStatement	 
>3278	BreakStatement	 
>3279	ExpressionStatement	 
>3280	AssignmentExpr	clamped = true
>3281	Identifier	true
>3282	Identifier	clamped
>3283	ExpressionStatement	 
>3284	AssignmentExpr	pos = t . worldVector ( )
>3285	CallExpression	t . worldVector ( )
>3286	ArgumentList	 
>3287	Callee	t . worldVector
>3288	MemberAccess	t . worldVector
>3289	Identifier	worldVector
>3290	Identifier	t
>3291	Identifier	pos
>3292	IdentifierDeclStatement	 
>3293	IdentifierDecl	t ( pos + Vector ( 0 , backBit ) )
>3294	AdditiveExpression	pos + Vector ( 0 , backBit )
>3295	CallExpression	Vector ( 0 , backBit )
>3296	ArgumentList	0
>3297	Argument	backBit
>3298	Identifier	backBit
>3299	Argument	0
>3300	PrimaryExpression	0
>3301	Callee	Vector
>3302	Identifier	Vector
>3303	Identifier	pos
>3304	Identifier	t
>3305	IdentifierDeclType	TileVector
>3306	Condition	 
>3307	CallExpression	dsq -> game -> isObstructed ( TileVector ( pos + Vector ( 0 , bit ) ) )
>3308	ArgumentList	TileVector ( pos + Vector ( 0 , bit ) )
>3309	Argument	TileVector ( pos + Vector ( 0 , bit ) )
>3310	CallExpression	TileVector ( pos + Vector ( 0 , bit ) )
>3311	ArgumentList	pos + Vector ( 0 , bit )
>3312	Argument	pos + Vector ( 0 , bit )
>3313	AdditiveExpression	pos + Vector ( 0 , bit )
>3314	CallExpression	Vector ( 0 , bit )
>3315	ArgumentList	0
>3316	Argument	bit
>3317	Identifier	bit
>3318	Argument	0
>3319	PrimaryExpression	0
>3320	Callee	Vector
>3321	Identifier	Vector
>3322	Identifier	pos
>3323	Callee	TileVector
>3324	Identifier	TileVector
>3325	Callee	dsq -> game -> isObstructed
>3326	PtrMemberAccess	dsq -> game -> isObstructed
>3327	Identifier	isObstructed
>3328	PtrMemberAccess	dsq -> game
>3329	Identifier	game
>3330	Identifier	dsq
>3331	IfStatement	if ( dsq -> game -> isObstructed ( TileVector ( pos + Vector ( bit , 0 ) ) ) )
>3332	CompoundStatement	 
>3333	BreakStatement	 
>3334	ExpressionStatement	 
>3335	AssignmentExpr	clamped = true
>3336	Identifier	true
>3337	Identifier	clamped
>3338	ExpressionStatement	 
>3339	AssignmentExpr	pos = t . worldVector ( )
>3340	CallExpression	t . worldVector ( )
>3341	ArgumentList	 
>3342	Callee	t . worldVector
>3343	MemberAccess	t . worldVector
>3344	Identifier	worldVector
>3345	Identifier	t
>3346	Identifier	pos
>3347	IdentifierDeclStatement	 
>3348	IdentifierDecl	t ( pos + Vector ( backBit , 0 ) )
>3349	AdditiveExpression	pos + Vector ( backBit , 0 )
>3350	CallExpression	Vector ( backBit , 0 )
>3351	ArgumentList	backBit
>3352	Argument	0
>3353	PrimaryExpression	0
>3354	Argument	backBit
>3355	Identifier	backBit
>3356	Callee	Vector
>3357	Identifier	Vector
>3358	Identifier	pos
>3359	Identifier	t
>3360	IdentifierDeclType	TileVector
>3361	Condition	 
>3362	CallExpression	dsq -> game -> isObstructed ( TileVector ( pos + Vector ( bit , 0 ) ) )
>3363	ArgumentList	TileVector ( pos + Vector ( bit , 0 ) )
>3364	Argument	TileVector ( pos + Vector ( bit , 0 ) )
>3365	CallExpression	TileVector ( pos + Vector ( bit , 0 ) )
>3366	ArgumentList	pos + Vector ( bit , 0 )
>3367	Argument	pos + Vector ( bit , 0 )
>3368	AdditiveExpression	pos + Vector ( bit , 0 )
>3369	CallExpression	Vector ( bit , 0 )
>3370	ArgumentList	bit
>3371	Argument	0
>3372	PrimaryExpression	0
>3373	Argument	bit
>3374	Identifier	bit
>3375	Callee	Vector
>3376	Identifier	Vector
>3377	Identifier	pos
>3378	Callee	TileVector
>3379	Identifier	TileVector
>3380	Callee	dsq -> game -> isObstructed
>3381	PtrMemberAccess	dsq -> game -> isObstructed
>3382	Identifier	isObstructed
>3383	PtrMemberAccess	dsq -> game
>3384	Identifier	game
>3385	Identifier	dsq
>3386	IfStatement	if ( dsq -> game -> isObstructed ( TileVector ( pos - Vector ( 0 , bit ) ) ) )
>3387	CompoundStatement	 
>3388	BreakStatement	 
>3389	ExpressionStatement	 
>3390	AssignmentExpr	clamped = true
>3391	Identifier	true
>3392	Identifier	clamped
>3393	ExpressionStatement	 
>3394	AssignmentExpr	pos = t . worldVector ( )
>3395	CallExpression	t . worldVector ( )
>3396	ArgumentList	 
>3397	Callee	t . worldVector
>3398	MemberAccess	t . worldVector
>3399	Identifier	worldVector
>3400	Identifier	t
>3401	Identifier	pos
>3402	IdentifierDeclStatement	 
>3403	IdentifierDecl	t ( pos - Vector ( 0 , backBit ) )
>3404	AdditiveExpression	pos - Vector ( 0 , backBit )
>3405	CallExpression	Vector ( 0 , backBit )
>3406	ArgumentList	0
>3407	Argument	backBit
>3408	Identifier	backBit
>3409	Argument	0
>3410	PrimaryExpression	0
>3411	Callee	Vector
>3412	Identifier	Vector
>3413	Identifier	pos
>3414	Identifier	t
>3415	IdentifierDeclType	TileVector
>3416	Condition	 
>3417	CallExpression	dsq -> game -> isObstructed ( TileVector ( pos - Vector ( 0 , bit ) ) )
>3418	ArgumentList	TileVector ( pos - Vector ( 0 , bit ) )
>3419	Argument	TileVector ( pos - Vector ( 0 , bit ) )
>3420	CallExpression	TileVector ( pos - Vector ( 0 , bit ) )
>3421	ArgumentList	pos - Vector ( 0 , bit )
>3422	Argument	pos - Vector ( 0 , bit )
>3423	AdditiveExpression	pos - Vector ( 0 , bit )
>3424	CallExpression	Vector ( 0 , bit )
>3425	ArgumentList	0
>3426	Argument	bit
>3427	Identifier	bit
>3428	Argument	0
>3429	PrimaryExpression	0
>3430	Callee	Vector
>3431	Identifier	Vector
>3432	Identifier	pos
>3433	Callee	TileVector
>3434	Identifier	TileVector
>3435	Callee	dsq -> game -> isObstructed
>3436	PtrMemberAccess	dsq -> game -> isObstructed
>3437	Identifier	isObstructed
>3438	PtrMemberAccess	dsq -> game
>3439	Identifier	game
>3440	Identifier	dsq
>3441	IfStatement	if ( dsq -> game -> isObstructed ( TileVector ( pos - Vector ( bit , 0 ) ) ) )
>3442	CompoundStatement	 
>3443	BreakStatement	 
>3444	ExpressionStatement	 
>3445	AssignmentExpr	clamped = true
>3446	Identifier	true
>3447	Identifier	clamped
>3448	ExpressionStatement	 
>3449	AssignmentExpr	pos = t . worldVector ( )
>3450	CallExpression	t . worldVector ( )
>3451	ArgumentList	 
>3452	Callee	t . worldVector
>3453	MemberAccess	t . worldVector
>3454	Identifier	worldVector
>3455	Identifier	t
>3456	Identifier	pos
>3457	IdentifierDeclStatement	 
>3458	IdentifierDecl	t ( pos - Vector ( backBit , 0 ) )
>3459	AdditiveExpression	pos - Vector ( backBit , 0 )
>3460	CallExpression	Vector ( backBit , 0 )
>3461	ArgumentList	backBit
>3462	Argument	0
>3463	PrimaryExpression	0
>3464	Argument	backBit
>3465	Identifier	backBit
>3466	Callee	Vector
>3467	Identifier	Vector
>3468	Identifier	pos
>3469	Identifier	t
>3470	IdentifierDeclType	TileVector
>3471	Condition	 
>3472	CallExpression	dsq -> game -> isObstructed ( TileVector ( pos - Vector ( bit , 0 ) ) )
>3473	ArgumentList	TileVector ( pos - Vector ( bit , 0 ) )
>3474	Argument	TileVector ( pos - Vector ( bit , 0 ) )
>3475	CallExpression	TileVector ( pos - Vector ( bit , 0 ) )
>3476	ArgumentList	pos - Vector ( bit , 0 )
>3477	Argument	pos - Vector ( bit , 0 )
>3478	AdditiveExpression	pos - Vector ( bit , 0 )
>3479	CallExpression	Vector ( bit , 0 )
>3480	ArgumentList	bit
>3481	Argument	0
>3482	PrimaryExpression	0
>3483	Argument	bit
>3484	Identifier	bit
>3485	Callee	Vector
>3486	Identifier	Vector
>3487	Identifier	pos
>3488	Callee	TileVector
>3489	Identifier	TileVector
>3490	Callee	dsq -> game -> isObstructed
>3491	PtrMemberAccess	dsq -> game -> isObstructed
>3492	Identifier	isObstructed
>3493	PtrMemberAccess	dsq -> game
>3494	Identifier	game
>3495	Identifier	dsq
>3496	IdentifierDeclStatement	 
>3497	IdentifierDecl	backBit = ( i - 1 ) * TILE_SIZE
>3498	AssignmentExpr	backBit = ( i - 1 ) * TILE_SIZE
>3499	MultiplicativeExpression	( i - 1 ) * TILE_SIZE
>3500	Identifier	TILE_SIZE
>3501	AdditiveExpression	i - 1
>3502	PrimaryExpression	1
>3503	Identifier	i
>3504	Identifier	backBit
>3505	Identifier	backBit
>3506	IdentifierDeclType	int
>3507	IdentifierDeclStatement	 
>3508	IdentifierDecl	bit = i * TILE_SIZE
>3509	AssignmentExpr	bit = i * TILE_SIZE
>3510	MultiplicativeExpression	i * TILE_SIZE
>3511	Identifier	TILE_SIZE
>3512	Identifier	i
>3513	Identifier	bit
>3514	Identifier	bit
>3515	IdentifierDeclType	int
>3516	IncDecOp	 
>3517	IncDec	++
>3518	Identifier	i
>3519	Condition	 
>3520	RelationalExpression	i < tcheck
>3521	Identifier	tcheck
>3522	Identifier	i
>3523	ForInit	 
>3524	IdentifierDeclStatement	int i = 0 ;
>3525	IdentifierDecl	i = 0
>3526	AssignmentExpr	i = 0
>3527	PrimaryExpression	0
>3528	Identifier	i
>3529	Identifier	i
>3530	IdentifierDeclType	int
>3531	Label	 
>3532	Identifier	longCheck
>3533	Condition	 
>3534	RelationalExpression	vel . getSquaredLength2D ( ) < 1
>3535	PrimaryExpression	1
>3536	CallExpression	vel . getSquaredLength2D ( )
>3537	ArgumentList	 
>3538	Callee	vel . getSquaredLength2D
>3539	MemberAccess	vel . getSquaredLength2D
>3540	Identifier	getSquaredLength2D
>3541	Identifier	vel
>3542	CompoundStatement	 
>3543	ExpressionStatement	 
>3544	AssignmentExpr	clamped = true
>3545	Identifier	true
>3546	Identifier	clamped
>3547	ExpressionStatement	 
>3548	AssignmentExpr	pos = hitTile . worldVector ( )
>3549	CallExpression	hitTile . worldVector ( )
>3550	ArgumentList	 
>3551	Callee	hitTile . worldVector
>3552	MemberAccess	hitTile . worldVector
>3553	Identifier	worldVector
>3554	Identifier	hitTile
>3555	Identifier	pos
>3556	Condition	 
>3557	UnaryOp	! hitTile . isZero ( )
>3558	CallExpression	hitTile . isZero ( )
>3559	ArgumentList	 
>3560	Callee	hitTile . isZero
>3561	MemberAccess	hitTile . isZero
>3562	Identifier	isZero
>3563	Identifier	hitTile
>3564	UnaryOperator	!
>3565	IdentifierDeclStatement	 
>3566	IdentifierDecl	pos = TileVector ( usePos ) . worldVector ( )
>3567	AssignmentExpr	pos = TileVector ( usePos ) . worldVector ( )
>3568	CallExpression	TileVector ( usePos ) . worldVector ( )
>3569	ArgumentList	 
>3570	Callee	TileVector ( usePos ) . worldVector
>3571	MemberAccess	TileVector ( usePos ) . worldVector
>3572	Identifier	worldVector
>3573	CallExpression	TileVector ( usePos )
>3574	ArgumentList	usePos
>3575	Argument	usePos
>3576	Identifier	usePos
>3577	Callee	TileVector
>3578	Identifier	TileVector
>3579	Identifier	pos
>3580	Identifier	pos
>3581	IdentifierDeclType	Vector
>3582	ExpressionStatement	 
>3583	CallExpression	burstTimer . stop ( )
>3584	ArgumentList	 
>3585	Callee	burstTimer . stop
>3586	MemberAccess	burstTimer . stop
>3587	Identifier	stop
>3588	Identifier	burstTimer
>3589	ExpressionStatement	 
>3590	CallExpression	setv ( EV_CRAWLING , 1 )
>3591	ArgumentList	EV_CRAWLING
>3592	Argument	1
>3593	PrimaryExpression	1
>3594	Argument	EV_CRAWLING
>3595	Identifier	EV_CRAWLING
>3596	Callee	setv
>3597	Identifier	setv
>3598	IdentifierDeclStatement	 
>3599	IdentifierDecl	clamped = false
>3600	AssignmentExpr	clamped = false
>3601	Identifier	false
>3602	Identifier	false
>3603	Identifier	clamped
>3604	IdentifierDeclType	bool
>3605	IfStatement	if ( tcheck == 0 )
>3606	ExpressionStatement	 
>3607	AssignmentExpr	tcheck = 40
>3608	PrimaryExpression	40
>3609	Identifier	tcheck
>3610	Condition	 
>3611	EqualityExpression	tcheck == 0
>3612	PrimaryExpression	0
>3613	Identifier	tcheck
>3614	IfStatement	if ( usePos . isZero ( ) )
>3615	ExpressionStatement	 
>3616	AssignmentExpr	usePos = position
>3617	Identifier	position
>3618	Identifier	usePos
>3619	Condition	 
>3620	CallExpression	usePos . isZero ( )
>3621	ArgumentList	 
>3622	Callee	usePos . isZero
>3623	MemberAccess	usePos . isZero
>3624	Identifier	isZero
>3625	Identifier	usePos
>3626	IdentifierDeclStatement	 
>3627	IdentifierDecl	t = getvf ( EV_CLAMPTRANSF )
>3628	AssignmentExpr	t = getvf ( EV_CLAMPTRANSF )
>3629	CallExpression	getvf ( EV_CLAMPTRANSF )
>3630	ArgumentList	EV_CLAMPTRANSF
>3631	Argument	EV_CLAMPTRANSF
>3632	Identifier	EV_CLAMPTRANSF
>3633	Callee	getvf
>3634	Identifier	getvf
>3635	Identifier	t
>3636	Identifier	t
>3637	IdentifierDeclType	float
>3683	FunctionDef	Entity 
>3684	ParameterList	float a , int type
>3685	Parameter	 
>3686	Identifier	type
>3687	ParameterType	int
>3688	Parameter	 
>3689	Identifier	a
>3690	ParameterType	float
>3691	ReturnType	void
>3692	CompoundStatement	 
>3693	IfStatement	if ( ! entityDead )
>3694	CompoundStatement	 
>3695	ExpressionStatement	 
>3696	CallExpression	onHeal ( type )
>3697	ArgumentList	type
>3698	Argument	type
>3699	Identifier	type
>3700	Callee	onHeal
>3701	Identifier	onHeal
>3702	ExpressionStatement	 
>3703	CallExpression	onHealthChange ( a )
>3704	ArgumentList	a
>3705	Argument	a
>3706	Identifier	a
>3707	Callee	onHealthChange
>3708	Identifier	onHealthChange
>3709	IfStatement	if ( health > maxHealth )
>3710	ExpressionStatement	 
>3711	AssignmentExpr	health = maxHealth
>3712	Identifier	maxHealth
>3713	Identifier	health
>3714	Condition	 
>3715	RelationalExpression	health > maxHealth
>3716	Identifier	maxHealth
>3717	Identifier	health
>3718	ExpressionStatement	 
>3719	AssignmentExpr	health += a
>3720	Identifier	a
>3721	Identifier	health
>3722	Condition	 
>3723	UnaryOp	! entityDead
>3724	Identifier	entityDead
>3725	UnaryOperator	!
>3734	FunctionDef	Entity 
>3735	ParameterList	float a
>3736	Parameter	 
>3737	Identifier	a
>3738	ParameterType	float
>3739	ReturnType	void
>3740	CompoundStatement	 
>3741	ExpressionStatement	 
>3742	CallExpression	onHealthChange ( a )
>3743	ArgumentList	a
>3744	Argument	a
>3745	Identifier	a
>3746	Callee	onHealthChange
>3747	Identifier	onHealthChange
>3748	IfStatement	if ( getState ( ) != STATE_IDLE )
>3749	ExpressionStatement	 
>3750	CallExpression	perform ( STATE_IDLE )
>3751	ArgumentList	STATE_IDLE
>3752	Argument	STATE_IDLE
>3753	Identifier	STATE_IDLE
>3754	Callee	perform
>3755	Identifier	perform
>3756	Condition	 
>3757	EqualityExpression	getState ( ) != STATE_IDLE
>3758	Identifier	STATE_IDLE
>3759	CallExpression	getState ( )
>3760	ArgumentList	 
>3761	Callee	getState
>3762	Identifier	getState
>3763	ExpressionStatement	 
>3764	CallExpression	heal ( a )
>3765	ArgumentList	a
>3766	Argument	a
>3767	Identifier	a
>3768	Callee	heal
>3769	Identifier	heal
>3770	ExpressionStatement	 
>3771	AssignmentExpr	health = 0
>3772	PrimaryExpression	0
>3773	Identifier	health
>3774	ExpressionStatement	 
>3775	AssignmentExpr	entityDead = false
>3776	Identifier	false
>3777	Identifier	entityDead
>3787	FunctionDef	Entity 
>3788	ParameterList	 
>3789	ReturnType	bool
>3790	CompoundStatement	 
>3791	ReturnStatement	 
>3792	AndExpression	eatType != EAT_NONE && ( lastDamage . damageType == DT_AVATAR_BITE || lastDamage . damageType == DT_\
>3793	OrExpression	lastDamage . damageType == DT_AVATAR_BITE || lastDamage . damageType == DT_AVATAR_PETBITE
>3794	EqualityExpression	lastDamage . damageType == DT_AVATAR_PETBITE
>3795	Identifier	DT_AVATAR_PETBITE
>3796	MemberAccess	lastDamage . damageType
>3797	Identifier	damageType
>3798	Identifier	lastDamage
>3799	EqualityExpression	lastDamage . damageType == DT_AVATAR_BITE
>3800	Identifier	DT_AVATAR_BITE
>3801	MemberAccess	lastDamage . damageType
>3802	Identifier	damageType
>3803	Identifier	lastDamage
>3804	EqualityExpression	eatType != EAT_NONE
>3805	Identifier	EAT_NONE
>3806	Identifier	eatType
>3816	FunctionDef	Entity 
>3817	ParameterList	float manaBallEnergy , bool die
>3818	Parameter	 
>3819	Identifier	die
>3820	ParameterType	bool
>3821	Parameter	 
>3822	Identifier	manaBallEnergy
>3823	ParameterType	float
>3824	ReturnType	void
>3825	CompoundStatement	 
>3826	IfStatement	if ( ingredientData )
>3827	CompoundStatement	 
>3828	ExpressionStatement	 
>3829	CallExpression	dsq -> game -> spawnIngredientFromEntity ( this , ingredientData )
>3830	ArgumentList	this
>3831	Argument	ingredientData
>3832	Identifier	ingredientData
>3833	Argument	this
>3834	Identifier	this
>3835	Callee	dsq -> game -> spawnIngredientFromEntity
>3836	PtrMemberAccess	dsq -> game -> spawnIngredientFromEntity
>3837	Identifier	spawnIngredientFromEntity
>3838	PtrMemberAccess	dsq -> game
>3839	Identifier	game
>3840	Identifier	dsq
>3841	Condition	 
>3842	Identifier	ingredientData
>3843	ExpressionStatement	 
>3844	AssignmentExpr	activationType = ACT_NONE
>3845	Identifier	ACT_NONE
>3846	Identifier	activationType
>3847	IfStatement	if ( deathScene || ! isGoingToBeEaten ( ) )
>3848	ElseStatement	else
>3849	CompoundStatement	 
>3850	ExpressionStatement	 
>3851	AssignmentExpr	stickToNaijasHead = true
>3852	Identifier	true
>3853	Identifier	stickToNaijasHead
>3854	ExpressionStatement	 
>3855	CallExpression	scale . interpolateTo ( Vector ( 0 , 0 ) , 1 )
>3856	ArgumentList	Vector ( 0 , 0 )
>3857	Argument	1
>3858	PrimaryExpression	1
>3859	Argument	Vector ( 0 , 0 )
>3860	CallExpression	Vector ( 0 , 0 )
>3861	ArgumentList	0
>3862	Argument	0
>3863	PrimaryExpression	0
>3864	Argument	0
>3865	PrimaryExpression	0
>3866	Callee	Vector
>3867	Identifier	Vector
>3868	Callee	scale . interpolateTo
>3869	MemberAccess	scale . interpolateTo
>3870	Identifier	interpolateTo
>3871	Identifier	scale
>3872	IfStatement	if ( die )
>3873	ElseStatement	else
>3874	CompoundStatement	 
>3875	ExpressionStatement	 
>3876	CallExpression	alpha . interpolateTo ( 0.01 , 1 )
>3877	ArgumentList	0.01
>3878	Argument	1
>3879	PrimaryExpression	1
>3880	Argument	0.01
>3881	PrimaryExpression	0.01
>3882	Callee	alpha . interpolateTo
>3883	MemberAccess	alpha . interpolateTo
>3884	Identifier	interpolateTo
>3885	Identifier	alpha
>3886	CompoundStatement	 
>3887	ExpressionStatement	 
>3888	AssignmentExpr	fadeAlphaWithLife = true
>3889	Identifier	true
>3890	Identifier	fadeAlphaWithLife
>3891	ExpressionStatement	 
>3892	CallExpression	setDecayRate ( 1 )
>3893	ArgumentList	1
>3894	Argument	1
>3895	PrimaryExpression	1
>3896	Callee	setDecayRate
>3897	Identifier	setDecayRate
>3898	ExpressionStatement	 
>3899	CallExpression	setLife ( 1 )
>3900	ArgumentList	1
>3901	Argument	1
>3902	PrimaryExpression	1
>3903	Callee	setLife
>3904	Identifier	setLife
>3905	Condition	 
>3906	Identifier	die
>3907	CompoundStatement	 
>3908	IfStatement	if ( die )
>3909	ElseStatement	else
>3910	CompoundStatement	 
>3911	ExpressionStatement	 
>3912	CallExpression	alpha . interpolateTo ( 0.01 , 1 )
>3913	ArgumentList	0.01
>3914	Argument	1
>3915	PrimaryExpression	1
>3916	Argument	0.01
>3917	PrimaryExpression	0.01
>3918	Callee	alpha . interpolateTo
>3919	MemberAccess	alpha . interpolateTo
>3920	Identifier	interpolateTo
>3921	Identifier	alpha
>3922	CompoundStatement	 
>3923	ExpressionStatement	 
>3924	AssignmentExpr	fadeAlphaWithLife = true
>3925	Identifier	true
>3926	Identifier	fadeAlphaWithLife
>3927	ExpressionStatement	 
>3928	CallExpression	setDecayRate ( 4 )
>3929	ArgumentList	4
>3930	Argument	4
>3931	PrimaryExpression	4
>3932	Callee	setDecayRate
>3933	Identifier	setDecayRate
>3934	ExpressionStatement	 
>3935	CallExpression	setLife ( 1 )
>3936	ArgumentList	1
>3937	Argument	1
>3938	PrimaryExpression	1
>3939	Callee	setLife
>3940	Identifier	setLife
>3941	Condition	 
>3942	Identifier	die
>3943	IfStatement	if ( manaBallEnergy )
>3944	CompoundStatement	 
>3945	IfStatement	if ( chance ( dropChance ) )
>3946	CompoundStatement	 
>3947	ExpressionStatement	 
>3948	CallExpression	dsq -> game -> spawnManaBall ( position , manaBallEnergy )
>3949	ArgumentList	position
>3950	Argument	manaBallEnergy
>3951	Identifier	manaBallEnergy
>3952	Argument	position
>3953	Identifier	position
>3954	Callee	dsq -> game -> spawnManaBall
>3955	PtrMemberAccess	dsq -> game -> spawnManaBall
>3956	Identifier	spawnManaBall
>3957	PtrMemberAccess	dsq -> game
>3958	Identifier	game
>3959	Identifier	dsq
>3960	Condition	 
>3961	CallExpression	chance ( dropChance )
>3962	ArgumentList	dropChance
>3963	Argument	dropChance
>3964	Identifier	dropChance
>3965	Callee	chance
>3966	Identifier	chance
>3967	Condition	 
>3968	Identifier	manaBallEnergy
>3969	Condition	 
>3970	OrExpression	deathScene || ! isGoingToBeEaten ( )
>3971	UnaryOp	! isGoingToBeEaten ( )
>3972	CallExpression	isGoingToBeEaten ( )
>3973	ArgumentList	 
>3974	Callee	isGoingToBeEaten
>3975	Identifier	isGoingToBeEaten
>3976	UnaryOperator	!
>3977	Identifier	deathScene
>4001	FunctionDef	Entity 
>4002	ParameterList	int sz , int type , TileVector * hitTile
>4003	Parameter	 
>4004	Identifier	hitTile
>4005	ParameterType	TileVector *
>4006	Parameter	 
>4007	Identifier	type
>4008	ParameterType	int
>4009	Parameter	 
>4010	Identifier	sz
>4011	ParameterType	int
>4012	ReturnType	bool
>4013	CompoundStatement	 
>4014	ReturnStatement	 
>4015	Identifier	v
>4016	IfStatement	if ( hitTile )
>4017	ExpressionStatement	 
>4018	AssignmentExpr	* hitTile = test
>4019	Identifier	test
>4020	UnaryOp	* hitTile
>4021	Identifier	hitTile
>4022	UnaryOperator	*
>4023	Condition	 
>4024	Identifier	hitTile
>4025	SwitchStatement	switch ( type )
>4026	CompoundStatement	 
>4027	BreakStatement	 
>4028	CompoundStatement	 
>4029	ForStatement	for ( int d = 0 ; d <= sz ; d ++ )
>4030	CompoundStatement	 
>4031	IfStatement	if ( dsq -> game -> isObstructed ( test ) )
>4032	CompoundStatement	 
>4033	BreakStatement	 
>4034	ExpressionStatement	 
>4035	AssignmentExpr	v = true
>4036	Identifier	true
>4037	Identifier	v
>4038	Condition	 
>4039	CallExpression	dsq -> game -> isObstructed ( test )
>4040	ArgumentList	test
>4041	Argument	test
>4042	Identifier	test
>4043	Callee	dsq -> game -> isObstructed
>4044	PtrMemberAccess	dsq -> game -> isObstructed
>4045	Identifier	isObstructed
>4046	PtrMemberAccess	dsq -> game
>4047	Identifier	game
>4048	Identifier	dsq
>4049	ExpressionStatement	 
>4050	AssignmentExpr	test = TileVector ( t . x + d , t . y + d )
>4051	CallExpression	TileVector ( t . x + d , t . y + d )
>4052	ArgumentList	t . x + d
>4053	Argument	t . y + d
>4054	AdditiveExpression	t . y + d
>4055	Identifier	d
>4056	MemberAccess	t . y
>4057	Identifier	y
>4058	Identifier	t
>4059	Argument	t . x + d
>4060	AdditiveExpression	t . x + d
>4061	Identifier	d
>4062	MemberAccess	t . x
>4063	Identifier	x
>4064	Identifier	t
>4065	Callee	TileVector
>4066	Identifier	TileVector
>4067	Identifier	test
>4068	IfStatement	if ( dsq -> game -> isObstructed ( test ) )
>4069	CompoundStatement	 
>4070	BreakStatement	 
>4071	ExpressionStatement	 
>4072	AssignmentExpr	v = true
>4073	Identifier	true
>4074	Identifier	v
>4075	Condition	 
>4076	CallExpression	dsq -> game -> isObstructed ( test )
>4077	ArgumentList	test
>4078	Argument	test
>4079	Identifier	test
>4080	Callee	dsq -> game -> isObstructed
>4081	PtrMemberAccess	dsq -> game -> isObstructed
>4082	Identifier	isObstructed
>4083	PtrMemberAccess	dsq -> game
>4084	Identifier	game
>4085	Identifier	dsq
>4086	ExpressionStatement	 
>4087	AssignmentExpr	test = TileVector ( t . x + d , t . y - d )
>4088	CallExpression	TileVector ( t . x + d , t . y - d )
>4089	ArgumentList	t . x + d
>4090	Argument	t . y - d
>4091	AdditiveExpression	t . y - d
>4092	Identifier	d
>4093	MemberAccess	t . y
>4094	Identifier	y
>4095	Identifier	t
>4096	Argument	t . x + d
>4097	AdditiveExpression	t . x + d
>4098	Identifier	d
>4099	MemberAccess	t . x
>4100	Identifier	x
>4101	Identifier	t
>4102	Callee	TileVector
>4103	Identifier	TileVector
>4104	Identifier	test
>4105	IfStatement	if ( dsq -> game -> isObstructed ( test ) )
>4106	CompoundStatement	 
>4107	BreakStatement	 
>4108	ExpressionStatement	 
>4109	AssignmentExpr	v = true
>4110	Identifier	true
>4111	Identifier	v
>4112	Condition	 
>4113	CallExpression	dsq -> game -> isObstructed ( test )
>4114	ArgumentList	test
>4115	Argument	test
>4116	Identifier	test
>4117	Callee	dsq -> game -> isObstructed
>4118	PtrMemberAccess	dsq -> game -> isObstructed
>4119	Identifier	isObstructed
>4120	PtrMemberAccess	dsq -> game
>4121	Identifier	game
>4122	Identifier	dsq
>4123	ExpressionStatement	 
>4124	AssignmentExpr	test = TileVector ( t . x - d , t . y + d )
>4125	CallExpression	TileVector ( t . x - d , t . y + d )
>4126	ArgumentList	t . x - d
>4127	Argument	t . y + d
>4128	AdditiveExpression	t . y + d
>4129	Identifier	d
>4130	MemberAccess	t . y
>4131	Identifier	y
>4132	Identifier	t
>4133	Argument	t . x - d
>4134	AdditiveExpression	t . x - d
>4135	Identifier	d
>4136	MemberAccess	t . x
>4137	Identifier	x
>4138	Identifier	t
>4139	Callee	TileVector
>4140	Identifier	TileVector
>4141	Identifier	test
>4142	IfStatement	if ( dsq -> game -> isObstructed ( test ) )
>4143	CompoundStatement	 
>4144	BreakStatement	 
>4145	ExpressionStatement	 
>4146	AssignmentExpr	v = true
>4147	Identifier	true
>4148	Identifier	v
>4149	Condition	 
>4150	CallExpression	dsq -> game -> isObstructed ( test )
>4151	ArgumentList	test
>4152	Argument	test
>4153	Identifier	test
>4154	Callee	dsq -> game -> isObstructed
>4155	PtrMemberAccess	dsq -> game -> isObstructed
>4156	Identifier	isObstructed
>4157	PtrMemberAccess	dsq -> game
>4158	Identifier	game
>4159	Identifier	dsq
>4160	ExpressionStatement	 
>4161	AssignmentExpr	test = TileVector ( t . x - d , t . y - d )
>4162	CallExpression	TileVector ( t . x - d , t . y - d )
>4163	ArgumentList	t . x - d
>4164	Argument	t . y - d
>4165	AdditiveExpression	t . y - d
>4166	Identifier	d
>4167	MemberAccess	t . y
>4168	Identifier	y
>4169	Identifier	t
>4170	Argument	t . x - d
>4171	AdditiveExpression	t . x - d
>4172	Identifier	d
>4173	MemberAccess	t . x
>4174	Identifier	x
>4175	Identifier	t
>4176	Callee	TileVector
>4177	Identifier	TileVector
>4178	Identifier	test
>4179	IfStatement	if ( dsq -> game -> isObstructed ( test ) )
>4180	CompoundStatement	 
>4181	BreakStatement	 
>4182	ExpressionStatement	 
>4183	AssignmentExpr	v = true
>4184	Identifier	true
>4185	Identifier	v
>4186	Condition	 
>4187	CallExpression	dsq -> game -> isObstructed ( test )
>4188	ArgumentList	test
>4189	Argument	test
>4190	Identifier	test
>4191	Callee	dsq -> game -> isObstructed
>4192	PtrMemberAccess	dsq -> game -> isObstructed
>4193	Identifier	isObstructed
>4194	PtrMemberAccess	dsq -> game
>4195	Identifier	game
>4196	Identifier	dsq
>4197	ExpressionStatement	 
>4198	AssignmentExpr	test = TileVector ( t . x , t . y - d )
>4199	CallExpression	TileVector ( t . x , t . y - d )
>4200	ArgumentList	t . x
>4201	Argument	t . y - d
>4202	AdditiveExpression	t . y - d
>4203	Identifier	d
>4204	MemberAccess	t . y
>4205	Identifier	y
>4206	Identifier	t
>4207	Argument	t . x
>4208	MemberAccess	t . x
>4209	Identifier	x
>4210	Identifier	t
>4211	Callee	TileVector
>4212	Identifier	TileVector
>4213	Identifier	test
>4214	IfStatement	if ( dsq -> game -> isObstructed ( test ) )
>4215	CompoundStatement	 
>4216	BreakStatement	 
>4217	ExpressionStatement	 
>4218	AssignmentExpr	v = true
>4219	Identifier	true
>4220	Identifier	v
>4221	Condition	 
>4222	CallExpression	dsq -> game -> isObstructed ( test )
>4223	ArgumentList	test
>4224	Argument	test
>4225	Identifier	test
>4226	Callee	dsq -> game -> isObstructed
>4227	PtrMemberAccess	dsq -> game -> isObstructed
>4228	Identifier	isObstructed
>4229	PtrMemberAccess	dsq -> game
>4230	Identifier	game
>4231	Identifier	dsq
>4232	ExpressionStatement	 
>4233	AssignmentExpr	test = TileVector ( t . x , t . y + d )
>4234	CallExpression	TileVector ( t . x , t . y + d )
>4235	ArgumentList	t . x
>4236	Argument	t . y + d
>4237	AdditiveExpression	t . y + d
>4238	Identifier	d
>4239	MemberAccess	t . y
>4240	Identifier	y
>4241	Identifier	t
>4242	Argument	t . x
>4243	MemberAccess	t . x
>4244	Identifier	x
>4245	Identifier	t
>4246	Callee	TileVector
>4247	Identifier	TileVector
>4248	Identifier	test
>4249	IfStatement	if ( dsq -> game -> isObstructed ( test ) )
>4250	CompoundStatement	 
>4251	BreakStatement	 
>4252	ExpressionStatement	 
>4253	AssignmentExpr	v = true
>4254	Identifier	true
>4255	Identifier	v
>4256	Condition	 
>4257	CallExpression	dsq -> game -> isObstructed ( test )
>4258	ArgumentList	test
>4259	Argument	test
>4260	Identifier	test
>4261	Callee	dsq -> game -> isObstructed
>4262	PtrMemberAccess	dsq -> game -> isObstructed
>4263	Identifier	isObstructed
>4264	PtrMemberAccess	dsq -> game
>4265	Identifier	game
>4266	Identifier	dsq
>4267	ExpressionStatement	 
>4268	AssignmentExpr	test = TileVector ( t . x - d , t . y )
>4269	CallExpression	TileVector ( t . x - d , t . y )
>4270	ArgumentList	t . x - d
>4271	Argument	t . y
>4272	MemberAccess	t . y
>4273	Identifier	y
>4274	Identifier	t
>4275	Argument	t . x - d
>4276	AdditiveExpression	t . x - d
>4277	Identifier	d
>4278	MemberAccess	t . x
>4279	Identifier	x
>4280	Identifier	t
>4281	Callee	TileVector
>4282	Identifier	TileVector
>4283	Identifier	test
>4284	IfStatement	if ( dsq -> game -> isObstructed ( test ) )
>4285	CompoundStatement	 
>4286	BreakStatement	 
>4287	ExpressionStatement	 
>4288	AssignmentExpr	v = true
>4289	Identifier	true
>4290	Identifier	v
>4291	Condition	 
>4292	CallExpression	dsq -> game -> isObstructed ( test )
>4293	ArgumentList	test
>4294	Argument	test
>4295	Identifier	test
>4296	Callee	dsq -> game -> isObstructed
>4297	PtrMemberAccess	dsq -> game -> isObstructed
>4298	Identifier	isObstructed
>4299	PtrMemberAccess	dsq -> game
>4300	Identifier	game
>4301	Identifier	dsq
>4302	ExpressionStatement	 
>4303	AssignmentExpr	test = TileVector ( t . x + d , t . y )
>4304	CallExpression	TileVector ( t . x + d , t . y )
>4305	ArgumentList	t . x + d
>4306	Argument	t . y
>4307	MemberAccess	t . y
>4308	Identifier	y
>4309	Identifier	t
>4310	Argument	t . x + d
>4311	AdditiveExpression	t . x + d
>4312	Identifier	d
>4313	MemberAccess	t . x
>4314	Identifier	x
>4315	Identifier	t
>4316	Callee	TileVector
>4317	Identifier	TileVector
>4318	Identifier	test
>4319	IncDecOp	 
>4320	IncDec	++
>4321	Identifier	d
>4322	Condition	 
>4323	RelationalExpression	d <= sz
>4324	Identifier	sz
>4325	Identifier	d
>4326	ForInit	 
>4327	IdentifierDeclStatement	int d = 0 ;
>4328	IdentifierDecl	d = 0
>4329	AssignmentExpr	d = 0
>4330	PrimaryExpression	0
>4331	Identifier	d
>4332	Identifier	d
>4333	IdentifierDeclType	int
>4334	Label	 
>4335	Identifier	OBSCHECK_8DIR
>4336	BreakStatement	 
>4337	CompoundStatement	 
>4338	ForStatement	for ( int y = 0 ; y <= sz ; y ++ )
>4339	CompoundStatement	 
>4340	IfStatement	if ( dsq -> game -> isObstructed ( test ) )
>4341	CompoundStatement	 
>4342	BreakStatement	 
>4343	ExpressionStatement	 
>4344	AssignmentExpr	v = true
>4345	Identifier	true
>4346	Identifier	v
>4347	Condition	 
>4348	CallExpression	dsq -> game -> isObstructed ( test )
>4349	ArgumentList	test
>4350	Argument	test
>4351	Identifier	test
>4352	Callee	dsq -> game -> isObstructed
>4353	PtrMemberAccess	dsq -> game -> isObstructed
>4354	Identifier	isObstructed
>4355	PtrMemberAccess	dsq -> game
>4356	Identifier	game
>4357	Identifier	dsq
>4358	ExpressionStatement	 
>4359	AssignmentExpr	test = TileVector ( t . x , t . y + y )
>4360	CallExpression	TileVector ( t . x , t . y + y )
>4361	ArgumentList	t . x
>4362	Argument	t . y + y
>4363	AdditiveExpression	t . y + y
>4364	Identifier	y
>4365	MemberAccess	t . y
>4366	Identifier	y
>4367	Identifier	t
>4368	Argument	t . x
>4369	MemberAccess	t . x
>4370	Identifier	x
>4371	Identifier	t
>4372	Callee	TileVector
>4373	Identifier	TileVector
>4374	Identifier	test
>4375	IncDecOp	 
>4376	IncDec	++
>4377	Identifier	y
>4378	Condition	 
>4379	RelationalExpression	y <= sz
>4380	Identifier	sz
>4381	Identifier	y
>4382	ForInit	 
>4383	IdentifierDeclStatement	int y = 0 ;
>4384	IdentifierDecl	y = 0
>4385	AssignmentExpr	y = 0
>4386	PrimaryExpression	0
>4387	Identifier	y
>4388	Identifier	y
>4389	IdentifierDeclType	int
>4390	Label	 
>4391	Identifier	OBSCHECK_DOWN
>4392	BreakStatement	 
>4393	CompoundStatement	 
>4394	ForStatement	for ( int y = - sz ; y <= sz ; y ++ )
>4395	CompoundStatement	 
>4396	IfStatement	if ( dsq -> game -> isObstructed ( test ) )
>4397	CompoundStatement	 
>4398	BreakStatement	 
>4399	ExpressionStatement	 
>4400	AssignmentExpr	v = true
>4401	Identifier	true
>4402	Identifier	v
>4403	Condition	 
>4404	CallExpression	dsq -> game -> isObstructed ( test )
>4405	ArgumentList	test
>4406	Argument	test
>4407	Identifier	test
>4408	Callee	dsq -> game -> isObstructed
>4409	PtrMemberAccess	dsq -> game -> isObstructed
>4410	Identifier	isObstructed
>4411	PtrMemberAccess	dsq -> game
>4412	Identifier	game
>4413	Identifier	dsq
>4414	ExpressionStatement	 
>4415	AssignmentExpr	test = TileVector ( t . x , t . y + y )
>4416	CallExpression	TileVector ( t . x , t . y + y )
>4417	ArgumentList	t . x
>4418	Argument	t . y + y
>4419	AdditiveExpression	t . y + y
>4420	Identifier	y
>4421	MemberAccess	t . y
>4422	Identifier	y
>4423	Identifier	t
>4424	Argument	t . x
>4425	MemberAccess	t . x
>4426	Identifier	x
>4427	Identifier	t
>4428	Callee	TileVector
>4429	Identifier	TileVector
>4430	Identifier	test
>4431	IncDecOp	 
>4432	IncDec	++
>4433	Identifier	y
>4434	Condition	 
>4435	RelationalExpression	y <= sz
>4436	Identifier	sz
>4437	Identifier	y
>4438	ForInit	 
>4439	IdentifierDeclStatement	int y = - sz ;
>4440	IdentifierDecl	y = - sz
>4441	AssignmentExpr	y = - sz
>4442	UnaryOp	- sz
>4443	Identifier	sz
>4444	UnaryOperator	-
>4445	Identifier	y
>4446	Identifier	y
>4447	IdentifierDeclType	int
>4448	ForStatement	for ( int x = - sz ; x <= sz ; x ++ )
>4449	CompoundStatement	 
>4450	IfStatement	if ( dsq -> game -> isObstructed ( test ) )
>4451	CompoundStatement	 
>4452	BreakStatement	 
>4453	ExpressionStatement	 
>4454	AssignmentExpr	v = true
>4455	Identifier	true
>4456	Identifier	v
>4457	Condition	 
>4458	CallExpression	dsq -> game -> isObstructed ( test )
>4459	ArgumentList	test
>4460	Argument	test
>4461	Identifier	test
>4462	Callee	dsq -> game -> isObstructed
>4463	PtrMemberAccess	dsq -> game -> isObstructed
>4464	Identifier	isObstructed
>4465	PtrMemberAccess	dsq -> game
>4466	Identifier	game
>4467	Identifier	dsq
>4468	ExpressionStatement	 
>4469	AssignmentExpr	test = TileVector ( t . x + x , t . y )
>4470	CallExpression	TileVector ( t . x + x , t . y )
>4471	ArgumentList	t . x + x
>4472	Argument	t . y
>4473	MemberAccess	t . y
>4474	Identifier	y
>4475	Identifier	t
>4476	Argument	t . x + x
>4477	AdditiveExpression	t . x + x
>4478	Identifier	x
>4479	MemberAccess	t . x
>4480	Identifier	x
>4481	Identifier	t
>4482	Callee	TileVector
>4483	Identifier	TileVector
>4484	Identifier	test
>4485	IncDecOp	 
>4486	IncDec	++
>4487	Identifier	x
>4488	Condition	 
>4489	RelationalExpression	x <= sz
>4490	Identifier	sz
>4491	Identifier	x
>4492	ForInit	 
>4493	IdentifierDeclStatement	int x = - sz ;
>4494	IdentifierDecl	x = - sz
>4495	AssignmentExpr	x = - sz
>4496	UnaryOp	- sz
>4497	Identifier	sz
>4498	UnaryOperator	-
>4499	Identifier	x
>4500	Identifier	x
>4501	IdentifierDeclType	int
>4502	Label	 
>4503	Identifier	OBSCHECK_4DIR
>4504	BreakStatement	 
>4505	CompoundStatement	 
>4506	ForStatement	for ( int x = - sz ; x <= sz ; x ++ )
>4507	CompoundStatement	 
>4508	ForStatement	for ( int y = - sz ; y <= sz ; y ++ )
>4509	CompoundStatement	 
>4510	IfStatement	if ( dsq -> game -> isObstructed ( test ) )
>4511	CompoundStatement	 
>4512	BreakStatement	 
>4513	ExpressionStatement	 
>4514	AssignmentExpr	v = true
>4515	Identifier	true
>4516	Identifier	v
>4517	Condition	 
>4518	CallExpression	dsq -> game -> isObstructed ( test )
>4519	ArgumentList	test
>4520	Argument	test
>4521	Identifier	test
>4522	Callee	dsq -> game -> isObstructed
>4523	PtrMemberAccess	dsq -> game -> isObstructed
>4524	Identifier	isObstructed
>4525	PtrMemberAccess	dsq -> game
>4526	Identifier	game
>4527	Identifier	dsq
>4528	ExpressionStatement	 
>4529	AssignmentExpr	test = TileVector ( t . x + x , t . y + y )
>4530	CallExpression	TileVector ( t . x + x , t . y + y )
>4531	ArgumentList	t . x + x
>4532	Argument	t . y + y
>4533	AdditiveExpression	t . y + y
>4534	Identifier	y
>4535	MemberAccess	t . y
>4536	Identifier	y
>4537	Identifier	t
>4538	Argument	t . x + x
>4539	AdditiveExpression	t . x + x
>4540	Identifier	x
>4541	MemberAccess	t . x
>4542	Identifier	x
>4543	Identifier	t
>4544	Callee	TileVector
>4545	Identifier	TileVector
>4546	Identifier	test
>4547	IncDecOp	 
>4548	IncDec	++
>4549	Identifier	y
>4550	Condition	 
>4551	RelationalExpression	y <= sz
>4552	Identifier	sz
>4553	Identifier	y
>4554	ForInit	 
>4555	IdentifierDeclStatement	int y = - sz ;
>4556	IdentifierDecl	y = - sz
>4557	AssignmentExpr	y = - sz
>4558	UnaryOp	- sz
>4559	Identifier	sz
>4560	UnaryOperator	-
>4561	Identifier	y
>4562	Identifier	y
>4563	IdentifierDeclType	int
>4564	IncDecOp	 
>4565	IncDec	++
>4566	Identifier	x
>4567	Condition	 
>4568	RelationalExpression	x <= sz
>4569	Identifier	sz
>4570	Identifier	x
>4571	ForInit	 
>4572	IdentifierDeclStatement	int x = - sz ;
>4573	IdentifierDecl	x = - sz
>4574	AssignmentExpr	x = - sz
>4575	UnaryOp	- sz
>4576	Identifier	sz
>4577	UnaryOperator	-
>4578	Identifier	x
>4579	Identifier	x
>4580	IdentifierDeclType	int
>4581	Label	 
>4582	Identifier	OBSCHECK_RANGE
>4583	Condition	 
>4584	Identifier	type
>4585	IdentifierDeclStatement	 
>4586	IdentifierDecl	test
>4587	Identifier	test
>4588	IdentifierDeclType	TileVector
>4589	IdentifierDeclStatement	 
>4590	IdentifierDecl	t ( position )
>4591	Identifier	position
>4592	Identifier	t
>4593	IdentifierDeclType	TileVector
>4594	IdentifierDeclStatement	 
>4595	IdentifierDecl	v = false
>4596	AssignmentExpr	v = false
>4597	Identifier	false
>4598	Identifier	false
>4599	Identifier	v
>4600	IdentifierDeclType	bool
>4625	FunctionDef	Entity 
>4626	ParameterList	int radius , float dmg , const Vector & override , float speed , float pushTime , Vector collidePos
>4627	Parameter	 
>4628	Identifier	collidePos
>4629	ParameterType	Vector
>4630	Parameter	 
>4631	Identifier	pushTime
>4632	ParameterType	float
>4633	Parameter	 
>4634	Identifier	speed
>4635	ParameterType	float
>4636	Parameter	 
>4637	Identifier	override
>4638	ParameterType	const Vector &
>4639	Parameter	 
>4640	Identifier	dmg
>4641	ParameterType	float
>4642	Parameter	 
>4643	Identifier	radius
>4644	ParameterType	int
>4645	ReturnType	bool
>4646	CompoundStatement	 
>4647	ReturnStatement	 
>4648	Identifier	false
>4649	IfStatement	if ( radius == 0 || ( dsq -> game -> avatar -> getWorldPosition ( ) - usePosition ) . getSquaredLength2D ( ) < sqr ( \
>4650	CompoundStatement	 
>4651	ReturnStatement	 
>4652	Identifier	true
>4653	IfStatement	if ( pushTime > 0 && speed > 0 )
>4654	ElseStatement	else
>4655	IfStatement	if ( speed > 0 )
>4656	CompoundStatement	 
>4657	ExpressionStatement	 
>4658	AssignmentExpr	dsq -> game -> avatar -> vel += diff
>4659	Identifier	diff
>4660	PtrMemberAccess	dsq -> game -> avatar -> vel
>4661	Identifier	vel
>4662	PtrMemberAccess	dsq -> game -> avatar
>4663	Identifier	avatar
>4664	PtrMemberAccess	dsq -> game
>4665	Identifier	game
>4666	Identifier	dsq
>4667	ExpressionStatement	 
>4668	CallExpression	diff . setLength2D ( speed )
>4669	ArgumentList	speed
>4670	Argument	speed
>4671	Identifier	speed
>4672	Callee	diff . setLength2D
>4673	MemberAccess	diff . setLength2D
>4674	Identifier	setLength2D
>4675	Identifier	diff
>4676	IdentifierDeclStatement	 
>4677	IdentifierDecl	diff = dsq -> game -> avatar -> position - position
>4678	AssignmentExpr	diff = dsq -> game -> avatar -> position - position
>4679	AdditiveExpression	dsq -> game -> avatar -> position - position
>4680	Identifier	position
>4681	PtrMemberAccess	dsq -> game -> avatar -> position
>4682	Identifier	position
>4683	PtrMemberAccess	dsq -> game -> avatar
>4684	Identifier	avatar
>4685	PtrMemberAccess	dsq -> game
>4686	Identifier	game
>4687	Identifier	dsq
>4688	Identifier	diff
>4689	Identifier	diff
>4690	IdentifierDeclType	Vector
>4691	ExpressionStatement	 
>4692	CallExpression	dsq -> game -> avatar -> fallOffWall ( )
>4693	ArgumentList	 
>4694	Callee	dsq -> game -> avatar -> fallOffWall
>4695	PtrMemberAccess	dsq -> game -> avatar -> fallOffWall
>4696	Identifier	fallOffWall
>4697	PtrMemberAccess	dsq -> game -> avatar
>4698	Identifier	avatar
>4699	PtrMemberAccess	dsq -> game
>4700	Identifier	game
>4701	Identifier	dsq
>4702	Condition	 
>4703	RelationalExpression	speed > 0
>4704	PrimaryExpression	0
>4705	Identifier	speed
>4706	CompoundStatement	 
>4707	ExpressionStatement	 
>4708	CallExpression	dsq -> game -> avatar -> push ( diff , pushTime , speed , dmg )
>4709	ArgumentList	diff
>4710	Argument	dmg
>4711	Identifier	dmg
>4712	Argument	speed
>4713	Identifier	speed
>4714	Argument	pushTime
>4715	Identifier	pushTime
>4716	Argument	diff
>4717	Identifier	diff
>4718	Callee	dsq -> game -> avatar -> push
>4719	PtrMemberAccess	dsq -> game -> avatar -> push
>4720	Identifier	push
>4721	PtrMemberAccess	dsq -> game -> avatar
>4722	Identifier	avatar
>4723	PtrMemberAccess	dsq -> game
>4724	Identifier	game
>4725	Identifier	dsq
>4726	ExpressionStatement	 
>4727	CallExpression	diff . setLength2D ( speed )
>4728	ArgumentList	speed
>4729	Argument	speed
>4730	Identifier	speed
>4731	Callee	diff . setLength2D
>4732	MemberAccess	diff . setLength2D
>4733	Identifier	setLength2D
>4734	Identifier	diff
>4735	IdentifierDeclStatement	 
>4736	IdentifierDecl	diff = dsq -> game -> avatar -> position - position
>4737	AssignmentExpr	diff = dsq -> game -> avatar -> position - position
>4738	AdditiveExpression	dsq -> game -> avatar -> position - position
>4739	Identifier	position
>4740	PtrMemberAccess	dsq -> game -> avatar -> position
>4741	Identifier	position
>4742	PtrMemberAccess	dsq -> game -> avatar
>4743	Identifier	avatar
>4744	PtrMemberAccess	dsq -> game
>4745	Identifier	game
>4746	Identifier	dsq
>4747	Identifier	diff
>4748	Identifier	diff
>4749	IdentifierDeclType	Vector
>4750	Condition	 
>4751	AndExpression	pushTime > 0 && speed > 0
>4752	RelationalExpression	speed > 0
>4753	PrimaryExpression	0
>4754	Identifier	speed
>4755	RelationalExpression	pushTime > 0
>4756	PrimaryExpression	0
>4757	Identifier	pushTime
>4758	IfStatement	if ( dmg > 0 )
>4759	CompoundStatement	 
>4760	ExpressionStatement	 
>4761	CallExpression	dsq -> game -> avatar -> damage ( d )
>4762	ArgumentList	d
>4763	Argument	d
>4764	Identifier	d
>4765	Callee	dsq -> game -> avatar -> damage
>4766	PtrMemberAccess	dsq -> game -> avatar -> damage
>4767	Identifier	damage
>4768	PtrMemberAccess	dsq -> game -> avatar
>4769	Identifier	avatar
>4770	PtrMemberAccess	dsq -> game
>4771	Identifier	game
>4772	Identifier	dsq
>4773	ExpressionStatement	 
>4774	AssignmentExpr	d . attacker = this
>4775	Identifier	this
>4776	MemberAccess	d . attacker
>4777	Identifier	attacker
>4778	Identifier	d
>4779	ExpressionStatement	 
>4780	AssignmentExpr	d . damage = dmg
>4781	Identifier	dmg
>4782	MemberAccess	d . damage
>4783	Identifier	damage
>4784	Identifier	d
>4785	IdentifierDeclStatement	 
>4786	IdentifierDecl	d
>4787	Identifier	d
>4788	IdentifierDeclType	DamageData
>4789	Condition	 
>4790	RelationalExpression	dmg > 0
>4791	PrimaryExpression	0
>4792	Identifier	dmg
>4793	Condition	 
>4794	OrExpression	radius == 0 || ( dsq -> game -> avatar -> getWorldPosition ( ) - usePosition ) . getSquaredLength2D ( ) < \
>4795	RelationalExpression	( dsq -> game -> avatar -> getWorldPosition ( ) - usePosition ) . getSquaredLength2D ( ) < sqr ( radius + \
>4796	CallExpression	sqr ( radius + dsq -> game -> avatar -> collideRadius )
>4797	ArgumentList	radius + dsq -> game -> avatar -> collideRadius
>4798	Argument	radius + dsq -> game -> avatar -> collideRadius
>4799	AdditiveExpression	radius + dsq -> game -> avatar -> collideRadius
>4800	PtrMemberAccess	dsq -> game -> avatar -> collideRadius
>4801	Identifier	collideRadius
>4802	PtrMemberAccess	dsq -> game -> avatar
>4803	Identifier	avatar
>4804	PtrMemberAccess	dsq -> game
>4805	Identifier	game
>4806	Identifier	dsq
>4807	Identifier	radius
>4808	Callee	sqr
>4809	Identifier	sqr
>4810	CallExpression	( dsq -> game -> avatar -> getWorldPosition ( ) - usePosition ) . getSquaredLength2D ( )
>4811	ArgumentList	 
>4812	Callee	( dsq -> game -> avatar -> getWorldPosition ( ) - usePosition ) . getSquaredLength2D
>4813	MemberAccess	( dsq -> game -> avatar -> getWorldPosition ( ) - usePosition ) . getSquaredLength2D
>4814	Identifier	getSquaredLength2D
>4815	AdditiveExpression	dsq -> game -> avatar -> getWorldPosition ( ) - usePosition
>4816	Identifier	usePosition
>4817	CallExpression	dsq -> game -> avatar -> getWorldPosition ( )
>4818	ArgumentList	 
>4819	Callee	dsq -> game -> avatar -> getWorldPosition
>4820	PtrMemberAccess	dsq -> game -> avatar -> getWorldPosition
>4821	Identifier	getWorldPosition
>4822	PtrMemberAccess	dsq -> game -> avatar
>4823	Identifier	avatar
>4824	PtrMemberAccess	dsq -> game
>4825	Identifier	game
>4826	Identifier	dsq
>4827	EqualityExpression	radius == 0
>4828	PrimaryExpression	0
>4829	Identifier	radius
>4830	IfStatement	if ( ! collidePos . isZero ( ) )
>4831	CompoundStatement	 
>4832	ExpressionStatement	 
>4833	AssignmentExpr	usePosition = getWorldCollidePosition ( collidePos )
>4834	CallExpression	getWorldCollidePosition ( collidePos )
>4835	ArgumentList	collidePos
>4836	Argument	collidePos
>4837	Identifier	collidePos
>4838	Callee	getWorldCollidePosition
>4839	Identifier	getWorldCollidePosition
>4840	Identifier	usePosition
>4841	Condition	 
>4842	UnaryOp	! collidePos . isZero ( )
>4843	CallExpression	collidePos . isZero ( )
>4844	ArgumentList	 
>4845	Callee	collidePos . isZero
>4846	MemberAccess	collidePos . isZero
>4847	Identifier	isZero
>4848	Identifier	collidePos
>4849	UnaryOperator	!
>4850	IfStatement	if ( override . x != - 1 )
>4851	CompoundStatement	 
>4852	ExpressionStatement	 
>4853	AssignmentExpr	usePosition = override
>4854	Identifier	override
>4855	Identifier	usePosition
>4856	Condition	 
>4857	EqualityExpression	override . x != - 1
>4858	UnaryOp	- 1
>4859	PrimaryExpression	1
>4860	UnaryOperator	-
>4861	MemberAccess	override . x
>4862	Identifier	x
>4863	Identifier	override
>4864	IdentifierDeclStatement	 
>4865	IdentifierDecl	usePosition = position
>4866	AssignmentExpr	usePosition = position
>4867	Identifier	position
>4868	Identifier	position
>4869	Identifier	usePosition
>4870	IdentifierDeclType	Vector
>4871	IfStatement	if ( isv ( EV_BEASTBURST , 1 ) && isDamageTarget ( DT_AVATAR_BITE ) && dsq -> continuity . form == FORM_BEAST && \
>4872	CompoundStatement	 
>4873	ReturnStatement	 
>4874	Identifier	false
>4875	Condition	 
>4876	AndExpression	isv ( EV_BEASTBURST , 1 ) && isDamageTarget ( DT_AVATAR_BITE ) && dsq -> continuity . form == FORM_BEAST && \
>4877	AndExpression	isDamageTarget ( DT_AVATAR_BITE ) && dsq -> continuity . form == FORM_BEAST && dsq -> game -> avatar \
>4878	AndExpression	dsq -> continuity . form == FORM_BEAST && dsq -> game -> avatar -> bursting
>4879	PtrMemberAccess	dsq -> game -> avatar -> bursting
>4880	Identifier	bursting
>4881	PtrMemberAccess	dsq -> game -> avatar
>4882	Identifier	avatar
>4883	PtrMemberAccess	dsq -> game
>4884	Identifier	game
>4885	Identifier	dsq
>4886	EqualityExpression	dsq -> continuity . form == FORM_BEAST
>4887	Identifier	FORM_BEAST
>4888	MemberAccess	dsq -> continuity . form
>4889	Identifier	form
>4890	PtrMemberAccess	dsq -> continuity
>4891	Identifier	continuity
>4892	Identifier	dsq
>4893	CallExpression	isDamageTarget ( DT_AVATAR_BITE )
>4894	ArgumentList	DT_AVATAR_BITE
>4895	Argument	DT_AVATAR_BITE
>4896	Identifier	DT_AVATAR_BITE
>4897	Callee	isDamageTarget
>4898	Identifier	isDamageTarget
>4899	CallExpression	isv ( EV_BEASTBURST , 1 )
>4900	ArgumentList	EV_BEASTBURST
>4901	Argument	1
>4902	PrimaryExpression	1
>4903	Argument	EV_BEASTBURST
>4904	Identifier	EV_BEASTBURST
>4905	Callee	isv
>4906	Identifier	isv
>4957	FunctionDef	Entity 
>4958	ParameterList	 
>4959	ReturnType	void
>4960	CompoundStatement	 
>4961	ExpressionStatement	 
>4962	AssignmentExpr	fhScale = 0
>4963	PrimaryExpression	0
>4964	Identifier	fhScale
>4965	ExpressionStatement	 
>4966	AssignmentExpr	_fh = ! _fh
>4967	UnaryOp	! _fh
>4968	Identifier	_fh
>4969	UnaryOperator	!
>4970	Identifier	_fh
>4971	ExpressionStatement	 
>4972	CallExpression	flipScale . interpolateTo ( Vector ( 1 , 1 ) , sct )
>4973	ArgumentList	Vector ( 1 , 1 )
>4974	Argument	sct
>4975	Identifier	sct
>4976	Argument	Vector ( 1 , 1 )
>4977	CallExpression	Vector ( 1 , 1 )
>4978	ArgumentList	1
>4979	Argument	1
>4980	PrimaryExpression	1
>4981	Argument	1
>4982	PrimaryExpression	1
>4983	Callee	Vector
>4984	Identifier	Vector
>4985	Callee	flipScale . interpolateTo
>4986	MemberAccess	flipScale . interpolateTo
>4987	Identifier	interpolateTo
>4988	Identifier	flipScale
>4997	FunctionDef	Entity 
>4998	ParameterList	 
>4999	ReturnType	void
>5000	CompoundStatement	 
>5001	IfStatement	if ( ! fhScale )
>5002	CompoundStatement	 
>5003	ExpressionStatement	 
>5004	AssignmentExpr	fhScale = 1
>5005	PrimaryExpression	1
>5006	Identifier	fhScale
>5007	ExpressionStatement	 
>5008	CallExpression	flipScale . interpolateTo ( Vector ( 0.6 , 1 ) , sct )
>5009	ArgumentList	Vector ( 0.6 , 1 )
>5010	Argument	sct
>5011	Identifier	sct
>5012	Argument	Vector ( 0.6 , 1 )
>5013	CallExpression	Vector ( 0.6 , 1 )
>5014	ArgumentList	0.6
>5015	Argument	1
>5016	PrimaryExpression	1
>5017	Argument	0.6
>5018	PrimaryExpression	0.6
>5019	Callee	Vector
>5020	Identifier	Vector
>5021	Callee	flipScale . interpolateTo
>5022	MemberAccess	flipScale . interpolateTo
>5023	Identifier	interpolateTo
>5024	Identifier	flipScale
>5025	ExpressionStatement	 
>5026	AssignmentExpr	flipScale = Vector ( 1 , 1 )
>5027	CallExpression	Vector ( 1 , 1 )
>5028	ArgumentList	1
>5029	Argument	1
>5030	PrimaryExpression	1
>5031	Argument	1
>5032	PrimaryExpression	1
>5033	Callee	Vector
>5034	Identifier	Vector
>5035	Identifier	flipScale
>5036	Condition	 
>5037	UnaryOp	! fhScale
>5038	Identifier	fhScale
>5039	UnaryOperator	!
>5040	ExpressionStatement	 
>5041	AssignmentExpr	_fh = ! _fh
>5042	UnaryOp	! _fh
>5043	Identifier	_fh
>5044	UnaryOperator	!
>5045	Identifier	_fh
>5046	IfStatement	if ( ! beautyFlip )
>5047	ReturnStatement	 
>5048	Condition	 
>5049	UnaryOp	! beautyFlip
>5050	Identifier	beautyFlip
>5051	UnaryOperator	!
>5061	FunctionDef	Entity 
>5062	ParameterList	 
>5063	ReturnType	void
>5064	CompoundStatement	 
>5065	IfStatement	if ( ( vel . x < - 5 && isfh ( ) ) || ( vel . x > 5 && ! isfh ( ) ) )
>5066	ExpressionStatement	 
>5067	CallExpression	flipHorizontal ( )
>5068	ArgumentList	 
>5069	Callee	flipHorizontal
>5070	Identifier	flipHorizontal
>5071	Condition	 
>5072	OrExpression	( vel . x < - 5 && isfh ( ) ) || ( vel . x > 5 && ! isfh ( ) )
>5073	AndExpression	vel . x > 5 && ! isfh ( )
>5074	UnaryOp	! isfh ( )
>5075	CallExpression	isfh ( )
>5076	ArgumentList	 
>5077	Callee	isfh
>5078	Identifier	isfh
>5079	UnaryOperator	!
>5080	RelationalExpression	vel . x > 5
>5081	PrimaryExpression	5
>5082	MemberAccess	vel . x
>5083	Identifier	x
>5084	Identifier	vel
>5085	AndExpression	vel . x < - 5 && isfh ( )
>5086	CallExpression	isfh ( )
>5087	ArgumentList	 
>5088	Callee	isfh
>5089	Identifier	isfh
>5090	RelationalExpression	vel . x < - 5
>5091	UnaryOp	- 5
>5092	PrimaryExpression	5
>5093	UnaryOperator	-
>5094	MemberAccess	vel . x
>5095	Identifier	x
>5096	Identifier	vel
>5103	FunctionDef	Entity 
>5104	ParameterList	float dt
>5105	Parameter	 
>5106	Identifier	dt
>5107	ParameterType	float
>5108	ReturnType	void
>5109	CompoundStatement	 
>5114	FunctionDef	Entity 
>5115	ParameterList	float dt
>5116	Parameter	 
>5117	Identifier	dt
>5118	ParameterType	float
>5119	ReturnType	void
>5120	CompoundStatement	 
>5121	ExpressionStatement	 
>5122	CallExpression	updateSoundPosition ( )
>5123	ArgumentList	 
>5124	Callee	updateSoundPosition
>5125	Identifier	updateSoundPosition
>5126	IfStatement	if ( vel . isNan ( ) )
>5127	ExpressionStatement	 
>5128	AssignmentExpr	vel = backupVel
>5129	Identifier	backupVel
>5130	Identifier	vel
>5131	Condition	 
>5132	CallExpression	vel . isNan ( )
>5133	ArgumentList	 
>5134	Callee	vel . isNan
>5135	MemberAccess	vel . isNan
>5136	Identifier	isNan
>5137	Identifier	vel
>5138	IfStatement	if ( position . isNan ( ) )
>5139	ExpressionStatement	 
>5140	AssignmentExpr	position = backupPos
>5141	Identifier	backupPos
>5142	Identifier	position
>5143	Condition	 
>5144	CallExpression	position . isNan ( )
>5145	ArgumentList	 
>5146	Callee	position . isNan
>5147	MemberAccess	position . isNan
>5148	Identifier	isNan
>5149	Identifier	position
>5150	ExpressionStatement	 
>5151	CallExpression	updateBoneLock ( )
>5152	ArgumentList	 
>5153	Callee	updateBoneLock
>5154	Identifier	updateBoneLock
>5155	IfStatement	if ( doUpdate && ! ( pauseFreeze && dsq -> game -> isPaused ( ) ) )
>5156	CompoundStatement	 
>5157	IfStatement	if ( frozenTimer > 0 )
>5158	CompoundStatement	 
>5159	IfStatement	if ( frozenTimer <= 0 )
>5160	CompoundStatement	 
>5161	ExpressionStatement	 
>5162	CallExpression	popBubble ( )
>5163	ArgumentList	 
>5164	Callee	popBubble
>5165	Identifier	popBubble
>5166	ExpressionStatement	 
>5167	AssignmentExpr	frozenTimer = 0
>5168	PrimaryExpression	0
>5169	Identifier	frozenTimer
>5170	Condition	 
>5171	RelationalExpression	frozenTimer <= 0
>5172	PrimaryExpression	0
>5173	Identifier	frozenTimer
>5174	ExpressionStatement	 
>5175	AssignmentExpr	frozenTimer -= dt
>5176	Identifier	dt
>5177	Identifier	frozenTimer
>5178	IfStatement	if ( bubble )
>5179	ExpressionStatement	 
>5180	AssignmentExpr	bubble -> position = this -> position
>5181	PtrMemberAccess	this -> position
>5182	Identifier	position
>5183	Identifier	this
>5184	PtrMemberAccess	bubble -> position
>5185	Identifier	position
>5186	Identifier	bubble
>5187	Condition	 
>5188	Identifier	bubble
>5189	ExpressionStatement	 
>5190	CallExpression	onUpdateFrozen ( dt )
>5191	ArgumentList	dt
>5192	Argument	dt
>5193	Identifier	dt
>5194	Callee	onUpdateFrozen
>5195	Identifier	onUpdateFrozen
>5196	Condition	 
>5197	RelationalExpression	frozenTimer > 0
>5198	PrimaryExpression	0
>5199	Identifier	frozenTimer
>5200	ExpressionStatement	 
>5201	CallExpression	StateMachine 
>5202	ArgumentList	dt
>5203	Argument	dt
>5204	Identifier	dt
>5205	Callee	StateMachine 
>5206	Identifier	StateMachine 
>5207	IfStatement	if ( dieTimer > 0 )
>5208	CompoundStatement	 
>5209	IfStatement	if ( dieTimer < 0 )
>5210	CompoundStatement	 
>5211	ExpressionStatement	 
>5212	AssignmentExpr	fadeAlphaWithLife = 1
>5213	PrimaryExpression	1
>5214	Identifier	fadeAlphaWithLife
>5215	ExpressionStatement	 
>5216	CallExpression	setDecayRate ( 1 )
>5217	ArgumentList	1
>5218	Argument	1
>5219	PrimaryExpression	1
>5220	Callee	setDecayRate
>5221	Identifier	setDecayRate
>5222	ExpressionStatement	 
>5223	CallExpression	setLife ( 1 )
>5224	ArgumentList	1
>5225	Argument	1
>5226	PrimaryExpression	1
>5227	Callee	setLife
>5228	Identifier	setLife
>5229	ExpressionStatement	 
>5230	AssignmentExpr	dieTimer = 0
>5231	PrimaryExpression	0
>5232	Identifier	dieTimer
>5233	Condition	 
>5234	RelationalExpression	dieTimer < 0
>5235	PrimaryExpression	0
>5236	Identifier	dieTimer
>5237	ExpressionStatement	 
>5238	AssignmentExpr	dieTimer -= dt
>5239	Identifier	dt
>5240	Identifier	dieTimer
>5241	Condition	 
>5242	RelationalExpression	dieTimer > 0
>5243	PrimaryExpression	0
>5244	Identifier	dieTimer
>5245	ExpressionStatement	 
>5246	CallExpression	vineDamageTimer . update ( dt )
>5247	ArgumentList	dt
>5248	Argument	dt
>5249	Identifier	dt
>5250	Callee	vineDamageTimer . update
>5251	MemberAccess	vineDamageTimer . update
>5252	Identifier	update
>5253	Identifier	vineDamageTimer
>5254	IfStatement	if ( ! multColor . isInterpolating ( ) )
>5255	CompoundStatement	 
>5256	ExpressionStatement	 
>5257	AssignmentExpr	multColor = Vector ( 1 , 1 , 1 )
>5258	CallExpression	Vector ( 1 , 1 , 1 )
>5259	ArgumentList	1
>5260	Argument	1
>5261	PrimaryExpression	1
>5262	Argument	1
>5263	PrimaryExpression	1
>5264	Argument	1
>5265	PrimaryExpression	1
>5266	Callee	Vector
>5267	Identifier	Vector
>5268	Identifier	multColor
>5269	Condition	 
>5270	UnaryOp	! multColor . isInterpolating ( )
>5271	CallExpression	multColor . isInterpolating ( )
>5272	ArgumentList	 
>5273	Callee	multColor . isInterpolating
>5274	MemberAccess	multColor . isInterpolating
>5275	Identifier	isInterpolating
>5276	Identifier	multColor
>5277	UnaryOperator	!
>5278	IfStatement	if ( damageTimer . updateCheck ( dt ) )
>5279	CompoundStatement	 
>5280	ExpressionStatement	 
>5281	AssignmentExpr	multColor = Vector ( 1 , 1 , 1 )
>5282	CallExpression	Vector ( 1 , 1 , 1 )
>5283	ArgumentList	1
>5284	Argument	1
>5285	PrimaryExpression	1
>5286	Argument	1
>5287	PrimaryExpression	1
>5288	Argument	1
>5289	PrimaryExpression	1
>5290	Callee	Vector
>5291	Identifier	Vector
>5292	Identifier	multColor
>5293	ExpressionStatement	 
>5294	CallExpression	multColor . stop ( )
>5295	ArgumentList	 
>5296	Callee	multColor . stop
>5297	MemberAccess	multColor . stop
>5298	Identifier	stop
>5299	Identifier	multColor
>5300	Condition	 
>5301	CallExpression	damageTimer . updateCheck ( dt )
>5302	ArgumentList	dt
>5303	Argument	dt
>5304	Identifier	dt
>5305	Callee	damageTimer . updateCheck
>5306	MemberAccess	damageTimer . updateCheck
>5307	Identifier	updateCheck
>5308	Identifier	damageTimer
>5309	ExpressionStatement	 
>5310	CallExpression	onAlwaysUpdate ( dt )
>5311	ArgumentList	dt
>5312	Argument	dt
>5313	Identifier	dt
>5314	Callee	onAlwaysUpdate
>5315	Identifier	onAlwaysUpdate
>5316	IfStatement	if ( frozenTimer == 0 || getState ( ) == STATE_PUSH )
>5317	ExpressionStatement	 
>5318	CallExpression	Quad 
>5319	ArgumentList	dt
>5320	Argument	dt
>5321	Identifier	dt
>5322	Callee	Quad 
>5323	Identifier	Quad 
>5324	Condition	 
>5325	OrExpression	frozenTimer == 0 || getState ( ) == STATE_PUSH
>5326	EqualityExpression	getState ( ) == STATE_PUSH
>5327	Identifier	STATE_PUSH
>5328	CallExpression	getState ( )
>5329	ArgumentList	 
>5330	Callee	getState
>5331	Identifier	getState
>5332	EqualityExpression	frozenTimer == 0
>5333	PrimaryExpression	0
>5334	Identifier	frozenTimer
>5335	IfStatement	if ( ! ( getEntityType ( ) == ET_AVATAR || getEntityType ( ) == ET_INGREDIENT ) )
>5336	CompoundStatement	 
>5337	IfStatement	if ( spiritFreeze && dsq -> game -> isWorldPaused ( ) )
>5338	CompoundStatement	 
>5339	ReturnStatement	 
>5340	Condition	 
>5341	AndExpression	spiritFreeze && dsq -> game -> isWorldPaused ( )
>5342	CallExpression	dsq -> game -> isWorldPaused ( )
>5343	ArgumentList	 
>5344	Callee	dsq -> game -> isWorldPaused
>5345	PtrMemberAccess	dsq -> game -> isWorldPaused
>5346	Identifier	isWorldPaused
>5347	PtrMemberAccess	dsq -> game
>5348	Identifier	game
>5349	Identifier	dsq
>5350	Identifier	spiritFreeze
>5351	Condition	 
>5352	UnaryOp	! ( getEntityType ( ) == ET_AVATAR || getEntityType ( ) == ET_INGREDIENT )
>5353	OrExpression	getEntityType ( ) == ET_AVATAR || getEntityType ( ) == ET_INGREDIENT
>5354	EqualityExpression	getEntityType ( ) == ET_INGREDIENT
>5355	Identifier	ET_INGREDIENT
>5356	CallExpression	getEntityType ( )
>5357	ArgumentList	 
>5358	Callee	getEntityType
>5359	Identifier	getEntityType
>5360	EqualityExpression	getEntityType ( ) == ET_AVATAR
>5361	Identifier	ET_AVATAR
>5362	CallExpression	getEntityType ( )
>5363	ArgumentList	 
>5364	Callee	getEntityType
>5365	Identifier	getEntityType
>5366	UnaryOperator	!
>5367	Condition	 
>5368	AndExpression	doUpdate && ! ( pauseFreeze && dsq -> game -> isPaused ( ) )
>5369	UnaryOp	! ( pauseFreeze && dsq -> game -> isPaused ( ) )
>5370	AndExpression	pauseFreeze && dsq -> game -> isPaused ( )
>5371	CallExpression	dsq -> game -> isPaused ( )
>5372	ArgumentList	 
>5373	Callee	dsq -> game -> isPaused
>5374	PtrMemberAccess	dsq -> game -> isPaused
>5375	Identifier	isPaused
>5376	PtrMemberAccess	dsq -> game
>5377	Identifier	game
>5378	Identifier	dsq
>5379	Identifier	pauseFreeze
>5380	UnaryOperator	!
>5381	Identifier	doUpdate
>5382	IdentifierDeclStatement	 
>5383	IdentifierDecl	doUpdate = ( updateCull < 0 || ( position - core -> screenCenter ) . isLength2DIn ( updateCull ) )
>5384	AssignmentExpr	doUpdate = ( updateCull < 0 || ( position - core -> screenCenter ) . isLength2DIn ( updateCull ) )
>5385	OrExpression	updateCull < 0 || ( position - core -> screenCenter ) . isLength2DIn ( updateCull )
>5386	CallExpression	( position - core -> screenCenter ) . isLength2DIn ( updateCull )
>5387	ArgumentList	updateCull
>5388	Argument	updateCull
>5389	Identifier	updateCull
>5390	Callee	( position - core -> screenCenter ) . isLength2DIn
>5391	MemberAccess	( position - core -> screenCenter ) . isLength2DIn
>5392	Identifier	isLength2DIn
>5393	AdditiveExpression	position - core -> screenCenter
>5394	PtrMemberAccess	core -> screenCenter
>5395	Identifier	screenCenter
>5396	Identifier	core
>5397	Identifier	position
>5398	RelationalExpression	updateCull < 0
>5399	PrimaryExpression	0
>5400	Identifier	updateCull
>5401	Identifier	doUpdate
>5402	Identifier	doUpdate
>5403	IdentifierDeclType	bool
>5404	IdentifierDeclStatement	 
>5405	IdentifierDecl	backupVel = vel
>5406	AssignmentExpr	backupVel = vel
>5407	Identifier	vel
>5408	Identifier	vel
>5409	Identifier	backupVel
>5410	IdentifierDeclType	Vector
>5411	IdentifierDeclStatement	 
>5412	IdentifierDecl	backupPos = position
>5413	AssignmentExpr	backupPos = position
>5414	Identifier	position
>5415	Identifier	position
>5416	Identifier	backupPos
>5417	IdentifierDeclType	Vector
>5463	FunctionDef	Entity 
>5464	ParameterList	float dt
>5465	Parameter	 
>5466	Identifier	dt
>5467	ParameterType	float
>5468	ReturnType	void
>5469	CompoundStatement	 
>5470	ExpressionStatement	 
>5471	CallExpression	updateBoneLock ( )
>5472	ArgumentList	 
>5473	Callee	updateBoneLock
>5474	Identifier	updateBoneLock
>5479	FunctionDef	Entity 
>5480	ParameterList	 
>5481	ReturnType	bool
>5482	CompoundStatement	 
>5483	ReturnStatement	 
>5484	AndExpression	getEntityType ( ) == ET_ENEMY && canBeTargetedByAvatar
>5485	Identifier	canBeTargetedByAvatar
>5486	EqualityExpression	getEntityType ( ) == ET_ENEMY
>5487	Identifier	ET_ENEMY
>5488	CallExpression	getEntityType ( )
>5489	ArgumentList	 
>5490	Callee	getEntityType
>5491	Identifier	getEntityType
>5498	FunctionDef	Entity 
>5499	ParameterList	bool wallJump
>5500	Parameter	 
>5501	Identifier	wallJump
>5502	ParameterType	bool
>5503	ReturnType	bool
>5504	CompoundStatement	 
>5505	ReturnStatement	 
>5506	Identifier	false
>5507	IfStatement	if ( skeletalSprite . isLoaded ( ) && ( wallJump || ( ! wallJump && ! burstTimer . isActive ( ) ) ) )
>5508	CompoundStatement	 
>5509	ReturnStatement	 
>5510	Identifier	true
>5511	ExpressionStatement	 
>5512	CallExpression	burstTimer . start ( 1 )
>5513	ArgumentList	1
>5514	Argument	1
>5515	PrimaryExpression	1
>5516	Callee	burstTimer . start
>5517	MemberAccess	burstTimer . start
>5518	Identifier	start
>5519	Identifier	burstTimer
>5520	IfStatement	if ( wallJump )
>5521	ElseStatement	else
>5522	ExpressionStatement	 
>5523	AssignmentExpr	position . data -> pathTimeMultiplier = 1.5
>5524	PrimaryExpression	1.5
>5525	PtrMemberAccess	position . data -> pathTimeMultiplier
>5526	Identifier	pathTimeMultiplier
>5527	MemberAccess	position . data
>5528	Identifier	data
>5529	Identifier	position
>5530	ExpressionStatement	 
>5531	AssignmentExpr	position . data -> pathTimeMultiplier = 2
>5532	PrimaryExpression	2
>5533	PtrMemberAccess	position . data -> pathTimeMultiplier
>5534	Identifier	pathTimeMultiplier
>5535	MemberAccess	position . data
>5536	Identifier	data
>5537	Identifier	position
>5538	Condition	 
>5539	Identifier	wallJump
>5540	ExpressionStatement	 
>5541	CallExpression	position . ensureData ( )
>5542	ArgumentList	 
>5543	Callee	position . ensureData
>5544	MemberAccess	position . ensureData
>5545	Identifier	ensureData
>5546	Identifier	position
>5547	ExpressionStatement	 
>5548	CallExpression	skeletalSprite . animate ( \"burst\" )
>5549	ArgumentList	\"burst\"
>5550	Argument	\"burst\"
>5551	PrimaryExpression	\"burst\"
>5552	Callee	skeletalSprite . animate
>5553	MemberAccess	skeletalSprite . animate
>5554	Identifier	animate
>5555	Identifier	skeletalSprite
>5556	ExpressionStatement	 
>5557	CallExpression	dsq -> game -> playBurstSound ( wallJump )
>5558	ArgumentList	wallJump
>5559	Argument	wallJump
>5560	Identifier	wallJump
>5561	Callee	dsq -> game -> playBurstSound
>5562	PtrMemberAccess	dsq -> game -> playBurstSound
>5563	Identifier	playBurstSound
>5564	PtrMemberAccess	dsq -> game
>5565	Identifier	game
>5566	Identifier	dsq
>5567	Condition	 
>5568	AndExpression	skeletalSprite . isLoaded ( ) && ( wallJump || ( ! wallJump && ! burstTimer . isActive ( ) ) )
>5569	OrExpression	wallJump || ( ! wallJump && ! burstTimer . isActive ( ) )
>5570	AndExpression	! wallJump && ! burstTimer . isActive ( )
>5571	UnaryOp	! burstTimer . isActive ( )
>5572	CallExpression	burstTimer . isActive ( )
>5573	ArgumentList	 
>5574	Callee	burstTimer . isActive
>5575	MemberAccess	burstTimer . isActive
>5576	Identifier	isActive
>5577	Identifier	burstTimer
>5578	UnaryOperator	!
>5579	UnaryOp	! wallJump
>5580	Identifier	wallJump
>5581	UnaryOperator	!
>5582	Identifier	wallJump
>5583	CallExpression	skeletalSprite . isLoaded ( )
>5584	ArgumentList	 
>5585	Callee	skeletalSprite . isLoaded
>5586	MemberAccess	skeletalSprite . isLoaded
>5587	Identifier	isLoaded
>5588	Identifier	skeletalSprite
>5607	FunctionDef	Entity 
>5608	ParameterList	 
>5609	ReturnType	bool
>5610	CompoundStatement	 
>5611	ReturnStatement	 
>5612	CallExpression	position . isFollowingPath ( )
>5613	ArgumentList	 
>5614	Callee	position . isFollowingPath
>5615	MemberAccess	position . isFollowingPath
>5616	Identifier	isFollowingPath
>5617	Identifier	position
>5623	FunctionDef	Entity 
>5624	ParameterList	 
>5625	ReturnType	void
>5626	CompoundStatement	 
>5627	IfStatement	if ( deleteOnPathEnd )
>5628	ElseStatement	else
>5629	CompoundStatement	 
>5630	IfStatement	if ( swimPath )
>5631	CompoundStatement	 
>5632	IfStatement	if ( num >= 2 )
>5633	CompoundStatement	 
>5634	IfStatement	if ( isv ( EV_FLIPTOPATH , 1 ) )
>5635	CompoundStatement	 
>5636	IfStatement	if ( v . x < 0 )
>5637	CompoundStatement	 
>5638	IfStatement	if ( isfh ( ) )
>5639	ExpressionStatement	 
>5640	CallExpression	flipHorizontal ( )
>5641	ArgumentList	 
>5642	Callee	flipHorizontal
>5643	Identifier	flipHorizontal
>5644	Condition	 
>5645	CallExpression	isfh ( )
>5646	ArgumentList	 
>5647	Callee	isfh
>5648	Identifier	isfh
>5649	Condition	 
>5650	RelationalExpression	v . x < 0
>5651	PrimaryExpression	0
>5652	MemberAccess	v . x
>5653	Identifier	x
>5654	Identifier	v
>5655	IfStatement	if ( v . x > 0 )
>5656	CompoundStatement	 
>5657	IfStatement	if ( ! isfh ( ) )
>5658	ExpressionStatement	 
>5659	CallExpression	flipHorizontal ( )
>5660	ArgumentList	 
>5661	Callee	flipHorizontal
>5662	Identifier	flipHorizontal
>5663	Condition	 
>5664	UnaryOp	! isfh ( )
>5665	CallExpression	isfh ( )
>5666	ArgumentList	 
>5667	Callee	isfh
>5668	Identifier	isfh
>5669	UnaryOperator	!
>5670	Condition	 
>5671	RelationalExpression	v . x > 0
>5672	PrimaryExpression	0
>5673	MemberAccess	v . x
>5674	Identifier	x
>5675	Identifier	v
>5676	Condition	 
>5677	CallExpression	isv ( EV_FLIPTOPATH , 1 )
>5678	ArgumentList	EV_FLIPTOPATH
>5679	Argument	1
>5680	PrimaryExpression	1
>5681	Argument	EV_FLIPTOPATH
>5682	Identifier	EV_FLIPTOPATH
>5683	Callee	isv
>5684	Identifier	isv
>5685	IdentifierDeclStatement	 
>5686	IdentifierDecl	v = v2 - v1
>5687	AssignmentExpr	v = v2 - v1
>5688	AdditiveExpression	v2 - v1
>5689	Identifier	v1
>5690	Identifier	v2
>5691	Identifier	v
>5692	Identifier	v
>5693	IdentifierDeclType	Vector
>5694	IdentifierDeclStatement	 
>5695	IdentifierDecl	v1 = position . data -> path . getPathNode ( num - 2 ) -> value
>5696	AssignmentExpr	v1 = position . data -> path . getPathNode ( num - 2 ) -> value
>5697	PtrMemberAccess	position . data -> path . getPathNode ( num - 2 ) -> value
>5698	Identifier	value
>5699	CallExpression	position . data -> path . getPathNode ( num - 2 )
>5700	ArgumentList	num - 2
>5701	Argument	num - 2
>5702	AdditiveExpression	num - 2
>5703	PrimaryExpression	2
>5704	Identifier	num
>5705	Callee	position . data -> path . getPathNode
>5706	MemberAccess	position . data -> path . getPathNode
>5707	Identifier	getPathNode
>5708	PtrMemberAccess	position . data -> path
>5709	Identifier	path
>5710	MemberAccess	position . data
>5711	Identifier	data
>5712	Identifier	position
>5713	Identifier	v1
>5714	Identifier	v1
>5715	IdentifierDeclType	Vector
>5716	IdentifierDeclStatement	 
>5717	IdentifierDecl	v2 = position . data -> path . getPathNode ( num - 1 ) -> value
>5718	AssignmentExpr	v2 = position . data -> path . getPathNode ( num - 1 ) -> value
>5719	PtrMemberAccess	position . data -> path . getPathNode ( num - 1 ) -> value
>5720	Identifier	value
>5721	CallExpression	position . data -> path . getPathNode ( num - 1 )
>5722	ArgumentList	num - 1
>5723	Argument	num - 1
>5724	AdditiveExpression	num - 1
>5725	PrimaryExpression	1
>5726	Identifier	num
>5727	Callee	position . data -> path . getPathNode
>5728	MemberAccess	position . data -> path . getPathNode
>5729	Identifier	getPathNode
>5730	PtrMemberAccess	position . data -> path
>5731	Identifier	path
>5732	MemberAccess	position . data
>5733	Identifier	data
>5734	Identifier	position
>5735	Identifier	v2
>5736	Identifier	v2
>5737	IdentifierDeclType	Vector
>5738	Condition	 
>5739	RelationalExpression	num >= 2
>5740	PrimaryExpression	2
>5741	Identifier	num
>5742	IdentifierDeclStatement	 
>5743	IdentifierDecl	num = position . data -> path . getNumPathNodes ( )
>5744	AssignmentExpr	num = position . data -> path . getNumPathNodes ( )
>5745	CallExpression	position . data -> path . getNumPathNodes ( )
>5746	ArgumentList	 
>5747	Callee	position . data -> path . getNumPathNodes
>5748	MemberAccess	position . data -> path . getNumPathNodes
>5749	Identifier	getNumPathNodes
>5750	PtrMemberAccess	position . data -> path
>5751	Identifier	path
>5752	MemberAccess	position . data
>5753	Identifier	data
>5754	Identifier	position
>5755	Identifier	num
>5756	Identifier	num
>5757	IdentifierDeclType	int
>5758	ExpressionStatement	 
>5759	CallExpression	position . ensureData ( )
>5760	ArgumentList	 
>5761	Callee	position . ensureData
>5762	MemberAccess	position . ensureData
>5763	Identifier	ensureData
>5764	Identifier	position
>5765	IfStatement	if ( skeletalSprite . isLoaded ( ) )
>5766	CompoundStatement	 
>5767	ExpressionStatement	 
>5768	CallExpression	skeletalSprite . animate ( \"idle\" , - 1 )
>5769	ArgumentList	\"idle\"
>5770	Argument	- 1
>5771	UnaryOp	- 1
>5772	PrimaryExpression	1
>5773	UnaryOperator	-
>5774	Argument	\"idle\"
>5775	PrimaryExpression	\"idle\"
>5776	Callee	skeletalSprite . animate
>5777	MemberAccess	skeletalSprite . animate
>5778	Identifier	animate
>5779	Identifier	skeletalSprite
>5780	Condition	 
>5781	CallExpression	skeletalSprite . isLoaded ( )
>5782	ArgumentList	 
>5783	Callee	skeletalSprite . isLoaded
>5784	MemberAccess	skeletalSprite . isLoaded
>5785	Identifier	isLoaded
>5786	Identifier	skeletalSprite
>5787	ExpressionStatement	 
>5788	CallExpression	rotateToVec ( Vector ( 0 , - 1 ) , 0.1 , 0 )
>5789	ArgumentList	Vector ( 0 , - 1 )
>5790	Argument	0
>5791	PrimaryExpression	0
>5792	Argument	0.1
>5793	PrimaryExpression	0.1
>5794	Argument	Vector ( 0 , - 1 )
>5795	CallExpression	Vector ( 0 , - 1 )
>5796	ArgumentList	0
>5797	Argument	- 1
>5798	UnaryOp	- 1
>5799	PrimaryExpression	1
>5800	UnaryOperator	-
>5801	Argument	0
>5802	PrimaryExpression	0
>5803	Callee	Vector
>5804	Identifier	Vector
>5805	Callee	rotateToVec
>5806	Identifier	rotateToVec
>5807	ExpressionStatement	 
>5808	CallExpression	offset . interpolateTo ( Vector ( 0 , 0 ) , 0.4 )
>5809	ArgumentList	Vector ( 0 , 0 )
>5810	Argument	0.4
>5811	PrimaryExpression	0.4
>5812	Argument	Vector ( 0 , 0 )
>5813	CallExpression	Vector ( 0 , 0 )
>5814	ArgumentList	0
>5815	Argument	0
>5816	PrimaryExpression	0
>5817	Argument	0
>5818	PrimaryExpression	0
>5819	Callee	Vector
>5820	Identifier	Vector
>5821	Callee	offset . interpolateTo
>5822	MemberAccess	offset . interpolateTo
>5823	Identifier	interpolateTo
>5824	Identifier	offset
>5825	Condition	 
>5826	Identifier	swimPath
>5827	CompoundStatement	 
>5828	ExpressionStatement	 
>5829	CallExpression	safeKill ( )
>5830	ArgumentList	 
>5831	Callee	safeKill
>5832	Identifier	safeKill
>5833	Condition	 
>5834	Identifier	deleteOnPathEnd
>5865	FunctionDef	Entity 
>5866	ParameterList	Vector v
>5867	Parameter	 
>5868	Identifier	v
>5869	ParameterType	Vector
>5870	ReturnType	void
>5871	CompoundStatement	 
>5872	IfStatement	if ( skeletalSprite . isLoaded ( ) )
>5873	CompoundStatement	 
>5874	IfStatement	if ( ! burstTimer . isActive ( ) )
>5875	CompoundStatement	 
>5876	IfStatement	if ( ! anim || anim -> name != \"swim\" )
>5877	ExpressionStatement	 
>5878	CallExpression	skeletalSprite . transitionAnimate ( \"swim\" , 0.1 , - 1 )
>5879	ArgumentList	\"swim\"
>5880	Argument	- 1
>5881	UnaryOp	- 1
>5882	PrimaryExpression	1
>5883	UnaryOperator	-
>5884	Argument	0.1
>5885	PrimaryExpression	0.1
>5886	Argument	\"swim\"
>5887	PrimaryExpression	\"swim\"
>5888	Callee	skeletalSprite . transitionAnimate
>5889	MemberAccess	skeletalSprite . transitionAnimate
>5890	Identifier	transitionAnimate
>5891	Identifier	skeletalSprite
>5892	Condition	 
>5893	OrExpression	! anim || anim -> name != \"swim\"
>5894	EqualityExpression	anim -> name != \"swim\"
>5895	PrimaryExpression	\"swim\"
>5896	PtrMemberAccess	anim -> name
>5897	Identifier	name
>5898	Identifier	anim
>5899	UnaryOp	! anim
>5900	Identifier	anim
>5901	UnaryOperator	!
>5902	Condition	 
>5903	UnaryOp	! burstTimer . isActive ( )
>5904	CallExpression	burstTimer . isActive ( )
>5905	ArgumentList	 
>5906	Callee	burstTimer . isActive
>5907	MemberAccess	burstTimer . isActive
>5908	Identifier	isActive
>5909	Identifier	burstTimer
>5910	UnaryOperator	!
>5911	IdentifierDeclStatement	 
>5912	IdentifierDecl	* anim = skeletalSprite . getCurrentAnimation ( )
>5913	AssignmentExpr	* anim = skeletalSprite . getCurrentAnimation ( )
>5914	CallExpression	skeletalSprite . getCurrentAnimation ( )
>5915	ArgumentList	 
>5916	Callee	skeletalSprite . getCurrentAnimation
>5917	MemberAccess	skeletalSprite . getCurrentAnimation
>5918	Identifier	getCurrentAnimation
>5919	Identifier	skeletalSprite
>5920	Identifier	anim
>5921	Identifier	anim
>5922	IdentifierDeclType	Animation *
>5923	IfStatement	if ( burstTimer . isActive ( ) )
>5924	ElseStatement	else
>5925	ExpressionStatement	 
>5926	CallExpression	rotateToVec ( v , 0.2 )
>5927	ArgumentList	v
>5928	Argument	0.2
>5929	PrimaryExpression	0.2
>5930	Argument	v
>5931	Identifier	v
>5932	Callee	rotateToVec
>5933	Identifier	rotateToVec
>5934	ExpressionStatement	 
>5935	CallExpression	rotateToVec ( v , 0.05 )
>5936	ArgumentList	v
>5937	Argument	0.05
>5938	PrimaryExpression	0.05
>5939	Argument	v
>5940	Identifier	v
>5941	Callee	rotateToVec
>5942	Identifier	rotateToVec
>5943	Condition	 
>5944	CallExpression	burstTimer . isActive ( )
>5945	ArgumentList	 
>5946	Callee	burstTimer . isActive
>5947	MemberAccess	burstTimer . isActive
>5948	Identifier	isActive
>5949	Identifier	burstTimer
>5950	Condition	 
>5951	CallExpression	skeletalSprite . isLoaded ( )
>5952	ArgumentList	 
>5953	Callee	skeletalSprite . isLoaded
>5954	MemberAccess	skeletalSprite . isLoaded
>5955	Identifier	isLoaded
>5956	Identifier	skeletalSprite
>5957	IfStatement	if ( isv ( EV_FLIPTOPATH , 1 ) )
>5958	CompoundStatement	 
>5959	IfStatement	if ( v . x < 0 )
>5960	ElseStatement	else
>5961	IfStatement	if ( v . x > 0 )
>5962	CompoundStatement	 
>5963	IfStatement	if ( ! isfh ( ) )
>5964	ExpressionStatement	 
>5965	CallExpression	flipHorizontal ( )
>5966	ArgumentList	 
>5967	Callee	flipHorizontal
>5968	Identifier	flipHorizontal
>5969	Condition	 
>5970	UnaryOp	! isfh ( )
>5971	CallExpression	isfh ( )
>5972	ArgumentList	 
>5973	Callee	isfh
>5974	Identifier	isfh
>5975	UnaryOperator	!
>5976	Condition	 
>5977	RelationalExpression	v . x > 0
>5978	PrimaryExpression	0
>5979	MemberAccess	v . x
>5980	Identifier	x
>5981	Identifier	v
>5982	CompoundStatement	 
>5983	IfStatement	if ( isfh ( ) )
>5984	ExpressionStatement	 
>5985	CallExpression	flipHorizontal ( )
>5986	ArgumentList	 
>5987	Callee	flipHorizontal
>5988	Identifier	flipHorizontal
>5989	Condition	 
>5990	CallExpression	isfh ( )
>5991	ArgumentList	 
>5992	Callee	isfh
>5993	Identifier	isfh
>5994	Condition	 
>5995	RelationalExpression	v . x < 0
>5996	PrimaryExpression	0
>5997	MemberAccess	v . x
>5998	Identifier	x
>5999	Identifier	v
>6000	Condition	 
>6001	CallExpression	isv ( EV_FLIPTOPATH , 1 )
>6002	ArgumentList	EV_FLIPTOPATH
>6003	Argument	1
>6004	PrimaryExpression	1
>6005	Argument	EV_FLIPTOPATH
>6006	Identifier	EV_FLIPTOPATH
>6007	Callee	isv
>6008	Identifier	isv
>6009	ExpressionStatement	 
>6010	CallExpression	v . normalize2D ( )
>6011	ArgumentList	 
>6012	Callee	v . normalize2D
>6013	MemberAccess	v . normalize2D
>6014	Identifier	normalize2D
>6015	Identifier	v
>6032	FunctionDef	Entity 
>6033	ParameterList	float t
>6034	Parameter	 
>6035	Identifier	t
>6036	ParameterType	float
>6037	ReturnType	void
>6038	CompoundStatement	 
>6039	ExpressionStatement	 
>6040	AssignmentExpr	slowingToStopPathTimer = 0
>6041	PrimaryExpression	0
>6042	Identifier	slowingToStopPathTimer
>6043	ExpressionStatement	 
>6044	CallExpression	debugLog ( os . str ( ) )
>6045	ArgumentList	os . str ( )
>6046	Argument	os . str ( )
>6047	CallExpression	os . str ( )
>6048	ArgumentList	 
>6049	Callee	os . str
>6050	MemberAccess	os . str
>6051	Identifier	str
>6052	Identifier	os
>6053	Callee	debugLog
>6054	Identifier	debugLog
>6055	ExpressionStatement	 
>6056	ShiftExpression	os << \"slowingToStopPath
>6057	ShiftExpression	\"slowingToStopPath
>6058	Identifier	slowingToStopPath
>6059	PrimaryExpression	\"slowingToStopPath
>6060	Identifier	os
>6061	IdentifierDeclStatement	 
>6062	IdentifierDecl	os
>6063	Identifier	os
>6064	IdentifierDeclType	std 
>6065	ExpressionStatement	 
>6066	AssignmentExpr	slowingToStopPath = t
>6067	Identifier	t
>6068	Identifier	slowingToStopPath
>6077	FunctionDef	Entity 
>6078	ParameterList	 
>6079	ReturnType	bool
>6080	CompoundStatement	 
>6081	ReturnStatement	 
>6082	Identifier	v
>6083	IdentifierDeclStatement	 
>6084	IdentifierDecl	v = ( slowingToStopPath > 0 )
>6085	AssignmentExpr	v = ( slowingToStopPath > 0 )
>6086	RelationalExpression	slowingToStopPath > 0
>6087	PrimaryExpression	0
>6088	Identifier	slowingToStopPath
>6089	Identifier	v
>6090	Identifier	v
>6091	IdentifierDeclType	bool
>6097	FunctionDef	Entity 
>6098	ParameterList	float dt
>6099	Parameter	 
>6100	Identifier	dt
>6101	ParameterType	float
>6102	ReturnType	bool
>6103	CompoundStatement	 
>6104	ReturnStatement	 
>6105	Identifier	inCurrent
>6106	IfStatement	if ( this -> getEntityType ( ) == ET_AVATAR && dsq -> game -> avatar -> canSwimAgainstCurrents ( ) )
>6107	CompoundStatement	 
>6108	IfStatement	if ( ! vel . isZero ( ) )
>6109	ElseStatement	else
>6110	CompoundStatement	 
>6111	CompoundStatement	 
>6112	IfStatement	if ( vel . dot2D ( vel2 ) < 0 )
>6113	CompoundStatement	 
>6114	IfStatement	if ( dsq -> game -> avatar -> bursting )
>6115	ElseStatement	else
>6116	IfStatement	if ( dsq -> game -> avatar -> isSwimming ( ) )
>6117	ExpressionStatement	 
>6118	CallExpression	vel2 . capLength2D ( cap )
>6119	ArgumentList	cap
>6120	Argument	cap
>6121	Identifier	cap
>6122	Callee	vel2 . capLength2D
>6123	MemberAccess	vel2 . capLength2D
>6124	Identifier	capLength2D
>6125	Identifier	vel2
>6126	Condition	 
>6127	CallExpression	dsq -> game -> avatar -> isSwimming ( )
>6128	ArgumentList	 
>6129	Callee	dsq -> game -> avatar -> isSwimming
>6130	PtrMemberAccess	dsq -> game -> avatar -> isSwimming
>6131	Identifier	isSwimming
>6132	PtrMemberAccess	dsq -> game -> avatar
>6133	Identifier	avatar
>6134	PtrMemberAccess	dsq -> game
>6135	Identifier	game
>6136	Identifier	dsq
>6137	ExpressionStatement	 
>6138	AssignmentExpr	vel2 = 0
>6139	PrimaryExpression	0
>6140	Identifier	vel2
>6141	Condition	 
>6142	PtrMemberAccess	dsq -> game -> avatar -> bursting
>6143	Identifier	bursting
>6144	PtrMemberAccess	dsq -> game -> avatar
>6145	Identifier	avatar
>6146	PtrMemberAccess	dsq -> game
>6147	Identifier	game
>6148	Identifier	dsq
>6149	Condition	 
>6150	RelationalExpression	vel . dot2D ( vel2 ) < 0
>6151	PrimaryExpression	0
>6152	CallExpression	vel . dot2D ( vel2 )
>6153	ArgumentList	vel2
>6154	Argument	vel2
>6155	Identifier	vel2
>6156	Callee	vel . dot2D
>6157	MemberAccess	vel . dot2D
>6158	Identifier	dot2D
>6159	Identifier	vel
>6160	Condition	 
>6161	UnaryOp	! vel . isZero ( )
>6162	CallExpression	vel . isZero ( )
>6163	ArgumentList	 
>6164	Callee	vel . isZero
>6165	MemberAccess	vel . isZero
>6166	Identifier	isZero
>6167	Identifier	vel
>6168	UnaryOperator	!
>6169	IdentifierDeclStatement	 
>6170	IdentifierDecl	cap = 100
>6171	AssignmentExpr	cap = 100
>6172	PrimaryExpression	100
>6173	Identifier	cap
>6174	Identifier	cap
>6175	IdentifierDeclType	int
>6176	Condition	 
>6177	AndExpression	this -> getEntityType ( ) == ET_AVATAR && dsq -> game -> avatar -> canSwimAgainstCurrents ( )
>6178	CallExpression	dsq -> game -> avatar -> canSwimAgainstCurrents ( )
>6179	ArgumentList	 
>6180	Callee	dsq -> game -> avatar -> canSwimAgainstCurrents
>6181	PtrMemberAccess	dsq -> game -> avatar -> canSwimAgainstCurrents
>6182	Identifier	canSwimAgainstCurrents
>6183	PtrMemberAccess	dsq -> game -> avatar
>6184	Identifier	avatar
>6185	PtrMemberAccess	dsq -> game
>6186	Identifier	game
>6187	Identifier	dsq
>6188	EqualityExpression	this -> getEntityType ( ) == ET_AVATAR
>6189	Identifier	ET_AVATAR
>6190	CallExpression	this -> getEntityType ( )
>6191	ArgumentList	 
>6192	Callee	this -> getEntityType
>6193	PtrMemberAccess	this -> getEntityType
>6194	Identifier	getEntityType
>6195	Identifier	this
>6196	CompoundStatement	 
>6197	IfStatement	if ( inCurrent )
>6198	CompoundStatement	 
>6199	IfStatement	if ( getEntityType ( ) == ET_AVATAR )
>6200	CompoundStatement	 
>6201	IfStatement	if ( v < 0 )
>6202	ElseStatement	else
>6203	ExpressionStatement	 
>6204	CallExpression	dsq -> rumble ( ( 1.0f - v ) * scale , ( v ) * scale , 0.1 )
>6205	ArgumentList	( 1.0f - v ) * scale
>6206	Argument	0.1
>6207	PrimaryExpression	0.1
>6208	Argument	( v ) * scale
>6209	CastExpression	( v ) * scale
>6210	UnaryOp	* scale
>6211	Identifier	scale
>6212	UnaryOperator	*
>6213	CastTarget	v
>6214	Argument	( 1.0f - v ) * scale
>6215	MultiplicativeExpression	( 1.0f - v ) * scale
>6216	Identifier	scale
>6217	AdditiveExpression	1.0f - v
>6218	Identifier	v
>6219	PrimaryExpression	1.0f
>6220	Callee	dsq -> rumble
>6221	PtrMemberAccess	dsq -> rumble
>6222	Identifier	rumble
>6223	Identifier	dsq
>6224	ExpressionStatement	 
>6225	CallExpression	dsq -> rumble ( ( - v ) * scale , ( 1.0f + v ) * scale , 0.2 )
>6226	ArgumentList	( - v ) * scale
>6227	Argument	0.2
>6228	PrimaryExpression	0.2
>6229	Argument	( 1.0f + v ) * scale
>6230	MultiplicativeExpression	( 1.0f + v ) * scale
>6231	Identifier	scale
>6232	AdditiveExpression	1.0f + v
>6233	Identifier	v
>6234	PrimaryExpression	1.0f
>6235	Argument	( - v ) * scale
>6236	MultiplicativeExpression	( - v ) * scale
>6237	Identifier	scale
>6238	UnaryOp	- v
>6239	Identifier	v
>6240	UnaryOperator	-
>6241	Callee	dsq -> rumble
>6242	PtrMemberAccess	dsq -> rumble
>6243	Identifier	rumble
>6244	Identifier	dsq
>6245	Condition	 
>6246	RelationalExpression	v < 0
>6247	PrimaryExpression	0
>6248	Identifier	v
>6249	Condition	 
>6250	EqualityExpression	getEntityType ( ) == ET_AVATAR
>6251	Identifier	ET_AVATAR
>6252	CallExpression	getEntityType ( )
>6253	ArgumentList	 
>6254	Callee	getEntityType
>6255	Identifier	getEntityType
>6256	IdentifierDeclStatement	 
>6257	IdentifierDecl	scale = 0.2
>6258	AssignmentExpr	scale = 0.2
>6259	PrimaryExpression	0.2
>6260	Identifier	scale
>6261	Identifier	scale
>6262	IdentifierDeclType	float
>6263	IdentifierDeclStatement	 
>6264	IdentifierDecl	v = dist . x
>6265	AssignmentExpr	v = dist . x
>6266	MemberAccess	dist . x
>6267	Identifier	x
>6268	Identifier	dist
>6269	Identifier	v
>6270	Identifier	v
>6271	IdentifierDeclType	float
>6272	ExpressionStatement	 
>6273	CallExpression	dist . normalize2D ( )
>6274	ArgumentList	 
>6275	Callee	dist . normalize2D
>6276	MemberAccess	dist . normalize2D
>6277	Identifier	normalize2D
>6278	Identifier	dist
>6279	IdentifierDeclStatement	 
>6280	IdentifierDecl	dist = - vel2
>6281	AssignmentExpr	dist = - vel2
>6282	UnaryOp	- vel2
>6283	Identifier	vel2
>6284	UnaryOperator	-
>6285	Identifier	dist
>6286	Identifier	dist
>6287	IdentifierDeclType	Vector
>6288	ExpressionStatement	 
>6289	CallExpression	doCollisionAvoidance ( dt , 3 , 1 , 0 , useLen )
>6290	ArgumentList	dt
>6291	Argument	useLen
>6292	Identifier	useLen
>6293	Argument	0
>6294	PrimaryExpression	0
>6295	Argument	1
>6296	PrimaryExpression	1
>6297	Argument	3
>6298	PrimaryExpression	3
>6299	Argument	dt
>6300	Identifier	dt
>6301	Callee	doCollisionAvoidance
>6302	Identifier	doCollisionAvoidance
>6303	IfStatement	if ( ! ( this -> getEntityType ( ) == ET_AVATAR && dsq -> game -> avatar -> canSwimAgainstCurrents ( ) && dsq -> \
>6304	CompoundStatement	 
>6305	ExpressionStatement	 
>6306	CallExpression	doCollisionAvoidance ( 1 , 4 , 1 , & vel2 , useLen )
>6307	ArgumentList	1
>6308	Argument	useLen
>6309	Identifier	useLen
>6310	Argument	& vel2
>6311	UnaryOp	& vel2
>6312	Identifier	vel2
>6313	UnaryOperator	&
>6314	Argument	1
>6315	PrimaryExpression	1
>6316	Argument	4
>6317	PrimaryExpression	4
>6318	Argument	1
>6319	PrimaryExpression	1
>6320	Callee	doCollisionAvoidance
>6321	Identifier	doCollisionAvoidance
>6322	Condition	 
>6323	UnaryOp	! ( this -> getEntityType ( ) == ET_AVATAR && dsq -> game -> avatar -> canSwimAgainstCurrents ( ) && dsq -> game \
>6324	AndExpression	this -> getEntityType ( ) == ET_AVATAR && dsq -> game -> avatar -> canSwimAgainstCurrents ( ) && dsq \
>6325	AndExpression	dsq -> game -> avatar -> canSwimAgainstCurrents ( ) && dsq -> game -> avatar -> bursting
>6326	PtrMemberAccess	dsq -> game -> avatar -> bursting
>6327	Identifier	bursting
>6328	PtrMemberAccess	dsq -> game -> avatar
>6329	Identifier	avatar
>6330	PtrMemberAccess	dsq -> game
>6331	Identifier	game
>6332	Identifier	dsq
>6333	CallExpression	dsq -> game -> avatar -> canSwimAgainstCurrents ( )
>6334	ArgumentList	 
>6335	Callee	dsq -> game -> avatar -> canSwimAgainstCurrents
>6336	PtrMemberAccess	dsq -> game -> avatar -> canSwimAgainstCurrents
>6337	Identifier	canSwimAgainstCurrents
>6338	PtrMemberAccess	dsq -> game -> avatar
>6339	Identifier	avatar
>6340	PtrMemberAccess	dsq -> game
>6341	Identifier	game
>6342	Identifier	dsq
>6343	EqualityExpression	this -> getEntityType ( ) == ET_AVATAR
>6344	Identifier	ET_AVATAR
>6345	CallExpression	this -> getEntityType ( )
>6346	ArgumentList	 
>6347	Callee	this -> getEntityType
>6348	PtrMemberAccess	this -> getEntityType
>6349	Identifier	getEntityType
>6350	Identifier	this
>6351	UnaryOperator	!
>6352	IfStatement	if ( useLen < 500 )
>6353	ExpressionStatement	 
>6354	AssignmentExpr	useLen = 500
>6355	PrimaryExpression	500
>6356	Identifier	useLen
>6357	Condition	 
>6358	RelationalExpression	useLen < 500
>6359	PrimaryExpression	500
>6360	Identifier	useLen
>6361	IdentifierDeclStatement	 
>6362	IdentifierDecl	useLen = len
>6363	AssignmentExpr	useLen = len
>6364	Identifier	len
>6365	Identifier	len
>6366	Identifier	useLen
>6367	IdentifierDeclType	float
>6368	IdentifierDeclStatement	 
>6369	IdentifierDecl	len = vel2 . getLength2D ( )
>6370	AssignmentExpr	len = vel2 . getLength2D ( )
>6371	CallExpression	vel2 . getLength2D ( )
>6372	ArgumentList	 
>6373	Callee	vel2 . getLength2D
>6374	MemberAccess	vel2 . getLength2D
>6375	Identifier	getLength2D
>6376	Identifier	vel2
>6377	Identifier	len
>6378	Identifier	len
>6379	IdentifierDeclType	float
>6380	ExpressionStatement	 
>6381	AssignmentExpr	vel2 = accum
>6382	Identifier	accum
>6383	Identifier	vel2
>6384	ExpressionStatement	 
>6385	AssignmentExpr	accum /= c
>6386	Identifier	c
>6387	Identifier	accum
>6388	Condition	 
>6389	Identifier	inCurrent
>6390	IfStatement	if ( ! dsq -> game -> isWorldPaused ( ) )
>6391	CompoundStatement	 
>6392	ForStatement	for ( Path * p = dsq -> game -> getFirstPathOfType ( PATH_CURRENT ) ; p ; p = p -> nextOfType )
>6393	CompoundStatement	 
>6394	IfStatement	if ( p -> active )
>6395	CompoundStatement	 
>6396	ForStatement	for ( int n = 1 ; n < p -> nodes . size ( ) ; n ++ )
>6397	CompoundStatement	 
>6398	IfStatement	if ( isTouchingLine ( node1 -> position , node2 -> position , position , collideRadius + p -> rect . getWidth ( ) / \
>6399	CompoundStatement	 
>6400	ExpressionStatement	 
>6401	IncDecOp	c ++
>6402	IncDec	++
>6403	Identifier	c
>6404	ExpressionStatement	 
>6405	AssignmentExpr	accum += dir
>6406	Identifier	dir
>6407	Identifier	accum
>6408	ExpressionStatement	 
>6409	CallExpression	dir . setLength2D ( p -> currentMod )
>6410	ArgumentList	p -> currentMod
>6411	Argument	p -> currentMod
>6412	PtrMemberAccess	p -> currentMod
>6413	Identifier	currentMod
>6414	Identifier	p
>6415	Callee	dir . setLength2D
>6416	MemberAccess	dir . setLength2D
>6417	Identifier	setLength2D
>6418	Identifier	dir
>6419	ExpressionStatement	 
>6420	AssignmentExpr	inCurrent = true
>6421	Identifier	true
>6422	Identifier	inCurrent
>6423	Condition	 
>6424	CallExpression	isTouchingLine ( node1 -> position , node2 -> position , position , collideRadius + p -> rect . getWidth ( ) / 2 )
>6425	ArgumentList	node1 -> position
>6426	Argument	collideRadius + p -> rect . getWidth ( ) / 2
>6427	AdditiveExpression	collideRadius + p -> rect . getWidth ( ) / 2
>6428	MultiplicativeExpression	p -> rect . getWidth ( ) / 2
>6429	PrimaryExpression	2
>6430	CallExpression	p -> rect . getWidth ( )
>6431	ArgumentList	 
>6432	Callee	p -> rect . getWidth
>6433	MemberAccess	p -> rect . getWidth
>6434	Identifier	getWidth
>6435	PtrMemberAccess	p -> rect
>6436	Identifier	rect
>6437	Identifier	p
>6438	Identifier	collideRadius
>6439	Argument	position
>6440	Identifier	position
>6441	Argument	node2 -> position
>6442	PtrMemberAccess	node2 -> position
>6443	Identifier	position
>6444	Identifier	node2
>6445	Argument	node1 -> position
>6446	PtrMemberAccess	node1 -> position
>6447	Identifier	position
>6448	Identifier	node1
>6449	Callee	isTouchingLine
>6450	Identifier	isTouchingLine
>6451	IdentifierDeclStatement	 
>6452	IdentifierDecl	dir = node2 -> position - node1 -> position
>6453	AssignmentExpr	dir = node2 -> position - node1 -> position
>6454	AdditiveExpression	node2 -> position - node1 -> position
>6455	PtrMemberAccess	node1 -> position
>6456	Identifier	position
>6457	Identifier	node1
>6458	PtrMemberAccess	node2 -> position
>6459	Identifier	position
>6460	Identifier	node2
>6461	Identifier	dir
>6462	Identifier	dir
>6463	IdentifierDeclType	Vector
>6464	IdentifierDeclStatement	 
>6465	IdentifierDecl	* node1 = & p -> nodes [ n - 1 ]
>6466	AssignmentExpr	* node1 = & p -> nodes [ n - 1 ]
>6467	UnaryOp	& p -> nodes [ n - 1 ]
>6468	ArrayIndexing	p -> nodes [ n - 1 ]
>6469	AdditiveExpression	n - 1
>6470	PrimaryExpression	1
>6471	Identifier	n
>6472	PtrMemberAccess	p -> nodes
>6473	Identifier	nodes
>6474	Identifier	p
>6475	UnaryOperator	&
>6476	Identifier	node1
>6477	Identifier	node1
>6478	IdentifierDeclType	PathNode *
>6479	IdentifierDeclStatement	 
>6480	IdentifierDecl	* node2 = & p -> nodes [ n ]
>6481	AssignmentExpr	* node2 = & p -> nodes [ n ]
>6482	UnaryOp	& p -> nodes [ n ]
>6483	ArrayIndexing	p -> nodes [ n ]
>6484	Identifier	n
>6485	PtrMemberAccess	p -> nodes
>6486	Identifier	nodes
>6487	Identifier	p
>6488	UnaryOperator	&
>6489	Identifier	node2
>6490	Identifier	node2
>6491	IdentifierDeclType	PathNode *
>6492	IncDecOp	 
>6493	IncDec	++
>6494	Identifier	n
>6495	Condition	 
>6496	RelationalExpression	n < p -> nodes . size ( )
>6497	CallExpression	p -> nodes . size ( )
>6498	ArgumentList	 
>6499	Callee	p -> nodes . size
>6500	MemberAccess	p -> nodes . size
>6501	Identifier	size
>6502	PtrMemberAccess	p -> nodes
>6503	Identifier	nodes
>6504	Identifier	p
>6505	Identifier	n
>6506	ForInit	 
>6507	IdentifierDeclStatement	int n = 1 ;
>6508	IdentifierDecl	n = 1
>6509	AssignmentExpr	n = 1
>6510	PrimaryExpression	1
>6511	Identifier	n
>6512	Identifier	n
>6513	IdentifierDeclType	int
>6514	Condition	 
>6515	PtrMemberAccess	p -> active
>6516	Identifier	active
>6517	Identifier	p
>6518	AssignmentExpr	 
>6519	PtrMemberAccess	p -> nextOfType
>6520	Identifier	nextOfType
>6521	Identifier	p
>6522	Identifier	p
>6523	Condition	 
>6524	Identifier	p
>6525	ForInit	 
>6526	IdentifierDeclStatement	Path * p = dsq -> game -> getFirstPathOfType ( PATH_CURRENT ) ;
>6527	IdentifierDecl	* p = dsq -> game -> getFirstPathOfType ( PATH_CURRENT )
>6528	AssignmentExpr	* p = dsq -> game -> getFirstPathOfType ( PATH_CURRENT )
>6529	CallExpression	dsq -> game -> getFirstPathOfType ( PATH_CURRENT )
>6530	ArgumentList	PATH_CURRENT
>6531	Argument	PATH_CURRENT
>6532	Identifier	PATH_CURRENT
>6533	Callee	dsq -> game -> getFirstPathOfType
>6534	PtrMemberAccess	dsq -> game -> getFirstPathOfType
>6535	Identifier	getFirstPathOfType
>6536	PtrMemberAccess	dsq -> game
>6537	Identifier	game
>6538	Identifier	dsq
>6539	Identifier	p
>6540	Identifier	p
>6541	IdentifierDeclType	Path *
>6542	Condition	 
>6543	UnaryOp	! dsq -> game -> isWorldPaused ( )
>6544	CallExpression	dsq -> game -> isWorldPaused ( )
>6545	ArgumentList	 
>6546	Callee	dsq -> game -> isWorldPaused
>6547	PtrMemberAccess	dsq -> game -> isWorldPaused
>6548	Identifier	isWorldPaused
>6549	PtrMemberAccess	dsq -> game
>6550	Identifier	game
>6551	Identifier	dsq
>6552	UnaryOperator	!
>6553	IdentifierDeclStatement	 
>6554	IdentifierDecl	accum
>6555	Identifier	accum
>6556	IdentifierDeclType	Vector
>6557	IdentifierDeclStatement	 
>6558	IdentifierDecl	c = 0
>6559	AssignmentExpr	c = 0
>6560	PrimaryExpression	0
>6561	Identifier	c
>6562	Identifier	c
>6563	IdentifierDeclType	int
>6564	ExpressionStatement	 
>6565	AssignmentExpr	inCurrent = false
>6566	Identifier	false
>6567	Identifier	inCurrent
>6636	FunctionDef	Entity 
>6637	ParameterList	float dt , bool override
>6638	Parameter	 
>6639	Identifier	override
>6640	ParameterType	bool
>6641	Parameter	 
>6642	Identifier	dt
>6643	ParameterType	float
>6644	ReturnType	void
>6645	CompoundStatement	 
>6646	IfStatement	if ( ( override || ! inCurrent ) && ! vel2 . isZero ( ) )
>6647	CompoundStatement	 
>6648	IfStatement	if ( ( xg != ( vel2 . x > 0 ) ) || ( yg != ( vel2 . y > 0 ) ) || ( ! wasUnder && vel2 . isLength2DIn ( minVel2Len ) ) )
>6649	ExpressionStatement	 
>6650	AssignmentExpr	vel2 = 0
>6651	PrimaryExpression	0
>6652	Identifier	vel2
>6653	Condition	 
>6654	OrExpression	( xg != ( vel2 . x > 0 ) ) || ( yg != ( vel2 . y > 0 ) ) || ( ! wasUnder && vel2 . isLength2DIn ( minVel2Len ) )
>6655	OrExpression	( yg != ( vel2 . y > 0 ) ) || ( ! wasUnder && vel2 . isLength2DIn ( minVel2Len ) )
>6656	AndExpression	! wasUnder && vel2 . isLength2DIn ( minVel2Len )
>6657	CallExpression	vel2 . isLength2DIn ( minVel2Len )
>6658	ArgumentList	minVel2Len
>6659	Argument	minVel2Len
>6660	Identifier	minVel2Len
>6661	Callee	vel2 . isLength2DIn
>6662	MemberAccess	vel2 . isLength2DIn
>6663	Identifier	isLength2DIn
>6664	Identifier	vel2
>6665	UnaryOp	! wasUnder
>6666	Identifier	wasUnder
>6667	UnaryOperator	!
>6668	EqualityExpression	yg != ( vel2 . y > 0 )
>6669	RelationalExpression	vel2 . y > 0
>6670	PrimaryExpression	0
>6671	MemberAccess	vel2 . y
>6672	Identifier	y
>6673	Identifier	vel2
>6674	Identifier	yg
>6675	EqualityExpression	xg != ( vel2 . x > 0 )
>6676	RelationalExpression	vel2 . x > 0
>6677	PrimaryExpression	0
>6678	MemberAccess	vel2 . x
>6679	Identifier	x
>6680	Identifier	vel2
>6681	Identifier	xg
>6682	ExpressionStatement	 
>6683	AssignmentExpr	vel2 -= d
>6684	Identifier	d
>6685	Identifier	vel2
>6686	IdentifierDeclStatement	 
>6687	IdentifierDecl	yg = ( vel2 . y > 0 )
>6688	AssignmentExpr	yg = ( vel2 . y > 0 )
>6689	RelationalExpression	vel2 . y > 0
>6690	PrimaryExpression	0
>6691	MemberAccess	vel2 . y
>6692	Identifier	y
>6693	Identifier	vel2
>6694	Identifier	yg
>6695	Identifier	yg
>6696	IdentifierDeclType	bool
>6697	IdentifierDecl	xg = ( vel2 . x > 0 )
>6698	AssignmentExpr	xg = ( vel2 . x > 0 )
>6699	RelationalExpression	vel2 . x > 0
>6700	PrimaryExpression	0
>6701	MemberAccess	vel2 . x
>6702	Identifier	x
>6703	Identifier	vel2
>6704	Identifier	xg
>6705	Identifier	xg
>6706	IdentifierDeclType	bool
>6707	ExpressionStatement	 
>6708	CallExpression	d . setLength2D ( 1000 * dt )
>6709	ArgumentList	1000 * dt
>6710	Argument	1000 * dt
>6711	MultiplicativeExpression	1000 * dt
>6712	Identifier	dt
>6713	PrimaryExpression	1000
>6714	Callee	d . setLength2D
>6715	MemberAccess	d . setLength2D
>6716	Identifier	setLength2D
>6717	Identifier	d
>6718	IdentifierDeclStatement	 
>6719	IdentifierDecl	d = vel2
>6720	AssignmentExpr	d = vel2
>6721	Identifier	vel2
>6722	Identifier	vel2
>6723	Identifier	d
>6724	IdentifierDeclType	Vector
>6725	IdentifierDeclStatement	 
>6726	IdentifierDecl	wasUnder = vel . isLength2DIn ( minVel2Len )
>6727	AssignmentExpr	wasUnder = vel . isLength2DIn ( minVel2Len )
>6728	CallExpression	vel . isLength2DIn ( minVel2Len )
>6729	ArgumentList	minVel2Len
>6730	Argument	minVel2Len
>6731	Identifier	minVel2Len
>6732	Callee	vel . isLength2DIn
>6733	MemberAccess	vel . isLength2DIn
>6734	Identifier	isLength2DIn
>6735	Identifier	vel
>6736	Identifier	wasUnder
>6737	Identifier	wasUnder
>6738	IdentifierDeclType	bool
>6739	Condition	 
>6740	AndExpression	( override || ! inCurrent ) && ! vel2 . isZero ( )
>6741	UnaryOp	! vel2 . isZero ( )
>6742	CallExpression	vel2 . isZero ( )
>6743	ArgumentList	 
>6744	Callee	vel2 . isZero
>6745	MemberAccess	vel2 . isZero
>6746	Identifier	isZero
>6747	Identifier	vel2
>6748	UnaryOperator	!
>6749	OrExpression	override || ! inCurrent
>6750	UnaryOp	! inCurrent
>6751	Identifier	inCurrent
>6752	UnaryOperator	!
>6753	Identifier	override
>6772	FunctionDef	Entity 
>6773	ParameterList	 
>6774	ReturnType	bool
>6775	CompoundStatement	 
>6776	ReturnStatement	 
>6777	Identifier	false
>6778	ForStatement	for ( int x = 0 ; x < 4 ; x ++ )
>6779	CompoundStatement	 
>6780	ForStatement	for ( int y = 0 ; y < 4 ; y ++ )
>6781	CompoundStatement	 
>6782	IfStatement	if ( dsq -> game -> isObstructed ( TileVector ( t . x - x , t . y - y ) , OT_INVISIBLEIN ) )
>6783	ReturnStatement	 
>6784	Identifier	true
>6785	Condition	 
>6786	CallExpression	dsq -> game -> isObstructed ( TileVector ( t . x - x , t . y - y ) , OT_INVISIBLEIN )
>6787	ArgumentList	TileVector ( t . x - x , t . y - y )
>6788	Argument	OT_INVISIBLEIN
>6789	Identifier	OT_INVISIBLEIN
>6790	Argument	TileVector ( t . x - x , t . y - y )
>6791	CallExpression	TileVector ( t . x - x , t . y - y )
>6792	ArgumentList	t . x - x
>6793	Argument	t . y - y
>6794	AdditiveExpression	t . y - y
>6795	Identifier	y
>6796	MemberAccess	t . y
>6797	Identifier	y
>6798	Identifier	t
>6799	Argument	t . x - x
>6800	AdditiveExpression	t . x - x
>6801	Identifier	x
>6802	MemberAccess	t . x
>6803	Identifier	x
>6804	Identifier	t
>6805	Callee	TileVector
>6806	Identifier	TileVector
>6807	Callee	dsq -> game -> isObstructed
>6808	PtrMemberAccess	dsq -> game -> isObstructed
>6809	Identifier	isObstructed
>6810	PtrMemberAccess	dsq -> game
>6811	Identifier	game
>6812	Identifier	dsq
>6813	IfStatement	if ( dsq -> game -> isObstructed ( TileVector ( t . x + x , t . y - y ) , OT_INVISIBLEIN ) )
>6814	ReturnStatement	 
>6815	Identifier	true
>6816	Condition	 
>6817	CallExpression	dsq -> game -> isObstructed ( TileVector ( t . x + x , t . y - y ) , OT_INVISIBLEIN )
>6818	ArgumentList	TileVector ( t . x + x , t . y - y )
>6819	Argument	OT_INVISIBLEIN
>6820	Identifier	OT_INVISIBLEIN
>6821	Argument	TileVector ( t . x + x , t . y - y )
>6822	CallExpression	TileVector ( t . x + x , t . y - y )
>6823	ArgumentList	t . x + x
>6824	Argument	t . y - y
>6825	AdditiveExpression	t . y - y
>6826	Identifier	y
>6827	MemberAccess	t . y
>6828	Identifier	y
>6829	Identifier	t
>6830	Argument	t . x + x
>6831	AdditiveExpression	t . x + x
>6832	Identifier	x
>6833	MemberAccess	t . x
>6834	Identifier	x
>6835	Identifier	t
>6836	Callee	TileVector
>6837	Identifier	TileVector
>6838	Callee	dsq -> game -> isObstructed
>6839	PtrMemberAccess	dsq -> game -> isObstructed
>6840	Identifier	isObstructed
>6841	PtrMemberAccess	dsq -> game
>6842	Identifier	game
>6843	Identifier	dsq
>6844	IfStatement	if ( dsq -> game -> isObstructed ( TileVector ( t . x - x , t . y + y ) , OT_INVISIBLEIN ) )
>6845	ReturnStatement	 
>6846	Identifier	true
>6847	Condition	 
>6848	CallExpression	dsq -> game -> isObstructed ( TileVector ( t . x - x , t . y + y ) , OT_INVISIBLEIN )
>6849	ArgumentList	TileVector ( t . x - x , t . y + y )
>6850	Argument	OT_INVISIBLEIN
>6851	Identifier	OT_INVISIBLEIN
>6852	Argument	TileVector ( t . x - x , t . y + y )
>6853	CallExpression	TileVector ( t . x - x , t . y + y )
>6854	ArgumentList	t . x - x
>6855	Argument	t . y + y
>6856	AdditiveExpression	t . y + y
>6857	Identifier	y
>6858	MemberAccess	t . y
>6859	Identifier	y
>6860	Identifier	t
>6861	Argument	t . x - x
>6862	AdditiveExpression	t . x - x
>6863	Identifier	x
>6864	MemberAccess	t . x
>6865	Identifier	x
>6866	Identifier	t
>6867	Callee	TileVector
>6868	Identifier	TileVector
>6869	Callee	dsq -> game -> isObstructed
>6870	PtrMemberAccess	dsq -> game -> isObstructed
>6871	Identifier	isObstructed
>6872	PtrMemberAccess	dsq -> game
>6873	Identifier	game
>6874	Identifier	dsq
>6875	IfStatement	if ( dsq -> game -> isObstructed ( TileVector ( t . x + x , t . y + y ) , OT_INVISIBLEIN ) )
>6876	ReturnStatement	 
>6877	Identifier	true
>6878	Condition	 
>6879	CallExpression	dsq -> game -> isObstructed ( TileVector ( t . x + x , t . y + y ) , OT_INVISIBLEIN )
>6880	ArgumentList	TileVector ( t . x + x , t . y + y )
>6881	Argument	OT_INVISIBLEIN
>6882	Identifier	OT_INVISIBLEIN
>6883	Argument	TileVector ( t . x + x , t . y + y )
>6884	CallExpression	TileVector ( t . x + x , t . y + y )
>6885	ArgumentList	t . x + x
>6886	Argument	t . y + y
>6887	AdditiveExpression	t . y + y
>6888	Identifier	y
>6889	MemberAccess	t . y
>6890	Identifier	y
>6891	Identifier	t
>6892	Argument	t . x + x
>6893	AdditiveExpression	t . x + x
>6894	Identifier	x
>6895	MemberAccess	t . x
>6896	Identifier	x
>6897	Identifier	t
>6898	Callee	TileVector
>6899	Identifier	TileVector
>6900	Callee	dsq -> game -> isObstructed
>6901	PtrMemberAccess	dsq -> game -> isObstructed
>6902	Identifier	isObstructed
>6903	PtrMemberAccess	dsq -> game
>6904	Identifier	game
>6905	Identifier	dsq
>6906	IncDecOp	 
>6907	IncDec	++
>6908	Identifier	y
>6909	Condition	 
>6910	RelationalExpression	y < 4
>6911	PrimaryExpression	4
>6912	Identifier	y
>6913	ForInit	 
>6914	IdentifierDeclStatement	int y = 0 ;
>6915	IdentifierDecl	y = 0
>6916	AssignmentExpr	y = 0
>6917	PrimaryExpression	0
>6918	Identifier	y
>6919	Identifier	y
>6920	IdentifierDeclType	int
>6921	IncDecOp	 
>6922	IncDec	++
>6923	Identifier	x
>6924	Condition	 
>6925	RelationalExpression	x < 4
>6926	PrimaryExpression	4
>6927	Identifier	x
>6928	ForInit	 
>6929	IdentifierDeclStatement	int x = 0 ;
>6930	IdentifierDecl	x = 0
>6931	AssignmentExpr	x = 0
>6932	PrimaryExpression	0
>6933	Identifier	x
>6934	Identifier	x
>6935	IdentifierDeclType	int
>6936	IdentifierDeclStatement	 
>6937	IdentifierDecl	t ( position )
>6938	Identifier	position
>6939	Identifier	t
>6940	IdentifierDeclType	TileVector
>6959	FunctionDef	Entity 
>6960	ParameterList	 
>6961	ReturnType	void
>6962	CompoundStatement	 
>6963	IfStatement	if ( useValue )
>6964	CompoundStatement	 
>6965	ExpressionStatement	 
>6966	AssignmentExpr	position = t . worldVector ( )
>6967	CallExpression	t . worldVector ( )
>6968	ArgumentList	 
>6969	Callee	t . worldVector
>6970	MemberAccess	t . worldVector
>6971	Identifier	worldVector
>6972	Identifier	t
>6973	Identifier	position
>6974	Condition	 
>6975	Identifier	useValue
>6976	WhileStatement	while ( dsq -> game -> isObstructed ( t ) )
>6977	CompoundStatement	 
>6978	ExpressionStatement	 
>6979	AssignmentExpr	t . y += n . y
>6980	MemberAccess	n . y
>6981	Identifier	y
>6982	Identifier	n
>6983	MemberAccess	t . y
>6984	Identifier	y
>6985	Identifier	t
>6986	ExpressionStatement	 
>6987	AssignmentExpr	t . x += n . x
>6988	MemberAccess	n . x
>6989	Identifier	x
>6990	Identifier	n
>6991	MemberAccess	t . x
>6992	Identifier	x
>6993	Identifier	t
>6994	IfStatement	if ( c > 6 )
>6995	CompoundStatement	 
>6996	BreakStatement	 
>6997	ExpressionStatement	 
>6998	AssignmentExpr	useValue = false
>6999	Identifier	false
>7000	Identifier	useValue
>7001	Condition	 
>7002	RelationalExpression	c > 6
>7003	PrimaryExpression	6
>7004	Identifier	c
>7005	ExpressionStatement	 
>7006	IncDecOp	c ++
>7007	IncDec	++
>7008	Identifier	c
>7009	Condition	 
>7010	CallExpression	dsq -> game -> isObstructed ( t )
>7011	ArgumentList	t
>7012	Argument	t
>7013	Identifier	t
>7014	Callee	dsq -> game -> isObstructed
>7015	PtrMemberAccess	dsq -> game -> isObstructed
>7016	Identifier	isObstructed
>7017	PtrMemberAccess	dsq -> game
>7018	Identifier	game
>7019	Identifier	dsq
>7020	IdentifierDeclStatement	 
>7021	IdentifierDecl	useValue = true
>7022	AssignmentExpr	useValue = true
>7023	Identifier	true
>7024	Identifier	true
>7025	Identifier	useValue
>7026	IdentifierDeclType	bool
>7027	IdentifierDeclStatement	 
>7028	IdentifierDecl	c = 0
>7029	AssignmentExpr	c = 0
>7030	PrimaryExpression	0
>7031	Identifier	c
>7032	Identifier	c
>7033	IdentifierDeclType	int
>7034	IdentifierDeclStatement	 
>7035	IdentifierDecl	t ( position )
>7036	Identifier	position
>7037	Identifier	t
>7038	IdentifierDeclType	TileVector
>7039	IdentifierDeclStatement	 
>7040	IdentifierDecl	n = getNormal ( )
>7041	AssignmentExpr	n = getNormal ( )
>7042	CallExpression	getNormal ( )
>7043	ArgumentList	 
>7044	Callee	getNormal
>7045	Identifier	getNormal
>7046	Identifier	n
>7047	Identifier	n
>7048	IdentifierDeclType	Vector
>7071	FunctionDef	Entity 
>7072	ParameterList	 
>7073	ReturnType	void
>7074	CompoundStatement	 
>7075	ExpressionStatement	 
>7076	CallExpression	disabledDamageTypes . clear ( )
>7077	ArgumentList	 
>7078	Callee	disabledDamageTypes . clear
>7079	MemberAccess	disabledDamageTypes . clear
>7080	Identifier	clear
>7081	Identifier	disabledDamageTypes
>7086	FunctionDef	Entity 
>7087	ParameterList	DamageType dt , bool v
>7088	Parameter	 
>7089	Identifier	v
>7090	ParameterType	bool
>7091	Parameter	 
>7092	Identifier	dt
>7093	ParameterType	DamageType
>7094	ReturnType	void
>7095	CompoundStatement	 
>7096	IfStatement	if ( v )
>7097	ElseStatement	else
>7098	ExpressionStatement	 
>7099	CallExpression	disabledDamageTypes . insert ( dt )
>7100	ArgumentList	dt
>7101	Argument	dt
>7102	Identifier	dt
>7103	Callee	disabledDamageTypes . insert
>7104	MemberAccess	disabledDamageTypes . insert
>7105	Identifier	insert
>7106	Identifier	disabledDamageTypes
>7107	ExpressionStatement	 
>7108	CallExpression	disabledDamageTypes . erase ( dt )
>7109	ArgumentList	dt
>7110	Argument	dt
>7111	Identifier	dt
>7112	Callee	disabledDamageTypes . erase
>7113	MemberAccess	disabledDamageTypes . erase
>7114	Identifier	erase
>7115	Identifier	disabledDamageTypes
>7116	Condition	 
>7117	Identifier	v
>7124	FunctionDef	Entity 
>7125	ParameterList	EatType et , const std 
>7126	Parameter	 
>7127	Identifier	file
>7128	ParameterType	const std 
>7129	Parameter	 
>7130	Identifier	et
>7131	ParameterType	EatType
>7132	ReturnType	void
>7133	CompoundStatement	 
>7134	IfStatement	if ( eatType == EAT_FILE )
>7135	CompoundStatement	 
>7136	IfStatement	if ( e )
>7137	ExpressionStatement	 
>7138	AssignmentExpr	eatData = * e
>7139	UnaryOp	* e
>7140	Identifier	e
>7141	UnaryOperator	*
>7142	Identifier	eatData
>7143	Condition	 
>7144	Identifier	e
>7145	IdentifierDeclStatement	 
>7146	IdentifierDecl	* e = dsq -> continuity . getEatData ( file )
>7147	AssignmentExpr	* e = dsq -> continuity . getEatData ( file )
>7148	CallExpression	dsq -> continuity . getEatData ( file )
>7149	ArgumentList	file
>7150	Argument	file
>7151	Identifier	file
>7152	Callee	dsq -> continuity . getEatData
>7153	MemberAccess	dsq -> continuity . getEatData
>7154	Identifier	getEatData
>7155	PtrMemberAccess	dsq -> continuity
>7156	Identifier	continuity
>7157	Identifier	dsq
>7158	Identifier	e
>7159	Identifier	e
>7160	IdentifierDeclType	EatData *
>7161	Condition	 
>7162	EqualityExpression	eatType == EAT_FILE
>7163	Identifier	EAT_FILE
>7164	Identifier	eatType
>7165	ExpressionStatement	 
>7166	AssignmentExpr	eatType = et
>7167	Identifier	et
>7168	Identifier	eatType
>7183	FunctionDef	Entity 
>7184	ParameterList	bool v
>7185	Parameter	 
>7186	Identifier	v
>7187	ParameterType	bool
>7188	ReturnType	void
>7189	CompoundStatement	 
>7190	IfStatement	if ( v )
>7191	ElseStatement	else
>7192	CompoundStatement	 
>7193	ForStatement	for ( int i = DT_AVATAR_MAX ; i < DT_REALMAX ; i ++ )
>7194	ExpressionStatement	 
>7195	CallExpression	disabledDamageTypes . insert ( DamageType ( i ) )
>7196	ArgumentList	DamageType ( i )
>7197	Argument	DamageType ( i )
>7198	CallExpression	DamageType ( i )
>7199	ArgumentList	i
>7200	Argument	i
>7201	Identifier	i
>7202	Callee	DamageType
>7203	Identifier	DamageType
>7204	Callee	disabledDamageTypes . insert
>7205	MemberAccess	disabledDamageTypes . insert
>7206	Identifier	insert
>7207	Identifier	disabledDamageTypes
>7208	IncDecOp	 
>7209	IncDec	++
>7210	Identifier	i
>7211	Condition	 
>7212	RelationalExpression	i < DT_REALMAX
>7213	Identifier	DT_REALMAX
>7214	Identifier	i
>7215	ForInit	 
>7216	IdentifierDeclStatement	int i = DT_AVATAR_MAX ;
>7217	IdentifierDecl	i = DT_AVATAR_MAX
>7218	AssignmentExpr	i = DT_AVATAR_MAX
>7219	Identifier	DT_AVATAR_MAX
>7220	Identifier	DT_AVATAR_MAX
>7221	Identifier	i
>7222	IdentifierDeclType	int
>7223	ForStatement	for ( int i = DT_AVATAR ; i < DT_AVATAR_REALMAX ; i ++ )
>7224	ExpressionStatement	 
>7225	CallExpression	disabledDamageTypes . insert ( DamageType ( i ) )
>7226	ArgumentList	DamageType ( i )
>7227	Argument	DamageType ( i )
>7228	CallExpression	DamageType ( i )
>7229	ArgumentList	i
>7230	Argument	i
>7231	Identifier	i
>7232	Callee	DamageType
>7233	Identifier	DamageType
>7234	Callee	disabledDamageTypes . insert
>7235	MemberAccess	disabledDamageTypes . insert
>7236	Identifier	insert
>7237	Identifier	disabledDamageTypes
>7238	IncDecOp	 
>7239	IncDec	++
>7240	Identifier	i
>7241	Condition	 
>7242	RelationalExpression	i < DT_AVATAR_REALMAX
>7243	Identifier	DT_AVATAR_REALMAX
>7244	Identifier	i
>7245	ForInit	 
>7246	IdentifierDeclStatement	int i = DT_AVATAR ;
>7247	IdentifierDecl	i = DT_AVATAR
>7248	AssignmentExpr	i = DT_AVATAR
>7249	Identifier	DT_AVATAR
>7250	Identifier	DT_AVATAR
>7251	Identifier	i
>7252	IdentifierDeclType	int
>7253	ForStatement	for ( int i = DT_ENEMY ; i < DT_ENEMY_REALMAX ; i ++ )
>7254	ExpressionStatement	 
>7255	CallExpression	disabledDamageTypes . insert ( DamageType ( i ) )
>7256	ArgumentList	DamageType ( i )
>7257	Argument	DamageType ( i )
>7258	CallExpression	DamageType ( i )
>7259	ArgumentList	i
>7260	Argument	i
>7261	Identifier	i
>7262	Callee	DamageType
>7263	Identifier	DamageType
>7264	Callee	disabledDamageTypes . insert
>7265	MemberAccess	disabledDamageTypes . insert
>7266	Identifier	insert
>7267	Identifier	disabledDamageTypes
>7268	IncDecOp	 
>7269	IncDec	++
>7270	Identifier	i
>7271	Condition	 
>7272	RelationalExpression	i < DT_ENEMY_REALMAX
>7273	Identifier	DT_ENEMY_REALMAX
>7274	Identifier	i
>7275	ForInit	 
>7276	IdentifierDeclStatement	int i = DT_ENEMY ;
>7277	IdentifierDecl	i = DT_ENEMY
>7278	AssignmentExpr	i = DT_ENEMY
>7279	Identifier	DT_ENEMY
>7280	Identifier	DT_ENEMY
>7281	Identifier	i
>7282	IdentifierDeclType	int
>7283	ExpressionStatement	 
>7284	CallExpression	clearDamageTargets ( )
>7285	ArgumentList	 
>7286	Callee	clearDamageTargets
>7287	Identifier	clearDamageTargets
>7288	Condition	 
>7289	Identifier	v
>7303	FunctionDef	Entity 
>7304	ParameterList	DamageType dt
>7305	Parameter	 
>7306	Identifier	dt
>7307	ParameterType	DamageType
>7308	ReturnType	bool
>7309	CompoundStatement	 
>7310	ReturnStatement	 
>7311	EqualityExpression	disabledDamageTypes . find ( dt ) == disabledDamageTypes . end ( )
>7312	CallExpression	disabledDamageTypes . end ( )
>7313	ArgumentList	 
>7314	Callee	disabledDamageTypes . end
>7315	MemberAccess	disabledDamageTypes . end
>7316	Identifier	end
>7317	Identifier	disabledDamageTypes
>7318	CallExpression	disabledDamageTypes . find ( dt )
>7319	ArgumentList	dt
>7320	Argument	dt
>7321	Identifier	dt
>7322	Callee	disabledDamageTypes . find
>7323	MemberAccess	disabledDamageTypes . find
>7324	Identifier	find
>7325	Identifier	disabledDamageTypes
>7333	FunctionDef	Entity 
>7334	ParameterList	 
>7335	ReturnType	float
>7336	CompoundStatement	 
>7337	ReturnStatement	 
>7338	MultiplicativeExpression	float ( health ) / float ( maxHealth )
>7339	CallExpression	float ( maxHealth )
>7340	ArgumentList	maxHealth
>7341	Argument	maxHealth
>7342	Identifier	maxHealth
>7343	Callee	float
>7344	Identifier	float
>7345	CallExpression	float ( health )
>7346	ArgumentList	health
>7347	Argument	health
>7348	Identifier	health
>7349	Callee	float
>7350	Identifier	float
>7357	FunctionDef	Entity 
>7358	ParameterList	 
>7359	ReturnType	Vector
>7360	CompoundStatement	 
>7361	ReturnStatement	 
>7362	AdditiveExpression	vel + vel2
>7363	Identifier	vel2
>7364	Identifier	vel
>7370	FunctionDef	Entity 
>7371	ParameterList	 
>7372	ReturnType	void
>7373	CompoundStatement	 
>7374	IfStatement	if ( ! calledEntityDied )
>7375	CompoundStatement	 
>7376	ExpressionStatement	 
>7377	AssignmentExpr	calledEntityDied = true
>7378	Identifier	true
>7379	Identifier	calledEntityDied
>7380	ExpressionStatement	 
>7381	CallExpression	dsq -> game -> entityDied ( this )
>7382	ArgumentList	this
>7383	Argument	this
>7384	Identifier	this
>7385	Callee	dsq -> game -> entityDied
>7386	PtrMemberAccess	dsq -> game -> entityDied
>7387	Identifier	entityDied
>7388	PtrMemberAccess	dsq -> game
>7389	Identifier	game
>7390	Identifier	dsq
>7391	Condition	 
>7392	UnaryOp	! calledEntityDied
>7393	Identifier	calledEntityDied
>7394	UnaryOperator	!
>7404	FunctionDef	Entity 
>7405	ParameterList	float m , float t
>7406	Parameter	 
>7407	Identifier	t
>7408	ParameterType	float
>7409	Parameter	 
>7410	Identifier	m
>7411	ParameterType	float
>7412	ReturnType	void
>7413	CompoundStatement	 
>7414	IfStatement	if ( poison )
>7415	ExpressionStatement	 
>7416	CallExpression	poisonBitTimer . start ( dsq -> continuity . poisonBitTime )
>7417	ArgumentList	dsq -> continuity . poisonBitTime
>7418	Argument	dsq -> continuity . poisonBitTime
>7419	MemberAccess	dsq -> continuity . poisonBitTime
>7420	Identifier	poisonBitTime
>7421	PtrMemberAccess	dsq -> continuity
>7422	Identifier	continuity
>7423	Identifier	dsq
>7424	Callee	poisonBitTimer . start
>7425	MemberAccess	poisonBitTimer . start
>7426	Identifier	start
>7427	Identifier	poisonBitTimer
>7428	Condition	 
>7429	Identifier	poison
>7430	ExpressionStatement	 
>7431	CallExpression	poisonTimer . start ( t )
>7432	ArgumentList	t
>7433	Argument	t
>7434	Identifier	t
>7435	Callee	poisonTimer . start
>7436	MemberAccess	poisonTimer . start
>7437	Identifier	start
>7438	Identifier	poisonTimer
>7439	ExpressionStatement	 
>7440	AssignmentExpr	poison = m
>7441	Identifier	m
>7442	Identifier	poison
>7455	FunctionDef	Entity 
>7456	ParameterList	float dt
>7457	Parameter	 
>7458	Identifier	dt
>7459	ParameterType	float
>7460	ReturnType	void
>7461	CompoundStatement	 
>7462	ExpressionStatement	 
>7463	CallExpression	updateLance ( dt )
>7464	ArgumentList	dt
>7465	Argument	dt
>7466	Identifier	dt
>7467	Callee	updateLance
>7468	Identifier	updateLance
>7469	IfStatement	if ( stickToNaijasHead )
>7470	CompoundStatement	 
>7471	ExpressionStatement	 
>7472	AssignmentExpr	position = dsq -> game -> avatar -> headPosition
>7473	PtrMemberAccess	dsq -> game -> avatar -> headPosition
>7474	Identifier	headPosition
>7475	PtrMemberAccess	dsq -> game -> avatar
>7476	Identifier	avatar
>7477	PtrMemberAccess	dsq -> game
>7478	Identifier	game
>7479	Identifier	dsq
>7480	Identifier	position
>7481	Condition	 
>7482	Identifier	stickToNaijasHead
>7483	IfStatement	if ( getState ( ) == STATE_PUSH )
>7484	ElseStatement	else
>7485	IfStatement	if ( followEntity )
>7486	CompoundStatement	 
>7487	IfStatement	if ( mov . getSquaredLength2D ( ) > sqr ( 96 ) )
>7488	ElseStatement	else
>7489	CompoundStatement	 
>7490	IfStatement	if ( ! anim || anim -> name != \"idle\" )
>7491	ExpressionStatement	 
>7492	CallExpression	idle ( )
>7493	ArgumentList	 
>7494	Callee	idle
>7495	Identifier	idle
>7496	Condition	 
>7497	OrExpression	! anim || anim -> name != \"idle\"
>7498	EqualityExpression	anim -> name != \"idle\"
>7499	PrimaryExpression	\"idle\"
>7500	PtrMemberAccess	anim -> name
>7501	Identifier	name
>7502	Identifier	anim
>7503	UnaryOp	! anim
>7504	Identifier	anim
>7505	UnaryOperator	!
>7506	IdentifierDeclStatement	 
>7507	IdentifierDecl	* anim = skeletalSprite . getCurrentAnimation ( )
>7508	AssignmentExpr	* anim = skeletalSprite . getCurrentAnimation ( )
>7509	CallExpression	skeletalSprite . getCurrentAnimation ( )
>7510	ArgumentList	 
>7511	Callee	skeletalSprite . getCurrentAnimation
>7512	MemberAccess	skeletalSprite . getCurrentAnimation
>7513	Identifier	getCurrentAnimation
>7514	Identifier	skeletalSprite
>7515	Identifier	anim
>7516	Identifier	anim
>7517	IdentifierDeclType	Animation *
>7518	CompoundStatement	 
>7519	ExpressionStatement	 
>7520	CallExpression	movementDetails ( diff )
>7521	ArgumentList	diff
>7522	Argument	diff
>7523	Identifier	diff
>7524	Callee	movementDetails
>7525	Identifier	movementDetails
>7526	IdentifierDeclStatement	 
>7527	IdentifierDecl	diff = position - lastPos
>7528	AssignmentExpr	diff = position - lastPos
>7529	AdditiveExpression	position - lastPos
>7530	Identifier	lastPos
>7531	Identifier	position
>7532	Identifier	diff
>7533	Identifier	diff
>7534	IdentifierDeclType	Vector
>7535	ExpressionStatement	 
>7536	AssignmentExpr	position += mov * dt
>7537	MultiplicativeExpression	mov * dt
>7538	Identifier	dt
>7539	Identifier	mov
>7540	Identifier	position
>7541	ExpressionStatement	 
>7542	CallExpression	mov . setLength2D ( spd )
>7543	ArgumentList	spd
>7544	Argument	spd
>7545	Identifier	spd
>7546	Callee	mov . setLength2D
>7547	MemberAccess	mov . setLength2D
>7548	Identifier	setLength2D
>7549	Identifier	mov
>7550	IfStatement	if ( spd < 0 )
>7551	ElseStatement	else
>7552	IfStatement	if ( spd < 400 )
>7553	ElseStatement	else
>7554	ExpressionStatement	 
>7555	AssignmentExpr	spd = 800
>7556	PrimaryExpression	800
>7557	Identifier	spd
>7558	ExpressionStatement	 
>7559	AssignmentExpr	spd *= 2
>7560	PrimaryExpression	2
>7561	Identifier	spd
>7562	Condition	 
>7563	RelationalExpression	spd < 400
>7564	PrimaryExpression	400
>7565	Identifier	spd
>7566	ExpressionStatement	 
>7567	AssignmentExpr	spd = 0
>7568	PrimaryExpression	0
>7569	Identifier	spd
>7570	Condition	 
>7571	RelationalExpression	spd < 0
>7572	PrimaryExpression	0
>7573	Identifier	spd
>7574	ExpressionStatement	 
>7575	AssignmentExpr	spd -= 64
>7576	PrimaryExpression	64
>7577	Identifier	spd
>7578	IdentifierDeclStatement	 
>7579	IdentifierDecl	spd = mov . getLength2D ( )
>7580	AssignmentExpr	spd = mov . getLength2D ( )
>7581	CallExpression	mov . getLength2D ( )
>7582	ArgumentList	 
>7583	Callee	mov . getLength2D
>7584	MemberAccess	mov . getLength2D
>7585	Identifier	getLength2D
>7586	Identifier	mov
>7587	Identifier	spd
>7588	Identifier	spd
>7589	IdentifierDeclType	int
>7590	Condition	 
>7591	RelationalExpression	mov . getSquaredLength2D ( ) > sqr ( 96 )
>7592	CallExpression	sqr ( 96 )
>7593	ArgumentList	96
>7594	Argument	96
>7595	PrimaryExpression	96
>7596	Callee	sqr
>7597	Identifier	sqr
>7598	CallExpression	mov . getSquaredLength2D ( )
>7599	ArgumentList	 
>7600	Callee	mov . getSquaredLength2D
>7601	MemberAccess	mov . getSquaredLength2D
>7602	Identifier	getSquaredLength2D
>7603	Identifier	mov
>7604	IdentifierDeclStatement	 
>7605	IdentifierDecl	mov = followEntity -> position + off - this -> position
>7606	AssignmentExpr	mov = followEntity -> position + off - this -> position
>7607	AdditiveExpression	followEntity -> position + off - this -> position
>7608	AdditiveExpression	off - this -> position
>7609	PtrMemberAccess	this -> position
>7610	Identifier	position
>7611	Identifier	this
>7612	Identifier	off
>7613	PtrMemberAccess	followEntity -> position
>7614	Identifier	position
>7615	Identifier	followEntity
>7616	Identifier	mov
>7617	Identifier	mov
>7618	IdentifierDeclType	Vector
>7619	IfStatement	if ( followEntity -> vel . getSquaredLength2D ( ) > sqr ( 1 ) )
>7620	ElseStatement	else
>7621	IfStatement	if ( followEntity -> lastMove . getSquaredLength2D ( ) > sqr ( 1 ) )
>7622	CompoundStatement	 
>7623	SwitchStatement	switch ( followPos )
>7624	CompoundStatement	 
>7625	BreakStatement	 
>7626	ExpressionStatement	 
>7627	CallExpression	off . setLength2D ( - sz )
>7628	ArgumentList	- sz
>7629	Argument	- sz
>7630	UnaryOp	- sz
>7631	Identifier	sz
>7632	UnaryOperator	-
>7633	Callee	off . setLength2D
>7634	MemberAccess	off . setLength2D
>7635	Identifier	setLength2D
>7636	Identifier	off
>7637	Label	 
>7638	BreakStatement	 
>7639	ExpressionStatement	 
>7640	CallExpression	off . setLength2D ( sz )
>7641	ArgumentList	sz
>7642	Argument	sz
>7643	Identifier	sz
>7644	Callee	off . setLength2D
>7645	MemberAccess	off . setLength2D
>7646	Identifier	setLength2D
>7647	Identifier	off
>7648	Label	 
>7649	Condition	 
>7650	Identifier	followPos
>7651	ExpressionStatement	 
>7652	AssignmentExpr	off = followEntity -> lastMove . getPerpendicularLeft ( )
>7653	CallExpression	followEntity -> lastMove . getPerpendicularLeft ( )
>7654	ArgumentList	 
>7655	Callee	followEntity -> lastMove . getPerpendicularLeft
>7656	MemberAccess	followEntity -> lastMove . getPerpendicularLeft
>7657	Identifier	getPerpendicularLeft
>7658	PtrMemberAccess	followEntity -> lastMove
>7659	Identifier	lastMove
>7660	Identifier	followEntity
>7661	Identifier	off
>7662	Condition	 
>7663	RelationalExpression	followEntity -> lastMove . getSquaredLength2D ( ) > sqr ( 1 )
>7664	CallExpression	sqr ( 1 )
>7665	ArgumentList	1
>7666	Argument	1
>7667	PrimaryExpression	1
>7668	Callee	sqr
>7669	Identifier	sqr
>7670	CallExpression	followEntity -> lastMove . getSquaredLength2D ( )
>7671	ArgumentList	 
>7672	Callee	followEntity -> lastMove . getSquaredLength2D
>7673	MemberAccess	followEntity -> lastMove . getSquaredLength2D
>7674	Identifier	getSquaredLength2D
>7675	PtrMemberAccess	followEntity -> lastMove
>7676	Identifier	lastMove
>7677	Identifier	followEntity
>7678	CompoundStatement	 
>7679	SwitchStatement	switch ( followPos )
>7680	CompoundStatement	 
>7681	BreakStatement	 
>7682	ExpressionStatement	 
>7683	CallExpression	off . setLength2D ( - sz )
>7684	ArgumentList	- sz
>7685	Argument	- sz
>7686	UnaryOp	- sz
>7687	Identifier	sz
>7688	UnaryOperator	-
>7689	Callee	off . setLength2D
>7690	MemberAccess	off . setLength2D
>7691	Identifier	setLength2D
>7692	Identifier	off
>7693	Label	 
>7694	BreakStatement	 
>7695	ExpressionStatement	 
>7696	CallExpression	off . setLength2D ( sz )
>7697	ArgumentList	sz
>7698	Argument	sz
>7699	Identifier	sz
>7700	Callee	off . setLength2D
>7701	MemberAccess	off . setLength2D
>7702	Identifier	setLength2D
>7703	Identifier	off
>7704	Label	 
>7705	Condition	 
>7706	Identifier	followPos
>7707	ExpressionStatement	 
>7708	AssignmentExpr	off = followEntity -> vel . getPerpendicularLeft ( )
>7709	CallExpression	followEntity -> vel . getPerpendicularLeft ( )
>7710	ArgumentList	 
>7711	Callee	followEntity -> vel . getPerpendicularLeft
>7712	MemberAccess	followEntity -> vel . getPerpendicularLeft
>7713	Identifier	getPerpendicularLeft
>7714	PtrMemberAccess	followEntity -> vel
>7715	Identifier	vel
>7716	Identifier	followEntity
>7717	Identifier	off
>7718	Condition	 
>7719	RelationalExpression	followEntity -> vel . getSquaredLength2D ( ) > sqr ( 1 )
>7720	CallExpression	sqr ( 1 )
>7721	ArgumentList	1
>7722	Argument	1
>7723	PrimaryExpression	1
>7724	Callee	sqr
>7725	Identifier	sqr
>7726	CallExpression	followEntity -> vel . getSquaredLength2D ( )
>7727	ArgumentList	 
>7728	Callee	followEntity -> vel . getSquaredLength2D
>7729	MemberAccess	followEntity -> vel . getSquaredLength2D
>7730	Identifier	getSquaredLength2D
>7731	PtrMemberAccess	followEntity -> vel
>7732	Identifier	vel
>7733	Identifier	followEntity
>7734	IdentifierDeclStatement	 
>7735	IdentifierDecl	sz = 96
>7736	AssignmentExpr	sz = 96
>7737	PrimaryExpression	96
>7738	Identifier	sz
>7739	Identifier	sz
>7740	IdentifierDeclType	int
>7741	IdentifierDeclStatement	 
>7742	IdentifierDecl	off
>7743	Identifier	off
>7744	IdentifierDeclType	Vector
>7745	IdentifierDeclStatement	 
>7746	IdentifierDecl	lastPos = position
>7747	AssignmentExpr	lastPos = position
>7748	Identifier	position
>7749	Identifier	position
>7750	Identifier	lastPos
>7751	IdentifierDeclType	Vector
>7752	Condition	 
>7753	Identifier	followEntity
>7754	CompoundStatement	 
>7755	ExpressionStatement	 
>7756	AssignmentExpr	vel = pushVec
>7757	Identifier	pushVec
>7758	Identifier	vel
>7759	Condition	 
>7760	EqualityExpression	getState ( ) == STATE_PUSH
>7761	Identifier	STATE_PUSH
>7762	CallExpression	getState ( )
>7763	ArgumentList	 
>7764	Callee	getState
>7765	Identifier	getState
>7766	IfStatement	if ( bubble )
>7767	ExpressionStatement	 
>7768	AssignmentExpr	bubble -> position = this -> position
>7769	PtrMemberAccess	this -> position
>7770	Identifier	position
>7771	Identifier	this
>7772	PtrMemberAccess	bubble -> position
>7773	Identifier	position
>7774	Identifier	bubble
>7775	Condition	 
>7776	Identifier	bubble
>7777	ExpressionStatement	 
>7778	CallExpression	multColor . update ( dt )
>7779	ArgumentList	dt
>7780	Argument	dt
>7781	Identifier	dt
>7782	Callee	multColor . update
>7783	MemberAccess	multColor . update
>7784	Identifier	update
>7785	Identifier	multColor
>7786	IfStatement	if ( wasFollowing && ! isFollowingPath ( ) )
>7787	CompoundStatement	 
>7788	ExpressionStatement	 
>7789	CallExpression	onPathEnd ( )
>7790	ArgumentList	 
>7791	Callee	onPathEnd
>7792	Identifier	onPathEnd
>7793	Condition	 
>7794	AndExpression	wasFollowing && ! isFollowingPath ( )
>7795	UnaryOp	! isFollowingPath ( )
>7796	CallExpression	isFollowingPath ( )
>7797	ArgumentList	 
>7798	Callee	isFollowingPath
>7799	Identifier	isFollowingPath
>7800	UnaryOperator	!
>7801	Identifier	wasFollowing
>7802	IfStatement	if ( position . isFollowingPath ( ) && swimPath )
>7803	ElseStatement	else
>7804	CompoundStatement	 
>7805	IfStatement	if ( watchingEntity )
>7806	CompoundStatement	 
>7807	IfStatement	if ( v . x < 0 )
>7808	ElseStatement	else
>7809	IfStatement	if ( v . x > 0 )
>7810	CompoundStatement	 
>7811	IfStatement	if ( isfh ( ) )
>7812	ExpressionStatement	 
>7813	CallExpression	flipHorizontal ( )
>7814	ArgumentList	 
>7815	Callee	flipHorizontal
>7816	Identifier	flipHorizontal
>7817	Condition	 
>7818	CallExpression	isfh ( )
>7819	ArgumentList	 
>7820	Callee	isfh
>7821	Identifier	isfh
>7822	Condition	 
>7823	RelationalExpression	v . x > 0
>7824	PrimaryExpression	0
>7825	MemberAccess	v . x
>7826	Identifier	x
>7827	Identifier	v
>7828	CompoundStatement	 
>7829	IfStatement	if ( ! isfh ( ) )
>7830	ExpressionStatement	 
>7831	CallExpression	flipHorizontal ( )
>7832	ArgumentList	 
>7833	Callee	flipHorizontal
>7834	Identifier	flipHorizontal
>7835	Condition	 
>7836	UnaryOp	! isfh ( )
>7837	CallExpression	isfh ( )
>7838	ArgumentList	 
>7839	Callee	isfh
>7840	Identifier	isfh
>7841	UnaryOperator	!
>7842	Condition	 
>7843	RelationalExpression	v . x < 0
>7844	PrimaryExpression	0
>7845	MemberAccess	v . x
>7846	Identifier	x
>7847	Identifier	v
>7848	IdentifierDeclStatement	 
>7849	IdentifierDecl	v = position - watchingEntity -> position
>7850	AssignmentExpr	v = position - watchingEntity -> position
>7851	AdditiveExpression	position - watchingEntity -> position
>7852	PtrMemberAccess	watchingEntity -> position
>7853	Identifier	position
>7854	Identifier	watchingEntity
>7855	Identifier	position
>7856	Identifier	v
>7857	Identifier	v
>7858	IdentifierDeclType	Vector
>7859	Condition	 
>7860	Identifier	watchingEntity
>7861	CompoundStatement	 
>7862	ExpressionStatement	 
>7863	CallExpression	movementDetails ( v )
>7864	ArgumentList	v
>7865	Argument	v
>7866	Identifier	v
>7867	Callee	movementDetails
>7868	Identifier	movementDetails
>7869	Condition	 
>7870	AndExpression	position . isFollowingPath ( ) && swimPath
>7871	Identifier	swimPath
>7872	CallExpression	position . isFollowingPath ( )
>7873	ArgumentList	 
>7874	Callee	position . isFollowingPath
>7875	MemberAccess	position . isFollowingPath
>7876	Identifier	isFollowingPath
>7877	Identifier	position
>7878	ExpressionStatement	 
>7879	AssignmentExpr	lastMove = v
>7880	Identifier	v
>7881	Identifier	lastMove
>7882	IdentifierDeclStatement	 
>7883	IdentifierDecl	v = position - lastPos
>7884	AssignmentExpr	v = position - lastPos
>7885	AdditiveExpression	position - lastPos
>7886	Identifier	lastPos
>7887	Identifier	position
>7888	Identifier	v
>7889	Identifier	v
>7890	IdentifierDeclType	Vector
>7891	ExpressionStatement	 
>7892	CallExpression	Quad 
>7893	ArgumentList	dt
>7894	Argument	dt
>7895	Identifier	dt
>7896	Callee	Quad 
>7897	Identifier	Quad 
>7898	IfStatement	if ( currentState != STATE_DEATHSCENE && currentState != STATE_DEAD )
>7899	CompoundStatement	 
>7900	IfStatement	if ( poison )
>7901	CompoundStatement	 
>7902	IfStatement	if ( poisonBitTimer . updateCheck ( dt ) )
>7903	CompoundStatement	 
>7904	ExpressionStatement	 
>7905	CallExpression	dsq -> spawnParticleEffect ( \"PoisonBubbles\" , position )
>7906	ArgumentList	\"PoisonBubbles\"
>7907	Argument	position
>7908	Identifier	position
>7909	Argument	\"PoisonBubbles\"
>7910	PrimaryExpression	\"PoisonBubbles\"
>7911	Callee	dsq -> spawnParticleEffect
>7912	PtrMemberAccess	dsq -> spawnParticleEffect
>7913	Identifier	spawnParticleEffect
>7914	Identifier	dsq
>7915	ExpressionStatement	 
>7916	CallExpression	damage ( d )
>7917	ArgumentList	d
>7918	Argument	d
>7919	Identifier	d
>7920	Callee	damage
>7921	Identifier	damage
>7922	ExpressionStatement	 
>7923	AssignmentExpr	d . damage = 0.5f * poison
>7924	MultiplicativeExpression	0.5f * poison
>7925	Identifier	poison
>7926	PrimaryExpression	0.5f
>7927	MemberAccess	d . damage
>7928	Identifier	damage
>7929	Identifier	d
>7930	ExpressionStatement	 
>7931	AssignmentExpr	d . useTimer = false
>7932	Identifier	false
>7933	MemberAccess	d . useTimer
>7934	Identifier	useTimer
>7935	Identifier	d
>7936	ExpressionStatement	 
>7937	AssignmentExpr	d . damageType = DT_ENEMY_ACTIVEPOISON
>7938	Identifier	DT_ENEMY_ACTIVEPOISON
>7939	MemberAccess	d . damageType
>7940	Identifier	damageType
>7941	Identifier	d
>7942	IdentifierDeclStatement	 
>7943	IdentifierDecl	d
>7944	Identifier	d
>7945	IdentifierDeclType	DamageData
>7946	ExpressionStatement	 
>7947	CallExpression	poisonBitTimer . start ( dsq -> continuity . poisonBitTime )
>7948	ArgumentList	dsq -> continuity . poisonBitTime
>7949	Argument	dsq -> continuity . poisonBitTime
>7950	MemberAccess	dsq -> continuity . poisonBitTime
>7951	Identifier	poisonBitTime
>7952	PtrMemberAccess	dsq -> continuity
>7953	Identifier	continuity
>7954	Identifier	dsq
>7955	Callee	poisonBitTimer . start
>7956	MemberAccess	poisonBitTimer . start
>7957	Identifier	start
>7958	Identifier	poisonBitTimer
>7959	Condition	 
>7960	CallExpression	poisonBitTimer . updateCheck ( dt )
>7961	ArgumentList	dt
>7962	Argument	dt
>7963	Identifier	dt
>7964	Callee	poisonBitTimer . updateCheck
>7965	MemberAccess	poisonBitTimer . updateCheck
>7966	Identifier	updateCheck
>7967	Identifier	poisonBitTimer
>7968	Condition	 
>7969	Identifier	poison
>7970	Condition	 
>7971	AndExpression	currentState != STATE_DEATHSCENE && currentState != STATE_DEAD
>7972	EqualityExpression	currentState != STATE_DEAD
>7973	Identifier	STATE_DEAD
>7974	Identifier	currentState
>7975	EqualityExpression	currentState != STATE_DEATHSCENE
>7976	Identifier	STATE_DEATHSCENE
>7977	Identifier	currentState
>7978	IfStatement	if ( poisonTimer . updateCheck ( dt ) )
>7979	CompoundStatement	 
>7980	ExpressionStatement	 
>7981	AssignmentExpr	poison = 0
>7982	PrimaryExpression	0
>7983	Identifier	poison
>7984	Condition	 
>7985	CallExpression	poisonTimer . updateCheck ( dt )
>7986	ArgumentList	dt
>7987	Argument	dt
>7988	Identifier	dt
>7989	Callee	poisonTimer . updateCheck
>7990	MemberAccess	poisonTimer . updateCheck
>7991	Identifier	updateCheck
>7992	Identifier	poisonTimer
>7993	IfStatement	if ( burstTimer . updateCheck ( dt ) )
>7994	CompoundStatement	 
>7995	ExpressionStatement	 
>7996	AssignmentExpr	position . data -> pathTimeMultiplier = 1
>7997	PrimaryExpression	1
>7998	PtrMemberAccess	position . data -> pathTimeMultiplier
>7999	Identifier	pathTimeMultiplier
>8000	MemberAccess	position . data
>8001	Identifier	data
>8002	Identifier	position
>8003	ExpressionStatement	 
>8004	CallExpression	position . ensureData ( )
>8005	ArgumentList	 
>8006	Callee	position . ensureData
>8007	MemberAccess	position . ensureData
>8008	Identifier	ensureData
>8009	Identifier	position
>8010	Condition	 
>8011	CallExpression	burstTimer . updateCheck ( dt )
>8012	ArgumentList	dt
>8013	Argument	dt
>8014	Identifier	dt
>8015	Callee	burstTimer . updateCheck
>8016	MemberAccess	burstTimer . updateCheck
>8017	Identifier	updateCheck
>8018	Identifier	burstTimer
>8019	IfStatement	if ( isFollowingPath ( ) )
>8020	ExpressionStatement	 
>8021	AssignmentExpr	wasFollowing = true
>8022	Identifier	true
>8023	Identifier	wasFollowing
>8024	Condition	 
>8025	CallExpression	isFollowingPath ( )
>8026	ArgumentList	 
>8027	Callee	isFollowingPath
>8028	Identifier	isFollowingPath
>8029	IdentifierDeclStatement	 
>8030	IdentifierDecl	wasFollowing = false
>8031	AssignmentExpr	wasFollowing = false
>8032	Identifier	false
>8033	Identifier	false
>8034	Identifier	wasFollowing
>8035	IdentifierDeclType	bool
>8036	ExpressionStatement	 
>8037	AssignmentExpr	vel . z = 0
>8038	PrimaryExpression	0
>8039	MemberAccess	vel . z
>8040	Identifier	z
>8041	Identifier	vel
>8042	ExpressionStatement	 
>8043	AssignmentExpr	velocity . z = 0
>8044	PrimaryExpression	0
>8045	MemberAccess	velocity . z
>8046	Identifier	z
>8047	Identifier	velocity
>8048	ExpressionStatement	 
>8049	CallExpression	maxSpeedLerp . update ( dt )
>8050	ArgumentList	dt
>8051	Argument	dt
>8052	Identifier	dt
>8053	Callee	maxSpeedLerp . update
>8054	MemberAccess	maxSpeedLerp . update
>8055	Identifier	update
>8056	Identifier	maxSpeedLerp
>8057	IfStatement	if ( slowingToStopPath > 0 )
>8058	CompoundStatement	 
>8059	IfStatement	if ( slowingToStopPathTimer >= slowingToStopPath )
>8060	ElseStatement	else
>8061	CompoundStatement	 
>8062	ExpressionStatement	 
>8063	AssignmentExpr	position . data -> pathTimeMultiplier = 1.0f - ( slowingToStopPathTimer / slowingToStopPath )
>8064	AdditiveExpression	1.0f - ( slowingToStopPathTimer / slowingToStopPath )
>8065	MultiplicativeExpression	slowingToStopPathTimer / slowingToStopPath
>8066	Identifier	slowingToStopPath
>8067	Identifier	slowingToStopPathTimer
>8068	PrimaryExpression	1.0f
>8069	PtrMemberAccess	position . data -> pathTimeMultiplier
>8070	Identifier	pathTimeMultiplier
>8071	MemberAccess	position . data
>8072	Identifier	data
>8073	Identifier	position
>8074	CompoundStatement	 
>8075	ExpressionStatement	 
>8076	AssignmentExpr	slowingToStopPathTimer = 0
>8077	PrimaryExpression	0
>8078	Identifier	slowingToStopPathTimer
>8079	ExpressionStatement	 
>8080	AssignmentExpr	slowingToStopPath = 0
>8081	PrimaryExpression	0
>8082	Identifier	slowingToStopPath
>8083	ExpressionStatement	 
>8084	CallExpression	idle ( )
>8085	ArgumentList	 
>8086	Callee	idle
>8087	Identifier	idle
>8088	ExpressionStatement	 
>8089	AssignmentExpr	position . data -> pathTimeMultiplier = 1
>8090	PrimaryExpression	1
>8091	PtrMemberAccess	position . data -> pathTimeMultiplier
>8092	Identifier	pathTimeMultiplier
>8093	MemberAccess	position . data
>8094	Identifier	data
>8095	Identifier	position
>8096	Condition	 
>8097	RelationalExpression	slowingToStopPathTimer >= slowingToStopPath
>8098	Identifier	slowingToStopPath
>8099	Identifier	slowingToStopPathTimer
>8100	ExpressionStatement	 
>8101	CallExpression	position . ensureData ( )
>8102	ArgumentList	 
>8103	Callee	position . ensureData
>8104	MemberAccess	position . ensureData
>8105	Identifier	ensureData
>8106	Identifier	position
>8107	ExpressionStatement	 
>8108	AssignmentExpr	slowingToStopPathTimer += dt
>8109	Identifier	dt
>8110	Identifier	slowingToStopPathTimer
>8111	Condition	 
>8112	RelationalExpression	slowingToStopPath > 0
>8113	PrimaryExpression	0
>8114	Identifier	slowingToStopPath
>8115	IfStatement	if ( hair )
>8116	CompoundStatement	 
>8117	ExpressionStatement	 
>8118	AssignmentExpr	hair -> color . z = color . z * multColor . z
>8119	MultiplicativeExpression	color . z * multColor . z
>8120	MemberAccess	multColor . z
>8121	Identifier	z
>8122	Identifier	multColor
>8123	MemberAccess	color . z
>8124	Identifier	z
>8125	Identifier	color
>8126	MemberAccess	hair -> color . z
>8127	Identifier	z
>8128	PtrMemberAccess	hair -> color
>8129	Identifier	color
>8130	Identifier	hair
>8131	ExpressionStatement	 
>8132	AssignmentExpr	hair -> color . y = color . y * multColor . y
>8133	MultiplicativeExpression	color . y * multColor . y
>8134	MemberAccess	multColor . y
>8135	Identifier	y
>8136	Identifier	multColor
>8137	MemberAccess	color . y
>8138	Identifier	y
>8139	Identifier	color
>8140	MemberAccess	hair -> color . y
>8141	Identifier	y
>8142	PtrMemberAccess	hair -> color
>8143	Identifier	color
>8144	Identifier	hair
>8145	ExpressionStatement	 
>8146	AssignmentExpr	hair -> color . x = color . x * multColor . x
>8147	MultiplicativeExpression	color . x * multColor . x
>8148	MemberAccess	multColor . x
>8149	Identifier	x
>8150	Identifier	multColor
>8151	MemberAccess	color . x
>8152	Identifier	x
>8153	Identifier	color
>8154	MemberAccess	hair -> color . x
>8155	Identifier	x
>8156	PtrMemberAccess	hair -> color
>8157	Identifier	color
>8158	Identifier	hair
>8159	Condition	 
>8160	Identifier	hair
>8161	IfStatement	if ( ridingOnEntity )
>8162	CompoundStatement	 
>8163	ExpressionStatement	 
>8164	AssignmentExpr	position = ridingOnEntity -> position + ridingOnEntityOffset
>8165	AdditiveExpression	ridingOnEntity -> position + ridingOnEntityOffset
>8166	Identifier	ridingOnEntityOffset
>8167	PtrMemberAccess	ridingOnEntity -> position
>8168	Identifier	position
>8169	Identifier	ridingOnEntity
>8170	Identifier	position
>8171	Condition	 
>8172	Identifier	ridingOnEntity
>8173	IdentifierDeclStatement	 
>8174	IdentifierDecl	lastPos = position
>8175	AssignmentExpr	lastPos = position
>8176	Identifier	position
>8177	Identifier	position
>8178	Identifier	lastPos
>8179	IdentifierDeclType	Vector
>8180	IfStatement	if ( beautyFlip )
>8181	CompoundStatement	 
>8182	SwitchStatement	switch ( fhScale )
>8183	CompoundStatement	 
>8184	BreakStatement	 
>8185	IfStatement	if ( ! flipScale . isInterpolating ( ) )
>8186	ExpressionStatement	 
>8187	CallExpression	onFHScale ( )
>8188	ArgumentList	 
>8189	Callee	onFHScale
>8190	Identifier	onFHScale
>8191	Condition	 
>8192	UnaryOp	! flipScale . isInterpolating ( )
>8193	CallExpression	flipScale . isInterpolating ( )
>8194	ArgumentList	 
>8195	Callee	flipScale . isInterpolating
>8196	MemberAccess	flipScale . isInterpolating
>8197	Identifier	isInterpolating
>8198	Identifier	flipScale
>8199	UnaryOperator	!
>8200	Label	 
>8201	Condition	 
>8202	Identifier	fhScale
>8203	ExpressionStatement	 
>8204	CallExpression	flipScale . update ( dt )
>8205	ArgumentList	dt
>8206	Argument	dt
>8207	Identifier	dt
>8208	Callee	flipScale . update
>8209	MemberAccess	flipScale . update
>8210	Identifier	update
>8211	Identifier	flipScale
>8212	Condition	 
>8213	Identifier	beautyFlip
>8214	IfStatement	if ( boneLockDelay > 0 )
>8215	CompoundStatement	 
>8216	IfStatement	if ( boneLockDelay < 0 )
>8217	ExpressionStatement	 
>8218	AssignmentExpr	boneLockDelay = 0
>8219	PrimaryExpression	0
>8220	Identifier	boneLockDelay
>8221	Condition	 
>8222	RelationalExpression	boneLockDelay < 0
>8223	PrimaryExpression	0
>8224	Identifier	boneLockDelay
>8225	ExpressionStatement	 
>8226	AssignmentExpr	boneLockDelay -= dt
>8227	Identifier	dt
>8228	Identifier	boneLockDelay
>8229	Condition	 
>8230	RelationalExpression	boneLockDelay > 0
>8231	PrimaryExpression	0
>8232	Identifier	boneLockDelay
>8233	ExpressionStatement	 
>8234	CallExpression	vel2 . update ( dt )
>8235	ArgumentList	dt
>8236	Argument	dt
>8237	Identifier	dt
>8238	Callee	vel2 . update
>8239	MemberAccess	vel2 . update
>8240	Identifier	update
>8241	Identifier	vel2
>8242	IfStatement	if ( isv ( EV_CLAMPING , 1 ) )
>8243	CompoundStatement	 
>8244	IfStatement	if ( ! offset . isInterpolating ( ) )
>8245	CompoundStatement	 
>8246	ExpressionStatement	 
>8247	CallExpression	setv ( EV_CLAMPING , 0 )
>8248	ArgumentList	EV_CLAMPING
>8249	Argument	0
>8250	PrimaryExpression	0
>8251	Argument	EV_CLAMPING
>8252	Identifier	EV_CLAMPING
>8253	Callee	setv
>8254	Identifier	setv
>8255	Condition	 
>8256	UnaryOp	! offset . isInterpolating ( )
>8257	CallExpression	offset . isInterpolating ( )
>8258	ArgumentList	 
>8259	Callee	offset . isInterpolating
>8260	MemberAccess	offset . isInterpolating
>8261	Identifier	isInterpolating
>8262	Identifier	offset
>8263	UnaryOperator	!
>8264	Condition	 
>8265	CallExpression	isv ( EV_CLAMPING , 1 )
>8266	ArgumentList	EV_CLAMPING
>8267	Argument	1
>8268	PrimaryExpression	1
>8269	Argument	EV_CLAMPING
>8270	Identifier	EV_CLAMPING
>8271	Callee	isv
>8272	Identifier	isv
>8391	FunctionDef	Entity 
>8392	ParameterList	 
>8393	ReturnType	void
>8394	CompoundStatement	 
>8395	IfStatement	if ( boneLock . on )
>8396	CompoundStatement	 
>8397	ExpressionStatement	 
>8398	CallExpression	onUpdateBoneLock ( )
>8399	ArgumentList	 
>8400	Callee	onUpdateBoneLock
>8401	Identifier	onUpdateBoneLock
>8402	IfStatement	if ( dsq -> game -> collideCircleWithGrid ( position , collideRadius ) )
>8403	CompoundStatement	 
>8404	ReturnStatement	 
>8405	ExpressionStatement	 
>8406	CallExpression	setBoneLock ( BoneLock ( ) )
>8407	ArgumentList	BoneLock ( )
>8408	Argument	BoneLock ( )
>8409	CallExpression	BoneLock ( )
>8410	ArgumentList	 
>8411	Callee	BoneLock
>8412	Identifier	BoneLock
>8413	Callee	setBoneLock
>8414	Identifier	setBoneLock
>8415	ExpressionStatement	 
>8416	AssignmentExpr	position = lastPosition
>8417	Identifier	lastPosition
>8418	Identifier	position
>8419	Condition	 
>8420	CallExpression	dsq -> game -> collideCircleWithGrid ( position , collideRadius )
>8421	ArgumentList	position
>8422	Argument	collideRadius
>8423	Identifier	collideRadius
>8424	Argument	position
>8425	Identifier	position
>8426	Callee	dsq -> game -> collideCircleWithGrid
>8427	PtrMemberAccess	dsq -> game -> collideCircleWithGrid
>8428	Identifier	collideCircleWithGrid
>8429	PtrMemberAccess	dsq -> game
>8430	Identifier	game
>8431	Identifier	dsq
>8432	IfStatement	if ( boneLock . bone )
>8433	ElseStatement	else
>8434	CompoundStatement	 
>8435	ExpressionStatement	 
>8436	CallExpression	rotateToVec ( boneLock . wallNormal , 0.01 )
>8437	ArgumentList	boneLock . wallNormal
>8438	Argument	0.01
>8439	PrimaryExpression	0.01
>8440	Argument	boneLock . wallNormal
>8441	MemberAccess	boneLock . wallNormal
>8442	Identifier	wallNormal
>8443	Identifier	boneLock
>8444	Callee	rotateToVec
>8445	Identifier	rotateToVec
>8446	ExpressionStatement	 
>8447	CallExpression	boneLock . wallNormal . normalize2D ( )
>8448	ArgumentList	 
>8449	Callee	boneLock . wallNormal . normalize2D
>8450	MemberAccess	boneLock . wallNormal . normalize2D
>8451	Identifier	normalize2D
>8452	MemberAccess	boneLock . wallNormal
>8453	Identifier	wallNormal
>8454	Identifier	boneLock
>8455	ExpressionStatement	 
>8456	AssignmentExpr	boneLock . wallNormal = currentOffset
>8457	Identifier	currentOffset
>8458	MemberAccess	boneLock . wallNormal
>8459	Identifier	wallNormal
>8460	Identifier	boneLock
>8461	ExpressionStatement	 
>8462	AssignmentExpr	position = boneLock . entity -> getWorldPosition ( ) + currentOffset
>8463	AdditiveExpression	boneLock . entity -> getWorldPosition ( ) + currentOffset
>8464	Identifier	currentOffset
>8465	CallExpression	boneLock . entity -> getWorldPosition ( )
>8466	ArgumentList	 
>8467	Callee	boneLock . entity -> getWorldPosition
>8468	PtrMemberAccess	boneLock . entity -> getWorldPosition
>8469	Identifier	getWorldPosition
>8470	MemberAccess	boneLock . entity
>8471	Identifier	entity
>8472	Identifier	boneLock
>8473	Identifier	position
>8474	IdentifierDeclStatement	 
>8475	IdentifierDecl	currentOffset = getRotatedVector ( boneLock . circleOffset , boneLock . entity -> rotation . z - boneLock . origRot )
>8476	AssignmentExpr	currentOffset = getRotatedVector ( boneLock . circleOffset , boneLock . entity -> rotation . z - boneLock \
>8477	CallExpression	getRotatedVector ( boneLock . circleOffset , boneLock . entity -> rotation . z - boneLock . origRot )
>8478	ArgumentList	boneLock . circleOffset
>8479	Argument	boneLock . entity -> rotation . z - boneLock . origRot
>8480	AdditiveExpression	boneLock . entity -> rotation . z - boneLock . origRot
>8481	MemberAccess	boneLock . origRot
>8482	Identifier	origRot
>8483	Identifier	boneLock
>8484	MemberAccess	boneLock . entity -> rotation . z
>8485	Identifier	z
>8486	PtrMemberAccess	boneLock . entity -> rotation
>8487	Identifier	rotation
>8488	MemberAccess	boneLock . entity
>8489	Identifier	entity
>8490	Identifier	boneLock
>8491	Argument	boneLock . circleOffset
>8492	MemberAccess	boneLock . circleOffset
>8493	Identifier	circleOffset
>8494	Identifier	boneLock
>8495	Callee	getRotatedVector
>8496	Identifier	getRotatedVector
>8497	Identifier	currentOffset
>8498	Identifier	currentOffset
>8499	IdentifierDeclType	Vector
>8500	CompoundStatement	 
>8501	ExpressionStatement	 
>8502	CallExpression	rotateToVec ( boneLock . wallNormal , 0.01 )
>8503	ArgumentList	boneLock . wallNormal
>8504	Argument	0.01
>8505	PrimaryExpression	0.01
>8506	Argument	boneLock . wallNormal
>8507	MemberAccess	boneLock . wallNormal
>8508	Identifier	wallNormal
>8509	Identifier	boneLock
>8510	Callee	rotateToVec
>8511	Identifier	rotateToVec
>8512	ExpressionStatement	 
>8513	AssignmentExpr	boneLock . wallNormal = boneLock . bone -> getCollisionMaskNormal ( boneLock . collisionMaskIndex )
>8514	CallExpression	boneLock . bone -> getCollisionMaskNormal ( boneLock . collisionMaskIndex )
>8515	ArgumentList	boneLock . collisionMaskIndex
>8516	Argument	boneLock . collisionMaskIndex
>8517	MemberAccess	boneLock . collisionMaskIndex
>8518	Identifier	collisionMaskIndex
>8519	Identifier	boneLock
>8520	Callee	boneLock . bone -> getCollisionMaskNormal
>8521	PtrMemberAccess	boneLock . bone -> getCollisionMaskNormal
>8522	Identifier	getCollisionMaskNormal
>8523	MemberAccess	boneLock . bone
>8524	Identifier	bone
>8525	Identifier	boneLock
>8526	MemberAccess	boneLock . wallNormal
>8527	Identifier	wallNormal
>8528	Identifier	boneLock
>8529	ExpressionStatement	 
>8530	AssignmentExpr	position = boneLock . bone -> transformedCollisionMask [ boneLock . collisionMaskIndex ]
>8531	ArrayIndexing	boneLock . bone -> transformedCollisionMask [ boneLock . collisionMaskIndex ]
>8532	MemberAccess	boneLock . collisionMaskIndex
>8533	Identifier	collisionMaskIndex
>8534	Identifier	boneLock
>8535	PtrMemberAccess	boneLock . bone -> transformedCollisionMask
>8536	Identifier	transformedCollisionMask
>8537	MemberAccess	boneLock . bone
>8538	Identifier	bone
>8539	Identifier	boneLock
>8540	Identifier	position
>8541	Condition	 
>8542	MemberAccess	boneLock . bone
>8543	Identifier	bone
>8544	Identifier	boneLock
>8545	IdentifierDeclStatement	 
>8546	IdentifierDecl	lastPosition = position
>8547	AssignmentExpr	lastPosition = position
>8548	Identifier	position
>8549	Identifier	position
>8550	Identifier	lastPosition
>8551	IdentifierDeclType	Vector
>8552	Condition	 
>8553	MemberAccess	boneLock . on
>8554	Identifier	on
>8555	Identifier	boneLock
>8591	FunctionDef	Entity 
>8592	ParameterList	 
>8593	ReturnType	std 
>8594	CompoundStatement	 
>8595	ReturnStatement	 
>8596	PrimaryExpression	\"idle\"
>8600	FunctionDef	Entity 
>8601	ParameterList	 
>8602	ReturnType	void
>8603	CompoundStatement	 
>8604	ExpressionStatement	 
>8605	CallExpression	setRiding ( 0 )
>8606	ArgumentList	0
>8607	Argument	0
>8608	PrimaryExpression	0
>8609	Callee	setRiding
>8610	Identifier	setRiding
>8611	ExpressionStatement	 
>8612	CallExpression	vel . capLength2D ( 50 )
>8613	ArgumentList	50
>8614	Argument	50
>8615	PrimaryExpression	50
>8616	Callee	vel . capLength2D
>8617	MemberAccess	vel . capLength2D
>8618	Identifier	capLength2D
>8619	Identifier	vel
>8620	ExpressionStatement	 
>8621	CallExpression	rotateToVec ( Vector ( 0 , - 1 ) , 0.1 )
>8622	ArgumentList	Vector ( 0 , - 1 )
>8623	Argument	0.1
>8624	PrimaryExpression	0.1
>8625	Argument	Vector ( 0 , - 1 )
>8626	CallExpression	Vector ( 0 , - 1 )
>8627	ArgumentList	0
>8628	Argument	- 1
>8629	UnaryOp	- 1
>8630	PrimaryExpression	1
>8631	UnaryOperator	-
>8632	Argument	0
>8633	PrimaryExpression	0
>8634	Callee	Vector
>8635	Identifier	Vector
>8636	Callee	rotateToVec
>8637	Identifier	rotateToVec
>8638	ExpressionStatement	 
>8639	CallExpression	skeletalSprite . transitionAnimate ( getIdleAnimName ( ) , 0.3 , - 1 )
>8640	ArgumentList	getIdleAnimName ( )
>8641	Argument	- 1
>8642	UnaryOp	- 1
>8643	PrimaryExpression	1
>8644	UnaryOperator	-
>8645	Argument	0.3
>8646	PrimaryExpression	0.3
>8647	Argument	getIdleAnimName ( )
>8648	CallExpression	getIdleAnimName ( )
>8649	ArgumentList	 
>8650	Callee	getIdleAnimName
>8651	Identifier	getIdleAnimName
>8652	Callee	skeletalSprite . transitionAnimate
>8653	MemberAccess	skeletalSprite . transitionAnimate
>8654	Identifier	transitionAnimate
>8655	Identifier	skeletalSprite
>8656	ExpressionStatement	 
>8657	CallExpression	onIdle ( )
>8658	ArgumentList	 
>8659	Callee	onIdle
>8660	Identifier	onIdle
>8661	ExpressionStatement	 
>8662	CallExpression	skeletalSprite . stopAllAnimations ( )
>8663	ArgumentList	 
>8664	Callee	skeletalSprite . stopAllAnimations
>8665	MemberAccess	skeletalSprite . stopAllAnimations
>8666	Identifier	stopAllAnimations
>8667	Identifier	skeletalSprite
>8668	ExpressionStatement	 
>8669	CallExpression	perform ( Entity 
>8670	ArgumentList	Entity 
>8671	Argument	Entity 
>8672	Identifier	Entity 
>8673	Callee	perform
>8674	Identifier	perform
>8675	ExpressionStatement	 
>8676	CallExpression	position . stopPath ( )
>8677	ArgumentList	 
>8678	Callee	position . stopPath
>8679	MemberAccess	position . stopPath
>8680	Identifier	stopPath
>8681	Identifier	position
>8682	IfStatement	if ( isFollowingPath ( ) )
>8683	ExpressionStatement	 
>8684	CallExpression	stopFollowingPath ( )
>8685	ArgumentList	 
>8686	Callee	stopFollowingPath
>8687	Identifier	stopFollowingPath
>8688	Condition	 
>8689	CallExpression	isFollowingPath ( )
>8690	ArgumentList	 
>8691	Callee	isFollowingPath
>8692	Identifier	isFollowingPath
>8703	FunctionDef	Entity 
>8704	ParameterList	float dt
>8705	Parameter	 
>8706	Identifier	dt
>8707	ParameterType	float
>8708	ReturnType	void
>8709	CompoundStatement	 
>8710	IfStatement	if ( lance == 1 )
>8711	CompoundStatement	 
>8712	IfStatement	if ( lanceTimer < 0 )
>8713	ElseStatement	else
>8714	CompoundStatement	 
>8715	IfStatement	if ( lanceBone != 0 )
>8716	ElseStatement	else
>8717	CompoundStatement	 
>8718	ExpressionStatement	 
>8719	AssignmentExpr	lanceGfx -> rotation = rotation
>8720	Identifier	rotation
>8721	PtrMemberAccess	lanceGfx -> rotation
>8722	Identifier	rotation
>8723	Identifier	lanceGfx
>8724	ExpressionStatement	 
>8725	AssignmentExpr	lanceGfx -> position = getWorldPosition ( )
>8726	CallExpression	getWorldPosition ( )
>8727	ArgumentList	 
>8728	Callee	getWorldPosition
>8729	Identifier	getWorldPosition
>8730	PtrMemberAccess	lanceGfx -> position
>8731	Identifier	position
>8732	Identifier	lanceGfx
>8733	CompoundStatement	 
>8734	ExpressionStatement	 
>8735	AssignmentExpr	lanceGfx -> rotation = lanceBone -> getWorldRotation ( )
>8736	CallExpression	lanceBone -> getWorldRotation ( )
>8737	ArgumentList	 
>8738	Callee	lanceBone -> getWorldRotation
>8739	PtrMemberAccess	lanceBone -> getWorldRotation
>8740	Identifier	getWorldRotation
>8741	Identifier	lanceBone
>8742	PtrMemberAccess	lanceGfx -> rotation
>8743	Identifier	rotation
>8744	Identifier	lanceGfx
>8745	ExpressionStatement	 
>8746	AssignmentExpr	lanceGfx -> position = lanceBone -> getWorldPosition ( )
>8747	CallExpression	lanceBone -> getWorldPosition ( )
>8748	ArgumentList	 
>8749	Callee	lanceBone -> getWorldPosition
>8750	PtrMemberAccess	lanceBone -> getWorldPosition
>8751	Identifier	getWorldPosition
>8752	Identifier	lanceBone
>8753	PtrMemberAccess	lanceGfx -> position
>8754	Identifier	position
>8755	Identifier	lanceGfx
>8756	Condition	 
>8757	EqualityExpression	lanceBone != 0
>8758	PrimaryExpression	0
>8759	Identifier	lanceBone
>8760	IfStatement	if ( lanceDelay > 0.1f )
>8761	CompoundStatement	 
>8762	ExpressionStatement	 
>8763	CallExpression	dsq -> game -> fireShot ( \"Lance\" , this , 0 , lanceGfx -> getWorldCollidePosition ( Vector ( - 64 , 0 ) ) )
>8764	ArgumentList	\"Lance\"
>8765	Argument	lanceGfx -> getWorldCollidePosition ( Vector ( - 64 , 0 ) )
>8766	CallExpression	lanceGfx -> getWorldCollidePosition ( Vector ( - 64 , 0 ) )
>8767	ArgumentList	Vector ( - 64 , 0 )
>8768	Argument	Vector ( - 64 , 0 )
>8769	CallExpression	Vector ( - 64 , 0 )
>8770	ArgumentList	- 64
>8771	Argument	0
>8772	PrimaryExpression	0
>8773	Argument	- 64
>8774	UnaryOp	- 64
>8775	PrimaryExpression	64
>8776	UnaryOperator	-
>8777	Callee	Vector
>8778	Identifier	Vector
>8779	Callee	lanceGfx -> getWorldCollidePosition
>8780	PtrMemberAccess	lanceGfx -> getWorldCollidePosition
>8781	Identifier	getWorldCollidePosition
>8782	Identifier	lanceGfx
>8783	Argument	0
>8784	PrimaryExpression	0
>8785	Argument	this
>8786	Identifier	this
>8787	Argument	\"Lance\"
>8788	PrimaryExpression	\"Lance\"
>8789	Callee	dsq -> game -> fireShot
>8790	PtrMemberAccess	dsq -> game -> fireShot
>8791	Identifier	fireShot
>8792	PtrMemberAccess	dsq -> game
>8793	Identifier	game
>8794	Identifier	dsq
>8795	ExpressionStatement	 
>8796	AssignmentExpr	lanceDelay = 0
>8797	PrimaryExpression	0
>8798	Identifier	lanceDelay
>8799	Condition	 
>8800	RelationalExpression	lanceDelay > 0.1f
>8801	PrimaryExpression	0.1f
>8802	Identifier	lanceDelay
>8803	ExpressionStatement	 
>8804	AssignmentExpr	lanceDelay = lanceDelay + dt
>8805	AdditiveExpression	lanceDelay + dt
>8806	Identifier	dt
>8807	Identifier	lanceDelay
>8808	Identifier	lanceDelay
>8809	ExpressionStatement	 
>8810	CallExpression	lanceGfx -> fhTo ( _fh )
>8811	ArgumentList	_fh
>8812	Argument	_fh
>8813	Identifier	_fh
>8814	Callee	lanceGfx -> fhTo
>8815	PtrMemberAccess	lanceGfx -> fhTo
>8816	Identifier	fhTo
>8817	Identifier	lanceGfx
>8818	CompoundStatement	 
>8819	ExpressionStatement	 
>8820	AssignmentExpr	lanceTimer = 0
>8821	PrimaryExpression	0
>8822	Identifier	lanceTimer
>8823	ExpressionStatement	 
>8824	AssignmentExpr	lanceGfx = 0
>8825	PrimaryExpression	0
>8826	Identifier	lanceGfx
>8827	ExpressionStatement	 
>8828	AssignmentExpr	lanceGfx -> fadeAlphaWithLife = 1
>8829	PrimaryExpression	1
>8830	PtrMemberAccess	lanceGfx -> fadeAlphaWithLife
>8831	Identifier	fadeAlphaWithLife
>8832	Identifier	lanceGfx
>8833	ExpressionStatement	 
>8834	CallExpression	lanceGfx -> setDecayRate ( 2 )
>8835	ArgumentList	2
>8836	Argument	2
>8837	PrimaryExpression	2
>8838	Callee	lanceGfx -> setDecayRate
>8839	PtrMemberAccess	lanceGfx -> setDecayRate
>8840	Identifier	setDecayRate
>8841	Identifier	lanceGfx
>8842	ExpressionStatement	 
>8843	CallExpression	lanceGfx -> setLife ( 1.0 )
>8844	ArgumentList	1.0
>8845	Argument	1.0
>8846	PrimaryExpression	1.0
>8847	Callee	lanceGfx -> setLife
>8848	PtrMemberAccess	lanceGfx -> setLife
>8849	Identifier	setLife
>8850	Identifier	lanceGfx
>8851	ExpressionStatement	 
>8852	AssignmentExpr	lance = 0
>8853	PrimaryExpression	0
>8854	Identifier	lance
>8855	Condition	 
>8856	RelationalExpression	lanceTimer < 0
>8857	PrimaryExpression	0
>8858	Identifier	lanceTimer
>8859	ExpressionStatement	 
>8860	AssignmentExpr	lanceTimer -= dt
>8861	Identifier	dt
>8862	Identifier	lanceTimer
>8863	Condition	 
>8864	EqualityExpression	lance == 1
>8865	PrimaryExpression	1
>8866	Identifier	lance
>8892	FunctionDef	Entity 
>8893	ParameterList	 
>8894	ReturnType	void
>8895	CompoundStatement	 
>8896	ExpressionStatement	 
>8897	AssignmentExpr	lanceBone = skeletalSprite . getBoneByName ( \"Lance\" )
>8898	CallExpression	skeletalSprite . getBoneByName ( \"Lance\" )
>8899	ArgumentList	\"Lance\"
>8900	Argument	\"Lance\"
>8901	PrimaryExpression	\"Lance\"
>8902	Callee	skeletalSprite . getBoneByName
>8903	MemberAccess	skeletalSprite . getBoneByName
>8904	Identifier	getBoneByName
>8905	Identifier	skeletalSprite
>8906	Identifier	lanceBone
>8907	ExpressionStatement	 
>8908	AssignmentExpr	lanceTimer = 8
>8909	PrimaryExpression	8
>8910	Identifier	lanceTimer
>8911	IfStatement	if ( ! lanceGfx )
>8912	CompoundStatement	 
>8913	ExpressionStatement	 
>8914	CallExpression	dsq -> game -> addRenderObject ( lanceGfx , LR_PARTICLES )
>8915	ArgumentList	lanceGfx
>8916	Argument	LR_PARTICLES
>8917	Identifier	LR_PARTICLES
>8918	Argument	lanceGfx
>8919	Identifier	lanceGfx
>8920	Callee	dsq -> game -> addRenderObject
>8921	PtrMemberAccess	dsq -> game -> addRenderObject
>8922	Identifier	addRenderObject
>8923	PtrMemberAccess	dsq -> game
>8924	Identifier	game
>8925	Identifier	dsq
>8926	ExpressionStatement	 
>8927	CallExpression	lanceGfx -> alpha . interpolateTo ( 1 , 0.5 )
>8928	ArgumentList	1
>8929	Argument	0.5
>8930	PrimaryExpression	0.5
>8931	Argument	1
>8932	PrimaryExpression	1
>8933	Callee	lanceGfx -> alpha . interpolateTo
>8934	MemberAccess	lanceGfx -> alpha . interpolateTo
>8935	Identifier	interpolateTo
>8936	PtrMemberAccess	lanceGfx -> alpha
>8937	Identifier	alpha
>8938	Identifier	lanceGfx
>8939	ExpressionStatement	 
>8940	AssignmentExpr	lanceGfx -> alpha = 0
>8941	PrimaryExpression	0
>8942	PtrMemberAccess	lanceGfx -> alpha
>8943	Identifier	alpha
>8944	Identifier	lanceGfx
>8945	ExpressionStatement	 
>8946	CallExpression	lanceGfx -> setTexture ( \"Particles/Lance\" )
>8947	ArgumentList	\"Particles/Lance\"
>8948	Argument	\"Particles/Lance\"
>8949	PrimaryExpression	\"Particles/Lance\"
>8950	Callee	lanceGfx -> setTexture
>8951	PtrMemberAccess	lanceGfx -> setTexture
>8952	Identifier	setTexture
>8953	Identifier	lanceGfx
>8954	ExpressionStatement	 
>8955	AssignmentExpr	lanceGfx = new PauseQuad ( )
>8956	UnaryExpression	new PauseQuad ( )
>8957	Identifier	lanceGfx
>8958	Condition	 
>8959	UnaryOp	! lanceGfx
>8960	Identifier	lanceGfx
>8961	UnaryOperator	!
>8962	ExpressionStatement	 
>8963	AssignmentExpr	lanceBone = 0
>8964	PrimaryExpression	0
>8965	Identifier	lanceBone
>8966	ExpressionStatement	 
>8967	AssignmentExpr	lance = 1
>8968	PrimaryExpression	1
>8969	Identifier	lance
>8970	ExpressionStatement	 
>8971	CallExpression	debugLog ( os . str ( ) )
>8972	ArgumentList	os . str ( )
>8973	Argument	os . str ( )
>8974	CallExpression	os . str ( )
>8975	ArgumentList	 
>8976	Callee	os . str
>8977	MemberAccess	os . str
>8978	Identifier	str
>8979	Identifier	os
>8980	Callee	debugLog
>8981	Identifier	debugLog
>8982	ExpressionStatement	 
>8983	ShiftExpression	os << \"attaching lance to \" << this -> name
>8984	ShiftExpression	\"attaching lance to \" << this -> name
>8985	PtrMemberAccess	this -> name
>8986	Identifier	name
>8987	Identifier	this
>8988	PrimaryExpression	\"attaching lance to \"
>8989	Identifier	os
>8990	IdentifierDeclStatement	 
>8991	IdentifierDecl	os
>8992	Identifier	os
>8993	IdentifierDeclType	std 
>9012	FunctionDef	Entity 
>9013	ParameterList	Entity * e
>9014	Parameter	 
>9015	Identifier	e
>9016	ParameterType	Entity *
>9017	ReturnType	void
>9018	CompoundStatement	 
>9019	ExpressionStatement	 
>9020	AssignmentExpr	riding = e
>9021	Identifier	e
>9022	Identifier	riding
>9028	FunctionDef	Entity 
>9029	ParameterList	 
>9030	ReturnType	Entity *
>9031	CompoundStatement	 
>9032	ReturnStatement	 
>9033	Identifier	riding
>9038	FunctionDef	Entity 
>9039	ParameterList	Entity * e , Vector offset
>9040	Parameter	 
>9041	Identifier	offset
>9042	ParameterType	Vector
>9043	Parameter	 
>9044	Identifier	e
>9045	ParameterType	Entity *
>9046	ReturnType	void
>9047	CompoundStatement	 
>9048	ExpressionStatement	 
>9049	AssignmentExpr	e -> attachedTo = this
>9050	Identifier	this
>9051	PtrMemberAccess	e -> attachedTo
>9052	Identifier	attachedTo
>9053	Identifier	e
>9054	ExpressionStatement	 
>9055	CallExpression	attachedEntitiesOffsets . push_back ( offset )
>9056	ArgumentList	offset
>9057	Argument	offset
>9058	Identifier	offset
>9059	Callee	attachedEntitiesOffsets . push_back
>9060	MemberAccess	attachedEntitiesOffsets . push_back
>9061	Identifier	push_back
>9062	Identifier	attachedEntitiesOffsets
>9063	ExpressionStatement	 
>9064	CallExpression	attachedEntities . push_back ( e )
>9065	ArgumentList	e
>9066	Argument	e
>9067	Identifier	e
>9068	Callee	attachedEntities . push_back
>9069	MemberAccess	attachedEntities . push_back
>9070	Identifier	push_back
>9071	Identifier	attachedEntities
>9082	FunctionDef	Entity 
>9083	ParameterList	Entity * e
>9084	Parameter	 
>9085	Identifier	e
>9086	ParameterType	Entity *
>9087	ReturnType	void
>9088	CompoundStatement	 
>9089	ForStatement	for ( int i = 0 ; i < copyEnts . size ( ) ; i ++ )
>9090	CompoundStatement	 
>9091	IfStatement	if ( copyEnts [ i ] != e )
>9092	CompoundStatement	 
>9093	ExpressionStatement	 
>9094	CallExpression	attachedEntitiesOffsets . push_back ( copyOffs [ i ] )
>9095	ArgumentList	copyOffs [ i ]
>9096	Argument	copyOffs [ i ]
>9097	ArrayIndexing	copyOffs [ i ]
>9098	Identifier	i
>9099	Identifier	copyOffs
>9100	Callee	attachedEntitiesOffsets . push_back
>9101	MemberAccess	attachedEntitiesOffsets . push_back
>9102	Identifier	push_back
>9103	Identifier	attachedEntitiesOffsets
>9104	ExpressionStatement	 
>9105	CallExpression	attachedEntities . push_back ( copyEnts [ i ] )
>9106	ArgumentList	copyEnts [ i ]
>9107	Argument	copyEnts [ i ]
>9108	ArrayIndexing	copyEnts [ i ]
>9109	Identifier	i
>9110	Identifier	copyEnts
>9111	Callee	attachedEntities . push_back
>9112	MemberAccess	attachedEntities . push_back
>9113	Identifier	push_back
>9114	Identifier	attachedEntities
>9115	Condition	 
>9116	EqualityExpression	copyEnts [ i ] != e
>9117	Identifier	e
>9118	ArrayIndexing	copyEnts [ i ]
>9119	Identifier	i
>9120	Identifier	copyEnts
>9121	IncDecOp	 
>9122	IncDec	++
>9123	Identifier	i
>9124	Condition	 
>9125	RelationalExpression	i < copyEnts . size ( )
>9126	CallExpression	copyEnts . size ( )
>9127	ArgumentList	 
>9128	Callee	copyEnts . size
>9129	MemberAccess	copyEnts . size
>9130	Identifier	size
>9131	Identifier	copyEnts
>9132	Identifier	i
>9133	ForInit	 
>9134	IdentifierDeclStatement	int i = 0 ;
>9135	IdentifierDecl	i = 0
>9136	AssignmentExpr	i = 0
>9137	PrimaryExpression	0
>9138	Identifier	i
>9139	Identifier	i
>9140	IdentifierDeclType	int
>9141	ExpressionStatement	 
>9142	CallExpression	attachedEntitiesOffsets . clear ( )
>9143	ArgumentList	 
>9144	Callee	attachedEntitiesOffsets . clear
>9145	MemberAccess	attachedEntitiesOffsets . clear
>9146	Identifier	clear
>9147	Identifier	attachedEntitiesOffsets
>9148	ExpressionStatement	 
>9149	CallExpression	attachedEntities . clear ( )
>9150	ArgumentList	 
>9151	Callee	attachedEntities . clear
>9152	MemberAccess	attachedEntities . clear
>9153	Identifier	clear
>9154	Identifier	attachedEntities
>9155	IdentifierDeclStatement	 
>9156	IdentifierDecl	copyOffs = attachedEntitiesOffsets
>9157	AssignmentExpr	copyOffs = attachedEntitiesOffsets
>9158	Identifier	attachedEntitiesOffsets
>9159	Identifier	attachedEntitiesOffsets
>9160	Identifier	copyOffs
>9161	IdentifierDeclType	std 
>9162	IdentifierDeclStatement	 
>9163	IdentifierDecl	copyEnts = attachedEntities
>9164	AssignmentExpr	copyEnts = attachedEntities
>9165	Identifier	attachedEntities
>9166	Identifier	attachedEntities
>9167	Identifier	copyEnts
>9168	IdentifierDeclType	std 
>9169	ExpressionStatement	 
>9170	AssignmentExpr	e -> attachedTo = 0
>9171	PrimaryExpression	0
>9172	PtrMemberAccess	e -> attachedTo
>9173	Identifier	attachedTo
>9174	Identifier	e
>9190	FunctionDef	Entity 
>9191	ParameterList	Vector addVec , float time , float offsetAngle
>9192	Parameter	 
>9193	Identifier	offsetAngle
>9194	ParameterType	float
>9195	Parameter	 
>9196	Identifier	time
>9197	ParameterType	float
>9198	Parameter	 
>9199	Identifier	addVec
>9200	ParameterType	Vector
>9201	ReturnType	void
>9202	CompoundStatement	 
>9203	IfStatement	if ( addVec . x == 0 && addVec . y == 0 )
>9204	ElseStatement	else
>9205	CompoundStatement	 
>9206	IfStatement	if ( time == 0 )
>9207	ElseStatement	else
>9208	ExpressionStatement	 
>9209	CallExpression	rotation . interpolateTo ( Vector ( 0 , 0 , angle ) , time , 0 )
>9210	ArgumentList	Vector ( 0 , 0 , angle )
>9211	Argument	0
>9212	PrimaryExpression	0
>9213	Argument	time
>9214	Identifier	time
>9215	Argument	Vector ( 0 , 0 , angle )
>9216	CallExpression	Vector ( 0 , 0 , angle )
>9217	ArgumentList	0
>9218	Argument	angle
>9219	Identifier	angle
>9220	Argument	0
>9221	PrimaryExpression	0
>9222	Argument	0
>9223	PrimaryExpression	0
>9224	Callee	Vector
>9225	Identifier	Vector
>9226	Callee	rotation . interpolateTo
>9227	MemberAccess	rotation . interpolateTo
>9228	Identifier	interpolateTo
>9229	Identifier	rotation
>9230	ExpressionStatement	 
>9231	AssignmentExpr	rotation = Vector ( 0 , 0 , angle )
>9232	CallExpression	Vector ( 0 , 0 , angle )
>9233	ArgumentList	0
>9234	Argument	angle
>9235	Identifier	angle
>9236	Argument	0
>9237	PrimaryExpression	0
>9238	Argument	0
>9239	PrimaryExpression	0
>9240	Callee	Vector
>9241	Identifier	Vector
>9242	Identifier	rotation
>9243	Condition	 
>9244	EqualityExpression	time == 0
>9245	PrimaryExpression	0
>9246	Identifier	time
>9247	IfStatement	if ( rotation . z >= 90 && angle <= - 90 )
>9248	ExpressionStatement	 
>9249	AssignmentExpr	rotation . z = rotation . z - 360
>9250	AdditiveExpression	rotation . z - 360
>9251	PrimaryExpression	360
>9252	MemberAccess	rotation . z
>9253	Identifier	z
>9254	Identifier	rotation
>9255	MemberAccess	rotation . z
>9256	Identifier	z
>9257	Identifier	rotation
>9258	Condition	 
>9259	AndExpression	rotation . z >= 90 && angle <= - 90
>9260	RelationalExpression	angle <= - 90
>9261	UnaryOp	- 90
>9262	PrimaryExpression	90
>9263	UnaryOperator	-
>9264	Identifier	angle
>9265	RelationalExpression	rotation . z >= 90
>9266	PrimaryExpression	90
>9267	MemberAccess	rotation . z
>9268	Identifier	z
>9269	Identifier	rotation
>9270	IfStatement	if ( rotation . z <= - 90 && angle >= 90 )
>9271	CompoundStatement	 
>9272	ExpressionStatement	 
>9273	AssignmentExpr	rotation . z = 360 + rotation . z
>9274	AdditiveExpression	360 + rotation . z
>9275	MemberAccess	rotation . z
>9276	Identifier	z
>9277	Identifier	rotation
>9278	PrimaryExpression	360
>9279	MemberAccess	rotation . z
>9280	Identifier	z
>9281	Identifier	rotation
>9282	Condition	 
>9283	AndExpression	rotation . z <= - 90 && angle >= 90
>9284	RelationalExpression	angle >= 90
>9285	PrimaryExpression	90
>9286	Identifier	angle
>9287	RelationalExpression	rotation . z <= - 90
>9288	UnaryOp	- 90
>9289	PrimaryExpression	90
>9290	UnaryOperator	-
>9291	MemberAccess	rotation . z
>9292	Identifier	z
>9293	Identifier	rotation
>9294	IdentifierDeclStatement	 
>9295	IdentifierDecl	angle = MathFunctions 
>9296	AssignmentExpr	angle = MathFunctions 
>9297	CallExpression	MathFunctions 
>9298	ArgumentList	addVec
>9299	Argument	offsetAngle
>9300	Identifier	offsetAngle
>9301	Argument	addVec
>9302	Identifier	addVec
>9303	Callee	MathFunctions 
>9304	Identifier	MathFunctions 
>9305	Identifier	angle
>9306	Identifier	angle
>9307	IdentifierDeclType	float
>9308	CompoundStatement	 
>9309	ExpressionStatement	 
>9310	CallExpression	rotation . interpolateTo ( Vector ( 0 , 0 , 0 ) , time , 0 )
>9311	ArgumentList	Vector ( 0 , 0 , 0 )
>9312	Argument	0
>9313	PrimaryExpression	0
>9314	Argument	time
>9315	Identifier	time
>9316	Argument	Vector ( 0 , 0 , 0 )
>9317	CallExpression	Vector ( 0 , 0 , 0 )
>9318	ArgumentList	0
>9319	Argument	0
>9320	PrimaryExpression	0
>9321	Argument	0
>9322	PrimaryExpression	0
>9323	Argument	0
>9324	PrimaryExpression	0
>9325	Callee	Vector
>9326	Identifier	Vector
>9327	Callee	rotation . interpolateTo
>9328	MemberAccess	rotation . interpolateTo
>9329	Identifier	interpolateTo
>9330	Identifier	rotation
>9331	Condition	 
>9332	AndExpression	addVec . x == 0 && addVec . y == 0
>9333	EqualityExpression	addVec . y == 0
>9334	PrimaryExpression	0
>9335	MemberAccess	addVec . y
>9336	Identifier	y
>9337	Identifier	addVec
>9338	EqualityExpression	addVec . x == 0
>9339	PrimaryExpression	0
>9340	MemberAccess	addVec . x
>9341	Identifier	x
>9342	Identifier	addVec
>9356	FunctionDef	Entity 
>9357	ParameterList	 
>9358	ReturnType	void
>9359	CompoundStatement	 
>9360	ExpressionStatement	 
>9361	CallExpression	targetPoints . clear ( )
>9362	ArgumentList	 
>9363	Callee	targetPoints . clear
>9364	MemberAccess	targetPoints . clear
>9365	Identifier	clear
>9366	Identifier	targetPoints
>9371	FunctionDef	Entity 
>9372	ParameterList	const Vector & point
>9373	Parameter	 
>9374	Identifier	point
>9375	ParameterType	const Vector &
>9376	ReturnType	void
>9377	CompoundStatement	 
>9378	ExpressionStatement	 
>9379	CallExpression	targetPoints . push_back ( point )
>9380	ArgumentList	point
>9381	Argument	point
>9382	Identifier	point
>9383	Callee	targetPoints . push_back
>9384	MemberAccess	targetPoints . push_back
>9385	Identifier	push_back
>9386	Identifier	targetPoints
>9392	FunctionDef	Entity 
>9393	ParameterList	 
>9394	ReturnType	int
>9395	CompoundStatement	 
>9396	ReturnStatement	 
>9397	CallExpression	targetPoints . size ( )
>9398	ArgumentList	 
>9399	Callee	targetPoints . size
>9400	MemberAccess	targetPoints . size
>9401	Identifier	size
>9402	Identifier	targetPoints
>9408	FunctionDef	Entity 
>9409	ParameterList	int i
>9410	Parameter	 
>9411	Identifier	i
>9412	ParameterType	int
>9413	ReturnType	Vector
>9414	CompoundStatement	 
>9415	ReturnStatement	 
>9416	ArrayIndexing	targetPoints [ i ]
>9417	Identifier	i
>9418	Identifier	targetPoints
>9419	IfStatement	if ( i >= targetPoints . size ( ) || i < 0 )
>9420	ReturnStatement	 
>9421	CallExpression	getEnergyShotTargetPosition ( )
>9422	ArgumentList	 
>9423	Callee	getEnergyShotTargetPosition
>9424	Identifier	getEnergyShotTargetPosition
>9425	Condition	 
>9426	OrExpression	i >= targetPoints . size ( ) || i < 0
>9427	RelationalExpression	i < 0
>9428	PrimaryExpression	0
>9429	Identifier	i
>9430	RelationalExpression	i >= targetPoints . size ( )
>9431	CallExpression	targetPoints . size ( )
>9432	ArgumentList	 
>9433	Callee	targetPoints . size
>9434	MemberAccess	targetPoints . size
>9435	Identifier	size
>9436	Identifier	targetPoints
>9437	Identifier	i
>9447	FunctionDef	Entity 
>9448	ParameterList	 
>9449	ReturnType	int
>9450	CompoundStatement	 
>9451	ReturnStatement	 
>9452	MultiplicativeExpression	rand ( ) % targetPoints . size ( )
>9453	CallExpression	targetPoints . size ( )
>9454	ArgumentList	 
>9455	Callee	targetPoints . size
>9456	MemberAccess	targetPoints . size
>9457	Identifier	size
>9458	Identifier	targetPoints
>9459	CallExpression	rand ( )
>9460	ArgumentList	 
>9461	Callee	rand
>9462	Identifier	rand
>9463	IfStatement	if ( targetPoints . empty ( ) )
>9464	ReturnStatement	 
>9465	PrimaryExpression	0
>9466	Condition	 
>9467	CallExpression	targetPoints . empty ( )
>9468	ArgumentList	 
>9469	Callee	targetPoints . empty
>9470	MemberAccess	targetPoints . empty
>9471	Identifier	empty
>9472	Identifier	targetPoints
>9480	FunctionDef	Entity 
>9481	ParameterList	const Vector & override
>9482	Parameter	 
>9483	Identifier	override
>9484	ParameterType	const Vector &
>9485	ReturnType	bool
>9486	CompoundStatement	 
>9487	ReturnStatement	 
>9488	Identifier	false
>9489	IfStatement	if ( ! dsq -> game -> useWaterLevel || dsq -> game -> waterLevel . x == 0 )
>9490	ElseStatement	else
>9491	CompoundStatement	 
>9492	IfStatement	if ( check . y - collideRadius > dsq -> game -> waterLevel . x )
>9493	CompoundStatement	 
>9494	ReturnStatement	 
>9495	Identifier	true
>9496	ExpressionStatement	 
>9497	AssignmentExpr	waterBubble = 0
>9498	PrimaryExpression	0
>9499	Identifier	waterBubble
>9500	Condition	 
>9501	RelationalExpression	check . y - collideRadius > dsq -> game -> waterLevel . x
>9502	MemberAccess	dsq -> game -> waterLevel . x
>9503	Identifier	x
>9504	PtrMemberAccess	dsq -> game -> waterLevel
>9505	Identifier	waterLevel
>9506	PtrMemberAccess	dsq -> game
>9507	Identifier	game
>9508	Identifier	dsq
>9509	AdditiveExpression	check . y - collideRadius
>9510	Identifier	collideRadius
>9511	MemberAccess	check . y
>9512	Identifier	y
>9513	Identifier	check
>9514	ReturnStatement	 
>9515	Identifier	true
>9516	Condition	 
>9517	OrExpression	! dsq -> game -> useWaterLevel || dsq -> game -> waterLevel . x == 0
>9518	EqualityExpression	dsq -> game -> waterLevel . x == 0
>9519	PrimaryExpression	0
>9520	MemberAccess	dsq -> game -> waterLevel . x
>9521	Identifier	x
>9522	PtrMemberAccess	dsq -> game -> waterLevel
>9523	Identifier	waterLevel
>9524	PtrMemberAccess	dsq -> game
>9525	Identifier	game
>9526	Identifier	dsq
>9527	UnaryOp	! dsq -> game -> useWaterLevel
>9528	PtrMemberAccess	dsq -> game -> useWaterLevel
>9529	Identifier	useWaterLevel
>9530	PtrMemberAccess	dsq -> game
>9531	Identifier	game
>9532	Identifier	dsq
>9533	UnaryOperator	!
>9534	IfStatement	if ( p && p -> active && p -> isCoordinateInside ( position , collideRadius ) )
>9535	CompoundStatement	 
>9536	ReturnStatement	 
>9537	Identifier	true
>9538	ExpressionStatement	 
>9539	AssignmentExpr	waterBubble = p
>9540	Identifier	p
>9541	Identifier	waterBubble
>9542	Condition	 
>9543	AndExpression	p && p -> active && p -> isCoordinateInside ( position , collideRadius )
>9544	AndExpression	p -> active && p -> isCoordinateInside ( position , collideRadius )
>9545	CallExpression	p -> isCoordinateInside ( position , collideRadius )
>9546	ArgumentList	position
>9547	Argument	collideRadius
>9548	Identifier	collideRadius
>9549	Argument	position
>9550	Identifier	position
>9551	Callee	p -> isCoordinateInside
>9552	PtrMemberAccess	p -> isCoordinateInside
>9553	Identifier	isCoordinateInside
>9554	Identifier	p
>9555	PtrMemberAccess	p -> active
>9556	Identifier	active
>9557	Identifier	p
>9558	Identifier	p
>9559	IdentifierDeclStatement	 
>9560	IdentifierDecl	* p = dsq -> game -> getNearestPath ( position , PATH_WATERBUBBLE )
>9561	AssignmentExpr	* p = dsq -> game -> getNearestPath ( position , PATH_WATERBUBBLE )
>9562	CallExpression	dsq -> game -> getNearestPath ( position , PATH_WATERBUBBLE )
>9563	ArgumentList	position
>9564	Argument	PATH_WATERBUBBLE
>9565	Identifier	PATH_WATERBUBBLE
>9566	Argument	position
>9567	Identifier	position
>9568	Callee	dsq -> game -> getNearestPath
>9569	PtrMemberAccess	dsq -> game -> getNearestPath
>9570	Identifier	getNearestPath
>9571	PtrMemberAccess	dsq -> game
>9572	Identifier	game
>9573	Identifier	dsq
>9574	Identifier	p
>9575	Identifier	p
>9576	IdentifierDeclType	Path *
>9577	IfStatement	if ( dsq -> game -> useWaterLevel && dsq -> game -> waterLevel . x > 0 && check . y - collideRadius > dsq -> game \
>9578	ReturnStatement	 
>9579	Identifier	true
>9580	Condition	 
>9581	AndExpression	dsq -> game -> useWaterLevel && dsq -> game -> waterLevel . x > 0 && check . y - collideRadius > dsq \
>9582	AndExpression	dsq -> game -> waterLevel . x > 0 && check . y - collideRadius > dsq -> game -> waterLevel . x
>9583	RelationalExpression	check . y - collideRadius > dsq -> game -> waterLevel . x
>9584	MemberAccess	dsq -> game -> waterLevel . x
>9585	Identifier	x
>9586	PtrMemberAccess	dsq -> game -> waterLevel
>9587	Identifier	waterLevel
>9588	PtrMemberAccess	dsq -> game
>9589	Identifier	game
>9590	Identifier	dsq
>9591	AdditiveExpression	check . y - collideRadius
>9592	Identifier	collideRadius
>9593	MemberAccess	check . y
>9594	Identifier	y
>9595	Identifier	check
>9596	RelationalExpression	dsq -> game -> waterLevel . x > 0
>9597	PrimaryExpression	0
>9598	MemberAccess	dsq -> game -> waterLevel . x
>9599	Identifier	x
>9600	PtrMemberAccess	dsq -> game -> waterLevel
>9601	Identifier	waterLevel
>9602	PtrMemberAccess	dsq -> game
>9603	Identifier	game
>9604	Identifier	dsq
>9605	PtrMemberAccess	dsq -> game -> useWaterLevel
>9606	Identifier	useWaterLevel
>9607	PtrMemberAccess	dsq -> game
>9608	Identifier	game
>9609	Identifier	dsq
>9610	IfStatement	if ( ! override . isZero ( ) )
>9611	ExpressionStatement	 
>9612	AssignmentExpr	check = override
>9613	Identifier	override
>9614	Identifier	check
>9615	Condition	 
>9616	UnaryOp	! override . isZero ( )
>9617	CallExpression	override . isZero ( )
>9618	ArgumentList	 
>9619	Callee	override . isZero
>9620	MemberAccess	override . isZero
>9621	Identifier	isZero
>9622	Identifier	override
>9623	UnaryOperator	!
>9624	IdentifierDeclStatement	 
>9625	IdentifierDecl	check = position
>9626	AssignmentExpr	check = position
>9627	Identifier	position
>9628	Identifier	position
>9629	Identifier	check
>9630	IdentifierDeclType	Vector
>9657	FunctionDef	Entity 
>9658	ParameterList	const Vector & vec , float time , float maxSpeed , float dmg
>9659	Parameter	 
>9660	Identifier	dmg
>9661	ParameterType	float
>9662	Parameter	 
>9663	Identifier	maxSpeed
>9664	ParameterType	float
>9665	Parameter	 
>9666	Identifier	time
>9667	ParameterType	float
>9668	Parameter	 
>9669	Identifier	vec
>9670	ParameterType	const Vector &
>9671	ReturnType	void
>9672	CompoundStatement	 
>9673	IfStatement	if ( ! this -> isEntityDead ( ) )
>9674	CompoundStatement	 
>9675	ExpressionStatement	 
>9676	AssignmentExpr	pushVec . z = 0
>9677	PrimaryExpression	0
>9678	MemberAccess	pushVec . z
>9679	Identifier	z
>9680	Identifier	pushVec
>9681	ExpressionStatement	 
>9682	AssignmentExpr	pushVec = vec
>9683	Identifier	vec
>9684	Identifier	pushVec
>9685	ExpressionStatement	 
>9686	CallExpression	setState ( STATE_PUSH , time )
>9687	ArgumentList	STATE_PUSH
>9688	Argument	time
>9689	Identifier	time
>9690	Argument	STATE_PUSH
>9691	Identifier	STATE_PUSH
>9692	Callee	setState
>9693	Identifier	setState
>9694	ExpressionStatement	 
>9695	AssignmentExpr	this -> pushMaxSpeed = maxSpeed
>9696	Identifier	maxSpeed
>9697	PtrMemberAccess	this -> pushMaxSpeed
>9698	Identifier	pushMaxSpeed
>9699	Identifier	this
>9700	IfStatement	if ( maxSpeed == 0 )
>9701	CompoundStatement	 
>9702	ExpressionStatement	 
>9703	AssignmentExpr	maxSpeed = this -> maxSpeed
>9704	PtrMemberAccess	this -> maxSpeed
>9705	Identifier	maxSpeed
>9706	Identifier	this
>9707	Identifier	maxSpeed
>9708	Condition	 
>9709	EqualityExpression	maxSpeed == 0
>9710	PrimaryExpression	0
>9711	Identifier	maxSpeed
>9712	ExpressionStatement	 
>9713	AssignmentExpr	pushDamage = dmg
>9714	Identifier	dmg
>9715	Identifier	pushDamage
>9716	Condition	 
>9717	UnaryOp	! this -> isEntityDead ( )
>9718	CallExpression	this -> isEntityDead ( )
>9719	ArgumentList	 
>9720	Callee	this -> isEntityDead
>9721	PtrMemberAccess	this -> isEntityDead
>9722	Identifier	isEntityDead
>9723	Identifier	this
>9724	UnaryOperator	!
>9741	FunctionDef	Entity 
>9742	ParameterList	float ms
>9743	Parameter	 
>9744	Identifier	ms
>9745	ParameterType	float
>9746	ReturnType	void
>9747	CompoundStatement	 
>9748	ExpressionStatement	 
>9749	AssignmentExpr	maxSpeed = ms
>9750	Identifier	ms
>9751	Identifier	maxSpeed
>9757	FunctionDef	Entity 
>9758	ParameterList	 
>9759	ReturnType	int
>9760	CompoundStatement	 
>9761	ReturnStatement	 
>9762	Identifier	maxSpeed
>9767	FunctionDef	Entity 
>9768	ParameterList	int note
>9769	Parameter	 
>9770	Identifier	note
>9771	ParameterType	int
>9772	ReturnType	void
>9773	CompoundStatement	 
>9778	FunctionDef	Entity 
>9779	ParameterList	int note , float len
>9780	Parameter	 
>9781	Identifier	len
>9782	ParameterType	float
>9783	Parameter	 
>9784	Identifier	note
>9785	ParameterType	int
>9786	ReturnType	void
>9787	CompoundStatement	 
>9793	FunctionDef	Entity 
>9794	ParameterList	const std 
>9795	Parameter	 
>9796	Identifier	fadeOut
>9797	ParameterType	float
>9798	Parameter	 
>9799	Identifier	freq
>9800	ParameterType	float
>9801	Parameter	 
>9802	Identifier	sound
>9803	ParameterType	const std 
>9804	ReturnType	void
>9805	CompoundStatement	 
>9806	ExpressionStatement	 
>9807	CallExpression	updateSoundPosition ( )
>9808	ArgumentList	 
>9809	Callee	updateSoundPosition
>9810	Identifier	updateSoundPosition
>9811	ExpressionStatement	 
>9812	CallExpression	dsq -> playPositionalSfx ( sound , position , freq , fadeOut , this )
>9813	ArgumentList	sound
>9814	Argument	this
>9815	Identifier	this
>9816	Argument	fadeOut
>9817	Identifier	fadeOut
>9818	Argument	freq
>9819	Identifier	freq
>9820	Argument	position
>9821	Identifier	position
>9822	Argument	sound
>9823	Identifier	sound
>9824	Callee	dsq -> playPositionalSfx
>9825	PtrMemberAccess	dsq -> playPositionalSfx
>9826	Identifier	playPositionalSfx
>9827	Identifier	dsq
>9837	FunctionDef	Entity 
>9838	ParameterList	 
>9839	ReturnType	Vector
>9840	CompoundStatement	 
>9841	ReturnStatement	 
>9842	CallExpression	getWorldPosition ( )
>9843	ArgumentList	 
>9844	Callee	getWorldPosition
>9845	Identifier	getWorldPosition
>9850	FunctionDef	Entity 
>9851	ParameterList	int range , int t
>9852	Parameter	 
>9853	Identifier	t
>9854	ParameterType	int
>9855	Parameter	 
>9856	Identifier	range
>9857	ParameterType	int
>9858	ReturnType	bool
>9859	CompoundStatement	 
>9860	ReturnStatement	 
>9861	RelationalExpression	( targets [ t ] -> position - this -> position ) . getSquaredLength2D ( ) < sqr ( range )
>9862	CallExpression	sqr ( range )
>9863	ArgumentList	range
>9864	Argument	range
>9865	Identifier	range
>9866	Callee	sqr
>9867	Identifier	sqr
>9868	CallExpression	( targets [ t ] -> position - this -> position ) . getSquaredLength2D ( )
>9869	ArgumentList	 
>9870	Callee	( targets [ t ] -> position - this -> position ) . getSquaredLength2D
>9871	MemberAccess	( targets [ t ] -> position - this -> position ) . getSquaredLength2D
>9872	Identifier	getSquaredLength2D
>9873	AdditiveExpression	targets [ t ] -> position - this -> position
>9874	PtrMemberAccess	this -> position
>9875	Identifier	position
>9876	Identifier	this
>9877	PtrMemberAccess	targets [ t ] -> position
>9878	Identifier	position
>9879	ArrayIndexing	targets [ t ]
>9880	Identifier	t
>9881	Identifier	targets
>9882	IfStatement	if ( ! targets [ t ] )
>9883	CompoundStatement	 
>9884	ReturnStatement	 
>9885	Identifier	false
>9886	ExpressionStatement	 
>9887	CallExpression	debugLog ( \"null target\" )
>9888	ArgumentList	\"null target\"
>9889	Argument	\"null target\"
>9890	PrimaryExpression	\"null target\"
>9891	Callee	debugLog
>9892	Identifier	debugLog
>9893	Condition	 
>9894	UnaryOp	! targets [ t ]
>9895	ArrayIndexing	targets [ t ]
>9896	Identifier	t
>9897	Identifier	targets
>9898	UnaryOperator	!
>9899	IfStatement	if ( t < 0 || t >= targets . size ( ) )
>9900	CompoundStatement	 
>9901	ReturnStatement	 
>9902	Identifier	false
>9903	ExpressionStatement	 
>9904	CallExpression	debugLog ( os . str ( ) )
>9905	ArgumentList	os . str ( )
>9906	Argument	os . str ( )
>9907	CallExpression	os . str ( )
>9908	ArgumentList	 
>9909	Callee	os . str
>9910	MemberAccess	os . str
>9911	Identifier	str
>9912	Identifier	os
>9913	Callee	debugLog
>9914	Identifier	debugLog
>9915	ExpressionStatement	 
>9916	ShiftExpression	os << \"isTargetInRange
>9917	ShiftExpression	\"isTargetInRange
>9918	Identifier	t
>9919	PrimaryExpression	\"isTargetInRange
>9920	Identifier	os
>9921	IdentifierDeclStatement	 
>9922	IdentifierDecl	os
>9923	Identifier	os
>9924	IdentifierDeclType	std 
>9925	Condition	 
>9926	OrExpression	t < 0 || t >= targets . size ( )
>9927	RelationalExpression	t >= targets . size ( )
>9928	CallExpression	targets . size ( )
>9929	ArgumentList	 
>9930	Callee	targets . size
>9931	MemberAccess	targets . size
>9932	Identifier	size
>9933	Identifier	targets
>9934	Identifier	t
>9935	RelationalExpression	t < 0
>9936	PrimaryExpression	0
>9937	Identifier	t
>9958	FunctionDef	Entity 
>9959	ParameterList	EntityType et
>9960	Parameter	 
>9961	Identifier	et
>9962	ParameterType	EntityType
>9963	ReturnType	void
>9964	CompoundStatement	 
>9965	ExpressionStatement	 
>9966	AssignmentExpr	entityType = et
>9967	Identifier	et
>9968	Identifier	entityType
>9974	FunctionDef	Entity 
>9975	ParameterList	 
>9976	ReturnType	EntityType
>9977	CompoundStatement	 
>9978	ReturnStatement	 
>9979	Identifier	entityType
>9984	FunctionDef	Entity 
>9985	ParameterList	int dist , int type , int t
>9986	Parameter	 
>9987	Identifier	t
>9988	ParameterType	int
>9989	Parameter	 
>9990	Identifier	type
>9991	ParameterType	int
>9992	Parameter	 
>9993	Identifier	dist
>9994	ParameterType	int
>9995	ReturnType	Entity *
>9996	CompoundStatement	 
>9997	ReturnStatement	 
>9998	ArrayIndexing	targets [ t ]
>9999	Identifier	t
>10000	Identifier	targets
>10001	IfStatement	if ( type == ET_AVATAR )
>10002	ElseStatement	else
>10003	CompoundStatement	 
>10004	IfStatement	if ( target )
>10005	CompoundStatement	 
>10006	ExpressionStatement	 
>10007	AssignmentExpr	targets [ t ] = target
>10008	Identifier	target
>10009	ArrayIndexing	targets [ t ]
>10010	Identifier	t
>10011	Identifier	targets
>10012	Condition	 
>10013	Identifier	target
>10014	CompoundStatement	 
>10015	IfStatement	if ( e != this && e -> getEntityType ( ) == type && e -> health > 0 )
>10016	CompoundStatement	 
>10017	IfStatement	if ( d < sqr ( dist ) && ( d < closestDist || closestDist == - 1 ) )
>10018	CompoundStatement	 
>10019	ExpressionStatement	 
>10020	AssignmentExpr	target = e
>10021	Identifier	e
>10022	Identifier	target
>10023	ExpressionStatement	 
>10024	AssignmentExpr	closestDist = d
>10025	Identifier	d
>10026	Identifier	closestDist
>10027	Condition	 
>10028	AndExpression	d < sqr ( dist ) && ( d < closestDist || closestDist == - 1 )
>10029	OrExpression	d < closestDist || closestDist == - 1
>10030	EqualityExpression	closestDist == - 1
>10031	UnaryOp	- 1
>10032	PrimaryExpression	1
>10033	UnaryOperator	-
>10034	Identifier	closestDist
>10035	RelationalExpression	d < closestDist
>10036	Identifier	closestDist
>10037	Identifier	d
>10038	RelationalExpression	d < sqr ( dist )
>10039	CallExpression	sqr ( dist )
>10040	ArgumentList	dist
>10041	Argument	dist
>10042	Identifier	dist
>10043	Callee	sqr
>10044	Identifier	sqr
>10045	Identifier	d
>10046	IdentifierDeclStatement	 
>10047	IdentifierDecl	d = ( e -> position - this -> position ) . getSquaredLength2D ( )
>10048	AssignmentExpr	d = ( e -> position - this -> position ) . getSquaredLength2D ( )
>10049	CallExpression	( e -> position - this -> position ) . getSquaredLength2D ( )
>10050	ArgumentList	 
>10051	Callee	( e -> position - this -> position ) . getSquaredLength2D
>10052	MemberAccess	( e -> position - this -> position ) . getSquaredLength2D
>10053	Identifier	getSquaredLength2D
>10054	AdditiveExpression	e -> position - this -> position
>10055	PtrMemberAccess	this -> position
>10056	Identifier	position
>10057	Identifier	this
>10058	PtrMemberAccess	e -> position
>10059	Identifier	position
>10060	Identifier	e
>10061	Identifier	d
>10062	Identifier	d
>10063	IdentifierDeclType	int
>10064	Condition	 
>10065	AndExpression	e != this && e -> getEntityType ( ) == type && e -> health > 0
>10066	AndExpression	e -> getEntityType ( ) == type && e -> health > 0
>10067	RelationalExpression	e -> health > 0
>10068	PrimaryExpression	0
>10069	PtrMemberAccess	e -> health
>10070	Identifier	health
>10071	Identifier	e
>10072	EqualityExpression	e -> getEntityType ( ) == type
>10073	Identifier	type
>10074	CallExpression	e -> getEntityType ( )
>10075	ArgumentList	 
>10076	Callee	e -> getEntityType
>10077	PtrMemberAccess	e -> getEntityType
>10078	Identifier	getEntityType
>10079	Identifier	e
>10080	EqualityExpression	e != this
>10081	Identifier	this
>10082	Identifier	e
>10083	IdentifierDeclStatement	 
>10084	IdentifierDecl	* e = * i
>10085	AssignmentExpr	* e = * i
>10086	UnaryOp	* i
>10087	Identifier	i
>10088	UnaryOperator	*
>10089	Identifier	e
>10090	Identifier	e
>10091	IdentifierDeclType	Entity *
>10092	Statement	 
>10093	Statement	 
>10094	Statement	 
>10095	Statement	 
>10096	IdentifierDeclStatement	 
>10097	IdentifierDecl	* target = 0
>10098	AssignmentExpr	* target = 0
>10099	PrimaryExpression	0
>10100	Identifier	target
>10101	Identifier	target
>10102	IdentifierDeclType	Entity *
>10103	IdentifierDeclStatement	 
>10104	IdentifierDecl	closestDist = - 1
>10105	AssignmentExpr	closestDist = - 1
>10106	UnaryOp	- 1
>10107	PrimaryExpression	1
>10108	UnaryOperator	-
>10109	Identifier	closestDist
>10110	Identifier	closestDist
>10111	IdentifierDeclType	int
>10112	CompoundStatement	 
>10113	IfStatement	if ( d . getSquaredLength2D ( ) < sqr ( dist ) )
>10114	CompoundStatement	 
>10115	ExpressionStatement	 
>10116	AssignmentExpr	targets [ t ] = dsq -> game -> avatar
>10117	PtrMemberAccess	dsq -> game -> avatar
>10118	Identifier	avatar
>10119	PtrMemberAccess	dsq -> game
>10120	Identifier	game
>10121	Identifier	dsq
>10122	ArrayIndexing	targets [ t ]
>10123	Identifier	t
>10124	Identifier	targets
>10125	Condition	 
>10126	RelationalExpression	d . getSquaredLength2D ( ) < sqr ( dist )
>10127	CallExpression	sqr ( dist )
>10128	ArgumentList	dist
>10129	Argument	dist
>10130	Identifier	dist
>10131	Callee	sqr
>10132	Identifier	sqr
>10133	CallExpression	d . getSquaredLength2D ( )
>10134	ArgumentList	 
>10135	Callee	d . getSquaredLength2D
>10136	MemberAccess	d . getSquaredLength2D
>10137	Identifier	getSquaredLength2D
>10138	Identifier	d
>10139	IdentifierDeclStatement	 
>10140	IdentifierDecl	d = dsq -> game -> avatar -> position - this -> position
>10141	AssignmentExpr	d = dsq -> game -> avatar -> position - this -> position
>10142	AdditiveExpression	dsq -> game -> avatar -> position - this -> position
>10143	PtrMemberAccess	this -> position
>10144	Identifier	position
>10145	Identifier	this
>10146	PtrMemberAccess	dsq -> game -> avatar -> position
>10147	Identifier	position
>10148	PtrMemberAccess	dsq -> game -> avatar
>10149	Identifier	avatar
>10150	PtrMemberAccess	dsq -> game
>10151	Identifier	game
>10152	Identifier	dsq
>10153	Identifier	d
>10154	Identifier	d
>10155	IdentifierDeclType	Vector
>10156	Condition	 
>10157	EqualityExpression	type == ET_AVATAR
>10158	Identifier	ET_AVATAR
>10159	Identifier	type
>10160	ExpressionStatement	 
>10161	AssignmentExpr	targets [ t ] = 0
>10162	PrimaryExpression	0
>10163	ArrayIndexing	targets [ t ]
>10164	Identifier	t
>10165	Identifier	targets
>10202	FunctionDef	Entity 
>10203	ParameterList	Vector p , float dt , int spd
>10204	Parameter	 
>10205	Identifier	spd
>10206	ParameterType	int
>10207	Parameter	 
>10208	Identifier	dt
>10209	ParameterType	float
>10210	Parameter	 
>10211	Identifier	p
>10212	ParameterType	Vector
>10213	ReturnType	void
>10214	CompoundStatement	 
>10215	ExpressionStatement	 
>10216	AssignmentExpr	vel += d
>10217	Identifier	d
>10218	Identifier	vel
>10219	ExpressionStatement	 
>10220	CallExpression	d . setLength2D ( spd * dt )
>10221	ArgumentList	spd * dt
>10222	Argument	spd * dt
>10223	MultiplicativeExpression	spd * dt
>10224	Identifier	dt
>10225	Identifier	spd
>10226	Callee	d . setLength2D
>10227	MemberAccess	d . setLength2D
>10228	Identifier	setLength2D
>10229	Identifier	d
>10230	IdentifierDeclStatement	 
>10231	IdentifierDecl	d = p - this -> position
>10232	AssignmentExpr	d = p - this -> position
>10233	AdditiveExpression	p - this -> position
>10234	PtrMemberAccess	this -> position
>10235	Identifier	position
>10236	Identifier	this
>10237	Identifier	p
>10238	Identifier	d
>10239	Identifier	d
>10240	IdentifierDeclType	Vector
>10252	FunctionDef	Entity 
>10253	ParameterList	Vector p , float dt , int spd , int dir
>10254	Parameter	 
>10255	Identifier	dir
>10256	ParameterType	int
>10257	Parameter	 
>10258	Identifier	spd
>10259	ParameterType	int
>10260	Parameter	 
>10261	Identifier	dt
>10262	ParameterType	float
>10263	Parameter	 
>10264	Identifier	p
>10265	ParameterType	Vector
>10266	ReturnType	void
>10267	CompoundStatement	 
>10268	ExpressionStatement	 
>10269	AssignmentExpr	vel += d
>10270	Identifier	d
>10271	Identifier	vel
>10272	ExpressionStatement	 
>10273	CallExpression	d . setLength2D ( spd * dt )
>10274	ArgumentList	spd * dt
>10275	Argument	spd * dt
>10276	MultiplicativeExpression	spd * dt
>10277	Identifier	dt
>10278	Identifier	spd
>10279	Callee	d . setLength2D
>10280	MemberAccess	d . setLength2D
>10281	Identifier	setLength2D
>10282	Identifier	d
>10283	IfStatement	if ( ! dir )
>10284	ElseStatement	else
>10285	ExpressionStatement	 
>10286	AssignmentExpr	d = Vector ( d . y , - d . x )
>10287	CallExpression	Vector ( d . y , - d . x )
>10288	ArgumentList	d . y
>10289	Argument	- d . x
>10290	UnaryOp	- d . x
>10291	MemberAccess	d . x
>10292	Identifier	x
>10293	Identifier	d
>10294	UnaryOperator	-
>10295	Argument	d . y
>10296	MemberAccess	d . y
>10297	Identifier	y
>10298	Identifier	d
>10299	Callee	Vector
>10300	Identifier	Vector
>10301	Identifier	d
>10302	ExpressionStatement	 
>10303	AssignmentExpr	d = Vector ( - d . y , d . x )
>10304	CallExpression	Vector ( - d . y , d . x )
>10305	ArgumentList	- d . y
>10306	Argument	d . x
>10307	MemberAccess	d . x
>10308	Identifier	x
>10309	Identifier	d
>10310	Argument	- d . y
>10311	UnaryOp	- d . y
>10312	MemberAccess	d . y
>10313	Identifier	y
>10314	Identifier	d
>10315	UnaryOperator	-
>10316	Callee	Vector
>10317	Identifier	Vector
>10318	Identifier	d
>10319	Condition	 
>10320	UnaryOp	! dir
>10321	Identifier	dir
>10322	UnaryOperator	!
>10323	IdentifierDeclStatement	 
>10324	IdentifierDecl	d = p - this -> position
>10325	AssignmentExpr	d = p - this -> position
>10326	AdditiveExpression	p - this -> position
>10327	PtrMemberAccess	this -> position
>10328	Identifier	position
>10329	Identifier	this
>10330	Identifier	p
>10331	Identifier	d
>10332	Identifier	d
>10333	IdentifierDeclType	Vector
>10349	FunctionDef	Entity 
>10350	ParameterList	int angle , float dt , int spd
>10351	Parameter	 
>10352	Identifier	spd
>10353	ParameterType	int
>10354	Parameter	 
>10355	Identifier	dt
>10356	ParameterType	float
>10357	Parameter	 
>10358	Identifier	angle
>10359	ParameterType	int
>10360	ReturnType	void
>10361	CompoundStatement	 
>10362	ExpressionStatement	 
>10363	CallExpression	moveTowards ( p , dt , spd )
>10364	ArgumentList	p
>10365	Argument	spd
>10366	Identifier	spd
>10367	Argument	dt
>10368	Identifier	dt
>10369	Argument	p
>10370	Identifier	p
>10371	Callee	moveTowards
>10372	Identifier	moveTowards
>10373	IdentifierDeclStatement	 
>10374	IdentifierDecl	p ( sinf ( MathFunctions 
>10375	Expression	sinf ( MathFunctions 
>10376	AdditiveExpression	cosf ( MathFunctions 
>10377	MemberAccess	position . y
>10378	Identifier	y
>10379	Identifier	position
>10380	MultiplicativeExpression	cosf ( MathFunctions 
>10381	PrimaryExpression	16
>10382	CallExpression	cosf ( MathFunctions 
>10383	ArgumentList	MathFunctions 
>10384	Argument	MathFunctions 
>10385	CallExpression	MathFunctions 
>10386	ArgumentList	angle
>10387	Argument	angle
>10388	Identifier	angle
>10389	Callee	MathFunctions 
>10390	Identifier	MathFunctions 
>10391	Callee	cosf
>10392	Identifier	cosf
>10393	AdditiveExpression	sinf ( MathFunctions 
>10394	MemberAccess	position . x
>10395	Identifier	x
>10396	Identifier	position
>10397	MultiplicativeExpression	sinf ( MathFunctions 
>10398	PrimaryExpression	16
>10399	CallExpression	sinf ( MathFunctions 
>10400	ArgumentList	MathFunctions 
>10401	Argument	MathFunctions 
>10402	CallExpression	MathFunctions 
>10403	ArgumentList	angle
>10404	Argument	angle
>10405	Identifier	angle
>10406	Callee	MathFunctions 
>10407	Identifier	MathFunctions 
>10408	Callee	sinf
>10409	Identifier	sinf
>10410	Identifier	p
>10411	IdentifierDeclType	Vector
>10421	FunctionDef	Entity 
>10422	ParameterList	int angle , float dt , int spd , int dir
>10423	Parameter	 
>10424	Identifier	dir
>10425	ParameterType	int
>10426	Parameter	 
>10427	Identifier	spd
>10428	ParameterType	int
>10429	Parameter	 
>10430	Identifier	dt
>10431	ParameterType	float
>10432	Parameter	 
>10433	Identifier	angle
>10434	ParameterType	int
>10435	ReturnType	void
>10436	CompoundStatement	 
>10437	ExpressionStatement	 
>10438	CallExpression	moveAround ( p , dt , spd , dir )
>10439	ArgumentList	p
>10440	Argument	dir
>10441	Identifier	dir
>10442	Argument	spd
>10443	Identifier	spd
>10444	Argument	dt
>10445	Identifier	dt
>10446	Argument	p
>10447	Identifier	p
>10448	Callee	moveAround
>10449	Identifier	moveAround
>10450	IdentifierDeclStatement	 
>10451	IdentifierDecl	p ( sinf ( MathFunctions 
>10452	Expression	sinf ( MathFunctions 
>10453	AdditiveExpression	cosf ( MathFunctions 
>10454	MemberAccess	position . y
>10455	Identifier	y
>10456	Identifier	position
>10457	MultiplicativeExpression	cosf ( MathFunctions 
>10458	PrimaryExpression	16
>10459	CallExpression	cosf ( MathFunctions 
>10460	ArgumentList	MathFunctions 
>10461	Argument	MathFunctions 
>10462	CallExpression	MathFunctions 
>10463	ArgumentList	angle
>10464	Argument	angle
>10465	Identifier	angle
>10466	Callee	MathFunctions 
>10467	Identifier	MathFunctions 
>10468	Callee	cosf
>10469	Identifier	cosf
>10470	AdditiveExpression	sinf ( MathFunctions 
>10471	MemberAccess	position . x
>10472	Identifier	x
>10473	Identifier	position
>10474	MultiplicativeExpression	sinf ( MathFunctions 
>10475	PrimaryExpression	16
>10476	CallExpression	sinf ( MathFunctions 
>10477	ArgumentList	MathFunctions 
>10478	Argument	MathFunctions 
>10479	CallExpression	MathFunctions 
>10480	ArgumentList	angle
>10481	Argument	angle
>10482	Identifier	angle
>10483	Callee	MathFunctions 
>10484	Identifier	MathFunctions 
>10485	Callee	sinf
>10486	Identifier	sinf
>10487	Identifier	p
>10488	IdentifierDeclType	Vector
>10499	FunctionDef	Entity 
>10500	ParameterList	float dt , int spd , int t
>10501	Parameter	 
>10502	Identifier	t
>10503	ParameterType	int
>10504	Parameter	 
>10505	Identifier	spd
>10506	ParameterType	int
>10507	Parameter	 
>10508	Identifier	dt
>10509	ParameterType	float
>10510	ReturnType	void
>10511	CompoundStatement	 
>10512	ExpressionStatement	 
>10513	CallExpression	moveTowards ( targets [ t ] -> position , dt , spd )
>10514	ArgumentList	targets [ t ] -> position
>10515	Argument	spd
>10516	Identifier	spd
>10517	Argument	dt
>10518	Identifier	dt
>10519	Argument	targets [ t ] -> position
>10520	PtrMemberAccess	targets [ t ] -> position
>10521	Identifier	position
>10522	ArrayIndexing	targets [ t ]
>10523	Identifier	t
>10524	Identifier	targets
>10525	Callee	moveTowards
>10526	Identifier	moveTowards
>10527	IfStatement	if ( ! targets [ t ] )
>10528	ReturnStatement	 
>10529	Condition	 
>10530	UnaryOp	! targets [ t ]
>10531	ArrayIndexing	targets [ t ]
>10532	Identifier	t
>10533	Identifier	targets
>10534	UnaryOperator	!
>10547	FunctionDef	Entity 
>10548	ParameterList	float dt , int spd , int dir , int t
>10549	Parameter	 
>10550	Identifier	t
>10551	ParameterType	int
>10552	Parameter	 
>10553	Identifier	dir
>10554	ParameterType	int
>10555	Parameter	 
>10556	Identifier	spd
>10557	ParameterType	int
>10558	Parameter	 
>10559	Identifier	dt
>10560	ParameterType	float
>10561	ReturnType	void
>10562	CompoundStatement	 
>10563	ExpressionStatement	 
>10564	CallExpression	moveAround ( targets [ t ] -> position , dt , spd , dir )
>10565	ArgumentList	targets [ t ] -> position
>10566	Argument	dir
>10567	Identifier	dir
>10568	Argument	spd
>10569	Identifier	spd
>10570	Argument	dt
>10571	Identifier	dt
>10572	Argument	targets [ t ] -> position
>10573	PtrMemberAccess	targets [ t ] -> position
>10574	Identifier	position
>10575	ArrayIndexing	targets [ t ]
>10576	Identifier	t
>10577	Identifier	targets
>10578	Callee	moveAround
>10579	Identifier	moveAround
>10580	IfStatement	if ( ! targets [ t ] )
>10581	ReturnStatement	 
>10582	Condition	 
>10583	UnaryOp	! targets [ t ]
>10584	ArrayIndexing	targets [ t ]
>10585	Identifier	t
>10586	Identifier	targets
>10587	UnaryOperator	!
>10601	FunctionDef	Entity 
>10602	ParameterList	 
>10603	ReturnType	Vector
>10604	CompoundStatement	 
>10605	ReturnStatement	 
>10606	Identifier	lookAtPoint
>10607	IfStatement	if ( lookAtPoint . isZero ( ) )
>10608	ReturnStatement	 
>10609	Identifier	position
>10610	Condition	 
>10611	CallExpression	lookAtPoint . isZero ( )
>10612	ArgumentList	 
>10613	Callee	lookAtPoint . isZero
>10614	MemberAccess	lookAtPoint . isZero
>10615	Identifier	isZero
>10616	Identifier	lookAtPoint
>10623	FunctionDef	Entity 
>10624	ParameterList	float dt , int spd , int dir , Entity * e
>10625	Parameter	 
>10626	Identifier	e
>10627	ParameterType	Entity *
>10628	Parameter	 
>10629	Identifier	dir
>10630	ParameterType	int
>10631	Parameter	 
>10632	Identifier	spd
>10633	ParameterType	int
>10634	Parameter	 
>10635	Identifier	dt
>10636	ParameterType	float
>10637	ReturnType	void
>10638	CompoundStatement	 
>10639	ExpressionStatement	 
>10640	AssignmentExpr	vel += d
>10641	Identifier	d
>10642	Identifier	vel
>10643	ExpressionStatement	 
>10644	CallExpression	d . setLength2D ( spd * dt )
>10645	ArgumentList	spd * dt
>10646	Argument	spd * dt
>10647	MultiplicativeExpression	spd * dt
>10648	Identifier	dt
>10649	Identifier	spd
>10650	Callee	d . setLength2D
>10651	MemberAccess	d . setLength2D
>10652	Identifier	setLength2D
>10653	Identifier	d
>10654	IfStatement	if ( ! dir )
>10655	ElseStatement	else
>10656	ExpressionStatement	 
>10657	AssignmentExpr	d = Vector ( d . y , - d . x )
>10658	CallExpression	Vector ( d . y , - d . x )
>10659	ArgumentList	d . y
>10660	Argument	- d . x
>10661	UnaryOp	- d . x
>10662	MemberAccess	d . x
>10663	Identifier	x
>10664	Identifier	d
>10665	UnaryOperator	-
>10666	Argument	d . y
>10667	MemberAccess	d . y
>10668	Identifier	y
>10669	Identifier	d
>10670	Callee	Vector
>10671	Identifier	Vector
>10672	Identifier	d
>10673	ExpressionStatement	 
>10674	AssignmentExpr	d = Vector ( - d . y , d . x )
>10675	CallExpression	Vector ( - d . y , d . x )
>10676	ArgumentList	- d . y
>10677	Argument	d . x
>10678	MemberAccess	d . x
>10679	Identifier	x
>10680	Identifier	d
>10681	Argument	- d . y
>10682	UnaryOp	- d . y
>10683	MemberAccess	d . y
>10684	Identifier	y
>10685	Identifier	d
>10686	UnaryOperator	-
>10687	Callee	Vector
>10688	Identifier	Vector
>10689	Identifier	d
>10690	Condition	 
>10691	UnaryOp	! dir
>10692	Identifier	dir
>10693	UnaryOperator	!
>10694	IdentifierDeclStatement	 
>10695	IdentifierDecl	d = e -> position - this -> position
>10696	AssignmentExpr	d = e -> position - this -> position
>10697	AdditiveExpression	e -> position - this -> position
>10698	PtrMemberAccess	this -> position
>10699	Identifier	position
>10700	Identifier	this
>10701	PtrMemberAccess	e -> position
>10702	Identifier	position
>10703	Identifier	e
>10704	Identifier	d
>10705	Identifier	d
>10706	IdentifierDeclType	Vector
>10724	FunctionDef	Entity 
>10725	ParameterList	int action
>10726	Parameter	 
>10727	Identifier	action
>10728	ParameterType	int
>10729	ReturnType	void
>10730	CompoundStatement	 
>10731	SwitchStatement	switch ( action )
>10732	CompoundStatement	 
>10733	BreakStatement	 
>10734	CompoundStatement	 
>10735	ExpressionStatement	 
>10736	CallExpression	setMaxSpeed ( this -> pushMaxSpeed )
>10737	ArgumentList	this -> pushMaxSpeed
>10738	Argument	this -> pushMaxSpeed
>10739	PtrMemberAccess	this -> pushMaxSpeed
>10740	Identifier	pushMaxSpeed
>10741	Identifier	this
>10742	Callee	setMaxSpeed
>10743	Identifier	setMaxSpeed
>10744	Label	 
>10745	Identifier	STATE_PUSH
>10746	BreakStatement	 
>10747	CompoundStatement	 
>10748	IfStatement	if ( hair )
>10749	CompoundStatement	 
>10750	ExpressionStatement	 
>10751	AssignmentExpr	hair = 0
>10752	PrimaryExpression	0
>10753	Identifier	hair
>10754	ExpressionStatement	 
>10755	AssignmentExpr	hair -> fadeAlphaWithLife = 1
>10756	PrimaryExpression	1
>10757	PtrMemberAccess	hair -> fadeAlphaWithLife
>10758	Identifier	fadeAlphaWithLife
>10759	Identifier	hair
>10760	ExpressionStatement	 
>10761	CallExpression	hair -> setDecayRate ( 10 )
>10762	ArgumentList	10
>10763	Argument	10
>10764	PrimaryExpression	10
>10765	Callee	hair -> setDecayRate
>10766	PtrMemberAccess	hair -> setDecayRate
>10767	Identifier	setDecayRate
>10768	Identifier	hair
>10769	ExpressionStatement	 
>10770	CallExpression	hair -> setLife ( 1 )
>10771	ArgumentList	1
>10772	Argument	1
>10773	PrimaryExpression	1
>10774	Callee	hair -> setLife
>10775	PtrMemberAccess	hair -> setLife
>10776	Identifier	setLife
>10777	Identifier	hair
>10778	Condition	 
>10779	Identifier	hair
>10780	IfStatement	if ( ! calledEntityDied )
>10781	CompoundStatement	 
>10782	ExpressionStatement	 
>10783	AssignmentExpr	calledEntityDied = true
>10784	Identifier	true
>10785	Identifier	calledEntityDied
>10786	ExpressionStatement	 
>10787	CallExpression	dsq -> game -> entityDied ( this )
>10788	ArgumentList	this
>10789	Argument	this
>10790	Identifier	this
>10791	Callee	dsq -> game -> entityDied
>10792	PtrMemberAccess	dsq -> game -> entityDied
>10793	Identifier	entityDied
>10794	PtrMemberAccess	dsq -> game
>10795	Identifier	game
>10796	Identifier	dsq
>10797	Condition	 
>10798	UnaryOp	! calledEntityDied
>10799	Identifier	calledEntityDied
>10800	UnaryOperator	!
>10801	ExpressionStatement	 
>10802	CallExpression	Shot 
>10803	ArgumentList	this
>10804	Argument	this
>10805	Identifier	this
>10806	Callee	Shot 
>10807	Identifier	Shot 
>10808	ExpressionStatement	 
>10809	CallExpression	popBubble ( )
>10810	ArgumentList	 
>10811	Callee	popBubble
>10812	Identifier	popBubble
>10813	IfStatement	if ( ! isGoingToBeEaten ( ) )
>10814	ElseStatement	else
>10815	CompoundStatement	 
>10816	ExpressionStatement	 
>10817	CallExpression	sound ( \"Gulp\" )
>10818	ArgumentList	\"Gulp\"
>10819	Argument	\"Gulp\"
>10820	PrimaryExpression	\"Gulp\"
>10821	Callee	sound
>10822	Identifier	sound
>10823	CompoundStatement	 
>10824	IfStatement	if ( ! deathSound . empty ( ) )
>10825	ExpressionStatement	 
>10826	CallExpression	sound ( deathSound , ( 800 + rand ( ) % 400 ) / 1000.0f )
>10827	ArgumentList	deathSound
>10828	Argument	( 800 + rand ( ) % 400 ) / 1000.0f
>10829	MultiplicativeExpression	( 800 + rand ( ) % 400 ) / 1000.0f
>10830	PrimaryExpression	1000.0f
>10831	AdditiveExpression	800 + rand ( ) % 400
>10832	MultiplicativeExpression	rand ( ) % 400
>10833	PrimaryExpression	400
>10834	CallExpression	rand ( )
>10835	ArgumentList	 
>10836	Callee	rand
>10837	Identifier	rand
>10838	PrimaryExpression	800
>10839	Argument	deathSound
>10840	Identifier	deathSound
>10841	Callee	sound
>10842	Identifier	sound
>10843	Condition	 
>10844	UnaryOp	! deathSound . empty ( )
>10845	CallExpression	deathSound . empty ( )
>10846	ArgumentList	 
>10847	Callee	deathSound . empty
>10848	MemberAccess	deathSound . empty
>10849	Identifier	empty
>10850	Identifier	deathSound
>10851	UnaryOperator	!
>10852	Condition	 
>10853	UnaryOp	! isGoingToBeEaten ( )
>10854	CallExpression	isGoingToBeEaten ( )
>10855	ArgumentList	 
>10856	Callee	isGoingToBeEaten
>10857	Identifier	isGoingToBeEaten
>10858	UnaryOperator	!
>10859	Label	 
>10860	Identifier	STATE_DEAD
>10861	Condition	 
>10862	Identifier	action
>10882	FunctionDef	Entity 
>10883	ParameterList	 
>10884	ReturnType	bool
>10885	CompoundStatement	 
>10886	ReturnStatement	 
>10887	OrExpression	( isEntityProperty ( EP_MOVABLE ) ) || ( frozenTimer > 0 )
>10888	RelationalExpression	frozenTimer > 0
>10889	PrimaryExpression	0
>10890	Identifier	frozenTimer
>10891	CallExpression	isEntityProperty ( EP_MOVABLE )
>10892	ArgumentList	EP_MOVABLE
>10893	Argument	EP_MOVABLE
>10894	Identifier	EP_MOVABLE
>10895	Callee	isEntityProperty
>10896	Identifier	isEntityProperty
>10903	FunctionDef	Entity 
>10904	ParameterList	float time
>10905	Parameter	 
>10906	Identifier	time
>10907	ParameterType	float
>10908	ReturnType	void
>10909	CompoundStatement	 
>10910	IfStatement	if ( ! bubble )
>10911	CompoundStatement	 
>10912	ExpressionStatement	 
>10913	CallExpression	core -> getTopStateData ( ) -> addRenderObject ( bubble , LR_PARTICLES )
>10914	ArgumentList	bubble
>10915	Argument	LR_PARTICLES
>10916	Identifier	LR_PARTICLES
>10917	Argument	bubble
>10918	Identifier	bubble
>10919	Callee	core -> getTopStateData ( ) -> addRenderObject
>10920	PtrMemberAccess	core -> getTopStateData ( ) -> addRenderObject
>10921	Identifier	addRenderObject
>10922	CallExpression	core -> getTopStateData ( )
>10923	ArgumentList	 
>10924	Callee	core -> getTopStateData
>10925	PtrMemberAccess	core -> getTopStateData
>10926	Identifier	getTopStateData
>10927	Identifier	core
>10928	ExpressionStatement	 
>10929	CallExpression	bubble -> alpha . startPath ( time + time * 0.25f )
>10930	ArgumentList	time + time * 0.25f
>10931	Argument	time + time * 0.25f
>10932	AdditiveExpression	time + time * 0.25f
>10933	MultiplicativeExpression	time * 0.25f
>10934	PrimaryExpression	0.25f
>10935	Identifier	time
>10936	Identifier	time
>10937	Callee	bubble -> alpha . startPath
>10938	MemberAccess	bubble -> alpha . startPath
>10939	Identifier	startPath
>10940	PtrMemberAccess	bubble -> alpha
>10941	Identifier	alpha
>10942	Identifier	bubble
>10943	ExpressionStatement	 
>10944	CallExpression	bubble -> alpha . data -> path . addPathNode ( 0 , 1 )
>10945	ArgumentList	0
>10946	Argument	1
>10947	PrimaryExpression	1
>10948	Argument	0
>10949	PrimaryExpression	0
>10950	Callee	bubble -> alpha . data -> path . addPathNode
>10951	MemberAccess	bubble -> alpha . data -> path . addPathNode
>10952	Identifier	addPathNode
>10953	PtrMemberAccess	bubble -> alpha . data -> path
>10954	Identifier	path
>10955	MemberAccess	bubble -> alpha . data
>10956	Identifier	data
>10957	PtrMemberAccess	bubble -> alpha
>10958	Identifier	alpha
>10959	Identifier	bubble
>10960	ExpressionStatement	 
>10961	CallExpression	bubble -> alpha . data -> path . addPathNode ( 0.5 , 0.75 )
>10962	ArgumentList	0.5
>10963	Argument	0.75
>10964	PrimaryExpression	0.75
>10965	Argument	0.5
>10966	PrimaryExpression	0.5
>10967	Callee	bubble -> alpha . data -> path . addPathNode
>10968	MemberAccess	bubble -> alpha . data -> path . addPathNode
>10969	Identifier	addPathNode
>10970	PtrMemberAccess	bubble -> alpha . data -> path
>10971	Identifier	path
>10972	MemberAccess	bubble -> alpha . data
>10973	Identifier	data
>10974	PtrMemberAccess	bubble -> alpha
>10975	Identifier	alpha
>10976	Identifier	bubble
>10977	ExpressionStatement	 
>10978	CallExpression	bubble -> alpha . data -> path . addPathNode ( 0.5 , 0 )
>10979	ArgumentList	0.5
>10980	Argument	0
>10981	PrimaryExpression	0
>10982	Argument	0.5
>10983	PrimaryExpression	0.5
>10984	Callee	bubble -> alpha . data -> path . addPathNode
>10985	MemberAccess	bubble -> alpha . data -> path . addPathNode
>10986	Identifier	addPathNode
>10987	PtrMemberAccess	bubble -> alpha . data -> path
>10988	Identifier	path
>10989	MemberAccess	bubble -> alpha . data
>10990	Identifier	data
>10991	PtrMemberAccess	bubble -> alpha
>10992	Identifier	alpha
>10993	Identifier	bubble
>10994	ExpressionStatement	 
>10995	CallExpression	bubble -> alpha . ensureData ( )
>10996	ArgumentList	 
>10997	Callee	bubble -> alpha . ensureData
>10998	MemberAccess	bubble -> alpha . ensureData
>10999	Identifier	ensureData
>11000	PtrMemberAccess	bubble -> alpha
>11001	Identifier	alpha
>11002	Identifier	bubble
>11003	ExpressionStatement	 
>11004	CallExpression	bubble -> scale . interpolateTo ( Vector ( 2 , 2 ) , 0.5 , 0 , 0 , 1 )
>11005	ArgumentList	Vector ( 2 , 2 )
>11006	Argument	1
>11007	PrimaryExpression	1
>11008	Argument	0
>11009	PrimaryExpression	0
>11010	Argument	0
>11011	PrimaryExpression	0
>11012	Argument	0.5
>11013	PrimaryExpression	0.5
>11014	Argument	Vector ( 2 , 2 )
>11015	CallExpression	Vector ( 2 , 2 )
>11016	ArgumentList	2
>11017	Argument	2
>11018	PrimaryExpression	2
>11019	Argument	2
>11020	PrimaryExpression	2
>11021	Callee	Vector
>11022	Identifier	Vector
>11023	Callee	bubble -> scale . interpolateTo
>11024	MemberAccess	bubble -> scale . interpolateTo
>11025	Identifier	interpolateTo
>11026	PtrMemberAccess	bubble -> scale
>11027	Identifier	scale
>11028	Identifier	bubble
>11029	ExpressionStatement	 
>11030	AssignmentExpr	bubble -> scale = Vector ( 0.2 , 0.2 )
>11031	CallExpression	Vector ( 0.2 , 0.2 )
>11032	ArgumentList	0.2
>11033	Argument	0.2
>11034	PrimaryExpression	0.2
>11035	Argument	0.2
>11036	PrimaryExpression	0.2
>11037	Callee	Vector
>11038	Identifier	Vector
>11039	PtrMemberAccess	bubble -> scale
>11040	Identifier	scale
>11041	Identifier	bubble
>11042	ExpressionStatement	 
>11043	AssignmentExpr	bubble -> position = this -> position
>11044	PtrMemberAccess	this -> position
>11045	Identifier	position
>11046	Identifier	this
>11047	PtrMemberAccess	bubble -> position
>11048	Identifier	position
>11049	Identifier	bubble
>11050	ExpressionStatement	 
>11051	CallExpression	bubble -> setTexture ( \"spell-bubble\" )
>11052	ArgumentList	\"spell-bubble\"
>11053	Argument	\"spell-bubble\"
>11054	PrimaryExpression	\"spell-bubble\"
>11055	Callee	bubble -> setTexture
>11056	PtrMemberAccess	bubble -> setTexture
>11057	Identifier	setTexture
>11058	Identifier	bubble
>11059	ExpressionStatement	 
>11060	Identifier	Quad
>11061	Statement	 
>11062	Statement	 
>11063	Statement	 
>11064	Condition	 
>11065	UnaryOp	! bubble
>11066	Identifier	bubble
>11067	UnaryOperator	!
>11068	ExpressionStatement	 
>11069	CallExpression	onFreeze ( )
>11070	ArgumentList	 
>11071	Callee	onFreeze
>11072	Identifier	onFreeze
>11073	ExpressionStatement	 
>11074	CallExpression	vel . capLength2D ( 100 )
>11075	ArgumentList	100
>11076	Argument	100
>11077	PrimaryExpression	100
>11078	Callee	vel . capLength2D
>11079	MemberAccess	vel . capLength2D
>11080	Identifier	capLength2D
>11081	Identifier	vel
>11082	ExpressionStatement	 
>11083	CallExpression	disableMotionBlur ( )
>11084	ArgumentList	 
>11085	Callee	disableMotionBlur
>11086	Identifier	disableMotionBlur
>11087	ExpressionStatement	 
>11088	AssignmentExpr	frozenTimer = time
>11089	Identifier	time
>11090	Identifier	frozenTimer
>11091	ExpressionStatement	 
>11092	AssignmentExpr	vel = 0
>11093	PrimaryExpression	0
>11094	Identifier	vel
>11119	FunctionDef	Entity 
>11120	ParameterList	int action
>11121	Parameter	 
>11122	Identifier	action
>11123	ParameterType	int
>11124	ReturnType	void
>11125	CompoundStatement	 
>11126	SwitchStatement	switch ( action )
>11127	CompoundStatement	 
>11128	BreakStatement	 
>11129	CompoundStatement	 
>11130	ExpressionStatement	 
>11131	CallExpression	setState ( STATE_DEAD )
>11132	ArgumentList	STATE_DEAD
>11133	Argument	STATE_DEAD
>11134	Identifier	STATE_DEAD
>11135	Callee	setState
>11136	Identifier	setState
>11137	Label	 
>11138	Identifier	STATE_DEATHSCENE
>11139	BreakStatement	 
>11140	CompoundStatement	 
>11141	ExpressionStatement	 
>11142	CallExpression	setState ( STATE_IDLE )
>11143	ArgumentList	STATE_IDLE
>11144	Argument	STATE_IDLE
>11145	Identifier	STATE_IDLE
>11146	Callee	setState
>11147	Identifier	setState
>11148	Label	 
>11149	Identifier	STATE_PUSHDELAY
>11150	BreakStatement	 
>11151	CompoundStatement	 
>11152	ExpressionStatement	 
>11153	CallExpression	setState ( STATE_IDLE )
>11154	ArgumentList	STATE_IDLE
>11155	Argument	STATE_IDLE
>11156	Identifier	STATE_IDLE
>11157	Callee	setState
>11158	Identifier	setState
>11159	Label	 
>11160	Identifier	STATE_PUSH
>11161	Condition	 
>11162	Identifier	action
>11169	FunctionDef	Entity 
>11170	ParameterList	 
>11171	ReturnType	void
>11172	CompoundStatement	 
>11173	IfStatement	if ( bubble )
>11174	CompoundStatement	 
>11175	ExpressionStatement	 
>11176	CallExpression	dsq -> spawnParticleEffect ( \"PopEnemyBubble\" , position )
>11177	ArgumentList	\"PopEnemyBubble\"
>11178	Argument	position
>11179	Identifier	position
>11180	Argument	\"PopEnemyBubble\"
>11181	PrimaryExpression	\"PopEnemyBubble\"
>11182	Callee	dsq -> spawnParticleEffect
>11183	PtrMemberAccess	dsq -> spawnParticleEffect
>11184	Identifier	spawnParticleEffect
>11185	Identifier	dsq
>11186	ExpressionStatement	 
>11187	AssignmentExpr	bubble = 0
>11188	PrimaryExpression	0
>11189	Identifier	bubble
>11190	ExpressionStatement	 
>11191	AssignmentExpr	bubble -> fadeAlphaWithLife = bubble -> alpha . x
>11192	MemberAccess	bubble -> alpha . x
>11193	Identifier	x
>11194	PtrMemberAccess	bubble -> alpha
>11195	Identifier	alpha
>11196	Identifier	bubble
>11197	PtrMemberAccess	bubble -> fadeAlphaWithLife
>11198	Identifier	fadeAlphaWithLife
>11199	Identifier	bubble
>11200	ExpressionStatement	 
>11201	CallExpression	bubble -> setDecayRate ( 4 )
>11202	ArgumentList	4
>11203	Argument	4
>11204	PrimaryExpression	4
>11205	Callee	bubble -> setDecayRate
>11206	PtrMemberAccess	bubble -> setDecayRate
>11207	Identifier	setDecayRate
>11208	Identifier	bubble
>11209	ExpressionStatement	 
>11210	CallExpression	bubble -> setLife ( 1 )
>11211	ArgumentList	1
>11212	Argument	1
>11213	PrimaryExpression	1
>11214	Callee	bubble -> setLife
>11215	PtrMemberAccess	bubble -> setLife
>11216	Identifier	setLife
>11217	Identifier	bubble
>11218	ExpressionStatement	 
>11219	CallExpression	sound ( \"Pop\" )
>11220	ArgumentList	\"Pop\"
>11221	Argument	\"Pop\"
>11222	PrimaryExpression	\"Pop\"
>11223	Callee	sound
>11224	Identifier	sound
>11225	ExpressionStatement	 
>11226	AssignmentExpr	frozenTimer = 0
>11227	PrimaryExpression	0
>11228	Identifier	frozenTimer
>11229	Condition	 
>11230	Identifier	bubble
>11242	FunctionDef	Entity 
>11243	ParameterList	 
>11244	ReturnType	bool
>11245	CompoundStatement	 
>11246	ReturnStatement	 
>11247	CallExpression	damageTimer . isActive ( )
>11248	ArgumentList	 
>11249	Callee	damageTimer . isActive
>11250	MemberAccess	damageTimer . isActive
>11251	Identifier	isActive
>11252	Identifier	damageTimer
>11258	FunctionDef	Entity 
>11259	ParameterList	 
>11260	ReturnType	bool
>11261	CompoundStatement	 
>11262	ReturnStatement	 
>11263	Identifier	invincible
>11268	FunctionDef	Entity 
>11269	ParameterList	bool inv
>11270	Parameter	 
>11271	Identifier	inv
>11272	ParameterType	bool
>11273	ReturnType	void
>11274	CompoundStatement	 
>11275	ExpressionStatement	 
>11276	AssignmentExpr	invincible = inv
>11277	Identifier	inv
>11278	Identifier	invincible
>11284	FunctionDef	Entity 
>11285	ParameterList	 
>11286	ReturnType	bool
>11287	CompoundStatement	 
>11288	ReturnStatement	 
>11289	Identifier	false
>11290	ForStatement	for ( Element * e = dsq -> getFirstElementOnLayer ( 12 ) ; e ; e = e -> bgLayerNext )
>11291	CompoundStatement	 
>11292	IfStatement	if ( e -> isCoordinateInside ( position ) )
>11293	ReturnStatement	 
>11294	Identifier	true
>11295	Condition	 
>11296	CallExpression	e -> isCoordinateInside ( position )
>11297	ArgumentList	position
>11298	Argument	position
>11299	Identifier	position
>11300	Callee	e -> isCoordinateInside
>11301	PtrMemberAccess	e -> isCoordinateInside
>11302	Identifier	isCoordinateInside
>11303	Identifier	e
>11304	AssignmentExpr	 
>11305	PtrMemberAccess	e -> bgLayerNext
>11306	Identifier	bgLayerNext
>11307	Identifier	e
>11308	Identifier	e
>11309	Condition	 
>11310	Identifier	e
>11311	ForInit	 
>11312	IdentifierDeclStatement	Element * e = dsq -> getFirstElementOnLayer ( 12 ) ;
>11313	IdentifierDecl	* e = dsq -> getFirstElementOnLayer ( 12 )
>11314	AssignmentExpr	* e = dsq -> getFirstElementOnLayer ( 12 )
>11315	CallExpression	dsq -> getFirstElementOnLayer ( 12 )
>11316	ArgumentList	12
>11317	Argument	12
>11318	PrimaryExpression	12
>11319	Callee	dsq -> getFirstElementOnLayer
>11320	PtrMemberAccess	dsq -> getFirstElementOnLayer
>11321	Identifier	getFirstElementOnLayer
>11322	Identifier	dsq
>11323	Identifier	e
>11324	Identifier	e
>11325	IdentifierDeclType	Element *
>11339	FunctionDef	Entity 
>11340	ParameterList	int state
>11341	Parameter	 
>11342	Identifier	state
>11343	ParameterType	int
>11344	ReturnType	bool
>11345	CompoundStatement	 
>11346	ReturnStatement	 
>11347	Identifier	true
>11348	IfStatement	if ( enqueuedState == STATE_DEAD || currentState == STATE_DEAD || nextState == STATE_DEAD )
>11349	ElseStatement	else
>11350	IfStatement	if ( enqueuedState == STATE_DEATHSCENE || currentState == STATE_DEATHSCENE || nextState == STATE_DEATHSCENE )
>11351	CompoundStatement	 
>11352	IfStatement	if ( state == STATE_DEAD )
>11353	ElseStatement	else
>11354	CompoundStatement	 
>11355	ReturnStatement	 
>11356	Identifier	false
>11357	ExpressionStatement	 
>11358	CallExpression	debugLog ( os . str ( ) )
>11359	ArgumentList	os . str ( )
>11360	Argument	os . str ( )
>11361	CallExpression	os . str ( )
>11362	ArgumentList	 
>11363	Callee	os . str
>11364	MemberAccess	os . str
>11365	Identifier	str
>11366	Identifier	os
>11367	Callee	debugLog
>11368	Identifier	debugLog
>11369	ExpressionStatement	 
>11370	ShiftExpression	os << \"entity
>11371	ShiftExpression	\"entity
>11372	ShiftExpression	name << \" tried to set state to
>11373	ShiftExpression	\" tried to set state to
>11374	ShiftExpression	state << \" when in/entering deathscene\"
>11375	PrimaryExpression	\" when in/entering deathscene\"
>11376	Identifier	state
>11377	PrimaryExpression	\" tried to set state to
>11378	Identifier	name
>11379	PrimaryExpression	\"entity
>11380	Identifier	os
>11381	IdentifierDeclStatement	 
>11382	IdentifierDecl	os
>11383	Identifier	os
>11384	IdentifierDeclType	std 
>11385	ReturnStatement	 
>11386	Identifier	true
>11387	Condition	 
>11388	EqualityExpression	state == STATE_DEAD
>11389	Identifier	STATE_DEAD
>11390	Identifier	state
>11391	Condition	 
>11392	OrExpression	enqueuedState == STATE_DEATHSCENE || currentState == STATE_DEATHSCENE || nextState == STATE_DEATHSCENE
>11393	OrExpression	currentState == STATE_DEATHSCENE || nextState == STATE_DEATHSCENE
>11394	EqualityExpression	nextState == STATE_DEATHSCENE
>11395	Identifier	STATE_DEATHSCENE
>11396	Identifier	nextState
>11397	EqualityExpression	currentState == STATE_DEATHSCENE
>11398	Identifier	STATE_DEATHSCENE
>11399	Identifier	currentState
>11400	EqualityExpression	enqueuedState == STATE_DEATHSCENE
>11401	Identifier	STATE_DEATHSCENE
>11402	Identifier	enqueuedState
>11403	CompoundStatement	 
>11404	ReturnStatement	 
>11405	Identifier	false
>11406	ExpressionStatement	 
>11407	CallExpression	debugLog ( os . str ( ) )
>11408	ArgumentList	os . str ( )
>11409	Argument	os . str ( )
>11410	CallExpression	os . str ( )
>11411	ArgumentList	 
>11412	Callee	os . str
>11413	MemberAccess	os . str
>11414	Identifier	str
>11415	Identifier	os
>11416	Callee	debugLog
>11417	Identifier	debugLog
>11418	ExpressionStatement	 
>11419	ShiftExpression	os << \"entity
>11420	ShiftExpression	\"entity
>11421	ShiftExpression	name << \" tried to set state to
>11422	ShiftExpression	\" tried to set state to
>11423	ShiftExpression	state << \" when in/entering dead\"
>11424	PrimaryExpression	\" when in/entering dead\"
>11425	Identifier	state
>11426	PrimaryExpression	\" tried to set state to
>11427	Identifier	name
>11428	PrimaryExpression	\"entity
>11429	Identifier	os
>11430	IdentifierDeclStatement	 
>11431	IdentifierDecl	os
>11432	Identifier	os
>11433	IdentifierDeclType	std 
>11434	Condition	 
>11435	OrExpression	enqueuedState == STATE_DEAD || currentState == STATE_DEAD || nextState == STATE_DEAD
>11436	OrExpression	currentState == STATE_DEAD || nextState == STATE_DEAD
>11437	EqualityExpression	nextState == STATE_DEAD
>11438	Identifier	STATE_DEAD
>11439	Identifier	nextState
>11440	EqualityExpression	currentState == STATE_DEAD
>11441	Identifier	STATE_DEAD
>11442	Identifier	currentState
>11443	EqualityExpression	enqueuedState == STATE_DEAD
>11444	Identifier	STATE_DEAD
>11445	Identifier	enqueuedState
>11459	FunctionDef	Entity 
>11460	ParameterList	bool affectAvatar
>11461	Parameter	 
>11462	Identifier	affectAvatar
>11463	ParameterType	bool
>11464	ReturnType	bool
>11465	CompoundStatement	 
>11466	ReturnStatement	 
>11467	Identifier	false
>11468	ForStatement	for ( int i = 0 ; i < dsq -> game -> getNumPaths ( ) ; i ++ )
>11469	CompoundStatement	 
>11470	IfStatement	if ( ! p -> nodes . empty ( ) )
>11471	CompoundStatement	 
>11472	IfStatement	if ( p && n )
>11473	CompoundStatement	 
>11474	IfStatement	if ( p -> warpMap . empty ( ) && ! p -> warpNode . empty ( ) && p -> isCoordinateInside ( position ) )
>11475	CompoundStatement	 
>11476	IfStatement	if ( p2 )
>11477	CompoundStatement	 
>11478	ReturnStatement	 
>11479	Identifier	true
>11480	IfStatement	if ( affectAvatar )
>11481	CompoundStatement	 
>11482	ExpressionStatement	 
>11483	CallExpression	dsq -> game -> postLocalWarp ( )
>11484	ArgumentList	 
>11485	Callee	dsq -> game -> postLocalWarp
>11486	PtrMemberAccess	dsq -> game -> postLocalWarp
>11487	Identifier	postLocalWarp
>11488	PtrMemberAccess	dsq -> game
>11489	Identifier	game
>11490	Identifier	dsq
>11491	ExpressionStatement	 
>11492	AssignmentExpr	dsq -> game -> avatar -> position = this -> position
>11493	PtrMemberAccess	this -> position
>11494	Identifier	position
>11495	Identifier	this
>11496	PtrMemberAccess	dsq -> game -> avatar -> position
>11497	Identifier	position
>11498	PtrMemberAccess	dsq -> game -> avatar
>11499	Identifier	avatar
>11500	PtrMemberAccess	dsq -> game
>11501	Identifier	game
>11502	Identifier	dsq
>11503	Condition	 
>11504	Identifier	affectAvatar
>11505	ExpressionStatement	 
>11506	AssignmentExpr	position = p2 -> getPathNode ( 0 ) -> position
>11507	PtrMemberAccess	p2 -> getPathNode ( 0 ) -> position
>11508	Identifier	position
>11509	CallExpression	p2 -> getPathNode ( 0 )
>11510	ArgumentList	0
>11511	Argument	0
>11512	PrimaryExpression	0
>11513	Callee	p2 -> getPathNode
>11514	PtrMemberAccess	p2 -> getPathNode
>11515	Identifier	getPathNode
>11516	Identifier	p2
>11517	Identifier	position
>11518	IfStatement	if ( affectAvatar )
>11519	CompoundStatement	 
>11520	ExpressionStatement	 
>11521	CallExpression	dsq -> game -> preLocalWarp ( p -> localWarpType )
>11522	ArgumentList	p -> localWarpType
>11523	Argument	p -> localWarpType
>11524	PtrMemberAccess	p -> localWarpType
>11525	Identifier	localWarpType
>11526	Identifier	p
>11527	Callee	dsq -> game -> preLocalWarp
>11528	PtrMemberAccess	dsq -> game -> preLocalWarp
>11529	Identifier	preLocalWarp
>11530	PtrMemberAccess	dsq -> game
>11531	Identifier	game
>11532	Identifier	dsq
>11533	ExpressionStatement	 
>11534	AssignmentExpr	dsq -> game -> avatar -> position = this -> position
>11535	PtrMemberAccess	this -> position
>11536	Identifier	position
>11537	Identifier	this
>11538	PtrMemberAccess	dsq -> game -> avatar -> position
>11539	Identifier	position
>11540	PtrMemberAccess	dsq -> game -> avatar
>11541	Identifier	avatar
>11542	PtrMemberAccess	dsq -> game
>11543	Identifier	game
>11544	Identifier	dsq
>11545	Condition	 
>11546	Identifier	affectAvatar
>11547	Condition	 
>11548	Identifier	p2
>11549	IdentifierDeclStatement	 
>11550	IdentifierDecl	* p2 = dsq -> game -> getPathByName ( p -> warpNode )
>11551	AssignmentExpr	* p2 = dsq -> game -> getPathByName ( p -> warpNode )
>11552	CallExpression	dsq -> game -> getPathByName ( p -> warpNode )
>11553	ArgumentList	p -> warpNode
>11554	Argument	p -> warpNode
>11555	PtrMemberAccess	p -> warpNode
>11556	Identifier	warpNode
>11557	Identifier	p
>11558	Callee	dsq -> game -> getPathByName
>11559	PtrMemberAccess	dsq -> game -> getPathByName
>11560	Identifier	getPathByName
>11561	PtrMemberAccess	dsq -> game
>11562	Identifier	game
>11563	Identifier	dsq
>11564	Identifier	p2
>11565	Identifier	p2
>11566	IdentifierDeclType	Path *
>11567	Condition	 
>11568	AndExpression	p -> warpMap . empty ( ) && ! p -> warpNode . empty ( ) && p -> isCoordinateInside ( position )
>11569	AndExpression	! p -> warpNode . empty ( ) && p -> isCoordinateInside ( position )
>11570	CallExpression	p -> isCoordinateInside ( position )
>11571	ArgumentList	position
>11572	Argument	position
>11573	Identifier	position
>11574	Callee	p -> isCoordinateInside
>11575	PtrMemberAccess	p -> isCoordinateInside
>11576	Identifier	isCoordinateInside
>11577	Identifier	p
>11578	UnaryOp	! p -> warpNode . empty ( )
>11579	CallExpression	p -> warpNode . empty ( )
>11580	ArgumentList	 
>11581	Callee	p -> warpNode . empty
>11582	MemberAccess	p -> warpNode . empty
>11583	Identifier	empty
>11584	PtrMemberAccess	p -> warpNode
>11585	Identifier	warpNode
>11586	Identifier	p
>11587	UnaryOperator	!
>11588	CallExpression	p -> warpMap . empty ( )
>11589	ArgumentList	 
>11590	Callee	p -> warpMap . empty
>11591	MemberAccess	p -> warpMap . empty
>11592	Identifier	empty
>11593	PtrMemberAccess	p -> warpMap
>11594	Identifier	warpMap
>11595	Identifier	p
>11596	Condition	 
>11597	AndExpression	p && n
>11598	Identifier	n
>11599	Identifier	p
>11600	IdentifierDeclStatement	 
>11601	IdentifierDecl	* n = & p -> nodes [ 0 ]
>11602	AssignmentExpr	* n = & p -> nodes [ 0 ]
>11603	UnaryOp	& p -> nodes [ 0 ]
>11604	ArrayIndexing	p -> nodes [ 0 ]
>11605	PrimaryExpression	0
>11606	PtrMemberAccess	p -> nodes
>11607	Identifier	nodes
>11608	Identifier	p
>11609	UnaryOperator	&
>11610	Identifier	n
>11611	Identifier	n
>11612	IdentifierDeclType	PathNode *
>11613	Condition	 
>11614	UnaryOp	! p -> nodes . empty ( )
>11615	CallExpression	p -> nodes . empty ( )
>11616	ArgumentList	 
>11617	Callee	p -> nodes . empty
>11618	MemberAccess	p -> nodes . empty
>11619	Identifier	empty
>11620	PtrMemberAccess	p -> nodes
>11621	Identifier	nodes
>11622	Identifier	p
>11623	UnaryOperator	!
>11624	IdentifierDeclStatement	 
>11625	IdentifierDecl	* p = dsq -> game -> getPath ( i )
>11626	AssignmentExpr	* p = dsq -> game -> getPath ( i )
>11627	CallExpression	dsq -> game -> getPath ( i )
>11628	ArgumentList	i
>11629	Argument	i
>11630	Identifier	i
>11631	Callee	dsq -> game -> getPath
>11632	PtrMemberAccess	dsq -> game -> getPath
>11633	Identifier	getPath
>11634	PtrMemberAccess	dsq -> game
>11635	Identifier	game
>11636	Identifier	dsq
>11637	Identifier	p
>11638	Identifier	p
>11639	IdentifierDeclType	Path *
>11640	IncDecOp	 
>11641	IncDec	++
>11642	Identifier	i
>11643	Condition	 
>11644	RelationalExpression	i < dsq -> game -> getNumPaths ( )
>11645	CallExpression	dsq -> game -> getNumPaths ( )
>11646	ArgumentList	 
>11647	Callee	dsq -> game -> getNumPaths
>11648	PtrMemberAccess	dsq -> game -> getNumPaths
>11649	Identifier	getNumPaths
>11650	PtrMemberAccess	dsq -> game
>11651	Identifier	game
>11652	Identifier	dsq
>11653	Identifier	i
>11654	ForInit	 
>11655	IdentifierDeclStatement	int i = 0 ;
>11656	IdentifierDecl	i = 0
>11657	AssignmentExpr	i = 0
>11658	PrimaryExpression	0
>11659	Identifier	i
>11660	Identifier	i
>11661	IdentifierDeclType	int
>11705	FunctionDef	Entity 
>11706	ParameterList	 
>11707	ReturnType	void
>11708	CompoundStatement	 
>11709	ExpressionStatement	 
>11710	AssignmentExpr	position = lastPosition
>11711	Identifier	lastPosition
>11712	Identifier	position
>11718	FunctionDef	Entity 
>11719	ParameterList	const std 
>11720	Parameter	 
>11721	Identifier	intv
>11722	ParameterType	int
>11723	Parameter	 
>11724	Identifier	p
>11725	ParameterType	const std 
>11726	ReturnType	void
>11727	CompoundStatement	 
>11728	ForStatement	for ( int i = 0 ; i < skeletalSprite . bones . size ( ) ; i ++ )
>11729	CompoundStatement	 
>11730	ForStatement	for ( int j = 0 ; j < skeletalSprite . bones [ i ] -> collisionMask . size ( ) ; j += intv )
>11731	CompoundStatement	 
>11732	ExpressionStatement	 
>11733	CallExpression	dsq -> spawnParticleEffect ( p , pos )
>11734	ArgumentList	p
>11735	Argument	pos
>11736	Identifier	pos
>11737	Argument	p
>11738	Identifier	p
>11739	Callee	dsq -> spawnParticleEffect
>11740	PtrMemberAccess	dsq -> spawnParticleEffect
>11741	Identifier	spawnParticleEffect
>11742	Identifier	dsq
>11743	IdentifierDeclStatement	 
>11744	IdentifierDecl	pos = skeletalSprite . bones [ i ] -> getWorldCollidePosition ( skeletalSprite . bones [ i ] -> collisionMask [ \
>11745	AssignmentExpr	pos = skeletalSprite . bones [ i ] -> getWorldCollidePosition ( skeletalSprite . bones [ i ] -> collisionMask [ \
>11746	CallExpression	skeletalSprite . bones [ i ] -> getWorldCollidePosition ( skeletalSprite . bones [ i ] -> collisionMask [ j ] )
>11747	ArgumentList	skeletalSprite . bones [ i ] -> collisionMask [ j ]
>11748	Argument	skeletalSprite . bones [ i ] -> collisionMask [ j ]
>11749	ArrayIndexing	skeletalSprite . bones [ i ] -> collisionMask [ j ]
>11750	Identifier	j
>11751	PtrMemberAccess	skeletalSprite . bones [ i ] -> collisionMask
>11752	Identifier	collisionMask
>11753	ArrayIndexing	skeletalSprite . bones [ i ]
>11754	Identifier	i
>11755	MemberAccess	skeletalSprite . bones
>11756	Identifier	bones
>11757	Identifier	skeletalSprite
>11758	Callee	skeletalSprite . bones [ i ] -> getWorldCollidePosition
>11759	PtrMemberAccess	skeletalSprite . bones [ i ] -> getWorldCollidePosition
>11760	Identifier	getWorldCollidePosition
>11761	ArrayIndexing	skeletalSprite . bones [ i ]
>11762	Identifier	i
>11763	MemberAccess	skeletalSprite . bones
>11764	Identifier	bones
>11765	Identifier	skeletalSprite
>11766	Identifier	pos
>11767	Identifier	pos
>11768	IdentifierDeclType	Vector
>11769	AssignmentExpr	 
>11770	Identifier	intv
>11771	Identifier	j
>11772	Condition	 
>11773	RelationalExpression	j < skeletalSprite . bones [ i ] -> collisionMask . size ( )
>11774	CallExpression	skeletalSprite . bones [ i ] -> collisionMask . size ( )
>11775	ArgumentList	 
>11776	Callee	skeletalSprite . bones [ i ] -> collisionMask . size
>11777	MemberAccess	skeletalSprite . bones [ i ] -> collisionMask . size
>11778	Identifier	size
>11779	PtrMemberAccess	skeletalSprite . bones [ i ] -> collisionMask
>11780	Identifier	collisionMask
>11781	ArrayIndexing	skeletalSprite . bones [ i ]
>11782	Identifier	i
>11783	MemberAccess	skeletalSprite . bones
>11784	Identifier	bones
>11785	Identifier	skeletalSprite
>11786	Identifier	j
>11787	ForInit	 
>11788	IdentifierDeclStatement	int j = 0 ;
>11789	IdentifierDecl	j = 0
>11790	AssignmentExpr	j = 0
>11791	PrimaryExpression	0
>11792	Identifier	j
>11793	Identifier	j
>11794	IdentifierDeclType	int
>11795	IncDecOp	 
>11796	IncDec	++
>11797	Identifier	i
>11798	Condition	 
>11799	RelationalExpression	i < skeletalSprite . bones . size ( )
>11800	CallExpression	skeletalSprite . bones . size ( )
>11801	ArgumentList	 
>11802	Callee	skeletalSprite . bones . size
>11803	MemberAccess	skeletalSprite . bones . size
>11804	Identifier	size
>11805	MemberAccess	skeletalSprite . bones
>11806	Identifier	bones
>11807	Identifier	skeletalSprite
>11808	Identifier	i
>11809	ForInit	 
>11810	IdentifierDeclStatement	int i = 0 ;
>11811	IdentifierDecl	i = 0
>11812	AssignmentExpr	i = 0
>11813	PrimaryExpression	0
>11814	Identifier	i
>11815	Identifier	i
>11816	IdentifierDeclType	int
>11843	FunctionDef	Entity 
>11844	ParameterList	const DamageData & dmgData
>11845	Parameter	 
>11846	Identifier	dmgData
>11847	ParameterType	const DamageData &
>11848	ReturnType	bool
>11849	CompoundStatement	 
>11850	ReturnStatement	 
>11851	Identifier	true
>11852	IfStatement	if ( doDamage )
>11853	CompoundStatement	 
>11854	ExpressionStatement	 
>11855	CallExpression	onHealthChange ( - d . damage )
>11856	ArgumentList	- d . damage
>11857	Argument	- d . damage
>11858	UnaryOp	- d . damage
>11859	MemberAccess	d . damage
>11860	Identifier	damage
>11861	Identifier	d
>11862	UnaryOperator	-
>11863	Callee	onHealthChange
>11864	Identifier	onHealthChange
>11865	IfStatement	if ( health <= 0 )
>11866	CompoundStatement	 
>11867	IfStatement	if ( deathScene )
>11868	ElseStatement	else
>11869	ExpressionStatement	 
>11870	CallExpression	setState ( STATE_DEAD )
>11871	ArgumentList	STATE_DEAD
>11872	Argument	STATE_DEAD
>11873	Identifier	STATE_DEAD
>11874	Callee	setState
>11875	Identifier	setState
>11876	ExpressionStatement	 
>11877	CallExpression	setState ( STATE_DEATHSCENE , 0 )
>11878	ArgumentList	STATE_DEATHSCENE
>11879	Argument	0
>11880	PrimaryExpression	0
>11881	Argument	STATE_DEATHSCENE
>11882	Identifier	STATE_DEATHSCENE
>11883	Callee	setState
>11884	Identifier	setState
>11885	Condition	 
>11886	Identifier	deathScene
>11887	ExpressionStatement	 
>11888	AssignmentExpr	entityDead = true
>11889	Identifier	true
>11890	Identifier	entityDead
>11891	ExpressionStatement	 
>11892	AssignmentExpr	health = 0
>11893	PrimaryExpression	0
>11894	Identifier	health
>11895	Condition	 
>11896	RelationalExpression	health <= 0
>11897	PrimaryExpression	0
>11898	Identifier	health
>11899	ExpressionStatement	 
>11900	AssignmentExpr	health -= d . damage
>11901	MemberAccess	d . damage
>11902	Identifier	damage
>11903	Identifier	d
>11904	Identifier	health
>11905	IfStatement	if ( d . damage > 0 )
>11906	CompoundStatement	 
>11907	IfStatement	if ( entityType == ET_AVATAR )
>11908	ElseStatement	else
>11909	ExpressionStatement	 
>11910	CallExpression	this -> multColor . interpolateTo ( Vector ( 1 , 0.1 , 0.1 ) , 0.1 , 4 , 1 )
>11911	ArgumentList	Vector ( 1 , 0.1 , 0.1 )
>11912	Argument	1
>11913	PrimaryExpression	1
>11914	Argument	4
>11915	PrimaryExpression	4
>11916	Argument	0.1
>11917	PrimaryExpression	0.1
>11918	Argument	Vector ( 1 , 0.1 , 0.1 )
>11919	CallExpression	Vector ( 1 , 0.1 , 0.1 )
>11920	ArgumentList	1
>11921	Argument	0.1
>11922	PrimaryExpression	0.1
>11923	Argument	0.1
>11924	PrimaryExpression	0.1
>11925	Argument	1
>11926	PrimaryExpression	1
>11927	Callee	Vector
>11928	Identifier	Vector
>11929	Callee	this -> multColor . interpolateTo
>11930	MemberAccess	this -> multColor . interpolateTo
>11931	Identifier	interpolateTo
>11932	PtrMemberAccess	this -> multColor
>11933	Identifier	multColor
>11934	Identifier	this
>11935	ExpressionStatement	 
>11936	CallExpression	this -> multColor . interpolateTo ( Vector ( 1 , 0.1 , 0.1 ) , 0.1 , 14 , 1 )
>11937	ArgumentList	Vector ( 1 , 0.1 , 0.1 )
>11938	Argument	1
>11939	PrimaryExpression	1
>11940	Argument	14
>11941	PrimaryExpression	14
>11942	Argument	0.1
>11943	PrimaryExpression	0.1
>11944	Argument	Vector ( 1 , 0.1 , 0.1 )
>11945	CallExpression	Vector ( 1 , 0.1 , 0.1 )
>11946	ArgumentList	1
>11947	Argument	0.1
>11948	PrimaryExpression	0.1
>11949	Argument	0.1
>11950	PrimaryExpression	0.1
>11951	Argument	1
>11952	PrimaryExpression	1
>11953	Callee	Vector
>11954	Identifier	Vector
>11955	Callee	this -> multColor . interpolateTo
>11956	MemberAccess	this -> multColor . interpolateTo
>11957	Identifier	interpolateTo
>11958	PtrMemberAccess	this -> multColor
>11959	Identifier	multColor
>11960	Identifier	this
>11961	Condition	 
>11962	EqualityExpression	entityType == ET_AVATAR
>11963	Identifier	ET_AVATAR
>11964	Identifier	entityType
>11965	Condition	 
>11966	RelationalExpression	d . damage > 0
>11967	PrimaryExpression	0
>11968	MemberAccess	d . damage
>11969	Identifier	damage
>11970	Identifier	d
>11971	Condition	 
>11972	Identifier	doDamage
>11973	IfStatement	if ( entityType == ET_AVATAR )
>11974	ExpressionStatement	 
>11975	AssignmentExpr	doDamage = ( ! invincible || ! dsq -> game -> invincibleOnNested )
>11976	OrExpression	! invincible || ! dsq -> game -> invincibleOnNested
>11977	UnaryOp	! dsq -> game -> invincibleOnNested
>11978	PtrMemberAccess	dsq -> game -> invincibleOnNested
>11979	Identifier	invincibleOnNested
>11980	PtrMemberAccess	dsq -> game
>11981	Identifier	game
>11982	Identifier	dsq
>11983	UnaryOperator	!
>11984	UnaryOp	! invincible
>11985	Identifier	invincible
>11986	UnaryOperator	!
>11987	Identifier	doDamage
>11988	Condition	 
>11989	EqualityExpression	entityType == ET_AVATAR
>11990	Identifier	ET_AVATAR
>11991	Identifier	entityType
>11992	IdentifierDeclStatement	 
>11993	IdentifierDecl	doDamage = ! invincible
>11994	AssignmentExpr	doDamage = ! invincible
>11995	UnaryOp	! invincible
>11996	Identifier	invincible
>11997	UnaryOperator	!
>11998	Identifier	doDamage
>11999	Identifier	doDamage
>12000	IdentifierDeclType	bool
>12001	IfStatement	if ( d . damageType == DT_ENEMY_POISON )
>12002	CompoundStatement	 
>12003	IfStatement	if ( getEntityType ( ) != ET_AVATAR )
>12004	CompoundStatement	 
>12005	ExpressionStatement	 
>12006	CallExpression	setPoison ( 1 , d . effectTime )
>12007	ArgumentList	1
>12008	Argument	d . effectTime
>12009	MemberAccess	d . effectTime
>12010	Identifier	effectTime
>12011	Identifier	d
>12012	Argument	1
>12013	PrimaryExpression	1
>12014	Callee	setPoison
>12015	Identifier	setPoison
>12016	Condition	 
>12017	EqualityExpression	getEntityType ( ) != ET_AVATAR
>12018	Identifier	ET_AVATAR
>12019	CallExpression	getEntityType ( )
>12020	ArgumentList	 
>12021	Callee	getEntityType
>12022	Identifier	getEntityType
>12023	Condition	 
>12024	EqualityExpression	d . damageType == DT_ENEMY_POISON
>12025	Identifier	DT_ENEMY_POISON
>12026	MemberAccess	d . damageType
>12027	Identifier	damageType
>12028	Identifier	d
>12029	IfStatement	if ( d . damageType == DT_AVATAR_VINE )
>12030	CompoundStatement	 
>12031	IfStatement	if ( vineDamageTimer . isDone ( ) )
>12032	ElseStatement	else
>12033	ReturnStatement	 
>12034	Identifier	false
>12035	CompoundStatement	 
>12036	ExpressionStatement	 
>12037	CallExpression	vineDamageTimer . start ( 0.25 )
>12038	ArgumentList	0.25
>12039	Argument	0.25
>12040	PrimaryExpression	0.25
>12041	Callee	vineDamageTimer . start
>12042	MemberAccess	vineDamageTimer . start
>12043	Identifier	start
>12044	Identifier	vineDamageTimer
>12045	Condition	 
>12046	CallExpression	vineDamageTimer . isDone ( )
>12047	ArgumentList	 
>12048	Callee	vineDamageTimer . isDone
>12049	MemberAccess	vineDamageTimer . isDone
>12050	Identifier	isDone
>12051	Identifier	vineDamageTimer
>12052	Condition	 
>12053	EqualityExpression	d . damageType == DT_AVATAR_VINE
>12054	Identifier	DT_AVATAR_VINE
>12055	MemberAccess	d . damageType
>12056	Identifier	damageType
>12057	Identifier	d
>12058	IfStatement	if ( d . damageType == DT_AVATAR_BUBBLE && isDamageTarget ( DT_AVATAR_BUBBLE ) )
>12059	CompoundStatement	 
>12060	ExpressionStatement	 
>12061	CallExpression	freeze ( 30 )
>12062	ArgumentList	30
>12063	Argument	30
>12064	PrimaryExpression	30
>12065	Callee	freeze
>12066	Identifier	freeze
>12067	Condition	 
>12068	AndExpression	d . damageType == DT_AVATAR_BUBBLE && isDamageTarget ( DT_AVATAR_BUBBLE )
>12069	CallExpression	isDamageTarget ( DT_AVATAR_BUBBLE )
>12070	ArgumentList	DT_AVATAR_BUBBLE
>12071	Argument	DT_AVATAR_BUBBLE
>12072	Identifier	DT_AVATAR_BUBBLE
>12073	Callee	isDamageTarget
>12074	Identifier	isDamageTarget
>12075	EqualityExpression	d . damageType == DT_AVATAR_BUBBLE
>12076	Identifier	DT_AVATAR_BUBBLE
>12077	MemberAccess	d . damageType
>12078	Identifier	damageType
>12079	Identifier	d
>12080	IfStatement	if ( d . damage > 0 && frozenTimer )
>12081	CompoundStatement	 
>12082	ExpressionStatement	 
>12083	CallExpression	popBubble ( )
>12084	ArgumentList	 
>12085	Callee	popBubble
>12086	Identifier	popBubble
>12087	Condition	 
>12088	AndExpression	d . damage > 0 && frozenTimer
>12089	Identifier	frozenTimer
>12090	RelationalExpression	d . damage > 0
>12091	PrimaryExpression	0
>12092	MemberAccess	d . damage
>12093	Identifier	damage
>12094	Identifier	d
>12095	IfStatement	if ( d . damageType == DT_AVATAR_BITE )
>12096	CompoundStatement	 
>12097	ExpressionStatement	 
>12098	CallExpression	dsq -> game -> avatar -> bittenEntities . push_back ( this )
>12099	ArgumentList	this
>12100	Argument	this
>12101	Identifier	this
>12102	Callee	dsq -> game -> avatar -> bittenEntities . push_back
>12103	MemberAccess	dsq -> game -> avatar -> bittenEntities . push_back
>12104	Identifier	push_back
>12105	PtrMemberAccess	dsq -> game -> avatar -> bittenEntities
>12106	Identifier	bittenEntities
>12107	PtrMemberAccess	dsq -> game -> avatar
>12108	Identifier	avatar
>12109	PtrMemberAccess	dsq -> game
>12110	Identifier	game
>12111	Identifier	dsq
>12112	ExpressionStatement	 
>12113	CallExpression	debugLog ( \"Entity
>12114	ArgumentList	\"Entity
>12115	Argument	\"Entity
>12116	PrimaryExpression	\"Entity
>12117	Callee	debugLog
>12118	Identifier	debugLog
>12119	Condition	 
>12120	EqualityExpression	d . damageType == DT_AVATAR_BITE
>12121	Identifier	DT_AVATAR_BITE
>12122	MemberAccess	d . damageType
>12123	Identifier	damageType
>12124	Identifier	d
>12125	IfStatement	if ( dmgData . useTimer )
>12126	ExpressionStatement	 
>12127	CallExpression	damageTimer . start ( damageTime )
>12128	ArgumentList	damageTime
>12129	Argument	damageTime
>12130	Identifier	damageTime
>12131	Callee	damageTimer . start
>12132	MemberAccess	damageTimer . start
>12133	Identifier	start
>12134	Identifier	damageTimer
>12135	Condition	 
>12136	MemberAccess	dmgData . useTimer
>12137	Identifier	useTimer
>12138	Identifier	dmgData
>12139	ExpressionStatement	 
>12140	CallExpression	this -> multColor . stop ( )
>12141	ArgumentList	 
>12142	Callee	this -> multColor . stop
>12143	MemberAccess	this -> multColor . stop
>12144	Identifier	stop
>12145	PtrMemberAccess	this -> multColor
>12146	Identifier	multColor
>12147	Identifier	this
>12148	ExpressionStatement	 
>12149	AssignmentExpr	this -> multColor = Vector ( 1 , 1 , 1 )
>12150	CallExpression	Vector ( 1 , 1 , 1 )
>12151	ArgumentList	1
>12152	Argument	1
>12153	PrimaryExpression	1
>12154	Argument	1
>12155	PrimaryExpression	1
>12156	Argument	1
>12157	PrimaryExpression	1
>12158	Callee	Vector
>12159	Identifier	Vector
>12160	PtrMemberAccess	this -> multColor
>12161	Identifier	multColor
>12162	Identifier	this
>12163	IfStatement	if ( invincibleBreak && damageTimer . isActive ( ) && dmgData . useTimer )
>12164	ReturnStatement	 
>12165	Identifier	false
>12166	Condition	 
>12167	AndExpression	invincibleBreak && damageTimer . isActive ( ) && dmgData . useTimer
>12168	AndExpression	damageTimer . isActive ( ) && dmgData . useTimer
>12169	MemberAccess	dmgData . useTimer
>12170	Identifier	useTimer
>12171	Identifier	dmgData
>12172	CallExpression	damageTimer . isActive ( )
>12173	ArgumentList	 
>12174	Callee	damageTimer . isActive
>12175	MemberAccess	damageTimer . isActive
>12176	Identifier	isActive
>12177	Identifier	damageTimer
>12178	Identifier	invincibleBreak
>12179	ExpressionStatement	 
>12180	AssignmentExpr	lastDamage = d
>12181	Identifier	d
>12182	Identifier	lastDamage
>12183	ExpressionStatement	 
>12184	CallExpression	onDamage ( d )
>12185	ArgumentList	d
>12186	Argument	d
>12187	Identifier	d
>12188	Callee	onDamage
>12189	Identifier	onDamage
>12190	IfStatement	if ( isEntityDead ( ) )
>12191	CompoundStatement	 
>12192	ReturnStatement	 
>12193	Identifier	false
>12194	Condition	 
>12195	CallExpression	isEntityDead ( )
>12196	ArgumentList	 
>12197	Callee	isEntityDead
>12198	Identifier	isEntityDead
>12199	IfStatement	if ( d . damageType == DT_NONE )
>12200	ReturnStatement	 
>12201	Identifier	false
>12202	Condition	 
>12203	EqualityExpression	d . damageType == DT_NONE
>12204	Identifier	DT_NONE
>12205	MemberAccess	d . damageType
>12206	Identifier	damageType
>12207	Identifier	d
>12208	IdentifierDeclStatement	 
>12209	IdentifierDecl	d = dmgData
>12210	AssignmentExpr	d = dmgData
>12211	Identifier	dmgData
>12212	Identifier	dmgData
>12213	Identifier	d
>12214	IdentifierDeclType	DamageData
>12266	FunctionDef	Entity 
>12267	ParameterList	 
>12268	ReturnType	void
>12269	CompoundStatement	 
>12270	ExpressionStatement	 
>12271	CallExpression	setv ( EV_CRAWLING , 1 )
>12272	ArgumentList	EV_CRAWLING
>12273	Argument	1
>12274	PrimaryExpression	1
>12275	Argument	EV_CRAWLING
>12276	Identifier	EV_CRAWLING
>12277	Callee	setv
>12278	Identifier	setv
>12279	ExpressionStatement	 
>12280	AssignmentExpr	position = dsq -> game -> lastCollidePosition + dist
>12281	AdditiveExpression	dsq -> game -> lastCollidePosition + dist
>12282	Identifier	dist
>12283	PtrMemberAccess	dsq -> game -> lastCollidePosition
>12284	Identifier	lastCollidePosition
>12285	PtrMemberAccess	dsq -> game
>12286	Identifier	game
>12287	Identifier	dsq
>12288	Identifier	position
>12289	ExpressionStatement	 
>12290	CallExpression	dist . setLength2D ( collideRadius )
>12291	ArgumentList	collideRadius
>12292	Argument	collideRadius
>12293	Identifier	collideRadius
>12294	Callee	dist . setLength2D
>12295	MemberAccess	dist . setLength2D
>12296	Identifier	setLength2D
>12297	Identifier	dist
>12298	IdentifierDeclStatement	 
>12299	IdentifierDecl	dist = dsq -> game -> lastCollidePosition - position
>12300	AssignmentExpr	dist = dsq -> game -> lastCollidePosition - position
>12301	AdditiveExpression	dsq -> game -> lastCollidePosition - position
>12302	Identifier	position
>12303	PtrMemberAccess	dsq -> game -> lastCollidePosition
>12304	Identifier	lastCollidePosition
>12305	PtrMemberAccess	dsq -> game
>12306	Identifier	game
>12307	Identifier	dsq
>12308	Identifier	dist
>12309	Identifier	dist
>12310	IdentifierDeclType	Vector
>12324	FunctionDef	Entity 
>12325	ParameterList	float dt , int range , float mod , Entity * ignore
>12326	Parameter	 
>12327	Identifier	ignore
>12328	ParameterType	Entity *
>12329	Parameter	 
>12330	Identifier	mod
>12331	ParameterType	float
>12332	Parameter	 
>12333	Identifier	range
>12334	ParameterType	int
>12335	Parameter	 
>12336	Identifier	dt
>12337	ParameterType	float
>12338	ReturnType	void
>12339	CompoundStatement	 
>12340	IfStatement	if ( accum . x != 0 || accum . y != 0 )
>12341	CompoundStatement	 
>12342	ExpressionStatement	 
>12343	AssignmentExpr	vel += accum * getMaxSpeed ( ) * mod
>12344	MultiplicativeExpression	accum * getMaxSpeed ( ) * mod
>12345	MultiplicativeExpression	getMaxSpeed ( ) * mod
>12346	Identifier	mod
>12347	CallExpression	getMaxSpeed ( )
>12348	ArgumentList	 
>12349	Callee	getMaxSpeed
>12350	Identifier	getMaxSpeed
>12351	Identifier	accum
>12352	Identifier	vel
>12353	ExpressionStatement	 
>12354	AssignmentExpr	accum /= range
>12355	Identifier	range
>12356	Identifier	accum
>12357	ExpressionStatement	 
>12358	AssignmentExpr	accum /= c
>12359	Identifier	c
>12360	Identifier	accum
>12361	Condition	 
>12362	OrExpression	accum . x != 0 || accum . y != 0
>12363	EqualityExpression	accum . y != 0
>12364	PrimaryExpression	0
>12365	MemberAccess	accum . y
>12366	Identifier	y
>12367	Identifier	accum
>12368	EqualityExpression	accum . x != 0
>12369	PrimaryExpression	0
>12370	MemberAccess	accum . x
>12371	Identifier	x
>12372	Identifier	accum
>12373	CompoundStatement	 
>12374	IfStatement	if ( e != this && e != ignore && e -> ridingOnEntity != this && ! e -> getv ( EV_NOAVOID ) )
>12375	CompoundStatement	 
>12376	IfStatement	if ( diff . isLength2DIn ( range ) && ! diff . isZero ( ) )
>12377	CompoundStatement	 
>12378	ExpressionStatement	 
>12379	IncDecOp	c ++
>12380	IncDec	++
>12381	Identifier	c
>12382	ExpressionStatement	 
>12383	AssignmentExpr	accum += diff
>12384	Identifier	diff
>12385	Identifier	accum
>12386	ExpressionStatement	 
>12387	CallExpression	diff . setLength2D ( range - diff . getLength2D ( ) )
>12388	ArgumentList	range - diff . getLength2D ( )
>12389	Argument	range - diff . getLength2D ( )
>12390	AdditiveExpression	range - diff . getLength2D ( )
>12391	CallExpression	diff . getLength2D ( )
>12392	ArgumentList	 
>12393	Callee	diff . getLength2D
>12394	MemberAccess	diff . getLength2D
>12395	Identifier	getLength2D
>12396	Identifier	diff
>12397	Identifier	range
>12398	Callee	diff . setLength2D
>12399	MemberAccess	diff . setLength2D
>12400	Identifier	setLength2D
>12401	Identifier	diff
>12402	Condition	 
>12403	AndExpression	diff . isLength2DIn ( range ) && ! diff . isZero ( )
>12404	UnaryOp	! diff . isZero ( )
>12405	CallExpression	diff . isZero ( )
>12406	ArgumentList	 
>12407	Callee	diff . isZero
>12408	MemberAccess	diff . isZero
>12409	Identifier	isZero
>12410	Identifier	diff
>12411	UnaryOperator	!
>12412	CallExpression	diff . isLength2DIn ( range )
>12413	ArgumentList	range
>12414	Argument	range
>12415	Identifier	range
>12416	Callee	diff . isLength2DIn
>12417	MemberAccess	diff . isLength2DIn
>12418	Identifier	isLength2DIn
>12419	Identifier	diff
>12420	ExpressionStatement	 
>12421	AssignmentExpr	diff = ( this -> position - e -> position )
>12422	AdditiveExpression	this -> position - e -> position
>12423	PtrMemberAccess	e -> position
>12424	Identifier	position
>12425	Identifier	e
>12426	PtrMemberAccess	this -> position
>12427	Identifier	position
>12428	Identifier	this
>12429	Identifier	diff
>12430	Condition	 
>12431	AndExpression	e != this && e != ignore && e -> ridingOnEntity != this && ! e -> getv ( EV_NOAVOID )
>12432	AndExpression	e != ignore && e -> ridingOnEntity != this && ! e -> getv ( EV_NOAVOID )
>12433	AndExpression	e -> ridingOnEntity != this && ! e -> getv ( EV_NOAVOID )
>12434	UnaryOp	! e -> getv ( EV_NOAVOID )
>12435	CallExpression	e -> getv ( EV_NOAVOID )
>12436	ArgumentList	EV_NOAVOID
>12437	Argument	EV_NOAVOID
>12438	Identifier	EV_NOAVOID
>12439	Callee	e -> getv
>12440	PtrMemberAccess	e -> getv
>12441	Identifier	getv
>12442	Identifier	e
>12443	UnaryOperator	!
>12444	EqualityExpression	e -> ridingOnEntity != this
>12445	Identifier	this
>12446	PtrMemberAccess	e -> ridingOnEntity
>12447	Identifier	ridingOnEntity
>12448	Identifier	e
>12449	EqualityExpression	e != ignore
>12450	Identifier	ignore
>12451	Identifier	e
>12452	EqualityExpression	e != this
>12453	Identifier	this
>12454	Identifier	e
>12455	IdentifierDeclStatement	 
>12456	IdentifierDecl	* e = * i
>12457	AssignmentExpr	* e = * i
>12458	UnaryOp	* i
>12459	Identifier	i
>12460	UnaryOperator	*
>12461	Identifier	e
>12462	Identifier	e
>12463	IdentifierDeclType	Entity *
>12464	Statement	 
>12465	Statement	 
>12466	Statement	 
>12467	Statement	 
>12468	IdentifierDeclStatement	 
>12469	IdentifierDecl	diff
>12470	Identifier	diff
>12471	IdentifierDeclType	Vector
>12472	IdentifierDeclStatement	 
>12473	IdentifierDecl	c = 0
>12474	AssignmentExpr	c = 0
>12475	PrimaryExpression	0
>12476	Identifier	c
>12477	Identifier	c
>12478	IdentifierDeclType	int
>12479	IdentifierDeclStatement	 
>12480	IdentifierDecl	accum
>12481	Identifier	accum
>12482	IdentifierDeclType	Vector
>12511	FunctionDef	Entity 
>12512	ParameterList	 
>12513	ReturnType	void
>12514	CompoundStatement	 
>12515	ExpressionStatement	 
>12516	AssignmentExpr	scale = bscale
>12517	Identifier	bscale
>12518	Identifier	scale
>12519	ExpressionStatement	 
>12520	AssignmentExpr	color = bcolor
>12521	Identifier	bcolor
>12522	Identifier	color
>12523	ExpressionStatement	 
>12524	CallExpression	skeletalSprite . clearColorMult ( )
>12525	ArgumentList	 
>12526	Callee	skeletalSprite . clearColorMult
>12527	MemberAccess	skeletalSprite . clearColorMult
>12528	Identifier	clearColorMult
>12529	Identifier	skeletalSprite
>12530	ExpressionStatement	 
>12531	AssignmentExpr	renderBorder = false
>12532	Identifier	false
>12533	Identifier	renderBorder
>12534	ExpressionStatement	 
>12535	CallExpression	Quad 
>12536	ArgumentList	 
>12537	Callee	Quad 
>12538	Identifier	Quad 
>12539	ExpressionStatement	 
>12540	CallExpression	skeletalSprite . setColorMult ( this -> color , this -> alpha . x )
>12541	ArgumentList	this -> color
>12542	Argument	this -> alpha . x
>12543	MemberAccess	this -> alpha . x
>12544	Identifier	x
>12545	PtrMemberAccess	this -> alpha
>12546	Identifier	alpha
>12547	Identifier	this
>12548	Argument	this -> color
>12549	PtrMemberAccess	this -> color
>12550	Identifier	color
>12551	Identifier	this
>12552	Callee	skeletalSprite . setColorMult
>12553	MemberAccess	skeletalSprite . setColorMult
>12554	Identifier	setColorMult
>12555	Identifier	skeletalSprite
>12556	IfStatement	if ( dsq -> game -> isSceneEditorActive ( ) && dsq -> game -> sceneEditor . editType == ET_ENTITIES )
>12557	CompoundStatement	 
>12558	ExpressionStatement	 
>12559	AssignmentExpr	renderBorder = true
>12560	Identifier	true
>12561	Identifier	renderBorder
>12562	IfStatement	if ( dsq -> game -> sceneEditor . editingEntity == this )
>12563	ElseStatement	else
>12564	ExpressionStatement	 
>12565	AssignmentExpr	renderBorderColor = Vector ( 0.5 , 0.5 , 0.5 )
>12566	CallExpression	Vector ( 0.5 , 0.5 , 0.5 )
>12567	ArgumentList	0.5
>12568	Argument	0.5
>12569	PrimaryExpression	0.5
>12570	Argument	0.5
>12571	PrimaryExpression	0.5
>12572	Argument	0.5
>12573	PrimaryExpression	0.5
>12574	Callee	Vector
>12575	Identifier	Vector
>12576	Identifier	renderBorderColor
>12577	ExpressionStatement	 
>12578	AssignmentExpr	renderBorderColor = Vector ( 1 , 1 , 1 )
>12579	CallExpression	Vector ( 1 , 1 , 1 )
>12580	ArgumentList	1
>12581	Argument	1
>12582	PrimaryExpression	1
>12583	Argument	1
>12584	PrimaryExpression	1
>12585	Argument	1
>12586	PrimaryExpression	1
>12587	Callee	Vector
>12588	Identifier	Vector
>12589	Identifier	renderBorderColor
>12590	Condition	 
>12591	EqualityExpression	dsq -> game -> sceneEditor . editingEntity == this
>12592	Identifier	this
>12593	MemberAccess	dsq -> game -> sceneEditor . editingEntity
>12594	Identifier	editingEntity
>12595	PtrMemberAccess	dsq -> game -> sceneEditor
>12596	Identifier	sceneEditor
>12597	PtrMemberAccess	dsq -> game
>12598	Identifier	game
>12599	Identifier	dsq
>12600	Condition	 
>12601	AndExpression	dsq -> game -> isSceneEditorActive ( ) && dsq -> game -> sceneEditor . editType == ET_ENTITIES
>12602	EqualityExpression	dsq -> game -> sceneEditor . editType == ET_ENTITIES
>12603	Identifier	ET_ENTITIES
>12604	MemberAccess	dsq -> game -> sceneEditor . editType
>12605	Identifier	editType
>12606	PtrMemberAccess	dsq -> game -> sceneEditor
>12607	Identifier	sceneEditor
>12608	PtrMemberAccess	dsq -> game
>12609	Identifier	game
>12610	Identifier	dsq
>12611	CallExpression	dsq -> game -> isSceneEditorActive ( )
>12612	ArgumentList	 
>12613	Callee	dsq -> game -> isSceneEditorActive
>12614	PtrMemberAccess	dsq -> game -> isSceneEditorActive
>12615	Identifier	isSceneEditorActive
>12616	PtrMemberAccess	dsq -> game
>12617	Identifier	game
>12618	Identifier	dsq
>12619	IfStatement	if ( multColor . isInterpolating ( ) )
>12620	CompoundStatement	 
>12621	ExpressionStatement	 
>12622	AssignmentExpr	color *= multColor
>12623	Identifier	multColor
>12624	Identifier	color
>12625	Condition	 
>12626	CallExpression	multColor . isInterpolating ( )
>12627	ArgumentList	 
>12628	Callee	multColor . isInterpolating
>12629	MemberAccess	multColor . isInterpolating
>12630	Identifier	isInterpolating
>12631	Identifier	multColor
>12632	ExpressionStatement	 
>12633	AssignmentExpr	scale *= flipScale
>12634	Identifier	flipScale
>12635	Identifier	scale
>12636	IdentifierDeclStatement	 
>12637	IdentifierDecl	bscale = scale
>12638	AssignmentExpr	bscale = scale
>12639	Identifier	scale
>12640	Identifier	scale
>12641	Identifier	bscale
>12642	IdentifierDeclType	InterpolatedVector
>12643	IdentifierDeclStatement	 
>12644	IdentifierDecl	bcolor = color
>12645	AssignmentExpr	bcolor = color
>12646	Identifier	color
>12647	Identifier	color
>12648	Identifier	bcolor
>12649	IdentifierDeclType	InterpolatedVector
>12681	FunctionDef	Entity 
>12682	ParameterList	const Vector & position , const Vector & scale , const std 
>12683	Parameter	 
>12684	Identifier	bt
>12685	ParameterType	RenderObject 
>12686	Parameter	 
>12687	Identifier	tex
>12688	ParameterType	const std 
>12689	Parameter	 
>12690	Identifier	scale
>12691	ParameterType	const Vector &
>12692	Parameter	 
>12693	Identifier	position
>12694	ParameterType	const Vector &
>12695	ReturnType	void
>12696	CompoundStatement	 
>12697	ExpressionStatement	 
>12698	CallExpression	core -> getTopStateData ( ) -> addRenderObject ( glint , LR_PARTICLES )
>12699	ArgumentList	glint
>12700	Argument	LR_PARTICLES
>12701	Identifier	LR_PARTICLES
>12702	Argument	glint
>12703	Identifier	glint
>12704	Callee	core -> getTopStateData ( ) -> addRenderObject
>12705	PtrMemberAccess	core -> getTopStateData ( ) -> addRenderObject
>12706	Identifier	addRenderObject
>12707	CallExpression	core -> getTopStateData ( )
>12708	ArgumentList	 
>12709	Callee	core -> getTopStateData
>12710	PtrMemberAccess	core -> getTopStateData
>12711	Identifier	getTopStateData
>12712	Identifier	core
>12713	ExpressionStatement	 
>12714	CallExpression	glint -> setDecayRate ( 1 )
>12715	ArgumentList	1
>12716	Argument	1
>12717	PrimaryExpression	1
>12718	Callee	glint -> setDecayRate
>12719	PtrMemberAccess	glint -> setDecayRate
>12720	Identifier	setDecayRate
>12721	Identifier	glint
>12722	ExpressionStatement	 
>12723	CallExpression	glint -> setLife ( glintTime )
>12724	ArgumentList	glintTime
>12725	Argument	glintTime
>12726	Identifier	glintTime
>12727	Callee	glint -> setLife
>12728	PtrMemberAccess	glint -> setLife
>12729	Identifier	setLife
>12730	Identifier	glint
>12731	ExpressionStatement	 
>12732	AssignmentExpr	glint -> rotation . z = this -> rotation . z
>12733	MemberAccess	this -> rotation . z
>12734	Identifier	z
>12735	PtrMemberAccess	this -> rotation
>12736	Identifier	rotation
>12737	Identifier	this
>12738	MemberAccess	glint -> rotation . z
>12739	Identifier	z
>12740	PtrMemberAccess	glint -> rotation
>12741	Identifier	rotation
>12742	Identifier	glint
>12743	ExpressionStatement	 
>12744	CallExpression	glint -> alpha . startPath ( glintTime )
>12745	ArgumentList	glintTime
>12746	Argument	glintTime
>12747	Identifier	glintTime
>12748	Callee	glint -> alpha . startPath
>12749	MemberAccess	glint -> alpha . startPath
>12750	Identifier	startPath
>12751	PtrMemberAccess	glint -> alpha
>12752	Identifier	alpha
>12753	Identifier	glint
>12754	ExpressionStatement	 
>12755	CallExpression	glint -> alpha . data -> path . addPathNode ( 0 , 1 )
>12756	ArgumentList	0
>12757	Argument	1
>12758	PrimaryExpression	1
>12759	Argument	0
>12760	PrimaryExpression	0
>12761	Callee	glint -> alpha . data -> path . addPathNode
>12762	MemberAccess	glint -> alpha . data -> path . addPathNode
>12763	Identifier	addPathNode
>12764	PtrMemberAccess	glint -> alpha . data -> path
>12765	Identifier	path
>12766	MemberAccess	glint -> alpha . data
>12767	Identifier	data
>12768	PtrMemberAccess	glint -> alpha
>12769	Identifier	alpha
>12770	Identifier	glint
>12771	ExpressionStatement	 
>12772	CallExpression	glint -> alpha . data -> path . addPathNode ( 1 , 0.7 )
>12773	ArgumentList	1
>12774	Argument	0.7
>12775	PrimaryExpression	0.7
>12776	Argument	1
>12777	PrimaryExpression	1
>12778	Callee	glint -> alpha . data -> path . addPathNode
>12779	MemberAccess	glint -> alpha . data -> path . addPathNode
>12780	Identifier	addPathNode
>12781	PtrMemberAccess	glint -> alpha . data -> path
>12782	Identifier	path
>12783	MemberAccess	glint -> alpha . data
>12784	Identifier	data
>12785	PtrMemberAccess	glint -> alpha
>12786	Identifier	alpha
>12787	Identifier	glint
>12788	ExpressionStatement	 
>12789	CallExpression	glint -> alpha . data -> path . addPathNode ( 1 , 0 )
>12790	ArgumentList	1
>12791	Argument	0
>12792	PrimaryExpression	0
>12793	Argument	1
>12794	PrimaryExpression	1
>12795	Callee	glint -> alpha . data -> path . addPathNode
>12796	MemberAccess	glint -> alpha . data -> path . addPathNode
>12797	Identifier	addPathNode
>12798	PtrMemberAccess	glint -> alpha . data -> path
>12799	Identifier	path
>12800	MemberAccess	glint -> alpha . data
>12801	Identifier	data
>12802	PtrMemberAccess	glint -> alpha
>12803	Identifier	alpha
>12804	Identifier	glint
>12805	ExpressionStatement	 
>12806	CallExpression	glint -> alpha . ensureData ( )
>12807	ArgumentList	 
>12808	Callee	glint -> alpha . ensureData
>12809	MemberAccess	glint -> alpha . ensureData
>12810	Identifier	ensureData
>12811	PtrMemberAccess	glint -> alpha
>12812	Identifier	alpha
>12813	Identifier	glint
>12814	ExpressionStatement	 
>12815	CallExpression	glint -> scale . interpolateTo ( scale , glintTime )
>12816	ArgumentList	scale
>12817	Argument	glintTime
>12818	Identifier	glintTime
>12819	Argument	scale
>12820	Identifier	scale
>12821	Callee	glint -> scale . interpolateTo
>12822	MemberAccess	glint -> scale . interpolateTo
>12823	Identifier	interpolateTo
>12824	PtrMemberAccess	glint -> scale
>12825	Identifier	scale
>12826	Identifier	glint
>12827	ExpressionStatement	 
>12828	AssignmentExpr	glint -> position = position
>12829	Identifier	position
>12830	PtrMemberAccess	glint -> position
>12831	Identifier	position
>12832	Identifier	glint
>12833	ExpressionStatement	 
>12834	AssignmentExpr	glint -> scale = Vector ( 0.5 , 0.5 )
>12835	CallExpression	Vector ( 0.5 , 0.5 )
>12836	ArgumentList	0.5
>12837	Argument	0.5
>12838	PrimaryExpression	0.5
>12839	Argument	0.5
>12840	PrimaryExpression	0.5
>12841	Callee	Vector
>12842	Identifier	Vector
>12843	PtrMemberAccess	glint -> scale
>12844	Identifier	scale
>12845	Identifier	glint
>12846	ExpressionStatement	 
>12847	CallExpression	glint -> setTexture ( tex )
>12848	ArgumentList	tex
>12849	Argument	tex
>12850	Identifier	tex
>12851	Callee	glint -> setTexture
>12852	PtrMemberAccess	glint -> setTexture
>12853	Identifier	setTexture
>12854	Identifier	glint
>12855	ExpressionStatement	 
>12856	CallExpression	glint -> setBlendType ( bt )
>12857	ArgumentList	bt
>12858	Argument	bt
>12859	Identifier	bt
>12860	Callee	glint -> setBlendType
>12861	PtrMemberAccess	glint -> setBlendType
>12862	Identifier	setBlendType
>12863	Identifier	glint
>12864	ExpressionStatement	 
>12865	Identifier	Quad
>12866	Statement	 
>12867	Statement	 
>12868	Statement	 
>12869	Statement	 
>12870	Statement	 
>12871	IdentifierDeclStatement	 
>12872	IdentifierDecl	glintTime = 0.4
>12873	AssignmentExpr	glintTime = 0.4
>12874	PrimaryExpression	0.4
>12875	Identifier	glintTime
>12876	Identifier	glintTime
>12877	IdentifierDeclType	float
>12907	FunctionDef	Entity 
>12908	ParameterList	DamageType dt
>12909	Parameter	 
>12910	Identifier	dt
>12911	ParameterType	DamageType
>12912	ReturnType	void
>12913	CompoundStatement	 
>12914	ExpressionStatement	 
>12915	CallExpression	ignoreShotDamageTypes . push_back ( dt )
>12916	ArgumentList	dt
>12917	Argument	dt
>12918	Identifier	dt
>12919	Callee	ignoreShotDamageTypes . push_back
>12920	MemberAccess	ignoreShotDamageTypes . push_back
>12921	Identifier	push_back
>12922	Identifier	ignoreShotDamageTypes
>12928	FunctionDef	Entity 
>12929	ParameterList	float dt , int range , float mod
>12930	Parameter	 
>12931	Identifier	mod
>12932	ParameterType	float
>12933	Parameter	 
>12934	Identifier	range
>12935	ParameterType	int
>12936	Parameter	 
>12937	Identifier	dt
>12938	ParameterType	float
>12939	ReturnType	void
>12940	CompoundStatement	 
>12941	IfStatement	if ( accum . x != 0 || accum . y != 0 )
>12942	CompoundStatement	 
>12943	ExpressionStatement	 
>12944	AssignmentExpr	vel += accum * getMaxSpeed ( ) * mod
>12945	MultiplicativeExpression	accum * getMaxSpeed ( ) * mod
>12946	MultiplicativeExpression	getMaxSpeed ( ) * mod
>12947	Identifier	mod
>12948	CallExpression	getMaxSpeed ( )
>12949	ArgumentList	 
>12950	Callee	getMaxSpeed
>12951	Identifier	getMaxSpeed
>12952	Identifier	accum
>12953	Identifier	vel
>12954	ExpressionStatement	 
>12955	AssignmentExpr	accum /= range
>12956	Identifier	range
>12957	Identifier	accum
>12958	ExpressionStatement	 
>12959	AssignmentExpr	accum /= c
>12960	Identifier	c
>12961	Identifier	accum
>12962	Condition	 
>12963	OrExpression	accum . x != 0 || accum . y != 0
>12964	EqualityExpression	accum . y != 0
>12965	PrimaryExpression	0
>12966	MemberAccess	accum . y
>12967	Identifier	y
>12968	Identifier	accum
>12969	EqualityExpression	accum . x != 0
>12970	PrimaryExpression	0
>12971	MemberAccess	accum . x
>12972	Identifier	x
>12973	Identifier	accum
>12974	ForStatement	for ( Shot 
>12975	CompoundStatement	 
>12976	IfStatement	if ( s -> isActive ( ) && ( s -> position - this -> position ) . getSquaredLength2D ( ) < sqr ( range ) )
>12977	CompoundStatement	 
>12978	ExpressionStatement	 
>12979	IncDecOp	c ++
>12980	IncDec	++
>12981	Identifier	c
>12982	ExpressionStatement	 
>12983	AssignmentExpr	accum += d
>12984	Identifier	d
>12985	Identifier	accum
>12986	IfStatement	if ( ! d . isZero ( ) )
>12987	CompoundStatement	 
>12988	ExpressionStatement	 
>12989	CallExpression	d . setLength2D ( range - d . getLength2D ( ) )
>12990	ArgumentList	range - d . getLength2D ( )
>12991	Argument	range - d . getLength2D ( )
>12992	AdditiveExpression	range - d . getLength2D ( )
>12993	CallExpression	d . getLength2D ( )
>12994	ArgumentList	 
>12995	Callee	d . getLength2D
>12996	MemberAccess	d . getLength2D
>12997	Identifier	getLength2D
>12998	Identifier	d
>12999	Identifier	range
>13000	Callee	d . setLength2D
>13001	MemberAccess	d . setLength2D
>13002	Identifier	setLength2D
>13003	Identifier	d
>13004	Condition	 
>13005	UnaryOp	! d . isZero ( )
>13006	CallExpression	d . isZero ( )
>13007	ArgumentList	 
>13008	Callee	d . isZero
>13009	MemberAccess	d . isZero
>13010	Identifier	isZero
>13011	Identifier	d
>13012	UnaryOperator	!
>13013	IdentifierDeclStatement	 
>13014	IdentifierDecl	d = this -> position - s -> position
>13015	AssignmentExpr	d = this -> position - s -> position
>13016	AdditiveExpression	this -> position - s -> position
>13017	PtrMemberAccess	s -> position
>13018	Identifier	position
>13019	Identifier	s
>13020	PtrMemberAccess	this -> position
>13021	Identifier	position
>13022	Identifier	this
>13023	Identifier	d
>13024	Identifier	d
>13025	IdentifierDeclType	Vector
>13026	ForStatement	for ( int j = 0 ; j < ignoreShotDamageTypes . size ( ) ; j ++ )
>13027	CompoundStatement	 
>13028	IfStatement	if ( s -> getDamageType ( ) == ignoreShotDamageTypes [ j ] )
>13029	CompoundStatement	 
>13030	ContinueStatement	 
>13031	Condition	 
>13032	EqualityExpression	s -> getDamageType ( ) == ignoreShotDamageTypes [ j ]
>13033	ArrayIndexing	ignoreShotDamageTypes [ j ]
>13034	Identifier	j
>13035	Identifier	ignoreShotDamageTypes
>13036	CallExpression	s -> getDamageType ( )
>13037	ArgumentList	 
>13038	Callee	s -> getDamageType
>13039	PtrMemberAccess	s -> getDamageType
>13040	Identifier	getDamageType
>13041	Identifier	s
>13042	IncDecOp	 
>13043	IncDec	++
>13044	Identifier	j
>13045	Condition	 
>13046	RelationalExpression	j < ignoreShotDamageTypes . size ( )
>13047	CallExpression	ignoreShotDamageTypes . size ( )
>13048	ArgumentList	 
>13049	Callee	ignoreShotDamageTypes . size
>13050	MemberAccess	ignoreShotDamageTypes . size
>13051	Identifier	size
>13052	Identifier	ignoreShotDamageTypes
>13053	Identifier	j
>13054	ForInit	 
>13055	IdentifierDeclStatement	int j = 0 ;
>13056	IdentifierDecl	j = 0
>13057	AssignmentExpr	j = 0
>13058	PrimaryExpression	0
>13059	Identifier	j
>13060	Identifier	j
>13061	IdentifierDeclType	int
>13062	Condition	 
>13063	AndExpression	s -> isActive ( ) && ( s -> position - this -> position ) . getSquaredLength2D ( ) < sqr ( range )
>13064	RelationalExpression	( s -> position - this -> position ) . getSquaredLength2D ( ) < sqr ( range )
>13065	CallExpression	sqr ( range )
>13066	ArgumentList	range
>13067	Argument	range
>13068	Identifier	range
>13069	Callee	sqr
>13070	Identifier	sqr
>13071	CallExpression	( s -> position - this -> position ) . getSquaredLength2D ( )
>13072	ArgumentList	 
>13073	Callee	( s -> position - this -> position ) . getSquaredLength2D
>13074	MemberAccess	( s -> position - this -> position ) . getSquaredLength2D
>13075	Identifier	getSquaredLength2D
>13076	AdditiveExpression	s -> position - this -> position
>13077	PtrMemberAccess	this -> position
>13078	Identifier	position
>13079	Identifier	this
>13080	PtrMemberAccess	s -> position
>13081	Identifier	position
>13082	Identifier	s
>13083	CallExpression	s -> isActive ( )
>13084	ArgumentList	 
>13085	Callee	s -> isActive
>13086	PtrMemberAccess	s -> isActive
>13087	Identifier	isActive
>13088	Identifier	s
>13089	IdentifierDeclStatement	 
>13090	IdentifierDecl	* s = ( Shot * ) ( * i )
>13091	AssignmentExpr	* s = ( Shot * ) ( * i )
>13092	CastExpression	( Shot * ) ( * i )
>13093	UnaryOp	* i
>13094	Identifier	i
>13095	UnaryOperator	*
>13096	CastTarget	Shot *
>13097	Identifier	s
>13098	Identifier	s
>13099	IdentifierDeclType	Shot *
>13100	IncDecOp	 
>13101	IncDec	++
>13102	Identifier	i
>13103	Condition	 
>13104	EqualityExpression	i != Shot 
>13105	CallExpression	Shot 
>13106	ArgumentList	 
>13107	Callee	Shot 
>13108	MemberAccess	Shot 
>13109	Identifier	end
>13110	Identifier	Shot 
>13111	Identifier	i
>13112	ForInit	 
>13113	IdentifierDeclStatement	Shot 
>13114	IdentifierDecl	i = Shot 
>13115	AssignmentExpr	i = Shot 
>13116	CallExpression	Shot 
>13117	ArgumentList	 
>13118	Callee	Shot 
>13119	MemberAccess	Shot 
>13120	Identifier	begin
>13121	Identifier	Shot 
>13122	Identifier	i
>13123	Identifier	i
>13124	IdentifierDeclType	Shot 
>13125	IdentifierDeclStatement	 
>13126	IdentifierDecl	c = 0
>13127	AssignmentExpr	c = 0
>13128	PrimaryExpression	0
>13129	Identifier	c
>13130	Identifier	c
>13131	IdentifierDeclType	int
>13132	IdentifierDeclStatement	 
>13133	IdentifierDecl	accum
>13134	Identifier	accum
>13135	IdentifierDeclType	Vector
>13136	ExpressionStatement	 
>13137	CallExpression	BBGE_PROF ( Entity_doSpellAvoidance )
>13138	ArgumentList	Entity_doSpellAvoidance
>13139	Argument	Entity_doSpellAvoidance
>13140	Identifier	Entity_doSpellAvoidance
>13141	Callee	BBGE_PROF
>13142	Identifier	BBGE_PROF
>13179	FunctionDef	Entity 
>13180	ParameterList	 
>13181	ReturnType	void
>13182	CompoundStatement	 
>13183	IfStatement	if ( fillGridFromQuad )
>13184	CompoundStatement	 
>13185	ExpressionStatement	 
>13186	CallExpression	dsq -> game -> fillGridFromQuad ( this , OT_INVISIBLEENT )
>13187	ArgumentList	this
>13188	Argument	OT_INVISIBLEENT
>13189	Identifier	OT_INVISIBLEENT
>13190	Argument	this
>13191	Identifier	this
>13192	Callee	dsq -> game -> fillGridFromQuad
>13193	PtrMemberAccess	dsq -> game -> fillGridFromQuad
>13194	Identifier	fillGridFromQuad
>13195	PtrMemberAccess	dsq -> game
>13196	Identifier	game
>13197	Identifier	dsq
>13198	Condition	 
>13199	Identifier	fillGridFromQuad
>13209	FunctionDef	Entity 
>13210	ParameterList	 
>13211	ReturnType	void
>13212	CompoundStatement	 
>13213	ExpressionStatement	 
>13214	AssignmentExpr	entityID = id
>13215	Identifier	id
>13216	Identifier	entityID
>13217	WhileStatement	while ( 1 )
>13218	CompoundStatement	 
>13219	ExpressionStatement	 
>13220	IncDecOp	id ++
>13221	IncDec	++
>13222	Identifier	id
>13223	IfStatement	if ( isFree )
>13224	CompoundStatement	 
>13225	BreakStatement	 
>13226	Condition	 
>13227	Identifier	isFree
>13228	CompoundStatement	 
>13229	IfStatement	if ( e != this )
>13230	CompoundStatement	 
>13231	IfStatement	if ( e -> getID ( ) == id )
>13232	CompoundStatement	 
>13233	BreakStatement	 
>13234	ExpressionStatement	 
>13235	AssignmentExpr	isFree = false
>13236	Identifier	false
>13237	Identifier	isFree
>13238	Condition	 
>13239	EqualityExpression	e -> getID ( ) == id
>13240	Identifier	id
>13241	CallExpression	e -> getID ( )
>13242	ArgumentList	 
>13243	Callee	e -> getID
>13244	PtrMemberAccess	e -> getID
>13245	Identifier	getID
>13246	Identifier	e
>13247	Condition	 
>13248	EqualityExpression	e != this
>13249	Identifier	this
>13250	Identifier	e
>13251	IdentifierDeclStatement	 
>13252	IdentifierDecl	* e = * i
>13253	AssignmentExpr	* e = * i
>13254	UnaryOp	* i
>13255	Identifier	i
>13256	UnaryOperator	*
>13257	Identifier	e
>13258	Identifier	e
>13259	IdentifierDeclType	Entity *
>13260	Statement	 
>13261	Statement	 
>13262	Statement	 
>13263	Statement	 
>13264	IdentifierDeclStatement	 
>13265	IdentifierDecl	isFree = true
>13266	AssignmentExpr	isFree = true
>13267	Identifier	true
>13268	Identifier	true
>13269	Identifier	isFree
>13270	IdentifierDeclType	bool
>13271	Condition	 
>13272	PrimaryExpression	1
>13273	IdentifierDeclStatement	 
>13274	IdentifierDecl	id = 1
>13275	AssignmentExpr	id = 1
>13276	PrimaryExpression	1
>13277	Identifier	id
>13278	Identifier	id
>13279	IdentifierDeclType	int
>13294	FunctionDef	Entity 
>13295	ParameterList	int id
>13296	Parameter	 
>13297	Identifier	id
>13298	ParameterType	int
>13299	ReturnType	void
>13300	CompoundStatement	 
>13301	CompoundStatement	 
>13302	IfStatement	if ( e != this )
>13303	CompoundStatement	 
>13304	IfStatement	if ( e -> getID ( ) == entityID )
>13305	CompoundStatement	 
>13306	ExpressionStatement	 
>13307	CallExpression	e -> assignUniqueID ( )
>13308	ArgumentList	 
>13309	Callee	e -> assignUniqueID
>13310	PtrMemberAccess	e -> assignUniqueID
>13311	Identifier	assignUniqueID
>13312	Identifier	e
>13313	ExpressionStatement	 
>13314	CallExpression	debugLog ( os . str ( ) )
>13315	ArgumentList	os . str ( )
>13316	Argument	os . str ( )
>13317	CallExpression	os . str ( )
>13318	ArgumentList	 
>13319	Callee	os . str
>13320	MemberAccess	os . str
>13321	Identifier	str
>13322	Identifier	os
>13323	Callee	debugLog
>13324	Identifier	debugLog
>13325	ExpressionStatement	 
>13326	ShiftExpression	os << \"ID conflict between \" << name << \" and \" << e -> name
>13327	ShiftExpression	\"ID conflict between \" << name << \" and \" << e -> name
>13328	ShiftExpression	name << \" and \" << e -> name
>13329	ShiftExpression	\" and \" << e -> name
>13330	PtrMemberAccess	e -> name
>13331	Identifier	name
>13332	Identifier	e
>13333	PrimaryExpression	\" and \"
>13334	Identifier	name
>13335	PrimaryExpression	\"ID conflict between \"
>13336	Identifier	os
>13337	IdentifierDeclStatement	 
>13338	IdentifierDecl	os
>13339	Identifier	os
>13340	IdentifierDeclType	std 
>13341	Condition	 
>13342	EqualityExpression	e -> getID ( ) == entityID
>13343	Identifier	entityID
>13344	CallExpression	e -> getID ( )
>13345	ArgumentList	 
>13346	Callee	e -> getID
>13347	PtrMemberAccess	e -> getID
>13348	Identifier	getID
>13349	Identifier	e
>13350	Condition	 
>13351	EqualityExpression	e != this
>13352	Identifier	this
>13353	Identifier	e
>13354	IdentifierDeclStatement	 
>13355	IdentifierDecl	* e = * i
>13356	AssignmentExpr	* e = * i
>13357	UnaryOp	* i
>13358	Identifier	i
>13359	UnaryOperator	*
>13360	Identifier	e
>13361	Identifier	e
>13362	IdentifierDeclType	Entity *
>13363	Statement	 
>13364	Statement	 
>13365	Statement	 
>13366	Statement	 
>13367	ExpressionStatement	 
>13368	AssignmentExpr	entityID = id
>13369	Identifier	id
>13370	Identifier	entityID
>13384	FunctionDef	Entity 
>13385	ParameterList	 
>13386	ReturnType	int
>13387	CompoundStatement	 
>13388	ReturnStatement	 
>13389	Identifier	entityID
>13394	FunctionDef	Entity 
>13395	ParameterList	Entity * hit , Shot * shot , Bone * b
>13396	Parameter	 
>13397	Identifier	b
>13398	ParameterType	Bone *
>13399	Parameter	 
>13400	Identifier	shot
>13401	ParameterType	Shot *
>13402	Parameter	 
>13403	Identifier	hit
>13404	ParameterType	Entity *
>13405	ReturnType	void
>13406	CompoundStatement	 
>13413	FunctionDef	Entity 
>13414	ParameterList	float dt , int search , float mod , Vector * vp , float overrideMaxSpeed , int ignoreObs , bool onlyVP
>13415	Parameter	 
>13416	Identifier	onlyVP
>13417	ParameterType	bool
>13418	Parameter	 
>13419	Identifier	ignoreObs
>13420	ParameterType	int
>13421	Parameter	 
>13422	Identifier	overrideMaxSpeed
>13423	ParameterType	float
>13424	Parameter	 
>13425	Identifier	vp
>13426	ParameterType	Vector *
>13427	Parameter	 
>13428	Identifier	mod
>13429	ParameterType	float
>13430	Parameter	 
>13431	Identifier	search
>13432	ParameterType	int
>13433	Parameter	 
>13434	Identifier	dt
>13435	ParameterType	float
>13436	ReturnType	bool
>13437	CompoundStatement	 
>13438	ReturnStatement	 
>13439	Identifier	false
>13440	IfStatement	if ( c > 0 )
>13441	ReturnStatement	 
>13442	Identifier	true
>13443	Condition	 
>13444	RelationalExpression	c > 0
>13445	PrimaryExpression	0
>13446	Identifier	c
>13447	IfStatement	if ( ! onlyVP )
>13448	ExpressionStatement	 
>13449	AssignmentExpr	* vp = vel
>13450	Identifier	vel
>13451	UnaryOp	* vp
>13452	Identifier	vp
>13453	UnaryOperator	*
>13454	Condition	 
>13455	UnaryOp	! onlyVP
>13456	Identifier	onlyVP
>13457	UnaryOperator	!
>13458	IfStatement	if ( c > 0 )
>13459	CompoundStatement	 
>13460	IfStatement	if ( onlyVP )
>13461	ElseStatement	else
>13462	ExpressionStatement	 
>13463	AssignmentExpr	vel += accum * overrideMaxSpeed * mod
>13464	MultiplicativeExpression	accum * overrideMaxSpeed * mod
>13465	MultiplicativeExpression	overrideMaxSpeed * mod
>13466	Identifier	mod
>13467	Identifier	overrideMaxSpeed
>13468	Identifier	accum
>13469	Identifier	vel
>13470	CompoundStatement	 
>13471	IfStatement	if ( ! ( * vp ) . isLength2DIn ( overrideMaxSpeed ) )
>13472	ExpressionStatement	 
>13473	CallExpression	( * vp ) . capLength2D ( overrideMaxSpeed )
>13474	ArgumentList	overrideMaxSpeed
>13475	Argument	overrideMaxSpeed
>13476	Identifier	overrideMaxSpeed
>13477	Callee	( * vp ) . capLength2D
>13478	MemberAccess	( * vp ) . capLength2D
>13479	Identifier	capLength2D
>13480	UnaryOp	* vp
>13481	Identifier	vp
>13482	UnaryOperator	*
>13483	Condition	 
>13484	UnaryOp	! ( * vp ) . isLength2DIn ( overrideMaxSpeed )
>13485	CallExpression	( * vp ) . isLength2DIn ( overrideMaxSpeed )
>13486	ArgumentList	overrideMaxSpeed
>13487	Argument	overrideMaxSpeed
>13488	Identifier	overrideMaxSpeed
>13489	Callee	( * vp ) . isLength2DIn
>13490	MemberAccess	( * vp ) . isLength2DIn
>13491	Identifier	isLength2DIn
>13492	UnaryOp	* vp
>13493	Identifier	vp
>13494	UnaryOperator	*
>13495	UnaryOperator	!
>13496	ExpressionStatement	 
>13497	AssignmentExpr	* vp += accum * overrideMaxSpeed * mod
>13498	MultiplicativeExpression	accum * overrideMaxSpeed * mod
>13499	MultiplicativeExpression	overrideMaxSpeed * mod
>13500	Identifier	mod
>13501	Identifier	overrideMaxSpeed
>13502	Identifier	accum
>13503	UnaryOp	* vp
>13504	Identifier	vp
>13505	UnaryOperator	*
>13506	Condition	 
>13507	Identifier	onlyVP
>13508	ExpressionStatement	 
>13509	CallExpression	accum . setLength2D ( 1.0f - accum . getLength2D ( ) )
>13510	ArgumentList	1.0f - accum . getLength2D ( )
>13511	Argument	1.0f - accum . getLength2D ( )
>13512	AdditiveExpression	1.0f - accum . getLength2D ( )
>13513	CallExpression	accum . getLength2D ( )
>13514	ArgumentList	 
>13515	Callee	accum . getLength2D
>13516	MemberAccess	accum . getLength2D
>13517	Identifier	getLength2D
>13518	Identifier	accum
>13519	PrimaryExpression	1.0f
>13520	Callee	accum . setLength2D
>13521	MemberAccess	accum . setLength2D
>13522	Identifier	setLength2D
>13523	Identifier	accum
>13524	ExpressionStatement	 
>13525	AssignmentExpr	accum /= float ( c ) * ( totalDist / 2 )
>13526	MultiplicativeExpression	float ( c ) * ( totalDist / 2 )
>13527	MultiplicativeExpression	totalDist / 2
>13528	PrimaryExpression	2
>13529	Identifier	totalDist
>13530	CallExpression	float ( c )
>13531	ArgumentList	c
>13532	Argument	c
>13533	Identifier	c
>13534	Callee	float
>13535	Identifier	float
>13536	Identifier	accum
>13537	Condition	 
>13538	RelationalExpression	c > 0
>13539	PrimaryExpression	0
>13540	Identifier	c
>13541	ForStatement	for ( int x = - search ; x <= search ; x ++ )
>13542	CompoundStatement	 
>13543	ForStatement	for ( int y = - search ; y <= search ; y ++ )
>13544	CompoundStatement	 
>13545	IfStatement	if ( waterBlocked || dsq -> game -> isObstructed ( checkT ) )
>13546	CompoundStatement	 
>13547	IfStatement	if ( dsq -> game -> isObstructed ( checkT , blockObs ) )
>13548	CompoundStatement	 
>13549	ExpressionStatement	 
>13550	IncDecOp	c ++
>13551	IncDec	++
>13552	Identifier	c
>13553	ExpressionStatement	 
>13554	AssignmentExpr	accum += v
>13555	Identifier	v
>13556	Identifier	accum
>13557	IdentifierDeclStatement	 
>13558	IdentifierDecl	v = position - checkT . worldVector ( )
>13559	AssignmentExpr	v = position - checkT . worldVector ( )
>13560	AdditiveExpression	position - checkT . worldVector ( )
>13561	CallExpression	checkT . worldVector ( )
>13562	ArgumentList	 
>13563	Callee	checkT . worldVector
>13564	MemberAccess	checkT . worldVector
>13565	Identifier	worldVector
>13566	Identifier	checkT
>13567	Identifier	position
>13568	Identifier	v
>13569	Identifier	v
>13570	IdentifierDeclType	Vector
>13571	IfStatement	if ( minDist == - 1 || dist < minDist )
>13572	CompoundStatement	 
>13573	ExpressionStatement	 
>13574	AssignmentExpr	useTile = TileVector ( t . x + x , t . y + y )
>13575	CallExpression	TileVector ( t . x + x , t . y + y )
>13576	ArgumentList	t . x + x
>13577	Argument	t . y + y
>13578	AdditiveExpression	t . y + y
>13579	Identifier	y
>13580	MemberAccess	t . y
>13581	Identifier	y
>13582	Identifier	t
>13583	Argument	t . x + x
>13584	AdditiveExpression	t . x + x
>13585	Identifier	x
>13586	MemberAccess	t . x
>13587	Identifier	x
>13588	Identifier	t
>13589	Callee	TileVector
>13590	Identifier	TileVector
>13591	Identifier	useTile
>13592	ExpressionStatement	 
>13593	AssignmentExpr	minDist = dist
>13594	Identifier	dist
>13595	Identifier	minDist
>13596	Condition	 
>13597	OrExpression	minDist == - 1 || dist < minDist
>13598	RelationalExpression	dist < minDist
>13599	Identifier	minDist
>13600	Identifier	dist
>13601	EqualityExpression	minDist == - 1
>13602	UnaryOp	- 1
>13603	PrimaryExpression	1
>13604	UnaryOperator	-
>13605	Identifier	minDist
>13606	IdentifierDeclStatement	 
>13607	IdentifierDecl	dist = ( vt - vtc ) . getSquaredLength2D ( )
>13608	AssignmentExpr	dist = ( vt - vtc ) . getSquaredLength2D ( )
>13609	CallExpression	( vt - vtc ) . getSquaredLength2D ( )
>13610	ArgumentList	 
>13611	Callee	( vt - vtc ) . getSquaredLength2D
>13612	MemberAccess	( vt - vtc ) . getSquaredLength2D
>13613	Identifier	getSquaredLength2D
>13614	AdditiveExpression	vt - vtc
>13615	Identifier	vtc
>13616	Identifier	vt
>13617	Identifier	dist
>13618	Identifier	dist
>13619	IdentifierDeclType	int
>13620	IdentifierDeclStatement	 
>13621	IdentifierDecl	vt ( t . x , t . y )
>13622	Expression	t . x , t . y
>13623	MemberAccess	t . y
>13624	Identifier	y
>13625	Identifier	t
>13626	MemberAccess	t . x
>13627	Identifier	x
>13628	Identifier	t
>13629	Identifier	vt
>13630	IdentifierDeclType	Vector
>13631	IdentifierDeclStatement	 
>13632	IdentifierDecl	vtc ( t . x + x , t . y + y )
>13633	Expression	t . x + x , t . y + y
>13634	AdditiveExpression	t . y + y
>13635	Identifier	y
>13636	MemberAccess	t . y
>13637	Identifier	y
>13638	Identifier	t
>13639	AdditiveExpression	t . x + x
>13640	Identifier	x
>13641	MemberAccess	t . x
>13642	Identifier	x
>13643	Identifier	t
>13644	Identifier	vtc
>13645	IdentifierDeclType	Vector
>13646	Condition	 
>13647	CallExpression	dsq -> game -> isObstructed ( checkT , blockObs )
>13648	ArgumentList	checkT
>13649	Argument	blockObs
>13650	Identifier	blockObs
>13651	Argument	checkT
>13652	Identifier	checkT
>13653	Callee	dsq -> game -> isObstructed
>13654	PtrMemberAccess	dsq -> game -> isObstructed
>13655	Identifier	isObstructed
>13656	PtrMemberAccess	dsq -> game
>13657	Identifier	game
>13658	Identifier	dsq
>13659	Condition	 
>13660	OrExpression	waterBlocked || dsq -> game -> isObstructed ( checkT )
>13661	CallExpression	dsq -> game -> isObstructed ( checkT )
>13662	ArgumentList	checkT
>13663	Argument	checkT
>13664	Identifier	checkT
>13665	Callee	dsq -> game -> isObstructed
>13666	PtrMemberAccess	dsq -> game -> isObstructed
>13667	Identifier	isObstructed
>13668	PtrMemberAccess	dsq -> game
>13669	Identifier	game
>13670	Identifier	dsq
>13671	Identifier	waterBlocked
>13672	IfStatement	if ( ! isInWaterBubble && ! canLeaveWater && checkT . worldVector ( ) . y - collideRadius < dsq -> game -> getWaterLevel ( ) )
>13673	CompoundStatement	 
>13674	ExpressionStatement	 
>13675	AssignmentExpr	waterBlocked = true
>13676	Identifier	true
>13677	Identifier	waterBlocked
>13678	Condition	 
>13679	AndExpression	! isInWaterBubble && ! canLeaveWater && checkT . worldVector ( ) . y - collideRadius < dsq -> game -> \
>13680	AndExpression	! canLeaveWater && checkT . worldVector ( ) . y - collideRadius < dsq -> game -> getWaterLevel ( )
>13681	RelationalExpression	checkT . worldVector ( ) . y - collideRadius < dsq -> game -> getWaterLevel ( )
>13682	CallExpression	dsq -> game -> getWaterLevel ( )
>13683	ArgumentList	 
>13684	Callee	dsq -> game -> getWaterLevel
>13685	PtrMemberAccess	dsq -> game -> getWaterLevel
>13686	Identifier	getWaterLevel
>13687	PtrMemberAccess	dsq -> game
>13688	Identifier	game
>13689	Identifier	dsq
>13690	AdditiveExpression	checkT . worldVector ( ) . y - collideRadius
>13691	Identifier	collideRadius
>13692	MemberAccess	checkT . worldVector ( ) . y
>13693	Identifier	y
>13694	CallExpression	checkT . worldVector ( )
>13695	ArgumentList	 
>13696	Callee	checkT . worldVector
>13697	MemberAccess	checkT . worldVector
>13698	Identifier	worldVector
>13699	Identifier	checkT
>13700	UnaryOp	! canLeaveWater
>13701	Identifier	canLeaveWater
>13702	UnaryOperator	!
>13703	UnaryOp	! isInWaterBubble
>13704	Identifier	isInWaterBubble
>13705	UnaryOperator	!
>13706	IdentifierDeclStatement	 
>13707	IdentifierDecl	waterBlocked = false
>13708	AssignmentExpr	waterBlocked = false
>13709	Identifier	false
>13710	Identifier	false
>13711	Identifier	waterBlocked
>13712	IdentifierDeclType	bool
>13713	IdentifierDeclStatement	 
>13714	IdentifierDecl	checkT ( t . x + x , t . y + y )
>13715	Expression	t . x + x , t . y + y
>13716	AdditiveExpression	t . y + y
>13717	Identifier	y
>13718	MemberAccess	t . y
>13719	Identifier	y
>13720	Identifier	t
>13721	AdditiveExpression	t . x + x
>13722	Identifier	x
>13723	MemberAccess	t . x
>13724	Identifier	x
>13725	Identifier	t
>13726	Identifier	checkT
>13727	IdentifierDeclType	TileVector
>13728	IncDecOp	 
>13729	IncDec	++
>13730	Identifier	y
>13731	Condition	 
>13732	RelationalExpression	y <= search
>13733	Identifier	search
>13734	Identifier	y
>13735	ForInit	 
>13736	IdentifierDeclStatement	int y = - search ;
>13737	IdentifierDecl	y = - search
>13738	AssignmentExpr	y = - search
>13739	UnaryOp	- search
>13740	Identifier	search
>13741	UnaryOperator	-
>13742	Identifier	y
>13743	Identifier	y
>13744	IdentifierDeclType	int
>13745	IncDecOp	 
>13746	IncDec	++
>13747	Identifier	x
>13748	Condition	 
>13749	RelationalExpression	x <= search
>13750	Identifier	search
>13751	Identifier	x
>13752	ForInit	 
>13753	IdentifierDeclStatement	int x = - search ;
>13754	IdentifierDecl	x = - search
>13755	AssignmentExpr	x = - search
>13756	UnaryOp	- search
>13757	Identifier	search
>13758	UnaryOperator	-
>13759	Identifier	x
>13760	Identifier	x
>13761	IdentifierDeclType	int
>13762	IdentifierDeclStatement	 
>13763	IdentifierDecl	totalDist = sqrtf ( float ( sqr ( ( search * 2 ) * TILE_SIZE ) + sqr ( ( search * 2 ) * TILE_SIZE ) ) )
>13764	AssignmentExpr	totalDist = sqrtf ( float ( sqr ( ( search * 2 ) * TILE_SIZE ) + sqr ( ( search * 2 ) * TILE_SIZE ) ) )
>13765	CallExpression	sqrtf ( float ( sqr ( ( search * 2 ) * TILE_SIZE ) + sqr ( ( search * 2 ) * TILE_SIZE ) ) )
>13766	ArgumentList	float ( sqr ( ( search * 2 ) * TILE_SIZE ) + sqr ( ( search * 2 ) * TILE_SIZE ) )
>13767	Argument	float ( sqr ( ( search * 2 ) * TILE_SIZE ) + sqr ( ( search * 2 ) * TILE_SIZE ) )
>13768	CallExpression	float ( sqr ( ( search * 2 ) * TILE_SIZE ) + sqr ( ( search * 2 ) * TILE_SIZE ) )
>13769	ArgumentList	sqr ( ( search * 2 ) * TILE_SIZE ) + sqr ( ( search * 2 ) * TILE_SIZE )
>13770	Argument	sqr ( ( search * 2 ) * TILE_SIZE ) + sqr ( ( search * 2 ) * TILE_SIZE )
>13771	AdditiveExpression	sqr ( ( search * 2 ) * TILE_SIZE ) + sqr ( ( search * 2 ) * TILE_SIZE )
>13772	CallExpression	sqr ( ( search * 2 ) * TILE_SIZE )
>13773	ArgumentList	( search * 2 ) * TILE_SIZE
>13774	Argument	( search * 2 ) * TILE_SIZE
>13775	MultiplicativeExpression	( search * 2 ) * TILE_SIZE
>13776	Identifier	TILE_SIZE
>13777	MultiplicativeExpression	search * 2
>13778	PrimaryExpression	2
>13779	Identifier	search
>13780	Callee	sqr
>13781	Identifier	sqr
>13782	CallExpression	sqr ( ( search * 2 ) * TILE_SIZE )
>13783	ArgumentList	( search * 2 ) * TILE_SIZE
>13784	Argument	( search * 2 ) * TILE_SIZE
>13785	MultiplicativeExpression	( search * 2 ) * TILE_SIZE
>13786	Identifier	TILE_SIZE
>13787	MultiplicativeExpression	search * 2
>13788	PrimaryExpression	2
>13789	Identifier	search
>13790	Callee	sqr
>13791	Identifier	sqr
>13792	Callee	float
>13793	Identifier	float
>13794	Callee	sqrtf
>13795	Identifier	sqrtf
>13796	Identifier	totalDist
>13797	Identifier	totalDist
>13798	IdentifierDeclType	float
>13799	IdentifierDeclStatement	 
>13800	IdentifierDecl	blockObs = ~ignoreObs
>13801	AssignmentExpr	blockObs = ~ignoreObs
>13802	Identifier	~ignoreObs
>13803	Identifier	~ignoreObs
>13804	Identifier	blockObs
>13805	IdentifierDeclType	const int
>13806	IdentifierDeclStatement	 
>13807	IdentifierDecl	useTile
>13808	Identifier	useTile
>13809	IdentifierDeclType	TileVector
>13810	IdentifierDeclStatement	 
>13811	IdentifierDecl	t ( position )
>13812	Identifier	position
>13813	Identifier	t
>13814	IdentifierDeclType	TileVector
>13815	IdentifierDeclStatement	 
>13816	IdentifierDecl	minDist = - 1
>13817	AssignmentExpr	minDist = - 1
>13818	UnaryOp	- 1
>13819	PrimaryExpression	1
>13820	UnaryOperator	-
>13821	Identifier	minDist
>13822	Identifier	minDist
>13823	IdentifierDeclType	int
>13824	IdentifierDeclStatement	 
>13825	IdentifierDecl	vel = * vp
>13826	AssignmentExpr	vel = * vp
>13827	UnaryOp	* vp
>13828	Identifier	vp
>13829	UnaryOperator	*
>13830	Identifier	vel
>13831	Identifier	vel
>13832	IdentifierDeclType	Vector
>13833	IfStatement	if ( vp == 0 )
>13834	ExpressionStatement	 
>13835	AssignmentExpr	vp = & this -> vel
>13836	UnaryOp	& this -> vel
>13837	PtrMemberAccess	this -> vel
>13838	Identifier	vel
>13839	Identifier	this
>13840	UnaryOperator	&
>13841	Identifier	vp
>13842	Condition	 
>13843	EqualityExpression	vp == 0
>13844	PrimaryExpression	0
>13845	Identifier	vp
>13846	IfStatement	if ( ! overrideMaxSpeed )
>13847	ExpressionStatement	 
>13848	AssignmentExpr	overrideMaxSpeed = getMaxSpeed ( )
>13849	CallExpression	getMaxSpeed ( )
>13850	ArgumentList	 
>13851	Callee	getMaxSpeed
>13852	Identifier	getMaxSpeed
>13853	Identifier	overrideMaxSpeed
>13854	Condition	 
>13855	UnaryOp	! overrideMaxSpeed
>13856	Identifier	overrideMaxSpeed
>13857	UnaryOperator	!
>13858	IfStatement	if ( waterBubble && isUnderWater ( ) )
>13859	CompoundStatement	 
>13860	IfStatement	if ( ! canLeaveWater )
>13861	CompoundStatement	 
>13862	IfStatement	if ( b . isLength2DIn ( search * TILE_SIZE ) )
>13863	CompoundStatement	 
>13864	ExpressionStatement	 
>13865	IncDecOp	c ++
>13866	IncDec	++
>13867	Identifier	c
>13868	ExpressionStatement	 
>13869	AssignmentExpr	accum -= b
>13870	Identifier	b
>13871	Identifier	accum
>13872	Condition	 
>13873	CallExpression	b . isLength2DIn ( search * TILE_SIZE )
>13874	ArgumentList	search * TILE_SIZE
>13875	Argument	search * TILE_SIZE
>13876	MultiplicativeExpression	search * TILE_SIZE
>13877	Identifier	TILE_SIZE
>13878	Identifier	search
>13879	Callee	b . isLength2DIn
>13880	MemberAccess	b . isLength2DIn
>13881	Identifier	isLength2DIn
>13882	Identifier	b
>13883	ExpressionStatement	 
>13884	CallExpression	b . setLength2D ( ( waterBubble -> rect . getWidth ( ) * 0.5f ) - b . getLength2D ( ) )
>13885	ArgumentList	( waterBubble -> rect . getWidth ( ) * 0.5f ) - b . getLength2D ( )
>13886	Argument	( waterBubble -> rect . getWidth ( ) * 0.5f ) - b . getLength2D ( )
>13887	AdditiveExpression	( waterBubble -> rect . getWidth ( ) * 0.5f ) - b . getLength2D ( )
>13888	CallExpression	b . getLength2D ( )
>13889	ArgumentList	 
>13890	Callee	b . getLength2D
>13891	MemberAccess	b . getLength2D
>13892	Identifier	getLength2D
>13893	Identifier	b
>13894	MultiplicativeExpression	waterBubble -> rect . getWidth ( ) * 0.5f
>13895	PrimaryExpression	0.5f
>13896	CallExpression	waterBubble -> rect . getWidth ( )
>13897	ArgumentList	 
>13898	Callee	waterBubble -> rect . getWidth
>13899	MemberAccess	waterBubble -> rect . getWidth
>13900	Identifier	getWidth
>13901	PtrMemberAccess	waterBubble -> rect
>13902	Identifier	rect
>13903	Identifier	waterBubble
>13904	Callee	b . setLength2D
>13905	MemberAccess	b . setLength2D
>13906	Identifier	setLength2D
>13907	Identifier	b
>13908	IdentifierDeclStatement	 
>13909	IdentifierDecl	b = a
>13910	AssignmentExpr	b = a
>13911	Identifier	a
>13912	Identifier	a
>13913	Identifier	b
>13914	IdentifierDeclType	Vector
>13915	IdentifierDeclStatement	 
>13916	IdentifierDecl	a = position - waterBubble -> nodes [ 0 ] . position
>13917	AssignmentExpr	a = position - waterBubble -> nodes [ 0 ] . position
>13918	AdditiveExpression	position - waterBubble -> nodes [ 0 ] . position
>13919	MemberAccess	waterBubble -> nodes [ 0 ] . position
>13920	Identifier	position
>13921	ArrayIndexing	waterBubble -> nodes [ 0 ]
>13922	PrimaryExpression	0
>13923	PtrMemberAccess	waterBubble -> nodes
>13924	Identifier	nodes
>13925	Identifier	waterBubble
>13926	Identifier	position
>13927	Identifier	a
>13928	Identifier	a
>13929	IdentifierDeclType	Vector
>13930	Condition	 
>13931	UnaryOp	! canLeaveWater
>13932	Identifier	canLeaveWater
>13933	UnaryOperator	!
>13934	ExpressionStatement	 
>13935	AssignmentExpr	isInWaterBubble = true
>13936	Identifier	true
>13937	Identifier	isInWaterBubble
>13938	Condition	 
>13939	AndExpression	waterBubble && isUnderWater ( )
>13940	CallExpression	isUnderWater ( )
>13941	ArgumentList	 
>13942	Callee	isUnderWater
>13943	Identifier	isUnderWater
>13944	Identifier	waterBubble
>13945	IdentifierDeclStatement	 
>13946	IdentifierDecl	isInWaterBubble = false
>13947	AssignmentExpr	isInWaterBubble = false
>13948	Identifier	false
>13949	Identifier	false
>13950	Identifier	isInWaterBubble
>13951	IdentifierDeclType	bool
>13952	IdentifierDeclStatement	 
>13953	IdentifierDecl	c = 0
>13954	AssignmentExpr	c = 0
>13955	PrimaryExpression	0
>13956	Identifier	c
>13957	Identifier	c
>13958	IdentifierDeclType	int
>13959	IdentifierDeclStatement	 
>13960	IdentifierDecl	accum
>13961	Identifier	accum
>13962	IdentifierDeclType	Vector
>14033	FunctionDef	Entity 
>14034	ParameterList	int numSegments , float segmentLength , float width , const std 
>14035	Parameter	 
>14036	Identifier	tex
>14037	ParameterType	const std 
>14038	Parameter	 
>14039	Identifier	width
>14040	ParameterType	float
>14041	Parameter	 
>14042	Identifier	segmentLength
>14043	ParameterType	float
>14044	Parameter	 
>14045	Identifier	numSegments
>14046	ParameterType	int
>14047	ReturnType	void
>14048	CompoundStatement	 
>14049	ExpressionStatement	 
>14050	CallExpression	dsq -> game -> addRenderObject ( hair , layer )
>14051	ArgumentList	hair
>14052	Argument	layer
>14053	Identifier	layer
>14054	Argument	hair
>14055	Identifier	hair
>14056	Callee	dsq -> game -> addRenderObject
>14057	PtrMemberAccess	dsq -> game -> addRenderObject
>14058	Identifier	addRenderObject
>14059	PtrMemberAccess	dsq -> game
>14060	Identifier	game
>14061	Identifier	dsq
>14062	ExpressionStatement	 
>14063	CallExpression	hair -> setTexture ( tex )
>14064	ArgumentList	tex
>14065	Argument	tex
>14066	Identifier	tex
>14067	Callee	hair -> setTexture
>14068	PtrMemberAccess	hair -> setTexture
>14069	Identifier	setTexture
>14070	Identifier	hair
>14071	ExpressionStatement	 
>14072	AssignmentExpr	hair = new Hair ( numSegments , segmentLength , width )
>14073	Expression	numSegments , segmentLength , width
>14074	Expression	segmentLength , width
>14075	Identifier	width
>14076	Identifier	segmentLength
>14077	Identifier	numSegments
>14078	Identifier	hair
>14079	IfStatement	if ( hair )
>14080	CompoundStatement	 
>14081	ExpressionStatement	 
>14082	CallExpression	errorLog ( \"Trying to init hair when hair is already present\" )
>14083	ArgumentList	\"Trying to init hair when hair is already present\"
>14084	Argument	\"Trying to init hair when hair is already present\"
>14085	PrimaryExpression	\"Trying to init hair when hair is already present\"
>14086	Callee	errorLog
>14087	Identifier	errorLog
>14088	Condition	 
>14089	Identifier	hair
>14102	FunctionDef	Entity 
>14103	ParameterList	const Vector & pos
>14104	Parameter	 
>14105	Identifier	pos
>14106	ParameterType	const Vector &
>14107	ReturnType	void
>14108	CompoundStatement	 
>14109	IfStatement	if ( hair )
>14110	CompoundStatement	 
>14111	ExpressionStatement	 
>14112	CallExpression	hair -> setHeadPosition ( pos )
>14113	ArgumentList	pos
>14114	Argument	pos
>14115	Identifier	pos
>14116	Callee	hair -> setHeadPosition
>14117	PtrMemberAccess	hair -> setHeadPosition
>14118	Identifier	setHeadPosition
>14119	Identifier	hair
>14120	Condition	 
>14121	Identifier	hair
>14127	FunctionDef	Entity 
>14128	ParameterList	float dt
>14129	Parameter	 
>14130	Identifier	dt
>14131	ParameterType	float
>14132	ReturnType	void
>14133	CompoundStatement	 
>14134	IfStatement	if ( hair )
>14135	CompoundStatement	 
>14136	ExpressionStatement	 
>14137	CallExpression	hair -> updatePositions ( )
>14138	ArgumentList	 
>14139	Callee	hair -> updatePositions
>14140	PtrMemberAccess	hair -> updatePositions
>14141	Identifier	updatePositions
>14142	Identifier	hair
>14143	Condition	 
>14144	Identifier	hair
>14150	FunctionDef	Entity 
>14151	ParameterList	const Vector & force , float dt
>14152	Parameter	 
>14153	Identifier	dt
>14154	ParameterType	float
>14155	Parameter	 
>14156	Identifier	force
>14157	ParameterType	const Vector &
>14158	ReturnType	void
>14159	CompoundStatement	 
>14160	IfStatement	if ( hair )
>14161	CompoundStatement	 
>14162	ExpressionStatement	 
>14163	CallExpression	hair -> exertForce ( force , dt )
>14164	ArgumentList	force
>14165	Argument	dt
>14166	Identifier	dt
>14167	Argument	force
>14168	Identifier	force
>14169	Callee	hair -> exertForce
>14170	PtrMemberAccess	hair -> exertForce
>14171	Identifier	exertForce
>14172	Identifier	hair
>14173	Condition	 
>14174	Identifier	hair
>14181	FunctionDef	Entity 
>14182	ParameterList	 
>14183	ReturnType	bool
>14184	CompoundStatement	 
>14185	ReturnStatement	 
>14186	Identifier	false
>14187	CompoundStatement	 
>14188	IfStatement	if ( e && e -> life == 1 && e != this && e -> ridingOnEntity != this && isCoordinateInside ( e -> position ) )
>14189	ReturnStatement	 
>14190	Identifier	true
>14191	Condition	 
>14192	AndExpression	e && e -> life == 1 && e != this && e -> ridingOnEntity != this && isCoordinateInside ( e -> position )
>14193	AndExpression	e -> life == 1 && e != this && e -> ridingOnEntity != this && isCoordinateInside ( e -> position )
>14194	AndExpression	e != this && e -> ridingOnEntity != this && isCoordinateInside ( e -> position )
>14195	AndExpression	e -> ridingOnEntity != this && isCoordinateInside ( e -> position )
>14196	CallExpression	isCoordinateInside ( e -> position )
>14197	ArgumentList	e -> position
>14198	Argument	e -> position
>14199	PtrMemberAccess	e -> position
>14200	Identifier	position
>14201	Identifier	e
>14202	Callee	isCoordinateInside
>14203	Identifier	isCoordinateInside
>14204	EqualityExpression	e -> ridingOnEntity != this
>14205	Identifier	this
>14206	PtrMemberAccess	e -> ridingOnEntity
>14207	Identifier	ridingOnEntity
>14208	Identifier	e
>14209	EqualityExpression	e != this
>14210	Identifier	this
>14211	Identifier	e
>14212	EqualityExpression	e -> life == 1
>14213	PrimaryExpression	1
>14214	PtrMemberAccess	e -> life
>14215	Identifier	life
>14216	Identifier	e
>14217	Identifier	e
>14218	IdentifierDeclStatement	 
>14219	IdentifierDecl	* e = * i
>14220	AssignmentExpr	* e = * i
>14221	UnaryOp	* i
>14222	Identifier	i
>14223	UnaryOperator	*
>14224	Identifier	e
>14225	Identifier	e
>14226	IdentifierDeclType	Entity *
>14227	Statement	 
>14228	Statement	 
>14229	Statement	 
>14230	Statement	 
>14245	FunctionDef	Entity 
>14246	ParameterList	 
>14247	ReturnType	void
>14248	CompoundStatement	 
>14249	ExpressionStatement	 
>14250	CallExpression	SoundHolder 
>14251	ArgumentList	position . x + offset . x
>14252	Argument	position . y + offset . y
>14253	AdditiveExpression	position . y + offset . y
>14254	MemberAccess	offset . y
>14255	Identifier	y
>14256	Identifier	offset
>14257	MemberAccess	position . y
>14258	Identifier	y
>14259	Identifier	position
>14260	Argument	position . x + offset . x
>14261	AdditiveExpression	position . x + offset . x
>14262	MemberAccess	offset . x
>14263	Identifier	x
>14264	Identifier	offset
>14265	MemberAccess	position . x
>14266	Identifier	x
>14267	Identifier	position
>14268	Callee	SoundHolder 
>14269	Identifier	SoundHolder 
<3=6,5,4
<6=7
<7=19,8
<8=9
<9=10
<10=12,11
<12=14,13
<14=16,15
<16=18,17
<19=20
<20=22,21
<22=24,23
<24=26,25
<26=28,27
<43=49,48,44
<44=45
<45=47,46
<49=50
<50=51
<51=62,52
<52=56,53
<53=54
<54=55
<56=57
<57=59,58
<59=61,60
<72=78,77,73
<73=74
<74=76,75
<78=103,79
<79=99,80
<80=81
<81=93,82
<82=83
<83=84
<84=91,85
<85=86
<86=87
<87=89,88
<89=90
<91=92
<93=94
<94=96,95
<96=98,97
<99=100
<100=102,101
<103=123,114,111,104
<104=105
<105=106
<106=108,107
<108=110,109
<111=113,112
<114=115
<115=122,116
<116=118,117
<118=119
<119=121,120
<123=124
<124=125
<125=130,129,126
<126=128,127
<144=150,149,145
<145=146
<146=148,147
<150=151
<151=152
<152=154,153
<160=163,162,161
<163=164
<164=165
<170=176,175,171
<171=172
<172=174,173
<176=177
<177=230,178
<178=179
<179=222,211,208,180
<180=181
<181=200,182
<182=183
<183=184
<184=194,185
<185=188,186
<186=187
<188=189
<189=191,190
<191=193,192
<194=195
<195=197,196
<197=199,198
<200=201
<201=203,202
<203=205,204
<205=207,206
<208=210,209
<211=212
<212=221,213
<213=215,214
<215=216
<216=218,217
<218=220,219
<222=223
<223=224
<224=229,228,225
<225=227,226
<230=231
<231=233,232
<233=234
<234=236,235
<236=238,237
<261=267,266,262
<262=263
<263=265,264
<267=476,465,452,286,275,270,268
<268=269
<270=271
<271=273,272
<273=274
<275=276
<276=284,277
<277=282,278
<278=279
<279=281,280
<282=283
<284=285
<286=440,429,287
<287=288
<288=420,289
<289=410,353,290
<290=291
<291=347,328,307,292
<292=293
<293=302,294
<294=296,295
<296=297
<297=299,298
<299=301,300
<302=304,303
<304=306,305
<307=308
<308=323,309
<309=317,310
<310=311
<311=312
<312=314,313
<314=316,315
<317=318
<318=320,319
<320=322,321
<323=325,324
<325=327,326
<328=329
<329=342,330
<330=339,331
<331=333,332
<333=334
<334=336,335
<336=338,337
<339=341,340
<342=344,343
<344=346,345
<347=348
<348=350,349
<350=352,351
<353=404,385,368,354
<354=355
<355=363,356
<356=358,357
<358=360,359
<360=362,361
<363=365,364
<365=367,366
<368=369
<369=377,370
<370=371
<371=372
<372=374,373
<374=376,375
<377=378
<378=380,379
<380=382,381
<382=384,383
<385=386
<386=399,387
<387=396,388
<388=390,389
<390=391
<391=393,392
<393=395,394
<396=398,397
<399=401,400
<401=403,402
<404=405
<405=407,406
<407=409,408
<410=411
<411=417,412
<412=416,413
<413=415,414
<417=419,418
<420=423,421
<421=422
<423=424
<424=428,425
<425=427,426
<429=436,430
<430=431
<431=433,432
<433=435,434
<436=437
<437=439,438
<440=441
<441=447,442
<442=446,443
<443=445,444
<447=449,448
<449=451,450
<452=455,453
<453=454
<455=456
<456=460,457
<457=459,458
<460=462,461
<462=464,463
<465=468,466
<466=467
<468=469
<469=473,470
<470=472,471
<473=475,474
<476=479,477
<477=478
<479=480
<480=485,481
<481=483,482
<483=484
<516=519,518,517
<519=520
<520=521
<526=528,527
<528=1035,1031,1027,1023,1019,1015,1011,1007,1003,980,971,962,953,944,935,926,917,908,899,895,891,887,883,879,875,871,865,854,850,846,842,838,834,830,826,822,529,533,542,551,560,569,580,589,595,599,603,607,611,615,621,625,629,638,642,646,650,654,658,662,671,680,684,697,701,705,709,713,717,721,725,731,737,765,774,778,782,786,790,794,798,802,806,810,814,818
<529=530
<530=532,531
<533=534
<534=540,535
<535=538,536
<536=537
<538=539
<540=541
<542=543
<543=549,544
<544=547,545
<545=546
<547=548
<549=550
<551=552
<552=558,553
<553=556,554
<554=555
<556=557
<558=559
<560=561
<561=567,562
<562=565,563
<563=564
<565=566
<567=568
<569=570
<570=578,571
<571=574,572
<572=573
<574=575
<575=577,576
<578=579
<580=581
<581=585,582
<582=583
<583=584
<585=586
<586=588,587
<589=590
<590=592,591
<592=594,593
<595=596
<596=598,597
<599=600
<600=602,601
<603=604
<604=606,605
<607=608
<608=610,609
<611=612
<612=614,613
<615=616
<616=620,617
<617=619,618
<621=622
<622=624,623
<625=626
<626=628,627
<629=630
<630=634,631
<631=632
<632=633
<634=635
<635=637,636
<638=639
<639=641,640
<642=643
<643=645,644
<646=647
<647=649,648
<650=651
<651=653,652
<654=655
<655=657,656
<658=659
<659=661,660
<662=663
<663=667,664
<664=665
<665=666
<667=668
<668=670,669
<671=672
<672=679,673
<673=677,674
<674=675
<675=676
<677=678
<680=681
<681=683,682
<684=685
<685=696,686
<686=694,687
<687=692,690,688
<688=689
<690=691
<692=693
<694=695
<697=698
<698=700,699
<701=702
<702=704,703
<705=706
<706=708,707
<709=710
<710=712,711
<713=714
<714=716,715
<717=718
<718=720,719
<721=722
<722=724,723
<725=726
<726=730,727
<727=729,728
<731=732
<732=736,733
<733=735,734
<737=757,748,745,738
<738=739
<739=740
<740=742,741
<742=744,743
<745=747,746
<748=749
<749=756,750
<750=752,751
<752=753
<753=755,754
<757=758
<758=759
<759=764,763,760
<760=762,761
<765=766
<766=770,767
<767=768
<768=769
<770=771
<771=773,772
<774=775
<775=777,776
<778=779
<779=781,780
<782=783
<783=785,784
<786=787
<787=789,788
<790=791
<791=793,792
<794=795
<795=797,796
<798=799
<799=801,800
<802=803
<803=805,804
<806=807
<807=809,808
<810=811
<811=813,812
<814=815
<815=817,816
<818=819
<819=821,820
<822=823
<823=825,824
<826=827
<827=829,828
<830=831
<831=833,832
<834=835
<835=837,836
<838=839
<839=841,840
<842=843
<843=845,844
<846=847
<847=849,848
<850=851
<851=853,852
<854=855
<855=864,856
<856=862,857
<857=860,858
<858=859
<860=861
<862=863
<865=866
<866=870,867
<867=869,868
<871=872
<872=874,873
<875=876
<876=878,877
<879=880
<880=882,881
<883=884
<884=886,885
<887=888
<888=890,889
<891=892
<892=894,893
<895=896
<896=898,897
<899=900
<900=906,901
<901=904,902
<902=903
<904=905
<906=907
<908=909
<909=915,910
<910=913,911
<911=912
<913=914
<915=916
<917=918
<918=924,919
<919=922,920
<920=921
<922=923
<924=925
<926=927
<927=933,928
<928=931,929
<929=930
<931=932
<933=934
<935=936
<936=942,937
<937=940,938
<938=939
<940=941
<942=943
<944=945
<945=951,946
<946=949,947
<947=948
<949=950
<951=952
<953=954
<954=960,955
<955=958,956
<956=957
<958=959
<960=961
<962=963
<963=969,964
<964=967,965
<965=966
<967=968
<969=970
<971=972
<972=978,973
<973=976,974
<974=975
<976=977
<978=979
<980=995,991,988,981
<981=982
<982=983
<983=985,984
<985=987,986
<988=990,989
<991=992
<992=994,993
<995=996
<996=997
<997=1002,1001,998
<998=1000,999
<1003=1004
<1004=1006,1005
<1007=1008
<1008=1010,1009
<1011=1012
<1012=1014,1013
<1015=1016
<1016=1018,1017
<1019=1020
<1020=1022,1021
<1023=1024
<1024=1026,1025
<1027=1028
<1028=1030,1029
<1031=1032
<1032=1034,1033
<1035=1036
<1036=1040,1037
<1037=1038
<1038=1039
<1040=1041
<1149=1155,1154,1150
<1150=1151
<1151=1153,1152
<1155=1156
<1156=1157
<1157=1159,1158
<1165=1171,1170,1166
<1166=1167
<1167=1169,1168
<1171=1172
<1172=1173
<1173=1175,1174
<1181=1187,1186,1182
<1182=1183
<1183=1185,1184
<1187=1380,1373,1359,1352,1295,1190,1188
<1188=1189
<1190=1293,1191
<1191=1289,1205,1192
<1192=1193
<1193=1201,1194
<1194=1199,1197,1195
<1195=1196
<1197=1198
<1199=1200
<1201=1202
<1202=1204,1203
<1205=1283,1254,1206
<1206=1207
<1207=1250,1223,1208
<1208=1209
<1209=1210
<1210=1211
<1211=1222,1212
<1212=1220,1213
<1213=1216,1214
<1214=1215
<1216=1217
<1217=1219,1218
<1220=1221
<1223=1235,1224
<1224=1225
<1225=1234,1226
<1226=1232,1227
<1227=1230,1228
<1228=1229
<1230=1231
<1232=1233
<1235=1236
<1236=1249,1248,1237
<1237=1247,1238
<1238=1246,1239
<1239=1241,1240
<1241=1243,1242
<1243=1245,1244
<1250=1251
<1251=1253,1252
<1254=1268,1255
<1255=1256
<1256=1267,1257
<1257=1259,1258
<1259=1265,1260
<1260=1263,1261
<1261=1262
<1263=1264
<1265=1266
<1268=1269
<1269=1282,1281,1270
<1270=1280,1271
<1271=1279,1272
<1272=1274,1273
<1274=1276,1275
<1276=1278,1277
<1283=1284
<1284=1286,1285
<1286=1288,1287
<1289=1290
<1290=1292,1291
<1293=1294
<1295=1341,1325,1296
<1296=1297
<1297=1314,1298
<1298=1307,1303,1299
<1299=1300
<1300=1302,1301
<1303=1304
<1304=1306,1305
<1307=1308
<1308=1312,1309
<1309=1310
<1310=1311
<1312=1313
<1314=1315
<1315=1322,1316
<1316=1320,1317
<1317=1318
<1318=1319
<1320=1321
<1322=1324,1323
<1325=1334,1330,1326
<1326=1327
<1327=1329,1328
<1330=1331
<1331=1333,1332
<1334=1335
<1335=1339,1336
<1336=1337
<1337=1338
<1339=1340
<1341=1342
<1342=1351,1343
<1343=1350,1344
<1344=1348,1345
<1345=1346
<1346=1347
<1348=1349
<1352=1353
<1353=1358,1357,1354
<1354=1356,1355
<1359=1364,1360
<1360=1361
<1361=1363,1362
<1364=1365
<1365=1372,1366
<1366=1368,1367
<1368=1369
<1369=1371,1370
<1373=1374
<1374=1379,1378,1375
<1375=1377,1376
<1380=1381
<1381=1386,1385,1382
<1382=1384,1383
<1417=1423,1422,1418
<1418=1419
<1419=1421,1420
<1423=1424
<1424=1425
<1425=1427,1426
<1433=1439,1438,1434
<1434=1435
<1435=1437,1436
<1439=1440
<1440=1441
<1441=1443,1442
<1449=1458,1457,1450
<1450=1454,1451
<1451=1453,1452
<1454=1456,1455
<1458=1459
<1459=1460
<1460=1462,1461
<1462=1469,1463
<1463=1467,1464
<1464=1465
<1465=1466
<1467=1468
<1479=1485,1484,1480
<1480=1481
<1481=1483,1482
<1485=1486
<1486=1487
<1487=1494,1488
<1488=1492,1489
<1489=1490
<1490=1491
<1492=1493
<1503=1506,1505,1504
<1506=1509,1507
<1507=1508
<1509=1512,1510
<1510=1511
<1512=1513
<1513=1515,1514
<1515=1516
<1516=1518,1517
<1525=1528,1527,1526
<1528=1531,1529
<1529=1530
<1531=1536,1532
<1532=1533
<1533=1535,1534
<1536=1537
<1537=1539,1538
<1546=1552,1551,1547
<1547=1548
<1548=1550,1549
<1552=1553
<1553=1554
<1554=1556,1555
<1562=1565,1564,1563
<1565=1566
<1566=1567
<1572=1584,1583,1573
<1573=1580,1577,1574
<1574=1576,1575
<1577=1579,1578
<1580=1582,1581
<1584=1599,1592,1585
<1585=1586
<1586=1590,1587
<1587=1588
<1588=1589
<1590=1591
<1592=1593
<1593=1597,1594
<1594=1595
<1595=1596
<1597=1598
<1599=1600
<1600=1604,1601
<1601=1602
<1602=1603
<1604=1605
<1612=1618,1617,1613
<1613=1614
<1614=1616,1615
<1618=1619
<1619=1620
<1620=1622,1621
<1628=1634,1633,1629
<1629=1630
<1630=1632,1631
<1634=1635
<1635=1636
<1636=1638,1637
<1644=1650,1649,1645
<1645=1646
<1646=1648,1647
<1650=1651
<1651=1716,1652
<1652=1709,1695,1688,1677,1671,1653
<1653=1658,1654
<1654=1655
<1655=1657,1656
<1658=1659
<1659=1668,1660
<1660=1664,1661
<1661=1662
<1662=1663
<1664=1665
<1665=1667,1666
<1668=1670,1669
<1671=1672
<1672=1676,1673
<1673=1675,1674
<1677=1678
<1678=1684,1679
<1679=1680
<1680=1681
<1681=1683,1682
<1684=1685
<1685=1687,1686
<1688=1689
<1689=1694,1693,1690
<1690=1692,1691
<1695=1696
<1696=1708,1707,1697
<1697=1706,1698
<1698=1702,1699
<1699=1700
<1700=1701
<1702=1703
<1703=1705,1704
<1709=1710
<1710=1715,1714,1711
<1711=1713,1712
<1716=1717
<1717=1719,1718
<1719=1721,1720
<1721=1722
<1722=1724,1723
<1738=1747,1746,1739
<1739=1743,1740
<1740=1742,1741
<1743=1745,1744
<1747=1774,1748
<1748=1765,1749
<1749=1754,1750
<1750=1751
<1751=1753,1752
<1754=1755
<1755=1761,1756
<1756=1757
<1757=1758
<1758=1760,1759
<1761=1762
<1762=1764,1763
<1765=1766
<1766=1773,1767
<1767=1769,1768
<1769=1770
<1770=1772,1771
<1774=1775
<1775=1780,1779,1776
<1776=1778,1777
<1789=1795,1794,1790
<1790=1791
<1791=1793,1792
<1795=1796
<1796=1797
<1797=1799,1798
<1799=1801,1800
<1809=1824,1823,1810
<1810=1820,1817,1814,1811
<1811=1813,1812
<1814=1816,1815
<1817=1819,1818
<1820=1822,1821
<1824=2052,2048,2041,2034,2023,1871,1853,1836,1827,1825
<1825=1826
<1827=1828
<1828=1832,1829
<1829=1830
<1830=1831
<1832=1833
<1833=1835,1834
<1836=1837
<1837=1839,1838
<1839=1841,1840
<1841=1845,1842
<1842=1843
<1843=1844
<1845=1846
<1846=1848,1847
<1848=1850,1849
<1850=1852,1851
<1853=1854
<1854=1870,1869,1855
<1855=1868,1856
<1856=1858,1857
<1858=1860,1859
<1860=1861
<1861=1863,1862
<1863=1865,1864
<1865=1867,1866
<1871=2021,1945,1872
<1872=1873
<1873=1874
<1874=1937,1926,1923,1875
<1875=1912,1876
<1876=1877
<1877=1904,1878
<1878=1900,1879
<1879=1880
<1880=1898,1881
<1881=1882
<1882=1883
<1883=1897,1884
<1884=1895,1885
<1885=1886
<1886=1887
<1887=1889,1888
<1889=1890
<1890=1892,1891
<1892=1894,1893
<1895=1896
<1898=1899
<1900=1901
<1901=1903,1902
<1904=1905
<1905=1907,1906
<1907=1909,1908
<1909=1911,1910
<1912=1913
<1913=1922,1921,1914
<1914=1920,1915
<1915=1917,1916
<1917=1919,1918
<1923=1925,1924
<1926=1927
<1927=1936,1928
<1928=1930,1929
<1930=1931
<1931=1933,1932
<1933=1935,1934
<1937=1938
<1938=1939
<1939=1944,1943,1940
<1940=1942,1941
<1945=1946
<1946=2004,2000,1997,1947
<1947=1986,1948
<1948=1949
<1949=1978,1950
<1950=1974,1951
<1951=1952
<1952=1973,1953
<1953=1971,1954
<1954=1955
<1955=1956
<1956=1970,1957
<1957=1968,1958
<1958=1959
<1959=1960
<1960=1962,1961
<1962=1963
<1963=1965,1964
<1965=1967,1966
<1968=1969
<1971=1972
<1974=1975
<1975=1977,1976
<1978=1979
<1979=1981,1980
<1981=1983,1982
<1983=1985,1984
<1986=1987
<1987=1996,1995,1988
<1988=1994,1989
<1989=1991,1990
<1991=1993,1992
<1997=1999,1998
<2000=2001
<2001=2003,2002
<2004=2005
<2005=2006
<2006=2020,2019,2007
<2007=2018,2008
<2008=2010,2009
<2010=2012,2011
<2012=2013
<2013=2015,2014
<2015=2017,2016
<2021=2022
<2023=2024
<2024=2026,2025
<2026=2027
<2027=2029,2028
<2029=2031,2030
<2031=2033,2032
<2034=2035
<2035=2037,2036
<2037=2038
<2038=2040,2039
<2041=2042
<2042=2044,2043
<2044=2045
<2045=2047,2046
<2048=2049
<2049=2051,2050
<2052=2060,2053
<2053=2054
<2054=2059,2055
<2055=2057,2056
<2057=2058
<2060=2061
<2061=2063,2062
<2096=2111,2110,2097
<2097=2107,2104,2101,2098
<2098=2100,2099
<2101=2103,2102
<2104=2106,2105
<2107=2109,2108
<2111=2255,2248,2244,2237,2226,2219,2215,2194,2188,2177,2162,2144,2127,2118,2114,2112
<2112=2113
<2114=2115
<2115=2117,2116
<2118=2119
<2119=2123,2120
<2120=2121
<2121=2122
<2123=2124
<2124=2126,2125
<2127=2128
<2128=2130,2129
<2130=2132,2131
<2132=2136,2133
<2133=2134
<2134=2135
<2136=2137
<2137=2139,2138
<2139=2141,2140
<2141=2143,2142
<2144=2145
<2145=2161,2160,2146
<2146=2159,2147
<2147=2149,2148
<2149=2151,2150
<2151=2152
<2152=2154,2153
<2154=2156,2155
<2156=2158,2157
<2162=2163
<2163=2175,2164
<2164=2169,2167,2165
<2165=2166
<2167=2168
<2169=2170
<2170=2172,2171
<2172=2174,2173
<2175=2176
<2177=2178
<2178=2186,2179
<2179=2180
<2180=2181
<2181=2183,2182
<2183=2185,2184
<2186=2187
<2188=2189
<2189=2191,2190
<2191=2193,2192
<2194=2195
<2195=2213,2196
<2196=2211,2204,2197
<2197=2198
<2198=2202,2199
<2199=2200
<2200=2201
<2202=2203
<2204=2205
<2205=2209,2206
<2206=2207
<2207=2208
<2209=2210
<2211=2212
<2213=2214
<2215=2216
<2216=2218,2217
<2219=2220
<2220=2222,2221
<2222=2223
<2223=2225,2224
<2226=2227
<2227=2229,2228
<2229=2230
<2230=2232,2231
<2232=2234,2233
<2234=2236,2235
<2237=2238
<2238=2240,2239
<2240=2241
<2241=2243,2242
<2244=2245
<2245=2247,2246
<2248=2249
<2249=2254,2253,2250
<2250=2252,2251
<2255=2263,2256
<2256=2257
<2257=2262,2258
<2258=2260,2259
<2260=2261
<2263=2264
<2264=2266,2265
<2296=2299,2298,2297
<2299=2300
<2300=2301
<2301=2303,2302
<2303=2304
<2304=2306,2305
<2311=2317,2316,2312
<2312=2313
<2313=2315,2314
<2317=2318
<2318=2355,2341,2319
<2319=2320
<2320=2333,2321
<2321=2322
<2322=2328,2323
<2323=2324
<2324=2326,2325
<2326=2327
<2328=2329
<2329=2331,2330
<2331=2332
<2333=2334
<2334=2338,2335
<2335=2337,2336
<2338=2340,2339
<2341=2342
<2342=2348,2343
<2343=2344
<2344=2346,2345
<2346=2347
<2348=2349
<2349=2354,2350
<2350=2352,2351
<2352=2353
<2355=2356
<2356=2360,2357
<2357=2359,2358
<2360=2362,2361
<2371=2377,2376,2372
<2372=2373
<2373=2375,2374
<2377=2378
<2378=2379
<2379=2381,2380
<2389=2398,2397,2390
<2390=2394,2391
<2391=2393,2392
<2394=2396,2395
<2398=2399
<2399=2400
<2400=2402,2401
<2402=2404,2403
<2413=2419,2418,2414
<2414=2415
<2415=2417,2416
<2419=2420
<2420=2421
<2421=2423,2422
<2423=2425,2424
<2433=2439,2438,2434
<2434=2435
<2435=2437,2436
<2439=2440
<2440=2441
<2441=2443,2442
<2449=2452,2451,2450
<2452=2489,2482,2474,2467,2458,2453
<2453=2454
<2454=2456,2455
<2456=2457
<2458=2459
<2459=2463,2460
<2460=2461
<2461=2462
<2463=2464
<2464=2466,2465
<2467=2468
<2468=2472,2469
<2469=2470
<2470=2471
<2472=2473
<2474=2480,2475
<2475=2476
<2476=2477
<2477=2479,2478
<2480=2481
<2482=2483
<2483=2485,2484
<2485=2486
<2486=2488,2487
<2489=2497,2490
<2490=2491
<2491=2493,2492
<2493=2494
<2494=2496,2495
<2497=2498
<2506=2518,2517,2507
<2507=2514,2511,2508
<2508=2510,2509
<2511=2513,2512
<2514=2516,2515
<2518=2567,2521,2519
<2519=2520
<2521=2554,2522
<2522=2523
<2523=2536,2524
<2524=2527,2525
<2525=2526
<2527=2528
<2528=2534,2529
<2529=2532,2530
<2530=2531
<2532=2533
<2534=2535
<2536=2537
<2537=2552,2538
<2538=2550,2541,2539
<2539=2540
<2541=2542
<2542=2548,2543
<2543=2546,2544
<2544=2545
<2546=2547
<2548=2549
<2550=2551
<2552=2553
<2554=2555
<2555=2565,2556
<2556=2563,2561,2557
<2557=2558
<2558=2560,2559
<2561=2562
<2563=2564
<2565=2566
<2567=2568
<2568=2570,2569
<2585=2597,2596,2586
<2586=2593,2590,2587
<2587=2589,2588
<2590=2592,2591
<2593=2595,2594
<2597=2668,2620,2598
<2598=2611,2599
<2599=2600
<2600=2601
<2601=2609,2602
<2602=2607,2605,2603
<2603=2604
<2605=2606
<2607=2608
<2609=2610
<2611=2612
<2612=2619,2613
<2613=2615,2614
<2615=2616
<2616=2618,2617
<2620=2666,2657,2621
<2621=2622
<2622=2623
<2623=2653,2640,2624
<2624=2625
<2625=2626
<2626=2639,2627
<2627=2633,2628
<2628=2631,2629
<2629=2630
<2631=2632
<2633=2634
<2634=2636,2635
<2636=2638,2637
<2640=2641
<2641=2652,2642
<2642=2646,2643
<2643=2644
<2644=2645
<2646=2647
<2647=2649,2648
<2649=2651,2650
<2653=2654
<2654=2656,2655
<2657=2658
<2658=2659
<2659=2665,2660
<2660=2664,2661
<2661=2663,2662
<2666=2667
<2668=2669
<2669=2671,2670
<2690=2696,2695,2691
<2691=2692
<2692=2694,2693
<2696=2697
<2697=2698
<2698=2700,2699
<2708=2714,2713,2709
<2709=2710
<2710=2712,2711
<2714=2715
<2715=2716
<2716=2718,2717
<2718=2724,2719
<2719=2720
<2720=2721
<2721=2723,2722
<2724=2725
<2734=2743,2742,2735
<2735=2739,2736
<2736=2738,2737
<2739=2741,2740
<2743=2744
<2744=2745
<2745=2747,2746
<2747=2749,2748
<2758=2767,2766,2759
<2759=2763,2760
<2760=2762,2761
<2763=2765,2764
<2767=2768
<2768=2769
<2769=2771,2770
<2771=2773,2772
<2782=2791,2790,2783
<2783=2787,2784
<2784=2786,2785
<2787=2789,2788
<2791=2792
<2792=2793
<2793=2802,2794
<2794=2800,2795
<2795=2796
<2796=2797
<2797=2799,2798
<2800=2801
<2802=2804,2803
<2814=2826,2825,2815
<2815=2822,2819,2816
<2816=2818,2817
<2819=2821,2820
<2822=2824,2823
<2826=3626,3614,3605,3598,3589,3582,3565,2942,2859,2829,2827
<2827=2828
<2829=2857,2830
<2830=2844,2831
<2831=2832
<2832=2843,2833
<2833=2841,2834
<2834=2839,2837,2835
<2835=2836
<2837=2838
<2839=2840
<2841=2842
<2844=2845
<2845=2856,2846
<2846=2854,2847
<2847=2852,2850,2848
<2848=2849
<2850=2851
<2852=2853
<2854=2855
<2857=2858
<2859=2938,2865,2860
<2860=2861
<2861=2862
<2862=2864,2863
<2865=2922,2913,2901,2897,2886,2882,2875,2866
<2866=2867
<2867=2873,2868
<2868=2871,2869
<2869=2870
<2871=2872
<2873=2874
<2875=2876
<2876=2880,2877
<2877=2878
<2878=2879
<2880=2881
<2882=2883
<2883=2885,2884
<2886=2887
<2887=2893,2888
<2888=2891,2889
<2889=2890
<2891=2892
<2893=2894
<2894=2896,2895
<2897=2898
<2898=2900,2899
<2901=2902
<2902=2912,2911,2903
<2903=2910,2904
<2904=2906,2905
<2906=2908,2907
<2908=2909
<2913=2914
<2914=2921,2915
<2915=2919,2916
<2916=2917
<2917=2918
<2919=2920
<2922=2923
<2923=2937,2936,2924
<2924=2935,2925
<2925=2929,2926
<2926=2927
<2927=2928
<2929=2930
<2930=2932,2931
<2932=2934,2933
<2938=2939
<2939=2941,2940
<2942=3556,3542,2943
<2943=2944
<2944=2945
<2945=3533,3037,2946
<2946=2947
<2947=3030,3023,2955,2948
<2948=2951,2949
<2949=2950
<2951=2952
<2952=2954,2953
<2955=3015,3011,3008,2956
<2956=2957
<2957=2986,2958
<2958=2973,2964,2960,2959
<2960=2961
<2961=2963,2962
<2964=2965
<2965=2972,2966
<2966=2968,2967
<2968=2969
<2969=2971,2970
<2973=2974
<2974=2985,2984,2975
<2975=2983,2976
<2976=2982,2977
<2977=2981,2978
<2978=2980,2979
<2986=2987
<2987=3002,2988
<2988=2989
<2989=2990
<2990=3000,2991
<2991=2992
<2992=2993
<2993=2999,2994
<2994=2998,2995
<2995=2997,2996
<3000=3001
<3002=3003
<3003=3005,3004
<3005=3007,3006
<3008=3010,3009
<3011=3012
<3012=3014,3013
<3015=3016
<3016=3017
<3017=3022,3021,3018
<3018=3020,3019
<3023=3024
<3024=3026,3025
<3026=3027
<3027=3029,3028
<3030=3031
<3031=3036,3035,3032
<3032=3034,3033
<3037=3531,3038
<3038=3523,3519,3516,3039
<3039=3507,3496,3441,3386,3331,3276,3213,3154,3095,3040
<3040=3070,3041
<3041=3056,3047,3043,3042
<3043=3044
<3044=3046,3045
<3047=3048
<3048=3055,3049
<3049=3051,3050
<3051=3052
<3052=3054,3053
<3056=3057
<3057=3069,3068,3058
<3058=3067,3059
<3059=3065,3060
<3060=3063,3061
<3061=3062
<3063=3064
<3065=3066
<3070=3071
<3071=3089,3072
<3072=3073
<3073=3074
<3074=3087,3075
<3075=3076
<3076=3077
<3077=3086,3078
<3078=3084,3079
<3079=3082,3080
<3080=3081
<3082=3083
<3084=3085
<3087=3088
<3089=3090
<3090=3092,3091
<3092=3094,3093
<3095=3127,3096
<3096=3111,3102,3098,3097
<3098=3099
<3099=3101,3100
<3102=3103
<3103=3110,3104
<3104=3106,3105
<3106=3107
<3107=3109,3108
<3111=3112
<3112=3126,3125,3113
<3113=3124,3114
<3114=3122,3115
<3115=3120,3116
<3116=3117
<3117=3119,3118
<3120=3121
<3122=3123
<3127=3128
<3128=3148,3129
<3129=3130
<3130=3131
<3131=3146,3132
<3132=3133
<3133=3134
<3134=3145,3135
<3135=3143,3136
<3136=3141,3137
<3137=3138
<3138=3140,3139
<3141=3142
<3143=3144
<3146=3147
<3148=3149
<3149=3151,3150
<3151=3153,3152
<3154=3186,3155
<3155=3170,3161,3157,3156
<3157=3158
<3158=3160,3159
<3161=3162
<3162=3169,3163
<3163=3165,3164
<3165=3166
<3166=3168,3167
<3170=3171
<3171=3185,3184,3172
<3172=3183,3173
<3173=3181,3174
<3174=3177,3175
<3175=3176
<3177=3178
<3178=3180,3179
<3181=3182
<3186=3187
<3187=3207,3188
<3188=3189
<3189=3190
<3190=3205,3191
<3191=3192
<3192=3193
<3193=3204,3194
<3194=3202,3195
<3195=3198,3196
<3196=3197
<3198=3199
<3199=3201,3200
<3202=3203
<3205=3206
<3207=3208
<3208=3210,3209
<3210=3212,3211
<3213=3247,3214
<3214=3229,3220,3216,3215
<3216=3217
<3217=3219,3218
<3220=3221
<3221=3228,3222
<3222=3224,3223
<3224=3225
<3225=3227,3226
<3229=3230
<3230=3246,3245,3231
<3231=3244,3232
<3232=3242,3233
<3233=3238,3234
<3234=3235
<3235=3237,3236
<3238=3239
<3239=3241,3240
<3242=3243
<3247=3248
<3248=3270,3249
<3249=3250
<3250=3251
<3251=3268,3252
<3252=3253
<3253=3254
<3254=3267,3255
<3255=3265,3256
<3256=3261,3257
<3257=3258
<3258=3260,3259
<3261=3262
<3262=3264,3263
<3265=3266
<3268=3269
<3270=3271
<3271=3273,3272
<3273=3275,3274
<3276=3306,3277
<3277=3292,3283,3279,3278
<3279=3280
<3280=3282,3281
<3283=3284
<3284=3291,3285
<3285=3287,3286
<3287=3288
<3288=3290,3289
<3292=3293
<3293=3305,3304,3294
<3294=3303,3295
<3295=3301,3296
<3296=3299,3297
<3297=3298
<3299=3300
<3301=3302
<3306=3307
<3307=3325,3308
<3308=3309
<3309=3310
<3310=3323,3311
<3311=3312
<3312=3313
<3313=3322,3314
<3314=3320,3315
<3315=3318,3316
<3316=3317
<3318=3319
<3320=3321
<3323=3324
<3325=3326
<3326=3328,3327
<3328=3330,3329
<3331=3361,3332
<3332=3347,3338,3334,3333
<3334=3335
<3335=3337,3336
<3338=3339
<3339=3346,3340
<3340=3342,3341
<3342=3343
<3343=3345,3344
<3347=3348
<3348=3360,3359,3349
<3349=3358,3350
<3350=3356,3351
<3351=3354,3352
<3352=3353
<3354=3355
<3356=3357
<3361=3362
<3362=3380,3363
<3363=3364
<3364=3365
<3365=3378,3366
<3366=3367
<3367=3368
<3368=3377,3369
<3369=3375,3370
<3370=3373,3371
<3371=3372
<3373=3374
<3375=3376
<3378=3379
<3380=3381
<3381=3383,3382
<3383=3385,3384
<3386=3416,3387
<3387=3402,3393,3389,3388
<3389=3390
<3390=3392,3391
<3393=3394
<3394=3401,3395
<3395=3397,3396
<3397=3398
<3398=3400,3399
<3402=3403
<3403=3415,3414,3404
<3404=3413,3405
<3405=3411,3406
<3406=3409,3407
<3407=3408
<3409=3410
<3411=3412
<3416=3417
<3417=3435,3418
<3418=3419
<3419=3420
<3420=3433,3421
<3421=3422
<3422=3423
<3423=3432,3424
<3424=3430,3425
<3425=3428,3426
<3426=3427
<3428=3429
<3430=3431
<3433=3434
<3435=3436
<3436=3438,3437
<3438=3440,3439
<3441=3471,3442
<3442=3457,3448,3444,3443
<3444=3445
<3445=3447,3446
<3448=3449
<3449=3456,3450
<3450=3452,3451
<3452=3453
<3453=3455,3454
<3457=3458
<3458=3470,3469,3459
<3459=3468,3460
<3460=3466,3461
<3461=3464,3462
<3462=3463
<3464=3465
<3466=3467
<3471=3472
<3472=3490,3473
<3473=3474
<3474=3475
<3475=3488,3476
<3476=3477
<3477=3478
<3478=3487,3479
<3479=3485,3480
<3480=3483,3481
<3481=3482
<3483=3484
<3485=3486
<3488=3489
<3490=3491
<3491=3493,3492
<3493=3495,3494
<3496=3497
<3497=3506,3505,3498
<3498=3504,3499
<3499=3501,3500
<3501=3503,3502
<3507=3508
<3508=3515,3514,3509
<3509=3513,3510
<3510=3512,3511
<3516=3518,3517
<3519=3520
<3520=3522,3521
<3523=3524
<3524=3525
<3525=3530,3529,3526
<3526=3528,3527
<3531=3532
<3533=3534
<3534=3536,3535
<3536=3538,3537
<3538=3539
<3539=3541,3540
<3542=3547,3543
<3543=3544
<3544=3546,3545
<3547=3548
<3548=3555,3549
<3549=3551,3550
<3551=3552
<3552=3554,3553
<3556=3557
<3557=3564,3558
<3558=3560,3559
<3560=3561
<3561=3563,3562
<3565=3566
<3566=3581,3580,3567
<3567=3579,3568
<3568=3570,3569
<3570=3571
<3571=3573,3572
<3573=3577,3574
<3574=3575
<3575=3576
<3577=3578
<3582=3583
<3583=3585,3584
<3585=3586
<3586=3588,3587
<3589=3590
<3590=3596,3591
<3591=3594,3592
<3592=3593
<3594=3595
<3596=3597
<3598=3599
<3599=3604,3603,3600
<3600=3602,3601
<3605=3610,3606
<3606=3607
<3607=3609,3608
<3610=3611
<3611=3613,3612
<3614=3619,3615
<3615=3616
<3616=3618,3617
<3619=3620
<3620=3622,3621
<3622=3623
<3623=3625,3624
<3626=3627
<3627=3637,3636,3628
<3628=3635,3629
<3629=3633,3630
<3630=3631
<3631=3632
<3633=3634
<3683=3692,3691,3684
<3684=3688,3685
<3685=3687,3686
<3688=3690,3689
<3692=3693
<3693=3722,3694
<3694=3718,3709,3702,3695
<3695=3696
<3696=3700,3697
<3697=3698
<3698=3699
<3700=3701
<3702=3703
<3703=3707,3704
<3704=3705
<3705=3706
<3707=3708
<3709=3714,3710
<3710=3711
<3711=3713,3712
<3714=3715
<3715=3717,3716
<3718=3719
<3719=3721,3720
<3722=3723
<3723=3725,3724
<3734=3740,3739,3735
<3735=3736
<3736=3738,3737
<3740=3774,3770,3763,3748,3741
<3741=3742
<3742=3746,3743
<3743=3744
<3744=3745
<3746=3747
<3748=3756,3749
<3749=3750
<3750=3754,3751
<3751=3752
<3752=3753
<3754=3755
<3756=3757
<3757=3759,3758
<3759=3761,3760
<3761=3762
<3763=3764
<3764=3768,3765
<3765=3766
<3766=3767
<3768=3769
<3770=3771
<3771=3773,3772
<3774=3775
<3775=3777,3776
<3787=3790,3789,3788
<3790=3791
<3791=3792
<3792=3804,3793
<3793=3799,3794
<3794=3796,3795
<3796=3798,3797
<3799=3801,3800
<3801=3803,3802
<3804=3806,3805
<3816=3825,3824,3817
<3817=3821,3818
<3818=3820,3819
<3821=3823,3822
<3825=3847,3843,3826
<3826=3841,3827
<3827=3828
<3828=3829
<3829=3835,3830
<3830=3833,3831
<3831=3832
<3833=3834
<3835=3836
<3836=3838,3837
<3838=3840,3839
<3841=3842
<3843=3844
<3844=3846,3845
<3847=3969,3907,3848
<3848=3849
<3849=3872,3854,3850
<3850=3851
<3851=3853,3852
<3854=3855
<3855=3868,3856
<3856=3859,3857
<3857=3858
<3859=3860
<3860=3866,3861
<3861=3864,3862
<3862=3863
<3864=3865
<3866=3867
<3868=3869
<3869=3871,3870
<3872=3905,3886,3873
<3873=3874
<3874=3875
<3875=3876
<3876=3882,3877
<3877=3880,3878
<3878=3879
<3880=3881
<3882=3883
<3883=3885,3884
<3886=3898,3891,3887
<3887=3888
<3888=3890,3889
<3891=3892
<3892=3896,3893
<3893=3894
<3894=3895
<3896=3897
<3898=3899
<3899=3903,3900
<3900=3901
<3901=3902
<3903=3904
<3905=3906
<3907=3943,3908
<3908=3941,3922,3909
<3909=3910
<3910=3911
<3911=3912
<3912=3918,3913
<3913=3916,3914
<3914=3915
<3916=3917
<3918=3919
<3919=3921,3920
<3922=3934,3927,3923
<3923=3924
<3924=3926,3925
<3927=3928
<3928=3932,3929
<3929=3930
<3930=3931
<3932=3933
<3934=3935
<3935=3939,3936
<3936=3937
<3937=3938
<3939=3940
<3941=3942
<3943=3967,3944
<3944=3945
<3945=3960,3946
<3946=3947
<3947=3948
<3948=3954,3949
<3949=3952,3950
<3950=3951
<3952=3953
<3954=3955
<3955=3957,3956
<3957=3959,3958
<3960=3961
<3961=3965,3962
<3962=3963
<3963=3964
<3965=3966
<3967=3968
<3969=3970
<3970=3977,3971
<3971=3976,3972
<3972=3974,3973
<3974=3975
<4001=4013,4012,4002
<4002=4009,4006,4003
<4003=4005,4004
<4006=4008,4007
<4009=4011,4010
<4013=4594,4589,4585,4025,4016,4014
<4014=4015
<4016=4023,4017
<4017=4018
<4018=4020,4019
<4020=4022,4021
<4023=4024
<4025=4583,4026
<4026=4581,4505,4504,4502,4393,4392,4390,4337,4336,4334,4028,4027
<4028=4029
<4029=4326,4322,4319,4030
<4030=4302,4284,4267,4249,4232,4214,4197,4179,4160,4142,4123,4105,4086,4068,4049,4031
<4031=4038,4032
<4032=4034,4033
<4034=4035
<4035=4037,4036
<4038=4039
<4039=4043,4040
<4040=4041
<4041=4042
<4043=4044
<4044=4046,4045
<4046=4048,4047
<4049=4050
<4050=4067,4051
<4051=4065,4052
<4052=4059,4053
<4053=4054
<4054=4056,4055
<4056=4058,4057
<4059=4060
<4060=4062,4061
<4062=4064,4063
<4065=4066
<4068=4075,4069
<4069=4071,4070
<4071=4072
<4072=4074,4073
<4075=4076
<4076=4080,4077
<4077=4078
<4078=4079
<4080=4081
<4081=4083,4082
<4083=4085,4084
<4086=4087
<4087=4104,4088
<4088=4102,4089
<4089=4096,4090
<4090=4091
<4091=4093,4092
<4093=4095,4094
<4096=4097
<4097=4099,4098
<4099=4101,4100
<4102=4103
<4105=4112,4106
<4106=4108,4107
<4108=4109
<4109=4111,4110
<4112=4113
<4113=4117,4114
<4114=4115
<4115=4116
<4117=4118
<4118=4120,4119
<4120=4122,4121
<4123=4124
<4124=4141,4125
<4125=4139,4126
<4126=4133,4127
<4127=4128
<4128=4130,4129
<4130=4132,4131
<4133=4134
<4134=4136,4135
<4136=4138,4137
<4139=4140
<4142=4149,4143
<4143=4145,4144
<4145=4146
<4146=4148,4147
<4149=4150
<4150=4154,4151
<4151=4152
<4152=4153
<4154=4155
<4155=4157,4156
<4157=4159,4158
<4160=4161
<4161=4178,4162
<4162=4176,4163
<4163=4170,4164
<4164=4165
<4165=4167,4166
<4167=4169,4168
<4170=4171
<4171=4173,4172
<4173=4175,4174
<4176=4177
<4179=4186,4180
<4180=4182,4181
<4182=4183
<4183=4185,4184
<4186=4187
<4187=4191,4188
<4188=4189
<4189=4190
<4191=4192
<4192=4194,4193
<4194=4196,4195
<4197=4198
<4198=4213,4199
<4199=4211,4200
<4200=4207,4201
<4201=4202
<4202=4204,4203
<4204=4206,4205
<4207=4208
<4208=4210,4209
<4211=4212
<4214=4221,4215
<4215=4217,4216
<4217=4218
<4218=4220,4219
<4221=4222
<4222=4226,4223
<4223=4224
<4224=4225
<4226=4227
<4227=4229,4228
<4229=4231,4230
<4232=4233
<4233=4248,4234
<4234=4246,4235
<4235=4242,4236
<4236=4237
<4237=4239,4238
<4239=4241,4240
<4242=4243
<4243=4245,4244
<4246=4247
<4249=4256,4250
<4250=4252,4251
<4252=4253
<4253=4255,4254
<4256=4257
<4257=4261,4258
<4258=4259
<4259=4260
<4261=4262
<4262=4264,4263
<4264=4266,4265
<4267=4268
<4268=4283,4269
<4269=4281,4270
<4270=4275,4271
<4271=4272
<4272=4274,4273
<4275=4276
<4276=4278,4277
<4278=4280,4279
<4281=4282
<4284=4291,4285
<4285=4287,4286
<4287=4288
<4288=4290,4289
<4291=4292
<4292=4296,4293
<4293=4294
<4294=4295
<4296=4297
<4297=4299,4298
<4299=4301,4300
<4302=4303
<4303=4318,4304
<4304=4316,4305
<4305=4310,4306
<4306=4307
<4307=4309,4308
<4310=4311
<4311=4313,4312
<4313=4315,4314
<4316=4317
<4319=4321,4320
<4322=4323
<4323=4325,4324
<4326=4327
<4327=4328
<4328=4333,4332,4329
<4329=4331,4330
<4334=4335
<4337=4338
<4338=4382,4378,4375,4339
<4339=4358,4340
<4340=4347,4341
<4341=4343,4342
<4343=4344
<4344=4346,4345
<4347=4348
<4348=4352,4349
<4349=4350
<4350=4351
<4352=4353
<4353=4355,4354
<4355=4357,4356
<4358=4359
<4359=4374,4360
<4360=4372,4361
<4361=4368,4362
<4362=4363
<4363=4365,4364
<4365=4367,4366
<4368=4369
<4369=4371,4370
<4372=4373
<4375=4377,4376
<4378=4379
<4379=4381,4380
<4382=4383
<4383=4384
<4384=4389,4388,4385
<4385=4387,4386
<4390=4391
<4393=4448,4394
<4394=4438,4434,4431,4395
<4395=4414,4396
<4396=4403,4397
<4397=4399,4398
<4399=4400
<4400=4402,4401
<4403=4404
<4404=4408,4405
<4405=4406
<4406=4407
<4408=4409
<4409=4411,4410
<4411=4413,4412
<4414=4415
<4415=4430,4416
<4416=4428,4417
<4417=4424,4418
<4418=4419
<4419=4421,4420
<4421=4423,4422
<4424=4425
<4425=4427,4426
<4428=4429
<4431=4433,4432
<4434=4435
<4435=4437,4436
<4438=4439
<4439=4440
<4440=4447,4446,4441
<4441=4445,4442
<4442=4444,4443
<4448=4492,4488,4485,4449
<4449=4468,4450
<4450=4457,4451
<4451=4453,4452
<4453=4454
<4454=4456,4455
<4457=4458
<4458=4462,4459
<4459=4460
<4460=4461
<4462=4463
<4463=4465,4464
<4465=4467,4466
<4468=4469
<4469=4484,4470
<4470=4482,4471
<4471=4476,4472
<4472=4473
<4473=4475,4474
<4476=4477
<4477=4479,4478
<4479=4481,4480
<4482=4483
<4485=4487,4486
<4488=4489
<4489=4491,4490
<4492=4493
<4493=4494
<4494=4501,4500,4495
<4495=4499,4496
<4496=4498,4497
<4502=4503
<4505=4506
<4506=4571,4567,4564,4507
<4507=4508
<4508=4554,4550,4547,4509
<4509=4528,4510
<4510=4517,4511
<4511=4513,4512
<4513=4514
<4514=4516,4515
<4517=4518
<4518=4522,4519
<4519=4520
<4520=4521
<4522=4523
<4523=4525,4524
<4525=4527,4526
<4528=4529
<4529=4546,4530
<4530=4544,4531
<4531=4538,4532
<4532=4533
<4533=4535,4534
<4535=4537,4536
<4538=4539
<4539=4541,4540
<4541=4543,4542
<4544=4545
<4547=4549,4548
<4550=4551
<4551=4553,4552
<4554=4555
<4555=4556
<4556=4563,4562,4557
<4557=4561,4558
<4558=4560,4559
<4564=4566,4565
<4567=4568
<4568=4570,4569
<4571=4572
<4572=4573
<4573=4580,4579,4574
<4574=4578,4575
<4575=4577,4576
<4581=4582
<4583=4584
<4585=4586
<4586=4588,4587
<4589=4590
<4590=4593,4592,4591
<4594=4595
<4595=4600,4599,4596
<4596=4598,4597
<4625=4646,4645,4626
<4626=4642,4639,4636,4633,4630,4627
<4627=4629,4628
<4630=4632,4631
<4633=4635,4634
<4636=4638,4637
<4639=4641,4640
<4642=4644,4643
<4646=4871,4864,4850,4830,4649,4647
<4647=4648
<4649=4793,4650
<4650=4758,4653,4651
<4651=4652
<4653=4750,4706,4654
<4654=4655
<4655=4702,4656
<4656=4691,4676,4667,4657
<4657=4658
<4658=4660,4659
<4660=4662,4661
<4662=4664,4663
<4664=4666,4665
<4667=4668
<4668=4672,4669
<4669=4670
<4670=4671
<4672=4673
<4673=4675,4674
<4676=4677
<4677=4690,4689,4678
<4678=4688,4679
<4679=4681,4680
<4681=4683,4682
<4683=4685,4684
<4685=4687,4686
<4691=4692
<4692=4694,4693
<4694=4695
<4695=4697,4696
<4697=4699,4698
<4699=4701,4700
<4702=4703
<4703=4705,4704
<4706=4735,4726,4707
<4707=4708
<4708=4718,4709
<4709=4716,4714,4712,4710
<4710=4711
<4712=4713
<4714=4715
<4716=4717
<4718=4719
<4719=4721,4720
<4721=4723,4722
<4723=4725,4724
<4726=4727
<4727=4731,4728
<4728=4729
<4729=4730
<4731=4732
<4732=4734,4733
<4735=4736
<4736=4749,4748,4737
<4737=4747,4738
<4738=4740,4739
<4740=4742,4741
<4742=4744,4743
<4744=4746,4745
<4750=4751
<4751=4755,4752
<4752=4754,4753
<4755=4757,4756
<4758=4789,4759
<4759=4785,4779,4773,4760
<4760=4761
<4761=4765,4762
<4762=4763
<4763=4764
<4765=4766
<4766=4768,4767
<4768=4770,4769
<4770=4772,4771
<4773=4774
<4774=4776,4775
<4776=4778,4777
<4779=4780
<4780=4782,4781
<4782=4784,4783
<4785=4786
<4786=4788,4787
<4789=4790
<4790=4792,4791
<4793=4794
<4794=4827,4795
<4795=4810,4796
<4796=4808,4797
<4797=4798
<4798=4799
<4799=4807,4800
<4800=4802,4801
<4802=4804,4803
<4804=4806,4805
<4808=4809
<4810=4812,4811
<4812=4813
<4813=4815,4814
<4815=4817,4816
<4817=4819,4818
<4819=4820
<4820=4822,4821
<4822=4824,4823
<4824=4826,4825
<4827=4829,4828
<4830=4841,4831
<4831=4832
<4832=4833
<4833=4840,4834
<4834=4838,4835
<4835=4836
<4836=4837
<4838=4839
<4841=4842
<4842=4849,4843
<4843=4845,4844
<4845=4846
<4846=4848,4847
<4850=4856,4851
<4851=4852
<4852=4853
<4853=4855,4854
<4856=4857
<4857=4861,4858
<4858=4860,4859
<4861=4863,4862
<4864=4865
<4865=4870,4869,4866
<4866=4868,4867
<4871=4875,4872
<4872=4873
<4873=4874
<4875=4876
<4876=4899,4877
<4877=4893,4878
<4878=4886,4879
<4879=4881,4880
<4881=4883,4882
<4883=4885,4884
<4886=4888,4887
<4888=4890,4889
<4890=4892,4891
<4893=4897,4894
<4894=4895
<4895=4896
<4897=4898
<4899=4905,4900
<4900=4903,4901
<4901=4902
<4903=4904
<4905=4906
<4957=4960,4959,4958
<4960=4971,4965,4961
<4961=4962
<4962=4964,4963
<4965=4966
<4966=4970,4967
<4967=4969,4968
<4971=4972
<4972=4985,4973
<4973=4976,4974
<4974=4975
<4976=4977
<4977=4983,4978
<4978=4981,4979
<4979=4980
<4981=4982
<4983=4984
<4985=4986
<4986=4988,4987
<4997=5000,4999,4998
<5000=5046,5040,5001
<5001=5036,5002
<5002=5025,5007,5003
<5003=5004
<5004=5006,5005
<5007=5008
<5008=5021,5009
<5009=5012,5010
<5010=5011
<5012=5013
<5013=5019,5014
<5014=5017,5015
<5015=5016
<5017=5018
<5019=5020
<5021=5022
<5022=5024,5023
<5025=5026
<5026=5035,5027
<5027=5033,5028
<5028=5031,5029
<5029=5030
<5031=5032
<5033=5034
<5036=5037
<5037=5039,5038
<5040=5041
<5041=5045,5042
<5042=5044,5043
<5046=5048,5047
<5048=5049
<5049=5051,5050
<5061=5064,5063,5062
<5064=5065
<5065=5071,5066
<5066=5067
<5067=5069,5068
<5069=5070
<5071=5072
<5072=5085,5073
<5073=5080,5074
<5074=5079,5075
<5075=5077,5076
<5077=5078
<5080=5082,5081
<5082=5084,5083
<5085=5090,5086
<5086=5088,5087
<5088=5089
<5090=5094,5091
<5091=5093,5092
<5094=5096,5095
<5103=5109,5108,5104
<5104=5105
<5105=5107,5106
<5114=5120,5119,5115
<5115=5116
<5116=5118,5117
<5120=5411,5404,5382,5155,5150,5138,5126,5121
<5121=5122
<5122=5124,5123
<5124=5125
<5126=5131,5127
<5127=5128
<5128=5130,5129
<5131=5132
<5132=5134,5133
<5134=5135
<5135=5137,5136
<5138=5143,5139
<5139=5140
<5140=5142,5141
<5143=5144
<5144=5146,5145
<5146=5147
<5147=5149,5148
<5150=5151
<5151=5153,5152
<5153=5154
<5155=5367,5156
<5156=5335,5316,5309,5278,5254,5245,5207,5200,5157
<5157=5196,5158
<5158=5189,5178,5174,5159
<5159=5170,5160
<5160=5166,5161
<5161=5162
<5162=5164,5163
<5164=5165
<5166=5167
<5167=5169,5168
<5170=5171
<5171=5173,5172
<5174=5175
<5175=5177,5176
<5178=5187,5179
<5179=5180
<5180=5184,5181
<5181=5183,5182
<5184=5186,5185
<5187=5188
<5189=5190
<5190=5194,5191
<5191=5192
<5192=5193
<5194=5195
<5196=5197
<5197=5199,5198
<5200=5201
<5201=5205,5202
<5202=5203
<5203=5204
<5205=5206
<5207=5241,5208
<5208=5237,5209
<5209=5233,5210
<5210=5229,5222,5215,5211
<5211=5212
<5212=5214,5213
<5215=5216
<5216=5220,5217
<5217=5218
<5218=5219
<5220=5221
<5222=5223
<5223=5227,5224
<5224=5225
<5225=5226
<5227=5228
<5229=5230
<5230=5232,5231
<5233=5234
<5234=5236,5235
<5237=5238
<5238=5240,5239
<5241=5242
<5242=5244,5243
<5245=5246
<5246=5250,5247
<5247=5248
<5248=5249
<5250=5251
<5251=5253,5252
<5254=5269,5255
<5255=5256
<5256=5257
<5257=5268,5258
<5258=5266,5259
<5259=5264,5262,5260
<5260=5261
<5262=5263
<5264=5265
<5266=5267
<5269=5270
<5270=5277,5271
<5271=5273,5272
<5273=5274
<5274=5276,5275
<5278=5300,5279
<5279=5293,5280
<5280=5281
<5281=5292,5282
<5282=5290,5283
<5283=5288,5286,5284
<5284=5285
<5286=5287
<5288=5289
<5290=5291
<5293=5294
<5294=5296,5295
<5296=5297
<5297=5299,5298
<5300=5301
<5301=5305,5302
<5302=5303
<5303=5304
<5305=5306
<5306=5308,5307
<5309=5310
<5310=5314,5311
<5311=5312
<5312=5313
<5314=5315
<5316=5324,5317
<5317=5318
<5318=5322,5319
<5319=5320
<5320=5321
<5322=5323
<5324=5325
<5325=5332,5326
<5326=5328,5327
<5328=5330,5329
<5330=5331
<5332=5334,5333
<5335=5351,5336
<5336=5337
<5337=5340,5338
<5338=5339
<5340=5341
<5341=5350,5342
<5342=5344,5343
<5344=5345
<5345=5347,5346
<5347=5349,5348
<5351=5352
<5352=5366,5353
<5353=5360,5354
<5354=5356,5355
<5356=5358,5357
<5358=5359
<5360=5362,5361
<5362=5364,5363
<5364=5365
<5367=5368
<5368=5381,5369
<5369=5380,5370
<5370=5379,5371
<5371=5373,5372
<5373=5374
<5374=5376,5375
<5376=5378,5377
<5382=5383
<5383=5403,5402,5384
<5384=5401,5385
<5385=5398,5386
<5386=5390,5387
<5387=5388
<5388=5389
<5390=5391
<5391=5393,5392
<5393=5397,5394
<5394=5396,5395
<5398=5400,5399
<5404=5405
<5405=5410,5409,5406
<5406=5408,5407
<5411=5412
<5412=5417,5416,5413
<5413=5415,5414
<5463=5469,5468,5464
<5464=5465
<5465=5467,5466
<5469=5470
<5470=5471
<5471=5473,5472
<5473=5474
<5479=5482,5481,5480
<5482=5483
<5483=5484
<5484=5486,5485
<5486=5488,5487
<5488=5490,5489
<5490=5491
<5498=5504,5503,5499
<5499=5500
<5500=5502,5501
<5504=5507,5505
<5505=5506
<5507=5567,5508
<5508=5556,5547,5540,5520,5511,5509
<5509=5510
<5511=5512
<5512=5516,5513
<5513=5514
<5514=5515
<5516=5517
<5517=5519,5518
<5520=5538,5530,5521
<5521=5522
<5522=5523
<5523=5525,5524
<5525=5527,5526
<5527=5529,5528
<5530=5531
<5531=5533,5532
<5533=5535,5534
<5535=5537,5536
<5538=5539
<5540=5541
<5541=5543,5542
<5543=5544
<5544=5546,5545
<5547=5548
<5548=5552,5549
<5549=5550
<5550=5551
<5552=5553
<5553=5555,5554
<5556=5557
<5557=5561,5558
<5558=5559
<5559=5560
<5561=5562
<5562=5564,5563
<5564=5566,5565
<5567=5568
<5568=5583,5569
<5569=5582,5570
<5570=5579,5571
<5571=5578,5572
<5572=5574,5573
<5574=5575
<5575=5577,5576
<5579=5581,5580
<5583=5585,5584
<5585=5586
<5586=5588,5587
<5607=5610,5609,5608
<5610=5611
<5611=5612
<5612=5614,5613
<5614=5615
<5615=5617,5616
<5623=5626,5625,5624
<5626=5627
<5627=5833,5827,5628
<5628=5629
<5629=5630
<5630=5825,5631
<5631=5807,5787,5765,5758,5742,5632
<5632=5738,5633
<5633=5716,5694,5685,5634
<5634=5676,5635
<5635=5655,5636
<5636=5649,5637
<5637=5638
<5638=5644,5639
<5639=5640
<5640=5642,5641
<5642=5643
<5644=5645
<5645=5647,5646
<5647=5648
<5649=5650
<5650=5652,5651
<5652=5654,5653
<5655=5670,5656
<5656=5657
<5657=5663,5658
<5658=5659
<5659=5661,5660
<5661=5662
<5663=5664
<5664=5669,5665
<5665=5667,5666
<5667=5668
<5670=5671
<5671=5673,5672
<5673=5675,5674
<5676=5677
<5677=5683,5678
<5678=5681,5679
<5679=5680
<5681=5682
<5683=5684
<5685=5686
<5686=5693,5692,5687
<5687=5691,5688
<5688=5690,5689
<5694=5695
<5695=5715,5714,5696
<5696=5713,5697
<5697=5699,5698
<5699=5705,5700
<5700=5701
<5701=5702
<5702=5704,5703
<5705=5706
<5706=5708,5707
<5708=5710,5709
<5710=5712,5711
<5716=5717
<5717=5737,5736,5718
<5718=5735,5719
<5719=5721,5720
<5721=5727,5722
<5722=5723
<5723=5724
<5724=5726,5725
<5727=5728
<5728=5730,5729
<5730=5732,5731
<5732=5734,5733
<5738=5739
<5739=5741,5740
<5742=5743
<5743=5757,5756,5744
<5744=5755,5745
<5745=5747,5746
<5747=5748
<5748=5750,5749
<5750=5752,5751
<5752=5754,5753
<5758=5759
<5759=5761,5760
<5761=5762
<5762=5764,5763
<5765=5780,5766
<5766=5767
<5767=5768
<5768=5776,5769
<5769=5774,5770
<5770=5771
<5771=5773,5772
<5774=5775
<5776=5777
<5777=5779,5778
<5780=5781
<5781=5783,5782
<5783=5784
<5784=5786,5785
<5787=5788
<5788=5805,5789
<5789=5794,5792,5790
<5790=5791
<5792=5793
<5794=5795
<5795=5803,5796
<5796=5801,5797
<5797=5798
<5798=5800,5799
<5801=5802
<5803=5804
<5805=5806
<5807=5808
<5808=5821,5809
<5809=5812,5810
<5810=5811
<5812=5813
<5813=5819,5814
<5814=5817,5815
<5815=5816
<5817=5818
<5819=5820
<5821=5822
<5822=5824,5823
<5825=5826
<5827=5828
<5828=5829
<5829=5831,5830
<5831=5832
<5833=5834
<5865=5871,5870,5866
<5866=5867
<5867=5869,5868
<5871=6009,5957,5872
<5872=5950,5873
<5873=5923,5911,5874
<5874=5902,5875
<5875=5876
<5876=5892,5877
<5877=5878
<5878=5888,5879
<5879=5886,5884,5880
<5880=5881
<5881=5883,5882
<5884=5885
<5886=5887
<5888=5889
<5889=5891,5890
<5892=5893
<5893=5899,5894
<5894=5896,5895
<5896=5898,5897
<5899=5901,5900
<5902=5903
<5903=5910,5904
<5904=5906,5905
<5906=5907
<5907=5909,5908
<5911=5912
<5912=5922,5921,5913
<5913=5920,5914
<5914=5916,5915
<5916=5917
<5917=5919,5918
<5923=5943,5934,5924
<5924=5925
<5925=5926
<5926=5932,5927
<5927=5930,5928
<5928=5929
<5930=5931
<5932=5933
<5934=5935
<5935=5941,5936
<5936=5939,5937
<5937=5938
<5939=5940
<5941=5942
<5943=5944
<5944=5946,5945
<5946=5947
<5947=5949,5948
<5950=5951
<5951=5953,5952
<5953=5954
<5954=5956,5955
<5957=6000,5958
<5958=5959
<5959=5994,5982,5960
<5960=5961
<5961=5976,5962
<5962=5963
<5963=5969,5964
<5964=5965
<5965=5967,5966
<5967=5968
<5969=5970
<5970=5975,5971
<5971=5973,5972
<5973=5974
<5976=5977
<5977=5979,5978
<5979=5981,5980
<5982=5983
<5983=5989,5984
<5984=5985
<5985=5987,5986
<5987=5988
<5989=5990
<5990=5992,5991
<5992=5993
<5994=5995
<5995=5997,5996
<5997=5999,5998
<6000=6001
<6001=6007,6002
<6002=6005,6003
<6003=6004
<6005=6006
<6007=6008
<6009=6010
<6010=6012,6011
<6012=6013
<6013=6015,6014
<6032=6038,6037,6033
<6033=6034
<6034=6036,6035
<6038=6065,6061,6055,6043,6039
<6039=6040
<6040=6042,6041
<6043=6044
<6044=6053,6045
<6045=6046
<6046=6047
<6047=6049,6048
<6049=6050
<6050=6052,6051
<6053=6054
<6055=6056
<6056=6060,6057
<6057=6059,6058
<6061=6062
<6062=6064,6063
<6065=6066
<6066=6068,6067
<6077=6080,6079,6078
<6080=6083,6081
<6081=6082
<6083=6084
<6084=6091,6090,6085
<6085=6089,6086
<6086=6088,6087
<6097=6103,6102,6098
<6098=6099
<6099=6101,6100
<6103=6564,6557,6553,6196,6106,6104
<6104=6105
<6106=6176,6107
<6107=6169,6108
<6108=6160,6111,6109
<6109=6110
<6111=6112
<6112=6149,6113
<6113=6114
<6114=6141,6137,6115
<6115=6116
<6116=6126,6117
<6117=6118
<6118=6122,6119
<6119=6120
<6120=6121
<6122=6123
<6123=6125,6124
<6126=6127
<6127=6129,6128
<6129=6130
<6130=6132,6131
<6132=6134,6133
<6134=6136,6135
<6137=6138
<6138=6140,6139
<6141=6142
<6142=6144,6143
<6144=6146,6145
<6146=6148,6147
<6149=6150
<6150=6152,6151
<6152=6156,6153
<6153=6154
<6154=6155
<6156=6157
<6157=6159,6158
<6160=6161
<6161=6168,6162
<6162=6164,6163
<6164=6165
<6165=6167,6166
<6169=6170
<6170=6175,6174,6171
<6171=6173,6172
<6176=6177
<6177=6188,6178
<6178=6180,6179
<6180=6181
<6181=6183,6182
<6183=6185,6184
<6185=6187,6186
<6188=6190,6189
<6190=6192,6191
<6192=6193
<6193=6195,6194
<6196=6390,6197
<6197=6388,6198
<6198=6384,6380,6368,6361,6352,6303,6288,6279,6272,6263,6256,6199
<6199=6249,6200
<6200=6201
<6201=6245,6224,6202
<6202=6203
<6203=6204
<6204=6220,6205
<6205=6214,6208,6206
<6206=6207
<6208=6209
<6209=6213,6210
<6210=6212,6211
<6214=6215
<6215=6217,6216
<6217=6219,6218
<6220=6221
<6221=6223,6222
<6224=6225
<6225=6241,6226
<6226=6235,6229,6227
<6227=6228
<6229=6230
<6230=6232,6231
<6232=6234,6233
<6235=6236
<6236=6238,6237
<6238=6240,6239
<6241=6242
<6242=6244,6243
<6245=6246
<6246=6248,6247
<6249=6250
<6250=6252,6251
<6252=6254,6253
<6254=6255
<6256=6257
<6257=6262,6261,6258
<6258=6260,6259
<6263=6264
<6264=6271,6270,6265
<6265=6269,6266
<6266=6268,6267
<6272=6273
<6273=6275,6274
<6275=6276
<6276=6278,6277
<6279=6280
<6280=6287,6286,6281
<6281=6285,6282
<6282=6284,6283
<6288=6289
<6289=6301,6290
<6290=6299,6297,6295,6293,6291
<6291=6292
<6293=6294
<6295=6296
<6297=6298
<6299=6300
<6301=6302
<6303=6322,6304
<6304=6305
<6305=6306
<6306=6320,6307
<6307=6318,6316,6314,6310,6308
<6308=6309
<6310=6311
<6311=6313,6312
<6314=6315
<6316=6317
<6318=6319
<6320=6321
<6322=6323
<6323=6351,6324
<6324=6343,6325
<6325=6333,6326
<6326=6328,6327
<6328=6330,6329
<6330=6332,6331
<6333=6335,6334
<6335=6336
<6336=6338,6337
<6338=6340,6339
<6340=6342,6341
<6343=6345,6344
<6345=6347,6346
<6347=6348
<6348=6350,6349
<6352=6357,6353
<6353=6354
<6354=6356,6355
<6357=6358
<6358=6360,6359
<6361=6362
<6362=6367,6366,6363
<6363=6365,6364
<6368=6369
<6369=6379,6378,6370
<6370=6377,6371
<6371=6373,6372
<6373=6374
<6374=6376,6375
<6380=6381
<6381=6383,6382
<6384=6385
<6385=6387,6386
<6388=6389
<6390=6542,6391
<6391=6392
<6392=6525,6523,6518,6393
<6393=6394
<6394=6514,6395
<6395=6396
<6396=6506,6495,6492,6397
<6397=6479,6464,6451,6398
<6398=6423,6399
<6399=6419,6408,6404,6400
<6400=6401
<6401=6403,6402
<6404=6405
<6405=6407,6406
<6408=6409
<6409=6415,6410
<6410=6411
<6411=6412
<6412=6414,6413
<6415=6416
<6416=6418,6417
<6419=6420
<6420=6422,6421
<6423=6424
<6424=6449,6425
<6425=6445,6441,6439,6426
<6426=6427
<6427=6438,6428
<6428=6430,6429
<6430=6432,6431
<6432=6433
<6433=6435,6434
<6435=6437,6436
<6439=6440
<6441=6442
<6442=6444,6443
<6445=6446
<6446=6448,6447
<6449=6450
<6451=6452
<6452=6463,6462,6453
<6453=6461,6454
<6454=6458,6455
<6455=6457,6456
<6458=6460,6459
<6464=6465
<6465=6478,6477,6466
<6466=6476,6467
<6467=6475,6468
<6468=6472,6469
<6469=6471,6470
<6472=6474,6473
<6479=6480
<6480=6491,6490,6481
<6481=6489,6482
<6482=6488,6483
<6483=6485,6484
<6485=6487,6486
<6492=6494,6493
<6495=6496
<6496=6505,6497
<6497=6499,6498
<6499=6500
<6500=6502,6501
<6502=6504,6503
<6506=6507
<6507=6508
<6508=6513,6512,6509
<6509=6511,6510
<6514=6515
<6515=6517,6516
<6518=6522,6519
<6519=6521,6520
<6523=6524
<6525=6526
<6526=6527
<6527=6541,6540,6528
<6528=6539,6529
<6529=6533,6530
<6530=6531
<6531=6532
<6533=6534
<6534=6536,6535
<6536=6538,6537
<6542=6543
<6543=6552,6544
<6544=6546,6545
<6546=6547
<6547=6549,6548
<6549=6551,6550
<6553=6554
<6554=6556,6555
<6557=6558
<6558=6563,6562,6559
<6559=6561,6560
<6564=6565
<6565=6567,6566
<6636=6645,6644,6637
<6637=6641,6638
<6638=6640,6639
<6641=6643,6642
<6645=6646
<6646=6739,6647
<6647=6725,6718,6707,6686,6682,6648
<6648=6653,6649
<6649=6650
<6650=6652,6651
<6653=6654
<6654=6675,6655
<6655=6668,6656
<6656=6665,6657
<6657=6661,6658
<6658=6659
<6659=6660
<6661=6662
<6662=6664,6663
<6665=6667,6666
<6668=6674,6669
<6669=6671,6670
<6671=6673,6672
<6675=6681,6676
<6676=6678,6677
<6678=6680,6679
<6682=6683
<6683=6685,6684
<6686=6697,6687
<6687=6696,6695,6688
<6688=6694,6689
<6689=6691,6690
<6691=6693,6692
<6697=6706,6705,6698
<6698=6704,6699
<6699=6701,6700
<6701=6703,6702
<6707=6708
<6708=6714,6709
<6709=6710
<6710=6711
<6711=6713,6712
<6714=6715
<6715=6717,6716
<6718=6719
<6719=6724,6723,6720
<6720=6722,6721
<6725=6726
<6726=6738,6737,6727
<6727=6736,6728
<6728=6732,6729
<6729=6730
<6730=6731
<6732=6733
<6733=6735,6734
<6739=6740
<6740=6749,6741
<6741=6748,6742
<6742=6744,6743
<6744=6745
<6745=6747,6746
<6749=6753,6750
<6750=6752,6751
<6772=6775,6774,6773
<6775=6936,6778,6776
<6776=6777
<6778=6928,6924,6921,6779
<6779=6780
<6780=6913,6909,6906,6781
<6781=6875,6844,6813,6782
<6782=6785,6783
<6783=6784
<6785=6786
<6786=6807,6787
<6787=6790,6788
<6788=6789
<6790=6791
<6791=6805,6792
<6792=6799,6793
<6793=6794
<6794=6796,6795
<6796=6798,6797
<6799=6800
<6800=6802,6801
<6802=6804,6803
<6805=6806
<6807=6808
<6808=6810,6809
<6810=6812,6811
<6813=6816,6814
<6814=6815
<6816=6817
<6817=6838,6818
<6818=6821,6819
<6819=6820
<6821=6822
<6822=6836,6823
<6823=6830,6824
<6824=6825
<6825=6827,6826
<6827=6829,6828
<6830=6831
<6831=6833,6832
<6833=6835,6834
<6836=6837
<6838=6839
<6839=6841,6840
<6841=6843,6842
<6844=6847,6845
<6845=6846
<6847=6848
<6848=6869,6849
<6849=6852,6850
<6850=6851
<6852=6853
<6853=6867,6854
<6854=6861,6855
<6855=6856
<6856=6858,6857
<6858=6860,6859
<6861=6862
<6862=6864,6863
<6864=6866,6865
<6867=6868
<6869=6870
<6870=6872,6871
<6872=6874,6873
<6875=6878,6876
<6876=6877
<6878=6879
<6879=6900,6880
<6880=6883,6881
<6881=6882
<6883=6884
<6884=6898,6885
<6885=6892,6886
<6886=6887
<6887=6889,6888
<6889=6891,6890
<6892=6893
<6893=6895,6894
<6895=6897,6896
<6898=6899
<6900=6901
<6901=6903,6902
<6903=6905,6904
<6906=6908,6907
<6909=6910
<6910=6912,6911
<6913=6914
<6914=6915
<6915=6920,6919,6916
<6916=6918,6917
<6921=6923,6922
<6924=6925
<6925=6927,6926
<6928=6929
<6929=6930
<6930=6935,6934,6931
<6931=6933,6932
<6936=6937
<6937=6940,6939,6938
<6959=6962,6961,6960
<6962=7039,7034,7027,7020,6976,6963
<6963=6974,6964
<6964=6965
<6965=6966
<6966=6973,6967
<6967=6969,6968
<6969=6970
<6970=6972,6971
<6974=6975
<6976=7009,6977
<6977=7005,6994,6986,6978
<6978=6979
<6979=6983,6980
<6980=6982,6981
<6983=6985,6984
<6986=6987
<6987=6991,6988
<6988=6990,6989
<6991=6993,6992
<6994=7001,6995
<6995=6997,6996
<6997=6998
<6998=7000,6999
<7001=7002
<7002=7004,7003
<7005=7006
<7006=7008,7007
<7009=7010
<7010=7014,7011
<7011=7012
<7012=7013
<7014=7015
<7015=7017,7016
<7017=7019,7018
<7020=7021
<7021=7026,7025,7022
<7022=7024,7023
<7027=7028
<7028=7033,7032,7029
<7029=7031,7030
<7034=7035
<7035=7038,7037,7036
<7039=7040
<7040=7048,7047,7041
<7041=7046,7042
<7042=7044,7043
<7044=7045
<7071=7074,7073,7072
<7074=7075
<7075=7076
<7076=7078,7077
<7078=7079
<7079=7081,7080
<7086=7095,7094,7087
<7087=7091,7088
<7088=7090,7089
<7091=7093,7092
<7095=7096
<7096=7116,7107,7097
<7097=7098
<7098=7099
<7099=7103,7100
<7100=7101
<7101=7102
<7103=7104
<7104=7106,7105
<7107=7108
<7108=7112,7109
<7109=7110
<7110=7111
<7112=7113
<7113=7115,7114
<7116=7117
<7124=7133,7132,7125
<7125=7129,7126
<7126=7128,7127
<7129=7131,7130
<7133=7165,7134
<7134=7161,7135
<7135=7145,7136
<7136=7143,7137
<7137=7138
<7138=7142,7139
<7139=7141,7140
<7143=7144
<7145=7146
<7146=7160,7159,7147
<7147=7158,7148
<7148=7152,7149
<7149=7150
<7150=7151
<7152=7153
<7153=7155,7154
<7155=7157,7156
<7161=7162
<7162=7164,7163
<7165=7166
<7166=7168,7167
<7183=7189,7188,7184
<7184=7185
<7185=7187,7186
<7189=7190
<7190=7288,7283,7191
<7191=7192
<7192=7253,7223,7193
<7193=7215,7211,7208,7194
<7194=7195
<7195=7204,7196
<7196=7197
<7197=7198
<7198=7202,7199
<7199=7200
<7200=7201
<7202=7203
<7204=7205
<7205=7207,7206
<7208=7210,7209
<7211=7212
<7212=7214,7213
<7215=7216
<7216=7217
<7217=7222,7221,7218
<7218=7220,7219
<7223=7245,7241,7238,7224
<7224=7225
<7225=7234,7226
<7226=7227
<7227=7228
<7228=7232,7229
<7229=7230
<7230=7231
<7232=7233
<7234=7235
<7235=7237,7236
<7238=7240,7239
<7241=7242
<7242=7244,7243
<7245=7246
<7246=7247
<7247=7252,7251,7248
<7248=7250,7249
<7253=7275,7271,7268,7254
<7254=7255
<7255=7264,7256
<7256=7257
<7257=7258
<7258=7262,7259
<7259=7260
<7260=7261
<7262=7263
<7264=7265
<7265=7267,7266
<7268=7270,7269
<7271=7272
<7272=7274,7273
<7275=7276
<7276=7277
<7277=7282,7281,7278
<7278=7280,7279
<7283=7284
<7284=7286,7285
<7286=7287
<7288=7289
<7303=7309,7308,7304
<7304=7305
<7305=7307,7306
<7309=7310
<7310=7311
<7311=7318,7312
<7312=7314,7313
<7314=7315
<7315=7317,7316
<7318=7322,7319
<7319=7320
<7320=7321
<7322=7323
<7323=7325,7324
<7333=7336,7335,7334
<7336=7337
<7337=7338
<7338=7345,7339
<7339=7343,7340
<7340=7341
<7341=7342
<7343=7344
<7345=7349,7346
<7346=7347
<7347=7348
<7349=7350
<7357=7360,7359,7358
<7360=7361
<7361=7362
<7362=7364,7363
<7370=7373,7372,7371
<7373=7374
<7374=7391,7375
<7375=7380,7376
<7376=7377
<7377=7379,7378
<7380=7381
<7381=7385,7382
<7382=7383
<7383=7384
<7385=7386
<7386=7388,7387
<7388=7390,7389
<7391=7392
<7392=7394,7393
<7404=7413,7412,7405
<7405=7409,7406
<7406=7408,7407
<7409=7411,7410
<7413=7439,7430,7414
<7414=7428,7415
<7415=7416
<7416=7424,7417
<7417=7418
<7418=7419
<7419=7421,7420
<7421=7423,7422
<7424=7425
<7425=7427,7426
<7428=7429
<7430=7431
<7431=7435,7432
<7432=7433
<7433=7434
<7435=7436
<7436=7438,7437
<7439=7440
<7440=7442,7441
<7455=7461,7460,7456
<7456=7457
<7457=7459,7458
<7461=8242,8233,8214,8180,8173,8161,8115,8057,8048,8042,8036,8029,8019,7993,7978,7898,7891,7882,7878,7802,7786,7777,7766,7483,7469,7462
<7462=7463
<7463=7467,7464
<7464=7465
<7465=7466
<7467=7468
<7469=7481,7470
<7470=7471
<7471=7472
<7472=7480,7473
<7473=7475,7474
<7475=7477,7476
<7477=7479,7478
<7481=7482
<7483=7759,7754,7484
<7484=7485
<7485=7752,7486
<7486=7745,7741,7734,7619,7604,7487
<7487=7590,7518,7488
<7488=7489
<7489=7506,7490
<7490=7496,7491
<7491=7492
<7492=7494,7493
<7494=7495
<7496=7497
<7497=7503,7498
<7498=7500,7499
<7500=7502,7501
<7503=7505,7504
<7506=7507
<7507=7517,7516,7508
<7508=7515,7509
<7509=7511,7510
<7511=7512
<7512=7514,7513
<7518=7578,7574,7550,7541,7535,7526,7519
<7519=7520
<7520=7524,7521
<7521=7522
<7522=7523
<7524=7525
<7526=7527
<7527=7534,7533,7528
<7528=7532,7529
<7529=7531,7530
<7535=7536
<7536=7540,7537
<7537=7539,7538
<7541=7542
<7542=7546,7543
<7543=7544
<7544=7545
<7546=7547
<7547=7549,7548
<7550=7570,7566,7551
<7551=7552
<7552=7562,7558,7553
<7553=7554
<7554=7555
<7555=7557,7556
<7558=7559
<7559=7561,7560
<7562=7563
<7563=7565,7564
<7566=7567
<7567=7569,7568
<7570=7571
<7571=7573,7572
<7574=7575
<7575=7577,7576
<7578=7579
<7579=7589,7588,7580
<7580=7587,7581
<7581=7583,7582
<7583=7584
<7584=7586,7585
<7590=7591
<7591=7598,7592
<7592=7596,7593
<7593=7594
<7594=7595
<7596=7597
<7598=7600,7599
<7600=7601
<7601=7603,7602
<7604=7605
<7605=7618,7617,7606
<7606=7616,7607
<7607=7613,7608
<7608=7612,7609
<7609=7611,7610
<7613=7615,7614
<7619=7718,7678,7620
<7620=7621
<7621=7662,7622
<7622=7651,7623
<7623=7649,7624
<7624=7648,7639,7638,7637,7626,7625
<7626=7627
<7627=7633,7628
<7628=7629
<7629=7630
<7630=7632,7631
<7633=7634
<7634=7636,7635
<7639=7640
<7640=7644,7641
<7641=7642
<7642=7643
<7644=7645
<7645=7647,7646
<7649=7650
<7651=7652
<7652=7661,7653
<7653=7655,7654
<7655=7656
<7656=7658,7657
<7658=7660,7659
<7662=7663
<7663=7670,7664
<7664=7668,7665
<7665=7666
<7666=7667
<7668=7669
<7670=7672,7671
<7672=7673
<7673=7675,7674
<7675=7677,7676
<7678=7707,7679
<7679=7705,7680
<7680=7704,7695,7694,7693,7682,7681
<7682=7683
<7683=7689,7684
<7684=7685
<7685=7686
<7686=7688,7687
<7689=7690
<7690=7692,7691
<7695=7696
<7696=7700,7697
<7697=7698
<7698=7699
<7700=7701
<7701=7703,7702
<7705=7706
<7707=7708
<7708=7717,7709
<7709=7711,7710
<7711=7712
<7712=7714,7713
<7714=7716,7715
<7718=7719
<7719=7726,7720
<7720=7724,7721
<7721=7722
<7722=7723
<7724=7725
<7726=7728,7727
<7728=7729
<7729=7731,7730
<7731=7733,7732
<7734=7735
<7735=7740,7739,7736
<7736=7738,7737
<7741=7742
<7742=7744,7743
<7745=7746
<7746=7751,7750,7747
<7747=7749,7748
<7752=7753
<7754=7755
<7755=7756
<7756=7758,7757
<7759=7760
<7760=7762,7761
<7762=7764,7763
<7764=7765
<7766=7775,7767
<7767=7768
<7768=7772,7769
<7769=7771,7770
<7772=7774,7773
<7775=7776
<7777=7778
<7778=7782,7779
<7779=7780
<7780=7781
<7782=7783
<7783=7785,7784
<7786=7793,7787
<7787=7788
<7788=7789
<7789=7791,7790
<7791=7792
<7793=7794
<7794=7801,7795
<7795=7800,7796
<7796=7798,7797
<7798=7799
<7802=7869,7861,7803
<7803=7804
<7804=7805
<7805=7859,7806
<7806=7848,7807
<7807=7842,7828,7808
<7808=7809
<7809=7822,7810
<7810=7811
<7811=7817,7812
<7812=7813
<7813=7815,7814
<7815=7816
<7817=7818
<7818=7820,7819
<7820=7821
<7822=7823
<7823=7825,7824
<7825=7827,7826
<7828=7829
<7829=7835,7830
<7830=7831
<7831=7833,7832
<7833=7834
<7835=7836
<7836=7841,7837
<7837=7839,7838
<7839=7840
<7842=7843
<7843=7845,7844
<7845=7847,7846
<7848=7849
<7849=7858,7857,7850
<7850=7856,7851
<7851=7855,7852
<7852=7854,7853
<7859=7860
<7861=7862
<7862=7863
<7863=7867,7864
<7864=7865
<7865=7866
<7867=7868
<7869=7870
<7870=7872,7871
<7872=7874,7873
<7874=7875
<7875=7877,7876
<7878=7879
<7879=7881,7880
<7882=7883
<7883=7890,7889,7884
<7884=7888,7885
<7885=7887,7886
<7891=7892
<7892=7896,7893
<7893=7894
<7894=7895
<7896=7897
<7898=7970,7899
<7899=7900
<7900=7968,7901
<7901=7902
<7902=7959,7903
<7903=7946,7942,7936,7930,7922,7915,7904
<7904=7905
<7905=7911,7906
<7906=7909,7907
<7907=7908
<7909=7910
<7911=7912
<7912=7914,7913
<7915=7916
<7916=7920,7917
<7917=7918
<7918=7919
<7920=7921
<7922=7923
<7923=7927,7924
<7924=7926,7925
<7927=7929,7928
<7930=7931
<7931=7933,7932
<7933=7935,7934
<7936=7937
<7937=7939,7938
<7939=7941,7940
<7942=7943
<7943=7945,7944
<7946=7947
<7947=7955,7948
<7948=7949
<7949=7950
<7950=7952,7951
<7952=7954,7953
<7955=7956
<7956=7958,7957
<7959=7960
<7960=7964,7961
<7961=7962
<7962=7963
<7964=7965
<7965=7967,7966
<7968=7969
<7970=7971
<7971=7975,7972
<7972=7974,7973
<7975=7977,7976
<7978=7984,7979
<7979=7980
<7980=7981
<7981=7983,7982
<7984=7985
<7985=7989,7986
<7986=7987
<7987=7988
<7989=7990
<7990=7992,7991
<7993=8010,7994
<7994=8003,7995
<7995=7996
<7996=7998,7997
<7998=8000,7999
<8000=8002,8001
<8003=8004
<8004=8006,8005
<8006=8007
<8007=8009,8008
<8010=8011
<8011=8015,8012
<8012=8013
<8013=8014
<8015=8016
<8016=8018,8017
<8019=8024,8020
<8020=8021
<8021=8023,8022
<8024=8025
<8025=8027,8026
<8027=8028
<8029=8030
<8030=8035,8034,8031
<8031=8033,8032
<8036=8037
<8037=8039,8038
<8039=8041,8040
<8042=8043
<8043=8045,8044
<8045=8047,8046
<8048=8049
<8049=8053,8050
<8050=8051
<8051=8052
<8053=8054
<8054=8056,8055
<8057=8111,8058
<8058=8107,8100,8059
<8059=8096,8074,8060
<8060=8061
<8061=8062
<8062=8063
<8063=8069,8064
<8064=8068,8065
<8065=8067,8066
<8069=8071,8070
<8071=8073,8072
<8074=8088,8083,8079,8075
<8075=8076
<8076=8078,8077
<8079=8080
<8080=8082,8081
<8083=8084
<8084=8086,8085
<8086=8087
<8088=8089
<8089=8091,8090
<8091=8093,8092
<8093=8095,8094
<8096=8097
<8097=8099,8098
<8100=8101
<8101=8103,8102
<8103=8104
<8104=8106,8105
<8107=8108
<8108=8110,8109
<8111=8112
<8112=8114,8113
<8115=8159,8116
<8116=8145,8131,8117
<8117=8118
<8118=8126,8119
<8119=8123,8120
<8120=8122,8121
<8123=8125,8124
<8126=8128,8127
<8128=8130,8129
<8131=8132
<8132=8140,8133
<8133=8137,8134
<8134=8136,8135
<8137=8139,8138
<8140=8142,8141
<8142=8144,8143
<8145=8146
<8146=8154,8147
<8147=8151,8148
<8148=8150,8149
<8151=8153,8152
<8154=8156,8155
<8156=8158,8157
<8159=8160
<8161=8171,8162
<8162=8163
<8163=8164
<8164=8170,8165
<8165=8167,8166
<8167=8169,8168
<8171=8172
<8173=8174
<8174=8179,8178,8175
<8175=8177,8176
<8180=8212,8181
<8181=8203,8182
<8182=8201,8183
<8183=8200,8185,8184
<8185=8191,8186
<8186=8187
<8187=8189,8188
<8189=8190
<8191=8192
<8192=8199,8193
<8193=8195,8194
<8195=8196
<8196=8198,8197
<8201=8202
<8203=8204
<8204=8208,8205
<8205=8206
<8206=8207
<8208=8209
<8209=8211,8210
<8212=8213
<8214=8229,8215
<8215=8225,8216
<8216=8221,8217
<8217=8218
<8218=8220,8219
<8221=8222
<8222=8224,8223
<8225=8226
<8226=8228,8227
<8229=8230
<8230=8232,8231
<8233=8234
<8234=8238,8235
<8235=8236
<8236=8237
<8238=8239
<8239=8241,8240
<8242=8264,8243
<8243=8244
<8244=8255,8245
<8245=8246
<8246=8247
<8247=8253,8248
<8248=8251,8249
<8249=8250
<8251=8252
<8253=8254
<8255=8256
<8256=8263,8257
<8257=8259,8258
<8259=8260
<8260=8262,8261
<8264=8265
<8265=8271,8266
<8266=8269,8267
<8267=8268
<8269=8270
<8271=8272
<8391=8394,8393,8392
<8394=8395
<8395=8552,8396
<8396=8545,8432,8402,8397
<8397=8398
<8398=8400,8399
<8400=8401
<8402=8419,8403
<8403=8415,8405,8404
<8405=8406
<8406=8413,8407
<8407=8408
<8408=8409
<8409=8411,8410
<8411=8412
<8413=8414
<8415=8416
<8416=8418,8417
<8419=8420
<8420=8426,8421
<8421=8424,8422
<8422=8423
<8424=8425
<8426=8427
<8427=8429,8428
<8429=8431,8430
<8432=8541,8500,8433
<8433=8434
<8434=8474,8461,8455,8446,8435
<8435=8436
<8436=8444,8437
<8437=8440,8438
<8438=8439
<8440=8441
<8441=8443,8442
<8444=8445
<8446=8447
<8447=8449,8448
<8449=8450
<8450=8452,8451
<8452=8454,8453
<8455=8456
<8456=8458,8457
<8458=8460,8459
<8461=8462
<8462=8473,8463
<8463=8465,8464
<8465=8467,8466
<8467=8468
<8468=8470,8469
<8470=8472,8471
<8474=8475
<8475=8499,8498,8476
<8476=8497,8477
<8477=8495,8478
<8478=8491,8479
<8479=8480
<8480=8484,8481
<8481=8483,8482
<8484=8486,8485
<8486=8488,8487
<8488=8490,8489
<8491=8492
<8492=8494,8493
<8495=8496
<8500=8529,8512,8501
<8501=8502
<8502=8510,8503
<8503=8506,8504
<8504=8505
<8506=8507
<8507=8509,8508
<8510=8511
<8512=8513
<8513=8526,8514
<8514=8520,8515
<8515=8516
<8516=8517
<8517=8519,8518
<8520=8521
<8521=8523,8522
<8523=8525,8524
<8526=8528,8527
<8529=8530
<8530=8540,8531
<8531=8535,8532
<8532=8534,8533
<8535=8537,8536
<8537=8539,8538
<8541=8542
<8542=8544,8543
<8545=8546
<8546=8551,8550,8547
<8547=8549,8548
<8552=8553
<8553=8555,8554
<8591=8594,8593,8592
<8594=8595
<8595=8596
<8600=8603,8602,8601
<8603=8682,8675,8668,8661,8656,8638,8620,8611,8604
<8604=8605
<8605=8609,8606
<8606=8607
<8607=8608
<8609=8610
<8611=8612
<8612=8616,8613
<8613=8614
<8614=8615
<8616=8617
<8617=8619,8618
<8620=8621
<8621=8636,8622
<8622=8625,8623
<8623=8624
<8625=8626
<8626=8634,8627
<8627=8632,8628
<8628=8629
<8629=8631,8630
<8632=8633
<8634=8635
<8636=8637
<8638=8639
<8639=8652,8640
<8640=8647,8645,8641
<8641=8642
<8642=8644,8643
<8645=8646
<8647=8648
<8648=8650,8649
<8650=8651
<8652=8653
<8653=8655,8654
<8656=8657
<8657=8659,8658
<8659=8660
<8661=8662
<8662=8664,8663
<8664=8665
<8665=8667,8666
<8668=8669
<8669=8673,8670
<8670=8671
<8671=8672
<8673=8674
<8675=8676
<8676=8678,8677
<8678=8679
<8679=8681,8680
<8682=8688,8683
<8683=8684
<8684=8686,8685
<8686=8687
<8688=8689
<8689=8691,8690
<8691=8692
<8703=8709,8708,8704
<8704=8705
<8705=8707,8706
<8709=8710
<8710=8863,8711
<8711=8859,8712
<8712=8855,8818,8713
<8713=8714
<8714=8809,8803,8760,8715
<8715=8756,8733,8716
<8716=8717
<8717=8724,8718
<8718=8719
<8719=8721,8720
<8721=8723,8722
<8724=8725
<8725=8730,8726
<8726=8728,8727
<8728=8729
<8730=8732,8731
<8733=8745,8734
<8734=8735
<8735=8742,8736
<8736=8738,8737
<8738=8739
<8739=8741,8740
<8742=8744,8743
<8745=8746
<8746=8753,8747
<8747=8749,8748
<8749=8750
<8750=8752,8751
<8753=8755,8754
<8756=8757
<8757=8759,8758
<8760=8799,8761
<8761=8795,8762
<8762=8763
<8763=8789,8764
<8764=8787,8785,8783,8765
<8765=8766
<8766=8779,8767
<8767=8768
<8768=8769
<8769=8777,8770
<8770=8773,8771
<8771=8772
<8773=8774
<8774=8776,8775
<8777=8778
<8779=8780
<8780=8782,8781
<8783=8784
<8785=8786
<8787=8788
<8789=8790
<8790=8792,8791
<8792=8794,8793
<8795=8796
<8796=8798,8797
<8799=8800
<8800=8802,8801
<8803=8804
<8804=8808,8805
<8805=8807,8806
<8809=8810
<8810=8814,8811
<8811=8812
<8812=8813
<8814=8815
<8815=8817,8816
<8818=8851,8842,8833,8827,8823,8819
<8819=8820
<8820=8822,8821
<8823=8824
<8824=8826,8825
<8827=8828
<8828=8830,8829
<8830=8832,8831
<8833=8834
<8834=8838,8835
<8835=8836
<8836=8837
<8838=8839
<8839=8841,8840
<8842=8843
<8843=8847,8844
<8844=8845
<8845=8846
<8847=8848
<8848=8850,8849
<8851=8852
<8852=8854,8853
<8855=8856
<8856=8858,8857
<8859=8860
<8860=8862,8861
<8863=8864
<8864=8866,8865
<8892=8895,8894,8893
<8895=8990,8982,8970,8966,8962,8911,8907,8896
<8896=8897
<8897=8906,8898
<8898=8902,8899
<8899=8900
<8900=8901
<8902=8903
<8903=8905,8904
<8907=8908
<8908=8910,8909
<8911=8958,8912
<8912=8954,8945,8939,8926,8913
<8913=8914
<8914=8920,8915
<8915=8918,8916
<8916=8917
<8918=8919
<8920=8921
<8921=8923,8922
<8923=8925,8924
<8926=8927
<8927=8933,8928
<8928=8931,8929
<8929=8930
<8931=8932
<8933=8934
<8934=8936,8935
<8936=8938,8937
<8939=8940
<8940=8942,8941
<8942=8944,8943
<8945=8946
<8946=8950,8947
<8947=8948
<8948=8949
<8950=8951
<8951=8953,8952
<8954=8955
<8955=8957,8956
<8958=8959
<8959=8961,8960
<8962=8963
<8963=8965,8964
<8966=8967
<8967=8969,8968
<8970=8971
<8971=8980,8972
<8972=8973
<8973=8974
<8974=8976,8975
<8976=8977
<8977=8979,8978
<8980=8981
<8982=8983
<8983=8989,8984
<8984=8988,8985
<8985=8987,8986
<8990=8991
<8991=8993,8992
<9012=9018,9017,9013
<9013=9014
<9014=9016,9015
<9018=9019
<9019=9020
<9020=9022,9021
<9028=9031,9030,9029
<9031=9032
<9032=9033
<9038=9047,9046,9039
<9039=9043,9040
<9040=9042,9041
<9043=9045,9044
<9047=9063,9054,9048
<9048=9049
<9049=9051,9050
<9051=9053,9052
<9054=9055
<9055=9059,9056
<9056=9057
<9057=9058
<9059=9060
<9060=9062,9061
<9063=9064
<9064=9068,9065
<9065=9066
<9066=9067
<9068=9069
<9069=9071,9070
<9082=9088,9087,9083
<9083=9084
<9084=9086,9085
<9088=9169,9162,9155,9148,9141,9089
<9089=9133,9124,9121,9090
<9090=9091
<9091=9115,9092
<9092=9104,9093
<9093=9094
<9094=9100,9095
<9095=9096
<9096=9097
<9097=9099,9098
<9100=9101
<9101=9103,9102
<9104=9105
<9105=9111,9106
<9106=9107
<9107=9108
<9108=9110,9109
<9111=9112
<9112=9114,9113
<9115=9116
<9116=9118,9117
<9118=9120,9119
<9121=9123,9122
<9124=9125
<9125=9132,9126
<9126=9128,9127
<9128=9129
<9129=9131,9130
<9133=9134
<9134=9135
<9135=9140,9139,9136
<9136=9138,9137
<9141=9142
<9142=9144,9143
<9144=9145
<9145=9147,9146
<9148=9149
<9149=9151,9150
<9151=9152
<9152=9154,9153
<9155=9156
<9156=9161,9160,9157
<9157=9159,9158
<9162=9163
<9163=9168,9167,9164
<9164=9166,9165
<9169=9170
<9170=9172,9171
<9172=9174,9173
<9190=9202,9201,9191
<9191=9198,9195,9192
<9192=9194,9193
<9195=9197,9196
<9198=9200,9199
<9202=9203
<9203=9331,9308,9204
<9204=9205
<9205=9294,9270,9247,9206
<9206=9243,9230,9207
<9207=9208
<9208=9209
<9209=9226,9210
<9210=9215,9213,9211
<9211=9212
<9213=9214
<9215=9216
<9216=9224,9217
<9217=9222,9220,9218
<9218=9219
<9220=9221
<9222=9223
<9224=9225
<9226=9227
<9227=9229,9228
<9230=9231
<9231=9242,9232
<9232=9240,9233
<9233=9238,9236,9234
<9234=9235
<9236=9237
<9238=9239
<9240=9241
<9243=9244
<9244=9246,9245
<9247=9258,9248
<9248=9249
<9249=9255,9250
<9250=9252,9251
<9252=9254,9253
<9255=9257,9256
<9258=9259
<9259=9265,9260
<9260=9264,9261
<9261=9263,9262
<9265=9267,9266
<9267=9269,9268
<9270=9282,9271
<9271=9272
<9272=9273
<9273=9279,9274
<9274=9278,9275
<9275=9277,9276
<9279=9281,9280
<9282=9283
<9283=9287,9284
<9284=9286,9285
<9287=9291,9288
<9288=9290,9289
<9291=9293,9292
<9294=9295
<9295=9307,9306,9296
<9296=9305,9297
<9297=9303,9298
<9298=9301,9299
<9299=9300
<9301=9302
<9303=9304
<9308=9309
<9309=9310
<9310=9327,9311
<9311=9316,9314,9312
<9312=9313
<9314=9315
<9316=9317
<9317=9325,9318
<9318=9323,9321,9319
<9319=9320
<9321=9322
<9323=9324
<9325=9326
<9327=9328
<9328=9330,9329
<9331=9332
<9332=9338,9333
<9333=9335,9334
<9335=9337,9336
<9338=9340,9339
<9340=9342,9341
<9356=9359,9358,9357
<9359=9360
<9360=9361
<9361=9363,9362
<9363=9364
<9364=9366,9365
<9371=9377,9376,9372
<9372=9373
<9373=9375,9374
<9377=9378
<9378=9379
<9379=9383,9380
<9380=9381
<9381=9382
<9383=9384
<9384=9386,9385
<9392=9395,9394,9393
<9395=9396
<9396=9397
<9397=9399,9398
<9399=9400
<9400=9402,9401
<9408=9414,9413,9409
<9409=9410
<9410=9412,9411
<9414=9419,9415
<9415=9416
<9416=9418,9417
<9419=9425,9420
<9420=9421
<9421=9423,9422
<9423=9424
<9425=9426
<9426=9430,9427
<9427=9429,9428
<9430=9437,9431
<9431=9433,9432
<9433=9434
<9434=9436,9435
<9447=9450,9449,9448
<9450=9463,9451
<9451=9452
<9452=9459,9453
<9453=9455,9454
<9455=9456
<9456=9458,9457
<9459=9461,9460
<9461=9462
<9463=9466,9464
<9464=9465
<9466=9467
<9467=9469,9468
<9469=9470
<9470=9472,9471
<9480=9486,9485,9481
<9481=9482
<9482=9484,9483
<9486=9624,9610,9577,9559,9534,9489,9487
<9487=9488
<9489=9516,9514,9490
<9490=9491
<9491=9492
<9492=9500,9493
<9493=9496,9494
<9494=9495
<9496=9497
<9497=9499,9498
<9500=9501
<9501=9509,9502
<9502=9504,9503
<9504=9506,9505
<9506=9508,9507
<9509=9511,9510
<9511=9513,9512
<9514=9515
<9516=9517
<9517=9527,9518
<9518=9520,9519
<9520=9522,9521
<9522=9524,9523
<9524=9526,9525
<9527=9533,9528
<9528=9530,9529
<9530=9532,9531
<9534=9542,9535
<9535=9538,9536
<9536=9537
<9538=9539
<9539=9541,9540
<9542=9543
<9543=9558,9544
<9544=9555,9545
<9545=9551,9546
<9546=9549,9547
<9547=9548
<9549=9550
<9551=9552
<9552=9554,9553
<9555=9557,9556
<9559=9560
<9560=9576,9575,9561
<9561=9574,9562
<9562=9568,9563
<9563=9566,9564
<9564=9565
<9566=9567
<9568=9569
<9569=9571,9570
<9571=9573,9572
<9577=9580,9578
<9578=9579
<9580=9581
<9581=9605,9582
<9582=9596,9583
<9583=9591,9584
<9584=9586,9585
<9586=9588,9587
<9588=9590,9589
<9591=9593,9592
<9593=9595,9594
<9596=9598,9597
<9598=9600,9599
<9600=9602,9601
<9602=9604,9603
<9605=9607,9606
<9607=9609,9608
<9610=9615,9611
<9611=9612
<9612=9614,9613
<9615=9616
<9616=9623,9617
<9617=9619,9618
<9619=9620
<9620=9622,9621
<9624=9625
<9625=9630,9629,9626
<9626=9628,9627
<9657=9672,9671,9658
<9658=9668,9665,9662,9659
<9659=9661,9660
<9662=9664,9663
<9665=9667,9666
<9668=9670,9669
<9672=9673
<9673=9716,9674
<9674=9712,9700,9694,9685,9681,9675
<9675=9676
<9676=9678,9677
<9678=9680,9679
<9681=9682
<9682=9684,9683
<9685=9686
<9686=9692,9687
<9687=9690,9688
<9688=9689
<9690=9691
<9692=9693
<9694=9695
<9695=9697,9696
<9697=9699,9698
<9700=9708,9701
<9701=9702
<9702=9703
<9703=9707,9704
<9704=9706,9705
<9708=9709
<9709=9711,9710
<9712=9713
<9713=9715,9714
<9716=9717
<9717=9724,9718
<9718=9720,9719
<9720=9721
<9721=9723,9722
<9741=9747,9746,9742
<9742=9743
<9743=9745,9744
<9747=9748
<9748=9749
<9749=9751,9750
<9757=9760,9759,9758
<9760=9761
<9761=9762
<9767=9773,9772,9768
<9768=9769
<9769=9771,9770
<9778=9787,9786,9779
<9779=9783,9780
<9780=9782,9781
<9783=9785,9784
<9793=9805,9804,9794
<9794=9801,9798,9795
<9795=9797,9796
<9798=9800,9799
<9801=9803,9802
<9805=9811,9806
<9806=9807
<9807=9809,9808
<9809=9810
<9811=9812
<9812=9824,9813
<9813=9822,9820,9818,9816,9814
<9814=9815
<9816=9817
<9818=9819
<9820=9821
<9822=9823
<9824=9825
<9825=9827,9826
<9837=9840,9839,9838
<9840=9841
<9841=9842
<9842=9844,9843
<9844=9845
<9850=9859,9858,9851
<9851=9855,9852
<9852=9854,9853
<9855=9857,9856
<9859=9899,9882,9860
<9860=9861
<9861=9868,9862
<9862=9866,9863
<9863=9864
<9864=9865
<9866=9867
<9868=9870,9869
<9870=9871
<9871=9873,9872
<9873=9877,9874
<9874=9876,9875
<9877=9879,9878
<9879=9881,9880
<9882=9893,9883
<9883=9886,9884
<9884=9885
<9886=9887
<9887=9891,9888
<9888=9889
<9889=9890
<9891=9892
<9893=9894
<9894=9898,9895
<9895=9897,9896
<9899=9925,9900
<9900=9921,9915,9903,9901
<9901=9902
<9903=9904
<9904=9913,9905
<9905=9906
<9906=9907
<9907=9909,9908
<9909=9910
<9910=9912,9911
<9913=9914
<9915=9916
<9916=9920,9917
<9917=9919,9918
<9921=9922
<9922=9924,9923
<9925=9926
<9926=9935,9927
<9927=9934,9928
<9928=9930,9929
<9930=9931
<9931=9933,9932
<9935=9937,9936
<9958=9964,9963,9959
<9959=9960
<9960=9962,9961
<9964=9965
<9965=9966
<9966=9968,9967
<9974=9977,9976,9975
<9977=9978
<9978=9979
<9984=9996,9995,9985
<9985=9992,9989,9986
<9986=9988,9987
<9989=9991,9990
<9992=9994,9993
<9996=10160,10001,9997
<9997=9998
<9998=10000,9999
<10001=10156,10112,10002
<10002=10003
<10003=10103,10096,10095,10094,10093,10092,10014,10004
<10004=10012,10005
<10005=10006
<10006=10007
<10007=10009,10008
<10009=10011,10010
<10012=10013
<10014=10083,10015
<10015=10064,10016
<10016=10046,10017
<10017=10027,10018
<10018=10023,10019
<10019=10020
<10020=10022,10021
<10023=10024
<10024=10026,10025
<10027=10028
<10028=10038,10029
<10029=10035,10030
<10030=10034,10031
<10031=10033,10032
<10035=10037,10036
<10038=10045,10039
<10039=10043,10040
<10040=10041
<10041=10042
<10043=10044
<10046=10047
<10047=10063,10062,10048
<10048=10061,10049
<10049=10051,10050
<10051=10052
<10052=10054,10053
<10054=10058,10055
<10055=10057,10056
<10058=10060,10059
<10064=10065
<10065=10080,10066
<10066=10072,10067
<10067=10069,10068
<10069=10071,10070
<10072=10074,10073
<10074=10076,10075
<10076=10077
<10077=10079,10078
<10080=10082,10081
<10083=10084
<10084=10091,10090,10085
<10085=10089,10086
<10086=10088,10087
<10096=10097
<10097=10102,10101,10098
<10098=10100,10099
<10103=10104
<10104=10111,10110,10105
<10105=10109,10106
<10106=10108,10107
<10112=10139,10113
<10113=10125,10114
<10114=10115
<10115=10116
<10116=10122,10117
<10117=10119,10118
<10119=10121,10120
<10122=10124,10123
<10125=10126
<10126=10133,10127
<10127=10131,10128
<10128=10129
<10129=10130
<10131=10132
<10133=10135,10134
<10135=10136
<10136=10138,10137
<10139=10140
<10140=10155,10154,10141
<10141=10153,10142
<10142=10146,10143
<10143=10145,10144
<10146=10148,10147
<10148=10150,10149
<10150=10152,10151
<10156=10157
<10157=10159,10158
<10160=10161
<10161=10163,10162
<10163=10165,10164
<10202=10214,10213,10203
<10203=10210,10207,10204
<10204=10206,10205
<10207=10209,10208
<10210=10212,10211
<10214=10230,10219,10215
<10215=10216
<10216=10218,10217
<10219=10220
<10220=10226,10221
<10221=10222
<10222=10223
<10223=10225,10224
<10226=10227
<10227=10229,10228
<10230=10231
<10231=10240,10239,10232
<10232=10238,10233
<10233=10237,10234
<10234=10236,10235
<10252=10267,10266,10253
<10253=10263,10260,10257,10254
<10254=10256,10255
<10257=10259,10258
<10260=10262,10261
<10263=10265,10264
<10267=10323,10283,10272,10268
<10268=10269
<10269=10271,10270
<10272=10273
<10273=10279,10274
<10274=10275
<10275=10276
<10276=10278,10277
<10279=10280
<10280=10282,10281
<10283=10319,10302,10284
<10284=10285
<10285=10286
<10286=10301,10287
<10287=10299,10288
<10288=10295,10289
<10289=10290
<10290=10294,10291
<10291=10293,10292
<10295=10296
<10296=10298,10297
<10299=10300
<10302=10303
<10303=10318,10304
<10304=10316,10305
<10305=10310,10306
<10306=10307
<10307=10309,10308
<10310=10311
<10311=10315,10312
<10312=10314,10313
<10316=10317
<10319=10320
<10320=10322,10321
<10323=10324
<10324=10333,10332,10325
<10325=10331,10326
<10326=10330,10327
<10327=10329,10328
<10349=10361,10360,10350
<10350=10357,10354,10351
<10351=10353,10352
<10354=10356,10355
<10357=10359,10358
<10361=10373,10362
<10362=10363
<10363=10371,10364
<10364=10369,10367,10365
<10365=10366
<10367=10368
<10369=10370
<10371=10372
<10373=10374
<10374=10411,10410,10375
<10375=10393,10376
<10376=10380,10377
<10377=10379,10378
<10380=10382,10381
<10382=10391,10383
<10383=10384
<10384=10385
<10385=10389,10386
<10386=10387
<10387=10388
<10389=10390
<10391=10392
<10393=10397,10394
<10394=10396,10395
<10397=10399,10398
<10399=10408,10400
<10400=10401
<10401=10402
<10402=10406,10403
<10403=10404
<10404=10405
<10406=10407
<10408=10409
<10421=10436,10435,10422
<10422=10432,10429,10426,10423
<10423=10425,10424
<10426=10428,10427
<10429=10431,10430
<10432=10434,10433
<10436=10450,10437
<10437=10438
<10438=10448,10439
<10439=10446,10444,10442,10440
<10440=10441
<10442=10443
<10444=10445
<10446=10447
<10448=10449
<10450=10451
<10451=10488,10487,10452
<10452=10470,10453
<10453=10457,10454
<10454=10456,10455
<10457=10459,10458
<10459=10468,10460
<10460=10461
<10461=10462
<10462=10466,10463
<10463=10464
<10464=10465
<10466=10467
<10468=10469
<10470=10474,10471
<10471=10473,10472
<10474=10476,10475
<10476=10485,10477
<10477=10478
<10478=10479
<10479=10483,10480
<10480=10481
<10481=10482
<10483=10484
<10485=10486
<10499=10511,10510,10500
<10500=10507,10504,10501
<10501=10503,10502
<10504=10506,10505
<10507=10509,10508
<10511=10527,10512
<10512=10513
<10513=10525,10514
<10514=10519,10517,10515
<10515=10516
<10517=10518
<10519=10520
<10520=10522,10521
<10522=10524,10523
<10525=10526
<10527=10529,10528
<10529=10530
<10530=10534,10531
<10531=10533,10532
<10547=10562,10561,10548
<10548=10558,10555,10552,10549
<10549=10551,10550
<10552=10554,10553
<10555=10557,10556
<10558=10560,10559
<10562=10580,10563
<10563=10564
<10564=10578,10565
<10565=10572,10570,10568,10566
<10566=10567
<10568=10569
<10570=10571
<10572=10573
<10573=10575,10574
<10575=10577,10576
<10578=10579
<10580=10582,10581
<10582=10583
<10583=10587,10584
<10584=10586,10585
<10601=10604,10603,10602
<10604=10607,10605
<10605=10606
<10607=10610,10608
<10608=10609
<10610=10611
<10611=10613,10612
<10613=10614
<10614=10616,10615
<10623=10638,10637,10624
<10624=10634,10631,10628,10625
<10625=10627,10626
<10628=10630,10629
<10631=10633,10632
<10634=10636,10635
<10638=10694,10654,10643,10639
<10639=10640
<10640=10642,10641
<10643=10644
<10644=10650,10645
<10645=10646
<10646=10647
<10647=10649,10648
<10650=10651
<10651=10653,10652
<10654=10690,10673,10655
<10655=10656
<10656=10657
<10657=10672,10658
<10658=10670,10659
<10659=10666,10660
<10660=10661
<10661=10665,10662
<10662=10664,10663
<10666=10667
<10667=10669,10668
<10670=10671
<10673=10674
<10674=10689,10675
<10675=10687,10676
<10676=10681,10677
<10677=10678
<10678=10680,10679
<10681=10682
<10682=10686,10683
<10683=10685,10684
<10687=10688
<10690=10691
<10691=10693,10692
<10694=10695
<10695=10706,10705,10696
<10696=10704,10697
<10697=10701,10698
<10698=10700,10699
<10701=10703,10702
<10724=10730,10729,10725
<10725=10726
<10726=10728,10727
<10730=10731
<10731=10861,10732
<10732=10859,10747,10746,10744,10734,10733
<10734=10735
<10735=10736
<10736=10742,10737
<10737=10738
<10738=10739
<10739=10741,10740
<10742=10743
<10744=10745
<10747=10813,10808,10801,10780,10748
<10748=10778,10749
<10749=10769,10760,10754,10750
<10750=10751
<10751=10753,10752
<10754=10755
<10755=10757,10756
<10757=10759,10758
<10760=10761
<10761=10765,10762
<10762=10763
<10763=10764
<10765=10766
<10766=10768,10767
<10769=10770
<10770=10774,10771
<10771=10772
<10772=10773
<10774=10775
<10775=10777,10776
<10778=10779
<10780=10797,10781
<10781=10786,10782
<10782=10783
<10783=10785,10784
<10786=10787
<10787=10791,10788
<10788=10789
<10789=10790
<10791=10792
<10792=10794,10793
<10794=10796,10795
<10797=10798
<10798=10800,10799
<10801=10802
<10802=10806,10803
<10803=10804
<10804=10805
<10806=10807
<10808=10809
<10809=10811,10810
<10811=10812
<10813=10852,10823,10814
<10814=10815
<10815=10816
<10816=10817
<10817=10821,10818
<10818=10819
<10819=10820
<10821=10822
<10823=10824
<10824=10843,10825
<10825=10826
<10826=10841,10827
<10827=10839,10828
<10828=10829
<10829=10831,10830
<10831=10838,10832
<10832=10834,10833
<10834=10836,10835
<10836=10837
<10839=10840
<10841=10842
<10843=10844
<10844=10851,10845
<10845=10847,10846
<10847=10848
<10848=10850,10849
<10852=10853
<10853=10858,10854
<10854=10856,10855
<10856=10857
<10859=10860
<10861=10862
<10882=10885,10884,10883
<10885=10886
<10886=10887
<10887=10891,10888
<10888=10890,10889
<10891=10895,10892
<10892=10893
<10893=10894
<10895=10896
<10903=10909,10908,10904
<10904=10905
<10905=10907,10906
<10909=11091,11087,11082,11073,11068,10910
<10910=11064,10911
<10911=11063,11062,11061,11059,11050,11042,11029,11003,10994,10977,10960,10943,10928,10912
<10912=10913
<10913=10919,10914
<10914=10917,10915
<10915=10916
<10917=10918
<10919=10920
<10920=10922,10921
<10922=10924,10923
<10924=10925
<10925=10927,10926
<10928=10929
<10929=10937,10930
<10930=10931
<10931=10932
<10932=10936,10933
<10933=10935,10934
<10937=10938
<10938=10940,10939
<10940=10942,10941
<10943=10944
<10944=10950,10945
<10945=10948,10946
<10946=10947
<10948=10949
<10950=10951
<10951=10953,10952
<10953=10955,10954
<10955=10957,10956
<10957=10959,10958
<10960=10961
<10961=10967,10962
<10962=10965,10963
<10963=10964
<10965=10966
<10967=10968
<10968=10970,10969
<10970=10972,10971
<10972=10974,10973
<10974=10976,10975
<10977=10978
<10978=10984,10979
<10979=10982,10980
<10980=10981
<10982=10983
<10984=10985
<10985=10987,10986
<10987=10989,10988
<10989=10991,10990
<10991=10993,10992
<10994=10995
<10995=10997,10996
<10997=10998
<10998=11000,10999
<11000=11002,11001
<11003=11004
<11004=11023,11005
<11005=11014,11012,11010,11008,11006
<11006=11007
<11008=11009
<11010=11011
<11012=11013
<11014=11015
<11015=11021,11016
<11016=11019,11017
<11017=11018
<11019=11020
<11021=11022
<11023=11024
<11024=11026,11025
<11026=11028,11027
<11029=11030
<11030=11039,11031
<11031=11037,11032
<11032=11035,11033
<11033=11034
<11035=11036
<11037=11038
<11039=11041,11040
<11042=11043
<11043=11047,11044
<11044=11046,11045
<11047=11049,11048
<11050=11051
<11051=11055,11052
<11052=11053
<11053=11054
<11055=11056
<11056=11058,11057
<11059=11060
<11064=11065
<11065=11067,11066
<11068=11069
<11069=11071,11070
<11071=11072
<11073=11074
<11074=11078,11075
<11075=11076
<11076=11077
<11078=11079
<11079=11081,11080
<11082=11083
<11083=11085,11084
<11085=11086
<11087=11088
<11088=11090,11089
<11091=11092
<11092=11094,11093
<11119=11125,11124,11120
<11120=11121
<11121=11123,11122
<11125=11126
<11126=11161,11127
<11127=11159,11151,11150,11148,11140,11139,11137,11129,11128
<11129=11130
<11130=11131
<11131=11135,11132
<11132=11133
<11133=11134
<11135=11136
<11137=11138
<11140=11141
<11141=11142
<11142=11146,11143
<11143=11144
<11144=11145
<11146=11147
<11148=11149
<11151=11152
<11152=11153
<11153=11157,11154
<11154=11155
<11155=11156
<11157=11158
<11159=11160
<11161=11162
<11169=11172,11171,11170
<11172=11173
<11173=11229,11174
<11174=11225,11218,11209,11200,11190,11186,11175
<11175=11176
<11176=11182,11177
<11177=11180,11178
<11178=11179
<11180=11181
<11182=11183
<11183=11185,11184
<11186=11187
<11187=11189,11188
<11190=11191
<11191=11197,11192
<11192=11194,11193
<11194=11196,11195
<11197=11199,11198
<11200=11201
<11201=11205,11202
<11202=11203
<11203=11204
<11205=11206
<11206=11208,11207
<11209=11210
<11210=11214,11211
<11211=11212
<11212=11213
<11214=11215
<11215=11217,11216
<11218=11219
<11219=11223,11220
<11220=11221
<11221=11222
<11223=11224
<11225=11226
<11226=11228,11227
<11229=11230
<11242=11245,11244,11243
<11245=11246
<11246=11247
<11247=11249,11248
<11249=11250
<11250=11252,11251
<11258=11261,11260,11259
<11261=11262
<11262=11263
<11268=11274,11273,11269
<11269=11270
<11270=11272,11271
<11274=11275
<11275=11276
<11276=11278,11277
<11284=11287,11286,11285
<11287=11290,11288
<11288=11289
<11290=11311,11309,11304,11291
<11291=11292
<11292=11295,11293
<11293=11294
<11295=11296
<11296=11300,11297
<11297=11298
<11298=11299
<11300=11301
<11301=11303,11302
<11304=11308,11305
<11305=11307,11306
<11309=11310
<11311=11312
<11312=11313
<11313=11325,11324,11314
<11314=11323,11315
<11315=11319,11316
<11316=11317
<11317=11318
<11319=11320
<11320=11322,11321
<11339=11345,11344,11340
<11340=11341
<11341=11343,11342
<11345=11348,11346
<11346=11347
<11348=11434,11403,11349
<11349=11350
<11350=11391,11351
<11351=11352
<11352=11387,11385,11353
<11353=11354
<11354=11381,11369,11357,11355
<11355=11356
<11357=11358
<11358=11367,11359
<11359=11360
<11360=11361
<11361=11363,11362
<11363=11364
<11364=11366,11365
<11367=11368
<11369=11370
<11370=11380,11371
<11371=11379,11372
<11372=11378,11373
<11373=11377,11374
<11374=11376,11375
<11381=11382
<11382=11384,11383
<11385=11386
<11387=11388
<11388=11390,11389
<11391=11392
<11392=11400,11393
<11393=11397,11394
<11394=11396,11395
<11397=11399,11398
<11400=11402,11401
<11403=11430,11418,11406,11404
<11404=11405
<11406=11407
<11407=11416,11408
<11408=11409
<11409=11410
<11410=11412,11411
<11412=11413
<11413=11415,11414
<11416=11417
<11418=11419
<11419=11429,11420
<11420=11428,11421
<11421=11427,11422
<11422=11426,11423
<11423=11425,11424
<11430=11431
<11431=11433,11432
<11434=11435
<11435=11443,11436
<11436=11440,11437
<11437=11439,11438
<11440=11442,11441
<11443=11445,11444
<11459=11465,11464,11460
<11460=11461
<11461=11463,11462
<11465=11468,11466
<11466=11467
<11468=11654,11643,11640,11469
<11469=11624,11470
<11470=11613,11471
<11471=11600,11472
<11472=11596,11473
<11473=11474
<11474=11567,11475
<11475=11549,11476
<11476=11547,11477
<11477=11518,11505,11480,11478
<11478=11479
<11480=11503,11481
<11481=11491,11482
<11482=11483
<11483=11485,11484
<11485=11486
<11486=11488,11487
<11488=11490,11489
<11491=11492
<11492=11496,11493
<11493=11495,11494
<11496=11498,11497
<11498=11500,11499
<11500=11502,11501
<11503=11504
<11505=11506
<11506=11517,11507
<11507=11509,11508
<11509=11513,11510
<11510=11511
<11511=11512
<11513=11514
<11514=11516,11515
<11518=11545,11519
<11519=11533,11520
<11520=11521
<11521=11527,11522
<11522=11523
<11523=11524
<11524=11526,11525
<11527=11528
<11528=11530,11529
<11530=11532,11531
<11533=11534
<11534=11538,11535
<11535=11537,11536
<11538=11540,11539
<11540=11542,11541
<11542=11544,11543
<11545=11546
<11547=11548
<11549=11550
<11550=11566,11565,11551
<11551=11564,11552
<11552=11558,11553
<11553=11554
<11554=11555
<11555=11557,11556
<11558=11559
<11559=11561,11560
<11561=11563,11562
<11567=11568
<11568=11588,11569
<11569=11578,11570
<11570=11574,11571
<11571=11572
<11572=11573
<11574=11575
<11575=11577,11576
<11578=11587,11579
<11579=11581,11580
<11581=11582
<11582=11584,11583
<11584=11586,11585
<11588=11590,11589
<11590=11591
<11591=11593,11592
<11593=11595,11594
<11596=11597
<11597=11599,11598
<11600=11601
<11601=11612,11611,11602
<11602=11610,11603
<11603=11609,11604
<11604=11606,11605
<11606=11608,11607
<11613=11614
<11614=11623,11615
<11615=11617,11616
<11617=11618
<11618=11620,11619
<11620=11622,11621
<11624=11625
<11625=11639,11638,11626
<11626=11637,11627
<11627=11631,11628
<11628=11629
<11629=11630
<11631=11632
<11632=11634,11633
<11634=11636,11635
<11640=11642,11641
<11643=11644
<11644=11653,11645
<11645=11647,11646
<11647=11648
<11648=11650,11649
<11650=11652,11651
<11654=11655
<11655=11656
<11656=11661,11660,11657
<11657=11659,11658
<11705=11708,11707,11706
<11708=11709
<11709=11710
<11710=11712,11711
<11718=11727,11726,11719
<11719=11723,11720
<11720=11722,11721
<11723=11725,11724
<11727=11728
<11728=11809,11798,11795,11729
<11729=11730
<11730=11787,11772,11769,11731
<11731=11743,11732
<11732=11733
<11733=11739,11734
<11734=11737,11735
<11735=11736
<11737=11738
<11739=11740
<11740=11742,11741
<11743=11744
<11744=11768,11767,11745
<11745=11766,11746
<11746=11758,11747
<11747=11748
<11748=11749
<11749=11751,11750
<11751=11753,11752
<11753=11755,11754
<11755=11757,11756
<11758=11759
<11759=11761,11760
<11761=11763,11762
<11763=11765,11764
<11769=11771,11770
<11772=11773
<11773=11786,11774
<11774=11776,11775
<11776=11777
<11777=11779,11778
<11779=11781,11780
<11781=11783,11782
<11783=11785,11784
<11787=11788
<11788=11789
<11789=11794,11793,11790
<11790=11792,11791
<11795=11797,11796
<11798=11799
<11799=11808,11800
<11800=11802,11801
<11802=11803
<11803=11805,11804
<11805=11807,11806
<11809=11810
<11810=11811
<11811=11816,11815,11812
<11812=11814,11813
<11843=11849,11848,11844
<11844=11845
<11845=11847,11846
<11849=12208,12199,12190,12183,12179,12163,12148,12139,12125,12095,12080,12058,12029,12001,11992,11973,11852,11850
<11850=11851
<11852=11971,11853
<11853=11905,11899,11865,11854
<11854=11855
<11855=11863,11856
<11856=11857
<11857=11858
<11858=11862,11859
<11859=11861,11860
<11863=11864
<11865=11895,11866
<11866=11891,11887,11867
<11867=11885,11876,11868
<11868=11869
<11869=11870
<11870=11874,11871
<11871=11872
<11872=11873
<11874=11875
<11876=11877
<11877=11883,11878
<11878=11881,11879
<11879=11880
<11881=11882
<11883=11884
<11885=11886
<11887=11888
<11888=11890,11889
<11891=11892
<11892=11894,11893
<11895=11896
<11896=11898,11897
<11899=11900
<11900=11904,11901
<11901=11903,11902
<11905=11965,11906
<11906=11907
<11907=11961,11935,11908
<11908=11909
<11909=11910
<11910=11929,11911
<11911=11918,11916,11914,11912
<11912=11913
<11914=11915
<11916=11917
<11918=11919
<11919=11927,11920
<11920=11925,11923,11921
<11921=11922
<11923=11924
<11925=11926
<11927=11928
<11929=11930
<11930=11932,11931
<11932=11934,11933
<11935=11936
<11936=11955,11937
<11937=11944,11942,11940,11938
<11938=11939
<11940=11941
<11942=11943
<11944=11945
<11945=11953,11946
<11946=11951,11949,11947
<11947=11948
<11949=11950
<11951=11952
<11953=11954
<11955=11956
<11956=11958,11957
<11958=11960,11959
<11961=11962
<11962=11964,11963
<11965=11966
<11966=11968,11967
<11968=11970,11969
<11971=11972
<11973=11988,11974
<11974=11975
<11975=11987,11976
<11976=11984,11977
<11977=11983,11978
<11978=11980,11979
<11980=11982,11981
<11984=11986,11985
<11988=11989
<11989=11991,11990
<11992=11993
<11993=12000,11999,11994
<11994=11998,11995
<11995=11997,11996
<12001=12023,12002
<12002=12003
<12003=12016,12004
<12004=12005
<12005=12006
<12006=12014,12007
<12007=12012,12008
<12008=12009
<12009=12011,12010
<12012=12013
<12014=12015
<12016=12017
<12017=12019,12018
<12019=12021,12020
<12021=12022
<12023=12024
<12024=12026,12025
<12026=12028,12027
<12029=12052,12030
<12030=12031
<12031=12045,12035,12032
<12032=12033
<12033=12034
<12035=12036
<12036=12037
<12037=12041,12038
<12038=12039
<12039=12040
<12041=12042
<12042=12044,12043
<12045=12046
<12046=12048,12047
<12048=12049
<12049=12051,12050
<12052=12053
<12053=12055,12054
<12055=12057,12056
<12058=12067,12059
<12059=12060
<12060=12061
<12061=12065,12062
<12062=12063
<12063=12064
<12065=12066
<12067=12068
<12068=12075,12069
<12069=12073,12070
<12070=12071
<12071=12072
<12073=12074
<12075=12077,12076
<12077=12079,12078
<12080=12087,12081
<12081=12082
<12082=12083
<12083=12085,12084
<12085=12086
<12087=12088
<12088=12090,12089
<12090=12092,12091
<12092=12094,12093
<12095=12119,12096
<12096=12112,12097
<12097=12098
<12098=12102,12099
<12099=12100
<12100=12101
<12102=12103
<12103=12105,12104
<12105=12107,12106
<12107=12109,12108
<12109=12111,12110
<12112=12113
<12113=12117,12114
<12114=12115
<12115=12116
<12117=12118
<12119=12120
<12120=12122,12121
<12122=12124,12123
<12125=12135,12126
<12126=12127
<12127=12131,12128
<12128=12129
<12129=12130
<12131=12132
<12132=12134,12133
<12135=12136
<12136=12138,12137
<12139=12140
<12140=12142,12141
<12142=12143
<12143=12145,12144
<12145=12147,12146
<12148=12149
<12149=12160,12150
<12150=12158,12151
<12151=12156,12154,12152
<12152=12153
<12154=12155
<12156=12157
<12158=12159
<12160=12162,12161
<12163=12166,12164
<12164=12165
<12166=12167
<12167=12178,12168
<12168=12172,12169
<12169=12171,12170
<12172=12174,12173
<12174=12175
<12175=12177,12176
<12179=12180
<12180=12182,12181
<12183=12184
<12184=12188,12185
<12185=12186
<12186=12187
<12188=12189
<12190=12194,12191
<12191=12192
<12192=12193
<12194=12195
<12195=12197,12196
<12197=12198
<12199=12202,12200
<12200=12201
<12202=12203
<12203=12205,12204
<12205=12207,12206
<12208=12209
<12209=12214,12213,12210
<12210=12212,12211
<12266=12269,12268,12267
<12269=12298,12289,12279,12270
<12270=12271
<12271=12277,12272
<12272=12275,12273
<12273=12274
<12275=12276
<12277=12278
<12279=12280
<12280=12288,12281
<12281=12283,12282
<12283=12285,12284
<12285=12287,12286
<12289=12290
<12290=12294,12291
<12291=12292
<12292=12293
<12294=12295
<12295=12297,12296
<12298=12299
<12299=12310,12309,12300
<12300=12308,12301
<12301=12303,12302
<12303=12305,12304
<12305=12307,12306
<12324=12339,12338,12325
<12325=12335,12332,12329,12326
<12326=12328,12327
<12329=12331,12330
<12332=12334,12333
<12335=12337,12336
<12339=12479,12472,12468,12467,12466,12465,12464,12373,12340
<12340=12361,12341
<12341=12357,12353,12342
<12342=12343
<12343=12352,12344
<12344=12351,12345
<12345=12347,12346
<12347=12349,12348
<12349=12350
<12353=12354
<12354=12356,12355
<12357=12358
<12358=12360,12359
<12361=12362
<12362=12368,12363
<12363=12365,12364
<12365=12367,12366
<12368=12370,12369
<12370=12372,12371
<12373=12455,12374
<12374=12430,12375
<12375=12420,12376
<12376=12402,12377
<12377=12386,12382,12378
<12378=12379
<12379=12381,12380
<12382=12383
<12383=12385,12384
<12386=12387
<12387=12398,12388
<12388=12389
<12389=12390
<12390=12397,12391
<12391=12393,12392
<12393=12394
<12394=12396,12395
<12398=12399
<12399=12401,12400
<12402=12403
<12403=12412,12404
<12404=12411,12405
<12405=12407,12406
<12407=12408
<12408=12410,12409
<12412=12416,12413
<12413=12414
<12414=12415
<12416=12417
<12417=12419,12418
<12420=12421
<12421=12429,12422
<12422=12426,12423
<12423=12425,12424
<12426=12428,12427
<12430=12431
<12431=12452,12432
<12432=12449,12433
<12433=12444,12434
<12434=12443,12435
<12435=12439,12436
<12436=12437
<12437=12438
<12439=12440
<12440=12442,12441
<12444=12446,12445
<12446=12448,12447
<12449=12451,12450
<12452=12454,12453
<12455=12456
<12456=12463,12462,12457
<12457=12461,12458
<12458=12460,12459
<12468=12469
<12469=12471,12470
<12472=12473
<12473=12478,12477,12474
<12474=12476,12475
<12479=12480
<12480=12482,12481
<12511=12514,12513,12512
<12514=12643,12636,12632,12619,12556,12539,12534,12530,12523,12519,12515
<12515=12516
<12516=12518,12517
<12519=12520
<12520=12522,12521
<12523=12524
<12524=12526,12525
<12526=12527
<12527=12529,12528
<12530=12531
<12531=12533,12532
<12534=12535
<12535=12537,12536
<12537=12538
<12539=12540
<12540=12552,12541
<12541=12548,12542
<12542=12543
<12543=12545,12544
<12545=12547,12546
<12548=12549
<12549=12551,12550
<12552=12553
<12553=12555,12554
<12556=12600,12557
<12557=12562,12558
<12558=12559
<12559=12561,12560
<12562=12590,12577,12563
<12563=12564
<12564=12565
<12565=12576,12566
<12566=12574,12567
<12567=12572,12570,12568
<12568=12569
<12570=12571
<12572=12573
<12574=12575
<12577=12578
<12578=12589,12579
<12579=12587,12580
<12580=12585,12583,12581
<12581=12582
<12583=12584
<12585=12586
<12587=12588
<12590=12591
<12591=12593,12592
<12593=12595,12594
<12595=12597,12596
<12597=12599,12598
<12600=12601
<12601=12611,12602
<12602=12604,12603
<12604=12606,12605
<12606=12608,12607
<12608=12610,12609
<12611=12613,12612
<12613=12614
<12614=12616,12615
<12616=12618,12617
<12619=12625,12620
<12620=12621
<12621=12622
<12622=12624,12623
<12625=12626
<12626=12628,12627
<12628=12629
<12629=12631,12630
<12632=12633
<12633=12635,12634
<12636=12637
<12637=12642,12641,12638
<12638=12640,12639
<12643=12644
<12644=12649,12648,12645
<12645=12647,12646
<12681=12696,12695,12682
<12682=12692,12689,12686,12683
<12683=12685,12684
<12686=12688,12687
<12689=12691,12690
<12692=12694,12693
<12696=12871,12870,12869,12868,12867,12866,12864,12855,12846,12833,12827,12814,12805,12788,12771,12754,12743,12731,12722,12713,12697
<12697=12698
<12698=12704,12699
<12699=12702,12700
<12700=12701
<12702=12703
<12704=12705
<12705=12707,12706
<12707=12709,12708
<12709=12710
<12710=12712,12711
<12713=12714
<12714=12718,12715
<12715=12716
<12716=12717
<12718=12719
<12719=12721,12720
<12722=12723
<12723=12727,12724
<12724=12725
<12725=12726
<12727=12728
<12728=12730,12729
<12731=12732
<12732=12738,12733
<12733=12735,12734
<12735=12737,12736
<12738=12740,12739
<12740=12742,12741
<12743=12744
<12744=12748,12745
<12745=12746
<12746=12747
<12748=12749
<12749=12751,12750
<12751=12753,12752
<12754=12755
<12755=12761,12756
<12756=12759,12757
<12757=12758
<12759=12760
<12761=12762
<12762=12764,12763
<12764=12766,12765
<12766=12768,12767
<12768=12770,12769
<12771=12772
<12772=12778,12773
<12773=12776,12774
<12774=12775
<12776=12777
<12778=12779
<12779=12781,12780
<12781=12783,12782
<12783=12785,12784
<12785=12787,12786
<12788=12789
<12789=12795,12790
<12790=12793,12791
<12791=12792
<12793=12794
<12795=12796
<12796=12798,12797
<12798=12800,12799
<12800=12802,12801
<12802=12804,12803
<12805=12806
<12806=12808,12807
<12808=12809
<12809=12811,12810
<12811=12813,12812
<12814=12815
<12815=12821,12816
<12816=12819,12817
<12817=12818
<12819=12820
<12821=12822
<12822=12824,12823
<12824=12826,12825
<12827=12828
<12828=12830,12829
<12830=12832,12831
<12833=12834
<12834=12843,12835
<12835=12841,12836
<12836=12839,12837
<12837=12838
<12839=12840
<12841=12842
<12843=12845,12844
<12846=12847
<12847=12851,12848
<12848=12849
<12849=12850
<12851=12852
<12852=12854,12853
<12855=12856
<12856=12860,12857
<12857=12858
<12858=12859
<12860=12861
<12861=12863,12862
<12864=12865
<12871=12872
<12872=12877,12876,12873
<12873=12875,12874
<12907=12913,12912,12908
<12908=12909
<12909=12911,12910
<12913=12914
<12914=12915
<12915=12919,12916
<12916=12917
<12917=12918
<12919=12920
<12920=12922,12921
<12928=12940,12939,12929
<12929=12936,12933,12930
<12930=12932,12931
<12933=12935,12934
<12936=12938,12937
<12940=13136,13132,13125,12974,12941
<12941=12962,12942
<12942=12958,12954,12943
<12943=12944
<12944=12953,12945
<12945=12952,12946
<12946=12948,12947
<12948=12950,12949
<12950=12951
<12954=12955
<12955=12957,12956
<12958=12959
<12959=12961,12960
<12962=12963
<12963=12969,12964
<12964=12966,12965
<12966=12968,12967
<12969=12971,12970
<12971=12973,12972
<12974=13112,13103,13100,12975
<12975=13089,12976
<12976=13062,12977
<12977=13026,13013,12986,12982,12978
<12978=12979
<12979=12981,12980
<12982=12983
<12983=12985,12984
<12986=13004,12987
<12987=12988
<12988=12989
<12989=13000,12990
<12990=12991
<12991=12992
<12992=12999,12993
<12993=12995,12994
<12995=12996
<12996=12998,12997
<13000=13001
<13001=13003,13002
<13004=13005
<13005=13012,13006
<13006=13008,13007
<13008=13009
<13009=13011,13010
<13013=13014
<13014=13025,13024,13015
<13015=13023,13016
<13016=13020,13017
<13017=13019,13018
<13020=13022,13021
<13026=13054,13045,13042,13027
<13027=13028
<13028=13031,13029
<13029=13030
<13031=13032
<13032=13036,13033
<13033=13035,13034
<13036=13038,13037
<13038=13039
<13039=13041,13040
<13042=13044,13043
<13045=13046
<13046=13053,13047
<13047=13049,13048
<13049=13050
<13050=13052,13051
<13054=13055
<13055=13056
<13056=13061,13060,13057
<13057=13059,13058
<13062=13063
<13063=13083,13064
<13064=13071,13065
<13065=13069,13066
<13066=13067
<13067=13068
<13069=13070
<13071=13073,13072
<13073=13074
<13074=13076,13075
<13076=13080,13077
<13077=13079,13078
<13080=13082,13081
<13083=13085,13084
<13085=13086
<13086=13088,13087
<13089=13090
<13090=13099,13098,13091
<13091=13097,13092
<13092=13096,13093
<13093=13095,13094
<13100=13102,13101
<13103=13104
<13104=13111,13105
<13105=13107,13106
<13107=13108
<13108=13110,13109
<13112=13113
<13113=13114
<13114=13124,13123,13115
<13115=13122,13116
<13116=13118,13117
<13118=13119
<13119=13121,13120
<13125=13126
<13126=13131,13130,13127
<13127=13129,13128
<13132=13133
<13133=13135,13134
<13136=13137
<13137=13141,13138
<13138=13139
<13139=13140
<13141=13142
<13179=13182,13181,13180
<13182=13183
<13183=13198,13184
<13184=13185
<13185=13186
<13186=13192,13187
<13187=13190,13188
<13188=13189
<13190=13191
<13192=13193
<13193=13195,13194
<13195=13197,13196
<13198=13199
<13209=13212,13211,13210
<13212=13273,13217,13213
<13213=13214
<13214=13216,13215
<13217=13271,13218
<13218=13264,13263,13262,13261,13260,13228,13223,13219
<13219=13220
<13220=13222,13221
<13223=13226,13224
<13224=13225
<13226=13227
<13228=13251,13229
<13229=13247,13230
<13230=13231
<13231=13238,13232
<13232=13234,13233
<13234=13235
<13235=13237,13236
<13238=13239
<13239=13241,13240
<13241=13243,13242
<13243=13244
<13244=13246,13245
<13247=13248
<13248=13250,13249
<13251=13252
<13252=13259,13258,13253
<13253=13257,13254
<13254=13256,13255
<13264=13265
<13265=13270,13269,13266
<13266=13268,13267
<13271=13272
<13273=13274
<13274=13279,13278,13275
<13275=13277,13276
<13294=13300,13299,13295
<13295=13296
<13296=13298,13297
<13300=13367,13366,13365,13364,13363,13301
<13301=13354,13302
<13302=13350,13303
<13303=13304
<13304=13341,13305
<13305=13337,13325,13313,13306
<13306=13307
<13307=13309,13308
<13309=13310
<13310=13312,13311
<13313=13314
<13314=13323,13315
<13315=13316
<13316=13317
<13317=13319,13318
<13319=13320
<13320=13322,13321
<13323=13324
<13325=13326
<13326=13336,13327
<13327=13335,13328
<13328=13334,13329
<13329=13333,13330
<13330=13332,13331
<13337=13338
<13338=13340,13339
<13341=13342
<13342=13344,13343
<13344=13346,13345
<13346=13347
<13347=13349,13348
<13350=13351
<13351=13353,13352
<13354=13355
<13355=13362,13361,13356
<13356=13360,13357
<13357=13359,13358
<13367=13368
<13368=13370,13369
<13384=13387,13386,13385
<13387=13388
<13388=13389
<13394=13406,13405,13395
<13395=13402,13399,13396
<13396=13398,13397
<13399=13401,13400
<13402=13404,13403
<13413=13437,13436,13414
<13414=13433,13430,13427,13424,13421,13418,13415
<13415=13417,13416
<13418=13420,13419
<13421=13423,13422
<13424=13426,13425
<13427=13429,13428
<13430=13432,13431
<13433=13435,13434
<13437=13959,13952,13945,13858,13846,13833,13824,13815,13810,13806,13799,13762,13541,13458,13447,13440,13438
<13438=13439
<13440=13443,13441
<13441=13442
<13443=13444
<13444=13446,13445
<13447=13454,13448
<13448=13449
<13449=13451,13450
<13451=13453,13452
<13454=13455
<13455=13457,13456
<13458=13537,13459
<13459=13524,13508,13460
<13460=13506,13470,13461
<13461=13462
<13462=13463
<13463=13469,13464
<13464=13468,13465
<13465=13467,13466
<13470=13496,13471
<13471=13483,13472
<13472=13473
<13473=13477,13474
<13474=13475
<13475=13476
<13477=13478
<13478=13480,13479
<13480=13482,13481
<13483=13484
<13484=13495,13485
<13485=13489,13486
<13486=13487
<13487=13488
<13489=13490
<13490=13492,13491
<13492=13494,13493
<13496=13497
<13497=13503,13498
<13498=13502,13499
<13499=13501,13500
<13503=13505,13504
<13506=13507
<13508=13509
<13509=13520,13510
<13510=13511
<13511=13512
<13512=13519,13513
<13513=13515,13514
<13515=13516
<13516=13518,13517
<13520=13521
<13521=13523,13522
<13524=13525
<13525=13536,13526
<13526=13530,13527
<13527=13529,13528
<13530=13534,13531
<13531=13532
<13532=13533
<13534=13535
<13537=13538
<13538=13540,13539
<13541=13752,13748,13745,13542
<13542=13543
<13543=13735,13731,13728,13544
<13544=13713,13706,13672,13545
<13545=13659,13546
<13546=13547
<13547=13646,13548
<13548=13631,13620,13606,13571,13557,13553,13549
<13549=13550
<13550=13552,13551
<13553=13554
<13554=13556,13555
<13557=13558
<13558=13570,13569,13559
<13559=13568,13560
<13560=13567,13561
<13561=13563,13562
<13563=13564
<13564=13566,13565
<13571=13596,13572
<13572=13592,13573
<13573=13574
<13574=13591,13575
<13575=13589,13576
<13576=13583,13577
<13577=13578
<13578=13580,13579
<13580=13582,13581
<13583=13584
<13584=13586,13585
<13586=13588,13587
<13589=13590
<13592=13593
<13593=13595,13594
<13596=13597
<13597=13601,13598
<13598=13600,13599
<13601=13605,13602
<13602=13604,13603
<13606=13607
<13607=13619,13618,13608
<13608=13617,13609
<13609=13611,13610
<13611=13612
<13612=13614,13613
<13614=13616,13615
<13620=13621
<13621=13630,13629,13622
<13622=13626,13623
<13623=13625,13624
<13626=13628,13627
<13631=13632
<13632=13645,13644,13633
<13633=13639,13634
<13634=13636,13635
<13636=13638,13637
<13639=13641,13640
<13641=13643,13642
<13646=13647
<13647=13653,13648
<13648=13651,13649
<13649=13650
<13651=13652
<13653=13654
<13654=13656,13655
<13656=13658,13657
<13659=13660
<13660=13671,13661
<13661=13665,13662
<13662=13663
<13663=13664
<13665=13666
<13666=13668,13667
<13668=13670,13669
<13672=13678,13673
<13673=13674
<13674=13675
<13675=13677,13676
<13678=13679
<13679=13703,13680
<13680=13700,13681
<13681=13690,13682
<13682=13684,13683
<13684=13685
<13685=13687,13686
<13687=13689,13688
<13690=13692,13691
<13692=13694,13693
<13694=13696,13695
<13696=13697
<13697=13699,13698
<13700=13702,13701
<13703=13705,13704
<13706=13707
<13707=13712,13711,13708
<13708=13710,13709
<13713=13714
<13714=13727,13726,13715
<13715=13721,13716
<13716=13718,13717
<13718=13720,13719
<13721=13723,13722
<13723=13725,13724
<13728=13730,13729
<13731=13732
<13732=13734,13733
<13735=13736
<13736=13737
<13737=13744,13743,13738
<13738=13742,13739
<13739=13741,13740
<13745=13747,13746
<13748=13749
<13749=13751,13750
<13752=13753
<13753=13754
<13754=13761,13760,13755
<13755=13759,13756
<13756=13758,13757
<13762=13763
<13763=13798,13797,13764
<13764=13796,13765
<13765=13794,13766
<13766=13767
<13767=13768
<13768=13792,13769
<13769=13770
<13770=13771
<13771=13782,13772
<13772=13780,13773
<13773=13774
<13774=13775
<13775=13777,13776
<13777=13779,13778
<13780=13781
<13782=13790,13783
<13783=13784
<13784=13785
<13785=13787,13786
<13787=13789,13788
<13790=13791
<13792=13793
<13794=13795
<13799=13800
<13800=13805,13804,13801
<13801=13803,13802
<13806=13807
<13807=13809,13808
<13810=13811
<13811=13814,13813,13812
<13815=13816
<13816=13823,13822,13817
<13817=13821,13818
<13818=13820,13819
<13824=13825
<13825=13832,13831,13826
<13826=13830,13827
<13827=13829,13828
<13833=13842,13834
<13834=13835
<13835=13841,13836
<13836=13840,13837
<13837=13839,13838
<13842=13843
<13843=13845,13844
<13846=13854,13847
<13847=13848
<13848=13853,13849
<13849=13851,13850
<13851=13852
<13854=13855
<13855=13857,13856
<13858=13938,13859
<13859=13934,13860
<13860=13930,13861
<13861=13915,13908,13883,13862
<13862=13872,13863
<13863=13868,13864
<13864=13865
<13865=13867,13866
<13868=13869
<13869=13871,13870
<13872=13873
<13873=13879,13874
<13874=13875
<13875=13876
<13876=13878,13877
<13879=13880
<13880=13882,13881
<13883=13884
<13884=13904,13885
<13885=13886
<13886=13887
<13887=13894,13888
<13888=13890,13889
<13890=13891
<13891=13893,13892
<13894=13896,13895
<13896=13898,13897
<13898=13899
<13899=13901,13900
<13901=13903,13902
<13904=13905
<13905=13907,13906
<13908=13909
<13909=13914,13913,13910
<13910=13912,13911
<13915=13916
<13916=13929,13928,13917
<13917=13927,13918
<13918=13926,13919
<13919=13921,13920
<13921=13923,13922
<13923=13925,13924
<13930=13931
<13931=13933,13932
<13934=13935
<13935=13937,13936
<13938=13939
<13939=13944,13940
<13940=13942,13941
<13942=13943
<13945=13946
<13946=13951,13950,13947
<13947=13949,13948
<13952=13953
<13953=13958,13957,13954
<13954=13956,13955
<13959=13960
<13960=13962,13961
<14033=14048,14047,14034
<14034=14044,14041,14038,14035
<14035=14037,14036
<14038=14040,14039
<14041=14043,14042
<14044=14046,14045
<14048=14079,14071,14062,14049
<14049=14050
<14050=14056,14051
<14051=14054,14052
<14052=14053
<14054=14055
<14056=14057
<14057=14059,14058
<14059=14061,14060
<14062=14063
<14063=14067,14064
<14064=14065
<14065=14066
<14067=14068
<14068=14070,14069
<14071=14072
<14072=14078,14073
<14073=14077,14074
<14074=14076,14075
<14079=14088,14080
<14080=14081
<14081=14082
<14082=14086,14083
<14083=14084
<14084=14085
<14086=14087
<14088=14089
<14102=14108,14107,14103
<14103=14104
<14104=14106,14105
<14108=14109
<14109=14120,14110
<14110=14111
<14111=14112
<14112=14116,14113
<14113=14114
<14114=14115
<14116=14117
<14117=14119,14118
<14120=14121
<14127=14133,14132,14128
<14128=14129
<14129=14131,14130
<14133=14134
<14134=14143,14135
<14135=14136
<14136=14137
<14137=14139,14138
<14139=14140
<14140=14142,14141
<14143=14144
<14150=14159,14158,14151
<14151=14155,14152
<14152=14154,14153
<14155=14157,14156
<14159=14160
<14160=14173,14161
<14161=14162
<14162=14163
<14163=14169,14164
<14164=14167,14165
<14165=14166
<14167=14168
<14169=14170
<14170=14172,14171
<14173=14174
<14181=14184,14183,14182
<14184=14230,14229,14228,14227,14187,14185
<14185=14186
<14187=14218,14188
<14188=14191,14189
<14189=14190
<14191=14192
<14192=14217,14193
<14193=14212,14194
<14194=14209,14195
<14195=14204,14196
<14196=14202,14197
<14197=14198
<14198=14199
<14199=14201,14200
<14202=14203
<14204=14206,14205
<14206=14208,14207
<14209=14211,14210
<14212=14214,14213
<14214=14216,14215
<14218=14219
<14219=14226,14225,14220
<14220=14224,14221
<14221=14223,14222
<14245=14248,14247,14246
<14248=14249
<14249=14250
<14250=14268,14251
<14251=14260,14252
<14252=14253
<14253=14257,14254
<14254=14256,14255
<14257=14259,14258
<14260=14261
<14261=14265,14262
<14262=14264,14263
<14265=14267,14266
<14268=14269
