>5	FunctionDef	Quad 
>6	ParameterList	const std 
>7	Parameter	 
>8	Identifier	pos
>9	ParameterType	const Vector &
>10	Parameter	 
>11	Identifier	tex
>12	ParameterType	const std 
>13	CompoundStatement	 
>14	ExpressionStatement	 
>15	CallExpression	setTexture ( tex )
>16	ArgumentList	tex
>17	Argument	tex
>18	Identifier	tex
>19	Callee	setTexture
>20	Identifier	setTexture
>21	ExpressionStatement	 
>22	AssignmentExpr	position = pos
>23	Identifier	pos
>24	Identifier	position
>25	ExpressionStatement	 
>26	CallExpression	initQuad ( )
>27	ArgumentList	 
>28	Callee	initQuad
>29	Identifier	initQuad
>36	FunctionDef	Quad 
>37	ParameterList	int x , int y , float dgox , float dgoy , float dgmx , float dgmy , float dgtm , bool dgo
>38	Parameter	 
>39	Identifier	dgo
>40	ParameterType	bool
>41	Parameter	 
>42	Identifier	dgtm
>43	ParameterType	float
>44	Parameter	 
>45	Identifier	dgmy
>46	ParameterType	float
>47	Parameter	 
>48	Identifier	dgmx
>49	ParameterType	float
>50	Parameter	 
>51	Identifier	dgoy
>52	ParameterType	float
>53	Parameter	 
>54	Identifier	dgox
>55	ParameterType	float
>56	Parameter	 
>57	Identifier	y
>58	ParameterType	int
>59	Parameter	 
>60	Identifier	x
>61	ParameterType	int
>62	ReturnType	void
>63	CompoundStatement	 
>64	IfStatement	if ( x == 0 || y == 0 )
>65	ElseStatement	else
>66	CompoundStatement	 
>67	ExpressionStatement	 
>68	AssignmentExpr	doUpdateGrid = true
>69	Identifier	true
>70	Identifier	doUpdateGrid
>71	ExpressionStatement	 
>72	AssignmentExpr	gridTimer = 0
>73	PrimaryExpression	0
>74	Identifier	gridTimer
>75	ExpressionStatement	 
>76	CallExpression	createGrid ( x , y )
>77	ArgumentList	x
>78	Argument	y
>79	Identifier	y
>80	Argument	x
>81	Identifier	x
>82	Callee	createGrid
>83	Identifier	createGrid
>84	ExpressionStatement	 
>85	AssignmentExpr	yDivs = y
>86	Identifier	y
>87	Identifier	yDivs
>88	ExpressionStatement	 
>89	AssignmentExpr	xDivs = x
>90	Identifier	x
>91	Identifier	xDivs
>92	ExpressionStatement	 
>93	AssignmentExpr	drawGridOut = dgo
>94	Identifier	dgo
>95	Identifier	drawGridOut
>96	ExpressionStatement	 
>97	AssignmentExpr	this -> drawGridTimeMultiplier = dgtm
>98	Identifier	dgtm
>99	PtrMemberAccess	this -> drawGridTimeMultiplier
>100	Identifier	drawGridTimeMultiplier
>101	Identifier	this
>102	ExpressionStatement	 
>103	AssignmentExpr	this -> drawGridModY = dgmy
>104	Identifier	dgmy
>105	PtrMemberAccess	this -> drawGridModY
>106	Identifier	drawGridModY
>107	Identifier	this
>108	ExpressionStatement	 
>109	AssignmentExpr	this -> drawGridModX = dgmx
>110	Identifier	dgmx
>111	PtrMemberAccess	this -> drawGridModX
>112	Identifier	drawGridModX
>113	Identifier	this
>114	ExpressionStatement	 
>115	AssignmentExpr	this -> drawGridOffsetY = dgoy
>116	Identifier	dgoy
>117	PtrMemberAccess	this -> drawGridOffsetY
>118	Identifier	drawGridOffsetY
>119	Identifier	this
>120	ExpressionStatement	 
>121	AssignmentExpr	this -> drawGridOffsetX = dgox
>122	Identifier	dgox
>123	PtrMemberAccess	this -> drawGridOffsetX
>124	Identifier	drawGridOffsetX
>125	Identifier	this
>126	CompoundStatement	 
>127	ExpressionStatement	 
>128	AssignmentExpr	doUpdateGrid = false
>129	Identifier	false
>130	Identifier	doUpdateGrid
>131	ExpressionStatement	 
>132	AssignmentExpr	yDivs = 0
>133	PrimaryExpression	0
>134	Identifier	yDivs
>135	ExpressionStatement	 
>136	AssignmentExpr	xDivs = 0
>137	PrimaryExpression	0
>138	Identifier	xDivs
>139	ExpressionStatement	 
>140	AssignmentExpr	gridTimer = 0
>141	PrimaryExpression	0
>142	Identifier	gridTimer
>143	Condition	 
>144	OrExpression	x == 0 || y == 0
>145	EqualityExpression	y == 0
>146	PrimaryExpression	0
>147	Identifier	y
>148	EqualityExpression	x == 0
>149	PrimaryExpression	0
>150	Identifier	x
>151	ExpressionStatement	 
>152	CallExpression	deleteGrid ( )
>153	ArgumentList	 
>154	Callee	deleteGrid
>155	Identifier	deleteGrid
>181	FunctionDef	Quad 
>182	ParameterList	bool vert , int num
>183	Parameter	 
>184	Identifier	num
>185	ParameterType	int
>186	Parameter	 
>187	Identifier	vert
>188	ParameterType	bool
>189	ReturnType	void
>190	CompoundStatement	 
>191	ExpressionStatement	 
>192	CallExpression	resetStrip ( )
>193	ArgumentList	 
>194	Callee	resetStrip
>195	Identifier	resetStrip
>196	ExpressionStatement	 
>197	AssignmentExpr	stripVert = vert
>198	Identifier	vert
>199	Identifier	stripVert
>200	ExpressionStatement	 
>201	CallExpression	strip . resize ( num )
>202	ArgumentList	num
>203	Argument	num
>204	Identifier	num
>205	Callee	strip . resize
>206	MemberAccess	strip . resize
>207	Identifier	resize
>208	Identifier	strip
>216	FunctionDef	Quad 
>217	ParameterList	const std 
>218	Parameter	 
>219	Identifier	st
>220	ParameterType	const std 
>221	ReturnType	void
>222	CompoundStatement	 
>223	ForStatement	for ( int i = 0 ; i < st . size ( ) ; i ++ )
>224	CompoundStatement	 
>225	IfStatement	if ( i < strip . size ( ) )
>226	CompoundStatement	 
>227	ExpressionStatement	 
>228	AssignmentExpr	strip [ i ] . y += st [ i ] . y
>229	MemberAccess	st [ i ] . y
>230	Identifier	y
>231	ArrayIndexing	st [ i ]
>232	Identifier	i
>233	Identifier	st
>234	MemberAccess	strip [ i ] . y
>235	Identifier	y
>236	ArrayIndexing	strip [ i ]
>237	Identifier	i
>238	Identifier	strip
>239	ExpressionStatement	 
>240	AssignmentExpr	strip [ i ] . x += st [ i ] . x
>241	MemberAccess	st [ i ] . x
>242	Identifier	x
>243	ArrayIndexing	st [ i ]
>244	Identifier	i
>245	Identifier	st
>246	MemberAccess	strip [ i ] . x
>247	Identifier	x
>248	ArrayIndexing	strip [ i ]
>249	Identifier	i
>250	Identifier	strip
>251	Condition	 
>252	RelationalExpression	i < strip . size ( )
>253	CallExpression	strip . size ( )
>254	ArgumentList	 
>255	Callee	strip . size
>256	MemberAccess	strip . size
>257	Identifier	size
>258	Identifier	strip
>259	Identifier	i
>260	IncDecOp	 
>261	IncDec	++
>262	Identifier	i
>263	Condition	 
>264	RelationalExpression	i < st . size ( )
>265	CallExpression	st . size ( )
>266	ArgumentList	 
>267	Callee	st . size
>268	MemberAccess	st . size
>269	Identifier	size
>270	Identifier	st
>271	Identifier	i
>272	ForInit	 
>273	IdentifierDeclStatement	int i = 0 ;
>274	IdentifierDecl	i = 0
>275	AssignmentExpr	i = 0
>276	PrimaryExpression	0
>277	Identifier	i
>278	Identifier	i
>279	IdentifierDeclType	int
>280	ExpressionStatement	 
>281	CallExpression	resetStrip ( )
>282	ArgumentList	 
>283	Callee	resetStrip
>284	Identifier	resetStrip
>300	FunctionDef	Quad 
>301	ParameterList	int xd , int yd
>302	Parameter	 
>303	Identifier	yd
>304	ParameterType	int
>305	Parameter	 
>306	Identifier	xd
>307	ParameterType	int
>308	ReturnType	void
>309	CompoundStatement	 
>310	ExpressionStatement	 
>311	CallExpression	resetGrid ( )
>312	ArgumentList	 
>313	Callee	resetGrid
>314	Identifier	resetGrid
>315	ForStatement	for ( int i = 0 ; i < xDivs ; i ++ )
>316	CompoundStatement	 
>317	ForStatement	for ( int j = 0 ; j < yDivs ; j ++ )
>318	CompoundStatement	 
>319	ExpressionStatement	 
>320	AssignmentExpr	drawGrid [ i ] [ j ] . z = 1
>321	PrimaryExpression	1
>322	MemberAccess	drawGrid [ i ] [ j ] . z
>323	Identifier	z
>324	ArrayIndexing	drawGrid [ i ] [ j ]
>325	Identifier	j
>326	ArrayIndexing	drawGrid [ i ]
>327	Identifier	i
>328	Identifier	drawGrid
>329	IncDecOp	 
>330	IncDec	++
>331	Identifier	j
>332	Condition	 
>333	RelationalExpression	j < yDivs
>334	Identifier	yDivs
>335	Identifier	j
>336	ForInit	 
>337	IdentifierDeclStatement	int j = 0 ;
>338	IdentifierDecl	j = 0
>339	AssignmentExpr	j = 0
>340	PrimaryExpression	0
>341	Identifier	j
>342	Identifier	j
>343	IdentifierDeclType	int
>344	ExpressionStatement	 
>345	AssignmentExpr	drawGrid [ i ] = new Vector [ yDivs ]
>346	Identifier	yDivs
>347	ArrayIndexing	drawGrid [ i ]
>348	Identifier	i
>349	Identifier	drawGrid
>350	IncDecOp	 
>351	IncDec	++
>352	Identifier	i
>353	Condition	 
>354	RelationalExpression	i < xDivs
>355	Identifier	xDivs
>356	Identifier	i
>357	ForInit	 
>358	IdentifierDeclStatement	int i = 0 ;
>359	IdentifierDecl	i = 0
>360	AssignmentExpr	i = 0
>361	PrimaryExpression	0
>362	Identifier	i
>363	Identifier	i
>364	IdentifierDeclType	int
>365	ExpressionStatement	 
>366	Statement	 
>367	Statement	 
>368	Statement	 
>369	Statement	 
>370	Statement	 
>371	Statement	 
>372	Statement	 
>373	Statement	 
>374	ExpressionStatement	 
>375	AssignmentExpr	yDivs = yd
>376	Identifier	yd
>377	Identifier	yDivs
>378	ExpressionStatement	 
>379	AssignmentExpr	xDivs = xd
>380	Identifier	xd
>381	Identifier	xDivs
>382	ExpressionStatement	 
>383	CallExpression	deleteGrid ( )
>384	ArgumentList	 
>385	Callee	deleteGrid
>386	Identifier	deleteGrid
>403	FunctionDef	Quad 
>404	ParameterList	int x , int y , float alpha
>405	Parameter	 
>406	Identifier	alpha
>407	ParameterType	float
>408	Parameter	 
>409	Identifier	y
>410	ParameterType	int
>411	Parameter	 
>412	Identifier	x
>413	ParameterType	int
>414	ReturnType	void
>415	CompoundStatement	 
>416	IfStatement	if ( x < xDivs && x >= 0 && y < yDivs && y >= 0 )
>417	CompoundStatement	 
>418	ExpressionStatement	 
>419	AssignmentExpr	drawGrid [ x ] [ y ] . z = alpha
>420	Identifier	alpha
>421	MemberAccess	drawGrid [ x ] [ y ] . z
>422	Identifier	z
>423	ArrayIndexing	drawGrid [ x ] [ y ]
>424	Identifier	y
>425	ArrayIndexing	drawGrid [ x ]
>426	Identifier	x
>427	Identifier	drawGrid
>428	Condition	 
>429	AndExpression	x < xDivs && x >= 0 && y < yDivs && y >= 0
>430	AndExpression	x >= 0 && y < yDivs && y >= 0
>431	AndExpression	y < yDivs && y >= 0
>432	RelationalExpression	y >= 0
>433	PrimaryExpression	0
>434	Identifier	y
>435	RelationalExpression	y < yDivs
>436	Identifier	yDivs
>437	Identifier	y
>438	RelationalExpression	x >= 0
>439	PrimaryExpression	0
>440	Identifier	x
>441	RelationalExpression	x < xDivs
>442	Identifier	xDivs
>443	Identifier	x
>459	FunctionDef	Quad 
>460	ParameterList	bool vert , const std 
>461	Parameter	 
>462	Identifier	points
>463	ParameterType	const std 
>464	Parameter	 
>465	Identifier	vert
>466	ParameterType	bool
>467	ReturnType	void
>468	CompoundStatement	 
>469	ForStatement	for ( int i = 0 ; i < points . size ( ) ; i ++ )
>470	CompoundStatement	 
>471	IfStatement	if ( ! vert )
>472	ElseStatement	else
>473	CompoundStatement	 
>474	ForStatement	for ( int x = 0 ; x < xDivs ; x ++ )
>475	CompoundStatement	 
>476	ForStatement	for ( int y = 0 ; y < yDivs ; y ++ )
>477	CompoundStatement	 
>478	IfStatement	if ( y < points . size ( ) )
>479	CompoundStatement	 
>480	ExpressionStatement	 
>481	AssignmentExpr	drawGrid [ x ] [ y ] += points [ y ]
>482	ArrayIndexing	points [ y ]
>483	Identifier	y
>484	Identifier	points
>485	ArrayIndexing	drawGrid [ x ] [ y ]
>486	Identifier	y
>487	ArrayIndexing	drawGrid [ x ]
>488	Identifier	x
>489	Identifier	drawGrid
>490	Condition	 
>491	RelationalExpression	y < points . size ( )
>492	CallExpression	points . size ( )
>493	ArgumentList	 
>494	Callee	points . size
>495	MemberAccess	points . size
>496	Identifier	size
>497	Identifier	points
>498	Identifier	y
>499	IncDecOp	 
>500	IncDec	++
>501	Identifier	y
>502	Condition	 
>503	RelationalExpression	y < yDivs
>504	Identifier	yDivs
>505	Identifier	y
>506	ForInit	 
>507	IdentifierDeclStatement	int y = 0 ;
>508	IdentifierDecl	y = 0
>509	AssignmentExpr	y = 0
>510	PrimaryExpression	0
>511	Identifier	y
>512	Identifier	y
>513	IdentifierDeclType	int
>514	IncDecOp	 
>515	IncDec	++
>516	Identifier	x
>517	Condition	 
>518	RelationalExpression	x < xDivs
>519	Identifier	xDivs
>520	Identifier	x
>521	ForInit	 
>522	IdentifierDeclStatement	int x = 0 ;
>523	IdentifierDecl	x = 0
>524	AssignmentExpr	x = 0
>525	PrimaryExpression	0
>526	Identifier	x
>527	Identifier	x
>528	IdentifierDeclType	int
>529	CompoundStatement	 
>530	ForStatement	for ( int y = 0 ; y < yDivs ; y ++ )
>531	CompoundStatement	 
>532	ForStatement	for ( int x = 0 ; x < xDivs ; x ++ )
>533	CompoundStatement	 
>534	IfStatement	if ( x < points . size ( ) )
>535	CompoundStatement	 
>536	ExpressionStatement	 
>537	AssignmentExpr	drawGrid [ x ] [ y ] += points [ x ]
>538	ArrayIndexing	points [ x ]
>539	Identifier	x
>540	Identifier	points
>541	ArrayIndexing	drawGrid [ x ] [ y ]
>542	Identifier	y
>543	ArrayIndexing	drawGrid [ x ]
>544	Identifier	x
>545	Identifier	drawGrid
>546	Condition	 
>547	RelationalExpression	x < points . size ( )
>548	CallExpression	points . size ( )
>549	ArgumentList	 
>550	Callee	points . size
>551	MemberAccess	points . size
>552	Identifier	size
>553	Identifier	points
>554	Identifier	x
>555	IncDecOp	 
>556	IncDec	++
>557	Identifier	x
>558	Condition	 
>559	RelationalExpression	x < xDivs
>560	Identifier	xDivs
>561	Identifier	x
>562	ForInit	 
>563	IdentifierDeclStatement	int x = 0 ;
>564	IdentifierDecl	x = 0
>565	AssignmentExpr	x = 0
>566	PrimaryExpression	0
>567	Identifier	x
>568	Identifier	x
>569	IdentifierDeclType	int
>570	IncDecOp	 
>571	IncDec	++
>572	Identifier	y
>573	Condition	 
>574	RelationalExpression	y < yDivs
>575	Identifier	yDivs
>576	Identifier	y
>577	ForInit	 
>578	IdentifierDeclStatement	int y = 0 ;
>579	IdentifierDecl	y = 0
>580	AssignmentExpr	y = 0
>581	PrimaryExpression	0
>582	Identifier	y
>583	Identifier	y
>584	IdentifierDeclType	int
>585	Condition	 
>586	UnaryOp	! vert
>587	Identifier	vert
>588	UnaryOperator	!
>589	IncDecOp	 
>590	IncDec	++
>591	Identifier	i
>592	Condition	 
>593	RelationalExpression	i < points . size ( )
>594	CallExpression	points . size ( )
>595	ArgumentList	 
>596	Callee	points . size
>597	MemberAccess	points . size
>598	Identifier	size
>599	Identifier	points
>600	Identifier	i
>601	ForInit	 
>602	IdentifierDeclStatement	int i = 0 ;
>603	IdentifierDecl	i = 0
>604	AssignmentExpr	i = 0
>605	PrimaryExpression	0
>606	Identifier	i
>607	Identifier	i
>608	IdentifierDeclType	int
>609	ExpressionStatement	 
>610	CallExpression	resetGrid ( )
>611	ArgumentList	 
>612	Callee	resetGrid
>613	Identifier	resetGrid
>614	IfStatement	if ( ! drawGrid )
>615	ReturnStatement	 
>616	Condition	 
>617	UnaryOp	! drawGrid
>618	Identifier	drawGrid
>619	UnaryOperator	!
>638	FunctionDef	Quad 
>639	ParameterList	 
>640	ReturnType	float
>641	CompoundStatement	 
>642	ReturnStatement	 
>643	MultiplicativeExpression	1.0f / ( float ( strip . size ( ) ) )
>644	CallExpression	float ( strip . size ( ) )
>645	ArgumentList	strip . size ( )
>646	Argument	strip . size ( )
>647	CallExpression	strip . size ( )
>648	ArgumentList	 
>649	Callee	strip . size
>650	MemberAccess	strip . size
>651	Identifier	size
>652	Identifier	strip
>653	Callee	float
>654	Identifier	float
>655	PrimaryExpression	1.0f
>662	FunctionDef	Quad 
>663	ParameterList	 
>664	ReturnType	void
>665	CompoundStatement	 
>666	IfStatement	if ( ! stripVert )
>667	ElseStatement	else
>668	CompoundStatement	 
>669	ExpressionStatement	 
>670	CallExpression	errorLog ( \"VERTICAL STRIP NOT SUPPORTED ^_-\" )
>671	ArgumentList	\"VERTICAL STRIP NOT SUPPORTED ^_-\"
>672	Argument	\"VERTICAL STRIP NOT SUPPORTED ^_-\"
>673	PrimaryExpression	\"VERTICAL STRIP NOT SUPPORTED ^_-\"
>674	Callee	errorLog
>675	Identifier	errorLog
>676	CompoundStatement	 
>677	ForStatement	for ( int i = 0 ; i < strip . size ( ) ; i ++ )
>678	CompoundStatement	 
>679	ExpressionStatement	 
>680	AssignmentExpr	strip [ i ] . y = 0
>681	PrimaryExpression	0
>682	MemberAccess	strip [ i ] . y
>683	Identifier	y
>684	ArrayIndexing	strip [ i ]
>685	Identifier	i
>686	Identifier	strip
>687	ExpressionStatement	 
>688	AssignmentExpr	strip [ i ] . x = v
>689	Identifier	v
>690	MemberAccess	strip [ i ] . x
>691	Identifier	x
>692	ArrayIndexing	strip [ i ]
>693	Identifier	i
>694	Identifier	strip
>695	IdentifierDeclStatement	 
>696	IdentifierDecl	v = ( i / ( float ( strip . size ( ) ) ) )
>697	AssignmentExpr	v = ( i / ( float ( strip . size ( ) ) ) )
>698	MultiplicativeExpression	i / ( float ( strip . size ( ) ) )
>699	CallExpression	float ( strip . size ( ) )
>700	ArgumentList	strip . size ( )
>701	Argument	strip . size ( )
>702	CallExpression	strip . size ( )
>703	ArgumentList	 
>704	Callee	strip . size
>705	MemberAccess	strip . size
>706	Identifier	size
>707	Identifier	strip
>708	Callee	float
>709	Identifier	float
>710	Identifier	i
>711	Identifier	v
>712	Identifier	v
>713	IdentifierDeclType	float
>714	IncDecOp	 
>715	IncDec	++
>716	Identifier	i
>717	Condition	 
>718	RelationalExpression	i < strip . size ( )
>719	CallExpression	strip . size ( )
>720	ArgumentList	 
>721	Callee	strip . size
>722	MemberAccess	strip . size
>723	Identifier	size
>724	Identifier	strip
>725	Identifier	i
>726	ForInit	 
>727	IdentifierDeclStatement	int i = 0 ;
>728	IdentifierDecl	i = 0
>729	AssignmentExpr	i = 0
>730	PrimaryExpression	0
>731	Identifier	i
>732	Identifier	i
>733	IdentifierDeclType	int
>734	Condition	 
>735	UnaryOp	! stripVert
>736	Identifier	stripVert
>737	UnaryOperator	!
>751	FunctionDef	Quad 
>752	ParameterList	 
>753	ReturnType	void
>754	CompoundStatement	 
>755	ForStatement	for ( int i = 0 ; i < xDivs ; i ++ )
>756	CompoundStatement	 
>757	ForStatement	for ( int j = 0 ; j < yDivs ; j ++ )
>758	CompoundStatement	 
>759	ExpressionStatement	 
>760	AssignmentExpr	drawGrid [ i ] [ j ] . y = j / ( float ) ( yDivs - 1 ) - 0.5f
>761	AdditiveExpression	j / ( float ) ( yDivs - 1 ) - 0.5f
>762	PrimaryExpression	0.5f
>763	MultiplicativeExpression	j / ( float ) ( yDivs - 1 )
>764	CastExpression	( float ) ( yDivs - 1 )
>765	AdditiveExpression	yDivs - 1
>766	PrimaryExpression	1
>767	Identifier	yDivs
>768	CastTarget	float
>769	Identifier	j
>770	MemberAccess	drawGrid [ i ] [ j ] . y
>771	Identifier	y
>772	ArrayIndexing	drawGrid [ i ] [ j ]
>773	Identifier	j
>774	ArrayIndexing	drawGrid [ i ]
>775	Identifier	i
>776	Identifier	drawGrid
>777	ExpressionStatement	 
>778	AssignmentExpr	drawGrid [ i ] [ j ] . x = i / ( float ) ( xDivs - 1 ) - 0.5f
>779	AdditiveExpression	i / ( float ) ( xDivs - 1 ) - 0.5f
>780	PrimaryExpression	0.5f
>781	MultiplicativeExpression	i / ( float ) ( xDivs - 1 )
>782	CastExpression	( float ) ( xDivs - 1 )
>783	AdditiveExpression	xDivs - 1
>784	PrimaryExpression	1
>785	Identifier	xDivs
>786	CastTarget	float
>787	Identifier	i
>788	MemberAccess	drawGrid [ i ] [ j ] . x
>789	Identifier	x
>790	ArrayIndexing	drawGrid [ i ] [ j ]
>791	Identifier	j
>792	ArrayIndexing	drawGrid [ i ]
>793	Identifier	i
>794	Identifier	drawGrid
>795	IncDecOp	 
>796	IncDec	++
>797	Identifier	j
>798	Condition	 
>799	RelationalExpression	j < yDivs
>800	Identifier	yDivs
>801	Identifier	j
>802	ForInit	 
>803	IdentifierDeclStatement	int j = 0 ;
>804	IdentifierDecl	j = 0
>805	AssignmentExpr	j = 0
>806	PrimaryExpression	0
>807	Identifier	j
>808	Identifier	j
>809	IdentifierDeclType	int
>810	IncDecOp	 
>811	IncDec	++
>812	Identifier	i
>813	Condition	 
>814	RelationalExpression	i < xDivs
>815	Identifier	xDivs
>816	Identifier	i
>817	ForInit	 
>818	IdentifierDeclStatement	int i = 0 ;
>819	IdentifierDecl	i = 0
>820	AssignmentExpr	i = 0
>821	PrimaryExpression	0
>822	Identifier	i
>823	Identifier	i
>824	IdentifierDeclType	int
>840	FunctionDef	Quad 
>841	ParameterList	float t
>842	Parameter	 
>843	Identifier	t
>844	ParameterType	float
>845	ReturnType	void
>846	CompoundStatement	 
>847	ExpressionStatement	 
>848	CallExpression	core -> getTopStateData ( ) -> addRenderObject ( q , this -> layer )
>849	ArgumentList	q
>850	Argument	this -> layer
>851	PtrMemberAccess	this -> layer
>852	Identifier	layer
>853	Identifier	this
>854	Argument	q
>855	Identifier	q
>856	Callee	core -> getTopStateData ( ) -> addRenderObject
>857	PtrMemberAccess	core -> getTopStateData ( ) -> addRenderObject
>858	Identifier	addRenderObject
>859	CallExpression	core -> getTopStateData ( )
>860	ArgumentList	 
>861	Callee	core -> getTopStateData
>862	PtrMemberAccess	core -> getTopStateData
>863	Identifier	getTopStateData
>864	Identifier	core
>865	ExpressionStatement	 
>866	AssignmentExpr	q -> blendType = this -> blendType
>867	PtrMemberAccess	this -> blendType
>868	Identifier	blendType
>869	Identifier	this
>870	PtrMemberAccess	q -> blendType
>871	Identifier	blendType
>872	Identifier	q
>873	ExpressionStatement	 
>874	AssignmentExpr	q -> offset = this -> offset
>875	PtrMemberAccess	this -> offset
>876	Identifier	offset
>877	Identifier	this
>878	PtrMemberAccess	q -> offset
>879	Identifier	offset
>880	Identifier	q
>881	ExpressionStatement	 
>882	AssignmentExpr	q -> scale = this -> scale
>883	PtrMemberAccess	this -> scale
>884	Identifier	scale
>885	Identifier	this
>886	PtrMemberAccess	q -> scale
>887	Identifier	scale
>888	Identifier	q
>889	ExpressionStatement	 
>890	AssignmentExpr	q -> followCamera = this -> followCamera
>891	PtrMemberAccess	this -> followCamera
>892	Identifier	followCamera
>893	Identifier	this
>894	PtrMemberAccess	q -> followCamera
>895	Identifier	followCamera
>896	Identifier	q
>897	ExpressionStatement	 
>898	AssignmentExpr	q -> position = this -> position
>899	PtrMemberAccess	this -> position
>900	Identifier	position
>901	Identifier	this
>902	PtrMemberAccess	q -> position
>903	Identifier	position
>904	Identifier	q
>905	IfStatement	if ( isfh ( ) )
>906	ExpressionStatement	 
>907	CallExpression	q -> flipHorizontal ( )
>908	ArgumentList	 
>909	Callee	q -> flipHorizontal
>910	PtrMemberAccess	q -> flipHorizontal
>911	Identifier	flipHorizontal
>912	Identifier	q
>913	Condition	 
>914	CallExpression	isfh ( )
>915	ArgumentList	 
>916	Callee	isfh
>917	Identifier	isfh
>918	ExpressionStatement	 
>919	CallExpression	q -> alpha . interpolateTo ( 0 , t )
>920	ArgumentList	0
>921	Argument	t
>922	Identifier	t
>923	Argument	0
>924	PrimaryExpression	0
>925	Callee	q -> alpha . interpolateTo
>926	MemberAccess	q -> alpha . interpolateTo
>927	Identifier	interpolateTo
>928	PtrMemberAccess	q -> alpha
>929	Identifier	alpha
>930	Identifier	q
>931	ExpressionStatement	 
>932	AssignmentExpr	q -> alpha = 1
>933	PrimaryExpression	1
>934	PtrMemberAccess	q -> alpha
>935	Identifier	alpha
>936	Identifier	q
>937	ExpressionStatement	 
>938	AssignmentExpr	q -> height = this -> height
>939	PtrMemberAccess	this -> height
>940	Identifier	height
>941	Identifier	this
>942	PtrMemberAccess	q -> height
>943	Identifier	height
>944	Identifier	q
>945	ExpressionStatement	 
>946	AssignmentExpr	q -> width = this -> width
>947	PtrMemberAccess	this -> width
>948	Identifier	width
>949	Identifier	this
>950	PtrMemberAccess	q -> width
>951	Identifier	width
>952	Identifier	q
>953	ExpressionStatement	 
>954	CallExpression	q -> setDecayRate ( 1 )
>955	ArgumentList	1
>956	Argument	1
>957	PrimaryExpression	1
>958	Callee	q -> setDecayRate
>959	PtrMemberAccess	q -> setDecayRate
>960	Identifier	setDecayRate
>961	Identifier	q
>962	ExpressionStatement	 
>963	CallExpression	q -> setLife ( t + 0.1f )
>964	ArgumentList	t + 0.1f
>965	Argument	t + 0.1f
>966	AdditiveExpression	t + 0.1f
>967	PrimaryExpression	0.1f
>968	Identifier	t
>969	Callee	q -> setLife
>970	PtrMemberAccess	q -> setLife
>971	Identifier	setLife
>972	Identifier	q
>973	ExpressionStatement	 
>974	CallExpression	q -> setTexture ( this -> texture -> name )
>975	ArgumentList	this -> texture -> name
>976	Argument	this -> texture -> name
>977	PtrMemberAccess	this -> texture -> name
>978	Identifier	name
>979	PtrMemberAccess	this -> texture
>980	Identifier	texture
>981	Identifier	this
>982	Callee	q -> setTexture
>983	PtrMemberAccess	q -> setTexture
>984	Identifier	setTexture
>985	Identifier	q
>986	ExpressionStatement	 
>987	Identifier	Quad
>988	Statement	 
>989	Statement	 
>990	Statement	 
>991	Statement	 
>992	Statement	 
>993	IfStatement	if ( ! this -> texture )
>994	ReturnStatement	 
>995	Condition	 
>996	UnaryOp	! this -> texture
>997	PtrMemberAccess	this -> texture
>998	Identifier	texture
>999	Identifier	this
>1000	UnaryOperator	!
>1033	FunctionDef	Quad 
>1034	ParameterList	const std 
>1035	Parameter	 
>1036	Identifier	t
>1037	ParameterType	float
>1038	Parameter	 
>1039	Identifier	texture
>1040	ParameterType	const std 
>1041	ReturnType	void
>1042	CompoundStatement	 
>1043	ExpressionStatement	 
>1044	CallExpression	this -> setTexture ( texture )
>1045	ArgumentList	texture
>1046	Argument	texture
>1047	Identifier	texture
>1048	Callee	this -> setTexture
>1049	PtrMemberAccess	this -> setTexture
>1050	Identifier	setTexture
>1051	Identifier	this
>1052	IfStatement	if ( this -> texture && ! this -> texture -> name . empty ( ) )
>1053	CompoundStatement	 
>1054	ExpressionStatement	 
>1055	CallExpression	spawnChildClone ( t )
>1056	ArgumentList	t
>1057	Argument	t
>1058	Identifier	t
>1059	Callee	spawnChildClone
>1060	Identifier	spawnChildClone
>1061	Condition	 
>1062	AndExpression	this -> texture && ! this -> texture -> name . empty ( )
>1063	UnaryOp	! this -> texture -> name . empty ( )
>1064	CallExpression	this -> texture -> name . empty ( )
>1065	ArgumentList	 
>1066	Callee	this -> texture -> name . empty
>1067	MemberAccess	this -> texture -> name . empty
>1068	Identifier	empty
>1069	PtrMemberAccess	this -> texture -> name
>1070	Identifier	name
>1071	PtrMemberAccess	this -> texture
>1072	Identifier	texture
>1073	Identifier	this
>1074	UnaryOperator	!
>1075	PtrMemberAccess	this -> texture
>1076	Identifier	texture
>1077	Identifier	this
>1090	FunctionDef	Quad 
>1091	ParameterList	 
>1092	ReturnType	void
>1093	CompoundStatement	 
>1094	ExpressionStatement	 
>1095	AssignmentExpr	renderQuad = true
>1096	Identifier	true
>1097	Identifier	renderQuad
>1098	ExpressionStatement	 
>1099	AssignmentExpr	lowerRightTextureCoordinates = Vector ( 1 , 1 )
>1100	CallExpression	Vector ( 1 , 1 )
>1101	ArgumentList	1
>1102	Argument	1
>1103	PrimaryExpression	1
>1104	Argument	1
>1105	PrimaryExpression	1
>1106	Callee	Vector
>1107	Identifier	Vector
>1108	Identifier	lowerRightTextureCoordinates
>1109	ExpressionStatement	 
>1110	AssignmentExpr	upperLeftTextureCoordinates = Vector ( 0 , 0 )
>1111	CallExpression	Vector ( 0 , 0 )
>1112	ArgumentList	0
>1113	Argument	0
>1114	PrimaryExpression	0
>1115	Argument	0
>1116	PrimaryExpression	0
>1117	Callee	Vector
>1118	Identifier	Vector
>1119	Identifier	upperLeftTextureCoordinates
>1120	ExpressionStatement	 
>1121	AssignmentExpr	height = 2
>1122	PrimaryExpression	2
>1123	Identifier	height
>1124	ExpressionStatement	 
>1125	AssignmentExpr	width = 2
>1126	PrimaryExpression	2
>1127	Identifier	width
>1128	ExpressionStatement	 
>1129	AssignmentExpr	renderCenter = true
>1130	Identifier	true
>1131	Identifier	renderCenter
>1132	ExpressionStatement	 
>1133	AssignmentExpr	renderBorder = false
>1134	Identifier	false
>1135	Identifier	renderBorder
>1136	ExpressionStatement	 
>1137	AssignmentExpr	drawGrid = 0
>1138	PrimaryExpression	0
>1139	Identifier	drawGrid
>1140	ExpressionStatement	 
>1141	AssignmentExpr	repeatingTextureToFill = false
>1142	Identifier	false
>1143	Identifier	repeatingTextureToFill
>1144	ExpressionStatement	 
>1145	AssignmentExpr	autoWidth = autoHeight = 0
>1146	AssignmentExpr	autoHeight = 0
>1147	PrimaryExpression	0
>1148	Identifier	autoHeight
>1149	Identifier	autoWidth
>1150	ExpressionStatement	 
>1151	AssignmentExpr	doUpdateGrid = false
>1152	Identifier	false
>1153	Identifier	doUpdateGrid
>1154	ExpressionStatement	 
>1155	AssignmentExpr	yDivs = 0
>1156	PrimaryExpression	0
>1157	Identifier	yDivs
>1158	ExpressionStatement	 
>1159	AssignmentExpr	xDivs = 0
>1160	PrimaryExpression	0
>1161	Identifier	xDivs
>1162	ExpressionStatement	 
>1163	AssignmentExpr	gridTimer = 0
>1164	PrimaryExpression	0
>1165	Identifier	gridTimer
>1166	ExpressionStatement	 
>1167	AssignmentExpr	gridType = GRID_WAVY
>1168	Identifier	GRID_WAVY
>1169	Identifier	gridType
>1170	ExpressionStatement	 
>1171	AssignmentExpr	repeatToFillScale = Vector ( 1 , 1 )
>1172	CallExpression	Vector ( 1 , 1 )
>1173	ArgumentList	1
>1174	Argument	1
>1175	PrimaryExpression	1
>1176	Argument	1
>1177	PrimaryExpression	1
>1178	Callee	Vector
>1179	Identifier	Vector
>1180	Identifier	repeatToFillScale
>1205	FunctionDef	Quad 
>1206	ParameterList	 
>1207	CompoundStatement	 
>1208	ExpressionStatement	 
>1209	CallExpression	initQuad ( )
>1210	ArgumentList	 
>1211	Callee	initQuad
>1212	Identifier	initQuad
>1213	ExpressionStatement	 
>1214	AssignmentExpr	borderAlpha = 0.5
>1215	PrimaryExpression	0.5
>1216	Identifier	borderAlpha
>1217	ExpressionStatement	 
>1218	CallExpression	addType ( SCO_QUAD )
>1219	ArgumentList	SCO_QUAD
>1220	Argument	SCO_QUAD
>1221	Identifier	SCO_QUAD
>1222	Callee	addType
>1223	Identifier	addType
>1229	FunctionDef	Quad 
>1230	ParameterList	 
>1231	ReturnType	void
>1232	CompoundStatement	 
>1233	IfStatement	if ( drawGrid )
>1234	CompoundStatement	 
>1235	ExpressionStatement	 
>1236	AssignmentExpr	drawGrid = 0
>1237	PrimaryExpression	0
>1238	Identifier	drawGrid
>1239	ExpressionStatement	 
>1240	Identifier	drawGrid
>1241	Statement	 
>1242	Statement	 
>1243	Statement	 
>1244	ForStatement	for ( int i = 0 ; i < xDivs ; i ++ )
>1245	CompoundStatement	 
>1246	ExpressionStatement	 
>1247	ArrayIndexing	drawGrid [ i ]
>1248	Identifier	i
>1249	Identifier	drawGrid
>1250	Statement	 
>1251	Statement	 
>1252	Statement	 
>1253	IncDecOp	 
>1254	IncDec	++
>1255	Identifier	i
>1256	Condition	 
>1257	RelationalExpression	i < xDivs
>1258	Identifier	xDivs
>1259	Identifier	i
>1260	ForInit	 
>1261	IdentifierDeclStatement	int i = 0 ;
>1262	IdentifierDecl	i = 0
>1263	AssignmentExpr	i = 0
>1264	PrimaryExpression	0
>1265	Identifier	i
>1266	Identifier	i
>1267	IdentifierDeclType	int
>1268	Condition	 
>1269	Identifier	drawGrid
>1276	FunctionDef	Quad 
>1277	ParameterList	 
>1278	ReturnType	void
>1279	CompoundStatement	 
>1280	ExpressionStatement	 
>1281	CallExpression	RenderObject 
>1282	ArgumentList	 
>1283	Callee	RenderObject 
>1284	Identifier	RenderObject 
>1285	ExpressionStatement	 
>1286	CallExpression	deleteGrid ( )
>1287	ArgumentList	 
>1288	Callee	deleteGrid
>1289	Identifier	deleteGrid
>1293	FunctionDef	Quad 
>1294	ParameterList	Vector coord , int minSize
>1295	Parameter	 
>1296	Identifier	minSize
>1297	ParameterType	int
>1298	Parameter	 
>1299	Identifier	coord
>1300	ParameterType	Vector
>1301	ReturnType	bool
>1302	CompoundStatement	 
>1303	ReturnStatement	 
>1304	Identifier	false
>1305	IfStatement	if ( coord . x >= pos . x - hw && coord . x <= pos . x + hw )
>1306	CompoundStatement	 
>1307	IfStatement	if ( coord . y >= pos . y - hh && coord . y <= pos . y + hh )
>1308	CompoundStatement	 
>1309	ReturnStatement	 
>1310	Identifier	true
>1311	Condition	 
>1312	AndExpression	coord . y >= pos . y - hh && coord . y <= pos . y + hh
>1313	RelationalExpression	coord . y <= pos . y + hh
>1314	AdditiveExpression	pos . y + hh
>1315	Identifier	hh
>1316	MemberAccess	pos . y
>1317	Identifier	y
>1318	Identifier	pos
>1319	MemberAccess	coord . y
>1320	Identifier	y
>1321	Identifier	coord
>1322	RelationalExpression	coord . y >= pos . y - hh
>1323	AdditiveExpression	pos . y - hh
>1324	Identifier	hh
>1325	MemberAccess	pos . y
>1326	Identifier	y
>1327	Identifier	pos
>1328	MemberAccess	coord . y
>1329	Identifier	y
>1330	Identifier	coord
>1331	Condition	 
>1332	AndExpression	coord . x >= pos . x - hw && coord . x <= pos . x + hw
>1333	RelationalExpression	coord . x <= pos . x + hw
>1334	AdditiveExpression	pos . x + hw
>1335	Identifier	hw
>1336	MemberAccess	pos . x
>1337	Identifier	x
>1338	Identifier	pos
>1339	MemberAccess	coord . x
>1340	Identifier	x
>1341	Identifier	coord
>1342	RelationalExpression	coord . x >= pos . x - hw
>1343	AdditiveExpression	pos . x - hw
>1344	Identifier	hw
>1345	MemberAccess	pos . x
>1346	Identifier	x
>1347	Identifier	pos
>1348	MemberAccess	coord . x
>1349	Identifier	x
>1350	Identifier	coord
>1351	IdentifierDeclStatement	 
>1352	IdentifierDecl	pos = getRealPosition ( )
>1353	AssignmentExpr	pos = getRealPosition ( )
>1354	CallExpression	getRealPosition ( )
>1355	ArgumentList	 
>1356	Callee	getRealPosition
>1357	Identifier	getRealPosition
>1358	Identifier	pos
>1359	Identifier	pos
>1360	IdentifierDeclType	Vector
>1361	IfStatement	if ( hh < minSize )
>1362	ExpressionStatement	 
>1363	AssignmentExpr	hh = minSize
>1364	Identifier	minSize
>1365	Identifier	hh
>1366	Condition	 
>1367	RelationalExpression	hh < minSize
>1368	Identifier	minSize
>1369	Identifier	hh
>1370	IfStatement	if ( hw < minSize )
>1371	ExpressionStatement	 
>1372	AssignmentExpr	hw = minSize
>1373	Identifier	minSize
>1374	Identifier	hw
>1375	Condition	 
>1376	RelationalExpression	hw < minSize
>1377	Identifier	minSize
>1378	Identifier	hw
>1379	IdentifierDeclStatement	 
>1380	IdentifierDecl	hh = fabsf ( ( height ) * realscale . y ) * 0.5f
>1381	AssignmentExpr	hh = fabsf ( ( height ) * realscale . y ) * 0.5f
>1382	MultiplicativeExpression	fabsf ( ( height ) * realscale . y ) * 0.5f
>1383	PrimaryExpression	0.5f
>1384	CallExpression	fabsf ( ( height ) * realscale . y )
>1385	ArgumentList	( height ) * realscale . y
>1386	Argument	( height ) * realscale . y
>1387	CastExpression	( height ) * realscale . y
>1388	UnaryOp	* realscale . y
>1389	MemberAccess	realscale . y
>1390	Identifier	y
>1391	Identifier	realscale
>1392	UnaryOperator	*
>1393	CastTarget	height
>1394	Callee	fabsf
>1395	Identifier	fabsf
>1396	Identifier	hh
>1397	Identifier	hh
>1398	IdentifierDeclType	int
>1399	IdentifierDeclStatement	 
>1400	IdentifierDecl	hw = fabsf ( ( width ) * realscale . x ) * 0.5f
>1401	AssignmentExpr	hw = fabsf ( ( width ) * realscale . x ) * 0.5f
>1402	MultiplicativeExpression	fabsf ( ( width ) * realscale . x ) * 0.5f
>1403	PrimaryExpression	0.5f
>1404	CallExpression	fabsf ( ( width ) * realscale . x )
>1405	ArgumentList	( width ) * realscale . x
>1406	Argument	( width ) * realscale . x
>1407	CastExpression	( width ) * realscale . x
>1408	UnaryOp	* realscale . x
>1409	MemberAccess	realscale . x
>1410	Identifier	x
>1411	Identifier	realscale
>1412	UnaryOperator	*
>1413	CastTarget	width
>1414	Callee	fabsf
>1415	Identifier	fabsf
>1416	Identifier	hw
>1417	Identifier	hw
>1418	IdentifierDeclType	int
>1419	IdentifierDeclStatement	 
>1420	IdentifierDecl	realscale = getRealScale ( )
>1421	AssignmentExpr	realscale = getRealScale ( )
>1422	CallExpression	getRealScale ( )
>1423	ArgumentList	 
>1424	Callee	getRealScale
>1425	Identifier	getRealScale
>1426	Identifier	realscale
>1427	Identifier	realscale
>1428	IdentifierDeclType	Vector
>1452	FunctionDef	Quad 
>1453	ParameterList	const Vector & coord , int minSize
>1454	Parameter	 
>1455	Identifier	minSize
>1456	ParameterType	int
>1457	Parameter	 
>1458	Identifier	coord
>1459	ParameterType	const Vector &
>1460	ReturnType	bool
>1461	CompoundStatement	 
>1462	ReturnStatement	 
>1463	Identifier	false
>1464	IfStatement	if ( coord . x >= pos . x + offset . x - hw && coord . x <= pos . x + offset . x + hw )
>1465	CompoundStatement	 
>1466	IfStatement	if ( coord . y >= pos . y + offset . y - hh && coord . y <= pos . y + offset . y + hh )
>1467	CompoundStatement	 
>1468	ReturnStatement	 
>1469	Identifier	true
>1470	Condition	 
>1471	AndExpression	coord . y >= pos . y + offset . y - hh && coord . y <= pos . y + offset . y + hh
>1472	RelationalExpression	coord . y <= pos . y + offset . y + hh
>1473	AdditiveExpression	pos . y + offset . y + hh
>1474	AdditiveExpression	offset . y + hh
>1475	Identifier	hh
>1476	MemberAccess	offset . y
>1477	Identifier	y
>1478	Identifier	offset
>1479	MemberAccess	pos . y
>1480	Identifier	y
>1481	Identifier	pos
>1482	MemberAccess	coord . y
>1483	Identifier	y
>1484	Identifier	coord
>1485	RelationalExpression	coord . y >= pos . y + offset . y - hh
>1486	AdditiveExpression	pos . y + offset . y - hh
>1487	AdditiveExpression	offset . y - hh
>1488	Identifier	hh
>1489	MemberAccess	offset . y
>1490	Identifier	y
>1491	Identifier	offset
>1492	MemberAccess	pos . y
>1493	Identifier	y
>1494	Identifier	pos
>1495	MemberAccess	coord . y
>1496	Identifier	y
>1497	Identifier	coord
>1498	Condition	 
>1499	AndExpression	coord . x >= pos . x + offset . x - hw && coord . x <= pos . x + offset . x + hw
>1500	RelationalExpression	coord . x <= pos . x + offset . x + hw
>1501	AdditiveExpression	pos . x + offset . x + hw
>1502	AdditiveExpression	offset . x + hw
>1503	Identifier	hw
>1504	MemberAccess	offset . x
>1505	Identifier	x
>1506	Identifier	offset
>1507	MemberAccess	pos . x
>1508	Identifier	x
>1509	Identifier	pos
>1510	MemberAccess	coord . x
>1511	Identifier	x
>1512	Identifier	coord
>1513	RelationalExpression	coord . x >= pos . x + offset . x - hw
>1514	AdditiveExpression	pos . x + offset . x - hw
>1515	AdditiveExpression	offset . x - hw
>1516	Identifier	hw
>1517	MemberAccess	offset . x
>1518	Identifier	x
>1519	Identifier	offset
>1520	MemberAccess	pos . x
>1521	Identifier	x
>1522	Identifier	pos
>1523	MemberAccess	coord . x
>1524	Identifier	x
>1525	Identifier	coord
>1526	IdentifierDeclStatement	 
>1527	IdentifierDecl	pos = getWorldPosition ( )
>1528	AssignmentExpr	pos = getWorldPosition ( )
>1529	CallExpression	getWorldPosition ( )
>1530	ArgumentList	 
>1531	Callee	getWorldPosition
>1532	Identifier	getWorldPosition
>1533	Identifier	pos
>1534	Identifier	pos
>1535	IdentifierDeclType	Vector
>1536	IfStatement	if ( hh < minSize )
>1537	ExpressionStatement	 
>1538	AssignmentExpr	hh = minSize
>1539	Identifier	minSize
>1540	Identifier	hh
>1541	Condition	 
>1542	RelationalExpression	hh < minSize
>1543	Identifier	minSize
>1544	Identifier	hh
>1545	IfStatement	if ( hw < minSize )
>1546	ExpressionStatement	 
>1547	AssignmentExpr	hw = minSize
>1548	Identifier	minSize
>1549	Identifier	hw
>1550	Condition	 
>1551	RelationalExpression	hw < minSize
>1552	Identifier	minSize
>1553	Identifier	hw
>1554	IdentifierDeclStatement	 
>1555	IdentifierDecl	hh = fabsf ( ( height ) * getRealScale ( ) . y ) * 0.5f
>1556	AssignmentExpr	hh = fabsf ( ( height ) * getRealScale ( ) . y ) * 0.5f
>1557	MultiplicativeExpression	fabsf ( ( height ) * getRealScale ( ) . y ) * 0.5f
>1558	PrimaryExpression	0.5f
>1559	CallExpression	fabsf ( ( height ) * getRealScale ( ) . y )
>1560	ArgumentList	( height ) * getRealScale ( ) . y
>1561	Argument	( height ) * getRealScale ( ) . y
>1562	CastExpression	( height ) * getRealScale ( ) . y
>1563	UnaryOp	* getRealScale ( ) . y
>1564	MemberAccess	getRealScale ( ) . y
>1565	Identifier	y
>1566	CallExpression	getRealScale ( )
>1567	ArgumentList	 
>1568	Callee	getRealScale
>1569	Identifier	getRealScale
>1570	UnaryOperator	*
>1571	CastTarget	height
>1572	Callee	fabsf
>1573	Identifier	fabsf
>1574	Identifier	hh
>1575	Identifier	hh
>1576	IdentifierDeclType	int
>1577	IdentifierDeclStatement	 
>1578	IdentifierDecl	hw = fabsf ( ( width ) * getRealScale ( ) . x ) * 0.5f
>1579	AssignmentExpr	hw = fabsf ( ( width ) * getRealScale ( ) . x ) * 0.5f
>1580	MultiplicativeExpression	fabsf ( ( width ) * getRealScale ( ) . x ) * 0.5f
>1581	PrimaryExpression	0.5f
>1582	CallExpression	fabsf ( ( width ) * getRealScale ( ) . x )
>1583	ArgumentList	( width ) * getRealScale ( ) . x
>1584	Argument	( width ) * getRealScale ( ) . x
>1585	CastExpression	( width ) * getRealScale ( ) . x
>1586	UnaryOp	* getRealScale ( ) . x
>1587	MemberAccess	getRealScale ( ) . x
>1588	Identifier	x
>1589	CallExpression	getRealScale ( )
>1590	ArgumentList	 
>1591	Callee	getRealScale
>1592	Identifier	getRealScale
>1593	UnaryOperator	*
>1594	CastTarget	width
>1595	Callee	fabsf
>1596	Identifier	fabsf
>1597	Identifier	hw
>1598	Identifier	hw
>1599	IdentifierDeclType	int
>1625	FunctionDef	Quad 
>1626	ParameterList	const Vector & coord , int w , int h
>1627	Parameter	 
>1628	Identifier	h
>1629	ParameterType	int
>1630	Parameter	 
>1631	Identifier	w
>1632	ParameterType	int
>1633	Parameter	 
>1634	Identifier	coord
>1635	ParameterType	const Vector &
>1636	ReturnType	bool
>1637	CompoundStatement	 
>1638	ReturnStatement	 
>1639	Identifier	false
>1640	IfStatement	if ( coord . x >= pos . x + offset . x - hw && coord . x <= pos . x + offset . x + hw )
>1641	CompoundStatement	 
>1642	IfStatement	if ( coord . y >= pos . y + offset . y - hh && coord . y <= pos . y + offset . y + hh )
>1643	CompoundStatement	 
>1644	ReturnStatement	 
>1645	Identifier	true
>1646	Condition	 
>1647	AndExpression	coord . y >= pos . y + offset . y - hh && coord . y <= pos . y + offset . y + hh
>1648	RelationalExpression	coord . y <= pos . y + offset . y + hh
>1649	AdditiveExpression	pos . y + offset . y + hh
>1650	AdditiveExpression	offset . y + hh
>1651	Identifier	hh
>1652	MemberAccess	offset . y
>1653	Identifier	y
>1654	Identifier	offset
>1655	MemberAccess	pos . y
>1656	Identifier	y
>1657	Identifier	pos
>1658	MemberAccess	coord . y
>1659	Identifier	y
>1660	Identifier	coord
>1661	RelationalExpression	coord . y >= pos . y + offset . y - hh
>1662	AdditiveExpression	pos . y + offset . y - hh
>1663	AdditiveExpression	offset . y - hh
>1664	Identifier	hh
>1665	MemberAccess	offset . y
>1666	Identifier	y
>1667	Identifier	offset
>1668	MemberAccess	pos . y
>1669	Identifier	y
>1670	Identifier	pos
>1671	MemberAccess	coord . y
>1672	Identifier	y
>1673	Identifier	coord
>1674	Condition	 
>1675	AndExpression	coord . x >= pos . x + offset . x - hw && coord . x <= pos . x + offset . x + hw
>1676	RelationalExpression	coord . x <= pos . x + offset . x + hw
>1677	AdditiveExpression	pos . x + offset . x + hw
>1678	AdditiveExpression	offset . x + hw
>1679	Identifier	hw
>1680	MemberAccess	offset . x
>1681	Identifier	x
>1682	Identifier	offset
>1683	MemberAccess	pos . x
>1684	Identifier	x
>1685	Identifier	pos
>1686	MemberAccess	coord . x
>1687	Identifier	x
>1688	Identifier	coord
>1689	RelationalExpression	coord . x >= pos . x + offset . x - hw
>1690	AdditiveExpression	pos . x + offset . x - hw
>1691	AdditiveExpression	offset . x - hw
>1692	Identifier	hw
>1693	MemberAccess	offset . x
>1694	Identifier	x
>1695	Identifier	offset
>1696	MemberAccess	pos . x
>1697	Identifier	x
>1698	Identifier	pos
>1699	MemberAccess	coord . x
>1700	Identifier	x
>1701	Identifier	coord
>1702	IdentifierDeclStatement	 
>1703	IdentifierDecl	pos = getWorldPosition ( )
>1704	AssignmentExpr	pos = getWorldPosition ( )
>1705	CallExpression	getWorldPosition ( )
>1706	ArgumentList	 
>1707	Callee	getWorldPosition
>1708	Identifier	getWorldPosition
>1709	Identifier	pos
>1710	Identifier	pos
>1711	IdentifierDeclType	Vector
>1712	IdentifierDeclStatement	 
>1713	IdentifierDecl	hh = h * 0.5f
>1714	AssignmentExpr	hh = h * 0.5f
>1715	MultiplicativeExpression	h * 0.5f
>1716	PrimaryExpression	0.5f
>1717	Identifier	h
>1718	Identifier	hh
>1719	Identifier	hh
>1720	IdentifierDeclType	int
>1721	IdentifierDeclStatement	 
>1722	IdentifierDecl	hw = w * 0.5f
>1723	AssignmentExpr	hw = w * 0.5f
>1724	MultiplicativeExpression	w * 0.5f
>1725	PrimaryExpression	0.5f
>1726	Identifier	w
>1727	Identifier	hw
>1728	Identifier	hw
>1729	IdentifierDeclType	int
>1749	FunctionDef	Quad 
>1750	ParameterList	float dt
>1751	Parameter	 
>1752	Identifier	dt
>1753	ParameterType	float
>1754	ReturnType	void
>1755	CompoundStatement	 
>1756	IfStatement	if ( gridType == GRID_WAVY )
>1757	CompoundStatement	 
>1758	ForStatement	for ( int x = 0 ; x < xDivs ; x ++ )
>1759	CompoundStatement	 
>1760	ForStatement	for ( int y = 0 ; y < yDivs ; y ++ )
>1761	CompoundStatement	 
>1762	ExpressionStatement	 
>1763	AssignmentExpr	drawGrid [ x ] [ y ] . y += addY
>1764	Identifier	addY
>1765	MemberAccess	drawGrid [ x ] [ y ] . y
>1766	Identifier	y
>1767	ArrayIndexing	drawGrid [ x ] [ y ]
>1768	Identifier	y
>1769	ArrayIndexing	drawGrid [ x ]
>1770	Identifier	x
>1771	Identifier	drawGrid
>1772	IfStatement	if ( drawGridModX != 0 )
>1773	CompoundStatement	 
>1774	IfStatement	if ( drawGridOut && x < hx )
>1775	ElseStatement	else
>1776	ExpressionStatement	 
>1777	AssignmentExpr	drawGrid [ x ] [ y ] . x -= addX
>1778	Identifier	addX
>1779	MemberAccess	drawGrid [ x ] [ y ] . x
>1780	Identifier	x
>1781	ArrayIndexing	drawGrid [ x ] [ y ]
>1782	Identifier	y
>1783	ArrayIndexing	drawGrid [ x ]
>1784	Identifier	x
>1785	Identifier	drawGrid
>1786	ExpressionStatement	 
>1787	AssignmentExpr	drawGrid [ x ] [ y ] . x += addX
>1788	Identifier	addX
>1789	MemberAccess	drawGrid [ x ] [ y ] . x
>1790	Identifier	x
>1791	ArrayIndexing	drawGrid [ x ] [ y ]
>1792	Identifier	y
>1793	ArrayIndexing	drawGrid [ x ]
>1794	Identifier	x
>1795	Identifier	drawGrid
>1796	Condition	 
>1797	AndExpression	drawGridOut && x < hx
>1798	RelationalExpression	x < hx
>1799	Identifier	hx
>1800	Identifier	x
>1801	Identifier	drawGridOut
>1802	IdentifierDeclStatement	 
>1803	IdentifierDecl	addX = ( sinf ( gridTimer + xoffset ) * drawGridModX )
>1804	AssignmentExpr	addX = ( sinf ( gridTimer + xoffset ) * drawGridModX )
>1805	MultiplicativeExpression	sinf ( gridTimer + xoffset ) * drawGridModX
>1806	Identifier	drawGridModX
>1807	CallExpression	sinf ( gridTimer + xoffset )
>1808	ArgumentList	gridTimer + xoffset
>1809	Argument	gridTimer + xoffset
>1810	AdditiveExpression	gridTimer + xoffset
>1811	Identifier	xoffset
>1812	Identifier	gridTimer
>1813	Callee	sinf
>1814	Identifier	sinf
>1815	Identifier	addX
>1816	Identifier	addX
>1817	IdentifierDeclType	float
>1818	Condition	 
>1819	EqualityExpression	drawGridModX != 0
>1820	PrimaryExpression	0
>1821	Identifier	drawGridModX
>1822	IdentifierDeclStatement	 
>1823	IdentifierDecl	xoffset = y * drawGridOffsetX
>1824	AssignmentExpr	xoffset = y * drawGridOffsetX
>1825	MultiplicativeExpression	y * drawGridOffsetX
>1826	Identifier	drawGridOffsetX
>1827	Identifier	y
>1828	Identifier	xoffset
>1829	Identifier	xoffset
>1830	IdentifierDeclType	float
>1831	IncDecOp	 
>1832	IncDec	++
>1833	Identifier	y
>1834	Condition	 
>1835	RelationalExpression	y < yDivs
>1836	Identifier	yDivs
>1837	Identifier	y
>1838	ForInit	 
>1839	IdentifierDeclStatement	int y = 0 ;
>1840	IdentifierDecl	y = 0
>1841	AssignmentExpr	y = 0
>1842	PrimaryExpression	0
>1843	Identifier	y
>1844	Identifier	y
>1845	IdentifierDeclType	int
>1846	IfStatement	if ( drawGridModY != 0 )
>1847	ExpressionStatement	 
>1848	AssignmentExpr	addY = cosf ( gridTimer + yoffset ) * drawGridModY
>1849	MultiplicativeExpression	cosf ( gridTimer + yoffset ) * drawGridModY
>1850	Identifier	drawGridModY
>1851	CallExpression	cosf ( gridTimer + yoffset )
>1852	ArgumentList	gridTimer + yoffset
>1853	Argument	gridTimer + yoffset
>1854	AdditiveExpression	gridTimer + yoffset
>1855	Identifier	yoffset
>1856	Identifier	gridTimer
>1857	Callee	cosf
>1858	Identifier	cosf
>1859	Identifier	addY
>1860	Condition	 
>1861	EqualityExpression	drawGridModY != 0
>1862	PrimaryExpression	0
>1863	Identifier	drawGridModY
>1864	IdentifierDeclStatement	 
>1865	IdentifierDecl	addY = 0
>1866	AssignmentExpr	addY = 0
>1867	PrimaryExpression	0
>1868	Identifier	addY
>1869	Identifier	addY
>1870	IdentifierDeclType	float
>1871	IdentifierDeclStatement	 
>1872	IdentifierDecl	yoffset = x * drawGridOffsetY
>1873	AssignmentExpr	yoffset = x * drawGridOffsetY
>1874	MultiplicativeExpression	x * drawGridOffsetY
>1875	Identifier	drawGridOffsetY
>1876	Identifier	x
>1877	Identifier	yoffset
>1878	Identifier	yoffset
>1879	IdentifierDeclType	float
>1880	IncDecOp	 
>1881	IncDec	++
>1882	Identifier	x
>1883	Condition	 
>1884	RelationalExpression	x < xDivs
>1885	Identifier	xDivs
>1886	Identifier	x
>1887	ForInit	 
>1888	IdentifierDeclStatement	int x = 0 ;
>1889	IdentifierDecl	x = 0
>1890	AssignmentExpr	x = 0
>1891	PrimaryExpression	0
>1892	Identifier	x
>1893	Identifier	x
>1894	IdentifierDeclType	int
>1895	IdentifierDeclStatement	 
>1896	IdentifierDecl	hx = xDivs / 2
>1897	AssignmentExpr	hx = xDivs / 2
>1898	MultiplicativeExpression	xDivs / 2
>1899	PrimaryExpression	2
>1900	Identifier	xDivs
>1901	Identifier	hx
>1902	Identifier	hx
>1903	IdentifierDeclType	int
>1904	ExpressionStatement	 
>1905	CallExpression	resetGrid ( )
>1906	ArgumentList	 
>1907	Callee	resetGrid
>1908	Identifier	resetGrid
>1909	ExpressionStatement	 
>1910	AssignmentExpr	gridTimer += dt * drawGridTimeMultiplier
>1911	MultiplicativeExpression	dt * drawGridTimeMultiplier
>1912	Identifier	drawGridTimeMultiplier
>1913	Identifier	dt
>1914	Identifier	gridTimer
>1915	Condition	 
>1916	EqualityExpression	gridType == GRID_WAVY
>1917	Identifier	GRID_WAVY
>1918	Identifier	gridType
>1919	IfStatement	if ( ! doUpdateGrid )
>1920	ReturnStatement	 
>1921	Condition	 
>1922	UnaryOp	! doUpdateGrid
>1923	Identifier	doUpdateGrid
>1924	UnaryOperator	!
>1958	FunctionDef	Quad 
>1959	ParameterList	 
>1960	ReturnType	void
>1961	CompoundStatement	 
>1962	IfStatement	if ( RenderObject 
>1963	CompoundStatement	 
>1964	IfStatement	if ( texture )
>1965	ExpressionStatement	 
>1966	CallExpression	glBindTexture ( GL_TEXTURE_2D , texture -> textures [ 0 ] )
>1967	ArgumentList	GL_TEXTURE_2D
>1968	Argument	texture -> textures [ 0 ]
>1969	ArrayIndexing	texture -> textures [ 0 ]
>1970	PrimaryExpression	0
>1971	PtrMemberAccess	texture -> textures
>1972	Identifier	textures
>1973	Identifier	texture
>1974	Argument	GL_TEXTURE_2D
>1975	Identifier	GL_TEXTURE_2D
>1976	Callee	glBindTexture
>1977	Identifier	glBindTexture
>1978	Condition	 
>1979	Identifier	texture
>1980	ExpressionStatement	 
>1981	CallExpression	glEnd ( )
>1982	ArgumentList	 
>1983	Callee	glEnd
>1984	Identifier	glEnd
>1985	ForStatement	for ( int i = 0 ; i < ( xDivs - 1 ) ; i ++ )
>1986	CompoundStatement	 
>1987	ForStatement	for ( int j = 0 ; j < ( yDivs - 1 ) ; j ++ )
>1988	CompoundStatement	 
>1989	ExpressionStatement	 
>1990	CallExpression	glVertex2f ( w * drawGrid [ i + 1 ] [ j ] . x , h * drawGrid [ i + 1 ] [ j ] . y )
>1991	ArgumentList	w * drawGrid [ i + 1 ] [ j ] . x
>1992	Argument	h * drawGrid [ i + 1 ] [ j ] . y
>1993	MultiplicativeExpression	h * drawGrid [ i + 1 ] [ j ] . y
>1994	MemberAccess	drawGrid [ i + 1 ] [ j ] . y
>1995	Identifier	y
>1996	ArrayIndexing	drawGrid [ i + 1 ] [ j ]
>1997	Identifier	j
>1998	ArrayIndexing	drawGrid [ i + 1 ]
>1999	AdditiveExpression	i + 1
>2000	PrimaryExpression	1
>2001	Identifier	i
>2002	Identifier	drawGrid
>2003	Identifier	h
>2004	Argument	w * drawGrid [ i + 1 ] [ j ] . x
>2005	MultiplicativeExpression	w * drawGrid [ i + 1 ] [ j ] . x
>2006	MemberAccess	drawGrid [ i + 1 ] [ j ] . x
>2007	Identifier	x
>2008	ArrayIndexing	drawGrid [ i + 1 ] [ j ]
>2009	Identifier	j
>2010	ArrayIndexing	drawGrid [ i + 1 ]
>2011	AdditiveExpression	i + 1
>2012	PrimaryExpression	1
>2013	Identifier	i
>2014	Identifier	drawGrid
>2015	Identifier	w
>2016	Callee	glVertex2f
>2017	Identifier	glVertex2f
>2018	ExpressionStatement	 
>2019	CallExpression	glVertex2f ( w * drawGrid [ i + 1 ] [ j + 1 ] . x , h * drawGrid [ i + 1 ] [ j + 1 ] . y )
>2020	ArgumentList	w * drawGrid [ i + 1 ] [ j + 1 ] . x
>2021	Argument	h * drawGrid [ i + 1 ] [ j + 1 ] . y
>2022	MultiplicativeExpression	h * drawGrid [ i + 1 ] [ j + 1 ] . y
>2023	MemberAccess	drawGrid [ i + 1 ] [ j + 1 ] . y
>2024	Identifier	y
>2025	ArrayIndexing	drawGrid [ i + 1 ] [ j + 1 ]
>2026	AdditiveExpression	j + 1
>2027	PrimaryExpression	1
>2028	Identifier	j
>2029	ArrayIndexing	drawGrid [ i + 1 ]
>2030	AdditiveExpression	i + 1
>2031	PrimaryExpression	1
>2032	Identifier	i
>2033	Identifier	drawGrid
>2034	Identifier	h
>2035	Argument	w * drawGrid [ i + 1 ] [ j + 1 ] . x
>2036	MultiplicativeExpression	w * drawGrid [ i + 1 ] [ j + 1 ] . x
>2037	MemberAccess	drawGrid [ i + 1 ] [ j + 1 ] . x
>2038	Identifier	x
>2039	ArrayIndexing	drawGrid [ i + 1 ] [ j + 1 ]
>2040	AdditiveExpression	j + 1
>2041	PrimaryExpression	1
>2042	Identifier	j
>2043	ArrayIndexing	drawGrid [ i + 1 ]
>2044	AdditiveExpression	i + 1
>2045	PrimaryExpression	1
>2046	Identifier	i
>2047	Identifier	drawGrid
>2048	Identifier	w
>2049	Callee	glVertex2f
>2050	Identifier	glVertex2f
>2051	ExpressionStatement	 
>2052	CallExpression	glVertex2f ( w * drawGrid [ i ] [ j + 1 ] . x , h * drawGrid [ i ] [ j + 1 ] . y )
>2053	ArgumentList	w * drawGrid [ i ] [ j + 1 ] . x
>2054	Argument	h * drawGrid [ i ] [ j + 1 ] . y
>2055	MultiplicativeExpression	h * drawGrid [ i ] [ j + 1 ] . y
>2056	MemberAccess	drawGrid [ i ] [ j + 1 ] . y
>2057	Identifier	y
>2058	ArrayIndexing	drawGrid [ i ] [ j + 1 ]
>2059	AdditiveExpression	j + 1
>2060	PrimaryExpression	1
>2061	Identifier	j
>2062	ArrayIndexing	drawGrid [ i ]
>2063	Identifier	i
>2064	Identifier	drawGrid
>2065	Identifier	h
>2066	Argument	w * drawGrid [ i ] [ j + 1 ] . x
>2067	MultiplicativeExpression	w * drawGrid [ i ] [ j + 1 ] . x
>2068	MemberAccess	drawGrid [ i ] [ j + 1 ] . x
>2069	Identifier	x
>2070	ArrayIndexing	drawGrid [ i ] [ j + 1 ]
>2071	AdditiveExpression	j + 1
>2072	PrimaryExpression	1
>2073	Identifier	j
>2074	ArrayIndexing	drawGrid [ i ]
>2075	Identifier	i
>2076	Identifier	drawGrid
>2077	Identifier	w
>2078	Callee	glVertex2f
>2079	Identifier	glVertex2f
>2080	ExpressionStatement	 
>2081	CallExpression	glVertex2f ( w * drawGrid [ i ] [ j ] . x , h * drawGrid [ i ] [ j ] . y )
>2082	ArgumentList	w * drawGrid [ i ] [ j ] . x
>2083	Argument	h * drawGrid [ i ] [ j ] . y
>2084	MultiplicativeExpression	h * drawGrid [ i ] [ j ] . y
>2085	MemberAccess	drawGrid [ i ] [ j ] . y
>2086	Identifier	y
>2087	ArrayIndexing	drawGrid [ i ] [ j ]
>2088	Identifier	j
>2089	ArrayIndexing	drawGrid [ i ]
>2090	Identifier	i
>2091	Identifier	drawGrid
>2092	Identifier	h
>2093	Argument	w * drawGrid [ i ] [ j ] . x
>2094	MultiplicativeExpression	w * drawGrid [ i ] [ j ] . x
>2095	MemberAccess	drawGrid [ i ] [ j ] . x
>2096	Identifier	x
>2097	ArrayIndexing	drawGrid [ i ] [ j ]
>2098	Identifier	j
>2099	ArrayIndexing	drawGrid [ i ]
>2100	Identifier	i
>2101	Identifier	drawGrid
>2102	Identifier	w
>2103	Callee	glVertex2f
>2104	Identifier	glVertex2f
>2105	IncDecOp	 
>2106	IncDec	++
>2107	Identifier	j
>2108	Condition	 
>2109	RelationalExpression	j < ( yDivs - 1 )
>2110	AdditiveExpression	yDivs - 1
>2111	PrimaryExpression	1
>2112	Identifier	yDivs
>2113	Identifier	j
>2114	ForInit	 
>2115	IdentifierDeclStatement	int j = 0 ;
>2116	IdentifierDecl	j = 0
>2117	AssignmentExpr	j = 0
>2118	PrimaryExpression	0
>2119	Identifier	j
>2120	Identifier	j
>2121	IdentifierDeclType	int
>2122	IncDecOp	 
>2123	IncDec	++
>2124	Identifier	i
>2125	Condition	 
>2126	RelationalExpression	i < ( xDivs - 1 )
>2127	AdditiveExpression	xDivs - 1
>2128	PrimaryExpression	1
>2129	Identifier	xDivs
>2130	Identifier	i
>2131	ForInit	 
>2132	IdentifierDeclStatement	int i = 0 ;
>2133	IdentifierDecl	i = 0
>2134	AssignmentExpr	i = 0
>2135	PrimaryExpression	0
>2136	Identifier	i
>2137	Identifier	i
>2138	IdentifierDeclType	int
>2139	ExpressionStatement	 
>2140	CallExpression	glBegin ( GL_POINTS )
>2141	ArgumentList	GL_POINTS
>2142	Argument	GL_POINTS
>2143	Identifier	GL_POINTS
>2144	Callee	glBegin
>2145	Identifier	glBegin
>2146	ExpressionStatement	 
>2147	CallExpression	glColor3f ( 1 , 0 , 0 )
>2148	ArgumentList	1
>2149	Argument	0
>2150	PrimaryExpression	0
>2151	Argument	0
>2152	PrimaryExpression	0
>2153	Argument	1
>2154	PrimaryExpression	1
>2155	Callee	glColor3f
>2156	Identifier	glColor3f
>2157	ExpressionStatement	 
>2158	CallExpression	glPointSize ( 2 )
>2159	ArgumentList	2
>2160	Argument	2
>2161	PrimaryExpression	2
>2162	Callee	glPointSize
>2163	Identifier	glPointSize
>2164	ExpressionStatement	 
>2165	CallExpression	glBindTexture ( GL_TEXTURE_2D , 0 )
>2166	ArgumentList	GL_TEXTURE_2D
>2167	Argument	0
>2168	PrimaryExpression	0
>2169	Argument	GL_TEXTURE_2D
>2170	Identifier	GL_TEXTURE_2D
>2171	Callee	glBindTexture
>2172	Identifier	glBindTexture
>2173	Condition	 
>2174	Identifier	RenderObject 
>2175	ExpressionStatement	 
>2176	CallExpression	glEnd ( )
>2177	ArgumentList	 
>2178	Callee	glEnd
>2179	Identifier	glEnd
>2180	ForStatement	for ( int i = 0 ; i < ( xDivs - 1 ) ; i ++ , u0 = u1 , u1 += incX )
>2181	CompoundStatement	 
>2182	ForStatement	for ( int j = 0 ; j < ( yDivs - 1 ) ; j ++ , v0 = v1 , v1 += incY )
>2183	CompoundStatement	 
>2184	IfStatement	if ( drawGrid [ i ] [ j ] . z != 0 || drawGrid [ i ] [ j + 1 ] . z != 0 || drawGrid [ i + 1 ] [ j ] . z != 0 || \
>2185	CompoundStatement	 
>2186	ExpressionStatement	 
>2187	CallExpression	glVertex2f ( w * drawGrid [ i + 1 ] [ j ] . x , h * drawGrid [ i + 1 ] [ j ] . y )
>2188	ArgumentList	w * drawGrid [ i + 1 ] [ j ] . x
>2189	Argument	h * drawGrid [ i + 1 ] [ j ] . y
>2190	MultiplicativeExpression	h * drawGrid [ i + 1 ] [ j ] . y
>2191	MemberAccess	drawGrid [ i + 1 ] [ j ] . y
>2192	Identifier	y
>2193	ArrayIndexing	drawGrid [ i + 1 ] [ j ]
>2194	Identifier	j
>2195	ArrayIndexing	drawGrid [ i + 1 ]
>2196	AdditiveExpression	i + 1
>2197	PrimaryExpression	1
>2198	Identifier	i
>2199	Identifier	drawGrid
>2200	Identifier	h
>2201	Argument	w * drawGrid [ i + 1 ] [ j ] . x
>2202	MultiplicativeExpression	w * drawGrid [ i + 1 ] [ j ] . x
>2203	MemberAccess	drawGrid [ i + 1 ] [ j ] . x
>2204	Identifier	x
>2205	ArrayIndexing	drawGrid [ i + 1 ] [ j ]
>2206	Identifier	j
>2207	ArrayIndexing	drawGrid [ i + 1 ]
>2208	AdditiveExpression	i + 1
>2209	PrimaryExpression	1
>2210	Identifier	i
>2211	Identifier	drawGrid
>2212	Identifier	w
>2213	Callee	glVertex2f
>2214	Identifier	glVertex2f
>2215	ExpressionStatement	 
>2216	CallExpression	glTexCoord2f ( u1 , v0 )
>2217	ArgumentList	u1
>2218	Argument	v0
>2219	Identifier	v0
>2220	Argument	u1
>2221	Identifier	u1
>2222	Callee	glTexCoord2f
>2223	Identifier	glTexCoord2f
>2224	ExpressionStatement	 
>2225	CallExpression	glColor4f ( red , green , blue , alpha * drawGrid [ i + 1 ] [ j ] . z )
>2226	ArgumentList	red
>2227	Argument	alpha * drawGrid [ i + 1 ] [ j ] . z
>2228	MultiplicativeExpression	alpha * drawGrid [ i + 1 ] [ j ] . z
>2229	MemberAccess	drawGrid [ i + 1 ] [ j ] . z
>2230	Identifier	z
>2231	ArrayIndexing	drawGrid [ i + 1 ] [ j ]
>2232	Identifier	j
>2233	ArrayIndexing	drawGrid [ i + 1 ]
>2234	AdditiveExpression	i + 1
>2235	PrimaryExpression	1
>2236	Identifier	i
>2237	Identifier	drawGrid
>2238	Identifier	alpha
>2239	Argument	blue
>2240	Identifier	blue
>2241	Argument	green
>2242	Identifier	green
>2243	Argument	red
>2244	Identifier	red
>2245	Callee	glColor4f
>2246	Identifier	glColor4f
>2247	ExpressionStatement	 
>2248	CallExpression	glVertex2f ( w * drawGrid [ i + 1 ] [ j + 1 ] . x , h * drawGrid [ i + 1 ] [ j + 1 ] . y )
>2249	ArgumentList	w * drawGrid [ i + 1 ] [ j + 1 ] . x
>2250	Argument	h * drawGrid [ i + 1 ] [ j + 1 ] . y
>2251	MultiplicativeExpression	h * drawGrid [ i + 1 ] [ j + 1 ] . y
>2252	MemberAccess	drawGrid [ i + 1 ] [ j + 1 ] . y
>2253	Identifier	y
>2254	ArrayIndexing	drawGrid [ i + 1 ] [ j + 1 ]
>2255	AdditiveExpression	j + 1
>2256	PrimaryExpression	1
>2257	Identifier	j
>2258	ArrayIndexing	drawGrid [ i + 1 ]
>2259	AdditiveExpression	i + 1
>2260	PrimaryExpression	1
>2261	Identifier	i
>2262	Identifier	drawGrid
>2263	Identifier	h
>2264	Argument	w * drawGrid [ i + 1 ] [ j + 1 ] . x
>2265	MultiplicativeExpression	w * drawGrid [ i + 1 ] [ j + 1 ] . x
>2266	MemberAccess	drawGrid [ i + 1 ] [ j + 1 ] . x
>2267	Identifier	x
>2268	ArrayIndexing	drawGrid [ i + 1 ] [ j + 1 ]
>2269	AdditiveExpression	j + 1
>2270	PrimaryExpression	1
>2271	Identifier	j
>2272	ArrayIndexing	drawGrid [ i + 1 ]
>2273	AdditiveExpression	i + 1
>2274	PrimaryExpression	1
>2275	Identifier	i
>2276	Identifier	drawGrid
>2277	Identifier	w
>2278	Callee	glVertex2f
>2279	Identifier	glVertex2f
>2280	ExpressionStatement	 
>2281	CallExpression	glTexCoord2f ( u1 , v1 )
>2282	ArgumentList	u1
>2283	Argument	v1
>2284	Identifier	v1
>2285	Argument	u1
>2286	Identifier	u1
>2287	Callee	glTexCoord2f
>2288	Identifier	glTexCoord2f
>2289	ExpressionStatement	 
>2290	CallExpression	glColor4f ( red , green , blue , alpha * drawGrid [ i + 1 ] [ j + 1 ] . z )
>2291	ArgumentList	red
>2292	Argument	alpha * drawGrid [ i + 1 ] [ j + 1 ] . z
>2293	MultiplicativeExpression	alpha * drawGrid [ i + 1 ] [ j + 1 ] . z
>2294	MemberAccess	drawGrid [ i + 1 ] [ j + 1 ] . z
>2295	Identifier	z
>2296	ArrayIndexing	drawGrid [ i + 1 ] [ j + 1 ]
>2297	AdditiveExpression	j + 1
>2298	PrimaryExpression	1
>2299	Identifier	j
>2300	ArrayIndexing	drawGrid [ i + 1 ]
>2301	AdditiveExpression	i + 1
>2302	PrimaryExpression	1
>2303	Identifier	i
>2304	Identifier	drawGrid
>2305	Identifier	alpha
>2306	Argument	blue
>2307	Identifier	blue
>2308	Argument	green
>2309	Identifier	green
>2310	Argument	red
>2311	Identifier	red
>2312	Callee	glColor4f
>2313	Identifier	glColor4f
>2314	ExpressionStatement	 
>2315	CallExpression	glVertex2f ( w * drawGrid [ i ] [ j + 1 ] . x , h * drawGrid [ i ] [ j + 1 ] . y )
>2316	ArgumentList	w * drawGrid [ i ] [ j + 1 ] . x
>2317	Argument	h * drawGrid [ i ] [ j + 1 ] . y
>2318	MultiplicativeExpression	h * drawGrid [ i ] [ j + 1 ] . y
>2319	MemberAccess	drawGrid [ i ] [ j + 1 ] . y
>2320	Identifier	y
>2321	ArrayIndexing	drawGrid [ i ] [ j + 1 ]
>2322	AdditiveExpression	j + 1
>2323	PrimaryExpression	1
>2324	Identifier	j
>2325	ArrayIndexing	drawGrid [ i ]
>2326	Identifier	i
>2327	Identifier	drawGrid
>2328	Identifier	h
>2329	Argument	w * drawGrid [ i ] [ j + 1 ] . x
>2330	MultiplicativeExpression	w * drawGrid [ i ] [ j + 1 ] . x
>2331	MemberAccess	drawGrid [ i ] [ j + 1 ] . x
>2332	Identifier	x
>2333	ArrayIndexing	drawGrid [ i ] [ j + 1 ]
>2334	AdditiveExpression	j + 1
>2335	PrimaryExpression	1
>2336	Identifier	j
>2337	ArrayIndexing	drawGrid [ i ]
>2338	Identifier	i
>2339	Identifier	drawGrid
>2340	Identifier	w
>2341	Callee	glVertex2f
>2342	Identifier	glVertex2f
>2343	ExpressionStatement	 
>2344	CallExpression	glTexCoord2f ( u0 , v1 )
>2345	ArgumentList	u0
>2346	Argument	v1
>2347	Identifier	v1
>2348	Argument	u0
>2349	Identifier	u0
>2350	Callee	glTexCoord2f
>2351	Identifier	glTexCoord2f
>2352	ExpressionStatement	 
>2353	CallExpression	glColor4f ( red , green , blue , alpha * drawGrid [ i ] [ j + 1 ] . z )
>2354	ArgumentList	red
>2355	Argument	alpha * drawGrid [ i ] [ j + 1 ] . z
>2356	MultiplicativeExpression	alpha * drawGrid [ i ] [ j + 1 ] . z
>2357	MemberAccess	drawGrid [ i ] [ j + 1 ] . z
>2358	Identifier	z
>2359	ArrayIndexing	drawGrid [ i ] [ j + 1 ]
>2360	AdditiveExpression	j + 1
>2361	PrimaryExpression	1
>2362	Identifier	j
>2363	ArrayIndexing	drawGrid [ i ]
>2364	Identifier	i
>2365	Identifier	drawGrid
>2366	Identifier	alpha
>2367	Argument	blue
>2368	Identifier	blue
>2369	Argument	green
>2370	Identifier	green
>2371	Argument	red
>2372	Identifier	red
>2373	Callee	glColor4f
>2374	Identifier	glColor4f
>2375	ExpressionStatement	 
>2376	CallExpression	glVertex2f ( w * drawGrid [ i ] [ j ] . x , h * drawGrid [ i ] [ j ] . y )
>2377	ArgumentList	w * drawGrid [ i ] [ j ] . x
>2378	Argument	h * drawGrid [ i ] [ j ] . y
>2379	MultiplicativeExpression	h * drawGrid [ i ] [ j ] . y
>2380	MemberAccess	drawGrid [ i ] [ j ] . y
>2381	Identifier	y
>2382	ArrayIndexing	drawGrid [ i ] [ j ]
>2383	Identifier	j
>2384	ArrayIndexing	drawGrid [ i ]
>2385	Identifier	i
>2386	Identifier	drawGrid
>2387	Identifier	h
>2388	Argument	w * drawGrid [ i ] [ j ] . x
>2389	MultiplicativeExpression	w * drawGrid [ i ] [ j ] . x
>2390	MemberAccess	drawGrid [ i ] [ j ] . x
>2391	Identifier	x
>2392	ArrayIndexing	drawGrid [ i ] [ j ]
>2393	Identifier	j
>2394	ArrayIndexing	drawGrid [ i ]
>2395	Identifier	i
>2396	Identifier	drawGrid
>2397	Identifier	w
>2398	Callee	glVertex2f
>2399	Identifier	glVertex2f
>2400	ExpressionStatement	 
>2401	CallExpression	glTexCoord2f ( u0 , v0 )
>2402	ArgumentList	u0
>2403	Argument	v0
>2404	Identifier	v0
>2405	Argument	u0
>2406	Identifier	u0
>2407	Callee	glTexCoord2f
>2408	Identifier	glTexCoord2f
>2409	ExpressionStatement	 
>2410	CallExpression	glColor4f ( red , green , blue , alpha * drawGrid [ i ] [ j ] . z )
>2411	ArgumentList	red
>2412	Argument	alpha * drawGrid [ i ] [ j ] . z
>2413	MultiplicativeExpression	alpha * drawGrid [ i ] [ j ] . z
>2414	MemberAccess	drawGrid [ i ] [ j ] . z
>2415	Identifier	z
>2416	ArrayIndexing	drawGrid [ i ] [ j ]
>2417	Identifier	j
>2418	ArrayIndexing	drawGrid [ i ]
>2419	Identifier	i
>2420	Identifier	drawGrid
>2421	Identifier	alpha
>2422	Argument	blue
>2423	Identifier	blue
>2424	Argument	green
>2425	Identifier	green
>2426	Argument	red
>2427	Identifier	red
>2428	Callee	glColor4f
>2429	Identifier	glColor4f
>2430	Condition	 
>2431	OrExpression	drawGrid [ i ] [ j ] . z != 0 || drawGrid [ i ] [ j + 1 ] . z != 0 || drawGrid [ i + 1 ] [ j ] . z != \
>2432	OrExpression	drawGrid [ i ] [ j + 1 ] . z != 0 || drawGrid [ i + 1 ] [ j ] . z != 0 || drawGrid [ i + 1 ] [ j + 1 ] \
>2433	OrExpression	drawGrid [ i + 1 ] [ j ] . z != 0 || drawGrid [ i + 1 ] [ j + 1 ] . z != 0
>2434	EqualityExpression	drawGrid [ i + 1 ] [ j + 1 ] . z != 0
>2435	PrimaryExpression	0
>2436	MemberAccess	drawGrid [ i + 1 ] [ j + 1 ] . z
>2437	Identifier	z
>2438	ArrayIndexing	drawGrid [ i + 1 ] [ j + 1 ]
>2439	AdditiveExpression	j + 1
>2440	PrimaryExpression	1
>2441	Identifier	j
>2442	ArrayIndexing	drawGrid [ i + 1 ]
>2443	AdditiveExpression	i + 1
>2444	PrimaryExpression	1
>2445	Identifier	i
>2446	Identifier	drawGrid
>2447	EqualityExpression	drawGrid [ i + 1 ] [ j ] . z != 0
>2448	PrimaryExpression	0
>2449	MemberAccess	drawGrid [ i + 1 ] [ j ] . z
>2450	Identifier	z
>2451	ArrayIndexing	drawGrid [ i + 1 ] [ j ]
>2452	Identifier	j
>2453	ArrayIndexing	drawGrid [ i + 1 ]
>2454	AdditiveExpression	i + 1
>2455	PrimaryExpression	1
>2456	Identifier	i
>2457	Identifier	drawGrid
>2458	EqualityExpression	drawGrid [ i ] [ j + 1 ] . z != 0
>2459	PrimaryExpression	0
>2460	MemberAccess	drawGrid [ i ] [ j + 1 ] . z
>2461	Identifier	z
>2462	ArrayIndexing	drawGrid [ i ] [ j + 1 ]
>2463	AdditiveExpression	j + 1
>2464	PrimaryExpression	1
>2465	Identifier	j
>2466	ArrayIndexing	drawGrid [ i ]
>2467	Identifier	i
>2468	Identifier	drawGrid
>2469	EqualityExpression	drawGrid [ i ] [ j ] . z != 0
>2470	PrimaryExpression	0
>2471	MemberAccess	drawGrid [ i ] [ j ] . z
>2472	Identifier	z
>2473	ArrayIndexing	drawGrid [ i ] [ j ]
>2474	Identifier	j
>2475	ArrayIndexing	drawGrid [ i ]
>2476	Identifier	i
>2477	Identifier	drawGrid
>2478	Expression	 
>2479	Expression	v0 = v1 , v1 += incY
>2480	AssignmentExpr	v1 += incY
>2481	Identifier	incY
>2482	Identifier	v1
>2483	AssignmentExpr	v0 = v1
>2484	Identifier	v1
>2485	Identifier	v0
>2486	IncDecOp	j ++
>2487	IncDec	++
>2488	Identifier	j
>2489	Condition	 
>2490	RelationalExpression	j < ( yDivs - 1 )
>2491	AdditiveExpression	yDivs - 1
>2492	PrimaryExpression	1
>2493	Identifier	yDivs
>2494	Identifier	j
>2495	ForInit	 
>2496	IdentifierDeclStatement	int j = 0 ;
>2497	IdentifierDecl	j = 0
>2498	AssignmentExpr	j = 0
>2499	PrimaryExpression	0
>2500	Identifier	j
>2501	Identifier	j
>2502	IdentifierDeclType	int
>2503	IdentifierDeclStatement	 
>2504	IdentifierDecl	v1 = v0 + incY
>2505	AssignmentExpr	v1 = v0 + incY
>2506	AdditiveExpression	v0 + incY
>2507	Identifier	incY
>2508	Identifier	v0
>2509	Identifier	v1
>2510	Identifier	v1
>2511	IdentifierDeclType	float
>2512	IdentifierDeclStatement	 
>2513	IdentifierDecl	v0 = 1 - percentY + baseY
>2514	AssignmentExpr	v0 = 1 - percentY + baseY
>2515	AdditiveExpression	1 - percentY + baseY
>2516	AdditiveExpression	percentY + baseY
>2517	Identifier	baseY
>2518	Identifier	percentY
>2519	PrimaryExpression	1
>2520	Identifier	v0
>2521	Identifier	v0
>2522	IdentifierDeclType	float
>2523	Expression	 
>2524	Expression	u0 = u1 , u1 += incX
>2525	AssignmentExpr	u1 += incX
>2526	Identifier	incX
>2527	Identifier	u1
>2528	AssignmentExpr	u0 = u1
>2529	Identifier	u1
>2530	Identifier	u0
>2531	IncDecOp	i ++
>2532	IncDec	++
>2533	Identifier	i
>2534	Condition	 
>2535	RelationalExpression	i < ( xDivs - 1 )
>2536	AdditiveExpression	xDivs - 1
>2537	PrimaryExpression	1
>2538	Identifier	xDivs
>2539	Identifier	i
>2540	ForInit	 
>2541	IdentifierDeclStatement	int i = 0 ;
>2542	IdentifierDecl	i = 0
>2543	AssignmentExpr	i = 0
>2544	PrimaryExpression	0
>2545	Identifier	i
>2546	Identifier	i
>2547	IdentifierDeclType	int
>2548	IdentifierDeclStatement	 
>2549	IdentifierDecl	u1 = u0 + incX
>2550	AssignmentExpr	u1 = u0 + incX
>2551	AdditiveExpression	u0 + incX
>2552	Identifier	incX
>2553	Identifier	u0
>2554	Identifier	u1
>2555	Identifier	u1
>2556	IdentifierDeclType	float
>2557	IdentifierDeclStatement	 
>2558	IdentifierDecl	u0 = baseX
>2559	AssignmentExpr	u0 = baseX
>2560	Identifier	baseX
>2561	Identifier	baseX
>2562	Identifier	u0
>2563	IdentifierDeclType	float
>2564	ExpressionStatement	 
>2565	CallExpression	glBegin ( GL_QUADS )
>2566	ArgumentList	GL_QUADS
>2567	Argument	GL_QUADS
>2568	Identifier	GL_QUADS
>2569	Callee	glBegin
>2570	Identifier	glBegin
>2571	IdentifierDeclStatement	 
>2572	IdentifierDecl	alpha = this -> alpha . x * this -> alphaMod
>2573	AssignmentExpr	alpha = this -> alpha . x * this -> alphaMod
>2574	MultiplicativeExpression	this -> alpha . x * this -> alphaMod
>2575	PtrMemberAccess	this -> alphaMod
>2576	Identifier	alphaMod
>2577	Identifier	this
>2578	MemberAccess	this -> alpha . x
>2579	Identifier	x
>2580	PtrMemberAccess	this -> alpha
>2581	Identifier	alpha
>2582	Identifier	this
>2583	Identifier	alpha
>2584	Identifier	alpha
>2585	IdentifierDeclType	const float
>2586	IdentifierDeclStatement	 
>2587	IdentifierDecl	blue = this -> color . z
>2588	AssignmentExpr	blue = this -> color . z
>2589	MemberAccess	this -> color . z
>2590	Identifier	z
>2591	PtrMemberAccess	this -> color
>2592	Identifier	color
>2593	Identifier	this
>2594	Identifier	blue
>2595	Identifier	blue
>2596	IdentifierDeclType	const float
>2597	IdentifierDeclStatement	 
>2598	IdentifierDecl	green = this -> color . y
>2599	AssignmentExpr	green = this -> color . y
>2600	MemberAccess	this -> color . y
>2601	Identifier	y
>2602	PtrMemberAccess	this -> color
>2603	Identifier	color
>2604	Identifier	this
>2605	Identifier	green
>2606	Identifier	green
>2607	IdentifierDeclType	const float
>2608	IdentifierDeclStatement	 
>2609	IdentifierDecl	red = this -> color . x
>2610	AssignmentExpr	red = this -> color . x
>2611	MemberAccess	this -> color . x
>2612	Identifier	x
>2613	PtrMemberAccess	this -> color
>2614	Identifier	color
>2615	Identifier	this
>2616	Identifier	red
>2617	Identifier	red
>2618	IdentifierDeclType	const float
>2619	IdentifierDeclStatement	 
>2620	IdentifierDecl	h = this -> getHeight ( )
>2621	AssignmentExpr	h = this -> getHeight ( )
>2622	CallExpression	this -> getHeight ( )
>2623	ArgumentList	 
>2624	Callee	this -> getHeight
>2625	PtrMemberAccess	this -> getHeight
>2626	Identifier	getHeight
>2627	Identifier	this
>2628	Identifier	h
>2629	Identifier	h
>2630	IdentifierDeclType	const float
>2631	IdentifierDeclStatement	 
>2632	IdentifierDecl	w = this -> getWidth ( )
>2633	AssignmentExpr	w = this -> getWidth ( )
>2634	CallExpression	this -> getWidth ( )
>2635	ArgumentList	 
>2636	Callee	this -> getWidth
>2637	PtrMemberAccess	this -> getWidth
>2638	Identifier	getWidth
>2639	Identifier	this
>2640	Identifier	w
>2641	Identifier	w
>2642	IdentifierDeclType	const float
>2643	IdentifierDeclStatement	 
>2644	IdentifierDecl	incY = percentY / ( float ) ( yDivs - 1 )
>2645	AssignmentExpr	incY = percentY / ( float ) ( yDivs - 1 )
>2646	MultiplicativeExpression	percentY / ( float ) ( yDivs - 1 )
>2647	CastExpression	( float ) ( yDivs - 1 )
>2648	AdditiveExpression	yDivs - 1
>2649	PrimaryExpression	1
>2650	Identifier	yDivs
>2651	CastTarget	float
>2652	Identifier	percentY
>2653	Identifier	incY
>2654	Identifier	incY
>2655	IdentifierDeclType	const float
>2656	IdentifierDeclStatement	 
>2657	IdentifierDecl	incX = percentX / ( float ) ( xDivs - 1 )
>2658	AssignmentExpr	incX = percentX / ( float ) ( xDivs - 1 )
>2659	MultiplicativeExpression	percentX / ( float ) ( xDivs - 1 )
>2660	CastExpression	( float ) ( xDivs - 1 )
>2661	AdditiveExpression	xDivs - 1
>2662	PrimaryExpression	1
>2663	Identifier	xDivs
>2664	CastTarget	float
>2665	Identifier	percentX
>2666	Identifier	incX
>2667	Identifier	incX
>2668	IdentifierDeclType	const float
>2669	IdentifierDeclStatement	 
>2670	IdentifierDecl	baseY = ( lowerRightTextureCoordinates . y < upperLeftTextureCoordinates . y ) ? lowerRightTextureCoordinates . \
>2671	AssignmentExpr	baseY = ( lowerRightTextureCoordinates . y < upperLeftTextureCoordinates . y ) ? lowerRightTextureCoordinates \
>2672	ConditionalExpression	( lowerRightTextureCoordinates . y < upperLeftTextureCoordinates . y ) ? lowerRightTextureCoordinates . y 
>2673	MemberAccess	upperLeftTextureCoordinates . y
>2674	Identifier	y
>2675	Identifier	upperLeftTextureCoordinates
>2676	MemberAccess	lowerRightTextureCoordinates . y
>2677	Identifier	y
>2678	Identifier	lowerRightTextureCoordinates
>2679	Condition	lowerRightTextureCoordinates . y < upperLeftTextureCoordinates . y
>2680	RelationalExpression	lowerRightTextureCoordinates . y < upperLeftTextureCoordinates . y
>2681	MemberAccess	upperLeftTextureCoordinates . y
>2682	Identifier	y
>2683	Identifier	upperLeftTextureCoordinates
>2684	MemberAccess	lowerRightTextureCoordinates . y
>2685	Identifier	y
>2686	Identifier	lowerRightTextureCoordinates
>2687	Identifier	baseY
>2688	Identifier	baseY
>2689	IdentifierDeclType	const float
>2690	IdentifierDeclStatement	 
>2691	IdentifierDecl	baseX = ( lowerRightTextureCoordinates . x < upperLeftTextureCoordinates . x ) ? lowerRightTextureCoordinates . \
>2692	AssignmentExpr	baseX = ( lowerRightTextureCoordinates . x < upperLeftTextureCoordinates . x ) ? lowerRightTextureCoordinates \
>2693	ConditionalExpression	( lowerRightTextureCoordinates . x < upperLeftTextureCoordinates . x ) ? lowerRightTextureCoordinates . x 
>2694	MemberAccess	upperLeftTextureCoordinates . x
>2695	Identifier	x
>2696	Identifier	upperLeftTextureCoordinates
>2697	MemberAccess	lowerRightTextureCoordinates . x
>2698	Identifier	x
>2699	Identifier	lowerRightTextureCoordinates
>2700	Condition	lowerRightTextureCoordinates . x < upperLeftTextureCoordinates . x
>2701	RelationalExpression	lowerRightTextureCoordinates . x < upperLeftTextureCoordinates . x
>2702	MemberAccess	upperLeftTextureCoordinates . x
>2703	Identifier	x
>2704	Identifier	upperLeftTextureCoordinates
>2705	MemberAccess	lowerRightTextureCoordinates . x
>2706	Identifier	x
>2707	Identifier	lowerRightTextureCoordinates
>2708	Identifier	baseX
>2709	Identifier	baseX
>2710	IdentifierDeclType	const float
>2711	IdentifierDeclStatement	 
>2712	IdentifierDecl	percentY = fabsf ( this -> upperLeftTextureCoordinates . y - this -> lowerRightTextureCoordinates . y )
>2713	AssignmentExpr	percentY = fabsf ( this -> upperLeftTextureCoordinates . y - this -> lowerRightTextureCoordinates . y )
>2714	CallExpression	fabsf ( this -> upperLeftTextureCoordinates . y - this -> lowerRightTextureCoordinates . y )
>2715	ArgumentList	this -> upperLeftTextureCoordinates . y - this -> lowerRightTextureCoordinates . y
>2716	Argument	this -> upperLeftTextureCoordinates . y - this -> lowerRightTextureCoordinates . y
>2717	AdditiveExpression	this -> upperLeftTextureCoordinates . y - this -> lowerRightTextureCoordinates . y
>2718	MemberAccess	this -> lowerRightTextureCoordinates . y
>2719	Identifier	y
>2720	PtrMemberAccess	this -> lowerRightTextureCoordinates
>2721	Identifier	lowerRightTextureCoordinates
>2722	Identifier	this
>2723	MemberAccess	this -> upperLeftTextureCoordinates . y
>2724	Identifier	y
>2725	PtrMemberAccess	this -> upperLeftTextureCoordinates
>2726	Identifier	upperLeftTextureCoordinates
>2727	Identifier	this
>2728	Callee	fabsf
>2729	Identifier	fabsf
>2730	Identifier	percentY
>2731	Identifier	percentY
>2732	IdentifierDeclType	const float
>2733	IdentifierDeclStatement	 
>2734	IdentifierDecl	percentX = fabsf ( this -> lowerRightTextureCoordinates . x - this -> upperLeftTextureCoordinates . x )
>2735	AssignmentExpr	percentX = fabsf ( this -> lowerRightTextureCoordinates . x - this -> upperLeftTextureCoordinates . x )
>2736	CallExpression	fabsf ( this -> lowerRightTextureCoordinates . x - this -> upperLeftTextureCoordinates . x )
>2737	ArgumentList	this -> lowerRightTextureCoordinates . x - this -> upperLeftTextureCoordinates . x
>2738	Argument	this -> lowerRightTextureCoordinates . x - this -> upperLeftTextureCoordinates . x
>2739	AdditiveExpression	this -> lowerRightTextureCoordinates . x - this -> upperLeftTextureCoordinates . x
>2740	MemberAccess	this -> upperLeftTextureCoordinates . x
>2741	Identifier	x
>2742	PtrMemberAccess	this -> upperLeftTextureCoordinates
>2743	Identifier	upperLeftTextureCoordinates
>2744	Identifier	this
>2745	MemberAccess	this -> lowerRightTextureCoordinates . x
>2746	Identifier	x
>2747	PtrMemberAccess	this -> lowerRightTextureCoordinates
>2748	Identifier	lowerRightTextureCoordinates
>2749	Identifier	this
>2750	Callee	fabsf
>2751	Identifier	fabsf
>2752	Identifier	percentX
>2753	Identifier	percentX
>2754	IdentifierDeclType	const float
>2755	IfStatement	if ( xDivs < 2 || yDivs < 2 )
>2756	ReturnStatement	 
>2757	Condition	 
>2758	OrExpression	xDivs < 2 || yDivs < 2
>2759	RelationalExpression	yDivs < 2
>2760	PrimaryExpression	2
>2761	Identifier	yDivs
>2762	RelationalExpression	xDivs < 2
>2763	PrimaryExpression	2
>2764	Identifier	xDivs
>2839	FunctionDef	Quad 
>2840	ParameterList	bool on
>2841	Parameter	 
>2842	Identifier	on
>2843	ParameterType	bool
>2844	ReturnType	void
>2845	CompoundStatement	 
>2846	ExpressionStatement	 
>2847	CallExpression	refreshRepeatTextureToFill ( )
>2848	ArgumentList	 
>2849	Callee	refreshRepeatTextureToFill
>2850	Identifier	refreshRepeatTextureToFill
>2851	ExpressionStatement	 
>2852	AssignmentExpr	repeatTexture = on
>2853	Identifier	on
>2854	Identifier	repeatTexture
>2855	ExpressionStatement	 
>2856	AssignmentExpr	repeatingTextureToFill = on
>2857	Identifier	on
>2858	Identifier	repeatingTextureToFill
>2865	FunctionDef	Quad 
>2866	ParameterList	 
>2867	ReturnType	void
>2868	CompoundStatement	 
>2869	IfStatement	if ( true )
>2870	ElseStatement	else
>2871	CompoundStatement	 
>2872	IfStatement	if ( this -> texture )
>2873	ElseStatement	else
>2874	ExpressionStatement	 
>2875	CallExpression	core -> blitD3DPreTrans ( 0 , position . x + offset . x , position . y + offset . y , width * scale . x , width \
>2876	ArgumentList	0
>2877	Argument	width . y * scale . y
>2878	MultiplicativeExpression	width . y * scale . y
>2879	MemberAccess	scale . y
>2880	Identifier	y
>2881	Identifier	scale
>2882	MemberAccess	width . y
>2883	Identifier	y
>2884	Identifier	width
>2885	Argument	width * scale . x
>2886	MultiplicativeExpression	width * scale . x
>2887	MemberAccess	scale . x
>2888	Identifier	x
>2889	Identifier	scale
>2890	Identifier	width
>2891	Argument	position . y + offset . y
>2892	AdditiveExpression	position . y + offset . y
>2893	MemberAccess	offset . y
>2894	Identifier	y
>2895	Identifier	offset
>2896	MemberAccess	position . y
>2897	Identifier	y
>2898	Identifier	position
>2899	Argument	position . x + offset . x
>2900	AdditiveExpression	position . x + offset . x
>2901	MemberAccess	offset . x
>2902	Identifier	x
>2903	Identifier	offset
>2904	MemberAccess	position . x
>2905	Identifier	x
>2906	Identifier	position
>2907	Argument	0
>2908	PrimaryExpression	0
>2909	Callee	core -> blitD3DPreTrans
>2910	PtrMemberAccess	core -> blitD3DPreTrans
>2911	Identifier	blitD3DPreTrans
>2912	Identifier	core
>2913	ExpressionStatement	 
>2914	CallExpression	core -> blitD3DPreTrans ( this -> texture -> d3dTexture , position . x + offset . x , position . y + offset . y , \
>2915	ArgumentList	this -> texture -> d3dTexture
>2916	Argument	width . y * scale . y
>2917	MultiplicativeExpression	width . y * scale . y
>2918	MemberAccess	scale . y
>2919	Identifier	y
>2920	Identifier	scale
>2921	MemberAccess	width . y
>2922	Identifier	y
>2923	Identifier	width
>2924	Argument	width * scale . x
>2925	MultiplicativeExpression	width * scale . x
>2926	MemberAccess	scale . x
>2927	Identifier	x
>2928	Identifier	scale
>2929	Identifier	width
>2930	Argument	position . y + offset . y
>2931	AdditiveExpression	position . y + offset . y
>2932	MemberAccess	offset . y
>2933	Identifier	y
>2934	Identifier	offset
>2935	MemberAccess	position . y
>2936	Identifier	y
>2937	Identifier	position
>2938	Argument	position . x + offset . x
>2939	AdditiveExpression	position . x + offset . x
>2940	MemberAccess	offset . x
>2941	Identifier	x
>2942	Identifier	offset
>2943	MemberAccess	position . x
>2944	Identifier	x
>2945	Identifier	position
>2946	Argument	this -> texture -> d3dTexture
>2947	PtrMemberAccess	this -> texture -> d3dTexture
>2948	Identifier	d3dTexture
>2949	PtrMemberAccess	this -> texture
>2950	Identifier	texture
>2951	Identifier	this
>2952	Callee	core -> blitD3DPreTrans
>2953	PtrMemberAccess	core -> blitD3DPreTrans
>2954	Identifier	blitD3DPreTrans
>2955	Identifier	core
>2956	Condition	 
>2957	PtrMemberAccess	this -> texture
>2958	Identifier	texture
>2959	Identifier	this
>2960	CompoundStatement	 
>2961	IfStatement	if ( this -> texture )
>2962	ElseStatement	else
>2963	CompoundStatement	 
>2964	ExpressionStatement	 
>2965	CallExpression	core -> blitD3D ( 0 , width , height )
>2966	ArgumentList	0
>2967	Argument	height
>2968	Identifier	height
>2969	Argument	width
>2970	Identifier	width
>2971	Argument	0
>2972	PrimaryExpression	0
>2973	Callee	core -> blitD3D
>2974	PtrMemberAccess	core -> blitD3D
>2975	Identifier	blitD3D
>2976	Identifier	core
>2977	CompoundStatement	 
>2978	IfStatement	if ( upperLeftTextureCoordinates . x != 0 || upperLeftTextureCoordinates . y != 0 || lowerRightTextureCoordinates \
>2979	ElseStatement	else
>2980	ExpressionStatement	 
>2981	CallExpression	core -> blitD3D ( this -> texture -> d3dTexture , width , height )
>2982	ArgumentList	this -> texture -> d3dTexture
>2983	Argument	height
>2984	Identifier	height
>2985	Argument	width
>2986	Identifier	width
>2987	Argument	this -> texture -> d3dTexture
>2988	PtrMemberAccess	this -> texture -> d3dTexture
>2989	Identifier	d3dTexture
>2990	PtrMemberAccess	this -> texture
>2991	Identifier	texture
>2992	Identifier	this
>2993	Callee	core -> blitD3D
>2994	PtrMemberAccess	core -> blitD3D
>2995	Identifier	blitD3D
>2996	Identifier	core
>2997	CompoundStatement	 
>2998	ExpressionStatement	 
>2999	CallExpression	core -> blitD3DEx ( this -> texture -> d3dTexture , width , height , upperLeftTextureCoordinates . x , upperLeftTextureCoordinates \
>3000	ArgumentList	this -> texture -> d3dTexture
>3001	Argument	lowerRightTextureCoordinates . y
>3002	MemberAccess	lowerRightTextureCoordinates . y
>3003	Identifier	y
>3004	Identifier	lowerRightTextureCoordinates
>3005	Argument	lowerRightTextureCoordinates . x
>3006	MemberAccess	lowerRightTextureCoordinates . x
>3007	Identifier	x
>3008	Identifier	lowerRightTextureCoordinates
>3009	Argument	upperLeftTextureCoordinates . y
>3010	MemberAccess	upperLeftTextureCoordinates . y
>3011	Identifier	y
>3012	Identifier	upperLeftTextureCoordinates
>3013	Argument	upperLeftTextureCoordinates . x
>3014	MemberAccess	upperLeftTextureCoordinates . x
>3015	Identifier	x
>3016	Identifier	upperLeftTextureCoordinates
>3017	Argument	height
>3018	Identifier	height
>3019	Argument	width
>3020	Identifier	width
>3021	Argument	this -> texture -> d3dTexture
>3022	PtrMemberAccess	this -> texture -> d3dTexture
>3023	Identifier	d3dTexture
>3024	PtrMemberAccess	this -> texture
>3025	Identifier	texture
>3026	Identifier	this
>3027	Callee	core -> blitD3DEx
>3028	PtrMemberAccess	core -> blitD3DEx
>3029	Identifier	blitD3DEx
>3030	Identifier	core
>3031	Condition	 
>3032	OrExpression	upperLeftTextureCoordinates . x != 0 || upperLeftTextureCoordinates . y != 0 || lowerRightTextureCoordinates \
>3033	OrExpression	upperLeftTextureCoordinates . y != 0 || lowerRightTextureCoordinates . x != 1 || lowerRightTextureCoordinates \
>3034	OrExpression	lowerRightTextureCoordinates . x != 1 || lowerRightTextureCoordinates . y != 1
>3035	EqualityExpression	lowerRightTextureCoordinates . y != 1
>3036	PrimaryExpression	1
>3037	MemberAccess	lowerRightTextureCoordinates . y
>3038	Identifier	y
>3039	Identifier	lowerRightTextureCoordinates
>3040	EqualityExpression	lowerRightTextureCoordinates . x != 1
>3041	PrimaryExpression	1
>3042	MemberAccess	lowerRightTextureCoordinates . x
>3043	Identifier	x
>3044	Identifier	lowerRightTextureCoordinates
>3045	EqualityExpression	upperLeftTextureCoordinates . y != 0
>3046	PrimaryExpression	0
>3047	MemberAccess	upperLeftTextureCoordinates . y
>3048	Identifier	y
>3049	Identifier	upperLeftTextureCoordinates
>3050	EqualityExpression	upperLeftTextureCoordinates . x != 0
>3051	PrimaryExpression	0
>3052	MemberAccess	upperLeftTextureCoordinates . x
>3053	Identifier	x
>3054	Identifier	upperLeftTextureCoordinates
>3055	Condition	 
>3056	PtrMemberAccess	this -> texture
>3057	Identifier	texture
>3058	Identifier	this
>3059	Condition	 
>3060	Identifier	true
>3061	IfStatement	if ( renderBorder )
>3062	CompoundStatement	 
>3063	ExpressionStatement	 
>3064	AssignmentExpr	RenderObject 
>3065	PrimaryExpression	0
>3066	Identifier	RenderObject 
>3067	ExpressionStatement	 
>3068	CallExpression	glEnd ( )
>3069	ArgumentList	 
>3070	Callee	glEnd
>3071	Identifier	glEnd
>3072	ExpressionStatement	 
>3073	CallExpression	glVertex2f ( _w2 , - _h2 )
>3074	ArgumentList	_w2
>3075	Argument	- _h2
>3076	UnaryOp	- _h2
>3077	Identifier	_h2
>3078	UnaryOperator	-
>3079	Argument	_w2
>3080	Identifier	_w2
>3081	Callee	glVertex2f
>3082	Identifier	glVertex2f
>3083	ExpressionStatement	 
>3084	CallExpression	glVertex2f ( - _w2 , - _h2 )
>3085	ArgumentList	- _w2
>3086	Argument	- _h2
>3087	UnaryOp	- _h2
>3088	Identifier	_h2
>3089	UnaryOperator	-
>3090	Argument	- _w2
>3091	UnaryOp	- _w2
>3092	Identifier	_w2
>3093	UnaryOperator	-
>3094	Callee	glVertex2f
>3095	Identifier	glVertex2f
>3096	ExpressionStatement	 
>3097	CallExpression	glVertex2f ( - _w2 , _h2 )
>3098	ArgumentList	- _w2
>3099	Argument	_h2
>3100	Identifier	_h2
>3101	Argument	- _w2
>3102	UnaryOp	- _w2
>3103	Identifier	_w2
>3104	UnaryOperator	-
>3105	Callee	glVertex2f
>3106	Identifier	glVertex2f
>3107	ExpressionStatement	 
>3108	CallExpression	glVertex2f ( - _w2 , - _h2 )
>3109	ArgumentList	- _w2
>3110	Argument	- _h2
>3111	UnaryOp	- _h2
>3112	Identifier	_h2
>3113	UnaryOperator	-
>3114	Argument	- _w2
>3115	UnaryOp	- _w2
>3116	Identifier	_w2
>3117	UnaryOperator	-
>3118	Callee	glVertex2f
>3119	Identifier	glVertex2f
>3120	ExpressionStatement	 
>3121	CallExpression	glVertex2f ( _w2 , _h2 )
>3122	ArgumentList	_w2
>3123	Argument	_h2
>3124	Identifier	_h2
>3125	Argument	_w2
>3126	Identifier	_w2
>3127	Callee	glVertex2f
>3128	Identifier	glVertex2f
>3129	ExpressionStatement	 
>3130	CallExpression	glVertex2f ( _w2 , - _h2 )
>3131	ArgumentList	_w2
>3132	Argument	- _h2
>3133	UnaryOp	- _h2
>3134	Identifier	_h2
>3135	UnaryOperator	-
>3136	Argument	_w2
>3137	Identifier	_w2
>3138	Callee	glVertex2f
>3139	Identifier	glVertex2f
>3140	ExpressionStatement	 
>3141	CallExpression	glVertex2f ( _w2 , _h2 )
>3142	ArgumentList	_w2
>3143	Argument	_h2
>3144	Identifier	_h2
>3145	Argument	_w2
>3146	Identifier	_w2
>3147	Callee	glVertex2f
>3148	Identifier	glVertex2f
>3149	ExpressionStatement	 
>3150	CallExpression	glVertex2f ( - _w2 , _h2 )
>3151	ArgumentList	- _w2
>3152	Argument	_h2
>3153	Identifier	_h2
>3154	Argument	- _w2
>3155	UnaryOp	- _w2
>3156	Identifier	_w2
>3157	UnaryOperator	-
>3158	Callee	glVertex2f
>3159	Identifier	glVertex2f
>3160	ExpressionStatement	 
>3161	CallExpression	glBegin ( GL_LINES )
>3162	ArgumentList	GL_LINES
>3163	Argument	GL_LINES
>3164	Identifier	GL_LINES
>3165	Callee	glBegin
>3166	Identifier	glBegin
>3167	ExpressionStatement	 
>3168	CallExpression	glColor4f ( renderBorderColor . x , renderBorderColor . y , renderBorderColor . z , 1 * alpha . x * alphaMod )
>3169	ArgumentList	renderBorderColor . x
>3170	Argument	1 * alpha . x * alphaMod
>3171	MultiplicativeExpression	1 * alpha . x * alphaMod
>3172	MultiplicativeExpression	alpha . x * alphaMod
>3173	Identifier	alphaMod
>3174	MemberAccess	alpha . x
>3175	Identifier	x
>3176	Identifier	alpha
>3177	PrimaryExpression	1
>3178	Argument	renderBorderColor . z
>3179	MemberAccess	renderBorderColor . z
>3180	Identifier	z
>3181	Identifier	renderBorderColor
>3182	Argument	renderBorderColor . y
>3183	MemberAccess	renderBorderColor . y
>3184	Identifier	y
>3185	Identifier	renderBorderColor
>3186	Argument	renderBorderColor . x
>3187	MemberAccess	renderBorderColor . x
>3188	Identifier	x
>3189	Identifier	renderBorderColor
>3190	Callee	glColor4f
>3191	Identifier	glColor4f
>3192	IfStatement	if ( renderCenter )
>3193	CompoundStatement	 
>3194	ExpressionStatement	 
>3195	CallExpression	glEnd ( )
>3196	ArgumentList	 
>3197	Callee	glEnd
>3198	Identifier	glEnd
>3199	ExpressionStatement	 
>3200	CallExpression	glVertex2f ( 0 , 0 )
>3201	ArgumentList	0
>3202	Argument	0
>3203	PrimaryExpression	0
>3204	Argument	0
>3205	PrimaryExpression	0
>3206	Callee	glVertex2f
>3207	Identifier	glVertex2f
>3208	ExpressionStatement	 
>3209	CallExpression	glBegin ( GL_POINTS )
>3210	ArgumentList	GL_POINTS
>3211	Argument	GL_POINTS
>3212	Identifier	GL_POINTS
>3213	Callee	glBegin
>3214	Identifier	glBegin
>3215	ExpressionStatement	 
>3216	CallExpression	glPointSize ( 16 )
>3217	ArgumentList	16
>3218	Argument	16
>3219	PrimaryExpression	16
>3220	Callee	glPointSize
>3221	Identifier	glPointSize
>3222	Condition	 
>3223	Identifier	renderCenter
>3224	ExpressionStatement	 
>3225	CallExpression	glColor4f ( renderBorderColor . x , renderBorderColor . y , renderBorderColor . z , borderAlpha * alpha . x * alphaMod )
>3226	ArgumentList	renderBorderColor . x
>3227	Argument	borderAlpha * alpha . x * alphaMod
>3228	MultiplicativeExpression	borderAlpha * alpha . x * alphaMod
>3229	MultiplicativeExpression	alpha . x * alphaMod
>3230	Identifier	alphaMod
>3231	MemberAccess	alpha . x
>3232	Identifier	x
>3233	Identifier	alpha
>3234	Identifier	borderAlpha
>3235	Argument	renderBorderColor . z
>3236	MemberAccess	renderBorderColor . z
>3237	Identifier	z
>3238	Identifier	renderBorderColor
>3239	Argument	renderBorderColor . y
>3240	MemberAccess	renderBorderColor . y
>3241	Identifier	y
>3242	Identifier	renderBorderColor
>3243	Argument	renderBorderColor . x
>3244	MemberAccess	renderBorderColor . x
>3245	Identifier	x
>3246	Identifier	renderBorderColor
>3247	Callee	glColor4f
>3248	Identifier	glColor4f
>3249	ExpressionStatement	 
>3250	CallExpression	glBindTexture ( GL_TEXTURE_2D , 0 )
>3251	ArgumentList	GL_TEXTURE_2D
>3252	Argument	0
>3253	PrimaryExpression	0
>3254	Argument	GL_TEXTURE_2D
>3255	Identifier	GL_TEXTURE_2D
>3256	Callee	glBindTexture
>3257	Identifier	glBindTexture
>3258	ExpressionStatement	 
>3259	CallExpression	glLineWidth ( 2 )
>3260	ArgumentList	2
>3261	Argument	2
>3262	PrimaryExpression	2
>3263	Callee	glLineWidth
>3264	Identifier	glLineWidth
>3265	Condition	 
>3266	Identifier	renderBorder
>3267	IfStatement	if ( ! strip . empty ( ) )
>3268	ElseStatement	else
>3269	CompoundStatement	 
>3270	IfStatement	if ( ! drawGrid )
>3271	ElseStatement	else
>3272	CompoundStatement	 
>3273	ExpressionStatement	 
>3274	CallExpression	renderGrid ( )
>3275	ArgumentList	 
>3276	Callee	renderGrid
>3277	Identifier	renderGrid
>3278	CompoundStatement	 
>3279	ExpressionStatement	 
>3280	CallExpression	glEnd ( )
>3281	ArgumentList	 
>3282	Callee	glEnd
>3283	Identifier	glEnd
>3284	CompoundStatement	 
>3285	ExpressionStatement	 
>3286	CallExpression	glVertex2f ( - _w2 , - _h2 )
>3287	ArgumentList	- _w2
>3288	Argument	- _h2
>3289	UnaryOp	- _h2
>3290	Identifier	_h2
>3291	UnaryOperator	-
>3292	Argument	- _w2
>3293	UnaryOp	- _w2
>3294	Identifier	_w2
>3295	UnaryOperator	-
>3296	Callee	glVertex2f
>3297	Identifier	glVertex2f
>3298	ExpressionStatement	 
>3299	CallExpression	glTexCoord2f ( upperLeftTextureCoordinates . x , 1.0f - lowerRightTextureCoordinates . y )
>3300	ArgumentList	upperLeftTextureCoordinates . x
>3301	Argument	1.0f - lowerRightTextureCoordinates . y
>3302	AdditiveExpression	1.0f - lowerRightTextureCoordinates . y
>3303	MemberAccess	lowerRightTextureCoordinates . y
>3304	Identifier	y
>3305	Identifier	lowerRightTextureCoordinates
>3306	PrimaryExpression	1.0f
>3307	Argument	upperLeftTextureCoordinates . x
>3308	MemberAccess	upperLeftTextureCoordinates . x
>3309	Identifier	x
>3310	Identifier	upperLeftTextureCoordinates
>3311	Callee	glTexCoord2f
>3312	Identifier	glTexCoord2f
>3313	ExpressionStatement	 
>3314	CallExpression	glVertex2f ( + _w2 , - _h2 )
>3315	ArgumentList	+ _w2
>3316	Argument	- _h2
>3317	UnaryOp	- _h2
>3318	Identifier	_h2
>3319	UnaryOperator	-
>3320	Argument	+ _w2
>3321	UnaryOp	+ _w2
>3322	Identifier	_w2
>3323	UnaryOperator	+
>3324	Callee	glVertex2f
>3325	Identifier	glVertex2f
>3326	ExpressionStatement	 
>3327	CallExpression	glTexCoord2f ( lowerRightTextureCoordinates . x , 1.0f - lowerRightTextureCoordinates . y )
>3328	ArgumentList	lowerRightTextureCoordinates . x
>3329	Argument	1.0f - lowerRightTextureCoordinates . y
>3330	AdditiveExpression	1.0f - lowerRightTextureCoordinates . y
>3331	MemberAccess	lowerRightTextureCoordinates . y
>3332	Identifier	y
>3333	Identifier	lowerRightTextureCoordinates
>3334	PrimaryExpression	1.0f
>3335	Argument	lowerRightTextureCoordinates . x
>3336	MemberAccess	lowerRightTextureCoordinates . x
>3337	Identifier	x
>3338	Identifier	lowerRightTextureCoordinates
>3339	Callee	glTexCoord2f
>3340	Identifier	glTexCoord2f
>3341	ExpressionStatement	 
>3342	CallExpression	glVertex2f ( + _w2 , + _h2 )
>3343	ArgumentList	+ _w2
>3344	Argument	+ _h2
>3345	UnaryOp	+ _h2
>3346	Identifier	_h2
>3347	UnaryOperator	+
>3348	Argument	+ _w2
>3349	UnaryOp	+ _w2
>3350	Identifier	_w2
>3351	UnaryOperator	+
>3352	Callee	glVertex2f
>3353	Identifier	glVertex2f
>3354	ExpressionStatement	 
>3355	CallExpression	glTexCoord2f ( lowerRightTextureCoordinates . x , 1.0f - upperLeftTextureCoordinates . y )
>3356	ArgumentList	lowerRightTextureCoordinates . x
>3357	Argument	1.0f - upperLeftTextureCoordinates . y
>3358	AdditiveExpression	1.0f - upperLeftTextureCoordinates . y
>3359	MemberAccess	upperLeftTextureCoordinates . y
>3360	Identifier	y
>3361	Identifier	upperLeftTextureCoordinates
>3362	PrimaryExpression	1.0f
>3363	Argument	lowerRightTextureCoordinates . x
>3364	MemberAccess	lowerRightTextureCoordinates . x
>3365	Identifier	x
>3366	Identifier	lowerRightTextureCoordinates
>3367	Callee	glTexCoord2f
>3368	Identifier	glTexCoord2f
>3369	ExpressionStatement	 
>3370	CallExpression	glVertex2f ( - _w2 , + _h2 )
>3371	ArgumentList	- _w2
>3372	Argument	+ _h2
>3373	UnaryOp	+ _h2
>3374	Identifier	_h2
>3375	UnaryOperator	+
>3376	Argument	- _w2
>3377	UnaryOp	- _w2
>3378	Identifier	_w2
>3379	UnaryOperator	-
>3380	Callee	glVertex2f
>3381	Identifier	glVertex2f
>3382	ExpressionStatement	 
>3383	CallExpression	glTexCoord2f ( upperLeftTextureCoordinates . x , 1.0f - upperLeftTextureCoordinates . y )
>3384	ArgumentList	upperLeftTextureCoordinates . x
>3385	Argument	1.0f - upperLeftTextureCoordinates . y
>3386	AdditiveExpression	1.0f - upperLeftTextureCoordinates . y
>3387	MemberAccess	upperLeftTextureCoordinates . y
>3388	Identifier	y
>3389	Identifier	upperLeftTextureCoordinates
>3390	PrimaryExpression	1.0f
>3391	Argument	upperLeftTextureCoordinates . x
>3392	MemberAccess	upperLeftTextureCoordinates . x
>3393	Identifier	x
>3394	Identifier	upperLeftTextureCoordinates
>3395	Callee	glTexCoord2f
>3396	Identifier	glTexCoord2f
>3397	ExpressionStatement	 
>3398	CallExpression	glBegin ( GL_QUADS )
>3399	ArgumentList	GL_QUADS
>3400	Argument	GL_QUADS
>3401	Identifier	GL_QUADS
>3402	Callee	glBegin
>3403	Identifier	glBegin
>3404	Condition	 
>3405	UnaryOp	! drawGrid
>3406	Identifier	drawGrid
>3407	UnaryOperator	!
>3408	CompoundStatement	 
>3409	ExpressionStatement	 
>3410	CallExpression	glEnd ( )
>3411	ArgumentList	 
>3412	Callee	glEnd
>3413	Identifier	glEnd
>3414	ForStatement	for ( int i = 0 ; i < strip . size ( ) ; i ++ )
>3415	CompoundStatement	 
>3416	ExpressionStatement	 
>3417	CallExpression	glVertex2f ( ( strip [ i ] . x * width ) - _w2 , strip [ i ] . y * height )
>3418	ArgumentList	( strip [ i ] . x * width ) - _w2
>3419	Argument	strip [ i ] . y * height
>3420	MultiplicativeExpression	strip [ i ] . y * height
>3421	Identifier	height
>3422	MemberAccess	strip [ i ] . y
>3423	Identifier	y
>3424	ArrayIndexing	strip [ i ]
>3425	Identifier	i
>3426	Identifier	strip
>3427	Argument	( strip [ i ] . x * width ) - _w2
>3428	AdditiveExpression	( strip [ i ] . x * width ) - _w2
>3429	Identifier	_w2
>3430	MultiplicativeExpression	strip [ i ] . x * width
>3431	Identifier	width
>3432	MemberAccess	strip [ i ] . x
>3433	Identifier	x
>3434	ArrayIndexing	strip [ i ]
>3435	Identifier	i
>3436	Identifier	strip
>3437	Callee	glVertex2f
>3438	Identifier	glVertex2f
>3439	IncDecOp	 
>3440	IncDec	++
>3441	Identifier	i
>3442	Condition	 
>3443	RelationalExpression	i < strip . size ( )
>3444	CallExpression	strip . size ( )
>3445	ArgumentList	 
>3446	Callee	strip . size
>3447	MemberAccess	strip . size
>3448	Identifier	size
>3449	Identifier	strip
>3450	Identifier	i
>3451	ForInit	 
>3452	IdentifierDeclStatement	int i = 0 ;
>3453	IdentifierDecl	i = 0
>3454	AssignmentExpr	i = 0
>3455	PrimaryExpression	0
>3456	Identifier	i
>3457	Identifier	i
>3458	IdentifierDeclType	int
>3459	ExpressionStatement	 
>3460	CallExpression	glBegin ( GL_POINTS )
>3461	ArgumentList	GL_POINTS
>3462	Argument	GL_POINTS
>3463	Identifier	GL_POINTS
>3464	Callee	glBegin
>3465	Identifier	glBegin
>3466	ExpressionStatement	 
>3467	CallExpression	glPointSize ( 64 )
>3468	ArgumentList	64
>3469	Argument	64
>3470	PrimaryExpression	64
>3471	Callee	glPointSize
>3472	Identifier	glPointSize
>3473	ExpressionStatement	 
>3474	CallExpression	glColor4f ( 1 , 0 , 0 , 1 )
>3475	ArgumentList	1
>3476	Argument	1
>3477	PrimaryExpression	1
>3478	Argument	0
>3479	PrimaryExpression	0
>3480	Argument	0
>3481	PrimaryExpression	0
>3482	Argument	1
>3483	PrimaryExpression	1
>3484	Callee	glColor4f
>3485	Identifier	glColor4f
>3486	ExpressionStatement	 
>3487	CallExpression	glBindTexture ( GL_TEXTURE_2D , 0 )
>3488	ArgumentList	GL_TEXTURE_2D
>3489	Argument	0
>3490	PrimaryExpression	0
>3491	Argument	GL_TEXTURE_2D
>3492	Identifier	GL_TEXTURE_2D
>3493	Callee	glBindTexture
>3494	Identifier	glBindTexture
>3495	ExpressionStatement	 
>3496	CallExpression	glEnd ( )
>3497	ArgumentList	 
>3498	Callee	glEnd
>3499	Identifier	glEnd
>3500	IfStatement	if ( ! stripVert )
>3501	CompoundStatement	 
>3502	ForStatement	for ( int i = 0 ; i < strip . size ( ) ; i ++ )
>3503	CompoundStatement	 
>3504	ExpressionStatement	 
>3505	CallExpression	glVertex2f ( strip [ i ] . x * width - _w2 , strip [ i ] . y * _h2 * 10 + _h2 )
>3506	ArgumentList	strip [ i ] . x * width - _w2
>3507	Argument	strip [ i ] . y * _h2 * 10 + _h2
>3508	AdditiveExpression	strip [ i ] . y * _h2 * 10 + _h2
>3509	Identifier	_h2
>3510	MultiplicativeExpression	strip [ i ] . y * _h2 * 10
>3511	MultiplicativeExpression	_h2 * 10
>3512	PrimaryExpression	10
>3513	Identifier	_h2
>3514	MemberAccess	strip [ i ] . y
>3515	Identifier	y
>3516	ArrayIndexing	strip [ i ]
>3517	Identifier	i
>3518	Identifier	strip
>3519	Argument	strip [ i ] . x * width - _w2
>3520	AdditiveExpression	strip [ i ] . x * width - _w2
>3521	Identifier	_w2
>3522	MultiplicativeExpression	strip [ i ] . x * width
>3523	Identifier	width
>3524	MemberAccess	strip [ i ] . x
>3525	Identifier	x
>3526	ArrayIndexing	strip [ i ]
>3527	Identifier	i
>3528	Identifier	strip
>3529	Callee	glVertex2f
>3530	Identifier	glVertex2f
>3531	ExpressionStatement	 
>3532	CallExpression	glTexCoord2f ( texBits * i , 1 )
>3533	ArgumentList	texBits * i
>3534	Argument	1
>3535	PrimaryExpression	1
>3536	Argument	texBits * i
>3537	MultiplicativeExpression	texBits * i
>3538	Identifier	i
>3539	Identifier	texBits
>3540	Callee	glTexCoord2f
>3541	Identifier	glTexCoord2f
>3542	ExpressionStatement	 
>3543	CallExpression	glVertex2f ( strip [ i ] . x * width - _w2 , strip [ i ] . y * _h2 * 10 - _h2 )
>3544	ArgumentList	strip [ i ] . x * width - _w2
>3545	Argument	strip [ i ] . y * _h2 * 10 - _h2
>3546	AdditiveExpression	strip [ i ] . y * _h2 * 10 - _h2
>3547	Identifier	_h2
>3548	MultiplicativeExpression	strip [ i ] . y * _h2 * 10
>3549	MultiplicativeExpression	_h2 * 10
>3550	PrimaryExpression	10
>3551	Identifier	_h2
>3552	MemberAccess	strip [ i ] . y
>3553	Identifier	y
>3554	ArrayIndexing	strip [ i ]
>3555	Identifier	i
>3556	Identifier	strip
>3557	Argument	strip [ i ] . x * width - _w2
>3558	AdditiveExpression	strip [ i ] . x * width - _w2
>3559	Identifier	_w2
>3560	MultiplicativeExpression	strip [ i ] . x * width
>3561	Identifier	width
>3562	MemberAccess	strip [ i ] . x
>3563	Identifier	x
>3564	ArrayIndexing	strip [ i ]
>3565	Identifier	i
>3566	Identifier	strip
>3567	Callee	glVertex2f
>3568	Identifier	glVertex2f
>3569	ExpressionStatement	 
>3570	CallExpression	glTexCoord2f ( texBits * i , 0 )
>3571	ArgumentList	texBits * i
>3572	Argument	0
>3573	PrimaryExpression	0
>3574	Argument	texBits * i
>3575	MultiplicativeExpression	texBits * i
>3576	Identifier	i
>3577	Identifier	texBits
>3578	Callee	glTexCoord2f
>3579	Identifier	glTexCoord2f
>3580	IncDecOp	 
>3581	IncDec	++
>3582	Identifier	i
>3583	Condition	 
>3584	RelationalExpression	i < strip . size ( )
>3585	CallExpression	strip . size ( )
>3586	ArgumentList	 
>3587	Callee	strip . size
>3588	MemberAccess	strip . size
>3589	Identifier	size
>3590	Identifier	strip
>3591	Identifier	i
>3592	ForInit	 
>3593	IdentifierDeclStatement	int i = 0 ;
>3594	IdentifierDecl	i = 0
>3595	AssignmentExpr	i = 0
>3596	PrimaryExpression	0
>3597	Identifier	i
>3598	Identifier	i
>3599	IdentifierDeclType	int
>3600	Condition	 
>3601	UnaryOp	! stripVert
>3602	Identifier	stripVert
>3603	UnaryOperator	!
>3604	ExpressionStatement	 
>3605	CallExpression	glBegin ( GL_QUAD_STRIP )
>3606	ArgumentList	GL_QUAD_STRIP
>3607	Argument	GL_QUAD_STRIP
>3608	Identifier	GL_QUAD_STRIP
>3609	Callee	glBegin
>3610	Identifier	glBegin
>3611	IdentifierDeclStatement	 
>3612	IdentifierDecl	texBits = 1.0f / ( strip . size ( ) - 1 )
>3613	AssignmentExpr	texBits = 1.0f / ( strip . size ( ) - 1 )
>3614	MultiplicativeExpression	1.0f / ( strip . size ( ) - 1 )
>3615	AdditiveExpression	strip . size ( ) - 1
>3616	PrimaryExpression	1
>3617	CallExpression	strip . size ( )
>3618	ArgumentList	 
>3619	Callee	strip . size
>3620	MemberAccess	strip . size
>3621	Identifier	size
>3622	Identifier	strip
>3623	PrimaryExpression	1.0f
>3624	Identifier	texBits
>3625	Identifier	texBits
>3626	IdentifierDeclType	const float
>3627	Condition	 
>3628	UnaryOp	! strip . empty ( )
>3629	CallExpression	strip . empty ( )
>3630	ArgumentList	 
>3631	Callee	strip . empty
>3632	MemberAccess	strip . empty
>3633	Identifier	empty
>3634	Identifier	strip
>3635	UnaryOperator	!
>3636	IdentifierDeclStatement	 
>3637	IdentifierDecl	_h2 = height / 2.0f
>3638	AssignmentExpr	_h2 = height / 2.0f
>3639	MultiplicativeExpression	height / 2.0f
>3640	PrimaryExpression	2.0f
>3641	Identifier	height
>3642	Identifier	_h2
>3643	Identifier	_h2
>3644	IdentifierDeclType	float
>3645	IdentifierDeclStatement	 
>3646	IdentifierDecl	_w2 = width / 2.0f
>3647	AssignmentExpr	_w2 = width / 2.0f
>3648	MultiplicativeExpression	width / 2.0f
>3649	PrimaryExpression	2.0f
>3650	Identifier	width
>3651	Identifier	_w2
>3652	Identifier	_w2
>3653	IdentifierDeclType	float
>3654	IfStatement	if ( ! renderQuad )
>3655	ReturnStatement	 
>3656	Condition	 
>3657	UnaryOp	! renderQuad
>3658	Identifier	renderQuad
>3659	UnaryOperator	!
>3719	FunctionDef	Quad 
>3720	ParameterList	 
>3721	ReturnType	void
>3722	CompoundStatement	 
>3723	ExpressionStatement	 
>3724	CallExpression	RenderObject 
>3725	ArgumentList	 
>3726	Callee	RenderObject 
>3727	Identifier	RenderObject 
>3731	FunctionDef	Quad 
>3732	ParameterList	 
>3733	ReturnType	void
>3734	CompoundStatement	 
>3735	ExpressionStatement	 
>3736	CallExpression	RenderObject 
>3737	ArgumentList	 
>3738	Callee	RenderObject 
>3739	Identifier	RenderObject 
>3740	IfStatement	if ( ! _fv )
>3741	ElseStatement	else
>3742	CompoundStatement	 
>3743	ExpressionStatement	 
>3744	AssignmentExpr	upperLeftTextureCoordinates . y = 0
>3745	PrimaryExpression	0
>3746	MemberAccess	upperLeftTextureCoordinates . y
>3747	Identifier	y
>3748	Identifier	upperLeftTextureCoordinates
>3749	ExpressionStatement	 
>3750	AssignmentExpr	lowerRightTextureCoordinates . y = 1
>3751	PrimaryExpression	1
>3752	MemberAccess	lowerRightTextureCoordinates . y
>3753	Identifier	y
>3754	Identifier	lowerRightTextureCoordinates
>3755	CompoundStatement	 
>3756	ExpressionStatement	 
>3757	AssignmentExpr	upperLeftTextureCoordinates . y = 1
>3758	PrimaryExpression	1
>3759	MemberAccess	upperLeftTextureCoordinates . y
>3760	Identifier	y
>3761	Identifier	upperLeftTextureCoordinates
>3762	ExpressionStatement	 
>3763	AssignmentExpr	lowerRightTextureCoordinates . y = 0
>3764	PrimaryExpression	0
>3765	MemberAccess	lowerRightTextureCoordinates . y
>3766	Identifier	y
>3767	Identifier	lowerRightTextureCoordinates
>3768	Condition	 
>3769	UnaryOp	! _fv
>3770	Identifier	_fv
>3771	UnaryOperator	!
>3780	FunctionDef	Quad 
>3781	ParameterList	 
>3782	ReturnType	void
>3783	CompoundStatement	 
>3784	IfStatement	if ( repeatingTextureToFill && texture )
>3785	ElseStatement	else
>3786	CompoundStatement	 
>3787	IfStatement	if ( fabsf ( lowerRightTextureCoordinates . x ) > 1 || fabsf ( lowerRightTextureCoordinates . y ) > 1 )
>3788	ExpressionStatement	 
>3789	AssignmentExpr	lowerRightTextureCoordinates = Vector ( 1 , 1 )
>3790	CallExpression	Vector ( 1 , 1 )
>3791	ArgumentList	1
>3792	Argument	1
>3793	PrimaryExpression	1
>3794	Argument	1
>3795	PrimaryExpression	1
>3796	Callee	Vector
>3797	Identifier	Vector
>3798	Identifier	lowerRightTextureCoordinates
>3799	Condition	 
>3800	OrExpression	fabsf ( lowerRightTextureCoordinates . x ) > 1 || fabsf ( lowerRightTextureCoordinates . y ) > 1
>3801	RelationalExpression	fabsf ( lowerRightTextureCoordinates . y ) > 1
>3802	PrimaryExpression	1
>3803	CallExpression	fabsf ( lowerRightTextureCoordinates . y )
>3804	ArgumentList	lowerRightTextureCoordinates . y
>3805	Argument	lowerRightTextureCoordinates . y
>3806	MemberAccess	lowerRightTextureCoordinates . y
>3807	Identifier	y
>3808	Identifier	lowerRightTextureCoordinates
>3809	Callee	fabsf
>3810	Identifier	fabsf
>3811	RelationalExpression	fabsf ( lowerRightTextureCoordinates . x ) > 1
>3812	PrimaryExpression	1
>3813	CallExpression	fabsf ( lowerRightTextureCoordinates . x )
>3814	ArgumentList	lowerRightTextureCoordinates . x
>3815	Argument	lowerRightTextureCoordinates . x
>3816	MemberAccess	lowerRightTextureCoordinates . x
>3817	Identifier	x
>3818	Identifier	lowerRightTextureCoordinates
>3819	Callee	fabsf
>3820	Identifier	fabsf
>3821	CompoundStatement	 
>3822	ExpressionStatement	 
>3823	AssignmentExpr	lowerRightTextureCoordinates . y = ( height * scale . y * repeatToFillScale . y ) / texture -> height + \
>3824	AdditiveExpression	( height * scale . y * repeatToFillScale . y ) / texture -> height + texOff . y
>3825	MemberAccess	texOff . y
>3826	Identifier	y
>3827	Identifier	texOff
>3828	MultiplicativeExpression	( height * scale . y * repeatToFillScale . y ) / texture -> height
>3829	PtrMemberAccess	texture -> height
>3830	Identifier	height
>3831	Identifier	texture
>3832	MultiplicativeExpression	height * scale . y * repeatToFillScale . y
>3833	MultiplicativeExpression	scale . y * repeatToFillScale . y
>3834	MemberAccess	repeatToFillScale . y
>3835	Identifier	y
>3836	Identifier	repeatToFillScale
>3837	MemberAccess	scale . y
>3838	Identifier	y
>3839	Identifier	scale
>3840	Identifier	height
>3841	MemberAccess	lowerRightTextureCoordinates . y
>3842	Identifier	y
>3843	Identifier	lowerRightTextureCoordinates
>3844	ExpressionStatement	 
>3845	AssignmentExpr	lowerRightTextureCoordinates . x = ( width * scale . x * repeatToFillScale . x ) / texture -> width + \
>3846	AdditiveExpression	( width * scale . x * repeatToFillScale . x ) / texture -> width + texOff . x
>3847	MemberAccess	texOff . x
>3848	Identifier	x
>3849	Identifier	texOff
>3850	MultiplicativeExpression	( width * scale . x * repeatToFillScale . x ) / texture -> width
>3851	PtrMemberAccess	texture -> width
>3852	Identifier	width
>3853	Identifier	texture
>3854	MultiplicativeExpression	width * scale . x * repeatToFillScale . x
>3855	MultiplicativeExpression	scale . x * repeatToFillScale . x
>3856	MemberAccess	repeatToFillScale . x
>3857	Identifier	x
>3858	Identifier	repeatToFillScale
>3859	MemberAccess	scale . x
>3860	Identifier	x
>3861	Identifier	scale
>3862	Identifier	width
>3863	MemberAccess	lowerRightTextureCoordinates . x
>3864	Identifier	x
>3865	Identifier	lowerRightTextureCoordinates
>3866	ExpressionStatement	 
>3867	AssignmentExpr	upperLeftTextureCoordinates . y = texOff . y
>3868	MemberAccess	texOff . y
>3869	Identifier	y
>3870	Identifier	texOff
>3871	MemberAccess	upperLeftTextureCoordinates . y
>3872	Identifier	y
>3873	Identifier	upperLeftTextureCoordinates
>3874	ExpressionStatement	 
>3875	AssignmentExpr	upperLeftTextureCoordinates . x = texOff . x
>3876	MemberAccess	texOff . x
>3877	Identifier	x
>3878	Identifier	texOff
>3879	MemberAccess	upperLeftTextureCoordinates . x
>3880	Identifier	x
>3881	Identifier	upperLeftTextureCoordinates
>3882	Condition	 
>3883	AndExpression	repeatingTextureToFill && texture
>3884	Identifier	texture
>3885	Identifier	repeatingTextureToFill
>3913	FunctionDef	Quad 
>3914	ParameterList	 
>3915	ReturnType	void
>3916	CompoundStatement	 
>3917	ExpressionStatement	 
>3918	CallExpression	RenderObject 
>3919	ArgumentList	 
>3920	Callee	RenderObject 
>3921	Identifier	RenderObject 
>3925	FunctionDef	Quad 
>3926	ParameterList	float dt
>3927	Parameter	 
>3928	Identifier	dt
>3929	ParameterType	float
>3930	ReturnType	void
>3931	CompoundStatement	 
>3932	IfStatement	if ( drawGrid && alpha . x > 0 && alphaMod > 0 )
>3933	CompoundStatement	 
>3934	ExpressionStatement	 
>3935	CallExpression	updateGrid ( dt )
>3936	ArgumentList	dt
>3937	Argument	dt
>3938	Identifier	dt
>3939	Callee	updateGrid
>3940	Identifier	updateGrid
>3941	Condition	 
>3942	AndExpression	drawGrid && alpha . x > 0 && alphaMod > 0
>3943	AndExpression	alpha . x > 0 && alphaMod > 0
>3944	RelationalExpression	alphaMod > 0
>3945	PrimaryExpression	0
>3946	Identifier	alphaMod
>3947	RelationalExpression	alpha . x > 0
>3948	PrimaryExpression	0
>3949	MemberAccess	alpha . x
>3950	Identifier	x
>3951	Identifier	alpha
>3952	Identifier	drawGrid
>3953	ExpressionStatement	 
>3954	CallExpression	upperLeftTextureCoordinates . update ( dt )
>3955	ArgumentList	dt
>3956	Argument	dt
>3957	Identifier	dt
>3958	Callee	upperLeftTextureCoordinates . update
>3959	MemberAccess	upperLeftTextureCoordinates . update
>3960	Identifier	update
>3961	Identifier	upperLeftTextureCoordinates
>3962	ExpressionStatement	 
>3963	CallExpression	lowerRightTextureCoordinates . update ( dt )
>3964	ArgumentList	dt
>3965	Argument	dt
>3966	Identifier	dt
>3967	Callee	lowerRightTextureCoordinates . update
>3968	MemberAccess	lowerRightTextureCoordinates . update
>3969	Identifier	update
>3970	Identifier	lowerRightTextureCoordinates
>3971	ExpressionStatement	 
>3972	CallExpression	refreshRepeatTextureToFill ( )
>3973	ArgumentList	 
>3974	Callee	refreshRepeatTextureToFill
>3975	Identifier	refreshRepeatTextureToFill
>3976	IfStatement	if ( autoHeight == AUTO_VIRTUALWIDTH )
>3977	ElseStatement	else
>3978	IfStatement	if ( autoHeight == AUTO_VIRTUALHEIGHT )
>3979	ExpressionStatement	 
>3980	AssignmentExpr	height = core -> getVirtualHeight ( )
>3981	CallExpression	core -> getVirtualHeight ( )
>3982	ArgumentList	 
>3983	Callee	core -> getVirtualHeight
>3984	PtrMemberAccess	core -> getVirtualHeight
>3985	Identifier	getVirtualHeight
>3986	Identifier	core
>3987	Identifier	height
>3988	Condition	 
>3989	EqualityExpression	autoHeight == AUTO_VIRTUALHEIGHT
>3990	Identifier	AUTO_VIRTUALHEIGHT
>3991	Identifier	autoHeight
>3992	ExpressionStatement	 
>3993	AssignmentExpr	height = core -> getVirtualWidth ( )
>3994	CallExpression	core -> getVirtualWidth ( )
>3995	ArgumentList	 
>3996	Callee	core -> getVirtualWidth
>3997	PtrMemberAccess	core -> getVirtualWidth
>3998	Identifier	getVirtualWidth
>3999	Identifier	core
>4000	Identifier	height
>4001	Condition	 
>4002	EqualityExpression	autoHeight == AUTO_VIRTUALWIDTH
>4003	Identifier	AUTO_VIRTUALWIDTH
>4004	Identifier	autoHeight
>4005	IfStatement	if ( autoWidth == AUTO_VIRTUALWIDTH )
>4006	ElseStatement	else
>4007	IfStatement	if ( autoWidth == AUTO_VIRTUALHEIGHT )
>4008	ExpressionStatement	 
>4009	AssignmentExpr	width = core -> getVirtualHeight ( )
>4010	CallExpression	core -> getVirtualHeight ( )
>4011	ArgumentList	 
>4012	Callee	core -> getVirtualHeight
>4013	PtrMemberAccess	core -> getVirtualHeight
>4014	Identifier	getVirtualHeight
>4015	Identifier	core
>4016	Identifier	width
>4017	Condition	 
>4018	EqualityExpression	autoWidth == AUTO_VIRTUALHEIGHT
>4019	Identifier	AUTO_VIRTUALHEIGHT
>4020	Identifier	autoWidth
>4021	ExpressionStatement	 
>4022	AssignmentExpr	width = core -> getVirtualWidth ( )
>4023	CallExpression	core -> getVirtualWidth ( )
>4024	ArgumentList	 
>4025	Callee	core -> getVirtualWidth
>4026	PtrMemberAccess	core -> getVirtualWidth
>4027	Identifier	getVirtualWidth
>4028	Identifier	core
>4029	Identifier	width
>4030	Condition	 
>4031	EqualityExpression	autoWidth == AUTO_VIRTUALWIDTH
>4032	Identifier	AUTO_VIRTUALWIDTH
>4033	Identifier	autoWidth
>4034	ExpressionStatement	 
>4035	CallExpression	RenderObject 
>4036	ArgumentList	dt
>4037	Argument	dt
>4038	Identifier	dt
>4039	Callee	RenderObject 
>4040	Identifier	RenderObject 
>4061	FunctionDef	Quad 
>4062	ParameterList	float w , float h
>4063	Parameter	 
>4064	Identifier	h
>4065	ParameterType	float
>4066	Parameter	 
>4067	Identifier	w
>4068	ParameterType	float
>4069	ReturnType	void
>4070	CompoundStatement	 
>4071	ExpressionStatement	 
>4072	AssignmentExpr	width = w
>4073	Identifier	w
>4074	Identifier	width
>4075	IfStatement	if ( h == - 1 )
>4076	ElseStatement	else
>4077	ExpressionStatement	 
>4078	AssignmentExpr	height = h
>4079	Identifier	h
>4080	Identifier	height
>4081	ExpressionStatement	 
>4082	AssignmentExpr	height = w
>4083	Identifier	w
>4084	Identifier	height
>4085	Condition	 
>4086	EqualityExpression	h == - 1
>4087	UnaryOp	- 1
>4088	PrimaryExpression	1
>4089	UnaryOperator	-
>4090	Identifier	h
>4098	FunctionDef	Quad 
>4099	ParameterList	float w
>4100	Parameter	 
>4101	Identifier	w
>4102	ParameterType	float
>4103	ReturnType	void
>4104	CompoundStatement	 
>4105	ExpressionStatement	 
>4106	AssignmentExpr	width = w
>4107	Identifier	w
>4108	Identifier	width
>4114	FunctionDef	Quad 
>4115	ParameterList	float h
>4116	Parameter	 
>4117	Identifier	h
>4118	ParameterType	float
>4119	ReturnType	void
>4120	CompoundStatement	 
>4121	ExpressionStatement	 
>4122	AssignmentExpr	height = h
>4123	Identifier	h
>4124	Identifier	height
>4130	FunctionDef	Quad 
>4131	ParameterList	 
>4132	ReturnType	void
>4133	CompoundStatement	 
>4134	IfStatement	if ( texture )
>4135	ElseStatement	else
>4136	CompoundStatement	 
>4137	ExpressionStatement	 
>4138	AssignmentExpr	height = 64
>4139	PrimaryExpression	64
>4140	Identifier	height
>4141	ExpressionStatement	 
>4142	AssignmentExpr	width = 64
>4143	PrimaryExpression	64
>4144	Identifier	width
>4145	CompoundStatement	 
>4146	ExpressionStatement	 
>4147	AssignmentExpr	height = this -> texture -> height
>4148	PtrMemberAccess	this -> texture -> height
>4149	Identifier	height
>4150	PtrMemberAccess	this -> texture
>4151	Identifier	texture
>4152	Identifier	this
>4153	Identifier	height
>4154	ExpressionStatement	 
>4155	AssignmentExpr	width = this -> texture -> width
>4156	PtrMemberAccess	this -> texture -> width
>4157	Identifier	width
>4158	PtrMemberAccess	this -> texture
>4159	Identifier	texture
>4160	Identifier	this
>4161	Identifier	width
>4162	Condition	 
>4163	Identifier	texture
>4177	FunctionDef	PauseQuad 
>4178	ParameterList	 
>4179	CompoundStatement	 
>4180	ExpressionStatement	 
>4181	CallExpression	addType ( SCO_PAUSEQUAD )
>4182	ArgumentList	SCO_PAUSEQUAD
>4183	Argument	SCO_PAUSEQUAD
>4184	Identifier	SCO_PAUSEQUAD
>4185	Callee	addType
>4186	Identifier	addType
>4191	FunctionDef	PauseQuad 
>4192	ParameterList	float dt
>4193	Parameter	 
>4194	Identifier	dt
>4195	ParameterType	float
>4196	ReturnType	void
>4197	CompoundStatement	 
>4198	IfStatement	if ( core -> particlesPaused <= pauseLevel )
>4199	CompoundStatement	 
>4200	ExpressionStatement	 
>4201	CallExpression	Quad 
>4202	ArgumentList	dt
>4203	Argument	dt
>4204	Identifier	dt
>4205	Callee	Quad 
>4206	Identifier	Quad 
>4207	Condition	 
>4208	RelationalExpression	core -> particlesPaused <= pauseLevel
>4209	Identifier	pauseLevel
>4210	PtrMemberAccess	core -> particlesPaused
>4211	Identifier	particlesPaused
>4212	Identifier	core
<5=13,6
<6=10,7
<7=9,8
<10=12,11
<13=25,21,14
<14=15
<15=19,16
<16=17
<17=18
<19=20
<21=22
<22=24,23
<25=26
<26=28,27
<28=29
<36=63,62,37
<37=59,56,53,50,47,44,41,38
<38=40,39
<41=43,42
<44=46,45
<47=49,48
<50=52,51
<53=55,54
<56=58,57
<59=61,60
<63=151,64
<64=143,126,65
<65=66
<66=120,114,108,102,96,92,88,84,75,71,67
<67=68
<68=70,69
<71=72
<72=74,73
<75=76
<76=82,77
<77=80,78
<78=79
<80=81
<82=83
<84=85
<85=87,86
<88=89
<89=91,90
<92=93
<93=95,94
<96=97
<97=99,98
<99=101,100
<102=103
<103=105,104
<105=107,106
<108=109
<109=111,110
<111=113,112
<114=115
<115=117,116
<117=119,118
<120=121
<121=123,122
<123=125,124
<126=139,135,131,127
<127=128
<128=130,129
<131=132
<132=134,133
<135=136
<136=138,137
<139=140
<140=142,141
<143=144
<144=148,145
<145=147,146
<148=150,149
<151=152
<152=154,153
<154=155
<181=190,189,182
<182=186,183
<183=185,184
<186=188,187
<190=200,196,191
<191=192
<192=194,193
<194=195
<196=197
<197=199,198
<200=201
<201=205,202
<202=203
<203=204
<205=206
<206=208,207
<216=222,221,217
<217=218
<218=220,219
<222=280,223
<223=272,263,260,224
<224=225
<225=251,226
<226=239,227
<227=228
<228=234,229
<229=231,230
<231=233,232
<234=236,235
<236=238,237
<239=240
<240=246,241
<241=243,242
<243=245,244
<246=248,247
<248=250,249
<251=252
<252=259,253
<253=255,254
<255=256
<256=258,257
<260=262,261
<263=264
<264=271,265
<265=267,266
<267=268
<268=270,269
<272=273
<273=274
<274=279,278,275
<275=277,276
<280=281
<281=283,282
<283=284
<300=309,308,301
<301=305,302
<302=304,303
<305=307,306
<309=382,378,374,373,372,371,370,369,368,367,366,365,315,310
<310=311
<311=313,312
<313=314
<315=357,353,350,316
<316=344,317
<317=336,332,329,318
<318=319
<319=320
<320=322,321
<322=324,323
<324=326,325
<326=328,327
<329=331,330
<332=333
<333=335,334
<336=337
<337=338
<338=343,342,339
<339=341,340
<344=345
<345=347,346
<347=349,348
<350=352,351
<353=354
<354=356,355
<357=358
<358=359
<359=364,363,360
<360=362,361
<374=375
<375=377,376
<378=379
<379=381,380
<382=383
<383=385,384
<385=386
<403=415,414,404
<404=411,408,405
<405=407,406
<408=410,409
<411=413,412
<415=416
<416=428,417
<417=418
<418=419
<419=421,420
<421=423,422
<423=425,424
<425=427,426
<428=429
<429=441,430
<430=438,431
<431=435,432
<432=434,433
<435=437,436
<438=440,439
<441=443,442
<459=468,467,460
<460=464,461
<461=463,462
<464=466,465
<468=614,609,469
<469=601,592,589,470
<470=471
<471=585,529,472
<472=473
<473=474
<474=521,517,514,475
<475=476
<476=506,502,499,477
<477=478
<478=490,479
<479=480
<480=481
<481=485,482
<482=484,483
<485=487,486
<487=489,488
<490=491
<491=498,492
<492=494,493
<494=495
<495=497,496
<499=501,500
<502=503
<503=505,504
<506=507
<507=508
<508=513,512,509
<509=511,510
<514=516,515
<517=518
<518=520,519
<521=522
<522=523
<523=528,527,524
<524=526,525
<529=530
<530=577,573,570,531
<531=532
<532=562,558,555,533
<533=534
<534=546,535
<535=536
<536=537
<537=541,538
<538=540,539
<541=543,542
<543=545,544
<546=547
<547=554,548
<548=550,549
<550=551
<551=553,552
<555=557,556
<558=559
<559=561,560
<562=563
<563=564
<564=569,568,565
<565=567,566
<570=572,571
<573=574
<574=576,575
<577=578
<578=579
<579=584,583,580
<580=582,581
<585=586
<586=588,587
<589=591,590
<592=593
<593=600,594
<594=596,595
<596=597
<597=599,598
<601=602
<602=603
<603=608,607,604
<604=606,605
<609=610
<610=612,611
<612=613
<614=616,615
<616=617
<617=619,618
<638=641,640,639
<641=642
<642=643
<643=655,644
<644=653,645
<645=646
<646=647
<647=649,648
<649=650
<650=652,651
<653=654
<662=665,664,663
<665=666
<666=734,676,667
<667=668
<668=669
<669=670
<670=674,671
<671=672
<672=673
<674=675
<676=677
<677=726,717,714,678
<678=695,687,679
<679=680
<680=682,681
<682=684,683
<684=686,685
<687=688
<688=690,689
<690=692,691
<692=694,693
<695=696
<696=713,712,697
<697=711,698
<698=710,699
<699=708,700
<700=701
<701=702
<702=704,703
<704=705
<705=707,706
<708=709
<714=716,715
<717=718
<718=725,719
<719=721,720
<721=722
<722=724,723
<726=727
<727=728
<728=733,732,729
<729=731,730
<734=735
<735=737,736
<751=754,753,752
<754=755
<755=817,813,810,756
<756=757
<757=802,798,795,758
<758=777,759
<759=760
<760=770,761
<761=763,762
<763=769,764
<764=768,765
<765=767,766
<770=772,771
<772=774,773
<774=776,775
<777=778
<778=788,779
<779=781,780
<781=787,782
<782=786,783
<783=785,784
<788=790,789
<790=792,791
<792=794,793
<795=797,796
<798=799
<799=801,800
<802=803
<803=804
<804=809,808,805
<805=807,806
<810=812,811
<813=814
<814=816,815
<817=818
<818=819
<819=824,823,820
<820=822,821
<840=846,845,841
<841=842
<842=844,843
<846=993,992,991,990,989,988,986,973,962,953,945,937,931,918,905,897,889,881,873,865,847
<847=848
<848=856,849
<849=854,850
<850=851
<851=853,852
<854=855
<856=857
<857=859,858
<859=861,860
<861=862
<862=864,863
<865=866
<866=870,867
<867=869,868
<870=872,871
<873=874
<874=878,875
<875=877,876
<878=880,879
<881=882
<882=886,883
<883=885,884
<886=888,887
<889=890
<890=894,891
<891=893,892
<894=896,895
<897=898
<898=902,899
<899=901,900
<902=904,903
<905=913,906
<906=907
<907=909,908
<909=910
<910=912,911
<913=914
<914=916,915
<916=917
<918=919
<919=925,920
<920=923,921
<921=922
<923=924
<925=926
<926=928,927
<928=930,929
<931=932
<932=934,933
<934=936,935
<937=938
<938=942,939
<939=941,940
<942=944,943
<945=946
<946=950,947
<947=949,948
<950=952,951
<953=954
<954=958,955
<955=956
<956=957
<958=959
<959=961,960
<962=963
<963=969,964
<964=965
<965=966
<966=968,967
<969=970
<970=972,971
<973=974
<974=982,975
<975=976
<976=977
<977=979,978
<979=981,980
<982=983
<983=985,984
<986=987
<993=995,994
<995=996
<996=1000,997
<997=999,998
<1033=1042,1041,1034
<1034=1038,1035
<1035=1037,1036
<1038=1040,1039
<1042=1052,1043
<1043=1044
<1044=1048,1045
<1045=1046
<1046=1047
<1048=1049
<1049=1051,1050
<1052=1061,1053
<1053=1054
<1054=1055
<1055=1059,1056
<1056=1057
<1057=1058
<1059=1060
<1061=1062
<1062=1075,1063
<1063=1074,1064
<1064=1066,1065
<1066=1067
<1067=1069,1068
<1069=1071,1070
<1071=1073,1072
<1075=1077,1076
<1090=1093,1092,1091
<1093=1170,1166,1162,1158,1154,1150,1144,1140,1136,1132,1128,1124,1120,1109,1098,1094
<1094=1095
<1095=1097,1096
<1098=1099
<1099=1108,1100
<1100=1106,1101
<1101=1104,1102
<1102=1103
<1104=1105
<1106=1107
<1109=1110
<1110=1119,1111
<1111=1117,1112
<1112=1115,1113
<1113=1114
<1115=1116
<1117=1118
<1120=1121
<1121=1123,1122
<1124=1125
<1125=1127,1126
<1128=1129
<1129=1131,1130
<1132=1133
<1133=1135,1134
<1136=1137
<1137=1139,1138
<1140=1141
<1141=1143,1142
<1144=1145
<1145=1149,1146
<1146=1148,1147
<1150=1151
<1151=1153,1152
<1154=1155
<1155=1157,1156
<1158=1159
<1159=1161,1160
<1162=1163
<1163=1165,1164
<1166=1167
<1167=1169,1168
<1170=1171
<1171=1180,1172
<1172=1178,1173
<1173=1176,1174
<1174=1175
<1176=1177
<1178=1179
<1205=1207,1206
<1207=1217,1213,1208
<1208=1209
<1209=1211,1210
<1211=1212
<1213=1214
<1214=1216,1215
<1217=1218
<1218=1222,1219
<1219=1220
<1220=1221
<1222=1223
<1229=1232,1231,1230
<1232=1233
<1233=1268,1234
<1234=1244,1243,1242,1241,1239,1235
<1235=1236
<1236=1238,1237
<1239=1240
<1244=1260,1256,1253,1245
<1245=1252,1251,1250,1246
<1246=1247
<1247=1249,1248
<1253=1255,1254
<1256=1257
<1257=1259,1258
<1260=1261
<1261=1262
<1262=1267,1266,1263
<1263=1265,1264
<1268=1269
<1276=1279,1278,1277
<1279=1285,1280
<1280=1281
<1281=1283,1282
<1283=1284
<1285=1286
<1286=1288,1287
<1288=1289
<1293=1302,1301,1294
<1294=1298,1295
<1295=1297,1296
<1298=1300,1299
<1302=1419,1399,1379,1370,1361,1351,1305,1303
<1303=1304
<1305=1331,1306
<1306=1307
<1307=1311,1308
<1308=1309
<1309=1310
<1311=1312
<1312=1322,1313
<1313=1319,1314
<1314=1316,1315
<1316=1318,1317
<1319=1321,1320
<1322=1328,1323
<1323=1325,1324
<1325=1327,1326
<1328=1330,1329
<1331=1332
<1332=1342,1333
<1333=1339,1334
<1334=1336,1335
<1336=1338,1337
<1339=1341,1340
<1342=1348,1343
<1343=1345,1344
<1345=1347,1346
<1348=1350,1349
<1351=1352
<1352=1360,1359,1353
<1353=1358,1354
<1354=1356,1355
<1356=1357
<1361=1366,1362
<1362=1363
<1363=1365,1364
<1366=1367
<1367=1369,1368
<1370=1375,1371
<1371=1372
<1372=1374,1373
<1375=1376
<1376=1378,1377
<1379=1380
<1380=1398,1397,1381
<1381=1396,1382
<1382=1384,1383
<1384=1394,1385
<1385=1386
<1386=1387
<1387=1393,1388
<1388=1392,1389
<1389=1391,1390
<1394=1395
<1399=1400
<1400=1418,1417,1401
<1401=1416,1402
<1402=1404,1403
<1404=1414,1405
<1405=1406
<1406=1407
<1407=1413,1408
<1408=1412,1409
<1409=1411,1410
<1414=1415
<1419=1420
<1420=1428,1427,1421
<1421=1426,1422
<1422=1424,1423
<1424=1425
<1452=1461,1460,1453
<1453=1457,1454
<1454=1456,1455
<1457=1459,1458
<1461=1577,1554,1545,1536,1526,1464,1462
<1462=1463
<1464=1498,1465
<1465=1466
<1466=1470,1467
<1467=1468
<1468=1469
<1470=1471
<1471=1485,1472
<1472=1482,1473
<1473=1479,1474
<1474=1476,1475
<1476=1478,1477
<1479=1481,1480
<1482=1484,1483
<1485=1495,1486
<1486=1492,1487
<1487=1489,1488
<1489=1491,1490
<1492=1494,1493
<1495=1497,1496
<1498=1499
<1499=1513,1500
<1500=1510,1501
<1501=1507,1502
<1502=1504,1503
<1504=1506,1505
<1507=1509,1508
<1510=1512,1511
<1513=1523,1514
<1514=1520,1515
<1515=1517,1516
<1517=1519,1518
<1520=1522,1521
<1523=1525,1524
<1526=1527
<1527=1535,1534,1528
<1528=1533,1529
<1529=1531,1530
<1531=1532
<1536=1541,1537
<1537=1538
<1538=1540,1539
<1541=1542
<1542=1544,1543
<1545=1550,1546
<1546=1547
<1547=1549,1548
<1550=1551
<1551=1553,1552
<1554=1555
<1555=1576,1575,1556
<1556=1574,1557
<1557=1559,1558
<1559=1572,1560
<1560=1561
<1561=1562
<1562=1571,1563
<1563=1570,1564
<1564=1566,1565
<1566=1568,1567
<1568=1569
<1572=1573
<1577=1578
<1578=1599,1598,1579
<1579=1597,1580
<1580=1582,1581
<1582=1595,1583
<1583=1584
<1584=1585
<1585=1594,1586
<1586=1593,1587
<1587=1589,1588
<1589=1591,1590
<1591=1592
<1595=1596
<1625=1637,1636,1626
<1626=1633,1630,1627
<1627=1629,1628
<1630=1632,1631
<1633=1635,1634
<1637=1721,1712,1702,1640,1638
<1638=1639
<1640=1674,1641
<1641=1642
<1642=1646,1643
<1643=1644
<1644=1645
<1646=1647
<1647=1661,1648
<1648=1658,1649
<1649=1655,1650
<1650=1652,1651
<1652=1654,1653
<1655=1657,1656
<1658=1660,1659
<1661=1671,1662
<1662=1668,1663
<1663=1665,1664
<1665=1667,1666
<1668=1670,1669
<1671=1673,1672
<1674=1675
<1675=1689,1676
<1676=1686,1677
<1677=1683,1678
<1678=1680,1679
<1680=1682,1681
<1683=1685,1684
<1686=1688,1687
<1689=1699,1690
<1690=1696,1691
<1691=1693,1692
<1693=1695,1694
<1696=1698,1697
<1699=1701,1700
<1702=1703
<1703=1711,1710,1704
<1704=1709,1705
<1705=1707,1706
<1707=1708
<1712=1713
<1713=1720,1719,1714
<1714=1718,1715
<1715=1717,1716
<1721=1722
<1722=1729,1728,1723
<1723=1727,1724
<1724=1726,1725
<1749=1755,1754,1750
<1750=1751
<1751=1753,1752
<1755=1919,1756
<1756=1915,1757
<1757=1909,1904,1895,1758
<1758=1887,1883,1880,1759
<1759=1871,1864,1846,1760
<1760=1838,1834,1831,1761
<1761=1822,1772,1762
<1762=1763
<1763=1765,1764
<1765=1767,1766
<1767=1769,1768
<1769=1771,1770
<1772=1818,1773
<1773=1802,1774
<1774=1796,1786,1775
<1775=1776
<1776=1777
<1777=1779,1778
<1779=1781,1780
<1781=1783,1782
<1783=1785,1784
<1786=1787
<1787=1789,1788
<1789=1791,1790
<1791=1793,1792
<1793=1795,1794
<1796=1797
<1797=1801,1798
<1798=1800,1799
<1802=1803
<1803=1817,1816,1804
<1804=1815,1805
<1805=1807,1806
<1807=1813,1808
<1808=1809
<1809=1810
<1810=1812,1811
<1813=1814
<1818=1819
<1819=1821,1820
<1822=1823
<1823=1830,1829,1824
<1824=1828,1825
<1825=1827,1826
<1831=1833,1832
<1834=1835
<1835=1837,1836
<1838=1839
<1839=1840
<1840=1845,1844,1841
<1841=1843,1842
<1846=1860,1847
<1847=1848
<1848=1859,1849
<1849=1851,1850
<1851=1857,1852
<1852=1853
<1853=1854
<1854=1856,1855
<1857=1858
<1860=1861
<1861=1863,1862
<1864=1865
<1865=1870,1869,1866
<1866=1868,1867
<1871=1872
<1872=1879,1878,1873
<1873=1877,1874
<1874=1876,1875
<1880=1882,1881
<1883=1884
<1884=1886,1885
<1887=1888
<1888=1889
<1889=1894,1893,1890
<1890=1892,1891
<1895=1896
<1896=1903,1902,1897
<1897=1901,1898
<1898=1900,1899
<1904=1905
<1905=1907,1906
<1907=1908
<1909=1910
<1910=1914,1911
<1911=1913,1912
<1915=1916
<1916=1918,1917
<1919=1921,1920
<1921=1922
<1922=1924,1923
<1958=1961,1960,1959
<1961=2755,2733,2711,2690,2669,2656,2643,2631,2619,2608,2597,2586,2571,2564,2557,2548,2180,2175,1962
<1962=2173,1963
<1963=2164,2157,2146,2139,1985,1980,1964
<1964=1978,1965
<1965=1966
<1966=1976,1967
<1967=1974,1968
<1968=1969
<1969=1971,1970
<1971=1973,1972
<1974=1975
<1976=1977
<1978=1979
<1980=1981
<1981=1983,1982
<1983=1984
<1985=2131,2125,2122,1986
<1986=1987
<1987=2114,2108,2105,1988
<1988=2080,2051,2018,1989
<1989=1990
<1990=2016,1991
<1991=2004,1992
<1992=1993
<1993=2003,1994
<1994=1996,1995
<1996=1998,1997
<1998=2002,1999
<1999=2001,2000
<2004=2005
<2005=2015,2006
<2006=2008,2007
<2008=2010,2009
<2010=2014,2011
<2011=2013,2012
<2016=2017
<2018=2019
<2019=2049,2020
<2020=2035,2021
<2021=2022
<2022=2034,2023
<2023=2025,2024
<2025=2029,2026
<2026=2028,2027
<2029=2033,2030
<2030=2032,2031
<2035=2036
<2036=2048,2037
<2037=2039,2038
<2039=2043,2040
<2040=2042,2041
<2043=2047,2044
<2044=2046,2045
<2049=2050
<2051=2052
<2052=2078,2053
<2053=2066,2054
<2054=2055
<2055=2065,2056
<2056=2058,2057
<2058=2062,2059
<2059=2061,2060
<2062=2064,2063
<2066=2067
<2067=2077,2068
<2068=2070,2069
<2070=2074,2071
<2071=2073,2072
<2074=2076,2075
<2078=2079
<2080=2081
<2081=2103,2082
<2082=2093,2083
<2083=2084
<2084=2092,2085
<2085=2087,2086
<2087=2089,2088
<2089=2091,2090
<2093=2094
<2094=2102,2095
<2095=2097,2096
<2097=2099,2098
<2099=2101,2100
<2103=2104
<2105=2107,2106
<2108=2109
<2109=2113,2110
<2110=2112,2111
<2114=2115
<2115=2116
<2116=2121,2120,2117
<2117=2119,2118
<2122=2124,2123
<2125=2126
<2126=2130,2127
<2127=2129,2128
<2131=2132
<2132=2133
<2133=2138,2137,2134
<2134=2136,2135
<2139=2140
<2140=2144,2141
<2141=2142
<2142=2143
<2144=2145
<2146=2147
<2147=2155,2148
<2148=2153,2151,2149
<2149=2150
<2151=2152
<2153=2154
<2155=2156
<2157=2158
<2158=2162,2159
<2159=2160
<2160=2161
<2162=2163
<2164=2165
<2165=2171,2166
<2166=2169,2167
<2167=2168
<2169=2170
<2171=2172
<2173=2174
<2175=2176
<2176=2178,2177
<2178=2179
<2180=2540,2534,2523,2181
<2181=2512,2503,2182
<2182=2495,2489,2478,2183
<2183=2184
<2184=2430,2185
<2185=2409,2400,2375,2352,2343,2314,2289,2280,2247,2224,2215,2186
<2186=2187
<2187=2213,2188
<2188=2201,2189
<2189=2190
<2190=2200,2191
<2191=2193,2192
<2193=2195,2194
<2195=2199,2196
<2196=2198,2197
<2201=2202
<2202=2212,2203
<2203=2205,2204
<2205=2207,2206
<2207=2211,2208
<2208=2210,2209
<2213=2214
<2215=2216
<2216=2222,2217
<2217=2220,2218
<2218=2219
<2220=2221
<2222=2223
<2224=2225
<2225=2245,2226
<2226=2243,2241,2239,2227
<2227=2228
<2228=2238,2229
<2229=2231,2230
<2231=2233,2232
<2233=2237,2234
<2234=2236,2235
<2239=2240
<2241=2242
<2243=2244
<2245=2246
<2247=2248
<2248=2278,2249
<2249=2264,2250
<2250=2251
<2251=2263,2252
<2252=2254,2253
<2254=2258,2255
<2255=2257,2256
<2258=2262,2259
<2259=2261,2260
<2264=2265
<2265=2277,2266
<2266=2268,2267
<2268=2272,2269
<2269=2271,2270
<2272=2276,2273
<2273=2275,2274
<2278=2279
<2280=2281
<2281=2287,2282
<2282=2285,2283
<2283=2284
<2285=2286
<2287=2288
<2289=2290
<2290=2312,2291
<2291=2310,2308,2306,2292
<2292=2293
<2293=2305,2294
<2294=2296,2295
<2296=2300,2297
<2297=2299,2298
<2300=2304,2301
<2301=2303,2302
<2306=2307
<2308=2309
<2310=2311
<2312=2313
<2314=2315
<2315=2341,2316
<2316=2329,2317
<2317=2318
<2318=2328,2319
<2319=2321,2320
<2321=2325,2322
<2322=2324,2323
<2325=2327,2326
<2329=2330
<2330=2340,2331
<2331=2333,2332
<2333=2337,2334
<2334=2336,2335
<2337=2339,2338
<2341=2342
<2343=2344
<2344=2350,2345
<2345=2348,2346
<2346=2347
<2348=2349
<2350=2351
<2352=2353
<2353=2373,2354
<2354=2371,2369,2367,2355
<2355=2356
<2356=2366,2357
<2357=2359,2358
<2359=2363,2360
<2360=2362,2361
<2363=2365,2364
<2367=2368
<2369=2370
<2371=2372
<2373=2374
<2375=2376
<2376=2398,2377
<2377=2388,2378
<2378=2379
<2379=2387,2380
<2380=2382,2381
<2382=2384,2383
<2384=2386,2385
<2388=2389
<2389=2397,2390
<2390=2392,2391
<2392=2394,2393
<2394=2396,2395
<2398=2399
<2400=2401
<2401=2407,2402
<2402=2405,2403
<2403=2404
<2405=2406
<2407=2408
<2409=2410
<2410=2428,2411
<2411=2426,2424,2422,2412
<2412=2413
<2413=2421,2414
<2414=2416,2415
<2416=2418,2417
<2418=2420,2419
<2422=2423
<2424=2425
<2426=2427
<2428=2429
<2430=2431
<2431=2469,2432
<2432=2458,2433
<2433=2447,2434
<2434=2436,2435
<2436=2438,2437
<2438=2442,2439
<2439=2441,2440
<2442=2446,2443
<2443=2445,2444
<2447=2449,2448
<2449=2451,2450
<2451=2453,2452
<2453=2457,2454
<2454=2456,2455
<2458=2460,2459
<2460=2462,2461
<2462=2466,2463
<2463=2465,2464
<2466=2468,2467
<2469=2471,2470
<2471=2473,2472
<2473=2475,2474
<2475=2477,2476
<2478=2486,2479
<2479=2483,2480
<2480=2482,2481
<2483=2485,2484
<2486=2488,2487
<2489=2490
<2490=2494,2491
<2491=2493,2492
<2495=2496
<2496=2497
<2497=2502,2501,2498
<2498=2500,2499
<2503=2504
<2504=2511,2510,2505
<2505=2509,2506
<2506=2508,2507
<2512=2513
<2513=2522,2521,2514
<2514=2520,2515
<2515=2519,2516
<2516=2518,2517
<2523=2531,2524
<2524=2528,2525
<2525=2527,2526
<2528=2530,2529
<2531=2533,2532
<2534=2535
<2535=2539,2536
<2536=2538,2537
<2540=2541
<2541=2542
<2542=2547,2546,2543
<2543=2545,2544
<2548=2549
<2549=2556,2555,2550
<2550=2554,2551
<2551=2553,2552
<2557=2558
<2558=2563,2562,2559
<2559=2561,2560
<2564=2565
<2565=2569,2566
<2566=2567
<2567=2568
<2569=2570
<2571=2572
<2572=2585,2584,2573
<2573=2583,2574
<2574=2578,2575
<2575=2577,2576
<2578=2580,2579
<2580=2582,2581
<2586=2587
<2587=2596,2595,2588
<2588=2594,2589
<2589=2591,2590
<2591=2593,2592
<2597=2598
<2598=2607,2606,2599
<2599=2605,2600
<2600=2602,2601
<2602=2604,2603
<2608=2609
<2609=2618,2617,2610
<2610=2616,2611
<2611=2613,2612
<2613=2615,2614
<2619=2620
<2620=2630,2629,2621
<2621=2628,2622
<2622=2624,2623
<2624=2625
<2625=2627,2626
<2631=2632
<2632=2642,2641,2633
<2633=2640,2634
<2634=2636,2635
<2636=2637
<2637=2639,2638
<2643=2644
<2644=2655,2654,2645
<2645=2653,2646
<2646=2652,2647
<2647=2651,2648
<2648=2650,2649
<2656=2657
<2657=2668,2667,2658
<2658=2666,2659
<2659=2665,2660
<2660=2664,2661
<2661=2663,2662
<2669=2670
<2670=2689,2688,2671
<2671=2687,2672
<2672=2679,2676,2673
<2673=2675,2674
<2676=2678,2677
<2679=2680
<2680=2684,2681
<2681=2683,2682
<2684=2686,2685
<2690=2691
<2691=2710,2709,2692
<2692=2708,2693
<2693=2700,2697,2694
<2694=2696,2695
<2697=2699,2698
<2700=2701
<2701=2705,2702
<2702=2704,2703
<2705=2707,2706
<2711=2712
<2712=2732,2731,2713
<2713=2730,2714
<2714=2728,2715
<2715=2716
<2716=2717
<2717=2723,2718
<2718=2720,2719
<2720=2722,2721
<2723=2725,2724
<2725=2727,2726
<2728=2729
<2733=2734
<2734=2754,2753,2735
<2735=2752,2736
<2736=2750,2737
<2737=2738
<2738=2739
<2739=2745,2740
<2740=2742,2741
<2742=2744,2743
<2745=2747,2746
<2747=2749,2748
<2750=2751
<2755=2757,2756
<2757=2758
<2758=2762,2759
<2759=2761,2760
<2762=2764,2763
<2839=2845,2844,2840
<2840=2841
<2841=2843,2842
<2845=2855,2851,2846
<2846=2847
<2847=2849,2848
<2849=2850
<2851=2852
<2852=2854,2853
<2855=2856
<2856=2858,2857
<2865=2868,2867,2866
<2868=3654,3645,3636,3267,3061,2869
<2869=3059,2960,2870
<2870=2871
<2871=2872
<2872=2956,2913,2873
<2873=2874
<2874=2875
<2875=2909,2876
<2876=2907,2899,2891,2885,2877
<2877=2878
<2878=2882,2879
<2879=2881,2880
<2882=2884,2883
<2885=2886
<2886=2890,2887
<2887=2889,2888
<2891=2892
<2892=2896,2893
<2893=2895,2894
<2896=2898,2897
<2899=2900
<2900=2904,2901
<2901=2903,2902
<2904=2906,2905
<2907=2908
<2909=2910
<2910=2912,2911
<2913=2914
<2914=2952,2915
<2915=2946,2938,2930,2924,2916
<2916=2917
<2917=2921,2918
<2918=2920,2919
<2921=2923,2922
<2924=2925
<2925=2929,2926
<2926=2928,2927
<2930=2931
<2931=2935,2932
<2932=2934,2933
<2935=2937,2936
<2938=2939
<2939=2943,2940
<2940=2942,2941
<2943=2945,2944
<2946=2947
<2947=2949,2948
<2949=2951,2950
<2952=2953
<2953=2955,2954
<2956=2957
<2957=2959,2958
<2960=2961
<2961=3055,2977,2962
<2962=2963
<2963=2964
<2964=2965
<2965=2973,2966
<2966=2971,2969,2967
<2967=2968
<2969=2970
<2971=2972
<2973=2974
<2974=2976,2975
<2977=2978
<2978=3031,2997,2979
<2979=2980
<2980=2981
<2981=2993,2982
<2982=2987,2985,2983
<2983=2984
<2985=2986
<2987=2988
<2988=2990,2989
<2990=2992,2991
<2993=2994
<2994=2996,2995
<2997=2998
<2998=2999
<2999=3027,3000
<3000=3021,3019,3017,3013,3009,3005,3001
<3001=3002
<3002=3004,3003
<3005=3006
<3006=3008,3007
<3009=3010
<3010=3012,3011
<3013=3014
<3014=3016,3015
<3017=3018
<3019=3020
<3021=3022
<3022=3024,3023
<3024=3026,3025
<3027=3028
<3028=3030,3029
<3031=3032
<3032=3050,3033
<3033=3045,3034
<3034=3040,3035
<3035=3037,3036
<3037=3039,3038
<3040=3042,3041
<3042=3044,3043
<3045=3047,3046
<3047=3049,3048
<3050=3052,3051
<3052=3054,3053
<3055=3056
<3056=3058,3057
<3059=3060
<3061=3265,3062
<3062=3258,3249,3224,3192,3167,3160,3149,3140,3129,3120,3107,3096,3083,3072,3067,3063
<3063=3064
<3064=3066,3065
<3067=3068
<3068=3070,3069
<3070=3071
<3072=3073
<3073=3081,3074
<3074=3079,3075
<3075=3076
<3076=3078,3077
<3079=3080
<3081=3082
<3083=3084
<3084=3094,3085
<3085=3090,3086
<3086=3087
<3087=3089,3088
<3090=3091
<3091=3093,3092
<3094=3095
<3096=3097
<3097=3105,3098
<3098=3101,3099
<3099=3100
<3101=3102
<3102=3104,3103
<3105=3106
<3107=3108
<3108=3118,3109
<3109=3114,3110
<3110=3111
<3111=3113,3112
<3114=3115
<3115=3117,3116
<3118=3119
<3120=3121
<3121=3127,3122
<3122=3125,3123
<3123=3124
<3125=3126
<3127=3128
<3129=3130
<3130=3138,3131
<3131=3136,3132
<3132=3133
<3133=3135,3134
<3136=3137
<3138=3139
<3140=3141
<3141=3147,3142
<3142=3145,3143
<3143=3144
<3145=3146
<3147=3148
<3149=3150
<3150=3158,3151
<3151=3154,3152
<3152=3153
<3154=3155
<3155=3157,3156
<3158=3159
<3160=3161
<3161=3165,3162
<3162=3163
<3163=3164
<3165=3166
<3167=3168
<3168=3190,3169
<3169=3186,3182,3178,3170
<3170=3171
<3171=3177,3172
<3172=3174,3173
<3174=3176,3175
<3178=3179
<3179=3181,3180
<3182=3183
<3183=3185,3184
<3186=3187
<3187=3189,3188
<3190=3191
<3192=3222,3193
<3193=3215,3208,3199,3194
<3194=3195
<3195=3197,3196
<3197=3198
<3199=3200
<3200=3206,3201
<3201=3204,3202
<3202=3203
<3204=3205
<3206=3207
<3208=3209
<3209=3213,3210
<3210=3211
<3211=3212
<3213=3214
<3215=3216
<3216=3220,3217
<3217=3218
<3218=3219
<3220=3221
<3222=3223
<3224=3225
<3225=3247,3226
<3226=3243,3239,3235,3227
<3227=3228
<3228=3234,3229
<3229=3231,3230
<3231=3233,3232
<3235=3236
<3236=3238,3237
<3239=3240
<3240=3242,3241
<3243=3244
<3244=3246,3245
<3247=3248
<3249=3250
<3250=3256,3251
<3251=3254,3252
<3252=3253
<3254=3255
<3256=3257
<3258=3259
<3259=3263,3260
<3260=3261
<3261=3262
<3263=3264
<3265=3266
<3267=3627,3408,3268
<3268=3269
<3269=3270
<3270=3404,3278,3271
<3271=3272
<3272=3273
<3273=3274
<3274=3276,3275
<3276=3277
<3278=3397,3284,3279
<3279=3280
<3280=3282,3281
<3282=3283
<3284=3382,3369,3354,3341,3326,3313,3298,3285
<3285=3286
<3286=3296,3287
<3287=3292,3288
<3288=3289
<3289=3291,3290
<3292=3293
<3293=3295,3294
<3296=3297
<3298=3299
<3299=3311,3300
<3300=3307,3301
<3301=3302
<3302=3306,3303
<3303=3305,3304
<3307=3308
<3308=3310,3309
<3311=3312
<3313=3314
<3314=3324,3315
<3315=3320,3316
<3316=3317
<3317=3319,3318
<3320=3321
<3321=3323,3322
<3324=3325
<3326=3327
<3327=3339,3328
<3328=3335,3329
<3329=3330
<3330=3334,3331
<3331=3333,3332
<3335=3336
<3336=3338,3337
<3339=3340
<3341=3342
<3342=3352,3343
<3343=3348,3344
<3344=3345
<3345=3347,3346
<3348=3349
<3349=3351,3350
<3352=3353
<3354=3355
<3355=3367,3356
<3356=3363,3357
<3357=3358
<3358=3362,3359
<3359=3361,3360
<3363=3364
<3364=3366,3365
<3367=3368
<3369=3370
<3370=3380,3371
<3371=3376,3372
<3372=3373
<3373=3375,3374
<3376=3377
<3377=3379,3378
<3380=3381
<3382=3383
<3383=3395,3384
<3384=3391,3385
<3385=3386
<3386=3390,3387
<3387=3389,3388
<3391=3392
<3392=3394,3393
<3395=3396
<3397=3398
<3398=3402,3399
<3399=3400
<3400=3401
<3402=3403
<3404=3405
<3405=3407,3406
<3408=3611,3604,3500,3495,3486,3473,3466,3459,3414,3409
<3409=3410
<3410=3412,3411
<3412=3413
<3414=3451,3442,3439,3415
<3415=3416
<3416=3417
<3417=3437,3418
<3418=3427,3419
<3419=3420
<3420=3422,3421
<3422=3424,3423
<3424=3426,3425
<3427=3428
<3428=3430,3429
<3430=3432,3431
<3432=3434,3433
<3434=3436,3435
<3437=3438
<3439=3441,3440
<3442=3443
<3443=3450,3444
<3444=3446,3445
<3446=3447
<3447=3449,3448
<3451=3452
<3452=3453
<3453=3458,3457,3454
<3454=3456,3455
<3459=3460
<3460=3464,3461
<3461=3462
<3462=3463
<3464=3465
<3466=3467
<3467=3471,3468
<3468=3469
<3469=3470
<3471=3472
<3473=3474
<3474=3484,3475
<3475=3482,3480,3478,3476
<3476=3477
<3478=3479
<3480=3481
<3482=3483
<3484=3485
<3486=3487
<3487=3493,3488
<3488=3491,3489
<3489=3490
<3491=3492
<3493=3494
<3495=3496
<3496=3498,3497
<3498=3499
<3500=3600,3501
<3501=3502
<3502=3592,3583,3580,3503
<3503=3569,3542,3531,3504
<3504=3505
<3505=3529,3506
<3506=3519,3507
<3507=3508
<3508=3510,3509
<3510=3514,3511
<3511=3513,3512
<3514=3516,3515
<3516=3518,3517
<3519=3520
<3520=3522,3521
<3522=3524,3523
<3524=3526,3525
<3526=3528,3527
<3529=3530
<3531=3532
<3532=3540,3533
<3533=3536,3534
<3534=3535
<3536=3537
<3537=3539,3538
<3540=3541
<3542=3543
<3543=3567,3544
<3544=3557,3545
<3545=3546
<3546=3548,3547
<3548=3552,3549
<3549=3551,3550
<3552=3554,3553
<3554=3556,3555
<3557=3558
<3558=3560,3559
<3560=3562,3561
<3562=3564,3563
<3564=3566,3565
<3567=3568
<3569=3570
<3570=3578,3571
<3571=3574,3572
<3572=3573
<3574=3575
<3575=3577,3576
<3578=3579
<3580=3582,3581
<3583=3584
<3584=3591,3585
<3585=3587,3586
<3587=3588
<3588=3590,3589
<3592=3593
<3593=3594
<3594=3599,3598,3595
<3595=3597,3596
<3600=3601
<3601=3603,3602
<3604=3605
<3605=3609,3606
<3606=3607
<3607=3608
<3609=3610
<3611=3612
<3612=3626,3625,3613
<3613=3624,3614
<3614=3623,3615
<3615=3617,3616
<3617=3619,3618
<3619=3620
<3620=3622,3621
<3627=3628
<3628=3635,3629
<3629=3631,3630
<3631=3632
<3632=3634,3633
<3636=3637
<3637=3644,3643,3638
<3638=3642,3639
<3639=3641,3640
<3645=3646
<3646=3653,3652,3647
<3647=3651,3648
<3648=3650,3649
<3654=3656,3655
<3656=3657
<3657=3659,3658
<3719=3722,3721,3720
<3722=3723
<3723=3724
<3724=3726,3725
<3726=3727
<3731=3734,3733,3732
<3734=3740,3735
<3735=3736
<3736=3738,3737
<3738=3739
<3740=3768,3755,3741
<3741=3742
<3742=3749,3743
<3743=3744
<3744=3746,3745
<3746=3748,3747
<3749=3750
<3750=3752,3751
<3752=3754,3753
<3755=3762,3756
<3756=3757
<3757=3759,3758
<3759=3761,3760
<3762=3763
<3763=3765,3764
<3765=3767,3766
<3768=3769
<3769=3771,3770
<3780=3783,3782,3781
<3783=3784
<3784=3882,3821,3785
<3785=3786
<3786=3787
<3787=3799,3788
<3788=3789
<3789=3798,3790
<3790=3796,3791
<3791=3794,3792
<3792=3793
<3794=3795
<3796=3797
<3799=3800
<3800=3811,3801
<3801=3803,3802
<3803=3809,3804
<3804=3805
<3805=3806
<3806=3808,3807
<3809=3810
<3811=3813,3812
<3813=3819,3814
<3814=3815
<3815=3816
<3816=3818,3817
<3819=3820
<3821=3874,3866,3844,3822
<3822=3823
<3823=3841,3824
<3824=3828,3825
<3825=3827,3826
<3828=3832,3829
<3829=3831,3830
<3832=3840,3833
<3833=3837,3834
<3834=3836,3835
<3837=3839,3838
<3841=3843,3842
<3844=3845
<3845=3863,3846
<3846=3850,3847
<3847=3849,3848
<3850=3854,3851
<3851=3853,3852
<3854=3862,3855
<3855=3859,3856
<3856=3858,3857
<3859=3861,3860
<3863=3865,3864
<3866=3867
<3867=3871,3868
<3868=3870,3869
<3871=3873,3872
<3874=3875
<3875=3879,3876
<3876=3878,3877
<3879=3881,3880
<3882=3883
<3883=3885,3884
<3913=3916,3915,3914
<3916=3917
<3917=3918
<3918=3920,3919
<3920=3921
<3925=3931,3930,3926
<3926=3927
<3927=3929,3928
<3931=4034,4005,3976,3971,3962,3953,3932
<3932=3941,3933
<3933=3934
<3934=3935
<3935=3939,3936
<3936=3937
<3937=3938
<3939=3940
<3941=3942
<3942=3952,3943
<3943=3947,3944
<3944=3946,3945
<3947=3949,3948
<3949=3951,3950
<3953=3954
<3954=3958,3955
<3955=3956
<3956=3957
<3958=3959
<3959=3961,3960
<3962=3963
<3963=3967,3964
<3964=3965
<3965=3966
<3967=3968
<3968=3970,3969
<3971=3972
<3972=3974,3973
<3974=3975
<3976=4001,3992,3977
<3977=3978
<3978=3988,3979
<3979=3980
<3980=3987,3981
<3981=3983,3982
<3983=3984
<3984=3986,3985
<3988=3989
<3989=3991,3990
<3992=3993
<3993=4000,3994
<3994=3996,3995
<3996=3997
<3997=3999,3998
<4001=4002
<4002=4004,4003
<4005=4030,4021,4006
<4006=4007
<4007=4017,4008
<4008=4009
<4009=4016,4010
<4010=4012,4011
<4012=4013
<4013=4015,4014
<4017=4018
<4018=4020,4019
<4021=4022
<4022=4029,4023
<4023=4025,4024
<4025=4026
<4026=4028,4027
<4030=4031
<4031=4033,4032
<4034=4035
<4035=4039,4036
<4036=4037
<4037=4038
<4039=4040
<4061=4070,4069,4062
<4062=4066,4063
<4063=4065,4064
<4066=4068,4067
<4070=4075,4071
<4071=4072
<4072=4074,4073
<4075=4085,4081,4076
<4076=4077
<4077=4078
<4078=4080,4079
<4081=4082
<4082=4084,4083
<4085=4086
<4086=4090,4087
<4087=4089,4088
<4098=4104,4103,4099
<4099=4100
<4100=4102,4101
<4104=4105
<4105=4106
<4106=4108,4107
<4114=4120,4119,4115
<4115=4116
<4116=4118,4117
<4120=4121
<4121=4122
<4122=4124,4123
<4130=4133,4132,4131
<4133=4134
<4134=4162,4145,4135
<4135=4136
<4136=4141,4137
<4137=4138
<4138=4140,4139
<4141=4142
<4142=4144,4143
<4145=4154,4146
<4146=4147
<4147=4153,4148
<4148=4150,4149
<4150=4152,4151
<4154=4155
<4155=4161,4156
<4156=4158,4157
<4158=4160,4159
<4162=4163
<4177=4179,4178
<4179=4180
<4180=4181
<4181=4185,4182
<4182=4183
<4183=4184
<4185=4186
<4191=4197,4196,4192
<4192=4193
<4193=4195,4194
<4197=4198
<4198=4207,4199
<4199=4200
<4200=4201
<4201=4205,4202
<4202=4203
<4203=4204
<4205=4206
<4207=4208
<4208=4210,4209
<4210=4212,4211
