>3	FunctionDef	m_nNumStepsSmooth (m_nNumSteps * m_nGranularity)
>4	ParameterList	m_nNumSteps * m_nGranularity
>5	Parameter	 
>6	Identifier	m_nGranularity
>7	ParameterType	m_nNumSteps *
>8	CompoundStatement	 
>13	FunctionDef	CKCBusyProgressCtrl 
>14	ParameterList	 
>15	CompoundStatement	 
>16	IfStatement	if ( m_pOldBmp )
>17	CompoundStatement	 
>18	ExpressionStatement	 
>19	CallExpression	m_memDC . DeleteDC ( )
>20	ArgumentList	 
>21	Callee	m_memDC . DeleteDC
>22	MemberAccess	m_memDC . DeleteDC
>23	Identifier	DeleteDC
>24	Identifier	m_memDC
>25	ExpressionStatement	 
>26	CallExpression	m_memBmp . DeleteObject ( )
>27	ArgumentList	 
>28	Callee	m_memBmp . DeleteObject
>29	MemberAccess	m_memBmp . DeleteObject
>30	Identifier	DeleteObject
>31	Identifier	m_memBmp
>32	ExpressionStatement	 
>33	CallExpression	m_memDC . SelectObject ( m_pOldBmp )
>34	ArgumentList	m_pOldBmp
>35	Argument	m_pOldBmp
>36	Identifier	m_pOldBmp
>37	Callee	m_memDC . SelectObject
>38	MemberAccess	m_memDC . SelectObject
>39	Identifier	SelectObject
>40	Identifier	m_memDC
>41	Condition	 
>42	Identifier	m_pOldBmp
>49	FunctionDef	CKCBusyProgressCtrl 
>50	ParameterList	 
>51	ReturnType	void
>52	CompoundStatement	 
>53	ExpressionStatement	 
>54	CallExpression	Recalc ( )
>55	ArgumentList	 
>56	Callee	Recalc
>57	Identifier	Recalc
>58	ExpressionStatement	 
>59	CallExpression	CStatic 
>60	ArgumentList	 
>61	Callee	CStatic 
>62	Identifier	CStatic 
>66	FunctionDef	CKCBusyProgressCtrl 
>67	ParameterList	DWORD dwStyle , const RECT & rect , CWnd * pParentWnd , UINT nID , CCreateContext * pContext
>68	Parameter	 
>69	Identifier	pContext
>70	ParameterType	CCreateContext *
>71	Parameter	 
>72	Identifier	nID
>73	ParameterType	UINT
>74	Parameter	 
>75	Identifier	pParentWnd
>76	ParameterType	CWnd *
>77	Parameter	 
>78	Identifier	rect
>79	ParameterType	const RECT &
>80	Parameter	 
>81	Identifier	dwStyle
>82	ParameterType	DWORD
>83	ReturnType	BOOL
>84	CompoundStatement	 
>85	ReturnStatement	 
>86	Identifier	bResult
>87	ExpressionStatement	 
>88	CallExpression	Recalc ( )
>89	ArgumentList	 
>90	Callee	Recalc
>91	Identifier	Recalc
>92	IdentifierDeclStatement	 
>93	IdentifierDecl	bResult = CWnd 
>94	AssignmentExpr	bResult = CWnd 
>95	CallExpression	CWnd 
>96	ArgumentList	TEXT ( \"STATIC\" )
>97	Argument	pContext
>98	Identifier	pContext
>99	Argument	nID
>100	Identifier	nID
>101	Argument	pParentWnd
>102	Identifier	pParentWnd
>103	Argument	rect
>104	Identifier	rect
>105	Argument	dwStyle
>106	Identifier	dwStyle
>107	Argument	TEXT ( \"BusyProgressCtrl\" )
>108	CallExpression	TEXT ( \"BusyProgressCtrl\" )
>109	ArgumentList	\"BusyProgressCtrl\"
>110	Argument	\"BusyProgressCtrl\"
>111	PrimaryExpression	\"BusyProgressCtrl\"
>112	Callee	TEXT
>113	Identifier	TEXT
>114	Argument	TEXT ( \"STATIC\" )
>115	CallExpression	TEXT ( \"STATIC\" )
>116	ArgumentList	\"STATIC\"
>117	Argument	\"STATIC\"
>118	PrimaryExpression	\"STATIC\"
>119	Callee	TEXT
>120	Identifier	TEXT
>121	Callee	CWnd 
>122	Identifier	CWnd 
>123	Identifier	bResult
>124	Identifier	bResult
>125	IdentifierDeclType	BOOL
>137	FunctionDef	CKCBusyProgressCtrl 
>138	ParameterList	 
>139	ReturnType	void
>140	CompoundStatement	 
>141	ExpressionStatement	 
>142	AssignmentExpr	m_dBlockHeight = tRect . Height ( )
>143	CallExpression	tRect . Height ( )
>144	ArgumentList	 
>145	Callee	tRect . Height
>146	MemberAccess	tRect . Height
>147	Identifier	Height
>148	Identifier	tRect
>149	Identifier	m_dBlockHeight
>150	ExpressionStatement	 
>151	AssignmentExpr	m_dBlockWidth = ( ( double ) tRect . Width ( ) / ( double ) m_nNumSteps )
>152	MultiplicativeExpression	( double ) tRect . Width ( ) / ( double ) m_nNumSteps
>153	CastExpression	( double ) m_nNumSteps
>154	Identifier	m_nNumSteps
>155	CastTarget	double
>156	CastExpression	( double ) tRect . Width ( )
>157	CallExpression	tRect . Width ( )
>158	ArgumentList	 
>159	Callee	tRect . Width
>160	MemberAccess	tRect . Width
>161	Identifier	Width
>162	Identifier	tRect
>163	CastTarget	double
>164	Identifier	m_dBlockWidth
>165	ExpressionStatement	 
>166	AssignmentExpr	tRect . right -= ( m_nNumSteps * m_nIBPadding )
>167	MultiplicativeExpression	m_nNumSteps * m_nIBPadding
>168	Identifier	m_nIBPadding
>169	Identifier	m_nNumSteps
>170	MemberAccess	tRect . right
>171	Identifier	right
>172	Identifier	tRect
>173	IdentifierDeclStatement	 
>174	IdentifierDecl	tRect = m_rect
>175	AssignmentExpr	tRect = m_rect
>176	Identifier	m_rect
>177	Identifier	m_rect
>178	Identifier	tRect
>179	IdentifierDeclType	CRect
>180	IfStatement	if ( m_rect . IsRectEmpty ( ) )
>181	ExpressionStatement	 
>182	CallExpression	GetClientRect ( & m_rect )
>183	ArgumentList	& m_rect
>184	Argument	& m_rect
>185	UnaryOp	& m_rect
>186	Identifier	m_rect
>187	UnaryOperator	&
>188	Callee	GetClientRect
>189	Identifier	GetClientRect
>190	Condition	 
>191	CallExpression	m_rect . IsRectEmpty ( )
>192	ArgumentList	 
>193	Callee	m_rect . IsRectEmpty
>194	MemberAccess	m_rect . IsRectEmpty
>195	Identifier	IsRectEmpty
>196	Identifier	m_rect
>211	FunctionDef	CKCBusyProgressCtrl 
>212	ParameterList	 
>213	ReturnType	void
>214	CompoundStatement	 
>215	ExpressionStatement	 
>216	CallExpression	dc . BitBlt ( 0 , 0 , m_rect . Width ( ) , m_rect . Height ( ) , & m_memDC , 0 , 0 , SRCCOPY )
>217	ArgumentList	0
>218	Argument	SRCCOPY
>219	Identifier	SRCCOPY
>220	Argument	0
>221	PrimaryExpression	0
>222	Argument	0
>223	PrimaryExpression	0
>224	Argument	& m_memDC
>225	UnaryOp	& m_memDC
>226	Identifier	m_memDC
>227	UnaryOperator	&
>228	Argument	m_rect . Height ( )
>229	CallExpression	m_rect . Height ( )
>230	ArgumentList	 
>231	Callee	m_rect . Height
>232	MemberAccess	m_rect . Height
>233	Identifier	Height
>234	Identifier	m_rect
>235	Argument	m_rect . Width ( )
>236	CallExpression	m_rect . Width ( )
>237	ArgumentList	 
>238	Callee	m_rect . Width
>239	MemberAccess	m_rect . Width
>240	Identifier	Width
>241	Identifier	m_rect
>242	Argument	0
>243	PrimaryExpression	0
>244	Argument	0
>245	PrimaryExpression	0
>246	Callee	dc . BitBlt
>247	MemberAccess	dc . BitBlt
>248	Identifier	BitBlt
>249	Identifier	dc
>250	ExpressionStatement	 
>251	CallExpression	DrawBlocks ( m_memDC , m_rect )
>252	ArgumentList	m_memDC
>253	Argument	m_rect
>254	Identifier	m_rect
>255	Argument	m_memDC
>256	Identifier	m_memDC
>257	Callee	DrawBlocks
>258	Identifier	DrawBlocks
>259	ExpressionStatement	 
>260	CallExpression	DrawBackground ( m_memDC , m_rect )
>261	ArgumentList	m_memDC
>262	Argument	m_rect
>263	Identifier	m_rect
>264	Argument	m_memDC
>265	Identifier	m_memDC
>266	Callee	DrawBackground
>267	Identifier	DrawBackground
>268	IfStatement	if ( ! m_memDC . m_hDC )
>269	CompoundStatement	 
>270	ExpressionStatement	 
>271	AssignmentExpr	m_pOldBmp = m_memDC . SelectObject ( & m_memBmp )
>272	CallExpression	m_memDC . SelectObject ( & m_memBmp )
>273	ArgumentList	& m_memBmp
>274	Argument	& m_memBmp
>275	UnaryOp	& m_memBmp
>276	Identifier	m_memBmp
>277	UnaryOperator	&
>278	Callee	m_memDC . SelectObject
>279	MemberAccess	m_memDC . SelectObject
>280	Identifier	SelectObject
>281	Identifier	m_memDC
>282	Identifier	m_pOldBmp
>283	ExpressionStatement	 
>284	CallExpression	m_memBmp . CreateCompatibleBitmap ( & dc , m_rect . Width ( ) , m_rect . Height ( ) )
>285	ArgumentList	& dc
>286	Argument	m_rect . Height ( )
>287	CallExpression	m_rect . Height ( )
>288	ArgumentList	 
>289	Callee	m_rect . Height
>290	MemberAccess	m_rect . Height
>291	Identifier	Height
>292	Identifier	m_rect
>293	Argument	m_rect . Width ( )
>294	CallExpression	m_rect . Width ( )
>295	ArgumentList	 
>296	Callee	m_rect . Width
>297	MemberAccess	m_rect . Width
>298	Identifier	Width
>299	Identifier	m_rect
>300	Argument	& dc
>301	UnaryOp	& dc
>302	Identifier	dc
>303	UnaryOperator	&
>304	Callee	m_memBmp . CreateCompatibleBitmap
>305	MemberAccess	m_memBmp . CreateCompatibleBitmap
>306	Identifier	CreateCompatibleBitmap
>307	Identifier	m_memBmp
>308	ExpressionStatement	 
>309	CallExpression	m_memDC . CreateCompatibleDC ( & dc )
>310	ArgumentList	& dc
>311	Argument	& dc
>312	UnaryOp	& dc
>313	Identifier	dc
>314	UnaryOperator	&
>315	Callee	m_memDC . CreateCompatibleDC
>316	MemberAccess	m_memDC . CreateCompatibleDC
>317	Identifier	CreateCompatibleDC
>318	Identifier	m_memDC
>319	Condition	 
>320	UnaryOp	! m_memDC . m_hDC
>321	MemberAccess	m_memDC . m_hDC
>322	Identifier	m_hDC
>323	Identifier	m_memDC
>324	UnaryOperator	!
>325	IdentifierDeclStatement	 
>326	IdentifierDecl	dc ( this )
>327	Identifier	this
>328	Identifier	dc
>329	IdentifierDeclType	CPaintDC
>346	FunctionDef	CKCBusyProgressCtrl 
>347	ParameterList	CDC & dc , CRect & rect
>348	Parameter	 
>349	Identifier	rect
>350	ParameterType	CRect &
>351	Parameter	 
>352	Identifier	dc
>353	ParameterType	CDC &
>354	ReturnType	void
>355	CompoundStatement	 
>356	ExpressionStatement	 
>357	CallExpression	dc . FillSolidRect ( & rect , m_colBkg )
>358	ArgumentList	& rect
>359	Argument	m_colBkg
>360	Identifier	m_colBkg
>361	Argument	& rect
>362	UnaryOp	& rect
>363	Identifier	rect
>364	UnaryOperator	&
>365	Callee	dc . FillSolidRect
>366	MemberAccess	dc . FillSolidRect
>367	Identifier	FillSolidRect
>368	Identifier	dc
>408	FunctionDef	CKCBusyProgressCtrl 
>409	ParameterList	CDC & dc , CRect & rect
>410	Parameter	 
>411	Identifier	rect
>412	ParameterType	CRect &
>413	Parameter	 
>414	Identifier	dc
>415	ParameterType	CDC &
>416	ReturnType	void
>417	CompoundStatement	 
>418	ExpressionStatement	 
>419	CallExpression	dc . Rectangle ( & rect )
>420	ArgumentList	& rect
>421	Argument	& rect
>422	UnaryOp	& rect
>423	Identifier	rect
>424	UnaryOperator	&
>425	Callee	dc . Rectangle
>426	MemberAccess	dc . Rectangle
>427	Identifier	Rectangle
>428	Identifier	dc
>435	FunctionDef	CKCBusyProgressCtrl 
>436	ParameterList	CDC & dc , CRect & rect
>437	Parameter	 
>438	Identifier	rect
>439	ParameterType	CRect &
>440	Parameter	 
>441	Identifier	dc
>442	ParameterType	CDC &
>443	ReturnType	void
>444	CompoundStatement	 
>445	ExpressionStatement	 
>446	CallExpression	nBrush . DeleteObject ( )
>447	ArgumentList	 
>448	Callee	nBrush . DeleteObject
>449	MemberAccess	nBrush . DeleteObject
>450	Identifier	DeleteObject
>451	Identifier	nBrush
>452	ExpressionStatement	 
>453	CallExpression	nPen . DeleteObject ( )
>454	ArgumentList	 
>455	Callee	nPen . DeleteObject
>456	MemberAccess	nPen . DeleteObject
>457	Identifier	DeleteObject
>458	Identifier	nPen
>459	ExpressionStatement	 
>460	CallExpression	dc . SelectObject ( pOldBrush )
>461	ArgumentList	pOldBrush
>462	Argument	pOldBrush
>463	Identifier	pOldBrush
>464	Callee	dc . SelectObject
>465	MemberAccess	dc . SelectObject
>466	Identifier	SelectObject
>467	Identifier	dc
>468	ExpressionStatement	 
>469	CallExpression	dc . SelectObject ( pOldPen )
>470	ArgumentList	pOldPen
>471	Argument	pOldPen
>472	Identifier	pOldPen
>473	Callee	dc . SelectObject
>474	MemberAccess	dc . SelectObject
>475	Identifier	SelectObject
>476	Identifier	dc
>477	ExpressionStatement	 
>478	CallExpression	dc . Rectangle ( & rect )
>479	ArgumentList	& rect
>480	Argument	& rect
>481	UnaryOp	& rect
>482	Identifier	rect
>483	UnaryOperator	&
>484	Callee	dc . Rectangle
>485	MemberAccess	dc . Rectangle
>486	Identifier	Rectangle
>487	Identifier	dc
>488	ExpressionStatement	 
>489	AssignmentExpr	pOldBrush = dc . SelectObject ( & nBrush )
>490	CallExpression	dc . SelectObject ( & nBrush )
>491	ArgumentList	& nBrush
>492	Argument	& nBrush
>493	UnaryOp	& nBrush
>494	Identifier	nBrush
>495	UnaryOperator	&
>496	Callee	dc . SelectObject
>497	MemberAccess	dc . SelectObject
>498	Identifier	SelectObject
>499	Identifier	dc
>500	Identifier	pOldBrush
>501	ExpressionStatement	 
>502	AssignmentExpr	pOldPen = dc . SelectObject ( & nPen )
>503	CallExpression	dc . SelectObject ( & nPen )
>504	ArgumentList	& nPen
>505	Argument	& nPen
>506	UnaryOp	& nPen
>507	Identifier	nPen
>508	UnaryOperator	&
>509	Callee	dc . SelectObject
>510	MemberAccess	dc . SelectObject
>511	Identifier	SelectObject
>512	Identifier	dc
>513	Identifier	pOldPen
>514	ExpressionStatement	 
>515	CallExpression	nBrush . CreateSolidBrush ( m_colBlockFaceHi )
>516	ArgumentList	m_colBlockFaceHi
>517	Argument	m_colBlockFaceHi
>518	Identifier	m_colBlockFaceHi
>519	Callee	nBrush . CreateSolidBrush
>520	MemberAccess	nBrush . CreateSolidBrush
>521	Identifier	CreateSolidBrush
>522	Identifier	nBrush
>523	ExpressionStatement	 
>524	CallExpression	nPen . CreatePen ( PS_SOLID , 0 , m_colBlockEdgeHi )
>525	ArgumentList	PS_SOLID
>526	Argument	m_colBlockEdgeHi
>527	Identifier	m_colBlockEdgeHi
>528	Argument	0
>529	PrimaryExpression	0
>530	Argument	PS_SOLID
>531	Identifier	PS_SOLID
>532	Callee	nPen . CreatePen
>533	MemberAccess	nPen . CreatePen
>534	Identifier	CreatePen
>535	Identifier	nPen
>536	IdentifierDeclStatement	 
>537	IdentifierDecl	* pOldBrush = NULL
>538	AssignmentExpr	* pOldBrush = NULL
>539	Identifier	NULL
>540	Identifier	NULL
>541	Identifier	pOldBrush
>542	IdentifierDeclType	CBrush *
>543	IdentifierDecl	nBrush
>544	Identifier	nBrush
>545	IdentifierDeclType	CBrush
>546	IdentifierDeclStatement	 
>547	IdentifierDecl	* pOldPen = NULL
>548	AssignmentExpr	* pOldPen = NULL
>549	Identifier	NULL
>550	Identifier	NULL
>551	Identifier	pOldPen
>552	IdentifierDeclType	CPen *
>553	IdentifierDecl	nPen
>554	Identifier	nPen
>555	IdentifierDeclType	CPen
>573	FunctionDef	CKCBusyProgressCtrl 
>574	ParameterList	CDC & dc , CRect & rect , int nPartial
>575	Parameter	 
>576	Identifier	nPartial
>577	ParameterType	int
>578	Parameter	 
>579	Identifier	rect
>580	ParameterType	CRect &
>581	Parameter	 
>582	Identifier	dc
>583	ParameterType	CDC &
>584	ReturnType	void
>585	CompoundStatement	 
>586	ExpressionStatement	 
>587	CallExpression	dc . FillSolidRect ( & pRect , m_colBlockFaceHi )
>588	ArgumentList	& pRect
>589	Argument	m_colBlockFaceHi
>590	Identifier	m_colBlockFaceHi
>591	Argument	& pRect
>592	UnaryOp	& pRect
>593	Identifier	pRect
>594	UnaryOperator	&
>595	Callee	dc . FillSolidRect
>596	MemberAccess	dc . FillSolidRect
>597	Identifier	FillSolidRect
>598	Identifier	dc
>599	IfStatement	if ( pRect . right >= rect . right )
>600	ExpressionStatement	 
>601	AssignmentExpr	pRect . right = rect . right - 1
>602	AdditiveExpression	rect . right - 1
>603	PrimaryExpression	1
>604	MemberAccess	rect . right
>605	Identifier	right
>606	Identifier	rect
>607	MemberAccess	pRect . right
>608	Identifier	right
>609	Identifier	pRect
>610	Condition	 
>611	RelationalExpression	pRect . right >= rect . right
>612	MemberAccess	rect . right
>613	Identifier	right
>614	Identifier	rect
>615	MemberAccess	pRect . right
>616	Identifier	right
>617	Identifier	pRect
>618	ExpressionStatement	 
>619	AssignmentExpr	pRect . right = pRect . left + nPartial
>620	AdditiveExpression	pRect . left + nPartial
>621	Identifier	nPartial
>622	MemberAccess	pRect . left
>623	Identifier	left
>624	Identifier	pRect
>625	MemberAccess	pRect . right
>626	Identifier	right
>627	Identifier	pRect
>628	ExpressionStatement	 
>629	CallExpression	pRect . DeflateRect ( 1 , 1 )
>630	ArgumentList	1
>631	Argument	1
>632	PrimaryExpression	1
>633	Argument	1
>634	PrimaryExpression	1
>635	Callee	pRect . DeflateRect
>636	MemberAccess	pRect . DeflateRect
>637	Identifier	DeflateRect
>638	Identifier	pRect
>639	IdentifierDeclStatement	 
>640	IdentifierDecl	pRect = rect
>641	AssignmentExpr	pRect = rect
>642	Identifier	rect
>643	Identifier	rect
>644	Identifier	pRect
>645	IdentifierDeclType	CRect
>658	FunctionDef	CKCBusyProgressCtrl 
>659	ParameterList	UINT nType , int cx , int cy
>660	Parameter	 
>661	Identifier	cy
>662	ParameterType	int
>663	Parameter	 
>664	Identifier	cx
>665	ParameterType	int
>666	Parameter	 
>667	Identifier	nType
>668	ParameterType	UINT
>669	ReturnType	void
>670	CompoundStatement	 
>671	IfStatement	if ( m_memDC . m_hDC )
>672	CompoundStatement	 
>673	ExpressionStatement	 
>674	CallExpression	m_memDC . DeleteDC ( )
>675	ArgumentList	 
>676	Callee	m_memDC . DeleteDC
>677	MemberAccess	m_memDC . DeleteDC
>678	Identifier	DeleteDC
>679	Identifier	m_memDC
>680	ExpressionStatement	 
>681	CallExpression	m_memBmp . DeleteObject ( )
>682	ArgumentList	 
>683	Callee	m_memBmp . DeleteObject
>684	MemberAccess	m_memBmp . DeleteObject
>685	Identifier	DeleteObject
>686	Identifier	m_memBmp
>687	ExpressionStatement	 
>688	CallExpression	m_memDC . SelectObject ( m_pOldBmp )
>689	ArgumentList	m_pOldBmp
>690	Argument	m_pOldBmp
>691	Identifier	m_pOldBmp
>692	Callee	m_memDC . SelectObject
>693	MemberAccess	m_memDC . SelectObject
>694	Identifier	SelectObject
>695	Identifier	m_memDC
>696	Condition	 
>697	MemberAccess	m_memDC . m_hDC
>698	Identifier	m_hDC
>699	Identifier	m_memDC
>700	ExpressionStatement	 
>701	CallExpression	GetClientRect ( & m_rect )
>702	ArgumentList	& m_rect
>703	Argument	& m_rect
>704	UnaryOp	& m_rect
>705	Identifier	m_rect
>706	UnaryOperator	&
>707	Callee	GetClientRect
>708	Identifier	GetClientRect
>709	ExpressionStatement	 
>710	CallExpression	CStatic 
>711	ArgumentList	nType
>712	Argument	cy
>713	Identifier	cy
>714	Argument	cx
>715	Identifier	cx
>716	Argument	nType
>717	Identifier	nType
>718	Callee	CStatic 
>719	Identifier	CStatic 
>731	FunctionDef	CKCBusyProgressCtrl 
>732	ParameterList	 
>733	ReturnType	void
>734	CompoundStatement	 
>735	ExpressionStatement	 
>736	CallExpression	Invalidate ( )
>737	ArgumentList	 
>738	Callee	Invalidate
>739	Identifier	Invalidate
>740	ExpressionStatement	 
>741	AssignmentExpr	m_nCurPos += m_nStep
>742	Identifier	m_nStep
>743	Identifier	m_nCurPos
>744	IfStatement	if ( m_nMode & BPC_MODE_BUSY )
>745	ElseStatement	else
>746	IfStatement	if ( m_nMode & BPC_MODE_PROGRESS )
>747	CompoundStatement	 
>748	Condition	 
>749	BitAndExpression	m_nMode & BPC_MODE_PROGRESS
>750	Identifier	BPC_MODE_PROGRESS
>751	Identifier	m_nMode
>752	CompoundStatement	 
>753	SwitchStatement	switch ( m_nBusyType )
>754	CompoundStatement	 
>755	BreakStatement	 
>756	CompoundStatement	 
>757	IfStatement	if ( m_nCurPos == 0 )
>758	ExpressionStatement	 
>759	AssignmentExpr	m_nCurPos = nNumSteps
>760	Identifier	nNumSteps
>761	Identifier	m_nCurPos
>762	Condition	 
>763	EqualityExpression	m_nCurPos == 0
>764	PrimaryExpression	0
>765	Identifier	m_nCurPos
>766	Label	 
>767	Identifier	BPC_BUSY_RTL
>768	BreakStatement	 
>769	CompoundStatement	 
>770	IfStatement	if ( m_nCurPos == nNumSteps - 1 )
>771	ExpressionStatement	 
>772	AssignmentExpr	m_nCurPos = - 1
>773	UnaryOp	- 1
>774	PrimaryExpression	1
>775	UnaryOperator	-
>776	Identifier	m_nCurPos
>777	Condition	 
>778	EqualityExpression	m_nCurPos == nNumSteps - 1
>779	AdditiveExpression	nNumSteps - 1
>780	PrimaryExpression	1
>781	Identifier	nNumSteps
>782	Identifier	m_nCurPos
>783	Label	 
>784	Identifier	BPC_BUSY_LTR
>785	BreakStatement	 
>786	CompoundStatement	 
>787	IfStatement	if ( m_nCurPos <= 0 )
>788	ExpressionStatement	 
>789	AssignmentExpr	m_nStep = 1
>790	PrimaryExpression	1
>791	Identifier	m_nStep
>792	Condition	 
>793	RelationalExpression	m_nCurPos <= 0
>794	PrimaryExpression	0
>795	Identifier	m_nCurPos
>796	IfStatement	if ( m_nCurPos >= nNumSteps - 1 )
>797	ExpressionStatement	 
>798	AssignmentExpr	m_nStep = - 1
>799	UnaryOp	- 1
>800	PrimaryExpression	1
>801	UnaryOperator	-
>802	Identifier	m_nStep
>803	Condition	 
>804	RelationalExpression	m_nCurPos >= nNumSteps - 1
>805	AdditiveExpression	nNumSteps - 1
>806	PrimaryExpression	1
>807	Identifier	nNumSteps
>808	Identifier	m_nCurPos
>809	Label	 
>810	Identifier	BPC_BUSY_PINGPONG
>811	Condition	 
>812	Identifier	m_nBusyType
>813	SwitchStatement	switch ( m_nBusyFill )
>814	CompoundStatement	 
>815	BreakStatement	 
>816	ExpressionStatement	 
>817	AssignmentExpr	nNumSteps = m_nNumStepsSmooth
>818	Identifier	m_nNumStepsSmooth
>819	Identifier	nNumSteps
>820	Label	 
>821	Identifier	BPC_BUSYFILL_SMOOTH
>822	BreakStatement	 
>823	ExpressionStatement	 
>824	AssignmentExpr	nNumSteps = m_nNumSteps
>825	Identifier	m_nNumSteps
>826	Identifier	nNumSteps
>827	Label	 
>828	Identifier	BPC_BUSYFILL_BLOCK
>829	Condition	 
>830	Identifier	m_nBusyFill
>831	Condition	 
>832	BitAndExpression	m_nMode & BPC_MODE_BUSY
>833	Identifier	BPC_MODE_BUSY
>834	Identifier	m_nMode
>835	IdentifierDeclStatement	 
>836	IdentifierDecl	nNumSteps = 0
>837	AssignmentExpr	nNumSteps = 0
>838	PrimaryExpression	0
>839	Identifier	nNumSteps
>840	Identifier	nNumSteps
>841	IdentifierDeclType	int
>855	FunctionDef	CKCBusyProgressCtrl 
>856	ParameterList	int nMode
>857	Parameter	 
>858	Identifier	nMode
>859	ParameterType	int
>860	ReturnType	void
>861	CompoundStatement	 
>862	IfStatement	if ( m_nMode >= BPC_MODE_BUSY && m_nMode <= BPC_MODE_PROGRESS )
>863	CompoundStatement	 
>864	IfStatement	if ( m_nMode == BPC_MODE_PROGRESS )
>865	ExpressionStatement	 
>866	AssignmentExpr	m_nStep = 1
>867	PrimaryExpression	1
>868	Identifier	m_nStep
>869	Condition	 
>870	EqualityExpression	m_nMode == BPC_MODE_PROGRESS
>871	Identifier	BPC_MODE_PROGRESS
>872	Identifier	m_nMode
>873	ExpressionStatement	 
>874	AssignmentExpr	m_nMode = nMode
>875	Identifier	nMode
>876	Identifier	m_nMode
>877	Condition	 
>878	AndExpression	m_nMode >= BPC_MODE_BUSY && m_nMode <= BPC_MODE_PROGRESS
>879	RelationalExpression	m_nMode <= BPC_MODE_PROGRESS
>880	Identifier	BPC_MODE_PROGRESS
>881	Identifier	m_nMode
>882	RelationalExpression	m_nMode >= BPC_MODE_BUSY
>883	Identifier	BPC_MODE_BUSY
>884	Identifier	m_nMode
>885	ExpressionStatement	 
>886	CallExpression	End ( )
>887	ArgumentList	 
>888	Callee	End
>889	Identifier	End
>898	FunctionDef	CKCBusyProgressCtrl 
>899	ParameterList	 
>900	ReturnType	void
>901	CompoundStatement	 
>902	IfStatement	if ( m_nMode & BPC_MODE_BUSY )
>903	CompoundStatement	 
>904	ExpressionStatement	 
>905	AssignmentExpr	m_pThrd -> m_bAutoDelete = false
>906	Identifier	false
>907	PtrMemberAccess	m_pThrd -> m_bAutoDelete
>908	Identifier	m_bAutoDelete
>909	Identifier	m_pThrd
>910	ExpressionStatement	 
>911	AssignmentExpr	m_pThrd = AfxBeginThread ( thrdBusy , this )
>912	CallExpression	AfxBeginThread ( thrdBusy , this )
>913	ArgumentList	thrdBusy
>914	Argument	this
>915	Identifier	this
>916	Argument	thrdBusy
>917	Identifier	thrdBusy
>918	Callee	AfxBeginThread
>919	Identifier	AfxBeginThread
>920	Identifier	m_pThrd
>921	WhileStatement	while ( m_pThrd || m_bBusyThrd )
>922	ExpressionStatement	 
>923	CallExpression	End ( )
>924	ArgumentList	 
>925	Callee	End
>926	Identifier	End
>927	Condition	 
>928	OrExpression	m_pThrd || m_bBusyThrd
>929	Identifier	m_bBusyThrd
>930	Identifier	m_pThrd
>931	Condition	 
>932	BitAndExpression	m_nMode & BPC_MODE_BUSY
>933	Identifier	BPC_MODE_BUSY
>934	Identifier	m_nMode
>948	FunctionDef	CKCBusyProgressCtrl 
>949	ParameterList	 
>950	ReturnType	void
>951	CompoundStatement	 
>952	IfStatement	if ( m_pThrd )
>953	ElseStatement	else
>954	ExpressionStatement	 
>955	AssignmentExpr	m_bBusyThrd = false
>956	Identifier	false
>957	Identifier	m_bBusyThrd
>958	CompoundStatement	 
>959	IfStatement	if ( WaitForSingleObject ( m_pThrd -> m_hThread , m_nSpeed * 2 ) == WAIT_OBJECT_0 )
>960	CompoundStatement	 
>961	ExpressionStatement	 
>962	AssignmentExpr	m_pThrd = NULL
>963	Identifier	NULL
>964	Identifier	m_pThrd
>965	ExpressionStatement	 
>966	Identifier	m_pThrd
>967	Statement	 
>968	Condition	 
>969	EqualityExpression	WaitForSingleObject ( m_pThrd -> m_hThread , m_nSpeed * 2 ) == WAIT_OBJECT_0
>970	Identifier	WAIT_OBJECT_0
>971	CallExpression	WaitForSingleObject ( m_pThrd -> m_hThread , m_nSpeed * 2 )
>972	ArgumentList	m_pThrd -> m_hThread
>973	Argument	m_nSpeed * 2
>974	MultiplicativeExpression	m_nSpeed * 2
>975	PrimaryExpression	2
>976	Identifier	m_nSpeed
>977	Argument	m_pThrd -> m_hThread
>978	PtrMemberAccess	m_pThrd -> m_hThread
>979	Identifier	m_hThread
>980	Identifier	m_pThrd
>981	Callee	WaitForSingleObject
>982	Identifier	WaitForSingleObject
>983	IfStatement	if ( m_bBusyThrd )
>984	ExpressionStatement	 
>985	AssignmentExpr	m_bBusyThrd = false
>986	Identifier	false
>987	Identifier	m_bBusyThrd
>988	Condition	 
>989	Identifier	m_bBusyThrd
>990	Condition	 
>991	Identifier	m_pThrd
>1004	FunctionDef	CKCBusyProgressCtrl 
>1005	ParameterList	LPVOID pParam
>1006	Parameter	 
>1007	Identifier	pParam
>1008	ParameterType	LPVOID
>1009	ReturnType	UINT
>1010	CompoundStatement	 
>1011	ReturnStatement	 
>1012	PrimaryExpression	0
>1013	ExpressionStatement	 
>1014	AssignmentExpr	pThis -> m_bBusyThrd = false
>1015	Identifier	false
>1016	PtrMemberAccess	pThis -> m_bBusyThrd
>1017	Identifier	m_bBusyThrd
>1018	Identifier	pThis
>1019	WhileStatement	while ( pThis -> m_bBusyThrd )
>1020	CompoundStatement	 
>1021	ExpressionStatement	 
>1022	CallExpression	Sleep ( pThis -> m_nSpeed )
>1023	ArgumentList	pThis -> m_nSpeed
>1024	Argument	pThis -> m_nSpeed
>1025	PtrMemberAccess	pThis -> m_nSpeed
>1026	Identifier	m_nSpeed
>1027	Identifier	pThis
>1028	Callee	Sleep
>1029	Identifier	Sleep
>1030	ExpressionStatement	 
>1031	CallExpression	pThis -> StepIt ( )
>1032	ArgumentList	 
>1033	Callee	pThis -> StepIt
>1034	PtrMemberAccess	pThis -> StepIt
>1035	Identifier	StepIt
>1036	Identifier	pThis
>1037	Condition	 
>1038	PtrMemberAccess	pThis -> m_bBusyThrd
>1039	Identifier	m_bBusyThrd
>1040	Identifier	pThis
>1041	ExpressionStatement	 
>1042	AssignmentExpr	pThis -> m_bBusyThrd = true
>1043	Identifier	true
>1044	PtrMemberAccess	pThis -> m_bBusyThrd
>1045	Identifier	m_bBusyThrd
>1046	Identifier	pThis
>1047	WhileStatement	while ( pThis -> m_bBusyThrd )
>1048	ExpressionStatement	 
>1049	CallExpression	Sleep ( pThis -> m_nSpeed )
>1050	ArgumentList	pThis -> m_nSpeed
>1051	Argument	pThis -> m_nSpeed
>1052	PtrMemberAccess	pThis -> m_nSpeed
>1053	Identifier	m_nSpeed
>1054	Identifier	pThis
>1055	Callee	Sleep
>1056	Identifier	Sleep
>1057	Condition	 
>1058	PtrMemberAccess	pThis -> m_bBusyThrd
>1059	Identifier	m_bBusyThrd
>1060	Identifier	pThis
>1061	IfStatement	if ( ! pThis )
>1062	ReturnStatement	 
>1063	PrimaryExpression	0
>1064	Condition	 
>1065	UnaryOp	! pThis
>1066	Identifier	pThis
>1067	UnaryOperator	!
>1068	IdentifierDeclStatement	 
>1069	IdentifierDecl	* pThis = ( CKCBusyProgressCtrl * ) pParam
>1070	AssignmentExpr	* pThis = ( CKCBusyProgressCtrl * ) pParam
>1071	CastExpression	( CKCBusyProgressCtrl * ) pParam
>1072	Identifier	pParam
>1073	CastTarget	CKCBusyProgressCtrl *
>1074	Identifier	pThis
>1075	Identifier	pThis
>1076	IdentifierDeclType	CKCBusyProgressCtrl *
>1087	FunctionDef	CKCBusyProgressCtrl 
>1088	ParameterList	 
>1089	ReturnType	void
>1090	CompoundStatement	 
>1091	IfStatement	if ( m_nMode == BPC_MODE_BUSY )
>1092	ElseStatement	else
>1093	CompoundStatement	 
>1094	ExpressionStatement	 
>1095	AssignmentExpr	m_nStep = 1
>1096	PrimaryExpression	1
>1097	Identifier	m_nStep
>1098	ExpressionStatement	 
>1099	AssignmentExpr	m_nCurPos = 0
>1100	PrimaryExpression	0
>1101	Identifier	m_nCurPos
>1102	CompoundStatement	 
>1103	ExpressionStatement	 
>1104	AssignmentExpr	m_nStep = m_nBusyType != BPC_BUSY_RTL ? 1 
>1105	ConditionalExpression	m_nBusyType != BPC_BUSY_RTL ? 1 
>1106	UnaryOp	- 1
>1107	PrimaryExpression	1
>1108	UnaryOperator	-
>1109	PrimaryExpression	1
>1110	Condition	m_nBusyType != BPC_BUSY_RTL
>1111	EqualityExpression	m_nBusyType != BPC_BUSY_RTL
>1112	Identifier	BPC_BUSY_RTL
>1113	Identifier	m_nBusyType
>1114	Identifier	m_nStep
>1115	ExpressionStatement	 
>1116	AssignmentExpr	m_nCurPos = m_nBusyType != BPC_BUSY_RTL ? 0 
>1117	ConditionalExpression	m_nBusyType != BPC_BUSY_RTL ? 0 
>1118	ConditionalExpression	m_nBusyFill != BPC_BUSYFILL_SMOOTH ? m_nNumSteps 
>1119	MultiplicativeExpression	m_nNumSteps * m_nGranularity
>1120	Identifier	m_nGranularity
>1121	Identifier	m_nNumSteps
>1122	Identifier	m_nNumSteps
>1123	Condition	m_nBusyFill != BPC_BUSYFILL_SMOOTH
>1124	EqualityExpression	m_nBusyFill != BPC_BUSYFILL_SMOOTH
>1125	Identifier	BPC_BUSYFILL_SMOOTH
>1126	Identifier	m_nBusyFill
>1127	PrimaryExpression	0
>1128	Condition	m_nBusyType != BPC_BUSY_RTL
>1129	EqualityExpression	m_nBusyType != BPC_BUSY_RTL
>1130	Identifier	BPC_BUSY_RTL
>1131	Identifier	m_nBusyType
>1132	Identifier	m_nCurPos
>1133	Condition	 
>1134	EqualityExpression	m_nMode == BPC_MODE_BUSY
>1135	Identifier	BPC_MODE_BUSY
>1136	Identifier	m_nMode
>1150	FunctionDef	CKCBusyProgressCtrl 
>1151	ParameterList	WPARAM wParam , LPARAM lParam
>1152	Parameter	 
>1153	Identifier	lParam
>1154	ParameterType	LPARAM
>1155	Parameter	 
>1156	Identifier	wParam
>1157	ParameterType	WPARAM
>1158	ReturnType	LRESULT
>1159	CompoundStatement	 
>1160	ReturnStatement	 
>1161	PrimaryExpression	0
>1162	ExpressionStatement	 
>1163	CallExpression	SetRange ( ( int ) wParam , ( int ) lParam )
>1164	ArgumentList	( int ) wParam
>1165	Argument	( int ) lParam
>1166	CastExpression	( int ) lParam
>1167	Identifier	lParam
>1168	CastTarget	int
>1169	Argument	( int ) wParam
>1170	CastExpression	( int ) wParam
>1171	Identifier	wParam
>1172	CastTarget	int
>1173	Callee	SetRange
>1174	Identifier	SetRange
>1180	FunctionDef	CKCBusyProgressCtrl 
>1181	ParameterList	bool bUse
>1182	Parameter	 
>1183	Identifier	bUse
>1184	ParameterType	bool
>1185	ReturnType	void
>1186	CompoundStatement	 
>1187	ExpressionStatement	 
>1188	CallExpression	Invalidate ( )
>1189	ArgumentList	 
>1190	Callee	Invalidate
>1191	Identifier	Invalidate
>1192	IfStatement	if ( bUse )
>1193	ExpressionStatement	 
>1194	AssignmentExpr	m_colBkg = GetSysColor ( COLOR_3DFACE )
>1195	CallExpression	GetSysColor ( COLOR_3DFACE )
>1196	ArgumentList	COLOR_3DFACE
>1197	Argument	COLOR_3DFACE
>1198	Identifier	COLOR_3DFACE
>1199	Callee	GetSysColor
>1200	Identifier	GetSysColor
>1201	Identifier	m_colBkg
>1202	Condition	 
>1203	Identifier	bUse
>1204	ExpressionStatement	 
>1205	AssignmentExpr	m_bUseSysColBkg = bUse
>1206	Identifier	bUse
>1207	Identifier	m_bUseSysColBkg
>1216	FunctionDef	CKCBusyProgressCtrl 
>1217	ParameterList	 
>1218	ReturnType	void
>1219	CompoundStatement	 
>1220	IfStatement	if ( m_bUseSysColBkg )
>1221	CompoundStatement	 
>1222	ExpressionStatement	 
>1223	CallExpression	Invalidate ( )
>1224	ArgumentList	 
>1225	Callee	Invalidate
>1226	Identifier	Invalidate
>1227	ExpressionStatement	 
>1228	AssignmentExpr	m_colBkg = GetSysColor ( COLOR_3DFACE )
>1229	CallExpression	GetSysColor ( COLOR_3DFACE )
>1230	ArgumentList	COLOR_3DFACE
>1231	Argument	COLOR_3DFACE
>1232	Identifier	COLOR_3DFACE
>1233	Callee	GetSysColor
>1234	Identifier	GetSysColor
>1235	Identifier	m_colBkg
>1236	Condition	 
>1237	Identifier	m_bUseSysColBkg
>1238	ExpressionStatement	 
>1239	CallExpression	CStatic 
>1240	ArgumentList	 
>1241	Callee	CStatic 
>1242	Identifier	CStatic 
>1250	FunctionDef	CKCBusyProgressCtrl 
>1251	ParameterList	int nType
>1252	Parameter	 
>1253	Identifier	nType
>1254	ParameterType	int
>1255	ReturnType	void
>1256	CompoundStatement	 
>1257	IfStatement	if ( m_nMode == BPC_MODE_BUSY )
>1258	CompoundStatement	 
>1259	SwitchStatement	switch ( nType )
>1260	CompoundStatement	 
>1261	BreakStatement	 
>1262	Label	 
>1263	Identifier	default
>1264	Label	 
>1265	Identifier	BPC_BUSY_PINGPONG
>1266	BreakStatement	 
>1267	ExpressionStatement	 
>1268	AssignmentExpr	m_nStep = - 1
>1269	UnaryOp	- 1
>1270	PrimaryExpression	1
>1271	UnaryOperator	-
>1272	Identifier	m_nStep
>1273	Label	 
>1274	Identifier	BPC_BUSY_RTL
>1275	BreakStatement	 
>1276	ExpressionStatement	 
>1277	AssignmentExpr	m_nStep = 1
>1278	PrimaryExpression	1
>1279	Identifier	m_nStep
>1280	Label	 
>1281	Identifier	BPC_BUSY_LTR
>1282	Condition	 
>1283	Identifier	nType
>1284	Condition	 
>1285	EqualityExpression	m_nMode == BPC_MODE_BUSY
>1286	Identifier	BPC_MODE_BUSY
>1287	Identifier	m_nMode
>1288	ExpressionStatement	 
>1289	AssignmentExpr	m_nBusyType = nType
>1290	Identifier	nType
>1291	Identifier	m_nBusyType
>1300	FunctionDef	CKCBusyProgressCtrl 
>1301	ParameterList	int nFill
>1302	Parameter	 
>1303	Identifier	nFill
>1304	ParameterType	int
>1305	ReturnType	void
>1306	CompoundStatement	 
>1307	IfStatement	if ( m_nMode == BPC_MODE_BUSY )
>1308	CompoundStatement	 
>1309	SwitchStatement	switch ( nFill )
>1310	CompoundStatement	 
>1311	BreakStatement	 
>1312	ExpressionStatement	 
>1313	CallExpression	Reset ( )
>1314	ArgumentList	 
>1315	Callee	Reset
>1316	Identifier	Reset
>1317	Label	 
>1318	Identifier	default
>1319	Label	 
>1320	Identifier	BPC_BUSYFILL_BLOCK
>1321	BreakStatement	 
>1322	ExpressionStatement	 
>1323	AssignmentExpr	m_nNumStepsSmooth = m_nNumSteps * m_nGranularity
>1324	MultiplicativeExpression	m_nNumSteps * m_nGranularity
>1325	Identifier	m_nGranularity
>1326	Identifier	m_nNumSteps
>1327	Identifier	m_nNumStepsSmooth
>1328	ExpressionStatement	 
>1329	CallExpression	Reset ( )
>1330	ArgumentList	 
>1331	Callee	Reset
>1332	Identifier	Reset
>1333	Label	 
>1334	Identifier	BPC_BUSYFILL_SMOOTH
>1335	Condition	 
>1336	Identifier	nFill
>1337	ExpressionStatement	 
>1338	AssignmentExpr	m_nBusyFill = nFill
>1339	Identifier	nFill
>1340	Identifier	m_nBusyFill
>1341	Condition	 
>1342	EqualityExpression	m_nMode == BPC_MODE_BUSY
>1343	Identifier	BPC_MODE_BUSY
>1344	Identifier	m_nMode
<3=8,4
<4=5
<5=7,6
<13=15,14
<15=16
<16=41,17
<17=32,25,18
<18=19
<19=21,20
<21=22
<22=24,23
<25=26
<26=28,27
<28=29
<29=31,30
<32=33
<33=37,34
<34=35
<35=36
<37=38
<38=40,39
<41=42
<49=52,51,50
<52=58,53
<53=54
<54=56,55
<56=57
<58=59
<59=61,60
<61=62
<66=84,83,67
<67=80,77,74,71,68
<68=70,69
<71=73,72
<74=76,75
<77=79,78
<80=82,81
<84=92,87,85
<85=86
<87=88
<88=90,89
<90=91
<92=93
<93=125,124,94
<94=123,95
<95=121,96
<96=114,107,105,103,101,99,97
<97=98
<99=100
<101=102
<103=104
<105=106
<107=108
<108=112,109
<109=110
<110=111
<112=113
<114=115
<115=119,116
<116=117
<117=118
<119=120
<121=122
<137=140,139,138
<140=180,173,165,150,141
<141=142
<142=149,143
<143=145,144
<145=146
<146=148,147
<150=151
<151=164,152
<152=156,153
<153=155,154
<156=163,157
<157=159,158
<159=160
<160=162,161
<165=166
<166=170,167
<167=169,168
<170=172,171
<173=174
<174=179,178,175
<175=177,176
<180=190,181
<181=182
<182=188,183
<183=184
<184=185
<185=187,186
<188=189
<190=191
<191=193,192
<193=194
<194=196,195
<211=214,213,212
<214=325,268,259,250,215
<215=216
<216=246,217
<217=244,242,235,228,224,222,220,218
<218=219
<220=221
<222=223
<224=225
<225=227,226
<228=229
<229=231,230
<231=232
<232=234,233
<235=236
<236=238,237
<238=239
<239=241,240
<242=243
<244=245
<246=247
<247=249,248
<250=251
<251=257,252
<252=255,253
<253=254
<255=256
<257=258
<259=260
<260=266,261
<261=264,262
<262=263
<264=265
<266=267
<268=319,269
<269=308,283,270
<270=271
<271=282,272
<272=278,273
<273=274
<274=275
<275=277,276
<278=279
<279=281,280
<283=284
<284=304,285
<285=300,293,286
<286=287
<287=289,288
<289=290
<290=292,291
<293=294
<294=296,295
<296=297
<297=299,298
<300=301
<301=303,302
<304=305
<305=307,306
<308=309
<309=315,310
<310=311
<311=312
<312=314,313
<315=316
<316=318,317
<319=320
<320=324,321
<321=323,322
<325=326
<326=329,328,327
<346=355,354,347
<347=351,348
<348=350,349
<351=353,352
<355=356
<356=357
<357=365,358
<358=361,359
<359=360
<361=362
<362=364,363
<365=366
<366=368,367
<408=417,416,409
<409=413,410
<410=412,411
<413=415,414
<417=418
<418=419
<419=425,420
<420=421
<421=422
<422=424,423
<425=426
<426=428,427
<435=444,443,436
<436=440,437
<437=439,438
<440=442,441
<444=546,536,523,514,501,488,477,468,459,452,445
<445=446
<446=448,447
<448=449
<449=451,450
<452=453
<453=455,454
<455=456
<456=458,457
<459=460
<460=464,461
<461=462
<462=463
<464=465
<465=467,466
<468=469
<469=473,470
<470=471
<471=472
<473=474
<474=476,475
<477=478
<478=484,479
<479=480
<480=481
<481=483,482
<484=485
<485=487,486
<488=489
<489=500,490
<490=496,491
<491=492
<492=493
<493=495,494
<496=497
<497=499,498
<501=502
<502=513,503
<503=509,504
<504=505
<505=506
<506=508,507
<509=510
<510=512,511
<514=515
<515=519,516
<516=517
<517=518
<519=520
<520=522,521
<523=524
<524=532,525
<525=530,528,526
<526=527
<528=529
<530=531
<532=533
<533=535,534
<536=543,537
<537=542,541,538
<538=540,539
<543=545,544
<546=553,547
<547=552,551,548
<548=550,549
<553=555,554
<573=585,584,574
<574=581,578,575
<575=577,576
<578=580,579
<581=583,582
<585=639,628,618,599,586
<586=587
<587=595,588
<588=591,589
<589=590
<591=592
<592=594,593
<595=596
<596=598,597
<599=610,600
<600=601
<601=607,602
<602=604,603
<604=606,605
<607=609,608
<610=611
<611=615,612
<612=614,613
<615=617,616
<618=619
<619=625,620
<620=622,621
<622=624,623
<625=627,626
<628=629
<629=635,630
<630=633,631
<631=632
<633=634
<635=636
<636=638,637
<639=640
<640=645,644,641
<641=643,642
<658=670,669,659
<659=666,663,660
<660=662,661
<663=665,664
<666=668,667
<670=709,700,671
<671=696,672
<672=687,680,673
<673=674
<674=676,675
<676=677
<677=679,678
<680=681
<681=683,682
<683=684
<684=686,685
<687=688
<688=692,689
<689=690
<690=691
<692=693
<693=695,694
<696=697
<697=699,698
<700=701
<701=707,702
<702=703
<703=704
<704=706,705
<707=708
<709=710
<710=718,711
<711=716,714,712
<712=713
<714=715
<716=717
<718=719
<731=734,733,732
<734=835,744,740,735
<735=736
<736=738,737
<738=739
<740=741
<741=743,742
<744=831,752,745
<745=746
<746=748,747
<748=749
<749=751,750
<752=813,753
<753=811,754
<754=809,786,785,783,769,768,766,756,755
<756=757
<757=762,758
<758=759
<759=761,760
<762=763
<763=765,764
<766=767
<769=770
<770=777,771
<771=772
<772=776,773
<773=775,774
<777=778
<778=782,779
<779=781,780
<783=784
<786=796,787
<787=792,788
<788=789
<789=791,790
<792=793
<793=795,794
<796=803,797
<797=798
<798=802,799
<799=801,800
<803=804
<804=808,805
<805=807,806
<809=810
<811=812
<813=829,814
<814=827,823,822,820,816,815
<816=817
<817=819,818
<820=821
<823=824
<824=826,825
<827=828
<829=830
<831=832
<832=834,833
<835=836
<836=841,840,837
<837=839,838
<855=861,860,856
<856=857
<857=859,858
<861=885,862
<862=877,863
<863=873,864
<864=869,865
<865=866
<866=868,867
<869=870
<870=872,871
<873=874
<874=876,875
<877=878
<878=882,879
<879=881,880
<882=884,883
<885=886
<886=888,887
<888=889
<898=901,900,899
<901=902
<902=931,903
<903=921,910,904
<904=905
<905=907,906
<907=909,908
<910=911
<911=920,912
<912=918,913
<913=916,914
<914=915
<916=917
<918=919
<921=927,922
<922=923
<923=925,924
<925=926
<927=928
<928=930,929
<931=932
<932=934,933
<948=951,950,949
<951=952
<952=990,958,953
<953=954
<954=955
<955=957,956
<958=983,959
<959=968,960
<960=967,965,961
<961=962
<962=964,963
<965=966
<968=969
<969=971,970
<971=981,972
<972=977,973
<973=974
<974=976,975
<977=978
<978=980,979
<981=982
<983=988,984
<984=985
<985=987,986
<988=989
<990=991
<1004=1010,1009,1005
<1005=1006
<1006=1008,1007
<1010=1068,1061,1047,1041,1019,1013,1011
<1011=1012
<1013=1014
<1014=1016,1015
<1016=1018,1017
<1019=1037,1020
<1020=1030,1021
<1021=1022
<1022=1028,1023
<1023=1024
<1024=1025
<1025=1027,1026
<1028=1029
<1030=1031
<1031=1033,1032
<1033=1034
<1034=1036,1035
<1037=1038
<1038=1040,1039
<1041=1042
<1042=1044,1043
<1044=1046,1045
<1047=1057,1048
<1048=1049
<1049=1055,1050
<1050=1051
<1051=1052
<1052=1054,1053
<1055=1056
<1057=1058
<1058=1060,1059
<1061=1064,1062
<1062=1063
<1064=1065
<1065=1067,1066
<1068=1069
<1069=1076,1075,1070
<1070=1074,1071
<1071=1073,1072
<1087=1090,1089,1088
<1090=1091
<1091=1133,1102,1092
<1092=1093
<1093=1098,1094
<1094=1095
<1095=1097,1096
<1098=1099
<1099=1101,1100
<1102=1115,1103
<1103=1104
<1104=1114,1105
<1105=1110,1109,1106
<1106=1108,1107
<1110=1111
<1111=1113,1112
<1115=1116
<1116=1132,1117
<1117=1128,1127,1118
<1118=1123,1122,1119
<1119=1121,1120
<1123=1124
<1124=1126,1125
<1128=1129
<1129=1131,1130
<1133=1134
<1134=1136,1135
<1150=1159,1158,1151
<1151=1155,1152
<1152=1154,1153
<1155=1157,1156
<1159=1162,1160
<1160=1161
<1162=1163
<1163=1173,1164
<1164=1169,1165
<1165=1166
<1166=1168,1167
<1169=1170
<1170=1172,1171
<1173=1174
<1180=1186,1185,1181
<1181=1182
<1182=1184,1183
<1186=1204,1192,1187
<1187=1188
<1188=1190,1189
<1190=1191
<1192=1202,1193
<1193=1194
<1194=1201,1195
<1195=1199,1196
<1196=1197
<1197=1198
<1199=1200
<1202=1203
<1204=1205
<1205=1207,1206
<1216=1219,1218,1217
<1219=1238,1220
<1220=1236,1221
<1221=1227,1222
<1222=1223
<1223=1225,1224
<1225=1226
<1227=1228
<1228=1235,1229
<1229=1233,1230
<1230=1231
<1231=1232
<1233=1234
<1236=1237
<1238=1239
<1239=1241,1240
<1241=1242
<1250=1256,1255,1251
<1251=1252
<1252=1254,1253
<1256=1288,1257
<1257=1284,1258
<1258=1259
<1259=1282,1260
<1260=1280,1276,1275,1273,1267,1266,1264,1262,1261
<1262=1263
<1264=1265
<1267=1268
<1268=1272,1269
<1269=1271,1270
<1273=1274
<1276=1277
<1277=1279,1278
<1280=1281
<1282=1283
<1284=1285
<1285=1287,1286
<1288=1289
<1289=1291,1290
<1300=1306,1305,1301
<1301=1302
<1302=1304,1303
<1306=1307
<1307=1341,1308
<1308=1337,1309
<1309=1335,1310
<1310=1333,1328,1322,1321,1319,1317,1312,1311
<1312=1313
<1313=1315,1314
<1315=1316
<1317=1318
<1319=1320
<1322=1323
<1323=1327,1324
<1324=1326,1325
<1328=1329
<1329=1331,1330
<1331=1332
<1333=1334
<1335=1336
<1337=1338
<1338=1340,1339
<1341=1342
<1342=1344,1343
