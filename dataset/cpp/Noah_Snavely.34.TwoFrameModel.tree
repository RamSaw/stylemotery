>3	FunctionDef	ReadVector (FILE * f , int n , double * v)
>4	ParameterList	FILE * f , int n , double * v
>5	Parameter	 
>6	Identifier	v
>7	ParameterType	double *
>8	Parameter	 
>9	Identifier	n
>10	ParameterType	int
>11	Parameter	 
>12	Identifier	f
>13	ParameterType	FILE *
>14	ReturnType	static void
>15	CompoundStatement	 
>16	ForStatement	for ( int i = 0 ; i < n ; i ++ )
>17	CompoundStatement	 
>18	ExpressionStatement	 
>19	CallExpression	fscanf ( f , \"%lf \" , v + i )
>20	ArgumentList	f
>21	Argument	v + i
>22	AdditiveExpression	v + i
>23	Identifier	i
>24	Identifier	v
>25	Argument	\"%lf \"
>26	PrimaryExpression	\"%lf \"
>27	Argument	f
>28	Identifier	f
>29	Callee	fscanf
>30	Identifier	fscanf
>31	IncDecOp	 
>32	IncDec	++
>33	Identifier	i
>34	Condition	 
>35	RelationalExpression	i < n
>36	Identifier	n
>37	Identifier	i
>38	ForInit	 
>39	IdentifierDeclStatement	int i = 0 ;
>40	IdentifierDecl	i = 0
>41	AssignmentExpr	i = 0
>42	PrimaryExpression	0
>43	Identifier	i
>44	Identifier	i
>45	IdentifierDeclType	int
>53	FunctionDef	ReadCamera (FILE * f , camera_params_t & camera)
>54	ParameterList	FILE * f , camera_params_t & camera
>55	Parameter	 
>56	Identifier	camera
>57	ParameterType	camera_params_t &
>58	Parameter	 
>59	Identifier	f
>60	ParameterType	FILE *
>61	ReturnType	static void
>62	CompoundStatement	 
>63	ExpressionStatement	 
>64	CallExpression	fscanf ( f , \"%lf\n\" , & ( camera . f ) )
>65	ArgumentList	f
>66	Argument	& ( camera . f )
>67	UnaryOp	& ( camera . f )
>68	MemberAccess	camera . f
>69	Identifier	f
>70	Identifier	camera
>71	UnaryOperator	&
>72	Argument	\"%lf\n\"
>73	PrimaryExpression	\"%lf\n\"
>74	Argument	f
>75	Identifier	f
>76	Callee	fscanf
>77	Identifier	fscanf
>78	ExpressionStatement	 
>79	CallExpression	ReadVector ( f , 3 , camera . t )
>80	ArgumentList	f
>81	Argument	camera . t
>82	MemberAccess	camera . t
>83	Identifier	t
>84	Identifier	camera
>85	Argument	3
>86	PrimaryExpression	3
>87	Argument	f
>88	Identifier	f
>89	Callee	ReadVector
>90	Identifier	ReadVector
>91	ExpressionStatement	 
>92	CallExpression	ReadVector ( f , 9 , camera . R )
>93	ArgumentList	f
>94	Argument	camera . R
>95	MemberAccess	camera . R
>96	Identifier	R
>97	Identifier	camera
>98	Argument	9
>99	PrimaryExpression	9
>100	Argument	f
>101	Identifier	f
>102	Callee	ReadVector
>103	Identifier	ReadVector
>113	FunctionDef	WriteVector (FILE * f , int n , const double * v)
>114	ParameterList	FILE * f , int n , const double * v
>115	Parameter	 
>116	Identifier	v
>117	ParameterType	const double *
>118	Parameter	 
>119	Identifier	n
>120	ParameterType	int
>121	Parameter	 
>122	Identifier	f
>123	ParameterType	FILE *
>124	ReturnType	static void
>125	CompoundStatement	 
>126	ExpressionStatement	 
>127	CallExpression	fprintf ( f , \"\n\" )
>128	ArgumentList	f
>129	Argument	\"\n\"
>130	PrimaryExpression	\"\n\"
>131	Argument	f
>132	Identifier	f
>133	Callee	fprintf
>134	Identifier	fprintf
>135	ForStatement	for ( int i = 0 ; i < n ; i ++ )
>136	CompoundStatement	 
>137	ExpressionStatement	 
>138	CallExpression	fprintf ( f , \"%0.16e \" , v [ i ] )
>139	ArgumentList	f
>140	Argument	v [ i ]
>141	ArrayIndexing	v [ i ]
>142	Identifier	i
>143	Identifier	v
>144	Argument	\"%0.16e \"
>145	PrimaryExpression	\"%0.16e \"
>146	Argument	f
>147	Identifier	f
>148	Callee	fprintf
>149	Identifier	fprintf
>150	IncDecOp	 
>151	IncDec	++
>152	Identifier	i
>153	Condition	 
>154	RelationalExpression	i < n
>155	Identifier	n
>156	Identifier	i
>157	ForInit	 
>158	IdentifierDeclStatement	int i = 0 ;
>159	IdentifierDecl	i = 0
>160	AssignmentExpr	i = 0
>161	PrimaryExpression	0
>162	Identifier	i
>163	Identifier	i
>164	IdentifierDeclType	int
>174	FunctionDef	WriteCamera (FILE * f , const camera_params_t & camera)
>175	ParameterList	FILE * f , const camera_params_t & camera
>176	Parameter	 
>177	Identifier	camera
>178	ParameterType	const camera_params_t &
>179	Parameter	 
>180	Identifier	f
>181	ParameterType	FILE *
>182	ReturnType	static void
>183	CompoundStatement	 
>184	ExpressionStatement	 
>185	CallExpression	fprintf ( f , \"%0.16e\n\" , camera . f )
>186	ArgumentList	f
>187	Argument	camera . f
>188	MemberAccess	camera . f
>189	Identifier	f
>190	Identifier	camera
>191	Argument	\"%0.16e\n\"
>192	PrimaryExpression	\"%0.16e\n\"
>193	Argument	f
>194	Identifier	f
>195	Callee	fprintf
>196	Identifier	fprintf
>197	ExpressionStatement	 
>198	CallExpression	WriteVector ( f , 3 , camera . t )
>199	ArgumentList	f
>200	Argument	camera . t
>201	MemberAccess	camera . t
>202	Identifier	t
>203	Identifier	camera
>204	Argument	3
>205	PrimaryExpression	3
>206	Argument	f
>207	Identifier	f
>208	Callee	WriteVector
>209	Identifier	WriteVector
>210	ExpressionStatement	 
>211	CallExpression	WriteVector ( f , 9 , camera . R )
>212	ArgumentList	f
>213	Argument	camera . R
>214	MemberAccess	camera . R
>215	Identifier	R
>216	Identifier	camera
>217	Argument	9
>218	PrimaryExpression	9
>219	Argument	f
>220	Identifier	f
>221	Callee	WriteVector
>222	Identifier	WriteVector
>231	FunctionDef	WriteCameraPose (FILE * f , const camera_params_t & camera)
>232	ParameterList	FILE * f , const camera_params_t & camera
>233	Parameter	 
>234	Identifier	camera
>235	ParameterType	const camera_params_t &
>236	Parameter	 
>237	Identifier	f
>238	ParameterType	FILE *
>239	ReturnType	static void
>240	CompoundStatement	 
>241	ExpressionStatement	 
>242	CallExpression	WriteVector ( f , 3 , camera . t )
>243	ArgumentList	f
>244	Argument	camera . t
>245	MemberAccess	camera . t
>246	Identifier	t
>247	Identifier	camera
>248	Argument	3
>249	PrimaryExpression	3
>250	Argument	f
>251	Identifier	f
>252	Callee	WriteVector
>253	Identifier	WriteVector
>254	ExpressionStatement	 
>255	CallExpression	WriteVector ( f , 9 , camera . R )
>256	ArgumentList	f
>257	Argument	camera . R
>258	MemberAccess	camera . R
>259	Identifier	R
>260	Identifier	camera
>261	Argument	9
>262	PrimaryExpression	9
>263	Argument	f
>264	Identifier	f
>265	Callee	WriteVector
>266	Identifier	WriteVector
>274	FunctionDef	TwoFrameModel 
>275	ParameterList	FILE * f
>276	Parameter	 
>277	Identifier	f
>278	ParameterType	FILE *
>279	ReturnType	void
>280	CompoundStatement	 
>281	ExpressionStatement	 
>282	CallExpression	ReadVector ( f , 9 , m_C1 )
>283	ArgumentList	f
>284	Argument	m_C1
>285	Identifier	m_C1
>286	Argument	9
>287	PrimaryExpression	9
>288	Argument	f
>289	Identifier	f
>290	Callee	ReadVector
>291	Identifier	ReadVector
>292	ExpressionStatement	 
>293	CallExpression	ReadVector ( f , 9 , m_C0 )
>294	ArgumentList	f
>295	Argument	m_C0
>296	Identifier	m_C0
>297	Argument	9
>298	PrimaryExpression	9
>299	Argument	f
>300	Identifier	f
>301	Callee	ReadVector
>302	Identifier	ReadVector
>303	ExpressionStatement	 
>304	CallExpression	ReadCamera ( f , m_camera1 )
>305	ArgumentList	f
>306	Argument	m_camera1
>307	Identifier	m_camera1
>308	Argument	f
>309	Identifier	f
>310	Callee	ReadCamera
>311	Identifier	ReadCamera
>312	ExpressionStatement	 
>313	CallExpression	ReadCamera ( f , m_camera0 )
>314	ArgumentList	f
>315	Argument	m_camera0
>316	Identifier	m_camera0
>317	Argument	f
>318	Identifier	f
>319	Callee	ReadCamera
>320	Identifier	ReadCamera
>321	ExpressionStatement	 
>322	Identifier	k2_tmp
>323	Statement	 
>324	Statement	 
>325	Statement	 
>326	ExpressionStatement	 
>327	Identifier	k1_tmp
>328	Statement	 
>329	Statement	 
>330	Statement	 
>331	ExpressionStatement	 
>332	Identifier	tracks_tmp
>333	Statement	 
>334	Statement	 
>335	Statement	 
>336	ExpressionStatement	 
>337	Identifier	points_tmp
>338	Statement	 
>339	Statement	 
>340	Statement	 
>341	IfStatement	if ( use_tracks )
>342	ElseStatement	else
>343	CompoundStatement	 
>344	ExpressionStatement	 
>345	AssignmentExpr	m_tracks = NULL
>346	Identifier	NULL
>347	Identifier	m_tracks
>348	ForStatement	for ( int i = 0 ; i < m_num_points ; i ++ )
>349	CompoundStatement	 
>350	ExpressionStatement	 
>351	AssignmentExpr	m_points [ i ] = points_tmp [ i ]
>352	ArrayIndexing	points_tmp [ i ]
>353	Identifier	i
>354	Identifier	points_tmp
>355	ArrayIndexing	m_points [ i ]
>356	Identifier	i
>357	Identifier	m_points
>358	ExpressionStatement	 
>359	AssignmentExpr	m_keys2 [ i ] = k2_tmp [ i ]
>360	ArrayIndexing	k2_tmp [ i ]
>361	Identifier	i
>362	Identifier	k2_tmp
>363	ArrayIndexing	m_keys2 [ i ]
>364	Identifier	i
>365	Identifier	m_keys2
>366	ExpressionStatement	 
>367	AssignmentExpr	m_keys1 [ i ] = k1_tmp [ i ]
>368	ArrayIndexing	k1_tmp [ i ]
>369	Identifier	i
>370	Identifier	k1_tmp
>371	ArrayIndexing	m_keys1 [ i ]
>372	Identifier	i
>373	Identifier	m_keys1
>374	IncDecOp	 
>375	IncDec	++
>376	Identifier	i
>377	Condition	 
>378	RelationalExpression	i < m_num_points
>379	Identifier	m_num_points
>380	Identifier	i
>381	ForInit	 
>382	IdentifierDeclStatement	int i = 0 ;
>383	IdentifierDecl	i = 0
>384	AssignmentExpr	i = 0
>385	PrimaryExpression	0
>386	Identifier	i
>387	Identifier	i
>388	IdentifierDeclType	int
>389	ExpressionStatement	 
>390	AssignmentExpr	m_keys2 = new int [ m_num_points ]
>391	Identifier	m_num_points
>392	Identifier	m_keys2
>393	ExpressionStatement	 
>394	AssignmentExpr	m_keys1 = new int [ m_num_points ]
>395	Identifier	m_num_points
>396	Identifier	m_keys1
>397	CompoundStatement	 
>398	ExpressionStatement	 
>399	Identifier	perm
>400	Statement	 
>401	Statement	 
>402	Statement	 
>403	ExpressionStatement	 
>404	AssignmentExpr	m_keys1 = m_keys2 = NULL
>405	AssignmentExpr	m_keys2 = NULL
>406	Identifier	NULL
>407	Identifier	m_keys2
>408	Identifier	m_keys1
>409	ForStatement	for ( int i = 0 ; i < m_num_points ; i ++ )
>410	CompoundStatement	 
>411	ExpressionStatement	 
>412	AssignmentExpr	m_points [ i ] = points_tmp [ perm [ i ] ]
>413	ArrayIndexing	points_tmp [ perm [ i ] ]
>414	ArrayIndexing	perm [ i ]
>415	Identifier	i
>416	Identifier	perm
>417	Identifier	points_tmp
>418	ArrayIndexing	m_points [ i ]
>419	Identifier	i
>420	Identifier	m_points
>421	ExpressionStatement	 
>422	AssignmentExpr	m_tracks [ i ] = iround ( tracks_tmp [ i ] )
>423	CallExpression	iround ( tracks_tmp [ i ] )
>424	ArgumentList	tracks_tmp [ i ]
>425	Argument	tracks_tmp [ i ]
>426	ArrayIndexing	tracks_tmp [ i ]
>427	Identifier	i
>428	Identifier	tracks_tmp
>429	Callee	iround
>430	Identifier	iround
>431	ArrayIndexing	m_tracks [ i ]
>432	Identifier	i
>433	Identifier	m_tracks
>434	IncDecOp	 
>435	IncDec	++
>436	Identifier	i
>437	Condition	 
>438	RelationalExpression	i < m_num_points
>439	Identifier	m_num_points
>440	Identifier	i
>441	ForInit	 
>442	IdentifierDeclStatement	int i = 0 ;
>443	IdentifierDecl	i = 0
>444	AssignmentExpr	i = 0
>445	PrimaryExpression	0
>446	Identifier	i
>447	Identifier	i
>448	IdentifierDeclType	int
>449	ExpressionStatement	 
>450	CallExpression	qsort_perm ( m_num_points , tracks_tmp , perm )
>451	ArgumentList	m_num_points
>452	Argument	perm
>453	Identifier	perm
>454	Argument	tracks_tmp
>455	Identifier	tracks_tmp
>456	Argument	m_num_points
>457	Identifier	m_num_points
>458	Callee	qsort_perm
>459	Identifier	qsort_perm
>460	ExpressionStatement	 
>461	CallExpression	qsort_ascending ( )
>462	ArgumentList	 
>463	Callee	qsort_ascending
>464	Identifier	qsort_ascending
>465	IdentifierDeclStatement	 
>466	IdentifierDecl	* perm = new int [ m_num_points ]
>467	AssignmentExpr	* perm = new int [ m_num_points ]
>468	Identifier	m_num_points
>469	Identifier	m_num_points
>470	Identifier	perm
>471	IdentifierDeclType	int *
>472	Condition	 
>473	Identifier	use_tracks
>474	IfStatement	if ( tracks_tmp [ 0 ] < 0 )
>475	ExpressionStatement	 
>476	AssignmentExpr	use_tracks = false
>477	Identifier	false
>478	Identifier	use_tracks
>479	Condition	 
>480	RelationalExpression	tracks_tmp [ 0 ] < 0
>481	PrimaryExpression	0
>482	ArrayIndexing	tracks_tmp [ 0 ]
>483	PrimaryExpression	0
>484	Identifier	tracks_tmp
>485	IdentifierDeclStatement	 
>486	IdentifierDecl	use_tracks = true
>487	AssignmentExpr	use_tracks = true
>488	Identifier	true
>489	Identifier	true
>490	Identifier	use_tracks
>491	IdentifierDeclType	bool
>492	ForStatement	for ( int i = 0 ; i < m_num_points ; i ++ )
>493	CompoundStatement	 
>494	ExpressionStatement	 
>495	AssignmentExpr	k2_tmp [ i ] = k2
>496	Identifier	k2
>497	ArrayIndexing	k2_tmp [ i ]
>498	Identifier	i
>499	Identifier	k2_tmp
>500	ExpressionStatement	 
>501	AssignmentExpr	k1_tmp [ i ] = k1
>502	Identifier	k1
>503	ArrayIndexing	k1_tmp [ i ]
>504	Identifier	i
>505	Identifier	k1_tmp
>506	ExpressionStatement	 
>507	AssignmentExpr	tracks_tmp [ i ] = ( double ) tr
>508	CastExpression	( double ) tr
>509	Identifier	tr
>510	CastTarget	double
>511	ArrayIndexing	tracks_tmp [ i ]
>512	Identifier	i
>513	Identifier	tracks_tmp
>514	ExpressionStatement	 
>515	CallExpression	fscanf ( f , \"%d %d %d %lf %lf %lf\n\" , & tr , & k1 , & k2 , & ( Vx ( points_tmp [ i ] ) ) , & ( Vy ( points_tmp [ \
>516	ArgumentList	f
>517	Argument	& ( Vz ( points_tmp [ i ] ) )
>518	UnaryOp	& ( Vz ( points_tmp [ i ] ) )
>519	CallExpression	Vz ( points_tmp [ i ] )
>520	ArgumentList	points_tmp [ i ]
>521	Argument	points_tmp [ i ]
>522	ArrayIndexing	points_tmp [ i ]
>523	Identifier	i
>524	Identifier	points_tmp
>525	Callee	Vz
>526	Identifier	Vz
>527	UnaryOperator	&
>528	Argument	& ( Vy ( points_tmp [ i ] ) )
>529	UnaryOp	& ( Vy ( points_tmp [ i ] ) )
>530	CallExpression	Vy ( points_tmp [ i ] )
>531	ArgumentList	points_tmp [ i ]
>532	Argument	points_tmp [ i ]
>533	ArrayIndexing	points_tmp [ i ]
>534	Identifier	i
>535	Identifier	points_tmp
>536	Callee	Vy
>537	Identifier	Vy
>538	UnaryOperator	&
>539	Argument	& ( Vx ( points_tmp [ i ] ) )
>540	UnaryOp	& ( Vx ( points_tmp [ i ] ) )
>541	CallExpression	Vx ( points_tmp [ i ] )
>542	ArgumentList	points_tmp [ i ]
>543	Argument	points_tmp [ i ]
>544	ArrayIndexing	points_tmp [ i ]
>545	Identifier	i
>546	Identifier	points_tmp
>547	Callee	Vx
>548	Identifier	Vx
>549	UnaryOperator	&
>550	Argument	& k2
>551	UnaryOp	& k2
>552	Identifier	k2
>553	UnaryOperator	&
>554	Argument	& k1
>555	UnaryOp	& k1
>556	Identifier	k1
>557	UnaryOperator	&
>558	Argument	& tr
>559	UnaryOp	& tr
>560	Identifier	tr
>561	UnaryOperator	&
>562	Argument	\"%d %d %d %lf %lf %lf\n\"
>563	PrimaryExpression	\"%d %d %d %lf %lf %lf\n\"
>564	Argument	f
>565	Identifier	f
>566	Callee	fscanf
>567	Identifier	fscanf
>568	IdentifierDeclStatement	 
>569	IdentifierDecl	k2
>570	Identifier	k2
>571	IdentifierDeclType	int
>572	IdentifierDecl	k1
>573	Identifier	k1
>574	IdentifierDeclType	int
>575	IdentifierDecl	tr
>576	Identifier	tr
>577	IdentifierDeclType	int
>578	IncDecOp	 
>579	IncDec	++
>580	Identifier	i
>581	Condition	 
>582	RelationalExpression	i < m_num_points
>583	Identifier	m_num_points
>584	Identifier	i
>585	ForInit	 
>586	IdentifierDeclStatement	int i = 0 ;
>587	IdentifierDecl	i = 0
>588	AssignmentExpr	i = 0
>589	PrimaryExpression	0
>590	Identifier	i
>591	Identifier	i
>592	IdentifierDeclType	int
>593	ExpressionStatement	 
>594	AssignmentExpr	m_tracks = new int [ m_num_points ]
>595	Identifier	m_num_points
>596	Identifier	m_tracks
>597	ExpressionStatement	 
>598	AssignmentExpr	m_points = new v3_t [ m_num_points ]
>599	Identifier	m_num_points
>600	Identifier	m_points
>601	IdentifierDeclStatement	 
>602	IdentifierDecl	* k2_tmp = new int [ m_num_points ]
>603	AssignmentExpr	* k2_tmp = new int [ m_num_points ]
>604	Identifier	m_num_points
>605	Identifier	m_num_points
>606	Identifier	k2_tmp
>607	IdentifierDeclType	int *
>608	IdentifierDeclStatement	 
>609	IdentifierDecl	* k1_tmp = new int [ m_num_points ]
>610	AssignmentExpr	* k1_tmp = new int [ m_num_points ]
>611	Identifier	m_num_points
>612	Identifier	m_num_points
>613	Identifier	k1_tmp
>614	IdentifierDeclType	int *
>615	IdentifierDeclStatement	 
>616	IdentifierDecl	* tracks_tmp = new double [ m_num_points ]
>617	AssignmentExpr	* tracks_tmp = new double [ m_num_points ]
>618	Identifier	m_num_points
>619	Identifier	m_num_points
>620	Identifier	tracks_tmp
>621	IdentifierDeclType	double *
>622	IdentifierDeclStatement	 
>623	IdentifierDecl	* points_tmp = new v3_t [ m_num_points ]
>624	AssignmentExpr	* points_tmp = new v3_t [ m_num_points ]
>625	Identifier	m_num_points
>626	Identifier	m_num_points
>627	Identifier	points_tmp
>628	IdentifierDeclType	v3_t *
>629	ExpressionStatement	 
>630	CallExpression	fscanf ( f , \"%lf\n\" , & m_error )
>631	ArgumentList	f
>632	Argument	& m_error
>633	UnaryOp	& m_error
>634	Identifier	m_error
>635	UnaryOperator	&
>636	Argument	\"%lf\n\"
>637	PrimaryExpression	\"%lf\n\"
>638	Argument	f
>639	Identifier	f
>640	Callee	fscanf
>641	Identifier	fscanf
>642	ExpressionStatement	 
>643	CallExpression	fscanf ( f , \"%lf\n\" , & m_angle )
>644	ArgumentList	f
>645	Argument	& m_angle
>646	UnaryOp	& m_angle
>647	Identifier	m_angle
>648	UnaryOperator	&
>649	Argument	\"%lf\n\"
>650	PrimaryExpression	\"%lf\n\"
>651	Argument	f
>652	Identifier	f
>653	Callee	fscanf
>654	Identifier	fscanf
>655	ExpressionStatement	 
>656	CallExpression	fscanf ( f , \"%d\n\" , & m_num_points )
>657	ArgumentList	f
>658	Argument	& m_num_points
>659	UnaryOp	& m_num_points
>660	Identifier	m_num_points
>661	UnaryOperator	&
>662	Argument	\"%d\n\"
>663	PrimaryExpression	\"%d\n\"
>664	Argument	f
>665	Identifier	f
>666	Callee	fscanf
>667	Identifier	fscanf
>716	FunctionDef	TwoFrameModel 
>717	ParameterList	FILE * f
>718	Parameter	 
>719	Identifier	f
>720	ParameterType	FILE *
>721	ReturnType	void
>722	CompoundStatement	 
>723	ExpressionStatement	 
>724	CallExpression	WriteVector ( f , 9 , m_C1 )
>725	ArgumentList	f
>726	Argument	m_C1
>727	Identifier	m_C1
>728	Argument	9
>729	PrimaryExpression	9
>730	Argument	f
>731	Identifier	f
>732	Callee	WriteVector
>733	Identifier	WriteVector
>734	ExpressionStatement	 
>735	CallExpression	WriteVector ( f , 9 , m_C0 )
>736	ArgumentList	f
>737	Argument	m_C0
>738	Identifier	m_C0
>739	Argument	9
>740	PrimaryExpression	9
>741	Argument	f
>742	Identifier	f
>743	Callee	WriteVector
>744	Identifier	WriteVector
>745	ExpressionStatement	 
>746	CallExpression	WriteCamera ( f , m_camera1 )
>747	ArgumentList	f
>748	Argument	m_camera1
>749	Identifier	m_camera1
>750	Argument	f
>751	Identifier	f
>752	Callee	WriteCamera
>753	Identifier	WriteCamera
>754	ExpressionStatement	 
>755	CallExpression	WriteCamera ( f , m_camera0 )
>756	ArgumentList	f
>757	Argument	m_camera0
>758	Identifier	m_camera0
>759	Argument	f
>760	Identifier	f
>761	Callee	WriteCamera
>762	Identifier	WriteCamera
>763	ForStatement	for ( int i = 0 ; i < m_num_points ; i ++ )
>764	CompoundStatement	 
>765	ExpressionStatement	 
>766	CallExpression	fprintf ( f , \"%d %d %d %0.16e %0.16e %0.16e\n\" , tr , k1 , k2 , Vx ( m_points [ i ] ) , Vy ( m_points [ i ] ) , \
>767	ArgumentList	f
>768	Argument	Vz ( m_points [ i ] )
>769	CallExpression	Vz ( m_points [ i ] )
>770	ArgumentList	m_points [ i ]
>771	Argument	m_points [ i ]
>772	ArrayIndexing	m_points [ i ]
>773	Identifier	i
>774	Identifier	m_points
>775	Callee	Vz
>776	Identifier	Vz
>777	Argument	Vy ( m_points [ i ] )
>778	CallExpression	Vy ( m_points [ i ] )
>779	ArgumentList	m_points [ i ]
>780	Argument	m_points [ i ]
>781	ArrayIndexing	m_points [ i ]
>782	Identifier	i
>783	Identifier	m_points
>784	Callee	Vy
>785	Identifier	Vy
>786	Argument	Vx ( m_points [ i ] )
>787	CallExpression	Vx ( m_points [ i ] )
>788	ArgumentList	m_points [ i ]
>789	Argument	m_points [ i ]
>790	ArrayIndexing	m_points [ i ]
>791	Identifier	i
>792	Identifier	m_points
>793	Callee	Vx
>794	Identifier	Vx
>795	Argument	k2
>796	Identifier	k2
>797	Argument	k1
>798	Identifier	k1
>799	Argument	tr
>800	Identifier	tr
>801	Argument	\"%d %d %d %0.16e %0.16e %0.16e\n\"
>802	PrimaryExpression	\"%d %d %d %0.16e %0.16e %0.16e\n\"
>803	Argument	f
>804	Identifier	f
>805	Callee	fprintf
>806	Identifier	fprintf
>807	IfStatement	if ( m_keys2 != NULL )
>808	ExpressionStatement	 
>809	AssignmentExpr	k2 = m_keys2 [ i ]
>810	ArrayIndexing	m_keys2 [ i ]
>811	Identifier	i
>812	Identifier	m_keys2
>813	Identifier	k2
>814	Condition	 
>815	EqualityExpression	m_keys2 != NULL
>816	Identifier	NULL
>817	Identifier	m_keys2
>818	IfStatement	if ( m_keys1 != NULL )
>819	ExpressionStatement	 
>820	AssignmentExpr	k1 = m_keys1 [ i ]
>821	ArrayIndexing	m_keys1 [ i ]
>822	Identifier	i
>823	Identifier	m_keys1
>824	Identifier	k1
>825	Condition	 
>826	EqualityExpression	m_keys1 != NULL
>827	Identifier	NULL
>828	Identifier	m_keys1
>829	IfStatement	if ( m_tracks != NULL )
>830	ExpressionStatement	 
>831	AssignmentExpr	tr = m_tracks [ i ]
>832	ArrayIndexing	m_tracks [ i ]
>833	Identifier	i
>834	Identifier	m_tracks
>835	Identifier	tr
>836	Condition	 
>837	EqualityExpression	m_tracks != NULL
>838	Identifier	NULL
>839	Identifier	m_tracks
>840	IdentifierDeclStatement	 
>841	IdentifierDecl	k2 = - 1
>842	AssignmentExpr	k2 = - 1
>843	UnaryOp	- 1
>844	PrimaryExpression	1
>845	UnaryOperator	-
>846	Identifier	k2
>847	Identifier	k2
>848	IdentifierDeclType	int
>849	IdentifierDecl	k1 = - 1
>850	AssignmentExpr	k1 = - 1
>851	UnaryOp	- 1
>852	PrimaryExpression	1
>853	UnaryOperator	-
>854	Identifier	k1
>855	Identifier	k1
>856	IdentifierDeclType	int
>857	IdentifierDecl	tr = - 1
>858	AssignmentExpr	tr = - 1
>859	UnaryOp	- 1
>860	PrimaryExpression	1
>861	UnaryOperator	-
>862	Identifier	tr
>863	Identifier	tr
>864	IdentifierDeclType	int
>865	IncDecOp	 
>866	IncDec	++
>867	Identifier	i
>868	Condition	 
>869	RelationalExpression	i < m_num_points
>870	Identifier	m_num_points
>871	Identifier	i
>872	ForInit	 
>873	IdentifierDeclStatement	int i = 0 ;
>874	IdentifierDecl	i = 0
>875	AssignmentExpr	i = 0
>876	PrimaryExpression	0
>877	Identifier	i
>878	Identifier	i
>879	IdentifierDeclType	int
>880	ExpressionStatement	 
>881	CallExpression	fprintf ( f , \"%0.9f\n\" , m_error )
>882	ArgumentList	f
>883	Argument	m_error
>884	Identifier	m_error
>885	Argument	\"%0.9f\n\"
>886	PrimaryExpression	\"%0.9f\n\"
>887	Argument	f
>888	Identifier	f
>889	Callee	fprintf
>890	Identifier	fprintf
>891	ExpressionStatement	 
>892	CallExpression	fprintf ( f , \"%0.9f\n\" , m_angle )
>893	ArgumentList	f
>894	Argument	m_angle
>895	Identifier	m_angle
>896	Argument	\"%0.9f\n\"
>897	PrimaryExpression	\"%0.9f\n\"
>898	Argument	f
>899	Identifier	f
>900	Callee	fprintf
>901	Identifier	fprintf
>902	ExpressionStatement	 
>903	CallExpression	fprintf ( f , \"%d\n\" , m_num_points )
>904	ArgumentList	f
>905	Argument	m_num_points
>906	Identifier	m_num_points
>907	Argument	\"%d\n\"
>908	PrimaryExpression	\"%d\n\"
>909	Argument	f
>910	Identifier	f
>911	Callee	fprintf
>912	Identifier	fprintf
>941	FunctionDef	GetTwist (double * R)
>942	ParameterList	double * R
>943	Parameter	 
>944	Identifier	R
>945	ParameterType	double *
>946	ReturnType	static double
>947	CompoundStatement	 
>948	IfStatement	if ( R [ 3 ] < 0.0 )
>949	ElseStatement	else
>950	ReturnStatement	 
>951	Identifier	angle
>952	ReturnStatement	 
>953	UnaryOp	- angle
>954	Identifier	angle
>955	UnaryOperator	-
>956	Condition	 
>957	RelationalExpression	R [ 3 ] < 0.0
>958	PrimaryExpression	0.0
>959	ArrayIndexing	R [ 3 ]
>960	PrimaryExpression	3
>961	Identifier	R
>962	IdentifierDeclStatement	 
>963	IdentifierDecl	angle = acos ( c_twist )
>964	AssignmentExpr	angle = acos ( c_twist )
>965	CallExpression	acos ( c_twist )
>966	ArgumentList	c_twist
>967	Argument	c_twist
>968	Identifier	c_twist
>969	Callee	acos
>970	Identifier	acos
>971	Identifier	angle
>972	Identifier	angle
>973	IdentifierDeclType	double
>974	ExpressionStatement	 
>975	AssignmentExpr	c_twist = CLAMP ( c_twist , - 1.0 + 1.0e-8 , 1.0 - 1.0e-8 )
>976	CallExpression	CLAMP ( c_twist , - 1.0 + 1.0e-8 , 1.0 - 1.0e-8 )
>977	ArgumentList	c_twist
>978	Argument	1.0 - 1.0e-8
>979	AdditiveExpression	1.0 - 1.0e-8
>980	PrimaryExpression	1.0e-8
>981	PrimaryExpression	1.0
>982	Argument	- 1.0 + 1.0e-8
>983	AdditiveExpression	- 1.0 + 1.0e-8
>984	PrimaryExpression	1.0e-8
>985	UnaryOp	- 1.0
>986	PrimaryExpression	1.0
>987	UnaryOperator	-
>988	Argument	c_twist
>989	Identifier	c_twist
>990	Callee	CLAMP
>991	Identifier	CLAMP
>992	Identifier	c_twist
>993	IdentifierDeclStatement	 
>994	IdentifierDecl	c_twist = ( R [ 0 ] * R [ 8 ] - R [ 6 ] * R [ 2 ] ) / sqrt ( 1 - R [ 5 ] * R [ 5 ] )
>995	AssignmentExpr	c_twist = ( R [ 0 ] * R [ 8 ] - R [ 6 ] * R [ 2 ] ) / sqrt ( 1 - R [ 5 ] * R [ 5 ] )
>996	MultiplicativeExpression	( R [ 0 ] * R [ 8 ] - R [ 6 ] * R [ 2 ] ) / sqrt ( 1 - R [ 5 ] * R [ 5 ] )
>997	CallExpression	sqrt ( 1 - R [ 5 ] * R [ 5 ] )
>998	ArgumentList	1 - R [ 5 ] * R [ 5 ]
>999	Argument	1 - R [ 5 ] * R [ 5 ]
>1000	AdditiveExpression	1 - R [ 5 ] * R [ 5 ]
>1001	MultiplicativeExpression	R [ 5 ] * R [ 5 ]
>1002	ArrayIndexing	R [ 5 ]
>1003	PrimaryExpression	5
>1004	Identifier	R
>1005	ArrayIndexing	R [ 5 ]
>1006	PrimaryExpression	5
>1007	Identifier	R
>1008	PrimaryExpression	1
>1009	Callee	sqrt
>1010	Identifier	sqrt
>1011	AdditiveExpression	R [ 0 ] * R [ 8 ] - R [ 6 ] * R [ 2 ]
>1012	MultiplicativeExpression	R [ 6 ] * R [ 2 ]
>1013	ArrayIndexing	R [ 2 ]
>1014	PrimaryExpression	2
>1015	Identifier	R
>1016	ArrayIndexing	R [ 6 ]
>1017	PrimaryExpression	6
>1018	Identifier	R
>1019	MultiplicativeExpression	R [ 0 ] * R [ 8 ]
>1020	ArrayIndexing	R [ 8 ]
>1021	PrimaryExpression	8
>1022	Identifier	R
>1023	ArrayIndexing	R [ 0 ]
>1024	PrimaryExpression	0
>1025	Identifier	R
>1026	Identifier	c_twist
>1027	Identifier	c_twist
>1028	IdentifierDeclType	double
>1039	FunctionDef	TwoFrameModel 
>1040	ParameterList	FILE * f
>1041	Parameter	 
>1042	Identifier	f
>1043	ParameterType	FILE *
>1044	ReturnType	void
>1045	CompoundStatement	 
>1046	ExpressionStatement	 
>1047	CallExpression	fprintf ( f , \"%0.6f\n\" , z_avg )
>1048	ArgumentList	f
>1049	Argument	z_avg
>1050	Identifier	z_avg
>1051	Argument	\"%0.6f\n\"
>1052	PrimaryExpression	\"%0.6f\n\"
>1053	Argument	f
>1054	Identifier	f
>1055	Callee	fprintf
>1056	Identifier	fprintf
>1057	ExpressionStatement	 
>1058	CallExpression	WriteVector ( f , 3 , tr )
>1059	ArgumentList	f
>1060	Argument	tr
>1061	Identifier	tr
>1062	Argument	3
>1063	PrimaryExpression	3
>1064	Argument	f
>1065	Identifier	f
>1066	Callee	WriteVector
>1067	Identifier	WriteVector
>1068	ExpressionStatement	 
>1069	CallExpression	WriteVector ( f , 9 , R1 )
>1070	ArgumentList	f
>1071	Argument	R1
>1072	Identifier	R1
>1073	Argument	9
>1074	PrimaryExpression	9
>1075	Argument	f
>1076	Identifier	f
>1077	Callee	WriteVector
>1078	Identifier	WriteVector
>1079	ExpressionStatement	 
>1080	AssignmentExpr	z_avg /= m_num_points
>1081	Identifier	m_num_points
>1082	Identifier	z_avg
>1083	ForStatement	for ( int p = 0 ; p < m_num_points ; p ++ )
>1084	CompoundStatement	 
>1085	ExpressionStatement	 
>1086	AssignmentExpr	z_avg += 0.5 * ( dist1 + dist2 ) / norm
>1087	MultiplicativeExpression	0.5 * ( dist1 + dist2 ) / norm
>1088	MultiplicativeExpression	( dist1 + dist2 ) / norm
>1089	Identifier	norm
>1090	AdditiveExpression	dist1 + dist2
>1091	Identifier	dist2
>1092	Identifier	dist1
>1093	PrimaryExpression	0.5
>1094	Identifier	z_avg
>1095	IdentifierDeclStatement	 
>1096	IdentifierDecl	dist2 = matrix_norm ( 3 , 1 , diff2 )
>1097	AssignmentExpr	dist2 = matrix_norm ( 3 , 1 , diff2 )
>1098	CallExpression	matrix_norm ( 3 , 1 , diff2 )
>1099	ArgumentList	3
>1100	Argument	diff2
>1101	Identifier	diff2
>1102	Argument	1
>1103	PrimaryExpression	1
>1104	Argument	3
>1105	PrimaryExpression	3
>1106	Callee	matrix_norm
>1107	Identifier	matrix_norm
>1108	Identifier	dist2
>1109	Identifier	dist2
>1110	IdentifierDeclType	double
>1111	IdentifierDeclStatement	 
>1112	IdentifierDecl	dist1 = matrix_norm ( 3 , 1 , diff1 )
>1113	AssignmentExpr	dist1 = matrix_norm ( 3 , 1 , diff1 )
>1114	CallExpression	matrix_norm ( 3 , 1 , diff1 )
>1115	ArgumentList	3
>1116	Argument	diff1
>1117	Identifier	diff1
>1118	Argument	1
>1119	PrimaryExpression	1
>1120	Argument	3
>1121	PrimaryExpression	3
>1122	Callee	matrix_norm
>1123	Identifier	matrix_norm
>1124	Identifier	dist1
>1125	Identifier	dist1
>1126	IdentifierDeclType	double
>1127	ExpressionStatement	 
>1128	CallExpression	matrix_diff ( 3 , 1 , 3 , 1 , pt . p , pos1 , diff2 )
>1129	ArgumentList	3
>1130	Argument	diff2
>1131	Identifier	diff2
>1132	Argument	pos1
>1133	Identifier	pos1
>1134	Argument	pt . p
>1135	MemberAccess	pt . p
>1136	Identifier	p
>1137	Identifier	pt
>1138	Argument	1
>1139	PrimaryExpression	1
>1140	Argument	3
>1141	PrimaryExpression	3
>1142	Argument	1
>1143	PrimaryExpression	1
>1144	Argument	3
>1145	PrimaryExpression	3
>1146	Callee	matrix_diff
>1147	Identifier	matrix_diff
>1148	ExpressionStatement	 
>1149	CallExpression	matrix_diff ( 3 , 1 , 3 , 1 , pt . p , pos0 , diff1 )
>1150	ArgumentList	3
>1151	Argument	diff1
>1152	Identifier	diff1
>1153	Argument	pos0
>1154	Identifier	pos0
>1155	Argument	pt . p
>1156	MemberAccess	pt . p
>1157	Identifier	p
>1158	Identifier	pt
>1159	Argument	1
>1160	PrimaryExpression	1
>1161	Argument	3
>1162	PrimaryExpression	3
>1163	Argument	1
>1164	PrimaryExpression	1
>1165	Argument	3
>1166	PrimaryExpression	3
>1167	Callee	matrix_diff
>1168	Identifier	matrix_diff
>1169	IdentifierDeclStatement	 
>1170	IdentifierDecl	diff2 [ 3 ]
>1171	PrimaryExpression	3
>1172	Identifier	diff2
>1173	IdentifierDeclType	double [ 3 ]
>1174	IdentifierDecl	diff1 [ 3 ]
>1175	PrimaryExpression	3
>1176	Identifier	diff1
>1177	IdentifierDeclType	double [ 3 ]
>1178	IdentifierDeclStatement	 
>1179	IdentifierDecl	& pt = m_points [ p ]
>1180	AssignmentExpr	& pt = m_points [ p ]
>1181	ArrayIndexing	m_points [ p ]
>1182	Identifier	p
>1183	Identifier	m_points
>1184	Identifier	pt
>1185	Identifier	pt
>1186	IdentifierDeclType	v3_t &
>1187	IncDecOp	 
>1188	IncDec	++
>1189	Identifier	p
>1190	Condition	 
>1191	RelationalExpression	p < m_num_points
>1192	Identifier	m_num_points
>1193	Identifier	p
>1194	ForInit	 
>1195	IdentifierDeclStatement	int p = 0 ;
>1196	IdentifierDecl	p = 0
>1197	AssignmentExpr	p = 0
>1198	PrimaryExpression	0
>1199	Identifier	p
>1200	Identifier	p
>1201	IdentifierDeclType	int
>1202	IdentifierDeclStatement	 
>1203	IdentifierDecl	z_avg = 0.0
>1204	AssignmentExpr	z_avg = 0.0
>1205	PrimaryExpression	0.0
>1206	Identifier	z_avg
>1207	Identifier	z_avg
>1208	IdentifierDeclType	double
>1209	IdentifierDeclStatement	 
>1210	IdentifierDecl	twist_angle = GetTwist ( R1 )
>1211	AssignmentExpr	twist_angle = GetTwist ( R1 )
>1212	CallExpression	GetTwist ( R1 )
>1213	ArgumentList	R1
>1214	Argument	R1
>1215	Identifier	R1
>1216	Callee	GetTwist
>1217	Identifier	GetTwist
>1218	Identifier	twist_angle
>1219	Identifier	twist_angle
>1220	IdentifierDeclType	double
>1221	IdentifierDeclStatement	 
>1222	IdentifierDecl	viewdir [ 3 ] = { - R1 [ 2 ] , - R1 [ 5 ] , - R1 [ 8 ] }
>1223	AssignmentExpr	viewdir [ 3 ] = { - R1 [ 2 ] , - R1 [ 5 ] , - R1 [ 8 ] }
>1224	InitializerList	- R1 [ 2 ]
>1225	UnaryOp	- R1 [ 8 ]
>1226	ArrayIndexing	R1 [ 8 ]
>1227	PrimaryExpression	8
>1228	Identifier	R1
>1229	UnaryOperator	-
>1230	UnaryOp	- R1 [ 5 ]
>1231	ArrayIndexing	R1 [ 5 ]
>1232	PrimaryExpression	5
>1233	Identifier	R1
>1234	UnaryOperator	-
>1235	UnaryOp	- R1 [ 2 ]
>1236	ArrayIndexing	R1 [ 2 ]
>1237	PrimaryExpression	2
>1238	Identifier	R1
>1239	UnaryOperator	-
>1240	Identifier	viewdir
>1241	PrimaryExpression	3
>1242	Identifier	viewdir
>1243	IdentifierDeclType	double [ 3 ]
>1244	ExpressionStatement	 
>1245	CallExpression	matrix_scale ( 3 , 1 , tr , 1.0 / norm , tr )
>1246	ArgumentList	3
>1247	Argument	tr
>1248	Identifier	tr
>1249	Argument	1.0 / norm
>1250	MultiplicativeExpression	1.0 / norm
>1251	Identifier	norm
>1252	PrimaryExpression	1.0
>1253	Argument	tr
>1254	Identifier	tr
>1255	Argument	1
>1256	PrimaryExpression	1
>1257	Argument	3
>1258	PrimaryExpression	3
>1259	Callee	matrix_scale
>1260	Identifier	matrix_scale
>1261	IdentifierDeclStatement	 
>1262	IdentifierDecl	norm = matrix_norm ( 3 , 1 , tr )
>1263	AssignmentExpr	norm = matrix_norm ( 3 , 1 , tr )
>1264	CallExpression	matrix_norm ( 3 , 1 , tr )
>1265	ArgumentList	3
>1266	Argument	tr
>1267	Identifier	tr
>1268	Argument	1
>1269	PrimaryExpression	1
>1270	Argument	3
>1271	PrimaryExpression	3
>1272	Callee	matrix_norm
>1273	Identifier	matrix_norm
>1274	Identifier	norm
>1275	Identifier	norm
>1276	IdentifierDeclType	double
>1277	ExpressionStatement	 
>1278	CallExpression	matrix_product ( 3 , 3 , 3 , 1 , m_camera0 . R , diff , tr )
>1279	ArgumentList	3
>1280	Argument	tr
>1281	Identifier	tr
>1282	Argument	diff
>1283	Identifier	diff
>1284	Argument	m_camera0 . R
>1285	MemberAccess	m_camera0 . R
>1286	Identifier	R
>1287	Identifier	m_camera0
>1288	Argument	1
>1289	PrimaryExpression	1
>1290	Argument	3
>1291	PrimaryExpression	3
>1292	Argument	3
>1293	PrimaryExpression	3
>1294	Argument	3
>1295	PrimaryExpression	3
>1296	Callee	matrix_product
>1297	Identifier	matrix_product
>1298	ExpressionStatement	 
>1299	CallExpression	matrix_transpose_product2 ( 3 , 3 , 3 , 3 , m_camera0 . R , m_camera1 . R , R1 )
>1300	ArgumentList	3
>1301	Argument	R1
>1302	Identifier	R1
>1303	Argument	m_camera1 . R
>1304	MemberAccess	m_camera1 . R
>1305	Identifier	R
>1306	Identifier	m_camera1
>1307	Argument	m_camera0 . R
>1308	MemberAccess	m_camera0 . R
>1309	Identifier	R
>1310	Identifier	m_camera0
>1311	Argument	3
>1312	PrimaryExpression	3
>1313	Argument	3
>1314	PrimaryExpression	3
>1315	Argument	3
>1316	PrimaryExpression	3
>1317	Argument	3
>1318	PrimaryExpression	3
>1319	Callee	matrix_transpose_product2
>1320	Identifier	matrix_transpose_product2
>1321	IdentifierDeclStatement	 
>1322	IdentifierDecl	tr [ 3 ]
>1323	PrimaryExpression	3
>1324	Identifier	tr
>1325	IdentifierDeclType	double [ 3 ]
>1326	IdentifierDecl	R1 [ 9 ]
>1327	PrimaryExpression	9
>1328	Identifier	R1
>1329	IdentifierDeclType	double [ 9 ]
>1330	ExpressionStatement	 
>1331	CallExpression	matrix_diff ( 3 , 1 , 3 , 1 , pos1 , pos0 , diff )
>1332	ArgumentList	3
>1333	Argument	diff
>1334	Identifier	diff
>1335	Argument	pos0
>1336	Identifier	pos0
>1337	Argument	pos1
>1338	Identifier	pos1
>1339	Argument	1
>1340	PrimaryExpression	1
>1341	Argument	3
>1342	PrimaryExpression	3
>1343	Argument	1
>1344	PrimaryExpression	1
>1345	Argument	3
>1346	PrimaryExpression	3
>1347	Callee	matrix_diff
>1348	Identifier	matrix_diff
>1349	IdentifierDeclStatement	 
>1350	IdentifierDecl	diff [ 3 ]
>1351	PrimaryExpression	3
>1352	Identifier	diff
>1353	IdentifierDeclType	double [ 3 ]
>1354	ExpressionStatement	 
>1355	CallExpression	memcpy ( pos1 , m_camera1 . t , 3 * sizeof ( double ) )
>1356	ArgumentList	pos1
>1357	Argument	3 * sizeof ( double )
>1358	MultiplicativeExpression	3 * sizeof ( double )
>1359	SizeofExpr	sizeof ( double )
>1360	SizeofOperand	double
>1361	Sizeof	sizeof
>1362	PrimaryExpression	3
>1363	Argument	m_camera1 . t
>1364	MemberAccess	m_camera1 . t
>1365	Identifier	t
>1366	Identifier	m_camera1
>1367	Argument	pos1
>1368	Identifier	pos1
>1369	Callee	memcpy
>1370	Identifier	memcpy
>1371	ExpressionStatement	 
>1372	CallExpression	memcpy ( pos0 , m_camera0 . t , 3 * sizeof ( double ) )
>1373	ArgumentList	pos0
>1374	Argument	3 * sizeof ( double )
>1375	MultiplicativeExpression	3 * sizeof ( double )
>1376	SizeofExpr	sizeof ( double )
>1377	SizeofOperand	double
>1378	Sizeof	sizeof
>1379	PrimaryExpression	3
>1380	Argument	m_camera0 . t
>1381	MemberAccess	m_camera0 . t
>1382	Identifier	t
>1383	Identifier	m_camera0
>1384	Argument	pos0
>1385	Identifier	pos0
>1386	Callee	memcpy
>1387	Identifier	memcpy
>1388	IdentifierDeclStatement	 
>1389	IdentifierDecl	pos1 [ 3 ]
>1390	PrimaryExpression	3
>1391	Identifier	pos1
>1392	IdentifierDeclType	double [ 3 ]
>1393	IdentifierDecl	pos0 [ 3 ]
>1394	PrimaryExpression	3
>1395	Identifier	pos0
>1396	IdentifierDeclType	double [ 3 ]
>1430	FunctionDef	TwoFrameModel 
>1431	ParameterList	FILE * f
>1432	Parameter	 
>1433	Identifier	f
>1434	ParameterType	FILE *
>1435	ReturnType	void
>1436	CompoundStatement	 
>1437	ExpressionStatement	 
>1438	CallExpression	WriteVector ( f , 9 , m_C1 )
>1439	ArgumentList	f
>1440	Argument	m_C1
>1441	Identifier	m_C1
>1442	Argument	9
>1443	PrimaryExpression	9
>1444	Argument	f
>1445	Identifier	f
>1446	Callee	WriteVector
>1447	Identifier	WriteVector
>1448	ExpressionStatement	 
>1449	CallExpression	WriteVector ( f , 9 , m_C0 )
>1450	ArgumentList	f
>1451	Argument	m_C0
>1452	Identifier	m_C0
>1453	Argument	9
>1454	PrimaryExpression	9
>1455	Argument	f
>1456	Identifier	f
>1457	Callee	WriteVector
>1458	Identifier	WriteVector
>1459	ExpressionStatement	 
>1460	CallExpression	fprintf ( f , \"%0.5f\n\" , m_error )
>1461	ArgumentList	f
>1462	Argument	m_error
>1463	Identifier	m_error
>1464	Argument	\"%0.5f\n\"
>1465	PrimaryExpression	\"%0.5f\n\"
>1466	Argument	f
>1467	Identifier	f
>1468	Callee	fprintf
>1469	Identifier	fprintf
>1470	ExpressionStatement	 
>1471	CallExpression	fprintf ( f , \"%0.5f\n\" , m_angle )
>1472	ArgumentList	f
>1473	Argument	m_angle
>1474	Identifier	m_angle
>1475	Argument	\"%0.5f\n\"
>1476	PrimaryExpression	\"%0.5f\n\"
>1477	Argument	f
>1478	Identifier	f
>1479	Callee	fprintf
>1480	Identifier	fprintf
>1481	ExpressionStatement	 
>1482	CallExpression	fprintf ( f , \"%d\n\" , m_num_points )
>1483	ArgumentList	f
>1484	Argument	m_num_points
>1485	Identifier	m_num_points
>1486	Argument	\"%d\n\"
>1487	PrimaryExpression	\"%d\n\"
>1488	Argument	f
>1489	Identifier	f
>1490	Callee	fprintf
>1491	Identifier	fprintf
>1501	FunctionDef	TwoFrameModel 
>1502	ParameterList	bool flip
>1503	Parameter	 
>1504	Identifier	flip
>1505	ParameterType	bool
>1506	ReturnType	double
>1507	CompoundStatement	 
>1508	IfStatement	if ( flip )
>1509	ElseStatement	else
>1510	CompoundStatement	 
>1511	ReturnStatement	 
>1512	AdditiveExpression	m_C1 [ 0 ] + m_C1 [ 4 ] + m_C1 [ 8 ]
>1513	AdditiveExpression	m_C1 [ 4 ] + m_C1 [ 8 ]
>1514	ArrayIndexing	m_C1 [ 8 ]
>1515	PrimaryExpression	8
>1516	Identifier	m_C1
>1517	ArrayIndexing	m_C1 [ 4 ]
>1518	PrimaryExpression	4
>1519	Identifier	m_C1
>1520	ArrayIndexing	m_C1 [ 0 ]
>1521	PrimaryExpression	0
>1522	Identifier	m_C1
>1523	CompoundStatement	 
>1524	ReturnStatement	 
>1525	AdditiveExpression	m_C0 [ 0 ] + m_C0 [ 4 ] + m_C0 [ 8 ]
>1526	AdditiveExpression	m_C0 [ 4 ] + m_C0 [ 8 ]
>1527	ArrayIndexing	m_C0 [ 8 ]
>1528	PrimaryExpression	8
>1529	Identifier	m_C0
>1530	ArrayIndexing	m_C0 [ 4 ]
>1531	PrimaryExpression	4
>1532	Identifier	m_C0
>1533	ArrayIndexing	m_C0 [ 0 ]
>1534	PrimaryExpression	0
>1535	Identifier	m_C0
>1536	Condition	 
>1537	Identifier	flip
>1546	FunctionDef	TwoFrameModel 
>1547	ParameterList	 
>1548	ReturnType	double
>1549	CompoundStatement	 
>1550	ReturnStatement	 
>1551	MultiplicativeExpression	dist_sum / ( 2 * m_num_points )
>1552	MultiplicativeExpression	2 * m_num_points
>1553	Identifier	m_num_points
>1554	PrimaryExpression	2
>1555	Identifier	dist_sum
>1556	ForStatement	for ( int i = 0 ; i < m_num_points ; i ++ )
>1557	CompoundStatement	 
>1558	ExpressionStatement	 
>1559	AssignmentExpr	dist_sum += ( norm1 + norm2 )
>1560	AdditiveExpression	norm1 + norm2
>1561	Identifier	norm2
>1562	Identifier	norm1
>1563	Identifier	dist_sum
>1564	IdentifierDeclStatement	 
>1565	IdentifierDecl	norm2 = matrix_norm ( 3 , 1 , diff2 )
>1566	AssignmentExpr	norm2 = matrix_norm ( 3 , 1 , diff2 )
>1567	CallExpression	matrix_norm ( 3 , 1 , diff2 )
>1568	ArgumentList	3
>1569	Argument	diff2
>1570	Identifier	diff2
>1571	Argument	1
>1572	PrimaryExpression	1
>1573	Argument	3
>1574	PrimaryExpression	3
>1575	Callee	matrix_norm
>1576	Identifier	matrix_norm
>1577	Identifier	norm2
>1578	Identifier	norm2
>1579	IdentifierDeclType	double
>1580	IdentifierDeclStatement	 
>1581	IdentifierDecl	norm1 = matrix_norm ( 3 , 1 , diff1 )
>1582	AssignmentExpr	norm1 = matrix_norm ( 3 , 1 , diff1 )
>1583	CallExpression	matrix_norm ( 3 , 1 , diff1 )
>1584	ArgumentList	3
>1585	Argument	diff1
>1586	Identifier	diff1
>1587	Argument	1
>1588	PrimaryExpression	1
>1589	Argument	3
>1590	PrimaryExpression	3
>1591	Callee	matrix_norm
>1592	Identifier	matrix_norm
>1593	Identifier	norm1
>1594	Identifier	norm1
>1595	IdentifierDeclType	double
>1596	ExpressionStatement	 
>1597	CallExpression	matrix_diff ( 3 , 1 , 3 , 1 , m_points [ i ] . p , ( double * ) pos2 , diff2 )
>1598	ArgumentList	3
>1599	Argument	diff2
>1600	Identifier	diff2
>1601	Argument	( double * ) pos2
>1602	CastExpression	( double * ) pos2
>1603	Identifier	pos2
>1604	CastTarget	double *
>1605	Argument	m_points [ i ] . p
>1606	MemberAccess	m_points [ i ] . p
>1607	Identifier	p
>1608	ArrayIndexing	m_points [ i ]
>1609	Identifier	i
>1610	Identifier	m_points
>1611	Argument	1
>1612	PrimaryExpression	1
>1613	Argument	3
>1614	PrimaryExpression	3
>1615	Argument	1
>1616	PrimaryExpression	1
>1617	Argument	3
>1618	PrimaryExpression	3
>1619	Callee	matrix_diff
>1620	Identifier	matrix_diff
>1621	ExpressionStatement	 
>1622	CallExpression	matrix_diff ( 3 , 1 , 3 , 1 , m_points [ i ] . p , ( double * ) pos1 , diff1 )
>1623	ArgumentList	3
>1624	Argument	diff1
>1625	Identifier	diff1
>1626	Argument	( double * ) pos1
>1627	CastExpression	( double * ) pos1
>1628	Identifier	pos1
>1629	CastTarget	double *
>1630	Argument	m_points [ i ] . p
>1631	MemberAccess	m_points [ i ] . p
>1632	Identifier	p
>1633	ArrayIndexing	m_points [ i ]
>1634	Identifier	i
>1635	Identifier	m_points
>1636	Argument	1
>1637	PrimaryExpression	1
>1638	Argument	3
>1639	PrimaryExpression	3
>1640	Argument	1
>1641	PrimaryExpression	1
>1642	Argument	3
>1643	PrimaryExpression	3
>1644	Callee	matrix_diff
>1645	Identifier	matrix_diff
>1646	IdentifierDeclStatement	 
>1647	IdentifierDecl	diff2 [ 3 ]
>1648	PrimaryExpression	3
>1649	Identifier	diff2
>1650	IdentifierDeclType	double [ 3 ]
>1651	IdentifierDecl	diff1 [ 3 ]
>1652	PrimaryExpression	3
>1653	Identifier	diff1
>1654	IdentifierDeclType	double [ 3 ]
>1655	IncDecOp	 
>1656	IncDec	++
>1657	Identifier	i
>1658	Condition	 
>1659	RelationalExpression	i < m_num_points
>1660	Identifier	m_num_points
>1661	Identifier	i
>1662	ForInit	 
>1663	IdentifierDeclStatement	int i = 0 ;
>1664	IdentifierDecl	i = 0
>1665	AssignmentExpr	i = 0
>1666	PrimaryExpression	0
>1667	Identifier	i
>1668	Identifier	i
>1669	IdentifierDeclType	int
>1670	IdentifierDeclStatement	 
>1671	IdentifierDecl	* pos2 = m_camera1 . t
>1672	AssignmentExpr	* pos2 = m_camera1 . t
>1673	MemberAccess	m_camera1 . t
>1674	Identifier	t
>1675	Identifier	m_camera1
>1676	Identifier	pos2
>1677	Identifier	pos2
>1678	IdentifierDeclType	const double *
>1679	IdentifierDeclStatement	 
>1680	IdentifierDecl	* pos1 = m_camera0 . t
>1681	AssignmentExpr	* pos1 = m_camera0 . t
>1682	MemberAccess	m_camera0 . t
>1683	Identifier	t
>1684	Identifier	m_camera0
>1685	Identifier	pos1
>1686	Identifier	pos1
>1687	IdentifierDeclType	const double *
>1688	IdentifierDeclStatement	 
>1689	IdentifierDecl	dist_sum = 0.0
>1690	AssignmentExpr	dist_sum = 0.0
>1691	PrimaryExpression	0.0
>1692	Identifier	dist_sum
>1693	Identifier	dist_sum
>1694	IdentifierDeclType	double
>1716	FunctionDef	TwoFrameModel 
>1717	ParameterList	 
>1718	ReturnType	void
>1719	CompoundStatement	 
>1720	ExpressionStatement	 
>1721	AssignmentExpr	m_angle = 0.0
>1722	PrimaryExpression	0.0
>1723	Identifier	m_angle
>1724	ExpressionStatement	 
>1725	AssignmentExpr	m_C0 [ 8 ] = m_C1 [ 8 ] = 1.0e10
>1726	AssignmentExpr	m_C1 [ 8 ] = 1.0e10
>1727	PrimaryExpression	1.0e10
>1728	ArrayIndexing	m_C1 [ 8 ]
>1729	PrimaryExpression	8
>1730	Identifier	m_C1
>1731	ArrayIndexing	m_C0 [ 8 ]
>1732	PrimaryExpression	8
>1733	Identifier	m_C0
>1734	ExpressionStatement	 
>1735	AssignmentExpr	m_C0 [ 4 ] = m_C1 [ 4 ] = 1.0e10
>1736	AssignmentExpr	m_C1 [ 4 ] = 1.0e10
>1737	PrimaryExpression	1.0e10
>1738	ArrayIndexing	m_C1 [ 4 ]
>1739	PrimaryExpression	4
>1740	Identifier	m_C1
>1741	ArrayIndexing	m_C0 [ 4 ]
>1742	PrimaryExpression	4
>1743	Identifier	m_C0
>1744	ExpressionStatement	 
>1745	AssignmentExpr	m_C0 [ 0 ] = m_C1 [ 0 ] = 1.0e10
>1746	AssignmentExpr	m_C1 [ 0 ] = 1.0e10
>1747	PrimaryExpression	1.0e10
>1748	ArrayIndexing	m_C1 [ 0 ]
>1749	PrimaryExpression	0
>1750	Identifier	m_C1
>1751	ArrayIndexing	m_C0 [ 0 ]
>1752	PrimaryExpression	0
>1753	Identifier	m_C0
>1754	ExpressionStatement	 
>1755	CallExpression	matrix_ident ( 3 , m_C1 )
>1756	ArgumentList	3
>1757	Argument	m_C1
>1758	Identifier	m_C1
>1759	Argument	3
>1760	PrimaryExpression	3
>1761	Callee	matrix_ident
>1762	Identifier	matrix_ident
>1763	ExpressionStatement	 
>1764	CallExpression	matrix_ident ( 3 , m_C0 )
>1765	ArgumentList	3
>1766	Argument	m_C0
>1767	Identifier	m_C0
>1768	Argument	3
>1769	PrimaryExpression	3
>1770	Callee	matrix_ident
>1771	Identifier	matrix_ident
>1772	ExpressionStatement	 
>1773	AssignmentExpr	m_scale0 = m_scale1 = 1.0
>1774	AssignmentExpr	m_scale1 = 1.0
>1775	PrimaryExpression	1.0
>1776	Identifier	m_scale1
>1777	Identifier	m_scale0
>1778	ExpressionStatement	 
>1779	AssignmentExpr	m_scaffold = false
>1780	Identifier	false
>1781	Identifier	m_scaffold
>1794	FunctionDef	TwoFrameModel 
>1795	ParameterList	bool flip , double * S , double * C
>1796	Parameter	 
>1797	Identifier	C
>1798	ParameterType	double *
>1799	Parameter	 
>1800	Identifier	S
>1801	ParameterType	double *
>1802	Parameter	 
>1803	Identifier	flip
>1804	ParameterType	bool
>1805	ReturnType	void
>1806	CompoundStatement	 
>1807	IfStatement	if ( flip )
>1808	ElseStatement	else
>1809	CompoundStatement	 
>1810	ExpressionStatement	 
>1811	CallExpression	matrix_transpose_product2 ( 3 , 3 , 3 , 3 , tmp , S , C )
>1812	ArgumentList	3
>1813	Argument	C
>1814	Identifier	C
>1815	Argument	S
>1816	Identifier	S
>1817	Argument	tmp
>1818	Identifier	tmp
>1819	Argument	3
>1820	PrimaryExpression	3
>1821	Argument	3
>1822	PrimaryExpression	3
>1823	Argument	3
>1824	PrimaryExpression	3
>1825	Argument	3
>1826	PrimaryExpression	3
>1827	Callee	matrix_transpose_product2
>1828	Identifier	matrix_transpose_product2
>1829	ExpressionStatement	 
>1830	CallExpression	matrix_product ( 3 , 3 , 3 , 3 , S , m_C0 , tmp )
>1831	ArgumentList	3
>1832	Argument	tmp
>1833	Identifier	tmp
>1834	Argument	m_C0
>1835	Identifier	m_C0
>1836	Argument	S
>1837	Identifier	S
>1838	Argument	3
>1839	PrimaryExpression	3
>1840	Argument	3
>1841	PrimaryExpression	3
>1842	Argument	3
>1843	PrimaryExpression	3
>1844	Argument	3
>1845	PrimaryExpression	3
>1846	Callee	matrix_product
>1847	Identifier	matrix_product
>1848	CompoundStatement	 
>1849	ExpressionStatement	 
>1850	CallExpression	matrix_transpose_product2 ( 3 , 3 , 3 , 3 , tmp , S , C )
>1851	ArgumentList	3
>1852	Argument	C
>1853	Identifier	C
>1854	Argument	S
>1855	Identifier	S
>1856	Argument	tmp
>1857	Identifier	tmp
>1858	Argument	3
>1859	PrimaryExpression	3
>1860	Argument	3
>1861	PrimaryExpression	3
>1862	Argument	3
>1863	PrimaryExpression	3
>1864	Argument	3
>1865	PrimaryExpression	3
>1866	Callee	matrix_transpose_product2
>1867	Identifier	matrix_transpose_product2
>1868	ExpressionStatement	 
>1869	CallExpression	matrix_product ( 3 , 3 , 3 , 3 , S , m_C1 , tmp )
>1870	ArgumentList	3
>1871	Argument	tmp
>1872	Identifier	tmp
>1873	Argument	m_C1
>1874	Identifier	m_C1
>1875	Argument	S
>1876	Identifier	S
>1877	Argument	3
>1878	PrimaryExpression	3
>1879	Argument	3
>1880	PrimaryExpression	3
>1881	Argument	3
>1882	PrimaryExpression	3
>1883	Argument	3
>1884	PrimaryExpression	3
>1885	Callee	matrix_product
>1886	Identifier	matrix_product
>1887	Condition	 
>1888	Identifier	flip
>1889	IdentifierDeclStatement	 
>1890	IdentifierDecl	tmp [ 9 ]
>1891	PrimaryExpression	9
>1892	Identifier	tmp
>1893	IdentifierDeclType	double [ 9 ]
>1903	FunctionDef	TwoFrameModel 
>1904	ParameterList	bool flip , int prev
>1905	Parameter	 
>1906	Identifier	prev
>1907	ParameterType	int
>1908	Parameter	 
>1909	Identifier	flip
>1910	ParameterType	bool
>1911	ReturnType	void
>1912	CompoundStatement	 
>1913	IfStatement	if ( flip )
>1914	ElseStatement	else
>1915	CompoundStatement	 
>1916	ExpressionStatement	 
>1917	AssignmentExpr	m_prev0 = prev
>1918	Identifier	prev
>1919	Identifier	m_prev0
>1920	CompoundStatement	 
>1921	ExpressionStatement	 
>1922	AssignmentExpr	m_prev1 = prev
>1923	Identifier	prev
>1924	Identifier	m_prev1
>1925	Condition	 
>1926	Identifier	flip
>1934	FunctionDef	TwoFrameModel 
>1935	ParameterList	bool flip
>1936	Parameter	 
>1937	Identifier	flip
>1938	ParameterType	bool
>1939	ReturnType	int
>1940	CompoundStatement	 
>1941	IfStatement	if ( flip )
>1942	ElseStatement	else
>1943	ReturnStatement	 
>1944	Identifier	m_prev0
>1945	ReturnStatement	 
>1946	Identifier	m_prev1
>1947	Condition	 
>1948	Identifier	flip
>1955	FunctionDef	TwoFrameModel 
>1956	ParameterList	bool flip , int pred
>1957	Parameter	 
>1958	Identifier	pred
>1959	ParameterType	int
>1960	Parameter	 
>1961	Identifier	flip
>1962	ParameterType	bool
>1963	ReturnType	void
>1964	CompoundStatement	 
>1965	IfStatement	if ( flip )
>1966	ElseStatement	else
>1967	CompoundStatement	 
>1968	ExpressionStatement	 
>1969	AssignmentExpr	m_pred0 = pred
>1970	Identifier	pred
>1971	Identifier	m_pred0
>1972	CompoundStatement	 
>1973	ExpressionStatement	 
>1974	AssignmentExpr	m_pred1 = pred
>1975	Identifier	pred
>1976	Identifier	m_pred1
>1977	Condition	 
>1978	Identifier	flip
>1986	FunctionDef	TwoFrameModel 
>1987	ParameterList	bool flip
>1988	Parameter	 
>1989	Identifier	flip
>1990	ParameterType	bool
>1991	ReturnType	int
>1992	CompoundStatement	 
>1993	IfStatement	if ( flip )
>1994	ElseStatement	else
>1995	ReturnStatement	 
>1996	Identifier	m_pred0
>1997	ReturnStatement	 
>1998	Identifier	m_pred1
>1999	Condition	 
>2000	Identifier	flip
>2007	FunctionDef	TwoFrameModel 
>2008	ParameterList	bool flip , int flag
>2009	Parameter	 
>2010	Identifier	flag
>2011	ParameterType	int
>2012	Parameter	 
>2013	Identifier	flip
>2014	ParameterType	bool
>2015	ReturnType	void
>2016	CompoundStatement	 
>2017	IfStatement	if ( flip )
>2018	ElseStatement	else
>2019	ExpressionStatement	 
>2020	AssignmentExpr	m_flag0 = flag
>2021	Identifier	flag
>2022	Identifier	m_flag0
>2023	ExpressionStatement	 
>2024	AssignmentExpr	m_flag1 = flag
>2025	Identifier	flag
>2026	Identifier	m_flag1
>2027	Condition	 
>2028	Identifier	flip
>2036	FunctionDef	TwoFrameModel 
>2037	ParameterList	bool flip
>2038	Parameter	 
>2039	Identifier	flip
>2040	ParameterType	bool
>2041	ReturnType	int
>2042	CompoundStatement	 
>2043	IfStatement	if ( flip )
>2044	ElseStatement	else
>2045	ReturnStatement	 
>2046	Identifier	m_flag0
>2047	ReturnStatement	 
>2048	Identifier	m_flag1
>2049	Condition	 
>2050	Identifier	flip
>2057	FunctionDef	ReadModels (FILE * f , int * num_images_out)
>2058	ParameterList	FILE * f , int * num_images_out
>2059	Parameter	 
>2060	Identifier	num_images_out
>2061	ParameterType	int *
>2062	Parameter	 
>2063	Identifier	f
>2064	ParameterType	FILE *
>2065	ReturnType	ModelMap
>2066	CompoundStatement	 
>2067	ReturnStatement	 
>2068	Identifier	models
>2069	IfStatement	if ( num_images_out != NULL )
>2070	ExpressionStatement	 
>2071	AssignmentExpr	* num_images_out = num_images
>2072	Identifier	num_images
>2073	UnaryOp	* num_images_out
>2074	Identifier	num_images_out
>2075	UnaryOperator	*
>2076	Condition	 
>2077	EqualityExpression	num_images_out != NULL
>2078	Identifier	NULL
>2079	Identifier	num_images_out
>2080	WhileStatement	while ( fgets ( buf , 256 , f ) )
>2081	CompoundStatement	 
>2082	ExpressionStatement	 
>2083	CallExpression	models . AddModel ( GetMatchIndex ( i1 , i2 ) , m )
>2084	ArgumentList	GetMatchIndex ( i1 , i2 )
>2085	Argument	m
>2086	Identifier	m
>2087	Argument	GetMatchIndex ( i1 , i2 )
>2088	CallExpression	GetMatchIndex ( i1 , i2 )
>2089	ArgumentList	i1
>2090	Argument	i2
>2091	Identifier	i2
>2092	Argument	i1
>2093	Identifier	i1
>2094	Callee	GetMatchIndex
>2095	Identifier	GetMatchIndex
>2096	Callee	models . AddModel
>2097	MemberAccess	models . AddModel
>2098	Identifier	AddModel
>2099	Identifier	models
>2100	ExpressionStatement	 
>2101	CallExpression	assert ( i1 < i2 )
>2102	ArgumentList	i1 < i2
>2103	Argument	i1 < i2
>2104	RelationalExpression	i1 < i2
>2105	Identifier	i2
>2106	Identifier	i1
>2107	Callee	assert
>2108	Identifier	assert
>2109	IfStatement	if ( std 
>2110	CompoundStatement	 
>2111	ContinueStatement	 
>2112	ExpressionStatement	 
>2113	CallExpression	printf ( \"[ReadModels] Error! NaNs in pair %d,%d!\n\" , i1 , i2 )
>2114	ArgumentList	\"[ReadModels] Error! NaNs in pair %d,%d!\n\"
>2115	Argument	i2
>2116	Identifier	i2
>2117	Argument	i1
>2118	Identifier	i1
>2119	Argument	\"[ReadModels] Error! NaNs in pair %d,%d!\n\"
>2120	PrimaryExpression	\"[ReadModels] Error! NaNs in pair %d,%d!\n\"
>2121	Callee	printf
>2122	Identifier	printf
>2123	Condition	 
>2124	OrExpression	std 
>2125	CallExpression	std 
>2126	ArgumentList	m . m_error
>2127	Argument	m . m_error
>2128	MemberAccess	m . m_error
>2129	Identifier	m_error
>2130	Identifier	m
>2131	Callee	std 
>2132	Identifier	std 
>2133	CallExpression	std 
>2134	ArgumentList	m . m_angle
>2135	Argument	m . m_angle
>2136	MemberAccess	m . m_angle
>2137	Identifier	m_angle
>2138	Identifier	m
>2139	Callee	std 
>2140	Identifier	std 
>2141	IfStatement	if ( m . m_num_points < 28 )
>2142	CompoundStatement	 
>2143	ContinueStatement	 
>2144	Condition	 
>2145	RelationalExpression	m . m_num_points < 28
>2146	PrimaryExpression	28
>2147	MemberAccess	m . m_num_points
>2148	Identifier	m_num_points
>2149	Identifier	m
>2150	IfStatement	if ( m . ComputeTrace ( true ) < 0.0 || m . ComputeTrace ( false ) < 0.0 )
>2151	CompoundStatement	 
>2152	ContinueStatement	 
>2153	ExpressionStatement	 
>2154	CallExpression	printf ( \"[ReadModels] Error! Trace(%d,%d) < 0!\n\" , i1 , i2 )
>2155	ArgumentList	\"[ReadModels] Error! Trace(%d,%d) < 0!\n\"
>2156	Argument	i2
>2157	Identifier	i2
>2158	Argument	i1
>2159	Identifier	i1
>2160	Argument	\"[ReadModels] Error! Trace(%d,%d) < 0!\n\"
>2161	PrimaryExpression	\"[ReadModels] Error! Trace(%d,%d) < 0!\n\"
>2162	Callee	printf
>2163	Identifier	printf
>2164	Condition	 
>2165	OrExpression	m . ComputeTrace ( true ) < 0.0 || m . ComputeTrace ( false ) < 0.0
>2166	RelationalExpression	m . ComputeTrace ( false ) < 0.0
>2167	PrimaryExpression	0.0
>2168	CallExpression	m . ComputeTrace ( false )
>2169	ArgumentList	false
>2170	Argument	false
>2171	Identifier	false
>2172	Callee	m . ComputeTrace
>2173	MemberAccess	m . ComputeTrace
>2174	Identifier	ComputeTrace
>2175	Identifier	m
>2176	RelationalExpression	m . ComputeTrace ( true ) < 0.0
>2177	PrimaryExpression	0.0
>2178	CallExpression	m . ComputeTrace ( true )
>2179	ArgumentList	true
>2180	Argument	true
>2181	Identifier	true
>2182	Callee	m . ComputeTrace
>2183	MemberAccess	m . ComputeTrace
>2184	Identifier	ComputeTrace
>2185	Identifier	m
>2186	ExpressionStatement	 
>2187	CallExpression	m . Read ( f )
>2188	ArgumentList	f
>2189	Argument	f
>2190	Identifier	f
>2191	Callee	m . Read
>2192	MemberAccess	m . Read
>2193	Identifier	Read
>2194	Identifier	m
>2195	IdentifierDeclStatement	 
>2196	IdentifierDecl	m
>2197	Identifier	m
>2198	IdentifierDeclType	TwoFrameModel
>2199	ExpressionStatement	 
>2200	CallExpression	sscanf ( buf , \"%d %d\" , & i1 , & i2 )
>2201	ArgumentList	buf
>2202	Argument	& i2
>2203	UnaryOp	& i2
>2204	Identifier	i2
>2205	UnaryOperator	&
>2206	Argument	& i1
>2207	UnaryOp	& i1
>2208	Identifier	i1
>2209	UnaryOperator	&
>2210	Argument	\"%d %d\"
>2211	PrimaryExpression	\"%d %d\"
>2212	Argument	buf
>2213	Identifier	buf
>2214	Callee	sscanf
>2215	Identifier	sscanf
>2216	IdentifierDeclStatement	 
>2217	IdentifierDecl	i2
>2218	Identifier	i2
>2219	IdentifierDeclType	int
>2220	IdentifierDecl	i1
>2221	Identifier	i1
>2222	IdentifierDeclType	int
>2223	Condition	 
>2224	CallExpression	fgets ( buf , 256 , f )
>2225	ArgumentList	buf
>2226	Argument	f
>2227	Identifier	f
>2228	Argument	256
>2229	PrimaryExpression	256
>2230	Argument	buf
>2231	Identifier	buf
>2232	Callee	fgets
>2233	Identifier	fgets
>2234	IdentifierDeclStatement	 
>2235	IdentifierDecl	models ( num_images )
>2236	Identifier	num_images
>2237	Identifier	models
>2238	IdentifierDeclType	ModelMap
>2239	ExpressionStatement	 
>2240	CallExpression	fscanf ( f , \"%d\n\" , & num_images )
>2241	ArgumentList	f
>2242	Argument	& num_images
>2243	UnaryOp	& num_images
>2244	Identifier	num_images
>2245	UnaryOperator	&
>2246	Argument	\"%d\n\"
>2247	PrimaryExpression	\"%d\n\"
>2248	Argument	f
>2249	Identifier	f
>2250	Callee	fscanf
>2251	Identifier	fscanf
>2252	IdentifierDeclStatement	 
>2253	IdentifierDecl	num_images
>2254	Identifier	num_images
>2255	IdentifierDeclType	int
>2256	IdentifierDeclStatement	 
>2257	IdentifierDecl	buf [ 256 ]
>2258	PrimaryExpression	256
>2259	Identifier	buf
>2260	IdentifierDeclType	char [ 256 ]
>2286	FunctionDef	ReadPEdges (FILE * f , int num_images)
>2287	ParameterList	FILE * f , int num_images
>2288	Parameter	 
>2289	Identifier	num_images
>2290	ParameterType	int
>2291	Parameter	 
>2292	Identifier	f
>2293	ParameterType	FILE *
>2294	ReturnType	PEdgeMap
>2295	CompoundStatement	 
>2296	ReturnStatement	 
>2297	Identifier	p_edges
>2298	WhileStatement	while ( fgets ( buf , 256 , f ) )
>2299	CompoundStatement	 
>2300	ExpressionStatement	 
>2301	AssignmentExpr	p_edges [ i1 * num_images + i2 ] = true
>2302	Identifier	true
>2303	ArrayIndexing	p_edges [ i1 * num_images + i2 ]
>2304	AdditiveExpression	i1 * num_images + i2
>2305	Identifier	i2
>2306	MultiplicativeExpression	i1 * num_images
>2307	Identifier	num_images
>2308	Identifier	i1
>2309	Identifier	p_edges
>2310	ExpressionStatement	 
>2311	CallExpression	sscanf ( buf , \"%d %d\" , & i1 , & i2 )
>2312	ArgumentList	buf
>2313	Argument	& i2
>2314	UnaryOp	& i2
>2315	Identifier	i2
>2316	UnaryOperator	&
>2317	Argument	& i1
>2318	UnaryOp	& i1
>2319	Identifier	i1
>2320	UnaryOperator	&
>2321	Argument	\"%d %d\"
>2322	PrimaryExpression	\"%d %d\"
>2323	Argument	buf
>2324	Identifier	buf
>2325	Callee	sscanf
>2326	Identifier	sscanf
>2327	IdentifierDeclStatement	 
>2328	IdentifierDecl	i2
>2329	Identifier	i2
>2330	IdentifierDeclType	int
>2331	IdentifierDecl	i1
>2332	Identifier	i1
>2333	IdentifierDeclType	int
>2334	Condition	 
>2335	CallExpression	fgets ( buf , 256 , f )
>2336	ArgumentList	buf
>2337	Argument	f
>2338	Identifier	f
>2339	Argument	256
>2340	PrimaryExpression	256
>2341	Argument	buf
>2342	Identifier	buf
>2343	Callee	fgets
>2344	Identifier	fgets
>2345	IdentifierDeclStatement	 
>2346	IdentifierDecl	p_edges
>2347	Identifier	p_edges
>2348	IdentifierDeclType	PEdgeMap
>2349	IdentifierDeclStatement	 
>2350	IdentifierDecl	buf [ 256 ]
>2351	PrimaryExpression	256
>2352	Identifier	buf
>2353	IdentifierDeclType	char [ 256 ]
>2371	FunctionDef	WriteModels (ModelMap & models , int num_images , char * out_file)
>2372	ParameterList	ModelMap & models , int num_images , char * out_file
>2373	Parameter	 
>2374	Identifier	out_file
>2375	ParameterType	char *
>2376	Parameter	 
>2377	Identifier	num_images
>2378	ParameterType	int
>2379	Parameter	 
>2380	Identifier	models
>2381	ParameterType	ModelMap &
>2382	ReturnType	void
>2383	CompoundStatement	 
>2384	IfStatement	if ( f == NULL )
>2385	ElseStatement	else
>2386	CompoundStatement	 
>2387	ExpressionStatement	 
>2388	CallExpression	fclose ( f )
>2389	ArgumentList	f
>2390	Argument	f
>2391	Identifier	f
>2392	Callee	fclose
>2393	Identifier	fclose
>2394	ForStatement	for ( unsigned int i = 0 ; i < ( unsigned int ) num_images ; i ++ )
>2395	CompoundStatement	 
>2396	ForStatement	for ( iter = models . Begin ( i ) ; iter != models . End ( i ) ; iter ++ )
>2397	CompoundStatement	 
>2398	IfStatement	if ( models . Contains ( idx ) )
>2399	CompoundStatement	 
>2400	ExpressionStatement	 
>2401	CallExpression	models . GetModel ( idx ) . Write ( f )
>2402	ArgumentList	f
>2403	Argument	f
>2404	Identifier	f
>2405	Callee	models . GetModel ( idx ) . Write
>2406	MemberAccess	models . GetModel ( idx ) . Write
>2407	Identifier	Write
>2408	CallExpression	models . GetModel ( idx )
>2409	ArgumentList	idx
>2410	Argument	idx
>2411	Identifier	idx
>2412	Callee	models . GetModel
>2413	MemberAccess	models . GetModel
>2414	Identifier	GetModel
>2415	Identifier	models
>2416	ExpressionStatement	 
>2417	CallExpression	fprintf ( f , \"%d %d\n\" , i , j )
>2418	ArgumentList	f
>2419	Argument	j
>2420	Identifier	j
>2421	Argument	i
>2422	Identifier	i
>2423	Argument	\"%d %d\n\"
>2424	PrimaryExpression	\"%d %d\n\"
>2425	Argument	f
>2426	Identifier	f
>2427	Callee	fprintf
>2428	Identifier	fprintf
>2429	Condition	 
>2430	CallExpression	models . Contains ( idx )
>2431	ArgumentList	idx
>2432	Argument	idx
>2433	Identifier	idx
>2434	Callee	models . Contains
>2435	MemberAccess	models . Contains
>2436	Identifier	Contains
>2437	Identifier	models
>2438	IdentifierDeclStatement	 
>2439	IdentifierDecl	idx = GetMatchIndex ( i , j )
>2440	AssignmentExpr	idx = GetMatchIndex ( i , j )
>2441	CallExpression	GetMatchIndex ( i , j )
>2442	ArgumentList	i
>2443	Argument	j
>2444	Identifier	j
>2445	Argument	i
>2446	Identifier	i
>2447	Callee	GetMatchIndex
>2448	Identifier	GetMatchIndex
>2449	Identifier	idx
>2450	Identifier	idx
>2451	IdentifierDeclType	MatchIndex
>2452	IfStatement	if ( i >= j )
>2453	ContinueStatement	 
>2454	Condition	 
>2455	RelationalExpression	i >= j
>2456	Identifier	j
>2457	Identifier	i
>2458	IdentifierDeclStatement	 
>2459	IdentifierDecl	j = iter -> first
>2460	AssignmentExpr	j = iter -> first
>2461	PtrMemberAccess	iter -> first
>2462	Identifier	first
>2463	Identifier	iter
>2464	Identifier	j
>2465	Identifier	j
>2466	IdentifierDeclType	unsigned int
>2467	IncDecOp	 
>2468	IncDec	++
>2469	Identifier	iter
>2470	Condition	 
>2471	EqualityExpression	iter != models . End ( i )
>2472	CallExpression	models . End ( i )
>2473	ArgumentList	i
>2474	Argument	i
>2475	Identifier	i
>2476	Callee	models . End
>2477	MemberAccess	models . End
>2478	Identifier	End
>2479	Identifier	models
>2480	Identifier	iter
>2481	ForInit	 
>2482	AssignmentExpr	iter = models . Begin ( i )
>2483	CallExpression	models . Begin ( i )
>2484	ArgumentList	i
>2485	Argument	i
>2486	Identifier	i
>2487	Callee	models . Begin
>2488	MemberAccess	models . Begin
>2489	Identifier	Begin
>2490	Identifier	models
>2491	Identifier	iter
>2492	IdentifierDeclStatement	 
>2493	IdentifierDecl	iter
>2494	Identifier	iter
>2495	IdentifierDeclType	ModelTable 
>2496	IncDecOp	 
>2497	IncDec	++
>2498	Identifier	i
>2499	Condition	 
>2500	RelationalExpression	i < ( unsigned int ) num_images
>2501	CastExpression	( unsigned int ) num_images
>2502	Identifier	num_images
>2503	CastTarget	unsigned int
>2504	Identifier	i
>2505	ForInit	 
>2506	IdentifierDeclStatement	unsigned int i = 0 ;
>2507	IdentifierDecl	i = 0
>2508	AssignmentExpr	i = 0
>2509	PrimaryExpression	0
>2510	Identifier	i
>2511	Identifier	i
>2512	IdentifierDeclType	unsigned int
>2513	ExpressionStatement	 
>2514	CallExpression	fprintf ( f , \"%d\n\" , num_images )
>2515	ArgumentList	f
>2516	Argument	num_images
>2517	Identifier	num_images
>2518	Argument	\"%d\n\"
>2519	PrimaryExpression	\"%d\n\"
>2520	Argument	f
>2521	Identifier	f
>2522	Callee	fprintf
>2523	Identifier	fprintf
>2524	CompoundStatement	 
>2525	ExpressionStatement	 
>2526	CallExpression	printf ( \"[WriteModels] Error opening file %s for reading\n\" , out_file )
>2527	ArgumentList	\"[WriteModels] Error opening file %s for reading\n\"
>2528	Argument	out_file
>2529	Identifier	out_file
>2530	Argument	\"[WriteModels] Error opening file %s for reading\n\"
>2531	PrimaryExpression	\"[WriteModels] Error opening file %s for reading\n\"
>2532	Callee	printf
>2533	Identifier	printf
>2534	Condition	 
>2535	EqualityExpression	f == NULL
>2536	Identifier	NULL
>2537	Identifier	f
>2538	IdentifierDeclStatement	 
>2539	IdentifierDecl	* f = fopen ( out_file , \"w\" )
>2540	AssignmentExpr	* f = fopen ( out_file , \"w\" )
>2541	CallExpression	fopen ( out_file , \"w\" )
>2542	ArgumentList	out_file
>2543	Argument	\"w\"
>2544	PrimaryExpression	\"w\"
>2545	Argument	out_file
>2546	Identifier	out_file
>2547	Callee	fopen
>2548	Identifier	fopen
>2549	Identifier	f
>2550	Identifier	f
>2551	IdentifierDeclType	FILE *
>2572	FunctionDef	WriteModelsSparse (ModelMap & models , int num_images , char * out_file)
>2573	ParameterList	ModelMap & models , int num_images , char * out_file
>2574	Parameter	 
>2575	Identifier	out_file
>2576	ParameterType	char *
>2577	Parameter	 
>2578	Identifier	num_images
>2579	ParameterType	int
>2580	Parameter	 
>2581	Identifier	models
>2582	ParameterType	ModelMap &
>2583	ReturnType	void
>2584	CompoundStatement	 
>2585	IfStatement	if ( f == NULL )
>2586	ElseStatement	else
>2587	CompoundStatement	 
>2588	ExpressionStatement	 
>2589	CallExpression	fclose ( f )
>2590	ArgumentList	f
>2591	Argument	f
>2592	Identifier	f
>2593	Callee	fclose
>2594	Identifier	fclose
>2595	ForStatement	for ( unsigned int i = 0 ; i < ( unsigned int ) num_images ; i ++ )
>2596	CompoundStatement	 
>2597	ForStatement	for ( iter = models . Begin ( i ) ; iter != models . End ( i ) ; iter ++ )
>2598	CompoundStatement	 
>2599	IfStatement	if ( models . Contains ( idx ) )
>2600	CompoundStatement	 
>2601	ExpressionStatement	 
>2602	CallExpression	models . GetModel ( idx ) . WriteSparse ( f )
>2603	ArgumentList	f
>2604	Argument	f
>2605	Identifier	f
>2606	Callee	models . GetModel ( idx ) . WriteSparse
>2607	MemberAccess	models . GetModel ( idx ) . WriteSparse
>2608	Identifier	WriteSparse
>2609	CallExpression	models . GetModel ( idx )
>2610	ArgumentList	idx
>2611	Argument	idx
>2612	Identifier	idx
>2613	Callee	models . GetModel
>2614	MemberAccess	models . GetModel
>2615	Identifier	GetModel
>2616	Identifier	models
>2617	ExpressionStatement	 
>2618	CallExpression	fprintf ( f , \"%d %d\n\" , i , j )
>2619	ArgumentList	f
>2620	Argument	j
>2621	Identifier	j
>2622	Argument	i
>2623	Identifier	i
>2624	Argument	\"%d %d\n\"
>2625	PrimaryExpression	\"%d %d\n\"
>2626	Argument	f
>2627	Identifier	f
>2628	Callee	fprintf
>2629	Identifier	fprintf
>2630	Condition	 
>2631	CallExpression	models . Contains ( idx )
>2632	ArgumentList	idx
>2633	Argument	idx
>2634	Identifier	idx
>2635	Callee	models . Contains
>2636	MemberAccess	models . Contains
>2637	Identifier	Contains
>2638	Identifier	models
>2639	IdentifierDeclStatement	 
>2640	IdentifierDecl	idx = GetMatchIndex ( i , j )
>2641	AssignmentExpr	idx = GetMatchIndex ( i , j )
>2642	CallExpression	GetMatchIndex ( i , j )
>2643	ArgumentList	i
>2644	Argument	j
>2645	Identifier	j
>2646	Argument	i
>2647	Identifier	i
>2648	Callee	GetMatchIndex
>2649	Identifier	GetMatchIndex
>2650	Identifier	idx
>2651	Identifier	idx
>2652	IdentifierDeclType	MatchIndex
>2653	IfStatement	if ( i >= j )
>2654	ContinueStatement	 
>2655	Condition	 
>2656	RelationalExpression	i >= j
>2657	Identifier	j
>2658	Identifier	i
>2659	IdentifierDeclStatement	 
>2660	IdentifierDecl	j = iter -> first
>2661	AssignmentExpr	j = iter -> first
>2662	PtrMemberAccess	iter -> first
>2663	Identifier	first
>2664	Identifier	iter
>2665	Identifier	j
>2666	Identifier	j
>2667	IdentifierDeclType	unsigned int
>2668	IncDecOp	 
>2669	IncDec	++
>2670	Identifier	iter
>2671	Condition	 
>2672	EqualityExpression	iter != models . End ( i )
>2673	CallExpression	models . End ( i )
>2674	ArgumentList	i
>2675	Argument	i
>2676	Identifier	i
>2677	Callee	models . End
>2678	MemberAccess	models . End
>2679	Identifier	End
>2680	Identifier	models
>2681	Identifier	iter
>2682	ForInit	 
>2683	AssignmentExpr	iter = models . Begin ( i )
>2684	CallExpression	models . Begin ( i )
>2685	ArgumentList	i
>2686	Argument	i
>2687	Identifier	i
>2688	Callee	models . Begin
>2689	MemberAccess	models . Begin
>2690	Identifier	Begin
>2691	Identifier	models
>2692	Identifier	iter
>2693	IdentifierDeclStatement	 
>2694	IdentifierDecl	iter
>2695	Identifier	iter
>2696	IdentifierDeclType	ModelTable 
>2697	IncDecOp	 
>2698	IncDec	++
>2699	Identifier	i
>2700	Condition	 
>2701	RelationalExpression	i < ( unsigned int ) num_images
>2702	CastExpression	( unsigned int ) num_images
>2703	Identifier	num_images
>2704	CastTarget	unsigned int
>2705	Identifier	i
>2706	ForInit	 
>2707	IdentifierDeclStatement	unsigned int i = 0 ;
>2708	IdentifierDecl	i = 0
>2709	AssignmentExpr	i = 0
>2710	PrimaryExpression	0
>2711	Identifier	i
>2712	Identifier	i
>2713	IdentifierDeclType	unsigned int
>2714	ExpressionStatement	 
>2715	CallExpression	fprintf ( f , \"%d %u\n\" , num_images , num_pairs )
>2716	ArgumentList	f
>2717	Argument	num_pairs
>2718	Identifier	num_pairs
>2719	Argument	num_images
>2720	Identifier	num_images
>2721	Argument	\"%d %u\n\"
>2722	PrimaryExpression	\"%d %u\n\"
>2723	Argument	f
>2724	Identifier	f
>2725	Callee	fprintf
>2726	Identifier	fprintf
>2727	ExpressionStatement	 
>2728	AssignmentExpr	num_pairs = num_pairs / 2
>2729	MultiplicativeExpression	num_pairs / 2
>2730	PrimaryExpression	2
>2731	Identifier	num_pairs
>2732	Identifier	num_pairs
>2733	ForStatement	for ( unsigned int i = 0 ; i < ( unsigned int ) num_images ; i ++ )
>2734	CompoundStatement	 
>2735	ExpressionStatement	 
>2736	AssignmentExpr	num_pairs += models . GetNeighbors ( i ) . size ( )
>2737	CallExpression	models . GetNeighbors ( i ) . size ( )
>2738	ArgumentList	 
>2739	Callee	models . GetNeighbors ( i ) . size
>2740	MemberAccess	models . GetNeighbors ( i ) . size
>2741	Identifier	size
>2742	CallExpression	models . GetNeighbors ( i )
>2743	ArgumentList	i
>2744	Argument	i
>2745	Identifier	i
>2746	Callee	models . GetNeighbors
>2747	MemberAccess	models . GetNeighbors
>2748	Identifier	GetNeighbors
>2749	Identifier	models
>2750	Identifier	num_pairs
>2751	IncDecOp	 
>2752	IncDec	++
>2753	Identifier	i
>2754	Condition	 
>2755	RelationalExpression	i < ( unsigned int ) num_images
>2756	CastExpression	( unsigned int ) num_images
>2757	Identifier	num_images
>2758	CastTarget	unsigned int
>2759	Identifier	i
>2760	ForInit	 
>2761	IdentifierDeclStatement	unsigned int i = 0 ;
>2762	IdentifierDecl	i = 0
>2763	AssignmentExpr	i = 0
>2764	PrimaryExpression	0
>2765	Identifier	i
>2766	Identifier	i
>2767	IdentifierDeclType	unsigned int
>2768	IdentifierDeclStatement	 
>2769	IdentifierDecl	num_pairs = 0
>2770	AssignmentExpr	num_pairs = 0
>2771	PrimaryExpression	0
>2772	Identifier	num_pairs
>2773	Identifier	num_pairs
>2774	IdentifierDeclType	unsigned int
>2775	CompoundStatement	 
>2776	ExpressionStatement	 
>2777	CallExpression	printf ( \"[WriteModels] Error opening file %s for reading\n\" , out_file )
>2778	ArgumentList	\"[WriteModels] Error opening file %s for reading\n\"
>2779	Argument	out_file
>2780	Identifier	out_file
>2781	Argument	\"[WriteModels] Error opening file %s for reading\n\"
>2782	PrimaryExpression	\"[WriteModels] Error opening file %s for reading\n\"
>2783	Callee	printf
>2784	Identifier	printf
>2785	Condition	 
>2786	EqualityExpression	f == NULL
>2787	Identifier	NULL
>2788	Identifier	f
>2789	IdentifierDeclStatement	 
>2790	IdentifierDecl	* f = fopen ( out_file , \"w\" )
>2791	AssignmentExpr	* f = fopen ( out_file , \"w\" )
>2792	CallExpression	fopen ( out_file , \"w\" )
>2793	ArgumentList	out_file
>2794	Argument	\"w\"
>2795	PrimaryExpression	\"w\"
>2796	Argument	out_file
>2797	Identifier	out_file
>2798	Callee	fopen
>2799	Identifier	fopen
>2800	Identifier	f
>2801	Identifier	f
>2802	IdentifierDeclType	FILE *
>2826	FunctionDef	WritePEdges (PEdgeMap & p_edges , int num_images , char * out_file)
>2827	ParameterList	PEdgeMap & p_edges , int num_images , char * out_file
>2828	Parameter	 
>2829	Identifier	out_file
>2830	ParameterType	char *
>2831	Parameter	 
>2832	Identifier	num_images
>2833	ParameterType	int
>2834	Parameter	 
>2835	Identifier	p_edges
>2836	ParameterType	PEdgeMap &
>2837	ReturnType	void
>2838	CompoundStatement	 
>2839	IfStatement	if ( f == NULL )
>2840	ElseStatement	else
>2841	CompoundStatement	 
>2842	ExpressionStatement	 
>2843	CallExpression	fclose ( f )
>2844	ArgumentList	f
>2845	Argument	f
>2846	Identifier	f
>2847	Callee	fclose
>2848	Identifier	fclose
>2849	ForStatement	for ( int i = 0 ; i < num_images ; i ++ )
>2850	CompoundStatement	 
>2851	ForStatement	for ( int j = i + 1 ; j < num_images ; j ++ )
>2852	CompoundStatement	 
>2853	IfStatement	if ( p_edges . find ( i * num_images + j ) != p_edges . end ( ) )
>2854	CompoundStatement	 
>2855	ExpressionStatement	 
>2856	CallExpression	fprintf ( f , \"%d %d\n\" , i , j )
>2857	ArgumentList	f
>2858	Argument	j
>2859	Identifier	j
>2860	Argument	i
>2861	Identifier	i
>2862	Argument	\"%d %d\n\"
>2863	PrimaryExpression	\"%d %d\n\"
>2864	Argument	f
>2865	Identifier	f
>2866	Callee	fprintf
>2867	Identifier	fprintf
>2868	Condition	 
>2869	EqualityExpression	p_edges . find ( i * num_images + j ) != p_edges . end ( )
>2870	CallExpression	p_edges . end ( )
>2871	ArgumentList	 
>2872	Callee	p_edges . end
>2873	MemberAccess	p_edges . end
>2874	Identifier	end
>2875	Identifier	p_edges
>2876	CallExpression	p_edges . find ( i * num_images + j )
>2877	ArgumentList	i * num_images + j
>2878	Argument	i * num_images + j
>2879	AdditiveExpression	i * num_images + j
>2880	Identifier	j
>2881	MultiplicativeExpression	i * num_images
>2882	Identifier	num_images
>2883	Identifier	i
>2884	Callee	p_edges . find
>2885	MemberAccess	p_edges . find
>2886	Identifier	find
>2887	Identifier	p_edges
>2888	IncDecOp	 
>2889	IncDec	++
>2890	Identifier	j
>2891	Condition	 
>2892	RelationalExpression	j < num_images
>2893	Identifier	num_images
>2894	Identifier	j
>2895	ForInit	 
>2896	IdentifierDeclStatement	int j = i + 1 ;
>2897	IdentifierDecl	j = i + 1
>2898	AssignmentExpr	j = i + 1
>2899	AdditiveExpression	i + 1
>2900	PrimaryExpression	1
>2901	Identifier	i
>2902	Identifier	j
>2903	Identifier	j
>2904	IdentifierDeclType	int
>2905	IncDecOp	 
>2906	IncDec	++
>2907	Identifier	i
>2908	Condition	 
>2909	RelationalExpression	i < num_images
>2910	Identifier	num_images
>2911	Identifier	i
>2912	ForInit	 
>2913	IdentifierDeclStatement	int i = 0 ;
>2914	IdentifierDecl	i = 0
>2915	AssignmentExpr	i = 0
>2916	PrimaryExpression	0
>2917	Identifier	i
>2918	Identifier	i
>2919	IdentifierDeclType	int
>2920	CompoundStatement	 
>2921	ExpressionStatement	 
>2922	CallExpression	printf ( \"[WritePEdges] Error opening file %s for reading\n\" , out_file )
>2923	ArgumentList	\"[WritePEdges] Error opening file %s for reading\n\"
>2924	Argument	out_file
>2925	Identifier	out_file
>2926	Argument	\"[WritePEdges] Error opening file %s for reading\n\"
>2927	PrimaryExpression	\"[WritePEdges] Error opening file %s for reading\n\"
>2928	Callee	printf
>2929	Identifier	printf
>2930	Condition	 
>2931	EqualityExpression	f == NULL
>2932	Identifier	NULL
>2933	Identifier	f
>2934	IdentifierDeclStatement	 
>2935	IdentifierDecl	* f = fopen ( out_file , \"w\" )
>2936	AssignmentExpr	* f = fopen ( out_file , \"w\" )
>2937	CallExpression	fopen ( out_file , \"w\" )
>2938	ArgumentList	out_file
>2939	Argument	\"w\"
>2940	PrimaryExpression	\"w\"
>2941	Argument	out_file
>2942	Identifier	out_file
>2943	Callee	fopen
>2944	Identifier	fopen
>2945	Identifier	f
>2946	Identifier	f
>2947	IdentifierDeclType	FILE *
>2961	FunctionDef	ThresholdTwists (int num_images , ModelMap & models , std 
>2962	ParameterList	int num_images , ModelMap & models , std 
>2963	Parameter	 
>2964	Identifier	panos_only
>2965	ParameterType	bool
>2966	Parameter	 
>2967	Identifier	image_data
>2968	ParameterType	std 
>2969	Parameter	 
>2970	Identifier	models
>2971	ParameterType	ModelMap &
>2972	Parameter	 
>2973	Identifier	num_images
>2974	ParameterType	int
>2975	ReturnType	void
>2976	CompoundStatement	 
>2977	ForStatement	for ( int i = 0 ; i < num_images ; i ++ )
>2978	CompoundStatement	 
>2979	ForStatement	for ( iter = nbrs . begin ( ) ; iter != nbrs . end ( ) ; iter ++ )
>2980	CompoundStatement	 
>2981	IfStatement	if ( i < j )
>2982	ElseStatement	else
>2983	CompoundStatement	 
>2984	IfStatement	if ( models . Contains ( idx ) )
>2985	CompoundStatement	 
>2986	ExpressionStatement	 
>2987	CallExpression	models . RemoveModel ( idx )
>2988	ArgumentList	idx
>2989	Argument	idx
>2990	Identifier	idx
>2991	Callee	models . RemoveModel
>2992	MemberAccess	models . RemoveModel
>2993	Identifier	RemoveModel
>2994	Identifier	models
>2995	Condition	 
>2996	CallExpression	models . Contains ( idx )
>2997	ArgumentList	idx
>2998	Argument	idx
>2999	Identifier	idx
>3000	Callee	models . Contains
>3001	MemberAccess	models . Contains
>3002	Identifier	Contains
>3003	Identifier	models
>3004	IdentifierDeclStatement	 
>3005	IdentifierDecl	idx = GetMatchIndex ( j , i )
>3006	AssignmentExpr	idx = GetMatchIndex ( j , i )
>3007	CallExpression	GetMatchIndex ( j , i )
>3008	ArgumentList	j
>3009	Argument	i
>3010	Identifier	i
>3011	Argument	j
>3012	Identifier	j
>3013	Callee	GetMatchIndex
>3014	Identifier	GetMatchIndex
>3015	Identifier	idx
>3016	Identifier	idx
>3017	IdentifierDeclType	MatchIndex
>3018	CompoundStatement	 
>3019	IfStatement	if ( models . Contains ( idx ) )
>3020	CompoundStatement	 
>3021	ExpressionStatement	 
>3022	CallExpression	models . RemoveModel ( idx )
>3023	ArgumentList	idx
>3024	Argument	idx
>3025	Identifier	idx
>3026	Callee	models . RemoveModel
>3027	MemberAccess	models . RemoveModel
>3028	Identifier	RemoveModel
>3029	Identifier	models
>3030	Condition	 
>3031	CallExpression	models . Contains ( idx )
>3032	ArgumentList	idx
>3033	Argument	idx
>3034	Identifier	idx
>3035	Callee	models . Contains
>3036	MemberAccess	models . Contains
>3037	Identifier	Contains
>3038	Identifier	models
>3039	IdentifierDeclStatement	 
>3040	IdentifierDecl	idx = GetMatchIndex ( i , j )
>3041	AssignmentExpr	idx = GetMatchIndex ( i , j )
>3042	CallExpression	GetMatchIndex ( i , j )
>3043	ArgumentList	i
>3044	Argument	j
>3045	Identifier	j
>3046	Argument	i
>3047	Identifier	i
>3048	Callee	GetMatchIndex
>3049	Identifier	GetMatchIndex
>3050	Identifier	idx
>3051	Identifier	idx
>3052	IdentifierDeclType	MatchIndex
>3053	Condition	 
>3054	RelationalExpression	i < j
>3055	Identifier	j
>3056	Identifier	i
>3057	IdentifierDeclStatement	 
>3058	IdentifierDecl	j = * iter
>3059	AssignmentExpr	j = * iter
>3060	UnaryOp	* iter
>3061	Identifier	iter
>3062	UnaryOperator	*
>3063	Identifier	j
>3064	Identifier	j
>3065	IdentifierDeclType	unsigned int
>3066	IncDecOp	 
>3067	IncDec	++
>3068	Identifier	iter
>3069	Condition	 
>3070	EqualityExpression	iter != nbrs . end ( )
>3071	CallExpression	nbrs . end ( )
>3072	ArgumentList	 
>3073	Callee	nbrs . end
>3074	MemberAccess	nbrs . end
>3075	Identifier	end
>3076	Identifier	nbrs
>3077	Identifier	iter
>3078	ForInit	 
>3079	AssignmentExpr	iter = nbrs . begin ( )
>3080	CallExpression	nbrs . begin ( )
>3081	ArgumentList	 
>3082	Callee	nbrs . begin
>3083	MemberAccess	nbrs . begin
>3084	Identifier	begin
>3085	Identifier	nbrs
>3086	Identifier	iter
>3087	IdentifierDeclStatement	 
>3088	IdentifierDecl	iter
>3089	Identifier	iter
>3090	IdentifierDeclType	std 
>3091	IdentifierDeclStatement	 
>3092	IdentifierDecl	nbrs = models . GetNeighbors ( i )
>3093	AssignmentExpr	nbrs = models . GetNeighbors ( i )
>3094	CallExpression	models . GetNeighbors ( i )
>3095	ArgumentList	i
>3096	Argument	i
>3097	Identifier	i
>3098	Callee	models . GetNeighbors
>3099	MemberAccess	models . GetNeighbors
>3100	Identifier	GetNeighbors
>3101	Identifier	models
>3102	Identifier	nbrs
>3103	Identifier	nbrs
>3104	IdentifierDeclType	std 
>3105	ExpressionStatement	 
>3106	CallExpression	printf ( \"[ThresholdTwists] Removing image %d with score %0.3f, %0.3f\n\" , i , perc_large_twists , ratio )
>3107	ArgumentList	\"[ThresholdTwists] Removing image %d with score %0.3f, %0.3f\n\"
>3108	Argument	ratio
>3109	Identifier	ratio
>3110	Argument	perc_large_twists
>3111	Identifier	perc_large_twists
>3112	Argument	i
>3113	Identifier	i
>3114	Argument	\"[ThresholdTwists] Removing image %d with score %0.3f, %0.3f\n\"
>3115	PrimaryExpression	\"[ThresholdTwists] Removing image %d with score %0.3f, %0.3f\n\"
>3116	Callee	printf
>3117	Identifier	printf
>3118	IfStatement	if ( ( panos_only || perc_large_twists < 0.4 ) && ratio > 0.4 && ratio < 2.5 )
>3119	CompoundStatement	 
>3120	ContinueStatement	 
>3121	Condition	 
>3122	AndExpression	( panos_only || perc_large_twists < 0.4 ) && ratio > 0.4 && ratio < 2.5
>3123	AndExpression	ratio > 0.4 && ratio < 2.5
>3124	RelationalExpression	ratio < 2.5
>3125	PrimaryExpression	2.5
>3126	Identifier	ratio
>3127	RelationalExpression	ratio > 0.4
>3128	PrimaryExpression	0.4
>3129	Identifier	ratio
>3130	OrExpression	panos_only || perc_large_twists < 0.4
>3131	RelationalExpression	perc_large_twists < 0.4
>3132	PrimaryExpression	0.4
>3133	Identifier	perc_large_twists
>3134	Identifier	panos_only
>3135	IdentifierDeclStatement	 
>3136	IdentifierDecl	ratio = ( double ) w / h
>3137	AssignmentExpr	ratio = ( double ) w / h
>3138	MultiplicativeExpression	( double ) w / h
>3139	Identifier	h
>3140	CastExpression	( double ) w
>3141	Identifier	w
>3142	CastTarget	double
>3143	Identifier	ratio
>3144	Identifier	ratio
>3145	IdentifierDeclType	double
>3146	IdentifierDeclStatement	 
>3147	IdentifierDecl	h = image_data [ i ] . GetHeight ( )
>3148	AssignmentExpr	h = image_data [ i ] . GetHeight ( )
>3149	CallExpression	image_data [ i ] . GetHeight ( )
>3150	ArgumentList	 
>3151	Callee	image_data [ i ] . GetHeight
>3152	MemberAccess	image_data [ i ] . GetHeight
>3153	Identifier	GetHeight
>3154	ArrayIndexing	image_data [ i ]
>3155	Identifier	i
>3156	Identifier	image_data
>3157	Identifier	h
>3158	Identifier	h
>3159	IdentifierDeclType	int
>3160	IdentifierDeclStatement	 
>3161	IdentifierDecl	w = image_data [ i ] . GetWidth ( )
>3162	AssignmentExpr	w = image_data [ i ] . GetWidth ( )
>3163	CallExpression	image_data [ i ] . GetWidth ( )
>3164	ArgumentList	 
>3165	Callee	image_data [ i ] . GetWidth
>3166	MemberAccess	image_data [ i ] . GetWidth
>3167	Identifier	GetWidth
>3168	ArrayIndexing	image_data [ i ]
>3169	Identifier	i
>3170	Identifier	image_data
>3171	Identifier	w
>3172	Identifier	w
>3173	IdentifierDeclType	int
>3174	IdentifierDeclStatement	 
>3175	IdentifierDecl	perc_large_twists = ( double ) num_large_twists [ i ] / degree [ i ]
>3176	AssignmentExpr	perc_large_twists = ( double ) num_large_twists [ i ] / degree [ i ]
>3177	MultiplicativeExpression	( double ) num_large_twists [ i ] / degree [ i ]
>3178	ArrayIndexing	degree [ i ]
>3179	Identifier	i
>3180	Identifier	degree
>3181	CastExpression	( double ) num_large_twists [ i ]
>3182	ArrayIndexing	num_large_twists [ i ]
>3183	Identifier	i
>3184	Identifier	num_large_twists
>3185	CastTarget	double
>3186	Identifier	perc_large_twists
>3187	Identifier	perc_large_twists
>3188	IdentifierDeclType	double
>3189	IfStatement	if ( degree [ i ] == 0 )
>3190	ContinueStatement	 
>3191	Condition	 
>3192	EqualityExpression	degree [ i ] == 0
>3193	PrimaryExpression	0
>3194	ArrayIndexing	degree [ i ]
>3195	Identifier	i
>3196	Identifier	degree
>3197	IncDecOp	 
>3198	IncDec	++
>3199	Identifier	i
>3200	Condition	 
>3201	RelationalExpression	i < num_images
>3202	Identifier	num_images
>3203	Identifier	i
>3204	ForInit	 
>3205	IdentifierDeclStatement	int i = 0 ;
>3206	IdentifierDecl	i = 0
>3207	AssignmentExpr	i = 0
>3208	PrimaryExpression	0
>3209	Identifier	i
>3210	Identifier	i
>3211	IdentifierDeclType	int
>3212	ForStatement	for ( int i = 0 ; i < num_images ; i ++ )
>3213	CompoundStatement	 
>3214	ForStatement	for ( iter = models . Begin ( i ) ; iter != models . End ( i ) ; iter ++ )
>3215	CompoundStatement	 
>3216	IfStatement	if ( models . Contains ( idx ) )
>3217	CompoundStatement	 
>3218	ExpressionStatement	 
>3219	IncDecOp	degree [ j ] ++
>3220	IncDec	++
>3221	ArrayIndexing	degree [ j ]
>3222	Identifier	j
>3223	Identifier	degree
>3224	ExpressionStatement	 
>3225	IncDecOp	degree [ i ] ++
>3226	IncDec	++
>3227	ArrayIndexing	degree [ i ]
>3228	Identifier	i
>3229	Identifier	degree
>3230	IfStatement	if ( fabs ( RAD2DEG ( twist_angle ) ) >= 12.0 )
>3231	CompoundStatement	 
>3232	ExpressionStatement	 
>3233	IncDecOp	num_large_twists [ j ] ++
>3234	IncDec	++
>3235	ArrayIndexing	num_large_twists [ j ]
>3236	Identifier	j
>3237	Identifier	num_large_twists
>3238	ExpressionStatement	 
>3239	IncDecOp	num_large_twists [ i ] ++
>3240	IncDec	++
>3241	ArrayIndexing	num_large_twists [ i ]
>3242	Identifier	i
>3243	Identifier	num_large_twists
>3244	Condition	 
>3245	RelationalExpression	fabs ( RAD2DEG ( twist_angle ) ) >= 12.0
>3246	PrimaryExpression	12.0
>3247	CallExpression	fabs ( RAD2DEG ( twist_angle ) )
>3248	ArgumentList	RAD2DEG ( twist_angle )
>3249	Argument	RAD2DEG ( twist_angle )
>3250	CallExpression	RAD2DEG ( twist_angle )
>3251	ArgumentList	twist_angle
>3252	Argument	twist_angle
>3253	Identifier	twist_angle
>3254	Callee	RAD2DEG
>3255	Identifier	RAD2DEG
>3256	Callee	fabs
>3257	Identifier	fabs
>3258	IdentifierDeclStatement	 
>3259	IdentifierDecl	twist_angle = GetTwist ( Rp_ij )
>3260	AssignmentExpr	twist_angle = GetTwist ( Rp_ij )
>3261	CallExpression	GetTwist ( Rp_ij )
>3262	ArgumentList	Rp_ij
>3263	Argument	Rp_ij
>3264	Identifier	Rp_ij
>3265	Callee	GetTwist
>3266	Identifier	GetTwist
>3267	Identifier	twist_angle
>3268	Identifier	twist_angle
>3269	IdentifierDeclType	double
>3270	ExpressionStatement	 
>3271	CallExpression	matrix_transpose_product ( 3 , 3 , 3 , 3 , Rp_i , Rp_j , Rp_ij )
>3272	ArgumentList	3
>3273	Argument	Rp_ij
>3274	Identifier	Rp_ij
>3275	Argument	Rp_j
>3276	Identifier	Rp_j
>3277	Argument	Rp_i
>3278	Identifier	Rp_i
>3279	Argument	3
>3280	PrimaryExpression	3
>3281	Argument	3
>3282	PrimaryExpression	3
>3283	Argument	3
>3284	PrimaryExpression	3
>3285	Argument	3
>3286	PrimaryExpression	3
>3287	Callee	matrix_transpose_product
>3288	Identifier	matrix_transpose_product
>3289	IdentifierDeclStatement	 
>3290	IdentifierDecl	Rp_ij [ 9 ]
>3291	PrimaryExpression	9
>3292	Identifier	Rp_ij
>3293	IdentifierDeclType	double [ 9 ]
>3294	ExpressionStatement	 
>3295	CallExpression	matrix_transpose ( 3 , 3 , m . m_camera1 . R , Rp_j )
>3296	ArgumentList	3
>3297	Argument	Rp_j
>3298	Identifier	Rp_j
>3299	Argument	m . m_camera1 . R
>3300	MemberAccess	m . m_camera1 . R
>3301	Identifier	R
>3302	MemberAccess	m . m_camera1
>3303	Identifier	m_camera1
>3304	Identifier	m
>3305	Argument	3
>3306	PrimaryExpression	3
>3307	Argument	3
>3308	PrimaryExpression	3
>3309	Callee	matrix_transpose
>3310	Identifier	matrix_transpose
>3311	ExpressionStatement	 
>3312	CallExpression	matrix_transpose ( 3 , 3 , m . m_camera0 . R , Rp_i )
>3313	ArgumentList	3
>3314	Argument	Rp_i
>3315	Identifier	Rp_i
>3316	Argument	m . m_camera0 . R
>3317	MemberAccess	m . m_camera0 . R
>3318	Identifier	R
>3319	MemberAccess	m . m_camera0
>3320	Identifier	m_camera0
>3321	Identifier	m
>3322	Argument	3
>3323	PrimaryExpression	3
>3324	Argument	3
>3325	PrimaryExpression	3
>3326	Callee	matrix_transpose
>3327	Identifier	matrix_transpose
>3328	IdentifierDeclStatement	 
>3329	IdentifierDecl	Rp_j [ 9 ]
>3330	PrimaryExpression	9
>3331	Identifier	Rp_j
>3332	IdentifierDeclType	double [ 9 ]
>3333	IdentifierDecl	Rp_i [ 9 ]
>3334	PrimaryExpression	9
>3335	Identifier	Rp_i
>3336	IdentifierDeclType	double [ 9 ]
>3337	IdentifierDeclStatement	 
>3338	IdentifierDecl	& m = models . GetModel ( idx )
>3339	AssignmentExpr	& m = models . GetModel ( idx )
>3340	CallExpression	models . GetModel ( idx )
>3341	ArgumentList	idx
>3342	Argument	idx
>3343	Identifier	idx
>3344	Callee	models . GetModel
>3345	MemberAccess	models . GetModel
>3346	Identifier	GetModel
>3347	Identifier	models
>3348	Identifier	m
>3349	Identifier	m
>3350	IdentifierDeclType	TwoFrameModel &
>3351	Condition	 
>3352	CallExpression	models . Contains ( idx )
>3353	ArgumentList	idx
>3354	Argument	idx
>3355	Identifier	idx
>3356	Callee	models . Contains
>3357	MemberAccess	models . Contains
>3358	Identifier	Contains
>3359	Identifier	models
>3360	IdentifierDeclStatement	 
>3361	IdentifierDecl	idx = GetMatchIndex ( i , j )
>3362	AssignmentExpr	idx = GetMatchIndex ( i , j )
>3363	CallExpression	GetMatchIndex ( i , j )
>3364	ArgumentList	i
>3365	Argument	j
>3366	Identifier	j
>3367	Argument	i
>3368	Identifier	i
>3369	Callee	GetMatchIndex
>3370	Identifier	GetMatchIndex
>3371	Identifier	idx
>3372	Identifier	idx
>3373	IdentifierDeclType	MatchIndex
>3374	IfStatement	if ( i >= j )
>3375	ContinueStatement	 
>3376	Condition	 
>3377	RelationalExpression	i >= j
>3378	Identifier	j
>3379	Identifier	i
>3380	IdentifierDeclStatement	 
>3381	IdentifierDecl	j = iter -> first
>3382	AssignmentExpr	j = iter -> first
>3383	PtrMemberAccess	iter -> first
>3384	Identifier	first
>3385	Identifier	iter
>3386	Identifier	j
>3387	Identifier	j
>3388	IdentifierDeclType	unsigned int
>3389	IncDecOp	 
>3390	IncDec	++
>3391	Identifier	iter
>3392	Condition	 
>3393	EqualityExpression	iter != models . End ( i )
>3394	CallExpression	models . End ( i )
>3395	ArgumentList	i
>3396	Argument	i
>3397	Identifier	i
>3398	Callee	models . End
>3399	MemberAccess	models . End
>3400	Identifier	End
>3401	Identifier	models
>3402	Identifier	iter
>3403	ForInit	 
>3404	AssignmentExpr	iter = models . Begin ( i )
>3405	CallExpression	models . Begin ( i )
>3406	ArgumentList	i
>3407	Argument	i
>3408	Identifier	i
>3409	Callee	models . Begin
>3410	MemberAccess	models . Begin
>3411	Identifier	Begin
>3412	Identifier	models
>3413	Identifier	iter
>3414	IdentifierDeclStatement	 
>3415	IdentifierDecl	iter
>3416	Identifier	iter
>3417	IdentifierDeclType	ModelTable 
>3418	IncDecOp	 
>3419	IncDec	++
>3420	Identifier	i
>3421	Condition	 
>3422	RelationalExpression	i < num_images
>3423	Identifier	num_images
>3424	Identifier	i
>3425	ForInit	 
>3426	IdentifierDeclStatement	int i = 0 ;
>3427	IdentifierDecl	i = 0
>3428	AssignmentExpr	i = 0
>3429	PrimaryExpression	0
>3430	Identifier	i
>3431	Identifier	i
>3432	IdentifierDeclType	int
>3433	ForStatement	for ( int i = 0 ; i < num_images ; i ++ )
>3434	CompoundStatement	 
>3435	ExpressionStatement	 
>3436	AssignmentExpr	degree [ i ] = 0
>3437	PrimaryExpression	0
>3438	ArrayIndexing	degree [ i ]
>3439	Identifier	i
>3440	Identifier	degree
>3441	ExpressionStatement	 
>3442	AssignmentExpr	num_large_twists [ i ] = 0
>3443	PrimaryExpression	0
>3444	ArrayIndexing	num_large_twists [ i ]
>3445	Identifier	i
>3446	Identifier	num_large_twists
>3447	IncDecOp	 
>3448	IncDec	++
>3449	Identifier	i
>3450	Condition	 
>3451	RelationalExpression	i < num_images
>3452	Identifier	num_images
>3453	Identifier	i
>3454	ForInit	 
>3455	IdentifierDeclStatement	int i = 0 ;
>3456	IdentifierDecl	i = 0
>3457	AssignmentExpr	i = 0
>3458	PrimaryExpression	0
>3459	Identifier	i
>3460	Identifier	i
>3461	IdentifierDeclType	int
>3462	IdentifierDeclStatement	 
>3463	IdentifierDecl	* degree = new int [ num_images ]
>3464	AssignmentExpr	* degree = new int [ num_images ]
>3465	Identifier	num_images
>3466	Identifier	num_images
>3467	Identifier	degree
>3468	IdentifierDeclType	int *
>3469	IdentifierDeclStatement	 
>3470	IdentifierDecl	* num_large_twists = new int [ num_images ]
>3471	AssignmentExpr	* num_large_twists = new int [ num_images ]
>3472	Identifier	num_images
>3473	Identifier	num_images
>3474	Identifier	num_large_twists
>3475	IdentifierDeclType	int *
<3=15,14,4
<4=11,8,5
<5=7,6
<8=10,9
<11=13,12
<15=16
<16=38,34,31,17
<17=18
<18=19
<19=29,20
<20=27,25,21
<21=22
<22=24,23
<25=26
<27=28
<29=30
<31=33,32
<34=35
<35=37,36
<38=39
<39=40
<40=45,44,41
<41=43,42
<53=62,61,54
<54=58,55
<55=57,56
<58=60,59
<62=91,78,63
<63=64
<64=76,65
<65=74,72,66
<66=67
<67=71,68
<68=70,69
<72=73
<74=75
<76=77
<78=79
<79=89,80
<80=87,85,81
<81=82
<82=84,83
<85=86
<87=88
<89=90
<91=92
<92=102,93
<93=100,98,94
<94=95
<95=97,96
<98=99
<100=101
<102=103
<113=125,124,114
<114=121,118,115
<115=117,116
<118=120,119
<121=123,122
<125=135,126
<126=127
<127=133,128
<128=131,129
<129=130
<131=132
<133=134
<135=157,153,150,136
<136=137
<137=138
<138=148,139
<139=146,144,140
<140=141
<141=143,142
<144=145
<146=147
<148=149
<150=152,151
<153=154
<154=156,155
<157=158
<158=159
<159=164,163,160
<160=162,161
<174=183,182,175
<175=179,176
<176=178,177
<179=181,180
<183=210,197,184
<184=185
<185=195,186
<186=193,191,187
<187=188
<188=190,189
<191=192
<193=194
<195=196
<197=198
<198=208,199
<199=206,204,200
<200=201
<201=203,202
<204=205
<206=207
<208=209
<210=211
<211=221,212
<212=219,217,213
<213=214
<214=216,215
<217=218
<219=220
<221=222
<231=240,239,232
<232=236,233
<233=235,234
<236=238,237
<240=254,241
<241=242
<242=252,243
<243=250,248,244
<244=245
<245=247,246
<248=249
<250=251
<252=253
<254=255
<255=265,256
<256=263,261,257
<257=258
<258=260,259
<261=262
<263=264
<265=266
<274=280,279,275
<275=276
<276=278,277
<280=655,642,629,622,615,608,601,597,593,492,485,474,341,340,339,338,336,335,334,333,331,330,329,328,326,325,324,323,321,312,303,292,281
<281=282
<282=290,283
<283=288,286,284
<284=285
<286=287
<288=289
<290=291
<292=293
<293=301,294
<294=299,297,295
<295=296
<297=298
<299=300
<301=302
<303=304
<304=310,305
<305=308,306
<306=307
<308=309
<310=311
<312=313
<313=319,314
<314=317,315
<315=316
<317=318
<319=320
<321=322
<326=327
<331=332
<336=337
<341=472,397,342
<342=343
<343=393,389,348,344
<344=345
<345=347,346
<348=381,377,374,349
<349=366,358,350
<350=351
<351=355,352
<352=354,353
<355=357,356
<358=359
<359=363,360
<360=362,361
<363=365,364
<366=367
<367=371,368
<368=370,369
<371=373,372
<374=376,375
<377=378
<378=380,379
<381=382
<382=383
<383=388,387,384
<384=386,385
<389=390
<390=392,391
<393=394
<394=396,395
<397=465,460,449,409,403,402,401,400,398
<398=399
<403=404
<404=408,405
<405=407,406
<409=441,437,434,410
<410=421,411
<411=412
<412=418,413
<413=417,414
<414=416,415
<418=420,419
<421=422
<422=431,423
<423=429,424
<424=425
<425=426
<426=428,427
<429=430
<431=433,432
<434=436,435
<437=438
<438=440,439
<441=442
<442=443
<443=448,447,444
<444=446,445
<449=450
<450=458,451
<451=456,454,452
<452=453
<454=455
<456=457
<458=459
<460=461
<461=463,462
<463=464
<465=466
<466=471,470,467
<467=469,468
<472=473
<474=479,475
<475=476
<476=478,477
<479=480
<480=482,481
<482=484,483
<485=486
<486=491,490,487
<487=489,488
<492=585,581,578,493
<493=568,514,506,500,494
<494=495
<495=497,496
<497=499,498
<500=501
<501=503,502
<503=505,504
<506=507
<507=511,508
<508=510,509
<511=513,512
<514=515
<515=566,516
<516=564,562,558,554,550,539,528,517
<517=518
<518=527,519
<519=525,520
<520=521
<521=522
<522=524,523
<525=526
<528=529
<529=538,530
<530=536,531
<531=532
<532=533
<533=535,534
<536=537
<539=540
<540=549,541
<541=547,542
<542=543
<543=544
<544=546,545
<547=548
<550=551
<551=553,552
<554=555
<555=557,556
<558=559
<559=561,560
<562=563
<564=565
<566=567
<568=575,572,569
<569=571,570
<572=574,573
<575=577,576
<578=580,579
<581=582
<582=584,583
<585=586
<586=587
<587=592,591,588
<588=590,589
<593=594
<594=596,595
<597=598
<598=600,599
<601=602
<602=607,606,603
<603=605,604
<608=609
<609=614,613,610
<610=612,611
<615=616
<616=621,620,617
<617=619,618
<622=623
<623=628,627,624
<624=626,625
<629=630
<630=640,631
<631=638,636,632
<632=633
<633=635,634
<636=637
<638=639
<640=641
<642=643
<643=653,644
<644=651,649,645
<645=646
<646=648,647
<649=650
<651=652
<653=654
<655=656
<656=666,657
<657=664,662,658
<658=659
<659=661,660
<662=663
<664=665
<666=667
<716=722,721,717
<717=718
<718=720,719
<722=902,891,880,763,754,745,734,723
<723=724
<724=732,725
<725=730,728,726
<726=727
<728=729
<730=731
<732=733
<734=735
<735=743,736
<736=741,739,737
<737=738
<739=740
<741=742
<743=744
<745=746
<746=752,747
<747=750,748
<748=749
<750=751
<752=753
<754=755
<755=761,756
<756=759,757
<757=758
<759=760
<761=762
<763=872,868,865,764
<764=840,829,818,807,765
<765=766
<766=805,767
<767=803,801,799,797,795,786,777,768
<768=769
<769=775,770
<770=771
<771=772
<772=774,773
<775=776
<777=778
<778=784,779
<779=780
<780=781
<781=783,782
<784=785
<786=787
<787=793,788
<788=789
<789=790
<790=792,791
<793=794
<795=796
<797=798
<799=800
<801=802
<803=804
<805=806
<807=814,808
<808=809
<809=813,810
<810=812,811
<814=815
<815=817,816
<818=825,819
<819=820
<820=824,821
<821=823,822
<825=826
<826=828,827
<829=836,830
<830=831
<831=835,832
<832=834,833
<836=837
<837=839,838
<840=857,849,841
<841=848,847,842
<842=846,843
<843=845,844
<849=856,855,850
<850=854,851
<851=853,852
<857=864,863,858
<858=862,859
<859=861,860
<865=867,866
<868=869
<869=871,870
<872=873
<873=874
<874=879,878,875
<875=877,876
<880=881
<881=889,882
<882=887,885,883
<883=884
<885=886
<887=888
<889=890
<891=892
<892=900,893
<893=898,896,894
<894=895
<896=897
<898=899
<900=901
<902=903
<903=911,904
<904=909,907,905
<905=906
<907=908
<909=910
<911=912
<941=947,946,942
<942=943
<943=945,944
<947=993,974,962,948
<948=956,952,949
<949=950
<950=951
<952=953
<953=955,954
<956=957
<957=959,958
<959=961,960
<962=963
<963=973,972,964
<964=971,965
<965=969,966
<966=967
<967=968
<969=970
<974=975
<975=992,976
<976=990,977
<977=988,982,978
<978=979
<979=981,980
<982=983
<983=985,984
<985=987,986
<988=989
<990=991
<993=994
<994=1028,1027,995
<995=1026,996
<996=1011,997
<997=1009,998
<998=999
<999=1000
<1000=1008,1001
<1001=1005,1002
<1002=1004,1003
<1005=1007,1006
<1009=1010
<1011=1019,1012
<1012=1016,1013
<1013=1015,1014
<1016=1018,1017
<1019=1023,1020
<1020=1022,1021
<1023=1025,1024
<1039=1045,1044,1040
<1040=1041
<1041=1043,1042
<1045=1388,1371,1354,1349,1330,1321,1298,1277,1261,1244,1221,1209,1202,1083,1079,1068,1057,1046
<1046=1047
<1047=1055,1048
<1048=1053,1051,1049
<1049=1050
<1051=1052
<1053=1054
<1055=1056
<1057=1058
<1058=1066,1059
<1059=1064,1062,1060
<1060=1061
<1062=1063
<1064=1065
<1066=1067
<1068=1069
<1069=1077,1070
<1070=1075,1073,1071
<1071=1072
<1073=1074
<1075=1076
<1077=1078
<1079=1080
<1080=1082,1081
<1083=1194,1190,1187,1084
<1084=1178,1169,1148,1127,1111,1095,1085
<1085=1086
<1086=1094,1087
<1087=1093,1088
<1088=1090,1089
<1090=1092,1091
<1095=1096
<1096=1110,1109,1097
<1097=1108,1098
<1098=1106,1099
<1099=1104,1102,1100
<1100=1101
<1102=1103
<1104=1105
<1106=1107
<1111=1112
<1112=1126,1125,1113
<1113=1124,1114
<1114=1122,1115
<1115=1120,1118,1116
<1116=1117
<1118=1119
<1120=1121
<1122=1123
<1127=1128
<1128=1146,1129
<1129=1144,1142,1140,1138,1134,1132,1130
<1130=1131
<1132=1133
<1134=1135
<1135=1137,1136
<1138=1139
<1140=1141
<1142=1143
<1144=1145
<1146=1147
<1148=1149
<1149=1167,1150
<1150=1165,1163,1161,1159,1155,1153,1151
<1151=1152
<1153=1154
<1155=1156
<1156=1158,1157
<1159=1160
<1161=1162
<1163=1164
<1165=1166
<1167=1168
<1169=1174,1170
<1170=1173,1172,1171
<1174=1177,1176,1175
<1178=1179
<1179=1186,1185,1180
<1180=1184,1181
<1181=1183,1182
<1187=1189,1188
<1190=1191
<1191=1193,1192
<1194=1195
<1195=1196
<1196=1201,1200,1197
<1197=1199,1198
<1202=1203
<1203=1208,1207,1204
<1204=1206,1205
<1209=1210
<1210=1220,1219,1211
<1211=1218,1212
<1212=1216,1213
<1213=1214
<1214=1215
<1216=1217
<1221=1222
<1222=1243,1242,1241,1223
<1223=1240,1224
<1224=1235,1230,1225
<1225=1229,1226
<1226=1228,1227
<1230=1234,1231
<1231=1233,1232
<1235=1239,1236
<1236=1238,1237
<1244=1245
<1245=1259,1246
<1246=1257,1255,1253,1249,1247
<1247=1248
<1249=1250
<1250=1252,1251
<1253=1254
<1255=1256
<1257=1258
<1259=1260
<1261=1262
<1262=1276,1275,1263
<1263=1274,1264
<1264=1272,1265
<1265=1270,1268,1266
<1266=1267
<1268=1269
<1270=1271
<1272=1273
<1277=1278
<1278=1296,1279
<1279=1294,1292,1290,1288,1284,1282,1280
<1280=1281
<1282=1283
<1284=1285
<1285=1287,1286
<1288=1289
<1290=1291
<1292=1293
<1294=1295
<1296=1297
<1298=1299
<1299=1319,1300
<1300=1317,1315,1313,1311,1307,1303,1301
<1301=1302
<1303=1304
<1304=1306,1305
<1307=1308
<1308=1310,1309
<1311=1312
<1313=1314
<1315=1316
<1317=1318
<1319=1320
<1321=1326,1322
<1322=1325,1324,1323
<1326=1329,1328,1327
<1330=1331
<1331=1347,1332
<1332=1345,1343,1341,1339,1337,1335,1333
<1333=1334
<1335=1336
<1337=1338
<1339=1340
<1341=1342
<1343=1344
<1345=1346
<1347=1348
<1349=1350
<1350=1353,1352,1351
<1354=1355
<1355=1369,1356
<1356=1367,1363,1357
<1357=1358
<1358=1362,1359
<1359=1361,1360
<1363=1364
<1364=1366,1365
<1367=1368
<1369=1370
<1371=1372
<1372=1386,1373
<1373=1384,1380,1374
<1374=1375
<1375=1379,1376
<1376=1378,1377
<1380=1381
<1381=1383,1382
<1384=1385
<1386=1387
<1388=1393,1389
<1389=1392,1391,1390
<1393=1396,1395,1394
<1430=1436,1435,1431
<1431=1432
<1432=1434,1433
<1436=1481,1470,1459,1448,1437
<1437=1438
<1438=1446,1439
<1439=1444,1442,1440
<1440=1441
<1442=1443
<1444=1445
<1446=1447
<1448=1449
<1449=1457,1450
<1450=1455,1453,1451
<1451=1452
<1453=1454
<1455=1456
<1457=1458
<1459=1460
<1460=1468,1461
<1461=1466,1464,1462
<1462=1463
<1464=1465
<1466=1467
<1468=1469
<1470=1471
<1471=1479,1472
<1472=1477,1475,1473
<1473=1474
<1475=1476
<1477=1478
<1479=1480
<1481=1482
<1482=1490,1483
<1483=1488,1486,1484
<1484=1485
<1486=1487
<1488=1489
<1490=1491
<1501=1507,1506,1502
<1502=1503
<1503=1505,1504
<1507=1508
<1508=1536,1523,1509
<1509=1510
<1510=1511
<1511=1512
<1512=1520,1513
<1513=1517,1514
<1514=1516,1515
<1517=1519,1518
<1520=1522,1521
<1523=1524
<1524=1525
<1525=1533,1526
<1526=1530,1527
<1527=1529,1528
<1530=1532,1531
<1533=1535,1534
<1536=1537
<1546=1549,1548,1547
<1549=1688,1679,1670,1556,1550
<1550=1551
<1551=1555,1552
<1552=1554,1553
<1556=1662,1658,1655,1557
<1557=1646,1621,1596,1580,1564,1558
<1558=1559
<1559=1563,1560
<1560=1562,1561
<1564=1565
<1565=1579,1578,1566
<1566=1577,1567
<1567=1575,1568
<1568=1573,1571,1569
<1569=1570
<1571=1572
<1573=1574
<1575=1576
<1580=1581
<1581=1595,1594,1582
<1582=1593,1583
<1583=1591,1584
<1584=1589,1587,1585
<1585=1586
<1587=1588
<1589=1590
<1591=1592
<1596=1597
<1597=1619,1598
<1598=1617,1615,1613,1611,1605,1601,1599
<1599=1600
<1601=1602
<1602=1604,1603
<1605=1606
<1606=1608,1607
<1608=1610,1609
<1611=1612
<1613=1614
<1615=1616
<1617=1618
<1619=1620
<1621=1622
<1622=1644,1623
<1623=1642,1640,1638,1636,1630,1626,1624
<1624=1625
<1626=1627
<1627=1629,1628
<1630=1631
<1631=1633,1632
<1633=1635,1634
<1636=1637
<1638=1639
<1640=1641
<1642=1643
<1644=1645
<1646=1651,1647
<1647=1650,1649,1648
<1651=1654,1653,1652
<1655=1657,1656
<1658=1659
<1659=1661,1660
<1662=1663
<1663=1664
<1664=1669,1668,1665
<1665=1667,1666
<1670=1671
<1671=1678,1677,1672
<1672=1676,1673
<1673=1675,1674
<1679=1680
<1680=1687,1686,1681
<1681=1685,1682
<1682=1684,1683
<1688=1689
<1689=1694,1693,1690
<1690=1692,1691
<1716=1719,1718,1717
<1719=1778,1772,1763,1754,1744,1734,1724,1720
<1720=1721
<1721=1723,1722
<1724=1725
<1725=1731,1726
<1726=1728,1727
<1728=1730,1729
<1731=1733,1732
<1734=1735
<1735=1741,1736
<1736=1738,1737
<1738=1740,1739
<1741=1743,1742
<1744=1745
<1745=1751,1746
<1746=1748,1747
<1748=1750,1749
<1751=1753,1752
<1754=1755
<1755=1761,1756
<1756=1759,1757
<1757=1758
<1759=1760
<1761=1762
<1763=1764
<1764=1770,1765
<1765=1768,1766
<1766=1767
<1768=1769
<1770=1771
<1772=1773
<1773=1777,1774
<1774=1776,1775
<1778=1779
<1779=1781,1780
<1794=1806,1805,1795
<1795=1802,1799,1796
<1796=1798,1797
<1799=1801,1800
<1802=1804,1803
<1806=1889,1807
<1807=1887,1848,1808
<1808=1809
<1809=1829,1810
<1810=1811
<1811=1827,1812
<1812=1825,1823,1821,1819,1817,1815,1813
<1813=1814
<1815=1816
<1817=1818
<1819=1820
<1821=1822
<1823=1824
<1825=1826
<1827=1828
<1829=1830
<1830=1846,1831
<1831=1844,1842,1840,1838,1836,1834,1832
<1832=1833
<1834=1835
<1836=1837
<1838=1839
<1840=1841
<1842=1843
<1844=1845
<1846=1847
<1848=1868,1849
<1849=1850
<1850=1866,1851
<1851=1864,1862,1860,1858,1856,1854,1852
<1852=1853
<1854=1855
<1856=1857
<1858=1859
<1860=1861
<1862=1863
<1864=1865
<1866=1867
<1868=1869
<1869=1885,1870
<1870=1883,1881,1879,1877,1875,1873,1871
<1871=1872
<1873=1874
<1875=1876
<1877=1878
<1879=1880
<1881=1882
<1883=1884
<1885=1886
<1887=1888
<1889=1890
<1890=1893,1892,1891
<1903=1912,1911,1904
<1904=1908,1905
<1905=1907,1906
<1908=1910,1909
<1912=1913
<1913=1925,1920,1914
<1914=1915
<1915=1916
<1916=1917
<1917=1919,1918
<1920=1921
<1921=1922
<1922=1924,1923
<1925=1926
<1934=1940,1939,1935
<1935=1936
<1936=1938,1937
<1940=1941
<1941=1947,1945,1942
<1942=1943
<1943=1944
<1945=1946
<1947=1948
<1955=1964,1963,1956
<1956=1960,1957
<1957=1959,1958
<1960=1962,1961
<1964=1965
<1965=1977,1972,1966
<1966=1967
<1967=1968
<1968=1969
<1969=1971,1970
<1972=1973
<1973=1974
<1974=1976,1975
<1977=1978
<1986=1992,1991,1987
<1987=1988
<1988=1990,1989
<1992=1993
<1993=1999,1997,1994
<1994=1995
<1995=1996
<1997=1998
<1999=2000
<2007=2016,2015,2008
<2008=2012,2009
<2009=2011,2010
<2012=2014,2013
<2016=2017
<2017=2027,2023,2018
<2018=2019
<2019=2020
<2020=2022,2021
<2023=2024
<2024=2026,2025
<2027=2028
<2036=2042,2041,2037
<2037=2038
<2038=2040,2039
<2042=2043
<2043=2049,2047,2044
<2044=2045
<2045=2046
<2047=2048
<2049=2050
<2057=2066,2065,2058
<2058=2062,2059
<2059=2061,2060
<2062=2064,2063
<2066=2256,2252,2239,2234,2080,2069,2067
<2067=2068
<2069=2076,2070
<2070=2071
<2071=2073,2072
<2073=2075,2074
<2076=2077
<2077=2079,2078
<2080=2223,2081
<2081=2216,2199,2195,2186,2150,2141,2109,2100,2082
<2082=2083
<2083=2096,2084
<2084=2087,2085
<2085=2086
<2087=2088
<2088=2094,2089
<2089=2092,2090
<2090=2091
<2092=2093
<2094=2095
<2096=2097
<2097=2099,2098
<2100=2101
<2101=2107,2102
<2102=2103
<2103=2104
<2104=2106,2105
<2107=2108
<2109=2123,2110
<2110=2112,2111
<2112=2113
<2113=2121,2114
<2114=2119,2117,2115
<2115=2116
<2117=2118
<2119=2120
<2121=2122
<2123=2124
<2124=2133,2125
<2125=2131,2126
<2126=2127
<2127=2128
<2128=2130,2129
<2131=2132
<2133=2139,2134
<2134=2135
<2135=2136
<2136=2138,2137
<2139=2140
<2141=2144,2142
<2142=2143
<2144=2145
<2145=2147,2146
<2147=2149,2148
<2150=2164,2151
<2151=2153,2152
<2153=2154
<2154=2162,2155
<2155=2160,2158,2156
<2156=2157
<2158=2159
<2160=2161
<2162=2163
<2164=2165
<2165=2176,2166
<2166=2168,2167
<2168=2172,2169
<2169=2170
<2170=2171
<2172=2173
<2173=2175,2174
<2176=2178,2177
<2178=2182,2179
<2179=2180
<2180=2181
<2182=2183
<2183=2185,2184
<2186=2187
<2187=2191,2188
<2188=2189
<2189=2190
<2191=2192
<2192=2194,2193
<2195=2196
<2196=2198,2197
<2199=2200
<2200=2214,2201
<2201=2212,2210,2206,2202
<2202=2203
<2203=2205,2204
<2206=2207
<2207=2209,2208
<2210=2211
<2212=2213
<2214=2215
<2216=2220,2217
<2217=2219,2218
<2220=2222,2221
<2223=2224
<2224=2232,2225
<2225=2230,2228,2226
<2226=2227
<2228=2229
<2230=2231
<2232=2233
<2234=2235
<2235=2238,2237,2236
<2239=2240
<2240=2250,2241
<2241=2248,2246,2242
<2242=2243
<2243=2245,2244
<2246=2247
<2248=2249
<2250=2251
<2252=2253
<2253=2255,2254
<2256=2257
<2257=2260,2259,2258
<2286=2295,2294,2287
<2287=2291,2288
<2288=2290,2289
<2291=2293,2292
<2295=2349,2345,2298,2296
<2296=2297
<2298=2334,2299
<2299=2327,2310,2300
<2300=2301
<2301=2303,2302
<2303=2309,2304
<2304=2306,2305
<2306=2308,2307
<2310=2311
<2311=2325,2312
<2312=2323,2321,2317,2313
<2313=2314
<2314=2316,2315
<2317=2318
<2318=2320,2319
<2321=2322
<2323=2324
<2325=2326
<2327=2331,2328
<2328=2330,2329
<2331=2333,2332
<2334=2335
<2335=2343,2336
<2336=2341,2339,2337
<2337=2338
<2339=2340
<2341=2342
<2343=2344
<2345=2346
<2346=2348,2347
<2349=2350
<2350=2353,2352,2351
<2371=2383,2382,2372
<2372=2379,2376,2373
<2373=2375,2374
<2376=2378,2377
<2379=2381,2380
<2383=2538,2384
<2384=2534,2524,2385
<2385=2386
<2386=2513,2394,2387
<2387=2388
<2388=2392,2389
<2389=2390
<2390=2391
<2392=2393
<2394=2505,2499,2496,2395
<2395=2492,2396
<2396=2481,2470,2467,2397
<2397=2458,2452,2438,2398
<2398=2429,2399
<2399=2416,2400
<2400=2401
<2401=2405,2402
<2402=2403
<2403=2404
<2405=2406
<2406=2408,2407
<2408=2412,2409
<2409=2410
<2410=2411
<2412=2413
<2413=2415,2414
<2416=2417
<2417=2427,2418
<2418=2425,2423,2421,2419
<2419=2420
<2421=2422
<2423=2424
<2425=2426
<2427=2428
<2429=2430
<2430=2434,2431
<2431=2432
<2432=2433
<2434=2435
<2435=2437,2436
<2438=2439
<2439=2451,2450,2440
<2440=2449,2441
<2441=2447,2442
<2442=2445,2443
<2443=2444
<2445=2446
<2447=2448
<2452=2454,2453
<2454=2455
<2455=2457,2456
<2458=2459
<2459=2466,2465,2460
<2460=2464,2461
<2461=2463,2462
<2467=2469,2468
<2470=2471
<2471=2480,2472
<2472=2476,2473
<2473=2474
<2474=2475
<2476=2477
<2477=2479,2478
<2481=2482
<2482=2491,2483
<2483=2487,2484
<2484=2485
<2485=2486
<2487=2488
<2488=2490,2489
<2492=2493
<2493=2495,2494
<2496=2498,2497
<2499=2500
<2500=2504,2501
<2501=2503,2502
<2505=2506
<2506=2507
<2507=2512,2511,2508
<2508=2510,2509
<2513=2514
<2514=2522,2515
<2515=2520,2518,2516
<2516=2517
<2518=2519
<2520=2521
<2522=2523
<2524=2525
<2525=2526
<2526=2532,2527
<2527=2530,2528
<2528=2529
<2530=2531
<2532=2533
<2534=2535
<2535=2537,2536
<2538=2539
<2539=2551,2550,2540
<2540=2549,2541
<2541=2547,2542
<2542=2545,2543
<2543=2544
<2545=2546
<2547=2548
<2572=2584,2583,2573
<2573=2580,2577,2574
<2574=2576,2575
<2577=2579,2578
<2580=2582,2581
<2584=2789,2585
<2585=2785,2775,2586
<2586=2587
<2587=2768,2733,2727,2714,2595,2588
<2588=2589
<2589=2593,2590
<2590=2591
<2591=2592
<2593=2594
<2595=2706,2700,2697,2596
<2596=2693,2597
<2597=2682,2671,2668,2598
<2598=2659,2653,2639,2599
<2599=2630,2600
<2600=2617,2601
<2601=2602
<2602=2606,2603
<2603=2604
<2604=2605
<2606=2607
<2607=2609,2608
<2609=2613,2610
<2610=2611
<2611=2612
<2613=2614
<2614=2616,2615
<2617=2618
<2618=2628,2619
<2619=2626,2624,2622,2620
<2620=2621
<2622=2623
<2624=2625
<2626=2627
<2628=2629
<2630=2631
<2631=2635,2632
<2632=2633
<2633=2634
<2635=2636
<2636=2638,2637
<2639=2640
<2640=2652,2651,2641
<2641=2650,2642
<2642=2648,2643
<2643=2646,2644
<2644=2645
<2646=2647
<2648=2649
<2653=2655,2654
<2655=2656
<2656=2658,2657
<2659=2660
<2660=2667,2666,2661
<2661=2665,2662
<2662=2664,2663
<2668=2670,2669
<2671=2672
<2672=2681,2673
<2673=2677,2674
<2674=2675
<2675=2676
<2677=2678
<2678=2680,2679
<2682=2683
<2683=2692,2684
<2684=2688,2685
<2685=2686
<2686=2687
<2688=2689
<2689=2691,2690
<2693=2694
<2694=2696,2695
<2697=2699,2698
<2700=2701
<2701=2705,2702
<2702=2704,2703
<2706=2707
<2707=2708
<2708=2713,2712,2709
<2709=2711,2710
<2714=2715
<2715=2725,2716
<2716=2723,2721,2719,2717
<2717=2718
<2719=2720
<2721=2722
<2723=2724
<2725=2726
<2727=2728
<2728=2732,2729
<2729=2731,2730
<2733=2760,2754,2751,2734
<2734=2735
<2735=2736
<2736=2750,2737
<2737=2739,2738
<2739=2740
<2740=2742,2741
<2742=2746,2743
<2743=2744
<2744=2745
<2746=2747
<2747=2749,2748
<2751=2753,2752
<2754=2755
<2755=2759,2756
<2756=2758,2757
<2760=2761
<2761=2762
<2762=2767,2766,2763
<2763=2765,2764
<2768=2769
<2769=2774,2773,2770
<2770=2772,2771
<2775=2776
<2776=2777
<2777=2783,2778
<2778=2781,2779
<2779=2780
<2781=2782
<2783=2784
<2785=2786
<2786=2788,2787
<2789=2790
<2790=2802,2801,2791
<2791=2800,2792
<2792=2798,2793
<2793=2796,2794
<2794=2795
<2796=2797
<2798=2799
<2826=2838,2837,2827
<2827=2834,2831,2828
<2828=2830,2829
<2831=2833,2832
<2834=2836,2835
<2838=2934,2839
<2839=2930,2920,2840
<2840=2841
<2841=2849,2842
<2842=2843
<2843=2847,2844
<2844=2845
<2845=2846
<2847=2848
<2849=2912,2908,2905,2850
<2850=2851
<2851=2895,2891,2888,2852
<2852=2853
<2853=2868,2854
<2854=2855
<2855=2856
<2856=2866,2857
<2857=2864,2862,2860,2858
<2858=2859
<2860=2861
<2862=2863
<2864=2865
<2866=2867
<2868=2869
<2869=2876,2870
<2870=2872,2871
<2872=2873
<2873=2875,2874
<2876=2884,2877
<2877=2878
<2878=2879
<2879=2881,2880
<2881=2883,2882
<2884=2885
<2885=2887,2886
<2888=2890,2889
<2891=2892
<2892=2894,2893
<2895=2896
<2896=2897
<2897=2904,2903,2898
<2898=2902,2899
<2899=2901,2900
<2905=2907,2906
<2908=2909
<2909=2911,2910
<2912=2913
<2913=2914
<2914=2919,2918,2915
<2915=2917,2916
<2920=2921
<2921=2922
<2922=2928,2923
<2923=2926,2924
<2924=2925
<2926=2927
<2928=2929
<2930=2931
<2931=2933,2932
<2934=2935
<2935=2947,2946,2936
<2936=2945,2937
<2937=2943,2938
<2938=2941,2939
<2939=2940
<2941=2942
<2943=2944
<2961=2976,2975,2962
<2962=2972,2969,2966,2963
<2963=2965,2964
<2966=2968,2967
<2969=2971,2970
<2972=2974,2973
<2976=3469,3462,3433,3212,2977
<2977=3204,3200,3197,2978
<2978=3189,3174,3160,3146,3135,3118,3105,3091,3087,2979
<2979=3078,3069,3066,2980
<2980=3057,2981
<2981=3053,3018,2982
<2982=2983
<2983=3004,2984
<2984=2995,2985
<2985=2986
<2986=2987
<2987=2991,2988
<2988=2989
<2989=2990
<2991=2992
<2992=2994,2993
<2995=2996
<2996=3000,2997
<2997=2998
<2998=2999
<3000=3001
<3001=3003,3002
<3004=3005
<3005=3017,3016,3006
<3006=3015,3007
<3007=3013,3008
<3008=3011,3009
<3009=3010
<3011=3012
<3013=3014
<3018=3039,3019
<3019=3030,3020
<3020=3021
<3021=3022
<3022=3026,3023
<3023=3024
<3024=3025
<3026=3027
<3027=3029,3028
<3030=3031
<3031=3035,3032
<3032=3033
<3033=3034
<3035=3036
<3036=3038,3037
<3039=3040
<3040=3052,3051,3041
<3041=3050,3042
<3042=3048,3043
<3043=3046,3044
<3044=3045
<3046=3047
<3048=3049
<3053=3054
<3054=3056,3055
<3057=3058
<3058=3065,3064,3059
<3059=3063,3060
<3060=3062,3061
<3066=3068,3067
<3069=3070
<3070=3077,3071
<3071=3073,3072
<3073=3074
<3074=3076,3075
<3078=3079
<3079=3086,3080
<3080=3082,3081
<3082=3083
<3083=3085,3084
<3087=3088
<3088=3090,3089
<3091=3092
<3092=3104,3103,3093
<3093=3102,3094
<3094=3098,3095
<3095=3096
<3096=3097
<3098=3099
<3099=3101,3100
<3105=3106
<3106=3116,3107
<3107=3114,3112,3110,3108
<3108=3109
<3110=3111
<3112=3113
<3114=3115
<3116=3117
<3118=3121,3119
<3119=3120
<3121=3122
<3122=3130,3123
<3123=3127,3124
<3124=3126,3125
<3127=3129,3128
<3130=3134,3131
<3131=3133,3132
<3135=3136
<3136=3145,3144,3137
<3137=3143,3138
<3138=3140,3139
<3140=3142,3141
<3146=3147
<3147=3159,3158,3148
<3148=3157,3149
<3149=3151,3150
<3151=3152
<3152=3154,3153
<3154=3156,3155
<3160=3161
<3161=3173,3172,3162
<3162=3171,3163
<3163=3165,3164
<3165=3166
<3166=3168,3167
<3168=3170,3169
<3174=3175
<3175=3188,3187,3176
<3176=3186,3177
<3177=3181,3178
<3178=3180,3179
<3181=3185,3182
<3182=3184,3183
<3189=3191,3190
<3191=3192
<3192=3194,3193
<3194=3196,3195
<3197=3199,3198
<3200=3201
<3201=3203,3202
<3204=3205
<3205=3206
<3206=3211,3210,3207
<3207=3209,3208
<3212=3425,3421,3418,3213
<3213=3414,3214
<3214=3403,3392,3389,3215
<3215=3380,3374,3360,3216
<3216=3351,3217
<3217=3337,3328,3311,3294,3289,3270,3258,3230,3224,3218
<3218=3219
<3219=3221,3220
<3221=3223,3222
<3224=3225
<3225=3227,3226
<3227=3229,3228
<3230=3244,3231
<3231=3238,3232
<3232=3233
<3233=3235,3234
<3235=3237,3236
<3238=3239
<3239=3241,3240
<3241=3243,3242
<3244=3245
<3245=3247,3246
<3247=3256,3248
<3248=3249
<3249=3250
<3250=3254,3251
<3251=3252
<3252=3253
<3254=3255
<3256=3257
<3258=3259
<3259=3269,3268,3260
<3260=3267,3261
<3261=3265,3262
<3262=3263
<3263=3264
<3265=3266
<3270=3271
<3271=3287,3272
<3272=3285,3283,3281,3279,3277,3275,3273
<3273=3274
<3275=3276
<3277=3278
<3279=3280
<3281=3282
<3283=3284
<3285=3286
<3287=3288
<3289=3290
<3290=3293,3292,3291
<3294=3295
<3295=3309,3296
<3296=3307,3305,3299,3297
<3297=3298
<3299=3300
<3300=3302,3301
<3302=3304,3303
<3305=3306
<3307=3308
<3309=3310
<3311=3312
<3312=3326,3313
<3313=3324,3322,3316,3314
<3314=3315
<3316=3317
<3317=3319,3318
<3319=3321,3320
<3322=3323
<3324=3325
<3326=3327
<3328=3333,3329
<3329=3332,3331,3330
<3333=3336,3335,3334
<3337=3338
<3338=3350,3349,3339
<3339=3348,3340
<3340=3344,3341
<3341=3342
<3342=3343
<3344=3345
<3345=3347,3346
<3351=3352
<3352=3356,3353
<3353=3354
<3354=3355
<3356=3357
<3357=3359,3358
<3360=3361
<3361=3373,3372,3362
<3362=3371,3363
<3363=3369,3364
<3364=3367,3365
<3365=3366
<3367=3368
<3369=3370
<3374=3376,3375
<3376=3377
<3377=3379,3378
<3380=3381
<3381=3388,3387,3382
<3382=3386,3383
<3383=3385,3384
<3389=3391,3390
<3392=3393
<3393=3402,3394
<3394=3398,3395
<3395=3396
<3396=3397
<3398=3399
<3399=3401,3400
<3403=3404
<3404=3413,3405
<3405=3409,3406
<3406=3407
<3407=3408
<3409=3410
<3410=3412,3411
<3414=3415
<3415=3417,3416
<3418=3420,3419
<3421=3422
<3422=3424,3423
<3425=3426
<3426=3427
<3427=3432,3431,3428
<3428=3430,3429
<3433=3454,3450,3447,3434
<3434=3441,3435
<3435=3436
<3436=3438,3437
<3438=3440,3439
<3441=3442
<3442=3444,3443
<3444=3446,3445
<3447=3449,3448
<3450=3451
<3451=3453,3452
<3454=3455
<3455=3456
<3456=3461,3460,3457
<3457=3459,3458
<3462=3463
<3463=3468,3467,3464
<3464=3466,3465
<3469=3470
<3470=3475,3474,3471
<3471=3473,3472
