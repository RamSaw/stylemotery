>3	FunctionDef	Sim3Tracker 
>4	ParameterList	int w , int h , Eigen 
>5	Parameter	 
>6	Identifier	K
>7	ParameterType	Eigen 
>8	Parameter	 
>9	Identifier	h
>10	ParameterType	int
>11	Parameter	 
>12	Identifier	w
>13	ParameterType	int
>14	CompoundStatement	 
>15	ExpressionStatement	 
>16	AssignmentExpr	pointUsage = 0
>17	PrimaryExpression	0
>18	Identifier	pointUsage
>19	ExpressionStatement	 
>20	AssignmentExpr	lastDepthResidual = lastPhotometricResidual = lastDepthResidualUnweighted = lastPhotometricResidualUnweighted = \
>21	AssignmentExpr	lastPhotometricResidual = lastDepthResidualUnweighted = lastPhotometricResidualUnweighted = lastResidualUnweighted = \
>22	AssignmentExpr	lastDepthResidualUnweighted = lastPhotometricResidualUnweighted = lastResidualUnweighted = 0
>23	AssignmentExpr	lastPhotometricResidualUnweighted = lastResidualUnweighted = 0
>24	AssignmentExpr	lastResidualUnweighted = 0
>25	PrimaryExpression	0
>26	Identifier	lastResidualUnweighted
>27	Identifier	lastPhotometricResidualUnweighted
>28	Identifier	lastDepthResidualUnweighted
>29	Identifier	lastPhotometricResidual
>30	Identifier	lastDepthResidual
>31	ExpressionStatement	 
>32	AssignmentExpr	iterationNumber = 0
>33	PrimaryExpression	0
>34	Identifier	iterationNumber
>35	ExpressionStatement	 
>36	AssignmentExpr	lastResidual = 0
>37	PrimaryExpression	0
>38	Identifier	lastResidual
>39	ExpressionStatement	 
>40	AssignmentExpr	debugImageWeightedResD = cv 
>41	CallExpression	cv 
>42	ArgumentList	height
>43	Argument	CV_8UC3
>44	Identifier	CV_8UC3
>45	Argument	width
>46	Identifier	width
>47	Argument	height
>48	Identifier	height
>49	Callee	cv 
>50	Identifier	cv 
>51	Identifier	debugImageWeightedResD
>52	ExpressionStatement	 
>53	AssignmentExpr	debugImageWeightedResP = cv 
>54	CallExpression	cv 
>55	ArgumentList	height
>56	Argument	CV_8UC3
>57	Identifier	CV_8UC3
>58	Argument	width
>59	Identifier	width
>60	Argument	height
>61	Identifier	height
>62	Callee	cv 
>63	Identifier	cv 
>64	Identifier	debugImageWeightedResP
>65	ExpressionStatement	 
>66	AssignmentExpr	debugImageWeightP = cv 
>67	CallExpression	cv 
>68	ArgumentList	height
>69	Argument	CV_8UC3
>70	Identifier	CV_8UC3
>71	Argument	width
>72	Identifier	width
>73	Argument	height
>74	Identifier	height
>75	Callee	cv 
>76	Identifier	cv 
>77	Identifier	debugImageWeightP
>78	ExpressionStatement	 
>79	AssignmentExpr	debugImageWeightD = cv 
>80	CallExpression	cv 
>81	ArgumentList	height
>82	Argument	CV_8UC3
>83	Identifier	CV_8UC3
>84	Argument	width
>85	Identifier	width
>86	Argument	height
>87	Identifier	height
>88	Callee	cv 
>89	Identifier	cv 
>90	Identifier	debugImageWeightD
>91	ExpressionStatement	 
>92	AssignmentExpr	debugImageHuberWeight = cv 
>93	CallExpression	cv 
>94	ArgumentList	height
>95	Argument	CV_8UC3
>96	Identifier	CV_8UC3
>97	Argument	width
>98	Identifier	width
>99	Argument	height
>100	Identifier	height
>101	Callee	cv 
>102	Identifier	cv 
>103	Identifier	debugImageHuberWeight
>104	ExpressionStatement	 
>105	AssignmentExpr	debugImageScaleEstimation = cv 
>106	CallExpression	cv 
>107	ArgumentList	height
>108	Argument	CV_8UC3
>109	Identifier	CV_8UC3
>110	Argument	width
>111	Identifier	width
>112	Argument	height
>113	Identifier	height
>114	Callee	cv 
>115	Identifier	cv 
>116	Identifier	debugImageScaleEstimation
>117	ExpressionStatement	 
>118	AssignmentExpr	debugImageDepthResiduals = cv 
>119	CallExpression	cv 
>120	ArgumentList	height
>121	Argument	CV_8UC3
>122	Identifier	CV_8UC3
>123	Argument	width
>124	Identifier	width
>125	Argument	height
>126	Identifier	height
>127	Callee	cv 
>128	Identifier	cv 
>129	Identifier	debugImageDepthResiduals
>130	ExpressionStatement	 
>131	AssignmentExpr	debugImageExternalWeights = cv 
>132	CallExpression	cv 
>133	ArgumentList	height
>134	Argument	CV_8UC3
>135	Identifier	CV_8UC3
>136	Argument	width
>137	Identifier	width
>138	Argument	height
>139	Identifier	height
>140	Callee	cv 
>141	Identifier	cv 
>142	Identifier	debugImageExternalWeights
>143	ExpressionStatement	 
>144	AssignmentExpr	debugImageOldImageSource = cv 
>145	CallExpression	cv 
>146	ArgumentList	height
>147	Argument	CV_8UC3
>148	Identifier	CV_8UC3
>149	Argument	width
>150	Identifier	width
>151	Argument	height
>152	Identifier	height
>153	Callee	cv 
>154	Identifier	cv 
>155	Identifier	debugImageOldImageSource
>156	ExpressionStatement	 
>157	AssignmentExpr	debugImageOldImageWarped = cv 
>158	CallExpression	cv 
>159	ArgumentList	height
>160	Argument	CV_8UC3
>161	Identifier	CV_8UC3
>162	Argument	width
>163	Identifier	width
>164	Argument	height
>165	Identifier	height
>166	Callee	cv 
>167	Identifier	cv 
>168	Identifier	debugImageOldImageWarped
>169	ExpressionStatement	 
>170	AssignmentExpr	debugImageSecondFrame = cv 
>171	CallExpression	cv 
>172	ArgumentList	height
>173	Argument	CV_8UC3
>174	Identifier	CV_8UC3
>175	Argument	width
>176	Identifier	width
>177	Argument	height
>178	Identifier	height
>179	Callee	cv 
>180	Identifier	cv 
>181	Identifier	debugImageSecondFrame
>182	ExpressionStatement	 
>183	AssignmentExpr	debugImageResiduals = cv 
>184	CallExpression	cv 
>185	ArgumentList	height
>186	Argument	CV_8UC3
>187	Identifier	CV_8UC3
>188	Argument	width
>189	Identifier	width
>190	Argument	height
>191	Identifier	height
>192	Callee	cv 
>193	Identifier	cv 
>194	Identifier	debugImageResiduals
>195	ExpressionStatement	 
>196	AssignmentExpr	debugImageWeights = cv 
>197	CallExpression	cv 
>198	ArgumentList	height
>199	Argument	CV_8UC3
>200	Identifier	CV_8UC3
>201	Argument	width
>202	Identifier	width
>203	Argument	height
>204	Identifier	height
>205	Callee	cv 
>206	Identifier	cv 
>207	Identifier	debugImageWeights
>208	ExpressionStatement	 
>209	AssignmentExpr	buf_warped_size = 0
>210	PrimaryExpression	0
>211	Identifier	buf_warped_size
>212	ExpressionStatement	 
>213	AssignmentExpr	buf_weight_VarD = ( float * ) Eigen 
>214	CastExpression	( float * ) Eigen 
>215	CallExpression	Eigen 
>216	ArgumentList	w * h * sizeof ( float )
>217	Argument	w * h * sizeof ( float )
>218	MultiplicativeExpression	w * h * sizeof ( float )
>219	MultiplicativeExpression	h * sizeof ( float )
>220	SizeofExpr	sizeof ( float )
>221	SizeofOperand	float
>222	Sizeof	sizeof
>223	Identifier	h
>224	Identifier	w
>225	Callee	Eigen 
>226	Identifier	Eigen 
>227	CastTarget	float *
>228	Identifier	buf_weight_VarD
>229	ExpressionStatement	 
>230	AssignmentExpr	buf_weight_VarP = ( float * ) Eigen 
>231	CastExpression	( float * ) Eigen 
>232	CallExpression	Eigen 
>233	ArgumentList	w * h * sizeof ( float )
>234	Argument	w * h * sizeof ( float )
>235	MultiplicativeExpression	w * h * sizeof ( float )
>236	MultiplicativeExpression	h * sizeof ( float )
>237	SizeofExpr	sizeof ( float )
>238	SizeofOperand	float
>239	Sizeof	sizeof
>240	Identifier	h
>241	Identifier	w
>242	Callee	Eigen 
>243	Identifier	Eigen 
>244	CastTarget	float *
>245	Identifier	buf_weight_VarP
>246	ExpressionStatement	 
>247	AssignmentExpr	buf_weight_Huber = ( float * ) Eigen 
>248	CastExpression	( float * ) Eigen 
>249	CallExpression	Eigen 
>250	ArgumentList	w * h * sizeof ( float )
>251	Argument	w * h * sizeof ( float )
>252	MultiplicativeExpression	w * h * sizeof ( float )
>253	MultiplicativeExpression	h * sizeof ( float )
>254	SizeofExpr	sizeof ( float )
>255	SizeofOperand	float
>256	Sizeof	sizeof
>257	Identifier	h
>258	Identifier	w
>259	Callee	Eigen 
>260	Identifier	Eigen 
>261	CastTarget	float *
>262	Identifier	buf_weight_Huber
>263	ExpressionStatement	 
>264	AssignmentExpr	buf_weight_d = ( float * ) Eigen 
>265	CastExpression	( float * ) Eigen 
>266	CallExpression	Eigen 
>267	ArgumentList	w * h * sizeof ( float )
>268	Argument	w * h * sizeof ( float )
>269	MultiplicativeExpression	w * h * sizeof ( float )
>270	MultiplicativeExpression	h * sizeof ( float )
>271	SizeofExpr	sizeof ( float )
>272	SizeofOperand	float
>273	Sizeof	sizeof
>274	Identifier	h
>275	Identifier	w
>276	Callee	Eigen 
>277	Identifier	Eigen 
>278	CastTarget	float *
>279	Identifier	buf_weight_d
>280	ExpressionStatement	 
>281	AssignmentExpr	buf_weight_p = ( float * ) Eigen 
>282	CastExpression	( float * ) Eigen 
>283	CallExpression	Eigen 
>284	ArgumentList	w * h * sizeof ( float )
>285	Argument	w * h * sizeof ( float )
>286	MultiplicativeExpression	w * h * sizeof ( float )
>287	MultiplicativeExpression	h * sizeof ( float )
>288	SizeofExpr	sizeof ( float )
>289	SizeofOperand	float
>290	Sizeof	sizeof
>291	Identifier	h
>292	Identifier	w
>293	Callee	Eigen 
>294	Identifier	Eigen 
>295	CastTarget	float *
>296	Identifier	buf_weight_p
>297	ExpressionStatement	 
>298	AssignmentExpr	buf_warped_idepthVar = ( float * ) Eigen 
>299	CastExpression	( float * ) Eigen 
>300	CallExpression	Eigen 
>301	ArgumentList	w * h * sizeof ( float )
>302	Argument	w * h * sizeof ( float )
>303	MultiplicativeExpression	w * h * sizeof ( float )
>304	MultiplicativeExpression	h * sizeof ( float )
>305	SizeofExpr	sizeof ( float )
>306	SizeofOperand	float
>307	Sizeof	sizeof
>308	Identifier	h
>309	Identifier	w
>310	Callee	Eigen 
>311	Identifier	Eigen 
>312	CastTarget	float *
>313	Identifier	buf_warped_idepthVar
>314	ExpressionStatement	 
>315	AssignmentExpr	buf_idepthVar = ( float * ) Eigen 
>316	CastExpression	( float * ) Eigen 
>317	CallExpression	Eigen 
>318	ArgumentList	w * h * sizeof ( float )
>319	Argument	w * h * sizeof ( float )
>320	MultiplicativeExpression	w * h * sizeof ( float )
>321	MultiplicativeExpression	h * sizeof ( float )
>322	SizeofExpr	sizeof ( float )
>323	SizeofOperand	float
>324	Sizeof	sizeof
>325	Identifier	h
>326	Identifier	w
>327	Callee	Eigen 
>328	Identifier	Eigen 
>329	CastTarget	float *
>330	Identifier	buf_idepthVar
>331	ExpressionStatement	 
>332	AssignmentExpr	buf_residual_d = ( float * ) Eigen 
>333	CastExpression	( float * ) Eigen 
>334	CallExpression	Eigen 
>335	ArgumentList	w * h * sizeof ( float )
>336	Argument	w * h * sizeof ( float )
>337	MultiplicativeExpression	w * h * sizeof ( float )
>338	MultiplicativeExpression	h * sizeof ( float )
>339	SizeofExpr	sizeof ( float )
>340	SizeofOperand	float
>341	Sizeof	sizeof
>342	Identifier	h
>343	Identifier	w
>344	Callee	Eigen 
>345	Identifier	Eigen 
>346	CastTarget	float *
>347	Identifier	buf_residual_d
>348	ExpressionStatement	 
>349	AssignmentExpr	buf_d = ( float * ) Eigen 
>350	CastExpression	( float * ) Eigen 
>351	CallExpression	Eigen 
>352	ArgumentList	w * h * sizeof ( float )
>353	Argument	w * h * sizeof ( float )
>354	MultiplicativeExpression	w * h * sizeof ( float )
>355	MultiplicativeExpression	h * sizeof ( float )
>356	SizeofExpr	sizeof ( float )
>357	SizeofOperand	float
>358	Sizeof	sizeof
>359	Identifier	h
>360	Identifier	w
>361	Callee	Eigen 
>362	Identifier	Eigen 
>363	CastTarget	float *
>364	Identifier	buf_d
>365	ExpressionStatement	 
>366	AssignmentExpr	buf_warped_z = ( float * ) Eigen 
>367	CastExpression	( float * ) Eigen 
>368	CallExpression	Eigen 
>369	ArgumentList	w * h * sizeof ( float )
>370	Argument	w * h * sizeof ( float )
>371	MultiplicativeExpression	w * h * sizeof ( float )
>372	MultiplicativeExpression	h * sizeof ( float )
>373	SizeofExpr	sizeof ( float )
>374	SizeofOperand	float
>375	Sizeof	sizeof
>376	Identifier	h
>377	Identifier	w
>378	Callee	Eigen 
>379	Identifier	Eigen 
>380	CastTarget	float *
>381	Identifier	buf_warped_z
>382	ExpressionStatement	 
>383	AssignmentExpr	buf_warped_y = ( float * ) Eigen 
>384	CastExpression	( float * ) Eigen 
>385	CallExpression	Eigen 
>386	ArgumentList	w * h * sizeof ( float )
>387	Argument	w * h * sizeof ( float )
>388	MultiplicativeExpression	w * h * sizeof ( float )
>389	MultiplicativeExpression	h * sizeof ( float )
>390	SizeofExpr	sizeof ( float )
>391	SizeofOperand	float
>392	Sizeof	sizeof
>393	Identifier	h
>394	Identifier	w
>395	Callee	Eigen 
>396	Identifier	Eigen 
>397	CastTarget	float *
>398	Identifier	buf_warped_y
>399	ExpressionStatement	 
>400	AssignmentExpr	buf_warped_x = ( float * ) Eigen 
>401	CastExpression	( float * ) Eigen 
>402	CallExpression	Eigen 
>403	ArgumentList	w * h * sizeof ( float )
>404	Argument	w * h * sizeof ( float )
>405	MultiplicativeExpression	w * h * sizeof ( float )
>406	MultiplicativeExpression	h * sizeof ( float )
>407	SizeofExpr	sizeof ( float )
>408	SizeofOperand	float
>409	Sizeof	sizeof
>410	Identifier	h
>411	Identifier	w
>412	Callee	Eigen 
>413	Identifier	Eigen 
>414	CastTarget	float *
>415	Identifier	buf_warped_x
>416	ExpressionStatement	 
>417	AssignmentExpr	buf_warped_dy = ( float * ) Eigen 
>418	CastExpression	( float * ) Eigen 
>419	CallExpression	Eigen 
>420	ArgumentList	w * h * sizeof ( float )
>421	Argument	w * h * sizeof ( float )
>422	MultiplicativeExpression	w * h * sizeof ( float )
>423	MultiplicativeExpression	h * sizeof ( float )
>424	SizeofExpr	sizeof ( float )
>425	SizeofOperand	float
>426	Sizeof	sizeof
>427	Identifier	h
>428	Identifier	w
>429	Callee	Eigen 
>430	Identifier	Eigen 
>431	CastTarget	float *
>432	Identifier	buf_warped_dy
>433	ExpressionStatement	 
>434	AssignmentExpr	buf_warped_dx = ( float * ) Eigen 
>435	CastExpression	( float * ) Eigen 
>436	CallExpression	Eigen 
>437	ArgumentList	w * h * sizeof ( float )
>438	Argument	w * h * sizeof ( float )
>439	MultiplicativeExpression	w * h * sizeof ( float )
>440	MultiplicativeExpression	h * sizeof ( float )
>441	SizeofExpr	sizeof ( float )
>442	SizeofOperand	float
>443	Sizeof	sizeof
>444	Identifier	h
>445	Identifier	w
>446	Callee	Eigen 
>447	Identifier	Eigen 
>448	CastTarget	float *
>449	Identifier	buf_warped_dx
>450	ExpressionStatement	 
>451	AssignmentExpr	buf_warped_weights = ( float * ) Eigen 
>452	CastExpression	( float * ) Eigen 
>453	CallExpression	Eigen 
>454	ArgumentList	w * h * sizeof ( float )
>455	Argument	w * h * sizeof ( float )
>456	MultiplicativeExpression	w * h * sizeof ( float )
>457	MultiplicativeExpression	h * sizeof ( float )
>458	SizeofExpr	sizeof ( float )
>459	SizeofOperand	float
>460	Sizeof	sizeof
>461	Identifier	h
>462	Identifier	w
>463	Callee	Eigen 
>464	Identifier	Eigen 
>465	CastTarget	float *
>466	Identifier	buf_warped_weights
>467	ExpressionStatement	 
>468	AssignmentExpr	buf_warped_residual = ( float * ) Eigen 
>469	CastExpression	( float * ) Eigen 
>470	CallExpression	Eigen 
>471	ArgumentList	w * h * sizeof ( float )
>472	Argument	w * h * sizeof ( float )
>473	MultiplicativeExpression	w * h * sizeof ( float )
>474	MultiplicativeExpression	h * sizeof ( float )
>475	SizeofExpr	sizeof ( float )
>476	SizeofOperand	float
>477	Sizeof	sizeof
>478	Identifier	h
>479	Identifier	w
>480	Callee	Eigen 
>481	Identifier	Eigen 
>482	CastTarget	float *
>483	Identifier	buf_warped_residual
>484	ExpressionStatement	 
>485	AssignmentExpr	cyi = KInv ( 1 , 2 )
>486	CallExpression	KInv ( 1 , 2 )
>487	ArgumentList	1
>488	Argument	2
>489	PrimaryExpression	2
>490	Argument	1
>491	PrimaryExpression	1
>492	Callee	KInv
>493	Identifier	KInv
>494	Identifier	cyi
>495	ExpressionStatement	 
>496	AssignmentExpr	cxi = KInv ( 0 , 2 )
>497	CallExpression	KInv ( 0 , 2 )
>498	ArgumentList	0
>499	Argument	2
>500	PrimaryExpression	2
>501	Argument	0
>502	PrimaryExpression	0
>503	Callee	KInv
>504	Identifier	KInv
>505	Identifier	cxi
>506	ExpressionStatement	 
>507	AssignmentExpr	fyi = KInv ( 1 , 1 )
>508	CallExpression	KInv ( 1 , 1 )
>509	ArgumentList	1
>510	Argument	1
>511	PrimaryExpression	1
>512	Argument	1
>513	PrimaryExpression	1
>514	Callee	KInv
>515	Identifier	KInv
>516	Identifier	fyi
>517	ExpressionStatement	 
>518	AssignmentExpr	fxi = KInv ( 0 , 0 )
>519	CallExpression	KInv ( 0 , 0 )
>520	ArgumentList	0
>521	Argument	0
>522	PrimaryExpression	0
>523	Argument	0
>524	PrimaryExpression	0
>525	Callee	KInv
>526	Identifier	KInv
>527	Identifier	fxi
>528	ExpressionStatement	 
>529	AssignmentExpr	KInv = K . inverse ( )
>530	CallExpression	K . inverse ( )
>531	ArgumentList	 
>532	Callee	K . inverse
>533	MemberAccess	K . inverse
>534	Identifier	inverse
>535	Identifier	K
>536	Identifier	KInv
>537	ExpressionStatement	 
>538	AssignmentExpr	settings = DenseDepthTrackerSettings ( )
>539	CallExpression	DenseDepthTrackerSettings ( )
>540	ArgumentList	 
>541	Callee	DenseDepthTrackerSettings
>542	Identifier	DenseDepthTrackerSettings
>543	Identifier	settings
>544	ExpressionStatement	 
>545	AssignmentExpr	cy = K ( 1 , 2 )
>546	CallExpression	K ( 1 , 2 )
>547	ArgumentList	1
>548	Argument	2
>549	PrimaryExpression	2
>550	Argument	1
>551	PrimaryExpression	1
>552	Callee	K
>553	Identifier	K
>554	Identifier	cy
>555	ExpressionStatement	 
>556	AssignmentExpr	cx = K ( 0 , 2 )
>557	CallExpression	K ( 0 , 2 )
>558	ArgumentList	0
>559	Argument	2
>560	PrimaryExpression	2
>561	Argument	0
>562	PrimaryExpression	0
>563	Callee	K
>564	Identifier	K
>565	Identifier	cx
>566	ExpressionStatement	 
>567	AssignmentExpr	fy = K ( 1 , 1 )
>568	CallExpression	K ( 1 , 1 )
>569	ArgumentList	1
>570	Argument	1
>571	PrimaryExpression	1
>572	Argument	1
>573	PrimaryExpression	1
>574	Callee	K
>575	Identifier	K
>576	Identifier	fy
>577	ExpressionStatement	 
>578	AssignmentExpr	fx = K ( 0 , 0 )
>579	CallExpression	K ( 0 , 0 )
>580	ArgumentList	0
>581	Argument	0
>582	PrimaryExpression	0
>583	Argument	0
>584	PrimaryExpression	0
>585	Callee	K
>586	Identifier	K
>587	Identifier	fx
>588	ExpressionStatement	 
>589	AssignmentExpr	this -> K = K
>590	Identifier	K
>591	PtrMemberAccess	this -> K
>592	Identifier	K
>593	Identifier	this
>594	ExpressionStatement	 
>595	AssignmentExpr	height = h
>596	Identifier	h
>597	Identifier	height
>598	ExpressionStatement	 
>599	AssignmentExpr	width = w
>600	Identifier	w
>601	Identifier	width
>666	FunctionDef	Sim3Tracker 
>667	ParameterList	 
>668	CompoundStatement	 
>669	ExpressionStatement	 
>670	CallExpression	Eigen 
>671	ArgumentList	( void * ) buf_weight_VarD
>672	Argument	( void * ) buf_weight_VarD
>673	CastExpression	( void * ) buf_weight_VarD
>674	Identifier	buf_weight_VarD
>675	CastTarget	void *
>676	Callee	Eigen 
>677	Identifier	Eigen 
>678	ExpressionStatement	 
>679	CallExpression	Eigen 
>680	ArgumentList	( void * ) buf_weight_VarP
>681	Argument	( void * ) buf_weight_VarP
>682	CastExpression	( void * ) buf_weight_VarP
>683	Identifier	buf_weight_VarP
>684	CastTarget	void *
>685	Callee	Eigen 
>686	Identifier	Eigen 
>687	ExpressionStatement	 
>688	CallExpression	Eigen 
>689	ArgumentList	( void * ) buf_weight_Huber
>690	Argument	( void * ) buf_weight_Huber
>691	CastExpression	( void * ) buf_weight_Huber
>692	Identifier	buf_weight_Huber
>693	CastTarget	void *
>694	Callee	Eigen 
>695	Identifier	Eigen 
>696	ExpressionStatement	 
>697	CallExpression	Eigen 
>698	ArgumentList	( void * ) buf_weight_d
>699	Argument	( void * ) buf_weight_d
>700	CastExpression	( void * ) buf_weight_d
>701	Identifier	buf_weight_d
>702	CastTarget	void *
>703	Callee	Eigen 
>704	Identifier	Eigen 
>705	ExpressionStatement	 
>706	CallExpression	Eigen 
>707	ArgumentList	( void * ) buf_weight_p
>708	Argument	( void * ) buf_weight_p
>709	CastExpression	( void * ) buf_weight_p
>710	Identifier	buf_weight_p
>711	CastTarget	void *
>712	Callee	Eigen 
>713	Identifier	Eigen 
>714	ExpressionStatement	 
>715	CallExpression	Eigen 
>716	ArgumentList	( void * ) buf_warped_idepthVar
>717	Argument	( void * ) buf_warped_idepthVar
>718	CastExpression	( void * ) buf_warped_idepthVar
>719	Identifier	buf_warped_idepthVar
>720	CastTarget	void *
>721	Callee	Eigen 
>722	Identifier	Eigen 
>723	ExpressionStatement	 
>724	CallExpression	Eigen 
>725	ArgumentList	( void * ) buf_idepthVar
>726	Argument	( void * ) buf_idepthVar
>727	CastExpression	( void * ) buf_idepthVar
>728	Identifier	buf_idepthVar
>729	CastTarget	void *
>730	Callee	Eigen 
>731	Identifier	Eigen 
>732	ExpressionStatement	 
>733	CallExpression	Eigen 
>734	ArgumentList	( void * ) buf_residual_d
>735	Argument	( void * ) buf_residual_d
>736	CastExpression	( void * ) buf_residual_d
>737	Identifier	buf_residual_d
>738	CastTarget	void *
>739	Callee	Eigen 
>740	Identifier	Eigen 
>741	ExpressionStatement	 
>742	CallExpression	Eigen 
>743	ArgumentList	( void * ) buf_d
>744	Argument	( void * ) buf_d
>745	CastExpression	( void * ) buf_d
>746	Identifier	buf_d
>747	CastTarget	void *
>748	Callee	Eigen 
>749	Identifier	Eigen 
>750	ExpressionStatement	 
>751	CallExpression	Eigen 
>752	ArgumentList	( void * ) buf_warped_z
>753	Argument	( void * ) buf_warped_z
>754	CastExpression	( void * ) buf_warped_z
>755	Identifier	buf_warped_z
>756	CastTarget	void *
>757	Callee	Eigen 
>758	Identifier	Eigen 
>759	ExpressionStatement	 
>760	CallExpression	Eigen 
>761	ArgumentList	( void * ) buf_warped_y
>762	Argument	( void * ) buf_warped_y
>763	CastExpression	( void * ) buf_warped_y
>764	Identifier	buf_warped_y
>765	CastTarget	void *
>766	Callee	Eigen 
>767	Identifier	Eigen 
>768	ExpressionStatement	 
>769	CallExpression	Eigen 
>770	ArgumentList	( void * ) buf_warped_x
>771	Argument	( void * ) buf_warped_x
>772	CastExpression	( void * ) buf_warped_x
>773	Identifier	buf_warped_x
>774	CastTarget	void *
>775	Callee	Eigen 
>776	Identifier	Eigen 
>777	ExpressionStatement	 
>778	CallExpression	Eigen 
>779	ArgumentList	( void * ) buf_warped_dy
>780	Argument	( void * ) buf_warped_dy
>781	CastExpression	( void * ) buf_warped_dy
>782	Identifier	buf_warped_dy
>783	CastTarget	void *
>784	Callee	Eigen 
>785	Identifier	Eigen 
>786	ExpressionStatement	 
>787	CallExpression	Eigen 
>788	ArgumentList	( void * ) buf_warped_dx
>789	Argument	( void * ) buf_warped_dx
>790	CastExpression	( void * ) buf_warped_dx
>791	Identifier	buf_warped_dx
>792	CastTarget	void *
>793	Callee	Eigen 
>794	Identifier	Eigen 
>795	ExpressionStatement	 
>796	CallExpression	Eigen 
>797	ArgumentList	( void * ) buf_warped_weights
>798	Argument	( void * ) buf_warped_weights
>799	CastExpression	( void * ) buf_warped_weights
>800	Identifier	buf_warped_weights
>801	CastTarget	void *
>802	Callee	Eigen 
>803	Identifier	Eigen 
>804	ExpressionStatement	 
>805	CallExpression	Eigen 
>806	ArgumentList	( void * ) buf_warped_residual
>807	Argument	( void * ) buf_warped_residual
>808	CastExpression	( void * ) buf_warped_residual
>809	Identifier	buf_warped_residual
>810	CastTarget	void *
>811	Callee	Eigen 
>812	Identifier	Eigen 
>813	ExpressionStatement	 
>814	CallExpression	debugImageWeightedResD . release ( )
>815	ArgumentList	 
>816	Callee	debugImageWeightedResD . release
>817	MemberAccess	debugImageWeightedResD . release
>818	Identifier	release
>819	Identifier	debugImageWeightedResD
>820	ExpressionStatement	 
>821	CallExpression	debugImageWeightedResP . release ( )
>822	ArgumentList	 
>823	Callee	debugImageWeightedResP . release
>824	MemberAccess	debugImageWeightedResP . release
>825	Identifier	release
>826	Identifier	debugImageWeightedResP
>827	ExpressionStatement	 
>828	CallExpression	debugImageWeightP . release ( )
>829	ArgumentList	 
>830	Callee	debugImageWeightP . release
>831	MemberAccess	debugImageWeightP . release
>832	Identifier	release
>833	Identifier	debugImageWeightP
>834	ExpressionStatement	 
>835	CallExpression	debugImageWeightD . release ( )
>836	ArgumentList	 
>837	Callee	debugImageWeightD . release
>838	MemberAccess	debugImageWeightD . release
>839	Identifier	release
>840	Identifier	debugImageWeightD
>841	ExpressionStatement	 
>842	CallExpression	debugImageHuberWeight . release ( )
>843	ArgumentList	 
>844	Callee	debugImageHuberWeight . release
>845	MemberAccess	debugImageHuberWeight . release
>846	Identifier	release
>847	Identifier	debugImageHuberWeight
>848	ExpressionStatement	 
>849	CallExpression	debugImageScaleEstimation . release ( )
>850	ArgumentList	 
>851	Callee	debugImageScaleEstimation . release
>852	MemberAccess	debugImageScaleEstimation . release
>853	Identifier	release
>854	Identifier	debugImageScaleEstimation
>855	ExpressionStatement	 
>856	CallExpression	debugImageDepthResiduals . release ( )
>857	ArgumentList	 
>858	Callee	debugImageDepthResiduals . release
>859	MemberAccess	debugImageDepthResiduals . release
>860	Identifier	release
>861	Identifier	debugImageDepthResiduals
>862	ExpressionStatement	 
>863	CallExpression	debugImageExternalWeights . release ( )
>864	ArgumentList	 
>865	Callee	debugImageExternalWeights . release
>866	MemberAccess	debugImageExternalWeights . release
>867	Identifier	release
>868	Identifier	debugImageExternalWeights
>869	ExpressionStatement	 
>870	CallExpression	debugImageOldImageWarped . release ( )
>871	ArgumentList	 
>872	Callee	debugImageOldImageWarped . release
>873	MemberAccess	debugImageOldImageWarped . release
>874	Identifier	release
>875	Identifier	debugImageOldImageWarped
>876	ExpressionStatement	 
>877	CallExpression	debugImageOldImageSource . release ( )
>878	ArgumentList	 
>879	Callee	debugImageOldImageSource . release
>880	MemberAccess	debugImageOldImageSource . release
>881	Identifier	release
>882	Identifier	debugImageOldImageSource
>883	ExpressionStatement	 
>884	CallExpression	debugImageSecondFrame . release ( )
>885	ArgumentList	 
>886	Callee	debugImageSecondFrame . release
>887	MemberAccess	debugImageSecondFrame . release
>888	Identifier	release
>889	Identifier	debugImageSecondFrame
>890	ExpressionStatement	 
>891	CallExpression	debugImageWeights . release ( )
>892	ArgumentList	 
>893	Callee	debugImageWeights . release
>894	MemberAccess	debugImageWeights . release
>895	Identifier	release
>896	Identifier	debugImageWeights
>897	ExpressionStatement	 
>898	CallExpression	debugImageResiduals . release ( )
>899	ArgumentList	 
>900	Callee	debugImageResiduals . release
>901	MemberAccess	debugImageResiduals . release
>902	Identifier	release
>903	Identifier	debugImageResiduals
>936	FunctionDef	Sim3Tracker 
>937	ParameterList	TrackingReference * reference , Frame * frame , const Sim3 & frameToReference_initialEstimate , int startLevel , \
>938	Parameter	 
>939	Identifier	finalLevel
>940	ParameterType	int
>941	Parameter	 
>942	Identifier	startLevel
>943	ParameterType	int
>944	Parameter	 
>945	Identifier	frameToReference_initialEstimate
>946	ParameterType	const Sim3 &
>947	Parameter	 
>948	Identifier	frame
>949	ParameterType	Frame *
>950	Parameter	 
>951	Identifier	reference
>952	ParameterType	TrackingReference *
>953	ReturnType	Sim3
>954	CompoundStatement	 
>955	ReturnStatement	 
>956	CallExpression	referenceToFrame . inverse ( )
>957	ArgumentList	 
>958	Callee	referenceToFrame . inverse
>959	MemberAccess	referenceToFrame . inverse
>960	Identifier	inverse
>961	Identifier	referenceToFrame
>962	ExpressionStatement	 
>963	AssignmentExpr	lastPhotometricResidual = finalResidual . meanP
>964	MemberAccess	finalResidual . meanP
>965	Identifier	meanP
>966	Identifier	finalResidual
>967	Identifier	lastPhotometricResidual
>968	ExpressionStatement	 
>969	AssignmentExpr	lastDepthResidual = finalResidual . meanD
>970	MemberAccess	finalResidual . meanD
>971	Identifier	meanD
>972	Identifier	finalResidual
>973	Identifier	lastDepthResidual
>974	ExpressionStatement	 
>975	AssignmentExpr	lastResidual = finalResidual . mean
>976	MemberAccess	finalResidual . mean
>977	Identifier	mean
>978	Identifier	finalResidual
>979	Identifier	lastResidual
>980	IfStatement	if ( referenceToFrame . scale ( ) <= 0 )
>981	CompoundStatement	 
>982	ReturnStatement	 
>983	CallExpression	Sim3 ( )
>984	ArgumentList	 
>985	Callee	Sim3
>986	Identifier	Sim3
>987	ExpressionStatement	 
>988	AssignmentExpr	diverged = true
>989	Identifier	true
>990	Identifier	diverged
>991	Condition	 
>992	RelationalExpression	referenceToFrame . scale ( ) <= 0
>993	PrimaryExpression	0
>994	CallExpression	referenceToFrame . scale ( )
>995	ArgumentList	 
>996	Callee	referenceToFrame . scale
>997	MemberAccess	referenceToFrame . scale
>998	Identifier	scale
>999	Identifier	referenceToFrame
>1000	ExpressionStatement	 
>1001	AssignmentExpr	lastSim3Hessian = ls7 . A
>1002	MemberAccess	ls7 . A
>1003	Identifier	A
>1004	Identifier	ls7
>1005	Identifier	lastSim3Hessian
>1006	IfStatement	if ( ! warp_update_up_to_date )
>1007	CompoundStatement	 
>1008	ExpressionStatement	 
>1009	CallExpression	callOptimized ( calcSim3LGS , ( ls7 ) )
>1010	ArgumentList	calcSim3LGS
>1011	Argument	ls7
>1012	Identifier	ls7
>1013	Argument	calcSim3LGS
>1014	Identifier	calcSim3LGS
>1015	Callee	callOptimized
>1016	Identifier	callOptimized
>1017	ExpressionStatement	 
>1018	AssignmentExpr	finalResidual = callOptimized ( calcSim3WeightsAndResidual , ( referenceToFrame ) )
>1019	CallExpression	callOptimized ( calcSim3WeightsAndResidual , ( referenceToFrame ) )
>1020	ArgumentList	calcSim3WeightsAndResidual
>1021	Argument	referenceToFrame
>1022	Identifier	referenceToFrame
>1023	Argument	calcSim3WeightsAndResidual
>1024	Identifier	calcSim3WeightsAndResidual
>1025	Callee	callOptimized
>1026	Identifier	callOptimized
>1027	Identifier	finalResidual
>1028	ExpressionStatement	 
>1029	CallExpression	callOptimized ( calcSim3Buffers , ( reference , frame , referenceToFrame , finalLevel ) )
>1030	ArgumentList	calcSim3Buffers
>1031	Argument	reference , frame , referenceToFrame , finalLevel
>1032	Expression	reference , frame , referenceToFrame , finalLevel
>1033	Expression	frame , referenceToFrame , finalLevel
>1034	Expression	referenceToFrame , finalLevel
>1035	Identifier	finalLevel
>1036	Identifier	referenceToFrame
>1037	Identifier	frame
>1038	Identifier	reference
>1039	Argument	calcSim3Buffers
>1040	Identifier	calcSim3Buffers
>1041	Callee	callOptimized
>1042	Identifier	callOptimized
>1043	ExpressionStatement	 
>1044	CallExpression	reference -> makePointCloud ( finalLevel )
>1045	ArgumentList	finalLevel
>1046	Argument	finalLevel
>1047	Identifier	finalLevel
>1048	Callee	reference -> makePointCloud
>1049	PtrMemberAccess	reference -> makePointCloud
>1050	Identifier	makePointCloud
>1051	Identifier	reference
>1052	Condition	 
>1053	UnaryOp	! warp_update_up_to_date
>1054	Identifier	warp_update_up_to_date
>1055	UnaryOperator	!
>1056	IfStatement	if ( enablePrintDebugInfo && printTrackingIterationInfo )
>1057	CompoundStatement	 
>1058	ExpressionStatement	 
>1059	CallExpression	printf ( \"final res mean
>1060	ArgumentList	\"final res mean
>1061	Argument	finalResidual . meanP
>1062	MemberAccess	finalResidual . meanP
>1063	Identifier	meanP
>1064	Identifier	finalResidual
>1065	Argument	finalResidual . meanD
>1066	MemberAccess	finalResidual . meanD
>1067	Identifier	meanD
>1068	Identifier	finalResidual
>1069	Argument	finalResidual . mean
>1070	MemberAccess	finalResidual . mean
>1071	Identifier	mean
>1072	Identifier	finalResidual
>1073	Argument	\"final res mean
>1074	PrimaryExpression	\"final res mean
>1075	Callee	printf
>1076	Identifier	printf
>1077	ExpressionStatement	 
>1078	CallExpression	printf ( \"pNew = %.5f %.5f %.5f %.5f %.5f %.5f %.5f\n\" , referenceToFrame . log ( ) [ 0 ] , referenceToFrame . log ( ) [ \
>1079	ArgumentList	\"pNew = %.5f %.5f %.5f %.5f %.5f %.5f %.5f\n\"
>1080	Argument	referenceToFrame . log ( ) [ 6 ]
>1081	ArrayIndexing	referenceToFrame . log ( ) [ 6 ]
>1082	PrimaryExpression	6
>1083	CallExpression	referenceToFrame . log ( )
>1084	ArgumentList	 
>1085	Callee	referenceToFrame . log
>1086	MemberAccess	referenceToFrame . log
>1087	Identifier	log
>1088	Identifier	referenceToFrame
>1089	Argument	referenceToFrame . log ( ) [ 5 ]
>1090	ArrayIndexing	referenceToFrame . log ( ) [ 5 ]
>1091	PrimaryExpression	5
>1092	CallExpression	referenceToFrame . log ( )
>1093	ArgumentList	 
>1094	Callee	referenceToFrame . log
>1095	MemberAccess	referenceToFrame . log
>1096	Identifier	log
>1097	Identifier	referenceToFrame
>1098	Argument	referenceToFrame . log ( ) [ 4 ]
>1099	ArrayIndexing	referenceToFrame . log ( ) [ 4 ]
>1100	PrimaryExpression	4
>1101	CallExpression	referenceToFrame . log ( )
>1102	ArgumentList	 
>1103	Callee	referenceToFrame . log
>1104	MemberAccess	referenceToFrame . log
>1105	Identifier	log
>1106	Identifier	referenceToFrame
>1107	Argument	referenceToFrame . log ( ) [ 3 ]
>1108	ArrayIndexing	referenceToFrame . log ( ) [ 3 ]
>1109	PrimaryExpression	3
>1110	CallExpression	referenceToFrame . log ( )
>1111	ArgumentList	 
>1112	Callee	referenceToFrame . log
>1113	MemberAccess	referenceToFrame . log
>1114	Identifier	log
>1115	Identifier	referenceToFrame
>1116	Argument	referenceToFrame . log ( ) [ 2 ]
>1117	ArrayIndexing	referenceToFrame . log ( ) [ 2 ]
>1118	PrimaryExpression	2
>1119	CallExpression	referenceToFrame . log ( )
>1120	ArgumentList	 
>1121	Callee	referenceToFrame . log
>1122	MemberAccess	referenceToFrame . log
>1123	Identifier	log
>1124	Identifier	referenceToFrame
>1125	Argument	referenceToFrame . log ( ) [ 1 ]
>1126	ArrayIndexing	referenceToFrame . log ( ) [ 1 ]
>1127	PrimaryExpression	1
>1128	CallExpression	referenceToFrame . log ( )
>1129	ArgumentList	 
>1130	Callee	referenceToFrame . log
>1131	MemberAccess	referenceToFrame . log
>1132	Identifier	log
>1133	Identifier	referenceToFrame
>1134	Argument	referenceToFrame . log ( ) [ 0 ]
>1135	ArrayIndexing	referenceToFrame . log ( ) [ 0 ]
>1136	PrimaryExpression	0
>1137	CallExpression	referenceToFrame . log ( )
>1138	ArgumentList	 
>1139	Callee	referenceToFrame . log
>1140	MemberAccess	referenceToFrame . log
>1141	Identifier	log
>1142	Identifier	referenceToFrame
>1143	Argument	\"pNew = %.5f %.5f %.5f %.5f %.5f %.5f %.5f\n\"
>1144	PrimaryExpression	\"pNew = %.5f %.5f %.5f %.5f %.5f %.5f %.5f\n\"
>1145	Callee	printf
>1146	Identifier	printf
>1147	ExpressionStatement	 
>1148	CallExpression	printf ( \"pOld = %.5f %.5f %.5f %.5f %.5f %.5f %.5f\n\" , frameToReference_initialEstimate . inverse ( ) . log ( ) [ \
>1149	ArgumentList	\"pOld = %.5f %.5f %.5f %.5f %.5f %.5f %.5f\n\"
>1150	Argument	frameToReference_initialEstimate . inverse ( ) . log ( ) [ 6 ]
>1151	ArrayIndexing	frameToReference_initialEstimate . inverse ( ) . log ( ) [ 6 ]
>1152	PrimaryExpression	6
>1153	CallExpression	frameToReference_initialEstimate . inverse ( ) . log ( )
>1154	ArgumentList	 
>1155	Callee	frameToReference_initialEstimate . inverse ( ) . log
>1156	MemberAccess	frameToReference_initialEstimate . inverse ( ) . log
>1157	Identifier	log
>1158	CallExpression	frameToReference_initialEstimate . inverse ( )
>1159	ArgumentList	 
>1160	Callee	frameToReference_initialEstimate . inverse
>1161	MemberAccess	frameToReference_initialEstimate . inverse
>1162	Identifier	inverse
>1163	Identifier	frameToReference_initialEstimate
>1164	Argument	frameToReference_initialEstimate . inverse ( ) . log ( ) [ 5 ]
>1165	ArrayIndexing	frameToReference_initialEstimate . inverse ( ) . log ( ) [ 5 ]
>1166	PrimaryExpression	5
>1167	CallExpression	frameToReference_initialEstimate . inverse ( ) . log ( )
>1168	ArgumentList	 
>1169	Callee	frameToReference_initialEstimate . inverse ( ) . log
>1170	MemberAccess	frameToReference_initialEstimate . inverse ( ) . log
>1171	Identifier	log
>1172	CallExpression	frameToReference_initialEstimate . inverse ( )
>1173	ArgumentList	 
>1174	Callee	frameToReference_initialEstimate . inverse
>1175	MemberAccess	frameToReference_initialEstimate . inverse
>1176	Identifier	inverse
>1177	Identifier	frameToReference_initialEstimate
>1178	Argument	frameToReference_initialEstimate . inverse ( ) . log ( ) [ 4 ]
>1179	ArrayIndexing	frameToReference_initialEstimate . inverse ( ) . log ( ) [ 4 ]
>1180	PrimaryExpression	4
>1181	CallExpression	frameToReference_initialEstimate . inverse ( ) . log ( )
>1182	ArgumentList	 
>1183	Callee	frameToReference_initialEstimate . inverse ( ) . log
>1184	MemberAccess	frameToReference_initialEstimate . inverse ( ) . log
>1185	Identifier	log
>1186	CallExpression	frameToReference_initialEstimate . inverse ( )
>1187	ArgumentList	 
>1188	Callee	frameToReference_initialEstimate . inverse
>1189	MemberAccess	frameToReference_initialEstimate . inverse
>1190	Identifier	inverse
>1191	Identifier	frameToReference_initialEstimate
>1192	Argument	frameToReference_initialEstimate . inverse ( ) . log ( ) [ 3 ]
>1193	ArrayIndexing	frameToReference_initialEstimate . inverse ( ) . log ( ) [ 3 ]
>1194	PrimaryExpression	3
>1195	CallExpression	frameToReference_initialEstimate . inverse ( ) . log ( )
>1196	ArgumentList	 
>1197	Callee	frameToReference_initialEstimate . inverse ( ) . log
>1198	MemberAccess	frameToReference_initialEstimate . inverse ( ) . log
>1199	Identifier	log
>1200	CallExpression	frameToReference_initialEstimate . inverse ( )
>1201	ArgumentList	 
>1202	Callee	frameToReference_initialEstimate . inverse
>1203	MemberAccess	frameToReference_initialEstimate . inverse
>1204	Identifier	inverse
>1205	Identifier	frameToReference_initialEstimate
>1206	Argument	frameToReference_initialEstimate . inverse ( ) . log ( ) [ 2 ]
>1207	ArrayIndexing	frameToReference_initialEstimate . inverse ( ) . log ( ) [ 2 ]
>1208	PrimaryExpression	2
>1209	CallExpression	frameToReference_initialEstimate . inverse ( ) . log ( )
>1210	ArgumentList	 
>1211	Callee	frameToReference_initialEstimate . inverse ( ) . log
>1212	MemberAccess	frameToReference_initialEstimate . inverse ( ) . log
>1213	Identifier	log
>1214	CallExpression	frameToReference_initialEstimate . inverse ( )
>1215	ArgumentList	 
>1216	Callee	frameToReference_initialEstimate . inverse
>1217	MemberAccess	frameToReference_initialEstimate . inverse
>1218	Identifier	inverse
>1219	Identifier	frameToReference_initialEstimate
>1220	Argument	frameToReference_initialEstimate . inverse ( ) . log ( ) [ 1 ]
>1221	ArrayIndexing	frameToReference_initialEstimate . inverse ( ) . log ( ) [ 1 ]
>1222	PrimaryExpression	1
>1223	CallExpression	frameToReference_initialEstimate . inverse ( ) . log ( )
>1224	ArgumentList	 
>1225	Callee	frameToReference_initialEstimate . inverse ( ) . log
>1226	MemberAccess	frameToReference_initialEstimate . inverse ( ) . log
>1227	Identifier	log
>1228	CallExpression	frameToReference_initialEstimate . inverse ( )
>1229	ArgumentList	 
>1230	Callee	frameToReference_initialEstimate . inverse
>1231	MemberAccess	frameToReference_initialEstimate . inverse
>1232	Identifier	inverse
>1233	Identifier	frameToReference_initialEstimate
>1234	Argument	frameToReference_initialEstimate . inverse ( ) . log ( ) [ 0 ]
>1235	ArrayIndexing	frameToReference_initialEstimate . inverse ( ) . log ( ) [ 0 ]
>1236	PrimaryExpression	0
>1237	CallExpression	frameToReference_initialEstimate . inverse ( ) . log ( )
>1238	ArgumentList	 
>1239	Callee	frameToReference_initialEstimate . inverse ( ) . log
>1240	MemberAccess	frameToReference_initialEstimate . inverse ( ) . log
>1241	Identifier	log
>1242	CallExpression	frameToReference_initialEstimate . inverse ( )
>1243	ArgumentList	 
>1244	Callee	frameToReference_initialEstimate . inverse
>1245	MemberAccess	frameToReference_initialEstimate . inverse
>1246	Identifier	inverse
>1247	Identifier	frameToReference_initialEstimate
>1248	Argument	\"pOld = %.5f %.5f %.5f %.5f %.5f %.5f %.5f\n\"
>1249	PrimaryExpression	\"pOld = %.5f %.5f %.5f %.5f %.5f %.5f %.5f\n\"
>1250	Callee	printf
>1251	Identifier	printf
>1252	ExpressionStatement	 
>1253	CallExpression	printf ( \"\n\" )
>1254	ArgumentList	\"\n\"
>1255	Argument	\"\n\"
>1256	PrimaryExpression	\"\n\"
>1257	Callee	printf
>1258	Identifier	printf
>1259	ForStatement	for ( int lvl = PYRAMID_LEVELS - 1 ; lvl >= 0 ; lvl -- )
>1260	CompoundStatement	 
>1261	ExpressionStatement	 
>1262	CallExpression	printf ( \"lvl %d
>1263	ArgumentList	\"lvl %d
>1264	Argument	numCalcWarpUpdateCalls [ lvl ]
>1265	ArrayIndexing	numCalcWarpUpdateCalls [ lvl ]
>1266	Identifier	lvl
>1267	Identifier	numCalcWarpUpdateCalls
>1268	Argument	numCalcResidualCalls [ lvl ]
>1269	ArrayIndexing	numCalcResidualCalls [ lvl ]
>1270	Identifier	lvl
>1271	Identifier	numCalcResidualCalls
>1272	Argument	lvl
>1273	Identifier	lvl
>1274	Argument	\"lvl %d
>1275	PrimaryExpression	\"lvl %d
>1276	Callee	printf
>1277	Identifier	printf
>1278	IncDecOp	 
>1279	IncDec	--
>1280	Identifier	lvl
>1281	Condition	 
>1282	RelationalExpression	lvl >= 0
>1283	PrimaryExpression	0
>1284	Identifier	lvl
>1285	ForInit	 
>1286	IdentifierDeclStatement	int lvl = PYRAMID_LEVELS - 1 ;
>1287	IdentifierDecl	lvl = PYRAMID_LEVELS - 1
>1288	AssignmentExpr	lvl = PYRAMID_LEVELS - 1
>1289	AdditiveExpression	PYRAMID_LEVELS - 1
>1290	PrimaryExpression	1
>1291	Identifier	PYRAMID_LEVELS
>1292	Identifier	lvl
>1293	Identifier	lvl
>1294	IdentifierDeclType	int
>1295	ExpressionStatement	 
>1296	CallExpression	printf ( \"Tracking
>1297	ArgumentList	\"Tracking
>1298	Argument	\"Tracking
>1299	PrimaryExpression	\"Tracking
>1300	Callee	printf
>1301	Identifier	printf
>1302	Condition	 
>1303	AndExpression	enablePrintDebugInfo && printTrackingIterationInfo
>1304	Identifier	printTrackingIterationInfo
>1305	Identifier	enablePrintDebugInfo
>1306	ForStatement	for ( int lvl = startLevel ; lvl >= finalLevel ; lvl -- )
>1307	CompoundStatement	 
>1308	ForStatement	for ( int iteration = 0 ; iteration < settings . maxItsPerLvl [ lvl ] ; iteration ++ )
>1309	CompoundStatement	 
>1310	WhileStatement	while ( true )
>1311	CompoundStatement	 
>1312	IfStatement	if ( error . mean < lastErr . mean )
>1313	ElseStatement	else
>1314	CompoundStatement	 
>1315	IfStatement	if ( LM_lambda == 0 )
>1316	ElseStatement	else
>1317	ExpressionStatement	 
>1318	AssignmentExpr	LM_lambda *= std 
>1319	CallExpression	std 
>1320	ArgumentList	settings . lambdaFailFac
>1321	Argument	incTry
>1322	Identifier	incTry
>1323	Argument	settings . lambdaFailFac
>1324	MemberAccess	settings . lambdaFailFac
>1325	Identifier	lambdaFailFac
>1326	Identifier	settings
>1327	Callee	std 
>1328	Identifier	std 
>1329	Identifier	LM_lambda
>1330	ExpressionStatement	 
>1331	AssignmentExpr	LM_lambda = 0.2
>1332	PrimaryExpression	0.2
>1333	Identifier	LM_lambda
>1334	Condition	 
>1335	EqualityExpression	LM_lambda == 0
>1336	PrimaryExpression	0
>1337	Identifier	LM_lambda
>1338	IfStatement	if ( ! ( inc . dot ( inc ) > settings . stepSizeMin [ lvl ] ) )
>1339	CompoundStatement	 
>1340	BreakStatement	 
>1341	ExpressionStatement	 
>1342	AssignmentExpr	iteration = settings . maxItsPerLvl [ lvl ]
>1343	ArrayIndexing	settings . maxItsPerLvl [ lvl ]
>1344	Identifier	lvl
>1345	MemberAccess	settings . maxItsPerLvl
>1346	Identifier	maxItsPerLvl
>1347	Identifier	settings
>1348	Identifier	iteration
>1349	IfStatement	if ( enablePrintDebugInfo && printTrackingIterationInfo )
>1350	CompoundStatement	 
>1351	ExpressionStatement	 
>1352	CallExpression	printf ( \"(%d-%d)
>1353	ArgumentList	\"(%d-%d)
>1354	Argument	iteration
>1355	Identifier	iteration
>1356	Argument	lvl
>1357	Identifier	lvl
>1358	Argument	\"(%d-%d)
>1359	PrimaryExpression	\"(%d-%d)
>1360	Callee	printf
>1361	Identifier	printf
>1362	Condition	 
>1363	AndExpression	enablePrintDebugInfo && printTrackingIterationInfo
>1364	Identifier	printTrackingIterationInfo
>1365	Identifier	enablePrintDebugInfo
>1366	Condition	 
>1367	UnaryOp	! ( inc . dot ( inc ) > settings . stepSizeMin [ lvl ] )
>1368	RelationalExpression	inc . dot ( inc ) > settings . stepSizeMin [ lvl ]
>1369	ArrayIndexing	settings . stepSizeMin [ lvl ]
>1370	Identifier	lvl
>1371	MemberAccess	settings . stepSizeMin
>1372	Identifier	stepSizeMin
>1373	Identifier	settings
>1374	CallExpression	inc . dot ( inc )
>1375	ArgumentList	inc
>1376	Argument	inc
>1377	Identifier	inc
>1378	Callee	inc . dot
>1379	MemberAccess	inc . dot
>1380	Identifier	dot
>1381	Identifier	inc
>1382	UnaryOperator	!
>1383	IfStatement	if ( enablePrintDebugInfo && printTrackingIterationInfo )
>1384	CompoundStatement	 
>1385	ExpressionStatement	 
>1386	CallExpression	printf ( \"(%d-%d)
>1387	ArgumentList	\"(%d-%d)
>1388	Argument	error . mean
>1389	MemberAccess	error . mean
>1390	Identifier	mean
>1391	Identifier	error
>1392	Argument	lastErr . mean
>1393	MemberAccess	lastErr . mean
>1394	Identifier	mean
>1395	Identifier	lastErr
>1396	Argument	LM_lambda
>1397	Identifier	LM_lambda
>1398	Argument	sqrt ( inc . dot ( inc ) )
>1399	CallExpression	sqrt ( inc . dot ( inc ) )
>1400	ArgumentList	inc . dot ( inc )
>1401	Argument	inc . dot ( inc )
>1402	CallExpression	inc . dot ( inc )
>1403	ArgumentList	inc
>1404	Argument	inc
>1405	Identifier	inc
>1406	Callee	inc . dot
>1407	MemberAccess	inc . dot
>1408	Identifier	dot
>1409	Identifier	inc
>1410	Callee	sqrt
>1411	Identifier	sqrt
>1412	Argument	iteration
>1413	Identifier	iteration
>1414	Argument	lvl
>1415	Identifier	lvl
>1416	Argument	\"(%d-%d)
>1417	PrimaryExpression	\"(%d-%d)
>1418	Callee	printf
>1419	Identifier	printf
>1420	Condition	 
>1421	AndExpression	enablePrintDebugInfo && printTrackingIterationInfo
>1422	Identifier	printTrackingIterationInfo
>1423	Identifier	enablePrintDebugInfo
>1424	CompoundStatement	 
>1425	BreakStatement	 
>1426	IfStatement	if ( LM_lambda <= 0.2 )
>1427	ElseStatement	else
>1428	ExpressionStatement	 
>1429	AssignmentExpr	LM_lambda *= settings . lambdaSuccessFac
>1430	MemberAccess	settings . lambdaSuccessFac
>1431	Identifier	lambdaSuccessFac
>1432	Identifier	settings
>1433	Identifier	LM_lambda
>1434	ExpressionStatement	 
>1435	AssignmentExpr	LM_lambda = 0
>1436	PrimaryExpression	0
>1437	Identifier	LM_lambda
>1438	Condition	 
>1439	RelationalExpression	LM_lambda <= 0.2
>1440	PrimaryExpression	0.2
>1441	Identifier	LM_lambda
>1442	ExpressionStatement	 
>1443	AssignmentExpr	finalResidual = lastErr = error
>1444	AssignmentExpr	lastErr = error
>1445	Identifier	error
>1446	Identifier	lastErr
>1447	Identifier	finalResidual
>1448	IfStatement	if ( error . mean / lastErr . mean > settings . convergenceEps [ lvl ] )
>1449	CompoundStatement	 
>1450	ExpressionStatement	 
>1451	AssignmentExpr	iteration = settings . maxItsPerLvl [ lvl ]
>1452	ArrayIndexing	settings . maxItsPerLvl [ lvl ]
>1453	Identifier	lvl
>1454	MemberAccess	settings . maxItsPerLvl
>1455	Identifier	maxItsPerLvl
>1456	Identifier	settings
>1457	Identifier	iteration
>1458	IfStatement	if ( enablePrintDebugInfo && printTrackingIterationInfo )
>1459	CompoundStatement	 
>1460	ExpressionStatement	 
>1461	CallExpression	printf ( \"(%d-%d)
>1462	ArgumentList	\"(%d-%d)
>1463	Argument	iteration
>1464	Identifier	iteration
>1465	Argument	lvl
>1466	Identifier	lvl
>1467	Argument	\"(%d-%d)
>1468	PrimaryExpression	\"(%d-%d)
>1469	Callee	printf
>1470	Identifier	printf
>1471	Condition	 
>1472	AndExpression	enablePrintDebugInfo && printTrackingIterationInfo
>1473	Identifier	printTrackingIterationInfo
>1474	Identifier	enablePrintDebugInfo
>1475	Condition	 
>1476	RelationalExpression	error . mean / lastErr . mean > settings . convergenceEps [ lvl ]
>1477	ArrayIndexing	settings . convergenceEps [ lvl ]
>1478	Identifier	lvl
>1479	MemberAccess	settings . convergenceEps
>1480	Identifier	convergenceEps
>1481	Identifier	settings
>1482	MultiplicativeExpression	error . mean / lastErr . mean
>1483	MemberAccess	lastErr . mean
>1484	Identifier	mean
>1485	Identifier	lastErr
>1486	MemberAccess	error . mean
>1487	Identifier	mean
>1488	Identifier	error
>1489	IfStatement	if ( enablePrintDebugInfo && printTrackingIterationInfo )
>1490	CompoundStatement	 
>1491	ExpressionStatement	 
>1492	CallExpression	printf ( \"         p=%.4f %.4f %.4f %.4f %.4f %.4f %.4f\n\" , referenceToFrame . log ( ) [ 0 ] , referenceToFrame \
>1493	ArgumentList	\"         p=%.4f %.4f %.4f %.4f %.4f %.4f %.4f\n\"
>1494	Argument	referenceToFrame . log ( ) [ 6 ]
>1495	ArrayIndexing	referenceToFrame . log ( ) [ 6 ]
>1496	PrimaryExpression	6
>1497	CallExpression	referenceToFrame . log ( )
>1498	ArgumentList	 
>1499	Callee	referenceToFrame . log
>1500	MemberAccess	referenceToFrame . log
>1501	Identifier	log
>1502	Identifier	referenceToFrame
>1503	Argument	referenceToFrame . log ( ) [ 5 ]
>1504	ArrayIndexing	referenceToFrame . log ( ) [ 5 ]
>1505	PrimaryExpression	5
>1506	CallExpression	referenceToFrame . log ( )
>1507	ArgumentList	 
>1508	Callee	referenceToFrame . log
>1509	MemberAccess	referenceToFrame . log
>1510	Identifier	log
>1511	Identifier	referenceToFrame
>1512	Argument	referenceToFrame . log ( ) [ 4 ]
>1513	ArrayIndexing	referenceToFrame . log ( ) [ 4 ]
>1514	PrimaryExpression	4
>1515	CallExpression	referenceToFrame . log ( )
>1516	ArgumentList	 
>1517	Callee	referenceToFrame . log
>1518	MemberAccess	referenceToFrame . log
>1519	Identifier	log
>1520	Identifier	referenceToFrame
>1521	Argument	referenceToFrame . log ( ) [ 3 ]
>1522	ArrayIndexing	referenceToFrame . log ( ) [ 3 ]
>1523	PrimaryExpression	3
>1524	CallExpression	referenceToFrame . log ( )
>1525	ArgumentList	 
>1526	Callee	referenceToFrame . log
>1527	MemberAccess	referenceToFrame . log
>1528	Identifier	log
>1529	Identifier	referenceToFrame
>1530	Argument	referenceToFrame . log ( ) [ 2 ]
>1531	ArrayIndexing	referenceToFrame . log ( ) [ 2 ]
>1532	PrimaryExpression	2
>1533	CallExpression	referenceToFrame . log ( )
>1534	ArgumentList	 
>1535	Callee	referenceToFrame . log
>1536	MemberAccess	referenceToFrame . log
>1537	Identifier	log
>1538	Identifier	referenceToFrame
>1539	Argument	referenceToFrame . log ( ) [ 1 ]
>1540	ArrayIndexing	referenceToFrame . log ( ) [ 1 ]
>1541	PrimaryExpression	1
>1542	CallExpression	referenceToFrame . log ( )
>1543	ArgumentList	 
>1544	Callee	referenceToFrame . log
>1545	MemberAccess	referenceToFrame . log
>1546	Identifier	log
>1547	Identifier	referenceToFrame
>1548	Argument	referenceToFrame . log ( ) [ 0 ]
>1549	ArrayIndexing	referenceToFrame . log ( ) [ 0 ]
>1550	PrimaryExpression	0
>1551	CallExpression	referenceToFrame . log ( )
>1552	ArgumentList	 
>1553	Callee	referenceToFrame . log
>1554	MemberAccess	referenceToFrame . log
>1555	Identifier	log
>1556	Identifier	referenceToFrame
>1557	Argument	\"         p=%.4f %.4f %.4f %.4f %.4f %.4f %.4f\n\"
>1558	PrimaryExpression	\"         p=%.4f %.4f %.4f %.4f %.4f %.4f %.4f\n\"
>1559	Callee	printf
>1560	Identifier	printf
>1561	ExpressionStatement	 
>1562	CallExpression	printf ( \"(%d-%d)
>1563	ArgumentList	\"(%d-%d)
>1564	Argument	error . mean
>1565	MemberAccess	error . mean
>1566	Identifier	mean
>1567	Identifier	error
>1568	Argument	lastErr . mean
>1569	MemberAccess	lastErr . mean
>1570	Identifier	mean
>1571	Identifier	lastErr
>1572	Argument	LM_lambda
>1573	Identifier	LM_lambda
>1574	Argument	sqrt ( inc . dot ( inc ) )
>1575	CallExpression	sqrt ( inc . dot ( inc ) )
>1576	ArgumentList	inc . dot ( inc )
>1577	Argument	inc . dot ( inc )
>1578	CallExpression	inc . dot ( inc )
>1579	ArgumentList	inc
>1580	Argument	inc
>1581	Identifier	inc
>1582	Callee	inc . dot
>1583	MemberAccess	inc . dot
>1584	Identifier	dot
>1585	Identifier	inc
>1586	Callee	sqrt
>1587	Identifier	sqrt
>1588	Argument	iteration
>1589	Identifier	iteration
>1590	Argument	lvl
>1591	Identifier	lvl
>1592	Argument	\"(%d-%d)
>1593	PrimaryExpression	\"(%d-%d)
>1594	Callee	printf
>1595	Identifier	printf
>1596	Condition	 
>1597	AndExpression	enablePrintDebugInfo && printTrackingIterationInfo
>1598	Identifier	printTrackingIterationInfo
>1599	Identifier	enablePrintDebugInfo
>1600	IfStatement	if ( useAffineLightningEstimation )
>1601	CompoundStatement	 
>1602	ExpressionStatement	 
>1603	AssignmentExpr	affineEstimation_b = affineEstimation_b_lastIt
>1604	Identifier	affineEstimation_b_lastIt
>1605	Identifier	affineEstimation_b
>1606	ExpressionStatement	 
>1607	AssignmentExpr	affineEstimation_a = affineEstimation_a_lastIt
>1608	Identifier	affineEstimation_a_lastIt
>1609	Identifier	affineEstimation_a
>1610	Condition	 
>1611	Identifier	useAffineLightningEstimation
>1612	ExpressionStatement	 
>1613	AssignmentExpr	warp_update_up_to_date = false
>1614	Identifier	false
>1615	Identifier	warp_update_up_to_date
>1616	ExpressionStatement	 
>1617	AssignmentExpr	referenceToFrame = new_referenceToFrame
>1618	Identifier	new_referenceToFrame
>1619	Identifier	referenceToFrame
>1620	Condition	 
>1621	RelationalExpression	error . mean < lastErr . mean
>1622	MemberAccess	lastErr . mean
>1623	Identifier	mean
>1624	Identifier	lastErr
>1625	MemberAccess	error . mean
>1626	Identifier	mean
>1627	Identifier	error
>1628	ExpressionStatement	 
>1629	IncDecOp	numCalcResidualCalls [ lvl ] ++
>1630	IncDec	++
>1631	ArrayIndexing	numCalcResidualCalls [ lvl ]
>1632	Identifier	lvl
>1633	Identifier	numCalcResidualCalls
>1634	IfStatement	if ( plotSim3TrackingIterationInfo )
>1635	ExpressionStatement	 
>1636	CallExpression	callOptimized ( calcSim3Buffers , ( reference , frame , new_referenceToFrame , lvl , true ) )
>1637	ArgumentList	calcSim3Buffers
>1638	Argument	reference , frame , new_referenceToFrame , lvl , true
>1639	Expression	reference , frame , new_referenceToFrame , lvl , true
>1640	Expression	frame , new_referenceToFrame , lvl , true
>1641	Expression	new_referenceToFrame , lvl , true
>1642	Expression	lvl , true
>1643	Identifier	true
>1644	Identifier	lvl
>1645	Identifier	new_referenceToFrame
>1646	Identifier	frame
>1647	Identifier	reference
>1648	Argument	calcSim3Buffers
>1649	Identifier	calcSim3Buffers
>1650	Callee	callOptimized
>1651	Identifier	callOptimized
>1652	Condition	 
>1653	Identifier	plotSim3TrackingIterationInfo
>1654	IdentifierDeclStatement	 
>1655	IdentifierDecl	error = callOptimized ( calcSim3WeightsAndResidual , ( new_referenceToFrame ) )
>1656	AssignmentExpr	error = callOptimized ( calcSim3WeightsAndResidual , ( new_referenceToFrame ) )
>1657	CallExpression	callOptimized ( calcSim3WeightsAndResidual , ( new_referenceToFrame ) )
>1658	ArgumentList	calcSim3WeightsAndResidual
>1659	Argument	new_referenceToFrame
>1660	Identifier	new_referenceToFrame
>1661	Argument	calcSim3WeightsAndResidual
>1662	Identifier	calcSim3WeightsAndResidual
>1663	Callee	callOptimized
>1664	Identifier	callOptimized
>1665	Identifier	error
>1666	Identifier	error
>1667	IdentifierDeclType	Sim3ResidualStruct
>1668	IfStatement	if ( buf_warped_size < 0.5 * MIN_GOODPERALL_PIXEL_ABSMIN * ( width >> lvl ) * ( height >> lvl ) || buf_warped_size < \
>1669	CompoundStatement	 
>1670	ReturnStatement	 
>1671	CallExpression	Sim3 ( )
>1672	ArgumentList	 
>1673	Callee	Sim3
>1674	Identifier	Sim3
>1675	ExpressionStatement	 
>1676	AssignmentExpr	diverged = true
>1677	Identifier	true
>1678	Identifier	diverged
>1679	Condition	 
>1680	OrExpression	buf_warped_size < 0.5 * MIN_GOODPERALL_PIXEL_ABSMIN * ( width >> lvl ) * ( height >> lvl ) || buf_warped_\
>1681	RelationalExpression	buf_warped_size < 10
>1682	PrimaryExpression	10
>1683	Identifier	buf_warped_size
>1684	RelationalExpression	buf_warped_size < 0.5 * MIN_GOODPERALL_PIXEL_ABSMIN * ( width >> lvl ) * ( height >> lvl )
>1685	MultiplicativeExpression	0.5 * MIN_GOODPERALL_PIXEL_ABSMIN * ( width >> lvl ) * ( height >> lvl )
>1686	MultiplicativeExpression	MIN_GOODPERALL_PIXEL_ABSMIN * ( width >> lvl ) * ( height >> lvl )
>1687	MultiplicativeExpression	( width >> lvl ) * ( height >> lvl )
>1688	ShiftExpression	height >> lvl
>1689	Identifier	lvl
>1690	Identifier	height
>1691	ShiftExpression	width >> lvl
>1692	Identifier	lvl
>1693	Identifier	width
>1694	Identifier	MIN_GOODPERALL_PIXEL_ABSMIN
>1695	PrimaryExpression	0.5
>1696	Identifier	buf_warped_size
>1697	ExpressionStatement	 
>1698	CallExpression	callOptimized ( calcSim3Buffers , ( reference , frame , new_referenceToFrame , lvl ) )
>1699	ArgumentList	calcSim3Buffers
>1700	Argument	reference , frame , new_referenceToFrame , lvl
>1701	Expression	reference , frame , new_referenceToFrame , lvl
>1702	Expression	frame , new_referenceToFrame , lvl
>1703	Expression	new_referenceToFrame , lvl
>1704	Identifier	lvl
>1705	Identifier	new_referenceToFrame
>1706	Identifier	frame
>1707	Identifier	reference
>1708	Argument	calcSim3Buffers
>1709	Identifier	calcSim3Buffers
>1710	Callee	callOptimized
>1711	Identifier	callOptimized
>1712	ExpressionStatement	 
>1713	UnaryOp	* referenceToFrame
>1714	Identifier	referenceToFrame
>1715	UnaryOperator	*
>1716	Statement	 
>1717	Statement	 
>1718	Statement	 
>1719	Statement	 
>1720	Statement	 
>1721	Statement	 
>1722	Statement	 
>1723	Statement	 
>1724	Statement	 
>1725	Statement	 
>1726	Statement	 
>1727	Statement	 
>1728	Statement	 
>1729	Statement	 
>1730	Statement	 
>1731	Statement	 
>1732	IfStatement	if ( ! ( absInc >= 0 && absInc < 1 ) )
>1733	CompoundStatement	 
>1734	ReturnStatement	 
>1735	CallExpression	Sim3 ( )
>1736	ArgumentList	 
>1737	Callee	Sim3
>1738	Identifier	Sim3
>1739	ExpressionStatement	 
>1740	CallExpression	lastSim3Hessian . setZero ( )
>1741	ArgumentList	 
>1742	Callee	lastSim3Hessian . setZero
>1743	MemberAccess	lastSim3Hessian . setZero
>1744	Identifier	setZero
>1745	Identifier	lastSim3Hessian
>1746	Condition	 
>1747	UnaryOp	! ( absInc >= 0 && absInc < 1 )
>1748	AndExpression	absInc >= 0 && absInc < 1
>1749	RelationalExpression	absInc < 1
>1750	PrimaryExpression	1
>1751	Identifier	absInc
>1752	RelationalExpression	absInc >= 0
>1753	PrimaryExpression	0
>1754	Identifier	absInc
>1755	UnaryOperator	!
>1756	IdentifierDeclStatement	 
>1757	IdentifierDecl	absInc = inc . dot ( inc )
>1758	AssignmentExpr	absInc = inc . dot ( inc )
>1759	CallExpression	inc . dot ( inc )
>1760	ArgumentList	inc
>1761	Argument	inc
>1762	Identifier	inc
>1763	Callee	inc . dot
>1764	MemberAccess	inc . dot
>1765	Identifier	dot
>1766	Identifier	inc
>1767	Identifier	absInc
>1768	Identifier	absInc
>1769	IdentifierDeclType	float
>1770	ExpressionStatement	 
>1771	IncDecOp	incTry ++
>1772	IncDec	++
>1773	Identifier	incTry
>1774	IdentifierDeclStatement	 
>1775	IdentifierDecl	inc = A . ldlt ( ) . solve ( b )
>1776	AssignmentExpr	inc = A . ldlt ( ) . solve ( b )
>1777	CallExpression	A . ldlt ( ) . solve ( b )
>1778	ArgumentList	b
>1779	Argument	b
>1780	Identifier	b
>1781	Callee	A . ldlt ( ) . solve
>1782	MemberAccess	A . ldlt ( ) . solve
>1783	Identifier	solve
>1784	CallExpression	A . ldlt ( )
>1785	ArgumentList	 
>1786	Callee	A . ldlt
>1787	MemberAccess	A . ldlt
>1788	Identifier	ldlt
>1789	Identifier	A
>1790	Identifier	inc
>1791	Identifier	inc
>1792	IdentifierDeclType	Vector7
>1793	ForStatement	for ( int i = 0 ; i < 7 ; i ++ )
>1794	ExpressionStatement	 
>1795	AssignmentExpr	A ( i , i ) *= 1 + LM_lambda
>1796	AdditiveExpression	1 + LM_lambda
>1797	Identifier	LM_lambda
>1798	PrimaryExpression	1
>1799	CallExpression	A ( i , i )
>1800	ArgumentList	i
>1801	Argument	i
>1802	Identifier	i
>1803	Argument	i
>1804	Identifier	i
>1805	Callee	A
>1806	Identifier	A
>1807	IncDecOp	 
>1808	IncDec	++
>1809	Identifier	i
>1810	Condition	 
>1811	RelationalExpression	i < 7
>1812	PrimaryExpression	7
>1813	Identifier	i
>1814	ForInit	 
>1815	IdentifierDeclStatement	int i = 0 ;
>1816	IdentifierDecl	i = 0
>1817	AssignmentExpr	i = 0
>1818	PrimaryExpression	0
>1819	Identifier	i
>1820	Identifier	i
>1821	IdentifierDeclType	int
>1822	IdentifierDeclStatement	 
>1823	IdentifierDecl	A = ls7 . A / ls7 . num_constraints
>1824	AssignmentExpr	A = ls7 . A / ls7 . num_constraints
>1825	MultiplicativeExpression	ls7 . A / ls7 . num_constraints
>1826	MemberAccess	ls7 . num_constraints
>1827	Identifier	num_constraints
>1828	Identifier	ls7
>1829	MemberAccess	ls7 . A
>1830	Identifier	A
>1831	Identifier	ls7
>1832	Identifier	A
>1833	Identifier	A
>1834	IdentifierDeclType	Matrix7x7
>1835	IdentifierDeclStatement	 
>1836	IdentifierDecl	b = - ls7 . b / ls7 . num_constraints
>1837	AssignmentExpr	b = - ls7 . b / ls7 . num_constraints
>1838	MultiplicativeExpression	- ls7 . b / ls7 . num_constraints
>1839	MemberAccess	ls7 . num_constraints
>1840	Identifier	num_constraints
>1841	Identifier	ls7
>1842	UnaryOp	- ls7 . b
>1843	MemberAccess	ls7 . b
>1844	Identifier	b
>1845	Identifier	ls7
>1846	UnaryOperator	-
>1847	Identifier	b
>1848	Identifier	b
>1849	IdentifierDeclType	Vector7
>1850	Condition	 
>1851	Identifier	true
>1852	IdentifierDeclStatement	 
>1853	IdentifierDecl	incTry = 0
>1854	AssignmentExpr	incTry = 0
>1855	PrimaryExpression	0
>1856	Identifier	incTry
>1857	Identifier	incTry
>1858	IdentifierDeclType	int
>1859	ExpressionStatement	 
>1860	AssignmentExpr	iterationNumber = iteration
>1861	Identifier	iteration
>1862	Identifier	iterationNumber
>1863	ExpressionStatement	 
>1864	IncDecOp	numCalcWarpUpdateCalls [ lvl ] ++
>1865	IncDec	++
>1866	ArrayIndexing	numCalcWarpUpdateCalls [ lvl ]
>1867	Identifier	lvl
>1868	Identifier	numCalcWarpUpdateCalls
>1869	ExpressionStatement	 
>1870	AssignmentExpr	warp_update_up_to_date = true
>1871	Identifier	true
>1872	Identifier	warp_update_up_to_date
>1873	ExpressionStatement	 
>1874	CallExpression	callOptimized ( calcSim3LGS , ( ls7 ) )
>1875	ArgumentList	calcSim3LGS
>1876	Argument	ls7
>1877	Identifier	ls7
>1878	Argument	calcSim3LGS
>1879	Identifier	calcSim3LGS
>1880	Callee	callOptimized
>1881	Identifier	callOptimized
>1882	IncDecOp	 
>1883	IncDec	++
>1884	Identifier	iteration
>1885	Condition	 
>1886	RelationalExpression	iteration < settings . maxItsPerLvl [ lvl ]
>1887	ArrayIndexing	settings . maxItsPerLvl [ lvl ]
>1888	Identifier	lvl
>1889	MemberAccess	settings . maxItsPerLvl
>1890	Identifier	maxItsPerLvl
>1891	Identifier	settings
>1892	Identifier	iteration
>1893	ForInit	 
>1894	IdentifierDeclStatement	int iteration = 0 ;
>1895	IdentifierDecl	iteration = 0
>1896	AssignmentExpr	iteration = 0
>1897	PrimaryExpression	0
>1898	Identifier	iteration
>1899	Identifier	iteration
>1900	IdentifierDeclType	int
>1901	ExpressionStatement	 
>1902	AssignmentExpr	warp_update_up_to_date = false
>1903	Identifier	false
>1904	Identifier	warp_update_up_to_date
>1905	IdentifierDeclStatement	 
>1906	IdentifierDecl	LM_lambda = settings . lambdaInitial [ lvl ]
>1907	AssignmentExpr	LM_lambda = settings . lambdaInitial [ lvl ]
>1908	ArrayIndexing	settings . lambdaInitial [ lvl ]
>1909	Identifier	lvl
>1910	MemberAccess	settings . lambdaInitial
>1911	Identifier	lambdaInitial
>1912	Identifier	settings
>1913	Identifier	LM_lambda
>1914	Identifier	LM_lambda
>1915	IdentifierDeclType	float
>1916	IfStatement	if ( useAffineLightningEstimation )
>1917	CompoundStatement	 
>1918	ExpressionStatement	 
>1919	AssignmentExpr	affineEstimation_b = affineEstimation_b_lastIt
>1920	Identifier	affineEstimation_b_lastIt
>1921	Identifier	affineEstimation_b
>1922	ExpressionStatement	 
>1923	AssignmentExpr	affineEstimation_a = affineEstimation_a_lastIt
>1924	Identifier	affineEstimation_a_lastIt
>1925	Identifier	affineEstimation_a
>1926	Condition	 
>1927	Identifier	useAffineLightningEstimation
>1928	ExpressionStatement	 
>1929	IncDecOp	numCalcResidualCalls [ lvl ] ++
>1930	IncDec	++
>1931	ArrayIndexing	numCalcResidualCalls [ lvl ]
>1932	Identifier	lvl
>1933	Identifier	numCalcResidualCalls
>1934	IfStatement	if ( plotSim3TrackingIterationInfo )
>1935	ExpressionStatement	 
>1936	CallExpression	callOptimized ( calcSim3Buffers , ( reference , frame , referenceToFrame , lvl , true ) )
>1937	ArgumentList	calcSim3Buffers
>1938	Argument	reference , frame , referenceToFrame , lvl , true
>1939	Expression	reference , frame , referenceToFrame , lvl , true
>1940	Expression	frame , referenceToFrame , lvl , true
>1941	Expression	referenceToFrame , lvl , true
>1942	Expression	lvl , true
>1943	Identifier	true
>1944	Identifier	lvl
>1945	Identifier	referenceToFrame
>1946	Identifier	frame
>1947	Identifier	reference
>1948	Argument	calcSim3Buffers
>1949	Identifier	calcSim3Buffers
>1950	Callee	callOptimized
>1951	Identifier	callOptimized
>1952	Condition	 
>1953	Identifier	plotSim3TrackingIterationInfo
>1954	IdentifierDeclStatement	 
>1955	IdentifierDecl	lastErr = callOptimized ( calcSim3WeightsAndResidual , ( referenceToFrame ) )
>1956	AssignmentExpr	lastErr = callOptimized ( calcSim3WeightsAndResidual , ( referenceToFrame ) )
>1957	CallExpression	callOptimized ( calcSim3WeightsAndResidual , ( referenceToFrame ) )
>1958	ArgumentList	calcSim3WeightsAndResidual
>1959	Argument	referenceToFrame
>1960	Identifier	referenceToFrame
>1961	Argument	calcSim3WeightsAndResidual
>1962	Identifier	calcSim3WeightsAndResidual
>1963	Callee	callOptimized
>1964	Identifier	callOptimized
>1965	Identifier	lastErr
>1966	Identifier	lastErr
>1967	IdentifierDeclType	Sim3ResidualStruct
>1968	IfStatement	if ( buf_warped_size < 0.5 * MIN_GOODPERALL_PIXEL_ABSMIN * ( width >> lvl ) * ( height >> lvl ) || buf_warped_size < \
>1969	CompoundStatement	 
>1970	ReturnStatement	 
>1971	CallExpression	Sim3 ( )
>1972	ArgumentList	 
>1973	Callee	Sim3
>1974	Identifier	Sim3
>1975	ExpressionStatement	 
>1976	AssignmentExpr	diverged = true
>1977	Identifier	true
>1978	Identifier	diverged
>1979	Condition	 
>1980	OrExpression	buf_warped_size < 0.5 * MIN_GOODPERALL_PIXEL_ABSMIN * ( width >> lvl ) * ( height >> lvl ) || buf_warped_\
>1981	RelationalExpression	buf_warped_size < 10
>1982	PrimaryExpression	10
>1983	Identifier	buf_warped_size
>1984	RelationalExpression	buf_warped_size < 0.5 * MIN_GOODPERALL_PIXEL_ABSMIN * ( width >> lvl ) * ( height >> lvl )
>1985	MultiplicativeExpression	0.5 * MIN_GOODPERALL_PIXEL_ABSMIN * ( width >> lvl ) * ( height >> lvl )
>1986	MultiplicativeExpression	MIN_GOODPERALL_PIXEL_ABSMIN * ( width >> lvl ) * ( height >> lvl )
>1987	MultiplicativeExpression	( width >> lvl ) * ( height >> lvl )
>1988	ShiftExpression	height >> lvl
>1989	Identifier	lvl
>1990	Identifier	height
>1991	ShiftExpression	width >> lvl
>1992	Identifier	lvl
>1993	Identifier	width
>1994	Identifier	MIN_GOODPERALL_PIXEL_ABSMIN
>1995	PrimaryExpression	0.5
>1996	Identifier	buf_warped_size
>1997	ExpressionStatement	 
>1998	CallExpression	callOptimized ( calcSim3Buffers , ( reference , frame , referenceToFrame , lvl ) )
>1999	ArgumentList	calcSim3Buffers
>2000	Argument	reference , frame , referenceToFrame , lvl
>2001	Expression	reference , frame , referenceToFrame , lvl
>2002	Expression	frame , referenceToFrame , lvl
>2003	Expression	referenceToFrame , lvl
>2004	Identifier	lvl
>2005	Identifier	referenceToFrame
>2006	Identifier	frame
>2007	Identifier	reference
>2008	Argument	calcSim3Buffers
>2009	Identifier	calcSim3Buffers
>2010	Callee	callOptimized
>2011	Identifier	callOptimized
>2012	ExpressionStatement	 
>2013	CallExpression	reference -> makePointCloud ( lvl )
>2014	ArgumentList	lvl
>2015	Argument	lvl
>2016	Identifier	lvl
>2017	Callee	reference -> makePointCloud
>2018	PtrMemberAccess	reference -> makePointCloud
>2019	Identifier	makePointCloud
>2020	Identifier	reference
>2021	IfStatement	if ( settings . maxItsPerLvl [ lvl ] == 0 )
>2022	ContinueStatement	 
>2023	Condition	 
>2024	EqualityExpression	settings . maxItsPerLvl [ lvl ] == 0
>2025	PrimaryExpression	0
>2026	ArrayIndexing	settings . maxItsPerLvl [ lvl ]
>2027	Identifier	lvl
>2028	MemberAccess	settings . maxItsPerLvl
>2029	Identifier	maxItsPerLvl
>2030	Identifier	settings
>2031	ExpressionStatement	 
>2032	AssignmentExpr	numCalcWarpUpdateCalls [ lvl ] = 0
>2033	PrimaryExpression	0
>2034	ArrayIndexing	numCalcWarpUpdateCalls [ lvl ]
>2035	Identifier	lvl
>2036	Identifier	numCalcWarpUpdateCalls
>2037	ExpressionStatement	 
>2038	AssignmentExpr	numCalcResidualCalls [ lvl ] = 0
>2039	PrimaryExpression	0
>2040	ArrayIndexing	numCalcResidualCalls [ lvl ]
>2041	Identifier	lvl
>2042	Identifier	numCalcResidualCalls
>2043	IncDecOp	 
>2044	IncDec	--
>2045	Identifier	lvl
>2046	Condition	 
>2047	RelationalExpression	lvl >= finalLevel
>2048	Identifier	finalLevel
>2049	Identifier	lvl
>2050	ForInit	 
>2051	IdentifierDeclStatement	int lvl = startLevel ;
>2052	IdentifierDecl	lvl = startLevel
>2053	AssignmentExpr	lvl = startLevel
>2054	Identifier	startLevel
>2055	Identifier	startLevel
>2056	Identifier	lvl
>2057	IdentifierDeclType	int
>2058	IdentifierDeclStatement	 
>2059	IdentifierDecl	warp_update_up_to_date = false
>2060	AssignmentExpr	warp_update_up_to_date = false
>2061	Identifier	false
>2062	Identifier	false
>2063	Identifier	warp_update_up_to_date
>2064	IdentifierDeclType	bool
>2065	IdentifierDeclStatement	 
>2066	IdentifierDecl	finalResidual
>2067	Identifier	finalResidual
>2068	IdentifierDeclType	Sim3ResidualStruct
>2069	IdentifierDeclStatement	 
>2070	IdentifierDecl	numCalcWarpUpdateCalls [ PYRAMID_LEVELS ]
>2071	Identifier	PYRAMID_LEVELS
>2072	Identifier	numCalcWarpUpdateCalls
>2073	IdentifierDeclType	int [ PYRAMID_LEVELS ]
>2074	IdentifierDeclStatement	 
>2075	IdentifierDecl	numCalcResidualCalls [ PYRAMID_LEVELS ]
>2076	Identifier	PYRAMID_LEVELS
>2077	Identifier	numCalcResidualCalls
>2078	IdentifierDeclType	int [ PYRAMID_LEVELS ]
>2079	IdentifierDeclStatement	 
>2080	IdentifierDecl	ls7
>2081	Identifier	ls7
>2082	IdentifierDeclType	LGS7
>2083	IdentifierDeclStatement	 
>2084	IdentifierDecl	referenceToFrame = frameToReference_initialEstimate . inverse ( )
>2085	AssignmentExpr	referenceToFrame = frameToReference_initialEstimate . inverse ( )
>2086	CallExpression	frameToReference_initialEstimate . inverse ( )
>2087	ArgumentList	 
>2088	Callee	frameToReference_initialEstimate . inverse
>2089	MemberAccess	frameToReference_initialEstimate . inverse
>2090	Identifier	inverse
>2091	Identifier	frameToReference_initialEstimate
>2092	Identifier	referenceToFrame
>2093	Identifier	referenceToFrame
>2094	IdentifierDeclType	Sim3
>2095	ExpressionStatement	 
>2096	AssignmentExpr	affineEstimation_b = 0
>2097	PrimaryExpression	0
>2098	Identifier	affineEstimation_b
>2099	ExpressionStatement	 
>2100	AssignmentExpr	affineEstimation_a = 1
>2101	PrimaryExpression	1
>2102	Identifier	affineEstimation_a
>2103	ExpressionStatement	 
>2104	AssignmentExpr	diverged = false
>2105	Identifier	false
>2106	Identifier	diverged
>2107	IdentifierDeclStatement	 
>2108	IdentifierDecl	lock = frame -> getActiveLock ( )
>2109	AssignmentExpr	lock = frame -> getActiveLock ( )
>2110	CallExpression	frame -> getActiveLock ( )
>2111	ArgumentList	 
>2112	Callee	frame -> getActiveLock
>2113	PtrMemberAccess	frame -> getActiveLock
>2114	Identifier	getActiveLock
>2115	Identifier	frame
>2116	Identifier	lock
>2117	Identifier	lock
>2118	IdentifierDeclType	boost 
>2212	FunctionDef	Sim3Tracker 
>2213	ParameterList	const TrackingReference * reference , Frame * frame , const Sim3 & referenceToFrame , int level , bool plotWeights
>2214	Parameter	 
>2215	Identifier	plotWeights
>2216	ParameterType	bool
>2217	Parameter	 
>2218	Identifier	level
>2219	ParameterType	int
>2220	Parameter	 
>2221	Identifier	referenceToFrame
>2222	ParameterType	const Sim3 &
>2223	Parameter	 
>2224	Identifier	frame
>2225	ParameterType	Frame *
>2226	Parameter	 
>2227	Identifier	reference
>2228	ParameterType	const TrackingReference *
>2229	ReturnType	void
>2230	CompoundStatement	 
>2231	ExpressionStatement	 
>2232	CallExpression	calcSim3Buffers ( reference , frame , referenceToFrame , level , plotWeights )
>2233	ArgumentList	reference
>2234	Argument	plotWeights
>2235	Identifier	plotWeights
>2236	Argument	level
>2237	Identifier	level
>2238	Argument	referenceToFrame
>2239	Identifier	referenceToFrame
>2240	Argument	frame
>2241	Identifier	frame
>2242	Argument	reference
>2243	Identifier	reference
>2244	Callee	calcSim3Buffers
>2245	Identifier	calcSim3Buffers
>2254	FunctionDef	Sim3Tracker 
>2255	ParameterList	const TrackingReference * reference , Frame * frame , const Sim3 & referenceToFrame , int level , bool plotWeights
>2256	Parameter	 
>2257	Identifier	plotWeights
>2258	ParameterType	bool
>2259	Parameter	 
>2260	Identifier	level
>2261	ParameterType	int
>2262	Parameter	 
>2263	Identifier	referenceToFrame
>2264	ParameterType	const Sim3 &
>2265	Parameter	 
>2266	Identifier	frame
>2267	ParameterType	Frame *
>2268	Parameter	 
>2269	Identifier	reference
>2270	ParameterType	const TrackingReference *
>2271	ReturnType	void
>2272	CompoundStatement	 
>2273	ExpressionStatement	 
>2274	CallExpression	calcSim3Buffers ( reference , frame , referenceToFrame , level , plotWeights )
>2275	ArgumentList	reference
>2276	Argument	plotWeights
>2277	Identifier	plotWeights
>2278	Argument	level
>2279	Identifier	level
>2280	Argument	referenceToFrame
>2281	Identifier	referenceToFrame
>2282	Argument	frame
>2283	Identifier	frame
>2284	Argument	reference
>2285	Identifier	reference
>2286	Callee	calcSim3Buffers
>2287	Identifier	calcSim3Buffers
>2296	FunctionDef	Sim3Tracker 
>2297	ParameterList	const TrackingReference * reference , Frame * frame , const Sim3 & referenceToFrame , int level , bool plotWeights
>2298	Parameter	 
>2299	Identifier	plotWeights
>2300	ParameterType	bool
>2301	Parameter	 
>2302	Identifier	level
>2303	ParameterType	int
>2304	Parameter	 
>2305	Identifier	referenceToFrame
>2306	ParameterType	const Sim3 &
>2307	Parameter	 
>2308	Identifier	frame
>2309	ParameterType	Frame *
>2310	Parameter	 
>2311	Identifier	reference
>2312	ParameterType	const TrackingReference *
>2313	ReturnType	void
>2314	CompoundStatement	 
>2315	IfStatement	if ( plotSim3TrackingIterationInfo )
>2316	CompoundStatement	 
>2317	IfStatement	if ( plotWeights )
>2318	CompoundStatement	 
>2319	ExpressionStatement	 
>2320	CallExpression	Util 
>2321	ArgumentList	\"WD Res\"
>2322	Argument	debugImageWeightedResD
>2323	Identifier	debugImageWeightedResD
>2324	Argument	\"WD Res\"
>2325	PrimaryExpression	\"WD Res\"
>2326	Callee	Util 
>2327	Identifier	Util 
>2328	ExpressionStatement	 
>2329	CallExpression	Util 
>2330	ArgumentList	\"WP Res\"
>2331	Argument	debugImageWeightedResP
>2332	Identifier	debugImageWeightedResP
>2333	Argument	\"WP Res\"
>2334	PrimaryExpression	\"WP Res\"
>2335	Callee	Util 
>2336	Identifier	Util 
>2337	ExpressionStatement	 
>2338	CallExpression	Util 
>2339	ArgumentList	\"IV Weights\"
>2340	Argument	debugImageWeightP
>2341	Identifier	debugImageWeightP
>2342	Argument	\"IV Weights\"
>2343	PrimaryExpression	\"IV Weights\"
>2344	Callee	Util 
>2345	Identifier	Util 
>2346	ExpressionStatement	 
>2347	CallExpression	Util 
>2348	ArgumentList	\"DV Weights\"
>2349	Argument	debugImageWeightD
>2350	Identifier	debugImageWeightD
>2351	Argument	\"DV Weights\"
>2352	PrimaryExpression	\"DV Weights\"
>2353	Callee	Util 
>2354	Identifier	Util 
>2355	ExpressionStatement	 
>2356	CallExpression	Util 
>2357	ArgumentList	\"Huber Weights\"
>2358	Argument	debugImageHuberWeight
>2359	Identifier	debugImageHuberWeight
>2360	Argument	\"Huber Weights\"
>2361	PrimaryExpression	\"Huber Weights\"
>2362	Callee	Util 
>2363	Identifier	Util 
>2364	Condition	 
>2365	Identifier	plotWeights
>2366	ExpressionStatement	 
>2367	CallExpression	Util 
>2368	ArgumentList	\"D Residuals\"
>2369	Argument	debugImageDepthResiduals
>2370	Identifier	debugImageDepthResiduals
>2371	Argument	\"D Residuals\"
>2372	PrimaryExpression	\"D Residuals\"
>2373	Callee	Util 
>2374	Identifier	Util 
>2375	ExpressionStatement	 
>2376	CallExpression	Util 
>2377	ArgumentList	\"P Residuals\"
>2378	Argument	debugImageResiduals
>2379	Identifier	debugImageResiduals
>2380	Argument	\"P Residuals\"
>2381	PrimaryExpression	\"P Residuals\"
>2382	Callee	Util 
>2383	Identifier	Util 
>2384	Condition	 
>2385	Identifier	plotSim3TrackingIterationInfo
>2386	ExpressionStatement	 
>2387	AssignmentExpr	affineEstimation_b_lastIt = ( sy - affineEstimation_a_lastIt * sx ) / sw
>2388	MultiplicativeExpression	( sy - affineEstimation_a_lastIt * sx ) / sw
>2389	Identifier	sw
>2390	AdditiveExpression	sy - affineEstimation_a_lastIt * sx
>2391	MultiplicativeExpression	affineEstimation_a_lastIt * sx
>2392	Identifier	sx
>2393	Identifier	affineEstimation_a_lastIt
>2394	Identifier	sy
>2395	Identifier	affineEstimation_b_lastIt
>2396	ExpressionStatement	 
>2397	AssignmentExpr	affineEstimation_a_lastIt = sqrtf ( ( syy - sy * sy / sw ) / ( sxx - sx * sx / sw ) )
>2398	CallExpression	sqrtf ( ( syy - sy * sy / sw ) / ( sxx - sx * sx / sw ) )
>2399	ArgumentList	( syy - sy * sy / sw ) / ( sxx - sx * sx / sw )
>2400	Argument	( syy - sy * sy / sw ) / ( sxx - sx * sx / sw )
>2401	MultiplicativeExpression	( syy - sy * sy / sw ) / ( sxx - sx * sx / sw )
>2402	AdditiveExpression	sxx - sx * sx / sw
>2403	MultiplicativeExpression	sx * sx / sw
>2404	MultiplicativeExpression	sx / sw
>2405	Identifier	sw
>2406	Identifier	sx
>2407	Identifier	sx
>2408	Identifier	sxx
>2409	AdditiveExpression	syy - sy * sy / sw
>2410	MultiplicativeExpression	sy * sy / sw
>2411	MultiplicativeExpression	sy / sw
>2412	Identifier	sw
>2413	Identifier	sy
>2414	Identifier	sy
>2415	Identifier	syy
>2416	Callee	sqrtf
>2417	Identifier	sqrtf
>2418	Identifier	affineEstimation_a_lastIt
>2419	ExpressionStatement	 
>2420	AssignmentExpr	pointUsage = usageCount / ( float ) reference -> numData [ level ]
>2421	MultiplicativeExpression	usageCount / ( float ) reference -> numData [ level ]
>2422	CastExpression	( float ) reference -> numData [ level ]
>2423	ArrayIndexing	reference -> numData [ level ]
>2424	Identifier	level
>2425	PtrMemberAccess	reference -> numData
>2426	Identifier	numData
>2427	Identifier	reference
>2428	CastTarget	float
>2429	Identifier	usageCount
>2430	Identifier	pointUsage
>2431	ExpressionStatement	 
>2432	AssignmentExpr	buf_warped_size = idx
>2433	Identifier	idx
>2434	Identifier	buf_warped_size
>2435	ForStatement	for ( ; refPoint < refPoint_max ; refPoint ++ , refGrad ++ , refColVar ++ )
>2436	CompoundStatement	 
>2437	ExpressionStatement	 
>2438	AssignmentExpr	usageCount += depthChange < 1 ? depthChange 
>2439	ConditionalExpression	depthChange < 1 ? depthChange 
>2440	PrimaryExpression	1
>2441	Identifier	depthChange
>2442	Condition	depthChange < 1
>2443	RelationalExpression	depthChange < 1
>2444	PrimaryExpression	1
>2445	Identifier	depthChange
>2446	Identifier	usageCount
>2447	IdentifierDeclStatement	 
>2448	IdentifierDecl	depthChange = ( * refPoint ) [ 2 ] / Wxp [ 2 ]
>2449	AssignmentExpr	depthChange = ( * refPoint ) [ 2 ] / Wxp [ 2 ]
>2450	MultiplicativeExpression	( * refPoint ) [ 2 ] / Wxp [ 2 ]
>2451	ArrayIndexing	Wxp [ 2 ]
>2452	PrimaryExpression	2
>2453	Identifier	Wxp
>2454	ArrayIndexing	( * refPoint ) [ 2 ]
>2455	PrimaryExpression	2
>2456	UnaryOp	* refPoint
>2457	Identifier	refPoint
>2458	UnaryOperator	*
>2459	Identifier	depthChange
>2460	Identifier	depthChange
>2461	IdentifierDeclType	float
>2462	ExpressionStatement	 
>2463	IncDecOp	idx ++
>2464	IncDec	++
>2465	Identifier	idx
>2466	IfStatement	if ( plotSim3TrackingIterationInfo )
>2467	CompoundStatement	 
>2468	IfStatement	if ( plotWeights )
>2469	CompoundStatement	 
>2470	ExpressionStatement	 
>2471	CallExpression	setPixelInCvMat ( & debugImageWeightedResP , getGrayCvPixel ( 128 + ( 128 / 5.0f ) * sqrtf ( * ( buf_weight_VarP + \
>2472	ArgumentList	& debugImageWeightedResP
>2473	Argument	width / w
>2474	MultiplicativeExpression	width / w
>2475	Identifier	w
>2476	Identifier	width
>2477	Argument	y
>2478	Identifier	y
>2479	Argument	x
>2480	Identifier	x
>2481	Argument	getGrayCvPixel ( 128 + ( 128 / 5.0f ) * sqrtf ( * ( buf_weight_VarP + idx ) ) * * ( buf_warped_residual + idx ) )
>2482	CallExpression	getGrayCvPixel ( 128 + ( 128 / 5.0f ) * sqrtf ( * ( buf_weight_VarP + idx ) ) * * ( buf_warped_residual + idx ) )
>2483	ArgumentList	128 + ( 128 / 5.0f ) * sqrtf ( * ( buf_weight_VarP + idx ) ) * * ( buf_warped_residual + idx )
>2484	Argument	128 + ( 128 / 5.0f ) * sqrtf ( * ( buf_weight_VarP + idx ) ) * * ( buf_warped_residual + idx )
>2485	AdditiveExpression	128 + ( 128 / 5.0f ) * sqrtf ( * ( buf_weight_VarP + idx ) ) * * ( buf_warped_residual + idx )
>2486	MultiplicativeExpression	( 128 / 5.0f ) * sqrtf ( * ( buf_weight_VarP + idx ) ) * * ( buf_warped_residual + idx )
>2487	MultiplicativeExpression	sqrtf ( * ( buf_weight_VarP + idx ) ) * * ( buf_warped_residual + idx )
>2488	UnaryOp	* ( buf_warped_residual + idx )
>2489	AdditiveExpression	buf_warped_residual + idx
>2490	Identifier	idx
>2491	Identifier	buf_warped_residual
>2492	UnaryOperator	*
>2493	CallExpression	sqrtf ( * ( buf_weight_VarP + idx ) )
>2494	ArgumentList	* ( buf_weight_VarP + idx )
>2495	Argument	* ( buf_weight_VarP + idx )
>2496	UnaryOp	* ( buf_weight_VarP + idx )
>2497	AdditiveExpression	buf_weight_VarP + idx
>2498	Identifier	idx
>2499	Identifier	buf_weight_VarP
>2500	UnaryOperator	*
>2501	Callee	sqrtf
>2502	Identifier	sqrtf
>2503	MultiplicativeExpression	128 / 5.0f
>2504	PrimaryExpression	5.0f
>2505	PrimaryExpression	128
>2506	PrimaryExpression	128
>2507	Callee	getGrayCvPixel
>2508	Identifier	getGrayCvPixel
>2509	Argument	& debugImageWeightedResP
>2510	UnaryOp	& debugImageWeightedResP
>2511	Identifier	debugImageWeightedResP
>2512	UnaryOperator	&
>2513	Callee	setPixelInCvMat
>2514	Identifier	setPixelInCvMat
>2515	ExpressionStatement	 
>2516	CallExpression	setPixelInCvMat ( & debugImageHuberWeight , getGrayCvPixel ( 255 * * ( buf_weight_Huber + idx ) ) , x , y , ( width / \
>2517	ArgumentList	& debugImageHuberWeight
>2518	Argument	width / w
>2519	MultiplicativeExpression	width / w
>2520	Identifier	w
>2521	Identifier	width
>2522	Argument	y
>2523	Identifier	y
>2524	Argument	x
>2525	Identifier	x
>2526	Argument	getGrayCvPixel ( 255 * * ( buf_weight_Huber + idx ) )
>2527	CallExpression	getGrayCvPixel ( 255 * * ( buf_weight_Huber + idx ) )
>2528	ArgumentList	255 * * ( buf_weight_Huber + idx )
>2529	Argument	255 * * ( buf_weight_Huber + idx )
>2530	MultiplicativeExpression	255 * * ( buf_weight_Huber + idx )
>2531	UnaryOp	* ( buf_weight_Huber + idx )
>2532	AdditiveExpression	buf_weight_Huber + idx
>2533	Identifier	idx
>2534	Identifier	buf_weight_Huber
>2535	UnaryOperator	*
>2536	PrimaryExpression	255
>2537	Callee	getGrayCvPixel
>2538	Identifier	getGrayCvPixel
>2539	Argument	& debugImageHuberWeight
>2540	UnaryOp	& debugImageHuberWeight
>2541	Identifier	debugImageHuberWeight
>2542	UnaryOperator	&
>2543	Callee	setPixelInCvMat
>2544	Identifier	setPixelInCvMat
>2545	ExpressionStatement	 
>2546	CallExpression	setPixelInCvMat ( & debugImageWeightP , getGrayCvPixel ( 255 * 4 * sqrtf ( * ( buf_weight_VarP + idx ) ) ) , x , \
>2547	ArgumentList	& debugImageWeightP
>2548	Argument	width / w
>2549	MultiplicativeExpression	width / w
>2550	Identifier	w
>2551	Identifier	width
>2552	Argument	y
>2553	Identifier	y
>2554	Argument	x
>2555	Identifier	x
>2556	Argument	getGrayCvPixel ( 255 * 4 * sqrtf ( * ( buf_weight_VarP + idx ) ) )
>2557	CallExpression	getGrayCvPixel ( 255 * 4 * sqrtf ( * ( buf_weight_VarP + idx ) ) )
>2558	ArgumentList	255 * 4 * sqrtf ( * ( buf_weight_VarP + idx ) )
>2559	Argument	255 * 4 * sqrtf ( * ( buf_weight_VarP + idx ) )
>2560	MultiplicativeExpression	255 * 4 * sqrtf ( * ( buf_weight_VarP + idx ) )
>2561	MultiplicativeExpression	4 * sqrtf ( * ( buf_weight_VarP + idx ) )
>2562	CallExpression	sqrtf ( * ( buf_weight_VarP + idx ) )
>2563	ArgumentList	* ( buf_weight_VarP + idx )
>2564	Argument	* ( buf_weight_VarP + idx )
>2565	UnaryOp	* ( buf_weight_VarP + idx )
>2566	AdditiveExpression	buf_weight_VarP + idx
>2567	Identifier	idx
>2568	Identifier	buf_weight_VarP
>2569	UnaryOperator	*
>2570	Callee	sqrtf
>2571	Identifier	sqrtf
>2572	PrimaryExpression	4
>2573	PrimaryExpression	255
>2574	Callee	getGrayCvPixel
>2575	Identifier	getGrayCvPixel
>2576	Argument	& debugImageWeightP
>2577	UnaryOp	& debugImageWeightP
>2578	Identifier	debugImageWeightP
>2579	UnaryOperator	&
>2580	Callee	setPixelInCvMat
>2581	Identifier	setPixelInCvMat
>2582	Condition	 
>2583	Identifier	plotWeights
>2584	IfStatement	if ( * ( buf_warped_idepthVar + idx ) >= 0 )
>2585	CompoundStatement	 
>2586	IfStatement	if ( plotWeights )
>2587	CompoundStatement	 
>2588	ExpressionStatement	 
>2589	CallExpression	setPixelInCvMat ( & debugImageWeightedResD , getGrayCvPixel ( 128 + ( 128 / 5.0f ) * sqrtf ( * ( buf_weight_VarD + \
>2590	ArgumentList	& debugImageWeightedResD
>2591	Argument	width / w
>2592	MultiplicativeExpression	width / w
>2593	Identifier	w
>2594	Identifier	width
>2595	Argument	y
>2596	Identifier	y
>2597	Argument	x
>2598	Identifier	x
>2599	Argument	getGrayCvPixel ( 128 + ( 128 / 5.0f ) * sqrtf ( * ( buf_weight_VarD + idx ) ) * * ( buf_residual_d + idx ) )
>2600	CallExpression	getGrayCvPixel ( 128 + ( 128 / 5.0f ) * sqrtf ( * ( buf_weight_VarD + idx ) ) * * ( buf_residual_d + idx ) )
>2601	ArgumentList	128 + ( 128 / 5.0f ) * sqrtf ( * ( buf_weight_VarD + idx ) ) * * ( buf_residual_d + idx )
>2602	Argument	128 + ( 128 / 5.0f ) * sqrtf ( * ( buf_weight_VarD + idx ) ) * * ( buf_residual_d + idx )
>2603	AdditiveExpression	128 + ( 128 / 5.0f ) * sqrtf ( * ( buf_weight_VarD + idx ) ) * * ( buf_residual_d + idx )
>2604	MultiplicativeExpression	( 128 / 5.0f ) * sqrtf ( * ( buf_weight_VarD + idx ) ) * * ( buf_residual_d + idx )
>2605	MultiplicativeExpression	sqrtf ( * ( buf_weight_VarD + idx ) ) * * ( buf_residual_d + idx )
>2606	UnaryOp	* ( buf_residual_d + idx )
>2607	AdditiveExpression	buf_residual_d + idx
>2608	Identifier	idx
>2609	Identifier	buf_residual_d
>2610	UnaryOperator	*
>2611	CallExpression	sqrtf ( * ( buf_weight_VarD + idx ) )
>2612	ArgumentList	* ( buf_weight_VarD + idx )
>2613	Argument	* ( buf_weight_VarD + idx )
>2614	UnaryOp	* ( buf_weight_VarD + idx )
>2615	AdditiveExpression	buf_weight_VarD + idx
>2616	Identifier	idx
>2617	Identifier	buf_weight_VarD
>2618	UnaryOperator	*
>2619	Callee	sqrtf
>2620	Identifier	sqrtf
>2621	MultiplicativeExpression	128 / 5.0f
>2622	PrimaryExpression	5.0f
>2623	PrimaryExpression	128
>2624	PrimaryExpression	128
>2625	Callee	getGrayCvPixel
>2626	Identifier	getGrayCvPixel
>2627	Argument	& debugImageWeightedResD
>2628	UnaryOp	& debugImageWeightedResD
>2629	Identifier	debugImageWeightedResD
>2630	UnaryOperator	&
>2631	Callee	setPixelInCvMat
>2632	Identifier	setPixelInCvMat
>2633	ExpressionStatement	 
>2634	CallExpression	setPixelInCvMat ( & debugImageWeightD , getGrayCvPixel ( 255 * ( 1 / 60.0f ) * sqrtf ( * ( buf_weight_VarD + idx ) ) ) , \
>2635	ArgumentList	& debugImageWeightD
>2636	Argument	width / w
>2637	MultiplicativeExpression	width / w
>2638	Identifier	w
>2639	Identifier	width
>2640	Argument	y
>2641	Identifier	y
>2642	Argument	x
>2643	Identifier	x
>2644	Argument	getGrayCvPixel ( 255 * ( 1 / 60.0f ) * sqrtf ( * ( buf_weight_VarD + idx ) ) )
>2645	CallExpression	getGrayCvPixel ( 255 * ( 1 / 60.0f ) * sqrtf ( * ( buf_weight_VarD + idx ) ) )
>2646	ArgumentList	255 * ( 1 / 60.0f ) * sqrtf ( * ( buf_weight_VarD + idx ) )
>2647	Argument	255 * ( 1 / 60.0f ) * sqrtf ( * ( buf_weight_VarD + idx ) )
>2648	MultiplicativeExpression	255 * ( 1 / 60.0f ) * sqrtf ( * ( buf_weight_VarD + idx ) )
>2649	MultiplicativeExpression	( 1 / 60.0f ) * sqrtf ( * ( buf_weight_VarD + idx ) )
>2650	CallExpression	sqrtf ( * ( buf_weight_VarD + idx ) )
>2651	ArgumentList	* ( buf_weight_VarD + idx )
>2652	Argument	* ( buf_weight_VarD + idx )
>2653	UnaryOp	* ( buf_weight_VarD + idx )
>2654	AdditiveExpression	buf_weight_VarD + idx
>2655	Identifier	idx
>2656	Identifier	buf_weight_VarD
>2657	UnaryOperator	*
>2658	Callee	sqrtf
>2659	Identifier	sqrtf
>2660	MultiplicativeExpression	1 / 60.0f
>2661	PrimaryExpression	60.0f
>2662	PrimaryExpression	1
>2663	PrimaryExpression	255
>2664	Callee	getGrayCvPixel
>2665	Identifier	getGrayCvPixel
>2666	Argument	& debugImageWeightD
>2667	UnaryOp	& debugImageWeightD
>2668	Identifier	debugImageWeightD
>2669	UnaryOperator	&
>2670	Callee	setPixelInCvMat
>2671	Identifier	setPixelInCvMat
>2672	Condition	 
>2673	Identifier	plotWeights
>2674	ExpressionStatement	 
>2675	CallExpression	setPixelInCvMat ( & debugImageDepthResiduals , getGrayCvPixel ( 128 + 800 * * ( buf_residual_d + idx ) ) , x , y , ( \
>2676	ArgumentList	& debugImageDepthResiduals
>2677	Argument	width / w
>2678	MultiplicativeExpression	width / w
>2679	Identifier	w
>2680	Identifier	width
>2681	Argument	y
>2682	Identifier	y
>2683	Argument	x
>2684	Identifier	x
>2685	Argument	getGrayCvPixel ( 128 + 800 * * ( buf_residual_d + idx ) )
>2686	CallExpression	getGrayCvPixel ( 128 + 800 * * ( buf_residual_d + idx ) )
>2687	ArgumentList	128 + 800 * * ( buf_residual_d + idx )
>2688	Argument	128 + 800 * * ( buf_residual_d + idx )
>2689	AdditiveExpression	128 + 800 * * ( buf_residual_d + idx )
>2690	MultiplicativeExpression	800 * * ( buf_residual_d + idx )
>2691	UnaryOp	* ( buf_residual_d + idx )
>2692	AdditiveExpression	buf_residual_d + idx
>2693	Identifier	idx
>2694	Identifier	buf_residual_d
>2695	UnaryOperator	*
>2696	PrimaryExpression	800
>2697	PrimaryExpression	128
>2698	Callee	getGrayCvPixel
>2699	Identifier	getGrayCvPixel
>2700	Argument	& debugImageDepthResiduals
>2701	UnaryOp	& debugImageDepthResiduals
>2702	Identifier	debugImageDepthResiduals
>2703	UnaryOperator	&
>2704	Callee	setPixelInCvMat
>2705	Identifier	setPixelInCvMat
>2706	Condition	 
>2707	RelationalExpression	* ( buf_warped_idepthVar + idx ) >= 0
>2708	PrimaryExpression	0
>2709	UnaryOp	* ( buf_warped_idepthVar + idx )
>2710	AdditiveExpression	buf_warped_idepthVar + idx
>2711	Identifier	idx
>2712	Identifier	buf_warped_idepthVar
>2713	UnaryOperator	*
>2714	ExpressionStatement	 
>2715	CallExpression	setPixelInCvMat ( & debugImageResiduals , getGrayCvPixel ( residual_p + 128 ) , x , y , ( width / w ) )
>2716	ArgumentList	& debugImageResiduals
>2717	Argument	width / w
>2718	MultiplicativeExpression	width / w
>2719	Identifier	w
>2720	Identifier	width
>2721	Argument	y
>2722	Identifier	y
>2723	Argument	x
>2724	Identifier	x
>2725	Argument	getGrayCvPixel ( residual_p + 128 )
>2726	CallExpression	getGrayCvPixel ( residual_p + 128 )
>2727	ArgumentList	residual_p + 128
>2728	Argument	residual_p + 128
>2729	AdditiveExpression	residual_p + 128
>2730	PrimaryExpression	128
>2731	Identifier	residual_p
>2732	Callee	getGrayCvPixel
>2733	Identifier	getGrayCvPixel
>2734	Argument	& debugImageResiduals
>2735	UnaryOp	& debugImageResiduals
>2736	Identifier	debugImageResiduals
>2737	UnaryOperator	&
>2738	Callee	setPixelInCvMat
>2739	Identifier	setPixelInCvMat
>2740	ExpressionStatement	 
>2741	CallExpression	setPixelInCvMat ( & debugImageOldImageWarped , getGrayCvPixel ( ( float ) resInterp [ 2 ] ) , x , y , ( width / \
>2742	ArgumentList	& debugImageOldImageWarped
>2743	Argument	width / w
>2744	MultiplicativeExpression	width / w
>2745	Identifier	w
>2746	Identifier	width
>2747	Argument	y
>2748	Identifier	y
>2749	Argument	x
>2750	Identifier	x
>2751	Argument	getGrayCvPixel ( ( float ) resInterp [ 2 ] )
>2752	CallExpression	getGrayCvPixel ( ( float ) resInterp [ 2 ] )
>2753	ArgumentList	( float ) resInterp [ 2 ]
>2754	Argument	( float ) resInterp [ 2 ]
>2755	CastExpression	( float ) resInterp [ 2 ]
>2756	ArrayIndexing	resInterp [ 2 ]
>2757	PrimaryExpression	2
>2758	Identifier	resInterp
>2759	CastTarget	float
>2760	Callee	getGrayCvPixel
>2761	Identifier	getGrayCvPixel
>2762	Argument	& debugImageOldImageWarped
>2763	UnaryOp	& debugImageOldImageWarped
>2764	Identifier	debugImageOldImageWarped
>2765	UnaryOperator	&
>2766	Callee	setPixelInCvMat
>2767	Identifier	setPixelInCvMat
>2768	ExpressionStatement	 
>2769	CallExpression	setPixelInCvMat ( & debugImageOldImageSource , getGrayCvPixel ( ( float ) resInterp [ 2 ] ) , u_new + 0.5 , v_new + \
>2770	ArgumentList	& debugImageOldImageSource
>2771	Argument	width / w
>2772	MultiplicativeExpression	width / w
>2773	Identifier	w
>2774	Identifier	width
>2775	Argument	v_new + 0.5
>2776	AdditiveExpression	v_new + 0.5
>2777	PrimaryExpression	0.5
>2778	Identifier	v_new
>2779	Argument	u_new + 0.5
>2780	AdditiveExpression	u_new + 0.5
>2781	PrimaryExpression	0.5
>2782	Identifier	u_new
>2783	Argument	getGrayCvPixel ( ( float ) resInterp [ 2 ] )
>2784	CallExpression	getGrayCvPixel ( ( float ) resInterp [ 2 ] )
>2785	ArgumentList	( float ) resInterp [ 2 ]
>2786	Argument	( float ) resInterp [ 2 ]
>2787	CastExpression	( float ) resInterp [ 2 ]
>2788	ArrayIndexing	resInterp [ 2 ]
>2789	PrimaryExpression	2
>2790	Identifier	resInterp
>2791	CastTarget	float
>2792	Callee	getGrayCvPixel
>2793	Identifier	getGrayCvPixel
>2794	Argument	& debugImageOldImageSource
>2795	UnaryOp	& debugImageOldImageSource
>2796	Identifier	debugImageOldImageSource
>2797	UnaryOperator	&
>2798	Callee	setPixelInCvMat
>2799	Identifier	setPixelInCvMat
>2800	IdentifierDeclStatement	 
>2801	IdentifierDecl	y = point [ 1 ] / point [ 2 ] + 0.5f
>2802	AssignmentExpr	y = point [ 1 ] / point [ 2 ] + 0.5f
>2803	AdditiveExpression	point [ 1 ] / point [ 2 ] + 0.5f
>2804	PrimaryExpression	0.5f
>2805	MultiplicativeExpression	point [ 1 ] / point [ 2 ]
>2806	ArrayIndexing	point [ 2 ]
>2807	PrimaryExpression	2
>2808	Identifier	point
>2809	ArrayIndexing	point [ 1 ]
>2810	PrimaryExpression	1
>2811	Identifier	point
>2812	Identifier	y
>2813	Identifier	y
>2814	IdentifierDeclType	int
>2815	IdentifierDeclStatement	 
>2816	IdentifierDecl	x = point [ 0 ] / point [ 2 ] + 0.5f
>2817	AssignmentExpr	x = point [ 0 ] / point [ 2 ] + 0.5f
>2818	AdditiveExpression	point [ 0 ] / point [ 2 ] + 0.5f
>2819	PrimaryExpression	0.5f
>2820	MultiplicativeExpression	point [ 0 ] / point [ 2 ]
>2821	ArrayIndexing	point [ 2 ]
>2822	PrimaryExpression	2
>2823	Identifier	point
>2824	ArrayIndexing	point [ 0 ]
>2825	PrimaryExpression	0
>2826	Identifier	point
>2827	Identifier	x
>2828	Identifier	x
>2829	IdentifierDeclType	int
>2830	IdentifierDeclStatement	 
>2831	IdentifierDecl	point = KLvl * ( * refPoint )
>2832	AssignmentExpr	point = KLvl * ( * refPoint )
>2833	MultiplicativeExpression	KLvl * ( * refPoint )
>2834	UnaryOp	* refPoint
>2835	Identifier	refPoint
>2836	UnaryOperator	*
>2837	Identifier	KLvl
>2838	Identifier	point
>2839	Identifier	point
>2840	IdentifierDeclType	Eigen 
>2841	Condition	 
>2842	Identifier	plotSim3TrackingIterationInfo
>2843	IfStatement	if ( var_frameDepth > 0 )
>2844	ElseStatement	else
>2845	CompoundStatement	 
>2846	ExpressionStatement	 
>2847	AssignmentExpr	* ( buf_warped_idepthVar + idx ) = - 1
>2848	UnaryOp	- 1
>2849	PrimaryExpression	1
>2850	UnaryOperator	-
>2851	UnaryOp	* ( buf_warped_idepthVar + idx )
>2852	AdditiveExpression	buf_warped_idepthVar + idx
>2853	Identifier	idx
>2854	Identifier	buf_warped_idepthVar
>2855	UnaryOperator	*
>2856	ExpressionStatement	 
>2857	AssignmentExpr	* ( buf_residual_d + idx ) = - 1
>2858	UnaryOp	- 1
>2859	PrimaryExpression	1
>2860	UnaryOperator	-
>2861	UnaryOp	* ( buf_residual_d + idx )
>2862	AdditiveExpression	buf_residual_d + idx
>2863	Identifier	idx
>2864	Identifier	buf_residual_d
>2865	UnaryOperator	*
>2866	CompoundStatement	 
>2867	ExpressionStatement	 
>2868	AssignmentExpr	* ( buf_warped_idepthVar + idx ) = var_frameDepth
>2869	Identifier	var_frameDepth
>2870	UnaryOp	* ( buf_warped_idepthVar + idx )
>2871	AdditiveExpression	buf_warped_idepthVar + idx
>2872	Identifier	idx
>2873	Identifier	buf_warped_idepthVar
>2874	UnaryOperator	*
>2875	ExpressionStatement	 
>2876	AssignmentExpr	* ( buf_residual_d + idx ) = residual_d
>2877	Identifier	residual_d
>2878	UnaryOp	* ( buf_residual_d + idx )
>2879	AdditiveExpression	buf_residual_d + idx
>2880	Identifier	idx
>2881	Identifier	buf_residual_d
>2882	UnaryOperator	*
>2883	IdentifierDeclStatement	 
>2884	IdentifierDecl	residual_d = ref_idepth - frame_idepth [ idx_rounded ]
>2885	AssignmentExpr	residual_d = ref_idepth - frame_idepth [ idx_rounded ]
>2886	AdditiveExpression	ref_idepth - frame_idepth [ idx_rounded ]
>2887	ArrayIndexing	frame_idepth [ idx_rounded ]
>2888	Identifier	idx_rounded
>2889	Identifier	frame_idepth
>2890	Identifier	ref_idepth
>2891	Identifier	residual_d
>2892	Identifier	residual_d
>2893	IdentifierDeclType	float
>2894	Condition	 
>2895	RelationalExpression	var_frameDepth > 0
>2896	PrimaryExpression	0
>2897	Identifier	var_frameDepth
>2898	ExpressionStatement	 
>2899	AssignmentExpr	* ( buf_d + idx ) = 1.0f / ( * refPoint ) [ 2 ]
>2900	MultiplicativeExpression	1.0f / ( * refPoint ) [ 2 ]
>2901	ArrayIndexing	( * refPoint ) [ 2 ]
>2902	PrimaryExpression	2
>2903	UnaryOp	* refPoint
>2904	Identifier	refPoint
>2905	UnaryOperator	*
>2906	PrimaryExpression	1.0f
>2907	UnaryOp	* ( buf_d + idx )
>2908	AdditiveExpression	buf_d + idx
>2909	Identifier	idx
>2910	Identifier	buf_d
>2911	UnaryOperator	*
>2912	IdentifierDeclStatement	 
>2913	IdentifierDecl	ref_idepth = 1.0f / Wxp [ 2 ]
>2914	AssignmentExpr	ref_idepth = 1.0f / Wxp [ 2 ]
>2915	MultiplicativeExpression	1.0f / Wxp [ 2 ]
>2916	ArrayIndexing	Wxp [ 2 ]
>2917	PrimaryExpression	2
>2918	Identifier	Wxp
>2919	PrimaryExpression	1.0f
>2920	Identifier	ref_idepth
>2921	Identifier	ref_idepth
>2922	IdentifierDeclType	float
>2923	IdentifierDeclStatement	 
>2924	IdentifierDecl	var_frameDepth = frame_idepthVar [ idx_rounded ]
>2925	AssignmentExpr	var_frameDepth = frame_idepthVar [ idx_rounded ]
>2926	ArrayIndexing	frame_idepthVar [ idx_rounded ]
>2927	Identifier	idx_rounded
>2928	Identifier	frame_idepthVar
>2929	Identifier	var_frameDepth
>2930	Identifier	var_frameDepth
>2931	IdentifierDeclType	float
>2932	IdentifierDeclStatement	 
>2933	IdentifierDecl	idx_rounded = ( int ) ( u_new + 0.5f ) + w * ( int ) ( v_new + 0.5f )
>2934	AssignmentExpr	idx_rounded = ( int ) ( u_new + 0.5f ) + w * ( int ) ( v_new + 0.5f )
>2935	AdditiveExpression	( int ) ( u_new + 0.5f ) + w * ( int ) ( v_new + 0.5f )
>2936	MultiplicativeExpression	w * ( int ) ( v_new + 0.5f )
>2937	CastExpression	( int ) ( v_new + 0.5f )
>2938	AdditiveExpression	v_new + 0.5f
>2939	PrimaryExpression	0.5f
>2940	Identifier	v_new
>2941	CastTarget	int
>2942	Identifier	w
>2943	CastExpression	( int ) ( u_new + 0.5f )
>2944	AdditiveExpression	u_new + 0.5f
>2945	PrimaryExpression	0.5f
>2946	Identifier	u_new
>2947	CastTarget	int
>2948	Identifier	idx_rounded
>2949	Identifier	idx_rounded
>2950	IdentifierDeclType	int
>2951	ExpressionStatement	 
>2952	AssignmentExpr	* ( buf_idepthVar + idx ) = ( * refColVar ) [ 1 ]
>2953	ArrayIndexing	( * refColVar ) [ 1 ]
>2954	PrimaryExpression	1
>2955	UnaryOp	* refColVar
>2956	Identifier	refColVar
>2957	UnaryOperator	*
>2958	UnaryOp	* ( buf_idepthVar + idx )
>2959	AdditiveExpression	buf_idepthVar + idx
>2960	Identifier	idx
>2961	Identifier	buf_idepthVar
>2962	UnaryOperator	*
>2963	ExpressionStatement	 
>2964	AssignmentExpr	* ( buf_warped_residual + idx ) = residual_p
>2965	Identifier	residual_p
>2966	UnaryOp	* ( buf_warped_residual + idx )
>2967	AdditiveExpression	buf_warped_residual + idx
>2968	Identifier	idx
>2969	Identifier	buf_warped_residual
>2970	UnaryOperator	*
>2971	ExpressionStatement	 
>2972	AssignmentExpr	sw += weight
>2973	Identifier	weight
>2974	Identifier	sw
>2975	ExpressionStatement	 
>2976	AssignmentExpr	sy += c2 * weight
>2977	MultiplicativeExpression	c2 * weight
>2978	Identifier	weight
>2979	Identifier	c2
>2980	Identifier	sy
>2981	ExpressionStatement	 
>2982	AssignmentExpr	sx += c1 * weight
>2983	MultiplicativeExpression	c1 * weight
>2984	Identifier	weight
>2985	Identifier	c1
>2986	Identifier	sx
>2987	ExpressionStatement	 
>2988	AssignmentExpr	syy += c2 * c2 * weight
>2989	MultiplicativeExpression	c2 * c2 * weight
>2990	MultiplicativeExpression	c2 * weight
>2991	Identifier	weight
>2992	Identifier	c2
>2993	Identifier	c2
>2994	Identifier	syy
>2995	ExpressionStatement	 
>2996	AssignmentExpr	sxx += c1 * c1 * weight
>2997	MultiplicativeExpression	c1 * c1 * weight
>2998	MultiplicativeExpression	c1 * weight
>2999	Identifier	weight
>3000	Identifier	c1
>3001	Identifier	c1
>3002	Identifier	sxx
>3003	IdentifierDeclStatement	 
>3004	IdentifierDecl	weight = fabsf ( residual_p ) < 2.0f ? 1 
>3005	AssignmentExpr	weight = fabsf ( residual_p ) < 2.0f ? 1 
>3006	ConditionalExpression	fabsf ( residual_p ) < 2.0f ? 1 
>3007	MultiplicativeExpression	2.0f / fabsf ( residual_p )
>3008	CallExpression	fabsf ( residual_p )
>3009	ArgumentList	residual_p
>3010	Argument	residual_p
>3011	Identifier	residual_p
>3012	Callee	fabsf
>3013	Identifier	fabsf
>3014	PrimaryExpression	2.0f
>3015	PrimaryExpression	1
>3016	Condition	fabsf ( residual_p ) < 2.0f
>3017	RelationalExpression	fabsf ( residual_p ) < 2.0f
>3018	PrimaryExpression	2.0f
>3019	CallExpression	fabsf ( residual_p )
>3020	ArgumentList	residual_p
>3021	Argument	residual_p
>3022	Identifier	residual_p
>3023	Callee	fabsf
>3024	Identifier	fabsf
>3025	Identifier	weight
>3026	Identifier	weight
>3027	IdentifierDeclType	float
>3028	IdentifierDeclStatement	 
>3029	IdentifierDecl	residual_p = c1 - c2
>3030	AssignmentExpr	residual_p = c1 - c2
>3031	AdditiveExpression	c1 - c2
>3032	Identifier	c2
>3033	Identifier	c1
>3034	Identifier	residual_p
>3035	Identifier	residual_p
>3036	IdentifierDeclType	float
>3037	IdentifierDeclStatement	 
>3038	IdentifierDecl	c2 = resInterp [ 2 ]
>3039	AssignmentExpr	c2 = resInterp [ 2 ]
>3040	ArrayIndexing	resInterp [ 2 ]
>3041	PrimaryExpression	2
>3042	Identifier	resInterp
>3043	Identifier	c2
>3044	Identifier	c2
>3045	IdentifierDeclType	float
>3046	IdentifierDeclStatement	 
>3047	IdentifierDecl	c1 = affineEstimation_a * ( * refColVar ) [ 0 ] + affineEstimation_b
>3048	AssignmentExpr	c1 = affineEstimation_a * ( * refColVar ) [ 0 ] + affineEstimation_b
>3049	AdditiveExpression	affineEstimation_a * ( * refColVar ) [ 0 ] + affineEstimation_b
>3050	Identifier	affineEstimation_b
>3051	MultiplicativeExpression	affineEstimation_a * ( * refColVar ) [ 0 ]
>3052	ArrayIndexing	( * refColVar ) [ 0 ]
>3053	PrimaryExpression	0
>3054	UnaryOp	* refColVar
>3055	Identifier	refColVar
>3056	UnaryOperator	*
>3057	Identifier	affineEstimation_a
>3058	Identifier	c1
>3059	Identifier	c1
>3060	IdentifierDeclType	float
>3061	ExpressionStatement	 
>3062	AssignmentExpr	* ( buf_warped_dy + idx ) = fy_l * 0.5f * ( resInterp [ 1 ] + rotatedGradY )
>3063	MultiplicativeExpression	fy_l * 0.5f * ( resInterp [ 1 ] + rotatedGradY )
>3064	MultiplicativeExpression	0.5f * ( resInterp [ 1 ] + rotatedGradY )
>3065	AdditiveExpression	resInterp [ 1 ] + rotatedGradY
>3066	Identifier	rotatedGradY
>3067	ArrayIndexing	resInterp [ 1 ]
>3068	PrimaryExpression	1
>3069	Identifier	resInterp
>3070	PrimaryExpression	0.5f
>3071	Identifier	fy_l
>3072	UnaryOp	* ( buf_warped_dy + idx )
>3073	AdditiveExpression	buf_warped_dy + idx
>3074	Identifier	idx
>3075	Identifier	buf_warped_dy
>3076	UnaryOperator	*
>3077	ExpressionStatement	 
>3078	AssignmentExpr	* ( buf_warped_dx + idx ) = fx_l * 0.5f * ( resInterp [ 0 ] + rotatedGradX )
>3079	MultiplicativeExpression	fx_l * 0.5f * ( resInterp [ 0 ] + rotatedGradX )
>3080	MultiplicativeExpression	0.5f * ( resInterp [ 0 ] + rotatedGradX )
>3081	AdditiveExpression	resInterp [ 0 ] + rotatedGradX
>3082	Identifier	rotatedGradX
>3083	ArrayIndexing	resInterp [ 0 ]
>3084	PrimaryExpression	0
>3085	Identifier	resInterp
>3086	PrimaryExpression	0.5f
>3087	Identifier	fx_l
>3088	UnaryOp	* ( buf_warped_dx + idx )
>3089	AdditiveExpression	buf_warped_dx + idx
>3090	Identifier	idx
>3091	Identifier	buf_warped_dx
>3092	UnaryOperator	*
>3093	IdentifierDeclStatement	 
>3094	IdentifierDecl	rotatedGradY = yRoll0 * ( * refGrad ) [ 0 ] + yRoll1 * ( * refGrad ) [ 1 ]
>3095	AssignmentExpr	rotatedGradY = yRoll0 * ( * refGrad ) [ 0 ] + yRoll1 * ( * refGrad ) [ 1 ]
>3096	AdditiveExpression	yRoll0 * ( * refGrad ) [ 0 ] + yRoll1 * ( * refGrad ) [ 1 ]
>3097	MultiplicativeExpression	yRoll1 * ( * refGrad ) [ 1 ]
>3098	ArrayIndexing	( * refGrad ) [ 1 ]
>3099	PrimaryExpression	1
>3100	UnaryOp	* refGrad
>3101	Identifier	refGrad
>3102	UnaryOperator	*
>3103	Identifier	yRoll1
>3104	MultiplicativeExpression	yRoll0 * ( * refGrad ) [ 0 ]
>3105	ArrayIndexing	( * refGrad ) [ 0 ]
>3106	PrimaryExpression	0
>3107	UnaryOp	* refGrad
>3108	Identifier	refGrad
>3109	UnaryOperator	*
>3110	Identifier	yRoll0
>3111	Identifier	rotatedGradY
>3112	Identifier	rotatedGradY
>3113	IdentifierDeclType	float
>3114	IdentifierDeclStatement	 
>3115	IdentifierDecl	rotatedGradX = xRoll0 * ( * refGrad ) [ 0 ] + xRoll1 * ( * refGrad ) [ 1 ]
>3116	AssignmentExpr	rotatedGradX = xRoll0 * ( * refGrad ) [ 0 ] + xRoll1 * ( * refGrad ) [ 1 ]
>3117	AdditiveExpression	xRoll0 * ( * refGrad ) [ 0 ] + xRoll1 * ( * refGrad ) [ 1 ]
>3118	MultiplicativeExpression	xRoll1 * ( * refGrad ) [ 1 ]
>3119	ArrayIndexing	( * refGrad ) [ 1 ]
>3120	PrimaryExpression	1
>3121	UnaryOp	* refGrad
>3122	Identifier	refGrad
>3123	UnaryOperator	*
>3124	Identifier	xRoll1
>3125	MultiplicativeExpression	xRoll0 * ( * refGrad ) [ 0 ]
>3126	ArrayIndexing	( * refGrad ) [ 0 ]
>3127	PrimaryExpression	0
>3128	UnaryOp	* refGrad
>3129	Identifier	refGrad
>3130	UnaryOperator	*
>3131	Identifier	xRoll0
>3132	Identifier	rotatedGradX
>3133	Identifier	rotatedGradX
>3134	IdentifierDeclType	float
>3135	IdentifierDeclStatement	 
>3136	IdentifierDecl	resInterp = getInterpolatedElement43 ( frame_intensityAndGradients , u_new , v_new , w )
>3137	AssignmentExpr	resInterp = getInterpolatedElement43 ( frame_intensityAndGradients , u_new , v_new , w )
>3138	CallExpression	getInterpolatedElement43 ( frame_intensityAndGradients , u_new , v_new , w )
>3139	ArgumentList	frame_intensityAndGradients
>3140	Argument	w
>3141	Identifier	w
>3142	Argument	v_new
>3143	Identifier	v_new
>3144	Argument	u_new
>3145	Identifier	u_new
>3146	Argument	frame_intensityAndGradients
>3147	Identifier	frame_intensityAndGradients
>3148	Callee	getInterpolatedElement43
>3149	Identifier	getInterpolatedElement43
>3150	Identifier	resInterp
>3151	Identifier	resInterp
>3152	IdentifierDeclType	Eigen 
>3153	ExpressionStatement	 
>3154	AssignmentExpr	* ( buf_warped_z + idx ) = Wxp ( 2 )
>3155	CallExpression	Wxp ( 2 )
>3156	ArgumentList	2
>3157	Argument	2
>3158	PrimaryExpression	2
>3159	Callee	Wxp
>3160	Identifier	Wxp
>3161	UnaryOp	* ( buf_warped_z + idx )
>3162	AdditiveExpression	buf_warped_z + idx
>3163	Identifier	idx
>3164	Identifier	buf_warped_z
>3165	UnaryOperator	*
>3166	ExpressionStatement	 
>3167	AssignmentExpr	* ( buf_warped_y + idx ) = Wxp ( 1 )
>3168	CallExpression	Wxp ( 1 )
>3169	ArgumentList	1
>3170	Argument	1
>3171	PrimaryExpression	1
>3172	Callee	Wxp
>3173	Identifier	Wxp
>3174	UnaryOp	* ( buf_warped_y + idx )
>3175	AdditiveExpression	buf_warped_y + idx
>3176	Identifier	idx
>3177	Identifier	buf_warped_y
>3178	UnaryOperator	*
>3179	ExpressionStatement	 
>3180	AssignmentExpr	* ( buf_warped_x + idx ) = Wxp ( 0 )
>3181	CallExpression	Wxp ( 0 )
>3182	ArgumentList	0
>3183	Argument	0
>3184	PrimaryExpression	0
>3185	Callee	Wxp
>3186	Identifier	Wxp
>3187	UnaryOp	* ( buf_warped_x + idx )
>3188	AdditiveExpression	buf_warped_x + idx
>3189	Identifier	idx
>3190	Identifier	buf_warped_x
>3191	UnaryOperator	*
>3192	IfStatement	if ( ! ( u_new > 1 && v_new > 1 && u_new < w - 2 && v_new < h - 2 ) )
>3193	ContinueStatement	 
>3194	Condition	 
>3195	UnaryOp	! ( u_new > 1 && v_new > 1 && u_new < w - 2 && v_new < h - 2 )
>3196	AndExpression	u_new > 1 && v_new > 1 && u_new < w - 2 && v_new < h - 2
>3197	AndExpression	v_new > 1 && u_new < w - 2 && v_new < h - 2
>3198	AndExpression	u_new < w - 2 && v_new < h - 2
>3199	RelationalExpression	v_new < h - 2
>3200	AdditiveExpression	h - 2
>3201	PrimaryExpression	2
>3202	Identifier	h
>3203	Identifier	v_new
>3204	RelationalExpression	u_new < w - 2
>3205	AdditiveExpression	w - 2
>3206	PrimaryExpression	2
>3207	Identifier	w
>3208	Identifier	u_new
>3209	RelationalExpression	v_new > 1
>3210	PrimaryExpression	1
>3211	Identifier	v_new
>3212	RelationalExpression	u_new > 1
>3213	PrimaryExpression	1
>3214	Identifier	u_new
>3215	UnaryOperator	!
>3216	IdentifierDeclStatement	 
>3217	IdentifierDecl	v_new = ( Wxp [ 1 ] / Wxp [ 2 ] ) * fy_l + cy_l
>3218	AssignmentExpr	v_new = ( Wxp [ 1 ] / Wxp [ 2 ] ) * fy_l + cy_l
>3219	AdditiveExpression	( Wxp [ 1 ] / Wxp [ 2 ] ) * fy_l + cy_l
>3220	Identifier	cy_l
>3221	MultiplicativeExpression	( Wxp [ 1 ] / Wxp [ 2 ] ) * fy_l
>3222	Identifier	fy_l
>3223	MultiplicativeExpression	Wxp [ 1 ] / Wxp [ 2 ]
>3224	ArrayIndexing	Wxp [ 2 ]
>3225	PrimaryExpression	2
>3226	Identifier	Wxp
>3227	ArrayIndexing	Wxp [ 1 ]
>3228	PrimaryExpression	1
>3229	Identifier	Wxp
>3230	Identifier	v_new
>3231	Identifier	v_new
>3232	IdentifierDeclType	float
>3233	IdentifierDeclStatement	 
>3234	IdentifierDecl	u_new = ( Wxp [ 0 ] / Wxp [ 2 ] ) * fx_l + cx_l
>3235	AssignmentExpr	u_new = ( Wxp [ 0 ] / Wxp [ 2 ] ) * fx_l + cx_l
>3236	AdditiveExpression	( Wxp [ 0 ] / Wxp [ 2 ] ) * fx_l + cx_l
>3237	Identifier	cx_l
>3238	MultiplicativeExpression	( Wxp [ 0 ] / Wxp [ 2 ] ) * fx_l
>3239	Identifier	fx_l
>3240	MultiplicativeExpression	Wxp [ 0 ] / Wxp [ 2 ]
>3241	ArrayIndexing	Wxp [ 2 ]
>3242	PrimaryExpression	2
>3243	Identifier	Wxp
>3244	ArrayIndexing	Wxp [ 0 ]
>3245	PrimaryExpression	0
>3246	Identifier	Wxp
>3247	Identifier	u_new
>3248	Identifier	u_new
>3249	IdentifierDeclType	float
>3250	IdentifierDeclStatement	 
>3251	IdentifierDecl	Wxp = rotMat * ( * refPoint ) + transVec
>3252	AssignmentExpr	Wxp = rotMat * ( * refPoint ) + transVec
>3253	AdditiveExpression	rotMat * ( * refPoint ) + transVec
>3254	Identifier	transVec
>3255	MultiplicativeExpression	rotMat * ( * refPoint )
>3256	UnaryOp	* refPoint
>3257	Identifier	refPoint
>3258	UnaryOperator	*
>3259	Identifier	rotMat
>3260	Identifier	Wxp
>3261	Identifier	Wxp
>3262	IdentifierDeclType	Eigen 
>3263	Expression	 
>3264	Expression	refGrad ++ , refColVar ++
>3265	IncDecOp	refColVar ++
>3266	IncDec	++
>3267	Identifier	refColVar
>3268	IncDecOp	refGrad ++
>3269	IncDec	++
>3270	Identifier	refGrad
>3271	IncDecOp	refPoint ++
>3272	IncDec	++
>3273	Identifier	refPoint
>3274	Condition	 
>3275	RelationalExpression	refPoint < refPoint_max
>3276	Identifier	refPoint_max
>3277	Identifier	refPoint
>3278	IdentifierDeclStatement	 
>3279	IdentifierDecl	idx = 0
>3280	AssignmentExpr	idx = 0
>3281	PrimaryExpression	0
>3282	Identifier	idx
>3283	Identifier	idx
>3284	IdentifierDeclType	int
>3285	IdentifierDeclStatement	 
>3286	IdentifierDecl	usageCount = 0
>3287	AssignmentExpr	usageCount = 0
>3288	PrimaryExpression	0
>3289	Identifier	usageCount
>3290	Identifier	usageCount
>3291	IdentifierDeclType	float
>3292	IdentifierDeclStatement	 
>3293	IdentifierDecl	sw = 0
>3294	AssignmentExpr	sw = 0
>3295	PrimaryExpression	0
>3296	Identifier	sw
>3297	Identifier	sw
>3298	IdentifierDeclType	float
>3299	IdentifierDecl	sy = 0
>3300	AssignmentExpr	sy = 0
>3301	PrimaryExpression	0
>3302	Identifier	sy
>3303	Identifier	sy
>3304	IdentifierDeclType	float
>3305	IdentifierDecl	sx = 0
>3306	AssignmentExpr	sx = 0
>3307	PrimaryExpression	0
>3308	Identifier	sx
>3309	Identifier	sx
>3310	IdentifierDeclType	float
>3311	IdentifierDecl	syy = 0
>3312	AssignmentExpr	syy = 0
>3313	PrimaryExpression	0
>3314	Identifier	syy
>3315	Identifier	syy
>3316	IdentifierDeclType	float
>3317	IdentifierDecl	sxx = 0
>3318	AssignmentExpr	sxx = 0
>3319	PrimaryExpression	0
>3320	Identifier	sxx
>3321	Identifier	sxx
>3322	IdentifierDeclType	float
>3323	IdentifierDeclStatement	 
>3324	IdentifierDecl	* frame_intensityAndGradients = frame -> gradients ( level )
>3325	AssignmentExpr	* frame_intensityAndGradients = frame -> gradients ( level )
>3326	CallExpression	frame -> gradients ( level )
>3327	ArgumentList	level
>3328	Argument	level
>3329	Identifier	level
>3330	Callee	frame -> gradients
>3331	PtrMemberAccess	frame -> gradients
>3332	Identifier	gradients
>3333	Identifier	frame
>3334	Identifier	frame_intensityAndGradients
>3335	Identifier	frame_intensityAndGradients
>3336	IdentifierDeclType	const Eigen 
>3337	IdentifierDeclStatement	 
>3338	IdentifierDecl	* frame_idepthVar = frame -> idepthVar ( level )
>3339	AssignmentExpr	* frame_idepthVar = frame -> idepthVar ( level )
>3340	CallExpression	frame -> idepthVar ( level )
>3341	ArgumentList	level
>3342	Argument	level
>3343	Identifier	level
>3344	Callee	frame -> idepthVar
>3345	PtrMemberAccess	frame -> idepthVar
>3346	Identifier	idepthVar
>3347	Identifier	frame
>3348	Identifier	frame_idepthVar
>3349	Identifier	frame_idepthVar
>3350	IdentifierDeclType	const float *
>3351	IdentifierDeclStatement	 
>3352	IdentifierDecl	* frame_idepth = frame -> idepth ( level )
>3353	AssignmentExpr	* frame_idepth = frame -> idepth ( level )
>3354	CallExpression	frame -> idepth ( level )
>3355	ArgumentList	level
>3356	Argument	level
>3357	Identifier	level
>3358	Callee	frame -> idepth
>3359	PtrMemberAccess	frame -> idepth
>3360	Identifier	idepth
>3361	Identifier	frame
>3362	Identifier	frame_idepth
>3363	Identifier	frame_idepth
>3364	IdentifierDeclType	const float *
>3365	IdentifierDeclStatement	 
>3366	IdentifierDecl	* refGrad = reference -> gradData [ level ]
>3367	AssignmentExpr	* refGrad = reference -> gradData [ level ]
>3368	ArrayIndexing	reference -> gradData [ level ]
>3369	Identifier	level
>3370	PtrMemberAccess	reference -> gradData
>3371	Identifier	gradData
>3372	Identifier	reference
>3373	Identifier	refGrad
>3374	Identifier	refGrad
>3375	IdentifierDeclType	const Eigen 
>3376	IdentifierDeclStatement	 
>3377	IdentifierDecl	* refColVar = reference -> colorAndVarData [ level ]
>3378	AssignmentExpr	* refColVar = reference -> colorAndVarData [ level ]
>3379	ArrayIndexing	reference -> colorAndVarData [ level ]
>3380	Identifier	level
>3381	PtrMemberAccess	reference -> colorAndVarData
>3382	Identifier	colorAndVarData
>3383	Identifier	reference
>3384	Identifier	refColVar
>3385	Identifier	refColVar
>3386	IdentifierDeclType	const Eigen 
>3387	IdentifierDeclStatement	 
>3388	IdentifierDecl	* refPoint = reference -> posData [ level ]
>3389	AssignmentExpr	* refPoint = reference -> posData [ level ]
>3390	ArrayIndexing	reference -> posData [ level ]
>3391	Identifier	level
>3392	PtrMemberAccess	reference -> posData
>3393	Identifier	posData
>3394	Identifier	reference
>3395	Identifier	refPoint
>3396	Identifier	refPoint
>3397	IdentifierDeclType	const Eigen 
>3398	IdentifierDeclStatement	 
>3399	IdentifierDecl	* refPoint_max = reference -> posData [ level ] + reference -> numData [ level ]
>3400	AssignmentExpr	* refPoint_max = reference -> posData [ level ] + reference -> numData [ level ]
>3401	AdditiveExpression	reference -> posData [ level ] + reference -> numData [ level ]
>3402	ArrayIndexing	reference -> numData [ level ]
>3403	Identifier	level
>3404	PtrMemberAccess	reference -> numData
>3405	Identifier	numData
>3406	Identifier	reference
>3407	ArrayIndexing	reference -> posData [ level ]
>3408	Identifier	level
>3409	PtrMemberAccess	reference -> posData
>3410	Identifier	posData
>3411	Identifier	reference
>3412	Identifier	refPoint_max
>3413	Identifier	refPoint_max
>3414	IdentifierDeclType	const Eigen 
>3415	IdentifierDeclStatement	 
>3416	IdentifierDecl	yRoll1 = rollMat ( 1 , 1 )
>3417	AssignmentExpr	yRoll1 = rollMat ( 1 , 1 )
>3418	CallExpression	rollMat ( 1 , 1 )
>3419	ArgumentList	1
>3420	Argument	1
>3421	PrimaryExpression	1
>3422	Argument	1
>3423	PrimaryExpression	1
>3424	Callee	rollMat
>3425	Identifier	rollMat
>3426	Identifier	yRoll1
>3427	Identifier	yRoll1
>3428	IdentifierDeclType	float
>3429	IdentifierDeclStatement	 
>3430	IdentifierDecl	yRoll0 = rollMat ( 1 , 0 )
>3431	AssignmentExpr	yRoll0 = rollMat ( 1 , 0 )
>3432	CallExpression	rollMat ( 1 , 0 )
>3433	ArgumentList	1
>3434	Argument	0
>3435	PrimaryExpression	0
>3436	Argument	1
>3437	PrimaryExpression	1
>3438	Callee	rollMat
>3439	Identifier	rollMat
>3440	Identifier	yRoll0
>3441	Identifier	yRoll0
>3442	IdentifierDeclType	float
>3443	IdentifierDeclStatement	 
>3444	IdentifierDecl	xRoll1 = rollMat ( 0 , 1 )
>3445	AssignmentExpr	xRoll1 = rollMat ( 0 , 1 )
>3446	CallExpression	rollMat ( 0 , 1 )
>3447	ArgumentList	0
>3448	Argument	1
>3449	PrimaryExpression	1
>3450	Argument	0
>3451	PrimaryExpression	0
>3452	Callee	rollMat
>3453	Identifier	rollMat
>3454	Identifier	xRoll1
>3455	Identifier	xRoll1
>3456	IdentifierDeclType	float
>3457	IdentifierDeclStatement	 
>3458	IdentifierDecl	xRoll0 = rollMat ( 0 , 0 )
>3459	AssignmentExpr	xRoll0 = rollMat ( 0 , 0 )
>3460	CallExpression	rollMat ( 0 , 0 )
>3461	ArgumentList	0
>3462	Argument	0
>3463	PrimaryExpression	0
>3464	Argument	0
>3465	PrimaryExpression	0
>3466	Callee	rollMat
>3467	Identifier	rollMat
>3468	Identifier	xRoll0
>3469	Identifier	xRoll0
>3470	IdentifierDeclType	float
>3471	IdentifierDeclStatement	 
>3472	IdentifierDecl	rollMat = shortestBackRotation . toRotationMatrix ( ) * rotMatUnscaled
>3473	AssignmentExpr	rollMat = shortestBackRotation . toRotationMatrix ( ) * rotMatUnscaled
>3474	MultiplicativeExpression	shortestBackRotation . toRotationMatrix ( ) * rotMatUnscaled
>3475	Identifier	rotMatUnscaled
>3476	CallExpression	shortestBackRotation . toRotationMatrix ( )
>3477	ArgumentList	 
>3478	Callee	shortestBackRotation . toRotationMatrix
>3479	MemberAccess	shortestBackRotation . toRotationMatrix
>3480	Identifier	toRotationMatrix
>3481	Identifier	shortestBackRotation
>3482	Identifier	rollMat
>3483	Identifier	rollMat
>3484	IdentifierDeclType	Eigen 
>3485	ExpressionStatement	 
>3486	CallExpression	shortestBackRotation . setFromTwoVectors ( rotatedForwardVector , forwardVector )
>3487	ArgumentList	rotatedForwardVector
>3488	Argument	forwardVector
>3489	Identifier	forwardVector
>3490	Argument	rotatedForwardVector
>3491	Identifier	rotatedForwardVector
>3492	Callee	shortestBackRotation . setFromTwoVectors
>3493	MemberAccess	shortestBackRotation . setFromTwoVectors
>3494	Identifier	setFromTwoVectors
>3495	Identifier	shortestBackRotation
>3496	IdentifierDeclStatement	 
>3497	IdentifierDecl	shortestBackRotation
>3498	Identifier	shortestBackRotation
>3499	IdentifierDeclType	Eigen 
>3500	IdentifierDeclStatement	 
>3501	IdentifierDecl	rotatedForwardVector = rotMatUnscaled * forwardVector
>3502	AssignmentExpr	rotatedForwardVector = rotMatUnscaled * forwardVector
>3503	MultiplicativeExpression	rotMatUnscaled * forwardVector
>3504	Identifier	forwardVector
>3505	Identifier	rotMatUnscaled
>3506	Identifier	rotatedForwardVector
>3507	Identifier	rotatedForwardVector
>3508	IdentifierDeclType	Eigen 
>3509	IdentifierDeclStatement	 
>3510	IdentifierDecl	forwardVector ( 0 , 0 , - 1 )
>3511	Expression	0 , 0 , - 1
>3512	Expression	0 , - 1
>3513	UnaryOp	- 1
>3514	PrimaryExpression	1
>3515	UnaryOperator	-
>3516	PrimaryExpression	0
>3517	PrimaryExpression	0
>3518	Identifier	forwardVector
>3519	IdentifierDeclType	Eigen 
>3520	ExpressionStatement	 
>3521	Statement	 
>3522	Statement	 
>3523	Statement	 
>3524	Statement	 
>3525	Statement	 
>3526	Statement	 
>3527	Statement	 
>3528	Statement	 
>3529	Statement	 
>3530	Statement	 
>3531	Statement	 
>3532	Statement	 
>3533	Statement	 
>3534	Statement	 
>3535	Statement	 
>3536	Statement	 
>3537	Statement	 
>3538	ExpressionStatement	 
>3539	Statement	 
>3540	Statement	 
>3541	Statement	 
>3542	Statement	 
>3543	Statement	 
>3544	Statement	 
>3545	Statement	 
>3546	Statement	 
>3547	Statement	 
>3548	Statement	 
>3549	Statement	 
>3550	Statement	 
>3551	Statement	 
>3552	Statement	 
>3553	Statement	 
>3554	Statement	 
>3555	Statement	 
>3556	ExpressionStatement	 
>3557	Statement	 
>3558	Statement	 
>3559	Statement	 
>3560	Statement	 
>3561	Statement	 
>3562	Statement	 
>3563	Statement	 
>3564	Statement	 
>3565	Statement	 
>3566	Statement	 
>3567	Statement	 
>3568	Statement	 
>3569	Statement	 
>3570	Statement	 
>3571	Statement	 
>3572	Statement	 
>3573	Statement	 
>3574	Statement	 
>3575	Statement	 
>3576	Statement	 
>3577	Statement	 
>3578	IdentifierDeclStatement	 
>3579	IdentifierDecl	cy_l = KLvl ( 1 , 2 )
>3580	AssignmentExpr	cy_l = KLvl ( 1 , 2 )
>3581	CallExpression	KLvl ( 1 , 2 )
>3582	ArgumentList	1
>3583	Argument	2
>3584	PrimaryExpression	2
>3585	Argument	1
>3586	PrimaryExpression	1
>3587	Callee	KLvl
>3588	Identifier	KLvl
>3589	Identifier	cy_l
>3590	Identifier	cy_l
>3591	IdentifierDeclType	float
>3592	IdentifierDeclStatement	 
>3593	IdentifierDecl	cx_l = KLvl ( 0 , 2 )
>3594	AssignmentExpr	cx_l = KLvl ( 0 , 2 )
>3595	CallExpression	KLvl ( 0 , 2 )
>3596	ArgumentList	0
>3597	Argument	2
>3598	PrimaryExpression	2
>3599	Argument	0
>3600	PrimaryExpression	0
>3601	Callee	KLvl
>3602	Identifier	KLvl
>3603	Identifier	cx_l
>3604	Identifier	cx_l
>3605	IdentifierDeclType	float
>3606	IdentifierDeclStatement	 
>3607	IdentifierDecl	fy_l = KLvl ( 1 , 1 )
>3608	AssignmentExpr	fy_l = KLvl ( 1 , 1 )
>3609	CallExpression	KLvl ( 1 , 1 )
>3610	ArgumentList	1
>3611	Argument	1
>3612	PrimaryExpression	1
>3613	Argument	1
>3614	PrimaryExpression	1
>3615	Callee	KLvl
>3616	Identifier	KLvl
>3617	Identifier	fy_l
>3618	Identifier	fy_l
>3619	IdentifierDeclType	float
>3620	IdentifierDeclStatement	 
>3621	IdentifierDecl	fx_l = KLvl ( 0 , 0 )
>3622	AssignmentExpr	fx_l = KLvl ( 0 , 0 )
>3623	CallExpression	KLvl ( 0 , 0 )
>3624	ArgumentList	0
>3625	Argument	0
>3626	PrimaryExpression	0
>3627	Argument	0
>3628	PrimaryExpression	0
>3629	Callee	KLvl
>3630	Identifier	KLvl
>3631	Identifier	fx_l
>3632	Identifier	fx_l
>3633	IdentifierDeclType	float
>3634	IdentifierDeclStatement	 
>3635	IdentifierDecl	KLvl = frame -> K ( level )
>3636	AssignmentExpr	KLvl = frame -> K ( level )
>3637	CallExpression	frame -> K ( level )
>3638	ArgumentList	level
>3639	Argument	level
>3640	Identifier	level
>3641	Callee	frame -> K
>3642	PtrMemberAccess	frame -> K
>3643	Identifier	K
>3644	Identifier	frame
>3645	Identifier	KLvl
>3646	Identifier	KLvl
>3647	IdentifierDeclType	Eigen 
>3648	IdentifierDeclStatement	 
>3649	IdentifierDecl	h = frame -> height ( level )
>3650	AssignmentExpr	h = frame -> height ( level )
>3651	CallExpression	frame -> height ( level )
>3652	ArgumentList	level
>3653	Argument	level
>3654	Identifier	level
>3655	Callee	frame -> height
>3656	PtrMemberAccess	frame -> height
>3657	Identifier	height
>3658	Identifier	frame
>3659	Identifier	h
>3660	Identifier	h
>3661	IdentifierDeclType	int
>3662	IdentifierDeclStatement	 
>3663	IdentifierDecl	w = frame -> width ( level )
>3664	AssignmentExpr	w = frame -> width ( level )
>3665	CallExpression	frame -> width ( level )
>3666	ArgumentList	level
>3667	Argument	level
>3668	Identifier	level
>3669	Callee	frame -> width
>3670	PtrMemberAccess	frame -> width
>3671	Identifier	width
>3672	Identifier	frame
>3673	Identifier	w
>3674	Identifier	w
>3675	IdentifierDeclType	int
>3676	IfStatement	if ( plotWeights && plotSim3TrackingIterationInfo )
>3677	CompoundStatement	 
>3678	ExpressionStatement	 
>3679	CallExpression	fillCvMat ( & debugImageWeightedResD , col )
>3680	ArgumentList	& debugImageWeightedResD
>3681	Argument	col
>3682	Identifier	col
>3683	Argument	& debugImageWeightedResD
>3684	UnaryOp	& debugImageWeightedResD
>3685	Identifier	debugImageWeightedResD
>3686	UnaryOperator	&
>3687	Callee	fillCvMat
>3688	Identifier	fillCvMat
>3689	ExpressionStatement	 
>3690	CallExpression	fillCvMat ( & debugImageWeightedResP , col )
>3691	ArgumentList	& debugImageWeightedResP
>3692	Argument	col
>3693	Identifier	col
>3694	Argument	& debugImageWeightedResP
>3695	UnaryOp	& debugImageWeightedResP
>3696	Identifier	debugImageWeightedResP
>3697	UnaryOperator	&
>3698	Callee	fillCvMat
>3699	Identifier	fillCvMat
>3700	ExpressionStatement	 
>3701	CallExpression	fillCvMat ( & debugImageWeightP , col )
>3702	ArgumentList	& debugImageWeightP
>3703	Argument	col
>3704	Identifier	col
>3705	Argument	& debugImageWeightP
>3706	UnaryOp	& debugImageWeightP
>3707	Identifier	debugImageWeightP
>3708	UnaryOperator	&
>3709	Callee	fillCvMat
>3710	Identifier	fillCvMat
>3711	ExpressionStatement	 
>3712	CallExpression	fillCvMat ( & debugImageWeightD , col )
>3713	ArgumentList	& debugImageWeightD
>3714	Argument	col
>3715	Identifier	col
>3716	Argument	& debugImageWeightD
>3717	UnaryOp	& debugImageWeightD
>3718	Identifier	debugImageWeightD
>3719	UnaryOperator	&
>3720	Callee	fillCvMat
>3721	Identifier	fillCvMat
>3722	ExpressionStatement	 
>3723	CallExpression	fillCvMat ( & debugImageHuberWeight , col )
>3724	ArgumentList	& debugImageHuberWeight
>3725	Argument	col
>3726	Identifier	col
>3727	Argument	& debugImageHuberWeight
>3728	UnaryOp	& debugImageHuberWeight
>3729	Identifier	debugImageHuberWeight
>3730	UnaryOperator	&
>3731	Callee	fillCvMat
>3732	Identifier	fillCvMat
>3733	IdentifierDeclStatement	 
>3734	IdentifierDecl	col = cv 
>3735	AssignmentExpr	col = cv 
>3736	CallExpression	cv 
>3737	ArgumentList	255
>3738	Argument	168
>3739	PrimaryExpression	168
>3740	Argument	170
>3741	PrimaryExpression	170
>3742	Argument	255
>3743	PrimaryExpression	255
>3744	Callee	cv 
>3745	Identifier	cv 
>3746	Identifier	col
>3747	Identifier	col
>3748	IdentifierDeclType	cv 
>3749	Condition	 
>3750	AndExpression	plotWeights && plotSim3TrackingIterationInfo
>3751	Identifier	plotSim3TrackingIterationInfo
>3752	Identifier	plotWeights
>3753	IfStatement	if ( plotSim3TrackingIterationInfo )
>3754	CompoundStatement	 
>3755	ExpressionStatement	 
>3756	CallExpression	fillCvMat ( & debugImageDepthResiduals , col )
>3757	ArgumentList	& debugImageDepthResiduals
>3758	Argument	col
>3759	Identifier	col
>3760	Argument	& debugImageDepthResiduals
>3761	UnaryOp	& debugImageDepthResiduals
>3762	Identifier	debugImageDepthResiduals
>3763	UnaryOperator	&
>3764	Callee	fillCvMat
>3765	Identifier	fillCvMat
>3766	ExpressionStatement	 
>3767	CallExpression	fillCvMat ( & debugImageOldImageWarped , col )
>3768	ArgumentList	& debugImageOldImageWarped
>3769	Argument	col
>3770	Identifier	col
>3771	Argument	& debugImageOldImageWarped
>3772	UnaryOp	& debugImageOldImageWarped
>3773	Identifier	debugImageOldImageWarped
>3774	UnaryOperator	&
>3775	Callee	fillCvMat
>3776	Identifier	fillCvMat
>3777	ExpressionStatement	 
>3778	CallExpression	fillCvMat ( & debugImageOldImageSource , col )
>3779	ArgumentList	& debugImageOldImageSource
>3780	Argument	col
>3781	Identifier	col
>3782	Argument	& debugImageOldImageSource
>3783	UnaryOp	& debugImageOldImageSource
>3784	Identifier	debugImageOldImageSource
>3785	UnaryOperator	&
>3786	Callee	fillCvMat
>3787	Identifier	fillCvMat
>3788	ExpressionStatement	 
>3789	CallExpression	fillCvMat ( & debugImageResiduals , col )
>3790	ArgumentList	& debugImageResiduals
>3791	Argument	col
>3792	Identifier	col
>3793	Argument	& debugImageResiduals
>3794	UnaryOp	& debugImageResiduals
>3795	Identifier	debugImageResiduals
>3796	UnaryOperator	&
>3797	Callee	fillCvMat
>3798	Identifier	fillCvMat
>3799	IdentifierDeclStatement	 
>3800	IdentifierDecl	col = cv 
>3801	AssignmentExpr	col = cv 
>3802	CallExpression	cv 
>3803	ArgumentList	255
>3804	Argument	168
>3805	PrimaryExpression	168
>3806	Argument	170
>3807	PrimaryExpression	170
>3808	Argument	255
>3809	PrimaryExpression	255
>3810	Callee	cv 
>3811	Identifier	cv 
>3812	Identifier	col
>3813	Identifier	col
>3814	IdentifierDeclType	cv 
>3815	Condition	 
>3816	Identifier	plotSim3TrackingIterationInfo
>3976	FunctionDef	Sim3Tracker 
>3977	ParameterList	const Sim3 & referenceToFrame
>3978	Parameter	 
>3979	Identifier	referenceToFrame
>3980	ParameterType	const Sim3 &
>3981	ReturnType	Sim3ResidualStruct
>3982	CompoundStatement	 
>3983	ReturnStatement	 
>3984	Identifier	sumRes
>3985	ExpressionStatement	 
>3986	AssignmentExpr	sumRes . meanP = ( sumRes . sumResP ) / ( sumRes . numTermsP )
>3987	MultiplicativeExpression	( sumRes . sumResP ) / ( sumRes . numTermsP )
>3988	MemberAccess	sumRes . numTermsP
>3989	Identifier	numTermsP
>3990	Identifier	sumRes
>3991	MemberAccess	sumRes . sumResP
>3992	Identifier	sumResP
>3993	Identifier	sumRes
>3994	MemberAccess	sumRes . meanP
>3995	Identifier	meanP
>3996	Identifier	sumRes
>3997	ExpressionStatement	 
>3998	AssignmentExpr	sumRes . meanD = ( sumRes . sumResD ) / ( sumRes . numTermsD )
>3999	MultiplicativeExpression	( sumRes . sumResD ) / ( sumRes . numTermsD )
>4000	MemberAccess	sumRes . numTermsD
>4001	Identifier	numTermsD
>4002	Identifier	sumRes
>4003	MemberAccess	sumRes . sumResD
>4004	Identifier	sumResD
>4005	Identifier	sumRes
>4006	MemberAccess	sumRes . meanD
>4007	Identifier	meanD
>4008	Identifier	sumRes
>4009	ExpressionStatement	 
>4010	AssignmentExpr	sumRes . mean = ( sumRes . sumResD + sumRes . sumResP ) / ( sumRes . numTermsD + sumRes . numTermsP )
>4011	MultiplicativeExpression	( sumRes . sumResD + sumRes . sumResP ) / ( sumRes . numTermsD + sumRes . numTermsP )
>4012	AdditiveExpression	sumRes . numTermsD + sumRes . numTermsP
>4013	MemberAccess	sumRes . numTermsP
>4014	Identifier	numTermsP
>4015	Identifier	sumRes
>4016	MemberAccess	sumRes . numTermsD
>4017	Identifier	numTermsD
>4018	Identifier	sumRes
>4019	AdditiveExpression	sumRes . sumResD + sumRes . sumResP
>4020	MemberAccess	sumRes . sumResP
>4021	Identifier	sumResP
>4022	Identifier	sumRes
>4023	MemberAccess	sumRes . sumResD
>4024	Identifier	sumResD
>4025	Identifier	sumRes
>4026	MemberAccess	sumRes . mean
>4027	Identifier	mean
>4028	Identifier	sumRes
>4029	ExpressionStatement	 
>4030	AssignmentExpr	sumRes . numTermsD = SSEE ( numTermsD , 0 ) + SSEE ( numTermsD , 1 ) + SSEE ( numTermsD , 2 ) + SSEE ( \
>4031	AdditiveExpression	SSEE ( numTermsD , 0 ) + SSEE ( numTermsD , 1 ) + SSEE ( numTermsD , 2 ) + SSEE ( numTermsD , 3 )
>4032	AdditiveExpression	SSEE ( numTermsD , 1 ) + SSEE ( numTermsD , 2 ) + SSEE ( numTermsD , 3 )
>4033	AdditiveExpression	SSEE ( numTermsD , 2 ) + SSEE ( numTermsD , 3 )
>4034	CallExpression	SSEE ( numTermsD , 3 )
>4035	ArgumentList	numTermsD
>4036	Argument	3
>4037	PrimaryExpression	3
>4038	Argument	numTermsD
>4039	Identifier	numTermsD
>4040	Callee	SSEE
>4041	Identifier	SSEE
>4042	CallExpression	SSEE ( numTermsD , 2 )
>4043	ArgumentList	numTermsD
>4044	Argument	2
>4045	PrimaryExpression	2
>4046	Argument	numTermsD
>4047	Identifier	numTermsD
>4048	Callee	SSEE
>4049	Identifier	SSEE
>4050	CallExpression	SSEE ( numTermsD , 1 )
>4051	ArgumentList	numTermsD
>4052	Argument	1
>4053	PrimaryExpression	1
>4054	Argument	numTermsD
>4055	Identifier	numTermsD
>4056	Callee	SSEE
>4057	Identifier	SSEE
>4058	CallExpression	SSEE ( numTermsD , 0 )
>4059	ArgumentList	numTermsD
>4060	Argument	0
>4061	PrimaryExpression	0
>4062	Argument	numTermsD
>4063	Identifier	numTermsD
>4064	Callee	SSEE
>4065	Identifier	SSEE
>4066	MemberAccess	sumRes . numTermsD
>4067	Identifier	numTermsD
>4068	Identifier	sumRes
>4069	ExpressionStatement	 
>4070	AssignmentExpr	sumRes . sumResD = SSEE ( sumResD , 0 ) + SSEE ( sumResD , 1 ) + SSEE ( sumResD , 2 ) + SSEE ( sumResD , \
>4071	AdditiveExpression	SSEE ( sumResD , 0 ) + SSEE ( sumResD , 1 ) + SSEE ( sumResD , 2 ) + SSEE ( sumResD , 3 )
>4072	AdditiveExpression	SSEE ( sumResD , 1 ) + SSEE ( sumResD , 2 ) + SSEE ( sumResD , 3 )
>4073	AdditiveExpression	SSEE ( sumResD , 2 ) + SSEE ( sumResD , 3 )
>4074	CallExpression	SSEE ( sumResD , 3 )
>4075	ArgumentList	sumResD
>4076	Argument	3
>4077	PrimaryExpression	3
>4078	Argument	sumResD
>4079	Identifier	sumResD
>4080	Callee	SSEE
>4081	Identifier	SSEE
>4082	CallExpression	SSEE ( sumResD , 2 )
>4083	ArgumentList	sumResD
>4084	Argument	2
>4085	PrimaryExpression	2
>4086	Argument	sumResD
>4087	Identifier	sumResD
>4088	Callee	SSEE
>4089	Identifier	SSEE
>4090	CallExpression	SSEE ( sumResD , 1 )
>4091	ArgumentList	sumResD
>4092	Argument	1
>4093	PrimaryExpression	1
>4094	Argument	sumResD
>4095	Identifier	sumResD
>4096	Callee	SSEE
>4097	Identifier	SSEE
>4098	CallExpression	SSEE ( sumResD , 0 )
>4099	ArgumentList	sumResD
>4100	Argument	0
>4101	PrimaryExpression	0
>4102	Argument	sumResD
>4103	Identifier	sumResD
>4104	Callee	SSEE
>4105	Identifier	SSEE
>4106	MemberAccess	sumRes . sumResD
>4107	Identifier	sumResD
>4108	Identifier	sumRes
>4109	ExpressionStatement	 
>4110	AssignmentExpr	sumRes . numTermsP = ( buf_warped_size >> 2 ) << 2
>4111	ShiftExpression	( buf_warped_size >> 2 ) << 2
>4112	PrimaryExpression	2
>4113	ShiftExpression	buf_warped_size >> 2
>4114	PrimaryExpression	2
>4115	Identifier	buf_warped_size
>4116	MemberAccess	sumRes . numTermsP
>4117	Identifier	numTermsP
>4118	Identifier	sumRes
>4119	ExpressionStatement	 
>4120	AssignmentExpr	sumRes . sumResP = SSEE ( sumResP , 0 ) + SSEE ( sumResP , 1 ) + SSEE ( sumResP , 2 ) + SSEE ( sumResP , \
>4121	AdditiveExpression	SSEE ( sumResP , 0 ) + SSEE ( sumResP , 1 ) + SSEE ( sumResP , 2 ) + SSEE ( sumResP , 3 )
>4122	AdditiveExpression	SSEE ( sumResP , 1 ) + SSEE ( sumResP , 2 ) + SSEE ( sumResP , 3 )
>4123	AdditiveExpression	SSEE ( sumResP , 2 ) + SSEE ( sumResP , 3 )
>4124	CallExpression	SSEE ( sumResP , 3 )
>4125	ArgumentList	sumResP
>4126	Argument	3
>4127	PrimaryExpression	3
>4128	Argument	sumResP
>4129	Identifier	sumResP
>4130	Callee	SSEE
>4131	Identifier	SSEE
>4132	CallExpression	SSEE ( sumResP , 2 )
>4133	ArgumentList	sumResP
>4134	Argument	2
>4135	PrimaryExpression	2
>4136	Argument	sumResP
>4137	Identifier	sumResP
>4138	Callee	SSEE
>4139	Identifier	SSEE
>4140	CallExpression	SSEE ( sumResP , 1 )
>4141	ArgumentList	sumResP
>4142	Argument	1
>4143	PrimaryExpression	1
>4144	Argument	sumResP
>4145	Identifier	sumResP
>4146	Callee	SSEE
>4147	Identifier	SSEE
>4148	CallExpression	SSEE ( sumResP , 0 )
>4149	ArgumentList	sumResP
>4150	Argument	0
>4151	PrimaryExpression	0
>4152	Argument	sumResP
>4153	Identifier	sumResP
>4154	Callee	SSEE
>4155	Identifier	SSEE
>4156	MemberAccess	sumRes . sumResP
>4157	Identifier	sumResP
>4158	Identifier	sumRes
>4159	ForStatement	for ( int i = 0 ; i < buf_warped_size - 3 ; i += 4 )
>4160	CompoundStatement	 
>4161	ExpressionStatement	 
>4162	CallExpression	_mm_store_ps ( buf_weight_d + i , _mm_and_ps ( depthValid , _mm_mul_ps ( whs , w_ds ) ) )
>4163	ArgumentList	buf_weight_d + i
>4164	Argument	_mm_and_ps ( depthValid , _mm_mul_ps ( whs , w_ds ) )
>4165	CallExpression	_mm_and_ps ( depthValid , _mm_mul_ps ( whs , w_ds ) )
>4166	ArgumentList	depthValid
>4167	Argument	_mm_mul_ps ( whs , w_ds )
>4168	CallExpression	_mm_mul_ps ( whs , w_ds )
>4169	ArgumentList	whs
>4170	Argument	w_ds
>4171	Identifier	w_ds
>4172	Argument	whs
>4173	Identifier	whs
>4174	Callee	_mm_mul_ps
>4175	Identifier	_mm_mul_ps
>4176	Argument	depthValid
>4177	Identifier	depthValid
>4178	Callee	_mm_and_ps
>4179	Identifier	_mm_and_ps
>4180	Argument	buf_weight_d + i
>4181	AdditiveExpression	buf_weight_d + i
>4182	Identifier	i
>4183	Identifier	buf_weight_d
>4184	Callee	_mm_store_ps
>4185	Identifier	_mm_store_ps
>4186	ExpressionStatement	 
>4187	CallExpression	_mm_store_ps ( buf_weight_p + i , _mm_mul_ps ( whs , w_ps ) )
>4188	ArgumentList	buf_weight_p + i
>4189	Argument	_mm_mul_ps ( whs , w_ps )
>4190	CallExpression	_mm_mul_ps ( whs , w_ps )
>4191	ArgumentList	whs
>4192	Argument	w_ps
>4193	Identifier	w_ps
>4194	Argument	whs
>4195	Identifier	whs
>4196	Callee	_mm_mul_ps
>4197	Identifier	_mm_mul_ps
>4198	Argument	buf_weight_p + i
>4199	AdditiveExpression	buf_weight_p + i
>4200	Identifier	i
>4201	Identifier	buf_weight_p
>4202	Callee	_mm_store_ps
>4203	Identifier	_mm_store_ps
>4204	IfStatement	if ( i + 3 < buf_warped_size )
>4205	CompoundStatement	 
>4206	ExpressionStatement	 
>4207	AssignmentExpr	sumResP = _mm_add_ps ( sumResP , _mm_mul_ps ( whs , _mm_mul_ps ( weighted_rps , weighted_rps ) ) )
>4208	CallExpression	_mm_add_ps ( sumResP , _mm_mul_ps ( whs , _mm_mul_ps ( weighted_rps , weighted_rps ) ) )
>4209	ArgumentList	sumResP
>4210	Argument	_mm_mul_ps ( whs , _mm_mul_ps ( weighted_rps , weighted_rps ) )
>4211	CallExpression	_mm_mul_ps ( whs , _mm_mul_ps ( weighted_rps , weighted_rps ) )
>4212	ArgumentList	whs
>4213	Argument	_mm_mul_ps ( weighted_rps , weighted_rps )
>4214	CallExpression	_mm_mul_ps ( weighted_rps , weighted_rps )
>4215	ArgumentList	weighted_rps
>4216	Argument	weighted_rps
>4217	Identifier	weighted_rps
>4218	Argument	weighted_rps
>4219	Identifier	weighted_rps
>4220	Callee	_mm_mul_ps
>4221	Identifier	_mm_mul_ps
>4222	Argument	whs
>4223	Identifier	whs
>4224	Callee	_mm_mul_ps
>4225	Identifier	_mm_mul_ps
>4226	Argument	sumResP
>4227	Identifier	sumResP
>4228	Callee	_mm_add_ps
>4229	Identifier	_mm_add_ps
>4230	Identifier	sumResP
>4231	ExpressionStatement	 
>4232	AssignmentExpr	sumResD = _mm_add_ps ( sumResD , _mm_and_ps ( depthValid , _mm_mul_ps ( whs , _mm_mul_ps ( weighted_rds , \
>4233	CallExpression	_mm_add_ps ( sumResD , _mm_and_ps ( depthValid , _mm_mul_ps ( whs , _mm_mul_ps ( weighted_rds , weighted_rds ) ) ) )
>4234	ArgumentList	sumResD
>4235	Argument	_mm_and_ps ( depthValid , _mm_mul_ps ( whs , _mm_mul_ps ( weighted_rds , weighted_rds ) ) )
>4236	CallExpression	_mm_and_ps ( depthValid , _mm_mul_ps ( whs , _mm_mul_ps ( weighted_rds , weighted_rds ) ) )
>4237	ArgumentList	depthValid
>4238	Argument	_mm_mul_ps ( whs , _mm_mul_ps ( weighted_rds , weighted_rds ) )
>4239	CallExpression	_mm_mul_ps ( whs , _mm_mul_ps ( weighted_rds , weighted_rds ) )
>4240	ArgumentList	whs
>4241	Argument	_mm_mul_ps ( weighted_rds , weighted_rds )
>4242	CallExpression	_mm_mul_ps ( weighted_rds , weighted_rds )
>4243	ArgumentList	weighted_rds
>4244	Argument	weighted_rds
>4245	Identifier	weighted_rds
>4246	Argument	weighted_rds
>4247	Identifier	weighted_rds
>4248	Callee	_mm_mul_ps
>4249	Identifier	_mm_mul_ps
>4250	Argument	whs
>4251	Identifier	whs
>4252	Callee	_mm_mul_ps
>4253	Identifier	_mm_mul_ps
>4254	Argument	depthValid
>4255	Identifier	depthValid
>4256	Callee	_mm_and_ps
>4257	Identifier	_mm_and_ps
>4258	Argument	sumResD
>4259	Identifier	sumResD
>4260	Callee	_mm_add_ps
>4261	Identifier	_mm_add_ps
>4262	Identifier	sumResD
>4263	ExpressionStatement	 
>4264	AssignmentExpr	numTermsD = _mm_add_ps ( numTermsD , _mm_and_ps ( depthValid , ones ) )
>4265	CallExpression	_mm_add_ps ( numTermsD , _mm_and_ps ( depthValid , ones ) )
>4266	ArgumentList	numTermsD
>4267	Argument	_mm_and_ps ( depthValid , ones )
>4268	CallExpression	_mm_and_ps ( depthValid , ones )
>4269	ArgumentList	depthValid
>4270	Argument	ones
>4271	Identifier	ones
>4272	Argument	depthValid
>4273	Identifier	depthValid
>4274	Callee	_mm_and_ps
>4275	Identifier	_mm_and_ps
>4276	Argument	numTermsD
>4277	Identifier	numTermsD
>4278	Callee	_mm_add_ps
>4279	Identifier	_mm_add_ps
>4280	Identifier	numTermsD
>4281	Condition	 
>4282	RelationalExpression	i + 3 < buf_warped_size
>4283	Identifier	buf_warped_size
>4284	AdditiveExpression	i + 3
>4285	PrimaryExpression	3
>4286	Identifier	i
>4287	ExpressionStatement	 
>4288	AssignmentExpr	whs = _mm_or_ps ( _mm_and_ps ( whs , ones ) , _mm_andnot_ps ( whs , _mm_mul_ps ( huber_ress , _mm_rcp_\
>4289	CallExpression	_mm_or_ps ( _mm_and_ps ( whs , ones ) , _mm_andnot_ps ( whs , _mm_mul_ps ( huber_ress , _mm_rcp_ps ( weighted_abs_\
>4290	ArgumentList	_mm_and_ps ( whs , ones )
>4291	Argument	_mm_andnot_ps ( whs , _mm_mul_ps ( huber_ress , _mm_rcp_ps ( weighted_abs_ress ) ) )
>4292	CallExpression	_mm_andnot_ps ( whs , _mm_mul_ps ( huber_ress , _mm_rcp_ps ( weighted_abs_ress ) ) )
>4293	ArgumentList	whs
>4294	Argument	_mm_mul_ps ( huber_ress , _mm_rcp_ps ( weighted_abs_ress ) )
>4295	CallExpression	_mm_mul_ps ( huber_ress , _mm_rcp_ps ( weighted_abs_ress ) )
>4296	ArgumentList	huber_ress
>4297	Argument	_mm_rcp_ps ( weighted_abs_ress )
>4298	CallExpression	_mm_rcp_ps ( weighted_abs_ress )
>4299	ArgumentList	weighted_abs_ress
>4300	Argument	weighted_abs_ress
>4301	Identifier	weighted_abs_ress
>4302	Callee	_mm_rcp_ps
>4303	Identifier	_mm_rcp_ps
>4304	Argument	huber_ress
>4305	Identifier	huber_ress
>4306	Callee	_mm_mul_ps
>4307	Identifier	_mm_mul_ps
>4308	Argument	whs
>4309	Identifier	whs
>4310	Callee	_mm_andnot_ps
>4311	Identifier	_mm_andnot_ps
>4312	Argument	_mm_and_ps ( whs , ones )
>4313	CallExpression	_mm_and_ps ( whs , ones )
>4314	ArgumentList	whs
>4315	Argument	ones
>4316	Identifier	ones
>4317	Argument	whs
>4318	Identifier	whs
>4319	Callee	_mm_and_ps
>4320	Identifier	_mm_and_ps
>4321	Callee	_mm_or_ps
>4322	Identifier	_mm_or_ps
>4323	Identifier	whs
>4324	IdentifierDeclStatement	 
>4325	IdentifierDecl	whs = _mm_cmplt_ps ( weighted_abs_ress , huber_ress )
>4326	AssignmentExpr	whs = _mm_cmplt_ps ( weighted_abs_ress , huber_ress )
>4327	CallExpression	_mm_cmplt_ps ( weighted_abs_ress , huber_ress )
>4328	ArgumentList	weighted_abs_ress
>4329	Argument	huber_ress
>4330	Identifier	huber_ress
>4331	Argument	weighted_abs_ress
>4332	Identifier	weighted_abs_ress
>4333	Callee	_mm_cmplt_ps
>4334	Identifier	_mm_cmplt_ps
>4335	Identifier	whs
>4336	Identifier	whs
>4337	IdentifierDeclType	__m128
>4338	IdentifierDeclStatement	 
>4339	IdentifierDecl	weighted_abs_ress = _mm_add_ps ( _mm_and_ps ( weighted_rds , depthValid ) , weighted_rps )
>4340	AssignmentExpr	weighted_abs_ress = _mm_add_ps ( _mm_and_ps ( weighted_rds , depthValid ) , weighted_rps )
>4341	CallExpression	_mm_add_ps ( _mm_and_ps ( weighted_rds , depthValid ) , weighted_rps )
>4342	ArgumentList	_mm_and_ps ( weighted_rds , depthValid )
>4343	Argument	weighted_rps
>4344	Identifier	weighted_rps
>4345	Argument	_mm_and_ps ( weighted_rds , depthValid )
>4346	CallExpression	_mm_and_ps ( weighted_rds , depthValid )
>4347	ArgumentList	weighted_rds
>4348	Argument	depthValid
>4349	Identifier	depthValid
>4350	Argument	weighted_rds
>4351	Identifier	weighted_rds
>4352	Callee	_mm_and_ps
>4353	Identifier	_mm_and_ps
>4354	Callee	_mm_add_ps
>4355	Identifier	_mm_add_ps
>4356	Identifier	weighted_abs_ress
>4357	Identifier	weighted_abs_ress
>4358	IdentifierDeclType	__m128
>4359	IdentifierDeclStatement	 
>4360	IdentifierDecl	depthValid = _mm_cmplt_ps ( zeros , _mm_load_ps ( buf_warped_idepthVar + i ) )
>4361	AssignmentExpr	depthValid = _mm_cmplt_ps ( zeros , _mm_load_ps ( buf_warped_idepthVar + i ) )
>4362	CallExpression	_mm_cmplt_ps ( zeros , _mm_load_ps ( buf_warped_idepthVar + i ) )
>4363	ArgumentList	zeros
>4364	Argument	_mm_load_ps ( buf_warped_idepthVar + i )
>4365	CallExpression	_mm_load_ps ( buf_warped_idepthVar + i )
>4366	ArgumentList	buf_warped_idepthVar + i
>4367	Argument	buf_warped_idepthVar + i
>4368	AdditiveExpression	buf_warped_idepthVar + i
>4369	Identifier	i
>4370	Identifier	buf_warped_idepthVar
>4371	Callee	_mm_load_ps
>4372	Identifier	_mm_load_ps
>4373	Argument	zeros
>4374	Identifier	zeros
>4375	Callee	_mm_cmplt_ps
>4376	Identifier	_mm_cmplt_ps
>4377	Identifier	depthValid
>4378	Identifier	depthValid
>4379	IdentifierDeclType	__m128
>4380	ExpressionStatement	 
>4381	AssignmentExpr	weighted_rds = _mm_max_ps ( weighted_rds , _mm_sub_ps ( zeros , weighted_rds ) )
>4382	CallExpression	_mm_max_ps ( weighted_rds , _mm_sub_ps ( zeros , weighted_rds ) )
>4383	ArgumentList	weighted_rds
>4384	Argument	_mm_sub_ps ( zeros , weighted_rds )
>4385	CallExpression	_mm_sub_ps ( zeros , weighted_rds )
>4386	ArgumentList	zeros
>4387	Argument	weighted_rds
>4388	Identifier	weighted_rds
>4389	Argument	zeros
>4390	Identifier	zeros
>4391	Callee	_mm_sub_ps
>4392	Identifier	_mm_sub_ps
>4393	Argument	weighted_rds
>4394	Identifier	weighted_rds
>4395	Callee	_mm_max_ps
>4396	Identifier	_mm_max_ps
>4397	Identifier	weighted_rds
>4398	IdentifierDeclStatement	 
>4399	IdentifierDecl	weighted_rds = _mm_mul_ps ( _mm_load_ps ( buf_residual_d + i ) , _mm_sqrt_ps ( w_ds ) )
>4400	AssignmentExpr	weighted_rds = _mm_mul_ps ( _mm_load_ps ( buf_residual_d + i ) , _mm_sqrt_ps ( w_ds ) )
>4401	CallExpression	_mm_mul_ps ( _mm_load_ps ( buf_residual_d + i ) , _mm_sqrt_ps ( w_ds ) )
>4402	ArgumentList	_mm_load_ps ( buf_residual_d + i )
>4403	Argument	_mm_sqrt_ps ( w_ds )
>4404	CallExpression	_mm_sqrt_ps ( w_ds )
>4405	ArgumentList	w_ds
>4406	Argument	w_ds
>4407	Identifier	w_ds
>4408	Callee	_mm_sqrt_ps
>4409	Identifier	_mm_sqrt_ps
>4410	Argument	_mm_load_ps ( buf_residual_d + i )
>4411	CallExpression	_mm_load_ps ( buf_residual_d + i )
>4412	ArgumentList	buf_residual_d + i
>4413	Argument	buf_residual_d + i
>4414	AdditiveExpression	buf_residual_d + i
>4415	Identifier	i
>4416	Identifier	buf_residual_d
>4417	Callee	_mm_load_ps
>4418	Identifier	_mm_load_ps
>4419	Callee	_mm_mul_ps
>4420	Identifier	_mm_mul_ps
>4421	Identifier	weighted_rds
>4422	Identifier	weighted_rds
>4423	IdentifierDeclType	__m128
>4424	ExpressionStatement	 
>4425	AssignmentExpr	weighted_rps = _mm_max_ps ( weighted_rps , _mm_sub_ps ( zeros , weighted_rps ) )
>4426	CallExpression	_mm_max_ps ( weighted_rps , _mm_sub_ps ( zeros , weighted_rps ) )
>4427	ArgumentList	weighted_rps
>4428	Argument	_mm_sub_ps ( zeros , weighted_rps )
>4429	CallExpression	_mm_sub_ps ( zeros , weighted_rps )
>4430	ArgumentList	zeros
>4431	Argument	weighted_rps
>4432	Identifier	weighted_rps
>4433	Argument	zeros
>4434	Identifier	zeros
>4435	Callee	_mm_sub_ps
>4436	Identifier	_mm_sub_ps
>4437	Argument	weighted_rps
>4438	Identifier	weighted_rps
>4439	Callee	_mm_max_ps
>4440	Identifier	_mm_max_ps
>4441	Identifier	weighted_rps
>4442	IdentifierDeclStatement	 
>4443	IdentifierDecl	weighted_rps = _mm_mul_ps ( _mm_load_ps ( buf_warped_residual + i ) , _mm_sqrt_ps ( w_ps ) )
>4444	AssignmentExpr	weighted_rps = _mm_mul_ps ( _mm_load_ps ( buf_warped_residual + i ) , _mm_sqrt_ps ( w_ps ) )
>4445	CallExpression	_mm_mul_ps ( _mm_load_ps ( buf_warped_residual + i ) , _mm_sqrt_ps ( w_ps ) )
>4446	ArgumentList	_mm_load_ps ( buf_warped_residual + i )
>4447	Argument	_mm_sqrt_ps ( w_ps )
>4448	CallExpression	_mm_sqrt_ps ( w_ps )
>4449	ArgumentList	w_ps
>4450	Argument	w_ps
>4451	Identifier	w_ps
>4452	Callee	_mm_sqrt_ps
>4453	Identifier	_mm_sqrt_ps
>4454	Argument	_mm_load_ps ( buf_warped_residual + i )
>4455	CallExpression	_mm_load_ps ( buf_warped_residual + i )
>4456	ArgumentList	buf_warped_residual + i
>4457	Argument	buf_warped_residual + i
>4458	AdditiveExpression	buf_warped_residual + i
>4459	Identifier	i
>4460	Identifier	buf_warped_residual
>4461	Callee	_mm_load_ps
>4462	Identifier	_mm_load_ps
>4463	Callee	_mm_mul_ps
>4464	Identifier	_mm_mul_ps
>4465	Identifier	weighted_rps
>4466	Identifier	weighted_rps
>4467	IdentifierDeclType	__m128
>4468	IdentifierDeclStatement	 
>4469	IdentifierDecl	w_ds = _mm_rcp_ps ( _mm_add_ps ( _mm_load_ps ( buf_warped_idepthVar + i ) , _mm_mul_ps ( g2s , _mm_mul_ps ( g2s , _\
>4470	AssignmentExpr	w_ds = _mm_rcp_ps ( _mm_add_ps ( _mm_load_ps ( buf_warped_idepthVar + i ) , _mm_mul_ps ( g2s , _mm_mul_\
>4471	CallExpression	_mm_rcp_ps ( _mm_add_ps ( _mm_load_ps ( buf_warped_idepthVar + i ) , _mm_mul_ps ( g2s , _mm_mul_ps ( g2s , _mm_mul_\
>4472	ArgumentList	_mm_add_ps ( _mm_load_ps ( buf_warped_idepthVar + i ) , _mm_mul_ps ( g2s , _mm_mul_ps ( g2s , _mm_mul_ps ( depthVarFacs , _\
>4473	Argument	_mm_add_ps ( _mm_load_ps ( buf_warped_idepthVar + i ) , _mm_mul_ps ( g2s , _mm_mul_ps ( g2s , _mm_mul_ps ( depthVarFacs , _\
>4474	CallExpression	_mm_add_ps ( _mm_load_ps ( buf_warped_idepthVar + i ) , _mm_mul_ps ( g2s , _mm_mul_ps ( g2s , _mm_mul_ps ( depthVarFacs , _\
>4475	ArgumentList	_mm_load_ps ( buf_warped_idepthVar + i )
>4476	Argument	_mm_mul_ps ( g2s , _mm_mul_ps ( g2s , _mm_mul_ps ( depthVarFacs , _mm_load_ps ( buf_idepthVar + i ) ) ) )
>4477	CallExpression	_mm_mul_ps ( g2s , _mm_mul_ps ( g2s , _mm_mul_ps ( depthVarFacs , _mm_load_ps ( buf_idepthVar + i ) ) ) )
>4478	ArgumentList	g2s
>4479	Argument	_mm_mul_ps ( g2s , _mm_mul_ps ( depthVarFacs , _mm_load_ps ( buf_idepthVar + i ) ) )
>4480	CallExpression	_mm_mul_ps ( g2s , _mm_mul_ps ( depthVarFacs , _mm_load_ps ( buf_idepthVar + i ) ) )
>4481	ArgumentList	g2s
>4482	Argument	_mm_mul_ps ( depthVarFacs , _mm_load_ps ( buf_idepthVar + i ) )
>4483	CallExpression	_mm_mul_ps ( depthVarFacs , _mm_load_ps ( buf_idepthVar + i ) )
>4484	ArgumentList	depthVarFacs
>4485	Argument	_mm_load_ps ( buf_idepthVar + i )
>4486	CallExpression	_mm_load_ps ( buf_idepthVar + i )
>4487	ArgumentList	buf_idepthVar + i
>4488	Argument	buf_idepthVar + i
>4489	AdditiveExpression	buf_idepthVar + i
>4490	Identifier	i
>4491	Identifier	buf_idepthVar
>4492	Callee	_mm_load_ps
>4493	Identifier	_mm_load_ps
>4494	Argument	depthVarFacs
>4495	Identifier	depthVarFacs
>4496	Callee	_mm_mul_ps
>4497	Identifier	_mm_mul_ps
>4498	Argument	g2s
>4499	Identifier	g2s
>4500	Callee	_mm_mul_ps
>4501	Identifier	_mm_mul_ps
>4502	Argument	g2s
>4503	Identifier	g2s
>4504	Callee	_mm_mul_ps
>4505	Identifier	_mm_mul_ps
>4506	Argument	_mm_load_ps ( buf_warped_idepthVar + i )
>4507	CallExpression	_mm_load_ps ( buf_warped_idepthVar + i )
>4508	ArgumentList	buf_warped_idepthVar + i
>4509	Argument	buf_warped_idepthVar + i
>4510	AdditiveExpression	buf_warped_idepthVar + i
>4511	Identifier	i
>4512	Identifier	buf_warped_idepthVar
>4513	Callee	_mm_load_ps
>4514	Identifier	_mm_load_ps
>4515	Callee	_mm_add_ps
>4516	Identifier	_mm_add_ps
>4517	Callee	_mm_rcp_ps
>4518	Identifier	_mm_rcp_ps
>4519	Identifier	w_ds
>4520	Identifier	w_ds
>4521	IdentifierDeclType	__m128
>4522	IdentifierDeclStatement	 
>4523	IdentifierDecl	w_ps = _mm_rcp_ps ( _mm_add_ps ( sigma_i2s , _mm_mul_ps ( drpdds , _mm_mul_ps ( drpdds , _mm_mul_ps ( depthVarFacs , _\
>4524	AssignmentExpr	w_ps = _mm_rcp_ps ( _mm_add_ps ( sigma_i2s , _mm_mul_ps ( drpdds , _mm_mul_ps ( drpdds , _mm_mul_ps ( \
>4525	CallExpression	_mm_rcp_ps ( _mm_add_ps ( sigma_i2s , _mm_mul_ps ( drpdds , _mm_mul_ps ( drpdds , _mm_mul_ps ( depthVarFacs , _mm_\
>4526	ArgumentList	_mm_add_ps ( sigma_i2s , _mm_mul_ps ( drpdds , _mm_mul_ps ( drpdds , _mm_mul_ps ( depthVarFacs , _mm_load_ps ( buf_\
>4527	Argument	_mm_add_ps ( sigma_i2s , _mm_mul_ps ( drpdds , _mm_mul_ps ( drpdds , _mm_mul_ps ( depthVarFacs , _mm_load_ps ( buf_\
>4528	CallExpression	_mm_add_ps ( sigma_i2s , _mm_mul_ps ( drpdds , _mm_mul_ps ( drpdds , _mm_mul_ps ( depthVarFacs , _mm_load_ps ( buf_\
>4529	ArgumentList	sigma_i2s
>4530	Argument	_mm_mul_ps ( drpdds , _mm_mul_ps ( drpdds , _mm_mul_ps ( depthVarFacs , _mm_load_ps ( buf_idepthVar + i ) ) ) )
>4531	CallExpression	_mm_mul_ps ( drpdds , _mm_mul_ps ( drpdds , _mm_mul_ps ( depthVarFacs , _mm_load_ps ( buf_idepthVar + i ) ) ) )
>4532	ArgumentList	drpdds
>4533	Argument	_mm_mul_ps ( drpdds , _mm_mul_ps ( depthVarFacs , _mm_load_ps ( buf_idepthVar + i ) ) )
>4534	CallExpression	_mm_mul_ps ( drpdds , _mm_mul_ps ( depthVarFacs , _mm_load_ps ( buf_idepthVar + i ) ) )
>4535	ArgumentList	drpdds
>4536	Argument	_mm_mul_ps ( depthVarFacs , _mm_load_ps ( buf_idepthVar + i ) )
>4537	CallExpression	_mm_mul_ps ( depthVarFacs , _mm_load_ps ( buf_idepthVar + i ) )
>4538	ArgumentList	depthVarFacs
>4539	Argument	_mm_load_ps ( buf_idepthVar + i )
>4540	CallExpression	_mm_load_ps ( buf_idepthVar + i )
>4541	ArgumentList	buf_idepthVar + i
>4542	Argument	buf_idepthVar + i
>4543	AdditiveExpression	buf_idepthVar + i
>4544	Identifier	i
>4545	Identifier	buf_idepthVar
>4546	Callee	_mm_load_ps
>4547	Identifier	_mm_load_ps
>4548	Argument	depthVarFacs
>4549	Identifier	depthVarFacs
>4550	Callee	_mm_mul_ps
>4551	Identifier	_mm_mul_ps
>4552	Argument	drpdds
>4553	Identifier	drpdds
>4554	Callee	_mm_mul_ps
>4555	Identifier	_mm_mul_ps
>4556	Argument	drpdds
>4557	Identifier	drpdds
>4558	Callee	_mm_mul_ps
>4559	Identifier	_mm_mul_ps
>4560	Argument	sigma_i2s
>4561	Identifier	sigma_i2s
>4562	Callee	_mm_add_ps
>4563	Identifier	_mm_add_ps
>4564	Callee	_mm_rcp_ps
>4565	Identifier	_mm_rcp_ps
>4566	Identifier	w_ps
>4567	Identifier	w_ps
>4568	IdentifierDeclType	__m128
>4569	IdentifierDeclStatement	 
>4570	IdentifierDecl	drpdds = _mm_add_ps ( _mm_mul_ps ( g0s , _mm_load_ps ( buf_warped_dx + i ) ) , _mm_mul_ps ( g1s , _mm_load_ps ( \
>4571	AssignmentExpr	drpdds = _mm_add_ps ( _mm_mul_ps ( g0s , _mm_load_ps ( buf_warped_dx + i ) ) , _mm_mul_ps ( g1s , _mm_\
>4572	CallExpression	_mm_add_ps ( _mm_mul_ps ( g0s , _mm_load_ps ( buf_warped_dx + i ) ) , _mm_mul_ps ( g1s , _mm_load_ps ( buf_warped_\
>4573	ArgumentList	_mm_mul_ps ( g0s , _mm_load_ps ( buf_warped_dx + i ) )
>4574	Argument	_mm_mul_ps ( g1s , _mm_load_ps ( buf_warped_dy + i ) )
>4575	CallExpression	_mm_mul_ps ( g1s , _mm_load_ps ( buf_warped_dy + i ) )
>4576	ArgumentList	g1s
>4577	Argument	_mm_load_ps ( buf_warped_dy + i )
>4578	CallExpression	_mm_load_ps ( buf_warped_dy + i )
>4579	ArgumentList	buf_warped_dy + i
>4580	Argument	buf_warped_dy + i
>4581	AdditiveExpression	buf_warped_dy + i
>4582	Identifier	i
>4583	Identifier	buf_warped_dy
>4584	Callee	_mm_load_ps
>4585	Identifier	_mm_load_ps
>4586	Argument	g1s
>4587	Identifier	g1s
>4588	Callee	_mm_mul_ps
>4589	Identifier	_mm_mul_ps
>4590	Argument	_mm_mul_ps ( g0s , _mm_load_ps ( buf_warped_dx + i ) )
>4591	CallExpression	_mm_mul_ps ( g0s , _mm_load_ps ( buf_warped_dx + i ) )
>4592	ArgumentList	g0s
>4593	Argument	_mm_load_ps ( buf_warped_dx + i )
>4594	CallExpression	_mm_load_ps ( buf_warped_dx + i )
>4595	ArgumentList	buf_warped_dx + i
>4596	Argument	buf_warped_dx + i
>4597	AdditiveExpression	buf_warped_dx + i
>4598	Identifier	i
>4599	Identifier	buf_warped_dx
>4600	Callee	_mm_load_ps
>4601	Identifier	_mm_load_ps
>4602	Argument	g0s
>4603	Identifier	g0s
>4604	Callee	_mm_mul_ps
>4605	Identifier	_mm_mul_ps
>4606	Callee	_mm_add_ps
>4607	Identifier	_mm_add_ps
>4608	Identifier	drpdds
>4609	Identifier	drpdds
>4610	IdentifierDeclType	__m128
>4611	ExpressionStatement	 
>4612	AssignmentExpr	g2s = _mm_mul_ps ( g2s , pz2ds )
>4613	CallExpression	_mm_mul_ps ( g2s , pz2ds )
>4614	ArgumentList	g2s
>4615	Argument	pz2ds
>4616	Identifier	pz2ds
>4617	Argument	g2s
>4618	Identifier	g2s
>4619	Callee	_mm_mul_ps
>4620	Identifier	_mm_mul_ps
>4621	Identifier	g2s
>4622	IdentifierDeclStatement	 
>4623	IdentifierDecl	g2s = _mm_sub_ps ( pzs , tzs )
>4624	AssignmentExpr	g2s = _mm_sub_ps ( pzs , tzs )
>4625	CallExpression	_mm_sub_ps ( pzs , tzs )
>4626	ArgumentList	pzs
>4627	Argument	tzs
>4628	Identifier	tzs
>4629	Argument	pzs
>4630	Identifier	pzs
>4631	Callee	_mm_sub_ps
>4632	Identifier	_mm_sub_ps
>4633	Identifier	g2s
>4634	Identifier	g2s
>4635	IdentifierDeclType	__m128
>4636	ExpressionStatement	 
>4637	AssignmentExpr	g1s = _mm_mul_ps ( g1s , pz2ds )
>4638	CallExpression	_mm_mul_ps ( g1s , pz2ds )
>4639	ArgumentList	g1s
>4640	Argument	pz2ds
>4641	Identifier	pz2ds
>4642	Argument	g1s
>4643	Identifier	g1s
>4644	Callee	_mm_mul_ps
>4645	Identifier	_mm_mul_ps
>4646	Identifier	g1s
>4647	IdentifierDeclStatement	 
>4648	IdentifierDecl	g1s = _mm_sub_ps ( _mm_mul_ps ( pzs , tys ) , _mm_mul_ps ( _mm_load_ps ( buf_warped_y + i ) , tzs ) )
>4649	AssignmentExpr	g1s = _mm_sub_ps ( _mm_mul_ps ( pzs , tys ) , _mm_mul_ps ( _mm_load_ps ( buf_warped_y + i ) , tzs ) )
>4650	CallExpression	_mm_sub_ps ( _mm_mul_ps ( pzs , tys ) , _mm_mul_ps ( _mm_load_ps ( buf_warped_y + i ) , tzs ) )
>4651	ArgumentList	_mm_mul_ps ( pzs , tys )
>4652	Argument	_mm_mul_ps ( _mm_load_ps ( buf_warped_y + i ) , tzs )
>4653	CallExpression	_mm_mul_ps ( _mm_load_ps ( buf_warped_y + i ) , tzs )
>4654	ArgumentList	_mm_load_ps ( buf_warped_y + i )
>4655	Argument	tzs
>4656	Identifier	tzs
>4657	Argument	_mm_load_ps ( buf_warped_y + i )
>4658	CallExpression	_mm_load_ps ( buf_warped_y + i )
>4659	ArgumentList	buf_warped_y + i
>4660	Argument	buf_warped_y + i
>4661	AdditiveExpression	buf_warped_y + i
>4662	Identifier	i
>4663	Identifier	buf_warped_y
>4664	Callee	_mm_load_ps
>4665	Identifier	_mm_load_ps
>4666	Callee	_mm_mul_ps
>4667	Identifier	_mm_mul_ps
>4668	Argument	_mm_mul_ps ( pzs , tys )
>4669	CallExpression	_mm_mul_ps ( pzs , tys )
>4670	ArgumentList	pzs
>4671	Argument	tys
>4672	Identifier	tys
>4673	Argument	pzs
>4674	Identifier	pzs
>4675	Callee	_mm_mul_ps
>4676	Identifier	_mm_mul_ps
>4677	Callee	_mm_sub_ps
>4678	Identifier	_mm_sub_ps
>4679	Identifier	g1s
>4680	Identifier	g1s
>4681	IdentifierDeclType	__m128
>4682	ExpressionStatement	 
>4683	AssignmentExpr	g0s = _mm_mul_ps ( g0s , pz2ds )
>4684	CallExpression	_mm_mul_ps ( g0s , pz2ds )
>4685	ArgumentList	g0s
>4686	Argument	pz2ds
>4687	Identifier	pz2ds
>4688	Argument	g0s
>4689	Identifier	g0s
>4690	Callee	_mm_mul_ps
>4691	Identifier	_mm_mul_ps
>4692	Identifier	g0s
>4693	IdentifierDeclStatement	 
>4694	IdentifierDecl	g0s = _mm_sub_ps ( _mm_mul_ps ( pzs , txs ) , _mm_mul_ps ( _mm_load_ps ( buf_warped_x + i ) , tzs ) )
>4695	AssignmentExpr	g0s = _mm_sub_ps ( _mm_mul_ps ( pzs , txs ) , _mm_mul_ps ( _mm_load_ps ( buf_warped_x + i ) , tzs ) )
>4696	CallExpression	_mm_sub_ps ( _mm_mul_ps ( pzs , txs ) , _mm_mul_ps ( _mm_load_ps ( buf_warped_x + i ) , tzs ) )
>4697	ArgumentList	_mm_mul_ps ( pzs , txs )
>4698	Argument	_mm_mul_ps ( _mm_load_ps ( buf_warped_x + i ) , tzs )
>4699	CallExpression	_mm_mul_ps ( _mm_load_ps ( buf_warped_x + i ) , tzs )
>4700	ArgumentList	_mm_load_ps ( buf_warped_x + i )
>4701	Argument	tzs
>4702	Identifier	tzs
>4703	Argument	_mm_load_ps ( buf_warped_x + i )
>4704	CallExpression	_mm_load_ps ( buf_warped_x + i )
>4705	ArgumentList	buf_warped_x + i
>4706	Argument	buf_warped_x + i
>4707	AdditiveExpression	buf_warped_x + i
>4708	Identifier	i
>4709	Identifier	buf_warped_x
>4710	Callee	_mm_load_ps
>4711	Identifier	_mm_load_ps
>4712	Callee	_mm_mul_ps
>4713	Identifier	_mm_mul_ps
>4714	Argument	_mm_mul_ps ( pzs , txs )
>4715	CallExpression	_mm_mul_ps ( pzs , txs )
>4716	ArgumentList	pzs
>4717	Argument	txs
>4718	Identifier	txs
>4719	Argument	pzs
>4720	Identifier	pzs
>4721	Callee	_mm_mul_ps
>4722	Identifier	_mm_mul_ps
>4723	Callee	_mm_sub_ps
>4724	Identifier	_mm_sub_ps
>4725	Identifier	g0s
>4726	Identifier	g0s
>4727	IdentifierDeclType	__m128
>4728	IdentifierDeclStatement	 
>4729	IdentifierDecl	pz2ds = _mm_rcp_ps ( _mm_mul_ps ( _mm_mul_ps ( pzs , pzs ) , _mm_load_ps ( buf_d + i ) ) )
>4730	AssignmentExpr	pz2ds = _mm_rcp_ps ( _mm_mul_ps ( _mm_mul_ps ( pzs , pzs ) , _mm_load_ps ( buf_d + i ) ) )
>4731	CallExpression	_mm_rcp_ps ( _mm_mul_ps ( _mm_mul_ps ( pzs , pzs ) , _mm_load_ps ( buf_d + i ) ) )
>4732	ArgumentList	_mm_mul_ps ( _mm_mul_ps ( pzs , pzs ) , _mm_load_ps ( buf_d + i ) )
>4733	Argument	_mm_mul_ps ( _mm_mul_ps ( pzs , pzs ) , _mm_load_ps ( buf_d + i ) )
>4734	CallExpression	_mm_mul_ps ( _mm_mul_ps ( pzs , pzs ) , _mm_load_ps ( buf_d + i ) )
>4735	ArgumentList	_mm_mul_ps ( pzs , pzs )
>4736	Argument	_mm_load_ps ( buf_d + i )
>4737	CallExpression	_mm_load_ps ( buf_d + i )
>4738	ArgumentList	buf_d + i
>4739	Argument	buf_d + i
>4740	AdditiveExpression	buf_d + i
>4741	Identifier	i
>4742	Identifier	buf_d
>4743	Callee	_mm_load_ps
>4744	Identifier	_mm_load_ps
>4745	Argument	_mm_mul_ps ( pzs , pzs )
>4746	CallExpression	_mm_mul_ps ( pzs , pzs )
>4747	ArgumentList	pzs
>4748	Argument	pzs
>4749	Identifier	pzs
>4750	Argument	pzs
>4751	Identifier	pzs
>4752	Callee	_mm_mul_ps
>4753	Identifier	_mm_mul_ps
>4754	Callee	_mm_mul_ps
>4755	Identifier	_mm_mul_ps
>4756	Callee	_mm_rcp_ps
>4757	Identifier	_mm_rcp_ps
>4758	Identifier	pz2ds
>4759	Identifier	pz2ds
>4760	IdentifierDeclType	__m128
>4761	IdentifierDeclStatement	 
>4762	IdentifierDecl	pzs = _mm_load_ps ( buf_warped_z + i )
>4763	AssignmentExpr	pzs = _mm_load_ps ( buf_warped_z + i )
>4764	CallExpression	_mm_load_ps ( buf_warped_z + i )
>4765	ArgumentList	buf_warped_z + i
>4766	Argument	buf_warped_z + i
>4767	AdditiveExpression	buf_warped_z + i
>4768	Identifier	i
>4769	Identifier	buf_warped_z
>4770	Callee	_mm_load_ps
>4771	Identifier	_mm_load_ps
>4772	Identifier	pzs
>4773	Identifier	pzs
>4774	IdentifierDeclType	__m128
>4775	AssignmentExpr	 
>4776	PrimaryExpression	4
>4777	Identifier	i
>4778	Condition	 
>4779	RelationalExpression	i < buf_warped_size - 3
>4780	AdditiveExpression	buf_warped_size - 3
>4781	PrimaryExpression	3
>4782	Identifier	buf_warped_size
>4783	Identifier	i
>4784	ForInit	 
>4785	IdentifierDeclStatement	int i = 0 ;
>4786	IdentifierDecl	i = 0
>4787	AssignmentExpr	i = 0
>4788	PrimaryExpression	0
>4789	Identifier	i
>4790	Identifier	i
>4791	IdentifierDeclType	int
>4792	ExpressionStatement	 
>4793	CallExpression	memset ( & sumRes , 0 , sizeof ( Sim3ResidualStruct ) )
>4794	ArgumentList	& sumRes
>4795	Argument	sizeof ( Sim3ResidualStruct )
>4796	SizeofExpr	sizeof ( Sim3ResidualStruct )
>4797	SizeofOperand	Sim3ResidualStruct
>4798	Sizeof	sizeof
>4799	Argument	0
>4800	PrimaryExpression	0
>4801	Argument	& sumRes
>4802	UnaryOp	& sumRes
>4803	Identifier	sumRes
>4804	UnaryOperator	&
>4805	Callee	memset
>4806	Identifier	memset
>4807	IdentifierDeclStatement	 
>4808	IdentifierDecl	sumRes
>4809	Identifier	sumRes
>4810	IdentifierDeclType	Sim3ResidualStruct
>4811	IdentifierDeclStatement	 
>4812	IdentifierDecl	numTermsD = zeros
>4813	AssignmentExpr	numTermsD = zeros
>4814	Identifier	zeros
>4815	Identifier	zeros
>4816	Identifier	numTermsD
>4817	IdentifierDeclType	__m128
>4818	IdentifierDeclStatement	 
>4819	IdentifierDecl	sumResD = zeros
>4820	AssignmentExpr	sumResD = zeros
>4821	Identifier	zeros
>4822	Identifier	zeros
>4823	Identifier	sumResD
>4824	IdentifierDeclType	__m128
>4825	IdentifierDeclStatement	 
>4826	IdentifierDecl	sumResP = zeros
>4827	AssignmentExpr	sumResP = zeros
>4828	Identifier	zeros
>4829	Identifier	zeros
>4830	Identifier	sumResP
>4831	IdentifierDeclType	__m128
>4832	IdentifierDeclStatement	 
>4833	IdentifierDecl	huber_ress = _mm_set1_ps ( ( float ) ( settings . huber_d ) )
>4834	AssignmentExpr	huber_ress = _mm_set1_ps ( ( float ) ( settings . huber_d ) )
>4835	CallExpression	_mm_set1_ps ( ( float ) ( settings . huber_d ) )
>4836	ArgumentList	( float ) ( settings . huber_d )
>4837	Argument	( float ) ( settings . huber_d )
>4838	CastExpression	( float ) ( settings . huber_d )
>4839	MemberAccess	settings . huber_d
>4840	Identifier	huber_d
>4841	Identifier	settings
>4842	CastTarget	float
>4843	Callee	_mm_set1_ps
>4844	Identifier	_mm_set1_ps
>4845	Identifier	huber_ress
>4846	Identifier	huber_ress
>4847	IdentifierDeclType	const __m128
>4848	IdentifierDeclStatement	 
>4849	IdentifierDecl	sigma_i2s = _mm_set1_ps ( ( float ) cameraPixelNoise2 )
>4850	AssignmentExpr	sigma_i2s = _mm_set1_ps ( ( float ) cameraPixelNoise2 )
>4851	CallExpression	_mm_set1_ps ( ( float ) cameraPixelNoise2 )
>4852	ArgumentList	( float ) cameraPixelNoise2
>4853	Argument	( float ) cameraPixelNoise2
>4854	CastExpression	( float ) cameraPixelNoise2
>4855	Identifier	cameraPixelNoise2
>4856	CastTarget	float
>4857	Callee	_mm_set1_ps
>4858	Identifier	_mm_set1_ps
>4859	Identifier	sigma_i2s
>4860	Identifier	sigma_i2s
>4861	IdentifierDeclType	const __m128
>4862	IdentifierDeclStatement	 
>4863	IdentifierDecl	depthVarFacs = _mm_set1_ps ( ( float ) settings . var_weight )
>4864	AssignmentExpr	depthVarFacs = _mm_set1_ps ( ( float ) settings . var_weight )
>4865	CallExpression	_mm_set1_ps ( ( float ) settings . var_weight )
>4866	ArgumentList	( float ) settings . var_weight
>4867	Argument	( float ) settings . var_weight
>4868	CastExpression	( float ) settings . var_weight
>4869	MemberAccess	settings . var_weight
>4870	Identifier	var_weight
>4871	Identifier	settings
>4872	CastTarget	float
>4873	Callee	_mm_set1_ps
>4874	Identifier	_mm_set1_ps
>4875	Identifier	depthVarFacs
>4876	Identifier	depthVarFacs
>4877	IdentifierDeclType	const __m128
>4878	IdentifierDeclStatement	 
>4879	IdentifierDecl	ones = _mm_set1_ps ( 1.0f )
>4880	AssignmentExpr	ones = _mm_set1_ps ( 1.0f )
>4881	CallExpression	_mm_set1_ps ( 1.0f )
>4882	ArgumentList	1.0f
>4883	Argument	1.0f
>4884	PrimaryExpression	1.0f
>4885	Callee	_mm_set1_ps
>4886	Identifier	_mm_set1_ps
>4887	Identifier	ones
>4888	Identifier	ones
>4889	IdentifierDeclType	const __m128
>4890	IdentifierDeclStatement	 
>4891	IdentifierDecl	zeros = _mm_set1_ps ( 0.0f )
>4892	AssignmentExpr	zeros = _mm_set1_ps ( 0.0f )
>4893	CallExpression	_mm_set1_ps ( 0.0f )
>4894	ArgumentList	0.0f
>4895	Argument	0.0f
>4896	PrimaryExpression	0.0f
>4897	Callee	_mm_set1_ps
>4898	Identifier	_mm_set1_ps
>4899	Identifier	zeros
>4900	Identifier	zeros
>4901	IdentifierDeclType	const __m128
>4902	IdentifierDeclStatement	 
>4903	IdentifierDecl	tzs = _mm_set1_ps ( ( float ) ( referenceToFrame . translation ( ) [ 2 ] ) )
>4904	AssignmentExpr	tzs = _mm_set1_ps ( ( float ) ( referenceToFrame . translation ( ) [ 2 ] ) )
>4905	CallExpression	_mm_set1_ps ( ( float ) ( referenceToFrame . translation ( ) [ 2 ] ) )
>4906	ArgumentList	( float ) ( referenceToFrame . translation ( ) [ 2 ] )
>4907	Argument	( float ) ( referenceToFrame . translation ( ) [ 2 ] )
>4908	CastExpression	( float ) ( referenceToFrame . translation ( ) [ 2 ] )
>4909	ArrayIndexing	referenceToFrame . translation ( ) [ 2 ]
>4910	PrimaryExpression	2
>4911	CallExpression	referenceToFrame . translation ( )
>4912	ArgumentList	 
>4913	Callee	referenceToFrame . translation
>4914	MemberAccess	referenceToFrame . translation
>4915	Identifier	translation
>4916	Identifier	referenceToFrame
>4917	CastTarget	float
>4918	Callee	_mm_set1_ps
>4919	Identifier	_mm_set1_ps
>4920	Identifier	tzs
>4921	Identifier	tzs
>4922	IdentifierDeclType	const __m128
>4923	IdentifierDeclStatement	 
>4924	IdentifierDecl	tys = _mm_set1_ps ( ( float ) ( referenceToFrame . translation ( ) [ 1 ] ) )
>4925	AssignmentExpr	tys = _mm_set1_ps ( ( float ) ( referenceToFrame . translation ( ) [ 1 ] ) )
>4926	CallExpression	_mm_set1_ps ( ( float ) ( referenceToFrame . translation ( ) [ 1 ] ) )
>4927	ArgumentList	( float ) ( referenceToFrame . translation ( ) [ 1 ] )
>4928	Argument	( float ) ( referenceToFrame . translation ( ) [ 1 ] )
>4929	CastExpression	( float ) ( referenceToFrame . translation ( ) [ 1 ] )
>4930	ArrayIndexing	referenceToFrame . translation ( ) [ 1 ]
>4931	PrimaryExpression	1
>4932	CallExpression	referenceToFrame . translation ( )
>4933	ArgumentList	 
>4934	Callee	referenceToFrame . translation
>4935	MemberAccess	referenceToFrame . translation
>4936	Identifier	translation
>4937	Identifier	referenceToFrame
>4938	CastTarget	float
>4939	Callee	_mm_set1_ps
>4940	Identifier	_mm_set1_ps
>4941	Identifier	tys
>4942	Identifier	tys
>4943	IdentifierDeclType	const __m128
>4944	IdentifierDeclStatement	 
>4945	IdentifierDecl	txs = _mm_set1_ps ( ( float ) ( referenceToFrame . translation ( ) [ 0 ] ) )
>4946	AssignmentExpr	txs = _mm_set1_ps ( ( float ) ( referenceToFrame . translation ( ) [ 0 ] ) )
>4947	CallExpression	_mm_set1_ps ( ( float ) ( referenceToFrame . translation ( ) [ 0 ] ) )
>4948	ArgumentList	( float ) ( referenceToFrame . translation ( ) [ 0 ] )
>4949	Argument	( float ) ( referenceToFrame . translation ( ) [ 0 ] )
>4950	CastExpression	( float ) ( referenceToFrame . translation ( ) [ 0 ] )
>4951	ArrayIndexing	referenceToFrame . translation ( ) [ 0 ]
>4952	PrimaryExpression	0
>4953	CallExpression	referenceToFrame . translation ( )
>4954	ArgumentList	 
>4955	Callee	referenceToFrame . translation
>4956	MemberAccess	referenceToFrame . translation
>4957	Identifier	translation
>4958	Identifier	referenceToFrame
>4959	CastTarget	float
>4960	Callee	_mm_set1_ps
>4961	Identifier	_mm_set1_ps
>4962	Identifier	txs
>4963	Identifier	txs
>4964	IdentifierDeclType	const __m128
>5036	FunctionDef	Sim3Tracker 
>5037	ParameterList	const Sim3 & referenceToFrame
>5038	Parameter	 
>5039	Identifier	referenceToFrame
>5040	ParameterType	const Sim3 &
>5041	ReturnType	Sim3ResidualStruct
>5042	CompoundStatement	 
>5043	ReturnStatement	 
>5044	CallExpression	calcSim3WeightsAndResidual ( referenceToFrame )
>5045	ArgumentList	referenceToFrame
>5046	Argument	referenceToFrame
>5047	Identifier	referenceToFrame
>5048	Callee	calcSim3WeightsAndResidual
>5049	Identifier	calcSim3WeightsAndResidual
>5055	FunctionDef	Sim3Tracker 
>5056	ParameterList	const Sim3 & referenceToFrame
>5057	Parameter	 
>5058	Identifier	referenceToFrame
>5059	ParameterType	const Sim3 &
>5060	ReturnType	Sim3ResidualStruct
>5061	CompoundStatement	 
>5062	ReturnStatement	 
>5063	Identifier	sumRes
>5064	IfStatement	if ( plotSim3TrackingIterationInfo )
>5065	CompoundStatement	 
>5066	ExpressionStatement	 
>5067	CallExpression	printf ( \"rd %f, rp %f, wrd %f, wrp %f, wd %f, wp %f\n \" , sum_rd / sum_num_d , sum_rp / sum_num_p , sum_wrd / sum_\
>5068	ArgumentList	\"rd %f, rp %f, wrd %f, wrp %f, wd %f, wp %f\n \"
>5069	Argument	sum_wp / sum_num_p
>5070	MultiplicativeExpression	sum_wp / sum_num_p
>5071	Identifier	sum_num_p
>5072	Identifier	sum_wp
>5073	Argument	sum_wd / sum_num_d
>5074	MultiplicativeExpression	sum_wd / sum_num_d
>5075	Identifier	sum_num_d
>5076	Identifier	sum_wd
>5077	Argument	sum_wrp / sum_num_p
>5078	MultiplicativeExpression	sum_wrp / sum_num_p
>5079	Identifier	sum_num_p
>5080	Identifier	sum_wrp
>5081	Argument	sum_wrd / sum_num_d
>5082	MultiplicativeExpression	sum_wrd / sum_num_d
>5083	Identifier	sum_num_d
>5084	Identifier	sum_wrd
>5085	Argument	sum_rp / sum_num_p
>5086	MultiplicativeExpression	sum_rp / sum_num_p
>5087	Identifier	sum_num_p
>5088	Identifier	sum_rp
>5089	Argument	sum_rd / sum_num_d
>5090	MultiplicativeExpression	sum_rd / sum_num_d
>5091	Identifier	sum_num_d
>5092	Identifier	sum_rd
>5093	Argument	\"rd %f, rp %f, wrd %f, wrp %f, wd %f, wp %f\n \"
>5094	PrimaryExpression	\"rd %f, rp %f, wrd %f, wrp %f, wd %f, wp %f\n \"
>5095	Callee	printf
>5096	Identifier	printf
>5097	Condition	 
>5098	Identifier	plotSim3TrackingIterationInfo
>5099	ExpressionStatement	 
>5100	AssignmentExpr	sumRes . meanP = ( sumRes . sumResP ) / ( sumRes . numTermsP )
>5101	MultiplicativeExpression	( sumRes . sumResP ) / ( sumRes . numTermsP )
>5102	MemberAccess	sumRes . numTermsP
>5103	Identifier	numTermsP
>5104	Identifier	sumRes
>5105	MemberAccess	sumRes . sumResP
>5106	Identifier	sumResP
>5107	Identifier	sumRes
>5108	MemberAccess	sumRes . meanP
>5109	Identifier	meanP
>5110	Identifier	sumRes
>5111	ExpressionStatement	 
>5112	AssignmentExpr	sumRes . meanD = ( sumRes . sumResD ) / ( sumRes . numTermsD )
>5113	MultiplicativeExpression	( sumRes . sumResD ) / ( sumRes . numTermsD )
>5114	MemberAccess	sumRes . numTermsD
>5115	Identifier	numTermsD
>5116	Identifier	sumRes
>5117	MemberAccess	sumRes . sumResD
>5118	Identifier	sumResD
>5119	Identifier	sumRes
>5120	MemberAccess	sumRes . meanD
>5121	Identifier	meanD
>5122	Identifier	sumRes
>5123	ExpressionStatement	 
>5124	AssignmentExpr	sumRes . mean = ( sumRes . sumResD + sumRes . sumResP ) / ( sumRes . numTermsD + sumRes . numTermsP )
>5125	MultiplicativeExpression	( sumRes . sumResD + sumRes . sumResP ) / ( sumRes . numTermsD + sumRes . numTermsP )
>5126	AdditiveExpression	sumRes . numTermsD + sumRes . numTermsP
>5127	MemberAccess	sumRes . numTermsP
>5128	Identifier	numTermsP
>5129	Identifier	sumRes
>5130	MemberAccess	sumRes . numTermsD
>5131	Identifier	numTermsD
>5132	Identifier	sumRes
>5133	AdditiveExpression	sumRes . sumResD + sumRes . sumResP
>5134	MemberAccess	sumRes . sumResP
>5135	Identifier	sumResP
>5136	Identifier	sumRes
>5137	MemberAccess	sumRes . sumResD
>5138	Identifier	sumResD
>5139	Identifier	sumRes
>5140	MemberAccess	sumRes . mean
>5141	Identifier	mean
>5142	Identifier	sumRes
>5143	ForStatement	for ( int i = 0 ; i < buf_warped_size ; i ++ )
>5144	CompoundStatement	 
>5145	IfStatement	if ( sv > 0 )
>5146	ElseStatement	else
>5147	ExpressionStatement	 
>5148	AssignmentExpr	* ( buf_weight_d + i ) = 0
>5149	PrimaryExpression	0
>5150	UnaryOp	* ( buf_weight_d + i )
>5151	AdditiveExpression	buf_weight_d + i
>5152	Identifier	i
>5153	Identifier	buf_weight_d
>5154	UnaryOperator	*
>5155	ExpressionStatement	 
>5156	AssignmentExpr	* ( buf_weight_d + i ) = wh * w_d
>5157	MultiplicativeExpression	wh * w_d
>5158	Identifier	w_d
>5159	Identifier	wh
>5160	UnaryOp	* ( buf_weight_d + i )
>5161	AdditiveExpression	buf_weight_d + i
>5162	Identifier	i
>5163	Identifier	buf_weight_d
>5164	UnaryOperator	*
>5165	Condition	 
>5166	RelationalExpression	sv > 0
>5167	PrimaryExpression	0
>5168	Identifier	sv
>5169	ExpressionStatement	 
>5170	AssignmentExpr	* ( buf_weight_p + i ) = wh * w_p
>5171	MultiplicativeExpression	wh * w_p
>5172	Identifier	w_p
>5173	Identifier	wh
>5174	UnaryOp	* ( buf_weight_p + i )
>5175	AdditiveExpression	buf_weight_p + i
>5176	Identifier	i
>5177	Identifier	buf_weight_p
>5178	UnaryOperator	*
>5179	IfStatement	if ( plotSim3TrackingIterationInfo )
>5180	CompoundStatement	 
>5181	IfStatement	if ( sv > 0 )
>5182	CompoundStatement	 
>5183	ExpressionStatement	 
>5184	IncDecOp	sum_num_d ++
>5185	IncDec	++
>5186	Identifier	sum_num_d
>5187	ExpressionStatement	 
>5188	AssignmentExpr	sum_wd += sqrtf ( w_d )
>5189	CallExpression	sqrtf ( w_d )
>5190	ArgumentList	w_d
>5191	Argument	w_d
>5192	Identifier	w_d
>5193	Callee	sqrtf
>5194	Identifier	sqrtf
>5195	Identifier	sum_wd
>5196	ExpressionStatement	 
>5197	AssignmentExpr	sum_wrd += fabs ( rd )
>5198	CallExpression	fabs ( rd )
>5199	ArgumentList	rd
>5200	Argument	rd
>5201	Identifier	rd
>5202	Callee	fabs
>5203	Identifier	fabs
>5204	Identifier	sum_wrd
>5205	ExpressionStatement	 
>5206	AssignmentExpr	sum_rd += fabs ( weighted_rd )
>5207	CallExpression	fabs ( weighted_rd )
>5208	ArgumentList	weighted_rd
>5209	Argument	weighted_rd
>5210	Identifier	weighted_rd
>5211	Callee	fabs
>5212	Identifier	fabs
>5213	Identifier	sum_rd
>5214	Condition	 
>5215	RelationalExpression	sv > 0
>5216	PrimaryExpression	0
>5217	Identifier	sv
>5218	ExpressionStatement	 
>5219	IncDecOp	sum_num_p ++
>5220	IncDec	++
>5221	Identifier	sum_num_p
>5222	ExpressionStatement	 
>5223	AssignmentExpr	sum_wp += sqrtf ( w_p )
>5224	CallExpression	sqrtf ( w_p )
>5225	ArgumentList	w_p
>5226	Argument	w_p
>5227	Identifier	w_p
>5228	Callee	sqrtf
>5229	Identifier	sqrtf
>5230	Identifier	sum_wp
>5231	ExpressionStatement	 
>5232	AssignmentExpr	sum_wrp += fabs ( weighted_rp )
>5233	CallExpression	fabs ( weighted_rp )
>5234	ArgumentList	weighted_rp
>5235	Argument	weighted_rp
>5236	Identifier	weighted_rp
>5237	Callee	fabs
>5238	Identifier	fabs
>5239	Identifier	sum_wrp
>5240	ExpressionStatement	 
>5241	AssignmentExpr	sum_rp += fabs ( rp )
>5242	CallExpression	fabs ( rp )
>5243	ArgumentList	rp
>5244	Argument	rp
>5245	Identifier	rp
>5246	Callee	fabs
>5247	Identifier	fabs
>5248	Identifier	sum_rp
>5249	ExpressionStatement	 
>5250	AssignmentExpr	* ( buf_weight_VarD + i ) = sv > 0 ? w_d 
>5251	ConditionalExpression	sv > 0 ? w_d 
>5252	PrimaryExpression	0
>5253	Identifier	w_d
>5254	Condition	sv > 0
>5255	RelationalExpression	sv > 0
>5256	PrimaryExpression	0
>5257	Identifier	sv
>5258	UnaryOp	* ( buf_weight_VarD + i )
>5259	AdditiveExpression	buf_weight_VarD + i
>5260	Identifier	i
>5261	Identifier	buf_weight_VarD
>5262	UnaryOperator	*
>5263	ExpressionStatement	 
>5264	AssignmentExpr	* ( buf_weight_VarP + i ) = w_p
>5265	Identifier	w_p
>5266	UnaryOp	* ( buf_weight_VarP + i )
>5267	AdditiveExpression	buf_weight_VarP + i
>5268	Identifier	i
>5269	Identifier	buf_weight_VarP
>5270	UnaryOperator	*
>5271	ExpressionStatement	 
>5272	AssignmentExpr	* ( buf_weight_Huber + i ) = wh
>5273	Identifier	wh
>5274	UnaryOp	* ( buf_weight_Huber + i )
>5275	AdditiveExpression	buf_weight_Huber + i
>5276	Identifier	i
>5277	Identifier	buf_weight_Huber
>5278	UnaryOperator	*
>5279	Condition	 
>5280	Identifier	plotSim3TrackingIterationInfo
>5281	ExpressionStatement	 
>5282	IncDecOp	sumRes . numTermsP ++
>5283	IncDec	++
>5284	MemberAccess	sumRes . numTermsP
>5285	Identifier	numTermsP
>5286	Identifier	sumRes
>5287	ExpressionStatement	 
>5288	AssignmentExpr	sumRes . sumResP += wh * w_p * rp * rp
>5289	MultiplicativeExpression	wh * w_p * rp * rp
>5290	MultiplicativeExpression	w_p * rp * rp
>5291	MultiplicativeExpression	rp * rp
>5292	Identifier	rp
>5293	Identifier	rp
>5294	Identifier	w_p
>5295	Identifier	wh
>5296	MemberAccess	sumRes . sumResP
>5297	Identifier	sumResP
>5298	Identifier	sumRes
>5299	IfStatement	if ( sv > 0 )
>5300	CompoundStatement	 
>5301	ExpressionStatement	 
>5302	IncDecOp	sumRes . numTermsD ++
>5303	IncDec	++
>5304	MemberAccess	sumRes . numTermsD
>5305	Identifier	numTermsD
>5306	Identifier	sumRes
>5307	ExpressionStatement	 
>5308	AssignmentExpr	sumRes . sumResD += wh * w_d * rd * rd
>5309	MultiplicativeExpression	wh * w_d * rd * rd
>5310	MultiplicativeExpression	w_d * rd * rd
>5311	MultiplicativeExpression	rd * rd
>5312	Identifier	rd
>5313	Identifier	rd
>5314	Identifier	w_d
>5315	Identifier	wh
>5316	MemberAccess	sumRes . sumResD
>5317	Identifier	sumResD
>5318	Identifier	sumRes
>5319	Condition	 
>5320	RelationalExpression	sv > 0
>5321	PrimaryExpression	0
>5322	Identifier	sv
>5323	IdentifierDeclStatement	 
>5324	IdentifierDecl	wh = fabs ( weighted_abs_res < settings . huber_d ? 1 
>5325	AssignmentExpr	wh = fabs ( weighted_abs_res < settings . huber_d ? 1 
>5326	CallExpression	fabs ( weighted_abs_res < settings . huber_d ? 1 
>5327	ArgumentList	weighted_abs_res < settings . huber_d ? 1 
>5328	Argument	weighted_abs_res < settings . huber_d ? 1 
>5329	ConditionalExpression	weighted_abs_res < settings . huber_d ? 1 
>5330	MultiplicativeExpression	settings . huber_d / weighted_abs_res
>5331	Identifier	weighted_abs_res
>5332	MemberAccess	settings . huber_d
>5333	Identifier	huber_d
>5334	Identifier	settings
>5335	PrimaryExpression	1
>5336	Condition	weighted_abs_res < settings . huber_d
>5337	RelationalExpression	weighted_abs_res < settings . huber_d
>5338	MemberAccess	settings . huber_d
>5339	Identifier	huber_d
>5340	Identifier	settings
>5341	Identifier	weighted_abs_res
>5342	Callee	fabs
>5343	Identifier	fabs
>5344	Identifier	wh
>5345	Identifier	wh
>5346	IdentifierDeclType	float
>5347	IdentifierDeclStatement	 
>5348	IdentifierDecl	weighted_abs_res = sv > 0 ? weighted_rd + weighted_rp 
>5349	AssignmentExpr	weighted_abs_res = sv > 0 ? weighted_rd + weighted_rp 
>5350	ConditionalExpression	sv > 0 ? weighted_rd + weighted_rp 
>5351	Identifier	weighted_rp
>5352	AdditiveExpression	weighted_rd + weighted_rp
>5353	Identifier	weighted_rp
>5354	Identifier	weighted_rd
>5355	Condition	sv > 0
>5356	RelationalExpression	sv > 0
>5357	PrimaryExpression	0
>5358	Identifier	sv
>5359	Identifier	weighted_abs_res
>5360	Identifier	weighted_abs_res
>5361	IdentifierDeclType	float
>5362	IdentifierDeclStatement	 
>5363	IdentifierDecl	weighted_rp = fabs ( rp * sqrtf ( w_p ) )
>5364	AssignmentExpr	weighted_rp = fabs ( rp * sqrtf ( w_p ) )
>5365	CallExpression	fabs ( rp * sqrtf ( w_p ) )
>5366	ArgumentList	rp * sqrtf ( w_p )
>5367	Argument	rp * sqrtf ( w_p )
>5368	MultiplicativeExpression	rp * sqrtf ( w_p )
>5369	CallExpression	sqrtf ( w_p )
>5370	ArgumentList	w_p
>5371	Argument	w_p
>5372	Identifier	w_p
>5373	Callee	sqrtf
>5374	Identifier	sqrtf
>5375	Identifier	rp
>5376	Callee	fabs
>5377	Identifier	fabs
>5378	Identifier	weighted_rp
>5379	Identifier	weighted_rp
>5380	IdentifierDeclType	float
>5381	IdentifierDeclStatement	 
>5382	IdentifierDecl	weighted_rd = fabs ( rd * sqrtf ( w_d ) )
>5383	AssignmentExpr	weighted_rd = fabs ( rd * sqrtf ( w_d ) )
>5384	CallExpression	fabs ( rd * sqrtf ( w_d ) )
>5385	ArgumentList	rd * sqrtf ( w_d )
>5386	Argument	rd * sqrtf ( w_d )
>5387	MultiplicativeExpression	rd * sqrtf ( w_d )
>5388	CallExpression	sqrtf ( w_d )
>5389	ArgumentList	w_d
>5390	Argument	w_d
>5391	Identifier	w_d
>5392	Callee	sqrtf
>5393	Identifier	sqrtf
>5394	Identifier	rd
>5395	Callee	fabs
>5396	Identifier	fabs
>5397	Identifier	weighted_rd
>5398	Identifier	weighted_rd
>5399	IdentifierDeclType	float
>5400	IdentifierDeclStatement	 
>5401	IdentifierDecl	w_d = 1.0f / ( sv + g2 * g2 * s )
>5402	AssignmentExpr	w_d = 1.0f / ( sv + g2 * g2 * s )
>5403	MultiplicativeExpression	1.0f / ( sv + g2 * g2 * s )
>5404	AdditiveExpression	sv + g2 * g2 * s
>5405	MultiplicativeExpression	g2 * g2 * s
>5406	MultiplicativeExpression	g2 * s
>5407	Identifier	s
>5408	Identifier	g2
>5409	Identifier	g2
>5410	Identifier	sv
>5411	PrimaryExpression	1.0f
>5412	Identifier	w_d
>5413	Identifier	w_d
>5414	IdentifierDeclType	float
>5415	IdentifierDeclStatement	 
>5416	IdentifierDecl	w_p = 1.0f / ( cameraPixelNoise2 + s * drpdd * drpdd )
>5417	AssignmentExpr	w_p = 1.0f / ( cameraPixelNoise2 + s * drpdd * drpdd )
>5418	MultiplicativeExpression	1.0f / ( cameraPixelNoise2 + s * drpdd * drpdd )
>5419	AdditiveExpression	cameraPixelNoise2 + s * drpdd * drpdd
>5420	MultiplicativeExpression	s * drpdd * drpdd
>5421	MultiplicativeExpression	drpdd * drpdd
>5422	Identifier	drpdd
>5423	Identifier	drpdd
>5424	Identifier	s
>5425	Identifier	cameraPixelNoise2
>5426	PrimaryExpression	1.0f
>5427	Identifier	w_p
>5428	Identifier	w_p
>5429	IdentifierDeclType	float
>5430	IdentifierDeclStatement	 
>5431	IdentifierDecl	drpdd = gx * g0 + gy * g1
>5432	AssignmentExpr	drpdd = gx * g0 + gy * g1
>5433	AdditiveExpression	gx * g0 + gy * g1
>5434	MultiplicativeExpression	gy * g1
>5435	Identifier	g1
>5436	Identifier	gy
>5437	MultiplicativeExpression	gx * g0
>5438	Identifier	g0
>5439	Identifier	gx
>5440	Identifier	drpdd
>5441	Identifier	drpdd
>5442	IdentifierDeclType	float
>5443	IdentifierDeclStatement	 
>5444	IdentifierDecl	g2 = ( pz - tz ) / ( pz * pz * d )
>5445	AssignmentExpr	g2 = ( pz - tz ) / ( pz * pz * d )
>5446	MultiplicativeExpression	( pz - tz ) / ( pz * pz * d )
>5447	MultiplicativeExpression	pz * pz * d
>5448	MultiplicativeExpression	pz * d
>5449	Identifier	d
>5450	Identifier	pz
>5451	Identifier	pz
>5452	AdditiveExpression	pz - tz
>5453	Identifier	tz
>5454	Identifier	pz
>5455	Identifier	g2
>5456	Identifier	g2
>5457	IdentifierDeclType	float
>5458	IdentifierDeclStatement	 
>5459	IdentifierDecl	g1 = ( ty * pz - tz * py ) / ( pz * pz * d )
>5460	AssignmentExpr	g1 = ( ty * pz - tz * py ) / ( pz * pz * d )
>5461	MultiplicativeExpression	( ty * pz - tz * py ) / ( pz * pz * d )
>5462	MultiplicativeExpression	pz * pz * d
>5463	MultiplicativeExpression	pz * d
>5464	Identifier	d
>5465	Identifier	pz
>5466	Identifier	pz
>5467	AdditiveExpression	ty * pz - tz * py
>5468	MultiplicativeExpression	tz * py
>5469	Identifier	py
>5470	Identifier	tz
>5471	MultiplicativeExpression	ty * pz
>5472	Identifier	pz
>5473	Identifier	ty
>5474	Identifier	g1
>5475	Identifier	g1
>5476	IdentifierDeclType	float
>5477	IdentifierDeclStatement	 
>5478	IdentifierDecl	g0 = ( tx * pz - tz * px ) / ( pz * pz * d )
>5479	AssignmentExpr	g0 = ( tx * pz - tz * px ) / ( pz * pz * d )
>5480	MultiplicativeExpression	( tx * pz - tz * px ) / ( pz * pz * d )
>5481	MultiplicativeExpression	pz * pz * d
>5482	MultiplicativeExpression	pz * d
>5483	Identifier	d
>5484	Identifier	pz
>5485	Identifier	pz
>5486	AdditiveExpression	tx * pz - tz * px
>5487	MultiplicativeExpression	tz * px
>5488	Identifier	px
>5489	Identifier	tz
>5490	MultiplicativeExpression	tx * pz
>5491	Identifier	pz
>5492	Identifier	tx
>5493	Identifier	g0
>5494	Identifier	g0
>5495	IdentifierDeclType	float
>5496	IdentifierDeclStatement	 
>5497	IdentifierDecl	sv = settings . var_weight * * ( buf_warped_idepthVar + i )
>5498	AssignmentExpr	sv = settings . var_weight * * ( buf_warped_idepthVar + i )
>5499	MultiplicativeExpression	settings . var_weight * * ( buf_warped_idepthVar + i )
>5500	UnaryOp	* ( buf_warped_idepthVar + i )
>5501	AdditiveExpression	buf_warped_idepthVar + i
>5502	Identifier	i
>5503	Identifier	buf_warped_idepthVar
>5504	UnaryOperator	*
>5505	MemberAccess	settings . var_weight
>5506	Identifier	var_weight
>5507	Identifier	settings
>5508	Identifier	sv
>5509	Identifier	sv
>5510	IdentifierDeclType	float
>5511	IdentifierDeclStatement	 
>5512	IdentifierDecl	s = settings . var_weight * * ( buf_idepthVar + i )
>5513	AssignmentExpr	s = settings . var_weight * * ( buf_idepthVar + i )
>5514	MultiplicativeExpression	settings . var_weight * * ( buf_idepthVar + i )
>5515	UnaryOp	* ( buf_idepthVar + i )
>5516	AdditiveExpression	buf_idepthVar + i
>5517	Identifier	i
>5518	Identifier	buf_idepthVar
>5519	UnaryOperator	*
>5520	MemberAccess	settings . var_weight
>5521	Identifier	var_weight
>5522	Identifier	settings
>5523	Identifier	s
>5524	Identifier	s
>5525	IdentifierDeclType	float
>5526	IdentifierDeclStatement	 
>5527	IdentifierDecl	gy = * ( buf_warped_dy + i )
>5528	AssignmentExpr	gy = * ( buf_warped_dy + i )
>5529	UnaryOp	* ( buf_warped_dy + i )
>5530	AdditiveExpression	buf_warped_dy + i
>5531	Identifier	i
>5532	Identifier	buf_warped_dy
>5533	UnaryOperator	*
>5534	Identifier	gy
>5535	Identifier	gy
>5536	IdentifierDeclType	float
>5537	IdentifierDeclStatement	 
>5538	IdentifierDecl	gx = * ( buf_warped_dx + i )
>5539	AssignmentExpr	gx = * ( buf_warped_dx + i )
>5540	UnaryOp	* ( buf_warped_dx + i )
>5541	AdditiveExpression	buf_warped_dx + i
>5542	Identifier	i
>5543	Identifier	buf_warped_dx
>5544	UnaryOperator	*
>5545	Identifier	gx
>5546	Identifier	gx
>5547	IdentifierDeclType	float
>5548	IdentifierDeclStatement	 
>5549	IdentifierDecl	rd = * ( buf_residual_d + i )
>5550	AssignmentExpr	rd = * ( buf_residual_d + i )
>5551	UnaryOp	* ( buf_residual_d + i )
>5552	AdditiveExpression	buf_residual_d + i
>5553	Identifier	i
>5554	Identifier	buf_residual_d
>5555	UnaryOperator	*
>5556	Identifier	rd
>5557	Identifier	rd
>5558	IdentifierDeclType	float
>5559	IdentifierDeclStatement	 
>5560	IdentifierDecl	rp = * ( buf_warped_residual + i )
>5561	AssignmentExpr	rp = * ( buf_warped_residual + i )
>5562	UnaryOp	* ( buf_warped_residual + i )
>5563	AdditiveExpression	buf_warped_residual + i
>5564	Identifier	i
>5565	Identifier	buf_warped_residual
>5566	UnaryOperator	*
>5567	Identifier	rp
>5568	Identifier	rp
>5569	IdentifierDeclType	float
>5570	IdentifierDeclStatement	 
>5571	IdentifierDecl	d = * ( buf_d + i )
>5572	AssignmentExpr	d = * ( buf_d + i )
>5573	UnaryOp	* ( buf_d + i )
>5574	AdditiveExpression	buf_d + i
>5575	Identifier	i
>5576	Identifier	buf_d
>5577	UnaryOperator	*
>5578	Identifier	d
>5579	Identifier	d
>5580	IdentifierDeclType	float
>5581	IdentifierDeclStatement	 
>5582	IdentifierDecl	pz = * ( buf_warped_z + i )
>5583	AssignmentExpr	pz = * ( buf_warped_z + i )
>5584	UnaryOp	* ( buf_warped_z + i )
>5585	AdditiveExpression	buf_warped_z + i
>5586	Identifier	i
>5587	Identifier	buf_warped_z
>5588	UnaryOperator	*
>5589	Identifier	pz
>5590	Identifier	pz
>5591	IdentifierDeclType	float
>5592	IdentifierDeclStatement	 
>5593	IdentifierDecl	py = * ( buf_warped_y + i )
>5594	AssignmentExpr	py = * ( buf_warped_y + i )
>5595	UnaryOp	* ( buf_warped_y + i )
>5596	AdditiveExpression	buf_warped_y + i
>5597	Identifier	i
>5598	Identifier	buf_warped_y
>5599	UnaryOperator	*
>5600	Identifier	py
>5601	Identifier	py
>5602	IdentifierDeclType	float
>5603	IdentifierDeclStatement	 
>5604	IdentifierDecl	px = * ( buf_warped_x + i )
>5605	AssignmentExpr	px = * ( buf_warped_x + i )
>5606	UnaryOp	* ( buf_warped_x + i )
>5607	AdditiveExpression	buf_warped_x + i
>5608	Identifier	i
>5609	Identifier	buf_warped_x
>5610	UnaryOperator	*
>5611	Identifier	px
>5612	Identifier	px
>5613	IdentifierDeclType	float
>5614	IncDecOp	 
>5615	IncDec	++
>5616	Identifier	i
>5617	Condition	 
>5618	RelationalExpression	i < buf_warped_size
>5619	Identifier	buf_warped_size
>5620	Identifier	i
>5621	ForInit	 
>5622	IdentifierDeclStatement	int i = 0 ;
>5623	IdentifierDecl	i = 0
>5624	AssignmentExpr	i = 0
>5625	PrimaryExpression	0
>5626	Identifier	i
>5627	Identifier	i
>5628	IdentifierDeclType	int
>5629	IdentifierDeclStatement	 
>5630	IdentifierDecl	sum_num_p = 0
>5631	AssignmentExpr	sum_num_p = 0
>5632	PrimaryExpression	0
>5633	Identifier	sum_num_p
>5634	Identifier	sum_num_p
>5635	IdentifierDeclType	float
>5636	IdentifierDecl	sum_num_d = 0
>5637	AssignmentExpr	sum_num_d = 0
>5638	PrimaryExpression	0
>5639	Identifier	sum_num_d
>5640	Identifier	sum_num_d
>5641	IdentifierDeclType	float
>5642	IdentifierDecl	sum_wd = 0
>5643	AssignmentExpr	sum_wd = 0
>5644	PrimaryExpression	0
>5645	Identifier	sum_wd
>5646	Identifier	sum_wd
>5647	IdentifierDeclType	float
>5648	IdentifierDecl	sum_wp = 0
>5649	AssignmentExpr	sum_wp = 0
>5650	PrimaryExpression	0
>5651	Identifier	sum_wp
>5652	Identifier	sum_wp
>5653	IdentifierDeclType	float
>5654	IdentifierDecl	sum_wrp = 0
>5655	AssignmentExpr	sum_wrp = 0
>5656	PrimaryExpression	0
>5657	Identifier	sum_wrp
>5658	Identifier	sum_wrp
>5659	IdentifierDeclType	float
>5660	IdentifierDecl	sum_wrd = 0
>5661	AssignmentExpr	sum_wrd = 0
>5662	PrimaryExpression	0
>5663	Identifier	sum_wrd
>5664	Identifier	sum_wrd
>5665	IdentifierDeclType	float
>5666	IdentifierDecl	sum_rp = 0
>5667	AssignmentExpr	sum_rp = 0
>5668	PrimaryExpression	0
>5669	Identifier	sum_rp
>5670	Identifier	sum_rp
>5671	IdentifierDeclType	float
>5672	IdentifierDecl	sum_rd = 0
>5673	AssignmentExpr	sum_rd = 0
>5674	PrimaryExpression	0
>5675	Identifier	sum_rd
>5676	Identifier	sum_rd
>5677	IdentifierDeclType	float
>5678	ExpressionStatement	 
>5679	CallExpression	memset ( & sumRes , 0 , sizeof ( Sim3ResidualStruct ) )
>5680	ArgumentList	& sumRes
>5681	Argument	sizeof ( Sim3ResidualStruct )
>5682	SizeofExpr	sizeof ( Sim3ResidualStruct )
>5683	SizeofOperand	Sim3ResidualStruct
>5684	Sizeof	sizeof
>5685	Argument	0
>5686	PrimaryExpression	0
>5687	Argument	& sumRes
>5688	UnaryOp	& sumRes
>5689	Identifier	sumRes
>5690	UnaryOperator	&
>5691	Callee	memset
>5692	Identifier	memset
>5693	IdentifierDeclStatement	 
>5694	IdentifierDecl	sumRes
>5695	Identifier	sumRes
>5696	IdentifierDeclType	Sim3ResidualStruct
>5697	IdentifierDeclStatement	 
>5698	IdentifierDecl	tz = referenceToFrame . translation ( ) [ 2 ]
>5699	AssignmentExpr	tz = referenceToFrame . translation ( ) [ 2 ]
>5700	ArrayIndexing	referenceToFrame . translation ( ) [ 2 ]
>5701	PrimaryExpression	2
>5702	CallExpression	referenceToFrame . translation ( )
>5703	ArgumentList	 
>5704	Callee	referenceToFrame . translation
>5705	MemberAccess	referenceToFrame . translation
>5706	Identifier	translation
>5707	Identifier	referenceToFrame
>5708	Identifier	tz
>5709	Identifier	tz
>5710	IdentifierDeclType	float
>5711	IdentifierDeclStatement	 
>5712	IdentifierDecl	ty = referenceToFrame . translation ( ) [ 1 ]
>5713	AssignmentExpr	ty = referenceToFrame . translation ( ) [ 1 ]
>5714	ArrayIndexing	referenceToFrame . translation ( ) [ 1 ]
>5715	PrimaryExpression	1
>5716	CallExpression	referenceToFrame . translation ( )
>5717	ArgumentList	 
>5718	Callee	referenceToFrame . translation
>5719	MemberAccess	referenceToFrame . translation
>5720	Identifier	translation
>5721	Identifier	referenceToFrame
>5722	Identifier	ty
>5723	Identifier	ty
>5724	IdentifierDeclType	float
>5725	IdentifierDeclStatement	 
>5726	IdentifierDecl	tx = referenceToFrame . translation ( ) [ 0 ]
>5727	AssignmentExpr	tx = referenceToFrame . translation ( ) [ 0 ]
>5728	ArrayIndexing	referenceToFrame . translation ( ) [ 0 ]
>5729	PrimaryExpression	0
>5730	CallExpression	referenceToFrame . translation ( )
>5731	ArgumentList	 
>5732	Callee	referenceToFrame . translation
>5733	MemberAccess	referenceToFrame . translation
>5734	Identifier	translation
>5735	Identifier	referenceToFrame
>5736	Identifier	tx
>5737	Identifier	tx
>5738	IdentifierDeclType	float
>5841	FunctionDef	Sim3Tracker 
>5842	ParameterList	LGS7 & ls7
>5843	Parameter	 
>5844	Identifier	ls7
>5845	ParameterType	LGS7 &
>5846	ReturnType	void
>5847	CompoundStatement	 
>5848	ExpressionStatement	 
>5849	CallExpression	ls7 . initializeFrom ( ls6 , ls4 )
>5850	ArgumentList	ls6
>5851	Argument	ls4
>5852	Identifier	ls4
>5853	Argument	ls6
>5854	Identifier	ls6
>5855	Callee	ls7 . initializeFrom
>5856	MemberAccess	ls7 . initializeFrom
>5857	Identifier	initializeFrom
>5858	Identifier	ls7
>5859	ExpressionStatement	 
>5860	CallExpression	ls6 . finishNoDivide ( )
>5861	ArgumentList	 
>5862	Callee	ls6 . finishNoDivide
>5863	MemberAccess	ls6 . finishNoDivide
>5864	Identifier	finishNoDivide
>5865	Identifier	ls6
>5866	ExpressionStatement	 
>5867	CallExpression	ls4 . finishNoDivide ( )
>5868	ArgumentList	 
>5869	Callee	ls4 . finishNoDivide
>5870	MemberAccess	ls4 . finishNoDivide
>5871	Identifier	finishNoDivide
>5872	Identifier	ls4
>5873	ForStatement	for ( int i = 0 ; i < buf_warped_size - 3 ; i += 4 )
>5874	CompoundStatement	 
>5875	IfStatement	if ( i + 3 < buf_warped_size )
>5876	ElseStatement	else
>5877	CompoundStatement	 
>5878	ForStatement	for ( int k = 0 ; i + k < buf_warped_size ; k ++ )
>5879	CompoundStatement	 
>5880	ExpressionStatement	 
>5881	CallExpression	ls6 . update ( v6 , * ( buf_warped_residual + i + k ) , * ( buf_weight_p + i + k ) )
>5882	ArgumentList	v6
>5883	Argument	* ( buf_weight_p + i + k )
>5884	UnaryOp	* ( buf_weight_p + i + k )
>5885	AdditiveExpression	buf_weight_p + i + k
>5886	AdditiveExpression	i + k
>5887	Identifier	k
>5888	Identifier	i
>5889	Identifier	buf_weight_p
>5890	UnaryOperator	*
>5891	Argument	* ( buf_warped_residual + i + k )
>5892	UnaryOp	* ( buf_warped_residual + i + k )
>5893	AdditiveExpression	buf_warped_residual + i + k
>5894	AdditiveExpression	i + k
>5895	Identifier	k
>5896	Identifier	i
>5897	Identifier	buf_warped_residual
>5898	UnaryOperator	*
>5899	Argument	v6
>5900	Identifier	v6
>5901	Callee	ls6 . update
>5902	MemberAccess	ls6 . update
>5903	Identifier	update
>5904	Identifier	ls6
>5905	ExpressionStatement	 
>5906	CallExpression	ls4 . update ( v4 , * ( buf_residual_d + i + k ) , * ( buf_weight_d + i + k ) )
>5907	ArgumentList	v4
>5908	Argument	* ( buf_weight_d + i + k )
>5909	UnaryOp	* ( buf_weight_d + i + k )
>5910	AdditiveExpression	buf_weight_d + i + k
>5911	AdditiveExpression	i + k
>5912	Identifier	k
>5913	Identifier	i
>5914	Identifier	buf_weight_d
>5915	UnaryOperator	*
>5916	Argument	* ( buf_residual_d + i + k )
>5917	UnaryOp	* ( buf_residual_d + i + k )
>5918	AdditiveExpression	buf_residual_d + i + k
>5919	AdditiveExpression	i + k
>5920	Identifier	k
>5921	Identifier	i
>5922	Identifier	buf_residual_d
>5923	UnaryOperator	*
>5924	Argument	v4
>5925	Identifier	v4
>5926	Callee	ls4 . update
>5927	MemberAccess	ls4 . update
>5928	Identifier	update
>5929	Identifier	ls4
>5930	ExpressionStatement	 
>5931	Expression	v4 << SSEE ( J41 , k ) , SSEE ( J42 , k ) , SSEE ( J43 , k ) , SSEE ( J44 , k )
>5932	Expression	SSEE ( J42 , k ) , SSEE ( J43 , k ) , SSEE ( J44 , k )
>5933	Expression	SSEE ( J43 , k ) , SSEE ( J44 , k )
>5934	CallExpression	SSEE ( J44 , k )
>5935	ArgumentList	J44
>5936	Argument	k
>5937	Identifier	k
>5938	Argument	J44
>5939	Identifier	J44
>5940	Callee	SSEE
>5941	Identifier	SSEE
>5942	CallExpression	SSEE ( J43 , k )
>5943	ArgumentList	J43
>5944	Argument	k
>5945	Identifier	k
>5946	Argument	J43
>5947	Identifier	J43
>5948	Callee	SSEE
>5949	Identifier	SSEE
>5950	CallExpression	SSEE ( J42 , k )
>5951	ArgumentList	J42
>5952	Argument	k
>5953	Identifier	k
>5954	Argument	J42
>5955	Identifier	J42
>5956	Callee	SSEE
>5957	Identifier	SSEE
>5958	ShiftExpression	v4 << SSEE ( J41 , k )
>5959	CallExpression	SSEE ( J41 , k )
>5960	ArgumentList	J41
>5961	Argument	k
>5962	Identifier	k
>5963	Argument	J41
>5964	Identifier	J41
>5965	Callee	SSEE
>5966	Identifier	SSEE
>5967	Identifier	v4
>5968	IdentifierDeclStatement	 
>5969	IdentifierDecl	v4
>5970	Identifier	v4
>5971	IdentifierDeclType	Vector4
>5972	ExpressionStatement	 
>5973	Expression	v6 << SSEE ( J61 , k ) , SSEE ( J62 , k ) , SSEE ( J63 , k ) , SSEE ( J64 , k ) , SSEE ( J65 , k ) , SSEE ( J66 , \
>5974	Expression	SSEE ( J62 , k ) , SSEE ( J63 , k ) , SSEE ( J64 , k ) , SSEE ( J65 , k ) , SSEE ( J66 , k )
>5975	Expression	SSEE ( J63 , k ) , SSEE ( J64 , k ) , SSEE ( J65 , k ) , SSEE ( J66 , k )
>5976	Expression	SSEE ( J64 , k ) , SSEE ( J65 , k ) , SSEE ( J66 , k )
>5977	Expression	SSEE ( J65 , k ) , SSEE ( J66 , k )
>5978	CallExpression	SSEE ( J66 , k )
>5979	ArgumentList	J66
>5980	Argument	k
>5981	Identifier	k
>5982	Argument	J66
>5983	Identifier	J66
>5984	Callee	SSEE
>5985	Identifier	SSEE
>5986	CallExpression	SSEE ( J65 , k )
>5987	ArgumentList	J65
>5988	Argument	k
>5989	Identifier	k
>5990	Argument	J65
>5991	Identifier	J65
>5992	Callee	SSEE
>5993	Identifier	SSEE
>5994	CallExpression	SSEE ( J64 , k )
>5995	ArgumentList	J64
>5996	Argument	k
>5997	Identifier	k
>5998	Argument	J64
>5999	Identifier	J64
>6000	Callee	SSEE
>6001	Identifier	SSEE
>6002	CallExpression	SSEE ( J63 , k )
>6003	ArgumentList	J63
>6004	Argument	k
>6005	Identifier	k
>6006	Argument	J63
>6007	Identifier	J63
>6008	Callee	SSEE
>6009	Identifier	SSEE
>6010	CallExpression	SSEE ( J62 , k )
>6011	ArgumentList	J62
>6012	Argument	k
>6013	Identifier	k
>6014	Argument	J62
>6015	Identifier	J62
>6016	Callee	SSEE
>6017	Identifier	SSEE
>6018	ShiftExpression	v6 << SSEE ( J61 , k )
>6019	CallExpression	SSEE ( J61 , k )
>6020	ArgumentList	J61
>6021	Argument	k
>6022	Identifier	k
>6023	Argument	J61
>6024	Identifier	J61
>6025	Callee	SSEE
>6026	Identifier	SSEE
>6027	Identifier	v6
>6028	IdentifierDeclStatement	 
>6029	IdentifierDecl	v6
>6030	Identifier	v6
>6031	IdentifierDeclType	Vector6
>6032	IncDecOp	 
>6033	IncDec	++
>6034	Identifier	k
>6035	Condition	 
>6036	RelationalExpression	i + k < buf_warped_size
>6037	Identifier	buf_warped_size
>6038	AdditiveExpression	i + k
>6039	Identifier	k
>6040	Identifier	i
>6041	ForInit	 
>6042	IdentifierDeclStatement	int k = 0 ;
>6043	IdentifierDecl	k = 0
>6044	AssignmentExpr	k = 0
>6045	PrimaryExpression	0
>6046	Identifier	k
>6047	Identifier	k
>6048	IdentifierDeclType	int
>6049	CompoundStatement	 
>6050	ExpressionStatement	 
>6051	CallExpression	ls6 . updateSSE ( J61 , J62 , J63 , J64 , J65 , J66 , _mm_load_ps ( buf_warped_residual + i ) , _mm_load_ps ( buf_\
>6052	ArgumentList	J61
>6053	Argument	_mm_load_ps ( buf_weight_p + i )
>6054	CallExpression	_mm_load_ps ( buf_weight_p + i )
>6055	ArgumentList	buf_weight_p + i
>6056	Argument	buf_weight_p + i
>6057	AdditiveExpression	buf_weight_p + i
>6058	Identifier	i
>6059	Identifier	buf_weight_p
>6060	Callee	_mm_load_ps
>6061	Identifier	_mm_load_ps
>6062	Argument	_mm_load_ps ( buf_warped_residual + i )
>6063	CallExpression	_mm_load_ps ( buf_warped_residual + i )
>6064	ArgumentList	buf_warped_residual + i
>6065	Argument	buf_warped_residual + i
>6066	AdditiveExpression	buf_warped_residual + i
>6067	Identifier	i
>6068	Identifier	buf_warped_residual
>6069	Callee	_mm_load_ps
>6070	Identifier	_mm_load_ps
>6071	Argument	J66
>6072	Identifier	J66
>6073	Argument	J65
>6074	Identifier	J65
>6075	Argument	J64
>6076	Identifier	J64
>6077	Argument	J63
>6078	Identifier	J63
>6079	Argument	J62
>6080	Identifier	J62
>6081	Argument	J61
>6082	Identifier	J61
>6083	Callee	ls6 . updateSSE
>6084	MemberAccess	ls6 . updateSSE
>6085	Identifier	updateSSE
>6086	Identifier	ls6
>6087	ExpressionStatement	 
>6088	CallExpression	ls4 . updateSSE ( J41 , J42 , J43 , J44 , _mm_load_ps ( buf_residual_d + i ) , _mm_load_ps ( buf_weight_d + i ) )
>6089	ArgumentList	J41
>6090	Argument	_mm_load_ps ( buf_weight_d + i )
>6091	CallExpression	_mm_load_ps ( buf_weight_d + i )
>6092	ArgumentList	buf_weight_d + i
>6093	Argument	buf_weight_d + i
>6094	AdditiveExpression	buf_weight_d + i
>6095	Identifier	i
>6096	Identifier	buf_weight_d
>6097	Callee	_mm_load_ps
>6098	Identifier	_mm_load_ps
>6099	Argument	_mm_load_ps ( buf_residual_d + i )
>6100	CallExpression	_mm_load_ps ( buf_residual_d + i )
>6101	ArgumentList	buf_residual_d + i
>6102	Argument	buf_residual_d + i
>6103	AdditiveExpression	buf_residual_d + i
>6104	Identifier	i
>6105	Identifier	buf_residual_d
>6106	Callee	_mm_load_ps
>6107	Identifier	_mm_load_ps
>6108	Argument	J44
>6109	Identifier	J44
>6110	Argument	J43
>6111	Identifier	J43
>6112	Argument	J42
>6113	Identifier	J42
>6114	Argument	J41
>6115	Identifier	J41
>6116	Callee	ls4 . updateSSE
>6117	MemberAccess	ls4 . updateSSE
>6118	Identifier	updateSSE
>6119	Identifier	ls4
>6120	Condition	 
>6121	RelationalExpression	i + 3 < buf_warped_size
>6122	Identifier	buf_warped_size
>6123	AdditiveExpression	i + 3
>6124	PrimaryExpression	3
>6125	Identifier	i
>6126	ExpressionStatement	 
>6127	AssignmentExpr	J65 = val4
>6128	Identifier	val4
>6129	Identifier	J65
>6130	ExpressionStatement	 
>6131	AssignmentExpr	val4 = _mm_add_ps ( val4 , val3 )
>6132	CallExpression	_mm_add_ps ( val4 , val3 )
>6133	ArgumentList	val4
>6134	Argument	val3
>6135	Identifier	val3
>6136	Argument	val4
>6137	Identifier	val4
>6138	Callee	_mm_add_ps
>6139	Identifier	_mm_add_ps
>6140	Identifier	val4
>6141	ExpressionStatement	 
>6142	AssignmentExpr	val3 = _mm_mul_ps ( val2 , px )
>6143	CallExpression	_mm_mul_ps ( val2 , px )
>6144	ArgumentList	val2
>6145	Argument	px
>6146	Identifier	px
>6147	Argument	val2
>6148	Identifier	val2
>6149	Callee	_mm_mul_ps
>6150	Identifier	_mm_mul_ps
>6151	Identifier	val3
>6152	ExpressionStatement	 
>6153	AssignmentExpr	val4 = _mm_add_ps ( gx , val3 )
>6154	CallExpression	_mm_add_ps ( gx , val3 )
>6155	ArgumentList	gx
>6156	Argument	val3
>6157	Identifier	val3
>6158	Argument	gx
>6159	Identifier	gx
>6160	Callee	_mm_add_ps
>6161	Identifier	_mm_add_ps
>6162	Identifier	val4
>6163	ExpressionStatement	 
>6164	AssignmentExpr	val3 = _mm_mul_ps ( val1 , px )
>6165	CallExpression	_mm_mul_ps ( val1 , px )
>6166	ArgumentList	val1
>6167	Argument	px
>6168	Identifier	px
>6169	Argument	val1
>6170	Identifier	val1
>6171	Callee	_mm_mul_ps
>6172	Identifier	_mm_mul_ps
>6173	Identifier	val3
>6174	ExpressionStatement	 
>6175	AssignmentExpr	J64 = val4
>6176	Identifier	val4
>6177	Identifier	J64
>6178	ExpressionStatement	 
>6179	AssignmentExpr	val4 = _mm_sub_ps ( zeros , val4 )
>6180	CallExpression	_mm_sub_ps ( zeros , val4 )
>6181	ArgumentList	zeros
>6182	Argument	val4
>6183	Identifier	val4
>6184	Argument	zeros
>6185	Identifier	zeros
>6186	Callee	_mm_sub_ps
>6187	Identifier	_mm_sub_ps
>6188	Identifier	val4
>6189	ExpressionStatement	 
>6190	AssignmentExpr	val4 = _mm_add_ps ( val3 , val4 )
>6191	CallExpression	_mm_add_ps ( val3 , val4 )
>6192	ArgumentList	val3
>6193	Argument	val4
>6194	Identifier	val4
>6195	Argument	val3
>6196	Identifier	val3
>6197	Callee	_mm_add_ps
>6198	Identifier	_mm_add_ps
>6199	Identifier	val4
>6200	ExpressionStatement	 
>6201	AssignmentExpr	val3 = _mm_mul_ps ( val2 , py )
>6202	CallExpression	_mm_mul_ps ( val2 , py )
>6203	ArgumentList	val2
>6204	Argument	py
>6205	Identifier	py
>6206	Argument	val2
>6207	Identifier	val2
>6208	Callee	_mm_mul_ps
>6209	Identifier	_mm_mul_ps
>6210	Identifier	val3
>6211	ExpressionStatement	 
>6212	AssignmentExpr	val4 = _mm_add_ps ( gy , val3 )
>6213	CallExpression	_mm_add_ps ( gy , val3 )
>6214	ArgumentList	gy
>6215	Argument	val3
>6216	Identifier	val3
>6217	Argument	gy
>6218	Identifier	gy
>6219	Callee	_mm_add_ps
>6220	Identifier	_mm_add_ps
>6221	Identifier	val4
>6222	ExpressionStatement	 
>6223	AssignmentExpr	val3 = _mm_mul_ps ( val1 , py )
>6224	CallExpression	_mm_mul_ps ( val1 , py )
>6225	ArgumentList	val1
>6226	Argument	py
>6227	Identifier	py
>6228	Argument	val1
>6229	Identifier	val1
>6230	Callee	_mm_mul_ps
>6231	Identifier	_mm_mul_ps
>6232	Identifier	val3
>6233	ExpressionStatement	 
>6234	AssignmentExpr	J63 = val3
>6235	Identifier	val3
>6236	Identifier	J63
>6237	ExpressionStatement	 
>6238	AssignmentExpr	val3 = _mm_sub_ps ( zeros , val3 )
>6239	CallExpression	_mm_sub_ps ( zeros , val3 )
>6240	ArgumentList	zeros
>6241	Argument	val3
>6242	Identifier	val3
>6243	Argument	zeros
>6244	Identifier	zeros
>6245	Callee	_mm_sub_ps
>6246	Identifier	_mm_sub_ps
>6247	Identifier	val3
>6248	ExpressionStatement	 
>6249	AssignmentExpr	val3 = _mm_add_ps ( val1 , val2 )
>6250	CallExpression	_mm_add_ps ( val1 , val2 )
>6251	ArgumentList	val1
>6252	Argument	val2
>6253	Identifier	val2
>6254	Argument	val1
>6255	Identifier	val1
>6256	Callee	_mm_add_ps
>6257	Identifier	_mm_add_ps
>6258	Identifier	val3
>6259	ExpressionStatement	 
>6260	AssignmentExpr	val2 = _mm_mul_ps ( val2 , pz )
>6261	CallExpression	_mm_mul_ps ( val2 , pz )
>6262	ArgumentList	val2
>6263	Argument	pz
>6264	Identifier	pz
>6265	Argument	val2
>6266	Identifier	val2
>6267	Callee	_mm_mul_ps
>6268	Identifier	_mm_mul_ps
>6269	Identifier	val2
>6270	ExpressionStatement	 
>6271	AssignmentExpr	val2 = _mm_mul_ps ( py , gy )
>6272	CallExpression	_mm_mul_ps ( py , gy )
>6273	ArgumentList	py
>6274	Argument	gy
>6275	Identifier	gy
>6276	Argument	py
>6277	Identifier	py
>6278	Callee	_mm_mul_ps
>6279	Identifier	_mm_mul_ps
>6280	Identifier	val2
>6281	ExpressionStatement	 
>6282	AssignmentExpr	val1 = _mm_mul_ps ( val1 , pz )
>6283	CallExpression	_mm_mul_ps ( val1 , pz )
>6284	ArgumentList	val1
>6285	Argument	pz
>6286	Identifier	pz
>6287	Argument	val1
>6288	Identifier	val1
>6289	Callee	_mm_mul_ps
>6290	Identifier	_mm_mul_ps
>6291	Identifier	val1
>6292	ExpressionStatement	 
>6293	AssignmentExpr	val1 = _mm_mul_ps ( px , gx )
>6294	CallExpression	_mm_mul_ps ( px , gx )
>6295	ArgumentList	px
>6296	Argument	gx
>6297	Identifier	gx
>6298	Argument	px
>6299	Identifier	px
>6300	Callee	_mm_mul_ps
>6301	Identifier	_mm_mul_ps
>6302	Identifier	val1
>6303	ExpressionStatement	 
>6304	AssignmentExpr	J43 = mpxpz
>6305	Identifier	mpxpz
>6306	Identifier	J43
>6307	IdentifierDeclStatement	 
>6308	IdentifierDecl	mpxpz = _mm_sub_ps ( zeros , _mm_mul_ps ( pz , px ) )
>6309	AssignmentExpr	mpxpz = _mm_sub_ps ( zeros , _mm_mul_ps ( pz , px ) )
>6310	CallExpression	_mm_sub_ps ( zeros , _mm_mul_ps ( pz , px ) )
>6311	ArgumentList	zeros
>6312	Argument	_mm_mul_ps ( pz , px )
>6313	CallExpression	_mm_mul_ps ( pz , px )
>6314	ArgumentList	pz
>6315	Argument	px
>6316	Identifier	px
>6317	Argument	pz
>6318	Identifier	pz
>6319	Callee	_mm_mul_ps
>6320	Identifier	_mm_mul_ps
>6321	Argument	zeros
>6322	Identifier	zeros
>6323	Callee	_mm_sub_ps
>6324	Identifier	_mm_sub_ps
>6325	Identifier	mpxpz
>6326	Identifier	mpxpz
>6327	IdentifierDeclType	__m128
>6328	ExpressionStatement	 
>6329	AssignmentExpr	J42 = pypz
>6330	Identifier	pypz
>6331	Identifier	J42
>6332	IdentifierDeclStatement	 
>6333	IdentifierDecl	pypz = _mm_mul_ps ( pz , py )
>6334	AssignmentExpr	pypz = _mm_mul_ps ( pz , py )
>6335	CallExpression	_mm_mul_ps ( pz , py )
>6336	ArgumentList	pz
>6337	Argument	py
>6338	Identifier	py
>6339	Argument	pz
>6340	Identifier	pz
>6341	Callee	_mm_mul_ps
>6342	Identifier	_mm_mul_ps
>6343	Identifier	pypz
>6344	Identifier	pypz
>6345	IdentifierDeclType	__m128
>6346	ExpressionStatement	 
>6347	AssignmentExpr	J41 = pz
>6348	Identifier	pz
>6349	Identifier	J41
>6350	ExpressionStatement	 
>6351	AssignmentExpr	pz = _mm_mul_ps ( pz , pz )
>6352	CallExpression	_mm_mul_ps ( pz , pz )
>6353	ArgumentList	pz
>6354	Argument	pz
>6355	Identifier	pz
>6356	Argument	pz
>6357	Identifier	pz
>6358	Callee	_mm_mul_ps
>6359	Identifier	_mm_mul_ps
>6360	Identifier	pz
>6361	ExpressionStatement	 
>6362	AssignmentExpr	J66 = val1
>6363	Identifier	val1
>6364	Identifier	J66
>6365	ExpressionStatement	 
>6366	AssignmentExpr	val1 = _mm_sub_ps ( val1 , val2 )
>6367	CallExpression	_mm_sub_ps ( val1 , val2 )
>6368	ArgumentList	val1
>6369	Argument	val2
>6370	Identifier	val2
>6371	Argument	val1
>6372	Identifier	val1
>6373	Callee	_mm_sub_ps
>6374	Identifier	_mm_sub_ps
>6375	Identifier	val1
>6376	ExpressionStatement	 
>6377	AssignmentExpr	val2 = _mm_mul_ps ( val2 , pz )
>6378	CallExpression	_mm_mul_ps ( val2 , pz )
>6379	ArgumentList	val2
>6380	Argument	pz
>6381	Identifier	pz
>6382	Argument	val2
>6383	Identifier	val2
>6384	Callee	_mm_mul_ps
>6385	Identifier	_mm_mul_ps
>6386	Identifier	val2
>6387	ExpressionStatement	 
>6388	AssignmentExpr	val2 = _mm_mul_ps ( py , gx )
>6389	CallExpression	_mm_mul_ps ( py , gx )
>6390	ArgumentList	py
>6391	Argument	gx
>6392	Identifier	gx
>6393	Argument	py
>6394	Identifier	py
>6395	Callee	_mm_mul_ps
>6396	Identifier	_mm_mul_ps
>6397	Identifier	val2
>6398	IdentifierDeclStatement	 
>6399	IdentifierDecl	py = _mm_load_ps ( buf_warped_y + i )
>6400	AssignmentExpr	py = _mm_load_ps ( buf_warped_y + i )
>6401	CallExpression	_mm_load_ps ( buf_warped_y + i )
>6402	ArgumentList	buf_warped_y + i
>6403	Argument	buf_warped_y + i
>6404	AdditiveExpression	buf_warped_y + i
>6405	Identifier	i
>6406	Identifier	buf_warped_y
>6407	Callee	_mm_load_ps
>6408	Identifier	_mm_load_ps
>6409	Identifier	py
>6410	Identifier	py
>6411	IdentifierDeclType	__m128
>6412	ExpressionStatement	 
>6413	AssignmentExpr	val1 = _mm_mul_ps ( val1 , pz )
>6414	CallExpression	_mm_mul_ps ( val1 , pz )
>6415	ArgumentList	val1
>6416	Argument	pz
>6417	Identifier	pz
>6418	Argument	val1
>6419	Identifier	val1
>6420	Callee	_mm_mul_ps
>6421	Identifier	_mm_mul_ps
>6422	Identifier	val1
>6423	ExpressionStatement	 
>6424	AssignmentExpr	val1 = _mm_mul_ps ( px , gy )
>6425	CallExpression	_mm_mul_ps ( px , gy )
>6426	ArgumentList	px
>6427	Argument	gy
>6428	Identifier	gy
>6429	Argument	px
>6430	Identifier	px
>6431	Callee	_mm_mul_ps
>6432	Identifier	_mm_mul_ps
>6433	Identifier	val1
>6434	IdentifierDeclStatement	 
>6435	IdentifierDecl	px = _mm_load_ps ( buf_warped_x + i )
>6436	AssignmentExpr	px = _mm_load_ps ( buf_warped_x + i )
>6437	CallExpression	_mm_load_ps ( buf_warped_x + i )
>6438	ArgumentList	buf_warped_x + i
>6439	Argument	buf_warped_x + i
>6440	AdditiveExpression	buf_warped_x + i
>6441	Identifier	i
>6442	Identifier	buf_warped_x
>6443	Callee	_mm_load_ps
>6444	Identifier	_mm_load_ps
>6445	Identifier	px
>6446	Identifier	px
>6447	IdentifierDeclType	__m128
>6448	ExpressionStatement	 
>6449	AssignmentExpr	J62 = val1
>6450	Identifier	val1
>6451	Identifier	J62
>6452	ExpressionStatement	 
>6453	AssignmentExpr	val1 = _mm_mul_ps ( pz , gy )
>6454	CallExpression	_mm_mul_ps ( pz , gy )
>6455	ArgumentList	pz
>6456	Argument	gy
>6457	Identifier	gy
>6458	Argument	pz
>6459	Identifier	pz
>6460	Callee	_mm_mul_ps
>6461	Identifier	_mm_mul_ps
>6462	Identifier	val1
>6463	IdentifierDeclStatement	 
>6464	IdentifierDecl	gy = _mm_load_ps ( buf_warped_dy + i )
>6465	AssignmentExpr	gy = _mm_load_ps ( buf_warped_dy + i )
>6466	CallExpression	_mm_load_ps ( buf_warped_dy + i )
>6467	ArgumentList	buf_warped_dy + i
>6468	Argument	buf_warped_dy + i
>6469	AdditiveExpression	buf_warped_dy + i
>6470	Identifier	i
>6471	Identifier	buf_warped_dy
>6472	Callee	_mm_load_ps
>6473	Identifier	_mm_load_ps
>6474	Identifier	gy
>6475	Identifier	gy
>6476	IdentifierDeclType	__m128
>6477	ExpressionStatement	 
>6478	AssignmentExpr	J61 = val1
>6479	Identifier	val1
>6480	Identifier	J61
>6481	ExpressionStatement	 
>6482	AssignmentExpr	val1 = _mm_mul_ps ( pz , gx )
>6483	CallExpression	_mm_mul_ps ( pz , gx )
>6484	ArgumentList	pz
>6485	Argument	gx
>6486	Identifier	gx
>6487	Argument	pz
>6488	Identifier	pz
>6489	Callee	_mm_mul_ps
>6490	Identifier	_mm_mul_ps
>6491	Identifier	val1
>6492	IdentifierDeclStatement	 
>6493	IdentifierDecl	gx = _mm_load_ps ( buf_warped_dx + i )
>6494	AssignmentExpr	gx = _mm_load_ps ( buf_warped_dx + i )
>6495	CallExpression	_mm_load_ps ( buf_warped_dx + i )
>6496	ArgumentList	buf_warped_dx + i
>6497	Argument	buf_warped_dx + i
>6498	AdditiveExpression	buf_warped_dx + i
>6499	Identifier	i
>6500	Identifier	buf_warped_dx
>6501	Callee	_mm_load_ps
>6502	Identifier	_mm_load_ps
>6503	Identifier	gx
>6504	Identifier	gx
>6505	IdentifierDeclType	__m128
>6506	ExpressionStatement	 
>6507	AssignmentExpr	J44 = pz
>6508	Identifier	pz
>6509	Identifier	J44
>6510	ExpressionStatement	 
>6511	AssignmentExpr	pz = _mm_rcp_ps ( pz )
>6512	CallExpression	_mm_rcp_ps ( pz )
>6513	ArgumentList	pz
>6514	Argument	pz
>6515	Identifier	pz
>6516	Callee	_mm_rcp_ps
>6517	Identifier	_mm_rcp_ps
>6518	Identifier	pz
>6519	IdentifierDeclStatement	 
>6520	IdentifierDecl	pz = _mm_load_ps ( buf_warped_z + i )
>6521	AssignmentExpr	pz = _mm_load_ps ( buf_warped_z + i )
>6522	CallExpression	_mm_load_ps ( buf_warped_z + i )
>6523	ArgumentList	buf_warped_z + i
>6524	Argument	buf_warped_z + i
>6525	AdditiveExpression	buf_warped_z + i
>6526	Identifier	i
>6527	Identifier	buf_warped_z
>6528	Callee	_mm_load_ps
>6529	Identifier	_mm_load_ps
>6530	Identifier	pz
>6531	Identifier	pz
>6532	IdentifierDeclType	__m128
>6533	IdentifierDeclStatement	 
>6534	IdentifierDecl	J66
>6535	Identifier	J66
>6536	IdentifierDeclType	__m128
>6537	IdentifierDecl	J65
>6538	Identifier	J65
>6539	IdentifierDeclType	__m128
>6540	IdentifierDecl	J64
>6541	Identifier	J64
>6542	IdentifierDeclType	__m128
>6543	IdentifierDecl	J63
>6544	Identifier	J63
>6545	IdentifierDeclType	__m128
>6546	IdentifierDecl	J62
>6547	Identifier	J62
>6548	IdentifierDeclType	__m128
>6549	IdentifierDecl	J61
>6550	Identifier	J61
>6551	IdentifierDeclType	__m128
>6552	IdentifierDeclStatement	 
>6553	IdentifierDecl	J44
>6554	Identifier	J44
>6555	IdentifierDeclType	__m128
>6556	IdentifierDecl	J43
>6557	Identifier	J43
>6558	IdentifierDeclType	__m128
>6559	IdentifierDecl	J42
>6560	Identifier	J42
>6561	IdentifierDeclType	__m128
>6562	IdentifierDecl	J41
>6563	Identifier	J41
>6564	IdentifierDeclType	__m128
>6565	IdentifierDeclStatement	 
>6566	IdentifierDecl	val4
>6567	Identifier	val4
>6568	IdentifierDeclType	__m128
>6569	IdentifierDecl	val3
>6570	Identifier	val3
>6571	IdentifierDeclType	__m128
>6572	IdentifierDecl	val2
>6573	Identifier	val2
>6574	IdentifierDeclType	__m128
>6575	IdentifierDecl	val1
>6576	Identifier	val1
>6577	IdentifierDeclType	__m128
>6578	AssignmentExpr	 
>6579	PrimaryExpression	4
>6580	Identifier	i
>6581	Condition	 
>6582	RelationalExpression	i < buf_warped_size - 3
>6583	AdditiveExpression	buf_warped_size - 3
>6584	PrimaryExpression	3
>6585	Identifier	buf_warped_size
>6586	Identifier	i
>6587	ForInit	 
>6588	IdentifierDeclStatement	int i = 0 ;
>6589	IdentifierDecl	i = 0
>6590	AssignmentExpr	i = 0
>6591	PrimaryExpression	0
>6592	Identifier	i
>6593	Identifier	i
>6594	IdentifierDeclType	int
>6595	IdentifierDeclStatement	 
>6596	IdentifierDecl	zeros = _mm_set1_ps ( 0.0f )
>6597	AssignmentExpr	zeros = _mm_set1_ps ( 0.0f )
>6598	CallExpression	_mm_set1_ps ( 0.0f )
>6599	ArgumentList	0.0f
>6600	Argument	0.0f
>6601	PrimaryExpression	0.0f
>6602	Callee	_mm_set1_ps
>6603	Identifier	_mm_set1_ps
>6604	Identifier	zeros
>6605	Identifier	zeros
>6606	IdentifierDeclType	const __m128
>6607	ExpressionStatement	 
>6608	CallExpression	ls4 . initialize ( width * height )
>6609	ArgumentList	width * height
>6610	Argument	width * height
>6611	MultiplicativeExpression	width * height
>6612	Identifier	height
>6613	Identifier	width
>6614	Callee	ls4 . initialize
>6615	MemberAccess	ls4 . initialize
>6616	Identifier	initialize
>6617	Identifier	ls4
>6618	ExpressionStatement	 
>6619	CallExpression	ls6 . initialize ( width * height )
>6620	ArgumentList	width * height
>6621	Argument	width * height
>6622	MultiplicativeExpression	width * height
>6623	Identifier	height
>6624	Identifier	width
>6625	Callee	ls6 . initialize
>6626	MemberAccess	ls6 . initialize
>6627	Identifier	initialize
>6628	Identifier	ls6
>6629	IdentifierDeclStatement	 
>6630	IdentifierDecl	ls6
>6631	Identifier	ls6
>6632	IdentifierDeclType	LGS6
>6633	IdentifierDeclStatement	 
>6634	IdentifierDecl	ls4
>6635	Identifier	ls4
>6636	IdentifierDeclType	LGS4
>6697	FunctionDef	Sim3Tracker 
>6698	ParameterList	LGS7 & ls7
>6699	Parameter	 
>6700	Identifier	ls7
>6701	ParameterType	LGS7 &
>6702	ReturnType	void
>6703	CompoundStatement	 
>6704	ExpressionStatement	 
>6705	CallExpression	calcSim3LGS ( ls7 )
>6706	ArgumentList	ls7
>6707	Argument	ls7
>6708	Identifier	ls7
>6709	Callee	calcSim3LGS
>6710	Identifier	calcSim3LGS
>6715	FunctionDef	Sim3Tracker 
>6716	ParameterList	LGS7 & ls7
>6717	Parameter	 
>6718	Identifier	ls7
>6719	ParameterType	LGS7 &
>6720	ReturnType	void
>6721	CompoundStatement	 
>6722	ExpressionStatement	 
>6723	CallExpression	ls7 . initializeFrom ( ls6 , ls4 )
>6724	ArgumentList	ls6
>6725	Argument	ls4
>6726	Identifier	ls4
>6727	Argument	ls6
>6728	Identifier	ls6
>6729	Callee	ls7 . initializeFrom
>6730	MemberAccess	ls7 . initializeFrom
>6731	Identifier	initializeFrom
>6732	Identifier	ls7
>6733	ExpressionStatement	 
>6734	CallExpression	ls6 . finishNoDivide ( )
>6735	ArgumentList	 
>6736	Callee	ls6 . finishNoDivide
>6737	MemberAccess	ls6 . finishNoDivide
>6738	Identifier	finishNoDivide
>6739	Identifier	ls6
>6740	ExpressionStatement	 
>6741	CallExpression	ls4 . finishNoDivide ( )
>6742	ArgumentList	 
>6743	Callee	ls4 . finishNoDivide
>6744	MemberAccess	ls4 . finishNoDivide
>6745	Identifier	finishNoDivide
>6746	Identifier	ls4
>6747	ForStatement	for ( int i = 0 ; i < buf_warped_size ; i ++ )
>6748	CompoundStatement	 
>6749	ExpressionStatement	 
>6750	CallExpression	ls4 . update ( v4 , rd , wd )
>6751	ArgumentList	v4
>6752	Argument	wd
>6753	Identifier	wd
>6754	Argument	rd
>6755	Identifier	rd
>6756	Argument	v4
>6757	Identifier	v4
>6758	Callee	ls4 . update
>6759	MemberAccess	ls4 . update
>6760	Identifier	update
>6761	Identifier	ls4
>6762	ExpressionStatement	 
>6763	CallExpression	ls6 . update ( v , rp , wp )
>6764	ArgumentList	v
>6765	Argument	wp
>6766	Identifier	wp
>6767	Argument	rp
>6768	Identifier	rp
>6769	Argument	v
>6770	Identifier	v
>6771	Callee	ls6 . update
>6772	MemberAccess	ls6 . update
>6773	Identifier	update
>6774	Identifier	ls6
>6775	ExpressionStatement	 
>6776	AssignmentExpr	v4 [ 3 ] = z
>6777	Identifier	z
>6778	ArrayIndexing	v4 [ 3 ]
>6779	PrimaryExpression	3
>6780	Identifier	v4
>6781	ExpressionStatement	 
>6782	AssignmentExpr	v4 [ 2 ] = - z_sqr * px
>6783	MultiplicativeExpression	- z_sqr * px
>6784	Identifier	px
>6785	UnaryOp	- z_sqr
>6786	Identifier	z_sqr
>6787	UnaryOperator	-
>6788	ArrayIndexing	v4 [ 2 ]
>6789	PrimaryExpression	2
>6790	Identifier	v4
>6791	ExpressionStatement	 
>6792	AssignmentExpr	v4 [ 1 ] = z_sqr * py
>6793	MultiplicativeExpression	z_sqr * py
>6794	Identifier	py
>6795	Identifier	z_sqr
>6796	ArrayIndexing	v4 [ 1 ]
>6797	PrimaryExpression	1
>6798	Identifier	v4
>6799	ExpressionStatement	 
>6800	AssignmentExpr	v4 [ 0 ] = z_sqr
>6801	Identifier	z_sqr
>6802	ArrayIndexing	v4 [ 0 ]
>6803	PrimaryExpression	0
>6804	Identifier	v4
>6805	ExpressionStatement	 
>6806	AssignmentExpr	v [ 5 ] = ( - py * z ) * gx + ( px * z ) * gy
>6807	AdditiveExpression	( - py * z ) * gx + ( px * z ) * gy
>6808	MultiplicativeExpression	( px * z ) * gy
>6809	Identifier	gy
>6810	MultiplicativeExpression	px * z
>6811	Identifier	z
>6812	Identifier	px
>6813	MultiplicativeExpression	( - py * z ) * gx
>6814	Identifier	gx
>6815	MultiplicativeExpression	- py * z
>6816	Identifier	z
>6817	UnaryOp	- py
>6818	Identifier	py
>6819	UnaryOperator	-
>6820	ArrayIndexing	v [ 5 ]
>6821	PrimaryExpression	5
>6822	Identifier	v
>6823	ExpressionStatement	 
>6824	AssignmentExpr	v [ 4 ] = ( 1.0 + px * px * z_sqr ) * gx + ( px * py * z_sqr ) * gy
>6825	AdditiveExpression	( 1.0 + px * px * z_sqr ) * gx + ( px * py * z_sqr ) * gy
>6826	MultiplicativeExpression	( px * py * z_sqr ) * gy
>6827	Identifier	gy
>6828	MultiplicativeExpression	px * py * z_sqr
>6829	MultiplicativeExpression	py * z_sqr
>6830	Identifier	z_sqr
>6831	Identifier	py
>6832	Identifier	px
>6833	MultiplicativeExpression	( 1.0 + px * px * z_sqr ) * gx
>6834	Identifier	gx
>6835	AdditiveExpression	1.0 + px * px * z_sqr
>6836	MultiplicativeExpression	px * px * z_sqr
>6837	MultiplicativeExpression	px * z_sqr
>6838	Identifier	z_sqr
>6839	Identifier	px
>6840	Identifier	px
>6841	PrimaryExpression	1.0
>6842	ArrayIndexing	v [ 4 ]
>6843	PrimaryExpression	4
>6844	Identifier	v
>6845	ExpressionStatement	 
>6846	AssignmentExpr	v [ 3 ] = ( - px * py * z_sqr ) * gx + ( - ( 1.0 + py * py * z_sqr ) ) * gy
>6847	AdditiveExpression	( - px * py * z_sqr ) * gx + ( - ( 1.0 + py * py * z_sqr ) ) * gy
>6848	MultiplicativeExpression	( - ( 1.0 + py * py * z_sqr ) ) * gy
>6849	Identifier	gy
>6850	UnaryOp	- ( 1.0 + py * py * z_sqr )
>6851	AdditiveExpression	1.0 + py * py * z_sqr
>6852	MultiplicativeExpression	py * py * z_sqr
>6853	MultiplicativeExpression	py * z_sqr
>6854	Identifier	z_sqr
>6855	Identifier	py
>6856	Identifier	py
>6857	PrimaryExpression	1.0
>6858	UnaryOperator	-
>6859	MultiplicativeExpression	( - px * py * z_sqr ) * gx
>6860	Identifier	gx
>6861	MultiplicativeExpression	- px * py * z_sqr
>6862	MultiplicativeExpression	py * z_sqr
>6863	Identifier	z_sqr
>6864	Identifier	py
>6865	UnaryOp	- px
>6866	Identifier	px
>6867	UnaryOperator	-
>6868	ArrayIndexing	v [ 3 ]
>6869	PrimaryExpression	3
>6870	Identifier	v
>6871	ExpressionStatement	 
>6872	AssignmentExpr	v [ 2 ] = ( - px * z_sqr ) * gx + ( - py * z_sqr ) * gy
>6873	AdditiveExpression	( - px * z_sqr ) * gx + ( - py * z_sqr ) * gy
>6874	MultiplicativeExpression	( - py * z_sqr ) * gy
>6875	Identifier	gy
>6876	MultiplicativeExpression	- py * z_sqr
>6877	Identifier	z_sqr
>6878	UnaryOp	- py
>6879	Identifier	py
>6880	UnaryOperator	-
>6881	MultiplicativeExpression	( - px * z_sqr ) * gx
>6882	Identifier	gx
>6883	MultiplicativeExpression	- px * z_sqr
>6884	Identifier	z_sqr
>6885	UnaryOp	- px
>6886	Identifier	px
>6887	UnaryOperator	-
>6888	ArrayIndexing	v [ 2 ]
>6889	PrimaryExpression	2
>6890	Identifier	v
>6891	ExpressionStatement	 
>6892	AssignmentExpr	v [ 1 ] = 0 + z * gy
>6893	AdditiveExpression	0 + z * gy
>6894	MultiplicativeExpression	z * gy
>6895	Identifier	gy
>6896	Identifier	z
>6897	PrimaryExpression	0
>6898	ArrayIndexing	v [ 1 ]
>6899	PrimaryExpression	1
>6900	Identifier	v
>6901	ExpressionStatement	 
>6902	AssignmentExpr	v [ 0 ] = z * gx + 0
>6903	AdditiveExpression	z * gx + 0
>6904	PrimaryExpression	0
>6905	MultiplicativeExpression	z * gx
>6906	Identifier	gx
>6907	Identifier	z
>6908	ArrayIndexing	v [ 0 ]
>6909	PrimaryExpression	0
>6910	Identifier	v
>6911	IdentifierDeclStatement	 
>6912	IdentifierDecl	v4
>6913	Identifier	v4
>6914	IdentifierDeclType	Vector4
>6915	IdentifierDeclStatement	 
>6916	IdentifierDecl	v
>6917	Identifier	v
>6918	IdentifierDeclType	Vector6
>6919	IdentifierDeclStatement	 
>6920	IdentifierDecl	z_sqr = 1.0f / ( pz * pz )
>6921	AssignmentExpr	z_sqr = 1.0f / ( pz * pz )
>6922	MultiplicativeExpression	1.0f / ( pz * pz )
>6923	MultiplicativeExpression	pz * pz
>6924	Identifier	pz
>6925	Identifier	pz
>6926	PrimaryExpression	1.0f
>6927	Identifier	z_sqr
>6928	Identifier	z_sqr
>6929	IdentifierDeclType	float
>6930	IdentifierDeclStatement	 
>6931	IdentifierDecl	z = 1.0f / pz
>6932	AssignmentExpr	z = 1.0f / pz
>6933	MultiplicativeExpression	1.0f / pz
>6934	Identifier	pz
>6935	PrimaryExpression	1.0f
>6936	Identifier	z
>6937	Identifier	z
>6938	IdentifierDeclType	float
>6939	IdentifierDeclStatement	 
>6940	IdentifierDecl	gy = * ( buf_warped_dy + i )
>6941	AssignmentExpr	gy = * ( buf_warped_dy + i )
>6942	UnaryOp	* ( buf_warped_dy + i )
>6943	AdditiveExpression	buf_warped_dy + i
>6944	Identifier	i
>6945	Identifier	buf_warped_dy
>6946	UnaryOperator	*
>6947	Identifier	gy
>6948	Identifier	gy
>6949	IdentifierDeclType	float
>6950	IdentifierDeclStatement	 
>6951	IdentifierDecl	gx = * ( buf_warped_dx + i )
>6952	AssignmentExpr	gx = * ( buf_warped_dx + i )
>6953	UnaryOp	* ( buf_warped_dx + i )
>6954	AdditiveExpression	buf_warped_dx + i
>6955	Identifier	i
>6956	Identifier	buf_warped_dx
>6957	UnaryOperator	*
>6958	Identifier	gx
>6959	Identifier	gx
>6960	IdentifierDeclType	float
>6961	IdentifierDeclStatement	 
>6962	IdentifierDecl	rd = * ( buf_residual_d + i )
>6963	AssignmentExpr	rd = * ( buf_residual_d + i )
>6964	UnaryOp	* ( buf_residual_d + i )
>6965	AdditiveExpression	buf_residual_d + i
>6966	Identifier	i
>6967	Identifier	buf_residual_d
>6968	UnaryOperator	*
>6969	Identifier	rd
>6970	Identifier	rd
>6971	IdentifierDeclType	float
>6972	IdentifierDeclStatement	 
>6973	IdentifierDecl	rp = * ( buf_warped_residual + i )
>6974	AssignmentExpr	rp = * ( buf_warped_residual + i )
>6975	UnaryOp	* ( buf_warped_residual + i )
>6976	AdditiveExpression	buf_warped_residual + i
>6977	Identifier	i
>6978	Identifier	buf_warped_residual
>6979	UnaryOperator	*
>6980	Identifier	rp
>6981	Identifier	rp
>6982	IdentifierDeclType	float
>6983	IdentifierDeclStatement	 
>6984	IdentifierDecl	wd = * ( buf_weight_d + i )
>6985	AssignmentExpr	wd = * ( buf_weight_d + i )
>6986	UnaryOp	* ( buf_weight_d + i )
>6987	AdditiveExpression	buf_weight_d + i
>6988	Identifier	i
>6989	Identifier	buf_weight_d
>6990	UnaryOperator	*
>6991	Identifier	wd
>6992	Identifier	wd
>6993	IdentifierDeclType	float
>6994	IdentifierDeclStatement	 
>6995	IdentifierDecl	wp = * ( buf_weight_p + i )
>6996	AssignmentExpr	wp = * ( buf_weight_p + i )
>6997	UnaryOp	* ( buf_weight_p + i )
>6998	AdditiveExpression	buf_weight_p + i
>6999	Identifier	i
>7000	Identifier	buf_weight_p
>7001	UnaryOperator	*
>7002	Identifier	wp
>7003	Identifier	wp
>7004	IdentifierDeclType	float
>7005	IdentifierDeclStatement	 
>7006	IdentifierDecl	pz = * ( buf_warped_z + i )
>7007	AssignmentExpr	pz = * ( buf_warped_z + i )
>7008	UnaryOp	* ( buf_warped_z + i )
>7009	AdditiveExpression	buf_warped_z + i
>7010	Identifier	i
>7011	Identifier	buf_warped_z
>7012	UnaryOperator	*
>7013	Identifier	pz
>7014	Identifier	pz
>7015	IdentifierDeclType	float
>7016	IdentifierDeclStatement	 
>7017	IdentifierDecl	py = * ( buf_warped_y + i )
>7018	AssignmentExpr	py = * ( buf_warped_y + i )
>7019	UnaryOp	* ( buf_warped_y + i )
>7020	AdditiveExpression	buf_warped_y + i
>7021	Identifier	i
>7022	Identifier	buf_warped_y
>7023	UnaryOperator	*
>7024	Identifier	py
>7025	Identifier	py
>7026	IdentifierDeclType	float
>7027	IdentifierDeclStatement	 
>7028	IdentifierDecl	px = * ( buf_warped_x + i )
>7029	AssignmentExpr	px = * ( buf_warped_x + i )
>7030	UnaryOp	* ( buf_warped_x + i )
>7031	AdditiveExpression	buf_warped_x + i
>7032	Identifier	i
>7033	Identifier	buf_warped_x
>7034	UnaryOperator	*
>7035	Identifier	px
>7036	Identifier	px
>7037	IdentifierDeclType	float
>7038	IncDecOp	 
>7039	IncDec	++
>7040	Identifier	i
>7041	Condition	 
>7042	RelationalExpression	i < buf_warped_size
>7043	Identifier	buf_warped_size
>7044	Identifier	i
>7045	ForInit	 
>7046	IdentifierDeclStatement	int i = 0 ;
>7047	IdentifierDecl	i = 0
>7048	AssignmentExpr	i = 0
>7049	PrimaryExpression	0
>7050	Identifier	i
>7051	Identifier	i
>7052	IdentifierDeclType	int
>7053	ExpressionStatement	 
>7054	CallExpression	ls4 . initialize ( width * height )
>7055	ArgumentList	width * height
>7056	Argument	width * height
>7057	MultiplicativeExpression	width * height
>7058	Identifier	height
>7059	Identifier	width
>7060	Callee	ls4 . initialize
>7061	MemberAccess	ls4 . initialize
>7062	Identifier	initialize
>7063	Identifier	ls4
>7064	ExpressionStatement	 
>7065	CallExpression	ls6 . initialize ( width * height )
>7066	ArgumentList	width * height
>7067	Argument	width * height
>7068	MultiplicativeExpression	width * height
>7069	Identifier	height
>7070	Identifier	width
>7071	Callee	ls6 . initialize
>7072	MemberAccess	ls6 . initialize
>7073	Identifier	initialize
>7074	Identifier	ls6
>7075	IdentifierDeclStatement	 
>7076	IdentifierDecl	ls6
>7077	Identifier	ls6
>7078	IdentifierDeclType	LGS6
>7079	IdentifierDeclStatement	 
>7080	IdentifierDecl	ls4
>7081	Identifier	ls4
>7082	IdentifierDeclType	LGS4
>7136	FunctionDef	Sim3Tracker 
>7137	ParameterList	 
>7138	ReturnType	void
>7139	CompoundStatement	 
>7140	IfStatement	if ( plotTrackingIterationInfo || saveAllTrackingStagesInternal )
>7141	CompoundStatement	 
>7142	ExpressionStatement	 
>7143	CallExpression	fillCvMat ( & debugImageDepthResiduals , cv 
>7144	ArgumentList	& debugImageDepthResiduals
>7145	Argument	cv 
>7146	CallExpression	cv 
>7147	ArgumentList	other
>7148	Argument	255
>7149	PrimaryExpression	255
>7150	Argument	other
>7151	Identifier	other
>7152	Argument	other
>7153	Identifier	other
>7154	Callee	cv 
>7155	Identifier	cv 
>7156	Argument	& debugImageDepthResiduals
>7157	UnaryOp	& debugImageDepthResiduals
>7158	Identifier	debugImageDepthResiduals
>7159	UnaryOperator	&
>7160	Callee	fillCvMat
>7161	Identifier	fillCvMat
>7162	ExpressionStatement	 
>7163	CallExpression	fillCvMat ( & debugImageScaleEstimation , cv 
>7164	ArgumentList	& debugImageScaleEstimation
>7165	Argument	cv 
>7166	CallExpression	cv 
>7167	ArgumentList	255
>7168	Argument	other
>7169	Identifier	other
>7170	Argument	other
>7171	Identifier	other
>7172	Argument	255
>7173	PrimaryExpression	255
>7174	Callee	cv 
>7175	Identifier	cv 
>7176	Argument	& debugImageScaleEstimation
>7177	UnaryOp	& debugImageScaleEstimation
>7178	Identifier	debugImageScaleEstimation
>7179	UnaryOperator	&
>7180	Callee	fillCvMat
>7181	Identifier	fillCvMat
>7182	ExpressionStatement	 
>7183	CallExpression	fillCvMat ( & debugImageOldImageWarped , cv 
>7184	ArgumentList	& debugImageOldImageWarped
>7185	Argument	cv 
>7186	CallExpression	cv 
>7187	ArgumentList	other
>7188	Argument	255
>7189	PrimaryExpression	255
>7190	Argument	other
>7191	Identifier	other
>7192	Argument	other
>7193	Identifier	other
>7194	Callee	cv 
>7195	Identifier	cv 
>7196	Argument	& debugImageOldImageWarped
>7197	UnaryOp	& debugImageOldImageWarped
>7198	Identifier	debugImageOldImageWarped
>7199	UnaryOperator	&
>7200	Callee	fillCvMat
>7201	Identifier	fillCvMat
>7202	ExpressionStatement	 
>7203	CallExpression	fillCvMat ( & debugImageOldImageSource , cv 
>7204	ArgumentList	& debugImageOldImageSource
>7205	Argument	cv 
>7206	CallExpression	cv 
>7207	ArgumentList	other
>7208	Argument	255
>7209	PrimaryExpression	255
>7210	Argument	other
>7211	Identifier	other
>7212	Argument	other
>7213	Identifier	other
>7214	Callee	cv 
>7215	Identifier	cv 
>7216	Argument	& debugImageOldImageSource
>7217	UnaryOp	& debugImageOldImageSource
>7218	Identifier	debugImageOldImageSource
>7219	UnaryOperator	&
>7220	Callee	fillCvMat
>7221	Identifier	fillCvMat
>7222	ExpressionStatement	 
>7223	CallExpression	fillCvMat ( & debugImageWeights , cv 
>7224	ArgumentList	& debugImageWeights
>7225	Argument	cv 
>7226	CallExpression	cv 
>7227	ArgumentList	other
>7228	Argument	255
>7229	PrimaryExpression	255
>7230	Argument	other
>7231	Identifier	other
>7232	Argument	other
>7233	Identifier	other
>7234	Callee	cv 
>7235	Identifier	cv 
>7236	Argument	& debugImageWeights
>7237	UnaryOp	& debugImageWeights
>7238	Identifier	debugImageWeights
>7239	UnaryOperator	&
>7240	Callee	fillCvMat
>7241	Identifier	fillCvMat
>7242	ExpressionStatement	 
>7243	CallExpression	fillCvMat ( & debugImageExternalWeights , cv 
>7244	ArgumentList	& debugImageExternalWeights
>7245	Argument	cv 
>7246	CallExpression	cv 
>7247	ArgumentList	other
>7248	Argument	255
>7249	PrimaryExpression	255
>7250	Argument	other
>7251	Identifier	other
>7252	Argument	other
>7253	Identifier	other
>7254	Callee	cv 
>7255	Identifier	cv 
>7256	Argument	& debugImageExternalWeights
>7257	UnaryOp	& debugImageExternalWeights
>7258	Identifier	debugImageExternalWeights
>7259	UnaryOperator	&
>7260	Callee	fillCvMat
>7261	Identifier	fillCvMat
>7262	ExpressionStatement	 
>7263	CallExpression	fillCvMat ( & debugImageResiduals , cv 
>7264	ArgumentList	& debugImageResiduals
>7265	Argument	cv 
>7266	CallExpression	cv 
>7267	ArgumentList	other
>7268	Argument	255
>7269	PrimaryExpression	255
>7270	Argument	other
>7271	Identifier	other
>7272	Argument	other
>7273	Identifier	other
>7274	Callee	cv 
>7275	Identifier	cv 
>7276	Argument	& debugImageResiduals
>7277	UnaryOp	& debugImageResiduals
>7278	Identifier	debugImageResiduals
>7279	UnaryOperator	&
>7280	Callee	fillCvMat
>7281	Identifier	fillCvMat
>7282	IdentifierDeclStatement	 
>7283	IdentifierDecl	other = saveAllTrackingStagesInternal ? 255 
>7284	AssignmentExpr	other = saveAllTrackingStagesInternal ? 255 
>7285	ConditionalExpression	saveAllTrackingStagesInternal ? 255 
>7286	PrimaryExpression	0
>7287	PrimaryExpression	255
>7288	Condition	saveAllTrackingStagesInternal
>7289	Identifier	saveAllTrackingStagesInternal
>7290	Identifier	other
>7291	Identifier	other
>7292	IdentifierDeclType	int
>7293	Condition	 
>7294	OrExpression	plotTrackingIterationInfo || saveAllTrackingStagesInternal
>7295	Identifier	saveAllTrackingStagesInternal
>7296	Identifier	plotTrackingIterationInfo
>7311	FunctionDef	Sim3Tracker 
>7312	ParameterList	int w
>7313	Parameter	 
>7314	Identifier	w
>7315	ParameterType	int
>7316	ReturnType	void
>7317	CompoundStatement	 
>7318	IfStatement	if ( saveAllTrackingStagesInternal )
>7319	CompoundStatement	 
>7320	ExpressionStatement	 
>7321	CallExpression	printf ( \"saved three images for lvl %d, iteration %d\n\" , w , iterationNumber )
>7322	ArgumentList	\"saved three images for lvl %d, iteration %d\n\"
>7323	Argument	iterationNumber
>7324	Identifier	iterationNumber
>7325	Argument	w
>7326	Identifier	w
>7327	Argument	\"saved three images for lvl %d, iteration %d\n\"
>7328	PrimaryExpression	\"saved three images for lvl %d, iteration %d\n\"
>7329	Callee	printf
>7330	Identifier	printf
>7331	ExpressionStatement	 
>7332	CallExpression	cv 
>7333	ArgumentList	charbuf
>7334	Argument	debugImageWeights
>7335	Identifier	debugImageWeights
>7336	Argument	charbuf
>7337	Identifier	charbuf
>7338	Callee	cv 
>7339	Identifier	cv 
>7340	ExpressionStatement	 
>7341	CallExpression	snprintf ( charbuf , 500 , \"save/%sweights-%d-%d.png\" , packagePath . c_str ( ) , w , iterationNumber )
>7342	ArgumentList	charbuf
>7343	Argument	iterationNumber
>7344	Identifier	iterationNumber
>7345	Argument	w
>7346	Identifier	w
>7347	Argument	packagePath . c_str ( )
>7348	CallExpression	packagePath . c_str ( )
>7349	ArgumentList	 
>7350	Callee	packagePath . c_str
>7351	MemberAccess	packagePath . c_str
>7352	Identifier	c_str
>7353	Identifier	packagePath
>7354	Argument	\"save/%sweights-%d-%d.png\"
>7355	PrimaryExpression	\"save/%sweights-%d-%d.png\"
>7356	Argument	500
>7357	PrimaryExpression	500
>7358	Argument	charbuf
>7359	Identifier	charbuf
>7360	Callee	snprintf
>7361	Identifier	snprintf
>7362	ExpressionStatement	 
>7363	CallExpression	cv 
>7364	ArgumentList	charbuf
>7365	Argument	debugImageOldImageWarped
>7366	Identifier	debugImageOldImageWarped
>7367	Argument	charbuf
>7368	Identifier	charbuf
>7369	Callee	cv 
>7370	Identifier	cv 
>7371	ExpressionStatement	 
>7372	CallExpression	snprintf ( charbuf , 500 , \"save/%swarped-%d-%d.png\" , packagePath . c_str ( ) , w , iterationNumber )
>7373	ArgumentList	charbuf
>7374	Argument	iterationNumber
>7375	Identifier	iterationNumber
>7376	Argument	w
>7377	Identifier	w
>7378	Argument	packagePath . c_str ( )
>7379	CallExpression	packagePath . c_str ( )
>7380	ArgumentList	 
>7381	Callee	packagePath . c_str
>7382	MemberAccess	packagePath . c_str
>7383	Identifier	c_str
>7384	Identifier	packagePath
>7385	Argument	\"save/%swarped-%d-%d.png\"
>7386	PrimaryExpression	\"save/%swarped-%d-%d.png\"
>7387	Argument	500
>7388	PrimaryExpression	500
>7389	Argument	charbuf
>7390	Identifier	charbuf
>7391	Callee	snprintf
>7392	Identifier	snprintf
>7393	ExpressionStatement	 
>7394	CallExpression	cv 
>7395	ArgumentList	charbuf
>7396	Argument	debugImageResiduals
>7397	Identifier	debugImageResiduals
>7398	Argument	charbuf
>7399	Identifier	charbuf
>7400	Callee	cv 
>7401	Identifier	cv 
>7402	ExpressionStatement	 
>7403	CallExpression	snprintf ( charbuf , 500 , \"save/%sresidual-%d-%d.png\" , packagePath . c_str ( ) , w , iterationNumber )
>7404	ArgumentList	charbuf
>7405	Argument	iterationNumber
>7406	Identifier	iterationNumber
>7407	Argument	w
>7408	Identifier	w
>7409	Argument	packagePath . c_str ( )
>7410	CallExpression	packagePath . c_str ( )
>7411	ArgumentList	 
>7412	Callee	packagePath . c_str
>7413	MemberAccess	packagePath . c_str
>7414	Identifier	c_str
>7415	Identifier	packagePath
>7416	Argument	\"save/%sresidual-%d-%d.png\"
>7417	PrimaryExpression	\"save/%sresidual-%d-%d.png\"
>7418	Argument	500
>7419	PrimaryExpression	500
>7420	Argument	charbuf
>7421	Identifier	charbuf
>7422	Callee	snprintf
>7423	Identifier	snprintf
>7424	IdentifierDeclStatement	 
>7425	IdentifierDecl	charbuf [ 500 ]
>7426	PrimaryExpression	500
>7427	Identifier	charbuf
>7428	IdentifierDeclType	char [ 500 ]
>7429	Condition	 
>7430	Identifier	saveAllTrackingStagesInternal
>7431	IfStatement	if ( plotTrackingIterationInfo )
>7432	CompoundStatement	 
>7433	WhileStatement	while ( looping )
>7434	CompoundStatement	 
>7435	IfStatement	if ( key == ' ' )
>7436	ElseStatement	else
>7437	ExpressionStatement	 
>7438	CallExpression	handleKey ( k )
>7439	ArgumentList	k
>7440	Argument	k
>7441	Identifier	k
>7442	Callee	handleKey
>7443	Identifier	handleKey
>7444	ExpressionStatement	 
>7445	AssignmentExpr	looping = false
>7446	Identifier	false
>7447	Identifier	looping
>7448	Condition	 
>7449	EqualityExpression	key == ' '
>7450	PrimaryExpression	' '
>7451	Identifier	key
>7452	IdentifierDeclStatement	 
>7453	IdentifierDecl	key = k
>7454	AssignmentExpr	key = k
>7455	Identifier	k
>7456	Identifier	k
>7457	Identifier	key
>7458	IdentifierDeclType	char
>7459	IfStatement	if ( k == - 1 )
>7460	CompoundStatement	 
>7461	IfStatement	if ( autoRunWithinFrame )
>7462	ElseStatement	else
>7463	ContinueStatement	 
>7464	BreakStatement	 
>7465	Condition	 
>7466	Identifier	autoRunWithinFrame
>7467	Condition	 
>7468	EqualityExpression	k == - 1
>7469	UnaryOp	- 1
>7470	PrimaryExpression	1
>7471	UnaryOperator	-
>7472	Identifier	k
>7473	IdentifierDeclStatement	 
>7474	IdentifierDecl	k = Util 
>7475	AssignmentExpr	k = Util 
>7476	CallExpression	Util 
>7477	ArgumentList	1
>7478	Argument	1
>7479	PrimaryExpression	1
>7480	Callee	Util 
>7481	Identifier	Util 
>7482	Identifier	k
>7483	Identifier	k
>7484	IdentifierDeclType	int
>7485	Condition	 
>7486	Identifier	looping
>7487	IdentifierDeclStatement	 
>7488	IdentifierDecl	looping = true
>7489	AssignmentExpr	looping = true
>7490	Identifier	true
>7491	Identifier	true
>7492	Identifier	looping
>7493	IdentifierDeclType	bool
>7494	ExpressionStatement	 
>7495	CallExpression	Util 
>7496	ArgumentList	\"Depth Residuals\"
>7497	Argument	debugImageDepthResiduals
>7498	Identifier	debugImageDepthResiduals
>7499	Argument	\"Depth Residuals\"
>7500	PrimaryExpression	\"Depth Residuals\"
>7501	Callee	Util 
>7502	Identifier	Util 
>7503	ExpressionStatement	 
>7504	CallExpression	Util 
>7505	ArgumentList	\"DepthVar Weights\"
>7506	Argument	debugImageExternalWeights
>7507	Identifier	debugImageExternalWeights
>7508	Argument	\"DepthVar Weights\"
>7509	PrimaryExpression	\"DepthVar Weights\"
>7510	Callee	Util 
>7511	Identifier	Util 
>7512	ExpressionStatement	 
>7513	CallExpression	Util 
>7514	ArgumentList	\"Residuals\"
>7515	Argument	debugImageResiduals
>7516	Identifier	debugImageResiduals
>7517	Argument	\"Residuals\"
>7518	PrimaryExpression	\"Residuals\"
>7519	Callee	Util 
>7520	Identifier	Util 
>7521	ExpressionStatement	 
>7522	CallExpression	Util 
>7523	ArgumentList	\"Intensities of second_frame at pointcloud in first_frame\"
>7524	Argument	debugImageOldImageWarped
>7525	Identifier	debugImageOldImageWarped
>7526	Argument	\"Intensities of second_frame at pointcloud in first_frame\"
>7527	PrimaryExpression	\"Intensities of second_frame at pointcloud in first_frame\"
>7528	Callee	Util 
>7529	Identifier	Util 
>7530	ExpressionStatement	 
>7531	CallExpression	Util 
>7532	ArgumentList	\"Intensities of second_frame at transformed positions\"
>7533	Argument	debugImageOldImageSource
>7534	Identifier	debugImageOldImageSource
>7535	Argument	\"Intensities of second_frame at transformed positions\"
>7536	PrimaryExpression	\"Intensities of second_frame at transformed positions\"
>7537	Callee	Util 
>7538	Identifier	Util 
>7539	ExpressionStatement	 
>7540	CallExpression	Util 
>7541	ArgumentList	\"second_frame\"
>7542	Argument	debugImageSecondFrame
>7543	Identifier	debugImageSecondFrame
>7544	Argument	\"second_frame\"
>7545	PrimaryExpression	\"second_frame\"
>7546	Callee	Util 
>7547	Identifier	Util 
>7548	ExpressionStatement	 
>7549	CallExpression	Util 
>7550	ArgumentList	\"Weights\"
>7551	Argument	debugImageWeights
>7552	Identifier	debugImageWeights
>7553	Argument	\"Weights\"
>7554	PrimaryExpression	\"Weights\"
>7555	Callee	Util 
>7556	Identifier	Util 
>7557	Condition	 
>7558	Identifier	plotTrackingIterationInfo
<3=14,4
<4=11,8,5
<5=7,6
<8=10,9
<11=13,12
<14=598,594,588,577,566,555,544,537,528,517,506,495,484,467,450,433,416,399,382,365,348,331,314,297,280,263,246,229,212,208,195,182,169,156,143,130,117,104,91,78,65,52,39,35,31,19,15
<15=16
<16=18,17
<19=20
<20=30,21
<21=29,22
<22=28,23
<23=27,24
<24=26,25
<31=32
<32=34,33
<35=36
<36=38,37
<39=40
<40=51,41
<41=49,42
<42=47,45,43
<43=44
<45=46
<47=48
<49=50
<52=53
<53=64,54
<54=62,55
<55=60,58,56
<56=57
<58=59
<60=61
<62=63
<65=66
<66=77,67
<67=75,68
<68=73,71,69
<69=70
<71=72
<73=74
<75=76
<78=79
<79=90,80
<80=88,81
<81=86,84,82
<82=83
<84=85
<86=87
<88=89
<91=92
<92=103,93
<93=101,94
<94=99,97,95
<95=96
<97=98
<99=100
<101=102
<104=105
<105=116,106
<106=114,107
<107=112,110,108
<108=109
<110=111
<112=113
<114=115
<117=118
<118=129,119
<119=127,120
<120=125,123,121
<121=122
<123=124
<125=126
<127=128
<130=131
<131=142,132
<132=140,133
<133=138,136,134
<134=135
<136=137
<138=139
<140=141
<143=144
<144=155,145
<145=153,146
<146=151,149,147
<147=148
<149=150
<151=152
<153=154
<156=157
<157=168,158
<158=166,159
<159=164,162,160
<160=161
<162=163
<164=165
<166=167
<169=170
<170=181,171
<171=179,172
<172=177,175,173
<173=174
<175=176
<177=178
<179=180
<182=183
<183=194,184
<184=192,185
<185=190,188,186
<186=187
<188=189
<190=191
<192=193
<195=196
<196=207,197
<197=205,198
<198=203,201,199
<199=200
<201=202
<203=204
<205=206
<208=209
<209=211,210
<212=213
<213=228,214
<214=227,215
<215=225,216
<216=217
<217=218
<218=224,219
<219=223,220
<220=222,221
<225=226
<229=230
<230=245,231
<231=244,232
<232=242,233
<233=234
<234=235
<235=241,236
<236=240,237
<237=239,238
<242=243
<246=247
<247=262,248
<248=261,249
<249=259,250
<250=251
<251=252
<252=258,253
<253=257,254
<254=256,255
<259=260
<263=264
<264=279,265
<265=278,266
<266=276,267
<267=268
<268=269
<269=275,270
<270=274,271
<271=273,272
<276=277
<280=281
<281=296,282
<282=295,283
<283=293,284
<284=285
<285=286
<286=292,287
<287=291,288
<288=290,289
<293=294
<297=298
<298=313,299
<299=312,300
<300=310,301
<301=302
<302=303
<303=309,304
<304=308,305
<305=307,306
<310=311
<314=315
<315=330,316
<316=329,317
<317=327,318
<318=319
<319=320
<320=326,321
<321=325,322
<322=324,323
<327=328
<331=332
<332=347,333
<333=346,334
<334=344,335
<335=336
<336=337
<337=343,338
<338=342,339
<339=341,340
<344=345
<348=349
<349=364,350
<350=363,351
<351=361,352
<352=353
<353=354
<354=360,355
<355=359,356
<356=358,357
<361=362
<365=366
<366=381,367
<367=380,368
<368=378,369
<369=370
<370=371
<371=377,372
<372=376,373
<373=375,374
<378=379
<382=383
<383=398,384
<384=397,385
<385=395,386
<386=387
<387=388
<388=394,389
<389=393,390
<390=392,391
<395=396
<399=400
<400=415,401
<401=414,402
<402=412,403
<403=404
<404=405
<405=411,406
<406=410,407
<407=409,408
<412=413
<416=417
<417=432,418
<418=431,419
<419=429,420
<420=421
<421=422
<422=428,423
<423=427,424
<424=426,425
<429=430
<433=434
<434=449,435
<435=448,436
<436=446,437
<437=438
<438=439
<439=445,440
<440=444,441
<441=443,442
<446=447
<450=451
<451=466,452
<452=465,453
<453=463,454
<454=455
<455=456
<456=462,457
<457=461,458
<458=460,459
<463=464
<467=468
<468=483,469
<469=482,470
<470=480,471
<471=472
<472=473
<473=479,474
<474=478,475
<475=477,476
<480=481
<484=485
<485=494,486
<486=492,487
<487=490,488
<488=489
<490=491
<492=493
<495=496
<496=505,497
<497=503,498
<498=501,499
<499=500
<501=502
<503=504
<506=507
<507=516,508
<508=514,509
<509=512,510
<510=511
<512=513
<514=515
<517=518
<518=527,519
<519=525,520
<520=523,521
<521=522
<523=524
<525=526
<528=529
<529=536,530
<530=532,531
<532=533
<533=535,534
<537=538
<538=543,539
<539=541,540
<541=542
<544=545
<545=554,546
<546=552,547
<547=550,548
<548=549
<550=551
<552=553
<555=556
<556=565,557
<557=563,558
<558=561,559
<559=560
<561=562
<563=564
<566=567
<567=576,568
<568=574,569
<569=572,570
<570=571
<572=573
<574=575
<577=578
<578=587,579
<579=585,580
<580=583,581
<581=582
<583=584
<585=586
<588=589
<589=591,590
<591=593,592
<594=595
<595=597,596
<598=599
<599=601,600
<666=668,667
<668=897,890,883,876,869,862,855,848,841,834,827,820,813,804,795,786,777,768,759,750,741,732,723,714,705,696,687,678,669
<669=670
<670=676,671
<671=672
<672=673
<673=675,674
<676=677
<678=679
<679=685,680
<680=681
<681=682
<682=684,683
<685=686
<687=688
<688=694,689
<689=690
<690=691
<691=693,692
<694=695
<696=697
<697=703,698
<698=699
<699=700
<700=702,701
<703=704
<705=706
<706=712,707
<707=708
<708=709
<709=711,710
<712=713
<714=715
<715=721,716
<716=717
<717=718
<718=720,719
<721=722
<723=724
<724=730,725
<725=726
<726=727
<727=729,728
<730=731
<732=733
<733=739,734
<734=735
<735=736
<736=738,737
<739=740
<741=742
<742=748,743
<743=744
<744=745
<745=747,746
<748=749
<750=751
<751=757,752
<752=753
<753=754
<754=756,755
<757=758
<759=760
<760=766,761
<761=762
<762=763
<763=765,764
<766=767
<768=769
<769=775,770
<770=771
<771=772
<772=774,773
<775=776
<777=778
<778=784,779
<779=780
<780=781
<781=783,782
<784=785
<786=787
<787=793,788
<788=789
<789=790
<790=792,791
<793=794
<795=796
<796=802,797
<797=798
<798=799
<799=801,800
<802=803
<804=805
<805=811,806
<806=807
<807=808
<808=810,809
<811=812
<813=814
<814=816,815
<816=817
<817=819,818
<820=821
<821=823,822
<823=824
<824=826,825
<827=828
<828=830,829
<830=831
<831=833,832
<834=835
<835=837,836
<837=838
<838=840,839
<841=842
<842=844,843
<844=845
<845=847,846
<848=849
<849=851,850
<851=852
<852=854,853
<855=856
<856=858,857
<858=859
<859=861,860
<862=863
<863=865,864
<865=866
<866=868,867
<869=870
<870=872,871
<872=873
<873=875,874
<876=877
<877=879,878
<879=880
<880=882,881
<883=884
<884=886,885
<886=887
<887=889,888
<890=891
<891=893,892
<893=894
<894=896,895
<897=898
<898=900,899
<900=901
<901=903,902
<936=954,953,937
<937=950,947,944,941,938
<938=940,939
<941=943,942
<944=946,945
<947=949,948
<950=952,951
<954=2107,2103,2099,2095,2083,2079,2074,2069,2065,2058,1306,1056,1006,1000,980,974,968,962,955
<955=956
<956=958,957
<958=959
<959=961,960
<962=963
<963=967,964
<964=966,965
<968=969
<969=973,970
<970=972,971
<974=975
<975=979,976
<976=978,977
<980=991,981
<981=987,982
<982=983
<983=985,984
<985=986
<987=988
<988=990,989
<991=992
<992=994,993
<994=996,995
<996=997
<997=999,998
<1000=1001
<1001=1005,1002
<1002=1004,1003
<1006=1052,1007
<1007=1043,1028,1017,1008
<1008=1009
<1009=1015,1010
<1010=1013,1011
<1011=1012
<1013=1014
<1015=1016
<1017=1018
<1018=1027,1019
<1019=1025,1020
<1020=1023,1021
<1021=1022
<1023=1024
<1025=1026
<1028=1029
<1029=1041,1030
<1030=1039,1031
<1031=1032
<1032=1038,1033
<1033=1037,1034
<1034=1036,1035
<1039=1040
<1041=1042
<1043=1044
<1044=1048,1045
<1045=1046
<1046=1047
<1048=1049
<1049=1051,1050
<1052=1053
<1053=1055,1054
<1056=1302,1057
<1057=1295,1259,1252,1147,1077,1058
<1058=1059
<1059=1075,1060
<1060=1073,1069,1065,1061
<1061=1062
<1062=1064,1063
<1065=1066
<1066=1068,1067
<1069=1070
<1070=1072,1071
<1073=1074
<1075=1076
<1077=1078
<1078=1145,1079
<1079=1143,1134,1125,1116,1107,1098,1089,1080
<1080=1081
<1081=1083,1082
<1083=1085,1084
<1085=1086
<1086=1088,1087
<1089=1090
<1090=1092,1091
<1092=1094,1093
<1094=1095
<1095=1097,1096
<1098=1099
<1099=1101,1100
<1101=1103,1102
<1103=1104
<1104=1106,1105
<1107=1108
<1108=1110,1109
<1110=1112,1111
<1112=1113
<1113=1115,1114
<1116=1117
<1117=1119,1118
<1119=1121,1120
<1121=1122
<1122=1124,1123
<1125=1126
<1126=1128,1127
<1128=1130,1129
<1130=1131
<1131=1133,1132
<1134=1135
<1135=1137,1136
<1137=1139,1138
<1139=1140
<1140=1142,1141
<1143=1144
<1145=1146
<1147=1148
<1148=1250,1149
<1149=1248,1234,1220,1206,1192,1178,1164,1150
<1150=1151
<1151=1153,1152
<1153=1155,1154
<1155=1156
<1156=1158,1157
<1158=1160,1159
<1160=1161
<1161=1163,1162
<1164=1165
<1165=1167,1166
<1167=1169,1168
<1169=1170
<1170=1172,1171
<1172=1174,1173
<1174=1175
<1175=1177,1176
<1178=1179
<1179=1181,1180
<1181=1183,1182
<1183=1184
<1184=1186,1185
<1186=1188,1187
<1188=1189
<1189=1191,1190
<1192=1193
<1193=1195,1194
<1195=1197,1196
<1197=1198
<1198=1200,1199
<1200=1202,1201
<1202=1203
<1203=1205,1204
<1206=1207
<1207=1209,1208
<1209=1211,1210
<1211=1212
<1212=1214,1213
<1214=1216,1215
<1216=1217
<1217=1219,1218
<1220=1221
<1221=1223,1222
<1223=1225,1224
<1225=1226
<1226=1228,1227
<1228=1230,1229
<1230=1231
<1231=1233,1232
<1234=1235
<1235=1237,1236
<1237=1239,1238
<1239=1240
<1240=1242,1241
<1242=1244,1243
<1244=1245
<1245=1247,1246
<1248=1249
<1250=1251
<1252=1253
<1253=1257,1254
<1254=1255
<1255=1256
<1257=1258
<1259=1285,1281,1278,1260
<1260=1261
<1261=1262
<1262=1276,1263
<1263=1274,1272,1268,1264
<1264=1265
<1265=1267,1266
<1268=1269
<1269=1271,1270
<1272=1273
<1274=1275
<1276=1277
<1278=1280,1279
<1281=1282
<1282=1284,1283
<1285=1286
<1286=1287
<1287=1294,1293,1288
<1288=1292,1289
<1289=1291,1290
<1295=1296
<1296=1300,1297
<1297=1298
<1298=1299
<1300=1301
<1302=1303
<1303=1305,1304
<1306=2050,2046,2043,1307
<1307=2037,2031,2021,2012,1997,1968,1954,1934,1928,1916,1905,1901,1308
<1308=1893,1885,1882,1309
<1309=1873,1869,1863,1859,1852,1310
<1310=1850,1311
<1311=1835,1822,1793,1774,1770,1756,1732,1731,1730,1729,1728,1727,1726,1725,1724,1723,1722,1721,1720,1719,1718,1717,1716,1712,1697,1668,1654,1634,1628,1312
<1312=1620,1424,1313
<1313=1314
<1314=1383,1338,1315
<1315=1334,1330,1316
<1316=1317
<1317=1318
<1318=1329,1319
<1319=1327,1320
<1320=1323,1321
<1321=1322
<1323=1324
<1324=1326,1325
<1327=1328
<1330=1331
<1331=1333,1332
<1334=1335
<1335=1337,1336
<1338=1366,1339
<1339=1349,1341,1340
<1341=1342
<1342=1348,1343
<1343=1345,1344
<1345=1347,1346
<1349=1362,1350
<1350=1351
<1351=1352
<1352=1360,1353
<1353=1358,1356,1354
<1354=1355
<1356=1357
<1358=1359
<1360=1361
<1362=1363
<1363=1365,1364
<1366=1367
<1367=1382,1368
<1368=1374,1369
<1369=1371,1370
<1371=1373,1372
<1374=1378,1375
<1375=1376
<1376=1377
<1378=1379
<1379=1381,1380
<1383=1420,1384
<1384=1385
<1385=1386
<1386=1418,1387
<1387=1416,1414,1412,1398,1396,1392,1388
<1388=1389
<1389=1391,1390
<1392=1393
<1393=1395,1394
<1396=1397
<1398=1399
<1399=1410,1400
<1400=1401
<1401=1402
<1402=1406,1403
<1403=1404
<1404=1405
<1406=1407
<1407=1409,1408
<1410=1411
<1412=1413
<1414=1415
<1416=1417
<1418=1419
<1420=1421
<1421=1423,1422
<1424=1616,1612,1600,1489,1448,1442,1426,1425
<1426=1438,1434,1427
<1427=1428
<1428=1429
<1429=1433,1430
<1430=1432,1431
<1434=1435
<1435=1437,1436
<1438=1439
<1439=1441,1440
<1442=1443
<1443=1447,1444
<1444=1446,1445
<1448=1475,1449
<1449=1458,1450
<1450=1451
<1451=1457,1452
<1452=1454,1453
<1454=1456,1455
<1458=1471,1459
<1459=1460
<1460=1461
<1461=1469,1462
<1462=1467,1465,1463
<1463=1464
<1465=1466
<1467=1468
<1469=1470
<1471=1472
<1472=1474,1473
<1475=1476
<1476=1482,1477
<1477=1479,1478
<1479=1481,1480
<1482=1486,1483
<1483=1485,1484
<1486=1488,1487
<1489=1596,1490
<1490=1561,1491
<1491=1492
<1492=1559,1493
<1493=1557,1548,1539,1530,1521,1512,1503,1494
<1494=1495
<1495=1497,1496
<1497=1499,1498
<1499=1500
<1500=1502,1501
<1503=1504
<1504=1506,1505
<1506=1508,1507
<1508=1509
<1509=1511,1510
<1512=1513
<1513=1515,1514
<1515=1517,1516
<1517=1518
<1518=1520,1519
<1521=1522
<1522=1524,1523
<1524=1526,1525
<1526=1527
<1527=1529,1528
<1530=1531
<1531=1533,1532
<1533=1535,1534
<1535=1536
<1536=1538,1537
<1539=1540
<1540=1542,1541
<1542=1544,1543
<1544=1545
<1545=1547,1546
<1548=1549
<1549=1551,1550
<1551=1553,1552
<1553=1554
<1554=1556,1555
<1557=1558
<1559=1560
<1561=1562
<1562=1594,1563
<1563=1592,1590,1588,1574,1572,1568,1564
<1564=1565
<1565=1567,1566
<1568=1569
<1569=1571,1570
<1572=1573
<1574=1575
<1575=1586,1576
<1576=1577
<1577=1578
<1578=1582,1579
<1579=1580
<1580=1581
<1582=1583
<1583=1585,1584
<1586=1587
<1588=1589
<1590=1591
<1592=1593
<1594=1595
<1596=1597
<1597=1599,1598
<1600=1610,1601
<1601=1606,1602
<1602=1603
<1603=1605,1604
<1606=1607
<1607=1609,1608
<1610=1611
<1612=1613
<1613=1615,1614
<1616=1617
<1617=1619,1618
<1620=1621
<1621=1625,1622
<1622=1624,1623
<1625=1627,1626
<1628=1629
<1629=1631,1630
<1631=1633,1632
<1634=1652,1635
<1635=1636
<1636=1650,1637
<1637=1648,1638
<1638=1639
<1639=1647,1640
<1640=1646,1641
<1641=1645,1642
<1642=1644,1643
<1648=1649
<1650=1651
<1652=1653
<1654=1655
<1655=1667,1666,1656
<1656=1665,1657
<1657=1663,1658
<1658=1661,1659
<1659=1660
<1661=1662
<1663=1664
<1668=1679,1669
<1669=1675,1670
<1670=1671
<1671=1673,1672
<1673=1674
<1675=1676
<1676=1678,1677
<1679=1680
<1680=1684,1681
<1681=1683,1682
<1684=1696,1685
<1685=1695,1686
<1686=1694,1687
<1687=1691,1688
<1688=1690,1689
<1691=1693,1692
<1697=1698
<1698=1710,1699
<1699=1708,1700
<1700=1701
<1701=1707,1702
<1702=1706,1703
<1703=1705,1704
<1708=1709
<1710=1711
<1712=1713
<1713=1715,1714
<1732=1746,1733
<1733=1739,1734
<1734=1735
<1735=1737,1736
<1737=1738
<1739=1740
<1740=1742,1741
<1742=1743
<1743=1745,1744
<1746=1747
<1747=1755,1748
<1748=1752,1749
<1749=1751,1750
<1752=1754,1753
<1756=1757
<1757=1769,1768,1758
<1758=1767,1759
<1759=1763,1760
<1760=1761
<1761=1762
<1763=1764
<1764=1766,1765
<1770=1771
<1771=1773,1772
<1774=1775
<1775=1792,1791,1776
<1776=1790,1777
<1777=1781,1778
<1778=1779
<1779=1780
<1781=1782
<1782=1784,1783
<1784=1786,1785
<1786=1787
<1787=1789,1788
<1793=1814,1810,1807,1794
<1794=1795
<1795=1799,1796
<1796=1798,1797
<1799=1805,1800
<1800=1803,1801
<1801=1802
<1803=1804
<1805=1806
<1807=1809,1808
<1810=1811
<1811=1813,1812
<1814=1815
<1815=1816
<1816=1821,1820,1817
<1817=1819,1818
<1822=1823
<1823=1834,1833,1824
<1824=1832,1825
<1825=1829,1826
<1826=1828,1827
<1829=1831,1830
<1835=1836
<1836=1849,1848,1837
<1837=1847,1838
<1838=1842,1839
<1839=1841,1840
<1842=1846,1843
<1843=1845,1844
<1850=1851
<1852=1853
<1853=1858,1857,1854
<1854=1856,1855
<1859=1860
<1860=1862,1861
<1863=1864
<1864=1866,1865
<1866=1868,1867
<1869=1870
<1870=1872,1871
<1873=1874
<1874=1880,1875
<1875=1878,1876
<1876=1877
<1878=1879
<1880=1881
<1882=1884,1883
<1885=1886
<1886=1892,1887
<1887=1889,1888
<1889=1891,1890
<1893=1894
<1894=1895
<1895=1900,1899,1896
<1896=1898,1897
<1901=1902
<1902=1904,1903
<1905=1906
<1906=1915,1914,1907
<1907=1913,1908
<1908=1910,1909
<1910=1912,1911
<1916=1926,1917
<1917=1922,1918
<1918=1919
<1919=1921,1920
<1922=1923
<1923=1925,1924
<1926=1927
<1928=1929
<1929=1931,1930
<1931=1933,1932
<1934=1952,1935
<1935=1936
<1936=1950,1937
<1937=1948,1938
<1938=1939
<1939=1947,1940
<1940=1946,1941
<1941=1945,1942
<1942=1944,1943
<1948=1949
<1950=1951
<1952=1953
<1954=1955
<1955=1967,1966,1956
<1956=1965,1957
<1957=1963,1958
<1958=1961,1959
<1959=1960
<1961=1962
<1963=1964
<1968=1979,1969
<1969=1975,1970
<1970=1971
<1971=1973,1972
<1973=1974
<1975=1976
<1976=1978,1977
<1979=1980
<1980=1984,1981
<1981=1983,1982
<1984=1996,1985
<1985=1995,1986
<1986=1994,1987
<1987=1991,1988
<1988=1990,1989
<1991=1993,1992
<1997=1998
<1998=2010,1999
<1999=2008,2000
<2000=2001
<2001=2007,2002
<2002=2006,2003
<2003=2005,2004
<2008=2009
<2010=2011
<2012=2013
<2013=2017,2014
<2014=2015
<2015=2016
<2017=2018
<2018=2020,2019
<2021=2023,2022
<2023=2024
<2024=2026,2025
<2026=2028,2027
<2028=2030,2029
<2031=2032
<2032=2034,2033
<2034=2036,2035
<2037=2038
<2038=2040,2039
<2040=2042,2041
<2043=2045,2044
<2046=2047
<2047=2049,2048
<2050=2051
<2051=2052
<2052=2057,2056,2053
<2053=2055,2054
<2058=2059
<2059=2064,2063,2060
<2060=2062,2061
<2065=2066
<2066=2068,2067
<2069=2070
<2070=2073,2072,2071
<2074=2075
<2075=2078,2077,2076
<2079=2080
<2080=2082,2081
<2083=2084
<2084=2094,2093,2085
<2085=2092,2086
<2086=2088,2087
<2088=2089
<2089=2091,2090
<2095=2096
<2096=2098,2097
<2099=2100
<2100=2102,2101
<2103=2104
<2104=2106,2105
<2107=2108
<2108=2118,2117,2109
<2109=2116,2110
<2110=2112,2111
<2112=2113
<2113=2115,2114
<2212=2230,2229,2213
<2213=2226,2223,2220,2217,2214
<2214=2216,2215
<2217=2219,2218
<2220=2222,2221
<2223=2225,2224
<2226=2228,2227
<2230=2231
<2231=2232
<2232=2244,2233
<2233=2242,2240,2238,2236,2234
<2234=2235
<2236=2237
<2238=2239
<2240=2241
<2242=2243
<2244=2245
<2254=2272,2271,2255
<2255=2268,2265,2262,2259,2256
<2256=2258,2257
<2259=2261,2260
<2262=2264,2263
<2265=2267,2266
<2268=2270,2269
<2272=2273
<2273=2274
<2274=2286,2275
<2275=2284,2282,2280,2278,2276
<2276=2277
<2278=2279
<2280=2281
<2282=2283
<2284=2285
<2286=2287
<2296=2314,2313,2297
<2297=2310,2307,2304,2301,2298
<2298=2300,2299
<2301=2303,2302
<2304=2306,2305
<2307=2309,2308
<2310=2312,2311
<2314=3753,3676,3662,3648,3634,3620,3606,3592,3578,3577,3576,3575,3574,3573,3572,3571,3570,3569,3568,3567,3566,3565,3564,3563,3562,3561,3560,3559,3558,3557,3556,3555,3554,3553,3552,3551,3550,3549,3548,3547,3546,3545,2315,2386,2396,2419,2431,2435,3278,3285,3292,3323,3337,3351,3365,3376,3387,3398,3415,3429,3443,3457,3471,3485,3496,3500,3509,3520,3521,3522,3523,3524,3525,3526,3527,3528,3529,3530,3531,3532,3533,3534,3535,3536,3537,3538,3539,3540,3541,3542,3543,3544
<2315=2384,2316
<2316=2375,2366,2317
<2317=2364,2318
<2318=2355,2346,2337,2328,2319
<2319=2320
<2320=2326,2321
<2321=2324,2322
<2322=2323
<2324=2325
<2326=2327
<2328=2329
<2329=2335,2330
<2330=2333,2331
<2331=2332
<2333=2334
<2335=2336
<2337=2338
<2338=2344,2339
<2339=2342,2340
<2340=2341
<2342=2343
<2344=2345
<2346=2347
<2347=2353,2348
<2348=2351,2349
<2349=2350
<2351=2352
<2353=2354
<2355=2356
<2356=2362,2357
<2357=2360,2358
<2358=2359
<2360=2361
<2362=2363
<2364=2365
<2366=2367
<2367=2373,2368
<2368=2371,2369
<2369=2370
<2371=2372
<2373=2374
<2375=2376
<2376=2382,2377
<2377=2380,2378
<2378=2379
<2380=2381
<2382=2383
<2384=2385
<2386=2387
<2387=2395,2388
<2388=2390,2389
<2390=2394,2391
<2391=2393,2392
<2396=2397
<2397=2418,2398
<2398=2416,2399
<2399=2400
<2400=2401
<2401=2409,2402
<2402=2408,2403
<2403=2407,2404
<2404=2406,2405
<2409=2415,2410
<2410=2414,2411
<2411=2413,2412
<2416=2417
<2419=2420
<2420=2430,2421
<2421=2429,2422
<2422=2428,2423
<2423=2425,2424
<2425=2427,2426
<2431=2432
<2432=2434,2433
<2435=3274,3263,2436
<2436=3250,3233,3216,3192,3179,3166,3153,3135,3114,3093,3077,3061,3046,3037,3028,3003,2995,2987,2981,2975,2971,2963,2951,2932,2923,2912,2898,2843,2466,2462,2447,2437
<2437=2438
<2438=2446,2439
<2439=2442,2441,2440
<2442=2443
<2443=2445,2444
<2447=2448
<2448=2461,2460,2449
<2449=2459,2450
<2450=2454,2451
<2451=2453,2452
<2454=2456,2455
<2456=2458,2457
<2462=2463
<2463=2465,2464
<2466=2841,2467
<2467=2830,2815,2800,2768,2740,2714,2584,2468
<2468=2582,2469
<2469=2545,2515,2470
<2470=2471
<2471=2513,2472
<2472=2509,2481,2479,2477,2473
<2473=2474
<2474=2476,2475
<2477=2478
<2479=2480
<2481=2482
<2482=2507,2483
<2483=2484
<2484=2485
<2485=2506,2486
<2486=2503,2487
<2487=2493,2488
<2488=2492,2489
<2489=2491,2490
<2493=2501,2494
<2494=2495
<2495=2496
<2496=2500,2497
<2497=2499,2498
<2501=2502
<2503=2505,2504
<2507=2508
<2509=2510
<2510=2512,2511
<2513=2514
<2515=2516
<2516=2543,2517
<2517=2539,2526,2524,2522,2518
<2518=2519
<2519=2521,2520
<2522=2523
<2524=2525
<2526=2527
<2527=2537,2528
<2528=2529
<2529=2530
<2530=2536,2531
<2531=2535,2532
<2532=2534,2533
<2537=2538
<2539=2540
<2540=2542,2541
<2543=2544
<2545=2546
<2546=2580,2547
<2547=2576,2556,2554,2552,2548
<2548=2549
<2549=2551,2550
<2552=2553
<2554=2555
<2556=2557
<2557=2574,2558
<2558=2559
<2559=2560
<2560=2573,2561
<2561=2572,2562
<2562=2570,2563
<2563=2564
<2564=2565
<2565=2569,2566
<2566=2568,2567
<2570=2571
<2574=2575
<2576=2577
<2577=2579,2578
<2580=2581
<2582=2583
<2584=2706,2585
<2585=2674,2586
<2586=2672,2587
<2587=2633,2588
<2588=2589
<2589=2631,2590
<2590=2627,2599,2597,2595,2591
<2591=2592
<2592=2594,2593
<2595=2596
<2597=2598
<2599=2600
<2600=2625,2601
<2601=2602
<2602=2603
<2603=2624,2604
<2604=2621,2605
<2605=2611,2606
<2606=2610,2607
<2607=2609,2608
<2611=2619,2612
<2612=2613
<2613=2614
<2614=2618,2615
<2615=2617,2616
<2619=2620
<2621=2623,2622
<2625=2626
<2627=2628
<2628=2630,2629
<2631=2632
<2633=2634
<2634=2670,2635
<2635=2666,2644,2642,2640,2636
<2636=2637
<2637=2639,2638
<2640=2641
<2642=2643
<2644=2645
<2645=2664,2646
<2646=2647
<2647=2648
<2648=2663,2649
<2649=2660,2650
<2650=2658,2651
<2651=2652
<2652=2653
<2653=2657,2654
<2654=2656,2655
<2658=2659
<2660=2662,2661
<2664=2665
<2666=2667
<2667=2669,2668
<2670=2671
<2672=2673
<2674=2675
<2675=2704,2676
<2676=2700,2685,2683,2681,2677
<2677=2678
<2678=2680,2679
<2681=2682
<2683=2684
<2685=2686
<2686=2698,2687
<2687=2688
<2688=2689
<2689=2697,2690
<2690=2696,2691
<2691=2695,2692
<2692=2694,2693
<2698=2699
<2700=2701
<2701=2703,2702
<2704=2705
<2706=2707
<2707=2709,2708
<2709=2713,2710
<2710=2712,2711
<2714=2715
<2715=2738,2716
<2716=2734,2725,2723,2721,2717
<2717=2718
<2718=2720,2719
<2721=2722
<2723=2724
<2725=2726
<2726=2732,2727
<2727=2728
<2728=2729
<2729=2731,2730
<2732=2733
<2734=2735
<2735=2737,2736
<2738=2739
<2740=2741
<2741=2766,2742
<2742=2762,2751,2749,2747,2743
<2743=2744
<2744=2746,2745
<2747=2748
<2749=2750
<2751=2752
<2752=2760,2753
<2753=2754
<2754=2755
<2755=2759,2756
<2756=2758,2757
<2760=2761
<2762=2763
<2763=2765,2764
<2766=2767
<2768=2769
<2769=2798,2770
<2770=2794,2783,2779,2775,2771
<2771=2772
<2772=2774,2773
<2775=2776
<2776=2778,2777
<2779=2780
<2780=2782,2781
<2783=2784
<2784=2792,2785
<2785=2786
<2786=2787
<2787=2791,2788
<2788=2790,2789
<2792=2793
<2794=2795
<2795=2797,2796
<2798=2799
<2800=2801
<2801=2814,2813,2802
<2802=2812,2803
<2803=2805,2804
<2805=2809,2806
<2806=2808,2807
<2809=2811,2810
<2815=2816
<2816=2829,2828,2817
<2817=2827,2818
<2818=2820,2819
<2820=2824,2821
<2821=2823,2822
<2824=2826,2825
<2830=2831
<2831=2840,2839,2832
<2832=2838,2833
<2833=2837,2834
<2834=2836,2835
<2841=2842
<2843=2894,2866,2844
<2844=2845
<2845=2856,2846
<2846=2847
<2847=2851,2848
<2848=2850,2849
<2851=2855,2852
<2852=2854,2853
<2856=2857
<2857=2861,2858
<2858=2860,2859
<2861=2865,2862
<2862=2864,2863
<2866=2883,2875,2867
<2867=2868
<2868=2870,2869
<2870=2874,2871
<2871=2873,2872
<2875=2876
<2876=2878,2877
<2878=2882,2879
<2879=2881,2880
<2883=2884
<2884=2893,2892,2885
<2885=2891,2886
<2886=2890,2887
<2887=2889,2888
<2894=2895
<2895=2897,2896
<2898=2899
<2899=2907,2900
<2900=2906,2901
<2901=2903,2902
<2903=2905,2904
<2907=2911,2908
<2908=2910,2909
<2912=2913
<2913=2922,2921,2914
<2914=2920,2915
<2915=2919,2916
<2916=2918,2917
<2923=2924
<2924=2931,2930,2925
<2925=2929,2926
<2926=2928,2927
<2932=2933
<2933=2950,2949,2934
<2934=2948,2935
<2935=2943,2936
<2936=2942,2937
<2937=2941,2938
<2938=2940,2939
<2943=2947,2944
<2944=2946,2945
<2951=2952
<2952=2958,2953
<2953=2955,2954
<2955=2957,2956
<2958=2962,2959
<2959=2961,2960
<2963=2964
<2964=2966,2965
<2966=2970,2967
<2967=2969,2968
<2971=2972
<2972=2974,2973
<2975=2976
<2976=2980,2977
<2977=2979,2978
<2981=2982
<2982=2986,2983
<2983=2985,2984
<2987=2988
<2988=2994,2989
<2989=2993,2990
<2990=2992,2991
<2995=2996
<2996=3002,2997
<2997=3001,2998
<2998=3000,2999
<3003=3004
<3004=3027,3026,3005
<3005=3025,3006
<3006=3016,3015,3007
<3007=3014,3008
<3008=3012,3009
<3009=3010
<3010=3011
<3012=3013
<3016=3017
<3017=3019,3018
<3019=3023,3020
<3020=3021
<3021=3022
<3023=3024
<3028=3029
<3029=3036,3035,3030
<3030=3034,3031
<3031=3033,3032
<3037=3038
<3038=3045,3044,3039
<3039=3043,3040
<3040=3042,3041
<3046=3047
<3047=3060,3059,3048
<3048=3058,3049
<3049=3051,3050
<3051=3057,3052
<3052=3054,3053
<3054=3056,3055
<3061=3062
<3062=3072,3063
<3063=3071,3064
<3064=3070,3065
<3065=3067,3066
<3067=3069,3068
<3072=3076,3073
<3073=3075,3074
<3077=3078
<3078=3088,3079
<3079=3087,3080
<3080=3086,3081
<3081=3083,3082
<3083=3085,3084
<3088=3092,3089
<3089=3091,3090
<3093=3094
<3094=3113,3112,3095
<3095=3111,3096
<3096=3104,3097
<3097=3103,3098
<3098=3100,3099
<3100=3102,3101
<3104=3110,3105
<3105=3107,3106
<3107=3109,3108
<3114=3115
<3115=3134,3133,3116
<3116=3132,3117
<3117=3125,3118
<3118=3124,3119
<3119=3121,3120
<3121=3123,3122
<3125=3131,3126
<3126=3128,3127
<3128=3130,3129
<3135=3136
<3136=3152,3151,3137
<3137=3150,3138
<3138=3148,3139
<3139=3146,3144,3142,3140
<3140=3141
<3142=3143
<3144=3145
<3146=3147
<3148=3149
<3153=3154
<3154=3161,3155
<3155=3159,3156
<3156=3157
<3157=3158
<3159=3160
<3161=3165,3162
<3162=3164,3163
<3166=3167
<3167=3174,3168
<3168=3172,3169
<3169=3170
<3170=3171
<3172=3173
<3174=3178,3175
<3175=3177,3176
<3179=3180
<3180=3187,3181
<3181=3185,3182
<3182=3183
<3183=3184
<3185=3186
<3187=3191,3188
<3188=3190,3189
<3192=3194,3193
<3194=3195
<3195=3215,3196
<3196=3212,3197
<3197=3209,3198
<3198=3204,3199
<3199=3203,3200
<3200=3202,3201
<3204=3208,3205
<3205=3207,3206
<3209=3211,3210
<3212=3214,3213
<3216=3217
<3217=3232,3231,3218
<3218=3230,3219
<3219=3221,3220
<3221=3223,3222
<3223=3227,3224
<3224=3226,3225
<3227=3229,3228
<3233=3234
<3234=3249,3248,3235
<3235=3247,3236
<3236=3238,3237
<3238=3240,3239
<3240=3244,3241
<3241=3243,3242
<3244=3246,3245
<3250=3251
<3251=3262,3261,3252
<3252=3260,3253
<3253=3255,3254
<3255=3259,3256
<3256=3258,3257
<3263=3271,3264
<3264=3268,3265
<3265=3267,3266
<3268=3270,3269
<3271=3273,3272
<3274=3275
<3275=3277,3276
<3278=3279
<3279=3284,3283,3280
<3280=3282,3281
<3285=3286
<3286=3291,3290,3287
<3287=3289,3288
<3292=3317,3311,3305,3299,3293
<3293=3298,3297,3294
<3294=3296,3295
<3299=3304,3303,3300
<3300=3302,3301
<3305=3310,3309,3306
<3306=3308,3307
<3311=3316,3315,3312
<3312=3314,3313
<3317=3322,3321,3318
<3318=3320,3319
<3323=3324
<3324=3336,3335,3325
<3325=3334,3326
<3326=3330,3327
<3327=3328
<3328=3329
<3330=3331
<3331=3333,3332
<3337=3338
<3338=3350,3349,3339
<3339=3348,3340
<3340=3344,3341
<3341=3342
<3342=3343
<3344=3345
<3345=3347,3346
<3351=3352
<3352=3364,3363,3353
<3353=3362,3354
<3354=3358,3355
<3355=3356
<3356=3357
<3358=3359
<3359=3361,3360
<3365=3366
<3366=3375,3374,3367
<3367=3373,3368
<3368=3370,3369
<3370=3372,3371
<3376=3377
<3377=3386,3385,3378
<3378=3384,3379
<3379=3381,3380
<3381=3383,3382
<3387=3388
<3388=3397,3396,3389
<3389=3395,3390
<3390=3392,3391
<3392=3394,3393
<3398=3399
<3399=3414,3413,3400
<3400=3412,3401
<3401=3407,3402
<3402=3404,3403
<3404=3406,3405
<3407=3409,3408
<3409=3411,3410
<3415=3416
<3416=3428,3427,3417
<3417=3426,3418
<3418=3424,3419
<3419=3422,3420
<3420=3421
<3422=3423
<3424=3425
<3429=3430
<3430=3442,3441,3431
<3431=3440,3432
<3432=3438,3433
<3433=3436,3434
<3434=3435
<3436=3437
<3438=3439
<3443=3444
<3444=3456,3455,3445
<3445=3454,3446
<3446=3452,3447
<3447=3450,3448
<3448=3449
<3450=3451
<3452=3453
<3457=3458
<3458=3470,3469,3459
<3459=3468,3460
<3460=3466,3461
<3461=3464,3462
<3462=3463
<3464=3465
<3466=3467
<3471=3472
<3472=3484,3483,3473
<3473=3482,3474
<3474=3476,3475
<3476=3478,3477
<3478=3479
<3479=3481,3480
<3485=3486
<3486=3492,3487
<3487=3490,3488
<3488=3489
<3490=3491
<3492=3493
<3493=3495,3494
<3496=3497
<3497=3499,3498
<3500=3501
<3501=3508,3507,3502
<3502=3506,3503
<3503=3505,3504
<3509=3510
<3510=3519,3518,3511
<3511=3517,3512
<3512=3516,3513
<3513=3515,3514
<3578=3579
<3579=3591,3590,3580
<3580=3589,3581
<3581=3587,3582
<3582=3585,3583
<3583=3584
<3585=3586
<3587=3588
<3592=3593
<3593=3605,3604,3594
<3594=3603,3595
<3595=3601,3596
<3596=3599,3597
<3597=3598
<3599=3600
<3601=3602
<3606=3607
<3607=3619,3618,3608
<3608=3617,3609
<3609=3615,3610
<3610=3613,3611
<3611=3612
<3613=3614
<3615=3616
<3620=3621
<3621=3633,3632,3622
<3622=3631,3623
<3623=3629,3624
<3624=3627,3625
<3625=3626
<3627=3628
<3629=3630
<3634=3635
<3635=3647,3646,3636
<3636=3645,3637
<3637=3641,3638
<3638=3639
<3639=3640
<3641=3642
<3642=3644,3643
<3648=3649
<3649=3661,3660,3650
<3650=3659,3651
<3651=3655,3652
<3652=3653
<3653=3654
<3655=3656
<3656=3658,3657
<3662=3663
<3663=3675,3674,3664
<3664=3673,3665
<3665=3669,3666
<3666=3667
<3667=3668
<3669=3670
<3670=3672,3671
<3676=3749,3677
<3677=3733,3722,3711,3700,3689,3678
<3678=3679
<3679=3687,3680
<3680=3683,3681
<3681=3682
<3683=3684
<3684=3686,3685
<3687=3688
<3689=3690
<3690=3698,3691
<3691=3694,3692
<3692=3693
<3694=3695
<3695=3697,3696
<3698=3699
<3700=3701
<3701=3709,3702
<3702=3705,3703
<3703=3704
<3705=3706
<3706=3708,3707
<3709=3710
<3711=3712
<3712=3720,3713
<3713=3716,3714
<3714=3715
<3716=3717
<3717=3719,3718
<3720=3721
<3722=3723
<3723=3731,3724
<3724=3727,3725
<3725=3726
<3727=3728
<3728=3730,3729
<3731=3732
<3733=3734
<3734=3748,3747,3735
<3735=3746,3736
<3736=3744,3737
<3737=3742,3740,3738
<3738=3739
<3740=3741
<3742=3743
<3744=3745
<3749=3750
<3750=3752,3751
<3753=3815,3754
<3754=3799,3788,3777,3766,3755
<3755=3756
<3756=3764,3757
<3757=3760,3758
<3758=3759
<3760=3761
<3761=3763,3762
<3764=3765
<3766=3767
<3767=3775,3768
<3768=3771,3769
<3769=3770
<3771=3772
<3772=3774,3773
<3775=3776
<3777=3778
<3778=3786,3779
<3779=3782,3780
<3780=3781
<3782=3783
<3783=3785,3784
<3786=3787
<3788=3789
<3789=3797,3790
<3790=3793,3791
<3791=3792
<3793=3794
<3794=3796,3795
<3797=3798
<3799=3800
<3800=3814,3813,3801
<3801=3812,3802
<3802=3810,3803
<3803=3808,3806,3804
<3804=3805
<3806=3807
<3808=3809
<3810=3811
<3815=3816
<3976=3982,3981,3977
<3977=3978
<3978=3980,3979
<3982=4944,4923,4902,4890,4878,4862,4848,4832,4825,4818,4811,4807,4792,4159,4119,4109,4069,4029,4009,3997,3985,3983
<3983=3984
<3985=3986
<3986=3994,3987
<3987=3991,3988
<3988=3990,3989
<3991=3993,3992
<3994=3996,3995
<3997=3998
<3998=4006,3999
<3999=4003,4000
<4000=4002,4001
<4003=4005,4004
<4006=4008,4007
<4009=4010
<4010=4026,4011
<4011=4019,4012
<4012=4016,4013
<4013=4015,4014
<4016=4018,4017
<4019=4023,4020
<4020=4022,4021
<4023=4025,4024
<4026=4028,4027
<4029=4030
<4030=4066,4031
<4031=4058,4032
<4032=4050,4033
<4033=4042,4034
<4034=4040,4035
<4035=4038,4036
<4036=4037
<4038=4039
<4040=4041
<4042=4048,4043
<4043=4046,4044
<4044=4045
<4046=4047
<4048=4049
<4050=4056,4051
<4051=4054,4052
<4052=4053
<4054=4055
<4056=4057
<4058=4064,4059
<4059=4062,4060
<4060=4061
<4062=4063
<4064=4065
<4066=4068,4067
<4069=4070
<4070=4106,4071
<4071=4098,4072
<4072=4090,4073
<4073=4082,4074
<4074=4080,4075
<4075=4078,4076
<4076=4077
<4078=4079
<4080=4081
<4082=4088,4083
<4083=4086,4084
<4084=4085
<4086=4087
<4088=4089
<4090=4096,4091
<4091=4094,4092
<4092=4093
<4094=4095
<4096=4097
<4098=4104,4099
<4099=4102,4100
<4100=4101
<4102=4103
<4104=4105
<4106=4108,4107
<4109=4110
<4110=4116,4111
<4111=4113,4112
<4113=4115,4114
<4116=4118,4117
<4119=4120
<4120=4156,4121
<4121=4148,4122
<4122=4140,4123
<4123=4132,4124
<4124=4130,4125
<4125=4128,4126
<4126=4127
<4128=4129
<4130=4131
<4132=4138,4133
<4133=4136,4134
<4134=4135
<4136=4137
<4138=4139
<4140=4146,4141
<4141=4144,4142
<4142=4143
<4144=4145
<4146=4147
<4148=4154,4149
<4149=4152,4150
<4150=4151
<4152=4153
<4154=4155
<4156=4158,4157
<4159=4784,4778,4775,4160
<4160=4761,4728,4693,4682,4647,4636,4622,4611,4569,4522,4468,4442,4424,4398,4380,4359,4338,4324,4287,4204,4186,4161
<4161=4162
<4162=4184,4163
<4163=4180,4164
<4164=4165
<4165=4178,4166
<4166=4176,4167
<4167=4168
<4168=4174,4169
<4169=4172,4170
<4170=4171
<4172=4173
<4174=4175
<4176=4177
<4178=4179
<4180=4181
<4181=4183,4182
<4184=4185
<4186=4187
<4187=4202,4188
<4188=4198,4189
<4189=4190
<4190=4196,4191
<4191=4194,4192
<4192=4193
<4194=4195
<4196=4197
<4198=4199
<4199=4201,4200
<4202=4203
<4204=4281,4205
<4205=4263,4231,4206
<4206=4207
<4207=4230,4208
<4208=4228,4209
<4209=4226,4210
<4210=4211
<4211=4224,4212
<4212=4222,4213
<4213=4214
<4214=4220,4215
<4215=4218,4216
<4216=4217
<4218=4219
<4220=4221
<4222=4223
<4224=4225
<4226=4227
<4228=4229
<4231=4232
<4232=4262,4233
<4233=4260,4234
<4234=4258,4235
<4235=4236
<4236=4256,4237
<4237=4254,4238
<4238=4239
<4239=4252,4240
<4240=4250,4241
<4241=4242
<4242=4248,4243
<4243=4246,4244
<4244=4245
<4246=4247
<4248=4249
<4250=4251
<4252=4253
<4254=4255
<4256=4257
<4258=4259
<4260=4261
<4263=4264
<4264=4280,4265
<4265=4278,4266
<4266=4276,4267
<4267=4268
<4268=4274,4269
<4269=4272,4270
<4270=4271
<4272=4273
<4274=4275
<4276=4277
<4278=4279
<4281=4282
<4282=4284,4283
<4284=4286,4285
<4287=4288
<4288=4323,4289
<4289=4321,4290
<4290=4312,4291
<4291=4292
<4292=4310,4293
<4293=4308,4294
<4294=4295
<4295=4306,4296
<4296=4304,4297
<4297=4298
<4298=4302,4299
<4299=4300
<4300=4301
<4302=4303
<4304=4305
<4306=4307
<4308=4309
<4310=4311
<4312=4313
<4313=4319,4314
<4314=4317,4315
<4315=4316
<4317=4318
<4319=4320
<4321=4322
<4324=4325
<4325=4337,4336,4326
<4326=4335,4327
<4327=4333,4328
<4328=4331,4329
<4329=4330
<4331=4332
<4333=4334
<4338=4339
<4339=4358,4357,4340
<4340=4356,4341
<4341=4354,4342
<4342=4345,4343
<4343=4344
<4345=4346
<4346=4352,4347
<4347=4350,4348
<4348=4349
<4350=4351
<4352=4353
<4354=4355
<4359=4360
<4360=4379,4378,4361
<4361=4377,4362
<4362=4375,4363
<4363=4373,4364
<4364=4365
<4365=4371,4366
<4366=4367
<4367=4368
<4368=4370,4369
<4371=4372
<4373=4374
<4375=4376
<4380=4381
<4381=4397,4382
<4382=4395,4383
<4383=4393,4384
<4384=4385
<4385=4391,4386
<4386=4389,4387
<4387=4388
<4389=4390
<4391=4392
<4393=4394
<4395=4396
<4398=4399
<4399=4423,4422,4400
<4400=4421,4401
<4401=4419,4402
<4402=4410,4403
<4403=4404
<4404=4408,4405
<4405=4406
<4406=4407
<4408=4409
<4410=4411
<4411=4417,4412
<4412=4413
<4413=4414
<4414=4416,4415
<4417=4418
<4419=4420
<4424=4425
<4425=4441,4426
<4426=4439,4427
<4427=4437,4428
<4428=4429
<4429=4435,4430
<4430=4433,4431
<4431=4432
<4433=4434
<4435=4436
<4437=4438
<4439=4440
<4442=4443
<4443=4467,4466,4444
<4444=4465,4445
<4445=4463,4446
<4446=4454,4447
<4447=4448
<4448=4452,4449
<4449=4450
<4450=4451
<4452=4453
<4454=4455
<4455=4461,4456
<4456=4457
<4457=4458
<4458=4460,4459
<4461=4462
<4463=4464
<4468=4469
<4469=4521,4520,4470
<4470=4519,4471
<4471=4517,4472
<4472=4473
<4473=4474
<4474=4515,4475
<4475=4506,4476
<4476=4477
<4477=4504,4478
<4478=4502,4479
<4479=4480
<4480=4500,4481
<4481=4498,4482
<4482=4483
<4483=4496,4484
<4484=4494,4485
<4485=4486
<4486=4492,4487
<4487=4488
<4488=4489
<4489=4491,4490
<4492=4493
<4494=4495
<4496=4497
<4498=4499
<4500=4501
<4502=4503
<4504=4505
<4506=4507
<4507=4513,4508
<4508=4509
<4509=4510
<4510=4512,4511
<4513=4514
<4515=4516
<4517=4518
<4522=4523
<4523=4568,4567,4524
<4524=4566,4525
<4525=4564,4526
<4526=4527
<4527=4528
<4528=4562,4529
<4529=4560,4530
<4530=4531
<4531=4558,4532
<4532=4556,4533
<4533=4534
<4534=4554,4535
<4535=4552,4536
<4536=4537
<4537=4550,4538
<4538=4548,4539
<4539=4540
<4540=4546,4541
<4541=4542
<4542=4543
<4543=4545,4544
<4546=4547
<4548=4549
<4550=4551
<4552=4553
<4554=4555
<4556=4557
<4558=4559
<4560=4561
<4562=4563
<4564=4565
<4569=4570
<4570=4610,4609,4571
<4571=4608,4572
<4572=4606,4573
<4573=4590,4574
<4574=4575
<4575=4588,4576
<4576=4586,4577
<4577=4578
<4578=4584,4579
<4579=4580
<4580=4581
<4581=4583,4582
<4584=4585
<4586=4587
<4588=4589
<4590=4591
<4591=4604,4592
<4592=4602,4593
<4593=4594
<4594=4600,4595
<4595=4596
<4596=4597
<4597=4599,4598
<4600=4601
<4602=4603
<4604=4605
<4606=4607
<4611=4612
<4612=4621,4613
<4613=4619,4614
<4614=4617,4615
<4615=4616
<4617=4618
<4619=4620
<4622=4623
<4623=4635,4634,4624
<4624=4633,4625
<4625=4631,4626
<4626=4629,4627
<4627=4628
<4629=4630
<4631=4632
<4636=4637
<4637=4646,4638
<4638=4644,4639
<4639=4642,4640
<4640=4641
<4642=4643
<4644=4645
<4647=4648
<4648=4681,4680,4649
<4649=4679,4650
<4650=4677,4651
<4651=4668,4652
<4652=4653
<4653=4666,4654
<4654=4657,4655
<4655=4656
<4657=4658
<4658=4664,4659
<4659=4660
<4660=4661
<4661=4663,4662
<4664=4665
<4666=4667
<4668=4669
<4669=4675,4670
<4670=4673,4671
<4671=4672
<4673=4674
<4675=4676
<4677=4678
<4682=4683
<4683=4692,4684
<4684=4690,4685
<4685=4688,4686
<4686=4687
<4688=4689
<4690=4691
<4693=4694
<4694=4727,4726,4695
<4695=4725,4696
<4696=4723,4697
<4697=4714,4698
<4698=4699
<4699=4712,4700
<4700=4703,4701
<4701=4702
<4703=4704
<4704=4710,4705
<4705=4706
<4706=4707
<4707=4709,4708
<4710=4711
<4712=4713
<4714=4715
<4715=4721,4716
<4716=4719,4717
<4717=4718
<4719=4720
<4721=4722
<4723=4724
<4728=4729
<4729=4760,4759,4730
<4730=4758,4731
<4731=4756,4732
<4732=4733
<4733=4734
<4734=4754,4735
<4735=4745,4736
<4736=4737
<4737=4743,4738
<4738=4739
<4739=4740
<4740=4742,4741
<4743=4744
<4745=4746
<4746=4752,4747
<4747=4750,4748
<4748=4749
<4750=4751
<4752=4753
<4754=4755
<4756=4757
<4761=4762
<4762=4774,4773,4763
<4763=4772,4764
<4764=4770,4765
<4765=4766
<4766=4767
<4767=4769,4768
<4770=4771
<4775=4777,4776
<4778=4779
<4779=4783,4780
<4780=4782,4781
<4784=4785
<4785=4786
<4786=4791,4790,4787
<4787=4789,4788
<4792=4793
<4793=4805,4794
<4794=4801,4799,4795
<4795=4796
<4796=4798,4797
<4799=4800
<4801=4802
<4802=4804,4803
<4805=4806
<4807=4808
<4808=4810,4809
<4811=4812
<4812=4817,4816,4813
<4813=4815,4814
<4818=4819
<4819=4824,4823,4820
<4820=4822,4821
<4825=4826
<4826=4831,4830,4827
<4827=4829,4828
<4832=4833
<4833=4847,4846,4834
<4834=4845,4835
<4835=4843,4836
<4836=4837
<4837=4838
<4838=4842,4839
<4839=4841,4840
<4843=4844
<4848=4849
<4849=4861,4860,4850
<4850=4859,4851
<4851=4857,4852
<4852=4853
<4853=4854
<4854=4856,4855
<4857=4858
<4862=4863
<4863=4877,4876,4864
<4864=4875,4865
<4865=4873,4866
<4866=4867
<4867=4868
<4868=4872,4869
<4869=4871,4870
<4873=4874
<4878=4879
<4879=4889,4888,4880
<4880=4887,4881
<4881=4885,4882
<4882=4883
<4883=4884
<4885=4886
<4890=4891
<4891=4901,4900,4892
<4892=4899,4893
<4893=4897,4894
<4894=4895
<4895=4896
<4897=4898
<4902=4903
<4903=4922,4921,4904
<4904=4920,4905
<4905=4918,4906
<4906=4907
<4907=4908
<4908=4917,4909
<4909=4911,4910
<4911=4913,4912
<4913=4914
<4914=4916,4915
<4918=4919
<4923=4924
<4924=4943,4942,4925
<4925=4941,4926
<4926=4939,4927
<4927=4928
<4928=4929
<4929=4938,4930
<4930=4932,4931
<4932=4934,4933
<4934=4935
<4935=4937,4936
<4939=4940
<4944=4945
<4945=4964,4963,4946
<4946=4962,4947
<4947=4960,4948
<4948=4949
<4949=4950
<4950=4959,4951
<4951=4953,4952
<4953=4955,4954
<4955=4956
<4956=4958,4957
<4960=4961
<5036=5042,5041,5037
<5037=5038
<5038=5040,5039
<5042=5043
<5043=5044
<5044=5048,5045
<5045=5046
<5046=5047
<5048=5049
<5055=5061,5060,5056
<5056=5057
<5057=5059,5058
<5061=5725,5711,5697,5693,5678,5629,5143,5123,5111,5099,5064,5062
<5062=5063
<5064=5097,5065
<5065=5066
<5066=5067
<5067=5095,5068
<5068=5093,5089,5085,5081,5077,5073,5069
<5069=5070
<5070=5072,5071
<5073=5074
<5074=5076,5075
<5077=5078
<5078=5080,5079
<5081=5082
<5082=5084,5083
<5085=5086
<5086=5088,5087
<5089=5090
<5090=5092,5091
<5093=5094
<5095=5096
<5097=5098
<5099=5100
<5100=5108,5101
<5101=5105,5102
<5102=5104,5103
<5105=5107,5106
<5108=5110,5109
<5111=5112
<5112=5120,5113
<5113=5117,5114
<5114=5116,5115
<5117=5119,5118
<5120=5122,5121
<5123=5124
<5124=5140,5125
<5125=5133,5126
<5126=5130,5127
<5127=5129,5128
<5130=5132,5131
<5133=5137,5134
<5134=5136,5135
<5137=5139,5138
<5140=5142,5141
<5143=5621,5617,5614,5144
<5144=5603,5592,5581,5570,5559,5548,5537,5526,5511,5496,5477,5458,5443,5430,5415,5400,5381,5362,5347,5323,5299,5287,5281,5179,5169,5145
<5145=5165,5155,5146
<5146=5147
<5147=5148
<5148=5150,5149
<5150=5154,5151
<5151=5153,5152
<5155=5156
<5156=5160,5157
<5157=5159,5158
<5160=5164,5161
<5161=5163,5162
<5165=5166
<5166=5168,5167
<5169=5170
<5170=5174,5171
<5171=5173,5172
<5174=5178,5175
<5175=5177,5176
<5179=5279,5180
<5180=5271,5263,5249,5240,5231,5222,5218,5181
<5181=5214,5182
<5182=5205,5196,5187,5183
<5183=5184
<5184=5186,5185
<5187=5188
<5188=5195,5189
<5189=5193,5190
<5190=5191
<5191=5192
<5193=5194
<5196=5197
<5197=5204,5198
<5198=5202,5199
<5199=5200
<5200=5201
<5202=5203
<5205=5206
<5206=5213,5207
<5207=5211,5208
<5208=5209
<5209=5210
<5211=5212
<5214=5215
<5215=5217,5216
<5218=5219
<5219=5221,5220
<5222=5223
<5223=5230,5224
<5224=5228,5225
<5225=5226
<5226=5227
<5228=5229
<5231=5232
<5232=5239,5233
<5233=5237,5234
<5234=5235
<5235=5236
<5237=5238
<5240=5241
<5241=5248,5242
<5242=5246,5243
<5243=5244
<5244=5245
<5246=5247
<5249=5250
<5250=5258,5251
<5251=5254,5253,5252
<5254=5255
<5255=5257,5256
<5258=5262,5259
<5259=5261,5260
<5263=5264
<5264=5266,5265
<5266=5270,5267
<5267=5269,5268
<5271=5272
<5272=5274,5273
<5274=5278,5275
<5275=5277,5276
<5279=5280
<5281=5282
<5282=5284,5283
<5284=5286,5285
<5287=5288
<5288=5296,5289
<5289=5295,5290
<5290=5294,5291
<5291=5293,5292
<5296=5298,5297
<5299=5319,5300
<5300=5307,5301
<5301=5302
<5302=5304,5303
<5304=5306,5305
<5307=5308
<5308=5316,5309
<5309=5315,5310
<5310=5314,5311
<5311=5313,5312
<5316=5318,5317
<5319=5320
<5320=5322,5321
<5323=5324
<5324=5346,5345,5325
<5325=5344,5326
<5326=5342,5327
<5327=5328
<5328=5329
<5329=5336,5335,5330
<5330=5332,5331
<5332=5334,5333
<5336=5337
<5337=5341,5338
<5338=5340,5339
<5342=5343
<5347=5348
<5348=5361,5360,5349
<5349=5359,5350
<5350=5355,5352,5351
<5352=5354,5353
<5355=5356
<5356=5358,5357
<5362=5363
<5363=5380,5379,5364
<5364=5378,5365
<5365=5376,5366
<5366=5367
<5367=5368
<5368=5375,5369
<5369=5373,5370
<5370=5371
<5371=5372
<5373=5374
<5376=5377
<5381=5382
<5382=5399,5398,5383
<5383=5397,5384
<5384=5395,5385
<5385=5386
<5386=5387
<5387=5394,5388
<5388=5392,5389
<5389=5390
<5390=5391
<5392=5393
<5395=5396
<5400=5401
<5401=5414,5413,5402
<5402=5412,5403
<5403=5411,5404
<5404=5410,5405
<5405=5409,5406
<5406=5408,5407
<5415=5416
<5416=5429,5428,5417
<5417=5427,5418
<5418=5426,5419
<5419=5425,5420
<5420=5424,5421
<5421=5423,5422
<5430=5431
<5431=5442,5441,5432
<5432=5440,5433
<5433=5437,5434
<5434=5436,5435
<5437=5439,5438
<5443=5444
<5444=5457,5456,5445
<5445=5455,5446
<5446=5452,5447
<5447=5451,5448
<5448=5450,5449
<5452=5454,5453
<5458=5459
<5459=5476,5475,5460
<5460=5474,5461
<5461=5467,5462
<5462=5466,5463
<5463=5465,5464
<5467=5471,5468
<5468=5470,5469
<5471=5473,5472
<5477=5478
<5478=5495,5494,5479
<5479=5493,5480
<5480=5486,5481
<5481=5485,5482
<5482=5484,5483
<5486=5490,5487
<5487=5489,5488
<5490=5492,5491
<5496=5497
<5497=5510,5509,5498
<5498=5508,5499
<5499=5505,5500
<5500=5504,5501
<5501=5503,5502
<5505=5507,5506
<5511=5512
<5512=5525,5524,5513
<5513=5523,5514
<5514=5520,5515
<5515=5519,5516
<5516=5518,5517
<5520=5522,5521
<5526=5527
<5527=5536,5535,5528
<5528=5534,5529
<5529=5533,5530
<5530=5532,5531
<5537=5538
<5538=5547,5546,5539
<5539=5545,5540
<5540=5544,5541
<5541=5543,5542
<5548=5549
<5549=5558,5557,5550
<5550=5556,5551
<5551=5555,5552
<5552=5554,5553
<5559=5560
<5560=5569,5568,5561
<5561=5567,5562
<5562=5566,5563
<5563=5565,5564
<5570=5571
<5571=5580,5579,5572
<5572=5578,5573
<5573=5577,5574
<5574=5576,5575
<5581=5582
<5582=5591,5590,5583
<5583=5589,5584
<5584=5588,5585
<5585=5587,5586
<5592=5593
<5593=5602,5601,5594
<5594=5600,5595
<5595=5599,5596
<5596=5598,5597
<5603=5604
<5604=5613,5612,5605
<5605=5611,5606
<5606=5610,5607
<5607=5609,5608
<5614=5616,5615
<5617=5618
<5618=5620,5619
<5621=5622
<5622=5623
<5623=5628,5627,5624
<5624=5626,5625
<5629=5672,5666,5660,5654,5648,5642,5636,5630
<5630=5635,5634,5631
<5631=5633,5632
<5636=5641,5640,5637
<5637=5639,5638
<5642=5647,5646,5643
<5643=5645,5644
<5648=5653,5652,5649
<5649=5651,5650
<5654=5659,5658,5655
<5655=5657,5656
<5660=5665,5664,5661
<5661=5663,5662
<5666=5671,5670,5667
<5667=5669,5668
<5672=5677,5676,5673
<5673=5675,5674
<5678=5679
<5679=5691,5680
<5680=5687,5685,5681
<5681=5682
<5682=5684,5683
<5685=5686
<5687=5688
<5688=5690,5689
<5691=5692
<5693=5694
<5694=5696,5695
<5697=5698
<5698=5710,5709,5699
<5699=5708,5700
<5700=5702,5701
<5702=5704,5703
<5704=5705
<5705=5707,5706
<5711=5712
<5712=5724,5723,5713
<5713=5722,5714
<5714=5716,5715
<5716=5718,5717
<5718=5719
<5719=5721,5720
<5725=5726
<5726=5738,5737,5727
<5727=5736,5728
<5728=5730,5729
<5730=5732,5731
<5732=5733
<5733=5735,5734
<5841=5847,5846,5842
<5842=5843
<5843=5845,5844
<5847=6633,6629,6618,6607,6595,5873,5866,5859,5848
<5848=5849
<5849=5855,5850
<5850=5853,5851
<5851=5852
<5853=5854
<5855=5856
<5856=5858,5857
<5859=5860
<5860=5862,5861
<5862=5863
<5863=5865,5864
<5866=5867
<5867=5869,5868
<5869=5870
<5870=5872,5871
<5873=6587,6581,6578,5874
<5874=6565,6552,6533,6519,6510,6506,6492,6481,6477,6463,6452,6448,6434,6423,6412,6398,6387,6376,6365,6361,6350,6346,6332,6328,6307,6303,6292,6281,6270,6259,6248,6237,6233,6222,6211,6200,6189,6178,6174,6163,6152,6141,6130,6126,5875
<5875=6120,6049,5876
<5876=5877
<5877=5878
<5878=6041,6035,6032,5879
<5879=6028,5972,5968,5930,5905,5880
<5880=5881
<5881=5901,5882
<5882=5899,5891,5883
<5883=5884
<5884=5890,5885
<5885=5889,5886
<5886=5888,5887
<5891=5892
<5892=5898,5893
<5893=5897,5894
<5894=5896,5895
<5899=5900
<5901=5902
<5902=5904,5903
<5905=5906
<5906=5926,5907
<5907=5924,5916,5908
<5908=5909
<5909=5915,5910
<5910=5914,5911
<5911=5913,5912
<5916=5917
<5917=5923,5918
<5918=5922,5919
<5919=5921,5920
<5924=5925
<5926=5927
<5927=5929,5928
<5930=5931
<5931=5958,5932
<5932=5950,5933
<5933=5942,5934
<5934=5940,5935
<5935=5938,5936
<5936=5937
<5938=5939
<5940=5941
<5942=5948,5943
<5943=5946,5944
<5944=5945
<5946=5947
<5948=5949
<5950=5956,5951
<5951=5954,5952
<5952=5953
<5954=5955
<5956=5957
<5958=5967,5959
<5959=5965,5960
<5960=5963,5961
<5961=5962
<5963=5964
<5965=5966
<5968=5969
<5969=5971,5970
<5972=5973
<5973=6018,5974
<5974=6010,5975
<5975=6002,5976
<5976=5994,5977
<5977=5986,5978
<5978=5984,5979
<5979=5982,5980
<5980=5981
<5982=5983
<5984=5985
<5986=5992,5987
<5987=5990,5988
<5988=5989
<5990=5991
<5992=5993
<5994=6000,5995
<5995=5998,5996
<5996=5997
<5998=5999
<6000=6001
<6002=6008,6003
<6003=6006,6004
<6004=6005
<6006=6007
<6008=6009
<6010=6016,6011
<6011=6014,6012
<6012=6013
<6014=6015
<6016=6017
<6018=6027,6019
<6019=6025,6020
<6020=6023,6021
<6021=6022
<6023=6024
<6025=6026
<6028=6029
<6029=6031,6030
<6032=6034,6033
<6035=6036
<6036=6038,6037
<6038=6040,6039
<6041=6042
<6042=6043
<6043=6048,6047,6044
<6044=6046,6045
<6049=6087,6050
<6050=6051
<6051=6083,6052
<6052=6081,6079,6077,6075,6073,6071,6062,6053
<6053=6054
<6054=6060,6055
<6055=6056
<6056=6057
<6057=6059,6058
<6060=6061
<6062=6063
<6063=6069,6064
<6064=6065
<6065=6066
<6066=6068,6067
<6069=6070
<6071=6072
<6073=6074
<6075=6076
<6077=6078
<6079=6080
<6081=6082
<6083=6084
<6084=6086,6085
<6087=6088
<6088=6116,6089
<6089=6114,6112,6110,6108,6099,6090
<6090=6091
<6091=6097,6092
<6092=6093
<6093=6094
<6094=6096,6095
<6097=6098
<6099=6100
<6100=6106,6101
<6101=6102
<6102=6103
<6103=6105,6104
<6106=6107
<6108=6109
<6110=6111
<6112=6113
<6114=6115
<6116=6117
<6117=6119,6118
<6120=6121
<6121=6123,6122
<6123=6125,6124
<6126=6127
<6127=6129,6128
<6130=6131
<6131=6140,6132
<6132=6138,6133
<6133=6136,6134
<6134=6135
<6136=6137
<6138=6139
<6141=6142
<6142=6151,6143
<6143=6149,6144
<6144=6147,6145
<6145=6146
<6147=6148
<6149=6150
<6152=6153
<6153=6162,6154
<6154=6160,6155
<6155=6158,6156
<6156=6157
<6158=6159
<6160=6161
<6163=6164
<6164=6173,6165
<6165=6171,6166
<6166=6169,6167
<6167=6168
<6169=6170
<6171=6172
<6174=6175
<6175=6177,6176
<6178=6179
<6179=6188,6180
<6180=6186,6181
<6181=6184,6182
<6182=6183
<6184=6185
<6186=6187
<6189=6190
<6190=6199,6191
<6191=6197,6192
<6192=6195,6193
<6193=6194
<6195=6196
<6197=6198
<6200=6201
<6201=6210,6202
<6202=6208,6203
<6203=6206,6204
<6204=6205
<6206=6207
<6208=6209
<6211=6212
<6212=6221,6213
<6213=6219,6214
<6214=6217,6215
<6215=6216
<6217=6218
<6219=6220
<6222=6223
<6223=6232,6224
<6224=6230,6225
<6225=6228,6226
<6226=6227
<6228=6229
<6230=6231
<6233=6234
<6234=6236,6235
<6237=6238
<6238=6247,6239
<6239=6245,6240
<6240=6243,6241
<6241=6242
<6243=6244
<6245=6246
<6248=6249
<6249=6258,6250
<6250=6256,6251
<6251=6254,6252
<6252=6253
<6254=6255
<6256=6257
<6259=6260
<6260=6269,6261
<6261=6267,6262
<6262=6265,6263
<6263=6264
<6265=6266
<6267=6268
<6270=6271
<6271=6280,6272
<6272=6278,6273
<6273=6276,6274
<6274=6275
<6276=6277
<6278=6279
<6281=6282
<6282=6291,6283
<6283=6289,6284
<6284=6287,6285
<6285=6286
<6287=6288
<6289=6290
<6292=6293
<6293=6302,6294
<6294=6300,6295
<6295=6298,6296
<6296=6297
<6298=6299
<6300=6301
<6303=6304
<6304=6306,6305
<6307=6308
<6308=6327,6326,6309
<6309=6325,6310
<6310=6323,6311
<6311=6321,6312
<6312=6313
<6313=6319,6314
<6314=6317,6315
<6315=6316
<6317=6318
<6319=6320
<6321=6322
<6323=6324
<6328=6329
<6329=6331,6330
<6332=6333
<6333=6345,6344,6334
<6334=6343,6335
<6335=6341,6336
<6336=6339,6337
<6337=6338
<6339=6340
<6341=6342
<6346=6347
<6347=6349,6348
<6350=6351
<6351=6360,6352
<6352=6358,6353
<6353=6356,6354
<6354=6355
<6356=6357
<6358=6359
<6361=6362
<6362=6364,6363
<6365=6366
<6366=6375,6367
<6367=6373,6368
<6368=6371,6369
<6369=6370
<6371=6372
<6373=6374
<6376=6377
<6377=6386,6378
<6378=6384,6379
<6379=6382,6380
<6380=6381
<6382=6383
<6384=6385
<6387=6388
<6388=6397,6389
<6389=6395,6390
<6390=6393,6391
<6391=6392
<6393=6394
<6395=6396
<6398=6399
<6399=6411,6410,6400
<6400=6409,6401
<6401=6407,6402
<6402=6403
<6403=6404
<6404=6406,6405
<6407=6408
<6412=6413
<6413=6422,6414
<6414=6420,6415
<6415=6418,6416
<6416=6417
<6418=6419
<6420=6421
<6423=6424
<6424=6433,6425
<6425=6431,6426
<6426=6429,6427
<6427=6428
<6429=6430
<6431=6432
<6434=6435
<6435=6447,6446,6436
<6436=6445,6437
<6437=6443,6438
<6438=6439
<6439=6440
<6440=6442,6441
<6443=6444
<6448=6449
<6449=6451,6450
<6452=6453
<6453=6462,6454
<6454=6460,6455
<6455=6458,6456
<6456=6457
<6458=6459
<6460=6461
<6463=6464
<6464=6476,6475,6465
<6465=6474,6466
<6466=6472,6467
<6467=6468
<6468=6469
<6469=6471,6470
<6472=6473
<6477=6478
<6478=6480,6479
<6481=6482
<6482=6491,6483
<6483=6489,6484
<6484=6487,6485
<6485=6486
<6487=6488
<6489=6490
<6492=6493
<6493=6505,6504,6494
<6494=6503,6495
<6495=6501,6496
<6496=6497
<6497=6498
<6498=6500,6499
<6501=6502
<6506=6507
<6507=6509,6508
<6510=6511
<6511=6518,6512
<6512=6516,6513
<6513=6514
<6514=6515
<6516=6517
<6519=6520
<6520=6532,6531,6521
<6521=6530,6522
<6522=6528,6523
<6523=6524
<6524=6525
<6525=6527,6526
<6528=6529
<6533=6549,6546,6543,6540,6537,6534
<6534=6536,6535
<6537=6539,6538
<6540=6542,6541
<6543=6545,6544
<6546=6548,6547
<6549=6551,6550
<6552=6562,6559,6556,6553
<6553=6555,6554
<6556=6558,6557
<6559=6561,6560
<6562=6564,6563
<6565=6575,6572,6569,6566
<6566=6568,6567
<6569=6571,6570
<6572=6574,6573
<6575=6577,6576
<6578=6580,6579
<6581=6582
<6582=6586,6583
<6583=6585,6584
<6587=6588
<6588=6589
<6589=6594,6593,6590
<6590=6592,6591
<6595=6596
<6596=6606,6605,6597
<6597=6604,6598
<6598=6602,6599
<6599=6600
<6600=6601
<6602=6603
<6607=6608
<6608=6614,6609
<6609=6610
<6610=6611
<6611=6613,6612
<6614=6615
<6615=6617,6616
<6618=6619
<6619=6625,6620
<6620=6621
<6621=6622
<6622=6624,6623
<6625=6626
<6626=6628,6627
<6629=6630
<6630=6632,6631
<6633=6634
<6634=6636,6635
<6697=6703,6702,6698
<6698=6699
<6699=6701,6700
<6703=6704
<6704=6705
<6705=6709,6706
<6706=6707
<6707=6708
<6709=6710
<6715=6721,6720,6716
<6716=6717
<6717=6719,6718
<6721=7079,7075,7064,7053,6747,6740,6733,6722
<6722=6723
<6723=6729,6724
<6724=6727,6725
<6725=6726
<6727=6728
<6729=6730
<6730=6732,6731
<6733=6734
<6734=6736,6735
<6736=6737
<6737=6739,6738
<6740=6741
<6741=6743,6742
<6743=6744
<6744=6746,6745
<6747=7045,7041,7038,6748
<6748=7027,7016,7005,6994,6983,6972,6961,6950,6939,6930,6919,6915,6911,6901,6891,6871,6845,6823,6805,6799,6791,6781,6775,6762,6749
<6749=6750
<6750=6758,6751
<6751=6756,6754,6752
<6752=6753
<6754=6755
<6756=6757
<6758=6759
<6759=6761,6760
<6762=6763
<6763=6771,6764
<6764=6769,6767,6765
<6765=6766
<6767=6768
<6769=6770
<6771=6772
<6772=6774,6773
<6775=6776
<6776=6778,6777
<6778=6780,6779
<6781=6782
<6782=6788,6783
<6783=6785,6784
<6785=6787,6786
<6788=6790,6789
<6791=6792
<6792=6796,6793
<6793=6795,6794
<6796=6798,6797
<6799=6800
<6800=6802,6801
<6802=6804,6803
<6805=6806
<6806=6820,6807
<6807=6813,6808
<6808=6810,6809
<6810=6812,6811
<6813=6815,6814
<6815=6817,6816
<6817=6819,6818
<6820=6822,6821
<6823=6824
<6824=6842,6825
<6825=6833,6826
<6826=6828,6827
<6828=6832,6829
<6829=6831,6830
<6833=6835,6834
<6835=6841,6836
<6836=6840,6837
<6837=6839,6838
<6842=6844,6843
<6845=6846
<6846=6868,6847
<6847=6859,6848
<6848=6850,6849
<6850=6858,6851
<6851=6857,6852
<6852=6856,6853
<6853=6855,6854
<6859=6861,6860
<6861=6865,6862
<6862=6864,6863
<6865=6867,6866
<6868=6870,6869
<6871=6872
<6872=6888,6873
<6873=6881,6874
<6874=6876,6875
<6876=6878,6877
<6878=6880,6879
<6881=6883,6882
<6883=6885,6884
<6885=6887,6886
<6888=6890,6889
<6891=6892
<6892=6898,6893
<6893=6897,6894
<6894=6896,6895
<6898=6900,6899
<6901=6902
<6902=6908,6903
<6903=6905,6904
<6905=6907,6906
<6908=6910,6909
<6911=6912
<6912=6914,6913
<6915=6916
<6916=6918,6917
<6919=6920
<6920=6929,6928,6921
<6921=6927,6922
<6922=6926,6923
<6923=6925,6924
<6930=6931
<6931=6938,6937,6932
<6932=6936,6933
<6933=6935,6934
<6939=6940
<6940=6949,6948,6941
<6941=6947,6942
<6942=6946,6943
<6943=6945,6944
<6950=6951
<6951=6960,6959,6952
<6952=6958,6953
<6953=6957,6954
<6954=6956,6955
<6961=6962
<6962=6971,6970,6963
<6963=6969,6964
<6964=6968,6965
<6965=6967,6966
<6972=6973
<6973=6982,6981,6974
<6974=6980,6975
<6975=6979,6976
<6976=6978,6977
<6983=6984
<6984=6993,6992,6985
<6985=6991,6986
<6986=6990,6987
<6987=6989,6988
<6994=6995
<6995=7004,7003,6996
<6996=7002,6997
<6997=7001,6998
<6998=7000,6999
<7005=7006
<7006=7015,7014,7007
<7007=7013,7008
<7008=7012,7009
<7009=7011,7010
<7016=7017
<7017=7026,7025,7018
<7018=7024,7019
<7019=7023,7020
<7020=7022,7021
<7027=7028
<7028=7037,7036,7029
<7029=7035,7030
<7030=7034,7031
<7031=7033,7032
<7038=7040,7039
<7041=7042
<7042=7044,7043
<7045=7046
<7046=7047
<7047=7052,7051,7048
<7048=7050,7049
<7053=7054
<7054=7060,7055
<7055=7056
<7056=7057
<7057=7059,7058
<7060=7061
<7061=7063,7062
<7064=7065
<7065=7071,7066
<7066=7067
<7067=7068
<7068=7070,7069
<7071=7072
<7072=7074,7073
<7075=7076
<7076=7078,7077
<7079=7080
<7080=7082,7081
<7136=7139,7138,7137
<7139=7140
<7140=7293,7141
<7141=7282,7262,7242,7222,7202,7182,7162,7142
<7142=7143
<7143=7160,7144
<7144=7156,7145
<7145=7146
<7146=7154,7147
<7147=7152,7150,7148
<7148=7149
<7150=7151
<7152=7153
<7154=7155
<7156=7157
<7157=7159,7158
<7160=7161
<7162=7163
<7163=7180,7164
<7164=7176,7165
<7165=7166
<7166=7174,7167
<7167=7172,7170,7168
<7168=7169
<7170=7171
<7172=7173
<7174=7175
<7176=7177
<7177=7179,7178
<7180=7181
<7182=7183
<7183=7200,7184
<7184=7196,7185
<7185=7186
<7186=7194,7187
<7187=7192,7190,7188
<7188=7189
<7190=7191
<7192=7193
<7194=7195
<7196=7197
<7197=7199,7198
<7200=7201
<7202=7203
<7203=7220,7204
<7204=7216,7205
<7205=7206
<7206=7214,7207
<7207=7212,7210,7208
<7208=7209
<7210=7211
<7212=7213
<7214=7215
<7216=7217
<7217=7219,7218
<7220=7221
<7222=7223
<7223=7240,7224
<7224=7236,7225
<7225=7226
<7226=7234,7227
<7227=7232,7230,7228
<7228=7229
<7230=7231
<7232=7233
<7234=7235
<7236=7237
<7237=7239,7238
<7240=7241
<7242=7243
<7243=7260,7244
<7244=7256,7245
<7245=7246
<7246=7254,7247
<7247=7252,7250,7248
<7248=7249
<7250=7251
<7252=7253
<7254=7255
<7256=7257
<7257=7259,7258
<7260=7261
<7262=7263
<7263=7280,7264
<7264=7276,7265
<7265=7266
<7266=7274,7267
<7267=7272,7270,7268
<7268=7269
<7270=7271
<7272=7273
<7274=7275
<7276=7277
<7277=7279,7278
<7280=7281
<7282=7283
<7283=7292,7291,7284
<7284=7290,7285
<7285=7288,7287,7286
<7288=7289
<7293=7294
<7294=7296,7295
<7311=7317,7316,7312
<7312=7313
<7313=7315,7314
<7317=7431,7318
<7318=7429,7319
<7319=7424,7402,7393,7371,7362,7340,7331,7320
<7320=7321
<7321=7329,7322
<7322=7327,7325,7323
<7323=7324
<7325=7326
<7327=7328
<7329=7330
<7331=7332
<7332=7338,7333
<7333=7336,7334
<7334=7335
<7336=7337
<7338=7339
<7340=7341
<7341=7360,7342
<7342=7358,7356,7354,7347,7345,7343
<7343=7344
<7345=7346
<7347=7348
<7348=7350,7349
<7350=7351
<7351=7353,7352
<7354=7355
<7356=7357
<7358=7359
<7360=7361
<7362=7363
<7363=7369,7364
<7364=7367,7365
<7365=7366
<7367=7368
<7369=7370
<7371=7372
<7372=7391,7373
<7373=7389,7387,7385,7378,7376,7374
<7374=7375
<7376=7377
<7378=7379
<7379=7381,7380
<7381=7382
<7382=7384,7383
<7385=7386
<7387=7388
<7389=7390
<7391=7392
<7393=7394
<7394=7400,7395
<7395=7398,7396
<7396=7397
<7398=7399
<7400=7401
<7402=7403
<7403=7422,7404
<7404=7420,7418,7416,7409,7407,7405
<7405=7406
<7407=7408
<7409=7410
<7410=7412,7411
<7412=7413
<7413=7415,7414
<7416=7417
<7418=7419
<7420=7421
<7422=7423
<7424=7425
<7425=7428,7427,7426
<7429=7430
<7431=7557,7432
<7432=7548,7539,7530,7521,7512,7503,7494,7487,7433
<7433=7485,7434
<7434=7473,7459,7452,7435
<7435=7448,7444,7436
<7436=7437
<7437=7438
<7438=7442,7439
<7439=7440
<7440=7441
<7442=7443
<7444=7445
<7445=7447,7446
<7448=7449
<7449=7451,7450
<7452=7453
<7453=7458,7457,7454
<7454=7456,7455
<7459=7467,7460
<7460=7461
<7461=7465,7464,7462
<7462=7463
<7465=7466
<7467=7468
<7468=7472,7469
<7469=7471,7470
<7473=7474
<7474=7484,7483,7475
<7475=7482,7476
<7476=7480,7477
<7477=7478
<7478=7479
<7480=7481
<7485=7486
<7487=7488
<7488=7493,7492,7489
<7489=7491,7490
<7494=7495
<7495=7501,7496
<7496=7499,7497
<7497=7498
<7499=7500
<7501=7502
<7503=7504
<7504=7510,7505
<7505=7508,7506
<7506=7507
<7508=7509
<7510=7511
<7512=7513
<7513=7519,7514
<7514=7517,7515
<7515=7516
<7517=7518
<7519=7520
<7521=7522
<7522=7528,7523
<7523=7526,7524
<7524=7525
<7526=7527
<7528=7529
<7530=7531
<7531=7537,7532
<7532=7535,7533
<7533=7534
<7535=7536
<7537=7538
<7539=7540
<7540=7546,7541
<7541=7544,7542
<7542=7543
<7544=7545
<7546=7547
<7548=7549
<7549=7555,7550
<7550=7553,7551
<7551=7552
<7553=7554
<7555=7556
<7557=7558
