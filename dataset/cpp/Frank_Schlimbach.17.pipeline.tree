>3	FunctionDef	pl_stage 
>4	ParameterList	const id_type & tag , pl_context & c
>5	Parameter	 
>6	Identifier	c
>7	ParameterType	pl_context &
>8	Parameter	 
>9	Identifier	tag
>10	ParameterType	const id_type &
>11	ReturnType	int
>12	CompoundStatement	 
>13	ReturnStatement	 
>14	Identifier	CnC 
>15	ExpressionStatement	 
>16	CallExpression	c . m_streamData . put ( item_tag_type ( m_id , tag ) , _item2 )
>17	ArgumentList	item_tag_type ( m_id , tag )
>18	Argument	_item2
>19	Identifier	_item2
>20	Argument	item_tag_type ( m_id , tag )
>21	CallExpression	item_tag_type ( m_id , tag )
>22	ArgumentList	m_id
>23	Argument	tag
>24	Identifier	tag
>25	Argument	m_id
>26	Identifier	m_id
>27	Callee	item_tag_type
>28	Identifier	item_tag_type
>29	Callee	c . m_streamData . put
>30	MemberAccess	c . m_streamData . put
>31	Identifier	put
>32	MemberAccess	c . m_streamData
>33	Identifier	m_streamData
>34	Identifier	c
>35	ForStatement	for ( int i = 0 ; i < _item2 -> size ( ) ; ++ i )
>36	CompoundStatement	 
>37	ExpressionStatement	 
>38	AssignmentExpr	( ( * _item2 ) [ i ] ) = _tmp
>39	Identifier	_tmp
>40	ArrayIndexing	( * _item2 ) [ i ]
>41	Identifier	i
>42	UnaryOp	* _item2
>43	Identifier	_item2
>44	UnaryOperator	*
>45	Statement	 
>46	Statement	 
>47	Statement	 
>48	Statement	 
>49	Statement	 
>50	ForStatement	for ( int j = 0 ; j < _item1 -> size ( ) ; ++ j )
>51	CompoundStatement	 
>52	IfStatement	if ( _tmp != _tmp )
>53	ExpressionStatement	 
>54	AssignmentExpr	_tmp = 1.9284576 * ( * _item1 ) [ j ]
>55	MultiplicativeExpression	1.9284576 * ( * _item1 ) [ j ]
>56	ArrayIndexing	( * _item1 ) [ j ]
>57	Identifier	j
>58	UnaryOp	* _item1
>59	Identifier	_item1
>60	UnaryOperator	*
>61	PrimaryExpression	1.9284576
>62	Identifier	_tmp
>63	Condition	 
>64	EqualityExpression	_tmp != _tmp
>65	Identifier	_tmp
>66	Identifier	_tmp
>67	ExpressionStatement	 
>68	AssignmentExpr	_tmp *= sin ( ( * _item1 ) [ j ] * ( * _item2 ) [ i ] )
>69	CallExpression	sin ( ( * _item1 ) [ j ] * ( * _item2 ) [ i ] )
>70	ArgumentList	( * _item1 ) [ j ] * ( * _item2 ) [ i ]
>71	Argument	( * _item1 ) [ j ] * ( * _item2 ) [ i ]
>72	MultiplicativeExpression	( * _item1 ) [ j ] * ( * _item2 ) [ i ]
>73	ArrayIndexing	( * _item2 ) [ i ]
>74	Identifier	i
>75	UnaryOp	* _item2
>76	Identifier	_item2
>77	UnaryOperator	*
>78	ArrayIndexing	( * _item1 ) [ j ]
>79	Identifier	j
>80	UnaryOp	* _item1
>81	Identifier	_item1
>82	UnaryOperator	*
>83	Callee	sin
>84	Identifier	sin
>85	Identifier	_tmp
>86	UnaryExpression	 
>87	Identifier	j
>88	IncDec	++
>89	Condition	 
>90	RelationalExpression	j < _item1 -> size ( )
>91	CallExpression	_item1 -> size ( )
>92	ArgumentList	 
>93	Callee	_item1 -> size
>94	PtrMemberAccess	_item1 -> size
>95	Identifier	size
>96	Identifier	_item1
>97	Identifier	j
>98	ForInit	 
>99	IdentifierDeclStatement	int j = 0 ;
>100	IdentifierDecl	j = 0
>101	AssignmentExpr	j = 0
>102	PrimaryExpression	0
>103	Identifier	j
>104	Identifier	j
>105	IdentifierDeclType	int
>106	UnaryExpression	 
>107	Identifier	i
>108	IncDec	++
>109	Condition	 
>110	RelationalExpression	i < _item2 -> size ( )
>111	CallExpression	_item2 -> size ( )
>112	ArgumentList	 
>113	Callee	_item2 -> size
>114	PtrMemberAccess	_item2 -> size
>115	Identifier	size
>116	Identifier	_item2
>117	Identifier	i
>118	ForInit	 
>119	IdentifierDeclStatement	int i = 0 ;
>120	IdentifierDecl	i = 0
>121	AssignmentExpr	i = 0
>122	PrimaryExpression	0
>123	Identifier	i
>124	Identifier	i
>125	IdentifierDeclType	int
>126	IdentifierDeclStatement	 
>127	IdentifierDecl	_tmp = tag + 8
>128	AssignmentExpr	_tmp = tag + 8
>129	AdditiveExpression	tag + 8
>130	PrimaryExpression	8
>131	Identifier	tag
>132	Identifier	_tmp
>133	Identifier	_tmp
>134	IdentifierDeclType	double
>135	IfStatement	if ( m_id == 1 )
>136	ElseStatement	else
>137	CompoundStatement	 
>138	ExpressionStatement	 
>139	CallExpression	c . m_streamData . get ( item_tag_type ( m_id - 1 , tag ) , _item2 )
>140	ArgumentList	item_tag_type ( m_id - 1 , tag )
>141	Argument	_item2
>142	Identifier	_item2
>143	Argument	item_tag_type ( m_id - 1 , tag )
>144	CallExpression	item_tag_type ( m_id - 1 , tag )
>145	ArgumentList	m_id - 1
>146	Argument	tag
>147	Identifier	tag
>148	Argument	m_id - 1
>149	AdditiveExpression	m_id - 1
>150	PrimaryExpression	1
>151	Identifier	m_id
>152	Callee	item_tag_type
>153	Identifier	item_tag_type
>154	Callee	c . m_streamData . get
>155	MemberAccess	c . m_streamData . get
>156	Identifier	get
>157	MemberAccess	c . m_streamData
>158	Identifier	m_streamData
>159	Identifier	c
>160	CompoundStatement	 
>161	ExpressionStatement	 
>162	MemberAccess	c . m_n
>163	Identifier	m_n
>164	Identifier	c
>165	Statement	 
>166	Statement	 
>167	Statement	 
>168	Statement	 
>169	Statement	 
>170	Statement	 
>171	Statement	 
>172	Statement	 
>173	Statement	 
>174	Statement	 
>175	Statement	 
>176	Statement	 
>177	Statement	 
>178	Condition	 
>179	EqualityExpression	m_id == 1
>180	PrimaryExpression	1
>181	Identifier	m_id
>182	ExpressionStatement	 
>183	CallExpression	c . m_stageData . get ( m_id , _item1 )
>184	ArgumentList	m_id
>185	Argument	_item1
>186	Identifier	_item1
>187	Argument	m_id
>188	Identifier	m_id
>189	Callee	c . m_stageData . get
>190	MemberAccess	c . m_stageData . get
>191	Identifier	get
>192	MemberAccess	c . m_stageData
>193	Identifier	m_stageData
>194	Identifier	c
>195	IdentifierDeclStatement	 
>196	IdentifierDecl	_item2
>197	Identifier	_item2
>198	IdentifierDeclType	item_type
>199	IdentifierDecl	_item1
>200	Identifier	_item1
>201	IdentifierDeclType	item_type
>226	FunctionDef	main (int argc , char * argv [ ])
>227	ParameterList	int argc , char * argv [ ]
>228	Parameter	 
>229	Identifier	argv
>230	ParameterType	char * [ ]
>231	Parameter	 
>232	Identifier	argc
>233	ParameterType	int
>234	ReturnType	int
>235	CompoundStatement	 
>236	ReturnStatement	 
>237	PrimaryExpression	0
>238	ExpressionStatement	 
>239	ShiftExpression	std 
>240	ShiftExpression	\"Stages
>241	ShiftExpression	_nstages << \" streams
>242	ShiftExpression	\" streams
>243	ShiftExpression	_nstreams << \" time
>244	ShiftExpression	\" time
>245	ShiftExpression	( t2 - t1 ) . seconds ( ) << \" sec\n\"
>246	PrimaryExpression	\" sec\n\"
>247	CallExpression	( t2 - t1 ) . seconds ( )
>248	ArgumentList	 
>249	Callee	( t2 - t1 ) . seconds
>250	MemberAccess	( t2 - t1 ) . seconds
>251	Identifier	seconds
>252	AdditiveExpression	t2 - t1
>253	Identifier	t1
>254	Identifier	t2
>255	PrimaryExpression	\" time
>256	Identifier	_nstreams
>257	PrimaryExpression	\" streams
>258	Identifier	_nstages
>259	PrimaryExpression	\"Stages
>260	Identifier	std 
>261	ForStatement	for ( int i = 1 ; i <= _nstreams ; ++ i )
>262	CompoundStatement	 
>263	ExpressionStatement	 
>264	CallExpression	_ctxt . m_streamData . get ( item_tag_type ( _nstages , i ) , _tmp )
>265	ArgumentList	item_tag_type ( _nstages , i )
>266	Argument	_tmp
>267	Identifier	_tmp
>268	Argument	item_tag_type ( _nstages , i )
>269	CallExpression	item_tag_type ( _nstages , i )
>270	ArgumentList	_nstages
>271	Argument	i
>272	Identifier	i
>273	Argument	_nstages
>274	Identifier	_nstages
>275	Callee	item_tag_type
>276	Identifier	item_tag_type
>277	Callee	_ctxt . m_streamData . get
>278	MemberAccess	_ctxt . m_streamData . get
>279	Identifier	get
>280	MemberAccess	_ctxt . m_streamData
>281	Identifier	m_streamData
>282	Identifier	_ctxt
>283	IdentifierDeclStatement	 
>284	IdentifierDecl	_tmp
>285	Identifier	_tmp
>286	IdentifierDeclType	item_type
>287	UnaryExpression	 
>288	Identifier	i
>289	IncDec	++
>290	Condition	 
>291	RelationalExpression	i <= _nstreams
>292	Identifier	_nstreams
>293	Identifier	i
>294	ForInit	 
>295	IdentifierDeclStatement	int i = 1 ;
>296	IdentifierDecl	i = 1
>297	AssignmentExpr	i = 1
>298	PrimaryExpression	1
>299	Identifier	i
>300	Identifier	i
>301	IdentifierDeclType	int
>302	IdentifierDeclStatement	 
>303	IdentifierDecl	t2 = tbb 
>304	AssignmentExpr	t2 = tbb 
>305	CallExpression	tbb 
>306	ArgumentList	 
>307	Callee	tbb 
>308	Identifier	tbb 
>309	Identifier	t2
>310	Identifier	t2
>311	IdentifierDeclType	tbb 
>312	ExpressionStatement	 
>313	CallExpression	_ctxt . wait ( )
>314	ArgumentList	 
>315	Callee	_ctxt . wait
>316	MemberAccess	_ctxt . wait
>317	Identifier	wait
>318	Identifier	_ctxt
>319	ExpressionStatement	 
>320	ForStatement	for ( int i = 1 ; i <= _nstreams ; ++ i )
>321	CompoundStatement	 
>322	ExpressionStatement	 
>323	CallExpression	_ctxt . m_tagColl . put ( i )
>324	ArgumentList	i
>325	Argument	i
>326	Identifier	i
>327	Callee	_ctxt . m_tagColl . put
>328	MemberAccess	_ctxt . m_tagColl . put
>329	Identifier	put
>330	MemberAccess	_ctxt . m_tagColl
>331	Identifier	m_tagColl
>332	Identifier	_ctxt
>333	UnaryExpression	 
>334	Identifier	i
>335	IncDec	++
>336	Condition	 
>337	RelationalExpression	i <= _nstreams
>338	Identifier	_nstreams
>339	Identifier	i
>340	ForInit	 
>341	IdentifierDeclStatement	int i = 1 ;
>342	IdentifierDecl	i = 1
>343	AssignmentExpr	i = 1
>344	PrimaryExpression	1
>345	Identifier	i
>346	Identifier	i
>347	IdentifierDeclType	int
>348	ForStatement	for ( int i = 1 ; i <= _nstages ; ++ i )
>349	CompoundStatement	 
>350	ExpressionStatement	 
>351	Statement	 
>352	Statement	 
>353	Statement	 
>354	Statement	 
>355	Statement	 
>356	Statement	 
>357	Statement	 
>358	Statement	 
>359	Statement	 
>360	Statement	 
>361	Statement	 
>362	Statement	 
>363	Statement	 
>364	Statement	 
>365	Statement	 
>366	Statement	 
>367	Statement	 
>368	Statement	 
>369	Statement	 
>370	Statement	 
>371	Statement	 
>372	Statement	 
>373	Statement	 
>374	Statement	 
>375	Statement	 
>376	UnaryExpression	 
>377	Identifier	i
>378	IncDec	++
>379	Condition	 
>380	RelationalExpression	i <= _nstages
>381	Identifier	_nstages
>382	Identifier	i
>383	ForInit	 
>384	IdentifierDeclStatement	int i = 1 ;
>385	IdentifierDecl	i = 1
>386	AssignmentExpr	i = 1
>387	PrimaryExpression	1
>388	Identifier	i
>389	Identifier	i
>390	IdentifierDeclType	int
>391	IdentifierDeclStatement	 
>392	IdentifierDecl	_item2
>393	Identifier	_item2
>394	IdentifierDeclType	item_type
>395	IdentifierDecl	_item1
>396	Identifier	_item1
>397	IdentifierDeclType	item_type
>398	IdentifierDeclStatement	 
>399	IdentifierDecl	t1 = tbb 
>400	AssignmentExpr	t1 = tbb 
>401	CallExpression	tbb 
>402	ArgumentList	 
>403	Callee	tbb 
>404	Identifier	tbb 
>405	Identifier	t1
>406	Identifier	t1
>407	IdentifierDeclType	tbb 
>408	ExpressionStatement	 
>409	CallExpression	CnC 
>410	ArgumentList	_ctxt
>411	Argument	_ctxt
>412	Identifier	_ctxt
>413	Callee	CnC 
>414	Identifier	CnC 
>415	IdentifierDeclStatement	 
>416	IdentifierDecl	_ctxt ( _nstages , _nstreams , _npp , _pt )
>417	Expression	_nstages , _nstreams , _npp , _pt
>418	Expression	_nstreams , _npp , _pt
>419	Expression	_npp , _pt
>420	Identifier	_pt
>421	Identifier	_npp
>422	Identifier	_nstreams
>423	Identifier	_nstages
>424	Identifier	_ctxt
>425	IdentifierDeclType	pl_context
>426	SwitchStatement	switch ( argv [ 5 ] [ 0 ] )
>427	CompoundStatement	 
>428	ExpressionStatement	 
>429	CallExpression	exit ( 12 )
>430	ArgumentList	12
>431	Argument	12
>432	PrimaryExpression	12
>433	Callee	exit
>434	Identifier	exit
>435	ExpressionStatement	 
>436	ShiftExpression	std 
>437	ShiftExpression	\"wrong value in partitioning argument (\" << argv [ 5 ] << \"); expected p, s, or b\n\"
>438	ShiftExpression	argv [ 5 ] << \"); expected p, s, or b\n\"
>439	PrimaryExpression	\"); expected p, s, or b\n\"
>440	ArrayIndexing	argv [ 5 ]
>441	PrimaryExpression	5
>442	Identifier	argv
>443	PrimaryExpression	\"wrong value in partitioning argument (\"
>444	Identifier	std 
>445	Label	 
>446	Identifier	default
>447	BreakStatement	 
>448	ExpressionStatement	 
>449	AssignmentExpr	_pt = pl_stage 
>450	Identifier	pl_stage 
>451	Identifier	_pt
>452	Label	 
>453	BreakStatement	 
>454	ExpressionStatement	 
>455	AssignmentExpr	_pt = pl_stage 
>456	Identifier	pl_stage 
>457	Identifier	_pt
>458	Label	 
>459	BreakStatement	 
>460	ExpressionStatement	 
>461	AssignmentExpr	_pt = pl_stage 
>462	Identifier	pl_stage 
>463	Identifier	_pt
>464	Label	 
>465	Condition	 
>466	ArrayIndexing	argv [ 5 ] [ 0 ]
>467	PrimaryExpression	0
>468	ArrayIndexing	argv [ 5 ]
>469	PrimaryExpression	5
>470	Identifier	argv
>471	IdentifierDeclStatement	 
>472	IdentifierDecl	_pt
>473	Identifier	_pt
>474	IdentifierDeclType	pl_stage 
>475	IdentifierDeclStatement	 
>476	IdentifierDecl	_npp = atoi ( argv [ 4 ] )
>477	AssignmentExpr	_npp = atoi ( argv [ 4 ] )
>478	CallExpression	atoi ( argv [ 4 ] )
>479	ArgumentList	argv [ 4 ]
>480	Argument	argv [ 4 ]
>481	ArrayIndexing	argv [ 4 ]
>482	PrimaryExpression	4
>483	Identifier	argv
>484	Callee	atoi
>485	Identifier	atoi
>486	Identifier	_npp
>487	Identifier	_npp
>488	IdentifierDeclType	int
>489	IdentifierDeclStatement	 
>490	IdentifierDecl	_nps = atoi ( argv [ 3 ] )
>491	AssignmentExpr	_nps = atoi ( argv [ 3 ] )
>492	CallExpression	atoi ( argv [ 3 ] )
>493	ArgumentList	argv [ 3 ]
>494	Argument	argv [ 3 ]
>495	ArrayIndexing	argv [ 3 ]
>496	PrimaryExpression	3
>497	Identifier	argv
>498	Callee	atoi
>499	Identifier	atoi
>500	Identifier	_nps
>501	Identifier	_nps
>502	IdentifierDeclType	int
>503	IdentifierDeclStatement	 
>504	IdentifierDecl	_nstreams = atoi ( argv [ 2 ] )
>505	AssignmentExpr	_nstreams = atoi ( argv [ 2 ] )
>506	CallExpression	atoi ( argv [ 2 ] )
>507	ArgumentList	argv [ 2 ]
>508	Argument	argv [ 2 ]
>509	ArrayIndexing	argv [ 2 ]
>510	PrimaryExpression	2
>511	Identifier	argv
>512	Callee	atoi
>513	Identifier	atoi
>514	Identifier	_nstreams
>515	Identifier	_nstreams
>516	IdentifierDeclType	int
>517	IdentifierDeclStatement	 
>518	IdentifierDecl	_nstages = atoi ( argv [ 1 ] )
>519	AssignmentExpr	_nstages = atoi ( argv [ 1 ] )
>520	CallExpression	atoi ( argv [ 1 ] )
>521	ArgumentList	argv [ 1 ]
>522	Argument	argv [ 1 ]
>523	ArrayIndexing	argv [ 1 ]
>524	PrimaryExpression	1
>525	Identifier	argv
>526	Callee	atoi
>527	Identifier	atoi
>528	Identifier	_nstages
>529	Identifier	_nstages
>530	IdentifierDeclType	int
>531	IfStatement	if ( argc != 6 )
>532	CompoundStatement	 
>533	ExpressionStatement	 
>534	CallExpression	exit ( 4711 )
>535	ArgumentList	4711
>536	Argument	4711
>537	PrimaryExpression	4711
>538	Callee	exit
>539	Identifier	exit
>540	ExpressionStatement	 
>541	ShiftExpression	std 
>542	PrimaryExpression	\"Expecting 4 arguments
>543	Identifier	std 
>544	Condition	 
>545	EqualityExpression	argc != 6
>546	PrimaryExpression	6
>547	Identifier	argc
>548	IdentifierDeclStatement	 
>549	IdentifierDecl	dc_init
>550	Identifier	dc_init
>551	IdentifierDeclType	CnC 
<3=12,11,4
<4=8,5
<5=7,6
<8=10,9
<12=195,182,135,126,35,15,13
<13=14
<15=16
<16=29,17
<17=20,18
<18=19
<20=21
<21=27,22
<22=25,23
<23=24
<25=26
<27=28
<29=30
<30=32,31
<32=34,33
<35=118,109,106,36
<36=50,49,48,47,46,45,37
<37=38
<38=40,39
<40=42,41
<42=44,43
<50=98,89,86,51
<51=67,52
<52=63,53
<53=54
<54=62,55
<55=61,56
<56=58,57
<58=60,59
<63=64
<64=66,65
<67=68
<68=85,69
<69=83,70
<70=71
<71=72
<72=78,73
<73=75,74
<75=77,76
<78=80,79
<80=82,81
<83=84
<86=88,87
<89=90
<90=97,91
<91=93,92
<93=94
<94=96,95
<98=99
<99=100
<100=105,104,101
<101=103,102
<106=108,107
<109=110
<110=117,111
<111=113,112
<113=114
<114=116,115
<118=119
<119=120
<120=125,124,121
<121=123,122
<126=127
<127=134,133,128
<128=132,129
<129=131,130
<135=178,160,136
<136=137
<137=138
<138=139
<139=154,140
<140=143,141
<141=142
<143=144
<144=152,145
<145=148,146
<146=147
<148=149
<149=151,150
<152=153
<154=155
<155=157,156
<157=159,158
<160=177,176,175,174,173,172,171,170,169,168,167,166,165,161
<161=162
<162=164,163
<178=179
<179=181,180
<182=183
<183=189,184
<184=187,185
<185=186
<187=188
<189=190
<190=192,191
<192=194,193
<195=199,196
<196=198,197
<199=201,200
<226=235,234,227
<227=231,228
<228=230,229
<231=233,232
<235=548,531,517,503,489,475,471,426,415,408,398,391,348,320,319,312,302,261,238,236
<236=237
<238=239
<239=260,240
<240=259,241
<241=258,242
<242=257,243
<243=256,244
<244=255,245
<245=247,246
<247=249,248
<249=250
<250=252,251
<252=254,253
<261=294,290,287,262
<262=283,263
<263=264
<264=277,265
<265=268,266
<266=267
<268=269
<269=275,270
<270=273,271
<271=272
<273=274
<275=276
<277=278
<278=280,279
<280=282,281
<283=284
<284=286,285
<287=289,288
<290=291
<291=293,292
<294=295
<295=296
<296=301,300,297
<297=299,298
<302=303
<303=311,310,304
<304=309,305
<305=307,306
<307=308
<312=313
<313=315,314
<315=316
<316=318,317
<320=340,336,333,321
<321=322
<322=323
<323=327,324
<324=325
<325=326
<327=328
<328=330,329
<330=332,331
<333=335,334
<336=337
<337=339,338
<340=341
<341=342
<342=347,346,343
<343=345,344
<348=383,379,376,349
<349=375,374,373,372,371,370,369,368,367,366,365,364,363,362,361,360,359,358,357,356,355,354,353,352,351,350
<376=378,377
<379=380
<380=382,381
<383=384
<384=385
<385=390,389,386
<386=388,387
<391=395,392
<392=394,393
<395=397,396
<398=399
<399=407,406,400
<400=405,401
<401=403,402
<403=404
<408=409
<409=413,410
<410=411
<411=412
<413=414
<415=416
<416=425,424,417
<417=423,418
<418=422,419
<419=421,420
<426=465,427
<427=464,460,459,458,454,453,452,448,447,445,435,428
<428=429
<429=433,430
<430=431
<431=432
<433=434
<435=436
<436=444,437
<437=443,438
<438=440,439
<440=442,441
<445=446
<448=449
<449=451,450
<454=455
<455=457,456
<460=461
<461=463,462
<465=466
<466=468,467
<468=470,469
<471=472
<472=474,473
<475=476
<476=488,487,477
<477=486,478
<478=484,479
<479=480
<480=481
<481=483,482
<484=485
<489=490
<490=502,501,491
<491=500,492
<492=498,493
<493=494
<494=495
<495=497,496
<498=499
<503=504
<504=516,515,505
<505=514,506
<506=512,507
<507=508
<508=509
<509=511,510
<512=513
<517=518
<518=530,529,519
<519=528,520
<520=526,521
<521=522
<522=523
<523=525,524
<526=527
<531=544,532
<532=540,533
<533=534
<534=538,535
<535=536
<536=537
<538=539
<540=541
<541=543,542
<544=545
<545=547,546
<548=549
<549=551,550
