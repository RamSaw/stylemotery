>3	FunctionDef	CatalogDatabase 
>4	ParameterList	 
>5	CompoundStatement	 
>9	FunctionDef	CatalogDatabase 
>10	ParameterList	 
>11	CompoundStatement	 
>15	FunctionDef	CatalogDatabase 
>16	ParameterList	Connection * c
>17	Parameter	 
>18	Identifier	c
>19	ParameterType	Connection *
>20	ReturnType	bool
>21	CompoundStatement	 
>22	ReturnStatement	 
>23	Identifier	rval
>24	IfStatement	if ( rval )
>25	CompoundStatement	 
>26	ExpressionStatement	 
>27	AssignmentExpr	rval = ( s != NULL ) && s -> execute ( )
>28	AndExpression	( s != NULL ) && s -> execute ( )
>29	CallExpression	s -> execute ( )
>30	ArgumentList	 
>31	Callee	s -> execute
>32	PtrMemberAccess	s -> execute
>33	Identifier	execute
>34	Identifier	s
>35	EqualityExpression	s != NULL
>36	Identifier	NULL
>37	Identifier	s
>38	Identifier	rval
>39	ExpressionStatement	 
>40	Statement	 
>41	Statement	 
>42	Statement	 
>43	Statement	 
>44	Statement	 
>45	Statement	 
>46	Statement	 
>47	Statement	 
>48	Statement	 
>49	Statement	 
>50	Statement	 
>51	Statement	 
>52	Statement	 
>53	Statement	 
>54	Statement	 
>55	Statement	 
>56	Statement	 
>57	Statement	 
>58	Condition	 
>59	Identifier	rval
>60	IfStatement	if ( rval )
>61	CompoundStatement	 
>62	ExpressionStatement	 
>63	AssignmentExpr	rval = ( s != NULL ) && s -> execute ( )
>64	AndExpression	( s != NULL ) && s -> execute ( )
>65	CallExpression	s -> execute ( )
>66	ArgumentList	 
>67	Callee	s -> execute
>68	PtrMemberAccess	s -> execute
>69	Identifier	execute
>70	Identifier	s
>71	EqualityExpression	s != NULL
>72	Identifier	NULL
>73	Identifier	s
>74	Identifier	rval
>75	ExpressionStatement	 
>76	Statement	 
>77	Statement	 
>78	Statement	 
>79	Statement	 
>80	Statement	 
>81	Statement	 
>82	Statement	 
>83	Statement	 
>84	Statement	 
>85	Statement	 
>86	Statement	 
>87	Statement	 
>88	Statement	 
>89	Statement	 
>90	Statement	 
>91	Statement	 
>92	Statement	 
>93	Statement	 
>94	Statement	 
>95	Condition	 
>96	Identifier	rval
>97	IfStatement	if ( rval )
>98	CompoundStatement	 
>99	ExpressionStatement	 
>100	AssignmentExpr	rval = ( s != NULL ) && s -> execute ( )
>101	AndExpression	( s != NULL ) && s -> execute ( )
>102	CallExpression	s -> execute ( )
>103	ArgumentList	 
>104	Callee	s -> execute
>105	PtrMemberAccess	s -> execute
>106	Identifier	execute
>107	Identifier	s
>108	EqualityExpression	s != NULL
>109	Identifier	NULL
>110	Identifier	s
>111	Identifier	rval
>112	ExpressionStatement	 
>113	Statement	 
>114	Statement	 
>115	Statement	 
>116	Statement	 
>117	Statement	 
>118	Statement	 
>119	Statement	 
>120	Statement	 
>121	Statement	 
>122	Statement	 
>123	Statement	 
>124	Statement	 
>125	Statement	 
>126	Statement	 
>127	Statement	 
>128	Statement	 
>129	Statement	 
>130	Statement	 
>131	Statement	 
>132	Condition	 
>133	Identifier	rval
>134	IfStatement	if ( rval )
>135	CompoundStatement	 
>136	ExpressionStatement	 
>137	AssignmentExpr	rval = ( s != NULL ) && s -> execute ( )
>138	AndExpression	( s != NULL ) && s -> execute ( )
>139	CallExpression	s -> execute ( )
>140	ArgumentList	 
>141	Callee	s -> execute
>142	PtrMemberAccess	s -> execute
>143	Identifier	execute
>144	Identifier	s
>145	EqualityExpression	s != NULL
>146	Identifier	NULL
>147	Identifier	s
>148	Identifier	rval
>149	ExpressionStatement	 
>150	Statement	 
>151	Statement	 
>152	Statement	 
>153	Statement	 
>154	Statement	 
>155	Statement	 
>156	Statement	 
>157	Statement	 
>158	Statement	 
>159	Statement	 
>160	Statement	 
>161	Statement	 
>162	Statement	 
>163	Statement	 
>164	Statement	 
>165	Statement	 
>166	Statement	 
>167	Statement	 
>168	Statement	 
>169	Statement	 
>170	Statement	 
>171	Statement	 
>172	Condition	 
>173	Identifier	rval
>174	IfStatement	if ( rval )
>175	CompoundStatement	 
>176	ExpressionStatement	 
>177	AssignmentExpr	rval = ( s != NULL ) && s -> execute ( )
>178	AndExpression	( s != NULL ) && s -> execute ( )
>179	CallExpression	s -> execute ( )
>180	ArgumentList	 
>181	Callee	s -> execute
>182	PtrMemberAccess	s -> execute
>183	Identifier	execute
>184	Identifier	s
>185	EqualityExpression	s != NULL
>186	Identifier	NULL
>187	Identifier	s
>188	Identifier	rval
>189	ExpressionStatement	 
>190	Statement	 
>191	Statement	 
>192	Statement	 
>193	Statement	 
>194	Statement	 
>195	Statement	 
>196	Statement	 
>197	Statement	 
>198	Statement	 
>199	Statement	 
>200	Statement	 
>201	Statement	 
>202	Statement	 
>203	Statement	 
>204	Statement	 
>205	Statement	 
>206	Statement	 
>207	Statement	 
>208	Statement	 
>209	Statement	 
>210	Statement	 
>211	Statement	 
>212	Statement	 
>213	Condition	 
>214	Identifier	rval
>215	IfStatement	if ( rval )
>216	CompoundStatement	 
>217	ExpressionStatement	 
>218	AssignmentExpr	rval = ( s != NULL ) && s -> execute ( )
>219	AndExpression	( s != NULL ) && s -> execute ( )
>220	CallExpression	s -> execute ( )
>221	ArgumentList	 
>222	Callee	s -> execute
>223	PtrMemberAccess	s -> execute
>224	Identifier	execute
>225	Identifier	s
>226	EqualityExpression	s != NULL
>227	Identifier	NULL
>228	Identifier	s
>229	Identifier	rval
>230	ExpressionStatement	 
>231	Statement	 
>232	Statement	 
>233	Statement	 
>234	Statement	 
>235	Statement	 
>236	Statement	 
>237	Statement	 
>238	Statement	 
>239	Statement	 
>240	Statement	 
>241	Statement	 
>242	Statement	 
>243	Statement	 
>244	Statement	 
>245	Statement	 
>246	Statement	 
>247	Statement	 
>248	Statement	 
>249	Statement	 
>250	Statement	 
>251	Statement	 
>252	Statement	 
>253	Statement	 
>254	Statement	 
>255	Condition	 
>256	Identifier	rval
>257	IfStatement	if ( rval )
>258	CompoundStatement	 
>259	ExpressionStatement	 
>260	AssignmentExpr	rval = ( s != NULL ) && s -> execute ( )
>261	AndExpression	( s != NULL ) && s -> execute ( )
>262	CallExpression	s -> execute ( )
>263	ArgumentList	 
>264	Callee	s -> execute
>265	PtrMemberAccess	s -> execute
>266	Identifier	execute
>267	Identifier	s
>268	EqualityExpression	s != NULL
>269	Identifier	NULL
>270	Identifier	s
>271	Identifier	rval
>272	ExpressionStatement	 
>273	Statement	 
>274	Statement	 
>275	Statement	 
>276	Statement	 
>277	Statement	 
>278	Statement	 
>279	Statement	 
>280	Statement	 
>281	Statement	 
>282	Statement	 
>283	Statement	 
>284	Statement	 
>285	Statement	 
>286	Statement	 
>287	Statement	 
>288	Statement	 
>289	Statement	 
>290	Statement	 
>291	Condition	 
>292	Identifier	rval
>293	IfStatement	if ( rval )
>294	CompoundStatement	 
>295	ExpressionStatement	 
>296	AssignmentExpr	rval = ( s != NULL ) && s -> execute ( )
>297	AndExpression	( s != NULL ) && s -> execute ( )
>298	CallExpression	s -> execute ( )
>299	ArgumentList	 
>300	Callee	s -> execute
>301	PtrMemberAccess	s -> execute
>302	Identifier	execute
>303	Identifier	s
>304	EqualityExpression	s != NULL
>305	Identifier	NULL
>306	Identifier	s
>307	Identifier	rval
>308	ExpressionStatement	 
>309	Statement	 
>310	Statement	 
>311	Statement	 
>312	Statement	 
>313	Statement	 
>314	Statement	 
>315	Statement	 
>316	Statement	 
>317	Statement	 
>318	Statement	 
>319	Statement	 
>320	Statement	 
>321	Statement	 
>322	Statement	 
>323	Condition	 
>324	Identifier	rval
>325	IfStatement	if ( rval )
>326	CompoundStatement	 
>327	IfStatement	if ( rval )
>328	CompoundStatement	 
>329	ExpressionStatement	 
>330	AssignmentExpr	rval = s -> setText ( \"
>331	AndExpression	s -> setText ( \"
>332	AndExpression	s -> setText ( \"
>333	AndExpression	s -> execute ( ) && s -> setText ( \"
>334	AndExpression	s -> setText ( \"
>335	AndExpression	s -> setText ( \"
>336	AndExpression	s -> execute ( ) && s -> setText ( \"
>337	AndExpression	s -> setText ( \"
>338	AndExpression	s -> setText ( \"
>339	AndExpression	s -> execute ( ) && s -> setText ( \"
>340	AndExpression	s -> setText ( \"
>341	AndExpression	s -> setText ( \"
>342	CallExpression	s -> execute ( )
>343	ArgumentList	 
>344	Callee	s -> execute
>345	PtrMemberAccess	s -> execute
>346	Identifier	execute
>347	Identifier	s
>348	CallExpression	s -> setText ( \"
>349	ArgumentList	\"
>350	Argument	\"0\"
>351	PrimaryExpression	\"0\"
>352	Argument	\"
>353	PrimaryExpression	\"
>354	Callee	s -> setText
>355	PtrMemberAccess	s -> setText
>356	Identifier	setText
>357	Identifier	s
>358	CallExpression	s -> setText ( \"
>359	ArgumentList	\"
>360	Argument	\"updateId\"
>361	PrimaryExpression	\"updateId\"
>362	Argument	\"
>363	PrimaryExpression	\"
>364	Callee	s -> setText
>365	PtrMemberAccess	s -> setText
>366	Identifier	setText
>367	Identifier	s
>368	CallExpression	s -> execute ( )
>369	ArgumentList	 
>370	Callee	s -> execute
>371	PtrMemberAccess	s -> execute
>372	Identifier	execute
>373	Identifier	s
>374	CallExpression	s -> setText ( \"
>375	ArgumentList	\"
>376	Argument	\"\"
>377	PrimaryExpression	\"\"
>378	Argument	\"
>379	PrimaryExpression	\"
>380	Callee	s -> setText
>381	PtrMemberAccess	s -> setText
>382	Identifier	setText
>383	Identifier	s
>384	CallExpression	s -> setText ( \"
>385	ArgumentList	\"
>386	Argument	\"serverUrl\"
>387	PrimaryExpression	\"serverUrl\"
>388	Argument	\"
>389	PrimaryExpression	\"
>390	Callee	s -> setText
>391	PtrMemberAccess	s -> setText
>392	Identifier	setText
>393	Identifier	s
>394	CallExpression	s -> execute ( )
>395	ArgumentList	 
>396	Callee	s -> execute
>397	PtrMemberAccess	s -> execute
>398	Identifier	execute
>399	Identifier	s
>400	CallExpression	s -> setText ( \"
>401	ArgumentList	\"
>402	Argument	\"0\"
>403	PrimaryExpression	\"0\"
>404	Argument	\"
>405	PrimaryExpression	\"
>406	Callee	s -> setText
>407	PtrMemberAccess	s -> setText
>408	Identifier	setText
>409	Identifier	s
>410	CallExpression	s -> setText ( \"
>411	ArgumentList	\"
>412	Argument	\"serverToken\"
>413	PrimaryExpression	\"serverToken\"
>414	Argument	\"
>415	PrimaryExpression	\"
>416	Callee	s -> setText
>417	PtrMemberAccess	s -> setText
>418	Identifier	setText
>419	Identifier	s
>420	CallExpression	s -> execute ( )
>421	ArgumentList	 
>422	Callee	s -> execute
>423	PtrMemberAccess	s -> execute
>424	Identifier	execute
>425	Identifier	s
>426	CallExpression	s -> setText ( \"
>427	ArgumentList	\"
>428	Argument	\"0\"
>429	PrimaryExpression	\"0\"
>430	Argument	\"
>431	PrimaryExpression	\"
>432	Callee	s -> setText
>433	PtrMemberAccess	s -> setText
>434	Identifier	setText
>435	Identifier	s
>436	CallExpression	s -> setText ( \"
>437	ArgumentList	\"
>438	Argument	\"serverId\"
>439	PrimaryExpression	\"serverId\"
>440	Argument	\"
>441	PrimaryExpression	\"
>442	Callee	s -> setText
>443	PtrMemberAccess	s -> setText
>444	Identifier	setText
>445	Identifier	s
>446	Identifier	rval
>447	Condition	 
>448	Identifier	rval
>449	ExpressionStatement	 
>450	AssignmentExpr	rval = ( s != NULL )
>451	EqualityExpression	s != NULL
>452	Identifier	NULL
>453	Identifier	s
>454	Identifier	rval
>455	ExpressionStatement	 
>456	Statement	 
>457	Statement	 
>458	Statement	 
>459	Statement	 
>460	Statement	 
>461	Statement	 
>462	Statement	 
>463	Statement	 
>464	Statement	 
>465	Statement	 
>466	Statement	 
>467	Statement	 
>468	Statement	 
>469	Condition	 
>470	Identifier	rval
>471	IfStatement	if ( rval )
>472	CompoundStatement	 
>473	ExpressionStatement	 
>474	AssignmentExpr	rval = ( s != NULL ) && s -> execute ( )
>475	AndExpression	( s != NULL ) && s -> execute ( )
>476	CallExpression	s -> execute ( )
>477	ArgumentList	 
>478	Callee	s -> execute
>479	PtrMemberAccess	s -> execute
>480	Identifier	execute
>481	Identifier	s
>482	EqualityExpression	s != NULL
>483	Identifier	NULL
>484	Identifier	s
>485	Identifier	rval
>486	ExpressionStatement	 
>487	Statement	 
>488	Statement	 
>489	Statement	 
>490	Statement	 
>491	Statement	 
>492	Statement	 
>493	Statement	 
>494	Statement	 
>495	Statement	 
>496	Statement	 
>497	Statement	 
>498	Statement	 
>499	Statement	 
>500	Statement	 
>501	Condition	 
>502	Identifier	rval
>503	IdentifierDeclStatement	 
>504	IdentifierDecl	rval = true
>505	AssignmentExpr	rval = true
>506	Identifier	true
>507	Identifier	true
>508	Identifier	rval
>509	IdentifierDeclType	bool
>521	FunctionDef	CatalogDatabase 
>522	ParameterList	UserId userId , const char * name , const char * value , Connection * c
>523	Parameter	 
>524	Identifier	c
>525	ParameterType	Connection *
>526	Parameter	 
>527	Identifier	value
>528	ParameterType	const char *
>529	Parameter	 
>530	Identifier	name
>531	ParameterType	const char *
>532	Parameter	 
>533	Identifier	userId
>534	ParameterType	UserId
>535	ReturnType	bool
>536	CompoundStatement	 
>537	ReturnStatement	 
>538	Identifier	rval
>539	ExpressionStatement	 
>540	AssignmentExpr	rval = ( s != NULL ) && s -> setText ( \"
>541	AndExpression	( s != NULL ) && s -> setText ( \"
>542	AndExpression	s -> setText ( \"
>543	AndExpression	s -> setText ( \"
>544	AndExpression	s -> execute ( ) && s -> reset ( )
>545	CallExpression	s -> reset ( )
>546	ArgumentList	 
>547	Callee	s -> reset
>548	PtrMemberAccess	s -> reset
>549	Identifier	reset
>550	Identifier	s
>551	CallExpression	s -> execute ( )
>552	ArgumentList	 
>553	Callee	s -> execute
>554	PtrMemberAccess	s -> execute
>555	Identifier	execute
>556	Identifier	s
>557	CallExpression	s -> setText ( \"
>558	ArgumentList	\"
>559	Argument	value
>560	Identifier	value
>561	Argument	\"
>562	PrimaryExpression	\"
>563	Callee	s -> setText
>564	PtrMemberAccess	s -> setText
>565	Identifier	setText
>566	Identifier	s
>567	CallExpression	s -> setText ( \"
>568	ArgumentList	\"
>569	Argument	name
>570	Identifier	name
>571	Argument	\"
>572	PrimaryExpression	\"
>573	Callee	s -> setText
>574	PtrMemberAccess	s -> setText
>575	Identifier	setText
>576	Identifier	s
>577	EqualityExpression	s != NULL
>578	Identifier	NULL
>579	Identifier	s
>580	Identifier	rval
>581	ExpressionStatement	 
>582	Statement	 
>583	Statement	 
>584	Statement	 
>585	Statement	 
>586	Statement	 
>587	Statement	 
>588	Statement	 
>589	Statement	 
>590	Statement	 
>591	Statement	 
>592	Statement	 
>593	Statement	 
>594	ExpressionStatement	 
>595	Statement	 
>596	Statement	 
>597	Statement	 
>598	Statement	 
>599	Statement	 
>600	Statement	 
>601	Statement	 
>602	Statement	 
>603	Statement	 
>604	Statement	 
>605	Statement	 
>606	Statement	 
>607	Statement	 
>608	IdentifierDeclStatement	 
>609	IdentifierDecl	rval
>610	Identifier	rval
>611	IdentifierDeclType	bool
>626	FunctionDef	CatalogDatabase 
>627	ParameterList	const char * name , string & value , Connection * c
>628	Parameter	 
>629	Identifier	c
>630	ParameterType	Connection *
>631	Parameter	 
>632	Identifier	value
>633	ParameterType	string &
>634	Parameter	 
>635	Identifier	name
>636	ParameterType	const char *
>637	ReturnType	bool
>638	CompoundStatement	 
>639	ReturnStatement	 
>640	Identifier	rval
>641	IfStatement	if ( rval )
>642	CompoundStatement	 
>643	IfStatement	if ( row == NULL )
>644	ElseStatement	else
>645	CompoundStatement	 
>646	ExpressionStatement	 
>647	CallExpression	s -> fetch ( )
>648	ArgumentList	 
>649	Callee	s -> fetch
>650	PtrMemberAccess	s -> fetch
>651	Identifier	fetch
>652	Identifier	s
>653	ExpressionStatement	 
>654	CallExpression	row -> getText ( \"value\" , value )
>655	ArgumentList	\"value\"
>656	Argument	value
>657	Identifier	value
>658	Argument	\"value\"
>659	PrimaryExpression	\"value\"
>660	Callee	row -> getText
>661	PtrMemberAccess	row -> getText
>662	Identifier	getText
>663	Identifier	row
>664	CompoundStatement	 
>665	ExpressionStatement	 
>666	AssignmentExpr	rval = false
>667	Identifier	false
>668	Identifier	rval
>669	Condition	 
>670	EqualityExpression	row == NULL
>671	Identifier	NULL
>672	Identifier	row
>673	IdentifierDeclStatement	 
>674	IdentifierDecl	* row = s -> fetch ( )
>675	AssignmentExpr	* row = s -> fetch ( )
>676	CallExpression	s -> fetch ( )
>677	ArgumentList	 
>678	Callee	s -> fetch
>679	PtrMemberAccess	s -> fetch
>680	Identifier	fetch
>681	Identifier	s
>682	Identifier	row
>683	Identifier	row
>684	IdentifierDeclType	Row *
>685	Condition	 
>686	Identifier	rval
>687	ExpressionStatement	 
>688	AssignmentExpr	rval = ( s != NULL ) && s -> setText ( \"
>689	AndExpression	( s != NULL ) && s -> setText ( \"
>690	AndExpression	s -> setText ( \"
>691	CallExpression	s -> execute ( )
>692	ArgumentList	 
>693	Callee	s -> execute
>694	PtrMemberAccess	s -> execute
>695	Identifier	execute
>696	Identifier	s
>697	CallExpression	s -> setText ( \"
>698	ArgumentList	\"
>699	Argument	name
>700	Identifier	name
>701	Argument	\"
>702	PrimaryExpression	\"
>703	Callee	s -> setText
>704	PtrMemberAccess	s -> setText
>705	Identifier	setText
>706	Identifier	s
>707	EqualityExpression	s != NULL
>708	Identifier	NULL
>709	Identifier	s
>710	Identifier	rval
>711	ExpressionStatement	 
>712	Statement	 
>713	Statement	 
>714	Statement	 
>715	Statement	 
>716	Statement	 
>717	Statement	 
>718	Statement	 
>719	Statement	 
>720	Statement	 
>721	Statement	 
>722	Statement	 
>723	Statement	 
>724	IdentifierDeclStatement	 
>725	IdentifierDecl	rval
>726	Identifier	rval
>727	IdentifierDeclType	bool
>743	FunctionDef	CatalogDatabase 
>744	ParameterList	const char * name , uint32_t & value , Connection * c
>745	Parameter	 
>746	Identifier	c
>747	ParameterType	Connection *
>748	Parameter	 
>749	Identifier	value
>750	ParameterType	uint32_t &
>751	Parameter	 
>752	Identifier	name
>753	ParameterType	const char *
>754	ReturnType	bool
>755	CompoundStatement	 
>756	ReturnStatement	 
>757	Identifier	rval
>758	IfStatement	if ( rval )
>759	CompoundStatement	 
>760	IfStatement	if ( row == NULL )
>761	ElseStatement	else
>762	CompoundStatement	 
>763	ExpressionStatement	 
>764	CallExpression	s -> fetch ( )
>765	ArgumentList	 
>766	Callee	s -> fetch
>767	PtrMemberAccess	s -> fetch
>768	Identifier	fetch
>769	Identifier	s
>770	ExpressionStatement	 
>771	CallExpression	row -> getUInt32 ( \"value\" , value )
>772	ArgumentList	\"value\"
>773	Argument	value
>774	Identifier	value
>775	Argument	\"value\"
>776	PrimaryExpression	\"value\"
>777	Callee	row -> getUInt32
>778	PtrMemberAccess	row -> getUInt32
>779	Identifier	getUInt32
>780	Identifier	row
>781	CompoundStatement	 
>782	ExpressionStatement	 
>783	AssignmentExpr	rval = false
>784	Identifier	false
>785	Identifier	rval
>786	Condition	 
>787	EqualityExpression	row == NULL
>788	Identifier	NULL
>789	Identifier	row
>790	IdentifierDeclStatement	 
>791	IdentifierDecl	* row = s -> fetch ( )
>792	AssignmentExpr	* row = s -> fetch ( )
>793	CallExpression	s -> fetch ( )
>794	ArgumentList	 
>795	Callee	s -> fetch
>796	PtrMemberAccess	s -> fetch
>797	Identifier	fetch
>798	Identifier	s
>799	Identifier	row
>800	Identifier	row
>801	IdentifierDeclType	Row *
>802	Condition	 
>803	Identifier	rval
>804	ExpressionStatement	 
>805	AssignmentExpr	rval = ( s != NULL ) && s -> setText ( \"
>806	AndExpression	( s != NULL ) && s -> setText ( \"
>807	AndExpression	s -> setText ( \"
>808	CallExpression	s -> execute ( )
>809	ArgumentList	 
>810	Callee	s -> execute
>811	PtrMemberAccess	s -> execute
>812	Identifier	execute
>813	Identifier	s
>814	CallExpression	s -> setText ( \"
>815	ArgumentList	\"
>816	Argument	name
>817	Identifier	name
>818	Argument	\"
>819	PrimaryExpression	\"
>820	Callee	s -> setText
>821	PtrMemberAccess	s -> setText
>822	Identifier	setText
>823	Identifier	s
>824	EqualityExpression	s != NULL
>825	Identifier	NULL
>826	Identifier	s
>827	Identifier	rval
>828	ExpressionStatement	 
>829	Statement	 
>830	Statement	 
>831	Statement	 
>832	Statement	 
>833	Statement	 
>834	Statement	 
>835	Statement	 
>836	Statement	 
>837	Statement	 
>838	Statement	 
>839	Statement	 
>840	Statement	 
>841	IdentifierDeclStatement	 
>842	IdentifierDecl	rval
>843	Identifier	rval
>844	IdentifierDeclType	bool
>860	FunctionDef	CatalogDatabase 
>861	ParameterList	const char * tableName , bool dirty , bool updating , Connection * c
>862	Parameter	 
>863	Identifier	c
>864	ParameterType	Connection *
>865	Parameter	 
>866	Identifier	updating
>867	ParameterType	bool
>868	Parameter	 
>869	Identifier	dirty
>870	ParameterType	bool
>871	Parameter	 
>872	Identifier	tableName
>873	ParameterType	const char *
>874	ReturnType	bool
>875	CompoundStatement	 
>876	ReturnStatement	 
>877	Identifier	rval
>878	ExpressionStatement	 
>879	AssignmentExpr	rval = ( s != NULL ) && s -> setUInt32 ( \"
>880	AndExpression	( s != NULL ) && s -> setUInt32 ( \"
>881	AndExpression	s -> setUInt32 ( \"
>882	AndExpression	s -> setUInt32 ( \"
>883	CallExpression	s -> execute ( )
>884	ArgumentList	 
>885	Callee	s -> execute
>886	PtrMemberAccess	s -> execute
>887	Identifier	execute
>888	Identifier	s
>889	CallExpression	s -> setUInt32 ( \"
>890	ArgumentList	\"
>891	Argument	updating
>892	Identifier	updating
>893	Argument	\"
>894	PrimaryExpression	\"
>895	Callee	s -> setUInt32
>896	PtrMemberAccess	s -> setUInt32
>897	Identifier	setUInt32
>898	Identifier	s
>899	CallExpression	s -> setUInt32 ( \"
>900	ArgumentList	\"
>901	Argument	dirty
>902	Identifier	dirty
>903	Argument	\"
>904	PrimaryExpression	\"
>905	Callee	s -> setUInt32
>906	PtrMemberAccess	s -> setUInt32
>907	Identifier	setUInt32
>908	Identifier	s
>909	EqualityExpression	s != NULL
>910	Identifier	NULL
>911	Identifier	s
>912	Identifier	rval
>913	IdentifierDeclStatement	 
>914	IdentifierDecl	* s = c -> prepare ( query . c_str ( ) )
>915	AssignmentExpr	* s = c -> prepare ( query . c_str ( ) )
>916	CallExpression	c -> prepare ( query . c_str ( ) )
>917	ArgumentList	query . c_str ( )
>918	Argument	query . c_str ( )
>919	CallExpression	query . c_str ( )
>920	ArgumentList	 
>921	Callee	query . c_str
>922	MemberAccess	query . c_str
>923	Identifier	c_str
>924	Identifier	query
>925	Callee	c -> prepare
>926	PtrMemberAccess	c -> prepare
>927	Identifier	prepare
>928	Identifier	c
>929	Identifier	s
>930	Identifier	s
>931	IdentifierDeclType	Statement *
>932	ExpressionStatement	 
>933	CallExpression	query . append ( \" SET dirty=
>934	ArgumentList	\" SET dirty=
>935	Argument	\" SET dirty=
>936	PrimaryExpression	\" SET dirty=
>937	Callee	query . append
>938	MemberAccess	query . append
>939	Identifier	append
>940	Identifier	query
>941	ExpressionStatement	 
>942	CallExpression	query . append ( tableName )
>943	ArgumentList	tableName
>944	Argument	tableName
>945	Identifier	tableName
>946	Callee	query . append
>947	MemberAccess	query . append
>948	Identifier	append
>949	Identifier	query
>950	IdentifierDeclStatement	 
>951	IdentifierDecl	query = \"UPDATE \"
>952	AssignmentExpr	query = \"UPDATE \"
>953	PrimaryExpression	\"UPDATE \"
>954	Identifier	query
>955	Identifier	query
>956	IdentifierDeclType	string
>957	IdentifierDeclStatement	 
>958	IdentifierDecl	rval = false
>959	AssignmentExpr	rval = false
>960	Identifier	false
>961	Identifier	false
>962	Identifier	rval
>963	IdentifierDeclType	bool
>982	FunctionDef	CatalogDatabase 
>983	ParameterList	const char * tableName , Connection * c
>984	Parameter	 
>985	Identifier	c
>986	ParameterType	Connection *
>987	Parameter	 
>988	Identifier	tableName
>989	ParameterType	const char *
>990	ReturnType	bool
>991	CompoundStatement	 
>992	ReturnStatement	 
>993	Identifier	rval
>994	ExpressionStatement	 
>995	AssignmentExpr	rval = ( s != NULL ) && s -> execute ( )
>996	AndExpression	( s != NULL ) && s -> execute ( )
>997	CallExpression	s -> execute ( )
>998	ArgumentList	 
>999	Callee	s -> execute
>1000	PtrMemberAccess	s -> execute
>1001	Identifier	execute
>1002	Identifier	s
>1003	EqualityExpression	s != NULL
>1004	Identifier	NULL
>1005	Identifier	s
>1006	Identifier	rval
>1007	IdentifierDeclStatement	 
>1008	IdentifierDecl	* s = c -> prepare ( query . c_str ( ) )
>1009	AssignmentExpr	* s = c -> prepare ( query . c_str ( ) )
>1010	CallExpression	c -> prepare ( query . c_str ( ) )
>1011	ArgumentList	query . c_str ( )
>1012	Argument	query . c_str ( )
>1013	CallExpression	query . c_str ( )
>1014	ArgumentList	 
>1015	Callee	query . c_str
>1016	MemberAccess	query . c_str
>1017	Identifier	c_str
>1018	Identifier	query
>1019	Callee	c -> prepare
>1020	PtrMemberAccess	c -> prepare
>1021	Identifier	prepare
>1022	Identifier	c
>1023	Identifier	s
>1024	Identifier	s
>1025	IdentifierDeclType	Statement *
>1026	ExpressionStatement	 
>1027	CallExpression	query . append ( \" WHERE updating=1 AND deleted=1 AND dirty=0 AND problem_id=0\" )
>1028	ArgumentList	\" WHERE updating=1 AND deleted=1 AND dirty=0 AND problem_id=0\"
>1029	Argument	\" WHERE updating=1 AND deleted=1 AND dirty=0 AND problem_id=0\"
>1030	PrimaryExpression	\" WHERE updating=1 AND deleted=1 AND dirty=0 AND problem_id=0\"
>1031	Callee	query . append
>1032	MemberAccess	query . append
>1033	Identifier	append
>1034	Identifier	query
>1035	ExpressionStatement	 
>1036	CallExpression	query . append ( tableName )
>1037	ArgumentList	tableName
>1038	Argument	tableName
>1039	Identifier	tableName
>1040	Callee	query . append
>1041	MemberAccess	query . append
>1042	Identifier	append
>1043	Identifier	query
>1044	IdentifierDeclStatement	 
>1045	IdentifierDecl	query = \"DELETE FROM \"
>1046	AssignmentExpr	query = \"DELETE FROM \"
>1047	PrimaryExpression	\"DELETE FROM \"
>1048	Identifier	query
>1049	Identifier	query
>1050	IdentifierDeclType	string
>1051	IdentifierDeclStatement	 
>1052	IdentifierDecl	rval = false
>1053	AssignmentExpr	rval = false
>1054	Identifier	false
>1055	Identifier	false
>1056	Identifier	rval
>1057	IdentifierDeclType	bool
>1073	FunctionDef	CatalogDatabase 
>1074	ParameterList	const char * tableName , Connection * c
>1075	Parameter	 
>1076	Identifier	c
>1077	ParameterType	Connection *
>1078	Parameter	 
>1079	Identifier	tableName
>1080	ParameterType	const char *
>1081	ReturnType	bool
>1082	CompoundStatement	 
>1083	ReturnStatement	 
>1084	Identifier	rval
>1085	ExpressionStatement	 
>1086	AssignmentExpr	rval = ( s != NULL ) && s -> execute ( )
>1087	AndExpression	( s != NULL ) && s -> execute ( )
>1088	CallExpression	s -> execute ( )
>1089	ArgumentList	 
>1090	Callee	s -> execute
>1091	PtrMemberAccess	s -> execute
>1092	Identifier	execute
>1093	Identifier	s
>1094	EqualityExpression	s != NULL
>1095	Identifier	NULL
>1096	Identifier	s
>1097	Identifier	rval
>1098	IdentifierDeclStatement	 
>1099	IdentifierDecl	* s = c -> prepare ( query . c_str ( ) )
>1100	AssignmentExpr	* s = c -> prepare ( query . c_str ( ) )
>1101	CallExpression	c -> prepare ( query . c_str ( ) )
>1102	ArgumentList	query . c_str ( )
>1103	Argument	query . c_str ( )
>1104	CallExpression	query . c_str ( )
>1105	ArgumentList	 
>1106	Callee	query . c_str
>1107	MemberAccess	query . c_str
>1108	Identifier	c_str
>1109	Identifier	query
>1110	Callee	c -> prepare
>1111	PtrMemberAccess	c -> prepare
>1112	Identifier	prepare
>1113	Identifier	c
>1114	Identifier	s
>1115	Identifier	s
>1116	IdentifierDeclType	Statement *
>1117	ExpressionStatement	 
>1118	CallExpression	query . append ( \" SET updating=0 WHERE updating=1\" )
>1119	ArgumentList	\" SET updating=0 WHERE updating=1\"
>1120	Argument	\" SET updating=0 WHERE updating=1\"
>1121	PrimaryExpression	\" SET updating=0 WHERE updating=1\"
>1122	Callee	query . append
>1123	MemberAccess	query . append
>1124	Identifier	append
>1125	Identifier	query
>1126	ExpressionStatement	 
>1127	CallExpression	query . append ( tableName )
>1128	ArgumentList	tableName
>1129	Argument	tableName
>1130	Identifier	tableName
>1131	Callee	query . append
>1132	MemberAccess	query . append
>1133	Identifier	append
>1134	Identifier	query
>1135	IdentifierDeclStatement	 
>1136	IdentifierDecl	query = \"UPDATE \"
>1137	AssignmentExpr	query = \"UPDATE \"
>1138	PrimaryExpression	\"UPDATE \"
>1139	Identifier	query
>1140	Identifier	query
>1141	IdentifierDeclType	string
>1142	IdentifierDeclStatement	 
>1143	IdentifierDecl	rval = false
>1144	AssignmentExpr	rval = false
>1145	Identifier	false
>1146	Identifier	false
>1147	Identifier	rval
>1148	IdentifierDeclType	bool
>1164	FunctionDef	CatalogDatabase 
>1165	ParameterList	UserId userId , Seller & seller , string & serverToken , Connection * c
>1166	Parameter	 
>1167	Identifier	c
>1168	ParameterType	Connection *
>1169	Parameter	 
>1170	Identifier	serverToken
>1171	ParameterType	string &
>1172	Parameter	 
>1173	Identifier	seller
>1174	ParameterType	Seller &
>1175	Parameter	 
>1176	Identifier	userId
>1177	ParameterType	UserId
>1178	ReturnType	bool
>1179	CompoundStatement	 
>1180	ReturnStatement	 
>1181	Identifier	rval
>1182	IfStatement	if ( rval )
>1183	CompoundStatement	 
>1184	ExpressionStatement	 
>1185	AssignmentExpr	seller [ \"url\" ] = serverUrl . c_str ( )
>1186	CallExpression	serverUrl . c_str ( )
>1187	ArgumentList	 
>1188	Callee	serverUrl . c_str
>1189	MemberAccess	serverUrl . c_str
>1190	Identifier	c_str
>1191	Identifier	serverUrl
>1192	ArrayIndexing	seller [ \"url\" ]
>1193	PrimaryExpression	\"url\"
>1194	Identifier	seller
>1195	ExpressionStatement	 
>1196	AssignmentExpr	seller [ \"serverId\" ] = serverId
>1197	Identifier	serverId
>1198	ArrayIndexing	seller [ \"serverId\" ]
>1199	PrimaryExpression	\"serverId\"
>1200	Identifier	seller
>1201	ExpressionStatement	 
>1202	AssignmentExpr	seller [ \"userId\" ] = userId
>1203	Identifier	userId
>1204	ArrayIndexing	seller [ \"userId\" ]
>1205	PrimaryExpression	\"userId\"
>1206	Identifier	seller
>1207	Condition	 
>1208	Identifier	rval
>1209	ExpressionStatement	 
>1210	AssignmentExpr	rval = getConfigValue ( \"serverId\" , serverId , c ) && getConfigValue ( \"serverUrl\" , serverUrl , c ) && \
>1211	AndExpression	getConfigValue ( \"serverId\" , serverId , c ) && getConfigValue ( \"serverUrl\" , serverUrl , c ) && getConfigValue ( \"\
>1212	AndExpression	getConfigValue ( \"serverUrl\" , serverUrl , c ) && getConfigValue ( \"serverToken\" , serverToken , c )
>1213	CallExpression	getConfigValue ( \"serverToken\" , serverToken , c )
>1214	ArgumentList	\"serverToken\"
>1215	Argument	c
>1216	Identifier	c
>1217	Argument	serverToken
>1218	Identifier	serverToken
>1219	Argument	\"serverToken\"
>1220	PrimaryExpression	\"serverToken\"
>1221	Callee	getConfigValue
>1222	Identifier	getConfigValue
>1223	CallExpression	getConfigValue ( \"serverUrl\" , serverUrl , c )
>1224	ArgumentList	\"serverUrl\"
>1225	Argument	c
>1226	Identifier	c
>1227	Argument	serverUrl
>1228	Identifier	serverUrl
>1229	Argument	\"serverUrl\"
>1230	PrimaryExpression	\"serverUrl\"
>1231	Callee	getConfigValue
>1232	Identifier	getConfigValue
>1233	CallExpression	getConfigValue ( \"serverId\" , serverId , c )
>1234	ArgumentList	\"serverId\"
>1235	Argument	c
>1236	Identifier	c
>1237	Argument	serverId
>1238	Identifier	serverId
>1239	Argument	\"serverId\"
>1240	PrimaryExpression	\"serverId\"
>1241	Callee	getConfigValue
>1242	Identifier	getConfigValue
>1243	Identifier	rval
>1244	IdentifierDeclStatement	 
>1245	IdentifierDecl	serverUrl
>1246	Identifier	serverUrl
>1247	IdentifierDeclType	string
>1248	IdentifierDeclStatement	 
>1249	IdentifierDecl	serverId
>1250	Identifier	serverId
>1251	IdentifierDeclType	ServerId
>1252	IdentifierDeclStatement	 
>1253	IdentifierDecl	rval = false
>1254	AssignmentExpr	rval = false
>1255	Identifier	false
>1256	Identifier	false
>1257	Identifier	rval
>1258	IdentifierDeclType	bool
>1273	FunctionDef	CatalogDatabase 
>1274	ParameterList	PayeeSchemeId psId , Connection * c
>1275	Parameter	 
>1276	Identifier	c
>1277	ParameterType	Connection *
>1278	Parameter	 
>1279	Identifier	psId
>1280	ParameterType	PayeeSchemeId
>1281	ReturnType	bool
>1282	CompoundStatement	 
>1283	ReturnStatement	 
>1284	Identifier	rval
>1285	IfStatement	if ( rval )
>1286	CompoundStatement	 
>1287	IfStatement	if ( row == NULL )
>1288	ElseStatement	else
>1289	CompoundStatement	 
>1290	ExpressionStatement	 
>1291	CallExpression	s -> fetch ( )
>1292	ArgumentList	 
>1293	Callee	s -> fetch
>1294	PtrMemberAccess	s -> fetch
>1295	Identifier	fetch
>1296	Identifier	s
>1297	CompoundStatement	 
>1298	ExpressionStatement	 
>1299	CallExpression	Exception 
>1300	ArgumentList	e
>1301	Argument	e
>1302	Identifier	e
>1303	Callee	Exception 
>1304	Identifier	Exception 
>1305	ExpressionStatement	 
>1306	AssignmentExpr	e -> getDetails ( ) [ \"payeeSchemeId\" ] = psId
>1307	Identifier	psId
>1308	ArrayIndexing	e -> getDetails ( ) [ \"payeeSchemeId\" ]
>1309	PrimaryExpression	\"payeeSchemeId\"
>1310	CallExpression	e -> getDetails ( )
>1311	ArgumentList	 
>1312	Callee	e -> getDetails
>1313	PtrMemberAccess	e -> getDetails
>1314	Identifier	getDetails
>1315	Identifier	e
>1316	IdentifierDeclStatement	 
>1317	IdentifierDecl	e = new Exception ( \"Payee scheme not found.\" , \"bitmunk.catalog.InvalidPayeeSchemeId\" )
>1318	AssignmentExpr	e = new Exception ( \"Payee scheme not found.\" , \"bitmunk.catalog.InvalidPayeeSchemeId\" )
>1319	Expression	\"Payee scheme not found.\" , \"bitmunk.catalog.InvalidPayeeSchemeId\"
>1320	PrimaryExpression	\"bitmunk.catalog.InvalidPayeeSchemeId\"
>1321	PrimaryExpression	\"Payee scheme not found.\"
>1322	Identifier	e
>1323	Identifier	e
>1324	IdentifierDeclType	ExceptionRef
>1325	ExpressionStatement	 
>1326	AssignmentExpr	rval = false
>1327	Identifier	false
>1328	Identifier	rval
>1329	Condition	 
>1330	EqualityExpression	row == NULL
>1331	Identifier	NULL
>1332	Identifier	row
>1333	IdentifierDeclStatement	 
>1334	IdentifierDecl	* row = s -> fetch ( )
>1335	AssignmentExpr	* row = s -> fetch ( )
>1336	CallExpression	s -> fetch ( )
>1337	ArgumentList	 
>1338	Callee	s -> fetch
>1339	PtrMemberAccess	s -> fetch
>1340	Identifier	fetch
>1341	Identifier	s
>1342	Identifier	row
>1343	Identifier	row
>1344	IdentifierDeclType	Row *
>1345	Condition	 
>1346	Identifier	rval
>1347	ExpressionStatement	 
>1348	AssignmentExpr	rval = ( s != NULL ) && s -> setUInt32 ( \"
>1349	AndExpression	( s != NULL ) && s -> setUInt32 ( \"
>1350	AndExpression	s -> setUInt32 ( \"
>1351	CallExpression	s -> execute ( )
>1352	ArgumentList	 
>1353	Callee	s -> execute
>1354	PtrMemberAccess	s -> execute
>1355	Identifier	execute
>1356	Identifier	s
>1357	CallExpression	s -> setUInt32 ( \"
>1358	ArgumentList	\"
>1359	Argument	psId
>1360	Identifier	psId
>1361	Argument	\"
>1362	PrimaryExpression	\"
>1363	Callee	s -> setUInt32
>1364	PtrMemberAccess	s -> setUInt32
>1365	Identifier	setUInt32
>1366	Identifier	s
>1367	EqualityExpression	s != NULL
>1368	Identifier	NULL
>1369	Identifier	s
>1370	Identifier	rval
>1371	ExpressionStatement	 
>1372	Statement	 
>1373	Statement	 
>1374	Statement	 
>1375	Statement	 
>1376	Statement	 
>1377	Statement	 
>1378	Statement	 
>1379	Statement	 
>1380	Statement	 
>1381	Statement	 
>1382	Statement	 
>1383	Statement	 
>1384	IdentifierDeclStatement	 
>1385	IdentifierDecl	rval = false
>1386	AssignmentExpr	rval = false
>1387	Identifier	false
>1388	Identifier	false
>1389	Identifier	rval
>1390	IdentifierDeclType	bool
>1410	FunctionDef	CatalogDatabase 
>1411	ParameterList	PayeeSchemeId & psId , const char * description , Connection * c
>1412	Parameter	 
>1413	Identifier	c
>1414	ParameterType	Connection *
>1415	Parameter	 
>1416	Identifier	description
>1417	ParameterType	const char *
>1418	Parameter	 
>1419	Identifier	psId
>1420	ParameterType	PayeeSchemeId &
>1421	ReturnType	bool
>1422	CompoundStatement	 
>1423	ReturnStatement	 
>1424	Identifier	rval
>1425	IfStatement	if ( rval )
>1426	ElseStatement	else
>1427	IfStatement	if ( allocationAttempts > MAX_ALLOCATION_ATTEMPTS )
>1428	ElseStatement	else
>1429	CompoundStatement	 
>1430	ExpressionStatement	 
>1431	CallExpression	Exception 
>1432	ArgumentList	e
>1433	Argument	e
>1434	Identifier	e
>1435	Callee	Exception 
>1436	Identifier	Exception 
>1437	IdentifierDeclStatement	 
>1438	IdentifierDecl	e = new Exception ( \"Could not allocate a payee scheme for the given set of payees.\" , \"bitmunk.catalog.database.PayeeSchemeIdAllocationFailed\" )
>1439	AssignmentExpr	e = new Exception ( \"Could not allocate a payee scheme for the given set of payees.\" , \"bitmunk.catalog.database.PayeeSchemeIdAllocationFailed\" )
>1440	Expression	\"Could not allocate a payee scheme for the given set of payees.\" , \"bitmunk.catalog.database.PayeeSchemeIdAllocationFailed\"\
>1441	PrimaryExpression	\"bitmunk.catalog.database.PayeeSchemeIdAllocationFailed\"
>1442	PrimaryExpression	\"Could not allocate a payee scheme for the given set of payees.\"
>1443	Identifier	e
>1444	Identifier	e
>1445	IdentifierDeclType	ExceptionRef
>1446	CompoundStatement	 
>1447	ExpressionStatement	 
>1448	CallExpression	Exception 
>1449	ArgumentList	e
>1450	Argument	e
>1451	Identifier	e
>1452	Callee	Exception 
>1453	Identifier	Exception 
>1454	IdentifierDeclStatement	 
>1455	IdentifierDecl	e = new Exception ( \"Exceeded the maximum number of payee scheme allocation attempts.\" , \"bitmunk.catalog.database.PayeeSchemeIdAllocationLimitReached\" )
>1456	AssignmentExpr	e = new Exception ( \"Exceeded the maximum number of payee scheme allocation attempts.\" , \"bitmunk.catalog.database.PayeeSchemeIdAllocationLimitReached\" )
>1457	Expression	\"Exceeded the maximum number of payee scheme allocation attempts.\" , \"bitmunk.catalog.database.PayeeSchemeIdAllocationLimitReached\"\
>1458	PrimaryExpression	\"bitmunk.catalog.database.PayeeSchemeIdAllocationLimitReached\"
>1459	PrimaryExpression	\"Exceeded the maximum number of payee scheme allocation attempts.\"
>1460	Identifier	e
>1461	Identifier	e
>1462	IdentifierDeclType	ExceptionRef
>1463	Condition	 
>1464	RelationalExpression	allocationAttempts > MAX_ALLOCATION_ATTEMPTS
>1465	Identifier	MAX_ALLOCATION_ATTEMPTS
>1466	Identifier	allocationAttempts
>1467	CompoundStatement	 
>1468	ExpressionStatement	 
>1469	AssignmentExpr	psId = allocatedPayeeSchemeId
>1470	Identifier	allocatedPayeeSchemeId
>1471	Identifier	psId
>1472	Condition	 
>1473	Identifier	rval
>1474	WhileStatement	while ( rval && ( allocatedPayeeSchemeId == 0 ) && ! ( allocationAttempts > MAX_ALLOCATION_ATTEMPTS ) )
>1475	CompoundStatement	 
>1476	IfStatement	if ( ! rval )
>1477	CompoundStatement	 
>1478	IfStatement	if ( e -> getCode ( ) == SQLITE_CONSTRAINT )
>1479	CompoundStatement	 
>1480	ExpressionStatement	 
>1481	AssignmentExpr	rval = s -> reset ( ) && si -> reset ( )
>1482	AndExpression	s -> reset ( ) && si -> reset ( )
>1483	CallExpression	si -> reset ( )
>1484	ArgumentList	 
>1485	Callee	si -> reset
>1486	PtrMemberAccess	si -> reset
>1487	Identifier	reset
>1488	Identifier	si
>1489	CallExpression	s -> reset ( )
>1490	ArgumentList	 
>1491	Callee	s -> reset
>1492	PtrMemberAccess	s -> reset
>1493	Identifier	reset
>1494	Identifier	s
>1495	Identifier	rval
>1496	ExpressionStatement	 
>1497	UnaryExpression	++ allocationAttempts
>1498	Identifier	allocationAttempts
>1499	IncDec	++
>1500	ExpressionStatement	 
>1501	AssignmentExpr	allocatedPayeeSchemeId = 0
>1502	PrimaryExpression	0
>1503	Identifier	allocatedPayeeSchemeId
>1504	Condition	 
>1505	EqualityExpression	e -> getCode ( ) == SQLITE_CONSTRAINT
>1506	Identifier	SQLITE_CONSTRAINT
>1507	CallExpression	e -> getCode ( )
>1508	ArgumentList	 
>1509	Callee	e -> getCode
>1510	PtrMemberAccess	e -> getCode
>1511	Identifier	getCode
>1512	Identifier	e
>1513	IdentifierDeclStatement	 
>1514	IdentifierDecl	e = Exception 
>1515	AssignmentExpr	e = Exception 
>1516	CallExpression	Exception 
>1517	ArgumentList	 
>1518	Callee	Exception 
>1519	Identifier	Exception 
>1520	Identifier	e
>1521	Identifier	e
>1522	IdentifierDeclType	ExceptionRef
>1523	Condition	 
>1524	UnaryOp	! rval
>1525	Identifier	rval
>1526	UnaryOperator	!
>1527	ExpressionStatement	 
>1528	AssignmentExpr	rval = ( si != NULL ) && si -> setUInt32 ( \"
>1529	AndExpression	( si != NULL ) && si -> setUInt32 ( \"
>1530	AndExpression	si -> setUInt32 ( \"
>1531	AndExpression	si -> setText ( \"
>1532	AndExpression	si -> execute ( ) && si -> reset ( )
>1533	CallExpression	si -> reset ( )
>1534	ArgumentList	 
>1535	Callee	si -> reset
>1536	PtrMemberAccess	si -> reset
>1537	Identifier	reset
>1538	Identifier	si
>1539	CallExpression	si -> execute ( )
>1540	ArgumentList	 
>1541	Callee	si -> execute
>1542	PtrMemberAccess	si -> execute
>1543	Identifier	execute
>1544	Identifier	si
>1545	CallExpression	si -> setText ( \"
>1546	ArgumentList	\"
>1547	Argument	description
>1548	Identifier	description
>1549	Argument	\"
>1550	PrimaryExpression	\"
>1551	Callee	si -> setText
>1552	PtrMemberAccess	si -> setText
>1553	Identifier	setText
>1554	Identifier	si
>1555	CallExpression	si -> setUInt32 ( \"
>1556	ArgumentList	\"
>1557	Argument	allocatedPayeeSchemeId
>1558	Identifier	allocatedPayeeSchemeId
>1559	Argument	\"
>1560	PrimaryExpression	\"
>1561	Callee	si -> setUInt32
>1562	PtrMemberAccess	si -> setUInt32
>1563	Identifier	setUInt32
>1564	Identifier	si
>1565	EqualityExpression	si != NULL
>1566	Identifier	NULL
>1567	Identifier	si
>1568	Identifier	rval
>1569	IfStatement	if ( psId == 0 )
>1570	ElseStatement	else
>1571	CompoundStatement	 
>1572	ExpressionStatement	 
>1573	AssignmentExpr	allocatedPayeeSchemeId = psId
>1574	Identifier	psId
>1575	Identifier	allocatedPayeeSchemeId
>1576	CompoundStatement	 
>1577	IfStatement	if ( rval )
>1578	CompoundStatement	 
>1579	ExpressionStatement	 
>1580	CallExpression	s -> reset ( )
>1581	ArgumentList	 
>1582	Callee	s -> reset
>1583	PtrMemberAccess	s -> reset
>1584	Identifier	reset
>1585	Identifier	s
>1586	ExpressionStatement	 
>1587	CallExpression	row -> getUInt32 ( \"payee_scheme_id\" , allocatedPayeeSchemeId )
>1588	ArgumentList	\"payee_scheme_id\"
>1589	Argument	allocatedPayeeSchemeId
>1590	Identifier	allocatedPayeeSchemeId
>1591	Argument	\"payee_scheme_id\"
>1592	PrimaryExpression	\"payee_scheme_id\"
>1593	Callee	row -> getUInt32
>1594	PtrMemberAccess	row -> getUInt32
>1595	Identifier	getUInt32
>1596	Identifier	row
>1597	IdentifierDeclStatement	 
>1598	IdentifierDecl	* row = s -> fetch ( )
>1599	AssignmentExpr	* row = s -> fetch ( )
>1600	CallExpression	s -> fetch ( )
>1601	ArgumentList	 
>1602	Callee	s -> fetch
>1603	PtrMemberAccess	s -> fetch
>1604	Identifier	fetch
>1605	Identifier	s
>1606	Identifier	row
>1607	Identifier	row
>1608	IdentifierDeclType	monarch 
>1609	Condition	 
>1610	Identifier	rval
>1611	ExpressionStatement	 
>1612	AssignmentExpr	rval = s -> execute ( )
>1613	CallExpression	s -> execute ( )
>1614	ArgumentList	 
>1615	Callee	s -> execute
>1616	PtrMemberAccess	s -> execute
>1617	Identifier	execute
>1618	Identifier	s
>1619	Identifier	rval
>1620	Condition	 
>1621	EqualityExpression	psId == 0
>1622	PrimaryExpression	0
>1623	Identifier	psId
>1624	Condition	 
>1625	AndExpression	rval && ( allocatedPayeeSchemeId == 0 ) && ! ( allocationAttempts > MAX_ALLOCATION_ATTEMPTS )
>1626	AndExpression	( allocatedPayeeSchemeId == 0 ) && ! ( allocationAttempts > MAX_ALLOCATION_ATTEMPTS )
>1627	UnaryOp	! ( allocationAttempts > MAX_ALLOCATION_ATTEMPTS )
>1628	RelationalExpression	allocationAttempts > MAX_ALLOCATION_ATTEMPTS
>1629	Identifier	MAX_ALLOCATION_ATTEMPTS
>1630	Identifier	allocationAttempts
>1631	UnaryOperator	!
>1632	EqualityExpression	allocatedPayeeSchemeId == 0
>1633	PrimaryExpression	0
>1634	Identifier	allocatedPayeeSchemeId
>1635	Identifier	rval
>1636	IdentifierDeclStatement	 
>1637	IdentifierDecl	allocationAttempts = 0
>1638	AssignmentExpr	allocationAttempts = 0
>1639	PrimaryExpression	0
>1640	Identifier	allocationAttempts
>1641	Identifier	allocationAttempts
>1642	IdentifierDeclType	uint32_t
>1643	IdentifierDeclStatement	 
>1644	IdentifierDecl	allocatedPayeeSchemeId = 0
>1645	AssignmentExpr	allocatedPayeeSchemeId = 0
>1646	PrimaryExpression	0
>1647	Identifier	allocatedPayeeSchemeId
>1648	Identifier	allocatedPayeeSchemeId
>1649	IdentifierDeclType	PayeeSchemeId
>1650	ExpressionStatement	 
>1651	AssignmentExpr	rval = rval && ( si != NULL )
>1652	AndExpression	rval && ( si != NULL )
>1653	EqualityExpression	si != NULL
>1654	Identifier	NULL
>1655	Identifier	si
>1656	Identifier	rval
>1657	Identifier	rval
>1658	ExpressionStatement	 
>1659	Statement	 
>1660	Statement	 
>1661	Statement	 
>1662	Statement	 
>1663	Statement	 
>1664	Statement	 
>1665	Statement	 
>1666	Statement	 
>1667	Statement	 
>1668	Statement	 
>1669	Statement	 
>1670	IdentifierDeclStatement	 
>1671	IdentifierDecl	* si = NULL
>1672	AssignmentExpr	* si = NULL
>1673	Identifier	NULL
>1674	Identifier	NULL
>1675	Identifier	si
>1676	IdentifierDeclType	Statement *
>1677	IfStatement	if ( psId == 0 )
>1678	CompoundStatement	 
>1679	ExpressionStatement	 
>1680	AssignmentExpr	rval = ( s != NULL )
>1681	EqualityExpression	s != NULL
>1682	Identifier	NULL
>1683	Identifier	s
>1684	Identifier	rval
>1685	ExpressionStatement	 
>1686	Statement	 
>1687	Statement	 
>1688	Statement	 
>1689	Statement	 
>1690	Statement	 
>1691	Statement	 
>1692	Statement	 
>1693	Statement	 
>1694	Statement	 
>1695	Statement	 
>1696	Statement	 
>1697	Statement	 
>1698	Statement	 
>1699	Statement	 
>1700	Statement	 
>1701	Statement	 
>1702	Statement	 
>1703	Statement	 
>1704	Statement	 
>1705	Statement	 
>1706	Statement	 
>1707	Statement	 
>1708	Statement	 
>1709	Statement	 
>1710	Condition	 
>1711	EqualityExpression	psId == 0
>1712	PrimaryExpression	0
>1713	Identifier	psId
>1714	IdentifierDeclStatement	 
>1715	IdentifierDecl	* s = NULL
>1716	AssignmentExpr	* s = NULL
>1717	Identifier	NULL
>1718	Identifier	NULL
>1719	Identifier	s
>1720	IdentifierDeclType	Statement *
>1721	IdentifierDeclStatement	 
>1722	IdentifierDecl	rval = true
>1723	AssignmentExpr	rval = true
>1724	Identifier	true
>1725	Identifier	true
>1726	Identifier	rval
>1727	IdentifierDeclType	bool
>1757	FunctionDef	CatalogDatabase 
>1758	ParameterList	Node * node , UserId userId , PayeeSchemeId & psId , const char * description , PayeeList & psList , Connection * \
>1759	Parameter	 
>1760	Identifier	c
>1761	ParameterType	Connection *
>1762	Parameter	 
>1763	Identifier	psList
>1764	ParameterType	PayeeList &
>1765	Parameter	 
>1766	Identifier	description
>1767	ParameterType	const char *
>1768	Parameter	 
>1769	Identifier	psId
>1770	ParameterType	PayeeSchemeId &
>1771	Parameter	 
>1772	Identifier	userId
>1773	ParameterType	UserId
>1774	Parameter	 
>1775	Identifier	node
>1776	ParameterType	Node *
>1777	ReturnType	bool
>1778	CompoundStatement	 
>1779	ReturnStatement	 
>1780	Identifier	rval
>1781	IfStatement	if ( rval )
>1782	CompoundStatement	 
>1783	IfStatement	if ( ( rval = ( s != NULL ) ) )
>1784	CompoundStatement	 
>1785	WhileStatement	while ( rval && pi -> hasNext ( ) )
>1786	CompoundStatement	 
>1787	IfStatement	if ( ! rval )
>1788	CompoundStatement	 
>1789	ExpressionStatement	 
>1790	CallExpression	Exception 
>1791	ArgumentList	e
>1792	Argument	e
>1793	Identifier	e
>1794	Callee	Exception 
>1795	Identifier	Exception 
>1796	ExpressionStatement	 
>1797	CallExpression	BM_ID_SET ( e -> getDetails ( ) [ \"payeeSchemeId\" ] , psId )
>1798	ArgumentList	e -> getDetails ( ) [ \"payeeSchemeId\" ]
>1799	Argument	psId
>1800	Identifier	psId
>1801	Argument	e -> getDetails ( ) [ \"payeeSchemeId\" ]
>1802	ArrayIndexing	e -> getDetails ( ) [ \"payeeSchemeId\" ]
>1803	PrimaryExpression	\"payeeSchemeId\"
>1804	CallExpression	e -> getDetails ( )
>1805	ArgumentList	 
>1806	Callee	e -> getDetails
>1807	PtrMemberAccess	e -> getDetails
>1808	Identifier	getDetails
>1809	Identifier	e
>1810	Callee	BM_ID_SET
>1811	Identifier	BM_ID_SET
>1812	ExpressionStatement	 
>1813	AssignmentExpr	e -> getDetails ( ) [ \"payee\" ] = p
>1814	Identifier	p
>1815	ArrayIndexing	e -> getDetails ( ) [ \"payee\" ]
>1816	PrimaryExpression	\"payee\"
>1817	CallExpression	e -> getDetails ( )
>1818	ArgumentList	 
>1819	Callee	e -> getDetails
>1820	PtrMemberAccess	e -> getDetails
>1821	Identifier	getDetails
>1822	Identifier	e
>1823	IdentifierDeclStatement	 
>1824	IdentifierDecl	e = new Exception ( \"Failed to add a payee to the given payee scheme.\" , \"bitmunk.catalog.database.PayeeAdditionFailed\" )
>1825	AssignmentExpr	e = new Exception ( \"Failed to add a payee to the given payee scheme.\" , \"bitmunk.catalog.database.PayeeAdditionFailed\" )
>1826	Expression	\"Failed to add a payee to the given payee scheme.\" , \"bitmunk.catalog.database.PayeeAdditionFailed\"
>1827	PrimaryExpression	\"bitmunk.catalog.database.PayeeAdditionFailed\"
>1828	PrimaryExpression	\"Failed to add a payee to the given payee scheme.\"
>1829	Identifier	e
>1830	Identifier	e
>1831	IdentifierDeclType	ExceptionRef
>1832	Condition	 
>1833	UnaryOp	! rval
>1834	Identifier	rval
>1835	UnaryOperator	!
>1836	ExpressionStatement	 
>1837	AssignmentExpr	rval = s -> setUInt32 ( \"
>1838	AndExpression	s -> setUInt32 ( \"
>1839	AndExpression	s -> setUInt32 ( \"
>1840	AndExpression	s -> setUInt64 ( \"
>1841	AndExpression	s -> setText ( \"
>1842	AndExpression	s -> setText ( \"
>1843	AndExpression	s -> setText ( \"
>1844	AndExpression	s -> setText ( \"
>1845	AndExpression	s -> setText ( \"
>1846	AndExpression	s -> execute ( ) && s -> reset ( )
>1847	CallExpression	s -> reset ( )
>1848	ArgumentList	 
>1849	Callee	s -> reset
>1850	PtrMemberAccess	s -> reset
>1851	Identifier	reset
>1852	Identifier	s
>1853	CallExpression	s -> execute ( )
>1854	ArgumentList	 
>1855	Callee	s -> execute
>1856	PtrMemberAccess	s -> execute
>1857	Identifier	execute
>1858	Identifier	s
>1859	CallExpression	s -> setText ( \"
>1860	ArgumentList	\"
>1861	Argument	p [ \"min\" ] -> getString ( )
>1862	CallExpression	p [ \"min\" ] -> getString ( )
>1863	ArgumentList	 
>1864	Callee	p [ \"min\" ] -> getString
>1865	PtrMemberAccess	p [ \"min\" ] -> getString
>1866	Identifier	getString
>1867	ArrayIndexing	p [ \"min\" ]
>1868	PrimaryExpression	\"min\"
>1869	Identifier	p
>1870	Argument	\"
>1871	PrimaryExpression	\"
>1872	Callee	s -> setText
>1873	PtrMemberAccess	s -> setText
>1874	Identifier	setText
>1875	Identifier	s
>1876	CallExpression	s -> setText ( \"
>1877	ArgumentList	\"
>1878	Argument	p [ \"percentage\" ] -> getString ( )
>1879	CallExpression	p [ \"percentage\" ] -> getString ( )
>1880	ArgumentList	 
>1881	Callee	p [ \"percentage\" ] -> getString
>1882	PtrMemberAccess	p [ \"percentage\" ] -> getString
>1883	Identifier	getString
>1884	ArrayIndexing	p [ \"percentage\" ]
>1885	PrimaryExpression	\"percentage\"
>1886	Identifier	p
>1887	Argument	\"
>1888	PrimaryExpression	\"
>1889	Callee	s -> setText
>1890	PtrMemberAccess	s -> setText
>1891	Identifier	setText
>1892	Identifier	s
>1893	CallExpression	s -> setText ( \"
>1894	ArgumentList	\"
>1895	Argument	p [ \"amount\" ] -> getString ( )
>1896	CallExpression	p [ \"amount\" ] -> getString ( )
>1897	ArgumentList	 
>1898	Callee	p [ \"amount\" ] -> getString
>1899	PtrMemberAccess	p [ \"amount\" ] -> getString
>1900	Identifier	getString
>1901	ArrayIndexing	p [ \"amount\" ]
>1902	PrimaryExpression	\"amount\"
>1903	Identifier	p
>1904	Argument	\"
>1905	PrimaryExpression	\"
>1906	Callee	s -> setText
>1907	PtrMemberAccess	s -> setText
>1908	Identifier	setText
>1909	Identifier	s
>1910	CallExpression	s -> setText ( \"
>1911	ArgumentList	\"
>1912	Argument	p [ \"description\" ] -> getString ( )
>1913	CallExpression	p [ \"description\" ] -> getString ( )
>1914	ArgumentList	 
>1915	Callee	p [ \"description\" ] -> getString
>1916	PtrMemberAccess	p [ \"description\" ] -> getString
>1917	Identifier	getString
>1918	ArrayIndexing	p [ \"description\" ]
>1919	PrimaryExpression	\"description\"
>1920	Identifier	p
>1921	Argument	\"
>1922	PrimaryExpression	\"
>1923	Callee	s -> setText
>1924	PtrMemberAccess	s -> setText
>1925	Identifier	setText
>1926	Identifier	s
>1927	CallExpression	s -> setText ( \"
>1928	ArgumentList	\"
>1929	Argument	p [ \"amountType\" ] -> getString ( )
>1930	CallExpression	p [ \"amountType\" ] -> getString ( )
>1931	ArgumentList	 
>1932	Callee	p [ \"amountType\" ] -> getString
>1933	PtrMemberAccess	p [ \"amountType\" ] -> getString
>1934	Identifier	getString
>1935	ArrayIndexing	p [ \"amountType\" ]
>1936	PrimaryExpression	\"amountType\"
>1937	Identifier	p
>1938	Argument	\"
>1939	PrimaryExpression	\"
>1940	Callee	s -> setText
>1941	PtrMemberAccess	s -> setText
>1942	Identifier	setText
>1943	Identifier	s
>1944	CallExpression	s -> setUInt64 ( \"
>1945	ArgumentList	\"
>1946	Argument	BM_ACCOUNT_ID ( p [ \"id\" ] )
>1947	CallExpression	BM_ACCOUNT_ID ( p [ \"id\" ] )
>1948	ArgumentList	p [ \"id\" ]
>1949	Argument	p [ \"id\" ]
>1950	ArrayIndexing	p [ \"id\" ]
>1951	PrimaryExpression	\"id\"
>1952	Identifier	p
>1953	Callee	BM_ACCOUNT_ID
>1954	Identifier	BM_ACCOUNT_ID
>1955	Argument	\"
>1956	PrimaryExpression	\"
>1957	Callee	s -> setUInt64
>1958	PtrMemberAccess	s -> setUInt64
>1959	Identifier	setUInt64
>1960	Identifier	s
>1961	CallExpression	s -> setUInt32 ( \"
>1962	ArgumentList	\"
>1963	Argument	position ++
>1964	IncDecOp	position ++
>1965	IncDec	++
>1966	Identifier	position
>1967	Argument	\"
>1968	PrimaryExpression	\"
>1969	Callee	s -> setUInt32
>1970	PtrMemberAccess	s -> setUInt32
>1971	Identifier	setUInt32
>1972	Identifier	s
>1973	CallExpression	s -> setUInt32 ( \"
>1974	ArgumentList	\"
>1975	Argument	psId
>1976	Identifier	psId
>1977	Argument	\"
>1978	PrimaryExpression	\"
>1979	Callee	s -> setUInt32
>1980	PtrMemberAccess	s -> setUInt32
>1981	Identifier	setUInt32
>1982	Identifier	s
>1983	Identifier	rval
>1984	IdentifierDeclStatement	 
>1985	IdentifierDecl	& p = pi -> next ( )
>1986	AssignmentExpr	& p = pi -> next ( )
>1987	CallExpression	pi -> next ( )
>1988	ArgumentList	 
>1989	Callee	pi -> next
>1990	PtrMemberAccess	pi -> next
>1991	Identifier	next
>1992	Identifier	pi
>1993	Identifier	p
>1994	Identifier	p
>1995	IdentifierDeclType	Payee &
>1996	Condition	 
>1997	AndExpression	rval && pi -> hasNext ( )
>1998	CallExpression	pi -> hasNext ( )
>1999	ArgumentList	 
>2000	Callee	pi -> hasNext
>2001	PtrMemberAccess	pi -> hasNext
>2002	Identifier	hasNext
>2003	Identifier	pi
>2004	Identifier	rval
>2005	IdentifierDeclStatement	 
>2006	IdentifierDecl	pi = psList . getIterator ( )
>2007	AssignmentExpr	pi = psList . getIterator ( )
>2008	CallExpression	psList . getIterator ( )
>2009	ArgumentList	 
>2010	Callee	psList . getIterator
>2011	MemberAccess	psList . getIterator
>2012	Identifier	getIterator
>2013	Identifier	psList
>2014	Identifier	pi
>2015	Identifier	pi
>2016	IdentifierDeclType	PayeeIterator
>2017	IdentifierDeclStatement	 
>2018	IdentifierDecl	position = 0
>2019	AssignmentExpr	position = 0
>2020	PrimaryExpression	0
>2021	Identifier	position
>2022	Identifier	position
>2023	IdentifierDeclType	uint32_t
>2024	Condition	 
>2025	AssignmentExpr	rval = ( s != NULL )
>2026	EqualityExpression	s != NULL
>2027	Identifier	NULL
>2028	Identifier	s
>2029	Identifier	rval
>2030	ExpressionStatement	 
>2031	Statement	 
>2032	Statement	 
>2033	Statement	 
>2034	Statement	 
>2035	Statement	 
>2036	Statement	 
>2037	Statement	 
>2038	Statement	 
>2039	Statement	 
>2040	Statement	 
>2041	Statement	 
>2042	Statement	 
>2043	Statement	 
>2044	Statement	 
>2045	Statement	 
>2046	Condition	 
>2047	Identifier	rval
>2048	ExpressionStatement	 
>2049	AssignmentExpr	rval = allocateNewPayeeScheme ( psId , description , c )
>2050	CallExpression	allocateNewPayeeScheme ( psId , description , c )
>2051	ArgumentList	psId
>2052	Argument	c
>2053	Identifier	c
>2054	Argument	description
>2055	Identifier	description
>2056	Argument	psId
>2057	Identifier	psId
>2058	Callee	allocateNewPayeeScheme
>2059	Identifier	allocateNewPayeeScheme
>2060	Identifier	rval
>2061	IdentifierDeclStatement	 
>2062	IdentifierDecl	rval = true
>2063	AssignmentExpr	rval = true
>2064	Identifier	true
>2065	Identifier	true
>2066	Identifier	rval
>2067	IdentifierDeclType	bool
>2108	FunctionDef	CatalogDatabase 
>2109	ParameterList	PayeeScheme & ps , Connection * c
>2110	Parameter	 
>2111	Identifier	c
>2112	ParameterType	Connection *
>2113	Parameter	 
>2114	Identifier	ps
>2115	ParameterType	PayeeScheme &
>2116	ReturnType	bool
>2117	CompoundStatement	 
>2118	ReturnStatement	 
>2119	Identifier	rval
>2120	IfStatement	if ( isPayeeSchemeIdValid ( psId , c ) )
>2121	CompoundStatement	 
>2122	IfStatement	if ( rval )
>2123	CompoundStatement	 
>2124	IfStatement	if ( ( rval = ( s != NULL ) ) )
>2125	CompoundStatement	 
>2126	WhileStatement	while ( rval && pi -> hasNext ( ) )
>2127	CompoundStatement	 
>2128	IfStatement	if ( ! rval )
>2129	CompoundStatement	 
>2130	ExpressionStatement	 
>2131	CallExpression	Exception 
>2132	ArgumentList	e
>2133	Argument	e
>2134	Identifier	e
>2135	Callee	Exception 
>2136	Identifier	Exception 
>2137	ExpressionStatement	 
>2138	CallExpression	BM_ID_SET ( e -> getDetails ( ) [ \"payeeSchemeId\" ] , psId )
>2139	ArgumentList	e -> getDetails ( ) [ \"payeeSchemeId\" ]
>2140	Argument	psId
>2141	Identifier	psId
>2142	Argument	e -> getDetails ( ) [ \"payeeSchemeId\" ]
>2143	ArrayIndexing	e -> getDetails ( ) [ \"payeeSchemeId\" ]
>2144	PrimaryExpression	\"payeeSchemeId\"
>2145	CallExpression	e -> getDetails ( )
>2146	ArgumentList	 
>2147	Callee	e -> getDetails
>2148	PtrMemberAccess	e -> getDetails
>2149	Identifier	getDetails
>2150	Identifier	e
>2151	Callee	BM_ID_SET
>2152	Identifier	BM_ID_SET
>2153	ExpressionStatement	 
>2154	AssignmentExpr	e -> getDetails ( ) [ \"payee\" ] = p
>2155	Identifier	p
>2156	ArrayIndexing	e -> getDetails ( ) [ \"payee\" ]
>2157	PrimaryExpression	\"payee\"
>2158	CallExpression	e -> getDetails ( )
>2159	ArgumentList	 
>2160	Callee	e -> getDetails
>2161	PtrMemberAccess	e -> getDetails
>2162	Identifier	getDetails
>2163	Identifier	e
>2164	IdentifierDeclStatement	 
>2165	IdentifierDecl	e = new Exception ( \"Failed to add a payee to the given payee scheme.\" , \"bitmunk.catalog.database.PayeeAdditionFailed\" )
>2166	AssignmentExpr	e = new Exception ( \"Failed to add a payee to the given payee scheme.\" , \"bitmunk.catalog.database.PayeeAdditionFailed\" )
>2167	Expression	\"Failed to add a payee to the given payee scheme.\" , \"bitmunk.catalog.database.PayeeAdditionFailed\"
>2168	PrimaryExpression	\"bitmunk.catalog.database.PayeeAdditionFailed\"
>2169	PrimaryExpression	\"Failed to add a payee to the given payee scheme.\"
>2170	Identifier	e
>2171	Identifier	e
>2172	IdentifierDeclType	ExceptionRef
>2173	Condition	 
>2174	UnaryOp	! rval
>2175	Identifier	rval
>2176	UnaryOperator	!
>2177	ExpressionStatement	 
>2178	AssignmentExpr	rval = s -> setUInt32 ( \"
>2179	AndExpression	s -> setUInt32 ( \"
>2180	AndExpression	s -> setUInt32 ( \"
>2181	AndExpression	s -> setUInt64 ( \"
>2182	AndExpression	s -> setText ( \"
>2183	AndExpression	s -> setText ( \"
>2184	AndExpression	s -> setText ( \"
>2185	AndExpression	s -> setText ( \"
>2186	AndExpression	s -> setText ( \"
>2187	CallExpression	s -> execute ( )
>2188	ArgumentList	 
>2189	Callee	s -> execute
>2190	PtrMemberAccess	s -> execute
>2191	Identifier	execute
>2192	Identifier	s
>2193	CallExpression	s -> setText ( \"
>2194	ArgumentList	\"
>2195	Argument	p [ \"min\" ] -> getString ( )
>2196	CallExpression	p [ \"min\" ] -> getString ( )
>2197	ArgumentList	 
>2198	Callee	p [ \"min\" ] -> getString
>2199	PtrMemberAccess	p [ \"min\" ] -> getString
>2200	Identifier	getString
>2201	ArrayIndexing	p [ \"min\" ]
>2202	PrimaryExpression	\"min\"
>2203	Identifier	p
>2204	Argument	\"
>2205	PrimaryExpression	\"
>2206	Callee	s -> setText
>2207	PtrMemberAccess	s -> setText
>2208	Identifier	setText
>2209	Identifier	s
>2210	CallExpression	s -> setText ( \"
>2211	ArgumentList	\"
>2212	Argument	p [ \"percentage\" ] -> getString ( )
>2213	CallExpression	p [ \"percentage\" ] -> getString ( )
>2214	ArgumentList	 
>2215	Callee	p [ \"percentage\" ] -> getString
>2216	PtrMemberAccess	p [ \"percentage\" ] -> getString
>2217	Identifier	getString
>2218	ArrayIndexing	p [ \"percentage\" ]
>2219	PrimaryExpression	\"percentage\"
>2220	Identifier	p
>2221	Argument	\"
>2222	PrimaryExpression	\"
>2223	Callee	s -> setText
>2224	PtrMemberAccess	s -> setText
>2225	Identifier	setText
>2226	Identifier	s
>2227	CallExpression	s -> setText ( \"
>2228	ArgumentList	\"
>2229	Argument	p [ \"amount\" ] -> getString ( )
>2230	CallExpression	p [ \"amount\" ] -> getString ( )
>2231	ArgumentList	 
>2232	Callee	p [ \"amount\" ] -> getString
>2233	PtrMemberAccess	p [ \"amount\" ] -> getString
>2234	Identifier	getString
>2235	ArrayIndexing	p [ \"amount\" ]
>2236	PrimaryExpression	\"amount\"
>2237	Identifier	p
>2238	Argument	\"
>2239	PrimaryExpression	\"
>2240	Callee	s -> setText
>2241	PtrMemberAccess	s -> setText
>2242	Identifier	setText
>2243	Identifier	s
>2244	CallExpression	s -> setText ( \"
>2245	ArgumentList	\"
>2246	Argument	p [ \"description\" ] -> getString ( )
>2247	CallExpression	p [ \"description\" ] -> getString ( )
>2248	ArgumentList	 
>2249	Callee	p [ \"description\" ] -> getString
>2250	PtrMemberAccess	p [ \"description\" ] -> getString
>2251	Identifier	getString
>2252	ArrayIndexing	p [ \"description\" ]
>2253	PrimaryExpression	\"description\"
>2254	Identifier	p
>2255	Argument	\"
>2256	PrimaryExpression	\"
>2257	Callee	s -> setText
>2258	PtrMemberAccess	s -> setText
>2259	Identifier	setText
>2260	Identifier	s
>2261	CallExpression	s -> setText ( \"
>2262	ArgumentList	\"
>2263	Argument	p [ \"amountType\" ] -> getString ( )
>2264	CallExpression	p [ \"amountType\" ] -> getString ( )
>2265	ArgumentList	 
>2266	Callee	p [ \"amountType\" ] -> getString
>2267	PtrMemberAccess	p [ \"amountType\" ] -> getString
>2268	Identifier	getString
>2269	ArrayIndexing	p [ \"amountType\" ]
>2270	PrimaryExpression	\"amountType\"
>2271	Identifier	p
>2272	Argument	\"
>2273	PrimaryExpression	\"
>2274	Callee	s -> setText
>2275	PtrMemberAccess	s -> setText
>2276	Identifier	setText
>2277	Identifier	s
>2278	CallExpression	s -> setUInt64 ( \"
>2279	ArgumentList	\"
>2280	Argument	BM_ACCOUNT_ID ( p [ \"id\" ] )
>2281	CallExpression	BM_ACCOUNT_ID ( p [ \"id\" ] )
>2282	ArgumentList	p [ \"id\" ]
>2283	Argument	p [ \"id\" ]
>2284	ArrayIndexing	p [ \"id\" ]
>2285	PrimaryExpression	\"id\"
>2286	Identifier	p
>2287	Callee	BM_ACCOUNT_ID
>2288	Identifier	BM_ACCOUNT_ID
>2289	Argument	\"
>2290	PrimaryExpression	\"
>2291	Callee	s -> setUInt64
>2292	PtrMemberAccess	s -> setUInt64
>2293	Identifier	setUInt64
>2294	Identifier	s
>2295	CallExpression	s -> setUInt32 ( \"
>2296	ArgumentList	\"
>2297	Argument	position ++
>2298	IncDecOp	position ++
>2299	IncDec	++
>2300	Identifier	position
>2301	Argument	\"
>2302	PrimaryExpression	\"
>2303	Callee	s -> setUInt32
>2304	PtrMemberAccess	s -> setUInt32
>2305	Identifier	setUInt32
>2306	Identifier	s
>2307	CallExpression	s -> setUInt32 ( \"
>2308	ArgumentList	\"
>2309	Argument	psId
>2310	Identifier	psId
>2311	Argument	\"
>2312	PrimaryExpression	\"
>2313	Callee	s -> setUInt32
>2314	PtrMemberAccess	s -> setUInt32
>2315	Identifier	setUInt32
>2316	Identifier	s
>2317	Identifier	rval
>2318	IdentifierDeclStatement	 
>2319	IdentifierDecl	& p = pi -> next ( )
>2320	AssignmentExpr	& p = pi -> next ( )
>2321	CallExpression	pi -> next ( )
>2322	ArgumentList	 
>2323	Callee	pi -> next
>2324	PtrMemberAccess	pi -> next
>2325	Identifier	next
>2326	Identifier	pi
>2327	Identifier	p
>2328	Identifier	p
>2329	IdentifierDeclType	Payee &
>2330	Condition	 
>2331	AndExpression	rval && pi -> hasNext ( )
>2332	CallExpression	pi -> hasNext ( )
>2333	ArgumentList	 
>2334	Callee	pi -> hasNext
>2335	PtrMemberAccess	pi -> hasNext
>2336	Identifier	hasNext
>2337	Identifier	pi
>2338	Identifier	rval
>2339	IdentifierDeclStatement	 
>2340	IdentifierDecl	pi = ps [ \"payees\" ] . getIterator ( )
>2341	AssignmentExpr	pi = ps [ \"payees\" ] . getIterator ( )
>2342	CallExpression	ps [ \"payees\" ] . getIterator ( )
>2343	ArgumentList	 
>2344	Callee	ps [ \"payees\" ] . getIterator
>2345	MemberAccess	ps [ \"payees\" ] . getIterator
>2346	Identifier	getIterator
>2347	ArrayIndexing	ps [ \"payees\" ]
>2348	PrimaryExpression	\"payees\"
>2349	Identifier	ps
>2350	Identifier	pi
>2351	Identifier	pi
>2352	IdentifierDeclType	PayeeIterator
>2353	IdentifierDeclStatement	 
>2354	IdentifierDecl	position = 0
>2355	AssignmentExpr	position = 0
>2356	PrimaryExpression	0
>2357	Identifier	position
>2358	Identifier	position
>2359	IdentifierDeclType	uint32_t
>2360	Condition	 
>2361	AssignmentExpr	rval = ( s != NULL )
>2362	EqualityExpression	s != NULL
>2363	Identifier	NULL
>2364	Identifier	s
>2365	Identifier	rval
>2366	ExpressionStatement	 
>2367	Statement	 
>2368	Statement	 
>2369	Statement	 
>2370	Statement	 
>2371	Statement	 
>2372	Statement	 
>2373	Statement	 
>2374	Statement	 
>2375	Statement	 
>2376	Statement	 
>2377	Statement	 
>2378	Statement	 
>2379	Statement	 
>2380	Statement	 
>2381	Statement	 
>2382	Condition	 
>2383	Identifier	rval
>2384	IfStatement	if ( rval )
>2385	CompoundStatement	 
>2386	ExpressionStatement	 
>2387	AssignmentExpr	rval = ( s != NULL ) && s -> setUInt32 ( \"
>2388	AndExpression	( s != NULL ) && s -> setUInt32 ( \"
>2389	AndExpression	s -> setUInt32 ( \"
>2390	CallExpression	s -> execute ( )
>2391	ArgumentList	 
>2392	Callee	s -> execute
>2393	PtrMemberAccess	s -> execute
>2394	Identifier	execute
>2395	Identifier	s
>2396	CallExpression	s -> setUInt32 ( \"
>2397	ArgumentList	\"
>2398	Argument	psId
>2399	Identifier	psId
>2400	Argument	\"
>2401	PrimaryExpression	\"
>2402	Callee	s -> setUInt32
>2403	PtrMemberAccess	s -> setUInt32
>2404	Identifier	setUInt32
>2405	Identifier	s
>2406	EqualityExpression	s != NULL
>2407	Identifier	NULL
>2408	Identifier	s
>2409	Identifier	rval
>2410	ExpressionStatement	 
>2411	Statement	 
>2412	Statement	 
>2413	Statement	 
>2414	Statement	 
>2415	Statement	 
>2416	Statement	 
>2417	Statement	 
>2418	Statement	 
>2419	Statement	 
>2420	Statement	 
>2421	Statement	 
>2422	Statement	 
>2423	Condition	 
>2424	Identifier	rval
>2425	CompoundStatement	 
>2426	ExpressionStatement	 
>2427	AssignmentExpr	rval = ( s != NULL ) && s -> setText ( \"
>2428	AndExpression	( s != NULL ) && s -> setText ( \"
>2429	AndExpression	s -> setText ( \"
>2430	AndExpression	s -> setUInt32 ( \"
>2431	CallExpression	s -> execute ( )
>2432	ArgumentList	 
>2433	Callee	s -> execute
>2434	PtrMemberAccess	s -> execute
>2435	Identifier	execute
>2436	Identifier	s
>2437	CallExpression	s -> setUInt32 ( \"
>2438	ArgumentList	\"
>2439	Argument	psId
>2440	Identifier	psId
>2441	Argument	\"
>2442	PrimaryExpression	\"
>2443	Callee	s -> setUInt32
>2444	PtrMemberAccess	s -> setUInt32
>2445	Identifier	setUInt32
>2446	Identifier	s
>2447	CallExpression	s -> setText ( \"
>2448	ArgumentList	\"
>2449	Argument	ps [ \"description\" ] -> getString ( )
>2450	CallExpression	ps [ \"description\" ] -> getString ( )
>2451	ArgumentList	 
>2452	Callee	ps [ \"description\" ] -> getString
>2453	PtrMemberAccess	ps [ \"description\" ] -> getString
>2454	Identifier	getString
>2455	ArrayIndexing	ps [ \"description\" ]
>2456	PrimaryExpression	\"description\"
>2457	Identifier	ps
>2458	Argument	\"
>2459	PrimaryExpression	\"
>2460	Callee	s -> setText
>2461	PtrMemberAccess	s -> setText
>2462	Identifier	setText
>2463	Identifier	s
>2464	EqualityExpression	s != NULL
>2465	Identifier	NULL
>2466	Identifier	s
>2467	Identifier	rval
>2468	ExpressionStatement	 
>2469	Statement	 
>2470	Statement	 
>2471	Statement	 
>2472	Statement	 
>2473	Statement	 
>2474	Statement	 
>2475	Statement	 
>2476	Statement	 
>2477	Statement	 
>2478	Statement	 
>2479	Statement	 
>2480	Statement	 
>2481	Statement	 
>2482	Statement	 
>2483	Condition	 
>2484	CallExpression	isPayeeSchemeIdValid ( psId , c )
>2485	ArgumentList	psId
>2486	Argument	c
>2487	Identifier	c
>2488	Argument	psId
>2489	Identifier	psId
>2490	Callee	isPayeeSchemeIdValid
>2491	Identifier	isPayeeSchemeIdValid
>2492	IdentifierDeclStatement	 
>2493	IdentifierDecl	psId = BM_PAYEE_SCHEME_ID ( ps [ \"id\" ] )
>2494	AssignmentExpr	psId = BM_PAYEE_SCHEME_ID ( ps [ \"id\" ] )
>2495	CallExpression	BM_PAYEE_SCHEME_ID ( ps [ \"id\" ] )
>2496	ArgumentList	ps [ \"id\" ]
>2497	Argument	ps [ \"id\" ]
>2498	ArrayIndexing	ps [ \"id\" ]
>2499	PrimaryExpression	\"id\"
>2500	Identifier	ps
>2501	Callee	BM_PAYEE_SCHEME_ID
>2502	Identifier	BM_PAYEE_SCHEME_ID
>2503	Identifier	psId
>2504	Identifier	psId
>2505	IdentifierDeclType	PayeeSchemeId
>2506	IdentifierDeclStatement	 
>2507	IdentifierDecl	rval = false
>2508	AssignmentExpr	rval = false
>2509	Identifier	false
>2510	Identifier	false
>2511	Identifier	rval
>2512	IdentifierDeclType	bool
>2553	FunctionDef	CatalogDatabase 
>2554	ParameterList	ResourceSet & rs , DynamicObject & filters , Connection * c
>2555	Parameter	 
>2556	Identifier	c
>2557	ParameterType	Connection *
>2558	Parameter	 
>2559	Identifier	filters
>2560	ParameterType	DynamicObject &
>2561	Parameter	 
>2562	Identifier	rs
>2563	ParameterType	ResourceSet &
>2564	ReturnType	bool
>2565	CompoundStatement	 
>2566	ReturnStatement	 
>2567	Identifier	rval
>2568	IfStatement	if ( sp != NULL )
>2569	CompoundStatement	 
>2570	IfStatement	if ( rval )
>2571	CompoundStatement	 
>2572	IfStatement	if ( ! rval )
>2573	CompoundStatement	 
>2574	ExpressionStatement	 
>2575	AssignmentExpr	rval = false
>2576	Identifier	false
>2577	Identifier	rval
>2578	ExpressionStatement	 
>2579	CallExpression	Exception 
>2580	ArgumentList	e
>2581	Argument	e
>2582	Identifier	e
>2583	Callee	Exception 
>2584	Identifier	Exception 
>2585	ExpressionStatement	 
>2586	AssignmentExpr	e -> getDetails ( ) [ \"filters\" ] = filters
>2587	Identifier	filters
>2588	ArrayIndexing	e -> getDetails ( ) [ \"filters\" ]
>2589	PrimaryExpression	\"filters\"
>2590	CallExpression	e -> getDetails ( )
>2591	ArgumentList	 
>2592	Callee	e -> getDetails
>2593	PtrMemberAccess	e -> getDetails
>2594	Identifier	getDetails
>2595	Identifier	e
>2596	IdentifierDeclStatement	 
>2597	IdentifierDecl	e = new Exception ( \"Could not populate payees. \" , \"bitmunk.catalog.database.FailedToPopulatePayeeSchemes\" )
>2598	AssignmentExpr	e = new Exception ( \"Could not populate payees. \" , \"bitmunk.catalog.database.FailedToPopulatePayeeSchemes\" )
>2599	Expression	\"Could not populate payees. \" , \"bitmunk.catalog.database.FailedToPopulatePayeeSchemes\"
>2600	PrimaryExpression	\"bitmunk.catalog.database.FailedToPopulatePayeeSchemes\"
>2601	PrimaryExpression	\"Could not populate payees. \"
>2602	Identifier	e
>2603	Identifier	e
>2604	IdentifierDeclType	ExceptionRef
>2605	Condition	 
>2606	UnaryOp	! rval
>2607	Identifier	rval
>2608	UnaryOperator	!
>2609	ExpressionStatement	 
>2610	AssignmentExpr	rs [ \"total\" ] = currentPsOffset + 1
>2611	AdditiveExpression	currentPsOffset + 1
>2612	PrimaryExpression	1
>2613	Identifier	currentPsOffset
>2614	ArrayIndexing	rs [ \"total\" ]
>2615	PrimaryExpression	\"total\"
>2616	Identifier	rs
>2617	ExpressionStatement	 
>2618	AssignmentExpr	rs [ \"num\" ] = rs [ \"resources\" ] -> length ( )
>2619	CallExpression	rs [ \"resources\" ] -> length ( )
>2620	ArgumentList	 
>2621	Callee	rs [ \"resources\" ] -> length
>2622	PtrMemberAccess	rs [ \"resources\" ] -> length
>2623	Identifier	length
>2624	ArrayIndexing	rs [ \"resources\" ]
>2625	PrimaryExpression	\"resources\"
>2626	Identifier	rs
>2627	ArrayIndexing	rs [ \"num\" ]
>2628	PrimaryExpression	\"num\"
>2629	Identifier	rs
>2630	WhileStatement	while ( ( row = sp -> fetch ( ) ) != NULL )
>2631	CompoundStatement	 
>2632	IfStatement	if ( storePayees )
>2633	CompoundStatement	 
>2634	ExpressionStatement	 
>2635	CallExpression	payees -> append ( p )
>2636	ArgumentList	p
>2637	Argument	p
>2638	Identifier	p
>2639	Callee	payees -> append
>2640	PtrMemberAccess	payees -> append
>2641	Identifier	append
>2642	Identifier	payees
>2643	IfStatement	if ( str . length ( ) > 0 )
>2644	CompoundStatement	 
>2645	ExpressionStatement	 
>2646	AssignmentExpr	p [ \"min\" ] = str . c_str ( )
>2647	CallExpression	str . c_str ( )
>2648	ArgumentList	 
>2649	Callee	str . c_str
>2650	MemberAccess	str . c_str
>2651	Identifier	c_str
>2652	Identifier	str
>2653	ArrayIndexing	p [ \"min\" ]
>2654	PrimaryExpression	\"min\"
>2655	Identifier	p
>2656	Condition	 
>2657	RelationalExpression	str . length ( ) > 0
>2658	PrimaryExpression	0
>2659	CallExpression	str . length ( )
>2660	ArgumentList	 
>2661	Callee	str . length
>2662	MemberAccess	str . length
>2663	Identifier	length
>2664	Identifier	str
>2665	ExpressionStatement	 
>2666	CallExpression	row -> getText ( \"min\" , str )
>2667	ArgumentList	\"min\"
>2668	Argument	str
>2669	Identifier	str
>2670	Argument	\"min\"
>2671	PrimaryExpression	\"min\"
>2672	Callee	row -> getText
>2673	PtrMemberAccess	row -> getText
>2674	Identifier	getText
>2675	Identifier	row
>2676	IfStatement	if ( str . length ( ) > 0 )
>2677	CompoundStatement	 
>2678	ExpressionStatement	 
>2679	AssignmentExpr	p [ \"percentage\" ] = str . c_str ( )
>2680	CallExpression	str . c_str ( )
>2681	ArgumentList	 
>2682	Callee	str . c_str
>2683	MemberAccess	str . c_str
>2684	Identifier	c_str
>2685	Identifier	str
>2686	ArrayIndexing	p [ \"percentage\" ]
>2687	PrimaryExpression	\"percentage\"
>2688	Identifier	p
>2689	Condition	 
>2690	RelationalExpression	str . length ( ) > 0
>2691	PrimaryExpression	0
>2692	CallExpression	str . length ( )
>2693	ArgumentList	 
>2694	Callee	str . length
>2695	MemberAccess	str . length
>2696	Identifier	length
>2697	Identifier	str
>2698	ExpressionStatement	 
>2699	CallExpression	row -> getText ( \"percentage\" , str )
>2700	ArgumentList	\"percentage\"
>2701	Argument	str
>2702	Identifier	str
>2703	Argument	\"percentage\"
>2704	PrimaryExpression	\"percentage\"
>2705	Callee	row -> getText
>2706	PtrMemberAccess	row -> getText
>2707	Identifier	getText
>2708	Identifier	row
>2709	IfStatement	if ( str . length ( ) > 0 )
>2710	CompoundStatement	 
>2711	ExpressionStatement	 
>2712	AssignmentExpr	p [ \"amount\" ] = str . c_str ( )
>2713	CallExpression	str . c_str ( )
>2714	ArgumentList	 
>2715	Callee	str . c_str
>2716	MemberAccess	str . c_str
>2717	Identifier	c_str
>2718	Identifier	str
>2719	ArrayIndexing	p [ \"amount\" ]
>2720	PrimaryExpression	\"amount\"
>2721	Identifier	p
>2722	Condition	 
>2723	RelationalExpression	str . length ( ) > 0
>2724	PrimaryExpression	0
>2725	CallExpression	str . length ( )
>2726	ArgumentList	 
>2727	Callee	str . length
>2728	MemberAccess	str . length
>2729	Identifier	length
>2730	Identifier	str
>2731	ExpressionStatement	 
>2732	CallExpression	row -> getText ( \"amount\" , str )
>2733	ArgumentList	\"amount\"
>2734	Argument	str
>2735	Identifier	str
>2736	Argument	\"amount\"
>2737	PrimaryExpression	\"amount\"
>2738	Callee	row -> getText
>2739	PtrMemberAccess	row -> getText
>2740	Identifier	getText
>2741	Identifier	row
>2742	ExpressionStatement	 
>2743	AssignmentExpr	p [ \"description\" ] = str . c_str ( )
>2744	CallExpression	str . c_str ( )
>2745	ArgumentList	 
>2746	Callee	str . c_str
>2747	MemberAccess	str . c_str
>2748	Identifier	c_str
>2749	Identifier	str
>2750	ArrayIndexing	p [ \"description\" ]
>2751	PrimaryExpression	\"description\"
>2752	Identifier	p
>2753	ExpressionStatement	 
>2754	CallExpression	row -> getText ( \"description\" , str )
>2755	ArgumentList	\"description\"
>2756	Argument	str
>2757	Identifier	str
>2758	Argument	\"description\"
>2759	PrimaryExpression	\"description\"
>2760	Callee	row -> getText
>2761	PtrMemberAccess	row -> getText
>2762	Identifier	getText
>2763	Identifier	row
>2764	ExpressionStatement	 
>2765	AssignmentExpr	p [ \"amountType\" ] = str . c_str ( )
>2766	CallExpression	str . c_str ( )
>2767	ArgumentList	 
>2768	Callee	str . c_str
>2769	MemberAccess	str . c_str
>2770	Identifier	c_str
>2771	Identifier	str
>2772	ArrayIndexing	p [ \"amountType\" ]
>2773	PrimaryExpression	\"amountType\"
>2774	Identifier	p
>2775	ExpressionStatement	 
>2776	CallExpression	row -> getText ( \"amount_type\" , str )
>2777	ArgumentList	\"amount_type\"
>2778	Argument	str
>2779	Identifier	str
>2780	Argument	\"amount_type\"
>2781	PrimaryExpression	\"amount_type\"
>2782	Callee	row -> getText
>2783	PtrMemberAccess	row -> getText
>2784	Identifier	getText
>2785	Identifier	row
>2786	ExpressionStatement	 
>2787	CallExpression	BM_ID_SET ( p [ \"id\" ] , accountId )
>2788	ArgumentList	p [ \"id\" ]
>2789	Argument	accountId
>2790	Identifier	accountId
>2791	Argument	p [ \"id\" ]
>2792	ArrayIndexing	p [ \"id\" ]
>2793	PrimaryExpression	\"id\"
>2794	Identifier	p
>2795	Callee	BM_ID_SET
>2796	Identifier	BM_ID_SET
>2797	ExpressionStatement	 
>2798	CallExpression	row -> getUInt64 ( \"account_id\" , accountId )
>2799	ArgumentList	\"account_id\"
>2800	Argument	accountId
>2801	Identifier	accountId
>2802	Argument	\"account_id\"
>2803	PrimaryExpression	\"account_id\"
>2804	Callee	row -> getUInt64
>2805	PtrMemberAccess	row -> getUInt64
>2806	Identifier	getUInt64
>2807	Identifier	row
>2808	IdentifierDeclStatement	 
>2809	IdentifierDecl	p
>2810	Identifier	p
>2811	IdentifierDeclType	Payee
>2812	Condition	 
>2813	Identifier	storePayees
>2814	IfStatement	if ( psId != lastPsId )
>2815	CompoundStatement	 
>2816	IfStatement	if ( ! deleted )
>2817	CompoundStatement	 
>2818	ExpressionStatement	 
>2819	AssignmentExpr	lastPsId = psId
>2820	Identifier	psId
>2821	Identifier	lastPsId
>2822	IfStatement	if ( currentPsOffset >= startingPsOffset && ( uint32_t ) rs [ \"resources\" ] -> length ( ) < psMax )
>2823	ElseStatement	else
>2824	CompoundStatement	 
>2825	ExpressionStatement	 
>2826	AssignmentExpr	storePayees = false
>2827	Identifier	false
>2828	Identifier	storePayees
>2829	CompoundStatement	 
>2830	ExpressionStatement	 
>2831	AssignmentExpr	storePayees = true
>2832	Identifier	true
>2833	Identifier	storePayees
>2834	IfStatement	if ( ! filters [ \"default\" ] -> getBoolean ( ) )
>2835	CompoundStatement	 
>2836	IfStatement	if ( rval )
>2837	CompoundStatement	 
>2838	IfStatement	if ( ( rval = ( row != NULL ) ) )
>2839	CompoundStatement	 
>2840	ExpressionStatement	 
>2841	CallExpression	wareCount -> fetch ( )
>2842	ArgumentList	 
>2843	Callee	wareCount -> fetch
>2844	PtrMemberAccess	wareCount -> fetch
>2845	Identifier	fetch
>2846	Identifier	wareCount
>2847	IfStatement	if ( rval )
>2848	CompoundStatement	 
>2849	ExpressionStatement	 
>2850	AssignmentExpr	ps [ \"wareCount\" ] = count
>2851	Identifier	count
>2852	ArrayIndexing	ps [ \"wareCount\" ]
>2853	PrimaryExpression	\"wareCount\"
>2854	Identifier	ps
>2855	Condition	 
>2856	Identifier	rval
>2857	ExpressionStatement	 
>2858	AssignmentExpr	rval = row -> getUInt64 ( \"ware_count\" , count )
>2859	CallExpression	row -> getUInt64 ( \"ware_count\" , count )
>2860	ArgumentList	\"ware_count\"
>2861	Argument	count
>2862	Identifier	count
>2863	Argument	\"ware_count\"
>2864	PrimaryExpression	\"ware_count\"
>2865	Callee	row -> getUInt64
>2866	PtrMemberAccess	row -> getUInt64
>2867	Identifier	getUInt64
>2868	Identifier	row
>2869	Identifier	rval
>2870	IdentifierDeclStatement	 
>2871	IdentifierDecl	count = 0
>2872	AssignmentExpr	count = 0
>2873	PrimaryExpression	0
>2874	Identifier	count
>2875	Identifier	count
>2876	IdentifierDeclType	uint64_t
>2877	Condition	 
>2878	AssignmentExpr	rval = ( row != NULL )
>2879	EqualityExpression	row != NULL
>2880	Identifier	NULL
>2881	Identifier	row
>2882	Identifier	rval
>2883	IdentifierDeclStatement	 
>2884	IdentifierDecl	* row = wareCount -> fetch ( )
>2885	AssignmentExpr	* row = wareCount -> fetch ( )
>2886	CallExpression	wareCount -> fetch ( )
>2887	ArgumentList	 
>2888	Callee	wareCount -> fetch
>2889	PtrMemberAccess	wareCount -> fetch
>2890	Identifier	fetch
>2891	Identifier	wareCount
>2892	Identifier	row
>2893	Identifier	row
>2894	IdentifierDeclType	Row *
>2895	Condition	 
>2896	Identifier	rval
>2897	ExpressionStatement	 
>2898	AssignmentExpr	rval = rval && wareCount -> setUInt32 ( \"
>2899	AndExpression	rval && wareCount -> setUInt32 ( \"
>2900	AndExpression	wareCount -> setUInt32 ( \"
>2901	CallExpression	wareCount -> execute ( )
>2902	ArgumentList	 
>2903	Callee	wareCount -> execute
>2904	PtrMemberAccess	wareCount -> execute
>2905	Identifier	execute
>2906	Identifier	wareCount
>2907	CallExpression	wareCount -> setUInt32 ( \"
>2908	ArgumentList	\"
>2909	Argument	psId
>2910	Identifier	psId
>2911	Argument	\"
>2912	PrimaryExpression	\"
>2913	Callee	wareCount -> setUInt32
>2914	PtrMemberAccess	wareCount -> setUInt32
>2915	Identifier	setUInt32
>2916	Identifier	wareCount
>2917	Identifier	rval
>2918	Identifier	rval
>2919	ExpressionStatement	 
>2920	AssignmentExpr	ps [ \"updating\" ] = ( updating == 1 )
>2921	EqualityExpression	updating == 1
>2922	PrimaryExpression	1
>2923	Identifier	updating
>2924	ArrayIndexing	ps [ \"updating\" ]
>2925	PrimaryExpression	\"updating\"
>2926	Identifier	ps
>2927	ExpressionStatement	 
>2928	CallExpression	row -> getUInt32 ( \"updating\" , updating )
>2929	ArgumentList	\"updating\"
>2930	Argument	updating
>2931	Identifier	updating
>2932	Argument	\"updating\"
>2933	PrimaryExpression	\"updating\"
>2934	Callee	row -> getUInt32
>2935	PtrMemberAccess	row -> getUInt32
>2936	Identifier	getUInt32
>2937	Identifier	row
>2938	IdentifierDeclStatement	 
>2939	IdentifierDecl	updating = 0
>2940	AssignmentExpr	updating = 0
>2941	PrimaryExpression	0
>2942	Identifier	updating
>2943	Identifier	updating
>2944	IdentifierDeclType	uint32_t
>2945	ExpressionStatement	 
>2946	AssignmentExpr	ps [ \"dirty\" ] = ( dirty == 1 )
>2947	EqualityExpression	dirty == 1
>2948	PrimaryExpression	1
>2949	Identifier	dirty
>2950	ArrayIndexing	ps [ \"dirty\" ]
>2951	PrimaryExpression	\"dirty\"
>2952	Identifier	ps
>2953	ExpressionStatement	 
>2954	CallExpression	row -> getUInt32 ( \"dirty\" , dirty )
>2955	ArgumentList	\"dirty\"
>2956	Argument	dirty
>2957	Identifier	dirty
>2958	Argument	\"dirty\"
>2959	PrimaryExpression	\"dirty\"
>2960	Callee	row -> getUInt32
>2961	PtrMemberAccess	row -> getUInt32
>2962	Identifier	getUInt32
>2963	Identifier	row
>2964	IdentifierDeclStatement	 
>2965	IdentifierDecl	dirty = 0
>2966	AssignmentExpr	dirty = 0
>2967	PrimaryExpression	0
>2968	Identifier	dirty
>2969	Identifier	dirty
>2970	IdentifierDeclType	uint32_t
>2971	IfStatement	if ( problemId != 0 )
>2972	CompoundStatement	 
>2973	ExpressionStatement	 
>2974	AssignmentExpr	rval = rval && JsonReader 
>2975	AndExpression	rval && JsonReader 
>2976	CallExpression	JsonReader 
>2977	ArgumentList	ps [ \"exception\" ]
>2978	Argument	true
>2979	Identifier	true
>2980	Argument	json . length ( )
>2981	CallExpression	json . length ( )
>2982	ArgumentList	 
>2983	Callee	json . length
>2984	MemberAccess	json . length
>2985	Identifier	length
>2986	Identifier	json
>2987	Argument	json . c_str ( )
>2988	CallExpression	json . c_str ( )
>2989	ArgumentList	 
>2990	Callee	json . c_str
>2991	MemberAccess	json . c_str
>2992	Identifier	c_str
>2993	Identifier	json
>2994	Argument	ps [ \"exception\" ]
>2995	ArrayIndexing	ps [ \"exception\" ]
>2996	PrimaryExpression	\"exception\"
>2997	Identifier	ps
>2998	Callee	JsonReader 
>2999	Identifier	JsonReader 
>3000	Identifier	rval
>3001	Identifier	rval
>3002	ExpressionStatement	 
>3003	CallExpression	row -> getText ( \"problem_text\" , json )
>3004	ArgumentList	\"problem_text\"
>3005	Argument	json
>3006	Identifier	json
>3007	Argument	\"problem_text\"
>3008	PrimaryExpression	\"problem_text\"
>3009	Callee	row -> getText
>3010	PtrMemberAccess	row -> getText
>3011	Identifier	getText
>3012	Identifier	row
>3013	IdentifierDeclStatement	 
>3014	IdentifierDecl	json
>3015	Identifier	json
>3016	IdentifierDeclType	string
>3017	Condition	 
>3018	EqualityExpression	problemId != 0
>3019	PrimaryExpression	0
>3020	Identifier	problemId
>3021	ExpressionStatement	 
>3022	CallExpression	row -> getUInt64 ( \"problem_id\" , problemId )
>3023	ArgumentList	\"problem_id\"
>3024	Argument	problemId
>3025	Identifier	problemId
>3026	Argument	\"problem_id\"
>3027	PrimaryExpression	\"problem_id\"
>3028	Callee	row -> getUInt64
>3029	PtrMemberAccess	row -> getUInt64
>3030	Identifier	getUInt64
>3031	Identifier	row
>3032	IdentifierDeclStatement	 
>3033	IdentifierDecl	problemId
>3034	Identifier	problemId
>3035	IdentifierDeclType	uint64_t
>3036	Condition	 
>3037	UnaryOp	! filters [ \"default\" ] -> getBoolean ( )
>3038	CallExpression	filters [ \"default\" ] -> getBoolean ( )
>3039	ArgumentList	 
>3040	Callee	filters [ \"default\" ] -> getBoolean
>3041	PtrMemberAccess	filters [ \"default\" ] -> getBoolean
>3042	Identifier	getBoolean
>3043	ArrayIndexing	filters [ \"default\" ]
>3044	PrimaryExpression	\"default\"
>3045	Identifier	filters
>3046	UnaryOperator	!
>3047	ExpressionStatement	 
>3048	AssignmentExpr	ps [ \"description\" ] = str . c_str ( )
>3049	CallExpression	str . c_str ( )
>3050	ArgumentList	 
>3051	Callee	str . c_str
>3052	MemberAccess	str . c_str
>3053	Identifier	c_str
>3054	Identifier	str
>3055	ArrayIndexing	ps [ \"description\" ]
>3056	PrimaryExpression	\"description\"
>3057	Identifier	ps
>3058	ExpressionStatement	 
>3059	CallExpression	row -> getText ( \"ps_description\" , str )
>3060	ArgumentList	\"ps_description\"
>3061	Argument	str
>3062	Identifier	str
>3063	Argument	\"ps_description\"
>3064	PrimaryExpression	\"ps_description\"
>3065	Callee	row -> getText
>3066	PtrMemberAccess	row -> getText
>3067	Identifier	getText
>3068	Identifier	row
>3069	ExpressionStatement	 
>3070	AssignmentExpr	ps [ \"payees\" ] = payees
>3071	Identifier	payees
>3072	ArrayIndexing	ps [ \"payees\" ]
>3073	PrimaryExpression	\"payees\"
>3074	Identifier	ps
>3075	ExpressionStatement	 
>3076	CallExpression	payees -> setType ( Array )
>3077	ArgumentList	Array
>3078	Argument	Array
>3079	Identifier	Array
>3080	Callee	payees -> setType
>3081	PtrMemberAccess	payees -> setType
>3082	Identifier	setType
>3083	Identifier	payees
>3084	ExpressionStatement	 
>3085	AssignmentExpr	payees = PayeeList ( )
>3086	CallExpression	PayeeList ( )
>3087	ArgumentList	 
>3088	Callee	PayeeList
>3089	Identifier	PayeeList
>3090	Identifier	payees
>3091	ExpressionStatement	 
>3092	AssignmentExpr	ps [ \"id\" ] = psId
>3093	Identifier	psId
>3094	ArrayIndexing	ps [ \"id\" ]
>3095	PrimaryExpression	\"id\"
>3096	Identifier	ps
>3097	ExpressionStatement	 
>3098	AssignmentExpr	ps = rs [ \"resources\" ] -> append ( )
>3099	CallExpression	rs [ \"resources\" ] -> append ( )
>3100	ArgumentList	 
>3101	Callee	rs [ \"resources\" ] -> append
>3102	PtrMemberAccess	rs [ \"resources\" ] -> append
>3103	Identifier	append
>3104	ArrayIndexing	rs [ \"resources\" ]
>3105	PrimaryExpression	\"resources\"
>3106	Identifier	rs
>3107	Identifier	ps
>3108	Condition	 
>3109	AndExpression	currentPsOffset >= startingPsOffset && ( uint32_t ) rs [ \"resources\" ] -> length ( ) < psMax
>3110	RelationalExpression	( uint32_t ) rs [ \"resources\" ] -> length ( ) < psMax
>3111	Identifier	psMax
>3112	CastExpression	( uint32_t ) rs [ \"resources\" ] -> length ( )
>3113	CallExpression	rs [ \"resources\" ] -> length ( )
>3114	ArgumentList	 
>3115	Callee	rs [ \"resources\" ] -> length
>3116	PtrMemberAccess	rs [ \"resources\" ] -> length
>3117	Identifier	length
>3118	ArrayIndexing	rs [ \"resources\" ]
>3119	PrimaryExpression	\"resources\"
>3120	Identifier	rs
>3121	CastTarget	uint32_t
>3122	RelationalExpression	currentPsOffset >= startingPsOffset
>3123	Identifier	startingPsOffset
>3124	Identifier	currentPsOffset
>3125	IfStatement	if ( lastPsId != 0 )
>3126	CompoundStatement	 
>3127	ExpressionStatement	 
>3128	UnaryExpression	++ currentPsOffset
>3129	Identifier	currentPsOffset
>3130	IncDec	++
>3131	Condition	 
>3132	EqualityExpression	lastPsId != 0
>3133	PrimaryExpression	0
>3134	Identifier	lastPsId
>3135	Condition	 
>3136	UnaryOp	! deleted
>3137	Identifier	deleted
>3138	UnaryOperator	!
>3139	ExpressionStatement	 
>3140	CallExpression	row -> getUInt32 ( \"deleted\" , deleted )
>3141	ArgumentList	\"deleted\"
>3142	Argument	deleted
>3143	Identifier	deleted
>3144	Argument	\"deleted\"
>3145	PrimaryExpression	\"deleted\"
>3146	Callee	row -> getUInt32
>3147	PtrMemberAccess	row -> getUInt32
>3148	Identifier	getUInt32
>3149	Identifier	row
>3150	IdentifierDeclStatement	 
>3151	IdentifierDecl	deleted = 0
>3152	AssignmentExpr	deleted = 0
>3153	PrimaryExpression	0
>3154	Identifier	deleted
>3155	Identifier	deleted
>3156	IdentifierDeclType	uint32_t
>3157	Condition	 
>3158	EqualityExpression	psId != lastPsId
>3159	Identifier	lastPsId
>3160	Identifier	psId
>3161	ExpressionStatement	 
>3162	CallExpression	row -> getUInt32 ( \"ps_id\" , psId )
>3163	ArgumentList	\"ps_id\"
>3164	Argument	psId
>3165	Identifier	psId
>3166	Argument	\"ps_id\"
>3167	PrimaryExpression	\"ps_id\"
>3168	Callee	row -> getUInt32
>3169	PtrMemberAccess	row -> getUInt32
>3170	Identifier	getUInt32
>3171	Identifier	row
>3172	Condition	 
>3173	EqualityExpression	( row = sp -> fetch ( ) ) != NULL
>3174	Identifier	NULL
>3175	AssignmentExpr	row = sp -> fetch ( )
>3176	CallExpression	sp -> fetch ( )
>3177	ArgumentList	 
>3178	Callee	sp -> fetch
>3179	PtrMemberAccess	sp -> fetch
>3180	Identifier	fetch
>3181	Identifier	sp
>3182	Identifier	row
>3183	IdentifierDeclStatement	 
>3184	IdentifierDecl	* row
>3185	Identifier	row
>3186	IdentifierDeclType	Row *
>3187	IdentifierDeclStatement	 
>3188	IdentifierDecl	storePayees = false
>3189	AssignmentExpr	storePayees = false
>3190	Identifier	false
>3191	Identifier	false
>3192	Identifier	storePayees
>3193	IdentifierDeclType	bool
>3194	IdentifierDeclStatement	 
>3195	IdentifierDecl	psMax = filters -> hasMember ( \"num\" ) ? filters [ \"num\" ] -> getUInt32 ( ) 
>3196	AssignmentExpr	psMax = filters -> hasMember ( \"num\" ) ? filters [ \"num\" ] -> getUInt32 ( ) 
>3197	ConditionalExpression	filters -> hasMember ( \"num\" ) ? filters [ \"num\" ] -> getUInt32 ( ) 
>3198	Identifier	MAX_PAYEE_SCHEMES
>3199	CallExpression	filters [ \"num\" ] -> getUInt32 ( )
>3200	ArgumentList	 
>3201	Callee	filters [ \"num\" ] -> getUInt32
>3202	PtrMemberAccess	filters [ \"num\" ] -> getUInt32
>3203	Identifier	getUInt32
>3204	ArrayIndexing	filters [ \"num\" ]
>3205	PrimaryExpression	\"num\"
>3206	Identifier	filters
>3207	Condition	filters -> hasMember ( \"num\" )
>3208	CallExpression	filters -> hasMember ( \"num\" )
>3209	ArgumentList	\"num\"
>3210	Argument	\"num\"
>3211	PrimaryExpression	\"num\"
>3212	Callee	filters -> hasMember
>3213	PtrMemberAccess	filters -> hasMember
>3214	Identifier	hasMember
>3215	Identifier	filters
>3216	Identifier	psMax
>3217	Identifier	psMax
>3218	IdentifierDeclType	uint32_t
>3219	IdentifierDeclStatement	 
>3220	IdentifierDecl	startingPsOffset = filters [ \"start\" ] -> getUInt32 ( )
>3221	AssignmentExpr	startingPsOffset = filters [ \"start\" ] -> getUInt32 ( )
>3222	CallExpression	filters [ \"start\" ] -> getUInt32 ( )
>3223	ArgumentList	 
>3224	Callee	filters [ \"start\" ] -> getUInt32
>3225	PtrMemberAccess	filters [ \"start\" ] -> getUInt32
>3226	Identifier	getUInt32
>3227	ArrayIndexing	filters [ \"start\" ]
>3228	PrimaryExpression	\"start\"
>3229	Identifier	filters
>3230	Identifier	startingPsOffset
>3231	Identifier	startingPsOffset
>3232	IdentifierDeclType	uint32_t
>3233	IdentifierDeclStatement	 
>3234	IdentifierDecl	currentPsOffset = 0
>3235	AssignmentExpr	currentPsOffset = 0
>3236	PrimaryExpression	0
>3237	Identifier	currentPsOffset
>3238	Identifier	currentPsOffset
>3239	IdentifierDeclType	uint32_t
>3240	IdentifierDeclStatement	 
>3241	IdentifierDecl	str
>3242	Identifier	str
>3243	IdentifierDeclType	string
>3244	IdentifierDeclStatement	 
>3245	IdentifierDecl	accountId
>3246	Identifier	accountId
>3247	IdentifierDeclType	AccountId
>3248	IdentifierDeclStatement	 
>3249	IdentifierDecl	psId = 0
>3250	AssignmentExpr	psId = 0
>3251	PrimaryExpression	0
>3252	Identifier	psId
>3253	Identifier	psId
>3254	IdentifierDeclType	PayeeSchemeId
>3255	IdentifierDeclStatement	 
>3256	IdentifierDecl	lastPsId = 0
>3257	AssignmentExpr	lastPsId = 0
>3258	PrimaryExpression	0
>3259	Identifier	lastPsId
>3260	Identifier	lastPsId
>3261	IdentifierDeclType	PayeeSchemeId
>3262	IdentifierDeclStatement	 
>3263	IdentifierDecl	payees ( NULL )
>3264	Identifier	NULL
>3265	Identifier	payees
>3266	IdentifierDeclType	PayeeList
>3267	IdentifierDeclStatement	 
>3268	IdentifierDecl	ps ( NULL )
>3269	Identifier	NULL
>3270	Identifier	ps
>3271	IdentifierDeclType	PayeeScheme
>3272	Condition	 
>3273	Identifier	rval
>3274	ExpressionStatement	 
>3275	AssignmentExpr	rval = sp -> execute ( )
>3276	CallExpression	sp -> execute ( )
>3277	ArgumentList	 
>3278	Callee	sp -> execute
>3279	PtrMemberAccess	sp -> execute
>3280	Identifier	execute
>3281	Identifier	sp
>3282	Identifier	rval
>3283	Condition	 
>3284	EqualityExpression	sp != NULL
>3285	Identifier	NULL
>3286	Identifier	sp
>3287	ExpressionStatement	 
>3288	AssignmentExpr	rs [ \"start\" ] = filters [ \"start\" ] -> getUInt32 ( )
>3289	CallExpression	filters [ \"start\" ] -> getUInt32 ( )
>3290	ArgumentList	 
>3291	Callee	filters [ \"start\" ] -> getUInt32
>3292	PtrMemberAccess	filters [ \"start\" ] -> getUInt32
>3293	Identifier	getUInt32
>3294	ArrayIndexing	filters [ \"start\" ]
>3295	PrimaryExpression	\"start\"
>3296	Identifier	filters
>3297	ArrayIndexing	rs [ \"start\" ]
>3298	PrimaryExpression	\"start\"
>3299	Identifier	rs
>3300	ExpressionStatement	 
>3301	CallExpression	rs [ \"resources\" ] -> setType ( Array )
>3302	ArgumentList	Array
>3303	Argument	Array
>3304	Identifier	Array
>3305	Callee	rs [ \"resources\" ] -> setType
>3306	PtrMemberAccess	rs [ \"resources\" ] -> setType
>3307	Identifier	setType
>3308	ArrayIndexing	rs [ \"resources\" ]
>3309	PrimaryExpression	\"resources\"
>3310	Identifier	rs
>3311	ExpressionStatement	 
>3312	AssignmentExpr	rs [ \"num\" ] = 0
>3313	PrimaryExpression	0
>3314	ArrayIndexing	rs [ \"num\" ]
>3315	PrimaryExpression	\"num\"
>3316	Identifier	rs
>3317	ExpressionStatement	 
>3318	Statement	 
>3319	Statement	 
>3320	Statement	 
>3321	Statement	 
>3322	Statement	 
>3323	Statement	 
>3324	Statement	 
>3325	Statement	 
>3326	Statement	 
>3327	Statement	 
>3328	Statement	 
>3329	Statement	 
>3330	ExpressionStatement	 
>3331	Statement	 
>3332	Statement	 
>3333	Statement	 
>3334	Statement	 
>3335	Statement	 
>3336	Statement	 
>3337	Statement	 
>3338	Statement	 
>3339	Statement	 
>3340	Statement	 
>3341	Statement	 
>3342	Statement	 
>3343	Statement	 
>3344	Statement	 
>3345	Statement	 
>3346	Statement	 
>3347	Statement	 
>3348	Statement	 
>3349	Statement	 
>3350	Statement	 
>3351	Statement	 
>3352	Statement	 
>3353	Statement	 
>3354	Statement	 
>3355	Statement	 
>3356	IdentifierDeclStatement	 
>3357	IdentifierDecl	rval = false
>3358	AssignmentExpr	rval = false
>3359	Identifier	false
>3360	Identifier	false
>3361	Identifier	rval
>3362	IdentifierDeclType	bool
>3427	FunctionDef	CatalogDatabase 
>3428	ParameterList	PayeeSchemeId & psId , Connection * c
>3429	Parameter	 
>3430	Identifier	c
>3431	ParameterType	Connection *
>3432	Parameter	 
>3433	Identifier	psId
>3434	ParameterType	PayeeSchemeId &
>3435	ReturnType	bool
>3436	CompoundStatement	 
>3437	ReturnStatement	 
>3438	Identifier	rval
>3439	IfStatement	if ( rval )
>3440	CompoundStatement	 
>3441	IfStatement	if ( row != NULL )
>3442	CompoundStatement	 
>3443	ExpressionStatement	 
>3444	CallExpression	s -> fetch ( )
>3445	ArgumentList	 
>3446	Callee	s -> fetch
>3447	PtrMemberAccess	s -> fetch
>3448	Identifier	fetch
>3449	Identifier	s
>3450	ExpressionStatement	 
>3451	AssignmentExpr	rval = row -> getUInt32 ( \"payee_scheme_id\" , psId )
>3452	CallExpression	row -> getUInt32 ( \"payee_scheme_id\" , psId )
>3453	ArgumentList	\"payee_scheme_id\"
>3454	Argument	psId
>3455	Identifier	psId
>3456	Argument	\"payee_scheme_id\"
>3457	PrimaryExpression	\"payee_scheme_id\"
>3458	Callee	row -> getUInt32
>3459	PtrMemberAccess	row -> getUInt32
>3460	Identifier	getUInt32
>3461	Identifier	row
>3462	Identifier	rval
>3463	Condition	 
>3464	EqualityExpression	row != NULL
>3465	Identifier	NULL
>3466	Identifier	row
>3467	IdentifierDeclStatement	 
>3468	IdentifierDecl	* row = s -> fetch ( )
>3469	AssignmentExpr	* row = s -> fetch ( )
>3470	CallExpression	s -> fetch ( )
>3471	ArgumentList	 
>3472	Callee	s -> fetch
>3473	PtrMemberAccess	s -> fetch
>3474	Identifier	fetch
>3475	Identifier	s
>3476	Identifier	row
>3477	Identifier	row
>3478	IdentifierDeclType	Row *
>3479	Condition	 
>3480	Identifier	rval
>3481	ExpressionStatement	 
>3482	AssignmentExpr	rval = ( s != NULL ) && s -> execute ( )
>3483	AndExpression	( s != NULL ) && s -> execute ( )
>3484	CallExpression	s -> execute ( )
>3485	ArgumentList	 
>3486	Callee	s -> execute
>3487	PtrMemberAccess	s -> execute
>3488	Identifier	execute
>3489	Identifier	s
>3490	EqualityExpression	s != NULL
>3491	Identifier	NULL
>3492	Identifier	s
>3493	Identifier	rval
>3494	ExpressionStatement	 
>3495	Statement	 
>3496	Statement	 
>3497	Statement	 
>3498	Statement	 
>3499	Statement	 
>3500	Statement	 
>3501	Statement	 
>3502	Statement	 
>3503	Statement	 
>3504	Statement	 
>3505	Statement	 
>3506	Statement	 
>3507	ExpressionStatement	 
>3508	AssignmentExpr	psId = 0
>3509	PrimaryExpression	0
>3510	Identifier	psId
>3511	IdentifierDeclStatement	 
>3512	IdentifierDecl	rval = false
>3513	AssignmentExpr	rval = false
>3514	Identifier	false
>3515	Identifier	false
>3516	Identifier	rval
>3517	IdentifierDeclType	bool
>3533	FunctionDef	CatalogDatabase 
>3534	ParameterList	PayeeScheme & ps , DynamicObject & filters , Connection * c
>3535	Parameter	 
>3536	Identifier	c
>3537	ParameterType	Connection *
>3538	Parameter	 
>3539	Identifier	filters
>3540	ParameterType	DynamicObject &
>3541	Parameter	 
>3542	Identifier	ps
>3543	ParameterType	PayeeScheme &
>3544	ReturnType	bool
>3545	CompoundStatement	 
>3546	ReturnStatement	 
>3547	Identifier	rval
>3548	IfStatement	if ( sp != NULL )
>3549	CompoundStatement	 
>3550	IfStatement	if ( rval )
>3551	CompoundStatement	 
>3552	IfStatement	if ( ! rval )
>3553	CompoundStatement	 
>3554	ExpressionStatement	 
>3555	AssignmentExpr	rval = false
>3556	Identifier	false
>3557	Identifier	rval
>3558	ExpressionStatement	 
>3559	CallExpression	Exception 
>3560	ArgumentList	e
>3561	Argument	e
>3562	Identifier	e
>3563	Callee	Exception 
>3564	Identifier	Exception 
>3565	ExpressionStatement	 
>3566	CallExpression	BM_ID_SET ( e -> getDetails ( ) [ \"payeeSchemeId\" ] , psId )
>3567	ArgumentList	e -> getDetails ( ) [ \"payeeSchemeId\" ]
>3568	Argument	psId
>3569	Identifier	psId
>3570	Argument	e -> getDetails ( ) [ \"payeeSchemeId\" ]
>3571	ArrayIndexing	e -> getDetails ( ) [ \"payeeSchemeId\" ]
>3572	PrimaryExpression	\"payeeSchemeId\"
>3573	CallExpression	e -> getDetails ( )
>3574	ArgumentList	 
>3575	Callee	e -> getDetails
>3576	PtrMemberAccess	e -> getDetails
>3577	Identifier	getDetails
>3578	Identifier	e
>3579	Callee	BM_ID_SET
>3580	Identifier	BM_ID_SET
>3581	IdentifierDeclStatement	 
>3582	IdentifierDecl	e = new Exception ( \"Could not populate payees. Invalid payee scheme ID.\" , \"bitmunk.catalog.database.InvalidPayeeSchemeId\" )
>3583	AssignmentExpr	e = new Exception ( \"Could not populate payees. Invalid payee scheme ID.\" , \"bitmunk.catalog.database.InvalidPayeeSchemeId\" )
>3584	Expression	\"Could not populate payees. Invalid payee scheme ID.\" , \"bitmunk.catalog.database.InvalidPayeeSchemeId\"
>3585	PrimaryExpression	\"bitmunk.catalog.database.InvalidPayeeSchemeId\"
>3586	PrimaryExpression	\"Could not populate payees. Invalid payee scheme ID.\"
>3587	Identifier	e
>3588	Identifier	e
>3589	IdentifierDeclType	ExceptionRef
>3590	Condition	 
>3591	UnaryOp	! rval
>3592	Identifier	rval
>3593	UnaryOperator	!
>3594	WhileStatement	while ( ( row = sp -> fetch ( ) ) != NULL )
>3595	CompoundStatement	 
>3596	IfStatement	if ( str . length ( ) > 0 )
>3597	CompoundStatement	 
>3598	ExpressionStatement	 
>3599	AssignmentExpr	p [ \"min\" ] = str . c_str ( )
>3600	CallExpression	str . c_str ( )
>3601	ArgumentList	 
>3602	Callee	str . c_str
>3603	MemberAccess	str . c_str
>3604	Identifier	c_str
>3605	Identifier	str
>3606	ArrayIndexing	p [ \"min\" ]
>3607	PrimaryExpression	\"min\"
>3608	Identifier	p
>3609	Condition	 
>3610	RelationalExpression	str . length ( ) > 0
>3611	PrimaryExpression	0
>3612	CallExpression	str . length ( )
>3613	ArgumentList	 
>3614	Callee	str . length
>3615	MemberAccess	str . length
>3616	Identifier	length
>3617	Identifier	str
>3618	ExpressionStatement	 
>3619	CallExpression	row -> getText ( \"min\" , str )
>3620	ArgumentList	\"min\"
>3621	Argument	str
>3622	Identifier	str
>3623	Argument	\"min\"
>3624	PrimaryExpression	\"min\"
>3625	Callee	row -> getText
>3626	PtrMemberAccess	row -> getText
>3627	Identifier	getText
>3628	Identifier	row
>3629	IfStatement	if ( str . length ( ) > 0 )
>3630	CompoundStatement	 
>3631	ExpressionStatement	 
>3632	AssignmentExpr	p [ \"percentage\" ] = str . c_str ( )
>3633	CallExpression	str . c_str ( )
>3634	ArgumentList	 
>3635	Callee	str . c_str
>3636	MemberAccess	str . c_str
>3637	Identifier	c_str
>3638	Identifier	str
>3639	ArrayIndexing	p [ \"percentage\" ]
>3640	PrimaryExpression	\"percentage\"
>3641	Identifier	p
>3642	Condition	 
>3643	RelationalExpression	str . length ( ) > 0
>3644	PrimaryExpression	0
>3645	CallExpression	str . length ( )
>3646	ArgumentList	 
>3647	Callee	str . length
>3648	MemberAccess	str . length
>3649	Identifier	length
>3650	Identifier	str
>3651	ExpressionStatement	 
>3652	CallExpression	row -> getText ( \"percentage\" , str )
>3653	ArgumentList	\"percentage\"
>3654	Argument	str
>3655	Identifier	str
>3656	Argument	\"percentage\"
>3657	PrimaryExpression	\"percentage\"
>3658	Callee	row -> getText
>3659	PtrMemberAccess	row -> getText
>3660	Identifier	getText
>3661	Identifier	row
>3662	IfStatement	if ( str . length ( ) > 0 )
>3663	CompoundStatement	 
>3664	ExpressionStatement	 
>3665	AssignmentExpr	p [ \"amount\" ] = str . c_str ( )
>3666	CallExpression	str . c_str ( )
>3667	ArgumentList	 
>3668	Callee	str . c_str
>3669	MemberAccess	str . c_str
>3670	Identifier	c_str
>3671	Identifier	str
>3672	ArrayIndexing	p [ \"amount\" ]
>3673	PrimaryExpression	\"amount\"
>3674	Identifier	p
>3675	Condition	 
>3676	RelationalExpression	str . length ( ) > 0
>3677	PrimaryExpression	0
>3678	CallExpression	str . length ( )
>3679	ArgumentList	 
>3680	Callee	str . length
>3681	MemberAccess	str . length
>3682	Identifier	length
>3683	Identifier	str
>3684	ExpressionStatement	 
>3685	CallExpression	row -> getText ( \"amount\" , str )
>3686	ArgumentList	\"amount\"
>3687	Argument	str
>3688	Identifier	str
>3689	Argument	\"amount\"
>3690	PrimaryExpression	\"amount\"
>3691	Callee	row -> getText
>3692	PtrMemberAccess	row -> getText
>3693	Identifier	getText
>3694	Identifier	row
>3695	ExpressionStatement	 
>3696	AssignmentExpr	p [ \"description\" ] = str . c_str ( )
>3697	CallExpression	str . c_str ( )
>3698	ArgumentList	 
>3699	Callee	str . c_str
>3700	MemberAccess	str . c_str
>3701	Identifier	c_str
>3702	Identifier	str
>3703	ArrayIndexing	p [ \"description\" ]
>3704	PrimaryExpression	\"description\"
>3705	Identifier	p
>3706	ExpressionStatement	 
>3707	CallExpression	row -> getText ( \"description\" , str )
>3708	ArgumentList	\"description\"
>3709	Argument	str
>3710	Identifier	str
>3711	Argument	\"description\"
>3712	PrimaryExpression	\"description\"
>3713	Callee	row -> getText
>3714	PtrMemberAccess	row -> getText
>3715	Identifier	getText
>3716	Identifier	row
>3717	ExpressionStatement	 
>3718	AssignmentExpr	p [ \"amountType\" ] = str . c_str ( )
>3719	CallExpression	str . c_str ( )
>3720	ArgumentList	 
>3721	Callee	str . c_str
>3722	MemberAccess	str . c_str
>3723	Identifier	c_str
>3724	Identifier	str
>3725	ArrayIndexing	p [ \"amountType\" ]
>3726	PrimaryExpression	\"amountType\"
>3727	Identifier	p
>3728	ExpressionStatement	 
>3729	CallExpression	row -> getText ( \"amount_type\" , str )
>3730	ArgumentList	\"amount_type\"
>3731	Argument	str
>3732	Identifier	str
>3733	Argument	\"amount_type\"
>3734	PrimaryExpression	\"amount_type\"
>3735	Callee	row -> getText
>3736	PtrMemberAccess	row -> getText
>3737	Identifier	getText
>3738	Identifier	row
>3739	ExpressionStatement	 
>3740	CallExpression	BM_ID_SET ( p [ \"id\" ] , accountId )
>3741	ArgumentList	p [ \"id\" ]
>3742	Argument	accountId
>3743	Identifier	accountId
>3744	Argument	p [ \"id\" ]
>3745	ArrayIndexing	p [ \"id\" ]
>3746	PrimaryExpression	\"id\"
>3747	Identifier	p
>3748	Callee	BM_ID_SET
>3749	Identifier	BM_ID_SET
>3750	ExpressionStatement	 
>3751	CallExpression	row -> getUInt64 ( \"account_id\" , accountId )
>3752	ArgumentList	\"account_id\"
>3753	Argument	accountId
>3754	Identifier	accountId
>3755	Argument	\"account_id\"
>3756	PrimaryExpression	\"account_id\"
>3757	Callee	row -> getUInt64
>3758	PtrMemberAccess	row -> getUInt64
>3759	Identifier	getUInt64
>3760	Identifier	row
>3761	IdentifierDeclStatement	 
>3762	IdentifierDecl	p = payees -> append ( )
>3763	AssignmentExpr	p = payees -> append ( )
>3764	CallExpression	payees -> append ( )
>3765	ArgumentList	 
>3766	Callee	payees -> append
>3767	PtrMemberAccess	payees -> append
>3768	Identifier	append
>3769	Identifier	payees
>3770	Identifier	p
>3771	Identifier	p
>3772	IdentifierDeclType	Payee
>3773	ExpressionStatement	 
>3774	AssignmentExpr	rval = true
>3775	Identifier	true
>3776	Identifier	rval
>3777	IfStatement	if ( ! rval )
>3778	CompoundStatement	 
>3779	IfStatement	if ( ! filters [ \"default\" ] -> getBoolean ( ) )
>3780	CompoundStatement	 
>3781	IfStatement	if ( rval )
>3782	CompoundStatement	 
>3783	IfStatement	if ( ( rval = ( row != NULL ) ) )
>3784	CompoundStatement	 
>3785	ExpressionStatement	 
>3786	CallExpression	s -> fetch ( )
>3787	ArgumentList	 
>3788	Callee	s -> fetch
>3789	PtrMemberAccess	s -> fetch
>3790	Identifier	fetch
>3791	Identifier	s
>3792	IfStatement	if ( rval )
>3793	CompoundStatement	 
>3794	ExpressionStatement	 
>3795	AssignmentExpr	ps [ \"wareCount\" ] = count
>3796	Identifier	count
>3797	ArrayIndexing	ps [ \"wareCount\" ]
>3798	PrimaryExpression	\"wareCount\"
>3799	Identifier	ps
>3800	Condition	 
>3801	Identifier	rval
>3802	ExpressionStatement	 
>3803	AssignmentExpr	rval = row -> getUInt64 ( \"ware_count\" , count )
>3804	CallExpression	row -> getUInt64 ( \"ware_count\" , count )
>3805	ArgumentList	\"ware_count\"
>3806	Argument	count
>3807	Identifier	count
>3808	Argument	\"ware_count\"
>3809	PrimaryExpression	\"ware_count\"
>3810	Callee	row -> getUInt64
>3811	PtrMemberAccess	row -> getUInt64
>3812	Identifier	getUInt64
>3813	Identifier	row
>3814	Identifier	rval
>3815	IdentifierDeclStatement	 
>3816	IdentifierDecl	count = 0
>3817	AssignmentExpr	count = 0
>3818	PrimaryExpression	0
>3819	Identifier	count
>3820	Identifier	count
>3821	IdentifierDeclType	uint64_t
>3822	Condition	 
>3823	AssignmentExpr	rval = ( row != NULL )
>3824	EqualityExpression	row != NULL
>3825	Identifier	NULL
>3826	Identifier	row
>3827	Identifier	rval
>3828	IdentifierDeclStatement	 
>3829	IdentifierDecl	* row = s -> fetch ( )
>3830	AssignmentExpr	* row = s -> fetch ( )
>3831	CallExpression	s -> fetch ( )
>3832	ArgumentList	 
>3833	Callee	s -> fetch
>3834	PtrMemberAccess	s -> fetch
>3835	Identifier	fetch
>3836	Identifier	s
>3837	Identifier	row
>3838	Identifier	row
>3839	IdentifierDeclType	Row *
>3840	Condition	 
>3841	Identifier	rval
>3842	ExpressionStatement	 
>3843	AssignmentExpr	rval = ( s != NULL ) && s -> setUInt32 ( \"
>3844	AndExpression	( s != NULL ) && s -> setUInt32 ( \"
>3845	AndExpression	s -> setUInt32 ( \"
>3846	CallExpression	s -> execute ( )
>3847	ArgumentList	 
>3848	Callee	s -> execute
>3849	PtrMemberAccess	s -> execute
>3850	Identifier	execute
>3851	Identifier	s
>3852	CallExpression	s -> setUInt32 ( \"
>3853	ArgumentList	\"
>3854	Argument	psId
>3855	Identifier	psId
>3856	Argument	\"
>3857	PrimaryExpression	\"
>3858	Callee	s -> setUInt32
>3859	PtrMemberAccess	s -> setUInt32
>3860	Identifier	setUInt32
>3861	Identifier	s
>3862	EqualityExpression	s != NULL
>3863	Identifier	NULL
>3864	Identifier	s
>3865	Identifier	rval
>3866	ExpressionStatement	 
>3867	Statement	 
>3868	Statement	 
>3869	Statement	 
>3870	Statement	 
>3871	Statement	 
>3872	Statement	 
>3873	Statement	 
>3874	Statement	 
>3875	Statement	 
>3876	Statement	 
>3877	Statement	 
>3878	Statement	 
>3879	IfStatement	if ( rval )
>3880	CompoundStatement	 
>3881	ExpressionStatement	 
>3882	AssignmentExpr	ps [ \"deleted\" ] = ( deleted == 0 ) ? false 
>3883	ConditionalExpression	( deleted == 0 ) ? false 
>3884	Identifier	true
>3885	Identifier	false
>3886	Condition	deleted == 0
>3887	EqualityExpression	deleted == 0
>3888	PrimaryExpression	0
>3889	Identifier	deleted
>3890	ArrayIndexing	ps [ \"deleted\" ]
>3891	PrimaryExpression	\"deleted\"
>3892	Identifier	ps
>3893	Condition	 
>3894	Identifier	rval
>3895	ExpressionStatement	 
>3896	AssignmentExpr	rval = rval && row -> getUInt32 ( \"deleted\" , deleted )
>3897	AndExpression	rval && row -> getUInt32 ( \"deleted\" , deleted )
>3898	CallExpression	row -> getUInt32 ( \"deleted\" , deleted )
>3899	ArgumentList	\"deleted\"
>3900	Argument	deleted
>3901	Identifier	deleted
>3902	Argument	\"deleted\"
>3903	PrimaryExpression	\"deleted\"
>3904	Callee	row -> getUInt32
>3905	PtrMemberAccess	row -> getUInt32
>3906	Identifier	getUInt32
>3907	Identifier	row
>3908	Identifier	rval
>3909	Identifier	rval
>3910	IdentifierDeclStatement	 
>3911	IdentifierDecl	deleted = 0
>3912	AssignmentExpr	deleted = 0
>3913	PrimaryExpression	0
>3914	Identifier	deleted
>3915	Identifier	deleted
>3916	IdentifierDeclType	uint32_t
>3917	IfStatement	if ( rval )
>3918	CompoundStatement	 
>3919	ExpressionStatement	 
>3920	AssignmentExpr	ps [ \"dirty\" ] = ( dirty == 1 )
>3921	EqualityExpression	dirty == 1
>3922	PrimaryExpression	1
>3923	Identifier	dirty
>3924	ArrayIndexing	ps [ \"dirty\" ]
>3925	PrimaryExpression	\"dirty\"
>3926	Identifier	ps
>3927	Condition	 
>3928	Identifier	rval
>3929	ExpressionStatement	 
>3930	AssignmentExpr	rval = rval && row -> getUInt32 ( \"dirty\" , dirty )
>3931	AndExpression	rval && row -> getUInt32 ( \"dirty\" , dirty )
>3932	CallExpression	row -> getUInt32 ( \"dirty\" , dirty )
>3933	ArgumentList	\"dirty\"
>3934	Argument	dirty
>3935	Identifier	dirty
>3936	Argument	\"dirty\"
>3937	PrimaryExpression	\"dirty\"
>3938	Callee	row -> getUInt32
>3939	PtrMemberAccess	row -> getUInt32
>3940	Identifier	getUInt32
>3941	Identifier	row
>3942	Identifier	rval
>3943	Identifier	rval
>3944	IdentifierDeclStatement	 
>3945	IdentifierDecl	dirty = 0
>3946	AssignmentExpr	dirty = 0
>3947	PrimaryExpression	0
>3948	Identifier	dirty
>3949	Identifier	dirty
>3950	IdentifierDeclType	uint32_t
>3951	IfStatement	if ( rval )
>3952	CompoundStatement	 
>3953	ExpressionStatement	 
>3954	AssignmentExpr	ps [ \"updating\" ] = ( updating == 1 )
>3955	EqualityExpression	updating == 1
>3956	PrimaryExpression	1
>3957	Identifier	updating
>3958	ArrayIndexing	ps [ \"updating\" ]
>3959	PrimaryExpression	\"updating\"
>3960	Identifier	ps
>3961	Condition	 
>3962	Identifier	rval
>3963	ExpressionStatement	 
>3964	AssignmentExpr	rval = rval && row -> getUInt32 ( \"updating\" , updating )
>3965	AndExpression	rval && row -> getUInt32 ( \"updating\" , updating )
>3966	CallExpression	row -> getUInt32 ( \"updating\" , updating )
>3967	ArgumentList	\"updating\"
>3968	Argument	updating
>3969	Identifier	updating
>3970	Argument	\"updating\"
>3971	PrimaryExpression	\"updating\"
>3972	Callee	row -> getUInt32
>3973	PtrMemberAccess	row -> getUInt32
>3974	Identifier	getUInt32
>3975	Identifier	row
>3976	Identifier	rval
>3977	Identifier	rval
>3978	IdentifierDeclStatement	 
>3979	IdentifierDecl	updating = 0
>3980	AssignmentExpr	updating = 0
>3981	PrimaryExpression	0
>3982	Identifier	updating
>3983	Identifier	updating
>3984	IdentifierDeclType	uint32_t
>3985	IfStatement	if ( rval && problemId != 0 )
>3986	CompoundStatement	 
>3987	ExpressionStatement	 
>3988	AssignmentExpr	rval = rval && JsonReader 
>3989	AndExpression	rval && JsonReader 
>3990	CallExpression	JsonReader 
>3991	ArgumentList	ps [ \"exception\" ]
>3992	Argument	true
>3993	Identifier	true
>3994	Argument	json . length ( )
>3995	CallExpression	json . length ( )
>3996	ArgumentList	 
>3997	Callee	json . length
>3998	MemberAccess	json . length
>3999	Identifier	length
>4000	Identifier	json
>4001	Argument	json . c_str ( )
>4002	CallExpression	json . c_str ( )
>4003	ArgumentList	 
>4004	Callee	json . c_str
>4005	MemberAccess	json . c_str
>4006	Identifier	c_str
>4007	Identifier	json
>4008	Argument	ps [ \"exception\" ]
>4009	ArrayIndexing	ps [ \"exception\" ]
>4010	PrimaryExpression	\"exception\"
>4011	Identifier	ps
>4012	Callee	JsonReader 
>4013	Identifier	JsonReader 
>4014	Identifier	rval
>4015	Identifier	rval
>4016	ExpressionStatement	 
>4017	CallExpression	row -> getText ( \"problem_text\" , json )
>4018	ArgumentList	\"problem_text\"
>4019	Argument	json
>4020	Identifier	json
>4021	Argument	\"problem_text\"
>4022	PrimaryExpression	\"problem_text\"
>4023	Callee	row -> getText
>4024	PtrMemberAccess	row -> getText
>4025	Identifier	getText
>4026	Identifier	row
>4027	IdentifierDeclStatement	 
>4028	IdentifierDecl	json
>4029	Identifier	json
>4030	IdentifierDeclType	string
>4031	Condition	 
>4032	AndExpression	rval && problemId != 0
>4033	EqualityExpression	problemId != 0
>4034	PrimaryExpression	0
>4035	Identifier	problemId
>4036	Identifier	rval
>4037	ExpressionStatement	 
>4038	AssignmentExpr	rval = row -> getUInt64 ( \"problem_id\" , problemId )
>4039	CallExpression	row -> getUInt64 ( \"problem_id\" , problemId )
>4040	ArgumentList	\"problem_id\"
>4041	Argument	problemId
>4042	Identifier	problemId
>4043	Argument	\"problem_id\"
>4044	PrimaryExpression	\"problem_id\"
>4045	Callee	row -> getUInt64
>4046	PtrMemberAccess	row -> getUInt64
>4047	Identifier	getUInt64
>4048	Identifier	row
>4049	Identifier	rval
>4050	IdentifierDeclStatement	 
>4051	IdentifierDecl	problemId
>4052	Identifier	problemId
>4053	IdentifierDeclType	uint64_t
>4054	Condition	 
>4055	UnaryOp	! filters [ \"default\" ] -> getBoolean ( )
>4056	CallExpression	filters [ \"default\" ] -> getBoolean ( )
>4057	ArgumentList	 
>4058	Callee	filters [ \"default\" ] -> getBoolean
>4059	PtrMemberAccess	filters [ \"default\" ] -> getBoolean
>4060	Identifier	getBoolean
>4061	ArrayIndexing	filters [ \"default\" ]
>4062	PrimaryExpression	\"default\"
>4063	Identifier	filters
>4064	UnaryOperator	!
>4065	ExpressionStatement	 
>4066	AssignmentExpr	ps [ \"description\" ] = str . c_str ( )
>4067	CallExpression	str . c_str ( )
>4068	ArgumentList	 
>4069	Callee	str . c_str
>4070	MemberAccess	str . c_str
>4071	Identifier	c_str
>4072	Identifier	str
>4073	ArrayIndexing	ps [ \"description\" ]
>4074	PrimaryExpression	\"description\"
>4075	Identifier	ps
>4076	ExpressionStatement	 
>4077	CallExpression	row -> getText ( \"ps_description\" , str )
>4078	ArgumentList	\"ps_description\"
>4079	Argument	str
>4080	Identifier	str
>4081	Argument	\"ps_description\"
>4082	PrimaryExpression	\"ps_description\"
>4083	Callee	row -> getText
>4084	PtrMemberAccess	row -> getText
>4085	Identifier	getText
>4086	Identifier	row
>4087	Condition	 
>4088	UnaryOp	! rval
>4089	Identifier	rval
>4090	UnaryOperator	!
>4091	Condition	 
>4092	EqualityExpression	( row = sp -> fetch ( ) ) != NULL
>4093	Identifier	NULL
>4094	AssignmentExpr	row = sp -> fetch ( )
>4095	CallExpression	sp -> fetch ( )
>4096	ArgumentList	 
>4097	Callee	sp -> fetch
>4098	PtrMemberAccess	sp -> fetch
>4099	Identifier	fetch
>4100	Identifier	sp
>4101	Identifier	row
>4102	IdentifierDeclStatement	 
>4103	IdentifierDecl	* row
>4104	Identifier	row
>4105	IdentifierDeclType	Row *
>4106	ExpressionStatement	 
>4107	AssignmentExpr	rval = false
>4108	Identifier	false
>4109	Identifier	rval
>4110	IdentifierDeclStatement	 
>4111	IdentifierDecl	str
>4112	Identifier	str
>4113	IdentifierDeclType	string
>4114	IdentifierDeclStatement	 
>4115	IdentifierDecl	accountId
>4116	Identifier	accountId
>4117	IdentifierDeclType	AccountId
>4118	ExpressionStatement	 
>4119	CallExpression	payees -> clear ( )
>4120	ArgumentList	 
>4121	Callee	payees -> clear
>4122	PtrMemberAccess	payees -> clear
>4123	Identifier	clear
>4124	Identifier	payees
>4125	ExpressionStatement	 
>4126	CallExpression	payees -> setType ( Array )
>4127	ArgumentList	Array
>4128	Argument	Array
>4129	Identifier	Array
>4130	Callee	payees -> setType
>4131	PtrMemberAccess	payees -> setType
>4132	Identifier	setType
>4133	Identifier	payees
>4134	IdentifierDeclStatement	 
>4135	IdentifierDecl	payees = ps [ \"payees\" ]
>4136	AssignmentExpr	payees = ps [ \"payees\" ]
>4137	ArrayIndexing	ps [ \"payees\" ]
>4138	PrimaryExpression	\"payees\"
>4139	Identifier	ps
>4140	Identifier	payees
>4141	Identifier	payees
>4142	IdentifierDeclType	PayeeList
>4143	Condition	 
>4144	Identifier	rval
>4145	ExpressionStatement	 
>4146	AssignmentExpr	rval = sp -> setUInt32 ( \"
>4147	AndExpression	sp -> setUInt32 ( \"
>4148	CallExpression	sp -> execute ( )
>4149	ArgumentList	 
>4150	Callee	sp -> execute
>4151	PtrMemberAccess	sp -> execute
>4152	Identifier	execute
>4153	Identifier	sp
>4154	CallExpression	sp -> setUInt32 ( \"
>4155	ArgumentList	\"
>4156	Argument	psId
>4157	Identifier	psId
>4158	Argument	\"
>4159	PrimaryExpression	\"
>4160	Callee	sp -> setUInt32
>4161	PtrMemberAccess	sp -> setUInt32
>4162	Identifier	setUInt32
>4163	Identifier	sp
>4164	Identifier	rval
>4165	Condition	 
>4166	EqualityExpression	sp != NULL
>4167	Identifier	NULL
>4168	Identifier	sp
>4169	ExpressionStatement	 
>4170	Statement	 
>4171	Statement	 
>4172	Statement	 
>4173	Statement	 
>4174	Statement	 
>4175	Statement	 
>4176	Statement	 
>4177	Statement	 
>4178	Statement	 
>4179	Statement	 
>4180	Statement	 
>4181	Statement	 
>4182	Statement	 
>4183	Statement	 
>4184	Statement	 
>4185	Statement	 
>4186	Statement	 
>4187	Statement	 
>4188	Statement	 
>4189	Statement	 
>4190	Statement	 
>4191	Statement	 
>4192	Statement	 
>4193	Statement	 
>4194	IdentifierDeclStatement	 
>4195	IdentifierDecl	psId = BM_PAYEE_SCHEME_ID ( ps [ \"id\" ] )
>4196	AssignmentExpr	psId = BM_PAYEE_SCHEME_ID ( ps [ \"id\" ] )
>4197	CallExpression	BM_PAYEE_SCHEME_ID ( ps [ \"id\" ] )
>4198	ArgumentList	ps [ \"id\" ]
>4199	Argument	ps [ \"id\" ]
>4200	ArrayIndexing	ps [ \"id\" ]
>4201	PrimaryExpression	\"id\"
>4202	Identifier	ps
>4203	Callee	BM_PAYEE_SCHEME_ID
>4204	Identifier	BM_PAYEE_SCHEME_ID
>4205	Identifier	psId
>4206	Identifier	psId
>4207	IdentifierDeclType	PayeeSchemeId
>4208	IdentifierDeclStatement	 
>4209	IdentifierDecl	rval = false
>4210	AssignmentExpr	rval = false
>4211	Identifier	false
>4212	Identifier	false
>4213	Identifier	rval
>4214	IdentifierDeclType	bool
>4269	FunctionDef	CatalogDatabase 
>4270	ParameterList	uint32_t psId , Connection * c
>4271	Parameter	 
>4272	Identifier	c
>4273	ParameterType	Connection *
>4274	Parameter	 
>4275	Identifier	psId
>4276	ParameterType	uint32_t
>4277	ReturnType	bool
>4278	CompoundStatement	 
>4279	ReturnStatement	 
>4280	Identifier	rval
>4281	ExpressionStatement	 
>4282	AssignmentExpr	rval = ( s != NULL ) && s -> setUInt32 ( \"
>4283	AndExpression	( s != NULL ) && s -> setUInt32 ( \"
>4284	AndExpression	s -> setUInt32 ( \"
>4285	AndExpression	s -> execute ( ) && s -> reset ( )
>4286	CallExpression	s -> reset ( )
>4287	ArgumentList	 
>4288	Callee	s -> reset
>4289	PtrMemberAccess	s -> reset
>4290	Identifier	reset
>4291	Identifier	s
>4292	CallExpression	s -> execute ( )
>4293	ArgumentList	 
>4294	Callee	s -> execute
>4295	PtrMemberAccess	s -> execute
>4296	Identifier	execute
>4297	Identifier	s
>4298	CallExpression	s -> setUInt32 ( \"
>4299	ArgumentList	\"
>4300	Argument	psId
>4301	Identifier	psId
>4302	Argument	\"
>4303	PrimaryExpression	\"
>4304	Callee	s -> setUInt32
>4305	PtrMemberAccess	s -> setUInt32
>4306	Identifier	setUInt32
>4307	Identifier	s
>4308	EqualityExpression	s != NULL
>4309	Identifier	NULL
>4310	Identifier	s
>4311	Identifier	rval
>4312	ExpressionStatement	 
>4313	Statement	 
>4314	Statement	 
>4315	Statement	 
>4316	Statement	 
>4317	Statement	 
>4318	Statement	 
>4319	Statement	 
>4320	Statement	 
>4321	Statement	 
>4322	Statement	 
>4323	Statement	 
>4324	Statement	 
>4325	IdentifierDeclStatement	 
>4326	IdentifierDecl	rval = false
>4327	AssignmentExpr	rval = false
>4328	Identifier	false
>4329	Identifier	false
>4330	Identifier	rval
>4331	IdentifierDeclType	bool
>4345	FunctionDef	CatalogDatabase 
>4346	ParameterList	PayeeSchemeId psId , Connection * c
>4347	Parameter	 
>4348	Identifier	c
>4349	ParameterType	Connection *
>4350	Parameter	 
>4351	Identifier	psId
>4352	ParameterType	PayeeSchemeId
>4353	ReturnType	bool
>4354	CompoundStatement	 
>4355	ReturnStatement	 
>4356	Identifier	rval
>4357	IfStatement	if ( rval )
>4358	CompoundStatement	 
>4359	IfStatement	if ( s -> fetch ( ) != NULL )
>4360	CompoundStatement	 
>4361	ExpressionStatement	 
>4362	AssignmentExpr	rval = false
>4363	Identifier	false
>4364	Identifier	rval
>4365	ExpressionStatement	 
>4366	CallExpression	Exception 
>4367	ArgumentList	e
>4368	Argument	e
>4369	Identifier	e
>4370	Callee	Exception 
>4371	Identifier	Exception 
>4372	ExpressionStatement	 
>4373	CallExpression	BM_ID_SET ( e -> getDetails ( ) [ \"payeeSchemeId\" ] , psId )
>4374	ArgumentList	e -> getDetails ( ) [ \"payeeSchemeId\" ]
>4375	Argument	psId
>4376	Identifier	psId
>4377	Argument	e -> getDetails ( ) [ \"payeeSchemeId\" ]
>4378	ArrayIndexing	e -> getDetails ( ) [ \"payeeSchemeId\" ]
>4379	PrimaryExpression	\"payeeSchemeId\"
>4380	CallExpression	e -> getDetails ( )
>4381	ArgumentList	 
>4382	Callee	e -> getDetails
>4383	PtrMemberAccess	e -> getDetails
>4384	Identifier	getDetails
>4385	Identifier	e
>4386	Callee	BM_ID_SET
>4387	Identifier	BM_ID_SET
>4388	IdentifierDeclStatement	 
>4389	IdentifierDecl	e = new Exception ( \"Payee scheme is in use by at least one ware.\" , \"bitmunk.catalog.PayeeSchemeWareDependency\" )
>4390	AssignmentExpr	e = new Exception ( \"Payee scheme is in use by at least one ware.\" , \"bitmunk.catalog.PayeeSchemeWareDependency\" )
>4391	Expression	\"Payee scheme is in use by at least one ware.\" , \"bitmunk.catalog.PayeeSchemeWareDependency\"
>4392	PrimaryExpression	\"bitmunk.catalog.PayeeSchemeWareDependency\"
>4393	PrimaryExpression	\"Payee scheme is in use by at least one ware.\"
>4394	Identifier	e
>4395	Identifier	e
>4396	IdentifierDeclType	ExceptionRef
>4397	ExpressionStatement	 
>4398	CallExpression	s -> fetch ( )
>4399	ArgumentList	 
>4400	Callee	s -> fetch
>4401	PtrMemberAccess	s -> fetch
>4402	Identifier	fetch
>4403	Identifier	s
>4404	Condition	 
>4405	EqualityExpression	s -> fetch ( ) != NULL
>4406	Identifier	NULL
>4407	CallExpression	s -> fetch ( )
>4408	ArgumentList	 
>4409	Callee	s -> fetch
>4410	PtrMemberAccess	s -> fetch
>4411	Identifier	fetch
>4412	Identifier	s
>4413	Condition	 
>4414	Identifier	rval
>4415	ExpressionStatement	 
>4416	AssignmentExpr	rval = ( s != NULL ) && s -> setUInt32 ( \"
>4417	AndExpression	( s != NULL ) && s -> setUInt32 ( \"
>4418	AndExpression	s -> setUInt32 ( \"
>4419	CallExpression	s -> execute ( )
>4420	ArgumentList	 
>4421	Callee	s -> execute
>4422	PtrMemberAccess	s -> execute
>4423	Identifier	execute
>4424	Identifier	s
>4425	CallExpression	s -> setUInt32 ( \"
>4426	ArgumentList	\"
>4427	Argument	psId
>4428	Identifier	psId
>4429	Argument	\"
>4430	PrimaryExpression	\"
>4431	Callee	s -> setUInt32
>4432	PtrMemberAccess	s -> setUInt32
>4433	Identifier	setUInt32
>4434	Identifier	s
>4435	EqualityExpression	s != NULL
>4436	Identifier	NULL
>4437	Identifier	s
>4438	Identifier	rval
>4439	ExpressionStatement	 
>4440	Statement	 
>4441	Statement	 
>4442	Statement	 
>4443	Statement	 
>4444	Statement	 
>4445	Statement	 
>4446	Statement	 
>4447	Statement	 
>4448	Statement	 
>4449	Statement	 
>4450	Statement	 
>4451	Statement	 
>4452	IdentifierDeclStatement	 
>4453	IdentifierDecl	rval = false
>4454	AssignmentExpr	rval = false
>4455	Identifier	false
>4456	Identifier	false
>4457	Identifier	rval
>4458	IdentifierDeclType	bool
>4477	FunctionDef	CatalogDatabase 
>4478	ParameterList	PayeeSchemeId psId , Connection * c
>4479	Parameter	 
>4480	Identifier	c
>4481	ParameterType	Connection *
>4482	Parameter	 
>4483	Identifier	psId
>4484	ParameterType	PayeeSchemeId
>4485	ReturnType	bool
>4486	CompoundStatement	 
>4487	ReturnStatement	 
>4488	Identifier	rval
>4489	IfStatement	if ( ensurePayeeSchemeNotInUse ( psId , c ) )
>4490	CompoundStatement	 
>4491	ExpressionStatement	 
>4492	AssignmentExpr	rval = ( s != NULL ) && s -> setUInt32 ( \"
>4493	AndExpression	( s != NULL ) && s -> setUInt32 ( \"
>4494	AndExpression	s -> setUInt32 ( \"
>4495	CallExpression	s -> execute ( )
>4496	ArgumentList	 
>4497	Callee	s -> execute
>4498	PtrMemberAccess	s -> execute
>4499	Identifier	execute
>4500	Identifier	s
>4501	CallExpression	s -> setUInt32 ( \"
>4502	ArgumentList	\"
>4503	Argument	psId
>4504	Identifier	psId
>4505	Argument	\"
>4506	PrimaryExpression	\"
>4507	Callee	s -> setUInt32
>4508	PtrMemberAccess	s -> setUInt32
>4509	Identifier	setUInt32
>4510	Identifier	s
>4511	EqualityExpression	s != NULL
>4512	Identifier	NULL
>4513	Identifier	s
>4514	Identifier	rval
>4515	ExpressionStatement	 
>4516	Statement	 
>4517	Statement	 
>4518	Statement	 
>4519	Statement	 
>4520	Statement	 
>4521	Statement	 
>4522	Statement	 
>4523	Statement	 
>4524	Statement	 
>4525	Statement	 
>4526	Statement	 
>4527	Statement	 
>4528	Condition	 
>4529	CallExpression	ensurePayeeSchemeNotInUse ( psId , c )
>4530	ArgumentList	psId
>4531	Argument	c
>4532	Identifier	c
>4533	Argument	psId
>4534	Identifier	psId
>4535	Callee	ensurePayeeSchemeNotInUse
>4536	Identifier	ensurePayeeSchemeNotInUse
>4537	IdentifierDeclStatement	 
>4538	IdentifierDecl	rval = false
>4539	AssignmentExpr	rval = false
>4540	Identifier	false
>4541	Identifier	false
>4542	Identifier	rval
>4543	IdentifierDeclType	bool
>4557	FunctionDef	CatalogDatabase 
>4558	ParameterList	UserId userId , ServerId serverId , DynamicObject & payeeSchemes , Connection * c
>4559	Parameter	 
>4560	Identifier	c
>4561	ParameterType	Connection *
>4562	Parameter	 
>4563	Identifier	payeeSchemes
>4564	ParameterType	DynamicObject &
>4565	Parameter	 
>4566	Identifier	serverId
>4567	ParameterType	ServerId
>4568	Parameter	 
>4569	Identifier	userId
>4570	ParameterType	UserId
>4571	ReturnType	bool
>4572	CompoundStatement	 
>4573	ReturnStatement	 
>4574	Identifier	rval
>4575	IfStatement	if ( rval )
>4576	CompoundStatement	 
>4577	WhileStatement	while ( rval && ( row = s -> fetch ( ) ) != NULL )
>4578	CompoundStatement	 
>4579	IfStatement	if ( ( rval = populatePayeeScheme ( ps , filters , c ) ) )
>4580	ElseStatement	else
>4581	CompoundStatement	 
>4582	ExpressionStatement	 
>4583	CallExpression	Exception 
>4584	ArgumentList	e
>4585	Argument	e
>4586	Identifier	e
>4587	Callee	Exception 
>4588	Identifier	Exception 
>4589	ExpressionStatement	 
>4590	CallExpression	BM_ID_SET ( e -> getDetails ( ) [ \"payeeSchemeId\" ] , psId )
>4591	ArgumentList	e -> getDetails ( ) [ \"payeeSchemeId\" ]
>4592	Argument	psId
>4593	Identifier	psId
>4594	Argument	e -> getDetails ( ) [ \"payeeSchemeId\" ]
>4595	ArrayIndexing	e -> getDetails ( ) [ \"payeeSchemeId\" ]
>4596	PrimaryExpression	\"payeeSchemeId\"
>4597	CallExpression	e -> getDetails ( )
>4598	ArgumentList	 
>4599	Callee	e -> getDetails
>4600	PtrMemberAccess	e -> getDetails
>4601	Identifier	getDetails
>4602	Identifier	e
>4603	Callee	BM_ID_SET
>4604	Identifier	BM_ID_SET
>4605	ExpressionStatement	 
>4606	Statement	 
>4607	Statement	 
>4608	Statement	 
>4609	Statement	 
>4610	Statement	 
>4611	Statement	 
>4612	Statement	 
>4613	Statement	 
>4614	Statement	 
>4615	Statement	 
>4616	Statement	 
>4617	CompoundStatement	 
>4618	ExpressionStatement	 
>4619	ConditionalExpression	( deleted == 0 ) ? payeeSchemes [ \"updates\" ] -> append ( ps ) 
>4620	CallExpression	payeeSchemes [ \"removals\" ] -> append ( ps )
>4621	ArgumentList	ps
>4622	Argument	ps
>4623	Identifier	ps
>4624	Callee	payeeSchemes [ \"removals\" ] -> append
>4625	PtrMemberAccess	payeeSchemes [ \"removals\" ] -> append
>4626	Identifier	append
>4627	ArrayIndexing	payeeSchemes [ \"removals\" ]
>4628	PrimaryExpression	\"removals\"
>4629	Identifier	payeeSchemes
>4630	CallExpression	payeeSchemes [ \"updates\" ] -> append ( ps )
>4631	ArgumentList	ps
>4632	Argument	ps
>4633	Identifier	ps
>4634	Callee	payeeSchemes [ \"updates\" ] -> append
>4635	PtrMemberAccess	payeeSchemes [ \"updates\" ] -> append
>4636	Identifier	append
>4637	ArrayIndexing	payeeSchemes [ \"updates\" ]
>4638	PrimaryExpression	\"updates\"
>4639	Identifier	payeeSchemes
>4640	Condition	deleted == 0
>4641	EqualityExpression	deleted == 0
>4642	PrimaryExpression	0
>4643	Identifier	deleted
>4644	Condition	 
>4645	AssignmentExpr	rval = populatePayeeScheme ( ps , filters , c )
>4646	CallExpression	populatePayeeScheme ( ps , filters , c )
>4647	ArgumentList	ps
>4648	Argument	c
>4649	Identifier	c
>4650	Argument	filters
>4651	Identifier	filters
>4652	Argument	ps
>4653	Identifier	ps
>4654	Callee	populatePayeeScheme
>4655	Identifier	populatePayeeScheme
>4656	Identifier	rval
>4657	ExpressionStatement	 
>4658	AssignmentExpr	filters [ \"default\" ] = true
>4659	Identifier	true
>4660	ArrayIndexing	filters [ \"default\" ]
>4661	PrimaryExpression	\"default\"
>4662	Identifier	filters
>4663	IdentifierDeclStatement	 
>4664	IdentifierDecl	filters
>4665	Identifier	filters
>4666	IdentifierDeclType	DynamicObject
>4667	ExpressionStatement	 
>4668	AssignmentExpr	ps [ \"serverId\" ] = serverId
>4669	Identifier	serverId
>4670	ArrayIndexing	ps [ \"serverId\" ]
>4671	PrimaryExpression	\"serverId\"
>4672	Identifier	ps
>4673	ExpressionStatement	 
>4674	AssignmentExpr	ps [ \"userId\" ] = userId
>4675	Identifier	userId
>4676	ArrayIndexing	ps [ \"userId\" ]
>4677	PrimaryExpression	\"userId\"
>4678	Identifier	ps
>4679	ExpressionStatement	 
>4680	CallExpression	BM_ID_SET ( ps [ \"id\" ] , psId )
>4681	ArgumentList	ps [ \"id\" ]
>4682	Argument	psId
>4683	Identifier	psId
>4684	Argument	ps [ \"id\" ]
>4685	ArrayIndexing	ps [ \"id\" ]
>4686	PrimaryExpression	\"id\"
>4687	Identifier	ps
>4688	Callee	BM_ID_SET
>4689	Identifier	BM_ID_SET
>4690	IdentifierDeclStatement	 
>4691	IdentifierDecl	ps
>4692	Identifier	ps
>4693	IdentifierDeclType	PayeeScheme
>4694	ExpressionStatement	 
>4695	CallExpression	row -> getUInt32 ( \"deleted\" , deleted )
>4696	ArgumentList	\"deleted\"
>4697	Argument	deleted
>4698	Identifier	deleted
>4699	Argument	\"deleted\"
>4700	PrimaryExpression	\"deleted\"
>4701	Callee	row -> getUInt32
>4702	PtrMemberAccess	row -> getUInt32
>4703	Identifier	getUInt32
>4704	Identifier	row
>4705	ExpressionStatement	 
>4706	CallExpression	row -> getUInt32 ( \"payee_scheme_id\" , psId )
>4707	ArgumentList	\"payee_scheme_id\"
>4708	Argument	psId
>4709	Identifier	psId
>4710	Argument	\"payee_scheme_id\"
>4711	PrimaryExpression	\"payee_scheme_id\"
>4712	Callee	row -> getUInt32
>4713	PtrMemberAccess	row -> getUInt32
>4714	Identifier	getUInt32
>4715	Identifier	row
>4716	Condition	 
>4717	AndExpression	rval && ( row = s -> fetch ( ) ) != NULL
>4718	EqualityExpression	( row = s -> fetch ( ) ) != NULL
>4719	Identifier	NULL
>4720	AssignmentExpr	row = s -> fetch ( )
>4721	CallExpression	s -> fetch ( )
>4722	ArgumentList	 
>4723	Callee	s -> fetch
>4724	PtrMemberAccess	s -> fetch
>4725	Identifier	fetch
>4726	Identifier	s
>4727	Identifier	row
>4728	Identifier	rval
>4729	IdentifierDeclStatement	 
>4730	IdentifierDecl	* row = NULL
>4731	AssignmentExpr	* row = NULL
>4732	Identifier	NULL
>4733	Identifier	NULL
>4734	Identifier	row
>4735	IdentifierDeclType	Row *
>4736	IdentifierDeclStatement	 
>4737	IdentifierDecl	deleted
>4738	Identifier	deleted
>4739	IdentifierDeclType	uint32_t
>4740	IdentifierDeclStatement	 
>4741	IdentifierDecl	psId
>4742	Identifier	psId
>4743	IdentifierDeclType	PayeeSchemeId
>4744	Condition	 
>4745	Identifier	rval
>4746	ExpressionStatement	 
>4747	AssignmentExpr	rval = ( s != NULL ) && s -> execute ( )
>4748	AndExpression	( s != NULL ) && s -> execute ( )
>4749	CallExpression	s -> execute ( )
>4750	ArgumentList	 
>4751	Callee	s -> execute
>4752	PtrMemberAccess	s -> execute
>4753	Identifier	execute
>4754	Identifier	s
>4755	EqualityExpression	s != NULL
>4756	Identifier	NULL
>4757	Identifier	s
>4758	Identifier	rval
>4759	ExpressionStatement	 
>4760	Statement	 
>4761	Statement	 
>4762	Statement	 
>4763	Statement	 
>4764	Statement	 
>4765	Statement	 
>4766	Statement	 
>4767	Statement	 
>4768	Statement	 
>4769	Statement	 
>4770	Statement	 
>4771	Statement	 
>4772	IdentifierDeclStatement	 
>4773	IdentifierDecl	rval = false
>4774	AssignmentExpr	rval = false
>4775	Identifier	false
>4776	Identifier	false
>4777	Identifier	rval
>4778	IdentifierDeclType	bool
>4808	FunctionDef	CatalogDatabase 
>4809	ParameterList	uint64_t problemId , PayeeSchemeId psId , Connection * c
>4810	Parameter	 
>4811	Identifier	c
>4812	ParameterType	Connection *
>4813	Parameter	 
>4814	Identifier	psId
>4815	ParameterType	PayeeSchemeId
>4816	Parameter	 
>4817	Identifier	problemId
>4818	ParameterType	uint64_t
>4819	ReturnType	bool
>4820	CompoundStatement	 
>4821	ReturnStatement	 
>4822	Identifier	rval
>4823	ExpressionStatement	 
>4824	AssignmentExpr	rval = ( s != NULL ) && s -> setUInt64 ( \"
>4825	AndExpression	( s != NULL ) && s -> setUInt64 ( \"
>4826	AndExpression	s -> setUInt64 ( \"
>4827	AndExpression	s -> setUInt32 ( \"
>4828	CallExpression	s -> execute ( )
>4829	ArgumentList	 
>4830	Callee	s -> execute
>4831	PtrMemberAccess	s -> execute
>4832	Identifier	execute
>4833	Identifier	s
>4834	CallExpression	s -> setUInt32 ( \"
>4835	ArgumentList	\"
>4836	Argument	psId
>4837	Identifier	psId
>4838	Argument	\"
>4839	PrimaryExpression	\"
>4840	Callee	s -> setUInt32
>4841	PtrMemberAccess	s -> setUInt32
>4842	Identifier	setUInt32
>4843	Identifier	s
>4844	CallExpression	s -> setUInt64 ( \"
>4845	ArgumentList	\"
>4846	Argument	problemId
>4847	Identifier	problemId
>4848	Argument	\"
>4849	PrimaryExpression	\"
>4850	Callee	s -> setUInt64
>4851	PtrMemberAccess	s -> setUInt64
>4852	Identifier	setUInt64
>4853	Identifier	s
>4854	EqualityExpression	s != NULL
>4855	Identifier	NULL
>4856	Identifier	s
>4857	Identifier	rval
>4858	ExpressionStatement	 
>4859	Statement	 
>4860	Statement	 
>4861	Statement	 
>4862	Statement	 
>4863	Statement	 
>4864	Statement	 
>4865	Statement	 
>4866	Statement	 
>4867	Statement	 
>4868	Statement	 
>4869	Statement	 
>4870	Statement	 
>4871	Statement	 
>4872	IdentifierDeclStatement	 
>4873	IdentifierDecl	rval = false
>4874	AssignmentExpr	rval = false
>4875	Identifier	false
>4876	Identifier	false
>4877	Identifier	rval
>4878	IdentifierDeclType	bool
>4893	FunctionDef	CatalogDatabase 
>4894	ParameterList	UserId userId , Ware & ware , IMediaLibrary * mediaLibrary , Connection * c
>4895	Parameter	 
>4896	Identifier	c
>4897	ParameterType	Connection *
>4898	Parameter	 
>4899	Identifier	mediaLibrary
>4900	ParameterType	IMediaLibrary *
>4901	Parameter	 
>4902	Identifier	ware
>4903	ParameterType	Ware &
>4904	Parameter	 
>4905	Identifier	userId
>4906	ParameterType	UserId
>4907	ReturnType	bool
>4908	CompoundStatement	 
>4909	ReturnStatement	 
>4910	Identifier	rval
>4911	IfStatement	if ( s != NULL )
>4912	CompoundStatement	 
>4913	IfStatement	if ( rval )
>4914	CompoundStatement	 
>4915	IfStatement	if ( row == NULL )
>4916	ElseStatement	else
>4917	IfStatement	if ( ( rval = row -> getUInt32 ( \"deleted\" , deleted ) ) && deleted == 1 )
>4918	ElseStatement	else
>4919	IfStatement	if ( rval )
>4920	CompoundStatement	 
>4921	IfStatement	if ( rval )
>4922	CompoundStatement	 
>4923	ExpressionStatement	 
>4924	AssignmentExpr	ware [ \"payees\" ] = ps [ \"payees\" ]
>4925	ArrayIndexing	ps [ \"payees\" ]
>4926	PrimaryExpression	\"payees\"
>4927	Identifier	ps
>4928	ArrayIndexing	ware [ \"payees\" ]
>4929	PrimaryExpression	\"payees\"
>4930	Identifier	ware
>4931	ExpressionStatement	 
>4932	CallExpression	BM_ID_SET ( ware [ \"mediaId\" ] , fi [ \"mediaId\" ] )
>4933	ArgumentList	ware [ \"mediaId\" ]
>4934	Argument	fi [ \"mediaId\" ]
>4935	ArrayIndexing	fi [ \"mediaId\" ]
>4936	PrimaryExpression	\"mediaId\"
>4937	Identifier	fi
>4938	Argument	ware [ \"mediaId\" ]
>4939	ArrayIndexing	ware [ \"mediaId\" ]
>4940	PrimaryExpression	\"mediaId\"
>4941	Identifier	ware
>4942	Callee	BM_ID_SET
>4943	Identifier	BM_ID_SET
>4944	Condition	 
>4945	Identifier	rval
>4946	ExpressionStatement	 
>4947	AssignmentExpr	rval = rval && mediaLibrary -> populateFile ( userId , fi , mlId , c ) && populatePayeeScheme ( ps , \
>4948	AndExpression	rval && mediaLibrary -> populateFile ( userId , fi , mlId , c ) && populatePayeeScheme ( ps , filters , \
>4949	AndExpression	mediaLibrary -> populateFile ( userId , fi , mlId , c ) && populatePayeeScheme ( ps , filters , c )
>4950	CallExpression	populatePayeeScheme ( ps , filters , c )
>4951	ArgumentList	ps
>4952	Argument	c
>4953	Identifier	c
>4954	Argument	filters
>4955	Identifier	filters
>4956	Argument	ps
>4957	Identifier	ps
>4958	Callee	populatePayeeScheme
>4959	Identifier	populatePayeeScheme
>4960	CallExpression	mediaLibrary -> populateFile ( userId , fi , mlId , c )
>4961	ArgumentList	userId
>4962	Argument	c
>4963	Identifier	c
>4964	Argument	mlId
>4965	Identifier	mlId
>4966	Argument	fi
>4967	Identifier	fi
>4968	Argument	userId
>4969	Identifier	userId
>4970	Callee	mediaLibrary -> populateFile
>4971	PtrMemberAccess	mediaLibrary -> populateFile
>4972	Identifier	populateFile
>4973	Identifier	mediaLibrary
>4974	Identifier	rval
>4975	Identifier	rval
>4976	ExpressionStatement	 
>4977	AssignmentExpr	filters [ \"default\" ] = true
>4978	Identifier	true
>4979	ArrayIndexing	filters [ \"default\" ]
>4980	PrimaryExpression	\"default\"
>4981	Identifier	filters
>4982	IdentifierDeclStatement	 
>4983	IdentifierDecl	filters
>4984	Identifier	filters
>4985	IdentifierDeclType	DynamicObject
>4986	ExpressionStatement	 
>4987	CallExpression	BM_ID_SET ( ps [ \"id\" ] , psId )
>4988	ArgumentList	ps [ \"id\" ]
>4989	Argument	psId
>4990	Identifier	psId
>4991	Argument	ps [ \"id\" ]
>4992	ArrayIndexing	ps [ \"id\" ]
>4993	PrimaryExpression	\"id\"
>4994	Identifier	ps
>4995	Callee	BM_ID_SET
>4996	Identifier	BM_ID_SET
>4997	IdentifierDeclStatement	 
>4998	IdentifierDecl	ps
>4999	Identifier	ps
>5000	IdentifierDeclType	PayeeScheme
>5001	IdentifierDeclStatement	 
>5002	IdentifierDecl	& fi = ware [ \"fileInfos\" ] [ 0 ]
>5003	AssignmentExpr	& fi = ware [ \"fileInfos\" ] [ 0 ]
>5004	ArrayIndexing	ware [ \"fileInfos\" ] [ 0 ]
>5005	PrimaryExpression	0
>5006	ArrayIndexing	ware [ \"fileInfos\" ]
>5007	PrimaryExpression	\"fileInfos\"
>5008	Identifier	ware
>5009	Identifier	fi
>5010	Identifier	fi
>5011	IdentifierDeclType	FileInfo &
>5012	ExpressionStatement	 
>5013	CallExpression	s -> fetch ( )
>5014	ArgumentList	 
>5015	Callee	s -> fetch
>5016	PtrMemberAccess	s -> fetch
>5017	Identifier	fetch
>5018	Identifier	s
>5019	ExpressionStatement	 
>5020	AssignmentExpr	ware [ \"description\" ] = str . c_str ( )
>5021	CallExpression	str . c_str ( )
>5022	ArgumentList	 
>5023	Callee	str . c_str
>5024	MemberAccess	str . c_str
>5025	Identifier	c_str
>5026	Identifier	str
>5027	ArrayIndexing	ware [ \"description\" ]
>5028	PrimaryExpression	\"description\"
>5029	Identifier	ware
>5030	ExpressionStatement	 
>5031	CallExpression	BM_ID_SET ( ware [ \"payeeSchemeId\" ] , psId )
>5032	ArgumentList	ware [ \"payeeSchemeId\" ]
>5033	Argument	psId
>5034	Identifier	psId
>5035	Argument	ware [ \"payeeSchemeId\" ]
>5036	ArrayIndexing	ware [ \"payeeSchemeId\" ]
>5037	PrimaryExpression	\"payeeSchemeId\"
>5038	Identifier	ware
>5039	Callee	BM_ID_SET
>5040	Identifier	BM_ID_SET
>5041	ExpressionStatement	 
>5042	AssignmentExpr	ware [ \"mediaLibraryId\" ] = mlId
>5043	Identifier	mlId
>5044	ArrayIndexing	ware [ \"mediaLibraryId\" ]
>5045	PrimaryExpression	\"mediaLibraryId\"
>5046	Identifier	ware
>5047	ExpressionStatement	 
>5048	AssignmentExpr	rval = rval && row -> getUInt32 ( \"media_library_id\" , mlId ) && row -> getUInt32 ( \"payee_scheme_id\" , \
>5049	AndExpression	rval && row -> getUInt32 ( \"media_library_id\" , mlId ) && row -> getUInt32 ( \"payee_scheme_id\" , psId ) && \
>5050	AndExpression	row -> getUInt32 ( \"media_library_id\" , mlId ) && row -> getUInt32 ( \"payee_scheme_id\" , psId ) && row \
>5051	AndExpression	row -> getUInt32 ( \"payee_scheme_id\" , psId ) && row -> getText ( \"description\" , str )
>5052	CallExpression	row -> getText ( \"description\" , str )
>5053	ArgumentList	\"description\"
>5054	Argument	str
>5055	Identifier	str
>5056	Argument	\"description\"
>5057	PrimaryExpression	\"description\"
>5058	Callee	row -> getText
>5059	PtrMemberAccess	row -> getText
>5060	Identifier	getText
>5061	Identifier	row
>5062	CallExpression	row -> getUInt32 ( \"payee_scheme_id\" , psId )
>5063	ArgumentList	\"payee_scheme_id\"
>5064	Argument	psId
>5065	Identifier	psId
>5066	Argument	\"payee_scheme_id\"
>5067	PrimaryExpression	\"payee_scheme_id\"
>5068	Callee	row -> getUInt32
>5069	PtrMemberAccess	row -> getUInt32
>5070	Identifier	getUInt32
>5071	Identifier	row
>5072	CallExpression	row -> getUInt32 ( \"media_library_id\" , mlId )
>5073	ArgumentList	\"media_library_id\"
>5074	Argument	mlId
>5075	Identifier	mlId
>5076	Argument	\"media_library_id\"
>5077	PrimaryExpression	\"media_library_id\"
>5078	Callee	row -> getUInt32
>5079	PtrMemberAccess	row -> getUInt32
>5080	Identifier	getUInt32
>5081	Identifier	row
>5082	Identifier	rval
>5083	Identifier	rval
>5084	IdentifierDeclStatement	 
>5085	IdentifierDecl	str
>5086	Identifier	str
>5087	IdentifierDeclType	string
>5088	IdentifierDeclStatement	 
>5089	IdentifierDecl	psId
>5090	Identifier	psId
>5091	IdentifierDeclType	PayeeSchemeId
>5092	IdentifierDeclStatement	 
>5093	IdentifierDecl	mlId
>5094	Identifier	mlId
>5095	IdentifierDeclType	MediaLibraryId
>5096	Condition	 
>5097	Identifier	rval
>5098	CompoundStatement	 
>5099	ExpressionStatement	 
>5100	AssignmentExpr	rval = false
>5101	Identifier	false
>5102	Identifier	rval
>5103	ExpressionStatement	 
>5104	CallExpression	Exception 
>5105	ArgumentList	e
>5106	Argument	e
>5107	Identifier	e
>5108	Callee	Exception 
>5109	Identifier	Exception 
>5110	ExpressionStatement	 
>5111	CallExpression	BM_ID_SET ( e -> getDetails ( ) [ \"wareId\" ] , BM_WARE_ID ( ware [ \"id\" ] ) )
>5112	ArgumentList	e -> getDetails ( ) [ \"wareId\" ]
>5113	Argument	BM_WARE_ID ( ware [ \"id\" ] )
>5114	CallExpression	BM_WARE_ID ( ware [ \"id\" ] )
>5115	ArgumentList	ware [ \"id\" ]
>5116	Argument	ware [ \"id\" ]
>5117	ArrayIndexing	ware [ \"id\" ]
>5118	PrimaryExpression	\"id\"
>5119	Identifier	ware
>5120	Callee	BM_WARE_ID
>5121	Identifier	BM_WARE_ID
>5122	Argument	e -> getDetails ( ) [ \"wareId\" ]
>5123	ArrayIndexing	e -> getDetails ( ) [ \"wareId\" ]
>5124	PrimaryExpression	\"wareId\"
>5125	CallExpression	e -> getDetails ( )
>5126	ArgumentList	 
>5127	Callee	e -> getDetails
>5128	PtrMemberAccess	e -> getDetails
>5129	Identifier	getDetails
>5130	Identifier	e
>5131	Callee	BM_ID_SET
>5132	Identifier	BM_ID_SET
>5133	IdentifierDeclStatement	 
>5134	IdentifierDecl	e = new Exception ( \"Ware not found.\" , \"bitmunk.catalog.InvalidWareId\" )
>5135	AssignmentExpr	e = new Exception ( \"Ware not found.\" , \"bitmunk.catalog.InvalidWareId\" )
>5136	Expression	\"Ware not found.\" , \"bitmunk.catalog.InvalidWareId\"
>5137	PrimaryExpression	\"bitmunk.catalog.InvalidWareId\"
>5138	PrimaryExpression	\"Ware not found.\"
>5139	Identifier	e
>5140	Identifier	e
>5141	IdentifierDeclType	ExceptionRef
>5142	ExpressionStatement	 
>5143	CallExpression	s -> fetch ( )
>5144	ArgumentList	 
>5145	Callee	s -> fetch
>5146	PtrMemberAccess	s -> fetch
>5147	Identifier	fetch
>5148	Identifier	s
>5149	Condition	 
>5150	AndExpression	( rval = row -> getUInt32 ( \"deleted\" , deleted ) ) && deleted == 1
>5151	EqualityExpression	deleted == 1
>5152	PrimaryExpression	1
>5153	Identifier	deleted
>5154	AssignmentExpr	rval = row -> getUInt32 ( \"deleted\" , deleted )
>5155	CallExpression	row -> getUInt32 ( \"deleted\" , deleted )
>5156	ArgumentList	\"deleted\"
>5157	Argument	deleted
>5158	Identifier	deleted
>5159	Argument	\"deleted\"
>5160	PrimaryExpression	\"deleted\"
>5161	Callee	row -> getUInt32
>5162	PtrMemberAccess	row -> getUInt32
>5163	Identifier	getUInt32
>5164	Identifier	row
>5165	Identifier	rval
>5166	CompoundStatement	 
>5167	ExpressionStatement	 
>5168	AssignmentExpr	rval = false
>5169	Identifier	false
>5170	Identifier	rval
>5171	ExpressionStatement	 
>5172	CallExpression	Exception 
>5173	ArgumentList	e
>5174	Argument	e
>5175	Identifier	e
>5176	Callee	Exception 
>5177	Identifier	Exception 
>5178	ExpressionStatement	 
>5179	CallExpression	BM_ID_SET ( e -> getDetails ( ) [ \"wareId\" ] , BM_WARE_ID ( ware [ \"id\" ] ) )
>5180	ArgumentList	e -> getDetails ( ) [ \"wareId\" ]
>5181	Argument	BM_WARE_ID ( ware [ \"id\" ] )
>5182	CallExpression	BM_WARE_ID ( ware [ \"id\" ] )
>5183	ArgumentList	ware [ \"id\" ]
>5184	Argument	ware [ \"id\" ]
>5185	ArrayIndexing	ware [ \"id\" ]
>5186	PrimaryExpression	\"id\"
>5187	Identifier	ware
>5188	Callee	BM_WARE_ID
>5189	Identifier	BM_WARE_ID
>5190	Argument	e -> getDetails ( ) [ \"wareId\" ]
>5191	ArrayIndexing	e -> getDetails ( ) [ \"wareId\" ]
>5192	PrimaryExpression	\"wareId\"
>5193	CallExpression	e -> getDetails ( )
>5194	ArgumentList	 
>5195	Callee	e -> getDetails
>5196	PtrMemberAccess	e -> getDetails
>5197	Identifier	getDetails
>5198	Identifier	e
>5199	Callee	BM_ID_SET
>5200	Identifier	BM_ID_SET
>5201	IdentifierDeclStatement	 
>5202	IdentifierDecl	e = new Exception ( \"Ware not found.\" , \"bitmunk.catalog.InvalidWareId\" )
>5203	AssignmentExpr	e = new Exception ( \"Ware not found.\" , \"bitmunk.catalog.InvalidWareId\" )
>5204	Expression	\"Ware not found.\" , \"bitmunk.catalog.InvalidWareId\"
>5205	PrimaryExpression	\"bitmunk.catalog.InvalidWareId\"
>5206	PrimaryExpression	\"Ware not found.\"
>5207	Identifier	e
>5208	Identifier	e
>5209	IdentifierDeclType	ExceptionRef
>5210	Condition	 
>5211	EqualityExpression	row == NULL
>5212	Identifier	NULL
>5213	Identifier	row
>5214	IdentifierDeclStatement	 
>5215	IdentifierDecl	* row = s -> fetch ( )
>5216	AssignmentExpr	* row = s -> fetch ( )
>5217	CallExpression	s -> fetch ( )
>5218	ArgumentList	 
>5219	Callee	s -> fetch
>5220	PtrMemberAccess	s -> fetch
>5221	Identifier	fetch
>5222	Identifier	s
>5223	Identifier	row
>5224	Identifier	row
>5225	IdentifierDeclType	monarch 
>5226	IdentifierDeclStatement	 
>5227	IdentifierDecl	deleted = 0
>5228	AssignmentExpr	deleted = 0
>5229	PrimaryExpression	0
>5230	Identifier	deleted
>5231	Identifier	deleted
>5232	IdentifierDeclType	uint32_t
>5233	Condition	 
>5234	Identifier	rval
>5235	ExpressionStatement	 
>5236	AssignmentExpr	rval = s -> setText ( \"
>5237	AndExpression	s -> setText ( \"
>5238	CallExpression	s -> execute ( )
>5239	ArgumentList	 
>5240	Callee	s -> execute
>5241	PtrMemberAccess	s -> execute
>5242	Identifier	execute
>5243	Identifier	s
>5244	CallExpression	s -> setText ( \"
>5245	ArgumentList	\"
>5246	Argument	ware [ \"id\" ] -> getString ( )
>5247	CallExpression	ware [ \"id\" ] -> getString ( )
>5248	ArgumentList	 
>5249	Callee	ware [ \"id\" ] -> getString
>5250	PtrMemberAccess	ware [ \"id\" ] -> getString
>5251	Identifier	getString
>5252	ArrayIndexing	ware [ \"id\" ]
>5253	PrimaryExpression	\"id\"
>5254	Identifier	ware
>5255	Argument	\"
>5256	PrimaryExpression	\"
>5257	Callee	s -> setText
>5258	PtrMemberAccess	s -> setText
>5259	Identifier	setText
>5260	Identifier	s
>5261	Identifier	rval
>5262	Condition	 
>5263	EqualityExpression	s != NULL
>5264	Identifier	NULL
>5265	Identifier	s
>5266	ExpressionStatement	 
>5267	Statement	 
>5268	Statement	 
>5269	Statement	 
>5270	Statement	 
>5271	Statement	 
>5272	Statement	 
>5273	Statement	 
>5274	Statement	 
>5275	Statement	 
>5276	Statement	 
>5277	Statement	 
>5278	Statement	 
>5279	IdentifierDeclStatement	 
>5280	IdentifierDecl	rval = false
>5281	AssignmentExpr	rval = false
>5282	Identifier	false
>5283	Identifier	false
>5284	Identifier	rval
>5285	IdentifierDeclType	bool
>5329	FunctionDef	CatalogDatabase 
>5330	ParameterList	UserId userId , DynamicObject & query , ResourceSet & wareSet , IMediaLibrary * mediaLibrary , Connection * c
>5331	Parameter	 
>5332	Identifier	c
>5333	ParameterType	Connection *
>5334	Parameter	 
>5335	Identifier	mediaLibrary
>5336	ParameterType	IMediaLibrary *
>5337	Parameter	 
>5338	Identifier	wareSet
>5339	ParameterType	ResourceSet &
>5340	Parameter	 
>5341	Identifier	query
>5342	ParameterType	DynamicObject &
>5343	Parameter	 
>5344	Identifier	userId
>5345	ParameterType	UserId
>5346	ReturnType	bool
>5347	CompoundStatement	 
>5348	ReturnStatement	 
>5349	Identifier	rval
>5350	IfStatement	if ( rval )
>5351	ElseStatement	else
>5352	CompoundStatement	 
>5353	ExpressionStatement	 
>5354	CallExpression	Exception 
>5355	ArgumentList	e
>5356	Argument	e
>5357	Identifier	e
>5358	Callee	Exception 
>5359	Identifier	Exception 
>5360	ExpressionStatement	 
>5361	AssignmentExpr	e -> getDetails ( ) [ \"details\" ] = query -> hasMember ( \"details\" ) ? query [ \"details\" ] -> getBoolean ( ) 
>5362	ConditionalExpression	query -> hasMember ( \"details\" ) ? query [ \"details\" ] -> getBoolean ( ) 
>5363	Identifier	false
>5364	CallExpression	query [ \"details\" ] -> getBoolean ( )
>5365	ArgumentList	 
>5366	Callee	query [ \"details\" ] -> getBoolean
>5367	PtrMemberAccess	query [ \"details\" ] -> getBoolean
>5368	Identifier	getBoolean
>5369	ArrayIndexing	query [ \"details\" ]
>5370	PrimaryExpression	\"details\"
>5371	Identifier	query
>5372	Condition	query -> hasMember ( \"details\" )
>5373	CallExpression	query -> hasMember ( \"details\" )
>5374	ArgumentList	\"details\"
>5375	Argument	\"details\"
>5376	PrimaryExpression	\"details\"
>5377	Callee	query -> hasMember
>5378	PtrMemberAccess	query -> hasMember
>5379	Identifier	hasMember
>5380	Identifier	query
>5381	ArrayIndexing	e -> getDetails ( ) [ \"details\" ]
>5382	PrimaryExpression	\"details\"
>5383	CallExpression	e -> getDetails ( )
>5384	ArgumentList	 
>5385	Callee	e -> getDetails
>5386	PtrMemberAccess	e -> getDetails
>5387	Identifier	getDetails
>5388	Identifier	e
>5389	IfStatement	if ( query -> hasMember ( \"fileIds\" ) )
>5390	CompoundStatement	 
>5391	ExpressionStatement	 
>5392	AssignmentExpr	e -> getDetails ( ) [ \"fileIds\" ] = query [ \"fileIds\" ]
>5393	ArrayIndexing	query [ \"fileIds\" ]
>5394	PrimaryExpression	\"fileIds\"
>5395	Identifier	query
>5396	ArrayIndexing	e -> getDetails ( ) [ \"fileIds\" ]
>5397	PrimaryExpression	\"fileIds\"
>5398	CallExpression	e -> getDetails ( )
>5399	ArgumentList	 
>5400	Callee	e -> getDetails
>5401	PtrMemberAccess	e -> getDetails
>5402	Identifier	getDetails
>5403	Identifier	e
>5404	Condition	 
>5405	CallExpression	query -> hasMember ( \"fileIds\" )
>5406	ArgumentList	\"fileIds\"
>5407	Argument	\"fileIds\"
>5408	PrimaryExpression	\"fileIds\"
>5409	Callee	query -> hasMember
>5410	PtrMemberAccess	query -> hasMember
>5411	Identifier	hasMember
>5412	Identifier	query
>5413	IfStatement	if ( query -> hasMember ( \"ids\" ) )
>5414	CompoundStatement	 
>5415	ExpressionStatement	 
>5416	AssignmentExpr	e -> getDetails ( ) [ \"ids\" ] = query [ \"ids\" ]
>5417	ArrayIndexing	query [ \"ids\" ]
>5418	PrimaryExpression	\"ids\"
>5419	Identifier	query
>5420	ArrayIndexing	e -> getDetails ( ) [ \"ids\" ]
>5421	PrimaryExpression	\"ids\"
>5422	CallExpression	e -> getDetails ( )
>5423	ArgumentList	 
>5424	Callee	e -> getDetails
>5425	PtrMemberAccess	e -> getDetails
>5426	Identifier	getDetails
>5427	Identifier	e
>5428	Condition	 
>5429	CallExpression	query -> hasMember ( \"ids\" )
>5430	ArgumentList	\"ids\"
>5431	Argument	\"ids\"
>5432	PrimaryExpression	\"ids\"
>5433	Callee	query -> hasMember
>5434	PtrMemberAccess	query -> hasMember
>5435	Identifier	hasMember
>5436	Identifier	query
>5437	ExpressionStatement	 
>5438	AssignmentExpr	e -> getDetails ( ) [ \"userId\" ] = userId
>5439	Identifier	userId
>5440	ArrayIndexing	e -> getDetails ( ) [ \"userId\" ]
>5441	PrimaryExpression	\"userId\"
>5442	CallExpression	e -> getDetails ( )
>5443	ArgumentList	 
>5444	Callee	e -> getDetails
>5445	PtrMemberAccess	e -> getDetails
>5446	Identifier	getDetails
>5447	Identifier	e
>5448	IdentifierDeclStatement	 
>5449	IdentifierDecl	e = new Exception ( \"Failed to retrieve ware set.\" , \"bitmunk.catalog.WareSetRetrievalFailure\" )
>5450	AssignmentExpr	e = new Exception ( \"Failed to retrieve ware set.\" , \"bitmunk.catalog.WareSetRetrievalFailure\" )
>5451	Expression	\"Failed to retrieve ware set.\" , \"bitmunk.catalog.WareSetRetrievalFailure\"
>5452	PrimaryExpression	\"bitmunk.catalog.WareSetRetrievalFailure\"
>5453	PrimaryExpression	\"Failed to retrieve ware set.\"
>5454	Identifier	e
>5455	Identifier	e
>5456	IdentifierDeclType	ExceptionRef
>5457	CompoundStatement	 
>5458	ExpressionStatement	 
>5459	AssignmentExpr	wareSet [ \"total\" ] = wareSet [ \"resources\" ] -> length ( )
>5460	CallExpression	wareSet [ \"resources\" ] -> length ( )
>5461	ArgumentList	 
>5462	Callee	wareSet [ \"resources\" ] -> length
>5463	PtrMemberAccess	wareSet [ \"resources\" ] -> length
>5464	Identifier	length
>5465	ArrayIndexing	wareSet [ \"resources\" ]
>5466	PrimaryExpression	\"resources\"
>5467	Identifier	wareSet
>5468	ArrayIndexing	wareSet [ \"total\" ]
>5469	PrimaryExpression	\"total\"
>5470	Identifier	wareSet
>5471	Condition	 
>5472	Identifier	rval
>5473	IfStatement	if ( query -> hasMember ( \"default\" ) && query [ \"default\" ] -> getBoolean ( ) )
>5474	ElseStatement	else
>5475	CompoundStatement	 
>5476	IfStatement	if ( s != NULL )
>5477	CompoundStatement	 
>5478	IfStatement	if ( rval )
>5479	CompoundStatement	 
>5480	WhileStatement	while ( rval && ( row = s -> fetch ( ) ) != NULL )
>5481	CompoundStatement	 
>5482	IfStatement	if ( rval && deleted == 0 )
>5483	CompoundStatement	 
>5484	IfStatement	if ( rval )
>5485	CompoundStatement	 
>5486	IfStatement	if ( problemId != 0 )
>5487	CompoundStatement	 
>5488	ExpressionStatement	 
>5489	AssignmentExpr	rval = JsonReader 
>5490	CallExpression	JsonReader 
>5491	ArgumentList	ware [ \"exception\" ]
>5492	Argument	true
>5493	Identifier	true
>5494	Argument	json . length ( )
>5495	CallExpression	json . length ( )
>5496	ArgumentList	 
>5497	Callee	json . length
>5498	MemberAccess	json . length
>5499	Identifier	length
>5500	Identifier	json
>5501	Argument	json . c_str ( )
>5502	CallExpression	json . c_str ( )
>5503	ArgumentList	 
>5504	Callee	json . c_str
>5505	MemberAccess	json . c_str
>5506	Identifier	c_str
>5507	Identifier	json
>5508	Argument	ware [ \"exception\" ]
>5509	ArrayIndexing	ware [ \"exception\" ]
>5510	PrimaryExpression	\"exception\"
>5511	Identifier	ware
>5512	Callee	JsonReader 
>5513	Identifier	JsonReader 
>5514	Identifier	rval
>5515	Condition	 
>5516	EqualityExpression	problemId != 0
>5517	PrimaryExpression	0
>5518	Identifier	problemId
>5519	ExpressionStatement	 
>5520	AssignmentExpr	ware [ \"updating\" ] = ( updating == 1 )
>5521	EqualityExpression	updating == 1
>5522	PrimaryExpression	1
>5523	Identifier	updating
>5524	ArrayIndexing	ware [ \"updating\" ]
>5525	PrimaryExpression	\"updating\"
>5526	Identifier	ware
>5527	ExpressionStatement	 
>5528	AssignmentExpr	ware [ \"dirty\" ] = ( dirty == 1 )
>5529	EqualityExpression	dirty == 1
>5530	PrimaryExpression	1
>5531	Identifier	dirty
>5532	ArrayIndexing	ware [ \"dirty\" ]
>5533	PrimaryExpression	\"dirty\"
>5534	Identifier	ware
>5535	ExpressionStatement	 
>5536	AssignmentExpr	ware [ \"description\" ] = str . c_str ( )
>5537	CallExpression	str . c_str ( )
>5538	ArgumentList	 
>5539	Callee	str . c_str
>5540	MemberAccess	str . c_str
>5541	Identifier	c_str
>5542	Identifier	str
>5543	ArrayIndexing	ware [ \"description\" ]
>5544	PrimaryExpression	\"description\"
>5545	Identifier	ware
>5546	ExpressionStatement	 
>5547	AssignmentExpr	ware [ \"payeeSchemeId\" ] = psId
>5548	Identifier	psId
>5549	ArrayIndexing	ware [ \"payeeSchemeId\" ]
>5550	PrimaryExpression	\"payeeSchemeId\"
>5551	Identifier	ware
>5552	ExpressionStatement	 
>5553	AssignmentExpr	ware [ \"mediaLibraryId\" ] = mlId
>5554	Identifier	mlId
>5555	ArrayIndexing	ware [ \"mediaLibraryId\" ]
>5556	PrimaryExpression	\"mediaLibraryId\"
>5557	Identifier	ware
>5558	ExpressionStatement	 
>5559	CallExpression	BM_ID_SET ( ware [ \"id\" ] , wareId . c_str ( ) )
>5560	ArgumentList	ware [ \"id\" ]
>5561	Argument	wareId . c_str ( )
>5562	CallExpression	wareId . c_str ( )
>5563	ArgumentList	 
>5564	Callee	wareId . c_str
>5565	MemberAccess	wareId . c_str
>5566	Identifier	c_str
>5567	Identifier	wareId
>5568	Argument	ware [ \"id\" ]
>5569	ArrayIndexing	ware [ \"id\" ]
>5570	PrimaryExpression	\"id\"
>5571	Identifier	ware
>5572	Callee	BM_ID_SET
>5573	Identifier	BM_ID_SET
>5574	Condition	 
>5575	Identifier	rval
>5576	IfStatement	if ( rval && problemId != 0 )
>5577	CompoundStatement	 
>5578	ExpressionStatement	 
>5579	AssignmentExpr	rval = row -> getText ( \"problem_text\" , json )
>5580	CallExpression	row -> getText ( \"problem_text\" , json )
>5581	ArgumentList	\"problem_text\"
>5582	Argument	json
>5583	Identifier	json
>5584	Argument	\"problem_text\"
>5585	PrimaryExpression	\"problem_text\"
>5586	Callee	row -> getText
>5587	PtrMemberAccess	row -> getText
>5588	Identifier	getText
>5589	Identifier	row
>5590	Identifier	rval
>5591	Condition	 
>5592	AndExpression	rval && problemId != 0
>5593	EqualityExpression	problemId != 0
>5594	PrimaryExpression	0
>5595	Identifier	problemId
>5596	Identifier	rval
>5597	ExpressionStatement	 
>5598	AssignmentExpr	rval = rval && row -> getText ( \"ware_id\" , wareId ) && row -> getUInt32 ( \"media_library_id\" , mlId ) && \
>5599	AndExpression	rval && row -> getText ( \"ware_id\" , wareId ) && row -> getUInt32 ( \"media_library_id\" , mlId ) && row \
>5600	AndExpression	row -> getText ( \"ware_id\" , wareId ) && row -> getUInt32 ( \"media_library_id\" , mlId ) && row -> getUInt32 ( \"\
>5601	AndExpression	row -> getUInt32 ( \"media_library_id\" , mlId ) && row -> getUInt32 ( \"payee_scheme_id\" , psId ) && row \
>5602	AndExpression	row -> getUInt32 ( \"payee_scheme_id\" , psId ) && row -> getText ( \"description\" , str ) && row -> getUInt64 ( \"\
>5603	AndExpression	row -> getText ( \"description\" , str ) && row -> getUInt64 ( \"problem_id\" , problemId ) && row -> getUInt32 ( \"\
>5604	AndExpression	row -> getUInt64 ( \"problem_id\" , problemId ) && row -> getUInt32 ( \"dirty\" , dirty ) && row -> getUInt32 ( \"\
>5605	AndExpression	row -> getUInt32 ( \"dirty\" , dirty ) && row -> getUInt32 ( \"updating\" , updating )
>5606	CallExpression	row -> getUInt32 ( \"updating\" , updating )
>5607	ArgumentList	\"updating\"
>5608	Argument	updating
>5609	Identifier	updating
>5610	Argument	\"updating\"
>5611	PrimaryExpression	\"updating\"
>5612	Callee	row -> getUInt32
>5613	PtrMemberAccess	row -> getUInt32
>5614	Identifier	getUInt32
>5615	Identifier	row
>5616	CallExpression	row -> getUInt32 ( \"dirty\" , dirty )
>5617	ArgumentList	\"dirty\"
>5618	Argument	dirty
>5619	Identifier	dirty
>5620	Argument	\"dirty\"
>5621	PrimaryExpression	\"dirty\"
>5622	Callee	row -> getUInt32
>5623	PtrMemberAccess	row -> getUInt32
>5624	Identifier	getUInt32
>5625	Identifier	row
>5626	CallExpression	row -> getUInt64 ( \"problem_id\" , problemId )
>5627	ArgumentList	\"problem_id\"
>5628	Argument	problemId
>5629	Identifier	problemId
>5630	Argument	\"problem_id\"
>5631	PrimaryExpression	\"problem_id\"
>5632	Callee	row -> getUInt64
>5633	PtrMemberAccess	row -> getUInt64
>5634	Identifier	getUInt64
>5635	Identifier	row
>5636	CallExpression	row -> getText ( \"description\" , str )
>5637	ArgumentList	\"description\"
>5638	Argument	str
>5639	Identifier	str
>5640	Argument	\"description\"
>5641	PrimaryExpression	\"description\"
>5642	Callee	row -> getText
>5643	PtrMemberAccess	row -> getText
>5644	Identifier	getText
>5645	Identifier	row
>5646	CallExpression	row -> getUInt32 ( \"payee_scheme_id\" , psId )
>5647	ArgumentList	\"payee_scheme_id\"
>5648	Argument	psId
>5649	Identifier	psId
>5650	Argument	\"payee_scheme_id\"
>5651	PrimaryExpression	\"payee_scheme_id\"
>5652	Callee	row -> getUInt32
>5653	PtrMemberAccess	row -> getUInt32
>5654	Identifier	getUInt32
>5655	Identifier	row
>5656	CallExpression	row -> getUInt32 ( \"media_library_id\" , mlId )
>5657	ArgumentList	\"media_library_id\"
>5658	Argument	mlId
>5659	Identifier	mlId
>5660	Argument	\"media_library_id\"
>5661	PrimaryExpression	\"media_library_id\"
>5662	Callee	row -> getUInt32
>5663	PtrMemberAccess	row -> getUInt32
>5664	Identifier	getUInt32
>5665	Identifier	row
>5666	CallExpression	row -> getText ( \"ware_id\" , wareId )
>5667	ArgumentList	\"ware_id\"
>5668	Argument	wareId
>5669	Identifier	wareId
>5670	Argument	\"ware_id\"
>5671	PrimaryExpression	\"ware_id\"
>5672	Callee	row -> getText
>5673	PtrMemberAccess	row -> getText
>5674	Identifier	getText
>5675	Identifier	row
>5676	Identifier	rval
>5677	Identifier	rval
>5678	IdentifierDeclStatement	 
>5679	IdentifierDecl	json
>5680	Identifier	json
>5681	IdentifierDeclType	string
>5682	IdentifierDeclStatement	 
>5683	IdentifierDecl	updating = 0
>5684	AssignmentExpr	updating = 0
>5685	PrimaryExpression	0
>5686	Identifier	updating
>5687	Identifier	updating
>5688	IdentifierDeclType	uint32_t
>5689	IdentifierDeclStatement	 
>5690	IdentifierDecl	dirty = 0
>5691	AssignmentExpr	dirty = 0
>5692	PrimaryExpression	0
>5693	Identifier	dirty
>5694	Identifier	dirty
>5695	IdentifierDeclType	uint32_t
>5696	IdentifierDeclStatement	 
>5697	IdentifierDecl	problemId = 0
>5698	AssignmentExpr	problemId = 0
>5699	PrimaryExpression	0
>5700	Identifier	problemId
>5701	Identifier	problemId
>5702	IdentifierDeclType	uint64_t
>5703	IdentifierDeclStatement	 
>5704	IdentifierDecl	str
>5705	Identifier	str
>5706	IdentifierDeclType	string
>5707	IdentifierDeclStatement	 
>5708	IdentifierDecl	psId
>5709	Identifier	psId
>5710	IdentifierDeclType	PayeeSchemeId
>5711	IdentifierDeclStatement	 
>5712	IdentifierDecl	mlId
>5713	Identifier	mlId
>5714	IdentifierDeclType	MediaLibraryId
>5715	IdentifierDeclStatement	 
>5716	IdentifierDecl	wareId
>5717	Identifier	wareId
>5718	IdentifierDeclType	string
>5719	IdentifierDeclStatement	 
>5720	IdentifierDecl	ware = wareSet [ \"resources\" ] -> append ( )
>5721	AssignmentExpr	ware = wareSet [ \"resources\" ] -> append ( )
>5722	CallExpression	wareSet [ \"resources\" ] -> append ( )
>5723	ArgumentList	 
>5724	Callee	wareSet [ \"resources\" ] -> append
>5725	PtrMemberAccess	wareSet [ \"resources\" ] -> append
>5726	Identifier	append
>5727	ArrayIndexing	wareSet [ \"resources\" ]
>5728	PrimaryExpression	\"resources\"
>5729	Identifier	wareSet
>5730	Identifier	ware
>5731	Identifier	ware
>5732	IdentifierDeclType	Ware
>5733	Condition	 
>5734	AndExpression	rval && deleted == 0
>5735	EqualityExpression	deleted == 0
>5736	PrimaryExpression	0
>5737	Identifier	deleted
>5738	Identifier	rval
>5739	ExpressionStatement	 
>5740	AssignmentExpr	rval = row -> getUInt32 ( \"deleted\" , deleted )
>5741	CallExpression	row -> getUInt32 ( \"deleted\" , deleted )
>5742	ArgumentList	\"deleted\"
>5743	Argument	deleted
>5744	Identifier	deleted
>5745	Argument	\"deleted\"
>5746	PrimaryExpression	\"deleted\"
>5747	Callee	row -> getUInt32
>5748	PtrMemberAccess	row -> getUInt32
>5749	Identifier	getUInt32
>5750	Identifier	row
>5751	Identifier	rval
>5752	IdentifierDeclStatement	 
>5753	IdentifierDecl	deleted = 0
>5754	AssignmentExpr	deleted = 0
>5755	PrimaryExpression	0
>5756	Identifier	deleted
>5757	Identifier	deleted
>5758	IdentifierDeclType	uint32_t
>5759	Condition	 
>5760	AndExpression	rval && ( row = s -> fetch ( ) ) != NULL
>5761	EqualityExpression	( row = s -> fetch ( ) ) != NULL
>5762	Identifier	NULL
>5763	AssignmentExpr	row = s -> fetch ( )
>5764	CallExpression	s -> fetch ( )
>5765	ArgumentList	 
>5766	Callee	s -> fetch
>5767	PtrMemberAccess	s -> fetch
>5768	Identifier	fetch
>5769	Identifier	s
>5770	Identifier	row
>5771	Identifier	rval
>5772	IdentifierDeclStatement	 
>5773	IdentifierDecl	* row
>5774	Identifier	row
>5775	IdentifierDeclType	Row *
>5776	Condition	 
>5777	Identifier	rval
>5778	ExpressionStatement	 
>5779	AssignmentExpr	rval = rval && s -> execute ( )
>5780	AndExpression	rval && s -> execute ( )
>5781	CallExpression	s -> execute ( )
>5782	ArgumentList	 
>5783	Callee	s -> execute
>5784	PtrMemberAccess	s -> execute
>5785	Identifier	execute
>5786	Identifier	s
>5787	Identifier	rval
>5788	Identifier	rval
>5789	WhileStatement	while ( rval && mapi -> hasNext ( ) )
>5790	CompoundStatement	 
>5791	ExpressionStatement	 
>5792	AssignmentExpr	rval = s -> setText ( offset ++ , mapi -> getName ( ) )
>5793	CallExpression	s -> setText ( offset ++ , mapi -> getName ( ) )
>5794	ArgumentList	offset ++
>5795	Argument	mapi -> getName ( )
>5796	CallExpression	mapi -> getName ( )
>5797	ArgumentList	 
>5798	Callee	mapi -> getName
>5799	PtrMemberAccess	mapi -> getName
>5800	Identifier	getName
>5801	Identifier	mapi
>5802	Argument	offset ++
>5803	IncDecOp	offset ++
>5804	IncDec	++
>5805	Identifier	offset
>5806	Callee	s -> setText
>5807	PtrMemberAccess	s -> setText
>5808	Identifier	setText
>5809	Identifier	s
>5810	Identifier	rval
>5811	ExpressionStatement	 
>5812	CallExpression	mapi -> next ( )
>5813	ArgumentList	 
>5814	Callee	mapi -> next
>5815	PtrMemberAccess	mapi -> next
>5816	Identifier	next
>5817	Identifier	mapi
>5818	Condition	 
>5819	AndExpression	rval && mapi -> hasNext ( )
>5820	CallExpression	mapi -> hasNext ( )
>5821	ArgumentList	 
>5822	Callee	mapi -> hasNext
>5823	PtrMemberAccess	mapi -> hasNext
>5824	Identifier	hasNext
>5825	Identifier	mapi
>5826	Identifier	rval
>5827	ExpressionStatement	 
>5828	AssignmentExpr	mapi = ids . getIterator ( )
>5829	CallExpression	ids . getIterator ( )
>5830	ArgumentList	 
>5831	Callee	ids . getIterator
>5832	MemberAccess	ids . getIterator
>5833	Identifier	getIterator
>5834	Identifier	ids
>5835	Identifier	mapi
>5836	IdentifierDeclStatement	 
>5837	IdentifierDecl	offset = 1
>5838	AssignmentExpr	offset = 1
>5839	PrimaryExpression	1
>5840	Identifier	offset
>5841	Identifier	offset
>5842	IdentifierDeclType	int
>5843	ExpressionStatement	 
>5844	AssignmentExpr	rval = true
>5845	Identifier	true
>5846	Identifier	rval
>5847	Condition	 
>5848	EqualityExpression	s != NULL
>5849	Identifier	NULL
>5850	Identifier	s
>5851	IdentifierDeclStatement	 
>5852	IdentifierDecl	* s = c -> prepare ( sql . c_str ( ) )
>5853	AssignmentExpr	* s = c -> prepare ( sql . c_str ( ) )
>5854	CallExpression	c -> prepare ( sql . c_str ( ) )
>5855	ArgumentList	sql . c_str ( )
>5856	Argument	sql . c_str ( )
>5857	CallExpression	sql . c_str ( )
>5858	ArgumentList	 
>5859	Callee	sql . c_str
>5860	MemberAccess	sql . c_str
>5861	Identifier	c_str
>5862	Identifier	sql
>5863	Callee	c -> prepare
>5864	PtrMemberAccess	c -> prepare
>5865	Identifier	prepare
>5866	Identifier	c
>5867	Identifier	s
>5868	Identifier	s
>5869	IdentifierDeclType	Statement *
>5870	ExpressionStatement	 
>5871	CallExpression	sql . push_back ( ')' )
>5872	ArgumentList	')'
>5873	Argument	')'
>5874	PrimaryExpression	')'
>5875	Callee	sql . push_back
>5876	MemberAccess	sql . push_back
>5877	Identifier	push_back
>5878	Identifier	sql
>5879	WhileStatement	while ( mapi -> hasNext ( ) )
>5880	CompoundStatement	 
>5881	ExpressionStatement	 
>5882	UnaryExpression	++ i
>5883	Identifier	i
>5884	IncDec	++
>5885	ExpressionStatement	 
>5886	CallExpression	sql . push_back ( '?' )
>5887	ArgumentList	'?'
>5888	Argument	'?'
>5889	PrimaryExpression	'?'
>5890	Callee	sql . push_back
>5891	MemberAccess	sql . push_back
>5892	Identifier	push_back
>5893	Identifier	sql
>5894	IfStatement	if ( i != 0 )
>5895	CompoundStatement	 
>5896	ExpressionStatement	 
>5897	CallExpression	sql . push_back ( ',' )
>5898	ArgumentList	','
>5899	Argument	','
>5900	PrimaryExpression	','
>5901	Callee	sql . push_back
>5902	MemberAccess	sql . push_back
>5903	Identifier	push_back
>5904	Identifier	sql
>5905	Condition	 
>5906	EqualityExpression	i != 0
>5907	PrimaryExpression	0
>5908	Identifier	i
>5909	ExpressionStatement	 
>5910	CallExpression	mapi -> next ( )
>5911	ArgumentList	 
>5912	Callee	mapi -> next
>5913	PtrMemberAccess	mapi -> next
>5914	Identifier	next
>5915	Identifier	mapi
>5916	Condition	 
>5917	CallExpression	mapi -> hasNext ( )
>5918	ArgumentList	 
>5919	Callee	mapi -> hasNext
>5920	PtrMemberAccess	mapi -> hasNext
>5921	Identifier	hasNext
>5922	Identifier	mapi
>5923	IdentifierDeclStatement	 
>5924	IdentifierDecl	i = 0
>5925	AssignmentExpr	i = 0
>5926	PrimaryExpression	0
>5927	Identifier	i
>5928	Identifier	i
>5929	IdentifierDeclType	int
>5930	ExpressionStatement	 
>5931	AssignmentExpr	mapi = ids . getIterator ( )
>5932	CallExpression	ids . getIterator ( )
>5933	ArgumentList	 
>5934	Callee	ids . getIterator
>5935	MemberAccess	ids . getIterator
>5936	Identifier	getIterator
>5937	Identifier	ids
>5938	Identifier	mapi
>5939	IdentifierDeclStatement	 
>5940	IdentifierDecl	mapi
>5941	Identifier	mapi
>5942	IdentifierDeclType	DynamicObjectIterator
>5943	ExpressionStatement	 
>5944	PrimaryExpression	\" WHERE ware_id IN (\"
>5945	Statement	 
>5946	Statement	 
>5947	Statement	 
>5948	Statement	 
>5949	Statement	 
>5950	Statement	 
>5951	Statement	 
>5952	Statement	 
>5953	Statement	 
>5954	Statement	 
>5955	Statement	 
>5956	Statement	 
>5957	CompoundStatement	 
>5958	WhileStatement	while ( rval && i -> hasNext ( ) )
>5959	CompoundStatement	 
>5960	ExpressionStatement	 
>5961	CallExpression	wareSet [ \"resources\" ] -> append ( ware )
>5962	ArgumentList	ware
>5963	Argument	ware
>5964	Identifier	ware
>5965	Callee	wareSet [ \"resources\" ] -> append
>5966	PtrMemberAccess	wareSet [ \"resources\" ] -> append
>5967	Identifier	append
>5968	ArrayIndexing	wareSet [ \"resources\" ]
>5969	PrimaryExpression	\"resources\"
>5970	Identifier	wareSet
>5971	ExpressionStatement	 
>5972	AssignmentExpr	rval = populateWare ( userId , ware , mediaLibrary , c )
>5973	CallExpression	populateWare ( userId , ware , mediaLibrary , c )
>5974	ArgumentList	userId
>5975	Argument	c
>5976	Identifier	c
>5977	Argument	mediaLibrary
>5978	Identifier	mediaLibrary
>5979	Argument	ware
>5980	Identifier	ware
>5981	Argument	userId
>5982	Identifier	userId
>5983	Callee	populateWare
>5984	Identifier	populateWare
>5985	Identifier	rval
>5986	ExpressionStatement	 
>5987	CallExpression	BM_ID_SET ( ware [ \"id\" ] , BM_WARE_ID ( next ) )
>5988	ArgumentList	ware [ \"id\" ]
>5989	Argument	BM_WARE_ID ( next )
>5990	CallExpression	BM_WARE_ID ( next )
>5991	ArgumentList	next
>5992	Argument	next
>5993	Identifier	next
>5994	Callee	BM_WARE_ID
>5995	Identifier	BM_WARE_ID
>5996	Argument	ware [ \"id\" ]
>5997	ArrayIndexing	ware [ \"id\" ]
>5998	PrimaryExpression	\"id\"
>5999	Identifier	ware
>6000	Callee	BM_ID_SET
>6001	Identifier	BM_ID_SET
>6002	IdentifierDeclStatement	 
>6003	IdentifierDecl	ware
>6004	Identifier	ware
>6005	IdentifierDeclType	Ware
>6006	IdentifierDeclStatement	 
>6007	IdentifierDecl	& next = i -> next ( )
>6008	AssignmentExpr	& next = i -> next ( )
>6009	CallExpression	i -> next ( )
>6010	ArgumentList	 
>6011	Callee	i -> next
>6012	PtrMemberAccess	i -> next
>6013	Identifier	next
>6014	Identifier	i
>6015	Identifier	next
>6016	Identifier	next
>6017	IdentifierDeclType	DynamicObject &
>6018	Condition	 
>6019	AndExpression	rval && i -> hasNext ( )
>6020	CallExpression	i -> hasNext ( )
>6021	ArgumentList	 
>6022	Callee	i -> hasNext
>6023	PtrMemberAccess	i -> hasNext
>6024	Identifier	hasNext
>6025	Identifier	i
>6026	Identifier	rval
>6027	ExpressionStatement	 
>6028	AssignmentExpr	rval = true
>6029	Identifier	true
>6030	Identifier	rval
>6031	IdentifierDeclStatement	 
>6032	IdentifierDecl	i = ids . getIterator ( )
>6033	AssignmentExpr	i = ids . getIterator ( )
>6034	CallExpression	ids . getIterator ( )
>6035	ArgumentList	 
>6036	Callee	ids . getIterator
>6037	MemberAccess	ids . getIterator
>6038	Identifier	getIterator
>6039	Identifier	ids
>6040	Identifier	i
>6041	Identifier	i
>6042	IdentifierDeclType	DynamicObjectIterator
>6043	Condition	 
>6044	AndExpression	query -> hasMember ( \"default\" ) && query [ \"default\" ] -> getBoolean ( )
>6045	CallExpression	query [ \"default\" ] -> getBoolean ( )
>6046	ArgumentList	 
>6047	Callee	query [ \"default\" ] -> getBoolean
>6048	PtrMemberAccess	query [ \"default\" ] -> getBoolean
>6049	Identifier	getBoolean
>6050	ArrayIndexing	query [ \"default\" ]
>6051	PrimaryExpression	\"default\"
>6052	Identifier	query
>6053	CallExpression	query -> hasMember ( \"default\" )
>6054	ArgumentList	\"default\"
>6055	Argument	\"default\"
>6056	PrimaryExpression	\"default\"
>6057	Callee	query -> hasMember
>6058	PtrMemberAccess	query -> hasMember
>6059	Identifier	hasMember
>6060	Identifier	query
>6061	ExpressionStatement	 
>6062	AssignmentExpr	wareSet [ \"num\" ] = ( query -> hasMember ( \"ids\" ) ? query [ \"ids\" ] -> length ( ) 
>6063	AdditiveExpression	( query -> hasMember ( \"ids\" ) ? query [ \"ids\" ] -> length ( ) 
>6064	ConditionalExpression	query -> hasMember ( \"fileIds\" ) ? query [ \"fileIds\" ] -> length ( ) 
>6065	PrimaryExpression	0
>6066	CallExpression	query [ \"fileIds\" ] -> length ( )
>6067	ArgumentList	 
>6068	Callee	query [ \"fileIds\" ] -> length
>6069	PtrMemberAccess	query [ \"fileIds\" ] -> length
>6070	Identifier	length
>6071	ArrayIndexing	query [ \"fileIds\" ]
>6072	PrimaryExpression	\"fileIds\"
>6073	Identifier	query
>6074	Condition	query -> hasMember ( \"fileIds\" )
>6075	CallExpression	query -> hasMember ( \"fileIds\" )
>6076	ArgumentList	\"fileIds\"
>6077	Argument	\"fileIds\"
>6078	PrimaryExpression	\"fileIds\"
>6079	Callee	query -> hasMember
>6080	PtrMemberAccess	query -> hasMember
>6081	Identifier	hasMember
>6082	Identifier	query
>6083	ConditionalExpression	query -> hasMember ( \"ids\" ) ? query [ \"ids\" ] -> length ( ) 
>6084	PrimaryExpression	0
>6085	CallExpression	query [ \"ids\" ] -> length ( )
>6086	ArgumentList	 
>6087	Callee	query [ \"ids\" ] -> length
>6088	PtrMemberAccess	query [ \"ids\" ] -> length
>6089	Identifier	length
>6090	ArrayIndexing	query [ \"ids\" ]
>6091	PrimaryExpression	\"ids\"
>6092	Identifier	query
>6093	Condition	query -> hasMember ( \"ids\" )
>6094	CallExpression	query -> hasMember ( \"ids\" )
>6095	ArgumentList	\"ids\"
>6096	Argument	\"ids\"
>6097	PrimaryExpression	\"ids\"
>6098	Callee	query -> hasMember
>6099	PtrMemberAccess	query -> hasMember
>6100	Identifier	hasMember
>6101	Identifier	query
>6102	ArrayIndexing	wareSet [ \"num\" ]
>6103	PrimaryExpression	\"num\"
>6104	Identifier	wareSet
>6105	ExpressionStatement	 
>6106	AssignmentExpr	wareSet [ \"start\" ] = 0
>6107	PrimaryExpression	0
>6108	ArrayIndexing	wareSet [ \"start\" ]
>6109	PrimaryExpression	\"start\"
>6110	Identifier	wareSet
>6111	ExpressionStatement	 
>6112	AssignmentExpr	wareSet [ \"total\" ] = 0
>6113	PrimaryExpression	0
>6114	ArrayIndexing	wareSet [ \"total\" ]
>6115	PrimaryExpression	\"total\"
>6116	Identifier	wareSet
>6117	ExpressionStatement	 
>6118	CallExpression	wareSet [ \"resources\" ] -> clear ( )
>6119	ArgumentList	 
>6120	Callee	wareSet [ \"resources\" ] -> clear
>6121	PtrMemberAccess	wareSet [ \"resources\" ] -> clear
>6122	Identifier	clear
>6123	ArrayIndexing	wareSet [ \"resources\" ]
>6124	PrimaryExpression	\"resources\"
>6125	Identifier	wareSet
>6126	ExpressionStatement	 
>6127	CallExpression	wareSet [ \"resources\" ] -> setType ( Array )
>6128	ArgumentList	Array
>6129	Argument	Array
>6130	Identifier	Array
>6131	Callee	wareSet [ \"resources\" ] -> setType
>6132	PtrMemberAccess	wareSet [ \"resources\" ] -> setType
>6133	Identifier	setType
>6134	ArrayIndexing	wareSet [ \"resources\" ]
>6135	PrimaryExpression	\"resources\"
>6136	Identifier	wareSet
>6137	IfStatement	if ( query -> hasMember ( \"fileIds\" ) )
>6138	CompoundStatement	 
>6139	IfStatement	if ( s != NULL )
>6140	CompoundStatement	 
>6141	IfStatement	if ( rval )
>6142	CompoundStatement	 
>6143	WhileStatement	while ( rval && ( row = s -> fetch ( ) ) != NULL )
>6144	CompoundStatement	 
>6145	IfStatement	if ( rval )
>6146	CompoundStatement	 
>6147	ExpressionStatement	 
>6148	AssignmentExpr	ids [ wareId . c_str ( ) ] = true
>6149	Identifier	true
>6150	ArrayIndexing	ids [ wareId . c_str ( ) ]
>6151	CallExpression	wareId . c_str ( )
>6152	ArgumentList	 
>6153	Callee	wareId . c_str
>6154	MemberAccess	wareId . c_str
>6155	Identifier	c_str
>6156	Identifier	wareId
>6157	Identifier	ids
>6158	Condition	 
>6159	Identifier	rval
>6160	ExpressionStatement	 
>6161	AssignmentExpr	rval = rval && row -> getText ( \"ware_id\" , wareId )
>6162	AndExpression	rval && row -> getText ( \"ware_id\" , wareId )
>6163	CallExpression	row -> getText ( \"ware_id\" , wareId )
>6164	ArgumentList	\"ware_id\"
>6165	Argument	wareId
>6166	Identifier	wareId
>6167	Argument	\"ware_id\"
>6168	PrimaryExpression	\"ware_id\"
>6169	Callee	row -> getText
>6170	PtrMemberAccess	row -> getText
>6171	Identifier	getText
>6172	Identifier	row
>6173	Identifier	rval
>6174	Identifier	rval
>6175	IdentifierDeclStatement	 
>6176	IdentifierDecl	wareId
>6177	Identifier	wareId
>6178	IdentifierDeclType	string
>6179	Condition	 
>6180	AndExpression	rval && ( row = s -> fetch ( ) ) != NULL
>6181	EqualityExpression	( row = s -> fetch ( ) ) != NULL
>6182	Identifier	NULL
>6183	AssignmentExpr	row = s -> fetch ( )
>6184	CallExpression	s -> fetch ( )
>6185	ArgumentList	 
>6186	Callee	s -> fetch
>6187	PtrMemberAccess	s -> fetch
>6188	Identifier	fetch
>6189	Identifier	s
>6190	Identifier	row
>6191	Identifier	rval
>6192	IdentifierDeclStatement	 
>6193	IdentifierDecl	* row
>6194	Identifier	row
>6195	IdentifierDeclType	Row *
>6196	Condition	 
>6197	Identifier	rval
>6198	ExpressionStatement	 
>6199	AssignmentExpr	rval = rval && s -> execute ( )
>6200	AndExpression	rval && s -> execute ( )
>6201	CallExpression	s -> execute ( )
>6202	ArgumentList	 
>6203	Callee	s -> execute
>6204	PtrMemberAccess	s -> execute
>6205	Identifier	execute
>6206	Identifier	s
>6207	Identifier	rval
>6208	Identifier	rval
>6209	ForStatement	for ( int i = 0 , len = query [ \"fileIds\" ] -> length ( ) ; rval && ( i < len ) ; ++ i )
>6210	CompoundStatement	 
>6211	ExpressionStatement	 
>6212	AssignmentExpr	rval = s -> setText ( i + offset , query [ \"fileIds\" ] [ i ] -> getString ( ) )
>6213	CallExpression	s -> setText ( i + offset , query [ \"fileIds\" ] [ i ] -> getString ( ) )
>6214	ArgumentList	i + offset
>6215	Argument	query [ \"fileIds\" ] [ i ] -> getString ( )
>6216	CallExpression	query [ \"fileIds\" ] [ i ] -> getString ( )
>6217	ArgumentList	 
>6218	Callee	query [ \"fileIds\" ] [ i ] -> getString
>6219	PtrMemberAccess	query [ \"fileIds\" ] [ i ] -> getString
>6220	Identifier	getString
>6221	ArrayIndexing	query [ \"fileIds\" ] [ i ]
>6222	Identifier	i
>6223	ArrayIndexing	query [ \"fileIds\" ]
>6224	PrimaryExpression	\"fileIds\"
>6225	Identifier	query
>6226	Argument	i + offset
>6227	AdditiveExpression	i + offset
>6228	Identifier	offset
>6229	Identifier	i
>6230	Callee	s -> setText
>6231	PtrMemberAccess	s -> setText
>6232	Identifier	setText
>6233	Identifier	s
>6234	Identifier	rval
>6235	UnaryExpression	 
>6236	Identifier	i
>6237	IncDec	++
>6238	Condition	 
>6239	AndExpression	rval && ( i < len )
>6240	RelationalExpression	i < len
>6241	Identifier	len
>6242	Identifier	i
>6243	Identifier	rval
>6244	ForInit	 
>6245	IdentifierDeclStatement	int i = 0 , len = query [ \"fileIds\" ] -> length ( ) ;
>6246	IdentifierDecl	len = query [ \"fileIds\" ] -> length ( )
>6247	AssignmentExpr	len = query [ \"fileIds\" ] -> length ( )
>6248	CallExpression	query [ \"fileIds\" ] -> length ( )
>6249	ArgumentList	 
>6250	Callee	query [ \"fileIds\" ] -> length
>6251	PtrMemberAccess	query [ \"fileIds\" ] -> length
>6252	Identifier	length
>6253	ArrayIndexing	query [ \"fileIds\" ]
>6254	PrimaryExpression	\"fileIds\"
>6255	Identifier	query
>6256	Identifier	len
>6257	Identifier	len
>6258	IdentifierDeclType	int
>6259	IdentifierDecl	i = 0
>6260	AssignmentExpr	i = 0
>6261	PrimaryExpression	0
>6262	Identifier	i
>6263	Identifier	i
>6264	IdentifierDeclType	int
>6265	IdentifierDeclStatement	 
>6266	IdentifierDecl	offset = 1
>6267	AssignmentExpr	offset = 1
>6268	PrimaryExpression	1
>6269	Identifier	offset
>6270	Identifier	offset
>6271	IdentifierDeclType	int
>6272	ExpressionStatement	 
>6273	AssignmentExpr	rval = true
>6274	Identifier	true
>6275	Identifier	rval
>6276	Condition	 
>6277	EqualityExpression	s != NULL
>6278	Identifier	NULL
>6279	Identifier	s
>6280	IdentifierDeclStatement	 
>6281	IdentifierDecl	* s = c -> prepare ( sql . c_str ( ) )
>6282	AssignmentExpr	* s = c -> prepare ( sql . c_str ( ) )
>6283	CallExpression	c -> prepare ( sql . c_str ( ) )
>6284	ArgumentList	sql . c_str ( )
>6285	Argument	sql . c_str ( )
>6286	CallExpression	sql . c_str ( )
>6287	ArgumentList	 
>6288	Callee	sql . c_str
>6289	MemberAccess	sql . c_str
>6290	Identifier	c_str
>6291	Identifier	sql
>6292	Callee	c -> prepare
>6293	PtrMemberAccess	c -> prepare
>6294	Identifier	prepare
>6295	Identifier	c
>6296	Identifier	s
>6297	Identifier	s
>6298	IdentifierDeclType	Statement *
>6299	ExpressionStatement	 
>6300	CallExpression	sql . push_back ( ')' )
>6301	ArgumentList	')'
>6302	Argument	')'
>6303	PrimaryExpression	')'
>6304	Callee	sql . push_back
>6305	MemberAccess	sql . push_back
>6306	Identifier	push_back
>6307	Identifier	sql
>6308	ForStatement	for ( int i = 0 , len = query [ \"fileIds\" ] -> length ( ) ; i < len ; ++ i )
>6309	CompoundStatement	 
>6310	IfStatement	if ( i != ( len - 1 ) )
>6311	CompoundStatement	 
>6312	ExpressionStatement	 
>6313	CallExpression	sql . push_back ( ',' )
>6314	ArgumentList	','
>6315	Argument	','
>6316	PrimaryExpression	','
>6317	Callee	sql . push_back
>6318	MemberAccess	sql . push_back
>6319	Identifier	push_back
>6320	Identifier	sql
>6321	Condition	 
>6322	EqualityExpression	i != ( len - 1 )
>6323	AdditiveExpression	len - 1
>6324	PrimaryExpression	1
>6325	Identifier	len
>6326	Identifier	i
>6327	ExpressionStatement	 
>6328	CallExpression	sql . push_back ( '?' )
>6329	ArgumentList	'?'
>6330	Argument	'?'
>6331	PrimaryExpression	'?'
>6332	Callee	sql . push_back
>6333	MemberAccess	sql . push_back
>6334	Identifier	push_back
>6335	Identifier	sql
>6336	UnaryExpression	 
>6337	Identifier	i
>6338	IncDec	++
>6339	Condition	 
>6340	RelationalExpression	i < len
>6341	Identifier	len
>6342	Identifier	i
>6343	ForInit	 
>6344	IdentifierDeclStatement	int i = 0 , len = query [ \"fileIds\" ] -> length ( ) ;
>6345	IdentifierDecl	len = query [ \"fileIds\" ] -> length ( )
>6346	AssignmentExpr	len = query [ \"fileIds\" ] -> length ( )
>6347	CallExpression	query [ \"fileIds\" ] -> length ( )
>6348	ArgumentList	 
>6349	Callee	query [ \"fileIds\" ] -> length
>6350	PtrMemberAccess	query [ \"fileIds\" ] -> length
>6351	Identifier	length
>6352	ArrayIndexing	query [ \"fileIds\" ]
>6353	PrimaryExpression	\"fileIds\"
>6354	Identifier	query
>6355	Identifier	len
>6356	Identifier	len
>6357	IdentifierDeclType	int
>6358	IdentifierDecl	i = 0
>6359	AssignmentExpr	i = 0
>6360	PrimaryExpression	0
>6361	Identifier	i
>6362	Identifier	i
>6363	IdentifierDeclType	int
>6364	ExpressionStatement	 
>6365	PrimaryExpression	\" WHERE f.file_id IN (\"
>6366	Statement	 
>6367	Statement	 
>6368	Statement	 
>6369	Statement	 
>6370	Statement	 
>6371	Statement	 
>6372	Statement	 
>6373	Statement	 
>6374	Statement	 
>6375	Statement	 
>6376	Statement	 
>6377	Statement	 
>6378	Condition	 
>6379	CallExpression	query -> hasMember ( \"fileIds\" )
>6380	ArgumentList	\"fileIds\"
>6381	Argument	\"fileIds\"
>6382	PrimaryExpression	\"fileIds\"
>6383	Callee	query -> hasMember
>6384	PtrMemberAccess	query -> hasMember
>6385	Identifier	hasMember
>6386	Identifier	query
>6387	IfStatement	if ( query -> hasMember ( \"ids\" ) )
>6388	CompoundStatement	 
>6389	WhileStatement	while ( i -> hasNext ( ) )
>6390	CompoundStatement	 
>6391	ExpressionStatement	 
>6392	AssignmentExpr	ids [ i -> next ( ) -> getString ( ) ] = true
>6393	Identifier	true
>6394	ArrayIndexing	ids [ i -> next ( ) -> getString ( ) ]
>6395	CallExpression	i -> next ( ) -> getString ( )
>6396	ArgumentList	 
>6397	Callee	i -> next ( ) -> getString
>6398	PtrMemberAccess	i -> next ( ) -> getString
>6399	Identifier	getString
>6400	CallExpression	i -> next ( )
>6401	ArgumentList	 
>6402	Callee	i -> next
>6403	PtrMemberAccess	i -> next
>6404	Identifier	next
>6405	Identifier	i
>6406	Identifier	ids
>6407	Condition	 
>6408	CallExpression	i -> hasNext ( )
>6409	ArgumentList	 
>6410	Callee	i -> hasNext
>6411	PtrMemberAccess	i -> hasNext
>6412	Identifier	hasNext
>6413	Identifier	i
>6414	IdentifierDeclStatement	 
>6415	IdentifierDecl	i = query [ \"ids\" ] . getIterator ( )
>6416	AssignmentExpr	i = query [ \"ids\" ] . getIterator ( )
>6417	CallExpression	query [ \"ids\" ] . getIterator ( )
>6418	ArgumentList	 
>6419	Callee	query [ \"ids\" ] . getIterator
>6420	MemberAccess	query [ \"ids\" ] . getIterator
>6421	Identifier	getIterator
>6422	ArrayIndexing	query [ \"ids\" ]
>6423	PrimaryExpression	\"ids\"
>6424	Identifier	query
>6425	Identifier	i
>6426	Identifier	i
>6427	IdentifierDeclType	DynamicObjectIterator
>6428	Condition	 
>6429	CallExpression	query -> hasMember ( \"ids\" )
>6430	ArgumentList	\"ids\"
>6431	Argument	\"ids\"
>6432	PrimaryExpression	\"ids\"
>6433	Callee	query -> hasMember
>6434	PtrMemberAccess	query -> hasMember
>6435	Identifier	hasMember
>6436	Identifier	query
>6437	ExpressionStatement	 
>6438	CallExpression	ids -> setType ( Map )
>6439	ArgumentList	Map
>6440	Argument	Map
>6441	Identifier	Map
>6442	Callee	ids -> setType
>6443	PtrMemberAccess	ids -> setType
>6444	Identifier	setType
>6445	Identifier	ids
>6446	IdentifierDeclStatement	 
>6447	IdentifierDecl	ids
>6448	Identifier	ids
>6449	IdentifierDeclType	DynamicObject
>6450	IdentifierDeclStatement	 
>6451	IdentifierDecl	rval = false
>6452	AssignmentExpr	rval = false
>6453	Identifier	false
>6454	Identifier	false
>6455	Identifier	rval
>6456	IdentifierDeclType	bool
>6544	FunctionDef	CatalogDatabase 
>6545	ParameterList	UserId userId , Ware & ware , IMediaLibrary * mediaLibrary , Connection * c
>6546	Parameter	 
>6547	Identifier	c
>6548	ParameterType	Connection *
>6549	Parameter	 
>6550	Identifier	mediaLibrary
>6551	ParameterType	IMediaLibrary *
>6552	Parameter	 
>6553	Identifier	ware
>6554	ParameterType	Ware &
>6555	Parameter	 
>6556	Identifier	userId
>6557	ParameterType	UserId
>6558	ReturnType	bool
>6559	CompoundStatement	 
>6560	ReturnStatement	 
>6561	Identifier	rval
>6562	IfStatement	if ( s != NULL )
>6563	CompoundStatement	 
>6564	IfStatement	if ( rval )
>6565	CompoundStatement	 
>6566	IfStatement	if ( row == NULL )
>6567	ElseStatement	else
>6568	CompoundStatement	 
>6569	ExpressionStatement	 
>6570	AssignmentExpr	rval = mediaLibrary -> populateFile ( userId , fi , mlId , c )
>6571	CallExpression	mediaLibrary -> populateFile ( userId , fi , mlId , c )
>6572	ArgumentList	userId
>6573	Argument	c
>6574	Identifier	c
>6575	Argument	mlId
>6576	Identifier	mlId
>6577	Argument	fi
>6578	Identifier	fi
>6579	Argument	userId
>6580	Identifier	userId
>6581	Callee	mediaLibrary -> populateFile
>6582	PtrMemberAccess	mediaLibrary -> populateFile
>6583	Identifier	populateFile
>6584	Identifier	mediaLibrary
>6585	Identifier	rval
>6586	IdentifierDeclStatement	 
>6587	IdentifierDecl	& fi = ware [ \"fileInfos\" ] -> append ( )
>6588	AssignmentExpr	& fi = ware [ \"fileInfos\" ] -> append ( )
>6589	CallExpression	ware [ \"fileInfos\" ] -> append ( )
>6590	ArgumentList	 
>6591	Callee	ware [ \"fileInfos\" ] -> append
>6592	PtrMemberAccess	ware [ \"fileInfos\" ] -> append
>6593	Identifier	append
>6594	ArrayIndexing	ware [ \"fileInfos\" ]
>6595	PrimaryExpression	\"fileInfos\"
>6596	Identifier	ware
>6597	Identifier	fi
>6598	Identifier	fi
>6599	IdentifierDeclType	FileInfo &
>6600	ExpressionStatement	 
>6601	CallExpression	s -> fetch ( )
>6602	ArgumentList	 
>6603	Callee	s -> fetch
>6604	PtrMemberAccess	s -> fetch
>6605	Identifier	fetch
>6606	Identifier	s
>6607	ExpressionStatement	 
>6608	CallExpression	row -> getUInt32 ( \"media_library_id\" , mlId )
>6609	ArgumentList	\"media_library_id\"
>6610	Argument	mlId
>6611	Identifier	mlId
>6612	Argument	\"media_library_id\"
>6613	PrimaryExpression	\"media_library_id\"
>6614	Callee	row -> getUInt32
>6615	PtrMemberAccess	row -> getUInt32
>6616	Identifier	getUInt32
>6617	Identifier	row
>6618	IdentifierDeclStatement	 
>6619	IdentifierDecl	mlId
>6620	Identifier	mlId
>6621	IdentifierDeclType	MediaLibraryId
>6622	CompoundStatement	 
>6623	ExpressionStatement	 
>6624	AssignmentExpr	rval = false
>6625	Identifier	false
>6626	Identifier	rval
>6627	ExpressionStatement	 
>6628	CallExpression	Exception 
>6629	ArgumentList	e
>6630	Argument	e
>6631	Identifier	e
>6632	Callee	Exception 
>6633	Identifier	Exception 
>6634	ExpressionStatement	 
>6635	CallExpression	BM_ID_SET ( e -> getDetails ( ) [ \"wareId\" ] , BM_WARE_ID ( ware [ \"id\" ] ) )
>6636	ArgumentList	e -> getDetails ( ) [ \"wareId\" ]
>6637	Argument	BM_WARE_ID ( ware [ \"id\" ] )
>6638	CallExpression	BM_WARE_ID ( ware [ \"id\" ] )
>6639	ArgumentList	ware [ \"id\" ]
>6640	Argument	ware [ \"id\" ]
>6641	ArrayIndexing	ware [ \"id\" ]
>6642	PrimaryExpression	\"id\"
>6643	Identifier	ware
>6644	Callee	BM_WARE_ID
>6645	Identifier	BM_WARE_ID
>6646	Argument	e -> getDetails ( ) [ \"wareId\" ]
>6647	ArrayIndexing	e -> getDetails ( ) [ \"wareId\" ]
>6648	PrimaryExpression	\"wareId\"
>6649	CallExpression	e -> getDetails ( )
>6650	ArgumentList	 
>6651	Callee	e -> getDetails
>6652	PtrMemberAccess	e -> getDetails
>6653	Identifier	getDetails
>6654	Identifier	e
>6655	Callee	BM_ID_SET
>6656	Identifier	BM_ID_SET
>6657	IdentifierDeclStatement	 
>6658	IdentifierDecl	e = new Exception ( \"Ware not found.\" , \"bitmunk.catalog.database.InvalidWareId\" )
>6659	AssignmentExpr	e = new Exception ( \"Ware not found.\" , \"bitmunk.catalog.database.InvalidWareId\" )
>6660	Expression	\"Ware not found.\" , \"bitmunk.catalog.database.InvalidWareId\"
>6661	PrimaryExpression	\"bitmunk.catalog.database.InvalidWareId\"
>6662	PrimaryExpression	\"Ware not found.\"
>6663	Identifier	e
>6664	Identifier	e
>6665	IdentifierDeclType	ExceptionRef
>6666	Condition	 
>6667	EqualityExpression	row == NULL
>6668	Identifier	NULL
>6669	Identifier	row
>6670	IdentifierDeclStatement	 
>6671	IdentifierDecl	* row = s -> fetch ( )
>6672	AssignmentExpr	* row = s -> fetch ( )
>6673	CallExpression	s -> fetch ( )
>6674	ArgumentList	 
>6675	Callee	s -> fetch
>6676	PtrMemberAccess	s -> fetch
>6677	Identifier	fetch
>6678	Identifier	s
>6679	Identifier	row
>6680	Identifier	row
>6681	IdentifierDeclType	Row *
>6682	Condition	 
>6683	Identifier	rval
>6684	ExpressionStatement	 
>6685	AssignmentExpr	rval = s -> setText ( \"
>6686	AndExpression	s -> setText ( \"
>6687	CallExpression	s -> execute ( )
>6688	ArgumentList	 
>6689	Callee	s -> execute
>6690	PtrMemberAccess	s -> execute
>6691	Identifier	execute
>6692	Identifier	s
>6693	CallExpression	s -> setText ( \"
>6694	ArgumentList	\"
>6695	Argument	BM_WARE_ID ( ware [ \"id\" ] )
>6696	CallExpression	BM_WARE_ID ( ware [ \"id\" ] )
>6697	ArgumentList	ware [ \"id\" ]
>6698	Argument	ware [ \"id\" ]
>6699	ArrayIndexing	ware [ \"id\" ]
>6700	PrimaryExpression	\"id\"
>6701	Identifier	ware
>6702	Callee	BM_WARE_ID
>6703	Identifier	BM_WARE_ID
>6704	Argument	\"
>6705	PrimaryExpression	\"
>6706	Callee	s -> setText
>6707	PtrMemberAccess	s -> setText
>6708	Identifier	setText
>6709	Identifier	s
>6710	Identifier	rval
>6711	Condition	 
>6712	EqualityExpression	s != NULL
>6713	Identifier	NULL
>6714	Identifier	s
>6715	ExpressionStatement	 
>6716	Statement	 
>6717	Statement	 
>6718	Statement	 
>6719	Statement	 
>6720	Statement	 
>6721	Statement	 
>6722	Statement	 
>6723	Statement	 
>6724	Statement	 
>6725	Statement	 
>6726	Statement	 
>6727	Statement	 
>6728	IdentifierDeclStatement	 
>6729	IdentifierDecl	rval = false
>6730	AssignmentExpr	rval = false
>6731	Identifier	false
>6732	Identifier	false
>6733	Identifier	rval
>6734	IdentifierDeclType	bool
>6764	FunctionDef	CatalogDatabase 
>6765	ParameterList	Ware & ware , Connection * c
>6766	Parameter	 
>6767	Identifier	c
>6768	ParameterType	Connection *
>6769	Parameter	 
>6770	Identifier	ware
>6771	ParameterType	Ware &
>6772	ReturnType	bool
>6773	CompoundStatement	 
>6774	ReturnStatement	 
>6775	Identifier	rval
>6776	IfStatement	if ( rval )
>6777	CompoundStatement	 
>6778	IfStatement	if ( rows == 0 )
>6779	ElseStatement	else
>6780	CompoundStatement	 
>6781	IfStatement	if ( s != NULL )
>6782	CompoundStatement	 
>6783	IfStatement	if ( rval )
>6784	CompoundStatement	 
>6785	IfStatement	if ( row != NULL )
>6786	CompoundStatement	 
>6787	ExpressionStatement	 
>6788	CallExpression	s -> fetch ( )
>6789	ArgumentList	 
>6790	Callee	s -> fetch
>6791	PtrMemberAccess	s -> fetch
>6792	Identifier	fetch
>6793	Identifier	s
>6794	ExpressionStatement	 
>6795	CallExpression	BM_ID_SET ( ware [ \"payeeSchemeId\" ] , psId )
>6796	ArgumentList	ware [ \"payeeSchemeId\" ]
>6797	Argument	psId
>6798	Identifier	psId
>6799	Argument	ware [ \"payeeSchemeId\" ]
>6800	ArrayIndexing	ware [ \"payeeSchemeId\" ]
>6801	PrimaryExpression	\"payeeSchemeId\"
>6802	Identifier	ware
>6803	Callee	BM_ID_SET
>6804	Identifier	BM_ID_SET
>6805	ExpressionStatement	 
>6806	AssignmentExpr	rval = rval && row -> getUInt32 ( \"payee_scheme_id\" , psId )
>6807	AndExpression	rval && row -> getUInt32 ( \"payee_scheme_id\" , psId )
>6808	CallExpression	row -> getUInt32 ( \"payee_scheme_id\" , psId )
>6809	ArgumentList	\"payee_scheme_id\"
>6810	Argument	psId
>6811	Identifier	psId
>6812	Argument	\"payee_scheme_id\"
>6813	PrimaryExpression	\"payee_scheme_id\"
>6814	Callee	row -> getUInt32
>6815	PtrMemberAccess	row -> getUInt32
>6816	Identifier	getUInt32
>6817	Identifier	row
>6818	Identifier	rval
>6819	Identifier	rval
>6820	IdentifierDeclStatement	 
>6821	IdentifierDecl	psId
>6822	Identifier	psId
>6823	IdentifierDeclType	PayeeSchemeId
>6824	Condition	 
>6825	EqualityExpression	row != NULL
>6826	Identifier	NULL
>6827	Identifier	row
>6828	IdentifierDeclStatement	 
>6829	IdentifierDecl	* row = s -> fetch ( )
>6830	AssignmentExpr	* row = s -> fetch ( )
>6831	CallExpression	s -> fetch ( )
>6832	ArgumentList	 
>6833	Callee	s -> fetch
>6834	PtrMemberAccess	s -> fetch
>6835	Identifier	fetch
>6836	Identifier	s
>6837	Identifier	row
>6838	Identifier	row
>6839	IdentifierDeclType	monarch 
>6840	Condition	 
>6841	Identifier	rval
>6842	ExpressionStatement	 
>6843	AssignmentExpr	rval = s -> setText ( \"
>6844	AndExpression	s -> setText ( \"
>6845	CallExpression	s -> execute ( )
>6846	ArgumentList	 
>6847	Callee	s -> execute
>6848	PtrMemberAccess	s -> execute
>6849	Identifier	execute
>6850	Identifier	s
>6851	CallExpression	s -> setText ( \"
>6852	ArgumentList	\"
>6853	Argument	BM_WARE_ID ( ware [ \"id\" ] )
>6854	CallExpression	BM_WARE_ID ( ware [ \"id\" ] )
>6855	ArgumentList	ware [ \"id\" ]
>6856	Argument	ware [ \"id\" ]
>6857	ArrayIndexing	ware [ \"id\" ]
>6858	PrimaryExpression	\"id\"
>6859	Identifier	ware
>6860	Callee	BM_WARE_ID
>6861	Identifier	BM_WARE_ID
>6862	Argument	\"
>6863	PrimaryExpression	\"
>6864	Callee	s -> setText
>6865	PtrMemberAccess	s -> setText
>6866	Identifier	setText
>6867	Identifier	s
>6868	Identifier	rval
>6869	Condition	 
>6870	EqualityExpression	s != NULL
>6871	Identifier	NULL
>6872	Identifier	s
>6873	ExpressionStatement	 
>6874	Statement	 
>6875	Statement	 
>6876	Statement	 
>6877	Statement	 
>6878	Statement	 
>6879	Statement	 
>6880	Statement	 
>6881	Statement	 
>6882	Statement	 
>6883	Statement	 
>6884	CompoundStatement	 
>6885	ExpressionStatement	 
>6886	AssignmentExpr	rval = false
>6887	Identifier	false
>6888	Identifier	rval
>6889	ExpressionStatement	 
>6890	CallExpression	Exception 
>6891	ArgumentList	e
>6892	Argument	e
>6893	Identifier	e
>6894	Callee	Exception 
>6895	Identifier	Exception 
>6896	ExpressionStatement	 
>6897	CallExpression	BM_ID_SET ( e -> getDetails ( ) [ \"wareId\" ] , BM_WARE_ID ( ware [ \"id\" ] ) )
>6898	ArgumentList	e -> getDetails ( ) [ \"wareId\" ]
>6899	Argument	BM_WARE_ID ( ware [ \"id\" ] )
>6900	CallExpression	BM_WARE_ID ( ware [ \"id\" ] )
>6901	ArgumentList	ware [ \"id\" ]
>6902	Argument	ware [ \"id\" ]
>6903	ArrayIndexing	ware [ \"id\" ]
>6904	PrimaryExpression	\"id\"
>6905	Identifier	ware
>6906	Callee	BM_WARE_ID
>6907	Identifier	BM_WARE_ID
>6908	Argument	e -> getDetails ( ) [ \"wareId\" ]
>6909	ArrayIndexing	e -> getDetails ( ) [ \"wareId\" ]
>6910	PrimaryExpression	\"wareId\"
>6911	CallExpression	e -> getDetails ( )
>6912	ArgumentList	 
>6913	Callee	e -> getDetails
>6914	PtrMemberAccess	e -> getDetails
>6915	Identifier	getDetails
>6916	Identifier	e
>6917	Callee	BM_ID_SET
>6918	Identifier	BM_ID_SET
>6919	IdentifierDeclStatement	 
>6920	IdentifierDecl	e = new Exception ( \"Failed to remove a ware with an unknown WareId.\" , \"bitmunk.catalog.database.WareNotFound\" )
>6921	AssignmentExpr	e = new Exception ( \"Failed to remove a ware with an unknown WareId.\" , \"bitmunk.catalog.database.WareNotFound\" )
>6922	Expression	\"Failed to remove a ware with an unknown WareId.\" , \"bitmunk.catalog.database.WareNotFound\"
>6923	PrimaryExpression	\"bitmunk.catalog.database.WareNotFound\"
>6924	PrimaryExpression	\"Failed to remove a ware with an unknown WareId.\"
>6925	Identifier	e
>6926	Identifier	e
>6927	IdentifierDeclType	ExceptionRef
>6928	Condition	 
>6929	EqualityExpression	rows == 0
>6930	PrimaryExpression	0
>6931	Identifier	rows
>6932	ExpressionStatement	 
>6933	CallExpression	s -> getRowsChanged ( rows )
>6934	ArgumentList	rows
>6935	Argument	rows
>6936	Identifier	rows
>6937	Callee	s -> getRowsChanged
>6938	PtrMemberAccess	s -> getRowsChanged
>6939	Identifier	getRowsChanged
>6940	Identifier	s
>6941	IdentifierDeclStatement	 
>6942	IdentifierDecl	rows = 0
>6943	AssignmentExpr	rows = 0
>6944	PrimaryExpression	0
>6945	Identifier	rows
>6946	Identifier	rows
>6947	IdentifierDeclType	uint64_t
>6948	Condition	 
>6949	Identifier	rval
>6950	ExpressionStatement	 
>6951	AssignmentExpr	rval = ( s != NULL ) && s -> setText ( \"
>6952	AndExpression	( s != NULL ) && s -> setText ( \"
>6953	AndExpression	s -> setText ( \"
>6954	CallExpression	s -> execute ( )
>6955	ArgumentList	 
>6956	Callee	s -> execute
>6957	PtrMemberAccess	s -> execute
>6958	Identifier	execute
>6959	Identifier	s
>6960	CallExpression	s -> setText ( \"
>6961	ArgumentList	\"
>6962	Argument	BM_WARE_ID ( ware [ \"id\" ] )
>6963	CallExpression	BM_WARE_ID ( ware [ \"id\" ] )
>6964	ArgumentList	ware [ \"id\" ]
>6965	Argument	ware [ \"id\" ]
>6966	ArrayIndexing	ware [ \"id\" ]
>6967	PrimaryExpression	\"id\"
>6968	Identifier	ware
>6969	Callee	BM_WARE_ID
>6970	Identifier	BM_WARE_ID
>6971	Argument	\"
>6972	PrimaryExpression	\"
>6973	Callee	s -> setText
>6974	PtrMemberAccess	s -> setText
>6975	Identifier	setText
>6976	Identifier	s
>6977	EqualityExpression	s != NULL
>6978	Identifier	NULL
>6979	Identifier	s
>6980	Identifier	rval
>6981	ExpressionStatement	 
>6982	Statement	 
>6983	Statement	 
>6984	Statement	 
>6985	Statement	 
>6986	Statement	 
>6987	Statement	 
>6988	Statement	 
>6989	Statement	 
>6990	Statement	 
>6991	Statement	 
>6992	Statement	 
>6993	Statement	 
>6994	IdentifierDeclStatement	 
>6995	IdentifierDecl	rval = false
>6996	AssignmentExpr	rval = false
>6997	Identifier	false
>6998	Identifier	false
>6999	Identifier	rval
>7000	IdentifierDeclType	bool
>7026	FunctionDef	CatalogDatabase 
>7027	ParameterList	Ware & ware , PayeeSchemeId psId , Connection * c , bool * added
>7028	Parameter	 
>7029	Identifier	added
>7030	ParameterType	bool *
>7031	Parameter	 
>7032	Identifier	c
>7033	ParameterType	Connection *
>7034	Parameter	 
>7035	Identifier	psId
>7036	ParameterType	PayeeSchemeId
>7037	Parameter	 
>7038	Identifier	ware
>7039	ParameterType	Ware &
>7040	ReturnType	bool
>7041	CompoundStatement	 
>7042	ReturnStatement	 
>7043	Identifier	rval
>7044	IfStatement	if ( rval && added != NULL )
>7045	CompoundStatement	 
>7046	ExpressionStatement	 
>7047	AssignmentExpr	* added = inserted
>7048	Identifier	inserted
>7049	UnaryOp	* added
>7050	Identifier	added
>7051	UnaryOperator	*
>7052	Condition	 
>7053	AndExpression	rval && added != NULL
>7054	EqualityExpression	added != NULL
>7055	Identifier	NULL
>7056	Identifier	added
>7057	Identifier	rval
>7058	IfStatement	if ( rval && ! inserted )
>7059	CompoundStatement	 
>7060	ExpressionStatement	 
>7061	AssignmentExpr	rval = ( s != NULL ) && s -> setText ( \"
>7062	AndExpression	( s != NULL ) && s -> setText ( \"
>7063	AndExpression	s -> setText ( \"
>7064	AndExpression	s -> setText ( \"
>7065	AndExpression	s -> setUInt32 ( \"
>7066	AndExpression	s -> setText ( \"
>7067	CallExpression	s -> execute ( )
>7068	ArgumentList	 
>7069	Callee	s -> execute
>7070	PtrMemberAccess	s -> execute
>7071	Identifier	execute
>7072	Identifier	s
>7073	CallExpression	s -> setText ( \"
>7074	ArgumentList	\"
>7075	Argument	BM_WARE_ID ( ware [ \"id\" ] )
>7076	CallExpression	BM_WARE_ID ( ware [ \"id\" ] )
>7077	ArgumentList	ware [ \"id\" ]
>7078	Argument	ware [ \"id\" ]
>7079	ArrayIndexing	ware [ \"id\" ]
>7080	PrimaryExpression	\"id\"
>7081	Identifier	ware
>7082	Callee	BM_WARE_ID
>7083	Identifier	BM_WARE_ID
>7084	Argument	\"
>7085	PrimaryExpression	\"
>7086	Callee	s -> setText
>7087	PtrMemberAccess	s -> setText
>7088	Identifier	setText
>7089	Identifier	s
>7090	CallExpression	s -> setUInt32 ( \"
>7091	ArgumentList	\"
>7092	Argument	psId
>7093	Identifier	psId
>7094	Argument	\"
>7095	PrimaryExpression	\"
>7096	Callee	s -> setUInt32
>7097	PtrMemberAccess	s -> setUInt32
>7098	Identifier	setUInt32
>7099	Identifier	s
>7100	CallExpression	s -> setText ( \"
>7101	ArgumentList	\"
>7102	Argument	ware [ \"description\" ] -> getString ( )
>7103	CallExpression	ware [ \"description\" ] -> getString ( )
>7104	ArgumentList	 
>7105	Callee	ware [ \"description\" ] -> getString
>7106	PtrMemberAccess	ware [ \"description\" ] -> getString
>7107	Identifier	getString
>7108	ArrayIndexing	ware [ \"description\" ]
>7109	PrimaryExpression	\"description\"
>7110	Identifier	ware
>7111	Argument	\"
>7112	PrimaryExpression	\"
>7113	Callee	s -> setText
>7114	PtrMemberAccess	s -> setText
>7115	Identifier	setText
>7116	Identifier	s
>7117	CallExpression	s -> setText ( \"
>7118	ArgumentList	\"
>7119	Argument	BM_FILE_ID ( ware [ \"fileInfos\" ] [ 0 ] [ \"id\" ] )
>7120	CallExpression	BM_FILE_ID ( ware [ \"fileInfos\" ] [ 0 ] [ \"id\" ] )
>7121	ArgumentList	ware [ \"fileInfos\" ] [ 0 ] [ \"id\" ]
>7122	Argument	ware [ \"fileInfos\" ] [ 0 ] [ \"id\" ]
>7123	ArrayIndexing	ware [ \"fileInfos\" ] [ 0 ] [ \"id\" ]
>7124	PrimaryExpression	\"id\"
>7125	ArrayIndexing	ware [ \"fileInfos\" ] [ 0 ]
>7126	PrimaryExpression	0
>7127	ArrayIndexing	ware [ \"fileInfos\" ]
>7128	PrimaryExpression	\"fileInfos\"
>7129	Identifier	ware
>7130	Callee	BM_FILE_ID
>7131	Identifier	BM_FILE_ID
>7132	Argument	\"
>7133	PrimaryExpression	\"
>7134	Callee	s -> setText
>7135	PtrMemberAccess	s -> setText
>7136	Identifier	setText
>7137	Identifier	s
>7138	EqualityExpression	s != NULL
>7139	Identifier	NULL
>7140	Identifier	s
>7141	Identifier	rval
>7142	ExpressionStatement	 
>7143	Statement	 
>7144	Statement	 
>7145	Statement	 
>7146	Statement	 
>7147	Statement	 
>7148	Statement	 
>7149	Statement	 
>7150	Statement	 
>7151	Statement	 
>7152	Statement	 
>7153	Statement	 
>7154	Statement	 
>7155	Statement	 
>7156	Statement	 
>7157	Statement	 
>7158	Statement	 
>7159	Statement	 
>7160	Statement	 
>7161	Statement	 
>7162	Statement	 
>7163	Statement	 
>7164	Condition	 
>7165	AndExpression	rval && ! inserted
>7166	UnaryOp	! inserted
>7167	Identifier	inserted
>7168	UnaryOperator	!
>7169	Identifier	rval
>7170	CompoundStatement	 
>7171	IfStatement	if ( rval )
>7172	CompoundStatement	 
>7173	ExpressionStatement	 
>7174	AssignmentExpr	inserted = ( rows == 1 )
>7175	EqualityExpression	rows == 1
>7176	PrimaryExpression	1
>7177	Identifier	rows
>7178	Identifier	inserted
>7179	ExpressionStatement	 
>7180	CallExpression	s -> getRowsChanged ( rows )
>7181	ArgumentList	rows
>7182	Argument	rows
>7183	Identifier	rows
>7184	Callee	s -> getRowsChanged
>7185	PtrMemberAccess	s -> getRowsChanged
>7186	Identifier	getRowsChanged
>7187	Identifier	s
>7188	IdentifierDeclStatement	 
>7189	IdentifierDecl	rows
>7190	Identifier	rows
>7191	IdentifierDeclType	uint64_t
>7192	Condition	 
>7193	Identifier	rval
>7194	ExpressionStatement	 
>7195	AssignmentExpr	rval = ( s != NULL ) && s -> setText ( \"
>7196	AndExpression	( s != NULL ) && s -> setText ( \"
>7197	AndExpression	s -> setText ( \"
>7198	AndExpression	s -> setText ( \"
>7199	AndExpression	s -> setText ( \"
>7200	AndExpression	s -> setUInt32 ( \"
>7201	CallExpression	s -> execute ( )
>7202	ArgumentList	 
>7203	Callee	s -> execute
>7204	PtrMemberAccess	s -> execute
>7205	Identifier	execute
>7206	Identifier	s
>7207	CallExpression	s -> setUInt32 ( \"
>7208	ArgumentList	\"
>7209	Argument	psId
>7210	Identifier	psId
>7211	Argument	\"
>7212	PrimaryExpression	\"
>7213	Callee	s -> setUInt32
>7214	PtrMemberAccess	s -> setUInt32
>7215	Identifier	setUInt32
>7216	Identifier	s
>7217	CallExpression	s -> setText ( \"
>7218	ArgumentList	\"
>7219	Argument	ware [ \"description\" ] -> getString ( )
>7220	CallExpression	ware [ \"description\" ] -> getString ( )
>7221	ArgumentList	 
>7222	Callee	ware [ \"description\" ] -> getString
>7223	PtrMemberAccess	ware [ \"description\" ] -> getString
>7224	Identifier	getString
>7225	ArrayIndexing	ware [ \"description\" ]
>7226	PrimaryExpression	\"description\"
>7227	Identifier	ware
>7228	Argument	\"
>7229	PrimaryExpression	\"
>7230	Callee	s -> setText
>7231	PtrMemberAccess	s -> setText
>7232	Identifier	setText
>7233	Identifier	s
>7234	CallExpression	s -> setText ( \"
>7235	ArgumentList	\"
>7236	Argument	BM_WARE_ID ( ware [ \"id\" ] )
>7237	CallExpression	BM_WARE_ID ( ware [ \"id\" ] )
>7238	ArgumentList	ware [ \"id\" ]
>7239	Argument	ware [ \"id\" ]
>7240	ArrayIndexing	ware [ \"id\" ]
>7241	PrimaryExpression	\"id\"
>7242	Identifier	ware
>7243	Callee	BM_WARE_ID
>7244	Identifier	BM_WARE_ID
>7245	Argument	\"
>7246	PrimaryExpression	\"
>7247	Callee	s -> setText
>7248	PtrMemberAccess	s -> setText
>7249	Identifier	setText
>7250	Identifier	s
>7251	CallExpression	s -> setText ( \"
>7252	ArgumentList	\"
>7253	Argument	BM_FILE_ID ( ware [ \"fileInfos\" ] [ 0 ] [ \"id\" ] )
>7254	CallExpression	BM_FILE_ID ( ware [ \"fileInfos\" ] [ 0 ] [ \"id\" ] )
>7255	ArgumentList	ware [ \"fileInfos\" ] [ 0 ] [ \"id\" ]
>7256	Argument	ware [ \"fileInfos\" ] [ 0 ] [ \"id\" ]
>7257	ArrayIndexing	ware [ \"fileInfos\" ] [ 0 ] [ \"id\" ]
>7258	PrimaryExpression	\"id\"
>7259	ArrayIndexing	ware [ \"fileInfos\" ] [ 0 ]
>7260	PrimaryExpression	0
>7261	ArrayIndexing	ware [ \"fileInfos\" ]
>7262	PrimaryExpression	\"fileInfos\"
>7263	Identifier	ware
>7264	Callee	BM_FILE_ID
>7265	Identifier	BM_FILE_ID
>7266	Argument	\"
>7267	PrimaryExpression	\"
>7268	Callee	s -> setText
>7269	PtrMemberAccess	s -> setText
>7270	Identifier	setText
>7271	Identifier	s
>7272	EqualityExpression	s != NULL
>7273	Identifier	NULL
>7274	Identifier	s
>7275	Identifier	rval
>7276	ExpressionStatement	 
>7277	Statement	 
>7278	Statement	 
>7279	Statement	 
>7280	Statement	 
>7281	Statement	 
>7282	Statement	 
>7283	Statement	 
>7284	Statement	 
>7285	Statement	 
>7286	Statement	 
>7287	Statement	 
>7288	Statement	 
>7289	Statement	 
>7290	Statement	 
>7291	Statement	 
>7292	Statement	 
>7293	Statement	 
>7294	IdentifierDeclStatement	 
>7295	IdentifierDecl	inserted = false
>7296	AssignmentExpr	inserted = false
>7297	Identifier	false
>7298	Identifier	false
>7299	Identifier	inserted
>7300	IdentifierDeclType	bool
>7301	IdentifierDeclStatement	 
>7302	IdentifierDecl	rval = false
>7303	AssignmentExpr	rval = false
>7304	Identifier	false
>7305	Identifier	false
>7306	Identifier	rval
>7307	IdentifierDeclType	bool
>7332	FunctionDef	CatalogDatabase 
>7333	ParameterList	uint64_t problemId , FileId fileId , MediaId mediaId , Connection * c
>7334	Parameter	 
>7335	Identifier	c
>7336	ParameterType	Connection *
>7337	Parameter	 
>7338	Identifier	mediaId
>7339	ParameterType	MediaId
>7340	Parameter	 
>7341	Identifier	fileId
>7342	ParameterType	FileId
>7343	Parameter	 
>7344	Identifier	problemId
>7345	ParameterType	uint64_t
>7346	ReturnType	bool
>7347	CompoundStatement	 
>7348	ReturnStatement	 
>7349	Identifier	rval
>7350	ExpressionStatement	 
>7351	AssignmentExpr	rval = ( s != NULL ) && s -> setUInt32 ( \"
>7352	AndExpression	( s != NULL ) && s -> setUInt32 ( \"
>7353	AndExpression	s -> setUInt32 ( \"
>7354	AndExpression	s -> setText ( \"
>7355	AndExpression	s -> setUInt64 ( \"
>7356	CallExpression	s -> execute ( )
>7357	ArgumentList	 
>7358	Callee	s -> execute
>7359	PtrMemberAccess	s -> execute
>7360	Identifier	execute
>7361	Identifier	s
>7362	CallExpression	s -> setUInt64 ( \"
>7363	ArgumentList	\"
>7364	Argument	mediaId
>7365	Identifier	mediaId
>7366	Argument	\"
>7367	PrimaryExpression	\"
>7368	Callee	s -> setUInt64
>7369	PtrMemberAccess	s -> setUInt64
>7370	Identifier	setUInt64
>7371	Identifier	s
>7372	CallExpression	s -> setText ( \"
>7373	ArgumentList	\"
>7374	Argument	fileId
>7375	Identifier	fileId
>7376	Argument	\"
>7377	PrimaryExpression	\"
>7378	Callee	s -> setText
>7379	PtrMemberAccess	s -> setText
>7380	Identifier	setText
>7381	Identifier	s
>7382	CallExpression	s -> setUInt32 ( \"
>7383	ArgumentList	\"
>7384	Argument	problemId
>7385	Identifier	problemId
>7386	Argument	\"
>7387	PrimaryExpression	\"
>7388	Callee	s -> setUInt32
>7389	PtrMemberAccess	s -> setUInt32
>7390	Identifier	setUInt32
>7391	Identifier	s
>7392	EqualityExpression	s != NULL
>7393	Identifier	NULL
>7394	Identifier	s
>7395	Identifier	rval
>7396	ExpressionStatement	 
>7397	Statement	 
>7398	Statement	 
>7399	Statement	 
>7400	Statement	 
>7401	Statement	 
>7402	Statement	 
>7403	Statement	 
>7404	Statement	 
>7405	Statement	 
>7406	Statement	 
>7407	Statement	 
>7408	Statement	 
>7409	Statement	 
>7410	Statement	 
>7411	Statement	 
>7412	Statement	 
>7413	Statement	 
>7414	Statement	 
>7415	Statement	 
>7416	Statement	 
>7417	Statement	 
>7418	Statement	 
>7419	Statement	 
>7420	Statement	 
>7421	Statement	 
>7422	Statement	 
>7423	Statement	 
>7424	Statement	 
>7425	Statement	 
>7426	Statement	 
>7427	IdentifierDeclStatement	 
>7428	IdentifierDecl	rval = false
>7429	AssignmentExpr	rval = false
>7430	Identifier	false
>7431	Identifier	false
>7432	Identifier	rval
>7433	IdentifierDeclType	bool
>7450	FunctionDef	CatalogDatabase 
>7451	ParameterList	UserId userId , IMediaLibrary * mediaLibrary , DynamicObject & wares , Connection * c
>7452	Parameter	 
>7453	Identifier	c
>7454	ParameterType	Connection *
>7455	Parameter	 
>7456	Identifier	wares
>7457	ParameterType	DynamicObject &
>7458	Parameter	 
>7459	Identifier	mediaLibrary
>7460	ParameterType	IMediaLibrary *
>7461	Parameter	 
>7462	Identifier	userId
>7463	ParameterType	UserId
>7464	ReturnType	bool
>7465	CompoundStatement	 
>7466	ReturnStatement	 
>7467	Identifier	rval
>7468	IfStatement	if ( rval )
>7469	CompoundStatement	 
>7470	WhileStatement	while ( rval && ( row = s -> fetch ( ) ) != NULL )
>7471	CompoundStatement	 
>7472	IfStatement	if ( deleted == 0 )
>7473	ElseStatement	else
>7474	CompoundStatement	 
>7475	ExpressionStatement	 
>7476	CallExpression	wares [ \"removals\" ] -> append ( sl )
>7477	ArgumentList	sl
>7478	Argument	sl
>7479	Identifier	sl
>7480	Callee	wares [ \"removals\" ] -> append
>7481	PtrMemberAccess	wares [ \"removals\" ] -> append
>7482	Identifier	append
>7483	ArrayIndexing	wares [ \"removals\" ]
>7484	PrimaryExpression	\"removals\"
>7485	Identifier	wares
>7486	ExpressionStatement	 
>7487	CallExpression	BM_ID_SET ( sl [ \"fileInfo\" ] [ \"mediaId\" ] , BM_MEDIA_ID ( ids [ 0 ] ) )
>7488	ArgumentList	sl [ \"fileInfo\" ] [ \"mediaId\" ]
>7489	Argument	BM_MEDIA_ID ( ids [ 0 ] )
>7490	CallExpression	BM_MEDIA_ID ( ids [ 0 ] )
>7491	ArgumentList	ids [ 0 ]
>7492	Argument	ids [ 0 ]
>7493	ArrayIndexing	ids [ 0 ]
>7494	PrimaryExpression	0
>7495	Identifier	ids
>7496	Callee	BM_MEDIA_ID
>7497	Identifier	BM_MEDIA_ID
>7498	Argument	sl [ \"fileInfo\" ] [ \"mediaId\" ]
>7499	ArrayIndexing	sl [ \"fileInfo\" ] [ \"mediaId\" ]
>7500	PrimaryExpression	\"mediaId\"
>7501	ArrayIndexing	sl [ \"fileInfo\" ]
>7502	PrimaryExpression	\"fileInfo\"
>7503	Identifier	sl
>7504	Callee	BM_ID_SET
>7505	Identifier	BM_ID_SET
>7506	ExpressionStatement	 
>7507	CallExpression	BM_ID_SET ( sl [ \"fileInfo\" ] [ \"id\" ] , BM_FILE_ID ( ids [ 1 ] ) )
>7508	ArgumentList	sl [ \"fileInfo\" ] [ \"id\" ]
>7509	Argument	BM_FILE_ID ( ids [ 1 ] )
>7510	CallExpression	BM_FILE_ID ( ids [ 1 ] )
>7511	ArgumentList	ids [ 1 ]
>7512	Argument	ids [ 1 ]
>7513	ArrayIndexing	ids [ 1 ]
>7514	PrimaryExpression	1
>7515	Identifier	ids
>7516	Callee	BM_FILE_ID
>7517	Identifier	BM_FILE_ID
>7518	Argument	sl [ \"fileInfo\" ] [ \"id\" ]
>7519	ArrayIndexing	sl [ \"fileInfo\" ] [ \"id\" ]
>7520	PrimaryExpression	\"id\"
>7521	ArrayIndexing	sl [ \"fileInfo\" ]
>7522	PrimaryExpression	\"fileInfo\"
>7523	Identifier	sl
>7524	Callee	BM_ID_SET
>7525	Identifier	BM_ID_SET
>7526	IdentifierDeclStatement	 
>7527	IdentifierDecl	sl
>7528	Identifier	sl
>7529	IdentifierDeclType	SellerListing
>7530	IdentifierDeclStatement	 
>7531	IdentifierDecl	ids = StringTools 
>7532	AssignmentExpr	ids = StringTools 
>7533	CallExpression	StringTools 
>7534	ArgumentList	tokens [ 1 ] -> getString ( )
>7535	Argument	\"-\"
>7536	PrimaryExpression	\"-\"
>7537	Argument	tokens [ 1 ] -> getString ( )
>7538	CallExpression	tokens [ 1 ] -> getString ( )
>7539	ArgumentList	 
>7540	Callee	tokens [ 1 ] -> getString
>7541	PtrMemberAccess	tokens [ 1 ] -> getString
>7542	Identifier	getString
>7543	ArrayIndexing	tokens [ 1 ]
>7544	PrimaryExpression	1
>7545	Identifier	tokens
>7546	Callee	StringTools 
>7547	Identifier	StringTools 
>7548	Identifier	ids
>7549	Identifier	ids
>7550	IdentifierDeclType	DynamicObject
>7551	IdentifierDeclStatement	 
>7552	IdentifierDecl	tokens = StringTools 
>7553	AssignmentExpr	tokens = StringTools 
>7554	CallExpression	StringTools 
>7555	ArgumentList	wareId . c_str ( )
>7556	Argument	\"bitmunk
>7557	PrimaryExpression	\"bitmunk
>7558	Argument	wareId . c_str ( )
>7559	CallExpression	wareId . c_str ( )
>7560	ArgumentList	 
>7561	Callee	wareId . c_str
>7562	MemberAccess	wareId . c_str
>7563	Identifier	c_str
>7564	Identifier	wareId
>7565	Callee	StringTools 
>7566	Identifier	StringTools 
>7567	Identifier	tokens
>7568	Identifier	tokens
>7569	IdentifierDeclType	DynamicObject
>7570	ExpressionStatement	 
>7571	CallExpression	row -> getText ( \"ware_id\" , wareId )
>7572	ArgumentList	\"ware_id\"
>7573	Argument	wareId
>7574	Identifier	wareId
>7575	Argument	\"ware_id\"
>7576	PrimaryExpression	\"ware_id\"
>7577	Callee	row -> getText
>7578	PtrMemberAccess	row -> getText
>7579	Identifier	getText
>7580	Identifier	row
>7581	IdentifierDeclStatement	 
>7582	IdentifierDecl	wareId
>7583	Identifier	wareId
>7584	IdentifierDeclType	string
>7585	CompoundStatement	 
>7586	IfStatement	if ( ( rval = mediaLibrary -> populateFile ( userId , fi , mlId , c ) ) )
>7587	ElseStatement	else
>7588	CompoundStatement	 
>7589	ExpressionStatement	 
>7590	CallExpression	Exception 
>7591	ArgumentList	e
>7592	Argument	e
>7593	Identifier	e
>7594	Callee	Exception 
>7595	Identifier	Exception 
>7596	ExpressionStatement	 
>7597	AssignmentExpr	e -> getDetails ( ) [ \"mediaLibraryId\" ] = mlId
>7598	Identifier	mlId
>7599	ArrayIndexing	e -> getDetails ( ) [ \"mediaLibraryId\" ]
>7600	PrimaryExpression	\"mediaLibraryId\"
>7601	CallExpression	e -> getDetails ( )
>7602	ArgumentList	 
>7603	Callee	e -> getDetails
>7604	PtrMemberAccess	e -> getDetails
>7605	Identifier	getDetails
>7606	Identifier	e
>7607	ExpressionStatement	 
>7608	Statement	 
>7609	Statement	 
>7610	Statement	 
>7611	Statement	 
>7612	Statement	 
>7613	Statement	 
>7614	Statement	 
>7615	Statement	 
>7616	Statement	 
>7617	Statement	 
>7618	Statement	 
>7619	CompoundStatement	 
>7620	ExpressionStatement	 
>7621	CallExpression	wares [ \"updates\" ] -> append ( sl )
>7622	ArgumentList	sl
>7623	Argument	sl
>7624	Identifier	sl
>7625	Callee	wares [ \"updates\" ] -> append
>7626	PtrMemberAccess	wares [ \"updates\" ] -> append
>7627	Identifier	append
>7628	ArrayIndexing	wares [ \"updates\" ]
>7629	PrimaryExpression	\"updates\"
>7630	Identifier	wares
>7631	ExpressionStatement	 
>7632	CallExpression	BM_ID_SET ( sl [ \"payeeSchemeId\" ] , psId )
>7633	ArgumentList	sl [ \"payeeSchemeId\" ]
>7634	Argument	psId
>7635	Identifier	psId
>7636	Argument	sl [ \"payeeSchemeId\" ]
>7637	ArrayIndexing	sl [ \"payeeSchemeId\" ]
>7638	PrimaryExpression	\"payeeSchemeId\"
>7639	Identifier	sl
>7640	Callee	BM_ID_SET
>7641	Identifier	BM_ID_SET
>7642	ExpressionStatement	 
>7643	AssignmentExpr	sl [ \"fileInfo\" ] = fi
>7644	Identifier	fi
>7645	ArrayIndexing	sl [ \"fileInfo\" ]
>7646	PrimaryExpression	\"fileInfo\"
>7647	Identifier	sl
>7648	IdentifierDeclStatement	 
>7649	IdentifierDecl	sl
>7650	Identifier	sl
>7651	IdentifierDeclType	SellerListing
>7652	ExpressionStatement	 
>7653	CallExpression	fi -> removeMember ( \"path\" )
>7654	ArgumentList	\"path\"
>7655	Argument	\"path\"
>7656	PrimaryExpression	\"path\"
>7657	Callee	fi -> removeMember
>7658	PtrMemberAccess	fi -> removeMember
>7659	Identifier	removeMember
>7660	Identifier	fi
>7661	Condition	 
>7662	AssignmentExpr	rval = mediaLibrary -> populateFile ( userId , fi , mlId , c )
>7663	CallExpression	mediaLibrary -> populateFile ( userId , fi , mlId , c )
>7664	ArgumentList	userId
>7665	Argument	c
>7666	Identifier	c
>7667	Argument	mlId
>7668	Identifier	mlId
>7669	Argument	fi
>7670	Identifier	fi
>7671	Argument	userId
>7672	Identifier	userId
>7673	Callee	mediaLibrary -> populateFile
>7674	PtrMemberAccess	mediaLibrary -> populateFile
>7675	Identifier	populateFile
>7676	Identifier	mediaLibrary
>7677	Identifier	rval
>7678	IdentifierDeclStatement	 
>7679	IdentifierDecl	fi
>7680	Identifier	fi
>7681	IdentifierDeclType	FileInfo
>7682	ExpressionStatement	 
>7683	CallExpression	row -> getUInt32 ( \"payee_scheme_id\" , psId )
>7684	ArgumentList	\"payee_scheme_id\"
>7685	Argument	psId
>7686	Identifier	psId
>7687	Argument	\"payee_scheme_id\"
>7688	PrimaryExpression	\"payee_scheme_id\"
>7689	Callee	row -> getUInt32
>7690	PtrMemberAccess	row -> getUInt32
>7691	Identifier	getUInt32
>7692	Identifier	row
>7693	ExpressionStatement	 
>7694	CallExpression	row -> getUInt32 ( \"media_library_id\" , mlId )
>7695	ArgumentList	\"media_library_id\"
>7696	Argument	mlId
>7697	Identifier	mlId
>7698	Argument	\"media_library_id\"
>7699	PrimaryExpression	\"media_library_id\"
>7700	Callee	row -> getUInt32
>7701	PtrMemberAccess	row -> getUInt32
>7702	Identifier	getUInt32
>7703	Identifier	row
>7704	Condition	 
>7705	EqualityExpression	deleted == 0
>7706	PrimaryExpression	0
>7707	Identifier	deleted
>7708	ExpressionStatement	 
>7709	CallExpression	row -> getUInt32 ( \"deleted\" , deleted )
>7710	ArgumentList	\"deleted\"
>7711	Argument	deleted
>7712	Identifier	deleted
>7713	Argument	\"deleted\"
>7714	PrimaryExpression	\"deleted\"
>7715	Callee	row -> getUInt32
>7716	PtrMemberAccess	row -> getUInt32
>7717	Identifier	getUInt32
>7718	Identifier	row
>7719	Condition	 
>7720	AndExpression	rval && ( row = s -> fetch ( ) ) != NULL
>7721	EqualityExpression	( row = s -> fetch ( ) ) != NULL
>7722	Identifier	NULL
>7723	AssignmentExpr	row = s -> fetch ( )
>7724	CallExpression	s -> fetch ( )
>7725	ArgumentList	 
>7726	Callee	s -> fetch
>7727	PtrMemberAccess	s -> fetch
>7728	Identifier	fetch
>7729	Identifier	s
>7730	Identifier	row
>7731	Identifier	rval
>7732	IdentifierDeclStatement	 
>7733	IdentifierDecl	* row = NULL
>7734	AssignmentExpr	* row = NULL
>7735	Identifier	NULL
>7736	Identifier	NULL
>7737	Identifier	row
>7738	IdentifierDeclType	Row *
>7739	IdentifierDeclStatement	 
>7740	IdentifierDecl	deleted = 0
>7741	AssignmentExpr	deleted = 0
>7742	PrimaryExpression	0
>7743	Identifier	deleted
>7744	Identifier	deleted
>7745	IdentifierDeclType	uint32_t
>7746	IdentifierDeclStatement	 
>7747	IdentifierDecl	psId
>7748	Identifier	psId
>7749	IdentifierDeclType	PayeeSchemeId
>7750	IdentifierDeclStatement	 
>7751	IdentifierDecl	mlId
>7752	Identifier	mlId
>7753	IdentifierDeclType	MediaLibraryId
>7754	Condition	 
>7755	Identifier	rval
>7756	ExpressionStatement	 
>7757	AssignmentExpr	rval = ( s != NULL ) && s -> execute ( )
>7758	AndExpression	( s != NULL ) && s -> execute ( )
>7759	CallExpression	s -> execute ( )
>7760	ArgumentList	 
>7761	Callee	s -> execute
>7762	PtrMemberAccess	s -> execute
>7763	Identifier	execute
>7764	Identifier	s
>7765	EqualityExpression	s != NULL
>7766	Identifier	NULL
>7767	Identifier	s
>7768	Identifier	rval
>7769	ExpressionStatement	 
>7770	Statement	 
>7771	Statement	 
>7772	Statement	 
>7773	Statement	 
>7774	Statement	 
>7775	Statement	 
>7776	Statement	 
>7777	Statement	 
>7778	Statement	 
>7779	Statement	 
>7780	Statement	 
>7781	Statement	 
>7782	IdentifierDeclStatement	 
>7783	IdentifierDecl	rval = false
>7784	AssignmentExpr	rval = false
>7785	Identifier	false
>7786	Identifier	false
>7787	Identifier	rval
>7788	IdentifierDeclType	bool
>7830	FunctionDef	CatalogDatabase 
>7831	ParameterList	UserId userId , ServerId serverId , IMediaLibrary * mediaLibrary , DynamicObject & wares , DynamicObject & payeeSchemes , \
>7832	Parameter	 
>7833	Identifier	c
>7834	ParameterType	Connection *
>7835	Parameter	 
>7836	Identifier	payeeSchemes
>7837	ParameterType	DynamicObject &
>7838	Parameter	 
>7839	Identifier	wares
>7840	ParameterType	DynamicObject &
>7841	Parameter	 
>7842	Identifier	mediaLibrary
>7843	ParameterType	IMediaLibrary *
>7844	Parameter	 
>7845	Identifier	serverId
>7846	ParameterType	ServerId
>7847	Parameter	 
>7848	Identifier	userId
>7849	ParameterType	UserId
>7850	ReturnType	bool
>7851	CompoundStatement	 
>7852	ReturnStatement	 
>7853	Identifier	rval
>7854	ExpressionStatement	 
>7855	AssignmentExpr	rval = populateUpdatingPayeeSchemes ( userId , serverId , payeeSchemes , c ) && populateUpdatingWares ( \
>7856	AndExpression	populateUpdatingPayeeSchemes ( userId , serverId , payeeSchemes , c ) && populateUpdatingWares ( userId , \
>7857	CallExpression	populateUpdatingWares ( userId , mediaLibrary , wares , c )
>7858	ArgumentList	userId
>7859	Argument	c
>7860	Identifier	c
>7861	Argument	wares
>7862	Identifier	wares
>7863	Argument	mediaLibrary
>7864	Identifier	mediaLibrary
>7865	Argument	userId
>7866	Identifier	userId
>7867	Callee	populateUpdatingWares
>7868	Identifier	populateUpdatingWares
>7869	CallExpression	populateUpdatingPayeeSchemes ( userId , serverId , payeeSchemes , c )
>7870	ArgumentList	userId
>7871	Argument	c
>7872	Identifier	c
>7873	Argument	payeeSchemes
>7874	Identifier	payeeSchemes
>7875	Argument	serverId
>7876	Identifier	serverId
>7877	Argument	userId
>7878	Identifier	userId
>7879	Callee	populateUpdatingPayeeSchemes
>7880	Identifier	populateUpdatingPayeeSchemes
>7881	Identifier	rval
>7882	ExpressionStatement	 
>7883	CallExpression	payeeSchemes [ \"removals\" ] -> setType ( Array )
>7884	ArgumentList	Array
>7885	Argument	Array
>7886	Identifier	Array
>7887	Callee	payeeSchemes [ \"removals\" ] -> setType
>7888	PtrMemberAccess	payeeSchemes [ \"removals\" ] -> setType
>7889	Identifier	setType
>7890	ArrayIndexing	payeeSchemes [ \"removals\" ]
>7891	PrimaryExpression	\"removals\"
>7892	Identifier	payeeSchemes
>7893	ExpressionStatement	 
>7894	CallExpression	payeeSchemes [ \"updates\" ] -> setType ( Array )
>7895	ArgumentList	Array
>7896	Argument	Array
>7897	Identifier	Array
>7898	Callee	payeeSchemes [ \"updates\" ] -> setType
>7899	PtrMemberAccess	payeeSchemes [ \"updates\" ] -> setType
>7900	Identifier	setType
>7901	ArrayIndexing	payeeSchemes [ \"updates\" ]
>7902	PrimaryExpression	\"updates\"
>7903	Identifier	payeeSchemes
>7904	ExpressionStatement	 
>7905	CallExpression	wares [ \"removals\" ] -> setType ( Array )
>7906	ArgumentList	Array
>7907	Argument	Array
>7908	Identifier	Array
>7909	Callee	wares [ \"removals\" ] -> setType
>7910	PtrMemberAccess	wares [ \"removals\" ] -> setType
>7911	Identifier	setType
>7912	ArrayIndexing	wares [ \"removals\" ]
>7913	PrimaryExpression	\"removals\"
>7914	Identifier	wares
>7915	ExpressionStatement	 
>7916	CallExpression	wares [ \"updates\" ] -> setType ( Array )
>7917	ArgumentList	Array
>7918	Argument	Array
>7919	Identifier	Array
>7920	Callee	wares [ \"updates\" ] -> setType
>7921	PtrMemberAccess	wares [ \"updates\" ] -> setType
>7922	Identifier	setType
>7923	ArrayIndexing	wares [ \"updates\" ]
>7924	PrimaryExpression	\"updates\"
>7925	Identifier	wares
>7926	IdentifierDeclStatement	 
>7927	IdentifierDecl	rval = false
>7928	AssignmentExpr	rval = false
>7929	Identifier	false
>7930	Identifier	false
>7931	Identifier	rval
>7932	IdentifierDeclType	bool
>7949	FunctionDef	CatalogDatabase 
>7950	ParameterList	Connection * c
>7951	Parameter	 
>7952	Identifier	c
>7953	ParameterType	Connection *
>7954	ReturnType	bool
>7955	CompoundStatement	 
>7956	ReturnStatement	 
>7957	Identifier	rval
>7958	IfStatement	if ( rval && ! usePending )
>7959	CompoundStatement	 
>7960	IfStatement	if ( rval )
>7961	CompoundStatement	 
>7962	IfStatement	if ( rval && rows > 0 )
>7963	CompoundStatement	 
>7964	ExpressionStatement	 
>7965	AssignmentExpr	rval = ws2 -> setUInt64 ( 1 , rows ) && ws2 -> execute ( ) && ws3 -> execute ( )
>7966	AndExpression	ws2 -> setUInt64 ( 1 , rows ) && ws2 -> execute ( ) && ws3 -> execute ( )
>7967	AndExpression	ws2 -> execute ( ) && ws3 -> execute ( )
>7968	CallExpression	ws3 -> execute ( )
>7969	ArgumentList	 
>7970	Callee	ws3 -> execute
>7971	PtrMemberAccess	ws3 -> execute
>7972	Identifier	execute
>7973	Identifier	ws3
>7974	CallExpression	ws2 -> execute ( )
>7975	ArgumentList	 
>7976	Callee	ws2 -> execute
>7977	PtrMemberAccess	ws2 -> execute
>7978	Identifier	execute
>7979	Identifier	ws2
>7980	CallExpression	ws2 -> setUInt64 ( 1 , rows )
>7981	ArgumentList	1
>7982	Argument	rows
>7983	Identifier	rows
>7984	Argument	1
>7985	PrimaryExpression	1
>7986	Callee	ws2 -> setUInt64
>7987	PtrMemberAccess	ws2 -> setUInt64
>7988	Identifier	setUInt64
>7989	Identifier	ws2
>7990	Identifier	rval
>7991	Condition	 
>7992	AndExpression	rval && rows > 0
>7993	RelationalExpression	rows > 0
>7994	PrimaryExpression	0
>7995	Identifier	rows
>7996	Identifier	rval
>7997	ExpressionStatement	 
>7998	AssignmentExpr	rows = MAX_WARE_UPDATES_UINT64 - rows
>7999	AdditiveExpression	MAX_WARE_UPDATES_UINT64 - rows
>8000	Identifier	rows
>8001	Identifier	MAX_WARE_UPDATES_UINT64
>8002	Identifier	rows
>8003	ExpressionStatement	 
>8004	AssignmentExpr	rval = ws1 -> getRowsChanged ( rows )
>8005	CallExpression	ws1 -> getRowsChanged ( rows )
>8006	ArgumentList	rows
>8007	Argument	rows
>8008	Identifier	rows
>8009	Callee	ws1 -> getRowsChanged
>8010	PtrMemberAccess	ws1 -> getRowsChanged
>8011	Identifier	getRowsChanged
>8012	Identifier	ws1
>8013	Identifier	rval
>8014	IdentifierDeclStatement	 
>8015	IdentifierDecl	rows
>8016	Identifier	rows
>8017	IdentifierDeclType	uint64_t
>8018	Condition	 
>8019	Identifier	rval
>8020	ExpressionStatement	 
>8021	AssignmentExpr	rval = rval && ( ws1 != NULL ) && ( ws2 != NULL ) && ( ws3 != NULL ) && ws1 -> execute ( )
>8022	AndExpression	rval && ( ws1 != NULL ) && ( ws2 != NULL ) && ( ws3 != NULL ) && ws1 -> execute ( )
>8023	AndExpression	( ws1 != NULL ) && ( ws2 != NULL ) && ( ws3 != NULL ) && ws1 -> execute ( )
>8024	AndExpression	( ws2 != NULL ) && ( ws3 != NULL ) && ws1 -> execute ( )
>8025	AndExpression	( ws3 != NULL ) && ws1 -> execute ( )
>8026	CallExpression	ws1 -> execute ( )
>8027	ArgumentList	 
>8028	Callee	ws1 -> execute
>8029	PtrMemberAccess	ws1 -> execute
>8030	Identifier	execute
>8031	Identifier	ws1
>8032	EqualityExpression	ws3 != NULL
>8033	Identifier	NULL
>8034	Identifier	ws3
>8035	EqualityExpression	ws2 != NULL
>8036	Identifier	NULL
>8037	Identifier	ws2
>8038	EqualityExpression	ws1 != NULL
>8039	Identifier	NULL
>8040	Identifier	ws1
>8041	Identifier	rval
>8042	Identifier	rval
>8043	ExpressionStatement	 
>8044	AssignmentExpr	rval = ( ps != NULL ) && ps -> execute ( )
>8045	AndExpression	( ps != NULL ) && ps -> execute ( )
>8046	CallExpression	ps -> execute ( )
>8047	ArgumentList	 
>8048	Callee	ps -> execute
>8049	PtrMemberAccess	ps -> execute
>8050	Identifier	execute
>8051	Identifier	ps
>8052	EqualityExpression	ps != NULL
>8053	Identifier	NULL
>8054	Identifier	ps
>8055	Identifier	rval
>8056	ExpressionStatement	 
>8057	Statement	 
>8058	Statement	 
>8059	Statement	 
>8060	Statement	 
>8061	Statement	 
>8062	Statement	 
>8063	Statement	 
>8064	Statement	 
>8065	Statement	 
>8066	Statement	 
>8067	Statement	 
>8068	Statement	 
>8069	Statement	 
>8070	Statement	 
>8071	Statement	 
>8072	Statement	 
>8073	ExpressionStatement	 
>8074	Statement	 
>8075	Statement	 
>8076	Statement	 
>8077	Statement	 
>8078	Statement	 
>8079	Statement	 
>8080	Statement	 
>8081	Statement	 
>8082	Statement	 
>8083	Statement	 
>8084	Statement	 
>8085	Statement	 
>8086	Statement	 
>8087	Statement	 
>8088	Statement	 
>8089	Statement	 
>8090	ExpressionStatement	 
>8091	Statement	 
>8092	Statement	 
>8093	Statement	 
>8094	Statement	 
>8095	Statement	 
>8096	Statement	 
>8097	Statement	 
>8098	Statement	 
>8099	Statement	 
>8100	Statement	 
>8101	Statement	 
>8102	Statement	 
>8103	Statement	 
>8104	Statement	 
>8105	Statement	 
>8106	Statement	 
>8107	Statement	 
>8108	Statement	 
>8109	ExpressionStatement	 
>8110	Statement	 
>8111	Statement	 
>8112	Statement	 
>8113	Statement	 
>8114	Statement	 
>8115	Statement	 
>8116	Statement	 
>8117	Statement	 
>8118	Statement	 
>8119	Statement	 
>8120	Statement	 
>8121	Statement	 
>8122	Statement	 
>8123	Statement	 
>8124	Statement	 
>8125	Statement	 
>8126	Statement	 
>8127	Statement	 
>8128	Statement	 
>8129	Statement	 
>8130	Statement	 
>8131	Statement	 
>8132	Condition	 
>8133	AndExpression	rval && ! usePending
>8134	UnaryOp	! usePending
>8135	Identifier	usePending
>8136	UnaryOperator	!
>8137	Identifier	rval
>8138	CompoundStatement	 
>8139	IfStatement	if ( rval && ! usePending )
>8140	CompoundStatement	 
>8141	IfStatement	if ( rval )
>8142	CompoundStatement	 
>8143	IfStatement	if ( row != NULL )
>8144	CompoundStatement	 
>8145	ExpressionStatement	 
>8146	CallExpression	ps -> fetch ( )
>8147	ArgumentList	 
>8148	Callee	ps -> fetch
>8149	PtrMemberAccess	ps -> fetch
>8150	Identifier	fetch
>8151	Identifier	ps
>8152	ExpressionStatement	 
>8153	AssignmentExpr	usePending = true
>8154	Identifier	true
>8155	Identifier	usePending
>8156	Condition	 
>8157	EqualityExpression	row != NULL
>8158	Identifier	NULL
>8159	Identifier	row
>8160	IdentifierDeclStatement	 
>8161	IdentifierDecl	* row = ps -> fetch ( )
>8162	AssignmentExpr	* row = ps -> fetch ( )
>8163	CallExpression	ps -> fetch ( )
>8164	ArgumentList	 
>8165	Callee	ps -> fetch
>8166	PtrMemberAccess	ps -> fetch
>8167	Identifier	fetch
>8168	Identifier	ps
>8169	Identifier	row
>8170	Identifier	row
>8171	IdentifierDeclType	Row *
>8172	Condition	 
>8173	Identifier	rval
>8174	ExpressionStatement	 
>8175	AssignmentExpr	rval = ( ps != NULL ) && ps -> execute ( )
>8176	AndExpression	( ps != NULL ) && ps -> execute ( )
>8177	CallExpression	ps -> execute ( )
>8178	ArgumentList	 
>8179	Callee	ps -> execute
>8180	PtrMemberAccess	ps -> execute
>8181	Identifier	execute
>8182	Identifier	ps
>8183	EqualityExpression	ps != NULL
>8184	Identifier	NULL
>8185	Identifier	ps
>8186	Identifier	rval
>8187	ExpressionStatement	 
>8188	Statement	 
>8189	Statement	 
>8190	Statement	 
>8191	Statement	 
>8192	Statement	 
>8193	Statement	 
>8194	Statement	 
>8195	Statement	 
>8196	Statement	 
>8197	Statement	 
>8198	Statement	 
>8199	Statement	 
>8200	Condition	 
>8201	AndExpression	rval && ! usePending
>8202	UnaryOp	! usePending
>8203	Identifier	usePending
>8204	UnaryOperator	!
>8205	Identifier	rval
>8206	IfStatement	if ( rval )
>8207	CompoundStatement	 
>8208	IfStatement	if ( row != NULL )
>8209	CompoundStatement	 
>8210	ExpressionStatement	 
>8211	CallExpression	ws -> fetch ( )
>8212	ArgumentList	 
>8213	Callee	ws -> fetch
>8214	PtrMemberAccess	ws -> fetch
>8215	Identifier	fetch
>8216	Identifier	ws
>8217	ExpressionStatement	 
>8218	AssignmentExpr	usePending = true
>8219	Identifier	true
>8220	Identifier	usePending
>8221	Condition	 
>8222	EqualityExpression	row != NULL
>8223	Identifier	NULL
>8224	Identifier	row
>8225	IdentifierDeclStatement	 
>8226	IdentifierDecl	* row = ws -> fetch ( )
>8227	AssignmentExpr	* row = ws -> fetch ( )
>8228	CallExpression	ws -> fetch ( )
>8229	ArgumentList	 
>8230	Callee	ws -> fetch
>8231	PtrMemberAccess	ws -> fetch
>8232	Identifier	fetch
>8233	Identifier	ws
>8234	Identifier	row
>8235	Identifier	row
>8236	IdentifierDeclType	Row *
>8237	Condition	 
>8238	Identifier	rval
>8239	ExpressionStatement	 
>8240	AssignmentExpr	rval = ( ws != NULL ) && ws -> execute ( )
>8241	AndExpression	( ws != NULL ) && ws -> execute ( )
>8242	CallExpression	ws -> execute ( )
>8243	ArgumentList	 
>8244	Callee	ws -> execute
>8245	PtrMemberAccess	ws -> execute
>8246	Identifier	execute
>8247	Identifier	ws
>8248	EqualityExpression	ws != NULL
>8249	Identifier	NULL
>8250	Identifier	ws
>8251	Identifier	rval
>8252	ExpressionStatement	 
>8253	Statement	 
>8254	Statement	 
>8255	Statement	 
>8256	Statement	 
>8257	Statement	 
>8258	Statement	 
>8259	Statement	 
>8260	Statement	 
>8261	Statement	 
>8262	Statement	 
>8263	Statement	 
>8264	Statement	 
>8265	IdentifierDeclStatement	 
>8266	IdentifierDecl	usePending = false
>8267	AssignmentExpr	usePending = false
>8268	Identifier	false
>8269	Identifier	false
>8270	Identifier	usePending
>8271	IdentifierDeclType	bool
>8272	IdentifierDeclStatement	 
>8273	IdentifierDecl	rval = false
>8274	AssignmentExpr	rval = false
>8275	Identifier	false
>8276	Identifier	false
>8277	Identifier	rval
>8278	IdentifierDeclType	bool
>8310	FunctionDef	CatalogDatabase 
>8311	ParameterList	const char * text , uint64_t & problemId , Connection * c
>8312	Parameter	 
>8313	Identifier	c
>8314	ParameterType	Connection *
>8315	Parameter	 
>8316	Identifier	problemId
>8317	ParameterType	uint64_t &
>8318	Parameter	 
>8319	Identifier	text
>8320	ParameterType	const char *
>8321	ReturnType	bool
>8322	CompoundStatement	 
>8323	ReturnStatement	 
>8324	Identifier	rval
>8325	IfStatement	if ( ! rval )
>8326	CompoundStatement	 
>8327	ExpressionStatement	 
>8328	CallExpression	Exception 
>8329	ArgumentList	e
>8330	Argument	e
>8331	Identifier	e
>8332	Callee	Exception 
>8333	Identifier	Exception 
>8334	IdentifierDeclStatement	 
>8335	IdentifierDecl	e = new Exception ( \"Could not get problem ID.\" , \"bitmunk.catalog.database.GetProblemIdFailed\" )
>8336	AssignmentExpr	e = new Exception ( \"Could not get problem ID.\" , \"bitmunk.catalog.database.GetProblemIdFailed\" )
>8337	Expression	\"Could not get problem ID.\" , \"bitmunk.catalog.database.GetProblemIdFailed\"
>8338	PrimaryExpression	\"bitmunk.catalog.database.GetProblemIdFailed\"
>8339	PrimaryExpression	\"Could not get problem ID.\"
>8340	Identifier	e
>8341	Identifier	e
>8342	IdentifierDeclType	ExceptionRef
>8343	Condition	 
>8344	UnaryOp	! rval
>8345	Identifier	rval
>8346	UnaryOperator	!
>8347	IfStatement	if ( rval )
>8348	CompoundStatement	 
>8349	IfStatement	if ( row != NULL )
>8350	ElseStatement	else
>8351	CompoundStatement	 
>8352	IfStatement	if ( rval )
>8353	CompoundStatement	 
>8354	ExpressionStatement	 
>8355	AssignmentExpr	problemId = s -> getLastInsertRowId ( )
>8356	CallExpression	s -> getLastInsertRowId ( )
>8357	ArgumentList	 
>8358	Callee	s -> getLastInsertRowId
>8359	PtrMemberAccess	s -> getLastInsertRowId
>8360	Identifier	getLastInsertRowId
>8361	Identifier	s
>8362	Identifier	problemId
>8363	Condition	 
>8364	Identifier	rval
>8365	ExpressionStatement	 
>8366	AssignmentExpr	rval = ( s != NULL ) && s -> setText ( \"
>8367	AndExpression	( s != NULL ) && s -> setText ( \"
>8368	AndExpression	s -> setText ( \"
>8369	CallExpression	s -> execute ( )
>8370	ArgumentList	 
>8371	Callee	s -> execute
>8372	PtrMemberAccess	s -> execute
>8373	Identifier	execute
>8374	Identifier	s
>8375	CallExpression	s -> setText ( \"
>8376	ArgumentList	\"
>8377	Argument	text
>8378	Identifier	text
>8379	Argument	\"
>8380	PrimaryExpression	\"
>8381	Callee	s -> setText
>8382	PtrMemberAccess	s -> setText
>8383	Identifier	setText
>8384	Identifier	s
>8385	EqualityExpression	s != NULL
>8386	Identifier	NULL
>8387	Identifier	s
>8388	Identifier	rval
>8389	ExpressionStatement	 
>8390	Statement	 
>8391	Statement	 
>8392	Statement	 
>8393	Statement	 
>8394	Statement	 
>8395	Statement	 
>8396	Statement	 
>8397	Statement	 
>8398	Statement	 
>8399	Statement	 
>8400	CompoundStatement	 
>8401	ExpressionStatement	 
>8402	CallExpression	s -> fetch ( )
>8403	ArgumentList	 
>8404	Callee	s -> fetch
>8405	PtrMemberAccess	s -> fetch
>8406	Identifier	fetch
>8407	Identifier	s
>8408	ExpressionStatement	 
>8409	CallExpression	row -> getUInt64 ( \"problem_id\" , problemId )
>8410	ArgumentList	\"problem_id\"
>8411	Argument	problemId
>8412	Identifier	problemId
>8413	Argument	\"problem_id\"
>8414	PrimaryExpression	\"problem_id\"
>8415	Callee	row -> getUInt64
>8416	PtrMemberAccess	row -> getUInt64
>8417	Identifier	getUInt64
>8418	Identifier	row
>8419	Condition	 
>8420	EqualityExpression	row != NULL
>8421	Identifier	NULL
>8422	Identifier	row
>8423	IdentifierDeclStatement	 
>8424	IdentifierDecl	* row = s -> fetch ( )
>8425	AssignmentExpr	* row = s -> fetch ( )
>8426	CallExpression	s -> fetch ( )
>8427	ArgumentList	 
>8428	Callee	s -> fetch
>8429	PtrMemberAccess	s -> fetch
>8430	Identifier	fetch
>8431	Identifier	s
>8432	Identifier	row
>8433	Identifier	row
>8434	IdentifierDeclType	Row *
>8435	Condition	 
>8436	Identifier	rval
>8437	ExpressionStatement	 
>8438	AssignmentExpr	rval = ( s != NULL ) && s -> setText ( \"
>8439	AndExpression	( s != NULL ) && s -> setText ( \"
>8440	AndExpression	s -> setText ( \"
>8441	CallExpression	s -> execute ( )
>8442	ArgumentList	 
>8443	Callee	s -> execute
>8444	PtrMemberAccess	s -> execute
>8445	Identifier	execute
>8446	Identifier	s
>8447	CallExpression	s -> setText ( \"
>8448	ArgumentList	\"
>8449	Argument	text
>8450	Identifier	text
>8451	Argument	\"
>8452	PrimaryExpression	\"
>8453	Callee	s -> setText
>8454	PtrMemberAccess	s -> setText
>8455	Identifier	setText
>8456	Identifier	s
>8457	EqualityExpression	s != NULL
>8458	Identifier	NULL
>8459	Identifier	s
>8460	Identifier	rval
>8461	ExpressionStatement	 
>8462	Statement	 
>8463	Statement	 
>8464	Statement	 
>8465	Statement	 
>8466	Statement	 
>8467	Statement	 
>8468	Statement	 
>8469	Statement	 
>8470	Statement	 
>8471	Statement	 
>8472	Statement	 
>8473	Statement	 
>8474	IdentifierDeclStatement	 
>8475	IdentifierDecl	rval = false
>8476	AssignmentExpr	rval = false
>8477	Identifier	false
>8478	Identifier	false
>8479	Identifier	rval
>8480	IdentifierDeclType	bool
>8498	FunctionDef	CatalogDatabase 
>8499	ParameterList	Connection * c
>8500	Parameter	 
>8501	Identifier	c
>8502	ParameterType	Connection *
>8503	ReturnType	bool
>8504	CompoundStatement	 
>8505	ReturnStatement	 
>8506	Identifier	rval
>8507	ExpressionStatement	 
>8508	AssignmentExpr	rval = ( s != NULL ) && s -> execute ( )
>8509	AndExpression	( s != NULL ) && s -> execute ( )
>8510	CallExpression	s -> execute ( )
>8511	ArgumentList	 
>8512	Callee	s -> execute
>8513	PtrMemberAccess	s -> execute
>8514	Identifier	execute
>8515	Identifier	s
>8516	EqualityExpression	s != NULL
>8517	Identifier	NULL
>8518	Identifier	s
>8519	Identifier	rval
>8520	ExpressionStatement	 
>8521	Statement	 
>8522	Statement	 
>8523	Statement	 
>8524	Statement	 
>8525	Statement	 
>8526	Statement	 
>8527	Statement	 
>8528	Statement	 
>8529	Statement	 
>8530	Statement	 
>8531	Statement	 
>8532	Statement	 
>8533	Statement	 
>8534	Statement	 
>8535	Statement	 
>8536	Statement	 
>8537	Statement	 
>8538	Statement	 
>8539	Statement	 
>8540	Statement	 
>8541	Statement	 
>8542	Statement	 
>8543	Statement	 
>8544	Statement	 
>8545	Statement	 
>8546	Statement	 
>8547	Statement	 
>8548	IdentifierDeclStatement	 
>8549	IdentifierDecl	rval = false
>8550	AssignmentExpr	rval = false
>8551	Identifier	false
>8552	Identifier	false
>8553	Identifier	rval
>8554	IdentifierDeclType	bool
<3=5,4
<9=11,10
<15=21,20,16
<16=17
<17=19,18
<21=503,471,325,293,257,215,174,134,97,60,24,22
<22=23
<24=58,25
<25=57,56,55,54,53,52,51,50,49,48,47,46,45,44,43,42,41,40,39,26
<26=27
<27=38,28
<28=35,29
<29=31,30
<31=32
<32=34,33
<35=37,36
<58=59
<60=95,61
<61=94,93,92,91,90,89,88,87,86,85,84,83,82,81,80,79,78,77,76,75,62
<62=63
<63=74,64
<64=71,65
<65=67,66
<67=68
<68=70,69
<71=73,72
<95=96
<97=132,98
<98=131,130,129,128,127,126,125,124,123,122,121,120,119,118,117,116,115,114,113,112,99
<99=100
<100=111,101
<101=108,102
<102=104,103
<104=105
<105=107,106
<108=110,109
<132=133
<134=172,135
<135=171,170,169,168,167,166,165,164,163,162,161,160,159,158,157,156,155,154,153,152,151,150,149,136
<136=137
<137=148,138
<138=145,139
<139=141,140
<141=142
<142=144,143
<145=147,146
<172=173
<174=213,175
<175=212,211,210,209,208,207,206,205,204,203,202,201,200,199,198,197,196,195,194,193,192,191,190,189,176
<176=177
<177=188,178
<178=185,179
<179=181,180
<181=182
<182=184,183
<185=187,186
<213=214
<215=255,216
<216=254,253,252,251,250,249,248,247,246,245,244,243,242,241,240,239,238,237,236,235,234,233,232,231,230,217
<217=218
<218=229,219
<219=226,220
<220=222,221
<222=223
<223=225,224
<226=228,227
<255=256
<257=291,258
<258=290,289,288,287,286,285,284,283,282,281,280,279,278,277,276,275,274,273,272,259
<259=260
<260=271,261
<261=268,262
<262=264,263
<264=265
<265=267,266
<268=270,269
<291=292
<293=323,294
<294=322,321,320,319,318,317,316,315,314,313,312,311,310,309,308,295
<295=296
<296=307,297
<297=304,298
<298=300,299
<300=301
<301=303,302
<304=306,305
<323=324
<325=469,326
<326=468,467,466,465,464,463,462,461,460,459,458,457,456,455,449,327
<327=447,328
<328=329
<329=330
<330=446,331
<331=436,332
<332=426,333
<333=420,334
<334=410,335
<335=400,336
<336=394,337
<337=384,338
<338=374,339
<339=368,340
<340=358,341
<341=348,342
<342=344,343
<344=345
<345=347,346
<348=354,349
<349=352,350
<350=351
<352=353
<354=355
<355=357,356
<358=364,359
<359=362,360
<360=361
<362=363
<364=365
<365=367,366
<368=370,369
<370=371
<371=373,372
<374=380,375
<375=378,376
<376=377
<378=379
<380=381
<381=383,382
<384=390,385
<385=388,386
<386=387
<388=389
<390=391
<391=393,392
<394=396,395
<396=397
<397=399,398
<400=406,401
<401=404,402
<402=403
<404=405
<406=407
<407=409,408
<410=416,411
<411=414,412
<412=413
<414=415
<416=417
<417=419,418
<420=422,421
<422=423
<423=425,424
<426=432,427
<427=430,428
<428=429
<430=431
<432=433
<433=435,434
<436=442,437
<437=440,438
<438=439
<440=441
<442=443
<443=445,444
<447=448
<449=450
<450=454,451
<451=453,452
<469=470
<471=501,472
<472=500,499,498,497,496,495,494,493,492,491,490,489,488,487,486,473
<473=474
<474=485,475
<475=482,476
<476=478,477
<478=479
<479=481,480
<482=484,483
<501=502
<503=504
<504=509,508,505
<505=507,506
<521=536,535,522
<522=532,529,526,523
<523=525,524
<526=528,527
<529=531,530
<532=534,533
<536=608,607,606,605,604,603,602,601,600,599,598,597,596,595,594,593,592,591,590,589,588,587,586,585,584,583,582,581,539,537
<537=538
<539=540
<540=580,541
<541=577,542
<542=567,543
<543=557,544
<544=551,545
<545=547,546
<547=548
<548=550,549
<551=553,552
<553=554
<554=556,555
<557=563,558
<558=561,559
<559=560
<561=562
<563=564
<564=566,565
<567=573,568
<568=571,569
<569=570
<571=572
<573=574
<574=576,575
<577=579,578
<608=609
<609=611,610
<626=638,637,627
<627=634,631,628
<628=630,629
<631=633,632
<634=636,635
<638=724,723,722,721,720,719,718,717,716,715,714,713,712,711,687,641,639
<639=640
<641=685,642
<642=673,643
<643=669,664,644
<644=645
<645=653,646
<646=647
<647=649,648
<649=650
<650=652,651
<653=654
<654=660,655
<655=658,656
<656=657
<658=659
<660=661
<661=663,662
<664=665
<665=666
<666=668,667
<669=670
<670=672,671
<673=674
<674=684,683,675
<675=682,676
<676=678,677
<678=679
<679=681,680
<685=686
<687=688
<688=710,689
<689=707,690
<690=697,691
<691=693,692
<693=694
<694=696,695
<697=703,698
<698=701,699
<699=700
<701=702
<703=704
<704=706,705
<707=709,708
<724=725
<725=727,726
<743=755,754,744
<744=751,748,745
<745=747,746
<748=750,749
<751=753,752
<755=841,840,839,838,837,836,835,834,833,832,831,830,829,828,804,758,756
<756=757
<758=802,759
<759=790,760
<760=786,781,761
<761=762
<762=770,763
<763=764
<764=766,765
<766=767
<767=769,768
<770=771
<771=777,772
<772=775,773
<773=774
<775=776
<777=778
<778=780,779
<781=782
<782=783
<783=785,784
<786=787
<787=789,788
<790=791
<791=801,800,792
<792=799,793
<793=795,794
<795=796
<796=798,797
<802=803
<804=805
<805=827,806
<806=824,807
<807=814,808
<808=810,809
<810=811
<811=813,812
<814=820,815
<815=818,816
<816=817
<818=819
<820=821
<821=823,822
<824=826,825
<841=842
<842=844,843
<860=875,874,861
<861=871,868,865,862
<862=864,863
<865=867,866
<868=870,869
<871=873,872
<875=957,950,941,932,913,878,876
<876=877
<878=879
<879=912,880
<880=909,881
<881=899,882
<882=889,883
<883=885,884
<885=886
<886=888,887
<889=895,890
<890=893,891
<891=892
<893=894
<895=896
<896=898,897
<899=905,900
<900=903,901
<901=902
<903=904
<905=906
<906=908,907
<909=911,910
<913=914
<914=931,930,915
<915=929,916
<916=925,917
<917=918
<918=919
<919=921,920
<921=922
<922=924,923
<925=926
<926=928,927
<932=933
<933=937,934
<934=935
<935=936
<937=938
<938=940,939
<941=942
<942=946,943
<943=944
<944=945
<946=947
<947=949,948
<950=951
<951=956,955,952
<952=954,953
<957=958
<958=963,962,959
<959=961,960
<982=991,990,983
<983=987,984
<984=986,985
<987=989,988
<991=1051,1044,1035,1026,1007,994,992
<992=993
<994=995
<995=1006,996
<996=1003,997
<997=999,998
<999=1000
<1000=1002,1001
<1003=1005,1004
<1007=1008
<1008=1025,1024,1009
<1009=1023,1010
<1010=1019,1011
<1011=1012
<1012=1013
<1013=1015,1014
<1015=1016
<1016=1018,1017
<1019=1020
<1020=1022,1021
<1026=1027
<1027=1031,1028
<1028=1029
<1029=1030
<1031=1032
<1032=1034,1033
<1035=1036
<1036=1040,1037
<1037=1038
<1038=1039
<1040=1041
<1041=1043,1042
<1044=1045
<1045=1050,1049,1046
<1046=1048,1047
<1051=1052
<1052=1057,1056,1053
<1053=1055,1054
<1073=1082,1081,1074
<1074=1078,1075
<1075=1077,1076
<1078=1080,1079
<1082=1142,1135,1126,1117,1098,1085,1083
<1083=1084
<1085=1086
<1086=1097,1087
<1087=1094,1088
<1088=1090,1089
<1090=1091
<1091=1093,1092
<1094=1096,1095
<1098=1099
<1099=1116,1115,1100
<1100=1114,1101
<1101=1110,1102
<1102=1103
<1103=1104
<1104=1106,1105
<1106=1107
<1107=1109,1108
<1110=1111
<1111=1113,1112
<1117=1118
<1118=1122,1119
<1119=1120
<1120=1121
<1122=1123
<1123=1125,1124
<1126=1127
<1127=1131,1128
<1128=1129
<1129=1130
<1131=1132
<1132=1134,1133
<1135=1136
<1136=1141,1140,1137
<1137=1139,1138
<1142=1143
<1143=1148,1147,1144
<1144=1146,1145
<1164=1179,1178,1165
<1165=1175,1172,1169,1166
<1166=1168,1167
<1169=1171,1170
<1172=1174,1173
<1175=1177,1176
<1179=1252,1248,1244,1209,1182,1180
<1180=1181
<1182=1207,1183
<1183=1201,1195,1184
<1184=1185
<1185=1192,1186
<1186=1188,1187
<1188=1189
<1189=1191,1190
<1192=1194,1193
<1195=1196
<1196=1198,1197
<1198=1200,1199
<1201=1202
<1202=1204,1203
<1204=1206,1205
<1207=1208
<1209=1210
<1210=1243,1211
<1211=1233,1212
<1212=1223,1213
<1213=1221,1214
<1214=1219,1217,1215
<1215=1216
<1217=1218
<1219=1220
<1221=1222
<1223=1231,1224
<1224=1229,1227,1225
<1225=1226
<1227=1228
<1229=1230
<1231=1232
<1233=1241,1234
<1234=1239,1237,1235
<1235=1236
<1237=1238
<1239=1240
<1241=1242
<1244=1245
<1245=1247,1246
<1248=1249
<1249=1251,1250
<1252=1253
<1253=1258,1257,1254
<1254=1256,1255
<1273=1282,1281,1274
<1274=1278,1275
<1275=1277,1276
<1278=1280,1279
<1282=1384,1383,1382,1381,1380,1379,1378,1377,1376,1375,1374,1373,1372,1371,1347,1285,1283
<1283=1284
<1285=1345,1286
<1286=1333,1287
<1287=1329,1297,1288
<1288=1289
<1289=1290
<1290=1291
<1291=1293,1292
<1293=1294
<1294=1296,1295
<1297=1325,1316,1305,1298
<1298=1299
<1299=1303,1300
<1300=1301
<1301=1302
<1303=1304
<1305=1306
<1306=1308,1307
<1308=1310,1309
<1310=1312,1311
<1312=1313
<1313=1315,1314
<1316=1317
<1317=1324,1323,1318
<1318=1322,1319
<1319=1321,1320
<1325=1326
<1326=1328,1327
<1329=1330
<1330=1332,1331
<1333=1334
<1334=1344,1343,1335
<1335=1342,1336
<1336=1338,1337
<1338=1339
<1339=1341,1340
<1345=1346
<1347=1348
<1348=1370,1349
<1349=1367,1350
<1350=1357,1351
<1351=1353,1352
<1353=1354
<1354=1356,1355
<1357=1363,1358
<1358=1361,1359
<1359=1360
<1361=1362
<1363=1364
<1364=1366,1365
<1367=1369,1368
<1384=1385
<1385=1390,1389,1386
<1386=1388,1387
<1410=1422,1421,1411
<1411=1418,1415,1412
<1412=1414,1413
<1415=1417,1416
<1418=1420,1419
<1422=1721,1714,1677,1670,1669,1668,1667,1666,1665,1664,1663,1662,1661,1660,1659,1658,1650,1643,1636,1474,1425,1423
<1423=1424
<1425=1472,1467,1426
<1426=1427
<1427=1463,1446,1428
<1428=1429
<1429=1437,1430
<1430=1431
<1431=1435,1432
<1432=1433
<1433=1434
<1435=1436
<1437=1438
<1438=1445,1444,1439
<1439=1443,1440
<1440=1442,1441
<1446=1454,1447
<1447=1448
<1448=1452,1449
<1449=1450
<1450=1451
<1452=1453
<1454=1455
<1455=1462,1461,1456
<1456=1460,1457
<1457=1459,1458
<1463=1464
<1464=1466,1465
<1467=1468
<1468=1469
<1469=1471,1470
<1472=1473
<1474=1624,1475
<1475=1569,1527,1476
<1476=1523,1477
<1477=1513,1478
<1478=1504,1479
<1479=1500,1496,1480
<1480=1481
<1481=1495,1482
<1482=1489,1483
<1483=1485,1484
<1485=1486
<1486=1488,1487
<1489=1491,1490
<1491=1492
<1492=1494,1493
<1496=1497
<1497=1499,1498
<1500=1501
<1501=1503,1502
<1504=1505
<1505=1507,1506
<1507=1509,1508
<1509=1510
<1510=1512,1511
<1513=1514
<1514=1522,1521,1515
<1515=1520,1516
<1516=1518,1517
<1518=1519
<1523=1524
<1524=1526,1525
<1527=1528
<1528=1568,1529
<1529=1565,1530
<1530=1555,1531
<1531=1545,1532
<1532=1539,1533
<1533=1535,1534
<1535=1536
<1536=1538,1537
<1539=1541,1540
<1541=1542
<1542=1544,1543
<1545=1551,1546
<1546=1549,1547
<1547=1548
<1549=1550
<1551=1552
<1552=1554,1553
<1555=1561,1556
<1556=1559,1557
<1557=1558
<1559=1560
<1561=1562
<1562=1564,1563
<1565=1567,1566
<1569=1620,1576,1570
<1570=1571
<1571=1572
<1572=1573
<1573=1575,1574
<1576=1611,1577
<1577=1609,1578
<1578=1597,1586,1579
<1579=1580
<1580=1582,1581
<1582=1583
<1583=1585,1584
<1586=1587
<1587=1593,1588
<1588=1591,1589
<1589=1590
<1591=1592
<1593=1594
<1594=1596,1595
<1597=1598
<1598=1608,1607,1599
<1599=1606,1600
<1600=1602,1601
<1602=1603
<1603=1605,1604
<1609=1610
<1611=1612
<1612=1619,1613
<1613=1615,1614
<1615=1616
<1616=1618,1617
<1620=1621
<1621=1623,1622
<1624=1625
<1625=1635,1626
<1626=1632,1627
<1627=1631,1628
<1628=1630,1629
<1632=1634,1633
<1636=1637
<1637=1642,1641,1638
<1638=1640,1639
<1643=1644
<1644=1649,1648,1645
<1645=1647,1646
<1650=1651
<1651=1657,1652
<1652=1656,1653
<1653=1655,1654
<1670=1671
<1671=1676,1675,1672
<1672=1674,1673
<1677=1710,1678
<1678=1709,1708,1707,1706,1705,1704,1703,1702,1701,1700,1699,1698,1697,1696,1695,1694,1693,1692,1691,1690,1689,1688,1687,1686,1685,1679
<1679=1680
<1680=1684,1681
<1681=1683,1682
<1710=1711
<1711=1713,1712
<1714=1715
<1715=1720,1719,1716
<1716=1718,1717
<1721=1722
<1722=1727,1726,1723
<1723=1725,1724
<1757=1778,1777,1758
<1758=1774,1771,1768,1765,1762,1759
<1759=1761,1760
<1762=1764,1763
<1765=1767,1766
<1768=1770,1769
<1771=1773,1772
<1774=1776,1775
<1778=2061,2048,1781,1779
<1779=1780
<1781=2046,1782
<1782=2045,2044,2043,2042,2041,2040,2039,2038,2037,2036,2035,2034,2033,2032,2031,2030,1783
<1783=2024,1784
<1784=2017,2005,1785
<1785=1996,1786
<1786=1984,1836,1787
<1787=1832,1788
<1788=1823,1812,1796,1789
<1789=1790
<1790=1794,1791
<1791=1792
<1792=1793
<1794=1795
<1796=1797
<1797=1810,1798
<1798=1801,1799
<1799=1800
<1801=1802
<1802=1804,1803
<1804=1806,1805
<1806=1807
<1807=1809,1808
<1810=1811
<1812=1813
<1813=1815,1814
<1815=1817,1816
<1817=1819,1818
<1819=1820
<1820=1822,1821
<1823=1824
<1824=1831,1830,1825
<1825=1829,1826
<1826=1828,1827
<1832=1833
<1833=1835,1834
<1836=1837
<1837=1983,1838
<1838=1973,1839
<1839=1961,1840
<1840=1944,1841
<1841=1927,1842
<1842=1910,1843
<1843=1893,1844
<1844=1876,1845
<1845=1859,1846
<1846=1853,1847
<1847=1849,1848
<1849=1850
<1850=1852,1851
<1853=1855,1854
<1855=1856
<1856=1858,1857
<1859=1872,1860
<1860=1870,1861
<1861=1862
<1862=1864,1863
<1864=1865
<1865=1867,1866
<1867=1869,1868
<1870=1871
<1872=1873
<1873=1875,1874
<1876=1889,1877
<1877=1887,1878
<1878=1879
<1879=1881,1880
<1881=1882
<1882=1884,1883
<1884=1886,1885
<1887=1888
<1889=1890
<1890=1892,1891
<1893=1906,1894
<1894=1904,1895
<1895=1896
<1896=1898,1897
<1898=1899
<1899=1901,1900
<1901=1903,1902
<1904=1905
<1906=1907
<1907=1909,1908
<1910=1923,1911
<1911=1921,1912
<1912=1913
<1913=1915,1914
<1915=1916
<1916=1918,1917
<1918=1920,1919
<1921=1922
<1923=1924
<1924=1926,1925
<1927=1940,1928
<1928=1938,1929
<1929=1930
<1930=1932,1931
<1932=1933
<1933=1935,1934
<1935=1937,1936
<1938=1939
<1940=1941
<1941=1943,1942
<1944=1957,1945
<1945=1955,1946
<1946=1947
<1947=1953,1948
<1948=1949
<1949=1950
<1950=1952,1951
<1953=1954
<1955=1956
<1957=1958
<1958=1960,1959
<1961=1969,1962
<1962=1967,1963
<1963=1964
<1964=1966,1965
<1967=1968
<1969=1970
<1970=1972,1971
<1973=1979,1974
<1974=1977,1975
<1975=1976
<1977=1978
<1979=1980
<1980=1982,1981
<1984=1985
<1985=1995,1994,1986
<1986=1993,1987
<1987=1989,1988
<1989=1990
<1990=1992,1991
<1996=1997
<1997=2004,1998
<1998=2000,1999
<2000=2001
<2001=2003,2002
<2005=2006
<2006=2016,2015,2007
<2007=2014,2008
<2008=2010,2009
<2010=2011
<2011=2013,2012
<2017=2018
<2018=2023,2022,2019
<2019=2021,2020
<2024=2025
<2025=2029,2026
<2026=2028,2027
<2046=2047
<2048=2049
<2049=2060,2050
<2050=2058,2051
<2051=2056,2054,2052
<2052=2053
<2054=2055
<2056=2057
<2058=2059
<2061=2062
<2062=2067,2066,2063
<2063=2065,2064
<2108=2117,2116,2109
<2109=2113,2110
<2110=2112,2111
<2113=2115,2114
<2117=2506,2492,2120,2118
<2118=2119
<2120=2483,2121
<2121=2425,2384,2122
<2122=2382,2123
<2123=2381,2380,2379,2378,2377,2376,2375,2374,2373,2372,2371,2370,2369,2368,2367,2366,2124
<2124=2360,2125
<2125=2353,2339,2126
<2126=2330,2127
<2127=2318,2177,2128
<2128=2173,2129
<2129=2164,2153,2137,2130
<2130=2131
<2131=2135,2132
<2132=2133
<2133=2134
<2135=2136
<2137=2138
<2138=2151,2139
<2139=2142,2140
<2140=2141
<2142=2143
<2143=2145,2144
<2145=2147,2146
<2147=2148
<2148=2150,2149
<2151=2152
<2153=2154
<2154=2156,2155
<2156=2158,2157
<2158=2160,2159
<2160=2161
<2161=2163,2162
<2164=2165
<2165=2172,2171,2166
<2166=2170,2167
<2167=2169,2168
<2173=2174
<2174=2176,2175
<2177=2178
<2178=2317,2179
<2179=2307,2180
<2180=2295,2181
<2181=2278,2182
<2182=2261,2183
<2183=2244,2184
<2184=2227,2185
<2185=2210,2186
<2186=2193,2187
<2187=2189,2188
<2189=2190
<2190=2192,2191
<2193=2206,2194
<2194=2204,2195
<2195=2196
<2196=2198,2197
<2198=2199
<2199=2201,2200
<2201=2203,2202
<2204=2205
<2206=2207
<2207=2209,2208
<2210=2223,2211
<2211=2221,2212
<2212=2213
<2213=2215,2214
<2215=2216
<2216=2218,2217
<2218=2220,2219
<2221=2222
<2223=2224
<2224=2226,2225
<2227=2240,2228
<2228=2238,2229
<2229=2230
<2230=2232,2231
<2232=2233
<2233=2235,2234
<2235=2237,2236
<2238=2239
<2240=2241
<2241=2243,2242
<2244=2257,2245
<2245=2255,2246
<2246=2247
<2247=2249,2248
<2249=2250
<2250=2252,2251
<2252=2254,2253
<2255=2256
<2257=2258
<2258=2260,2259
<2261=2274,2262
<2262=2272,2263
<2263=2264
<2264=2266,2265
<2266=2267
<2267=2269,2268
<2269=2271,2270
<2272=2273
<2274=2275
<2275=2277,2276
<2278=2291,2279
<2279=2289,2280
<2280=2281
<2281=2287,2282
<2282=2283
<2283=2284
<2284=2286,2285
<2287=2288
<2289=2290
<2291=2292
<2292=2294,2293
<2295=2303,2296
<2296=2301,2297
<2297=2298
<2298=2300,2299
<2301=2302
<2303=2304
<2304=2306,2305
<2307=2313,2308
<2308=2311,2309
<2309=2310
<2311=2312
<2313=2314
<2314=2316,2315
<2318=2319
<2319=2329,2328,2320
<2320=2327,2321
<2321=2323,2322
<2323=2324
<2324=2326,2325
<2330=2331
<2331=2338,2332
<2332=2334,2333
<2334=2335
<2335=2337,2336
<2339=2340
<2340=2352,2351,2341
<2341=2350,2342
<2342=2344,2343
<2344=2345
<2345=2347,2346
<2347=2349,2348
<2353=2354
<2354=2359,2358,2355
<2355=2357,2356
<2360=2361
<2361=2365,2362
<2362=2364,2363
<2382=2383
<2384=2423,2385
<2385=2422,2421,2420,2419,2418,2417,2416,2415,2414,2413,2412,2411,2410,2386
<2386=2387
<2387=2409,2388
<2388=2406,2389
<2389=2396,2390
<2390=2392,2391
<2392=2393
<2393=2395,2394
<2396=2402,2397
<2397=2400,2398
<2398=2399
<2400=2401
<2402=2403
<2403=2405,2404
<2406=2408,2407
<2423=2424
<2425=2482,2481,2480,2479,2478,2477,2476,2475,2474,2473,2472,2471,2470,2469,2468,2426
<2426=2427
<2427=2467,2428
<2428=2464,2429
<2429=2447,2430
<2430=2437,2431
<2431=2433,2432
<2433=2434
<2434=2436,2435
<2437=2443,2438
<2438=2441,2439
<2439=2440
<2441=2442
<2443=2444
<2444=2446,2445
<2447=2460,2448
<2448=2458,2449
<2449=2450
<2450=2452,2451
<2452=2453
<2453=2455,2454
<2455=2457,2456
<2458=2459
<2460=2461
<2461=2463,2462
<2464=2466,2465
<2483=2484
<2484=2490,2485
<2485=2488,2486
<2486=2487
<2488=2489
<2490=2491
<2492=2493
<2493=2505,2504,2494
<2494=2503,2495
<2495=2501,2496
<2496=2497
<2497=2498
<2498=2500,2499
<2501=2502
<2506=2507
<2507=2512,2511,2508
<2508=2510,2509
<2553=2565,2564,2554
<2554=2561,2558,2555
<2555=2557,2556
<2558=2560,2559
<2561=2563,2562
<2565=3356,3355,3354,3353,3352,3351,3350,3349,3348,3347,3346,3345,3344,3343,3342,3341,3340,3339,3338,3337,3336,3335,3334,3333,3332,3331,3330,3329,3328,3327,3326,3325,3324,3323,3322,3321,3320,3319,3318,3317,3311,3300,3287,2568,2566
<2566=2567
<2568=3283,2569
<2569=3274,2570
<2570=3272,2571
<2571=3267,3262,3255,3248,3244,3240,3233,3219,3194,3187,3183,2630,2617,2609,2572
<2572=2605,2573
<2573=2596,2585,2578,2574
<2574=2575
<2575=2577,2576
<2578=2579
<2579=2583,2580
<2580=2581
<2581=2582
<2583=2584
<2585=2586
<2586=2588,2587
<2588=2590,2589
<2590=2592,2591
<2592=2593
<2593=2595,2594
<2596=2597
<2597=2604,2603,2598
<2598=2602,2599
<2599=2601,2600
<2605=2606
<2606=2608,2607
<2609=2610
<2610=2614,2611
<2611=2613,2612
<2614=2616,2615
<2617=2618
<2618=2627,2619
<2619=2621,2620
<2621=2622
<2622=2624,2623
<2624=2626,2625
<2627=2629,2628
<2630=3172,2631
<2631=3161,2814,2632
<2632=2812,2633
<2633=2808,2797,2786,2775,2764,2753,2742,2731,2709,2698,2676,2665,2643,2634
<2634=2635
<2635=2639,2636
<2636=2637
<2637=2638
<2639=2640
<2640=2642,2641
<2643=2656,2644
<2644=2645
<2645=2646
<2646=2653,2647
<2647=2649,2648
<2649=2650
<2650=2652,2651
<2653=2655,2654
<2656=2657
<2657=2659,2658
<2659=2661,2660
<2661=2662
<2662=2664,2663
<2665=2666
<2666=2672,2667
<2667=2670,2668
<2668=2669
<2670=2671
<2672=2673
<2673=2675,2674
<2676=2689,2677
<2677=2678
<2678=2679
<2679=2686,2680
<2680=2682,2681
<2682=2683
<2683=2685,2684
<2686=2688,2687
<2689=2690
<2690=2692,2691
<2692=2694,2693
<2694=2695
<2695=2697,2696
<2698=2699
<2699=2705,2700
<2700=2703,2701
<2701=2702
<2703=2704
<2705=2706
<2706=2708,2707
<2709=2722,2710
<2710=2711
<2711=2712
<2712=2719,2713
<2713=2715,2714
<2715=2716
<2716=2718,2717
<2719=2721,2720
<2722=2723
<2723=2725,2724
<2725=2727,2726
<2727=2728
<2728=2730,2729
<2731=2732
<2732=2738,2733
<2733=2736,2734
<2734=2735
<2736=2737
<2738=2739
<2739=2741,2740
<2742=2743
<2743=2750,2744
<2744=2746,2745
<2746=2747
<2747=2749,2748
<2750=2752,2751
<2753=2754
<2754=2760,2755
<2755=2758,2756
<2756=2757
<2758=2759
<2760=2761
<2761=2763,2762
<2764=2765
<2765=2772,2766
<2766=2768,2767
<2768=2769
<2769=2771,2770
<2772=2774,2773
<2775=2776
<2776=2782,2777
<2777=2780,2778
<2778=2779
<2780=2781
<2782=2783
<2783=2785,2784
<2786=2787
<2787=2795,2788
<2788=2791,2789
<2789=2790
<2791=2792
<2792=2794,2793
<2795=2796
<2797=2798
<2798=2804,2799
<2799=2802,2800
<2800=2801
<2802=2803
<2804=2805
<2805=2807,2806
<2808=2809
<2809=2811,2810
<2812=2813
<2814=3157,2815
<2815=3150,3139,2816
<2816=3135,2817
<2817=3125,2822,2818
<2818=2819
<2819=2821,2820
<2822=3108,2829,2823
<2823=2824
<2824=2825
<2825=2826
<2826=2828,2827
<2829=3097,3091,3084,3075,3069,3058,3047,2834,2830
<2830=2831
<2831=2833,2832
<2834=3036,2835
<2835=3032,3021,2971,2964,2953,2945,2938,2927,2919,2897,2836
<2836=2895,2837
<2837=2883,2838
<2838=2877,2839
<2839=2870,2857,2847,2840
<2840=2841
<2841=2843,2842
<2843=2844
<2844=2846,2845
<2847=2855,2848
<2848=2849
<2849=2850
<2850=2852,2851
<2852=2854,2853
<2855=2856
<2857=2858
<2858=2869,2859
<2859=2865,2860
<2860=2863,2861
<2861=2862
<2863=2864
<2865=2866
<2866=2868,2867
<2870=2871
<2871=2876,2875,2872
<2872=2874,2873
<2877=2878
<2878=2882,2879
<2879=2881,2880
<2883=2884
<2884=2894,2893,2885
<2885=2892,2886
<2886=2888,2887
<2888=2889
<2889=2891,2890
<2895=2896
<2897=2898
<2898=2918,2899
<2899=2917,2900
<2900=2907,2901
<2901=2903,2902
<2903=2904
<2904=2906,2905
<2907=2913,2908
<2908=2911,2909
<2909=2910
<2911=2912
<2913=2914
<2914=2916,2915
<2919=2920
<2920=2924,2921
<2921=2923,2922
<2924=2926,2925
<2927=2928
<2928=2934,2929
<2929=2932,2930
<2930=2931
<2932=2933
<2934=2935
<2935=2937,2936
<2938=2939
<2939=2944,2943,2940
<2940=2942,2941
<2945=2946
<2946=2950,2947
<2947=2949,2948
<2950=2952,2951
<2953=2954
<2954=2960,2955
<2955=2958,2956
<2956=2957
<2958=2959
<2960=2961
<2961=2963,2962
<2964=2965
<2965=2970,2969,2966
<2966=2968,2967
<2971=3017,2972
<2972=3013,3002,2973
<2973=2974
<2974=3001,2975
<2975=3000,2976
<2976=2998,2977
<2977=2994,2987,2980,2978
<2978=2979
<2980=2981
<2981=2983,2982
<2983=2984
<2984=2986,2985
<2987=2988
<2988=2990,2989
<2990=2991
<2991=2993,2992
<2994=2995
<2995=2997,2996
<2998=2999
<3002=3003
<3003=3009,3004
<3004=3007,3005
<3005=3006
<3007=3008
<3009=3010
<3010=3012,3011
<3013=3014
<3014=3016,3015
<3017=3018
<3018=3020,3019
<3021=3022
<3022=3028,3023
<3023=3026,3024
<3024=3025
<3026=3027
<3028=3029
<3029=3031,3030
<3032=3033
<3033=3035,3034
<3036=3037
<3037=3046,3038
<3038=3040,3039
<3040=3041
<3041=3043,3042
<3043=3045,3044
<3047=3048
<3048=3055,3049
<3049=3051,3050
<3051=3052
<3052=3054,3053
<3055=3057,3056
<3058=3059
<3059=3065,3060
<3060=3063,3061
<3061=3062
<3063=3064
<3065=3066
<3066=3068,3067
<3069=3070
<3070=3072,3071
<3072=3074,3073
<3075=3076
<3076=3080,3077
<3077=3078
<3078=3079
<3080=3081
<3081=3083,3082
<3084=3085
<3085=3090,3086
<3086=3088,3087
<3088=3089
<3091=3092
<3092=3094,3093
<3094=3096,3095
<3097=3098
<3098=3107,3099
<3099=3101,3100
<3101=3102
<3102=3104,3103
<3104=3106,3105
<3108=3109
<3109=3122,3110
<3110=3112,3111
<3112=3121,3113
<3113=3115,3114
<3115=3116
<3116=3118,3117
<3118=3120,3119
<3122=3124,3123
<3125=3131,3126
<3126=3127
<3127=3128
<3128=3130,3129
<3131=3132
<3132=3134,3133
<3135=3136
<3136=3138,3137
<3139=3140
<3140=3146,3141
<3141=3144,3142
<3142=3143
<3144=3145
<3146=3147
<3147=3149,3148
<3150=3151
<3151=3156,3155,3152
<3152=3154,3153
<3157=3158
<3158=3160,3159
<3161=3162
<3162=3168,3163
<3163=3166,3164
<3164=3165
<3166=3167
<3168=3169
<3169=3171,3170
<3172=3173
<3173=3175,3174
<3175=3182,3176
<3176=3178,3177
<3178=3179
<3179=3181,3180
<3183=3184
<3184=3186,3185
<3187=3188
<3188=3193,3192,3189
<3189=3191,3190
<3194=3195
<3195=3218,3217,3196
<3196=3216,3197
<3197=3207,3199,3198
<3199=3201,3200
<3201=3202
<3202=3204,3203
<3204=3206,3205
<3207=3208
<3208=3212,3209
<3209=3210
<3210=3211
<3212=3213
<3213=3215,3214
<3219=3220
<3220=3232,3231,3221
<3221=3230,3222
<3222=3224,3223
<3224=3225
<3225=3227,3226
<3227=3229,3228
<3233=3234
<3234=3239,3238,3235
<3235=3237,3236
<3240=3241
<3241=3243,3242
<3244=3245
<3245=3247,3246
<3248=3249
<3249=3254,3253,3250
<3250=3252,3251
<3255=3256
<3256=3261,3260,3257
<3257=3259,3258
<3262=3263
<3263=3266,3265,3264
<3267=3268
<3268=3271,3270,3269
<3272=3273
<3274=3275
<3275=3282,3276
<3276=3278,3277
<3278=3279
<3279=3281,3280
<3283=3284
<3284=3286,3285
<3287=3288
<3288=3297,3289
<3289=3291,3290
<3291=3292
<3292=3294,3293
<3294=3296,3295
<3297=3299,3298
<3300=3301
<3301=3305,3302
<3302=3303
<3303=3304
<3305=3306
<3306=3308,3307
<3308=3310,3309
<3311=3312
<3312=3314,3313
<3314=3316,3315
<3356=3357
<3357=3362,3361,3358
<3358=3360,3359
<3427=3436,3435,3428
<3428=3432,3429
<3429=3431,3430
<3432=3434,3433
<3436=3511,3507,3506,3505,3504,3503,3502,3501,3500,3499,3498,3497,3496,3495,3494,3481,3439,3437
<3437=3438
<3439=3479,3440
<3440=3467,3441
<3441=3463,3442
<3442=3450,3443
<3443=3444
<3444=3446,3445
<3446=3447
<3447=3449,3448
<3450=3451
<3451=3462,3452
<3452=3458,3453
<3453=3456,3454
<3454=3455
<3456=3457
<3458=3459
<3459=3461,3460
<3463=3464
<3464=3466,3465
<3467=3468
<3468=3478,3477,3469
<3469=3476,3470
<3470=3472,3471
<3472=3473
<3473=3475,3474
<3479=3480
<3481=3482
<3482=3493,3483
<3483=3490,3484
<3484=3486,3485
<3486=3487
<3487=3489,3488
<3490=3492,3491
<3507=3508
<3508=3510,3509
<3511=3512
<3512=3517,3516,3513
<3513=3515,3514
<3533=3545,3544,3534
<3534=3541,3538,3535
<3535=3537,3536
<3538=3540,3539
<3541=3543,3542
<3545=4208,4194,4193,4192,4191,4190,4189,4188,4187,4186,4185,4184,4183,4182,4181,4180,4179,4178,4177,4176,4175,4174,4173,4172,4171,4170,4169,3548,3546
<3546=3547
<3548=4165,3549
<3549=4145,3550
<3550=4143,3551
<3551=4134,4125,4118,4114,4110,4106,4102,3594,3552
<3552=3590,3553
<3553=3581,3565,3558,3554
<3554=3555
<3555=3557,3556
<3558=3559
<3559=3563,3560
<3560=3561
<3561=3562
<3563=3564
<3565=3566
<3566=3579,3567
<3567=3570,3568
<3568=3569
<3570=3571
<3571=3573,3572
<3573=3575,3574
<3575=3576
<3576=3578,3577
<3579=3580
<3581=3582
<3582=3589,3588,3583
<3583=3587,3584
<3584=3586,3585
<3590=3591
<3591=3593,3592
<3594=4091,3595
<3595=3777,3773,3761,3750,3739,3728,3717,3706,3695,3684,3662,3651,3629,3618,3596
<3596=3609,3597
<3597=3598
<3598=3599
<3599=3606,3600
<3600=3602,3601
<3602=3603
<3603=3605,3604
<3606=3608,3607
<3609=3610
<3610=3612,3611
<3612=3614,3613
<3614=3615
<3615=3617,3616
<3618=3619
<3619=3625,3620
<3620=3623,3621
<3621=3622
<3623=3624
<3625=3626
<3626=3628,3627
<3629=3642,3630
<3630=3631
<3631=3632
<3632=3639,3633
<3633=3635,3634
<3635=3636
<3636=3638,3637
<3639=3641,3640
<3642=3643
<3643=3645,3644
<3645=3647,3646
<3647=3648
<3648=3650,3649
<3651=3652
<3652=3658,3653
<3653=3656,3654
<3654=3655
<3656=3657
<3658=3659
<3659=3661,3660
<3662=3675,3663
<3663=3664
<3664=3665
<3665=3672,3666
<3666=3668,3667
<3668=3669
<3669=3671,3670
<3672=3674,3673
<3675=3676
<3676=3678,3677
<3678=3680,3679
<3680=3681
<3681=3683,3682
<3684=3685
<3685=3691,3686
<3686=3689,3687
<3687=3688
<3689=3690
<3691=3692
<3692=3694,3693
<3695=3696
<3696=3703,3697
<3697=3699,3698
<3699=3700
<3700=3702,3701
<3703=3705,3704
<3706=3707
<3707=3713,3708
<3708=3711,3709
<3709=3710
<3711=3712
<3713=3714
<3714=3716,3715
<3717=3718
<3718=3725,3719
<3719=3721,3720
<3721=3722
<3722=3724,3723
<3725=3727,3726
<3728=3729
<3729=3735,3730
<3730=3733,3731
<3731=3732
<3733=3734
<3735=3736
<3736=3738,3737
<3739=3740
<3740=3748,3741
<3741=3744,3742
<3742=3743
<3744=3745
<3745=3747,3746
<3748=3749
<3750=3751
<3751=3757,3752
<3752=3755,3753
<3753=3754
<3755=3756
<3757=3758
<3758=3760,3759
<3761=3762
<3762=3772,3771,3763
<3763=3770,3764
<3764=3766,3765
<3766=3767
<3767=3769,3768
<3773=3774
<3774=3776,3775
<3777=4087,3778
<3778=4076,4065,3779
<3779=4054,3780
<3780=4050,4037,3985,3978,3963,3951,3944,3929,3917,3910,3895,3879,3878,3877,3876,3875,3874,3873,3872,3871,3870,3869,3868,3867,3866,3842,3781
<3781=3840,3782
<3782=3828,3783
<3783=3822,3784
<3784=3815,3802,3792,3785
<3785=3786
<3786=3788,3787
<3788=3789
<3789=3791,3790
<3792=3800,3793
<3793=3794
<3794=3795
<3795=3797,3796
<3797=3799,3798
<3800=3801
<3802=3803
<3803=3814,3804
<3804=3810,3805
<3805=3808,3806
<3806=3807
<3808=3809
<3810=3811
<3811=3813,3812
<3815=3816
<3816=3821,3820,3817
<3817=3819,3818
<3822=3823
<3823=3827,3824
<3824=3826,3825
<3828=3829
<3829=3839,3838,3830
<3830=3837,3831
<3831=3833,3832
<3833=3834
<3834=3836,3835
<3840=3841
<3842=3843
<3843=3865,3844
<3844=3862,3845
<3845=3852,3846
<3846=3848,3847
<3848=3849
<3849=3851,3850
<3852=3858,3853
<3853=3856,3854
<3854=3855
<3856=3857
<3858=3859
<3859=3861,3860
<3862=3864,3863
<3879=3893,3880
<3880=3881
<3881=3882
<3882=3890,3883
<3883=3886,3885,3884
<3886=3887
<3887=3889,3888
<3890=3892,3891
<3893=3894
<3895=3896
<3896=3909,3897
<3897=3908,3898
<3898=3904,3899
<3899=3902,3900
<3900=3901
<3902=3903
<3904=3905
<3905=3907,3906
<3910=3911
<3911=3916,3915,3912
<3912=3914,3913
<3917=3927,3918
<3918=3919
<3919=3920
<3920=3924,3921
<3921=3923,3922
<3924=3926,3925
<3927=3928
<3929=3930
<3930=3943,3931
<3931=3942,3932
<3932=3938,3933
<3933=3936,3934
<3934=3935
<3936=3937
<3938=3939
<3939=3941,3940
<3944=3945
<3945=3950,3949,3946
<3946=3948,3947
<3951=3961,3952
<3952=3953
<3953=3954
<3954=3958,3955
<3955=3957,3956
<3958=3960,3959
<3961=3962
<3963=3964
<3964=3977,3965
<3965=3976,3966
<3966=3972,3967
<3967=3970,3968
<3968=3969
<3970=3971
<3972=3973
<3973=3975,3974
<3978=3979
<3979=3984,3983,3980
<3980=3982,3981
<3985=4031,3986
<3986=4027,4016,3987
<3987=3988
<3988=4015,3989
<3989=4014,3990
<3990=4012,3991
<3991=4008,4001,3994,3992
<3992=3993
<3994=3995
<3995=3997,3996
<3997=3998
<3998=4000,3999
<4001=4002
<4002=4004,4003
<4004=4005
<4005=4007,4006
<4008=4009
<4009=4011,4010
<4012=4013
<4016=4017
<4017=4023,4018
<4018=4021,4019
<4019=4020
<4021=4022
<4023=4024
<4024=4026,4025
<4027=4028
<4028=4030,4029
<4031=4032
<4032=4036,4033
<4033=4035,4034
<4037=4038
<4038=4049,4039
<4039=4045,4040
<4040=4043,4041
<4041=4042
<4043=4044
<4045=4046
<4046=4048,4047
<4050=4051
<4051=4053,4052
<4054=4055
<4055=4064,4056
<4056=4058,4057
<4058=4059
<4059=4061,4060
<4061=4063,4062
<4065=4066
<4066=4073,4067
<4067=4069,4068
<4069=4070
<4070=4072,4071
<4073=4075,4074
<4076=4077
<4077=4083,4078
<4078=4081,4079
<4079=4080
<4081=4082
<4083=4084
<4084=4086,4085
<4087=4088
<4088=4090,4089
<4091=4092
<4092=4094,4093
<4094=4101,4095
<4095=4097,4096
<4097=4098
<4098=4100,4099
<4102=4103
<4103=4105,4104
<4106=4107
<4107=4109,4108
<4110=4111
<4111=4113,4112
<4114=4115
<4115=4117,4116
<4118=4119
<4119=4121,4120
<4121=4122
<4122=4124,4123
<4125=4126
<4126=4130,4127
<4127=4128
<4128=4129
<4130=4131
<4131=4133,4132
<4134=4135
<4135=4142,4141,4136
<4136=4140,4137
<4137=4139,4138
<4143=4144
<4145=4146
<4146=4164,4147
<4147=4154,4148
<4148=4150,4149
<4150=4151
<4151=4153,4152
<4154=4160,4155
<4155=4158,4156
<4156=4157
<4158=4159
<4160=4161
<4161=4163,4162
<4165=4166
<4166=4168,4167
<4194=4195
<4195=4207,4206,4196
<4196=4205,4197
<4197=4203,4198
<4198=4199
<4199=4200
<4200=4202,4201
<4203=4204
<4208=4209
<4209=4214,4213,4210
<4210=4212,4211
<4269=4278,4277,4270
<4270=4274,4271
<4271=4273,4272
<4274=4276,4275
<4278=4325,4324,4323,4322,4321,4320,4319,4318,4317,4316,4315,4314,4313,4312,4281,4279
<4279=4280
<4281=4282
<4282=4311,4283
<4283=4308,4284
<4284=4298,4285
<4285=4292,4286
<4286=4288,4287
<4288=4289
<4289=4291,4290
<4292=4294,4293
<4294=4295
<4295=4297,4296
<4298=4304,4299
<4299=4302,4300
<4300=4301
<4302=4303
<4304=4305
<4305=4307,4306
<4308=4310,4309
<4325=4326
<4326=4331,4330,4327
<4327=4329,4328
<4345=4354,4353,4346
<4346=4350,4347
<4347=4349,4348
<4350=4352,4351
<4354=4452,4451,4450,4449,4448,4447,4446,4445,4444,4443,4442,4441,4440,4439,4415,4357,4355
<4355=4356
<4357=4413,4358
<4358=4359
<4359=4404,4360
<4360=4397,4388,4372,4365,4361
<4361=4362
<4362=4364,4363
<4365=4366
<4366=4370,4367
<4367=4368
<4368=4369
<4370=4371
<4372=4373
<4373=4386,4374
<4374=4377,4375
<4375=4376
<4377=4378
<4378=4380,4379
<4380=4382,4381
<4382=4383
<4383=4385,4384
<4386=4387
<4388=4389
<4389=4396,4395,4390
<4390=4394,4391
<4391=4393,4392
<4397=4398
<4398=4400,4399
<4400=4401
<4401=4403,4402
<4404=4405
<4405=4407,4406
<4407=4409,4408
<4409=4410
<4410=4412,4411
<4413=4414
<4415=4416
<4416=4438,4417
<4417=4435,4418
<4418=4425,4419
<4419=4421,4420
<4421=4422
<4422=4424,4423
<4425=4431,4426
<4426=4429,4427
<4427=4428
<4429=4430
<4431=4432
<4432=4434,4433
<4435=4437,4436
<4452=4453
<4453=4458,4457,4454
<4454=4456,4455
<4477=4486,4485,4478
<4478=4482,4479
<4479=4481,4480
<4482=4484,4483
<4486=4537,4489,4487
<4487=4488
<4489=4528,4490
<4490=4527,4526,4525,4524,4523,4522,4521,4520,4519,4518,4517,4516,4515,4491
<4491=4492
<4492=4514,4493
<4493=4511,4494
<4494=4501,4495
<4495=4497,4496
<4497=4498
<4498=4500,4499
<4501=4507,4502
<4502=4505,4503
<4503=4504
<4505=4506
<4507=4508
<4508=4510,4509
<4511=4513,4512
<4528=4529
<4529=4535,4530
<4530=4533,4531
<4531=4532
<4533=4534
<4535=4536
<4537=4538
<4538=4543,4542,4539
<4539=4541,4540
<4557=4572,4571,4558
<4558=4568,4565,4562,4559
<4559=4561,4560
<4562=4564,4563
<4565=4567,4566
<4568=4570,4569
<4572=4772,4771,4770,4769,4768,4767,4766,4765,4764,4763,4762,4761,4760,4759,4746,4575,4573
<4573=4574
<4575=4744,4576
<4576=4740,4736,4729,4577
<4577=4716,4578
<4578=4705,4694,4690,4679,4673,4667,4663,4657,4579
<4579=4644,4617,4580
<4580=4581
<4581=4616,4615,4614,4613,4612,4611,4610,4609,4608,4607,4606,4605,4589,4582
<4582=4583
<4583=4587,4584
<4584=4585
<4585=4586
<4587=4588
<4589=4590
<4590=4603,4591
<4591=4594,4592
<4592=4593
<4594=4595
<4595=4597,4596
<4597=4599,4598
<4599=4600
<4600=4602,4601
<4603=4604
<4617=4618
<4618=4619
<4619=4640,4630,4620
<4620=4624,4621
<4621=4622
<4622=4623
<4624=4625
<4625=4627,4626
<4627=4629,4628
<4630=4634,4631
<4631=4632
<4632=4633
<4634=4635
<4635=4637,4636
<4637=4639,4638
<4640=4641
<4641=4643,4642
<4644=4645
<4645=4656,4646
<4646=4654,4647
<4647=4652,4650,4648
<4648=4649
<4650=4651
<4652=4653
<4654=4655
<4657=4658
<4658=4660,4659
<4660=4662,4661
<4663=4664
<4664=4666,4665
<4667=4668
<4668=4670,4669
<4670=4672,4671
<4673=4674
<4674=4676,4675
<4676=4678,4677
<4679=4680
<4680=4688,4681
<4681=4684,4682
<4682=4683
<4684=4685
<4685=4687,4686
<4688=4689
<4690=4691
<4691=4693,4692
<4694=4695
<4695=4701,4696
<4696=4699,4697
<4697=4698
<4699=4700
<4701=4702
<4702=4704,4703
<4705=4706
<4706=4712,4707
<4707=4710,4708
<4708=4709
<4710=4711
<4712=4713
<4713=4715,4714
<4716=4717
<4717=4728,4718
<4718=4720,4719
<4720=4727,4721
<4721=4723,4722
<4723=4724
<4724=4726,4725
<4729=4730
<4730=4735,4734,4731
<4731=4733,4732
<4736=4737
<4737=4739,4738
<4740=4741
<4741=4743,4742
<4744=4745
<4746=4747
<4747=4758,4748
<4748=4755,4749
<4749=4751,4750
<4751=4752
<4752=4754,4753
<4755=4757,4756
<4772=4773
<4773=4778,4777,4774
<4774=4776,4775
<4808=4820,4819,4809
<4809=4816,4813,4810
<4810=4812,4811
<4813=4815,4814
<4816=4818,4817
<4820=4872,4871,4870,4869,4868,4867,4866,4865,4864,4863,4862,4861,4860,4859,4858,4823,4821
<4821=4822
<4823=4824
<4824=4857,4825
<4825=4854,4826
<4826=4844,4827
<4827=4834,4828
<4828=4830,4829
<4830=4831
<4831=4833,4832
<4834=4840,4835
<4835=4838,4836
<4836=4837
<4838=4839
<4840=4841
<4841=4843,4842
<4844=4850,4845
<4845=4848,4846
<4846=4847
<4848=4849
<4850=4851
<4851=4853,4852
<4854=4856,4855
<4872=4873
<4873=4878,4877,4874
<4874=4876,4875
<4893=4908,4907,4894
<4894=4904,4901,4898,4895
<4895=4897,4896
<4898=4900,4899
<4901=4903,4902
<4904=4906,4905
<4908=5279,5278,5277,5276,5275,5274,5273,5272,5271,5270,5269,5268,5267,5266,4911,4909
<4909=4910
<4911=5262,4912
<4912=5235,4913
<4913=5233,4914
<4914=5226,5214,4915
<4915=5210,5166,4916
<4916=4917
<4917=5149,5098,4918
<4918=4919
<4919=5096,4920
<4920=5092,5088,5084,5047,5041,5030,5019,5012,5001,4997,4986,4982,4976,4946,4921
<4921=4944,4922
<4922=4931,4923
<4923=4924
<4924=4928,4925
<4925=4927,4926
<4928=4930,4929
<4931=4932
<4932=4942,4933
<4933=4938,4934
<4934=4935
<4935=4937,4936
<4938=4939
<4939=4941,4940
<4942=4943
<4944=4945
<4946=4947
<4947=4975,4948
<4948=4974,4949
<4949=4960,4950
<4950=4958,4951
<4951=4956,4954,4952
<4952=4953
<4954=4955
<4956=4957
<4958=4959
<4960=4970,4961
<4961=4968,4966,4964,4962
<4962=4963
<4964=4965
<4966=4967
<4968=4969
<4970=4971
<4971=4973,4972
<4976=4977
<4977=4979,4978
<4979=4981,4980
<4982=4983
<4983=4985,4984
<4986=4987
<4987=4995,4988
<4988=4991,4989
<4989=4990
<4991=4992
<4992=4994,4993
<4995=4996
<4997=4998
<4998=5000,4999
<5001=5002
<5002=5011,5010,5003
<5003=5009,5004
<5004=5006,5005
<5006=5008,5007
<5012=5013
<5013=5015,5014
<5015=5016
<5016=5018,5017
<5019=5020
<5020=5027,5021
<5021=5023,5022
<5023=5024
<5024=5026,5025
<5027=5029,5028
<5030=5031
<5031=5039,5032
<5032=5035,5033
<5033=5034
<5035=5036
<5036=5038,5037
<5039=5040
<5041=5042
<5042=5044,5043
<5044=5046,5045
<5047=5048
<5048=5083,5049
<5049=5082,5050
<5050=5072,5051
<5051=5062,5052
<5052=5058,5053
<5053=5056,5054
<5054=5055
<5056=5057
<5058=5059
<5059=5061,5060
<5062=5068,5063
<5063=5066,5064
<5064=5065
<5066=5067
<5068=5069
<5069=5071,5070
<5072=5078,5073
<5073=5076,5074
<5074=5075
<5076=5077
<5078=5079
<5079=5081,5080
<5084=5085
<5085=5087,5086
<5088=5089
<5089=5091,5090
<5092=5093
<5093=5095,5094
<5096=5097
<5098=5142,5133,5110,5103,5099
<5099=5100
<5100=5102,5101
<5103=5104
<5104=5108,5105
<5105=5106
<5106=5107
<5108=5109
<5110=5111
<5111=5131,5112
<5112=5122,5113
<5113=5114
<5114=5120,5115
<5115=5116
<5116=5117
<5117=5119,5118
<5120=5121
<5122=5123
<5123=5125,5124
<5125=5127,5126
<5127=5128
<5128=5130,5129
<5131=5132
<5133=5134
<5134=5141,5140,5135
<5135=5139,5136
<5136=5138,5137
<5142=5143
<5143=5145,5144
<5145=5146
<5146=5148,5147
<5149=5150
<5150=5154,5151
<5151=5153,5152
<5154=5165,5155
<5155=5161,5156
<5156=5159,5157
<5157=5158
<5159=5160
<5161=5162
<5162=5164,5163
<5166=5201,5178,5171,5167
<5167=5168
<5168=5170,5169
<5171=5172
<5172=5176,5173
<5173=5174
<5174=5175
<5176=5177
<5178=5179
<5179=5199,5180
<5180=5190,5181
<5181=5182
<5182=5188,5183
<5183=5184
<5184=5185
<5185=5187,5186
<5188=5189
<5190=5191
<5191=5193,5192
<5193=5195,5194
<5195=5196
<5196=5198,5197
<5199=5200
<5201=5202
<5202=5209,5208,5203
<5203=5207,5204
<5204=5206,5205
<5210=5211
<5211=5213,5212
<5214=5215
<5215=5225,5224,5216
<5216=5223,5217
<5217=5219,5218
<5219=5220
<5220=5222,5221
<5226=5227
<5227=5232,5231,5228
<5228=5230,5229
<5233=5234
<5235=5236
<5236=5261,5237
<5237=5244,5238
<5238=5240,5239
<5240=5241
<5241=5243,5242
<5244=5257,5245
<5245=5255,5246
<5246=5247
<5247=5249,5248
<5249=5250
<5250=5252,5251
<5252=5254,5253
<5255=5256
<5257=5258
<5258=5260,5259
<5262=5263
<5263=5265,5264
<5279=5280
<5280=5285,5284,5281
<5281=5283,5282
<5329=5347,5346,5330
<5330=5343,5340,5337,5334,5331
<5331=5333,5332
<5334=5336,5335
<5337=5339,5338
<5340=5342,5341
<5343=5345,5344
<5347=6450,6446,6437,6387,6137,6126,6117,6111,6105,6061,5473,5350,5348
<5348=5349
<5350=5471,5457,5351
<5351=5352
<5352=5448,5437,5413,5389,5360,5353
<5353=5354
<5354=5358,5355
<5355=5356
<5356=5357
<5358=5359
<5360=5361
<5361=5381,5362
<5362=5372,5364,5363
<5364=5366,5365
<5366=5367
<5367=5369,5368
<5369=5371,5370
<5372=5373
<5373=5377,5374
<5374=5375
<5375=5376
<5377=5378
<5378=5380,5379
<5381=5383,5382
<5383=5385,5384
<5385=5386
<5386=5388,5387
<5389=5404,5390
<5390=5391
<5391=5392
<5392=5396,5393
<5393=5395,5394
<5396=5398,5397
<5398=5400,5399
<5400=5401
<5401=5403,5402
<5404=5405
<5405=5409,5406
<5406=5407
<5407=5408
<5409=5410
<5410=5412,5411
<5413=5428,5414
<5414=5415
<5415=5416
<5416=5420,5417
<5417=5419,5418
<5420=5422,5421
<5422=5424,5423
<5424=5425
<5425=5427,5426
<5428=5429
<5429=5433,5430
<5430=5431
<5431=5432
<5433=5434
<5434=5436,5435
<5437=5438
<5438=5440,5439
<5440=5442,5441
<5442=5444,5443
<5444=5445
<5445=5447,5446
<5448=5449
<5449=5456,5455,5450
<5450=5454,5451
<5451=5453,5452
<5457=5458
<5458=5459
<5459=5468,5460
<5460=5462,5461
<5462=5463
<5463=5465,5464
<5465=5467,5466
<5468=5470,5469
<5471=5472
<5473=6043,5957,5474
<5474=5475
<5475=5956,5955,5954,5953,5952,5951,5950,5949,5948,5947,5946,5945,5943,5939,5930,5923,5879,5870,5851,5476
<5476=5847,5477
<5477=5843,5836,5827,5789,5778,5478
<5478=5776,5479
<5479=5772,5480
<5480=5759,5481
<5481=5752,5739,5482
<5482=5733,5483
<5483=5719,5715,5711,5707,5703,5696,5689,5682,5678,5597,5576,5484
<5484=5574,5485
<5485=5558,5552,5546,5535,5527,5519,5486
<5486=5515,5487
<5487=5488
<5488=5489
<5489=5514,5490
<5490=5512,5491
<5491=5508,5501,5494,5492
<5492=5493
<5494=5495
<5495=5497,5496
<5497=5498
<5498=5500,5499
<5501=5502
<5502=5504,5503
<5504=5505
<5505=5507,5506
<5508=5509
<5509=5511,5510
<5512=5513
<5515=5516
<5516=5518,5517
<5519=5520
<5520=5524,5521
<5521=5523,5522
<5524=5526,5525
<5527=5528
<5528=5532,5529
<5529=5531,5530
<5532=5534,5533
<5535=5536
<5536=5543,5537
<5537=5539,5538
<5539=5540
<5540=5542,5541
<5543=5545,5544
<5546=5547
<5547=5549,5548
<5549=5551,5550
<5552=5553
<5553=5555,5554
<5555=5557,5556
<5558=5559
<5559=5572,5560
<5560=5568,5561
<5561=5562
<5562=5564,5563
<5564=5565
<5565=5567,5566
<5568=5569
<5569=5571,5570
<5572=5573
<5574=5575
<5576=5591,5577
<5577=5578
<5578=5579
<5579=5590,5580
<5580=5586,5581
<5581=5584,5582
<5582=5583
<5584=5585
<5586=5587
<5587=5589,5588
<5591=5592
<5592=5596,5593
<5593=5595,5594
<5597=5598
<5598=5677,5599
<5599=5676,5600
<5600=5666,5601
<5601=5656,5602
<5602=5646,5603
<5603=5636,5604
<5604=5626,5605
<5605=5616,5606
<5606=5612,5607
<5607=5610,5608
<5608=5609
<5610=5611
<5612=5613
<5613=5615,5614
<5616=5622,5617
<5617=5620,5618
<5618=5619
<5620=5621
<5622=5623
<5623=5625,5624
<5626=5632,5627
<5627=5630,5628
<5628=5629
<5630=5631
<5632=5633
<5633=5635,5634
<5636=5642,5637
<5637=5640,5638
<5638=5639
<5640=5641
<5642=5643
<5643=5645,5644
<5646=5652,5647
<5647=5650,5648
<5648=5649
<5650=5651
<5652=5653
<5653=5655,5654
<5656=5662,5657
<5657=5660,5658
<5658=5659
<5660=5661
<5662=5663
<5663=5665,5664
<5666=5672,5667
<5667=5670,5668
<5668=5669
<5670=5671
<5672=5673
<5673=5675,5674
<5678=5679
<5679=5681,5680
<5682=5683
<5683=5688,5687,5684
<5684=5686,5685
<5689=5690
<5690=5695,5694,5691
<5691=5693,5692
<5696=5697
<5697=5702,5701,5698
<5698=5700,5699
<5703=5704
<5704=5706,5705
<5707=5708
<5708=5710,5709
<5711=5712
<5712=5714,5713
<5715=5716
<5716=5718,5717
<5719=5720
<5720=5732,5731,5721
<5721=5730,5722
<5722=5724,5723
<5724=5725
<5725=5727,5726
<5727=5729,5728
<5733=5734
<5734=5738,5735
<5735=5737,5736
<5739=5740
<5740=5751,5741
<5741=5747,5742
<5742=5745,5743
<5743=5744
<5745=5746
<5747=5748
<5748=5750,5749
<5752=5753
<5753=5758,5757,5754
<5754=5756,5755
<5759=5760
<5760=5771,5761
<5761=5763,5762
<5763=5770,5764
<5764=5766,5765
<5766=5767
<5767=5769,5768
<5772=5773
<5773=5775,5774
<5776=5777
<5778=5779
<5779=5788,5780
<5780=5787,5781
<5781=5783,5782
<5783=5784
<5784=5786,5785
<5789=5818,5790
<5790=5811,5791
<5791=5792
<5792=5810,5793
<5793=5806,5794
<5794=5802,5795
<5795=5796
<5796=5798,5797
<5798=5799
<5799=5801,5800
<5802=5803
<5803=5805,5804
<5806=5807
<5807=5809,5808
<5811=5812
<5812=5814,5813
<5814=5815
<5815=5817,5816
<5818=5819
<5819=5826,5820
<5820=5822,5821
<5822=5823
<5823=5825,5824
<5827=5828
<5828=5835,5829
<5829=5831,5830
<5831=5832
<5832=5834,5833
<5836=5837
<5837=5842,5841,5838
<5838=5840,5839
<5843=5844
<5844=5846,5845
<5847=5848
<5848=5850,5849
<5851=5852
<5852=5869,5868,5853
<5853=5867,5854
<5854=5863,5855
<5855=5856
<5856=5857
<5857=5859,5858
<5859=5860
<5860=5862,5861
<5863=5864
<5864=5866,5865
<5870=5871
<5871=5875,5872
<5872=5873
<5873=5874
<5875=5876
<5876=5878,5877
<5879=5916,5880
<5880=5909,5894,5885,5881
<5881=5882
<5882=5884,5883
<5885=5886
<5886=5890,5887
<5887=5888
<5888=5889
<5890=5891
<5891=5893,5892
<5894=5905,5895
<5895=5896
<5896=5897
<5897=5901,5898
<5898=5899
<5899=5900
<5901=5902
<5902=5904,5903
<5905=5906
<5906=5908,5907
<5909=5910
<5910=5912,5911
<5912=5913
<5913=5915,5914
<5916=5917
<5917=5919,5918
<5919=5920
<5920=5922,5921
<5923=5924
<5924=5929,5928,5925
<5925=5927,5926
<5930=5931
<5931=5938,5932
<5932=5934,5933
<5934=5935
<5935=5937,5936
<5939=5940
<5940=5942,5941
<5943=5944
<5957=6031,6027,5958
<5958=6018,5959
<5959=6006,6002,5986,5971,5960
<5960=5961
<5961=5965,5962
<5962=5963
<5963=5964
<5965=5966
<5966=5968,5967
<5968=5970,5969
<5971=5972
<5972=5985,5973
<5973=5983,5974
<5974=5981,5979,5977,5975
<5975=5976
<5977=5978
<5979=5980
<5981=5982
<5983=5984
<5986=5987
<5987=6000,5988
<5988=5996,5989
<5989=5990
<5990=5994,5991
<5991=5992
<5992=5993
<5994=5995
<5996=5997
<5997=5999,5998
<6000=6001
<6002=6003
<6003=6005,6004
<6006=6007
<6007=6017,6016,6008
<6008=6015,6009
<6009=6011,6010
<6011=6012
<6012=6014,6013
<6018=6019
<6019=6026,6020
<6020=6022,6021
<6022=6023
<6023=6025,6024
<6027=6028
<6028=6030,6029
<6031=6032
<6032=6042,6041,6033
<6033=6040,6034
<6034=6036,6035
<6036=6037
<6037=6039,6038
<6043=6044
<6044=6053,6045
<6045=6047,6046
<6047=6048
<6048=6050,6049
<6050=6052,6051
<6053=6057,6054
<6054=6055
<6055=6056
<6057=6058
<6058=6060,6059
<6061=6062
<6062=6102,6063
<6063=6083,6064
<6064=6074,6066,6065
<6066=6068,6067
<6068=6069
<6069=6071,6070
<6071=6073,6072
<6074=6075
<6075=6079,6076
<6076=6077
<6077=6078
<6079=6080
<6080=6082,6081
<6083=6093,6085,6084
<6085=6087,6086
<6087=6088
<6088=6090,6089
<6090=6092,6091
<6093=6094
<6094=6098,6095
<6095=6096
<6096=6097
<6098=6099
<6099=6101,6100
<6102=6104,6103
<6105=6106
<6106=6108,6107
<6108=6110,6109
<6111=6112
<6112=6114,6113
<6114=6116,6115
<6117=6118
<6118=6120,6119
<6120=6121
<6121=6123,6122
<6123=6125,6124
<6126=6127
<6127=6131,6128
<6128=6129
<6129=6130
<6131=6132
<6132=6134,6133
<6134=6136,6135
<6137=6378,6138
<6138=6377,6376,6375,6374,6373,6372,6371,6370,6369,6368,6367,6366,6364,6308,6299,6280,6139
<6139=6276,6140
<6140=6272,6265,6209,6198,6141
<6141=6196,6142
<6142=6192,6143
<6143=6179,6144
<6144=6175,6160,6145
<6145=6158,6146
<6146=6147
<6147=6148
<6148=6150,6149
<6150=6157,6151
<6151=6153,6152
<6153=6154
<6154=6156,6155
<6158=6159
<6160=6161
<6161=6174,6162
<6162=6173,6163
<6163=6169,6164
<6164=6167,6165
<6165=6166
<6167=6168
<6169=6170
<6170=6172,6171
<6175=6176
<6176=6178,6177
<6179=6180
<6180=6191,6181
<6181=6183,6182
<6183=6190,6184
<6184=6186,6185
<6186=6187
<6187=6189,6188
<6192=6193
<6193=6195,6194
<6196=6197
<6198=6199
<6199=6208,6200
<6200=6207,6201
<6201=6203,6202
<6203=6204
<6204=6206,6205
<6209=6244,6238,6235,6210
<6210=6211
<6211=6212
<6212=6234,6213
<6213=6230,6214
<6214=6226,6215
<6215=6216
<6216=6218,6217
<6218=6219
<6219=6221,6220
<6221=6223,6222
<6223=6225,6224
<6226=6227
<6227=6229,6228
<6230=6231
<6231=6233,6232
<6235=6237,6236
<6238=6239
<6239=6243,6240
<6240=6242,6241
<6244=6245
<6245=6259,6246
<6246=6258,6257,6247
<6247=6256,6248
<6248=6250,6249
<6250=6251
<6251=6253,6252
<6253=6255,6254
<6259=6264,6263,6260
<6260=6262,6261
<6265=6266
<6266=6271,6270,6267
<6267=6269,6268
<6272=6273
<6273=6275,6274
<6276=6277
<6277=6279,6278
<6280=6281
<6281=6298,6297,6282
<6282=6296,6283
<6283=6292,6284
<6284=6285
<6285=6286
<6286=6288,6287
<6288=6289
<6289=6291,6290
<6292=6293
<6293=6295,6294
<6299=6300
<6300=6304,6301
<6301=6302
<6302=6303
<6304=6305
<6305=6307,6306
<6308=6343,6339,6336,6309
<6309=6327,6310
<6310=6321,6311
<6311=6312
<6312=6313
<6313=6317,6314
<6314=6315
<6315=6316
<6317=6318
<6318=6320,6319
<6321=6322
<6322=6326,6323
<6323=6325,6324
<6327=6328
<6328=6332,6329
<6329=6330
<6330=6331
<6332=6333
<6333=6335,6334
<6336=6338,6337
<6339=6340
<6340=6342,6341
<6343=6344
<6344=6358,6345
<6345=6357,6356,6346
<6346=6355,6347
<6347=6349,6348
<6349=6350
<6350=6352,6351
<6352=6354,6353
<6358=6363,6362,6359
<6359=6361,6360
<6364=6365
<6378=6379
<6379=6383,6380
<6380=6381
<6381=6382
<6383=6384
<6384=6386,6385
<6387=6428,6388
<6388=6414,6389
<6389=6407,6390
<6390=6391
<6391=6392
<6392=6394,6393
<6394=6406,6395
<6395=6397,6396
<6397=6398
<6398=6400,6399
<6400=6402,6401
<6402=6403
<6403=6405,6404
<6407=6408
<6408=6410,6409
<6410=6411
<6411=6413,6412
<6414=6415
<6415=6427,6426,6416
<6416=6425,6417
<6417=6419,6418
<6419=6420
<6420=6422,6421
<6422=6424,6423
<6428=6429
<6429=6433,6430
<6430=6431
<6431=6432
<6433=6434
<6434=6436,6435
<6437=6438
<6438=6442,6439
<6439=6440
<6440=6441
<6442=6443
<6443=6445,6444
<6446=6447
<6447=6449,6448
<6450=6451
<6451=6456,6455,6452
<6452=6454,6453
<6544=6559,6558,6545
<6545=6555,6552,6549,6546
<6546=6548,6547
<6549=6551,6550
<6552=6554,6553
<6555=6557,6556
<6559=6728,6727,6726,6725,6724,6723,6722,6721,6720,6719,6718,6717,6716,6715,6562,6560
<6560=6561
<6562=6711,6563
<6563=6684,6564
<6564=6682,6565
<6565=6670,6566
<6566=6666,6622,6567
<6567=6568
<6568=6618,6607,6600,6586,6569
<6569=6570
<6570=6585,6571
<6571=6581,6572
<6572=6579,6577,6575,6573
<6573=6574
<6575=6576
<6577=6578
<6579=6580
<6581=6582
<6582=6584,6583
<6586=6587
<6587=6599,6598,6588
<6588=6597,6589
<6589=6591,6590
<6591=6592
<6592=6594,6593
<6594=6596,6595
<6600=6601
<6601=6603,6602
<6603=6604
<6604=6606,6605
<6607=6608
<6608=6614,6609
<6609=6612,6610
<6610=6611
<6612=6613
<6614=6615
<6615=6617,6616
<6618=6619
<6619=6621,6620
<6622=6657,6634,6627,6623
<6623=6624
<6624=6626,6625
<6627=6628
<6628=6632,6629
<6629=6630
<6630=6631
<6632=6633
<6634=6635
<6635=6655,6636
<6636=6646,6637
<6637=6638
<6638=6644,6639
<6639=6640
<6640=6641
<6641=6643,6642
<6644=6645
<6646=6647
<6647=6649,6648
<6649=6651,6650
<6651=6652
<6652=6654,6653
<6655=6656
<6657=6658
<6658=6665,6664,6659
<6659=6663,6660
<6660=6662,6661
<6666=6667
<6667=6669,6668
<6670=6671
<6671=6681,6680,6672
<6672=6679,6673
<6673=6675,6674
<6675=6676
<6676=6678,6677
<6682=6683
<6684=6685
<6685=6710,6686
<6686=6693,6687
<6687=6689,6688
<6689=6690
<6690=6692,6691
<6693=6706,6694
<6694=6704,6695
<6695=6696
<6696=6702,6697
<6697=6698
<6698=6699
<6699=6701,6700
<6702=6703
<6704=6705
<6706=6707
<6707=6709,6708
<6711=6712
<6712=6714,6713
<6728=6729
<6729=6734,6733,6730
<6730=6732,6731
<6764=6773,6772,6765
<6765=6769,6766
<6766=6768,6767
<6769=6771,6770
<6773=6994,6993,6992,6991,6990,6989,6988,6987,6986,6985,6984,6983,6982,6981,6950,6776,6774
<6774=6775
<6776=6948,6777
<6777=6941,6932,6778
<6778=6928,6884,6779
<6779=6780
<6780=6883,6882,6881,6880,6879,6878,6877,6876,6875,6874,6873,6781
<6781=6869,6782
<6782=6842,6783
<6783=6840,6784
<6784=6828,6785
<6785=6824,6786
<6786=6820,6805,6794,6787
<6787=6788
<6788=6790,6789
<6790=6791
<6791=6793,6792
<6794=6795
<6795=6803,6796
<6796=6799,6797
<6797=6798
<6799=6800
<6800=6802,6801
<6803=6804
<6805=6806
<6806=6819,6807
<6807=6818,6808
<6808=6814,6809
<6809=6812,6810
<6810=6811
<6812=6813
<6814=6815
<6815=6817,6816
<6820=6821
<6821=6823,6822
<6824=6825
<6825=6827,6826
<6828=6829
<6829=6839,6838,6830
<6830=6837,6831
<6831=6833,6832
<6833=6834
<6834=6836,6835
<6840=6841
<6842=6843
<6843=6868,6844
<6844=6851,6845
<6845=6847,6846
<6847=6848
<6848=6850,6849
<6851=6864,6852
<6852=6862,6853
<6853=6854
<6854=6860,6855
<6855=6856
<6856=6857
<6857=6859,6858
<6860=6861
<6862=6863
<6864=6865
<6865=6867,6866
<6869=6870
<6870=6872,6871
<6884=6919,6896,6889,6885
<6885=6886
<6886=6888,6887
<6889=6890
<6890=6894,6891
<6891=6892
<6892=6893
<6894=6895
<6896=6897
<6897=6917,6898
<6898=6908,6899
<6899=6900
<6900=6906,6901
<6901=6902
<6902=6903
<6903=6905,6904
<6906=6907
<6908=6909
<6909=6911,6910
<6911=6913,6912
<6913=6914
<6914=6916,6915
<6917=6918
<6919=6920
<6920=6927,6926,6921
<6921=6925,6922
<6922=6924,6923
<6928=6929
<6929=6931,6930
<6932=6933
<6933=6937,6934
<6934=6935
<6935=6936
<6937=6938
<6938=6940,6939
<6941=6942
<6942=6947,6946,6943
<6943=6945,6944
<6948=6949
<6950=6951
<6951=6980,6952
<6952=6977,6953
<6953=6960,6954
<6954=6956,6955
<6956=6957
<6957=6959,6958
<6960=6973,6961
<6961=6971,6962
<6962=6963
<6963=6969,6964
<6964=6965
<6965=6966
<6966=6968,6967
<6969=6970
<6971=6972
<6973=6974
<6974=6976,6975
<6977=6979,6978
<6994=6995
<6995=7000,6999,6996
<6996=6998,6997
<7026=7041,7040,7027
<7027=7037,7034,7031,7028
<7028=7030,7029
<7031=7033,7032
<7034=7036,7035
<7037=7039,7038
<7041=7301,7294,7170,7058,7044,7042
<7042=7043
<7044=7052,7045
<7045=7046
<7046=7047
<7047=7049,7048
<7049=7051,7050
<7052=7053
<7053=7057,7054
<7054=7056,7055
<7058=7164,7059
<7059=7163,7162,7161,7160,7159,7158,7157,7156,7155,7154,7153,7152,7151,7150,7149,7148,7147,7146,7145,7144,7143,7142,7060
<7060=7061
<7061=7141,7062
<7062=7138,7063
<7063=7117,7064
<7064=7100,7065
<7065=7090,7066
<7066=7073,7067
<7067=7069,7068
<7069=7070
<7070=7072,7071
<7073=7086,7074
<7074=7084,7075
<7075=7076
<7076=7082,7077
<7077=7078
<7078=7079
<7079=7081,7080
<7082=7083
<7084=7085
<7086=7087
<7087=7089,7088
<7090=7096,7091
<7091=7094,7092
<7092=7093
<7094=7095
<7096=7097
<7097=7099,7098
<7100=7113,7101
<7101=7111,7102
<7102=7103
<7103=7105,7104
<7105=7106
<7106=7108,7107
<7108=7110,7109
<7111=7112
<7113=7114
<7114=7116,7115
<7117=7134,7118
<7118=7132,7119
<7119=7120
<7120=7130,7121
<7121=7122
<7122=7123
<7123=7125,7124
<7125=7127,7126
<7127=7129,7128
<7130=7131
<7132=7133
<7134=7135
<7135=7137,7136
<7138=7140,7139
<7164=7165
<7165=7169,7166
<7166=7168,7167
<7170=7293,7292,7291,7290,7289,7288,7287,7286,7285,7284,7283,7282,7281,7280,7279,7278,7277,7276,7194,7171
<7171=7192,7172
<7172=7188,7179,7173
<7173=7174
<7174=7178,7175
<7175=7177,7176
<7179=7180
<7180=7184,7181
<7181=7182
<7182=7183
<7184=7185
<7185=7187,7186
<7188=7189
<7189=7191,7190
<7192=7193
<7194=7195
<7195=7275,7196
<7196=7272,7197
<7197=7251,7198
<7198=7234,7199
<7199=7217,7200
<7200=7207,7201
<7201=7203,7202
<7203=7204
<7204=7206,7205
<7207=7213,7208
<7208=7211,7209
<7209=7210
<7211=7212
<7213=7214
<7214=7216,7215
<7217=7230,7218
<7218=7228,7219
<7219=7220
<7220=7222,7221
<7222=7223
<7223=7225,7224
<7225=7227,7226
<7228=7229
<7230=7231
<7231=7233,7232
<7234=7247,7235
<7235=7245,7236
<7236=7237
<7237=7243,7238
<7238=7239
<7239=7240
<7240=7242,7241
<7243=7244
<7245=7246
<7247=7248
<7248=7250,7249
<7251=7268,7252
<7252=7266,7253
<7253=7254
<7254=7264,7255
<7255=7256
<7256=7257
<7257=7259,7258
<7259=7261,7260
<7261=7263,7262
<7264=7265
<7266=7267
<7268=7269
<7269=7271,7270
<7272=7274,7273
<7294=7295
<7295=7300,7299,7296
<7296=7298,7297
<7301=7302
<7302=7307,7306,7303
<7303=7305,7304
<7332=7347,7346,7333
<7333=7343,7340,7337,7334
<7334=7336,7335
<7337=7339,7338
<7340=7342,7341
<7343=7345,7344
<7347=7427,7426,7425,7424,7423,7422,7421,7420,7419,7418,7417,7416,7415,7414,7413,7412,7411,7410,7409,7408,7407,7406,7405,7404,7403,7402,7401,7400,7399,7398,7397,7396,7350,7348
<7348=7349
<7350=7351
<7351=7395,7352
<7352=7392,7353
<7353=7382,7354
<7354=7372,7355
<7355=7362,7356
<7356=7358,7357
<7358=7359
<7359=7361,7360
<7362=7368,7363
<7363=7366,7364
<7364=7365
<7366=7367
<7368=7369
<7369=7371,7370
<7372=7378,7373
<7373=7376,7374
<7374=7375
<7376=7377
<7378=7379
<7379=7381,7380
<7382=7388,7383
<7383=7386,7384
<7384=7385
<7386=7387
<7388=7389
<7389=7391,7390
<7392=7394,7393
<7427=7428
<7428=7433,7432,7429
<7429=7431,7430
<7450=7465,7464,7451
<7451=7461,7458,7455,7452
<7452=7454,7453
<7455=7457,7456
<7458=7460,7459
<7461=7463,7462
<7465=7782,7781,7780,7779,7778,7777,7776,7775,7774,7773,7772,7771,7770,7769,7756,7468,7466
<7466=7467
<7468=7754,7469
<7469=7750,7746,7739,7732,7470
<7470=7719,7471
<7471=7708,7472
<7472=7704,7585,7473
<7473=7474
<7474=7581,7570,7551,7530,7526,7506,7486,7475
<7475=7476
<7476=7480,7477
<7477=7478
<7478=7479
<7480=7481
<7481=7483,7482
<7483=7485,7484
<7486=7487
<7487=7504,7488
<7488=7498,7489
<7489=7490
<7490=7496,7491
<7491=7492
<7492=7493
<7493=7495,7494
<7496=7497
<7498=7499
<7499=7501,7500
<7501=7503,7502
<7504=7505
<7506=7507
<7507=7524,7508
<7508=7518,7509
<7509=7510
<7510=7516,7511
<7511=7512
<7512=7513
<7513=7515,7514
<7516=7517
<7518=7519
<7519=7521,7520
<7521=7523,7522
<7524=7525
<7526=7527
<7527=7529,7528
<7530=7531
<7531=7550,7549,7532
<7532=7548,7533
<7533=7546,7534
<7534=7537,7535
<7535=7536
<7537=7538
<7538=7540,7539
<7540=7541
<7541=7543,7542
<7543=7545,7544
<7546=7547
<7551=7552
<7552=7569,7568,7553
<7553=7567,7554
<7554=7565,7555
<7555=7558,7556
<7556=7557
<7558=7559
<7559=7561,7560
<7561=7562
<7562=7564,7563
<7565=7566
<7570=7571
<7571=7577,7572
<7572=7575,7573
<7573=7574
<7575=7576
<7577=7578
<7578=7580,7579
<7581=7582
<7582=7584,7583
<7585=7693,7682,7678,7586
<7586=7661,7619,7587
<7587=7588
<7588=7618,7617,7616,7615,7614,7613,7612,7611,7610,7609,7608,7607,7596,7589
<7589=7590
<7590=7594,7591
<7591=7592
<7592=7593
<7594=7595
<7596=7597
<7597=7599,7598
<7599=7601,7600
<7601=7603,7602
<7603=7604
<7604=7606,7605
<7619=7652,7648,7642,7631,7620
<7620=7621
<7621=7625,7622
<7622=7623
<7623=7624
<7625=7626
<7626=7628,7627
<7628=7630,7629
<7631=7632
<7632=7640,7633
<7633=7636,7634
<7634=7635
<7636=7637
<7637=7639,7638
<7640=7641
<7642=7643
<7643=7645,7644
<7645=7647,7646
<7648=7649
<7649=7651,7650
<7652=7653
<7653=7657,7654
<7654=7655
<7655=7656
<7657=7658
<7658=7660,7659
<7661=7662
<7662=7677,7663
<7663=7673,7664
<7664=7671,7669,7667,7665
<7665=7666
<7667=7668
<7669=7670
<7671=7672
<7673=7674
<7674=7676,7675
<7678=7679
<7679=7681,7680
<7682=7683
<7683=7689,7684
<7684=7687,7685
<7685=7686
<7687=7688
<7689=7690
<7690=7692,7691
<7693=7694
<7694=7700,7695
<7695=7698,7696
<7696=7697
<7698=7699
<7700=7701
<7701=7703,7702
<7704=7705
<7705=7707,7706
<7708=7709
<7709=7715,7710
<7710=7713,7711
<7711=7712
<7713=7714
<7715=7716
<7716=7718,7717
<7719=7720
<7720=7731,7721
<7721=7723,7722
<7723=7730,7724
<7724=7726,7725
<7726=7727
<7727=7729,7728
<7732=7733
<7733=7738,7737,7734
<7734=7736,7735
<7739=7740
<7740=7745,7744,7741
<7741=7743,7742
<7746=7747
<7747=7749,7748
<7750=7751
<7751=7753,7752
<7754=7755
<7756=7757
<7757=7768,7758
<7758=7765,7759
<7759=7761,7760
<7761=7762
<7762=7764,7763
<7765=7767,7766
<7782=7783
<7783=7788,7787,7784
<7784=7786,7785
<7830=7851,7850,7831
<7831=7847,7844,7841,7838,7835,7832
<7832=7834,7833
<7835=7837,7836
<7838=7840,7839
<7841=7843,7842
<7844=7846,7845
<7847=7849,7848
<7851=7926,7915,7904,7893,7882,7854,7852
<7852=7853
<7854=7855
<7855=7881,7856
<7856=7869,7857
<7857=7867,7858
<7858=7865,7863,7861,7859
<7859=7860
<7861=7862
<7863=7864
<7865=7866
<7867=7868
<7869=7879,7870
<7870=7877,7875,7873,7871
<7871=7872
<7873=7874
<7875=7876
<7877=7878
<7879=7880
<7882=7883
<7883=7887,7884
<7884=7885
<7885=7886
<7887=7888
<7888=7890,7889
<7890=7892,7891
<7893=7894
<7894=7898,7895
<7895=7896
<7896=7897
<7898=7899
<7899=7901,7900
<7901=7903,7902
<7904=7905
<7905=7909,7906
<7906=7907
<7907=7908
<7909=7910
<7910=7912,7911
<7912=7914,7913
<7915=7916
<7916=7920,7917
<7917=7918
<7918=7919
<7920=7921
<7921=7923,7922
<7923=7925,7924
<7926=7927
<7927=7932,7931,7928
<7928=7930,7929
<7949=7955,7954,7950
<7950=7951
<7951=7953,7952
<7955=8272,8265,8138,7958,7956
<7956=7957
<7958=8132,7959
<7959=8131,8130,8129,8128,8127,8126,8125,8124,8123,8122,8121,8120,8119,8118,8117,8116,8115,8114,8113,8112,8111,8110,8109,8108,8107,8106,8105,8104,8103,7960,8020,8043,8056,8057,8058,8059,8060,8061,8062,8063,8064,8065,8066,8067,8068,8069,8070,8071,8072,8073,8074,8075,8076,8077,8078,8079,8080,8081,8082,8083,8084,8085,8086,8087,8088,8089,8090,8091,8092,8093,8094,8095,8096,8097,8098,8099,8100,8101,8102
<7960=8018,7961
<7961=8014,8003,7997,7962
<7962=7991,7963
<7963=7964
<7964=7965
<7965=7990,7966
<7966=7980,7967
<7967=7974,7968
<7968=7970,7969
<7970=7971
<7971=7973,7972
<7974=7976,7975
<7976=7977
<7977=7979,7978
<7980=7986,7981
<7981=7984,7982
<7982=7983
<7984=7985
<7986=7987
<7987=7989,7988
<7991=7992
<7992=7996,7993
<7993=7995,7994
<7997=7998
<7998=8002,7999
<7999=8001,8000
<8003=8004
<8004=8013,8005
<8005=8009,8006
<8006=8007
<8007=8008
<8009=8010
<8010=8012,8011
<8014=8015
<8015=8017,8016
<8018=8019
<8020=8021
<8021=8042,8022
<8022=8041,8023
<8023=8038,8024
<8024=8035,8025
<8025=8032,8026
<8026=8028,8027
<8028=8029
<8029=8031,8030
<8032=8034,8033
<8035=8037,8036
<8038=8040,8039
<8043=8044
<8044=8055,8045
<8045=8052,8046
<8046=8048,8047
<8048=8049
<8049=8051,8050
<8052=8054,8053
<8132=8133
<8133=8137,8134
<8134=8136,8135
<8138=8264,8263,8262,8261,8260,8259,8258,8257,8256,8255,8254,8253,8252,8239,8206,8139
<8139=8200,8140
<8140=8199,8198,8197,8196,8195,8194,8193,8192,8191,8190,8189,8188,8187,8174,8141
<8141=8172,8142
<8142=8160,8143
<8143=8156,8144
<8144=8152,8145
<8145=8146
<8146=8148,8147
<8148=8149
<8149=8151,8150
<8152=8153
<8153=8155,8154
<8156=8157
<8157=8159,8158
<8160=8161
<8161=8171,8170,8162
<8162=8169,8163
<8163=8165,8164
<8165=8166
<8166=8168,8167
<8172=8173
<8174=8175
<8175=8186,8176
<8176=8183,8177
<8177=8179,8178
<8179=8180
<8180=8182,8181
<8183=8185,8184
<8200=8201
<8201=8205,8202
<8202=8204,8203
<8206=8237,8207
<8207=8225,8208
<8208=8221,8209
<8209=8217,8210
<8210=8211
<8211=8213,8212
<8213=8214
<8214=8216,8215
<8217=8218
<8218=8220,8219
<8221=8222
<8222=8224,8223
<8225=8226
<8226=8236,8235,8227
<8227=8234,8228
<8228=8230,8229
<8230=8231
<8231=8233,8232
<8237=8238
<8239=8240
<8240=8251,8241
<8241=8248,8242
<8242=8244,8243
<8244=8245
<8245=8247,8246
<8248=8250,8249
<8265=8266
<8266=8271,8270,8267
<8267=8269,8268
<8272=8273
<8273=8278,8277,8274
<8274=8276,8275
<8310=8322,8321,8311
<8311=8318,8315,8312
<8312=8314,8313
<8315=8317,8316
<8318=8320,8319
<8322=8474,8473,8472,8471,8470,8469,8468,8467,8466,8465,8464,8463,8462,8461,8437,8347,8325,8323
<8323=8324
<8325=8343,8326
<8326=8334,8327
<8327=8328
<8328=8332,8329
<8329=8330
<8330=8331
<8332=8333
<8334=8335
<8335=8342,8341,8336
<8336=8340,8337
<8337=8339,8338
<8343=8344
<8344=8346,8345
<8347=8435,8348
<8348=8423,8349
<8349=8419,8400,8350
<8350=8351
<8351=8399,8398,8397,8396,8395,8394,8393,8392,8391,8390,8389,8365,8352
<8352=8363,8353
<8353=8354
<8354=8355
<8355=8362,8356
<8356=8358,8357
<8358=8359
<8359=8361,8360
<8363=8364
<8365=8366
<8366=8388,8367
<8367=8385,8368
<8368=8375,8369
<8369=8371,8370
<8371=8372
<8372=8374,8373
<8375=8381,8376
<8376=8379,8377
<8377=8378
<8379=8380
<8381=8382
<8382=8384,8383
<8385=8387,8386
<8400=8408,8401
<8401=8402
<8402=8404,8403
<8404=8405
<8405=8407,8406
<8408=8409
<8409=8415,8410
<8410=8413,8411
<8411=8412
<8413=8414
<8415=8416
<8416=8418,8417
<8419=8420
<8420=8422,8421
<8423=8424
<8424=8434,8433,8425
<8425=8432,8426
<8426=8428,8427
<8428=8429
<8429=8431,8430
<8435=8436
<8437=8438
<8438=8460,8439
<8439=8457,8440
<8440=8447,8441
<8441=8443,8442
<8443=8444
<8444=8446,8445
<8447=8453,8448
<8448=8451,8449
<8449=8450
<8451=8452
<8453=8454
<8454=8456,8455
<8457=8459,8458
<8474=8475
<8475=8480,8479,8476
<8476=8478,8477
<8498=8504,8503,8499
<8499=8500
<8500=8502,8501
<8504=8548,8547,8546,8545,8544,8543,8542,8541,8540,8539,8538,8537,8536,8535,8534,8533,8532,8531,8530,8529,8528,8527,8526,8525,8524,8523,8522,8521,8520,8507,8505
<8505=8506
<8507=8508
<8508=8519,8509
<8509=8516,8510
<8510=8512,8511
<8512=8513
<8513=8515,8514
<8516=8518,8517
<8548=8549
<8549=8554,8553,8550
<8550=8552,8551
