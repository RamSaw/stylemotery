>12	FunctionDef	BtsApi 
>13	ParameterList	QObject * parent
>14	Parameter	 
>15	Identifier	parent
>16	ParameterType	QObject *
>17	CompoundStatement	 
>18	ExpressionStatement	 
>19	CallExpression	init ( )
>20	ArgumentList	 
>21	Callee	init
>22	Identifier	init
>23	ExpressionStatement	 
>24	AssignmentExpr	p = new BtsApi_private ( )
>25	UnaryExpression	new BtsApi_private ( )
>26	Identifier	p
>32	FunctionDef	BtsApi 
>33	ParameterList	BtsClient * client , QObject * parent
>34	Parameter	 
>35	Identifier	parent
>36	ParameterType	QObject *
>37	Parameter	 
>38	Identifier	client
>39	ParameterType	BtsClient *
>40	CompoundStatement	 
>41	ExpressionStatement	 
>42	CallExpression	init ( )
>43	ArgumentList	 
>44	Callee	init
>45	Identifier	init
>46	ExpressionStatement	 
>47	AssignmentExpr	p -> client = client
>48	Identifier	client
>49	PtrMemberAccess	p -> client
>50	Identifier	client
>51	Identifier	p
>52	ExpressionStatement	 
>53	AssignmentExpr	p = new BtsApi_private ( )
>54	UnaryExpression	new BtsApi_private ( )
>55	Identifier	p
>64	FunctionDef	BtsApi 
>65	ParameterList	 
>66	ReturnType	void
>67	CompoundStatement	 
>68	ExpressionStatement	 
>69	Statement	 
>70	CompoundStatement	 
>71	ExpressionStatement	 
>72	CallExpression	reply -> deleteLater ( )
>73	ArgumentList	 
>74	Callee	reply -> deleteLater
>75	PtrMemberAccess	reply -> deleteLater
>76	Identifier	deleteLater
>77	Identifier	reply
>78	Statement	 
>79	Statement	 
>80	Statement	 
>81	Statement	 
>82	Statement	 
>83	Statement	 
>84	Statement	 
>85	Statement	 
>86	Statement	 
>87	Statement	 
>88	Statement	 
>89	Statement	 
>90	Statement	 
>91	Statement	 
>92	Statement	 
>93	Statement	 
>94	Statement	 
>95	Statement	 
>96	ExpressionStatement	 
>97	AssignmentExpr	p -> nam = new QNetworkAccessManager ( this )
>98	Identifier	this
>99	PtrMemberAccess	p -> nam
>100	Identifier	nam
>101	Identifier	p
>110	FunctionDef	BtsApi 
>111	ParameterList	 
>112	CompoundStatement	 
>113	ExpressionStatement	 
>114	Identifier	p
>115	Statement	 
>119	FunctionDef	BtsApi 
>120	ParameterList	BtsClient * client
>121	Parameter	 
>122	Identifier	client
>123	ParameterType	BtsClient *
>124	ReturnType	void
>125	CompoundStatement	 
>126	ExpressionStatement	 
>127	AssignmentExpr	p -> client = client
>128	Identifier	client
>129	PtrMemberAccess	p -> client
>130	Identifier	client
>131	Identifier	p
>139	FunctionDef	BtsApi 
>140	ParameterList	 
>141	ReturnType	BtsClient *
>142	CompoundStatement	 
>143	ReturnStatement	 
>144	PtrMemberAccess	p -> client
>145	Identifier	client
>146	Identifier	p
>153	FunctionDef	BtsApi 
>154	ParameterList	QNetworkReply * reply , BtsApiNotifier * notifier
>155	Parameter	 
>156	Identifier	notifier
>157	ParameterType	BtsApiNotifier *
>158	Parameter	 
>159	Identifier	reply
>160	ParameterType	QNetworkReply *
>161	ReturnType	bool
>162	CompoundStatement	 
>163	ReturnStatement	 
>164	Identifier	false
>165	IfStatement	if ( reply -> error ( ) != QNetworkReply 
>166	CompoundStatement	 
>167	ReturnStatement	 
>168	Identifier	true
>169	ExpressionStatement	 
>170	CallExpression	notifier -> error ( err )
>171	ArgumentList	err
>172	Argument	err
>173	Identifier	err
>174	Callee	notifier -> error
>175	PtrMemberAccess	notifier -> error
>176	Identifier	error
>177	Identifier	notifier
>178	Statement	 
>179	IdentifierDeclStatement	 
>180	IdentifierDecl	error ( err )
>181	Identifier	err
>182	Identifier	error
>183	IdentifierDeclType	emit
>184	IdentifierDeclStatement	 
>185	IdentifierDecl	err = QString ( \"Network request to BTSync failed
>186	AssignmentExpr	err = QString ( \"Network request to BTSync failed
>187	CallExpression	QString ( \"Network request to BTSync failed
>188	ArgumentList	reply -> errorString ( )
>189	Argument	reply -> errorString ( )
>190	CallExpression	reply -> errorString ( )
>191	ArgumentList	 
>192	Callee	reply -> errorString
>193	PtrMemberAccess	reply -> errorString
>194	Identifier	errorString
>195	Identifier	reply
>196	Callee	QString ( \"Network request to BTSync failed
>197	MemberAccess	QString ( \"Network request to BTSync failed
>198	Identifier	arg
>199	CallExpression	QString ( \"Network request to BTSync failed
>200	ArgumentList	\"Network request to BTSync failed
>201	Argument	\"Network request to BTSync failed
>202	PrimaryExpression	\"Network request to BTSync failed
>203	Callee	QString
>204	Identifier	QString
>205	Identifier	err
>206	Identifier	err
>207	IdentifierDeclType	QString
>208	Condition	 
>209	EqualityExpression	reply -> error ( ) != QNetworkReply 
>210	Identifier	QNetworkReply 
>211	CallExpression	reply -> error ( )
>212	ArgumentList	 
>213	Callee	reply -> error
>214	PtrMemberAccess	reply -> error
>215	Identifier	error
>216	Identifier	reply
>232	FunctionDef	BtsApi 
>233	ParameterList	const QJsonDocument & doc , BtsApiNotifier * notifier
>234	Parameter	 
>235	Identifier	notifier
>236	ParameterType	BtsApiNotifier *
>237	Parameter	 
>238	Identifier	doc
>239	ParameterType	const QJsonDocument &
>240	ReturnType	bool
>241	CompoundStatement	 
>242	ReturnStatement	 
>243	Identifier	true
>244	ExpressionStatement	 
>245	CallExpression	notifier -> error ( errorString )
>246	ArgumentList	errorString
>247	Argument	errorString
>248	Identifier	errorString
>249	Callee	notifier -> error
>250	PtrMemberAccess	notifier -> error
>251	Identifier	error
>252	Identifier	notifier
>253	Statement	 
>254	IdentifierDeclStatement	 
>255	IdentifierDecl	error ( errorString )
>256	Identifier	errorString
>257	Identifier	error
>258	IdentifierDeclType	emit
>259	ExpressionStatement	 
>260	AssignmentExpr	errorString = QString ( \"BTSync error %1
>261	CallExpression	QString ( \"BTSync error %1
>262	ArgumentList	errorString
>263	Argument	errorString
>264	Identifier	errorString
>265	Callee	QString ( \"BTSync error %1
>266	MemberAccess	QString ( \"BTSync error %1
>267	Identifier	arg
>268	CallExpression	QString ( \"BTSync error %1
>269	ArgumentList	errorCode
>270	Argument	errorCode
>271	Identifier	errorCode
>272	Callee	QString ( \"BTSync error %1
>273	MemberAccess	QString ( \"BTSync error %1
>274	Identifier	arg
>275	CallExpression	QString ( \"BTSync error %1
>276	ArgumentList	\"BTSync error %1
>277	Argument	\"BTSync error %1
>278	PrimaryExpression	\"BTSync error %1
>279	Callee	QString
>280	Identifier	QString
>281	Identifier	errorString
>282	IdentifierDeclStatement	 
>283	IdentifierDecl	errorString = obj . value ( \"message\" ) . toString ( \"no error message\" )
>284	AssignmentExpr	errorString = obj . value ( \"message\" ) . toString ( \"no error message\" )
>285	CallExpression	obj . value ( \"message\" ) . toString ( \"no error message\" )
>286	ArgumentList	\"no error message\"
>287	Argument	\"no error message\"
>288	PrimaryExpression	\"no error message\"
>289	Callee	obj . value ( \"message\" ) . toString
>290	MemberAccess	obj . value ( \"message\" ) . toString
>291	Identifier	toString
>292	CallExpression	obj . value ( \"message\" )
>293	ArgumentList	\"message\"
>294	Argument	\"message\"
>295	PrimaryExpression	\"message\"
>296	Callee	obj . value
>297	MemberAccess	obj . value
>298	Identifier	value
>299	Identifier	obj
>300	Identifier	errorString
>301	Identifier	errorString
>302	IdentifierDeclType	QString
>303	IfStatement	if ( errorCode == 0 )
>304	ReturnStatement	 
>305	Identifier	false
>306	Condition	 
>307	EqualityExpression	errorCode == 0
>308	PrimaryExpression	0
>309	Identifier	errorCode
>310	IdentifierDeclStatement	 
>311	IdentifierDecl	errorCode = obj . value ( \"error\" ) . toInt ( 0 )
>312	AssignmentExpr	errorCode = obj . value ( \"error\" ) . toInt ( 0 )
>313	CallExpression	obj . value ( \"error\" ) . toInt ( 0 )
>314	ArgumentList	0
>315	Argument	0
>316	PrimaryExpression	0
>317	Callee	obj . value ( \"error\" ) . toInt
>318	MemberAccess	obj . value ( \"error\" ) . toInt
>319	Identifier	toInt
>320	CallExpression	obj . value ( \"error\" )
>321	ArgumentList	\"error\"
>322	Argument	\"error\"
>323	PrimaryExpression	\"error\"
>324	Callee	obj . value
>325	MemberAccess	obj . value
>326	Identifier	value
>327	Identifier	obj
>328	Identifier	errorCode
>329	Identifier	errorCode
>330	IdentifierDeclType	int
>331	IdentifierDeclStatement	 
>332	IdentifierDecl	obj = doc . object ( )
>333	AssignmentExpr	obj = doc . object ( )
>334	CallExpression	doc . object ( )
>335	ArgumentList	 
>336	Callee	doc . object
>337	MemberAccess	doc . object
>338	Identifier	object
>339	Identifier	doc
>340	Identifier	obj
>341	Identifier	obj
>342	IdentifierDeclType	QJsonObject
>361	FunctionDef	assertClient (BtsApi_private * p)
>362	ParameterList	BtsApi_private * p
>363	Parameter	 
>364	Identifier	p
>365	ParameterType	BtsApi_private *
>366	ReturnType	static void
>367	CompoundStatement	 
>368	ExpressionStatement	 
>369	CallExpression	BtsException ( \"Tried to make an api call without setting a client\" )
>370	ArgumentList	\"Tried to make an api call without setting a client\"
>371	Argument	\"Tried to make an api call without setting a client\"
>372	PrimaryExpression	\"Tried to make an api call without setting a client\"
>373	Callee	BtsException
>374	Identifier	BtsException
>375	IfStatement	if ( p -> client . isNull ( ) )
>376	Statement	 
>377	Condition	 
>378	CallExpression	p -> client . isNull ( )
>379	ArgumentList	 
>380	Callee	p -> client . isNull
>381	MemberAccess	p -> client . isNull
>382	Identifier	isNull
>383	PtrMemberAccess	p -> client
>384	Identifier	client
>385	Identifier	p
>397	FunctionDef	BtsApi 
>398	ParameterList	const QString & secret
>399	Parameter	 
>400	Identifier	secret
>401	ParameterType	const QString &
>402	ReturnType	BtsApiNotifier *
>403	CompoundStatement	 
>404	ReturnStatement	 
>405	Identifier	notifier
>406	ExpressionStatement	 
>407	Statement	 
>408	CompoundStatement	 
>409	ExpressionStatement	 
>410	CallExpression	notifier -> getFoldersResult ( res , secret )
>411	ArgumentList	res
>412	Argument	secret
>413	Identifier	secret
>414	Argument	res
>415	Identifier	res
>416	Callee	notifier -> getFoldersResult
>417	PtrMemberAccess	notifier -> getFoldersResult
>418	Identifier	getFoldersResult
>419	Identifier	notifier
>420	Statement	 
>421	IdentifierDeclStatement	 
>422	IdentifierDecl	getFoldersResult ( res , secret )
>423	Expression	res , secret
>424	Identifier	secret
>425	Identifier	res
>426	Identifier	getFoldersResult
>427	IdentifierDeclType	emit
>428	CompoundStatement	 
>429	ExpressionStatement	 
>430	ShiftExpression	res << resObj
>431	Identifier	resObj
>432	Identifier	res
>433	ExpressionStatement	 
>434	AssignmentExpr	resObj . indexing = folderObj . value ( \"indexing\" ) . toInt ( )
>435	CallExpression	folderObj . value ( \"indexing\" ) . toInt ( )
>436	ArgumentList	 
>437	Callee	folderObj . value ( \"indexing\" ) . toInt
>438	MemberAccess	folderObj . value ( \"indexing\" ) . toInt
>439	Identifier	toInt
>440	CallExpression	folderObj . value ( \"indexing\" )
>441	ArgumentList	\"indexing\"
>442	Argument	\"indexing\"
>443	PrimaryExpression	\"indexing\"
>444	Callee	folderObj . value
>445	MemberAccess	folderObj . value
>446	Identifier	value
>447	Identifier	folderObj
>448	MemberAccess	resObj . indexing
>449	Identifier	indexing
>450	Identifier	resObj
>451	ExpressionStatement	 
>452	AssignmentExpr	resObj . error = folderObj . value ( \"error\" ) . toInt ( )
>453	CallExpression	folderObj . value ( \"error\" ) . toInt ( )
>454	ArgumentList	 
>455	Callee	folderObj . value ( \"error\" ) . toInt
>456	MemberAccess	folderObj . value ( \"error\" ) . toInt
>457	Identifier	toInt
>458	CallExpression	folderObj . value ( \"error\" )
>459	ArgumentList	\"error\"
>460	Argument	\"error\"
>461	PrimaryExpression	\"error\"
>462	Callee	folderObj . value
>463	MemberAccess	folderObj . value
>464	Identifier	value
>465	Identifier	folderObj
>466	MemberAccess	resObj . error
>467	Identifier	error
>468	Identifier	resObj
>469	ExpressionStatement	 
>470	AssignmentExpr	resObj . files = folderObj . value ( \"files\" ) . toVariant ( ) . toLongLong ( )
>471	CallExpression	folderObj . value ( \"files\" ) . toVariant ( ) . toLongLong ( )
>472	ArgumentList	 
>473	Callee	folderObj . value ( \"files\" ) . toVariant ( ) . toLongLong
>474	MemberAccess	folderObj . value ( \"files\" ) . toVariant ( ) . toLongLong
>475	Identifier	toLongLong
>476	CallExpression	folderObj . value ( \"files\" ) . toVariant ( )
>477	ArgumentList	 
>478	Callee	folderObj . value ( \"files\" ) . toVariant
>479	MemberAccess	folderObj . value ( \"files\" ) . toVariant
>480	Identifier	toVariant
>481	CallExpression	folderObj . value ( \"files\" )
>482	ArgumentList	\"files\"
>483	Argument	\"files\"
>484	PrimaryExpression	\"files\"
>485	Callee	folderObj . value
>486	MemberAccess	folderObj . value
>487	Identifier	value
>488	Identifier	folderObj
>489	MemberAccess	resObj . files
>490	Identifier	files
>491	Identifier	resObj
>492	ExpressionStatement	 
>493	AssignmentExpr	resObj . type = folderObj . value ( \"type\" ) . toString ( )
>494	CallExpression	folderObj . value ( \"type\" ) . toString ( )
>495	ArgumentList	 
>496	Callee	folderObj . value ( \"type\" ) . toString
>497	MemberAccess	folderObj . value ( \"type\" ) . toString
>498	Identifier	toString
>499	CallExpression	folderObj . value ( \"type\" )
>500	ArgumentList	\"type\"
>501	Argument	\"type\"
>502	PrimaryExpression	\"type\"
>503	Callee	folderObj . value
>504	MemberAccess	folderObj . value
>505	Identifier	value
>506	Identifier	folderObj
>507	MemberAccess	resObj . type
>508	Identifier	type
>509	Identifier	resObj
>510	ExpressionStatement	 
>511	AssignmentExpr	resObj . size = folderObj . value ( \"size\" ) . toVariant ( ) . toLongLong ( )
>512	CallExpression	folderObj . value ( \"size\" ) . toVariant ( ) . toLongLong ( )
>513	ArgumentList	 
>514	Callee	folderObj . value ( \"size\" ) . toVariant ( ) . toLongLong
>515	MemberAccess	folderObj . value ( \"size\" ) . toVariant ( ) . toLongLong
>516	Identifier	toLongLong
>517	CallExpression	folderObj . value ( \"size\" ) . toVariant ( )
>518	ArgumentList	 
>519	Callee	folderObj . value ( \"size\" ) . toVariant
>520	MemberAccess	folderObj . value ( \"size\" ) . toVariant
>521	Identifier	toVariant
>522	CallExpression	folderObj . value ( \"size\" )
>523	ArgumentList	\"size\"
>524	Argument	\"size\"
>525	PrimaryExpression	\"size\"
>526	Callee	folderObj . value
>527	MemberAccess	folderObj . value
>528	Identifier	value
>529	Identifier	folderObj
>530	MemberAccess	resObj . size
>531	Identifier	size
>532	Identifier	resObj
>533	ExpressionStatement	 
>534	AssignmentExpr	resObj . secret = folderObj . value ( \"secret\" ) . toString ( )
>535	CallExpression	folderObj . value ( \"secret\" ) . toString ( )
>536	ArgumentList	 
>537	Callee	folderObj . value ( \"secret\" ) . toString
>538	MemberAccess	folderObj . value ( \"secret\" ) . toString
>539	Identifier	toString
>540	CallExpression	folderObj . value ( \"secret\" )
>541	ArgumentList	\"secret\"
>542	Argument	\"secret\"
>543	PrimaryExpression	\"secret\"
>544	Callee	folderObj . value
>545	MemberAccess	folderObj . value
>546	Identifier	value
>547	Identifier	folderObj
>548	MemberAccess	resObj . secret
>549	Identifier	secret
>550	Identifier	resObj
>551	ExpressionStatement	 
>552	AssignmentExpr	resObj . dir = folderObj . value ( \"dir\" ) . toString ( )
>553	CallExpression	folderObj . value ( \"dir\" ) . toString ( )
>554	ArgumentList	 
>555	Callee	folderObj . value ( \"dir\" ) . toString
>556	MemberAccess	folderObj . value ( \"dir\" ) . toString
>557	Identifier	toString
>558	CallExpression	folderObj . value ( \"dir\" )
>559	ArgumentList	\"dir\"
>560	Argument	\"dir\"
>561	PrimaryExpression	\"dir\"
>562	Callee	folderObj . value
>563	MemberAccess	folderObj . value
>564	Identifier	value
>565	Identifier	folderObj
>566	MemberAccess	resObj . dir
>567	Identifier	dir
>568	Identifier	resObj
>569	IdentifierDeclStatement	 
>570	IdentifierDecl	resObj
>571	Identifier	resObj
>572	IdentifierDeclType	BtsGetFoldersResult
>573	IfStatement	if ( folderObj . isEmpty ( ) )
>574	CompoundStatement	 
>575	ReturnStatement	 
>576	IdentifierDeclStatement	 
>577	IdentifierDecl	error ( \"Got an unexpected get_folders reply format\" )
>578	PrimaryExpression	\"Got an unexpected get_folders reply format\"
>579	Identifier	error
>580	IdentifierDeclType	emit
>581	Condition	 
>582	CallExpression	folderObj . isEmpty ( )
>583	ArgumentList	 
>584	Callee	folderObj . isEmpty
>585	MemberAccess	folderObj . isEmpty
>586	Identifier	isEmpty
>587	Identifier	folderObj
>588	IdentifierDeclStatement	 
>589	IdentifierDecl	folderObj = val . toObject ( )
>590	AssignmentExpr	folderObj = val . toObject ( )
>591	CallExpression	val . toObject ( )
>592	ArgumentList	 
>593	Callee	val . toObject
>594	MemberAccess	val . toObject
>595	Identifier	toObject
>596	Identifier	val
>597	Identifier	folderObj
>598	Identifier	folderObj
>599	IdentifierDeclType	QJsonObject
>600	Statement	 
>601	Statement	 
>602	Label	 
>603	Identifier	val
>604	Statement	 
>605	Statement	 
>606	Statement	 
>607	Statement	 
>608	Statement	 
>609	ExpressionStatement	 
>610	CallExpression	res . reserve ( arr . size ( ) )
>611	ArgumentList	arr . size ( )
>612	Argument	arr . size ( )
>613	CallExpression	arr . size ( )
>614	ArgumentList	 
>615	Callee	arr . size
>616	MemberAccess	arr . size
>617	Identifier	size
>618	Identifier	arr
>619	Callee	res . reserve
>620	MemberAccess	res . reserve
>621	Identifier	reserve
>622	Identifier	res
>623	IdentifierDeclStatement	 
>624	IdentifierDecl	res
>625	Identifier	res
>626	IdentifierDeclType	QVector < BtsGetFoldersResult >
>627	IdentifierDeclStatement	 
>628	IdentifierDecl	arr = doc . array ( )
>629	AssignmentExpr	arr = doc . array ( )
>630	CallExpression	doc . array ( )
>631	ArgumentList	 
>632	Callee	doc . array
>633	MemberAccess	doc . array
>634	Identifier	array
>635	Identifier	doc
>636	Identifier	arr
>637	Identifier	arr
>638	IdentifierDeclType	QJsonArray
>639	IfStatement	if ( checkForError ( doc , notifier ) )
>640	ReturnStatement	 
>641	Condition	 
>642	CallExpression	checkForError ( doc , notifier )
>643	ArgumentList	doc
>644	Argument	notifier
>645	Identifier	notifier
>646	Argument	doc
>647	Identifier	doc
>648	Callee	checkForError
>649	Identifier	checkForError
>650	IdentifierDeclStatement	 
>651	IdentifierDecl	doc = QJsonDocument 
>652	AssignmentExpr	doc = QJsonDocument 
>653	CallExpression	QJsonDocument 
>654	ArgumentList	reply -> readAll ( )
>655	Argument	reply -> readAll ( )
>656	CallExpression	reply -> readAll ( )
>657	ArgumentList	 
>658	Callee	reply -> readAll
>659	PtrMemberAccess	reply -> readAll
>660	Identifier	readAll
>661	Identifier	reply
>662	Callee	QJsonDocument 
>663	Identifier	QJsonDocument 
>664	Identifier	doc
>665	Identifier	doc
>666	IdentifierDeclType	QJsonDocument
>667	IfStatement	if ( checkForError ( reply , notifier ) )
>668	ReturnStatement	 
>669	Condition	 
>670	CallExpression	checkForError ( reply , notifier )
>671	ArgumentList	reply
>672	Argument	notifier
>673	Identifier	notifier
>674	Argument	reply
>675	Identifier	reply
>676	Callee	checkForError
>677	Identifier	checkForError
>678	ExpressionStatement	 
>679	CallExpression	notifier -> deleteLater ( )
>680	ArgumentList	 
>681	Callee	notifier -> deleteLater
>682	PtrMemberAccess	notifier -> deleteLater
>683	Identifier	deleteLater
>684	Identifier	notifier
>685	Statement	 
>686	Statement	 
>687	Statement	 
>688	Statement	 
>689	Statement	 
>690	Statement	 
>691	Statement	 
>692	Statement	 
>693	Statement	 
>694	Statement	 
>695	Statement	 
>696	Statement	 
>697	Statement	 
>698	Statement	 
>699	Statement	 
>700	Statement	 
>701	Statement	 
>702	Statement	 
>703	Statement	 
>704	Statement	 
>705	IdentifierDeclStatement	 
>706	IdentifierDecl	* notifier = new BtsApiNotifier ( this )
>707	AssignmentExpr	* notifier = new BtsApiNotifier ( this )
>708	Identifier	this
>709	Identifier	this
>710	Identifier	notifier
>711	IdentifierDeclType	BtsApiNotifier *
>712	IdentifierDeclStatement	 
>713	IdentifierDecl	* reply = p -> nam -> get ( QNetworkRequest ( apiUrl ) )
>714	AssignmentExpr	* reply = p -> nam -> get ( QNetworkRequest ( apiUrl ) )
>715	CallExpression	p -> nam -> get ( QNetworkRequest ( apiUrl ) )
>716	ArgumentList	QNetworkRequest ( apiUrl )
>717	Argument	QNetworkRequest ( apiUrl )
>718	CallExpression	QNetworkRequest ( apiUrl )
>719	ArgumentList	apiUrl
>720	Argument	apiUrl
>721	Identifier	apiUrl
>722	Callee	QNetworkRequest
>723	Identifier	QNetworkRequest
>724	Callee	p -> nam -> get
>725	PtrMemberAccess	p -> nam -> get
>726	Identifier	get
>727	PtrMemberAccess	p -> nam
>728	Identifier	nam
>729	Identifier	p
>730	Identifier	reply
>731	Identifier	reply
>732	IdentifierDeclType	QNetworkReply *
>733	IdentifierDeclStatement	 
>734	IdentifierDecl	apiUrl = getApiUrl ( p , \"get_folders\" , ql )
>735	AssignmentExpr	apiUrl = getApiUrl ( p , \"get_folders\" , ql )
>736	CallExpression	getApiUrl ( p , \"get_folders\" , ql )
>737	ArgumentList	p
>738	Argument	ql
>739	Identifier	ql
>740	Argument	\"get_folders\"
>741	PrimaryExpression	\"get_folders\"
>742	Argument	p
>743	Identifier	p
>744	Callee	getApiUrl
>745	Identifier	getApiUrl
>746	Identifier	apiUrl
>747	Identifier	apiUrl
>748	IdentifierDeclType	QUrl
>749	IfStatement	if ( ! secret . isEmpty ( ) )
>750	ExpressionStatement	 
>751	ShiftExpression	ql << QueryPair ( \"secret\" , secret )
>752	CallExpression	QueryPair ( \"secret\" , secret )
>753	ArgumentList	\"secret\"
>754	Argument	secret
>755	Identifier	secret
>756	Argument	\"secret\"
>757	PrimaryExpression	\"secret\"
>758	Callee	QueryPair
>759	Identifier	QueryPair
>760	Identifier	ql
>761	Condition	 
>762	UnaryOp	! secret . isEmpty ( )
>763	CallExpression	secret . isEmpty ( )
>764	ArgumentList	 
>765	Callee	secret . isEmpty
>766	MemberAccess	secret . isEmpty
>767	Identifier	isEmpty
>768	Identifier	secret
>769	UnaryOperator	!
>770	IdentifierDeclStatement	 
>771	IdentifierDecl	ql
>772	Identifier	ql
>773	IdentifierDeclType	QueryList
>825	FunctionDef	BtsApi 
>826	ParameterList	const QString & dir , bool selective_sync , const QString & secret
>827	Parameter	 
>828	Identifier	secret
>829	ParameterType	const QString &
>830	Parameter	 
>831	Identifier	selective_sync
>832	ParameterType	bool
>833	Parameter	 
>834	Identifier	dir
>835	ParameterType	const QString &
>836	ReturnType	BtsApiNotifier *
>837	CompoundStatement	 
>838	ReturnStatement	 
>839	Identifier	notifier
>840	ExpressionStatement	 
>841	Statement	 
>842	CompoundStatement	 
>843	ExpressionStatement	 
>844	CallExpression	notifier -> addFolderResult ( )
>845	ArgumentList	 
>846	Callee	notifier -> addFolderResult
>847	PtrMemberAccess	notifier -> addFolderResult
>848	Identifier	addFolderResult
>849	Identifier	notifier
>850	Statement	 
>851	IdentifierDeclStatement	 
>852	IdentifierDecl	addFolderResult ( )
>853	Identifier	addFolderResult
>854	IdentifierDeclType	emit
>855	IfStatement	if ( checkForError ( doc , notifier ) )
>856	ReturnStatement	 
>857	Condition	 
>858	CallExpression	checkForError ( doc , notifier )
>859	ArgumentList	doc
>860	Argument	notifier
>861	Identifier	notifier
>862	Argument	doc
>863	Identifier	doc
>864	Callee	checkForError
>865	Identifier	checkForError
>866	IdentifierDeclStatement	 
>867	IdentifierDecl	doc = QJsonDocument 
>868	AssignmentExpr	doc = QJsonDocument 
>869	CallExpression	QJsonDocument 
>870	ArgumentList	reply -> readAll ( )
>871	Argument	reply -> readAll ( )
>872	CallExpression	reply -> readAll ( )
>873	ArgumentList	 
>874	Callee	reply -> readAll
>875	PtrMemberAccess	reply -> readAll
>876	Identifier	readAll
>877	Identifier	reply
>878	Callee	QJsonDocument 
>879	Identifier	QJsonDocument 
>880	Identifier	doc
>881	Identifier	doc
>882	IdentifierDeclType	QJsonDocument
>883	IfStatement	if ( checkForError ( reply , notifier ) )
>884	ReturnStatement	 
>885	Condition	 
>886	CallExpression	checkForError ( reply , notifier )
>887	ArgumentList	reply
>888	Argument	notifier
>889	Identifier	notifier
>890	Argument	reply
>891	Identifier	reply
>892	Callee	checkForError
>893	Identifier	checkForError
>894	ExpressionStatement	 
>895	CallExpression	notifier -> deleteLater ( )
>896	ArgumentList	 
>897	Callee	notifier -> deleteLater
>898	PtrMemberAccess	notifier -> deleteLater
>899	Identifier	deleteLater
>900	Identifier	notifier
>901	Statement	 
>902	Statement	 
>903	Statement	 
>904	Statement	 
>905	Statement	 
>906	Statement	 
>907	Statement	 
>908	Statement	 
>909	Statement	 
>910	Statement	 
>911	Statement	 
>912	Statement	 
>913	Statement	 
>914	Statement	 
>915	Statement	 
>916	Statement	 
>917	Statement	 
>918	Statement	 
>919	IdentifierDeclStatement	 
>920	IdentifierDecl	* notifier = new BtsApiNotifier ( this )
>921	AssignmentExpr	* notifier = new BtsApiNotifier ( this )
>922	Identifier	this
>923	Identifier	this
>924	Identifier	notifier
>925	IdentifierDeclType	BtsApiNotifier *
>926	IdentifierDeclStatement	 
>927	IdentifierDecl	* reply = p -> nam -> get ( QNetworkRequest ( apiUrl ) )
>928	AssignmentExpr	* reply = p -> nam -> get ( QNetworkRequest ( apiUrl ) )
>929	CallExpression	p -> nam -> get ( QNetworkRequest ( apiUrl ) )
>930	ArgumentList	QNetworkRequest ( apiUrl )
>931	Argument	QNetworkRequest ( apiUrl )
>932	CallExpression	QNetworkRequest ( apiUrl )
>933	ArgumentList	apiUrl
>934	Argument	apiUrl
>935	Identifier	apiUrl
>936	Callee	QNetworkRequest
>937	Identifier	QNetworkRequest
>938	Callee	p -> nam -> get
>939	PtrMemberAccess	p -> nam -> get
>940	Identifier	get
>941	PtrMemberAccess	p -> nam
>942	Identifier	nam
>943	Identifier	p
>944	Identifier	reply
>945	Identifier	reply
>946	IdentifierDeclType	QNetworkReply *
>947	IdentifierDeclStatement	 
>948	IdentifierDecl	apiUrl = getApiUrl ( p , \"add_folder\" , ql )
>949	AssignmentExpr	apiUrl = getApiUrl ( p , \"add_folder\" , ql )
>950	CallExpression	getApiUrl ( p , \"add_folder\" , ql )
>951	ArgumentList	p
>952	Argument	ql
>953	Identifier	ql
>954	Argument	\"add_folder\"
>955	PrimaryExpression	\"add_folder\"
>956	Argument	p
>957	Identifier	p
>958	Callee	getApiUrl
>959	Identifier	getApiUrl
>960	Identifier	apiUrl
>961	Identifier	apiUrl
>962	IdentifierDeclType	QUrl
>963	IfStatement	if ( selective_sync )
>964	ExpressionStatement	 
>965	ShiftExpression	ql << QueryPair ( \"selective_sync\" , \"1\" )
>966	CallExpression	QueryPair ( \"selective_sync\" , \"1\" )
>967	ArgumentList	\"selective_sync\"
>968	Argument	\"1\"
>969	PrimaryExpression	\"1\"
>970	Argument	\"selective_sync\"
>971	PrimaryExpression	\"selective_sync\"
>972	Callee	QueryPair
>973	Identifier	QueryPair
>974	Identifier	ql
>975	Condition	 
>976	Identifier	selective_sync
>977	IfStatement	if ( ! secret . isEmpty ( ) )
>978	ExpressionStatement	 
>979	ShiftExpression	ql << QueryPair ( \"secret\" , secret )
>980	CallExpression	QueryPair ( \"secret\" , secret )
>981	ArgumentList	\"secret\"
>982	Argument	secret
>983	Identifier	secret
>984	Argument	\"secret\"
>985	PrimaryExpression	\"secret\"
>986	Callee	QueryPair
>987	Identifier	QueryPair
>988	Identifier	ql
>989	Condition	 
>990	UnaryOp	! secret . isEmpty ( )
>991	CallExpression	secret . isEmpty ( )
>992	ArgumentList	 
>993	Callee	secret . isEmpty
>994	MemberAccess	secret . isEmpty
>995	Identifier	isEmpty
>996	Identifier	secret
>997	UnaryOperator	!
>998	ExpressionStatement	 
>999	ShiftExpression	ql << QueryPair ( \"dir\" , dir )
>1000	CallExpression	QueryPair ( \"dir\" , dir )
>1001	ArgumentList	\"dir\"
>1002	Argument	dir
>1003	Identifier	dir
>1004	Argument	\"dir\"
>1005	PrimaryExpression	\"dir\"
>1006	Callee	QueryPair
>1007	Identifier	QueryPair
>1008	Identifier	ql
>1009	IdentifierDeclStatement	 
>1010	IdentifierDecl	ql
>1011	Identifier	ql
>1012	IdentifierDeclType	QueryList
>1039	FunctionDef	BtsApi 
>1040	ParameterList	const QString & dir , const QString & secret
>1041	Parameter	 
>1042	Identifier	secret
>1043	ParameterType	const QString &
>1044	Parameter	 
>1045	Identifier	dir
>1046	ParameterType	const QString &
>1047	ReturnType	BtsApiNotifier *
>1048	CompoundStatement	 
>1049	ReturnStatement	 
>1050	CallExpression	addFolder ( dir , false , secret )
>1051	ArgumentList	dir
>1052	Argument	secret
>1053	Identifier	secret
>1054	Argument	false
>1055	Identifier	false
>1056	Argument	dir
>1057	Identifier	dir
>1058	Callee	addFolder
>1059	Identifier	addFolder
>1067	FunctionDef	BtsApi 
>1068	ParameterList	const QString & secret
>1069	Parameter	 
>1070	Identifier	secret
>1071	ParameterType	const QString &
>1072	ReturnType	BtsApiNotifier *
>1073	CompoundStatement	 
>1074	ReturnStatement	 
>1075	Identifier	notifier
>1076	ExpressionStatement	 
>1077	Statement	 
>1078	CompoundStatement	 
>1079	ExpressionStatement	 
>1080	CallExpression	notifier -> removeFolderResult ( secret )
>1081	ArgumentList	secret
>1082	Argument	secret
>1083	Identifier	secret
>1084	Callee	notifier -> removeFolderResult
>1085	PtrMemberAccess	notifier -> removeFolderResult
>1086	Identifier	removeFolderResult
>1087	Identifier	notifier
>1088	Statement	 
>1089	IdentifierDeclStatement	 
>1090	IdentifierDecl	removeFolderResult ( secret )
>1091	Identifier	secret
>1092	Identifier	removeFolderResult
>1093	IdentifierDeclType	emit
>1094	IfStatement	if ( checkForError ( doc , notifier ) )
>1095	ReturnStatement	 
>1096	Condition	 
>1097	CallExpression	checkForError ( doc , notifier )
>1098	ArgumentList	doc
>1099	Argument	notifier
>1100	Identifier	notifier
>1101	Argument	doc
>1102	Identifier	doc
>1103	Callee	checkForError
>1104	Identifier	checkForError
>1105	IdentifierDeclStatement	 
>1106	IdentifierDecl	doc = QJsonDocument 
>1107	AssignmentExpr	doc = QJsonDocument 
>1108	CallExpression	QJsonDocument 
>1109	ArgumentList	reply -> readAll ( )
>1110	Argument	reply -> readAll ( )
>1111	CallExpression	reply -> readAll ( )
>1112	ArgumentList	 
>1113	Callee	reply -> readAll
>1114	PtrMemberAccess	reply -> readAll
>1115	Identifier	readAll
>1116	Identifier	reply
>1117	Callee	QJsonDocument 
>1118	Identifier	QJsonDocument 
>1119	Identifier	doc
>1120	Identifier	doc
>1121	IdentifierDeclType	QJsonDocument
>1122	IfStatement	if ( checkForError ( reply , notifier ) )
>1123	ReturnStatement	 
>1124	Condition	 
>1125	CallExpression	checkForError ( reply , notifier )
>1126	ArgumentList	reply
>1127	Argument	notifier
>1128	Identifier	notifier
>1129	Argument	reply
>1130	Identifier	reply
>1131	Callee	checkForError
>1132	Identifier	checkForError
>1133	ExpressionStatement	 
>1134	CallExpression	notifier -> deleteLater ( )
>1135	ArgumentList	 
>1136	Callee	notifier -> deleteLater
>1137	PtrMemberAccess	notifier -> deleteLater
>1138	Identifier	deleteLater
>1139	Identifier	notifier
>1140	Statement	 
>1141	Statement	 
>1142	Statement	 
>1143	Statement	 
>1144	Statement	 
>1145	Statement	 
>1146	Statement	 
>1147	Statement	 
>1148	Statement	 
>1149	Statement	 
>1150	Statement	 
>1151	Statement	 
>1152	Statement	 
>1153	Statement	 
>1154	Statement	 
>1155	Statement	 
>1156	Statement	 
>1157	Statement	 
>1158	Statement	 
>1159	Statement	 
>1160	IdentifierDeclStatement	 
>1161	IdentifierDecl	* notifier = new BtsApiNotifier ( this )
>1162	AssignmentExpr	* notifier = new BtsApiNotifier ( this )
>1163	Identifier	this
>1164	Identifier	this
>1165	Identifier	notifier
>1166	IdentifierDeclType	BtsApiNotifier *
>1167	IdentifierDeclStatement	 
>1168	IdentifierDecl	* reply = p -> nam -> get ( QNetworkRequest ( apiUrl ) )
>1169	AssignmentExpr	* reply = p -> nam -> get ( QNetworkRequest ( apiUrl ) )
>1170	CallExpression	p -> nam -> get ( QNetworkRequest ( apiUrl ) )
>1171	ArgumentList	QNetworkRequest ( apiUrl )
>1172	Argument	QNetworkRequest ( apiUrl )
>1173	CallExpression	QNetworkRequest ( apiUrl )
>1174	ArgumentList	apiUrl
>1175	Argument	apiUrl
>1176	Identifier	apiUrl
>1177	Callee	QNetworkRequest
>1178	Identifier	QNetworkRequest
>1179	Callee	p -> nam -> get
>1180	PtrMemberAccess	p -> nam -> get
>1181	Identifier	get
>1182	PtrMemberAccess	p -> nam
>1183	Identifier	nam
>1184	Identifier	p
>1185	Identifier	reply
>1186	Identifier	reply
>1187	IdentifierDeclType	QNetworkReply *
>1188	IdentifierDeclStatement	 
>1189	IdentifierDecl	apiUrl = getApiUrl ( p , \"remove_folder\" , ql )
>1190	AssignmentExpr	apiUrl = getApiUrl ( p , \"remove_folder\" , ql )
>1191	CallExpression	getApiUrl ( p , \"remove_folder\" , ql )
>1192	ArgumentList	p
>1193	Argument	ql
>1194	Identifier	ql
>1195	Argument	\"remove_folder\"
>1196	PrimaryExpression	\"remove_folder\"
>1197	Argument	p
>1198	Identifier	p
>1199	Callee	getApiUrl
>1200	Identifier	getApiUrl
>1201	Identifier	apiUrl
>1202	Identifier	apiUrl
>1203	IdentifierDeclType	QUrl
>1204	ExpressionStatement	 
>1205	ShiftExpression	ql << QueryPair ( \"secret\" , secret )
>1206	CallExpression	QueryPair ( \"secret\" , secret )
>1207	ArgumentList	\"secret\"
>1208	Argument	secret
>1209	Identifier	secret
>1210	Argument	\"secret\"
>1211	PrimaryExpression	\"secret\"
>1212	Callee	QueryPair
>1213	Identifier	QueryPair
>1214	Identifier	ql
>1215	IdentifierDeclStatement	 
>1216	IdentifierDecl	ql
>1217	Identifier	ql
>1218	IdentifierDeclType	QueryList
>1242	FunctionDef	parseGetFilesResult (QJsonObject & fileObj , BtsGetFilesResult & resObj)
>1243	ParameterList	QJsonObject & fileObj , BtsGetFilesResult & resObj
>1244	Parameter	 
>1245	Identifier	resObj
>1246	ParameterType	BtsGetFilesResult &
>1247	Parameter	 
>1248	Identifier	fileObj
>1249	ParameterType	QJsonObject &
>1250	ReturnType	static void
>1251	CompoundStatement	 
>1252	IfStatement	if ( resObj . type == BtsGetFilesResultType 
>1253	ElseStatement	else
>1254	CompoundStatement	 
>1255	ExpressionStatement	 
>1256	AssignmentExpr	resObj . download = true
>1257	Identifier	true
>1258	MemberAccess	resObj . download
>1259	Identifier	download
>1260	Identifier	resObj
>1261	ExpressionStatement	 
>1262	AssignmentExpr	resObj . have_pieces = 0
>1263	PrimaryExpression	0
>1264	MemberAccess	resObj . have_pieces
>1265	Identifier	have_pieces
>1266	Identifier	resObj
>1267	ExpressionStatement	 
>1268	AssignmentExpr	resObj . total_pieces = 0
>1269	PrimaryExpression	0
>1270	MemberAccess	resObj . total_pieces
>1271	Identifier	total_pieces
>1272	Identifier	resObj
>1273	ExpressionStatement	 
>1274	AssignmentExpr	resObj . size = 0
>1275	PrimaryExpression	0
>1276	MemberAccess	resObj . size
>1277	Identifier	size
>1278	Identifier	resObj
>1279	CompoundStatement	 
>1280	ExpressionStatement	 
>1281	AssignmentExpr	resObj . download = fileObj . value ( \"download\" ) . toInt ( 1 ) ? true 
>1282	ConditionalExpression	fileObj . value ( \"download\" ) . toInt ( 1 ) ? true 
>1283	Identifier	false
>1284	Identifier	true
>1285	Condition	fileObj . value ( \"download\" ) . toInt ( 1 )
>1286	CallExpression	fileObj . value ( \"download\" ) . toInt ( 1 )
>1287	ArgumentList	1
>1288	Argument	1
>1289	PrimaryExpression	1
>1290	Callee	fileObj . value ( \"download\" ) . toInt
>1291	MemberAccess	fileObj . value ( \"download\" ) . toInt
>1292	Identifier	toInt
>1293	CallExpression	fileObj . value ( \"download\" )
>1294	ArgumentList	\"download\"
>1295	Argument	\"download\"
>1296	PrimaryExpression	\"download\"
>1297	Callee	fileObj . value
>1298	MemberAccess	fileObj . value
>1299	Identifier	value
>1300	Identifier	fileObj
>1301	MemberAccess	resObj . download
>1302	Identifier	download
>1303	Identifier	resObj
>1304	ExpressionStatement	 
>1305	AssignmentExpr	resObj . have_pieces = fileObj . value ( \"have_pieces\" ) . toInt ( )
>1306	CallExpression	fileObj . value ( \"have_pieces\" ) . toInt ( )
>1307	ArgumentList	 
>1308	Callee	fileObj . value ( \"have_pieces\" ) . toInt
>1309	MemberAccess	fileObj . value ( \"have_pieces\" ) . toInt
>1310	Identifier	toInt
>1311	CallExpression	fileObj . value ( \"have_pieces\" )
>1312	ArgumentList	\"have_pieces\"
>1313	Argument	\"have_pieces\"
>1314	PrimaryExpression	\"have_pieces\"
>1315	Callee	fileObj . value
>1316	MemberAccess	fileObj . value
>1317	Identifier	value
>1318	Identifier	fileObj
>1319	MemberAccess	resObj . have_pieces
>1320	Identifier	have_pieces
>1321	Identifier	resObj
>1322	ExpressionStatement	 
>1323	AssignmentExpr	resObj . total_pieces = fileObj . value ( \"total_pieces\" ) . toInt ( )
>1324	CallExpression	fileObj . value ( \"total_pieces\" ) . toInt ( )
>1325	ArgumentList	 
>1326	Callee	fileObj . value ( \"total_pieces\" ) . toInt
>1327	MemberAccess	fileObj . value ( \"total_pieces\" ) . toInt
>1328	Identifier	toInt
>1329	CallExpression	fileObj . value ( \"total_pieces\" )
>1330	ArgumentList	\"total_pieces\"
>1331	Argument	\"total_pieces\"
>1332	PrimaryExpression	\"total_pieces\"
>1333	Callee	fileObj . value
>1334	MemberAccess	fileObj . value
>1335	Identifier	value
>1336	Identifier	fileObj
>1337	MemberAccess	resObj . total_pieces
>1338	Identifier	total_pieces
>1339	Identifier	resObj
>1340	ExpressionStatement	 
>1341	AssignmentExpr	resObj . size = fileObj . value ( \"size\" ) . toVariant ( ) . toLongLong ( )
>1342	CallExpression	fileObj . value ( \"size\" ) . toVariant ( ) . toLongLong ( )
>1343	ArgumentList	 
>1344	Callee	fileObj . value ( \"size\" ) . toVariant ( ) . toLongLong
>1345	MemberAccess	fileObj . value ( \"size\" ) . toVariant ( ) . toLongLong
>1346	Identifier	toLongLong
>1347	CallExpression	fileObj . value ( \"size\" ) . toVariant ( )
>1348	ArgumentList	 
>1349	Callee	fileObj . value ( \"size\" ) . toVariant
>1350	MemberAccess	fileObj . value ( \"size\" ) . toVariant
>1351	Identifier	toVariant
>1352	CallExpression	fileObj . value ( \"size\" )
>1353	ArgumentList	\"size\"
>1354	Argument	\"size\"
>1355	PrimaryExpression	\"size\"
>1356	Callee	fileObj . value
>1357	MemberAccess	fileObj . value
>1358	Identifier	value
>1359	Identifier	fileObj
>1360	MemberAccess	resObj . size
>1361	Identifier	size
>1362	Identifier	resObj
>1363	Condition	 
>1364	EqualityExpression	resObj . type == BtsGetFilesResultType 
>1365	Identifier	BtsGetFilesResultType 
>1366	MemberAccess	resObj . type
>1367	Identifier	type
>1368	Identifier	resObj
>1369	ExpressionStatement	 
>1370	AssignmentExpr	resObj . state = fileObj . value ( \"state\" ) . toString ( )
>1371	CallExpression	fileObj . value ( \"state\" ) . toString ( )
>1372	ArgumentList	 
>1373	Callee	fileObj . value ( \"state\" ) . toString
>1374	MemberAccess	fileObj . value ( \"state\" ) . toString
>1375	Identifier	toString
>1376	CallExpression	fileObj . value ( \"state\" )
>1377	ArgumentList	\"state\"
>1378	Argument	\"state\"
>1379	PrimaryExpression	\"state\"
>1380	Callee	fileObj . value
>1381	MemberAccess	fileObj . value
>1382	Identifier	value
>1383	Identifier	fileObj
>1384	MemberAccess	resObj . state
>1385	Identifier	state
>1386	Identifier	resObj
>1387	ExpressionStatement	 
>1388	AssignmentExpr	resObj . name = fileObj . value ( \"name\" ) . toString ( )
>1389	CallExpression	fileObj . value ( \"name\" ) . toString ( )
>1390	ArgumentList	 
>1391	Callee	fileObj . value ( \"name\" ) . toString
>1392	MemberAccess	fileObj . value ( \"name\" ) . toString
>1393	Identifier	toString
>1394	CallExpression	fileObj . value ( \"name\" )
>1395	ArgumentList	\"name\"
>1396	Argument	\"name\"
>1397	PrimaryExpression	\"name\"
>1398	Callee	fileObj . value
>1399	MemberAccess	fileObj . value
>1400	Identifier	value
>1401	Identifier	fileObj
>1402	MemberAccess	resObj . name
>1403	Identifier	name
>1404	Identifier	resObj
>1405	IfStatement	if ( resObj . typeString == \"file\" )
>1406	ElseStatement	else
>1407	IfStatement	if ( resObj . typeString == \"folder\" )
>1408	ElseStatement	else
>1409	IfStatement	if ( resObj . typeString == \"empty\" )
>1410	ElseStatement	else
>1411	ExpressionStatement	 
>1412	AssignmentExpr	resObj . type = BtsGetFilesResultType 
>1413	Identifier	BtsGetFilesResultType 
>1414	MemberAccess	resObj . type
>1415	Identifier	type
>1416	Identifier	resObj
>1417	ExpressionStatement	 
>1418	AssignmentExpr	resObj . type = BtsGetFilesResultType 
>1419	Identifier	BtsGetFilesResultType 
>1420	MemberAccess	resObj . type
>1421	Identifier	type
>1422	Identifier	resObj
>1423	Condition	 
>1424	EqualityExpression	resObj . typeString == \"empty\"
>1425	PrimaryExpression	\"empty\"
>1426	MemberAccess	resObj . typeString
>1427	Identifier	typeString
>1428	Identifier	resObj
>1429	ExpressionStatement	 
>1430	AssignmentExpr	resObj . type = BtsGetFilesResultType 
>1431	Identifier	BtsGetFilesResultType 
>1432	MemberAccess	resObj . type
>1433	Identifier	type
>1434	Identifier	resObj
>1435	Condition	 
>1436	EqualityExpression	resObj . typeString == \"folder\"
>1437	PrimaryExpression	\"folder\"
>1438	MemberAccess	resObj . typeString
>1439	Identifier	typeString
>1440	Identifier	resObj
>1441	ExpressionStatement	 
>1442	AssignmentExpr	resObj . type = BtsGetFilesResultType 
>1443	Identifier	BtsGetFilesResultType 
>1444	MemberAccess	resObj . type
>1445	Identifier	type
>1446	Identifier	resObj
>1447	Condition	 
>1448	EqualityExpression	resObj . typeString == \"file\"
>1449	PrimaryExpression	\"file\"
>1450	MemberAccess	resObj . typeString
>1451	Identifier	typeString
>1452	Identifier	resObj
>1453	ExpressionStatement	 
>1454	AssignmentExpr	resObj . typeString = fileObj . value ( \"type\" ) . toString ( )
>1455	CallExpression	fileObj . value ( \"type\" ) . toString ( )
>1456	ArgumentList	 
>1457	Callee	fileObj . value ( \"type\" ) . toString
>1458	MemberAccess	fileObj . value ( \"type\" ) . toString
>1459	Identifier	toString
>1460	CallExpression	fileObj . value ( \"type\" )
>1461	ArgumentList	\"type\"
>1462	Argument	\"type\"
>1463	PrimaryExpression	\"type\"
>1464	Callee	fileObj . value
>1465	MemberAccess	fileObj . value
>1466	Identifier	value
>1467	Identifier	fileObj
>1468	MemberAccess	resObj . typeString
>1469	Identifier	typeString
>1470	Identifier	resObj
>1499	FunctionDef	BtsApi 
>1500	ParameterList	const QString & secret , const QString & path
>1501	Parameter	 
>1502	Identifier	path
>1503	ParameterType	const QString &
>1504	Parameter	 
>1505	Identifier	secret
>1506	ParameterType	const QString &
>1507	ReturnType	BtsApiNotifier *
>1508	CompoundStatement	 
>1509	ReturnStatement	 
>1510	Identifier	notifier
>1511	ExpressionStatement	 
>1512	Statement	 
>1513	CompoundStatement	 
>1514	ExpressionStatement	 
>1515	CallExpression	notifier -> getFilesResult ( res , secret )
>1516	ArgumentList	res
>1517	Argument	secret
>1518	Identifier	secret
>1519	Argument	res
>1520	Identifier	res
>1521	Callee	notifier -> getFilesResult
>1522	PtrMemberAccess	notifier -> getFilesResult
>1523	Identifier	getFilesResult
>1524	Identifier	notifier
>1525	Statement	 
>1526	IdentifierDeclStatement	 
>1527	IdentifierDecl	getFilesResult ( res , secret )
>1528	Expression	res , secret
>1529	Identifier	secret
>1530	Identifier	res
>1531	Identifier	getFilesResult
>1532	IdentifierDeclType	emit
>1533	CompoundStatement	 
>1534	ExpressionStatement	 
>1535	ShiftExpression	res << resObj
>1536	Identifier	resObj
>1537	Identifier	res
>1538	ExpressionStatement	 
>1539	CallExpression	parseGetFilesResult ( fileObj , resObj )
>1540	ArgumentList	fileObj
>1541	Argument	resObj
>1542	Identifier	resObj
>1543	Argument	fileObj
>1544	Identifier	fileObj
>1545	Callee	parseGetFilesResult
>1546	Identifier	parseGetFilesResult
>1547	IdentifierDeclStatement	 
>1548	IdentifierDecl	resObj
>1549	Identifier	resObj
>1550	IdentifierDeclType	BtsGetFilesResult
>1551	IfStatement	if ( fileObj . isEmpty ( ) )
>1552	CompoundStatement	 
>1553	ReturnStatement	 
>1554	IdentifierDeclStatement	 
>1555	IdentifierDecl	error ( \"Got an unexpected get_files reply format\" )
>1556	PrimaryExpression	\"Got an unexpected get_files reply format\"
>1557	Identifier	error
>1558	IdentifierDeclType	emit
>1559	Condition	 
>1560	CallExpression	fileObj . isEmpty ( )
>1561	ArgumentList	 
>1562	Callee	fileObj . isEmpty
>1563	MemberAccess	fileObj . isEmpty
>1564	Identifier	isEmpty
>1565	Identifier	fileObj
>1566	IdentifierDeclStatement	 
>1567	IdentifierDecl	fileObj = val . toObject ( )
>1568	AssignmentExpr	fileObj = val . toObject ( )
>1569	CallExpression	val . toObject ( )
>1570	ArgumentList	 
>1571	Callee	val . toObject
>1572	MemberAccess	val . toObject
>1573	Identifier	toObject
>1574	Identifier	val
>1575	Identifier	fileObj
>1576	Identifier	fileObj
>1577	IdentifierDeclType	QJsonObject
>1578	Statement	 
>1579	Statement	 
>1580	Label	 
>1581	Identifier	val
>1582	Statement	 
>1583	Statement	 
>1584	Statement	 
>1585	Statement	 
>1586	Statement	 
>1587	ExpressionStatement	 
>1588	CallExpression	res . reserve ( arr . size ( ) )
>1589	ArgumentList	arr . size ( )
>1590	Argument	arr . size ( )
>1591	CallExpression	arr . size ( )
>1592	ArgumentList	 
>1593	Callee	arr . size
>1594	MemberAccess	arr . size
>1595	Identifier	size
>1596	Identifier	arr
>1597	Callee	res . reserve
>1598	MemberAccess	res . reserve
>1599	Identifier	reserve
>1600	Identifier	res
>1601	IdentifierDeclStatement	 
>1602	IdentifierDecl	res
>1603	Identifier	res
>1604	IdentifierDeclType	QVector < BtsGetFilesResult >
>1605	IdentifierDeclStatement	 
>1606	IdentifierDecl	arr = doc . array ( )
>1607	AssignmentExpr	arr = doc . array ( )
>1608	CallExpression	doc . array ( )
>1609	ArgumentList	 
>1610	Callee	doc . array
>1611	MemberAccess	doc . array
>1612	Identifier	array
>1613	Identifier	doc
>1614	Identifier	arr
>1615	Identifier	arr
>1616	IdentifierDeclType	QJsonArray
>1617	IfStatement	if ( checkForError ( doc , notifier ) )
>1618	ReturnStatement	 
>1619	Condition	 
>1620	CallExpression	checkForError ( doc , notifier )
>1621	ArgumentList	doc
>1622	Argument	notifier
>1623	Identifier	notifier
>1624	Argument	doc
>1625	Identifier	doc
>1626	Callee	checkForError
>1627	Identifier	checkForError
>1628	IdentifierDeclStatement	 
>1629	IdentifierDecl	doc = QJsonDocument 
>1630	AssignmentExpr	doc = QJsonDocument 
>1631	CallExpression	QJsonDocument 
>1632	ArgumentList	reply -> readAll ( )
>1633	Argument	reply -> readAll ( )
>1634	CallExpression	reply -> readAll ( )
>1635	ArgumentList	 
>1636	Callee	reply -> readAll
>1637	PtrMemberAccess	reply -> readAll
>1638	Identifier	readAll
>1639	Identifier	reply
>1640	Callee	QJsonDocument 
>1641	Identifier	QJsonDocument 
>1642	Identifier	doc
>1643	Identifier	doc
>1644	IdentifierDeclType	QJsonDocument
>1645	IfStatement	if ( checkForError ( reply , notifier ) )
>1646	ReturnStatement	 
>1647	Condition	 
>1648	CallExpression	checkForError ( reply , notifier )
>1649	ArgumentList	reply
>1650	Argument	notifier
>1651	Identifier	notifier
>1652	Argument	reply
>1653	Identifier	reply
>1654	Callee	checkForError
>1655	Identifier	checkForError
>1656	ExpressionStatement	 
>1657	CallExpression	notifier -> deleteLater ( )
>1658	ArgumentList	 
>1659	Callee	notifier -> deleteLater
>1660	PtrMemberAccess	notifier -> deleteLater
>1661	Identifier	deleteLater
>1662	Identifier	notifier
>1663	Statement	 
>1664	Statement	 
>1665	Statement	 
>1666	Statement	 
>1667	Statement	 
>1668	Statement	 
>1669	Statement	 
>1670	Statement	 
>1671	Statement	 
>1672	Statement	 
>1673	Statement	 
>1674	Statement	 
>1675	Statement	 
>1676	Statement	 
>1677	Statement	 
>1678	Statement	 
>1679	Statement	 
>1680	Statement	 
>1681	Statement	 
>1682	Statement	 
>1683	IdentifierDeclStatement	 
>1684	IdentifierDecl	* notifier = new BtsApiNotifier ( this )
>1685	AssignmentExpr	* notifier = new BtsApiNotifier ( this )
>1686	Identifier	this
>1687	Identifier	this
>1688	Identifier	notifier
>1689	IdentifierDeclType	BtsApiNotifier *
>1690	IdentifierDeclStatement	 
>1691	IdentifierDecl	* reply = p -> nam -> get ( QNetworkRequest ( apiUrl ) )
>1692	AssignmentExpr	* reply = p -> nam -> get ( QNetworkRequest ( apiUrl ) )
>1693	CallExpression	p -> nam -> get ( QNetworkRequest ( apiUrl ) )
>1694	ArgumentList	QNetworkRequest ( apiUrl )
>1695	Argument	QNetworkRequest ( apiUrl )
>1696	CallExpression	QNetworkRequest ( apiUrl )
>1697	ArgumentList	apiUrl
>1698	Argument	apiUrl
>1699	Identifier	apiUrl
>1700	Callee	QNetworkRequest
>1701	Identifier	QNetworkRequest
>1702	Callee	p -> nam -> get
>1703	PtrMemberAccess	p -> nam -> get
>1704	Identifier	get
>1705	PtrMemberAccess	p -> nam
>1706	Identifier	nam
>1707	Identifier	p
>1708	Identifier	reply
>1709	Identifier	reply
>1710	IdentifierDeclType	QNetworkReply *
>1711	IdentifierDeclStatement	 
>1712	IdentifierDecl	apiUrl = getApiUrl ( p , \"get_files\" , ql )
>1713	AssignmentExpr	apiUrl = getApiUrl ( p , \"get_files\" , ql )
>1714	CallExpression	getApiUrl ( p , \"get_files\" , ql )
>1715	ArgumentList	p
>1716	Argument	ql
>1717	Identifier	ql
>1718	Argument	\"get_files\"
>1719	PrimaryExpression	\"get_files\"
>1720	Argument	p
>1721	Identifier	p
>1722	Callee	getApiUrl
>1723	Identifier	getApiUrl
>1724	Identifier	apiUrl
>1725	Identifier	apiUrl
>1726	IdentifierDeclType	QUrl
>1727	IfStatement	if ( ! path . isEmpty ( ) )
>1728	ExpressionStatement	 
>1729	ShiftExpression	ql << QueryPair ( \"path\" , path )
>1730	CallExpression	QueryPair ( \"path\" , path )
>1731	ArgumentList	\"path\"
>1732	Argument	path
>1733	Identifier	path
>1734	Argument	\"path\"
>1735	PrimaryExpression	\"path\"
>1736	Callee	QueryPair
>1737	Identifier	QueryPair
>1738	Identifier	ql
>1739	Condition	 
>1740	UnaryOp	! path . isEmpty ( )
>1741	CallExpression	path . isEmpty ( )
>1742	ArgumentList	 
>1743	Callee	path . isEmpty
>1744	MemberAccess	path . isEmpty
>1745	Identifier	isEmpty
>1746	Identifier	path
>1747	UnaryOperator	!
>1748	ExpressionStatement	 
>1749	ShiftExpression	ql << QueryPair ( \"secret\" , secret )
>1750	CallExpression	QueryPair ( \"secret\" , secret )
>1751	ArgumentList	\"secret\"
>1752	Argument	secret
>1753	Identifier	secret
>1754	Argument	\"secret\"
>1755	PrimaryExpression	\"secret\"
>1756	Callee	QueryPair
>1757	Identifier	QueryPair
>1758	Identifier	ql
>1759	IdentifierDeclStatement	 
>1760	IdentifierDecl	ql
>1761	Identifier	ql
>1762	IdentifierDeclType	QueryList
>1798	FunctionDef	BtsApi 
>1799	ParameterList	const QString & secret , const QString & path , bool download
>1800	Parameter	 
>1801	Identifier	download
>1802	ParameterType	bool
>1803	Parameter	 
>1804	Identifier	path
>1805	ParameterType	const QString &
>1806	Parameter	 
>1807	Identifier	secret
>1808	ParameterType	const QString &
>1809	ReturnType	BtsApiNotifier *
>1810	CompoundStatement	 
>1811	ReturnStatement	 
>1812	Identifier	notifier
>1813	ExpressionStatement	 
>1814	Statement	 
>1815	CompoundStatement	 
>1816	ExpressionStatement	 
>1817	CallExpression	notifier -> setFilePrefsResult ( res , secret )
>1818	ArgumentList	res
>1819	Argument	secret
>1820	Identifier	secret
>1821	Argument	res
>1822	Identifier	res
>1823	Callee	notifier -> setFilePrefsResult
>1824	PtrMemberAccess	notifier -> setFilePrefsResult
>1825	Identifier	setFilePrefsResult
>1826	Identifier	notifier
>1827	Statement	 
>1828	IdentifierDeclStatement	 
>1829	IdentifierDecl	setFilePrefsResult ( res , secret )
>1830	Expression	res , secret
>1831	Identifier	secret
>1832	Identifier	res
>1833	Identifier	setFilePrefsResult
>1834	IdentifierDeclType	emit
>1835	CompoundStatement	 
>1836	ExpressionStatement	 
>1837	ShiftExpression	res << resObj
>1838	Identifier	resObj
>1839	Identifier	res
>1840	ExpressionStatement	 
>1841	CallExpression	parseGetFilesResult ( fileObj , resObj )
>1842	ArgumentList	fileObj
>1843	Argument	resObj
>1844	Identifier	resObj
>1845	Argument	fileObj
>1846	Identifier	fileObj
>1847	Callee	parseGetFilesResult
>1848	Identifier	parseGetFilesResult
>1849	IdentifierDeclStatement	 
>1850	IdentifierDecl	resObj
>1851	Identifier	resObj
>1852	IdentifierDeclType	BtsGetFilesResult
>1853	IfStatement	if ( fileObj . isEmpty ( ) )
>1854	CompoundStatement	 
>1855	ReturnStatement	 
>1856	IdentifierDeclStatement	 
>1857	IdentifierDecl	error ( \"Got an unexpected set_file_prefs reply format\" )
>1858	PrimaryExpression	\"Got an unexpected set_file_prefs reply format\"
>1859	Identifier	error
>1860	IdentifierDeclType	emit
>1861	Condition	 
>1862	CallExpression	fileObj . isEmpty ( )
>1863	ArgumentList	 
>1864	Callee	fileObj . isEmpty
>1865	MemberAccess	fileObj . isEmpty
>1866	Identifier	isEmpty
>1867	Identifier	fileObj
>1868	IdentifierDeclStatement	 
>1869	IdentifierDecl	fileObj = val . toObject ( )
>1870	AssignmentExpr	fileObj = val . toObject ( )
>1871	CallExpression	val . toObject ( )
>1872	ArgumentList	 
>1873	Callee	val . toObject
>1874	MemberAccess	val . toObject
>1875	Identifier	toObject
>1876	Identifier	val
>1877	Identifier	fileObj
>1878	Identifier	fileObj
>1879	IdentifierDeclType	QJsonObject
>1880	Statement	 
>1881	Statement	 
>1882	Label	 
>1883	Identifier	val
>1884	Statement	 
>1885	Statement	 
>1886	Statement	 
>1887	Statement	 
>1888	Statement	 
>1889	ExpressionStatement	 
>1890	CallExpression	res . reserve ( arr . size ( ) )
>1891	ArgumentList	arr . size ( )
>1892	Argument	arr . size ( )
>1893	CallExpression	arr . size ( )
>1894	ArgumentList	 
>1895	Callee	arr . size
>1896	MemberAccess	arr . size
>1897	Identifier	size
>1898	Identifier	arr
>1899	Callee	res . reserve
>1900	MemberAccess	res . reserve
>1901	Identifier	reserve
>1902	Identifier	res
>1903	IdentifierDeclStatement	 
>1904	IdentifierDecl	res
>1905	Identifier	res
>1906	IdentifierDeclType	QVector < BtsGetFilesResult >
>1907	IdentifierDeclStatement	 
>1908	IdentifierDecl	arr = doc . array ( )
>1909	AssignmentExpr	arr = doc . array ( )
>1910	CallExpression	doc . array ( )
>1911	ArgumentList	 
>1912	Callee	doc . array
>1913	MemberAccess	doc . array
>1914	Identifier	array
>1915	Identifier	doc
>1916	Identifier	arr
>1917	Identifier	arr
>1918	IdentifierDeclType	QJsonArray
>1919	IfStatement	if ( checkForError ( doc , notifier ) )
>1920	ReturnStatement	 
>1921	Condition	 
>1922	CallExpression	checkForError ( doc , notifier )
>1923	ArgumentList	doc
>1924	Argument	notifier
>1925	Identifier	notifier
>1926	Argument	doc
>1927	Identifier	doc
>1928	Callee	checkForError
>1929	Identifier	checkForError
>1930	IdentifierDeclStatement	 
>1931	IdentifierDecl	doc = QJsonDocument 
>1932	AssignmentExpr	doc = QJsonDocument 
>1933	CallExpression	QJsonDocument 
>1934	ArgumentList	reply -> readAll ( )
>1935	Argument	reply -> readAll ( )
>1936	CallExpression	reply -> readAll ( )
>1937	ArgumentList	 
>1938	Callee	reply -> readAll
>1939	PtrMemberAccess	reply -> readAll
>1940	Identifier	readAll
>1941	Identifier	reply
>1942	Callee	QJsonDocument 
>1943	Identifier	QJsonDocument 
>1944	Identifier	doc
>1945	Identifier	doc
>1946	IdentifierDeclType	QJsonDocument
>1947	IfStatement	if ( checkForError ( reply , notifier ) )
>1948	ReturnStatement	 
>1949	Condition	 
>1950	CallExpression	checkForError ( reply , notifier )
>1951	ArgumentList	reply
>1952	Argument	notifier
>1953	Identifier	notifier
>1954	Argument	reply
>1955	Identifier	reply
>1956	Callee	checkForError
>1957	Identifier	checkForError
>1958	ExpressionStatement	 
>1959	CallExpression	notifier -> deleteLater ( )
>1960	ArgumentList	 
>1961	Callee	notifier -> deleteLater
>1962	PtrMemberAccess	notifier -> deleteLater
>1963	Identifier	deleteLater
>1964	Identifier	notifier
>1965	Statement	 
>1966	Statement	 
>1967	Statement	 
>1968	Statement	 
>1969	Statement	 
>1970	Statement	 
>1971	Statement	 
>1972	Statement	 
>1973	Statement	 
>1974	Statement	 
>1975	Statement	 
>1976	Statement	 
>1977	Statement	 
>1978	Statement	 
>1979	Statement	 
>1980	Statement	 
>1981	Statement	 
>1982	Statement	 
>1983	Statement	 
>1984	Statement	 
>1985	IdentifierDeclStatement	 
>1986	IdentifierDecl	* notifier = new BtsApiNotifier ( this )
>1987	AssignmentExpr	* notifier = new BtsApiNotifier ( this )
>1988	Identifier	this
>1989	Identifier	this
>1990	Identifier	notifier
>1991	IdentifierDeclType	BtsApiNotifier *
>1992	IdentifierDeclStatement	 
>1993	IdentifierDecl	* reply = p -> nam -> get ( QNetworkRequest ( apiUrl ) )
>1994	AssignmentExpr	* reply = p -> nam -> get ( QNetworkRequest ( apiUrl ) )
>1995	CallExpression	p -> nam -> get ( QNetworkRequest ( apiUrl ) )
>1996	ArgumentList	QNetworkRequest ( apiUrl )
>1997	Argument	QNetworkRequest ( apiUrl )
>1998	CallExpression	QNetworkRequest ( apiUrl )
>1999	ArgumentList	apiUrl
>2000	Argument	apiUrl
>2001	Identifier	apiUrl
>2002	Callee	QNetworkRequest
>2003	Identifier	QNetworkRequest
>2004	Callee	p -> nam -> get
>2005	PtrMemberAccess	p -> nam -> get
>2006	Identifier	get
>2007	PtrMemberAccess	p -> nam
>2008	Identifier	nam
>2009	Identifier	p
>2010	Identifier	reply
>2011	Identifier	reply
>2012	IdentifierDeclType	QNetworkReply *
>2013	IdentifierDeclStatement	 
>2014	IdentifierDecl	apiUrl = getApiUrl ( p , \"set_file_prefs\" , ql )
>2015	AssignmentExpr	apiUrl = getApiUrl ( p , \"set_file_prefs\" , ql )
>2016	CallExpression	getApiUrl ( p , \"set_file_prefs\" , ql )
>2017	ArgumentList	p
>2018	Argument	ql
>2019	Identifier	ql
>2020	Argument	\"set_file_prefs\"
>2021	PrimaryExpression	\"set_file_prefs\"
>2022	Argument	p
>2023	Identifier	p
>2024	Callee	getApiUrl
>2025	Identifier	getApiUrl
>2026	Identifier	apiUrl
>2027	Identifier	apiUrl
>2028	IdentifierDeclType	QUrl
>2029	ExpressionStatement	 
>2030	ShiftExpression	ql << QueryPair ( \"secret\" , secret ) << QueryPair ( \"path\" , path ) << QueryPair ( \"download\" , download ? \"\
>2031	ShiftExpression	QueryPair ( \"secret\" , secret ) << QueryPair ( \"path\" , path ) << QueryPair ( \"download\" , download ? \"\
>2032	ShiftExpression	QueryPair ( \"path\" , path ) << QueryPair ( \"download\" , download ? \"1\" 
>2033	CallExpression	QueryPair ( \"download\" , download ? \"1\" 
>2034	ArgumentList	\"download\"
>2035	Argument	download ? \"1\" 
>2036	ConditionalExpression	download ? \"1\" 
>2037	PrimaryExpression	\"0\"
>2038	PrimaryExpression	\"1\"
>2039	Condition	download
>2040	Identifier	download
>2041	Argument	\"download\"
>2042	PrimaryExpression	\"download\"
>2043	Callee	QueryPair
>2044	Identifier	QueryPair
>2045	CallExpression	QueryPair ( \"path\" , path )
>2046	ArgumentList	\"path\"
>2047	Argument	path
>2048	Identifier	path
>2049	Argument	\"path\"
>2050	PrimaryExpression	\"path\"
>2051	Callee	QueryPair
>2052	Identifier	QueryPair
>2053	CallExpression	QueryPair ( \"secret\" , secret )
>2054	ArgumentList	\"secret\"
>2055	Argument	secret
>2056	Identifier	secret
>2057	Argument	\"secret\"
>2058	PrimaryExpression	\"secret\"
>2059	Callee	QueryPair
>2060	Identifier	QueryPair
>2061	Identifier	ql
>2062	IdentifierDeclStatement	 
>2063	IdentifierDecl	ql
>2064	Identifier	ql
>2065	IdentifierDeclType	QueryList
>2101	FunctionDef	BtsApi 
>2102	ParameterList	const QString & secret
>2103	Parameter	 
>2104	Identifier	secret
>2105	ParameterType	const QString &
>2106	ReturnType	BtsApiNotifier *
>2107	CompoundStatement	 
>2108	ReturnStatement	 
>2109	Identifier	notifier
>2110	ExpressionStatement	 
>2111	Statement	 
>2112	CompoundStatement	 
>2113	ExpressionStatement	 
>2114	CallExpression	notifier -> getFolderPeersResult ( res , secret )
>2115	ArgumentList	res
>2116	Argument	secret
>2117	Identifier	secret
>2118	Argument	res
>2119	Identifier	res
>2120	Callee	notifier -> getFolderPeersResult
>2121	PtrMemberAccess	notifier -> getFolderPeersResult
>2122	Identifier	getFolderPeersResult
>2123	Identifier	notifier
>2124	Statement	 
>2125	IdentifierDeclStatement	 
>2126	IdentifierDecl	getFolderPeersResult ( res , secret )
>2127	Expression	res , secret
>2128	Identifier	secret
>2129	Identifier	res
>2130	Identifier	getFolderPeersResult
>2131	IdentifierDeclType	emit
>2132	CompoundStatement	 
>2133	ExpressionStatement	 
>2134	ShiftExpression	res << resObj
>2135	Identifier	resObj
>2136	Identifier	res
>2137	ExpressionStatement	 
>2138	AssignmentExpr	resObj . upload = peerObj . value ( \"upload\" ) . toVariant ( ) . toLongLong ( )
>2139	CallExpression	peerObj . value ( \"upload\" ) . toVariant ( ) . toLongLong ( )
>2140	ArgumentList	 
>2141	Callee	peerObj . value ( \"upload\" ) . toVariant ( ) . toLongLong
>2142	MemberAccess	peerObj . value ( \"upload\" ) . toVariant ( ) . toLongLong
>2143	Identifier	toLongLong
>2144	CallExpression	peerObj . value ( \"upload\" ) . toVariant ( )
>2145	ArgumentList	 
>2146	Callee	peerObj . value ( \"upload\" ) . toVariant
>2147	MemberAccess	peerObj . value ( \"upload\" ) . toVariant
>2148	Identifier	toVariant
>2149	CallExpression	peerObj . value ( \"upload\" )
>2150	ArgumentList	\"upload\"
>2151	Argument	\"upload\"
>2152	PrimaryExpression	\"upload\"
>2153	Callee	peerObj . value
>2154	MemberAccess	peerObj . value
>2155	Identifier	value
>2156	Identifier	peerObj
>2157	MemberAccess	resObj . upload
>2158	Identifier	upload
>2159	Identifier	resObj
>2160	ExpressionStatement	 
>2161	AssignmentExpr	resObj . download = peerObj . value ( \"download\" ) . toVariant ( ) . toLongLong ( )
>2162	CallExpression	peerObj . value ( \"download\" ) . toVariant ( ) . toLongLong ( )
>2163	ArgumentList	 
>2164	Callee	peerObj . value ( \"download\" ) . toVariant ( ) . toLongLong
>2165	MemberAccess	peerObj . value ( \"download\" ) . toVariant ( ) . toLongLong
>2166	Identifier	toLongLong
>2167	CallExpression	peerObj . value ( \"download\" ) . toVariant ( )
>2168	ArgumentList	 
>2169	Callee	peerObj . value ( \"download\" ) . toVariant
>2170	MemberAccess	peerObj . value ( \"download\" ) . toVariant
>2171	Identifier	toVariant
>2172	CallExpression	peerObj . value ( \"download\" )
>2173	ArgumentList	\"download\"
>2174	Argument	\"download\"
>2175	PrimaryExpression	\"download\"
>2176	Callee	peerObj . value
>2177	MemberAccess	peerObj . value
>2178	Identifier	value
>2179	Identifier	peerObj
>2180	MemberAccess	resObj . download
>2181	Identifier	download
>2182	Identifier	resObj
>2183	ExpressionStatement	 
>2184	AssignmentExpr	resObj . synced = peerObj . value ( \"synced\" ) . toVariant ( ) . toLongLong ( )
>2185	CallExpression	peerObj . value ( \"synced\" ) . toVariant ( ) . toLongLong ( )
>2186	ArgumentList	 
>2187	Callee	peerObj . value ( \"synced\" ) . toVariant ( ) . toLongLong
>2188	MemberAccess	peerObj . value ( \"synced\" ) . toVariant ( ) . toLongLong
>2189	Identifier	toLongLong
>2190	CallExpression	peerObj . value ( \"synced\" ) . toVariant ( )
>2191	ArgumentList	 
>2192	Callee	peerObj . value ( \"synced\" ) . toVariant
>2193	MemberAccess	peerObj . value ( \"synced\" ) . toVariant
>2194	Identifier	toVariant
>2195	CallExpression	peerObj . value ( \"synced\" )
>2196	ArgumentList	\"synced\"
>2197	Argument	\"synced\"
>2198	PrimaryExpression	\"synced\"
>2199	Callee	peerObj . value
>2200	MemberAccess	peerObj . value
>2201	Identifier	value
>2202	Identifier	peerObj
>2203	MemberAccess	resObj . synced
>2204	Identifier	synced
>2205	Identifier	resObj
>2206	ExpressionStatement	 
>2207	AssignmentExpr	resObj . name = peerObj . value ( \"name\" ) . toString ( )
>2208	CallExpression	peerObj . value ( \"name\" ) . toString ( )
>2209	ArgumentList	 
>2210	Callee	peerObj . value ( \"name\" ) . toString
>2211	MemberAccess	peerObj . value ( \"name\" ) . toString
>2212	Identifier	toString
>2213	CallExpression	peerObj . value ( \"name\" )
>2214	ArgumentList	\"name\"
>2215	Argument	\"name\"
>2216	PrimaryExpression	\"name\"
>2217	Callee	peerObj . value
>2218	MemberAccess	peerObj . value
>2219	Identifier	value
>2220	Identifier	peerObj
>2221	MemberAccess	resObj . name
>2222	Identifier	name
>2223	Identifier	resObj
>2224	ExpressionStatement	 
>2225	AssignmentExpr	resObj . connection = peerObj . value ( \"connection\" ) . toString ( )
>2226	CallExpression	peerObj . value ( \"connection\" ) . toString ( )
>2227	ArgumentList	 
>2228	Callee	peerObj . value ( \"connection\" ) . toString
>2229	MemberAccess	peerObj . value ( \"connection\" ) . toString
>2230	Identifier	toString
>2231	CallExpression	peerObj . value ( \"connection\" )
>2232	ArgumentList	\"connection\"
>2233	Argument	\"connection\"
>2234	PrimaryExpression	\"connection\"
>2235	Callee	peerObj . value
>2236	MemberAccess	peerObj . value
>2237	Identifier	value
>2238	Identifier	peerObj
>2239	MemberAccess	resObj . connection
>2240	Identifier	connection
>2241	Identifier	resObj
>2242	ExpressionStatement	 
>2243	AssignmentExpr	resObj . id = peerObj . value ( \"id\" ) . toString ( )
>2244	CallExpression	peerObj . value ( \"id\" ) . toString ( )
>2245	ArgumentList	 
>2246	Callee	peerObj . value ( \"id\" ) . toString
>2247	MemberAccess	peerObj . value ( \"id\" ) . toString
>2248	Identifier	toString
>2249	CallExpression	peerObj . value ( \"id\" )
>2250	ArgumentList	\"id\"
>2251	Argument	\"id\"
>2252	PrimaryExpression	\"id\"
>2253	Callee	peerObj . value
>2254	MemberAccess	peerObj . value
>2255	Identifier	value
>2256	Identifier	peerObj
>2257	MemberAccess	resObj . id
>2258	Identifier	id
>2259	Identifier	resObj
>2260	IdentifierDeclStatement	 
>2261	IdentifierDecl	resObj
>2262	Identifier	resObj
>2263	IdentifierDeclType	BtsGetFolderPeersResult
>2264	IfStatement	if ( peerObj . isEmpty ( ) )
>2265	CompoundStatement	 
>2266	ReturnStatement	 
>2267	IdentifierDeclStatement	 
>2268	IdentifierDecl	error ( \"Got an unexpected get_folder_peers reply format\" )
>2269	PrimaryExpression	\"Got an unexpected get_folder_peers reply format\"
>2270	Identifier	error
>2271	IdentifierDeclType	emit
>2272	Condition	 
>2273	CallExpression	peerObj . isEmpty ( )
>2274	ArgumentList	 
>2275	Callee	peerObj . isEmpty
>2276	MemberAccess	peerObj . isEmpty
>2277	Identifier	isEmpty
>2278	Identifier	peerObj
>2279	IdentifierDeclStatement	 
>2280	IdentifierDecl	peerObj = val . toObject ( )
>2281	AssignmentExpr	peerObj = val . toObject ( )
>2282	CallExpression	val . toObject ( )
>2283	ArgumentList	 
>2284	Callee	val . toObject
>2285	MemberAccess	val . toObject
>2286	Identifier	toObject
>2287	Identifier	val
>2288	Identifier	peerObj
>2289	Identifier	peerObj
>2290	IdentifierDeclType	QJsonObject
>2291	Statement	 
>2292	Statement	 
>2293	Label	 
>2294	Identifier	val
>2295	Statement	 
>2296	Statement	 
>2297	Statement	 
>2298	Statement	 
>2299	Statement	 
>2300	ExpressionStatement	 
>2301	CallExpression	res . reserve ( arr . size ( ) )
>2302	ArgumentList	arr . size ( )
>2303	Argument	arr . size ( )
>2304	CallExpression	arr . size ( )
>2305	ArgumentList	 
>2306	Callee	arr . size
>2307	MemberAccess	arr . size
>2308	Identifier	size
>2309	Identifier	arr
>2310	Callee	res . reserve
>2311	MemberAccess	res . reserve
>2312	Identifier	reserve
>2313	Identifier	res
>2314	IdentifierDeclStatement	 
>2315	IdentifierDecl	res
>2316	Identifier	res
>2317	IdentifierDeclType	QVector < BtsGetFolderPeersResult >
>2318	IdentifierDeclStatement	 
>2319	IdentifierDecl	arr = doc . array ( )
>2320	AssignmentExpr	arr = doc . array ( )
>2321	CallExpression	doc . array ( )
>2322	ArgumentList	 
>2323	Callee	doc . array
>2324	MemberAccess	doc . array
>2325	Identifier	array
>2326	Identifier	doc
>2327	Identifier	arr
>2328	Identifier	arr
>2329	IdentifierDeclType	QJsonArray
>2330	IfStatement	if ( checkForError ( doc , notifier ) )
>2331	ReturnStatement	 
>2332	Condition	 
>2333	CallExpression	checkForError ( doc , notifier )
>2334	ArgumentList	doc
>2335	Argument	notifier
>2336	Identifier	notifier
>2337	Argument	doc
>2338	Identifier	doc
>2339	Callee	checkForError
>2340	Identifier	checkForError
>2341	IdentifierDeclStatement	 
>2342	IdentifierDecl	doc = QJsonDocument 
>2343	AssignmentExpr	doc = QJsonDocument 
>2344	CallExpression	QJsonDocument 
>2345	ArgumentList	reply -> readAll ( )
>2346	Argument	reply -> readAll ( )
>2347	CallExpression	reply -> readAll ( )
>2348	ArgumentList	 
>2349	Callee	reply -> readAll
>2350	PtrMemberAccess	reply -> readAll
>2351	Identifier	readAll
>2352	Identifier	reply
>2353	Callee	QJsonDocument 
>2354	Identifier	QJsonDocument 
>2355	Identifier	doc
>2356	Identifier	doc
>2357	IdentifierDeclType	QJsonDocument
>2358	IfStatement	if ( checkForError ( reply , notifier ) )
>2359	ReturnStatement	 
>2360	Condition	 
>2361	CallExpression	checkForError ( reply , notifier )
>2362	ArgumentList	reply
>2363	Argument	notifier
>2364	Identifier	notifier
>2365	Argument	reply
>2366	Identifier	reply
>2367	Callee	checkForError
>2368	Identifier	checkForError
>2369	ExpressionStatement	 
>2370	CallExpression	notifier -> deleteLater ( )
>2371	ArgumentList	 
>2372	Callee	notifier -> deleteLater
>2373	PtrMemberAccess	notifier -> deleteLater
>2374	Identifier	deleteLater
>2375	Identifier	notifier
>2376	Statement	 
>2377	Statement	 
>2378	Statement	 
>2379	Statement	 
>2380	Statement	 
>2381	Statement	 
>2382	Statement	 
>2383	Statement	 
>2384	Statement	 
>2385	Statement	 
>2386	Statement	 
>2387	Statement	 
>2388	Statement	 
>2389	Statement	 
>2390	Statement	 
>2391	Statement	 
>2392	Statement	 
>2393	Statement	 
>2394	Statement	 
>2395	Statement	 
>2396	IdentifierDeclStatement	 
>2397	IdentifierDecl	* notifier = new BtsApiNotifier ( this )
>2398	AssignmentExpr	* notifier = new BtsApiNotifier ( this )
>2399	Identifier	this
>2400	Identifier	this
>2401	Identifier	notifier
>2402	IdentifierDeclType	BtsApiNotifier *
>2403	IdentifierDeclStatement	 
>2404	IdentifierDecl	* reply = p -> nam -> get ( QNetworkRequest ( apiUrl ) )
>2405	AssignmentExpr	* reply = p -> nam -> get ( QNetworkRequest ( apiUrl ) )
>2406	CallExpression	p -> nam -> get ( QNetworkRequest ( apiUrl ) )
>2407	ArgumentList	QNetworkRequest ( apiUrl )
>2408	Argument	QNetworkRequest ( apiUrl )
>2409	CallExpression	QNetworkRequest ( apiUrl )
>2410	ArgumentList	apiUrl
>2411	Argument	apiUrl
>2412	Identifier	apiUrl
>2413	Callee	QNetworkRequest
>2414	Identifier	QNetworkRequest
>2415	Callee	p -> nam -> get
>2416	PtrMemberAccess	p -> nam -> get
>2417	Identifier	get
>2418	PtrMemberAccess	p -> nam
>2419	Identifier	nam
>2420	Identifier	p
>2421	Identifier	reply
>2422	Identifier	reply
>2423	IdentifierDeclType	QNetworkReply *
>2424	IdentifierDeclStatement	 
>2425	IdentifierDecl	apiUrl = getApiUrl ( p , \"get_folder_peers\" , ql )
>2426	AssignmentExpr	apiUrl = getApiUrl ( p , \"get_folder_peers\" , ql )
>2427	CallExpression	getApiUrl ( p , \"get_folder_peers\" , ql )
>2428	ArgumentList	p
>2429	Argument	ql
>2430	Identifier	ql
>2431	Argument	\"get_folder_peers\"
>2432	PrimaryExpression	\"get_folder_peers\"
>2433	Argument	p
>2434	Identifier	p
>2435	Callee	getApiUrl
>2436	Identifier	getApiUrl
>2437	Identifier	apiUrl
>2438	Identifier	apiUrl
>2439	IdentifierDeclType	QUrl
>2440	ExpressionStatement	 
>2441	ShiftExpression	ql << QueryPair ( \"secret\" , secret )
>2442	CallExpression	QueryPair ( \"secret\" , secret )
>2443	ArgumentList	\"secret\"
>2444	Argument	secret
>2445	Identifier	secret
>2446	Argument	\"secret\"
>2447	PrimaryExpression	\"secret\"
>2448	Callee	QueryPair
>2449	Identifier	QueryPair
>2450	Identifier	ql
>2451	IdentifierDeclStatement	 
>2452	IdentifierDecl	ql
>2453	Identifier	ql
>2454	IdentifierDeclType	QueryList
>2504	FunctionDef	BtsApi 
>2505	ParameterList	bool encryption , const QString & secret , const QUuid & uuid
>2506	Parameter	 
>2507	Identifier	uuid
>2508	ParameterType	const QUuid &
>2509	Parameter	 
>2510	Identifier	secret
>2511	ParameterType	const QString &
>2512	Parameter	 
>2513	Identifier	encryption
>2514	ParameterType	bool
>2515	ReturnType	BtsApiNotifier *
>2516	CompoundStatement	 
>2517	ReturnStatement	 
>2518	Identifier	notifier
>2519	ExpressionStatement	 
>2520	Statement	 
>2521	CompoundStatement	 
>2522	IfStatement	if ( uuid . isNull ( ) )
>2523	ElseStatement	else
>2524	CompoundStatement	 
>2525	ExpressionStatement	 
>2526	CallExpression	notifier -> getSecretsResultUuid ( uuid , rw , ro , ec )
>2527	ArgumentList	uuid
>2528	Argument	ec
>2529	Identifier	ec
>2530	Argument	ro
>2531	Identifier	ro
>2532	Argument	rw
>2533	Identifier	rw
>2534	Argument	uuid
>2535	Identifier	uuid
>2536	Callee	notifier -> getSecretsResultUuid
>2537	PtrMemberAccess	notifier -> getSecretsResultUuid
>2538	Identifier	getSecretsResultUuid
>2539	Identifier	notifier
>2540	Statement	 
>2541	IdentifierDeclStatement	 
>2542	IdentifierDecl	getSecretsResultUuid ( uuid , rw , ro , ec )
>2543	Expression	uuid , rw , ro , ec
>2544	Expression	rw , ro , ec
>2545	Expression	ro , ec
>2546	Identifier	ec
>2547	Identifier	ro
>2548	Identifier	rw
>2549	Identifier	uuid
>2550	Identifier	getSecretsResultUuid
>2551	IdentifierDeclType	emit
>2552	CompoundStatement	 
>2553	ExpressionStatement	 
>2554	CallExpression	notifier -> getSecretsResult ( rw , ro , ec )
>2555	ArgumentList	rw
>2556	Argument	ec
>2557	Identifier	ec
>2558	Argument	ro
>2559	Identifier	ro
>2560	Argument	rw
>2561	Identifier	rw
>2562	Callee	notifier -> getSecretsResult
>2563	PtrMemberAccess	notifier -> getSecretsResult
>2564	Identifier	getSecretsResult
>2565	Identifier	notifier
>2566	Statement	 
>2567	IdentifierDeclStatement	 
>2568	IdentifierDecl	getSecretsResult ( rw , ro , ec )
>2569	Expression	rw , ro , ec
>2570	Expression	ro , ec
>2571	Identifier	ec
>2572	Identifier	ro
>2573	Identifier	rw
>2574	Identifier	getSecretsResult
>2575	IdentifierDeclType	emit
>2576	Condition	 
>2577	CallExpression	uuid . isNull ( )
>2578	ArgumentList	 
>2579	Callee	uuid . isNull
>2580	MemberAccess	uuid . isNull
>2581	Identifier	isNull
>2582	Identifier	uuid
>2583	IdentifierDeclStatement	 
>2584	IdentifierDecl	ec = obj . value ( \"encryption\" ) . toString ( )
>2585	AssignmentExpr	ec = obj . value ( \"encryption\" ) . toString ( )
>2586	CallExpression	obj . value ( \"encryption\" ) . toString ( )
>2587	ArgumentList	 
>2588	Callee	obj . value ( \"encryption\" ) . toString
>2589	MemberAccess	obj . value ( \"encryption\" ) . toString
>2590	Identifier	toString
>2591	CallExpression	obj . value ( \"encryption\" )
>2592	ArgumentList	\"encryption\"
>2593	Argument	\"encryption\"
>2594	PrimaryExpression	\"encryption\"
>2595	Callee	obj . value
>2596	MemberAccess	obj . value
>2597	Identifier	value
>2598	Identifier	obj
>2599	Identifier	ec
>2600	Identifier	ec
>2601	IdentifierDeclType	QString
>2602	IdentifierDeclStatement	 
>2603	IdentifierDecl	ro = obj . value ( \"read_only\" ) . toString ( )
>2604	AssignmentExpr	ro = obj . value ( \"read_only\" ) . toString ( )
>2605	CallExpression	obj . value ( \"read_only\" ) . toString ( )
>2606	ArgumentList	 
>2607	Callee	obj . value ( \"read_only\" ) . toString
>2608	MemberAccess	obj . value ( \"read_only\" ) . toString
>2609	Identifier	toString
>2610	CallExpression	obj . value ( \"read_only\" )
>2611	ArgumentList	\"read_only\"
>2612	Argument	\"read_only\"
>2613	PrimaryExpression	\"read_only\"
>2614	Callee	obj . value
>2615	MemberAccess	obj . value
>2616	Identifier	value
>2617	Identifier	obj
>2618	Identifier	ro
>2619	Identifier	ro
>2620	IdentifierDeclType	QString
>2621	IdentifierDeclStatement	 
>2622	IdentifierDecl	rw = obj . value ( \"read_write\" ) . toString ( )
>2623	AssignmentExpr	rw = obj . value ( \"read_write\" ) . toString ( )
>2624	CallExpression	obj . value ( \"read_write\" ) . toString ( )
>2625	ArgumentList	 
>2626	Callee	obj . value ( \"read_write\" ) . toString
>2627	MemberAccess	obj . value ( \"read_write\" ) . toString
>2628	Identifier	toString
>2629	CallExpression	obj . value ( \"read_write\" )
>2630	ArgumentList	\"read_write\"
>2631	Argument	\"read_write\"
>2632	PrimaryExpression	\"read_write\"
>2633	Callee	obj . value
>2634	MemberAccess	obj . value
>2635	Identifier	value
>2636	Identifier	obj
>2637	Identifier	rw
>2638	Identifier	rw
>2639	IdentifierDeclType	QString
>2640	IdentifierDeclStatement	 
>2641	IdentifierDecl	obj = doc . object ( )
>2642	AssignmentExpr	obj = doc . object ( )
>2643	CallExpression	doc . object ( )
>2644	ArgumentList	 
>2645	Callee	doc . object
>2646	MemberAccess	doc . object
>2647	Identifier	object
>2648	Identifier	doc
>2649	Identifier	obj
>2650	Identifier	obj
>2651	IdentifierDeclType	QJsonObject
>2652	IfStatement	if ( checkForError ( doc , notifier ) )
>2653	ReturnStatement	 
>2654	Condition	 
>2655	CallExpression	checkForError ( doc , notifier )
>2656	ArgumentList	doc
>2657	Argument	notifier
>2658	Identifier	notifier
>2659	Argument	doc
>2660	Identifier	doc
>2661	Callee	checkForError
>2662	Identifier	checkForError
>2663	IdentifierDeclStatement	 
>2664	IdentifierDecl	doc = QJsonDocument 
>2665	AssignmentExpr	doc = QJsonDocument 
>2666	CallExpression	QJsonDocument 
>2667	ArgumentList	reply -> readAll ( )
>2668	Argument	reply -> readAll ( )
>2669	CallExpression	reply -> readAll ( )
>2670	ArgumentList	 
>2671	Callee	reply -> readAll
>2672	PtrMemberAccess	reply -> readAll
>2673	Identifier	readAll
>2674	Identifier	reply
>2675	Callee	QJsonDocument 
>2676	Identifier	QJsonDocument 
>2677	Identifier	doc
>2678	Identifier	doc
>2679	IdentifierDeclType	QJsonDocument
>2680	IfStatement	if ( checkForError ( reply , notifier ) )
>2681	ReturnStatement	 
>2682	Condition	 
>2683	CallExpression	checkForError ( reply , notifier )
>2684	ArgumentList	reply
>2685	Argument	notifier
>2686	Identifier	notifier
>2687	Argument	reply
>2688	Identifier	reply
>2689	Callee	checkForError
>2690	Identifier	checkForError
>2691	ExpressionStatement	 
>2692	CallExpression	notifier -> deleteLater ( )
>2693	ArgumentList	 
>2694	Callee	notifier -> deleteLater
>2695	PtrMemberAccess	notifier -> deleteLater
>2696	Identifier	deleteLater
>2697	Identifier	notifier
>2698	Statement	 
>2699	Statement	 
>2700	Statement	 
>2701	Statement	 
>2702	Statement	 
>2703	Statement	 
>2704	Statement	 
>2705	Statement	 
>2706	Statement	 
>2707	Statement	 
>2708	Statement	 
>2709	Statement	 
>2710	Statement	 
>2711	Statement	 
>2712	Statement	 
>2713	Statement	 
>2714	Statement	 
>2715	Statement	 
>2716	Statement	 
>2717	Statement	 
>2718	IdentifierDeclStatement	 
>2719	IdentifierDecl	* notifier = new BtsApiNotifier ( this )
>2720	AssignmentExpr	* notifier = new BtsApiNotifier ( this )
>2721	Identifier	this
>2722	Identifier	this
>2723	Identifier	notifier
>2724	IdentifierDeclType	BtsApiNotifier *
>2725	IdentifierDeclStatement	 
>2726	IdentifierDecl	* reply = p -> nam -> get ( QNetworkRequest ( apiUrl ) )
>2727	AssignmentExpr	* reply = p -> nam -> get ( QNetworkRequest ( apiUrl ) )
>2728	CallExpression	p -> nam -> get ( QNetworkRequest ( apiUrl ) )
>2729	ArgumentList	QNetworkRequest ( apiUrl )
>2730	Argument	QNetworkRequest ( apiUrl )
>2731	CallExpression	QNetworkRequest ( apiUrl )
>2732	ArgumentList	apiUrl
>2733	Argument	apiUrl
>2734	Identifier	apiUrl
>2735	Callee	QNetworkRequest
>2736	Identifier	QNetworkRequest
>2737	Callee	p -> nam -> get
>2738	PtrMemberAccess	p -> nam -> get
>2739	Identifier	get
>2740	PtrMemberAccess	p -> nam
>2741	Identifier	nam
>2742	Identifier	p
>2743	Identifier	reply
>2744	Identifier	reply
>2745	IdentifierDeclType	QNetworkReply *
>2746	IdentifierDeclStatement	 
>2747	IdentifierDecl	apiUrl = getApiUrl ( p , \"get_secrets\" , ql )
>2748	AssignmentExpr	apiUrl = getApiUrl ( p , \"get_secrets\" , ql )
>2749	CallExpression	getApiUrl ( p , \"get_secrets\" , ql )
>2750	ArgumentList	p
>2751	Argument	ql
>2752	Identifier	ql
>2753	Argument	\"get_secrets\"
>2754	PrimaryExpression	\"get_secrets\"
>2755	Argument	p
>2756	Identifier	p
>2757	Callee	getApiUrl
>2758	Identifier	getApiUrl
>2759	Identifier	apiUrl
>2760	Identifier	apiUrl
>2761	IdentifierDeclType	QUrl
>2762	IfStatement	if ( encryption )
>2763	ExpressionStatement	 
>2764	ShiftExpression	ql << QueryPair ( \"type\" , \"encryption\" )
>2765	CallExpression	QueryPair ( \"type\" , \"encryption\" )
>2766	ArgumentList	\"type\"
>2767	Argument	\"encryption\"
>2768	PrimaryExpression	\"encryption\"
>2769	Argument	\"type\"
>2770	PrimaryExpression	\"type\"
>2771	Callee	QueryPair
>2772	Identifier	QueryPair
>2773	Identifier	ql
>2774	Condition	 
>2775	Identifier	encryption
>2776	IfStatement	if ( ! secret . isEmpty ( ) )
>2777	ExpressionStatement	 
>2778	ShiftExpression	ql << QueryPair ( \"secret\" , secret )
>2779	CallExpression	QueryPair ( \"secret\" , secret )
>2780	ArgumentList	\"secret\"
>2781	Argument	secret
>2782	Identifier	secret
>2783	Argument	\"secret\"
>2784	PrimaryExpression	\"secret\"
>2785	Callee	QueryPair
>2786	Identifier	QueryPair
>2787	Identifier	ql
>2788	Condition	 
>2789	UnaryOp	! secret . isEmpty ( )
>2790	CallExpression	secret . isEmpty ( )
>2791	ArgumentList	 
>2792	Callee	secret . isEmpty
>2793	MemberAccess	secret . isEmpty
>2794	Identifier	isEmpty
>2795	Identifier	secret
>2796	UnaryOperator	!
>2797	IdentifierDeclStatement	 
>2798	IdentifierDecl	ql
>2799	Identifier	ql
>2800	IdentifierDeclType	QueryList
>2838	FunctionDef	BtsApi 
>2839	ParameterList	bool encryption , const QUuid & uuid
>2840	Parameter	 
>2841	Identifier	uuid
>2842	ParameterType	const QUuid &
>2843	Parameter	 
>2844	Identifier	encryption
>2845	ParameterType	bool
>2846	ReturnType	BtsApiNotifier *
>2847	CompoundStatement	 
>2848	ReturnStatement	 
>2849	CallExpression	getSecrets ( encryption , QString ( ) , uuid )
>2850	ArgumentList	encryption
>2851	Argument	uuid
>2852	Identifier	uuid
>2853	Argument	QString ( )
>2854	CallExpression	QString ( )
>2855	ArgumentList	 
>2856	Callee	QString
>2857	Identifier	QString
>2858	Argument	encryption
>2859	Identifier	encryption
>2860	Callee	getSecrets
>2861	Identifier	getSecrets
>2869	FunctionDef	BtsApi 
>2870	ParameterList	const QUuid & uuid
>2871	Parameter	 
>2872	Identifier	uuid
>2873	ParameterType	const QUuid &
>2874	ReturnType	BtsApiNotifier *
>2875	CompoundStatement	 
>2876	ReturnStatement	 
>2877	CallExpression	getSecrets ( false , QString ( ) , uuid )
>2878	ArgumentList	false
>2879	Argument	uuid
>2880	Identifier	uuid
>2881	Argument	QString ( )
>2882	CallExpression	QString ( )
>2883	ArgumentList	 
>2884	Callee	QString
>2885	Identifier	QString
>2886	Argument	false
>2887	Identifier	false
>2888	Callee	getSecrets
>2889	Identifier	getSecrets
>2897	FunctionDef	BtsApi 
>2898	ParameterList	const QString & secret
>2899	Parameter	 
>2900	Identifier	secret
>2901	ParameterType	const QString &
>2902	ReturnType	BtsApiNotifier *
>2903	CompoundStatement	 
>2904	ReturnStatement	 
>2905	CallExpression	getSecrets ( false , secret )
>2906	ArgumentList	false
>2907	Argument	secret
>2908	Identifier	secret
>2909	Argument	false
>2910	Identifier	false
>2911	Callee	getSecrets
>2912	Identifier	getSecrets
>2919	FunctionDef	BtsApi 
>2920	ParameterList	const QString & secret
>2921	Parameter	 
>2922	Identifier	secret
>2923	ParameterType	const QString &
>2924	ReturnType	BtsApiNotifier *
>2925	CompoundStatement	 
>2926	ReturnStatement	 
>2927	Identifier	notifier
>2928	ExpressionStatement	 
>2929	Statement	 
>2930	CompoundStatement	 
>2931	ExpressionStatement	 
>2932	CallExpression	notifier -> getFolderPrefsResult ( res , secret )
>2933	ArgumentList	res
>2934	Argument	secret
>2935	Identifier	secret
>2936	Argument	res
>2937	Identifier	res
>2938	Callee	notifier -> getFolderPrefsResult
>2939	PtrMemberAccess	notifier -> getFolderPrefsResult
>2940	Identifier	getFolderPrefsResult
>2941	Identifier	notifier
>2942	Statement	 
>2943	IdentifierDeclStatement	 
>2944	IdentifierDecl	getFolderPrefsResult ( res , secret )
>2945	Expression	res , secret
>2946	Identifier	secret
>2947	Identifier	res
>2948	Identifier	getFolderPrefsResult
>2949	IdentifierDeclType	emit
>2950	ExpressionStatement	 
>2951	AssignmentExpr	res [ it . key ( ) ] = it . value ( ) . toVariant ( )
>2952	CallExpression	it . value ( ) . toVariant ( )
>2953	ArgumentList	 
>2954	Callee	it . value ( ) . toVariant
>2955	MemberAccess	it . value ( ) . toVariant
>2956	Identifier	toVariant
>2957	CallExpression	it . value ( )
>2958	ArgumentList	 
>2959	Callee	it . value
>2960	MemberAccess	it . value
>2961	Identifier	value
>2962	Identifier	it
>2963	ArrayIndexing	res [ it . key ( ) ]
>2964	CallExpression	it . key ( )
>2965	ArgumentList	 
>2966	Callee	it . key
>2967	MemberAccess	it . key
>2968	Identifier	key
>2969	Identifier	it
>2970	Identifier	res
>2971	Statement	 
>2972	Statement	 
>2973	Statement	 
>2974	ExpressionStatement	 
>2975	EqualityExpression	it != obj . constEnd ( )
>2976	CallExpression	obj . constEnd ( )
>2977	ArgumentList	 
>2978	Callee	obj . constEnd
>2979	MemberAccess	obj . constEnd
>2980	Identifier	constEnd
>2981	Identifier	obj
>2982	Identifier	it
>2983	ExpressionStatement	 
>2984	AssignmentExpr	it = obj . constBegin ( )
>2985	CallExpression	obj . constBegin ( )
>2986	ArgumentList	 
>2987	Callee	obj . constBegin
>2988	MemberAccess	obj . constBegin
>2989	Identifier	constBegin
>2990	Identifier	obj
>2991	Identifier	it
>2992	Statement	 
>2993	Statement	 
>2994	Statement	 
>2995	IdentifierDeclStatement	 
>2996	IdentifierDecl	res
>2997	Identifier	res
>2998	IdentifierDeclType	QVariantHash
>2999	IdentifierDeclStatement	 
>3000	IdentifierDecl	obj = doc . object ( )
>3001	AssignmentExpr	obj = doc . object ( )
>3002	CallExpression	doc . object ( )
>3003	ArgumentList	 
>3004	Callee	doc . object
>3005	MemberAccess	doc . object
>3006	Identifier	object
>3007	Identifier	doc
>3008	Identifier	obj
>3009	Identifier	obj
>3010	IdentifierDeclType	QJsonObject
>3011	IfStatement	if ( checkForError ( doc , notifier ) )
>3012	ReturnStatement	 
>3013	Condition	 
>3014	CallExpression	checkForError ( doc , notifier )
>3015	ArgumentList	doc
>3016	Argument	notifier
>3017	Identifier	notifier
>3018	Argument	doc
>3019	Identifier	doc
>3020	Callee	checkForError
>3021	Identifier	checkForError
>3022	IdentifierDeclStatement	 
>3023	IdentifierDecl	doc = QJsonDocument 
>3024	AssignmentExpr	doc = QJsonDocument 
>3025	CallExpression	QJsonDocument 
>3026	ArgumentList	reply -> readAll ( )
>3027	Argument	reply -> readAll ( )
>3028	CallExpression	reply -> readAll ( )
>3029	ArgumentList	 
>3030	Callee	reply -> readAll
>3031	PtrMemberAccess	reply -> readAll
>3032	Identifier	readAll
>3033	Identifier	reply
>3034	Callee	QJsonDocument 
>3035	Identifier	QJsonDocument 
>3036	Identifier	doc
>3037	Identifier	doc
>3038	IdentifierDeclType	QJsonDocument
>3039	IfStatement	if ( checkForError ( reply , notifier ) )
>3040	ReturnStatement	 
>3041	Condition	 
>3042	CallExpression	checkForError ( reply , notifier )
>3043	ArgumentList	reply
>3044	Argument	notifier
>3045	Identifier	notifier
>3046	Argument	reply
>3047	Identifier	reply
>3048	Callee	checkForError
>3049	Identifier	checkForError
>3050	ExpressionStatement	 
>3051	CallExpression	notifier -> deleteLater ( )
>3052	ArgumentList	 
>3053	Callee	notifier -> deleteLater
>3054	PtrMemberAccess	notifier -> deleteLater
>3055	Identifier	deleteLater
>3056	Identifier	notifier
>3057	Statement	 
>3058	Statement	 
>3059	Statement	 
>3060	Statement	 
>3061	Statement	 
>3062	Statement	 
>3063	Statement	 
>3064	Statement	 
>3065	Statement	 
>3066	Statement	 
>3067	Statement	 
>3068	Statement	 
>3069	Statement	 
>3070	Statement	 
>3071	Statement	 
>3072	Statement	 
>3073	Statement	 
>3074	Statement	 
>3075	Statement	 
>3076	Statement	 
>3077	IdentifierDeclStatement	 
>3078	IdentifierDecl	* notifier = new BtsApiNotifier ( this )
>3079	AssignmentExpr	* notifier = new BtsApiNotifier ( this )
>3080	Identifier	this
>3081	Identifier	this
>3082	Identifier	notifier
>3083	IdentifierDeclType	BtsApiNotifier *
>3084	IdentifierDeclStatement	 
>3085	IdentifierDecl	* reply = p -> nam -> get ( QNetworkRequest ( apiUrl ) )
>3086	AssignmentExpr	* reply = p -> nam -> get ( QNetworkRequest ( apiUrl ) )
>3087	CallExpression	p -> nam -> get ( QNetworkRequest ( apiUrl ) )
>3088	ArgumentList	QNetworkRequest ( apiUrl )
>3089	Argument	QNetworkRequest ( apiUrl )
>3090	CallExpression	QNetworkRequest ( apiUrl )
>3091	ArgumentList	apiUrl
>3092	Argument	apiUrl
>3093	Identifier	apiUrl
>3094	Callee	QNetworkRequest
>3095	Identifier	QNetworkRequest
>3096	Callee	p -> nam -> get
>3097	PtrMemberAccess	p -> nam -> get
>3098	Identifier	get
>3099	PtrMemberAccess	p -> nam
>3100	Identifier	nam
>3101	Identifier	p
>3102	Identifier	reply
>3103	Identifier	reply
>3104	IdentifierDeclType	QNetworkReply *
>3105	IdentifierDeclStatement	 
>3106	IdentifierDecl	apiUrl = getApiUrl ( p , \"get_folder_prefs\" , ql )
>3107	AssignmentExpr	apiUrl = getApiUrl ( p , \"get_folder_prefs\" , ql )
>3108	CallExpression	getApiUrl ( p , \"get_folder_prefs\" , ql )
>3109	ArgumentList	p
>3110	Argument	ql
>3111	Identifier	ql
>3112	Argument	\"get_folder_prefs\"
>3113	PrimaryExpression	\"get_folder_prefs\"
>3114	Argument	p
>3115	Identifier	p
>3116	Callee	getApiUrl
>3117	Identifier	getApiUrl
>3118	Identifier	apiUrl
>3119	Identifier	apiUrl
>3120	IdentifierDeclType	QUrl
>3121	ExpressionStatement	 
>3122	ShiftExpression	ql << QueryPair ( \"secret\" , secret )
>3123	CallExpression	QueryPair ( \"secret\" , secret )
>3124	ArgumentList	\"secret\"
>3125	Argument	secret
>3126	Identifier	secret
>3127	Argument	\"secret\"
>3128	PrimaryExpression	\"secret\"
>3129	Callee	QueryPair
>3130	Identifier	QueryPair
>3131	Identifier	ql
>3132	IdentifierDeclStatement	 
>3133	IdentifierDecl	ql
>3134	Identifier	ql
>3135	IdentifierDeclType	QueryList
>3170	FunctionDef	BtsApi 
>3171	ParameterList	const QString & secret , const QVariantHash & prefs
>3172	Parameter	 
>3173	Identifier	prefs
>3174	ParameterType	const QVariantHash &
>3175	Parameter	 
>3176	Identifier	secret
>3177	ParameterType	const QString &
>3178	ReturnType	BtsApiNotifier *
>3179	CompoundStatement	 
>3180	ReturnStatement	 
>3181	Identifier	notifier
>3182	ExpressionStatement	 
>3183	Statement	 
>3184	CompoundStatement	 
>3185	ExpressionStatement	 
>3186	CallExpression	notifier -> setFolderPrefsResult ( res , secret )
>3187	ArgumentList	res
>3188	Argument	secret
>3189	Identifier	secret
>3190	Argument	res
>3191	Identifier	res
>3192	Callee	notifier -> setFolderPrefsResult
>3193	PtrMemberAccess	notifier -> setFolderPrefsResult
>3194	Identifier	setFolderPrefsResult
>3195	Identifier	notifier
>3196	Statement	 
>3197	IdentifierDeclStatement	 
>3198	IdentifierDecl	setFolderPrefsResult ( res , secret )
>3199	Expression	res , secret
>3200	Identifier	secret
>3201	Identifier	res
>3202	Identifier	setFolderPrefsResult
>3203	IdentifierDeclType	emit
>3204	ExpressionStatement	 
>3205	AssignmentExpr	res [ it . key ( ) ] = it . value ( ) . toVariant ( )
>3206	CallExpression	it . value ( ) . toVariant ( )
>3207	ArgumentList	 
>3208	Callee	it . value ( ) . toVariant
>3209	MemberAccess	it . value ( ) . toVariant
>3210	Identifier	toVariant
>3211	CallExpression	it . value ( )
>3212	ArgumentList	 
>3213	Callee	it . value
>3214	MemberAccess	it . value
>3215	Identifier	value
>3216	Identifier	it
>3217	ArrayIndexing	res [ it . key ( ) ]
>3218	CallExpression	it . key ( )
>3219	ArgumentList	 
>3220	Callee	it . key
>3221	MemberAccess	it . key
>3222	Identifier	key
>3223	Identifier	it
>3224	Identifier	res
>3225	Statement	 
>3226	Statement	 
>3227	Statement	 
>3228	ExpressionStatement	 
>3229	EqualityExpression	it != obj . constEnd ( )
>3230	CallExpression	obj . constEnd ( )
>3231	ArgumentList	 
>3232	Callee	obj . constEnd
>3233	MemberAccess	obj . constEnd
>3234	Identifier	constEnd
>3235	Identifier	obj
>3236	Identifier	it
>3237	ExpressionStatement	 
>3238	AssignmentExpr	it = obj . constBegin ( )
>3239	CallExpression	obj . constBegin ( )
>3240	ArgumentList	 
>3241	Callee	obj . constBegin
>3242	MemberAccess	obj . constBegin
>3243	Identifier	constBegin
>3244	Identifier	obj
>3245	Identifier	it
>3246	Statement	 
>3247	Statement	 
>3248	Statement	 
>3249	IdentifierDeclStatement	 
>3250	IdentifierDecl	res
>3251	Identifier	res
>3252	IdentifierDeclType	QVariantHash
>3253	IdentifierDeclStatement	 
>3254	IdentifierDecl	obj = doc . object ( )
>3255	AssignmentExpr	obj = doc . object ( )
>3256	CallExpression	doc . object ( )
>3257	ArgumentList	 
>3258	Callee	doc . object
>3259	MemberAccess	doc . object
>3260	Identifier	object
>3261	Identifier	doc
>3262	Identifier	obj
>3263	Identifier	obj
>3264	IdentifierDeclType	QJsonObject
>3265	IfStatement	if ( checkForError ( doc , notifier ) )
>3266	ReturnStatement	 
>3267	Condition	 
>3268	CallExpression	checkForError ( doc , notifier )
>3269	ArgumentList	doc
>3270	Argument	notifier
>3271	Identifier	notifier
>3272	Argument	doc
>3273	Identifier	doc
>3274	Callee	checkForError
>3275	Identifier	checkForError
>3276	IdentifierDeclStatement	 
>3277	IdentifierDecl	doc = QJsonDocument 
>3278	AssignmentExpr	doc = QJsonDocument 
>3279	CallExpression	QJsonDocument 
>3280	ArgumentList	reply -> readAll ( )
>3281	Argument	reply -> readAll ( )
>3282	CallExpression	reply -> readAll ( )
>3283	ArgumentList	 
>3284	Callee	reply -> readAll
>3285	PtrMemberAccess	reply -> readAll
>3286	Identifier	readAll
>3287	Identifier	reply
>3288	Callee	QJsonDocument 
>3289	Identifier	QJsonDocument 
>3290	Identifier	doc
>3291	Identifier	doc
>3292	IdentifierDeclType	QJsonDocument
>3293	IfStatement	if ( checkForError ( reply , notifier ) )
>3294	ReturnStatement	 
>3295	Condition	 
>3296	CallExpression	checkForError ( reply , notifier )
>3297	ArgumentList	reply
>3298	Argument	notifier
>3299	Identifier	notifier
>3300	Argument	reply
>3301	Identifier	reply
>3302	Callee	checkForError
>3303	Identifier	checkForError
>3304	ExpressionStatement	 
>3305	CallExpression	notifier -> deleteLater ( )
>3306	ArgumentList	 
>3307	Callee	notifier -> deleteLater
>3308	PtrMemberAccess	notifier -> deleteLater
>3309	Identifier	deleteLater
>3310	Identifier	notifier
>3311	Statement	 
>3312	Statement	 
>3313	Statement	 
>3314	Statement	 
>3315	Statement	 
>3316	Statement	 
>3317	Statement	 
>3318	Statement	 
>3319	Statement	 
>3320	Statement	 
>3321	Statement	 
>3322	Statement	 
>3323	Statement	 
>3324	Statement	 
>3325	Statement	 
>3326	Statement	 
>3327	Statement	 
>3328	Statement	 
>3329	Statement	 
>3330	Statement	 
>3331	IdentifierDeclStatement	 
>3332	IdentifierDecl	* notifier = new BtsApiNotifier ( this )
>3333	AssignmentExpr	* notifier = new BtsApiNotifier ( this )
>3334	Identifier	this
>3335	Identifier	this
>3336	Identifier	notifier
>3337	IdentifierDeclType	BtsApiNotifier *
>3338	IdentifierDeclStatement	 
>3339	IdentifierDecl	* reply = p -> nam -> get ( QNetworkRequest ( apiUrl ) )
>3340	AssignmentExpr	* reply = p -> nam -> get ( QNetworkRequest ( apiUrl ) )
>3341	CallExpression	p -> nam -> get ( QNetworkRequest ( apiUrl ) )
>3342	ArgumentList	QNetworkRequest ( apiUrl )
>3343	Argument	QNetworkRequest ( apiUrl )
>3344	CallExpression	QNetworkRequest ( apiUrl )
>3345	ArgumentList	apiUrl
>3346	Argument	apiUrl
>3347	Identifier	apiUrl
>3348	Callee	QNetworkRequest
>3349	Identifier	QNetworkRequest
>3350	Callee	p -> nam -> get
>3351	PtrMemberAccess	p -> nam -> get
>3352	Identifier	get
>3353	PtrMemberAccess	p -> nam
>3354	Identifier	nam
>3355	Identifier	p
>3356	Identifier	reply
>3357	Identifier	reply
>3358	IdentifierDeclType	QNetworkReply *
>3359	IdentifierDeclStatement	 
>3360	IdentifierDecl	apiUrl = getApiUrl ( p , \"set_folder_prefs\" , ql )
>3361	AssignmentExpr	apiUrl = getApiUrl ( p , \"set_folder_prefs\" , ql )
>3362	CallExpression	getApiUrl ( p , \"set_folder_prefs\" , ql )
>3363	ArgumentList	p
>3364	Argument	ql
>3365	Identifier	ql
>3366	Argument	\"set_folder_prefs\"
>3367	PrimaryExpression	\"set_folder_prefs\"
>3368	Argument	p
>3369	Identifier	p
>3370	Callee	getApiUrl
>3371	Identifier	getApiUrl
>3372	Identifier	apiUrl
>3373	Identifier	apiUrl
>3374	IdentifierDeclType	QUrl
>3375	ExpressionStatement	 
>3376	ShiftExpression	ql << QueryPair ( it . key ( ) , it . value ( ) . toString ( ) )
>3377	CallExpression	QueryPair ( it . key ( ) , it . value ( ) . toString ( ) )
>3378	ArgumentList	it . key ( )
>3379	Argument	it . value ( ) . toString ( )
>3380	CallExpression	it . value ( ) . toString ( )
>3381	ArgumentList	 
>3382	Callee	it . value ( ) . toString
>3383	MemberAccess	it . value ( ) . toString
>3384	Identifier	toString
>3385	CallExpression	it . value ( )
>3386	ArgumentList	 
>3387	Callee	it . value
>3388	MemberAccess	it . value
>3389	Identifier	value
>3390	Identifier	it
>3391	Argument	it . key ( )
>3392	CallExpression	it . key ( )
>3393	ArgumentList	 
>3394	Callee	it . key
>3395	MemberAccess	it . key
>3396	Identifier	key
>3397	Identifier	it
>3398	Callee	QueryPair
>3399	Identifier	QueryPair
>3400	Identifier	ql
>3401	Statement	 
>3402	Statement	 
>3403	Statement	 
>3404	ExpressionStatement	 
>3405	EqualityExpression	it != prefs . constEnd ( )
>3406	CallExpression	prefs . constEnd ( )
>3407	ArgumentList	 
>3408	Callee	prefs . constEnd
>3409	MemberAccess	prefs . constEnd
>3410	Identifier	constEnd
>3411	Identifier	prefs
>3412	Identifier	it
>3413	ExpressionStatement	 
>3414	AssignmentExpr	it = prefs . constBegin ( )
>3415	CallExpression	prefs . constBegin ( )
>3416	ArgumentList	 
>3417	Callee	prefs . constBegin
>3418	MemberAccess	prefs . constBegin
>3419	Identifier	constBegin
>3420	Identifier	prefs
>3421	Identifier	it
>3422	Statement	 
>3423	Statement	 
>3424	Statement	 
>3425	ExpressionStatement	 
>3426	ShiftExpression	ql << QueryPair ( \"secret\" , secret )
>3427	CallExpression	QueryPair ( \"secret\" , secret )
>3428	ArgumentList	\"secret\"
>3429	Argument	secret
>3430	Identifier	secret
>3431	Argument	\"secret\"
>3432	PrimaryExpression	\"secret\"
>3433	Callee	QueryPair
>3434	Identifier	QueryPair
>3435	Identifier	ql
>3436	IdentifierDeclStatement	 
>3437	IdentifierDecl	ql
>3438	Identifier	ql
>3439	IdentifierDeclType	QueryList
>3477	FunctionDef	BtsApi 
>3478	ParameterList	const QString & secret
>3479	Parameter	 
>3480	Identifier	secret
>3481	ParameterType	const QString &
>3482	ReturnType	BtsApiNotifier *
>3483	CompoundStatement	 
>3484	ReturnStatement	 
>3485	Identifier	notifier
>3486	ExpressionStatement	 
>3487	Statement	 
>3488	CompoundStatement	 
>3489	ExpressionStatement	 
>3490	CallExpression	notifier -> getFolderHostsResult ( res , secret )
>3491	ArgumentList	res
>3492	Argument	secret
>3493	Identifier	secret
>3494	Argument	res
>3495	Identifier	res
>3496	Callee	notifier -> getFolderHostsResult
>3497	PtrMemberAccess	notifier -> getFolderHostsResult
>3498	Identifier	getFolderHostsResult
>3499	Identifier	notifier
>3500	Statement	 
>3501	IdentifierDeclStatement	 
>3502	IdentifierDecl	getFolderHostsResult ( res , secret )
>3503	Expression	res , secret
>3504	Identifier	secret
>3505	Identifier	res
>3506	Identifier	getFolderHostsResult
>3507	IdentifierDeclType	emit
>3508	ExpressionStatement	 
>3509	ShiftExpression	res << val . toString ( )
>3510	CallExpression	val . toString ( )
>3511	ArgumentList	 
>3512	Callee	val . toString
>3513	MemberAccess	val . toString
>3514	Identifier	toString
>3515	Identifier	val
>3516	Identifier	res
>3517	Statement	 
>3518	Statement	 
>3519	Label	 
>3520	Identifier	val
>3521	Statement	 
>3522	Statement	 
>3523	Statement	 
>3524	Statement	 
>3525	Statement	 
>3526	IdentifierDeclStatement	 
>3527	IdentifierDecl	res
>3528	Identifier	res
>3529	IdentifierDeclType	QStringList
>3530	IdentifierDeclStatement	 
>3531	IdentifierDecl	arr = obj . value ( \"hosts\" ) . toArray ( )
>3532	AssignmentExpr	arr = obj . value ( \"hosts\" ) . toArray ( )
>3533	CallExpression	obj . value ( \"hosts\" ) . toArray ( )
>3534	ArgumentList	 
>3535	Callee	obj . value ( \"hosts\" ) . toArray
>3536	MemberAccess	obj . value ( \"hosts\" ) . toArray
>3537	Identifier	toArray
>3538	CallExpression	obj . value ( \"hosts\" )
>3539	ArgumentList	\"hosts\"
>3540	Argument	\"hosts\"
>3541	PrimaryExpression	\"hosts\"
>3542	Callee	obj . value
>3543	MemberAccess	obj . value
>3544	Identifier	value
>3545	Identifier	obj
>3546	Identifier	arr
>3547	Identifier	arr
>3548	IdentifierDeclType	QJsonArray
>3549	IdentifierDeclStatement	 
>3550	IdentifierDecl	obj = doc . object ( )
>3551	AssignmentExpr	obj = doc . object ( )
>3552	CallExpression	doc . object ( )
>3553	ArgumentList	 
>3554	Callee	doc . object
>3555	MemberAccess	doc . object
>3556	Identifier	object
>3557	Identifier	doc
>3558	Identifier	obj
>3559	Identifier	obj
>3560	IdentifierDeclType	QJsonObject
>3561	IfStatement	if ( checkForError ( doc , notifier ) )
>3562	ReturnStatement	 
>3563	Condition	 
>3564	CallExpression	checkForError ( doc , notifier )
>3565	ArgumentList	doc
>3566	Argument	notifier
>3567	Identifier	notifier
>3568	Argument	doc
>3569	Identifier	doc
>3570	Callee	checkForError
>3571	Identifier	checkForError
>3572	IdentifierDeclStatement	 
>3573	IdentifierDecl	doc = QJsonDocument 
>3574	AssignmentExpr	doc = QJsonDocument 
>3575	CallExpression	QJsonDocument 
>3576	ArgumentList	reply -> readAll ( )
>3577	Argument	reply -> readAll ( )
>3578	CallExpression	reply -> readAll ( )
>3579	ArgumentList	 
>3580	Callee	reply -> readAll
>3581	PtrMemberAccess	reply -> readAll
>3582	Identifier	readAll
>3583	Identifier	reply
>3584	Callee	QJsonDocument 
>3585	Identifier	QJsonDocument 
>3586	Identifier	doc
>3587	Identifier	doc
>3588	IdentifierDeclType	QJsonDocument
>3589	IfStatement	if ( checkForError ( reply , notifier ) )
>3590	ReturnStatement	 
>3591	Condition	 
>3592	CallExpression	checkForError ( reply , notifier )
>3593	ArgumentList	reply
>3594	Argument	notifier
>3595	Identifier	notifier
>3596	Argument	reply
>3597	Identifier	reply
>3598	Callee	checkForError
>3599	Identifier	checkForError
>3600	ExpressionStatement	 
>3601	CallExpression	notifier -> deleteLater ( )
>3602	ArgumentList	 
>3603	Callee	notifier -> deleteLater
>3604	PtrMemberAccess	notifier -> deleteLater
>3605	Identifier	deleteLater
>3606	Identifier	notifier
>3607	Statement	 
>3608	Statement	 
>3609	Statement	 
>3610	Statement	 
>3611	Statement	 
>3612	Statement	 
>3613	Statement	 
>3614	Statement	 
>3615	Statement	 
>3616	Statement	 
>3617	Statement	 
>3618	Statement	 
>3619	Statement	 
>3620	Statement	 
>3621	Statement	 
>3622	Statement	 
>3623	Statement	 
>3624	Statement	 
>3625	Statement	 
>3626	Statement	 
>3627	IdentifierDeclStatement	 
>3628	IdentifierDecl	* notifier = new BtsApiNotifier ( this )
>3629	AssignmentExpr	* notifier = new BtsApiNotifier ( this )
>3630	Identifier	this
>3631	Identifier	this
>3632	Identifier	notifier
>3633	IdentifierDeclType	BtsApiNotifier *
>3634	IdentifierDeclStatement	 
>3635	IdentifierDecl	* reply = p -> nam -> get ( QNetworkRequest ( apiUrl ) )
>3636	AssignmentExpr	* reply = p -> nam -> get ( QNetworkRequest ( apiUrl ) )
>3637	CallExpression	p -> nam -> get ( QNetworkRequest ( apiUrl ) )
>3638	ArgumentList	QNetworkRequest ( apiUrl )
>3639	Argument	QNetworkRequest ( apiUrl )
>3640	CallExpression	QNetworkRequest ( apiUrl )
>3641	ArgumentList	apiUrl
>3642	Argument	apiUrl
>3643	Identifier	apiUrl
>3644	Callee	QNetworkRequest
>3645	Identifier	QNetworkRequest
>3646	Callee	p -> nam -> get
>3647	PtrMemberAccess	p -> nam -> get
>3648	Identifier	get
>3649	PtrMemberAccess	p -> nam
>3650	Identifier	nam
>3651	Identifier	p
>3652	Identifier	reply
>3653	Identifier	reply
>3654	IdentifierDeclType	QNetworkReply *
>3655	IdentifierDeclStatement	 
>3656	IdentifierDecl	apiUrl = getApiUrl ( p , \"get_folder_hosts\" , ql )
>3657	AssignmentExpr	apiUrl = getApiUrl ( p , \"get_folder_hosts\" , ql )
>3658	CallExpression	getApiUrl ( p , \"get_folder_hosts\" , ql )
>3659	ArgumentList	p
>3660	Argument	ql
>3661	Identifier	ql
>3662	Argument	\"get_folder_hosts\"
>3663	PrimaryExpression	\"get_folder_hosts\"
>3664	Argument	p
>3665	Identifier	p
>3666	Callee	getApiUrl
>3667	Identifier	getApiUrl
>3668	Identifier	apiUrl
>3669	Identifier	apiUrl
>3670	IdentifierDeclType	QUrl
>3671	ExpressionStatement	 
>3672	ShiftExpression	ql << QueryPair ( \"secret\" , secret )
>3673	CallExpression	QueryPair ( \"secret\" , secret )
>3674	ArgumentList	\"secret\"
>3675	Argument	secret
>3676	Identifier	secret
>3677	Argument	\"secret\"
>3678	PrimaryExpression	\"secret\"
>3679	Callee	QueryPair
>3680	Identifier	QueryPair
>3681	Identifier	ql
>3682	IdentifierDeclStatement	 
>3683	IdentifierDecl	ql
>3684	Identifier	ql
>3685	IdentifierDeclType	QueryList
>3716	FunctionDef	BtsApi 
>3717	ParameterList	const QString & secret , const QStringList & hosts
>3718	Parameter	 
>3719	Identifier	hosts
>3720	ParameterType	const QStringList &
>3721	Parameter	 
>3722	Identifier	secret
>3723	ParameterType	const QString &
>3724	ReturnType	BtsApiNotifier *
>3725	CompoundStatement	 
>3726	ReturnStatement	 
>3727	Identifier	notifier
>3728	ExpressionStatement	 
>3729	Statement	 
>3730	CompoundStatement	 
>3731	ExpressionStatement	 
>3732	CallExpression	notifier -> setFolderHostsResult ( res , secret )
>3733	ArgumentList	res
>3734	Argument	secret
>3735	Identifier	secret
>3736	Argument	res
>3737	Identifier	res
>3738	Callee	notifier -> setFolderHostsResult
>3739	PtrMemberAccess	notifier -> setFolderHostsResult
>3740	Identifier	setFolderHostsResult
>3741	Identifier	notifier
>3742	Statement	 
>3743	IdentifierDeclStatement	 
>3744	IdentifierDecl	setFolderHostsResult ( res , secret )
>3745	Expression	res , secret
>3746	Identifier	secret
>3747	Identifier	res
>3748	Identifier	setFolderHostsResult
>3749	IdentifierDeclType	emit
>3750	ExpressionStatement	 
>3751	ShiftExpression	res << val . toString ( )
>3752	CallExpression	val . toString ( )
>3753	ArgumentList	 
>3754	Callee	val . toString
>3755	MemberAccess	val . toString
>3756	Identifier	toString
>3757	Identifier	val
>3758	Identifier	res
>3759	Statement	 
>3760	Statement	 
>3761	Label	 
>3762	Identifier	val
>3763	Statement	 
>3764	Statement	 
>3765	Statement	 
>3766	Statement	 
>3767	Statement	 
>3768	IdentifierDeclStatement	 
>3769	IdentifierDecl	res
>3770	Identifier	res
>3771	IdentifierDeclType	QStringList
>3772	IdentifierDeclStatement	 
>3773	IdentifierDecl	arr = obj . value ( \"hosts\" ) . toArray ( )
>3774	AssignmentExpr	arr = obj . value ( \"hosts\" ) . toArray ( )
>3775	CallExpression	obj . value ( \"hosts\" ) . toArray ( )
>3776	ArgumentList	 
>3777	Callee	obj . value ( \"hosts\" ) . toArray
>3778	MemberAccess	obj . value ( \"hosts\" ) . toArray
>3779	Identifier	toArray
>3780	CallExpression	obj . value ( \"hosts\" )
>3781	ArgumentList	\"hosts\"
>3782	Argument	\"hosts\"
>3783	PrimaryExpression	\"hosts\"
>3784	Callee	obj . value
>3785	MemberAccess	obj . value
>3786	Identifier	value
>3787	Identifier	obj
>3788	Identifier	arr
>3789	Identifier	arr
>3790	IdentifierDeclType	QJsonArray
>3791	IdentifierDeclStatement	 
>3792	IdentifierDecl	obj = doc . object ( )
>3793	AssignmentExpr	obj = doc . object ( )
>3794	CallExpression	doc . object ( )
>3795	ArgumentList	 
>3796	Callee	doc . object
>3797	MemberAccess	doc . object
>3798	Identifier	object
>3799	Identifier	doc
>3800	Identifier	obj
>3801	Identifier	obj
>3802	IdentifierDeclType	QJsonObject
>3803	IfStatement	if ( checkForError ( doc , notifier ) )
>3804	ReturnStatement	 
>3805	Condition	 
>3806	CallExpression	checkForError ( doc , notifier )
>3807	ArgumentList	doc
>3808	Argument	notifier
>3809	Identifier	notifier
>3810	Argument	doc
>3811	Identifier	doc
>3812	Callee	checkForError
>3813	Identifier	checkForError
>3814	IdentifierDeclStatement	 
>3815	IdentifierDecl	doc = QJsonDocument 
>3816	AssignmentExpr	doc = QJsonDocument 
>3817	CallExpression	QJsonDocument 
>3818	ArgumentList	reply -> readAll ( )
>3819	Argument	reply -> readAll ( )
>3820	CallExpression	reply -> readAll ( )
>3821	ArgumentList	 
>3822	Callee	reply -> readAll
>3823	PtrMemberAccess	reply -> readAll
>3824	Identifier	readAll
>3825	Identifier	reply
>3826	Callee	QJsonDocument 
>3827	Identifier	QJsonDocument 
>3828	Identifier	doc
>3829	Identifier	doc
>3830	IdentifierDeclType	QJsonDocument
>3831	IfStatement	if ( checkForError ( reply , notifier ) )
>3832	ReturnStatement	 
>3833	Condition	 
>3834	CallExpression	checkForError ( reply , notifier )
>3835	ArgumentList	reply
>3836	Argument	notifier
>3837	Identifier	notifier
>3838	Argument	reply
>3839	Identifier	reply
>3840	Callee	checkForError
>3841	Identifier	checkForError
>3842	ExpressionStatement	 
>3843	CallExpression	notifier -> deleteLater ( )
>3844	ArgumentList	 
>3845	Callee	notifier -> deleteLater
>3846	PtrMemberAccess	notifier -> deleteLater
>3847	Identifier	deleteLater
>3848	Identifier	notifier
>3849	Statement	 
>3850	Statement	 
>3851	Statement	 
>3852	Statement	 
>3853	Statement	 
>3854	Statement	 
>3855	Statement	 
>3856	Statement	 
>3857	Statement	 
>3858	Statement	 
>3859	Statement	 
>3860	Statement	 
>3861	Statement	 
>3862	Statement	 
>3863	Statement	 
>3864	Statement	 
>3865	Statement	 
>3866	Statement	 
>3867	Statement	 
>3868	Statement	 
>3869	IdentifierDeclStatement	 
>3870	IdentifierDecl	* notifier = new BtsApiNotifier ( this )
>3871	AssignmentExpr	* notifier = new BtsApiNotifier ( this )
>3872	Identifier	this
>3873	Identifier	this
>3874	Identifier	notifier
>3875	IdentifierDeclType	BtsApiNotifier *
>3876	IdentifierDeclStatement	 
>3877	IdentifierDecl	* reply = p -> nam -> get ( QNetworkRequest ( apiUrl ) )
>3878	AssignmentExpr	* reply = p -> nam -> get ( QNetworkRequest ( apiUrl ) )
>3879	CallExpression	p -> nam -> get ( QNetworkRequest ( apiUrl ) )
>3880	ArgumentList	QNetworkRequest ( apiUrl )
>3881	Argument	QNetworkRequest ( apiUrl )
>3882	CallExpression	QNetworkRequest ( apiUrl )
>3883	ArgumentList	apiUrl
>3884	Argument	apiUrl
>3885	Identifier	apiUrl
>3886	Callee	QNetworkRequest
>3887	Identifier	QNetworkRequest
>3888	Callee	p -> nam -> get
>3889	PtrMemberAccess	p -> nam -> get
>3890	Identifier	get
>3891	PtrMemberAccess	p -> nam
>3892	Identifier	nam
>3893	Identifier	p
>3894	Identifier	reply
>3895	Identifier	reply
>3896	IdentifierDeclType	QNetworkReply *
>3897	IdentifierDeclStatement	 
>3898	IdentifierDecl	queryString = apiUrl . query ( QUrl 
>3899	AssignmentExpr	queryString = apiUrl . query ( QUrl 
>3900	CallExpression	apiUrl . query ( QUrl 
>3901	ArgumentList	QUrl 
>3902	Argument	QUrl 
>3903	Identifier	QUrl 
>3904	Callee	apiUrl . query
>3905	MemberAccess	apiUrl . query
>3906	Identifier	query
>3907	Identifier	apiUrl
>3908	Identifier	queryString
>3909	Identifier	queryString
>3910	IdentifierDeclType	QString
>3911	IdentifierDeclStatement	 
>3912	IdentifierDecl	apiUrl = getApiUrl ( p , \"set_folder_hosts\" , ql )
>3913	AssignmentExpr	apiUrl = getApiUrl ( p , \"set_folder_hosts\" , ql )
>3914	CallExpression	getApiUrl ( p , \"set_folder_hosts\" , ql )
>3915	ArgumentList	p
>3916	Argument	ql
>3917	Identifier	ql
>3918	Argument	\"set_folder_hosts\"
>3919	PrimaryExpression	\"set_folder_hosts\"
>3920	Argument	p
>3921	Identifier	p
>3922	Callee	getApiUrl
>3923	Identifier	getApiUrl
>3924	Identifier	apiUrl
>3925	Identifier	apiUrl
>3926	IdentifierDeclType	QUrl
>3927	ExpressionStatement	 
>3928	ShiftExpression	ql << QueryPair ( \"secret\" , secret ) << QueryPair ( \"hosts\" , hosts . join ( ',' ) )
>3929	ShiftExpression	QueryPair ( \"secret\" , secret ) << QueryPair ( \"hosts\" , hosts . join ( ',' ) )
>3930	CallExpression	QueryPair ( \"hosts\" , hosts . join ( ',' ) )
>3931	ArgumentList	\"hosts\"
>3932	Argument	hosts . join ( ',' )
>3933	CallExpression	hosts . join ( ',' )
>3934	ArgumentList	','
>3935	Argument	','
>3936	PrimaryExpression	','
>3937	Callee	hosts . join
>3938	MemberAccess	hosts . join
>3939	Identifier	join
>3940	Identifier	hosts
>3941	Argument	\"hosts\"
>3942	PrimaryExpression	\"hosts\"
>3943	Callee	QueryPair
>3944	Identifier	QueryPair
>3945	CallExpression	QueryPair ( \"secret\" , secret )
>3946	ArgumentList	\"secret\"
>3947	Argument	secret
>3948	Identifier	secret
>3949	Argument	\"secret\"
>3950	PrimaryExpression	\"secret\"
>3951	Callee	QueryPair
>3952	Identifier	QueryPair
>3953	Identifier	ql
>3954	IdentifierDeclStatement	 
>3955	IdentifierDecl	ql
>3956	Identifier	ql
>3957	IdentifierDeclType	QueryList
>3993	FunctionDef	BtsApi 
>3994	ParameterList	 
>3995	ReturnType	BtsApiNotifier *
>3996	CompoundStatement	 
>3997	ReturnStatement	 
>3998	Identifier	notifier
>3999	ExpressionStatement	 
>4000	Statement	 
>4001	CompoundStatement	 
>4002	ExpressionStatement	 
>4003	CallExpression	notifier -> getPreferencesResult ( res )
>4004	ArgumentList	res
>4005	Argument	res
>4006	Identifier	res
>4007	Callee	notifier -> getPreferencesResult
>4008	PtrMemberAccess	notifier -> getPreferencesResult
>4009	Identifier	getPreferencesResult
>4010	Identifier	notifier
>4011	Statement	 
>4012	IdentifierDeclStatement	 
>4013	IdentifierDecl	getPreferencesResult ( res )
>4014	Identifier	res
>4015	Identifier	getPreferencesResult
>4016	IdentifierDeclType	emit
>4017	ExpressionStatement	 
>4018	AssignmentExpr	res [ it . key ( ) ] = it . value ( ) . toVariant ( )
>4019	CallExpression	it . value ( ) . toVariant ( )
>4020	ArgumentList	 
>4021	Callee	it . value ( ) . toVariant
>4022	MemberAccess	it . value ( ) . toVariant
>4023	Identifier	toVariant
>4024	CallExpression	it . value ( )
>4025	ArgumentList	 
>4026	Callee	it . value
>4027	MemberAccess	it . value
>4028	Identifier	value
>4029	Identifier	it
>4030	ArrayIndexing	res [ it . key ( ) ]
>4031	CallExpression	it . key ( )
>4032	ArgumentList	 
>4033	Callee	it . key
>4034	MemberAccess	it . key
>4035	Identifier	key
>4036	Identifier	it
>4037	Identifier	res
>4038	Statement	 
>4039	Statement	 
>4040	Statement	 
>4041	ExpressionStatement	 
>4042	EqualityExpression	it != obj . constEnd ( )
>4043	CallExpression	obj . constEnd ( )
>4044	ArgumentList	 
>4045	Callee	obj . constEnd
>4046	MemberAccess	obj . constEnd
>4047	Identifier	constEnd
>4048	Identifier	obj
>4049	Identifier	it
>4050	ExpressionStatement	 
>4051	AssignmentExpr	it = obj . constBegin ( )
>4052	CallExpression	obj . constBegin ( )
>4053	ArgumentList	 
>4054	Callee	obj . constBegin
>4055	MemberAccess	obj . constBegin
>4056	Identifier	constBegin
>4057	Identifier	obj
>4058	Identifier	it
>4059	Statement	 
>4060	Statement	 
>4061	Statement	 
>4062	IdentifierDeclStatement	 
>4063	IdentifierDecl	res
>4064	Identifier	res
>4065	IdentifierDeclType	QVariantHash
>4066	IdentifierDeclStatement	 
>4067	IdentifierDecl	obj = doc . object ( )
>4068	AssignmentExpr	obj = doc . object ( )
>4069	CallExpression	doc . object ( )
>4070	ArgumentList	 
>4071	Callee	doc . object
>4072	MemberAccess	doc . object
>4073	Identifier	object
>4074	Identifier	doc
>4075	Identifier	obj
>4076	Identifier	obj
>4077	IdentifierDeclType	QJsonObject
>4078	IfStatement	if ( checkForError ( doc , notifier ) )
>4079	ReturnStatement	 
>4080	Condition	 
>4081	CallExpression	checkForError ( doc , notifier )
>4082	ArgumentList	doc
>4083	Argument	notifier
>4084	Identifier	notifier
>4085	Argument	doc
>4086	Identifier	doc
>4087	Callee	checkForError
>4088	Identifier	checkForError
>4089	IdentifierDeclStatement	 
>4090	IdentifierDecl	doc = QJsonDocument 
>4091	AssignmentExpr	doc = QJsonDocument 
>4092	CallExpression	QJsonDocument 
>4093	ArgumentList	reply -> readAll ( )
>4094	Argument	reply -> readAll ( )
>4095	CallExpression	reply -> readAll ( )
>4096	ArgumentList	 
>4097	Callee	reply -> readAll
>4098	PtrMemberAccess	reply -> readAll
>4099	Identifier	readAll
>4100	Identifier	reply
>4101	Callee	QJsonDocument 
>4102	Identifier	QJsonDocument 
>4103	Identifier	doc
>4104	Identifier	doc
>4105	IdentifierDeclType	QJsonDocument
>4106	IfStatement	if ( checkForError ( reply , notifier ) )
>4107	ReturnStatement	 
>4108	Condition	 
>4109	CallExpression	checkForError ( reply , notifier )
>4110	ArgumentList	reply
>4111	Argument	notifier
>4112	Identifier	notifier
>4113	Argument	reply
>4114	Identifier	reply
>4115	Callee	checkForError
>4116	Identifier	checkForError
>4117	ExpressionStatement	 
>4118	CallExpression	notifier -> deleteLater ( )
>4119	ArgumentList	 
>4120	Callee	notifier -> deleteLater
>4121	PtrMemberAccess	notifier -> deleteLater
>4122	Identifier	deleteLater
>4123	Identifier	notifier
>4124	Statement	 
>4125	Statement	 
>4126	Statement	 
>4127	Statement	 
>4128	Statement	 
>4129	Statement	 
>4130	Statement	 
>4131	Statement	 
>4132	Statement	 
>4133	Statement	 
>4134	Statement	 
>4135	Statement	 
>4136	Statement	 
>4137	Statement	 
>4138	Statement	 
>4139	Statement	 
>4140	Statement	 
>4141	Statement	 
>4142	IdentifierDeclStatement	 
>4143	IdentifierDecl	* notifier = new BtsApiNotifier ( this )
>4144	AssignmentExpr	* notifier = new BtsApiNotifier ( this )
>4145	Identifier	this
>4146	Identifier	this
>4147	Identifier	notifier
>4148	IdentifierDeclType	BtsApiNotifier *
>4149	IdentifierDeclStatement	 
>4150	IdentifierDecl	* reply = p -> nam -> get ( QNetworkRequest ( apiUrl ) )
>4151	AssignmentExpr	* reply = p -> nam -> get ( QNetworkRequest ( apiUrl ) )
>4152	CallExpression	p -> nam -> get ( QNetworkRequest ( apiUrl ) )
>4153	ArgumentList	QNetworkRequest ( apiUrl )
>4154	Argument	QNetworkRequest ( apiUrl )
>4155	CallExpression	QNetworkRequest ( apiUrl )
>4156	ArgumentList	apiUrl
>4157	Argument	apiUrl
>4158	Identifier	apiUrl
>4159	Callee	QNetworkRequest
>4160	Identifier	QNetworkRequest
>4161	Callee	p -> nam -> get
>4162	PtrMemberAccess	p -> nam -> get
>4163	Identifier	get
>4164	PtrMemberAccess	p -> nam
>4165	Identifier	nam
>4166	Identifier	p
>4167	Identifier	reply
>4168	Identifier	reply
>4169	IdentifierDeclType	QNetworkReply *
>4170	IdentifierDeclStatement	 
>4171	IdentifierDecl	apiUrl = getApiUrl ( p , \"get_prefs\" )
>4172	AssignmentExpr	apiUrl = getApiUrl ( p , \"get_prefs\" )
>4173	CallExpression	getApiUrl ( p , \"get_prefs\" )
>4174	ArgumentList	p
>4175	Argument	\"get_prefs\"
>4176	PrimaryExpression	\"get_prefs\"
>4177	Argument	p
>4178	Identifier	p
>4179	Callee	getApiUrl
>4180	Identifier	getApiUrl
>4181	Identifier	apiUrl
>4182	Identifier	apiUrl
>4183	IdentifierDeclType	QUrl
>4216	FunctionDef	BtsApi 
>4217	ParameterList	const QVariantHash & prefs
>4218	Parameter	 
>4219	Identifier	prefs
>4220	ParameterType	const QVariantHash &
>4221	ReturnType	BtsApiNotifier *
>4222	CompoundStatement	 
>4223	ReturnStatement	 
>4224	Identifier	notifier
>4225	ExpressionStatement	 
>4226	Statement	 
>4227	CompoundStatement	 
>4228	ExpressionStatement	 
>4229	CallExpression	notifier -> setPreferencesResult ( res )
>4230	ArgumentList	res
>4231	Argument	res
>4232	Identifier	res
>4233	Callee	notifier -> setPreferencesResult
>4234	PtrMemberAccess	notifier -> setPreferencesResult
>4235	Identifier	setPreferencesResult
>4236	Identifier	notifier
>4237	Statement	 
>4238	IdentifierDeclStatement	 
>4239	IdentifierDecl	setPreferencesResult ( res )
>4240	Identifier	res
>4241	Identifier	setPreferencesResult
>4242	IdentifierDeclType	emit
>4243	ExpressionStatement	 
>4244	AssignmentExpr	res [ it . key ( ) ] = it . value ( ) . toVariant ( )
>4245	CallExpression	it . value ( ) . toVariant ( )
>4246	ArgumentList	 
>4247	Callee	it . value ( ) . toVariant
>4248	MemberAccess	it . value ( ) . toVariant
>4249	Identifier	toVariant
>4250	CallExpression	it . value ( )
>4251	ArgumentList	 
>4252	Callee	it . value
>4253	MemberAccess	it . value
>4254	Identifier	value
>4255	Identifier	it
>4256	ArrayIndexing	res [ it . key ( ) ]
>4257	CallExpression	it . key ( )
>4258	ArgumentList	 
>4259	Callee	it . key
>4260	MemberAccess	it . key
>4261	Identifier	key
>4262	Identifier	it
>4263	Identifier	res
>4264	Statement	 
>4265	Statement	 
>4266	Statement	 
>4267	ExpressionStatement	 
>4268	EqualityExpression	it != obj . constEnd ( )
>4269	CallExpression	obj . constEnd ( )
>4270	ArgumentList	 
>4271	Callee	obj . constEnd
>4272	MemberAccess	obj . constEnd
>4273	Identifier	constEnd
>4274	Identifier	obj
>4275	Identifier	it
>4276	ExpressionStatement	 
>4277	AssignmentExpr	it = obj . constBegin ( )
>4278	CallExpression	obj . constBegin ( )
>4279	ArgumentList	 
>4280	Callee	obj . constBegin
>4281	MemberAccess	obj . constBegin
>4282	Identifier	constBegin
>4283	Identifier	obj
>4284	Identifier	it
>4285	Statement	 
>4286	Statement	 
>4287	Statement	 
>4288	IdentifierDeclStatement	 
>4289	IdentifierDecl	res
>4290	Identifier	res
>4291	IdentifierDeclType	QVariantHash
>4292	IdentifierDeclStatement	 
>4293	IdentifierDecl	obj = doc . object ( )
>4294	AssignmentExpr	obj = doc . object ( )
>4295	CallExpression	doc . object ( )
>4296	ArgumentList	 
>4297	Callee	doc . object
>4298	MemberAccess	doc . object
>4299	Identifier	object
>4300	Identifier	doc
>4301	Identifier	obj
>4302	Identifier	obj
>4303	IdentifierDeclType	QJsonObject
>4304	IfStatement	if ( checkForError ( doc , notifier ) )
>4305	ReturnStatement	 
>4306	Condition	 
>4307	CallExpression	checkForError ( doc , notifier )
>4308	ArgumentList	doc
>4309	Argument	notifier
>4310	Identifier	notifier
>4311	Argument	doc
>4312	Identifier	doc
>4313	Callee	checkForError
>4314	Identifier	checkForError
>4315	IdentifierDeclStatement	 
>4316	IdentifierDecl	doc = QJsonDocument 
>4317	AssignmentExpr	doc = QJsonDocument 
>4318	CallExpression	QJsonDocument 
>4319	ArgumentList	reply -> readAll ( )
>4320	Argument	reply -> readAll ( )
>4321	CallExpression	reply -> readAll ( )
>4322	ArgumentList	 
>4323	Callee	reply -> readAll
>4324	PtrMemberAccess	reply -> readAll
>4325	Identifier	readAll
>4326	Identifier	reply
>4327	Callee	QJsonDocument 
>4328	Identifier	QJsonDocument 
>4329	Identifier	doc
>4330	Identifier	doc
>4331	IdentifierDeclType	QJsonDocument
>4332	IfStatement	if ( checkForError ( reply , notifier ) )
>4333	ReturnStatement	 
>4334	Condition	 
>4335	CallExpression	checkForError ( reply , notifier )
>4336	ArgumentList	reply
>4337	Argument	notifier
>4338	Identifier	notifier
>4339	Argument	reply
>4340	Identifier	reply
>4341	Callee	checkForError
>4342	Identifier	checkForError
>4343	ExpressionStatement	 
>4344	CallExpression	notifier -> deleteLater ( )
>4345	ArgumentList	 
>4346	Callee	notifier -> deleteLater
>4347	PtrMemberAccess	notifier -> deleteLater
>4348	Identifier	deleteLater
>4349	Identifier	notifier
>4350	Statement	 
>4351	Statement	 
>4352	Statement	 
>4353	Statement	 
>4354	Statement	 
>4355	Statement	 
>4356	Statement	 
>4357	Statement	 
>4358	Statement	 
>4359	Statement	 
>4360	Statement	 
>4361	Statement	 
>4362	Statement	 
>4363	Statement	 
>4364	Statement	 
>4365	Statement	 
>4366	Statement	 
>4367	Statement	 
>4368	IdentifierDeclStatement	 
>4369	IdentifierDecl	* notifier = new BtsApiNotifier ( this )
>4370	AssignmentExpr	* notifier = new BtsApiNotifier ( this )
>4371	Identifier	this
>4372	Identifier	this
>4373	Identifier	notifier
>4374	IdentifierDeclType	BtsApiNotifier *
>4375	IdentifierDeclStatement	 
>4376	IdentifierDecl	* reply = p -> nam -> get ( QNetworkRequest ( apiUrl ) )
>4377	AssignmentExpr	* reply = p -> nam -> get ( QNetworkRequest ( apiUrl ) )
>4378	CallExpression	p -> nam -> get ( QNetworkRequest ( apiUrl ) )
>4379	ArgumentList	QNetworkRequest ( apiUrl )
>4380	Argument	QNetworkRequest ( apiUrl )
>4381	CallExpression	QNetworkRequest ( apiUrl )
>4382	ArgumentList	apiUrl
>4383	Argument	apiUrl
>4384	Identifier	apiUrl
>4385	Callee	QNetworkRequest
>4386	Identifier	QNetworkRequest
>4387	Callee	p -> nam -> get
>4388	PtrMemberAccess	p -> nam -> get
>4389	Identifier	get
>4390	PtrMemberAccess	p -> nam
>4391	Identifier	nam
>4392	Identifier	p
>4393	Identifier	reply
>4394	Identifier	reply
>4395	IdentifierDeclType	QNetworkReply *
>4396	IdentifierDeclStatement	 
>4397	IdentifierDecl	apiUrl = getApiUrl ( p , \"set_prefs\" , ql )
>4398	AssignmentExpr	apiUrl = getApiUrl ( p , \"set_prefs\" , ql )
>4399	CallExpression	getApiUrl ( p , \"set_prefs\" , ql )
>4400	ArgumentList	p
>4401	Argument	ql
>4402	Identifier	ql
>4403	Argument	\"set_prefs\"
>4404	PrimaryExpression	\"set_prefs\"
>4405	Argument	p
>4406	Identifier	p
>4407	Callee	getApiUrl
>4408	Identifier	getApiUrl
>4409	Identifier	apiUrl
>4410	Identifier	apiUrl
>4411	IdentifierDeclType	QUrl
>4412	ExpressionStatement	 
>4413	ShiftExpression	ql << QueryPair ( it . key ( ) , it . value ( ) . toString ( ) )
>4414	CallExpression	QueryPair ( it . key ( ) , it . value ( ) . toString ( ) )
>4415	ArgumentList	it . key ( )
>4416	Argument	it . value ( ) . toString ( )
>4417	CallExpression	it . value ( ) . toString ( )
>4418	ArgumentList	 
>4419	Callee	it . value ( ) . toString
>4420	MemberAccess	it . value ( ) . toString
>4421	Identifier	toString
>4422	CallExpression	it . value ( )
>4423	ArgumentList	 
>4424	Callee	it . value
>4425	MemberAccess	it . value
>4426	Identifier	value
>4427	Identifier	it
>4428	Argument	it . key ( )
>4429	CallExpression	it . key ( )
>4430	ArgumentList	 
>4431	Callee	it . key
>4432	MemberAccess	it . key
>4433	Identifier	key
>4434	Identifier	it
>4435	Callee	QueryPair
>4436	Identifier	QueryPair
>4437	Identifier	ql
>4438	Statement	 
>4439	Statement	 
>4440	Statement	 
>4441	ExpressionStatement	 
>4442	EqualityExpression	it != prefs . constEnd ( )
>4443	CallExpression	prefs . constEnd ( )
>4444	ArgumentList	 
>4445	Callee	prefs . constEnd
>4446	MemberAccess	prefs . constEnd
>4447	Identifier	constEnd
>4448	Identifier	prefs
>4449	Identifier	it
>4450	ExpressionStatement	 
>4451	AssignmentExpr	it = prefs . constBegin ( )
>4452	CallExpression	prefs . constBegin ( )
>4453	ArgumentList	 
>4454	Callee	prefs . constBegin
>4455	MemberAccess	prefs . constBegin
>4456	Identifier	constBegin
>4457	Identifier	prefs
>4458	Identifier	it
>4459	Statement	 
>4460	Statement	 
>4461	Statement	 
>4462	IdentifierDeclStatement	 
>4463	IdentifierDecl	ql
>4464	Identifier	ql
>4465	IdentifierDeclType	QueryList
>4502	FunctionDef	BtsApi 
>4503	ParameterList	 
>4504	ReturnType	BtsApiNotifier *
>4505	CompoundStatement	 
>4506	ReturnStatement	 
>4507	Identifier	notifier
>4508	ExpressionStatement	 
>4509	Statement	 
>4510	CompoundStatement	 
>4511	ExpressionStatement	 
>4512	CallExpression	notifier -> getOsNameResult ( obj . value ( \"os\" ) . toString ( ) )
>4513	ArgumentList	obj . value ( \"os\" ) . toString ( )
>4514	Argument	obj . value ( \"os\" ) . toString ( )
>4515	CallExpression	obj . value ( \"os\" ) . toString ( )
>4516	ArgumentList	 
>4517	Callee	obj . value ( \"os\" ) . toString
>4518	MemberAccess	obj . value ( \"os\" ) . toString
>4519	Identifier	toString
>4520	CallExpression	obj . value ( \"os\" )
>4521	ArgumentList	\"os\"
>4522	Argument	\"os\"
>4523	PrimaryExpression	\"os\"
>4524	Callee	obj . value
>4525	MemberAccess	obj . value
>4526	Identifier	value
>4527	Identifier	obj
>4528	Callee	notifier -> getOsNameResult
>4529	PtrMemberAccess	notifier -> getOsNameResult
>4530	Identifier	getOsNameResult
>4531	Identifier	notifier
>4532	Statement	 
>4533	IdentifierDeclStatement	 
>4534	IdentifierDecl	getOsNameResult ( obj . value ( \"os\" ) . toString ( ) )
>4535	CallExpression	obj . value ( \"os\" ) . toString ( )
>4536	ArgumentList	 
>4537	Callee	obj . value ( \"os\" ) . toString
>4538	MemberAccess	obj . value ( \"os\" ) . toString
>4539	Identifier	toString
>4540	CallExpression	obj . value ( \"os\" )
>4541	ArgumentList	\"os\"
>4542	Argument	\"os\"
>4543	PrimaryExpression	\"os\"
>4544	Callee	obj . value
>4545	MemberAccess	obj . value
>4546	Identifier	value
>4547	Identifier	obj
>4548	Identifier	getOsNameResult
>4549	IdentifierDeclType	emit
>4550	IdentifierDeclStatement	 
>4551	IdentifierDecl	obj = doc . object ( )
>4552	AssignmentExpr	obj = doc . object ( )
>4553	CallExpression	doc . object ( )
>4554	ArgumentList	 
>4555	Callee	doc . object
>4556	MemberAccess	doc . object
>4557	Identifier	object
>4558	Identifier	doc
>4559	Identifier	obj
>4560	Identifier	obj
>4561	IdentifierDeclType	QJsonObject
>4562	IfStatement	if ( checkForError ( doc , notifier ) )
>4563	ReturnStatement	 
>4564	Condition	 
>4565	CallExpression	checkForError ( doc , notifier )
>4566	ArgumentList	doc
>4567	Argument	notifier
>4568	Identifier	notifier
>4569	Argument	doc
>4570	Identifier	doc
>4571	Callee	checkForError
>4572	Identifier	checkForError
>4573	IdentifierDeclStatement	 
>4574	IdentifierDecl	doc = QJsonDocument 
>4575	AssignmentExpr	doc = QJsonDocument 
>4576	CallExpression	QJsonDocument 
>4577	ArgumentList	reply -> readAll ( )
>4578	Argument	reply -> readAll ( )
>4579	CallExpression	reply -> readAll ( )
>4580	ArgumentList	 
>4581	Callee	reply -> readAll
>4582	PtrMemberAccess	reply -> readAll
>4583	Identifier	readAll
>4584	Identifier	reply
>4585	Callee	QJsonDocument 
>4586	Identifier	QJsonDocument 
>4587	Identifier	doc
>4588	Identifier	doc
>4589	IdentifierDeclType	QJsonDocument
>4590	IfStatement	if ( checkForError ( reply , notifier ) )
>4591	ReturnStatement	 
>4592	Condition	 
>4593	CallExpression	checkForError ( reply , notifier )
>4594	ArgumentList	reply
>4595	Argument	notifier
>4596	Identifier	notifier
>4597	Argument	reply
>4598	Identifier	reply
>4599	Callee	checkForError
>4600	Identifier	checkForError
>4601	ExpressionStatement	 
>4602	CallExpression	notifier -> deleteLater ( )
>4603	ArgumentList	 
>4604	Callee	notifier -> deleteLater
>4605	PtrMemberAccess	notifier -> deleteLater
>4606	Identifier	deleteLater
>4607	Identifier	notifier
>4608	Statement	 
>4609	Statement	 
>4610	Statement	 
>4611	Statement	 
>4612	Statement	 
>4613	Statement	 
>4614	Statement	 
>4615	Statement	 
>4616	Statement	 
>4617	Statement	 
>4618	Statement	 
>4619	Statement	 
>4620	Statement	 
>4621	Statement	 
>4622	Statement	 
>4623	Statement	 
>4624	Statement	 
>4625	Statement	 
>4626	IdentifierDeclStatement	 
>4627	IdentifierDecl	* notifier = new BtsApiNotifier ( this )
>4628	AssignmentExpr	* notifier = new BtsApiNotifier ( this )
>4629	Identifier	this
>4630	Identifier	this
>4631	Identifier	notifier
>4632	IdentifierDeclType	BtsApiNotifier *
>4633	IdentifierDeclStatement	 
>4634	IdentifierDecl	* reply = p -> nam -> get ( QNetworkRequest ( apiUrl ) )
>4635	AssignmentExpr	* reply = p -> nam -> get ( QNetworkRequest ( apiUrl ) )
>4636	CallExpression	p -> nam -> get ( QNetworkRequest ( apiUrl ) )
>4637	ArgumentList	QNetworkRequest ( apiUrl )
>4638	Argument	QNetworkRequest ( apiUrl )
>4639	CallExpression	QNetworkRequest ( apiUrl )
>4640	ArgumentList	apiUrl
>4641	Argument	apiUrl
>4642	Identifier	apiUrl
>4643	Callee	QNetworkRequest
>4644	Identifier	QNetworkRequest
>4645	Callee	p -> nam -> get
>4646	PtrMemberAccess	p -> nam -> get
>4647	Identifier	get
>4648	PtrMemberAccess	p -> nam
>4649	Identifier	nam
>4650	Identifier	p
>4651	Identifier	reply
>4652	Identifier	reply
>4653	IdentifierDeclType	QNetworkReply *
>4654	IdentifierDeclStatement	 
>4655	IdentifierDecl	apiUrl = getApiUrl ( p , \"get_os\" )
>4656	AssignmentExpr	apiUrl = getApiUrl ( p , \"get_os\" )
>4657	CallExpression	getApiUrl ( p , \"get_os\" )
>4658	ArgumentList	p
>4659	Argument	\"get_os\"
>4660	PrimaryExpression	\"get_os\"
>4661	Argument	p
>4662	Identifier	p
>4663	Callee	getApiUrl
>4664	Identifier	getApiUrl
>4665	Identifier	apiUrl
>4666	Identifier	apiUrl
>4667	IdentifierDeclType	QUrl
>4693	FunctionDef	BtsApi 
>4694	ParameterList	 
>4695	ReturnType	BtsApiNotifier *
>4696	CompoundStatement	 
>4697	ReturnStatement	 
>4698	Identifier	notifier
>4699	ExpressionStatement	 
>4700	Statement	 
>4701	CompoundStatement	 
>4702	ExpressionStatement	 
>4703	CallExpression	notifier -> getVersionResult ( obj . value ( \"version\" ) . toString ( ) )
>4704	ArgumentList	obj . value ( \"version\" ) . toString ( )
>4705	Argument	obj . value ( \"version\" ) . toString ( )
>4706	CallExpression	obj . value ( \"version\" ) . toString ( )
>4707	ArgumentList	 
>4708	Callee	obj . value ( \"version\" ) . toString
>4709	MemberAccess	obj . value ( \"version\" ) . toString
>4710	Identifier	toString
>4711	CallExpression	obj . value ( \"version\" )
>4712	ArgumentList	\"version\"
>4713	Argument	\"version\"
>4714	PrimaryExpression	\"version\"
>4715	Callee	obj . value
>4716	MemberAccess	obj . value
>4717	Identifier	value
>4718	Identifier	obj
>4719	Callee	notifier -> getVersionResult
>4720	PtrMemberAccess	notifier -> getVersionResult
>4721	Identifier	getVersionResult
>4722	Identifier	notifier
>4723	Statement	 
>4724	IdentifierDeclStatement	 
>4725	IdentifierDecl	getVersionResult ( obj . value ( \"version\" ) . toString ( ) )
>4726	CallExpression	obj . value ( \"version\" ) . toString ( )
>4727	ArgumentList	 
>4728	Callee	obj . value ( \"version\" ) . toString
>4729	MemberAccess	obj . value ( \"version\" ) . toString
>4730	Identifier	toString
>4731	CallExpression	obj . value ( \"version\" )
>4732	ArgumentList	\"version\"
>4733	Argument	\"version\"
>4734	PrimaryExpression	\"version\"
>4735	Callee	obj . value
>4736	MemberAccess	obj . value
>4737	Identifier	value
>4738	Identifier	obj
>4739	Identifier	getVersionResult
>4740	IdentifierDeclType	emit
>4741	IdentifierDeclStatement	 
>4742	IdentifierDecl	obj = doc . object ( )
>4743	AssignmentExpr	obj = doc . object ( )
>4744	CallExpression	doc . object ( )
>4745	ArgumentList	 
>4746	Callee	doc . object
>4747	MemberAccess	doc . object
>4748	Identifier	object
>4749	Identifier	doc
>4750	Identifier	obj
>4751	Identifier	obj
>4752	IdentifierDeclType	QJsonObject
>4753	IfStatement	if ( checkForError ( doc , notifier ) )
>4754	ReturnStatement	 
>4755	Condition	 
>4756	CallExpression	checkForError ( doc , notifier )
>4757	ArgumentList	doc
>4758	Argument	notifier
>4759	Identifier	notifier
>4760	Argument	doc
>4761	Identifier	doc
>4762	Callee	checkForError
>4763	Identifier	checkForError
>4764	IdentifierDeclStatement	 
>4765	IdentifierDecl	doc = QJsonDocument 
>4766	AssignmentExpr	doc = QJsonDocument 
>4767	CallExpression	QJsonDocument 
>4768	ArgumentList	reply -> readAll ( )
>4769	Argument	reply -> readAll ( )
>4770	CallExpression	reply -> readAll ( )
>4771	ArgumentList	 
>4772	Callee	reply -> readAll
>4773	PtrMemberAccess	reply -> readAll
>4774	Identifier	readAll
>4775	Identifier	reply
>4776	Callee	QJsonDocument 
>4777	Identifier	QJsonDocument 
>4778	Identifier	doc
>4779	Identifier	doc
>4780	IdentifierDeclType	QJsonDocument
>4781	IfStatement	if ( checkForError ( reply , notifier ) )
>4782	ReturnStatement	 
>4783	Condition	 
>4784	CallExpression	checkForError ( reply , notifier )
>4785	ArgumentList	reply
>4786	Argument	notifier
>4787	Identifier	notifier
>4788	Argument	reply
>4789	Identifier	reply
>4790	Callee	checkForError
>4791	Identifier	checkForError
>4792	ExpressionStatement	 
>4793	CallExpression	notifier -> deleteLater ( )
>4794	ArgumentList	 
>4795	Callee	notifier -> deleteLater
>4796	PtrMemberAccess	notifier -> deleteLater
>4797	Identifier	deleteLater
>4798	Identifier	notifier
>4799	Statement	 
>4800	Statement	 
>4801	Statement	 
>4802	Statement	 
>4803	Statement	 
>4804	Statement	 
>4805	Statement	 
>4806	Statement	 
>4807	Statement	 
>4808	Statement	 
>4809	Statement	 
>4810	Statement	 
>4811	Statement	 
>4812	Statement	 
>4813	Statement	 
>4814	Statement	 
>4815	Statement	 
>4816	Statement	 
>4817	IdentifierDeclStatement	 
>4818	IdentifierDecl	* notifier = new BtsApiNotifier ( this )
>4819	AssignmentExpr	* notifier = new BtsApiNotifier ( this )
>4820	Identifier	this
>4821	Identifier	this
>4822	Identifier	notifier
>4823	IdentifierDeclType	BtsApiNotifier *
>4824	IdentifierDeclStatement	 
>4825	IdentifierDecl	* reply = p -> nam -> get ( QNetworkRequest ( apiUrl ) )
>4826	AssignmentExpr	* reply = p -> nam -> get ( QNetworkRequest ( apiUrl ) )
>4827	CallExpression	p -> nam -> get ( QNetworkRequest ( apiUrl ) )
>4828	ArgumentList	QNetworkRequest ( apiUrl )
>4829	Argument	QNetworkRequest ( apiUrl )
>4830	CallExpression	QNetworkRequest ( apiUrl )
>4831	ArgumentList	apiUrl
>4832	Argument	apiUrl
>4833	Identifier	apiUrl
>4834	Callee	QNetworkRequest
>4835	Identifier	QNetworkRequest
>4836	Callee	p -> nam -> get
>4837	PtrMemberAccess	p -> nam -> get
>4838	Identifier	get
>4839	PtrMemberAccess	p -> nam
>4840	Identifier	nam
>4841	Identifier	p
>4842	Identifier	reply
>4843	Identifier	reply
>4844	IdentifierDeclType	QNetworkReply *
>4845	IdentifierDeclStatement	 
>4846	IdentifierDecl	apiUrl = getApiUrl ( p , \"get_version\" )
>4847	AssignmentExpr	apiUrl = getApiUrl ( p , \"get_version\" )
>4848	CallExpression	getApiUrl ( p , \"get_version\" )
>4849	ArgumentList	p
>4850	Argument	\"get_version\"
>4851	PrimaryExpression	\"get_version\"
>4852	Argument	p
>4853	Identifier	p
>4854	Callee	getApiUrl
>4855	Identifier	getApiUrl
>4856	Identifier	apiUrl
>4857	Identifier	apiUrl
>4858	IdentifierDeclType	QUrl
>4884	FunctionDef	BtsApi 
>4885	ParameterList	 
>4886	ReturnType	BtsApiNotifier *
>4887	CompoundStatement	 
>4888	ReturnStatement	 
>4889	Identifier	notifier
>4890	ExpressionStatement	 
>4891	Statement	 
>4892	CompoundStatement	 
>4893	ExpressionStatement	 
>4894	CallExpression	notifier -> getSpeedResult ( down , up )
>4895	ArgumentList	down
>4896	Argument	up
>4897	Identifier	up
>4898	Argument	down
>4899	Identifier	down
>4900	Callee	notifier -> getSpeedResult
>4901	PtrMemberAccess	notifier -> getSpeedResult
>4902	Identifier	getSpeedResult
>4903	Identifier	notifier
>4904	Statement	 
>4905	IdentifierDeclStatement	 
>4906	IdentifierDecl	getSpeedResult ( down , up )
>4907	Expression	down , up
>4908	Identifier	up
>4909	Identifier	down
>4910	Identifier	getSpeedResult
>4911	IdentifierDeclType	emit
>4912	IdentifierDeclStatement	 
>4913	IdentifierDecl	up = obj . value ( \"upload\" ) . toVariant ( ) . toLongLong ( )
>4914	AssignmentExpr	up = obj . value ( \"upload\" ) . toVariant ( ) . toLongLong ( )
>4915	CallExpression	obj . value ( \"upload\" ) . toVariant ( ) . toLongLong ( )
>4916	ArgumentList	 
>4917	Callee	obj . value ( \"upload\" ) . toVariant ( ) . toLongLong
>4918	MemberAccess	obj . value ( \"upload\" ) . toVariant ( ) . toLongLong
>4919	Identifier	toLongLong
>4920	CallExpression	obj . value ( \"upload\" ) . toVariant ( )
>4921	ArgumentList	 
>4922	Callee	obj . value ( \"upload\" ) . toVariant
>4923	MemberAccess	obj . value ( \"upload\" ) . toVariant
>4924	Identifier	toVariant
>4925	CallExpression	obj . value ( \"upload\" )
>4926	ArgumentList	\"upload\"
>4927	Argument	\"upload\"
>4928	PrimaryExpression	\"upload\"
>4929	Callee	obj . value
>4930	MemberAccess	obj . value
>4931	Identifier	value
>4932	Identifier	obj
>4933	Identifier	up
>4934	Identifier	up
>4935	IdentifierDeclType	qint64
>4936	IdentifierDeclStatement	 
>4937	IdentifierDecl	down = obj . value ( \"download\" ) . toVariant ( ) . toLongLong ( )
>4938	AssignmentExpr	down = obj . value ( \"download\" ) . toVariant ( ) . toLongLong ( )
>4939	CallExpression	obj . value ( \"download\" ) . toVariant ( ) . toLongLong ( )
>4940	ArgumentList	 
>4941	Callee	obj . value ( \"download\" ) . toVariant ( ) . toLongLong
>4942	MemberAccess	obj . value ( \"download\" ) . toVariant ( ) . toLongLong
>4943	Identifier	toLongLong
>4944	CallExpression	obj . value ( \"download\" ) . toVariant ( )
>4945	ArgumentList	 
>4946	Callee	obj . value ( \"download\" ) . toVariant
>4947	MemberAccess	obj . value ( \"download\" ) . toVariant
>4948	Identifier	toVariant
>4949	CallExpression	obj . value ( \"download\" )
>4950	ArgumentList	\"download\"
>4951	Argument	\"download\"
>4952	PrimaryExpression	\"download\"
>4953	Callee	obj . value
>4954	MemberAccess	obj . value
>4955	Identifier	value
>4956	Identifier	obj
>4957	Identifier	down
>4958	Identifier	down
>4959	IdentifierDeclType	qint64
>4960	IdentifierDeclStatement	 
>4961	IdentifierDecl	obj = doc . object ( )
>4962	AssignmentExpr	obj = doc . object ( )
>4963	CallExpression	doc . object ( )
>4964	ArgumentList	 
>4965	Callee	doc . object
>4966	MemberAccess	doc . object
>4967	Identifier	object
>4968	Identifier	doc
>4969	Identifier	obj
>4970	Identifier	obj
>4971	IdentifierDeclType	QJsonObject
>4972	IfStatement	if ( checkForError ( doc , notifier ) )
>4973	ReturnStatement	 
>4974	Condition	 
>4975	CallExpression	checkForError ( doc , notifier )
>4976	ArgumentList	doc
>4977	Argument	notifier
>4978	Identifier	notifier
>4979	Argument	doc
>4980	Identifier	doc
>4981	Callee	checkForError
>4982	Identifier	checkForError
>4983	IdentifierDeclStatement	 
>4984	IdentifierDecl	doc = QJsonDocument 
>4985	AssignmentExpr	doc = QJsonDocument 
>4986	CallExpression	QJsonDocument 
>4987	ArgumentList	reply -> readAll ( )
>4988	Argument	reply -> readAll ( )
>4989	CallExpression	reply -> readAll ( )
>4990	ArgumentList	 
>4991	Callee	reply -> readAll
>4992	PtrMemberAccess	reply -> readAll
>4993	Identifier	readAll
>4994	Identifier	reply
>4995	Callee	QJsonDocument 
>4996	Identifier	QJsonDocument 
>4997	Identifier	doc
>4998	Identifier	doc
>4999	IdentifierDeclType	QJsonDocument
>5000	IfStatement	if ( checkForError ( reply , notifier ) )
>5001	ReturnStatement	 
>5002	Condition	 
>5003	CallExpression	checkForError ( reply , notifier )
>5004	ArgumentList	reply
>5005	Argument	notifier
>5006	Identifier	notifier
>5007	Argument	reply
>5008	Identifier	reply
>5009	Callee	checkForError
>5010	Identifier	checkForError
>5011	ExpressionStatement	 
>5012	CallExpression	notifier -> deleteLater ( )
>5013	ArgumentList	 
>5014	Callee	notifier -> deleteLater
>5015	PtrMemberAccess	notifier -> deleteLater
>5016	Identifier	deleteLater
>5017	Identifier	notifier
>5018	Statement	 
>5019	Statement	 
>5020	Statement	 
>5021	Statement	 
>5022	Statement	 
>5023	Statement	 
>5024	Statement	 
>5025	Statement	 
>5026	Statement	 
>5027	Statement	 
>5028	Statement	 
>5029	Statement	 
>5030	Statement	 
>5031	Statement	 
>5032	Statement	 
>5033	Statement	 
>5034	Statement	 
>5035	Statement	 
>5036	IdentifierDeclStatement	 
>5037	IdentifierDecl	* notifier = new BtsApiNotifier ( this )
>5038	AssignmentExpr	* notifier = new BtsApiNotifier ( this )
>5039	Identifier	this
>5040	Identifier	this
>5041	Identifier	notifier
>5042	IdentifierDeclType	BtsApiNotifier *
>5043	IdentifierDeclStatement	 
>5044	IdentifierDecl	* reply = p -> nam -> get ( QNetworkRequest ( apiUrl ) )
>5045	AssignmentExpr	* reply = p -> nam -> get ( QNetworkRequest ( apiUrl ) )
>5046	CallExpression	p -> nam -> get ( QNetworkRequest ( apiUrl ) )
>5047	ArgumentList	QNetworkRequest ( apiUrl )
>5048	Argument	QNetworkRequest ( apiUrl )
>5049	CallExpression	QNetworkRequest ( apiUrl )
>5050	ArgumentList	apiUrl
>5051	Argument	apiUrl
>5052	Identifier	apiUrl
>5053	Callee	QNetworkRequest
>5054	Identifier	QNetworkRequest
>5055	Callee	p -> nam -> get
>5056	PtrMemberAccess	p -> nam -> get
>5057	Identifier	get
>5058	PtrMemberAccess	p -> nam
>5059	Identifier	nam
>5060	Identifier	p
>5061	Identifier	reply
>5062	Identifier	reply
>5063	IdentifierDeclType	QNetworkReply *
>5064	IdentifierDeclStatement	 
>5065	IdentifierDecl	apiUrl = getApiUrl ( p , \"get_speed\" )
>5066	AssignmentExpr	apiUrl = getApiUrl ( p , \"get_speed\" )
>5067	CallExpression	getApiUrl ( p , \"get_speed\" )
>5068	ArgumentList	p
>5069	Argument	\"get_speed\"
>5070	PrimaryExpression	\"get_speed\"
>5071	Argument	p
>5072	Identifier	p
>5073	Callee	getApiUrl
>5074	Identifier	getApiUrl
>5075	Identifier	apiUrl
>5076	Identifier	apiUrl
>5077	IdentifierDeclType	QUrl
>5108	FunctionDef	BtsApi 
>5109	ParameterList	 
>5110	ReturnType	BtsApiNotifier *
>5111	CompoundStatement	 
>5112	ReturnStatement	 
>5113	Identifier	notifier
>5114	ExpressionStatement	 
>5115	Statement	 
>5116	CompoundStatement	 
>5117	ExpressionStatement	 
>5118	CallExpression	notifier -> shutdownResult ( )
>5119	ArgumentList	 
>5120	Callee	notifier -> shutdownResult
>5121	PtrMemberAccess	notifier -> shutdownResult
>5122	Identifier	shutdownResult
>5123	Identifier	notifier
>5124	Statement	 
>5125	IdentifierDeclStatement	 
>5126	IdentifierDecl	shutdownResult ( )
>5127	Identifier	shutdownResult
>5128	IdentifierDeclType	emit
>5129	IfStatement	if ( checkForError ( doc , notifier ) )
>5130	ReturnStatement	 
>5131	Condition	 
>5132	CallExpression	checkForError ( doc , notifier )
>5133	ArgumentList	doc
>5134	Argument	notifier
>5135	Identifier	notifier
>5136	Argument	doc
>5137	Identifier	doc
>5138	Callee	checkForError
>5139	Identifier	checkForError
>5140	IdentifierDeclStatement	 
>5141	IdentifierDecl	doc = QJsonDocument 
>5142	AssignmentExpr	doc = QJsonDocument 
>5143	CallExpression	QJsonDocument 
>5144	ArgumentList	reply -> readAll ( )
>5145	Argument	reply -> readAll ( )
>5146	CallExpression	reply -> readAll ( )
>5147	ArgumentList	 
>5148	Callee	reply -> readAll
>5149	PtrMemberAccess	reply -> readAll
>5150	Identifier	readAll
>5151	Identifier	reply
>5152	Callee	QJsonDocument 
>5153	Identifier	QJsonDocument 
>5154	Identifier	doc
>5155	Identifier	doc
>5156	IdentifierDeclType	QJsonDocument
>5157	IfStatement	if ( checkForError ( reply , notifier ) )
>5158	ReturnStatement	 
>5159	Condition	 
>5160	CallExpression	checkForError ( reply , notifier )
>5161	ArgumentList	reply
>5162	Argument	notifier
>5163	Identifier	notifier
>5164	Argument	reply
>5165	Identifier	reply
>5166	Callee	checkForError
>5167	Identifier	checkForError
>5168	ExpressionStatement	 
>5169	CallExpression	notifier -> deleteLater ( )
>5170	ArgumentList	 
>5171	Callee	notifier -> deleteLater
>5172	PtrMemberAccess	notifier -> deleteLater
>5173	Identifier	deleteLater
>5174	Identifier	notifier
>5175	Statement	 
>5176	Statement	 
>5177	Statement	 
>5178	Statement	 
>5179	Statement	 
>5180	Statement	 
>5181	Statement	 
>5182	Statement	 
>5183	Statement	 
>5184	Statement	 
>5185	Statement	 
>5186	Statement	 
>5187	Statement	 
>5188	Statement	 
>5189	Statement	 
>5190	Statement	 
>5191	Statement	 
>5192	Statement	 
>5193	IdentifierDeclStatement	 
>5194	IdentifierDecl	* notifier = new BtsApiNotifier ( this )
>5195	AssignmentExpr	* notifier = new BtsApiNotifier ( this )
>5196	Identifier	this
>5197	Identifier	this
>5198	Identifier	notifier
>5199	IdentifierDeclType	BtsApiNotifier *
>5200	IdentifierDeclStatement	 
>5201	IdentifierDecl	* reply = p -> nam -> get ( QNetworkRequest ( apiUrl ) )
>5202	AssignmentExpr	* reply = p -> nam -> get ( QNetworkRequest ( apiUrl ) )
>5203	CallExpression	p -> nam -> get ( QNetworkRequest ( apiUrl ) )
>5204	ArgumentList	QNetworkRequest ( apiUrl )
>5205	Argument	QNetworkRequest ( apiUrl )
>5206	CallExpression	QNetworkRequest ( apiUrl )
>5207	ArgumentList	apiUrl
>5208	Argument	apiUrl
>5209	Identifier	apiUrl
>5210	Callee	QNetworkRequest
>5211	Identifier	QNetworkRequest
>5212	Callee	p -> nam -> get
>5213	PtrMemberAccess	p -> nam -> get
>5214	Identifier	get
>5215	PtrMemberAccess	p -> nam
>5216	Identifier	nam
>5217	Identifier	p
>5218	Identifier	reply
>5219	Identifier	reply
>5220	IdentifierDeclType	QNetworkReply *
>5221	IdentifierDeclStatement	 
>5222	IdentifierDecl	apiUrl = getApiUrl ( p , \"shutdown\" )
>5223	AssignmentExpr	apiUrl = getApiUrl ( p , \"shutdown\" )
>5224	CallExpression	getApiUrl ( p , \"shutdown\" )
>5225	ArgumentList	p
>5226	Argument	\"shutdown\"
>5227	PrimaryExpression	\"shutdown\"
>5228	Argument	p
>5229	Identifier	p
>5230	Callee	getApiUrl
>5231	Identifier	getApiUrl
>5232	Identifier	apiUrl
>5233	Identifier	apiUrl
>5234	IdentifierDeclType	QUrl
>5256	FunctionDef	BtsApiNotifier 
>5257	ParameterList	QObject * parent
>5258	Parameter	 
>5259	Identifier	parent
>5260	ParameterType	QObject *
>5261	CompoundStatement	 
<12=17,13
<13=14
<14=16,15
<17=23,18
<18=19
<19=21,20
<21=22
<23=24
<24=26,25
<32=40,33
<33=37,34
<34=36,35
<37=39,38
<40=52,46,41
<41=42
<42=44,43
<44=45
<46=47
<47=49,48
<49=51,50
<52=53
<53=55,54
<64=67,66,65
<67=96,95,94,93,92,91,90,89,88,87,86,85,84,83,82,81,80,79,78,70,69,68
<70=71
<71=72
<72=74,73
<74=75
<75=77,76
<96=97
<97=99,98
<99=101,100
<110=112,111
<112=115,113
<113=114
<119=125,124,120
<120=121
<121=123,122
<125=126
<126=127
<127=129,128
<129=131,130
<139=142,141,140
<142=143
<143=144
<144=146,145
<153=162,161,154
<154=158,155
<155=157,156
<158=160,159
<162=165,163
<163=164
<165=208,166
<166=184,179,178,169,167
<167=168
<169=170
<170=174,171
<171=172
<172=173
<174=175
<175=177,176
<179=180
<180=183,182,181
<184=185
<185=207,206,186
<186=205,187
<187=196,188
<188=189
<189=190
<190=192,191
<192=193
<193=195,194
<196=197
<197=199,198
<199=203,200
<200=201
<201=202
<203=204
<208=209
<209=211,210
<211=213,212
<213=214
<214=216,215
<232=241,240,233
<233=237,234
<234=236,235
<237=239,238
<241=331,310,303,282,259,254,253,244,242
<242=243
<244=245
<245=249,246
<246=247
<247=248
<249=250
<250=252,251
<254=255
<255=258,257,256
<259=260
<260=281,261
<261=265,262
<262=263
<263=264
<265=266
<266=268,267
<268=272,269
<269=270
<270=271
<272=273
<273=275,274
<275=279,276
<276=277
<277=278
<279=280
<282=283
<283=302,301,284
<284=300,285
<285=289,286
<286=287
<287=288
<289=290
<290=292,291
<292=296,293
<293=294
<294=295
<296=297
<297=299,298
<303=306,304
<304=305
<306=307
<307=309,308
<310=311
<311=330,329,312
<312=328,313
<313=317,314
<314=315
<315=316
<317=318
<318=320,319
<320=324,321
<321=322
<322=323
<324=325
<325=327,326
<331=332
<332=342,341,333
<333=340,334
<334=336,335
<336=337
<337=339,338
<361=367,366,362
<362=363
<363=365,364
<367=375,368
<368=369
<369=373,370
<370=371
<371=372
<373=374
<375=377,376
<377=378
<378=380,379
<380=381
<381=383,382
<383=385,384
<397=403,402,398
<398=399
<399=401,400
<403=770,749,733,712,705,704,703,702,701,700,699,698,697,696,695,694,693,692,691,690,689,688,687,686,685,408,407,406,404
<404=405
<408=678,667,650,639,627,623,609,608,607,606,605,604,602,601,600,428,421,420,409
<409=410
<410=416,411
<411=414,412
<412=413
<414=415
<416=417
<417=419,418
<421=422
<422=427,426,423
<423=425,424
<428=588,573,569,551,533,510,492,469,451,433,429
<429=430
<430=432,431
<433=434
<434=448,435
<435=437,436
<437=438
<438=440,439
<440=444,441
<441=442
<442=443
<444=445
<445=447,446
<448=450,449
<451=452
<452=466,453
<453=455,454
<455=456
<456=458,457
<458=462,459
<459=460
<460=461
<462=463
<463=465,464
<466=468,467
<469=470
<470=489,471
<471=473,472
<473=474
<474=476,475
<476=478,477
<478=479
<479=481,480
<481=485,482
<482=483
<483=484
<485=486
<486=488,487
<489=491,490
<492=493
<493=507,494
<494=496,495
<496=497
<497=499,498
<499=503,500
<500=501
<501=502
<503=504
<504=506,505
<507=509,508
<510=511
<511=530,512
<512=514,513
<514=515
<515=517,516
<517=519,518
<519=520
<520=522,521
<522=526,523
<523=524
<524=525
<526=527
<527=529,528
<530=532,531
<533=534
<534=548,535
<535=537,536
<537=538
<538=540,539
<540=544,541
<541=542
<542=543
<544=545
<545=547,546
<548=550,549
<551=552
<552=566,553
<553=555,554
<555=556
<556=558,557
<558=562,559
<559=560
<560=561
<562=563
<563=565,564
<566=568,567
<569=570
<570=572,571
<573=581,574
<574=576,575
<576=577
<577=580,579,578
<581=582
<582=584,583
<584=585
<585=587,586
<588=589
<589=599,598,590
<590=597,591
<591=593,592
<593=594
<594=596,595
<602=603
<609=610
<610=619,611
<611=612
<612=613
<613=615,614
<615=616
<616=618,617
<619=620
<620=622,621
<623=624
<624=626,625
<627=628
<628=638,637,629
<629=636,630
<630=632,631
<632=633
<633=635,634
<639=641,640
<641=642
<642=648,643
<643=646,644
<644=645
<646=647
<648=649
<650=651
<651=666,665,652
<652=664,653
<653=662,654
<654=655
<655=656
<656=658,657
<658=659
<659=661,660
<662=663
<667=669,668
<669=670
<670=676,671
<671=674,672
<672=673
<674=675
<676=677
<678=679
<679=681,680
<681=682
<682=684,683
<705=706
<706=711,710,707
<707=709,708
<712=713
<713=732,731,714
<714=730,715
<715=724,716
<716=717
<717=718
<718=722,719
<719=720
<720=721
<722=723
<724=725
<725=727,726
<727=729,728
<733=734
<734=748,747,735
<735=746,736
<736=744,737
<737=742,740,738
<738=739
<740=741
<742=743
<744=745
<749=761,750
<750=751
<751=760,752
<752=758,753
<753=756,754
<754=755
<756=757
<758=759
<761=762
<762=769,763
<763=765,764
<765=766
<766=768,767
<770=771
<771=773,772
<825=837,836,826
<826=833,830,827
<827=829,828
<830=832,831
<833=835,834
<837=1009,998,977,963,947,926,919,918,917,916,915,914,913,912,911,910,909,908,907,906,905,904,903,902,901,842,841,840,838
<838=839
<842=894,883,866,855,851,850,843
<843=844
<844=846,845
<846=847
<847=849,848
<851=852
<852=854,853
<855=857,856
<857=858
<858=864,859
<859=862,860
<860=861
<862=863
<864=865
<866=867
<867=882,881,868
<868=880,869
<869=878,870
<870=871
<871=872
<872=874,873
<874=875
<875=877,876
<878=879
<883=885,884
<885=886
<886=892,887
<887=890,888
<888=889
<890=891
<892=893
<894=895
<895=897,896
<897=898
<898=900,899
<919=920
<920=925,924,921
<921=923,922
<926=927
<927=946,945,928
<928=944,929
<929=938,930
<930=931
<931=932
<932=936,933
<933=934
<934=935
<936=937
<938=939
<939=941,940
<941=943,942
<947=948
<948=962,961,949
<949=960,950
<950=958,951
<951=956,954,952
<952=953
<954=955
<956=957
<958=959
<963=975,964
<964=965
<965=974,966
<966=972,967
<967=970,968
<968=969
<970=971
<972=973
<975=976
<977=989,978
<978=979
<979=988,980
<980=986,981
<981=984,982
<982=983
<984=985
<986=987
<989=990
<990=997,991
<991=993,992
<993=994
<994=996,995
<998=999
<999=1008,1000
<1000=1006,1001
<1001=1004,1002
<1002=1003
<1004=1005
<1006=1007
<1009=1010
<1010=1012,1011
<1039=1048,1047,1040
<1040=1044,1041
<1041=1043,1042
<1044=1046,1045
<1048=1049
<1049=1050
<1050=1058,1051
<1051=1056,1054,1052
<1052=1053
<1054=1055
<1056=1057
<1058=1059
<1067=1073,1072,1068
<1068=1069
<1069=1071,1070
<1073=1215,1204,1188,1167,1160,1159,1158,1157,1156,1155,1154,1153,1152,1151,1150,1149,1148,1147,1146,1145,1144,1143,1142,1141,1140,1078,1077,1076,1074
<1074=1075
<1078=1133,1122,1105,1094,1089,1088,1079
<1079=1080
<1080=1084,1081
<1081=1082
<1082=1083
<1084=1085
<1085=1087,1086
<1089=1090
<1090=1093,1092,1091
<1094=1096,1095
<1096=1097
<1097=1103,1098
<1098=1101,1099
<1099=1100
<1101=1102
<1103=1104
<1105=1106
<1106=1121,1120,1107
<1107=1119,1108
<1108=1117,1109
<1109=1110
<1110=1111
<1111=1113,1112
<1113=1114
<1114=1116,1115
<1117=1118
<1122=1124,1123
<1124=1125
<1125=1131,1126
<1126=1129,1127
<1127=1128
<1129=1130
<1131=1132
<1133=1134
<1134=1136,1135
<1136=1137
<1137=1139,1138
<1160=1161
<1161=1166,1165,1162
<1162=1164,1163
<1167=1168
<1168=1187,1186,1169
<1169=1185,1170
<1170=1179,1171
<1171=1172
<1172=1173
<1173=1177,1174
<1174=1175
<1175=1176
<1177=1178
<1179=1180
<1180=1182,1181
<1182=1184,1183
<1188=1189
<1189=1203,1202,1190
<1190=1201,1191
<1191=1199,1192
<1192=1197,1195,1193
<1193=1194
<1195=1196
<1197=1198
<1199=1200
<1204=1205
<1205=1214,1206
<1206=1212,1207
<1207=1210,1208
<1208=1209
<1210=1211
<1212=1213
<1215=1216
<1216=1218,1217
<1242=1251,1250,1243
<1243=1247,1244
<1244=1246,1245
<1247=1249,1248
<1251=1453,1405,1387,1369,1252
<1252=1363,1279,1253
<1253=1254
<1254=1273,1267,1261,1255
<1255=1256
<1256=1258,1257
<1258=1260,1259
<1261=1262
<1262=1264,1263
<1264=1266,1265
<1267=1268
<1268=1270,1269
<1270=1272,1271
<1273=1274
<1274=1276,1275
<1276=1278,1277
<1279=1340,1322,1304,1280
<1280=1281
<1281=1301,1282
<1282=1285,1284,1283
<1285=1286
<1286=1290,1287
<1287=1288
<1288=1289
<1290=1291
<1291=1293,1292
<1293=1297,1294
<1294=1295
<1295=1296
<1297=1298
<1298=1300,1299
<1301=1303,1302
<1304=1305
<1305=1319,1306
<1306=1308,1307
<1308=1309
<1309=1311,1310
<1311=1315,1312
<1312=1313
<1313=1314
<1315=1316
<1316=1318,1317
<1319=1321,1320
<1322=1323
<1323=1337,1324
<1324=1326,1325
<1326=1327
<1327=1329,1328
<1329=1333,1330
<1330=1331
<1331=1332
<1333=1334
<1334=1336,1335
<1337=1339,1338
<1340=1341
<1341=1360,1342
<1342=1344,1343
<1344=1345
<1345=1347,1346
<1347=1349,1348
<1349=1350
<1350=1352,1351
<1352=1356,1353
<1353=1354
<1354=1355
<1356=1357
<1357=1359,1358
<1360=1362,1361
<1363=1364
<1364=1366,1365
<1366=1368,1367
<1369=1370
<1370=1384,1371
<1371=1373,1372
<1373=1374
<1374=1376,1375
<1376=1380,1377
<1377=1378
<1378=1379
<1380=1381
<1381=1383,1382
<1384=1386,1385
<1387=1388
<1388=1402,1389
<1389=1391,1390
<1391=1392
<1392=1394,1393
<1394=1398,1395
<1395=1396
<1396=1397
<1398=1399
<1399=1401,1400
<1402=1404,1403
<1405=1447,1441,1406
<1406=1407
<1407=1435,1429,1408
<1408=1409
<1409=1423,1417,1410
<1410=1411
<1411=1412
<1412=1414,1413
<1414=1416,1415
<1417=1418
<1418=1420,1419
<1420=1422,1421
<1423=1424
<1424=1426,1425
<1426=1428,1427
<1429=1430
<1430=1432,1431
<1432=1434,1433
<1435=1436
<1436=1438,1437
<1438=1440,1439
<1441=1442
<1442=1444,1443
<1444=1446,1445
<1447=1448
<1448=1450,1449
<1450=1452,1451
<1453=1454
<1454=1468,1455
<1455=1457,1456
<1457=1458
<1458=1460,1459
<1460=1464,1461
<1461=1462
<1462=1463
<1464=1465
<1465=1467,1466
<1468=1470,1469
<1499=1508,1507,1500
<1500=1504,1501
<1501=1503,1502
<1504=1506,1505
<1508=1759,1748,1727,1711,1690,1683,1682,1681,1680,1679,1678,1677,1676,1675,1674,1673,1672,1671,1670,1669,1668,1667,1666,1665,1664,1663,1513,1512,1511,1509
<1509=1510
<1513=1656,1645,1628,1617,1605,1601,1587,1586,1585,1584,1583,1582,1580,1579,1578,1533,1526,1525,1514
<1514=1515
<1515=1521,1516
<1516=1519,1517
<1517=1518
<1519=1520
<1521=1522
<1522=1524,1523
<1526=1527
<1527=1532,1531,1528
<1528=1530,1529
<1533=1566,1551,1547,1538,1534
<1534=1535
<1535=1537,1536
<1538=1539
<1539=1545,1540
<1540=1543,1541
<1541=1542
<1543=1544
<1545=1546
<1547=1548
<1548=1550,1549
<1551=1559,1552
<1552=1554,1553
<1554=1555
<1555=1558,1557,1556
<1559=1560
<1560=1562,1561
<1562=1563
<1563=1565,1564
<1566=1567
<1567=1577,1576,1568
<1568=1575,1569
<1569=1571,1570
<1571=1572
<1572=1574,1573
<1580=1581
<1587=1588
<1588=1597,1589
<1589=1590
<1590=1591
<1591=1593,1592
<1593=1594
<1594=1596,1595
<1597=1598
<1598=1600,1599
<1601=1602
<1602=1604,1603
<1605=1606
<1606=1616,1615,1607
<1607=1614,1608
<1608=1610,1609
<1610=1611
<1611=1613,1612
<1617=1619,1618
<1619=1620
<1620=1626,1621
<1621=1624,1622
<1622=1623
<1624=1625
<1626=1627
<1628=1629
<1629=1644,1643,1630
<1630=1642,1631
<1631=1640,1632
<1632=1633
<1633=1634
<1634=1636,1635
<1636=1637
<1637=1639,1638
<1640=1641
<1645=1647,1646
<1647=1648
<1648=1654,1649
<1649=1652,1650
<1650=1651
<1652=1653
<1654=1655
<1656=1657
<1657=1659,1658
<1659=1660
<1660=1662,1661
<1683=1684
<1684=1689,1688,1685
<1685=1687,1686
<1690=1691
<1691=1710,1709,1692
<1692=1708,1693
<1693=1702,1694
<1694=1695
<1695=1696
<1696=1700,1697
<1697=1698
<1698=1699
<1700=1701
<1702=1703
<1703=1705,1704
<1705=1707,1706
<1711=1712
<1712=1726,1725,1713
<1713=1724,1714
<1714=1722,1715
<1715=1720,1718,1716
<1716=1717
<1718=1719
<1720=1721
<1722=1723
<1727=1739,1728
<1728=1729
<1729=1738,1730
<1730=1736,1731
<1731=1734,1732
<1732=1733
<1734=1735
<1736=1737
<1739=1740
<1740=1747,1741
<1741=1743,1742
<1743=1744
<1744=1746,1745
<1748=1749
<1749=1758,1750
<1750=1756,1751
<1751=1754,1752
<1752=1753
<1754=1755
<1756=1757
<1759=1760
<1760=1762,1761
<1798=1810,1809,1799
<1799=1806,1803,1800
<1800=1802,1801
<1803=1805,1804
<1806=1808,1807
<1810=2062,2029,2013,1992,1985,1984,1983,1982,1981,1980,1979,1978,1977,1976,1975,1974,1973,1972,1971,1970,1969,1968,1967,1966,1965,1815,1814,1813,1811
<1811=1812
<1815=1958,1947,1930,1919,1907,1903,1889,1888,1887,1886,1885,1884,1882,1881,1880,1835,1828,1827,1816
<1816=1817
<1817=1823,1818
<1818=1821,1819
<1819=1820
<1821=1822
<1823=1824
<1824=1826,1825
<1828=1829
<1829=1834,1833,1830
<1830=1832,1831
<1835=1868,1853,1849,1840,1836
<1836=1837
<1837=1839,1838
<1840=1841
<1841=1847,1842
<1842=1845,1843
<1843=1844
<1845=1846
<1847=1848
<1849=1850
<1850=1852,1851
<1853=1861,1854
<1854=1856,1855
<1856=1857
<1857=1860,1859,1858
<1861=1862
<1862=1864,1863
<1864=1865
<1865=1867,1866
<1868=1869
<1869=1879,1878,1870
<1870=1877,1871
<1871=1873,1872
<1873=1874
<1874=1876,1875
<1882=1883
<1889=1890
<1890=1899,1891
<1891=1892
<1892=1893
<1893=1895,1894
<1895=1896
<1896=1898,1897
<1899=1900
<1900=1902,1901
<1903=1904
<1904=1906,1905
<1907=1908
<1908=1918,1917,1909
<1909=1916,1910
<1910=1912,1911
<1912=1913
<1913=1915,1914
<1919=1921,1920
<1921=1922
<1922=1928,1923
<1923=1926,1924
<1924=1925
<1926=1927
<1928=1929
<1930=1931
<1931=1946,1945,1932
<1932=1944,1933
<1933=1942,1934
<1934=1935
<1935=1936
<1936=1938,1937
<1938=1939
<1939=1941,1940
<1942=1943
<1947=1949,1948
<1949=1950
<1950=1956,1951
<1951=1954,1952
<1952=1953
<1954=1955
<1956=1957
<1958=1959
<1959=1961,1960
<1961=1962
<1962=1964,1963
<1985=1986
<1986=1991,1990,1987
<1987=1989,1988
<1992=1993
<1993=2012,2011,1994
<1994=2010,1995
<1995=2004,1996
<1996=1997
<1997=1998
<1998=2002,1999
<1999=2000
<2000=2001
<2002=2003
<2004=2005
<2005=2007,2006
<2007=2009,2008
<2013=2014
<2014=2028,2027,2015
<2015=2026,2016
<2016=2024,2017
<2017=2022,2020,2018
<2018=2019
<2020=2021
<2022=2023
<2024=2025
<2029=2030
<2030=2061,2031
<2031=2053,2032
<2032=2045,2033
<2033=2043,2034
<2034=2041,2035
<2035=2036
<2036=2039,2038,2037
<2039=2040
<2041=2042
<2043=2044
<2045=2051,2046
<2046=2049,2047
<2047=2048
<2049=2050
<2051=2052
<2053=2059,2054
<2054=2057,2055
<2055=2056
<2057=2058
<2059=2060
<2062=2063
<2063=2065,2064
<2101=2107,2106,2102
<2102=2103
<2103=2105,2104
<2107=2451,2440,2424,2403,2396,2395,2394,2393,2392,2391,2390,2389,2388,2387,2386,2385,2384,2383,2382,2381,2380,2379,2378,2377,2376,2112,2111,2110,2108
<2108=2109
<2112=2369,2358,2341,2330,2318,2314,2300,2299,2298,2297,2296,2295,2293,2292,2291,2132,2125,2124,2113
<2113=2114
<2114=2120,2115
<2115=2118,2116
<2116=2117
<2118=2119
<2120=2121
<2121=2123,2122
<2125=2126
<2126=2131,2130,2127
<2127=2129,2128
<2132=2279,2264,2260,2242,2224,2206,2183,2160,2137,2133
<2133=2134
<2134=2136,2135
<2137=2138
<2138=2157,2139
<2139=2141,2140
<2141=2142
<2142=2144,2143
<2144=2146,2145
<2146=2147
<2147=2149,2148
<2149=2153,2150
<2150=2151
<2151=2152
<2153=2154
<2154=2156,2155
<2157=2159,2158
<2160=2161
<2161=2180,2162
<2162=2164,2163
<2164=2165
<2165=2167,2166
<2167=2169,2168
<2169=2170
<2170=2172,2171
<2172=2176,2173
<2173=2174
<2174=2175
<2176=2177
<2177=2179,2178
<2180=2182,2181
<2183=2184
<2184=2203,2185
<2185=2187,2186
<2187=2188
<2188=2190,2189
<2190=2192,2191
<2192=2193
<2193=2195,2194
<2195=2199,2196
<2196=2197
<2197=2198
<2199=2200
<2200=2202,2201
<2203=2205,2204
<2206=2207
<2207=2221,2208
<2208=2210,2209
<2210=2211
<2211=2213,2212
<2213=2217,2214
<2214=2215
<2215=2216
<2217=2218
<2218=2220,2219
<2221=2223,2222
<2224=2225
<2225=2239,2226
<2226=2228,2227
<2228=2229
<2229=2231,2230
<2231=2235,2232
<2232=2233
<2233=2234
<2235=2236
<2236=2238,2237
<2239=2241,2240
<2242=2243
<2243=2257,2244
<2244=2246,2245
<2246=2247
<2247=2249,2248
<2249=2253,2250
<2250=2251
<2251=2252
<2253=2254
<2254=2256,2255
<2257=2259,2258
<2260=2261
<2261=2263,2262
<2264=2272,2265
<2265=2267,2266
<2267=2268
<2268=2271,2270,2269
<2272=2273
<2273=2275,2274
<2275=2276
<2276=2278,2277
<2279=2280
<2280=2290,2289,2281
<2281=2288,2282
<2282=2284,2283
<2284=2285
<2285=2287,2286
<2293=2294
<2300=2301
<2301=2310,2302
<2302=2303
<2303=2304
<2304=2306,2305
<2306=2307
<2307=2309,2308
<2310=2311
<2311=2313,2312
<2314=2315
<2315=2317,2316
<2318=2319
<2319=2329,2328,2320
<2320=2327,2321
<2321=2323,2322
<2323=2324
<2324=2326,2325
<2330=2332,2331
<2332=2333
<2333=2339,2334
<2334=2337,2335
<2335=2336
<2337=2338
<2339=2340
<2341=2342
<2342=2357,2356,2343
<2343=2355,2344
<2344=2353,2345
<2345=2346
<2346=2347
<2347=2349,2348
<2349=2350
<2350=2352,2351
<2353=2354
<2358=2360,2359
<2360=2361
<2361=2367,2362
<2362=2365,2363
<2363=2364
<2365=2366
<2367=2368
<2369=2370
<2370=2372,2371
<2372=2373
<2373=2375,2374
<2396=2397
<2397=2402,2401,2398
<2398=2400,2399
<2403=2404
<2404=2423,2422,2405
<2405=2421,2406
<2406=2415,2407
<2407=2408
<2408=2409
<2409=2413,2410
<2410=2411
<2411=2412
<2413=2414
<2415=2416
<2416=2418,2417
<2418=2420,2419
<2424=2425
<2425=2439,2438,2426
<2426=2437,2427
<2427=2435,2428
<2428=2433,2431,2429
<2429=2430
<2431=2432
<2433=2434
<2435=2436
<2440=2441
<2441=2450,2442
<2442=2448,2443
<2443=2446,2444
<2444=2445
<2446=2447
<2448=2449
<2451=2452
<2452=2454,2453
<2504=2516,2515,2505
<2505=2512,2509,2506
<2506=2508,2507
<2509=2511,2510
<2512=2514,2513
<2516=2797,2776,2762,2746,2725,2718,2717,2716,2715,2714,2713,2712,2711,2710,2709,2708,2707,2706,2705,2704,2703,2702,2701,2700,2699,2698,2521,2520,2519,2517
<2517=2518
<2521=2691,2680,2663,2652,2640,2621,2602,2583,2522
<2522=2576,2552,2523
<2523=2524
<2524=2541,2540,2525
<2525=2526
<2526=2536,2527
<2527=2534,2532,2530,2528
<2528=2529
<2530=2531
<2532=2533
<2534=2535
<2536=2537
<2537=2539,2538
<2541=2542
<2542=2551,2550,2543
<2543=2549,2544
<2544=2548,2545
<2545=2547,2546
<2552=2567,2566,2553
<2553=2554
<2554=2562,2555
<2555=2560,2558,2556
<2556=2557
<2558=2559
<2560=2561
<2562=2563
<2563=2565,2564
<2567=2568
<2568=2575,2574,2569
<2569=2573,2570
<2570=2572,2571
<2576=2577
<2577=2579,2578
<2579=2580
<2580=2582,2581
<2583=2584
<2584=2601,2600,2585
<2585=2599,2586
<2586=2588,2587
<2588=2589
<2589=2591,2590
<2591=2595,2592
<2592=2593
<2593=2594
<2595=2596
<2596=2598,2597
<2602=2603
<2603=2620,2619,2604
<2604=2618,2605
<2605=2607,2606
<2607=2608
<2608=2610,2609
<2610=2614,2611
<2611=2612
<2612=2613
<2614=2615
<2615=2617,2616
<2621=2622
<2622=2639,2638,2623
<2623=2637,2624
<2624=2626,2625
<2626=2627
<2627=2629,2628
<2629=2633,2630
<2630=2631
<2631=2632
<2633=2634
<2634=2636,2635
<2640=2641
<2641=2651,2650,2642
<2642=2649,2643
<2643=2645,2644
<2645=2646
<2646=2648,2647
<2652=2654,2653
<2654=2655
<2655=2661,2656
<2656=2659,2657
<2657=2658
<2659=2660
<2661=2662
<2663=2664
<2664=2679,2678,2665
<2665=2677,2666
<2666=2675,2667
<2667=2668
<2668=2669
<2669=2671,2670
<2671=2672
<2672=2674,2673
<2675=2676
<2680=2682,2681
<2682=2683
<2683=2689,2684
<2684=2687,2685
<2685=2686
<2687=2688
<2689=2690
<2691=2692
<2692=2694,2693
<2694=2695
<2695=2697,2696
<2718=2719
<2719=2724,2723,2720
<2720=2722,2721
<2725=2726
<2726=2745,2744,2727
<2727=2743,2728
<2728=2737,2729
<2729=2730
<2730=2731
<2731=2735,2732
<2732=2733
<2733=2734
<2735=2736
<2737=2738
<2738=2740,2739
<2740=2742,2741
<2746=2747
<2747=2761,2760,2748
<2748=2759,2749
<2749=2757,2750
<2750=2755,2753,2751
<2751=2752
<2753=2754
<2755=2756
<2757=2758
<2762=2774,2763
<2763=2764
<2764=2773,2765
<2765=2771,2766
<2766=2769,2767
<2767=2768
<2769=2770
<2771=2772
<2774=2775
<2776=2788,2777
<2777=2778
<2778=2787,2779
<2779=2785,2780
<2780=2783,2781
<2781=2782
<2783=2784
<2785=2786
<2788=2789
<2789=2796,2790
<2790=2792,2791
<2792=2793
<2793=2795,2794
<2797=2798
<2798=2800,2799
<2838=2847,2846,2839
<2839=2843,2840
<2840=2842,2841
<2843=2845,2844
<2847=2848
<2848=2849
<2849=2860,2850
<2850=2858,2853,2851
<2851=2852
<2853=2854
<2854=2856,2855
<2856=2857
<2858=2859
<2860=2861
<2869=2875,2874,2870
<2870=2871
<2871=2873,2872
<2875=2876
<2876=2877
<2877=2888,2878
<2878=2886,2881,2879
<2879=2880
<2881=2882
<2882=2884,2883
<2884=2885
<2886=2887
<2888=2889
<2897=2903,2902,2898
<2898=2899
<2899=2901,2900
<2903=2904
<2904=2905
<2905=2911,2906
<2906=2909,2907
<2907=2908
<2909=2910
<2911=2912
<2919=2925,2924,2920
<2920=2921
<2921=2923,2922
<2925=3132,3121,3105,3084,3077,3076,3075,3074,3073,3072,3071,3070,3069,3068,3067,3066,3065,3064,3063,3062,3061,3060,3059,3058,3057,2930,2929,2928,2926
<2926=2927
<2930=3050,3039,3022,3011,2999,2995,2994,2993,2992,2983,2974,2973,2972,2971,2950,2943,2942,2931
<2931=2932
<2932=2938,2933
<2933=2936,2934
<2934=2935
<2936=2937
<2938=2939
<2939=2941,2940
<2943=2944
<2944=2949,2948,2945
<2945=2947,2946
<2950=2951
<2951=2963,2952
<2952=2954,2953
<2954=2955
<2955=2957,2956
<2957=2959,2958
<2959=2960
<2960=2962,2961
<2963=2970,2964
<2964=2966,2965
<2966=2967
<2967=2969,2968
<2974=2975
<2975=2982,2976
<2976=2978,2977
<2978=2979
<2979=2981,2980
<2983=2984
<2984=2991,2985
<2985=2987,2986
<2987=2988
<2988=2990,2989
<2995=2996
<2996=2998,2997
<2999=3000
<3000=3010,3009,3001
<3001=3008,3002
<3002=3004,3003
<3004=3005
<3005=3007,3006
<3011=3013,3012
<3013=3014
<3014=3020,3015
<3015=3018,3016
<3016=3017
<3018=3019
<3020=3021
<3022=3023
<3023=3038,3037,3024
<3024=3036,3025
<3025=3034,3026
<3026=3027
<3027=3028
<3028=3030,3029
<3030=3031
<3031=3033,3032
<3034=3035
<3039=3041,3040
<3041=3042
<3042=3048,3043
<3043=3046,3044
<3044=3045
<3046=3047
<3048=3049
<3050=3051
<3051=3053,3052
<3053=3054
<3054=3056,3055
<3077=3078
<3078=3083,3082,3079
<3079=3081,3080
<3084=3085
<3085=3104,3103,3086
<3086=3102,3087
<3087=3096,3088
<3088=3089
<3089=3090
<3090=3094,3091
<3091=3092
<3092=3093
<3094=3095
<3096=3097
<3097=3099,3098
<3099=3101,3100
<3105=3106
<3106=3120,3119,3107
<3107=3118,3108
<3108=3116,3109
<3109=3114,3112,3110
<3110=3111
<3112=3113
<3114=3115
<3116=3117
<3121=3122
<3122=3131,3123
<3123=3129,3124
<3124=3127,3125
<3125=3126
<3127=3128
<3129=3130
<3132=3133
<3133=3135,3134
<3170=3179,3178,3171
<3171=3175,3172
<3172=3174,3173
<3175=3177,3176
<3179=3436,3425,3424,3423,3422,3413,3404,3403,3402,3401,3375,3359,3338,3331,3330,3329,3328,3327,3326,3325,3324,3323,3322,3321,3320,3319,3318,3317,3316,3315,3314,3313,3312,3311,3184,3183,3182,3180
<3180=3181
<3184=3304,3293,3276,3265,3253,3249,3248,3247,3246,3237,3228,3227,3226,3225,3204,3197,3196,3185
<3185=3186
<3186=3192,3187
<3187=3190,3188
<3188=3189
<3190=3191
<3192=3193
<3193=3195,3194
<3197=3198
<3198=3203,3202,3199
<3199=3201,3200
<3204=3205
<3205=3217,3206
<3206=3208,3207
<3208=3209
<3209=3211,3210
<3211=3213,3212
<3213=3214
<3214=3216,3215
<3217=3224,3218
<3218=3220,3219
<3220=3221
<3221=3223,3222
<3228=3229
<3229=3236,3230
<3230=3232,3231
<3232=3233
<3233=3235,3234
<3237=3238
<3238=3245,3239
<3239=3241,3240
<3241=3242
<3242=3244,3243
<3249=3250
<3250=3252,3251
<3253=3254
<3254=3264,3263,3255
<3255=3262,3256
<3256=3258,3257
<3258=3259
<3259=3261,3260
<3265=3267,3266
<3267=3268
<3268=3274,3269
<3269=3272,3270
<3270=3271
<3272=3273
<3274=3275
<3276=3277
<3277=3292,3291,3278
<3278=3290,3279
<3279=3288,3280
<3280=3281
<3281=3282
<3282=3284,3283
<3284=3285
<3285=3287,3286
<3288=3289
<3293=3295,3294
<3295=3296
<3296=3302,3297
<3297=3300,3298
<3298=3299
<3300=3301
<3302=3303
<3304=3305
<3305=3307,3306
<3307=3308
<3308=3310,3309
<3331=3332
<3332=3337,3336,3333
<3333=3335,3334
<3338=3339
<3339=3358,3357,3340
<3340=3356,3341
<3341=3350,3342
<3342=3343
<3343=3344
<3344=3348,3345
<3345=3346
<3346=3347
<3348=3349
<3350=3351
<3351=3353,3352
<3353=3355,3354
<3359=3360
<3360=3374,3373,3361
<3361=3372,3362
<3362=3370,3363
<3363=3368,3366,3364
<3364=3365
<3366=3367
<3368=3369
<3370=3371
<3375=3376
<3376=3400,3377
<3377=3398,3378
<3378=3391,3379
<3379=3380
<3380=3382,3381
<3382=3383
<3383=3385,3384
<3385=3387,3386
<3387=3388
<3388=3390,3389
<3391=3392
<3392=3394,3393
<3394=3395
<3395=3397,3396
<3398=3399
<3404=3405
<3405=3412,3406
<3406=3408,3407
<3408=3409
<3409=3411,3410
<3413=3414
<3414=3421,3415
<3415=3417,3416
<3417=3418
<3418=3420,3419
<3425=3426
<3426=3435,3427
<3427=3433,3428
<3428=3431,3429
<3429=3430
<3431=3432
<3433=3434
<3436=3437
<3437=3439,3438
<3477=3483,3482,3478
<3478=3479
<3479=3481,3480
<3483=3682,3671,3655,3634,3627,3626,3625,3624,3623,3622,3621,3620,3619,3618,3617,3616,3615,3614,3613,3612,3611,3610,3609,3608,3607,3488,3487,3486,3484
<3484=3485
<3488=3600,3589,3572,3561,3549,3530,3526,3525,3524,3523,3522,3521,3519,3518,3517,3508,3501,3500,3489
<3489=3490
<3490=3496,3491
<3491=3494,3492
<3492=3493
<3494=3495
<3496=3497
<3497=3499,3498
<3501=3502
<3502=3507,3506,3503
<3503=3505,3504
<3508=3509
<3509=3516,3510
<3510=3512,3511
<3512=3513
<3513=3515,3514
<3519=3520
<3526=3527
<3527=3529,3528
<3530=3531
<3531=3548,3547,3532
<3532=3546,3533
<3533=3535,3534
<3535=3536
<3536=3538,3537
<3538=3542,3539
<3539=3540
<3540=3541
<3542=3543
<3543=3545,3544
<3549=3550
<3550=3560,3559,3551
<3551=3558,3552
<3552=3554,3553
<3554=3555
<3555=3557,3556
<3561=3563,3562
<3563=3564
<3564=3570,3565
<3565=3568,3566
<3566=3567
<3568=3569
<3570=3571
<3572=3573
<3573=3588,3587,3574
<3574=3586,3575
<3575=3584,3576
<3576=3577
<3577=3578
<3578=3580,3579
<3580=3581
<3581=3583,3582
<3584=3585
<3589=3591,3590
<3591=3592
<3592=3598,3593
<3593=3596,3594
<3594=3595
<3596=3597
<3598=3599
<3600=3601
<3601=3603,3602
<3603=3604
<3604=3606,3605
<3627=3628
<3628=3633,3632,3629
<3629=3631,3630
<3634=3635
<3635=3654,3653,3636
<3636=3652,3637
<3637=3646,3638
<3638=3639
<3639=3640
<3640=3644,3641
<3641=3642
<3642=3643
<3644=3645
<3646=3647
<3647=3649,3648
<3649=3651,3650
<3655=3656
<3656=3670,3669,3657
<3657=3668,3658
<3658=3666,3659
<3659=3664,3662,3660
<3660=3661
<3662=3663
<3664=3665
<3666=3667
<3671=3672
<3672=3681,3673
<3673=3679,3674
<3674=3677,3675
<3675=3676
<3677=3678
<3679=3680
<3682=3683
<3683=3685,3684
<3716=3725,3724,3717
<3717=3721,3718
<3718=3720,3719
<3721=3723,3722
<3725=3954,3927,3911,3897,3876,3869,3868,3867,3866,3865,3864,3863,3862,3861,3860,3859,3858,3857,3856,3855,3854,3853,3852,3851,3850,3849,3730,3729,3728,3726
<3726=3727
<3730=3842,3831,3814,3803,3791,3772,3768,3767,3766,3765,3764,3763,3761,3760,3759,3750,3743,3742,3731
<3731=3732
<3732=3738,3733
<3733=3736,3734
<3734=3735
<3736=3737
<3738=3739
<3739=3741,3740
<3743=3744
<3744=3749,3748,3745
<3745=3747,3746
<3750=3751
<3751=3758,3752
<3752=3754,3753
<3754=3755
<3755=3757,3756
<3761=3762
<3768=3769
<3769=3771,3770
<3772=3773
<3773=3790,3789,3774
<3774=3788,3775
<3775=3777,3776
<3777=3778
<3778=3780,3779
<3780=3784,3781
<3781=3782
<3782=3783
<3784=3785
<3785=3787,3786
<3791=3792
<3792=3802,3801,3793
<3793=3800,3794
<3794=3796,3795
<3796=3797
<3797=3799,3798
<3803=3805,3804
<3805=3806
<3806=3812,3807
<3807=3810,3808
<3808=3809
<3810=3811
<3812=3813
<3814=3815
<3815=3830,3829,3816
<3816=3828,3817
<3817=3826,3818
<3818=3819
<3819=3820
<3820=3822,3821
<3822=3823
<3823=3825,3824
<3826=3827
<3831=3833,3832
<3833=3834
<3834=3840,3835
<3835=3838,3836
<3836=3837
<3838=3839
<3840=3841
<3842=3843
<3843=3845,3844
<3845=3846
<3846=3848,3847
<3869=3870
<3870=3875,3874,3871
<3871=3873,3872
<3876=3877
<3877=3896,3895,3878
<3878=3894,3879
<3879=3888,3880
<3880=3881
<3881=3882
<3882=3886,3883
<3883=3884
<3884=3885
<3886=3887
<3888=3889
<3889=3891,3890
<3891=3893,3892
<3897=3898
<3898=3910,3909,3899
<3899=3908,3900
<3900=3904,3901
<3901=3902
<3902=3903
<3904=3905
<3905=3907,3906
<3911=3912
<3912=3926,3925,3913
<3913=3924,3914
<3914=3922,3915
<3915=3920,3918,3916
<3916=3917
<3918=3919
<3920=3921
<3922=3923
<3927=3928
<3928=3953,3929
<3929=3945,3930
<3930=3943,3931
<3931=3941,3932
<3932=3933
<3933=3937,3934
<3934=3935
<3935=3936
<3937=3938
<3938=3940,3939
<3941=3942
<3943=3944
<3945=3951,3946
<3946=3949,3947
<3947=3948
<3949=3950
<3951=3952
<3954=3955
<3955=3957,3956
<3993=3996,3995,3994
<3996=4170,4149,4142,4141,4140,4139,4138,4137,4136,4135,4134,4133,4132,4131,4130,4129,4128,4127,4126,4125,4124,4001,4000,3999,3997
<3997=3998
<4001=4117,4106,4089,4078,4066,4062,4061,4060,4059,4050,4041,4040,4039,4038,4017,4012,4011,4002
<4002=4003
<4003=4007,4004
<4004=4005
<4005=4006
<4007=4008
<4008=4010,4009
<4012=4013
<4013=4016,4015,4014
<4017=4018
<4018=4030,4019
<4019=4021,4020
<4021=4022
<4022=4024,4023
<4024=4026,4025
<4026=4027
<4027=4029,4028
<4030=4037,4031
<4031=4033,4032
<4033=4034
<4034=4036,4035
<4041=4042
<4042=4049,4043
<4043=4045,4044
<4045=4046
<4046=4048,4047
<4050=4051
<4051=4058,4052
<4052=4054,4053
<4054=4055
<4055=4057,4056
<4062=4063
<4063=4065,4064
<4066=4067
<4067=4077,4076,4068
<4068=4075,4069
<4069=4071,4070
<4071=4072
<4072=4074,4073
<4078=4080,4079
<4080=4081
<4081=4087,4082
<4082=4085,4083
<4083=4084
<4085=4086
<4087=4088
<4089=4090
<4090=4105,4104,4091
<4091=4103,4092
<4092=4101,4093
<4093=4094
<4094=4095
<4095=4097,4096
<4097=4098
<4098=4100,4099
<4101=4102
<4106=4108,4107
<4108=4109
<4109=4115,4110
<4110=4113,4111
<4111=4112
<4113=4114
<4115=4116
<4117=4118
<4118=4120,4119
<4120=4121
<4121=4123,4122
<4142=4143
<4143=4148,4147,4144
<4144=4146,4145
<4149=4150
<4150=4169,4168,4151
<4151=4167,4152
<4152=4161,4153
<4153=4154
<4154=4155
<4155=4159,4156
<4156=4157
<4157=4158
<4159=4160
<4161=4162
<4162=4164,4163
<4164=4166,4165
<4170=4171
<4171=4183,4182,4172
<4172=4181,4173
<4173=4179,4174
<4174=4177,4175
<4175=4176
<4177=4178
<4179=4180
<4216=4222,4221,4217
<4217=4218
<4218=4220,4219
<4222=4462,4461,4460,4459,4450,4441,4440,4439,4438,4412,4396,4375,4368,4367,4366,4365,4364,4363,4362,4361,4360,4359,4358,4357,4356,4355,4354,4353,4352,4351,4350,4227,4226,4225,4223
<4223=4224
<4227=4343,4332,4315,4304,4292,4288,4287,4286,4285,4276,4267,4266,4265,4264,4243,4238,4237,4228
<4228=4229
<4229=4233,4230
<4230=4231
<4231=4232
<4233=4234
<4234=4236,4235
<4238=4239
<4239=4242,4241,4240
<4243=4244
<4244=4256,4245
<4245=4247,4246
<4247=4248
<4248=4250,4249
<4250=4252,4251
<4252=4253
<4253=4255,4254
<4256=4263,4257
<4257=4259,4258
<4259=4260
<4260=4262,4261
<4267=4268
<4268=4275,4269
<4269=4271,4270
<4271=4272
<4272=4274,4273
<4276=4277
<4277=4284,4278
<4278=4280,4279
<4280=4281
<4281=4283,4282
<4288=4289
<4289=4291,4290
<4292=4293
<4293=4303,4302,4294
<4294=4301,4295
<4295=4297,4296
<4297=4298
<4298=4300,4299
<4304=4306,4305
<4306=4307
<4307=4313,4308
<4308=4311,4309
<4309=4310
<4311=4312
<4313=4314
<4315=4316
<4316=4331,4330,4317
<4317=4329,4318
<4318=4327,4319
<4319=4320
<4320=4321
<4321=4323,4322
<4323=4324
<4324=4326,4325
<4327=4328
<4332=4334,4333
<4334=4335
<4335=4341,4336
<4336=4339,4337
<4337=4338
<4339=4340
<4341=4342
<4343=4344
<4344=4346,4345
<4346=4347
<4347=4349,4348
<4368=4369
<4369=4374,4373,4370
<4370=4372,4371
<4375=4376
<4376=4395,4394,4377
<4377=4393,4378
<4378=4387,4379
<4379=4380
<4380=4381
<4381=4385,4382
<4382=4383
<4383=4384
<4385=4386
<4387=4388
<4388=4390,4389
<4390=4392,4391
<4396=4397
<4397=4411,4410,4398
<4398=4409,4399
<4399=4407,4400
<4400=4405,4403,4401
<4401=4402
<4403=4404
<4405=4406
<4407=4408
<4412=4413
<4413=4437,4414
<4414=4435,4415
<4415=4428,4416
<4416=4417
<4417=4419,4418
<4419=4420
<4420=4422,4421
<4422=4424,4423
<4424=4425
<4425=4427,4426
<4428=4429
<4429=4431,4430
<4431=4432
<4432=4434,4433
<4435=4436
<4441=4442
<4442=4449,4443
<4443=4445,4444
<4445=4446
<4446=4448,4447
<4450=4451
<4451=4458,4452
<4452=4454,4453
<4454=4455
<4455=4457,4456
<4462=4463
<4463=4465,4464
<4502=4505,4504,4503
<4505=4654,4633,4626,4625,4624,4623,4622,4621,4620,4619,4618,4617,4616,4615,4614,4613,4612,4611,4610,4609,4608,4510,4509,4508,4506
<4506=4507
<4510=4601,4590,4573,4562,4550,4533,4532,4511
<4511=4512
<4512=4528,4513
<4513=4514
<4514=4515
<4515=4517,4516
<4517=4518
<4518=4520,4519
<4520=4524,4521
<4521=4522
<4522=4523
<4524=4525
<4525=4527,4526
<4528=4529
<4529=4531,4530
<4533=4534
<4534=4549,4548,4535
<4535=4537,4536
<4537=4538
<4538=4540,4539
<4540=4544,4541
<4541=4542
<4542=4543
<4544=4545
<4545=4547,4546
<4550=4551
<4551=4561,4560,4552
<4552=4559,4553
<4553=4555,4554
<4555=4556
<4556=4558,4557
<4562=4564,4563
<4564=4565
<4565=4571,4566
<4566=4569,4567
<4567=4568
<4569=4570
<4571=4572
<4573=4574
<4574=4589,4588,4575
<4575=4587,4576
<4576=4585,4577
<4577=4578
<4578=4579
<4579=4581,4580
<4581=4582
<4582=4584,4583
<4585=4586
<4590=4592,4591
<4592=4593
<4593=4599,4594
<4594=4597,4595
<4595=4596
<4597=4598
<4599=4600
<4601=4602
<4602=4604,4603
<4604=4605
<4605=4607,4606
<4626=4627
<4627=4632,4631,4628
<4628=4630,4629
<4633=4634
<4634=4653,4652,4635
<4635=4651,4636
<4636=4645,4637
<4637=4638
<4638=4639
<4639=4643,4640
<4640=4641
<4641=4642
<4643=4644
<4645=4646
<4646=4648,4647
<4648=4650,4649
<4654=4655
<4655=4667,4666,4656
<4656=4665,4657
<4657=4663,4658
<4658=4661,4659
<4659=4660
<4661=4662
<4663=4664
<4693=4696,4695,4694
<4696=4845,4824,4817,4816,4815,4814,4813,4812,4811,4810,4809,4808,4807,4806,4805,4804,4803,4802,4801,4800,4799,4701,4700,4699,4697
<4697=4698
<4701=4792,4781,4764,4753,4741,4724,4723,4702
<4702=4703
<4703=4719,4704
<4704=4705
<4705=4706
<4706=4708,4707
<4708=4709
<4709=4711,4710
<4711=4715,4712
<4712=4713
<4713=4714
<4715=4716
<4716=4718,4717
<4719=4720
<4720=4722,4721
<4724=4725
<4725=4740,4739,4726
<4726=4728,4727
<4728=4729
<4729=4731,4730
<4731=4735,4732
<4732=4733
<4733=4734
<4735=4736
<4736=4738,4737
<4741=4742
<4742=4752,4751,4743
<4743=4750,4744
<4744=4746,4745
<4746=4747
<4747=4749,4748
<4753=4755,4754
<4755=4756
<4756=4762,4757
<4757=4760,4758
<4758=4759
<4760=4761
<4762=4763
<4764=4765
<4765=4780,4779,4766
<4766=4778,4767
<4767=4776,4768
<4768=4769
<4769=4770
<4770=4772,4771
<4772=4773
<4773=4775,4774
<4776=4777
<4781=4783,4782
<4783=4784
<4784=4790,4785
<4785=4788,4786
<4786=4787
<4788=4789
<4790=4791
<4792=4793
<4793=4795,4794
<4795=4796
<4796=4798,4797
<4817=4818
<4818=4823,4822,4819
<4819=4821,4820
<4824=4825
<4825=4844,4843,4826
<4826=4842,4827
<4827=4836,4828
<4828=4829
<4829=4830
<4830=4834,4831
<4831=4832
<4832=4833
<4834=4835
<4836=4837
<4837=4839,4838
<4839=4841,4840
<4845=4846
<4846=4858,4857,4847
<4847=4856,4848
<4848=4854,4849
<4849=4852,4850
<4850=4851
<4852=4853
<4854=4855
<4884=4887,4886,4885
<4887=5064,5043,5036,5035,5034,5033,5032,5031,5030,5029,5028,5027,5026,5025,5024,5023,5022,5021,5020,5019,5018,4892,4891,4890,4888
<4888=4889
<4892=5011,5000,4983,4972,4960,4936,4912,4905,4904,4893
<4893=4894
<4894=4900,4895
<4895=4898,4896
<4896=4897
<4898=4899
<4900=4901
<4901=4903,4902
<4905=4906
<4906=4911,4910,4907
<4907=4909,4908
<4912=4913
<4913=4935,4934,4914
<4914=4933,4915
<4915=4917,4916
<4917=4918
<4918=4920,4919
<4920=4922,4921
<4922=4923
<4923=4925,4924
<4925=4929,4926
<4926=4927
<4927=4928
<4929=4930
<4930=4932,4931
<4936=4937
<4937=4959,4958,4938
<4938=4957,4939
<4939=4941,4940
<4941=4942
<4942=4944,4943
<4944=4946,4945
<4946=4947
<4947=4949,4948
<4949=4953,4950
<4950=4951
<4951=4952
<4953=4954
<4954=4956,4955
<4960=4961
<4961=4971,4970,4962
<4962=4969,4963
<4963=4965,4964
<4965=4966
<4966=4968,4967
<4972=4974,4973
<4974=4975
<4975=4981,4976
<4976=4979,4977
<4977=4978
<4979=4980
<4981=4982
<4983=4984
<4984=4999,4998,4985
<4985=4997,4986
<4986=4995,4987
<4987=4988
<4988=4989
<4989=4991,4990
<4991=4992
<4992=4994,4993
<4995=4996
<5000=5002,5001
<5002=5003
<5003=5009,5004
<5004=5007,5005
<5005=5006
<5007=5008
<5009=5010
<5011=5012
<5012=5014,5013
<5014=5015
<5015=5017,5016
<5036=5037
<5037=5042,5041,5038
<5038=5040,5039
<5043=5044
<5044=5063,5062,5045
<5045=5061,5046
<5046=5055,5047
<5047=5048
<5048=5049
<5049=5053,5050
<5050=5051
<5051=5052
<5053=5054
<5055=5056
<5056=5058,5057
<5058=5060,5059
<5064=5065
<5065=5077,5076,5066
<5066=5075,5067
<5067=5073,5068
<5068=5071,5069
<5069=5070
<5071=5072
<5073=5074
<5108=5111,5110,5109
<5111=5221,5200,5193,5192,5191,5190,5189,5188,5187,5186,5185,5184,5183,5182,5181,5180,5179,5178,5177,5176,5175,5116,5115,5114,5112
<5112=5113
<5116=5168,5157,5140,5129,5125,5124,5117
<5117=5118
<5118=5120,5119
<5120=5121
<5121=5123,5122
<5125=5126
<5126=5128,5127
<5129=5131,5130
<5131=5132
<5132=5138,5133
<5133=5136,5134
<5134=5135
<5136=5137
<5138=5139
<5140=5141
<5141=5156,5155,5142
<5142=5154,5143
<5143=5152,5144
<5144=5145
<5145=5146
<5146=5148,5147
<5148=5149
<5149=5151,5150
<5152=5153
<5157=5159,5158
<5159=5160
<5160=5166,5161
<5161=5164,5162
<5162=5163
<5164=5165
<5166=5167
<5168=5169
<5169=5171,5170
<5171=5172
<5172=5174,5173
<5193=5194
<5194=5199,5198,5195
<5195=5197,5196
<5200=5201
<5201=5220,5219,5202
<5202=5218,5203
<5203=5212,5204
<5204=5205
<5205=5206
<5206=5210,5207
<5207=5208
<5208=5209
<5210=5211
<5212=5213
<5213=5215,5214
<5215=5217,5216
<5221=5222
<5222=5234,5233,5223
<5223=5232,5224
<5224=5230,5225
<5225=5228,5226
<5226=5227
<5228=5229
<5230=5231
<5256=5261,5257
<5257=5258
<5258=5260,5259
