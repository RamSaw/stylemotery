>11	FunctionDef	CCamWnd 
>12	ParameterList	 
>13	CompoundStatement	 
>14	ExpressionStatement	 
>15	CallExpression	Cam_Init ( )
>16	ArgumentList	 
>17	Callee	Cam_Init
>18	Identifier	Cam_Init
>19	ExpressionStatement	 
>20	AssignmentExpr	m_bClipMode = false
>21	Identifier	false
>22	Identifier	m_bClipMode
>23	ExpressionStatement	 
>24	AssignmentExpr	m_pSide_select = NULL
>25	Identifier	NULL
>26	Identifier	m_pSide_select
>27	ExpressionStatement	 
>28	CallExpression	memset ( & m_Camera , 0 , sizeof ( camera_t ) )
>29	ArgumentList	& m_Camera
>30	Argument	sizeof ( camera_t )
>31	SizeofExpr	sizeof ( camera_t )
>32	SizeofOperand	camera_t
>33	Sizeof	sizeof
>34	Argument	0
>35	PrimaryExpression	0
>36	Argument	& m_Camera
>37	UnaryOp	& m_Camera
>38	Identifier	m_Camera
>39	UnaryOperator	&
>40	Callee	memset
>41	Identifier	memset
>42	ExpressionStatement	 
>43	AssignmentExpr	m_nNumTransBrushes = 0
>44	PrimaryExpression	0
>45	Identifier	m_nNumTransBrushes
>46	ExpressionStatement	 
>47	AssignmentExpr	m_pXYFriend = NULL
>48	Identifier	NULL
>49	Identifier	m_pXYFriend
>60	FunctionDef	CCamWnd 
>61	ParameterList	 
>62	CompoundStatement	 
>66	FunctionDef	CamWndProc (HWND hWnd , UINT uMsg , WPARAM wParam , LPARAM lParam)
>67	ParameterList	HWND hWnd , UINT uMsg , WPARAM wParam , LPARAM lParam
>68	Parameter	 
>69	Identifier	lParam
>70	ParameterType	LPARAM
>71	Parameter	 
>72	Identifier	wParam
>73	ParameterType	WPARAM
>74	Parameter	 
>75	Identifier	uMsg
>76	ParameterType	UINT
>77	Parameter	 
>78	Identifier	hWnd
>79	ParameterType	HWND
>80	ReturnType	LONG WINAPI
>81	CompoundStatement	 
>82	ReturnStatement	 
>83	CallExpression	DefWindowProc ( hWnd , uMsg , wParam , lParam )
>84	ArgumentList	hWnd
>85	Argument	lParam
>86	Identifier	lParam
>87	Argument	wParam
>88	Identifier	wParam
>89	Argument	uMsg
>90	Identifier	uMsg
>91	Argument	hWnd
>92	Identifier	hWnd
>93	Callee	DefWindowProc
>94	Identifier	DefWindowProc
>95	SwitchStatement	switch ( uMsg )
>96	CompoundStatement	 
>97	ReturnStatement	 
>98	Identifier	WVR_REDRAW
>99	ExpressionStatement	 
>100	CallExpression	DefWindowProc ( hWnd , uMsg , wParam , lParam )
>101	ArgumentList	hWnd
>102	Argument	lParam
>103	Identifier	lParam
>104	Argument	wParam
>105	Identifier	wParam
>106	Argument	uMsg
>107	Identifier	uMsg
>108	Argument	hWnd
>109	Identifier	hWnd
>110	Callee	DefWindowProc
>111	Identifier	DefWindowProc
>112	Label	 
>113	Identifier	WM_NCCALCSIZE
>114	ReturnStatement	 
>115	PrimaryExpression	0
>116	ExpressionStatement	 
>117	CallExpression	SendMessage ( hWnd , WM_NCACTIVATE , uMsg == WM_SETFOCUS , 0 )
>118	ArgumentList	hWnd
>119	Argument	0
>120	PrimaryExpression	0
>121	Argument	uMsg == WM_SETFOCUS
>122	EqualityExpression	uMsg == WM_SETFOCUS
>123	Identifier	WM_SETFOCUS
>124	Identifier	uMsg
>125	Argument	WM_NCACTIVATE
>126	Identifier	WM_NCACTIVATE
>127	Argument	hWnd
>128	Identifier	hWnd
>129	Callee	SendMessage
>130	Identifier	SendMessage
>131	Label	 
>132	Identifier	WM_SETFOCUS
>133	Label	 
>134	Identifier	WM_KILLFOCUS
>135	Condition	 
>136	Identifier	uMsg
>137	ExpressionStatement	 
>138	CallExpression	GetClientRect ( hWnd , & rect )
>139	ArgumentList	hWnd
>140	Argument	& rect
>141	UnaryOp	& rect
>142	Identifier	rect
>143	UnaryOperator	&
>144	Argument	hWnd
>145	Identifier	hWnd
>146	Callee	GetClientRect
>147	Identifier	GetClientRect
>148	IdentifierDeclStatement	 
>149	IdentifierDecl	rect
>150	Identifier	rect
>151	IdentifierDeclType	RECT
>165	FunctionDef	CCamWnd 
>166	ParameterList	CREATESTRUCT & cs
>167	Parameter	 
>168	Identifier	cs
>169	ParameterType	CREATESTRUCT &
>170	ReturnType	BOOL
>171	CompoundStatement	 
>172	ReturnStatement	 
>173	Identifier	bResult
>174	IdentifierDeclStatement	 
>175	IdentifierDecl	bResult = CWnd 
>176	AssignmentExpr	bResult = CWnd 
>177	CallExpression	CWnd 
>178	ArgumentList	cs
>179	Argument	cs
>180	Identifier	cs
>181	Callee	CWnd 
>182	Identifier	CWnd 
>183	Identifier	bResult
>184	Identifier	bResult
>185	IdentifierDeclType	BOOL
>186	IfStatement	if ( cs . style != QE3_CHILDSTYLE )
>187	ExpressionStatement	 
>188	AssignmentExpr	cs . style = QE3_SPLITTER_STYLE
>189	Identifier	QE3_SPLITTER_STYLE
>190	MemberAccess	cs . style
>191	Identifier	style
>192	Identifier	cs
>193	Condition	 
>194	EqualityExpression	cs . style != QE3_CHILDSTYLE
>195	Identifier	QE3_CHILDSTYLE
>196	MemberAccess	cs . style
>197	Identifier	style
>198	Identifier	cs
>199	ExpressionStatement	 
>200	AssignmentExpr	cs . lpszName = \"CAM\"
>201	PrimaryExpression	\"CAM\"
>202	MemberAccess	cs . lpszName
>203	Identifier	lpszName
>204	Identifier	cs
>205	ExpressionStatement	 
>206	AssignmentExpr	cs . lpszClass = CAMERA_WINDOW_CLASS
>207	Identifier	CAMERA_WINDOW_CLASS
>208	MemberAccess	cs . lpszClass
>209	Identifier	lpszClass
>210	Identifier	cs
>211	CompoundStatement	 
>212	IfStatement	if ( AfxRegisterClass ( & wc ) == FALSE )
>213	ExpressionStatement	 
>214	CallExpression	Error ( \"CCamWnd RegisterClass
>215	ArgumentList	\"CCamWnd RegisterClass
>216	Argument	\"CCamWnd RegisterClass
>217	PrimaryExpression	\"CCamWnd RegisterClass
>218	Callee	Error
>219	Identifier	Error
>220	Condition	 
>221	EqualityExpression	AfxRegisterClass ( & wc ) == FALSE
>222	Identifier	FALSE
>223	CallExpression	AfxRegisterClass ( & wc )
>224	ArgumentList	& wc
>225	Argument	& wc
>226	UnaryOp	& wc
>227	Identifier	wc
>228	UnaryOperator	&
>229	Callee	AfxRegisterClass
>230	Identifier	AfxRegisterClass
>231	ExpressionStatement	 
>232	AssignmentExpr	wc . lpfnWndProc = CamWndProc
>233	Identifier	CamWndProc
>234	MemberAccess	wc . lpfnWndProc
>235	Identifier	lpfnWndProc
>236	Identifier	wc
>237	ExpressionStatement	 
>238	AssignmentExpr	wc . hCursor = LoadCursor ( NULL , IDC_ARROW )
>239	CallExpression	LoadCursor ( NULL , IDC_ARROW )
>240	ArgumentList	NULL
>241	Argument	IDC_ARROW
>242	Identifier	IDC_ARROW
>243	Argument	NULL
>244	Identifier	NULL
>245	Callee	LoadCursor
>246	Identifier	LoadCursor
>247	MemberAccess	wc . hCursor
>248	Identifier	hCursor
>249	Identifier	wc
>250	ExpressionStatement	 
>251	AssignmentExpr	wc . lpszClassName = CAMERA_WINDOW_CLASS
>252	Identifier	CAMERA_WINDOW_CLASS
>253	MemberAccess	wc . lpszClassName
>254	Identifier	lpszClassName
>255	Identifier	wc
>256	ExpressionStatement	 
>257	AssignmentExpr	wc . style = CS_NOCLOSE | CS_OWNDC
>258	InclusiveOrExpression	CS_NOCLOSE | CS_OWNDC
>259	Identifier	CS_OWNDC
>260	Identifier	CS_NOCLOSE
>261	MemberAccess	wc . style
>262	Identifier	style
>263	Identifier	wc
>264	ExpressionStatement	 
>265	CallExpression	memset ( & wc , 0 , sizeof ( wc ) )
>266	ArgumentList	& wc
>267	Argument	sizeof ( wc )
>268	SizeofExpr	sizeof ( wc )
>269	SizeofOperand	wc
>270	Sizeof	sizeof
>271	Argument	0
>272	PrimaryExpression	0
>273	Argument	& wc
>274	UnaryOp	& wc
>275	Identifier	wc
>276	UnaryOperator	&
>277	Callee	memset
>278	Identifier	memset
>279	Statement	 
>280	Statement	 
>281	Statement	 
>282	Statement	 
>283	Statement	 
>284	Statement	 
>285	Statement	 
>286	Statement	 
>287	Statement	 
>288	Statement	 
>289	Statement	 
>290	Statement	 
>291	Statement	 
>292	Statement	 
>293	Statement	 
>294	IdentifierDeclStatement	 
>295	IdentifierDecl	hInstance = AfxGetInstanceHandle ( )
>296	AssignmentExpr	hInstance = AfxGetInstanceHandle ( )
>297	CallExpression	AfxGetInstanceHandle ( )
>298	ArgumentList	 
>299	Callee	AfxGetInstanceHandle
>300	Identifier	AfxGetInstanceHandle
>301	Identifier	hInstance
>302	Identifier	hInstance
>303	IdentifierDeclType	HINSTANCE
>304	IdentifierDeclStatement	 
>305	IdentifierDecl	wc
>306	Identifier	wc
>307	IdentifierDeclType	WNDCLASS
>336	FunctionDef	CCamWnd 
>337	ParameterList	UINT nChar , UINT nRepCnt , UINT nFlags
>338	Parameter	 
>339	Identifier	nFlags
>340	ParameterType	UINT
>341	Parameter	 
>342	Identifier	nRepCnt
>343	ParameterType	UINT
>344	Parameter	 
>345	Identifier	nChar
>346	ParameterType	UINT
>347	ReturnType	void
>348	CompoundStatement	 
>349	ExpressionStatement	 
>350	CallExpression	g_pParentWnd -> HandleKey ( nChar , nRepCnt , nFlags )
>351	ArgumentList	nChar
>352	Argument	nFlags
>353	Identifier	nFlags
>354	Argument	nRepCnt
>355	Identifier	nRepCnt
>356	Argument	nChar
>357	Identifier	nChar
>358	Callee	g_pParentWnd -> HandleKey
>359	PtrMemberAccess	g_pParentWnd -> HandleKey
>360	Identifier	HandleKey
>361	Identifier	g_pParentWnd
>371	FunctionDef	CCamWnd 
>372	ParameterList	 
>373	ReturnType	void
>374	CompoundStatement	 
>375	IfStatement	if ( ! qwglMakeCurrent ( dc . m_hDC , g_qeglobals . d_hglrcBase ) )
>376	ElseStatement	else
>377	CompoundStatement	 
>378	ExpressionStatement	 
>379	CallExpression	qwglSwapBuffers ( dc . m_hDC )
>380	ArgumentList	dc . m_hDC
>381	Argument	dc . m_hDC
>382	MemberAccess	dc . m_hDC
>383	Identifier	m_hDC
>384	Identifier	dc
>385	Callee	qwglSwapBuffers
>386	Identifier	qwglSwapBuffers
>387	ExpressionStatement	 
>388	CallExpression	QE_CheckOpenGLForErrors ( )
>389	ArgumentList	 
>390	Callee	QE_CheckOpenGLForErrors
>391	Identifier	QE_CheckOpenGLForErrors
>392	ExpressionStatement	 
>393	CallExpression	Cam_Draw ( )
>394	ArgumentList	 
>395	Callee	Cam_Draw
>396	Identifier	Cam_Draw
>397	IfStatement	if ( g_bClipMode )
>398	CompoundStatement	 
>399	IfStatement	if ( g_Clip1 . Set ( ) && g_Clip2 . Set ( ) )
>400	CompoundStatement	 
>401	ExpressionStatement	 
>402	AssignmentExpr	g_pSplitList = ( ( g_pParentWnd -> ActiveXY ( ) -> GetViewType ( ) == XZ ) ? ! g_bSwitch 
>403	ConditionalExpression	( ( g_pParentWnd -> ActiveXY ( ) -> GetViewType ( ) == XZ ) ? ! g_bSwitch 
>404	UnaryOp	& g_brFrontSplits
>405	Identifier	g_brFrontSplits
>406	UnaryOperator	&
>407	UnaryOp	& g_brBackSplits
>408	Identifier	g_brBackSplits
>409	UnaryOperator	&
>410	Condition	( g_pParentWnd -> ActiveXY ( ) -> GetViewType ( ) == XZ ) ? ! g_bSwitch 
>411	ConditionalExpression	( g_pParentWnd -> ActiveXY ( ) -> GetViewType ( ) == XZ ) ? ! g_bSwitch 
>412	Identifier	g_bSwitch
>413	UnaryOp	! g_bSwitch
>414	Identifier	g_bSwitch
>415	UnaryOperator	!
>416	Condition	g_pParentWnd -> ActiveXY ( ) -> GetViewType ( ) == XZ
>417	EqualityExpression	g_pParentWnd -> ActiveXY ( ) -> GetViewType ( ) == XZ
>418	Identifier	XZ
>419	CallExpression	g_pParentWnd -> ActiveXY ( ) -> GetViewType ( )
>420	ArgumentList	 
>421	Callee	g_pParentWnd -> ActiveXY ( ) -> GetViewType
>422	PtrMemberAccess	g_pParentWnd -> ActiveXY ( ) -> GetViewType
>423	Identifier	GetViewType
>424	CallExpression	g_pParentWnd -> ActiveXY ( )
>425	ArgumentList	 
>426	Callee	g_pParentWnd -> ActiveXY
>427	PtrMemberAccess	g_pParentWnd -> ActiveXY
>428	Identifier	ActiveXY
>429	Identifier	g_pParentWnd
>430	Identifier	g_pSplitList
>431	Condition	 
>432	AndExpression	g_Clip1 . Set ( ) && g_Clip2 . Set ( )
>433	CallExpression	g_Clip2 . Set ( )
>434	ArgumentList	 
>435	Callee	g_Clip2 . Set
>436	MemberAccess	g_Clip2 . Set
>437	Identifier	Set
>438	Identifier	g_Clip2
>439	CallExpression	g_Clip1 . Set ( )
>440	ArgumentList	 
>441	Callee	g_Clip1 . Set
>442	MemberAccess	g_Clip1 . Set
>443	Identifier	Set
>444	Identifier	g_Clip1
>445	Condition	 
>446	Identifier	g_bClipMode
>447	ExpressionStatement	 
>448	AssignmentExpr	g_pSplitList = NULL
>449	Identifier	NULL
>450	Identifier	g_pSplitList
>451	ExpressionStatement	 
>452	CallExpression	QE_CheckOpenGLForErrors ( )
>453	ArgumentList	 
>454	Callee	QE_CheckOpenGLForErrors
>455	Identifier	QE_CheckOpenGLForErrors
>456	CompoundStatement	 
>457	ExpressionStatement	 
>458	CallExpression	Sys_Printf ( \"Please restart Q3Radiant if the camera view is not working\n\" )
>459	ArgumentList	\"Please restart Q3Radiant if the camera view is not working\n\"
>460	Argument	\"Please restart Q3Radiant if the camera view is not working\n\"
>461	PrimaryExpression	\"Please restart Q3Radiant if the camera view is not working\n\"
>462	Callee	Sys_Printf
>463	Identifier	Sys_Printf
>464	ExpressionStatement	 
>465	CallExpression	Sys_Printf ( \"ERROR
>466	ArgumentList	\"ERROR
>467	Argument	\"ERROR
>468	PrimaryExpression	\"ERROR
>469	Callee	Sys_Printf
>470	Identifier	Sys_Printf
>471	Condition	 
>472	UnaryOp	! qwglMakeCurrent ( dc . m_hDC , g_qeglobals . d_hglrcBase )
>473	CallExpression	qwglMakeCurrent ( dc . m_hDC , g_qeglobals . d_hglrcBase )
>474	ArgumentList	dc . m_hDC
>475	Argument	g_qeglobals . d_hglrcBase
>476	MemberAccess	g_qeglobals . d_hglrcBase
>477	Identifier	d_hglrcBase
>478	Identifier	g_qeglobals
>479	Argument	dc . m_hDC
>480	MemberAccess	dc . m_hDC
>481	Identifier	m_hDC
>482	Identifier	dc
>483	Callee	qwglMakeCurrent
>484	Identifier	qwglMakeCurrent
>485	UnaryOperator	!
>486	IdentifierDeclStatement	 
>487	IdentifierDecl	bPaint = true
>488	AssignmentExpr	bPaint = true
>489	Identifier	true
>490	Identifier	true
>491	Identifier	bPaint
>492	IdentifierDeclType	bool
>493	IdentifierDeclStatement	 
>494	IdentifierDecl	dc ( this )
>495	Identifier	this
>496	Identifier	dc
>497	IdentifierDeclType	CPaintDC
>525	FunctionDef	CCamWnd 
>526	ParameterList	CXYWnd * pWnd
>527	Parameter	 
>528	Identifier	pWnd
>529	ParameterType	CXYWnd *
>530	ReturnType	void
>531	CompoundStatement	 
>532	ExpressionStatement	 
>533	AssignmentExpr	m_pXYFriend = pWnd
>534	Identifier	pWnd
>535	Identifier	m_pXYFriend
>541	FunctionDef	CCamWnd 
>542	ParameterList	 
>543	ReturnType	void
>544	CompoundStatement	 
>545	ExpressionStatement	 
>546	CallExpression	CWnd 
>547	ArgumentList	 
>548	Callee	CWnd 
>549	Identifier	CWnd 
>550	ExpressionStatement	 
>551	CallExpression	QEW_StopGL ( GetSafeHwnd ( ) , g_qeglobals . d_hglrcBase , g_qeglobals . d_hdcBase )
>552	ArgumentList	GetSafeHwnd ( )
>553	Argument	g_qeglobals . d_hdcBase
>554	MemberAccess	g_qeglobals . d_hdcBase
>555	Identifier	d_hdcBase
>556	Identifier	g_qeglobals
>557	Argument	g_qeglobals . d_hglrcBase
>558	MemberAccess	g_qeglobals . d_hglrcBase
>559	Identifier	d_hglrcBase
>560	Identifier	g_qeglobals
>561	Argument	GetSafeHwnd ( )
>562	CallExpression	GetSafeHwnd ( )
>563	ArgumentList	 
>564	Callee	GetSafeHwnd
>565	Identifier	GetSafeHwnd
>566	Callee	QEW_StopGL
>567	Identifier	QEW_StopGL
>575	FunctionDef	CCamWnd 
>576	ParameterList	 
>577	ReturnType	void
>578	CompoundStatement	 
>579	ExpressionStatement	 
>580	CallExpression	CWnd 
>581	ArgumentList	 
>582	Callee	CWnd 
>583	Identifier	CWnd 
>593	FunctionDef	CCamWnd 
>594	ParameterList	UINT nFlags , CPoint point
>595	Parameter	 
>596	Identifier	point
>597	ParameterType	CPoint
>598	Parameter	 
>599	Identifier	nFlags
>600	ParameterType	UINT
>601	ReturnType	void
>602	CompoundStatement	 
>603	ExpressionStatement	 
>604	AssignmentExpr	m_ptLastCursor = point
>605	Identifier	point
>606	Identifier	m_ptLastCursor
>607	IfStatement	if ( GetCapture ( ) == this && ( GetKeyState ( VK_MENU ) & 0x8000 ) && ! ( ( GetKeyState ( VK_SHIFT ) & 0x8000 ) || ( \
>608	ElseStatement	else
>609	CompoundStatement	 
>610	ExpressionStatement	 
>611	CallExpression	Cam_MouseMoved ( point . x , r . bottom - 1 - point . y , nFlags )
>612	ArgumentList	point . x
>613	Argument	nFlags
>614	Identifier	nFlags
>615	Argument	r . bottom - 1 - point . y
>616	AdditiveExpression	r . bottom - 1 - point . y
>617	AdditiveExpression	1 - point . y
>618	MemberAccess	point . y
>619	Identifier	y
>620	Identifier	point
>621	PrimaryExpression	1
>622	MemberAccess	r . bottom
>623	Identifier	bottom
>624	Identifier	r
>625	Argument	point . x
>626	MemberAccess	point . x
>627	Identifier	x
>628	Identifier	point
>629	Callee	Cam_MouseMoved
>630	Identifier	Cam_MouseMoved
>631	CompoundStatement	 
>632	IfStatement	if ( GetKeyState ( VK_CONTROL ) & 0x8000 )
>633	ElseStatement	else
>634	IfStatement	if ( GetKeyState ( VK_SHIFT ) & 0x8000 )
>635	ElseStatement	else
>636	ExpressionStatement	 
>637	CallExpression	Select_ShiftTexture ( point . x - m_ptLastCursor . x , m_ptLastCursor . y - point . y )
>638	ArgumentList	point . x - m_ptLastCursor . x
>639	Argument	m_ptLastCursor . y - point . y
>640	AdditiveExpression	m_ptLastCursor . y - point . y
>641	MemberAccess	point . y
>642	Identifier	y
>643	Identifier	point
>644	MemberAccess	m_ptLastCursor . y
>645	Identifier	y
>646	Identifier	m_ptLastCursor
>647	Argument	point . x - m_ptLastCursor . x
>648	AdditiveExpression	point . x - m_ptLastCursor . x
>649	MemberAccess	m_ptLastCursor . x
>650	Identifier	x
>651	Identifier	m_ptLastCursor
>652	MemberAccess	point . x
>653	Identifier	x
>654	Identifier	point
>655	Callee	Select_ShiftTexture
>656	Identifier	Select_ShiftTexture
>657	ExpressionStatement	 
>658	CallExpression	Select_ScaleTexture ( point . x - m_ptLastCursor . x , m_ptLastCursor . y - point . y )
>659	ArgumentList	point . x - m_ptLastCursor . x
>660	Argument	m_ptLastCursor . y - point . y
>661	AdditiveExpression	m_ptLastCursor . y - point . y
>662	MemberAccess	point . y
>663	Identifier	y
>664	Identifier	point
>665	MemberAccess	m_ptLastCursor . y
>666	Identifier	y
>667	Identifier	m_ptLastCursor
>668	Argument	point . x - m_ptLastCursor . x
>669	AdditiveExpression	point . x - m_ptLastCursor . x
>670	MemberAccess	m_ptLastCursor . x
>671	Identifier	x
>672	Identifier	m_ptLastCursor
>673	MemberAccess	point . x
>674	Identifier	x
>675	Identifier	point
>676	Callee	Select_ScaleTexture
>677	Identifier	Select_ScaleTexture
>678	Condition	 
>679	BitAndExpression	GetKeyState ( VK_SHIFT ) & 0x8000
>680	PrimaryExpression	0x8000
>681	CallExpression	GetKeyState ( VK_SHIFT )
>682	ArgumentList	VK_SHIFT
>683	Argument	VK_SHIFT
>684	Identifier	VK_SHIFT
>685	Callee	GetKeyState
>686	Identifier	GetKeyState
>687	ExpressionStatement	 
>688	CallExpression	Select_RotateTexture ( point . y - m_ptLastCursor . y )
>689	ArgumentList	point . y - m_ptLastCursor . y
>690	Argument	point . y - m_ptLastCursor . y
>691	AdditiveExpression	point . y - m_ptLastCursor . y
>692	MemberAccess	m_ptLastCursor . y
>693	Identifier	y
>694	Identifier	m_ptLastCursor
>695	MemberAccess	point . y
>696	Identifier	y
>697	Identifier	point
>698	Callee	Select_RotateTexture
>699	Identifier	Select_RotateTexture
>700	Condition	 
>701	BitAndExpression	GetKeyState ( VK_CONTROL ) & 0x8000
>702	PrimaryExpression	0x8000
>703	CallExpression	GetKeyState ( VK_CONTROL )
>704	ArgumentList	VK_CONTROL
>705	Argument	VK_CONTROL
>706	Identifier	VK_CONTROL
>707	Callee	GetKeyState
>708	Identifier	GetKeyState
>709	Condition	 
>710	AndExpression	GetCapture ( ) == this && ( GetKeyState ( VK_MENU ) & 0x8000 ) && ! ( ( GetKeyState ( VK_SHIFT ) & 0x8000 ) || ( \
>711	AndExpression	( GetKeyState ( VK_MENU ) & 0x8000 ) && ! ( ( GetKeyState ( VK_SHIFT ) & 0x8000 ) || ( GetKeyState ( \
>712	UnaryOp	! ( ( GetKeyState ( VK_SHIFT ) & 0x8000 ) || ( GetKeyState ( VK_CONTROL ) & 0x8000 ) )
>713	OrExpression	( GetKeyState ( VK_SHIFT ) & 0x8000 ) || ( GetKeyState ( VK_CONTROL ) & 0x8000 )
>714	BitAndExpression	GetKeyState ( VK_CONTROL ) & 0x8000
>715	PrimaryExpression	0x8000
>716	CallExpression	GetKeyState ( VK_CONTROL )
>717	ArgumentList	VK_CONTROL
>718	Argument	VK_CONTROL
>719	Identifier	VK_CONTROL
>720	Callee	GetKeyState
>721	Identifier	GetKeyState
>722	BitAndExpression	GetKeyState ( VK_SHIFT ) & 0x8000
>723	PrimaryExpression	0x8000
>724	CallExpression	GetKeyState ( VK_SHIFT )
>725	ArgumentList	VK_SHIFT
>726	Argument	VK_SHIFT
>727	Identifier	VK_SHIFT
>728	Callee	GetKeyState
>729	Identifier	GetKeyState
>730	UnaryOperator	!
>731	BitAndExpression	GetKeyState ( VK_MENU ) & 0x8000
>732	PrimaryExpression	0x8000
>733	CallExpression	GetKeyState ( VK_MENU )
>734	ArgumentList	VK_MENU
>735	Argument	VK_MENU
>736	Identifier	VK_MENU
>737	Callee	GetKeyState
>738	Identifier	GetKeyState
>739	EqualityExpression	GetCapture ( ) == this
>740	Identifier	this
>741	CallExpression	GetCapture ( )
>742	ArgumentList	 
>743	Callee	GetCapture
>744	Identifier	GetCapture
>745	ExpressionStatement	 
>746	CallExpression	GetClientRect ( r )
>747	ArgumentList	r
>748	Argument	r
>749	Identifier	r
>750	Callee	GetClientRect
>751	Identifier	GetClientRect
>752	IdentifierDeclStatement	 
>753	IdentifierDecl	r
>754	Identifier	r
>755	IdentifierDeclType	CRect
>774	FunctionDef	CCamWnd 
>775	ParameterList	UINT nFlags , CPoint point
>776	Parameter	 
>777	Identifier	point
>778	ParameterType	CPoint
>779	Parameter	 
>780	Identifier	nFlags
>781	ParameterType	UINT
>782	ReturnType	void
>783	CompoundStatement	 
>784	ExpressionStatement	 
>785	CallExpression	OriginalMouseDown ( nFlags , point )
>786	ArgumentList	nFlags
>787	Argument	point
>788	Identifier	point
>789	Argument	nFlags
>790	Identifier	nFlags
>791	Callee	OriginalMouseDown
>792	Identifier	OriginalMouseDown
>793	ExpressionStatement	 
>794	AssignmentExpr	m_ptLastCursor = point
>795	Identifier	point
>796	Identifier	m_ptLastCursor
>803	FunctionDef	CCamWnd 
>804	ParameterList	UINT nFlags , CPoint point
>805	Parameter	 
>806	Identifier	point
>807	ParameterType	CPoint
>808	Parameter	 
>809	Identifier	nFlags
>810	ParameterType	UINT
>811	ReturnType	void
>812	CompoundStatement	 
>813	ExpressionStatement	 
>814	CallExpression	OriginalMouseUp ( nFlags , point )
>815	ArgumentList	nFlags
>816	Argument	point
>817	Identifier	point
>818	Argument	nFlags
>819	Identifier	nFlags
>820	Callee	OriginalMouseUp
>821	Identifier	OriginalMouseUp
>827	FunctionDef	CCamWnd 
>828	ParameterList	UINT nFlags , CPoint point
>829	Parameter	 
>830	Identifier	point
>831	ParameterType	CPoint
>832	Parameter	 
>833	Identifier	nFlags
>834	ParameterType	UINT
>835	ReturnType	void
>836	CompoundStatement	 
>837	ExpressionStatement	 
>838	CallExpression	OriginalMouseDown ( nFlags , point )
>839	ArgumentList	nFlags
>840	Argument	point
>841	Identifier	point
>842	Argument	nFlags
>843	Identifier	nFlags
>844	Callee	OriginalMouseDown
>845	Identifier	OriginalMouseDown
>851	FunctionDef	CCamWnd 
>852	ParameterList	UINT nFlags , CPoint point
>853	Parameter	 
>854	Identifier	point
>855	ParameterType	CPoint
>856	Parameter	 
>857	Identifier	nFlags
>858	ParameterType	UINT
>859	ReturnType	void
>860	CompoundStatement	 
>861	ExpressionStatement	 
>862	CallExpression	OriginalMouseUp ( nFlags , point )
>863	ArgumentList	nFlags
>864	Argument	point
>865	Identifier	point
>866	Argument	nFlags
>867	Identifier	nFlags
>868	Callee	OriginalMouseUp
>869	Identifier	OriginalMouseUp
>875	FunctionDef	CCamWnd 
>876	ParameterList	UINT nFlags , CPoint point
>877	Parameter	 
>878	Identifier	point
>879	ParameterType	CPoint
>880	Parameter	 
>881	Identifier	nFlags
>882	ParameterType	UINT
>883	ReturnType	void
>884	CompoundStatement	 
>885	ExpressionStatement	 
>886	CallExpression	OriginalMouseDown ( nFlags , point )
>887	ArgumentList	nFlags
>888	Argument	point
>889	Identifier	point
>890	Argument	nFlags
>891	Identifier	nFlags
>892	Callee	OriginalMouseDown
>893	Identifier	OriginalMouseDown
>899	FunctionDef	CCamWnd 
>900	ParameterList	UINT nFlags , CPoint point
>901	Parameter	 
>902	Identifier	point
>903	ParameterType	CPoint
>904	Parameter	 
>905	Identifier	nFlags
>906	ParameterType	UINT
>907	ReturnType	void
>908	CompoundStatement	 
>909	ExpressionStatement	 
>910	CallExpression	OriginalMouseUp ( nFlags , point )
>911	ArgumentList	nFlags
>912	Argument	point
>913	Identifier	point
>914	Argument	nFlags
>915	Identifier	nFlags
>916	Callee	OriginalMouseUp
>917	Identifier	OriginalMouseUp
>923	FunctionDef	CCamWnd 
>924	ParameterList	LPCREATESTRUCT lpCreateStruct
>925	Parameter	 
>926	Identifier	lpCreateStruct
>927	ParameterType	LPCREATESTRUCT
>928	ReturnType	int
>929	CompoundStatement	 
>930	ReturnStatement	 
>931	PrimaryExpression	0
>932	ExpressionStatement	 
>933	AssignmentExpr	g_qeglobals . d_hwndCamera = GetSafeHwnd ( )
>934	CallExpression	GetSafeHwnd ( )
>935	ArgumentList	 
>936	Callee	GetSafeHwnd
>937	Identifier	GetSafeHwnd
>938	MemberAccess	g_qeglobals . d_hwndCamera
>939	Identifier	d_hwndCamera
>940	Identifier	g_qeglobals
>941	ExpressionStatement	 
>942	CallExpression	Sys_Printf ( \"GL_EXTENSIONS
>943	ArgumentList	\"GL_EXTENSIONS
>944	Argument	qglGetString ( GL_EXTENSIONS )
>945	CallExpression	qglGetString ( GL_EXTENSIONS )
>946	ArgumentList	GL_EXTENSIONS
>947	Argument	GL_EXTENSIONS
>948	Identifier	GL_EXTENSIONS
>949	Callee	qglGetString
>950	Identifier	qglGetString
>951	Argument	\"GL_EXTENSIONS
>952	PrimaryExpression	\"GL_EXTENSIONS
>953	Callee	Sys_Printf
>954	Identifier	Sys_Printf
>955	ExpressionStatement	 
>956	CallExpression	Sys_Printf ( \"GL_VERSION
>957	ArgumentList	\"GL_VERSION
>958	Argument	qglGetString ( GL_VERSION )
>959	CallExpression	qglGetString ( GL_VERSION )
>960	ArgumentList	GL_VERSION
>961	Argument	GL_VERSION
>962	Identifier	GL_VERSION
>963	Callee	qglGetString
>964	Identifier	qglGetString
>965	Argument	\"GL_VERSION
>966	PrimaryExpression	\"GL_VERSION
>967	Callee	Sys_Printf
>968	Identifier	Sys_Printf
>969	ExpressionStatement	 
>970	CallExpression	Sys_Printf ( \"GL_RENDERER
>971	ArgumentList	\"GL_RENDERER
>972	Argument	qglGetString ( GL_RENDERER )
>973	CallExpression	qglGetString ( GL_RENDERER )
>974	ArgumentList	GL_RENDERER
>975	Argument	GL_RENDERER
>976	Identifier	GL_RENDERER
>977	Callee	qglGetString
>978	Identifier	qglGetString
>979	Argument	\"GL_RENDERER
>980	PrimaryExpression	\"GL_RENDERER
>981	Callee	Sys_Printf
>982	Identifier	Sys_Printf
>983	ExpressionStatement	 
>984	CallExpression	Sys_Printf ( \"GL_VENDOR
>985	ArgumentList	\"GL_VENDOR
>986	Argument	qglGetString ( GL_VENDOR )
>987	CallExpression	qglGetString ( GL_VENDOR )
>988	ArgumentList	GL_VENDOR
>989	Argument	GL_VENDOR
>990	Identifier	GL_VENDOR
>991	Callee	qglGetString
>992	Identifier	qglGetString
>993	Argument	\"GL_VENDOR
>994	PrimaryExpression	\"GL_VENDOR
>995	Callee	Sys_Printf
>996	Identifier	Sys_Printf
>997	ExpressionStatement	 
>998	CallExpression	qglListBase ( g_qeglobals . d_font_list )
>999	ArgumentList	g_qeglobals . d_font_list
>1000	Argument	g_qeglobals . d_font_list
>1001	MemberAccess	g_qeglobals . d_font_list
>1002	Identifier	d_font_list
>1003	Identifier	g_qeglobals
>1004	Callee	qglListBase
>1005	Identifier	qglListBase
>1006	IfStatement	if ( g_PrefsDlg . m_bBuggyICD )
>1007	ElseStatement	else
>1008	CompoundStatement	 
>1009	IfStatement	if ( ! qwglUseFontBitmaps ( g_qeglobals . d_hdcBase , 1 , 255 , g_qeglobals . d_font_list ) )
>1010	ExpressionStatement	 
>1011	CallExpression	Error ( \"wglUseFontBitmaps faileD\" )
>1012	ArgumentList	\"wglUseFontBitmaps faileD\"
>1013	Argument	\"wglUseFontBitmaps faileD\"
>1014	PrimaryExpression	\"wglUseFontBitmaps faileD\"
>1015	Callee	Error
>1016	Identifier	Error
>1017	Condition	 
>1018	UnaryOp	! qwglUseFontBitmaps ( g_qeglobals . d_hdcBase , 1 , 255 , g_qeglobals . d_font_list )
>1019	CallExpression	qwglUseFontBitmaps ( g_qeglobals . d_hdcBase , 1 , 255 , g_qeglobals . d_font_list )
>1020	ArgumentList	g_qeglobals . d_hdcBase
>1021	Argument	g_qeglobals . d_font_list
>1022	MemberAccess	g_qeglobals . d_font_list
>1023	Identifier	d_font_list
>1024	Identifier	g_qeglobals
>1025	Argument	255
>1026	PrimaryExpression	255
>1027	Argument	1
>1028	PrimaryExpression	1
>1029	Argument	g_qeglobals . d_hdcBase
>1030	MemberAccess	g_qeglobals . d_hdcBase
>1031	Identifier	d_hdcBase
>1032	Identifier	g_qeglobals
>1033	Callee	qwglUseFontBitmaps
>1034	Identifier	qwglUseFontBitmaps
>1035	UnaryOperator	!
>1036	CompoundStatement	 
>1037	IfStatement	if ( ! qwglUseFontBitmaps ( g_qeglobals . d_hdcBase , 1 , 255 , g_qeglobals . d_font_list - 1 ) )
>1038	ExpressionStatement	 
>1039	CallExpression	Error ( \"wglUseFontBitmaps faileD\" )
>1040	ArgumentList	\"wglUseFontBitmaps faileD\"
>1041	Argument	\"wglUseFontBitmaps faileD\"
>1042	PrimaryExpression	\"wglUseFontBitmaps faileD\"
>1043	Callee	Error
>1044	Identifier	Error
>1045	Condition	 
>1046	UnaryOp	! qwglUseFontBitmaps ( g_qeglobals . d_hdcBase , 1 , 255 , g_qeglobals . d_font_list - 1 )
>1047	CallExpression	qwglUseFontBitmaps ( g_qeglobals . d_hdcBase , 1 , 255 , g_qeglobals . d_font_list - 1 )
>1048	ArgumentList	g_qeglobals . d_hdcBase
>1049	Argument	g_qeglobals . d_font_list - 1
>1050	AdditiveExpression	g_qeglobals . d_font_list - 1
>1051	PrimaryExpression	1
>1052	MemberAccess	g_qeglobals . d_font_list
>1053	Identifier	d_font_list
>1054	Identifier	g_qeglobals
>1055	Argument	255
>1056	PrimaryExpression	255
>1057	Argument	1
>1058	PrimaryExpression	1
>1059	Argument	g_qeglobals . d_hdcBase
>1060	MemberAccess	g_qeglobals . d_hdcBase
>1061	Identifier	d_hdcBase
>1062	Identifier	g_qeglobals
>1063	Callee	qwglUseFontBitmaps
>1064	Identifier	qwglUseFontBitmaps
>1065	UnaryOperator	!
>1066	Condition	 
>1067	MemberAccess	g_PrefsDlg . m_bBuggyICD
>1068	Identifier	m_bBuggyICD
>1069	Identifier	g_PrefsDlg
>1070	IfStatement	if ( ( g_qeglobals . d_font_list = qglGenLists ( 256 ) ) == 0 )
>1071	ExpressionStatement	 
>1072	CallExpression	Error ( \"couldn't create font dlists\" )
>1073	ArgumentList	\"couldn't create font dlists\"
>1074	Argument	\"couldn't create font dlists\"
>1075	PrimaryExpression	\"couldn't create font dlists\"
>1076	Callee	Error
>1077	Identifier	Error
>1078	Condition	 
>1079	EqualityExpression	( g_qeglobals . d_font_list = qglGenLists ( 256 ) ) == 0
>1080	PrimaryExpression	0
>1081	AssignmentExpr	g_qeglobals . d_font_list = qglGenLists ( 256 )
>1082	CallExpression	qglGenLists ( 256 )
>1083	ArgumentList	256
>1084	Argument	256
>1085	PrimaryExpression	256
>1086	Callee	qglGenLists
>1087	Identifier	qglGenLists
>1088	MemberAccess	g_qeglobals . d_font_list
>1089	Identifier	d_font_list
>1090	Identifier	g_qeglobals
>1091	ExpressionStatement	 
>1092	CallExpression	SelectObject ( g_qeglobals . d_hdcBase , hfont )
>1093	ArgumentList	g_qeglobals . d_hdcBase
>1094	Argument	hfont
>1095	Identifier	hfont
>1096	Argument	g_qeglobals . d_hdcBase
>1097	MemberAccess	g_qeglobals . d_hdcBase
>1098	Identifier	d_hdcBase
>1099	Identifier	g_qeglobals
>1100	Callee	SelectObject
>1101	Identifier	SelectObject
>1102	Statement	 
>1103	IfStatement	if ( ! hfont )
>1104	ExpressionStatement	 
>1105	CallExpression	Error ( \"couldn't create font\" )
>1106	ArgumentList	\"couldn't create font\"
>1107	Argument	\"couldn't create font\"
>1108	PrimaryExpression	\"couldn't create font\"
>1109	Callee	Error
>1110	Identifier	Error
>1111	Condition	 
>1112	UnaryOp	! hfont
>1113	Identifier	hfont
>1114	UnaryOperator	!
>1115	ExpressionStatement	 
>1116	CallExpression	CreateFont ( 12 , 6 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , \"system font\" )
>1117	ArgumentList	12
>1118	Argument	\"system font\"
>1119	PrimaryExpression	\"system font\"
>1120	Argument	0
>1121	PrimaryExpression	0
>1122	Argument	0
>1123	PrimaryExpression	0
>1124	Argument	0
>1125	PrimaryExpression	0
>1126	Argument	0
>1127	PrimaryExpression	0
>1128	Argument	0
>1129	PrimaryExpression	0
>1130	Argument	0
>1131	PrimaryExpression	0
>1132	Argument	0
>1133	PrimaryExpression	0
>1134	Argument	0
>1135	PrimaryExpression	0
>1136	Argument	0
>1137	PrimaryExpression	0
>1138	Argument	0
>1139	PrimaryExpression	0
>1140	Argument	0
>1141	PrimaryExpression	0
>1142	Argument	6
>1143	PrimaryExpression	6
>1144	Argument	12
>1145	PrimaryExpression	12
>1146	Callee	CreateFont
>1147	Identifier	CreateFont
>1148	Statement	 
>1149	Statement	 
>1150	Statement	 
>1151	Statement	 
>1152	IfStatement	if ( ! qwglMakeCurrent ( g_qeglobals . d_hdcBase , g_qeglobals . d_hglrcBase ) )
>1153	ExpressionStatement	 
>1154	CallExpression	Error ( \"wglMakeCurrent failed\" )
>1155	ArgumentList	\"wglMakeCurrent failed\"
>1156	Argument	\"wglMakeCurrent failed\"
>1157	PrimaryExpression	\"wglMakeCurrent failed\"
>1158	Callee	Error
>1159	Identifier	Error
>1160	Condition	 
>1161	UnaryOp	! qwglMakeCurrent ( g_qeglobals . d_hdcBase , g_qeglobals . d_hglrcBase )
>1162	CallExpression	qwglMakeCurrent ( g_qeglobals . d_hdcBase , g_qeglobals . d_hglrcBase )
>1163	ArgumentList	g_qeglobals . d_hdcBase
>1164	Argument	g_qeglobals . d_hglrcBase
>1165	MemberAccess	g_qeglobals . d_hglrcBase
>1166	Identifier	d_hglrcBase
>1167	Identifier	g_qeglobals
>1168	Argument	g_qeglobals . d_hdcBase
>1169	MemberAccess	g_qeglobals . d_hdcBase
>1170	Identifier	d_hdcBase
>1171	Identifier	g_qeglobals
>1172	Callee	qwglMakeCurrent
>1173	Identifier	qwglMakeCurrent
>1174	UnaryOperator	!
>1175	IfStatement	if ( ( g_qeglobals . d_hglrcBase = qwglCreateContext ( g_qeglobals . d_hdcBase ) ) == 0 )
>1176	ExpressionStatement	 
>1177	CallExpression	Error ( \"wglCreateContext failed\" )
>1178	ArgumentList	\"wglCreateContext failed\"
>1179	Argument	\"wglCreateContext failed\"
>1180	PrimaryExpression	\"wglCreateContext failed\"
>1181	Callee	Error
>1182	Identifier	Error
>1183	Condition	 
>1184	EqualityExpression	( g_qeglobals . d_hglrcBase = qwglCreateContext ( g_qeglobals . d_hdcBase ) ) == 0
>1185	PrimaryExpression	0
>1186	AssignmentExpr	g_qeglobals . d_hglrcBase = qwglCreateContext ( g_qeglobals . d_hdcBase )
>1187	CallExpression	qwglCreateContext ( g_qeglobals . d_hdcBase )
>1188	ArgumentList	g_qeglobals . d_hdcBase
>1189	Argument	g_qeglobals . d_hdcBase
>1190	MemberAccess	g_qeglobals . d_hdcBase
>1191	Identifier	d_hdcBase
>1192	Identifier	g_qeglobals
>1193	Callee	qwglCreateContext
>1194	Identifier	qwglCreateContext
>1195	MemberAccess	g_qeglobals . d_hglrcBase
>1196	Identifier	d_hglrcBase
>1197	Identifier	g_qeglobals
>1198	ExpressionStatement	 
>1199	CallExpression	QEW_SetupPixelFormat ( g_qeglobals . d_hdcBase , true )
>1200	ArgumentList	g_qeglobals . d_hdcBase
>1201	Argument	true
>1202	Identifier	true
>1203	Argument	g_qeglobals . d_hdcBase
>1204	MemberAccess	g_qeglobals . d_hdcBase
>1205	Identifier	d_hdcBase
>1206	Identifier	g_qeglobals
>1207	Callee	QEW_SetupPixelFormat
>1208	Identifier	QEW_SetupPixelFormat
>1209	ExpressionStatement	 
>1210	AssignmentExpr	g_qeglobals . d_hdcBase = GetDC ( ) -> m_hDC
>1211	PtrMemberAccess	GetDC ( ) -> m_hDC
>1212	Identifier	m_hDC
>1213	CallExpression	GetDC ( )
>1214	ArgumentList	 
>1215	Callee	GetDC
>1216	Identifier	GetDC
>1217	MemberAccess	g_qeglobals . d_hdcBase
>1218	Identifier	d_hdcBase
>1219	Identifier	g_qeglobals
>1220	IfStatement	if ( CWnd 
>1221	ReturnStatement	 
>1222	UnaryOp	- 1
>1223	PrimaryExpression	1
>1224	UnaryOperator	-
>1225	Condition	 
>1226	EqualityExpression	CWnd 
>1227	UnaryOp	- 1
>1228	PrimaryExpression	1
>1229	UnaryOperator	-
>1230	CallExpression	CWnd 
>1231	ArgumentList	lpCreateStruct
>1232	Argument	lpCreateStruct
>1233	Identifier	lpCreateStruct
>1234	Callee	CWnd 
>1235	Identifier	CWnd 
>1263	FunctionDef	CCamWnd 
>1264	ParameterList	UINT nFlags , CPoint point
>1265	Parameter	 
>1266	Identifier	point
>1267	ParameterType	CPoint
>1268	Parameter	 
>1269	Identifier	nFlags
>1270	ParameterType	UINT
>1271	ReturnType	void
>1272	CompoundStatement	 
>1273	IfStatement	if ( ! ( nFlags & ( MK_LBUTTON | MK_RBUTTON | MK_MBUTTON ) ) )
>1274	ExpressionStatement	 
>1275	CallExpression	ReleaseCapture ( )
>1276	ArgumentList	 
>1277	Callee	ReleaseCapture
>1278	Identifier	ReleaseCapture
>1279	Condition	 
>1280	UnaryOp	! ( nFlags & ( MK_LBUTTON | MK_RBUTTON | MK_MBUTTON ) )
>1281	BitAndExpression	nFlags & ( MK_LBUTTON | MK_RBUTTON | MK_MBUTTON )
>1282	InclusiveOrExpression	MK_LBUTTON | MK_RBUTTON | MK_MBUTTON
>1283	InclusiveOrExpression	MK_RBUTTON | MK_MBUTTON
>1284	Identifier	MK_MBUTTON
>1285	Identifier	MK_RBUTTON
>1286	Identifier	MK_LBUTTON
>1287	Identifier	nFlags
>1288	UnaryOperator	!
>1289	ExpressionStatement	 
>1290	CallExpression	Cam_MouseUp ( point . x , r . bottom - 1 - point . y , nFlags )
>1291	ArgumentList	point . x
>1292	Argument	nFlags
>1293	Identifier	nFlags
>1294	Argument	r . bottom - 1 - point . y
>1295	AdditiveExpression	r . bottom - 1 - point . y
>1296	AdditiveExpression	1 - point . y
>1297	MemberAccess	point . y
>1298	Identifier	y
>1299	Identifier	point
>1300	PrimaryExpression	1
>1301	MemberAccess	r . bottom
>1302	Identifier	bottom
>1303	Identifier	r
>1304	Argument	point . x
>1305	MemberAccess	point . x
>1306	Identifier	x
>1307	Identifier	point
>1308	Callee	Cam_MouseUp
>1309	Identifier	Cam_MouseUp
>1310	ExpressionStatement	 
>1311	CallExpression	GetClientRect ( r )
>1312	ArgumentList	r
>1313	Argument	r
>1314	Identifier	r
>1315	Callee	GetClientRect
>1316	Identifier	GetClientRect
>1317	IdentifierDeclStatement	 
>1318	IdentifierDecl	r
>1319	Identifier	r
>1320	IdentifierDeclType	CRect
>1333	FunctionDef	CCamWnd 
>1334	ParameterList	UINT nFlags , CPoint point
>1335	Parameter	 
>1336	Identifier	point
>1337	ParameterType	CPoint
>1338	Parameter	 
>1339	Identifier	nFlags
>1340	ParameterType	UINT
>1341	ReturnType	void
>1342	CompoundStatement	 
>1343	ExpressionStatement	 
>1344	CallExpression	Cam_MouseDown ( point . x , r . bottom - 1 - point . y , nFlags )
>1345	ArgumentList	point . x
>1346	Argument	nFlags
>1347	Identifier	nFlags
>1348	Argument	r . bottom - 1 - point . y
>1349	AdditiveExpression	r . bottom - 1 - point . y
>1350	AdditiveExpression	1 - point . y
>1351	MemberAccess	point . y
>1352	Identifier	y
>1353	Identifier	point
>1354	PrimaryExpression	1
>1355	MemberAccess	r . bottom
>1356	Identifier	bottom
>1357	Identifier	r
>1358	Argument	point . x
>1359	MemberAccess	point . x
>1360	Identifier	x
>1361	Identifier	point
>1362	Callee	Cam_MouseDown
>1363	Identifier	Cam_MouseDown
>1364	ExpressionStatement	 
>1365	CallExpression	SetCapture ( )
>1366	ArgumentList	 
>1367	Callee	SetCapture
>1368	Identifier	SetCapture
>1369	ExpressionStatement	 
>1370	CallExpression	SetFocus ( )
>1371	ArgumentList	 
>1372	Callee	SetFocus
>1373	Identifier	SetFocus
>1374	ExpressionStatement	 
>1375	CallExpression	GetClientRect ( r )
>1376	ArgumentList	r
>1377	Argument	r
>1378	Identifier	r
>1379	Callee	GetClientRect
>1380	Identifier	GetClientRect
>1381	IdentifierDeclStatement	 
>1382	IdentifierDecl	r
>1383	Identifier	r
>1384	IdentifierDeclType	CRect
>1394	FunctionDef	CCamWnd 
>1395	ParameterList	 
>1396	ReturnType	void
>1397	CompoundStatement	 
>1398	ExpressionStatement	 
>1399	AssignmentExpr	m_Camera . color [ 2 ] = 0.3
>1400	PrimaryExpression	0.3
>1401	ArrayIndexing	m_Camera . color [ 2 ]
>1402	PrimaryExpression	2
>1403	MemberAccess	m_Camera . color
>1404	Identifier	color
>1405	Identifier	m_Camera
>1406	ExpressionStatement	 
>1407	AssignmentExpr	m_Camera . color [ 1 ] = 0.3
>1408	PrimaryExpression	0.3
>1409	ArrayIndexing	m_Camera . color [ 1 ]
>1410	PrimaryExpression	1
>1411	MemberAccess	m_Camera . color
>1412	Identifier	color
>1413	Identifier	m_Camera
>1414	ExpressionStatement	 
>1415	AssignmentExpr	m_Camera . color [ 0 ] = 0.3
>1416	PrimaryExpression	0.3
>1417	ArrayIndexing	m_Camera . color [ 0 ]
>1418	PrimaryExpression	0
>1419	MemberAccess	m_Camera . color
>1420	Identifier	color
>1421	Identifier	m_Camera
>1422	ExpressionStatement	 
>1423	AssignmentExpr	m_Camera . origin [ 2 ] = 46
>1424	PrimaryExpression	46
>1425	ArrayIndexing	m_Camera . origin [ 2 ]
>1426	PrimaryExpression	2
>1427	MemberAccess	m_Camera . origin
>1428	Identifier	origin
>1429	Identifier	m_Camera
>1430	ExpressionStatement	 
>1431	AssignmentExpr	m_Camera . origin [ 1 ] = 20
>1432	PrimaryExpression	20
>1433	ArrayIndexing	m_Camera . origin [ 1 ]
>1434	PrimaryExpression	1
>1435	MemberAccess	m_Camera . origin
>1436	Identifier	origin
>1437	Identifier	m_Camera
>1438	ExpressionStatement	 
>1439	AssignmentExpr	m_Camera . origin [ 0 ] = 0
>1440	PrimaryExpression	0
>1441	ArrayIndexing	m_Camera . origin [ 0 ]
>1442	PrimaryExpression	0
>1443	MemberAccess	m_Camera . origin
>1444	Identifier	origin
>1445	Identifier	m_Camera
>1446	ExpressionStatement	 
>1447	AssignmentExpr	m_Camera . timing = false
>1448	Identifier	false
>1449	MemberAccess	m_Camera . timing
>1450	Identifier	timing
>1451	Identifier	m_Camera
>1463	FunctionDef	CCamWnd 
>1464	ParameterList	 
>1465	ReturnType	void
>1466	CompoundStatement	 
>1467	ExpressionStatement	 
>1468	CallExpression	VectorNormalize ( m_Camera . vpn )
>1469	ArgumentList	m_Camera . vpn
>1470	Argument	m_Camera . vpn
>1471	MemberAccess	m_Camera . vpn
>1472	Identifier	vpn
>1473	Identifier	m_Camera
>1474	Callee	VectorNormalize
>1475	Identifier	VectorNormalize
>1476	ExpressionStatement	 
>1477	CallExpression	VectorNormalize ( m_Camera . vup )
>1478	ArgumentList	m_Camera . vup
>1479	Argument	m_Camera . vup
>1480	MemberAccess	m_Camera . vup
>1481	Identifier	vup
>1482	Identifier	m_Camera
>1483	Callee	VectorNormalize
>1484	Identifier	VectorNormalize
>1485	ExpressionStatement	 
>1486	CallExpression	VectorNormalize ( m_Camera . vright )
>1487	ArgumentList	m_Camera . vright
>1488	Argument	m_Camera . vright
>1489	MemberAccess	m_Camera . vright
>1490	Identifier	vright
>1491	Identifier	m_Camera
>1492	Callee	VectorNormalize
>1493	Identifier	VectorNormalize
>1494	ForStatement	for ( i = 0 ; i < 3 ; i ++ )
>1495	CompoundStatement	 
>1496	ExpressionStatement	 
>1497	AssignmentExpr	m_Camera . vpn [ i ] = matrix [ i ] [ 2 ]
>1498	ArrayIndexing	matrix [ i ] [ 2 ]
>1499	PrimaryExpression	2
>1500	ArrayIndexing	matrix [ i ]
>1501	Identifier	i
>1502	Identifier	matrix
>1503	ArrayIndexing	m_Camera . vpn [ i ]
>1504	Identifier	i
>1505	MemberAccess	m_Camera . vpn
>1506	Identifier	vpn
>1507	Identifier	m_Camera
>1508	ExpressionStatement	 
>1509	AssignmentExpr	m_Camera . vup [ i ] = matrix [ i ] [ 1 ]
>1510	ArrayIndexing	matrix [ i ] [ 1 ]
>1511	PrimaryExpression	1
>1512	ArrayIndexing	matrix [ i ]
>1513	Identifier	i
>1514	Identifier	matrix
>1515	ArrayIndexing	m_Camera . vup [ i ]
>1516	Identifier	i
>1517	MemberAccess	m_Camera . vup
>1518	Identifier	vup
>1519	Identifier	m_Camera
>1520	ExpressionStatement	 
>1521	AssignmentExpr	m_Camera . vright [ i ] = matrix [ i ] [ 0 ]
>1522	ArrayIndexing	matrix [ i ] [ 0 ]
>1523	PrimaryExpression	0
>1524	ArrayIndexing	matrix [ i ]
>1525	Identifier	i
>1526	Identifier	matrix
>1527	ArrayIndexing	m_Camera . vright [ i ]
>1528	Identifier	i
>1529	MemberAccess	m_Camera . vright
>1530	Identifier	vright
>1531	Identifier	m_Camera
>1532	IncDecOp	 
>1533	IncDec	++
>1534	Identifier	i
>1535	Condition	 
>1536	RelationalExpression	i < 3
>1537	PrimaryExpression	3
>1538	Identifier	i
>1539	ForInit	 
>1540	AssignmentExpr	i = 0
>1541	PrimaryExpression	0
>1542	Identifier	i
>1543	ExpressionStatement	 
>1544	CallExpression	qglGetFloatv ( GL_PROJECTION_MATRIX , & matrix [ 0 ] [ 0 ] )
>1545	ArgumentList	GL_PROJECTION_MATRIX
>1546	Argument	& matrix [ 0 ] [ 0 ]
>1547	UnaryOp	& matrix [ 0 ] [ 0 ]
>1548	ArrayIndexing	matrix [ 0 ] [ 0 ]
>1549	PrimaryExpression	0
>1550	ArrayIndexing	matrix [ 0 ]
>1551	PrimaryExpression	0
>1552	Identifier	matrix
>1553	UnaryOperator	&
>1554	Argument	GL_PROJECTION_MATRIX
>1555	Identifier	GL_PROJECTION_MATRIX
>1556	Callee	qglGetFloatv
>1557	Identifier	qglGetFloatv
>1558	ExpressionStatement	 
>1559	AssignmentExpr	m_Camera . right [ 1 ] = - m_Camera . forward [ 0 ]
>1560	UnaryOp	- m_Camera . forward [ 0 ]
>1561	ArrayIndexing	m_Camera . forward [ 0 ]
>1562	PrimaryExpression	0
>1563	MemberAccess	m_Camera . forward
>1564	Identifier	forward
>1565	Identifier	m_Camera
>1566	UnaryOperator	-
>1567	ArrayIndexing	m_Camera . right [ 1 ]
>1568	PrimaryExpression	1
>1569	MemberAccess	m_Camera . right
>1570	Identifier	right
>1571	Identifier	m_Camera
>1572	ExpressionStatement	 
>1573	AssignmentExpr	m_Camera . right [ 0 ] = m_Camera . forward [ 1 ]
>1574	ArrayIndexing	m_Camera . forward [ 1 ]
>1575	PrimaryExpression	1
>1576	MemberAccess	m_Camera . forward
>1577	Identifier	forward
>1578	Identifier	m_Camera
>1579	ArrayIndexing	m_Camera . right [ 0 ]
>1580	PrimaryExpression	0
>1581	MemberAccess	m_Camera . right
>1582	Identifier	right
>1583	Identifier	m_Camera
>1584	ExpressionStatement	 
>1585	AssignmentExpr	m_Camera . forward [ 1 ] = sin ( ya )
>1586	CallExpression	sin ( ya )
>1587	ArgumentList	ya
>1588	Argument	ya
>1589	Identifier	ya
>1590	Callee	sin
>1591	Identifier	sin
>1592	ArrayIndexing	m_Camera . forward [ 1 ]
>1593	PrimaryExpression	1
>1594	MemberAccess	m_Camera . forward
>1595	Identifier	forward
>1596	Identifier	m_Camera
>1597	ExpressionStatement	 
>1598	AssignmentExpr	m_Camera . forward [ 0 ] = cos ( ya )
>1599	CallExpression	cos ( ya )
>1600	ArgumentList	ya
>1601	Argument	ya
>1602	Identifier	ya
>1603	Callee	cos
>1604	Identifier	cos
>1605	ArrayIndexing	m_Camera . forward [ 0 ]
>1606	PrimaryExpression	0
>1607	MemberAccess	m_Camera . forward
>1608	Identifier	forward
>1609	Identifier	m_Camera
>1610	ExpressionStatement	 
>1611	AssignmentExpr	ya = m_Camera . angles [ 1 ] / 180 * Q_PI
>1612	MultiplicativeExpression	m_Camera . angles [ 1 ] / 180 * Q_PI
>1613	MultiplicativeExpression	180 * Q_PI
>1614	Identifier	Q_PI
>1615	PrimaryExpression	180
>1616	ArrayIndexing	m_Camera . angles [ 1 ]
>1617	PrimaryExpression	1
>1618	MemberAccess	m_Camera . angles
>1619	Identifier	angles
>1620	Identifier	m_Camera
>1621	Identifier	ya
>1622	ExpressionStatement	 
>1623	AssignmentExpr	xa = m_Camera . angles [ 0 ] / 180 * Q_PI
>1624	MultiplicativeExpression	m_Camera . angles [ 0 ] / 180 * Q_PI
>1625	MultiplicativeExpression	180 * Q_PI
>1626	Identifier	Q_PI
>1627	PrimaryExpression	180
>1628	ArrayIndexing	m_Camera . angles [ 0 ]
>1629	PrimaryExpression	0
>1630	MemberAccess	m_Camera . angles
>1631	Identifier	angles
>1632	Identifier	m_Camera
>1633	Identifier	xa
>1634	IdentifierDeclStatement	 
>1635	IdentifierDecl	i
>1636	Identifier	i
>1637	IdentifierDeclType	int
>1638	ExpressionStatement	 
>1639	ArrayIndexing	matrix [ 4 ] [ 4 ]
>1640	PrimaryExpression	4
>1641	ArrayIndexing	matrix [ 4 ]
>1642	PrimaryExpression	4
>1643	Identifier	matrix
>1644	Statement	 
>1645	IdentifierDeclStatement	 
>1646	IdentifierDecl	ya
>1647	Identifier	ya
>1648	IdentifierDeclType	float
>1649	IdentifierDecl	xa
>1650	Identifier	xa
>1651	IdentifierDeclType	float
>1682	FunctionDef	CCamWnd 
>1683	ParameterList	qboolean up
>1684	Parameter	 
>1685	Identifier	up
>1686	ParameterType	qboolean
>1687	ReturnType	void
>1688	CompoundStatement	 
>1689	ExpressionStatement	 
>1690	CallExpression	Sys_UpdateWindows ( W_CAMERA | W_Z_OVERLAY )
>1691	ArgumentList	W_CAMERA | W_Z_OVERLAY
>1692	Argument	W_CAMERA | W_Z_OVERLAY
>1693	InclusiveOrExpression	W_CAMERA | W_Z_OVERLAY
>1694	Identifier	W_Z_OVERLAY
>1695	Identifier	W_CAMERA
>1696	Callee	Sys_UpdateWindows
>1697	Identifier	Sys_UpdateWindows
>1698	ExpressionStatement	 
>1699	AssignmentExpr	m_Camera . origin [ 2 ] += current - bestd
>1700	AdditiveExpression	current - bestd
>1701	Identifier	bestd
>1702	Identifier	current
>1703	ArrayIndexing	m_Camera . origin [ 2 ]
>1704	PrimaryExpression	2
>1705	MemberAccess	m_Camera . origin
>1706	Identifier	origin
>1707	Identifier	m_Camera
>1708	IfStatement	if ( bestd == 0 || bestd == 16384 )
>1709	ReturnStatement	 
>1710	Condition	 
>1711	OrExpression	bestd == 0 || bestd == 16384
>1712	EqualityExpression	bestd == 16384
>1713	PrimaryExpression	16384
>1714	Identifier	bestd
>1715	EqualityExpression	bestd == 0
>1716	PrimaryExpression	0
>1717	Identifier	bestd
>1718	ForStatement	for ( b = active_brushes . next ; b != & active_brushes ; b = b -> next )
>1719	CompoundStatement	 
>1720	IfStatement	if ( ! up && d > current && d < bestd )
>1721	ExpressionStatement	 
>1722	AssignmentExpr	bestd = d
>1723	Identifier	d
>1724	Identifier	bestd
>1725	Condition	 
>1726	AndExpression	! up && d > current && d < bestd
>1727	AndExpression	d > current && d < bestd
>1728	RelationalExpression	d < bestd
>1729	Identifier	bestd
>1730	Identifier	d
>1731	RelationalExpression	d > current
>1732	Identifier	current
>1733	Identifier	d
>1734	UnaryOp	! up
>1735	Identifier	up
>1736	UnaryOperator	!
>1737	IfStatement	if ( up && d < current && d > bestd )
>1738	ExpressionStatement	 
>1739	AssignmentExpr	bestd = d
>1740	Identifier	d
>1741	Identifier	bestd
>1742	Condition	 
>1743	AndExpression	up && d < current && d > bestd
>1744	AndExpression	d < current && d > bestd
>1745	RelationalExpression	d > bestd
>1746	Identifier	bestd
>1747	Identifier	d
>1748	RelationalExpression	d < current
>1749	Identifier	current
>1750	Identifier	d
>1751	Identifier	up
>1752	IfStatement	if ( ! b -> pTerrain && ! Brush_Ray ( start , dir , b , & d ) )
>1753	ContinueStatement	 
>1754	Condition	 
>1755	AndExpression	! b -> pTerrain && ! Brush_Ray ( start , dir , b , & d )
>1756	UnaryOp	! Brush_Ray ( start , dir , b , & d )
>1757	CallExpression	Brush_Ray ( start , dir , b , & d )
>1758	ArgumentList	start
>1759	Argument	& d
>1760	UnaryOp	& d
>1761	Identifier	d
>1762	UnaryOperator	&
>1763	Argument	b
>1764	Identifier	b
>1765	Argument	dir
>1766	Identifier	dir
>1767	Argument	start
>1768	Identifier	start
>1769	Callee	Brush_Ray
>1770	Identifier	Brush_Ray
>1771	UnaryOperator	!
>1772	UnaryOp	! b -> pTerrain
>1773	PtrMemberAccess	b -> pTerrain
>1774	Identifier	pTerrain
>1775	Identifier	b
>1776	UnaryOperator	!
>1777	IfStatement	if ( b -> pTerrain && ! Terrain_Ray ( start , dir , b , & d ) )
>1778	ContinueStatement	 
>1779	Condition	 
>1780	AndExpression	b -> pTerrain && ! Terrain_Ray ( start , dir , b , & d )
>1781	UnaryOp	! Terrain_Ray ( start , dir , b , & d )
>1782	CallExpression	Terrain_Ray ( start , dir , b , & d )
>1783	ArgumentList	start
>1784	Argument	& d
>1785	UnaryOp	& d
>1786	Identifier	d
>1787	UnaryOperator	&
>1788	Argument	b
>1789	Identifier	b
>1790	Argument	dir
>1791	Identifier	dir
>1792	Argument	start
>1793	Identifier	start
>1794	Callee	Terrain_Ray
>1795	Identifier	Terrain_Ray
>1796	UnaryOperator	!
>1797	PtrMemberAccess	b -> pTerrain
>1798	Identifier	pTerrain
>1799	Identifier	b
>1800	AssignmentExpr	 
>1801	PtrMemberAccess	b -> next
>1802	Identifier	next
>1803	Identifier	b
>1804	Identifier	b
>1805	Condition	 
>1806	EqualityExpression	b != & active_brushes
>1807	UnaryOp	& active_brushes
>1808	Identifier	active_brushes
>1809	UnaryOperator	&
>1810	Identifier	b
>1811	ForInit	 
>1812	AssignmentExpr	b = active_brushes . next
>1813	MemberAccess	active_brushes . next
>1814	Identifier	next
>1815	Identifier	active_brushes
>1816	Identifier	b
>1817	IfStatement	if ( up )
>1818	ElseStatement	else
>1819	ExpressionStatement	 
>1820	AssignmentExpr	bestd = 16384
>1821	PrimaryExpression	16384
>1822	Identifier	bestd
>1823	ExpressionStatement	 
>1824	AssignmentExpr	bestd = 0
>1825	PrimaryExpression	0
>1826	Identifier	bestd
>1827	Condition	 
>1828	Identifier	up
>1829	ExpressionStatement	 
>1830	AssignmentExpr	current = 8192 - ( m_Camera . origin [ 2 ] - 48 )
>1831	AdditiveExpression	8192 - ( m_Camera . origin [ 2 ] - 48 )
>1832	AdditiveExpression	m_Camera . origin [ 2 ] - 48
>1833	PrimaryExpression	48
>1834	ArrayIndexing	m_Camera . origin [ 2 ]
>1835	PrimaryExpression	2
>1836	MemberAccess	m_Camera . origin
>1837	Identifier	origin
>1838	Identifier	m_Camera
>1839	PrimaryExpression	8192
>1840	Identifier	current
>1841	ExpressionStatement	 
>1842	AssignmentExpr	dir [ 2 ] = - 1
>1843	UnaryOp	- 1
>1844	PrimaryExpression	1
>1845	UnaryOperator	-
>1846	ArrayIndexing	dir [ 2 ]
>1847	PrimaryExpression	2
>1848	Identifier	dir
>1849	ExpressionStatement	 
>1850	AssignmentExpr	dir [ 0 ] = dir [ 1 ] = 0
>1851	AssignmentExpr	dir [ 1 ] = 0
>1852	PrimaryExpression	0
>1853	ArrayIndexing	dir [ 1 ]
>1854	PrimaryExpression	1
>1855	Identifier	dir
>1856	ArrayIndexing	dir [ 0 ]
>1857	PrimaryExpression	0
>1858	Identifier	dir
>1859	ExpressionStatement	 
>1860	AssignmentExpr	start [ 2 ] = 8192
>1861	PrimaryExpression	8192
>1862	ArrayIndexing	start [ 2 ]
>1863	PrimaryExpression	2
>1864	Identifier	start
>1865	ExpressionStatement	 
>1866	AssignmentExpr	start [ 1 ] = m_Camera . origin [ 1 ]
>1867	ArrayIndexing	m_Camera . origin [ 1 ]
>1868	PrimaryExpression	1
>1869	MemberAccess	m_Camera . origin
>1870	Identifier	origin
>1871	Identifier	m_Camera
>1872	ArrayIndexing	start [ 1 ]
>1873	PrimaryExpression	1
>1874	Identifier	start
>1875	ExpressionStatement	 
>1876	AssignmentExpr	start [ 0 ] = m_Camera . origin [ 0 ]
>1877	ArrayIndexing	m_Camera . origin [ 0 ]
>1878	PrimaryExpression	0
>1879	MemberAccess	m_Camera . origin
>1880	Identifier	origin
>1881	Identifier	m_Camera
>1882	ArrayIndexing	start [ 0 ]
>1883	PrimaryExpression	0
>1884	Identifier	start
>1885	IdentifierDeclStatement	 
>1886	IdentifierDecl	dir
>1887	Identifier	dir
>1888	IdentifierDeclType	vec3_t
>1889	IdentifierDecl	start
>1890	Identifier	start
>1891	IdentifierDeclType	vec3_t
>1892	IdentifierDeclStatement	 
>1893	IdentifierDecl	current
>1894	Identifier	current
>1895	IdentifierDeclType	float
>1896	IdentifierDecl	bestd
>1897	Identifier	bestd
>1898	IdentifierDeclType	float
>1899	IdentifierDecl	d
>1900	Identifier	d
>1901	IdentifierDeclType	float
>1902	IdentifierDeclStatement	 
>1903	IdentifierDecl	* b
>1904	Identifier	b
>1905	IdentifierDeclType	brush_t *
>1933	FunctionDef	CCamWnd 
>1934	ParameterList	 
>1935	ReturnType	void
>1936	CompoundStatement	 
>1937	IfStatement	if ( x != m_ptCursor . x || y != m_ptCursor . y )
>1938	CompoundStatement	 
>1939	ExpressionStatement	 
>1940	CallExpression	Sys_UpdateWindows ( W_CAMERA | W_XY_OVERLAY )
>1941	ArgumentList	W_CAMERA | W_XY_OVERLAY
>1942	Argument	W_CAMERA | W_XY_OVERLAY
>1943	InclusiveOrExpression	W_CAMERA | W_XY_OVERLAY
>1944	Identifier	W_XY_OVERLAY
>1945	Identifier	W_CAMERA
>1946	Callee	Sys_UpdateWindows
>1947	Identifier	Sys_UpdateWindows
>1948	ExpressionStatement	 
>1949	CallExpression	SetCursorPos ( m_ptCursor . x , m_ptCursor . y )
>1950	ArgumentList	m_ptCursor . x
>1951	Argument	m_ptCursor . y
>1952	MemberAccess	m_ptCursor . y
>1953	Identifier	y
>1954	Identifier	m_ptCursor
>1955	Argument	m_ptCursor . x
>1956	MemberAccess	m_ptCursor . x
>1957	Identifier	x
>1958	Identifier	m_ptCursor
>1959	Callee	SetCursorPos
>1960	Identifier	SetCursorPos
>1961	ExpressionStatement	 
>1962	AssignmentExpr	m_Camera . origin [ 2 ] -= y
>1963	Identifier	y
>1964	ArrayIndexing	m_Camera . origin [ 2 ]
>1965	PrimaryExpression	2
>1966	MemberAccess	m_Camera . origin
>1967	Identifier	origin
>1968	Identifier	m_Camera
>1969	ExpressionStatement	 
>1970	AssignmentExpr	y -= m_ptCursor . y
>1971	MemberAccess	m_ptCursor . y
>1972	Identifier	y
>1973	Identifier	m_ptCursor
>1974	Identifier	y
>1975	ExpressionStatement	 
>1976	CallExpression	VectorMA ( m_Camera . origin , x , m_Camera . vright , m_Camera . origin )
>1977	ArgumentList	m_Camera . origin
>1978	Argument	m_Camera . origin
>1979	MemberAccess	m_Camera . origin
>1980	Identifier	origin
>1981	Identifier	m_Camera
>1982	Argument	m_Camera . vright
>1983	MemberAccess	m_Camera . vright
>1984	Identifier	vright
>1985	Identifier	m_Camera
>1986	Argument	x
>1987	Identifier	x
>1988	Argument	m_Camera . origin
>1989	MemberAccess	m_Camera . origin
>1990	Identifier	origin
>1991	Identifier	m_Camera
>1992	Callee	VectorMA
>1993	Identifier	VectorMA
>1994	ExpressionStatement	 
>1995	AssignmentExpr	x -= m_ptCursor . x
>1996	MemberAccess	m_ptCursor . x
>1997	Identifier	x
>1998	Identifier	m_ptCursor
>1999	Identifier	x
>2000	Condition	 
>2001	OrExpression	x != m_ptCursor . x || y != m_ptCursor . y
>2002	EqualityExpression	y != m_ptCursor . y
>2003	MemberAccess	m_ptCursor . y
>2004	Identifier	y
>2005	Identifier	m_ptCursor
>2006	Identifier	y
>2007	EqualityExpression	x != m_ptCursor . x
>2008	MemberAccess	m_ptCursor . x
>2009	Identifier	x
>2010	Identifier	m_ptCursor
>2011	Identifier	x
>2012	ExpressionStatement	 
>2013	CallExpression	Sys_GetCursorPos ( & x , & y )
>2014	ArgumentList	& x
>2015	Argument	& y
>2016	UnaryOp	& y
>2017	Identifier	y
>2018	UnaryOperator	&
>2019	Argument	& x
>2020	UnaryOp	& x
>2021	Identifier	x
>2022	UnaryOperator	&
>2023	Callee	Sys_GetCursorPos
>2024	Identifier	Sys_GetCursorPos
>2025	IdentifierDeclStatement	 
>2026	IdentifierDecl	y
>2027	Identifier	y
>2028	IdentifierDeclType	int
>2029	IdentifierDecl	x
>2030	Identifier	x
>2031	IdentifierDeclType	int
>2049	FunctionDef	CCamWnd 
>2050	ParameterList	float dtime
>2051	Parameter	 
>2052	Identifier	dtime
>2053	ParameterType	float
>2054	ReturnType	void
>2055	CompoundStatement	 
>2056	ExpressionStatement	 
>2057	CallExpression	g_pParentWnd -> PostMessage ( WM_TIMER , 0 , 0 )
>2058	ArgumentList	WM_TIMER
>2059	Argument	0
>2060	PrimaryExpression	0
>2061	Argument	0
>2062	PrimaryExpression	0
>2063	Argument	WM_TIMER
>2064	Identifier	WM_TIMER
>2065	Callee	g_pParentWnd -> PostMessage
>2066	PtrMemberAccess	g_pParentWnd -> PostMessage
>2067	Identifier	PostMessage
>2068	Identifier	g_pParentWnd
>2069	ExpressionStatement	 
>2070	CallExpression	Sys_UpdateWindows ( nUpdate )
>2071	ArgumentList	nUpdate
>2072	Argument	nUpdate
>2073	Identifier	nUpdate
>2074	Callee	Sys_UpdateWindows
>2075	Identifier	Sys_UpdateWindows
>2076	IdentifierDeclStatement	 
>2077	IdentifierDecl	nUpdate = ( g_PrefsDlg . m_bCamXYUpdate ) ? ( W_CAMERA | W_XY ) 
>2078	AssignmentExpr	nUpdate = ( g_PrefsDlg . m_bCamXYUpdate ) ? ( W_CAMERA | W_XY ) 
>2079	ConditionalExpression	( g_PrefsDlg . m_bCamXYUpdate ) ? ( W_CAMERA | W_XY ) 
>2080	Identifier	W_CAMERA
>2081	InclusiveOrExpression	W_CAMERA | W_XY
>2082	Identifier	W_XY
>2083	Identifier	W_CAMERA
>2084	Condition	g_PrefsDlg . m_bCamXYUpdate
>2085	MemberAccess	g_PrefsDlg . m_bCamXYUpdate
>2086	Identifier	m_bCamXYUpdate
>2087	Identifier	g_PrefsDlg
>2088	Identifier	nUpdate
>2089	Identifier	nUpdate
>2090	IdentifierDeclType	int
>2091	IfStatement	if ( g_PrefsDlg . m_bQE4Painting )
>2092	CompoundStatement	 
>2093	CompoundStatement	 
>2094	ExpressionStatement	 
>2095	CallExpression	DispatchMessage ( & msg )
>2096	ArgumentList	& msg
>2097	Argument	& msg
>2098	UnaryOp	& msg
>2099	Identifier	msg
>2100	UnaryOperator	&
>2101	Callee	DispatchMessage
>2102	Identifier	DispatchMessage
>2103	ExpressionStatement	 
>2104	CallExpression	TranslateMessage ( & msg )
>2105	ArgumentList	& msg
>2106	Argument	& msg
>2107	UnaryOp	& msg
>2108	Identifier	msg
>2109	UnaryOperator	&
>2110	Callee	TranslateMessage
>2111	Identifier	TranslateMessage
>2112	Statement	 
>2113	Statement	 
>2114	Statement	 
>2115	Statement	 
>2116	Statement	 
>2117	Statement	 
>2118	Statement	 
>2119	Statement	 
>2120	Statement	 
>2121	Statement	 
>2122	Statement	 
>2123	Statement	 
>2124	Statement	 
>2125	Statement	 
>2126	Statement	 
>2127	Statement	 
>2128	Statement	 
>2129	IdentifierDeclStatement	 
>2130	IdentifierDecl	msg
>2131	Identifier	msg
>2132	IdentifierDeclType	MSG
>2133	Condition	 
>2134	MemberAccess	g_PrefsDlg . m_bQE4Painting
>2135	Identifier	m_bQE4Painting
>2136	Identifier	g_PrefsDlg
>2137	IfStatement	if ( buttony < yl && ( buttonx < xl || buttonx > xh ) )
>2138	ElseStatement	else
>2139	CompoundStatement	 
>2140	ExpressionStatement	 
>2141	AssignmentExpr	m_Camera . angles [ YAW ] += xf * - dtime * g_nAngleSpeed
>2142	MultiplicativeExpression	xf * - dtime * g_nAngleSpeed
>2143	MultiplicativeExpression	- dtime * g_nAngleSpeed
>2144	Identifier	g_nAngleSpeed
>2145	UnaryOp	- dtime
>2146	Identifier	dtime
>2147	UnaryOperator	-
>2148	Identifier	xf
>2149	ArrayIndexing	m_Camera . angles [ YAW ]
>2150	Identifier	YAW
>2151	MemberAccess	m_Camera . angles
>2152	Identifier	angles
>2153	Identifier	m_Camera
>2154	ExpressionStatement	 
>2155	CallExpression	VectorMA ( m_Camera . origin , yf * dtime * g_nMoveSpeed , m_Camera . forward , m_Camera . origin )
>2156	ArgumentList	m_Camera . origin
>2157	Argument	m_Camera . origin
>2158	MemberAccess	m_Camera . origin
>2159	Identifier	origin
>2160	Identifier	m_Camera
>2161	Argument	m_Camera . forward
>2162	MemberAccess	m_Camera . forward
>2163	Identifier	forward
>2164	Identifier	m_Camera
>2165	Argument	yf * dtime * g_nMoveSpeed
>2166	MultiplicativeExpression	yf * dtime * g_nMoveSpeed
>2167	MultiplicativeExpression	dtime * g_nMoveSpeed
>2168	Identifier	g_nMoveSpeed
>2169	Identifier	dtime
>2170	Identifier	yf
>2171	Argument	m_Camera . origin
>2172	MemberAccess	m_Camera . origin
>2173	Identifier	origin
>2174	Identifier	m_Camera
>2175	Callee	VectorMA
>2176	Identifier	VectorMA
>2177	IfStatement	if ( xf < 0 )
>2178	ElseStatement	else
>2179	CompoundStatement	 
>2180	IfStatement	if ( xf < 0 )
>2181	ExpressionStatement	 
>2182	AssignmentExpr	xf = 0
>2183	PrimaryExpression	0
>2184	Identifier	xf
>2185	Condition	 
>2186	RelationalExpression	xf < 0
>2187	PrimaryExpression	0
>2188	Identifier	xf
>2189	ExpressionStatement	 
>2190	AssignmentExpr	xf -= 0.1
>2191	PrimaryExpression	0.1
>2192	Identifier	xf
>2193	CompoundStatement	 
>2194	IfStatement	if ( xf > 0 )
>2195	ExpressionStatement	 
>2196	AssignmentExpr	xf = 0
>2197	PrimaryExpression	0
>2198	Identifier	xf
>2199	Condition	 
>2200	RelationalExpression	xf > 0
>2201	PrimaryExpression	0
>2202	Identifier	xf
>2203	ExpressionStatement	 
>2204	AssignmentExpr	xf += 0.1
>2205	PrimaryExpression	0.1
>2206	Identifier	xf
>2207	Condition	 
>2208	RelationalExpression	xf < 0
>2209	PrimaryExpression	0
>2210	Identifier	xf
>2211	ExpressionStatement	 
>2212	AssignmentExpr	xf *= 1.0 - fabs ( yf )
>2213	AdditiveExpression	1.0 - fabs ( yf )
>2214	CallExpression	fabs ( yf )
>2215	ArgumentList	yf
>2216	Argument	yf
>2217	Identifier	yf
>2218	Callee	fabs
>2219	Identifier	fabs
>2220	PrimaryExpression	1.0
>2221	Identifier	xf
>2222	ExpressionStatement	 
>2223	CallExpression	VectorMA ( camera . origin , xf * dtime * g_nMoveSpeed , camera . right , camera . origin )
>2224	ArgumentList	camera . origin
>2225	Argument	camera . origin
>2226	MemberAccess	camera . origin
>2227	Identifier	origin
>2228	Identifier	camera
>2229	Argument	camera . right
>2230	MemberAccess	camera . right
>2231	Identifier	right
>2232	Identifier	camera
>2233	Argument	xf * dtime * g_nMoveSpeed
>2234	MultiplicativeExpression	xf * dtime * g_nMoveSpeed
>2235	MultiplicativeExpression	dtime * g_nMoveSpeed
>2236	Identifier	g_nMoveSpeed
>2237	Identifier	dtime
>2238	Identifier	xf
>2239	Argument	camera . origin
>2240	MemberAccess	camera . origin
>2241	Identifier	origin
>2242	Identifier	camera
>2243	Callee	VectorMA
>2244	Identifier	VectorMA
>2245	Condition	 
>2246	AndExpression	buttony < yl && ( buttonx < xl || buttonx > xh )
>2247	OrExpression	buttonx < xl || buttonx > xh
>2248	RelationalExpression	buttonx > xh
>2249	Identifier	xh
>2250	Identifier	buttonx
>2251	RelationalExpression	buttonx < xl
>2252	Identifier	xl
>2253	Identifier	buttonx
>2254	RelationalExpression	buttony < yl
>2255	Identifier	yl
>2256	Identifier	buttony
>2257	ExpressionStatement	 
>2258	AssignmentExpr	yh = yl * 2
>2259	MultiplicativeExpression	yl * 2
>2260	PrimaryExpression	2
>2261	Identifier	yl
>2262	Identifier	yh
>2263	ExpressionStatement	 
>2264	AssignmentExpr	yl = m_Camera . height / 3
>2265	MultiplicativeExpression	m_Camera . height / 3
>2266	PrimaryExpression	3
>2267	MemberAccess	m_Camera . height
>2268	Identifier	height
>2269	Identifier	m_Camera
>2270	Identifier	yl
>2271	ExpressionStatement	 
>2272	AssignmentExpr	xh = xl * 2
>2273	MultiplicativeExpression	xl * 2
>2274	PrimaryExpression	2
>2275	Identifier	xl
>2276	Identifier	xh
>2277	ExpressionStatement	 
>2278	AssignmentExpr	xl = m_Camera . width / 3
>2279	MultiplicativeExpression	m_Camera . width / 3
>2280	PrimaryExpression	3
>2281	MemberAccess	m_Camera . width
>2282	Identifier	width
>2283	Identifier	m_Camera
>2284	Identifier	xl
>2285	ExpressionStatement	 
>2286	AssignmentExpr	yf = ( float ) ( m_ptButton . y - m_Camera . height / 2 ) / ( m_Camera . height / 2 )
>2287	MultiplicativeExpression	( float ) ( m_ptButton . y - m_Camera . height / 2 ) / ( m_Camera . height / 2 )
>2288	MultiplicativeExpression	m_Camera . height / 2
>2289	PrimaryExpression	2
>2290	MemberAccess	m_Camera . height
>2291	Identifier	height
>2292	Identifier	m_Camera
>2293	CastExpression	( float ) ( m_ptButton . y - m_Camera . height / 2 )
>2294	AdditiveExpression	m_ptButton . y - m_Camera . height / 2
>2295	MultiplicativeExpression	m_Camera . height / 2
>2296	PrimaryExpression	2
>2297	MemberAccess	m_Camera . height
>2298	Identifier	height
>2299	Identifier	m_Camera
>2300	MemberAccess	m_ptButton . y
>2301	Identifier	y
>2302	Identifier	m_ptButton
>2303	CastTarget	float
>2304	Identifier	yf
>2305	ExpressionStatement	 
>2306	AssignmentExpr	xf = ( float ) ( m_ptButton . x - m_Camera . width / 2 ) / ( m_Camera . width / 2 )
>2307	MultiplicativeExpression	( float ) ( m_ptButton . x - m_Camera . width / 2 ) / ( m_Camera . width / 2 )
>2308	MultiplicativeExpression	m_Camera . width / 2
>2309	PrimaryExpression	2
>2310	MemberAccess	m_Camera . width
>2311	Identifier	width
>2312	Identifier	m_Camera
>2313	CastExpression	( float ) ( m_ptButton . x - m_Camera . width / 2 )
>2314	AdditiveExpression	m_ptButton . x - m_Camera . width / 2
>2315	MultiplicativeExpression	m_Camera . width / 2
>2316	PrimaryExpression	2
>2317	MemberAccess	m_Camera . width
>2318	Identifier	width
>2319	Identifier	m_Camera
>2320	MemberAccess	m_ptButton . x
>2321	Identifier	x
>2322	Identifier	m_ptButton
>2323	CastTarget	float
>2324	Identifier	xf
>2325	IfStatement	if ( g_PrefsDlg . m_nMouseButtons == 2 )
>2326	ElseStatement	else
>2327	CompoundStatement	 
>2328	IfStatement	if ( m_nCambuttonstate != MK_RBUTTON )
>2329	ReturnStatement	 
>2330	Condition	 
>2331	EqualityExpression	m_nCambuttonstate != MK_RBUTTON
>2332	Identifier	MK_RBUTTON
>2333	Identifier	m_nCambuttonstate
>2334	CompoundStatement	 
>2335	IfStatement	if ( m_nCambuttonstate != ( MK_RBUTTON | MK_SHIFT ) )
>2336	ReturnStatement	 
>2337	Condition	 
>2338	EqualityExpression	m_nCambuttonstate != ( MK_RBUTTON | MK_SHIFT )
>2339	InclusiveOrExpression	MK_RBUTTON | MK_SHIFT
>2340	Identifier	MK_SHIFT
>2341	Identifier	MK_RBUTTON
>2342	Identifier	m_nCambuttonstate
>2343	Condition	 
>2344	EqualityExpression	g_PrefsDlg . m_nMouseButtons == 2
>2345	PrimaryExpression	2
>2346	MemberAccess	g_PrefsDlg . m_nMouseButtons
>2347	Identifier	m_nMouseButtons
>2348	Identifier	g_PrefsDlg
>2349	IdentifierDeclStatement	 
>2350	IdentifierDecl	yf
>2351	Identifier	yf
>2352	IdentifierDeclType	float
>2353	IdentifierDecl	xf
>2354	Identifier	xf
>2355	IdentifierDeclType	float
>2356	IdentifierDeclStatement	 
>2357	IdentifierDecl	yh
>2358	Identifier	yh
>2359	IdentifierDeclType	int
>2360	IdentifierDecl	yl
>2361	Identifier	yl
>2362	IdentifierDeclType	int
>2363	IdentifierDeclStatement	 
>2364	IdentifierDecl	xh
>2365	Identifier	xh
>2366	IdentifierDeclType	int
>2367	IdentifierDecl	xl
>2368	Identifier	xl
>2369	IdentifierDeclType	int
>2415	FunctionDef	CCamWnd 
>2416	ParameterList	int x , int y , int buttons
>2417	Parameter	 
>2418	Identifier	buttons
>2419	ParameterType	int
>2420	Parameter	 
>2421	Identifier	y
>2422	ParameterType	int
>2423	Parameter	 
>2424	Identifier	x
>2425	ParameterType	int
>2426	ReturnType	void
>2427	CompoundStatement	 
>2428	IfStatement	if ( buttons == MK_RBUTTON )
>2429	CompoundStatement	 
>2430	ReturnStatement	 
>2431	ExpressionStatement	 
>2432	CallExpression	Cam_MouseControl ( 0.1 )
>2433	ArgumentList	0.1
>2434	Argument	0.1
>2435	PrimaryExpression	0.1
>2436	Callee	Cam_MouseControl
>2437	Identifier	Cam_MouseControl
>2438	Condition	 
>2439	EqualityExpression	buttons == MK_RBUTTON
>2440	Identifier	MK_RBUTTON
>2441	Identifier	buttons
>2442	IfStatement	if ( ( buttons == MK_LBUTTON ) || ( buttons == ( MK_LBUTTON | MK_SHIFT ) ) || ( buttons == ( MK_LBUTTON | MK_CONTROL ) ) || ( \
>2443	CompoundStatement	 
>2444	ReturnStatement	 
>2445	IfStatement	if ( g_PrefsDlg . m_nMouseButtons == 2 && ( buttons == ( MK_RBUTTON | MK_SHIFT ) ) )
>2446	ElseStatement	else
>2447	CompoundStatement	 
>2448	ExpressionStatement	 
>2449	CallExpression	Drag_Begin ( x , y , buttons , m_Camera . vright , m_Camera . vup , m_Camera . origin , dir )
>2450	ArgumentList	x
>2451	Argument	dir
>2452	Identifier	dir
>2453	Argument	m_Camera . origin
>2454	MemberAccess	m_Camera . origin
>2455	Identifier	origin
>2456	Identifier	m_Camera
>2457	Argument	m_Camera . vup
>2458	MemberAccess	m_Camera . vup
>2459	Identifier	vup
>2460	Identifier	m_Camera
>2461	Argument	m_Camera . vright
>2462	MemberAccess	m_Camera . vright
>2463	Identifier	vright
>2464	Identifier	m_Camera
>2465	Argument	buttons
>2466	Identifier	buttons
>2467	Argument	y
>2468	Identifier	y
>2469	Argument	x
>2470	Identifier	x
>2471	Callee	Drag_Begin
>2472	Identifier	Drag_Begin
>2473	ExpressionStatement	 
>2474	CallExpression	Patch_SetView ( W_CAMERA )
>2475	ArgumentList	W_CAMERA
>2476	Argument	W_CAMERA
>2477	Identifier	W_CAMERA
>2478	Callee	Patch_SetView
>2479	Identifier	Patch_SetView
>2480	ExpressionStatement	 
>2481	CallExpression	Cam_MouseControl ( 0.1 )
>2482	ArgumentList	0.1
>2483	Argument	0.1
>2484	PrimaryExpression	0.1
>2485	Callee	Cam_MouseControl
>2486	Identifier	Cam_MouseControl
>2487	Condition	 
>2488	AndExpression	g_PrefsDlg . m_nMouseButtons == 2 && ( buttons == ( MK_RBUTTON | MK_SHIFT ) )
>2489	EqualityExpression	buttons == ( MK_RBUTTON | MK_SHIFT )
>2490	InclusiveOrExpression	MK_RBUTTON | MK_SHIFT
>2491	Identifier	MK_SHIFT
>2492	Identifier	MK_RBUTTON
>2493	Identifier	buttons
>2494	EqualityExpression	g_PrefsDlg . m_nMouseButtons == 2
>2495	PrimaryExpression	2
>2496	MemberAccess	g_PrefsDlg . m_nMouseButtons
>2497	Identifier	m_nMouseButtons
>2498	Identifier	g_PrefsDlg
>2499	Condition	 
>2500	OrExpression	( buttons == MK_LBUTTON ) || ( buttons == ( MK_LBUTTON | MK_SHIFT ) ) || ( buttons == ( MK_LBUTTON | \
>2501	OrExpression	( buttons == ( MK_LBUTTON | MK_SHIFT ) ) || ( buttons == ( MK_LBUTTON | MK_CONTROL ) ) || ( buttons == ( \
>2502	OrExpression	( buttons == ( MK_LBUTTON | MK_CONTROL ) ) || ( buttons == ( MK_LBUTTON | MK_CONTROL | MK_SHIFT ) ) || ( \
>2503	OrExpression	( buttons == ( MK_LBUTTON | MK_CONTROL | MK_SHIFT ) ) || ( buttons == nMouseButton ) || ( buttons == ( \
>2504	OrExpression	( buttons == nMouseButton ) || ( buttons == ( nMouseButton | MK_SHIFT ) ) || ( buttons == ( nMouseButton | \
>2505	OrExpression	( buttons == ( nMouseButton | MK_SHIFT ) ) || ( buttons == ( nMouseButton | MK_CONTROL ) ) || ( buttons == ( \
>2506	OrExpression	( buttons == ( nMouseButton | MK_CONTROL ) ) || ( buttons == ( nMouseButton | MK_SHIFT | MK_CONTROL ) )
>2507	EqualityExpression	buttons == ( nMouseButton | MK_SHIFT | MK_CONTROL )
>2508	InclusiveOrExpression	nMouseButton | MK_SHIFT | MK_CONTROL
>2509	InclusiveOrExpression	MK_SHIFT | MK_CONTROL
>2510	Identifier	MK_CONTROL
>2511	Identifier	MK_SHIFT
>2512	Identifier	nMouseButton
>2513	Identifier	buttons
>2514	EqualityExpression	buttons == ( nMouseButton | MK_CONTROL )
>2515	InclusiveOrExpression	nMouseButton | MK_CONTROL
>2516	Identifier	MK_CONTROL
>2517	Identifier	nMouseButton
>2518	Identifier	buttons
>2519	EqualityExpression	buttons == ( nMouseButton | MK_SHIFT )
>2520	InclusiveOrExpression	nMouseButton | MK_SHIFT
>2521	Identifier	MK_SHIFT
>2522	Identifier	nMouseButton
>2523	Identifier	buttons
>2524	EqualityExpression	buttons == nMouseButton
>2525	Identifier	nMouseButton
>2526	Identifier	buttons
>2527	EqualityExpression	buttons == ( MK_LBUTTON | MK_CONTROL | MK_SHIFT )
>2528	InclusiveOrExpression	MK_LBUTTON | MK_CONTROL | MK_SHIFT
>2529	InclusiveOrExpression	MK_CONTROL | MK_SHIFT
>2530	Identifier	MK_SHIFT
>2531	Identifier	MK_CONTROL
>2532	Identifier	MK_LBUTTON
>2533	Identifier	buttons
>2534	EqualityExpression	buttons == ( MK_LBUTTON | MK_CONTROL )
>2535	InclusiveOrExpression	MK_LBUTTON | MK_CONTROL
>2536	Identifier	MK_CONTROL
>2537	Identifier	MK_LBUTTON
>2538	Identifier	buttons
>2539	EqualityExpression	buttons == ( MK_LBUTTON | MK_SHIFT )
>2540	InclusiveOrExpression	MK_LBUTTON | MK_SHIFT
>2541	Identifier	MK_SHIFT
>2542	Identifier	MK_LBUTTON
>2543	Identifier	buttons
>2544	EqualityExpression	buttons == MK_LBUTTON
>2545	Identifier	MK_LBUTTON
>2546	Identifier	buttons
>2547	IdentifierDeclStatement	 
>2548	IdentifierDecl	nMouseButton = g_PrefsDlg . m_nMouseButtons == 2 ? MK_RBUTTON 
>2549	AssignmentExpr	nMouseButton = g_PrefsDlg . m_nMouseButtons == 2 ? MK_RBUTTON 
>2550	ConditionalExpression	g_PrefsDlg . m_nMouseButtons == 2 ? MK_RBUTTON 
>2551	Identifier	MK_MBUTTON
>2552	Identifier	MK_RBUTTON
>2553	Condition	g_PrefsDlg . m_nMouseButtons == 2
>2554	EqualityExpression	g_PrefsDlg . m_nMouseButtons == 2
>2555	PrimaryExpression	2
>2556	MemberAccess	g_PrefsDlg . m_nMouseButtons
>2557	Identifier	m_nMouseButtons
>2558	Identifier	g_PrefsDlg
>2559	Identifier	nMouseButton
>2560	Identifier	nMouseButton
>2561	IdentifierDeclType	int
>2562	ExpressionStatement	 
>2563	AssignmentExpr	m_ptButton . y = y
>2564	Identifier	y
>2565	MemberAccess	m_ptButton . y
>2566	Identifier	y
>2567	Identifier	m_ptButton
>2568	ExpressionStatement	 
>2569	AssignmentExpr	m_ptButton . x = x
>2570	Identifier	x
>2571	MemberAccess	m_ptButton . x
>2572	Identifier	x
>2573	Identifier	m_ptButton
>2574	ExpressionStatement	 
>2575	AssignmentExpr	m_nCambuttonstate = buttons
>2576	Identifier	buttons
>2577	Identifier	m_nCambuttonstate
>2578	ExpressionStatement	 
>2579	CallExpression	GetCursorPos ( & m_ptCursor )
>2580	ArgumentList	& m_ptCursor
>2581	Argument	& m_ptCursor
>2582	UnaryOp	& m_ptCursor
>2583	Identifier	m_ptCursor
>2584	UnaryOperator	&
>2585	Callee	GetCursorPos
>2586	Identifier	GetCursorPos
>2587	ExpressionStatement	 
>2588	CallExpression	VectorNormalize ( dir )
>2589	ArgumentList	dir
>2590	Argument	dir
>2591	Identifier	dir
>2592	Callee	VectorNormalize
>2593	Identifier	VectorNormalize
>2594	ForStatement	for ( i = 0 ; i < 3 ; i ++ )
>2595	ExpressionStatement	 
>2596	AssignmentExpr	dir [ i ] = m_Camera . vpn [ i ] * f + m_Camera . vright [ i ] * r + m_Camera . vup [ i ] * u
>2597	AdditiveExpression	m_Camera . vpn [ i ] * f + m_Camera . vright [ i ] * r + m_Camera . vup [ i ] * u
>2598	AdditiveExpression	m_Camera . vright [ i ] * r + m_Camera . vup [ i ] * u
>2599	MultiplicativeExpression	m_Camera . vup [ i ] * u
>2600	Identifier	u
>2601	ArrayIndexing	m_Camera . vup [ i ]
>2602	Identifier	i
>2603	MemberAccess	m_Camera . vup
>2604	Identifier	vup
>2605	Identifier	m_Camera
>2606	MultiplicativeExpression	m_Camera . vright [ i ] * r
>2607	Identifier	r
>2608	ArrayIndexing	m_Camera . vright [ i ]
>2609	Identifier	i
>2610	MemberAccess	m_Camera . vright
>2611	Identifier	vright
>2612	Identifier	m_Camera
>2613	MultiplicativeExpression	m_Camera . vpn [ i ] * f
>2614	Identifier	f
>2615	ArrayIndexing	m_Camera . vpn [ i ]
>2616	Identifier	i
>2617	MemberAccess	m_Camera . vpn
>2618	Identifier	vpn
>2619	Identifier	m_Camera
>2620	ArrayIndexing	dir [ i ]
>2621	Identifier	i
>2622	Identifier	dir
>2623	IncDecOp	 
>2624	IncDec	++
>2625	Identifier	i
>2626	Condition	 
>2627	RelationalExpression	i < 3
>2628	PrimaryExpression	3
>2629	Identifier	i
>2630	ForInit	 
>2631	AssignmentExpr	i = 0
>2632	PrimaryExpression	0
>2633	Identifier	i
>2634	ExpressionStatement	 
>2635	AssignmentExpr	f = 1
>2636	PrimaryExpression	1
>2637	Identifier	f
>2638	ExpressionStatement	 
>2639	AssignmentExpr	r = ( float ) ( x - m_Camera . width / 2 ) / ( m_Camera . width / 2 )
>2640	MultiplicativeExpression	( float ) ( x - m_Camera . width / 2 ) / ( m_Camera . width / 2 )
>2641	MultiplicativeExpression	m_Camera . width / 2
>2642	PrimaryExpression	2
>2643	MemberAccess	m_Camera . width
>2644	Identifier	width
>2645	Identifier	m_Camera
>2646	CastExpression	( float ) ( x - m_Camera . width / 2 )
>2647	AdditiveExpression	x - m_Camera . width / 2
>2648	MultiplicativeExpression	m_Camera . width / 2
>2649	PrimaryExpression	2
>2650	MemberAccess	m_Camera . width
>2651	Identifier	width
>2652	Identifier	m_Camera
>2653	Identifier	x
>2654	CastTarget	float
>2655	Identifier	r
>2656	ExpressionStatement	 
>2657	AssignmentExpr	u = ( float ) ( y - m_Camera . height / 2 ) / ( m_Camera . width / 2 )
>2658	MultiplicativeExpression	( float ) ( y - m_Camera . height / 2 ) / ( m_Camera . width / 2 )
>2659	MultiplicativeExpression	m_Camera . width / 2
>2660	PrimaryExpression	2
>2661	MemberAccess	m_Camera . width
>2662	Identifier	width
>2663	Identifier	m_Camera
>2664	CastExpression	( float ) ( y - m_Camera . height / 2 )
>2665	AdditiveExpression	y - m_Camera . height / 2
>2666	MultiplicativeExpression	m_Camera . height / 2
>2667	PrimaryExpression	2
>2668	MemberAccess	m_Camera . height
>2669	Identifier	height
>2670	Identifier	m_Camera
>2671	Identifier	y
>2672	CastTarget	float
>2673	Identifier	u
>2674	IdentifierDeclStatement	 
>2675	IdentifierDecl	i
>2676	Identifier	i
>2677	IdentifierDeclType	int
>2678	IdentifierDeclStatement	 
>2679	IdentifierDecl	u
>2680	Identifier	u
>2681	IdentifierDeclType	float
>2682	IdentifierDecl	r
>2683	Identifier	r
>2684	IdentifierDeclType	float
>2685	IdentifierDecl	f
>2686	Identifier	f
>2687	IdentifierDeclType	float
>2688	IdentifierDeclStatement	 
>2689	IdentifierDecl	dir
>2690	Identifier	dir
>2691	IdentifierDeclType	vec3_t
>2730	FunctionDef	CCamWnd 
>2731	ParameterList	int x , int y , int buttons
>2732	Parameter	 
>2733	Identifier	buttons
>2734	ParameterType	int
>2735	Parameter	 
>2736	Identifier	y
>2737	ParameterType	int
>2738	Parameter	 
>2739	Identifier	x
>2740	ParameterType	int
>2741	ReturnType	void
>2742	CompoundStatement	 
>2743	ExpressionStatement	 
>2744	CallExpression	Drag_MouseUp ( buttons )
>2745	ArgumentList	buttons
>2746	Argument	buttons
>2747	Identifier	buttons
>2748	Callee	Drag_MouseUp
>2749	Identifier	Drag_MouseUp
>2750	ExpressionStatement	 
>2751	AssignmentExpr	m_nCambuttonstate = 0
>2752	PrimaryExpression	0
>2753	Identifier	m_nCambuttonstate
>2761	FunctionDef	CCamWnd 
>2762	ParameterList	int x , int y , int buttons
>2763	Parameter	 
>2764	Identifier	buttons
>2765	ParameterType	int
>2766	Parameter	 
>2767	Identifier	y
>2768	ParameterType	int
>2769	Parameter	 
>2770	Identifier	x
>2771	ParameterType	int
>2772	ReturnType	void
>2773	CompoundStatement	 
>2774	IfStatement	if ( buttons & ( MK_LBUTTON | MK_MBUTTON ) )
>2775	CompoundStatement	 
>2776	ExpressionStatement	 
>2777	CallExpression	Sys_UpdateWindows ( W_XY | W_CAMERA | W_Z )
>2778	ArgumentList	W_XY | W_CAMERA | W_Z
>2779	Argument	W_XY | W_CAMERA | W_Z
>2780	InclusiveOrExpression	W_XY | W_CAMERA | W_Z
>2781	InclusiveOrExpression	W_CAMERA | W_Z
>2782	Identifier	W_Z
>2783	Identifier	W_CAMERA
>2784	Identifier	W_XY
>2785	Callee	Sys_UpdateWindows
>2786	Identifier	Sys_UpdateWindows
>2787	ExpressionStatement	 
>2788	CallExpression	Drag_MouseMoved ( x , y , buttons )
>2789	ArgumentList	x
>2790	Argument	buttons
>2791	Identifier	buttons
>2792	Argument	y
>2793	Identifier	y
>2794	Argument	x
>2795	Identifier	x
>2796	Callee	Drag_MouseMoved
>2797	Identifier	Drag_MouseMoved
>2798	Condition	 
>2799	BitAndExpression	buttons & ( MK_LBUTTON | MK_MBUTTON )
>2800	InclusiveOrExpression	MK_LBUTTON | MK_MBUTTON
>2801	Identifier	MK_MBUTTON
>2802	Identifier	MK_LBUTTON
>2803	Identifier	buttons
>2804	ExpressionStatement	 
>2805	CallExpression	GetCursorPos ( & m_ptCursor )
>2806	ArgumentList	& m_ptCursor
>2807	Argument	& m_ptCursor
>2808	UnaryOp	& m_ptCursor
>2809	Identifier	m_ptCursor
>2810	UnaryOperator	&
>2811	Callee	GetCursorPos
>2812	Identifier	GetCursorPos
>2813	IfStatement	if ( buttons == ( MK_RBUTTON | MK_CONTROL ) )
>2814	CompoundStatement	 
>2815	ReturnStatement	 
>2816	ExpressionStatement	 
>2817	CallExpression	Sys_UpdateWindows ( W_XY | W_CAMERA | W_Z )
>2818	ArgumentList	W_XY | W_CAMERA | W_Z
>2819	Argument	W_XY | W_CAMERA | W_Z
>2820	InclusiveOrExpression	W_XY | W_CAMERA | W_Z
>2821	InclusiveOrExpression	W_CAMERA | W_Z
>2822	Identifier	W_Z
>2823	Identifier	W_CAMERA
>2824	Identifier	W_XY
>2825	Callee	Sys_UpdateWindows
>2826	Identifier	Sys_UpdateWindows
>2827	ExpressionStatement	 
>2828	CallExpression	Cam_PositionDrag ( )
>2829	ArgumentList	 
>2830	Callee	Cam_PositionDrag
>2831	Identifier	Cam_PositionDrag
>2832	Condition	 
>2833	EqualityExpression	buttons == ( MK_RBUTTON | MK_CONTROL )
>2834	InclusiveOrExpression	MK_RBUTTON | MK_CONTROL
>2835	Identifier	MK_CONTROL
>2836	Identifier	MK_RBUTTON
>2837	Identifier	buttons
>2838	ExpressionStatement	 
>2839	AssignmentExpr	m_ptButton . y = y
>2840	Identifier	y
>2841	MemberAccess	m_ptButton . y
>2842	Identifier	y
>2843	Identifier	m_ptButton
>2844	ExpressionStatement	 
>2845	AssignmentExpr	m_ptButton . x = x
>2846	Identifier	x
>2847	MemberAccess	m_ptButton . x
>2848	Identifier	x
>2849	Identifier	m_ptButton
>2850	IfStatement	if ( ! buttons )
>2851	CompoundStatement	 
>2852	ReturnStatement	 
>2853	IfStatement	if ( ( g_qeglobals . d_select_mode == sel_terrainpoint ) || ( g_qeglobals . d_select_mode == sel_terraintexture ) )
>2854	CompoundStatement	 
>2855	ExpressionStatement	 
>2856	CallExpression	Sys_UpdateWindows ( W_CAMERA )
>2857	ArgumentList	W_CAMERA
>2858	Argument	W_CAMERA
>2859	Identifier	W_CAMERA
>2860	Callee	Sys_UpdateWindows
>2861	Identifier	Sys_UpdateWindows
>2862	ExpressionStatement	 
>2863	CallExpression	Terrain_SelectPointByRay ( m_Camera . origin , dir , buttons )
>2864	ArgumentList	m_Camera . origin
>2865	Argument	buttons
>2866	Identifier	buttons
>2867	Argument	dir
>2868	Identifier	dir
>2869	Argument	m_Camera . origin
>2870	MemberAccess	m_Camera . origin
>2871	Identifier	origin
>2872	Identifier	m_Camera
>2873	Callee	Terrain_SelectPointByRay
>2874	Identifier	Terrain_SelectPointByRay
>2875	ExpressionStatement	 
>2876	AssignmentExpr	m_ptButton . y = y
>2877	Identifier	y
>2878	MemberAccess	m_ptButton . y
>2879	Identifier	y
>2880	Identifier	m_ptButton
>2881	ExpressionStatement	 
>2882	AssignmentExpr	m_ptButton . x = x
>2883	Identifier	x
>2884	MemberAccess	m_ptButton . x
>2885	Identifier	x
>2886	Identifier	m_ptButton
>2887	ExpressionStatement	 
>2888	CallExpression	VectorNormalize ( dir )
>2889	ArgumentList	dir
>2890	Argument	dir
>2891	Identifier	dir
>2892	Callee	VectorNormalize
>2893	Identifier	VectorNormalize
>2894	ForStatement	for ( i = 0 ; i < 3 ; i ++ )
>2895	ExpressionStatement	 
>2896	AssignmentExpr	dir [ i ] = m_Camera . vpn [ i ] * f + m_Camera . vright [ i ] * r + m_Camera . vup [ i ] * u
>2897	AdditiveExpression	m_Camera . vpn [ i ] * f + m_Camera . vright [ i ] * r + m_Camera . vup [ i ] * u
>2898	AdditiveExpression	m_Camera . vright [ i ] * r + m_Camera . vup [ i ] * u
>2899	MultiplicativeExpression	m_Camera . vup [ i ] * u
>2900	Identifier	u
>2901	ArrayIndexing	m_Camera . vup [ i ]
>2902	Identifier	i
>2903	MemberAccess	m_Camera . vup
>2904	Identifier	vup
>2905	Identifier	m_Camera
>2906	MultiplicativeExpression	m_Camera . vright [ i ] * r
>2907	Identifier	r
>2908	ArrayIndexing	m_Camera . vright [ i ]
>2909	Identifier	i
>2910	MemberAccess	m_Camera . vright
>2911	Identifier	vright
>2912	Identifier	m_Camera
>2913	MultiplicativeExpression	m_Camera . vpn [ i ] * f
>2914	Identifier	f
>2915	ArrayIndexing	m_Camera . vpn [ i ]
>2916	Identifier	i
>2917	MemberAccess	m_Camera . vpn
>2918	Identifier	vpn
>2919	Identifier	m_Camera
>2920	ArrayIndexing	dir [ i ]
>2921	Identifier	i
>2922	Identifier	dir
>2923	IncDecOp	 
>2924	IncDec	++
>2925	Identifier	i
>2926	Condition	 
>2927	RelationalExpression	i < 3
>2928	PrimaryExpression	3
>2929	Identifier	i
>2930	ForInit	 
>2931	AssignmentExpr	i = 0
>2932	PrimaryExpression	0
>2933	Identifier	i
>2934	ExpressionStatement	 
>2935	AssignmentExpr	f = 1
>2936	PrimaryExpression	1
>2937	Identifier	f
>2938	ExpressionStatement	 
>2939	AssignmentExpr	r = ( float ) ( x - m_Camera . width / 2 ) / ( m_Camera . width / 2 )
>2940	MultiplicativeExpression	( float ) ( x - m_Camera . width / 2 ) / ( m_Camera . width / 2 )
>2941	MultiplicativeExpression	m_Camera . width / 2
>2942	PrimaryExpression	2
>2943	MemberAccess	m_Camera . width
>2944	Identifier	width
>2945	Identifier	m_Camera
>2946	CastExpression	( float ) ( x - m_Camera . width / 2 )
>2947	AdditiveExpression	x - m_Camera . width / 2
>2948	MultiplicativeExpression	m_Camera . width / 2
>2949	PrimaryExpression	2
>2950	MemberAccess	m_Camera . width
>2951	Identifier	width
>2952	Identifier	m_Camera
>2953	Identifier	x
>2954	CastTarget	float
>2955	Identifier	r
>2956	ExpressionStatement	 
>2957	AssignmentExpr	u = ( float ) ( y - m_Camera . height / 2 ) / ( m_Camera . width / 2 )
>2958	MultiplicativeExpression	( float ) ( y - m_Camera . height / 2 ) / ( m_Camera . width / 2 )
>2959	MultiplicativeExpression	m_Camera . width / 2
>2960	PrimaryExpression	2
>2961	MemberAccess	m_Camera . width
>2962	Identifier	width
>2963	Identifier	m_Camera
>2964	CastExpression	( float ) ( y - m_Camera . height / 2 )
>2965	AdditiveExpression	y - m_Camera . height / 2
>2966	MultiplicativeExpression	m_Camera . height / 2
>2967	PrimaryExpression	2
>2968	MemberAccess	m_Camera . height
>2969	Identifier	height
>2970	Identifier	m_Camera
>2971	Identifier	y
>2972	CastTarget	float
>2973	Identifier	u
>2974	IdentifierDeclStatement	 
>2975	IdentifierDecl	i
>2976	Identifier	i
>2977	IdentifierDeclType	int
>2978	IdentifierDeclStatement	 
>2979	IdentifierDecl	u
>2980	Identifier	u
>2981	IdentifierDeclType	float
>2982	IdentifierDecl	r
>2983	Identifier	r
>2984	IdentifierDeclType	float
>2985	IdentifierDecl	f
>2986	Identifier	f
>2987	IdentifierDeclType	float
>2988	IdentifierDeclStatement	 
>2989	IdentifierDecl	dir
>2990	Identifier	dir
>2991	IdentifierDeclType	vec3_t
>2992	Condition	 
>2993	OrExpression	( g_qeglobals . d_select_mode == sel_terrainpoint ) || ( g_qeglobals . d_select_mode == sel_terraintexture )
>2994	EqualityExpression	g_qeglobals . d_select_mode == sel_terraintexture
>2995	Identifier	sel_terraintexture
>2996	MemberAccess	g_qeglobals . d_select_mode
>2997	Identifier	d_select_mode
>2998	Identifier	g_qeglobals
>2999	EqualityExpression	g_qeglobals . d_select_mode == sel_terrainpoint
>3000	Identifier	sel_terrainpoint
>3001	MemberAccess	g_qeglobals . d_select_mode
>3002	Identifier	d_select_mode
>3003	Identifier	g_qeglobals
>3004	Condition	 
>3005	UnaryOp	! buttons
>3006	Identifier	buttons
>3007	UnaryOperator	!
>3008	ExpressionStatement	 
>3009	AssignmentExpr	m_nCambuttonstate = buttons
>3010	Identifier	buttons
>3011	Identifier	m_nCambuttonstate
>3052	FunctionDef	CCamWnd 
>3053	ParameterList	 
>3054	ReturnType	void
>3055	CompoundStatement	 
>3056	ForStatement	for ( i = 0 ; i < 3 ; i ++ )
>3057	CompoundStatement	 
>3058	IfStatement	if ( m_vCull2 [ i ] > 0 )
>3059	ElseStatement	else
>3060	ExpressionStatement	 
>3061	AssignmentExpr	m_nCullv2 [ i ] = i
>3062	Identifier	i
>3063	ArrayIndexing	m_nCullv2 [ i ]
>3064	Identifier	i
>3065	Identifier	m_nCullv2
>3066	ExpressionStatement	 
>3067	AssignmentExpr	m_nCullv2 [ i ] = 3 + i
>3068	AdditiveExpression	3 + i
>3069	Identifier	i
>3070	PrimaryExpression	3
>3071	ArrayIndexing	m_nCullv2 [ i ]
>3072	Identifier	i
>3073	Identifier	m_nCullv2
>3074	Condition	 
>3075	RelationalExpression	m_vCull2 [ i ] > 0
>3076	PrimaryExpression	0
>3077	ArrayIndexing	m_vCull2 [ i ]
>3078	Identifier	i
>3079	Identifier	m_vCull2
>3080	IfStatement	if ( m_vCull1 [ i ] > 0 )
>3081	ElseStatement	else
>3082	ExpressionStatement	 
>3083	AssignmentExpr	m_nCullv1 [ i ] = i
>3084	Identifier	i
>3085	ArrayIndexing	m_nCullv1 [ i ]
>3086	Identifier	i
>3087	Identifier	m_nCullv1
>3088	ExpressionStatement	 
>3089	AssignmentExpr	m_nCullv1 [ i ] = 3 + i
>3090	AdditiveExpression	3 + i
>3091	Identifier	i
>3092	PrimaryExpression	3
>3093	ArrayIndexing	m_nCullv1 [ i ]
>3094	Identifier	i
>3095	Identifier	m_nCullv1
>3096	Condition	 
>3097	RelationalExpression	m_vCull1 [ i ] > 0
>3098	PrimaryExpression	0
>3099	ArrayIndexing	m_vCull1 [ i ]
>3100	Identifier	i
>3101	Identifier	m_vCull1
>3102	IncDecOp	 
>3103	IncDec	++
>3104	Identifier	i
>3105	Condition	 
>3106	RelationalExpression	i < 3
>3107	PrimaryExpression	3
>3108	Identifier	i
>3109	ForInit	 
>3110	AssignmentExpr	i = 0
>3111	PrimaryExpression	0
>3112	Identifier	i
>3113	ExpressionStatement	 
>3114	CallExpression	VectorAdd ( m_Camera . vpn , m_Camera . vright , m_vCull2 )
>3115	ArgumentList	m_Camera . vpn
>3116	Argument	m_vCull2
>3117	Identifier	m_vCull2
>3118	Argument	m_Camera . vright
>3119	MemberAccess	m_Camera . vright
>3120	Identifier	vright
>3121	Identifier	m_Camera
>3122	Argument	m_Camera . vpn
>3123	MemberAccess	m_Camera . vpn
>3124	Identifier	vpn
>3125	Identifier	m_Camera
>3126	Callee	VectorAdd
>3127	Identifier	VectorAdd
>3128	ExpressionStatement	 
>3129	CallExpression	VectorSubtract ( m_Camera . vpn , m_Camera . vright , m_vCull1 )
>3130	ArgumentList	m_Camera . vpn
>3131	Argument	m_vCull1
>3132	Identifier	m_vCull1
>3133	Argument	m_Camera . vright
>3134	MemberAccess	m_Camera . vright
>3135	Identifier	vright
>3136	Identifier	m_Camera
>3137	Argument	m_Camera . vpn
>3138	MemberAccess	m_Camera . vpn
>3139	Identifier	vpn
>3140	Identifier	m_Camera
>3141	Callee	VectorSubtract
>3142	Identifier	VectorSubtract
>3143	IdentifierDeclStatement	 
>3144	IdentifierDecl	i
>3145	Identifier	i
>3146	IdentifierDeclType	int
>3163	FunctionDef	CCamWnd 
>3164	ParameterList	brush_t * b
>3165	Parameter	 
>3166	Identifier	b
>3167	ParameterType	brush_t *
>3168	ReturnType	qboolean
>3169	CompoundStatement	 
>3170	ReturnStatement	 
>3171	Identifier	false
>3172	IfStatement	if ( d < - 1 )
>3173	ReturnStatement	 
>3174	Identifier	true
>3175	Condition	 
>3176	RelationalExpression	d < - 1
>3177	UnaryOp	- 1
>3178	PrimaryExpression	1
>3179	UnaryOperator	-
>3180	Identifier	d
>3181	ExpressionStatement	 
>3182	AssignmentExpr	d = DotProduct ( point , m_vCull2 )
>3183	CallExpression	DotProduct ( point , m_vCull2 )
>3184	ArgumentList	point
>3185	Argument	m_vCull2
>3186	Identifier	m_vCull2
>3187	Argument	point
>3188	Identifier	point
>3189	Callee	DotProduct
>3190	Identifier	DotProduct
>3191	Identifier	d
>3192	ForStatement	for ( i = 0 ; i < 3 ; i ++ )
>3193	ExpressionStatement	 
>3194	AssignmentExpr	point [ i ] = b -> mins [ m_nCullv2 [ i ] ] - m_Camera . origin [ i ]
>3195	AdditiveExpression	b -> mins [ m_nCullv2 [ i ] ] - m_Camera . origin [ i ]
>3196	ArrayIndexing	m_Camera . origin [ i ]
>3197	Identifier	i
>3198	MemberAccess	m_Camera . origin
>3199	Identifier	origin
>3200	Identifier	m_Camera
>3201	ArrayIndexing	b -> mins [ m_nCullv2 [ i ] ]
>3202	ArrayIndexing	m_nCullv2 [ i ]
>3203	Identifier	i
>3204	Identifier	m_nCullv2
>3205	PtrMemberAccess	b -> mins
>3206	Identifier	mins
>3207	Identifier	b
>3208	ArrayIndexing	point [ i ]
>3209	Identifier	i
>3210	Identifier	point
>3211	IncDecOp	 
>3212	IncDec	++
>3213	Identifier	i
>3214	Condition	 
>3215	RelationalExpression	i < 3
>3216	PrimaryExpression	3
>3217	Identifier	i
>3218	ForInit	 
>3219	AssignmentExpr	i = 0
>3220	PrimaryExpression	0
>3221	Identifier	i
>3222	IfStatement	if ( d < - 1 )
>3223	ReturnStatement	 
>3224	Identifier	true
>3225	Condition	 
>3226	RelationalExpression	d < - 1
>3227	UnaryOp	- 1
>3228	PrimaryExpression	1
>3229	UnaryOperator	-
>3230	Identifier	d
>3231	ExpressionStatement	 
>3232	AssignmentExpr	d = DotProduct ( point , m_vCull1 )
>3233	CallExpression	DotProduct ( point , m_vCull1 )
>3234	ArgumentList	point
>3235	Argument	m_vCull1
>3236	Identifier	m_vCull1
>3237	Argument	point
>3238	Identifier	point
>3239	Callee	DotProduct
>3240	Identifier	DotProduct
>3241	Identifier	d
>3242	ForStatement	for ( i = 0 ; i < 3 ; i ++ )
>3243	ExpressionStatement	 
>3244	AssignmentExpr	point [ i ] = b -> mins [ m_nCullv1 [ i ] ] - m_Camera . origin [ i ]
>3245	AdditiveExpression	b -> mins [ m_nCullv1 [ i ] ] - m_Camera . origin [ i ]
>3246	ArrayIndexing	m_Camera . origin [ i ]
>3247	Identifier	i
>3248	MemberAccess	m_Camera . origin
>3249	Identifier	origin
>3250	Identifier	m_Camera
>3251	ArrayIndexing	b -> mins [ m_nCullv1 [ i ] ]
>3252	ArrayIndexing	m_nCullv1 [ i ]
>3253	Identifier	i
>3254	Identifier	m_nCullv1
>3255	PtrMemberAccess	b -> mins
>3256	Identifier	mins
>3257	Identifier	b
>3258	ArrayIndexing	point [ i ]
>3259	Identifier	i
>3260	Identifier	point
>3261	IncDecOp	 
>3262	IncDec	++
>3263	Identifier	i
>3264	Condition	 
>3265	RelationalExpression	i < 3
>3266	PrimaryExpression	3
>3267	Identifier	i
>3268	ForInit	 
>3269	AssignmentExpr	i = 0
>3270	PrimaryExpression	0
>3271	Identifier	i
>3272	IfStatement	if ( g_PrefsDlg . m_bCubicClipping )
>3273	CompoundStatement	 
>3274	ForStatement	for ( i = 0 ; i < 3 ; i ++ )
>3275	IfStatement	if ( b -> mins [ i ] > point [ i ] && b -> maxs [ i ] > point [ i ] )
>3276	ReturnStatement	 
>3277	Identifier	true
>3278	Condition	 
>3279	AndExpression	b -> mins [ i ] > point [ i ] && b -> maxs [ i ] > point [ i ]
>3280	RelationalExpression	b -> maxs [ i ] > point [ i ]
>3281	ArrayIndexing	point [ i ]
>3282	Identifier	i
>3283	Identifier	point
>3284	ArrayIndexing	b -> maxs [ i ]
>3285	Identifier	i
>3286	PtrMemberAccess	b -> maxs
>3287	Identifier	maxs
>3288	Identifier	b
>3289	RelationalExpression	b -> mins [ i ] > point [ i ]
>3290	ArrayIndexing	point [ i ]
>3291	Identifier	i
>3292	Identifier	point
>3293	ArrayIndexing	b -> mins [ i ]
>3294	Identifier	i
>3295	PtrMemberAccess	b -> mins
>3296	Identifier	mins
>3297	Identifier	b
>3298	IncDecOp	 
>3299	IncDec	++
>3300	Identifier	i
>3301	Condition	 
>3302	RelationalExpression	i < 3
>3303	PrimaryExpression	3
>3304	Identifier	i
>3305	ForInit	 
>3306	AssignmentExpr	i = 0
>3307	PrimaryExpression	0
>3308	Identifier	i
>3309	ExpressionStatement	 
>3310	AssignmentExpr	point [ 2 ] = m_Camera . origin [ 2 ] + fLevel
>3311	AdditiveExpression	m_Camera . origin [ 2 ] + fLevel
>3312	Identifier	fLevel
>3313	ArrayIndexing	m_Camera . origin [ 2 ]
>3314	PrimaryExpression	2
>3315	MemberAccess	m_Camera . origin
>3316	Identifier	origin
>3317	Identifier	m_Camera
>3318	ArrayIndexing	point [ 2 ]
>3319	PrimaryExpression	2
>3320	Identifier	point
>3321	ExpressionStatement	 
>3322	AssignmentExpr	point [ 1 ] = m_Camera . origin [ 1 ] + fLevel
>3323	AdditiveExpression	m_Camera . origin [ 1 ] + fLevel
>3324	Identifier	fLevel
>3325	ArrayIndexing	m_Camera . origin [ 1 ]
>3326	PrimaryExpression	1
>3327	MemberAccess	m_Camera . origin
>3328	Identifier	origin
>3329	Identifier	m_Camera
>3330	ArrayIndexing	point [ 1 ]
>3331	PrimaryExpression	1
>3332	Identifier	point
>3333	ExpressionStatement	 
>3334	AssignmentExpr	point [ 0 ] = m_Camera . origin [ 0 ] + fLevel
>3335	AdditiveExpression	m_Camera . origin [ 0 ] + fLevel
>3336	Identifier	fLevel
>3337	ArrayIndexing	m_Camera . origin [ 0 ]
>3338	PrimaryExpression	0
>3339	MemberAccess	m_Camera . origin
>3340	Identifier	origin
>3341	Identifier	m_Camera
>3342	ArrayIndexing	point [ 0 ]
>3343	PrimaryExpression	0
>3344	Identifier	point
>3345	ForStatement	for ( i = 0 ; i < 3 ; i ++ )
>3346	IfStatement	if ( b -> mins [ i ] < point [ i ] && b -> maxs [ i ] < point [ i ] )
>3347	ReturnStatement	 
>3348	Identifier	true
>3349	Condition	 
>3350	AndExpression	b -> mins [ i ] < point [ i ] && b -> maxs [ i ] < point [ i ]
>3351	RelationalExpression	b -> maxs [ i ] < point [ i ]
>3352	ArrayIndexing	point [ i ]
>3353	Identifier	i
>3354	Identifier	point
>3355	ArrayIndexing	b -> maxs [ i ]
>3356	Identifier	i
>3357	PtrMemberAccess	b -> maxs
>3358	Identifier	maxs
>3359	Identifier	b
>3360	RelationalExpression	b -> mins [ i ] < point [ i ]
>3361	ArrayIndexing	point [ i ]
>3362	Identifier	i
>3363	Identifier	point
>3364	ArrayIndexing	b -> mins [ i ]
>3365	Identifier	i
>3366	PtrMemberAccess	b -> mins
>3367	Identifier	mins
>3368	Identifier	b
>3369	IncDecOp	 
>3370	IncDec	++
>3371	Identifier	i
>3372	Condition	 
>3373	RelationalExpression	i < 3
>3374	PrimaryExpression	3
>3375	Identifier	i
>3376	ForInit	 
>3377	AssignmentExpr	i = 0
>3378	PrimaryExpression	0
>3379	Identifier	i
>3380	ExpressionStatement	 
>3381	AssignmentExpr	point [ 2 ] = m_Camera . origin [ 2 ] - fLevel
>3382	AdditiveExpression	m_Camera . origin [ 2 ] - fLevel
>3383	Identifier	fLevel
>3384	ArrayIndexing	m_Camera . origin [ 2 ]
>3385	PrimaryExpression	2
>3386	MemberAccess	m_Camera . origin
>3387	Identifier	origin
>3388	Identifier	m_Camera
>3389	ArrayIndexing	point [ 2 ]
>3390	PrimaryExpression	2
>3391	Identifier	point
>3392	ExpressionStatement	 
>3393	AssignmentExpr	point [ 1 ] = m_Camera . origin [ 1 ] - fLevel
>3394	AdditiveExpression	m_Camera . origin [ 1 ] - fLevel
>3395	Identifier	fLevel
>3396	ArrayIndexing	m_Camera . origin [ 1 ]
>3397	PrimaryExpression	1
>3398	MemberAccess	m_Camera . origin
>3399	Identifier	origin
>3400	Identifier	m_Camera
>3401	ArrayIndexing	point [ 1 ]
>3402	PrimaryExpression	1
>3403	Identifier	point
>3404	ExpressionStatement	 
>3405	AssignmentExpr	point [ 0 ] = m_Camera . origin [ 0 ] - fLevel
>3406	AdditiveExpression	m_Camera . origin [ 0 ] - fLevel
>3407	Identifier	fLevel
>3408	ArrayIndexing	m_Camera . origin [ 0 ]
>3409	PrimaryExpression	0
>3410	MemberAccess	m_Camera . origin
>3411	Identifier	origin
>3412	Identifier	m_Camera
>3413	ArrayIndexing	point [ 0 ]
>3414	PrimaryExpression	0
>3415	Identifier	point
>3416	IdentifierDeclStatement	 
>3417	IdentifierDecl	fLevel = g_PrefsDlg . m_nCubicScale * 64
>3418	AssignmentExpr	fLevel = g_PrefsDlg . m_nCubicScale * 64
>3419	MultiplicativeExpression	g_PrefsDlg . m_nCubicScale * 64
>3420	PrimaryExpression	64
>3421	MemberAccess	g_PrefsDlg . m_nCubicScale
>3422	Identifier	m_nCubicScale
>3423	Identifier	g_PrefsDlg
>3424	Identifier	fLevel
>3425	Identifier	fLevel
>3426	IdentifierDeclType	float
>3427	Condition	 
>3428	MemberAccess	g_PrefsDlg . m_bCubicClipping
>3429	Identifier	m_bCubicClipping
>3430	Identifier	g_PrefsDlg
>3431	IdentifierDeclStatement	 
>3432	IdentifierDecl	d
>3433	Identifier	d
>3434	IdentifierDeclType	float
>3435	IdentifierDeclStatement	 
>3436	IdentifierDecl	point
>3437	Identifier	point
>3438	IdentifierDeclType	vec3_t
>3439	IdentifierDeclStatement	 
>3440	IdentifierDecl	i
>3441	Identifier	i
>3442	IdentifierDeclType	int
>3478	FunctionDef	CCamWnd 
>3479	ParameterList	brush_t * pBrush
>3480	Parameter	 
>3481	Identifier	pBrush
>3482	ParameterType	brush_t *
>3483	ReturnType	void
>3484	CompoundStatement	 
>3485	IfStatement	if ( nRadius > 0 )
>3486	CompoundStatement	 
>3487	ExpressionStatement	 
>3488	CallExpression	qglPolygonMode ( GL_FRONT_AND_BACK , GL_FILL )
>3489	ArgumentList	GL_FRONT_AND_BACK
>3490	Argument	GL_FILL
>3491	Identifier	GL_FILL
>3492	Argument	GL_FRONT_AND_BACK
>3493	Identifier	GL_FRONT_AND_BACK
>3494	Callee	qglPolygonMode
>3495	Identifier	qglPolygonMode
>3496	ExpressionStatement	 
>3497	CallExpression	qglDisable ( GL_BLEND )
>3498	ArgumentList	GL_BLEND
>3499	Argument	GL_BLEND
>3500	Identifier	GL_BLEND
>3501	Callee	qglDisable
>3502	Identifier	qglDisable
>3503	ExpressionStatement	 
>3504	CallExpression	qglEnable ( GL_TEXTURE_2D )
>3505	ArgumentList	GL_TEXTURE_2D
>3506	Argument	GL_TEXTURE_2D
>3507	Identifier	GL_TEXTURE_2D
>3508	Callee	qglEnable
>3509	Identifier	qglEnable
>3510	ExpressionStatement	 
>3511	CallExpression	qglDisable ( GL_TEXTURE_2D )
>3512	ArgumentList	GL_TEXTURE_2D
>3513	Argument	GL_TEXTURE_2D
>3514	Identifier	GL_TEXTURE_2D
>3515	Callee	qglDisable
>3516	Identifier	qglDisable
>3517	ExpressionStatement	 
>3518	CallExpression	qglBlendFunc ( GL_SRC_ALPHA , GL_ONE_MINUS_SRC_ALPHA )
>3519	ArgumentList	GL_SRC_ALPHA
>3520	Argument	GL_ONE_MINUS_SRC_ALPHA
>3521	Identifier	GL_ONE_MINUS_SRC_ALPHA
>3522	Argument	GL_SRC_ALPHA
>3523	Identifier	GL_SRC_ALPHA
>3524	Callee	qglBlendFunc
>3525	Identifier	qglBlendFunc
>3526	ExpressionStatement	 
>3527	CallExpression	qglPolygonMode ( GL_FRONT_AND_BACK , GL_LINE )
>3528	ArgumentList	GL_FRONT_AND_BACK
>3529	Argument	GL_LINE
>3530	Identifier	GL_LINE
>3531	Argument	GL_FRONT_AND_BACK
>3532	Identifier	GL_FRONT_AND_BACK
>3533	Callee	qglPolygonMode
>3534	Identifier	qglPolygonMode
>3535	ExpressionStatement	 
>3536	CallExpression	qglEnable ( GL_BLEND )
>3537	ArgumentList	GL_BLEND
>3538	Argument	GL_BLEND
>3539	Identifier	GL_BLEND
>3540	Callee	qglEnable
>3541	Identifier	qglEnable
>3542	ExpressionStatement	 
>3543	CallExpression	Brush_SetLightColor ( pBrush )
>3544	ArgumentList	pBrush
>3545	Argument	pBrush
>3546	Identifier	pBrush
>3547	Callee	Brush_SetLightColor
>3548	Identifier	Brush_SetLightColor
>3549	Condition	 
>3550	RelationalExpression	nRadius > 0
>3551	PrimaryExpression	0
>3552	Identifier	nRadius
>3553	IdentifierDeclStatement	 
>3554	IdentifierDecl	nRadius = Brush_LightRadius ( pBrush )
>3555	AssignmentExpr	nRadius = Brush_LightRadius ( pBrush )
>3556	CallExpression	Brush_LightRadius ( pBrush )
>3557	ArgumentList	pBrush
>3558	Argument	pBrush
>3559	Identifier	pBrush
>3560	Callee	Brush_LightRadius
>3561	Identifier	Brush_LightRadius
>3562	Identifier	nRadius
>3563	Identifier	nRadius
>3564	IdentifierDeclType	int
>3578	FunctionDef	CCamWnd 
>3579	ParameterList	 
>3580	ReturnType	void
>3581	CompoundStatement	 
>3582	IfStatement	if ( m_Camera . timing )
>3583	CompoundStatement	 
>3584	ExpressionStatement	 
>3585	CallExpression	Sys_Printf ( \"Camera
>3586	ArgumentList	\"Camera
>3587	Argument	( int ) ( 1000 * ( end - start ) )
>3588	CastExpression	( int ) ( 1000 * ( end - start ) )
>3589	MultiplicativeExpression	1000 * ( end - start )
>3590	AdditiveExpression	end - start
>3591	Identifier	start
>3592	Identifier	end
>3593	PrimaryExpression	1000
>3594	CastTarget	int
>3595	Argument	\"Camera
>3596	PrimaryExpression	\"Camera
>3597	Callee	Sys_Printf
>3598	Identifier	Sys_Printf
>3599	ExpressionStatement	 
>3600	AssignmentExpr	end = Sys_DoubleTime ( )
>3601	CallExpression	Sys_DoubleTime ( )
>3602	ArgumentList	 
>3603	Callee	Sys_DoubleTime
>3604	Identifier	Sys_DoubleTime
>3605	Identifier	end
>3606	Condition	 
>3607	MemberAccess	m_Camera . timing
>3608	Identifier	timing
>3609	Identifier	m_Camera
>3610	ExpressionStatement	 
>3611	CallExpression	QE_CheckOpenGLForErrors ( )
>3612	ArgumentList	 
>3613	Callee	QE_CheckOpenGLForErrors
>3614	Identifier	QE_CheckOpenGLForErrors
>3615	ExpressionStatement	 
>3616	CallExpression	qglFinish ( )
>3617	ArgumentList	 
>3618	Callee	qglFinish
>3619	Identifier	qglFinish
>3620	IfStatement	if ( g_qeglobals . d_select_mode == sel_area )
>3621	CompoundStatement	 
>3622	ExpressionStatement	 
>3623	CallExpression	qglDisable ( GL_BLEND )
>3624	ArgumentList	GL_BLEND
>3625	Argument	GL_BLEND
>3626	Identifier	GL_BLEND
>3627	Callee	qglDisable
>3628	Identifier	qglDisable
>3629	ExpressionStatement	 
>3630	CallExpression	qglRectfv ( g_qeglobals . d_vAreaTL , g_qeglobals . d_vAreaBR )
>3631	ArgumentList	g_qeglobals . d_vAreaTL
>3632	Argument	g_qeglobals . d_vAreaBR
>3633	MemberAccess	g_qeglobals . d_vAreaBR
>3634	Identifier	d_vAreaBR
>3635	Identifier	g_qeglobals
>3636	Argument	g_qeglobals . d_vAreaTL
>3637	MemberAccess	g_qeglobals . d_vAreaTL
>3638	Identifier	d_vAreaTL
>3639	Identifier	g_qeglobals
>3640	Callee	qglRectfv
>3641	Identifier	qglRectfv
>3642	ExpressionStatement	 
>3643	CallExpression	qglPolygonMode ( GL_FRONT_AND_BACK , GL_FILL )
>3644	ArgumentList	GL_FRONT_AND_BACK
>3645	Argument	GL_FILL
>3646	Identifier	GL_FILL
>3647	Argument	GL_FRONT_AND_BACK
>3648	Identifier	GL_FRONT_AND_BACK
>3649	Callee	qglPolygonMode
>3650	Identifier	qglPolygonMode
>3651	ExpressionStatement	 
>3652	CallExpression	qglColor4f ( 0.0 , 0.0 , 1.0 , 0.25 )
>3653	ArgumentList	0.0
>3654	Argument	0.25
>3655	PrimaryExpression	0.25
>3656	Argument	1.0
>3657	PrimaryExpression	1.0
>3658	Argument	0.0
>3659	PrimaryExpression	0.0
>3660	Argument	0.0
>3661	PrimaryExpression	0.0
>3662	Callee	qglColor4f
>3663	Identifier	qglColor4f
>3664	ExpressionStatement	 
>3665	CallExpression	qglBlendFunc ( GL_SRC_ALPHA , GL_ONE_MINUS_SRC_ALPHA )
>3666	ArgumentList	GL_SRC_ALPHA
>3667	Argument	GL_ONE_MINUS_SRC_ALPHA
>3668	Identifier	GL_ONE_MINUS_SRC_ALPHA
>3669	Argument	GL_SRC_ALPHA
>3670	Identifier	GL_SRC_ALPHA
>3671	Callee	qglBlendFunc
>3672	Identifier	qglBlendFunc
>3673	ExpressionStatement	 
>3674	CallExpression	qglEnable ( GL_BLEND )
>3675	ArgumentList	GL_BLEND
>3676	Argument	GL_BLEND
>3677	Identifier	GL_BLEND
>3678	Callee	qglEnable
>3679	Identifier	qglEnable
>3680	Condition	 
>3681	EqualityExpression	g_qeglobals . d_select_mode == sel_area
>3682	Identifier	sel_area
>3683	MemberAccess	g_qeglobals . d_select_mode
>3684	Identifier	d_select_mode
>3685	Identifier	g_qeglobals
>3686	ExpressionStatement	 
>3687	CallExpression	qglBindTexture ( GL_TEXTURE_2D , 0 )
>3688	ArgumentList	GL_TEXTURE_2D
>3689	Argument	0
>3690	PrimaryExpression	0
>3691	Argument	GL_TEXTURE_2D
>3692	Identifier	GL_TEXTURE_2D
>3693	Callee	qglBindTexture
>3694	Identifier	qglBindTexture
>3695	IfStatement	if ( g_qeglobals . d_pointfile_display_list )
>3696	CompoundStatement	 
>3697	ExpressionStatement	 
>3698	CallExpression	Pointfile_Draw ( )
>3699	ArgumentList	 
>3700	Callee	Pointfile_Draw
>3701	Identifier	Pointfile_Draw
>3702	Condition	 
>3703	MemberAccess	g_qeglobals . d_pointfile_display_list
>3704	Identifier	d_pointfile_display_list
>3705	Identifier	g_qeglobals
>3706	ExpressionStatement	 
>3707	CallExpression	DrawPathLines ( )
>3708	ArgumentList	 
>3709	Callee	DrawPathLines
>3710	Identifier	DrawPathLines
>3711	ExpressionStatement	 
>3712	CallExpression	qglEnable ( GL_DEPTH_TEST )
>3713	ArgumentList	GL_DEPTH_TEST
>3714	Argument	GL_DEPTH_TEST
>3715	Identifier	GL_DEPTH_TEST
>3716	Callee	qglEnable
>3717	Identifier	qglEnable
>3718	IfStatement	if ( g_qeglobals . selectObject && ( g_qeglobals . d_select_mode == sel_addpoint || g_qeglobals . d_select_mode == \
>3719	CompoundStatement	 
>3720	ExpressionStatement	 
>3721	CallExpression	g_qeglobals . selectObject -> drawSelection ( )
>3722	ArgumentList	 
>3723	Callee	g_qeglobals . selectObject -> drawSelection
>3724	PtrMemberAccess	g_qeglobals . selectObject -> drawSelection
>3725	Identifier	drawSelection
>3726	MemberAccess	g_qeglobals . selectObject
>3727	Identifier	selectObject
>3728	Identifier	g_qeglobals
>3729	Condition	 
>3730	AndExpression	g_qeglobals . selectObject && ( g_qeglobals . d_select_mode == sel_addpoint || g_qeglobals . d_select_\
>3731	OrExpression	g_qeglobals . d_select_mode == sel_addpoint || g_qeglobals . d_select_mode == sel_editpoint
>3732	EqualityExpression	g_qeglobals . d_select_mode == sel_editpoint
>3733	Identifier	sel_editpoint
>3734	MemberAccess	g_qeglobals . d_select_mode
>3735	Identifier	d_select_mode
>3736	Identifier	g_qeglobals
>3737	EqualityExpression	g_qeglobals . d_select_mode == sel_addpoint
>3738	Identifier	sel_addpoint
>3739	MemberAccess	g_qeglobals . d_select_mode
>3740	Identifier	d_select_mode
>3741	Identifier	g_qeglobals
>3742	MemberAccess	g_qeglobals . selectObject
>3743	Identifier	selectObject
>3744	Identifier	g_qeglobals
>3745	ExpressionStatement	 
>3746	CallExpression	g_splineList -> draw ( static_cast < qboolean > ( g_qeglobals . d_select_mode == sel_addpoint || g_qeglobals . d_\
>3747	ArgumentList	static_cast < qboolean > ( g_qeglobals . d_select_mode == sel_addpoint || g_qeglobals . d_select_mode == sel_editpoint )
>3748	Argument	static_cast < qboolean > ( g_qeglobals . d_select_mode == sel_addpoint || g_qeglobals . d_select_mode == sel_editpoint )
>3749	RelationalExpression	static_cast < qboolean > ( g_qeglobals . d_select_mode == sel_addpoint || g_qeglobals . d_select_mode == \
>3750	RelationalExpression	qboolean > ( g_qeglobals . d_select_mode == sel_addpoint || g_qeglobals . d_select_mode == sel_editpoint )
>3751	OrExpression	g_qeglobals . d_select_mode == sel_addpoint || g_qeglobals . d_select_mode == sel_editpoint
>3752	EqualityExpression	g_qeglobals . d_select_mode == sel_editpoint
>3753	Identifier	sel_editpoint
>3754	MemberAccess	g_qeglobals . d_select_mode
>3755	Identifier	d_select_mode
>3756	Identifier	g_qeglobals
>3757	EqualityExpression	g_qeglobals . d_select_mode == sel_addpoint
>3758	Identifier	sel_addpoint
>3759	MemberAccess	g_qeglobals . d_select_mode
>3760	Identifier	d_select_mode
>3761	Identifier	g_qeglobals
>3762	Identifier	qboolean
>3763	Identifier	static_cast
>3764	Callee	g_splineList -> draw
>3765	PtrMemberAccess	g_splineList -> draw
>3766	Identifier	draw
>3767	Identifier	g_splineList
>3768	IfStatement	if ( g_qeglobals . d_select_mode == sel_vertex )
>3769	ElseStatement	else
>3770	IfStatement	if ( g_qeglobals . d_select_mode == sel_edge )
>3771	CompoundStatement	 
>3772	ExpressionStatement	 
>3773	CallExpression	qglPointSize ( 1 )
>3774	ArgumentList	1
>3775	Argument	1
>3776	PrimaryExpression	1
>3777	Callee	qglPointSize
>3778	Identifier	qglPointSize
>3779	ExpressionStatement	 
>3780	CallExpression	qglEnd ( )
>3781	ArgumentList	 
>3782	Callee	qglEnd
>3783	Identifier	qglEnd
>3784	ForStatement	for ( i = 0 ; i < g_qeglobals . d_numedges ; i ++ )
>3785	CompoundStatement	 
>3786	ExpressionStatement	 
>3787	CallExpression	qglVertex3f ( ( v1 [ 0 ] + v2 [ 0 ] ) * 0.5 , ( v1 [ 1 ] + v2 [ 1 ] ) * 0.5 , ( v1 [ 2 ] + v2 [ 2 ] ) * 0.5 )
>3788	ArgumentList	( v1 [ 0 ] + v2 [ 0 ] ) * 0.5
>3789	Argument	( v1 [ 2 ] + v2 [ 2 ] ) * 0.5
>3790	MultiplicativeExpression	( v1 [ 2 ] + v2 [ 2 ] ) * 0.5
>3791	PrimaryExpression	0.5
>3792	AdditiveExpression	v1 [ 2 ] + v2 [ 2 ]
>3793	ArrayIndexing	v2 [ 2 ]
>3794	PrimaryExpression	2
>3795	Identifier	v2
>3796	ArrayIndexing	v1 [ 2 ]
>3797	PrimaryExpression	2
>3798	Identifier	v1
>3799	Argument	( v1 [ 1 ] + v2 [ 1 ] ) * 0.5
>3800	MultiplicativeExpression	( v1 [ 1 ] + v2 [ 1 ] ) * 0.5
>3801	PrimaryExpression	0.5
>3802	AdditiveExpression	v1 [ 1 ] + v2 [ 1 ]
>3803	ArrayIndexing	v2 [ 1 ]
>3804	PrimaryExpression	1
>3805	Identifier	v2
>3806	ArrayIndexing	v1 [ 1 ]
>3807	PrimaryExpression	1
>3808	Identifier	v1
>3809	Argument	( v1 [ 0 ] + v2 [ 0 ] ) * 0.5
>3810	MultiplicativeExpression	( v1 [ 0 ] + v2 [ 0 ] ) * 0.5
>3811	PrimaryExpression	0.5
>3812	AdditiveExpression	v1 [ 0 ] + v2 [ 0 ]
>3813	ArrayIndexing	v2 [ 0 ]
>3814	PrimaryExpression	0
>3815	Identifier	v2
>3816	ArrayIndexing	v1 [ 0 ]
>3817	PrimaryExpression	0
>3818	Identifier	v1
>3819	Callee	qglVertex3f
>3820	Identifier	qglVertex3f
>3821	ExpressionStatement	 
>3822	AssignmentExpr	v2 = g_qeglobals . d_points [ g_qeglobals . d_edges [ i ] . p2 ]
>3823	ArrayIndexing	g_qeglobals . d_points [ g_qeglobals . d_edges [ i ] . p2 ]
>3824	MemberAccess	g_qeglobals . d_edges [ i ] . p2
>3825	Identifier	p2
>3826	ArrayIndexing	g_qeglobals . d_edges [ i ]
>3827	Identifier	i
>3828	MemberAccess	g_qeglobals . d_edges
>3829	Identifier	d_edges
>3830	Identifier	g_qeglobals
>3831	MemberAccess	g_qeglobals . d_points
>3832	Identifier	d_points
>3833	Identifier	g_qeglobals
>3834	Identifier	v2
>3835	ExpressionStatement	 
>3836	AssignmentExpr	v1 = g_qeglobals . d_points [ g_qeglobals . d_edges [ i ] . p1 ]
>3837	ArrayIndexing	g_qeglobals . d_points [ g_qeglobals . d_edges [ i ] . p1 ]
>3838	MemberAccess	g_qeglobals . d_edges [ i ] . p1
>3839	Identifier	p1
>3840	ArrayIndexing	g_qeglobals . d_edges [ i ]
>3841	Identifier	i
>3842	MemberAccess	g_qeglobals . d_edges
>3843	Identifier	d_edges
>3844	Identifier	g_qeglobals
>3845	MemberAccess	g_qeglobals . d_points
>3846	Identifier	d_points
>3847	Identifier	g_qeglobals
>3848	Identifier	v1
>3849	IncDecOp	 
>3850	IncDec	++
>3851	Identifier	i
>3852	Condition	 
>3853	RelationalExpression	i < g_qeglobals . d_numedges
>3854	MemberAccess	g_qeglobals . d_numedges
>3855	Identifier	d_numedges
>3856	Identifier	g_qeglobals
>3857	Identifier	i
>3858	ForInit	 
>3859	AssignmentExpr	i = 0
>3860	PrimaryExpression	0
>3861	Identifier	i
>3862	ExpressionStatement	 
>3863	CallExpression	qglBegin ( GL_POINTS )
>3864	ArgumentList	GL_POINTS
>3865	Argument	GL_POINTS
>3866	Identifier	GL_POINTS
>3867	Callee	qglBegin
>3868	Identifier	qglBegin
>3869	ExpressionStatement	 
>3870	CallExpression	qglColor3f ( 0 , 0 , 1 )
>3871	ArgumentList	0
>3872	Argument	1
>3873	PrimaryExpression	1
>3874	Argument	0
>3875	PrimaryExpression	0
>3876	Argument	0
>3877	PrimaryExpression	0
>3878	Callee	qglColor3f
>3879	Identifier	qglColor3f
>3880	ExpressionStatement	 
>3881	CallExpression	qglPointSize ( 4 )
>3882	ArgumentList	4
>3883	Argument	4
>3884	PrimaryExpression	4
>3885	Callee	qglPointSize
>3886	Identifier	qglPointSize
>3887	IdentifierDeclStatement	 
>3888	IdentifierDecl	* v2
>3889	Identifier	v2
>3890	IdentifierDeclType	float *
>3891	IdentifierDecl	* v1
>3892	Identifier	v1
>3893	IdentifierDeclType	float *
>3894	Condition	 
>3895	EqualityExpression	g_qeglobals . d_select_mode == sel_edge
>3896	Identifier	sel_edge
>3897	MemberAccess	g_qeglobals . d_select_mode
>3898	Identifier	d_select_mode
>3899	Identifier	g_qeglobals
>3900	CompoundStatement	 
>3901	ExpressionStatement	 
>3902	CallExpression	qglPointSize ( 1 )
>3903	ArgumentList	1
>3904	Argument	1
>3905	PrimaryExpression	1
>3906	Callee	qglPointSize
>3907	Identifier	qglPointSize
>3908	ExpressionStatement	 
>3909	CallExpression	qglEnd ( )
>3910	ArgumentList	 
>3911	Callee	qglEnd
>3912	Identifier	qglEnd
>3913	ForStatement	for ( i = 0 ; i < g_qeglobals . d_numpoints ; i ++ )
>3914	ExpressionStatement	 
>3915	CallExpression	qglVertex3fv ( g_qeglobals . d_points [ i ] )
>3916	ArgumentList	g_qeglobals . d_points [ i ]
>3917	Argument	g_qeglobals . d_points [ i ]
>3918	ArrayIndexing	g_qeglobals . d_points [ i ]
>3919	Identifier	i
>3920	MemberAccess	g_qeglobals . d_points
>3921	Identifier	d_points
>3922	Identifier	g_qeglobals
>3923	Callee	qglVertex3fv
>3924	Identifier	qglVertex3fv
>3925	IncDecOp	 
>3926	IncDec	++
>3927	Identifier	i
>3928	Condition	 
>3929	RelationalExpression	i < g_qeglobals . d_numpoints
>3930	MemberAccess	g_qeglobals . d_numpoints
>3931	Identifier	d_numpoints
>3932	Identifier	g_qeglobals
>3933	Identifier	i
>3934	ForInit	 
>3935	AssignmentExpr	i = 0
>3936	PrimaryExpression	0
>3937	Identifier	i
>3938	ExpressionStatement	 
>3939	CallExpression	qglBegin ( GL_POINTS )
>3940	ArgumentList	GL_POINTS
>3941	Argument	GL_POINTS
>3942	Identifier	GL_POINTS
>3943	Callee	qglBegin
>3944	Identifier	qglBegin
>3945	ExpressionStatement	 
>3946	CallExpression	qglColor3f ( 0 , 1 , 0 )
>3947	ArgumentList	0
>3948	Argument	0
>3949	PrimaryExpression	0
>3950	Argument	1
>3951	PrimaryExpression	1
>3952	Argument	0
>3953	PrimaryExpression	0
>3954	Callee	qglColor3f
>3955	Identifier	qglColor3f
>3956	ExpressionStatement	 
>3957	CallExpression	qglPointSize ( 4 )
>3958	ArgumentList	4
>3959	Argument	4
>3960	PrimaryExpression	4
>3961	Callee	qglPointSize
>3962	Identifier	qglPointSize
>3963	Condition	 
>3964	EqualityExpression	g_qeglobals . d_select_mode == sel_vertex
>3965	Identifier	sel_vertex
>3966	MemberAccess	g_qeglobals . d_select_mode
>3967	Identifier	d_select_mode
>3968	Identifier	g_qeglobals
>3969	ForStatement	for ( brush = pList -> next ; brush != pList ; brush = brush -> next )
>3970	CompoundStatement	 
>3971	ForStatement	for ( face = brush -> brush_faces ; face ; face = face -> next )
>3972	ExpressionStatement	 
>3973	CallExpression	Face_Draw ( face )
>3974	ArgumentList	face
>3975	Argument	face
>3976	Identifier	face
>3977	Callee	Face_Draw
>3978	Identifier	Face_Draw
>3979	AssignmentExpr	 
>3980	PtrMemberAccess	face -> next
>3981	Identifier	next
>3982	Identifier	face
>3983	Identifier	face
>3984	Condition	 
>3985	Identifier	face
>3986	ForInit	 
>3987	AssignmentExpr	face = brush -> brush_faces
>3988	PtrMemberAccess	brush -> brush_faces
>3989	Identifier	brush_faces
>3990	Identifier	brush
>3991	Identifier	face
>3992	IfStatement	if ( g_qeglobals . dontDrawSelectedOutlines || ( brush -> patchBrush && g_qeglobals . d_select_mode == sel_curvepoint ) || ( \
>3993	ContinueStatement	 
>3994	Condition	 
>3995	OrExpression	g_qeglobals . dontDrawSelectedOutlines || ( brush -> patchBrush && g_qeglobals . d_select_mode == sel_\
>3996	OrExpression	( brush -> patchBrush && g_qeglobals . d_select_mode == sel_curvepoint ) || ( brush -> terrainBrush && \
>3997	AndExpression	brush -> terrainBrush && g_qeglobals . d_select_mode == sel_terrainpoint
>3998	EqualityExpression	g_qeglobals . d_select_mode == sel_terrainpoint
>3999	Identifier	sel_terrainpoint
>4000	MemberAccess	g_qeglobals . d_select_mode
>4001	Identifier	d_select_mode
>4002	Identifier	g_qeglobals
>4003	PtrMemberAccess	brush -> terrainBrush
>4004	Identifier	terrainBrush
>4005	Identifier	brush
>4006	AndExpression	brush -> patchBrush && g_qeglobals . d_select_mode == sel_curvepoint
>4007	EqualityExpression	g_qeglobals . d_select_mode == sel_curvepoint
>4008	Identifier	sel_curvepoint
>4009	MemberAccess	g_qeglobals . d_select_mode
>4010	Identifier	d_select_mode
>4011	Identifier	g_qeglobals
>4012	PtrMemberAccess	brush -> patchBrush
>4013	Identifier	patchBrush
>4014	Identifier	brush
>4015	MemberAccess	g_qeglobals . dontDrawSelectedOutlines
>4016	Identifier	dontDrawSelectedOutlines
>4017	Identifier	g_qeglobals
>4018	AssignmentExpr	 
>4019	PtrMemberAccess	brush -> next
>4020	Identifier	next
>4021	Identifier	brush
>4022	Identifier	brush
>4023	Condition	 
>4024	EqualityExpression	brush != pList
>4025	Identifier	pList
>4026	Identifier	brush
>4027	ForInit	 
>4028	AssignmentExpr	brush = pList -> next
>4029	PtrMemberAccess	pList -> next
>4030	Identifier	next
>4031	Identifier	pList
>4032	Identifier	brush
>4033	ExpressionStatement	 
>4034	CallExpression	qglColor3f ( 1 , 1 , 1 )
>4035	ArgumentList	1
>4036	Argument	1
>4037	PrimaryExpression	1
>4038	Argument	1
>4039	PrimaryExpression	1
>4040	Argument	1
>4041	PrimaryExpression	1
>4042	Callee	qglColor3f
>4043	Identifier	qglColor3f
>4044	ExpressionStatement	 
>4045	CallExpression	qglPolygonMode ( GL_FRONT_AND_BACK , GL_LINE )
>4046	ArgumentList	GL_FRONT_AND_BACK
>4047	Argument	GL_LINE
>4048	Identifier	GL_LINE
>4049	Argument	GL_FRONT_AND_BACK
>4050	Identifier	GL_FRONT_AND_BACK
>4051	Callee	qglPolygonMode
>4052	Identifier	qglPolygonMode
>4053	ExpressionStatement	 
>4054	CallExpression	qglDisable ( GL_DEPTH_TEST )
>4055	ArgumentList	GL_DEPTH_TEST
>4056	Argument	GL_DEPTH_TEST
>4057	Identifier	GL_DEPTH_TEST
>4058	Callee	qglDisable
>4059	Identifier	qglDisable
>4060	ExpressionStatement	 
>4061	CallExpression	qglDisable ( GL_BLEND )
>4062	ArgumentList	GL_BLEND
>4063	Argument	GL_BLEND
>4064	Identifier	GL_BLEND
>4065	Callee	qglDisable
>4066	Identifier	qglDisable
>4067	IfStatement	if ( nCount > 0 )
>4068	CompoundStatement	 
>4069	ForStatement	for ( int i = 0 ; i < nCount ; i ++ )
>4070	CompoundStatement	 
>4071	ExpressionStatement	 
>4072	CallExpression	Face_Draw ( selFace )
>4073	ArgumentList	selFace
>4074	Argument	selFace
>4075	Identifier	selFace
>4076	Callee	Face_Draw
>4077	Identifier	Face_Draw
>4078	ExpressionStatement	 
>4079	CallExpression	g_ptrSelectedFaces . GetAt ( i )
>4080	ArgumentList	i
>4081	Argument	i
>4082	Identifier	i
>4083	Callee	g_ptrSelectedFaces . GetAt
>4084	MemberAccess	g_ptrSelectedFaces . GetAt
>4085	Identifier	GetAt
>4086	Identifier	g_ptrSelectedFaces
>4087	Statement	 
>4088	Statement	 
>4089	Statement	 
>4090	Statement	 
>4091	Statement	 
>4092	Statement	 
>4093	Statement	 
>4094	Statement	 
>4095	Statement	 
>4096	IncDecOp	 
>4097	IncDec	++
>4098	Identifier	i
>4099	Condition	 
>4100	RelationalExpression	i < nCount
>4101	Identifier	nCount
>4102	Identifier	i
>4103	ForInit	 
>4104	IdentifierDeclStatement	int i = 0 ;
>4105	IdentifierDecl	i = 0
>4106	AssignmentExpr	i = 0
>4107	PrimaryExpression	0
>4108	Identifier	i
>4109	Identifier	i
>4110	IdentifierDeclType	int
>4111	Condition	 
>4112	RelationalExpression	nCount > 0
>4113	PrimaryExpression	0
>4114	Identifier	nCount
>4115	IdentifierDeclStatement	 
>4116	IdentifierDecl	nCount = g_ptrSelectedFaces . GetSize ( )
>4117	AssignmentExpr	nCount = g_ptrSelectedFaces . GetSize ( )
>4118	CallExpression	g_ptrSelectedFaces . GetSize ( )
>4119	ArgumentList	 
>4120	Callee	g_ptrSelectedFaces . GetSize
>4121	MemberAccess	g_ptrSelectedFaces . GetSize
>4122	Identifier	GetSize
>4123	Identifier	g_ptrSelectedFaces
>4124	Identifier	nCount
>4125	Identifier	nCount
>4126	IdentifierDeclType	int
>4127	ForStatement	for ( brush = pList -> next ; brush != pList ; brush = brush -> next )
>4128	CompoundStatement	 
>4129	ForStatement	for ( face = brush -> brush_faces ; face ; face = face -> next )
>4130	ExpressionStatement	 
>4131	CallExpression	Face_Draw ( face )
>4132	ArgumentList	face
>4133	Argument	face
>4134	Identifier	face
>4135	Callee	Face_Draw
>4136	Identifier	Face_Draw
>4137	AssignmentExpr	 
>4138	PtrMemberAccess	face -> next
>4139	Identifier	next
>4140	Identifier	face
>4141	Identifier	face
>4142	Condition	 
>4143	Identifier	face
>4144	ForInit	 
>4145	AssignmentExpr	face = brush -> brush_faces
>4146	PtrMemberAccess	brush -> brush_faces
>4147	Identifier	brush_faces
>4148	Identifier	brush
>4149	Identifier	face
>4150	IfStatement	if ( ( brush -> patchBrush && g_qeglobals . d_select_mode == sel_curvepoint ) || ( brush -> terrainBrush && g_qeglobals \
>4151	ContinueStatement	 
>4152	Condition	 
>4153	OrExpression	( brush -> patchBrush && g_qeglobals . d_select_mode == sel_curvepoint ) || ( brush -> terrainBrush && \
>4154	AndExpression	brush -> terrainBrush && g_qeglobals . d_select_mode == sel_terrainpoint
>4155	EqualityExpression	g_qeglobals . d_select_mode == sel_terrainpoint
>4156	Identifier	sel_terrainpoint
>4157	MemberAccess	g_qeglobals . d_select_mode
>4158	Identifier	d_select_mode
>4159	Identifier	g_qeglobals
>4160	PtrMemberAccess	brush -> terrainBrush
>4161	Identifier	terrainBrush
>4162	Identifier	brush
>4163	AndExpression	brush -> patchBrush && g_qeglobals . d_select_mode == sel_curvepoint
>4164	EqualityExpression	g_qeglobals . d_select_mode == sel_curvepoint
>4165	Identifier	sel_curvepoint
>4166	MemberAccess	g_qeglobals . d_select_mode
>4167	Identifier	d_select_mode
>4168	Identifier	g_qeglobals
>4169	PtrMemberAccess	brush -> patchBrush
>4170	Identifier	patchBrush
>4171	Identifier	brush
>4172	AssignmentExpr	 
>4173	PtrMemberAccess	brush -> next
>4174	Identifier	next
>4175	Identifier	brush
>4176	Identifier	brush
>4177	Condition	 
>4178	EqualityExpression	brush != pList
>4179	Identifier	pList
>4180	Identifier	brush
>4181	ForInit	 
>4182	AssignmentExpr	brush = pList -> next
>4183	PtrMemberAccess	pList -> next
>4184	Identifier	next
>4185	Identifier	pList
>4186	Identifier	brush
>4187	ExpressionStatement	 
>4188	CallExpression	qglDisable ( GL_TEXTURE_2D )
>4189	ArgumentList	GL_TEXTURE_2D
>4190	Argument	GL_TEXTURE_2D
>4191	Identifier	GL_TEXTURE_2D
>4192	Callee	qglDisable
>4193	Identifier	qglDisable
>4194	ExpressionStatement	 
>4195	CallExpression	qglBlendFunc ( GL_SRC_ALPHA , GL_ONE_MINUS_SRC_ALPHA )
>4196	ArgumentList	GL_SRC_ALPHA
>4197	Argument	GL_ONE_MINUS_SRC_ALPHA
>4198	Identifier	GL_ONE_MINUS_SRC_ALPHA
>4199	Argument	GL_SRC_ALPHA
>4200	Identifier	GL_SRC_ALPHA
>4201	Callee	qglBlendFunc
>4202	Identifier	qglBlendFunc
>4203	ExpressionStatement	 
>4204	CallExpression	qglPolygonMode ( GL_FRONT_AND_BACK , GL_FILL )
>4205	ArgumentList	GL_FRONT_AND_BACK
>4206	Argument	GL_FILL
>4207	Identifier	GL_FILL
>4208	Argument	GL_FRONT_AND_BACK
>4209	Identifier	GL_FRONT_AND_BACK
>4210	Callee	qglPolygonMode
>4211	Identifier	qglPolygonMode
>4212	ExpressionStatement	 
>4213	CallExpression	qglEnable ( GL_BLEND )
>4214	ArgumentList	GL_BLEND
>4215	Argument	GL_BLEND
>4216	Identifier	GL_BLEND
>4217	Callee	qglEnable
>4218	Identifier	qglEnable
>4219	ExpressionStatement	 
>4220	CallExpression	qglColor4f ( 1.0 , 0.0 , 0.0 , 0.3 )
>4221	ArgumentList	1.0
>4222	Argument	0.3
>4223	PrimaryExpression	0.3
>4224	Argument	0.0
>4225	PrimaryExpression	0.0
>4226	Argument	0.0
>4227	PrimaryExpression	0.0
>4228	Argument	1.0
>4229	PrimaryExpression	1.0
>4230	Callee	qglColor4f
>4231	Identifier	qglColor4f
>4232	ExpressionStatement	 
>4233	CallExpression	qglDisable ( GL_LIGHTING )
>4234	ArgumentList	GL_LIGHTING
>4235	Argument	GL_LIGHTING
>4236	Identifier	GL_LIGHTING
>4237	Callee	qglDisable
>4238	Identifier	qglDisable
>4239	ExpressionStatement	 
>4240	CallExpression	qglMatrixMode ( GL_PROJECTION )
>4241	ArgumentList	GL_PROJECTION
>4242	Argument	GL_PROJECTION
>4243	Identifier	GL_PROJECTION
>4244	Callee	qglMatrixMode
>4245	Identifier	qglMatrixMode
>4246	ForStatement	for ( brush = pList -> next ; brush != pList ; brush = brush -> next )
>4247	CompoundStatement	 
>4248	ExpressionStatement	 
>4249	CallExpression	Brush_Draw ( brush )
>4250	ArgumentList	brush
>4251	Argument	brush
>4252	Identifier	brush
>4253	Callee	Brush_Draw
>4254	Identifier	Brush_Draw
>4255	AssignmentExpr	 
>4256	PtrMemberAccess	brush -> next
>4257	Identifier	next
>4258	Identifier	brush
>4259	Identifier	brush
>4260	Condition	 
>4261	EqualityExpression	brush != pList
>4262	Identifier	pList
>4263	Identifier	brush
>4264	ForInit	 
>4265	AssignmentExpr	brush = pList -> next
>4266	PtrMemberAccess	pList -> next
>4267	Identifier	next
>4268	Identifier	pList
>4269	Identifier	brush
>4270	IdentifierDeclStatement	 
>4271	IdentifierDecl	* pList = ( g_bClipMode && g_pSplitList ) ? g_pSplitList 
>4272	AssignmentExpr	* pList = ( g_bClipMode && g_pSplitList ) ? g_pSplitList 
>4273	ConditionalExpression	( g_bClipMode && g_pSplitList ) ? g_pSplitList 
>4274	UnaryOp	& selected_brushes
>4275	Identifier	selected_brushes
>4276	UnaryOperator	&
>4277	Identifier	g_pSplitList
>4278	Condition	g_bClipMode && g_pSplitList
>4279	AndExpression	g_bClipMode && g_pSplitList
>4280	Identifier	g_pSplitList
>4281	Identifier	g_bClipMode
>4282	Identifier	pList
>4283	Identifier	pList
>4284	IdentifierDeclType	brush_t *
>4285	ExpressionStatement	 
>4286	CallExpression	qglMatrixMode ( GL_TEXTURE )
>4287	ArgumentList	GL_TEXTURE
>4288	Argument	GL_TEXTURE
>4289	Identifier	GL_TEXTURE
>4290	Callee	qglMatrixMode
>4291	Identifier	qglMatrixMode
>4292	ExpressionStatement	 
>4293	CallExpression	qglTranslatef ( g_qeglobals . d_select_translate [ 0 ] , g_qeglobals . d_select_translate [ 1 ] , g_qeglobals . \
>4294	ArgumentList	g_qeglobals . d_select_translate [ 0 ]
>4295	Argument	g_qeglobals . d_select_translate [ 2 ]
>4296	ArrayIndexing	g_qeglobals . d_select_translate [ 2 ]
>4297	PrimaryExpression	2
>4298	MemberAccess	g_qeglobals . d_select_translate
>4299	Identifier	d_select_translate
>4300	Identifier	g_qeglobals
>4301	Argument	g_qeglobals . d_select_translate [ 1 ]
>4302	ArrayIndexing	g_qeglobals . d_select_translate [ 1 ]
>4303	PrimaryExpression	1
>4304	MemberAccess	g_qeglobals . d_select_translate
>4305	Identifier	d_select_translate
>4306	Identifier	g_qeglobals
>4307	Argument	g_qeglobals . d_select_translate [ 0 ]
>4308	ArrayIndexing	g_qeglobals . d_select_translate [ 0 ]
>4309	PrimaryExpression	0
>4310	MemberAccess	g_qeglobals . d_select_translate
>4311	Identifier	d_select_translate
>4312	Identifier	g_qeglobals
>4313	Callee	qglTranslatef
>4314	Identifier	qglTranslatef
>4315	IfStatement	if ( g_PrefsDlg . m_bGLLighting )
>4316	CompoundStatement	 
>4317	ExpressionStatement	 
>4318	CallExpression	qglEnable ( GL_LIGHTING )
>4319	ArgumentList	GL_LIGHTING
>4320	Argument	GL_LIGHTING
>4321	Identifier	GL_LIGHTING
>4322	Callee	qglEnable
>4323	Identifier	qglEnable
>4324	Condition	 
>4325	MemberAccess	g_PrefsDlg . m_bGLLighting
>4326	Identifier	m_bGLLighting
>4327	Identifier	g_PrefsDlg
>4328	ExpressionStatement	 
>4329	CallExpression	qglMatrixMode ( GL_PROJECTION )
>4330	ArgumentList	GL_PROJECTION
>4331	Argument	GL_PROJECTION
>4332	Identifier	GL_PROJECTION
>4333	Callee	qglMatrixMode
>4334	Identifier	qglMatrixMode
>4335	ForStatement	for ( i = 0 ; i < m_nNumTransBrushes ; i ++ )
>4336	ExpressionStatement	 
>4337	CallExpression	Brush_Draw ( m_TransBrushes [ i ] )
>4338	ArgumentList	m_TransBrushes [ i ]
>4339	Argument	m_TransBrushes [ i ]
>4340	ArrayIndexing	m_TransBrushes [ i ]
>4341	Identifier	i
>4342	Identifier	m_TransBrushes
>4343	Callee	Brush_Draw
>4344	Identifier	Brush_Draw
>4345	IncDecOp	 
>4346	IncDec	++
>4347	Identifier	i
>4348	Condition	 
>4349	RelationalExpression	i < m_nNumTransBrushes
>4350	Identifier	m_nNumTransBrushes
>4351	Identifier	i
>4352	ForInit	 
>4353	AssignmentExpr	i = 0
>4354	PrimaryExpression	0
>4355	Identifier	i
>4356	ExpressionStatement	 
>4357	CallExpression	qglBlendFunc ( GL_SRC_ALPHA , GL_ONE_MINUS_SRC_ALPHA )
>4358	ArgumentList	GL_SRC_ALPHA
>4359	Argument	GL_ONE_MINUS_SRC_ALPHA
>4360	Identifier	GL_ONE_MINUS_SRC_ALPHA
>4361	Argument	GL_SRC_ALPHA
>4362	Identifier	GL_SRC_ALPHA
>4363	Callee	qglBlendFunc
>4364	Identifier	qglBlendFunc
>4365	ExpressionStatement	 
>4366	CallExpression	qglEnable ( GL_BLEND )
>4367	ArgumentList	GL_BLEND
>4368	Argument	GL_BLEND
>4369	Identifier	GL_BLEND
>4370	Callee	qglEnable
>4371	Identifier	qglEnable
>4372	IfStatement	if ( g_PrefsDlg . m_bGLLighting )
>4373	CompoundStatement	 
>4374	ExpressionStatement	 
>4375	CallExpression	qglDisable ( GL_LIGHTING )
>4376	ArgumentList	GL_LIGHTING
>4377	Argument	GL_LIGHTING
>4378	Identifier	GL_LIGHTING
>4379	Callee	qglDisable
>4380	Identifier	qglDisable
>4381	Condition	 
>4382	MemberAccess	g_PrefsDlg . m_bGLLighting
>4383	Identifier	m_bGLLighting
>4384	Identifier	g_PrefsDlg
>4385	ForStatement	for ( brush = active_brushes . next ; brush != & active_brushes ; brush = brush -> next )
>4386	CompoundStatement	 
>4387	IfStatement	if ( ( brush -> brush_faces -> texdef . flags & ( SURF_TRANS33 | SURF_TRANS66 ) ) || ( brush -> brush_faces -> d_\
>4388	ElseStatement	else
>4389	CompoundStatement	 
>4390	ExpressionStatement	 
>4391	CallExpression	Brush_Draw ( brush )
>4392	ArgumentList	brush
>4393	Argument	brush
>4394	Identifier	brush
>4395	Callee	Brush_Draw
>4396	Identifier	Brush_Draw
>4397	CompoundStatement	 
>4398	ExpressionStatement	 
>4399	AssignmentExpr	m_TransBrushes [ m_nNumTransBrushes ++ ] = brush
>4400	Identifier	brush
>4401	ArrayIndexing	m_TransBrushes [ m_nNumTransBrushes ++ ]
>4402	IncDecOp	m_nNumTransBrushes ++
>4403	IncDec	++
>4404	Identifier	m_nNumTransBrushes
>4405	Identifier	m_TransBrushes
>4406	Condition	 
>4407	OrExpression	( brush -> brush_faces -> texdef . flags & ( SURF_TRANS33 | SURF_TRANS66 ) ) || ( brush -> brush_faces \
>4408	AndExpression	brush -> brush_faces -> d_texture -> bFromShader && brush -> brush_faces -> d_texture -> fTrans != 1.0
>4409	EqualityExpression	brush -> brush_faces -> d_texture -> fTrans != 1.0
>4410	PrimaryExpression	1.0
>4411	PtrMemberAccess	brush -> brush_faces -> d_texture -> fTrans
>4412	Identifier	fTrans
>4413	PtrMemberAccess	brush -> brush_faces -> d_texture
>4414	Identifier	d_texture
>4415	PtrMemberAccess	brush -> brush_faces
>4416	Identifier	brush_faces
>4417	Identifier	brush
>4418	PtrMemberAccess	brush -> brush_faces -> d_texture -> bFromShader
>4419	Identifier	bFromShader
>4420	PtrMemberAccess	brush -> brush_faces -> d_texture
>4421	Identifier	d_texture
>4422	PtrMemberAccess	brush -> brush_faces
>4423	Identifier	brush_faces
>4424	Identifier	brush
>4425	BitAndExpression	brush -> brush_faces -> texdef . flags & ( SURF_TRANS33 | SURF_TRANS66 )
>4426	InclusiveOrExpression	SURF_TRANS33 | SURF_TRANS66
>4427	Identifier	SURF_TRANS66
>4428	Identifier	SURF_TRANS33
>4429	MemberAccess	brush -> brush_faces -> texdef . flags
>4430	Identifier	flags
>4431	PtrMemberAccess	brush -> brush_faces -> texdef
>4432	Identifier	texdef
>4433	PtrMemberAccess	brush -> brush_faces
>4434	Identifier	brush_faces
>4435	Identifier	brush
>4436	IfStatement	if ( FilterBrush ( brush ) )
>4437	ContinueStatement	 
>4438	Condition	 
>4439	CallExpression	FilterBrush ( brush )
>4440	ArgumentList	brush
>4441	Argument	brush
>4442	Identifier	brush
>4443	Callee	FilterBrush
>4444	Identifier	FilterBrush
>4445	IfStatement	if ( CullBrush ( brush ) )
>4446	ContinueStatement	 
>4447	Condition	 
>4448	CallExpression	CullBrush ( brush )
>4449	ArgumentList	brush
>4450	Argument	brush
>4451	Identifier	brush
>4452	Callee	CullBrush
>4453	Identifier	CullBrush
>4454	AssignmentExpr	 
>4455	PtrMemberAccess	brush -> next
>4456	Identifier	next
>4457	Identifier	brush
>4458	Identifier	brush
>4459	Condition	 
>4460	EqualityExpression	brush != & active_brushes
>4461	UnaryOp	& active_brushes
>4462	Identifier	active_brushes
>4463	UnaryOperator	&
>4464	Identifier	brush
>4465	ForInit	 
>4466	AssignmentExpr	brush = active_brushes . next
>4467	MemberAccess	active_brushes . next
>4468	Identifier	next
>4469	Identifier	active_brushes
>4470	Identifier	brush
>4471	ExpressionStatement	 
>4472	AssignmentExpr	m_nNumTransBrushes = 0
>4473	PrimaryExpression	0
>4474	Identifier	m_nNumTransBrushes
>4475	ExpressionStatement	 
>4476	CallExpression	qglMatrixMode ( GL_TEXTURE )
>4477	ArgumentList	GL_TEXTURE
>4478	Argument	GL_TEXTURE
>4479	Identifier	GL_TEXTURE
>4480	Callee	qglMatrixMode
>4481	Identifier	qglMatrixMode
>4482	SwitchStatement	switch ( m_Camera . draw_mode )
>4483	CompoundStatement	 
>4484	BreakStatement	 
>4485	ExpressionStatement	 
>4486	CallExpression	qglBlendFunc ( GL_SRC_ALPHA , GL_ONE_MINUS_SRC_ALPHA )
>4487	ArgumentList	GL_SRC_ALPHA
>4488	Argument	GL_ONE_MINUS_SRC_ALPHA
>4489	Identifier	GL_ONE_MINUS_SRC_ALPHA
>4490	Argument	GL_SRC_ALPHA
>4491	Identifier	GL_SRC_ALPHA
>4492	Callee	qglBlendFunc
>4493	Identifier	qglBlendFunc
>4494	ExpressionStatement	 
>4495	CallExpression	qglEnable ( GL_BLEND )
>4496	ArgumentList	GL_BLEND
>4497	Argument	GL_BLEND
>4498	Identifier	GL_BLEND
>4499	Callee	qglEnable
>4500	Identifier	qglEnable
>4501	ExpressionStatement	 
>4502	CallExpression	qglDisable ( GL_DEPTH_TEST )
>4503	ArgumentList	GL_DEPTH_TEST
>4504	Argument	GL_DEPTH_TEST
>4505	Identifier	GL_DEPTH_TEST
>4506	Callee	qglDisable
>4507	Identifier	qglDisable
>4508	ExpressionStatement	 
>4509	CallExpression	qglTexParameterf ( GL_TEXTURE_2D , GL_TEXTURE_WRAP_T , GL_REPEAT )
>4510	ArgumentList	GL_TEXTURE_2D
>4511	Argument	GL_REPEAT
>4512	Identifier	GL_REPEAT
>4513	Argument	GL_TEXTURE_WRAP_T
>4514	Identifier	GL_TEXTURE_WRAP_T
>4515	Argument	GL_TEXTURE_2D
>4516	Identifier	GL_TEXTURE_2D
>4517	Callee	qglTexParameterf
>4518	Identifier	qglTexParameterf
>4519	ExpressionStatement	 
>4520	CallExpression	qglTexParameterf ( GL_TEXTURE_2D , GL_TEXTURE_WRAP_S , GL_REPEAT )
>4521	ArgumentList	GL_TEXTURE_2D
>4522	Argument	GL_REPEAT
>4523	Identifier	GL_REPEAT
>4524	Argument	GL_TEXTURE_WRAP_S
>4525	Identifier	GL_TEXTURE_WRAP_S
>4526	Argument	GL_TEXTURE_2D
>4527	Identifier	GL_TEXTURE_2D
>4528	Callee	qglTexParameterf
>4529	Identifier	qglTexParameterf
>4530	ExpressionStatement	 
>4531	CallExpression	qglTexEnvf ( GL_TEXTURE_ENV , GL_TEXTURE_ENV_MODE , GL_MODULATE )
>4532	ArgumentList	GL_TEXTURE_ENV
>4533	Argument	GL_MODULATE
>4534	Identifier	GL_MODULATE
>4535	Argument	GL_TEXTURE_ENV_MODE
>4536	Identifier	GL_TEXTURE_ENV_MODE
>4537	Argument	GL_TEXTURE_ENV
>4538	Identifier	GL_TEXTURE_ENV
>4539	Callee	qglTexEnvf
>4540	Identifier	qglTexEnvf
>4541	ExpressionStatement	 
>4542	CallExpression	qglEnable ( GL_TEXTURE_2D )
>4543	ArgumentList	GL_TEXTURE_2D
>4544	Argument	GL_TEXTURE_2D
>4545	Identifier	GL_TEXTURE_2D
>4546	Callee	qglEnable
>4547	Identifier	qglEnable
>4548	ExpressionStatement	 
>4549	CallExpression	qglPolygonMode ( GL_FRONT_AND_BACK , GL_FILL )
>4550	ArgumentList	GL_FRONT_AND_BACK
>4551	Argument	GL_FILL
>4552	Identifier	GL_FILL
>4553	Argument	GL_FRONT_AND_BACK
>4554	Identifier	GL_FRONT_AND_BACK
>4555	Callee	qglPolygonMode
>4556	Identifier	qglPolygonMode
>4557	ExpressionStatement	 
>4558	CallExpression	qglShadeModel ( GL_FLAT )
>4559	ArgumentList	GL_FLAT
>4560	Argument	GL_FLAT
>4561	Identifier	GL_FLAT
>4562	Callee	qglShadeModel
>4563	Identifier	qglShadeModel
>4564	ExpressionStatement	 
>4565	CallExpression	qglEnable ( GL_CULL_FACE )
>4566	ArgumentList	GL_CULL_FACE
>4567	Argument	GL_CULL_FACE
>4568	Identifier	GL_CULL_FACE
>4569	Callee	qglEnable
>4570	Identifier	qglEnable
>4571	ExpressionStatement	 
>4572	CallExpression	qglCullFace ( GL_FRONT )
>4573	ArgumentList	GL_FRONT
>4574	Argument	GL_FRONT
>4575	Identifier	GL_FRONT
>4576	Callee	qglCullFace
>4577	Identifier	qglCullFace
>4578	Label	 
>4579	Identifier	cd_blend
>4580	BreakStatement	 
>4581	ExpressionStatement	 
>4582	CallExpression	qglDepthFunc ( GL_LEQUAL )
>4583	ArgumentList	GL_LEQUAL
>4584	Argument	GL_LEQUAL
>4585	Identifier	GL_LEQUAL
>4586	Callee	qglDepthFunc
>4587	Identifier	qglDepthFunc
>4588	ExpressionStatement	 
>4589	CallExpression	qglEnable ( GL_DEPTH_TEST )
>4590	ArgumentList	GL_DEPTH_TEST
>4591	Argument	GL_DEPTH_TEST
>4592	Identifier	GL_DEPTH_TEST
>4593	Callee	qglEnable
>4594	Identifier	qglEnable
>4595	ExpressionStatement	 
>4596	CallExpression	qglDisable ( GL_BLEND )
>4597	ArgumentList	GL_BLEND
>4598	Argument	GL_BLEND
>4599	Identifier	GL_BLEND
>4600	Callee	qglDisable
>4601	Identifier	qglDisable
>4602	ExpressionStatement	 
>4603	CallExpression	qglTexParameterf ( GL_TEXTURE_2D , GL_TEXTURE_WRAP_T , GL_REPEAT )
>4604	ArgumentList	GL_TEXTURE_2D
>4605	Argument	GL_REPEAT
>4606	Identifier	GL_REPEAT
>4607	Argument	GL_TEXTURE_WRAP_T
>4608	Identifier	GL_TEXTURE_WRAP_T
>4609	Argument	GL_TEXTURE_2D
>4610	Identifier	GL_TEXTURE_2D
>4611	Callee	qglTexParameterf
>4612	Identifier	qglTexParameterf
>4613	ExpressionStatement	 
>4614	CallExpression	qglTexParameterf ( GL_TEXTURE_2D , GL_TEXTURE_WRAP_S , GL_REPEAT )
>4615	ArgumentList	GL_TEXTURE_2D
>4616	Argument	GL_REPEAT
>4617	Identifier	GL_REPEAT
>4618	Argument	GL_TEXTURE_WRAP_S
>4619	Identifier	GL_TEXTURE_WRAP_S
>4620	Argument	GL_TEXTURE_2D
>4621	Identifier	GL_TEXTURE_2D
>4622	Callee	qglTexParameterf
>4623	Identifier	qglTexParameterf
>4624	ExpressionStatement	 
>4625	CallExpression	qglTexEnvf ( GL_TEXTURE_ENV , GL_TEXTURE_ENV_MODE , GL_MODULATE )
>4626	ArgumentList	GL_TEXTURE_ENV
>4627	Argument	GL_MODULATE
>4628	Identifier	GL_MODULATE
>4629	Argument	GL_TEXTURE_ENV_MODE
>4630	Identifier	GL_TEXTURE_ENV_MODE
>4631	Argument	GL_TEXTURE_ENV
>4632	Identifier	GL_TEXTURE_ENV
>4633	Callee	qglTexEnvf
>4634	Identifier	qglTexEnvf
>4635	ExpressionStatement	 
>4636	CallExpression	qglEnable ( GL_TEXTURE_2D )
>4637	ArgumentList	GL_TEXTURE_2D
>4638	Argument	GL_TEXTURE_2D
>4639	Identifier	GL_TEXTURE_2D
>4640	Callee	qglEnable
>4641	Identifier	qglEnable
>4642	ExpressionStatement	 
>4643	CallExpression	qglPolygonMode ( GL_FRONT_AND_BACK , GL_FILL )
>4644	ArgumentList	GL_FRONT_AND_BACK
>4645	Argument	GL_FILL
>4646	Identifier	GL_FILL
>4647	Argument	GL_FRONT_AND_BACK
>4648	Identifier	GL_FRONT_AND_BACK
>4649	Callee	qglPolygonMode
>4650	Identifier	qglPolygonMode
>4651	ExpressionStatement	 
>4652	CallExpression	qglShadeModel ( GL_FLAT )
>4653	ArgumentList	GL_FLAT
>4654	Argument	GL_FLAT
>4655	Identifier	GL_FLAT
>4656	Callee	qglShadeModel
>4657	Identifier	qglShadeModel
>4658	ExpressionStatement	 
>4659	CallExpression	qglEnable ( GL_CULL_FACE )
>4660	ArgumentList	GL_CULL_FACE
>4661	Argument	GL_CULL_FACE
>4662	Identifier	GL_CULL_FACE
>4663	Callee	qglEnable
>4664	Identifier	qglEnable
>4665	ExpressionStatement	 
>4666	CallExpression	qglCullFace ( GL_FRONT )
>4667	ArgumentList	GL_FRONT
>4668	Argument	GL_FRONT
>4669	Identifier	GL_FRONT
>4670	Callee	qglCullFace
>4671	Identifier	qglCullFace
>4672	Label	 
>4673	Identifier	cd_texture
>4674	BreakStatement	 
>4675	ExpressionStatement	 
>4676	CallExpression	qglDepthFunc ( GL_LEQUAL )
>4677	ArgumentList	GL_LEQUAL
>4678	Argument	GL_LEQUAL
>4679	Identifier	GL_LEQUAL
>4680	Callee	qglDepthFunc
>4681	Identifier	qglDepthFunc
>4682	ExpressionStatement	 
>4683	CallExpression	qglEnable ( GL_DEPTH_TEST )
>4684	ArgumentList	GL_DEPTH_TEST
>4685	Argument	GL_DEPTH_TEST
>4686	Identifier	GL_DEPTH_TEST
>4687	Callee	qglEnable
>4688	Identifier	qglEnable
>4689	ExpressionStatement	 
>4690	CallExpression	qglDisable ( GL_BLEND )
>4691	ArgumentList	GL_BLEND
>4692	Argument	GL_BLEND
>4693	Identifier	GL_BLEND
>4694	Callee	qglDisable
>4695	Identifier	qglDisable
>4696	ExpressionStatement	 
>4697	CallExpression	qglDisable ( GL_TEXTURE_2D )
>4698	ArgumentList	GL_TEXTURE_2D
>4699	Argument	GL_TEXTURE_2D
>4700	Identifier	GL_TEXTURE_2D
>4701	Callee	qglDisable
>4702	Identifier	qglDisable
>4703	ExpressionStatement	 
>4704	CallExpression	qglPolygonMode ( GL_FRONT_AND_BACK , GL_FILL )
>4705	ArgumentList	GL_FRONT_AND_BACK
>4706	Argument	GL_FILL
>4707	Identifier	GL_FILL
>4708	Argument	GL_FRONT_AND_BACK
>4709	Identifier	GL_FRONT_AND_BACK
>4710	Callee	qglPolygonMode
>4711	Identifier	qglPolygonMode
>4712	ExpressionStatement	 
>4713	CallExpression	qglShadeModel ( GL_FLAT )
>4714	ArgumentList	GL_FLAT
>4715	Argument	GL_FLAT
>4716	Identifier	GL_FLAT
>4717	Callee	qglShadeModel
>4718	Identifier	qglShadeModel
>4719	ExpressionStatement	 
>4720	CallExpression	qglEnable ( GL_CULL_FACE )
>4721	ArgumentList	GL_CULL_FACE
>4722	Argument	GL_CULL_FACE
>4723	Identifier	GL_CULL_FACE
>4724	Callee	qglEnable
>4725	Identifier	qglEnable
>4726	ExpressionStatement	 
>4727	CallExpression	qglCullFace ( GL_FRONT )
>4728	ArgumentList	GL_FRONT
>4729	Argument	GL_FRONT
>4730	Identifier	GL_FRONT
>4731	Callee	qglCullFace
>4732	Identifier	qglCullFace
>4733	Label	 
>4734	Identifier	cd_solid
>4735	BreakStatement	 
>4736	ExpressionStatement	 
>4737	CallExpression	qglColor3f ( 1.0 , 1.0 , 1.0 )
>4738	ArgumentList	1.0
>4739	Argument	1.0
>4740	PrimaryExpression	1.0
>4741	Argument	1.0
>4742	PrimaryExpression	1.0
>4743	Argument	1.0
>4744	PrimaryExpression	1.0
>4745	Callee	qglColor3f
>4746	Identifier	qglColor3f
>4747	ExpressionStatement	 
>4748	CallExpression	qglDisable ( GL_DEPTH_TEST )
>4749	ArgumentList	GL_DEPTH_TEST
>4750	Argument	GL_DEPTH_TEST
>4751	Identifier	GL_DEPTH_TEST
>4752	Callee	qglDisable
>4753	Identifier	qglDisable
>4754	ExpressionStatement	 
>4755	CallExpression	qglDisable ( GL_BLEND )
>4756	ArgumentList	GL_BLEND
>4757	Argument	GL_BLEND
>4758	Identifier	GL_BLEND
>4759	Callee	qglDisable
>4760	Identifier	qglDisable
>4761	ExpressionStatement	 
>4762	CallExpression	qglDisable ( GL_TEXTURE_1D )
>4763	ArgumentList	GL_TEXTURE_1D
>4764	Argument	GL_TEXTURE_1D
>4765	Identifier	GL_TEXTURE_1D
>4766	Callee	qglDisable
>4767	Identifier	qglDisable
>4768	ExpressionStatement	 
>4769	CallExpression	qglDisable ( GL_TEXTURE_2D )
>4770	ArgumentList	GL_TEXTURE_2D
>4771	Argument	GL_TEXTURE_2D
>4772	Identifier	GL_TEXTURE_2D
>4773	Callee	qglDisable
>4774	Identifier	qglDisable
>4775	ExpressionStatement	 
>4776	CallExpression	qglPolygonMode ( GL_FRONT_AND_BACK , GL_LINE )
>4777	ArgumentList	GL_FRONT_AND_BACK
>4778	Argument	GL_LINE
>4779	Identifier	GL_LINE
>4780	Argument	GL_FRONT_AND_BACK
>4781	Identifier	GL_FRONT_AND_BACK
>4782	Callee	qglPolygonMode
>4783	Identifier	qglPolygonMode
>4784	Label	 
>4785	Identifier	cd_wire
>4786	Condition	 
>4787	MemberAccess	m_Camera . draw_mode
>4788	Identifier	draw_mode
>4789	Identifier	m_Camera
>4790	IdentifierDeclStatement	 
>4791	IdentifierDecl	lAmbient [ ] = { 1.0 , 1.0 , 1.0 , 1.0 }
>4792	AssignmentExpr	lAmbient [ ] = { 1.0 , 1.0 , 1.0 , 1.0 }
>4793	InitializerList	1.0
>4794	PrimaryExpression	1.0
>4795	PrimaryExpression	1.0
>4796	PrimaryExpression	1.0
>4797	PrimaryExpression	1.0
>4798	Identifier	lAmbient
>4799	Identifier	lAmbient
>4800	IdentifierDeclType	GLfloat [ ]
>4801	ExpressionStatement	 
>4802	CallExpression	InitCull ( )
>4803	ArgumentList	 
>4804	Callee	InitCull
>4805	Identifier	InitCull
>4806	ExpressionStatement	 
>4807	CallExpression	Cam_BuildMatrix ( )
>4808	ArgumentList	 
>4809	Callee	Cam_BuildMatrix
>4810	Identifier	Cam_BuildMatrix
>4811	ExpressionStatement	 
>4812	CallExpression	qglTranslatef ( - m_Camera . origin [ 0 ] , - m_Camera . origin [ 1 ] , - m_Camera . origin [ 2 ] )
>4813	ArgumentList	- m_Camera . origin [ 0 ]
>4814	Argument	- m_Camera . origin [ 2 ]
>4815	UnaryOp	- m_Camera . origin [ 2 ]
>4816	ArrayIndexing	m_Camera . origin [ 2 ]
>4817	PrimaryExpression	2
>4818	MemberAccess	m_Camera . origin
>4819	Identifier	origin
>4820	Identifier	m_Camera
>4821	UnaryOperator	-
>4822	Argument	- m_Camera . origin [ 1 ]
>4823	UnaryOp	- m_Camera . origin [ 1 ]
>4824	ArrayIndexing	m_Camera . origin [ 1 ]
>4825	PrimaryExpression	1
>4826	MemberAccess	m_Camera . origin
>4827	Identifier	origin
>4828	Identifier	m_Camera
>4829	UnaryOperator	-
>4830	Argument	- m_Camera . origin [ 0 ]
>4831	UnaryOp	- m_Camera . origin [ 0 ]
>4832	ArrayIndexing	m_Camera . origin [ 0 ]
>4833	PrimaryExpression	0
>4834	MemberAccess	m_Camera . origin
>4835	Identifier	origin
>4836	Identifier	m_Camera
>4837	UnaryOperator	-
>4838	Callee	qglTranslatef
>4839	Identifier	qglTranslatef
>4840	ExpressionStatement	 
>4841	CallExpression	qglRotatef ( - m_Camera . angles [ 1 ] , 0 , 0 , 1 )
>4842	ArgumentList	- m_Camera . angles [ 1 ]
>4843	Argument	1
>4844	PrimaryExpression	1
>4845	Argument	0
>4846	PrimaryExpression	0
>4847	Argument	0
>4848	PrimaryExpression	0
>4849	Argument	- m_Camera . angles [ 1 ]
>4850	UnaryOp	- m_Camera . angles [ 1 ]
>4851	ArrayIndexing	m_Camera . angles [ 1 ]
>4852	PrimaryExpression	1
>4853	MemberAccess	m_Camera . angles
>4854	Identifier	angles
>4855	Identifier	m_Camera
>4856	UnaryOperator	-
>4857	Callee	qglRotatef
>4858	Identifier	qglRotatef
>4859	ExpressionStatement	 
>4860	CallExpression	qglRotatef ( m_Camera . angles [ 0 ] , 0 , 1 , 0 )
>4861	ArgumentList	m_Camera . angles [ 0 ]
>4862	Argument	0
>4863	PrimaryExpression	0
>4864	Argument	1
>4865	PrimaryExpression	1
>4866	Argument	0
>4867	PrimaryExpression	0
>4868	Argument	m_Camera . angles [ 0 ]
>4869	ArrayIndexing	m_Camera . angles [ 0 ]
>4870	PrimaryExpression	0
>4871	MemberAccess	m_Camera . angles
>4872	Identifier	angles
>4873	Identifier	m_Camera
>4874	Callee	qglRotatef
>4875	Identifier	qglRotatef
>4876	ExpressionStatement	 
>4877	CallExpression	qglRotatef ( 90 , 0 , 0 , 1 )
>4878	ArgumentList	90
>4879	Argument	1
>4880	PrimaryExpression	1
>4881	Argument	0
>4882	PrimaryExpression	0
>4883	Argument	0
>4884	PrimaryExpression	0
>4885	Argument	90
>4886	PrimaryExpression	90
>4887	Callee	qglRotatef
>4888	Identifier	qglRotatef
>4889	ExpressionStatement	 
>4890	CallExpression	qglRotatef ( - 90 , 1 , 0 , 0 )
>4891	ArgumentList	- 90
>4892	Argument	0
>4893	PrimaryExpression	0
>4894	Argument	0
>4895	PrimaryExpression	0
>4896	Argument	1
>4897	PrimaryExpression	1
>4898	Argument	- 90
>4899	UnaryOp	- 90
>4900	PrimaryExpression	90
>4901	UnaryOperator	-
>4902	Callee	qglRotatef
>4903	Identifier	qglRotatef
>4904	ExpressionStatement	 
>4905	CallExpression	qgluPerspective ( yfov , screenaspect , 2 , 8192 )
>4906	ArgumentList	yfov
>4907	Argument	8192
>4908	PrimaryExpression	8192
>4909	Argument	2
>4910	PrimaryExpression	2
>4911	Argument	screenaspect
>4912	Identifier	screenaspect
>4913	Argument	yfov
>4914	Identifier	yfov
>4915	Callee	qgluPerspective
>4916	Identifier	qgluPerspective
>4917	ExpressionStatement	 
>4918	AssignmentExpr	yfov = 2 * atan ( ( float ) m_Camera . height / m_Camera . width ) * 180 / Q_PI
>4919	MultiplicativeExpression	2 * atan ( ( float ) m_Camera . height / m_Camera . width ) * 180 / Q_PI
>4920	MultiplicativeExpression	atan ( ( float ) m_Camera . height / m_Camera . width ) * 180 / Q_PI
>4921	MultiplicativeExpression	180 / Q_PI
>4922	Identifier	Q_PI
>4923	PrimaryExpression	180
>4924	CallExpression	atan ( ( float ) m_Camera . height / m_Camera . width )
>4925	ArgumentList	( float ) m_Camera . height / m_Camera . width
>4926	Argument	( float ) m_Camera . height / m_Camera . width
>4927	MultiplicativeExpression	( float ) m_Camera . height / m_Camera . width
>4928	MemberAccess	m_Camera . width
>4929	Identifier	width
>4930	Identifier	m_Camera
>4931	CastExpression	( float ) m_Camera . height
>4932	MemberAccess	m_Camera . height
>4933	Identifier	height
>4934	Identifier	m_Camera
>4935	CastTarget	float
>4936	Callee	atan
>4937	Identifier	atan
>4938	PrimaryExpression	2
>4939	Identifier	yfov
>4940	ExpressionStatement	 
>4941	AssignmentExpr	screenaspect = ( float ) m_Camera . width / m_Camera . height
>4942	MultiplicativeExpression	( float ) m_Camera . width / m_Camera . height
>4943	MemberAccess	m_Camera . height
>4944	Identifier	height
>4945	Identifier	m_Camera
>4946	CastExpression	( float ) m_Camera . width
>4947	MemberAccess	m_Camera . width
>4948	Identifier	width
>4949	Identifier	m_Camera
>4950	CastTarget	float
>4951	Identifier	screenaspect
>4952	ExpressionStatement	 
>4953	CallExpression	qglLoadIdentity ( )
>4954	ArgumentList	 
>4955	Callee	qglLoadIdentity
>4956	Identifier	qglLoadIdentity
>4957	ExpressionStatement	 
>4958	CallExpression	qglMatrixMode ( GL_PROJECTION )
>4959	ArgumentList	GL_PROJECTION
>4960	Argument	GL_PROJECTION
>4961	Identifier	GL_PROJECTION
>4962	Callee	qglMatrixMode
>4963	Identifier	qglMatrixMode
>4964	IfStatement	if ( g_PrefsDlg . m_bGLLighting )
>4965	ElseStatement	else
>4966	CompoundStatement	 
>4967	ExpressionStatement	 
>4968	CallExpression	qglDisable ( GL_LIGHTING )
>4969	ArgumentList	GL_LIGHTING
>4970	Argument	GL_LIGHTING
>4971	Identifier	GL_LIGHTING
>4972	Callee	qglDisable
>4973	Identifier	qglDisable
>4974	CompoundStatement	 
>4975	ExpressionStatement	 
>4976	CallExpression	qglLightModelfv ( GL_LIGHT_MODEL_AMBIENT , lightPos )
>4977	ArgumentList	GL_LIGHT_MODEL_AMBIENT
>4978	Argument	lightPos
>4979	Identifier	lightPos
>4980	Argument	GL_LIGHT_MODEL_AMBIENT
>4981	Identifier	GL_LIGHT_MODEL_AMBIENT
>4982	Callee	qglLightModelfv
>4983	Identifier	qglLightModelfv
>4984	ExpressionStatement	 
>4985	AssignmentExpr	lightPos [ 3 ] = 1.0
>4986	PrimaryExpression	1.0
>4987	ArrayIndexing	lightPos [ 3 ]
>4988	PrimaryExpression	3
>4989	Identifier	lightPos
>4990	ExpressionStatement	 
>4991	AssignmentExpr	lightPos [ 0 ] = lightPos [ 1 ] = lightPos [ 2 ] = 3.5
>4992	AssignmentExpr	lightPos [ 1 ] = lightPos [ 2 ] = 3.5
>4993	AssignmentExpr	lightPos [ 2 ] = 3.5
>4994	PrimaryExpression	3.5
>4995	ArrayIndexing	lightPos [ 2 ]
>4996	PrimaryExpression	2
>4997	Identifier	lightPos
>4998	ArrayIndexing	lightPos [ 1 ]
>4999	PrimaryExpression	1
>5000	Identifier	lightPos
>5001	ArrayIndexing	lightPos [ 0 ]
>5002	PrimaryExpression	0
>5003	Identifier	lightPos
>5004	ExpressionStatement	 
>5005	CallExpression	qglEnable ( GL_LIGHTING )
>5006	ArgumentList	GL_LIGHTING
>5007	Argument	GL_LIGHTING
>5008	Identifier	GL_LIGHTING
>5009	Callee	qglEnable
>5010	Identifier	qglEnable
>5011	Condition	 
>5012	MemberAccess	g_PrefsDlg . m_bGLLighting
>5013	Identifier	m_bGLLighting
>5014	Identifier	g_PrefsDlg
>5015	IdentifierDeclStatement	 
>5016	IdentifierDecl	lightPos
>5017	Identifier	lightPos
>5018	IdentifierDeclType	vec5_t
>5019	ExpressionStatement	 
>5020	CallExpression	qglClear ( GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT )
>5021	ArgumentList	GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT
>5022	Argument	GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT
>5023	InclusiveOrExpression	GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT
>5024	Identifier	GL_DEPTH_BUFFER_BIT
>5025	Identifier	GL_COLOR_BUFFER_BIT
>5026	Callee	qglClear
>5027	Identifier	qglClear
>5028	ExpressionStatement	 
>5029	CallExpression	qglClearColor ( g_qeglobals . d_savedinfo . colors [ COLOR_CAMERABACK ] [ 0 ] , g_qeglobals . d_savedinfo . colors [ \
>5030	ArgumentList	g_qeglobals . d_savedinfo . colors [ COLOR_CAMERABACK ] [ 0 ]
>5031	Argument	0
>5032	PrimaryExpression	0
>5033	Argument	g_qeglobals . d_savedinfo . colors [ COLOR_CAMERABACK ] [ 2 ]
>5034	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_CAMERABACK ] [ 2 ]
>5035	PrimaryExpression	2
>5036	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_CAMERABACK ]
>5037	Identifier	COLOR_CAMERABACK
>5038	MemberAccess	g_qeglobals . d_savedinfo . colors
>5039	Identifier	colors
>5040	MemberAccess	g_qeglobals . d_savedinfo
>5041	Identifier	d_savedinfo
>5042	Identifier	g_qeglobals
>5043	Argument	g_qeglobals . d_savedinfo . colors [ COLOR_CAMERABACK ] [ 1 ]
>5044	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_CAMERABACK ] [ 1 ]
>5045	PrimaryExpression	1
>5046	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_CAMERABACK ]
>5047	Identifier	COLOR_CAMERABACK
>5048	MemberAccess	g_qeglobals . d_savedinfo . colors
>5049	Identifier	colors
>5050	MemberAccess	g_qeglobals . d_savedinfo
>5051	Identifier	d_savedinfo
>5052	Identifier	g_qeglobals
>5053	Argument	g_qeglobals . d_savedinfo . colors [ COLOR_CAMERABACK ] [ 0 ]
>5054	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_CAMERABACK ] [ 0 ]
>5055	PrimaryExpression	0
>5056	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_CAMERABACK ]
>5057	Identifier	COLOR_CAMERABACK
>5058	MemberAccess	g_qeglobals . d_savedinfo . colors
>5059	Identifier	colors
>5060	MemberAccess	g_qeglobals . d_savedinfo
>5061	Identifier	d_savedinfo
>5062	Identifier	g_qeglobals
>5063	Callee	qglClearColor
>5064	Identifier	qglClearColor
>5065	ExpressionStatement	 
>5066	CallExpression	qglScissor ( 0 , 0 , m_Camera . width , m_Camera . height )
>5067	ArgumentList	0
>5068	Argument	m_Camera . height
>5069	MemberAccess	m_Camera . height
>5070	Identifier	height
>5071	Identifier	m_Camera
>5072	Argument	m_Camera . width
>5073	MemberAccess	m_Camera . width
>5074	Identifier	width
>5075	Identifier	m_Camera
>5076	Argument	0
>5077	PrimaryExpression	0
>5078	Argument	0
>5079	PrimaryExpression	0
>5080	Callee	qglScissor
>5081	Identifier	qglScissor
>5082	ExpressionStatement	 
>5083	CallExpression	qglViewport ( 0 , 0 , m_Camera . width , m_Camera . height )
>5084	ArgumentList	0
>5085	Argument	m_Camera . height
>5086	MemberAccess	m_Camera . height
>5087	Identifier	height
>5088	Identifier	m_Camera
>5089	Argument	m_Camera . width
>5090	MemberAccess	m_Camera . width
>5091	Identifier	width
>5092	Identifier	m_Camera
>5093	Argument	0
>5094	PrimaryExpression	0
>5095	Argument	0
>5096	PrimaryExpression	0
>5097	Callee	qglViewport
>5098	Identifier	qglViewport
>5099	ExpressionStatement	 
>5100	CallExpression	QE_CheckOpenGLForErrors ( )
>5101	ArgumentList	 
>5102	Callee	QE_CheckOpenGLForErrors
>5103	Identifier	QE_CheckOpenGLForErrors
>5104	IfStatement	if ( m_Camera . timing )
>5105	ExpressionStatement	 
>5106	AssignmentExpr	start = Sys_DoubleTime ( )
>5107	CallExpression	Sys_DoubleTime ( )
>5108	ArgumentList	 
>5109	Callee	Sys_DoubleTime
>5110	Identifier	Sys_DoubleTime
>5111	Identifier	start
>5112	Condition	 
>5113	MemberAccess	m_Camera . timing
>5114	Identifier	timing
>5115	Identifier	m_Camera
>5116	IfStatement	if ( ! active_brushes . next )
>5117	ReturnStatement	 
>5118	Condition	 
>5119	UnaryOp	! active_brushes . next
>5120	MemberAccess	active_brushes . next
>5121	Identifier	next
>5122	Identifier	active_brushes
>5123	UnaryOperator	!
>5124	IdentifierDeclStatement	 
>5125	IdentifierDecl	i
>5126	Identifier	i
>5127	IdentifierDeclType	int
>5128	IdentifierDeclStatement	 
>5129	IdentifierDecl	end
>5130	Identifier	end
>5131	IdentifierDeclType	double
>5132	IdentifierDecl	start
>5133	Identifier	start
>5134	IdentifierDeclType	double
>5135	IdentifierDeclStatement	 
>5136	IdentifierDecl	yfov
>5137	Identifier	yfov
>5138	IdentifierDeclType	float
>5139	IdentifierDeclStatement	 
>5140	IdentifierDecl	screenaspect
>5141	Identifier	screenaspect
>5142	IdentifierDeclType	float
>5143	IdentifierDeclStatement	 
>5144	IdentifierDecl	* face
>5145	Identifier	face
>5146	IdentifierDeclType	face_t *
>5147	IdentifierDeclStatement	 
>5148	IdentifierDecl	* brush
>5149	Identifier	brush
>5150	IdentifierDeclType	brush_t *
>5290	FunctionDef	CCamWnd 
>5291	ParameterList	UINT nType , int cx , int cy
>5292	Parameter	 
>5293	Identifier	cy
>5294	ParameterType	int
>5295	Parameter	 
>5296	Identifier	cx
>5297	ParameterType	int
>5298	Parameter	 
>5299	Identifier	nType
>5300	ParameterType	UINT
>5301	ReturnType	void
>5302	CompoundStatement	 
>5303	ExpressionStatement	 
>5304	CallExpression	InvalidateRect ( NULL , false )
>5305	ArgumentList	NULL
>5306	Argument	false
>5307	Identifier	false
>5308	Argument	NULL
>5309	Identifier	NULL
>5310	Callee	InvalidateRect
>5311	Identifier	InvalidateRect
>5312	ExpressionStatement	 
>5313	AssignmentExpr	m_Camera . height = rect . bottom
>5314	MemberAccess	rect . bottom
>5315	Identifier	bottom
>5316	Identifier	rect
>5317	MemberAccess	m_Camera . height
>5318	Identifier	height
>5319	Identifier	m_Camera
>5320	ExpressionStatement	 
>5321	AssignmentExpr	m_Camera . width = rect . right
>5322	MemberAccess	rect . right
>5323	Identifier	right
>5324	Identifier	rect
>5325	MemberAccess	m_Camera . width
>5326	Identifier	width
>5327	Identifier	m_Camera
>5328	ExpressionStatement	 
>5329	CallExpression	GetClientRect ( rect )
>5330	ArgumentList	rect
>5331	Argument	rect
>5332	Identifier	rect
>5333	Callee	GetClientRect
>5334	Identifier	GetClientRect
>5335	IdentifierDeclStatement	 
>5336	IdentifierDecl	rect
>5337	Identifier	rect
>5338	IdentifierDeclType	CRect
>5339	ExpressionStatement	 
>5340	CallExpression	CWnd 
>5341	ArgumentList	nType
>5342	Argument	cy
>5343	Identifier	cy
>5344	Argument	cx
>5345	Identifier	cx
>5346	Argument	nType
>5347	Identifier	nType
>5348	Callee	CWnd 
>5349	Identifier	CWnd 
>5364	FunctionDef	CCamWnd 
>5365	ParameterList	 
>5366	ReturnType	void
>5367	CompoundStatement	 
>5368	ExpressionStatement	 
>5369	CallExpression	MoveWindow ( rct , TRUE )
>5370	ArgumentList	rct
>5371	Argument	TRUE
>5372	Identifier	TRUE
>5373	Argument	rct
>5374	Identifier	rct
>5375	Callee	MoveWindow
>5376	Identifier	MoveWindow
>5377	ExpressionStatement	 
>5378	CallExpression	SetParent ( pParent )
>5379	ArgumentList	pParent
>5380	Argument	pParent
>5381	Identifier	pParent
>5382	Callee	SetParent
>5383	Identifier	SetParent
>5384	ExpressionStatement	 
>5385	CallExpression	SetWindowLong ( GetSafeHwnd ( ) , GWL_STYLE , lStyle )
>5386	ArgumentList	GetSafeHwnd ( )
>5387	Argument	lStyle
>5388	Identifier	lStyle
>5389	Argument	GWL_STYLE
>5390	Identifier	GWL_STYLE
>5391	Argument	GetSafeHwnd ( )
>5392	CallExpression	GetSafeHwnd ( )
>5393	ArgumentList	 
>5394	Callee	GetSafeHwnd
>5395	Identifier	GetSafeHwnd
>5396	Callee	SetWindowLong
>5397	Identifier	SetWindowLong
>5398	Statement	 
>5399	ExpressionStatement	 
>5400	CallExpression	Sys_Printf ( \"%5.2f seconds\n\" , dEnd - dStart )
>5401	ArgumentList	\"%5.2f seconds\n\"
>5402	Argument	dEnd - dStart
>5403	AdditiveExpression	dEnd - dStart
>5404	Identifier	dStart
>5405	Identifier	dEnd
>5406	Argument	\"%5.2f seconds\n\"
>5407	PrimaryExpression	\"%5.2f seconds\n\"
>5408	Callee	Sys_Printf
>5409	Identifier	Sys_Printf
>5410	ExpressionStatement	 
>5411	CallExpression	EndPaint ( & ps )
>5412	ArgumentList	& ps
>5413	Argument	& ps
>5414	UnaryOp	& ps
>5415	Identifier	ps
>5416	UnaryOperator	&
>5417	Callee	EndPaint
>5418	Identifier	EndPaint
>5419	IdentifierDeclStatement	 
>5420	IdentifierDecl	dEnd = Sys_DoubleTime ( )
>5421	AssignmentExpr	dEnd = Sys_DoubleTime ( )
>5422	CallExpression	Sys_DoubleTime ( )
>5423	ArgumentList	 
>5424	Callee	Sys_DoubleTime
>5425	Identifier	Sys_DoubleTime
>5426	Identifier	dEnd
>5427	Identifier	dEnd
>5428	IdentifierDeclType	double
>5429	ExpressionStatement	 
>5430	CallExpression	qglDrawBuffer ( GL_BACK )
>5431	ArgumentList	GL_BACK
>5432	Argument	GL_BACK
>5433	Identifier	GL_BACK
>5434	Callee	qglDrawBuffer
>5435	Identifier	qglDrawBuffer
>5436	ExpressionStatement	 
>5437	CallExpression	qwglSwapBuffers ( ps . hdc )
>5438	ArgumentList	ps . hdc
>5439	Argument	ps . hdc
>5440	MemberAccess	ps . hdc
>5441	Identifier	hdc
>5442	Identifier	ps
>5443	Callee	qwglSwapBuffers
>5444	Identifier	qwglSwapBuffers
>5445	ForStatement	for ( int i = 0 ; i < 100 ; i ++ )
>5446	CompoundStatement	 
>5447	ExpressionStatement	 
>5448	CallExpression	Cam_Draw ( )
>5449	ArgumentList	 
>5450	Callee	Cam_Draw
>5451	Identifier	Cam_Draw
>5452	ExpressionStatement	 
>5453	AssignmentExpr	m_Camera . angles [ YAW ] = i * 4
>5454	MultiplicativeExpression	i * 4
>5455	PrimaryExpression	4
>5456	Identifier	i
>5457	ArrayIndexing	m_Camera . angles [ YAW ]
>5458	Identifier	YAW
>5459	MemberAccess	m_Camera . angles
>5460	Identifier	angles
>5461	Identifier	m_Camera
>5462	IncDecOp	 
>5463	IncDec	++
>5464	Identifier	i
>5465	Condition	 
>5466	RelationalExpression	i < 100
>5467	PrimaryExpression	100
>5468	Identifier	i
>5469	ForInit	 
>5470	IdentifierDeclStatement	int i = 0 ;
>5471	IdentifierDecl	i = 0
>5472	AssignmentExpr	i = 0
>5473	PrimaryExpression	0
>5474	Identifier	i
>5475	Identifier	i
>5476	IdentifierDeclType	int
>5477	IdentifierDeclStatement	 
>5478	IdentifierDecl	dStart = Sys_DoubleTime ( )
>5479	AssignmentExpr	dStart = Sys_DoubleTime ( )
>5480	CallExpression	Sys_DoubleTime ( )
>5481	ArgumentList	 
>5482	Callee	Sys_DoubleTime
>5483	Identifier	Sys_DoubleTime
>5484	Identifier	dStart
>5485	Identifier	dStart
>5486	IdentifierDeclType	double
>5487	ExpressionStatement	 
>5488	CallExpression	qglDrawBuffer ( GL_FRONT )
>5489	ArgumentList	GL_FRONT
>5490	Argument	GL_FRONT
>5491	Identifier	GL_FRONT
>5492	Callee	qglDrawBuffer
>5493	Identifier	qglDrawBuffer
>5494	IfStatement	if ( ! qwglMakeCurrent ( ps . hdc , g_qeglobals . d_hglrcBase ) )
>5495	ExpressionStatement	 
>5496	CallExpression	Error ( \"wglMakeCurrent failed in Benchmark\" )
>5497	ArgumentList	\"wglMakeCurrent failed in Benchmark\"
>5498	Argument	\"wglMakeCurrent failed in Benchmark\"
>5499	PrimaryExpression	\"wglMakeCurrent failed in Benchmark\"
>5500	Callee	Error
>5501	Identifier	Error
>5502	Condition	 
>5503	UnaryOp	! qwglMakeCurrent ( ps . hdc , g_qeglobals . d_hglrcBase )
>5504	CallExpression	qwglMakeCurrent ( ps . hdc , g_qeglobals . d_hglrcBase )
>5505	ArgumentList	ps . hdc
>5506	Argument	g_qeglobals . d_hglrcBase
>5507	MemberAccess	g_qeglobals . d_hglrcBase
>5508	Identifier	d_hglrcBase
>5509	Identifier	g_qeglobals
>5510	Argument	ps . hdc
>5511	MemberAccess	ps . hdc
>5512	Identifier	hdc
>5513	Identifier	ps
>5514	Callee	qwglMakeCurrent
>5515	Identifier	qwglMakeCurrent
>5516	UnaryOperator	!
>5517	ExpressionStatement	 
>5518	CallExpression	BeginPaint ( & ps )
>5519	ArgumentList	& ps
>5520	Argument	& ps
>5521	UnaryOp	& ps
>5522	Identifier	ps
>5523	UnaryOperator	&
>5524	Callee	BeginPaint
>5525	Identifier	BeginPaint
>5526	ExpressionStatement	 
>5527	CallExpression	MoveWindow ( CRect ( 30 , 30 , 400 , 400 ) , TRUE )
>5528	ArgumentList	CRect ( 30 , 30 , 400 , 400 )
>5529	Argument	TRUE
>5530	Identifier	TRUE
>5531	Argument	CRect ( 30 , 30 , 400 , 400 )
>5532	CallExpression	CRect ( 30 , 30 , 400 , 400 )
>5533	ArgumentList	30
>5534	Argument	400
>5535	PrimaryExpression	400
>5536	Argument	400
>5537	PrimaryExpression	400
>5538	Argument	30
>5539	PrimaryExpression	30
>5540	Argument	30
>5541	PrimaryExpression	30
>5542	Callee	CRect
>5543	Identifier	CRect
>5544	Callee	MoveWindow
>5545	Identifier	MoveWindow
>5546	ExpressionStatement	 
>5547	CallExpression	SetParent ( g_pParentWnd )
>5548	ArgumentList	g_pParentWnd
>5549	Argument	g_pParentWnd
>5550	Identifier	g_pParentWnd
>5551	Callee	SetParent
>5552	Identifier	SetParent
>5553	IdentifierDeclStatement	 
>5554	IdentifierDecl	* pParent = GetParent ( )
>5555	AssignmentExpr	* pParent = GetParent ( )
>5556	CallExpression	GetParent ( )
>5557	ArgumentList	 
>5558	Callee	GetParent
>5559	Identifier	GetParent
>5560	Identifier	pParent
>5561	Identifier	pParent
>5562	IdentifierDeclType	CWnd *
>5563	ExpressionStatement	 
>5564	CallExpression	SetWindowLong ( GetSafeHwnd ( ) , GWL_STYLE , QE3_CHILDSTYLE )
>5565	ArgumentList	GetSafeHwnd ( )
>5566	Argument	QE3_CHILDSTYLE
>5567	Identifier	QE3_CHILDSTYLE
>5568	Argument	GWL_STYLE
>5569	Identifier	GWL_STYLE
>5570	Argument	GetSafeHwnd ( )
>5571	CallExpression	GetSafeHwnd ( )
>5572	ArgumentList	 
>5573	Callee	GetSafeHwnd
>5574	Identifier	GetSafeHwnd
>5575	Callee	SetWindowLong
>5576	Identifier	SetWindowLong
>5577	Statement	 
>5578	ExpressionStatement	 
>5579	CallExpression	GetWindowLong ( GetSafeHwnd ( ) , GWL_STYLE )
>5580	ArgumentList	GetSafeHwnd ( )
>5581	Argument	GWL_STYLE
>5582	Identifier	GWL_STYLE
>5583	Argument	GetSafeHwnd ( )
>5584	CallExpression	GetSafeHwnd ( )
>5585	ArgumentList	 
>5586	Callee	GetSafeHwnd
>5587	Identifier	GetSafeHwnd
>5588	Callee	GetWindowLong
>5589	Identifier	GetWindowLong
>5590	Statement	 
>5591	Statement	 
>5592	Statement	 
>5593	Statement	 
>5594	ExpressionStatement	 
>5595	CallExpression	GetWindowRect ( rct )
>5596	ArgumentList	rct
>5597	Argument	rct
>5598	Identifier	rct
>5599	Callee	GetWindowRect
>5600	Identifier	GetWindowRect
>5601	IdentifierDeclStatement	 
>5602	IdentifierDecl	rct
>5603	Identifier	rct
>5604	IdentifierDeclType	CRect
>5605	IdentifierDeclStatement	 
>5606	IdentifierDecl	ps
>5607	Identifier	ps
>5608	IdentifierDeclType	PAINTSTRUCT
>5640	FunctionDef	CCamWnd 
>5641	ParameterList	 
>5642	ReturnType	void
>5643	CompoundStatement	 
>5644	ExpressionStatement	 
>5645	CallExpression	Create ( CAMERA_WINDOW_CLASS , \"\" , lStyle , rctClient , pParent , nID )
>5646	ArgumentList	CAMERA_WINDOW_CLASS
>5647	Argument	nID
>5648	Identifier	nID
>5649	Argument	pParent
>5650	Identifier	pParent
>5651	Argument	rctClient
>5652	Identifier	rctClient
>5653	Argument	lStyle
>5654	Identifier	lStyle
>5655	Argument	\"\"
>5656	PrimaryExpression	\"\"
>5657	Argument	CAMERA_WINDOW_CLASS
>5658	Identifier	CAMERA_WINDOW_CLASS
>5659	Callee	Create
>5660	Identifier	Create
>5661	ExpressionStatement	 
>5662	CallExpression	DestroyWindow ( )
>5663	ArgumentList	 
>5664	Callee	DestroyWindow
>5665	Identifier	DestroyWindow
>5666	ExpressionStatement	 
>5667	CallExpression	GetClientRect ( rctClient )
>5668	ArgumentList	rctClient
>5669	Argument	rctClient
>5670	Identifier	rctClient
>5671	Callee	GetClientRect
>5672	Identifier	GetClientRect
>5673	IdentifierDeclStatement	 
>5674	IdentifierDecl	rctClient
>5675	Identifier	rctClient
>5676	IdentifierDeclType	CRect
>5677	IdentifierDeclStatement	 
>5678	IdentifierDecl	* pParent = GetParent ( )
>5679	AssignmentExpr	* pParent = GetParent ( )
>5680	CallExpression	GetParent ( )
>5681	ArgumentList	 
>5682	Callee	GetParent
>5683	Identifier	GetParent
>5684	Identifier	pParent
>5685	Identifier	pParent
>5686	IdentifierDeclType	CWnd *
>5687	ExpressionStatement	 
>5688	CallExpression	GetWindowLong ( GetSafeHwnd ( ) , GWL_ID )
>5689	ArgumentList	GetSafeHwnd ( )
>5690	Argument	GWL_ID
>5691	Identifier	GWL_ID
>5692	Argument	GetSafeHwnd ( )
>5693	CallExpression	GetSafeHwnd ( )
>5694	ArgumentList	 
>5695	Callee	GetSafeHwnd
>5696	Identifier	GetSafeHwnd
>5697	Callee	GetWindowLong
>5698	Identifier	GetWindowLong
>5699	Statement	 
>5700	Statement	 
>5701	Statement	 
>5702	Statement	 
>5703	ExpressionStatement	 
>5704	CallExpression	GetWindowLong ( GetSafeHwnd ( ) , GWL_STYLE )
>5705	ArgumentList	GetSafeHwnd ( )
>5706	Argument	GWL_STYLE
>5707	Identifier	GWL_STYLE
>5708	Argument	GetSafeHwnd ( )
>5709	CallExpression	GetSafeHwnd ( )
>5710	ArgumentList	 
>5711	Callee	GetSafeHwnd
>5712	Identifier	GetSafeHwnd
>5713	Callee	GetWindowLong
>5714	Identifier	GetWindowLong
>5715	Statement	 
>5716	Statement	 
>5717	Statement	 
>5718	Statement	 
>5719	ReturnStatement	 
>5720	IfStatement	if ( ! qwglMakeCurrent ( g_qeglobals . d_hdcBase , g_qeglobals . d_hglrcBase ) )
>5721	ExpressionStatement	 
>5722	CallExpression	Error ( \"wglMakeCurrent failed\" )
>5723	ArgumentList	\"wglMakeCurrent failed\"
>5724	Argument	\"wglMakeCurrent failed\"
>5725	PrimaryExpression	\"wglMakeCurrent failed\"
>5726	Callee	Error
>5727	Identifier	Error
>5728	Condition	 
>5729	UnaryOp	! qwglMakeCurrent ( g_qeglobals . d_hdcBase , g_qeglobals . d_hglrcBase )
>5730	CallExpression	qwglMakeCurrent ( g_qeglobals . d_hdcBase , g_qeglobals . d_hglrcBase )
>5731	ArgumentList	g_qeglobals . d_hdcBase
>5732	Argument	g_qeglobals . d_hglrcBase
>5733	MemberAccess	g_qeglobals . d_hglrcBase
>5734	Identifier	d_hglrcBase
>5735	Identifier	g_qeglobals
>5736	Argument	g_qeglobals . d_hdcBase
>5737	MemberAccess	g_qeglobals . d_hdcBase
>5738	Identifier	d_hdcBase
>5739	Identifier	g_qeglobals
>5740	Callee	qwglMakeCurrent
>5741	Identifier	qwglMakeCurrent
>5742	UnaryOperator	!
>5743	ExpressionStatement	 
>5744	CallExpression	QEW_SetupPixelFormat ( GetDC ( ) -> m_hDC , true )
>5745	ArgumentList	GetDC ( ) -> m_hDC
>5746	Argument	true
>5747	Identifier	true
>5748	Argument	GetDC ( ) -> m_hDC
>5749	PtrMemberAccess	GetDC ( ) -> m_hDC
>5750	Identifier	m_hDC
>5751	CallExpression	GetDC ( )
>5752	ArgumentList	 
>5753	Callee	GetDC
>5754	Identifier	GetDC
>5755	Callee	QEW_SetupPixelFormat
>5756	Identifier	QEW_SetupPixelFormat
>5757	ExpressionStatement	 
>5758	CallExpression	qwglMakeCurrent ( 0 , 0 )
>5759	ArgumentList	0
>5760	Argument	0
>5761	PrimaryExpression	0
>5762	Argument	0
>5763	PrimaryExpression	0
>5764	Callee	qwglMakeCurrent
>5765	Identifier	qwglMakeCurrent
>5786	FunctionDef	CCamWnd 
>5787	ParameterList	UINT nChar , UINT nRepCnt , UINT nFlags
>5788	Parameter	 
>5789	Identifier	nFlags
>5790	ParameterType	UINT
>5791	Parameter	 
>5792	Identifier	nRepCnt
>5793	ParameterType	UINT
>5794	Parameter	 
>5795	Identifier	nChar
>5796	ParameterType	UINT
>5797	ReturnType	void
>5798	CompoundStatement	 
>5799	ExpressionStatement	 
>5800	CallExpression	g_pParentWnd -> HandleKey ( nChar , nRepCnt , nFlags , false )
>5801	ArgumentList	nChar
>5802	Argument	false
>5803	Identifier	false
>5804	Argument	nFlags
>5805	Identifier	nFlags
>5806	Argument	nRepCnt
>5807	Identifier	nRepCnt
>5808	Argument	nChar
>5809	Identifier	nChar
>5810	Callee	g_pParentWnd -> HandleKey
>5811	PtrMemberAccess	g_pParentWnd -> HandleKey
>5812	Identifier	HandleKey
>5813	Identifier	g_pParentWnd
>5822	FunctionDef	CCamWnd 
>5823	ParameterList	face_t * f , int x , int y
>5824	Parameter	 
>5825	Identifier	y
>5826	ParameterType	int
>5827	Parameter	 
>5828	Identifier	x
>5829	ParameterType	int
>5830	Parameter	 
>5831	Identifier	f
>5832	ParameterType	face_t *
>5833	ReturnType	void
>5834	CompoundStatement	 
>5835	ExpressionStatement	 
>5836	CallExpression	Select_ShiftTexture_BrushPrimit ( f , outS , outT )
>5837	ArgumentList	f
>5838	Argument	outT
>5839	Identifier	outT
>5840	Argument	outS
>5841	Identifier	outS
>5842	Argument	f
>5843	Identifier	f
>5844	Callee	Select_ShiftTexture_BrushPrimit
>5845	Identifier	Select_ShiftTexture_BrushPrimit
>5846	ExpressionStatement	 
>5847	AssignmentExpr	outT = XT * x + YT * y
>5848	AdditiveExpression	XT * x + YT * y
>5849	MultiplicativeExpression	YT * y
>5850	Identifier	y
>5851	Identifier	YT
>5852	MultiplicativeExpression	XT * x
>5853	Identifier	x
>5854	Identifier	XT
>5855	Identifier	outT
>5856	ExpressionStatement	 
>5857	AssignmentExpr	outS = XS * x + YS * y
>5858	AdditiveExpression	XS * x + YS * y
>5859	MultiplicativeExpression	YS * y
>5860	Identifier	y
>5861	Identifier	YS
>5862	MultiplicativeExpression	XS * x
>5863	Identifier	x
>5864	Identifier	XS
>5865	Identifier	outS
>5866	IfStatement	if ( ( XS == YS ) && ( XT == YT ) )
>5867	CompoundStatement	 
>5868	ReturnStatement	 
>5869	ExpressionStatement	 
>5870	CallExpression	Select_ShiftTexture_BrushPrimit ( f , x , y )
>5871	ArgumentList	f
>5872	Argument	y
>5873	Identifier	y
>5874	Argument	x
>5875	Identifier	x
>5876	Argument	f
>5877	Identifier	f
>5878	Callee	Select_ShiftTexture_BrushPrimit
>5879	Identifier	Select_ShiftTexture_BrushPrimit
>5880	ExpressionStatement	 
>5881	CallExpression	Sys_Printf ( \"Warning 
>5882	ArgumentList	\"Warning 
>5883	Argument	\"Warning 
>5884	PrimaryExpression	\"Warning 
>5885	Callee	Sys_Printf
>5886	Identifier	Sys_Printf
>5887	Condition	 
>5888	AndExpression	( XS == YS ) && ( XT == YT )
>5889	EqualityExpression	XT == YT
>5890	Identifier	YT
>5891	Identifier	XT
>5892	EqualityExpression	XS == YS
>5893	Identifier	YS
>5894	Identifier	XS
>5895	ExpressionStatement	 
>5896	CallExpression	ComputeBest2DVector ( viewY , texS , texT , YS , YT )
>5897	ArgumentList	viewY
>5898	Argument	YT
>5899	Identifier	YT
>5900	Argument	YS
>5901	Identifier	YS
>5902	Argument	texT
>5903	Identifier	texT
>5904	Argument	texS
>5905	Identifier	texS
>5906	Argument	viewY
>5907	Identifier	viewY
>5908	Callee	ComputeBest2DVector
>5909	Identifier	ComputeBest2DVector
>5910	ExpressionStatement	 
>5911	CallExpression	ComputeBest2DVector ( viewX , texS , texT , XS , XT )
>5912	ArgumentList	viewX
>5913	Argument	XT
>5914	Identifier	XT
>5915	Argument	XS
>5916	Identifier	XS
>5917	Argument	texT
>5918	Identifier	texT
>5919	Argument	texS
>5920	Identifier	texS
>5921	Argument	viewX
>5922	Identifier	viewX
>5923	Callee	ComputeBest2DVector
>5924	Identifier	ComputeBest2DVector
>5925	ExpressionStatement	 
>5926	CallExpression	VectorCopy ( m_Camera . vright , viewX )
>5927	ArgumentList	m_Camera . vright
>5928	Argument	viewX
>5929	Identifier	viewX
>5930	Argument	m_Camera . vright
>5931	MemberAccess	m_Camera . vright
>5932	Identifier	vright
>5933	Identifier	m_Camera
>5934	Callee	VectorCopy
>5935	Identifier	VectorCopy
>5936	ExpressionStatement	 
>5937	CallExpression	VectorCopy ( m_Camera . vup , viewY )
>5938	ArgumentList	m_Camera . vup
>5939	Argument	viewY
>5940	Identifier	viewY
>5941	Argument	m_Camera . vup
>5942	MemberAccess	m_Camera . vup
>5943	Identifier	vup
>5944	Identifier	m_Camera
>5945	Callee	VectorCopy
>5946	Identifier	VectorCopy
>5947	ExpressionStatement	 
>5948	CallExpression	ComputeAxisBase ( f -> plane . normal , texS , texT )
>5949	ArgumentList	f -> plane . normal
>5950	Argument	texT
>5951	Identifier	texT
>5952	Argument	texS
>5953	Identifier	texS
>5954	Argument	f -> plane . normal
>5955	MemberAccess	f -> plane . normal
>5956	Identifier	normal
>5957	PtrMemberAccess	f -> plane
>5958	Identifier	plane
>5959	Identifier	f
>5960	Callee	ComputeAxisBase
>5961	Identifier	ComputeAxisBase
>5962	IfStatement	if ( ! g_qeglobals . m_bBrushPrimitMode )
>5963	CompoundStatement	 
>5964	ReturnStatement	 
>5965	ExpressionStatement	 
>5966	CallExpression	Sys_Printf ( \"Warning 
>5967	ArgumentList	\"Warning 
>5968	Argument	\"Warning 
>5969	PrimaryExpression	\"Warning 
>5970	Callee	Sys_Printf
>5971	Identifier	Sys_Printf
>5972	Condition	 
>5973	UnaryOp	! g_qeglobals . m_bBrushPrimitMode
>5974	MemberAccess	g_qeglobals . m_bBrushPrimitMode
>5975	Identifier	m_bBrushPrimitMode
>5976	Identifier	g_qeglobals
>5977	UnaryOperator	!
>5978	IdentifierDeclStatement	 
>5979	IdentifierDecl	outT
>5980	Identifier	outT
>5981	IdentifierDeclType	int
>5982	IdentifierDecl	outS
>5983	Identifier	outS
>5984	IdentifierDeclType	int
>5985	IdentifierDeclStatement	 
>5986	IdentifierDecl	YT
>5987	Identifier	YT
>5988	IdentifierDeclType	int
>5989	IdentifierDecl	YS
>5990	Identifier	YS
>5991	IdentifierDeclType	int
>5992	IdentifierDecl	XT
>5993	Identifier	XT
>5994	IdentifierDeclType	int
>5995	IdentifierDecl	XS
>5996	Identifier	XS
>5997	IdentifierDeclType	int
>5998	IdentifierDeclStatement	 
>5999	IdentifierDecl	viewY
>6000	Identifier	viewY
>6001	IdentifierDeclType	vec3_t
>6002	IdentifierDecl	viewX
>6003	Identifier	viewX
>6004	IdentifierDeclType	vec3_t
>6005	IdentifierDeclStatement	 
>6006	IdentifierDecl	texT
>6007	Identifier	texT
>6008	IdentifierDeclType	vec3_t
>6009	IdentifierDecl	texS
>6010	Identifier	texS
>6011	IdentifierDeclType	vec3_t
<11=13,12
<13=46,42,27,23,19,14
<14=15
<15=17,16
<17=18
<19=20
<20=22,21
<23=24
<24=26,25
<27=28
<28=40,29
<29=36,34,30
<30=31
<31=33,32
<34=35
<36=37
<37=39,38
<40=41
<42=43
<43=45,44
<46=47
<47=49,48
<60=62,61
<66=81,80,67
<67=77,74,71,68
<68=70,69
<71=73,72
<74=76,75
<77=79,78
<81=148,137,95,82
<82=83
<83=93,84
<84=91,89,87,85
<85=86
<87=88
<89=90
<91=92
<93=94
<95=135,96
<96=133,131,116,114,112,99,97
<97=98
<99=100
<100=110,101
<101=108,106,104,102
<102=103
<104=105
<106=107
<108=109
<110=111
<112=113
<114=115
<116=117
<117=129,118
<118=127,125,121,119
<119=120
<121=122
<122=124,123
<125=126
<127=128
<129=130
<131=132
<133=134
<135=136
<137=138
<138=146,139
<139=144,140
<140=141
<141=143,142
<144=145
<146=147
<148=149
<149=151,150
<165=171,170,166
<166=167
<167=169,168
<171=304,294,293,292,291,290,289,288,287,286,285,284,283,282,281,280,279,211,205,199,186,174,172
<172=173
<174=175
<175=185,184,176
<176=183,177
<177=181,178
<178=179
<179=180
<181=182
<186=193,187
<187=188
<188=190,189
<190=192,191
<193=194
<194=196,195
<196=198,197
<199=200
<200=202,201
<202=204,203
<205=206
<206=208,207
<208=210,209
<211=264,256,250,237,231,212
<212=220,213
<213=214
<214=218,215
<215=216
<216=217
<218=219
<220=221
<221=223,222
<223=229,224
<224=225
<225=226
<226=228,227
<229=230
<231=232
<232=234,233
<234=236,235
<237=238
<238=247,239
<239=245,240
<240=243,241
<241=242
<243=244
<245=246
<247=249,248
<250=251
<251=253,252
<253=255,254
<256=257
<257=261,258
<258=260,259
<261=263,262
<264=265
<265=277,266
<266=273,271,267
<267=268
<268=270,269
<271=272
<273=274
<274=276,275
<277=278
<294=295
<295=303,302,296
<296=301,297
<297=299,298
<299=300
<304=305
<305=307,306
<336=348,347,337
<337=344,341,338
<338=340,339
<341=343,342
<344=346,345
<348=349
<349=350
<350=358,351
<351=356,354,352
<352=353
<354=355
<356=357
<358=359
<359=361,360
<371=374,373,372
<374=493,486,375
<375=471,456,376
<376=377
<377=451,447,397,392,387,378
<378=379
<379=385,380
<380=381
<381=382
<382=384,383
<385=386
<387=388
<388=390,389
<390=391
<392=393
<393=395,394
<395=396
<397=445,398
<398=399
<399=431,400
<400=401
<401=402
<402=430,403
<403=410,407,404
<404=406,405
<407=409,408
<410=411
<411=416,413,412
<413=415,414
<416=417
<417=419,418
<419=421,420
<421=422
<422=424,423
<424=426,425
<426=427
<427=429,428
<431=432
<432=439,433
<433=435,434
<435=436
<436=438,437
<439=441,440
<441=442
<442=444,443
<445=446
<447=448
<448=450,449
<451=452
<452=454,453
<454=455
<456=464,457
<457=458
<458=462,459
<459=460
<460=461
<462=463
<464=465
<465=469,466
<466=467
<467=468
<469=470
<471=472
<472=485,473
<473=483,474
<474=479,475
<475=476
<476=478,477
<479=480
<480=482,481
<483=484
<486=487
<487=492,491,488
<488=490,489
<493=494
<494=497,496,495
<525=531,530,526
<526=527
<527=529,528
<531=532
<532=533
<533=535,534
<541=544,543,542
<544=550,545
<545=546
<546=548,547
<548=549
<550=551
<551=566,552
<552=561,557,553
<553=554
<554=556,555
<557=558
<558=560,559
<561=562
<562=564,563
<564=565
<566=567
<575=578,577,576
<578=579
<579=580
<580=582,581
<582=583
<593=602,601,594
<594=598,595
<595=597,596
<598=600,599
<602=752,745,607,603
<603=604
<604=606,605
<607=709,631,608
<608=609
<609=610
<610=611
<611=629,612
<612=625,615,613
<613=614
<615=616
<616=622,617
<617=621,618
<618=620,619
<622=624,623
<625=626
<626=628,627
<629=630
<631=632
<632=700,687,633
<633=634
<634=678,657,635
<635=636
<636=637
<637=655,638
<638=647,639
<639=640
<640=644,641
<641=643,642
<644=646,645
<647=648
<648=652,649
<649=651,650
<652=654,653
<655=656
<657=658
<658=676,659
<659=668,660
<660=661
<661=665,662
<662=664,663
<665=667,666
<668=669
<669=673,670
<670=672,671
<673=675,674
<676=677
<678=679
<679=681,680
<681=685,682
<682=683
<683=684
<685=686
<687=688
<688=698,689
<689=690
<690=691
<691=695,692
<692=694,693
<695=697,696
<698=699
<700=701
<701=703,702
<703=707,704
<704=705
<705=706
<707=708
<709=710
<710=739,711
<711=731,712
<712=730,713
<713=722,714
<714=716,715
<716=720,717
<717=718
<718=719
<720=721
<722=724,723
<724=728,725
<725=726
<726=727
<728=729
<731=733,732
<733=737,734
<734=735
<735=736
<737=738
<739=741,740
<741=743,742
<743=744
<745=746
<746=750,747
<747=748
<748=749
<750=751
<752=753
<753=755,754
<774=783,782,775
<775=779,776
<776=778,777
<779=781,780
<783=793,784
<784=785
<785=791,786
<786=789,787
<787=788
<789=790
<791=792
<793=794
<794=796,795
<803=812,811,804
<804=808,805
<805=807,806
<808=810,809
<812=813
<813=814
<814=820,815
<815=818,816
<816=817
<818=819
<820=821
<827=836,835,828
<828=832,829
<829=831,830
<832=834,833
<836=837
<837=838
<838=844,839
<839=842,840
<840=841
<842=843
<844=845
<851=860,859,852
<852=856,853
<853=855,854
<856=858,857
<860=861
<861=862
<862=868,863
<863=866,864
<864=865
<866=867
<868=869
<875=884,883,876
<876=880,877
<877=879,878
<880=882,881
<884=885
<885=886
<886=892,887
<887=890,888
<888=889
<890=891
<892=893
<899=908,907,900
<900=904,901
<901=903,902
<904=906,905
<908=909
<909=910
<910=916,911
<911=914,912
<912=913
<914=915
<916=917
<923=929,928,924
<924=925
<925=927,926
<929=1220,1209,1198,1175,1152,1151,1150,1149,1148,1115,1103,1102,1091,1070,1006,997,983,969,955,941,932,930
<930=931
<932=933
<933=938,934
<934=936,935
<936=937
<938=940,939
<941=942
<942=953,943
<943=951,944
<944=945
<945=949,946
<946=947
<947=948
<949=950
<951=952
<953=954
<955=956
<956=967,957
<957=965,958
<958=959
<959=963,960
<960=961
<961=962
<963=964
<965=966
<967=968
<969=970
<970=981,971
<971=979,972
<972=973
<973=977,974
<974=975
<975=976
<977=978
<979=980
<981=982
<983=984
<984=995,985
<985=993,986
<986=987
<987=991,988
<988=989
<989=990
<991=992
<993=994
<995=996
<997=998
<998=1004,999
<999=1000
<1000=1001
<1001=1003,1002
<1004=1005
<1006=1066,1036,1007
<1007=1008
<1008=1009
<1009=1017,1010
<1010=1011
<1011=1015,1012
<1012=1013
<1013=1014
<1015=1016
<1017=1018
<1018=1035,1019
<1019=1033,1020
<1020=1029,1027,1025,1021
<1021=1022
<1022=1024,1023
<1025=1026
<1027=1028
<1029=1030
<1030=1032,1031
<1033=1034
<1036=1037
<1037=1045,1038
<1038=1039
<1039=1043,1040
<1040=1041
<1041=1042
<1043=1044
<1045=1046
<1046=1065,1047
<1047=1063,1048
<1048=1059,1057,1055,1049
<1049=1050
<1050=1052,1051
<1052=1054,1053
<1055=1056
<1057=1058
<1059=1060
<1060=1062,1061
<1063=1064
<1066=1067
<1067=1069,1068
<1070=1078,1071
<1071=1072
<1072=1076,1073
<1073=1074
<1074=1075
<1076=1077
<1078=1079
<1079=1081,1080
<1081=1088,1082
<1082=1086,1083
<1083=1084
<1084=1085
<1086=1087
<1088=1090,1089
<1091=1092
<1092=1100,1093
<1093=1096,1094
<1094=1095
<1096=1097
<1097=1099,1098
<1100=1101
<1103=1111,1104
<1104=1105
<1105=1109,1106
<1106=1107
<1107=1108
<1109=1110
<1111=1112
<1112=1114,1113
<1115=1116
<1116=1146,1117
<1117=1144,1142,1140,1138,1136,1134,1132,1130,1128,1126,1124,1122,1120,1118
<1118=1119
<1120=1121
<1122=1123
<1124=1125
<1126=1127
<1128=1129
<1130=1131
<1132=1133
<1134=1135
<1136=1137
<1138=1139
<1140=1141
<1142=1143
<1144=1145
<1146=1147
<1152=1160,1153
<1153=1154
<1154=1158,1155
<1155=1156
<1156=1157
<1158=1159
<1160=1161
<1161=1174,1162
<1162=1172,1163
<1163=1168,1164
<1164=1165
<1165=1167,1166
<1168=1169
<1169=1171,1170
<1172=1173
<1175=1183,1176
<1176=1177
<1177=1181,1178
<1178=1179
<1179=1180
<1181=1182
<1183=1184
<1184=1186,1185
<1186=1195,1187
<1187=1193,1188
<1188=1189
<1189=1190
<1190=1192,1191
<1193=1194
<1195=1197,1196
<1198=1199
<1199=1207,1200
<1200=1203,1201
<1201=1202
<1203=1204
<1204=1206,1205
<1207=1208
<1209=1210
<1210=1217,1211
<1211=1213,1212
<1213=1215,1214
<1215=1216
<1217=1219,1218
<1220=1225,1221
<1221=1222
<1222=1224,1223
<1225=1226
<1226=1230,1227
<1227=1229,1228
<1230=1234,1231
<1231=1232
<1232=1233
<1234=1235
<1263=1272,1271,1264
<1264=1268,1265
<1265=1267,1266
<1268=1270,1269
<1272=1317,1310,1289,1273
<1273=1279,1274
<1274=1275
<1275=1277,1276
<1277=1278
<1279=1280
<1280=1288,1281
<1281=1287,1282
<1282=1286,1283
<1283=1285,1284
<1289=1290
<1290=1308,1291
<1291=1304,1294,1292
<1292=1293
<1294=1295
<1295=1301,1296
<1296=1300,1297
<1297=1299,1298
<1301=1303,1302
<1304=1305
<1305=1307,1306
<1308=1309
<1310=1311
<1311=1315,1312
<1312=1313
<1313=1314
<1315=1316
<1317=1318
<1318=1320,1319
<1333=1342,1341,1334
<1334=1338,1335
<1335=1337,1336
<1338=1340,1339
<1342=1381,1374,1369,1364,1343
<1343=1344
<1344=1362,1345
<1345=1358,1348,1346
<1346=1347
<1348=1349
<1349=1355,1350
<1350=1354,1351
<1351=1353,1352
<1355=1357,1356
<1358=1359
<1359=1361,1360
<1362=1363
<1364=1365
<1365=1367,1366
<1367=1368
<1369=1370
<1370=1372,1371
<1372=1373
<1374=1375
<1375=1379,1376
<1376=1377
<1377=1378
<1379=1380
<1381=1382
<1382=1384,1383
<1394=1397,1396,1395
<1397=1446,1438,1430,1422,1414,1406,1398
<1398=1399
<1399=1401,1400
<1401=1403,1402
<1403=1405,1404
<1406=1407
<1407=1409,1408
<1409=1411,1410
<1411=1413,1412
<1414=1415
<1415=1417,1416
<1417=1419,1418
<1419=1421,1420
<1422=1423
<1423=1425,1424
<1425=1427,1426
<1427=1429,1428
<1430=1431
<1431=1433,1432
<1433=1435,1434
<1435=1437,1436
<1438=1439
<1439=1441,1440
<1441=1443,1442
<1443=1445,1444
<1446=1447
<1447=1449,1448
<1449=1451,1450
<1463=1466,1465,1464
<1466=1645,1644,1638,1634,1622,1610,1597,1584,1572,1558,1543,1494,1485,1476,1467
<1467=1468
<1468=1474,1469
<1469=1470
<1470=1471
<1471=1473,1472
<1474=1475
<1476=1477
<1477=1483,1478
<1478=1479
<1479=1480
<1480=1482,1481
<1483=1484
<1485=1486
<1486=1492,1487
<1487=1488
<1488=1489
<1489=1491,1490
<1492=1493
<1494=1539,1535,1532,1495
<1495=1520,1508,1496
<1496=1497
<1497=1503,1498
<1498=1500,1499
<1500=1502,1501
<1503=1505,1504
<1505=1507,1506
<1508=1509
<1509=1515,1510
<1510=1512,1511
<1512=1514,1513
<1515=1517,1516
<1517=1519,1518
<1520=1521
<1521=1527,1522
<1522=1524,1523
<1524=1526,1525
<1527=1529,1528
<1529=1531,1530
<1532=1534,1533
<1535=1536
<1536=1538,1537
<1539=1540
<1540=1542,1541
<1543=1544
<1544=1556,1545
<1545=1554,1546
<1546=1547
<1547=1553,1548
<1548=1550,1549
<1550=1552,1551
<1554=1555
<1556=1557
<1558=1559
<1559=1567,1560
<1560=1566,1561
<1561=1563,1562
<1563=1565,1564
<1567=1569,1568
<1569=1571,1570
<1572=1573
<1573=1579,1574
<1574=1576,1575
<1576=1578,1577
<1579=1581,1580
<1581=1583,1582
<1584=1585
<1585=1592,1586
<1586=1590,1587
<1587=1588
<1588=1589
<1590=1591
<1592=1594,1593
<1594=1596,1595
<1597=1598
<1598=1605,1599
<1599=1603,1600
<1600=1601
<1601=1602
<1603=1604
<1605=1607,1606
<1607=1609,1608
<1610=1611
<1611=1621,1612
<1612=1616,1613
<1613=1615,1614
<1616=1618,1617
<1618=1620,1619
<1622=1623
<1623=1633,1624
<1624=1628,1625
<1625=1627,1626
<1628=1630,1629
<1630=1632,1631
<1634=1635
<1635=1637,1636
<1638=1639
<1639=1641,1640
<1641=1643,1642
<1645=1649,1646
<1646=1648,1647
<1649=1651,1650
<1682=1688,1687,1683
<1683=1684
<1684=1686,1685
<1688=1902,1892,1885,1875,1865,1859,1849,1841,1829,1817,1718,1708,1698,1689
<1689=1690
<1690=1696,1691
<1691=1692
<1692=1693
<1693=1695,1694
<1696=1697
<1698=1699
<1699=1703,1700
<1700=1702,1701
<1703=1705,1704
<1705=1707,1706
<1708=1710,1709
<1710=1711
<1711=1715,1712
<1712=1714,1713
<1715=1717,1716
<1718=1811,1805,1800,1719
<1719=1777,1752,1737,1720
<1720=1725,1721
<1721=1722
<1722=1724,1723
<1725=1726
<1726=1734,1727
<1727=1731,1728
<1728=1730,1729
<1731=1733,1732
<1734=1736,1735
<1737=1742,1738
<1738=1739
<1739=1741,1740
<1742=1743
<1743=1751,1744
<1744=1748,1745
<1745=1747,1746
<1748=1750,1749
<1752=1754,1753
<1754=1755
<1755=1772,1756
<1756=1771,1757
<1757=1769,1758
<1758=1767,1765,1763,1759
<1759=1760
<1760=1762,1761
<1763=1764
<1765=1766
<1767=1768
<1769=1770
<1772=1776,1773
<1773=1775,1774
<1777=1779,1778
<1779=1780
<1780=1797,1781
<1781=1796,1782
<1782=1794,1783
<1783=1792,1790,1788,1784
<1784=1785
<1785=1787,1786
<1788=1789
<1790=1791
<1792=1793
<1794=1795
<1797=1799,1798
<1800=1804,1801
<1801=1803,1802
<1805=1806
<1806=1810,1807
<1807=1809,1808
<1811=1812
<1812=1816,1813
<1813=1815,1814
<1817=1827,1823,1818
<1818=1819
<1819=1820
<1820=1822,1821
<1823=1824
<1824=1826,1825
<1827=1828
<1829=1830
<1830=1840,1831
<1831=1839,1832
<1832=1834,1833
<1834=1836,1835
<1836=1838,1837
<1841=1842
<1842=1846,1843
<1843=1845,1844
<1846=1848,1847
<1849=1850
<1850=1856,1851
<1851=1853,1852
<1853=1855,1854
<1856=1858,1857
<1859=1860
<1860=1862,1861
<1862=1864,1863
<1865=1866
<1866=1872,1867
<1867=1869,1868
<1869=1871,1870
<1872=1874,1873
<1875=1876
<1876=1882,1877
<1877=1879,1878
<1879=1881,1880
<1882=1884,1883
<1885=1889,1886
<1886=1888,1887
<1889=1891,1890
<1892=1899,1896,1893
<1893=1895,1894
<1896=1898,1897
<1899=1901,1900
<1902=1903
<1903=1905,1904
<1933=1936,1935,1934
<1936=2025,2012,1937
<1937=2000,1938
<1938=1994,1975,1969,1961,1948,1939
<1939=1940
<1940=1946,1941
<1941=1942
<1942=1943
<1943=1945,1944
<1946=1947
<1948=1949
<1949=1959,1950
<1950=1955,1951
<1951=1952
<1952=1954,1953
<1955=1956
<1956=1958,1957
<1959=1960
<1961=1962
<1962=1964,1963
<1964=1966,1965
<1966=1968,1967
<1969=1970
<1970=1974,1971
<1971=1973,1972
<1975=1976
<1976=1992,1977
<1977=1988,1986,1982,1978
<1978=1979
<1979=1981,1980
<1982=1983
<1983=1985,1984
<1986=1987
<1988=1989
<1989=1991,1990
<1992=1993
<1994=1995
<1995=1999,1996
<1996=1998,1997
<2000=2001
<2001=2007,2002
<2002=2006,2003
<2003=2005,2004
<2007=2011,2008
<2008=2010,2009
<2012=2013
<2013=2023,2014
<2014=2019,2015
<2015=2016
<2016=2018,2017
<2019=2020
<2020=2022,2021
<2023=2024
<2025=2029,2026
<2026=2028,2027
<2029=2031,2030
<2049=2055,2054,2050
<2050=2051
<2051=2053,2052
<2055=2363,2356,2349,2325,2305,2285,2277,2271,2263,2257,2137,2091,2076,2069,2056
<2056=2057
<2057=2065,2058
<2058=2063,2061,2059
<2059=2060
<2061=2062
<2063=2064
<2065=2066
<2066=2068,2067
<2069=2070
<2070=2074,2071
<2071=2072
<2072=2073
<2074=2075
<2076=2077
<2077=2090,2089,2078
<2078=2088,2079
<2079=2084,2081,2080
<2081=2083,2082
<2084=2085
<2085=2087,2086
<2091=2133,2092
<2092=2129,2128,2127,2126,2125,2124,2123,2122,2121,2120,2119,2118,2117,2116,2115,2114,2113,2112,2093
<2093=2103,2094
<2094=2095
<2095=2101,2096
<2096=2097
<2097=2098
<2098=2100,2099
<2101=2102
<2103=2104
<2104=2110,2105
<2105=2106
<2106=2107
<2107=2109,2108
<2110=2111
<2129=2130
<2130=2132,2131
<2133=2134
<2134=2136,2135
<2137=2245,2222,2138
<2138=2139
<2139=2211,2177,2154,2140
<2140=2141
<2141=2149,2142
<2142=2148,2143
<2143=2145,2144
<2145=2147,2146
<2149=2151,2150
<2151=2153,2152
<2154=2155
<2155=2175,2156
<2156=2171,2165,2161,2157
<2157=2158
<2158=2160,2159
<2161=2162
<2162=2164,2163
<2165=2166
<2166=2170,2167
<2167=2169,2168
<2171=2172
<2172=2174,2173
<2175=2176
<2177=2207,2193,2178
<2178=2179
<2179=2189,2180
<2180=2185,2181
<2181=2182
<2182=2184,2183
<2185=2186
<2186=2188,2187
<2189=2190
<2190=2192,2191
<2193=2203,2194
<2194=2199,2195
<2195=2196
<2196=2198,2197
<2199=2200
<2200=2202,2201
<2203=2204
<2204=2206,2205
<2207=2208
<2208=2210,2209
<2211=2212
<2212=2221,2213
<2213=2220,2214
<2214=2218,2215
<2215=2216
<2216=2217
<2218=2219
<2222=2223
<2223=2243,2224
<2224=2239,2233,2229,2225
<2225=2226
<2226=2228,2227
<2229=2230
<2230=2232,2231
<2233=2234
<2234=2238,2235
<2235=2237,2236
<2239=2240
<2240=2242,2241
<2243=2244
<2245=2246
<2246=2254,2247
<2247=2251,2248
<2248=2250,2249
<2251=2253,2252
<2254=2256,2255
<2257=2258
<2258=2262,2259
<2259=2261,2260
<2263=2264
<2264=2270,2265
<2265=2267,2266
<2267=2269,2268
<2271=2272
<2272=2276,2273
<2273=2275,2274
<2277=2278
<2278=2284,2279
<2279=2281,2280
<2281=2283,2282
<2285=2286
<2286=2304,2287
<2287=2293,2288
<2288=2290,2289
<2290=2292,2291
<2293=2303,2294
<2294=2300,2295
<2295=2297,2296
<2297=2299,2298
<2300=2302,2301
<2305=2306
<2306=2324,2307
<2307=2313,2308
<2308=2310,2309
<2310=2312,2311
<2313=2323,2314
<2314=2320,2315
<2315=2317,2316
<2317=2319,2318
<2320=2322,2321
<2325=2343,2334,2326
<2326=2327
<2327=2328
<2328=2330,2329
<2330=2331
<2331=2333,2332
<2334=2335
<2335=2337,2336
<2337=2338
<2338=2342,2339
<2339=2341,2340
<2343=2344
<2344=2346,2345
<2346=2348,2347
<2349=2353,2350
<2350=2352,2351
<2353=2355,2354
<2356=2360,2357
<2357=2359,2358
<2360=2362,2361
<2363=2367,2364
<2364=2366,2365
<2367=2369,2368
<2415=2427,2426,2416
<2416=2423,2420,2417
<2417=2419,2418
<2420=2422,2421
<2423=2425,2424
<2427=2688,2678,2674,2656,2638,2634,2594,2587,2578,2574,2568,2562,2547,2442,2428
<2428=2438,2429
<2429=2431,2430
<2431=2432
<2432=2436,2433
<2433=2434
<2434=2435
<2436=2437
<2438=2439
<2439=2441,2440
<2442=2499,2443
<2443=2445,2444
<2445=2487,2480,2446
<2446=2447
<2447=2473,2448
<2448=2449
<2449=2471,2450
<2450=2469,2467,2465,2461,2457,2453,2451
<2451=2452
<2453=2454
<2454=2456,2455
<2457=2458
<2458=2460,2459
<2461=2462
<2462=2464,2463
<2465=2466
<2467=2468
<2469=2470
<2471=2472
<2473=2474
<2474=2478,2475
<2475=2476
<2476=2477
<2478=2479
<2480=2481
<2481=2485,2482
<2482=2483
<2483=2484
<2485=2486
<2487=2488
<2488=2494,2489
<2489=2493,2490
<2490=2492,2491
<2494=2496,2495
<2496=2498,2497
<2499=2500
<2500=2544,2501
<2501=2539,2502
<2502=2534,2503
<2503=2527,2504
<2504=2524,2505
<2505=2519,2506
<2506=2514,2507
<2507=2513,2508
<2508=2512,2509
<2509=2511,2510
<2514=2518,2515
<2515=2517,2516
<2519=2523,2520
<2520=2522,2521
<2524=2526,2525
<2527=2533,2528
<2528=2532,2529
<2529=2531,2530
<2534=2538,2535
<2535=2537,2536
<2539=2543,2540
<2540=2542,2541
<2544=2546,2545
<2547=2548
<2548=2561,2560,2549
<2549=2559,2550
<2550=2553,2552,2551
<2553=2554
<2554=2556,2555
<2556=2558,2557
<2562=2563
<2563=2565,2564
<2565=2567,2566
<2568=2569
<2569=2571,2570
<2571=2573,2572
<2574=2575
<2575=2577,2576
<2578=2579
<2579=2585,2580
<2580=2581
<2581=2582
<2582=2584,2583
<2585=2586
<2587=2588
<2588=2592,2589
<2589=2590
<2590=2591
<2592=2593
<2594=2630,2626,2623,2595
<2595=2596
<2596=2620,2597
<2597=2613,2598
<2598=2606,2599
<2599=2601,2600
<2601=2603,2602
<2603=2605,2604
<2606=2608,2607
<2608=2610,2609
<2610=2612,2611
<2613=2615,2614
<2615=2617,2616
<2617=2619,2618
<2620=2622,2621
<2623=2625,2624
<2626=2627
<2627=2629,2628
<2630=2631
<2631=2633,2632
<2634=2635
<2635=2637,2636
<2638=2639
<2639=2655,2640
<2640=2646,2641
<2641=2643,2642
<2643=2645,2644
<2646=2654,2647
<2647=2653,2648
<2648=2650,2649
<2650=2652,2651
<2656=2657
<2657=2673,2658
<2658=2664,2659
<2659=2661,2660
<2661=2663,2662
<2664=2672,2665
<2665=2671,2666
<2666=2668,2667
<2668=2670,2669
<2674=2675
<2675=2677,2676
<2678=2685,2682,2679
<2679=2681,2680
<2682=2684,2683
<2685=2687,2686
<2688=2689
<2689=2691,2690
<2730=2742,2741,2731
<2731=2738,2735,2732
<2732=2734,2733
<2735=2737,2736
<2738=2740,2739
<2742=2750,2743
<2743=2744
<2744=2748,2745
<2745=2746
<2746=2747
<2748=2749
<2750=2751
<2751=2753,2752
<2761=2773,2772,2762
<2762=2769,2766,2763
<2763=2765,2764
<2766=2768,2767
<2769=2771,2770
<2773=3008,2850,2844,2838,2813,2804,2774
<2774=2798,2775
<2775=2787,2776
<2776=2777
<2777=2785,2778
<2778=2779
<2779=2780
<2780=2784,2781
<2781=2783,2782
<2785=2786
<2787=2788
<2788=2796,2789
<2789=2794,2792,2790
<2790=2791
<2792=2793
<2794=2795
<2796=2797
<2798=2799
<2799=2803,2800
<2800=2802,2801
<2804=2805
<2805=2811,2806
<2806=2807
<2807=2808
<2808=2810,2809
<2811=2812
<2813=2832,2814
<2814=2827,2816,2815
<2816=2817
<2817=2825,2818
<2818=2819
<2819=2820
<2820=2824,2821
<2821=2823,2822
<2825=2826
<2827=2828
<2828=2830,2829
<2830=2831
<2832=2833
<2833=2837,2834
<2834=2836,2835
<2838=2839
<2839=2841,2840
<2841=2843,2842
<2844=2845
<2845=2847,2846
<2847=2849,2848
<2850=3004,2851
<2851=2853,2852
<2853=2992,2854
<2854=2988,2978,2974,2956,2938,2934,2894,2887,2881,2875,2862,2855
<2855=2856
<2856=2860,2857
<2857=2858
<2858=2859
<2860=2861
<2862=2863
<2863=2873,2864
<2864=2869,2867,2865
<2865=2866
<2867=2868
<2869=2870
<2870=2872,2871
<2873=2874
<2875=2876
<2876=2878,2877
<2878=2880,2879
<2881=2882
<2882=2884,2883
<2884=2886,2885
<2887=2888
<2888=2892,2889
<2889=2890
<2890=2891
<2892=2893
<2894=2930,2926,2923,2895
<2895=2896
<2896=2920,2897
<2897=2913,2898
<2898=2906,2899
<2899=2901,2900
<2901=2903,2902
<2903=2905,2904
<2906=2908,2907
<2908=2910,2909
<2910=2912,2911
<2913=2915,2914
<2915=2917,2916
<2917=2919,2918
<2920=2922,2921
<2923=2925,2924
<2926=2927
<2927=2929,2928
<2930=2931
<2931=2933,2932
<2934=2935
<2935=2937,2936
<2938=2939
<2939=2955,2940
<2940=2946,2941
<2941=2943,2942
<2943=2945,2944
<2946=2954,2947
<2947=2953,2948
<2948=2950,2949
<2950=2952,2951
<2956=2957
<2957=2973,2958
<2958=2964,2959
<2959=2961,2960
<2961=2963,2962
<2964=2972,2965
<2965=2971,2966
<2966=2968,2967
<2968=2970,2969
<2974=2975
<2975=2977,2976
<2978=2985,2982,2979
<2979=2981,2980
<2982=2984,2983
<2985=2987,2986
<2988=2989
<2989=2991,2990
<2992=2993
<2993=2999,2994
<2994=2996,2995
<2996=2998,2997
<2999=3001,3000
<3001=3003,3002
<3004=3005
<3005=3007,3006
<3008=3009
<3009=3011,3010
<3052=3055,3054,3053
<3055=3143,3128,3113,3056
<3056=3109,3105,3102,3057
<3057=3080,3058
<3058=3074,3066,3059
<3059=3060
<3060=3061
<3061=3063,3062
<3063=3065,3064
<3066=3067
<3067=3071,3068
<3068=3070,3069
<3071=3073,3072
<3074=3075
<3075=3077,3076
<3077=3079,3078
<3080=3096,3088,3081
<3081=3082
<3082=3083
<3083=3085,3084
<3085=3087,3086
<3088=3089
<3089=3093,3090
<3090=3092,3091
<3093=3095,3094
<3096=3097
<3097=3099,3098
<3099=3101,3100
<3102=3104,3103
<3105=3106
<3106=3108,3107
<3109=3110
<3110=3112,3111
<3113=3114
<3114=3126,3115
<3115=3122,3118,3116
<3116=3117
<3118=3119
<3119=3121,3120
<3122=3123
<3123=3125,3124
<3126=3127
<3128=3129
<3129=3141,3130
<3130=3137,3133,3131
<3131=3132
<3133=3134
<3134=3136,3135
<3137=3138
<3138=3140,3139
<3141=3142
<3143=3144
<3144=3146,3145
<3163=3169,3168,3164
<3164=3165
<3165=3167,3166
<3169=3439,3435,3431,3272,3242,3231,3222,3192,3181,3172,3170
<3170=3171
<3172=3175,3173
<3173=3174
<3175=3176
<3176=3180,3177
<3177=3179,3178
<3181=3182
<3182=3191,3183
<3183=3189,3184
<3184=3187,3185
<3185=3186
<3187=3188
<3189=3190
<3192=3218,3214,3211,3193
<3193=3194
<3194=3208,3195
<3195=3201,3196
<3196=3198,3197
<3198=3200,3199
<3201=3205,3202
<3202=3204,3203
<3205=3207,3206
<3208=3210,3209
<3211=3213,3212
<3214=3215
<3215=3217,3216
<3218=3219
<3219=3221,3220
<3222=3225,3223
<3223=3224
<3225=3226
<3226=3230,3227
<3227=3229,3228
<3231=3232
<3232=3241,3233
<3233=3239,3234
<3234=3237,3235
<3235=3236
<3237=3238
<3239=3240
<3242=3268,3264,3261,3243
<3243=3244
<3244=3258,3245
<3245=3251,3246
<3246=3248,3247
<3248=3250,3249
<3251=3255,3252
<3252=3254,3253
<3255=3257,3256
<3258=3260,3259
<3261=3263,3262
<3264=3265
<3265=3267,3266
<3268=3269
<3269=3271,3270
<3272=3427,3273
<3273=3416,3404,3392,3380,3345,3333,3321,3309,3274
<3274=3305,3301,3298,3275
<3275=3278,3276
<3276=3277
<3278=3279
<3279=3289,3280
<3280=3284,3281
<3281=3283,3282
<3284=3286,3285
<3286=3288,3287
<3289=3293,3290
<3290=3292,3291
<3293=3295,3294
<3295=3297,3296
<3298=3300,3299
<3301=3302
<3302=3304,3303
<3305=3306
<3306=3308,3307
<3309=3310
<3310=3318,3311
<3311=3313,3312
<3313=3315,3314
<3315=3317,3316
<3318=3320,3319
<3321=3322
<3322=3330,3323
<3323=3325,3324
<3325=3327,3326
<3327=3329,3328
<3330=3332,3331
<3333=3334
<3334=3342,3335
<3335=3337,3336
<3337=3339,3338
<3339=3341,3340
<3342=3344,3343
<3345=3376,3372,3369,3346
<3346=3349,3347
<3347=3348
<3349=3350
<3350=3360,3351
<3351=3355,3352
<3352=3354,3353
<3355=3357,3356
<3357=3359,3358
<3360=3364,3361
<3361=3363,3362
<3364=3366,3365
<3366=3368,3367
<3369=3371,3370
<3372=3373
<3373=3375,3374
<3376=3377
<3377=3379,3378
<3380=3381
<3381=3389,3382
<3382=3384,3383
<3384=3386,3385
<3386=3388,3387
<3389=3391,3390
<3392=3393
<3393=3401,3394
<3394=3396,3395
<3396=3398,3397
<3398=3400,3399
<3401=3403,3402
<3404=3405
<3405=3413,3406
<3406=3408,3407
<3408=3410,3409
<3410=3412,3411
<3413=3415,3414
<3416=3417
<3417=3426,3425,3418
<3418=3424,3419
<3419=3421,3420
<3421=3423,3422
<3427=3428
<3428=3430,3429
<3431=3432
<3432=3434,3433
<3435=3436
<3436=3438,3437
<3439=3440
<3440=3442,3441
<3478=3484,3483,3479
<3479=3480
<3480=3482,3481
<3484=3553,3485
<3485=3549,3486
<3486=3542,3535,3526,3517,3510,3503,3496,3487
<3487=3488
<3488=3494,3489
<3489=3492,3490
<3490=3491
<3492=3493
<3494=3495
<3496=3497
<3497=3501,3498
<3498=3499
<3499=3500
<3501=3502
<3503=3504
<3504=3508,3505
<3505=3506
<3506=3507
<3508=3509
<3510=3511
<3511=3515,3512
<3512=3513
<3513=3514
<3515=3516
<3517=3518
<3518=3524,3519
<3519=3522,3520
<3520=3521
<3522=3523
<3524=3525
<3526=3527
<3527=3533,3528
<3528=3531,3529
<3529=3530
<3531=3532
<3533=3534
<3535=3536
<3536=3540,3537
<3537=3538
<3538=3539
<3540=3541
<3542=3543
<3543=3547,3544
<3544=3545
<3545=3546
<3547=3548
<3549=3550
<3550=3552,3551
<3553=3554
<3554=3564,3563,3555
<3555=3562,3556
<3556=3560,3557
<3557=3558
<3558=3559
<3560=3561
<3578=3581,3580,3579
<3581=5147,5143,5139,5135,5128,5124,5116,5104,5099,5082,5065,5028,5019,5015,4964,4957,4952,4940,3582,3610,3615,3620,3686,3695,3706,3711,3718,3745,3768,3969,4033,4044,4053,4060,4067,4115,4127,4187,4194,4203,4212,4219,4232,4239,4246,4270,4285,4292,4315,4328,4335,4356,4365,4372,4385,4471,4475,4482,4790,4801,4806,4811,4840,4859,4876,4889,4904,4917
<3582=3606,3583
<3583=3599,3584
<3584=3585
<3585=3597,3586
<3586=3595,3587
<3587=3588
<3588=3594,3589
<3589=3593,3590
<3590=3592,3591
<3595=3596
<3597=3598
<3599=3600
<3600=3605,3601
<3601=3603,3602
<3603=3604
<3606=3607
<3607=3609,3608
<3610=3611
<3611=3613,3612
<3613=3614
<3615=3616
<3616=3618,3617
<3618=3619
<3620=3680,3621
<3621=3673,3664,3651,3642,3629,3622
<3622=3623
<3623=3627,3624
<3624=3625
<3625=3626
<3627=3628
<3629=3630
<3630=3640,3631
<3631=3636,3632
<3632=3633
<3633=3635,3634
<3636=3637
<3637=3639,3638
<3640=3641
<3642=3643
<3643=3649,3644
<3644=3647,3645
<3645=3646
<3647=3648
<3649=3650
<3651=3652
<3652=3662,3653
<3653=3660,3658,3656,3654
<3654=3655
<3656=3657
<3658=3659
<3660=3661
<3662=3663
<3664=3665
<3665=3671,3666
<3666=3669,3667
<3667=3668
<3669=3670
<3671=3672
<3673=3674
<3674=3678,3675
<3675=3676
<3676=3677
<3678=3679
<3680=3681
<3681=3683,3682
<3683=3685,3684
<3686=3687
<3687=3693,3688
<3688=3691,3689
<3689=3690
<3691=3692
<3693=3694
<3695=3702,3696
<3696=3697
<3697=3698
<3698=3700,3699
<3700=3701
<3702=3703
<3703=3705,3704
<3706=3707
<3707=3709,3708
<3709=3710
<3711=3712
<3712=3716,3713
<3713=3714
<3714=3715
<3716=3717
<3718=3729,3719
<3719=3720
<3720=3721
<3721=3723,3722
<3723=3724
<3724=3726,3725
<3726=3728,3727
<3729=3730
<3730=3742,3731
<3731=3737,3732
<3732=3734,3733
<3734=3736,3735
<3737=3739,3738
<3739=3741,3740
<3742=3744,3743
<3745=3746
<3746=3764,3747
<3747=3748
<3748=3749
<3749=3763,3750
<3750=3762,3751
<3751=3757,3752
<3752=3754,3753
<3754=3756,3755
<3757=3759,3758
<3759=3761,3760
<3764=3765
<3765=3767,3766
<3768=3963,3900,3769
<3769=3770
<3770=3894,3771
<3771=3887,3880,3869,3862,3784,3779,3772
<3772=3773
<3773=3777,3774
<3774=3775
<3775=3776
<3777=3778
<3779=3780
<3780=3782,3781
<3782=3783
<3784=3858,3852,3849,3785
<3785=3835,3821,3786
<3786=3787
<3787=3819,3788
<3788=3809,3799,3789
<3789=3790
<3790=3792,3791
<3792=3796,3793
<3793=3795,3794
<3796=3798,3797
<3799=3800
<3800=3802,3801
<3802=3806,3803
<3803=3805,3804
<3806=3808,3807
<3809=3810
<3810=3812,3811
<3812=3816,3813
<3813=3815,3814
<3816=3818,3817
<3819=3820
<3821=3822
<3822=3834,3823
<3823=3831,3824
<3824=3826,3825
<3826=3828,3827
<3828=3830,3829
<3831=3833,3832
<3835=3836
<3836=3848,3837
<3837=3845,3838
<3838=3840,3839
<3840=3842,3841
<3842=3844,3843
<3845=3847,3846
<3849=3851,3850
<3852=3853
<3853=3857,3854
<3854=3856,3855
<3858=3859
<3859=3861,3860
<3862=3863
<3863=3867,3864
<3864=3865
<3865=3866
<3867=3868
<3869=3870
<3870=3878,3871
<3871=3876,3874,3872
<3872=3873
<3874=3875
<3876=3877
<3878=3879
<3880=3881
<3881=3885,3882
<3882=3883
<3883=3884
<3885=3886
<3887=3891,3888
<3888=3890,3889
<3891=3893,3892
<3894=3895
<3895=3897,3896
<3897=3899,3898
<3900=3956,3945,3938,3913,3908,3901
<3901=3902
<3902=3906,3903
<3903=3904
<3904=3905
<3906=3907
<3908=3909
<3909=3911,3910
<3911=3912
<3913=3934,3928,3925,3914
<3914=3915
<3915=3923,3916
<3916=3917
<3917=3918
<3918=3920,3919
<3920=3922,3921
<3923=3924
<3925=3927,3926
<3928=3929
<3929=3933,3930
<3930=3932,3931
<3934=3935
<3935=3937,3936
<3938=3939
<3939=3943,3940
<3940=3941
<3941=3942
<3943=3944
<3945=3946
<3946=3954,3947
<3947=3952,3950,3948
<3948=3949
<3950=3951
<3952=3953
<3954=3955
<3956=3957
<3957=3961,3958
<3958=3959
<3959=3960
<3961=3962
<3963=3964
<3964=3966,3965
<3966=3968,3967
<3969=4027,4023,4018,3970
<3970=3992,3971
<3971=3986,3984,3979,3972
<3972=3973
<3973=3977,3974
<3974=3975
<3975=3976
<3977=3978
<3979=3983,3980
<3980=3982,3981
<3984=3985
<3986=3987
<3987=3991,3988
<3988=3990,3989
<3992=3994,3993
<3994=3995
<3995=4015,3996
<3996=4006,3997
<3997=4003,3998
<3998=4000,3999
<4000=4002,4001
<4003=4005,4004
<4006=4012,4007
<4007=4009,4008
<4009=4011,4010
<4012=4014,4013
<4015=4017,4016
<4018=4022,4019
<4019=4021,4020
<4023=4024
<4024=4026,4025
<4027=4028
<4028=4032,4029
<4029=4031,4030
<4033=4034
<4034=4042,4035
<4035=4040,4038,4036
<4036=4037
<4038=4039
<4040=4041
<4042=4043
<4044=4045
<4045=4051,4046
<4046=4049,4047
<4047=4048
<4049=4050
<4051=4052
<4053=4054
<4054=4058,4055
<4055=4056
<4056=4057
<4058=4059
<4060=4061
<4061=4065,4062
<4062=4063
<4063=4064
<4065=4066
<4067=4111,4068
<4068=4069
<4069=4103,4099,4096,4070
<4070=4095,4094,4093,4092,4091,4090,4089,4088,4087,4078,4071
<4071=4072
<4072=4076,4073
<4073=4074
<4074=4075
<4076=4077
<4078=4079
<4079=4083,4080
<4080=4081
<4081=4082
<4083=4084
<4084=4086,4085
<4096=4098,4097
<4099=4100
<4100=4102,4101
<4103=4104
<4104=4105
<4105=4110,4109,4106
<4106=4108,4107
<4111=4112
<4112=4114,4113
<4115=4116
<4116=4126,4125,4117
<4117=4124,4118
<4118=4120,4119
<4120=4121
<4121=4123,4122
<4127=4181,4177,4172,4128
<4128=4150,4129
<4129=4144,4142,4137,4130
<4130=4131
<4131=4135,4132
<4132=4133
<4133=4134
<4135=4136
<4137=4141,4138
<4138=4140,4139
<4142=4143
<4144=4145
<4145=4149,4146
<4146=4148,4147
<4150=4152,4151
<4152=4153
<4153=4163,4154
<4154=4160,4155
<4155=4157,4156
<4157=4159,4158
<4160=4162,4161
<4163=4169,4164
<4164=4166,4165
<4166=4168,4167
<4169=4171,4170
<4172=4176,4173
<4173=4175,4174
<4177=4178
<4178=4180,4179
<4181=4182
<4182=4186,4183
<4183=4185,4184
<4187=4188
<4188=4192,4189
<4189=4190
<4190=4191
<4192=4193
<4194=4195
<4195=4201,4196
<4196=4199,4197
<4197=4198
<4199=4200
<4201=4202
<4203=4204
<4204=4210,4205
<4205=4208,4206
<4206=4207
<4208=4209
<4210=4211
<4212=4213
<4213=4217,4214
<4214=4215
<4215=4216
<4217=4218
<4219=4220
<4220=4230,4221
<4221=4228,4226,4224,4222
<4222=4223
<4224=4225
<4226=4227
<4228=4229
<4230=4231
<4232=4233
<4233=4237,4234
<4234=4235
<4235=4236
<4237=4238
<4239=4240
<4240=4244,4241
<4241=4242
<4242=4243
<4244=4245
<4246=4264,4260,4255,4247
<4247=4248
<4248=4249
<4249=4253,4250
<4250=4251
<4251=4252
<4253=4254
<4255=4259,4256
<4256=4258,4257
<4260=4261
<4261=4263,4262
<4264=4265
<4265=4269,4266
<4266=4268,4267
<4270=4271
<4271=4284,4283,4272
<4272=4282,4273
<4273=4278,4277,4274
<4274=4276,4275
<4278=4279
<4279=4281,4280
<4285=4286
<4286=4290,4287
<4287=4288
<4288=4289
<4290=4291
<4292=4293
<4293=4313,4294
<4294=4307,4301,4295
<4295=4296
<4296=4298,4297
<4298=4300,4299
<4301=4302
<4302=4304,4303
<4304=4306,4305
<4307=4308
<4308=4310,4309
<4310=4312,4311
<4313=4314
<4315=4324,4316
<4316=4317
<4317=4318
<4318=4322,4319
<4319=4320
<4320=4321
<4322=4323
<4324=4325
<4325=4327,4326
<4328=4329
<4329=4333,4330
<4330=4331
<4331=4332
<4333=4334
<4335=4352,4348,4345,4336
<4336=4337
<4337=4343,4338
<4338=4339
<4339=4340
<4340=4342,4341
<4343=4344
<4345=4347,4346
<4348=4349
<4349=4351,4350
<4352=4353
<4353=4355,4354
<4356=4357
<4357=4363,4358
<4358=4361,4359
<4359=4360
<4361=4362
<4363=4364
<4365=4366
<4366=4370,4367
<4367=4368
<4368=4369
<4370=4371
<4372=4381,4373
<4373=4374
<4374=4375
<4375=4379,4376
<4376=4377
<4377=4378
<4379=4380
<4381=4382
<4382=4384,4383
<4385=4465,4459,4454,4386
<4386=4445,4436,4387
<4387=4406,4397,4388
<4388=4389
<4389=4390
<4390=4391
<4391=4395,4392
<4392=4393
<4393=4394
<4395=4396
<4397=4398
<4398=4399
<4399=4401,4400
<4401=4405,4402
<4402=4404,4403
<4406=4407
<4407=4425,4408
<4408=4418,4409
<4409=4411,4410
<4411=4413,4412
<4413=4415,4414
<4415=4417,4416
<4418=4420,4419
<4420=4422,4421
<4422=4424,4423
<4425=4429,4426
<4426=4428,4427
<4429=4431,4430
<4431=4433,4432
<4433=4435,4434
<4436=4438,4437
<4438=4439
<4439=4443,4440
<4440=4441
<4441=4442
<4443=4444
<4445=4447,4446
<4447=4448
<4448=4452,4449
<4449=4450
<4450=4451
<4452=4453
<4454=4458,4455
<4455=4457,4456
<4459=4460
<4460=4464,4461
<4461=4463,4462
<4465=4466
<4466=4470,4467
<4467=4469,4468
<4471=4472
<4472=4474,4473
<4475=4476
<4476=4480,4477
<4477=4478
<4478=4479
<4480=4481
<4482=4786,4483
<4483=4784,4775,4768,4761,4754,4747,4736,4735,4733,4726,4719,4712,4703,4696,4689,4682,4675,4674,4672,4665,4658,4651,4642,4635,4624,4613,4602,4595,4588,4581,4580,4578,4571,4564,4557,4548,4541,4530,4519,4508,4501,4494,4485,4484
<4485=4486
<4486=4492,4487
<4487=4490,4488
<4488=4489
<4490=4491
<4492=4493
<4494=4495
<4495=4499,4496
<4496=4497
<4497=4498
<4499=4500
<4501=4502
<4502=4506,4503
<4503=4504
<4504=4505
<4506=4507
<4508=4509
<4509=4517,4510
<4510=4515,4513,4511
<4511=4512
<4513=4514
<4515=4516
<4517=4518
<4519=4520
<4520=4528,4521
<4521=4526,4524,4522
<4522=4523
<4524=4525
<4526=4527
<4528=4529
<4530=4531
<4531=4539,4532
<4532=4537,4535,4533
<4533=4534
<4535=4536
<4537=4538
<4539=4540
<4541=4542
<4542=4546,4543
<4543=4544
<4544=4545
<4546=4547
<4548=4549
<4549=4555,4550
<4550=4553,4551
<4551=4552
<4553=4554
<4555=4556
<4557=4558
<4558=4562,4559
<4559=4560
<4560=4561
<4562=4563
<4564=4565
<4565=4569,4566
<4566=4567
<4567=4568
<4569=4570
<4571=4572
<4572=4576,4573
<4573=4574
<4574=4575
<4576=4577
<4578=4579
<4581=4582
<4582=4586,4583
<4583=4584
<4584=4585
<4586=4587
<4588=4589
<4589=4593,4590
<4590=4591
<4591=4592
<4593=4594
<4595=4596
<4596=4600,4597
<4597=4598
<4598=4599
<4600=4601
<4602=4603
<4603=4611,4604
<4604=4609,4607,4605
<4605=4606
<4607=4608
<4609=4610
<4611=4612
<4613=4614
<4614=4622,4615
<4615=4620,4618,4616
<4616=4617
<4618=4619
<4620=4621
<4622=4623
<4624=4625
<4625=4633,4626
<4626=4631,4629,4627
<4627=4628
<4629=4630
<4631=4632
<4633=4634
<4635=4636
<4636=4640,4637
<4637=4638
<4638=4639
<4640=4641
<4642=4643
<4643=4649,4644
<4644=4647,4645
<4645=4646
<4647=4648
<4649=4650
<4651=4652
<4652=4656,4653
<4653=4654
<4654=4655
<4656=4657
<4658=4659
<4659=4663,4660
<4660=4661
<4661=4662
<4663=4664
<4665=4666
<4666=4670,4667
<4667=4668
<4668=4669
<4670=4671
<4672=4673
<4675=4676
<4676=4680,4677
<4677=4678
<4678=4679
<4680=4681
<4682=4683
<4683=4687,4684
<4684=4685
<4685=4686
<4687=4688
<4689=4690
<4690=4694,4691
<4691=4692
<4692=4693
<4694=4695
<4696=4697
<4697=4701,4698
<4698=4699
<4699=4700
<4701=4702
<4703=4704
<4704=4710,4705
<4705=4708,4706
<4706=4707
<4708=4709
<4710=4711
<4712=4713
<4713=4717,4714
<4714=4715
<4715=4716
<4717=4718
<4719=4720
<4720=4724,4721
<4721=4722
<4722=4723
<4724=4725
<4726=4727
<4727=4731,4728
<4728=4729
<4729=4730
<4731=4732
<4733=4734
<4736=4737
<4737=4745,4738
<4738=4743,4741,4739
<4739=4740
<4741=4742
<4743=4744
<4745=4746
<4747=4748
<4748=4752,4749
<4749=4750
<4750=4751
<4752=4753
<4754=4755
<4755=4759,4756
<4756=4757
<4757=4758
<4759=4760
<4761=4762
<4762=4766,4763
<4763=4764
<4764=4765
<4766=4767
<4768=4769
<4769=4773,4770
<4770=4771
<4771=4772
<4773=4774
<4775=4776
<4776=4782,4777
<4777=4780,4778
<4778=4779
<4780=4781
<4782=4783
<4784=4785
<4786=4787
<4787=4789,4788
<4790=4791
<4791=4800,4799,4792
<4792=4798,4793
<4793=4797,4796,4795,4794
<4801=4802
<4802=4804,4803
<4804=4805
<4806=4807
<4807=4809,4808
<4809=4810
<4811=4812
<4812=4838,4813
<4813=4830,4822,4814
<4814=4815
<4815=4821,4816
<4816=4818,4817
<4818=4820,4819
<4822=4823
<4823=4829,4824
<4824=4826,4825
<4826=4828,4827
<4830=4831
<4831=4837,4832
<4832=4834,4833
<4834=4836,4835
<4838=4839
<4840=4841
<4841=4857,4842
<4842=4849,4847,4845,4843
<4843=4844
<4845=4846
<4847=4848
<4849=4850
<4850=4856,4851
<4851=4853,4852
<4853=4855,4854
<4857=4858
<4859=4860
<4860=4874,4861
<4861=4868,4866,4864,4862
<4862=4863
<4864=4865
<4866=4867
<4868=4869
<4869=4871,4870
<4871=4873,4872
<4874=4875
<4876=4877
<4877=4887,4878
<4878=4885,4883,4881,4879
<4879=4880
<4881=4882
<4883=4884
<4885=4886
<4887=4888
<4889=4890
<4890=4902,4891
<4891=4898,4896,4894,4892
<4892=4893
<4894=4895
<4896=4897
<4898=4899
<4899=4901,4900
<4902=4903
<4904=4905
<4905=4915,4906
<4906=4913,4911,4909,4907
<4907=4908
<4909=4910
<4911=4912
<4913=4914
<4915=4916
<4917=4918
<4918=4939,4919
<4919=4938,4920
<4920=4924,4921
<4921=4923,4922
<4924=4936,4925
<4925=4926
<4926=4927
<4927=4931,4928
<4928=4930,4929
<4931=4935,4932
<4932=4934,4933
<4936=4937
<4940=4941
<4941=4951,4942
<4942=4946,4943
<4943=4945,4944
<4946=4950,4947
<4947=4949,4948
<4952=4953
<4953=4955,4954
<4955=4956
<4957=4958
<4958=4962,4959
<4959=4960
<4960=4961
<4962=4963
<4964=5011,4974,4965
<4965=4966
<4966=4967
<4967=4968
<4968=4972,4969
<4969=4970
<4970=4971
<4972=4973
<4974=5004,4990,4984,4975
<4975=4976
<4976=4982,4977
<4977=4980,4978
<4978=4979
<4980=4981
<4982=4983
<4984=4985
<4985=4987,4986
<4987=4989,4988
<4990=4991
<4991=5001,4992
<4992=4998,4993
<4993=4995,4994
<4995=4997,4996
<4998=5000,4999
<5001=5003,5002
<5004=5005
<5005=5009,5006
<5006=5007
<5007=5008
<5009=5010
<5011=5012
<5012=5014,5013
<5015=5016
<5016=5018,5017
<5019=5020
<5020=5026,5021
<5021=5022
<5022=5023
<5023=5025,5024
<5026=5027
<5028=5029
<5029=5063,5030
<5030=5053,5043,5033,5031
<5031=5032
<5033=5034
<5034=5036,5035
<5036=5038,5037
<5038=5040,5039
<5040=5042,5041
<5043=5044
<5044=5046,5045
<5046=5048,5047
<5048=5050,5049
<5050=5052,5051
<5053=5054
<5054=5056,5055
<5056=5058,5057
<5058=5060,5059
<5060=5062,5061
<5063=5064
<5065=5066
<5066=5080,5067
<5067=5078,5076,5072,5068
<5068=5069
<5069=5071,5070
<5072=5073
<5073=5075,5074
<5076=5077
<5078=5079
<5080=5081
<5082=5083
<5083=5097,5084
<5084=5095,5093,5089,5085
<5085=5086
<5086=5088,5087
<5089=5090
<5090=5092,5091
<5093=5094
<5095=5096
<5097=5098
<5099=5100
<5100=5102,5101
<5102=5103
<5104=5112,5105
<5105=5106
<5106=5111,5107
<5107=5109,5108
<5109=5110
<5112=5113
<5113=5115,5114
<5116=5118,5117
<5118=5119
<5119=5123,5120
<5120=5122,5121
<5124=5125
<5125=5127,5126
<5128=5132,5129
<5129=5131,5130
<5132=5134,5133
<5135=5136
<5136=5138,5137
<5139=5140
<5140=5142,5141
<5143=5144
<5144=5146,5145
<5147=5148
<5148=5150,5149
<5290=5302,5301,5291
<5291=5298,5295,5292
<5292=5294,5293
<5295=5297,5296
<5298=5300,5299
<5302=5339,5335,5328,5320,5312,5303
<5303=5304
<5304=5310,5305
<5305=5308,5306
<5306=5307
<5308=5309
<5310=5311
<5312=5313
<5313=5317,5314
<5314=5316,5315
<5317=5319,5318
<5320=5321
<5321=5325,5322
<5322=5324,5323
<5325=5327,5326
<5328=5329
<5329=5333,5330
<5330=5331
<5331=5332
<5333=5334
<5335=5336
<5336=5338,5337
<5339=5340
<5340=5348,5341
<5341=5346,5344,5342
<5342=5343
<5344=5345
<5346=5347
<5348=5349
<5364=5367,5366,5365
<5367=5605,5601,5594,5593,5592,5591,5590,5578,5577,5563,5553,5546,5526,5517,5494,5487,5477,5445,5436,5429,5419,5410,5399,5398,5384,5377,5368
<5368=5369
<5369=5375,5370
<5370=5373,5371
<5371=5372
<5373=5374
<5375=5376
<5377=5378
<5378=5382,5379
<5379=5380
<5380=5381
<5382=5383
<5384=5385
<5385=5396,5386
<5386=5391,5389,5387
<5387=5388
<5389=5390
<5391=5392
<5392=5394,5393
<5394=5395
<5396=5397
<5399=5400
<5400=5408,5401
<5401=5406,5402
<5402=5403
<5403=5405,5404
<5406=5407
<5408=5409
<5410=5411
<5411=5417,5412
<5412=5413
<5413=5414
<5414=5416,5415
<5417=5418
<5419=5420
<5420=5428,5427,5421
<5421=5426,5422
<5422=5424,5423
<5424=5425
<5429=5430
<5430=5434,5431
<5431=5432
<5432=5433
<5434=5435
<5436=5437
<5437=5443,5438
<5438=5439
<5439=5440
<5440=5442,5441
<5443=5444
<5445=5469,5465,5462,5446
<5446=5452,5447
<5447=5448
<5448=5450,5449
<5450=5451
<5452=5453
<5453=5457,5454
<5454=5456,5455
<5457=5459,5458
<5459=5461,5460
<5462=5464,5463
<5465=5466
<5466=5468,5467
<5469=5470
<5470=5471
<5471=5476,5475,5472
<5472=5474,5473
<5477=5478
<5478=5486,5485,5479
<5479=5484,5480
<5480=5482,5481
<5482=5483
<5487=5488
<5488=5492,5489
<5489=5490
<5490=5491
<5492=5493
<5494=5502,5495
<5495=5496
<5496=5500,5497
<5497=5498
<5498=5499
<5500=5501
<5502=5503
<5503=5516,5504
<5504=5514,5505
<5505=5510,5506
<5506=5507
<5507=5509,5508
<5510=5511
<5511=5513,5512
<5514=5515
<5517=5518
<5518=5524,5519
<5519=5520
<5520=5521
<5521=5523,5522
<5524=5525
<5526=5527
<5527=5544,5528
<5528=5531,5529
<5529=5530
<5531=5532
<5532=5542,5533
<5533=5540,5538,5536,5534
<5534=5535
<5536=5537
<5538=5539
<5540=5541
<5542=5543
<5544=5545
<5546=5547
<5547=5551,5548
<5548=5549
<5549=5550
<5551=5552
<5553=5554
<5554=5562,5561,5555
<5555=5560,5556
<5556=5558,5557
<5558=5559
<5563=5564
<5564=5575,5565
<5565=5570,5568,5566
<5566=5567
<5568=5569
<5570=5571
<5571=5573,5572
<5573=5574
<5575=5576
<5578=5579
<5579=5588,5580
<5580=5583,5581
<5581=5582
<5583=5584
<5584=5586,5585
<5586=5587
<5588=5589
<5594=5595
<5595=5599,5596
<5596=5597
<5597=5598
<5599=5600
<5601=5602
<5602=5604,5603
<5605=5606
<5606=5608,5607
<5640=5643,5642,5641
<5643=5757,5743,5720,5719,5718,5717,5716,5715,5703,5702,5701,5700,5699,5687,5677,5673,5666,5661,5644
<5644=5645
<5645=5659,5646
<5646=5657,5655,5653,5651,5649,5647
<5647=5648
<5649=5650
<5651=5652
<5653=5654
<5655=5656
<5657=5658
<5659=5660
<5661=5662
<5662=5664,5663
<5664=5665
<5666=5667
<5667=5671,5668
<5668=5669
<5669=5670
<5671=5672
<5673=5674
<5674=5676,5675
<5677=5678
<5678=5686,5685,5679
<5679=5684,5680
<5680=5682,5681
<5682=5683
<5687=5688
<5688=5697,5689
<5689=5692,5690
<5690=5691
<5692=5693
<5693=5695,5694
<5695=5696
<5697=5698
<5703=5704
<5704=5713,5705
<5705=5708,5706
<5706=5707
<5708=5709
<5709=5711,5710
<5711=5712
<5713=5714
<5720=5728,5721
<5721=5722
<5722=5726,5723
<5723=5724
<5724=5725
<5726=5727
<5728=5729
<5729=5742,5730
<5730=5740,5731
<5731=5736,5732
<5732=5733
<5733=5735,5734
<5736=5737
<5737=5739,5738
<5740=5741
<5743=5744
<5744=5755,5745
<5745=5748,5746
<5746=5747
<5748=5749
<5749=5751,5750
<5751=5753,5752
<5753=5754
<5755=5756
<5757=5758
<5758=5764,5759
<5759=5762,5760
<5760=5761
<5762=5763
<5764=5765
<5786=5798,5797,5787
<5787=5794,5791,5788
<5788=5790,5789
<5791=5793,5792
<5794=5796,5795
<5798=5799
<5799=5800
<5800=5810,5801
<5801=5808,5806,5804,5802
<5802=5803
<5804=5805
<5806=5807
<5808=5809
<5810=5811
<5811=5813,5812
<5822=5834,5833,5823
<5823=5830,5827,5824
<5824=5826,5825
<5827=5829,5828
<5830=5832,5831
<5834=6005,5998,5985,5978,5962,5947,5936,5925,5910,5895,5866,5856,5846,5835
<5835=5836
<5836=5844,5837
<5837=5842,5840,5838
<5838=5839
<5840=5841
<5842=5843
<5844=5845
<5846=5847
<5847=5855,5848
<5848=5852,5849
<5849=5851,5850
<5852=5854,5853
<5856=5857
<5857=5865,5858
<5858=5862,5859
<5859=5861,5860
<5862=5864,5863
<5866=5887,5867
<5867=5880,5869,5868
<5869=5870
<5870=5878,5871
<5871=5876,5874,5872
<5872=5873
<5874=5875
<5876=5877
<5878=5879
<5880=5881
<5881=5885,5882
<5882=5883
<5883=5884
<5885=5886
<5887=5888
<5888=5892,5889
<5889=5891,5890
<5892=5894,5893
<5895=5896
<5896=5908,5897
<5897=5906,5904,5902,5900,5898
<5898=5899
<5900=5901
<5902=5903
<5904=5905
<5906=5907
<5908=5909
<5910=5911
<5911=5923,5912
<5912=5921,5919,5917,5915,5913
<5913=5914
<5915=5916
<5917=5918
<5919=5920
<5921=5922
<5923=5924
<5925=5926
<5926=5934,5927
<5927=5930,5928
<5928=5929
<5930=5931
<5931=5933,5932
<5934=5935
<5936=5937
<5937=5945,5938
<5938=5941,5939
<5939=5940
<5941=5942
<5942=5944,5943
<5945=5946
<5947=5948
<5948=5960,5949
<5949=5954,5952,5950
<5950=5951
<5952=5953
<5954=5955
<5955=5957,5956
<5957=5959,5958
<5960=5961
<5962=5972,5963
<5963=5965,5964
<5965=5966
<5966=5970,5967
<5967=5968
<5968=5969
<5970=5971
<5972=5973
<5973=5977,5974
<5974=5976,5975
<5978=5982,5979
<5979=5981,5980
<5982=5984,5983
<5985=5995,5992,5989,5986
<5986=5988,5987
<5989=5991,5990
<5992=5994,5993
<5995=5997,5996
<5998=6002,5999
<5999=6001,6000
<6002=6004,6003
<6005=6009,6006
<6006=6008,6007
<6009=6011,6010
