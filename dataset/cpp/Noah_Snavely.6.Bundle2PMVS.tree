>10	FunctionDef	ReadListFile (const char * list_file , std 
>11	ParameterList	const char * list_file , std 
>12	Parameter	 
>13	Identifier	files
>14	ParameterType	std 
>15	Parameter	 
>16	Identifier	list_file
>17	ParameterType	const char *
>18	ReturnType	void
>19	CompoundStatement	 
>20	ExpressionStatement	 
>21	CallExpression	fclose ( f )
>22	ArgumentList	f
>23	Argument	f
>24	Identifier	f
>25	Callee	fclose
>26	Identifier	fclose
>27	WhileStatement	while ( fgets ( buf , 256 , f ) )
>28	CompoundStatement	 
>29	ExpressionStatement	 
>30	CallExpression	files . push_back ( std 
>31	ArgumentList	std 
>32	Argument	std 
>33	CallExpression	std 
>34	ArgumentList	buf
>35	Argument	buf
>36	Identifier	buf
>37	Callee	std 
>38	Identifier	std 
>39	Callee	files . push_back
>40	MemberAccess	files . push_back
>41	Identifier	push_back
>42	Identifier	files
>43	IfStatement	if ( space )
>44	ExpressionStatement	 
>45	AssignmentExpr	* space = 0
>46	PrimaryExpression	0
>47	UnaryOp	* space
>48	Identifier	space
>49	UnaryOperator	*
>50	Condition	 
>51	Identifier	space
>52	IdentifierDeclStatement	 
>53	IdentifierDecl	* space = strchr ( buf , ' ' )
>54	AssignmentExpr	* space = strchr ( buf , ' ' )
>55	CallExpression	strchr ( buf , ' ' )
>56	ArgumentList	buf
>57	Argument	' '
>58	PrimaryExpression	' '
>59	Argument	buf
>60	Identifier	buf
>61	Callee	strchr
>62	Identifier	strchr
>63	Identifier	space
>64	Identifier	space
>65	IdentifierDeclType	char *
>66	IfStatement	if ( buf [ strlen ( buf ) - 1 ] == '\n' )
>67	ExpressionStatement	 
>68	AssignmentExpr	buf [ strlen ( buf ) - 1 ] = 0
>69	PrimaryExpression	0
>70	ArrayIndexing	buf [ strlen ( buf ) - 1 ]
>71	AdditiveExpression	strlen ( buf ) - 1
>72	PrimaryExpression	1
>73	CallExpression	strlen ( buf )
>74	ArgumentList	buf
>75	Argument	buf
>76	Identifier	buf
>77	Callee	strlen
>78	Identifier	strlen
>79	Identifier	buf
>80	Condition	 
>81	EqualityExpression	buf [ strlen ( buf ) - 1 ] == '\n'
>82	PrimaryExpression	'\n'
>83	ArrayIndexing	buf [ strlen ( buf ) - 1 ]
>84	AdditiveExpression	strlen ( buf ) - 1
>85	PrimaryExpression	1
>86	CallExpression	strlen ( buf )
>87	ArgumentList	buf
>88	Argument	buf
>89	Identifier	buf
>90	Callee	strlen
>91	Identifier	strlen
>92	Identifier	buf
>93	Condition	 
>94	CallExpression	fgets ( buf , 256 , f )
>95	ArgumentList	buf
>96	Argument	f
>97	Identifier	f
>98	Argument	256
>99	PrimaryExpression	256
>100	Argument	buf
>101	Identifier	buf
>102	Callee	fgets
>103	Identifier	fgets
>104	IdentifierDeclStatement	 
>105	IdentifierDecl	buf [ 256 ]
>106	PrimaryExpression	256
>107	Identifier	buf
>108	IdentifierDeclType	char [ 256 ]
>109	IdentifierDeclStatement	 
>110	IdentifierDecl	* f = fopen ( list_file , \"r\" )
>111	AssignmentExpr	* f = fopen ( list_file , \"r\" )
>112	CallExpression	fopen ( list_file , \"r\" )
>113	ArgumentList	list_file
>114	Argument	\"r\"
>115	PrimaryExpression	\"r\"
>116	Argument	list_file
>117	Identifier	list_file
>118	Callee	fopen
>119	Identifier	fopen
>120	Identifier	f
>121	Identifier	f
>122	IdentifierDeclType	FILE *
>139	FunctionDef	ReadBundleFile (const char * bundle_file , std 
>140	ParameterList	const char * bundle_file , std 
>141	Parameter	 
>142	Identifier	bundle_version
>143	ParameterType	double &
>144	Parameter	 
>145	Identifier	points
>146	ParameterType	std 
>147	Parameter	 
>148	Identifier	cameras
>149	ParameterType	std 
>150	Parameter	 
>151	Identifier	bundle_file
>152	ParameterType	const char *
>153	ReturnType	void
>154	CompoundStatement	 
>155	ExpressionStatement	 
>156	CallExpression	fclose ( f )
>157	ArgumentList	f
>158	Argument	f
>159	Identifier	f
>160	Callee	fclose
>161	Identifier	fclose
>162	ForStatement	for ( int i = 0 ; i < num_points ; i ++ )
>163	CompoundStatement	 
>164	IfStatement	if ( num_visible > 0 )
>165	CompoundStatement	 
>166	ExpressionStatement	 
>167	CallExpression	points . push_back ( pt )
>168	ArgumentList	pt
>169	Argument	pt
>170	Identifier	pt
>171	Callee	points . push_back
>172	MemberAccess	points . push_back
>173	Identifier	push_back
>174	Identifier	points
>175	Condition	 
>176	RelationalExpression	num_visible > 0
>177	PrimaryExpression	0
>178	Identifier	num_visible
>179	ForStatement	for ( int j = 0 ; j < num_visible ; j ++ )
>180	CompoundStatement	 
>181	IfStatement	if ( bundle_version >= 0.3 )
>182	ExpressionStatement	 
>183	CallExpression	fscanf ( f , \"%lf %lf\" , & x , & y )
>184	ArgumentList	f
>185	Argument	& y
>186	UnaryOp	& y
>187	Identifier	y
>188	UnaryOperator	&
>189	Argument	& x
>190	UnaryOp	& x
>191	Identifier	x
>192	UnaryOperator	&
>193	Argument	\"%lf %lf\"
>194	PrimaryExpression	\"%lf %lf\"
>195	Argument	f
>196	Identifier	f
>197	Callee	fscanf
>198	Identifier	fscanf
>199	Condition	 
>200	RelationalExpression	bundle_version >= 0.3
>201	PrimaryExpression	0.3
>202	Identifier	bundle_version
>203	IdentifierDeclStatement	 
>204	IdentifierDecl	y
>205	Identifier	y
>206	IdentifierDeclType	double
>207	IdentifierDecl	x
>208	Identifier	x
>209	IdentifierDeclType	double
>210	ExpressionStatement	 
>211	CallExpression	fscanf ( f , \"%d %d\" , & view , & key )
>212	ArgumentList	f
>213	Argument	& key
>214	UnaryOp	& key
>215	Identifier	key
>216	UnaryOperator	&
>217	Argument	& view
>218	UnaryOp	& view
>219	Identifier	view
>220	UnaryOperator	&
>221	Argument	\"%d %d\"
>222	PrimaryExpression	\"%d %d\"
>223	Argument	f
>224	Identifier	f
>225	Callee	fscanf
>226	Identifier	fscanf
>227	IdentifierDeclStatement	 
>228	IdentifierDecl	key
>229	Identifier	key
>230	IdentifierDeclType	int
>231	IdentifierDecl	view
>232	Identifier	view
>233	IdentifierDeclType	int
>234	IncDecOp	 
>235	IncDec	++
>236	Identifier	j
>237	Condition	 
>238	RelationalExpression	j < num_visible
>239	Identifier	num_visible
>240	Identifier	j
>241	ForInit	 
>242	IdentifierDeclStatement	int j = 0 ;
>243	IdentifierDecl	j = 0
>244	AssignmentExpr	j = 0
>245	PrimaryExpression	0
>246	Identifier	j
>247	Identifier	j
>248	IdentifierDeclType	int
>249	ExpressionStatement	 
>250	CallExpression	fscanf ( f , \"%d\" , & num_visible )
>251	ArgumentList	f
>252	Argument	& num_visible
>253	UnaryOp	& num_visible
>254	Identifier	num_visible
>255	UnaryOperator	&
>256	Argument	\"%d\"
>257	PrimaryExpression	\"%d\"
>258	Argument	f
>259	Identifier	f
>260	Callee	fscanf
>261	Identifier	fscanf
>262	IdentifierDeclStatement	 
>263	IdentifierDecl	num_visible
>264	Identifier	num_visible
>265	IdentifierDeclType	int
>266	ExpressionStatement	 
>267	CallExpression	fscanf ( f , \"%lf %lf %lf\n\" , pt . color + 0 , pt . color + 1 , pt . color + 2 )
>268	ArgumentList	f
>269	Argument	pt . color + 2
>270	AdditiveExpression	pt . color + 2
>271	PrimaryExpression	2
>272	MemberAccess	pt . color
>273	Identifier	color
>274	Identifier	pt
>275	Argument	pt . color + 1
>276	AdditiveExpression	pt . color + 1
>277	PrimaryExpression	1
>278	MemberAccess	pt . color
>279	Identifier	color
>280	Identifier	pt
>281	Argument	pt . color + 0
>282	AdditiveExpression	pt . color + 0
>283	PrimaryExpression	0
>284	MemberAccess	pt . color
>285	Identifier	color
>286	Identifier	pt
>287	Argument	\"%lf %lf %lf\n\"
>288	PrimaryExpression	\"%lf %lf %lf\n\"
>289	Argument	f
>290	Identifier	f
>291	Callee	fscanf
>292	Identifier	fscanf
>293	ExpressionStatement	 
>294	CallExpression	fscanf ( f , \"%lf %lf %lf\n\" , pt . pos + 0 , pt . pos + 1 , pt . pos + 2 )
>295	ArgumentList	f
>296	Argument	pt . pos + 2
>297	AdditiveExpression	pt . pos + 2
>298	PrimaryExpression	2
>299	MemberAccess	pt . pos
>300	Identifier	pos
>301	Identifier	pt
>302	Argument	pt . pos + 1
>303	AdditiveExpression	pt . pos + 1
>304	PrimaryExpression	1
>305	MemberAccess	pt . pos
>306	Identifier	pos
>307	Identifier	pt
>308	Argument	pt . pos + 0
>309	AdditiveExpression	pt . pos + 0
>310	PrimaryExpression	0
>311	MemberAccess	pt . pos
>312	Identifier	pos
>313	Identifier	pt
>314	Argument	\"%lf %lf %lf\n\"
>315	PrimaryExpression	\"%lf %lf %lf\n\"
>316	Argument	f
>317	Identifier	f
>318	Callee	fscanf
>319	Identifier	fscanf
>320	IdentifierDeclStatement	 
>321	IdentifierDecl	pt
>322	Identifier	pt
>323	IdentifierDeclType	point_t
>324	IncDecOp	 
>325	IncDec	++
>326	Identifier	i
>327	Condition	 
>328	RelationalExpression	i < num_points
>329	Identifier	num_points
>330	Identifier	i
>331	ForInit	 
>332	IdentifierDeclStatement	int i = 0 ;
>333	IdentifierDecl	i = 0
>334	AssignmentExpr	i = 0
>335	PrimaryExpression	0
>336	Identifier	i
>337	Identifier	i
>338	IdentifierDeclType	int
>339	ForStatement	for ( int i = 0 ; i < num_images ; i ++ )
>340	CompoundStatement	 
>341	ExpressionStatement	 
>342	CallExpression	cameras . push_back ( cam )
>343	ArgumentList	cam
>344	Argument	cam
>345	Identifier	cam
>346	Callee	cameras . push_back
>347	MemberAccess	cameras . push_back
>348	Identifier	push_back
>349	Identifier	cameras
>350	ExpressionStatement	 
>351	CallExpression	memcpy ( cam . t , t , sizeof ( double ) * 3 )
>352	ArgumentList	cam . t
>353	Argument	sizeof ( double ) * 3
>354	MultiplicativeExpression	sizeof ( double ) * 3
>355	PrimaryExpression	3
>356	SizeofExpr	sizeof ( double )
>357	SizeofOperand	double
>358	Sizeof	sizeof
>359	Argument	t
>360	Identifier	t
>361	Argument	cam . t
>362	MemberAccess	cam . t
>363	Identifier	t
>364	Identifier	cam
>365	Callee	memcpy
>366	Identifier	memcpy
>367	ExpressionStatement	 
>368	CallExpression	memcpy ( cam . R , R , sizeof ( double ) * 9 )
>369	ArgumentList	cam . R
>370	Argument	sizeof ( double ) * 9
>371	MultiplicativeExpression	sizeof ( double ) * 9
>372	PrimaryExpression	9
>373	SizeofExpr	sizeof ( double )
>374	SizeofOperand	double
>375	Sizeof	sizeof
>376	Argument	R
>377	Identifier	R
>378	Argument	cam . R
>379	MemberAccess	cam . R
>380	Identifier	R
>381	Identifier	cam
>382	Callee	memcpy
>383	Identifier	memcpy
>384	ExpressionStatement	 
>385	AssignmentExpr	cam . f = focal_length
>386	Identifier	focal_length
>387	MemberAccess	cam . f
>388	Identifier	f
>389	Identifier	cam
>390	IdentifierDeclStatement	 
>391	IdentifierDecl	cam
>392	Identifier	cam
>393	IdentifierDeclType	camera_params_t
>394	ExpressionStatement	 
>395	CallExpression	fscanf ( f , \"%lf %lf %lf\n\" , t + 0 , t + 1 , t + 2 )
>396	ArgumentList	f
>397	Argument	t + 2
>398	AdditiveExpression	t + 2
>399	PrimaryExpression	2
>400	Identifier	t
>401	Argument	t + 1
>402	AdditiveExpression	t + 1
>403	PrimaryExpression	1
>404	Identifier	t
>405	Argument	t + 0
>406	AdditiveExpression	t + 0
>407	PrimaryExpression	0
>408	Identifier	t
>409	Argument	\"%lf %lf %lf\n\"
>410	PrimaryExpression	\"%lf %lf %lf\n\"
>411	Argument	f
>412	Identifier	f
>413	Callee	fscanf
>414	Identifier	fscanf
>415	ExpressionStatement	 
>416	CallExpression	fscanf ( f , \"%lf %lf %lf\n%lf %lf %lf\n%lf %lf %lf\n\" , R + 0 , R + 1 , R + 2 , R + 3 , R + 4 , R + 5 , R + 6 , \
>417	ArgumentList	f
>418	Argument	R + 8
>419	AdditiveExpression	R + 8
>420	PrimaryExpression	8
>421	Identifier	R
>422	Argument	R + 7
>423	AdditiveExpression	R + 7
>424	PrimaryExpression	7
>425	Identifier	R
>426	Argument	R + 6
>427	AdditiveExpression	R + 6
>428	PrimaryExpression	6
>429	Identifier	R
>430	Argument	R + 5
>431	AdditiveExpression	R + 5
>432	PrimaryExpression	5
>433	Identifier	R
>434	Argument	R + 4
>435	AdditiveExpression	R + 4
>436	PrimaryExpression	4
>437	Identifier	R
>438	Argument	R + 3
>439	AdditiveExpression	R + 3
>440	PrimaryExpression	3
>441	Identifier	R
>442	Argument	R + 2
>443	AdditiveExpression	R + 2
>444	PrimaryExpression	2
>445	Identifier	R
>446	Argument	R + 1
>447	AdditiveExpression	R + 1
>448	PrimaryExpression	1
>449	Identifier	R
>450	Argument	R + 0
>451	AdditiveExpression	R + 0
>452	PrimaryExpression	0
>453	Identifier	R
>454	Argument	\"%lf %lf %lf\n%lf %lf %lf\n%lf %lf %lf\n\"
>455	PrimaryExpression	\"%lf %lf %lf\n%lf %lf %lf\n%lf %lf %lf\n\"
>456	Argument	f
>457	Identifier	f
>458	Callee	fscanf
>459	Identifier	fscanf
>460	IfStatement	if ( bundle_version < 0.2 )
>461	ElseStatement	else
>462	CompoundStatement	 
>463	ExpressionStatement	 
>464	CallExpression	fscanf ( f , \"%lf %lf %lf\n\" , & focal_length , & k0 , & k1 )
>465	ArgumentList	f
>466	Argument	& k1
>467	UnaryOp	& k1
>468	Identifier	k1
>469	UnaryOperator	&
>470	Argument	& k0
>471	UnaryOp	& k0
>472	Identifier	k0
>473	UnaryOperator	&
>474	Argument	& focal_length
>475	UnaryOp	& focal_length
>476	Identifier	focal_length
>477	UnaryOperator	&
>478	Argument	\"%lf %lf %lf\n\"
>479	PrimaryExpression	\"%lf %lf %lf\n\"
>480	Argument	f
>481	Identifier	f
>482	Callee	fscanf
>483	Identifier	fscanf
>484	CompoundStatement	 
>485	ExpressionStatement	 
>486	CallExpression	fscanf ( f , \"%lf\n\" , & focal_length )
>487	ArgumentList	f
>488	Argument	& focal_length
>489	UnaryOp	& focal_length
>490	Identifier	focal_length
>491	UnaryOperator	&
>492	Argument	\"%lf\n\"
>493	PrimaryExpression	\"%lf\n\"
>494	Argument	f
>495	Identifier	f
>496	Callee	fscanf
>497	Identifier	fscanf
>498	Condition	 
>499	RelationalExpression	bundle_version < 0.2
>500	PrimaryExpression	0.2
>501	Identifier	bundle_version
>502	IdentifierDeclStatement	 
>503	IdentifierDecl	t [ 3 ]
>504	PrimaryExpression	3
>505	Identifier	t
>506	IdentifierDeclType	double [ 3 ]
>507	IdentifierDeclStatement	 
>508	IdentifierDecl	R [ 9 ]
>509	PrimaryExpression	9
>510	Identifier	R
>511	IdentifierDeclType	double [ 9 ]
>512	IdentifierDeclStatement	 
>513	IdentifierDecl	k1
>514	Identifier	k1
>515	IdentifierDeclType	double
>516	IdentifierDecl	k0
>517	Identifier	k0
>518	IdentifierDeclType	double
>519	IdentifierDecl	focal_length
>520	Identifier	focal_length
>521	IdentifierDeclType	double
>522	IncDecOp	 
>523	IncDec	++
>524	Identifier	i
>525	Condition	 
>526	RelationalExpression	i < num_images
>527	Identifier	num_images
>528	Identifier	i
>529	ForInit	 
>530	IdentifierDeclStatement	int i = 0 ;
>531	IdentifierDecl	i = 0
>532	AssignmentExpr	i = 0
>533	PrimaryExpression	0
>534	Identifier	i
>535	Identifier	i
>536	IdentifierDeclType	int
>537	ExpressionStatement	 
>538	CallExpression	printf ( \"[ReadBundleFile] Reading %d images and %d points...\n\" , num_images , num_points )
>539	ArgumentList	\"[ReadBundleFile] Reading %d images and %d points...\n\"
>540	Argument	num_points
>541	Identifier	num_points
>542	Argument	num_images
>543	Identifier	num_images
>544	Argument	\"[ReadBundleFile] Reading %d images and %d points...\n\"
>545	PrimaryExpression	\"[ReadBundleFile] Reading %d images and %d points...\n\"
>546	Callee	printf
>547	Identifier	printf
>548	IfStatement	if ( first_line [ 0 ] == '#' )
>549	ElseStatement	else
>550	IfStatement	if ( first_line [ 0 ] == 'v' )
>551	ElseStatement	else
>552	CompoundStatement	 
>553	ExpressionStatement	 
>554	CallExpression	sscanf ( first_line , \"%d %d\n\" , & num_images , & num_points )
>555	ArgumentList	first_line
>556	Argument	& num_points
>557	UnaryOp	& num_points
>558	Identifier	num_points
>559	UnaryOperator	&
>560	Argument	& num_images
>561	UnaryOp	& num_images
>562	Identifier	num_images
>563	UnaryOperator	&
>564	Argument	\"%d %d\n\"
>565	PrimaryExpression	\"%d %d\n\"
>566	Argument	first_line
>567	Identifier	first_line
>568	Callee	sscanf
>569	Identifier	sscanf
>570	ExpressionStatement	 
>571	AssignmentExpr	bundle_version = 0.1
>572	PrimaryExpression	0.1
>573	Identifier	bundle_version
>574	CompoundStatement	 
>575	ExpressionStatement	 
>576	CallExpression	fscanf ( f , \"%d %d\n\" , & num_images , & num_points )
>577	ArgumentList	f
>578	Argument	& num_points
>579	UnaryOp	& num_points
>580	Identifier	num_points
>581	UnaryOperator	&
>582	Argument	& num_images
>583	UnaryOp	& num_images
>584	Identifier	num_images
>585	UnaryOperator	&
>586	Argument	\"%d %d\n\"
>587	PrimaryExpression	\"%d %d\n\"
>588	Argument	f
>589	Identifier	f
>590	Callee	fscanf
>591	Identifier	fscanf
>592	ExpressionStatement	 
>593	CallExpression	printf ( \"[ReadBundleFile] Bundle version
>594	ArgumentList	\"[ReadBundleFile] Bundle version
>595	Argument	version
>596	Identifier	version
>597	Argument	\"[ReadBundleFile] Bundle version
>598	PrimaryExpression	\"[ReadBundleFile] Bundle version
>599	Callee	printf
>600	Identifier	printf
>601	ExpressionStatement	 
>602	AssignmentExpr	bundle_version = version
>603	Identifier	version
>604	Identifier	bundle_version
>605	ExpressionStatement	 
>606	CallExpression	sscanf ( first_line , \"v%lf\" , & version )
>607	ArgumentList	first_line
>608	Argument	& version
>609	UnaryOp	& version
>610	Identifier	version
>611	UnaryOperator	&
>612	Argument	\"v%lf\"
>613	PrimaryExpression	\"v%lf\"
>614	Argument	first_line
>615	Identifier	first_line
>616	Callee	sscanf
>617	Identifier	sscanf
>618	IdentifierDeclStatement	 
>619	IdentifierDecl	version
>620	Identifier	version
>621	IdentifierDeclType	double
>622	Condition	 
>623	EqualityExpression	first_line [ 0 ] == 'v'
>624	PrimaryExpression	'v'
>625	ArrayIndexing	first_line [ 0 ]
>626	PrimaryExpression	0
>627	Identifier	first_line
>628	CompoundStatement	 
>629	ExpressionStatement	 
>630	CallExpression	fscanf ( f , \"%d %d\n\" , & num_images , & num_points )
>631	ArgumentList	f
>632	Argument	& num_points
>633	UnaryOp	& num_points
>634	Identifier	num_points
>635	UnaryOperator	&
>636	Argument	& num_images
>637	UnaryOp	& num_images
>638	Identifier	num_images
>639	UnaryOperator	&
>640	Argument	\"%d %d\n\"
>641	PrimaryExpression	\"%d %d\n\"
>642	Argument	f
>643	Identifier	f
>644	Callee	fscanf
>645	Identifier	fscanf
>646	ExpressionStatement	 
>647	CallExpression	printf ( \"[ReadBundleFile] Bundle version
>648	ArgumentList	\"[ReadBundleFile] Bundle version
>649	Argument	version
>650	Identifier	version
>651	Argument	\"[ReadBundleFile] Bundle version
>652	PrimaryExpression	\"[ReadBundleFile] Bundle version
>653	Callee	printf
>654	Identifier	printf
>655	ExpressionStatement	 
>656	AssignmentExpr	bundle_version = version
>657	Identifier	version
>658	Identifier	bundle_version
>659	ExpressionStatement	 
>660	CallExpression	sscanf ( first_line , \"# Bundle file v%lf\" , & version )
>661	ArgumentList	first_line
>662	Argument	& version
>663	UnaryOp	& version
>664	Identifier	version
>665	UnaryOperator	&
>666	Argument	\"# Bundle file v%lf\"
>667	PrimaryExpression	\"# Bundle file v%lf\"
>668	Argument	first_line
>669	Identifier	first_line
>670	Callee	sscanf
>671	Identifier	sscanf
>672	IdentifierDeclStatement	 
>673	IdentifierDecl	version
>674	Identifier	version
>675	IdentifierDeclType	double
>676	Condition	 
>677	EqualityExpression	first_line [ 0 ] == '#'
>678	PrimaryExpression	'#'
>679	ArrayIndexing	first_line [ 0 ]
>680	PrimaryExpression	0
>681	Identifier	first_line
>682	ExpressionStatement	 
>683	CallExpression	fgets ( first_line , 256 , f )
>684	ArgumentList	first_line
>685	Argument	f
>686	Identifier	f
>687	Argument	256
>688	PrimaryExpression	256
>689	Argument	first_line
>690	Identifier	first_line
>691	Callee	fgets
>692	Identifier	fgets
>693	IdentifierDeclStatement	 
>694	IdentifierDecl	first_line [ 256 ]
>695	PrimaryExpression	256
>696	Identifier	first_line
>697	IdentifierDeclType	char [ 256 ]
>698	IdentifierDeclStatement	 
>699	IdentifierDecl	num_points
>700	Identifier	num_points
>701	IdentifierDeclType	int
>702	IdentifierDecl	num_images
>703	Identifier	num_images
>704	IdentifierDeclType	int
>705	IfStatement	if ( f == NULL )
>706	CompoundStatement	 
>707	ReturnStatement	 
>708	ExpressionStatement	 
>709	CallExpression	printf ( \"Error opening file %s for reading\n\" , bundle_file )
>710	ArgumentList	\"Error opening file %s for reading\n\"
>711	Argument	bundle_file
>712	Identifier	bundle_file
>713	Argument	\"Error opening file %s for reading\n\"
>714	PrimaryExpression	\"Error opening file %s for reading\n\"
>715	Callee	printf
>716	Identifier	printf
>717	Condition	 
>718	EqualityExpression	f == NULL
>719	Identifier	NULL
>720	Identifier	f
>721	IdentifierDeclStatement	 
>722	IdentifierDecl	* f = fopen ( bundle_file , \"r\" )
>723	AssignmentExpr	* f = fopen ( bundle_file , \"r\" )
>724	CallExpression	fopen ( bundle_file , \"r\" )
>725	ArgumentList	bundle_file
>726	Argument	\"r\"
>727	PrimaryExpression	\"r\"
>728	Argument	bundle_file
>729	Identifier	bundle_file
>730	Callee	fopen
>731	Identifier	fopen
>732	Identifier	f
>733	Identifier	f
>734	IdentifierDeclType	FILE *
>780	FunctionDef	WritePMVS (const char * output_path , const char * list_file , const char * bundle_file , std 
>781	ParameterList	const char * output_path , const char * list_file , const char * bundle_file , std 
>782	Parameter	 
>783	Identifier	cameras
>784	ParameterType	std 
>785	Parameter	 
>786	Identifier	images
>787	ParameterType	std 
>788	Parameter	 
>789	Identifier	bundle_file
>790	ParameterType	const char *
>791	Parameter	 
>792	Identifier	list_file
>793	ParameterType	const char *
>794	Parameter	 
>795	Identifier	output_path
>796	ParameterType	const char *
>797	ReturnType	void
>798	CompoundStatement	 
>799	ExpressionStatement	 
>800	CallExpression	fclose ( f_scr )
>801	ArgumentList	f_scr
>802	Argument	f_scr
>803	Identifier	f_scr
>804	Callee	fclose
>805	Identifier	fclose
>806	ExpressionStatement	 
>807	CallExpression	fprintf ( f_scr , \"echo \\"       The clustering software is available at http
>808	ArgumentList	f_scr
>809	Argument	\"echo \\"       The clustering software is available at http
>810	PrimaryExpression	\"echo \\"       The clustering software is available at http
>811	Argument	f_scr
>812	Identifier	f_scr
>813	Callee	fprintf
>814	Identifier	fprintf
>815	ExpressionStatement	 
>816	CallExpression	fprintf ( f_scr , \"echo \\"   use Dr. Yasutaka Furukawa's view clustering algorithm to generate a set of options \
>817	ArgumentList	f_scr
>818	Argument	\"echo \\"   use Dr. Yasutaka Furukawa's view clustering algorithm to generate a set of options files.\\"\n\"
>819	PrimaryExpression	\"echo \\"   use Dr. Yasutaka Furukawa's view clustering algorithm to generate a set of options files.\\"\n\"
>820	Argument	f_scr
>821	Identifier	f_scr
>822	Callee	fprintf
>823	Identifier	fprintf
>824	ExpressionStatement	 
>825	CallExpression	fprintf ( f_scr , \"echo \\"    - or - \\"\n\" )
>826	ArgumentList	f_scr
>827	Argument	\"echo \\"    - or - \\"\n\"
>828	PrimaryExpression	\"echo \\"    - or - \\"\n\"
>829	Argument	f_scr
>830	Identifier	f_scr
>831	Callee	fprintf
>832	Identifier	fprintf
>833	ExpressionStatement	 
>834	CallExpression	fprintf ( f_scr , \"echo \\"   pmvs2 %s/ pmvs_options.txt\\"\n\" , output_path )
>835	ArgumentList	f_scr
>836	Argument	output_path
>837	Identifier	output_path
>838	Argument	\"echo \\"   pmvs2 %s/ pmvs_options.txt\\"\n\"
>839	PrimaryExpression	\"echo \\"   pmvs2 %s/ pmvs_options.txt\\"\n\"
>840	Argument	f_scr
>841	Identifier	f_scr
>842	Callee	fprintf
>843	Identifier	fprintf
>844	ExpressionStatement	 
>845	CallExpression	fprintf ( f_scr , \"\n\n\necho @@ Sample command for running pmvs
>846	ArgumentList	f_scr
>847	Argument	\"\n\n\necho @@ Sample command for running pmvs
>848	PrimaryExpression	\"\n\n\necho @@ Sample command for running pmvs
>849	Argument	f_scr
>850	Identifier	f_scr
>851	Callee	fprintf
>852	Identifier	fprintf
>853	ExpressionStatement	 
>854	CallExpression	fprintf ( f_scr , \"$BUNDLER_BIN_PATH/Bundle2Vis %s/bundle.rd.out %s/vis.dat\n\" , output_path , output_path )
>855	ArgumentList	f_scr
>856	Argument	output_path
>857	Identifier	output_path
>858	Argument	output_path
>859	Identifier	output_path
>860	Argument	\"$BUNDLER_BIN_PATH/Bundle2Vis %s/bundle.rd.out %s/vis.dat\n\"
>861	PrimaryExpression	\"$BUNDLER_BIN_PATH/Bundle2Vis %s/bundle.rd.out %s/vis.dat\n\"
>862	Argument	f_scr
>863	Identifier	f_scr
>864	Callee	fprintf
>865	Identifier	fprintf
>866	ExpressionStatement	 
>867	CallExpression	fprintf ( f_scr , \"\necho \\"Running Bundle2Vis to generate vis.dat\n\\"\n\" )
>868	ArgumentList	f_scr
>869	Argument	\"\necho \\"Running Bundle2Vis to generate vis.dat\n\\"\n\"
>870	PrimaryExpression	\"\necho \\"Running Bundle2Vis to generate vis.dat\n\\"\n\"
>871	Argument	f_scr
>872	Identifier	f_scr
>873	Callee	fprintf
>874	Identifier	fprintf
>875	ExpressionStatement	 
>876	CallExpression	fclose ( f_opt )
>877	ArgumentList	f_opt
>878	Argument	f_opt
>879	Identifier	f_opt
>880	Callee	fclose
>881	Identifier	fclose
>882	ExpressionStatement	 
>883	CallExpression	fprintf ( f_opt , \"oimages -3\n\" )
>884	ArgumentList	f_opt
>885	Argument	\"oimages -3\n\"
>886	PrimaryExpression	\"oimages -3\n\"
>887	Argument	f_opt
>888	Identifier	f_opt
>889	Callee	fprintf
>890	Identifier	fprintf
>891	ExpressionStatement	 
>892	CallExpression	fprintf ( f_opt , \"timages -1 0 %d\n\" , count )
>893	ArgumentList	f_opt
>894	Argument	count
>895	Identifier	count
>896	Argument	\"timages -1 0 %d\n\"
>897	PrimaryExpression	\"timages -1 0 %d\n\"
>898	Argument	f_opt
>899	Identifier	f_opt
>900	Callee	fprintf
>901	Identifier	fprintf
>902	ExpressionStatement	 
>903	CallExpression	fprintf ( f_opt , \"sequence -1\n\" )
>904	ArgumentList	f_opt
>905	Argument	\"sequence -1\n\"
>906	PrimaryExpression	\"sequence -1\n\"
>907	Argument	f_opt
>908	Identifier	f_opt
>909	Callee	fprintf
>910	Identifier	fprintf
>911	ExpressionStatement	 
>912	CallExpression	fprintf ( f_opt , \"useVisData 1\n\" )
>913	ArgumentList	f_opt
>914	Argument	\"useVisData 1\n\"
>915	PrimaryExpression	\"useVisData 1\n\"
>916	Argument	f_opt
>917	Identifier	f_opt
>918	Callee	fprintf
>919	Identifier	fprintf
>920	ExpressionStatement	 
>921	CallExpression	fprintf ( f_opt , \"useBound 0\n\" )
>922	ArgumentList	f_opt
>923	Argument	\"useBound 0\n\"
>924	PrimaryExpression	\"useBound 0\n\"
>925	Argument	f_opt
>926	Identifier	f_opt
>927	Callee	fprintf
>928	Identifier	fprintf
>929	ExpressionStatement	 
>930	CallExpression	fprintf ( f_opt , \"setEdge 0\n\" )
>931	ArgumentList	f_opt
>932	Argument	\"setEdge 0\n\"
>933	PrimaryExpression	\"setEdge 0\n\"
>934	Argument	f_opt
>935	Identifier	f_opt
>936	Callee	fprintf
>937	Identifier	fprintf
>938	ExpressionStatement	 
>939	CallExpression	fprintf ( f_opt , \"CPU 8\n\" )
>940	ArgumentList	f_opt
>941	Argument	\"CPU 8\n\"
>942	PrimaryExpression	\"CPU 8\n\"
>943	Argument	f_opt
>944	Identifier	f_opt
>945	Callee	fprintf
>946	Identifier	fprintf
>947	ExpressionStatement	 
>948	CallExpression	fprintf ( f_opt , \"minImageNum 3\n\" )
>949	ArgumentList	f_opt
>950	Argument	\"minImageNum 3\n\"
>951	PrimaryExpression	\"minImageNum 3\n\"
>952	Argument	f_opt
>953	Identifier	f_opt
>954	Callee	fprintf
>955	Identifier	fprintf
>956	ExpressionStatement	 
>957	CallExpression	fprintf ( f_opt , \"wsize 7\n\" )
>958	ArgumentList	f_opt
>959	Argument	\"wsize 7\n\"
>960	PrimaryExpression	\"wsize 7\n\"
>961	Argument	f_opt
>962	Identifier	f_opt
>963	Callee	fprintf
>964	Identifier	fprintf
>965	ExpressionStatement	 
>966	CallExpression	fprintf ( f_opt , \"threshold 0.7\n\" )
>967	ArgumentList	f_opt
>968	Argument	\"threshold 0.7\n\"
>969	PrimaryExpression	\"threshold 0.7\n\"
>970	Argument	f_opt
>971	Identifier	f_opt
>972	Callee	fprintf
>973	Identifier	fprintf
>974	ExpressionStatement	 
>975	CallExpression	fprintf ( f_opt , \"csize 2\n\" )
>976	ArgumentList	f_opt
>977	Argument	\"csize 2\n\"
>978	PrimaryExpression	\"csize 2\n\"
>979	Argument	f_opt
>980	Identifier	f_opt
>981	Callee	fprintf
>982	Identifier	fprintf
>983	ExpressionStatement	 
>984	CallExpression	fprintf ( f_opt , \"level 1\n\" )
>985	ArgumentList	f_opt
>986	Argument	\"level 1\n\"
>987	PrimaryExpression	\"level 1\n\"
>988	Argument	f_opt
>989	Identifier	f_opt
>990	Callee	fprintf
>991	Identifier	fprintf
>992	IdentifierDeclStatement	 
>993	IdentifierDecl	* f_opt = fopen ( buf , \"w\" )
>994	AssignmentExpr	* f_opt = fopen ( buf , \"w\" )
>995	CallExpression	fopen ( buf , \"w\" )
>996	ArgumentList	buf
>997	Argument	\"w\"
>998	PrimaryExpression	\"w\"
>999	Argument	buf
>1000	Identifier	buf
>1001	Callee	fopen
>1002	Identifier	fopen
>1003	Identifier	f_opt
>1004	Identifier	f_opt
>1005	IdentifierDeclType	FILE *
>1006	ExpressionStatement	 
>1007	CallExpression	sprintf ( buf , \"%s/pmvs_options.txt\" , output_path )
>1008	ArgumentList	buf
>1009	Argument	output_path
>1010	Identifier	output_path
>1011	Argument	\"%s/pmvs_options.txt\"
>1012	PrimaryExpression	\"%s/pmvs_options.txt\"
>1013	Argument	buf
>1014	Identifier	buf
>1015	Callee	sprintf
>1016	Identifier	sprintf
>1017	ForStatement	for ( int i = 0 ; i < num_cameras ; i ++ )
>1018	CompoundStatement	 
>1019	ExpressionStatement	 
>1020	IncDecOp	count ++
>1021	IncDec	++
>1022	Identifier	count
>1023	ExpressionStatement	 
>1024	CallExpression	fprintf ( f_scr , \"mv %s %s/txt/\n\" , buf , output_path )
>1025	ArgumentList	f_scr
>1026	Argument	output_path
>1027	Identifier	output_path
>1028	Argument	buf
>1029	Identifier	buf
>1030	Argument	\"mv %s %s/txt/\n\"
>1031	PrimaryExpression	\"mv %s %s/txt/\n\"
>1032	Argument	f_scr
>1033	Identifier	f_scr
>1034	Callee	fprintf
>1035	Identifier	fprintf
>1036	ExpressionStatement	 
>1037	CallExpression	fprintf ( f_scr , \"mv pmvs/%s.rd.jpg %s/visualize/%08d.jpg\n\" , basename . c_str ( ) , output_path , count )
>1038	ArgumentList	f_scr
>1039	Argument	count
>1040	Identifier	count
>1041	Argument	output_path
>1042	Identifier	output_path
>1043	Argument	basename . c_str ( )
>1044	CallExpression	basename . c_str ( )
>1045	ArgumentList	 
>1046	Callee	basename . c_str
>1047	MemberAccess	basename . c_str
>1048	Identifier	c_str
>1049	Identifier	basename
>1050	Argument	\"mv pmvs/%s.rd.jpg %s/visualize/%08d.jpg\n\"
>1051	PrimaryExpression	\"mv pmvs/%s.rd.jpg %s/visualize/%08d.jpg\n\"
>1052	Argument	f_scr
>1053	Identifier	f_scr
>1054	Callee	fprintf
>1055	Identifier	fprintf
>1056	IdentifierDeclStatement	 
>1057	IdentifierDecl	basename = images [ i ] . substr ( 0 , last_dot )
>1058	AssignmentExpr	basename = images [ i ] . substr ( 0 , last_dot )
>1059	CallExpression	images [ i ] . substr ( 0 , last_dot )
>1060	ArgumentList	0
>1061	Argument	last_dot
>1062	Identifier	last_dot
>1063	Argument	0
>1064	PrimaryExpression	0
>1065	Callee	images [ i ] . substr
>1066	MemberAccess	images [ i ] . substr
>1067	Identifier	substr
>1068	ArrayIndexing	images [ i ]
>1069	Identifier	i
>1070	Identifier	images
>1071	Identifier	basename
>1072	Identifier	basename
>1073	IdentifierDeclType	std 
>1074	IdentifierDeclStatement	 
>1075	IdentifierDecl	last_dot = images [ i ] . rfind ( '.' , images [ i ] . length ( ) - 1 )
>1076	AssignmentExpr	last_dot = images [ i ] . rfind ( '.' , images [ i ] . length ( ) - 1 )
>1077	CallExpression	images [ i ] . rfind ( '.' , images [ i ] . length ( ) - 1 )
>1078	ArgumentList	'.'
>1079	Argument	images [ i ] . length ( ) - 1
>1080	AdditiveExpression	images [ i ] . length ( ) - 1
>1081	PrimaryExpression	1
>1082	CallExpression	images [ i ] . length ( )
>1083	ArgumentList	 
>1084	Callee	images [ i ] . length
>1085	MemberAccess	images [ i ] . length
>1086	Identifier	length
>1087	ArrayIndexing	images [ i ]
>1088	Identifier	i
>1089	Identifier	images
>1090	Argument	'.'
>1091	PrimaryExpression	'.'
>1092	Callee	images [ i ] . rfind
>1093	MemberAccess	images [ i ] . rfind
>1094	Identifier	rfind
>1095	ArrayIndexing	images [ i ]
>1096	Identifier	i
>1097	Identifier	images
>1098	Identifier	last_dot
>1099	Identifier	last_dot
>1100	IdentifierDeclType	int
>1101	ExpressionStatement	 
>1102	CallExpression	fclose ( f )
>1103	ArgumentList	f
>1104	Argument	f
>1105	Identifier	f
>1106	Callee	fclose
>1107	Identifier	fclose
>1108	ExpressionStatement	 
>1109	CallExpression	fprintf ( f , \"%0.6f %0.6f %0.6f %0.6f\n\" , P [ 8 ] , P [ 9 ] , P [ 10 ] , P [ 11 ] )
>1110	ArgumentList	f
>1111	Argument	P [ 11 ]
>1112	ArrayIndexing	P [ 11 ]
>1113	PrimaryExpression	11
>1114	Identifier	P
>1115	Argument	P [ 10 ]
>1116	ArrayIndexing	P [ 10 ]
>1117	PrimaryExpression	10
>1118	Identifier	P
>1119	Argument	P [ 9 ]
>1120	ArrayIndexing	P [ 9 ]
>1121	PrimaryExpression	9
>1122	Identifier	P
>1123	Argument	P [ 8 ]
>1124	ArrayIndexing	P [ 8 ]
>1125	PrimaryExpression	8
>1126	Identifier	P
>1127	Argument	\"%0.6f %0.6f %0.6f %0.6f\n\"
>1128	PrimaryExpression	\"%0.6f %0.6f %0.6f %0.6f\n\"
>1129	Argument	f
>1130	Identifier	f
>1131	Callee	fprintf
>1132	Identifier	fprintf
>1133	ExpressionStatement	 
>1134	CallExpression	fprintf ( f , \"%0.6f %0.6f %0.6f %0.6f\n\" , P [ 4 ] , P [ 5 ] , P [ 6 ] , P [ 7 ] )
>1135	ArgumentList	f
>1136	Argument	P [ 7 ]
>1137	ArrayIndexing	P [ 7 ]
>1138	PrimaryExpression	7
>1139	Identifier	P
>1140	Argument	P [ 6 ]
>1141	ArrayIndexing	P [ 6 ]
>1142	PrimaryExpression	6
>1143	Identifier	P
>1144	Argument	P [ 5 ]
>1145	ArrayIndexing	P [ 5 ]
>1146	PrimaryExpression	5
>1147	Identifier	P
>1148	Argument	P [ 4 ]
>1149	ArrayIndexing	P [ 4 ]
>1150	PrimaryExpression	4
>1151	Identifier	P
>1152	Argument	\"%0.6f %0.6f %0.6f %0.6f\n\"
>1153	PrimaryExpression	\"%0.6f %0.6f %0.6f %0.6f\n\"
>1154	Argument	f
>1155	Identifier	f
>1156	Callee	fprintf
>1157	Identifier	fprintf
>1158	ExpressionStatement	 
>1159	CallExpression	fprintf ( f , \"%0.6f %0.6f %0.6f %0.6f\n\" , P [ 0 ] , P [ 1 ] , P [ 2 ] , P [ 3 ] )
>1160	ArgumentList	f
>1161	Argument	P [ 3 ]
>1162	ArrayIndexing	P [ 3 ]
>1163	PrimaryExpression	3
>1164	Identifier	P
>1165	Argument	P [ 2 ]
>1166	ArrayIndexing	P [ 2 ]
>1167	PrimaryExpression	2
>1168	Identifier	P
>1169	Argument	P [ 1 ]
>1170	ArrayIndexing	P [ 1 ]
>1171	PrimaryExpression	1
>1172	Identifier	P
>1173	Argument	P [ 0 ]
>1174	ArrayIndexing	P [ 0 ]
>1175	PrimaryExpression	0
>1176	Identifier	P
>1177	Argument	\"%0.6f %0.6f %0.6f %0.6f\n\"
>1178	PrimaryExpression	\"%0.6f %0.6f %0.6f %0.6f\n\"
>1179	Argument	f
>1180	Identifier	f
>1181	Callee	fprintf
>1182	Identifier	fprintf
>1183	ExpressionStatement	 
>1184	CallExpression	fprintf ( f , \"CONTOUR\n\" )
>1185	ArgumentList	f
>1186	Argument	\"CONTOUR\n\"
>1187	PrimaryExpression	\"CONTOUR\n\"
>1188	Argument	f
>1189	Identifier	f
>1190	Callee	fprintf
>1191	Identifier	fprintf
>1192	ExpressionStatement	 
>1193	CallExpression	matrix_scale ( 3 , 4 , P , - 1.0 , P )
>1194	ArgumentList	3
>1195	Argument	P
>1196	Identifier	P
>1197	Argument	- 1.0
>1198	UnaryOp	- 1.0
>1199	PrimaryExpression	1.0
>1200	UnaryOperator	-
>1201	Argument	P
>1202	Identifier	P
>1203	Argument	4
>1204	PrimaryExpression	4
>1205	Argument	3
>1206	PrimaryExpression	3
>1207	Callee	matrix_scale
>1208	Identifier	matrix_scale
>1209	ExpressionStatement	 
>1210	CallExpression	matrix_product ( 3 , 3 , 3 , 4 , K , Ptmp , P )
>1211	ArgumentList	3
>1212	Argument	P
>1213	Identifier	P
>1214	Argument	Ptmp
>1215	Identifier	Ptmp
>1216	Argument	K
>1217	Identifier	K
>1218	Argument	4
>1219	PrimaryExpression	4
>1220	Argument	3
>1221	PrimaryExpression	3
>1222	Argument	3
>1223	PrimaryExpression	3
>1224	Argument	3
>1225	PrimaryExpression	3
>1226	Callee	matrix_product
>1227	Identifier	matrix_product
>1228	IdentifierDeclStatement	 
>1229	IdentifierDecl	P [ 12 ]
>1230	PrimaryExpression	12
>1231	Identifier	P
>1232	IdentifierDeclType	double [ 12 ]
>1233	IdentifierDeclStatement	 
>1234	IdentifierDecl	Ptmp [ 12 ] = { R [ 0 ] , R [ 1 ] , R [ 2 ] , t [ 0 ] , R [ 3 ] , R [ 4 ] , R [ 5 ] , t [ 1 ] , R [ 6 ] , R [ 7 ] , \
>1235	AssignmentExpr	Ptmp [ 12 ] = { R [ 0 ] , R [ 1 ] , R [ 2 ] , t [ 0 ] , R [ 3 ] , R [ 4 ] , R [ 5 ] , t [ 1 ] , R [ 6 ] , \
>1236	InitializerList	R [ 0 ]
>1237	ArrayIndexing	t [ 2 ]
>1238	PrimaryExpression	2
>1239	Identifier	t
>1240	ArrayIndexing	R [ 8 ]
>1241	PrimaryExpression	8
>1242	Identifier	R
>1243	ArrayIndexing	R [ 7 ]
>1244	PrimaryExpression	7
>1245	Identifier	R
>1246	ArrayIndexing	R [ 6 ]
>1247	PrimaryExpression	6
>1248	Identifier	R
>1249	ArrayIndexing	t [ 1 ]
>1250	PrimaryExpression	1
>1251	Identifier	t
>1252	ArrayIndexing	R [ 5 ]
>1253	PrimaryExpression	5
>1254	Identifier	R
>1255	ArrayIndexing	R [ 4 ]
>1256	PrimaryExpression	4
>1257	Identifier	R
>1258	ArrayIndexing	R [ 3 ]
>1259	PrimaryExpression	3
>1260	Identifier	R
>1261	ArrayIndexing	t [ 0 ]
>1262	PrimaryExpression	0
>1263	Identifier	t
>1264	ArrayIndexing	R [ 2 ]
>1265	PrimaryExpression	2
>1266	Identifier	R
>1267	ArrayIndexing	R [ 1 ]
>1268	PrimaryExpression	1
>1269	Identifier	R
>1270	ArrayIndexing	R [ 0 ]
>1271	PrimaryExpression	0
>1272	Identifier	R
>1273	Identifier	Ptmp
>1274	PrimaryExpression	12
>1275	Identifier	Ptmp
>1276	IdentifierDeclType	double [ 12 ]
>1277	IdentifierDeclStatement	 
>1278	IdentifierDecl	K [ 9 ] = { - focal , 0.0 , 0.5 * w - 0.5 , 0.0 , focal , 0.5 * h - 0.5 , 0.0 , 0.0 , 1.0 }
>1279	AssignmentExpr	K [ 9 ] = { - focal , 0.0 , 0.5 * w - 0.5 , 0.0 , focal , 0.5 * h - 0.5 , 0.0 , 0.0 , 1.0 }
>1280	InitializerList	- focal
>1281	PrimaryExpression	1.0
>1282	PrimaryExpression	0.0
>1283	PrimaryExpression	0.0
>1284	AdditiveExpression	0.5 * h - 0.5
>1285	PrimaryExpression	0.5
>1286	MultiplicativeExpression	0.5 * h
>1287	Identifier	h
>1288	PrimaryExpression	0.5
>1289	Identifier	focal
>1290	PrimaryExpression	0.0
>1291	AdditiveExpression	0.5 * w - 0.5
>1292	PrimaryExpression	0.5
>1293	MultiplicativeExpression	0.5 * w
>1294	Identifier	w
>1295	PrimaryExpression	0.5
>1296	PrimaryExpression	0.0
>1297	UnaryOp	- focal
>1298	Identifier	focal
>1299	UnaryOperator	-
>1300	Identifier	K
>1301	PrimaryExpression	9
>1302	Identifier	K
>1303	IdentifierDeclType	double [ 9 ]
>1304	ExpressionStatement	 
>1305	CallExpression	GetJPEGDimensions ( images [ i ] . c_str ( ) , w , h )
>1306	ArgumentList	images [ i ] . c_str ( )
>1307	Argument	h
>1308	Identifier	h
>1309	Argument	w
>1310	Identifier	w
>1311	Argument	images [ i ] . c_str ( )
>1312	CallExpression	images [ i ] . c_str ( )
>1313	ArgumentList	 
>1314	Callee	images [ i ] . c_str
>1315	MemberAccess	images [ i ] . c_str
>1316	Identifier	c_str
>1317	ArrayIndexing	images [ i ]
>1318	Identifier	i
>1319	Identifier	images
>1320	Callee	GetJPEGDimensions
>1321	Identifier	GetJPEGDimensions
>1322	IdentifierDeclStatement	 
>1323	IdentifierDecl	h
>1324	Identifier	h
>1325	IdentifierDeclType	int
>1326	IdentifierDecl	w
>1327	Identifier	w
>1328	IdentifierDeclType	int
>1329	IdentifierDeclStatement	 
>1330	IdentifierDecl	* t = cameras [ i ] . t
>1331	AssignmentExpr	* t = cameras [ i ] . t
>1332	MemberAccess	cameras [ i ] . t
>1333	Identifier	t
>1334	ArrayIndexing	cameras [ i ]
>1335	Identifier	i
>1336	Identifier	cameras
>1337	Identifier	t
>1338	Identifier	t
>1339	IdentifierDeclType	double *
>1340	IdentifierDeclStatement	 
>1341	IdentifierDecl	* R = cameras [ i ] . R
>1342	AssignmentExpr	* R = cameras [ i ] . R
>1343	MemberAccess	cameras [ i ] . R
>1344	Identifier	R
>1345	ArrayIndexing	cameras [ i ]
>1346	Identifier	i
>1347	Identifier	cameras
>1348	Identifier	R
>1349	Identifier	R
>1350	IdentifierDeclType	double *
>1351	IdentifierDeclStatement	 
>1352	IdentifierDecl	focal = cameras [ i ] . f
>1353	AssignmentExpr	focal = cameras [ i ] . f
>1354	MemberAccess	cameras [ i ] . f
>1355	Identifier	f
>1356	ArrayIndexing	cameras [ i ]
>1357	Identifier	i
>1358	Identifier	cameras
>1359	Identifier	focal
>1360	Identifier	focal
>1361	IdentifierDeclType	double
>1362	ExpressionStatement	 
>1363	CallExpression	assert ( f )
>1364	ArgumentList	f
>1365	Argument	f
>1366	Identifier	f
>1367	Callee	assert
>1368	Identifier	assert
>1369	IdentifierDeclStatement	 
>1370	IdentifierDecl	* f = fopen ( buf , \"w\" )
>1371	AssignmentExpr	* f = fopen ( buf , \"w\" )
>1372	CallExpression	fopen ( buf , \"w\" )
>1373	ArgumentList	buf
>1374	Argument	\"w\"
>1375	PrimaryExpression	\"w\"
>1376	Argument	buf
>1377	Identifier	buf
>1378	Callee	fopen
>1379	Identifier	fopen
>1380	Identifier	f
>1381	Identifier	f
>1382	IdentifierDeclType	FILE *
>1383	ExpressionStatement	 
>1384	CallExpression	sprintf ( buf , \"%s/%08d.txt\" , output_path , count )
>1385	ArgumentList	buf
>1386	Argument	count
>1387	Identifier	count
>1388	Argument	output_path
>1389	Identifier	output_path
>1390	Argument	\"%s/%08d.txt\"
>1391	PrimaryExpression	\"%s/%08d.txt\"
>1392	Argument	buf
>1393	Identifier	buf
>1394	Callee	sprintf
>1395	Identifier	sprintf
>1396	IdentifierDeclStatement	 
>1397	IdentifierDecl	buf [ 256 ]
>1398	PrimaryExpression	256
>1399	Identifier	buf
>1400	IdentifierDeclType	char [ 256 ]
>1401	IfStatement	if ( cameras [ i ] . f == 0.0 )
>1402	ContinueStatement	 
>1403	Condition	 
>1404	EqualityExpression	cameras [ i ] . f == 0.0
>1405	PrimaryExpression	0.0
>1406	MemberAccess	cameras [ i ] . f
>1407	Identifier	f
>1408	ArrayIndexing	cameras [ i ]
>1409	Identifier	i
>1410	Identifier	cameras
>1411	IncDecOp	 
>1412	IncDec	++
>1413	Identifier	i
>1414	Condition	 
>1415	RelationalExpression	i < num_cameras
>1416	Identifier	num_cameras
>1417	Identifier	i
>1418	ForInit	 
>1419	IdentifierDeclStatement	int i = 0 ;
>1420	IdentifierDecl	i = 0
>1421	AssignmentExpr	i = 0
>1422	PrimaryExpression	0
>1423	Identifier	i
>1424	Identifier	i
>1425	IdentifierDeclType	int
>1426	IdentifierDeclStatement	 
>1427	IdentifierDecl	count = 0
>1428	AssignmentExpr	count = 0
>1429	PrimaryExpression	0
>1430	Identifier	count
>1431	Identifier	count
>1432	IdentifierDeclType	int
>1433	ExpressionStatement	 
>1434	CallExpression	fprintf ( f_scr , \"\n# Copy and rename files\n\" )
>1435	ArgumentList	f_scr
>1436	Argument	\"\n# Copy and rename files\n\"
>1437	PrimaryExpression	\"\n# Copy and rename files\n\"
>1438	Argument	f_scr
>1439	Identifier	f_scr
>1440	Callee	fprintf
>1441	Identifier	fprintf
>1442	ExpressionStatement	 
>1443	CallExpression	fprintf ( f_scr , \"mkdir -p %s/models/\n\" , output_path )
>1444	ArgumentList	f_scr
>1445	Argument	output_path
>1446	Identifier	output_path
>1447	Argument	\"mkdir -p %s/models/\n\"
>1448	PrimaryExpression	\"mkdir -p %s/models/\n\"
>1449	Argument	f_scr
>1450	Identifier	f_scr
>1451	Callee	fprintf
>1452	Identifier	fprintf
>1453	ExpressionStatement	 
>1454	CallExpression	fprintf ( f_scr , \"mkdir -p %s/visualize/\n\" , output_path )
>1455	ArgumentList	f_scr
>1456	Argument	output_path
>1457	Identifier	output_path
>1458	Argument	\"mkdir -p %s/visualize/\n\"
>1459	PrimaryExpression	\"mkdir -p %s/visualize/\n\"
>1460	Argument	f_scr
>1461	Identifier	f_scr
>1462	Callee	fprintf
>1463	Identifier	fprintf
>1464	ExpressionStatement	 
>1465	CallExpression	fprintf ( f_scr , \"mkdir -p %s/txt/\n\" , output_path )
>1466	ArgumentList	f_scr
>1467	Argument	output_path
>1468	Identifier	output_path
>1469	Argument	\"mkdir -p %s/txt/\n\"
>1470	PrimaryExpression	\"mkdir -p %s/txt/\n\"
>1471	Argument	f_scr
>1472	Identifier	f_scr
>1473	Callee	fprintf
>1474	Identifier	fprintf
>1475	ExpressionStatement	 
>1476	CallExpression	fprintf ( f_scr , \"\n# Create directory structure\n\" )
>1477	ArgumentList	f_scr
>1478	Argument	\"\n# Create directory structure\n\"
>1479	PrimaryExpression	\"\n# Create directory structure\n\"
>1480	Argument	f_scr
>1481	Identifier	f_scr
>1482	Callee	fprintf
>1483	Identifier	fprintf
>1484	ExpressionStatement	 
>1485	CallExpression	fprintf ( f_scr , \"$BUNDLER_BIN_PATH/RadialUndistort %s %s %s\n\" , list_file , bundle_file , output_path )
>1486	ArgumentList	f_scr
>1487	Argument	output_path
>1488	Identifier	output_path
>1489	Argument	bundle_file
>1490	Identifier	bundle_file
>1491	Argument	list_file
>1492	Identifier	list_file
>1493	Argument	\"$BUNDLER_BIN_PATH/RadialUndistort %s %s %s\n\"
>1494	PrimaryExpression	\"$BUNDLER_BIN_PATH/RadialUndistort %s %s %s\n\"
>1495	Argument	f_scr
>1496	Identifier	f_scr
>1497	Callee	fprintf
>1498	Identifier	fprintf
>1499	ExpressionStatement	 
>1500	CallExpression	fprintf ( f_scr , \"# Apply radial undistortion to the images\n\" )
>1501	ArgumentList	f_scr
>1502	Argument	\"# Apply radial undistortion to the images\n\"
>1503	PrimaryExpression	\"# Apply radial undistortion to the images\n\"
>1504	Argument	f_scr
>1505	Identifier	f_scr
>1506	Callee	fprintf
>1507	Identifier	fprintf
>1508	ExpressionStatement	 
>1509	Statement	 
>1510	Statement	 
>1511	Statement	 
>1512	Statement	 
>1513	Statement	 
>1514	Statement	 
>1515	Statement	 
>1516	Statement	 
>1517	ExpressionStatement	 
>1518	Statement	 
>1519	Statement	 
>1520	Statement	 
>1521	Statement	 
>1522	Statement	 
>1523	Statement	 
>1524	Statement	 
>1525	ExpressionStatement	 
>1526	Statement	 
>1527	Statement	 
>1528	Statement	 
>1529	Statement	 
>1530	Statement	 
>1531	Statement	 
>1532	Statement	 
>1533	IdentifierDeclStatement	 
>1534	IdentifierDecl	* f_scr = fopen ( buf , \"w\" )
>1535	AssignmentExpr	* f_scr = fopen ( buf , \"w\" )
>1536	CallExpression	fopen ( buf , \"w\" )
>1537	ArgumentList	buf
>1538	Argument	\"w\"
>1539	PrimaryExpression	\"w\"
>1540	Argument	buf
>1541	Identifier	buf
>1542	Callee	fopen
>1543	Identifier	fopen
>1544	Identifier	f_scr
>1545	Identifier	f_scr
>1546	IdentifierDeclType	FILE *
>1547	ExpressionStatement	 
>1548	CallExpression	sprintf ( buf , \"%s/prep_pmvs.sh\" , output_path )
>1549	ArgumentList	buf
>1550	Argument	output_path
>1551	Identifier	output_path
>1552	Argument	\"%s/prep_pmvs.sh\"
>1553	PrimaryExpression	\"%s/prep_pmvs.sh\"
>1554	Argument	buf
>1555	Identifier	buf
>1556	Callee	sprintf
>1557	Identifier	sprintf
>1558	IdentifierDeclStatement	 
>1559	IdentifierDecl	buf [ 2048 ]
>1560	PrimaryExpression	2048
>1561	Identifier	buf
>1562	IdentifierDeclType	char [ 2048 ]
>1563	ExpressionStatement	 
>1564	CallExpression	mkdir ( output_path , 0770 )
>1565	ArgumentList	output_path
>1566	Argument	0770
>1567	PrimaryExpression	0770
>1568	Argument	output_path
>1569	Identifier	output_path
>1570	Callee	mkdir
>1571	Identifier	mkdir
>1572	IdentifierDeclStatement	 
>1573	IdentifierDecl	num_cameras = ( int ) cameras . size ( )
>1574	AssignmentExpr	num_cameras = ( int ) cameras . size ( )
>1575	CastExpression	( int ) cameras . size ( )
>1576	CallExpression	cameras . size ( )
>1577	ArgumentList	 
>1578	Callee	cameras . size
>1579	MemberAccess	cameras . size
>1580	Identifier	size
>1581	Identifier	cameras
>1582	CastTarget	int
>1583	Identifier	num_cameras
>1584	Identifier	num_cameras
>1585	IdentifierDeclType	int
>1627	FunctionDef	main (int argc , char * * argv)
>1628	ParameterList	int argc , char * * argv
>1629	Parameter	 
>1630	Identifier	argv
>1631	ParameterType	char * *
>1632	Parameter	 
>1633	Identifier	argc
>1634	ParameterType	int
>1635	ReturnType	int
>1636	CompoundStatement	 
>1637	ReturnStatement	 
>1638	PrimaryExpression	0
>1639	ExpressionStatement	 
>1640	Statement	 
>1641	Statement	 
>1642	Statement	 
>1643	Statement	 
>1644	Statement	 
>1645	ExpressionStatement	 
>1646	CallExpression	printf ( \"@@ (you will first need to edit prep_pmvs.sh to specify your bundler path, \n\" )
>1647	ArgumentList	\"@@ (you will first need to edit prep_pmvs.sh to specify your bundler path, \n\"
>1648	Argument	\"@@ (you will first need to edit prep_pmvs.sh to specify your bundler path, \n\"
>1649	PrimaryExpression	\"@@ (you will first need to edit prep_pmvs.sh to specify your bundler path, \n\"
>1650	Callee	printf
>1651	Identifier	printf
>1652	ExpressionStatement	 
>1653	CallExpression	printf ( \"@@ Conversion complete, execute \\"sh %s/prep_pmvs.sh\\" to finalize\n\" , output_path )
>1654	ArgumentList	\"@@ Conversion complete, execute \\"sh %s/prep_pmvs.sh\\" to finalize\n\"
>1655	Argument	output_path
>1656	Identifier	output_path
>1657	Argument	\"@@ Conversion complete, execute \\"sh %s/prep_pmvs.sh\\" to finalize\n\"
>1658	PrimaryExpression	\"@@ Conversion complete, execute \\"sh %s/prep_pmvs.sh\\" to finalize\n\"
>1659	Callee	printf
>1660	Identifier	printf
>1661	ExpressionStatement	 
>1662	CallExpression	printf ( \"\n\n\" )
>1663	ArgumentList	\"\n\n\"
>1664	Argument	\"\n\n\"
>1665	PrimaryExpression	\"\n\n\"
>1666	Callee	printf
>1667	Identifier	printf
>1668	ExpressionStatement	 
>1669	CallExpression	WritePMVS ( output_path , list_file , bundle_file , images , cameras )
>1670	ArgumentList	output_path
>1671	Argument	cameras
>1672	Identifier	cameras
>1673	Argument	images
>1674	Identifier	images
>1675	Argument	bundle_file
>1676	Identifier	bundle_file
>1677	Argument	list_file
>1678	Identifier	list_file
>1679	Argument	output_path
>1680	Identifier	output_path
>1681	Callee	WritePMVS
>1682	Identifier	WritePMVS
>1683	ExpressionStatement	 
>1684	CallExpression	ReadBundleFile ( bundle_file , cameras , points , bundle_version )
>1685	ArgumentList	bundle_file
>1686	Argument	bundle_version
>1687	Identifier	bundle_version
>1688	Argument	points
>1689	Identifier	points
>1690	Argument	cameras
>1691	Identifier	cameras
>1692	Argument	bundle_file
>1693	Identifier	bundle_file
>1694	Callee	ReadBundleFile
>1695	Identifier	ReadBundleFile
>1696	IdentifierDeclStatement	 
>1697	IdentifierDecl	bundle_version
>1698	Identifier	bundle_version
>1699	IdentifierDeclType	double
>1700	IdentifierDeclStatement	 
>1701	IdentifierDecl	points
>1702	Identifier	points
>1703	IdentifierDeclType	std 
>1704	IdentifierDeclStatement	 
>1705	IdentifierDecl	cameras
>1706	Identifier	cameras
>1707	IdentifierDeclType	std 
>1708	ExpressionStatement	 
>1709	CallExpression	ReadListFile ( list_file , images )
>1710	ArgumentList	list_file
>1711	Argument	images
>1712	Identifier	images
>1713	Argument	list_file
>1714	Identifier	list_file
>1715	Callee	ReadListFile
>1716	Identifier	ReadListFile
>1717	IdentifierDeclStatement	 
>1718	IdentifierDecl	images
>1719	Identifier	images
>1720	IdentifierDeclType	std 
>1721	IfStatement	if ( f == NULL )
>1722	CompoundStatement	 
>1723	ReturnStatement	 
>1724	PrimaryExpression	1
>1725	ExpressionStatement	 
>1726	CallExpression	printf ( \"Error opening file %s for reading\n\" , list_file )
>1727	ArgumentList	\"Error opening file %s for reading\n\"
>1728	Argument	list_file
>1729	Identifier	list_file
>1730	Argument	\"Error opening file %s for reading\n\"
>1731	PrimaryExpression	\"Error opening file %s for reading\n\"
>1732	Callee	printf
>1733	Identifier	printf
>1734	Condition	 
>1735	EqualityExpression	f == NULL
>1736	Identifier	NULL
>1737	Identifier	f
>1738	IdentifierDeclStatement	 
>1739	IdentifierDecl	* f = fopen ( list_file , \"r\" )
>1740	AssignmentExpr	* f = fopen ( list_file , \"r\" )
>1741	CallExpression	fopen ( list_file , \"r\" )
>1742	ArgumentList	list_file
>1743	Argument	\"r\"
>1744	PrimaryExpression	\"r\"
>1745	Argument	list_file
>1746	Identifier	list_file
>1747	Callee	fopen
>1748	Identifier	fopen
>1749	Identifier	f
>1750	Identifier	f
>1751	IdentifierDeclType	FILE *
>1752	IfStatement	if ( argc == 4 )
>1753	ExpressionStatement	 
>1754	AssignmentExpr	output_path = argv [ 3 ]
>1755	ArrayIndexing	argv [ 3 ]
>1756	PrimaryExpression	3
>1757	Identifier	argv
>1758	Identifier	output_path
>1759	Condition	 
>1760	EqualityExpression	argc == 4
>1761	PrimaryExpression	4
>1762	Identifier	argc
>1763	IdentifierDeclStatement	 
>1764	IdentifierDecl	* output_path = \"pmvs\"
>1765	AssignmentExpr	* output_path = \"pmvs\"
>1766	PrimaryExpression	\"pmvs\"
>1767	Identifier	output_path
>1768	Identifier	output_path
>1769	IdentifierDeclType	const char *
>1770	IdentifierDeclStatement	 
>1771	IdentifierDecl	* bundle_file = argv [ 2 ]
>1772	AssignmentExpr	* bundle_file = argv [ 2 ]
>1773	ArrayIndexing	argv [ 2 ]
>1774	PrimaryExpression	2
>1775	Identifier	argv
>1776	Identifier	bundle_file
>1777	Identifier	bundle_file
>1778	IdentifierDeclType	const char *
>1779	IdentifierDeclStatement	 
>1780	IdentifierDecl	* list_file = argv [ 1 ]
>1781	AssignmentExpr	* list_file = argv [ 1 ]
>1782	ArrayIndexing	argv [ 1 ]
>1783	PrimaryExpression	1
>1784	Identifier	argv
>1785	Identifier	list_file
>1786	Identifier	list_file
>1787	IdentifierDeclType	const char *
>1788	IfStatement	if ( argc != 3 && argc != 4 )
>1789	CompoundStatement	 
>1790	ReturnStatement	 
>1791	PrimaryExpression	1
>1792	ExpressionStatement	 
>1793	CallExpression	printf ( \"Usage
>1794	ArgumentList	\"Usage
>1795	Argument	argv [ 0 ]
>1796	ArrayIndexing	argv [ 0 ]
>1797	PrimaryExpression	0
>1798	Identifier	argv
>1799	Argument	\"Usage
>1800	PrimaryExpression	\"Usage
>1801	Callee	printf
>1802	Identifier	printf
>1803	Condition	 
>1804	AndExpression	argc != 3 && argc != 4
>1805	EqualityExpression	argc != 4
>1806	PrimaryExpression	4
>1807	Identifier	argc
>1808	EqualityExpression	argc != 3
>1809	PrimaryExpression	3
>1810	Identifier	argc
<10=19,18,11
<11=15,12
<12=14,13
<15=17,16
<19=109,104,27,20
<20=21
<21=25,22
<22=23
<23=24
<25=26
<27=93,28
<28=66,52,43,29
<29=30
<30=39,31
<31=32
<32=33
<33=37,34
<34=35
<35=36
<37=38
<39=40
<40=42,41
<43=50,44
<44=45
<45=47,46
<47=49,48
<50=51
<52=53
<53=65,64,54
<54=63,55
<55=61,56
<56=59,57
<57=58
<59=60
<61=62
<66=80,67
<67=68
<68=70,69
<70=79,71
<71=73,72
<73=77,74
<74=75
<75=76
<77=78
<80=81
<81=83,82
<83=92,84
<84=86,85
<86=90,87
<87=88
<88=89
<90=91
<93=94
<94=102,95
<95=100,98,96
<96=97
<98=99
<100=101
<102=103
<104=105
<105=108,107,106
<109=110
<110=122,121,111
<111=120,112
<112=118,113
<113=116,114
<114=115
<116=117
<118=119
<139=154,153,140
<140=150,147,144,141
<141=143,142
<144=146,145
<147=149,148
<150=152,151
<154=721,705,698,693,682,548,537,339,162,155
<155=156
<156=160,157
<157=158
<158=159
<160=161
<162=331,327,324,163
<163=320,293,266,262,249,179,164
<164=175,165
<165=166
<166=167
<167=171,168
<168=169
<169=170
<171=172
<172=174,173
<175=176
<176=178,177
<179=241,237,234,180
<180=227,210,203,181
<181=199,182
<182=183
<183=197,184
<184=195,193,189,185
<185=186
<186=188,187
<189=190
<190=192,191
<193=194
<195=196
<197=198
<199=200
<200=202,201
<203=207,204
<204=206,205
<207=209,208
<210=211
<211=225,212
<212=223,221,217,213
<213=214
<214=216,215
<217=218
<218=220,219
<221=222
<223=224
<225=226
<227=231,228
<228=230,229
<231=233,232
<234=236,235
<237=238
<238=240,239
<241=242
<242=243
<243=248,247,244
<244=246,245
<249=250
<250=260,251
<251=258,256,252
<252=253
<253=255,254
<256=257
<258=259
<260=261
<262=263
<263=265,264
<266=267
<267=291,268
<268=289,287,281,275,269
<269=270
<270=272,271
<272=274,273
<275=276
<276=278,277
<278=280,279
<281=282
<282=284,283
<284=286,285
<287=288
<289=290
<291=292
<293=294
<294=318,295
<295=316,314,308,302,296
<296=297
<297=299,298
<299=301,300
<302=303
<303=305,304
<305=307,306
<308=309
<309=311,310
<311=313,312
<314=315
<316=317
<318=319
<320=321
<321=323,322
<324=326,325
<327=328
<328=330,329
<331=332
<332=333
<333=338,337,334
<334=336,335
<339=529,525,522,340
<340=512,507,502,460,415,394,390,384,367,350,341
<341=342
<342=346,343
<343=344
<344=345
<346=347
<347=349,348
<350=351
<351=365,352
<352=361,359,353
<353=354
<354=356,355
<356=358,357
<359=360
<361=362
<362=364,363
<365=366
<367=368
<368=382,369
<369=378,376,370
<370=371
<371=373,372
<373=375,374
<376=377
<378=379
<379=381,380
<382=383
<384=385
<385=387,386
<387=389,388
<390=391
<391=393,392
<394=395
<395=413,396
<396=411,409,405,401,397
<397=398
<398=400,399
<401=402
<402=404,403
<405=406
<406=408,407
<409=410
<411=412
<413=414
<415=416
<416=458,417
<417=456,454,450,446,442,438,434,430,426,422,418
<418=419
<419=421,420
<422=423
<423=425,424
<426=427
<427=429,428
<430=431
<431=433,432
<434=435
<435=437,436
<438=439
<439=441,440
<442=443
<443=445,444
<446=447
<447=449,448
<450=451
<451=453,452
<454=455
<456=457
<458=459
<460=498,484,461
<461=462
<462=463
<463=464
<464=482,465
<465=480,478,474,470,466
<466=467
<467=469,468
<470=471
<471=473,472
<474=475
<475=477,476
<478=479
<480=481
<482=483
<484=485
<485=486
<486=496,487
<487=494,492,488
<488=489
<489=491,490
<492=493
<494=495
<496=497
<498=499
<499=501,500
<502=503
<503=506,505,504
<507=508
<508=511,510,509
<512=519,516,513
<513=515,514
<516=518,517
<519=521,520
<522=524,523
<525=526
<526=528,527
<529=530
<530=531
<531=536,535,532
<532=534,533
<537=538
<538=546,539
<539=544,542,540
<540=541
<542=543
<544=545
<546=547
<548=676,628,549
<549=550
<550=622,574,551
<551=552
<552=570,553
<553=554
<554=568,555
<555=566,564,560,556
<556=557
<557=559,558
<560=561
<561=563,562
<564=565
<566=567
<568=569
<570=571
<571=573,572
<574=618,605,601,592,575
<575=576
<576=590,577
<577=588,586,582,578
<578=579
<579=581,580
<582=583
<583=585,584
<586=587
<588=589
<590=591
<592=593
<593=599,594
<594=597,595
<595=596
<597=598
<599=600
<601=602
<602=604,603
<605=606
<606=616,607
<607=614,612,608
<608=609
<609=611,610
<612=613
<614=615
<616=617
<618=619
<619=621,620
<622=623
<623=625,624
<625=627,626
<628=672,659,655,646,629
<629=630
<630=644,631
<631=642,640,636,632
<632=633
<633=635,634
<636=637
<637=639,638
<640=641
<642=643
<644=645
<646=647
<647=653,648
<648=651,649
<649=650
<651=652
<653=654
<655=656
<656=658,657
<659=660
<660=670,661
<661=668,666,662
<662=663
<663=665,664
<666=667
<668=669
<670=671
<672=673
<673=675,674
<676=677
<677=679,678
<679=681,680
<682=683
<683=691,684
<684=689,687,685
<685=686
<687=688
<689=690
<691=692
<693=694
<694=697,696,695
<698=702,699
<699=701,700
<702=704,703
<705=717,706
<706=708,707
<708=709
<709=715,710
<710=713,711
<711=712
<713=714
<715=716
<717=718
<718=720,719
<721=722
<722=734,733,723
<723=732,724
<724=730,725
<725=728,726
<726=727
<728=729
<730=731
<780=798,797,781
<781=794,791,788,785,782
<782=784,783
<785=787,786
<788=790,789
<791=793,792
<794=796,795
<798=1572,1563,1558,1547,1533,1532,1531,1530,1529,1528,1527,1526,799,806,815,824,833,844,853,866,875,882,891,902,911,920,929,938,947,956,965,974,983,992,1006,1017,1426,1433,1442,1453,1464,1475,1484,1499,1508,1509,1510,1511,1512,1513,1514,1515,1516,1517,1518,1519,1520,1521,1522,1523,1524,1525
<799=800
<800=804,801
<801=802
<802=803
<804=805
<806=807
<807=813,808
<808=811,809
<809=810
<811=812
<813=814
<815=816
<816=822,817
<817=820,818
<818=819
<820=821
<822=823
<824=825
<825=831,826
<826=829,827
<827=828
<829=830
<831=832
<833=834
<834=842,835
<835=840,838,836
<836=837
<838=839
<840=841
<842=843
<844=845
<845=851,846
<846=849,847
<847=848
<849=850
<851=852
<853=854
<854=864,855
<855=862,860,858,856
<856=857
<858=859
<860=861
<862=863
<864=865
<866=867
<867=873,868
<868=871,869
<869=870
<871=872
<873=874
<875=876
<876=880,877
<877=878
<878=879
<880=881
<882=883
<883=889,884
<884=887,885
<885=886
<887=888
<889=890
<891=892
<892=900,893
<893=898,896,894
<894=895
<896=897
<898=899
<900=901
<902=903
<903=909,904
<904=907,905
<905=906
<907=908
<909=910
<911=912
<912=918,913
<913=916,914
<914=915
<916=917
<918=919
<920=921
<921=927,922
<922=925,923
<923=924
<925=926
<927=928
<929=930
<930=936,931
<931=934,932
<932=933
<934=935
<936=937
<938=939
<939=945,940
<940=943,941
<941=942
<943=944
<945=946
<947=948
<948=954,949
<949=952,950
<950=951
<952=953
<954=955
<956=957
<957=963,958
<958=961,959
<959=960
<961=962
<963=964
<965=966
<966=972,967
<967=970,968
<968=969
<970=971
<972=973
<974=975
<975=981,976
<976=979,977
<977=978
<979=980
<981=982
<983=984
<984=990,985
<985=988,986
<986=987
<988=989
<990=991
<992=993
<993=1005,1004,994
<994=1003,995
<995=1001,996
<996=999,997
<997=998
<999=1000
<1001=1002
<1006=1007
<1007=1015,1008
<1008=1013,1011,1009
<1009=1010
<1011=1012
<1013=1014
<1015=1016
<1017=1418,1414,1411,1018
<1018=1401,1396,1383,1369,1362,1351,1340,1329,1322,1304,1277,1233,1228,1209,1192,1183,1158,1133,1108,1101,1074,1056,1036,1023,1019
<1019=1020
<1020=1022,1021
<1023=1024
<1024=1034,1025
<1025=1032,1030,1028,1026
<1026=1027
<1028=1029
<1030=1031
<1032=1033
<1034=1035
<1036=1037
<1037=1054,1038
<1038=1052,1050,1043,1041,1039
<1039=1040
<1041=1042
<1043=1044
<1044=1046,1045
<1046=1047
<1047=1049,1048
<1050=1051
<1052=1053
<1054=1055
<1056=1057
<1057=1073,1072,1058
<1058=1071,1059
<1059=1065,1060
<1060=1063,1061
<1061=1062
<1063=1064
<1065=1066
<1066=1068,1067
<1068=1070,1069
<1074=1075
<1075=1100,1099,1076
<1076=1098,1077
<1077=1092,1078
<1078=1090,1079
<1079=1080
<1080=1082,1081
<1082=1084,1083
<1084=1085
<1085=1087,1086
<1087=1089,1088
<1090=1091
<1092=1093
<1093=1095,1094
<1095=1097,1096
<1101=1102
<1102=1106,1103
<1103=1104
<1104=1105
<1106=1107
<1108=1109
<1109=1131,1110
<1110=1129,1127,1123,1119,1115,1111
<1111=1112
<1112=1114,1113
<1115=1116
<1116=1118,1117
<1119=1120
<1120=1122,1121
<1123=1124
<1124=1126,1125
<1127=1128
<1129=1130
<1131=1132
<1133=1134
<1134=1156,1135
<1135=1154,1152,1148,1144,1140,1136
<1136=1137
<1137=1139,1138
<1140=1141
<1141=1143,1142
<1144=1145
<1145=1147,1146
<1148=1149
<1149=1151,1150
<1152=1153
<1154=1155
<1156=1157
<1158=1159
<1159=1181,1160
<1160=1179,1177,1173,1169,1165,1161
<1161=1162
<1162=1164,1163
<1165=1166
<1166=1168,1167
<1169=1170
<1170=1172,1171
<1173=1174
<1174=1176,1175
<1177=1178
<1179=1180
<1181=1182
<1183=1184
<1184=1190,1185
<1185=1188,1186
<1186=1187
<1188=1189
<1190=1191
<1192=1193
<1193=1207,1194
<1194=1205,1203,1201,1197,1195
<1195=1196
<1197=1198
<1198=1200,1199
<1201=1202
<1203=1204
<1205=1206
<1207=1208
<1209=1210
<1210=1226,1211
<1211=1224,1222,1220,1218,1216,1214,1212
<1212=1213
<1214=1215
<1216=1217
<1218=1219
<1220=1221
<1222=1223
<1224=1225
<1226=1227
<1228=1229
<1229=1232,1231,1230
<1233=1234
<1234=1276,1275,1274,1235
<1235=1273,1236
<1236=1270,1267,1264,1261,1258,1255,1252,1249,1246,1243,1240,1237
<1237=1239,1238
<1240=1242,1241
<1243=1245,1244
<1246=1248,1247
<1249=1251,1250
<1252=1254,1253
<1255=1257,1256
<1258=1260,1259
<1261=1263,1262
<1264=1266,1265
<1267=1269,1268
<1270=1272,1271
<1277=1278
<1278=1303,1302,1301,1279
<1279=1300,1280
<1280=1297,1296,1291,1290,1289,1284,1283,1282,1281
<1284=1286,1285
<1286=1288,1287
<1291=1293,1292
<1293=1295,1294
<1297=1299,1298
<1304=1305
<1305=1320,1306
<1306=1311,1309,1307
<1307=1308
<1309=1310
<1311=1312
<1312=1314,1313
<1314=1315
<1315=1317,1316
<1317=1319,1318
<1320=1321
<1322=1326,1323
<1323=1325,1324
<1326=1328,1327
<1329=1330
<1330=1339,1338,1331
<1331=1337,1332
<1332=1334,1333
<1334=1336,1335
<1340=1341
<1341=1350,1349,1342
<1342=1348,1343
<1343=1345,1344
<1345=1347,1346
<1351=1352
<1352=1361,1360,1353
<1353=1359,1354
<1354=1356,1355
<1356=1358,1357
<1362=1363
<1363=1367,1364
<1364=1365
<1365=1366
<1367=1368
<1369=1370
<1370=1382,1381,1371
<1371=1380,1372
<1372=1378,1373
<1373=1376,1374
<1374=1375
<1376=1377
<1378=1379
<1383=1384
<1384=1394,1385
<1385=1392,1390,1388,1386
<1386=1387
<1388=1389
<1390=1391
<1392=1393
<1394=1395
<1396=1397
<1397=1400,1399,1398
<1401=1403,1402
<1403=1404
<1404=1406,1405
<1406=1408,1407
<1408=1410,1409
<1411=1413,1412
<1414=1415
<1415=1417,1416
<1418=1419
<1419=1420
<1420=1425,1424,1421
<1421=1423,1422
<1426=1427
<1427=1432,1431,1428
<1428=1430,1429
<1433=1434
<1434=1440,1435
<1435=1438,1436
<1436=1437
<1438=1439
<1440=1441
<1442=1443
<1443=1451,1444
<1444=1449,1447,1445
<1445=1446
<1447=1448
<1449=1450
<1451=1452
<1453=1454
<1454=1462,1455
<1455=1460,1458,1456
<1456=1457
<1458=1459
<1460=1461
<1462=1463
<1464=1465
<1465=1473,1466
<1466=1471,1469,1467
<1467=1468
<1469=1470
<1471=1472
<1473=1474
<1475=1476
<1476=1482,1477
<1477=1480,1478
<1478=1479
<1480=1481
<1482=1483
<1484=1485
<1485=1497,1486
<1486=1495,1493,1491,1489,1487
<1487=1488
<1489=1490
<1491=1492
<1493=1494
<1495=1496
<1497=1498
<1499=1500
<1500=1506,1501
<1501=1504,1502
<1502=1503
<1504=1505
<1506=1507
<1533=1534
<1534=1546,1545,1535
<1535=1544,1536
<1536=1542,1537
<1537=1540,1538
<1538=1539
<1540=1541
<1542=1543
<1547=1548
<1548=1556,1549
<1549=1554,1552,1550
<1550=1551
<1552=1553
<1554=1555
<1556=1557
<1558=1559
<1559=1562,1561,1560
<1563=1564
<1564=1570,1565
<1565=1568,1566
<1566=1567
<1568=1569
<1570=1571
<1572=1573
<1573=1585,1584,1574
<1574=1583,1575
<1575=1582,1576
<1576=1578,1577
<1578=1579
<1579=1581,1580
<1627=1636,1635,1628
<1628=1632,1629
<1629=1631,1630
<1632=1634,1633
<1636=1788,1779,1770,1763,1752,1738,1721,1717,1708,1704,1700,1696,1683,1668,1661,1652,1645,1644,1643,1642,1641,1640,1639,1637
<1637=1638
<1645=1646
<1646=1650,1647
<1647=1648
<1648=1649
<1650=1651
<1652=1653
<1653=1659,1654
<1654=1657,1655
<1655=1656
<1657=1658
<1659=1660
<1661=1662
<1662=1666,1663
<1663=1664
<1664=1665
<1666=1667
<1668=1669
<1669=1681,1670
<1670=1679,1677,1675,1673,1671
<1671=1672
<1673=1674
<1675=1676
<1677=1678
<1679=1680
<1681=1682
<1683=1684
<1684=1694,1685
<1685=1692,1690,1688,1686
<1686=1687
<1688=1689
<1690=1691
<1692=1693
<1694=1695
<1696=1697
<1697=1699,1698
<1700=1701
<1701=1703,1702
<1704=1705
<1705=1707,1706
<1708=1709
<1709=1715,1710
<1710=1713,1711
<1711=1712
<1713=1714
<1715=1716
<1717=1718
<1718=1720,1719
<1721=1734,1722
<1722=1725,1723
<1723=1724
<1725=1726
<1726=1732,1727
<1727=1730,1728
<1728=1729
<1730=1731
<1732=1733
<1734=1735
<1735=1737,1736
<1738=1739
<1739=1751,1750,1740
<1740=1749,1741
<1741=1747,1742
<1742=1745,1743
<1743=1744
<1745=1746
<1747=1748
<1752=1759,1753
<1753=1754
<1754=1758,1755
<1755=1757,1756
<1759=1760
<1760=1762,1761
<1763=1764
<1764=1769,1768,1765
<1765=1767,1766
<1770=1771
<1771=1778,1777,1772
<1772=1776,1773
<1773=1775,1774
<1779=1780
<1780=1787,1786,1781
<1781=1785,1782
<1782=1784,1783
<1788=1803,1789
<1789=1792,1790
<1790=1791
<1792=1793
<1793=1801,1794
<1794=1799,1795
<1795=1796
<1796=1798,1797
<1799=1800
<1801=1802
<1803=1804
<1804=1808,1805
<1805=1807,1806
<1808=1810,1809
