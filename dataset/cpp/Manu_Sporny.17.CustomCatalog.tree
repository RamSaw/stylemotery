>3	FunctionDef	CustomCatalog 
>4	ParameterList	 
>5	CompoundStatement	 
>9	FunctionDef	CustomCatalog 
>10	ParameterList	 
>11	CompoundStatement	 
>15	FunctionDef	CustomCatalog 
>16	ParameterList	Node * node
>17	Parameter	 
>18	Identifier	node
>19	ParameterType	Node *
>20	ReturnType	bool
>21	CompoundStatement	 
>22	ReturnStatement	 
>23	Identifier	rval
>24	IfStatement	if ( ! rval )
>25	CompoundStatement	 
>26	ExpressionStatement	 
>27	CallExpression	Exception 
>28	ArgumentList	e
>29	Argument	e
>30	Identifier	e
>31	Callee	Exception 
>32	Identifier	Exception 
>33	IdentifierDeclStatement	 
>34	IdentifierDecl	e = new Exception ( \"Could not initialize custom catalog.\" , \"bitmunk.catalog.InitializationError\" )
>35	AssignmentExpr	e = new Exception ( \"Could not initialize custom catalog.\" , \"bitmunk.catalog.InitializationError\" )
>36	Expression	\"Could not initialize custom catalog.\" , \"bitmunk.catalog.InitializationError\"
>37	PrimaryExpression	\"bitmunk.catalog.InitializationError\"
>38	PrimaryExpression	\"Could not initialize custom catalog.\"
>39	Identifier	e
>40	Identifier	e
>41	IdentifierDeclType	ExceptionRef
>42	Condition	 
>43	UnaryOp	! rval
>44	Identifier	rval
>45	UnaryOperator	!
>46	IfStatement	if ( mMediaLibrary == NULL )
>47	ElseStatement	else
>48	CompoundStatement	 
>49	ExpressionStatement	 
>50	AssignmentExpr	rval = true
>51	Identifier	true
>52	Identifier	rval
>53	ExpressionStatement	 
>54	Statement	 
>55	Statement	 
>56	Statement	 
>57	Statement	 
>58	Statement	 
>59	Statement	 
>60	Statement	 
>61	ExpressionStatement	 
>62	CallExpression	node -> getEventController ( ) -> registerObserver ( & ( * mNetAccessTestDaemon ) , EVENT_TEST_NET_ACCESS )
>63	ArgumentList	& ( * mNetAccessTestDaemon )
>64	Argument	EVENT_TEST_NET_ACCESS
>65	Identifier	EVENT_TEST_NET_ACCESS
>66	Argument	& ( * mNetAccessTestDaemon )
>67	UnaryOp	& ( * mNetAccessTestDaemon )
>68	UnaryOp	* mNetAccessTestDaemon
>69	Identifier	mNetAccessTestDaemon
>70	UnaryOperator	*
>71	UnaryOperator	&
>72	Callee	node -> getEventController ( ) -> registerObserver
>73	PtrMemberAccess	node -> getEventController ( ) -> registerObserver
>74	Identifier	registerObserver
>75	CallExpression	node -> getEventController ( )
>76	ArgumentList	 
>77	Callee	node -> getEventController
>78	PtrMemberAccess	node -> getEventController
>79	Identifier	getEventController
>80	Identifier	node
>81	ExpressionStatement	 
>82	AssignmentExpr	mNetAccessTestDaemon = new ObserverDelegate < CustomCatalog > ( this , & CustomCatalog 
>83	Expression	this , & CustomCatalog 
>84	UnaryOp	& CustomCatalog 
>85	Identifier	CustomCatalog 
>86	UnaryOperator	&
>87	Identifier	this
>88	Identifier	mNetAccessTestDaemon
>89	ExpressionStatement	 
>90	Statement	 
>91	Statement	 
>92	Statement	 
>93	Statement	 
>94	Statement	 
>95	Statement	 
>96	Statement	 
>97	ExpressionStatement	 
>98	CallExpression	node -> getEventController ( ) -> registerObserver ( & ( * mListingSyncDaemon ) , EVENT_SYNC_SELLER_LISTINGS )
>99	ArgumentList	& ( * mListingSyncDaemon )
>100	Argument	EVENT_SYNC_SELLER_LISTINGS
>101	Identifier	EVENT_SYNC_SELLER_LISTINGS
>102	Argument	& ( * mListingSyncDaemon )
>103	UnaryOp	& ( * mListingSyncDaemon )
>104	UnaryOp	* mListingSyncDaemon
>105	Identifier	mListingSyncDaemon
>106	UnaryOperator	*
>107	UnaryOperator	&
>108	Callee	node -> getEventController ( ) -> registerObserver
>109	PtrMemberAccess	node -> getEventController ( ) -> registerObserver
>110	Identifier	registerObserver
>111	CallExpression	node -> getEventController ( )
>112	ArgumentList	 
>113	Callee	node -> getEventController
>114	PtrMemberAccess	node -> getEventController
>115	Identifier	getEventController
>116	Identifier	node
>117	ExpressionStatement	 
>118	AssignmentExpr	mListingSyncDaemon = new ObserverDelegate < CustomCatalog > ( this , & CustomCatalog 
>119	Expression	this , & CustomCatalog 
>120	UnaryOp	& CustomCatalog 
>121	Identifier	CustomCatalog 
>122	UnaryOperator	&
>123	Identifier	this
>124	Identifier	mListingSyncDaemon
>125	ExpressionStatement	 
>126	Statement	 
>127	Statement	 
>128	Statement	 
>129	Statement	 
>130	Statement	 
>131	Statement	 
>132	Statement	 
>133	ExpressionStatement	 
>134	CallExpression	node -> getEventController ( ) -> registerObserver ( & ( * mAutoSellObserver ) , EVENT_AUTOSELL , & filter )
>135	ArgumentList	& ( * mAutoSellObserver )
>136	Argument	& filter
>137	UnaryOp	& filter
>138	Identifier	filter
>139	UnaryOperator	&
>140	Argument	EVENT_AUTOSELL
>141	Identifier	EVENT_AUTOSELL
>142	Argument	& ( * mAutoSellObserver )
>143	UnaryOp	& ( * mAutoSellObserver )
>144	UnaryOp	* mAutoSellObserver
>145	Identifier	mAutoSellObserver
>146	UnaryOperator	*
>147	UnaryOperator	&
>148	Callee	node -> getEventController ( ) -> registerObserver
>149	PtrMemberAccess	node -> getEventController ( ) -> registerObserver
>150	Identifier	registerObserver
>151	CallExpression	node -> getEventController ( )
>152	ArgumentList	 
>153	Callee	node -> getEventController
>154	PtrMemberAccess	node -> getEventController
>155	Identifier	getEventController
>156	Identifier	node
>157	ExpressionStatement	 
>158	AssignmentExpr	mAutoSellObserver = new ObserverDelegate < CustomCatalog > ( this , & CustomCatalog 
>159	Expression	this , & CustomCatalog 
>160	UnaryOp	& CustomCatalog 
>161	Identifier	CustomCatalog 
>162	UnaryOperator	&
>163	Identifier	this
>164	Identifier	mAutoSellObserver
>165	ExpressionStatement	 
>166	AssignmentExpr	filter [ \"details\" ] [ \"userData\" ] [ \"source\" ] = \"purchase\"
>167	PrimaryExpression	\"purchase\"
>168	ArrayIndexing	filter [ \"details\" ] [ \"userData\" ] [ \"source\" ]
>169	PrimaryExpression	\"source\"
>170	ArrayIndexing	filter [ \"details\" ] [ \"userData\" ]
>171	PrimaryExpression	\"userData\"
>172	ArrayIndexing	filter [ \"details\" ]
>173	PrimaryExpression	\"details\"
>174	Identifier	filter
>175	IdentifierDeclStatement	 
>176	IdentifierDecl	filter
>177	Identifier	filter
>178	IdentifierDeclType	DynamicObject
>179	ExpressionStatement	 
>180	Statement	 
>181	Statement	 
>182	Statement	 
>183	Statement	 
>184	Statement	 
>185	Statement	 
>186	Statement	 
>187	ExpressionStatement	 
>188	CallExpression	node -> getEventController ( ) -> registerObserver ( & ( * mUserLoggedInObserver ) , EVENT_USER_LOGGED_IN )
>189	ArgumentList	& ( * mUserLoggedInObserver )
>190	Argument	EVENT_USER_LOGGED_IN
>191	Identifier	EVENT_USER_LOGGED_IN
>192	Argument	& ( * mUserLoggedInObserver )
>193	UnaryOp	& ( * mUserLoggedInObserver )
>194	UnaryOp	* mUserLoggedInObserver
>195	Identifier	mUserLoggedInObserver
>196	UnaryOperator	*
>197	UnaryOperator	&
>198	Callee	node -> getEventController ( ) -> registerObserver
>199	PtrMemberAccess	node -> getEventController ( ) -> registerObserver
>200	Identifier	registerObserver
>201	CallExpression	node -> getEventController ( )
>202	ArgumentList	 
>203	Callee	node -> getEventController
>204	PtrMemberAccess	node -> getEventController
>205	Identifier	getEventController
>206	Identifier	node
>207	ExpressionStatement	 
>208	AssignmentExpr	mUserLoggedInObserver = new ObserverDelegate < CustomCatalog > ( this , & CustomCatalog 
>209	Expression	this , & CustomCatalog 
>210	UnaryOp	& CustomCatalog 
>211	Identifier	CustomCatalog 
>212	UnaryOperator	&
>213	Identifier	this
>214	Identifier	mUserLoggedInObserver
>215	ExpressionStatement	 
>216	CallExpression	mMediaLibrary -> addMediaLibraryExtension ( this )
>217	ArgumentList	this
>218	Argument	this
>219	Identifier	this
>220	Callee	mMediaLibrary -> addMediaLibraryExtension
>221	PtrMemberAccess	mMediaLibrary -> addMediaLibraryExtension
>222	Identifier	addMediaLibraryExtension
>223	Identifier	mMediaLibrary
>224	CompoundStatement	 
>225	ExpressionStatement	 
>226	CallExpression	Exception 
>227	ArgumentList	e
>228	Argument	e
>229	Identifier	e
>230	Callee	Exception 
>231	Identifier	Exception 
>232	IdentifierDeclStatement	 
>233	IdentifierDecl	e = new Exception ( \"Could not access media library.\" , \"bitmunk.catalog.NoMediaLibrary\" )
>234	AssignmentExpr	e = new Exception ( \"Could not access media library.\" , \"bitmunk.catalog.NoMediaLibrary\" )
>235	Expression	\"Could not access media library.\" , \"bitmunk.catalog.NoMediaLibrary\"
>236	PrimaryExpression	\"bitmunk.catalog.NoMediaLibrary\"
>237	PrimaryExpression	\"Could not access media library.\"
>238	Identifier	e
>239	Identifier	e
>240	IdentifierDeclType	ExceptionRef
>241	Condition	 
>242	EqualityExpression	mMediaLibrary == NULL
>243	Identifier	NULL
>244	Identifier	mMediaLibrary
>245	ExpressionStatement	 
>246	CallExpression	node -> getModuleApiByType ( \"bitmunk.medialibrary\" )
>247	ArgumentList	\"bitmunk.medialibrary\"
>248	Argument	\"bitmunk.medialibrary\"
>249	PrimaryExpression	\"bitmunk.medialibrary\"
>250	Callee	node -> getModuleApiByType
>251	PtrMemberAccess	node -> getModuleApiByType
>252	Identifier	getModuleApiByType
>253	Identifier	node
>254	Statement	 
>255	Statement	 
>256	Statement	 
>257	Statement	 
>258	Statement	 
>259	Statement	 
>260	Statement	 
>261	ExpressionStatement	 
>262	AssignmentExpr	mNode = node
>263	Identifier	node
>264	Identifier	mNode
>265	IdentifierDeclStatement	 
>266	IdentifierDecl	rval = false
>267	AssignmentExpr	rval = false
>268	Identifier	false
>269	Identifier	false
>270	Identifier	rval
>271	IdentifierDeclType	bool
>307	FunctionDef	_schedulePayeeSchemeUpdatedEvent (Node * node , PayeeSchemeId psId , UserId userId , bool added)
>308	ParameterList	Node * node , PayeeSchemeId psId , UserId userId , bool added
>309	Parameter	 
>310	Identifier	added
>311	ParameterType	bool
>312	Parameter	 
>313	Identifier	userId
>314	ParameterType	UserId
>315	Parameter	 
>316	Identifier	psId
>317	ParameterType	PayeeSchemeId
>318	Parameter	 
>319	Identifier	node
>320	ParameterType	Node *
>321	ReturnType	static bool
>322	CompoundStatement	 
>323	ReturnStatement	 
>324	Identifier	rval
>325	ExpressionStatement	 
>326	CallExpression	node -> getEventController ( ) -> schedule ( e )
>327	ArgumentList	e
>328	Argument	e
>329	Identifier	e
>330	Callee	node -> getEventController ( ) -> schedule
>331	PtrMemberAccess	node -> getEventController ( ) -> schedule
>332	Identifier	schedule
>333	CallExpression	node -> getEventController ( )
>334	ArgumentList	 
>335	Callee	node -> getEventController
>336	PtrMemberAccess	node -> getEventController
>337	Identifier	getEventController
>338	Identifier	node
>339	ExpressionStatement	 
>340	AssignmentExpr	e [ \"details\" ] [ \"isNew\" ] = added
>341	Identifier	added
>342	ArrayIndexing	e [ \"details\" ] [ \"isNew\" ]
>343	PrimaryExpression	\"isNew\"
>344	ArrayIndexing	e [ \"details\" ]
>345	PrimaryExpression	\"details\"
>346	Identifier	e
>347	ExpressionStatement	 
>348	AssignmentExpr	e [ \"details\" ] [ \"userId\" ] = userId
>349	Identifier	userId
>350	ArrayIndexing	e [ \"details\" ] [ \"userId\" ]
>351	PrimaryExpression	\"userId\"
>352	ArrayIndexing	e [ \"details\" ]
>353	PrimaryExpression	\"details\"
>354	Identifier	e
>355	ExpressionStatement	 
>356	AssignmentExpr	e [ \"details\" ] [ \"payeeSchemeId\" ] = psId
>357	Identifier	psId
>358	ArrayIndexing	e [ \"details\" ] [ \"payeeSchemeId\" ]
>359	PrimaryExpression	\"payeeSchemeId\"
>360	ArrayIndexing	e [ \"details\" ]
>361	PrimaryExpression	\"details\"
>362	Identifier	e
>363	ExpressionStatement	 
>364	PrimaryExpression	\".updated\"
>365	Statement	 
>366	Statement	 
>367	Statement	 
>368	Statement	 
>369	Statement	 
>370	Statement	 
>371	IdentifierDeclStatement	 
>372	IdentifierDecl	e
>373	Identifier	e
>374	IdentifierDeclType	Event
>375	IdentifierDeclStatement	 
>376	IdentifierDecl	rval = true
>377	AssignmentExpr	rval = true
>378	Identifier	true
>379	Identifier	true
>380	Identifier	rval
>381	IdentifierDeclType	bool
>396	FunctionDef	CustomCatalog 
>397	ParameterList	Node * node
>398	Parameter	 
>399	Identifier	node
>400	ParameterType	Node *
>401	ReturnType	void
>402	CompoundStatement	 
>403	IfStatement	if ( mMediaLibrary != NULL )
>404	CompoundStatement	 
>405	ExpressionStatement	 
>406	AssignmentExpr	mMediaLibrary = NULL
>407	Identifier	NULL
>408	Identifier	mMediaLibrary
>409	ExpressionStatement	 
>410	CallExpression	mMediaLibrary -> removeMediaLibraryExtension ( this )
>411	ArgumentList	this
>412	Argument	this
>413	Identifier	this
>414	Callee	mMediaLibrary -> removeMediaLibraryExtension
>415	PtrMemberAccess	mMediaLibrary -> removeMediaLibraryExtension
>416	Identifier	removeMediaLibraryExtension
>417	Identifier	mMediaLibrary
>418	ExpressionStatement	 
>419	Statement	 
>420	Statement	 
>421	Statement	 
>422	Statement	 
>423	Statement	 
>424	Statement	 
>425	Statement	 
>426	ExpressionStatement	 
>427	CallExpression	mUserLoggedInObserver . setNull ( )
>428	ArgumentList	 
>429	Callee	mUserLoggedInObserver . setNull
>430	MemberAccess	mUserLoggedInObserver . setNull
>431	Identifier	setNull
>432	Identifier	mUserLoggedInObserver
>433	ExpressionStatement	 
>434	CallExpression	node -> getEventController ( ) -> unregisterObserver ( & ( * mUserLoggedInObserver ) , EVENT_USER_LOGGED_IN )
>435	ArgumentList	& ( * mUserLoggedInObserver )
>436	Argument	EVENT_USER_LOGGED_IN
>437	Identifier	EVENT_USER_LOGGED_IN
>438	Argument	& ( * mUserLoggedInObserver )
>439	UnaryOp	& ( * mUserLoggedInObserver )
>440	UnaryOp	* mUserLoggedInObserver
>441	Identifier	mUserLoggedInObserver
>442	UnaryOperator	*
>443	UnaryOperator	&
>444	Callee	node -> getEventController ( ) -> unregisterObserver
>445	PtrMemberAccess	node -> getEventController ( ) -> unregisterObserver
>446	Identifier	unregisterObserver
>447	CallExpression	node -> getEventController ( )
>448	ArgumentList	 
>449	Callee	node -> getEventController
>450	PtrMemberAccess	node -> getEventController
>451	Identifier	getEventController
>452	Identifier	node
>453	ExpressionStatement	 
>454	Statement	 
>455	Statement	 
>456	Statement	 
>457	Statement	 
>458	Statement	 
>459	Statement	 
>460	Statement	 
>461	ExpressionStatement	 
>462	CallExpression	mAutoSellObserver . setNull ( )
>463	ArgumentList	 
>464	Callee	mAutoSellObserver . setNull
>465	MemberAccess	mAutoSellObserver . setNull
>466	Identifier	setNull
>467	Identifier	mAutoSellObserver
>468	ExpressionStatement	 
>469	CallExpression	node -> getEventController ( ) -> unregisterObserver ( & ( * mAutoSellObserver ) , EVENT_AUTOSELL )
>470	ArgumentList	& ( * mAutoSellObserver )
>471	Argument	EVENT_AUTOSELL
>472	Identifier	EVENT_AUTOSELL
>473	Argument	& ( * mAutoSellObserver )
>474	UnaryOp	& ( * mAutoSellObserver )
>475	UnaryOp	* mAutoSellObserver
>476	Identifier	mAutoSellObserver
>477	UnaryOperator	*
>478	UnaryOperator	&
>479	Callee	node -> getEventController ( ) -> unregisterObserver
>480	PtrMemberAccess	node -> getEventController ( ) -> unregisterObserver
>481	Identifier	unregisterObserver
>482	CallExpression	node -> getEventController ( )
>483	ArgumentList	 
>484	Callee	node -> getEventController
>485	PtrMemberAccess	node -> getEventController
>486	Identifier	getEventController
>487	Identifier	node
>488	ExpressionStatement	 
>489	Statement	 
>490	Statement	 
>491	Statement	 
>492	Statement	 
>493	Statement	 
>494	Statement	 
>495	Statement	 
>496	ExpressionStatement	 
>497	CallExpression	mListingSyncDaemon . setNull ( )
>498	ArgumentList	 
>499	Callee	mListingSyncDaemon . setNull
>500	MemberAccess	mListingSyncDaemon . setNull
>501	Identifier	setNull
>502	Identifier	mListingSyncDaemon
>503	ExpressionStatement	 
>504	CallExpression	node -> getEventController ( ) -> unregisterObserver ( & ( * mListingSyncDaemon ) , EVENT_SYNC_SELLER_LISTINGS )
>505	ArgumentList	& ( * mListingSyncDaemon )
>506	Argument	EVENT_SYNC_SELLER_LISTINGS
>507	Identifier	EVENT_SYNC_SELLER_LISTINGS
>508	Argument	& ( * mListingSyncDaemon )
>509	UnaryOp	& ( * mListingSyncDaemon )
>510	UnaryOp	* mListingSyncDaemon
>511	Identifier	mListingSyncDaemon
>512	UnaryOperator	*
>513	UnaryOperator	&
>514	Callee	node -> getEventController ( ) -> unregisterObserver
>515	PtrMemberAccess	node -> getEventController ( ) -> unregisterObserver
>516	Identifier	unregisterObserver
>517	CallExpression	node -> getEventController ( )
>518	ArgumentList	 
>519	Callee	node -> getEventController
>520	PtrMemberAccess	node -> getEventController
>521	Identifier	getEventController
>522	Identifier	node
>523	ExpressionStatement	 
>524	Statement	 
>525	Statement	 
>526	Statement	 
>527	Statement	 
>528	Statement	 
>529	Statement	 
>530	Statement	 
>531	ExpressionStatement	 
>532	CallExpression	mNetAccessTestDaemon . setNull ( )
>533	ArgumentList	 
>534	Callee	mNetAccessTestDaemon . setNull
>535	MemberAccess	mNetAccessTestDaemon . setNull
>536	Identifier	setNull
>537	Identifier	mNetAccessTestDaemon
>538	ExpressionStatement	 
>539	CallExpression	node -> getEventController ( ) -> unregisterObserver ( & ( * mNetAccessTestDaemon ) , EVENT_TEST_NET_ACCESS )
>540	ArgumentList	& ( * mNetAccessTestDaemon )
>541	Argument	EVENT_TEST_NET_ACCESS
>542	Identifier	EVENT_TEST_NET_ACCESS
>543	Argument	& ( * mNetAccessTestDaemon )
>544	UnaryOp	& ( * mNetAccessTestDaemon )
>545	UnaryOp	* mNetAccessTestDaemon
>546	Identifier	mNetAccessTestDaemon
>547	UnaryOperator	*
>548	UnaryOperator	&
>549	Callee	node -> getEventController ( ) -> unregisterObserver
>550	PtrMemberAccess	node -> getEventController ( ) -> unregisterObserver
>551	Identifier	unregisterObserver
>552	CallExpression	node -> getEventController ( )
>553	ArgumentList	 
>554	Callee	node -> getEventController
>555	PtrMemberAccess	node -> getEventController
>556	Identifier	getEventController
>557	Identifier	node
>558	Condition	 
>559	EqualityExpression	mMediaLibrary != NULL
>560	Identifier	NULL
>561	Identifier	mMediaLibrary
>583	FunctionDef	CustomCatalog 
>584	ParameterList	UserId userId , Connection * conn , DatabaseClientRef & dbc
>585	Parameter	 
>586	Identifier	dbc
>587	ParameterType	DatabaseClientRef &
>588	Parameter	 
>589	Identifier	conn
>590	ParameterType	Connection *
>591	Parameter	 
>592	Identifier	userId
>593	ParameterType	UserId
>594	ReturnType	bool
>595	CompoundStatement	 
>596	ReturnStatement	 
>597	Identifier	rval
>598	IfStatement	if ( rval )
>599	CompoundStatement	 
>600	IfStatement	if ( uploadListings )
>601	CompoundStatement	 
>602	CompoundStatement	 
>603	ExpressionStatement	 
>604	CallExpression	mNode -> getEventDaemon ( ) -> add ( e , tnaInterval , - 1 )
>605	ArgumentList	e
>606	Argument	- 1
>607	UnaryOp	- 1
>608	PrimaryExpression	1
>609	UnaryOperator	-
>610	Argument	tnaInterval
>611	Identifier	tnaInterval
>612	Argument	e
>613	Identifier	e
>614	Callee	mNode -> getEventDaemon ( ) -> add
>615	PtrMemberAccess	mNode -> getEventDaemon ( ) -> add
>616	Identifier	add
>617	CallExpression	mNode -> getEventDaemon ( )
>618	ArgumentList	 
>619	Callee	mNode -> getEventDaemon
>620	PtrMemberAccess	mNode -> getEventDaemon
>621	Identifier	getEventDaemon
>622	Identifier	mNode
>623	ExpressionStatement	 
>624	AssignmentExpr	e [ \"details\" ] [ \"userId\" ] = userId
>625	Identifier	userId
>626	ArrayIndexing	e [ \"details\" ] [ \"userId\" ]
>627	PrimaryExpression	\"userId\"
>628	ArrayIndexing	e [ \"details\" ]
>629	PrimaryExpression	\"details\"
>630	Identifier	e
>631	ExpressionStatement	 
>632	AssignmentExpr	e [ \"parallel\" ] = true
>633	Identifier	true
>634	ArrayIndexing	e [ \"parallel\" ]
>635	PrimaryExpression	\"parallel\"
>636	Identifier	e
>637	ExpressionStatement	 
>638	AssignmentExpr	e [ \"type\" ] = EVENT_TEST_NET_ACCESS
>639	Identifier	EVENT_TEST_NET_ACCESS
>640	ArrayIndexing	e [ \"type\" ]
>641	PrimaryExpression	\"type\"
>642	Identifier	e
>643	IdentifierDeclStatement	 
>644	IdentifierDecl	e
>645	Identifier	e
>646	IdentifierDeclType	Event
>647	IfStatement	if ( tnaInterval == 0 )
>648	CompoundStatement	 
>649	ExpressionStatement	 
>650	AssignmentExpr	tnaInterval = 60 * 60 * 1000
>651	MultiplicativeExpression	60 * 60 * 1000
>652	MultiplicativeExpression	60 * 1000
>653	PrimaryExpression	1000
>654	PrimaryExpression	60
>655	PrimaryExpression	60
>656	Identifier	tnaInterval
>657	Condition	 
>658	EqualityExpression	tnaInterval == 0
>659	PrimaryExpression	0
>660	Identifier	tnaInterval
>661	IfStatement	if ( ! cfg . isNull ( ) && cfg -> hasMember ( \"testNetAccessInterval\" ) )
>662	CompoundStatement	 
>663	ExpressionStatement	 
>664	AssignmentExpr	tnaInterval = cfg [ \"testNetAccessInterval\" ] -> getUInt64 ( ) * 1000
>665	MultiplicativeExpression	cfg [ \"testNetAccessInterval\" ] -> getUInt64 ( ) * 1000
>666	PrimaryExpression	1000
>667	CallExpression	cfg [ \"testNetAccessInterval\" ] -> getUInt64 ( )
>668	ArgumentList	 
>669	Callee	cfg [ \"testNetAccessInterval\" ] -> getUInt64
>670	PtrMemberAccess	cfg [ \"testNetAccessInterval\" ] -> getUInt64
>671	Identifier	getUInt64
>672	ArrayIndexing	cfg [ \"testNetAccessInterval\" ]
>673	PrimaryExpression	\"testNetAccessInterval\"
>674	Identifier	cfg
>675	Identifier	tnaInterval
>676	Condition	 
>677	AndExpression	! cfg . isNull ( ) && cfg -> hasMember ( \"testNetAccessInterval\" )
>678	CallExpression	cfg -> hasMember ( \"testNetAccessInterval\" )
>679	ArgumentList	\"testNetAccessInterval\"
>680	Argument	\"testNetAccessInterval\"
>681	PrimaryExpression	\"testNetAccessInterval\"
>682	Callee	cfg -> hasMember
>683	PtrMemberAccess	cfg -> hasMember
>684	Identifier	hasMember
>685	Identifier	cfg
>686	UnaryOp	! cfg . isNull ( )
>687	CallExpression	cfg . isNull ( )
>688	ArgumentList	 
>689	Callee	cfg . isNull
>690	MemberAccess	cfg . isNull
>691	Identifier	isNull
>692	Identifier	cfg
>693	UnaryOperator	!
>694	IdentifierDeclStatement	 
>695	IdentifierDecl	tnaInterval = 0
>696	AssignmentExpr	tnaInterval = 0
>697	PrimaryExpression	0
>698	Identifier	tnaInterval
>699	Identifier	tnaInterval
>700	IdentifierDeclType	uint64_t
>701	CompoundStatement	 
>702	ExpressionStatement	 
>703	CallExpression	mNode -> getEventDaemon ( ) -> add ( e , slInterval , - 1 )
>704	ArgumentList	e
>705	Argument	- 1
>706	UnaryOp	- 1
>707	PrimaryExpression	1
>708	UnaryOperator	-
>709	Argument	slInterval
>710	Identifier	slInterval
>711	Argument	e
>712	Identifier	e
>713	Callee	mNode -> getEventDaemon ( ) -> add
>714	PtrMemberAccess	mNode -> getEventDaemon ( ) -> add
>715	Identifier	add
>716	CallExpression	mNode -> getEventDaemon ( )
>717	ArgumentList	 
>718	Callee	mNode -> getEventDaemon
>719	PtrMemberAccess	mNode -> getEventDaemon
>720	Identifier	getEventDaemon
>721	Identifier	mNode
>722	ExpressionStatement	 
>723	AssignmentExpr	e [ \"details\" ] [ \"userId\" ] = userId
>724	Identifier	userId
>725	ArrayIndexing	e [ \"details\" ] [ \"userId\" ]
>726	PrimaryExpression	\"userId\"
>727	ArrayIndexing	e [ \"details\" ]
>728	PrimaryExpression	\"details\"
>729	Identifier	e
>730	ExpressionStatement	 
>731	AssignmentExpr	e [ \"parallel\" ] = true
>732	Identifier	true
>733	ArrayIndexing	e [ \"parallel\" ]
>734	PrimaryExpression	\"parallel\"
>735	Identifier	e
>736	ExpressionStatement	 
>737	AssignmentExpr	e [ \"type\" ] = EVENT_SYNC_SELLER_LISTINGS
>738	Identifier	EVENT_SYNC_SELLER_LISTINGS
>739	ArrayIndexing	e [ \"type\" ]
>740	PrimaryExpression	\"type\"
>741	Identifier	e
>742	IdentifierDeclStatement	 
>743	IdentifierDecl	e
>744	Identifier	e
>745	IdentifierDeclType	Event
>746	IfStatement	if ( slInterval == 0 )
>747	CompoundStatement	 
>748	ExpressionStatement	 
>749	AssignmentExpr	slInterval = 5 * 60 * 1000
>750	MultiplicativeExpression	5 * 60 * 1000
>751	MultiplicativeExpression	60 * 1000
>752	PrimaryExpression	1000
>753	PrimaryExpression	60
>754	PrimaryExpression	5
>755	Identifier	slInterval
>756	Condition	 
>757	EqualityExpression	slInterval == 0
>758	PrimaryExpression	0
>759	Identifier	slInterval
>760	IfStatement	if ( ! cfg . isNull ( ) && cfg -> hasMember ( \"listingSyncInterval\" ) )
>761	CompoundStatement	 
>762	ExpressionStatement	 
>763	AssignmentExpr	slInterval = cfg [ \"listingSyncInterval\" ] -> getUInt64 ( ) * 1000
>764	MultiplicativeExpression	cfg [ \"listingSyncInterval\" ] -> getUInt64 ( ) * 1000
>765	PrimaryExpression	1000
>766	CallExpression	cfg [ \"listingSyncInterval\" ] -> getUInt64 ( )
>767	ArgumentList	 
>768	Callee	cfg [ \"listingSyncInterval\" ] -> getUInt64
>769	PtrMemberAccess	cfg [ \"listingSyncInterval\" ] -> getUInt64
>770	Identifier	getUInt64
>771	ArrayIndexing	cfg [ \"listingSyncInterval\" ]
>772	PrimaryExpression	\"listingSyncInterval\"
>773	Identifier	cfg
>774	Identifier	slInterval
>775	Condition	 
>776	AndExpression	! cfg . isNull ( ) && cfg -> hasMember ( \"listingSyncInterval\" )
>777	CallExpression	cfg -> hasMember ( \"listingSyncInterval\" )
>778	ArgumentList	\"listingSyncInterval\"
>779	Argument	\"listingSyncInterval\"
>780	PrimaryExpression	\"listingSyncInterval\"
>781	Callee	cfg -> hasMember
>782	PtrMemberAccess	cfg -> hasMember
>783	Identifier	hasMember
>784	Identifier	cfg
>785	UnaryOp	! cfg . isNull ( )
>786	CallExpression	cfg . isNull ( )
>787	ArgumentList	 
>788	Callee	cfg . isNull
>789	MemberAccess	cfg . isNull
>790	Identifier	isNull
>791	Identifier	cfg
>792	UnaryOperator	!
>793	IdentifierDeclStatement	 
>794	IdentifierDecl	slInterval = 0
>795	AssignmentExpr	slInterval = 0
>796	PrimaryExpression	0
>797	Identifier	slInterval
>798	Identifier	slInterval
>799	IdentifierDeclType	uint64_t
>800	ExpressionStatement	 
>801	AssignmentExpr	mListingUpdaterMap [ userId ] = id
>802	Identifier	id
>803	ArrayIndexing	mListingUpdaterMap [ userId ]
>804	Identifier	userId
>805	Identifier	mListingUpdaterMap
>806	IdentifierDeclStatement	 
>807	IdentifierDecl	id = mNode -> getFiberScheduler ( ) -> addFiber ( fiber )
>808	AssignmentExpr	id = mNode -> getFiberScheduler ( ) -> addFiber ( fiber )
>809	CallExpression	mNode -> getFiberScheduler ( ) -> addFiber ( fiber )
>810	ArgumentList	fiber
>811	Argument	fiber
>812	Identifier	fiber
>813	Callee	mNode -> getFiberScheduler ( ) -> addFiber
>814	PtrMemberAccess	mNode -> getFiberScheduler ( ) -> addFiber
>815	Identifier	addFiber
>816	CallExpression	mNode -> getFiberScheduler ( )
>817	ArgumentList	 
>818	Callee	mNode -> getFiberScheduler
>819	PtrMemberAccess	mNode -> getFiberScheduler
>820	Identifier	getFiberScheduler
>821	Identifier	mNode
>822	Identifier	id
>823	Identifier	id
>824	IdentifierDeclType	FiberId
>825	ExpressionStatement	 
>826	CallExpression	fiber -> setUserId ( userId )
>827	ArgumentList	userId
>828	Argument	userId
>829	Identifier	userId
>830	Callee	fiber -> setUserId
>831	PtrMemberAccess	fiber -> setUserId
>832	Identifier	setUserId
>833	Identifier	fiber
>834	IdentifierDeclStatement	 
>835	IdentifierDecl	* fiber = new ListingUpdater ( mNode , this )
>836	AssignmentExpr	* fiber = new ListingUpdater ( mNode , this )
>837	Expression	mNode , this
>838	Identifier	this
>839	Identifier	mNode
>840	Identifier	fiber
>841	Identifier	fiber
>842	IdentifierDeclType	ListingUpdater *
>843	Condition	 
>844	Identifier	uploadListings
>845	IfStatement	if ( ! cfg . isNull ( ) && cfg -> hasMember ( \"uploadListings\" ) )
>846	CompoundStatement	 
>847	ExpressionStatement	 
>848	AssignmentExpr	uploadListings = cfg [ \"uploadListings\" ] -> getBoolean ( )
>849	CallExpression	cfg [ \"uploadListings\" ] -> getBoolean ( )
>850	ArgumentList	 
>851	Callee	cfg [ \"uploadListings\" ] -> getBoolean
>852	PtrMemberAccess	cfg [ \"uploadListings\" ] -> getBoolean
>853	Identifier	getBoolean
>854	ArrayIndexing	cfg [ \"uploadListings\" ]
>855	PrimaryExpression	\"uploadListings\"
>856	Identifier	cfg
>857	Identifier	uploadListings
>858	Condition	 
>859	AndExpression	! cfg . isNull ( ) && cfg -> hasMember ( \"uploadListings\" )
>860	CallExpression	cfg -> hasMember ( \"uploadListings\" )
>861	ArgumentList	\"uploadListings\"
>862	Argument	\"uploadListings\"
>863	PrimaryExpression	\"uploadListings\"
>864	Callee	cfg -> hasMember
>865	PtrMemberAccess	cfg -> hasMember
>866	Identifier	hasMember
>867	Identifier	cfg
>868	UnaryOp	! cfg . isNull ( )
>869	CallExpression	cfg . isNull ( )
>870	ArgumentList	 
>871	Callee	cfg . isNull
>872	MemberAccess	cfg . isNull
>873	Identifier	isNull
>874	Identifier	cfg
>875	UnaryOperator	!
>876	IdentifierDeclStatement	 
>877	IdentifierDecl	cfg = mNode -> getConfigManager ( ) -> getModuleUserConfig ( \"bitmunk.catalog.CustomCatalog\" , userId )
>878	AssignmentExpr	cfg = mNode -> getConfigManager ( ) -> getModuleUserConfig ( \"bitmunk.catalog.CustomCatalog\" , userId )
>879	CallExpression	mNode -> getConfigManager ( ) -> getModuleUserConfig ( \"bitmunk.catalog.CustomCatalog\" , userId )
>880	ArgumentList	\"bitmunk.catalog.CustomCatalog\"
>881	Argument	userId
>882	Identifier	userId
>883	Argument	\"bitmunk.catalog.CustomCatalog\"
>884	PrimaryExpression	\"bitmunk.catalog.CustomCatalog\"
>885	Callee	mNode -> getConfigManager ( ) -> getModuleUserConfig
>886	PtrMemberAccess	mNode -> getConfigManager ( ) -> getModuleUserConfig
>887	Identifier	getModuleUserConfig
>888	CallExpression	mNode -> getConfigManager ( )
>889	ArgumentList	 
>890	Callee	mNode -> getConfigManager
>891	PtrMemberAccess	mNode -> getConfigManager
>892	Identifier	getConfigManager
>893	Identifier	mNode
>894	Identifier	cfg
>895	Identifier	cfg
>896	IdentifierDeclType	Config
>897	IdentifierDeclStatement	 
>898	IdentifierDecl	uploadListings = true
>899	AssignmentExpr	uploadListings = true
>900	Identifier	true
>901	Identifier	true
>902	Identifier	uploadListings
>903	IdentifierDeclType	bool
>904	Condition	 
>905	Identifier	rval
>906	IfStatement	if ( rval )
>907	CompoundStatement	 
>908	IfStatement	if ( rval )
>909	CompoundStatement	 
>910	ExpressionStatement	 
>911	Statement	 
>912	Statement	 
>913	Statement	 
>914	Statement	 
>915	Statement	 
>916	Statement	 
>917	Statement	 
>918	Statement	 
>919	Statement	 
>920	Statement	 
>921	Statement	 
>922	Condition	 
>923	Identifier	rval
>924	ExpressionStatement	 
>925	AssignmentExpr	rval = mCatalogDb . setConfigValue ( userId , \"netaccessToken\" , tmp , conn )
>926	CallExpression	mCatalogDb . setConfigValue ( userId , \"netaccessToken\" , tmp , conn )
>927	ArgumentList	userId
>928	Argument	conn
>929	Identifier	conn
>930	Argument	tmp
>931	Identifier	tmp
>932	Argument	\"netaccessToken\"
>933	PrimaryExpression	\"netaccessToken\"
>934	Argument	userId
>935	Identifier	userId
>936	Callee	mCatalogDb . setConfigValue
>937	MemberAccess	mCatalogDb . setConfigValue
>938	Identifier	setConfigValue
>939	Identifier	mCatalogDb
>940	Identifier	rval
>941	ExpressionStatement	 
>942	Statement	 
>943	Statement	 
>944	Statement	 
>945	Statement	 
>946	Statement	 
>947	Statement	 
>948	Statement	 
>949	Statement	 
>950	Statement	 
>951	Statement	 
>952	Statement	 
>953	IdentifierDeclStatement	 
>954	IdentifierDecl	tmp [ 20 ]
>955	PrimaryExpression	20
>956	Identifier	tmp
>957	IdentifierDeclType	char [ 20 ]
>958	IdentifierDeclStatement	 
>959	IdentifierDecl	n = Random 
>960	AssignmentExpr	n = Random 
>961	CallExpression	Random 
>962	ArgumentList	1
>963	Argument	1000000000
>964	PrimaryExpression	1000000000
>965	Argument	1
>966	PrimaryExpression	1
>967	Callee	Random 
>968	Identifier	Random 
>969	Identifier	n
>970	Identifier	n
>971	IdentifierDeclType	uint64_t
>972	Condition	 
>973	Identifier	rval
>974	ExpressionStatement	 
>975	AssignmentExpr	rval = mCatalogDb . initialize ( conn )
>976	CallExpression	mCatalogDb . initialize ( conn )
>977	ArgumentList	conn
>978	Argument	conn
>979	Identifier	conn
>980	Callee	mCatalogDb . initialize
>981	MemberAccess	mCatalogDb . initialize
>982	Identifier	initialize
>983	Identifier	mCatalogDb
>984	Identifier	rval
>985	IdentifierDeclStatement	 
>986	IdentifierDecl	rval = true
>987	AssignmentExpr	rval = true
>988	Identifier	true
>989	Identifier	true
>990	Identifier	rval
>991	IdentifierDeclType	bool
>1038	FunctionDef	CustomCatalog 
>1039	ParameterList	UserId userId
>1040	Parameter	 
>1041	Identifier	userId
>1042	ParameterType	UserId
>1043	ReturnType	void
>1044	CompoundStatement	 
>1045	CompoundStatement	 
>1046	ExpressionStatement	 
>1047	CallExpression	mNode -> getEventDaemon ( ) -> remove ( e )
>1048	ArgumentList	e
>1049	Argument	e
>1050	Identifier	e
>1051	Callee	mNode -> getEventDaemon ( ) -> remove
>1052	PtrMemberAccess	mNode -> getEventDaemon ( ) -> remove
>1053	Identifier	remove
>1054	CallExpression	mNode -> getEventDaemon ( )
>1055	ArgumentList	 
>1056	Callee	mNode -> getEventDaemon
>1057	PtrMemberAccess	mNode -> getEventDaemon
>1058	Identifier	getEventDaemon
>1059	Identifier	mNode
>1060	ExpressionStatement	 
>1061	AssignmentExpr	e [ \"details\" ] [ \"userId\" ] = userId
>1062	Identifier	userId
>1063	ArrayIndexing	e [ \"details\" ] [ \"userId\" ]
>1064	PrimaryExpression	\"userId\"
>1065	ArrayIndexing	e [ \"details\" ]
>1066	PrimaryExpression	\"details\"
>1067	Identifier	e
>1068	ExpressionStatement	 
>1069	AssignmentExpr	e [ \"parallel\" ] = true
>1070	Identifier	true
>1071	ArrayIndexing	e [ \"parallel\" ]
>1072	PrimaryExpression	\"parallel\"
>1073	Identifier	e
>1074	ExpressionStatement	 
>1075	AssignmentExpr	e [ \"type\" ] = EVENT_TEST_NET_ACCESS
>1076	Identifier	EVENT_TEST_NET_ACCESS
>1077	ArrayIndexing	e [ \"type\" ]
>1078	PrimaryExpression	\"type\"
>1079	Identifier	e
>1080	IdentifierDeclStatement	 
>1081	IdentifierDecl	e
>1082	Identifier	e
>1083	IdentifierDeclType	Event
>1084	CompoundStatement	 
>1085	ExpressionStatement	 
>1086	CallExpression	mNode -> getEventDaemon ( ) -> remove ( e )
>1087	ArgumentList	e
>1088	Argument	e
>1089	Identifier	e
>1090	Callee	mNode -> getEventDaemon ( ) -> remove
>1091	PtrMemberAccess	mNode -> getEventDaemon ( ) -> remove
>1092	Identifier	remove
>1093	CallExpression	mNode -> getEventDaemon ( )
>1094	ArgumentList	 
>1095	Callee	mNode -> getEventDaemon
>1096	PtrMemberAccess	mNode -> getEventDaemon
>1097	Identifier	getEventDaemon
>1098	Identifier	mNode
>1099	ExpressionStatement	 
>1100	AssignmentExpr	e [ \"details\" ] [ \"userId\" ] = userId
>1101	Identifier	userId
>1102	ArrayIndexing	e [ \"details\" ] [ \"userId\" ]
>1103	PrimaryExpression	\"userId\"
>1104	ArrayIndexing	e [ \"details\" ]
>1105	PrimaryExpression	\"details\"
>1106	Identifier	e
>1107	ExpressionStatement	 
>1108	AssignmentExpr	e [ \"parallel\" ] = true
>1109	Identifier	true
>1110	ArrayIndexing	e [ \"parallel\" ]
>1111	PrimaryExpression	\"parallel\"
>1112	Identifier	e
>1113	ExpressionStatement	 
>1114	AssignmentExpr	e [ \"type\" ] = EVENT_SYNC_SELLER_LISTINGS
>1115	Identifier	EVENT_SYNC_SELLER_LISTINGS
>1116	ArrayIndexing	e [ \"type\" ]
>1117	PrimaryExpression	\"type\"
>1118	Identifier	e
>1119	IdentifierDeclStatement	 
>1120	IdentifierDecl	e
>1121	Identifier	e
>1122	IdentifierDeclType	Event
>1123	ExpressionStatement	 
>1124	CallExpression	mListingUpdaterMap . erase ( userId )
>1125	ArgumentList	userId
>1126	Argument	userId
>1127	Identifier	userId
>1128	Callee	mListingUpdaterMap . erase
>1129	MemberAccess	mListingUpdaterMap . erase
>1130	Identifier	erase
>1131	Identifier	mListingUpdaterMap
>1146	FunctionDef	CustomCatalog 
>1147	ParameterList	UserId userId , Ware & ware
>1148	Parameter	 
>1149	Identifier	ware
>1150	ParameterType	Ware &
>1151	Parameter	 
>1152	Identifier	userId
>1153	ParameterType	UserId
>1154	ReturnType	bool
>1155	CompoundStatement	 
>1156	ReturnStatement	 
>1157	Identifier	rval
>1158	IfStatement	if ( rval )
>1159	CompoundStatement	 
>1160	ExpressionStatement	 
>1161	CallExpression	mNode -> getEventController ( ) -> schedule ( ev )
>1162	ArgumentList	ev
>1163	Argument	ev
>1164	Identifier	ev
>1165	Callee	mNode -> getEventController ( ) -> schedule
>1166	PtrMemberAccess	mNode -> getEventController ( ) -> schedule
>1167	Identifier	schedule
>1168	CallExpression	mNode -> getEventController ( )
>1169	ArgumentList	 
>1170	Callee	mNode -> getEventController
>1171	PtrMemberAccess	mNode -> getEventController
>1172	Identifier	getEventController
>1173	Identifier	mNode
>1174	ExpressionStatement	 
>1175	AssignmentExpr	ev [ \"details\" ] [ \"isNew\" ] = false
>1176	Identifier	false
>1177	ArrayIndexing	ev [ \"details\" ] [ \"isNew\" ]
>1178	PrimaryExpression	\"isNew\"
>1179	ArrayIndexing	ev [ \"details\" ]
>1180	PrimaryExpression	\"details\"
>1181	Identifier	ev
>1182	ExpressionStatement	 
>1183	CallExpression	BM_ID_SET ( ev [ \"details\" ] [ \"userId\" ] , userId )
>1184	ArgumentList	ev [ \"details\" ] [ \"userId\" ]
>1185	Argument	userId
>1186	Identifier	userId
>1187	Argument	ev [ \"details\" ] [ \"userId\" ]
>1188	ArrayIndexing	ev [ \"details\" ] [ \"userId\" ]
>1189	PrimaryExpression	\"userId\"
>1190	ArrayIndexing	ev [ \"details\" ]
>1191	PrimaryExpression	\"details\"
>1192	Identifier	ev
>1193	Callee	BM_ID_SET
>1194	Identifier	BM_ID_SET
>1195	ExpressionStatement	 
>1196	CallExpression	BM_ID_SET ( ev [ \"details\" ] [ \"payeeSchemeId\" ] , BM_PAYEE_SCHEME_ID ( ware [ \"payeeSchemeId\" ] ) )
>1197	ArgumentList	ev [ \"details\" ] [ \"payeeSchemeId\" ]
>1198	Argument	BM_PAYEE_SCHEME_ID ( ware [ \"payeeSchemeId\" ] )
>1199	CallExpression	BM_PAYEE_SCHEME_ID ( ware [ \"payeeSchemeId\" ] )
>1200	ArgumentList	ware [ \"payeeSchemeId\" ]
>1201	Argument	ware [ \"payeeSchemeId\" ]
>1202	ArrayIndexing	ware [ \"payeeSchemeId\" ]
>1203	PrimaryExpression	\"payeeSchemeId\"
>1204	Identifier	ware
>1205	Callee	BM_PAYEE_SCHEME_ID
>1206	Identifier	BM_PAYEE_SCHEME_ID
>1207	Argument	ev [ \"details\" ] [ \"payeeSchemeId\" ]
>1208	ArrayIndexing	ev [ \"details\" ] [ \"payeeSchemeId\" ]
>1209	PrimaryExpression	\"payeeSchemeId\"
>1210	ArrayIndexing	ev [ \"details\" ]
>1211	PrimaryExpression	\"details\"
>1212	Identifier	ev
>1213	Callee	BM_ID_SET
>1214	Identifier	BM_ID_SET
>1215	ExpressionStatement	 
>1216	PrimaryExpression	\".updated\"
>1217	Statement	 
>1218	Statement	 
>1219	Statement	 
>1220	Statement	 
>1221	Statement	 
>1222	Statement	 
>1223	IdentifierDeclStatement	 
>1224	IdentifierDecl	ev
>1225	Identifier	ev
>1226	IdentifierDeclType	Event
>1227	ExpressionStatement	 
>1228	CallExpression	mNode -> getEventController ( ) -> schedule ( e )
>1229	ArgumentList	e
>1230	Argument	e
>1231	Identifier	e
>1232	Callee	mNode -> getEventController ( ) -> schedule
>1233	PtrMemberAccess	mNode -> getEventController ( ) -> schedule
>1234	Identifier	schedule
>1235	CallExpression	mNode -> getEventController ( )
>1236	ArgumentList	 
>1237	Callee	mNode -> getEventController
>1238	PtrMemberAccess	mNode -> getEventController
>1239	Identifier	getEventController
>1240	Identifier	mNode
>1241	ExpressionStatement	 
>1242	AssignmentExpr	e [ \"details\" ] [ \"isNew\" ] = wareAdded
>1243	Identifier	wareAdded
>1244	ArrayIndexing	e [ \"details\" ] [ \"isNew\" ]
>1245	PrimaryExpression	\"isNew\"
>1246	ArrayIndexing	e [ \"details\" ]
>1247	PrimaryExpression	\"details\"
>1248	Identifier	e
>1249	ExpressionStatement	 
>1250	CallExpression	BM_ID_SET ( e [ \"details\" ] [ \"userId\" ] , userId )
>1251	ArgumentList	e [ \"details\" ] [ \"userId\" ]
>1252	Argument	userId
>1253	Identifier	userId
>1254	Argument	e [ \"details\" ] [ \"userId\" ]
>1255	ArrayIndexing	e [ \"details\" ] [ \"userId\" ]
>1256	PrimaryExpression	\"userId\"
>1257	ArrayIndexing	e [ \"details\" ]
>1258	PrimaryExpression	\"details\"
>1259	Identifier	e
>1260	Callee	BM_ID_SET
>1261	Identifier	BM_ID_SET
>1262	ExpressionStatement	 
>1263	CallExpression	BM_ID_SET ( e [ \"details\" ] [ \"wareId\" ] , BM_WARE_ID ( ware [ \"id\" ] ) )
>1264	ArgumentList	e [ \"details\" ] [ \"wareId\" ]
>1265	Argument	BM_WARE_ID ( ware [ \"id\" ] )
>1266	CallExpression	BM_WARE_ID ( ware [ \"id\" ] )
>1267	ArgumentList	ware [ \"id\" ]
>1268	Argument	ware [ \"id\" ]
>1269	ArrayIndexing	ware [ \"id\" ]
>1270	PrimaryExpression	\"id\"
>1271	Identifier	ware
>1272	Callee	BM_WARE_ID
>1273	Identifier	BM_WARE_ID
>1274	Argument	e [ \"details\" ] [ \"wareId\" ]
>1275	ArrayIndexing	e [ \"details\" ] [ \"wareId\" ]
>1276	PrimaryExpression	\"wareId\"
>1277	ArrayIndexing	e [ \"details\" ]
>1278	PrimaryExpression	\"details\"
>1279	Identifier	e
>1280	Callee	BM_ID_SET
>1281	Identifier	BM_ID_SET
>1282	ExpressionStatement	 
>1283	PrimaryExpression	\".updated\"
>1284	Statement	 
>1285	Statement	 
>1286	Statement	 
>1287	Statement	 
>1288	Statement	 
>1289	Statement	 
>1290	IdentifierDeclStatement	 
>1291	IdentifierDecl	e
>1292	Identifier	e
>1293	IdentifierDeclType	Event
>1294	Condition	 
>1295	Identifier	rval
>1296	IfStatement	if ( c != NULL )
>1297	CompoundStatement	 
>1298	ExpressionStatement	 
>1299	CallExpression	c -> close ( )
>1300	ArgumentList	 
>1301	Callee	c -> close
>1302	PtrMemberAccess	c -> close
>1303	Identifier	close
>1304	Identifier	c
>1305	IfStatement	if ( ( rval = c -> begin ( ) ) )
>1306	CompoundStatement	 
>1307	ExpressionStatement	 
>1308	AssignmentExpr	rval = rval ? c -> commit ( ) 
>1309	ConditionalExpression	rval ? c -> commit ( ) 
>1310	AndExpression	c -> rollback ( ) && false
>1311	Identifier	false
>1312	CallExpression	c -> rollback ( )
>1313	ArgumentList	 
>1314	Callee	c -> rollback
>1315	PtrMemberAccess	c -> rollback
>1316	Identifier	rollback
>1317	Identifier	c
>1318	CallExpression	c -> commit ( )
>1319	ArgumentList	 
>1320	Callee	c -> commit
>1321	PtrMemberAccess	c -> commit
>1322	Identifier	commit
>1323	Identifier	c
>1324	Condition	rval
>1325	Identifier	rval
>1326	Identifier	rval
>1327	ExpressionStatement	 
>1328	AssignmentExpr	rval = rval && mCatalogDb . updateWare ( ware , psId , c , & wareAdded )
>1329	AndExpression	rval && mCatalogDb . updateWare ( ware , psId , c , & wareAdded )
>1330	CallExpression	mCatalogDb . updateWare ( ware , psId , c , & wareAdded )
>1331	ArgumentList	ware
>1332	Argument	& wareAdded
>1333	UnaryOp	& wareAdded
>1334	Identifier	wareAdded
>1335	UnaryOperator	&
>1336	Argument	c
>1337	Identifier	c
>1338	Argument	psId
>1339	Identifier	psId
>1340	Argument	ware
>1341	Identifier	ware
>1342	Callee	mCatalogDb . updateWare
>1343	MemberAccess	mCatalogDb . updateWare
>1344	Identifier	updateWare
>1345	Identifier	mCatalogDb
>1346	Identifier	rval
>1347	Identifier	rval
>1348	IfStatement	if ( ware -> hasMember ( \"payeeSchemeId\" ) )
>1349	ElseStatement	else
>1350	CompoundStatement	 
>1351	ExpressionStatement	 
>1352	CallExpression	BM_ID_SET ( ware [ \"payeeSchemeId\" ] , psId )
>1353	ArgumentList	ware [ \"payeeSchemeId\" ]
>1354	Argument	psId
>1355	Identifier	psId
>1356	Argument	ware [ \"payeeSchemeId\" ]
>1357	ArrayIndexing	ware [ \"payeeSchemeId\" ]
>1358	PrimaryExpression	\"payeeSchemeId\"
>1359	Identifier	ware
>1360	Callee	BM_ID_SET
>1361	Identifier	BM_ID_SET
>1362	ExpressionStatement	 
>1363	AssignmentExpr	rval = mCatalogDb . addPayeeScheme ( mNode , userId , psId , ware [ \"description\" ] -> getString ( ) , \
>1364	AndExpression	mCatalogDb . addPayeeScheme ( mNode , userId , psId , ware [ \"description\" ] -> getString ( ) , ware [ \"\
>1365	CallExpression	_schedulePayeeSchemeUpdatedEvent ( mNode , psId , userId , true )
>1366	ArgumentList	mNode
>1367	Argument	true
>1368	Identifier	true
>1369	Argument	userId
>1370	Identifier	userId
>1371	Argument	psId
>1372	Identifier	psId
>1373	Argument	mNode
>1374	Identifier	mNode
>1375	Callee	_schedulePayeeSchemeUpdatedEvent
>1376	Identifier	_schedulePayeeSchemeUpdatedEvent
>1377	CallExpression	mCatalogDb . addPayeeScheme ( mNode , userId , psId , ware [ \"description\" ] -> getString ( ) , ware [ \"payees\" ] , \
>1378	ArgumentList	mNode
>1379	Argument	c
>1380	Identifier	c
>1381	Argument	ware [ \"payees\" ]
>1382	ArrayIndexing	ware [ \"payees\" ]
>1383	PrimaryExpression	\"payees\"
>1384	Identifier	ware
>1385	Argument	ware [ \"description\" ] -> getString ( )
>1386	CallExpression	ware [ \"description\" ] -> getString ( )
>1387	ArgumentList	 
>1388	Callee	ware [ \"description\" ] -> getString
>1389	PtrMemberAccess	ware [ \"description\" ] -> getString
>1390	Identifier	getString
>1391	ArrayIndexing	ware [ \"description\" ]
>1392	PrimaryExpression	\"description\"
>1393	Identifier	ware
>1394	Argument	psId
>1395	Identifier	psId
>1396	Argument	userId
>1397	Identifier	userId
>1398	Argument	mNode
>1399	Identifier	mNode
>1400	Callee	mCatalogDb . addPayeeScheme
>1401	MemberAccess	mCatalogDb . addPayeeScheme
>1402	Identifier	addPayeeScheme
>1403	Identifier	mCatalogDb
>1404	Identifier	rval
>1405	CompoundStatement	 
>1406	ExpressionStatement	 
>1407	AssignmentExpr	rval = mCatalogDb . isPayeeSchemeIdValid ( psId , c )
>1408	CallExpression	mCatalogDb . isPayeeSchemeIdValid ( psId , c )
>1409	ArgumentList	psId
>1410	Argument	c
>1411	Identifier	c
>1412	Argument	psId
>1413	Identifier	psId
>1414	Callee	mCatalogDb . isPayeeSchemeIdValid
>1415	MemberAccess	mCatalogDb . isPayeeSchemeIdValid
>1416	Identifier	isPayeeSchemeIdValid
>1417	Identifier	mCatalogDb
>1418	Identifier	rval
>1419	ExpressionStatement	 
>1420	AssignmentExpr	psId = BM_PAYEE_SCHEME_ID ( ware [ \"payeeSchemeId\" ] )
>1421	CallExpression	BM_PAYEE_SCHEME_ID ( ware [ \"payeeSchemeId\" ] )
>1422	ArgumentList	ware [ \"payeeSchemeId\" ]
>1423	Argument	ware [ \"payeeSchemeId\" ]
>1424	ArrayIndexing	ware [ \"payeeSchemeId\" ]
>1425	PrimaryExpression	\"payeeSchemeId\"
>1426	Identifier	ware
>1427	Callee	BM_PAYEE_SCHEME_ID
>1428	Identifier	BM_PAYEE_SCHEME_ID
>1429	Identifier	psId
>1430	Condition	 
>1431	CallExpression	ware -> hasMember ( \"payeeSchemeId\" )
>1432	ArgumentList	\"payeeSchemeId\"
>1433	Argument	\"payeeSchemeId\"
>1434	PrimaryExpression	\"payeeSchemeId\"
>1435	Callee	ware -> hasMember
>1436	PtrMemberAccess	ware -> hasMember
>1437	Identifier	hasMember
>1438	Identifier	ware
>1439	IdentifierDeclStatement	 
>1440	IdentifierDecl	psId = 0
>1441	AssignmentExpr	psId = 0
>1442	PrimaryExpression	0
>1443	Identifier	psId
>1444	Identifier	psId
>1445	IdentifierDeclType	PayeeSchemeId
>1446	Condition	 
>1447	AssignmentExpr	rval = c -> begin ( )
>1448	CallExpression	c -> begin ( )
>1449	ArgumentList	 
>1450	Callee	c -> begin
>1451	PtrMemberAccess	c -> begin
>1452	Identifier	begin
>1453	Identifier	c
>1454	Identifier	rval
>1455	ExpressionStatement	 
>1456	CallExpression	MO_CAT_DEBUG ( BM_CUSTOMCATALOG_CAT , \"Updating ware, ID
>1457	ArgumentList	BM_CUSTOMCATALOG_CAT
>1458	Argument	BM_WARE_ID ( ware [ \"id\" ] )
>1459	CallExpression	BM_WARE_ID ( ware [ \"id\" ] )
>1460	ArgumentList	ware [ \"id\" ]
>1461	Argument	ware [ \"id\" ]
>1462	ArrayIndexing	ware [ \"id\" ]
>1463	PrimaryExpression	\"id\"
>1464	Identifier	ware
>1465	Callee	BM_WARE_ID
>1466	Identifier	BM_WARE_ID
>1467	Argument	\"Updating ware, ID
>1468	PrimaryExpression	\"Updating ware, ID
>1469	Argument	BM_CUSTOMCATALOG_CAT
>1470	Identifier	BM_CUSTOMCATALOG_CAT
>1471	Callee	MO_CAT_DEBUG
>1472	Identifier	MO_CAT_DEBUG
>1473	Condition	 
>1474	EqualityExpression	c != NULL
>1475	Identifier	NULL
>1476	Identifier	c
>1477	IdentifierDeclStatement	 
>1478	IdentifierDecl	* c = mMediaLibrary -> getConnection ( userId )
>1479	AssignmentExpr	* c = mMediaLibrary -> getConnection ( userId )
>1480	CallExpression	mMediaLibrary -> getConnection ( userId )
>1481	ArgumentList	userId
>1482	Argument	userId
>1483	Identifier	userId
>1484	Callee	mMediaLibrary -> getConnection
>1485	PtrMemberAccess	mMediaLibrary -> getConnection
>1486	Identifier	getConnection
>1487	Identifier	mMediaLibrary
>1488	Identifier	c
>1489	Identifier	c
>1490	IdentifierDeclType	Connection *
>1491	IdentifierDeclStatement	 
>1492	IdentifierDecl	wareAdded = false
>1493	AssignmentExpr	wareAdded = false
>1494	Identifier	false
>1495	Identifier	false
>1496	Identifier	wareAdded
>1497	IdentifierDeclType	bool
>1498	IdentifierDeclStatement	 
>1499	IdentifierDecl	rval = false
>1500	AssignmentExpr	rval = false
>1501	Identifier	false
>1502	Identifier	false
>1503	Identifier	rval
>1504	IdentifierDeclType	bool
>1546	FunctionDef	CustomCatalog 
>1547	ParameterList	UserId userId , Ware & ware
>1548	Parameter	 
>1549	Identifier	ware
>1550	ParameterType	Ware &
>1551	Parameter	 
>1552	Identifier	userId
>1553	ParameterType	UserId
>1554	ReturnType	bool
>1555	CompoundStatement	 
>1556	ReturnStatement	 
>1557	Identifier	rval
>1558	IfStatement	if ( rval )
>1559	CompoundStatement	 
>1560	ExpressionStatement	 
>1561	CallExpression	mNode -> getEventController ( ) -> schedule ( ev )
>1562	ArgumentList	ev
>1563	Argument	ev
>1564	Identifier	ev
>1565	Callee	mNode -> getEventController ( ) -> schedule
>1566	PtrMemberAccess	mNode -> getEventController ( ) -> schedule
>1567	Identifier	schedule
>1568	CallExpression	mNode -> getEventController ( )
>1569	ArgumentList	 
>1570	Callee	mNode -> getEventController
>1571	PtrMemberAccess	mNode -> getEventController
>1572	Identifier	getEventController
>1573	Identifier	mNode
>1574	ExpressionStatement	 
>1575	AssignmentExpr	ev [ \"details\" ] [ \"isNew\" ] = false
>1576	Identifier	false
>1577	ArrayIndexing	ev [ \"details\" ] [ \"isNew\" ]
>1578	PrimaryExpression	\"isNew\"
>1579	ArrayIndexing	ev [ \"details\" ]
>1580	PrimaryExpression	\"details\"
>1581	Identifier	ev
>1582	ExpressionStatement	 
>1583	CallExpression	BM_ID_SET ( ev [ \"details\" ] [ \"userId\" ] , userId )
>1584	ArgumentList	ev [ \"details\" ] [ \"userId\" ]
>1585	Argument	userId
>1586	Identifier	userId
>1587	Argument	ev [ \"details\" ] [ \"userId\" ]
>1588	ArrayIndexing	ev [ \"details\" ] [ \"userId\" ]
>1589	PrimaryExpression	\"userId\"
>1590	ArrayIndexing	ev [ \"details\" ]
>1591	PrimaryExpression	\"details\"
>1592	Identifier	ev
>1593	Callee	BM_ID_SET
>1594	Identifier	BM_ID_SET
>1595	ExpressionStatement	 
>1596	CallExpression	BM_ID_SET ( ev [ \"details\" ] [ \"payeeSchemeId\" ] , BM_PAYEE_SCHEME_ID ( ware [ \"payeeSchemeId\" ] ) )
>1597	ArgumentList	ev [ \"details\" ] [ \"payeeSchemeId\" ]
>1598	Argument	BM_PAYEE_SCHEME_ID ( ware [ \"payeeSchemeId\" ] )
>1599	CallExpression	BM_PAYEE_SCHEME_ID ( ware [ \"payeeSchemeId\" ] )
>1600	ArgumentList	ware [ \"payeeSchemeId\" ]
>1601	Argument	ware [ \"payeeSchemeId\" ]
>1602	ArrayIndexing	ware [ \"payeeSchemeId\" ]
>1603	PrimaryExpression	\"payeeSchemeId\"
>1604	Identifier	ware
>1605	Callee	BM_PAYEE_SCHEME_ID
>1606	Identifier	BM_PAYEE_SCHEME_ID
>1607	Argument	ev [ \"details\" ] [ \"payeeSchemeId\" ]
>1608	ArrayIndexing	ev [ \"details\" ] [ \"payeeSchemeId\" ]
>1609	PrimaryExpression	\"payeeSchemeId\"
>1610	ArrayIndexing	ev [ \"details\" ]
>1611	PrimaryExpression	\"details\"
>1612	Identifier	ev
>1613	Callee	BM_ID_SET
>1614	Identifier	BM_ID_SET
>1615	ExpressionStatement	 
>1616	PrimaryExpression	\".updated\"
>1617	Statement	 
>1618	Statement	 
>1619	Statement	 
>1620	Statement	 
>1621	Statement	 
>1622	Statement	 
>1623	IdentifierDeclStatement	 
>1624	IdentifierDecl	ev
>1625	Identifier	ev
>1626	IdentifierDeclType	Event
>1627	ExpressionStatement	 
>1628	CallExpression	mNode -> getEventController ( ) -> schedule ( e )
>1629	ArgumentList	e
>1630	Argument	e
>1631	Identifier	e
>1632	Callee	mNode -> getEventController ( ) -> schedule
>1633	PtrMemberAccess	mNode -> getEventController ( ) -> schedule
>1634	Identifier	schedule
>1635	CallExpression	mNode -> getEventController ( )
>1636	ArgumentList	 
>1637	Callee	mNode -> getEventController
>1638	PtrMemberAccess	mNode -> getEventController
>1639	Identifier	getEventController
>1640	Identifier	mNode
>1641	ExpressionStatement	 
>1642	CallExpression	BM_ID_SET ( e [ \"details\" ] [ \"userId\" ] , userId )
>1643	ArgumentList	e [ \"details\" ] [ \"userId\" ]
>1644	Argument	userId
>1645	Identifier	userId
>1646	Argument	e [ \"details\" ] [ \"userId\" ]
>1647	ArrayIndexing	e [ \"details\" ] [ \"userId\" ]
>1648	PrimaryExpression	\"userId\"
>1649	ArrayIndexing	e [ \"details\" ]
>1650	PrimaryExpression	\"details\"
>1651	Identifier	e
>1652	Callee	BM_ID_SET
>1653	Identifier	BM_ID_SET
>1654	ExpressionStatement	 
>1655	CallExpression	BM_ID_SET ( e [ \"details\" ] [ \"wareId\" ] , BM_WARE_ID ( ware [ \"id\" ] ) )
>1656	ArgumentList	e [ \"details\" ] [ \"wareId\" ]
>1657	Argument	BM_WARE_ID ( ware [ \"id\" ] )
>1658	CallExpression	BM_WARE_ID ( ware [ \"id\" ] )
>1659	ArgumentList	ware [ \"id\" ]
>1660	Argument	ware [ \"id\" ]
>1661	ArrayIndexing	ware [ \"id\" ]
>1662	PrimaryExpression	\"id\"
>1663	Identifier	ware
>1664	Callee	BM_WARE_ID
>1665	Identifier	BM_WARE_ID
>1666	Argument	e [ \"details\" ] [ \"wareId\" ]
>1667	ArrayIndexing	e [ \"details\" ] [ \"wareId\" ]
>1668	PrimaryExpression	\"wareId\"
>1669	ArrayIndexing	e [ \"details\" ]
>1670	PrimaryExpression	\"details\"
>1671	Identifier	e
>1672	Callee	BM_ID_SET
>1673	Identifier	BM_ID_SET
>1674	ExpressionStatement	 
>1675	PrimaryExpression	\".removed\"
>1676	Statement	 
>1677	Statement	 
>1678	Statement	 
>1679	Statement	 
>1680	Statement	 
>1681	Statement	 
>1682	IdentifierDeclStatement	 
>1683	IdentifierDecl	e
>1684	Identifier	e
>1685	IdentifierDeclType	Event
>1686	Condition	 
>1687	Identifier	rval
>1688	IfStatement	if ( c != NULL )
>1689	CompoundStatement	 
>1690	ExpressionStatement	 
>1691	CallExpression	c -> close ( )
>1692	ArgumentList	 
>1693	Callee	c -> close
>1694	PtrMemberAccess	c -> close
>1695	Identifier	close
>1696	Identifier	c
>1697	ExpressionStatement	 
>1698	AssignmentExpr	rval = rval ? c -> commit ( ) 
>1699	ConditionalExpression	rval ? c -> commit ( ) 
>1700	AndExpression	c -> rollback ( ) && false
>1701	Identifier	false
>1702	CallExpression	c -> rollback ( )
>1703	ArgumentList	 
>1704	Callee	c -> rollback
>1705	PtrMemberAccess	c -> rollback
>1706	Identifier	rollback
>1707	Identifier	c
>1708	CallExpression	c -> commit ( )
>1709	ArgumentList	 
>1710	Callee	c -> commit
>1711	PtrMemberAccess	c -> commit
>1712	Identifier	commit
>1713	Identifier	c
>1714	Condition	rval
>1715	Identifier	rval
>1716	Identifier	rval
>1717	ExpressionStatement	 
>1718	AssignmentExpr	rval = c -> begin ( ) && mCatalogDb . removeWare ( ware , c )
>1719	AndExpression	c -> begin ( ) && mCatalogDb . removeWare ( ware , c )
>1720	CallExpression	mCatalogDb . removeWare ( ware , c )
>1721	ArgumentList	ware
>1722	Argument	c
>1723	Identifier	c
>1724	Argument	ware
>1725	Identifier	ware
>1726	Callee	mCatalogDb . removeWare
>1727	MemberAccess	mCatalogDb . removeWare
>1728	Identifier	removeWare
>1729	Identifier	mCatalogDb
>1730	CallExpression	c -> begin ( )
>1731	ArgumentList	 
>1732	Callee	c -> begin
>1733	PtrMemberAccess	c -> begin
>1734	Identifier	begin
>1735	Identifier	c
>1736	Identifier	rval
>1737	ExpressionStatement	 
>1738	CallExpression	MO_CAT_DEBUG ( BM_CUSTOMCATALOG_CAT , \"Removing ware, ID
>1739	ArgumentList	BM_CUSTOMCATALOG_CAT
>1740	Argument	BM_WARE_ID ( ware [ \"id\" ] )
>1741	CallExpression	BM_WARE_ID ( ware [ \"id\" ] )
>1742	ArgumentList	ware [ \"id\" ]
>1743	Argument	ware [ \"id\" ]
>1744	ArrayIndexing	ware [ \"id\" ]
>1745	PrimaryExpression	\"id\"
>1746	Identifier	ware
>1747	Callee	BM_WARE_ID
>1748	Identifier	BM_WARE_ID
>1749	Argument	\"Removing ware, ID
>1750	PrimaryExpression	\"Removing ware, ID
>1751	Argument	BM_CUSTOMCATALOG_CAT
>1752	Identifier	BM_CUSTOMCATALOG_CAT
>1753	Callee	MO_CAT_DEBUG
>1754	Identifier	MO_CAT_DEBUG
>1755	Condition	 
>1756	EqualityExpression	c != NULL
>1757	Identifier	NULL
>1758	Identifier	c
>1759	IdentifierDeclStatement	 
>1760	IdentifierDecl	* c = mMediaLibrary -> getConnection ( userId )
>1761	AssignmentExpr	* c = mMediaLibrary -> getConnection ( userId )
>1762	CallExpression	mMediaLibrary -> getConnection ( userId )
>1763	ArgumentList	userId
>1764	Argument	userId
>1765	Identifier	userId
>1766	Callee	mMediaLibrary -> getConnection
>1767	PtrMemberAccess	mMediaLibrary -> getConnection
>1768	Identifier	getConnection
>1769	Identifier	mMediaLibrary
>1770	Identifier	c
>1771	Identifier	c
>1772	IdentifierDeclType	Connection *
>1773	IdentifierDeclStatement	 
>1774	IdentifierDecl	rval = false
>1775	AssignmentExpr	rval = false
>1776	Identifier	false
>1777	Identifier	false
>1778	Identifier	rval
>1779	IdentifierDeclType	bool
>1811	FunctionDef	CustomCatalog 
>1812	ParameterList	UserId userId , Ware & ware
>1813	Parameter	 
>1814	Identifier	ware
>1815	ParameterType	Ware &
>1816	Parameter	 
>1817	Identifier	userId
>1818	ParameterType	UserId
>1819	ReturnType	bool
>1820	CompoundStatement	 
>1821	ReturnStatement	 
>1822	Identifier	rval
>1823	IfStatement	if ( c != NULL )
>1824	CompoundStatement	 
>1825	ExpressionStatement	 
>1826	CallExpression	c -> close ( )
>1827	ArgumentList	 
>1828	Callee	c -> close
>1829	PtrMemberAccess	c -> close
>1830	Identifier	close
>1831	Identifier	c
>1832	ExpressionStatement	 
>1833	AssignmentExpr	rval = mCatalogDb . populateWare ( userId , ware , mMediaLibrary , c )
>1834	CallExpression	mCatalogDb . populateWare ( userId , ware , mMediaLibrary , c )
>1835	ArgumentList	userId
>1836	Argument	c
>1837	Identifier	c
>1838	Argument	mMediaLibrary
>1839	Identifier	mMediaLibrary
>1840	Argument	ware
>1841	Identifier	ware
>1842	Argument	userId
>1843	Identifier	userId
>1844	Callee	mCatalogDb . populateWare
>1845	MemberAccess	mCatalogDb . populateWare
>1846	Identifier	populateWare
>1847	Identifier	mCatalogDb
>1848	Identifier	rval
>1849	ExpressionStatement	 
>1850	CallExpression	MO_CAT_DEBUG ( BM_CUSTOMCATALOG_CAT , \"Populating ware, ID
>1851	ArgumentList	BM_CUSTOMCATALOG_CAT
>1852	Argument	BM_WARE_ID ( ware [ \"id\" ] )
>1853	CallExpression	BM_WARE_ID ( ware [ \"id\" ] )
>1854	ArgumentList	ware [ \"id\" ]
>1855	Argument	ware [ \"id\" ]
>1856	ArrayIndexing	ware [ \"id\" ]
>1857	PrimaryExpression	\"id\"
>1858	Identifier	ware
>1859	Callee	BM_WARE_ID
>1860	Identifier	BM_WARE_ID
>1861	Argument	\"Populating ware, ID
>1862	PrimaryExpression	\"Populating ware, ID
>1863	Argument	BM_CUSTOMCATALOG_CAT
>1864	Identifier	BM_CUSTOMCATALOG_CAT
>1865	Callee	MO_CAT_DEBUG
>1866	Identifier	MO_CAT_DEBUG
>1867	Condition	 
>1868	EqualityExpression	c != NULL
>1869	Identifier	NULL
>1870	Identifier	c
>1871	IdentifierDeclStatement	 
>1872	IdentifierDecl	* c = mMediaLibrary -> getConnection ( userId )
>1873	AssignmentExpr	* c = mMediaLibrary -> getConnection ( userId )
>1874	CallExpression	mMediaLibrary -> getConnection ( userId )
>1875	ArgumentList	userId
>1876	Argument	userId
>1877	Identifier	userId
>1878	Callee	mMediaLibrary -> getConnection
>1879	PtrMemberAccess	mMediaLibrary -> getConnection
>1880	Identifier	getConnection
>1881	Identifier	mMediaLibrary
>1882	Identifier	c
>1883	Identifier	c
>1884	IdentifierDeclType	Connection *
>1885	IdentifierDeclStatement	 
>1886	IdentifierDecl	rval = false
>1887	AssignmentExpr	rval = false
>1888	Identifier	false
>1889	Identifier	false
>1890	Identifier	rval
>1891	IdentifierDeclType	bool
>1909	FunctionDef	CustomCatalog 
>1910	ParameterList	UserId userId , DynamicObject & query , ResourceSet & wareSet
>1911	Parameter	 
>1912	Identifier	wareSet
>1913	ParameterType	ResourceSet &
>1914	Parameter	 
>1915	Identifier	query
>1916	ParameterType	DynamicObject &
>1917	Parameter	 
>1918	Identifier	userId
>1919	ParameterType	UserId
>1920	ReturnType	bool
>1921	CompoundStatement	 
>1922	ReturnStatement	 
>1923	Identifier	rval
>1924	IfStatement	if ( c != NULL )
>1925	CompoundStatement	 
>1926	ExpressionStatement	 
>1927	CallExpression	c -> close ( )
>1928	ArgumentList	 
>1929	Callee	c -> close
>1930	PtrMemberAccess	c -> close
>1931	Identifier	close
>1932	Identifier	c
>1933	ExpressionStatement	 
>1934	AssignmentExpr	rval = mCatalogDb . populateWareSet ( userId , query , wareSet , mMediaLibrary , c )
>1935	CallExpression	mCatalogDb . populateWareSet ( userId , query , wareSet , mMediaLibrary , c )
>1936	ArgumentList	userId
>1937	Argument	c
>1938	Identifier	c
>1939	Argument	mMediaLibrary
>1940	Identifier	mMediaLibrary
>1941	Argument	wareSet
>1942	Identifier	wareSet
>1943	Argument	query
>1944	Identifier	query
>1945	Argument	userId
>1946	Identifier	userId
>1947	Callee	mCatalogDb . populateWareSet
>1948	MemberAccess	mCatalogDb . populateWareSet
>1949	Identifier	populateWareSet
>1950	Identifier	mCatalogDb
>1951	Identifier	rval
>1952	ExpressionStatement	 
>1953	CallExpression	MO_CAT_DEBUG ( BM_CUSTOMCATALOG_CAT , \"Populating ware set with %d wareIds and %d fileIds\" , query -> hasMember ( \"\
>1954	ArgumentList	BM_CUSTOMCATALOG_CAT
>1955	Argument	query -> hasMember ( \"fileIds\" ) ? query [ \"fileIds\" ] -> length ( ) 
>1956	ConditionalExpression	query -> hasMember ( \"fileIds\" ) ? query [ \"fileIds\" ] -> length ( ) 
>1957	PrimaryExpression	0
>1958	CallExpression	query [ \"fileIds\" ] -> length ( )
>1959	ArgumentList	 
>1960	Callee	query [ \"fileIds\" ] -> length
>1961	PtrMemberAccess	query [ \"fileIds\" ] -> length
>1962	Identifier	length
>1963	ArrayIndexing	query [ \"fileIds\" ]
>1964	PrimaryExpression	\"fileIds\"
>1965	Identifier	query
>1966	Condition	query -> hasMember ( \"fileIds\" )
>1967	CallExpression	query -> hasMember ( \"fileIds\" )
>1968	ArgumentList	\"fileIds\"
>1969	Argument	\"fileIds\"
>1970	PrimaryExpression	\"fileIds\"
>1971	Callee	query -> hasMember
>1972	PtrMemberAccess	query -> hasMember
>1973	Identifier	hasMember
>1974	Identifier	query
>1975	Argument	query -> hasMember ( \"ids\" ) ? query [ \"ids\" ] -> length ( ) 
>1976	ConditionalExpression	query -> hasMember ( \"ids\" ) ? query [ \"ids\" ] -> length ( ) 
>1977	PrimaryExpression	0
>1978	CallExpression	query [ \"ids\" ] -> length ( )
>1979	ArgumentList	 
>1980	Callee	query [ \"ids\" ] -> length
>1981	PtrMemberAccess	query [ \"ids\" ] -> length
>1982	Identifier	length
>1983	ArrayIndexing	query [ \"ids\" ]
>1984	PrimaryExpression	\"ids\"
>1985	Identifier	query
>1986	Condition	query -> hasMember ( \"ids\" )
>1987	CallExpression	query -> hasMember ( \"ids\" )
>1988	ArgumentList	\"ids\"
>1989	Argument	\"ids\"
>1990	PrimaryExpression	\"ids\"
>1991	Callee	query -> hasMember
>1992	PtrMemberAccess	query -> hasMember
>1993	Identifier	hasMember
>1994	Identifier	query
>1995	Argument	\"Populating ware set with %d wareIds and %d fileIds\"
>1996	PrimaryExpression	\"Populating ware set with %d wareIds and %d fileIds\"
>1997	Argument	BM_CUSTOMCATALOG_CAT
>1998	Identifier	BM_CUSTOMCATALOG_CAT
>1999	Callee	MO_CAT_DEBUG
>2000	Identifier	MO_CAT_DEBUG
>2001	Condition	 
>2002	EqualityExpression	c != NULL
>2003	Identifier	NULL
>2004	Identifier	c
>2005	IdentifierDeclStatement	 
>2006	IdentifierDecl	* c = mMediaLibrary -> getConnection ( userId )
>2007	AssignmentExpr	* c = mMediaLibrary -> getConnection ( userId )
>2008	CallExpression	mMediaLibrary -> getConnection ( userId )
>2009	ArgumentList	userId
>2010	Argument	userId
>2011	Identifier	userId
>2012	Callee	mMediaLibrary -> getConnection
>2013	PtrMemberAccess	mMediaLibrary -> getConnection
>2014	Identifier	getConnection
>2015	Identifier	mMediaLibrary
>2016	Identifier	c
>2017	Identifier	c
>2018	IdentifierDeclType	Connection *
>2019	IdentifierDeclStatement	 
>2020	IdentifierDecl	rval = false
>2021	AssignmentExpr	rval = false
>2022	Identifier	false
>2023	Identifier	false
>2024	Identifier	rval
>2025	IdentifierDeclType	bool
>2047	FunctionDef	CustomCatalog 
>2048	ParameterList	UserId userId , Ware & ware , MediaPreferenceList & prefs
>2049	Parameter	 
>2050	Identifier	prefs
>2051	ParameterType	MediaPreferenceList &
>2052	Parameter	 
>2053	Identifier	ware
>2054	ParameterType	Ware &
>2055	Parameter	 
>2056	Identifier	userId
>2057	ParameterType	UserId
>2058	ReturnType	bool
>2059	CompoundStatement	 
>2060	ReturnStatement	 
>2061	Identifier	rval
>2062	ExpressionStatement	 
>2063	CallExpression	Exception 
>2064	ArgumentList	e
>2065	Argument	e
>2066	Identifier	e
>2067	Callee	Exception 
>2068	Identifier	Exception 
>2069	IdentifierDeclStatement	 
>2070	IdentifierDecl	e = new Exception ( \"Ware bundle support is not available with this catalog.\" , \"bitmunk.catalog.FeatureUnsupported\" )
>2071	AssignmentExpr	e = new Exception ( \"Ware bundle support is not available with this catalog.\" , \"bitmunk.catalog.FeatureUnsupported\" )
>2072	Expression	\"Ware bundle support is not available with this catalog.\" , \"bitmunk.catalog.FeatureUnsupported\"
>2073	PrimaryExpression	\"bitmunk.catalog.FeatureUnsupported\"
>2074	PrimaryExpression	\"Ware bundle support is not available with this catalog.\"
>2075	Identifier	e
>2076	Identifier	e
>2077	IdentifierDeclType	ExceptionRef
>2078	IdentifierDeclStatement	 
>2079	IdentifierDecl	rval = false
>2080	AssignmentExpr	rval = false
>2081	Identifier	false
>2082	Identifier	false
>2083	Identifier	rval
>2084	IdentifierDeclType	bool
>2094	FunctionDef	CustomCatalog 
>2095	ParameterList	UserId userId , FileInfo & fi
>2096	Parameter	 
>2097	Identifier	fi
>2098	ParameterType	FileInfo &
>2099	Parameter	 
>2100	Identifier	userId
>2101	ParameterType	UserId
>2102	ReturnType	bool
>2103	CompoundStatement	 
>2104	ReturnStatement	 
>2105	CallExpression	mMediaLibrary -> populateFile ( userId , fi )
>2106	ArgumentList	userId
>2107	Argument	fi
>2108	Identifier	fi
>2109	Argument	userId
>2110	Identifier	userId
>2111	Callee	mMediaLibrary -> populateFile
>2112	PtrMemberAccess	mMediaLibrary -> populateFile
>2113	Identifier	populateFile
>2114	Identifier	mMediaLibrary
>2123	FunctionDef	CustomCatalog 
>2124	ParameterList	UserId userId , Ware & ware
>2125	Parameter	 
>2126	Identifier	ware
>2127	ParameterType	Ware &
>2128	Parameter	 
>2129	Identifier	userId
>2130	ParameterType	UserId
>2131	ReturnType	bool
>2132	CompoundStatement	 
>2133	ReturnStatement	 
>2134	Identifier	rval
>2135	IfStatement	if ( c != NULL )
>2136	CompoundStatement	 
>2137	ExpressionStatement	 
>2138	CallExpression	c -> close ( )
>2139	ArgumentList	 
>2140	Callee	c -> close
>2141	PtrMemberAccess	c -> close
>2142	Identifier	close
>2143	Identifier	c
>2144	ExpressionStatement	 
>2145	AssignmentExpr	rval = mCatalogDb . populateWareFileInfo ( userId , ware , mMediaLibrary , c )
>2146	CallExpression	mCatalogDb . populateWareFileInfo ( userId , ware , mMediaLibrary , c )
>2147	ArgumentList	userId
>2148	Argument	c
>2149	Identifier	c
>2150	Argument	mMediaLibrary
>2151	Identifier	mMediaLibrary
>2152	Argument	ware
>2153	Identifier	ware
>2154	Argument	userId
>2155	Identifier	userId
>2156	Callee	mCatalogDb . populateWareFileInfo
>2157	MemberAccess	mCatalogDb . populateWareFileInfo
>2158	Identifier	populateWareFileInfo
>2159	Identifier	mCatalogDb
>2160	Identifier	rval
>2161	ExpressionStatement	 
>2162	CallExpression	ware [ \"fileInfos\" ] -> clear ( )
>2163	ArgumentList	 
>2164	Callee	ware [ \"fileInfos\" ] -> clear
>2165	PtrMemberAccess	ware [ \"fileInfos\" ] -> clear
>2166	Identifier	clear
>2167	ArrayIndexing	ware [ \"fileInfos\" ]
>2168	PrimaryExpression	\"fileInfos\"
>2169	Identifier	ware
>2170	ExpressionStatement	 
>2171	CallExpression	MO_CAT_DEBUG ( BM_CUSTOMCATALOG_CAT , \"Populating ware file infos, ware ID
>2172	ArgumentList	BM_CUSTOMCATALOG_CAT
>2173	Argument	BM_WARE_ID ( ware [ \"id\" ] )
>2174	CallExpression	BM_WARE_ID ( ware [ \"id\" ] )
>2175	ArgumentList	ware [ \"id\" ]
>2176	Argument	ware [ \"id\" ]
>2177	ArrayIndexing	ware [ \"id\" ]
>2178	PrimaryExpression	\"id\"
>2179	Identifier	ware
>2180	Callee	BM_WARE_ID
>2181	Identifier	BM_WARE_ID
>2182	Argument	\"Populating ware file infos, ware ID
>2183	PrimaryExpression	\"Populating ware file infos, ware ID
>2184	Argument	BM_CUSTOMCATALOG_CAT
>2185	Identifier	BM_CUSTOMCATALOG_CAT
>2186	Callee	MO_CAT_DEBUG
>2187	Identifier	MO_CAT_DEBUG
>2188	Condition	 
>2189	EqualityExpression	c != NULL
>2190	Identifier	NULL
>2191	Identifier	c
>2192	IdentifierDeclStatement	 
>2193	IdentifierDecl	* c = mMediaLibrary -> getConnection ( userId )
>2194	AssignmentExpr	* c = mMediaLibrary -> getConnection ( userId )
>2195	CallExpression	mMediaLibrary -> getConnection ( userId )
>2196	ArgumentList	userId
>2197	Argument	userId
>2198	Identifier	userId
>2199	Callee	mMediaLibrary -> getConnection
>2200	PtrMemberAccess	mMediaLibrary -> getConnection
>2201	Identifier	getConnection
>2202	Identifier	mMediaLibrary
>2203	Identifier	c
>2204	Identifier	c
>2205	IdentifierDeclType	Connection *
>2206	IdentifierDeclStatement	 
>2207	IdentifierDecl	rval = false
>2208	AssignmentExpr	rval = false
>2209	Identifier	false
>2210	Identifier	false
>2211	Identifier	rval
>2212	IdentifierDeclType	bool
>2230	FunctionDef	CustomCatalog 
>2231	ParameterList	UserId userId , FileInfoList & fil
>2232	Parameter	 
>2233	Identifier	fil
>2234	ParameterType	FileInfoList &
>2235	Parameter	 
>2236	Identifier	userId
>2237	ParameterType	UserId
>2238	ReturnType	bool
>2239	CompoundStatement	 
>2240	ReturnStatement	 
>2241	Identifier	rval
>2242	IfStatement	if ( length > 0 )
>2243	CompoundStatement	 
>2244	IfStatement	if ( c != NULL )
>2245	CompoundStatement	 
>2246	ExpressionStatement	 
>2247	CallExpression	c -> close ( )
>2248	ArgumentList	 
>2249	Callee	c -> close
>2250	PtrMemberAccess	c -> close
>2251	Identifier	close
>2252	Identifier	c
>2253	IfStatement	if ( count != fil -> length ( ) )
>2254	CompoundStatement	 
>2255	ExpressionStatement	 
>2256	AssignmentExpr	rval = false
>2257	Identifier	false
>2258	Identifier	rval
>2259	ExpressionStatement	 
>2260	CallExpression	Exception 
>2261	ArgumentList	e
>2262	Argument	e
>2263	Identifier	e
>2264	Callee	Exception 
>2265	Identifier	Exception 
>2266	ExpressionStatement	 
>2267	Statement	 
>2268	Statement	 
>2269	Statement	 
>2270	Statement	 
>2271	Statement	 
>2272	Statement	 
>2273	Statement	 
>2274	Statement	 
>2275	Statement	 
>2276	Statement	 
>2277	Statement	 
>2278	Condition	 
>2279	EqualityExpression	count != fil -> length ( )
>2280	CallExpression	fil -> length ( )
>2281	ArgumentList	 
>2282	Callee	fil -> length
>2283	PtrMemberAccess	fil -> length
>2284	Identifier	length
>2285	Identifier	fil
>2286	Identifier	count
>2287	WhileStatement	while ( rval && fii -> hasNext ( ) )
>2288	CompoundStatement	 
>2289	IfStatement	if ( rval )
>2290	CompoundStatement	 
>2291	ExpressionStatement	 
>2292	UnaryExpression	++ count
>2293	Identifier	count
>2294	IncDec	++
>2295	Condition	 
>2296	Identifier	rval
>2297	ExpressionStatement	 
>2298	AssignmentExpr	rval = mMediaLibrary -> populateFile ( userId , fi , 0 , c )
>2299	CallExpression	mMediaLibrary -> populateFile ( userId , fi , 0 , c )
>2300	ArgumentList	userId
>2301	Argument	c
>2302	Identifier	c
>2303	Argument	0
>2304	PrimaryExpression	0
>2305	Argument	fi
>2306	Identifier	fi
>2307	Argument	userId
>2308	Identifier	userId
>2309	Callee	mMediaLibrary -> populateFile
>2310	PtrMemberAccess	mMediaLibrary -> populateFile
>2311	Identifier	populateFile
>2312	Identifier	mMediaLibrary
>2313	Identifier	rval
>2314	IdentifierDeclStatement	 
>2315	IdentifierDecl	& fi = fii -> next ( )
>2316	AssignmentExpr	& fi = fii -> next ( )
>2317	CallExpression	fii -> next ( )
>2318	ArgumentList	 
>2319	Callee	fii -> next
>2320	PtrMemberAccess	fii -> next
>2321	Identifier	next
>2322	Identifier	fii
>2323	Identifier	fi
>2324	Identifier	fi
>2325	IdentifierDeclType	FileInfo &
>2326	Condition	 
>2327	AndExpression	rval && fii -> hasNext ( )
>2328	CallExpression	fii -> hasNext ( )
>2329	ArgumentList	 
>2330	Callee	fii -> hasNext
>2331	PtrMemberAccess	fii -> hasNext
>2332	Identifier	hasNext
>2333	Identifier	fii
>2334	Identifier	rval
>2335	IdentifierDeclStatement	 
>2336	IdentifierDecl	fii = fil . getIterator ( )
>2337	AssignmentExpr	fii = fil . getIterator ( )
>2338	CallExpression	fil . getIterator ( )
>2339	ArgumentList	 
>2340	Callee	fil . getIterator
>2341	MemberAccess	fil . getIterator
>2342	Identifier	getIterator
>2343	Identifier	fil
>2344	Identifier	fii
>2345	Identifier	fii
>2346	IdentifierDeclType	FileInfoIterator
>2347	IdentifierDeclStatement	 
>2348	IdentifierDecl	count = 0
>2349	AssignmentExpr	count = 0
>2350	PrimaryExpression	0
>2351	Identifier	count
>2352	Identifier	count
>2353	IdentifierDeclType	int
>2354	Condition	 
>2355	EqualityExpression	c != NULL
>2356	Identifier	NULL
>2357	Identifier	c
>2358	IdentifierDeclStatement	 
>2359	IdentifierDecl	* c = mMediaLibrary -> getConnection ( userId )
>2360	AssignmentExpr	* c = mMediaLibrary -> getConnection ( userId )
>2361	CallExpression	mMediaLibrary -> getConnection ( userId )
>2362	ArgumentList	userId
>2363	Argument	userId
>2364	Identifier	userId
>2365	Callee	mMediaLibrary -> getConnection
>2366	PtrMemberAccess	mMediaLibrary -> getConnection
>2367	Identifier	getConnection
>2368	Identifier	mMediaLibrary
>2369	Identifier	c
>2370	Identifier	c
>2371	IdentifierDeclType	Connection *
>2372	ExpressionStatement	 
>2373	AssignmentExpr	rval = false
>2374	Identifier	false
>2375	Identifier	rval
>2376	Condition	 
>2377	RelationalExpression	length > 0
>2378	PrimaryExpression	0
>2379	Identifier	length
>2380	IdentifierDeclStatement	 
>2381	IdentifierDecl	length = fil -> length ( )
>2382	AssignmentExpr	length = fil -> length ( )
>2383	CallExpression	fil -> length ( )
>2384	ArgumentList	 
>2385	Callee	fil -> length
>2386	PtrMemberAccess	fil -> length
>2387	Identifier	length
>2388	Identifier	fil
>2389	Identifier	length
>2390	Identifier	length
>2391	IdentifierDeclType	int
>2392	ExpressionStatement	 
>2393	CallExpression	fil -> setType ( Array )
>2394	ArgumentList	Array
>2395	Argument	Array
>2396	Identifier	Array
>2397	Callee	fil -> setType
>2398	PtrMemberAccess	fil -> setType
>2399	Identifier	setType
>2400	Identifier	fil
>2401	IdentifierDeclStatement	 
>2402	IdentifierDecl	rval = true
>2403	AssignmentExpr	rval = true
>2404	Identifier	true
>2405	Identifier	true
>2406	Identifier	rval
>2407	IdentifierDeclType	bool
>2434	FunctionDef	CustomCatalog 
>2435	ParameterList	UserId userId , PayeeSchemeId & psId , const char * description , PayeeList & payees
>2436	Parameter	 
>2437	Identifier	payees
>2438	ParameterType	PayeeList &
>2439	Parameter	 
>2440	Identifier	description
>2441	ParameterType	const char *
>2442	Parameter	 
>2443	Identifier	psId
>2444	ParameterType	PayeeSchemeId &
>2445	Parameter	 
>2446	Identifier	userId
>2447	ParameterType	UserId
>2448	ReturnType	bool
>2449	CompoundStatement	 
>2450	ReturnStatement	 
>2451	Identifier	rval
>2452	IfStatement	if ( ! rval )
>2453	CompoundStatement	 
>2454	ExpressionStatement	 
>2455	CallExpression	Exception 
>2456	ArgumentList	e
>2457	Argument	e
>2458	Identifier	e
>2459	Callee	Exception 
>2460	Identifier	Exception 
>2461	ExpressionStatement	 
>2462	CallExpression	BM_ID_SET ( e -> getDetails ( ) [ \"payeeSchemeId\" ] , psId )
>2463	ArgumentList	e -> getDetails ( ) [ \"payeeSchemeId\" ]
>2464	Argument	psId
>2465	Identifier	psId
>2466	Argument	e -> getDetails ( ) [ \"payeeSchemeId\" ]
>2467	ArrayIndexing	e -> getDetails ( ) [ \"payeeSchemeId\" ]
>2468	PrimaryExpression	\"payeeSchemeId\"
>2469	CallExpression	e -> getDetails ( )
>2470	ArgumentList	 
>2471	Callee	e -> getDetails
>2472	PtrMemberAccess	e -> getDetails
>2473	Identifier	getDetails
>2474	Identifier	e
>2475	Callee	BM_ID_SET
>2476	Identifier	BM_ID_SET
>2477	ExpressionStatement	 
>2478	AssignmentExpr	e -> getDetails ( ) [ \"description\" ] = description
>2479	Identifier	description
>2480	ArrayIndexing	e -> getDetails ( ) [ \"description\" ]
>2481	PrimaryExpression	\"description\"
>2482	CallExpression	e -> getDetails ( )
>2483	ArgumentList	 
>2484	Callee	e -> getDetails
>2485	PtrMemberAccess	e -> getDetails
>2486	Identifier	getDetails
>2487	Identifier	e
>2488	ExpressionStatement	 
>2489	AssignmentExpr	e -> getDetails ( ) [ \"payees\" ] = payees
>2490	Identifier	payees
>2491	ArrayIndexing	e -> getDetails ( ) [ \"payees\" ]
>2492	PrimaryExpression	\"payees\"
>2493	CallExpression	e -> getDetails ( )
>2494	ArgumentList	 
>2495	Callee	e -> getDetails
>2496	PtrMemberAccess	e -> getDetails
>2497	Identifier	getDetails
>2498	Identifier	e
>2499	IdentifierDeclStatement	 
>2500	IdentifierDecl	e = new Exception ( \"Failed to update payee scheme.\" , \"bitmunk.catalog.UpdatePayeeSchemeFailed\" )
>2501	AssignmentExpr	e = new Exception ( \"Failed to update payee scheme.\" , \"bitmunk.catalog.UpdatePayeeSchemeFailed\" )
>2502	Expression	\"Failed to update payee scheme.\" , \"bitmunk.catalog.UpdatePayeeSchemeFailed\"
>2503	PrimaryExpression	\"bitmunk.catalog.UpdatePayeeSchemeFailed\"
>2504	PrimaryExpression	\"Failed to update payee scheme.\"
>2505	Identifier	e
>2506	Identifier	e
>2507	IdentifierDeclType	ExceptionRef
>2508	Condition	 
>2509	UnaryOp	! rval
>2510	Identifier	rval
>2511	UnaryOperator	!
>2512	IfStatement	if ( c != NULL )
>2513	CompoundStatement	 
>2514	ExpressionStatement	 
>2515	CallExpression	c -> close ( )
>2516	ArgumentList	 
>2517	Callee	c -> close
>2518	PtrMemberAccess	c -> close
>2519	Identifier	close
>2520	Identifier	c
>2521	IfStatement	if ( c -> begin ( ) )
>2522	CompoundStatement	 
>2523	ExpressionStatement	 
>2524	AssignmentExpr	rval = rval ? c -> commit ( ) 
>2525	ConditionalExpression	rval ? c -> commit ( ) 
>2526	AndExpression	c -> rollback ( ) && false
>2527	Identifier	false
>2528	CallExpression	c -> rollback ( )
>2529	ArgumentList	 
>2530	Callee	c -> rollback
>2531	PtrMemberAccess	c -> rollback
>2532	Identifier	rollback
>2533	Identifier	c
>2534	CallExpression	c -> commit ( )
>2535	ArgumentList	 
>2536	Callee	c -> commit
>2537	PtrMemberAccess	c -> commit
>2538	Identifier	commit
>2539	Identifier	c
>2540	Condition	rval
>2541	Identifier	rval
>2542	Identifier	rval
>2543	IfStatement	if ( psId == 0 )
>2544	ElseStatement	else
>2545	CompoundStatement	 
>2546	ExpressionStatement	 
>2547	AssignmentExpr	rval = mCatalogDb . updatePayeeScheme ( ps , c ) && _schedulePayeeSchemeUpdatedEvent ( mNode , psId , \
>2548	AndExpression	mCatalogDb . updatePayeeScheme ( ps , c ) && _schedulePayeeSchemeUpdatedEvent ( mNode , psId , userId , \
>2549	CallExpression	_schedulePayeeSchemeUpdatedEvent ( mNode , psId , userId , false )
>2550	ArgumentList	mNode
>2551	Argument	false
>2552	Identifier	false
>2553	Argument	userId
>2554	Identifier	userId
>2555	Argument	psId
>2556	Identifier	psId
>2557	Argument	mNode
>2558	Identifier	mNode
>2559	Callee	_schedulePayeeSchemeUpdatedEvent
>2560	Identifier	_schedulePayeeSchemeUpdatedEvent
>2561	CallExpression	mCatalogDb . updatePayeeScheme ( ps , c )
>2562	ArgumentList	ps
>2563	Argument	c
>2564	Identifier	c
>2565	Argument	ps
>2566	Identifier	ps
>2567	Callee	mCatalogDb . updatePayeeScheme
>2568	MemberAccess	mCatalogDb . updatePayeeScheme
>2569	Identifier	updatePayeeScheme
>2570	Identifier	mCatalogDb
>2571	Identifier	rval
>2572	ExpressionStatement	 
>2573	AssignmentExpr	ps [ \"payees\" ] = payees
>2574	Identifier	payees
>2575	ArrayIndexing	ps [ \"payees\" ]
>2576	PrimaryExpression	\"payees\"
>2577	Identifier	ps
>2578	ExpressionStatement	 
>2579	AssignmentExpr	ps [ \"description\" ] = description
>2580	Identifier	description
>2581	ArrayIndexing	ps [ \"description\" ]
>2582	PrimaryExpression	\"description\"
>2583	Identifier	ps
>2584	ExpressionStatement	 
>2585	CallExpression	BM_ID_SET ( ps [ \"id\" ] , psId )
>2586	ArgumentList	ps [ \"id\" ]
>2587	Argument	psId
>2588	Identifier	psId
>2589	Argument	ps [ \"id\" ]
>2590	ArrayIndexing	ps [ \"id\" ]
>2591	PrimaryExpression	\"id\"
>2592	Identifier	ps
>2593	Callee	BM_ID_SET
>2594	Identifier	BM_ID_SET
>2595	IdentifierDeclStatement	 
>2596	IdentifierDecl	ps
>2597	Identifier	ps
>2598	IdentifierDeclType	PayeeScheme
>2599	CompoundStatement	 
>2600	ExpressionStatement	 
>2601	AssignmentExpr	rval = mCatalogDb . addPayeeScheme ( mNode , userId , psId , description , payees , c ) && _schedulePayeeSchemeUpdatedEvent ( \
>2602	AndExpression	mCatalogDb . addPayeeScheme ( mNode , userId , psId , description , payees , c ) && _schedulePayeeSchemeUpdatedEvent ( \
>2603	CallExpression	_schedulePayeeSchemeUpdatedEvent ( mNode , psId , userId , true )
>2604	ArgumentList	mNode
>2605	Argument	true
>2606	Identifier	true
>2607	Argument	userId
>2608	Identifier	userId
>2609	Argument	psId
>2610	Identifier	psId
>2611	Argument	mNode
>2612	Identifier	mNode
>2613	Callee	_schedulePayeeSchemeUpdatedEvent
>2614	Identifier	_schedulePayeeSchemeUpdatedEvent
>2615	CallExpression	mCatalogDb . addPayeeScheme ( mNode , userId , psId , description , payees , c )
>2616	ArgumentList	mNode
>2617	Argument	c
>2618	Identifier	c
>2619	Argument	payees
>2620	Identifier	payees
>2621	Argument	description
>2622	Identifier	description
>2623	Argument	psId
>2624	Identifier	psId
>2625	Argument	userId
>2626	Identifier	userId
>2627	Argument	mNode
>2628	Identifier	mNode
>2629	Callee	mCatalogDb . addPayeeScheme
>2630	MemberAccess	mCatalogDb . addPayeeScheme
>2631	Identifier	addPayeeScheme
>2632	Identifier	mCatalogDb
>2633	Identifier	rval
>2634	Condition	 
>2635	EqualityExpression	psId == 0
>2636	PrimaryExpression	0
>2637	Identifier	psId
>2638	Condition	 
>2639	CallExpression	c -> begin ( )
>2640	ArgumentList	 
>2641	Callee	c -> begin
>2642	PtrMemberAccess	c -> begin
>2643	Identifier	begin
>2644	Identifier	c
>2645	Condition	 
>2646	EqualityExpression	c != NULL
>2647	Identifier	NULL
>2648	Identifier	c
>2649	IdentifierDeclStatement	 
>2650	IdentifierDecl	* c = mMediaLibrary -> getConnection ( userId )
>2651	AssignmentExpr	* c = mMediaLibrary -> getConnection ( userId )
>2652	CallExpression	mMediaLibrary -> getConnection ( userId )
>2653	ArgumentList	userId
>2654	Argument	userId
>2655	Identifier	userId
>2656	Callee	mMediaLibrary -> getConnection
>2657	PtrMemberAccess	mMediaLibrary -> getConnection
>2658	Identifier	getConnection
>2659	Identifier	mMediaLibrary
>2660	Identifier	c
>2661	Identifier	c
>2662	IdentifierDeclType	Connection *
>2663	IdentifierDeclStatement	 
>2664	IdentifierDecl	rval = false
>2665	AssignmentExpr	rval = false
>2666	Identifier	false
>2667	Identifier	false
>2668	Identifier	rval
>2669	IdentifierDeclType	bool
>2701	FunctionDef	CustomCatalog 
>2702	ParameterList	UserId userId , DynamicObject & filters , ResourceSet & rs
>2703	Parameter	 
>2704	Identifier	rs
>2705	ParameterType	ResourceSet &
>2706	Parameter	 
>2707	Identifier	filters
>2708	ParameterType	DynamicObject &
>2709	Parameter	 
>2710	Identifier	userId
>2711	ParameterType	UserId
>2712	ReturnType	bool
>2713	CompoundStatement	 
>2714	ReturnStatement	 
>2715	Identifier	rval
>2716	IfStatement	if ( c != NULL )
>2717	CompoundStatement	 
>2718	ExpressionStatement	 
>2719	CallExpression	c -> close ( )
>2720	ArgumentList	 
>2721	Callee	c -> close
>2722	PtrMemberAccess	c -> close
>2723	Identifier	close
>2724	Identifier	c
>2725	IfStatement	if ( rs -> hasMember ( \"resources\" ) )
>2726	CompoundStatement	 
>2727	WhileStatement	while ( rsi -> hasNext ( ) )
>2728	CompoundStatement	 
>2729	ExpressionStatement	 
>2730	CallExpression	BM_ID_SET ( ps [ \"userId\" ] , userId )
>2731	ArgumentList	ps [ \"userId\" ]
>2732	Argument	userId
>2733	Identifier	userId
>2734	Argument	ps [ \"userId\" ]
>2735	ArrayIndexing	ps [ \"userId\" ]
>2736	PrimaryExpression	\"userId\"
>2737	Identifier	ps
>2738	Callee	BM_ID_SET
>2739	Identifier	BM_ID_SET
>2740	IdentifierDeclStatement	 
>2741	IdentifierDecl	& ps = rsi -> next ( )
>2742	AssignmentExpr	& ps = rsi -> next ( )
>2743	CallExpression	rsi -> next ( )
>2744	ArgumentList	 
>2745	Callee	rsi -> next
>2746	PtrMemberAccess	rsi -> next
>2747	Identifier	next
>2748	Identifier	rsi
>2749	Identifier	ps
>2750	Identifier	ps
>2751	IdentifierDeclType	PayeeScheme &
>2752	Condition	 
>2753	CallExpression	rsi -> hasNext ( )
>2754	ArgumentList	 
>2755	Callee	rsi -> hasNext
>2756	PtrMemberAccess	rsi -> hasNext
>2757	Identifier	hasNext
>2758	Identifier	rsi
>2759	IdentifierDeclStatement	 
>2760	IdentifierDecl	rsi = rs [ \"resources\" ] . getIterator ( )
>2761	AssignmentExpr	rsi = rs [ \"resources\" ] . getIterator ( )
>2762	CallExpression	rs [ \"resources\" ] . getIterator ( )
>2763	ArgumentList	 
>2764	Callee	rs [ \"resources\" ] . getIterator
>2765	MemberAccess	rs [ \"resources\" ] . getIterator
>2766	Identifier	getIterator
>2767	ArrayIndexing	rs [ \"resources\" ]
>2768	PrimaryExpression	\"resources\"
>2769	Identifier	rs
>2770	Identifier	rsi
>2771	Identifier	rsi
>2772	IdentifierDeclType	ResourceSetIterator
>2773	Condition	 
>2774	CallExpression	rs -> hasMember ( \"resources\" )
>2775	ArgumentList	\"resources\"
>2776	Argument	\"resources\"
>2777	PrimaryExpression	\"resources\"
>2778	Callee	rs -> hasMember
>2779	PtrMemberAccess	rs -> hasMember
>2780	Identifier	hasMember
>2781	Identifier	rs
>2782	ExpressionStatement	 
>2783	AssignmentExpr	rval = mCatalogDb . populatePayeeSchemes ( rs , filters , c )
>2784	CallExpression	mCatalogDb . populatePayeeSchemes ( rs , filters , c )
>2785	ArgumentList	rs
>2786	Argument	c
>2787	Identifier	c
>2788	Argument	filters
>2789	Identifier	filters
>2790	Argument	rs
>2791	Identifier	rs
>2792	Callee	mCatalogDb . populatePayeeSchemes
>2793	MemberAccess	mCatalogDb . populatePayeeSchemes
>2794	Identifier	populatePayeeSchemes
>2795	Identifier	mCatalogDb
>2796	Identifier	rval
>2797	ExpressionStatement	 
>2798	CallExpression	MO_CAT_DEBUG ( BM_CUSTOMCATALOG_CAT , \"Populating payee schemes\" )
>2799	ArgumentList	BM_CUSTOMCATALOG_CAT
>2800	Argument	\"Populating payee schemes\"
>2801	PrimaryExpression	\"Populating payee schemes\"
>2802	Argument	BM_CUSTOMCATALOG_CAT
>2803	Identifier	BM_CUSTOMCATALOG_CAT
>2804	Callee	MO_CAT_DEBUG
>2805	Identifier	MO_CAT_DEBUG
>2806	Condition	 
>2807	EqualityExpression	c != NULL
>2808	Identifier	NULL
>2809	Identifier	c
>2810	IdentifierDeclStatement	 
>2811	IdentifierDecl	* c = mMediaLibrary -> getConnection ( userId )
>2812	AssignmentExpr	* c = mMediaLibrary -> getConnection ( userId )
>2813	CallExpression	mMediaLibrary -> getConnection ( userId )
>2814	ArgumentList	userId
>2815	Argument	userId
>2816	Identifier	userId
>2817	Callee	mMediaLibrary -> getConnection
>2818	PtrMemberAccess	mMediaLibrary -> getConnection
>2819	Identifier	getConnection
>2820	Identifier	mMediaLibrary
>2821	Identifier	c
>2822	Identifier	c
>2823	IdentifierDeclType	Connection *
>2824	IdentifierDeclStatement	 
>2825	IdentifierDecl	rval = false
>2826	AssignmentExpr	rval = false
>2827	Identifier	false
>2828	Identifier	false
>2829	Identifier	rval
>2830	IdentifierDeclType	bool
>2856	FunctionDef	CustomCatalog 
>2857	ParameterList	UserId userId , PayeeScheme & ps
>2858	Parameter	 
>2859	Identifier	ps
>2860	ParameterType	PayeeScheme &
>2861	Parameter	 
>2862	Identifier	userId
>2863	ParameterType	UserId
>2864	ReturnType	bool
>2865	CompoundStatement	 
>2866	ReturnStatement	 
>2867	CallExpression	populatePayeeScheme ( userId , filters , ps )
>2868	ArgumentList	userId
>2869	Argument	ps
>2870	Identifier	ps
>2871	Argument	filters
>2872	Identifier	filters
>2873	Argument	userId
>2874	Identifier	userId
>2875	Callee	populatePayeeScheme
>2876	Identifier	populatePayeeScheme
>2877	ExpressionStatement	 
>2878	AssignmentExpr	filters [ \"default\" ] = true
>2879	Identifier	true
>2880	ArrayIndexing	filters [ \"default\" ]
>2881	PrimaryExpression	\"default\"
>2882	Identifier	filters
>2883	IdentifierDeclStatement	 
>2884	IdentifierDecl	filters
>2885	Identifier	filters
>2886	IdentifierDeclType	DynamicObject
>2896	FunctionDef	CustomCatalog 
>2897	ParameterList	UserId userId , DynamicObject & filters , PayeeScheme & ps
>2898	Parameter	 
>2899	Identifier	ps
>2900	ParameterType	PayeeScheme &
>2901	Parameter	 
>2902	Identifier	filters
>2903	ParameterType	DynamicObject &
>2904	Parameter	 
>2905	Identifier	userId
>2906	ParameterType	UserId
>2907	ReturnType	bool
>2908	CompoundStatement	 
>2909	ReturnStatement	 
>2910	Identifier	rval
>2911	IfStatement	if ( c != NULL )
>2912	CompoundStatement	 
>2913	ExpressionStatement	 
>2914	CallExpression	c -> close ( )
>2915	ArgumentList	 
>2916	Callee	c -> close
>2917	PtrMemberAccess	c -> close
>2918	Identifier	close
>2919	Identifier	c
>2920	ExpressionStatement	 
>2921	CallExpression	BM_ID_SET ( ps [ \"userId\" ] , userId )
>2922	ArgumentList	ps [ \"userId\" ]
>2923	Argument	userId
>2924	Identifier	userId
>2925	Argument	ps [ \"userId\" ]
>2926	ArrayIndexing	ps [ \"userId\" ]
>2927	PrimaryExpression	\"userId\"
>2928	Identifier	ps
>2929	Callee	BM_ID_SET
>2930	Identifier	BM_ID_SET
>2931	ExpressionStatement	 
>2932	AssignmentExpr	rval = mCatalogDb . populatePayeeScheme ( ps , filters , c )
>2933	CallExpression	mCatalogDb . populatePayeeScheme ( ps , filters , c )
>2934	ArgumentList	ps
>2935	Argument	c
>2936	Identifier	c
>2937	Argument	filters
>2938	Identifier	filters
>2939	Argument	ps
>2940	Identifier	ps
>2941	Callee	mCatalogDb . populatePayeeScheme
>2942	MemberAccess	mCatalogDb . populatePayeeScheme
>2943	Identifier	populatePayeeScheme
>2944	Identifier	mCatalogDb
>2945	Identifier	rval
>2946	ExpressionStatement	 
>2947	Statement	 
>2948	Statement	 
>2949	Statement	 
>2950	Statement	 
>2951	Statement	 
>2952	Statement	 
>2953	Statement	 
>2954	Statement	 
>2955	Statement	 
>2956	Statement	 
>2957	Statement	 
>2958	Statement	 
>2959	Statement	 
>2960	Statement	 
>2961	Statement	 
>2962	Condition	 
>2963	EqualityExpression	c != NULL
>2964	Identifier	NULL
>2965	Identifier	c
>2966	IdentifierDeclStatement	 
>2967	IdentifierDecl	* c = mMediaLibrary -> getConnection ( userId )
>2968	AssignmentExpr	* c = mMediaLibrary -> getConnection ( userId )
>2969	CallExpression	mMediaLibrary -> getConnection ( userId )
>2970	ArgumentList	userId
>2971	Argument	userId
>2972	Identifier	userId
>2973	Callee	mMediaLibrary -> getConnection
>2974	PtrMemberAccess	mMediaLibrary -> getConnection
>2975	Identifier	getConnection
>2976	Identifier	mMediaLibrary
>2977	Identifier	c
>2978	Identifier	c
>2979	IdentifierDeclType	Connection *
>2980	IdentifierDeclStatement	 
>2981	IdentifierDecl	rval = false
>2982	AssignmentExpr	rval = false
>2983	Identifier	false
>2984	Identifier	false
>2985	Identifier	rval
>2986	IdentifierDeclType	bool
>3003	FunctionDef	CustomCatalog 
>3004	ParameterList	UserId userId , PayeeSchemeId psId
>3005	Parameter	 
>3006	Identifier	psId
>3007	ParameterType	PayeeSchemeId
>3008	Parameter	 
>3009	Identifier	userId
>3010	ParameterType	UserId
>3011	ReturnType	bool
>3012	CompoundStatement	 
>3013	ReturnStatement	 
>3014	Identifier	rval
>3015	IfStatement	if ( rval )
>3016	CompoundStatement	 
>3017	ExpressionStatement	 
>3018	CallExpression	mNode -> getEventController ( ) -> schedule ( e )
>3019	ArgumentList	e
>3020	Argument	e
>3021	Identifier	e
>3022	Callee	mNode -> getEventController ( ) -> schedule
>3023	PtrMemberAccess	mNode -> getEventController ( ) -> schedule
>3024	Identifier	schedule
>3025	CallExpression	mNode -> getEventController ( )
>3026	ArgumentList	 
>3027	Callee	mNode -> getEventController
>3028	PtrMemberAccess	mNode -> getEventController
>3029	Identifier	getEventController
>3030	Identifier	mNode
>3031	ExpressionStatement	 
>3032	CallExpression	BM_ID_SET ( e [ \"details\" ] [ \"userId\" ] , userId )
>3033	ArgumentList	e [ \"details\" ] [ \"userId\" ]
>3034	Argument	userId
>3035	Identifier	userId
>3036	Argument	e [ \"details\" ] [ \"userId\" ]
>3037	ArrayIndexing	e [ \"details\" ] [ \"userId\" ]
>3038	PrimaryExpression	\"userId\"
>3039	ArrayIndexing	e [ \"details\" ]
>3040	PrimaryExpression	\"details\"
>3041	Identifier	e
>3042	Callee	BM_ID_SET
>3043	Identifier	BM_ID_SET
>3044	ExpressionStatement	 
>3045	CallExpression	BM_ID_SET ( e [ \"details\" ] [ \"payeeSchemeId\" ] , psId )
>3046	ArgumentList	e [ \"details\" ] [ \"payeeSchemeId\" ]
>3047	Argument	psId
>3048	Identifier	psId
>3049	Argument	e [ \"details\" ] [ \"payeeSchemeId\" ]
>3050	ArrayIndexing	e [ \"details\" ] [ \"payeeSchemeId\" ]
>3051	PrimaryExpression	\"payeeSchemeId\"
>3052	ArrayIndexing	e [ \"details\" ]
>3053	PrimaryExpression	\"details\"
>3054	Identifier	e
>3055	Callee	BM_ID_SET
>3056	Identifier	BM_ID_SET
>3057	ExpressionStatement	 
>3058	PrimaryExpression	\".removed\"
>3059	Statement	 
>3060	Statement	 
>3061	Statement	 
>3062	Statement	 
>3063	Statement	 
>3064	Statement	 
>3065	IdentifierDeclStatement	 
>3066	IdentifierDecl	e
>3067	Identifier	e
>3068	IdentifierDeclType	Event
>3069	Condition	 
>3070	Identifier	rval
>3071	IfStatement	if ( c != NULL )
>3072	CompoundStatement	 
>3073	ExpressionStatement	 
>3074	CallExpression	c -> close ( )
>3075	ArgumentList	 
>3076	Callee	c -> close
>3077	PtrMemberAccess	c -> close
>3078	Identifier	close
>3079	Identifier	c
>3080	IfStatement	if ( rval )
>3081	CompoundStatement	 
>3082	ExpressionStatement	 
>3083	AssignmentExpr	rval = rval ? c -> commit ( ) 
>3084	ConditionalExpression	rval ? c -> commit ( ) 
>3085	AndExpression	c -> rollback ( ) && false
>3086	Identifier	false
>3087	CallExpression	c -> rollback ( )
>3088	ArgumentList	 
>3089	Callee	c -> rollback
>3090	PtrMemberAccess	c -> rollback
>3091	Identifier	rollback
>3092	Identifier	c
>3093	CallExpression	c -> commit ( )
>3094	ArgumentList	 
>3095	Callee	c -> commit
>3096	PtrMemberAccess	c -> commit
>3097	Identifier	commit
>3098	Identifier	c
>3099	Condition	rval
>3100	Identifier	rval
>3101	Identifier	rval
>3102	ExpressionStatement	 
>3103	AssignmentExpr	rval = mCatalogDb . removePayeeScheme ( psId , c )
>3104	CallExpression	mCatalogDb . removePayeeScheme ( psId , c )
>3105	ArgumentList	psId
>3106	Argument	c
>3107	Identifier	c
>3108	Argument	psId
>3109	Identifier	psId
>3110	Callee	mCatalogDb . removePayeeScheme
>3111	MemberAccess	mCatalogDb . removePayeeScheme
>3112	Identifier	removePayeeScheme
>3113	Identifier	mCatalogDb
>3114	Identifier	rval
>3115	ExpressionStatement	 
>3116	Statement	 
>3117	Statement	 
>3118	Statement	 
>3119	Statement	 
>3120	Statement	 
>3121	Statement	 
>3122	Statement	 
>3123	Statement	 
>3124	Statement	 
>3125	Condition	 
>3126	Identifier	rval
>3127	ExpressionStatement	 
>3128	AssignmentExpr	rval = c -> begin ( )
>3129	CallExpression	c -> begin ( )
>3130	ArgumentList	 
>3131	Callee	c -> begin
>3132	PtrMemberAccess	c -> begin
>3133	Identifier	begin
>3134	Identifier	c
>3135	Identifier	rval
>3136	Condition	 
>3137	EqualityExpression	c != NULL
>3138	Identifier	NULL
>3139	Identifier	c
>3140	IdentifierDeclStatement	 
>3141	IdentifierDecl	* c = mMediaLibrary -> getConnection ( userId )
>3142	AssignmentExpr	* c = mMediaLibrary -> getConnection ( userId )
>3143	CallExpression	mMediaLibrary -> getConnection ( userId )
>3144	ArgumentList	userId
>3145	Argument	userId
>3146	Identifier	userId
>3147	Callee	mMediaLibrary -> getConnection
>3148	PtrMemberAccess	mMediaLibrary -> getConnection
>3149	Identifier	getConnection
>3150	Identifier	mMediaLibrary
>3151	Identifier	c
>3152	Identifier	c
>3153	IdentifierDeclType	Connection *
>3154	IdentifierDeclStatement	 
>3155	IdentifierDecl	rval = false
>3156	AssignmentExpr	rval = false
>3157	Identifier	false
>3158	Identifier	false
>3159	Identifier	rval
>3160	IdentifierDeclType	bool
>3185	FunctionDef	CustomCatalog 
>3186	ParameterList	UserId userId , Seller & seller , ServerToken serverToken
>3187	Parameter	 
>3188	Identifier	serverToken
>3189	ParameterType	ServerToken
>3190	Parameter	 
>3191	Identifier	seller
>3192	ParameterType	Seller &
>3193	Parameter	 
>3194	Identifier	userId
>3195	ParameterType	UserId
>3196	ReturnType	bool
>3197	CompoundStatement	 
>3198	ReturnStatement	 
>3199	Identifier	rval
>3200	IfStatement	if ( c != NULL )
>3201	CompoundStatement	 
>3202	ExpressionStatement	 
>3203	CallExpression	c -> close ( )
>3204	ArgumentList	 
>3205	Callee	c -> close
>3206	PtrMemberAccess	c -> close
>3207	Identifier	close
>3208	Identifier	c
>3209	IfStatement	if ( ( rval = c -> begin ( ) ) )
>3210	CompoundStatement	 
>3211	ExpressionStatement	 
>3212	AssignmentExpr	rval = rval ? c -> commit ( ) 
>3213	ConditionalExpression	rval ? c -> commit ( ) 
>3214	AndExpression	c -> rollback ( ) && false
>3215	Identifier	false
>3216	CallExpression	c -> rollback ( )
>3217	ArgumentList	 
>3218	Callee	c -> rollback
>3219	PtrMemberAccess	c -> rollback
>3220	Identifier	rollback
>3221	Identifier	c
>3222	CallExpression	c -> commit ( )
>3223	ArgumentList	 
>3224	Callee	c -> commit
>3225	PtrMemberAccess	c -> commit
>3226	Identifier	commit
>3227	Identifier	c
>3228	Condition	rval
>3229	Identifier	rval
>3230	Identifier	rval
>3231	ExpressionStatement	 
>3232	AssignmentExpr	rval = mCatalogDb . setConfigValue ( userId , \"serverId\" , seller [ \"serverId\" ] -> getString ( ) , c ) && \
>3233	AndExpression	mCatalogDb . setConfigValue ( userId , \"serverId\" , seller [ \"serverId\" ] -> getString ( ) , c ) && \
>3234	AndExpression	mCatalogDb . setConfigValue ( userId , \"serverToken\" , serverToken , c ) && mCatalogDb . setConfigValue ( \
>3235	CallExpression	mCatalogDb . setConfigValue ( userId , \"serverUrl\" , seller [ \"url\" ] -> getString ( ) , c )
>3236	ArgumentList	userId
>3237	Argument	c
>3238	Identifier	c
>3239	Argument	seller [ \"url\" ] -> getString ( )
>3240	CallExpression	seller [ \"url\" ] -> getString ( )
>3241	ArgumentList	 
>3242	Callee	seller [ \"url\" ] -> getString
>3243	PtrMemberAccess	seller [ \"url\" ] -> getString
>3244	Identifier	getString
>3245	ArrayIndexing	seller [ \"url\" ]
>3246	PrimaryExpression	\"url\"
>3247	Identifier	seller
>3248	Argument	\"serverUrl\"
>3249	PrimaryExpression	\"serverUrl\"
>3250	Argument	userId
>3251	Identifier	userId
>3252	Callee	mCatalogDb . setConfigValue
>3253	MemberAccess	mCatalogDb . setConfigValue
>3254	Identifier	setConfigValue
>3255	Identifier	mCatalogDb
>3256	CallExpression	mCatalogDb . setConfigValue ( userId , \"serverToken\" , serverToken , c )
>3257	ArgumentList	userId
>3258	Argument	c
>3259	Identifier	c
>3260	Argument	serverToken
>3261	Identifier	serverToken
>3262	Argument	\"serverToken\"
>3263	PrimaryExpression	\"serverToken\"
>3264	Argument	userId
>3265	Identifier	userId
>3266	Callee	mCatalogDb . setConfigValue
>3267	MemberAccess	mCatalogDb . setConfigValue
>3268	Identifier	setConfigValue
>3269	Identifier	mCatalogDb
>3270	CallExpression	mCatalogDb . setConfigValue ( userId , \"serverId\" , seller [ \"serverId\" ] -> getString ( ) , c )
>3271	ArgumentList	userId
>3272	Argument	c
>3273	Identifier	c
>3274	Argument	seller [ \"serverId\" ] -> getString ( )
>3275	CallExpression	seller [ \"serverId\" ] -> getString ( )
>3276	ArgumentList	 
>3277	Callee	seller [ \"serverId\" ] -> getString
>3278	PtrMemberAccess	seller [ \"serverId\" ] -> getString
>3279	Identifier	getString
>3280	ArrayIndexing	seller [ \"serverId\" ]
>3281	PrimaryExpression	\"serverId\"
>3282	Identifier	seller
>3283	Argument	\"serverId\"
>3284	PrimaryExpression	\"serverId\"
>3285	Argument	userId
>3286	Identifier	userId
>3287	Callee	mCatalogDb . setConfigValue
>3288	MemberAccess	mCatalogDb . setConfigValue
>3289	Identifier	setConfigValue
>3290	Identifier	mCatalogDb
>3291	Identifier	rval
>3292	Condition	 
>3293	AssignmentExpr	rval = c -> begin ( )
>3294	CallExpression	c -> begin ( )
>3295	ArgumentList	 
>3296	Callee	c -> begin
>3297	PtrMemberAccess	c -> begin
>3298	Identifier	begin
>3299	Identifier	c
>3300	Identifier	rval
>3301	ExpressionStatement	 
>3302	Statement	 
>3303	Statement	 
>3304	Statement	 
>3305	Statement	 
>3306	Statement	 
>3307	Statement	 
>3308	Statement	 
>3309	Statement	 
>3310	Statement	 
>3311	Condition	 
>3312	EqualityExpression	c != NULL
>3313	Identifier	NULL
>3314	Identifier	c
>3315	IdentifierDeclStatement	 
>3316	IdentifierDecl	* c = mMediaLibrary -> getConnection ( userId )
>3317	AssignmentExpr	* c = mMediaLibrary -> getConnection ( userId )
>3318	CallExpression	mMediaLibrary -> getConnection ( userId )
>3319	ArgumentList	userId
>3320	Argument	userId
>3321	Identifier	userId
>3322	Callee	mMediaLibrary -> getConnection
>3323	PtrMemberAccess	mMediaLibrary -> getConnection
>3324	Identifier	getConnection
>3325	Identifier	mMediaLibrary
>3326	Identifier	c
>3327	Identifier	c
>3328	IdentifierDeclType	Connection *
>3329	IdentifierDeclStatement	 
>3330	IdentifierDecl	rval = false
>3331	AssignmentExpr	rval = false
>3332	Identifier	false
>3333	Identifier	false
>3334	Identifier	rval
>3335	IdentifierDeclType	bool
>3359	FunctionDef	CustomCatalog 
>3360	ParameterList	UserId userId , Seller & seller
>3361	Parameter	 
>3362	Identifier	seller
>3363	ParameterType	Seller &
>3364	Parameter	 
>3365	Identifier	userId
>3366	ParameterType	UserId
>3367	ReturnType	bool
>3368	CompoundStatement	 
>3369	ReturnStatement	 
>3370	CallExpression	populateSeller ( userId , seller , serverToken )
>3371	ArgumentList	userId
>3372	Argument	serverToken
>3373	Identifier	serverToken
>3374	Argument	seller
>3375	Identifier	seller
>3376	Argument	userId
>3377	Identifier	userId
>3378	Callee	populateSeller
>3379	Identifier	populateSeller
>3380	IdentifierDeclStatement	 
>3381	IdentifierDecl	serverToken
>3382	Identifier	serverToken
>3383	IdentifierDeclType	string
>3391	FunctionDef	CustomCatalog 
>3392	ParameterList	UserId userId , Seller & seller , string & serverToken
>3393	Parameter	 
>3394	Identifier	serverToken
>3395	ParameterType	string &
>3396	Parameter	 
>3397	Identifier	seller
>3398	ParameterType	Seller &
>3399	Parameter	 
>3400	Identifier	userId
>3401	ParameterType	UserId
>3402	ReturnType	bool
>3403	CompoundStatement	 
>3404	ReturnStatement	 
>3405	Identifier	rval
>3406	IfStatement	if ( c != NULL )
>3407	CompoundStatement	 
>3408	ExpressionStatement	 
>3409	CallExpression	c -> close ( )
>3410	ArgumentList	 
>3411	Callee	c -> close
>3412	PtrMemberAccess	c -> close
>3413	Identifier	close
>3414	Identifier	c
>3415	IfStatement	if ( ! rval )
>3416	CompoundStatement	 
>3417	ExpressionStatement	 
>3418	CallExpression	Exception 
>3419	ArgumentList	e
>3420	Argument	e
>3421	Identifier	e
>3422	Callee	Exception 
>3423	Identifier	Exception 
>3424	ExpressionStatement	 
>3425	CallExpression	BM_ID_SET ( e -> getDetails ( ) [ \"userId\" ] , userId )
>3426	ArgumentList	e -> getDetails ( ) [ \"userId\" ]
>3427	Argument	userId
>3428	Identifier	userId
>3429	Argument	e -> getDetails ( ) [ \"userId\" ]
>3430	ArrayIndexing	e -> getDetails ( ) [ \"userId\" ]
>3431	PrimaryExpression	\"userId\"
>3432	CallExpression	e -> getDetails ( )
>3433	ArgumentList	 
>3434	Callee	e -> getDetails
>3435	PtrMemberAccess	e -> getDetails
>3436	Identifier	getDetails
>3437	Identifier	e
>3438	Callee	BM_ID_SET
>3439	Identifier	BM_ID_SET
>3440	IdentifierDeclStatement	 
>3441	IdentifierDecl	e = new Exception ( \"Failed to populate seller information for the given user ID.\" , \"bitmunk.catalog.PopulateSellerFailed\" )
>3442	AssignmentExpr	e = new Exception ( \"Failed to populate seller information for the given user ID.\" , \"bitmunk.catalog.PopulateSellerFailed\" )
>3443	Expression	\"Failed to populate seller information for the given user ID.\" , \"bitmunk.catalog.PopulateSellerFailed\"
>3444	PrimaryExpression	\"bitmunk.catalog.PopulateSellerFailed\"
>3445	PrimaryExpression	\"Failed to populate seller information for the given user ID.\"
>3446	Identifier	e
>3447	Identifier	e
>3448	IdentifierDeclType	ExceptionRef
>3449	Condition	 
>3450	UnaryOp	! rval
>3451	Identifier	rval
>3452	UnaryOperator	!
>3453	ExpressionStatement	 
>3454	AssignmentExpr	rval = mCatalogDb . populateSeller ( userId , seller , serverToken , c )
>3455	CallExpression	mCatalogDb . populateSeller ( userId , seller , serverToken , c )
>3456	ArgumentList	userId
>3457	Argument	c
>3458	Identifier	c
>3459	Argument	serverToken
>3460	Identifier	serverToken
>3461	Argument	seller
>3462	Identifier	seller
>3463	Argument	userId
>3464	Identifier	userId
>3465	Callee	mCatalogDb . populateSeller
>3466	MemberAccess	mCatalogDb . populateSeller
>3467	Identifier	populateSeller
>3468	Identifier	mCatalogDb
>3469	Identifier	rval
>3470	ExpressionStatement	 
>3471	Statement	 
>3472	Statement	 
>3473	Statement	 
>3474	Statement	 
>3475	Statement	 
>3476	Statement	 
>3477	Statement	 
>3478	Statement	 
>3479	Statement	 
>3480	Condition	 
>3481	EqualityExpression	c != NULL
>3482	Identifier	NULL
>3483	Identifier	c
>3484	IdentifierDeclStatement	 
>3485	IdentifierDecl	* c = mMediaLibrary -> getConnection ( userId )
>3486	AssignmentExpr	* c = mMediaLibrary -> getConnection ( userId )
>3487	CallExpression	mMediaLibrary -> getConnection ( userId )
>3488	ArgumentList	userId
>3489	Argument	userId
>3490	Identifier	userId
>3491	Callee	mMediaLibrary -> getConnection
>3492	PtrMemberAccess	mMediaLibrary -> getConnection
>3493	Identifier	getConnection
>3494	Identifier	mMediaLibrary
>3495	Identifier	c
>3496	Identifier	c
>3497	IdentifierDeclType	Connection *
>3498	IdentifierDeclStatement	 
>3499	IdentifierDecl	rval = false
>3500	AssignmentExpr	rval = false
>3501	Identifier	false
>3502	Identifier	false
>3503	Identifier	rval
>3504	IdentifierDeclType	bool
>3525	FunctionDef	CustomCatalog 
>3526	ParameterList	UserId userId , uint32_t & updateId
>3527	Parameter	 
>3528	Identifier	updateId
>3529	ParameterType	uint32_t &
>3530	Parameter	 
>3531	Identifier	userId
>3532	ParameterType	UserId
>3533	ReturnType	bool
>3534	CompoundStatement	 
>3535	ReturnStatement	 
>3536	Identifier	rval
>3537	IfStatement	if ( ! rval )
>3538	CompoundStatement	 
>3539	ExpressionStatement	 
>3540	CallExpression	Exception 
>3541	ArgumentList	e
>3542	Argument	e
>3543	Identifier	e
>3544	Callee	Exception 
>3545	Identifier	Exception 
>3546	ExpressionStatement	 
>3547	CallExpression	BM_ID_SET ( e -> getDetails ( ) [ \"userId\" ] , userId )
>3548	ArgumentList	e -> getDetails ( ) [ \"userId\" ]
>3549	Argument	userId
>3550	Identifier	userId
>3551	Argument	e -> getDetails ( ) [ \"userId\" ]
>3552	ArrayIndexing	e -> getDetails ( ) [ \"userId\" ]
>3553	PrimaryExpression	\"userId\"
>3554	CallExpression	e -> getDetails ( )
>3555	ArgumentList	 
>3556	Callee	e -> getDetails
>3557	PtrMemberAccess	e -> getDetails
>3558	Identifier	getDetails
>3559	Identifier	e
>3560	Callee	BM_ID_SET
>3561	Identifier	BM_ID_SET
>3562	IdentifierDeclStatement	 
>3563	IdentifierDecl	e = new Exception ( \"Failed to get current update ID for the given userId.\" , \"bitmunk.catalog.GetUpdateIdFailed\" )
>3564	AssignmentExpr	e = new Exception ( \"Failed to get current update ID for the given userId.\" , \"bitmunk.catalog.GetUpdateIdFailed\" )
>3565	Expression	\"Failed to get current update ID for the given userId.\" , \"bitmunk.catalog.GetUpdateIdFailed\"
>3566	PrimaryExpression	\"bitmunk.catalog.GetUpdateIdFailed\"
>3567	PrimaryExpression	\"Failed to get current update ID for the given userId.\"
>3568	Identifier	e
>3569	Identifier	e
>3570	IdentifierDeclType	ExceptionRef
>3571	Condition	 
>3572	UnaryOp	! rval
>3573	Identifier	rval
>3574	UnaryOperator	!
>3575	IfStatement	if ( c != NULL )
>3576	CompoundStatement	 
>3577	ExpressionStatement	 
>3578	CallExpression	c -> close ( )
>3579	ArgumentList	 
>3580	Callee	c -> close
>3581	PtrMemberAccess	c -> close
>3582	Identifier	close
>3583	Identifier	c
>3584	ExpressionStatement	 
>3585	AssignmentExpr	rval = mCatalogDb . getConfigValue ( \"updateId\" , updateId , c )
>3586	CallExpression	mCatalogDb . getConfigValue ( \"updateId\" , updateId , c )
>3587	ArgumentList	\"updateId\"
>3588	Argument	c
>3589	Identifier	c
>3590	Argument	updateId
>3591	Identifier	updateId
>3592	Argument	\"updateId\"
>3593	PrimaryExpression	\"updateId\"
>3594	Callee	mCatalogDb . getConfigValue
>3595	MemberAccess	mCatalogDb . getConfigValue
>3596	Identifier	getConfigValue
>3597	Identifier	mCatalogDb
>3598	Identifier	rval
>3599	ExpressionStatement	 
>3600	Statement	 
>3601	Statement	 
>3602	Statement	 
>3603	Statement	 
>3604	Statement	 
>3605	Statement	 
>3606	Statement	 
>3607	Statement	 
>3608	Statement	 
>3609	Condition	 
>3610	EqualityExpression	c != NULL
>3611	Identifier	NULL
>3612	Identifier	c
>3613	IdentifierDeclStatement	 
>3614	IdentifierDecl	* c = mMediaLibrary -> getConnection ( userId )
>3615	AssignmentExpr	* c = mMediaLibrary -> getConnection ( userId )
>3616	CallExpression	mMediaLibrary -> getConnection ( userId )
>3617	ArgumentList	userId
>3618	Argument	userId
>3619	Identifier	userId
>3620	Callee	mMediaLibrary -> getConnection
>3621	PtrMemberAccess	mMediaLibrary -> getConnection
>3622	Identifier	getConnection
>3623	Identifier	mMediaLibrary
>3624	Identifier	c
>3625	Identifier	c
>3626	IdentifierDeclType	Connection *
>3627	IdentifierDeclStatement	 
>3628	IdentifierDecl	rval = false
>3629	AssignmentExpr	rval = false
>3630	Identifier	false
>3631	Identifier	false
>3632	Identifier	rval
>3633	IdentifierDeclType	bool
>3653	FunctionDef	CustomCatalog 
>3654	ParameterList	UserId userId , SellerListingUpdate & update
>3655	Parameter	 
>3656	Identifier	update
>3657	ParameterType	SellerListingUpdate &
>3658	Parameter	 
>3659	Identifier	userId
>3660	ParameterType	UserId
>3661	ReturnType	bool
>3662	CompoundStatement	 
>3663	ReturnStatement	 
>3664	Identifier	rval
>3665	IfStatement	if ( ! rval )
>3666	CompoundStatement	 
>3667	ExpressionStatement	 
>3668	CallExpression	Exception 
>3669	ArgumentList	e
>3670	Argument	e
>3671	Identifier	e
>3672	Callee	Exception 
>3673	Identifier	Exception 
>3674	ExpressionStatement	 
>3675	CallExpression	BM_ID_SET ( e -> getDetails ( ) [ \"userId\" ] , userId )
>3676	ArgumentList	e -> getDetails ( ) [ \"userId\" ]
>3677	Argument	userId
>3678	Identifier	userId
>3679	Argument	e -> getDetails ( ) [ \"userId\" ]
>3680	ArrayIndexing	e -> getDetails ( ) [ \"userId\" ]
>3681	PrimaryExpression	\"userId\"
>3682	CallExpression	e -> getDetails ( )
>3683	ArgumentList	 
>3684	Callee	e -> getDetails
>3685	PtrMemberAccess	e -> getDetails
>3686	Identifier	getDetails
>3687	Identifier	e
>3688	Callee	BM_ID_SET
>3689	Identifier	BM_ID_SET
>3690	IdentifierDeclStatement	 
>3691	IdentifierDecl	e = new Exception ( \"Failed to retrieve a heartbeat listing update for the given userId.\" , \"bitmunk.catalog.PopulateHeartbeatListingUpdateFailed\" )
>3692	AssignmentExpr	e = new Exception ( \"Failed to retrieve a heartbeat listing update for the given userId.\" , \"bitmunk.catalog.PopulateHeartbeatListingUpdateFailed\" )
>3693	Expression	\"Failed to retrieve a heartbeat listing update for the given userId.\" , \"bitmunk.catalog.PopulateHeartbeatListingUpdateFailed\"\
>3694	PrimaryExpression	\"bitmunk.catalog.PopulateHeartbeatListingUpdateFailed\"
>3695	PrimaryExpression	\"Failed to retrieve a heartbeat listing update for the given userId.\"
>3696	Identifier	e
>3697	Identifier	e
>3698	IdentifierDeclType	ExceptionRef
>3699	Condition	 
>3700	UnaryOp	! rval
>3701	Identifier	rval
>3702	UnaryOperator	!
>3703	IfStatement	if ( c != NULL )
>3704	CompoundStatement	 
>3705	ExpressionStatement	 
>3706	CallExpression	c -> close ( )
>3707	ArgumentList	 
>3708	Callee	c -> close
>3709	PtrMemberAccess	c -> close
>3710	Identifier	close
>3711	Identifier	c
>3712	IfStatement	if ( ( rval = mCatalogDb . populateSeller ( userId , seller , serverToken , c ) && mCatalogDb . getConfigValue ( \"\
>3713	ElseStatement	else
>3714	CompoundStatement	 
>3715	ExpressionStatement	 
>3716	CallExpression	Exception 
>3717	ArgumentList	e
>3718	Argument	e
>3719	Identifier	e
>3720	Callee	Exception 
>3721	Identifier	Exception 
>3722	IdentifierDeclStatement	 
>3723	IdentifierDecl	e = new Exception ( \"Failed to retrieve seller configuration details.\" , \"bitmunk.catalog.InvalidConfigurationDetails\" )
>3724	AssignmentExpr	e = new Exception ( \"Failed to retrieve seller configuration details.\" , \"bitmunk.catalog.InvalidConfigurationDetails\" )
>3725	Expression	\"Failed to retrieve seller configuration details.\" , \"bitmunk.catalog.InvalidConfigurationDetails\"
>3726	PrimaryExpression	\"bitmunk.catalog.InvalidConfigurationDetails\"
>3727	PrimaryExpression	\"Failed to retrieve seller configuration details.\"
>3728	Identifier	e
>3729	Identifier	e
>3730	IdentifierDeclType	ExceptionRef
>3731	CompoundStatement	 
>3732	ExpressionStatement	 
>3733	CallExpression	update [ \"newUpdateId\" ] -> setType ( String )
>3734	ArgumentList	String
>3735	Argument	String
>3736	Identifier	String
>3737	Callee	update [ \"newUpdateId\" ] -> setType
>3738	PtrMemberAccess	update [ \"newUpdateId\" ] -> setType
>3739	Identifier	setType
>3740	ArrayIndexing	update [ \"newUpdateId\" ]
>3741	PrimaryExpression	\"newUpdateId\"
>3742	Identifier	update
>3743	ExpressionStatement	 
>3744	AssignmentExpr	update [ \"newUpdateId\" ] = updateId
>3745	Identifier	updateId
>3746	ArrayIndexing	update [ \"newUpdateId\" ]
>3747	PrimaryExpression	\"newUpdateId\"
>3748	Identifier	update
>3749	ExpressionStatement	 
>3750	CallExpression	update [ \"updateId\" ] -> setType ( String )
>3751	ArgumentList	String
>3752	Argument	String
>3753	Identifier	String
>3754	Callee	update [ \"updateId\" ] -> setType
>3755	PtrMemberAccess	update [ \"updateId\" ] -> setType
>3756	Identifier	setType
>3757	ArrayIndexing	update [ \"updateId\" ]
>3758	PrimaryExpression	\"updateId\"
>3759	Identifier	update
>3760	ExpressionStatement	 
>3761	AssignmentExpr	update [ \"updateId\" ] = updateId
>3762	Identifier	updateId
>3763	ArrayIndexing	update [ \"updateId\" ]
>3764	PrimaryExpression	\"updateId\"
>3765	Identifier	update
>3766	ExpressionStatement	 
>3767	AssignmentExpr	update [ \"serverToken\" ] = serverToken . c_str ( )
>3768	CallExpression	serverToken . c_str ( )
>3769	ArgumentList	 
>3770	Callee	serverToken . c_str
>3771	MemberAccess	serverToken . c_str
>3772	Identifier	c_str
>3773	Identifier	serverToken
>3774	ArrayIndexing	update [ \"serverToken\" ]
>3775	PrimaryExpression	\"serverToken\"
>3776	Identifier	update
>3777	ExpressionStatement	 
>3778	AssignmentExpr	update [ \"seller\" ] = seller
>3779	Identifier	seller
>3780	ArrayIndexing	update [ \"seller\" ]
>3781	PrimaryExpression	\"seller\"
>3782	Identifier	update
>3783	Condition	 
>3784	AssignmentExpr	rval = mCatalogDb . populateSeller ( userId , seller , serverToken , c ) && mCatalogDb . getConfigValue ( \"\
>3785	AndExpression	mCatalogDb . populateSeller ( userId , seller , serverToken , c ) && mCatalogDb . getConfigValue ( \"\
>3786	CallExpression	mCatalogDb . getConfigValue ( \"updateId\" , updateId , c )
>3787	ArgumentList	\"updateId\"
>3788	Argument	c
>3789	Identifier	c
>3790	Argument	updateId
>3791	Identifier	updateId
>3792	Argument	\"updateId\"
>3793	PrimaryExpression	\"updateId\"
>3794	Callee	mCatalogDb . getConfigValue
>3795	MemberAccess	mCatalogDb . getConfigValue
>3796	Identifier	getConfigValue
>3797	Identifier	mCatalogDb
>3798	CallExpression	mCatalogDb . populateSeller ( userId , seller , serverToken , c )
>3799	ArgumentList	userId
>3800	Argument	c
>3801	Identifier	c
>3802	Argument	serverToken
>3803	Identifier	serverToken
>3804	Argument	seller
>3805	Identifier	seller
>3806	Argument	userId
>3807	Identifier	userId
>3808	Callee	mCatalogDb . populateSeller
>3809	MemberAccess	mCatalogDb . populateSeller
>3810	Identifier	populateSeller
>3811	Identifier	mCatalogDb
>3812	Identifier	rval
>3813	IdentifierDeclStatement	 
>3814	IdentifierDecl	updateId
>3815	Identifier	updateId
>3816	IdentifierDeclType	uint32_t
>3817	IdentifierDeclStatement	 
>3818	IdentifierDecl	serverToken
>3819	Identifier	serverToken
>3820	IdentifierDeclType	string
>3821	IdentifierDeclStatement	 
>3822	IdentifierDecl	seller
>3823	Identifier	seller
>3824	IdentifierDeclType	Seller
>3825	ExpressionStatement	 
>3826	Statement	 
>3827	Statement	 
>3828	Statement	 
>3829	Statement	 
>3830	Statement	 
>3831	Statement	 
>3832	Statement	 
>3833	Statement	 
>3834	Statement	 
>3835	Condition	 
>3836	EqualityExpression	c != NULL
>3837	Identifier	NULL
>3838	Identifier	c
>3839	IdentifierDeclStatement	 
>3840	IdentifierDecl	* c = mMediaLibrary -> getConnection ( userId )
>3841	AssignmentExpr	* c = mMediaLibrary -> getConnection ( userId )
>3842	CallExpression	mMediaLibrary -> getConnection ( userId )
>3843	ArgumentList	userId
>3844	Argument	userId
>3845	Identifier	userId
>3846	Callee	mMediaLibrary -> getConnection
>3847	PtrMemberAccess	mMediaLibrary -> getConnection
>3848	Identifier	getConnection
>3849	Identifier	mMediaLibrary
>3850	Identifier	c
>3851	Identifier	c
>3852	IdentifierDeclType	Connection *
>3853	IdentifierDeclStatement	 
>3854	IdentifierDecl	rval = false
>3855	AssignmentExpr	rval = false
>3856	Identifier	false
>3857	Identifier	false
>3858	Identifier	rval
>3859	IdentifierDeclType	bool
>3886	FunctionDef	CustomCatalog 
>3887	ParameterList	UserId userId , SellerListingUpdate & update
>3888	Parameter	 
>3889	Identifier	update
>3890	ParameterType	SellerListingUpdate &
>3891	Parameter	 
>3892	Identifier	userId
>3893	ParameterType	UserId
>3894	ReturnType	bool
>3895	CompoundStatement	 
>3896	ReturnStatement	 
>3897	Identifier	rval
>3898	IfStatement	if ( ! rval )
>3899	CompoundStatement	 
>3900	ExpressionStatement	 
>3901	CallExpression	Exception 
>3902	ArgumentList	e
>3903	Argument	e
>3904	Identifier	e
>3905	Callee	Exception 
>3906	Identifier	Exception 
>3907	ExpressionStatement	 
>3908	CallExpression	BM_ID_SET ( e -> getDetails ( ) [ \"userId\" ] , userId )
>3909	ArgumentList	e -> getDetails ( ) [ \"userId\" ]
>3910	Argument	userId
>3911	Identifier	userId
>3912	Argument	e -> getDetails ( ) [ \"userId\" ]
>3913	ArrayIndexing	e -> getDetails ( ) [ \"userId\" ]
>3914	PrimaryExpression	\"userId\"
>3915	CallExpression	e -> getDetails ( )
>3916	ArgumentList	 
>3917	Callee	e -> getDetails
>3918	PtrMemberAccess	e -> getDetails
>3919	Identifier	getDetails
>3920	Identifier	e
>3921	Callee	BM_ID_SET
>3922	Identifier	BM_ID_SET
>3923	IdentifierDeclStatement	 
>3924	IdentifierDecl	e = new Exception ( \"Failed to retrieve the list of pending updates for the given userId.\" , \"bitmunk.catalog.PopulatePendingListingUpdateFailed\" )
>3925	AssignmentExpr	e = new Exception ( \"Failed to retrieve the list of pending updates for the given userId.\" , \"bitmunk.catalog.PopulatePendingListingUpdateFailed\" )
>3926	Expression	\"Failed to retrieve the list of pending updates for the given userId.\" , \"bitmunk.catalog.PopulatePendingListingUpdateFailed\"\
>3927	PrimaryExpression	\"bitmunk.catalog.PopulatePendingListingUpdateFailed\"
>3928	PrimaryExpression	\"Failed to retrieve the list of pending updates for the given userId.\"
>3929	Identifier	e
>3930	Identifier	e
>3931	IdentifierDeclType	ExceptionRef
>3932	Condition	 
>3933	UnaryOp	! rval
>3934	Identifier	rval
>3935	UnaryOperator	!
>3936	IfStatement	if ( c != NULL )
>3937	CompoundStatement	 
>3938	ExpressionStatement	 
>3939	CallExpression	c -> close ( )
>3940	ArgumentList	 
>3941	Callee	c -> close
>3942	PtrMemberAccess	c -> close
>3943	Identifier	close
>3944	Identifier	c
>3945	IfStatement	if ( c -> begin ( ) )
>3946	CompoundStatement	 
>3947	ExpressionStatement	 
>3948	AssignmentExpr	rval = rval ? c -> commit ( ) 
>3949	ConditionalExpression	rval ? c -> commit ( ) 
>3950	AndExpression	c -> rollback ( ) && false
>3951	Identifier	false
>3952	CallExpression	c -> rollback ( )
>3953	ArgumentList	 
>3954	Callee	c -> rollback
>3955	PtrMemberAccess	c -> rollback
>3956	Identifier	rollback
>3957	Identifier	c
>3958	CallExpression	c -> commit ( )
>3959	ArgumentList	 
>3960	Callee	c -> commit
>3961	PtrMemberAccess	c -> commit
>3962	Identifier	commit
>3963	Identifier	c
>3964	Condition	rval
>3965	Identifier	rval
>3966	Identifier	rval
>3967	IfStatement	if ( ( rval = mCatalogDb . populateSeller ( userId , seller , serverToken , c ) && mCatalogDb . getConfigValue ( \"\
>3968	ElseStatement	else
>3969	CompoundStatement	 
>3970	ExpressionStatement	 
>3971	CallExpression	Exception 
>3972	ArgumentList	e
>3973	Argument	e
>3974	Identifier	e
>3975	Callee	Exception 
>3976	Identifier	Exception 
>3977	IdentifierDeclStatement	 
>3978	IdentifierDecl	e = new Exception ( \"Failed to retrieve seller configuration details.\" , \"bitmunk.catalog.InvalidConfigurationDetails\" )
>3979	AssignmentExpr	e = new Exception ( \"Failed to retrieve seller configuration details.\" , \"bitmunk.catalog.InvalidConfigurationDetails\" )
>3980	Expression	\"Failed to retrieve seller configuration details.\" , \"bitmunk.catalog.InvalidConfigurationDetails\"
>3981	PrimaryExpression	\"bitmunk.catalog.InvalidConfigurationDetails\"
>3982	PrimaryExpression	\"Failed to retrieve seller configuration details.\"
>3983	Identifier	e
>3984	Identifier	e
>3985	IdentifierDeclType	ExceptionRef
>3986	CompoundStatement	 
>3987	ExpressionStatement	 
>3988	AssignmentExpr	rval = mCatalogDb . populateUpdatingSellerListings ( userId , BM_SERVER_ID ( seller [ \"serverId\" ] ) , \
>3989	CallExpression	mCatalogDb . populateUpdatingSellerListings ( userId , BM_SERVER_ID ( seller [ \"serverId\" ] ) , mMediaLibrary , \
>3990	ArgumentList	userId
>3991	Argument	c
>3992	Identifier	c
>3993	Argument	update [ \"payeeSchemes\" ]
>3994	ArrayIndexing	update [ \"payeeSchemes\" ]
>3995	PrimaryExpression	\"payeeSchemes\"
>3996	Identifier	update
>3997	Argument	update [ \"listings\" ]
>3998	ArrayIndexing	update [ \"listings\" ]
>3999	PrimaryExpression	\"listings\"
>4000	Identifier	update
>4001	Argument	mMediaLibrary
>4002	Identifier	mMediaLibrary
>4003	Argument	BM_SERVER_ID ( seller [ \"serverId\" ] )
>4004	CallExpression	BM_SERVER_ID ( seller [ \"serverId\" ] )
>4005	ArgumentList	seller [ \"serverId\" ]
>4006	Argument	seller [ \"serverId\" ]
>4007	ArrayIndexing	seller [ \"serverId\" ]
>4008	PrimaryExpression	\"serverId\"
>4009	Identifier	seller
>4010	Callee	BM_SERVER_ID
>4011	Identifier	BM_SERVER_ID
>4012	Argument	userId
>4013	Identifier	userId
>4014	Callee	mCatalogDb . populateUpdatingSellerListings
>4015	MemberAccess	mCatalogDb . populateUpdatingSellerListings
>4016	Identifier	populateUpdatingSellerListings
>4017	Identifier	mCatalogDb
>4018	Identifier	rval
>4019	ExpressionStatement	 
>4020	CallExpression	update [ \"newUpdateId\" ] -> setType ( String )
>4021	ArgumentList	String
>4022	Argument	String
>4023	Identifier	String
>4024	Callee	update [ \"newUpdateId\" ] -> setType
>4025	PtrMemberAccess	update [ \"newUpdateId\" ] -> setType
>4026	Identifier	setType
>4027	ArrayIndexing	update [ \"newUpdateId\" ]
>4028	PrimaryExpression	\"newUpdateId\"
>4029	Identifier	update
>4030	ExpressionStatement	 
>4031	AssignmentExpr	update [ \"newUpdateId\" ] = updateId + 1
>4032	AdditiveExpression	updateId + 1
>4033	PrimaryExpression	1
>4034	Identifier	updateId
>4035	ArrayIndexing	update [ \"newUpdateId\" ]
>4036	PrimaryExpression	\"newUpdateId\"
>4037	Identifier	update
>4038	ExpressionStatement	 
>4039	CallExpression	update [ \"updateId\" ] -> setType ( String )
>4040	ArgumentList	String
>4041	Argument	String
>4042	Identifier	String
>4043	Callee	update [ \"updateId\" ] -> setType
>4044	PtrMemberAccess	update [ \"updateId\" ] -> setType
>4045	Identifier	setType
>4046	ArrayIndexing	update [ \"updateId\" ]
>4047	PrimaryExpression	\"updateId\"
>4048	Identifier	update
>4049	ExpressionStatement	 
>4050	AssignmentExpr	update [ \"updateId\" ] = updateId + 1
>4051	AdditiveExpression	updateId + 1
>4052	PrimaryExpression	1
>4053	Identifier	updateId
>4054	ArrayIndexing	update [ \"updateId\" ]
>4055	PrimaryExpression	\"updateId\"
>4056	Identifier	update
>4057	ExpressionStatement	 
>4058	AssignmentExpr	update [ \"serverToken\" ] = serverToken . c_str ( )
>4059	CallExpression	serverToken . c_str ( )
>4060	ArgumentList	 
>4061	Callee	serverToken . c_str
>4062	MemberAccess	serverToken . c_str
>4063	Identifier	c_str
>4064	Identifier	serverToken
>4065	ArrayIndexing	update [ \"serverToken\" ]
>4066	PrimaryExpression	\"serverToken\"
>4067	Identifier	update
>4068	ExpressionStatement	 
>4069	AssignmentExpr	update [ \"seller\" ] = seller
>4070	Identifier	seller
>4071	ArrayIndexing	update [ \"seller\" ]
>4072	PrimaryExpression	\"seller\"
>4073	Identifier	update
>4074	Condition	 
>4075	AssignmentExpr	rval = mCatalogDb . populateSeller ( userId , seller , serverToken , c ) && mCatalogDb . getConfigValue ( \"\
>4076	AndExpression	mCatalogDb . populateSeller ( userId , seller , serverToken , c ) && mCatalogDb . getConfigValue ( \"\
>4077	CallExpression	mCatalogDb . getConfigValue ( \"updateId\" , updateId , c )
>4078	ArgumentList	\"updateId\"
>4079	Argument	c
>4080	Identifier	c
>4081	Argument	updateId
>4082	Identifier	updateId
>4083	Argument	\"updateId\"
>4084	PrimaryExpression	\"updateId\"
>4085	Callee	mCatalogDb . getConfigValue
>4086	MemberAccess	mCatalogDb . getConfigValue
>4087	Identifier	getConfigValue
>4088	Identifier	mCatalogDb
>4089	CallExpression	mCatalogDb . populateSeller ( userId , seller , serverToken , c )
>4090	ArgumentList	userId
>4091	Argument	c
>4092	Identifier	c
>4093	Argument	serverToken
>4094	Identifier	serverToken
>4095	Argument	seller
>4096	Identifier	seller
>4097	Argument	userId
>4098	Identifier	userId
>4099	Callee	mCatalogDb . populateSeller
>4100	MemberAccess	mCatalogDb . populateSeller
>4101	Identifier	populateSeller
>4102	Identifier	mCatalogDb
>4103	Identifier	rval
>4104	IdentifierDeclStatement	 
>4105	IdentifierDecl	updateId
>4106	Identifier	updateId
>4107	IdentifierDeclType	uint32_t
>4108	IdentifierDeclStatement	 
>4109	IdentifierDecl	serverToken
>4110	Identifier	serverToken
>4111	IdentifierDeclType	string
>4112	IdentifierDeclStatement	 
>4113	IdentifierDecl	seller
>4114	Identifier	seller
>4115	IdentifierDeclType	Seller
>4116	Condition	 
>4117	CallExpression	c -> begin ( )
>4118	ArgumentList	 
>4119	Callee	c -> begin
>4120	PtrMemberAccess	c -> begin
>4121	Identifier	begin
>4122	Identifier	c
>4123	ExpressionStatement	 
>4124	Statement	 
>4125	Statement	 
>4126	Statement	 
>4127	Statement	 
>4128	Statement	 
>4129	Statement	 
>4130	Statement	 
>4131	Statement	 
>4132	Statement	 
>4133	Condition	 
>4134	EqualityExpression	c != NULL
>4135	Identifier	NULL
>4136	Identifier	c
>4137	IdentifierDeclStatement	 
>4138	IdentifierDecl	* c = mMediaLibrary -> getConnection ( userId )
>4139	AssignmentExpr	* c = mMediaLibrary -> getConnection ( userId )
>4140	CallExpression	mMediaLibrary -> getConnection ( userId )
>4141	ArgumentList	userId
>4142	Argument	userId
>4143	Identifier	userId
>4144	Callee	mMediaLibrary -> getConnection
>4145	PtrMemberAccess	mMediaLibrary -> getConnection
>4146	Identifier	getConnection
>4147	Identifier	mMediaLibrary
>4148	Identifier	c
>4149	Identifier	c
>4150	IdentifierDeclType	Connection *
>4151	IdentifierDeclStatement	 
>4152	IdentifierDecl	rval = false
>4153	AssignmentExpr	rval = false
>4154	Identifier	false
>4155	Identifier	false
>4156	Identifier	rval
>4157	IdentifierDeclType	bool
>4191	FunctionDef	CustomCatalog 
>4192	ParameterList	UserId userId , SellerListingUpdate & update
>4193	Parameter	 
>4194	Identifier	update
>4195	ParameterType	SellerListingUpdate &
>4196	Parameter	 
>4197	Identifier	userId
>4198	ParameterType	UserId
>4199	ReturnType	bool
>4200	CompoundStatement	 
>4201	ReturnStatement	 
>4202	Identifier	rval
>4203	IfStatement	if ( ! rval )
>4204	CompoundStatement	 
>4205	ExpressionStatement	 
>4206	CallExpression	Exception 
>4207	ArgumentList	e
>4208	Argument	e
>4209	Identifier	e
>4210	Callee	Exception 
>4211	Identifier	Exception 
>4212	ExpressionStatement	 
>4213	CallExpression	BM_ID_SET ( e -> getDetails ( ) [ \"userId\" ] , userId )
>4214	ArgumentList	e -> getDetails ( ) [ \"userId\" ]
>4215	Argument	userId
>4216	Identifier	userId
>4217	Argument	e -> getDetails ( ) [ \"userId\" ]
>4218	ArrayIndexing	e -> getDetails ( ) [ \"userId\" ]
>4219	PrimaryExpression	\"userId\"
>4220	CallExpression	e -> getDetails ( )
>4221	ArgumentList	 
>4222	Callee	e -> getDetails
>4223	PtrMemberAccess	e -> getDetails
>4224	Identifier	getDetails
>4225	Identifier	e
>4226	Callee	BM_ID_SET
>4227	Identifier	BM_ID_SET
>4228	IdentifierDeclStatement	 
>4229	IdentifierDecl	e = new Exception ( \"Failed to generate the list of seller listing updates.\" , \"bitmunk.catalog.PopulateNextListingUpdateFailed\" )
>4230	AssignmentExpr	e = new Exception ( \"Failed to generate the list of seller listing updates.\" , \"bitmunk.catalog.PopulateNextListingUpdateFailed\" )
>4231	Expression	\"Failed to generate the list of seller listing updates.\" , \"bitmunk.catalog.PopulateNextListingUpdateFailed\"
>4232	PrimaryExpression	\"bitmunk.catalog.PopulateNextListingUpdateFailed\"
>4233	PrimaryExpression	\"Failed to generate the list of seller listing updates.\"
>4234	Identifier	e
>4235	Identifier	e
>4236	IdentifierDeclType	ExceptionRef
>4237	Condition	 
>4238	UnaryOp	! rval
>4239	Identifier	rval
>4240	UnaryOperator	!
>4241	IfStatement	if ( c != NULL )
>4242	CompoundStatement	 
>4243	ExpressionStatement	 
>4244	CallExpression	c -> close ( )
>4245	ArgumentList	 
>4246	Callee	c -> close
>4247	PtrMemberAccess	c -> close
>4248	Identifier	close
>4249	Identifier	c
>4250	IfStatement	if ( c -> begin ( ) )
>4251	CompoundStatement	 
>4252	ExpressionStatement	 
>4253	AssignmentExpr	rval = rval ? c -> commit ( ) 
>4254	ConditionalExpression	rval ? c -> commit ( ) 
>4255	AndExpression	c -> rollback ( ) && false
>4256	Identifier	false
>4257	CallExpression	c -> rollback ( )
>4258	ArgumentList	 
>4259	Callee	c -> rollback
>4260	PtrMemberAccess	c -> rollback
>4261	Identifier	rollback
>4262	Identifier	c
>4263	CallExpression	c -> commit ( )
>4264	ArgumentList	 
>4265	Callee	c -> commit
>4266	PtrMemberAccess	c -> commit
>4267	Identifier	commit
>4268	Identifier	c
>4269	Condition	rval
>4270	Identifier	rval
>4271	Identifier	rval
>4272	IfStatement	if ( ( rval = mCatalogDb . populateSeller ( userId , seller , serverToken , c ) && mCatalogDb . getConfigValue ( \"\
>4273	CompoundStatement	 
>4274	IfStatement	if ( rval )
>4275	CompoundStatement	 
>4276	ExpressionStatement	 
>4277	CallExpression	update [ \"newUpdateId\" ] -> setType ( String )
>4278	ArgumentList	String
>4279	Argument	String
>4280	Identifier	String
>4281	Callee	update [ \"newUpdateId\" ] -> setType
>4282	PtrMemberAccess	update [ \"newUpdateId\" ] -> setType
>4283	Identifier	setType
>4284	ArrayIndexing	update [ \"newUpdateId\" ]
>4285	PrimaryExpression	\"newUpdateId\"
>4286	Identifier	update
>4287	IfStatement	if ( update [ \"listings\" ] [ \"updates\" ] -> length ( ) > 0 || update [ \"listings\" ] [ \"removals\" ] -> length ( ) > \
>4288	ElseStatement	else
>4289	CompoundStatement	 
>4290	ExpressionStatement	 
>4291	AssignmentExpr	update [ \"newUpdateId\" ] = updateId
>4292	Identifier	updateId
>4293	ArrayIndexing	update [ \"newUpdateId\" ]
>4294	PrimaryExpression	\"newUpdateId\"
>4295	Identifier	update
>4296	CompoundStatement	 
>4297	ExpressionStatement	 
>4298	AssignmentExpr	update [ \"newUpdateId\" ] = newUpdateId
>4299	Identifier	newUpdateId
>4300	ArrayIndexing	update [ \"newUpdateId\" ]
>4301	PrimaryExpression	\"newUpdateId\"
>4302	Identifier	update
>4303	Condition	 
>4304	OrExpression	update [ \"listings\" ] [ \"updates\" ] -> length ( ) > 0 || update [ \"listings\" ] [ \"removals\" ] -> length ( ) > \
>4305	OrExpression	update [ \"listings\" ] [ \"removals\" ] -> length ( ) > 0 || update [ \"payeeSchemes\" ] [ \"updates\" ] -> \
>4306	OrExpression	update [ \"payeeSchemes\" ] [ \"updates\" ] -> length ( ) > 0 || update [ \"payeeSchemes\" ] [ \"removals\" ] \
>4307	RelationalExpression	update [ \"payeeSchemes\" ] [ \"removals\" ] -> length ( ) > 0
>4308	PrimaryExpression	0
>4309	CallExpression	update [ \"payeeSchemes\" ] [ \"removals\" ] -> length ( )
>4310	ArgumentList	 
>4311	Callee	update [ \"payeeSchemes\" ] [ \"removals\" ] -> length
>4312	PtrMemberAccess	update [ \"payeeSchemes\" ] [ \"removals\" ] -> length
>4313	Identifier	length
>4314	ArrayIndexing	update [ \"payeeSchemes\" ] [ \"removals\" ]
>4315	PrimaryExpression	\"removals\"
>4316	ArrayIndexing	update [ \"payeeSchemes\" ]
>4317	PrimaryExpression	\"payeeSchemes\"
>4318	Identifier	update
>4319	RelationalExpression	update [ \"payeeSchemes\" ] [ \"updates\" ] -> length ( ) > 0
>4320	PrimaryExpression	0
>4321	CallExpression	update [ \"payeeSchemes\" ] [ \"updates\" ] -> length ( )
>4322	ArgumentList	 
>4323	Callee	update [ \"payeeSchemes\" ] [ \"updates\" ] -> length
>4324	PtrMemberAccess	update [ \"payeeSchemes\" ] [ \"updates\" ] -> length
>4325	Identifier	length
>4326	ArrayIndexing	update [ \"payeeSchemes\" ] [ \"updates\" ]
>4327	PrimaryExpression	\"updates\"
>4328	ArrayIndexing	update [ \"payeeSchemes\" ]
>4329	PrimaryExpression	\"payeeSchemes\"
>4330	Identifier	update
>4331	RelationalExpression	update [ \"listings\" ] [ \"removals\" ] -> length ( ) > 0
>4332	PrimaryExpression	0
>4333	CallExpression	update [ \"listings\" ] [ \"removals\" ] -> length ( )
>4334	ArgumentList	 
>4335	Callee	update [ \"listings\" ] [ \"removals\" ] -> length
>4336	PtrMemberAccess	update [ \"listings\" ] [ \"removals\" ] -> length
>4337	Identifier	length
>4338	ArrayIndexing	update [ \"listings\" ] [ \"removals\" ]
>4339	PrimaryExpression	\"removals\"
>4340	ArrayIndexing	update [ \"listings\" ]
>4341	PrimaryExpression	\"listings\"
>4342	Identifier	update
>4343	RelationalExpression	update [ \"listings\" ] [ \"updates\" ] -> length ( ) > 0
>4344	PrimaryExpression	0
>4345	CallExpression	update [ \"listings\" ] [ \"updates\" ] -> length ( )
>4346	ArgumentList	 
>4347	Callee	update [ \"listings\" ] [ \"updates\" ] -> length
>4348	PtrMemberAccess	update [ \"listings\" ] [ \"updates\" ] -> length
>4349	Identifier	length
>4350	ArrayIndexing	update [ \"listings\" ] [ \"updates\" ]
>4351	PrimaryExpression	\"updates\"
>4352	ArrayIndexing	update [ \"listings\" ]
>4353	PrimaryExpression	\"listings\"
>4354	Identifier	update
>4355	ExpressionStatement	 
>4356	CallExpression	update [ \"updateId\" ] -> setType ( String )
>4357	ArgumentList	String
>4358	Argument	String
>4359	Identifier	String
>4360	Callee	update [ \"updateId\" ] -> setType
>4361	PtrMemberAccess	update [ \"updateId\" ] -> setType
>4362	Identifier	setType
>4363	ArrayIndexing	update [ \"updateId\" ]
>4364	PrimaryExpression	\"updateId\"
>4365	Identifier	update
>4366	ExpressionStatement	 
>4367	AssignmentExpr	update [ \"updateId\" ] = updateId
>4368	Identifier	updateId
>4369	ArrayIndexing	update [ \"updateId\" ]
>4370	PrimaryExpression	\"updateId\"
>4371	Identifier	update
>4372	ExpressionStatement	 
>4373	AssignmentExpr	update [ \"serverToken\" ] = serverToken . c_str ( )
>4374	CallExpression	serverToken . c_str ( )
>4375	ArgumentList	 
>4376	Callee	serverToken . c_str
>4377	MemberAccess	serverToken . c_str
>4378	Identifier	c_str
>4379	Identifier	serverToken
>4380	ArrayIndexing	update [ \"serverToken\" ]
>4381	PrimaryExpression	\"serverToken\"
>4382	Identifier	update
>4383	ExpressionStatement	 
>4384	AssignmentExpr	update [ \"seller\" ] = seller
>4385	Identifier	seller
>4386	ArrayIndexing	update [ \"seller\" ]
>4387	PrimaryExpression	\"seller\"
>4388	Identifier	update
>4389	Condition	 
>4390	Identifier	rval
>4391	ExpressionStatement	 
>4392	AssignmentExpr	rval = mCatalogDb . markNextListingUpdate ( c ) && mCatalogDb . populateUpdatingSellerListings ( userId , \
>4393	AndExpression	mCatalogDb . markNextListingUpdate ( c ) && mCatalogDb . populateUpdatingSellerListings ( userId , BM_\
>4394	CallExpression	mCatalogDb . populateUpdatingSellerListings ( userId , BM_SERVER_ID ( seller [ \"serverId\" ] ) , mMediaLibrary , \
>4395	ArgumentList	userId
>4396	Argument	c
>4397	Identifier	c
>4398	Argument	update [ \"payeeSchemes\" ]
>4399	ArrayIndexing	update [ \"payeeSchemes\" ]
>4400	PrimaryExpression	\"payeeSchemes\"
>4401	Identifier	update
>4402	Argument	update [ \"listings\" ]
>4403	ArrayIndexing	update [ \"listings\" ]
>4404	PrimaryExpression	\"listings\"
>4405	Identifier	update
>4406	Argument	mMediaLibrary
>4407	Identifier	mMediaLibrary
>4408	Argument	BM_SERVER_ID ( seller [ \"serverId\" ] )
>4409	CallExpression	BM_SERVER_ID ( seller [ \"serverId\" ] )
>4410	ArgumentList	seller [ \"serverId\" ]
>4411	Argument	seller [ \"serverId\" ]
>4412	ArrayIndexing	seller [ \"serverId\" ]
>4413	PrimaryExpression	\"serverId\"
>4414	Identifier	seller
>4415	Callee	BM_SERVER_ID
>4416	Identifier	BM_SERVER_ID
>4417	Argument	userId
>4418	Identifier	userId
>4419	Callee	mCatalogDb . populateUpdatingSellerListings
>4420	MemberAccess	mCatalogDb . populateUpdatingSellerListings
>4421	Identifier	populateUpdatingSellerListings
>4422	Identifier	mCatalogDb
>4423	CallExpression	mCatalogDb . markNextListingUpdate ( c )
>4424	ArgumentList	c
>4425	Argument	c
>4426	Identifier	c
>4427	Callee	mCatalogDb . markNextListingUpdate
>4428	MemberAccess	mCatalogDb . markNextListingUpdate
>4429	Identifier	markNextListingUpdate
>4430	Identifier	mCatalogDb
>4431	Identifier	rval
>4432	ExpressionStatement	 
>4433	AssignmentExpr	newUpdateId = updateId + 1
>4434	AdditiveExpression	updateId + 1
>4435	PrimaryExpression	1
>4436	Identifier	updateId
>4437	Identifier	newUpdateId
>4438	Condition	 
>4439	AssignmentExpr	rval = mCatalogDb . populateSeller ( userId , seller , serverToken , c ) && mCatalogDb . getConfigValue ( \"\
>4440	AndExpression	mCatalogDb . populateSeller ( userId , seller , serverToken , c ) && mCatalogDb . getConfigValue ( \"\
>4441	CallExpression	mCatalogDb . getConfigValue ( \"updateId\" , updateId , c )
>4442	ArgumentList	\"updateId\"
>4443	Argument	c
>4444	Identifier	c
>4445	Argument	updateId
>4446	Identifier	updateId
>4447	Argument	\"updateId\"
>4448	PrimaryExpression	\"updateId\"
>4449	Callee	mCatalogDb . getConfigValue
>4450	MemberAccess	mCatalogDb . getConfigValue
>4451	Identifier	getConfigValue
>4452	Identifier	mCatalogDb
>4453	CallExpression	mCatalogDb . populateSeller ( userId , seller , serverToken , c )
>4454	ArgumentList	userId
>4455	Argument	c
>4456	Identifier	c
>4457	Argument	serverToken
>4458	Identifier	serverToken
>4459	Argument	seller
>4460	Identifier	seller
>4461	Argument	userId
>4462	Identifier	userId
>4463	Callee	mCatalogDb . populateSeller
>4464	MemberAccess	mCatalogDb . populateSeller
>4465	Identifier	populateSeller
>4466	Identifier	mCatalogDb
>4467	Identifier	rval
>4468	IdentifierDeclStatement	 
>4469	IdentifierDecl	serverToken
>4470	Identifier	serverToken
>4471	IdentifierDeclType	string
>4472	IdentifierDeclStatement	 
>4473	IdentifierDecl	seller
>4474	Identifier	seller
>4475	IdentifierDeclType	Seller
>4476	IdentifierDeclStatement	 
>4477	IdentifierDecl	newUpdateId
>4478	Identifier	newUpdateId
>4479	IdentifierDeclType	uint32_t
>4480	IdentifierDeclStatement	 
>4481	IdentifierDecl	updateId
>4482	Identifier	updateId
>4483	IdentifierDeclType	uint32_t
>4484	Condition	 
>4485	CallExpression	c -> begin ( )
>4486	ArgumentList	 
>4487	Callee	c -> begin
>4488	PtrMemberAccess	c -> begin
>4489	Identifier	begin
>4490	Identifier	c
>4491	ExpressionStatement	 
>4492	Statement	 
>4493	Statement	 
>4494	Statement	 
>4495	Statement	 
>4496	Statement	 
>4497	Statement	 
>4498	Statement	 
>4499	Statement	 
>4500	Statement	 
>4501	Condition	 
>4502	EqualityExpression	c != NULL
>4503	Identifier	NULL
>4504	Identifier	c
>4505	IdentifierDeclStatement	 
>4506	IdentifierDecl	* c = mMediaLibrary -> getConnection ( userId )
>4507	AssignmentExpr	* c = mMediaLibrary -> getConnection ( userId )
>4508	CallExpression	mMediaLibrary -> getConnection ( userId )
>4509	ArgumentList	userId
>4510	Argument	userId
>4511	Identifier	userId
>4512	Callee	mMediaLibrary -> getConnection
>4513	PtrMemberAccess	mMediaLibrary -> getConnection
>4514	Identifier	getConnection
>4515	Identifier	mMediaLibrary
>4516	Identifier	c
>4517	Identifier	c
>4518	IdentifierDeclType	Connection *
>4519	IdentifierDeclStatement	 
>4520	IdentifierDecl	rval = false
>4521	AssignmentExpr	rval = false
>4522	Identifier	false
>4523	Identifier	false
>4524	Identifier	rval
>4525	IdentifierDeclType	bool
>4567	FunctionDef	CustomCatalog 
>4568	ParameterList	UserId userId , SellerListingUpdate update , SellerListingUpdate result
>4569	Parameter	 
>4570	Identifier	result
>4571	ParameterType	SellerListingUpdate
>4572	Parameter	 
>4573	Identifier	update
>4574	ParameterType	SellerListingUpdate
>4575	Parameter	 
>4576	Identifier	userId
>4577	ParameterType	UserId
>4578	ReturnType	bool
>4579	CompoundStatement	 
>4580	ReturnStatement	 
>4581	Identifier	rval
>4582	IfStatement	if ( ! rval )
>4583	ElseStatement	else
>4584	CompoundStatement	 
>4585	CompoundStatement	 
>4586	WhileStatement	while ( i -> hasNext ( ) )
>4587	CompoundStatement	 
>4588	ExpressionStatement	 
>4589	CallExpression	mNode -> getEventController ( ) -> schedule ( e )
>4590	ArgumentList	e
>4591	Argument	e
>4592	Identifier	e
>4593	Callee	mNode -> getEventController ( ) -> schedule
>4594	PtrMemberAccess	mNode -> getEventController ( ) -> schedule
>4595	Identifier	schedule
>4596	CallExpression	mNode -> getEventController ( )
>4597	ArgumentList	 
>4598	Callee	mNode -> getEventController
>4599	PtrMemberAccess	mNode -> getEventController
>4600	Identifier	getEventController
>4601	Identifier	mNode
>4602	ExpressionStatement	 
>4603	AssignmentExpr	e [ \"details\" ] [ \"exception\" ] = d [ \"exception\" ]
>4604	ArrayIndexing	d [ \"exception\" ]
>4605	PrimaryExpression	\"exception\"
>4606	Identifier	d
>4607	ArrayIndexing	e [ \"details\" ] [ \"exception\" ]
>4608	PrimaryExpression	\"exception\"
>4609	ArrayIndexing	e [ \"details\" ]
>4610	PrimaryExpression	\"details\"
>4611	Identifier	e
>4612	ExpressionStatement	 
>4613	CallExpression	BM_ID_SET ( e [ \"details\" ] [ \"userId\" ] , userId )
>4614	ArgumentList	e [ \"details\" ] [ \"userId\" ]
>4615	Argument	userId
>4616	Identifier	userId
>4617	Argument	e [ \"details\" ] [ \"userId\" ]
>4618	ArrayIndexing	e [ \"details\" ] [ \"userId\" ]
>4619	PrimaryExpression	\"userId\"
>4620	ArrayIndexing	e [ \"details\" ]
>4621	PrimaryExpression	\"details\"
>4622	Identifier	e
>4623	Callee	BM_ID_SET
>4624	Identifier	BM_ID_SET
>4625	ExpressionStatement	 
>4626	CallExpression	BM_ID_SET ( e [ \"details\" ] [ \"payeeSchemeId\" ] , BM_PAYEE_SCHEME_ID ( d [ \"psId\" ] ) )
>4627	ArgumentList	e [ \"details\" ] [ \"payeeSchemeId\" ]
>4628	Argument	BM_PAYEE_SCHEME_ID ( d [ \"psId\" ] )
>4629	CallExpression	BM_PAYEE_SCHEME_ID ( d [ \"psId\" ] )
>4630	ArgumentList	d [ \"psId\" ]
>4631	Argument	d [ \"psId\" ]
>4632	ArrayIndexing	d [ \"psId\" ]
>4633	PrimaryExpression	\"psId\"
>4634	Identifier	d
>4635	Callee	BM_PAYEE_SCHEME_ID
>4636	Identifier	BM_PAYEE_SCHEME_ID
>4637	Argument	e [ \"details\" ] [ \"payeeSchemeId\" ]
>4638	ArrayIndexing	e [ \"details\" ] [ \"payeeSchemeId\" ]
>4639	PrimaryExpression	\"payeeSchemeId\"
>4640	ArrayIndexing	e [ \"details\" ]
>4641	PrimaryExpression	\"details\"
>4642	Identifier	e
>4643	Callee	BM_ID_SET
>4644	Identifier	BM_ID_SET
>4645	ExpressionStatement	 
>4646	PrimaryExpression	\".exception\"
>4647	Statement	 
>4648	Statement	 
>4649	Statement	 
>4650	Statement	 
>4651	Statement	 
>4652	Statement	 
>4653	IdentifierDeclStatement	 
>4654	IdentifierDecl	e
>4655	Identifier	e
>4656	IdentifierDeclType	Event
>4657	IdentifierDeclStatement	 
>4658	IdentifierDecl	& d = i -> next ( )
>4659	AssignmentExpr	& d = i -> next ( )
>4660	CallExpression	i -> next ( )
>4661	ArgumentList	 
>4662	Callee	i -> next
>4663	PtrMemberAccess	i -> next
>4664	Identifier	next
>4665	Identifier	i
>4666	Identifier	d
>4667	Identifier	d
>4668	IdentifierDeclType	DynamicObject &
>4669	Condition	 
>4670	CallExpression	i -> hasNext ( )
>4671	ArgumentList	 
>4672	Callee	i -> hasNext
>4673	PtrMemberAccess	i -> hasNext
>4674	Identifier	hasNext
>4675	Identifier	i
>4676	IdentifierDeclStatement	 
>4677	IdentifierDecl	i = problemSchemes . getIterator ( )
>4678	AssignmentExpr	i = problemSchemes . getIterator ( )
>4679	CallExpression	problemSchemes . getIterator ( )
>4680	ArgumentList	 
>4681	Callee	problemSchemes . getIterator
>4682	MemberAccess	problemSchemes . getIterator
>4683	Identifier	getIterator
>4684	Identifier	problemSchemes
>4685	Identifier	i
>4686	Identifier	i
>4687	IdentifierDeclType	DynamicObjectIterator
>4688	CompoundStatement	 
>4689	WhileStatement	while ( i -> hasNext ( ) )
>4690	CompoundStatement	 
>4691	ExpressionStatement	 
>4692	CallExpression	mNode -> getEventController ( ) -> schedule ( e )
>4693	ArgumentList	e
>4694	Argument	e
>4695	Identifier	e
>4696	Callee	mNode -> getEventController ( ) -> schedule
>4697	PtrMemberAccess	mNode -> getEventController ( ) -> schedule
>4698	Identifier	schedule
>4699	CallExpression	mNode -> getEventController ( )
>4700	ArgumentList	 
>4701	Callee	mNode -> getEventController
>4702	PtrMemberAccess	mNode -> getEventController
>4703	Identifier	getEventController
>4704	Identifier	mNode
>4705	ExpressionStatement	 
>4706	AssignmentExpr	e [ \"details\" ] [ \"isNew\" ] = false
>4707	Identifier	false
>4708	ArrayIndexing	e [ \"details\" ] [ \"isNew\" ]
>4709	PrimaryExpression	\"isNew\"
>4710	ArrayIndexing	e [ \"details\" ]
>4711	PrimaryExpression	\"details\"
>4712	Identifier	e
>4713	ExpressionStatement	 
>4714	CallExpression	BM_ID_SET ( e [ \"details\" ] [ \"userId\" ] , userId )
>4715	ArgumentList	e [ \"details\" ] [ \"userId\" ]
>4716	Argument	userId
>4717	Identifier	userId
>4718	Argument	e [ \"details\" ] [ \"userId\" ]
>4719	ArrayIndexing	e [ \"details\" ] [ \"userId\" ]
>4720	PrimaryExpression	\"userId\"
>4721	ArrayIndexing	e [ \"details\" ]
>4722	PrimaryExpression	\"details\"
>4723	Identifier	e
>4724	Callee	BM_ID_SET
>4725	Identifier	BM_ID_SET
>4726	ExpressionStatement	 
>4727	CallExpression	BM_ID_SET ( e [ \"details\" ] [ \"payeeSchemeId\" ] , i -> getName ( ) )
>4728	ArgumentList	e [ \"details\" ] [ \"payeeSchemeId\" ]
>4729	Argument	i -> getName ( )
>4730	CallExpression	i -> getName ( )
>4731	ArgumentList	 
>4732	Callee	i -> getName
>4733	PtrMemberAccess	i -> getName
>4734	Identifier	getName
>4735	Identifier	i
>4736	Argument	e [ \"details\" ] [ \"payeeSchemeId\" ]
>4737	ArrayIndexing	e [ \"details\" ] [ \"payeeSchemeId\" ]
>4738	PrimaryExpression	\"payeeSchemeId\"
>4739	ArrayIndexing	e [ \"details\" ]
>4740	PrimaryExpression	\"details\"
>4741	Identifier	e
>4742	Callee	BM_ID_SET
>4743	Identifier	BM_ID_SET
>4744	ExpressionStatement	 
>4745	PrimaryExpression	\".updated\"
>4746	Statement	 
>4747	Statement	 
>4748	Statement	 
>4749	Statement	 
>4750	Statement	 
>4751	Statement	 
>4752	IdentifierDeclStatement	 
>4753	IdentifierDecl	e
>4754	Identifier	e
>4755	IdentifierDeclType	Event
>4756	ExpressionStatement	 
>4757	CallExpression	i -> next ( )
>4758	ArgumentList	 
>4759	Callee	i -> next
>4760	PtrMemberAccess	i -> next
>4761	Identifier	next
>4762	Identifier	i
>4763	Condition	 
>4764	CallExpression	i -> hasNext ( )
>4765	ArgumentList	 
>4766	Callee	i -> hasNext
>4767	PtrMemberAccess	i -> hasNext
>4768	Identifier	hasNext
>4769	Identifier	i
>4770	IdentifierDeclStatement	 
>4771	IdentifierDecl	i = goodSchemes . getIterator ( )
>4772	AssignmentExpr	i = goodSchemes . getIterator ( )
>4773	CallExpression	goodSchemes . getIterator ( )
>4774	ArgumentList	 
>4775	Callee	goodSchemes . getIterator
>4776	MemberAccess	goodSchemes . getIterator
>4777	Identifier	getIterator
>4778	Identifier	goodSchemes
>4779	Identifier	i
>4780	Identifier	i
>4781	IdentifierDeclType	DynamicObjectIterator
>4782	CompoundStatement	 
>4783	WhileStatement	while ( i -> hasNext ( ) )
>4784	CompoundStatement	 
>4785	ExpressionStatement	 
>4786	CallExpression	mNode -> getEventController ( ) -> schedule ( e )
>4787	ArgumentList	e
>4788	Argument	e
>4789	Identifier	e
>4790	Callee	mNode -> getEventController ( ) -> schedule
>4791	PtrMemberAccess	mNode -> getEventController ( ) -> schedule
>4792	Identifier	schedule
>4793	CallExpression	mNode -> getEventController ( )
>4794	ArgumentList	 
>4795	Callee	mNode -> getEventController
>4796	PtrMemberAccess	mNode -> getEventController
>4797	Identifier	getEventController
>4798	Identifier	mNode
>4799	ExpressionStatement	 
>4800	AssignmentExpr	e [ \"details\" ] [ \"exception\" ] = d [ \"exception\" ]
>4801	ArrayIndexing	d [ \"exception\" ]
>4802	PrimaryExpression	\"exception\"
>4803	Identifier	d
>4804	ArrayIndexing	e [ \"details\" ] [ \"exception\" ]
>4805	PrimaryExpression	\"exception\"
>4806	ArrayIndexing	e [ \"details\" ]
>4807	PrimaryExpression	\"details\"
>4808	Identifier	e
>4809	ExpressionStatement	 
>4810	CallExpression	BM_ID_SET ( e [ \"details\" ] [ \"userId\" ] , userId )
>4811	ArgumentList	e [ \"details\" ] [ \"userId\" ]
>4812	Argument	userId
>4813	Identifier	userId
>4814	Argument	e [ \"details\" ] [ \"userId\" ]
>4815	ArrayIndexing	e [ \"details\" ] [ \"userId\" ]
>4816	PrimaryExpression	\"userId\"
>4817	ArrayIndexing	e [ \"details\" ]
>4818	PrimaryExpression	\"details\"
>4819	Identifier	e
>4820	Callee	BM_ID_SET
>4821	Identifier	BM_ID_SET
>4822	ExpressionStatement	 
>4823	CallExpression	BM_ID_SET ( e [ \"details\" ] [ \"wareId\" ] , BM_WARE_ID ( d [ \"wareId\" ] ) )
>4824	ArgumentList	e [ \"details\" ] [ \"wareId\" ]
>4825	Argument	BM_WARE_ID ( d [ \"wareId\" ] )
>4826	CallExpression	BM_WARE_ID ( d [ \"wareId\" ] )
>4827	ArgumentList	d [ \"wareId\" ]
>4828	Argument	d [ \"wareId\" ]
>4829	ArrayIndexing	d [ \"wareId\" ]
>4830	PrimaryExpression	\"wareId\"
>4831	Identifier	d
>4832	Callee	BM_WARE_ID
>4833	Identifier	BM_WARE_ID
>4834	Argument	e [ \"details\" ] [ \"wareId\" ]
>4835	ArrayIndexing	e [ \"details\" ] [ \"wareId\" ]
>4836	PrimaryExpression	\"wareId\"
>4837	ArrayIndexing	e [ \"details\" ]
>4838	PrimaryExpression	\"details\"
>4839	Identifier	e
>4840	Callee	BM_ID_SET
>4841	Identifier	BM_ID_SET
>4842	ExpressionStatement	 
>4843	PrimaryExpression	\".exception\"
>4844	Statement	 
>4845	Statement	 
>4846	Statement	 
>4847	Statement	 
>4848	Statement	 
>4849	Statement	 
>4850	IdentifierDeclStatement	 
>4851	IdentifierDecl	e
>4852	Identifier	e
>4853	IdentifierDeclType	Event
>4854	IdentifierDeclStatement	 
>4855	IdentifierDecl	& d = i -> next ( )
>4856	AssignmentExpr	& d = i -> next ( )
>4857	CallExpression	i -> next ( )
>4858	ArgumentList	 
>4859	Callee	i -> next
>4860	PtrMemberAccess	i -> next
>4861	Identifier	next
>4862	Identifier	i
>4863	Identifier	d
>4864	Identifier	d
>4865	IdentifierDeclType	DynamicObject &
>4866	Condition	 
>4867	CallExpression	i -> hasNext ( )
>4868	ArgumentList	 
>4869	Callee	i -> hasNext
>4870	PtrMemberAccess	i -> hasNext
>4871	Identifier	hasNext
>4872	Identifier	i
>4873	IdentifierDeclStatement	 
>4874	IdentifierDecl	i = problemWares . getIterator ( )
>4875	AssignmentExpr	i = problemWares . getIterator ( )
>4876	CallExpression	problemWares . getIterator ( )
>4877	ArgumentList	 
>4878	Callee	problemWares . getIterator
>4879	MemberAccess	problemWares . getIterator
>4880	Identifier	getIterator
>4881	Identifier	problemWares
>4882	Identifier	i
>4883	Identifier	i
>4884	IdentifierDeclType	DynamicObjectIterator
>4885	CompoundStatement	 
>4886	WhileStatement	while ( i -> hasNext ( ) )
>4887	CompoundStatement	 
>4888	ExpressionStatement	 
>4889	CallExpression	mNode -> getEventController ( ) -> schedule ( e )
>4890	ArgumentList	e
>4891	Argument	e
>4892	Identifier	e
>4893	Callee	mNode -> getEventController ( ) -> schedule
>4894	PtrMemberAccess	mNode -> getEventController ( ) -> schedule
>4895	Identifier	schedule
>4896	CallExpression	mNode -> getEventController ( )
>4897	ArgumentList	 
>4898	Callee	mNode -> getEventController
>4899	PtrMemberAccess	mNode -> getEventController
>4900	Identifier	getEventController
>4901	Identifier	mNode
>4902	ExpressionStatement	 
>4903	AssignmentExpr	e [ \"details\" ] [ \"isNew\" ] = false
>4904	Identifier	false
>4905	ArrayIndexing	e [ \"details\" ] [ \"isNew\" ]
>4906	PrimaryExpression	\"isNew\"
>4907	ArrayIndexing	e [ \"details\" ]
>4908	PrimaryExpression	\"details\"
>4909	Identifier	e
>4910	ExpressionStatement	 
>4911	CallExpression	BM_ID_SET ( e [ \"details\" ] [ \"userId\" ] , userId )
>4912	ArgumentList	e [ \"details\" ] [ \"userId\" ]
>4913	Argument	userId
>4914	Identifier	userId
>4915	Argument	e [ \"details\" ] [ \"userId\" ]
>4916	ArrayIndexing	e [ \"details\" ] [ \"userId\" ]
>4917	PrimaryExpression	\"userId\"
>4918	ArrayIndexing	e [ \"details\" ]
>4919	PrimaryExpression	\"details\"
>4920	Identifier	e
>4921	Callee	BM_ID_SET
>4922	Identifier	BM_ID_SET
>4923	ExpressionStatement	 
>4924	CallExpression	BM_ID_SET ( e [ \"details\" ] [ \"wareId\" ] , i -> getName ( ) )
>4925	ArgumentList	e [ \"details\" ] [ \"wareId\" ]
>4926	Argument	i -> getName ( )
>4927	CallExpression	i -> getName ( )
>4928	ArgumentList	 
>4929	Callee	i -> getName
>4930	PtrMemberAccess	i -> getName
>4931	Identifier	getName
>4932	Identifier	i
>4933	Argument	e [ \"details\" ] [ \"wareId\" ]
>4934	ArrayIndexing	e [ \"details\" ] [ \"wareId\" ]
>4935	PrimaryExpression	\"wareId\"
>4936	ArrayIndexing	e [ \"details\" ]
>4937	PrimaryExpression	\"details\"
>4938	Identifier	e
>4939	Callee	BM_ID_SET
>4940	Identifier	BM_ID_SET
>4941	ExpressionStatement	 
>4942	PrimaryExpression	\".updated\"
>4943	Statement	 
>4944	Statement	 
>4945	Statement	 
>4946	Statement	 
>4947	Statement	 
>4948	Statement	 
>4949	IdentifierDeclStatement	 
>4950	IdentifierDecl	e
>4951	Identifier	e
>4952	IdentifierDeclType	Event
>4953	ExpressionStatement	 
>4954	CallExpression	i -> next ( )
>4955	ArgumentList	 
>4956	Callee	i -> next
>4957	PtrMemberAccess	i -> next
>4958	Identifier	next
>4959	Identifier	i
>4960	Condition	 
>4961	CallExpression	i -> hasNext ( )
>4962	ArgumentList	 
>4963	Callee	i -> hasNext
>4964	PtrMemberAccess	i -> hasNext
>4965	Identifier	hasNext
>4966	Identifier	i
>4967	IdentifierDeclStatement	 
>4968	IdentifierDecl	i = goodWares . getIterator ( )
>4969	AssignmentExpr	i = goodWares . getIterator ( )
>4970	CallExpression	goodWares . getIterator ( )
>4971	ArgumentList	 
>4972	Callee	goodWares . getIterator
>4973	MemberAccess	goodWares . getIterator
>4974	Identifier	getIterator
>4975	Identifier	goodWares
>4976	Identifier	i
>4977	Identifier	i
>4978	IdentifierDeclType	DynamicObjectIterator
>4979	CompoundStatement	 
>4980	ExpressionStatement	 
>4981	CallExpression	Exception 
>4982	ArgumentList	e
>4983	Argument	e
>4984	Identifier	e
>4985	Callee	Exception 
>4986	Identifier	Exception 
>4987	ExpressionStatement	 
>4988	AssignmentExpr	e -> getDetails ( ) [ \"userId\" ] = userId
>4989	Identifier	userId
>4990	ArrayIndexing	e -> getDetails ( ) [ \"userId\" ]
>4991	PrimaryExpression	\"userId\"
>4992	CallExpression	e -> getDetails ( )
>4993	ArgumentList	 
>4994	Callee	e -> getDetails
>4995	PtrMemberAccess	e -> getDetails
>4996	Identifier	getDetails
>4997	Identifier	e
>4998	IdentifierDeclStatement	 
>4999	IdentifierDecl	e = new Exception ( \"Failed to process seller listing update response.\" , \"bitmunk.catalog.ProcessListingUpdateResponseFailed\" )
>5000	AssignmentExpr	e = new Exception ( \"Failed to process seller listing update response.\" , \"bitmunk.catalog.ProcessListingUpdateResponseFailed\" )
>5001	Expression	\"Failed to process seller listing update response.\" , \"bitmunk.catalog.ProcessListingUpdateResponseFailed\"
>5002	PrimaryExpression	\"bitmunk.catalog.ProcessListingUpdateResponseFailed\"
>5003	PrimaryExpression	\"Failed to process seller listing update response.\"
>5004	Identifier	e
>5005	Identifier	e
>5006	IdentifierDeclType	ExceptionRef
>5007	Condition	 
>5008	UnaryOp	! rval
>5009	Identifier	rval
>5010	UnaryOperator	!
>5011	IfStatement	if ( c != NULL )
>5012	CompoundStatement	 
>5013	ExpressionStatement	 
>5014	CallExpression	c -> close ( )
>5015	ArgumentList	 
>5016	Callee	c -> close
>5017	PtrMemberAccess	c -> close
>5018	Identifier	close
>5019	Identifier	c
>5020	IfStatement	if ( ( rval = c -> begin ( ) ) )
>5021	CompoundStatement	 
>5022	ExpressionStatement	 
>5023	AssignmentExpr	rval = rval ? c -> commit ( ) 
>5024	ConditionalExpression	rval ? c -> commit ( ) 
>5025	AndExpression	c -> rollback ( ) && false
>5026	Identifier	false
>5027	CallExpression	c -> rollback ( )
>5028	ArgumentList	 
>5029	Callee	c -> rollback
>5030	PtrMemberAccess	c -> rollback
>5031	Identifier	rollback
>5032	Identifier	c
>5033	CallExpression	c -> commit ( )
>5034	ArgumentList	 
>5035	Callee	c -> commit
>5036	PtrMemberAccess	c -> commit
>5037	Identifier	commit
>5038	Identifier	c
>5039	Condition	rval
>5040	Identifier	rval
>5041	Identifier	rval
>5042	IfStatement	if ( rval )
>5043	CompoundStatement	 
>5044	ExpressionStatement	 
>5045	AssignmentExpr	rval = mCatalogDb . setConfigValue ( userId , \"updateId\" , result [ \"updateId\" ] -> getString ( ) , c )
>5046	CallExpression	mCatalogDb . setConfigValue ( userId , \"updateId\" , result [ \"updateId\" ] -> getString ( ) , c )
>5047	ArgumentList	userId
>5048	Argument	c
>5049	Identifier	c
>5050	Argument	result [ \"updateId\" ] -> getString ( )
>5051	CallExpression	result [ \"updateId\" ] -> getString ( )
>5052	ArgumentList	 
>5053	Callee	result [ \"updateId\" ] -> getString
>5054	PtrMemberAccess	result [ \"updateId\" ] -> getString
>5055	Identifier	getString
>5056	ArrayIndexing	result [ \"updateId\" ]
>5057	PrimaryExpression	\"updateId\"
>5058	Identifier	result
>5059	Argument	\"updateId\"
>5060	PrimaryExpression	\"updateId\"
>5061	Argument	userId
>5062	Identifier	userId
>5063	Callee	mCatalogDb . setConfigValue
>5064	MemberAccess	mCatalogDb . setConfigValue
>5065	Identifier	setConfigValue
>5066	Identifier	mCatalogDb
>5067	Identifier	rval
>5068	Condition	 
>5069	Identifier	rval
>5070	ExpressionStatement	 
>5071	AssignmentExpr	rval = mCatalogDb . purgeDeletedEntries ( CC_TABLE_WARES , c ) && mCatalogDb . clearUpdatingFlags ( CC_\
>5072	AndExpression	mCatalogDb . purgeDeletedEntries ( CC_TABLE_WARES , c ) && mCatalogDb . clearUpdatingFlags ( CC_TABLE_\
>5073	AndExpression	mCatalogDb . clearUpdatingFlags ( CC_TABLE_WARES , c ) && mCatalogDb . purgeDeletedEntries ( CC_TABLE_\
>5074	AndExpression	mCatalogDb . purgeDeletedEntries ( CC_TABLE_PAYEE_SCHEMES , c ) && mCatalogDb . clearUpdatingFlags ( \
>5075	AndExpression	mCatalogDb . clearUpdatingFlags ( CC_TABLE_PAYEE_SCHEMES , c ) && mCatalogDb . removeUnreferencedProblems ( \
>5076	CallExpression	mCatalogDb . removeUnreferencedProblems ( c )
>5077	ArgumentList	c
>5078	Argument	c
>5079	Identifier	c
>5080	Callee	mCatalogDb . removeUnreferencedProblems
>5081	MemberAccess	mCatalogDb . removeUnreferencedProblems
>5082	Identifier	removeUnreferencedProblems
>5083	Identifier	mCatalogDb
>5084	CallExpression	mCatalogDb . clearUpdatingFlags ( CC_TABLE_PAYEE_SCHEMES , c )
>5085	ArgumentList	CC_TABLE_PAYEE_SCHEMES
>5086	Argument	c
>5087	Identifier	c
>5088	Argument	CC_TABLE_PAYEE_SCHEMES
>5089	Identifier	CC_TABLE_PAYEE_SCHEMES
>5090	Callee	mCatalogDb . clearUpdatingFlags
>5091	MemberAccess	mCatalogDb . clearUpdatingFlags
>5092	Identifier	clearUpdatingFlags
>5093	Identifier	mCatalogDb
>5094	CallExpression	mCatalogDb . purgeDeletedEntries ( CC_TABLE_PAYEE_SCHEMES , c )
>5095	ArgumentList	CC_TABLE_PAYEE_SCHEMES
>5096	Argument	c
>5097	Identifier	c
>5098	Argument	CC_TABLE_PAYEE_SCHEMES
>5099	Identifier	CC_TABLE_PAYEE_SCHEMES
>5100	Callee	mCatalogDb . purgeDeletedEntries
>5101	MemberAccess	mCatalogDb . purgeDeletedEntries
>5102	Identifier	purgeDeletedEntries
>5103	Identifier	mCatalogDb
>5104	CallExpression	mCatalogDb . clearUpdatingFlags ( CC_TABLE_WARES , c )
>5105	ArgumentList	CC_TABLE_WARES
>5106	Argument	c
>5107	Identifier	c
>5108	Argument	CC_TABLE_WARES
>5109	Identifier	CC_TABLE_WARES
>5110	Callee	mCatalogDb . clearUpdatingFlags
>5111	MemberAccess	mCatalogDb . clearUpdatingFlags
>5112	Identifier	clearUpdatingFlags
>5113	Identifier	mCatalogDb
>5114	CallExpression	mCatalogDb . purgeDeletedEntries ( CC_TABLE_WARES , c )
>5115	ArgumentList	CC_TABLE_WARES
>5116	Argument	c
>5117	Identifier	c
>5118	Argument	CC_TABLE_WARES
>5119	Identifier	CC_TABLE_WARES
>5120	Callee	mCatalogDb . purgeDeletedEntries
>5121	MemberAccess	mCatalogDb . purgeDeletedEntries
>5122	Identifier	purgeDeletedEntries
>5123	Identifier	mCatalogDb
>5124	Identifier	rval
>5125	WhileStatement	while ( rval && psi -> hasNext ( ) )
>5126	CompoundStatement	 
>5127	ExpressionStatement	 
>5128	CallExpression	goodSchemes -> removeMember ( psId . c_str ( ) )
>5129	ArgumentList	psId . c_str ( )
>5130	Argument	psId . c_str ( )
>5131	CallExpression	psId . c_str ( )
>5132	ArgumentList	 
>5133	Callee	psId . c_str
>5134	MemberAccess	psId . c_str
>5135	Identifier	c_str
>5136	Identifier	psId
>5137	Callee	goodSchemes -> removeMember
>5138	PtrMemberAccess	goodSchemes -> removeMember
>5139	Identifier	removeMember
>5140	Identifier	goodSchemes
>5141	IdentifierDeclStatement	 
>5142	IdentifierDecl	psId = ps [ \"id\" ] -> getString ( )
>5143	AssignmentExpr	psId = ps [ \"id\" ] -> getString ( )
>5144	CallExpression	ps [ \"id\" ] -> getString ( )
>5145	ArgumentList	 
>5146	Callee	ps [ \"id\" ] -> getString
>5147	PtrMemberAccess	ps [ \"id\" ] -> getString
>5148	Identifier	getString
>5149	ArrayIndexing	ps [ \"id\" ]
>5150	PrimaryExpression	\"id\"
>5151	Identifier	ps
>5152	Identifier	psId
>5153	Identifier	psId
>5154	IdentifierDeclType	string
>5155	ExpressionStatement	 
>5156	AssignmentExpr	rval = mCatalogDb . getProblemId ( json . c_str ( ) , problemId , c ) && mCatalogDb . updatePayeeSchemeProblemId ( \
>5157	AndExpression	mCatalogDb . getProblemId ( json . c_str ( ) , problemId , c ) && mCatalogDb . updatePayeeSchemeProblemId ( \
>5158	CallExpression	mCatalogDb . updatePayeeSchemeProblemId ( problemId , BM_PAYEE_SCHEME_ID ( ps [ \"id\" ] ) , c )
>5159	ArgumentList	problemId
>5160	Argument	c
>5161	Identifier	c
>5162	Argument	BM_PAYEE_SCHEME_ID ( ps [ \"id\" ] )
>5163	CallExpression	BM_PAYEE_SCHEME_ID ( ps [ \"id\" ] )
>5164	ArgumentList	ps [ \"id\" ]
>5165	Argument	ps [ \"id\" ]
>5166	ArrayIndexing	ps [ \"id\" ]
>5167	PrimaryExpression	\"id\"
>5168	Identifier	ps
>5169	Callee	BM_PAYEE_SCHEME_ID
>5170	Identifier	BM_PAYEE_SCHEME_ID
>5171	Argument	problemId
>5172	Identifier	problemId
>5173	Callee	mCatalogDb . updatePayeeSchemeProblemId
>5174	MemberAccess	mCatalogDb . updatePayeeSchemeProblemId
>5175	Identifier	updatePayeeSchemeProblemId
>5176	Identifier	mCatalogDb
>5177	CallExpression	mCatalogDb . getProblemId ( json . c_str ( ) , problemId , c )
>5178	ArgumentList	json . c_str ( )
>5179	Argument	c
>5180	Identifier	c
>5181	Argument	problemId
>5182	Identifier	problemId
>5183	Argument	json . c_str ( )
>5184	CallExpression	json . c_str ( )
>5185	ArgumentList	 
>5186	Callee	json . c_str
>5187	MemberAccess	json . c_str
>5188	Identifier	c_str
>5189	Identifier	json
>5190	Callee	mCatalogDb . getProblemId
>5191	MemberAccess	mCatalogDb . getProblemId
>5192	Identifier	getProblemId
>5193	Identifier	mCatalogDb
>5194	Identifier	rval
>5195	ExpressionStatement	 
>5196	AssignmentExpr	d [ \"exception\" ] = ps [ \"exception\" ] . clone ( )
>5197	CallExpression	ps [ \"exception\" ] . clone ( )
>5198	ArgumentList	 
>5199	Callee	ps [ \"exception\" ] . clone
>5200	MemberAccess	ps [ \"exception\" ] . clone
>5201	Identifier	clone
>5202	ArrayIndexing	ps [ \"exception\" ]
>5203	PrimaryExpression	\"exception\"
>5204	Identifier	ps
>5205	ArrayIndexing	d [ \"exception\" ]
>5206	PrimaryExpression	\"exception\"
>5207	Identifier	d
>5208	ExpressionStatement	 
>5209	CallExpression	BM_ID_SET ( d [ \"psId\" ] , BM_PAYEE_SCHEME_ID ( ps [ \"id\" ] ) )
>5210	ArgumentList	d [ \"psId\" ]
>5211	Argument	BM_PAYEE_SCHEME_ID ( ps [ \"id\" ] )
>5212	CallExpression	BM_PAYEE_SCHEME_ID ( ps [ \"id\" ] )
>5213	ArgumentList	ps [ \"id\" ]
>5214	Argument	ps [ \"id\" ]
>5215	ArrayIndexing	ps [ \"id\" ]
>5216	PrimaryExpression	\"id\"
>5217	Identifier	ps
>5218	Callee	BM_PAYEE_SCHEME_ID
>5219	Identifier	BM_PAYEE_SCHEME_ID
>5220	Argument	d [ \"psId\" ]
>5221	ArrayIndexing	d [ \"psId\" ]
>5222	PrimaryExpression	\"psId\"
>5223	Identifier	d
>5224	Callee	BM_ID_SET
>5225	Identifier	BM_ID_SET
>5226	IdentifierDeclStatement	 
>5227	IdentifierDecl	& d = problemSchemes -> append ( )
>5228	AssignmentExpr	& d = problemSchemes -> append ( )
>5229	CallExpression	problemSchemes -> append ( )
>5230	ArgumentList	 
>5231	Callee	problemSchemes -> append
>5232	PtrMemberAccess	problemSchemes -> append
>5233	Identifier	append
>5234	Identifier	problemSchemes
>5235	Identifier	d
>5236	Identifier	d
>5237	IdentifierDeclType	DynamicObject &
>5238	IdentifierDeclStatement	 
>5239	IdentifierDecl	json = JsonWriter 
>5240	AssignmentExpr	json = JsonWriter 
>5241	CallExpression	JsonWriter 
>5242	ArgumentList	ps [ \"exception\" ]
>5243	Argument	true
>5244	Identifier	true
>5245	Argument	ps [ \"exception\" ]
>5246	ArrayIndexing	ps [ \"exception\" ]
>5247	PrimaryExpression	\"exception\"
>5248	Identifier	ps
>5249	Callee	JsonWriter 
>5250	Identifier	JsonWriter 
>5251	Identifier	json
>5252	Identifier	json
>5253	IdentifierDeclType	string
>5254	IdentifierDeclStatement	 
>5255	IdentifierDecl	problemId = 0
>5256	AssignmentExpr	problemId = 0
>5257	PrimaryExpression	0
>5258	Identifier	problemId
>5259	Identifier	problemId
>5260	IdentifierDeclType	uint64_t
>5261	IdentifierDeclStatement	 
>5262	IdentifierDecl	& ps = psi -> next ( )
>5263	AssignmentExpr	& ps = psi -> next ( )
>5264	CallExpression	psi -> next ( )
>5265	ArgumentList	 
>5266	Callee	psi -> next
>5267	PtrMemberAccess	psi -> next
>5268	Identifier	next
>5269	Identifier	psi
>5270	Identifier	ps
>5271	Identifier	ps
>5272	IdentifierDeclType	PayeeScheme &
>5273	Condition	 
>5274	AndExpression	rval && psi -> hasNext ( )
>5275	CallExpression	psi -> hasNext ( )
>5276	ArgumentList	 
>5277	Callee	psi -> hasNext
>5278	PtrMemberAccess	psi -> hasNext
>5279	Identifier	hasNext
>5280	Identifier	psi
>5281	Identifier	rval
>5282	IdentifierDeclStatement	 
>5283	IdentifierDecl	psi = failedSchemes . getIterator ( )
>5284	AssignmentExpr	psi = failedSchemes . getIterator ( )
>5285	CallExpression	failedSchemes . getIterator ( )
>5286	ArgumentList	 
>5287	Callee	failedSchemes . getIterator
>5288	MemberAccess	failedSchemes . getIterator
>5289	Identifier	getIterator
>5290	Identifier	failedSchemes
>5291	Identifier	psi
>5292	Identifier	psi
>5293	IdentifierDeclType	PayeeSchemeIterator
>5294	WhileStatement	while ( rval && sli -> hasNext ( ) )
>5295	CompoundStatement	 
>5296	ExpressionStatement	 
>5297	CallExpression	goodWares -> removeMember ( wareId . c_str ( ) )
>5298	ArgumentList	wareId . c_str ( )
>5299	Argument	wareId . c_str ( )
>5300	CallExpression	wareId . c_str ( )
>5301	ArgumentList	 
>5302	Callee	wareId . c_str
>5303	MemberAccess	wareId . c_str
>5304	Identifier	c_str
>5305	Identifier	wareId
>5306	Callee	goodWares -> removeMember
>5307	PtrMemberAccess	goodWares -> removeMember
>5308	Identifier	removeMember
>5309	Identifier	goodWares
>5310	ExpressionStatement	 
>5311	AssignmentExpr	rval = mCatalogDb . getProblemId ( json . c_str ( ) , problemId , c ) && mCatalogDb . updateWareProblemId ( \
>5312	AndExpression	mCatalogDb . getProblemId ( json . c_str ( ) , problemId , c ) && mCatalogDb . updateWareProblemId ( \
>5313	CallExpression	mCatalogDb . updateWareProblemId ( problemId , BM_FILE_ID ( listing [ \"fileInfo\" ] [ \"id\" ] ) , BM_MEDIA_ID ( listing [ \"\
>5314	ArgumentList	problemId
>5315	Argument	c
>5316	Identifier	c
>5317	Argument	BM_MEDIA_ID ( listing [ \"fileInfo\" ] [ \"mediaId\" ] )
>5318	CallExpression	BM_MEDIA_ID ( listing [ \"fileInfo\" ] [ \"mediaId\" ] )
>5319	ArgumentList	listing [ \"fileInfo\" ] [ \"mediaId\" ]
>5320	Argument	listing [ \"fileInfo\" ] [ \"mediaId\" ]
>5321	ArrayIndexing	listing [ \"fileInfo\" ] [ \"mediaId\" ]
>5322	PrimaryExpression	\"mediaId\"
>5323	ArrayIndexing	listing [ \"fileInfo\" ]
>5324	PrimaryExpression	\"fileInfo\"
>5325	Identifier	listing
>5326	Callee	BM_MEDIA_ID
>5327	Identifier	BM_MEDIA_ID
>5328	Argument	BM_FILE_ID ( listing [ \"fileInfo\" ] [ \"id\" ] )
>5329	CallExpression	BM_FILE_ID ( listing [ \"fileInfo\" ] [ \"id\" ] )
>5330	ArgumentList	listing [ \"fileInfo\" ] [ \"id\" ]
>5331	Argument	listing [ \"fileInfo\" ] [ \"id\" ]
>5332	ArrayIndexing	listing [ \"fileInfo\" ] [ \"id\" ]
>5333	PrimaryExpression	\"id\"
>5334	ArrayIndexing	listing [ \"fileInfo\" ]
>5335	PrimaryExpression	\"fileInfo\"
>5336	Identifier	listing
>5337	Callee	BM_FILE_ID
>5338	Identifier	BM_FILE_ID
>5339	Argument	problemId
>5340	Identifier	problemId
>5341	Callee	mCatalogDb . updateWareProblemId
>5342	MemberAccess	mCatalogDb . updateWareProblemId
>5343	Identifier	updateWareProblemId
>5344	Identifier	mCatalogDb
>5345	CallExpression	mCatalogDb . getProblemId ( json . c_str ( ) , problemId , c )
>5346	ArgumentList	json . c_str ( )
>5347	Argument	c
>5348	Identifier	c
>5349	Argument	problemId
>5350	Identifier	problemId
>5351	Argument	json . c_str ( )
>5352	CallExpression	json . c_str ( )
>5353	ArgumentList	 
>5354	Callee	json . c_str
>5355	MemberAccess	json . c_str
>5356	Identifier	c_str
>5357	Identifier	json
>5358	Callee	mCatalogDb . getProblemId
>5359	MemberAccess	mCatalogDb . getProblemId
>5360	Identifier	getProblemId
>5361	Identifier	mCatalogDb
>5362	Identifier	rval
>5363	ExpressionStatement	 
>5364	AssignmentExpr	d [ \"exception\" ] = listing [ \"exception\" ] . clone ( )
>5365	CallExpression	listing [ \"exception\" ] . clone ( )
>5366	ArgumentList	 
>5367	Callee	listing [ \"exception\" ] . clone
>5368	MemberAccess	listing [ \"exception\" ] . clone
>5369	Identifier	clone
>5370	ArrayIndexing	listing [ \"exception\" ]
>5371	PrimaryExpression	\"exception\"
>5372	Identifier	listing
>5373	ArrayIndexing	d [ \"exception\" ]
>5374	PrimaryExpression	\"exception\"
>5375	Identifier	d
>5376	ExpressionStatement	 
>5377	CallExpression	BM_ID_SET ( d [ \"wareId\" ] , wareId . c_str ( ) )
>5378	ArgumentList	d [ \"wareId\" ]
>5379	Argument	wareId . c_str ( )
>5380	CallExpression	wareId . c_str ( )
>5381	ArgumentList	 
>5382	Callee	wareId . c_str
>5383	MemberAccess	wareId . c_str
>5384	Identifier	c_str
>5385	Identifier	wareId
>5386	Argument	d [ \"wareId\" ]
>5387	ArrayIndexing	d [ \"wareId\" ]
>5388	PrimaryExpression	\"wareId\"
>5389	Identifier	d
>5390	Callee	BM_ID_SET
>5391	Identifier	BM_ID_SET
>5392	ExpressionStatement	 
>5393	Statement	 
>5394	Statement	 
>5395	Statement	 
>5396	Statement	 
>5397	Statement	 
>5398	Statement	 
>5399	Statement	 
>5400	Statement	 
>5401	Statement	 
>5402	Statement	 
>5403	Statement	 
>5404	Statement	 
>5405	Statement	 
>5406	Statement	 
>5407	Statement	 
>5408	Statement	 
>5409	Statement	 
>5410	Statement	 
>5411	Statement	 
>5412	Statement	 
>5413	Statement	 
>5414	Statement	 
>5415	Statement	 
>5416	Statement	 
>5417	Statement	 
>5418	Statement	 
>5419	Statement	 
>5420	Statement	 
>5421	Statement	 
>5422	Statement	 
>5423	Statement	 
>5424	Statement	 
>5425	Statement	 
>5426	IdentifierDeclStatement	 
>5427	IdentifierDecl	& d = problemWares -> append ( )
>5428	AssignmentExpr	& d = problemWares -> append ( )
>5429	CallExpression	problemWares -> append ( )
>5430	ArgumentList	 
>5431	Callee	problemWares -> append
>5432	PtrMemberAccess	problemWares -> append
>5433	Identifier	append
>5434	Identifier	problemWares
>5435	Identifier	d
>5436	Identifier	d
>5437	IdentifierDeclType	DynamicObject &
>5438	IdentifierDeclStatement	 
>5439	IdentifierDecl	json = JsonWriter 
>5440	AssignmentExpr	json = JsonWriter 
>5441	CallExpression	JsonWriter 
>5442	ArgumentList	listing [ \"exception\" ]
>5443	Argument	true
>5444	Identifier	true
>5445	Argument	listing [ \"exception\" ]
>5446	ArrayIndexing	listing [ \"exception\" ]
>5447	PrimaryExpression	\"exception\"
>5448	Identifier	listing
>5449	Callee	JsonWriter 
>5450	Identifier	JsonWriter 
>5451	Identifier	json
>5452	Identifier	json
>5453	IdentifierDeclType	string
>5454	IdentifierDeclStatement	 
>5455	IdentifierDecl	problemId = 0
>5456	AssignmentExpr	problemId = 0
>5457	PrimaryExpression	0
>5458	Identifier	problemId
>5459	Identifier	problemId
>5460	IdentifierDeclType	uint64_t
>5461	IdentifierDeclStatement	 
>5462	IdentifierDecl	& listing = sli -> next ( )
>5463	AssignmentExpr	& listing = sli -> next ( )
>5464	CallExpression	sli -> next ( )
>5465	ArgumentList	 
>5466	Callee	sli -> next
>5467	PtrMemberAccess	sli -> next
>5468	Identifier	next
>5469	Identifier	sli
>5470	Identifier	listing
>5471	Identifier	listing
>5472	IdentifierDeclType	SellerListing &
>5473	Condition	 
>5474	AndExpression	rval && sli -> hasNext ( )
>5475	CallExpression	sli -> hasNext ( )
>5476	ArgumentList	 
>5477	Callee	sli -> hasNext
>5478	PtrMemberAccess	sli -> hasNext
>5479	Identifier	hasNext
>5480	Identifier	sli
>5481	Identifier	rval
>5482	IdentifierDeclStatement	 
>5483	IdentifierDecl	sli = failedListings . getIterator ( )
>5484	AssignmentExpr	sli = failedListings . getIterator ( )
>5485	CallExpression	failedListings . getIterator ( )
>5486	ArgumentList	 
>5487	Callee	failedListings . getIterator
>5488	MemberAccess	failedListings . getIterator
>5489	Identifier	getIterator
>5490	Identifier	failedListings
>5491	Identifier	sli
>5492	Identifier	sli
>5493	IdentifierDeclType	SellerListingIterator
>5494	ExpressionStatement	 
>5495	CallExpression	failedSchemes . merge ( result [ \"payeeSchemes\" ] [ \"removals\" ] , true )
>5496	ArgumentList	result [ \"payeeSchemes\" ] [ \"removals\" ]
>5497	Argument	true
>5498	Identifier	true
>5499	Argument	result [ \"payeeSchemes\" ] [ \"removals\" ]
>5500	ArrayIndexing	result [ \"payeeSchemes\" ] [ \"removals\" ]
>5501	PrimaryExpression	\"removals\"
>5502	ArrayIndexing	result [ \"payeeSchemes\" ]
>5503	PrimaryExpression	\"payeeSchemes\"
>5504	Identifier	result
>5505	Callee	failedSchemes . merge
>5506	MemberAccess	failedSchemes . merge
>5507	Identifier	merge
>5508	Identifier	failedSchemes
>5509	ExpressionStatement	 
>5510	CallExpression	failedSchemes . merge ( result [ \"payeeSchemes\" ] [ \"updates\" ] , true )
>5511	ArgumentList	result [ \"payeeSchemes\" ] [ \"updates\" ]
>5512	Argument	true
>5513	Identifier	true
>5514	Argument	result [ \"payeeSchemes\" ] [ \"updates\" ]
>5515	ArrayIndexing	result [ \"payeeSchemes\" ] [ \"updates\" ]
>5516	PrimaryExpression	\"updates\"
>5517	ArrayIndexing	result [ \"payeeSchemes\" ]
>5518	PrimaryExpression	\"payeeSchemes\"
>5519	Identifier	result
>5520	Callee	failedSchemes . merge
>5521	MemberAccess	failedSchemes . merge
>5522	Identifier	merge
>5523	Identifier	failedSchemes
>5524	ExpressionStatement	 
>5525	CallExpression	result [ \"payeeSchemes\" ] [ \"removals\" ] -> setType ( Array )
>5526	ArgumentList	Array
>5527	Argument	Array
>5528	Identifier	Array
>5529	Callee	result [ \"payeeSchemes\" ] [ \"removals\" ] -> setType
>5530	PtrMemberAccess	result [ \"payeeSchemes\" ] [ \"removals\" ] -> setType
>5531	Identifier	setType
>5532	ArrayIndexing	result [ \"payeeSchemes\" ] [ \"removals\" ]
>5533	PrimaryExpression	\"removals\"
>5534	ArrayIndexing	result [ \"payeeSchemes\" ]
>5535	PrimaryExpression	\"payeeSchemes\"
>5536	Identifier	result
>5537	ExpressionStatement	 
>5538	CallExpression	result [ \"payeeSchemes\" ] [ \"updates\" ] -> setType ( Array )
>5539	ArgumentList	Array
>5540	Argument	Array
>5541	Identifier	Array
>5542	Callee	result [ \"payeeSchemes\" ] [ \"updates\" ] -> setType
>5543	PtrMemberAccess	result [ \"payeeSchemes\" ] [ \"updates\" ] -> setType
>5544	Identifier	setType
>5545	ArrayIndexing	result [ \"payeeSchemes\" ] [ \"updates\" ]
>5546	PrimaryExpression	\"updates\"
>5547	ArrayIndexing	result [ \"payeeSchemes\" ]
>5548	PrimaryExpression	\"payeeSchemes\"
>5549	Identifier	result
>5550	ExpressionStatement	 
>5551	CallExpression	failedSchemes -> setType ( Array )
>5552	ArgumentList	Array
>5553	Argument	Array
>5554	Identifier	Array
>5555	Callee	failedSchemes -> setType
>5556	PtrMemberAccess	failedSchemes -> setType
>5557	Identifier	setType
>5558	Identifier	failedSchemes
>5559	IdentifierDeclStatement	 
>5560	IdentifierDecl	failedSchemes
>5561	Identifier	failedSchemes
>5562	IdentifierDeclType	DynamicObject
>5563	ExpressionStatement	 
>5564	CallExpression	failedListings . merge ( result [ \"listings\" ] [ \"removals\" ] , true )
>5565	ArgumentList	result [ \"listings\" ] [ \"removals\" ]
>5566	Argument	true
>5567	Identifier	true
>5568	Argument	result [ \"listings\" ] [ \"removals\" ]
>5569	ArrayIndexing	result [ \"listings\" ] [ \"removals\" ]
>5570	PrimaryExpression	\"removals\"
>5571	ArrayIndexing	result [ \"listings\" ]
>5572	PrimaryExpression	\"listings\"
>5573	Identifier	result
>5574	Callee	failedListings . merge
>5575	MemberAccess	failedListings . merge
>5576	Identifier	merge
>5577	Identifier	failedListings
>5578	ExpressionStatement	 
>5579	CallExpression	failedListings . merge ( result [ \"listings\" ] [ \"updates\" ] , true )
>5580	ArgumentList	result [ \"listings\" ] [ \"updates\" ]
>5581	Argument	true
>5582	Identifier	true
>5583	Argument	result [ \"listings\" ] [ \"updates\" ]
>5584	ArrayIndexing	result [ \"listings\" ] [ \"updates\" ]
>5585	PrimaryExpression	\"updates\"
>5586	ArrayIndexing	result [ \"listings\" ]
>5587	PrimaryExpression	\"listings\"
>5588	Identifier	result
>5589	Callee	failedListings . merge
>5590	MemberAccess	failedListings . merge
>5591	Identifier	merge
>5592	Identifier	failedListings
>5593	ExpressionStatement	 
>5594	CallExpression	result [ \"listings\" ] [ \"removals\" ] -> setType ( Array )
>5595	ArgumentList	Array
>5596	Argument	Array
>5597	Identifier	Array
>5598	Callee	result [ \"listings\" ] [ \"removals\" ] -> setType
>5599	PtrMemberAccess	result [ \"listings\" ] [ \"removals\" ] -> setType
>5600	Identifier	setType
>5601	ArrayIndexing	result [ \"listings\" ] [ \"removals\" ]
>5602	PrimaryExpression	\"removals\"
>5603	ArrayIndexing	result [ \"listings\" ]
>5604	PrimaryExpression	\"listings\"
>5605	Identifier	result
>5606	ExpressionStatement	 
>5607	CallExpression	result [ \"listings\" ] [ \"updates\" ] -> setType ( Array )
>5608	ArgumentList	Array
>5609	Argument	Array
>5610	Identifier	Array
>5611	Callee	result [ \"listings\" ] [ \"updates\" ] -> setType
>5612	PtrMemberAccess	result [ \"listings\" ] [ \"updates\" ] -> setType
>5613	Identifier	setType
>5614	ArrayIndexing	result [ \"listings\" ] [ \"updates\" ]
>5615	PrimaryExpression	\"updates\"
>5616	ArrayIndexing	result [ \"listings\" ]
>5617	PrimaryExpression	\"listings\"
>5618	Identifier	result
>5619	ExpressionStatement	 
>5620	CallExpression	failedListings -> setType ( Array )
>5621	ArgumentList	Array
>5622	Argument	Array
>5623	Identifier	Array
>5624	Callee	failedListings -> setType
>5625	PtrMemberAccess	failedListings -> setType
>5626	Identifier	setType
>5627	Identifier	failedListings
>5628	IdentifierDeclStatement	 
>5629	IdentifierDecl	failedListings
>5630	Identifier	failedListings
>5631	IdentifierDeclType	DynamicObject
>5632	Condition	 
>5633	AssignmentExpr	rval = c -> begin ( )
>5634	CallExpression	c -> begin ( )
>5635	ArgumentList	 
>5636	Callee	c -> begin
>5637	PtrMemberAccess	c -> begin
>5638	Identifier	begin
>5639	Identifier	c
>5640	Identifier	rval
>5641	ExpressionStatement	 
>5642	Statement	 
>5643	Statement	 
>5644	Statement	 
>5645	Statement	 
>5646	Statement	 
>5647	Statement	 
>5648	Statement	 
>5649	Statement	 
>5650	Statement	 
>5651	Condition	 
>5652	EqualityExpression	c != NULL
>5653	Identifier	NULL
>5654	Identifier	c
>5655	IdentifierDeclStatement	 
>5656	IdentifierDecl	* c = mMediaLibrary -> getConnection ( userId )
>5657	AssignmentExpr	* c = mMediaLibrary -> getConnection ( userId )
>5658	CallExpression	mMediaLibrary -> getConnection ( userId )
>5659	ArgumentList	userId
>5660	Argument	userId
>5661	Identifier	userId
>5662	Callee	mMediaLibrary -> getConnection
>5663	PtrMemberAccess	mMediaLibrary -> getConnection
>5664	Identifier	getConnection
>5665	Identifier	mMediaLibrary
>5666	Identifier	c
>5667	Identifier	c
>5668	IdentifierDeclType	Connection *
>5669	CompoundStatement	 
>5670	WhileStatement	while ( i -> hasNext ( ) )
>5671	CompoundStatement	 
>5672	ExpressionStatement	 
>5673	AssignmentExpr	goodSchemes [ psId . c_str ( ) ] = true
>5674	Identifier	true
>5675	ArrayIndexing	goodSchemes [ psId . c_str ( ) ]
>5676	CallExpression	psId . c_str ( )
>5677	ArgumentList	 
>5678	Callee	psId . c_str
>5679	MemberAccess	psId . c_str
>5680	Identifier	c_str
>5681	Identifier	psId
>5682	Identifier	goodSchemes
>5683	IdentifierDeclStatement	 
>5684	IdentifierDecl	psId = ps [ \"id\" ] -> getString ( )
>5685	AssignmentExpr	psId = ps [ \"id\" ] -> getString ( )
>5686	CallExpression	ps [ \"id\" ] -> getString ( )
>5687	ArgumentList	 
>5688	Callee	ps [ \"id\" ] -> getString
>5689	PtrMemberAccess	ps [ \"id\" ] -> getString
>5690	Identifier	getString
>5691	ArrayIndexing	ps [ \"id\" ]
>5692	PrimaryExpression	\"id\"
>5693	Identifier	ps
>5694	Identifier	psId
>5695	Identifier	psId
>5696	IdentifierDeclType	string
>5697	IdentifierDeclStatement	 
>5698	IdentifierDecl	& ps = i -> next ( )
>5699	AssignmentExpr	& ps = i -> next ( )
>5700	CallExpression	i -> next ( )
>5701	ArgumentList	 
>5702	Callee	i -> next
>5703	PtrMemberAccess	i -> next
>5704	Identifier	next
>5705	Identifier	i
>5706	Identifier	ps
>5707	Identifier	ps
>5708	IdentifierDeclType	PayeeScheme &
>5709	Condition	 
>5710	CallExpression	i -> hasNext ( )
>5711	ArgumentList	 
>5712	Callee	i -> hasNext
>5713	PtrMemberAccess	i -> hasNext
>5714	Identifier	hasNext
>5715	Identifier	i
>5716	IdentifierDeclStatement	 
>5717	IdentifierDecl	i = update [ \"payeeSchemes\" ] [ \"updates\" ] . getIterator ( )
>5718	AssignmentExpr	i = update [ \"payeeSchemes\" ] [ \"updates\" ] . getIterator ( )
>5719	CallExpression	update [ \"payeeSchemes\" ] [ \"updates\" ] . getIterator ( )
>5720	ArgumentList	 
>5721	Callee	update [ \"payeeSchemes\" ] [ \"updates\" ] . getIterator
>5722	MemberAccess	update [ \"payeeSchemes\" ] [ \"updates\" ] . getIterator
>5723	Identifier	getIterator
>5724	ArrayIndexing	update [ \"payeeSchemes\" ] [ \"updates\" ]
>5725	PrimaryExpression	\"updates\"
>5726	ArrayIndexing	update [ \"payeeSchemes\" ]
>5727	PrimaryExpression	\"payeeSchemes\"
>5728	Identifier	update
>5729	Identifier	i
>5730	Identifier	i
>5731	IdentifierDeclType	DynamicObjectIterator
>5732	CompoundStatement	 
>5733	WhileStatement	while ( i -> hasNext ( ) )
>5734	CompoundStatement	 
>5735	ExpressionStatement	 
>5736	AssignmentExpr	goodWares [ wareId . c_str ( ) ] = true
>5737	Identifier	true
>5738	ArrayIndexing	goodWares [ wareId . c_str ( ) ]
>5739	CallExpression	wareId . c_str ( )
>5740	ArgumentList	 
>5741	Callee	wareId . c_str
>5742	MemberAccess	wareId . c_str
>5743	Identifier	c_str
>5744	Identifier	wareId
>5745	Identifier	goodWares
>5746	ExpressionStatement	 
>5747	Statement	 
>5748	Statement	 
>5749	Statement	 
>5750	Statement	 
>5751	Statement	 
>5752	Statement	 
>5753	Statement	 
>5754	Statement	 
>5755	Statement	 
>5756	Statement	 
>5757	Statement	 
>5758	Statement	 
>5759	Statement	 
>5760	Statement	 
>5761	Statement	 
>5762	Statement	 
>5763	Statement	 
>5764	Statement	 
>5765	Statement	 
>5766	Statement	 
>5767	Statement	 
>5768	Statement	 
>5769	Statement	 
>5770	Statement	 
>5771	Statement	 
>5772	Statement	 
>5773	Statement	 
>5774	Statement	 
>5775	Statement	 
>5776	Statement	 
>5777	Statement	 
>5778	Statement	 
>5779	Statement	 
>5780	IdentifierDeclStatement	 
>5781	IdentifierDecl	& sl = i -> next ( )
>5782	AssignmentExpr	& sl = i -> next ( )
>5783	CallExpression	i -> next ( )
>5784	ArgumentList	 
>5785	Callee	i -> next
>5786	PtrMemberAccess	i -> next
>5787	Identifier	next
>5788	Identifier	i
>5789	Identifier	sl
>5790	Identifier	sl
>5791	IdentifierDeclType	SellerListing &
>5792	Condition	 
>5793	CallExpression	i -> hasNext ( )
>5794	ArgumentList	 
>5795	Callee	i -> hasNext
>5796	PtrMemberAccess	i -> hasNext
>5797	Identifier	hasNext
>5798	Identifier	i
>5799	IdentifierDeclStatement	 
>5800	IdentifierDecl	i = update [ \"listings\" ] [ \"updates\" ] . getIterator ( )
>5801	AssignmentExpr	i = update [ \"listings\" ] [ \"updates\" ] . getIterator ( )
>5802	CallExpression	update [ \"listings\" ] [ \"updates\" ] . getIterator ( )
>5803	ArgumentList	 
>5804	Callee	update [ \"listings\" ] [ \"updates\" ] . getIterator
>5805	MemberAccess	update [ \"listings\" ] [ \"updates\" ] . getIterator
>5806	Identifier	getIterator
>5807	ArrayIndexing	update [ \"listings\" ] [ \"updates\" ]
>5808	PrimaryExpression	\"updates\"
>5809	ArrayIndexing	update [ \"listings\" ]
>5810	PrimaryExpression	\"listings\"
>5811	Identifier	update
>5812	Identifier	i
>5813	Identifier	i
>5814	IdentifierDeclType	DynamicObjectIterator
>5815	ExpressionStatement	 
>5816	CallExpression	goodSchemes -> setType ( Array )
>5817	ArgumentList	Array
>5818	Argument	Array
>5819	Identifier	Array
>5820	Callee	goodSchemes -> setType
>5821	PtrMemberAccess	goodSchemes -> setType
>5822	Identifier	setType
>5823	Identifier	goodSchemes
>5824	IdentifierDeclStatement	 
>5825	IdentifierDecl	goodSchemes
>5826	Identifier	goodSchemes
>5827	IdentifierDeclType	DynamicObject
>5828	ExpressionStatement	 
>5829	CallExpression	goodWares -> setType ( Array )
>5830	ArgumentList	Array
>5831	Argument	Array
>5832	Identifier	Array
>5833	Callee	goodWares -> setType
>5834	PtrMemberAccess	goodWares -> setType
>5835	Identifier	setType
>5836	Identifier	goodWares
>5837	IdentifierDeclStatement	 
>5838	IdentifierDecl	goodWares
>5839	Identifier	goodWares
>5840	IdentifierDeclType	DynamicObject
>5841	ExpressionStatement	 
>5842	CallExpression	problemSchemes -> setType ( Array )
>5843	ArgumentList	Array
>5844	Argument	Array
>5845	Identifier	Array
>5846	Callee	problemSchemes -> setType
>5847	PtrMemberAccess	problemSchemes -> setType
>5848	Identifier	setType
>5849	Identifier	problemSchemes
>5850	IdentifierDeclStatement	 
>5851	IdentifierDecl	problemSchemes
>5852	Identifier	problemSchemes
>5853	IdentifierDeclType	DynamicObject
>5854	ExpressionStatement	 
>5855	CallExpression	problemWares -> setType ( Array )
>5856	ArgumentList	Array
>5857	Argument	Array
>5858	Identifier	Array
>5859	Callee	problemWares -> setType
>5860	PtrMemberAccess	problemWares -> setType
>5861	Identifier	setType
>5862	Identifier	problemWares
>5863	IdentifierDeclStatement	 
>5864	IdentifierDecl	problemWares
>5865	Identifier	problemWares
>5866	IdentifierDeclType	DynamicObject
>5867	IdentifierDeclStatement	 
>5868	IdentifierDecl	rval = false
>5869	AssignmentExpr	rval = false
>5870	Identifier	false
>5871	Identifier	false
>5872	Identifier	rval
>5873	IdentifierDeclType	bool
>5977	FunctionDef	CustomCatalog 
>5978	ParameterList	UserId userId
>5979	Parameter	 
>5980	Identifier	userId
>5981	ParameterType	UserId
>5982	ReturnType	bool
>5983	CompoundStatement	 
>5984	ReturnStatement	 
>5985	Identifier	rval
>5986	IfStatement	if ( ! rval )
>5987	ElseStatement	else
>5988	CompoundStatement	 
>5989	ExpressionStatement	 
>5990	Statement	 
>5991	Statement	 
>5992	Statement	 
>5993	Statement	 
>5994	Statement	 
>5995	Statement	 
>5996	Statement	 
>5997	Statement	 
>5998	Statement	 
>5999	CompoundStatement	 
>6000	ExpressionStatement	 
>6001	CallExpression	Exception 
>6002	ArgumentList	e
>6003	Argument	e
>6004	Identifier	e
>6005	Callee	Exception 
>6006	Identifier	Exception 
>6007	ExpressionStatement	 
>6008	AssignmentExpr	e -> getDetails ( ) [ \"userId\" ] = userId
>6009	Identifier	userId
>6010	ArrayIndexing	e -> getDetails ( ) [ \"userId\" ]
>6011	PrimaryExpression	\"userId\"
>6012	CallExpression	e -> getDetails ( )
>6013	ArgumentList	 
>6014	Callee	e -> getDetails
>6015	PtrMemberAccess	e -> getDetails
>6016	Identifier	getDetails
>6017	Identifier	e
>6018	IdentifierDeclStatement	 
>6019	IdentifierDecl	e = new Exception ( \"Failed to reset seller listing update counter.\" , \"bitmunk.catalog.ResetListingUpdateCounterFailed\" )
>6020	AssignmentExpr	e = new Exception ( \"Failed to reset seller listing update counter.\" , \"bitmunk.catalog.ResetListingUpdateCounterFailed\" )
>6021	Expression	\"Failed to reset seller listing update counter.\" , \"bitmunk.catalog.ResetListingUpdateCounterFailed\"
>6022	PrimaryExpression	\"bitmunk.catalog.ResetListingUpdateCounterFailed\"
>6023	PrimaryExpression	\"Failed to reset seller listing update counter.\"
>6024	Identifier	e
>6025	Identifier	e
>6026	IdentifierDeclType	ExceptionRef
>6027	Condition	 
>6028	UnaryOp	! rval
>6029	Identifier	rval
>6030	UnaryOperator	!
>6031	IfStatement	if ( c != NULL )
>6032	CompoundStatement	 
>6033	ExpressionStatement	 
>6034	CallExpression	c -> close ( )
>6035	ArgumentList	 
>6036	Callee	c -> close
>6037	PtrMemberAccess	c -> close
>6038	Identifier	close
>6039	Identifier	c
>6040	IfStatement	if ( ( rval = c -> begin ( ) ) )
>6041	CompoundStatement	 
>6042	ExpressionStatement	 
>6043	AssignmentExpr	rval = rval ? c -> commit ( ) 
>6044	ConditionalExpression	rval ? c -> commit ( ) 
>6045	AndExpression	c -> rollback ( ) && false
>6046	Identifier	false
>6047	CallExpression	c -> rollback ( )
>6048	ArgumentList	 
>6049	Callee	c -> rollback
>6050	PtrMemberAccess	c -> rollback
>6051	Identifier	rollback
>6052	Identifier	c
>6053	CallExpression	c -> commit ( )
>6054	ArgumentList	 
>6055	Callee	c -> commit
>6056	PtrMemberAccess	c -> commit
>6057	Identifier	commit
>6058	Identifier	c
>6059	Condition	rval
>6060	Identifier	rval
>6061	Identifier	rval
>6062	ExpressionStatement	 
>6063	AssignmentExpr	rval = mCatalogDb . setConfigValue ( userId , \"updateId\" , \"0\" , c ) && mCatalogDb . setConfigValue ( \
>6064	AndExpression	mCatalogDb . setConfigValue ( userId , \"updateId\" , \"0\" , c ) && mCatalogDb . setConfigValue ( userId , \"\
>6065	AndExpression	mCatalogDb . setConfigValue ( userId , \"serverId\" , \"0\" , c ) && mCatalogDb . setConfigValue ( userId , \"\
>6066	AndExpression	mCatalogDb . setConfigValue ( userId , \"serverToken\" , \"0\" , c ) && mCatalogDb . setTableFlags ( CC_\
>6067	AndExpression	mCatalogDb . setTableFlags ( CC_TABLE_WARES , dirty , updating , c ) && mCatalogDb . setTableFlags ( \
>6068	CallExpression	mCatalogDb . setTableFlags ( CC_TABLE_PAYEE_SCHEMES , dirty , updating , c )
>6069	ArgumentList	CC_TABLE_PAYEE_SCHEMES
>6070	Argument	c
>6071	Identifier	c
>6072	Argument	updating
>6073	Identifier	updating
>6074	Argument	dirty
>6075	Identifier	dirty
>6076	Argument	CC_TABLE_PAYEE_SCHEMES
>6077	Identifier	CC_TABLE_PAYEE_SCHEMES
>6078	Callee	mCatalogDb . setTableFlags
>6079	MemberAccess	mCatalogDb . setTableFlags
>6080	Identifier	setTableFlags
>6081	Identifier	mCatalogDb
>6082	CallExpression	mCatalogDb . setTableFlags ( CC_TABLE_WARES , dirty , updating , c )
>6083	ArgumentList	CC_TABLE_WARES
>6084	Argument	c
>6085	Identifier	c
>6086	Argument	updating
>6087	Identifier	updating
>6088	Argument	dirty
>6089	Identifier	dirty
>6090	Argument	CC_TABLE_WARES
>6091	Identifier	CC_TABLE_WARES
>6092	Callee	mCatalogDb . setTableFlags
>6093	MemberAccess	mCatalogDb . setTableFlags
>6094	Identifier	setTableFlags
>6095	Identifier	mCatalogDb
>6096	CallExpression	mCatalogDb . setConfigValue ( userId , \"serverToken\" , \"0\" , c )
>6097	ArgumentList	userId
>6098	Argument	c
>6099	Identifier	c
>6100	Argument	\"0\"
>6101	PrimaryExpression	\"0\"
>6102	Argument	\"serverToken\"
>6103	PrimaryExpression	\"serverToken\"
>6104	Argument	userId
>6105	Identifier	userId
>6106	Callee	mCatalogDb . setConfigValue
>6107	MemberAccess	mCatalogDb . setConfigValue
>6108	Identifier	setConfigValue
>6109	Identifier	mCatalogDb
>6110	CallExpression	mCatalogDb . setConfigValue ( userId , \"serverId\" , \"0\" , c )
>6111	ArgumentList	userId
>6112	Argument	c
>6113	Identifier	c
>6114	Argument	\"0\"
>6115	PrimaryExpression	\"0\"
>6116	Argument	\"serverId\"
>6117	PrimaryExpression	\"serverId\"
>6118	Argument	userId
>6119	Identifier	userId
>6120	Callee	mCatalogDb . setConfigValue
>6121	MemberAccess	mCatalogDb . setConfigValue
>6122	Identifier	setConfigValue
>6123	Identifier	mCatalogDb
>6124	CallExpression	mCatalogDb . setConfigValue ( userId , \"updateId\" , \"0\" , c )
>6125	ArgumentList	userId
>6126	Argument	c
>6127	Identifier	c
>6128	Argument	\"0\"
>6129	PrimaryExpression	\"0\"
>6130	Argument	\"updateId\"
>6131	PrimaryExpression	\"updateId\"
>6132	Argument	userId
>6133	Identifier	userId
>6134	Callee	mCatalogDb . setConfigValue
>6135	MemberAccess	mCatalogDb . setConfigValue
>6136	Identifier	setConfigValue
>6137	Identifier	mCatalogDb
>6138	Identifier	rval
>6139	IdentifierDeclStatement	 
>6140	IdentifierDecl	updating = false
>6141	AssignmentExpr	updating = false
>6142	Identifier	false
>6143	Identifier	false
>6144	Identifier	updating
>6145	IdentifierDeclType	bool
>6146	IdentifierDeclStatement	 
>6147	IdentifierDecl	dirty = true
>6148	AssignmentExpr	dirty = true
>6149	Identifier	true
>6150	Identifier	true
>6151	Identifier	dirty
>6152	IdentifierDeclType	bool
>6153	Condition	 
>6154	AssignmentExpr	rval = c -> begin ( )
>6155	CallExpression	c -> begin ( )
>6156	ArgumentList	 
>6157	Callee	c -> begin
>6158	PtrMemberAccess	c -> begin
>6159	Identifier	begin
>6160	Identifier	c
>6161	Identifier	rval
>6162	ExpressionStatement	 
>6163	Statement	 
>6164	Statement	 
>6165	Statement	 
>6166	Statement	 
>6167	Statement	 
>6168	Statement	 
>6169	Statement	 
>6170	Statement	 
>6171	Statement	 
>6172	Condition	 
>6173	EqualityExpression	c != NULL
>6174	Identifier	NULL
>6175	Identifier	c
>6176	IdentifierDeclStatement	 
>6177	IdentifierDecl	* c = mMediaLibrary -> getConnection ( userId )
>6178	AssignmentExpr	* c = mMediaLibrary -> getConnection ( userId )
>6179	CallExpression	mMediaLibrary -> getConnection ( userId )
>6180	ArgumentList	userId
>6181	Argument	userId
>6182	Identifier	userId
>6183	Callee	mMediaLibrary -> getConnection
>6184	PtrMemberAccess	mMediaLibrary -> getConnection
>6185	Identifier	getConnection
>6186	Identifier	mMediaLibrary
>6187	Identifier	c
>6188	Identifier	c
>6189	IdentifierDeclType	Connection *
>6190	IdentifierDeclStatement	 
>6191	IdentifierDecl	rval = false
>6192	AssignmentExpr	rval = false
>6193	Identifier	false
>6194	Identifier	false
>6195	Identifier	rval
>6196	IdentifierDeclType	bool
>6225	FunctionDef	CustomCatalog 
>6226	ParameterList	UserId userId , const char * name , const char * value
>6227	Parameter	 
>6228	Identifier	value
>6229	ParameterType	const char *
>6230	Parameter	 
>6231	Identifier	name
>6232	ParameterType	const char *
>6233	Parameter	 
>6234	Identifier	userId
>6235	ParameterType	UserId
>6236	ReturnType	bool
>6237	CompoundStatement	 
>6238	ReturnStatement	 
>6239	Identifier	rval
>6240	IfStatement	if ( c != NULL )
>6241	CompoundStatement	 
>6242	ExpressionStatement	 
>6243	CallExpression	c -> close ( )
>6244	ArgumentList	 
>6245	Callee	c -> close
>6246	PtrMemberAccess	c -> close
>6247	Identifier	close
>6248	Identifier	c
>6249	ExpressionStatement	 
>6250	AssignmentExpr	rval = mCatalogDb . setConfigValue ( userId , name , value , c )
>6251	CallExpression	mCatalogDb . setConfigValue ( userId , name , value , c )
>6252	ArgumentList	userId
>6253	Argument	c
>6254	Identifier	c
>6255	Argument	value
>6256	Identifier	value
>6257	Argument	name
>6258	Identifier	name
>6259	Argument	userId
>6260	Identifier	userId
>6261	Callee	mCatalogDb . setConfigValue
>6262	MemberAccess	mCatalogDb . setConfigValue
>6263	Identifier	setConfigValue
>6264	Identifier	mCatalogDb
>6265	Identifier	rval
>6266	Condition	 
>6267	EqualityExpression	c != NULL
>6268	Identifier	NULL
>6269	Identifier	c
>6270	IdentifierDeclStatement	 
>6271	IdentifierDecl	* c = mMediaLibrary -> getConnection ( userId )
>6272	AssignmentExpr	* c = mMediaLibrary -> getConnection ( userId )
>6273	CallExpression	mMediaLibrary -> getConnection ( userId )
>6274	ArgumentList	userId
>6275	Argument	userId
>6276	Identifier	userId
>6277	Callee	mMediaLibrary -> getConnection
>6278	PtrMemberAccess	mMediaLibrary -> getConnection
>6279	Identifier	getConnection
>6280	Identifier	mMediaLibrary
>6281	Identifier	c
>6282	Identifier	c
>6283	IdentifierDeclType	Connection *
>6284	IdentifierDeclStatement	 
>6285	IdentifierDecl	rval = false
>6286	AssignmentExpr	rval = false
>6287	Identifier	false
>6288	Identifier	false
>6289	Identifier	rval
>6290	IdentifierDeclType	bool
>6306	FunctionDef	CustomCatalog 
>6307	ParameterList	UserId userId , const char * name , string & value
>6308	Parameter	 
>6309	Identifier	value
>6310	ParameterType	string &
>6311	Parameter	 
>6312	Identifier	name
>6313	ParameterType	const char *
>6314	Parameter	 
>6315	Identifier	userId
>6316	ParameterType	UserId
>6317	ReturnType	bool
>6318	CompoundStatement	 
>6319	ReturnStatement	 
>6320	Identifier	rval
>6321	IfStatement	if ( c != NULL )
>6322	CompoundStatement	 
>6323	ExpressionStatement	 
>6324	CallExpression	c -> close ( )
>6325	ArgumentList	 
>6326	Callee	c -> close
>6327	PtrMemberAccess	c -> close
>6328	Identifier	close
>6329	Identifier	c
>6330	ExpressionStatement	 
>6331	AssignmentExpr	rval = mCatalogDb . getConfigValue ( name , value , c )
>6332	CallExpression	mCatalogDb . getConfigValue ( name , value , c )
>6333	ArgumentList	name
>6334	Argument	c
>6335	Identifier	c
>6336	Argument	value
>6337	Identifier	value
>6338	Argument	name
>6339	Identifier	name
>6340	Callee	mCatalogDb . getConfigValue
>6341	MemberAccess	mCatalogDb . getConfigValue
>6342	Identifier	getConfigValue
>6343	Identifier	mCatalogDb
>6344	Identifier	rval
>6345	Condition	 
>6346	EqualityExpression	c != NULL
>6347	Identifier	NULL
>6348	Identifier	c
>6349	IdentifierDeclStatement	 
>6350	IdentifierDecl	* c = mMediaLibrary -> getConnection ( userId )
>6351	AssignmentExpr	* c = mMediaLibrary -> getConnection ( userId )
>6352	CallExpression	mMediaLibrary -> getConnection ( userId )
>6353	ArgumentList	userId
>6354	Argument	userId
>6355	Identifier	userId
>6356	Callee	mMediaLibrary -> getConnection
>6357	PtrMemberAccess	mMediaLibrary -> getConnection
>6358	Identifier	getConnection
>6359	Identifier	mMediaLibrary
>6360	Identifier	c
>6361	Identifier	c
>6362	IdentifierDeclType	Connection *
>6363	IdentifierDeclStatement	 
>6364	IdentifierDecl	rval = false
>6365	AssignmentExpr	rval = false
>6366	Identifier	false
>6367	Identifier	false
>6368	Identifier	rval
>6369	IdentifierDeclType	bool
>6385	FunctionDef	CustomCatalog 
>6386	ParameterList	Event & e
>6387	Parameter	 
>6388	Identifier	e
>6389	ParameterType	Event &
>6390	ReturnType	void
>6391	CompoundStatement	 
>6392	IfStatement	if ( ! pass )
>6393	CompoundStatement	 
>6394	ExpressionStatement	 
>6395	Statement	 
>6396	Statement	 
>6397	Statement	 
>6398	Statement	 
>6399	Statement	 
>6400	Statement	 
>6401	Statement	 
>6402	Statement	 
>6403	Statement	 
>6404	Statement	 
>6405	Statement	 
>6406	Statement	 
>6407	Statement	 
>6408	Statement	 
>6409	Statement	 
>6410	Statement	 
>6411	Statement	 
>6412	Statement	 
>6413	Statement	 
>6414	Statement	 
>6415	Statement	 
>6416	Statement	 
>6417	Statement	 
>6418	Statement	 
>6419	Statement	 
>6420	Statement	 
>6421	Condition	 
>6422	UnaryOp	! pass
>6423	Identifier	pass
>6424	UnaryOperator	!
>6425	IfStatement	if ( pass && ! BM_PAYEE_SCHEME_ID_VALID ( psId ) && ! cfg . isNull ( ) && cfg [ \"autoSell\" ] [ \"enabled\" ] -> getBoolean ( ) && ! \
>6426	CompoundStatement	 
>6427	IfStatement	if ( pass )
>6428	CompoundStatement	 
>6429	IfStatement	if ( in [ \"resources\" ] -> length ( ) == 0 )
>6430	ElseStatement	else
>6431	CompoundStatement	 
>6432	IfStatement	if ( pass )
>6433	CompoundStatement	 
>6434	IfStatement	if ( pass )
>6435	CompoundStatement	 
>6436	ExpressionStatement	 
>6437	CallExpression	mNode -> getConfigManager ( ) -> saveUserConfig ( userId )
>6438	ArgumentList	userId
>6439	Argument	userId
>6440	Identifier	userId
>6441	Callee	mNode -> getConfigManager ( ) -> saveUserConfig
>6442	PtrMemberAccess	mNode -> getConfigManager ( ) -> saveUserConfig
>6443	Identifier	saveUserConfig
>6444	CallExpression	mNode -> getConfigManager ( )
>6445	ArgumentList	 
>6446	Callee	mNode -> getConfigManager
>6447	PtrMemberAccess	mNode -> getConfigManager
>6448	Identifier	getConfigManager
>6449	Identifier	mNode
>6450	ExpressionStatement	 
>6451	CallExpression	mNode -> getConfigManager ( ) -> getConfigManager ( ) -> setConfig ( cfg )
>6452	ArgumentList	cfg
>6453	Argument	cfg
>6454	Identifier	cfg
>6455	Callee	mNode -> getConfigManager ( ) -> getConfigManager ( ) -> setConfig
>6456	PtrMemberAccess	mNode -> getConfigManager ( ) -> getConfigManager ( ) -> setConfig
>6457	Identifier	setConfig
>6458	CallExpression	mNode -> getConfigManager ( ) -> getConfigManager ( )
>6459	ArgumentList	 
>6460	Callee	mNode -> getConfigManager ( ) -> getConfigManager
>6461	PtrMemberAccess	mNode -> getConfigManager ( ) -> getConfigManager
>6462	Identifier	getConfigManager
>6463	CallExpression	mNode -> getConfigManager ( )
>6464	ArgumentList	 
>6465	Callee	mNode -> getConfigManager
>6466	PtrMemberAccess	mNode -> getConfigManager
>6467	Identifier	getConfigManager
>6468	Identifier	mNode
>6469	ExpressionStatement	 
>6470	CallExpression	BM_ID_SET ( asCfg [ \"payeeSchemeId\" ] , psId )
>6471	ArgumentList	asCfg [ \"payeeSchemeId\" ]
>6472	Argument	psId
>6473	Identifier	psId
>6474	Argument	asCfg [ \"payeeSchemeId\" ]
>6475	ArrayIndexing	asCfg [ \"payeeSchemeId\" ]
>6476	PrimaryExpression	\"payeeSchemeId\"
>6477	Identifier	asCfg
>6478	Callee	BM_ID_SET
>6479	Identifier	BM_ID_SET
>6480	ExpressionStatement	 
>6481	AssignmentExpr	asCfg [ \"enabled\" ] = true
>6482	Identifier	true
>6483	ArrayIndexing	asCfg [ \"enabled\" ]
>6484	PrimaryExpression	\"enabled\"
>6485	Identifier	asCfg
>6486	IdentifierDeclStatement	 
>6487	IdentifierDecl	& asCfg = cfg [ ConfigManager 
>6488	AssignmentExpr	& asCfg = cfg [ ConfigManager 
>6489	ArrayIndexing	cfg [ ConfigManager 
>6490	PrimaryExpression	\"autoSell\"
>6491	ArrayIndexing	cfg [ ConfigManager 
>6492	PrimaryExpression	\"bitmunk.catalog.CustomCatalog\"
>6493	ArrayIndexing	cfg [ ConfigManager 
>6494	Identifier	ConfigManager 
>6495	Identifier	cfg
>6496	Identifier	asCfg
>6497	Identifier	asCfg
>6498	IdentifierDeclType	Config &
>6499	ExpressionStatement	 
>6500	AssignmentExpr	cfg = mNode -> getConfigManager ( ) -> getUserConfig ( userId , true )
>6501	CallExpression	mNode -> getConfigManager ( ) -> getUserConfig ( userId , true )
>6502	ArgumentList	userId
>6503	Argument	true
>6504	Identifier	true
>6505	Argument	userId
>6506	Identifier	userId
>6507	Callee	mNode -> getConfigManager ( ) -> getUserConfig
>6508	PtrMemberAccess	mNode -> getConfigManager ( ) -> getUserConfig
>6509	Identifier	getUserConfig
>6510	CallExpression	mNode -> getConfigManager ( )
>6511	ArgumentList	 
>6512	Callee	mNode -> getConfigManager
>6513	PtrMemberAccess	mNode -> getConfigManager
>6514	Identifier	getConfigManager
>6515	Identifier	mNode
>6516	Identifier	cfg
>6517	ExpressionStatement	 
>6518	Statement	 
>6519	Statement	 
>6520	Statement	 
>6521	Statement	 
>6522	Statement	 
>6523	Statement	 
>6524	Statement	 
>6525	Statement	 
>6526	Statement	 
>6527	Statement	 
>6528	Statement	 
>6529	Statement	 
>6530	Statement	 
>6531	Statement	 
>6532	Statement	 
>6533	Statement	 
>6534	Statement	 
>6535	Statement	 
>6536	Statement	 
>6537	Statement	 
>6538	Statement	 
>6539	Statement	 
>6540	ExpressionStatement	 
>6541	AssignmentExpr	ps [ \"payees\" ] = payees
>6542	Identifier	payees
>6543	ArrayIndexing	ps [ \"payees\" ]
>6544	PrimaryExpression	\"payees\"
>6545	Identifier	ps
>6546	ExpressionStatement	 
>6547	AssignmentExpr	ps [ \"id\" ] = psId
>6548	Identifier	psId
>6549	ArrayIndexing	ps [ \"id\" ]
>6550	PrimaryExpression	\"id\"
>6551	Identifier	ps
>6552	IdentifierDeclStatement	 
>6553	IdentifierDecl	ps
>6554	Identifier	ps
>6555	IdentifierDeclType	PayeeScheme
>6556	Condition	 
>6557	Identifier	pass
>6558	ExpressionStatement	 
>6559	CallExpression	c -> close ( )
>6560	ArgumentList	 
>6561	Callee	c -> close
>6562	PtrMemberAccess	c -> close
>6563	Identifier	close
>6564	Identifier	c
>6565	IfStatement	if ( pass )
>6566	CompoundStatement	 
>6567	ExpressionStatement	 
>6568	AssignmentExpr	pass = pass ? c -> commit ( ) 
>6569	ConditionalExpression	pass ? c -> commit ( ) 
>6570	AndExpression	c -> rollback ( ) && pass
>6571	Identifier	pass
>6572	CallExpression	c -> rollback ( )
>6573	ArgumentList	 
>6574	Callee	c -> rollback
>6575	PtrMemberAccess	c -> rollback
>6576	Identifier	rollback
>6577	Identifier	c
>6578	CallExpression	c -> commit ( )
>6579	ArgumentList	 
>6580	Callee	c -> commit
>6581	PtrMemberAccess	c -> commit
>6582	Identifier	commit
>6583	Identifier	c
>6584	Condition	pass
>6585	Identifier	pass
>6586	Identifier	pass
>6587	IfStatement	if ( pass && psId == 0 )
>6588	CompoundStatement	 
>6589	ExpressionStatement	 
>6590	AssignmentExpr	pass = mCatalogDb . addPayeeScheme ( mNode , userId , psId , \"Auto-generated payment scheme\" , payees , \
>6591	CallExpression	mCatalogDb . addPayeeScheme ( mNode , userId , psId , \"Auto-generated payment scheme\" , payees , c )
>6592	ArgumentList	mNode
>6593	Argument	c
>6594	Identifier	c
>6595	Argument	payees
>6596	Identifier	payees
>6597	Argument	\"Auto-generated payment scheme\"
>6598	PrimaryExpression	\"Auto-generated payment scheme\"
>6599	Argument	psId
>6600	Identifier	psId
>6601	Argument	userId
>6602	Identifier	userId
>6603	Argument	mNode
>6604	Identifier	mNode
>6605	Callee	mCatalogDb . addPayeeScheme
>6606	MemberAccess	mCatalogDb . addPayeeScheme
>6607	Identifier	addPayeeScheme
>6608	Identifier	mCatalogDb
>6609	Identifier	pass
>6610	Condition	 
>6611	AndExpression	pass && psId == 0
>6612	EqualityExpression	psId == 0
>6613	PrimaryExpression	0
>6614	Identifier	psId
>6615	Identifier	pass
>6616	ExpressionStatement	 
>6617	AssignmentExpr	pass = mCatalogDb . getFirstPayeeSchemeId ( psId , c )
>6618	CallExpression	mCatalogDb . getFirstPayeeSchemeId ( psId , c )
>6619	ArgumentList	psId
>6620	Argument	c
>6621	Identifier	c
>6622	Argument	psId
>6623	Identifier	psId
>6624	Callee	mCatalogDb . getFirstPayeeSchemeId
>6625	MemberAccess	mCatalogDb . getFirstPayeeSchemeId
>6626	Identifier	getFirstPayeeSchemeId
>6627	Identifier	mCatalogDb
>6628	Identifier	pass
>6629	Condition	 
>6630	Identifier	pass
>6631	ExpressionStatement	 
>6632	AssignmentExpr	pass = c -> begin ( )
>6633	CallExpression	c -> begin ( )
>6634	ArgumentList	 
>6635	Callee	c -> begin
>6636	PtrMemberAccess	c -> begin
>6637	Identifier	begin
>6638	Identifier	c
>6639	Identifier	pass
>6640	Condition	 
>6641	Identifier	pass
>6642	ExpressionStatement	 
>6643	AssignmentExpr	pass = ( c != NULL )
>6644	EqualityExpression	c != NULL
>6645	Identifier	NULL
>6646	Identifier	c
>6647	Identifier	pass
>6648	ExpressionStatement	 
>6649	AssignmentExpr	c = mMediaLibrary -> getConnection ( userId )
>6650	CallExpression	mMediaLibrary -> getConnection ( userId )
>6651	ArgumentList	userId
>6652	Argument	userId
>6653	Identifier	userId
>6654	Callee	mMediaLibrary -> getConnection
>6655	PtrMemberAccess	mMediaLibrary -> getConnection
>6656	Identifier	getConnection
>6657	Identifier	mMediaLibrary
>6658	Identifier	c
>6659	ExpressionStatement	 
>6660	CallExpression	payees -> append ( payee )
>6661	ArgumentList	payee
>6662	Argument	payee
>6663	Identifier	payee
>6664	Callee	payees -> append
>6665	PtrMemberAccess	payees -> append
>6666	Identifier	append
>6667	Identifier	payees
>6668	IdentifierDeclStatement	 
>6669	IdentifierDecl	payees
>6670	Identifier	payees
>6671	IdentifierDeclType	PayeeList
>6672	ExpressionStatement	 
>6673	AssignmentExpr	payee [ \"min\" ] = \"0.00\"
>6674	PrimaryExpression	\"0.00\"
>6675	ArrayIndexing	payee [ \"min\" ]
>6676	PrimaryExpression	\"min\"
>6677	Identifier	payee
>6678	ExpressionStatement	 
>6679	AssignmentExpr	payee [ \"percentage\" ] = \"0.00\"
>6680	PrimaryExpression	\"0.00\"
>6681	ArrayIndexing	payee [ \"percentage\" ]
>6682	PrimaryExpression	\"percentage\"
>6683	Identifier	payee
>6684	ExpressionStatement	 
>6685	AssignmentExpr	payee [ \"amount\" ] = \"0.05\"
>6686	PrimaryExpression	\"0.05\"
>6687	ArrayIndexing	payee [ \"amount\" ]
>6688	PrimaryExpression	\"amount\"
>6689	Identifier	payee
>6690	ExpressionStatement	 
>6691	AssignmentExpr	payee [ \"amountType\" ] = \"flatFee\"
>6692	PrimaryExpression	\"flatFee\"
>6693	ArrayIndexing	payee [ \"amountType\" ]
>6694	PrimaryExpression	\"amountType\"
>6695	Identifier	payee
>6696	ExpressionStatement	 
>6697	AssignmentExpr	payee [ \"description\" ] = \"Auto-generated payee\"
>6698	PrimaryExpression	\"Auto-generated payee\"
>6699	ArrayIndexing	payee [ \"description\" ]
>6700	PrimaryExpression	\"description\"
>6701	Identifier	payee
>6702	ExpressionStatement	 
>6703	CallExpression	BM_ID_SET ( payee [ \"id\" ] , BM_ACCOUNT_ID ( in [ \"resources\" ] [ 0 ] [ \"id\" ] ) )
>6704	ArgumentList	payee [ \"id\" ]
>6705	Argument	BM_ACCOUNT_ID ( in [ \"resources\" ] [ 0 ] [ \"id\" ] )
>6706	CallExpression	BM_ACCOUNT_ID ( in [ \"resources\" ] [ 0 ] [ \"id\" ] )
>6707	ArgumentList	in [ \"resources\" ] [ 0 ] [ \"id\" ]
>6708	Argument	in [ \"resources\" ] [ 0 ] [ \"id\" ]
>6709	ArrayIndexing	in [ \"resources\" ] [ 0 ] [ \"id\" ]
>6710	PrimaryExpression	\"id\"
>6711	ArrayIndexing	in [ \"resources\" ] [ 0 ]
>6712	PrimaryExpression	0
>6713	ArrayIndexing	in [ \"resources\" ]
>6714	PrimaryExpression	\"resources\"
>6715	Identifier	in
>6716	Callee	BM_ACCOUNT_ID
>6717	Identifier	BM_ACCOUNT_ID
>6718	Argument	payee [ \"id\" ]
>6719	ArrayIndexing	payee [ \"id\" ]
>6720	PrimaryExpression	\"id\"
>6721	Identifier	payee
>6722	Callee	BM_ID_SET
>6723	Identifier	BM_ID_SET
>6724	IdentifierDeclStatement	 
>6725	IdentifierDecl	payee
>6726	Identifier	payee
>6727	IdentifierDeclType	Payee
>6728	CompoundStatement	 
>6729	ExpressionStatement	 
>6730	Statement	 
>6731	Statement	 
>6732	Statement	 
>6733	Statement	 
>6734	Statement	 
>6735	Statement	 
>6736	Statement	 
>6737	Statement	 
>6738	Statement	 
>6739	Statement	 
>6740	Statement	 
>6741	Condition	 
>6742	EqualityExpression	in [ \"resources\" ] -> length ( ) == 0
>6743	PrimaryExpression	0
>6744	CallExpression	in [ \"resources\" ] -> length ( )
>6745	ArgumentList	 
>6746	Callee	in [ \"resources\" ] -> length
>6747	PtrMemberAccess	in [ \"resources\" ] -> length
>6748	Identifier	length
>6749	ArrayIndexing	in [ \"resources\" ]
>6750	PrimaryExpression	\"resources\"
>6751	Identifier	in
>6752	Condition	 
>6753	Identifier	pass
>6754	ExpressionStatement	 
>6755	AssignmentExpr	pass = m -> getSecureFromBitmunk ( & url , in , userId )
>6756	CallExpression	m -> getSecureFromBitmunk ( & url , in , userId )
>6757	ArgumentList	& url
>6758	Argument	userId
>6759	Identifier	userId
>6760	Argument	in
>6761	Identifier	in
>6762	Argument	& url
>6763	UnaryOp	& url
>6764	Identifier	url
>6765	UnaryOperator	&
>6766	Callee	m -> getSecureFromBitmunk
>6767	PtrMemberAccess	m -> getSecureFromBitmunk
>6768	Identifier	getSecureFromBitmunk
>6769	Identifier	m
>6770	Identifier	pass
>6771	IdentifierDeclStatement	 
>6772	IdentifierDecl	in
>6773	Identifier	in
>6774	IdentifierDeclType	DynamicObject
>6775	ExpressionStatement	 
>6776	Statement	 
>6777	Statement	 
>6778	Statement	 
>6779	Statement	 
>6780	Statement	 
>6781	Statement	 
>6782	Statement	 
>6783	Statement	 
>6784	Statement	 
>6785	Statement	 
>6786	IdentifierDeclStatement	 
>6787	IdentifierDecl	url
>6788	Identifier	url
>6789	IdentifierDeclType	monarch 
>6790	IdentifierDeclStatement	 
>6791	IdentifierDecl	* m = mNode -> getMessenger ( )
>6792	AssignmentExpr	* m = mNode -> getMessenger ( )
>6793	CallExpression	mNode -> getMessenger ( )
>6794	ArgumentList	 
>6795	Callee	mNode -> getMessenger
>6796	PtrMemberAccess	mNode -> getMessenger
>6797	Identifier	getMessenger
>6798	Identifier	mNode
>6799	Identifier	m
>6800	Identifier	m
>6801	IdentifierDeclType	Messenger *
>6802	Condition	 
>6803	AndExpression	pass && ! BM_PAYEE_SCHEME_ID_VALID ( psId ) && ! cfg . isNull ( ) && cfg [ \"autoSell\" ] [ \"enabled\" ] \
>6804	AndExpression	! BM_PAYEE_SCHEME_ID_VALID ( psId ) && ! cfg . isNull ( ) && cfg [ \"autoSell\" ] [ \"enabled\" ] -> getBoolean ( ) && ! \
>6805	AndExpression	! cfg . isNull ( ) && cfg [ \"autoSell\" ] [ \"enabled\" ] -> getBoolean ( ) && ! BM_PAYEE_SCHEME_ID_VALID ( \
>6806	AndExpression	cfg [ \"autoSell\" ] [ \"enabled\" ] -> getBoolean ( ) && ! BM_PAYEE_SCHEME_ID_VALID ( BM_PAYEE_SCHEME_ID ( \
>6807	UnaryOp	! BM_PAYEE_SCHEME_ID_VALID ( BM_PAYEE_SCHEME_ID ( cfg [ \"autoSell\" ] [ \"payeeSchemeId\" ] ) )
>6808	CallExpression	BM_PAYEE_SCHEME_ID_VALID ( BM_PAYEE_SCHEME_ID ( cfg [ \"autoSell\" ] [ \"payeeSchemeId\" ] ) )
>6809	ArgumentList	BM_PAYEE_SCHEME_ID ( cfg [ \"autoSell\" ] [ \"payeeSchemeId\" ] )
>6810	Argument	BM_PAYEE_SCHEME_ID ( cfg [ \"autoSell\" ] [ \"payeeSchemeId\" ] )
>6811	CallExpression	BM_PAYEE_SCHEME_ID ( cfg [ \"autoSell\" ] [ \"payeeSchemeId\" ] )
>6812	ArgumentList	cfg [ \"autoSell\" ] [ \"payeeSchemeId\" ]
>6813	Argument	cfg [ \"autoSell\" ] [ \"payeeSchemeId\" ]
>6814	ArrayIndexing	cfg [ \"autoSell\" ] [ \"payeeSchemeId\" ]
>6815	PrimaryExpression	\"payeeSchemeId\"
>6816	ArrayIndexing	cfg [ \"autoSell\" ]
>6817	PrimaryExpression	\"autoSell\"
>6818	Identifier	cfg
>6819	Callee	BM_PAYEE_SCHEME_ID
>6820	Identifier	BM_PAYEE_SCHEME_ID
>6821	Callee	BM_PAYEE_SCHEME_ID_VALID
>6822	Identifier	BM_PAYEE_SCHEME_ID_VALID
>6823	UnaryOperator	!
>6824	CallExpression	cfg [ \"autoSell\" ] [ \"enabled\" ] -> getBoolean ( )
>6825	ArgumentList	 
>6826	Callee	cfg [ \"autoSell\" ] [ \"enabled\" ] -> getBoolean
>6827	PtrMemberAccess	cfg [ \"autoSell\" ] [ \"enabled\" ] -> getBoolean
>6828	Identifier	getBoolean
>6829	ArrayIndexing	cfg [ \"autoSell\" ] [ \"enabled\" ]
>6830	PrimaryExpression	\"enabled\"
>6831	ArrayIndexing	cfg [ \"autoSell\" ]
>6832	PrimaryExpression	\"autoSell\"
>6833	Identifier	cfg
>6834	UnaryOp	! cfg . isNull ( )
>6835	CallExpression	cfg . isNull ( )
>6836	ArgumentList	 
>6837	Callee	cfg . isNull
>6838	MemberAccess	cfg . isNull
>6839	Identifier	isNull
>6840	Identifier	cfg
>6841	UnaryOperator	!
>6842	UnaryOp	! BM_PAYEE_SCHEME_ID_VALID ( psId )
>6843	CallExpression	BM_PAYEE_SCHEME_ID_VALID ( psId )
>6844	ArgumentList	psId
>6845	Argument	psId
>6846	Identifier	psId
>6847	Callee	BM_PAYEE_SCHEME_ID_VALID
>6848	Identifier	BM_PAYEE_SCHEME_ID_VALID
>6849	UnaryOperator	!
>6850	Identifier	pass
>6851	IfStatement	if ( c != NULL )
>6852	CompoundStatement	 
>6853	ExpressionStatement	 
>6854	CallExpression	c -> close ( )
>6855	ArgumentList	 
>6856	Callee	c -> close
>6857	PtrMemberAccess	c -> close
>6858	Identifier	close
>6859	Identifier	c
>6860	ExpressionStatement	 
>6861	AssignmentExpr	pass = mCatalogDb . getFirstPayeeSchemeId ( psId , c )
>6862	CallExpression	mCatalogDb . getFirstPayeeSchemeId ( psId , c )
>6863	ArgumentList	psId
>6864	Argument	c
>6865	Identifier	c
>6866	Argument	psId
>6867	Identifier	psId
>6868	Callee	mCatalogDb . getFirstPayeeSchemeId
>6869	MemberAccess	mCatalogDb . getFirstPayeeSchemeId
>6870	Identifier	getFirstPayeeSchemeId
>6871	Identifier	mCatalogDb
>6872	Identifier	pass
>6873	Condition	 
>6874	EqualityExpression	c != NULL
>6875	Identifier	NULL
>6876	Identifier	c
>6877	IdentifierDeclStatement	 
>6878	IdentifierDecl	* c = mMediaLibrary -> getConnection ( userId )
>6879	AssignmentExpr	* c = mMediaLibrary -> getConnection ( userId )
>6880	CallExpression	mMediaLibrary -> getConnection ( userId )
>6881	ArgumentList	userId
>6882	Argument	userId
>6883	Identifier	userId
>6884	Callee	mMediaLibrary -> getConnection
>6885	PtrMemberAccess	mMediaLibrary -> getConnection
>6886	Identifier	getConnection
>6887	Identifier	mMediaLibrary
>6888	Identifier	c
>6889	Identifier	c
>6890	IdentifierDeclType	Connection *
>6891	IdentifierDeclStatement	 
>6892	IdentifierDecl	psId = 0
>6893	AssignmentExpr	psId = 0
>6894	PrimaryExpression	0
>6895	Identifier	psId
>6896	Identifier	psId
>6897	IdentifierDeclType	PayeeSchemeId
>6898	IdentifierDeclStatement	 
>6899	IdentifierDecl	pass = false
>6900	AssignmentExpr	pass = false
>6901	Identifier	false
>6902	Identifier	false
>6903	Identifier	pass
>6904	IdentifierDeclType	bool
>6905	ExpressionStatement	 
>6906	Statement	 
>6907	Statement	 
>6908	Statement	 
>6909	Statement	 
>6910	Statement	 
>6911	Statement	 
>6912	Statement	 
>6913	Statement	 
>6914	Statement	 
>6915	IdentifierDeclStatement	 
>6916	IdentifierDecl	cfg = mNode -> getConfigManager ( ) -> getModuleUserConfig ( \"bitmunk.catalog.CustomCatalog\" , userId )
>6917	AssignmentExpr	cfg = mNode -> getConfigManager ( ) -> getModuleUserConfig ( \"bitmunk.catalog.CustomCatalog\" , userId )
>6918	CallExpression	mNode -> getConfigManager ( ) -> getModuleUserConfig ( \"bitmunk.catalog.CustomCatalog\" , userId )
>6919	ArgumentList	\"bitmunk.catalog.CustomCatalog\"
>6920	Argument	userId
>6921	Identifier	userId
>6922	Argument	\"bitmunk.catalog.CustomCatalog\"
>6923	PrimaryExpression	\"bitmunk.catalog.CustomCatalog\"
>6924	Callee	mNode -> getConfigManager ( ) -> getModuleUserConfig
>6925	PtrMemberAccess	mNode -> getConfigManager ( ) -> getModuleUserConfig
>6926	Identifier	getModuleUserConfig
>6927	CallExpression	mNode -> getConfigManager ( )
>6928	ArgumentList	 
>6929	Callee	mNode -> getConfigManager
>6930	PtrMemberAccess	mNode -> getConfigManager
>6931	Identifier	getConfigManager
>6932	Identifier	mNode
>6933	Identifier	cfg
>6934	Identifier	cfg
>6935	IdentifierDeclType	Config
>6936	IdentifierDeclStatement	 
>6937	IdentifierDecl	userId = BM_USER_ID ( e [ \"details\" ] [ \"userId\" ] )
>6938	AssignmentExpr	userId = BM_USER_ID ( e [ \"details\" ] [ \"userId\" ] )
>6939	CallExpression	BM_USER_ID ( e [ \"details\" ] [ \"userId\" ] )
>6940	ArgumentList	e [ \"details\" ] [ \"userId\" ]
>6941	Argument	e [ \"details\" ] [ \"userId\" ]
>6942	ArrayIndexing	e [ \"details\" ] [ \"userId\" ]
>6943	PrimaryExpression	\"userId\"
>6944	ArrayIndexing	e [ \"details\" ]
>6945	PrimaryExpression	\"details\"
>6946	Identifier	e
>6947	Callee	BM_USER_ID
>6948	Identifier	BM_USER_ID
>6949	Identifier	userId
>6950	Identifier	userId
>6951	IdentifierDeclType	UserId
>7015	FunctionDef	CustomCatalog 
>7016	ParameterList	Event & e
>7017	Parameter	 
>7018	Identifier	e
>7019	ParameterType	Event &
>7020	ReturnType	void
>7021	CompoundStatement	 
>7022	IfStatement	if ( ! cfg . isNull ( ) && cfg [ \"autoSell\" ] [ \"enabled\" ] -> getBoolean ( ) )
>7023	CompoundStatement	 
>7024	IfStatement	if ( updateWare ( userId , ware ) )
>7025	ElseStatement	else
>7026	CompoundStatement	 
>7027	ExpressionStatement	 
>7028	CallExpression	MO_CAT_ERROR ( BM_CUSTOMCATALOG_CAT , \"Could not auto-sell ware
>7029	ArgumentList	BM_CUSTOMCATALOG_CAT
>7030	Argument	JsonWriter 
>7031	CallExpression	JsonWriter 
>7032	ArgumentList	 
>7033	Callee	JsonWriter 
>7034	MemberAccess	JsonWriter 
>7035	Identifier	c_str
>7036	CallExpression	JsonWriter 
>7037	ArgumentList	Exception 
>7038	Argument	Exception 
>7039	CallExpression	Exception 
>7040	ArgumentList	 
>7041	Callee	Exception 
>7042	Identifier	Exception 
>7043	Callee	JsonWriter 
>7044	Identifier	JsonWriter 
>7045	Argument	\"Could not auto-sell ware
>7046	PrimaryExpression	\"Could not auto-sell ware
>7047	Argument	BM_CUSTOMCATALOG_CAT
>7048	Identifier	BM_CUSTOMCATALOG_CAT
>7049	Callee	MO_CAT_ERROR
>7050	Identifier	MO_CAT_ERROR
>7051	CompoundStatement	 
>7052	ExpressionStatement	 
>7053	CallExpression	MO_CAT_DEBUG ( BM_CUSTOMCATALOG_CAT , \"Auto-selling ware
>7054	ArgumentList	BM_CUSTOMCATALOG_CAT
>7055	Argument	BM_WARE_ID ( ware [ \"id\" ] )
>7056	CallExpression	BM_WARE_ID ( ware [ \"id\" ] )
>7057	ArgumentList	ware [ \"id\" ]
>7058	Argument	ware [ \"id\" ]
>7059	ArrayIndexing	ware [ \"id\" ]
>7060	PrimaryExpression	\"id\"
>7061	Identifier	ware
>7062	Callee	BM_WARE_ID
>7063	Identifier	BM_WARE_ID
>7064	Argument	\"Auto-selling ware
>7065	PrimaryExpression	\"Auto-selling ware
>7066	Argument	BM_CUSTOMCATALOG_CAT
>7067	Identifier	BM_CUSTOMCATALOG_CAT
>7068	Callee	MO_CAT_DEBUG
>7069	Identifier	MO_CAT_DEBUG
>7070	Condition	 
>7071	CallExpression	updateWare ( userId , ware )
>7072	ArgumentList	userId
>7073	Argument	ware
>7074	Identifier	ware
>7075	Argument	userId
>7076	Identifier	userId
>7077	Callee	updateWare
>7078	Identifier	updateWare
>7079	ExpressionStatement	 
>7080	AssignmentExpr	ware [ \"payeeSchemeId\" ] = BM_PAYEE_SCHEME_ID ( cfg [ \"autoSell\" ] [ \"payeeSchemeId\" ] )
>7081	CallExpression	BM_PAYEE_SCHEME_ID ( cfg [ \"autoSell\" ] [ \"payeeSchemeId\" ] )
>7082	ArgumentList	cfg [ \"autoSell\" ] [ \"payeeSchemeId\" ]
>7083	Argument	cfg [ \"autoSell\" ] [ \"payeeSchemeId\" ]
>7084	ArrayIndexing	cfg [ \"autoSell\" ] [ \"payeeSchemeId\" ]
>7085	PrimaryExpression	\"payeeSchemeId\"
>7086	ArrayIndexing	cfg [ \"autoSell\" ]
>7087	PrimaryExpression	\"autoSell\"
>7088	Identifier	cfg
>7089	Callee	BM_PAYEE_SCHEME_ID
>7090	Identifier	BM_PAYEE_SCHEME_ID
>7091	ArrayIndexing	ware [ \"payeeSchemeId\" ]
>7092	PrimaryExpression	\"payeeSchemeId\"
>7093	Identifier	ware
>7094	ExpressionStatement	 
>7095	AssignmentExpr	ware [ \"description\" ] = \"\"
>7096	PrimaryExpression	\"\"
>7097	ArrayIndexing	ware [ \"description\" ]
>7098	PrimaryExpression	\"description\"
>7099	Identifier	ware
>7100	ExpressionStatement	 
>7101	CallExpression	BM_ID_SET ( ware [ \"mediaId\" ] , BM_MEDIA_ID ( fi [ \"mediaId\" ] ) )
>7102	ArgumentList	ware [ \"mediaId\" ]
>7103	Argument	BM_MEDIA_ID ( fi [ \"mediaId\" ] )
>7104	CallExpression	BM_MEDIA_ID ( fi [ \"mediaId\" ] )
>7105	ArgumentList	fi [ \"mediaId\" ]
>7106	Argument	fi [ \"mediaId\" ]
>7107	ArrayIndexing	fi [ \"mediaId\" ]
>7108	PrimaryExpression	\"mediaId\"
>7109	Identifier	fi
>7110	Callee	BM_MEDIA_ID
>7111	Identifier	BM_MEDIA_ID
>7112	Argument	ware [ \"mediaId\" ]
>7113	ArrayIndexing	ware [ \"mediaId\" ]
>7114	PrimaryExpression	\"mediaId\"
>7115	Identifier	ware
>7116	Callee	BM_ID_SET
>7117	Identifier	BM_ID_SET
>7118	ExpressionStatement	 
>7119	Statement	 
>7120	Statement	 
>7121	Statement	 
>7122	Statement	 
>7123	Statement	 
>7124	Statement	 
>7125	Statement	 
>7126	Statement	 
>7127	Statement	 
>7128	Statement	 
>7129	Statement	 
>7130	Statement	 
>7131	Statement	 
>7132	Statement	 
>7133	Statement	 
>7134	Statement	 
>7135	Statement	 
>7136	Statement	 
>7137	Statement	 
>7138	Statement	 
>7139	Statement	 
>7140	Statement	 
>7141	Statement	 
>7142	Statement	 
>7143	Statement	 
>7144	Statement	 
>7145	Statement	 
>7146	Statement	 
>7147	Statement	 
>7148	Statement	 
>7149	Statement	 
>7150	Statement	 
>7151	Statement	 
>7152	Statement	 
>7153	Statement	 
>7154	Statement	 
>7155	ExpressionStatement	 
>7156	CallExpression	ware [ \"fileInfos\" ] -> append ( fi )
>7157	ArgumentList	fi
>7158	Argument	fi
>7159	Identifier	fi
>7160	Callee	ware [ \"fileInfos\" ] -> append
>7161	PtrMemberAccess	ware [ \"fileInfos\" ] -> append
>7162	Identifier	append
>7163	ArrayIndexing	ware [ \"fileInfos\" ]
>7164	PrimaryExpression	\"fileInfos\"
>7165	Identifier	ware
>7166	IdentifierDeclStatement	 
>7167	IdentifierDecl	fi = e [ \"details\" ] [ \"fileInfo\" ] . clone ( )
>7168	AssignmentExpr	fi = e [ \"details\" ] [ \"fileInfo\" ] . clone ( )
>7169	CallExpression	e [ \"details\" ] [ \"fileInfo\" ] . clone ( )
>7170	ArgumentList	 
>7171	Callee	e [ \"details\" ] [ \"fileInfo\" ] . clone
>7172	MemberAccess	e [ \"details\" ] [ \"fileInfo\" ] . clone
>7173	Identifier	clone
>7174	ArrayIndexing	e [ \"details\" ] [ \"fileInfo\" ]
>7175	PrimaryExpression	\"fileInfo\"
>7176	ArrayIndexing	e [ \"details\" ]
>7177	PrimaryExpression	\"details\"
>7178	Identifier	e
>7179	Identifier	fi
>7180	Identifier	fi
>7181	IdentifierDeclType	FileInfo
>7182	IdentifierDeclStatement	 
>7183	IdentifierDecl	ware
>7184	Identifier	ware
>7185	IdentifierDeclType	Ware
>7186	Condition	 
>7187	AndExpression	! cfg . isNull ( ) && cfg [ \"autoSell\" ] [ \"enabled\" ] -> getBoolean ( )
>7188	CallExpression	cfg [ \"autoSell\" ] [ \"enabled\" ] -> getBoolean ( )
>7189	ArgumentList	 
>7190	Callee	cfg [ \"autoSell\" ] [ \"enabled\" ] -> getBoolean
>7191	PtrMemberAccess	cfg [ \"autoSell\" ] [ \"enabled\" ] -> getBoolean
>7192	Identifier	getBoolean
>7193	ArrayIndexing	cfg [ \"autoSell\" ] [ \"enabled\" ]
>7194	PrimaryExpression	\"enabled\"
>7195	ArrayIndexing	cfg [ \"autoSell\" ]
>7196	PrimaryExpression	\"autoSell\"
>7197	Identifier	cfg
>7198	UnaryOp	! cfg . isNull ( )
>7199	CallExpression	cfg . isNull ( )
>7200	ArgumentList	 
>7201	Callee	cfg . isNull
>7202	MemberAccess	cfg . isNull
>7203	Identifier	isNull
>7204	Identifier	cfg
>7205	UnaryOperator	!
>7206	IdentifierDeclStatement	 
>7207	IdentifierDecl	cfg = mNode -> getConfigManager ( ) -> getModuleUserConfig ( \"bitmunk.catalog.CustomCatalog\" , userId )
>7208	AssignmentExpr	cfg = mNode -> getConfigManager ( ) -> getModuleUserConfig ( \"bitmunk.catalog.CustomCatalog\" , userId )
>7209	CallExpression	mNode -> getConfigManager ( ) -> getModuleUserConfig ( \"bitmunk.catalog.CustomCatalog\" , userId )
>7210	ArgumentList	\"bitmunk.catalog.CustomCatalog\"
>7211	Argument	userId
>7212	Identifier	userId
>7213	Argument	\"bitmunk.catalog.CustomCatalog\"
>7214	PrimaryExpression	\"bitmunk.catalog.CustomCatalog\"
>7215	Callee	mNode -> getConfigManager ( ) -> getModuleUserConfig
>7216	PtrMemberAccess	mNode -> getConfigManager ( ) -> getModuleUserConfig
>7217	Identifier	getModuleUserConfig
>7218	CallExpression	mNode -> getConfigManager ( )
>7219	ArgumentList	 
>7220	Callee	mNode -> getConfigManager
>7221	PtrMemberAccess	mNode -> getConfigManager
>7222	Identifier	getConfigManager
>7223	Identifier	mNode
>7224	Identifier	cfg
>7225	Identifier	cfg
>7226	IdentifierDeclType	Config
>7227	IdentifierDeclStatement	 
>7228	IdentifierDecl	userId = BM_USER_ID ( e [ \"details\" ] [ \"userId\" ] )
>7229	AssignmentExpr	userId = BM_USER_ID ( e [ \"details\" ] [ \"userId\" ] )
>7230	CallExpression	BM_USER_ID ( e [ \"details\" ] [ \"userId\" ] )
>7231	ArgumentList	e [ \"details\" ] [ \"userId\" ]
>7232	Argument	e [ \"details\" ] [ \"userId\" ]
>7233	ArrayIndexing	e [ \"details\" ] [ \"userId\" ]
>7234	PrimaryExpression	\"userId\"
>7235	ArrayIndexing	e [ \"details\" ]
>7236	PrimaryExpression	\"details\"
>7237	Identifier	e
>7238	Callee	BM_USER_ID
>7239	Identifier	BM_USER_ID
>7240	Identifier	userId
>7241	Identifier	userId
>7242	IdentifierDeclType	UserId
>7276	FunctionDef	CustomCatalog 
>7277	ParameterList	monarch 
>7278	Parameter	 
>7279	Identifier	e
>7280	ParameterType	monarch 
>7281	ReturnType	void
>7282	CompoundStatement	 
>7283	IfStatement	if ( i != mListingUpdaterMap . end ( ) )
>7284	CompoundStatement	 
>7285	ExpressionStatement	 
>7286	CallExpression	mNode -> getFiberMessageCenter ( ) -> sendMessage ( i -> second , msg )
>7287	ArgumentList	i -> second
>7288	Argument	msg
>7289	Identifier	msg
>7290	Argument	i -> second
>7291	PtrMemberAccess	i -> second
>7292	Identifier	second
>7293	Identifier	i
>7294	Callee	mNode -> getFiberMessageCenter ( ) -> sendMessage
>7295	PtrMemberAccess	mNode -> getFiberMessageCenter ( ) -> sendMessage
>7296	Identifier	sendMessage
>7297	CallExpression	mNode -> getFiberMessageCenter ( )
>7298	ArgumentList	 
>7299	Callee	mNode -> getFiberMessageCenter
>7300	PtrMemberAccess	mNode -> getFiberMessageCenter
>7301	Identifier	getFiberMessageCenter
>7302	Identifier	mNode
>7303	ExpressionStatement	 
>7304	AssignmentExpr	msg [ \"updateRequest\" ] = true
>7305	Identifier	true
>7306	ArrayIndexing	msg [ \"updateRequest\" ]
>7307	PrimaryExpression	\"updateRequest\"
>7308	Identifier	msg
>7309	IdentifierDeclStatement	 
>7310	IdentifierDecl	msg
>7311	Identifier	msg
>7312	IdentifierDeclType	DynamicObject
>7313	Condition	 
>7314	EqualityExpression	i != mListingUpdaterMap . end ( )
>7315	CallExpression	mListingUpdaterMap . end ( )
>7316	ArgumentList	 
>7317	Callee	mListingUpdaterMap . end
>7318	MemberAccess	mListingUpdaterMap . end
>7319	Identifier	end
>7320	Identifier	mListingUpdaterMap
>7321	Identifier	i
>7322	IdentifierDeclStatement	 
>7323	IdentifierDecl	i = mListingUpdaterMap . find ( userId )
>7324	AssignmentExpr	i = mListingUpdaterMap . find ( userId )
>7325	CallExpression	mListingUpdaterMap . find ( userId )
>7326	ArgumentList	userId
>7327	Argument	userId
>7328	Identifier	userId
>7329	Callee	mListingUpdaterMap . find
>7330	MemberAccess	mListingUpdaterMap . find
>7331	Identifier	find
>7332	Identifier	mListingUpdaterMap
>7333	Identifier	i
>7334	Identifier	i
>7335	IdentifierDeclType	ListingUpdaterMap 
>7336	IdentifierDeclStatement	 
>7337	IdentifierDecl	userId = BM_USER_ID ( e [ \"details\" ] [ \"userId\" ] )
>7338	AssignmentExpr	userId = BM_USER_ID ( e [ \"details\" ] [ \"userId\" ] )
>7339	CallExpression	BM_USER_ID ( e [ \"details\" ] [ \"userId\" ] )
>7340	ArgumentList	e [ \"details\" ] [ \"userId\" ]
>7341	Argument	e [ \"details\" ] [ \"userId\" ]
>7342	ArrayIndexing	e [ \"details\" ] [ \"userId\" ]
>7343	PrimaryExpression	\"userId\"
>7344	ArrayIndexing	e [ \"details\" ]
>7345	PrimaryExpression	\"details\"
>7346	Identifier	e
>7347	Callee	BM_USER_ID
>7348	Identifier	BM_USER_ID
>7349	Identifier	userId
>7350	Identifier	userId
>7351	IdentifierDeclType	UserId
>7372	FunctionDef	CustomCatalog 
>7373	ParameterList	monarch 
>7374	Parameter	 
>7375	Identifier	e
>7376	ParameterType	monarch 
>7377	ReturnType	void
>7378	CompoundStatement	 
>7379	IfStatement	if ( i != mListingUpdaterMap . end ( ) )
>7380	CompoundStatement	 
>7381	ExpressionStatement	 
>7382	CallExpression	mNode -> getFiberMessageCenter ( ) -> sendMessage ( i -> second , msg )
>7383	ArgumentList	i -> second
>7384	Argument	msg
>7385	Identifier	msg
>7386	Argument	i -> second
>7387	PtrMemberAccess	i -> second
>7388	Identifier	second
>7389	Identifier	i
>7390	Callee	mNode -> getFiberMessageCenter ( ) -> sendMessage
>7391	PtrMemberAccess	mNode -> getFiberMessageCenter ( ) -> sendMessage
>7392	Identifier	sendMessage
>7393	CallExpression	mNode -> getFiberMessageCenter ( )
>7394	ArgumentList	 
>7395	Callee	mNode -> getFiberMessageCenter
>7396	PtrMemberAccess	mNode -> getFiberMessageCenter
>7397	Identifier	getFiberMessageCenter
>7398	Identifier	mNode
>7399	ExpressionStatement	 
>7400	AssignmentExpr	msg [ \"testNetAccess\" ] = true
>7401	Identifier	true
>7402	ArrayIndexing	msg [ \"testNetAccess\" ]
>7403	PrimaryExpression	\"testNetAccess\"
>7404	Identifier	msg
>7405	IdentifierDeclStatement	 
>7406	IdentifierDecl	msg
>7407	Identifier	msg
>7408	IdentifierDeclType	DynamicObject
>7409	Condition	 
>7410	EqualityExpression	i != mListingUpdaterMap . end ( )
>7411	CallExpression	mListingUpdaterMap . end ( )
>7412	ArgumentList	 
>7413	Callee	mListingUpdaterMap . end
>7414	MemberAccess	mListingUpdaterMap . end
>7415	Identifier	end
>7416	Identifier	mListingUpdaterMap
>7417	Identifier	i
>7418	IdentifierDeclStatement	 
>7419	IdentifierDecl	i = mListingUpdaterMap . find ( userId )
>7420	AssignmentExpr	i = mListingUpdaterMap . find ( userId )
>7421	CallExpression	mListingUpdaterMap . find ( userId )
>7422	ArgumentList	userId
>7423	Argument	userId
>7424	Identifier	userId
>7425	Callee	mListingUpdaterMap . find
>7426	MemberAccess	mListingUpdaterMap . find
>7427	Identifier	find
>7428	Identifier	mListingUpdaterMap
>7429	Identifier	i
>7430	Identifier	i
>7431	IdentifierDeclType	ListingUpdaterMap 
>7432	IdentifierDeclStatement	 
>7433	IdentifierDecl	userId = BM_USER_ID ( e [ \"details\" ] [ \"userId\" ] )
>7434	AssignmentExpr	userId = BM_USER_ID ( e [ \"details\" ] [ \"userId\" ] )
>7435	CallExpression	BM_USER_ID ( e [ \"details\" ] [ \"userId\" ] )
>7436	ArgumentList	e [ \"details\" ] [ \"userId\" ]
>7437	Argument	e [ \"details\" ] [ \"userId\" ]
>7438	ArrayIndexing	e [ \"details\" ] [ \"userId\" ]
>7439	PrimaryExpression	\"userId\"
>7440	ArrayIndexing	e [ \"details\" ]
>7441	PrimaryExpression	\"details\"
>7442	Identifier	e
>7443	Callee	BM_USER_ID
>7444	Identifier	BM_USER_ID
>7445	Identifier	userId
>7446	Identifier	userId
>7447	IdentifierDeclType	UserId
<3=5,4
<9=11,10
<15=21,20,16
<16=17
<17=19,18
<21=265,261,260,259,258,257,256,255,254,245,46,24,22
<22=23
<24=42,25
<25=33,26
<26=27
<27=31,28
<28=29
<29=30
<31=32
<33=34
<34=41,40,35
<35=39,36
<36=38,37
<42=43
<43=45,44
<46=241,224,47
<47=48
<48=215,207,187,186,185,184,183,182,181,180,179,175,165,157,133,132,131,130,129,128,127,126,125,117,97,96,95,94,93,92,91,90,89,81,61,60,59,58,57,56,55,54,53,49
<49=50
<50=52,51
<61=62
<62=72,63
<63=66,64
<64=65
<66=67
<67=71,68
<68=70,69
<72=73
<73=75,74
<75=77,76
<77=78
<78=80,79
<81=82
<82=88,83
<83=87,84
<84=86,85
<97=98
<98=108,99
<99=102,100
<100=101
<102=103
<103=107,104
<104=106,105
<108=109
<109=111,110
<111=113,112
<113=114
<114=116,115
<117=118
<118=124,119
<119=123,120
<120=122,121
<133=134
<134=148,135
<135=142,140,136
<136=137
<137=139,138
<140=141
<142=143
<143=147,144
<144=146,145
<148=149
<149=151,150
<151=153,152
<153=154
<154=156,155
<157=158
<158=164,159
<159=163,160
<160=162,161
<165=166
<166=168,167
<168=170,169
<170=172,171
<172=174,173
<175=176
<176=178,177
<187=188
<188=198,189
<189=192,190
<190=191
<192=193
<193=197,194
<194=196,195
<198=199
<199=201,200
<201=203,202
<203=204
<204=206,205
<207=208
<208=214,209
<209=213,210
<210=212,211
<215=216
<216=220,217
<217=218
<218=219
<220=221
<221=223,222
<224=232,225
<225=226
<226=230,227
<227=228
<228=229
<230=231
<232=233
<233=240,239,234
<234=238,235
<235=237,236
<241=242
<242=244,243
<245=246
<246=250,247
<247=248
<248=249
<250=251
<251=253,252
<261=262
<262=264,263
<265=266
<266=271,270,267
<267=269,268
<307=322,321,308
<308=318,315,312,309
<309=311,310
<312=314,313
<315=317,316
<318=320,319
<322=375,371,370,369,368,367,366,365,363,355,347,339,325,323
<323=324
<325=326
<326=330,327
<327=328
<328=329
<330=331
<331=333,332
<333=335,334
<335=336
<336=338,337
<339=340
<340=342,341
<342=344,343
<344=346,345
<347=348
<348=350,349
<350=352,351
<352=354,353
<355=356
<356=358,357
<358=360,359
<360=362,361
<363=364
<371=372
<372=374,373
<375=376
<376=381,380,377
<377=379,378
<396=402,401,397
<397=398
<398=400,399
<402=403
<403=558,404
<404=538,531,530,529,528,527,526,525,524,523,503,496,495,494,493,492,491,490,489,488,468,461,460,459,458,457,456,455,454,453,433,426,425,424,423,422,421,420,419,418,409,405
<405=406
<406=408,407
<409=410
<410=414,411
<411=412
<412=413
<414=415
<415=417,416
<426=427
<427=429,428
<429=430
<430=432,431
<433=434
<434=444,435
<435=438,436
<436=437
<438=439
<439=443,440
<440=442,441
<444=445
<445=447,446
<447=449,448
<449=450
<450=452,451
<461=462
<462=464,463
<464=465
<465=467,466
<468=469
<469=479,470
<470=473,471
<471=472
<473=474
<474=478,475
<475=477,476
<479=480
<480=482,481
<482=484,483
<484=485
<485=487,486
<496=497
<497=499,498
<499=500
<500=502,501
<503=504
<504=514,505
<505=508,506
<506=507
<508=509
<509=513,510
<510=512,511
<514=515
<515=517,516
<517=519,518
<519=520
<520=522,521
<531=532
<532=534,533
<534=535
<535=537,536
<538=539
<539=549,540
<540=543,541
<541=542
<543=544
<544=548,545
<545=547,546
<549=550
<550=552,551
<552=554,553
<554=555
<555=557,556
<558=559
<559=561,560
<583=595,594,584
<584=591,588,585
<585=587,586
<588=590,589
<591=593,592
<595=985,974,906,598,596
<596=597
<598=904,599
<599=897,876,845,600
<600=843,601
<601=834,825,806,800,793,760,746,701,694,661,647,602
<602=643,637,631,623,603
<603=604
<604=614,605
<605=612,610,606
<606=607
<607=609,608
<610=611
<612=613
<614=615
<615=617,616
<617=619,618
<619=620
<620=622,621
<623=624
<624=626,625
<626=628,627
<628=630,629
<631=632
<632=634,633
<634=636,635
<637=638
<638=640,639
<640=642,641
<643=644
<644=646,645
<647=657,648
<648=649
<649=650
<650=656,651
<651=655,652
<652=654,653
<657=658
<658=660,659
<661=676,662
<662=663
<663=664
<664=675,665
<665=667,666
<667=669,668
<669=670
<670=672,671
<672=674,673
<676=677
<677=686,678
<678=682,679
<679=680
<680=681
<682=683
<683=685,684
<686=693,687
<687=689,688
<689=690
<690=692,691
<694=695
<695=700,699,696
<696=698,697
<701=742,736,730,722,702
<702=703
<703=713,704
<704=711,709,705
<705=706
<706=708,707
<709=710
<711=712
<713=714
<714=716,715
<716=718,717
<718=719
<719=721,720
<722=723
<723=725,724
<725=727,726
<727=729,728
<730=731
<731=733,732
<733=735,734
<736=737
<737=739,738
<739=741,740
<742=743
<743=745,744
<746=756,747
<747=748
<748=749
<749=755,750
<750=754,751
<751=753,752
<756=757
<757=759,758
<760=775,761
<761=762
<762=763
<763=774,764
<764=766,765
<766=768,767
<768=769
<769=771,770
<771=773,772
<775=776
<776=785,777
<777=781,778
<778=779
<779=780
<781=782
<782=784,783
<785=792,786
<786=788,787
<788=789
<789=791,790
<793=794
<794=799,798,795
<795=797,796
<800=801
<801=803,802
<803=805,804
<806=807
<807=824,823,808
<808=822,809
<809=813,810
<810=811
<811=812
<813=814
<814=816,815
<816=818,817
<818=819
<819=821,820
<825=826
<826=830,827
<827=828
<828=829
<830=831
<831=833,832
<834=835
<835=842,841,836
<836=840,837
<837=839,838
<843=844
<845=858,846
<846=847
<847=848
<848=857,849
<849=851,850
<851=852
<852=854,853
<854=856,855
<858=859
<859=868,860
<860=864,861
<861=862
<862=863
<864=865
<865=867,866
<868=875,869
<869=871,870
<871=872
<872=874,873
<876=877
<877=896,895,878
<878=894,879
<879=885,880
<880=883,881
<881=882
<883=884
<885=886
<886=888,887
<888=890,889
<890=891
<891=893,892
<897=898
<898=903,902,899
<899=901,900
<904=905
<906=972,907
<907=958,953,952,951,950,949,948,947,946,945,944,943,942,941,924,908
<908=922,909
<909=921,920,919,918,917,916,915,914,913,912,911,910
<922=923
<924=925
<925=940,926
<926=936,927
<927=934,932,930,928
<928=929
<930=931
<932=933
<934=935
<936=937
<937=939,938
<953=954
<954=957,956,955
<958=959
<959=971,970,960
<960=969,961
<961=967,962
<962=965,963
<963=964
<965=966
<967=968
<972=973
<974=975
<975=984,976
<976=980,977
<977=978
<978=979
<980=981
<981=983,982
<985=986
<986=991,990,987
<987=989,988
<1038=1044,1043,1039
<1039=1040
<1040=1042,1041
<1044=1123,1084,1045
<1045=1080,1074,1068,1060,1046
<1046=1047
<1047=1051,1048
<1048=1049
<1049=1050
<1051=1052
<1052=1054,1053
<1054=1056,1055
<1056=1057
<1057=1059,1058
<1060=1061
<1061=1063,1062
<1063=1065,1064
<1065=1067,1066
<1068=1069
<1069=1071,1070
<1071=1073,1072
<1074=1075
<1075=1077,1076
<1077=1079,1078
<1080=1081
<1081=1083,1082
<1084=1119,1113,1107,1099,1085
<1085=1086
<1086=1090,1087
<1087=1088
<1088=1089
<1090=1091
<1091=1093,1092
<1093=1095,1094
<1095=1096
<1096=1098,1097
<1099=1100
<1100=1102,1101
<1102=1104,1103
<1104=1106,1105
<1107=1108
<1108=1110,1109
<1110=1112,1111
<1113=1114
<1114=1116,1115
<1116=1118,1117
<1119=1120
<1120=1122,1121
<1123=1124
<1124=1128,1125
<1125=1126
<1126=1127
<1128=1129
<1129=1131,1130
<1146=1155,1154,1147
<1147=1151,1148
<1148=1150,1149
<1151=1153,1152
<1155=1498,1491,1477,1296,1158,1156
<1156=1157
<1158=1294,1159
<1159=1290,1289,1288,1287,1286,1285,1284,1282,1262,1249,1241,1227,1223,1222,1221,1220,1219,1218,1217,1215,1195,1182,1174,1160
<1160=1161
<1161=1165,1162
<1162=1163
<1163=1164
<1165=1166
<1166=1168,1167
<1168=1170,1169
<1170=1171
<1171=1173,1172
<1174=1175
<1175=1177,1176
<1177=1179,1178
<1179=1181,1180
<1182=1183
<1183=1193,1184
<1184=1187,1185
<1185=1186
<1187=1188
<1188=1190,1189
<1190=1192,1191
<1193=1194
<1195=1196
<1196=1213,1197
<1197=1207,1198
<1198=1199
<1199=1205,1200
<1200=1201
<1201=1202
<1202=1204,1203
<1205=1206
<1207=1208
<1208=1210,1209
<1210=1212,1211
<1213=1214
<1215=1216
<1223=1224
<1224=1226,1225
<1227=1228
<1228=1232,1229
<1229=1230
<1230=1231
<1232=1233
<1233=1235,1234
<1235=1237,1236
<1237=1238
<1238=1240,1239
<1241=1242
<1242=1244,1243
<1244=1246,1245
<1246=1248,1247
<1249=1250
<1250=1260,1251
<1251=1254,1252
<1252=1253
<1254=1255
<1255=1257,1256
<1257=1259,1258
<1260=1261
<1262=1263
<1263=1280,1264
<1264=1274,1265
<1265=1266
<1266=1272,1267
<1267=1268
<1268=1269
<1269=1271,1270
<1272=1273
<1274=1275
<1275=1277,1276
<1277=1279,1278
<1280=1281
<1282=1283
<1290=1291
<1291=1293,1292
<1294=1295
<1296=1473,1297
<1297=1455,1305,1298
<1298=1299
<1299=1301,1300
<1301=1302
<1302=1304,1303
<1305=1446,1306
<1306=1439,1348,1327,1307
<1307=1308
<1308=1326,1309
<1309=1324,1318,1310
<1310=1312,1311
<1312=1314,1313
<1314=1315
<1315=1317,1316
<1318=1320,1319
<1320=1321
<1321=1323,1322
<1324=1325
<1327=1328
<1328=1347,1329
<1329=1346,1330
<1330=1342,1331
<1331=1340,1338,1336,1332
<1332=1333
<1333=1335,1334
<1336=1337
<1338=1339
<1340=1341
<1342=1343
<1343=1345,1344
<1348=1430,1405,1349
<1349=1350
<1350=1362,1351
<1351=1352
<1352=1360,1353
<1353=1356,1354
<1354=1355
<1356=1357
<1357=1359,1358
<1360=1361
<1362=1363
<1363=1404,1364
<1364=1377,1365
<1365=1375,1366
<1366=1373,1371,1369,1367
<1367=1368
<1369=1370
<1371=1372
<1373=1374
<1375=1376
<1377=1400,1378
<1378=1398,1396,1394,1385,1381,1379
<1379=1380
<1381=1382
<1382=1384,1383
<1385=1386
<1386=1388,1387
<1388=1389
<1389=1391,1390
<1391=1393,1392
<1394=1395
<1396=1397
<1398=1399
<1400=1401
<1401=1403,1402
<1405=1419,1406
<1406=1407
<1407=1418,1408
<1408=1414,1409
<1409=1412,1410
<1410=1411
<1412=1413
<1414=1415
<1415=1417,1416
<1419=1420
<1420=1429,1421
<1421=1427,1422
<1422=1423
<1423=1424
<1424=1426,1425
<1427=1428
<1430=1431
<1431=1435,1432
<1432=1433
<1433=1434
<1435=1436
<1436=1438,1437
<1439=1440
<1440=1445,1444,1441
<1441=1443,1442
<1446=1447
<1447=1454,1448
<1448=1450,1449
<1450=1451
<1451=1453,1452
<1455=1456
<1456=1471,1457
<1457=1469,1467,1458
<1458=1459
<1459=1465,1460
<1460=1461
<1461=1462
<1462=1464,1463
<1465=1466
<1467=1468
<1469=1470
<1471=1472
<1473=1474
<1474=1476,1475
<1477=1478
<1478=1490,1489,1479
<1479=1488,1480
<1480=1484,1481
<1481=1482
<1482=1483
<1484=1485
<1485=1487,1486
<1491=1492
<1492=1497,1496,1493
<1493=1495,1494
<1498=1499
<1499=1504,1503,1500
<1500=1502,1501
<1546=1555,1554,1547
<1547=1551,1548
<1548=1550,1549
<1551=1553,1552
<1555=1773,1759,1688,1558,1556
<1556=1557
<1558=1686,1559
<1559=1682,1681,1680,1679,1678,1677,1676,1674,1654,1641,1627,1623,1622,1621,1620,1619,1618,1617,1615,1595,1582,1574,1560
<1560=1561
<1561=1565,1562
<1562=1563
<1563=1564
<1565=1566
<1566=1568,1567
<1568=1570,1569
<1570=1571
<1571=1573,1572
<1574=1575
<1575=1577,1576
<1577=1579,1578
<1579=1581,1580
<1582=1583
<1583=1593,1584
<1584=1587,1585
<1585=1586
<1587=1588
<1588=1590,1589
<1590=1592,1591
<1593=1594
<1595=1596
<1596=1613,1597
<1597=1607,1598
<1598=1599
<1599=1605,1600
<1600=1601
<1601=1602
<1602=1604,1603
<1605=1606
<1607=1608
<1608=1610,1609
<1610=1612,1611
<1613=1614
<1615=1616
<1623=1624
<1624=1626,1625
<1627=1628
<1628=1632,1629
<1629=1630
<1630=1631
<1632=1633
<1633=1635,1634
<1635=1637,1636
<1637=1638
<1638=1640,1639
<1641=1642
<1642=1652,1643
<1643=1646,1644
<1644=1645
<1646=1647
<1647=1649,1648
<1649=1651,1650
<1652=1653
<1654=1655
<1655=1672,1656
<1656=1666,1657
<1657=1658
<1658=1664,1659
<1659=1660
<1660=1661
<1661=1663,1662
<1664=1665
<1666=1667
<1667=1669,1668
<1669=1671,1670
<1672=1673
<1674=1675
<1682=1683
<1683=1685,1684
<1686=1687
<1688=1755,1689
<1689=1737,1717,1697,1690
<1690=1691
<1691=1693,1692
<1693=1694
<1694=1696,1695
<1697=1698
<1698=1716,1699
<1699=1714,1708,1700
<1700=1702,1701
<1702=1704,1703
<1704=1705
<1705=1707,1706
<1708=1710,1709
<1710=1711
<1711=1713,1712
<1714=1715
<1717=1718
<1718=1736,1719
<1719=1730,1720
<1720=1726,1721
<1721=1724,1722
<1722=1723
<1724=1725
<1726=1727
<1727=1729,1728
<1730=1732,1731
<1732=1733
<1733=1735,1734
<1737=1738
<1738=1753,1739
<1739=1751,1749,1740
<1740=1741
<1741=1747,1742
<1742=1743
<1743=1744
<1744=1746,1745
<1747=1748
<1749=1750
<1751=1752
<1753=1754
<1755=1756
<1756=1758,1757
<1759=1760
<1760=1772,1771,1761
<1761=1770,1762
<1762=1766,1763
<1763=1764
<1764=1765
<1766=1767
<1767=1769,1768
<1773=1774
<1774=1779,1778,1775
<1775=1777,1776
<1811=1820,1819,1812
<1812=1816,1813
<1813=1815,1814
<1816=1818,1817
<1820=1885,1871,1823,1821
<1821=1822
<1823=1867,1824
<1824=1849,1832,1825
<1825=1826
<1826=1828,1827
<1828=1829
<1829=1831,1830
<1832=1833
<1833=1848,1834
<1834=1844,1835
<1835=1842,1840,1838,1836
<1836=1837
<1838=1839
<1840=1841
<1842=1843
<1844=1845
<1845=1847,1846
<1849=1850
<1850=1865,1851
<1851=1863,1861,1852
<1852=1853
<1853=1859,1854
<1854=1855
<1855=1856
<1856=1858,1857
<1859=1860
<1861=1862
<1863=1864
<1865=1866
<1867=1868
<1868=1870,1869
<1871=1872
<1872=1884,1883,1873
<1873=1882,1874
<1874=1878,1875
<1875=1876
<1876=1877
<1878=1879
<1879=1881,1880
<1885=1886
<1886=1891,1890,1887
<1887=1889,1888
<1909=1921,1920,1910
<1910=1917,1914,1911
<1911=1913,1912
<1914=1916,1915
<1917=1919,1918
<1921=2019,2005,1924,1922
<1922=1923
<1924=2001,1925
<1925=1952,1933,1926
<1926=1927
<1927=1929,1928
<1929=1930
<1930=1932,1931
<1933=1934
<1934=1951,1935
<1935=1947,1936
<1936=1945,1943,1941,1939,1937
<1937=1938
<1939=1940
<1941=1942
<1943=1944
<1945=1946
<1947=1948
<1948=1950,1949
<1952=1953
<1953=1999,1954
<1954=1997,1995,1975,1955
<1955=1956
<1956=1966,1958,1957
<1958=1960,1959
<1960=1961
<1961=1963,1962
<1963=1965,1964
<1966=1967
<1967=1971,1968
<1968=1969
<1969=1970
<1971=1972
<1972=1974,1973
<1975=1976
<1976=1986,1978,1977
<1978=1980,1979
<1980=1981
<1981=1983,1982
<1983=1985,1984
<1986=1987
<1987=1991,1988
<1988=1989
<1989=1990
<1991=1992
<1992=1994,1993
<1995=1996
<1997=1998
<1999=2000
<2001=2002
<2002=2004,2003
<2005=2006
<2006=2018,2017,2007
<2007=2016,2008
<2008=2012,2009
<2009=2010
<2010=2011
<2012=2013
<2013=2015,2014
<2019=2020
<2020=2025,2024,2021
<2021=2023,2022
<2047=2059,2058,2048
<2048=2055,2052,2049
<2049=2051,2050
<2052=2054,2053
<2055=2057,2056
<2059=2078,2069,2062,2060
<2060=2061
<2062=2063
<2063=2067,2064
<2064=2065
<2065=2066
<2067=2068
<2069=2070
<2070=2077,2076,2071
<2071=2075,2072
<2072=2074,2073
<2078=2079
<2079=2084,2083,2080
<2080=2082,2081
<2094=2103,2102,2095
<2095=2099,2096
<2096=2098,2097
<2099=2101,2100
<2103=2104
<2104=2105
<2105=2111,2106
<2106=2109,2107
<2107=2108
<2109=2110
<2111=2112
<2112=2114,2113
<2123=2132,2131,2124
<2124=2128,2125
<2125=2127,2126
<2128=2130,2129
<2132=2206,2192,2135,2133
<2133=2134
<2135=2188,2136
<2136=2170,2161,2144,2137
<2137=2138
<2138=2140,2139
<2140=2141
<2141=2143,2142
<2144=2145
<2145=2160,2146
<2146=2156,2147
<2147=2154,2152,2150,2148
<2148=2149
<2150=2151
<2152=2153
<2154=2155
<2156=2157
<2157=2159,2158
<2161=2162
<2162=2164,2163
<2164=2165
<2165=2167,2166
<2167=2169,2168
<2170=2171
<2171=2186,2172
<2172=2184,2182,2173
<2173=2174
<2174=2180,2175
<2175=2176
<2176=2177
<2177=2179,2178
<2180=2181
<2182=2183
<2184=2185
<2186=2187
<2188=2189
<2189=2191,2190
<2192=2193
<2193=2205,2204,2194
<2194=2203,2195
<2195=2199,2196
<2196=2197
<2197=2198
<2199=2200
<2200=2202,2201
<2206=2207
<2207=2212,2211,2208
<2208=2210,2209
<2230=2239,2238,2231
<2231=2235,2232
<2232=2234,2233
<2235=2237,2236
<2239=2401,2392,2380,2242,2240
<2240=2241
<2242=2376,2243
<2243=2372,2358,2244
<2244=2354,2245
<2245=2347,2335,2287,2253,2246
<2246=2247
<2247=2249,2248
<2249=2250
<2250=2252,2251
<2253=2278,2254
<2254=2277,2276,2275,2274,2273,2272,2271,2270,2269,2268,2267,2266,2259,2255
<2255=2256
<2256=2258,2257
<2259=2260
<2260=2264,2261
<2261=2262
<2262=2263
<2264=2265
<2278=2279
<2279=2286,2280
<2280=2282,2281
<2282=2283
<2283=2285,2284
<2287=2326,2288
<2288=2314,2297,2289
<2289=2295,2290
<2290=2291
<2291=2292
<2292=2294,2293
<2295=2296
<2297=2298
<2298=2313,2299
<2299=2309,2300
<2300=2307,2305,2303,2301
<2301=2302
<2303=2304
<2305=2306
<2307=2308
<2309=2310
<2310=2312,2311
<2314=2315
<2315=2325,2324,2316
<2316=2323,2317
<2317=2319,2318
<2319=2320
<2320=2322,2321
<2326=2327
<2327=2334,2328
<2328=2330,2329
<2330=2331
<2331=2333,2332
<2335=2336
<2336=2346,2345,2337
<2337=2344,2338
<2338=2340,2339
<2340=2341
<2341=2343,2342
<2347=2348
<2348=2353,2352,2349
<2349=2351,2350
<2354=2355
<2355=2357,2356
<2358=2359
<2359=2371,2370,2360
<2360=2369,2361
<2361=2365,2362
<2362=2363
<2363=2364
<2365=2366
<2366=2368,2367
<2372=2373
<2373=2375,2374
<2376=2377
<2377=2379,2378
<2380=2381
<2381=2391,2390,2382
<2382=2389,2383
<2383=2385,2384
<2385=2386
<2386=2388,2387
<2392=2393
<2393=2397,2394
<2394=2395
<2395=2396
<2397=2398
<2398=2400,2399
<2401=2402
<2402=2407,2406,2403
<2403=2405,2404
<2434=2449,2448,2435
<2435=2445,2442,2439,2436
<2436=2438,2437
<2439=2441,2440
<2442=2444,2443
<2445=2447,2446
<2449=2663,2649,2512,2452,2450
<2450=2451
<2452=2508,2453
<2453=2499,2488,2477,2461,2454
<2454=2455
<2455=2459,2456
<2456=2457
<2457=2458
<2459=2460
<2461=2462
<2462=2475,2463
<2463=2466,2464
<2464=2465
<2466=2467
<2467=2469,2468
<2469=2471,2470
<2471=2472
<2472=2474,2473
<2475=2476
<2477=2478
<2478=2480,2479
<2480=2482,2481
<2482=2484,2483
<2484=2485
<2485=2487,2486
<2488=2489
<2489=2491,2490
<2491=2493,2492
<2493=2495,2494
<2495=2496
<2496=2498,2497
<2499=2500
<2500=2507,2506,2501
<2501=2505,2502
<2502=2504,2503
<2508=2509
<2509=2511,2510
<2512=2645,2513
<2513=2521,2514
<2514=2515
<2515=2517,2516
<2517=2518
<2518=2520,2519
<2521=2638,2522
<2522=2543,2523
<2523=2524
<2524=2542,2525
<2525=2540,2534,2526
<2526=2528,2527
<2528=2530,2529
<2530=2531
<2531=2533,2532
<2534=2536,2535
<2536=2537
<2537=2539,2538
<2540=2541
<2543=2634,2599,2544
<2544=2545
<2545=2595,2584,2578,2572,2546
<2546=2547
<2547=2571,2548
<2548=2561,2549
<2549=2559,2550
<2550=2557,2555,2553,2551
<2551=2552
<2553=2554
<2555=2556
<2557=2558
<2559=2560
<2561=2567,2562
<2562=2565,2563
<2563=2564
<2565=2566
<2567=2568
<2568=2570,2569
<2572=2573
<2573=2575,2574
<2575=2577,2576
<2578=2579
<2579=2581,2580
<2581=2583,2582
<2584=2585
<2585=2593,2586
<2586=2589,2587
<2587=2588
<2589=2590
<2590=2592,2591
<2593=2594
<2595=2596
<2596=2598,2597
<2599=2600
<2600=2601
<2601=2633,2602
<2602=2615,2603
<2603=2613,2604
<2604=2611,2609,2607,2605
<2605=2606
<2607=2608
<2609=2610
<2611=2612
<2613=2614
<2615=2629,2616
<2616=2627,2625,2623,2621,2619,2617
<2617=2618
<2619=2620
<2621=2622
<2623=2624
<2625=2626
<2627=2628
<2629=2630
<2630=2632,2631
<2634=2635
<2635=2637,2636
<2638=2639
<2639=2641,2640
<2641=2642
<2642=2644,2643
<2645=2646
<2646=2648,2647
<2649=2650
<2650=2662,2661,2651
<2651=2660,2652
<2652=2656,2653
<2653=2654
<2654=2655
<2656=2657
<2657=2659,2658
<2663=2664
<2664=2669,2668,2665
<2665=2667,2666
<2701=2713,2712,2702
<2702=2709,2706,2703
<2703=2705,2704
<2706=2708,2707
<2709=2711,2710
<2713=2824,2810,2716,2714
<2714=2715
<2716=2806,2717
<2717=2797,2782,2725,2718
<2718=2719
<2719=2721,2720
<2721=2722
<2722=2724,2723
<2725=2773,2726
<2726=2759,2727
<2727=2752,2728
<2728=2740,2729
<2729=2730
<2730=2738,2731
<2731=2734,2732
<2732=2733
<2734=2735
<2735=2737,2736
<2738=2739
<2740=2741
<2741=2751,2750,2742
<2742=2749,2743
<2743=2745,2744
<2745=2746
<2746=2748,2747
<2752=2753
<2753=2755,2754
<2755=2756
<2756=2758,2757
<2759=2760
<2760=2772,2771,2761
<2761=2770,2762
<2762=2764,2763
<2764=2765
<2765=2767,2766
<2767=2769,2768
<2773=2774
<2774=2778,2775
<2775=2776
<2776=2777
<2778=2779
<2779=2781,2780
<2782=2783
<2783=2796,2784
<2784=2792,2785
<2785=2790,2788,2786
<2786=2787
<2788=2789
<2790=2791
<2792=2793
<2793=2795,2794
<2797=2798
<2798=2804,2799
<2799=2802,2800
<2800=2801
<2802=2803
<2804=2805
<2806=2807
<2807=2809,2808
<2810=2811
<2811=2823,2822,2812
<2812=2821,2813
<2813=2817,2814
<2814=2815
<2815=2816
<2817=2818
<2818=2820,2819
<2824=2825
<2825=2830,2829,2826
<2826=2828,2827
<2856=2865,2864,2857
<2857=2861,2858
<2858=2860,2859
<2861=2863,2862
<2865=2883,2877,2866
<2866=2867
<2867=2875,2868
<2868=2873,2871,2869
<2869=2870
<2871=2872
<2873=2874
<2875=2876
<2877=2878
<2878=2880,2879
<2880=2882,2881
<2883=2884
<2884=2886,2885
<2896=2908,2907,2897
<2897=2904,2901,2898
<2898=2900,2899
<2901=2903,2902
<2904=2906,2905
<2908=2980,2966,2911,2909
<2909=2910
<2911=2962,2912
<2912=2961,2960,2959,2958,2957,2956,2955,2954,2953,2952,2951,2950,2949,2948,2947,2946,2931,2920,2913
<2913=2914
<2914=2916,2915
<2916=2917
<2917=2919,2918
<2920=2921
<2921=2929,2922
<2922=2925,2923
<2923=2924
<2925=2926
<2926=2928,2927
<2929=2930
<2931=2932
<2932=2945,2933
<2933=2941,2934
<2934=2939,2937,2935
<2935=2936
<2937=2938
<2939=2940
<2941=2942
<2942=2944,2943
<2962=2963
<2963=2965,2964
<2966=2967
<2967=2979,2978,2968
<2968=2977,2969
<2969=2973,2970
<2970=2971
<2971=2972
<2973=2974
<2974=2976,2975
<2980=2981
<2981=2986,2985,2982
<2982=2984,2983
<3003=3012,3011,3004
<3004=3008,3005
<3005=3007,3006
<3008=3010,3009
<3012=3154,3140,3071,3015,3013
<3013=3014
<3015=3069,3016
<3016=3065,3064,3063,3062,3061,3060,3059,3057,3044,3031,3017
<3017=3018
<3018=3022,3019
<3019=3020
<3020=3021
<3022=3023
<3023=3025,3024
<3025=3027,3026
<3027=3028
<3028=3030,3029
<3031=3032
<3032=3042,3033
<3033=3036,3034
<3034=3035
<3036=3037
<3037=3039,3038
<3039=3041,3040
<3042=3043
<3044=3045
<3045=3055,3046
<3046=3049,3047
<3047=3048
<3049=3050
<3050=3052,3051
<3052=3054,3053
<3055=3056
<3057=3058
<3065=3066
<3066=3068,3067
<3069=3070
<3071=3136,3072
<3072=3127,3080,3073
<3073=3074
<3074=3076,3075
<3076=3077
<3077=3079,3078
<3080=3125,3081
<3081=3124,3123,3122,3121,3120,3119,3118,3117,3116,3115,3102,3082
<3082=3083
<3083=3101,3084
<3084=3099,3093,3085
<3085=3087,3086
<3087=3089,3088
<3089=3090
<3090=3092,3091
<3093=3095,3094
<3095=3096
<3096=3098,3097
<3099=3100
<3102=3103
<3103=3114,3104
<3104=3110,3105
<3105=3108,3106
<3106=3107
<3108=3109
<3110=3111
<3111=3113,3112
<3125=3126
<3127=3128
<3128=3135,3129
<3129=3131,3130
<3131=3132
<3132=3134,3133
<3136=3137
<3137=3139,3138
<3140=3141
<3141=3153,3152,3142
<3142=3151,3143
<3143=3147,3144
<3144=3145
<3145=3146
<3147=3148
<3148=3150,3149
<3154=3155
<3155=3160,3159,3156
<3156=3158,3157
<3185=3197,3196,3186
<3186=3193,3190,3187
<3187=3189,3188
<3190=3192,3191
<3193=3195,3194
<3197=3329,3315,3200,3198
<3198=3199
<3200=3311,3201
<3201=3310,3309,3308,3307,3306,3305,3304,3303,3302,3301,3209,3202
<3202=3203
<3203=3205,3204
<3205=3206
<3206=3208,3207
<3209=3292,3210
<3210=3231,3211
<3211=3212
<3212=3230,3213
<3213=3228,3222,3214
<3214=3216,3215
<3216=3218,3217
<3218=3219
<3219=3221,3220
<3222=3224,3223
<3224=3225
<3225=3227,3226
<3228=3229
<3231=3232
<3232=3291,3233
<3233=3270,3234
<3234=3256,3235
<3235=3252,3236
<3236=3250,3248,3239,3237
<3237=3238
<3239=3240
<3240=3242,3241
<3242=3243
<3243=3245,3244
<3245=3247,3246
<3248=3249
<3250=3251
<3252=3253
<3253=3255,3254
<3256=3266,3257
<3257=3264,3262,3260,3258
<3258=3259
<3260=3261
<3262=3263
<3264=3265
<3266=3267
<3267=3269,3268
<3270=3287,3271
<3271=3285,3283,3274,3272
<3272=3273
<3274=3275
<3275=3277,3276
<3277=3278
<3278=3280,3279
<3280=3282,3281
<3283=3284
<3285=3286
<3287=3288
<3288=3290,3289
<3292=3293
<3293=3300,3294
<3294=3296,3295
<3296=3297
<3297=3299,3298
<3311=3312
<3312=3314,3313
<3315=3316
<3316=3328,3327,3317
<3317=3326,3318
<3318=3322,3319
<3319=3320
<3320=3321
<3322=3323
<3323=3325,3324
<3329=3330
<3330=3335,3334,3331
<3331=3333,3332
<3359=3368,3367,3360
<3360=3364,3361
<3361=3363,3362
<3364=3366,3365
<3368=3380,3369
<3369=3370
<3370=3378,3371
<3371=3376,3374,3372
<3372=3373
<3374=3375
<3376=3377
<3378=3379
<3380=3381
<3381=3383,3382
<3391=3403,3402,3392
<3392=3399,3396,3393
<3393=3395,3394
<3396=3398,3397
<3399=3401,3400
<3403=3498,3484,3406,3404
<3404=3405
<3406=3480,3407
<3407=3479,3478,3477,3476,3475,3474,3473,3472,3471,3470,3453,3415,3408
<3408=3409
<3409=3411,3410
<3411=3412
<3412=3414,3413
<3415=3449,3416
<3416=3440,3424,3417
<3417=3418
<3418=3422,3419
<3419=3420
<3420=3421
<3422=3423
<3424=3425
<3425=3438,3426
<3426=3429,3427
<3427=3428
<3429=3430
<3430=3432,3431
<3432=3434,3433
<3434=3435
<3435=3437,3436
<3438=3439
<3440=3441
<3441=3448,3447,3442
<3442=3446,3443
<3443=3445,3444
<3449=3450
<3450=3452,3451
<3453=3454
<3454=3469,3455
<3455=3465,3456
<3456=3463,3461,3459,3457
<3457=3458
<3459=3460
<3461=3462
<3463=3464
<3465=3466
<3466=3468,3467
<3480=3481
<3481=3483,3482
<3484=3485
<3485=3497,3496,3486
<3486=3495,3487
<3487=3491,3488
<3488=3489
<3489=3490
<3491=3492
<3492=3494,3493
<3498=3499
<3499=3504,3503,3500
<3500=3502,3501
<3525=3534,3533,3526
<3526=3530,3527
<3527=3529,3528
<3530=3532,3531
<3534=3627,3613,3575,3537,3535
<3535=3536
<3537=3571,3538
<3538=3562,3546,3539
<3539=3540
<3540=3544,3541
<3541=3542
<3542=3543
<3544=3545
<3546=3547
<3547=3560,3548
<3548=3551,3549
<3549=3550
<3551=3552
<3552=3554,3553
<3554=3556,3555
<3556=3557
<3557=3559,3558
<3560=3561
<3562=3563
<3563=3570,3569,3564
<3564=3568,3565
<3565=3567,3566
<3571=3572
<3572=3574,3573
<3575=3609,3576
<3576=3608,3607,3606,3605,3604,3603,3602,3601,3600,3599,3584,3577
<3577=3578
<3578=3580,3579
<3580=3581
<3581=3583,3582
<3584=3585
<3585=3598,3586
<3586=3594,3587
<3587=3592,3590,3588
<3588=3589
<3590=3591
<3592=3593
<3594=3595
<3595=3597,3596
<3609=3610
<3610=3612,3611
<3613=3614
<3614=3626,3625,3615
<3615=3624,3616
<3616=3620,3617
<3617=3618
<3618=3619
<3620=3621
<3621=3623,3622
<3627=3628
<3628=3633,3632,3629
<3629=3631,3630
<3653=3662,3661,3654
<3654=3658,3655
<3655=3657,3656
<3658=3660,3659
<3662=3853,3839,3703,3665,3663
<3663=3664
<3665=3699,3666
<3666=3690,3674,3667
<3667=3668
<3668=3672,3669
<3669=3670
<3670=3671
<3672=3673
<3674=3675
<3675=3688,3676
<3676=3679,3677
<3677=3678
<3679=3680
<3680=3682,3681
<3682=3684,3683
<3684=3685
<3685=3687,3686
<3688=3689
<3690=3691
<3691=3698,3697,3692
<3692=3696,3693
<3693=3695,3694
<3699=3700
<3700=3702,3701
<3703=3835,3704
<3704=3834,3833,3832,3831,3830,3829,3828,3827,3826,3825,3821,3817,3813,3712,3705
<3705=3706
<3706=3708,3707
<3708=3709
<3709=3711,3710
<3712=3783,3731,3713
<3713=3714
<3714=3722,3715
<3715=3716
<3716=3720,3717
<3717=3718
<3718=3719
<3720=3721
<3722=3723
<3723=3730,3729,3724
<3724=3728,3725
<3725=3727,3726
<3731=3777,3766,3760,3749,3743,3732
<3732=3733
<3733=3737,3734
<3734=3735
<3735=3736
<3737=3738
<3738=3740,3739
<3740=3742,3741
<3743=3744
<3744=3746,3745
<3746=3748,3747
<3749=3750
<3750=3754,3751
<3751=3752
<3752=3753
<3754=3755
<3755=3757,3756
<3757=3759,3758
<3760=3761
<3761=3763,3762
<3763=3765,3764
<3766=3767
<3767=3774,3768
<3768=3770,3769
<3770=3771
<3771=3773,3772
<3774=3776,3775
<3777=3778
<3778=3780,3779
<3780=3782,3781
<3783=3784
<3784=3812,3785
<3785=3798,3786
<3786=3794,3787
<3787=3792,3790,3788
<3788=3789
<3790=3791
<3792=3793
<3794=3795
<3795=3797,3796
<3798=3808,3799
<3799=3806,3804,3802,3800
<3800=3801
<3802=3803
<3804=3805
<3806=3807
<3808=3809
<3809=3811,3810
<3813=3814
<3814=3816,3815
<3817=3818
<3818=3820,3819
<3821=3822
<3822=3824,3823
<3835=3836
<3836=3838,3837
<3839=3840
<3840=3852,3851,3841
<3841=3850,3842
<3842=3846,3843
<3843=3844
<3844=3845
<3846=3847
<3847=3849,3848
<3853=3854
<3854=3859,3858,3855
<3855=3857,3856
<3886=3895,3894,3887
<3887=3891,3888
<3888=3890,3889
<3891=3893,3892
<3895=4151,4137,3936,3898,3896
<3896=3897
<3898=3932,3899
<3899=3923,3907,3900
<3900=3901
<3901=3905,3902
<3902=3903
<3903=3904
<3905=3906
<3907=3908
<3908=3921,3909
<3909=3912,3910
<3910=3911
<3912=3913
<3913=3915,3914
<3915=3917,3916
<3917=3918
<3918=3920,3919
<3921=3922
<3923=3924
<3924=3931,3930,3925
<3925=3929,3926
<3926=3928,3927
<3932=3933
<3933=3935,3934
<3936=4133,3937
<3937=4132,4131,4130,4129,4128,4127,4126,4125,4124,4123,3945,3938
<3938=3939
<3939=3941,3940
<3941=3942
<3942=3944,3943
<3945=4116,3946
<3946=4112,4108,4104,3967,3947
<3947=3948
<3948=3966,3949
<3949=3964,3958,3950
<3950=3952,3951
<3952=3954,3953
<3954=3955
<3955=3957,3956
<3958=3960,3959
<3960=3961
<3961=3963,3962
<3964=3965
<3967=4074,3986,3968
<3968=3969
<3969=3977,3970
<3970=3971
<3971=3975,3972
<3972=3973
<3973=3974
<3975=3976
<3977=3978
<3978=3985,3984,3979
<3979=3983,3980
<3980=3982,3981
<3986=4068,4057,4049,4038,4030,4019,3987
<3987=3988
<3988=4018,3989
<3989=4014,3990
<3990=4012,4003,4001,3997,3993,3991
<3991=3992
<3993=3994
<3994=3996,3995
<3997=3998
<3998=4000,3999
<4001=4002
<4003=4004
<4004=4010,4005
<4005=4006
<4006=4007
<4007=4009,4008
<4010=4011
<4012=4013
<4014=4015
<4015=4017,4016
<4019=4020
<4020=4024,4021
<4021=4022
<4022=4023
<4024=4025
<4025=4027,4026
<4027=4029,4028
<4030=4031
<4031=4035,4032
<4032=4034,4033
<4035=4037,4036
<4038=4039
<4039=4043,4040
<4040=4041
<4041=4042
<4043=4044
<4044=4046,4045
<4046=4048,4047
<4049=4050
<4050=4054,4051
<4051=4053,4052
<4054=4056,4055
<4057=4058
<4058=4065,4059
<4059=4061,4060
<4061=4062
<4062=4064,4063
<4065=4067,4066
<4068=4069
<4069=4071,4070
<4071=4073,4072
<4074=4075
<4075=4103,4076
<4076=4089,4077
<4077=4085,4078
<4078=4083,4081,4079
<4079=4080
<4081=4082
<4083=4084
<4085=4086
<4086=4088,4087
<4089=4099,4090
<4090=4097,4095,4093,4091
<4091=4092
<4093=4094
<4095=4096
<4097=4098
<4099=4100
<4100=4102,4101
<4104=4105
<4105=4107,4106
<4108=4109
<4109=4111,4110
<4112=4113
<4113=4115,4114
<4116=4117
<4117=4119,4118
<4119=4120
<4120=4122,4121
<4133=4134
<4134=4136,4135
<4137=4138
<4138=4150,4149,4139
<4139=4148,4140
<4140=4144,4141
<4141=4142
<4142=4143
<4144=4145
<4145=4147,4146
<4151=4152
<4152=4157,4156,4153
<4153=4155,4154
<4191=4200,4199,4192
<4192=4196,4193
<4193=4195,4194
<4196=4198,4197
<4200=4519,4505,4241,4203,4201
<4201=4202
<4203=4237,4204
<4204=4228,4212,4205
<4205=4206
<4206=4210,4207
<4207=4208
<4208=4209
<4210=4211
<4212=4213
<4213=4226,4214
<4214=4217,4215
<4215=4216
<4217=4218
<4218=4220,4219
<4220=4222,4221
<4222=4223
<4223=4225,4224
<4226=4227
<4228=4229
<4229=4236,4235,4230
<4230=4234,4231
<4231=4233,4232
<4237=4238
<4238=4240,4239
<4241=4501,4242
<4242=4500,4499,4498,4497,4496,4495,4494,4493,4492,4491,4250,4243
<4243=4244
<4244=4246,4245
<4246=4247
<4247=4249,4248
<4250=4484,4251
<4251=4480,4476,4472,4468,4272,4252
<4252=4253
<4253=4271,4254
<4254=4269,4263,4255
<4255=4257,4256
<4257=4259,4258
<4259=4260
<4260=4262,4261
<4263=4265,4264
<4265=4266
<4266=4268,4267
<4269=4270
<4272=4438,4273
<4273=4432,4391,4274
<4274=4389,4275
<4275=4383,4372,4366,4355,4287,4276
<4276=4277
<4277=4281,4278
<4278=4279
<4279=4280
<4281=4282
<4282=4284,4283
<4284=4286,4285
<4287=4303,4296,4288
<4288=4289
<4289=4290
<4290=4291
<4291=4293,4292
<4293=4295,4294
<4296=4297
<4297=4298
<4298=4300,4299
<4300=4302,4301
<4303=4304
<4304=4343,4305
<4305=4331,4306
<4306=4319,4307
<4307=4309,4308
<4309=4311,4310
<4311=4312
<4312=4314,4313
<4314=4316,4315
<4316=4318,4317
<4319=4321,4320
<4321=4323,4322
<4323=4324
<4324=4326,4325
<4326=4328,4327
<4328=4330,4329
<4331=4333,4332
<4333=4335,4334
<4335=4336
<4336=4338,4337
<4338=4340,4339
<4340=4342,4341
<4343=4345,4344
<4345=4347,4346
<4347=4348
<4348=4350,4349
<4350=4352,4351
<4352=4354,4353
<4355=4356
<4356=4360,4357
<4357=4358
<4358=4359
<4360=4361
<4361=4363,4362
<4363=4365,4364
<4366=4367
<4367=4369,4368
<4369=4371,4370
<4372=4373
<4373=4380,4374
<4374=4376,4375
<4376=4377
<4377=4379,4378
<4380=4382,4381
<4383=4384
<4384=4386,4385
<4386=4388,4387
<4389=4390
<4391=4392
<4392=4431,4393
<4393=4423,4394
<4394=4419,4395
<4395=4417,4408,4406,4402,4398,4396
<4396=4397
<4398=4399
<4399=4401,4400
<4402=4403
<4403=4405,4404
<4406=4407
<4408=4409
<4409=4415,4410
<4410=4411
<4411=4412
<4412=4414,4413
<4415=4416
<4417=4418
<4419=4420
<4420=4422,4421
<4423=4427,4424
<4424=4425
<4425=4426
<4427=4428
<4428=4430,4429
<4432=4433
<4433=4437,4434
<4434=4436,4435
<4438=4439
<4439=4467,4440
<4440=4453,4441
<4441=4449,4442
<4442=4447,4445,4443
<4443=4444
<4445=4446
<4447=4448
<4449=4450
<4450=4452,4451
<4453=4463,4454
<4454=4461,4459,4457,4455
<4455=4456
<4457=4458
<4459=4460
<4461=4462
<4463=4464
<4464=4466,4465
<4468=4469
<4469=4471,4470
<4472=4473
<4473=4475,4474
<4476=4477
<4477=4479,4478
<4480=4481
<4481=4483,4482
<4484=4485
<4485=4487,4486
<4487=4488
<4488=4490,4489
<4501=4502
<4502=4504,4503
<4505=4506
<4506=4518,4517,4507
<4507=4516,4508
<4508=4512,4509
<4509=4510
<4510=4511
<4512=4513
<4513=4515,4514
<4519=4520
<4520=4525,4524,4521
<4521=4523,4522
<4567=4579,4578,4568
<4568=4575,4572,4569
<4569=4571,4570
<4572=4574,4573
<4575=4577,4576
<4579=5867,5863,5854,5850,5841,5837,5828,5824,5815,5732,5669,5655,5011,4582,4580
<4580=4581
<4582=5007,4979,4583
<4583=4584
<4584=4885,4782,4688,4585
<4585=4676,4586
<4586=4669,4587
<4587=4657,4653,4652,4651,4650,4649,4648,4647,4645,4625,4612,4602,4588
<4588=4589
<4589=4593,4590
<4590=4591
<4591=4592
<4593=4594
<4594=4596,4595
<4596=4598,4597
<4598=4599
<4599=4601,4600
<4602=4603
<4603=4607,4604
<4604=4606,4605
<4607=4609,4608
<4609=4611,4610
<4612=4613
<4613=4623,4614
<4614=4617,4615
<4615=4616
<4617=4618
<4618=4620,4619
<4620=4622,4621
<4623=4624
<4625=4626
<4626=4643,4627
<4627=4637,4628
<4628=4629
<4629=4635,4630
<4630=4631
<4631=4632
<4632=4634,4633
<4635=4636
<4637=4638
<4638=4640,4639
<4640=4642,4641
<4643=4644
<4645=4646
<4653=4654
<4654=4656,4655
<4657=4658
<4658=4668,4667,4659
<4659=4666,4660
<4660=4662,4661
<4662=4663
<4663=4665,4664
<4669=4670
<4670=4672,4671
<4672=4673
<4673=4675,4674
<4676=4677
<4677=4687,4686,4678
<4678=4685,4679
<4679=4681,4680
<4681=4682
<4682=4684,4683
<4688=4770,4689
<4689=4763,4690
<4690=4756,4752,4751,4750,4749,4748,4747,4746,4744,4726,4713,4705,4691
<4691=4692
<4692=4696,4693
<4693=4694
<4694=4695
<4696=4697
<4697=4699,4698
<4699=4701,4700
<4701=4702
<4702=4704,4703
<4705=4706
<4706=4708,4707
<4708=4710,4709
<4710=4712,4711
<4713=4714
<4714=4724,4715
<4715=4718,4716
<4716=4717
<4718=4719
<4719=4721,4720
<4721=4723,4722
<4724=4725
<4726=4727
<4727=4742,4728
<4728=4736,4729
<4729=4730
<4730=4732,4731
<4732=4733
<4733=4735,4734
<4736=4737
<4737=4739,4738
<4739=4741,4740
<4742=4743
<4744=4745
<4752=4753
<4753=4755,4754
<4756=4757
<4757=4759,4758
<4759=4760
<4760=4762,4761
<4763=4764
<4764=4766,4765
<4766=4767
<4767=4769,4768
<4770=4771
<4771=4781,4780,4772
<4772=4779,4773
<4773=4775,4774
<4775=4776
<4776=4778,4777
<4782=4873,4783
<4783=4866,4784
<4784=4854,4850,4849,4848,4847,4846,4845,4844,4842,4822,4809,4799,4785
<4785=4786
<4786=4790,4787
<4787=4788
<4788=4789
<4790=4791
<4791=4793,4792
<4793=4795,4794
<4795=4796
<4796=4798,4797
<4799=4800
<4800=4804,4801
<4801=4803,4802
<4804=4806,4805
<4806=4808,4807
<4809=4810
<4810=4820,4811
<4811=4814,4812
<4812=4813
<4814=4815
<4815=4817,4816
<4817=4819,4818
<4820=4821
<4822=4823
<4823=4840,4824
<4824=4834,4825
<4825=4826
<4826=4832,4827
<4827=4828
<4828=4829
<4829=4831,4830
<4832=4833
<4834=4835
<4835=4837,4836
<4837=4839,4838
<4840=4841
<4842=4843
<4850=4851
<4851=4853,4852
<4854=4855
<4855=4865,4864,4856
<4856=4863,4857
<4857=4859,4858
<4859=4860
<4860=4862,4861
<4866=4867
<4867=4869,4868
<4869=4870
<4870=4872,4871
<4873=4874
<4874=4884,4883,4875
<4875=4882,4876
<4876=4878,4877
<4878=4879
<4879=4881,4880
<4885=4967,4886
<4886=4960,4887
<4887=4953,4949,4948,4947,4946,4945,4944,4943,4941,4923,4910,4902,4888
<4888=4889
<4889=4893,4890
<4890=4891
<4891=4892
<4893=4894
<4894=4896,4895
<4896=4898,4897
<4898=4899
<4899=4901,4900
<4902=4903
<4903=4905,4904
<4905=4907,4906
<4907=4909,4908
<4910=4911
<4911=4921,4912
<4912=4915,4913
<4913=4914
<4915=4916
<4916=4918,4917
<4918=4920,4919
<4921=4922
<4923=4924
<4924=4939,4925
<4925=4933,4926
<4926=4927
<4927=4929,4928
<4929=4930
<4930=4932,4931
<4933=4934
<4934=4936,4935
<4936=4938,4937
<4939=4940
<4941=4942
<4949=4950
<4950=4952,4951
<4953=4954
<4954=4956,4955
<4956=4957
<4957=4959,4958
<4960=4961
<4961=4963,4962
<4963=4964
<4964=4966,4965
<4967=4968
<4968=4978,4977,4969
<4969=4976,4970
<4970=4972,4971
<4972=4973
<4973=4975,4974
<4979=4998,4987,4980
<4980=4981
<4981=4985,4982
<4982=4983
<4983=4984
<4985=4986
<4987=4988
<4988=4990,4989
<4990=4992,4991
<4992=4994,4993
<4994=4995
<4995=4997,4996
<4998=4999
<4999=5006,5005,5000
<5000=5004,5001
<5001=5003,5002
<5007=5008
<5008=5010,5009
<5011=5651,5012
<5012=5650,5649,5648,5647,5646,5645,5644,5643,5642,5641,5020,5013
<5013=5014
<5014=5016,5015
<5016=5017
<5017=5019,5018
<5020=5632,5021
<5021=5628,5619,5606,5593,5578,5563,5559,5550,5537,5524,5509,5494,5482,5294,5282,5125,5070,5042,5022
<5022=5023
<5023=5041,5024
<5024=5039,5033,5025
<5025=5027,5026
<5027=5029,5028
<5029=5030
<5030=5032,5031
<5033=5035,5034
<5035=5036
<5036=5038,5037
<5039=5040
<5042=5068,5043
<5043=5044
<5044=5045
<5045=5067,5046
<5046=5063,5047
<5047=5061,5059,5050,5048
<5048=5049
<5050=5051
<5051=5053,5052
<5053=5054
<5054=5056,5055
<5056=5058,5057
<5059=5060
<5061=5062
<5063=5064
<5064=5066,5065
<5068=5069
<5070=5071
<5071=5124,5072
<5072=5114,5073
<5073=5104,5074
<5074=5094,5075
<5075=5084,5076
<5076=5080,5077
<5077=5078
<5078=5079
<5080=5081
<5081=5083,5082
<5084=5090,5085
<5085=5088,5086
<5086=5087
<5088=5089
<5090=5091
<5091=5093,5092
<5094=5100,5095
<5095=5098,5096
<5096=5097
<5098=5099
<5100=5101
<5101=5103,5102
<5104=5110,5105
<5105=5108,5106
<5106=5107
<5108=5109
<5110=5111
<5111=5113,5112
<5114=5120,5115
<5115=5118,5116
<5116=5117
<5118=5119
<5120=5121
<5121=5123,5122
<5125=5273,5126
<5126=5261,5254,5238,5226,5208,5195,5155,5141,5127
<5127=5128
<5128=5137,5129
<5129=5130
<5130=5131
<5131=5133,5132
<5133=5134
<5134=5136,5135
<5137=5138
<5138=5140,5139
<5141=5142
<5142=5154,5153,5143
<5143=5152,5144
<5144=5146,5145
<5146=5147
<5147=5149,5148
<5149=5151,5150
<5155=5156
<5156=5194,5157
<5157=5177,5158
<5158=5173,5159
<5159=5171,5162,5160
<5160=5161
<5162=5163
<5163=5169,5164
<5164=5165
<5165=5166
<5166=5168,5167
<5169=5170
<5171=5172
<5173=5174
<5174=5176,5175
<5177=5190,5178
<5178=5183,5181,5179
<5179=5180
<5181=5182
<5183=5184
<5184=5186,5185
<5186=5187
<5187=5189,5188
<5190=5191
<5191=5193,5192
<5195=5196
<5196=5205,5197
<5197=5199,5198
<5199=5200
<5200=5202,5201
<5202=5204,5203
<5205=5207,5206
<5208=5209
<5209=5224,5210
<5210=5220,5211
<5211=5212
<5212=5218,5213
<5213=5214
<5214=5215
<5215=5217,5216
<5218=5219
<5220=5221
<5221=5223,5222
<5224=5225
<5226=5227
<5227=5237,5236,5228
<5228=5235,5229
<5229=5231,5230
<5231=5232
<5232=5234,5233
<5238=5239
<5239=5253,5252,5240
<5240=5251,5241
<5241=5249,5242
<5242=5245,5243
<5243=5244
<5245=5246
<5246=5248,5247
<5249=5250
<5254=5255
<5255=5260,5259,5256
<5256=5258,5257
<5261=5262
<5262=5272,5271,5263
<5263=5270,5264
<5264=5266,5265
<5266=5267
<5267=5269,5268
<5273=5274
<5274=5281,5275
<5275=5277,5276
<5277=5278
<5278=5280,5279
<5282=5283
<5283=5293,5292,5284
<5284=5291,5285
<5285=5287,5286
<5287=5288
<5288=5290,5289
<5294=5473,5295
<5295=5461,5454,5438,5426,5425,5424,5423,5422,5421,5420,5419,5418,5417,5416,5415,5414,5413,5412,5411,5410,5409,5408,5407,5406,5405,5404,5403,5402,5401,5400,5399,5398,5397,5396,5395,5394,5393,5392,5376,5363,5310,5296
<5296=5297
<5297=5306,5298
<5298=5299
<5299=5300
<5300=5302,5301
<5302=5303
<5303=5305,5304
<5306=5307
<5307=5309,5308
<5310=5311
<5311=5362,5312
<5312=5345,5313
<5313=5341,5314
<5314=5339,5328,5317,5315
<5315=5316
<5317=5318
<5318=5326,5319
<5319=5320
<5320=5321
<5321=5323,5322
<5323=5325,5324
<5326=5327
<5328=5329
<5329=5337,5330
<5330=5331
<5331=5332
<5332=5334,5333
<5334=5336,5335
<5337=5338
<5339=5340
<5341=5342
<5342=5344,5343
<5345=5358,5346
<5346=5351,5349,5347
<5347=5348
<5349=5350
<5351=5352
<5352=5354,5353
<5354=5355
<5355=5357,5356
<5358=5359
<5359=5361,5360
<5363=5364
<5364=5373,5365
<5365=5367,5366
<5367=5368
<5368=5370,5369
<5370=5372,5371
<5373=5375,5374
<5376=5377
<5377=5390,5378
<5378=5386,5379
<5379=5380
<5380=5382,5381
<5382=5383
<5383=5385,5384
<5386=5387
<5387=5389,5388
<5390=5391
<5426=5427
<5427=5437,5436,5428
<5428=5435,5429
<5429=5431,5430
<5431=5432
<5432=5434,5433
<5438=5439
<5439=5453,5452,5440
<5440=5451,5441
<5441=5449,5442
<5442=5445,5443
<5443=5444
<5445=5446
<5446=5448,5447
<5449=5450
<5454=5455
<5455=5460,5459,5456
<5456=5458,5457
<5461=5462
<5462=5472,5471,5463
<5463=5470,5464
<5464=5466,5465
<5466=5467
<5467=5469,5468
<5473=5474
<5474=5481,5475
<5475=5477,5476
<5477=5478
<5478=5480,5479
<5482=5483
<5483=5493,5492,5484
<5484=5491,5485
<5485=5487,5486
<5487=5488
<5488=5490,5489
<5494=5495
<5495=5505,5496
<5496=5499,5497
<5497=5498
<5499=5500
<5500=5502,5501
<5502=5504,5503
<5505=5506
<5506=5508,5507
<5509=5510
<5510=5520,5511
<5511=5514,5512
<5512=5513
<5514=5515
<5515=5517,5516
<5517=5519,5518
<5520=5521
<5521=5523,5522
<5524=5525
<5525=5529,5526
<5526=5527
<5527=5528
<5529=5530
<5530=5532,5531
<5532=5534,5533
<5534=5536,5535
<5537=5538
<5538=5542,5539
<5539=5540
<5540=5541
<5542=5543
<5543=5545,5544
<5545=5547,5546
<5547=5549,5548
<5550=5551
<5551=5555,5552
<5552=5553
<5553=5554
<5555=5556
<5556=5558,5557
<5559=5560
<5560=5562,5561
<5563=5564
<5564=5574,5565
<5565=5568,5566
<5566=5567
<5568=5569
<5569=5571,5570
<5571=5573,5572
<5574=5575
<5575=5577,5576
<5578=5579
<5579=5589,5580
<5580=5583,5581
<5581=5582
<5583=5584
<5584=5586,5585
<5586=5588,5587
<5589=5590
<5590=5592,5591
<5593=5594
<5594=5598,5595
<5595=5596
<5596=5597
<5598=5599
<5599=5601,5600
<5601=5603,5602
<5603=5605,5604
<5606=5607
<5607=5611,5608
<5608=5609
<5609=5610
<5611=5612
<5612=5614,5613
<5614=5616,5615
<5616=5618,5617
<5619=5620
<5620=5624,5621
<5621=5622
<5622=5623
<5624=5625
<5625=5627,5626
<5628=5629
<5629=5631,5630
<5632=5633
<5633=5640,5634
<5634=5636,5635
<5636=5637
<5637=5639,5638
<5651=5652
<5652=5654,5653
<5655=5656
<5656=5668,5667,5657
<5657=5666,5658
<5658=5662,5659
<5659=5660
<5660=5661
<5662=5663
<5663=5665,5664
<5669=5716,5670
<5670=5709,5671
<5671=5697,5683,5672
<5672=5673
<5673=5675,5674
<5675=5682,5676
<5676=5678,5677
<5678=5679
<5679=5681,5680
<5683=5684
<5684=5696,5695,5685
<5685=5694,5686
<5686=5688,5687
<5688=5689
<5689=5691,5690
<5691=5693,5692
<5697=5698
<5698=5708,5707,5699
<5699=5706,5700
<5700=5702,5701
<5702=5703
<5703=5705,5704
<5709=5710
<5710=5712,5711
<5712=5713
<5713=5715,5714
<5716=5717
<5717=5731,5730,5718
<5718=5729,5719
<5719=5721,5720
<5721=5722
<5722=5724,5723
<5724=5726,5725
<5726=5728,5727
<5732=5799,5733
<5733=5792,5734
<5734=5780,5779,5778,5777,5776,5775,5774,5773,5772,5771,5770,5769,5768,5767,5766,5765,5764,5763,5762,5761,5760,5759,5758,5757,5756,5755,5754,5753,5752,5751,5750,5749,5748,5747,5746,5735
<5735=5736
<5736=5738,5737
<5738=5745,5739
<5739=5741,5740
<5741=5742
<5742=5744,5743
<5780=5781
<5781=5791,5790,5782
<5782=5789,5783
<5783=5785,5784
<5785=5786
<5786=5788,5787
<5792=5793
<5793=5795,5794
<5795=5796
<5796=5798,5797
<5799=5800
<5800=5814,5813,5801
<5801=5812,5802
<5802=5804,5803
<5804=5805
<5805=5807,5806
<5807=5809,5808
<5809=5811,5810
<5815=5816
<5816=5820,5817
<5817=5818
<5818=5819
<5820=5821
<5821=5823,5822
<5824=5825
<5825=5827,5826
<5828=5829
<5829=5833,5830
<5830=5831
<5831=5832
<5833=5834
<5834=5836,5835
<5837=5838
<5838=5840,5839
<5841=5842
<5842=5846,5843
<5843=5844
<5844=5845
<5846=5847
<5847=5849,5848
<5850=5851
<5851=5853,5852
<5854=5855
<5855=5859,5856
<5856=5857
<5857=5858
<5859=5860
<5860=5862,5861
<5863=5864
<5864=5866,5865
<5867=5868
<5868=5873,5872,5869
<5869=5871,5870
<5977=5983,5982,5978
<5978=5979
<5979=5981,5980
<5983=6190,6176,6031,5986,5984
<5984=5985
<5986=6027,5999,5987
<5987=5988
<5988=5998,5997,5996,5995,5994,5993,5992,5991,5990,5989
<5999=6018,6007,6000
<6000=6001
<6001=6005,6002
<6002=6003
<6003=6004
<6005=6006
<6007=6008
<6008=6010,6009
<6010=6012,6011
<6012=6014,6013
<6014=6015
<6015=6017,6016
<6018=6019
<6019=6026,6025,6020
<6020=6024,6021
<6021=6023,6022
<6027=6028
<6028=6030,6029
<6031=6172,6032
<6032=6171,6170,6169,6168,6167,6166,6165,6164,6163,6162,6040,6033
<6033=6034
<6034=6036,6035
<6036=6037
<6037=6039,6038
<6040=6153,6041
<6041=6146,6139,6062,6042
<6042=6043
<6043=6061,6044
<6044=6059,6053,6045
<6045=6047,6046
<6047=6049,6048
<6049=6050
<6050=6052,6051
<6053=6055,6054
<6055=6056
<6056=6058,6057
<6059=6060
<6062=6063
<6063=6138,6064
<6064=6124,6065
<6065=6110,6066
<6066=6096,6067
<6067=6082,6068
<6068=6078,6069
<6069=6076,6074,6072,6070
<6070=6071
<6072=6073
<6074=6075
<6076=6077
<6078=6079
<6079=6081,6080
<6082=6092,6083
<6083=6090,6088,6086,6084
<6084=6085
<6086=6087
<6088=6089
<6090=6091
<6092=6093
<6093=6095,6094
<6096=6106,6097
<6097=6104,6102,6100,6098
<6098=6099
<6100=6101
<6102=6103
<6104=6105
<6106=6107
<6107=6109,6108
<6110=6120,6111
<6111=6118,6116,6114,6112
<6112=6113
<6114=6115
<6116=6117
<6118=6119
<6120=6121
<6121=6123,6122
<6124=6134,6125
<6125=6132,6130,6128,6126
<6126=6127
<6128=6129
<6130=6131
<6132=6133
<6134=6135
<6135=6137,6136
<6139=6140
<6140=6145,6144,6141
<6141=6143,6142
<6146=6147
<6147=6152,6151,6148
<6148=6150,6149
<6153=6154
<6154=6161,6155
<6155=6157,6156
<6157=6158
<6158=6160,6159
<6172=6173
<6173=6175,6174
<6176=6177
<6177=6189,6188,6178
<6178=6187,6179
<6179=6183,6180
<6180=6181
<6181=6182
<6183=6184
<6184=6186,6185
<6190=6191
<6191=6196,6195,6192
<6192=6194,6193
<6225=6237,6236,6226
<6226=6233,6230,6227
<6227=6229,6228
<6230=6232,6231
<6233=6235,6234
<6237=6284,6270,6240,6238
<6238=6239
<6240=6266,6241
<6241=6249,6242
<6242=6243
<6243=6245,6244
<6245=6246
<6246=6248,6247
<6249=6250
<6250=6265,6251
<6251=6261,6252
<6252=6259,6257,6255,6253
<6253=6254
<6255=6256
<6257=6258
<6259=6260
<6261=6262
<6262=6264,6263
<6266=6267
<6267=6269,6268
<6270=6271
<6271=6283,6282,6272
<6272=6281,6273
<6273=6277,6274
<6274=6275
<6275=6276
<6277=6278
<6278=6280,6279
<6284=6285
<6285=6290,6289,6286
<6286=6288,6287
<6306=6318,6317,6307
<6307=6314,6311,6308
<6308=6310,6309
<6311=6313,6312
<6314=6316,6315
<6318=6363,6349,6321,6319
<6319=6320
<6321=6345,6322
<6322=6330,6323
<6323=6324
<6324=6326,6325
<6326=6327
<6327=6329,6328
<6330=6331
<6331=6344,6332
<6332=6340,6333
<6333=6338,6336,6334
<6334=6335
<6336=6337
<6338=6339
<6340=6341
<6341=6343,6342
<6345=6346
<6346=6348,6347
<6349=6350
<6350=6362,6361,6351
<6351=6360,6352
<6352=6356,6353
<6353=6354
<6354=6355
<6356=6357
<6357=6359,6358
<6363=6364
<6364=6369,6368,6365
<6365=6367,6366
<6385=6391,6390,6386
<6386=6387
<6387=6389,6388
<6391=6936,6915,6914,6913,6912,6911,6910,6909,6908,6907,6906,6905,6898,6891,6877,6851,6425,6392
<6392=6421,6393
<6393=6420,6419,6418,6417,6416,6415,6414,6413,6412,6411,6410,6409,6408,6407,6406,6405,6404,6403,6402,6401,6400,6399,6398,6397,6396,6395,6394
<6421=6422
<6422=6424,6423
<6425=6802,6426
<6426=6790,6786,6785,6784,6783,6782,6781,6780,6779,6778,6777,6776,6775,6771,6754,6427
<6427=6752,6428
<6428=6429
<6429=6741,6728,6430
<6430=6431
<6431=6724,6702,6696,6690,6684,6678,6672,6668,6659,6648,6642,6432
<6432=6640,6433
<6433=6631,6565,6558,6434
<6434=6556,6435
<6435=6552,6546,6540,6539,6538,6537,6536,6535,6534,6533,6532,6531,6530,6529,6528,6527,6526,6525,6524,6523,6522,6521,6520,6519,6518,6517,6499,6486,6480,6469,6450,6436
<6436=6437
<6437=6441,6438
<6438=6439
<6439=6440
<6441=6442
<6442=6444,6443
<6444=6446,6445
<6446=6447
<6447=6449,6448
<6450=6451
<6451=6455,6452
<6452=6453
<6453=6454
<6455=6456
<6456=6458,6457
<6458=6460,6459
<6460=6461
<6461=6463,6462
<6463=6465,6464
<6465=6466
<6466=6468,6467
<6469=6470
<6470=6478,6471
<6471=6474,6472
<6472=6473
<6474=6475
<6475=6477,6476
<6478=6479
<6480=6481
<6481=6483,6482
<6483=6485,6484
<6486=6487
<6487=6498,6497,6488
<6488=6496,6489
<6489=6491,6490
<6491=6493,6492
<6493=6495,6494
<6499=6500
<6500=6516,6501
<6501=6507,6502
<6502=6505,6503
<6503=6504
<6505=6506
<6507=6508
<6508=6510,6509
<6510=6512,6511
<6512=6513
<6513=6515,6514
<6540=6541
<6541=6543,6542
<6543=6545,6544
<6546=6547
<6547=6549,6548
<6549=6551,6550
<6552=6553
<6553=6555,6554
<6556=6557
<6558=6559
<6559=6561,6560
<6561=6562
<6562=6564,6563
<6565=6629,6566
<6566=6616,6587,6567
<6567=6568
<6568=6586,6569
<6569=6584,6578,6570
<6570=6572,6571
<6572=6574,6573
<6574=6575
<6575=6577,6576
<6578=6580,6579
<6580=6581
<6581=6583,6582
<6584=6585
<6587=6610,6588
<6588=6589
<6589=6590
<6590=6609,6591
<6591=6605,6592
<6592=6603,6601,6599,6597,6595,6593
<6593=6594
<6595=6596
<6597=6598
<6599=6600
<6601=6602
<6603=6604
<6605=6606
<6606=6608,6607
<6610=6611
<6611=6615,6612
<6612=6614,6613
<6616=6617
<6617=6628,6618
<6618=6624,6619
<6619=6622,6620
<6620=6621
<6622=6623
<6624=6625
<6625=6627,6626
<6629=6630
<6631=6632
<6632=6639,6633
<6633=6635,6634
<6635=6636
<6636=6638,6637
<6640=6641
<6642=6643
<6643=6647,6644
<6644=6646,6645
<6648=6649
<6649=6658,6650
<6650=6654,6651
<6651=6652
<6652=6653
<6654=6655
<6655=6657,6656
<6659=6660
<6660=6664,6661
<6661=6662
<6662=6663
<6664=6665
<6665=6667,6666
<6668=6669
<6669=6671,6670
<6672=6673
<6673=6675,6674
<6675=6677,6676
<6678=6679
<6679=6681,6680
<6681=6683,6682
<6684=6685
<6685=6687,6686
<6687=6689,6688
<6690=6691
<6691=6693,6692
<6693=6695,6694
<6696=6697
<6697=6699,6698
<6699=6701,6700
<6702=6703
<6703=6722,6704
<6704=6718,6705
<6705=6706
<6706=6716,6707
<6707=6708
<6708=6709
<6709=6711,6710
<6711=6713,6712
<6713=6715,6714
<6716=6717
<6718=6719
<6719=6721,6720
<6722=6723
<6724=6725
<6725=6727,6726
<6728=6740,6739,6738,6737,6736,6735,6734,6733,6732,6731,6730,6729
<6741=6742
<6742=6744,6743
<6744=6746,6745
<6746=6747
<6747=6749,6748
<6749=6751,6750
<6752=6753
<6754=6755
<6755=6770,6756
<6756=6766,6757
<6757=6762,6760,6758
<6758=6759
<6760=6761
<6762=6763
<6763=6765,6764
<6766=6767
<6767=6769,6768
<6771=6772
<6772=6774,6773
<6786=6787
<6787=6789,6788
<6790=6791
<6791=6801,6800,6792
<6792=6799,6793
<6793=6795,6794
<6795=6796
<6796=6798,6797
<6802=6803
<6803=6850,6804
<6804=6842,6805
<6805=6834,6806
<6806=6824,6807
<6807=6823,6808
<6808=6821,6809
<6809=6810
<6810=6811
<6811=6819,6812
<6812=6813
<6813=6814
<6814=6816,6815
<6816=6818,6817
<6819=6820
<6821=6822
<6824=6826,6825
<6826=6827
<6827=6829,6828
<6829=6831,6830
<6831=6833,6832
<6834=6841,6835
<6835=6837,6836
<6837=6838
<6838=6840,6839
<6842=6849,6843
<6843=6847,6844
<6844=6845
<6845=6846
<6847=6848
<6851=6873,6852
<6852=6860,6853
<6853=6854
<6854=6856,6855
<6856=6857
<6857=6859,6858
<6860=6861
<6861=6872,6862
<6862=6868,6863
<6863=6866,6864
<6864=6865
<6866=6867
<6868=6869
<6869=6871,6870
<6873=6874
<6874=6876,6875
<6877=6878
<6878=6890,6889,6879
<6879=6888,6880
<6880=6884,6881
<6881=6882
<6882=6883
<6884=6885
<6885=6887,6886
<6891=6892
<6892=6897,6896,6893
<6893=6895,6894
<6898=6899
<6899=6904,6903,6900
<6900=6902,6901
<6915=6916
<6916=6935,6934,6917
<6917=6933,6918
<6918=6924,6919
<6919=6922,6920
<6920=6921
<6922=6923
<6924=6925
<6925=6927,6926
<6927=6929,6928
<6929=6930
<6930=6932,6931
<6936=6937
<6937=6951,6950,6938
<6938=6949,6939
<6939=6947,6940
<6940=6941
<6941=6942
<6942=6944,6943
<6944=6946,6945
<6947=6948
<7015=7021,7020,7016
<7016=7017
<7017=7019,7018
<7021=7227,7206,7022
<7022=7186,7023
<7023=7182,7166,7155,7154,7153,7152,7151,7150,7149,7148,7147,7146,7145,7144,7143,7142,7141,7140,7139,7138,7137,7136,7135,7134,7133,7132,7131,7130,7129,7128,7127,7126,7125,7124,7123,7122,7121,7120,7119,7118,7100,7094,7079,7024
<7024=7070,7051,7025
<7025=7026
<7026=7027
<7027=7028
<7028=7049,7029
<7029=7047,7045,7030
<7030=7031
<7031=7033,7032
<7033=7034
<7034=7036,7035
<7036=7043,7037
<7037=7038
<7038=7039
<7039=7041,7040
<7041=7042
<7043=7044
<7045=7046
<7047=7048
<7049=7050
<7051=7052
<7052=7053
<7053=7068,7054
<7054=7066,7064,7055
<7055=7056
<7056=7062,7057
<7057=7058
<7058=7059
<7059=7061,7060
<7062=7063
<7064=7065
<7066=7067
<7068=7069
<7070=7071
<7071=7077,7072
<7072=7075,7073
<7073=7074
<7075=7076
<7077=7078
<7079=7080
<7080=7091,7081
<7081=7089,7082
<7082=7083
<7083=7084
<7084=7086,7085
<7086=7088,7087
<7089=7090
<7091=7093,7092
<7094=7095
<7095=7097,7096
<7097=7099,7098
<7100=7101
<7101=7116,7102
<7102=7112,7103
<7103=7104
<7104=7110,7105
<7105=7106
<7106=7107
<7107=7109,7108
<7110=7111
<7112=7113
<7113=7115,7114
<7116=7117
<7155=7156
<7156=7160,7157
<7157=7158
<7158=7159
<7160=7161
<7161=7163,7162
<7163=7165,7164
<7166=7167
<7167=7181,7180,7168
<7168=7179,7169
<7169=7171,7170
<7171=7172
<7172=7174,7173
<7174=7176,7175
<7176=7178,7177
<7182=7183
<7183=7185,7184
<7186=7187
<7187=7198,7188
<7188=7190,7189
<7190=7191
<7191=7193,7192
<7193=7195,7194
<7195=7197,7196
<7198=7205,7199
<7199=7201,7200
<7201=7202
<7202=7204,7203
<7206=7207
<7207=7226,7225,7208
<7208=7224,7209
<7209=7215,7210
<7210=7213,7211
<7211=7212
<7213=7214
<7215=7216
<7216=7218,7217
<7218=7220,7219
<7220=7221
<7221=7223,7222
<7227=7228
<7228=7242,7241,7229
<7229=7240,7230
<7230=7238,7231
<7231=7232
<7232=7233
<7233=7235,7234
<7235=7237,7236
<7238=7239
<7276=7282,7281,7277
<7277=7278
<7278=7280,7279
<7282=7336,7322,7283
<7283=7313,7284
<7284=7309,7303,7285
<7285=7286
<7286=7294,7287
<7287=7290,7288
<7288=7289
<7290=7291
<7291=7293,7292
<7294=7295
<7295=7297,7296
<7297=7299,7298
<7299=7300
<7300=7302,7301
<7303=7304
<7304=7306,7305
<7306=7308,7307
<7309=7310
<7310=7312,7311
<7313=7314
<7314=7321,7315
<7315=7317,7316
<7317=7318
<7318=7320,7319
<7322=7323
<7323=7335,7334,7324
<7324=7333,7325
<7325=7329,7326
<7326=7327
<7327=7328
<7329=7330
<7330=7332,7331
<7336=7337
<7337=7351,7350,7338
<7338=7349,7339
<7339=7347,7340
<7340=7341
<7341=7342
<7342=7344,7343
<7344=7346,7345
<7347=7348
<7372=7378,7377,7373
<7373=7374
<7374=7376,7375
<7378=7432,7418,7379
<7379=7409,7380
<7380=7405,7399,7381
<7381=7382
<7382=7390,7383
<7383=7386,7384
<7384=7385
<7386=7387
<7387=7389,7388
<7390=7391
<7391=7393,7392
<7393=7395,7394
<7395=7396
<7396=7398,7397
<7399=7400
<7400=7402,7401
<7402=7404,7403
<7405=7406
<7406=7408,7407
<7409=7410
<7410=7417,7411
<7411=7413,7412
<7413=7414
<7414=7416,7415
<7418=7419
<7419=7431,7430,7420
<7420=7429,7421
<7421=7425,7422
<7422=7423
<7423=7424
<7425=7426
<7426=7428,7427
<7432=7433
<7433=7447,7446,7434
<7434=7445,7435
<7435=7443,7436
<7436=7437
<7437=7438
<7438=7440,7439
<7440=7442,7441
<7443=7444
