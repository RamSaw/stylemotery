>5	FunctionDef	GDALComputeProximity (GDALRasterBandH hSrcBand , GDALRasterBandH hProximityBand , char * * papszOptions , GDALProgressFunc \
>6	ParameterList	GDALRasterBandH hSrcBand , GDALRasterBandH hProximityBand , char * * papszOptions , GDALProgressFunc pfnProgress , \
>7	Parameter	 
>8	Identifier	pProgressArg
>9	ParameterType	void *
>10	Parameter	 
>11	Identifier	pfnProgress
>12	ParameterType	GDALProgressFunc
>13	Parameter	 
>14	Identifier	papszOptions
>15	ParameterType	char * *
>16	Parameter	 
>17	Identifier	hProximityBand
>18	ParameterType	GDALRasterBandH
>19	Parameter	 
>20	Identifier	hSrcBand
>21	ParameterType	GDALRasterBandH
>22	ReturnType	CPLErr CPL_STDCALL
>23	CompoundStatement	 
>24	ReturnStatement	 
>25	Identifier	eErr
>26	IfStatement	if ( hWorkProximityDS != NULL )
>27	CompoundStatement	 
>28	ExpressionStatement	 
>29	CallExpression	GDALDeleteDataset ( GDALGetDriverByName ( \"GTiff\" ) , osProxFile )
>30	ArgumentList	GDALGetDriverByName ( \"GTiff\" )
>31	Argument	osProxFile
>32	Identifier	osProxFile
>33	Argument	GDALGetDriverByName ( \"GTiff\" )
>34	CallExpression	GDALGetDriverByName ( \"GTiff\" )
>35	ArgumentList	\"GTiff\"
>36	Argument	\"GTiff\"
>37	PrimaryExpression	\"GTiff\"
>38	Callee	GDALGetDriverByName
>39	Identifier	GDALGetDriverByName
>40	Callee	GDALDeleteDataset
>41	Identifier	GDALDeleteDataset
>42	ExpressionStatement	 
>43	CallExpression	GDALClose ( hWorkProximityDS )
>44	ArgumentList	hWorkProximityDS
>45	Argument	hWorkProximityDS
>46	Identifier	hWorkProximityDS
>47	Callee	GDALClose
>48	Identifier	GDALClose
>49	IdentifierDeclStatement	 
>50	IdentifierDecl	osProxFile = GDALGetDescription ( hWorkProximityDS )
>51	AssignmentExpr	osProxFile = GDALGetDescription ( hWorkProximityDS )
>52	CallExpression	GDALGetDescription ( hWorkProximityDS )
>53	ArgumentList	hWorkProximityDS
>54	Argument	hWorkProximityDS
>55	Identifier	hWorkProximityDS
>56	Callee	GDALGetDescription
>57	Identifier	GDALGetDescription
>58	Identifier	osProxFile
>59	Identifier	osProxFile
>60	IdentifierDeclType	CPLString
>61	Condition	 
>62	EqualityExpression	hWorkProximityDS != NULL
>63	Identifier	NULL
>64	Identifier	hWorkProximityDS
>65	ExpressionStatement	 
>66	CallExpression	CPLFree ( panTargetValues )
>67	ArgumentList	panTargetValues
>68	Argument	panTargetValues
>69	Identifier	panTargetValues
>70	Callee	CPLFree
>71	Identifier	CPLFree
>72	ExpressionStatement	 
>73	CallExpression	CPLFree ( pafProximity )
>74	ArgumentList	pafProximity
>75	Argument	pafProximity
>76	Identifier	pafProximity
>77	Callee	CPLFree
>78	Identifier	CPLFree
>79	ExpressionStatement	 
>80	CallExpression	CPLFree ( panSrcScanline )
>81	ArgumentList	panSrcScanline
>82	Argument	panSrcScanline
>83	Identifier	panSrcScanline
>84	Callee	CPLFree
>85	Identifier	CPLFree
>86	ExpressionStatement	 
>87	CallExpression	CPLFree ( panNearY )
>88	ArgumentList	panNearY
>89	Argument	panNearY
>90	Identifier	panNearY
>91	Callee	CPLFree
>92	Identifier	CPLFree
>93	ExpressionStatement	 
>94	CallExpression	CPLFree ( panNearX )
>95	ArgumentList	panNearX
>96	Argument	panNearX
>97	Identifier	panNearX
>98	Callee	CPLFree
>99	Identifier	CPLFree
>100	Label	 
>101	Identifier	end
>102	ForStatement	for ( iLine = nYSize - 1 ; eErr == CE_None && iLine >= 0 ; iLine -- )
>103	CompoundStatement	 
>104	IfStatement	if ( ! pfnProgress ( 0.5 + 0.5 * ( nYSize - iLine ) / ( double ) nYSize , \"\" , pProgressArg ) )
>105	CompoundStatement	 
>106	ExpressionStatement	 
>107	AssignmentExpr	eErr = CE_Failure
>108	Identifier	CE_Failure
>109	Identifier	eErr
>110	ExpressionStatement	 
>111	CallExpression	CPLError ( CE_Failure , CPLE_UserInterrupt , \"User terminated\" )
>112	ArgumentList	CE_Failure
>113	Argument	\"User terminated\"
>114	PrimaryExpression	\"User terminated\"
>115	Argument	CPLE_UserInterrupt
>116	Identifier	CPLE_UserInterrupt
>117	Argument	CE_Failure
>118	Identifier	CE_Failure
>119	Callee	CPLError
>120	Identifier	CPLError
>121	Condition	 
>122	UnaryOp	! pfnProgress ( 0.5 + 0.5 * ( nYSize - iLine ) / ( double ) nYSize , \"\" , pProgressArg )
>123	CallExpression	pfnProgress ( 0.5 + 0.5 * ( nYSize - iLine ) / ( double ) nYSize , \"\" , pProgressArg )
>124	ArgumentList	0.5 + 0.5 * ( nYSize - iLine ) / ( double ) nYSize
>125	Argument	pProgressArg
>126	Identifier	pProgressArg
>127	Argument	\"\"
>128	PrimaryExpression	\"\"
>129	Argument	0.5 + 0.5 * ( nYSize - iLine ) / ( double ) nYSize
>130	AdditiveExpression	0.5 + 0.5 * ( nYSize - iLine ) / ( double ) nYSize
>131	MultiplicativeExpression	0.5 * ( nYSize - iLine ) / ( double ) nYSize
>132	MultiplicativeExpression	( nYSize - iLine ) / ( double ) nYSize
>133	CastExpression	( double ) nYSize
>134	Identifier	nYSize
>135	CastTarget	double
>136	AdditiveExpression	nYSize - iLine
>137	Identifier	iLine
>138	Identifier	nYSize
>139	PrimaryExpression	0.5
>140	PrimaryExpression	0.5
>141	Callee	pfnProgress
>142	Identifier	pfnProgress
>143	UnaryOperator	!
>144	IfStatement	if ( eErr != CE_None )
>145	BreakStatement	 
>146	Condition	 
>147	EqualityExpression	eErr != CE_None
>148	Identifier	CE_None
>149	Identifier	eErr
>150	ExpressionStatement	 
>151	AssignmentExpr	eErr = GDALRasterIO ( hProximityBand , GF_Write , 0 , iLine , nXSize , 1 , pafProximity , nXSize , 1 , \
>152	CallExpression	GDALRasterIO ( hProximityBand , GF_Write , 0 , iLine , nXSize , 1 , pafProximity , nXSize , 1 , GDT_Float32 , 0 , \
>153	ArgumentList	hProximityBand
>154	Argument	0
>155	PrimaryExpression	0
>156	Argument	0
>157	PrimaryExpression	0
>158	Argument	GDT_Float32
>159	Identifier	GDT_Float32
>160	Argument	1
>161	PrimaryExpression	1
>162	Argument	nXSize
>163	Identifier	nXSize
>164	Argument	pafProximity
>165	Identifier	pafProximity
>166	Argument	1
>167	PrimaryExpression	1
>168	Argument	nXSize
>169	Identifier	nXSize
>170	Argument	iLine
>171	Identifier	iLine
>172	Argument	0
>173	PrimaryExpression	0
>174	Argument	GF_Write
>175	Identifier	GF_Write
>176	Argument	hProximityBand
>177	Identifier	hProximityBand
>178	Callee	GDALRasterIO
>179	Identifier	GDALRasterIO
>180	Identifier	eErr
>181	ForStatement	for ( i = 0 ; i < nXSize ; i ++ )
>182	CompoundStatement	 
>183	IfStatement	if ( pafProximity [ i ] < 0.0 )
>184	ElseStatement	else
>185	IfStatement	if ( pafProximity [ i ] > 0.0 )
>186	CompoundStatement	 
>187	IfStatement	if ( bFixedBufVal )
>188	ElseStatement	else
>189	ExpressionStatement	 
>190	AssignmentExpr	pafProximity [ i ] = ( float ) ( pafProximity [ i ] * dfDistMult )
>191	CastExpression	( float ) ( pafProximity [ i ] * dfDistMult )
>192	MultiplicativeExpression	pafProximity [ i ] * dfDistMult
>193	Identifier	dfDistMult
>194	ArrayIndexing	pafProximity [ i ]
>195	Identifier	i
>196	Identifier	pafProximity
>197	CastTarget	float
>198	ArrayIndexing	pafProximity [ i ]
>199	Identifier	i
>200	Identifier	pafProximity
>201	ExpressionStatement	 
>202	AssignmentExpr	pafProximity [ i ] = ( float ) dfFixedBufVal
>203	CastExpression	( float ) dfFixedBufVal
>204	Identifier	dfFixedBufVal
>205	CastTarget	float
>206	ArrayIndexing	pafProximity [ i ]
>207	Identifier	i
>208	Identifier	pafProximity
>209	Condition	 
>210	Identifier	bFixedBufVal
>211	Condition	 
>212	RelationalExpression	pafProximity [ i ] > 0.0
>213	PrimaryExpression	0.0
>214	ArrayIndexing	pafProximity [ i ]
>215	Identifier	i
>216	Identifier	pafProximity
>217	ExpressionStatement	 
>218	AssignmentExpr	pafProximity [ i ] = fNoDataValue
>219	Identifier	fNoDataValue
>220	ArrayIndexing	pafProximity [ i ]
>221	Identifier	i
>222	Identifier	pafProximity
>223	Condition	 
>224	RelationalExpression	pafProximity [ i ] < 0.0
>225	PrimaryExpression	0.0
>226	ArrayIndexing	pafProximity [ i ]
>227	Identifier	i
>228	Identifier	pafProximity
>229	IncDecOp	 
>230	IncDec	++
>231	Identifier	i
>232	Condition	 
>233	RelationalExpression	i < nXSize
>234	Identifier	nXSize
>235	Identifier	i
>236	ForInit	 
>237	AssignmentExpr	i = 0
>238	PrimaryExpression	0
>239	Identifier	i
>240	ExpressionStatement	 
>241	CallExpression	ProcessProximityLine ( panSrcScanline , panNearX , panNearY , TRUE , iLine , nXSize , dfMaxDist , pafProximity , \
>242	ArgumentList	panSrcScanline
>243	Argument	panTargetValues
>244	Identifier	panTargetValues
>245	Argument	nTargetValues
>246	Identifier	nTargetValues
>247	Argument	pafProximity
>248	Identifier	pafProximity
>249	Argument	dfMaxDist
>250	Identifier	dfMaxDist
>251	Argument	nXSize
>252	Identifier	nXSize
>253	Argument	iLine
>254	Identifier	iLine
>255	Argument	TRUE
>256	Identifier	TRUE
>257	Argument	panNearY
>258	Identifier	panNearY
>259	Argument	panNearX
>260	Identifier	panNearX
>261	Argument	panSrcScanline
>262	Identifier	panSrcScanline
>263	Callee	ProcessProximityLine
>264	Identifier	ProcessProximityLine
>265	ExpressionStatement	 
>266	CallExpression	ProcessProximityLine ( panSrcScanline , panNearX , panNearY , FALSE , iLine , nXSize , dfMaxDist , pafProximity , \
>267	ArgumentList	panSrcScanline
>268	Argument	panTargetValues
>269	Identifier	panTargetValues
>270	Argument	nTargetValues
>271	Identifier	nTargetValues
>272	Argument	pafProximity
>273	Identifier	pafProximity
>274	Argument	dfMaxDist
>275	Identifier	dfMaxDist
>276	Argument	nXSize
>277	Identifier	nXSize
>278	Argument	iLine
>279	Identifier	iLine
>280	Argument	FALSE
>281	Identifier	FALSE
>282	Argument	panNearY
>283	Identifier	panNearY
>284	Argument	panNearX
>285	Identifier	panNearX
>286	Argument	panSrcScanline
>287	Identifier	panSrcScanline
>288	Callee	ProcessProximityLine
>289	Identifier	ProcessProximityLine
>290	IfStatement	if ( eErr != CE_None )
>291	BreakStatement	 
>292	Condition	 
>293	EqualityExpression	eErr != CE_None
>294	Identifier	CE_None
>295	Identifier	eErr
>296	ExpressionStatement	 
>297	AssignmentExpr	eErr = GDALRasterIO ( hSrcBand , GF_Read , 0 , iLine , nXSize , 1 , panSrcScanline , nXSize , 1 , GDT_\
>298	CallExpression	GDALRasterIO ( hSrcBand , GF_Read , 0 , iLine , nXSize , 1 , panSrcScanline , nXSize , 1 , GDT_Int32 , 0 , 0 )
>299	ArgumentList	hSrcBand
>300	Argument	0
>301	PrimaryExpression	0
>302	Argument	0
>303	PrimaryExpression	0
>304	Argument	GDT_Int32
>305	Identifier	GDT_Int32
>306	Argument	1
>307	PrimaryExpression	1
>308	Argument	nXSize
>309	Identifier	nXSize
>310	Argument	panSrcScanline
>311	Identifier	panSrcScanline
>312	Argument	1
>313	PrimaryExpression	1
>314	Argument	nXSize
>315	Identifier	nXSize
>316	Argument	iLine
>317	Identifier	iLine
>318	Argument	0
>319	PrimaryExpression	0
>320	Argument	GF_Read
>321	Identifier	GF_Read
>322	Argument	hSrcBand
>323	Identifier	hSrcBand
>324	Callee	GDALRasterIO
>325	Identifier	GDALRasterIO
>326	Identifier	eErr
>327	IfStatement	if ( eErr != CE_None )
>328	BreakStatement	 
>329	Condition	 
>330	EqualityExpression	eErr != CE_None
>331	Identifier	CE_None
>332	Identifier	eErr
>333	ExpressionStatement	 
>334	AssignmentExpr	eErr = GDALRasterIO ( hWorkProximityBand , GF_Read , 0 , iLine , nXSize , 1 , pafProximity , nXSize , \
>335	CallExpression	GDALRasterIO ( hWorkProximityBand , GF_Read , 0 , iLine , nXSize , 1 , pafProximity , nXSize , 1 , GDT_Float32 , \
>336	ArgumentList	hWorkProximityBand
>337	Argument	0
>338	PrimaryExpression	0
>339	Argument	0
>340	PrimaryExpression	0
>341	Argument	GDT_Float32
>342	Identifier	GDT_Float32
>343	Argument	1
>344	PrimaryExpression	1
>345	Argument	nXSize
>346	Identifier	nXSize
>347	Argument	pafProximity
>348	Identifier	pafProximity
>349	Argument	1
>350	PrimaryExpression	1
>351	Argument	nXSize
>352	Identifier	nXSize
>353	Argument	iLine
>354	Identifier	iLine
>355	Argument	0
>356	PrimaryExpression	0
>357	Argument	GF_Read
>358	Identifier	GF_Read
>359	Argument	hWorkProximityBand
>360	Identifier	hWorkProximityBand
>361	Callee	GDALRasterIO
>362	Identifier	GDALRasterIO
>363	Identifier	eErr
>364	IncDecOp	 
>365	IncDec	--
>366	Identifier	iLine
>367	Condition	 
>368	AndExpression	eErr == CE_None && iLine >= 0
>369	RelationalExpression	iLine >= 0
>370	PrimaryExpression	0
>371	Identifier	iLine
>372	EqualityExpression	eErr == CE_None
>373	Identifier	CE_None
>374	Identifier	eErr
>375	ForInit	 
>376	AssignmentExpr	iLine = nYSize - 1
>377	AdditiveExpression	nYSize - 1
>378	PrimaryExpression	1
>379	Identifier	nYSize
>380	Identifier	iLine
>381	ForStatement	for ( i = 0 ; i < nXSize ; i ++ )
>382	ExpressionStatement	 
>383	AssignmentExpr	panNearX [ i ] = panNearY [ i ] = - 1
>384	AssignmentExpr	panNearY [ i ] = - 1
>385	UnaryOp	- 1
>386	PrimaryExpression	1
>387	UnaryOperator	-
>388	ArrayIndexing	panNearY [ i ]
>389	Identifier	i
>390	Identifier	panNearY
>391	ArrayIndexing	panNearX [ i ]
>392	Identifier	i
>393	Identifier	panNearX
>394	IncDecOp	 
>395	IncDec	++
>396	Identifier	i
>397	Condition	 
>398	RelationalExpression	i < nXSize
>399	Identifier	nXSize
>400	Identifier	i
>401	ForInit	 
>402	AssignmentExpr	i = 0
>403	PrimaryExpression	0
>404	Identifier	i
>405	ForStatement	for ( iLine = 0 ; eErr == CE_None && iLine < nYSize ; iLine ++ )
>406	CompoundStatement	 
>407	IfStatement	if ( ! pfnProgress ( 0.5 * ( iLine + 1 ) / ( double ) nYSize , \"\" , pProgressArg ) )
>408	CompoundStatement	 
>409	ExpressionStatement	 
>410	AssignmentExpr	eErr = CE_Failure
>411	Identifier	CE_Failure
>412	Identifier	eErr
>413	ExpressionStatement	 
>414	CallExpression	CPLError ( CE_Failure , CPLE_UserInterrupt , \"User terminated\" )
>415	ArgumentList	CE_Failure
>416	Argument	\"User terminated\"
>417	PrimaryExpression	\"User terminated\"
>418	Argument	CPLE_UserInterrupt
>419	Identifier	CPLE_UserInterrupt
>420	Argument	CE_Failure
>421	Identifier	CE_Failure
>422	Callee	CPLError
>423	Identifier	CPLError
>424	Condition	 
>425	UnaryOp	! pfnProgress ( 0.5 * ( iLine + 1 ) / ( double ) nYSize , \"\" , pProgressArg )
>426	CallExpression	pfnProgress ( 0.5 * ( iLine + 1 ) / ( double ) nYSize , \"\" , pProgressArg )
>427	ArgumentList	0.5 * ( iLine + 1 ) / ( double ) nYSize
>428	Argument	pProgressArg
>429	Identifier	pProgressArg
>430	Argument	\"\"
>431	PrimaryExpression	\"\"
>432	Argument	0.5 * ( iLine + 1 ) / ( double ) nYSize
>433	MultiplicativeExpression	0.5 * ( iLine + 1 ) / ( double ) nYSize
>434	MultiplicativeExpression	( iLine + 1 ) / ( double ) nYSize
>435	CastExpression	( double ) nYSize
>436	Identifier	nYSize
>437	CastTarget	double
>438	AdditiveExpression	iLine + 1
>439	PrimaryExpression	1
>440	Identifier	iLine
>441	PrimaryExpression	0.5
>442	Callee	pfnProgress
>443	Identifier	pfnProgress
>444	UnaryOperator	!
>445	IfStatement	if ( eErr != CE_None )
>446	BreakStatement	 
>447	Condition	 
>448	EqualityExpression	eErr != CE_None
>449	Identifier	CE_None
>450	Identifier	eErr
>451	ExpressionStatement	 
>452	AssignmentExpr	eErr = GDALRasterIO ( hWorkProximityBand , GF_Write , 0 , iLine , nXSize , 1 , pafProximity , nXSize , \
>453	CallExpression	GDALRasterIO ( hWorkProximityBand , GF_Write , 0 , iLine , nXSize , 1 , pafProximity , nXSize , 1 , GDT_Float32 , \
>454	ArgumentList	hWorkProximityBand
>455	Argument	0
>456	PrimaryExpression	0
>457	Argument	0
>458	PrimaryExpression	0
>459	Argument	GDT_Float32
>460	Identifier	GDT_Float32
>461	Argument	1
>462	PrimaryExpression	1
>463	Argument	nXSize
>464	Identifier	nXSize
>465	Argument	pafProximity
>466	Identifier	pafProximity
>467	Argument	1
>468	PrimaryExpression	1
>469	Argument	nXSize
>470	Identifier	nXSize
>471	Argument	iLine
>472	Identifier	iLine
>473	Argument	0
>474	PrimaryExpression	0
>475	Argument	GF_Write
>476	Identifier	GF_Write
>477	Argument	hWorkProximityBand
>478	Identifier	hWorkProximityBand
>479	Callee	GDALRasterIO
>480	Identifier	GDALRasterIO
>481	Identifier	eErr
>482	ExpressionStatement	 
>483	CallExpression	ProcessProximityLine ( panSrcScanline , panNearX , panNearY , FALSE , iLine , nXSize , dfMaxDist , pafProximity , \
>484	ArgumentList	panSrcScanline
>485	Argument	panTargetValues
>486	Identifier	panTargetValues
>487	Argument	nTargetValues
>488	Identifier	nTargetValues
>489	Argument	pafProximity
>490	Identifier	pafProximity
>491	Argument	dfMaxDist
>492	Identifier	dfMaxDist
>493	Argument	nXSize
>494	Identifier	nXSize
>495	Argument	iLine
>496	Identifier	iLine
>497	Argument	FALSE
>498	Identifier	FALSE
>499	Argument	panNearY
>500	Identifier	panNearY
>501	Argument	panNearX
>502	Identifier	panNearX
>503	Argument	panSrcScanline
>504	Identifier	panSrcScanline
>505	Callee	ProcessProximityLine
>506	Identifier	ProcessProximityLine
>507	ExpressionStatement	 
>508	CallExpression	ProcessProximityLine ( panSrcScanline , panNearX , panNearY , TRUE , iLine , nXSize , dfMaxDist , pafProximity , \
>509	ArgumentList	panSrcScanline
>510	Argument	panTargetValues
>511	Identifier	panTargetValues
>512	Argument	nTargetValues
>513	Identifier	nTargetValues
>514	Argument	pafProximity
>515	Identifier	pafProximity
>516	Argument	dfMaxDist
>517	Identifier	dfMaxDist
>518	Argument	nXSize
>519	Identifier	nXSize
>520	Argument	iLine
>521	Identifier	iLine
>522	Argument	TRUE
>523	Identifier	TRUE
>524	Argument	panNearY
>525	Identifier	panNearY
>526	Argument	panNearX
>527	Identifier	panNearX
>528	Argument	panSrcScanline
>529	Identifier	panSrcScanline
>530	Callee	ProcessProximityLine
>531	Identifier	ProcessProximityLine
>532	ForStatement	for ( i = 0 ; i < nXSize ; i ++ )
>533	ExpressionStatement	 
>534	AssignmentExpr	pafProximity [ i ] = - 1.0
>535	UnaryOp	- 1.0
>536	PrimaryExpression	1.0
>537	UnaryOperator	-
>538	ArrayIndexing	pafProximity [ i ]
>539	Identifier	i
>540	Identifier	pafProximity
>541	IncDecOp	 
>542	IncDec	++
>543	Identifier	i
>544	Condition	 
>545	RelationalExpression	i < nXSize
>546	Identifier	nXSize
>547	Identifier	i
>548	ForInit	 
>549	AssignmentExpr	i = 0
>550	PrimaryExpression	0
>551	Identifier	i
>552	IfStatement	if ( eErr != CE_None )
>553	BreakStatement	 
>554	Condition	 
>555	EqualityExpression	eErr != CE_None
>556	Identifier	CE_None
>557	Identifier	eErr
>558	ExpressionStatement	 
>559	AssignmentExpr	eErr = GDALRasterIO ( hSrcBand , GF_Read , 0 , iLine , nXSize , 1 , panSrcScanline , nXSize , 1 , GDT_\
>560	CallExpression	GDALRasterIO ( hSrcBand , GF_Read , 0 , iLine , nXSize , 1 , panSrcScanline , nXSize , 1 , GDT_Int32 , 0 , 0 )
>561	ArgumentList	hSrcBand
>562	Argument	0
>563	PrimaryExpression	0
>564	Argument	0
>565	PrimaryExpression	0
>566	Argument	GDT_Int32
>567	Identifier	GDT_Int32
>568	Argument	1
>569	PrimaryExpression	1
>570	Argument	nXSize
>571	Identifier	nXSize
>572	Argument	panSrcScanline
>573	Identifier	panSrcScanline
>574	Argument	1
>575	PrimaryExpression	1
>576	Argument	nXSize
>577	Identifier	nXSize
>578	Argument	iLine
>579	Identifier	iLine
>580	Argument	0
>581	PrimaryExpression	0
>582	Argument	GF_Read
>583	Identifier	GF_Read
>584	Argument	hSrcBand
>585	Identifier	hSrcBand
>586	Callee	GDALRasterIO
>587	Identifier	GDALRasterIO
>588	Identifier	eErr
>589	IncDecOp	 
>590	IncDec	++
>591	Identifier	iLine
>592	Condition	 
>593	AndExpression	eErr == CE_None && iLine < nYSize
>594	RelationalExpression	iLine < nYSize
>595	Identifier	nYSize
>596	Identifier	iLine
>597	EqualityExpression	eErr == CE_None
>598	Identifier	CE_None
>599	Identifier	eErr
>600	ForInit	 
>601	AssignmentExpr	iLine = 0
>602	PrimaryExpression	0
>603	Identifier	iLine
>604	ForStatement	for ( i = 0 ; i < nXSize ; i ++ )
>605	ExpressionStatement	 
>606	AssignmentExpr	panNearX [ i ] = panNearY [ i ] = - 1
>607	AssignmentExpr	panNearY [ i ] = - 1
>608	UnaryOp	- 1
>609	PrimaryExpression	1
>610	UnaryOperator	-
>611	ArrayIndexing	panNearY [ i ]
>612	Identifier	i
>613	Identifier	panNearY
>614	ArrayIndexing	panNearX [ i ]
>615	Identifier	i
>616	Identifier	panNearX
>617	IncDecOp	 
>618	IncDec	++
>619	Identifier	i
>620	Condition	 
>621	RelationalExpression	i < nXSize
>622	Identifier	nXSize
>623	Identifier	i
>624	ForInit	 
>625	AssignmentExpr	i = 0
>626	PrimaryExpression	0
>627	Identifier	i
>628	IfStatement	if ( pafProximity == NULL || panNearX == NULL || panNearY == NULL || panSrcScanline == NULL )
>629	CompoundStatement	 
>630	GotoStatement	 
>631	Identifier	end
>632	ExpressionStatement	 
>633	AssignmentExpr	eErr = CE_Failure
>634	Identifier	CE_Failure
>635	Identifier	eErr
>636	ExpressionStatement	 
>637	CallExpression	CPLError ( CE_Failure , CPLE_OutOfMemory , \"Out of memory allocating working buffers.\" )
>638	ArgumentList	CE_Failure
>639	Argument	\"Out of memory allocating working buffers.\"
>640	PrimaryExpression	\"Out of memory allocating working buffers.\"
>641	Argument	CPLE_OutOfMemory
>642	Identifier	CPLE_OutOfMemory
>643	Argument	CE_Failure
>644	Identifier	CE_Failure
>645	Callee	CPLError
>646	Identifier	CPLError
>647	Condition	 
>648	OrExpression	pafProximity == NULL || panNearX == NULL || panNearY == NULL || panSrcScanline == NULL
>649	OrExpression	panNearX == NULL || panNearY == NULL || panSrcScanline == NULL
>650	OrExpression	panNearY == NULL || panSrcScanline == NULL
>651	EqualityExpression	panSrcScanline == NULL
>652	Identifier	NULL
>653	Identifier	panSrcScanline
>654	EqualityExpression	panNearY == NULL
>655	Identifier	NULL
>656	Identifier	panNearY
>657	EqualityExpression	panNearX == NULL
>658	Identifier	NULL
>659	Identifier	panNearX
>660	EqualityExpression	pafProximity == NULL
>661	Identifier	NULL
>662	Identifier	pafProximity
>663	ExpressionStatement	 
>664	AssignmentExpr	panSrcScanline = ( GInt32 * ) VSIMalloc2 ( sizeof ( GInt32 ) , nXSize )
>665	CastExpression	( GInt32 * ) VSIMalloc2 ( sizeof ( GInt32 ) , nXSize )
>666	CallExpression	VSIMalloc2 ( sizeof ( GInt32 ) , nXSize )
>667	ArgumentList	sizeof ( GInt32 )
>668	Argument	nXSize
>669	Identifier	nXSize
>670	Argument	sizeof ( GInt32 )
>671	SizeofExpr	sizeof ( GInt32 )
>672	SizeofOperand	GInt32
>673	Sizeof	sizeof
>674	Callee	VSIMalloc2
>675	Identifier	VSIMalloc2
>676	CastTarget	GInt32 *
>677	Identifier	panSrcScanline
>678	ExpressionStatement	 
>679	AssignmentExpr	panNearY = ( int * ) VSIMalloc2 ( sizeof ( int ) , nXSize )
>680	CastExpression	( int * ) VSIMalloc2 ( sizeof ( int ) , nXSize )
>681	CallExpression	VSIMalloc2 ( sizeof ( int ) , nXSize )
>682	ArgumentList	sizeof ( int )
>683	Argument	nXSize
>684	Identifier	nXSize
>685	Argument	sizeof ( int )
>686	SizeofExpr	sizeof ( int )
>687	SizeofOperand	int
>688	Sizeof	sizeof
>689	Callee	VSIMalloc2
>690	Identifier	VSIMalloc2
>691	CastTarget	int *
>692	Identifier	panNearY
>693	ExpressionStatement	 
>694	AssignmentExpr	panNearX = ( int * ) VSIMalloc2 ( sizeof ( int ) , nXSize )
>695	CastExpression	( int * ) VSIMalloc2 ( sizeof ( int ) , nXSize )
>696	CallExpression	VSIMalloc2 ( sizeof ( int ) , nXSize )
>697	ArgumentList	sizeof ( int )
>698	Argument	nXSize
>699	Identifier	nXSize
>700	Argument	sizeof ( int )
>701	SizeofExpr	sizeof ( int )
>702	SizeofOperand	int
>703	Sizeof	sizeof
>704	Callee	VSIMalloc2
>705	Identifier	VSIMalloc2
>706	CastTarget	int *
>707	Identifier	panNearX
>708	ExpressionStatement	 
>709	AssignmentExpr	pafProximity = ( float * ) VSIMalloc2 ( sizeof ( float ) , nXSize )
>710	CastExpression	( float * ) VSIMalloc2 ( sizeof ( float ) , nXSize )
>711	CallExpression	VSIMalloc2 ( sizeof ( float ) , nXSize )
>712	ArgumentList	sizeof ( float )
>713	Argument	nXSize
>714	Identifier	nXSize
>715	Argument	sizeof ( float )
>716	SizeofExpr	sizeof ( float )
>717	SizeofOperand	float
>718	Sizeof	sizeof
>719	Callee	VSIMalloc2
>720	Identifier	VSIMalloc2
>721	CastTarget	float *
>722	Identifier	pafProximity
>723	IfStatement	if ( eProxType == GDT_Byte || eProxType == GDT_UInt16 || eProxType == GDT_UInt32 )
>724	CompoundStatement	 
>725	ExpressionStatement	 
>726	AssignmentExpr	hWorkProximityBand = GDALGetRasterBand ( hWorkProximityDS , 1 )
>727	CallExpression	GDALGetRasterBand ( hWorkProximityDS , 1 )
>728	ArgumentList	hWorkProximityDS
>729	Argument	1
>730	PrimaryExpression	1
>731	Argument	hWorkProximityDS
>732	Identifier	hWorkProximityDS
>733	Callee	GDALGetRasterBand
>734	Identifier	GDALGetRasterBand
>735	Identifier	hWorkProximityBand
>736	IfStatement	if ( hWorkProximityDS == NULL )
>737	CompoundStatement	 
>738	GotoStatement	 
>739	Identifier	end
>740	ExpressionStatement	 
>741	AssignmentExpr	eErr = CE_Failure
>742	Identifier	CE_Failure
>743	Identifier	eErr
>744	Condition	 
>745	EqualityExpression	hWorkProximityDS == NULL
>746	Identifier	NULL
>747	Identifier	hWorkProximityDS
>748	ExpressionStatement	 
>749	AssignmentExpr	hWorkProximityDS = GDALCreate ( hDriver , osTmpFile , nXSize , nYSize , 1 , GDT_Float32 , NULL )
>750	CallExpression	GDALCreate ( hDriver , osTmpFile , nXSize , nYSize , 1 , GDT_Float32 , NULL )
>751	ArgumentList	hDriver
>752	Argument	NULL
>753	Identifier	NULL
>754	Argument	GDT_Float32
>755	Identifier	GDT_Float32
>756	Argument	1
>757	PrimaryExpression	1
>758	Argument	nYSize
>759	Identifier	nYSize
>760	Argument	nXSize
>761	Identifier	nXSize
>762	Argument	osTmpFile
>763	Identifier	osTmpFile
>764	Argument	hDriver
>765	Identifier	hDriver
>766	Callee	GDALCreate
>767	Identifier	GDALCreate
>768	Identifier	hWorkProximityDS
>769	IdentifierDeclStatement	 
>770	IdentifierDecl	osTmpFile = CPLGenerateTempFilename ( \"proximity\" )
>771	AssignmentExpr	osTmpFile = CPLGenerateTempFilename ( \"proximity\" )
>772	CallExpression	CPLGenerateTempFilename ( \"proximity\" )
>773	ArgumentList	\"proximity\"
>774	Argument	\"proximity\"
>775	PrimaryExpression	\"proximity\"
>776	Callee	CPLGenerateTempFilename
>777	Identifier	CPLGenerateTempFilename
>778	Identifier	osTmpFile
>779	Identifier	osTmpFile
>780	IdentifierDeclType	CPLString
>781	IfStatement	if ( hDriver == NULL )
>782	CompoundStatement	 
>783	GotoStatement	 
>784	Identifier	end
>785	ExpressionStatement	 
>786	AssignmentExpr	eErr = CE_Failure
>787	Identifier	CE_Failure
>788	Identifier	eErr
>789	ExpressionStatement	 
>790	CallExpression	CPLError ( CE_Failure , CPLE_AppDefined , \"GDALComputeProximity needs GTiff driver\" )
>791	ArgumentList	CE_Failure
>792	Argument	\"GDALComputeProximity needs GTiff driver\"
>793	PrimaryExpression	\"GDALComputeProximity needs GTiff driver\"
>794	Argument	CPLE_AppDefined
>795	Identifier	CPLE_AppDefined
>796	Argument	CE_Failure
>797	Identifier	CE_Failure
>798	Callee	CPLError
>799	Identifier	CPLError
>800	Condition	 
>801	EqualityExpression	hDriver == NULL
>802	Identifier	NULL
>803	Identifier	hDriver
>804	IdentifierDeclStatement	 
>805	IdentifierDecl	hDriver = GDALGetDriverByName ( \"GTiff\" )
>806	AssignmentExpr	hDriver = GDALGetDriverByName ( \"GTiff\" )
>807	CallExpression	GDALGetDriverByName ( \"GTiff\" )
>808	ArgumentList	\"GTiff\"
>809	Argument	\"GTiff\"
>810	PrimaryExpression	\"GTiff\"
>811	Callee	GDALGetDriverByName
>812	Identifier	GDALGetDriverByName
>813	Identifier	hDriver
>814	Identifier	hDriver
>815	IdentifierDeclType	GDALDriverH
>816	Condition	 
>817	OrExpression	eProxType == GDT_Byte || eProxType == GDT_UInt16 || eProxType == GDT_UInt32
>818	OrExpression	eProxType == GDT_UInt16 || eProxType == GDT_UInt32
>819	EqualityExpression	eProxType == GDT_UInt32
>820	Identifier	GDT_UInt32
>821	Identifier	eProxType
>822	EqualityExpression	eProxType == GDT_UInt16
>823	Identifier	GDT_UInt16
>824	Identifier	eProxType
>825	EqualityExpression	eProxType == GDT_Byte
>826	Identifier	GDT_Byte
>827	Identifier	eProxType
>828	IdentifierDeclStatement	 
>829	IdentifierDecl	eErr = CE_None
>830	AssignmentExpr	eErr = CE_None
>831	Identifier	CE_None
>832	Identifier	CE_None
>833	Identifier	eErr
>834	IdentifierDeclType	CPLErr
>835	IdentifierDeclStatement	 
>836	IdentifierDecl	iLine
>837	Identifier	iLine
>838	IdentifierDeclType	int
>839	IdentifierDeclStatement	 
>840	IdentifierDecl	* panSrcScanline = NULL
>841	AssignmentExpr	* panSrcScanline = NULL
>842	Identifier	NULL
>843	Identifier	NULL
>844	Identifier	panSrcScanline
>845	IdentifierDeclType	GInt32 *
>846	IdentifierDeclStatement	 
>847	IdentifierDecl	* pafProximity = NULL
>848	AssignmentExpr	* pafProximity = NULL
>849	Identifier	NULL
>850	Identifier	NULL
>851	Identifier	pafProximity
>852	IdentifierDeclType	float *
>853	IdentifierDeclStatement	 
>854	IdentifierDecl	* panNearY = NULL
>855	AssignmentExpr	* panNearY = NULL
>856	Identifier	NULL
>857	Identifier	NULL
>858	Identifier	panNearY
>859	IdentifierDeclType	int *
>860	IdentifierDecl	* panNearX = NULL
>861	AssignmentExpr	* panNearX = NULL
>862	Identifier	NULL
>863	Identifier	NULL
>864	Identifier	panNearX
>865	IdentifierDeclType	int *
>866	IdentifierDeclStatement	 
>867	IdentifierDecl	eProxType = GDALGetRasterDataType ( hProximityBand )
>868	AssignmentExpr	eProxType = GDALGetRasterDataType ( hProximityBand )
>869	CallExpression	GDALGetRasterDataType ( hProximityBand )
>870	ArgumentList	hProximityBand
>871	Argument	hProximityBand
>872	Identifier	hProximityBand
>873	Callee	GDALGetRasterDataType
>874	Identifier	GDALGetRasterDataType
>875	Identifier	eProxType
>876	Identifier	eProxType
>877	IdentifierDeclType	GDALDataType
>878	IdentifierDeclStatement	 
>879	IdentifierDecl	hWorkProximityDS = NULL
>880	AssignmentExpr	hWorkProximityDS = NULL
>881	Identifier	NULL
>882	Identifier	NULL
>883	Identifier	hWorkProximityDS
>884	IdentifierDeclType	GDALDatasetH
>885	IdentifierDeclStatement	 
>886	IdentifierDecl	hWorkProximityBand = hProximityBand
>887	AssignmentExpr	hWorkProximityBand = hProximityBand
>888	Identifier	hProximityBand
>889	Identifier	hProximityBand
>890	Identifier	hWorkProximityBand
>891	IdentifierDeclType	GDALRasterBandH
>892	IfStatement	if ( ! pfnProgress ( 0.0 , \"\" , pProgressArg ) )
>893	CompoundStatement	 
>894	ReturnStatement	 
>895	Identifier	CE_Failure
>896	ExpressionStatement	 
>897	CallExpression	CPLFree ( panTargetValues )
>898	ArgumentList	panTargetValues
>899	Argument	panTargetValues
>900	Identifier	panTargetValues
>901	Callee	CPLFree
>902	Identifier	CPLFree
>903	ExpressionStatement	 
>904	CallExpression	CPLError ( CE_Failure , CPLE_UserInterrupt , \"User terminated\" )
>905	ArgumentList	CE_Failure
>906	Argument	\"User terminated\"
>907	PrimaryExpression	\"User terminated\"
>908	Argument	CPLE_UserInterrupt
>909	Identifier	CPLE_UserInterrupt
>910	Argument	CE_Failure
>911	Identifier	CE_Failure
>912	Callee	CPLError
>913	Identifier	CPLError
>914	Condition	 
>915	UnaryOp	! pfnProgress ( 0.0 , \"\" , pProgressArg )
>916	CallExpression	pfnProgress ( 0.0 , \"\" , pProgressArg )
>917	ArgumentList	0.0
>918	Argument	pProgressArg
>919	Identifier	pProgressArg
>920	Argument	\"\"
>921	PrimaryExpression	\"\"
>922	Argument	0.0
>923	PrimaryExpression	0.0
>924	Callee	pfnProgress
>925	Identifier	pfnProgress
>926	UnaryOperator	!
>927	IfStatement	if ( pszOpt != NULL )
>928	CompoundStatement	 
>929	ExpressionStatement	 
>930	CallExpression	CSLDestroy ( papszValuesTokens )
>931	ArgumentList	papszValuesTokens
>932	Argument	papszValuesTokens
>933	Identifier	papszValuesTokens
>934	Callee	CSLDestroy
>935	Identifier	CSLDestroy
>936	ForStatement	for ( i = 0 ; i < nTargetValues ; i ++ )
>937	ExpressionStatement	 
>938	AssignmentExpr	panTargetValues [ i ] = atoi ( papszValuesTokens [ i ] )
>939	CallExpression	atoi ( papszValuesTokens [ i ] )
>940	ArgumentList	papszValuesTokens [ i ]
>941	Argument	papszValuesTokens [ i ]
>942	ArrayIndexing	papszValuesTokens [ i ]
>943	Identifier	i
>944	Identifier	papszValuesTokens
>945	Callee	atoi
>946	Identifier	atoi
>947	ArrayIndexing	panTargetValues [ i ]
>948	Identifier	i
>949	Identifier	panTargetValues
>950	IncDecOp	 
>951	IncDec	++
>952	Identifier	i
>953	Condition	 
>954	RelationalExpression	i < nTargetValues
>955	Identifier	nTargetValues
>956	Identifier	i
>957	ForInit	 
>958	AssignmentExpr	i = 0
>959	PrimaryExpression	0
>960	Identifier	i
>961	ExpressionStatement	 
>962	AssignmentExpr	panTargetValues = ( int * ) CPLCalloc ( sizeof ( int ) , nTargetValues )
>963	CastExpression	( int * ) CPLCalloc ( sizeof ( int ) , nTargetValues )
>964	CallExpression	CPLCalloc ( sizeof ( int ) , nTargetValues )
>965	ArgumentList	sizeof ( int )
>966	Argument	nTargetValues
>967	Identifier	nTargetValues
>968	Argument	sizeof ( int )
>969	SizeofExpr	sizeof ( int )
>970	SizeofOperand	int
>971	Sizeof	sizeof
>972	Callee	CPLCalloc
>973	Identifier	CPLCalloc
>974	CastTarget	int *
>975	Identifier	panTargetValues
>976	ExpressionStatement	 
>977	AssignmentExpr	nTargetValues = CSLCount ( papszValuesTokens )
>978	CallExpression	CSLCount ( papszValuesTokens )
>979	ArgumentList	papszValuesTokens
>980	Argument	papszValuesTokens
>981	Identifier	papszValuesTokens
>982	Callee	CSLCount
>983	Identifier	CSLCount
>984	Identifier	nTargetValues
>985	ExpressionStatement	 
>986	AssignmentExpr	papszValuesTokens = CSLTokenizeStringComplex ( pszOpt , \",\" , FALSE , FALSE )
>987	CallExpression	CSLTokenizeStringComplex ( pszOpt , \",\" , FALSE , FALSE )
>988	ArgumentList	pszOpt
>989	Argument	FALSE
>990	Identifier	FALSE
>991	Argument	FALSE
>992	Identifier	FALSE
>993	Argument	\",\"
>994	PrimaryExpression	\",\"
>995	Argument	pszOpt
>996	Identifier	pszOpt
>997	Callee	CSLTokenizeStringComplex
>998	Identifier	CSLTokenizeStringComplex
>999	Identifier	papszValuesTokens
>1000	IdentifierDeclStatement	 
>1001	IdentifierDecl	* * papszValuesTokens
>1002	Identifier	papszValuesTokens
>1003	IdentifierDeclType	char * *
>1004	Condition	 
>1005	EqualityExpression	pszOpt != NULL
>1006	Identifier	NULL
>1007	Identifier	pszOpt
>1008	ExpressionStatement	 
>1009	AssignmentExpr	pszOpt = CSLFetchNameValue ( papszOptions , \"VALUES\" )
>1010	CallExpression	CSLFetchNameValue ( papszOptions , \"VALUES\" )
>1011	ArgumentList	papszOptions
>1012	Argument	\"VALUES\"
>1013	PrimaryExpression	\"VALUES\"
>1014	Argument	papszOptions
>1015	Identifier	papszOptions
>1016	Callee	CSLFetchNameValue
>1017	Identifier	CSLFetchNameValue
>1018	Identifier	pszOpt
>1019	IdentifierDeclStatement	 
>1020	IdentifierDecl	nTargetValues = 0
>1021	AssignmentExpr	nTargetValues = 0
>1022	PrimaryExpression	0
>1023	Identifier	nTargetValues
>1024	Identifier	nTargetValues
>1025	IdentifierDeclType	int
>1026	IdentifierDeclStatement	 
>1027	IdentifierDecl	* panTargetValues = NULL
>1028	AssignmentExpr	* panTargetValues = NULL
>1029	Identifier	NULL
>1030	Identifier	NULL
>1031	Identifier	panTargetValues
>1032	IdentifierDeclType	int *
>1033	IfStatement	if ( pszOpt )
>1034	CompoundStatement	 
>1035	ExpressionStatement	 
>1036	AssignmentExpr	bFixedBufVal = TRUE
>1037	Identifier	TRUE
>1038	Identifier	bFixedBufVal
>1039	ExpressionStatement	 
>1040	AssignmentExpr	dfFixedBufVal = atof ( pszOpt )
>1041	CallExpression	atof ( pszOpt )
>1042	ArgumentList	pszOpt
>1043	Argument	pszOpt
>1044	Identifier	pszOpt
>1045	Callee	atof
>1046	Identifier	atof
>1047	Identifier	dfFixedBufVal
>1048	Condition	 
>1049	Identifier	pszOpt
>1050	ExpressionStatement	 
>1051	AssignmentExpr	pszOpt = CSLFetchNameValue ( papszOptions , \"FIXED_BUF_VAL\" )
>1052	CallExpression	CSLFetchNameValue ( papszOptions , \"FIXED_BUF_VAL\" )
>1053	ArgumentList	papszOptions
>1054	Argument	\"FIXED_BUF_VAL\"
>1055	PrimaryExpression	\"FIXED_BUF_VAL\"
>1056	Argument	papszOptions
>1057	Identifier	papszOptions
>1058	Callee	CSLFetchNameValue
>1059	Identifier	CSLFetchNameValue
>1060	Identifier	pszOpt
>1061	IfStatement	if ( pszOpt != NULL )
>1062	ElseStatement	else
>1063	CompoundStatement	 
>1064	IfStatement	if ( ! bSuccess )
>1065	ExpressionStatement	 
>1066	AssignmentExpr	fNoDataValue = 65535.0
>1067	PrimaryExpression	65535.0
>1068	Identifier	fNoDataValue
>1069	Condition	 
>1070	UnaryOp	! bSuccess
>1071	Identifier	bSuccess
>1072	UnaryOperator	!
>1073	ExpressionStatement	 
>1074	AssignmentExpr	fNoDataValue = ( float ) GDALGetRasterNoDataValue ( hProximityBand , & bSuccess )
>1075	CastExpression	( float ) GDALGetRasterNoDataValue ( hProximityBand , & bSuccess )
>1076	CallExpression	GDALGetRasterNoDataValue ( hProximityBand , & bSuccess )
>1077	ArgumentList	hProximityBand
>1078	Argument	& bSuccess
>1079	UnaryOp	& bSuccess
>1080	Identifier	bSuccess
>1081	UnaryOperator	&
>1082	Argument	hProximityBand
>1083	Identifier	hProximityBand
>1084	Callee	GDALGetRasterNoDataValue
>1085	Identifier	GDALGetRasterNoDataValue
>1086	CastTarget	float
>1087	Identifier	fNoDataValue
>1088	IdentifierDeclStatement	 
>1089	IdentifierDecl	bSuccess
>1090	Identifier	bSuccess
>1091	IdentifierDeclType	int
>1092	ExpressionStatement	 
>1093	AssignmentExpr	fNoDataValue = ( float ) atof ( pszOpt )
>1094	CastExpression	( float ) atof ( pszOpt )
>1095	CallExpression	atof ( pszOpt )
>1096	ArgumentList	pszOpt
>1097	Argument	pszOpt
>1098	Identifier	pszOpt
>1099	Callee	atof
>1100	Identifier	atof
>1101	CastTarget	float
>1102	Identifier	fNoDataValue
>1103	Condition	 
>1104	EqualityExpression	pszOpt != NULL
>1105	Identifier	NULL
>1106	Identifier	pszOpt
>1107	ExpressionStatement	 
>1108	AssignmentExpr	pszOpt = CSLFetchNameValue ( papszOptions , \"NODATA\" )
>1109	CallExpression	CSLFetchNameValue ( papszOptions , \"NODATA\" )
>1110	ArgumentList	papszOptions
>1111	Argument	\"NODATA\"
>1112	PrimaryExpression	\"NODATA\"
>1113	Argument	papszOptions
>1114	Identifier	papszOptions
>1115	Callee	CSLFetchNameValue
>1116	Identifier	CSLFetchNameValue
>1117	Identifier	pszOpt
>1118	IdentifierDeclStatement	 
>1119	IdentifierDecl	fNoDataValue
>1120	Identifier	fNoDataValue
>1121	IdentifierDeclType	float
>1122	IfStatement	if ( nXSize != GDALGetRasterBandXSize ( hProximityBand ) || nYSize != GDALGetRasterBandYSize ( hProximityBand ) )
>1123	CompoundStatement	 
>1124	ReturnStatement	 
>1125	Identifier	CE_Failure
>1126	ExpressionStatement	 
>1127	CallExpression	CPLError ( CE_Failure , CPLE_AppDefined , \"Source and proximity bands are not the same size.\" )
>1128	ArgumentList	CE_Failure
>1129	Argument	\"Source and proximity bands are not the same size.\"
>1130	PrimaryExpression	\"Source and proximity bands are not the same size.\"
>1131	Argument	CPLE_AppDefined
>1132	Identifier	CPLE_AppDefined
>1133	Argument	CE_Failure
>1134	Identifier	CE_Failure
>1135	Callee	CPLError
>1136	Identifier	CPLError
>1137	Condition	 
>1138	OrExpression	nXSize != GDALGetRasterBandXSize ( hProximityBand ) || nYSize != GDALGetRasterBandYSize ( hProximityBand )
>1139	EqualityExpression	nYSize != GDALGetRasterBandYSize ( hProximityBand )
>1140	CallExpression	GDALGetRasterBandYSize ( hProximityBand )
>1141	ArgumentList	hProximityBand
>1142	Argument	hProximityBand
>1143	Identifier	hProximityBand
>1144	Callee	GDALGetRasterBandYSize
>1145	Identifier	GDALGetRasterBandYSize
>1146	Identifier	nYSize
>1147	EqualityExpression	nXSize != GDALGetRasterBandXSize ( hProximityBand )
>1148	CallExpression	GDALGetRasterBandXSize ( hProximityBand )
>1149	ArgumentList	hProximityBand
>1150	Argument	hProximityBand
>1151	Identifier	hProximityBand
>1152	Callee	GDALGetRasterBandXSize
>1153	Identifier	GDALGetRasterBandXSize
>1154	Identifier	nXSize
>1155	ExpressionStatement	 
>1156	AssignmentExpr	nYSize = GDALGetRasterBandYSize ( hSrcBand )
>1157	CallExpression	GDALGetRasterBandYSize ( hSrcBand )
>1158	ArgumentList	hSrcBand
>1159	Argument	hSrcBand
>1160	Identifier	hSrcBand
>1161	Callee	GDALGetRasterBandYSize
>1162	Identifier	GDALGetRasterBandYSize
>1163	Identifier	nYSize
>1164	ExpressionStatement	 
>1165	AssignmentExpr	nXSize = GDALGetRasterBandXSize ( hSrcBand )
>1166	CallExpression	GDALGetRasterBandXSize ( hSrcBand )
>1167	ArgumentList	hSrcBand
>1168	Argument	hSrcBand
>1169	Identifier	hSrcBand
>1170	Callee	GDALGetRasterBandXSize
>1171	Identifier	GDALGetRasterBandXSize
>1172	Identifier	nXSize
>1173	ExpressionStatement	 
>1174	CallExpression	CPLDebug ( \"GDAL\" , \"MAXDIST=%g, DISTMULT=%g\" , dfMaxDist , dfDistMult )
>1175	ArgumentList	\"GDAL\"
>1176	Argument	dfDistMult
>1177	Identifier	dfDistMult
>1178	Argument	dfMaxDist
>1179	Identifier	dfMaxDist
>1180	Argument	\"MAXDIST=%g, DISTMULT=%g\"
>1181	PrimaryExpression	\"MAXDIST=%g, DISTMULT=%g\"
>1182	Argument	\"GDAL\"
>1183	PrimaryExpression	\"GDAL\"
>1184	Callee	CPLDebug
>1185	Identifier	CPLDebug
>1186	IfStatement	if ( pszOpt )
>1187	ElseStatement	else
>1188	ExpressionStatement	 
>1189	AssignmentExpr	dfMaxDist = GDALGetRasterBandXSize ( hSrcBand ) + GDALGetRasterBandYSize ( hSrcBand )
>1190	AdditiveExpression	GDALGetRasterBandXSize ( hSrcBand ) + GDALGetRasterBandYSize ( hSrcBand )
>1191	CallExpression	GDALGetRasterBandYSize ( hSrcBand )
>1192	ArgumentList	hSrcBand
>1193	Argument	hSrcBand
>1194	Identifier	hSrcBand
>1195	Callee	GDALGetRasterBandYSize
>1196	Identifier	GDALGetRasterBandYSize
>1197	CallExpression	GDALGetRasterBandXSize ( hSrcBand )
>1198	ArgumentList	hSrcBand
>1199	Argument	hSrcBand
>1200	Identifier	hSrcBand
>1201	Callee	GDALGetRasterBandXSize
>1202	Identifier	GDALGetRasterBandXSize
>1203	Identifier	dfMaxDist
>1204	ExpressionStatement	 
>1205	AssignmentExpr	dfMaxDist = atof ( pszOpt ) / dfDistMult
>1206	MultiplicativeExpression	atof ( pszOpt ) / dfDistMult
>1207	Identifier	dfDistMult
>1208	CallExpression	atof ( pszOpt )
>1209	ArgumentList	pszOpt
>1210	Argument	pszOpt
>1211	Identifier	pszOpt
>1212	Callee	atof
>1213	Identifier	atof
>1214	Identifier	dfMaxDist
>1215	Condition	 
>1216	Identifier	pszOpt
>1217	ExpressionStatement	 
>1218	AssignmentExpr	pszOpt = CSLFetchNameValue ( papszOptions , \"MAXDIST\" )
>1219	CallExpression	CSLFetchNameValue ( papszOptions , \"MAXDIST\" )
>1220	ArgumentList	papszOptions
>1221	Argument	\"MAXDIST\"
>1222	PrimaryExpression	\"MAXDIST\"
>1223	Argument	papszOptions
>1224	Identifier	papszOptions
>1225	Callee	CSLFetchNameValue
>1226	Identifier	CSLFetchNameValue
>1227	Identifier	pszOpt
>1228	IfStatement	if ( pszOpt )
>1229	CompoundStatement	 
>1230	IfStatement	if ( EQUAL ( pszOpt , \"GEO\" ) )
>1231	ElseStatement	else
>1232	IfStatement	if ( ! EQUAL ( pszOpt , \"PIXEL\" ) )
>1233	CompoundStatement	 
>1234	ReturnStatement	 
>1235	Identifier	CE_Failure
>1236	ExpressionStatement	 
>1237	CallExpression	CPLError ( CE_Failure , CPLE_AppDefined , \"Unrecognised DISTUNITS value '%s', should be GEO or PIXEL.\" , pszOpt )
>1238	ArgumentList	CE_Failure
>1239	Argument	pszOpt
>1240	Identifier	pszOpt
>1241	Argument	\"Unrecognised DISTUNITS value '%s', should be GEO or PIXEL.\"
>1242	PrimaryExpression	\"Unrecognised DISTUNITS value '%s', should be GEO or PIXEL.\"
>1243	Argument	CPLE_AppDefined
>1244	Identifier	CPLE_AppDefined
>1245	Argument	CE_Failure
>1246	Identifier	CE_Failure
>1247	Callee	CPLError
>1248	Identifier	CPLError
>1249	Condition	 
>1250	UnaryOp	! EQUAL ( pszOpt , \"PIXEL\" )
>1251	CallExpression	EQUAL ( pszOpt , \"PIXEL\" )
>1252	ArgumentList	pszOpt
>1253	Argument	\"PIXEL\"
>1254	PrimaryExpression	\"PIXEL\"
>1255	Argument	pszOpt
>1256	Identifier	pszOpt
>1257	Callee	EQUAL
>1258	Identifier	EQUAL
>1259	UnaryOperator	!
>1260	CompoundStatement	 
>1261	IfStatement	if ( hSrcDS )
>1262	CompoundStatement	 
>1263	ExpressionStatement	 
>1264	AssignmentExpr	dfDistMult = ABS ( adfGeoTransform [ 1 ] )
>1265	CallExpression	ABS ( adfGeoTransform [ 1 ] )
>1266	ArgumentList	adfGeoTransform [ 1 ]
>1267	Argument	adfGeoTransform [ 1 ]
>1268	ArrayIndexing	adfGeoTransform [ 1 ]
>1269	PrimaryExpression	1
>1270	Identifier	adfGeoTransform
>1271	Callee	ABS
>1272	Identifier	ABS
>1273	Identifier	dfDistMult
>1274	IfStatement	if ( ABS ( adfGeoTransform [ 1 ] ) != ABS ( adfGeoTransform [ 5 ] ) )
>1275	ExpressionStatement	 
>1276	CallExpression	CPLError ( CE_Warning , CPLE_AppDefined , \"Pixels not square, distances will be inaccurate.\" )
>1277	ArgumentList	CE_Warning
>1278	Argument	\"Pixels not square, distances will be inaccurate.\"
>1279	PrimaryExpression	\"Pixels not square, distances will be inaccurate.\"
>1280	Argument	CPLE_AppDefined
>1281	Identifier	CPLE_AppDefined
>1282	Argument	CE_Warning
>1283	Identifier	CE_Warning
>1284	Callee	CPLError
>1285	Identifier	CPLError
>1286	Condition	 
>1287	EqualityExpression	ABS ( adfGeoTransform [ 1 ] ) != ABS ( adfGeoTransform [ 5 ] )
>1288	CallExpression	ABS ( adfGeoTransform [ 5 ] )
>1289	ArgumentList	adfGeoTransform [ 5 ]
>1290	Argument	adfGeoTransform [ 5 ]
>1291	ArrayIndexing	adfGeoTransform [ 5 ]
>1292	PrimaryExpression	5
>1293	Identifier	adfGeoTransform
>1294	Callee	ABS
>1295	Identifier	ABS
>1296	CallExpression	ABS ( adfGeoTransform [ 1 ] )
>1297	ArgumentList	adfGeoTransform [ 1 ]
>1298	Argument	adfGeoTransform [ 1 ]
>1299	ArrayIndexing	adfGeoTransform [ 1 ]
>1300	PrimaryExpression	1
>1301	Identifier	adfGeoTransform
>1302	Callee	ABS
>1303	Identifier	ABS
>1304	ExpressionStatement	 
>1305	CallExpression	GDALGetGeoTransform ( hSrcDS , adfGeoTransform )
>1306	ArgumentList	hSrcDS
>1307	Argument	adfGeoTransform
>1308	Identifier	adfGeoTransform
>1309	Argument	hSrcDS
>1310	Identifier	hSrcDS
>1311	Callee	GDALGetGeoTransform
>1312	Identifier	GDALGetGeoTransform
>1313	IdentifierDeclStatement	 
>1314	IdentifierDecl	adfGeoTransform [ 6 ]
>1315	PrimaryExpression	6
>1316	Identifier	adfGeoTransform
>1317	IdentifierDeclType	double [ 6 ]
>1318	Condition	 
>1319	Identifier	hSrcDS
>1320	IdentifierDeclStatement	 
>1321	IdentifierDecl	hSrcDS = GDALGetBandDataset ( hSrcBand )
>1322	AssignmentExpr	hSrcDS = GDALGetBandDataset ( hSrcBand )
>1323	CallExpression	GDALGetBandDataset ( hSrcBand )
>1324	ArgumentList	hSrcBand
>1325	Argument	hSrcBand
>1326	Identifier	hSrcBand
>1327	Callee	GDALGetBandDataset
>1328	Identifier	GDALGetBandDataset
>1329	Identifier	hSrcDS
>1330	Identifier	hSrcDS
>1331	IdentifierDeclType	GDALDatasetH
>1332	Condition	 
>1333	CallExpression	EQUAL ( pszOpt , \"GEO\" )
>1334	ArgumentList	pszOpt
>1335	Argument	\"GEO\"
>1336	PrimaryExpression	\"GEO\"
>1337	Argument	pszOpt
>1338	Identifier	pszOpt
>1339	Callee	EQUAL
>1340	Identifier	EQUAL
>1341	Condition	 
>1342	Identifier	pszOpt
>1343	ExpressionStatement	 
>1344	AssignmentExpr	pszOpt = CSLFetchNameValue ( papszOptions , \"DISTUNITS\" )
>1345	CallExpression	CSLFetchNameValue ( papszOptions , \"DISTUNITS\" )
>1346	ArgumentList	papszOptions
>1347	Argument	\"DISTUNITS\"
>1348	PrimaryExpression	\"DISTUNITS\"
>1349	Argument	papszOptions
>1350	Identifier	papszOptions
>1351	Callee	CSLFetchNameValue
>1352	Identifier	CSLFetchNameValue
>1353	Identifier	pszOpt
>1354	IdentifierDeclStatement	 
>1355	IdentifierDecl	dfDistMult = 1.0
>1356	AssignmentExpr	dfDistMult = 1.0
>1357	PrimaryExpression	1.0
>1358	Identifier	dfDistMult
>1359	Identifier	dfDistMult
>1360	IdentifierDeclType	double
>1361	IfStatement	if ( pfnProgress == NULL )
>1362	ExpressionStatement	 
>1363	AssignmentExpr	pfnProgress = GDALDummyProgress
>1364	Identifier	GDALDummyProgress
>1365	Identifier	pfnProgress
>1366	Condition	 
>1367	EqualityExpression	pfnProgress == NULL
>1368	Identifier	NULL
>1369	Identifier	pfnProgress
>1370	ExpressionStatement	 
>1371	CallExpression	VALIDATE_POINTER1 ( hProximityBand , \"GDALComputeProximity\" , CE_Failure )
>1372	ArgumentList	hProximityBand
>1373	Argument	CE_Failure
>1374	Identifier	CE_Failure
>1375	Argument	\"GDALComputeProximity\"
>1376	PrimaryExpression	\"GDALComputeProximity\"
>1377	Argument	hProximityBand
>1378	Identifier	hProximityBand
>1379	Callee	VALIDATE_POINTER1
>1380	Identifier	VALIDATE_POINTER1
>1381	ExpressionStatement	 
>1382	CallExpression	VALIDATE_POINTER1 ( hSrcBand , \"GDALComputeProximity\" , CE_Failure )
>1383	ArgumentList	hSrcBand
>1384	Argument	CE_Failure
>1385	Identifier	CE_Failure
>1386	Argument	\"GDALComputeProximity\"
>1387	PrimaryExpression	\"GDALComputeProximity\"
>1388	Argument	hSrcBand
>1389	Identifier	hSrcBand
>1390	Callee	VALIDATE_POINTER1
>1391	Identifier	VALIDATE_POINTER1
>1392	IdentifierDeclStatement	 
>1393	IdentifierDecl	dfFixedBufVal = 0.0
>1394	AssignmentExpr	dfFixedBufVal = 0.0
>1395	PrimaryExpression	0.0
>1396	Identifier	dfFixedBufVal
>1397	Identifier	dfFixedBufVal
>1398	IdentifierDeclType	double
>1399	IdentifierDeclStatement	 
>1400	IdentifierDecl	dfMaxDist
>1401	Identifier	dfMaxDist
>1402	IdentifierDeclType	double
>1403	IdentifierDeclStatement	 
>1404	IdentifierDecl	* pszOpt
>1405	Identifier	pszOpt
>1406	IdentifierDeclType	const char *
>1407	IdentifierDeclStatement	 
>1408	IdentifierDecl	bFixedBufVal = FALSE
>1409	AssignmentExpr	bFixedBufVal = FALSE
>1410	Identifier	FALSE
>1411	Identifier	FALSE
>1412	Identifier	bFixedBufVal
>1413	IdentifierDeclType	int
>1414	IdentifierDecl	i
>1415	Identifier	i
>1416	IdentifierDeclType	int
>1417	IdentifierDecl	nYSize
>1418	Identifier	nYSize
>1419	IdentifierDeclType	int
>1420	IdentifierDecl	nXSize
>1421	Identifier	nXSize
>1422	IdentifierDeclType	int
>1503	FunctionDef	ProcessProximityLine (GInt32 * panSrcScanline , int * panNearX , int * panNearY , int bForward , int iLine , int \
>1504	ParameterList	GInt32 * panSrcScanline , int * panNearX , int * panNearY , int bForward , int iLine , int nXSize , double dfMaxDist , \
>1505	Parameter	 
>1506	Identifier	panTargetValues
>1507	ParameterType	int *
>1508	Parameter	 
>1509	Identifier	nTargetValues
>1510	ParameterType	int
>1511	Parameter	 
>1512	Identifier	pafProximity
>1513	ParameterType	float *
>1514	Parameter	 
>1515	Identifier	dfMaxDist
>1516	ParameterType	double
>1517	Parameter	 
>1518	Identifier	nXSize
>1519	ParameterType	int
>1520	Parameter	 
>1521	Identifier	iLine
>1522	ParameterType	int
>1523	Parameter	 
>1524	Identifier	bForward
>1525	ParameterType	int
>1526	Parameter	 
>1527	Identifier	panNearY
>1528	ParameterType	int *
>1529	Parameter	 
>1530	Identifier	panNearX
>1531	ParameterType	int *
>1532	Parameter	 
>1533	Identifier	panSrcScanline
>1534	ParameterType	GInt32 *
>1535	ReturnType	static CPLErr
>1536	CompoundStatement	 
>1537	ReturnStatement	 
>1538	Identifier	CE_None
>1539	ForStatement	for ( iPixel = iStart ; iPixel != iEnd ; iPixel += iStep )
>1540	CompoundStatement	 
>1541	IfStatement	if ( panNearX [ iPixel ] != - 1 && fNearDistSq <= dfMaxDist * dfMaxDist && ( pafProximity [ iPixel ] < 0 || fNearDistSq < \
>1542	ExpressionStatement	 
>1543	AssignmentExpr	pafProximity [ iPixel ] = sqrt ( fNearDistSq )
>1544	CallExpression	sqrt ( fNearDistSq )
>1545	ArgumentList	fNearDistSq
>1546	Argument	fNearDistSq
>1547	Identifier	fNearDistSq
>1548	Callee	sqrt
>1549	Identifier	sqrt
>1550	ArrayIndexing	pafProximity [ iPixel ]
>1551	Identifier	iPixel
>1552	Identifier	pafProximity
>1553	Condition	 
>1554	AndExpression	panNearX [ iPixel ] != - 1 && fNearDistSq <= dfMaxDist * dfMaxDist && ( pafProximity [ iPixel ] < 0 || \
>1555	AndExpression	fNearDistSq <= dfMaxDist * dfMaxDist && ( pafProximity [ iPixel ] < 0 || fNearDistSq < pafProximity [ \
>1556	OrExpression	pafProximity [ iPixel ] < 0 || fNearDistSq < pafProximity [ iPixel ] * pafProximity [ iPixel ]
>1557	RelationalExpression	fNearDistSq < pafProximity [ iPixel ] * pafProximity [ iPixel ]
>1558	MultiplicativeExpression	pafProximity [ iPixel ] * pafProximity [ iPixel ]
>1559	ArrayIndexing	pafProximity [ iPixel ]
>1560	Identifier	iPixel
>1561	Identifier	pafProximity
>1562	ArrayIndexing	pafProximity [ iPixel ]
>1563	Identifier	iPixel
>1564	Identifier	pafProximity
>1565	Identifier	fNearDistSq
>1566	RelationalExpression	pafProximity [ iPixel ] < 0
>1567	PrimaryExpression	0
>1568	ArrayIndexing	pafProximity [ iPixel ]
>1569	Identifier	iPixel
>1570	Identifier	pafProximity
>1571	RelationalExpression	fNearDistSq <= dfMaxDist * dfMaxDist
>1572	MultiplicativeExpression	dfMaxDist * dfMaxDist
>1573	Identifier	dfMaxDist
>1574	Identifier	dfMaxDist
>1575	Identifier	fNearDistSq
>1576	EqualityExpression	panNearX [ iPixel ] != - 1
>1577	UnaryOp	- 1
>1578	PrimaryExpression	1
>1579	UnaryOperator	-
>1580	ArrayIndexing	panNearX [ iPixel ]
>1581	Identifier	iPixel
>1582	Identifier	panNearX
>1583	IfStatement	if ( iTR != iEnd && panNearX [ iTR ] != - 1 )
>1584	CompoundStatement	 
>1585	IfStatement	if ( fDistSq < fNearDistSq )
>1586	CompoundStatement	 
>1587	ExpressionStatement	 
>1588	AssignmentExpr	panNearY [ iPixel ] = panNearY [ iTR ]
>1589	ArrayIndexing	panNearY [ iTR ]
>1590	Identifier	iTR
>1591	Identifier	panNearY
>1592	ArrayIndexing	panNearY [ iPixel ]
>1593	Identifier	iPixel
>1594	Identifier	panNearY
>1595	ExpressionStatement	 
>1596	AssignmentExpr	panNearX [ iPixel ] = panNearX [ iTR ]
>1597	ArrayIndexing	panNearX [ iTR ]
>1598	Identifier	iTR
>1599	Identifier	panNearX
>1600	ArrayIndexing	panNearX [ iPixel ]
>1601	Identifier	iPixel
>1602	Identifier	panNearX
>1603	ExpressionStatement	 
>1604	AssignmentExpr	fNearDistSq = fDistSq
>1605	Identifier	fDistSq
>1606	Identifier	fNearDistSq
>1607	Condition	 
>1608	RelationalExpression	fDistSq < fNearDistSq
>1609	Identifier	fNearDistSq
>1610	Identifier	fDistSq
>1611	ExpressionStatement	 
>1612	AssignmentExpr	fDistSq = ( float ) ( ( panNearX [ iTR ] - iPixel ) * ( panNearX [ iTR ] - iPixel ) + ( panNearY [ iTR ] \
>1613	CastExpression	( float ) ( ( panNearX [ iTR ] - iPixel ) * ( panNearX [ iTR ] - iPixel ) + ( panNearY [ iTR ] - iLine ) * ( panNearY [ \
>1614	AdditiveExpression	( panNearX [ iTR ] - iPixel ) * ( panNearX [ iTR ] - iPixel ) + ( panNearY [ iTR ] - iLine ) * ( panNearY [ \
>1615	MultiplicativeExpression	( panNearY [ iTR ] - iLine ) * ( panNearY [ iTR ] - iLine )
>1616	AdditiveExpression	panNearY [ iTR ] - iLine
>1617	Identifier	iLine
>1618	ArrayIndexing	panNearY [ iTR ]
>1619	Identifier	iTR
>1620	Identifier	panNearY
>1621	AdditiveExpression	panNearY [ iTR ] - iLine
>1622	Identifier	iLine
>1623	ArrayIndexing	panNearY [ iTR ]
>1624	Identifier	iTR
>1625	Identifier	panNearY
>1626	MultiplicativeExpression	( panNearX [ iTR ] - iPixel ) * ( panNearX [ iTR ] - iPixel )
>1627	AdditiveExpression	panNearX [ iTR ] - iPixel
>1628	Identifier	iPixel
>1629	ArrayIndexing	panNearX [ iTR ]
>1630	Identifier	iTR
>1631	Identifier	panNearX
>1632	AdditiveExpression	panNearX [ iTR ] - iPixel
>1633	Identifier	iPixel
>1634	ArrayIndexing	panNearX [ iTR ]
>1635	Identifier	iTR
>1636	Identifier	panNearX
>1637	CastTarget	float
>1638	Identifier	fDistSq
>1639	Condition	 
>1640	AndExpression	iTR != iEnd && panNearX [ iTR ] != - 1
>1641	EqualityExpression	panNearX [ iTR ] != - 1
>1642	UnaryOp	- 1
>1643	PrimaryExpression	1
>1644	UnaryOperator	-
>1645	ArrayIndexing	panNearX [ iTR ]
>1646	Identifier	iTR
>1647	Identifier	panNearX
>1648	EqualityExpression	iTR != iEnd
>1649	Identifier	iEnd
>1650	Identifier	iTR
>1651	IdentifierDeclStatement	 
>1652	IdentifierDecl	iTR = iPixel + iStep
>1653	AssignmentExpr	iTR = iPixel + iStep
>1654	AdditiveExpression	iPixel + iStep
>1655	Identifier	iStep
>1656	Identifier	iPixel
>1657	Identifier	iTR
>1658	Identifier	iTR
>1659	IdentifierDeclType	int
>1660	IfStatement	if ( iPixel != iStart && panNearX [ iLast ] != - 1 )
>1661	CompoundStatement	 
>1662	IfStatement	if ( fDistSq < fNearDistSq )
>1663	CompoundStatement	 
>1664	ExpressionStatement	 
>1665	AssignmentExpr	panNearY [ iPixel ] = panNearY [ iLast ]
>1666	ArrayIndexing	panNearY [ iLast ]
>1667	Identifier	iLast
>1668	Identifier	panNearY
>1669	ArrayIndexing	panNearY [ iPixel ]
>1670	Identifier	iPixel
>1671	Identifier	panNearY
>1672	ExpressionStatement	 
>1673	AssignmentExpr	panNearX [ iPixel ] = panNearX [ iLast ]
>1674	ArrayIndexing	panNearX [ iLast ]
>1675	Identifier	iLast
>1676	Identifier	panNearX
>1677	ArrayIndexing	panNearX [ iPixel ]
>1678	Identifier	iPixel
>1679	Identifier	panNearX
>1680	ExpressionStatement	 
>1681	AssignmentExpr	fNearDistSq = fDistSq
>1682	Identifier	fDistSq
>1683	Identifier	fNearDistSq
>1684	Condition	 
>1685	RelationalExpression	fDistSq < fNearDistSq
>1686	Identifier	fNearDistSq
>1687	Identifier	fDistSq
>1688	ExpressionStatement	 
>1689	AssignmentExpr	fDistSq = ( float ) ( ( panNearX [ iLast ] - iPixel ) * ( panNearX [ iLast ] - iPixel ) + ( panNearY [ \
>1690	CastExpression	( float ) ( ( panNearX [ iLast ] - iPixel ) * ( panNearX [ iLast ] - iPixel ) + ( panNearY [ iLast ] - iLine ) * ( \
>1691	AdditiveExpression	( panNearX [ iLast ] - iPixel ) * ( panNearX [ iLast ] - iPixel ) + ( panNearY [ iLast ] - iLine ) * ( \
>1692	MultiplicativeExpression	( panNearY [ iLast ] - iLine ) * ( panNearY [ iLast ] - iLine )
>1693	AdditiveExpression	panNearY [ iLast ] - iLine
>1694	Identifier	iLine
>1695	ArrayIndexing	panNearY [ iLast ]
>1696	Identifier	iLast
>1697	Identifier	panNearY
>1698	AdditiveExpression	panNearY [ iLast ] - iLine
>1699	Identifier	iLine
>1700	ArrayIndexing	panNearY [ iLast ]
>1701	Identifier	iLast
>1702	Identifier	panNearY
>1703	MultiplicativeExpression	( panNearX [ iLast ] - iPixel ) * ( panNearX [ iLast ] - iPixel )
>1704	AdditiveExpression	panNearX [ iLast ] - iPixel
>1705	Identifier	iPixel
>1706	ArrayIndexing	panNearX [ iLast ]
>1707	Identifier	iLast
>1708	Identifier	panNearX
>1709	AdditiveExpression	panNearX [ iLast ] - iPixel
>1710	Identifier	iPixel
>1711	ArrayIndexing	panNearX [ iLast ]
>1712	Identifier	iLast
>1713	Identifier	panNearX
>1714	CastTarget	float
>1715	Identifier	fDistSq
>1716	Condition	 
>1717	AndExpression	iPixel != iStart && panNearX [ iLast ] != - 1
>1718	EqualityExpression	panNearX [ iLast ] != - 1
>1719	UnaryOp	- 1
>1720	PrimaryExpression	1
>1721	UnaryOperator	-
>1722	ArrayIndexing	panNearX [ iLast ]
>1723	Identifier	iLast
>1724	Identifier	panNearX
>1725	EqualityExpression	iPixel != iStart
>1726	Identifier	iStart
>1727	Identifier	iPixel
>1728	IdentifierDeclStatement	 
>1729	IdentifierDecl	iLast = iPixel - iStep
>1730	AssignmentExpr	iLast = iPixel - iStep
>1731	AdditiveExpression	iPixel - iStep
>1732	Identifier	iStep
>1733	Identifier	iPixel
>1734	Identifier	iLast
>1735	Identifier	iLast
>1736	IdentifierDeclType	int
>1737	IfStatement	if ( panNearX [ iPixel ] != - 1 )
>1738	CompoundStatement	 
>1739	IfStatement	if ( fDistSq < fNearDistSq )
>1740	ElseStatement	else
>1741	CompoundStatement	 
>1742	ExpressionStatement	 
>1743	AssignmentExpr	panNearY [ iPixel ] = - 1
>1744	UnaryOp	- 1
>1745	PrimaryExpression	1
>1746	UnaryOperator	-
>1747	ArrayIndexing	panNearY [ iPixel ]
>1748	Identifier	iPixel
>1749	Identifier	panNearY
>1750	ExpressionStatement	 
>1751	AssignmentExpr	panNearX [ iPixel ] = - 1
>1752	UnaryOp	- 1
>1753	PrimaryExpression	1
>1754	UnaryOperator	-
>1755	ArrayIndexing	panNearX [ iPixel ]
>1756	Identifier	iPixel
>1757	Identifier	panNearX
>1758	CompoundStatement	 
>1759	ExpressionStatement	 
>1760	AssignmentExpr	fNearDistSq = fDistSq
>1761	Identifier	fDistSq
>1762	Identifier	fNearDistSq
>1763	Condition	 
>1764	RelationalExpression	fDistSq < fNearDistSq
>1765	Identifier	fNearDistSq
>1766	Identifier	fDistSq
>1767	ExpressionStatement	 
>1768	AssignmentExpr	fDistSq = ( float ) ( ( panNearX [ iPixel ] - iPixel ) * ( panNearX [ iPixel ] - iPixel ) + ( panNearY [ \
>1769	CastExpression	( float ) ( ( panNearX [ iPixel ] - iPixel ) * ( panNearX [ iPixel ] - iPixel ) + ( panNearY [ iPixel ] - iLine ) * ( \
>1770	AdditiveExpression	( panNearX [ iPixel ] - iPixel ) * ( panNearX [ iPixel ] - iPixel ) + ( panNearY [ iPixel ] - iLine ) * ( \
>1771	MultiplicativeExpression	( panNearY [ iPixel ] - iLine ) * ( panNearY [ iPixel ] - iLine )
>1772	AdditiveExpression	panNearY [ iPixel ] - iLine
>1773	Identifier	iLine
>1774	ArrayIndexing	panNearY [ iPixel ]
>1775	Identifier	iPixel
>1776	Identifier	panNearY
>1777	AdditiveExpression	panNearY [ iPixel ] - iLine
>1778	Identifier	iLine
>1779	ArrayIndexing	panNearY [ iPixel ]
>1780	Identifier	iPixel
>1781	Identifier	panNearY
>1782	MultiplicativeExpression	( panNearX [ iPixel ] - iPixel ) * ( panNearX [ iPixel ] - iPixel )
>1783	AdditiveExpression	panNearX [ iPixel ] - iPixel
>1784	Identifier	iPixel
>1785	ArrayIndexing	panNearX [ iPixel ]
>1786	Identifier	iPixel
>1787	Identifier	panNearX
>1788	AdditiveExpression	panNearX [ iPixel ] - iPixel
>1789	Identifier	iPixel
>1790	ArrayIndexing	panNearX [ iPixel ]
>1791	Identifier	iPixel
>1792	Identifier	panNearX
>1793	CastTarget	float
>1794	Identifier	fDistSq
>1795	Condition	 
>1796	EqualityExpression	panNearX [ iPixel ] != - 1
>1797	UnaryOp	- 1
>1798	PrimaryExpression	1
>1799	UnaryOperator	-
>1800	ArrayIndexing	panNearX [ iPixel ]
>1801	Identifier	iPixel
>1802	Identifier	panNearX
>1803	IdentifierDeclStatement	 
>1804	IdentifierDecl	fDistSq
>1805	Identifier	fDistSq
>1806	IdentifierDeclType	float
>1807	IdentifierDeclStatement	 
>1808	IdentifierDecl	fNearDistSq = ( float ) ( MAX ( dfMaxDist , nXSize ) * MAX ( dfMaxDist , nXSize ) * 2 )
>1809	AssignmentExpr	fNearDistSq = ( float ) ( MAX ( dfMaxDist , nXSize ) * MAX ( dfMaxDist , nXSize ) * 2 )
>1810	CastExpression	( float ) ( MAX ( dfMaxDist , nXSize ) * MAX ( dfMaxDist , nXSize ) * 2 )
>1811	MultiplicativeExpression	MAX ( dfMaxDist , nXSize ) * MAX ( dfMaxDist , nXSize ) * 2
>1812	MultiplicativeExpression	MAX ( dfMaxDist , nXSize ) * 2
>1813	PrimaryExpression	2
>1814	CallExpression	MAX ( dfMaxDist , nXSize )
>1815	ArgumentList	dfMaxDist
>1816	Argument	nXSize
>1817	Identifier	nXSize
>1818	Argument	dfMaxDist
>1819	Identifier	dfMaxDist
>1820	Callee	MAX
>1821	Identifier	MAX
>1822	CallExpression	MAX ( dfMaxDist , nXSize )
>1823	ArgumentList	dfMaxDist
>1824	Argument	nXSize
>1825	Identifier	nXSize
>1826	Argument	dfMaxDist
>1827	Identifier	dfMaxDist
>1828	Callee	MAX
>1829	Identifier	MAX
>1830	CastTarget	float
>1831	Identifier	fNearDistSq
>1832	Identifier	fNearDistSq
>1833	IdentifierDeclType	float
>1834	IfStatement	if ( bIsTarget )
>1835	CompoundStatement	 
>1836	ContinueStatement	 
>1837	ExpressionStatement	 
>1838	AssignmentExpr	panNearY [ iPixel ] = iLine
>1839	Identifier	iLine
>1840	ArrayIndexing	panNearY [ iPixel ]
>1841	Identifier	iPixel
>1842	Identifier	panNearY
>1843	ExpressionStatement	 
>1844	AssignmentExpr	panNearX [ iPixel ] = iPixel
>1845	Identifier	iPixel
>1846	ArrayIndexing	panNearX [ iPixel ]
>1847	Identifier	iPixel
>1848	Identifier	panNearX
>1849	ExpressionStatement	 
>1850	AssignmentExpr	pafProximity [ iPixel ] = 0.0
>1851	PrimaryExpression	0.0
>1852	ArrayIndexing	pafProximity [ iPixel ]
>1853	Identifier	iPixel
>1854	Identifier	pafProximity
>1855	Condition	 
>1856	Identifier	bIsTarget
>1857	IfStatement	if ( nTargetValues == 0 )
>1858	ElseStatement	else
>1859	CompoundStatement	 
>1860	ForStatement	for ( i = 0 ; i < nTargetValues ; i ++ )
>1861	CompoundStatement	 
>1862	IfStatement	if ( panSrcScanline [ iPixel ] == panTargetValues [ i ] )
>1863	ExpressionStatement	 
>1864	AssignmentExpr	bIsTarget = TRUE
>1865	Identifier	TRUE
>1866	Identifier	bIsTarget
>1867	Condition	 
>1868	EqualityExpression	panSrcScanline [ iPixel ] == panTargetValues [ i ]
>1869	ArrayIndexing	panTargetValues [ i ]
>1870	Identifier	i
>1871	Identifier	panTargetValues
>1872	ArrayIndexing	panSrcScanline [ iPixel ]
>1873	Identifier	iPixel
>1874	Identifier	panSrcScanline
>1875	IncDecOp	 
>1876	IncDec	++
>1877	Identifier	i
>1878	Condition	 
>1879	RelationalExpression	i < nTargetValues
>1880	Identifier	nTargetValues
>1881	Identifier	i
>1882	ForInit	 
>1883	AssignmentExpr	i = 0
>1884	PrimaryExpression	0
>1885	Identifier	i
>1886	IdentifierDeclStatement	 
>1887	IdentifierDecl	i
>1888	Identifier	i
>1889	IdentifierDeclType	int
>1890	ExpressionStatement	 
>1891	AssignmentExpr	bIsTarget = ( panSrcScanline [ iPixel ] != 0 )
>1892	EqualityExpression	panSrcScanline [ iPixel ] != 0
>1893	PrimaryExpression	0
>1894	ArrayIndexing	panSrcScanline [ iPixel ]
>1895	Identifier	iPixel
>1896	Identifier	panSrcScanline
>1897	Identifier	bIsTarget
>1898	Condition	 
>1899	EqualityExpression	nTargetValues == 0
>1900	PrimaryExpression	0
>1901	Identifier	nTargetValues
>1902	IdentifierDeclStatement	 
>1903	IdentifierDecl	bIsTarget = FALSE
>1904	AssignmentExpr	bIsTarget = FALSE
>1905	Identifier	FALSE
>1906	Identifier	FALSE
>1907	Identifier	bIsTarget
>1908	IdentifierDeclType	int
>1909	AssignmentExpr	 
>1910	Identifier	iStep
>1911	Identifier	iPixel
>1912	Condition	 
>1913	EqualityExpression	iPixel != iEnd
>1914	Identifier	iEnd
>1915	Identifier	iPixel
>1916	ForInit	 
>1917	AssignmentExpr	iPixel = iStart
>1918	Identifier	iStart
>1919	Identifier	iPixel
>1920	IfStatement	if ( bForward )
>1921	ElseStatement	else
>1922	CompoundStatement	 
>1923	ExpressionStatement	 
>1924	AssignmentExpr	iStep = - 1
>1925	UnaryOp	- 1
>1926	PrimaryExpression	1
>1927	UnaryOperator	-
>1928	Identifier	iStep
>1929	ExpressionStatement	 
>1930	AssignmentExpr	iEnd = - 1
>1931	UnaryOp	- 1
>1932	PrimaryExpression	1
>1933	UnaryOperator	-
>1934	Identifier	iEnd
>1935	ExpressionStatement	 
>1936	AssignmentExpr	iStart = nXSize - 1
>1937	AdditiveExpression	nXSize - 1
>1938	PrimaryExpression	1
>1939	Identifier	nXSize
>1940	Identifier	iStart
>1941	CompoundStatement	 
>1942	ExpressionStatement	 
>1943	AssignmentExpr	iStep = 1
>1944	PrimaryExpression	1
>1945	Identifier	iStep
>1946	ExpressionStatement	 
>1947	AssignmentExpr	iEnd = nXSize
>1948	Identifier	nXSize
>1949	Identifier	iEnd
>1950	ExpressionStatement	 
>1951	AssignmentExpr	iStart = 0
>1952	PrimaryExpression	0
>1953	Identifier	iStart
>1954	Condition	 
>1955	Identifier	bForward
>1956	IdentifierDeclStatement	 
>1957	IdentifierDecl	iPixel
>1958	Identifier	iPixel
>1959	IdentifierDeclType	int
>1960	IdentifierDecl	iStep
>1961	Identifier	iStep
>1962	IdentifierDeclType	int
>1963	IdentifierDecl	iEnd
>1964	Identifier	iEnd
>1965	IdentifierDeclType	int
>1966	IdentifierDecl	iStart
>1967	Identifier	iStart
>1968	IdentifierDeclType	int
<5=23,22,6
<6=19,16,13,10,7
<7=9,8
<10=12,11
<13=15,14
<16=18,17
<19=21,20
<23=1407,1403,24,26,65,72,79,86,93,100,102,381,405,604,628,663,678,693,708,723,828,835,839,846,853,866,878,885,892,927,1008,1019,1026,1033,1050,1061,1107,1118,1122,1155,1164,1173,1186,1217,1228,1343,1354,1361,1370,1381,1392,1399
<24=25
<26=61,27
<27=49,42,28
<28=29
<29=40,30
<30=33,31
<31=32
<33=34
<34=38,35
<35=36
<36=37
<38=39
<40=41
<42=43
<43=47,44
<44=45
<45=46
<47=48
<49=50
<50=60,59,51
<51=58,52
<52=56,53
<53=54
<54=55
<56=57
<61=62
<62=64,63
<65=66
<66=70,67
<67=68
<68=69
<70=71
<72=73
<73=77,74
<74=75
<75=76
<77=78
<79=80
<80=84,81
<81=82
<82=83
<84=85
<86=87
<87=91,88
<88=89
<89=90
<91=92
<93=94
<94=98,95
<95=96
<96=97
<98=99
<100=101
<102=375,367,364,103
<103=333,327,296,290,265,240,181,150,144,104
<104=121,105
<105=110,106
<106=107
<107=109,108
<110=111
<111=119,112
<112=117,115,113
<113=114
<115=116
<117=118
<119=120
<121=122
<122=143,123
<123=141,124
<124=129,127,125
<125=126
<127=128
<129=130
<130=140,131
<131=139,132
<132=136,133
<133=135,134
<136=138,137
<141=142
<144=146,145
<146=147
<147=149,148
<150=151
<151=180,152
<152=178,153
<153=176,174,172,170,168,166,164,162,160,158,156,154
<154=155
<156=157
<158=159
<160=161
<162=163
<164=165
<166=167
<168=169
<170=171
<172=173
<174=175
<176=177
<178=179
<181=236,232,229,182
<182=183
<183=223,217,184
<184=185
<185=211,186
<186=187
<187=209,201,188
<188=189
<189=190
<190=198,191
<191=197,192
<192=194,193
<194=196,195
<198=200,199
<201=202
<202=206,203
<203=205,204
<206=208,207
<209=210
<211=212
<212=214,213
<214=216,215
<217=218
<218=220,219
<220=222,221
<223=224
<224=226,225
<226=228,227
<229=231,230
<232=233
<233=235,234
<236=237
<237=239,238
<240=241
<241=263,242
<242=261,259,257,255,253,251,249,247,245,243
<243=244
<245=246
<247=248
<249=250
<251=252
<253=254
<255=256
<257=258
<259=260
<261=262
<263=264
<265=266
<266=288,267
<267=286,284,282,280,278,276,274,272,270,268
<268=269
<270=271
<272=273
<274=275
<276=277
<278=279
<280=281
<282=283
<284=285
<286=287
<288=289
<290=292,291
<292=293
<293=295,294
<296=297
<297=326,298
<298=324,299
<299=322,320,318,316,314,312,310,308,306,304,302,300
<300=301
<302=303
<304=305
<306=307
<308=309
<310=311
<312=313
<314=315
<316=317
<318=319
<320=321
<322=323
<324=325
<327=329,328
<329=330
<330=332,331
<333=334
<334=363,335
<335=361,336
<336=359,357,355,353,351,349,347,345,343,341,339,337
<337=338
<339=340
<341=342
<343=344
<345=346
<347=348
<349=350
<351=352
<353=354
<355=356
<357=358
<359=360
<361=362
<364=366,365
<367=368
<368=372,369
<369=371,370
<372=374,373
<375=376
<376=380,377
<377=379,378
<381=401,397,394,382
<382=383
<383=391,384
<384=388,385
<385=387,386
<388=390,389
<391=393,392
<394=396,395
<397=398
<398=400,399
<401=402
<402=404,403
<405=600,592,589,406
<406=558,552,532,507,482,451,445,407
<407=424,408
<408=413,409
<409=410
<410=412,411
<413=414
<414=422,415
<415=420,418,416
<416=417
<418=419
<420=421
<422=423
<424=425
<425=444,426
<426=442,427
<427=432,430,428
<428=429
<430=431
<432=433
<433=441,434
<434=438,435
<435=437,436
<438=440,439
<442=443
<445=447,446
<447=448
<448=450,449
<451=452
<452=481,453
<453=479,454
<454=477,475,473,471,469,467,465,463,461,459,457,455
<455=456
<457=458
<459=460
<461=462
<463=464
<465=466
<467=468
<469=470
<471=472
<473=474
<475=476
<477=478
<479=480
<482=483
<483=505,484
<484=503,501,499,497,495,493,491,489,487,485
<485=486
<487=488
<489=490
<491=492
<493=494
<495=496
<497=498
<499=500
<501=502
<503=504
<505=506
<507=508
<508=530,509
<509=528,526,524,522,520,518,516,514,512,510
<510=511
<512=513
<514=515
<516=517
<518=519
<520=521
<522=523
<524=525
<526=527
<528=529
<530=531
<532=548,544,541,533
<533=534
<534=538,535
<535=537,536
<538=540,539
<541=543,542
<544=545
<545=547,546
<548=549
<549=551,550
<552=554,553
<554=555
<555=557,556
<558=559
<559=588,560
<560=586,561
<561=584,582,580,578,576,574,572,570,568,566,564,562
<562=563
<564=565
<566=567
<568=569
<570=571
<572=573
<574=575
<576=577
<578=579
<580=581
<582=583
<584=585
<586=587
<589=591,590
<592=593
<593=597,594
<594=596,595
<597=599,598
<600=601
<601=603,602
<604=624,620,617,605
<605=606
<606=614,607
<607=611,608
<608=610,609
<611=613,612
<614=616,615
<617=619,618
<620=621
<621=623,622
<624=625
<625=627,626
<628=647,629
<629=636,632,630
<630=631
<632=633
<633=635,634
<636=637
<637=645,638
<638=643,641,639
<639=640
<641=642
<643=644
<645=646
<647=648
<648=660,649
<649=657,650
<650=654,651
<651=653,652
<654=656,655
<657=659,658
<660=662,661
<663=664
<664=677,665
<665=676,666
<666=674,667
<667=670,668
<668=669
<670=671
<671=673,672
<674=675
<678=679
<679=692,680
<680=691,681
<681=689,682
<682=685,683
<683=684
<685=686
<686=688,687
<689=690
<693=694
<694=707,695
<695=706,696
<696=704,697
<697=700,698
<698=699
<700=701
<701=703,702
<704=705
<708=709
<709=722,710
<710=721,711
<711=719,712
<712=715,713
<713=714
<715=716
<716=718,717
<719=720
<723=816,724
<724=804,781,769,748,736,725
<725=726
<726=735,727
<727=733,728
<728=731,729
<729=730
<731=732
<733=734
<736=744,737
<737=740,738
<738=739
<740=741
<741=743,742
<744=745
<745=747,746
<748=749
<749=768,750
<750=766,751
<751=764,762,760,758,756,754,752
<752=753
<754=755
<756=757
<758=759
<760=761
<762=763
<764=765
<766=767
<769=770
<770=780,779,771
<771=778,772
<772=776,773
<773=774
<774=775
<776=777
<781=800,782
<782=789,785,783
<783=784
<785=786
<786=788,787
<789=790
<790=798,791
<791=796,794,792
<792=793
<794=795
<796=797
<798=799
<800=801
<801=803,802
<804=805
<805=815,814,806
<806=813,807
<807=811,808
<808=809
<809=810
<811=812
<816=817
<817=825,818
<818=822,819
<819=821,820
<822=824,823
<825=827,826
<828=829
<829=834,833,830
<830=832,831
<835=836
<836=838,837
<839=840
<840=845,844,841
<841=843,842
<846=847
<847=852,851,848
<848=850,849
<853=860,854
<854=859,858,855
<855=857,856
<860=865,864,861
<861=863,862
<866=867
<867=877,876,868
<868=875,869
<869=873,870
<870=871
<871=872
<873=874
<878=879
<879=884,883,880
<880=882,881
<885=886
<886=891,890,887
<887=889,888
<892=914,893
<893=903,896,894
<894=895
<896=897
<897=901,898
<898=899
<899=900
<901=902
<903=904
<904=912,905
<905=910,908,906
<906=907
<908=909
<910=911
<912=913
<914=915
<915=926,916
<916=924,917
<917=922,920,918
<918=919
<920=921
<922=923
<924=925
<927=1004,928
<928=1000,985,976,961,936,929
<929=930
<930=934,931
<931=932
<932=933
<934=935
<936=957,953,950,937
<937=938
<938=947,939
<939=945,940
<940=941
<941=942
<942=944,943
<945=946
<947=949,948
<950=952,951
<953=954
<954=956,955
<957=958
<958=960,959
<961=962
<962=975,963
<963=974,964
<964=972,965
<965=968,966
<966=967
<968=969
<969=971,970
<972=973
<976=977
<977=984,978
<978=982,979
<979=980
<980=981
<982=983
<985=986
<986=999,987
<987=997,988
<988=995,993,991,989
<989=990
<991=992
<993=994
<995=996
<997=998
<1000=1001
<1001=1003,1002
<1004=1005
<1005=1007,1006
<1008=1009
<1009=1018,1010
<1010=1016,1011
<1011=1014,1012
<1012=1013
<1014=1015
<1016=1017
<1019=1020
<1020=1025,1024,1021
<1021=1023,1022
<1026=1027
<1027=1032,1031,1028
<1028=1030,1029
<1033=1048,1034
<1034=1039,1035
<1035=1036
<1036=1038,1037
<1039=1040
<1040=1047,1041
<1041=1045,1042
<1042=1043
<1043=1044
<1045=1046
<1048=1049
<1050=1051
<1051=1060,1052
<1052=1058,1053
<1053=1056,1054
<1054=1055
<1056=1057
<1058=1059
<1061=1103,1092,1062
<1062=1063
<1063=1088,1073,1064
<1064=1069,1065
<1065=1066
<1066=1068,1067
<1069=1070
<1070=1072,1071
<1073=1074
<1074=1087,1075
<1075=1086,1076
<1076=1084,1077
<1077=1082,1078
<1078=1079
<1079=1081,1080
<1082=1083
<1084=1085
<1088=1089
<1089=1091,1090
<1092=1093
<1093=1102,1094
<1094=1101,1095
<1095=1099,1096
<1096=1097
<1097=1098
<1099=1100
<1103=1104
<1104=1106,1105
<1107=1108
<1108=1117,1109
<1109=1115,1110
<1110=1113,1111
<1111=1112
<1113=1114
<1115=1116
<1118=1119
<1119=1121,1120
<1122=1137,1123
<1123=1126,1124
<1124=1125
<1126=1127
<1127=1135,1128
<1128=1133,1131,1129
<1129=1130
<1131=1132
<1133=1134
<1135=1136
<1137=1138
<1138=1147,1139
<1139=1146,1140
<1140=1144,1141
<1141=1142
<1142=1143
<1144=1145
<1147=1154,1148
<1148=1152,1149
<1149=1150
<1150=1151
<1152=1153
<1155=1156
<1156=1163,1157
<1157=1161,1158
<1158=1159
<1159=1160
<1161=1162
<1164=1165
<1165=1172,1166
<1166=1170,1167
<1167=1168
<1168=1169
<1170=1171
<1173=1174
<1174=1184,1175
<1175=1182,1180,1178,1176
<1176=1177
<1178=1179
<1180=1181
<1182=1183
<1184=1185
<1186=1215,1204,1187
<1187=1188
<1188=1189
<1189=1203,1190
<1190=1197,1191
<1191=1195,1192
<1192=1193
<1193=1194
<1195=1196
<1197=1201,1198
<1198=1199
<1199=1200
<1201=1202
<1204=1205
<1205=1214,1206
<1206=1208,1207
<1208=1212,1209
<1209=1210
<1210=1211
<1212=1213
<1215=1216
<1217=1218
<1218=1227,1219
<1219=1225,1220
<1220=1223,1221
<1221=1222
<1223=1224
<1225=1226
<1228=1341,1229
<1229=1230
<1230=1332,1260,1231
<1231=1232
<1232=1249,1233
<1233=1236,1234
<1234=1235
<1236=1237
<1237=1247,1238
<1238=1245,1243,1241,1239
<1239=1240
<1241=1242
<1243=1244
<1245=1246
<1247=1248
<1249=1250
<1250=1259,1251
<1251=1257,1252
<1252=1255,1253
<1253=1254
<1255=1256
<1257=1258
<1260=1320,1261
<1261=1318,1262
<1262=1313,1304,1274,1263
<1263=1264
<1264=1273,1265
<1265=1271,1266
<1266=1267
<1267=1268
<1268=1270,1269
<1271=1272
<1274=1286,1275
<1275=1276
<1276=1284,1277
<1277=1282,1280,1278
<1278=1279
<1280=1281
<1282=1283
<1284=1285
<1286=1287
<1287=1296,1288
<1288=1294,1289
<1289=1290
<1290=1291
<1291=1293,1292
<1294=1295
<1296=1302,1297
<1297=1298
<1298=1299
<1299=1301,1300
<1302=1303
<1304=1305
<1305=1311,1306
<1306=1309,1307
<1307=1308
<1309=1310
<1311=1312
<1313=1314
<1314=1317,1316,1315
<1318=1319
<1320=1321
<1321=1331,1330,1322
<1322=1329,1323
<1323=1327,1324
<1324=1325
<1325=1326
<1327=1328
<1332=1333
<1333=1339,1334
<1334=1337,1335
<1335=1336
<1337=1338
<1339=1340
<1341=1342
<1343=1344
<1344=1353,1345
<1345=1351,1346
<1346=1349,1347
<1347=1348
<1349=1350
<1351=1352
<1354=1355
<1355=1360,1359,1356
<1356=1358,1357
<1361=1366,1362
<1362=1363
<1363=1365,1364
<1366=1367
<1367=1369,1368
<1370=1371
<1371=1379,1372
<1372=1377,1375,1373
<1373=1374
<1375=1376
<1377=1378
<1379=1380
<1381=1382
<1382=1390,1383
<1383=1388,1386,1384
<1384=1385
<1386=1387
<1388=1389
<1390=1391
<1392=1393
<1393=1398,1397,1394
<1394=1396,1395
<1399=1400
<1400=1402,1401
<1403=1404
<1404=1406,1405
<1407=1420,1417,1414,1408
<1408=1413,1412,1409
<1409=1411,1410
<1414=1416,1415
<1417=1419,1418
<1420=1422,1421
<1503=1536,1535,1504
<1504=1532,1529,1526,1523,1520,1517,1514,1511,1508,1505
<1505=1507,1506
<1508=1510,1509
<1511=1513,1512
<1514=1516,1515
<1517=1519,1518
<1520=1522,1521
<1523=1525,1524
<1526=1528,1527
<1529=1531,1530
<1532=1534,1533
<1536=1956,1920,1539,1537
<1537=1538
<1539=1916,1912,1909,1540
<1540=1902,1857,1834,1807,1803,1737,1728,1660,1651,1583,1541
<1541=1553,1542
<1542=1543
<1543=1550,1544
<1544=1548,1545
<1545=1546
<1546=1547
<1548=1549
<1550=1552,1551
<1553=1554
<1554=1576,1555
<1555=1571,1556
<1556=1566,1557
<1557=1565,1558
<1558=1562,1559
<1559=1561,1560
<1562=1564,1563
<1566=1568,1567
<1568=1570,1569
<1571=1575,1572
<1572=1574,1573
<1576=1580,1577
<1577=1579,1578
<1580=1582,1581
<1583=1639,1584
<1584=1611,1585
<1585=1607,1586
<1586=1603,1595,1587
<1587=1588
<1588=1592,1589
<1589=1591,1590
<1592=1594,1593
<1595=1596
<1596=1600,1597
<1597=1599,1598
<1600=1602,1601
<1603=1604
<1604=1606,1605
<1607=1608
<1608=1610,1609
<1611=1612
<1612=1638,1613
<1613=1637,1614
<1614=1626,1615
<1615=1621,1616
<1616=1618,1617
<1618=1620,1619
<1621=1623,1622
<1623=1625,1624
<1626=1632,1627
<1627=1629,1628
<1629=1631,1630
<1632=1634,1633
<1634=1636,1635
<1639=1640
<1640=1648,1641
<1641=1645,1642
<1642=1644,1643
<1645=1647,1646
<1648=1650,1649
<1651=1652
<1652=1659,1658,1653
<1653=1657,1654
<1654=1656,1655
<1660=1716,1661
<1661=1688,1662
<1662=1684,1663
<1663=1680,1672,1664
<1664=1665
<1665=1669,1666
<1666=1668,1667
<1669=1671,1670
<1672=1673
<1673=1677,1674
<1674=1676,1675
<1677=1679,1678
<1680=1681
<1681=1683,1682
<1684=1685
<1685=1687,1686
<1688=1689
<1689=1715,1690
<1690=1714,1691
<1691=1703,1692
<1692=1698,1693
<1693=1695,1694
<1695=1697,1696
<1698=1700,1699
<1700=1702,1701
<1703=1709,1704
<1704=1706,1705
<1706=1708,1707
<1709=1711,1710
<1711=1713,1712
<1716=1717
<1717=1725,1718
<1718=1722,1719
<1719=1721,1720
<1722=1724,1723
<1725=1727,1726
<1728=1729
<1729=1736,1735,1730
<1730=1734,1731
<1731=1733,1732
<1737=1795,1738
<1738=1767,1739
<1739=1763,1758,1740
<1740=1741
<1741=1750,1742
<1742=1743
<1743=1747,1744
<1744=1746,1745
<1747=1749,1748
<1750=1751
<1751=1755,1752
<1752=1754,1753
<1755=1757,1756
<1758=1759
<1759=1760
<1760=1762,1761
<1763=1764
<1764=1766,1765
<1767=1768
<1768=1794,1769
<1769=1793,1770
<1770=1782,1771
<1771=1777,1772
<1772=1774,1773
<1774=1776,1775
<1777=1779,1778
<1779=1781,1780
<1782=1788,1783
<1783=1785,1784
<1785=1787,1786
<1788=1790,1789
<1790=1792,1791
<1795=1796
<1796=1800,1797
<1797=1799,1798
<1800=1802,1801
<1803=1804
<1804=1806,1805
<1807=1808
<1808=1833,1832,1809
<1809=1831,1810
<1810=1830,1811
<1811=1822,1812
<1812=1814,1813
<1814=1820,1815
<1815=1818,1816
<1816=1817
<1818=1819
<1820=1821
<1822=1828,1823
<1823=1826,1824
<1824=1825
<1826=1827
<1828=1829
<1834=1855,1835
<1835=1849,1843,1837,1836
<1837=1838
<1838=1840,1839
<1840=1842,1841
<1843=1844
<1844=1846,1845
<1846=1848,1847
<1849=1850
<1850=1852,1851
<1852=1854,1853
<1855=1856
<1857=1898,1890,1858
<1858=1859
<1859=1886,1860
<1860=1882,1878,1875,1861
<1861=1862
<1862=1867,1863
<1863=1864
<1864=1866,1865
<1867=1868
<1868=1872,1869
<1869=1871,1870
<1872=1874,1873
<1875=1877,1876
<1878=1879
<1879=1881,1880
<1882=1883
<1883=1885,1884
<1886=1887
<1887=1889,1888
<1890=1891
<1891=1897,1892
<1892=1894,1893
<1894=1896,1895
<1898=1899
<1899=1901,1900
<1902=1903
<1903=1908,1907,1904
<1904=1906,1905
<1909=1911,1910
<1912=1913
<1913=1915,1914
<1916=1917
<1917=1919,1918
<1920=1954,1941,1921
<1921=1922
<1922=1935,1929,1923
<1923=1924
<1924=1928,1925
<1925=1927,1926
<1929=1930
<1930=1934,1931
<1931=1933,1932
<1935=1936
<1936=1940,1937
<1937=1939,1938
<1941=1950,1946,1942
<1942=1943
<1943=1945,1944
<1946=1947
<1947=1949,1948
<1950=1951
<1951=1953,1952
<1954=1955
<1956=1966,1963,1960,1957
<1957=1959,1958
<1960=1962,1961
<1963=1965,1964
<1966=1968,1967
