>7	FunctionDef	OsmXmlParser (bool ignoreUnknownEntities)
>8	ParameterList	bool ignoreUnknownEntities
>9	Parameter	 
>10	Identifier	ignoreUnknownEntities
>11	ParameterType	bool
>12	CompoundStatement	 
>17	FunctionDef	parse (const path & xml_file)
>18	ParameterList	const path & xml_file
>19	Parameter	 
>20	Identifier	xml_file
>21	ParameterType	const path &
>22	ReturnType	void
>23	CompoundStatement	 
>24	BlockStarter	 
>25	CompoundStatement	 
>26	ExpressionStatement	BOOST_THROW_EXCEPTION ( excp 
>27	CallExpression	BOOST_THROW_EXCEPTION ( excp 
>28	ArgumentList	excp 
>29	Argument	excp 
>30	ShiftExpression	excp 
>31	ShiftExpression	excp 
>32	CallExpression	excp 
>33	ArgumentList	e . what ( )
>34	Argument	e . what ( )
>35	CallExpression	e . what ( )
>36	ArgumentList	 
>37	Callee	e . what
>38	MemberAccess	e . what
>39	Identifier	what
>40	Identifier	e
>41	Callee	excp 
>42	Identifier	excp 
>43	CallExpression	excp 
>44	ArgumentList	xml_file . string ( )
>45	Argument	xml_file . string ( )
>46	CallExpression	xml_file . string ( )
>47	ArgumentList	 
>48	Callee	xml_file . string
>49	MemberAccess	xml_file . string
>50	Identifier	string
>51	Identifier	xml_file
>52	Callee	excp 
>53	Identifier	excp 
>54	CallExpression	excp 
>55	ArgumentList	 
>56	Callee	excp 
>57	Identifier	excp 
>58	Callee	BOOST_THROW_EXCEPTION
>59	Identifier	BOOST_THROW_EXCEPTION
>60	Identifier	e
>61	BlockStarter	 
>62	CompoundStatement	 
>63	ExpressionStatement	 
>64	Statement	throw
>65	ExpressionStatement	e << excp 
>66	ShiftExpression	e << excp 
>67	CallExpression	excp 
>68	ArgumentList	xml_file . string ( )
>69	Argument	xml_file . string ( )
>70	CallExpression	xml_file . string ( )
>71	ArgumentList	 
>72	Callee	xml_file . string
>73	MemberAccess	xml_file . string
>74	Identifier	string
>75	Identifier	xml_file
>76	Callee	excp 
>77	Identifier	excp 
>78	Identifier	e
>79	Identifier	e
>80	BlockStarter	 
>81	CompoundStatement	 
>82	ExpressionStatement	parseEntities ( osm )
>83	CallExpression	parseEntities ( osm )
>84	ArgumentList	osm
>85	Argument	osm
>86	Identifier	osm
>87	Callee	parseEntities
>88	Identifier	parseEntities
>89	IfStatement	if ( ! osm )
>90	ExpressionStatement	BOOST_THROW_EXCEPTION ( excp 
>91	CallExpression	BOOST_THROW_EXCEPTION ( excp 
>92	ArgumentList	excp 
>93	Argument	excp 
>94	ShiftExpression	excp 
>95	ShiftExpression	excp 
>96	CallExpression	excp 
>97	ArgumentList	\"Missing \\"<osm>\\" xml node!\"
>98	Argument	\"Missing \\"<osm>\\" xml node!\"
>99	PrimaryExpression	\"Missing \\"<osm>\\" xml node!\"
>100	Callee	excp 
>101	Identifier	excp 
>102	CallExpression	excp 
>103	ArgumentList	\"<osm>\"
>104	Argument	\"<osm>\"
>105	PrimaryExpression	\"<osm>\"
>106	Callee	excp 
>107	Identifier	excp 
>108	CallExpression	excp 
>109	ArgumentList	 
>110	Callee	excp 
>111	Identifier	excp 
>112	Callee	BOOST_THROW_EXCEPTION
>113	Identifier	BOOST_THROW_EXCEPTION
>114	Condition	! osm
>115	UnaryOp	! osm
>116	Identifier	osm
>117	UnaryOperator	!
>118	ExpressionStatement	* osm = document . first_node ( \"osm\" )
>119	AssignmentExpr	* osm = document . first_node ( \"osm\" )
>120	CallExpression	document . first_node ( \"osm\" )
>121	ArgumentList	\"osm\"
>122	Argument	\"osm\"
>123	PrimaryExpression	\"osm\"
>124	Callee	document . first_node
>125	MemberAccess	document . first_node
>126	Identifier	first_node
>127	Identifier	document
>128	UnaryOp	* osm
>129	Identifier	osm
>130	UnaryOperator	*
>131	Statement	>
>132	Statement	<
>133	Statement	xml_node
>134	Statement	 
>135	Statement	eaglexml
>136	ExpressionStatement	document . parse < parser_flags > ( & cache )
>137	RelationalExpression	document . parse < parser_flags > ( & cache )
>138	RelationalExpression	parser_flags > ( & cache )
>139	UnaryOp	& cache
>140	Identifier	cache
>141	UnaryOperator	&
>142	Identifier	parser_flags
>143	MemberAccess	document . parse
>144	Identifier	parse
>145	Identifier	document
>146	ExpressionStatement	 
>147	CallExpression	cache . observer ( this )
>148	ArgumentList	this
>149	Argument	this
>150	Identifier	this
>151	Callee	cache . observer
>152	MemberAccess	cache . observer
>153	Identifier	observer
>154	Identifier	cache
>155	ExpressionStatement	 
>156	CallExpression	cache . max_segments_to_read ( 1 )
>157	ArgumentList	1
>158	Argument	1
>159	PrimaryExpression	1
>160	Callee	cache . max_segments_to_read
>161	MemberAccess	cache . max_segments_to_read
>162	Identifier	max_segments_to_read
>163	Identifier	cache
>164	ExpressionStatement	 
>165	CallExpression	cache . segment_size ( segmentSize )
>166	ArgumentList	segmentSize
>167	Argument	segmentSize
>168	Identifier	segmentSize
>169	Callee	cache . segment_size
>170	MemberAccess	cache . segment_size
>171	Identifier	segment_size
>172	Identifier	cache
>173	ExpressionStatement	 
>174	Identifier	document
>175	Statement	 
>176	Statement	 
>177	Statement	 
>178	Statement	 
>179	Statement	 
>180	ExpressionStatement	 
>181	CallExpression	cache ( xml_stream , 8 * 1024 * 1024 )
>182	ArgumentList	xml_stream
>183	Argument	8 * 1024 * 1024
>184	MultiplicativeExpression	8 * 1024 * 1024
>185	MultiplicativeExpression	1024 * 1024
>186	PrimaryExpression	1024
>187	PrimaryExpression	1024
>188	PrimaryExpression	8
>189	Argument	xml_stream
>190	Identifier	xml_stream
>191	Callee	cache
>192	Identifier	cache
>193	Statement	 
>194	Statement	 
>195	Statement	 
>196	Statement	 
>197	Statement	 
>198	ExpressionStatement	 
>199	Statement	 
>200	Statement	 
>201	Statement	 
>202	Statement	 
>203	Statement	 
>204	Statement	 
>205	Statement	 
>206	Statement	 
>207	Statement	 
>208	Statement	 
>209	Statement	 
>210	Statement	 
>211	Statement	 
>212	Statement	 
>213	Statement	 
>214	ExpressionStatement	 
>215	Statement	 
>216	Statement	 
>217	Statement	 
>218	Statement	 
>219	Statement	 
>220	Statement	 
>221	Statement	 
>222	Statement	 
>223	Statement	 
>224	Statement	 
>225	Statement	 
>226	Statement	 
>227	Statement	 
>228	Statement	 
>229	Statement	 
>230	ExpressionStatement	 
>231	Statement	 
>232	Statement	 
>233	Statement	 
>234	Statement	 
>235	Statement	 
>236	Statement	 
>237	Statement	 
>238	Statement	 
>239	Statement	 
>240	Statement	 
>241	Statement	 
>242	Statement	 
>243	Statement	 
>244	Statement	 
>245	Statement	 
>246	ExpressionStatement	 
>247	ShiftExpression	log . infoStream ( ) << \"File size is \" << fileSize / ( 1024 ) << \"kb\"
>248	ShiftExpression	\"File size is \" << fileSize / ( 1024 ) << \"kb\"
>249	ShiftExpression	fileSize / ( 1024 ) << \"kb\"
>250	PrimaryExpression	\"kb\"
>251	MultiplicativeExpression	fileSize / ( 1024 )
>252	PrimaryExpression	1024
>253	Identifier	fileSize
>254	PrimaryExpression	\"File size is \"
>255	CallExpression	log . infoStream ( )
>256	ArgumentList	 
>257	Callee	log . infoStream
>258	MemberAccess	log . infoStream
>259	Identifier	infoStream
>260	Identifier	log
>261	ExpressionStatement	 
>262	AssignmentExpr	fileSize = boost 
>263	CallExpression	boost 
>264	ArgumentList	xml_file
>265	Argument	xml_file
>266	Identifier	xml_file
>267	Callee	boost 
>268	Identifier	boost 
>269	Identifier	fileSize
>270	ExpressionStatement	 
>271	ShiftExpression	log . infoStream ( ) << \"Load xml-file \\"\" << xml_file . string ( ) << \"\\"\"
>272	ShiftExpression	\"Load xml-file \\"\" << xml_file . string ( ) << \"\\"\"
>273	ShiftExpression	xml_file . string ( ) << \"\\"\"
>274	PrimaryExpression	\"\\"\"
>275	CallExpression	xml_file . string ( )
>276	ArgumentList	 
>277	Callee	xml_file . string
>278	MemberAccess	xml_file . string
>279	Identifier	string
>280	Identifier	xml_file
>281	PrimaryExpression	\"Load xml-file \\"\"
>282	CallExpression	log . infoStream ( )
>283	ArgumentList	 
>284	Callee	log . infoStream
>285	MemberAccess	log . infoStream
>286	Identifier	infoStream
>287	Identifier	log
>288	IfStatement	if ( ! xml_stream )
>289	ExpressionStatement	 
>290	CallExpression	BOOST_THROW_EXCEPTION ( excp 
>291	ArgumentList	excp 
>292	Argument	excp 
>293	ShiftExpression	excp 
>294	CallExpression	excp 
>295	ArgumentList	xml_file . string ( )
>296	Argument	xml_file . string ( )
>297	CallExpression	xml_file . string ( )
>298	ArgumentList	 
>299	Callee	xml_file . string
>300	MemberAccess	xml_file . string
>301	Identifier	string
>302	Identifier	xml_file
>303	Callee	excp 
>304	Identifier	excp 
>305	CallExpression	excp 
>306	ArgumentList	 
>307	Callee	excp 
>308	Identifier	excp 
>309	Callee	BOOST_THROW_EXCEPTION
>310	Identifier	BOOST_THROW_EXCEPTION
>311	Condition	 
>312	UnaryOp	! xml_stream
>313	Identifier	xml_stream
>314	UnaryOperator	!
>315	IdentifierDeclStatement	 
>316	IdentifierDecl	xml_stream ( xml_file . string ( ) )
>317	CallExpression	xml_file . string ( )
>318	ArgumentList	 
>319	Callee	xml_file . string
>320	MemberAccess	xml_file . string
>321	Identifier	string
>322	Identifier	xml_file
>323	Identifier	xml_stream
>324	IdentifierDeclType	std 
>325	ExpressionStatement	 
>326	CallExpression	assert ( ! relations )
>327	ArgumentList	! relations
>328	Argument	! relations
>329	UnaryOp	! relations
>330	Identifier	relations
>331	UnaryOperator	!
>332	Callee	assert
>333	Identifier	assert
>334	ExpressionStatement	 
>335	CallExpression	assert ( ! ways )
>336	ArgumentList	! ways
>337	Argument	! ways
>338	UnaryOp	! ways
>339	Identifier	ways
>340	UnaryOperator	!
>341	Callee	assert
>342	Identifier	assert
>343	ExpressionStatement	 
>344	CallExpression	assert ( ! nodes )
>345	ArgumentList	! nodes
>346	Argument	! nodes
>347	UnaryOp	! nodes
>348	Identifier	nodes
>349	UnaryOperator	!
>350	Callee	assert
>351	Identifier	assert
>378	FunctionDef	getParsedNodes ()
>379	ParameterList	 
>380	ReturnType	shared_ptr < std 
>381	CompoundStatement	 
>382	ReturnStatement	 
>383	Identifier	nodes
>384	ExpressionStatement	 
>385	CallExpression	assert ( nodes )
>386	ArgumentList	nodes
>387	Argument	nodes
>388	Identifier	nodes
>389	Callee	assert
>390	Identifier	assert
>395	FunctionDef	getParsedWays ()
>396	ParameterList	 
>397	ReturnType	shared_ptr < std 
>398	CompoundStatement	 
>399	ReturnStatement	 
>400	Identifier	ways
>401	ExpressionStatement	 
>402	CallExpression	assert ( ways )
>403	ArgumentList	ways
>404	Argument	ways
>405	Identifier	ways
>406	Callee	assert
>407	Identifier	assert
>412	FunctionDef	getParsedRelations ()
>413	ParameterList	 
>414	ReturnType	shared_ptr < std 
>415	CompoundStatement	 
>416	ReturnStatement	 
>417	Identifier	relations
>418	ExpressionStatement	 
>419	CallExpression	assert ( relations )
>420	ArgumentList	relations
>421	Argument	relations
>422	Identifier	relations
>423	Callee	assert
>424	Identifier	assert
>472	FunctionDef	resolveOsmId (OsmIdType osmId , const boost 
>473	ParameterList	OsmIdType osmId , const boost 
>474	Parameter	 
>475	Identifier	table
>476	ParameterType	const boost 
>477	Parameter	 
>478	Identifier	osmId
>479	ParameterType	OsmIdType
>480	ReturnType	IdType
>481	CompoundStatement	 
>482	ReturnStatement	 
>483	PtrMemberAccess	it -> second
>484	Identifier	second
>485	Identifier	it
>486	IfStatement	if ( it == table . end ( ) )
>487	ExpressionStatement	 
>488	CallExpression	BOOST_THROW_EXCEPTION ( excp 
>489	ArgumentList	excp 
>490	Argument	excp 
>491	ShiftExpression	excp 
>492	CallExpression	excp 
>493	ArgumentList	osmId
>494	Argument	osmId
>495	Identifier	osmId
>496	Callee	excp 
>497	Identifier	excp 
>498	CallExpression	excp 
>499	ArgumentList	 
>500	Callee	excp 
>501	Identifier	excp 
>502	Callee	BOOST_THROW_EXCEPTION
>503	Identifier	BOOST_THROW_EXCEPTION
>504	Condition	 
>505	EqualityExpression	it == table . end ( )
>506	CallExpression	table . end ( )
>507	ArgumentList	 
>508	Callee	table . end
>509	MemberAccess	table . end
>510	Identifier	end
>511	Identifier	table
>512	Identifier	it
>513	ExpressionStatement	 
>514	AssignmentExpr	it = table . find ( osmId )
>515	CallExpression	table . find ( osmId )
>516	ArgumentList	osmId
>517	Argument	osmId
>518	Identifier	osmId
>519	Callee	table . find
>520	MemberAccess	table . find
>521	Identifier	find
>522	Identifier	table
>523	Identifier	it
>524	Statement	 
>537	FunctionDef	on_fetch (unsigned int chars_left , unsigned int need , node_type * active_node)
>538	ParameterList	unsigned int chars_left , unsigned int need , node_type * active_node
>539	Parameter	 
>540	Identifier	active_node
>541	ParameterType	node_type *
>542	Parameter	 
>543	Identifier	need
>544	ParameterType	unsigned int
>545	Parameter	 
>546	Identifier	chars_left
>547	ParameterType	unsigned int
>548	ReturnType	virtual void
>549	CompoundStatement	 
>556	FunctionDef	on_buffer_resize ()
>557	ParameterList	 
>558	ReturnType	virtual void
>559	CompoundStatement	 
>563	FunctionDef	on_segment_read ()
>564	ParameterList	 
>565	ReturnType	virtual void
>566	CompoundStatement	 
>570	FunctionDef	on_read_begin (unsigned int segments)
>571	ParameterList	unsigned int segments
>572	Parameter	 
>573	Identifier	segments
>574	ParameterType	unsigned int
>575	ReturnType	virtual void
>576	CompoundStatement	 
>577	IfStatement	if ( after != before )
>578	ExpressionStatement	 
>579	ShiftExpression	log . infoStream ( ) << \"Loading [\" << std 
>580	ShiftExpression	\"Loading [\" << std 
>581	ShiftExpression	std 
>582	PrimaryExpression	\"%]\"
>583	CallExpression	std 
>584	ArgumentList	after
>585	Argument	99
>586	PrimaryExpression	99
>587	Argument	after
>588	Identifier	after
>589	Callee	std 
>590	Identifier	std 
>591	PrimaryExpression	\"Loading [\"
>592	CallExpression	log . infoStream ( )
>593	ArgumentList	 
>594	Callee	log . infoStream
>595	MemberAccess	log . infoStream
>596	Identifier	infoStream
>597	Identifier	log
>598	Condition	 
>599	EqualityExpression	after != before
>600	Identifier	before
>601	Identifier	after
>602	IdentifierDeclStatement	 
>603	IdentifierDecl	after = int ( 100 * ( double ) alreadyRead / ( double ) fileSize )
>604	AssignmentExpr	after = int ( 100 * ( double ) alreadyRead / ( double ) fileSize )
>605	CallExpression	int ( 100 * ( double ) alreadyRead / ( double ) fileSize )
>606	ArgumentList	100 * ( double ) alreadyRead / ( double ) fileSize
>607	Argument	100 * ( double ) alreadyRead / ( double ) fileSize
>608	MultiplicativeExpression	100 * ( double ) alreadyRead / ( double ) fileSize
>609	MultiplicativeExpression	( double ) alreadyRead / ( double ) fileSize
>610	CastExpression	( double ) fileSize
>611	Identifier	fileSize
>612	CastTarget	double
>613	CastExpression	( double ) alreadyRead
>614	Identifier	alreadyRead
>615	CastTarget	double
>616	PrimaryExpression	100
>617	Callee	int
>618	Identifier	int
>619	Identifier	after
>620	Identifier	after
>621	IdentifierDeclType	int
>622	ExpressionStatement	 
>623	AssignmentExpr	alreadyRead += segments * segmentSize
>624	MultiplicativeExpression	segments * segmentSize
>625	Identifier	segmentSize
>626	Identifier	segments
>627	Identifier	alreadyRead
>628	IdentifierDeclStatement	 
>629	IdentifierDecl	before = int ( 100 * ( double ) alreadyRead / ( double ) fileSize )
>630	AssignmentExpr	before = int ( 100 * ( double ) alreadyRead / ( double ) fileSize )
>631	CallExpression	int ( 100 * ( double ) alreadyRead / ( double ) fileSize )
>632	ArgumentList	100 * ( double ) alreadyRead / ( double ) fileSize
>633	Argument	100 * ( double ) alreadyRead / ( double ) fileSize
>634	MultiplicativeExpression	100 * ( double ) alreadyRead / ( double ) fileSize
>635	MultiplicativeExpression	( double ) alreadyRead / ( double ) fileSize
>636	CastExpression	( double ) fileSize
>637	Identifier	fileSize
>638	CastTarget	double
>639	CastExpression	( double ) alreadyRead
>640	Identifier	alreadyRead
>641	CastTarget	double
>642	PrimaryExpression	100
>643	Callee	int
>644	Identifier	int
>645	Identifier	before
>646	Identifier	before
>647	IdentifierDeclType	int
>682	FunctionDef	Importer 
>683	ParameterList	const shared_ptr < Configuration > & config
>684	Parameter	 
>685	Identifier	config
>686	ParameterType	const shared_ptr < Configuration > &
>687	CompoundStatement	 
>692	FunctionDef	Importer 
>693	ParameterList	 
>694	ReturnType	shared_ptr < Geodata >
>695	CompoundStatement	 
>696	ReturnStatement	 
>697	Identifier	geodata
>698	ExpressionStatement	 
>699	CallExpression	geodata -> insertRelations ( parser . getParsedRelations ( ) )
>700	ArgumentList	parser . getParsedRelations ( )
>701	Argument	parser . getParsedRelations ( )
>702	CallExpression	parser . getParsedRelations ( )
>703	ArgumentList	 
>704	Callee	parser . getParsedRelations
>705	MemberAccess	parser . getParsedRelations
>706	Identifier	getParsedRelations
>707	Identifier	parser
>708	Callee	geodata -> insertRelations
>709	PtrMemberAccess	geodata -> insertRelations
>710	Identifier	insertRelations
>711	Identifier	geodata
>712	ExpressionStatement	 
>713	CallExpression	geodata -> insertWays ( parser . getParsedWays ( ) )
>714	ArgumentList	parser . getParsedWays ( )
>715	Argument	parser . getParsedWays ( )
>716	CallExpression	parser . getParsedWays ( )
>717	ArgumentList	 
>718	Callee	parser . getParsedWays
>719	MemberAccess	parser . getParsedWays
>720	Identifier	getParsedWays
>721	Identifier	parser
>722	Callee	geodata -> insertWays
>723	PtrMemberAccess	geodata -> insertWays
>724	Identifier	insertWays
>725	Identifier	geodata
>726	ExpressionStatement	 
>727	CallExpression	geodata -> insertNodes ( parser . getParsedNodes ( ) )
>728	ArgumentList	parser . getParsedNodes ( )
>729	Argument	parser . getParsedNodes ( )
>730	CallExpression	parser . getParsedNodes ( )
>731	ArgumentList	 
>732	Callee	parser . getParsedNodes
>733	MemberAccess	parser . getParsedNodes
>734	Identifier	getParsedNodes
>735	Identifier	parser
>736	Callee	geodata -> insertNodes
>737	PtrMemberAccess	geodata -> insertNodes
>738	Identifier	insertNodes
>739	Identifier	geodata
>740	ExpressionStatement	 
>741	ShiftExpression	log . infoStream ( ) << \"Insert into geodata...\"
>742	PrimaryExpression	\"Insert into geodata...\"
>743	CallExpression	log . infoStream ( )
>744	ArgumentList	 
>745	Callee	log . infoStream
>746	MemberAccess	log . infoStream
>747	Identifier	infoStream
>748	Identifier	log
>749	ExpressionStatement	 
>750	CallExpression	parser . parse ( xml_file )
>751	ArgumentList	xml_file
>752	Argument	xml_file
>753	Identifier	xml_file
>754	Callee	parser . parse
>755	MemberAccess	parser . parse
>756	Identifier	parse
>757	Identifier	parser
>758	ExpressionStatement	 
>759	ShiftExpression	log . infoStream ( ) << \"Start parsing...\"
>760	PrimaryExpression	\"Start parsing...\"
>761	CallExpression	log . infoStream ( )
>762	ArgumentList	 
>763	Callee	log . infoStream
>764	MemberAccess	log . infoStream
>765	Identifier	infoStream
>766	Identifier	log
>767	IdentifierDeclStatement	 
>768	IdentifierDecl	xml_file = config -> get < string > ( opt 
>769	AssignmentExpr	xml_file = config -> get < string > ( opt 
>770	RelationalExpression	config -> get < string > ( opt 
>771	RelationalExpression	string > ( opt 
>772	Identifier	opt 
>773	Identifier	string
>774	PtrMemberAccess	config -> get
>775	Identifier	get
>776	Identifier	config
>777	Identifier	xml_file
>778	Identifier	xml_file
>779	IdentifierDeclType	path
>780	ExpressionStatement	 
>781	Statement	 
>782	Statement	 
>783	Statement	 
>784	Statement	 
>785	Statement	 
>786	Statement	 
>787	Statement	 
>788	Statement	 
>789	Statement	 
>790	Statement	 
>791	Statement	 
>792	Statement	 
>793	Statement	 
>794	Statement	 
>795	IdentifierDeclStatement	 
>796	IdentifierDecl	parser ( ! config -> get < bool > ( opt 
>797	RelationalExpression	! config -> get < bool > ( opt 
>798	RelationalExpression	bool > ( opt 
>799	Identifier	opt 
>800	Identifier	bool
>801	UnaryOp	! config -> get
>802	PtrMemberAccess	config -> get
>803	Identifier	get
>804	Identifier	config
>805	UnaryOperator	!
>806	Identifier	parser
>807	IdentifierDeclType	OsmXmlParser
>808	IdentifierDeclStatement	 
>809	IdentifierDecl	& log = log4cpp 
>810	AssignmentExpr	& log = log4cpp 
>811	CallExpression	log4cpp 
>812	ArgumentList	 
>813	Callee	log4cpp 
>814	Identifier	log4cpp 
>815	Identifier	log
>816	Identifier	log
>817	IdentifierDeclType	log4cpp 
<7=12,8
<8=9
<9=11,10
<17=23,22,18
<18=19
<19=21,20
<23=343,334,325,315,288,270,261,246,245,244,243,242,241,240,239,238,237,236,235,234,233,232,231,230,24,61,80,146,155,164,173,175,176,177,178,179,180,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229
<24=60,25
<25=26
<26=27
<27=58,28
<28=29
<29=30
<30=54,31
<31=43,32
<32=41,33
<33=34
<34=35
<35=37,36
<37=38
<38=40,39
<41=42
<43=52,44
<44=45
<45=46
<46=48,47
<48=49
<49=51,50
<52=53
<54=56,55
<56=57
<58=59
<61=79,62
<62=65,64,63
<65=66
<66=78,67
<67=76,68
<68=69
<69=70
<70=72,71
<72=73
<73=75,74
<76=77
<80=81
<81=136,135,134,133,132,131,118,89,82
<82=83
<83=87,84
<84=85
<85=86
<87=88
<89=114,90
<90=91
<91=112,92
<92=93
<93=94
<94=108,95
<95=102,96
<96=100,97
<97=98
<98=99
<100=101
<102=106,103
<103=104
<104=105
<106=107
<108=110,109
<110=111
<112=113
<114=115
<115=117,116
<118=119
<119=128,120
<120=124,121
<121=122
<122=123
<124=125
<125=127,126
<128=130,129
<136=137
<137=143,138
<138=142,139
<139=141,140
<143=145,144
<146=147
<147=151,148
<148=149
<149=150
<151=152
<152=154,153
<155=156
<156=160,157
<157=158
<158=159
<160=161
<161=163,162
<164=165
<165=169,166
<166=167
<167=168
<169=170
<170=172,171
<173=174
<180=181
<181=191,182
<182=189,183
<183=184
<184=188,185
<185=187,186
<189=190
<191=192
<246=247
<247=255,248
<248=254,249
<249=251,250
<251=253,252
<255=257,256
<257=258
<258=260,259
<261=262
<262=269,263
<263=267,264
<264=265
<265=266
<267=268
<270=271
<271=282,272
<272=281,273
<273=275,274
<275=277,276
<277=278
<278=280,279
<282=284,283
<284=285
<285=287,286
<288=311,289
<289=290
<290=309,291
<291=292
<292=293
<293=305,294
<294=303,295
<295=296
<296=297
<297=299,298
<299=300
<300=302,301
<303=304
<305=307,306
<307=308
<309=310
<311=312
<312=314,313
<315=316
<316=324,323,317
<317=319,318
<319=320
<320=322,321
<325=326
<326=332,327
<327=328
<328=329
<329=331,330
<332=333
<334=335
<335=341,336
<336=337
<337=338
<338=340,339
<341=342
<343=344
<344=350,345
<345=346
<346=347
<347=349,348
<350=351
<378=381,380,379
<381=384,382
<382=383
<384=385
<385=389,386
<386=387
<387=388
<389=390
<395=398,397,396
<398=401,399
<399=400
<401=402
<402=406,403
<403=404
<404=405
<406=407
<412=415,414,413
<415=418,416
<416=417
<418=419
<419=423,420
<420=421
<421=422
<423=424
<472=481,480,473
<473=477,474
<474=476,475
<477=479,478
<481=524,513,486,482
<482=483
<483=485,484
<486=504,487
<487=488
<488=502,489
<489=490
<490=491
<491=498,492
<492=496,493
<493=494
<494=495
<496=497
<498=500,499
<500=501
<502=503
<504=505
<505=512,506
<506=508,507
<508=509
<509=511,510
<513=514
<514=523,515
<515=519,516
<516=517
<517=518
<519=520
<520=522,521
<537=549,548,538
<538=545,542,539
<539=541,540
<542=544,543
<545=547,546
<556=559,558,557
<563=566,565,564
<570=576,575,571
<571=572
<572=574,573
<576=628,622,602,577
<577=598,578
<578=579
<579=592,580
<580=591,581
<581=583,582
<583=589,584
<584=587,585
<585=586
<587=588
<589=590
<592=594,593
<594=595
<595=597,596
<598=599
<599=601,600
<602=603
<603=621,620,604
<604=619,605
<605=617,606
<606=607
<607=608
<608=616,609
<609=613,610
<610=612,611
<613=615,614
<617=618
<622=623
<623=627,624
<624=626,625
<628=629
<629=647,646,630
<630=645,631
<631=643,632
<632=633
<633=634
<634=642,635
<635=639,636
<636=638,637
<639=641,640
<643=644
<682=687,683
<683=684
<684=686,685
<692=695,694,693
<695=808,795,794,793,792,791,790,789,788,787,786,785,784,783,782,781,780,767,758,749,740,726,712,698,696
<696=697
<698=699
<699=708,700
<700=701
<701=702
<702=704,703
<704=705
<705=707,706
<708=709
<709=711,710
<712=713
<713=722,714
<714=715
<715=716
<716=718,717
<718=719
<719=721,720
<722=723
<723=725,724
<726=727
<727=736,728
<728=729
<729=730
<730=732,731
<732=733
<733=735,734
<736=737
<737=739,738
<740=741
<741=743,742
<743=745,744
<745=746
<746=748,747
<749=750
<750=754,751
<751=752
<752=753
<754=755
<755=757,756
<758=759
<759=761,760
<761=763,762
<763=764
<764=766,765
<767=768
<768=779,778,769
<769=777,770
<770=774,771
<771=773,772
<774=776,775
<795=796
<796=807,806,797
<797=801,798
<798=800,799
<801=805,802
<802=804,803
<808=809
<809=817,816,810
<810=815,811
<811=813,812
<813=814
