>10	FunctionDef	init (int a [ ] , int n , int m)
>11	ParameterList	int a [ ] , int n , int m
>12	Parameter	 
>13	Identifier	m
>14	ParameterType	int
>15	Parameter	 
>16	Identifier	n
>17	ParameterType	int
>18	Parameter	 
>19	Identifier	a
>20	ParameterType	int [ ]
>21	ReturnType	node *
>22	CompoundStatement	 
>23	ReturnStatement	 
>24	Identifier	head
>25	ExpressionStatement	 
>26	AssignmentExpr	p -> next = q
>27	Identifier	q
>28	PtrMemberAccess	p -> next
>29	Identifier	next
>30	Identifier	p
>31	ForStatement	for ( int i = 0 ; i < n ; ++ i )
>32	CompoundStatement	 
>33	ExpressionStatement	 
>34	AssignmentExpr	p = nd
>35	Identifier	nd
>36	Identifier	p
>37	ExpressionStatement	 
>38	AssignmentExpr	p -> next = nd
>39	Identifier	nd
>40	PtrMemberAccess	p -> next
>41	Identifier	next
>42	Identifier	p
>43	IfStatement	if ( i == 0 )
>44	CompoundStatement	 
>45	ContinueStatement	 
>46	ExpressionStatement	 
>47	AssignmentExpr	head = p = nd
>48	AssignmentExpr	p = nd
>49	Identifier	nd
>50	Identifier	p
>51	Identifier	head
>52	Condition	 
>53	EqualityExpression	i == 0
>54	PrimaryExpression	0
>55	Identifier	i
>56	IfStatement	if ( i == m )
>57	ExpressionStatement	 
>58	AssignmentExpr	q = nd
>59	Identifier	nd
>60	Identifier	q
>61	Condition	 
>62	EqualityExpression	i == m
>63	Identifier	m
>64	Identifier	i
>65	ExpressionStatement	 
>66	AssignmentExpr	nd -> data = a [ i ]
>67	ArrayIndexing	a [ i ]
>68	Identifier	i
>69	Identifier	a
>70	PtrMemberAccess	nd -> data
>71	Identifier	data
>72	Identifier	nd
>73	IdentifierDeclStatement	 
>74	IdentifierDecl	* nd = new node ( )
>75	AssignmentExpr	* nd = new node ( )
>76	UnaryExpression	new node ( )
>77	Identifier	nd
>78	Identifier	nd
>79	IdentifierDeclType	node *
>80	UnaryExpression	 
>81	Identifier	i
>82	IncDec	++
>83	Condition	 
>84	RelationalExpression	i < n
>85	Identifier	n
>86	Identifier	i
>87	ForInit	 
>88	IdentifierDeclStatement	int i = 0 ;
>89	IdentifierDecl	i = 0
>90	AssignmentExpr	i = 0
>91	PrimaryExpression	0
>92	Identifier	i
>93	Identifier	i
>94	IdentifierDeclType	int
>95	IdentifierDeclStatement	 
>96	IdentifierDecl	* q
>97	Identifier	q
>98	IdentifierDeclType	node *
>99	IdentifierDecl	* p
>100	Identifier	p
>101	IdentifierDeclType	node *
>102	IdentifierDecl	* head
>103	Identifier	head
>104	IdentifierDeclType	node *
>122	FunctionDef	loopstart (node * head)
>123	ParameterList	node * head
>124	Parameter	 
>125	Identifier	head
>126	ParameterType	node *
>127	ReturnType	node *
>128	CompoundStatement	 
>129	ReturnStatement	 
>130	Identifier	fast
>131	WhileStatement	while ( fast != slow )
>132	CompoundStatement	 
>133	ExpressionStatement	 
>134	AssignmentExpr	slow = slow -> next
>135	PtrMemberAccess	slow -> next
>136	Identifier	next
>137	Identifier	slow
>138	Identifier	slow
>139	ExpressionStatement	 
>140	AssignmentExpr	fast = fast -> next
>141	PtrMemberAccess	fast -> next
>142	Identifier	next
>143	Identifier	fast
>144	Identifier	fast
>145	Condition	 
>146	EqualityExpression	fast != slow
>147	Identifier	slow
>148	Identifier	fast
>149	ExpressionStatement	 
>150	AssignmentExpr	slow = head
>151	Identifier	head
>152	Identifier	slow
>153	IfStatement	if ( ! fast || ! fast -> next )
>154	ReturnStatement	 
>155	Identifier	NULL
>156	Condition	 
>157	OrExpression	! fast || ! fast -> next
>158	UnaryOp	! fast -> next
>159	PtrMemberAccess	fast -> next
>160	Identifier	next
>161	Identifier	fast
>162	UnaryOperator	!
>163	UnaryOp	! fast
>164	Identifier	fast
>165	UnaryOperator	!
>166	WhileStatement	while ( fast && fast -> next )
>167	CompoundStatement	 
>168	IfStatement	if ( fast == slow )
>169	BreakStatement	 
>170	Condition	 
>171	EqualityExpression	fast == slow
>172	Identifier	slow
>173	Identifier	fast
>174	ExpressionStatement	 
>175	AssignmentExpr	slow = slow -> next
>176	PtrMemberAccess	slow -> next
>177	Identifier	next
>178	Identifier	slow
>179	Identifier	slow
>180	ExpressionStatement	 
>181	AssignmentExpr	fast = fast -> next -> next
>182	PtrMemberAccess	fast -> next -> next
>183	Identifier	next
>184	PtrMemberAccess	fast -> next
>185	Identifier	next
>186	Identifier	fast
>187	Identifier	fast
>188	Condition	 
>189	AndExpression	fast && fast -> next
>190	PtrMemberAccess	fast -> next
>191	Identifier	next
>192	Identifier	fast
>193	Identifier	fast
>194	IdentifierDeclStatement	 
>195	IdentifierDecl	* slow = head
>196	AssignmentExpr	* slow = head
>197	Identifier	head
>198	Identifier	head
>199	Identifier	slow
>200	IdentifierDeclType	node *
>201	IdentifierDecl	* fast = head
>202	AssignmentExpr	* fast = head
>203	Identifier	head
>204	Identifier	head
>205	Identifier	fast
>206	IdentifierDeclType	node *
>207	IfStatement	if ( head == NULL )
>208	ReturnStatement	 
>209	Identifier	NULL
>210	Condition	 
>211	EqualityExpression	head == NULL
>212	Identifier	NULL
>213	Identifier	head
>230	FunctionDef	loopstart1 (node * head)
>231	ParameterList	node * head
>232	Parameter	 
>233	Identifier	head
>234	ParameterType	node *
>235	ReturnType	node *
>236	CompoundStatement	 
>237	ReturnStatement	 
>238	Identifier	head
>239	WhileStatement	while ( head )
>240	CompoundStatement	 
>241	IfStatement	if ( hash [ head ] )
>242	ElseStatement	else
>243	CompoundStatement	 
>244	ExpressionStatement	 
>245	AssignmentExpr	head = head -> next
>246	PtrMemberAccess	head -> next
>247	Identifier	next
>248	Identifier	head
>249	Identifier	head
>250	ExpressionStatement	 
>251	AssignmentExpr	hash [ head ] = true
>252	Identifier	true
>253	ArrayIndexing	hash [ head ]
>254	Identifier	head
>255	Identifier	hash
>256	ReturnStatement	 
>257	Identifier	head
>258	Condition	 
>259	ArrayIndexing	hash [ head ]
>260	Identifier	head
>261	Identifier	hash
>262	Condition	 
>263	Identifier	head
>273	FunctionDef	main ()
>274	ParameterList	 
>275	ReturnType	int
>276	CompoundStatement	 
>277	ReturnStatement	 
>278	PrimaryExpression	0
>279	IfStatement	if ( p )
>280	ExpressionStatement	 
>281	ShiftExpression	cout << p -> data << endl
>282	ShiftExpression	p -> data << endl
>283	Identifier	endl
>284	PtrMemberAccess	p -> data
>285	Identifier	data
>286	Identifier	p
>287	Identifier	cout
>288	Condition	 
>289	Identifier	p
>290	IdentifierDeclStatement	 
>291	IdentifierDecl	* p = loopstart1 ( head )
>292	AssignmentExpr	* p = loopstart1 ( head )
>293	CallExpression	loopstart1 ( head )
>294	ArgumentList	head
>295	Argument	head
>296	Identifier	head
>297	Callee	loopstart1
>298	Identifier	loopstart1
>299	Identifier	p
>300	Identifier	p
>301	IdentifierDeclType	node *
>302	IdentifierDeclStatement	 
>303	IdentifierDecl	* head = init ( a , n , m )
>304	AssignmentExpr	* head = init ( a , n , m )
>305	CallExpression	init ( a , n , m )
>306	ArgumentList	a
>307	Argument	m
>308	Identifier	m
>309	Argument	n
>310	Identifier	n
>311	Argument	a
>312	Identifier	a
>313	Callee	init
>314	Identifier	init
>315	Identifier	head
>316	Identifier	head
>317	IdentifierDeclType	node *
>318	IdentifierDeclStatement	 
>319	IdentifierDecl	a [ ] = { 3 , 2 , 1 , 3 , 5 , 6 , 2 , 6 , 3 , 1 }
>320	AssignmentExpr	a [ ] = { 3 , 2 , 1 , 3 , 5 , 6 , 2 , 6 , 3 , 1 }
>321	InitializerList	3
>322	PrimaryExpression	1
>323	PrimaryExpression	3
>324	PrimaryExpression	6
>325	PrimaryExpression	2
>326	PrimaryExpression	6
>327	PrimaryExpression	5
>328	PrimaryExpression	3
>329	PrimaryExpression	1
>330	PrimaryExpression	2
>331	PrimaryExpression	3
>332	Identifier	a
>333	Identifier	a
>334	IdentifierDeclType	int [ ]
>335	IdentifierDeclStatement	 
>336	IdentifierDecl	m = 9
>337	AssignmentExpr	m = 9
>338	PrimaryExpression	9
>339	Identifier	m
>340	Identifier	m
>341	IdentifierDeclType	int
>342	IdentifierDecl	n = 10
>343	AssignmentExpr	n = 10
>344	PrimaryExpression	10
>345	Identifier	n
>346	Identifier	n
>347	IdentifierDeclType	int
<10=22,21,11
<11=18,15,12
<12=14,13
<15=17,16
<18=20,19
<22=95,31,25,23
<23=24
<25=26
<26=28,27
<28=30,29
<31=87,83,80,32
<32=73,65,56,43,37,33
<33=34
<34=36,35
<37=38
<38=40,39
<40=42,41
<43=52,44
<44=46,45
<46=47
<47=51,48
<48=50,49
<52=53
<53=55,54
<56=61,57
<57=58
<58=60,59
<61=62
<62=64,63
<65=66
<66=70,67
<67=69,68
<70=72,71
<73=74
<74=79,78,75
<75=77,76
<80=82,81
<83=84
<84=86,85
<87=88
<88=89
<89=94,93,90
<90=92,91
<95=102,99,96
<96=98,97
<99=101,100
<102=104,103
<122=128,127,123
<123=124
<124=126,125
<128=207,194,166,153,149,131,129
<129=130
<131=145,132
<132=139,133
<133=134
<134=138,135
<135=137,136
<139=140
<140=144,141
<141=143,142
<145=146
<146=148,147
<149=150
<150=152,151
<153=156,154
<154=155
<156=157
<157=163,158
<158=162,159
<159=161,160
<163=165,164
<166=188,167
<167=180,174,168
<168=170,169
<170=171
<171=173,172
<174=175
<175=179,176
<176=178,177
<180=181
<181=187,182
<182=184,183
<184=186,185
<188=189
<189=193,190
<190=192,191
<194=201,195
<195=200,199,196
<196=198,197
<201=206,205,202
<202=204,203
<207=210,208
<208=209
<210=211
<211=213,212
<230=236,235,231
<231=232
<232=234,233
<236=239,237
<237=238
<239=262,240
<240=241
<241=258,256,242
<242=243
<243=250,244
<244=245
<245=249,246
<246=248,247
<250=251
<251=253,252
<253=255,254
<256=257
<258=259
<259=261,260
<262=263
<273=276,275,274
<276=335,318,302,290,279,277
<277=278
<279=288,280
<280=281
<281=287,282
<282=284,283
<284=286,285
<288=289
<290=291
<291=301,300,292
<292=299,293
<293=297,294
<294=295
<295=296
<297=298
<302=303
<303=317,316,304
<304=315,305
<305=313,306
<306=311,309,307
<307=308
<309=310
<311=312
<313=314
<318=319
<319=334,333,320
<320=332,321
<321=331,330,329,328,327,326,325,324,323,322
<335=342,336
<336=341,340,337
<337=339,338
<342=347,346,343
<343=345,344
