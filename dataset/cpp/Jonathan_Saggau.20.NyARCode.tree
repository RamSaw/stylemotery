>3	FunctionDef	NyARCode 
>4	ParameterList	 
>5	ReturnType	const int *
>6	CompoundStatement	 
>7	ReturnStatement	 
>8	Identifier	pat
>13	FunctionDef	NyARCode 
>14	ParameterList	 
>15	ReturnType	const double *
>16	CompoundStatement	 
>17	ReturnStatement	 
>18	Identifier	patpow
>23	FunctionDef	NyARCode 
>24	ParameterList	 
>25	ReturnType	const short *
>26	CompoundStatement	 
>27	ReturnStatement	 
>28	Identifier	patBW
>33	FunctionDef	NyARCode 
>34	ParameterList	 
>35	ReturnType	const double *
>36	CompoundStatement	 
>37	ReturnStatement	 
>38	Identifier	patpowBW
>43	FunctionDef	NyARCode 
>44	ParameterList	 
>45	ReturnType	int
>46	CompoundStatement	 
>47	ReturnStatement	 
>48	Identifier	width
>53	FunctionDef	NyARCode 
>54	ParameterList	 
>55	ReturnType	int
>56	CompoundStatement	 
>57	ReturnStatement	 
>58	Identifier	height
>63	FunctionDef	NyARCode 
>64	ParameterList	int i_width , int i_height
>65	Parameter	 
>66	Identifier	i_height
>67	ParameterType	int
>68	Parameter	 
>69	Identifier	i_width
>70	ParameterType	int
>71	CompoundStatement	 
>72	ReturnStatement	 
>73	ExpressionStatement	 
>74	AssignmentExpr	patBW = new short [ 4 * height * width ]
>75	MultiplicativeExpression	4 * height * width
>76	MultiplicativeExpression	height * width
>77	Identifier	width
>78	Identifier	height
>79	PrimaryExpression	4
>80	Identifier	patBW
>81	ExpressionStatement	 
>82	AssignmentExpr	pat = new int [ 4 * height * width * 3 ]
>83	MultiplicativeExpression	4 * height * width * 3
>84	MultiplicativeExpression	height * width * 3
>85	MultiplicativeExpression	width * 3
>86	PrimaryExpression	3
>87	Identifier	width
>88	Identifier	height
>89	PrimaryExpression	4
>90	Identifier	pat
>91	ExpressionStatement	 
>92	AssignmentExpr	height = i_height
>93	Identifier	i_height
>94	Identifier	height
>95	ExpressionStatement	 
>96	AssignmentExpr	width = i_width
>97	Identifier	i_width
>98	Identifier	width
>108	FunctionDef	NyARCode 
>109	ParameterList	 
>110	CompoundStatement	 
>111	ReturnStatement	 
>112	ExpressionStatement	 
>113	CallExpression	NyAR_SAFE_DELETE ( patBW )
>114	ArgumentList	patBW
>115	Argument	patBW
>116	Identifier	patBW
>117	Callee	NyAR_SAFE_DELETE
>118	Identifier	NyAR_SAFE_DELETE
>119	ExpressionStatement	 
>120	CallExpression	NyAR_SAFE_DELETE ( pat )
>121	ArgumentList	pat
>122	Argument	pat
>123	Identifier	pat
>124	Callee	NyAR_SAFE_DELETE
>125	Identifier	NyAR_SAFE_DELETE
>131	FunctionDef	NyARCode 
>132	ParameterList	const char * i_filename
>133	Parameter	 
>134	Identifier	i_filename
>135	ParameterType	const char *
>136	ReturnType	void
>137	CompoundStatement	 
>138	ReturnStatement	 
>139	BlockStarter	 
>140	CompoundStatement	 
>141	ExpressionStatement	NyARException ( e )
>142	CallExpression	NyARException ( e )
>143	ArgumentList	e
>144	Argument	e
>145	Identifier	e
>146	Callee	NyARException
>147	Identifier	NyARException
>148	Statement	throw
>149	ExpressionStatement	NyAR_SAFE_DELETE ( data_array )
>150	CallExpression	NyAR_SAFE_DELETE ( data_array )
>151	ArgumentList	data_array
>152	Argument	data_array
>153	Identifier	data_array
>154	Callee	NyAR_SAFE_DELETE
>155	Identifier	NyAR_SAFE_DELETE
>156	BlockStarter	 
>157	CompoundStatement	 
>158	ExpressionStatement	 
>159	Statement	throw
>160	ExpressionStatement	NyAR_SAFE_DELETE ( data_array )
>161	CallExpression	NyAR_SAFE_DELETE ( data_array )
>162	ArgumentList	data_array
>163	Argument	data_array
>164	Identifier	data_array
>165	Callee	NyAR_SAFE_DELETE
>166	Identifier	NyAR_SAFE_DELETE
>167	BlockStarter	 
>168	CompoundStatement	 
>169	ExpressionStatement	data_array = NULL
>170	AssignmentExpr	data_array = NULL
>171	Identifier	NULL
>172	Identifier	data_array
>173	ExpressionStatement	NyAR_SAFE_DELETE ( data_array )
>174	CallExpression	NyAR_SAFE_DELETE ( data_array )
>175	ArgumentList	data_array
>176	Argument	data_array
>177	Identifier	data_array
>178	Callee	NyAR_SAFE_DELETE
>179	Identifier	NyAR_SAFE_DELETE
>180	ExpressionStatement	loadARPatt ( data_array , width , height )
>181	CallExpression	loadARPatt ( data_array , width , height )
>182	ArgumentList	data_array
>183	Argument	height
>184	Identifier	height
>185	Argument	width
>186	Identifier	width
>187	Argument	data_array
>188	Identifier	data_array
>189	Callee	loadARPatt
>190	Identifier	loadARPatt
>191	ForStatement	for ( int i = 0 ; i < 4 * height * width * 3 ; i ++ )
>192	CompoundStatement	 
>193	ExpressionStatement	data_array [ i ] = r
>194	AssignmentExpr	data_array [ i ] = r
>195	Identifier	r
>196	ArrayIndexing	data_array [ i ]
>197	Identifier	i
>198	Identifier	data_array
>199	ExpressionStatement	inf >> r
>200	ShiftExpression	inf >> r
>201	Identifier	r
>202	Identifier	inf
>203	IdentifierDeclStatement	int r ;
>204	IdentifierDecl	r
>205	Identifier	r
>206	IdentifierDeclType	int
>207	IncDecOp	i ++
>208	IncDec	++
>209	Identifier	i
>210	Condition	i < 4 * height * width * 3
>211	RelationalExpression	i < 4 * height * width * 3
>212	MultiplicativeExpression	4 * height * width * 3
>213	MultiplicativeExpression	height * width * 3
>214	MultiplicativeExpression	width * 3
>215	PrimaryExpression	3
>216	Identifier	width
>217	Identifier	height
>218	PrimaryExpression	4
>219	Identifier	i
>220	ForInit	int i = 0 ;
>221	IdentifierDeclStatement	int i = 0 ;
>222	IdentifierDecl	i = 0
>223	AssignmentExpr	i = 0
>224	PrimaryExpression	0
>225	Identifier	i
>226	Identifier	i
>227	IdentifierDeclType	int
>228	ExpressionStatement	data_array = new int [ 4 * height * width * 3 ]
>229	AssignmentExpr	data_array = new int [ 4 * height * width * 3 ]
>230	MultiplicativeExpression	4 * height * width * 3
>231	MultiplicativeExpression	height * width * 3
>232	MultiplicativeExpression	width * 3
>233	PrimaryExpression	3
>234	Identifier	width
>235	Identifier	height
>236	PrimaryExpression	4
>237	Identifier	data_array
>238	ExpressionStatement	inf . open ( i_filename )
>239	CallExpression	inf . open ( i_filename )
>240	ArgumentList	i_filename
>241	Argument	i_filename
>242	Identifier	i_filename
>243	Callee	inf . open
>244	MemberAccess	inf . open
>245	Identifier	open
>246	Identifier	inf
>247	IdentifierDeclStatement	 
>248	IdentifierDecl	* data_array = NULL
>249	AssignmentExpr	* data_array = NULL
>250	Identifier	NULL
>251	Identifier	NULL
>252	Identifier	data_array
>253	IdentifierDeclType	int *
>254	IdentifierDeclStatement	 
>255	IdentifierDecl	inf
>256	Identifier	inf
>257	IdentifierDeclType	ifstream
>272	FunctionDef	NyARCode 
>273	ParameterList	const int * i_data_array , int i_width , int i_height
>274	Parameter	 
>275	Identifier	i_height
>276	ParameterType	int
>277	Parameter	 
>278	Identifier	i_width
>279	ParameterType	int
>280	Parameter	 
>281	Identifier	i_data_array
>282	ParameterType	const int *
>283	ReturnType	void
>284	CompoundStatement	 
>285	BlockStarter	 
>286	CompoundStatement	 
>287	ExpressionStatement	NyARException ( e )
>288	CallExpression	NyARException ( e )
>289	ArgumentList	e
>290	Argument	e
>291	Identifier	e
>292	Callee	NyARException
>293	Identifier	NyARException
>294	Statement	throw
>295	BlockStarter	 
>296	CompoundStatement	 
>297	ForStatement	for ( int h = 0 ; h < 4 ; h ++ )
>298	CompoundStatement	 
>299	IfStatement	if ( patpowBW [ h ] == 0.0 )
>300	CompoundStatement	 
>301	ExpressionStatement	patpowBW [ h ] = 0.0000001
>302	AssignmentExpr	patpowBW [ h ] = 0.0000001
>303	PrimaryExpression	0.0000001
>304	ArrayIndexing	patpowBW [ h ]
>305	Identifier	h
>306	Identifier	patpowBW
>307	Condition	patpowBW [ h ] == 0.0
>308	EqualityExpression	patpowBW [ h ] == 0.0
>309	PrimaryExpression	0.0
>310	ArrayIndexing	patpowBW [ h ]
>311	Identifier	h
>312	Identifier	patpowBW
>313	ExpressionStatement	patpowBW [ h ] = sqrt ( ( double ) m )
>314	AssignmentExpr	patpowBW [ h ] = sqrt ( ( double ) m )
>315	CallExpression	sqrt ( ( double ) m )
>316	ArgumentList	( double ) m
>317	Argument	( double ) m
>318	CastExpression	( double ) m
>319	Identifier	m
>320	CastTarget	double
>321	Callee	sqrt
>322	Identifier	sqrt
>323	ArrayIndexing	patpowBW [ h ]
>324	Identifier	h
>325	Identifier	patpowBW
>326	ForStatement	for ( int i = 0 ; i < height ; i ++ )
>327	CompoundStatement	 
>328	ForStatement	for ( int i2 = 0 ; i2 < width ; i2 ++ )
>329	CompoundStatement	 
>330	ExpressionStatement	m += * patBW_ptr * * patBW_ptr
>331	AssignmentExpr	m += * patBW_ptr * * patBW_ptr
>332	MultiplicativeExpression	* patBW_ptr * * patBW_ptr
>333	UnaryOp	* patBW_ptr
>334	Identifier	patBW_ptr
>335	UnaryOperator	*
>336	UnaryOp	* patBW_ptr
>337	Identifier	patBW_ptr
>338	UnaryOperator	*
>339	Identifier	m
>340	ExpressionStatement	* patBW_ptr -= ( short ) l
>341	AssignmentExpr	* patBW_ptr -= ( short ) l
>342	CastExpression	( short ) l
>343	Identifier	l
>344	CastTarget	short
>345	UnaryOp	* patBW_ptr
>346	Identifier	patBW_ptr
>347	UnaryOperator	*
>348	IdentifierDeclStatement	short * patBW_ptr = patBW + ( h * height * width + i * width + i2 ) ;
>349	IdentifierDecl	* patBW_ptr = patBW + ( h * height * width + i * width + i2 )
>350	AssignmentExpr	* patBW_ptr = patBW + ( h * height * width + i * width + i2 )
>351	AdditiveExpression	patBW + ( h * height * width + i * width + i2 )
>352	AdditiveExpression	h * height * width + i * width + i2
>353	AdditiveExpression	i * width + i2
>354	Identifier	i2
>355	MultiplicativeExpression	i * width
>356	Identifier	width
>357	Identifier	i
>358	MultiplicativeExpression	h * height * width
>359	MultiplicativeExpression	height * width
>360	Identifier	width
>361	Identifier	height
>362	Identifier	h
>363	Identifier	patBW
>364	Identifier	patBW_ptr
>365	Identifier	patBW_ptr
>366	IdentifierDeclType	short *
>367	IncDecOp	i2 ++
>368	IncDec	++
>369	Identifier	i2
>370	Condition	i2 < width
>371	RelationalExpression	i2 < width
>372	Identifier	width
>373	Identifier	i2
>374	ForInit	int i2 = 0 ;
>375	IdentifierDeclStatement	int i2 = 0 ;
>376	IdentifierDecl	i2 = 0
>377	AssignmentExpr	i2 = 0
>378	PrimaryExpression	0
>379	Identifier	i2
>380	Identifier	i2
>381	IdentifierDeclType	int
>382	IncDecOp	i ++
>383	IncDec	++
>384	Identifier	i
>385	Condition	i < height
>386	RelationalExpression	i < height
>387	Identifier	height
>388	Identifier	i
>389	ForInit	int i = 0 ;
>390	IdentifierDeclStatement	int i = 0 ;
>391	IdentifierDecl	i = 0
>392	AssignmentExpr	i = 0
>393	PrimaryExpression	0
>394	Identifier	i
>395	Identifier	i
>396	IdentifierDeclType	int
>397	ExpressionStatement	m = 0
>398	AssignmentExpr	m = 0
>399	PrimaryExpression	0
>400	Identifier	m
>401	IfStatement	if ( patpow [ h ] == 0.0 )
>402	CompoundStatement	 
>403	ExpressionStatement	patpow [ h ] = 0.0000001
>404	AssignmentExpr	patpow [ h ] = 0.0000001
>405	PrimaryExpression	0.0000001
>406	ArrayIndexing	patpow [ h ]
>407	Identifier	h
>408	Identifier	patpow
>409	Condition	patpow [ h ] == 0.0
>410	EqualityExpression	patpow [ h ] == 0.0
>411	PrimaryExpression	0.0
>412	ArrayIndexing	patpow [ h ]
>413	Identifier	h
>414	Identifier	patpow
>415	ExpressionStatement	patpow [ h ] = sqrt ( ( double ) m )
>416	AssignmentExpr	patpow [ h ] = sqrt ( ( double ) m )
>417	CallExpression	sqrt ( ( double ) m )
>418	ArgumentList	( double ) m
>419	Argument	( double ) m
>420	CastExpression	( double ) m
>421	Identifier	m
>422	CastTarget	double
>423	Callee	sqrt
>424	Identifier	sqrt
>425	ArrayIndexing	patpow [ h ]
>426	Identifier	h
>427	Identifier	patpow
>428	ForStatement	for ( int i = 0 ; i < height ; i ++ )
>429	CompoundStatement	 
>430	ForStatement	for ( int i2 = 0 ; i2 < width ; i2 ++ )
>431	CompoundStatement	 
>432	ForStatement	for ( int i3 = 0 ; i3 < 3 ; i3 ++ )
>433	CompoundStatement	 
>434	ExpressionStatement	m += ( * pat_ptr * * pat_ptr )
>435	AssignmentExpr	m += ( * pat_ptr * * pat_ptr )
>436	MultiplicativeExpression	* pat_ptr * * pat_ptr
>437	UnaryOp	* pat_ptr
>438	Identifier	pat_ptr
>439	UnaryOperator	*
>440	UnaryOp	* pat_ptr
>441	Identifier	pat_ptr
>442	UnaryOperator	*
>443	Identifier	m
>444	ExpressionStatement	* pat_ptr -= l
>445	AssignmentExpr	* pat_ptr -= l
>446	Identifier	l
>447	UnaryOp	* pat_ptr
>448	Identifier	pat_ptr
>449	UnaryOperator	*
>450	IdentifierDeclStatement	int * pat_ptr = pat + ( h * height * width * 3 + i * width * 3 + i2 * 3 + i3 ) ;
>451	IdentifierDecl	* pat_ptr = pat + ( h * height * width * 3 + i * width * 3 + i2 * 3 + i3 )
>452	AssignmentExpr	* pat_ptr = pat + ( h * height * width * 3 + i * width * 3 + i2 * 3 + i3 )
>453	AdditiveExpression	pat + ( h * height * width * 3 + i * width * 3 + i2 * 3 + i3 )
>454	AdditiveExpression	h * height * width * 3 + i * width * 3 + i2 * 3 + i3
>455	AdditiveExpression	i * width * 3 + i2 * 3 + i3
>456	AdditiveExpression	i2 * 3 + i3
>457	Identifier	i3
>458	MultiplicativeExpression	i2 * 3
>459	PrimaryExpression	3
>460	Identifier	i2
>461	MultiplicativeExpression	i * width * 3
>462	MultiplicativeExpression	width * 3
>463	PrimaryExpression	3
>464	Identifier	width
>465	Identifier	i
>466	MultiplicativeExpression	h * height * width * 3
>467	MultiplicativeExpression	height * width * 3
>468	MultiplicativeExpression	width * 3
>469	PrimaryExpression	3
>470	Identifier	width
>471	Identifier	height
>472	Identifier	h
>473	Identifier	pat
>474	Identifier	pat_ptr
>475	Identifier	pat_ptr
>476	IdentifierDeclType	int *
>477	IncDecOp	i3 ++
>478	IncDec	++
>479	Identifier	i3
>480	Condition	i3 < 3
>481	RelationalExpression	i3 < 3
>482	PrimaryExpression	3
>483	Identifier	i3
>484	ForInit	int i3 = 0 ;
>485	IdentifierDeclStatement	int i3 = 0 ;
>486	IdentifierDecl	i3 = 0
>487	AssignmentExpr	i3 = 0
>488	PrimaryExpression	0
>489	Identifier	i3
>490	Identifier	i3
>491	IdentifierDeclType	int
>492	IncDecOp	i2 ++
>493	IncDec	++
>494	Identifier	i2
>495	Condition	i2 < width
>496	RelationalExpression	i2 < width
>497	Identifier	width
>498	Identifier	i2
>499	ForInit	int i2 = 0 ;
>500	IdentifierDeclStatement	int i2 = 0 ;
>501	IdentifierDecl	i2 = 0
>502	AssignmentExpr	i2 = 0
>503	PrimaryExpression	0
>504	Identifier	i2
>505	Identifier	i2
>506	IdentifierDeclType	int
>507	IncDecOp	i ++
>508	IncDec	++
>509	Identifier	i
>510	Condition	i < height
>511	RelationalExpression	i < height
>512	Identifier	height
>513	Identifier	i
>514	ForInit	int i = 0 ;
>515	IdentifierDeclStatement	int i = 0 ;
>516	IdentifierDecl	i = 0
>517	AssignmentExpr	i = 0
>518	PrimaryExpression	0
>519	Identifier	i
>520	Identifier	i
>521	IdentifierDeclType	int
>522	IdentifierDeclStatement	int m = 0 ;
>523	IdentifierDecl	m = 0
>524	AssignmentExpr	m = 0
>525	PrimaryExpression	0
>526	Identifier	m
>527	Identifier	m
>528	IdentifierDeclType	int
>529	ExpressionStatement	l /= ( height * width * 3 )
>530	AssignmentExpr	l /= ( height * width * 3 )
>531	MultiplicativeExpression	height * width * 3
>532	MultiplicativeExpression	width * 3
>533	PrimaryExpression	3
>534	Identifier	width
>535	Identifier	height
>536	Identifier	l
>537	ForStatement	for ( int i3 = 0 ; i3 < 3 ; i3 ++ )
>538	CompoundStatement	 
>539	ForStatement	for ( int i2 = 0 ; i2 < height ; i2 ++ )
>540	CompoundStatement	 
>541	ForStatement	for ( int i1 = 0 ; i1 < width ; i1 ++ )
>542	CompoundStatement	 
>543	ExpressionStatement	pt ++
>544	IncDecOp	pt ++
>545	IncDec	++
>546	Identifier	pt
>547	ExpressionStatement	l += j
>548	AssignmentExpr	l += j
>549	Identifier	j
>550	Identifier	l
>551	IfStatement	if ( i3 == 2 )
>552	CompoundStatement	 
>553	ExpressionStatement	* pat_BWptr /= 3
>554	AssignmentExpr	* pat_BWptr /= 3
>555	PrimaryExpression	3
>556	UnaryOp	* pat_BWptr
>557	Identifier	pat_BWptr
>558	UnaryOperator	*
>559	Condition	i3 == 2
>560	EqualityExpression	i3 == 2
>561	PrimaryExpression	2
>562	Identifier	i3
>563	IfStatement	if ( i3 == 0 )
>564	ElseStatement	else
>565	CompoundStatement	 
>566	ExpressionStatement	* pat_BWptr += j
>567	AssignmentExpr	* pat_BWptr += j
>568	Identifier	j
>569	UnaryOp	* pat_BWptr
>570	Identifier	pat_BWptr
>571	UnaryOperator	*
>572	CompoundStatement	 
>573	ExpressionStatement	* pat_BWptr = j
>574	AssignmentExpr	* pat_BWptr = j
>575	Identifier	j
>576	UnaryOp	* pat_BWptr
>577	Identifier	pat_BWptr
>578	UnaryOperator	*
>579	Condition	i3 == 0
>580	EqualityExpression	i3 == 0
>581	PrimaryExpression	0
>582	Identifier	i3
>583	IdentifierDeclStatement	short * pat_BWptr = patBW + ( h * height * width + i2 * width + i1 ) ;
>584	IdentifierDecl	* pat_BWptr = patBW + ( h * height * width + i2 * width + i1 )
>585	AssignmentExpr	* pat_BWptr = patBW + ( h * height * width + i2 * width + i1 )
>586	AdditiveExpression	patBW + ( h * height * width + i2 * width + i1 )
>587	AdditiveExpression	h * height * width + i2 * width + i1
>588	AdditiveExpression	i2 * width + i1
>589	Identifier	i1
>590	MultiplicativeExpression	i2 * width
>591	Identifier	width
>592	Identifier	i2
>593	MultiplicativeExpression	h * height * width
>594	MultiplicativeExpression	height * width
>595	Identifier	width
>596	Identifier	height
>597	Identifier	h
>598	Identifier	patBW
>599	Identifier	pat_BWptr
>600	Identifier	pat_BWptr
>601	IdentifierDeclType	short *
>602	SwitchStatement	switch ( i3 )
>603	CompoundStatement	 
>604	BreakStatement	break ;
>605	ExpressionStatement	* ( pat_ptr + 0 ) = j
>606	AssignmentExpr	* ( pat_ptr + 0 ) = j
>607	Identifier	j
>608	UnaryOp	* ( pat_ptr + 0 )
>609	AdditiveExpression	pat_ptr + 0
>610	PrimaryExpression	0
>611	Identifier	pat_ptr
>612	UnaryOperator	*
>613	Label	case 2 
>614	BreakStatement	break ;
>615	ExpressionStatement	* ( pat_ptr + 1 ) = j
>616	AssignmentExpr	* ( pat_ptr + 1 ) = j
>617	Identifier	j
>618	UnaryOp	* ( pat_ptr + 1 )
>619	AdditiveExpression	pat_ptr + 1
>620	PrimaryExpression	1
>621	Identifier	pat_ptr
>622	UnaryOperator	*
>623	Label	case 1 
>624	BreakStatement	break ;
>625	ExpressionStatement	* ( pat_ptr + 2 ) = j
>626	AssignmentExpr	* ( pat_ptr + 2 ) = j
>627	Identifier	j
>628	UnaryOp	* ( pat_ptr + 2 )
>629	AdditiveExpression	pat_ptr + 2
>630	PrimaryExpression	2
>631	Identifier	pat_ptr
>632	UnaryOperator	*
>633	Label	case 0 
>634	Condition	i3
>635	Identifier	i3
>636	IdentifierDeclStatement	int * pat_ptr = pat + ( h * height * width * 3 + i2 * width * 3 + i1 * 3 ) ;
>637	IdentifierDecl	* pat_ptr = pat + ( h * height * width * 3 + i2 * width * 3 + i1 * 3 )
>638	AssignmentExpr	* pat_ptr = pat + ( h * height * width * 3 + i2 * width * 3 + i1 * 3 )
>639	AdditiveExpression	pat + ( h * height * width * 3 + i2 * width * 3 + i1 * 3 )
>640	AdditiveExpression	h * height * width * 3 + i2 * width * 3 + i1 * 3
>641	AdditiveExpression	i2 * width * 3 + i1 * 3
>642	MultiplicativeExpression	i1 * 3
>643	PrimaryExpression	3
>644	Identifier	i1
>645	MultiplicativeExpression	i2 * width * 3
>646	MultiplicativeExpression	width * 3
>647	PrimaryExpression	3
>648	Identifier	width
>649	Identifier	i2
>650	MultiplicativeExpression	h * height * width * 3
>651	MultiplicativeExpression	height * width * 3
>652	MultiplicativeExpression	width * 3
>653	PrimaryExpression	3
>654	Identifier	width
>655	Identifier	height
>656	Identifier	h
>657	Identifier	pat
>658	Identifier	pat_ptr
>659	Identifier	pat_ptr
>660	IdentifierDeclType	int *
>661	IdentifierDeclStatement	short j = ( short ) ( 255 - i_data_array [ pt ] ) ;
>662	IdentifierDecl	j = ( short ) ( 255 - i_data_array [ pt ] )
>663	AssignmentExpr	j = ( short ) ( 255 - i_data_array [ pt ] )
>664	CastExpression	( short ) ( 255 - i_data_array [ pt ] )
>665	AdditiveExpression	255 - i_data_array [ pt ]
>666	ArrayIndexing	i_data_array [ pt ]
>667	Identifier	pt
>668	Identifier	i_data_array
>669	PrimaryExpression	255
>670	CastTarget	short
>671	Identifier	j
>672	Identifier	j
>673	IdentifierDeclType	short
>674	IncDecOp	i1 ++
>675	IncDec	++
>676	Identifier	i1
>677	Condition	i1 < width
>678	RelationalExpression	i1 < width
>679	Identifier	width
>680	Identifier	i1
>681	ForInit	int i1 = 0 ;
>682	IdentifierDeclStatement	int i1 = 0 ;
>683	IdentifierDecl	i1 = 0
>684	AssignmentExpr	i1 = 0
>685	PrimaryExpression	0
>686	Identifier	i1
>687	Identifier	i1
>688	IdentifierDeclType	int
>689	IncDecOp	i2 ++
>690	IncDec	++
>691	Identifier	i2
>692	Condition	i2 < height
>693	RelationalExpression	i2 < height
>694	Identifier	height
>695	Identifier	i2
>696	ForInit	int i2 = 0 ;
>697	IdentifierDeclStatement	int i2 = 0 ;
>698	IdentifierDecl	i2 = 0
>699	AssignmentExpr	i2 = 0
>700	PrimaryExpression	0
>701	Identifier	i2
>702	Identifier	i2
>703	IdentifierDeclType	int
>704	IncDecOp	i3 ++
>705	IncDec	++
>706	Identifier	i3
>707	Condition	i3 < 3
>708	RelationalExpression	i3 < 3
>709	PrimaryExpression	3
>710	Identifier	i3
>711	ForInit	int i3 = 0 ;
>712	IdentifierDeclStatement	int i3 = 0 ;
>713	IdentifierDecl	i3 = 0
>714	AssignmentExpr	i3 = 0
>715	PrimaryExpression	0
>716	Identifier	i3
>717	Identifier	i3
>718	IdentifierDeclType	int
>719	IdentifierDeclStatement	int l = 0 ;
>720	IdentifierDecl	l = 0
>721	AssignmentExpr	l = 0
>722	PrimaryExpression	0
>723	Identifier	l
>724	Identifier	l
>725	IdentifierDeclType	int
>726	IncDecOp	h ++
>727	IncDec	++
>728	Identifier	h
>729	Condition	h < 4
>730	RelationalExpression	h < 4
>731	PrimaryExpression	4
>732	Identifier	h
>733	ForInit	int h = 0 ;
>734	IdentifierDeclStatement	int h = 0 ;
>735	IdentifierDecl	h = 0
>736	AssignmentExpr	h = 0
>737	PrimaryExpression	0
>738	Identifier	h
>739	Identifier	h
>740	IdentifierDeclType	int
>741	IdentifierDeclStatement	int pt = 0 ;
>742	IdentifierDecl	pt = 0
>743	AssignmentExpr	pt = 0
>744	PrimaryExpression	0
>745	Identifier	pt
>746	Identifier	pt
>747	IdentifierDeclType	int
>748	IfStatement	if ( i_width != width || i_height != height )
>749	CompoundStatement	 
>750	ExpressionStatement	 
>751	CallExpression	NyARException ( )
>752	ArgumentList	 
>753	Callee	NyARException
>754	Identifier	NyARException
>755	Statement	 
>756	Condition	 
>757	OrExpression	i_width != width || i_height != height
>758	EqualityExpression	i_height != height
>759	Identifier	height
>760	Identifier	i_height
>761	EqualityExpression	i_width != width
>762	Identifier	width
>763	Identifier	i_width
<3=6,5,4
<6=7
<7=8
<13=16,15,14
<16=17
<17=18
<23=26,25,24
<26=27
<27=28
<33=36,35,34
<36=37
<37=38
<43=46,45,44
<46=47
<47=48
<53=56,55,54
<56=57
<57=58
<63=71,64
<64=68,65
<65=67,66
<68=70,69
<71=95,91,81,73,72
<73=74
<74=80,75
<75=79,76
<76=78,77
<81=82
<82=90,83
<83=89,84
<84=88,85
<85=87,86
<91=92
<92=94,93
<95=96
<96=98,97
<108=110,109
<110=119,112,111
<112=113
<113=117,114
<114=115
<115=116
<117=118
<119=120
<120=124,121
<121=122
<122=123
<124=125
<131=137,136,132
<132=133
<133=135,134
<137=254,247,167,156,139,138
<139=140
<140=149,148,141
<141=142
<142=146,143
<143=144
<144=145
<146=147
<149=150
<150=154,151
<151=152
<152=153
<154=155
<156=157
<157=160,159,158
<160=161
<161=165,162
<162=163
<163=164
<165=166
<167=168
<168=238,228,191,180,173,169
<169=170
<170=172,171
<173=174
<174=178,175
<175=176
<176=177
<178=179
<180=181
<181=189,182
<182=187,185,183
<183=184
<185=186
<187=188
<189=190
<191=220,210,207,192
<192=203,199,193
<193=194
<194=196,195
<196=198,197
<199=200
<200=202,201
<203=204
<204=206,205
<207=209,208
<210=211
<211=219,212
<212=218,213
<213=217,214
<214=216,215
<220=221
<221=222
<222=227,226,223
<223=225,224
<228=229
<229=237,230
<230=236,231
<231=235,232
<232=234,233
<238=239
<239=243,240
<240=241
<241=242
<243=244
<244=246,245
<247=248
<248=253,252,249
<249=251,250
<254=255
<255=257,256
<272=284,283,273
<273=280,277,274
<274=276,275
<277=279,278
<280=282,281
<284=748,295,285
<285=286
<286=294,287
<287=288
<288=292,289
<289=290
<290=291
<292=293
<295=296
<296=741,297
<297=733,729,726,298
<298=719,537,529,522,428,415,401,397,326,313,299
<299=307,300
<300=301
<301=302
<302=304,303
<304=306,305
<307=308
<308=310,309
<310=312,311
<313=314
<314=323,315
<315=321,316
<316=317
<317=318
<318=320,319
<321=322
<323=325,324
<326=389,385,382,327
<327=328
<328=374,370,367,329
<329=348,340,330
<330=331
<331=339,332
<332=336,333
<333=335,334
<336=338,337
<340=341
<341=345,342
<342=344,343
<345=347,346
<348=349
<349=366,365,350
<350=364,351
<351=363,352
<352=358,353
<353=355,354
<355=357,356
<358=362,359
<359=361,360
<367=369,368
<370=371
<371=373,372
<374=375
<375=376
<376=381,380,377
<377=379,378
<382=384,383
<385=386
<386=388,387
<389=390
<390=391
<391=396,395,392
<392=394,393
<397=398
<398=400,399
<401=409,402
<402=403
<403=404
<404=406,405
<406=408,407
<409=410
<410=412,411
<412=414,413
<415=416
<416=425,417
<417=423,418
<418=419
<419=420
<420=422,421
<423=424
<425=427,426
<428=514,510,507,429
<429=430
<430=499,495,492,431
<431=432
<432=484,480,477,433
<433=450,444,434
<434=435
<435=443,436
<436=440,437
<437=439,438
<440=442,441
<444=445
<445=447,446
<447=449,448
<450=451
<451=476,475,452
<452=474,453
<453=473,454
<454=466,455
<455=461,456
<456=458,457
<458=460,459
<461=465,462
<462=464,463
<466=472,467
<467=471,468
<468=470,469
<477=479,478
<480=481
<481=483,482
<484=485
<485=486
<486=491,490,487
<487=489,488
<492=494,493
<495=496
<496=498,497
<499=500
<500=501
<501=506,505,502
<502=504,503
<507=509,508
<510=511
<511=513,512
<514=515
<515=516
<516=521,520,517
<517=519,518
<522=523
<523=528,527,524
<524=526,525
<529=530
<530=536,531
<531=535,532
<532=534,533
<537=711,707,704,538
<538=539
<539=696,692,689,540
<540=541
<541=681,677,674,542
<542=661,636,602,583,563,551,547,543
<543=544
<544=546,545
<547=548
<548=550,549
<551=559,552
<552=553
<553=554
<554=556,555
<556=558,557
<559=560
<560=562,561
<563=579,572,564
<564=565
<565=566
<566=567
<567=569,568
<569=571,570
<572=573
<573=574
<574=576,575
<576=578,577
<579=580
<580=582,581
<583=584
<584=601,600,585
<585=599,586
<586=598,587
<587=593,588
<588=590,589
<590=592,591
<593=597,594
<594=596,595
<602=634,603
<603=633,625,624,623,615,614,613,605,604
<605=606
<606=608,607
<608=612,609
<609=611,610
<615=616
<616=618,617
<618=622,619
<619=621,620
<625=626
<626=628,627
<628=632,629
<629=631,630
<634=635
<636=637
<637=660,659,638
<638=658,639
<639=657,640
<640=650,641
<641=645,642
<642=644,643
<645=649,646
<646=648,647
<650=656,651
<651=655,652
<652=654,653
<661=662
<662=673,672,663
<663=671,664
<664=670,665
<665=669,666
<666=668,667
<674=676,675
<677=678
<678=680,679
<681=682
<682=683
<683=688,687,684
<684=686,685
<689=691,690
<692=693
<693=695,694
<696=697
<697=698
<698=703,702,699
<699=701,700
<704=706,705
<707=708
<708=710,709
<711=712
<712=713
<713=718,717,714
<714=716,715
<719=720
<720=725,724,721
<721=723,722
<726=728,727
<729=730
<730=732,731
<733=734
<734=735
<735=740,739,736
<736=738,737
<741=742
<742=747,746,743
<743=745,744
<748=756,749
<749=755,750
<750=751
<751=753,752
<753=754
<756=757
<757=761,758
<758=760,759
<761=763,762
