>3	FunctionDef	CondProbTable 
>4	ParameterList	const UInt hintNumCols , const UInt hintNumRows
>5	Parameter	 
>6	Identifier	hintNumRows
>7	ParameterType	const UInt
>8	Parameter	 
>9	Identifier	hintNumCols
>10	ParameterType	const UInt
>11	CompoundStatement	 
>17	FunctionDef	CondProbTable 
>18	ParameterList	 
>19	CompoundStatement	 
>20	ExpressionStatement	 
>21	Identifier	cleanTableP_
>22	Statement	 
>23	ExpressionStatement	 
>24	Identifier	tableP_
>25	Statement	 
>29	FunctionDef	CondProbTable 
>30	ParameterList	const UInt & row , vector < Real > & contents
>31	Parameter	 
>32	Identifier	contents
>33	ParameterType	vector < Real > &
>34	Parameter	 
>35	Identifier	row
>36	ParameterType	const UInt &
>37	ReturnType	void
>38	CompoundStatement	 
>39	ExpressionStatement	 
>40	CallExpression	tableP_ -> getRowToDense ( row , contents . begin ( ) )
>41	ArgumentList	row
>42	Argument	contents . begin ( )
>43	CallExpression	contents . begin ( )
>44	ArgumentList	 
>45	Callee	contents . begin
>46	MemberAccess	contents . begin
>47	Identifier	begin
>48	Identifier	contents
>49	Argument	row
>50	Identifier	row
>51	Callee	tableP_ -> getRowToDense
>52	PtrMemberAccess	tableP_ -> getRowToDense
>53	Identifier	getRowToDense
>54	Identifier	tableP_
>55	ExpressionStatement	 
>56	CallExpression	contents . resize ( tableP_ -> nCols ( ) )
>57	ArgumentList	tableP_ -> nCols ( )
>58	Argument	tableP_ -> nCols ( )
>59	CallExpression	tableP_ -> nCols ( )
>60	ArgumentList	 
>61	Callee	tableP_ -> nCols
>62	PtrMemberAccess	tableP_ -> nCols
>63	Identifier	nCols
>64	Identifier	tableP_
>65	Callee	contents . resize
>66	MemberAccess	contents . resize
>67	Identifier	resize
>68	Identifier	contents
>78	FunctionDef	CondProbTable 
>79	ParameterList	const UInt & rows , const UInt & cols
>80	Parameter	 
>81	Identifier	cols
>82	ParameterType	const UInt &
>83	Parameter	 
>84	Identifier	rows
>85	ParameterType	const UInt &
>86	ReturnType	void
>87	CompoundStatement	 
>88	IfStatement	if ( ( curRows < nextRows ) || ( curCols < nextCols ) )
>89	CompoundStatement	 
>90	ExpressionStatement	 
>91	CallExpression	colSums_ . resize ( nextCols )
>92	ArgumentList	nextCols
>93	Argument	nextCols
>94	Identifier	nextCols
>95	Callee	colSums_ . resize
>96	MemberAccess	colSums_ . resize
>97	Identifier	resize
>98	Identifier	colSums_
>99	ExpressionStatement	 
>100	CallExpression	rowSums_ . resize ( nextRows )
>101	ArgumentList	nextRows
>102	Argument	nextRows
>103	Identifier	nextRows
>104	Callee	rowSums_ . resize
>105	MemberAccess	rowSums_ . resize
>106	Identifier	resize
>107	Identifier	rowSums_
>108	ExpressionStatement	 
>109	CallExpression	tableP_ -> resize ( nextRows , nextCols )
>110	ArgumentList	nextRows
>111	Argument	nextCols
>112	Identifier	nextCols
>113	Argument	nextRows
>114	Identifier	nextRows
>115	Callee	tableP_ -> resize
>116	PtrMemberAccess	tableP_ -> resize
>117	Identifier	resize
>118	Identifier	tableP_
>119	ExpressionStatement	 
>120	AssignmentExpr	cleanTableValid_ = false
>121	Identifier	false
>122	Identifier	cleanTableValid_
>123	Condition	 
>124	OrExpression	( curRows < nextRows ) || ( curCols < nextCols )
>125	RelationalExpression	curCols < nextCols
>126	Identifier	nextCols
>127	Identifier	curCols
>128	RelationalExpression	curRows < nextRows
>129	Identifier	nextRows
>130	Identifier	curRows
>131	IdentifierDeclStatement	 
>132	IdentifierDecl	nextCols = max ( cols , curCols )
>133	AssignmentExpr	nextCols = max ( cols , curCols )
>134	CallExpression	max ( cols , curCols )
>135	ArgumentList	cols
>136	Argument	curCols
>137	Identifier	curCols
>138	Argument	cols
>139	Identifier	cols
>140	Callee	max
>141	Identifier	max
>142	Identifier	nextCols
>143	Identifier	nextCols
>144	IdentifierDeclType	UInt
>145	IdentifierDeclStatement	 
>146	IdentifierDecl	nextRows = max ( rows , curRows )
>147	AssignmentExpr	nextRows = max ( rows , curRows )
>148	CallExpression	max ( rows , curRows )
>149	ArgumentList	rows
>150	Argument	curRows
>151	Identifier	curRows
>152	Argument	rows
>153	Identifier	rows
>154	Callee	max
>155	Identifier	max
>156	Identifier	nextRows
>157	Identifier	nextRows
>158	IdentifierDeclType	UInt
>159	IdentifierDeclStatement	 
>160	IdentifierDecl	curCols = tableP_ -> nCols ( )
>161	AssignmentExpr	curCols = tableP_ -> nCols ( )
>162	CallExpression	tableP_ -> nCols ( )
>163	ArgumentList	 
>164	Callee	tableP_ -> nCols
>165	PtrMemberAccess	tableP_ -> nCols
>166	Identifier	nCols
>167	Identifier	tableP_
>168	Identifier	curCols
>169	Identifier	curCols
>170	IdentifierDeclType	UInt
>171	IdentifierDeclStatement	 
>172	IdentifierDecl	curRows = tableP_ -> nRows ( )
>173	AssignmentExpr	curRows = tableP_ -> nRows ( )
>174	CallExpression	tableP_ -> nRows ( )
>175	ArgumentList	 
>176	Callee	tableP_ -> nRows
>177	PtrMemberAccess	tableP_ -> nRows
>178	Identifier	nRows
>179	Identifier	tableP_
>180	Identifier	curRows
>181	Identifier	curRows
>182	IdentifierDeclType	UInt
>183	IfStatement	if ( ! tableP_ )
>184	CompoundStatement	 
>185	ExpressionStatement	 
>186	CallExpression	colSums_ . resize ( cols , ( Real ) 0 )
>187	ArgumentList	cols
>188	Argument	( Real ) 0
>189	CastExpression	( Real ) 0
>190	PrimaryExpression	0
>191	CastTarget	Real
>192	Argument	cols
>193	Identifier	cols
>194	Callee	colSums_ . resize
>195	MemberAccess	colSums_ . resize
>196	Identifier	resize
>197	Identifier	colSums_
>198	IfStatement	if ( hintNumRows_ != 0 )
>199	ElseStatement	else
>200	ExpressionStatement	 
>201	AssignmentExpr	tableP_ = new SparseMatrix < UInt , Real > ( 0 , 0 )
>202	Expression	0 , 0
>203	PrimaryExpression	0
>204	PrimaryExpression	0
>205	Identifier	tableP_
>206	ExpressionStatement	 
>207	AssignmentExpr	tableP_ = new SparseMatrix < UInt , Real > ( hintNumRows_ , cols )
>208	Expression	hintNumRows_ , cols
>209	Identifier	cols
>210	Identifier	hintNumRows_
>211	Identifier	tableP_
>212	Condition	 
>213	EqualityExpression	hintNumRows_ != 0
>214	PrimaryExpression	0
>215	Identifier	hintNumRows_
>216	ExpressionStatement	 
>217	ShiftExpression	NTA_ASSERT ( cols != 0 ) << errPrefix << \"Must have non-zero columns\"
>218	ShiftExpression	errPrefix << \"Must have non-zero columns\"
>219	PrimaryExpression	\"Must have non-zero columns\"
>220	Identifier	errPrefix
>221	CallExpression	NTA_ASSERT ( cols != 0 )
>222	ArgumentList	cols != 0
>223	Argument	cols != 0
>224	EqualityExpression	cols != 0
>225	PrimaryExpression	0
>226	Identifier	cols
>227	Callee	NTA_ASSERT
>228	Identifier	NTA_ASSERT
>229	Condition	 
>230	UnaryOp	! tableP_
>231	Identifier	tableP_
>232	UnaryOperator	!
>233	IdentifierDeclStatement	 
>234	IdentifierDecl	* errPrefix = \"CondProbTable
>235	AssignmentExpr	* errPrefix = \"CondProbTable
>236	PrimaryExpression	\"CondProbTable
>237	Identifier	errPrefix
>238	Identifier	errPrefix
>239	IdentifierDeclType	const char *
>260	FunctionDef	CondProbTable 
>261	ParameterList	const UInt & row , const vector < Real > & distribution
>262	Parameter	 
>263	Identifier	distribution
>264	ParameterType	const vector < Real > &
>265	Parameter	 
>266	Identifier	row
>267	ParameterType	const UInt &
>268	ReturnType	void
>269	CompoundStatement	 
>270	ExpressionStatement	 
>271	AssignmentExpr	rowSums_ [ row ] += rowSum
>272	Identifier	rowSum
>273	ArrayIndexing	rowSums_ [ row ]
>274	Identifier	row
>275	Identifier	rowSums_
>276	CompoundStatement	 
>277	ExpressionStatement	 
>278	IncDecOp	colSumsIter ++
>279	IncDec	++
>280	Identifier	colSumsIter
>281	ExpressionStatement	 
>282	AssignmentExpr	* colSumsIter = * colSumsIter + * iter
>283	AdditiveExpression	* colSumsIter + * iter
>284	UnaryOp	* iter
>285	Identifier	iter
>286	UnaryOperator	*
>287	UnaryOp	* colSumsIter
>288	Identifier	colSumsIter
>289	UnaryOperator	*
>290	UnaryOp	* colSumsIter
>291	Identifier	colSumsIter
>292	UnaryOperator	*
>293	ExpressionStatement	 
>294	AssignmentExpr	rowSum = rowSum + * iter
>295	AdditiveExpression	rowSum + * iter
>296	UnaryOp	* iter
>297	Identifier	iter
>298	UnaryOperator	*
>299	Identifier	rowSum
>300	Identifier	rowSum
>301	Statement	 
>302	Statement	 
>303	Statement	 
>304	Statement	 
>305	Statement	 
>306	Statement	 
>307	Statement	 
>308	Statement	 
>309	Statement	 
>310	Statement	 
>311	Statement	 
>312	IdentifierDeclStatement	 
>313	IdentifierDecl	colSumsIter = colSums_ . begin ( )
>314	AssignmentExpr	colSumsIter = colSums_ . begin ( )
>315	CallExpression	colSums_ . begin ( )
>316	ArgumentList	 
>317	Callee	colSums_ . begin
>318	MemberAccess	colSums_ . begin
>319	Identifier	begin
>320	Identifier	colSums_
>321	Identifier	colSumsIter
>322	Identifier	colSumsIter
>323	IdentifierDeclType	vector < Real > 
>324	IdentifierDeclStatement	 
>325	IdentifierDecl	rowSum = 0
>326	AssignmentExpr	rowSum = 0
>327	PrimaryExpression	0
>328	Identifier	rowSum
>329	Identifier	rowSum
>330	IdentifierDeclType	Real
>331	ExpressionStatement	 
>332	Statement	 
>333	Statement	 
>334	Statement	 
>335	Statement	 
>336	Statement	 
>337	Statement	 
>338	Statement	 
>339	Statement	 
>340	Statement	 
>341	Statement	 
>342	Statement	 
>343	Statement	 
>344	Statement	 
>345	Statement	 
>346	Statement	 
>347	Statement	 
>348	Statement	 
>349	Statement	 
>350	Statement	 
>351	Statement	 
>352	Statement	 
>353	ExpressionStatement	 
>354	AssignmentExpr	cleanTableValid_ = false
>355	Identifier	false
>356	Identifier	cleanTableValid_
>357	ExpressionStatement	 
>358	CallExpression	grow ( row + 1 , cols )
>359	ArgumentList	row + 1
>360	Argument	cols
>361	Identifier	cols
>362	Argument	row + 1
>363	AdditiveExpression	row + 1
>364	PrimaryExpression	1
>365	Identifier	row
>366	Callee	grow
>367	Identifier	grow
>368	IfStatement	if ( cols < hintNumCols_ )
>369	ExpressionStatement	 
>370	AssignmentExpr	cols = hintNumCols_
>371	Identifier	hintNumCols_
>372	Identifier	cols
>373	Condition	 
>374	RelationalExpression	cols < hintNumCols_
>375	Identifier	hintNumCols_
>376	Identifier	cols
>377	IdentifierDeclStatement	 
>378	IdentifierDecl	cols = UInt ( distribution . size ( ) )
>379	AssignmentExpr	cols = UInt ( distribution . size ( ) )
>380	CallExpression	UInt ( distribution . size ( ) )
>381	ArgumentList	distribution . size ( )
>382	Argument	distribution . size ( )
>383	CallExpression	distribution . size ( )
>384	ArgumentList	 
>385	Callee	distribution . size
>386	MemberAccess	distribution . size
>387	Identifier	size
>388	Identifier	distribution
>389	Callee	UInt
>390	Identifier	UInt
>391	Identifier	cols
>392	Identifier	cols
>393	IdentifierDeclType	UInt
>415	FunctionDef	CondProbTable 
>416	ParameterList	const vector < Real > & distribution , vector < Real > & outScores , inferType infer
>417	Parameter	 
>418	Identifier	infer
>419	ParameterType	inferType
>420	Parameter	 
>421	Identifier	outScores
>422	ParameterType	vector < Real > &
>423	Parameter	 
>424	Identifier	distribution
>425	ParameterType	const vector < Real > &
>426	ReturnType	void
>427	CompoundStatement	 
>428	ExpressionStatement	 
>429	CallExpression	inferRow ( distribution . begin ( ) , outScores . begin ( ) , infer )
>430	ArgumentList	distribution . begin ( )
>431	Argument	infer
>432	Identifier	infer
>433	Argument	outScores . begin ( )
>434	CallExpression	outScores . begin ( )
>435	ArgumentList	 
>436	Callee	outScores . begin
>437	MemberAccess	outScores . begin
>438	Identifier	begin
>439	Identifier	outScores
>440	Argument	distribution . begin ( )
>441	CallExpression	distribution . begin ( )
>442	ArgumentList	 
>443	Callee	distribution . begin
>444	MemberAccess	distribution . begin
>445	Identifier	begin
>446	Identifier	distribution
>447	Callee	inferRow
>448	Identifier	inferRow
>449	ExpressionStatement	 
>450	ShiftExpression	NTA_ASSERT ( outScores . size ( ) >= tableP_ -> nRows ( ) ) << errPrefix << \"Output vector not large \
>451	ShiftExpression	errPrefix << \"Output vector not large enough to hold all \" << tableP_ -> nRows ( ) << \" rows.\"
>452	ShiftExpression	\"Output vector not large enough to hold all \" << tableP_ -> nRows ( ) << \" rows.\"
>453	ShiftExpression	tableP_ -> nRows ( ) << \" rows.\"
>454	PrimaryExpression	\" rows.\"
>455	CallExpression	tableP_ -> nRows ( )
>456	ArgumentList	 
>457	Callee	tableP_ -> nRows
>458	PtrMemberAccess	tableP_ -> nRows
>459	Identifier	nRows
>460	Identifier	tableP_
>461	PrimaryExpression	\"Output vector not large enough to hold all \"
>462	Identifier	errPrefix
>463	CallExpression	NTA_ASSERT ( outScores . size ( ) >= tableP_ -> nRows ( ) )
>464	ArgumentList	outScores . size ( ) >= tableP_ -> nRows ( )
>465	Argument	outScores . size ( ) >= tableP_ -> nRows ( )
>466	RelationalExpression	outScores . size ( ) >= tableP_ -> nRows ( )
>467	CallExpression	tableP_ -> nRows ( )
>468	ArgumentList	 
>469	Callee	tableP_ -> nRows
>470	PtrMemberAccess	tableP_ -> nRows
>471	Identifier	nRows
>472	Identifier	tableP_
>473	CallExpression	outScores . size ( )
>474	ArgumentList	 
>475	Callee	outScores . size
>476	MemberAccess	outScores . size
>477	Identifier	size
>478	Identifier	outScores
>479	Callee	NTA_ASSERT
>480	Identifier	NTA_ASSERT
>481	ExpressionStatement	 
>482	ShiftExpression	NTA_ASSERT ( distribution . size ( ) == tableP_ -> nCols ( ) ) << errPrefix << \"input distribution vector \
>483	ShiftExpression	errPrefix << \"input distribution vector should be \" << tableP_ -> nCols ( ) << \" wide\"
>484	ShiftExpression	\"input distribution vector should be \" << tableP_ -> nCols ( ) << \" wide\"
>485	ShiftExpression	tableP_ -> nCols ( ) << \" wide\"
>486	PrimaryExpression	\" wide\"
>487	CallExpression	tableP_ -> nCols ( )
>488	ArgumentList	 
>489	Callee	tableP_ -> nCols
>490	PtrMemberAccess	tableP_ -> nCols
>491	Identifier	nCols
>492	Identifier	tableP_
>493	PrimaryExpression	\"input distribution vector should be \"
>494	Identifier	errPrefix
>495	CallExpression	NTA_ASSERT ( distribution . size ( ) == tableP_ -> nCols ( ) )
>496	ArgumentList	distribution . size ( ) == tableP_ -> nCols ( )
>497	Argument	distribution . size ( ) == tableP_ -> nCols ( )
>498	EqualityExpression	distribution . size ( ) == tableP_ -> nCols ( )
>499	CallExpression	tableP_ -> nCols ( )
>500	ArgumentList	 
>501	Callee	tableP_ -> nCols
>502	PtrMemberAccess	tableP_ -> nCols
>503	Identifier	nCols
>504	Identifier	tableP_
>505	CallExpression	distribution . size ( )
>506	ArgumentList	 
>507	Callee	distribution . size
>508	MemberAccess	distribution . size
>509	Identifier	size
>510	Identifier	distribution
>511	Callee	NTA_ASSERT
>512	Identifier	NTA_ASSERT
>513	IdentifierDeclStatement	 
>514	IdentifierDecl	* errPrefix = \"CondProbTable
>515	AssignmentExpr	* errPrefix = \"CondProbTable
>516	PrimaryExpression	\"CondProbTable
>517	Identifier	errPrefix
>518	Identifier	errPrefix
>519	IdentifierDeclType	const char *
>535	FunctionDef	CondProbTable 
>536	ParameterList	vector < Real > 
>537	Parameter	 
>538	Identifier	infer
>539	ParameterType	inferType
>540	Parameter	 
>541	Identifier	outIter
>542	ParameterType	vector < Real > 
>543	Parameter	 
>544	Identifier	distIter
>545	ParameterType	vector < Real > 
>546	ReturnType	void
>547	CompoundStatement	 
>548	IfStatement	if ( infer == inferMarginal )
>549	ElseStatement	else
>550	IfStatement	if ( infer == inferRowEvidence )
>551	ElseStatement	else
>552	IfStatement	if ( infer == inferMaxProd )
>553	ElseStatement	else
>554	IfStatement	if ( infer == inferViterbi )
>555	ElseStatement	else
>556	ExpressionStatement	 
>557	ShiftExpression	NTA_THROW << errPrefix << \"Unknown inference type \" << infer
>558	ShiftExpression	errPrefix << \"Unknown inference type \" << infer
>559	ShiftExpression	\"Unknown inference type \" << infer
>560	Identifier	infer
>561	PrimaryExpression	\"Unknown inference type \"
>562	Identifier	errPrefix
>563	Identifier	NTA_THROW
>564	CompoundStatement	 
>565	ExpressionStatement	 
>566	CallExpression	cleanTableP_ -> vecMaxProd ( distIter , outIter )
>567	ArgumentList	distIter
>568	Argument	outIter
>569	Identifier	outIter
>570	Argument	distIter
>571	Identifier	distIter
>572	Callee	cleanTableP_ -> vecMaxProd
>573	PtrMemberAccess	cleanTableP_ -> vecMaxProd
>574	Identifier	vecMaxProd
>575	Identifier	cleanTableP_
>576	IfStatement	if ( ! cleanTableValid_ )
>577	ExpressionStatement	 
>578	CallExpression	makeCleanCPT ( )
>579	ArgumentList	 
>580	Callee	makeCleanCPT
>581	Identifier	makeCleanCPT
>582	Condition	 
>583	UnaryOp	! cleanTableValid_
>584	Identifier	cleanTableValid_
>585	UnaryOperator	!
>586	Condition	 
>587	EqualityExpression	infer == inferViterbi
>588	Identifier	inferViterbi
>589	Identifier	infer
>590	CompoundStatement	 
>591	ExpressionStatement	 
>592	CallExpression	tableP_ -> vecMaxProd ( distIter , outIter )
>593	ArgumentList	distIter
>594	Argument	outIter
>595	Identifier	outIter
>596	Argument	distIter
>597	Identifier	distIter
>598	Callee	tableP_ -> vecMaxProd
>599	PtrMemberAccess	tableP_ -> vecMaxProd
>600	Identifier	vecMaxProd
>601	Identifier	tableP_
>602	Condition	 
>603	EqualityExpression	infer == inferMaxProd
>604	Identifier	inferMaxProd
>605	Identifier	infer
>606	CompoundStatement	 
>607	CompoundStatement	 
>608	ExpressionStatement	 
>609	UnaryExpression	++ outIter
>610	Identifier	outIter
>611	IncDec	++
>612	ExpressionStatement	 
>613	AssignmentExpr	* outIter = * outIter / * iter
>614	MultiplicativeExpression	* outIter / * iter
>615	UnaryOp	* iter
>616	Identifier	iter
>617	UnaryOperator	*
>618	UnaryOp	* outIter
>619	Identifier	outIter
>620	UnaryOperator	*
>621	UnaryOp	* outIter
>622	Identifier	outIter
>623	UnaryOperator	*
>624	Statement	 
>625	Statement	 
>626	Statement	 
>627	Statement	 
>628	Statement	 
>629	Statement	 
>630	Statement	 
>631	Statement	 
>632	Statement	 
>633	Statement	 
>634	Statement	 
>635	ExpressionStatement	 
>636	CallExpression	tableP_ -> rightVecProd ( distIter , outIter )
>637	ArgumentList	distIter
>638	Argument	outIter
>639	Identifier	outIter
>640	Argument	distIter
>641	Identifier	distIter
>642	Callee	tableP_ -> rightVecProd
>643	PtrMemberAccess	tableP_ -> rightVecProd
>644	Identifier	rightVecProd
>645	Identifier	tableP_
>646	Condition	 
>647	EqualityExpression	infer == inferRowEvidence
>648	Identifier	inferRowEvidence
>649	Identifier	infer
>650	CompoundStatement	 
>651	ExpressionStatement	 
>652	CallExpression	tableP_ -> rightVecProd ( normDist . begin ( ) , outIter )
>653	ArgumentList	normDist . begin ( )
>654	Argument	outIter
>655	Identifier	outIter
>656	Argument	normDist . begin ( )
>657	CallExpression	normDist . begin ( )
>658	ArgumentList	 
>659	Callee	normDist . begin
>660	MemberAccess	normDist . begin
>661	Identifier	begin
>662	Identifier	normDist
>663	Callee	tableP_ -> rightVecProd
>664	PtrMemberAccess	tableP_ -> rightVecProd
>665	Identifier	rightVecProd
>666	Identifier	tableP_
>667	CompoundStatement	 
>668	ExpressionStatement	 
>669	UnaryExpression	++ distIter
>670	Identifier	distIter
>671	IncDec	++
>672	ExpressionStatement	 
>673	CallExpression	normDist . push_back ( * distIter / * iter )
>674	ArgumentList	* distIter / * iter
>675	Argument	* distIter / * iter
>676	MultiplicativeExpression	* distIter / * iter
>677	UnaryOp	* iter
>678	Identifier	iter
>679	UnaryOperator	*
>680	UnaryOp	* distIter
>681	Identifier	distIter
>682	UnaryOperator	*
>683	Callee	normDist . push_back
>684	MemberAccess	normDist . push_back
>685	Identifier	push_back
>686	Identifier	normDist
>687	Statement	 
>688	Statement	 
>689	Statement	 
>690	Statement	 
>691	Statement	 
>692	Statement	 
>693	Statement	 
>694	Statement	 
>695	Statement	 
>696	Statement	 
>697	Statement	 
>698	IdentifierDeclStatement	 
>699	IdentifierDecl	normDist
>700	Identifier	normDist
>701	IdentifierDeclType	vector < Real >
>702	Condition	 
>703	EqualityExpression	infer == inferMarginal
>704	Identifier	inferMarginal
>705	Identifier	infer
>706	ExpressionStatement	 
>707	ShiftExpression	NTA_ASSERT ( tableP_ != NULL ) << errPrefix << \"Must call updateRow at least once before doing inference\"\
>708	ShiftExpression	errPrefix << \"Must call updateRow at least once before doing inference\"
>709	PrimaryExpression	\"Must call updateRow at least once before doing inference\"
>710	Identifier	errPrefix
>711	CallExpression	NTA_ASSERT ( tableP_ != NULL )
>712	ArgumentList	tableP_ != NULL
>713	Argument	tableP_ != NULL
>714	EqualityExpression	tableP_ != NULL
>715	Identifier	NULL
>716	Identifier	tableP_
>717	Callee	NTA_ASSERT
>718	Identifier	NTA_ASSERT
>719	IdentifierDeclStatement	 
>720	IdentifierDecl	* errPrefix = \"CondProbTable
>721	AssignmentExpr	* errPrefix = \"CondProbTable
>722	PrimaryExpression	\"CondProbTable
>723	Identifier	errPrefix
>724	Identifier	errPrefix
>725	IdentifierDeclType	const char *
>747	FunctionDef	CondProbTable 
>748	ParameterList	 
>749	ReturnType	void
>750	CompoundStatement	 
>751	ExpressionStatement	 
>752	AssignmentExpr	cleanTableValid_ = true
>753	Identifier	true
>754	Identifier	cleanTableValid_
>755	ForStatement	for ( UInt row = 0 ; row < nrows ; ++ row )
>756	CompoundStatement	 
>757	ExpressionStatement	 
>758	CallExpression	cleanTableP_ -> addRow ( UInt ( nz . size ( ) ) , nz . begin ( ) )
>759	ArgumentList	UInt ( nz . size ( ) )
>760	Argument	nz . begin ( )
>761	CallExpression	nz . begin ( )
>762	ArgumentList	 
>763	Callee	nz . begin
>764	MemberAccess	nz . begin
>765	Identifier	begin
>766	Identifier	nz
>767	Argument	UInt ( nz . size ( ) )
>768	CallExpression	UInt ( nz . size ( ) )
>769	ArgumentList	nz . size ( )
>770	Argument	nz . size ( )
>771	CallExpression	nz . size ( )
>772	ArgumentList	 
>773	Callee	nz . size
>774	MemberAccess	nz . size
>775	Identifier	size
>776	Identifier	nz
>777	Callee	UInt
>778	Identifier	UInt
>779	Callee	cleanTableP_ -> addRow
>780	PtrMemberAccess	cleanTableP_ -> addRow
>781	Identifier	addRow
>782	Identifier	cleanTableP_
>783	ForStatement	for ( UInt col = 0 ; col < ncols ; ++ col )
>784	IfStatement	if ( col_max [ col ] . first == row )
>785	ExpressionStatement	 
>786	CallExpression	nz . push_back ( col )
>787	ArgumentList	col
>788	Argument	col
>789	Identifier	col
>790	Callee	nz . push_back
>791	MemberAccess	nz . push_back
>792	Identifier	push_back
>793	Identifier	nz
>794	Condition	 
>795	EqualityExpression	col_max [ col ] . first == row
>796	Identifier	row
>797	MemberAccess	col_max [ col ] . first
>798	Identifier	first
>799	ArrayIndexing	col_max [ col ]
>800	Identifier	col
>801	Identifier	col_max
>802	UnaryExpression	 
>803	Identifier	col
>804	IncDec	++
>805	Condition	 
>806	RelationalExpression	col < ncols
>807	Identifier	ncols
>808	Identifier	col
>809	ForInit	 
>810	IdentifierDeclStatement	UInt col = 0 ;
>811	IdentifierDecl	col = 0
>812	AssignmentExpr	col = 0
>813	PrimaryExpression	0
>814	Identifier	col
>815	Identifier	col
>816	IdentifierDeclType	UInt
>817	IdentifierDeclStatement	 
>818	IdentifierDecl	nz
>819	Identifier	nz
>820	IdentifierDeclType	vector < UInt >
>821	UnaryExpression	 
>822	Identifier	row
>823	IncDec	++
>824	Condition	 
>825	RelationalExpression	row < nrows
>826	Identifier	nrows
>827	Identifier	row
>828	ForInit	 
>829	IdentifierDeclStatement	UInt row = 0 ;
>830	IdentifierDecl	row = 0
>831	AssignmentExpr	row = 0
>832	PrimaryExpression	0
>833	Identifier	row
>834	Identifier	row
>835	IdentifierDeclType	UInt
>836	ExpressionStatement	 
>837	AssignmentExpr	cleanTableP_ = new SparseMatrix01 < UInt , Real > ( ncols , 1 )
>838	Expression	ncols , 1
>839	PrimaryExpression	1
>840	Identifier	ncols
>841	Identifier	cleanTableP_
>842	ExpressionStatement	 
>843	CallExpression	tableP_ -> colMax ( col_max . begin ( ) )
>844	ArgumentList	col_max . begin ( )
>845	Argument	col_max . begin ( )
>846	CallExpression	col_max . begin ( )
>847	ArgumentList	 
>848	Callee	col_max . begin
>849	MemberAccess	col_max . begin
>850	Identifier	begin
>851	Identifier	col_max
>852	Callee	tableP_ -> colMax
>853	PtrMemberAccess	tableP_ -> colMax
>854	Identifier	colMax
>855	Identifier	tableP_
>856	IdentifierDeclStatement	 
>857	IdentifierDecl	col_max ( ncols , make_pair ( 0 , Real ( 0 ) ) )
>858	Expression	ncols , make_pair ( 0 , Real ( 0 ) )
>859	CallExpression	make_pair ( 0 , Real ( 0 ) )
>860	ArgumentList	0
>861	Argument	Real ( 0 )
>862	CallExpression	Real ( 0 )
>863	ArgumentList	0
>864	Argument	0
>865	PrimaryExpression	0
>866	Callee	Real
>867	Identifier	Real
>868	Argument	0
>869	PrimaryExpression	0
>870	Callee	make_pair
>871	Identifier	make_pair
>872	Identifier	ncols
>873	Identifier	col_max
>874	IdentifierDeclType	vector < pair < UInt , Real > >
>875	IdentifierDeclStatement	 
>876	IdentifierDecl	ncols = tableP_ -> nCols ( )
>877	AssignmentExpr	ncols = tableP_ -> nCols ( )
>878	CallExpression	tableP_ -> nCols ( )
>879	ArgumentList	 
>880	Callee	tableP_ -> nCols
>881	PtrMemberAccess	tableP_ -> nCols
>882	Identifier	nCols
>883	Identifier	tableP_
>884	Identifier	ncols
>885	Identifier	ncols
>886	IdentifierDeclType	UInt
>887	IdentifierDecl	nrows = tableP_ -> nRows ( )
>888	AssignmentExpr	nrows = tableP_ -> nRows ( )
>889	CallExpression	tableP_ -> nRows ( )
>890	ArgumentList	 
>891	Callee	tableP_ -> nRows
>892	PtrMemberAccess	tableP_ -> nRows
>893	Identifier	nRows
>894	Identifier	tableP_
>895	Identifier	nrows
>896	Identifier	nrows
>897	IdentifierDeclType	UInt
>898	ExpressionStatement	 
>899	Identifier	cleanTableP_
>900	Statement	 
>925	FunctionDef	CondProbTable 
>926	ParameterList	ostream & state
>927	Parameter	 
>928	Identifier	state
>929	ParameterType	ostream &
>930	ReturnType	void
>931	CompoundStatement	 
>932	ExpressionStatement	 
>933	ShiftExpression	state << \" \"
>934	PrimaryExpression	\" \"
>935	Identifier	state
>936	IfStatement	if ( tableP_ )
>937	ElseStatement	else
>938	CompoundStatement	 
>939	ExpressionStatement	 
>940	ShiftExpression	state << hintNumCols_ << \" \" << hintNumRows_
>941	ShiftExpression	hintNumCols_ << \" \" << hintNumRows_
>942	ShiftExpression	\" \" << hintNumRows_
>943	Identifier	hintNumRows_
>944	PrimaryExpression	\" \"
>945	Identifier	hintNumCols_
>946	Identifier	state
>947	ExpressionStatement	 
>948	ShiftExpression	state << \"0 \"
>949	PrimaryExpression	\"0 \"
>950	Identifier	state
>951	CompoundStatement	 
>952	ExpressionStatement	 
>953	CallExpression	tableP_ -> toCSR ( state )
>954	ArgumentList	state
>955	Argument	state
>956	Identifier	state
>957	Callee	tableP_ -> toCSR
>958	PtrMemberAccess	tableP_ -> toCSR
>959	Identifier	toCSR
>960	Identifier	tableP_
>961	ExpressionStatement	 
>962	ShiftExpression	state << tableP_ -> nCols ( ) << \" \"
>963	ShiftExpression	tableP_ -> nCols ( ) << \" \"
>964	PrimaryExpression	\" \"
>965	CallExpression	tableP_ -> nCols ( )
>966	ArgumentList	 
>967	Callee	tableP_ -> nCols
>968	PtrMemberAccess	tableP_ -> nCols
>969	Identifier	nCols
>970	Identifier	tableP_
>971	Identifier	state
>972	ExpressionStatement	 
>973	ShiftExpression	state << \"1 \"
>974	PrimaryExpression	\"1 \"
>975	Identifier	state
>976	Condition	 
>977	Identifier	tableP_
>978	ExpressionStatement	 
>979	ShiftExpression	state << \"CondProbTable.V1 \"
>980	PrimaryExpression	\"CondProbTable.V1 \"
>981	Identifier	state
>982	ExpressionStatement	 
>983	ShiftExpression	NTA_CHECK ( state . good ( ) ) << errPrefix << \"- Bad stream\"
>984	ShiftExpression	errPrefix << \"- Bad stream\"
>985	PrimaryExpression	\"- Bad stream\"
>986	Identifier	errPrefix
>987	CallExpression	NTA_CHECK ( state . good ( ) )
>988	ArgumentList	state . good ( )
>989	Argument	state . good ( )
>990	CallExpression	state . good ( )
>991	ArgumentList	 
>992	Callee	state . good
>993	MemberAccess	state . good
>994	Identifier	good
>995	Identifier	state
>996	Callee	NTA_CHECK
>997	Identifier	NTA_CHECK
>998	IdentifierDeclStatement	 
>999	IdentifierDecl	* errPrefix = \"CondProbTable
>1000	AssignmentExpr	* errPrefix = \"CondProbTable
>1001	PrimaryExpression	\"CondProbTable
>1002	Identifier	errPrefix
>1003	Identifier	errPrefix
>1004	IdentifierDeclType	const char *
>1012	FunctionDef	CondProbTable 
>1013	ParameterList	istream & state
>1014	Parameter	 
>1015	Identifier	state
>1016	ParameterType	istream &
>1017	ReturnType	void
>1018	CompoundStatement	 
>1019	ExpressionStatement	 
>1020	CallExpression	state . exceptions ( excMask )
>1021	ArgumentList	excMask
>1022	Argument	excMask
>1023	Identifier	excMask
>1024	Callee	state . exceptions
>1025	MemberAccess	state . exceptions
>1026	Identifier	exceptions
>1027	Identifier	state
>1028	IfStatement	if ( tableP_ )
>1029	CompoundStatement	 
>1030	ForStatement	for ( UInt r = 0 ; r < tableP_ -> nRows ( ) ; ++ r , ++ rowIter )
>1031	CompoundStatement	 
>1032	CompoundStatement	 
>1033	ExpressionStatement	 
>1034	UnaryExpression	++ srcIter
>1035	Identifier	srcIter
>1036	IncDec	++
>1037	ExpressionStatement	 
>1038	AssignmentExpr	* colIter = * colIter + * srcIter
>1039	AdditiveExpression	* colIter + * srcIter
>1040	UnaryOp	* srcIter
>1041	Identifier	srcIter
>1042	UnaryOperator	*
>1043	UnaryOp	* colIter
>1044	Identifier	colIter
>1045	UnaryOperator	*
>1046	UnaryOp	* colIter
>1047	Identifier	colIter
>1048	UnaryOperator	*
>1049	Statement	 
>1050	Statement	 
>1051	Statement	 
>1052	Statement	 
>1053	Statement	 
>1054	Statement	 
>1055	Statement	 
>1056	Statement	 
>1057	Statement	 
>1058	Statement	 
>1059	Statement	 
>1060	IdentifierDeclStatement	 
>1061	IdentifierDecl	srcIter = row . begin ( )
>1062	AssignmentExpr	srcIter = row . begin ( )
>1063	CallExpression	row . begin ( )
>1064	ArgumentList	 
>1065	Callee	row . begin
>1066	MemberAccess	row . begin
>1067	Identifier	begin
>1068	Identifier	row
>1069	Identifier	srcIter
>1070	Identifier	srcIter
>1071	IdentifierDeclType	vector < Real > 
>1072	ExpressionStatement	 
>1073	AssignmentExpr	* rowIter = rowSum
>1074	Identifier	rowSum
>1075	UnaryOp	* rowIter
>1076	Identifier	rowIter
>1077	UnaryOperator	*
>1078	CompoundStatement	 
>1079	ExpressionStatement	 
>1080	AssignmentExpr	rowSum += * iter
>1081	UnaryOp	* iter
>1082	Identifier	iter
>1083	UnaryOperator	*
>1084	Identifier	rowSum
>1085	Statement	 
>1086	Statement	 
>1087	Statement	 
>1088	Statement	 
>1089	Statement	 
>1090	Statement	 
>1091	Statement	 
>1092	Statement	 
>1093	Statement	 
>1094	Statement	 
>1095	Statement	 
>1096	IdentifierDeclStatement	 
>1097	IdentifierDecl	rowSum = 0
>1098	AssignmentExpr	rowSum = 0
>1099	PrimaryExpression	0
>1100	Identifier	rowSum
>1101	Identifier	rowSum
>1102	IdentifierDeclType	Real
>1103	ExpressionStatement	 
>1104	CallExpression	getRow ( r , row )
>1105	ArgumentList	r
>1106	Argument	row
>1107	Identifier	row
>1108	Argument	r
>1109	Identifier	r
>1110	Callee	getRow
>1111	Identifier	getRow
>1112	Expression	 
>1113	UnaryExpression	++ rowIter
>1114	Identifier	rowIter
>1115	IncDec	++
>1116	UnaryExpression	++ r
>1117	Identifier	r
>1118	IncDec	++
>1119	Condition	 
>1120	RelationalExpression	r < tableP_ -> nRows ( )
>1121	CallExpression	tableP_ -> nRows ( )
>1122	ArgumentList	 
>1123	Callee	tableP_ -> nRows
>1124	PtrMemberAccess	tableP_ -> nRows
>1125	Identifier	nRows
>1126	Identifier	tableP_
>1127	Identifier	r
>1128	ForInit	 
>1129	IdentifierDeclStatement	UInt r = 0 ;
>1130	IdentifierDecl	r = 0
>1131	AssignmentExpr	r = 0
>1132	PrimaryExpression	0
>1133	Identifier	r
>1134	Identifier	r
>1135	IdentifierDeclType	UInt
>1136	IdentifierDeclStatement	 
>1137	IdentifierDecl	row
>1138	Identifier	row
>1139	IdentifierDeclType	vector < Real >
>1140	IdentifierDeclStatement	 
>1141	IdentifierDecl	rowIter = rowSums_ . begin ( )
>1142	AssignmentExpr	rowIter = rowSums_ . begin ( )
>1143	CallExpression	rowSums_ . begin ( )
>1144	ArgumentList	 
>1145	Callee	rowSums_ . begin
>1146	MemberAccess	rowSums_ . begin
>1147	Identifier	begin
>1148	Identifier	rowSums_
>1149	Identifier	rowIter
>1150	Identifier	rowIter
>1151	IdentifierDeclType	vector < Real > 
>1152	ExpressionStatement	 
>1153	CallExpression	colSums_ . resize ( tableP_ -> nCols ( ) )
>1154	ArgumentList	tableP_ -> nCols ( )
>1155	Argument	tableP_ -> nCols ( )
>1156	CallExpression	tableP_ -> nCols ( )
>1157	ArgumentList	 
>1158	Callee	tableP_ -> nCols
>1159	PtrMemberAccess	tableP_ -> nCols
>1160	Identifier	nCols
>1161	Identifier	tableP_
>1162	Callee	colSums_ . resize
>1163	MemberAccess	colSums_ . resize
>1164	Identifier	resize
>1165	Identifier	colSums_
>1166	ExpressionStatement	 
>1167	CallExpression	rowSums_ . resize ( tableP_ -> nRows ( ) )
>1168	ArgumentList	tableP_ -> nRows ( )
>1169	Argument	tableP_ -> nRows ( )
>1170	CallExpression	tableP_ -> nRows ( )
>1171	ArgumentList	 
>1172	Callee	tableP_ -> nRows
>1173	PtrMemberAccess	tableP_ -> nRows
>1174	Identifier	nRows
>1175	Identifier	tableP_
>1176	Callee	rowSums_ . resize
>1177	MemberAccess	rowSums_ . resize
>1178	Identifier	resize
>1179	Identifier	rowSums_
>1180	Condition	 
>1181	Identifier	tableP_
>1182	BlockStarter	 
>1183	CompoundStatement	 
>1184	ExpressionStatement	NTA_THROW << errPrefix << \"Error reading from stream
>1185	ShiftExpression	NTA_THROW << errPrefix << \"Error reading from stream
>1186	ShiftExpression	errPrefix << \"Error reading from stream
>1187	ShiftExpression	\"Error reading from stream
>1188	CallExpression	e . what ( )
>1189	ArgumentList	 
>1190	Callee	e . what
>1191	MemberAccess	e . what
>1192	Identifier	what
>1193	Identifier	e
>1194	PrimaryExpression	\"Error reading from stream
>1195	Identifier	errPrefix
>1196	Identifier	NTA_THROW
>1197	Identifier	e
>1198	BlockStarter	 
>1199	CompoundStatement	 
>1200	IfStatement	if ( hasTable )
>1201	ElseStatement	else
>1202	CompoundStatement	 
>1203	ExpressionStatement	state >> hintNumCols_ >> hintNumRows_
>1204	ShiftExpression	state >> hintNumCols_ >> hintNumRows_
>1205	ShiftExpression	hintNumCols_ >> hintNumRows_
>1206	Identifier	hintNumRows_
>1207	Identifier	hintNumCols_
>1208	Identifier	state
>1209	CompoundStatement	 
>1210	ExpressionStatement	tableP_ -> fromCSR ( state )
>1211	CallExpression	tableP_ -> fromCSR ( state )
>1212	ArgumentList	state
>1213	Argument	state
>1214	Identifier	state
>1215	Callee	tableP_ -> fromCSR
>1216	PtrMemberAccess	tableP_ -> fromCSR
>1217	Identifier	fromCSR
>1218	Identifier	tableP_
>1219	ExpressionStatement	tableP_ = new SparseMatrix < UInt , Real > ( 0 , hintNumCols_ )
>1220	AssignmentExpr	tableP_ = new SparseMatrix < UInt , Real > ( 0 , hintNumCols_ )
>1221	Expression	0 , hintNumCols_
>1222	Identifier	hintNumCols_
>1223	PrimaryExpression	0
>1224	Identifier	tableP_
>1225	ExpressionStatement	state >> hintNumCols_
>1226	ShiftExpression	state >> hintNumCols_
>1227	Identifier	hintNumCols_
>1228	Identifier	state
>1229	Condition	hasTable
>1230	Identifier	hasTable
>1231	ExpressionStatement	state >> hasTable
>1232	ShiftExpression	state >> hasTable
>1233	Identifier	hasTable
>1234	Identifier	state
>1235	IdentifierDeclStatement	bool hasTable ;
>1236	IdentifierDecl	hasTable
>1237	Identifier	hasTable
>1238	IdentifierDeclType	bool
>1239	ExpressionStatement	 
>1240	AssignmentExpr	cleanTableValid_ = false
>1241	Identifier	false
>1242	Identifier	cleanTableValid_
>1243	IfStatement	if ( tableP_ )
>1244	CompoundStatement	 
>1245	ExpressionStatement	 
>1246	AssignmentExpr	tableP_ = NULL
>1247	Identifier	NULL
>1248	Identifier	tableP_
>1249	ExpressionStatement	 
>1250	Identifier	tableP_
>1251	Statement	 
>1252	Condition	 
>1253	Identifier	tableP_
>1254	IfStatement	if ( str != string ( \"CondProbTable.V1\" ) )
>1255	CompoundStatement	 
>1256	ReturnStatement	 
>1257	ExpressionStatement	 
>1258	ShiftExpression	NTA_THROW << errPrefix << \"Invalid state specified\"
>1259	ShiftExpression	errPrefix << \"Invalid state specified\"
>1260	PrimaryExpression	\"Invalid state specified\"
>1261	Identifier	errPrefix
>1262	Identifier	NTA_THROW
>1263	Condition	 
>1264	EqualityExpression	str != string ( \"CondProbTable.V1\" )
>1265	CallExpression	string ( \"CondProbTable.V1\" )
>1266	ArgumentList	\"CondProbTable.V1\"
>1267	Argument	\"CondProbTable.V1\"
>1268	PrimaryExpression	\"CondProbTable.V1\"
>1269	Callee	string
>1270	Identifier	string
>1271	Identifier	str
>1272	ExpressionStatement	 
>1273	ShiftExpression	state >> str
>1274	Identifier	str
>1275	Identifier	state
>1276	IdentifierDeclStatement	 
>1277	IdentifierDecl	str
>1278	Identifier	str
>1279	IdentifierDeclType	string
>1280	ExpressionStatement	 
>1281	CallExpression	state . exceptions ( ios_base 
>1282	ArgumentList	ios_base 
>1283	Argument	ios_base 
>1284	InclusiveOrExpression	ios_base 
>1285	Identifier	ios_base 
>1286	Identifier	ios_base 
>1287	Callee	state . exceptions
>1288	MemberAccess	state . exceptions
>1289	Identifier	exceptions
>1290	Identifier	state
>1291	ExpressionStatement	 
>1292	AssignmentExpr	excMask = state . exceptions ( )
>1293	CallExpression	state . exceptions ( )
>1294	ArgumentList	 
>1295	Callee	state . exceptions
>1296	MemberAccess	state . exceptions
>1297	Identifier	exceptions
>1298	Identifier	state
>1299	Identifier	excMask
>1300	ExpressionStatement	 
>1301	ShiftExpression	NTA_CHECK ( state . good ( ) ) << errPrefix << \"- Bad stream\"
>1302	ShiftExpression	errPrefix << \"- Bad stream\"
>1303	PrimaryExpression	\"- Bad stream\"
>1304	Identifier	errPrefix
>1305	CallExpression	NTA_CHECK ( state . good ( ) )
>1306	ArgumentList	state . good ( )
>1307	Argument	state . good ( )
>1308	CallExpression	state . good ( )
>1309	ArgumentList	 
>1310	Callee	state . good
>1311	MemberAccess	state . good
>1312	Identifier	good
>1313	Identifier	state
>1314	Callee	NTA_CHECK
>1315	Identifier	NTA_CHECK
>1316	IdentifierDeclStatement	 
>1317	IdentifierDecl	excMask
>1318	Identifier	excMask
>1319	IdentifierDeclType	ios 
>1320	IdentifierDeclStatement	 
>1321	IdentifierDecl	* errPrefix = \"CondProbTable
>1322	AssignmentExpr	* errPrefix = \"CondProbTable
>1323	PrimaryExpression	\"CondProbTable
>1324	Identifier	errPrefix
>1325	Identifier	errPrefix
>1326	IdentifierDeclType	const char *
<3=11,4
<4=8,5
<5=7,6
<8=10,9
<17=19,18
<19=25,23,22,20
<20=21
<23=24
<29=38,37,30
<30=34,31
<31=33,32
<34=36,35
<38=55,39
<39=40
<40=51,41
<41=49,42
<42=43
<43=45,44
<45=46
<46=48,47
<49=50
<51=52
<52=54,53
<55=56
<56=65,57
<57=58
<58=59
<59=61,60
<61=62
<62=64,63
<65=66
<66=68,67
<78=87,86,79
<79=83,80
<80=82,81
<83=85,84
<87=233,183,171,159,145,131,88
<88=123,89
<89=119,108,99,90
<90=91
<91=95,92
<92=93
<93=94
<95=96
<96=98,97
<99=100
<100=104,101
<101=102
<102=103
<104=105
<105=107,106
<108=109
<109=115,110
<110=113,111
<111=112
<113=114
<115=116
<116=118,117
<119=120
<120=122,121
<123=124
<124=128,125
<125=127,126
<128=130,129
<131=132
<132=144,143,133
<133=142,134
<134=140,135
<135=138,136
<136=137
<138=139
<140=141
<145=146
<146=158,157,147
<147=156,148
<148=154,149
<149=152,150
<150=151
<152=153
<154=155
<159=160
<160=170,169,161
<161=168,162
<162=164,163
<164=165
<165=167,166
<171=172
<172=182,181,173
<173=180,174
<174=176,175
<176=177
<177=179,178
<183=229,184
<184=216,198,185
<185=186
<186=194,187
<187=192,188
<188=189
<189=191,190
<192=193
<194=195
<195=197,196
<198=212,206,199
<199=200
<200=201
<201=205,202
<202=204,203
<206=207
<207=211,208
<208=210,209
<212=213
<213=215,214
<216=217
<217=221,218
<218=220,219
<221=227,222
<222=223
<223=224
<224=226,225
<227=228
<229=230
<230=232,231
<233=234
<234=239,238,235
<235=237,236
<260=269,268,261
<261=265,262
<262=264,263
<265=267,266
<269=377,368,357,353,352,351,350,349,348,347,346,345,344,343,342,341,340,339,338,337,336,335,334,333,332,331,324,312,311,310,309,308,307,306,305,304,303,302,301,276,270
<270=271
<271=273,272
<273=275,274
<276=293,281,277
<277=278
<278=280,279
<281=282
<282=290,283
<283=287,284
<284=286,285
<287=289,288
<290=292,291
<293=294
<294=300,295
<295=299,296
<296=298,297
<312=313
<313=323,322,314
<314=321,315
<315=317,316
<317=318
<318=320,319
<324=325
<325=330,329,326
<326=328,327
<353=354
<354=356,355
<357=358
<358=366,359
<359=362,360
<360=361
<362=363
<363=365,364
<366=367
<368=373,369
<369=370
<370=372,371
<373=374
<374=376,375
<377=378
<378=393,392,379
<379=391,380
<380=389,381
<381=382
<382=383
<383=385,384
<385=386
<386=388,387
<389=390
<415=427,426,416
<416=423,420,417
<417=419,418
<420=422,421
<423=425,424
<427=513,481,449,428
<428=429
<429=447,430
<430=440,433,431
<431=432
<433=434
<434=436,435
<436=437
<437=439,438
<440=441
<441=443,442
<443=444
<444=446,445
<447=448
<449=450
<450=463,451
<451=462,452
<452=461,453
<453=455,454
<455=457,456
<457=458
<458=460,459
<463=479,464
<464=465
<465=466
<466=473,467
<467=469,468
<469=470
<470=472,471
<473=475,474
<475=476
<476=478,477
<479=480
<481=482
<482=495,483
<483=494,484
<484=493,485
<485=487,486
<487=489,488
<489=490
<490=492,491
<495=511,496
<496=497
<497=498
<498=505,499
<499=501,500
<501=502
<502=504,503
<505=507,506
<507=508
<508=510,509
<511=512
<513=514
<514=519,518,515
<515=517,516
<535=547,546,536
<536=543,540,537
<537=539,538
<540=542,541
<543=545,544
<547=719,706,548
<548=702,650,549
<549=550
<550=646,606,551
<551=552
<552=602,590,553
<553=554
<554=586,564,555
<555=556
<556=557
<557=563,558
<558=562,559
<559=561,560
<564=576,565
<565=566
<566=572,567
<567=570,568
<568=569
<570=571
<572=573
<573=575,574
<576=582,577
<577=578
<578=580,579
<580=581
<582=583
<583=585,584
<586=587
<587=589,588
<590=591
<591=592
<592=598,593
<593=596,594
<594=595
<596=597
<598=599
<599=601,600
<602=603
<603=605,604
<606=635,634,633,632,631,630,629,628,627,626,625,624,607
<607=612,608
<608=609
<609=611,610
<612=613
<613=621,614
<614=618,615
<615=617,616
<618=620,619
<621=623,622
<635=636
<636=642,637
<637=640,638
<638=639
<640=641
<642=643
<643=645,644
<646=647
<647=649,648
<650=698,697,696,695,694,693,692,691,690,689,688,687,667,651
<651=652
<652=663,653
<653=656,654
<654=655
<656=657
<657=659,658
<659=660
<660=662,661
<663=664
<664=666,665
<667=672,668
<668=669
<669=671,670
<672=673
<673=683,674
<674=675
<675=676
<676=680,677
<677=679,678
<680=682,681
<683=684
<684=686,685
<698=699
<699=701,700
<702=703
<703=705,704
<706=707
<707=711,708
<708=710,709
<711=717,712
<712=713
<713=714
<714=716,715
<717=718
<719=720
<720=725,724,721
<721=723,722
<747=750,749,748
<750=900,898,875,856,842,836,755,751
<751=752
<752=754,753
<755=828,824,821,756
<756=817,783,757
<757=758
<758=779,759
<759=767,760
<760=761
<761=763,762
<763=764
<764=766,765
<767=768
<768=777,769
<769=770
<770=771
<771=773,772
<773=774
<774=776,775
<777=778
<779=780
<780=782,781
<783=809,805,802,784
<784=794,785
<785=786
<786=790,787
<787=788
<788=789
<790=791
<791=793,792
<794=795
<795=797,796
<797=799,798
<799=801,800
<802=804,803
<805=806
<806=808,807
<809=810
<810=811
<811=816,815,812
<812=814,813
<817=818
<818=820,819
<821=823,822
<824=825
<825=827,826
<828=829
<829=830
<830=835,834,831
<831=833,832
<836=837
<837=841,838
<838=840,839
<842=843
<843=852,844
<844=845
<845=846
<846=848,847
<848=849
<849=851,850
<852=853
<853=855,854
<856=857
<857=874,873,858
<858=872,859
<859=870,860
<860=868,861
<861=862
<862=866,863
<863=864
<864=865
<866=867
<868=869
<870=871
<875=887,876
<876=886,885,877
<877=884,878
<878=880,879
<880=881
<881=883,882
<887=897,896,888
<888=895,889
<889=891,890
<891=892
<892=894,893
<898=899
<925=931,930,926
<926=927
<927=929,928
<931=998,982,978,936,932
<932=933
<933=935,934
<936=976,951,937
<937=938
<938=947,939
<939=940
<940=946,941
<941=945,942
<942=944,943
<947=948
<948=950,949
<951=972,961,952
<952=953
<953=957,954
<954=955
<955=956
<957=958
<958=960,959
<961=962
<962=971,963
<963=965,964
<965=967,966
<967=968
<968=970,969
<972=973
<973=975,974
<976=977
<978=979
<979=981,980
<982=983
<983=987,984
<984=986,985
<987=996,988
<988=989
<989=990
<990=992,991
<992=993
<993=995,994
<996=997
<998=999
<999=1004,1003,1000
<1000=1002,1001
<1012=1018,1017,1013
<1013=1014
<1014=1016,1015
<1018=1320,1316,1300,1291,1280,1276,1272,1254,1243,1239,1198,1182,1028,1019
<1019=1020
<1020=1024,1021
<1021=1022
<1022=1023
<1024=1025
<1025=1027,1026
<1028=1180,1029
<1029=1166,1152,1140,1136,1030
<1030=1128,1119,1112,1031
<1031=1103,1096,1095,1094,1093,1092,1091,1090,1089,1088,1087,1086,1085,1078,1072,1060,1059,1058,1057,1056,1055,1054,1053,1052,1051,1050,1049,1032
<1032=1037,1033
<1033=1034
<1034=1036,1035
<1037=1038
<1038=1046,1039
<1039=1043,1040
<1040=1042,1041
<1043=1045,1044
<1046=1048,1047
<1060=1061
<1061=1071,1070,1062
<1062=1069,1063
<1063=1065,1064
<1065=1066
<1066=1068,1067
<1072=1073
<1073=1075,1074
<1075=1077,1076
<1078=1079
<1079=1080
<1080=1084,1081
<1081=1083,1082
<1096=1097
<1097=1102,1101,1098
<1098=1100,1099
<1103=1104
<1104=1110,1105
<1105=1108,1106
<1106=1107
<1108=1109
<1110=1111
<1112=1116,1113
<1113=1115,1114
<1116=1118,1117
<1119=1120
<1120=1127,1121
<1121=1123,1122
<1123=1124
<1124=1126,1125
<1128=1129
<1129=1130
<1130=1135,1134,1131
<1131=1133,1132
<1136=1137
<1137=1139,1138
<1140=1141
<1141=1151,1150,1142
<1142=1149,1143
<1143=1145,1144
<1145=1146
<1146=1148,1147
<1152=1153
<1153=1162,1154
<1154=1155
<1155=1156
<1156=1158,1157
<1158=1159
<1159=1161,1160
<1162=1163
<1163=1165,1164
<1166=1167
<1167=1176,1168
<1168=1169
<1169=1170
<1170=1172,1171
<1172=1173
<1173=1175,1174
<1176=1177
<1177=1179,1178
<1180=1181
<1182=1197,1183
<1183=1184
<1184=1185
<1185=1196,1186
<1186=1195,1187
<1187=1194,1188
<1188=1190,1189
<1190=1191
<1191=1193,1192
<1198=1199
<1199=1235,1231,1200
<1200=1229,1209,1201
<1201=1202
<1202=1203
<1203=1204
<1204=1208,1205
<1205=1207,1206
<1209=1225,1219,1210
<1210=1211
<1211=1215,1212
<1212=1213
<1213=1214
<1215=1216
<1216=1218,1217
<1219=1220
<1220=1224,1221
<1221=1223,1222
<1225=1226
<1226=1228,1227
<1229=1230
<1231=1232
<1232=1234,1233
<1235=1236
<1236=1238,1237
<1239=1240
<1240=1242,1241
<1243=1252,1244
<1244=1251,1249,1245
<1245=1246
<1246=1248,1247
<1249=1250
<1252=1253
<1254=1263,1255
<1255=1257,1256
<1257=1258
<1258=1262,1259
<1259=1261,1260
<1263=1264
<1264=1271,1265
<1265=1269,1266
<1266=1267
<1267=1268
<1269=1270
<1272=1273
<1273=1275,1274
<1276=1277
<1277=1279,1278
<1280=1281
<1281=1287,1282
<1282=1283
<1283=1284
<1284=1286,1285
<1287=1288
<1288=1290,1289
<1291=1292
<1292=1299,1293
<1293=1295,1294
<1295=1296
<1296=1298,1297
<1300=1301
<1301=1305,1302
<1302=1304,1303
<1305=1314,1306
<1306=1307
<1307=1308
<1308=1310,1309
<1310=1311
<1311=1313,1312
<1314=1315
<1316=1317
<1317=1319,1318
<1320=1321
<1321=1326,1325,1322
<1322=1324,1323
