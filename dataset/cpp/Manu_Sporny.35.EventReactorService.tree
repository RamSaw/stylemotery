>5	FunctionDef	EventReactorService 
>6	ParameterList	Node * node , const char * path
>7	Parameter	 
>8	Identifier	path
>9	ParameterType	const char *
>10	Parameter	 
>11	Identifier	node
>12	ParameterType	Node *
>13	CompoundStatement	 
>19	FunctionDef	EventReactorService 
>20	ParameterList	 
>21	CompoundStatement	 
>25	FunctionDef	EventReactorService 
>26	ParameterList	 
>27	ReturnType	bool
>28	CompoundStatement	 
>29	ReturnStatement	 
>30	Identifier	true
>31	CompoundStatement	 
>32	CompoundStatement	 
>33	ExpressionStatement	 
>34	CallExpression	status -> addHandler ( h , BtpMessage 
>35	ArgumentList	h
>36	Argument	& queryValidator
>37	UnaryOp	& queryValidator
>38	Identifier	queryValidator
>39	UnaryOperator	&
>40	Argument	0
>41	PrimaryExpression	0
>42	Argument	BtpMessage 
>43	Identifier	BtpMessage 
>44	Argument	h
>45	Identifier	h
>46	Callee	status -> addHandler
>47	PtrMemberAccess	status -> addHandler
>48	Identifier	addHandler
>49	Identifier	status
>50	IdentifierDeclStatement	 
>51	IdentifierDecl	queryValidator = new v 
>52	AssignmentExpr	queryValidator = new v 
>53	Expression	\"nodeuser\" , new v 
>54	Expression	new v 
>55	Identifier	NULL
>56	Identifier	v 
>57	PrimaryExpression	\"nodeuser\"
>58	Identifier	queryValidator
>59	Identifier	queryValidator
>60	IdentifierDeclType	v 
>61	IdentifierDeclStatement	 
>62	IdentifierDecl	h = handler
>63	AssignmentExpr	h = handler
>64	Identifier	handler
>65	Identifier	handler
>66	Identifier	h
>67	IdentifierDeclType	ResourceHandler
>68	ExpressionStatement	 
>69	CallExpression	handler -> setSameUserRequired ( true )
>70	ArgumentList	true
>71	Argument	true
>72	Identifier	true
>73	Callee	handler -> setSameUserRequired
>74	PtrMemberAccess	handler -> setSameUserRequired
>75	Identifier	setSameUserRequired
>76	Identifier	handler
>77	IdentifierDeclStatement	 
>78	IdentifierDecl	* handler = new Handler ( mNode , this , & EventReactorService 
>79	AssignmentExpr	* handler = new Handler ( mNode , this , & EventReactorService 
>80	Expression	mNode , this , & EventReactorService 
>81	Expression	this , & EventReactorService 
>82	Expression	& EventReactorService 
>83	Identifier	BtpAction 
>84	UnaryOp	& EventReactorService 
>85	Identifier	EventReactorService 
>86	UnaryOperator	&
>87	Identifier	this
>88	Identifier	mNode
>89	Identifier	handler
>90	Identifier	handler
>91	IdentifierDeclType	Handler *
>92	ExpressionStatement	 
>93	CallExpression	addResource ( \"/status\" , status )
>94	ArgumentList	\"/status\"
>95	Argument	status
>96	Identifier	status
>97	Argument	\"/status\"
>98	PrimaryExpression	\"/status\"
>99	Callee	addResource
>100	Identifier	addResource
>101	IdentifierDeclStatement	 
>102	IdentifierDecl	status = new RestResourceHandler ( )
>103	AssignmentExpr	status = new RestResourceHandler ( )
>104	UnaryExpression	new RestResourceHandler ( )
>105	Identifier	status
>106	Identifier	status
>107	IdentifierDeclType	RestResourceHandlerRef
>108	CompoundStatement	 
>109	CompoundStatement	 
>110	ExpressionStatement	 
>111	CallExpression	deleteUser -> addHandler ( h , BtpMessage 
>112	ArgumentList	h
>113	Argument	& queryValidator
>114	UnaryOp	& queryValidator
>115	Identifier	queryValidator
>116	UnaryOperator	&
>117	Argument	1
>118	PrimaryExpression	1
>119	Argument	BtpMessage 
>120	Identifier	BtpMessage 
>121	Argument	h
>122	Identifier	h
>123	Callee	deleteUser -> addHandler
>124	PtrMemberAccess	deleteUser -> addHandler
>125	Identifier	addHandler
>126	Identifier	deleteUser
>127	IdentifierDeclStatement	 
>128	IdentifierDecl	queryValidator = new v 
>129	AssignmentExpr	queryValidator = new v 
>130	Expression	\"nodeuser\" , new v 
>131	Expression	new v 
>132	Identifier	NULL
>133	Identifier	v 
>134	PrimaryExpression	\"nodeuser\"
>135	Identifier	queryValidator
>136	Identifier	queryValidator
>137	IdentifierDeclType	v 
>138	IdentifierDeclStatement	 
>139	IdentifierDecl	h = handler
>140	AssignmentExpr	h = handler
>141	Identifier	handler
>142	Identifier	handler
>143	Identifier	h
>144	IdentifierDeclType	ResourceHandler
>145	ExpressionStatement	 
>146	CallExpression	handler -> setSameUserRequired ( true )
>147	ArgumentList	true
>148	Argument	true
>149	Identifier	true
>150	Callee	handler -> setSameUserRequired
>151	PtrMemberAccess	handler -> setSameUserRequired
>152	Identifier	setSameUserRequired
>153	Identifier	handler
>154	IdentifierDeclStatement	 
>155	IdentifierDecl	* handler = new Handler ( mNode , this , & EventReactorService 
>156	AssignmentExpr	* handler = new Handler ( mNode , this , & EventReactorService 
>157	Expression	mNode , this , & EventReactorService 
>158	Expression	this , & EventReactorService 
>159	Expression	& EventReactorService 
>160	Identifier	BtpAction 
>161	UnaryOp	& EventReactorService 
>162	Identifier	EventReactorService 
>163	UnaryOperator	&
>164	Identifier	this
>165	Identifier	mNode
>166	Identifier	handler
>167	Identifier	handler
>168	IdentifierDeclType	Handler *
>169	CompoundStatement	 
>170	ExpressionStatement	 
>171	CallExpression	users -> addHandler ( h , BtpMessage 
>172	ArgumentList	h
>173	Argument	& queryValidator
>174	UnaryOp	& queryValidator
>175	Identifier	queryValidator
>176	UnaryOperator	&
>177	Argument	1
>178	PrimaryExpression	1
>179	Argument	BtpMessage 
>180	Identifier	BtpMessage 
>181	Argument	h
>182	Identifier	h
>183	Callee	users -> addHandler
>184	PtrMemberAccess	users -> addHandler
>185	Identifier	addHandler
>186	Identifier	users
>187	IdentifierDeclStatement	 
>188	IdentifierDecl	queryValidator = new v 
>189	AssignmentExpr	queryValidator = new v 
>190	Expression	\"nodeuser\" , new v 
>191	Expression	new v 
>192	Identifier	NULL
>193	Identifier	v 
>194	PrimaryExpression	\"nodeuser\"
>195	Identifier	queryValidator
>196	Identifier	queryValidator
>197	IdentifierDeclType	v 
>198	IdentifierDeclStatement	 
>199	IdentifierDecl	h = handler
>200	AssignmentExpr	h = handler
>201	Identifier	handler
>202	Identifier	handler
>203	Identifier	h
>204	IdentifierDeclType	ResourceHandler
>205	ExpressionStatement	 
>206	CallExpression	handler -> setSameUserRequired ( true )
>207	ArgumentList	true
>208	Argument	true
>209	Identifier	true
>210	Callee	handler -> setSameUserRequired
>211	PtrMemberAccess	handler -> setSameUserRequired
>212	Identifier	setSameUserRequired
>213	Identifier	handler
>214	IdentifierDeclStatement	 
>215	IdentifierDecl	* handler = new Handler ( mNode , this , & EventReactorService 
>216	AssignmentExpr	* handler = new Handler ( mNode , this , & EventReactorService 
>217	Expression	mNode , this , & EventReactorService 
>218	Expression	this , & EventReactorService 
>219	Expression	& EventReactorService 
>220	Identifier	BtpAction 
>221	UnaryOp	& EventReactorService 
>222	Identifier	EventReactorService 
>223	UnaryOperator	&
>224	Identifier	this
>225	Identifier	mNode
>226	Identifier	handler
>227	Identifier	handler
>228	IdentifierDeclType	Handler *
>229	CompoundStatement	 
>230	ExpressionStatement	 
>231	CallExpression	users -> addHandler ( h , BtpMessage 
>232	ArgumentList	h
>233	Argument	& queryValidator
>234	UnaryOp	& queryValidator
>235	Identifier	queryValidator
>236	UnaryOperator	&
>237	Argument	2
>238	PrimaryExpression	2
>239	Argument	BtpMessage 
>240	Identifier	BtpMessage 
>241	Argument	h
>242	Identifier	h
>243	Callee	users -> addHandler
>244	PtrMemberAccess	users -> addHandler
>245	Identifier	addHandler
>246	Identifier	users
>247	IdentifierDeclStatement	 
>248	IdentifierDecl	queryValidator = new v 
>249	AssignmentExpr	queryValidator = new v 
>250	Expression	\"nodeuser\" , new v 
>251	Expression	new v 
>252	Identifier	NULL
>253	Identifier	v 
>254	PrimaryExpression	\"nodeuser\"
>255	Identifier	queryValidator
>256	Identifier	queryValidator
>257	IdentifierDeclType	v 
>258	IdentifierDeclStatement	 
>259	IdentifierDecl	h = handler
>260	AssignmentExpr	h = handler
>261	Identifier	handler
>262	Identifier	handler
>263	Identifier	h
>264	IdentifierDeclType	ResourceHandler
>265	ExpressionStatement	 
>266	CallExpression	handler -> setSameUserRequired ( true )
>267	ArgumentList	true
>268	Argument	true
>269	Identifier	true
>270	Callee	handler -> setSameUserRequired
>271	PtrMemberAccess	handler -> setSameUserRequired
>272	Identifier	setSameUserRequired
>273	Identifier	handler
>274	IdentifierDeclStatement	 
>275	IdentifierDecl	* handler = new Handler ( mNode , this , & EventReactorService 
>276	AssignmentExpr	* handler = new Handler ( mNode , this , & EventReactorService 
>277	Expression	mNode , this , & EventReactorService 
>278	Expression	this , & EventReactorService 
>279	Expression	& EventReactorService 
>280	Identifier	BtpAction 
>281	UnaryOp	& EventReactorService 
>282	Identifier	EventReactorService 
>283	UnaryOperator	&
>284	Identifier	this
>285	Identifier	mNode
>286	Identifier	handler
>287	Identifier	handler
>288	IdentifierDeclType	Handler *
>289	ExpressionStatement	 
>290	CallExpression	addResource ( \"/delete/user\" , deleteUser )
>291	ArgumentList	\"/delete/user\"
>292	Argument	deleteUser
>293	Identifier	deleteUser
>294	Argument	\"/delete/user\"
>295	PrimaryExpression	\"/delete/user\"
>296	Callee	addResource
>297	Identifier	addResource
>298	ExpressionStatement	 
>299	CallExpression	addResource ( \"/users\" , users )
>300	ArgumentList	\"/users\"
>301	Argument	users
>302	Identifier	users
>303	Argument	\"/users\"
>304	PrimaryExpression	\"/users\"
>305	Callee	addResource
>306	Identifier	addResource
>307	IdentifierDeclStatement	 
>308	IdentifierDecl	deleteUser = new RestResourceHandler ( )
>309	AssignmentExpr	deleteUser = new RestResourceHandler ( )
>310	UnaryExpression	new RestResourceHandler ( )
>311	Identifier	deleteUser
>312	Identifier	deleteUser
>313	IdentifierDeclType	RestResourceHandlerRef
>314	IdentifierDeclStatement	 
>315	IdentifierDecl	users = new RestResourceHandler ( )
>316	AssignmentExpr	users = new RestResourceHandler ( )
>317	UnaryExpression	new RestResourceHandler ( )
>318	Identifier	users
>319	Identifier	users
>320	IdentifierDeclType	RestResourceHandlerRef
>343	FunctionDef	EventReactorService 
>344	ParameterList	 
>345	ReturnType	void
>346	CompoundStatement	 
>347	ExpressionStatement	 
>348	CallExpression	removeResource ( \"/status\" )
>349	ArgumentList	\"/status\"
>350	Argument	\"/status\"
>351	PrimaryExpression	\"/status\"
>352	Callee	removeResource
>353	Identifier	removeResource
>354	ExpressionStatement	 
>355	CallExpression	removeResource ( \"/delete/user\" )
>356	ArgumentList	\"/delete/user\"
>357	Argument	\"/delete/user\"
>358	PrimaryExpression	\"/delete/user\"
>359	Callee	removeResource
>360	Identifier	removeResource
>361	ExpressionStatement	 
>362	CallExpression	removeResource ( \"/users\" )
>363	ArgumentList	\"/users\"
>364	Argument	\"/users\"
>365	PrimaryExpression	\"/users\"
>366	Callee	removeResource
>367	Identifier	removeResource
>371	FunctionDef	EventReactorService 
>372	ParameterList	BtpAction * action , DynamicObject & in , DynamicObject & out
>373	Parameter	 
>374	Identifier	out
>375	ParameterType	DynamicObject &
>376	Parameter	 
>377	Identifier	in
>378	ParameterType	DynamicObject &
>379	Parameter	 
>380	Identifier	action
>381	ParameterType	BtpAction *
>382	ReturnType	bool
>383	CompoundStatement	 
>384	ReturnStatement	 
>385	Identifier	rval
>386	IfStatement	if ( ! BM_USER_ID_EQUALS ( nodeuser , userId ) )
>387	ElseStatement	else
>388	CompoundStatement	 
>389	IfStatement	if ( i == mEventReactors . end ( ) )
>390	ElseStatement	else
>391	CompoundStatement	 
>392	ExpressionStatement	 
>393	AssignmentExpr	out [ \"name\" ] = name
>394	Identifier	name
>395	ArrayIndexing	out [ \"name\" ]
>396	PrimaryExpression	\"name\"
>397	Identifier	out
>398	ExpressionStatement	 
>399	CallExpression	BM_ID_SET ( out [ \"userId\" ] , userId )
>400	ArgumentList	out [ \"userId\" ]
>401	Argument	userId
>402	Identifier	userId
>403	Argument	out [ \"userId\" ]
>404	ArrayIndexing	out [ \"userId\" ]
>405	PrimaryExpression	\"userId\"
>406	Identifier	out
>407	Callee	BM_ID_SET
>408	Identifier	BM_ID_SET
>409	ExpressionStatement	 
>410	CallExpression	er -> getObserverContainer ( ) -> registerUser ( userId )
>411	ArgumentList	userId
>412	Argument	userId
>413	Identifier	userId
>414	Callee	er -> getObserverContainer ( ) -> registerUser
>415	PtrMemberAccess	er -> getObserverContainer ( ) -> registerUser
>416	Identifier	registerUser
>417	CallExpression	er -> getObserverContainer ( )
>418	ArgumentList	 
>419	Callee	er -> getObserverContainer
>420	PtrMemberAccess	er -> getObserverContainer
>421	Identifier	getObserverContainer
>422	Identifier	er
>423	IdentifierDeclStatement	 
>424	IdentifierDecl	* er = i -> second
>425	AssignmentExpr	* er = i -> second
>426	PtrMemberAccess	i -> second
>427	Identifier	second
>428	Identifier	i
>429	Identifier	er
>430	Identifier	er
>431	IdentifierDeclType	EventReactor *
>432	CompoundStatement	 
>433	ExpressionStatement	 
>434	AssignmentExpr	rval = false
>435	Identifier	false
>436	Identifier	rval
>437	ExpressionStatement	 
>438	AssignmentExpr	e -> getDetails ( ) [ \"name\" ] = name
>439	Identifier	name
>440	ArrayIndexing	e -> getDetails ( ) [ \"name\" ]
>441	PrimaryExpression	\"name\"
>442	CallExpression	e -> getDetails ( )
>443	ArgumentList	 
>444	Callee	e -> getDetails
>445	PtrMemberAccess	e -> getDetails
>446	Identifier	getDetails
>447	Identifier	e
>448	IdentifierDeclStatement	 
>449	IdentifierDecl	e = new Exception ( \"Event reactor name not supported.\" , \"bitmunk.eventreactor.EventReactorService.UnsupportedName\" )
>450	AssignmentExpr	e = new Exception ( \"Event reactor name not supported.\" , \"bitmunk.eventreactor.EventReactorService.UnsupportedName\" )
>451	Expression	\"Event reactor name not supported.\" , \"bitmunk.eventreactor.EventReactorService.UnsupportedName\"
>452	PrimaryExpression	\"bitmunk.eventreactor.EventReactorService.UnsupportedName\"
>453	PrimaryExpression	\"Event reactor name not supported.\"
>454	Identifier	e
>455	Identifier	e
>456	IdentifierDeclType	ExceptionRef
>457	Condition	 
>458	EqualityExpression	i == mEventReactors . end ( )
>459	CallExpression	mEventReactors . end ( )
>460	ArgumentList	 
>461	Callee	mEventReactors . end
>462	MemberAccess	mEventReactors . end
>463	Identifier	end
>464	Identifier	mEventReactors
>465	Identifier	i
>466	IdentifierDeclStatement	 
>467	IdentifierDecl	i = mEventReactors . find ( name )
>468	AssignmentExpr	i = mEventReactors . find ( name )
>469	CallExpression	mEventReactors . find ( name )
>470	ArgumentList	name
>471	Argument	name
>472	Identifier	name
>473	Callee	mEventReactors . find
>474	MemberAccess	mEventReactors . find
>475	Identifier	find
>476	Identifier	mEventReactors
>477	Identifier	i
>478	Identifier	i
>479	IdentifierDeclType	ReactorMap 
>480	IdentifierDeclStatement	 
>481	IdentifierDecl	* name = params [ 1 ] -> getString ( )
>482	AssignmentExpr	* name = params [ 1 ] -> getString ( )
>483	CallExpression	params [ 1 ] -> getString ( )
>484	ArgumentList	 
>485	Callee	params [ 1 ] -> getString
>486	PtrMemberAccess	params [ 1 ] -> getString
>487	Identifier	getString
>488	ArrayIndexing	params [ 1 ]
>489	PrimaryExpression	1
>490	Identifier	params
>491	Identifier	name
>492	Identifier	name
>493	IdentifierDeclType	const char *
>494	CompoundStatement	 
>495	ExpressionStatement	 
>496	AssignmentExpr	rval = false
>497	Identifier	false
>498	Identifier	rval
>499	ExpressionStatement	 
>500	AssignmentExpr	e -> getDetails ( ) [ \"nodeuser\" ] = nodeuser
>501	Identifier	nodeuser
>502	ArrayIndexing	e -> getDetails ( ) [ \"nodeuser\" ]
>503	PrimaryExpression	\"nodeuser\"
>504	CallExpression	e -> getDetails ( )
>505	ArgumentList	 
>506	Callee	e -> getDetails
>507	PtrMemberAccess	e -> getDetails
>508	Identifier	getDetails
>509	Identifier	e
>510	ExpressionStatement	 
>511	AssignmentExpr	e -> getDetails ( ) [ \"userId\" ] = userId
>512	Identifier	userId
>513	ArrayIndexing	e -> getDetails ( ) [ \"userId\" ]
>514	PrimaryExpression	\"userId\"
>515	CallExpression	e -> getDetails ( )
>516	ArgumentList	 
>517	Callee	e -> getDetails
>518	PtrMemberAccess	e -> getDetails
>519	Identifier	getDetails
>520	Identifier	e
>521	ExpressionStatement	 
>522	AssignmentExpr	e -> getDetails ( ) [ \"resource\" ] = action -> getResource ( )
>523	CallExpression	action -> getResource ( )
>524	ArgumentList	 
>525	Callee	action -> getResource
>526	PtrMemberAccess	action -> getResource
>527	Identifier	getResource
>528	Identifier	action
>529	ArrayIndexing	e -> getDetails ( ) [ \"resource\" ]
>530	PrimaryExpression	\"resource\"
>531	CallExpression	e -> getDetails ( )
>532	ArgumentList	 
>533	Callee	e -> getDetails
>534	PtrMemberAccess	e -> getDetails
>535	Identifier	getDetails
>536	Identifier	e
>537	IdentifierDeclStatement	 
>538	IdentifierDecl	e = new Exception ( \"User not authorized to create event reactors for given user.\" , \"bitmunk.eventreactor.EventReactorService.Unauthorized\" )
>539	AssignmentExpr	e = new Exception ( \"User not authorized to create event reactors for given user.\" , \"bitmunk.eventreactor.EventReactorService.Unauthorized\" )
>540	Expression	\"User not authorized to create event reactors for given user.\" , \"bitmunk.eventreactor.EventReactorService.Unauthorized\"\
>541	PrimaryExpression	\"bitmunk.eventreactor.EventReactorService.Unauthorized\"
>542	PrimaryExpression	\"User not authorized to create event reactors for given user.\"
>543	Identifier	e
>544	Identifier	e
>545	IdentifierDeclType	ExceptionRef
>546	Condition	 
>547	UnaryOp	! BM_USER_ID_EQUALS ( nodeuser , userId )
>548	CallExpression	BM_USER_ID_EQUALS ( nodeuser , userId )
>549	ArgumentList	nodeuser
>550	Argument	userId
>551	Identifier	userId
>552	Argument	nodeuser
>553	Identifier	nodeuser
>554	Callee	BM_USER_ID_EQUALS
>555	Identifier	BM_USER_ID_EQUALS
>556	UnaryOperator	!
>557	IdentifierDeclStatement	 
>558	IdentifierDecl	userId = BM_USER_ID ( params [ 0 ] )
>559	AssignmentExpr	userId = BM_USER_ID ( params [ 0 ] )
>560	CallExpression	BM_USER_ID ( params [ 0 ] )
>561	ArgumentList	params [ 0 ]
>562	Argument	params [ 0 ]
>563	ArrayIndexing	params [ 0 ]
>564	PrimaryExpression	0
>565	Identifier	params
>566	Callee	BM_USER_ID
>567	Identifier	BM_USER_ID
>568	Identifier	userId
>569	Identifier	userId
>570	IdentifierDeclType	UserId
>571	ExpressionStatement	 
>572	CallExpression	action -> getResourceParams ( params )
>573	ArgumentList	params
>574	Argument	params
>575	Identifier	params
>576	Callee	action -> getResourceParams
>577	PtrMemberAccess	action -> getResourceParams
>578	Identifier	getResourceParams
>579	Identifier	action
>580	IdentifierDeclStatement	 
>581	IdentifierDecl	params
>582	Identifier	params
>583	IdentifierDeclType	DynamicObject
>584	IdentifierDeclStatement	 
>585	IdentifierDecl	nodeuser = BM_USER_ID ( vars [ \"nodeuser\" ] )
>586	AssignmentExpr	nodeuser = BM_USER_ID ( vars [ \"nodeuser\" ] )
>587	CallExpression	BM_USER_ID ( vars [ \"nodeuser\" ] )
>588	ArgumentList	vars [ \"nodeuser\" ]
>589	Argument	vars [ \"nodeuser\" ]
>590	ArrayIndexing	vars [ \"nodeuser\" ]
>591	PrimaryExpression	\"nodeuser\"
>592	Identifier	vars
>593	Callee	BM_USER_ID
>594	Identifier	BM_USER_ID
>595	Identifier	nodeuser
>596	Identifier	nodeuser
>597	IdentifierDeclType	UserId
>598	ExpressionStatement	 
>599	CallExpression	action -> getResourceQuery ( vars )
>600	ArgumentList	vars
>601	Argument	vars
>602	Identifier	vars
>603	Callee	action -> getResourceQuery
>604	PtrMemberAccess	action -> getResourceQuery
>605	Identifier	getResourceQuery
>606	Identifier	action
>607	IdentifierDeclStatement	 
>608	IdentifierDecl	vars
>609	Identifier	vars
>610	IdentifierDeclType	DynamicObject
>611	IdentifierDeclStatement	 
>612	IdentifierDecl	rval = true
>613	AssignmentExpr	rval = true
>614	Identifier	true
>615	Identifier	true
>616	Identifier	rval
>617	IdentifierDeclType	bool
>655	FunctionDef	EventReactorService 
>656	ParameterList	BtpAction * action , DynamicObject & in , DynamicObject & out
>657	Parameter	 
>658	Identifier	out
>659	ParameterType	DynamicObject &
>660	Parameter	 
>661	Identifier	in
>662	ParameterType	DynamicObject &
>663	Parameter	 
>664	Identifier	action
>665	ParameterType	BtpAction *
>666	ReturnType	bool
>667	CompoundStatement	 
>668	ReturnStatement	 
>669	Identifier	rval
>670	IfStatement	if ( nodeuser != userId )
>671	ElseStatement	else
>672	CompoundStatement	 
>673	ForStatement	for ( ReactorMap 
>674	CompoundStatement	 
>675	IfStatement	if ( i -> second -> getObserverContainer ( ) -> unregisterUser ( userId ) )
>676	CompoundStatement	 
>677	ExpressionStatement	 
>678	CallExpression	out [ \"names\" ] -> append ( name )
>679	ArgumentList	name
>680	Argument	name
>681	Identifier	name
>682	Callee	out [ \"names\" ] -> append
>683	PtrMemberAccess	out [ \"names\" ] -> append
>684	Identifier	append
>685	ArrayIndexing	out [ \"names\" ]
>686	PrimaryExpression	\"names\"
>687	Identifier	out
>688	ExpressionStatement	 
>689	AssignmentExpr	name = i -> first
>690	PtrMemberAccess	i -> first
>691	Identifier	first
>692	Identifier	i
>693	Identifier	name
>694	IdentifierDeclStatement	 
>695	IdentifierDecl	name
>696	Identifier	name
>697	IdentifierDeclType	DynamicObject
>698	Condition	 
>699	CallExpression	i -> second -> getObserverContainer ( ) -> unregisterUser ( userId )
>700	ArgumentList	userId
>701	Argument	userId
>702	Identifier	userId
>703	Callee	i -> second -> getObserverContainer ( ) -> unregisterUser
>704	PtrMemberAccess	i -> second -> getObserverContainer ( ) -> unregisterUser
>705	Identifier	unregisterUser
>706	CallExpression	i -> second -> getObserverContainer ( )
>707	ArgumentList	 
>708	Callee	i -> second -> getObserverContainer
>709	PtrMemberAccess	i -> second -> getObserverContainer
>710	Identifier	getObserverContainer
>711	PtrMemberAccess	i -> second
>712	Identifier	second
>713	Identifier	i
>714	UnaryExpression	 
>715	Identifier	i
>716	IncDec	++
>717	Condition	 
>718	EqualityExpression	i != mEventReactors . end ( )
>719	CallExpression	mEventReactors . end ( )
>720	ArgumentList	 
>721	Callee	mEventReactors . end
>722	MemberAccess	mEventReactors . end
>723	Identifier	end
>724	Identifier	mEventReactors
>725	Identifier	i
>726	ForInit	 
>727	IdentifierDeclStatement	ReactorMap 
>728	IdentifierDecl	i = mEventReactors . begin ( )
>729	AssignmentExpr	i = mEventReactors . begin ( )
>730	CallExpression	mEventReactors . begin ( )
>731	ArgumentList	 
>732	Callee	mEventReactors . begin
>733	MemberAccess	mEventReactors . begin
>734	Identifier	begin
>735	Identifier	mEventReactors
>736	Identifier	i
>737	Identifier	i
>738	IdentifierDeclType	ReactorMap 
>739	ExpressionStatement	 
>740	CallExpression	out [ \"names\" ] -> setType ( Array )
>741	ArgumentList	Array
>742	Argument	Array
>743	Identifier	Array
>744	Callee	out [ \"names\" ] -> setType
>745	PtrMemberAccess	out [ \"names\" ] -> setType
>746	Identifier	setType
>747	ArrayIndexing	out [ \"names\" ]
>748	PrimaryExpression	\"names\"
>749	Identifier	out
>750	ExpressionStatement	 
>751	CallExpression	BM_ID_SET ( out [ \"userId\" ] , userId )
>752	ArgumentList	out [ \"userId\" ]
>753	Argument	userId
>754	Identifier	userId
>755	Argument	out [ \"userId\" ]
>756	ArrayIndexing	out [ \"userId\" ]
>757	PrimaryExpression	\"userId\"
>758	Identifier	out
>759	Callee	BM_ID_SET
>760	Identifier	BM_ID_SET
>761	CompoundStatement	 
>762	ExpressionStatement	 
>763	AssignmentExpr	rval = false
>764	Identifier	false
>765	Identifier	rval
>766	ExpressionStatement	 
>767	CallExpression	BM_ID_SET ( e -> getDetails ( ) [ \"nodeuser\" ] , nodeuser )
>768	ArgumentList	e -> getDetails ( ) [ \"nodeuser\" ]
>769	Argument	nodeuser
>770	Identifier	nodeuser
>771	Argument	e -> getDetails ( ) [ \"nodeuser\" ]
>772	ArrayIndexing	e -> getDetails ( ) [ \"nodeuser\" ]
>773	PrimaryExpression	\"nodeuser\"
>774	CallExpression	e -> getDetails ( )
>775	ArgumentList	 
>776	Callee	e -> getDetails
>777	PtrMemberAccess	e -> getDetails
>778	Identifier	getDetails
>779	Identifier	e
>780	Callee	BM_ID_SET
>781	Identifier	BM_ID_SET
>782	ExpressionStatement	 
>783	CallExpression	BM_ID_SET ( e -> getDetails ( ) [ \"userId\" ] , userId )
>784	ArgumentList	e -> getDetails ( ) [ \"userId\" ]
>785	Argument	userId
>786	Identifier	userId
>787	Argument	e -> getDetails ( ) [ \"userId\" ]
>788	ArrayIndexing	e -> getDetails ( ) [ \"userId\" ]
>789	PrimaryExpression	\"userId\"
>790	CallExpression	e -> getDetails ( )
>791	ArgumentList	 
>792	Callee	e -> getDetails
>793	PtrMemberAccess	e -> getDetails
>794	Identifier	getDetails
>795	Identifier	e
>796	Callee	BM_ID_SET
>797	Identifier	BM_ID_SET
>798	ExpressionStatement	 
>799	AssignmentExpr	e -> getDetails ( ) [ \"resource\" ] = action -> getResource ( )
>800	CallExpression	action -> getResource ( )
>801	ArgumentList	 
>802	Callee	action -> getResource
>803	PtrMemberAccess	action -> getResource
>804	Identifier	getResource
>805	Identifier	action
>806	ArrayIndexing	e -> getDetails ( ) [ \"resource\" ]
>807	PrimaryExpression	\"resource\"
>808	CallExpression	e -> getDetails ( )
>809	ArgumentList	 
>810	Callee	e -> getDetails
>811	PtrMemberAccess	e -> getDetails
>812	Identifier	getDetails
>813	Identifier	e
>814	IdentifierDeclStatement	 
>815	IdentifierDecl	e = new Exception ( \"User not authorized to delete event reactors for given user.\" , \"bitmunk.eventreactor.EventReactorService.Unauthorized\" )
>816	AssignmentExpr	e = new Exception ( \"User not authorized to delete event reactors for given user.\" , \"bitmunk.eventreactor.EventReactorService.Unauthorized\" )
>817	Expression	\"User not authorized to delete event reactors for given user.\" , \"bitmunk.eventreactor.EventReactorService.Unauthorized\"\
>818	PrimaryExpression	\"bitmunk.eventreactor.EventReactorService.Unauthorized\"
>819	PrimaryExpression	\"User not authorized to delete event reactors for given user.\"
>820	Identifier	e
>821	Identifier	e
>822	IdentifierDeclType	ExceptionRef
>823	Condition	 
>824	EqualityExpression	nodeuser != userId
>825	Identifier	userId
>826	Identifier	nodeuser
>827	IdentifierDeclStatement	 
>828	IdentifierDecl	userId = BM_USER_ID ( params [ 0 ] )
>829	AssignmentExpr	userId = BM_USER_ID ( params [ 0 ] )
>830	CallExpression	BM_USER_ID ( params [ 0 ] )
>831	ArgumentList	params [ 0 ]
>832	Argument	params [ 0 ]
>833	ArrayIndexing	params [ 0 ]
>834	PrimaryExpression	0
>835	Identifier	params
>836	Callee	BM_USER_ID
>837	Identifier	BM_USER_ID
>838	Identifier	userId
>839	Identifier	userId
>840	IdentifierDeclType	UserId
>841	ExpressionStatement	 
>842	CallExpression	action -> getResourceParams ( params )
>843	ArgumentList	params
>844	Argument	params
>845	Identifier	params
>846	Callee	action -> getResourceParams
>847	PtrMemberAccess	action -> getResourceParams
>848	Identifier	getResourceParams
>849	Identifier	action
>850	IdentifierDeclStatement	 
>851	IdentifierDecl	params
>852	Identifier	params
>853	IdentifierDeclType	DynamicObject
>854	IdentifierDeclStatement	 
>855	IdentifierDecl	nodeuser = BM_USER_ID ( vars [ \"nodeuser\" ] )
>856	AssignmentExpr	nodeuser = BM_USER_ID ( vars [ \"nodeuser\" ] )
>857	CallExpression	BM_USER_ID ( vars [ \"nodeuser\" ] )
>858	ArgumentList	vars [ \"nodeuser\" ]
>859	Argument	vars [ \"nodeuser\" ]
>860	ArrayIndexing	vars [ \"nodeuser\" ]
>861	PrimaryExpression	\"nodeuser\"
>862	Identifier	vars
>863	Callee	BM_USER_ID
>864	Identifier	BM_USER_ID
>865	Identifier	nodeuser
>866	Identifier	nodeuser
>867	IdentifierDeclType	UserId
>868	ExpressionStatement	 
>869	CallExpression	action -> getResourceQuery ( vars )
>870	ArgumentList	vars
>871	Argument	vars
>872	Identifier	vars
>873	Callee	action -> getResourceQuery
>874	PtrMemberAccess	action -> getResourceQuery
>875	Identifier	getResourceQuery
>876	Identifier	action
>877	IdentifierDeclStatement	 
>878	IdentifierDecl	vars
>879	Identifier	vars
>880	IdentifierDeclType	DynamicObject
>881	IdentifierDeclStatement	 
>882	IdentifierDecl	rval = true
>883	AssignmentExpr	rval = true
>884	Identifier	true
>885	Identifier	true
>886	Identifier	rval
>887	IdentifierDeclType	bool
>928	FunctionDef	EventReactorService 
>929	ParameterList	BtpAction * action , DynamicObject & in , DynamicObject & out
>930	Parameter	 
>931	Identifier	out
>932	ParameterType	DynamicObject &
>933	Parameter	 
>934	Identifier	in
>935	ParameterType	DynamicObject &
>936	Parameter	 
>937	Identifier	action
>938	ParameterType	BtpAction *
>939	ReturnType	bool
>940	CompoundStatement	 
>941	ReturnStatement	 
>942	Identifier	rval
>943	ForStatement	for ( ReactorMap 
>944	CompoundStatement	 
>945	ExpressionStatement	 
>946	CallExpression	out [ \"supported\" ] -> append ( name )
>947	ArgumentList	name
>948	Argument	name
>949	Identifier	name
>950	Callee	out [ \"supported\" ] -> append
>951	PtrMemberAccess	out [ \"supported\" ] -> append
>952	Identifier	append
>953	ArrayIndexing	out [ \"supported\" ]
>954	PrimaryExpression	\"supported\"
>955	Identifier	out
>956	ExpressionStatement	 
>957	AssignmentExpr	name = i -> first
>958	PtrMemberAccess	i -> first
>959	Identifier	first
>960	Identifier	i
>961	Identifier	name
>962	IdentifierDeclStatement	 
>963	IdentifierDecl	name
>964	Identifier	name
>965	IdentifierDeclType	DynamicObject
>966	UnaryExpression	 
>967	Identifier	i
>968	IncDec	++
>969	Condition	 
>970	EqualityExpression	i != mEventReactors . end ( )
>971	CallExpression	mEventReactors . end ( )
>972	ArgumentList	 
>973	Callee	mEventReactors . end
>974	MemberAccess	mEventReactors . end
>975	Identifier	end
>976	Identifier	mEventReactors
>977	Identifier	i
>978	ForInit	 
>979	IdentifierDeclStatement	ReactorMap 
>980	IdentifierDecl	i = mEventReactors . begin ( )
>981	AssignmentExpr	i = mEventReactors . begin ( )
>982	CallExpression	mEventReactors . begin ( )
>983	ArgumentList	 
>984	Callee	mEventReactors . begin
>985	MemberAccess	mEventReactors . begin
>986	Identifier	begin
>987	Identifier	mEventReactors
>988	Identifier	i
>989	Identifier	i
>990	IdentifierDeclType	ReactorMap 
>991	ExpressionStatement	 
>992	CallExpression	out [ \"supported\" ] -> setType ( Array )
>993	ArgumentList	Array
>994	Argument	Array
>995	Identifier	Array
>996	Callee	out [ \"supported\" ] -> setType
>997	PtrMemberAccess	out [ \"supported\" ] -> setType
>998	Identifier	setType
>999	ArrayIndexing	out [ \"supported\" ]
>1000	PrimaryExpression	\"supported\"
>1001	Identifier	out
>1002	IdentifierDeclStatement	 
>1003	IdentifierDecl	rval = true
>1004	AssignmentExpr	rval = true
>1005	Identifier	true
>1006	Identifier	true
>1007	Identifier	rval
>1008	IdentifierDeclType	bool
>1026	FunctionDef	EventReactorService 
>1027	ParameterList	const char * name , EventReactor * er
>1028	Parameter	 
>1029	Identifier	er
>1030	ParameterType	EventReactor *
>1031	Parameter	 
>1032	Identifier	name
>1033	ParameterType	const char *
>1034	ReturnType	void
>1035	CompoundStatement	 
>1036	ExpressionStatement	 
>1037	CallExpression	mEventReactors . insert ( make_pair ( strdup ( name ) , er ) )
>1038	ArgumentList	make_pair ( strdup ( name ) , er )
>1039	Argument	make_pair ( strdup ( name ) , er )
>1040	CallExpression	make_pair ( strdup ( name ) , er )
>1041	ArgumentList	strdup ( name )
>1042	Argument	er
>1043	Identifier	er
>1044	Argument	strdup ( name )
>1045	CallExpression	strdup ( name )
>1046	ArgumentList	name
>1047	Argument	name
>1048	Identifier	name
>1049	Callee	strdup
>1050	Identifier	strdup
>1051	Callee	make_pair
>1052	Identifier	make_pair
>1053	Callee	mEventReactors . insert
>1054	MemberAccess	mEventReactors . insert
>1055	Identifier	insert
>1056	Identifier	mEventReactors
>1057	ExpressionStatement	 
>1058	CallExpression	er -> setObserverContainer ( oc )
>1059	ArgumentList	oc
>1060	Argument	oc
>1061	Identifier	oc
>1062	Callee	er -> setObserverContainer
>1063	PtrMemberAccess	er -> setObserverContainer
>1064	Identifier	setObserverContainer
>1065	Identifier	er
>1066	IdentifierDeclStatement	 
>1067	IdentifierDecl	* oc = new DefaultObserverContainer ( mNode , er )
>1068	AssignmentExpr	* oc = new DefaultObserverContainer ( mNode , er )
>1069	Expression	mNode , er
>1070	Identifier	er
>1071	Identifier	mNode
>1072	Identifier	oc
>1073	Identifier	oc
>1074	IdentifierDeclType	ObserverContainer *
>1085	FunctionDef	EventReactorService 
>1086	ParameterList	const char * name
>1087	Parameter	 
>1088	Identifier	name
>1089	ParameterType	const char *
>1090	ReturnType	void
>1091	CompoundStatement	 
>1092	IfStatement	if ( i != mEventReactors . end ( ) )
>1093	CompoundStatement	 
>1094	ExpressionStatement	 
>1095	CallExpression	free ( mn )
>1096	ArgumentList	mn
>1097	Argument	mn
>1098	Identifier	mn
>1099	Callee	free
>1100	Identifier	free
>1101	ExpressionStatement	 
>1102	CallExpression	mEventReactors . erase ( i )
>1103	ArgumentList	i
>1104	Argument	i
>1105	Identifier	i
>1106	Callee	mEventReactors . erase
>1107	MemberAccess	mEventReactors . erase
>1108	Identifier	erase
>1109	Identifier	mEventReactors
>1110	ExpressionStatement	 
>1111	PtrMemberAccess	i -> second
>1112	Identifier	second
>1113	Identifier	i
>1114	Statement	 
>1115	ExpressionStatement	 
>1116	CallExpression	i -> second -> getObserverContainer ( )
>1117	ArgumentList	 
>1118	Callee	i -> second -> getObserverContainer
>1119	PtrMemberAccess	i -> second -> getObserverContainer
>1120	Identifier	getObserverContainer
>1121	PtrMemberAccess	i -> second
>1122	Identifier	second
>1123	Identifier	i
>1124	Statement	 
>1125	IdentifierDeclStatement	 
>1126	IdentifierDecl	* mn = ( char * ) i -> first
>1127	AssignmentExpr	* mn = ( char * ) i -> first
>1128	CastExpression	( char * ) i -> first
>1129	PtrMemberAccess	i -> first
>1130	Identifier	first
>1131	Identifier	i
>1132	CastTarget	char *
>1133	Identifier	mn
>1134	Identifier	mn
>1135	IdentifierDeclType	char *
>1136	Condition	 
>1137	EqualityExpression	i != mEventReactors . end ( )
>1138	CallExpression	mEventReactors . end ( )
>1139	ArgumentList	 
>1140	Callee	mEventReactors . end
>1141	MemberAccess	mEventReactors . end
>1142	Identifier	end
>1143	Identifier	mEventReactors
>1144	Identifier	i
>1145	IdentifierDeclStatement	 
>1146	IdentifierDecl	i = mEventReactors . find ( name )
>1147	AssignmentExpr	i = mEventReactors . find ( name )
>1148	CallExpression	mEventReactors . find ( name )
>1149	ArgumentList	name
>1150	Argument	name
>1151	Identifier	name
>1152	Callee	mEventReactors . find
>1153	MemberAccess	mEventReactors . find
>1154	Identifier	find
>1155	Identifier	mEventReactors
>1156	Identifier	i
>1157	Identifier	i
>1158	IdentifierDeclType	ReactorMap 
<5=13,6
<6=10,7
<7=9,8
<10=12,11
<19=21,20
<25=28,27,26
<28=108,31,29
<29=30
<31=101,92,32
<32=77,68,61,50,33
<33=34
<34=46,35
<35=44,42,40,36
<36=37
<37=39,38
<40=41
<42=43
<44=45
<46=47
<47=49,48
<50=51
<51=60,59,52
<52=58,53
<53=57,54
<54=56,55
<61=62
<62=67,66,63
<63=65,64
<68=69
<69=73,70
<70=71
<71=72
<73=74
<74=76,75
<77=78
<78=91,90,79
<79=89,80
<80=88,81
<81=87,82
<82=84,83
<84=86,85
<92=93
<93=99,94
<94=97,95
<95=96
<97=98
<99=100
<101=102
<102=107,106,103
<103=105,104
<108=314,307,298,289,229,169,109
<109=154,145,138,127,110
<110=111
<111=123,112
<112=121,119,117,113
<113=114
<114=116,115
<117=118
<119=120
<121=122
<123=124
<124=126,125
<127=128
<128=137,136,129
<129=135,130
<130=134,131
<131=133,132
<138=139
<139=144,143,140
<140=142,141
<145=146
<146=150,147
<147=148
<148=149
<150=151
<151=153,152
<154=155
<155=168,167,156
<156=166,157
<157=165,158
<158=164,159
<159=161,160
<161=163,162
<169=214,205,198,187,170
<170=171
<171=183,172
<172=181,179,177,173
<173=174
<174=176,175
<177=178
<179=180
<181=182
<183=184
<184=186,185
<187=188
<188=197,196,189
<189=195,190
<190=194,191
<191=193,192
<198=199
<199=204,203,200
<200=202,201
<205=206
<206=210,207
<207=208
<208=209
<210=211
<211=213,212
<214=215
<215=228,227,216
<216=226,217
<217=225,218
<218=224,219
<219=221,220
<221=223,222
<229=274,265,258,247,230
<230=231
<231=243,232
<232=241,239,237,233
<233=234
<234=236,235
<237=238
<239=240
<241=242
<243=244
<244=246,245
<247=248
<248=257,256,249
<249=255,250
<250=254,251
<251=253,252
<258=259
<259=264,263,260
<260=262,261
<265=266
<266=270,267
<267=268
<268=269
<270=271
<271=273,272
<274=275
<275=288,287,276
<276=286,277
<277=285,278
<278=284,279
<279=281,280
<281=283,282
<289=290
<290=296,291
<291=294,292
<292=293
<294=295
<296=297
<298=299
<299=305,300
<300=303,301
<301=302
<303=304
<305=306
<307=308
<308=313,312,309
<309=311,310
<314=315
<315=320,319,316
<316=318,317
<343=346,345,344
<346=361,354,347
<347=348
<348=352,349
<349=350
<350=351
<352=353
<354=355
<355=359,356
<356=357
<357=358
<359=360
<361=362
<362=366,363
<363=364
<364=365
<366=367
<371=383,382,372
<372=379,376,373
<373=375,374
<376=378,377
<379=381,380
<383=611,607,598,584,580,571,557,386,384
<384=385
<386=546,494,387
<387=388
<388=480,466,389
<389=457,432,390
<390=391
<391=423,409,398,392
<392=393
<393=395,394
<395=397,396
<398=399
<399=407,400
<400=403,401
<401=402
<403=404
<404=406,405
<407=408
<409=410
<410=414,411
<411=412
<412=413
<414=415
<415=417,416
<417=419,418
<419=420
<420=422,421
<423=424
<424=431,430,425
<425=429,426
<426=428,427
<432=448,437,433
<433=434
<434=436,435
<437=438
<438=440,439
<440=442,441
<442=444,443
<444=445
<445=447,446
<448=449
<449=456,455,450
<450=454,451
<451=453,452
<457=458
<458=465,459
<459=461,460
<461=462
<462=464,463
<466=467
<467=479,478,468
<468=477,469
<469=473,470
<470=471
<471=472
<473=474
<474=476,475
<480=481
<481=493,492,482
<482=491,483
<483=485,484
<485=486
<486=488,487
<488=490,489
<494=537,521,510,499,495
<495=496
<496=498,497
<499=500
<500=502,501
<502=504,503
<504=506,505
<506=507
<507=509,508
<510=511
<511=513,512
<513=515,514
<515=517,516
<517=518
<518=520,519
<521=522
<522=529,523
<523=525,524
<525=526
<526=528,527
<529=531,530
<531=533,532
<533=534
<534=536,535
<537=538
<538=545,544,539
<539=543,540
<540=542,541
<546=547
<547=556,548
<548=554,549
<549=552,550
<550=551
<552=553
<554=555
<557=558
<558=570,569,559
<559=568,560
<560=566,561
<561=562
<562=563
<563=565,564
<566=567
<571=572
<572=576,573
<573=574
<574=575
<576=577
<577=579,578
<580=581
<581=583,582
<584=585
<585=597,596,586
<586=595,587
<587=593,588
<588=589
<589=590
<590=592,591
<593=594
<598=599
<599=603,600
<600=601
<601=602
<603=604
<604=606,605
<607=608
<608=610,609
<611=612
<612=617,616,613
<613=615,614
<655=667,666,656
<656=663,660,657
<657=659,658
<660=662,661
<663=665,664
<667=881,877,868,854,850,841,827,670,668
<668=669
<670=823,761,671
<671=672
<672=750,739,673
<673=726,717,714,674
<674=675
<675=698,676
<676=694,688,677
<677=678
<678=682,679
<679=680
<680=681
<682=683
<683=685,684
<685=687,686
<688=689
<689=693,690
<690=692,691
<694=695
<695=697,696
<698=699
<699=703,700
<700=701
<701=702
<703=704
<704=706,705
<706=708,707
<708=709
<709=711,710
<711=713,712
<714=716,715
<717=718
<718=725,719
<719=721,720
<721=722
<722=724,723
<726=727
<727=728
<728=738,737,729
<729=736,730
<730=732,731
<732=733
<733=735,734
<739=740
<740=744,741
<741=742
<742=743
<744=745
<745=747,746
<747=749,748
<750=751
<751=759,752
<752=755,753
<753=754
<755=756
<756=758,757
<759=760
<761=814,798,782,766,762
<762=763
<763=765,764
<766=767
<767=780,768
<768=771,769
<769=770
<771=772
<772=774,773
<774=776,775
<776=777
<777=779,778
<780=781
<782=783
<783=796,784
<784=787,785
<785=786
<787=788
<788=790,789
<790=792,791
<792=793
<793=795,794
<796=797
<798=799
<799=806,800
<800=802,801
<802=803
<803=805,804
<806=808,807
<808=810,809
<810=811
<811=813,812
<814=815
<815=822,821,816
<816=820,817
<817=819,818
<823=824
<824=826,825
<827=828
<828=840,839,829
<829=838,830
<830=836,831
<831=832
<832=833
<833=835,834
<836=837
<841=842
<842=846,843
<843=844
<844=845
<846=847
<847=849,848
<850=851
<851=853,852
<854=855
<855=867,866,856
<856=865,857
<857=863,858
<858=859
<859=860
<860=862,861
<863=864
<868=869
<869=873,870
<870=871
<871=872
<873=874
<874=876,875
<877=878
<878=880,879
<881=882
<882=887,886,883
<883=885,884
<928=940,939,929
<929=936,933,930
<930=932,931
<933=935,934
<936=938,937
<940=1002,991,943,941
<941=942
<943=978,969,966,944
<944=962,956,945
<945=946
<946=950,947
<947=948
<948=949
<950=951
<951=953,952
<953=955,954
<956=957
<957=961,958
<958=960,959
<962=963
<963=965,964
<966=968,967
<969=970
<970=977,971
<971=973,972
<973=974
<974=976,975
<978=979
<979=980
<980=990,989,981
<981=988,982
<982=984,983
<984=985
<985=987,986
<991=992
<992=996,993
<993=994
<994=995
<996=997
<997=999,998
<999=1001,1000
<1002=1003
<1003=1008,1007,1004
<1004=1006,1005
<1026=1035,1034,1027
<1027=1031,1028
<1028=1030,1029
<1031=1033,1032
<1035=1066,1057,1036
<1036=1037
<1037=1053,1038
<1038=1039
<1039=1040
<1040=1051,1041
<1041=1044,1042
<1042=1043
<1044=1045
<1045=1049,1046
<1046=1047
<1047=1048
<1049=1050
<1051=1052
<1053=1054
<1054=1056,1055
<1057=1058
<1058=1062,1059
<1059=1060
<1060=1061
<1062=1063
<1063=1065,1064
<1066=1067
<1067=1074,1073,1068
<1068=1072,1069
<1069=1071,1070
<1085=1091,1090,1086
<1086=1087
<1087=1089,1088
<1091=1145,1092
<1092=1136,1093
<1093=1125,1124,1115,1114,1110,1101,1094
<1094=1095
<1095=1099,1096
<1096=1097
<1097=1098
<1099=1100
<1101=1102
<1102=1106,1103
<1103=1104
<1104=1105
<1106=1107
<1107=1109,1108
<1110=1111
<1111=1113,1112
<1115=1116
<1116=1118,1117
<1118=1119
<1119=1121,1120
<1121=1123,1122
<1125=1126
<1126=1135,1134,1127
<1127=1133,1128
<1128=1132,1129
<1129=1131,1130
<1136=1137
<1137=1144,1138
<1138=1140,1139
<1140=1141
<1141=1143,1142
<1145=1146
<1146=1158,1157,1147
<1147=1156,1148
<1148=1152,1149
<1149=1150
<1150=1151
<1152=1153
<1153=1155,1154
