>10	FunctionDef	NyARWorkHolder (int i_holder_size)
>11	ParameterList	int i_holder_size
>12	Parameter	 
>13	Identifier	i_holder_size
>14	ParameterType	int
>15	CompoundStatement	 
>16	ReturnStatement	 
>17	ExpressionStatement	 
>18	AssignmentExpr	this -> _length = i_holder_size
>19	Identifier	i_holder_size
>20	PtrMemberAccess	this -> _length
>21	Identifier	_length
>22	Identifier	this
>23	ExpressionStatement	 
>24	AssignmentExpr	this -> _allocate_size = 0
>25	PrimaryExpression	0
>26	PtrMemberAccess	this -> _allocate_size
>27	Identifier	_allocate_size
>28	Identifier	this
>29	ExpressionStatement	 
>30	Statement	 
>31	Statement	 
>32	Statement	 
>33	Statement	 
>34	Statement	 
>35	Statement	 
>36	Statement	 
>37	Statement	 
>38	Statement	 
>39	Statement	 
>48	FunctionDef	~NyARWorkHolder ()
>49	ParameterList	 
>50	CompoundStatement	 
>51	ReturnStatement	 
>52	ExpressionStatement	 
>53	CallExpression	NyAR_SAFE_DELETE ( this -> work2 )
>54	ArgumentList	this -> work2
>55	Argument	this -> work2
>56	PtrMemberAccess	this -> work2
>57	Identifier	work2
>58	Identifier	this
>59	Callee	NyAR_SAFE_DELETE
>60	Identifier	NyAR_SAFE_DELETE
>61	ForStatement	for ( int i = 0 ; i < this -> _allocate_size ; i ++ )
>62	CompoundStatement	 
>63	ExpressionStatement	 
>64	CallExpression	NyAR_SAFE_DELETE ( this -> work2 [ i ] )
>65	ArgumentList	this -> work2 [ i ]
>66	Argument	this -> work2 [ i ]
>67	ArrayIndexing	this -> work2 [ i ]
>68	Identifier	i
>69	PtrMemberAccess	this -> work2
>70	Identifier	work2
>71	Identifier	this
>72	Callee	NyAR_SAFE_DELETE
>73	Identifier	NyAR_SAFE_DELETE
>74	IncDecOp	 
>75	IncDec	++
>76	Identifier	i
>77	Condition	 
>78	RelationalExpression	i < this -> _allocate_size
>79	PtrMemberAccess	this -> _allocate_size
>80	Identifier	_allocate_size
>81	Identifier	this
>82	Identifier	i
>83	ForInit	 
>84	IdentifierDeclStatement	int i = 0 ;
>85	IdentifierDecl	i = 0
>86	AssignmentExpr	i = 0
>87	PrimaryExpression	0
>88	Identifier	i
>89	Identifier	i
>90	IdentifierDeclType	int
>102	FunctionDef	reserv (int i_index)
>103	ParameterList	int i_index
>104	Parameter	 
>105	Identifier	i_index
>106	ParameterType	int
>107	ReturnType	void
>108	CompoundStatement	 
>109	ReturnStatement	 
>110	ExpressionStatement	 
>111	AssignmentExpr	this -> _allocate_size = range
>112	Identifier	range
>113	PtrMemberAccess	this -> _allocate_size
>114	Identifier	_allocate_size
>115	Identifier	this
>116	ForStatement	for ( int i = this -> _allocate_size ; i < range ; i ++ )
>117	CompoundStatement	 
>118	ExpressionStatement	 
>119	AssignmentExpr	this -> work2 [ i ] = new int [ 7 ]
>120	PrimaryExpression	7
>121	ArrayIndexing	this -> work2 [ i ]
>122	Identifier	i
>123	PtrMemberAccess	this -> work2
>124	Identifier	work2
>125	Identifier	this
>126	IncDecOp	 
>127	IncDec	++
>128	Identifier	i
>129	Condition	 
>130	RelationalExpression	i < range
>131	Identifier	range
>132	Identifier	i
>133	ForInit	 
>134	IdentifierDeclStatement	int i = this -> _allocate_size ;
>135	IdentifierDecl	i = this -> _allocate_size
>136	AssignmentExpr	i = this -> _allocate_size
>137	PtrMemberAccess	this -> _allocate_size
>138	Identifier	_allocate_size
>139	Identifier	this
>140	Identifier	i
>141	Identifier	i
>142	IdentifierDeclType	int
>143	IfStatement	if ( range >= this -> _length )
>144	CompoundStatement	 
>145	ExpressionStatement	 
>146	AssignmentExpr	range = this -> _length
>147	PtrMemberAccess	this -> _length
>148	Identifier	_length
>149	Identifier	this
>150	Identifier	range
>151	Condition	 
>152	RelationalExpression	range >= this -> _length
>153	PtrMemberAccess	this -> _length
>154	Identifier	_length
>155	Identifier	this
>156	Identifier	range
>157	IdentifierDeclStatement	 
>158	IdentifierDecl	range = i_index + ARRAY_APPEND_STEP
>159	AssignmentExpr	range = i_index + ARRAY_APPEND_STEP
>160	AdditiveExpression	i_index + ARRAY_APPEND_STEP
>161	Identifier	ARRAY_APPEND_STEP
>162	Identifier	i_index
>163	Identifier	range
>164	Identifier	range
>165	IdentifierDeclType	int
>166	IfStatement	if ( i_index >= this -> _length )
>167	CompoundStatement	 
>168	ExpressionStatement	 
>169	CallExpression	NyARException ( )
>170	ArgumentList	 
>171	Callee	NyARException
>172	Identifier	NyARException
>173	Statement	 
>174	Condition	 
>175	RelationalExpression	i_index >= this -> _length
>176	PtrMemberAccess	this -> _length
>177	Identifier	_length
>178	Identifier	this
>179	Identifier	i_index
>180	IfStatement	if ( this -> _allocate_size > i_index )
>181	CompoundStatement	 
>182	ReturnStatement	 
>183	Condition	 
>184	RelationalExpression	this -> _allocate_size > i_index
>185	Identifier	i_index
>186	PtrMemberAccess	this -> _allocate_size
>187	Identifier	_allocate_size
>188	Identifier	this
>204	FunctionDef	NyARLabeling_ARToolKit 
>205	ParameterList	 
>206	CompoundStatement	 
>207	ReturnStatement	 
>208	ExpressionStatement	 
>209	AssignmentExpr	this -> work_holder = new NyARWorkHolder ( WORK_SIZE )
>210	Identifier	WORK_SIZE
>211	PtrMemberAccess	this -> work_holder
>212	Identifier	work_holder
>213	Identifier	this
>221	FunctionDef	NyARLabeling_ARToolKit 
>222	ParameterList	 
>223	CompoundStatement	 
>224	ReturnStatement	 
>225	ExpressionStatement	 
>226	CallExpression	NyAR_SAFE_DELETE ( this -> work_holder )
>227	ArgumentList	this -> work_holder
>228	Argument	this -> work_holder
>229	PtrMemberAccess	this -> work_holder
>230	Identifier	work_holder
>231	Identifier	this
>232	Callee	NyAR_SAFE_DELETE
>233	Identifier	NyAR_SAFE_DELETE
>240	FunctionDef	NyARLabeling_ARToolKit 
>241	ParameterList	INyARLabelingImage * i_destination_image
>242	Parameter	 
>243	Identifier	i_destination_image
>244	ParameterType	INyARLabelingImage *
>245	ReturnType	void
>246	CompoundStatement	 
>247	ReturnStatement	 
>248	ForStatement	for ( int i = 0 ; i < size -> h ; i ++ )
>249	CompoundStatement	 
>250	ExpressionStatement	 
>251	AssignmentExpr	img [ ( i + 1 ) * size -> w - 1 ] = 0
>252	PrimaryExpression	0
>253	ArrayIndexing	img [ ( i + 1 ) * size -> w - 1 ]
>254	AdditiveExpression	( i + 1 ) * size -> w - 1
>255	PrimaryExpression	1
>256	MultiplicativeExpression	( i + 1 ) * size -> w
>257	PtrMemberAccess	size -> w
>258	Identifier	w
>259	Identifier	size
>260	AdditiveExpression	i + 1
>261	PrimaryExpression	1
>262	Identifier	i
>263	Identifier	img
>264	ExpressionStatement	 
>265	AssignmentExpr	img [ i * size -> w ] = 0
>266	PrimaryExpression	0
>267	ArrayIndexing	img [ i * size -> w ]
>268	MultiplicativeExpression	i * size -> w
>269	PtrMemberAccess	size -> w
>270	Identifier	w
>271	Identifier	size
>272	Identifier	i
>273	Identifier	img
>274	IncDecOp	 
>275	IncDec	++
>276	Identifier	i
>277	Condition	 
>278	RelationalExpression	i < size -> h
>279	PtrMemberAccess	size -> h
>280	Identifier	h
>281	Identifier	size
>282	Identifier	i
>283	ForInit	 
>284	IdentifierDeclStatement	int i = 0 ;
>285	IdentifierDecl	i = 0
>286	AssignmentExpr	i = 0
>287	PrimaryExpression	0
>288	Identifier	i
>289	Identifier	i
>290	IdentifierDeclType	int
>291	ForStatement	for ( int i = 0 ; i < size -> w ; i ++ )
>292	CompoundStatement	 
>293	ExpressionStatement	 
>294	AssignmentExpr	img [ bottom_ptr + i ] = 0
>295	PrimaryExpression	0
>296	ArrayIndexing	img [ bottom_ptr + i ]
>297	AdditiveExpression	bottom_ptr + i
>298	Identifier	i
>299	Identifier	bottom_ptr
>300	Identifier	img
>301	ExpressionStatement	 
>302	AssignmentExpr	img [ i ] = 0
>303	PrimaryExpression	0
>304	ArrayIndexing	img [ i ]
>305	Identifier	i
>306	Identifier	img
>307	IncDecOp	 
>308	IncDec	++
>309	Identifier	i
>310	Condition	 
>311	RelationalExpression	i < size -> w
>312	PtrMemberAccess	size -> w
>313	Identifier	w
>314	Identifier	size
>315	Identifier	i
>316	ForInit	 
>317	IdentifierDeclStatement	int i = 0 ;
>318	IdentifierDecl	i = 0
>319	AssignmentExpr	i = 0
>320	PrimaryExpression	0
>321	Identifier	i
>322	Identifier	i
>323	IdentifierDeclType	int
>324	IdentifierDeclStatement	 
>325	IdentifierDecl	bottom_ptr = ( size -> h - 1 ) * size -> w
>326	AssignmentExpr	bottom_ptr = ( size -> h - 1 ) * size -> w
>327	MultiplicativeExpression	( size -> h - 1 ) * size -> w
>328	PtrMemberAccess	size -> w
>329	Identifier	w
>330	Identifier	size
>331	AdditiveExpression	size -> h - 1
>332	PrimaryExpression	1
>333	PtrMemberAccess	size -> h
>334	Identifier	h
>335	Identifier	size
>336	Identifier	bottom_ptr
>337	Identifier	bottom_ptr
>338	IdentifierDeclType	int
>339	IdentifierDeclStatement	 
>340	IdentifierDecl	* img = ( int * ) i_destination_image -> getBufferReader ( ) -> getBuffer ( )
>341	AssignmentExpr	* img = ( int * ) i_destination_image -> getBufferReader ( ) -> getBuffer ( )
>342	CastExpression	( int * ) i_destination_image -> getBufferReader ( ) -> getBuffer ( )
>343	CallExpression	i_destination_image -> getBufferReader ( ) -> getBuffer ( )
>344	ArgumentList	 
>345	Callee	i_destination_image -> getBufferReader ( ) -> getBuffer
>346	PtrMemberAccess	i_destination_image -> getBufferReader ( ) -> getBuffer
>347	Identifier	getBuffer
>348	CallExpression	i_destination_image -> getBufferReader ( )
>349	ArgumentList	 
>350	Callee	i_destination_image -> getBufferReader
>351	PtrMemberAccess	i_destination_image -> getBufferReader
>352	Identifier	getBufferReader
>353	Identifier	i_destination_image
>354	CastTarget	int *
>355	Identifier	img
>356	Identifier	img
>357	IdentifierDeclType	int *
>358	ExpressionStatement	 
>359	AssignmentExpr	this -> _out_image = i_destination_image
>360	Identifier	i_destination_image
>361	PtrMemberAccess	this -> _out_image
>362	Identifier	_out_image
>363	Identifier	this
>364	IdentifierDeclStatement	 
>365	IdentifierDecl	* size = i_destination_image -> getSize ( )
>366	AssignmentExpr	* size = i_destination_image -> getSize ( )
>367	CallExpression	i_destination_image -> getSize ( )
>368	ArgumentList	 
>369	Callee	i_destination_image -> getSize
>370	PtrMemberAccess	i_destination_image -> getSize
>371	Identifier	getSize
>372	Identifier	i_destination_image
>373	Identifier	size
>374	Identifier	size
>375	IdentifierDeclType	const TNyARIntSize *
>401	FunctionDef	NyARLabeling_ARToolKit 
>402	ParameterList	 
>403	ReturnType	const INyARLabelingImage *
>404	CompoundStatement	 
>405	ReturnStatement	 
>406	PtrMemberAccess	this -> _out_image
>407	Identifier	_out_image
>408	Identifier	this
>415	FunctionDef	NyARLabeling_ARToolKit 
>416	ParameterList	const NyARBinRaster & i_raster
>417	Parameter	 
>418	Identifier	i_raster
>419	ParameterType	const NyARBinRaster &
>420	ReturnType	void
>421	CompoundStatement	 
>422	ReturnStatement	 
>423	ForStatement	for ( i = 0 ; i < wlabel_num ; i ++ )
>424	CompoundStatement	 
>425	ExpressionStatement	 
>426	AssignmentExpr	label_pt -> pos_y /= label_pt -> area
>427	PtrMemberAccess	label_pt -> area
>428	Identifier	area
>429	Identifier	label_pt
>430	PtrMemberAccess	label_pt -> pos_y
>431	Identifier	pos_y
>432	Identifier	label_pt
>433	ExpressionStatement	 
>434	AssignmentExpr	label_pt -> pos_x /= label_pt -> area
>435	PtrMemberAccess	label_pt -> area
>436	Identifier	area
>437	Identifier	label_pt
>438	PtrMemberAccess	label_pt -> pos_x
>439	Identifier	pos_x
>440	Identifier	label_pt
>441	ExpressionStatement	 
>442	AssignmentExpr	label_pt = labels [ i ]
>443	ArrayIndexing	labels [ i ]
>444	Identifier	i
>445	Identifier	labels
>446	Identifier	label_pt
>447	IncDecOp	 
>448	IncDec	++
>449	Identifier	i
>450	Condition	 
>451	RelationalExpression	i < wlabel_num
>452	Identifier	wlabel_num
>453	Identifier	i
>454	ForInit	 
>455	AssignmentExpr	i = 0
>456	PrimaryExpression	0
>457	Identifier	i
>458	ForStatement	for ( i = 0 ; i < wk_max ; i ++ )
>459	CompoundStatement	 
>460	IfStatement	if ( label_pt -> clip_b < work2_pt [ 6 ] )
>461	CompoundStatement	 
>462	ExpressionStatement	 
>463	AssignmentExpr	label_pt -> clip_b = work2_pt [ 6 ]
>464	ArrayIndexing	work2_pt [ 6 ]
>465	PrimaryExpression	6
>466	Identifier	work2_pt
>467	PtrMemberAccess	label_pt -> clip_b
>468	Identifier	clip_b
>469	Identifier	label_pt
>470	Condition	 
>471	RelationalExpression	label_pt -> clip_b < work2_pt [ 6 ]
>472	ArrayIndexing	work2_pt [ 6 ]
>473	PrimaryExpression	6
>474	Identifier	work2_pt
>475	PtrMemberAccess	label_pt -> clip_b
>476	Identifier	clip_b
>477	Identifier	label_pt
>478	IfStatement	if ( label_pt -> clip_t > work2_pt [ 5 ] )
>479	CompoundStatement	 
>480	ExpressionStatement	 
>481	AssignmentExpr	label_pt -> clip_t = work2_pt [ 5 ]
>482	ArrayIndexing	work2_pt [ 5 ]
>483	PrimaryExpression	5
>484	Identifier	work2_pt
>485	PtrMemberAccess	label_pt -> clip_t
>486	Identifier	clip_t
>487	Identifier	label_pt
>488	Condition	 
>489	RelationalExpression	label_pt -> clip_t > work2_pt [ 5 ]
>490	ArrayIndexing	work2_pt [ 5 ]
>491	PrimaryExpression	5
>492	Identifier	work2_pt
>493	PtrMemberAccess	label_pt -> clip_t
>494	Identifier	clip_t
>495	Identifier	label_pt
>496	IfStatement	if ( label_pt -> clip_r < work2_pt [ 4 ] )
>497	CompoundStatement	 
>498	ExpressionStatement	 
>499	AssignmentExpr	label_pt -> clip_r = work2_pt [ 4 ]
>500	ArrayIndexing	work2_pt [ 4 ]
>501	PrimaryExpression	4
>502	Identifier	work2_pt
>503	PtrMemberAccess	label_pt -> clip_r
>504	Identifier	clip_r
>505	Identifier	label_pt
>506	Condition	 
>507	RelationalExpression	label_pt -> clip_r < work2_pt [ 4 ]
>508	ArrayIndexing	work2_pt [ 4 ]
>509	PrimaryExpression	4
>510	Identifier	work2_pt
>511	PtrMemberAccess	label_pt -> clip_r
>512	Identifier	clip_r
>513	Identifier	label_pt
>514	IfStatement	if ( label_pt -> clip_l > work2_pt [ 3 ] )
>515	CompoundStatement	 
>516	ExpressionStatement	 
>517	AssignmentExpr	label_pt -> clip_l = work2_pt [ 3 ]
>518	ArrayIndexing	work2_pt [ 3 ]
>519	PrimaryExpression	3
>520	Identifier	work2_pt
>521	PtrMemberAccess	label_pt -> clip_l
>522	Identifier	clip_l
>523	Identifier	label_pt
>524	Condition	 
>525	RelationalExpression	label_pt -> clip_l > work2_pt [ 3 ]
>526	ArrayIndexing	work2_pt [ 3 ]
>527	PrimaryExpression	3
>528	Identifier	work2_pt
>529	PtrMemberAccess	label_pt -> clip_l
>530	Identifier	clip_l
>531	Identifier	label_pt
>532	ExpressionStatement	 
>533	AssignmentExpr	label_pt -> pos_y += work2_pt [ 2 ]
>534	ArrayIndexing	work2_pt [ 2 ]
>535	PrimaryExpression	2
>536	Identifier	work2_pt
>537	PtrMemberAccess	label_pt -> pos_y
>538	Identifier	pos_y
>539	Identifier	label_pt
>540	ExpressionStatement	 
>541	AssignmentExpr	label_pt -> pos_x += work2_pt [ 1 ]
>542	ArrayIndexing	work2_pt [ 1 ]
>543	PrimaryExpression	1
>544	Identifier	work2_pt
>545	PtrMemberAccess	label_pt -> pos_x
>546	Identifier	pos_x
>547	Identifier	label_pt
>548	ExpressionStatement	 
>549	AssignmentExpr	label_pt -> area += work2_pt [ 0 ]
>550	ArrayIndexing	work2_pt [ 0 ]
>551	PrimaryExpression	0
>552	Identifier	work2_pt
>553	PtrMemberAccess	label_pt -> area
>554	Identifier	area
>555	Identifier	label_pt
>556	ExpressionStatement	 
>557	AssignmentExpr	work2_pt = work2 [ i ]
>558	ArrayIndexing	work2 [ i ]
>559	Identifier	i
>560	Identifier	work2
>561	Identifier	work2_pt
>562	ExpressionStatement	 
>563	AssignmentExpr	label_pt = labels [ label_idxtbl [ i ] - 1 ]
>564	ArrayIndexing	labels [ label_idxtbl [ i ] - 1 ]
>565	AdditiveExpression	label_idxtbl [ i ] - 1
>566	PrimaryExpression	1
>567	ArrayIndexing	label_idxtbl [ i ]
>568	Identifier	i
>569	Identifier	label_idxtbl
>570	Identifier	labels
>571	Identifier	label_pt
>572	IncDecOp	 
>573	IncDec	++
>574	Identifier	i
>575	Condition	 
>576	RelationalExpression	i < wk_max
>577	Identifier	wk_max
>578	Identifier	i
>579	ForInit	 
>580	AssignmentExpr	i = 0
>581	PrimaryExpression	0
>582	Identifier	i
>583	ForStatement	for ( i = 0 ; i < wlabel_num ; i ++ )
>584	CompoundStatement	 
>585	ExpressionStatement	 
>586	AssignmentExpr	label_pt -> clip_r = label_pt -> clip_b = 0
>587	AssignmentExpr	label_pt -> clip_b = 0
>588	PrimaryExpression	0
>589	PtrMemberAccess	label_pt -> clip_b
>590	Identifier	clip_b
>591	Identifier	label_pt
>592	PtrMemberAccess	label_pt -> clip_r
>593	Identifier	clip_r
>594	Identifier	label_pt
>595	ExpressionStatement	 
>596	AssignmentExpr	label_pt -> clip_t = lysize
>597	Identifier	lysize
>598	PtrMemberAccess	label_pt -> clip_t
>599	Identifier	clip_t
>600	Identifier	label_pt
>601	ExpressionStatement	 
>602	AssignmentExpr	label_pt -> clip_l = lxsize
>603	Identifier	lxsize
>604	PtrMemberAccess	label_pt -> clip_l
>605	Identifier	clip_l
>606	Identifier	label_pt
>607	ExpressionStatement	 
>608	AssignmentExpr	label_pt -> pos_x = label_pt -> pos_y = 0
>609	AssignmentExpr	label_pt -> pos_y = 0
>610	PrimaryExpression	0
>611	PtrMemberAccess	label_pt -> pos_y
>612	Identifier	pos_y
>613	Identifier	label_pt
>614	PtrMemberAccess	label_pt -> pos_x
>615	Identifier	pos_x
>616	Identifier	label_pt
>617	ExpressionStatement	 
>618	AssignmentExpr	label_pt -> area = 0
>619	PrimaryExpression	0
>620	PtrMemberAccess	label_pt -> area
>621	Identifier	area
>622	Identifier	label_pt
>623	ExpressionStatement	 
>624	AssignmentExpr	label_pt -> id = i + 1
>625	AdditiveExpression	i + 1
>626	PrimaryExpression	1
>627	Identifier	i
>628	PtrMemberAccess	label_pt -> id
>629	Identifier	id
>630	Identifier	label_pt
>631	ExpressionStatement	 
>632	AssignmentExpr	label_pt = labels [ i ]
>633	ArrayIndexing	labels [ i ]
>634	Identifier	i
>635	Identifier	labels
>636	Identifier	label_pt
>637	IncDecOp	 
>638	IncDec	++
>639	Identifier	i
>640	Condition	 
>641	RelationalExpression	i < wlabel_num
>642	Identifier	wlabel_num
>643	Identifier	i
>644	ForInit	 
>645	AssignmentExpr	i = 0
>646	PrimaryExpression	0
>647	Identifier	i
>648	IdentifierDeclStatement	 
>649	IdentifierDecl	* * labels = label_list -> getArray ( ) -> item
>650	AssignmentExpr	* * labels = label_list -> getArray ( ) -> item
>651	PtrMemberAccess	label_list -> getArray ( ) -> item
>652	Identifier	item
>653	CallExpression	label_list -> getArray ( )
>654	ArgumentList	 
>655	Callee	label_list -> getArray
>656	PtrMemberAccess	label_list -> getArray
>657	Identifier	getArray
>658	Identifier	label_list
>659	Identifier	labels
>660	Identifier	labels
>661	IdentifierDeclType	NyARLabelingLabel * *
>662	IdentifierDeclStatement	 
>663	IdentifierDecl	* label_pt
>664	Identifier	label_pt
>665	IdentifierDeclType	NyARLabelingLabel *
>666	ExpressionStatement	 
>667	CallExpression	label_list -> reserv ( wlabel_num )
>668	ArgumentList	wlabel_num
>669	Argument	wlabel_num
>670	Identifier	wlabel_num
>671	Callee	label_list -> reserv
>672	PtrMemberAccess	label_list -> reserv
>673	Identifier	reserv
>674	Identifier	label_list
>675	IdentifierDeclStatement	 
>676	IdentifierDecl	* label_list = this -> _out_image -> getLabelStack ( )
>677	AssignmentExpr	* label_list = this -> _out_image -> getLabelStack ( )
>678	CallExpression	this -> _out_image -> getLabelStack ( )
>679	ArgumentList	 
>680	Callee	this -> _out_image -> getLabelStack
>681	PtrMemberAccess	this -> _out_image -> getLabelStack
>682	Identifier	getLabelStack
>683	PtrMemberAccess	this -> _out_image
>684	Identifier	_out_image
>685	Identifier	this
>686	Identifier	label_list
>687	Identifier	label_list
>688	IdentifierDeclType	NyARLabelingLabelStack *
>689	IfStatement	if ( wlabel_num == 0 )
>690	CompoundStatement	 
>691	ReturnStatement	 
>692	ExpressionStatement	 
>693	CallExpression	this -> _out_image -> getLabelStack ( ) -> clear ( )
>694	ArgumentList	 
>695	Callee	this -> _out_image -> getLabelStack ( ) -> clear
>696	PtrMemberAccess	this -> _out_image -> getLabelStack ( ) -> clear
>697	Identifier	clear
>698	CallExpression	this -> _out_image -> getLabelStack ( )
>699	ArgumentList	 
>700	Callee	this -> _out_image -> getLabelStack
>701	PtrMemberAccess	this -> _out_image -> getLabelStack
>702	Identifier	getLabelStack
>703	PtrMemberAccess	this -> _out_image
>704	Identifier	_out_image
>705	Identifier	this
>706	Condition	 
>707	EqualityExpression	wlabel_num == 0
>708	PrimaryExpression	0
>709	Identifier	wlabel_num
>710	ExpressionStatement	 
>711	AssignmentExpr	wlabel_num -= 1
>712	PrimaryExpression	1
>713	Identifier	wlabel_num
>714	ForStatement	for ( i = 0 ; i < wk_max ; i ++ )
>715	CompoundStatement	 
>716	ExpressionStatement	 
>717	AssignmentExpr	label_idxtbl [ i ] = ( label_idxtbl [ i ] == i + 1 ) ? wlabel_num ++ 
>718	ConditionalExpression	( label_idxtbl [ i ] == i + 1 ) ? wlabel_num ++ 
>719	ArrayIndexing	label_idxtbl [ label_idxtbl [ i ] - 1 ]
>720	AdditiveExpression	label_idxtbl [ i ] - 1
>721	PrimaryExpression	1
>722	ArrayIndexing	label_idxtbl [ i ]
>723	Identifier	i
>724	Identifier	label_idxtbl
>725	Identifier	label_idxtbl
>726	IncDecOp	wlabel_num ++
>727	IncDec	++
>728	Identifier	wlabel_num
>729	Condition	label_idxtbl [ i ] == i + 1
>730	EqualityExpression	label_idxtbl [ i ] == i + 1
>731	AdditiveExpression	i + 1
>732	PrimaryExpression	1
>733	Identifier	i
>734	ArrayIndexing	label_idxtbl [ i ]
>735	Identifier	i
>736	Identifier	label_idxtbl
>737	ArrayIndexing	label_idxtbl [ i ]
>738	Identifier	i
>739	Identifier	label_idxtbl
>740	IncDecOp	 
>741	IncDec	++
>742	Identifier	i
>743	Condition	 
>744	RelationalExpression	i < wk_max
>745	Identifier	wk_max
>746	Identifier	i
>747	ForInit	 
>748	AssignmentExpr	i = 0
>749	PrimaryExpression	0
>750	Identifier	i
>751	IdentifierDeclStatement	 
>752	IdentifierDecl	wlabel_num = 1
>753	AssignmentExpr	wlabel_num = 1
>754	PrimaryExpression	1
>755	Identifier	wlabel_num
>756	Identifier	wlabel_num
>757	IdentifierDeclType	int
>758	ForStatement	for ( j = 1 ; j < lysize - 1 ; j ++ )
>759	CompoundStatement	 
>760	ForStatement	for ( i = 1 ; i < lxsize - 1 ; i ++ , pixel_index ++ , label_img_ptr1 ++ )
>761	CompoundStatement	 
>762	IfStatement	if ( raster_buf [ pixel_index ] != 0 )
>763	ElseStatement	else
>764	CompoundStatement	 
>765	ExpressionStatement	 
>766	AssignmentExpr	label_img [ pixel_index ] = label_pixel
>767	Identifier	label_pixel
>768	ArrayIndexing	label_img [ pixel_index ]
>769	Identifier	pixel_index
>770	Identifier	label_img
>771	IfStatement	if ( label_img [ label_img_ptr1 ] > 0 )
>772	ElseStatement	else
>773	IfStatement	if ( label_img [ label_img_ptr1 + 1 ] > 0 )
>774	ElseStatement	else
>775	IfStatement	if ( ( label_img [ label_img_ptr1 - 1 ] ) > 0 )
>776	ElseStatement	else
>777	IfStatement	if ( label_img [ pixel_index - 1 ] > 0 )
>778	ElseStatement	else
>779	CompoundStatement	 
>780	ExpressionStatement	 
>781	AssignmentExpr	work2_pt [ 6 ] = j
>782	Identifier	j
>783	ArrayIndexing	work2_pt [ 6 ]
>784	PrimaryExpression	6
>785	Identifier	work2_pt
>786	ExpressionStatement	 
>787	AssignmentExpr	work2_pt [ 5 ] = j
>788	Identifier	j
>789	ArrayIndexing	work2_pt [ 5 ]
>790	PrimaryExpression	5
>791	Identifier	work2_pt
>792	ExpressionStatement	 
>793	AssignmentExpr	work2_pt [ 4 ] = i
>794	Identifier	i
>795	ArrayIndexing	work2_pt [ 4 ]
>796	PrimaryExpression	4
>797	Identifier	work2_pt
>798	ExpressionStatement	 
>799	AssignmentExpr	work2_pt [ 3 ] = i
>800	Identifier	i
>801	ArrayIndexing	work2_pt [ 3 ]
>802	PrimaryExpression	3
>803	Identifier	work2_pt
>804	ExpressionStatement	 
>805	AssignmentExpr	work2_pt [ 2 ] = j
>806	Identifier	j
>807	ArrayIndexing	work2_pt [ 2 ]
>808	PrimaryExpression	2
>809	Identifier	work2_pt
>810	ExpressionStatement	 
>811	AssignmentExpr	work2_pt [ 1 ] = i
>812	Identifier	i
>813	ArrayIndexing	work2_pt [ 1 ]
>814	PrimaryExpression	1
>815	Identifier	work2_pt
>816	ExpressionStatement	 
>817	AssignmentExpr	work2_pt [ 0 ] = 1
>818	PrimaryExpression	1
>819	ArrayIndexing	work2_pt [ 0 ]
>820	PrimaryExpression	0
>821	Identifier	work2_pt
>822	ExpressionStatement	 
>823	AssignmentExpr	work2_pt = work2 [ wk_max - 1 ]
>824	ArrayIndexing	work2 [ wk_max - 1 ]
>825	AdditiveExpression	wk_max - 1
>826	PrimaryExpression	1
>827	Identifier	wk_max
>828	Identifier	work2
>829	Identifier	work2_pt
>830	ExpressionStatement	 
>831	AssignmentExpr	label_pixel = wk_max
>832	Identifier	wk_max
>833	Identifier	label_pixel
>834	ExpressionStatement	 
>835	AssignmentExpr	label_idxtbl [ wk_max - 1 ] = wk_max
>836	Identifier	wk_max
>837	ArrayIndexing	label_idxtbl [ wk_max - 1 ]
>838	AdditiveExpression	wk_max - 1
>839	PrimaryExpression	1
>840	Identifier	wk_max
>841	Identifier	label_idxtbl
>842	ExpressionStatement	 
>843	IncDecOp	wk_max ++
>844	IncDec	++
>845	Identifier	wk_max
>846	ExpressionStatement	 
>847	CallExpression	this -> work_holder -> reserv ( wk_max )
>848	ArgumentList	wk_max
>849	Argument	wk_max
>850	Identifier	wk_max
>851	Callee	this -> work_holder -> reserv
>852	PtrMemberAccess	this -> work_holder -> reserv
>853	Identifier	reserv
>854	PtrMemberAccess	this -> work_holder
>855	Identifier	work_holder
>856	Identifier	this
>857	CompoundStatement	 
>858	IfStatement	if ( work2_pt [ 4 ] < i )
>859	CompoundStatement	 
>860	ExpressionStatement	 
>861	AssignmentExpr	work2_pt [ 4 ] = i
>862	Identifier	i
>863	ArrayIndexing	work2_pt [ 4 ]
>864	PrimaryExpression	4
>865	Identifier	work2_pt
>866	Condition	 
>867	RelationalExpression	work2_pt [ 4 ] < i
>868	Identifier	i
>869	ArrayIndexing	work2_pt [ 4 ]
>870	PrimaryExpression	4
>871	Identifier	work2_pt
>872	ExpressionStatement	 
>873	AssignmentExpr	work2_pt [ 2 ] += j
>874	Identifier	j
>875	ArrayIndexing	work2_pt [ 2 ]
>876	PrimaryExpression	2
>877	Identifier	work2_pt
>878	ExpressionStatement	 
>879	AssignmentExpr	work2_pt [ 1 ] += i
>880	Identifier	i
>881	ArrayIndexing	work2_pt [ 1 ]
>882	PrimaryExpression	1
>883	Identifier	work2_pt
>884	ExpressionStatement	 
>885	IncDecOp	work2_pt [ 0 ] ++
>886	IncDec	++
>887	ArrayIndexing	work2_pt [ 0 ]
>888	PrimaryExpression	0
>889	Identifier	work2_pt
>890	ExpressionStatement	 
>891	AssignmentExpr	work2_pt = work2 [ label_pixel - 1 ]
>892	ArrayIndexing	work2 [ label_pixel - 1 ]
>893	AdditiveExpression	label_pixel - 1
>894	PrimaryExpression	1
>895	Identifier	label_pixel
>896	Identifier	work2
>897	Identifier	work2_pt
>898	ExpressionStatement	 
>899	AssignmentExpr	label_pixel = label_img [ pixel_index - 1 ]
>900	ArrayIndexing	label_img [ pixel_index - 1 ]
>901	AdditiveExpression	pixel_index - 1
>902	PrimaryExpression	1
>903	Identifier	pixel_index
>904	Identifier	label_img
>905	Identifier	label_pixel
>906	Condition	 
>907	RelationalExpression	label_img [ pixel_index - 1 ] > 0
>908	PrimaryExpression	0
>909	ArrayIndexing	label_img [ pixel_index - 1 ]
>910	AdditiveExpression	pixel_index - 1
>911	PrimaryExpression	1
>912	Identifier	pixel_index
>913	Identifier	label_img
>914	CompoundStatement	 
>915	ExpressionStatement	 
>916	AssignmentExpr	work2_pt [ 6 ] = j
>917	Identifier	j
>918	ArrayIndexing	work2_pt [ 6 ]
>919	PrimaryExpression	6
>920	Identifier	work2_pt
>921	IfStatement	if ( work2_pt [ 4 ] < i )
>922	CompoundStatement	 
>923	ExpressionStatement	 
>924	AssignmentExpr	work2_pt [ 4 ] = i
>925	Identifier	i
>926	ArrayIndexing	work2_pt [ 4 ]
>927	PrimaryExpression	4
>928	Identifier	work2_pt
>929	Condition	 
>930	RelationalExpression	work2_pt [ 4 ] < i
>931	Identifier	i
>932	ArrayIndexing	work2_pt [ 4 ]
>933	PrimaryExpression	4
>934	Identifier	work2_pt
>935	ExpressionStatement	 
>936	AssignmentExpr	work2_pt [ 2 ] += j
>937	Identifier	j
>938	ArrayIndexing	work2_pt [ 2 ]
>939	PrimaryExpression	2
>940	Identifier	work2_pt
>941	ExpressionStatement	 
>942	AssignmentExpr	work2_pt [ 1 ] += i
>943	Identifier	i
>944	ArrayIndexing	work2_pt [ 1 ]
>945	PrimaryExpression	1
>946	Identifier	work2_pt
>947	ExpressionStatement	 
>948	IncDecOp	work2_pt [ 0 ] ++
>949	IncDec	++
>950	ArrayIndexing	work2_pt [ 0 ]
>951	PrimaryExpression	0
>952	Identifier	work2_pt
>953	ExpressionStatement	 
>954	AssignmentExpr	work2_pt = work2 [ label_pixel - 1 ]
>955	ArrayIndexing	work2 [ label_pixel - 1 ]
>956	AdditiveExpression	label_pixel - 1
>957	PrimaryExpression	1
>958	Identifier	label_pixel
>959	Identifier	work2
>960	Identifier	work2_pt
>961	ExpressionStatement	 
>962	AssignmentExpr	label_pixel = label_img [ label_img_ptr1 - 1 ]
>963	ArrayIndexing	label_img [ label_img_ptr1 - 1 ]
>964	AdditiveExpression	label_img_ptr1 - 1
>965	PrimaryExpression	1
>966	Identifier	label_img_ptr1
>967	Identifier	label_img
>968	Identifier	label_pixel
>969	Condition	 
>970	RelationalExpression	( label_img [ label_img_ptr1 - 1 ] ) > 0
>971	PrimaryExpression	0
>972	ArrayIndexing	label_img [ label_img_ptr1 - 1 ]
>973	AdditiveExpression	label_img_ptr1 - 1
>974	PrimaryExpression	1
>975	Identifier	label_img_ptr1
>976	Identifier	label_img
>977	CompoundStatement	 
>978	IfStatement	if ( label_img [ label_img_ptr1 - 1 ] > 0 )
>979	ElseStatement	else
>980	IfStatement	if ( ( label_img [ pixel_index - 1 ] ) > 0 )
>981	ElseStatement	else
>982	CompoundStatement	 
>983	ExpressionStatement	 
>984	AssignmentExpr	work2_pt [ 6 ] = j
>985	Identifier	j
>986	ArrayIndexing	work2_pt [ 6 ]
>987	PrimaryExpression	6
>988	Identifier	work2_pt
>989	IfStatement	if ( work2_pt [ 3 ] > i )
>990	CompoundStatement	 
>991	ExpressionStatement	 
>992	AssignmentExpr	work2_pt [ 3 ] = i
>993	Identifier	i
>994	ArrayIndexing	work2_pt [ 3 ]
>995	PrimaryExpression	3
>996	Identifier	work2_pt
>997	Condition	 
>998	RelationalExpression	work2_pt [ 3 ] > i
>999	Identifier	i
>1000	ArrayIndexing	work2_pt [ 3 ]
>1001	PrimaryExpression	3
>1002	Identifier	work2_pt
>1003	ExpressionStatement	 
>1004	AssignmentExpr	work2_pt [ 2 ] += j
>1005	Identifier	j
>1006	ArrayIndexing	work2_pt [ 2 ]
>1007	PrimaryExpression	2
>1008	Identifier	work2_pt
>1009	ExpressionStatement	 
>1010	AssignmentExpr	work2_pt [ 1 ] += i
>1011	Identifier	i
>1012	ArrayIndexing	work2_pt [ 1 ]
>1013	PrimaryExpression	1
>1014	Identifier	work2_pt
>1015	ExpressionStatement	 
>1016	IncDecOp	work2_pt [ 0 ] ++
>1017	IncDec	++
>1018	ArrayIndexing	work2_pt [ 0 ]
>1019	PrimaryExpression	0
>1020	Identifier	work2_pt
>1021	ExpressionStatement	 
>1022	AssignmentExpr	work2_pt = work2 [ label_pixel - 1 ]
>1023	ArrayIndexing	work2 [ label_pixel - 1 ]
>1024	AdditiveExpression	label_pixel - 1
>1025	PrimaryExpression	1
>1026	Identifier	label_pixel
>1027	Identifier	work2
>1028	Identifier	work2_pt
>1029	ExpressionStatement	 
>1030	AssignmentExpr	label_pixel = label_img [ label_img_ptr1 + 1 ]
>1031	ArrayIndexing	label_img [ label_img_ptr1 + 1 ]
>1032	AdditiveExpression	label_img_ptr1 + 1
>1033	PrimaryExpression	1
>1034	Identifier	label_img_ptr1
>1035	Identifier	label_img
>1036	Identifier	label_pixel
>1037	CompoundStatement	 
>1038	ExpressionStatement	 
>1039	AssignmentExpr	work2_pt [ 2 ] += j
>1040	Identifier	j
>1041	ArrayIndexing	work2_pt [ 2 ]
>1042	PrimaryExpression	2
>1043	Identifier	work2_pt
>1044	ExpressionStatement	 
>1045	AssignmentExpr	work2_pt [ 1 ] += i
>1046	Identifier	i
>1047	ArrayIndexing	work2_pt [ 1 ]
>1048	PrimaryExpression	1
>1049	Identifier	work2_pt
>1050	ExpressionStatement	 
>1051	IncDecOp	work2_pt [ 0 ] ++
>1052	IncDec	++
>1053	ArrayIndexing	work2_pt [ 0 ]
>1054	PrimaryExpression	0
>1055	Identifier	work2_pt
>1056	ExpressionStatement	 
>1057	AssignmentExpr	work2_pt = work2 [ label_pixel - 1 ]
>1058	ArrayIndexing	work2 [ label_pixel - 1 ]
>1059	AdditiveExpression	label_pixel - 1
>1060	PrimaryExpression	1
>1061	Identifier	label_pixel
>1062	Identifier	work2
>1063	Identifier	work2_pt
>1064	IfStatement	if ( label_pixel > n )
>1065	ElseStatement	else
>1066	IfStatement	if ( label_pixel < n )
>1067	CompoundStatement	 
>1068	ForStatement	for ( k = 0 ; k < wk_max ; k ++ )
>1069	CompoundStatement	 
>1070	IfStatement	if ( label_idxtbl [ k ] == n )
>1071	CompoundStatement	 
>1072	ExpressionStatement	 
>1073	AssignmentExpr	label_idxtbl [ k ] = label_pixel
>1074	Identifier	label_pixel
>1075	ArrayIndexing	label_idxtbl [ k ]
>1076	Identifier	k
>1077	Identifier	label_idxtbl
>1078	Condition	 
>1079	EqualityExpression	label_idxtbl [ k ] == n
>1080	Identifier	n
>1081	ArrayIndexing	label_idxtbl [ k ]
>1082	Identifier	k
>1083	Identifier	label_idxtbl
>1084	IncDecOp	 
>1085	IncDec	++
>1086	Identifier	k
>1087	Condition	 
>1088	RelationalExpression	k < wk_max
>1089	Identifier	wk_max
>1090	Identifier	k
>1091	ForInit	 
>1092	AssignmentExpr	k = 0
>1093	PrimaryExpression	0
>1094	Identifier	k
>1095	Condition	 
>1096	RelationalExpression	label_pixel < n
>1097	Identifier	n
>1098	Identifier	label_pixel
>1099	CompoundStatement	 
>1100	ExpressionStatement	 
>1101	AssignmentExpr	label_pixel = n
>1102	Identifier	n
>1103	Identifier	label_pixel
>1104	ForStatement	for ( k = 0 ; k < wk_max ; k ++ )
>1105	CompoundStatement	 
>1106	IfStatement	if ( label_idxtbl [ k ] == label_pixel )
>1107	CompoundStatement	 
>1108	ExpressionStatement	 
>1109	AssignmentExpr	label_idxtbl [ k ] = n
>1110	Identifier	n
>1111	ArrayIndexing	label_idxtbl [ k ]
>1112	Identifier	k
>1113	Identifier	label_idxtbl
>1114	Condition	 
>1115	EqualityExpression	label_idxtbl [ k ] == label_pixel
>1116	Identifier	label_pixel
>1117	ArrayIndexing	label_idxtbl [ k ]
>1118	Identifier	k
>1119	Identifier	label_idxtbl
>1120	IncDecOp	 
>1121	IncDec	++
>1122	Identifier	k
>1123	Condition	 
>1124	RelationalExpression	k < wk_max
>1125	Identifier	wk_max
>1126	Identifier	k
>1127	ForInit	 
>1128	AssignmentExpr	k = 0
>1129	PrimaryExpression	0
>1130	Identifier	k
>1131	Condition	 
>1132	RelationalExpression	label_pixel > n
>1133	Identifier	n
>1134	Identifier	label_pixel
>1135	ExpressionStatement	 
>1136	AssignmentExpr	n = label_idxtbl [ label_img [ pixel_index - 1 ] - 1 ]
>1137	ArrayIndexing	label_idxtbl [ label_img [ pixel_index - 1 ] - 1 ]
>1138	AdditiveExpression	label_img [ pixel_index - 1 ] - 1
>1139	PrimaryExpression	1
>1140	ArrayIndexing	label_img [ pixel_index - 1 ]
>1141	AdditiveExpression	pixel_index - 1
>1142	PrimaryExpression	1
>1143	Identifier	pixel_index
>1144	Identifier	label_img
>1145	Identifier	label_idxtbl
>1146	Identifier	n
>1147	ExpressionStatement	 
>1148	AssignmentExpr	label_pixel = label_idxtbl [ label_img [ label_img_ptr1 + 1 ] - 1 ]
>1149	ArrayIndexing	label_idxtbl [ label_img [ label_img_ptr1 + 1 ] - 1 ]
>1150	AdditiveExpression	label_img [ label_img_ptr1 + 1 ] - 1
>1151	PrimaryExpression	1
>1152	ArrayIndexing	label_img [ label_img_ptr1 + 1 ]
>1153	AdditiveExpression	label_img_ptr1 + 1
>1154	PrimaryExpression	1
>1155	Identifier	label_img_ptr1
>1156	Identifier	label_img
>1157	Identifier	label_idxtbl
>1158	Identifier	label_pixel
>1159	Condition	 
>1160	RelationalExpression	( label_img [ pixel_index - 1 ] ) > 0
>1161	PrimaryExpression	0
>1162	ArrayIndexing	label_img [ pixel_index - 1 ]
>1163	AdditiveExpression	pixel_index - 1
>1164	PrimaryExpression	1
>1165	Identifier	pixel_index
>1166	Identifier	label_img
>1167	CompoundStatement	 
>1168	ExpressionStatement	 
>1169	AssignmentExpr	work2_pt [ 6 ] = j
>1170	Identifier	j
>1171	ArrayIndexing	work2_pt [ 6 ]
>1172	PrimaryExpression	6
>1173	Identifier	work2_pt
>1174	ExpressionStatement	 
>1175	AssignmentExpr	work2_pt [ 2 ] += j
>1176	Identifier	j
>1177	ArrayIndexing	work2_pt [ 2 ]
>1178	PrimaryExpression	2
>1179	Identifier	work2_pt
>1180	ExpressionStatement	 
>1181	AssignmentExpr	work2_pt [ 1 ] += i
>1182	Identifier	i
>1183	ArrayIndexing	work2_pt [ 1 ]
>1184	PrimaryExpression	1
>1185	Identifier	work2_pt
>1186	ExpressionStatement	 
>1187	IncDecOp	work2_pt [ 0 ] ++
>1188	IncDec	++
>1189	ArrayIndexing	work2_pt [ 0 ]
>1190	PrimaryExpression	0
>1191	Identifier	work2_pt
>1192	ExpressionStatement	 
>1193	AssignmentExpr	work2_pt = work2 [ label_pixel - 1 ]
>1194	ArrayIndexing	work2 [ label_pixel - 1 ]
>1195	AdditiveExpression	label_pixel - 1
>1196	PrimaryExpression	1
>1197	Identifier	label_pixel
>1198	Identifier	work2
>1199	Identifier	work2_pt
>1200	IfStatement	if ( label_pixel > n )
>1201	ElseStatement	else
>1202	IfStatement	if ( label_pixel < n )
>1203	CompoundStatement	 
>1204	ForStatement	for ( k = 0 ; k < wk_max ; k ++ )
>1205	CompoundStatement	 
>1206	IfStatement	if ( label_idxtbl [ k ] == n )
>1207	CompoundStatement	 
>1208	ExpressionStatement	 
>1209	AssignmentExpr	label_idxtbl [ k ] = label_pixel
>1210	Identifier	label_pixel
>1211	ArrayIndexing	label_idxtbl [ k ]
>1212	Identifier	k
>1213	Identifier	label_idxtbl
>1214	Condition	 
>1215	EqualityExpression	label_idxtbl [ k ] == n
>1216	Identifier	n
>1217	ArrayIndexing	label_idxtbl [ k ]
>1218	Identifier	k
>1219	Identifier	label_idxtbl
>1220	IncDecOp	 
>1221	IncDec	++
>1222	Identifier	k
>1223	Condition	 
>1224	RelationalExpression	k < wk_max
>1225	Identifier	wk_max
>1226	Identifier	k
>1227	ForInit	 
>1228	AssignmentExpr	k = 0
>1229	PrimaryExpression	0
>1230	Identifier	k
>1231	Condition	 
>1232	RelationalExpression	label_pixel < n
>1233	Identifier	n
>1234	Identifier	label_pixel
>1235	CompoundStatement	 
>1236	ExpressionStatement	 
>1237	AssignmentExpr	label_pixel = n
>1238	Identifier	n
>1239	Identifier	label_pixel
>1240	ForStatement	for ( k = 0 ; k < wk_max ; k ++ )
>1241	CompoundStatement	 
>1242	IfStatement	if ( label_idxtbl [ k ] == label_pixel )
>1243	CompoundStatement	 
>1244	ExpressionStatement	 
>1245	AssignmentExpr	label_idxtbl [ k ] = n
>1246	Identifier	n
>1247	ArrayIndexing	label_idxtbl [ k ]
>1248	Identifier	k
>1249	Identifier	label_idxtbl
>1250	Condition	 
>1251	EqualityExpression	label_idxtbl [ k ] == label_pixel
>1252	Identifier	label_pixel
>1253	ArrayIndexing	label_idxtbl [ k ]
>1254	Identifier	k
>1255	Identifier	label_idxtbl
>1256	IncDecOp	 
>1257	IncDec	++
>1258	Identifier	k
>1259	Condition	 
>1260	RelationalExpression	k < wk_max
>1261	Identifier	wk_max
>1262	Identifier	k
>1263	ForInit	 
>1264	AssignmentExpr	k = 0
>1265	PrimaryExpression	0
>1266	Identifier	k
>1267	Condition	 
>1268	RelationalExpression	label_pixel > n
>1269	Identifier	n
>1270	Identifier	label_pixel
>1271	ExpressionStatement	 
>1272	AssignmentExpr	n = label_idxtbl [ label_img [ label_img_ptr1 - 1 ] - 1 ]
>1273	ArrayIndexing	label_idxtbl [ label_img [ label_img_ptr1 - 1 ] - 1 ]
>1274	AdditiveExpression	label_img [ label_img_ptr1 - 1 ] - 1
>1275	PrimaryExpression	1
>1276	ArrayIndexing	label_img [ label_img_ptr1 - 1 ]
>1277	AdditiveExpression	label_img_ptr1 - 1
>1278	PrimaryExpression	1
>1279	Identifier	label_img_ptr1
>1280	Identifier	label_img
>1281	Identifier	label_idxtbl
>1282	Identifier	n
>1283	ExpressionStatement	 
>1284	AssignmentExpr	label_pixel = label_idxtbl [ label_img [ label_img_ptr1 + 1 ] - 1 ]
>1285	ArrayIndexing	label_idxtbl [ label_img [ label_img_ptr1 + 1 ] - 1 ]
>1286	AdditiveExpression	label_img [ label_img_ptr1 + 1 ] - 1
>1287	PrimaryExpression	1
>1288	ArrayIndexing	label_img [ label_img_ptr1 + 1 ]
>1289	AdditiveExpression	label_img_ptr1 + 1
>1290	PrimaryExpression	1
>1291	Identifier	label_img_ptr1
>1292	Identifier	label_img
>1293	Identifier	label_idxtbl
>1294	Identifier	label_pixel
>1295	Condition	 
>1296	RelationalExpression	label_img [ label_img_ptr1 - 1 ] > 0
>1297	PrimaryExpression	0
>1298	ArrayIndexing	label_img [ label_img_ptr1 - 1 ]
>1299	AdditiveExpression	label_img_ptr1 - 1
>1300	PrimaryExpression	1
>1301	Identifier	label_img_ptr1
>1302	Identifier	label_img
>1303	Condition	 
>1304	RelationalExpression	label_img [ label_img_ptr1 + 1 ] > 0
>1305	PrimaryExpression	0
>1306	ArrayIndexing	label_img [ label_img_ptr1 + 1 ]
>1307	AdditiveExpression	label_img_ptr1 + 1
>1308	PrimaryExpression	1
>1309	Identifier	label_img_ptr1
>1310	Identifier	label_img
>1311	CompoundStatement	 
>1312	ExpressionStatement	 
>1313	AssignmentExpr	work2_pt [ 6 ] = j
>1314	Identifier	j
>1315	ArrayIndexing	work2_pt [ 6 ]
>1316	PrimaryExpression	6
>1317	Identifier	work2_pt
>1318	ExpressionStatement	 
>1319	AssignmentExpr	work2_pt [ 2 ] += j
>1320	Identifier	j
>1321	ArrayIndexing	work2_pt [ 2 ]
>1322	PrimaryExpression	2
>1323	Identifier	work2_pt
>1324	ExpressionStatement	 
>1325	AssignmentExpr	work2_pt [ 1 ] += i
>1326	Identifier	i
>1327	ArrayIndexing	work2_pt [ 1 ]
>1328	PrimaryExpression	1
>1329	Identifier	work2_pt
>1330	ExpressionStatement	 
>1331	IncDecOp	work2_pt [ 0 ] ++
>1332	IncDec	++
>1333	ArrayIndexing	work2_pt [ 0 ]
>1334	PrimaryExpression	0
>1335	Identifier	work2_pt
>1336	ExpressionStatement	 
>1337	AssignmentExpr	work2_pt = work2 [ label_pixel - 1 ]
>1338	ArrayIndexing	work2 [ label_pixel - 1 ]
>1339	AdditiveExpression	label_pixel - 1
>1340	PrimaryExpression	1
>1341	Identifier	label_pixel
>1342	Identifier	work2
>1343	Identifier	work2_pt
>1344	ExpressionStatement	 
>1345	AssignmentExpr	label_pixel = label_img [ label_img_ptr1 ]
>1346	ArrayIndexing	label_img [ label_img_ptr1 ]
>1347	Identifier	label_img_ptr1
>1348	Identifier	label_img
>1349	Identifier	label_pixel
>1350	Condition	 
>1351	RelationalExpression	label_img [ label_img_ptr1 ] > 0
>1352	PrimaryExpression	0
>1353	ArrayIndexing	label_img [ label_img_ptr1 ]
>1354	Identifier	label_img_ptr1
>1355	Identifier	label_img
>1356	CompoundStatement	 
>1357	ExpressionStatement	 
>1358	AssignmentExpr	label_img [ pixel_index ] = 0
>1359	PrimaryExpression	0
>1360	ArrayIndexing	label_img [ pixel_index ]
>1361	Identifier	pixel_index
>1362	Identifier	label_img
>1363	Condition	 
>1364	EqualityExpression	raster_buf [ pixel_index ] != 0
>1365	PrimaryExpression	0
>1366	ArrayIndexing	raster_buf [ pixel_index ]
>1367	Identifier	pixel_index
>1368	Identifier	raster_buf
>1369	Expression	 
>1370	Expression	pixel_index ++ , label_img_ptr1 ++
>1371	IncDecOp	label_img_ptr1 ++
>1372	IncDec	++
>1373	Identifier	label_img_ptr1
>1374	IncDecOp	pixel_index ++
>1375	IncDec	++
>1376	Identifier	pixel_index
>1377	IncDecOp	i ++
>1378	IncDec	++
>1379	Identifier	i
>1380	Condition	 
>1381	RelationalExpression	i < lxsize - 1
>1382	AdditiveExpression	lxsize - 1
>1383	PrimaryExpression	1
>1384	Identifier	lxsize
>1385	Identifier	i
>1386	ForInit	 
>1387	AssignmentExpr	i = 1
>1388	PrimaryExpression	1
>1389	Identifier	i
>1390	ExpressionStatement	 
>1391	AssignmentExpr	label_img_ptr1 = pixel_index - lxsize
>1392	AdditiveExpression	pixel_index - lxsize
>1393	Identifier	lxsize
>1394	Identifier	pixel_index
>1395	Identifier	label_img_ptr1
>1396	ExpressionStatement	 
>1397	AssignmentExpr	pixel_index = j * lxsize + 1
>1398	AdditiveExpression	j * lxsize + 1
>1399	PrimaryExpression	1
>1400	MultiplicativeExpression	j * lxsize
>1401	Identifier	lxsize
>1402	Identifier	j
>1403	Identifier	pixel_index
>1404	IncDecOp	 
>1405	IncDec	++
>1406	Identifier	j
>1407	Condition	 
>1408	RelationalExpression	j < lysize - 1
>1409	AdditiveExpression	lysize - 1
>1410	PrimaryExpression	1
>1411	Identifier	lysize
>1412	Identifier	j
>1413	ForInit	 
>1414	AssignmentExpr	j = 1
>1415	PrimaryExpression	1
>1416	Identifier	j
>1417	IdentifierDeclStatement	 
>1418	IdentifierDecl	* * work2 = this -> work_holder -> work2
>1419	AssignmentExpr	* * work2 = this -> work_holder -> work2
>1420	PtrMemberAccess	this -> work_holder -> work2
>1421	Identifier	work2
>1422	PtrMemberAccess	this -> work_holder
>1423	Identifier	work_holder
>1424	Identifier	this
>1425	Identifier	work2
>1426	Identifier	work2
>1427	IdentifierDeclType	int * *
>1428	IdentifierDeclStatement	 
>1429	IdentifierDecl	pixel_index
>1430	Identifier	pixel_index
>1431	IdentifierDeclType	int
>1432	IdentifierDeclStatement	 
>1433	IdentifierDecl	wk_max = 0
>1434	AssignmentExpr	wk_max = 0
>1435	PrimaryExpression	0
>1436	Identifier	wk_max
>1437	Identifier	wk_max
>1438	IdentifierDeclType	int
>1439	IdentifierDeclStatement	 
>1440	IdentifierDecl	* work2_pt
>1441	Identifier	work2_pt
>1442	IdentifierDeclType	int *
>1443	IdentifierDeclStatement	 
>1444	IdentifierDecl	* raster_buf = ( const int * ) i_raster . getBufferReader ( ) -> getBuffer ( )
>1445	AssignmentExpr	* raster_buf = ( const int * ) i_raster . getBufferReader ( ) -> getBuffer ( )
>1446	CastExpression	( const int * ) i_raster . getBufferReader ( ) -> getBuffer ( )
>1447	CallExpression	i_raster . getBufferReader ( ) -> getBuffer ( )
>1448	ArgumentList	 
>1449	Callee	i_raster . getBufferReader ( ) -> getBuffer
>1450	PtrMemberAccess	i_raster . getBufferReader ( ) -> getBuffer
>1451	Identifier	getBuffer
>1452	CallExpression	i_raster . getBufferReader ( )
>1453	ArgumentList	 
>1454	Callee	i_raster . getBufferReader
>1455	MemberAccess	i_raster . getBufferReader
>1456	Identifier	getBufferReader
>1457	Identifier	i_raster
>1458	CastTarget	const int *
>1459	Identifier	raster_buf
>1460	Identifier	raster_buf
>1461	IdentifierDeclType	const int *
>1462	IdentifierDeclStatement	 
>1463	IdentifierDecl	* label_idxtbl = this -> _out_image -> getIndexArray ( ) -> item
>1464	AssignmentExpr	* label_idxtbl = this -> _out_image -> getIndexArray ( ) -> item
>1465	PtrMemberAccess	this -> _out_image -> getIndexArray ( ) -> item
>1466	Identifier	item
>1467	CallExpression	this -> _out_image -> getIndexArray ( )
>1468	ArgumentList	 
>1469	Callee	this -> _out_image -> getIndexArray
>1470	PtrMemberAccess	this -> _out_image -> getIndexArray
>1471	Identifier	getIndexArray
>1472	PtrMemberAccess	this -> _out_image
>1473	Identifier	_out_image
>1474	Identifier	this
>1475	Identifier	label_idxtbl
>1476	Identifier	label_idxtbl
>1477	IdentifierDeclType	int *
>1478	ExpressionStatement	 
>1479	CallExpression	this -> _out_image -> reset ( true )
>1480	ArgumentList	true
>1481	Argument	true
>1482	Identifier	true
>1483	Callee	this -> _out_image -> reset
>1484	PtrMemberAccess	this -> _out_image -> reset
>1485	Identifier	reset
>1486	PtrMemberAccess	this -> _out_image
>1487	Identifier	_out_image
>1488	Identifier	this
>1489	IdentifierDeclStatement	 
>1490	IdentifierDecl	* label_img = ( int * ) this -> _out_image -> getBufferReader ( ) -> getBuffer ( )
>1491	AssignmentExpr	* label_img = ( int * ) this -> _out_image -> getBufferReader ( ) -> getBuffer ( )
>1492	CastExpression	( int * ) this -> _out_image -> getBufferReader ( ) -> getBuffer ( )
>1493	CallExpression	this -> _out_image -> getBufferReader ( ) -> getBuffer ( )
>1494	ArgumentList	 
>1495	Callee	this -> _out_image -> getBufferReader ( ) -> getBuffer
>1496	PtrMemberAccess	this -> _out_image -> getBufferReader ( ) -> getBuffer
>1497	Identifier	getBuffer
>1498	CallExpression	this -> _out_image -> getBufferReader ( )
>1499	ArgumentList	 
>1500	Callee	this -> _out_image -> getBufferReader
>1501	PtrMemberAccess	this -> _out_image -> getBufferReader
>1502	Identifier	getBufferReader
>1503	PtrMemberAccess	this -> _out_image
>1504	Identifier	_out_image
>1505	Identifier	this
>1506	CastTarget	int *
>1507	Identifier	label_img
>1508	Identifier	label_img
>1509	IdentifierDeclType	int *
>1510	IdentifierDeclStatement	 
>1511	IdentifierDecl	lysize = in_size -> h
>1512	AssignmentExpr	lysize = in_size -> h
>1513	PtrMemberAccess	in_size -> h
>1514	Identifier	h
>1515	Identifier	in_size
>1516	Identifier	lysize
>1517	Identifier	lysize
>1518	IdentifierDeclType	const int
>1519	IdentifierDeclStatement	 
>1520	IdentifierDecl	lxsize = in_size -> w
>1521	AssignmentExpr	lxsize = in_size -> w
>1522	PtrMemberAccess	in_size -> w
>1523	Identifier	w
>1524	Identifier	in_size
>1525	Identifier	lxsize
>1526	Identifier	lxsize
>1527	IdentifierDeclType	const int
>1528	ExpressionStatement	 
>1529	CallExpression	NyAR_ASSERT ( TNyARIntSize 
>1530	ArgumentList	TNyARIntSize 
>1531	Argument	TNyARIntSize 
>1532	CallExpression	TNyARIntSize 
>1533	ArgumentList	this -> _out_image -> getSize ( )
>1534	Argument	in_size
>1535	Identifier	in_size
>1536	Argument	this -> _out_image -> getSize ( )
>1537	CallExpression	this -> _out_image -> getSize ( )
>1538	ArgumentList	 
>1539	Callee	this -> _out_image -> getSize
>1540	PtrMemberAccess	this -> _out_image -> getSize
>1541	Identifier	getSize
>1542	PtrMemberAccess	this -> _out_image
>1543	Identifier	_out_image
>1544	Identifier	this
>1545	Callee	TNyARIntSize 
>1546	Identifier	TNyARIntSize 
>1547	Callee	NyAR_ASSERT
>1548	Identifier	NyAR_ASSERT
>1549	IdentifierDeclStatement	 
>1550	IdentifierDecl	* in_size = i_raster . getSize ( )
>1551	AssignmentExpr	* in_size = i_raster . getSize ( )
>1552	CallExpression	i_raster . getSize ( )
>1553	ArgumentList	 
>1554	Callee	i_raster . getSize
>1555	MemberAccess	i_raster . getSize
>1556	Identifier	getSize
>1557	Identifier	i_raster
>1558	Identifier	in_size
>1559	Identifier	in_size
>1560	IdentifierDeclType	const TNyARIntSize *
>1561	IdentifierDeclStatement	 
>1562	IdentifierDecl	k
>1563	Identifier	k
>1564	IdentifierDeclType	int
>1565	IdentifierDecl	n
>1566	Identifier	n
>1567	IdentifierDeclType	int
>1568	IdentifierDeclStatement	 
>1569	IdentifierDecl	j
>1570	Identifier	j
>1571	IdentifierDeclType	int
>1572	IdentifierDecl	i
>1573	Identifier	i
>1574	IdentifierDeclType	int
>1575	IdentifierDeclStatement	 
>1576	IdentifierDecl	label_pixel
>1577	Identifier	label_pixel
>1578	IdentifierDeclType	int
>1579	IdentifierDecl	label_img_ptr1
>1580	Identifier	label_img_ptr1
>1581	IdentifierDeclType	int
<10=15,11
<11=12
<12=14,13
<15=39,38,37,36,35,34,33,32,31,30,29,23,17,16
<17=18
<18=20,19
<20=22,21
<23=24
<24=26,25
<26=28,27
<48=50,49
<50=61,52,51
<52=53
<53=59,54
<54=55
<55=56
<56=58,57
<59=60
<61=83,77,74,62
<62=63
<63=64
<64=72,65
<65=66
<66=67
<67=69,68
<69=71,70
<72=73
<74=76,75
<77=78
<78=82,79
<79=81,80
<83=84
<84=85
<85=90,89,86
<86=88,87
<102=108,107,103
<103=104
<104=106,105
<108=180,166,157,143,116,110,109
<110=111
<111=113,112
<113=115,114
<116=133,129,126,117
<117=118
<118=119
<119=121,120
<121=123,122
<123=125,124
<126=128,127
<129=130
<130=132,131
<133=134
<134=135
<135=142,141,136
<136=140,137
<137=139,138
<143=151,144
<144=145
<145=146
<146=150,147
<147=149,148
<151=152
<152=156,153
<153=155,154
<157=158
<158=165,164,159
<159=163,160
<160=162,161
<166=174,167
<167=173,168
<168=169
<169=171,170
<171=172
<174=175
<175=179,176
<176=178,177
<180=183,181
<181=182
<183=184
<184=186,185
<186=188,187
<204=206,205
<206=208,207
<208=209
<209=211,210
<211=213,212
<221=223,222
<223=225,224
<225=226
<226=232,227
<227=228
<228=229
<229=231,230
<232=233
<240=246,245,241
<241=242
<242=244,243
<246=364,358,339,324,291,248,247
<248=283,277,274,249
<249=264,250
<250=251
<251=253,252
<253=263,254
<254=256,255
<256=260,257
<257=259,258
<260=262,261
<264=265
<265=267,266
<267=273,268
<268=272,269
<269=271,270
<274=276,275
<277=278
<278=282,279
<279=281,280
<283=284
<284=285
<285=290,289,286
<286=288,287
<291=316,310,307,292
<292=301,293
<293=294
<294=296,295
<296=300,297
<297=299,298
<301=302
<302=304,303
<304=306,305
<307=309,308
<310=311
<311=315,312
<312=314,313
<316=317
<317=318
<318=323,322,319
<319=321,320
<324=325
<325=338,337,326
<326=336,327
<327=331,328
<328=330,329
<331=333,332
<333=335,334
<339=340
<340=357,356,341
<341=355,342
<342=354,343
<343=345,344
<345=346
<346=348,347
<348=350,349
<350=351
<351=353,352
<358=359
<359=361,360
<361=363,362
<364=365
<365=375,374,366
<366=373,367
<367=369,368
<369=370
<370=372,371
<401=404,403,402
<404=405
<405=406
<406=408,407
<415=421,420,416
<416=417
<417=419,418
<421=1575,1568,1561,1549,1528,1519,1510,1489,1478,1462,1443,1439,1432,1428,1417,758,751,714,710,689,675,666,662,648,583,458,423,422
<423=454,450,447,424
<424=441,433,425
<425=426
<426=430,427
<427=429,428
<430=432,431
<433=434
<434=438,435
<435=437,436
<438=440,439
<441=442
<442=446,443
<443=445,444
<447=449,448
<450=451
<451=453,452
<454=455
<455=457,456
<458=579,575,572,459
<459=562,556,548,540,532,514,496,478,460
<460=470,461
<461=462
<462=463
<463=467,464
<464=466,465
<467=469,468
<470=471
<471=475,472
<472=474,473
<475=477,476
<478=488,479
<479=480
<480=481
<481=485,482
<482=484,483
<485=487,486
<488=489
<489=493,490
<490=492,491
<493=495,494
<496=506,497
<497=498
<498=499
<499=503,500
<500=502,501
<503=505,504
<506=507
<507=511,508
<508=510,509
<511=513,512
<514=524,515
<515=516
<516=517
<517=521,518
<518=520,519
<521=523,522
<524=525
<525=529,526
<526=528,527
<529=531,530
<532=533
<533=537,534
<534=536,535
<537=539,538
<540=541
<541=545,542
<542=544,543
<545=547,546
<548=549
<549=553,550
<550=552,551
<553=555,554
<556=557
<557=561,558
<558=560,559
<562=563
<563=571,564
<564=570,565
<565=567,566
<567=569,568
<572=574,573
<575=576
<576=578,577
<579=580
<580=582,581
<583=644,640,637,584
<584=631,623,617,607,601,595,585
<585=586
<586=592,587
<587=589,588
<589=591,590
<592=594,593
<595=596
<596=598,597
<598=600,599
<601=602
<602=604,603
<604=606,605
<607=608
<608=614,609
<609=611,610
<611=613,612
<614=616,615
<617=618
<618=620,619
<620=622,621
<623=624
<624=628,625
<625=627,626
<628=630,629
<631=632
<632=636,633
<633=635,634
<637=639,638
<640=641
<641=643,642
<644=645
<645=647,646
<648=649
<649=661,660,650
<650=659,651
<651=653,652
<653=655,654
<655=656
<656=658,657
<662=663
<663=665,664
<666=667
<667=671,668
<668=669
<669=670
<671=672
<672=674,673
<675=676
<676=688,687,677
<677=686,678
<678=680,679
<680=681
<681=683,682
<683=685,684
<689=706,690
<690=692,691
<692=693
<693=695,694
<695=696
<696=698,697
<698=700,699
<700=701
<701=703,702
<703=705,704
<706=707
<707=709,708
<710=711
<711=713,712
<714=747,743,740,715
<715=716
<716=717
<717=737,718
<718=729,726,719
<719=725,720
<720=722,721
<722=724,723
<726=728,727
<729=730
<730=734,731
<731=733,732
<734=736,735
<737=739,738
<740=742,741
<743=744
<744=746,745
<747=748
<748=750,749
<751=752
<752=757,756,753
<753=755,754
<758=1413,1407,1404,759
<759=1396,1390,760
<760=1386,1380,1369,761
<761=762
<762=1363,1356,763
<763=764
<764=771,765
<765=766
<766=768,767
<768=770,769
<771=1350,1311,772
<772=773
<773=1303,977,774
<774=775
<775=969,914,776
<776=777
<777=906,857,778
<778=779
<779=846,842,834,830,822,816,810,804,798,792,786,780
<780=781
<781=783,782
<783=785,784
<786=787
<787=789,788
<789=791,790
<792=793
<793=795,794
<795=797,796
<798=799
<799=801,800
<801=803,802
<804=805
<805=807,806
<807=809,808
<810=811
<811=813,812
<813=815,814
<816=817
<817=819,818
<819=821,820
<822=823
<823=829,824
<824=828,825
<825=827,826
<830=831
<831=833,832
<834=835
<835=837,836
<837=841,838
<838=840,839
<842=843
<843=845,844
<846=847
<847=851,848
<848=849
<849=850
<851=852
<852=854,853
<854=856,855
<857=898,890,884,878,872,858
<858=866,859
<859=860
<860=861
<861=863,862
<863=865,864
<866=867
<867=869,868
<869=871,870
<872=873
<873=875,874
<875=877,876
<878=879
<879=881,880
<881=883,882
<884=885
<885=887,886
<887=889,888
<890=891
<891=897,892
<892=896,893
<893=895,894
<898=899
<899=905,900
<900=904,901
<901=903,902
<906=907
<907=909,908
<909=913,910
<910=912,911
<914=961,953,947,941,935,921,915
<915=916
<916=918,917
<918=920,919
<921=929,922
<922=923
<923=924
<924=926,925
<926=928,927
<929=930
<930=932,931
<932=934,933
<935=936
<936=938,937
<938=940,939
<941=942
<942=944,943
<944=946,945
<947=948
<948=950,949
<950=952,951
<953=954
<954=960,955
<955=959,956
<956=958,957
<961=962
<962=968,963
<963=967,964
<964=966,965
<969=970
<970=972,971
<972=976,973
<973=975,974
<977=978
<978=1295,1167,979
<979=980
<980=1159,1037,981
<981=982
<982=1029,1021,1015,1009,1003,989,983
<983=984
<984=986,985
<986=988,987
<989=997,990
<990=991
<991=992
<992=994,993
<994=996,995
<997=998
<998=1000,999
<1000=1002,1001
<1003=1004
<1004=1006,1005
<1006=1008,1007
<1009=1010
<1010=1012,1011
<1012=1014,1013
<1015=1016
<1016=1018,1017
<1018=1020,1019
<1021=1022
<1022=1028,1023
<1023=1027,1024
<1024=1026,1025
<1029=1030
<1030=1036,1031
<1031=1035,1032
<1032=1034,1033
<1037=1147,1135,1064,1056,1050,1044,1038
<1038=1039
<1039=1041,1040
<1041=1043,1042
<1044=1045
<1045=1047,1046
<1047=1049,1048
<1050=1051
<1051=1053,1052
<1053=1055,1054
<1056=1057
<1057=1063,1058
<1058=1062,1059
<1059=1061,1060
<1064=1131,1099,1065
<1065=1066
<1066=1095,1067
<1067=1068
<1068=1091,1087,1084,1069
<1069=1070
<1070=1078,1071
<1071=1072
<1072=1073
<1073=1075,1074
<1075=1077,1076
<1078=1079
<1079=1081,1080
<1081=1083,1082
<1084=1086,1085
<1087=1088
<1088=1090,1089
<1091=1092
<1092=1094,1093
<1095=1096
<1096=1098,1097
<1099=1104,1100
<1100=1101
<1101=1103,1102
<1104=1127,1123,1120,1105
<1105=1106
<1106=1114,1107
<1107=1108
<1108=1109
<1109=1111,1110
<1111=1113,1112
<1114=1115
<1115=1117,1116
<1117=1119,1118
<1120=1122,1121
<1123=1124
<1124=1126,1125
<1127=1128
<1128=1130,1129
<1131=1132
<1132=1134,1133
<1135=1136
<1136=1146,1137
<1137=1145,1138
<1138=1140,1139
<1140=1144,1141
<1141=1143,1142
<1147=1148
<1148=1158,1149
<1149=1157,1150
<1150=1152,1151
<1152=1156,1153
<1153=1155,1154
<1159=1160
<1160=1162,1161
<1162=1166,1163
<1163=1165,1164
<1167=1283,1271,1200,1192,1186,1180,1174,1168
<1168=1169
<1169=1171,1170
<1171=1173,1172
<1174=1175
<1175=1177,1176
<1177=1179,1178
<1180=1181
<1181=1183,1182
<1183=1185,1184
<1186=1187
<1187=1189,1188
<1189=1191,1190
<1192=1193
<1193=1199,1194
<1194=1198,1195
<1195=1197,1196
<1200=1267,1235,1201
<1201=1202
<1202=1231,1203
<1203=1204
<1204=1227,1223,1220,1205
<1205=1206
<1206=1214,1207
<1207=1208
<1208=1209
<1209=1211,1210
<1211=1213,1212
<1214=1215
<1215=1217,1216
<1217=1219,1218
<1220=1222,1221
<1223=1224
<1224=1226,1225
<1227=1228
<1228=1230,1229
<1231=1232
<1232=1234,1233
<1235=1240,1236
<1236=1237
<1237=1239,1238
<1240=1263,1259,1256,1241
<1241=1242
<1242=1250,1243
<1243=1244
<1244=1245
<1245=1247,1246
<1247=1249,1248
<1250=1251
<1251=1253,1252
<1253=1255,1254
<1256=1258,1257
<1259=1260
<1260=1262,1261
<1263=1264
<1264=1266,1265
<1267=1268
<1268=1270,1269
<1271=1272
<1272=1282,1273
<1273=1281,1274
<1274=1276,1275
<1276=1280,1277
<1277=1279,1278
<1283=1284
<1284=1294,1285
<1285=1293,1286
<1286=1288,1287
<1288=1292,1289
<1289=1291,1290
<1295=1296
<1296=1298,1297
<1298=1302,1299
<1299=1301,1300
<1303=1304
<1304=1306,1305
<1306=1310,1307
<1307=1309,1308
<1311=1344,1336,1330,1324,1318,1312
<1312=1313
<1313=1315,1314
<1315=1317,1316
<1318=1319
<1319=1321,1320
<1321=1323,1322
<1324=1325
<1325=1327,1326
<1327=1329,1328
<1330=1331
<1331=1333,1332
<1333=1335,1334
<1336=1337
<1337=1343,1338
<1338=1342,1339
<1339=1341,1340
<1344=1345
<1345=1349,1346
<1346=1348,1347
<1350=1351
<1351=1353,1352
<1353=1355,1354
<1356=1357
<1357=1358
<1358=1360,1359
<1360=1362,1361
<1363=1364
<1364=1366,1365
<1366=1368,1367
<1369=1370,1377
<1370=1374,1371
<1371=1373,1372
<1374=1376,1375
<1377=1379,1378
<1380=1381
<1381=1385,1382
<1382=1384,1383
<1386=1387
<1387=1389,1388
<1390=1391
<1391=1395,1392
<1392=1394,1393
<1396=1397
<1397=1403,1398
<1398=1400,1399
<1400=1402,1401
<1404=1406,1405
<1407=1408
<1408=1412,1409
<1409=1411,1410
<1413=1414
<1414=1416,1415
<1417=1418
<1418=1427,1426,1419
<1419=1425,1420
<1420=1422,1421
<1422=1424,1423
<1428=1429
<1429=1431,1430
<1432=1433
<1433=1438,1437,1434
<1434=1436,1435
<1439=1440
<1440=1442,1441
<1443=1444
<1444=1461,1460,1445
<1445=1459,1446
<1446=1458,1447
<1447=1449,1448
<1449=1450
<1450=1452,1451
<1452=1454,1453
<1454=1455
<1455=1457,1456
<1462=1463
<1463=1477,1476,1464
<1464=1475,1465
<1465=1467,1466
<1467=1469,1468
<1469=1470
<1470=1472,1471
<1472=1474,1473
<1478=1479
<1479=1483,1480
<1480=1481
<1481=1482
<1483=1484
<1484=1486,1485
<1486=1488,1487
<1489=1490
<1490=1509,1508,1491
<1491=1507,1492
<1492=1506,1493
<1493=1495,1494
<1495=1496
<1496=1498,1497
<1498=1500,1499
<1500=1501
<1501=1503,1502
<1503=1505,1504
<1510=1511
<1511=1518,1517,1512
<1512=1516,1513
<1513=1515,1514
<1519=1520
<1520=1527,1526,1521
<1521=1525,1522
<1522=1524,1523
<1528=1529
<1529=1547,1530
<1530=1531
<1531=1532
<1532=1545,1533
<1533=1536,1534
<1534=1535
<1536=1537
<1537=1539,1538
<1539=1540
<1540=1542,1541
<1542=1544,1543
<1545=1546
<1547=1548
<1549=1550
<1550=1560,1559,1551
<1551=1558,1552
<1552=1554,1553
<1554=1555
<1555=1557,1556
<1561=1565,1562
<1562=1564,1563
<1565=1567,1566
<1568=1572,1569
<1569=1571,1570
<1572=1574,1573
<1575=1579,1576
<1576=1578,1577
<1579=1581,1580
