>3	FunctionDef	DownloadDialog 
>4	ParameterList	const std 
>5	Parameter	 
>6	Identifier	id
>7	ParameterType	const std 
>8	CompoundStatement	 
>13	FunctionDef	DownloadDialog 
>14	ParameterList	TiXmlElement * node
>15	Parameter	 
>16	Identifier	node
>17	ParameterType	TiXmlElement *
>18	ReturnType	void
>19	CompoundStatement	 
>20	ExpressionStatement	 
>21	Statement	 
>22	Statement	 
>23	Statement	 
>24	Statement	 
>25	Statement	 
>26	Statement	 
>27	Statement	 
>28	Statement	 
>29	Statement	 
>30	Statement	 
>31	Statement	 
>32	Statement	 
>33	Statement	 
>34	Statement	 
>35	Statement	 
>36	Statement	 
>37	Statement	 
>38	Statement	 
>39	IfStatement	if ( downloadfiles . empty ( ) )
>40	CompoundStatement	 
>41	ExpressionStatement	 
>42	Statement	 
>43	Statement	 
>44	Statement	 
>45	Statement	 
>46	Statement	 
>47	Statement	 
>48	Statement	 
>49	Statement	 
>50	Statement	 
>51	Condition	 
>52	CallExpression	downloadfiles . empty ( )
>53	ArgumentList	 
>54	Callee	downloadfiles . empty
>55	MemberAccess	downloadfiles . empty
>56	Identifier	empty
>57	Identifier	downloadfiles
>58	WhileStatement	while ( ( child = node -> IterateChildren ( child ) ) != NULL )
>59	CompoundStatement	 
>60	ExpressionStatement	 
>61	CallExpression	downloadfiles . push_back ( downloadfile )
>62	ArgumentList	downloadfile
>63	Argument	downloadfile
>64	Identifier	downloadfile
>65	Callee	downloadfiles . push_back
>66	MemberAccess	downloadfiles . push_back
>67	Identifier	push_back
>68	Identifier	downloadfiles
>69	ExpressionStatement	 
>70	CallExpression	downloadfile -> Load ( node_element )
>71	ArgumentList	node_element
>72	Argument	node_element
>73	Identifier	node_element
>74	Callee	downloadfile -> Load
>75	PtrMemberAccess	downloadfile -> Load
>76	Identifier	Load
>77	Identifier	downloadfile
>78	IdentifierDeclStatement	 
>79	IdentifierDecl	downloadfile ( new DownloadFile ( ) )
>80	UnaryExpression	new DownloadFile ( )
>81	Identifier	downloadfile
>82	IdentifierDeclType	auto_any < DownloadFile * , close_delete >
>83	IfStatement	if ( node_element == NULL )
>84	ContinueStatement	 
>85	Condition	 
>86	EqualityExpression	node_element == NULL
>87	Identifier	NULL
>88	Identifier	node_element
>89	IdentifierDeclStatement	 
>90	IdentifierDecl	* node_element = child -> ToElement ( )
>91	AssignmentExpr	* node_element = child -> ToElement ( )
>92	CallExpression	child -> ToElement ( )
>93	ArgumentList	 
>94	Callee	child -> ToElement
>95	PtrMemberAccess	child -> ToElement
>96	Identifier	ToElement
>97	Identifier	child
>98	Identifier	node_element
>99	Identifier	node_element
>100	IdentifierDeclType	TiXmlElement *
>101	Condition	 
>102	EqualityExpression	( child = node -> IterateChildren ( child ) ) != NULL
>103	Identifier	NULL
>104	AssignmentExpr	child = node -> IterateChildren ( child )
>105	CallExpression	node -> IterateChildren ( child )
>106	ArgumentList	child
>107	Argument	child
>108	Identifier	child
>109	Callee	node -> IterateChildren
>110	PtrMemberAccess	node -> IterateChildren
>111	Identifier	IterateChildren
>112	Identifier	node
>113	Identifier	child
>114	IdentifierDeclStatement	 
>115	IdentifierDecl	* child = NULL
>116	AssignmentExpr	* child = NULL
>117	Identifier	NULL
>118	Identifier	NULL
>119	Identifier	child
>120	IdentifierDeclType	TiXmlNode *
>121	ExpressionStatement	 
>122	AssignmentExpr	auto_start = DVLib 
>123	CallExpression	DVLib 
>124	ArgumentList	DVLib 
>125	Argument	false
>126	Identifier	false
>127	Argument	DVLib 
>128	CallExpression	DVLib 
>129	ArgumentList	node -> Attribute ( \"autostartdownload\" )
>130	Argument	node -> Attribute ( \"autostartdownload\" )
>131	CallExpression	node -> Attribute ( \"autostartdownload\" )
>132	ArgumentList	\"autostartdownload\"
>133	Argument	\"autostartdownload\"
>134	PrimaryExpression	\"autostartdownload\"
>135	Callee	node -> Attribute
>136	PtrMemberAccess	node -> Attribute
>137	Identifier	Attribute
>138	Identifier	node
>139	Callee	DVLib 
>140	Identifier	DVLib 
>141	Callee	DVLib 
>142	Identifier	DVLib 
>143	Identifier	auto_start
>144	ExpressionStatement	 
>145	AssignmentExpr	cancel_caption = node -> Attribute ( \"buttoncancel_caption\" )
>146	CallExpression	node -> Attribute ( \"buttoncancel_caption\" )
>147	ArgumentList	\"buttoncancel_caption\"
>148	Argument	\"buttoncancel_caption\"
>149	PrimaryExpression	\"buttoncancel_caption\"
>150	Callee	node -> Attribute
>151	PtrMemberAccess	node -> Attribute
>152	Identifier	Attribute
>153	Identifier	node
>154	Identifier	cancel_caption
>155	ExpressionStatement	 
>156	AssignmentExpr	start_caption = node -> Attribute ( \"buttonstart_caption\" )
>157	CallExpression	node -> Attribute ( \"buttonstart_caption\" )
>158	ArgumentList	\"buttonstart_caption\"
>159	Argument	\"buttonstart_caption\"
>160	PrimaryExpression	\"buttonstart_caption\"
>161	Callee	node -> Attribute
>162	PtrMemberAccess	node -> Attribute
>163	Identifier	Attribute
>164	Identifier	node
>165	Identifier	start_caption
>166	ExpressionStatement	 
>167	AssignmentExpr	sendingrequest_message = node -> Attribute ( \"dialog_message_sendingrequest\" )
>168	CallExpression	node -> Attribute ( \"dialog_message_sendingrequest\" )
>169	ArgumentList	\"dialog_message_sendingrequest\"
>170	Argument	\"dialog_message_sendingrequest\"
>171	PrimaryExpression	\"dialog_message_sendingrequest\"
>172	Callee	node -> Attribute
>173	PtrMemberAccess	node -> Attribute
>174	Identifier	Attribute
>175	Identifier	node
>176	Identifier	sendingrequest_message
>177	ExpressionStatement	 
>178	AssignmentExpr	connecting_message = node -> Attribute ( \"dialog_message_connecting\" )
>179	CallExpression	node -> Attribute ( \"dialog_message_connecting\" )
>180	ArgumentList	\"dialog_message_connecting\"
>181	Argument	\"dialog_message_connecting\"
>182	PrimaryExpression	\"dialog_message_connecting\"
>183	Callee	node -> Attribute
>184	PtrMemberAccess	node -> Attribute
>185	Identifier	Attribute
>186	Identifier	node
>187	Identifier	connecting_message
>188	ExpressionStatement	 
>189	AssignmentExpr	copying_message = node -> Attribute ( \"dialog_message_copying\" )
>190	CallExpression	node -> Attribute ( \"dialog_message_copying\" )
>191	ArgumentList	\"dialog_message_copying\"
>192	Argument	\"dialog_message_copying\"
>193	PrimaryExpression	\"dialog_message_copying\"
>194	Callee	node -> Attribute
>195	PtrMemberAccess	node -> Attribute
>196	Identifier	Attribute
>197	Identifier	node
>198	Identifier	copying_message
>199	ExpressionStatement	 
>200	AssignmentExpr	downloading_message = node -> Attribute ( \"dialog_message_downloading\" )
>201	CallExpression	node -> Attribute ( \"dialog_message_downloading\" )
>202	ArgumentList	\"dialog_message_downloading\"
>203	Argument	\"dialog_message_downloading\"
>204	PrimaryExpression	\"dialog_message_downloading\"
>205	Callee	node -> Attribute
>206	PtrMemberAccess	node -> Attribute
>207	Identifier	Attribute
>208	Identifier	node
>209	Identifier	downloading_message
>210	ExpressionStatement	 
>211	AssignmentExpr	help_message = node -> Attribute ( \"dialog_message\" )
>212	CallExpression	node -> Attribute ( \"dialog_message\" )
>213	ArgumentList	\"dialog_message\"
>214	Argument	\"dialog_message\"
>215	PrimaryExpression	\"dialog_message\"
>216	Callee	node -> Attribute
>217	PtrMemberAccess	node -> Attribute
>218	Identifier	Attribute
>219	Identifier	node
>220	Identifier	help_message
>221	ExpressionStatement	 
>222	AssignmentExpr	caption = node -> Attribute ( \"dialog_caption\" )
>223	CallExpression	node -> Attribute ( \"dialog_caption\" )
>224	ArgumentList	\"dialog_caption\"
>225	Argument	\"dialog_caption\"
>226	PrimaryExpression	\"dialog_caption\"
>227	Callee	node -> Attribute
>228	PtrMemberAccess	node -> Attribute
>229	Identifier	Attribute
>230	Identifier	node
>231	Identifier	caption
>232	ExpressionStatement	 
>233	Statement	 
>234	Statement	 
>235	Statement	 
>236	Statement	 
>237	Statement	 
>238	Statement	 
>239	Statement	 
>240	Statement	 
>241	Statement	 
>242	Statement	 
>243	Statement	 
>244	Statement	 
>245	Statement	 
>246	Statement	 
>247	Statement	 
>248	Statement	 
>249	Statement	 
>250	Statement	 
>251	Statement	 
>252	Statement	 
>253	Statement	 
>254	Statement	 
>255	Statement	 
>256	Statement	 
>257	Statement	 
>258	Statement	 
>259	Statement	 
>260	Statement	 
>261	Statement	 
>262	Statement	 
>263	Statement	 
>264	Statement	 
>265	ExpressionStatement	 
>266	Statement	 
>267	Statement	 
>268	Statement	 
>269	Statement	 
>270	Statement	 
>271	Statement	 
>272	Statement	 
>273	Statement	 
>274	Statement	 
>302	FunctionDef	DownloadDialog 
>303	ParameterList	 
>304	ReturnType	int
>305	CompoundStatement	 
>306	ReturnStatement	 
>307	PrimaryExpression	0
>308	IfStatement	if ( IsRequired ( ) )
>309	CompoundStatement	 
>310	BlockStarter	 
>311	CompoundStatement	 
>312	ExpressionStatement	ex
>313	Identifier	ex
>314	Statement	throw
>315	IfStatement	if ( callback )
>316	CompoundStatement	 
>317	ExpressionStatement	callback -> DownloadError ( DVLib 
>318	CallExpression	callback -> DownloadError ( DVLib 
>319	ArgumentList	DVLib 
>320	Argument	DVLib 
>321	CallExpression	DVLib 
>322	ArgumentList	 
>323	Callee	DVLib 
>324	MemberAccess	DVLib 
>325	Identifier	c_str
>326	CallExpression	DVLib 
>327	ArgumentList	ex . what ( )
>328	Argument	ex . what ( )
>329	CallExpression	ex . what ( )
>330	ArgumentList	 
>331	Callee	ex . what
>332	MemberAccess	ex . what
>333	Identifier	what
>334	Identifier	ex
>335	Callee	DVLib 
>336	Identifier	DVLib 
>337	Callee	callback -> DownloadError
>338	PtrMemberAccess	callback -> DownloadError
>339	Identifier	DownloadError
>340	Identifier	callback
>341	Condition	callback
>342	Identifier	callback
>343	Identifier	ex
>344	BlockStarter	 
>345	CompoundStatement	 
>346	IfStatement	if ( callback )
>347	CompoundStatement	 
>348	ExpressionStatement	callback -> DownloadComplete ( )
>349	CallExpression	callback -> DownloadComplete ( )
>350	ArgumentList	 
>351	Callee	callback -> DownloadComplete
>352	PtrMemberAccess	callback -> DownloadComplete
>353	Identifier	DownloadComplete
>354	Identifier	callback
>355	Condition	callback
>356	Identifier	callback
>357	ForStatement	for ( size_t i = 0 ; i < downloadfiles . size ( ) ; i ++ )
>358	CompoundStatement	 
>359	ExpressionStatement	downloadfiles [ i ] -> Exec ( callback )
>360	CallExpression	downloadfiles [ i ] -> Exec ( callback )
>361	ArgumentList	callback
>362	Argument	callback
>363	Identifier	callback
>364	Callee	downloadfiles [ i ] -> Exec
>365	PtrMemberAccess	downloadfiles [ i ] -> Exec
>366	Identifier	Exec
>367	ArrayIndexing	downloadfiles [ i ]
>368	Identifier	i
>369	Identifier	downloadfiles
>370	IfStatement	if ( callback && callback -> IsDownloadCancelled ( ) )
>371	CompoundStatement	 
>372	ReturnStatement	return - 2 ;
>373	UnaryOp	- 2
>374	PrimaryExpression	2
>375	UnaryOperator	-
>376	Condition	callback && callback -> IsDownloadCancelled ( )
>377	AndExpression	callback && callback -> IsDownloadCancelled ( )
>378	CallExpression	callback -> IsDownloadCancelled ( )
>379	ArgumentList	 
>380	Callee	callback -> IsDownloadCancelled
>381	PtrMemberAccess	callback -> IsDownloadCancelled
>382	Identifier	IsDownloadCancelled
>383	Identifier	callback
>384	Identifier	callback
>385	IncDecOp	i ++
>386	IncDec	++
>387	Identifier	i
>388	Condition	i < downloadfiles . size ( )
>389	RelationalExpression	i < downloadfiles . size ( )
>390	CallExpression	downloadfiles . size ( )
>391	ArgumentList	 
>392	Callee	downloadfiles . size
>393	MemberAccess	downloadfiles . size
>394	Identifier	size
>395	Identifier	downloadfiles
>396	Identifier	i
>397	ForInit	size_t i = 0 ;
>398	IdentifierDeclStatement	size_t i = 0 ;
>399	IdentifierDecl	i = 0
>400	AssignmentExpr	i = 0
>401	PrimaryExpression	0
>402	Identifier	i
>403	Identifier	i
>404	IdentifierDeclType	size_t
>405	Condition	 
>406	CallExpression	IsRequired ( )
>407	ArgumentList	 
>408	Callee	IsRequired
>409	Identifier	IsRequired
>426	FunctionDef	DownloadDialog 
>427	ParameterList	 
>428	ReturnType	bool
>429	CompoundStatement	 
>430	ReturnStatement	 
>431	Identifier	false
>432	ForStatement	for ( size_t i = 0 ; i < downloadfiles . size ( ) ; i ++ )
>433	CompoundStatement	 
>434	IfStatement	if ( required )
>435	CompoundStatement	 
>436	ReturnStatement	 
>437	Identifier	true
>438	Condition	 
>439	Identifier	required
>440	ExpressionStatement	 
>441	Statement	 
>442	Statement	 
>443	Statement	 
>444	Statement	 
>445	Statement	 
>446	Statement	 
>447	Statement	 
>448	Statement	 
>449	Statement	 
>450	Statement	 
>451	Statement	 
>452	Statement	 
>453	Statement	 
>454	Statement	 
>455	Statement	 
>456	Statement	 
>457	Statement	 
>458	Statement	 
>459	Statement	 
>460	Statement	 
>461	Statement	 
>462	Statement	 
>463	Statement	 
>464	Statement	 
>465	Statement	 
>466	Statement	 
>467	Statement	 
>468	Statement	 
>469	Statement	 
>470	Statement	 
>471	Statement	 
>472	Statement	 
>473	Statement	 
>474	Statement	 
>475	Statement	 
>476	Statement	 
>477	Statement	 
>478	Statement	 
>479	IdentifierDeclStatement	 
>480	IdentifierDecl	destination = downloadfiles [ i ] -> GetDestinationFileName ( )
>481	AssignmentExpr	destination = downloadfiles [ i ] -> GetDestinationFileName ( )
>482	CallExpression	downloadfiles [ i ] -> GetDestinationFileName ( )
>483	ArgumentList	 
>484	Callee	downloadfiles [ i ] -> GetDestinationFileName
>485	PtrMemberAccess	downloadfiles [ i ] -> GetDestinationFileName
>486	Identifier	GetDestinationFileName
>487	ArrayIndexing	downloadfiles [ i ]
>488	Identifier	i
>489	Identifier	downloadfiles
>490	Identifier	destination
>491	Identifier	destination
>492	IdentifierDeclType	std 
>493	IdentifierDeclStatement	 
>494	IdentifierDecl	required = downloadfiles [ i ] -> IsCopyRequired ( )
>495	AssignmentExpr	required = downloadfiles [ i ] -> IsCopyRequired ( )
>496	CallExpression	downloadfiles [ i ] -> IsCopyRequired ( )
>497	ArgumentList	 
>498	Callee	downloadfiles [ i ] -> IsCopyRequired
>499	PtrMemberAccess	downloadfiles [ i ] -> IsCopyRequired
>500	Identifier	IsCopyRequired
>501	ArrayIndexing	downloadfiles [ i ]
>502	Identifier	i
>503	Identifier	downloadfiles
>504	Identifier	required
>505	Identifier	required
>506	IdentifierDeclType	bool
>507	IncDecOp	 
>508	IncDec	++
>509	Identifier	i
>510	Condition	 
>511	RelationalExpression	i < downloadfiles . size ( )
>512	CallExpression	downloadfiles . size ( )
>513	ArgumentList	 
>514	Callee	downloadfiles . size
>515	MemberAccess	downloadfiles . size
>516	Identifier	size
>517	Identifier	downloadfiles
>518	Identifier	i
>519	ForInit	 
>520	IdentifierDeclStatement	size_t i = 0 ;
>521	IdentifierDecl	i = 0
>522	AssignmentExpr	i = 0
>523	PrimaryExpression	0
>524	Identifier	i
>525	Identifier	i
>526	IdentifierDeclType	size_t
>543	FunctionDef	DownloadDialog 
>544	ParameterList	 
>545	ReturnType	bool
>546	CompoundStatement	 
>547	ReturnStatement	 
>548	Identifier	false
>549	ForStatement	for ( size_t i = 0 ; i < downloadfiles . size ( ) ; i ++ )
>550	CompoundStatement	 
>551	IfStatement	if ( required )
>552	CompoundStatement	 
>553	ReturnStatement	 
>554	Identifier	true
>555	Condition	 
>556	Identifier	required
>557	ExpressionStatement	 
>558	Statement	 
>559	Statement	 
>560	Statement	 
>561	Statement	 
>562	Statement	 
>563	Statement	 
>564	Statement	 
>565	Statement	 
>566	Statement	 
>567	Statement	 
>568	Statement	 
>569	Statement	 
>570	Statement	 
>571	Statement	 
>572	Statement	 
>573	Statement	 
>574	Statement	 
>575	Statement	 
>576	Statement	 
>577	Statement	 
>578	Statement	 
>579	Statement	 
>580	Statement	 
>581	Statement	 
>582	Statement	 
>583	Statement	 
>584	Statement	 
>585	Statement	 
>586	Statement	 
>587	Statement	 
>588	Statement	 
>589	Statement	 
>590	Statement	 
>591	Statement	 
>592	Statement	 
>593	Statement	 
>594	Statement	 
>595	Statement	 
>596	IdentifierDeclStatement	 
>597	IdentifierDecl	destination = downloadfiles [ i ] -> GetDestinationFileName ( )
>598	AssignmentExpr	destination = downloadfiles [ i ] -> GetDestinationFileName ( )
>599	CallExpression	downloadfiles [ i ] -> GetDestinationFileName ( )
>600	ArgumentList	 
>601	Callee	downloadfiles [ i ] -> GetDestinationFileName
>602	PtrMemberAccess	downloadfiles [ i ] -> GetDestinationFileName
>603	Identifier	GetDestinationFileName
>604	ArrayIndexing	downloadfiles [ i ]
>605	Identifier	i
>606	Identifier	downloadfiles
>607	Identifier	destination
>608	Identifier	destination
>609	IdentifierDeclType	std 
>610	IdentifierDeclStatement	 
>611	IdentifierDecl	required = downloadfiles [ i ] -> IsDownloadRequired ( )
>612	AssignmentExpr	required = downloadfiles [ i ] -> IsDownloadRequired ( )
>613	CallExpression	downloadfiles [ i ] -> IsDownloadRequired ( )
>614	ArgumentList	 
>615	Callee	downloadfiles [ i ] -> IsDownloadRequired
>616	PtrMemberAccess	downloadfiles [ i ] -> IsDownloadRequired
>617	Identifier	IsDownloadRequired
>618	ArrayIndexing	downloadfiles [ i ]
>619	Identifier	i
>620	Identifier	downloadfiles
>621	Identifier	required
>622	Identifier	required
>623	IdentifierDeclType	bool
>624	IncDecOp	 
>625	IncDec	++
>626	Identifier	i
>627	Condition	 
>628	RelationalExpression	i < downloadfiles . size ( )
>629	CallExpression	downloadfiles . size ( )
>630	ArgumentList	 
>631	Callee	downloadfiles . size
>632	MemberAccess	downloadfiles . size
>633	Identifier	size
>634	Identifier	downloadfiles
>635	Identifier	i
>636	ForInit	 
>637	IdentifierDeclStatement	size_t i = 0 ;
>638	IdentifierDecl	i = 0
>639	AssignmentExpr	i = 0
>640	PrimaryExpression	0
>641	Identifier	i
>642	Identifier	i
>643	IdentifierDeclType	size_t
>660	FunctionDef	DownloadDialog 
>661	ParameterList	int indent
>662	Parameter	 
>663	Identifier	indent
>664	ParameterType	int
>665	ReturnType	std 
>666	CompoundStatement	 
>667	ReturnStatement	 
>668	CallExpression	ss . str ( )
>669	ArgumentList	 
>670	Callee	ss . str
>671	MemberAccess	ss . str
>672	Identifier	str
>673	Identifier	ss
>674	ForStatement	for ( size_t i = 0 ; i < downloadfiles . size ( ) ; i ++ )
>675	CompoundStatement	 
>676	ExpressionStatement	 
>677	ShiftExpression	ss << downloadfiles [ i ] -> GetString ( indent + 1 ) << std 
>678	ShiftExpression	downloadfiles [ i ] -> GetString ( indent + 1 ) << std 
>679	Identifier	std 
>680	CallExpression	downloadfiles [ i ] -> GetString ( indent + 1 )
>681	ArgumentList	indent + 1
>682	Argument	indent + 1
>683	AdditiveExpression	indent + 1
>684	PrimaryExpression	1
>685	Identifier	indent
>686	Callee	downloadfiles [ i ] -> GetString
>687	PtrMemberAccess	downloadfiles [ i ] -> GetString
>688	Identifier	GetString
>689	ArrayIndexing	downloadfiles [ i ]
>690	Identifier	i
>691	Identifier	downloadfiles
>692	Identifier	ss
>693	IncDecOp	 
>694	IncDec	++
>695	Identifier	i
>696	Condition	 
>697	RelationalExpression	i < downloadfiles . size ( )
>698	CallExpression	downloadfiles . size ( )
>699	ArgumentList	 
>700	Callee	downloadfiles . size
>701	MemberAccess	downloadfiles . size
>702	Identifier	size
>703	Identifier	downloadfiles
>704	Identifier	i
>705	ForInit	 
>706	IdentifierDeclStatement	size_t i = 0 ;
>707	IdentifierDecl	i = 0
>708	AssignmentExpr	i = 0
>709	PrimaryExpression	0
>710	Identifier	i
>711	Identifier	i
>712	IdentifierDeclType	size_t
>713	IdentifierDeclStatement	 
>714	IdentifierDecl	ss
>715	Identifier	ss
>716	IdentifierDeclType	std 
>728	FunctionDef	DownloadDialog 
>729	ParameterList	 
>730	ReturnType	bool
>731	CompoundStatement	 
>732	ReturnStatement	 
>733	OrExpression	IsCopyRequired ( ) || IsDownloadRequired ( )
>734	CallExpression	IsDownloadRequired ( )
>735	ArgumentList	 
>736	Callee	IsDownloadRequired
>737	Identifier	IsDownloadRequired
>738	CallExpression	IsCopyRequired ( )
>739	ArgumentList	 
>740	Callee	IsCopyRequired
>741	Identifier	IsCopyRequired
<3=8,4
<4=5
<5=7,6
<13=19,18,14
<14=15
<15=17,16
<19=274,273,272,271,270,269,268,267,266,265,264,263,262,261,260,259,258,257,256,255,254,253,252,251,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,58,114,121,144,155,166,177,188,199,210,221,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250
<39=51,40
<40=50,49,48,47,46,45,44,43,42,41
<51=52
<52=54,53
<54=55
<55=57,56
<58=101,59
<59=89,83,78,69,60
<60=61
<61=65,62
<62=63
<63=64
<65=66
<66=68,67
<69=70
<70=74,71
<71=72
<72=73
<74=75
<75=77,76
<78=79
<79=82,81,80
<83=85,84
<85=86
<86=88,87
<89=90
<90=100,99,91
<91=98,92
<92=94,93
<94=95
<95=97,96
<101=102
<102=104,103
<104=113,105
<105=109,106
<106=107
<107=108
<109=110
<110=112,111
<114=115
<115=120,119,116
<116=118,117
<121=122
<122=143,123
<123=141,124
<124=127,125
<125=126
<127=128
<128=139,129
<129=130
<130=131
<131=135,132
<132=133
<133=134
<135=136
<136=138,137
<139=140
<141=142
<144=145
<145=154,146
<146=150,147
<147=148
<148=149
<150=151
<151=153,152
<155=156
<156=165,157
<157=161,158
<158=159
<159=160
<161=162
<162=164,163
<166=167
<167=176,168
<168=172,169
<169=170
<170=171
<172=173
<173=175,174
<177=178
<178=187,179
<179=183,180
<180=181
<181=182
<183=184
<184=186,185
<188=189
<189=198,190
<190=194,191
<191=192
<192=193
<194=195
<195=197,196
<199=200
<200=209,201
<201=205,202
<202=203
<203=204
<205=206
<206=208,207
<210=211
<211=220,212
<212=216,213
<213=214
<214=215
<216=217
<217=219,218
<221=222
<222=231,223
<223=227,224
<224=225
<225=226
<227=228
<228=230,229
<302=305,304,303
<305=308,306
<306=307
<308=405,309
<309=344,310
<310=343,311
<311=315,314,312
<312=313
<315=341,316
<316=317
<317=318
<318=337,319
<319=320
<320=321
<321=323,322
<323=324
<324=326,325
<326=335,327
<327=328
<328=329
<329=331,330
<331=332
<332=334,333
<335=336
<337=338
<338=340,339
<341=342
<344=345
<345=357,346
<346=355,347
<347=348
<348=349
<349=351,350
<351=352
<352=354,353
<355=356
<357=397,388,385,358
<358=370,359
<359=360
<360=364,361
<361=362
<362=363
<364=365
<365=367,366
<367=369,368
<370=376,371
<371=372
<372=373
<373=375,374
<376=377
<377=384,378
<378=380,379
<380=381
<381=383,382
<385=387,386
<388=389
<389=396,390
<390=392,391
<392=393
<393=395,394
<397=398
<398=399
<399=404,403,400
<400=402,401
<405=406
<406=408,407
<408=409
<426=429,428,427
<429=432,430
<430=431
<432=519,510,507,433
<433=493,479,478,477,476,475,474,473,472,471,470,469,468,467,466,465,464,463,462,461,460,459,458,457,456,455,454,453,452,451,450,449,448,447,446,445,444,443,442,441,440,434
<434=438,435
<435=436
<436=437
<438=439
<479=480
<480=492,491,481
<481=490,482
<482=484,483
<484=485
<485=487,486
<487=489,488
<493=494
<494=506,505,495
<495=504,496
<496=498,497
<498=499
<499=501,500
<501=503,502
<507=509,508
<510=511
<511=518,512
<512=514,513
<514=515
<515=517,516
<519=520
<520=521
<521=526,525,522
<522=524,523
<543=546,545,544
<546=549,547
<547=548
<549=636,627,624,550
<550=610,596,595,594,593,592,591,590,589,588,587,586,585,584,583,582,581,580,579,578,577,576,575,574,573,572,571,570,569,568,567,566,565,564,563,562,561,560,559,558,557,551
<551=555,552
<552=553
<553=554
<555=556
<596=597
<597=609,608,598
<598=607,599
<599=601,600
<601=602
<602=604,603
<604=606,605
<610=611
<611=623,622,612
<612=621,613
<613=615,614
<615=616
<616=618,617
<618=620,619
<624=626,625
<627=628
<628=635,629
<629=631,630
<631=632
<632=634,633
<636=637
<637=638
<638=643,642,639
<639=641,640
<660=666,665,661
<661=662
<662=664,663
<666=713,674,667
<667=668
<668=670,669
<670=671
<671=673,672
<674=705,696,693,675
<675=676
<676=677
<677=692,678
<678=680,679
<680=686,681
<681=682
<682=683
<683=685,684
<686=687
<687=689,688
<689=691,690
<693=695,694
<696=697
<697=704,698
<698=700,699
<700=701
<701=703,702
<705=706
<706=707
<707=712,711,708
<708=710,709
<713=714
<714=716,715
<728=731,730,729
<731=732
<732=733
<733=738,734
<734=736,735
<736=737
<738=740,739
<740=741
