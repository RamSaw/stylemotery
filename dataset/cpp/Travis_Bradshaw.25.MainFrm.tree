>41	FunctionDef	CMainFrame 
>42	ParameterList	UINT wParam , long lParam
>43	Parameter	 
>44	Identifier	lParam
>45	ParameterType	long
>46	Parameter	 
>47	Identifier	wParam
>48	ParameterType	UINT
>49	ReturnType	LRESULT
>50	CompoundStatement	 
>51	ReturnStatement	 
>52	PrimaryExpression	0
>53	IdentifierDeclStatement	 
>54	IdentifierDecl	n = wParam
>55	AssignmentExpr	n = wParam
>56	Identifier	wParam
>57	Identifier	wParam
>58	Identifier	n
>59	IdentifierDeclType	int
>66	FunctionDef	CMainFrame 
>67	ParameterList	UINT wParam , long lParam
>68	Parameter	 
>69	Identifier	lParam
>70	ParameterType	long
>71	Parameter	 
>72	Identifier	wParam
>73	ParameterType	UINT
>74	ReturnType	LRESULT
>75	CompoundStatement	 
>76	ReturnStatement	 
>77	PrimaryExpression	0
>83	FunctionDef	CMainFrame 
>84	ParameterList	UINT wParam , long lParam
>85	Parameter	 
>86	Identifier	lParam
>87	ParameterType	long
>88	Parameter	 
>89	Identifier	wParam
>90	ParameterType	UINT
>91	ReturnType	LRESULT
>92	CompoundStatement	 
>93	ReturnStatement	 
>94	PrimaryExpression	0
>95	ExpressionStatement	 
>96	CallExpression	DLLBuildDone ( )
>97	ArgumentList	 
>98	Callee	DLLBuildDone
>99	Identifier	DLLBuildDone
>105	FunctionDef	CMainFrame 
>106	ParameterList	 
>107	CompoundStatement	 
>108	ExpressionStatement	 
>109	AssignmentExpr	m_bCamPreview = true
>110	Identifier	true
>111	Identifier	m_bCamPreview
>112	ExpressionStatement	 
>113	AssignmentExpr	m_pActiveXY = NULL
>114	Identifier	NULL
>115	Identifier	m_pActiveXY
>116	ExpressionStatement	 
>117	AssignmentExpr	m_pXZWnd = NULL
>118	Identifier	NULL
>119	Identifier	m_pXZWnd
>120	ExpressionStatement	 
>121	AssignmentExpr	m_pYZWnd = NULL
>122	Identifier	NULL
>123	Identifier	m_pYZWnd
>124	ExpressionStatement	 
>125	AssignmentExpr	m_pEditWnd = NULL
>126	Identifier	NULL
>127	Identifier	m_pEditWnd
>128	ExpressionStatement	 
>129	AssignmentExpr	m_pZWnd = NULL
>130	Identifier	NULL
>131	Identifier	m_pZWnd
>132	ExpressionStatement	 
>133	AssignmentExpr	m_pTexWnd = NULL
>134	Identifier	NULL
>135	Identifier	m_pTexWnd
>136	ExpressionStatement	 
>137	AssignmentExpr	m_pCamWnd = NULL
>138	Identifier	NULL
>139	Identifier	m_pCamWnd
>140	ExpressionStatement	 
>141	AssignmentExpr	m_pXYWnd = NULL
>142	Identifier	NULL
>143	Identifier	m_pXYWnd
>144	ExpressionStatement	 
>145	AssignmentExpr	g_pParentWnd = this
>146	Identifier	this
>147	Identifier	g_pParentWnd
>148	ExpressionStatement	 
>149	AssignmentExpr	m_bSplittersOK = false
>150	Identifier	false
>151	Identifier	m_bSplittersOK
>152	ExpressionStatement	 
>153	AssignmentExpr	m_bDoLoop = false
>154	Identifier	false
>155	Identifier	m_bDoLoop
>175	FunctionDef	CMainFrame 
>176	ParameterList	 
>177	CompoundStatement	 
>181	FunctionDef	HandlePopup (CWnd * pWindow , unsigned int uId)
>182	ParameterList	CWnd * pWindow , unsigned int uId
>183	Parameter	 
>184	Identifier	uId
>185	ParameterType	unsigned int
>186	Parameter	 
>187	Identifier	pWindow
>188	ParameterType	CWnd *
>189	ReturnType	void
>190	CompoundStatement	 
>191	ExpressionStatement	 
>192	CallExpression	pWindow -> SetFocus ( )
>193	ArgumentList	 
>194	Callee	pWindow -> SetFocus
>195	PtrMemberAccess	pWindow -> SetFocus
>196	Identifier	SetFocus
>197	Identifier	pWindow
>198	ExpressionStatement	 
>199	CallExpression	mnuPopup . DestroyMenu ( )
>200	ArgumentList	 
>201	Callee	mnuPopup . DestroyMenu
>202	MemberAccess	mnuPopup . DestroyMenu
>203	Identifier	DestroyMenu
>204	Identifier	mnuPopup
>205	ExpressionStatement	 
>206	CallExpression	mnuPopup . GetSubMenu ( 0 ) -> TrackPopupMenu ( TPM_LEFTALIGN | TPM_LEFTBUTTON | TPM_RIGHTBUTTON , ptMouse . x , \
>207	ArgumentList	TPM_LEFTALIGN | TPM_LEFTBUTTON | TPM_RIGHTBUTTON
>208	Argument	pWindow
>209	Identifier	pWindow
>210	Argument	ptMouse . y
>211	MemberAccess	ptMouse . y
>212	Identifier	y
>213	Identifier	ptMouse
>214	Argument	ptMouse . x
>215	MemberAccess	ptMouse . x
>216	Identifier	x
>217	Identifier	ptMouse
>218	Argument	TPM_LEFTALIGN | TPM_LEFTBUTTON | TPM_RIGHTBUTTON
>219	InclusiveOrExpression	TPM_LEFTALIGN | TPM_LEFTBUTTON | TPM_RIGHTBUTTON
>220	InclusiveOrExpression	TPM_LEFTBUTTON | TPM_RIGHTBUTTON
>221	Identifier	TPM_RIGHTBUTTON
>222	Identifier	TPM_LEFTBUTTON
>223	Identifier	TPM_LEFTALIGN
>224	Callee	mnuPopup . GetSubMenu ( 0 ) -> TrackPopupMenu
>225	PtrMemberAccess	mnuPopup . GetSubMenu ( 0 ) -> TrackPopupMenu
>226	Identifier	TrackPopupMenu
>227	CallExpression	mnuPopup . GetSubMenu ( 0 )
>228	ArgumentList	0
>229	Argument	0
>230	PrimaryExpression	0
>231	Callee	mnuPopup . GetSubMenu
>232	MemberAccess	mnuPopup . GetSubMenu
>233	Identifier	GetSubMenu
>234	Identifier	mnuPopup
>235	ExpressionStatement	 
>236	CallExpression	VERIFY ( mnuPopup . LoadMenu ( uId ) )
>237	ArgumentList	mnuPopup . LoadMenu ( uId )
>238	Argument	mnuPopup . LoadMenu ( uId )
>239	CallExpression	mnuPopup . LoadMenu ( uId )
>240	ArgumentList	uId
>241	Argument	uId
>242	Identifier	uId
>243	Callee	mnuPopup . LoadMenu
>244	MemberAccess	mnuPopup . LoadMenu
>245	Identifier	LoadMenu
>246	Identifier	mnuPopup
>247	Callee	VERIFY
>248	Identifier	VERIFY
>249	IdentifierDeclStatement	 
>250	IdentifierDecl	mnuPopup
>251	Identifier	mnuPopup
>252	IdentifierDeclType	CMenu
>253	ExpressionStatement	 
>254	CallExpression	GetCursorPos ( & ptMouse )
>255	ArgumentList	& ptMouse
>256	Argument	& ptMouse
>257	UnaryOp	& ptMouse
>258	Identifier	ptMouse
>259	UnaryOperator	&
>260	Callee	GetCursorPos
>261	Identifier	GetCursorPos
>262	IdentifierDeclStatement	 
>263	IdentifierDecl	ptMouse
>264	Identifier	ptMouse
>265	IdentifierDeclType	CPoint
>281	FunctionDef	CMainFrame 
>282	ParameterList	UINT message , LPARAM lParam
>283	Parameter	 
>284	Identifier	lParam
>285	ParameterType	LPARAM
>286	Parameter	 
>287	Identifier	message
>288	ParameterType	UINT
>289	ReturnType	void
>290	CompoundStatement	 
>296	FunctionDef	CMainFrame 
>297	ParameterList	 
>298	ReturnType	void
>299	CompoundStatement	 
>300	IfStatement	if ( g_qeglobals . d_project_entity )
>301	CompoundStatement	 
>302	ExpressionStatement	 
>303	Statement	 
>304	Statement	 
>305	Statement	 
>306	Statement	 
>307	Statement	 
>308	Statement	 
>309	Statement	 
>310	Statement	 
>311	Statement	 
>312	Statement	 
>313	Statement	 
>314	Statement	 
>315	Statement	 
>316	Statement	 
>317	Statement	 
>318	Statement	 
>319	Statement	 
>320	Statement	 
>321	Statement	 
>322	Statement	 
>323	Statement	 
>324	Statement	 
>325	ExpressionStatement	 
>326	CallExpression	LoadMruInReg ( g_qeglobals . d_lpMruMenu , \"Software\\id\\QuakeEd4\\MRU\" )
>327	ArgumentList	g_qeglobals . d_lpMruMenu
>328	Argument	\"Software\\id\\QuakeEd4\\MRU\"
>329	PrimaryExpression	\"Software\\id\\QuakeEd4\\MRU\"
>330	Argument	g_qeglobals . d_lpMruMenu
>331	MemberAccess	g_qeglobals . d_lpMruMenu
>332	Identifier	d_lpMruMenu
>333	Identifier	g_qeglobals
>334	Callee	LoadMruInReg
>335	Identifier	LoadMruInReg
>336	ExpressionStatement	 
>337	CallExpression	FillBSPMenu ( )
>338	ArgumentList	 
>339	Callee	FillBSPMenu
>340	Identifier	FillBSPMenu
>341	ExpressionStatement	 
>342	CallExpression	FillTextureMenu ( )
>343	ArgumentList	 
>344	Callee	FillTextureMenu
>345	Identifier	FillTextureMenu
>346	Condition	 
>347	MemberAccess	g_qeglobals . d_project_entity
>348	Identifier	d_project_entity
>349	Identifier	g_qeglobals
>350	IfStatement	if ( pMenu )
>351	CompoundStatement	 
>352	ExpressionStatement	 
>353	CallExpression	CheckTextureScale ( id )
>354	ArgumentList	id
>355	Argument	id
>356	Identifier	id
>357	Callee	CheckTextureScale
>358	Identifier	CheckTextureScale
>359	SwitchStatement	switch ( n )
>360	CompoundStatement	 
>361	BreakStatement	 
>362	ExpressionStatement	 
>363	AssignmentExpr	id = ID_TEXTURES_TEXTUREWINDOWSCALE_100
>364	Identifier	ID_TEXTURES_TEXTUREWINDOWSCALE_100
>365	Identifier	id
>366	Label	 
>367	Identifier	default
>368	BreakStatement	 
>369	ExpressionStatement	 
>370	AssignmentExpr	id = ID_TEXTURES_TEXTUREWINDOWSCALE_200
>371	Identifier	ID_TEXTURES_TEXTUREWINDOWSCALE_200
>372	Identifier	id
>373	Label	 
>374	BreakStatement	 
>375	ExpressionStatement	 
>376	AssignmentExpr	id = ID_TEXTURES_TEXTUREWINDOWSCALE_50
>377	Identifier	ID_TEXTURES_TEXTUREWINDOWSCALE_50
>378	Identifier	id
>379	Label	 
>380	BreakStatement	 
>381	ExpressionStatement	 
>382	AssignmentExpr	id = ID_TEXTURES_TEXTUREWINDOWSCALE_25
>383	Identifier	ID_TEXTURES_TEXTUREWINDOWSCALE_25
>384	Identifier	id
>385	Label	 
>386	BreakStatement	 
>387	ExpressionStatement	 
>388	AssignmentExpr	id = ID_TEXTURES_TEXTUREWINDOWSCALE_10
>389	Identifier	ID_TEXTURES_TEXTUREWINDOWSCALE_10
>390	Identifier	id
>391	Label	 
>392	Condition	 
>393	Identifier	n
>394	IdentifierDeclStatement	 
>395	IdentifierDecl	id
>396	Identifier	id
>397	IdentifierDeclType	int
>398	IdentifierDeclStatement	 
>399	IdentifierDecl	n = g_PrefsDlg . m_nTextureScale
>400	AssignmentExpr	n = g_PrefsDlg . m_nTextureScale
>401	MemberAccess	g_PrefsDlg . m_nTextureScale
>402	Identifier	m_nTextureScale
>403	Identifier	g_PrefsDlg
>404	Identifier	n
>405	Identifier	n
>406	IdentifierDeclType	int
>407	IfStatement	if ( m_wndToolBar . GetSafeHwnd ( ) )
>408	ExpressionStatement	 
>409	CallExpression	m_wndToolBar . GetToolBarCtrl ( ) . CheckButton ( ID_VIEW_CUBICCLIPPING , ( g_PrefsDlg . m_bCubicClipping ) ? TRUE 
>410	ArgumentList	ID_VIEW_CUBICCLIPPING
>411	Argument	( g_PrefsDlg . m_bCubicClipping ) ? TRUE 
>412	ConditionalExpression	( g_PrefsDlg . m_bCubicClipping ) ? TRUE 
>413	Identifier	FALSE
>414	Identifier	TRUE
>415	Condition	g_PrefsDlg . m_bCubicClipping
>416	MemberAccess	g_PrefsDlg . m_bCubicClipping
>417	Identifier	m_bCubicClipping
>418	Identifier	g_PrefsDlg
>419	Argument	ID_VIEW_CUBICCLIPPING
>420	Identifier	ID_VIEW_CUBICCLIPPING
>421	Callee	m_wndToolBar . GetToolBarCtrl ( ) . CheckButton
>422	MemberAccess	m_wndToolBar . GetToolBarCtrl ( ) . CheckButton
>423	Identifier	CheckButton
>424	CallExpression	m_wndToolBar . GetToolBarCtrl ( )
>425	ArgumentList	 
>426	Callee	m_wndToolBar . GetToolBarCtrl
>427	MemberAccess	m_wndToolBar . GetToolBarCtrl
>428	Identifier	GetToolBarCtrl
>429	Identifier	m_wndToolBar
>430	Condition	 
>431	CallExpression	m_wndToolBar . GetSafeHwnd ( )
>432	ArgumentList	 
>433	Callee	m_wndToolBar . GetSafeHwnd
>434	MemberAccess	m_wndToolBar . GetSafeHwnd
>435	Identifier	GetSafeHwnd
>436	Identifier	m_wndToolBar
>437	ExpressionStatement	 
>438	CallExpression	pMenu -> CheckMenuItem ( ID_SNAPTOGRID , MF_BYCOMMAND | ( ! g_PrefsDlg . m_bNoClamp ) ? MF_CHECKED 
>439	ArgumentList	ID_SNAPTOGRID
>440	Argument	MF_BYCOMMAND | ( ! g_PrefsDlg . m_bNoClamp ) ? MF_CHECKED 
>441	ConditionalExpression	MF_BYCOMMAND | ( ! g_PrefsDlg . m_bNoClamp ) ? MF_CHECKED 
>442	Identifier	MF_UNCHECKED
>443	Identifier	MF_CHECKED
>444	Condition	MF_BYCOMMAND | ( ! g_PrefsDlg . m_bNoClamp )
>445	InclusiveOrExpression	MF_BYCOMMAND | ( ! g_PrefsDlg . m_bNoClamp )
>446	UnaryOp	! g_PrefsDlg . m_bNoClamp
>447	MemberAccess	g_PrefsDlg . m_bNoClamp
>448	Identifier	m_bNoClamp
>449	Identifier	g_PrefsDlg
>450	UnaryOperator	!
>451	Identifier	MF_BYCOMMAND
>452	Argument	ID_SNAPTOGRID
>453	Identifier	ID_SNAPTOGRID
>454	Callee	pMenu -> CheckMenuItem
>455	PtrMemberAccess	pMenu -> CheckMenuItem
>456	Identifier	CheckMenuItem
>457	Identifier	pMenu
>458	ExpressionStatement	 
>459	CallExpression	pMenu -> CheckMenuItem ( ID_VIEW_OPENGLLIGHTING , MF_BYCOMMAND | ( g_PrefsDlg . m_bGLLighting ) ? MF_CHECKED 
>460	ArgumentList	ID_VIEW_OPENGLLIGHTING
>461	Argument	MF_BYCOMMAND | ( g_PrefsDlg . m_bGLLighting ) ? MF_CHECKED 
>462	ConditionalExpression	MF_BYCOMMAND | ( g_PrefsDlg . m_bGLLighting ) ? MF_CHECKED 
>463	Identifier	MF_UNCHECKED
>464	Identifier	MF_CHECKED
>465	Condition	MF_BYCOMMAND | ( g_PrefsDlg . m_bGLLighting )
>466	InclusiveOrExpression	MF_BYCOMMAND | ( g_PrefsDlg . m_bGLLighting )
>467	MemberAccess	g_PrefsDlg . m_bGLLighting
>468	Identifier	m_bGLLighting
>469	Identifier	g_PrefsDlg
>470	Identifier	MF_BYCOMMAND
>471	Argument	ID_VIEW_OPENGLLIGHTING
>472	Identifier	ID_VIEW_OPENGLLIGHTING
>473	Callee	pMenu -> CheckMenuItem
>474	PtrMemberAccess	pMenu -> CheckMenuItem
>475	Identifier	CheckMenuItem
>476	Identifier	pMenu
>477	ExpressionStatement	 
>478	CallExpression	pMenu -> CheckMenuItem ( ID_VIEW_CUBICCLIPPING , MF_BYCOMMAND | ( g_PrefsDlg . m_bCubicClipping ) ? MF_CHECKED 
>479	ArgumentList	ID_VIEW_CUBICCLIPPING
>480	Argument	MF_BYCOMMAND | ( g_PrefsDlg . m_bCubicClipping ) ? MF_CHECKED 
>481	ConditionalExpression	MF_BYCOMMAND | ( g_PrefsDlg . m_bCubicClipping ) ? MF_CHECKED 
>482	Identifier	MF_UNCHECKED
>483	Identifier	MF_CHECKED
>484	Condition	MF_BYCOMMAND | ( g_PrefsDlg . m_bCubicClipping )
>485	InclusiveOrExpression	MF_BYCOMMAND | ( g_PrefsDlg . m_bCubicClipping )
>486	MemberAccess	g_PrefsDlg . m_bCubicClipping
>487	Identifier	m_bCubicClipping
>488	Identifier	g_PrefsDlg
>489	Identifier	MF_BYCOMMAND
>490	Argument	ID_VIEW_CUBICCLIPPING
>491	Identifier	ID_VIEW_CUBICCLIPPING
>492	Callee	pMenu -> CheckMenuItem
>493	PtrMemberAccess	pMenu -> CheckMenuItem
>494	Identifier	CheckMenuItem
>495	Identifier	pMenu
>496	ExpressionStatement	 
>497	CallExpression	pMenu -> CheckMenuItem ( ID_TOGGLE_ROTATELOCK , MF_BYCOMMAND | ( g_PrefsDlg . m_bRotateLock ) ? MF_CHECKED 
>498	ArgumentList	ID_TOGGLE_ROTATELOCK
>499	Argument	MF_BYCOMMAND | ( g_PrefsDlg . m_bRotateLock ) ? MF_CHECKED 
>500	ConditionalExpression	MF_BYCOMMAND | ( g_PrefsDlg . m_bRotateLock ) ? MF_CHECKED 
>501	Identifier	MF_UNCHECKED
>502	Identifier	MF_CHECKED
>503	Condition	MF_BYCOMMAND | ( g_PrefsDlg . m_bRotateLock )
>504	InclusiveOrExpression	MF_BYCOMMAND | ( g_PrefsDlg . m_bRotateLock )
>505	MemberAccess	g_PrefsDlg . m_bRotateLock
>506	Identifier	m_bRotateLock
>507	Identifier	g_PrefsDlg
>508	Identifier	MF_BYCOMMAND
>509	Argument	ID_TOGGLE_ROTATELOCK
>510	Identifier	ID_TOGGLE_ROTATELOCK
>511	Callee	pMenu -> CheckMenuItem
>512	PtrMemberAccess	pMenu -> CheckMenuItem
>513	Identifier	CheckMenuItem
>514	Identifier	pMenu
>515	ExpressionStatement	 
>516	CallExpression	pMenu -> CheckMenuItem ( ID_TOGGLE_LOCK , MF_BYCOMMAND | ( g_PrefsDlg . m_bTextureLock ) ? MF_CHECKED 
>517	ArgumentList	ID_TOGGLE_LOCK
>518	Argument	MF_BYCOMMAND | ( g_PrefsDlg . m_bTextureLock ) ? MF_CHECKED 
>519	ConditionalExpression	MF_BYCOMMAND | ( g_PrefsDlg . m_bTextureLock ) ? MF_CHECKED 
>520	Identifier	MF_UNCHECKED
>521	Identifier	MF_CHECKED
>522	Condition	MF_BYCOMMAND | ( g_PrefsDlg . m_bTextureLock )
>523	InclusiveOrExpression	MF_BYCOMMAND | ( g_PrefsDlg . m_bTextureLock )
>524	MemberAccess	g_PrefsDlg . m_bTextureLock
>525	Identifier	m_bTextureLock
>526	Identifier	g_PrefsDlg
>527	Identifier	MF_BYCOMMAND
>528	Argument	ID_TOGGLE_LOCK
>529	Identifier	ID_TOGGLE_LOCK
>530	Callee	pMenu -> CheckMenuItem
>531	PtrMemberAccess	pMenu -> CheckMenuItem
>532	Identifier	CheckMenuItem
>533	Identifier	pMenu
>534	IfStatement	if ( g_qeglobals . d_savedinfo . exclude & EXCLUDE_ANGLES )
>535	ExpressionStatement	 
>536	CallExpression	pMenu -> CheckMenuItem ( ID_VIEW_SHOWANGLES , MF_BYCOMMAND | MF_UNCHECKED )
>537	ArgumentList	ID_VIEW_SHOWANGLES
>538	Argument	MF_BYCOMMAND | MF_UNCHECKED
>539	InclusiveOrExpression	MF_BYCOMMAND | MF_UNCHECKED
>540	Identifier	MF_UNCHECKED
>541	Identifier	MF_BYCOMMAND
>542	Argument	ID_VIEW_SHOWANGLES
>543	Identifier	ID_VIEW_SHOWANGLES
>544	Callee	pMenu -> CheckMenuItem
>545	PtrMemberAccess	pMenu -> CheckMenuItem
>546	Identifier	CheckMenuItem
>547	Identifier	pMenu
>548	Condition	 
>549	BitAndExpression	g_qeglobals . d_savedinfo . exclude & EXCLUDE_ANGLES
>550	Identifier	EXCLUDE_ANGLES
>551	MemberAccess	g_qeglobals . d_savedinfo . exclude
>552	Identifier	exclude
>553	MemberAccess	g_qeglobals . d_savedinfo
>554	Identifier	d_savedinfo
>555	Identifier	g_qeglobals
>556	IfStatement	if ( g_qeglobals . d_savedinfo . exclude & EXCLUDE_CAULK )
>557	ExpressionStatement	 
>558	CallExpression	pMenu -> CheckMenuItem ( ID_VIEW_SHOWCAULK , MF_BYCOMMAND | MF_UNCHECKED )
>559	ArgumentList	ID_VIEW_SHOWCAULK
>560	Argument	MF_BYCOMMAND | MF_UNCHECKED
>561	InclusiveOrExpression	MF_BYCOMMAND | MF_UNCHECKED
>562	Identifier	MF_UNCHECKED
>563	Identifier	MF_BYCOMMAND
>564	Argument	ID_VIEW_SHOWCAULK
>565	Identifier	ID_VIEW_SHOWCAULK
>566	Callee	pMenu -> CheckMenuItem
>567	PtrMemberAccess	pMenu -> CheckMenuItem
>568	Identifier	CheckMenuItem
>569	Identifier	pMenu
>570	Condition	 
>571	BitAndExpression	g_qeglobals . d_savedinfo . exclude & EXCLUDE_CAULK
>572	Identifier	EXCLUDE_CAULK
>573	MemberAccess	g_qeglobals . d_savedinfo . exclude
>574	Identifier	exclude
>575	MemberAccess	g_qeglobals . d_savedinfo
>576	Identifier	d_savedinfo
>577	Identifier	g_qeglobals
>578	IfStatement	if ( g_qeglobals . d_savedinfo . exclude & EXCLUDE_HINT )
>579	ExpressionStatement	 
>580	CallExpression	pMenu -> CheckMenuItem ( ID_VIEW_SHOWHINT , MF_BYCOMMAND | MF_UNCHECKED )
>581	ArgumentList	ID_VIEW_SHOWHINT
>582	Argument	MF_BYCOMMAND | MF_UNCHECKED
>583	InclusiveOrExpression	MF_BYCOMMAND | MF_UNCHECKED
>584	Identifier	MF_UNCHECKED
>585	Identifier	MF_BYCOMMAND
>586	Argument	ID_VIEW_SHOWHINT
>587	Identifier	ID_VIEW_SHOWHINT
>588	Callee	pMenu -> CheckMenuItem
>589	PtrMemberAccess	pMenu -> CheckMenuItem
>590	Identifier	CheckMenuItem
>591	Identifier	pMenu
>592	Condition	 
>593	BitAndExpression	g_qeglobals . d_savedinfo . exclude & EXCLUDE_HINT
>594	Identifier	EXCLUDE_HINT
>595	MemberAccess	g_qeglobals . d_savedinfo . exclude
>596	Identifier	exclude
>597	MemberAccess	g_qeglobals . d_savedinfo
>598	Identifier	d_savedinfo
>599	Identifier	g_qeglobals
>600	IfStatement	if ( g_qeglobals . d_savedinfo . exclude & EXCLUDE_CLIP )
>601	ExpressionStatement	 
>602	CallExpression	pMenu -> CheckMenuItem ( ID_VIEW_SHOWCLIP , MF_BYCOMMAND | MF_UNCHECKED )
>603	ArgumentList	ID_VIEW_SHOWCLIP
>604	Argument	MF_BYCOMMAND | MF_UNCHECKED
>605	InclusiveOrExpression	MF_BYCOMMAND | MF_UNCHECKED
>606	Identifier	MF_UNCHECKED
>607	Identifier	MF_BYCOMMAND
>608	Argument	ID_VIEW_SHOWCLIP
>609	Identifier	ID_VIEW_SHOWCLIP
>610	Callee	pMenu -> CheckMenuItem
>611	PtrMemberAccess	pMenu -> CheckMenuItem
>612	Identifier	CheckMenuItem
>613	Identifier	pMenu
>614	Condition	 
>615	BitAndExpression	g_qeglobals . d_savedinfo . exclude & EXCLUDE_CLIP
>616	Identifier	EXCLUDE_CLIP
>617	MemberAccess	g_qeglobals . d_savedinfo . exclude
>618	Identifier	exclude
>619	MemberAccess	g_qeglobals . d_savedinfo
>620	Identifier	d_savedinfo
>621	Identifier	g_qeglobals
>622	IfStatement	if ( g_qeglobals . d_savedinfo . exclude & EXCLUDE_WORLD )
>623	ExpressionStatement	 
>624	CallExpression	pMenu -> CheckMenuItem ( ID_VIEW_SHOWWORLD , MF_BYCOMMAND | MF_UNCHECKED )
>625	ArgumentList	ID_VIEW_SHOWWORLD
>626	Argument	MF_BYCOMMAND | MF_UNCHECKED
>627	InclusiveOrExpression	MF_BYCOMMAND | MF_UNCHECKED
>628	Identifier	MF_UNCHECKED
>629	Identifier	MF_BYCOMMAND
>630	Argument	ID_VIEW_SHOWWORLD
>631	Identifier	ID_VIEW_SHOWWORLD
>632	Callee	pMenu -> CheckMenuItem
>633	PtrMemberAccess	pMenu -> CheckMenuItem
>634	Identifier	CheckMenuItem
>635	Identifier	pMenu
>636	Condition	 
>637	BitAndExpression	g_qeglobals . d_savedinfo . exclude & EXCLUDE_WORLD
>638	Identifier	EXCLUDE_WORLD
>639	MemberAccess	g_qeglobals . d_savedinfo . exclude
>640	Identifier	exclude
>641	MemberAccess	g_qeglobals . d_savedinfo
>642	Identifier	d_savedinfo
>643	Identifier	g_qeglobals
>644	IfStatement	if ( g_qeglobals . d_savedinfo . exclude & EXCLUDE_WATER )
>645	ExpressionStatement	 
>646	CallExpression	pMenu -> CheckMenuItem ( ID_VIEW_SHOWWATER , MF_BYCOMMAND | MF_UNCHECKED )
>647	ArgumentList	ID_VIEW_SHOWWATER
>648	Argument	MF_BYCOMMAND | MF_UNCHECKED
>649	InclusiveOrExpression	MF_BYCOMMAND | MF_UNCHECKED
>650	Identifier	MF_UNCHECKED
>651	Identifier	MF_BYCOMMAND
>652	Argument	ID_VIEW_SHOWWATER
>653	Identifier	ID_VIEW_SHOWWATER
>654	Callee	pMenu -> CheckMenuItem
>655	PtrMemberAccess	pMenu -> CheckMenuItem
>656	Identifier	CheckMenuItem
>657	Identifier	pMenu
>658	Condition	 
>659	BitAndExpression	g_qeglobals . d_savedinfo . exclude & EXCLUDE_WATER
>660	Identifier	EXCLUDE_WATER
>661	MemberAccess	g_qeglobals . d_savedinfo . exclude
>662	Identifier	exclude
>663	MemberAccess	g_qeglobals . d_savedinfo
>664	Identifier	d_savedinfo
>665	Identifier	g_qeglobals
>666	IfStatement	if ( g_qeglobals . d_savedinfo . exclude & EXCLUDE_PATHS )
>667	ExpressionStatement	 
>668	CallExpression	pMenu -> CheckMenuItem ( ID_VIEW_SHOWPATH , MF_BYCOMMAND | MF_UNCHECKED )
>669	ArgumentList	ID_VIEW_SHOWPATH
>670	Argument	MF_BYCOMMAND | MF_UNCHECKED
>671	InclusiveOrExpression	MF_BYCOMMAND | MF_UNCHECKED
>672	Identifier	MF_UNCHECKED
>673	Identifier	MF_BYCOMMAND
>674	Argument	ID_VIEW_SHOWPATH
>675	Identifier	ID_VIEW_SHOWPATH
>676	Callee	pMenu -> CheckMenuItem
>677	PtrMemberAccess	pMenu -> CheckMenuItem
>678	Identifier	CheckMenuItem
>679	Identifier	pMenu
>680	Condition	 
>681	BitAndExpression	g_qeglobals . d_savedinfo . exclude & EXCLUDE_PATHS
>682	Identifier	EXCLUDE_PATHS
>683	MemberAccess	g_qeglobals . d_savedinfo . exclude
>684	Identifier	exclude
>685	MemberAccess	g_qeglobals . d_savedinfo
>686	Identifier	d_savedinfo
>687	Identifier	g_qeglobals
>688	IfStatement	if ( g_qeglobals . d_savedinfo . exclude & EXCLUDE_ENT )
>689	ExpressionStatement	 
>690	CallExpression	pMenu -> CheckMenuItem ( ID_VIEW_ENTITY , MF_BYCOMMAND | MF_UNCHECKED )
>691	ArgumentList	ID_VIEW_ENTITY
>692	Argument	MF_BYCOMMAND | MF_UNCHECKED
>693	InclusiveOrExpression	MF_BYCOMMAND | MF_UNCHECKED
>694	Identifier	MF_UNCHECKED
>695	Identifier	MF_BYCOMMAND
>696	Argument	ID_VIEW_ENTITY
>697	Identifier	ID_VIEW_ENTITY
>698	Callee	pMenu -> CheckMenuItem
>699	PtrMemberAccess	pMenu -> CheckMenuItem
>700	Identifier	CheckMenuItem
>701	Identifier	pMenu
>702	Condition	 
>703	BitAndExpression	g_qeglobals . d_savedinfo . exclude & EXCLUDE_ENT
>704	Identifier	EXCLUDE_ENT
>705	MemberAccess	g_qeglobals . d_savedinfo . exclude
>706	Identifier	exclude
>707	MemberAccess	g_qeglobals . d_savedinfo
>708	Identifier	d_savedinfo
>709	Identifier	g_qeglobals
>710	IfStatement	if ( g_qeglobals . d_savedinfo . exclude & EXCLUDE_LIGHTS )
>711	ExpressionStatement	 
>712	CallExpression	pMenu -> CheckMenuItem ( ID_VIEW_SHOWLIGHTS , MF_BYCOMMAND | MF_UNCHECKED )
>713	ArgumentList	ID_VIEW_SHOWLIGHTS
>714	Argument	MF_BYCOMMAND | MF_UNCHECKED
>715	InclusiveOrExpression	MF_BYCOMMAND | MF_UNCHECKED
>716	Identifier	MF_UNCHECKED
>717	Identifier	MF_BYCOMMAND
>718	Argument	ID_VIEW_SHOWLIGHTS
>719	Identifier	ID_VIEW_SHOWLIGHTS
>720	Callee	pMenu -> CheckMenuItem
>721	PtrMemberAccess	pMenu -> CheckMenuItem
>722	Identifier	CheckMenuItem
>723	Identifier	pMenu
>724	Condition	 
>725	BitAndExpression	g_qeglobals . d_savedinfo . exclude & EXCLUDE_LIGHTS
>726	Identifier	EXCLUDE_LIGHTS
>727	MemberAccess	g_qeglobals . d_savedinfo . exclude
>728	Identifier	exclude
>729	MemberAccess	g_qeglobals . d_savedinfo
>730	Identifier	d_savedinfo
>731	Identifier	g_qeglobals
>732	IfStatement	if ( ! g_qeglobals . d_savedinfo . show_coordinates )
>733	ExpressionStatement	 
>734	CallExpression	pMenu -> CheckMenuItem ( ID_VIEW_SHOWCOORDINATES , MF_BYCOMMAND | MF_UNCHECKED )
>735	ArgumentList	ID_VIEW_SHOWCOORDINATES
>736	Argument	MF_BYCOMMAND | MF_UNCHECKED
>737	InclusiveOrExpression	MF_BYCOMMAND | MF_UNCHECKED
>738	Identifier	MF_UNCHECKED
>739	Identifier	MF_BYCOMMAND
>740	Argument	ID_VIEW_SHOWCOORDINATES
>741	Identifier	ID_VIEW_SHOWCOORDINATES
>742	Callee	pMenu -> CheckMenuItem
>743	PtrMemberAccess	pMenu -> CheckMenuItem
>744	Identifier	CheckMenuItem
>745	Identifier	pMenu
>746	Condition	 
>747	UnaryOp	! g_qeglobals . d_savedinfo . show_coordinates
>748	MemberAccess	g_qeglobals . d_savedinfo . show_coordinates
>749	Identifier	show_coordinates
>750	MemberAccess	g_qeglobals . d_savedinfo
>751	Identifier	d_savedinfo
>752	Identifier	g_qeglobals
>753	UnaryOperator	!
>754	IfStatement	if ( ! g_qeglobals . d_savedinfo . show_names )
>755	ExpressionStatement	 
>756	CallExpression	pMenu -> CheckMenuItem ( ID_VIEW_SHOWNAMES , MF_BYCOMMAND | MF_UNCHECKED )
>757	ArgumentList	ID_VIEW_SHOWNAMES
>758	Argument	MF_BYCOMMAND | MF_UNCHECKED
>759	InclusiveOrExpression	MF_BYCOMMAND | MF_UNCHECKED
>760	Identifier	MF_UNCHECKED
>761	Identifier	MF_BYCOMMAND
>762	Argument	ID_VIEW_SHOWNAMES
>763	Identifier	ID_VIEW_SHOWNAMES
>764	Callee	pMenu -> CheckMenuItem
>765	PtrMemberAccess	pMenu -> CheckMenuItem
>766	Identifier	CheckMenuItem
>767	Identifier	pMenu
>768	Condition	 
>769	UnaryOp	! g_qeglobals . d_savedinfo . show_names
>770	MemberAccess	g_qeglobals . d_savedinfo . show_names
>771	Identifier	show_names
>772	MemberAccess	g_qeglobals . d_savedinfo
>773	Identifier	d_savedinfo
>774	Identifier	g_qeglobals
>775	UnaryOperator	!
>776	Condition	 
>777	Identifier	pMenu
>778	IdentifierDeclStatement	 
>779	IdentifierDecl	* pMenu = GetMenu ( )
>780	AssignmentExpr	* pMenu = GetMenu ( )
>781	CallExpression	GetMenu ( )
>782	ArgumentList	 
>783	Callee	GetMenu
>784	Identifier	GetMenu
>785	Identifier	pMenu
>786	Identifier	pMenu
>787	IdentifierDeclType	CMenu *
>847	FunctionDef	CMainFrame 
>848	ParameterList	CMenu * pMenu
>849	Parameter	 
>850	Identifier	pMenu
>851	ParameterType	CMenu *
>852	ReturnType	void
>853	CompoundStatement	 
>854	ForStatement	for ( i = 0 ; i < g_nCommandCount ; i ++ )
>855	CompoundStatement	 
>856	ExpressionStatement	 
>857	CallExpression	SetMenuItemInfo ( pMenu -> m_hMenu , g_Commands [ i ] . m_nCommand , FALSE , & MenuItemInfo )
>858	ArgumentList	pMenu -> m_hMenu
>859	Argument	& MenuItemInfo
>860	UnaryOp	& MenuItemInfo
>861	Identifier	MenuItemInfo
>862	UnaryOperator	&
>863	Argument	FALSE
>864	Identifier	FALSE
>865	Argument	g_Commands [ i ] . m_nCommand
>866	MemberAccess	g_Commands [ i ] . m_nCommand
>867	Identifier	m_nCommand
>868	ArrayIndexing	g_Commands [ i ]
>869	Identifier	i
>870	Identifier	g_Commands
>871	Argument	pMenu -> m_hMenu
>872	PtrMemberAccess	pMenu -> m_hMenu
>873	Identifier	m_hMenu
>874	Identifier	pMenu
>875	Callee	SetMenuItemInfo
>876	Identifier	SetMenuItemInfo
>877	ExpressionStatement	 
>878	AssignmentExpr	MenuItemInfo . cch = strlen ( key )
>879	CallExpression	strlen ( key )
>880	ArgumentList	key
>881	Argument	key
>882	Identifier	key
>883	Callee	strlen
>884	Identifier	strlen
>885	MemberAccess	MenuItemInfo . cch
>886	Identifier	cch
>887	Identifier	MenuItemInfo
>888	ExpressionStatement	 
>889	AssignmentExpr	MenuItemInfo . dwTypeData = key
>890	Identifier	key
>891	MemberAccess	MenuItemInfo . dwTypeData
>892	Identifier	dwTypeData
>893	Identifier	MenuItemInfo
>894	ExpressionStatement	 
>895	AssignmentExpr	MenuItemInfo . fType = MFT_STRING
>896	Identifier	MFT_STRING
>897	MemberAccess	MenuItemInfo . fType
>898	Identifier	fType
>899	Identifier	MenuItemInfo
>900	ExpressionStatement	 
>901	AssignmentExpr	MenuItemInfo . fMask = MIIM_TYPE
>902	Identifier	MIIM_TYPE
>903	MemberAccess	MenuItemInfo . fMask
>904	Identifier	fMask
>905	Identifier	MenuItemInfo
>906	ExpressionStatement	 
>907	AssignmentExpr	MenuItemInfo . cbSize = sizeof ( MENUITEMINFO )
>908	SizeofExpr	sizeof ( MENUITEMINFO )
>909	SizeofOperand	MENUITEMINFO
>910	Sizeof	sizeof
>911	MemberAccess	MenuItemInfo . cbSize
>912	Identifier	cbSize
>913	Identifier	MenuItemInfo
>914	ExpressionStatement	 
>915	CallExpression	memset ( & MenuItemInfo , 0 , sizeof ( MENUITEMINFO ) )
>916	ArgumentList	& MenuItemInfo
>917	Argument	sizeof ( MENUITEMINFO )
>918	SizeofExpr	sizeof ( MENUITEMINFO )
>919	SizeofOperand	MENUITEMINFO
>920	Sizeof	sizeof
>921	Argument	0
>922	PrimaryExpression	0
>923	Argument	& MenuItemInfo
>924	UnaryOp	& MenuItemInfo
>925	Identifier	MenuItemInfo
>926	UnaryOperator	&
>927	Callee	memset
>928	Identifier	memset
>929	IfStatement	if ( j >= g_nKeyCount )
>930	CompoundStatement	 
>931	ExpressionStatement	 
>932	CallExpression	sprintf ( & key [ strlen ( key ) ] , \"%c\" , g_Commands [ i ] . m_nKey )
>933	ArgumentList	& key [ strlen ( key ) ]
>934	Argument	g_Commands [ i ] . m_nKey
>935	MemberAccess	g_Commands [ i ] . m_nKey
>936	Identifier	m_nKey
>937	ArrayIndexing	g_Commands [ i ]
>938	Identifier	i
>939	Identifier	g_Commands
>940	Argument	\"%c\"
>941	PrimaryExpression	\"%c\"
>942	Argument	& key [ strlen ( key ) ]
>943	UnaryOp	& key [ strlen ( key ) ]
>944	ArrayIndexing	key [ strlen ( key ) ]
>945	CallExpression	strlen ( key )
>946	ArgumentList	key
>947	Argument	key
>948	Identifier	key
>949	Callee	strlen
>950	Identifier	strlen
>951	Identifier	key
>952	UnaryOperator	&
>953	Callee	sprintf
>954	Identifier	sprintf
>955	Condition	 
>956	RelationalExpression	j >= g_nKeyCount
>957	Identifier	g_nKeyCount
>958	Identifier	j
>959	ForStatement	for ( j = 0 ; j < g_nKeyCount ; j ++ )
>960	CompoundStatement	 
>961	IfStatement	if ( g_Commands [ i ] . m_nKey == g_Keys [ j ] . m_nVKKey )
>962	CompoundStatement	 
>963	BreakStatement	 
>964	ExpressionStatement	 
>965	CallExpression	strcat ( key , g_Keys [ j ] . m_strName )
>966	ArgumentList	key
>967	Argument	g_Keys [ j ] . m_strName
>968	MemberAccess	g_Keys [ j ] . m_strName
>969	Identifier	m_strName
>970	ArrayIndexing	g_Keys [ j ]
>971	Identifier	j
>972	Identifier	g_Keys
>973	Argument	key
>974	Identifier	key
>975	Callee	strcat
>976	Identifier	strcat
>977	Condition	 
>978	EqualityExpression	g_Commands [ i ] . m_nKey == g_Keys [ j ] . m_nVKKey
>979	MemberAccess	g_Keys [ j ] . m_nVKKey
>980	Identifier	m_nVKKey
>981	ArrayIndexing	g_Keys [ j ]
>982	Identifier	j
>983	Identifier	g_Keys
>984	MemberAccess	g_Commands [ i ] . m_nKey
>985	Identifier	m_nKey
>986	ArrayIndexing	g_Commands [ i ]
>987	Identifier	i
>988	Identifier	g_Commands
>989	IncDecOp	 
>990	IncDec	++
>991	Identifier	j
>992	Condition	 
>993	RelationalExpression	j < g_nKeyCount
>994	Identifier	g_nKeyCount
>995	Identifier	j
>996	ForInit	 
>997	AssignmentExpr	j = 0
>998	PrimaryExpression	0
>999	Identifier	j
>1000	IfStatement	if ( g_Commands [ i ] . m_nModifiers )
>1001	CompoundStatement	 
>1002	IfStatement	if ( g_Commands [ i ] . m_nModifiers & RAD_CONTROL )
>1003	ExpressionStatement	 
>1004	CallExpression	strcat ( key , \"Ctrl-\" )
>1005	ArgumentList	key
>1006	Argument	\"Ctrl-\"
>1007	PrimaryExpression	\"Ctrl-\"
>1008	Argument	key
>1009	Identifier	key
>1010	Callee	strcat
>1011	Identifier	strcat
>1012	Condition	 
>1013	BitAndExpression	g_Commands [ i ] . m_nModifiers & RAD_CONTROL
>1014	Identifier	RAD_CONTROL
>1015	MemberAccess	g_Commands [ i ] . m_nModifiers
>1016	Identifier	m_nModifiers
>1017	ArrayIndexing	g_Commands [ i ]
>1018	Identifier	i
>1019	Identifier	g_Commands
>1020	IfStatement	if ( g_Commands [ i ] . m_nModifiers & RAD_ALT )
>1021	ExpressionStatement	 
>1022	CallExpression	strcat ( key , \"Alt-\" )
>1023	ArgumentList	key
>1024	Argument	\"Alt-\"
>1025	PrimaryExpression	\"Alt-\"
>1026	Argument	key
>1027	Identifier	key
>1028	Callee	strcat
>1029	Identifier	strcat
>1030	Condition	 
>1031	BitAndExpression	g_Commands [ i ] . m_nModifiers & RAD_ALT
>1032	Identifier	RAD_ALT
>1033	MemberAccess	g_Commands [ i ] . m_nModifiers
>1034	Identifier	m_nModifiers
>1035	ArrayIndexing	g_Commands [ i ]
>1036	Identifier	i
>1037	Identifier	g_Commands
>1038	IfStatement	if ( g_Commands [ i ] . m_nModifiers & RAD_SHIFT )
>1039	ExpressionStatement	 
>1040	CallExpression	strcat ( key , \"Shift-\" )
>1041	ArgumentList	key
>1042	Argument	\"Shift-\"
>1043	PrimaryExpression	\"Shift-\"
>1044	Argument	key
>1045	Identifier	key
>1046	Callee	strcat
>1047	Identifier	strcat
>1048	Condition	 
>1049	BitAndExpression	g_Commands [ i ] . m_nModifiers & RAD_SHIFT
>1050	Identifier	RAD_SHIFT
>1051	MemberAccess	g_Commands [ i ] . m_nModifiers
>1052	Identifier	m_nModifiers
>1053	ArrayIndexing	g_Commands [ i ]
>1054	Identifier	i
>1055	Identifier	g_Commands
>1056	Condition	 
>1057	MemberAccess	g_Commands [ i ] . m_nModifiers
>1058	Identifier	m_nModifiers
>1059	ArrayIndexing	g_Commands [ i ]
>1060	Identifier	i
>1061	Identifier	g_Commands
>1062	ExpressionStatement	 
>1063	CallExpression	strcat ( key , \"\t\" )
>1064	ArgumentList	key
>1065	Argument	\"\t\"
>1066	PrimaryExpression	\"\t\"
>1067	Argument	key
>1068	Identifier	key
>1069	Callee	strcat
>1070	Identifier	strcat
>1071	IfStatement	if ( ptr )
>1072	ExpressionStatement	 
>1073	AssignmentExpr	* ptr = '\0'
>1074	PrimaryExpression	'\0'
>1075	UnaryOp	* ptr
>1076	Identifier	ptr
>1077	UnaryOperator	*
>1078	Condition	 
>1079	Identifier	ptr
>1080	ExpressionStatement	 
>1081	AssignmentExpr	ptr = strchr ( key , '\t' )
>1082	CallExpression	strchr ( key , '\t' )
>1083	ArgumentList	key
>1084	Argument	'\t'
>1085	PrimaryExpression	'\t'
>1086	Argument	key
>1087	Identifier	key
>1088	Callee	strchr
>1089	Identifier	strchr
>1090	Identifier	ptr
>1091	IfStatement	if ( MenuItemInfo . fType != MFT_STRING )
>1092	ContinueStatement	 
>1093	Condition	 
>1094	EqualityExpression	MenuItemInfo . fType != MFT_STRING
>1095	Identifier	MFT_STRING
>1096	MemberAccess	MenuItemInfo . fType
>1097	Identifier	fType
>1098	Identifier	MenuItemInfo
>1099	IfStatement	if ( ! pMenu -> GetMenuItemInfo ( g_Commands [ i ] . m_nCommand , & MenuItemInfo ) )
>1100	ContinueStatement	 
>1101	Condition	 
>1102	UnaryOp	! pMenu -> GetMenuItemInfo ( g_Commands [ i ] . m_nCommand , & MenuItemInfo )
>1103	CallExpression	pMenu -> GetMenuItemInfo ( g_Commands [ i ] . m_nCommand , & MenuItemInfo )
>1104	ArgumentList	g_Commands [ i ] . m_nCommand
>1105	Argument	& MenuItemInfo
>1106	UnaryOp	& MenuItemInfo
>1107	Identifier	MenuItemInfo
>1108	UnaryOperator	&
>1109	Argument	g_Commands [ i ] . m_nCommand
>1110	MemberAccess	g_Commands [ i ] . m_nCommand
>1111	Identifier	m_nCommand
>1112	ArrayIndexing	g_Commands [ i ]
>1113	Identifier	i
>1114	Identifier	g_Commands
>1115	Callee	pMenu -> GetMenuItemInfo
>1116	PtrMemberAccess	pMenu -> GetMenuItemInfo
>1117	Identifier	GetMenuItemInfo
>1118	Identifier	pMenu
>1119	UnaryOperator	!
>1120	ExpressionStatement	 
>1121	AssignmentExpr	MenuItemInfo . cch = sizeof ( key )
>1122	SizeofExpr	sizeof ( key )
>1123	SizeofOperand	key
>1124	Sizeof	sizeof
>1125	MemberAccess	MenuItemInfo . cch
>1126	Identifier	cch
>1127	Identifier	MenuItemInfo
>1128	ExpressionStatement	 
>1129	AssignmentExpr	MenuItemInfo . dwTypeData = key
>1130	Identifier	key
>1131	MemberAccess	MenuItemInfo . dwTypeData
>1132	Identifier	dwTypeData
>1133	Identifier	MenuItemInfo
>1134	ExpressionStatement	 
>1135	AssignmentExpr	MenuItemInfo . fMask = MIIM_TYPE
>1136	Identifier	MIIM_TYPE
>1137	MemberAccess	MenuItemInfo . fMask
>1138	Identifier	fMask
>1139	Identifier	MenuItemInfo
>1140	ExpressionStatement	 
>1141	AssignmentExpr	MenuItemInfo . cbSize = sizeof ( MENUITEMINFO )
>1142	SizeofExpr	sizeof ( MENUITEMINFO )
>1143	SizeofOperand	MENUITEMINFO
>1144	Sizeof	sizeof
>1145	MemberAccess	MenuItemInfo . cbSize
>1146	Identifier	cbSize
>1147	Identifier	MenuItemInfo
>1148	ExpressionStatement	 
>1149	CallExpression	memset ( & MenuItemInfo , 0 , sizeof ( MENUITEMINFO ) )
>1150	ArgumentList	& MenuItemInfo
>1151	Argument	sizeof ( MENUITEMINFO )
>1152	SizeofExpr	sizeof ( MENUITEMINFO )
>1153	SizeofOperand	MENUITEMINFO
>1154	Sizeof	sizeof
>1155	Argument	0
>1156	PrimaryExpression	0
>1157	Argument	& MenuItemInfo
>1158	UnaryOp	& MenuItemInfo
>1159	Identifier	MenuItemInfo
>1160	UnaryOperator	&
>1161	Callee	memset
>1162	Identifier	memset
>1163	IncDecOp	 
>1164	IncDec	++
>1165	Identifier	i
>1166	Condition	 
>1167	RelationalExpression	i < g_nCommandCount
>1168	Identifier	g_nCommandCount
>1169	Identifier	i
>1170	ForInit	 
>1171	AssignmentExpr	i = 0
>1172	PrimaryExpression	0
>1173	Identifier	i
>1174	IdentifierDeclStatement	 
>1175	IdentifierDecl	MenuItemInfo
>1176	Identifier	MenuItemInfo
>1177	IdentifierDeclType	MENUITEMINFO
>1178	IdentifierDeclStatement	 
>1179	IdentifierDecl	* ptr
>1180	Identifier	ptr
>1181	IdentifierDeclType	char *
>1182	IdentifierDecl	key [ 1024 ]
>1183	PrimaryExpression	1024
>1184	Identifier	key
>1185	IdentifierDeclType	char [ 1024 ]
>1186	IdentifierDeclStatement	 
>1187	IdentifierDecl	j
>1188	Identifier	j
>1189	IdentifierDeclType	int
>1190	IdentifierDecl	i
>1191	Identifier	i
>1192	IdentifierDeclType	int
>1235	FunctionDef	CMainFrame 
>1236	ParameterList	LPCREATESTRUCT lpCreateStruct
>1237	Parameter	 
>1238	Identifier	lpCreateStruct
>1239	ParameterType	LPCREATESTRUCT
>1240	ReturnType	int
>1241	CompoundStatement	 
>1242	ReturnStatement	 
>1243	PrimaryExpression	0
>1244	ExpressionStatement	 
>1245	CallExpression	PostMessage ( WM_KEYDOWN , 'O' , NULL )
>1246	ArgumentList	WM_KEYDOWN
>1247	Argument	NULL
>1248	Identifier	NULL
>1249	Argument	'O'
>1250	PrimaryExpression	'O'
>1251	Argument	WM_KEYDOWN
>1252	Identifier	WM_KEYDOWN
>1253	Callee	PostMessage
>1254	Identifier	PostMessage
>1255	ExpressionStatement	 
>1256	CallExpression	m_pXYWnd -> SetFocus ( )
>1257	ArgumentList	 
>1258	Callee	m_pXYWnd -> SetFocus
>1259	PtrMemberAccess	m_pXYWnd -> SetFocus
>1260	Identifier	SetFocus
>1261	Identifier	m_pXYWnd
>1262	ExpressionStatement	 
>1263	CallExpression	SetActiveXY ( m_pXYWnd )
>1264	ArgumentList	m_pXYWnd
>1265	Argument	m_pXYWnd
>1266	Identifier	m_pXYWnd
>1267	Callee	SetActiveXY
>1268	Identifier	SetActiveXY
>1269	ExpressionStatement	 
>1270	CallExpression	ShowControlBar ( & m_wndToolBar , ( m_wndToolBar . GetStyle ( ) & WS_VISIBLE ) , TRUE )
>1271	ArgumentList	& m_wndToolBar
>1272	Argument	TRUE
>1273	Identifier	TRUE
>1274	Argument	m_wndToolBar . GetStyle ( ) & WS_VISIBLE
>1275	BitAndExpression	m_wndToolBar . GetStyle ( ) & WS_VISIBLE
>1276	Identifier	WS_VISIBLE
>1277	CallExpression	m_wndToolBar . GetStyle ( )
>1278	ArgumentList	 
>1279	Callee	m_wndToolBar . GetStyle
>1280	MemberAccess	m_wndToolBar . GetStyle
>1281	Identifier	GetStyle
>1282	Identifier	m_wndToolBar
>1283	Argument	& m_wndToolBar
>1284	UnaryOp	& m_wndToolBar
>1285	Identifier	m_wndToolBar
>1286	UnaryOperator	&
>1287	Callee	ShowControlBar
>1288	Identifier	ShowControlBar
>1289	IfStatement	if ( ! g_PrefsDlg . m_bTextureBar )
>1290	ElseStatement	else
>1291	ExpressionStatement	 
>1292	CallExpression	ShowControlBar ( & m_wndTextureBar , TRUE , TRUE )
>1293	ArgumentList	& m_wndTextureBar
>1294	Argument	TRUE
>1295	Identifier	TRUE
>1296	Argument	TRUE
>1297	Identifier	TRUE
>1298	Argument	& m_wndTextureBar
>1299	UnaryOp	& m_wndTextureBar
>1300	Identifier	m_wndTextureBar
>1301	UnaryOperator	&
>1302	Callee	ShowControlBar
>1303	Identifier	ShowControlBar
>1304	ExpressionStatement	 
>1305	CallExpression	ShowControlBar ( & m_wndTextureBar , FALSE , TRUE )
>1306	ArgumentList	& m_wndTextureBar
>1307	Argument	TRUE
>1308	Identifier	TRUE
>1309	Argument	FALSE
>1310	Identifier	FALSE
>1311	Argument	& m_wndTextureBar
>1312	UnaryOp	& m_wndTextureBar
>1313	Identifier	m_wndTextureBar
>1314	UnaryOperator	&
>1315	Callee	ShowControlBar
>1316	Identifier	ShowControlBar
>1317	Condition	 
>1318	UnaryOp	! g_PrefsDlg . m_bTextureBar
>1319	MemberAccess	g_PrefsDlg . m_bTextureBar
>1320	Identifier	m_bTextureBar
>1321	Identifier	g_PrefsDlg
>1322	UnaryOperator	!
>1323	ExpressionStatement	 
>1324	CallExpression	LoadBarState ( \"RadiantToolBars2\" )
>1325	ArgumentList	\"RadiantToolBars2\"
>1326	Argument	\"RadiantToolBars2\"
>1327	PrimaryExpression	\"RadiantToolBars2\"
>1328	Callee	LoadBarState
>1329	Identifier	LoadBarState
>1330	ExpressionStatement	 
>1331	CallExpression	SetButtonMenuStates ( )
>1332	ArgumentList	 
>1333	Callee	SetButtonMenuStates
>1334	Identifier	SetButtonMenuStates
>1335	ExpressionStatement	 
>1336	CallExpression	SetTexValStatus ( )
>1337	ArgumentList	 
>1338	Callee	SetTexValStatus
>1339	Identifier	SetTexValStatus
>1340	ExpressionStatement	 
>1341	CallExpression	SetGridStatus ( )
>1342	ArgumentList	 
>1343	Callee	SetGridStatus
>1344	Identifier	SetGridStatus
>1345	IfStatement	if ( g_PrefsDlg . m_bRunBefore == FALSE )
>1346	ElseStatement	else
>1347	CompoundStatement	 
>1348	IfStatement	if ( g_PrefsDlg . m_bLoadLastMap && g_PrefsDlg . m_strLastMap . GetLength ( ) > 0 )
>1349	ExpressionStatement	 
>1350	CallExpression	Map_LoadFile ( g_PrefsDlg . m_strLastMap . GetBuffer ( 0 ) )
>1351	ArgumentList	g_PrefsDlg . m_strLastMap . GetBuffer ( 0 )
>1352	Argument	g_PrefsDlg . m_strLastMap . GetBuffer ( 0 )
>1353	CallExpression	g_PrefsDlg . m_strLastMap . GetBuffer ( 0 )
>1354	ArgumentList	0
>1355	Argument	0
>1356	PrimaryExpression	0
>1357	Callee	g_PrefsDlg . m_strLastMap . GetBuffer
>1358	MemberAccess	g_PrefsDlg . m_strLastMap . GetBuffer
>1359	Identifier	GetBuffer
>1360	MemberAccess	g_PrefsDlg . m_strLastMap
>1361	Identifier	m_strLastMap
>1362	Identifier	g_PrefsDlg
>1363	Callee	Map_LoadFile
>1364	Identifier	Map_LoadFile
>1365	Condition	 
>1366	AndExpression	g_PrefsDlg . m_bLoadLastMap && g_PrefsDlg . m_strLastMap . GetLength ( ) > 0
>1367	RelationalExpression	g_PrefsDlg . m_strLastMap . GetLength ( ) > 0
>1368	PrimaryExpression	0
>1369	CallExpression	g_PrefsDlg . m_strLastMap . GetLength ( )
>1370	ArgumentList	 
>1371	Callee	g_PrefsDlg . m_strLastMap . GetLength
>1372	MemberAccess	g_PrefsDlg . m_strLastMap . GetLength
>1373	Identifier	GetLength
>1374	MemberAccess	g_PrefsDlg . m_strLastMap
>1375	Identifier	m_strLastMap
>1376	Identifier	g_PrefsDlg
>1377	MemberAccess	g_PrefsDlg . m_bLoadLastMap
>1378	Identifier	m_bLoadLastMap
>1379	Identifier	g_PrefsDlg
>1380	IfStatement	if ( g_PrefsDlg . m_bSGIOpenGL )
>1381	CompoundStatement	 
>1382	ExpressionStatement	 
>1383	CallExpression	PostMessage ( WM_COMMAND , ID_SELECTION_DELETE , 0 )
>1384	ArgumentList	WM_COMMAND
>1385	Argument	0
>1386	PrimaryExpression	0
>1387	Argument	ID_SELECTION_DELETE
>1388	Identifier	ID_SELECTION_DELETE
>1389	Argument	WM_COMMAND
>1390	Identifier	WM_COMMAND
>1391	Callee	PostMessage
>1392	Identifier	PostMessage
>1393	ExpressionStatement	 
>1394	CallExpression	Sys_UpdateWindows ( W_ALL )
>1395	ArgumentList	W_ALL
>1396	Argument	W_ALL
>1397	Identifier	W_ALL
>1398	Callee	Sys_UpdateWindows
>1399	Identifier	Sys_UpdateWindows
>1400	ExpressionStatement	 
>1401	CallExpression	Select_Brush ( pBrush )
>1402	ArgumentList	pBrush
>1403	Argument	pBrush
>1404	Identifier	pBrush
>1405	Callee	Select_Brush
>1406	Identifier	Select_Brush
>1407	ExpressionStatement	 
>1408	CallExpression	Brush_AddToList ( pBrush , & active_brushes )
>1409	ArgumentList	pBrush
>1410	Argument	& active_brushes
>1411	UnaryOp	& active_brushes
>1412	Identifier	active_brushes
>1413	UnaryOperator	&
>1414	Argument	pBrush
>1415	Identifier	pBrush
>1416	Callee	Brush_AddToList
>1417	Identifier	Brush_AddToList
>1418	ExpressionStatement	 
>1419	CallExpression	Brush_Build ( pBrush )
>1420	ArgumentList	pBrush
>1421	Argument	pBrush
>1422	Identifier	pBrush
>1423	Callee	Brush_Build
>1424	Identifier	Brush_Build
>1425	ExpressionStatement	 
>1426	CallExpression	Entity_LinkBrush ( world_entity , pBrush )
>1427	ArgumentList	world_entity
>1428	Argument	pBrush
>1429	Identifier	pBrush
>1430	Argument	world_entity
>1431	Identifier	world_entity
>1432	Callee	Entity_LinkBrush
>1433	Identifier	Entity_LinkBrush
>1434	IdentifierDeclStatement	 
>1435	IdentifierDecl	* pBrush = Brush_Create ( vMin , vMax , & g_qeglobals . d_texturewin . texdef )
>1436	AssignmentExpr	* pBrush = Brush_Create ( vMin , vMax , & g_qeglobals . d_texturewin . texdef )
>1437	CallExpression	Brush_Create ( vMin , vMax , & g_qeglobals . d_texturewin . texdef )
>1438	ArgumentList	vMin
>1439	Argument	& g_qeglobals . d_texturewin . texdef
>1440	UnaryOp	& g_qeglobals . d_texturewin . texdef
>1441	MemberAccess	g_qeglobals . d_texturewin . texdef
>1442	Identifier	texdef
>1443	MemberAccess	g_qeglobals . d_texturewin
>1444	Identifier	d_texturewin
>1445	Identifier	g_qeglobals
>1446	UnaryOperator	&
>1447	Argument	vMax
>1448	Identifier	vMax
>1449	Argument	vMin
>1450	Identifier	vMin
>1451	Callee	Brush_Create
>1452	Identifier	Brush_Create
>1453	Identifier	pBrush
>1454	Identifier	pBrush
>1455	IdentifierDeclType	brush_t *
>1456	ExpressionStatement	 
>1457	AssignmentExpr	vMax [ 0 ] = vMax [ 1 ] = vMax [ 2 ] = 8
>1458	AssignmentExpr	vMax [ 1 ] = vMax [ 2 ] = 8
>1459	AssignmentExpr	vMax [ 2 ] = 8
>1460	PrimaryExpression	8
>1461	ArrayIndexing	vMax [ 2 ]
>1462	PrimaryExpression	2
>1463	Identifier	vMax
>1464	ArrayIndexing	vMax [ 1 ]
>1465	PrimaryExpression	1
>1466	Identifier	vMax
>1467	ArrayIndexing	vMax [ 0 ]
>1468	PrimaryExpression	0
>1469	Identifier	vMax
>1470	ExpressionStatement	 
>1471	AssignmentExpr	vMin [ 0 ] = vMin [ 1 ] = vMin [ 2 ] = 0
>1472	AssignmentExpr	vMin [ 1 ] = vMin [ 2 ] = 0
>1473	AssignmentExpr	vMin [ 2 ] = 0
>1474	PrimaryExpression	0
>1475	ArrayIndexing	vMin [ 2 ]
>1476	PrimaryExpression	2
>1477	Identifier	vMin
>1478	ArrayIndexing	vMin [ 1 ]
>1479	PrimaryExpression	1
>1480	Identifier	vMin
>1481	ArrayIndexing	vMin [ 0 ]
>1482	PrimaryExpression	0
>1483	Identifier	vMin
>1484	IdentifierDeclStatement	 
>1485	IdentifierDecl	vMax
>1486	Identifier	vMax
>1487	IdentifierDeclType	vec3_t
>1488	IdentifierDecl	vMin
>1489	Identifier	vMin
>1490	IdentifierDeclType	vec3_t
>1491	Condition	 
>1492	MemberAccess	g_PrefsDlg . m_bSGIOpenGL
>1493	Identifier	m_bSGIOpenGL
>1494	Identifier	g_PrefsDlg
>1495	CompoundStatement	 
>1496	ExpressionStatement	 
>1497	CallExpression	g_PrefsDlg . SavePrefs ( )
>1498	ArgumentList	 
>1499	Callee	g_PrefsDlg . SavePrefs
>1500	MemberAccess	g_PrefsDlg . SavePrefs
>1501	Identifier	SavePrefs
>1502	Identifier	g_PrefsDlg
>1503	ExpressionStatement	 
>1504	AssignmentExpr	g_PrefsDlg . m_bRunBefore = TRUE
>1505	Identifier	TRUE
>1506	MemberAccess	g_PrefsDlg . m_bRunBefore
>1507	Identifier	m_bRunBefore
>1508	Identifier	g_PrefsDlg
>1509	Condition	 
>1510	EqualityExpression	g_PrefsDlg . m_bRunBefore == FALSE
>1511	Identifier	FALSE
>1512	MemberAccess	g_PrefsDlg . m_bRunBefore
>1513	Identifier	m_bRunBefore
>1514	Identifier	g_PrefsDlg
>1515	ExpressionStatement	 
>1516	CallExpression	OnPluginsRefresh ( )
>1517	ArgumentList	 
>1518	Callee	OnPluginsRefresh
>1519	Identifier	OnPluginsRefresh
>1520	ExpressionStatement	 
>1521	CallExpression	m_wndStatusBar . SetFont ( pFont )
>1522	ArgumentList	pFont
>1523	Argument	pFont
>1524	Identifier	pFont
>1525	Callee	m_wndStatusBar . SetFont
>1526	MemberAccess	m_wndStatusBar . SetFont
>1527	Identifier	SetFont
>1528	Identifier	m_wndStatusBar
>1529	ExpressionStatement	 
>1530	CallExpression	pFont -> CreatePointFont ( g_PrefsDlg . m_nStatusSize * 10 , \"Arial\" )
>1531	ArgumentList	g_PrefsDlg . m_nStatusSize * 10
>1532	Argument	\"Arial\"
>1533	PrimaryExpression	\"Arial\"
>1534	Argument	g_PrefsDlg . m_nStatusSize * 10
>1535	MultiplicativeExpression	g_PrefsDlg . m_nStatusSize * 10
>1536	PrimaryExpression	10
>1537	MemberAccess	g_PrefsDlg . m_nStatusSize
>1538	Identifier	m_nStatusSize
>1539	Identifier	g_PrefsDlg
>1540	Callee	pFont -> CreatePointFont
>1541	PtrMemberAccess	pFont -> CreatePointFont
>1542	Identifier	CreatePointFont
>1543	Identifier	pFont
>1544	IdentifierDeclStatement	 
>1545	IdentifierDecl	* pFont = new CFont ( )
>1546	AssignmentExpr	* pFont = new CFont ( )
>1547	UnaryExpression	new CFont ( )
>1548	Identifier	pFont
>1549	Identifier	pFont
>1550	IdentifierDeclType	CFont *
>1551	ExpressionStatement	 
>1552	CallExpression	ShowMenuItemKeyBindings ( pMenu )
>1553	ArgumentList	pMenu
>1554	Argument	pMenu
>1555	Identifier	pMenu
>1556	Callee	ShowMenuItemKeyBindings
>1557	Identifier	ShowMenuItemKeyBindings
>1558	ExpressionStatement	 
>1559	CallExpression	LoadCommandMap ( )
>1560	ArgumentList	 
>1561	Callee	LoadCommandMap
>1562	Identifier	LoadCommandMap
>1563	ExpressionStatement	 
>1564	AssignmentExpr	m_bAutoMenuEnable = FALSE
>1565	Identifier	FALSE
>1566	Identifier	m_bAutoMenuEnable
>1567	ExpressionStatement	 
>1568	AssignmentExpr	g_qeglobals . d_lpMruMenu = CreateMruMenuDefault ( )
>1569	CallExpression	CreateMruMenuDefault ( )
>1570	ArgumentList	 
>1571	Callee	CreateMruMenuDefault
>1572	Identifier	CreateMruMenuDefault
>1573	MemberAccess	g_qeglobals . d_lpMruMenu
>1574	Identifier	d_lpMruMenu
>1575	Identifier	g_qeglobals
>1576	ExpressionStatement	 
>1577	CallExpression	DockControlBar ( & m_wndTextureBar )
>1578	ArgumentList	& m_wndTextureBar
>1579	Argument	& m_wndTextureBar
>1580	UnaryOp	& m_wndTextureBar
>1581	Identifier	m_wndTextureBar
>1582	UnaryOperator	&
>1583	Callee	DockControlBar
>1584	Identifier	DockControlBar
>1585	ExpressionStatement	 
>1586	CallExpression	m_wndTextureBar . EnableDocking ( CBRS_ALIGN_ANY )
>1587	ArgumentList	CBRS_ALIGN_ANY
>1588	Argument	CBRS_ALIGN_ANY
>1589	Identifier	CBRS_ALIGN_ANY
>1590	Callee	m_wndTextureBar . EnableDocking
>1591	MemberAccess	m_wndTextureBar . EnableDocking
>1592	Identifier	EnableDocking
>1593	Identifier	m_wndTextureBar
>1594	ExpressionStatement	 
>1595	CallExpression	m_wndTextureBar . Create ( this , IDD_TEXTUREBAR , CBRS_BOTTOM , 7433 )
>1596	ArgumentList	this
>1597	Argument	7433
>1598	PrimaryExpression	7433
>1599	Argument	CBRS_BOTTOM
>1600	Identifier	CBRS_BOTTOM
>1601	Argument	IDD_TEXTUREBAR
>1602	Identifier	IDD_TEXTUREBAR
>1603	Argument	this
>1604	Identifier	this
>1605	Callee	m_wndTextureBar . Create
>1606	MemberAccess	m_wndTextureBar . Create
>1607	Identifier	Create
>1608	Identifier	m_wndTextureBar
>1609	ExpressionStatement	 
>1610	CallExpression	g_pParentWnd -> SetMenu ( pMenu )
>1611	ArgumentList	pMenu
>1612	Argument	pMenu
>1613	Identifier	pMenu
>1614	Callee	g_pParentWnd -> SetMenu
>1615	PtrMemberAccess	g_pParentWnd -> SetMenu
>1616	Identifier	SetMenu
>1617	Identifier	g_pParentWnd
>1618	ExpressionStatement	 
>1619	CallExpression	pMenu -> LoadMenu ( IDR_MENU_QUAKE3 )
>1620	ArgumentList	IDR_MENU_QUAKE3
>1621	Argument	IDR_MENU_QUAKE3
>1622	Identifier	IDR_MENU_QUAKE3
>1623	Callee	pMenu -> LoadMenu
>1624	PtrMemberAccess	pMenu -> LoadMenu
>1625	Identifier	LoadMenu
>1626	Identifier	pMenu
>1627	IdentifierDeclStatement	 
>1628	IdentifierDecl	* pMenu = new CMenu ( )
>1629	AssignmentExpr	* pMenu = new CMenu ( )
>1630	UnaryExpression	new CMenu ( )
>1631	Identifier	pMenu
>1632	Identifier	pMenu
>1633	IdentifierDeclType	CMenu *
>1634	ExpressionStatement	 
>1635	CallExpression	g_pParentWnd -> GetMenu ( ) -> DestroyMenu ( )
>1636	ArgumentList	 
>1637	Callee	g_pParentWnd -> GetMenu ( ) -> DestroyMenu
>1638	PtrMemberAccess	g_pParentWnd -> GetMenu ( ) -> DestroyMenu
>1639	Identifier	DestroyMenu
>1640	CallExpression	g_pParentWnd -> GetMenu ( )
>1641	ArgumentList	 
>1642	Callee	g_pParentWnd -> GetMenu
>1643	PtrMemberAccess	g_pParentWnd -> GetMenu
>1644	Identifier	GetMenu
>1645	Identifier	g_pParentWnd
>1646	ExpressionStatement	 
>1647	AssignmentExpr	g_nScaleHow = 0
>1648	PrimaryExpression	0
>1649	Identifier	g_nScaleHow
>1650	IfStatement	if ( nIndex >= 0 )
>1651	CompoundStatement	 
>1652	ExpressionStatement	 
>1653	CallExpression	m_wndToolBar . SetButtonInfo ( nIndex , nID , TBBS_CHECKBOX , nImage )
>1654	ArgumentList	nIndex
>1655	Argument	nImage
>1656	Identifier	nImage
>1657	Argument	TBBS_CHECKBOX
>1658	Identifier	TBBS_CHECKBOX
>1659	Argument	nID
>1660	Identifier	nID
>1661	Argument	nIndex
>1662	Identifier	nIndex
>1663	Callee	m_wndToolBar . SetButtonInfo
>1664	MemberAccess	m_wndToolBar . SetButtonInfo
>1665	Identifier	SetButtonInfo
>1666	Identifier	m_wndToolBar
>1667	ExpressionStatement	 
>1668	CallExpression	m_wndToolBar . GetButtonInfo ( nIndex , nID , nStyle , nImage )
>1669	ArgumentList	nIndex
>1670	Argument	nImage
>1671	Identifier	nImage
>1672	Argument	nStyle
>1673	Identifier	nStyle
>1674	Argument	nID
>1675	Identifier	nID
>1676	Argument	nIndex
>1677	Identifier	nIndex
>1678	Callee	m_wndToolBar . GetButtonInfo
>1679	MemberAccess	m_wndToolBar . GetButtonInfo
>1680	Identifier	GetButtonInfo
>1681	Identifier	m_wndToolBar
>1682	Condition	 
>1683	RelationalExpression	nIndex >= 0
>1684	PrimaryExpression	0
>1685	Identifier	nIndex
>1686	ExpressionStatement	 
>1687	AssignmentExpr	nIndex = m_wndToolBar . CommandToIndex ( ID_PATCH_INSDEL )
>1688	CallExpression	m_wndToolBar . CommandToIndex ( ID_PATCH_INSDEL )
>1689	ArgumentList	ID_PATCH_INSDEL
>1690	Argument	ID_PATCH_INSDEL
>1691	Identifier	ID_PATCH_INSDEL
>1692	Callee	m_wndToolBar . CommandToIndex
>1693	MemberAccess	m_wndToolBar . CommandToIndex
>1694	Identifier	CommandToIndex
>1695	Identifier	m_wndToolBar
>1696	Identifier	nIndex
>1697	IfStatement	if ( nIndex >= 0 )
>1698	CompoundStatement	 
>1699	ExpressionStatement	 
>1700	CallExpression	m_wndToolBar . SetButtonInfo ( nIndex , nID , TBBS_CHECKBOX , nImage )
>1701	ArgumentList	nIndex
>1702	Argument	nImage
>1703	Identifier	nImage
>1704	Argument	TBBS_CHECKBOX
>1705	Identifier	TBBS_CHECKBOX
>1706	Argument	nID
>1707	Identifier	nID
>1708	Argument	nIndex
>1709	Identifier	nIndex
>1710	Callee	m_wndToolBar . SetButtonInfo
>1711	MemberAccess	m_wndToolBar . SetButtonInfo
>1712	Identifier	SetButtonInfo
>1713	Identifier	m_wndToolBar
>1714	ExpressionStatement	 
>1715	CallExpression	m_wndToolBar . GetButtonInfo ( nIndex , nID , nStyle , nImage )
>1716	ArgumentList	nIndex
>1717	Argument	nImage
>1718	Identifier	nImage
>1719	Argument	nStyle
>1720	Identifier	nStyle
>1721	Argument	nID
>1722	Identifier	nID
>1723	Argument	nIndex
>1724	Identifier	nIndex
>1725	Callee	m_wndToolBar . GetButtonInfo
>1726	MemberAccess	m_wndToolBar . GetButtonInfo
>1727	Identifier	GetButtonInfo
>1728	Identifier	m_wndToolBar
>1729	Condition	 
>1730	RelationalExpression	nIndex >= 0
>1731	PrimaryExpression	0
>1732	Identifier	nIndex
>1733	ExpressionStatement	 
>1734	AssignmentExpr	nIndex = m_wndToolBar . CommandToIndex ( ID_PATCH_BEND )
>1735	CallExpression	m_wndToolBar . CommandToIndex ( ID_PATCH_BEND )
>1736	ArgumentList	ID_PATCH_BEND
>1737	Argument	ID_PATCH_BEND
>1738	Identifier	ID_PATCH_BEND
>1739	Callee	m_wndToolBar . CommandToIndex
>1740	MemberAccess	m_wndToolBar . CommandToIndex
>1741	Identifier	CommandToIndex
>1742	Identifier	m_wndToolBar
>1743	Identifier	nIndex
>1744	IfStatement	if ( nIndex >= 0 )
>1745	CompoundStatement	 
>1746	ExpressionStatement	 
>1747	CallExpression	m_wndToolBar . GetToolBarCtrl ( ) . CheckButton ( ID_PATCH_DRILLDOWN , TRUE )
>1748	ArgumentList	ID_PATCH_DRILLDOWN
>1749	Argument	TRUE
>1750	Identifier	TRUE
>1751	Argument	ID_PATCH_DRILLDOWN
>1752	Identifier	ID_PATCH_DRILLDOWN
>1753	Callee	m_wndToolBar . GetToolBarCtrl ( ) . CheckButton
>1754	MemberAccess	m_wndToolBar . GetToolBarCtrl ( ) . CheckButton
>1755	Identifier	CheckButton
>1756	CallExpression	m_wndToolBar . GetToolBarCtrl ( )
>1757	ArgumentList	 
>1758	Callee	m_wndToolBar . GetToolBarCtrl
>1759	MemberAccess	m_wndToolBar . GetToolBarCtrl
>1760	Identifier	GetToolBarCtrl
>1761	Identifier	m_wndToolBar
>1762	ExpressionStatement	 
>1763	CallExpression	m_wndToolBar . SetButtonInfo ( nIndex , nID , TBBS_CHECKBOX , nImage )
>1764	ArgumentList	nIndex
>1765	Argument	nImage
>1766	Identifier	nImage
>1767	Argument	TBBS_CHECKBOX
>1768	Identifier	TBBS_CHECKBOX
>1769	Argument	nID
>1770	Identifier	nID
>1771	Argument	nIndex
>1772	Identifier	nIndex
>1773	Callee	m_wndToolBar . SetButtonInfo
>1774	MemberAccess	m_wndToolBar . SetButtonInfo
>1775	Identifier	SetButtonInfo
>1776	Identifier	m_wndToolBar
>1777	ExpressionStatement	 
>1778	CallExpression	m_wndToolBar . GetButtonInfo ( nIndex , nID , nStyle , nImage )
>1779	ArgumentList	nIndex
>1780	Argument	nImage
>1781	Identifier	nImage
>1782	Argument	nStyle
>1783	Identifier	nStyle
>1784	Argument	nID
>1785	Identifier	nID
>1786	Argument	nIndex
>1787	Identifier	nIndex
>1788	Callee	m_wndToolBar . GetButtonInfo
>1789	MemberAccess	m_wndToolBar . GetButtonInfo
>1790	Identifier	GetButtonInfo
>1791	Identifier	m_wndToolBar
>1792	Condition	 
>1793	RelationalExpression	nIndex >= 0
>1794	PrimaryExpression	0
>1795	Identifier	nIndex
>1796	ExpressionStatement	 
>1797	AssignmentExpr	nIndex = m_wndToolBar . CommandToIndex ( ID_PATCH_DRILLDOWN )
>1798	CallExpression	m_wndToolBar . CommandToIndex ( ID_PATCH_DRILLDOWN )
>1799	ArgumentList	ID_PATCH_DRILLDOWN
>1800	Argument	ID_PATCH_DRILLDOWN
>1801	Identifier	ID_PATCH_DRILLDOWN
>1802	Callee	m_wndToolBar . CommandToIndex
>1803	MemberAccess	m_wndToolBar . CommandToIndex
>1804	Identifier	CommandToIndex
>1805	Identifier	m_wndToolBar
>1806	Identifier	nIndex
>1807	IfStatement	if ( nIndex >= 0 )
>1808	CompoundStatement	 
>1809	ExpressionStatement	 
>1810	CallExpression	m_wndToolBar . GetToolBarCtrl ( ) . CheckButton ( ID_PATCH_WELD , TRUE )
>1811	ArgumentList	ID_PATCH_WELD
>1812	Argument	TRUE
>1813	Identifier	TRUE
>1814	Argument	ID_PATCH_WELD
>1815	Identifier	ID_PATCH_WELD
>1816	Callee	m_wndToolBar . GetToolBarCtrl ( ) . CheckButton
>1817	MemberAccess	m_wndToolBar . GetToolBarCtrl ( ) . CheckButton
>1818	Identifier	CheckButton
>1819	CallExpression	m_wndToolBar . GetToolBarCtrl ( )
>1820	ArgumentList	 
>1821	Callee	m_wndToolBar . GetToolBarCtrl
>1822	MemberAccess	m_wndToolBar . GetToolBarCtrl
>1823	Identifier	GetToolBarCtrl
>1824	Identifier	m_wndToolBar
>1825	ExpressionStatement	 
>1826	CallExpression	m_wndToolBar . SetButtonInfo ( nIndex , nID , TBBS_CHECKBOX , nImage )
>1827	ArgumentList	nIndex
>1828	Argument	nImage
>1829	Identifier	nImage
>1830	Argument	TBBS_CHECKBOX
>1831	Identifier	TBBS_CHECKBOX
>1832	Argument	nID
>1833	Identifier	nID
>1834	Argument	nIndex
>1835	Identifier	nIndex
>1836	Callee	m_wndToolBar . SetButtonInfo
>1837	MemberAccess	m_wndToolBar . SetButtonInfo
>1838	Identifier	SetButtonInfo
>1839	Identifier	m_wndToolBar
>1840	ExpressionStatement	 
>1841	CallExpression	m_wndToolBar . GetButtonInfo ( nIndex , nID , nStyle , nImage )
>1842	ArgumentList	nIndex
>1843	Argument	nImage
>1844	Identifier	nImage
>1845	Argument	nStyle
>1846	Identifier	nStyle
>1847	Argument	nID
>1848	Identifier	nID
>1849	Argument	nIndex
>1850	Identifier	nIndex
>1851	Callee	m_wndToolBar . GetButtonInfo
>1852	MemberAccess	m_wndToolBar . GetButtonInfo
>1853	Identifier	GetButtonInfo
>1854	Identifier	m_wndToolBar
>1855	Condition	 
>1856	RelationalExpression	nIndex >= 0
>1857	PrimaryExpression	0
>1858	Identifier	nIndex
>1859	ExpressionStatement	 
>1860	AssignmentExpr	nIndex = m_wndToolBar . CommandToIndex ( ID_PATCH_WELD )
>1861	CallExpression	m_wndToolBar . CommandToIndex ( ID_PATCH_WELD )
>1862	ArgumentList	ID_PATCH_WELD
>1863	Argument	ID_PATCH_WELD
>1864	Identifier	ID_PATCH_WELD
>1865	Callee	m_wndToolBar . CommandToIndex
>1866	MemberAccess	m_wndToolBar . CommandToIndex
>1867	Identifier	CommandToIndex
>1868	Identifier	m_wndToolBar
>1869	Identifier	nIndex
>1870	IfStatement	if ( nIndex >= 0 )
>1871	CompoundStatement	 
>1872	ExpressionStatement	 
>1873	CallExpression	m_wndToolBar . GetToolBarCtrl ( ) . CheckButton ( ID_PATCH_SHOWBOUNDINGBOX , TRUE )
>1874	ArgumentList	ID_PATCH_SHOWBOUNDINGBOX
>1875	Argument	TRUE
>1876	Identifier	TRUE
>1877	Argument	ID_PATCH_SHOWBOUNDINGBOX
>1878	Identifier	ID_PATCH_SHOWBOUNDINGBOX
>1879	Callee	m_wndToolBar . GetToolBarCtrl ( ) . CheckButton
>1880	MemberAccess	m_wndToolBar . GetToolBarCtrl ( ) . CheckButton
>1881	Identifier	CheckButton
>1882	CallExpression	m_wndToolBar . GetToolBarCtrl ( )
>1883	ArgumentList	 
>1884	Callee	m_wndToolBar . GetToolBarCtrl
>1885	MemberAccess	m_wndToolBar . GetToolBarCtrl
>1886	Identifier	GetToolBarCtrl
>1887	Identifier	m_wndToolBar
>1888	ExpressionStatement	 
>1889	CallExpression	m_wndToolBar . SetButtonInfo ( nIndex , nID , TBBS_CHECKBOX , nImage )
>1890	ArgumentList	nIndex
>1891	Argument	nImage
>1892	Identifier	nImage
>1893	Argument	TBBS_CHECKBOX
>1894	Identifier	TBBS_CHECKBOX
>1895	Argument	nID
>1896	Identifier	nID
>1897	Argument	nIndex
>1898	Identifier	nIndex
>1899	Callee	m_wndToolBar . SetButtonInfo
>1900	MemberAccess	m_wndToolBar . SetButtonInfo
>1901	Identifier	SetButtonInfo
>1902	Identifier	m_wndToolBar
>1903	ExpressionStatement	 
>1904	CallExpression	m_wndToolBar . GetButtonInfo ( nIndex , nID , nStyle , nImage )
>1905	ArgumentList	nIndex
>1906	Argument	nImage
>1907	Identifier	nImage
>1908	Argument	nStyle
>1909	Identifier	nStyle
>1910	Argument	nID
>1911	Identifier	nID
>1912	Argument	nIndex
>1913	Identifier	nIndex
>1914	Callee	m_wndToolBar . GetButtonInfo
>1915	MemberAccess	m_wndToolBar . GetButtonInfo
>1916	Identifier	GetButtonInfo
>1917	Identifier	m_wndToolBar
>1918	Condition	 
>1919	RelationalExpression	nIndex >= 0
>1920	PrimaryExpression	0
>1921	Identifier	nIndex
>1922	ExpressionStatement	 
>1923	AssignmentExpr	nIndex = m_wndToolBar . CommandToIndex ( ID_PATCH_SHOWBOUNDINGBOX )
>1924	CallExpression	m_wndToolBar . CommandToIndex ( ID_PATCH_SHOWBOUNDINGBOX )
>1925	ArgumentList	ID_PATCH_SHOWBOUNDINGBOX
>1926	Argument	ID_PATCH_SHOWBOUNDINGBOX
>1927	Identifier	ID_PATCH_SHOWBOUNDINGBOX
>1928	Callee	m_wndToolBar . CommandToIndex
>1929	MemberAccess	m_wndToolBar . CommandToIndex
>1930	Identifier	CommandToIndex
>1931	Identifier	m_wndToolBar
>1932	Identifier	nIndex
>1933	IfStatement	if ( nIndex >= 0 )
>1934	CompoundStatement	 
>1935	ExpressionStatement	 
>1936	CallExpression	m_wndToolBar . SetButtonInfo ( nIndex , nID , TBBS_CHECKBOX , nImage )
>1937	ArgumentList	nIndex
>1938	Argument	nImage
>1939	Identifier	nImage
>1940	Argument	TBBS_CHECKBOX
>1941	Identifier	TBBS_CHECKBOX
>1942	Argument	nID
>1943	Identifier	nID
>1944	Argument	nIndex
>1945	Identifier	nIndex
>1946	Callee	m_wndToolBar . SetButtonInfo
>1947	MemberAccess	m_wndToolBar . SetButtonInfo
>1948	Identifier	SetButtonInfo
>1949	Identifier	m_wndToolBar
>1950	ExpressionStatement	 
>1951	CallExpression	m_wndToolBar . GetButtonInfo ( nIndex , nID , nStyle , nImage )
>1952	ArgumentList	nIndex
>1953	Argument	nImage
>1954	Identifier	nImage
>1955	Argument	nStyle
>1956	Identifier	nStyle
>1957	Argument	nID
>1958	Identifier	nID
>1959	Argument	nIndex
>1960	Identifier	nIndex
>1961	Callee	m_wndToolBar . GetButtonInfo
>1962	MemberAccess	m_wndToolBar . GetButtonInfo
>1963	Identifier	GetButtonInfo
>1964	Identifier	m_wndToolBar
>1965	Condition	 
>1966	RelationalExpression	nIndex >= 0
>1967	PrimaryExpression	0
>1968	Identifier	nIndex
>1969	ExpressionStatement	 
>1970	AssignmentExpr	nIndex = m_wndToolBar . CommandToIndex ( ID_DONTSELECTCURVE )
>1971	CallExpression	m_wndToolBar . CommandToIndex ( ID_DONTSELECTCURVE )
>1972	ArgumentList	ID_DONTSELECTCURVE
>1973	Argument	ID_DONTSELECTCURVE
>1974	Identifier	ID_DONTSELECTCURVE
>1975	Callee	m_wndToolBar . CommandToIndex
>1976	MemberAccess	m_wndToolBar . CommandToIndex
>1977	Identifier	CommandToIndex
>1978	Identifier	m_wndToolBar
>1979	Identifier	nIndex
>1980	IfStatement	if ( nIndex >= 0 )
>1981	CompoundStatement	 
>1982	ExpressionStatement	 
>1983	CallExpression	m_wndToolBar . GetToolBarCtrl ( ) . CheckButton ( ID_SCALELOCKZ , FALSE )
>1984	ArgumentList	ID_SCALELOCKZ
>1985	Argument	FALSE
>1986	Identifier	FALSE
>1987	Argument	ID_SCALELOCKZ
>1988	Identifier	ID_SCALELOCKZ
>1989	Callee	m_wndToolBar . GetToolBarCtrl ( ) . CheckButton
>1990	MemberAccess	m_wndToolBar . GetToolBarCtrl ( ) . CheckButton
>1991	Identifier	CheckButton
>1992	CallExpression	m_wndToolBar . GetToolBarCtrl ( )
>1993	ArgumentList	 
>1994	Callee	m_wndToolBar . GetToolBarCtrl
>1995	MemberAccess	m_wndToolBar . GetToolBarCtrl
>1996	Identifier	GetToolBarCtrl
>1997	Identifier	m_wndToolBar
>1998	ExpressionStatement	 
>1999	CallExpression	m_wndToolBar . SetButtonInfo ( nIndex , nID , TBBS_CHECKBOX , nImage )
>2000	ArgumentList	nIndex
>2001	Argument	nImage
>2002	Identifier	nImage
>2003	Argument	TBBS_CHECKBOX
>2004	Identifier	TBBS_CHECKBOX
>2005	Argument	nID
>2006	Identifier	nID
>2007	Argument	nIndex
>2008	Identifier	nIndex
>2009	Callee	m_wndToolBar . SetButtonInfo
>2010	MemberAccess	m_wndToolBar . SetButtonInfo
>2011	Identifier	SetButtonInfo
>2012	Identifier	m_wndToolBar
>2013	ExpressionStatement	 
>2014	CallExpression	m_wndToolBar . GetButtonInfo ( nIndex , nID , nStyle , nImage )
>2015	ArgumentList	nIndex
>2016	Argument	nImage
>2017	Identifier	nImage
>2018	Argument	nStyle
>2019	Identifier	nStyle
>2020	Argument	nID
>2021	Identifier	nID
>2022	Argument	nIndex
>2023	Identifier	nIndex
>2024	Callee	m_wndToolBar . GetButtonInfo
>2025	MemberAccess	m_wndToolBar . GetButtonInfo
>2026	Identifier	GetButtonInfo
>2027	Identifier	m_wndToolBar
>2028	Condition	 
>2029	RelationalExpression	nIndex >= 0
>2030	PrimaryExpression	0
>2031	Identifier	nIndex
>2032	ExpressionStatement	 
>2033	AssignmentExpr	nIndex = m_wndToolBar . CommandToIndex ( ID_SCALELOCKZ )
>2034	CallExpression	m_wndToolBar . CommandToIndex ( ID_SCALELOCKZ )
>2035	ArgumentList	ID_SCALELOCKZ
>2036	Argument	ID_SCALELOCKZ
>2037	Identifier	ID_SCALELOCKZ
>2038	Callee	m_wndToolBar . CommandToIndex
>2039	MemberAccess	m_wndToolBar . CommandToIndex
>2040	Identifier	CommandToIndex
>2041	Identifier	m_wndToolBar
>2042	Identifier	nIndex
>2043	IfStatement	if ( nIndex >= 0 )
>2044	CompoundStatement	 
>2045	ExpressionStatement	 
>2046	CallExpression	m_wndToolBar . GetToolBarCtrl ( ) . CheckButton ( ID_SCALELOCKY , FALSE )
>2047	ArgumentList	ID_SCALELOCKY
>2048	Argument	FALSE
>2049	Identifier	FALSE
>2050	Argument	ID_SCALELOCKY
>2051	Identifier	ID_SCALELOCKY
>2052	Callee	m_wndToolBar . GetToolBarCtrl ( ) . CheckButton
>2053	MemberAccess	m_wndToolBar . GetToolBarCtrl ( ) . CheckButton
>2054	Identifier	CheckButton
>2055	CallExpression	m_wndToolBar . GetToolBarCtrl ( )
>2056	ArgumentList	 
>2057	Callee	m_wndToolBar . GetToolBarCtrl
>2058	MemberAccess	m_wndToolBar . GetToolBarCtrl
>2059	Identifier	GetToolBarCtrl
>2060	Identifier	m_wndToolBar
>2061	ExpressionStatement	 
>2062	CallExpression	m_wndToolBar . SetButtonInfo ( nIndex , nID , TBBS_CHECKBOX , nImage )
>2063	ArgumentList	nIndex
>2064	Argument	nImage
>2065	Identifier	nImage
>2066	Argument	TBBS_CHECKBOX
>2067	Identifier	TBBS_CHECKBOX
>2068	Argument	nID
>2069	Identifier	nID
>2070	Argument	nIndex
>2071	Identifier	nIndex
>2072	Callee	m_wndToolBar . SetButtonInfo
>2073	MemberAccess	m_wndToolBar . SetButtonInfo
>2074	Identifier	SetButtonInfo
>2075	Identifier	m_wndToolBar
>2076	ExpressionStatement	 
>2077	CallExpression	m_wndToolBar . GetButtonInfo ( nIndex , nID , nStyle , nImage )
>2078	ArgumentList	nIndex
>2079	Argument	nImage
>2080	Identifier	nImage
>2081	Argument	nStyle
>2082	Identifier	nStyle
>2083	Argument	nID
>2084	Identifier	nID
>2085	Argument	nIndex
>2086	Identifier	nIndex
>2087	Callee	m_wndToolBar . GetButtonInfo
>2088	MemberAccess	m_wndToolBar . GetButtonInfo
>2089	Identifier	GetButtonInfo
>2090	Identifier	m_wndToolBar
>2091	Condition	 
>2092	RelationalExpression	nIndex >= 0
>2093	PrimaryExpression	0
>2094	Identifier	nIndex
>2095	ExpressionStatement	 
>2096	AssignmentExpr	nIndex = m_wndToolBar . CommandToIndex ( ID_SCALELOCKY )
>2097	CallExpression	m_wndToolBar . CommandToIndex ( ID_SCALELOCKY )
>2098	ArgumentList	ID_SCALELOCKY
>2099	Argument	ID_SCALELOCKY
>2100	Identifier	ID_SCALELOCKY
>2101	Callee	m_wndToolBar . CommandToIndex
>2102	MemberAccess	m_wndToolBar . CommandToIndex
>2103	Identifier	CommandToIndex
>2104	Identifier	m_wndToolBar
>2105	Identifier	nIndex
>2106	IfStatement	if ( nIndex >= 0 )
>2107	CompoundStatement	 
>2108	ExpressionStatement	 
>2109	CallExpression	m_wndToolBar . GetToolBarCtrl ( ) . CheckButton ( ID_SCALELOCKX , FALSE )
>2110	ArgumentList	ID_SCALELOCKX
>2111	Argument	FALSE
>2112	Identifier	FALSE
>2113	Argument	ID_SCALELOCKX
>2114	Identifier	ID_SCALELOCKX
>2115	Callee	m_wndToolBar . GetToolBarCtrl ( ) . CheckButton
>2116	MemberAccess	m_wndToolBar . GetToolBarCtrl ( ) . CheckButton
>2117	Identifier	CheckButton
>2118	CallExpression	m_wndToolBar . GetToolBarCtrl ( )
>2119	ArgumentList	 
>2120	Callee	m_wndToolBar . GetToolBarCtrl
>2121	MemberAccess	m_wndToolBar . GetToolBarCtrl
>2122	Identifier	GetToolBarCtrl
>2123	Identifier	m_wndToolBar
>2124	ExpressionStatement	 
>2125	CallExpression	m_wndToolBar . SetButtonInfo ( nIndex , nID , TBBS_CHECKBOX , nImage )
>2126	ArgumentList	nIndex
>2127	Argument	nImage
>2128	Identifier	nImage
>2129	Argument	TBBS_CHECKBOX
>2130	Identifier	TBBS_CHECKBOX
>2131	Argument	nID
>2132	Identifier	nID
>2133	Argument	nIndex
>2134	Identifier	nIndex
>2135	Callee	m_wndToolBar . SetButtonInfo
>2136	MemberAccess	m_wndToolBar . SetButtonInfo
>2137	Identifier	SetButtonInfo
>2138	Identifier	m_wndToolBar
>2139	ExpressionStatement	 
>2140	CallExpression	m_wndToolBar . GetButtonInfo ( nIndex , nID , nStyle , nImage )
>2141	ArgumentList	nIndex
>2142	Argument	nImage
>2143	Identifier	nImage
>2144	Argument	nStyle
>2145	Identifier	nStyle
>2146	Argument	nID
>2147	Identifier	nID
>2148	Argument	nIndex
>2149	Identifier	nIndex
>2150	Callee	m_wndToolBar . GetButtonInfo
>2151	MemberAccess	m_wndToolBar . GetButtonInfo
>2152	Identifier	GetButtonInfo
>2153	Identifier	m_wndToolBar
>2154	Condition	 
>2155	RelationalExpression	nIndex >= 0
>2156	PrimaryExpression	0
>2157	Identifier	nIndex
>2158	ExpressionStatement	 
>2159	AssignmentExpr	nIndex = m_wndToolBar . CommandToIndex ( ID_SCALELOCKX )
>2160	CallExpression	m_wndToolBar . CommandToIndex ( ID_SCALELOCKX )
>2161	ArgumentList	ID_SCALELOCKX
>2162	Argument	ID_SCALELOCKX
>2163	Identifier	ID_SCALELOCKX
>2164	Callee	m_wndToolBar . CommandToIndex
>2165	MemberAccess	m_wndToolBar . CommandToIndex
>2166	Identifier	CommandToIndex
>2167	Identifier	m_wndToolBar
>2168	Identifier	nIndex
>2169	IfStatement	if ( nIndex >= 0 )
>2170	CompoundStatement	 
>2171	ExpressionStatement	 
>2172	CallExpression	m_wndToolBar . SetButtonInfo ( nIndex , nID , TBBS_CHECKBOX , nImage )
>2173	ArgumentList	nIndex
>2174	Argument	nImage
>2175	Identifier	nImage
>2176	Argument	TBBS_CHECKBOX
>2177	Identifier	TBBS_CHECKBOX
>2178	Argument	nID
>2179	Identifier	nID
>2180	Argument	nIndex
>2181	Identifier	nIndex
>2182	Callee	m_wndToolBar . SetButtonInfo
>2183	MemberAccess	m_wndToolBar . SetButtonInfo
>2184	Identifier	SetButtonInfo
>2185	Identifier	m_wndToolBar
>2186	ExpressionStatement	 
>2187	CallExpression	m_wndToolBar . GetButtonInfo ( nIndex , nID , nStyle , nImage )
>2188	ArgumentList	nIndex
>2189	Argument	nImage
>2190	Identifier	nImage
>2191	Argument	nStyle
>2192	Identifier	nStyle
>2193	Argument	nID
>2194	Identifier	nID
>2195	Argument	nIndex
>2196	Identifier	nIndex
>2197	Callee	m_wndToolBar . GetButtonInfo
>2198	MemberAccess	m_wndToolBar . GetButtonInfo
>2199	Identifier	GetButtonInfo
>2200	Identifier	m_wndToolBar
>2201	Condition	 
>2202	RelationalExpression	nIndex >= 0
>2203	PrimaryExpression	0
>2204	Identifier	nIndex
>2205	ExpressionStatement	 
>2206	AssignmentExpr	nIndex = m_wndToolBar . CommandToIndex ( ID_SELECT_MOUSESCALE )
>2207	CallExpression	m_wndToolBar . CommandToIndex ( ID_SELECT_MOUSESCALE )
>2208	ArgumentList	ID_SELECT_MOUSESCALE
>2209	Argument	ID_SELECT_MOUSESCALE
>2210	Identifier	ID_SELECT_MOUSESCALE
>2211	Callee	m_wndToolBar . CommandToIndex
>2212	MemberAccess	m_wndToolBar . CommandToIndex
>2213	Identifier	CommandToIndex
>2214	Identifier	m_wndToolBar
>2215	Identifier	nIndex
>2216	IfStatement	if ( nIndex >= 0 )
>2217	CompoundStatement	 
>2218	ExpressionStatement	 
>2219	CallExpression	m_wndToolBar . SetButtonInfo ( nIndex , nID , TBBS_CHECKBOX , nImage )
>2220	ArgumentList	nIndex
>2221	Argument	nImage
>2222	Identifier	nImage
>2223	Argument	TBBS_CHECKBOX
>2224	Identifier	TBBS_CHECKBOX
>2225	Argument	nID
>2226	Identifier	nID
>2227	Argument	nIndex
>2228	Identifier	nIndex
>2229	Callee	m_wndToolBar . SetButtonInfo
>2230	MemberAccess	m_wndToolBar . SetButtonInfo
>2231	Identifier	SetButtonInfo
>2232	Identifier	m_wndToolBar
>2233	ExpressionStatement	 
>2234	CallExpression	m_wndToolBar . GetButtonInfo ( nIndex , nID , nStyle , nImage )
>2235	ArgumentList	nIndex
>2236	Argument	nImage
>2237	Identifier	nImage
>2238	Argument	nStyle
>2239	Identifier	nStyle
>2240	Argument	nID
>2241	Identifier	nID
>2242	Argument	nIndex
>2243	Identifier	nIndex
>2244	Callee	m_wndToolBar . GetButtonInfo
>2245	MemberAccess	m_wndToolBar . GetButtonInfo
>2246	Identifier	GetButtonInfo
>2247	Identifier	m_wndToolBar
>2248	Condition	 
>2249	RelationalExpression	nIndex >= 0
>2250	PrimaryExpression	0
>2251	Identifier	nIndex
>2252	ExpressionStatement	 
>2253	AssignmentExpr	nIndex = m_wndToolBar . CommandToIndex ( ID_SELECT_MOUSEROTATE )
>2254	CallExpression	m_wndToolBar . CommandToIndex ( ID_SELECT_MOUSEROTATE )
>2255	ArgumentList	ID_SELECT_MOUSEROTATE
>2256	Argument	ID_SELECT_MOUSEROTATE
>2257	Identifier	ID_SELECT_MOUSEROTATE
>2258	Callee	m_wndToolBar . CommandToIndex
>2259	MemberAccess	m_wndToolBar . CommandToIndex
>2260	Identifier	CommandToIndex
>2261	Identifier	m_wndToolBar
>2262	Identifier	nIndex
>2263	IfStatement	if ( nIndex >= 0 )
>2264	CompoundStatement	 
>2265	ExpressionStatement	 
>2266	CallExpression	m_wndToolBar . SetButtonInfo ( nIndex , nID , TBBS_CHECKBOX , nImage )
>2267	ArgumentList	nIndex
>2268	Argument	nImage
>2269	Identifier	nImage
>2270	Argument	TBBS_CHECKBOX
>2271	Identifier	TBBS_CHECKBOX
>2272	Argument	nID
>2273	Identifier	nID
>2274	Argument	nIndex
>2275	Identifier	nIndex
>2276	Callee	m_wndToolBar . SetButtonInfo
>2277	MemberAccess	m_wndToolBar . SetButtonInfo
>2278	Identifier	SetButtonInfo
>2279	Identifier	m_wndToolBar
>2280	ExpressionStatement	 
>2281	CallExpression	m_wndToolBar . GetButtonInfo ( nIndex , nID , nStyle , nImage )
>2282	ArgumentList	nIndex
>2283	Argument	nImage
>2284	Identifier	nImage
>2285	Argument	nStyle
>2286	Identifier	nStyle
>2287	Argument	nID
>2288	Identifier	nID
>2289	Argument	nIndex
>2290	Identifier	nIndex
>2291	Callee	m_wndToolBar . GetButtonInfo
>2292	MemberAccess	m_wndToolBar . GetButtonInfo
>2293	Identifier	GetButtonInfo
>2294	Identifier	m_wndToolBar
>2295	Condition	 
>2296	RelationalExpression	nIndex >= 0
>2297	PrimaryExpression	0
>2298	Identifier	nIndex
>2299	ExpressionStatement	 
>2300	AssignmentExpr	nIndex = m_wndToolBar . CommandToIndex ( ID_VIEW_CLIPPER )
>2301	CallExpression	m_wndToolBar . CommandToIndex ( ID_VIEW_CLIPPER )
>2302	ArgumentList	ID_VIEW_CLIPPER
>2303	Argument	ID_VIEW_CLIPPER
>2304	Identifier	ID_VIEW_CLIPPER
>2305	Callee	m_wndToolBar . CommandToIndex
>2306	MemberAccess	m_wndToolBar . CommandToIndex
>2307	Identifier	CommandToIndex
>2308	Identifier	m_wndToolBar
>2309	Identifier	nIndex
>2310	IfStatement	if ( nIndex >= 0 )
>2311	CompoundStatement	 
>2312	ExpressionStatement	 
>2313	CallExpression	m_wndToolBar . SetButtonInfo ( nIndex , nID , TBBS_CHECKBOX , nImage )
>2314	ArgumentList	nIndex
>2315	Argument	nImage
>2316	Identifier	nImage
>2317	Argument	TBBS_CHECKBOX
>2318	Identifier	TBBS_CHECKBOX
>2319	Argument	nID
>2320	Identifier	nID
>2321	Argument	nIndex
>2322	Identifier	nIndex
>2323	Callee	m_wndToolBar . SetButtonInfo
>2324	MemberAccess	m_wndToolBar . SetButtonInfo
>2325	Identifier	SetButtonInfo
>2326	Identifier	m_wndToolBar
>2327	ExpressionStatement	 
>2328	CallExpression	m_wndToolBar . GetButtonInfo ( nIndex , nID , nStyle , nImage )
>2329	ArgumentList	nIndex
>2330	Argument	nImage
>2331	Identifier	nImage
>2332	Argument	nStyle
>2333	Identifier	nStyle
>2334	Argument	nID
>2335	Identifier	nID
>2336	Argument	nIndex
>2337	Identifier	nIndex
>2338	Callee	m_wndToolBar . GetButtonInfo
>2339	MemberAccess	m_wndToolBar . GetButtonInfo
>2340	Identifier	GetButtonInfo
>2341	Identifier	m_wndToolBar
>2342	Condition	 
>2343	RelationalExpression	nIndex >= 0
>2344	PrimaryExpression	0
>2345	Identifier	nIndex
>2346	ExpressionStatement	 
>2347	AssignmentExpr	nIndex = m_wndToolBar . CommandToIndex ( ID_VIEW_ENTITY )
>2348	CallExpression	m_wndToolBar . CommandToIndex ( ID_VIEW_ENTITY )
>2349	ArgumentList	ID_VIEW_ENTITY
>2350	Argument	ID_VIEW_ENTITY
>2351	Identifier	ID_VIEW_ENTITY
>2352	Callee	m_wndToolBar . CommandToIndex
>2353	MemberAccess	m_wndToolBar . CommandToIndex
>2354	Identifier	CommandToIndex
>2355	Identifier	m_wndToolBar
>2356	Identifier	nIndex
>2357	IfStatement	if ( nIndex >= 0 )
>2358	CompoundStatement	 
>2359	ExpressionStatement	 
>2360	CallExpression	m_wndToolBar . SetButtonInfo ( nIndex , nID , TBBS_CHECKBOX , nImage )
>2361	ArgumentList	nIndex
>2362	Argument	nImage
>2363	Identifier	nImage
>2364	Argument	TBBS_CHECKBOX
>2365	Identifier	TBBS_CHECKBOX
>2366	Argument	nID
>2367	Identifier	nID
>2368	Argument	nIndex
>2369	Identifier	nIndex
>2370	Callee	m_wndToolBar . SetButtonInfo
>2371	MemberAccess	m_wndToolBar . SetButtonInfo
>2372	Identifier	SetButtonInfo
>2373	Identifier	m_wndToolBar
>2374	ExpressionStatement	 
>2375	CallExpression	m_wndToolBar . GetButtonInfo ( nIndex , nID , nStyle , nImage )
>2376	ArgumentList	nIndex
>2377	Argument	nImage
>2378	Identifier	nImage
>2379	Argument	nStyle
>2380	Identifier	nStyle
>2381	Argument	nID
>2382	Identifier	nID
>2383	Argument	nIndex
>2384	Identifier	nIndex
>2385	Callee	m_wndToolBar . GetButtonInfo
>2386	MemberAccess	m_wndToolBar . GetButtonInfo
>2387	Identifier	GetButtonInfo
>2388	Identifier	m_wndToolBar
>2389	Condition	 
>2390	RelationalExpression	nIndex >= 0
>2391	PrimaryExpression	0
>2392	Identifier	nIndex
>2393	ExpressionStatement	 
>2394	AssignmentExpr	nIndex = m_wndToolBar . CommandToIndex ( ID_VIEW_CUBICCLIPPING )
>2395	CallExpression	m_wndToolBar . CommandToIndex ( ID_VIEW_CUBICCLIPPING )
>2396	ArgumentList	ID_VIEW_CUBICCLIPPING
>2397	Argument	ID_VIEW_CUBICCLIPPING
>2398	Identifier	ID_VIEW_CUBICCLIPPING
>2399	Callee	m_wndToolBar . CommandToIndex
>2400	MemberAccess	m_wndToolBar . CommandToIndex
>2401	Identifier	CommandToIndex
>2402	Identifier	m_wndToolBar
>2403	Identifier	nIndex
>2404	ExpressionStatement	 
>2405	AssignmentExpr	m_bCamPreview = true
>2406	Identifier	true
>2407	Identifier	m_bCamPreview
>2408	IfStatement	if ( nIndex >= 0 )
>2409	CompoundStatement	 
>2410	ExpressionStatement	 
>2411	CallExpression	m_wndToolBar . GetToolBarCtrl ( ) . CheckButton ( nID )
>2412	ArgumentList	nID
>2413	Argument	nID
>2414	Identifier	nID
>2415	Callee	m_wndToolBar . GetToolBarCtrl ( ) . CheckButton
>2416	MemberAccess	m_wndToolBar . GetToolBarCtrl ( ) . CheckButton
>2417	Identifier	CheckButton
>2418	CallExpression	m_wndToolBar . GetToolBarCtrl ( )
>2419	ArgumentList	 
>2420	Callee	m_wndToolBar . GetToolBarCtrl
>2421	MemberAccess	m_wndToolBar . GetToolBarCtrl
>2422	Identifier	GetToolBarCtrl
>2423	Identifier	m_wndToolBar
>2424	ExpressionStatement	 
>2425	CallExpression	m_wndToolBar . SetButtonInfo ( nIndex , nID , TBBS_CHECKBOX , nImage )
>2426	ArgumentList	nIndex
>2427	Argument	nImage
>2428	Identifier	nImage
>2429	Argument	TBBS_CHECKBOX
>2430	Identifier	TBBS_CHECKBOX
>2431	Argument	nID
>2432	Identifier	nID
>2433	Argument	nIndex
>2434	Identifier	nIndex
>2435	Callee	m_wndToolBar . SetButtonInfo
>2436	MemberAccess	m_wndToolBar . SetButtonInfo
>2437	Identifier	SetButtonInfo
>2438	Identifier	m_wndToolBar
>2439	ExpressionStatement	 
>2440	CallExpression	m_wndToolBar . GetButtonInfo ( nIndex , nID , nStyle , nImage )
>2441	ArgumentList	nIndex
>2442	Argument	nImage
>2443	Identifier	nImage
>2444	Argument	nStyle
>2445	Identifier	nStyle
>2446	Argument	nID
>2447	Identifier	nID
>2448	Argument	nIndex
>2449	Identifier	nIndex
>2450	Callee	m_wndToolBar . GetButtonInfo
>2451	MemberAccess	m_wndToolBar . GetButtonInfo
>2452	Identifier	GetButtonInfo
>2453	Identifier	m_wndToolBar
>2454	Condition	 
>2455	RelationalExpression	nIndex >= 0
>2456	PrimaryExpression	0
>2457	Identifier	nIndex
>2458	IdentifierDeclStatement	 
>2459	IdentifierDecl	nIndex = m_wndToolBar . CommandToIndex ( ID_VIEW_CAMERATOGGLE )
>2460	AssignmentExpr	nIndex = m_wndToolBar . CommandToIndex ( ID_VIEW_CAMERATOGGLE )
>2461	CallExpression	m_wndToolBar . CommandToIndex ( ID_VIEW_CAMERATOGGLE )
>2462	ArgumentList	ID_VIEW_CAMERATOGGLE
>2463	Argument	ID_VIEW_CAMERATOGGLE
>2464	Identifier	ID_VIEW_CAMERATOGGLE
>2465	Callee	m_wndToolBar . CommandToIndex
>2466	MemberAccess	m_wndToolBar . CommandToIndex
>2467	Identifier	CommandToIndex
>2468	Identifier	m_wndToolBar
>2469	Identifier	nIndex
>2470	Identifier	nIndex
>2471	IdentifierDeclType	int
>2472	IdentifierDeclStatement	 
>2473	IdentifierDecl	nImage
>2474	Identifier	nImage
>2475	IdentifierDeclType	int
>2476	ExpressionStatement	 
>2477	CallExpression	DockControlBar ( & m_wndToolBar )
>2478	ArgumentList	& m_wndToolBar
>2479	Argument	& m_wndToolBar
>2480	UnaryOp	& m_wndToolBar
>2481	Identifier	m_wndToolBar
>2482	UnaryOperator	&
>2483	Callee	DockControlBar
>2484	Identifier	DockControlBar
>2485	ExpressionStatement	 
>2486	CallExpression	EnableDocking ( CBRS_ALIGN_ANY )
>2487	ArgumentList	CBRS_ALIGN_ANY
>2488	Argument	CBRS_ALIGN_ANY
>2489	Identifier	CBRS_ALIGN_ANY
>2490	Callee	EnableDocking
>2491	Identifier	EnableDocking
>2492	ExpressionStatement	 
>2493	CallExpression	m_wndToolBar . EnableDocking ( CBRS_ALIGN_ANY )
>2494	ArgumentList	CBRS_ALIGN_ANY
>2495	Argument	CBRS_ALIGN_ANY
>2496	Identifier	CBRS_ALIGN_ANY
>2497	Callee	m_wndToolBar . EnableDocking
>2498	MemberAccess	m_wndToolBar . EnableDocking
>2499	Identifier	EnableDocking
>2500	Identifier	m_wndToolBar
>2501	ExpressionStatement	 
>2502	CallExpression	m_wndToolBar . SetBarStyle ( m_wndToolBar . GetBarStyle ( ) | CBRS_TOOLTIPS | CBRS_FLYBY | CBRS_SIZE_DYNAMIC )
>2503	ArgumentList	m_wndToolBar . GetBarStyle ( ) | CBRS_TOOLTIPS | CBRS_FLYBY | CBRS_SIZE_DYNAMIC
>2504	Argument	m_wndToolBar . GetBarStyle ( ) | CBRS_TOOLTIPS | CBRS_FLYBY | CBRS_SIZE_DYNAMIC
>2505	InclusiveOrExpression	m_wndToolBar . GetBarStyle ( ) | CBRS_TOOLTIPS | CBRS_FLYBY | CBRS_SIZE_DYNAMIC
>2506	InclusiveOrExpression	CBRS_TOOLTIPS | CBRS_FLYBY | CBRS_SIZE_DYNAMIC
>2507	InclusiveOrExpression	CBRS_FLYBY | CBRS_SIZE_DYNAMIC
>2508	Identifier	CBRS_SIZE_DYNAMIC
>2509	Identifier	CBRS_FLYBY
>2510	Identifier	CBRS_TOOLTIPS
>2511	CallExpression	m_wndToolBar . GetBarStyle ( )
>2512	ArgumentList	 
>2513	Callee	m_wndToolBar . GetBarStyle
>2514	MemberAccess	m_wndToolBar . GetBarStyle
>2515	Identifier	GetBarStyle
>2516	Identifier	m_wndToolBar
>2517	Callee	m_wndToolBar . SetBarStyle
>2518	MemberAccess	m_wndToolBar . SetBarStyle
>2519	Identifier	SetBarStyle
>2520	Identifier	m_wndToolBar
>2521	IfStatement	if ( ! m_wndScaleBar . Create ( this ) || ! m_wndScaleBar . LoadToolBar ( IDR_TOOLBAR_SCALELOCK ) )
>2522	CompoundStatement	 
>2523	ReturnStatement	 
>2524	UnaryOp	- 1
>2525	PrimaryExpression	1
>2526	UnaryOperator	-
>2527	ExpressionStatement	 
>2528	CallExpression	TRACE0 ( \"Failed to create scaling toolbar\n\" )
>2529	ArgumentList	\"Failed to create scaling toolbar\n\"
>2530	Argument	\"Failed to create scaling toolbar\n\"
>2531	PrimaryExpression	\"Failed to create scaling toolbar\n\"
>2532	Callee	TRACE0
>2533	Identifier	TRACE0
>2534	Condition	 
>2535	OrExpression	! m_wndScaleBar . Create ( this ) || ! m_wndScaleBar . LoadToolBar ( IDR_TOOLBAR_SCALELOCK )
>2536	UnaryOp	! m_wndScaleBar . LoadToolBar ( IDR_TOOLBAR_SCALELOCK )
>2537	CallExpression	m_wndScaleBar . LoadToolBar ( IDR_TOOLBAR_SCALELOCK )
>2538	ArgumentList	IDR_TOOLBAR_SCALELOCK
>2539	Argument	IDR_TOOLBAR_SCALELOCK
>2540	Identifier	IDR_TOOLBAR_SCALELOCK
>2541	Callee	m_wndScaleBar . LoadToolBar
>2542	MemberAccess	m_wndScaleBar . LoadToolBar
>2543	Identifier	LoadToolBar
>2544	Identifier	m_wndScaleBar
>2545	UnaryOperator	!
>2546	UnaryOp	! m_wndScaleBar . Create ( this )
>2547	CallExpression	m_wndScaleBar . Create ( this )
>2548	ArgumentList	this
>2549	Argument	this
>2550	Identifier	this
>2551	Callee	m_wndScaleBar . Create
>2552	MemberAccess	m_wndScaleBar . Create
>2553	Identifier	Create
>2554	Identifier	m_wndScaleBar
>2555	UnaryOperator	!
>2556	IfStatement	if ( ! m_wndStatusBar . Create ( this ) || ! m_wndStatusBar . SetIndicators ( indicators , sizeof ( indicators ) / \
>2557	CompoundStatement	 
>2558	ReturnStatement	 
>2559	UnaryOp	- 1
>2560	PrimaryExpression	1
>2561	UnaryOperator	-
>2562	ExpressionStatement	 
>2563	CallExpression	TRACE0 ( \"Failed to create status bar\n\" )
>2564	ArgumentList	\"Failed to create status bar\n\"
>2565	Argument	\"Failed to create status bar\n\"
>2566	PrimaryExpression	\"Failed to create status bar\n\"
>2567	Callee	TRACE0
>2568	Identifier	TRACE0
>2569	Condition	 
>2570	OrExpression	! m_wndStatusBar . Create ( this ) || ! m_wndStatusBar . SetIndicators ( indicators , sizeof ( indicators ) / \
>2571	UnaryOp	! m_wndStatusBar . SetIndicators ( indicators , sizeof ( indicators ) / sizeof ( UINT ) )
>2572	CallExpression	m_wndStatusBar . SetIndicators ( indicators , sizeof ( indicators ) / sizeof ( UINT ) )
>2573	ArgumentList	indicators
>2574	Argument	sizeof ( indicators ) / sizeof ( UINT )
>2575	MultiplicativeExpression	sizeof ( indicators ) / sizeof ( UINT )
>2576	SizeofExpr	sizeof ( UINT )
>2577	SizeofOperand	UINT
>2578	Sizeof	sizeof
>2579	SizeofExpr	sizeof ( indicators )
>2580	SizeofOperand	indicators
>2581	Sizeof	sizeof
>2582	Argument	indicators
>2583	Identifier	indicators
>2584	Callee	m_wndStatusBar . SetIndicators
>2585	MemberAccess	m_wndStatusBar . SetIndicators
>2586	Identifier	SetIndicators
>2587	Identifier	m_wndStatusBar
>2588	UnaryOperator	!
>2589	UnaryOp	! m_wndStatusBar . Create ( this )
>2590	CallExpression	m_wndStatusBar . Create ( this )
>2591	ArgumentList	this
>2592	Argument	this
>2593	Identifier	this
>2594	Callee	m_wndStatusBar . Create
>2595	MemberAccess	m_wndStatusBar . Create
>2596	Identifier	Create
>2597	Identifier	m_wndStatusBar
>2598	UnaryOperator	!
>2599	IfStatement	if ( ! m_wndToolBar . Create ( this ) || ! m_wndToolBar . LoadToolBar ( nID ) )
>2600	CompoundStatement	 
>2601	ReturnStatement	 
>2602	UnaryOp	- 1
>2603	PrimaryExpression	1
>2604	UnaryOperator	-
>2605	ExpressionStatement	 
>2606	CallExpression	TRACE0 ( \"Failed to create toolbar\n\" )
>2607	ArgumentList	\"Failed to create toolbar\n\"
>2608	Argument	\"Failed to create toolbar\n\"
>2609	PrimaryExpression	\"Failed to create toolbar\n\"
>2610	Callee	TRACE0
>2611	Identifier	TRACE0
>2612	Condition	 
>2613	OrExpression	! m_wndToolBar . Create ( this ) || ! m_wndToolBar . LoadToolBar ( nID )
>2614	UnaryOp	! m_wndToolBar . LoadToolBar ( nID )
>2615	CallExpression	m_wndToolBar . LoadToolBar ( nID )
>2616	ArgumentList	nID
>2617	Argument	nID
>2618	Identifier	nID
>2619	Callee	m_wndToolBar . LoadToolBar
>2620	MemberAccess	m_wndToolBar . LoadToolBar
>2621	Identifier	LoadToolBar
>2622	Identifier	m_wndToolBar
>2623	UnaryOperator	!
>2624	UnaryOp	! m_wndToolBar . Create ( this )
>2625	CallExpression	m_wndToolBar . Create ( this )
>2626	ArgumentList	this
>2627	Argument	this
>2628	Identifier	this
>2629	Callee	m_wndToolBar . Create
>2630	MemberAccess	m_wndToolBar . Create
>2631	Identifier	Create
>2632	Identifier	m_wndToolBar
>2633	UnaryOperator	!
>2634	IdentifierDeclStatement	 
>2635	IdentifierDecl	nID = ( g_PrefsDlg . m_bWideToolbar ) ? IDR_TOOLBAR_ADVANCED 
>2636	AssignmentExpr	nID = ( g_PrefsDlg . m_bWideToolbar ) ? IDR_TOOLBAR_ADVANCED 
>2637	ConditionalExpression	( g_PrefsDlg . m_bWideToolbar ) ? IDR_TOOLBAR_ADVANCED 
>2638	Identifier	IDR_TOOLBAR1
>2639	Identifier	IDR_TOOLBAR_ADVANCED
>2640	Condition	g_PrefsDlg . m_bWideToolbar
>2641	MemberAccess	g_PrefsDlg . m_bWideToolbar
>2642	Identifier	m_bWideToolbar
>2643	Identifier	g_PrefsDlg
>2644	Identifier	nID
>2645	Identifier	nID
>2646	IdentifierDeclType	UINT
>2647	IdentifierDeclStatement	 
>2648	IdentifierDecl	nStyle
>2649	Identifier	nStyle
>2650	IdentifierDeclType	UINT
>2651	IfStatement	if ( CFrameWnd 
>2652	ReturnStatement	 
>2653	UnaryOp	- 1
>2654	PrimaryExpression	1
>2655	UnaryOperator	-
>2656	Condition	 
>2657	EqualityExpression	CFrameWnd 
>2658	UnaryOp	- 1
>2659	PrimaryExpression	1
>2660	UnaryOperator	-
>2661	CallExpression	CFrameWnd 
>2662	ArgumentList	lpCreateStruct
>2663	Argument	lpCreateStruct
>2664	Identifier	lpCreateStruct
>2665	Callee	CFrameWnd 
>2666	Identifier	CFrameWnd 
>2667	ExpressionStatement	 
>2668	CallExpression	MFCCreate ( AfxGetInstanceHandle ( ) )
>2669	ArgumentList	AfxGetInstanceHandle ( )
>2670	Argument	AfxGetInstanceHandle ( )
>2671	CallExpression	AfxGetInstanceHandle ( )
>2672	ArgumentList	 
>2673	Callee	AfxGetInstanceHandle
>2674	Identifier	AfxGetInstanceHandle
>2675	Callee	MFCCreate
>2676	Identifier	MFCCreate
>2677	ExpressionStatement	 
>2678	AssignmentExpr	g_qeglobals . d_hInstance = AfxGetInstanceHandle ( )
>2679	CallExpression	AfxGetInstanceHandle ( )
>2680	ArgumentList	 
>2681	Callee	AfxGetInstanceHandle
>2682	Identifier	AfxGetInstanceHandle
>2683	MemberAccess	g_qeglobals . d_hInstance
>2684	Identifier	d_hInstance
>2685	Identifier	g_qeglobals
>2686	ExpressionStatement	 
>2687	CallExpression	InitCommonControls ( )
>2688	ArgumentList	 
>2689	Callee	InitCommonControls
>2690	Identifier	InitCommonControls
>2691	ExpressionStatement	 
>2692	CallExpression	g_strAppPath . ReleaseBuffer ( )
>2693	ArgumentList	 
>2694	Callee	g_strAppPath . ReleaseBuffer
>2695	MemberAccess	g_strAppPath . ReleaseBuffer
>2696	Identifier	ReleaseBuffer
>2697	Identifier	g_strAppPath
>2698	ExpressionStatement	 
>2699	AssignmentExpr	pBuffer [ g_strAppPath . ReverseFind ( '\\' ) + 1 ] = '\0'
>2700	PrimaryExpression	'\0'
>2701	ArrayIndexing	pBuffer [ g_strAppPath . ReverseFind ( '\\' ) + 1 ]
>2702	AdditiveExpression	g_strAppPath . ReverseFind ( '\\' ) + 1
>2703	PrimaryExpression	1
>2704	CallExpression	g_strAppPath . ReverseFind ( '\\' )
>2705	ArgumentList	'\\'
>2706	Argument	'\\'
>2707	PrimaryExpression	'\\'
>2708	Callee	g_strAppPath . ReverseFind
>2709	MemberAccess	g_strAppPath . ReverseFind
>2710	Identifier	ReverseFind
>2711	Identifier	g_strAppPath
>2712	Identifier	pBuffer
>2713	ExpressionStatement	 
>2714	CallExpression	ASSERT ( nResult != 0 )
>2715	ArgumentList	nResult != 0
>2716	Argument	nResult != 0
>2717	EqualityExpression	nResult != 0
>2718	PrimaryExpression	0
>2719	Identifier	nResult
>2720	Callee	ASSERT
>2721	Identifier	ASSERT
>2722	ExpressionStatement	 
>2723	CallExpression	GetModuleFileName ( NULL , pBuffer , _MAX_PATH )
>2724	ArgumentList	NULL
>2725	Argument	_MAX_PATH
>2726	Identifier	_MAX_PATH
>2727	Argument	pBuffer
>2728	Identifier	pBuffer
>2729	Argument	NULL
>2730	Identifier	NULL
>2731	Callee	GetModuleFileName
>2732	Identifier	GetModuleFileName
>2733	Statement	 
>2734	Statement	 
>2735	Statement	 
>2736	Statement	 
>2737	IdentifierDeclStatement	 
>2738	IdentifierDecl	* pBuffer = g_strAppPath . GetBufferSetLength ( _MAX_PATH + 1 )
>2739	AssignmentExpr	* pBuffer = g_strAppPath . GetBufferSetLength ( _MAX_PATH + 1 )
>2740	CallExpression	g_strAppPath . GetBufferSetLength ( _MAX_PATH + 1 )
>2741	ArgumentList	_MAX_PATH + 1
>2742	Argument	_MAX_PATH + 1
>2743	AdditiveExpression	_MAX_PATH + 1
>2744	PrimaryExpression	1
>2745	Identifier	_MAX_PATH
>2746	Callee	g_strAppPath . GetBufferSetLength
>2747	MemberAccess	g_strAppPath . GetBufferSetLength
>2748	Identifier	GetBufferSetLength
>2749	Identifier	g_strAppPath
>2750	Identifier	pBuffer
>2751	Identifier	pBuffer
>2752	IdentifierDeclType	char *
>2860	FunctionDef	CMainFrame 
>2861	ParameterList	 
>2862	ReturnType	void
>2863	CompoundStatement	 
>2864	ExpressionStatement	 
>2865	Identifier	pBuff
>2866	Statement	 
>2867	Statement	 
>2868	Statement	 
>2869	ForStatement	for ( int i = 0 ; i < g_nCommandCount ; i ++ )
>2870	CompoundStatement	 
>2871	IfStatement	if ( nLen > 0 )
>2872	CompoundStatement	 
>2873	IfStatement	if ( nLen == 1 )
>2874	ElseStatement	else
>2875	CompoundStatement	 
>2876	ForStatement	for ( int j = 0 ; j < g_nKeyCount ; j ++ )
>2877	CompoundStatement	 
>2878	IfStatement	if ( strBuff . CompareNoCase ( g_Keys [ j ] . m_strName ) == 0 )
>2879	CompoundStatement	 
>2880	BreakStatement	 
>2881	ExpressionStatement	 
>2882	AssignmentExpr	g_Commands [ i ] . m_nKey = g_Keys [ j ] . m_nVKKey
>2883	MemberAccess	g_Keys [ j ] . m_nVKKey
>2884	Identifier	m_nVKKey
>2885	ArrayIndexing	g_Keys [ j ]
>2886	Identifier	j
>2887	Identifier	g_Keys
>2888	MemberAccess	g_Commands [ i ] . m_nKey
>2889	Identifier	m_nKey
>2890	ArrayIndexing	g_Commands [ i ]
>2891	Identifier	i
>2892	Identifier	g_Commands
>2893	Condition	 
>2894	EqualityExpression	strBuff . CompareNoCase ( g_Keys [ j ] . m_strName ) == 0
>2895	PrimaryExpression	0
>2896	CallExpression	strBuff . CompareNoCase ( g_Keys [ j ] . m_strName )
>2897	ArgumentList	g_Keys [ j ] . m_strName
>2898	Argument	g_Keys [ j ] . m_strName
>2899	MemberAccess	g_Keys [ j ] . m_strName
>2900	Identifier	m_strName
>2901	ArrayIndexing	g_Keys [ j ]
>2902	Identifier	j
>2903	Identifier	g_Keys
>2904	Callee	strBuff . CompareNoCase
>2905	MemberAccess	strBuff . CompareNoCase
>2906	Identifier	CompareNoCase
>2907	Identifier	strBuff
>2908	IncDecOp	 
>2909	IncDec	++
>2910	Identifier	j
>2911	Condition	 
>2912	RelationalExpression	j < g_nKeyCount
>2913	Identifier	g_nKeyCount
>2914	Identifier	j
>2915	ForInit	 
>2916	IdentifierDeclStatement	int j = 0 ;
>2917	IdentifierDecl	j = 0
>2918	AssignmentExpr	j = 0
>2919	PrimaryExpression	0
>2920	Identifier	j
>2921	Identifier	j
>2922	IdentifierDeclType	int
>2923	CompoundStatement	 
>2924	ExpressionStatement	 
>2925	AssignmentExpr	g_Commands [ i ] . m_nKey = __toascii ( strBuff . GetAt ( 0 ) )
>2926	CallExpression	__toascii ( strBuff . GetAt ( 0 ) )
>2927	ArgumentList	strBuff . GetAt ( 0 )
>2928	Argument	strBuff . GetAt ( 0 )
>2929	CallExpression	strBuff . GetAt ( 0 )
>2930	ArgumentList	0
>2931	Argument	0
>2932	PrimaryExpression	0
>2933	Callee	strBuff . GetAt
>2934	MemberAccess	strBuff . GetAt
>2935	Identifier	GetAt
>2936	Identifier	strBuff
>2937	Callee	__toascii
>2938	Identifier	__toascii
>2939	MemberAccess	g_Commands [ i ] . m_nKey
>2940	Identifier	m_nKey
>2941	ArrayIndexing	g_Commands [ i ]
>2942	Identifier	i
>2943	Identifier	g_Commands
>2944	Condition	 
>2945	EqualityExpression	nLen == 1
>2946	PrimaryExpression	1
>2947	Identifier	nLen
>2948	ExpressionStatement	 
>2949	CallExpression	strBuff . MakeUpper ( )
>2950	ArgumentList	 
>2951	Callee	strBuff . MakeUpper
>2952	MemberAccess	strBuff . MakeUpper
>2953	Identifier	MakeUpper
>2954	Identifier	strBuff
>2955	ExpressionStatement	 
>2956	CallExpression	strBuff . TrimRight ( )
>2957	ArgumentList	 
>2958	Callee	strBuff . TrimRight
>2959	MemberAccess	strBuff . TrimRight
>2960	Identifier	TrimRight
>2961	Identifier	strBuff
>2962	ExpressionStatement	 
>2963	CallExpression	strBuff . TrimLeft ( )
>2964	ArgumentList	 
>2965	Callee	strBuff . TrimLeft
>2966	MemberAccess	strBuff . TrimLeft
>2967	Identifier	TrimLeft
>2968	Identifier	strBuff
>2969	IfStatement	if ( nSpecial >= 0 )
>2970	CompoundStatement	 
>2971	ExpressionStatement	 
>2972	CallExpression	FindReplace ( strBuff , \"+shift\" , \"\" )
>2973	ArgumentList	strBuff
>2974	Argument	\"\"
>2975	PrimaryExpression	\"\"
>2976	Argument	\"+shift\"
>2977	PrimaryExpression	\"+shift\"
>2978	Argument	strBuff
>2979	Identifier	strBuff
>2980	Callee	FindReplace
>2981	Identifier	FindReplace
>2982	ExpressionStatement	 
>2983	AssignmentExpr	g_Commands [ i ] . m_nModifiers |= RAD_SHIFT
>2984	Identifier	RAD_SHIFT
>2985	MemberAccess	g_Commands [ i ] . m_nModifiers
>2986	Identifier	m_nModifiers
>2987	ArrayIndexing	g_Commands [ i ]
>2988	Identifier	i
>2989	Identifier	g_Commands
>2990	Condition	 
>2991	RelationalExpression	nSpecial >= 0
>2992	PrimaryExpression	0
>2993	Identifier	nSpecial
>2994	ExpressionStatement	 
>2995	AssignmentExpr	nSpecial = strBuff . Find ( \"+shift\" )
>2996	CallExpression	strBuff . Find ( \"+shift\" )
>2997	ArgumentList	\"+shift\"
>2998	Argument	\"+shift\"
>2999	PrimaryExpression	\"+shift\"
>3000	Callee	strBuff . Find
>3001	MemberAccess	strBuff . Find
>3002	Identifier	Find
>3003	Identifier	strBuff
>3004	Identifier	nSpecial
>3005	IfStatement	if ( nSpecial >= 0 )
>3006	CompoundStatement	 
>3007	ExpressionStatement	 
>3008	CallExpression	FindReplace ( strBuff , \"+ctrl\" , \"\" )
>3009	ArgumentList	strBuff
>3010	Argument	\"\"
>3011	PrimaryExpression	\"\"
>3012	Argument	\"+ctrl\"
>3013	PrimaryExpression	\"+ctrl\"
>3014	Argument	strBuff
>3015	Identifier	strBuff
>3016	Callee	FindReplace
>3017	Identifier	FindReplace
>3018	ExpressionStatement	 
>3019	AssignmentExpr	g_Commands [ i ] . m_nModifiers |= RAD_CONTROL
>3020	Identifier	RAD_CONTROL
>3021	MemberAccess	g_Commands [ i ] . m_nModifiers
>3022	Identifier	m_nModifiers
>3023	ArrayIndexing	g_Commands [ i ]
>3024	Identifier	i
>3025	Identifier	g_Commands
>3026	Condition	 
>3027	RelationalExpression	nSpecial >= 0
>3028	PrimaryExpression	0
>3029	Identifier	nSpecial
>3030	ExpressionStatement	 
>3031	AssignmentExpr	nSpecial = strBuff . Find ( \"+ctrl\" )
>3032	CallExpression	strBuff . Find ( \"+ctrl\" )
>3033	ArgumentList	\"+ctrl\"
>3034	Argument	\"+ctrl\"
>3035	PrimaryExpression	\"+ctrl\"
>3036	Callee	strBuff . Find
>3037	MemberAccess	strBuff . Find
>3038	Identifier	Find
>3039	Identifier	strBuff
>3040	Identifier	nSpecial
>3041	IfStatement	if ( nSpecial >= 0 )
>3042	CompoundStatement	 
>3043	ExpressionStatement	 
>3044	CallExpression	FindReplace ( strBuff , \"+alt\" , \"\" )
>3045	ArgumentList	strBuff
>3046	Argument	\"\"
>3047	PrimaryExpression	\"\"
>3048	Argument	\"+alt\"
>3049	PrimaryExpression	\"+alt\"
>3050	Argument	strBuff
>3051	Identifier	strBuff
>3052	Callee	FindReplace
>3053	Identifier	FindReplace
>3054	ExpressionStatement	 
>3055	AssignmentExpr	g_Commands [ i ] . m_nModifiers |= RAD_ALT
>3056	Identifier	RAD_ALT
>3057	MemberAccess	g_Commands [ i ] . m_nModifiers
>3058	Identifier	m_nModifiers
>3059	ArrayIndexing	g_Commands [ i ]
>3060	Identifier	i
>3061	Identifier	g_Commands
>3062	Condition	 
>3063	RelationalExpression	nSpecial >= 0
>3064	PrimaryExpression	0
>3065	Identifier	nSpecial
>3066	ExpressionStatement	 
>3067	AssignmentExpr	g_Commands [ i ] . m_nModifiers = 0
>3068	PrimaryExpression	0
>3069	MemberAccess	g_Commands [ i ] . m_nModifiers
>3070	Identifier	m_nModifiers
>3071	ArrayIndexing	g_Commands [ i ]
>3072	Identifier	i
>3073	Identifier	g_Commands
>3074	IdentifierDeclStatement	 
>3075	IdentifierDecl	nSpecial = strBuff . Find ( \"+alt\" )
>3076	AssignmentExpr	nSpecial = strBuff . Find ( \"+alt\" )
>3077	CallExpression	strBuff . Find ( \"+alt\" )
>3078	ArgumentList	\"+alt\"
>3079	Argument	\"+alt\"
>3080	PrimaryExpression	\"+alt\"
>3081	Callee	strBuff . Find
>3082	MemberAccess	strBuff . Find
>3083	Identifier	Find
>3084	Identifier	strBuff
>3085	Identifier	nSpecial
>3086	Identifier	nSpecial
>3087	IdentifierDeclType	int
>3088	ExpressionStatement	 
>3089	CallExpression	strBuff . TrimRight ( )
>3090	ArgumentList	 
>3091	Callee	strBuff . TrimRight
>3092	MemberAccess	strBuff . TrimRight
>3093	Identifier	TrimRight
>3094	Identifier	strBuff
>3095	ExpressionStatement	 
>3096	CallExpression	strBuff . TrimLeft ( )
>3097	ArgumentList	 
>3098	Callee	strBuff . TrimLeft
>3099	MemberAccess	strBuff . TrimLeft
>3100	Identifier	TrimLeft
>3101	Identifier	strBuff
>3102	IdentifierDeclStatement	 
>3103	IdentifierDecl	strBuff = pBuff
>3104	AssignmentExpr	strBuff = pBuff
>3105	Identifier	pBuff
>3106	Identifier	pBuff
>3107	Identifier	strBuff
>3108	IdentifierDeclType	CString
>3109	Condition	 
>3110	RelationalExpression	nLen > 0
>3111	PrimaryExpression	0
>3112	Identifier	nLen
>3113	IdentifierDeclStatement	 
>3114	IdentifierDecl	nLen = GetPrivateProfileString ( \"Commands\" , g_Commands [ i ] . m_strCommand , \"\" , pBuff , 1024 , strINI )
>3115	AssignmentExpr	nLen = GetPrivateProfileString ( \"Commands\" , g_Commands [ i ] . m_strCommand , \"\" , pBuff , 1024 , strINI )
>3116	CallExpression	GetPrivateProfileString ( \"Commands\" , g_Commands [ i ] . m_strCommand , \"\" , pBuff , 1024 , strINI )
>3117	ArgumentList	\"Commands\"
>3118	Argument	strINI
>3119	Identifier	strINI
>3120	Argument	1024
>3121	PrimaryExpression	1024
>3122	Argument	pBuff
>3123	Identifier	pBuff
>3124	Argument	\"\"
>3125	PrimaryExpression	\"\"
>3126	Argument	g_Commands [ i ] . m_strCommand
>3127	MemberAccess	g_Commands [ i ] . m_strCommand
>3128	Identifier	m_strCommand
>3129	ArrayIndexing	g_Commands [ i ]
>3130	Identifier	i
>3131	Identifier	g_Commands
>3132	Argument	\"Commands\"
>3133	PrimaryExpression	\"Commands\"
>3134	Callee	GetPrivateProfileString
>3135	Identifier	GetPrivateProfileString
>3136	Identifier	nLen
>3137	Identifier	nLen
>3138	IdentifierDeclType	int
>3139	IncDecOp	 
>3140	IncDec	++
>3141	Identifier	i
>3142	Condition	 
>3143	RelationalExpression	i < g_nCommandCount
>3144	Identifier	g_nCommandCount
>3145	Identifier	i
>3146	ForInit	 
>3147	IdentifierDeclStatement	int i = 0 ;
>3148	IdentifierDecl	i = 0
>3149	AssignmentExpr	i = 0
>3150	PrimaryExpression	0
>3151	Identifier	i
>3152	Identifier	i
>3153	IdentifierDeclType	int
>3154	IfStatement	if ( g_PrefsDlg . m_strUserPath . GetLength ( ) > 0 )
>3155	ElseStatement	else
>3156	CompoundStatement	 
>3157	ExpressionStatement	 
>3158	AssignmentExpr	strINI += \"\\radiant.ini\"
>3159	PrimaryExpression	\"\\radiant.ini\"
>3160	Identifier	strINI
>3161	ExpressionStatement	 
>3162	AssignmentExpr	strINI = g_strAppPath
>3163	Identifier	g_strAppPath
>3164	Identifier	strINI
>3165	ExpressionStatement	 
>3166	AssignmentExpr	strINI = g_PrefsDlg . m_strUserPath
>3167	MemberAccess	g_PrefsDlg . m_strUserPath
>3168	Identifier	m_strUserPath
>3169	Identifier	g_PrefsDlg
>3170	Identifier	strINI
>3171	Condition	 
>3172	RelationalExpression	g_PrefsDlg . m_strUserPath . GetLength ( ) > 0
>3173	PrimaryExpression	0
>3174	CallExpression	g_PrefsDlg . m_strUserPath . GetLength ( )
>3175	ArgumentList	 
>3176	Callee	g_PrefsDlg . m_strUserPath . GetLength
>3177	MemberAccess	g_PrefsDlg . m_strUserPath . GetLength
>3178	Identifier	GetLength
>3179	MemberAccess	g_PrefsDlg . m_strUserPath
>3180	Identifier	m_strUserPath
>3181	Identifier	g_PrefsDlg
>3182	IdentifierDeclStatement	 
>3183	IdentifierDecl	* pBuff = new char [ 1024 ]
>3184	AssignmentExpr	* pBuff = new char [ 1024 ]
>3185	PrimaryExpression	1024
>3186	Identifier	pBuff
>3187	Identifier	pBuff
>3188	IdentifierDeclType	char *
>3189	IdentifierDeclStatement	 
>3190	IdentifierDecl	strINI
>3191	Identifier	strINI
>3192	IdentifierDeclType	CString
>3228	FunctionDef	CMainFrame 
>3229	ParameterList	CREATESTRUCT & cs
>3230	Parameter	 
>3231	Identifier	cs
>3232	ParameterType	CREATESTRUCT &
>3233	ReturnType	BOOL
>3234	CompoundStatement	 
>3235	ReturnStatement	 
>3236	CallExpression	CFrameWnd 
>3237	ArgumentList	cs
>3238	Argument	cs
>3239	Identifier	cs
>3240	Callee	CFrameWnd 
>3241	Identifier	CFrameWnd 
>3247	FunctionDef	CMainFrame 
>3248	ParameterList	 
>3249	ReturnType	void
>3250	CompoundStatement	 
>3251	ExpressionStatement	 
>3252	CallExpression	CFrameWnd 
>3253	ArgumentList	 
>3254	Callee	CFrameWnd 
>3255	Identifier	CFrameWnd 
>3259	FunctionDef	CMainFrame 
>3260	ParameterList	CDumpContext & dc
>3261	Parameter	 
>3262	Identifier	dc
>3263	ParameterType	CDumpContext &
>3264	ReturnType	void
>3265	CompoundStatement	 
>3266	ExpressionStatement	 
>3267	CallExpression	CFrameWnd 
>3268	ArgumentList	dc
>3269	Argument	dc
>3270	Identifier	dc
>3271	Callee	CFrameWnd 
>3272	Identifier	CFrameWnd 
>3277	FunctionDef	CMainFrame 
>3278	ParameterList	 
>3279	ReturnType	void
>3280	CompoundStatement	 
>3281	ExpressionStatement	 
>3282	CallExpression	SetTimer ( QE_TIMER0 , 1000 , NULL )
>3283	ArgumentList	QE_TIMER0
>3284	Argument	NULL
>3285	Identifier	NULL
>3286	Argument	1000
>3287	PrimaryExpression	1000
>3288	Argument	QE_TIMER0
>3289	Identifier	QE_TIMER0
>3290	Callee	SetTimer
>3291	Identifier	SetTimer
>3292	ExpressionStatement	 
>3293	AssignmentExpr	m_bDoLoop = true
>3294	Identifier	true
>3295	Identifier	m_bDoLoop
>3296	ExpressionStatement	 
>3297	CallExpression	Sys_Printf ( \"Entering message loop\n\" )
>3298	ArgumentList	\"Entering message loop\n\"
>3299	Argument	\"Entering message loop\n\"
>3300	PrimaryExpression	\"Entering message loop\n\"
>3301	Callee	Sys_Printf
>3302	Identifier	Sys_Printf
>3303	ExpressionStatement	 
>3304	CallExpression	QE_Init ( )
>3305	ArgumentList	 
>3306	Callee	QE_Init
>3307	Identifier	QE_Init
>3308	IfStatement	if ( g_PrefsDlg . m_bPAK == TRUE )
>3309	CompoundStatement	 
>3310	ExpressionStatement	 
>3311	CallExpression	InitPakFile ( ValueForKey ( g_qeglobals . d_project_entity , \"basepath\" ) , NULL )
>3312	ArgumentList	ValueForKey ( g_qeglobals . d_project_entity , \"basepath\" )
>3313	Argument	NULL
>3314	Identifier	NULL
>3315	Argument	ValueForKey ( g_qeglobals . d_project_entity , \"basepath\" )
>3316	CallExpression	ValueForKey ( g_qeglobals . d_project_entity , \"basepath\" )
>3317	ArgumentList	g_qeglobals . d_project_entity
>3318	Argument	\"basepath\"
>3319	PrimaryExpression	\"basepath\"
>3320	Argument	g_qeglobals . d_project_entity
>3321	MemberAccess	g_qeglobals . d_project_entity
>3322	Identifier	d_project_entity
>3323	Identifier	g_qeglobals
>3324	Callee	ValueForKey
>3325	Identifier	ValueForKey
>3326	Callee	InitPakFile
>3327	Identifier	InitPakFile
>3328	Condition	 
>3329	EqualityExpression	g_PrefsDlg . m_bPAK == TRUE
>3330	Identifier	TRUE
>3331	MemberAccess	g_PrefsDlg . m_bPAK
>3332	Identifier	m_bPAK
>3333	Identifier	g_PrefsDlg
>3334	IfStatement	if ( ! bProjectLoaded )
>3335	ExpressionStatement	 
>3336	CallExpression	Error ( \"Unable to load project file. It was unavailable in the scripts path and the default could not be found\" )
>3337	ArgumentList	\"Unable to load project file. It was unavailable in the scripts path and the default could not be found\"
>3338	Argument	\"Unable to load project file. It was unavailable in the scripts path and the default could not be found\"
>3339	PrimaryExpression	\"Unable to load project file. It was unavailable in the scripts path and the default could not be found\"
>3340	Callee	Error
>3341	Identifier	Error
>3342	Condition	 
>3343	UnaryOp	! bProjectLoaded
>3344	Identifier	bProjectLoaded
>3345	UnaryOperator	!
>3346	IfStatement	if ( ! bProjectLoaded )
>3347	ElseStatement	else
>3348	CompoundStatement	 
>3349	ExpressionStatement	 
>3350	CallExpression	SetCurrentDirectory ( pBuff )
>3351	ArgumentList	pBuff
>3352	Argument	pBuff
>3353	Identifier	pBuff
>3354	Callee	SetCurrentDirectory
>3355	Identifier	SetCurrentDirectory
>3356	Statement	 
>3357	CompoundStatement	 
>3358	IfStatement	if ( ! bProjectLoaded )
>3359	CompoundStatement	 
>3360	IfStatement	if ( ! bProjectLoaded )
>3361	CompoundStatement	 
>3362	IfStatement	if ( dlgFile . DoModal ( ) == IDOK )
>3363	ExpressionStatement	 
>3364	AssignmentExpr	bProjectLoaded = QE_LoadProject ( dlgFile . GetPathName ( ) . GetBuffer ( 0 ) )
>3365	CallExpression	QE_LoadProject ( dlgFile . GetPathName ( ) . GetBuffer ( 0 ) )
>3366	ArgumentList	dlgFile . GetPathName ( ) . GetBuffer ( 0 )
>3367	Argument	dlgFile . GetPathName ( ) . GetBuffer ( 0 )
>3368	CallExpression	dlgFile . GetPathName ( ) . GetBuffer ( 0 )
>3369	ArgumentList	0
>3370	Argument	0
>3371	PrimaryExpression	0
>3372	Callee	dlgFile . GetPathName ( ) . GetBuffer
>3373	MemberAccess	dlgFile . GetPathName ( ) . GetBuffer
>3374	Identifier	GetBuffer
>3375	CallExpression	dlgFile . GetPathName ( )
>3376	ArgumentList	 
>3377	Callee	dlgFile . GetPathName
>3378	MemberAccess	dlgFile . GetPathName
>3379	Identifier	GetPathName
>3380	Identifier	dlgFile
>3381	Callee	QE_LoadProject
>3382	Identifier	QE_LoadProject
>3383	Identifier	bProjectLoaded
>3384	Condition	 
>3385	EqualityExpression	dlgFile . DoModal ( ) == IDOK
>3386	Identifier	IDOK
>3387	CallExpression	dlgFile . DoModal ( )
>3388	ArgumentList	 
>3389	Callee	dlgFile . DoModal
>3390	MemberAccess	dlgFile . DoModal
>3391	Identifier	DoModal
>3392	Identifier	dlgFile
>3393	IdentifierDeclStatement	 
>3394	IdentifierDecl	dlgFile ( true , NULL , NULL , OFN_HIDEREADONLY | OFN_OVERWRITEPROMPT , \"Q3Radiant Project files (*.qe4, *.prj)|*\
>3395	Expression	true , NULL , NULL , OFN_HIDEREADONLY | OFN_OVERWRITEPROMPT , \"Q3Radiant Project files (*.qe4, *.prj)|*.qe4|*.prj||\" , \
>3396	Expression	NULL , NULL , OFN_HIDEREADONLY | OFN_OVERWRITEPROMPT , \"Q3Radiant Project files (*.qe4, *.prj)|*.qe4|*.prj||\" , \
>3397	Expression	NULL , OFN_HIDEREADONLY | OFN_OVERWRITEPROMPT , \"Q3Radiant Project files (*.qe4, *.prj)|*.qe4|*.prj||\" , this
>3398	Expression	OFN_HIDEREADONLY | OFN_OVERWRITEPROMPT , \"Q3Radiant Project files (*.qe4, *.prj)|*.qe4|*.prj||\" , this
>3399	Expression	\"Q3Radiant Project files (*.qe4, *.prj)|*.qe4|*.prj||\" , this
>3400	Identifier	this
>3401	PrimaryExpression	\"Q3Radiant Project files (*.qe4, *.prj)|*.qe4|*.prj||\"
>3402	InclusiveOrExpression	OFN_HIDEREADONLY | OFN_OVERWRITEPROMPT
>3403	Identifier	OFN_OVERWRITEPROMPT
>3404	Identifier	OFN_HIDEREADONLY
>3405	Identifier	NULL
>3406	Identifier	NULL
>3407	Identifier	true
>3408	Identifier	dlgFile
>3409	IdentifierDeclType	CFileDialog
>3410	Condition	 
>3411	UnaryOp	! bProjectLoaded
>3412	Identifier	bProjectLoaded
>3413	UnaryOperator	!
>3414	ExpressionStatement	 
>3415	AssignmentExpr	bProjectLoaded = QE_LoadProject ( strProj . GetBuffer ( 0 ) )
>3416	CallExpression	QE_LoadProject ( strProj . GetBuffer ( 0 ) )
>3417	ArgumentList	strProj . GetBuffer ( 0 )
>3418	Argument	strProj . GetBuffer ( 0 )
>3419	CallExpression	strProj . GetBuffer ( 0 )
>3420	ArgumentList	0
>3421	Argument	0
>3422	PrimaryExpression	0
>3423	Callee	strProj . GetBuffer
>3424	MemberAccess	strProj . GetBuffer
>3425	Identifier	GetBuffer
>3426	Identifier	strProj
>3427	Callee	QE_LoadProject
>3428	Identifier	QE_LoadProject
>3429	Identifier	bProjectLoaded
>3430	ExpressionStatement	 
>3431	AssignmentExpr	strProj += \"\\default.qe4\"
>3432	PrimaryExpression	\"\\default.qe4\"
>3433	Identifier	strProj
>3434	IdentifierDeclStatement	 
>3435	IdentifierDecl	strProj = g_strAppPath
>3436	AssignmentExpr	strProj = g_strAppPath
>3437	Identifier	g_strAppPath
>3438	Identifier	g_strAppPath
>3439	Identifier	strProj
>3440	IdentifierDeclType	CString
>3441	ExpressionStatement	 
>3442	CallExpression	Sys_Printf ( \"Using default.qe4. You may experience problems. See the readme.txt\n\" )
>3443	ArgumentList	\"Using default.qe4. You may experience problems. See the readme.txt\n\"
>3444	Argument	\"Using default.qe4. You may experience problems. See the readme.txt\n\"
>3445	PrimaryExpression	\"Using default.qe4. You may experience problems. See the readme.txt\n\"
>3446	Callee	Sys_Printf
>3447	Identifier	Sys_Printf
>3448	Condition	 
>3449	UnaryOp	! bProjectLoaded
>3450	Identifier	bProjectLoaded
>3451	UnaryOperator	!
>3452	ExpressionStatement	 
>3453	Identifier	pBuff
>3454	Statement	 
>3455	Statement	 
>3456	Statement	 
>3457	CompoundStatement	 
>3458	IfStatement	if ( bProjectLoaded )
>3459	CompoundStatement	 
>3460	ExpressionStatement	 
>3461	CallExpression	g_PrefsDlg . SavePrefs ( )
>3462	ArgumentList	 
>3463	Callee	g_PrefsDlg . SavePrefs
>3464	MemberAccess	g_PrefsDlg . SavePrefs
>3465	Identifier	SavePrefs
>3466	Identifier	g_PrefsDlg
>3467	ExpressionStatement	 
>3468	AssignmentExpr	g_PrefsDlg . m_strLastMap = strDefProj
>3469	Identifier	strDefProj
>3470	MemberAccess	g_PrefsDlg . m_strLastMap
>3471	Identifier	m_strLastMap
>3472	Identifier	g_PrefsDlg
>3473	ExpressionStatement	 
>3474	AssignmentExpr	strDefProj += \"maps\\defproj.map\"
>3475	PrimaryExpression	\"maps\\defproj.map\"
>3476	Identifier	strDefProj
>3477	ExpressionStatement	 
>3478	CallExpression	AddSlash ( strDefProj )
>3479	ArgumentList	strDefProj
>3480	Argument	strDefProj
>3481	Identifier	strDefProj
>3482	Callee	AddSlash
>3483	Identifier	AddSlash
>3484	ExpressionStatement	 
>3485	AssignmentExpr	g_PrefsDlg . m_bLoadLast = TRUE
>3486	Identifier	TRUE
>3487	MemberAccess	g_PrefsDlg . m_bLoadLast
>3488	Identifier	m_bLoadLast
>3489	Identifier	g_PrefsDlg
>3490	Condition	 
>3491	Identifier	bProjectLoaded
>3492	ExpressionStatement	 
>3493	AssignmentExpr	bProjectLoaded = QE_LoadProject ( \"scripts/quake.qe4\" )
>3494	CallExpression	QE_LoadProject ( \"scripts/quake.qe4\" )
>3495	ArgumentList	\"scripts/quake.qe4\"
>3496	Argument	\"scripts/quake.qe4\"
>3497	PrimaryExpression	\"scripts/quake.qe4\"
>3498	Callee	QE_LoadProject
>3499	Identifier	QE_LoadProject
>3500	Identifier	bProjectLoaded
>3501	Statement	 
>3502	Statement	 
>3503	Statement	 
>3504	Statement	 
>3505	Statement	 
>3506	Statement	 
>3507	Statement	 
>3508	Statement	 
>3509	ExpressionStatement	 
>3510	AssignmentExpr	strDefProj += \"defproj\"
>3511	PrimaryExpression	\"defproj\"
>3512	Identifier	strDefProj
>3513	ExpressionStatement	 
>3514	CallExpression	AddSlash ( strDefProj )
>3515	ArgumentList	strDefProj
>3516	Argument	strDefProj
>3517	Identifier	strDefProj
>3518	Callee	AddSlash
>3519	Identifier	AddSlash
>3520	IdentifierDeclStatement	 
>3521	IdentifierDecl	strDefProj = g_strAppPath
>3522	AssignmentExpr	strDefProj = g_strAppPath
>3523	Identifier	g_strAppPath
>3524	Identifier	g_strAppPath
>3525	Identifier	strDefProj
>3526	IdentifierDeclType	CString
>3527	ExpressionStatement	 
>3528	CallExpression	GetCurrentDirectory ( 1024 , pBuff )
>3529	ArgumentList	1024
>3530	Argument	pBuff
>3531	Identifier	pBuff
>3532	Argument	1024
>3533	PrimaryExpression	1024
>3534	Callee	GetCurrentDirectory
>3535	Identifier	GetCurrentDirectory
>3536	Statement	 
>3537	IdentifierDeclStatement	 
>3538	IdentifierDecl	* pBuff = new char [ 1024 ]
>3539	AssignmentExpr	* pBuff = new char [ 1024 ]
>3540	PrimaryExpression	1024
>3541	Identifier	pBuff
>3542	Identifier	pBuff
>3543	IdentifierDeclType	char *
>3544	Condition	 
>3545	UnaryOp	! bProjectLoaded
>3546	Identifier	bProjectLoaded
>3547	UnaryOperator	!
>3548	IfStatement	if ( AfxGetApp ( ) -> m_lpCmdLine && strlen ( AfxGetApp ( ) -> m_lpCmdLine ) )
>3549	ElseStatement	else
>3550	CompoundStatement	 
>3551	IfStatement	if ( ! bProjectLoaded )
>3552	CompoundStatement	 
>3553	ExpressionStatement	 
>3554	AssignmentExpr	bProjectLoaded = QE_LoadProject ( \"scripts/quake.qe4\" )
>3555	CallExpression	QE_LoadProject ( \"scripts/quake.qe4\" )
>3556	ArgumentList	\"scripts/quake.qe4\"
>3557	Argument	\"scripts/quake.qe4\"
>3558	PrimaryExpression	\"scripts/quake.qe4\"
>3559	Callee	QE_LoadProject
>3560	Identifier	QE_LoadProject
>3561	Identifier	bProjectLoaded
>3562	Condition	 
>3563	UnaryOp	! bProjectLoaded
>3564	Identifier	bProjectLoaded
>3565	UnaryOperator	!
>3566	IfStatement	if ( ! bProjectLoaded )
>3567	CompoundStatement	 
>3568	ExpressionStatement	 
>3569	AssignmentExpr	bProjectLoaded = QE_LoadProject ( cWork )
>3570	CallExpression	QE_LoadProject ( cWork )
>3571	ArgumentList	cWork
>3572	Argument	cWork
>3573	Identifier	cWork
>3574	Callee	QE_LoadProject
>3575	Identifier	QE_LoadProject
>3576	Identifier	bProjectLoaded
>3577	ExpressionStatement	 
>3578	CallExpression	GetFullPathName ( str , 1024 , cWork , & pFile )
>3579	ArgumentList	str
>3580	Argument	& pFile
>3581	UnaryOp	& pFile
>3582	Identifier	pFile
>3583	UnaryOperator	&
>3584	Argument	cWork
>3585	Identifier	cWork
>3586	Argument	1024
>3587	PrimaryExpression	1024
>3588	Argument	str
>3589	Identifier	str
>3590	Callee	GetFullPathName
>3591	Identifier	GetFullPathName
>3592	IdentifierDeclStatement	 
>3593	IdentifierDecl	* pFile = NULL
>3594	AssignmentExpr	* pFile = NULL
>3595	Identifier	NULL
>3596	Identifier	NULL
>3597	Identifier	pFile
>3598	IdentifierDeclType	char *
>3599	IdentifierDeclStatement	 
>3600	IdentifierDecl	cWork [ 1024 ]
>3601	PrimaryExpression	1024
>3602	Identifier	cWork
>3603	IdentifierDeclType	char [ 1024 ]
>3604	ExpressionStatement	 
>3605	AssignmentExpr	str += \"../baseq3/scripts/quake.qe4\"
>3606	PrimaryExpression	\"../baseq3/scripts/quake.qe4\"
>3607	Identifier	str
>3608	ExpressionStatement	 
>3609	CallExpression	AddSlash ( str )
>3610	ArgumentList	str
>3611	Argument	str
>3612	Identifier	str
>3613	Callee	AddSlash
>3614	Identifier	AddSlash
>3615	IdentifierDeclStatement	 
>3616	IdentifierDecl	str = g_strAppPath
>3617	AssignmentExpr	str = g_strAppPath
>3618	Identifier	g_strAppPath
>3619	Identifier	g_strAppPath
>3620	Identifier	str
>3621	IdentifierDeclType	CString
>3622	Condition	 
>3623	UnaryOp	! bProjectLoaded
>3624	Identifier	bProjectLoaded
>3625	UnaryOperator	!
>3626	IfStatement	if ( g_PrefsDlg . m_bLoadLast && g_PrefsDlg . m_strLastProject . GetLength ( ) > 0 )
>3627	CompoundStatement	 
>3628	ExpressionStatement	 
>3629	AssignmentExpr	bProjectLoaded = QE_LoadProject ( g_PrefsDlg . m_strLastProject . GetBuffer ( 0 ) )
>3630	CallExpression	QE_LoadProject ( g_PrefsDlg . m_strLastProject . GetBuffer ( 0 ) )
>3631	ArgumentList	g_PrefsDlg . m_strLastProject . GetBuffer ( 0 )
>3632	Argument	g_PrefsDlg . m_strLastProject . GetBuffer ( 0 )
>3633	CallExpression	g_PrefsDlg . m_strLastProject . GetBuffer ( 0 )
>3634	ArgumentList	0
>3635	Argument	0
>3636	PrimaryExpression	0
>3637	Callee	g_PrefsDlg . m_strLastProject . GetBuffer
>3638	MemberAccess	g_PrefsDlg . m_strLastProject . GetBuffer
>3639	Identifier	GetBuffer
>3640	MemberAccess	g_PrefsDlg . m_strLastProject
>3641	Identifier	m_strLastProject
>3642	Identifier	g_PrefsDlg
>3643	Callee	QE_LoadProject
>3644	Identifier	QE_LoadProject
>3645	Identifier	bProjectLoaded
>3646	Condition	 
>3647	AndExpression	g_PrefsDlg . m_bLoadLast && g_PrefsDlg . m_strLastProject . GetLength ( ) > 0
>3648	RelationalExpression	g_PrefsDlg . m_strLastProject . GetLength ( ) > 0
>3649	PrimaryExpression	0
>3650	CallExpression	g_PrefsDlg . m_strLastProject . GetLength ( )
>3651	ArgumentList	 
>3652	Callee	g_PrefsDlg . m_strLastProject . GetLength
>3653	MemberAccess	g_PrefsDlg . m_strLastProject . GetLength
>3654	Identifier	GetLength
>3655	MemberAccess	g_PrefsDlg . m_strLastProject
>3656	Identifier	m_strLastProject
>3657	Identifier	g_PrefsDlg
>3658	MemberAccess	g_PrefsDlg . m_bLoadLast
>3659	Identifier	m_bLoadLast
>3660	Identifier	g_PrefsDlg
>3661	CompoundStatement	 
>3662	ExpressionStatement	 
>3663	AssignmentExpr	bProjectLoaded = QE_LoadProject ( argv [ 1 ] )
>3664	CallExpression	QE_LoadProject ( argv [ 1 ] )
>3665	ArgumentList	argv [ 1 ]
>3666	Argument	argv [ 1 ]
>3667	ArrayIndexing	argv [ 1 ]
>3668	PrimaryExpression	1
>3669	Identifier	argv
>3670	Callee	QE_LoadProject
>3671	Identifier	QE_LoadProject
>3672	Identifier	bProjectLoaded
>3673	ExpressionStatement	 
>3674	CallExpression	ParseCommandLine ( AfxGetApp ( ) -> m_lpCmdLine )
>3675	ArgumentList	AfxGetApp ( ) -> m_lpCmdLine
>3676	Argument	AfxGetApp ( ) -> m_lpCmdLine
>3677	PtrMemberAccess	AfxGetApp ( ) -> m_lpCmdLine
>3678	Identifier	m_lpCmdLine
>3679	CallExpression	AfxGetApp ( )
>3680	ArgumentList	 
>3681	Callee	AfxGetApp
>3682	Identifier	AfxGetApp
>3683	Callee	ParseCommandLine
>3684	Identifier	ParseCommandLine
>3685	Condition	 
>3686	AndExpression	AfxGetApp ( ) -> m_lpCmdLine && strlen ( AfxGetApp ( ) -> m_lpCmdLine )
>3687	CallExpression	strlen ( AfxGetApp ( ) -> m_lpCmdLine )
>3688	ArgumentList	AfxGetApp ( ) -> m_lpCmdLine
>3689	Argument	AfxGetApp ( ) -> m_lpCmdLine
>3690	PtrMemberAccess	AfxGetApp ( ) -> m_lpCmdLine
>3691	Identifier	m_lpCmdLine
>3692	CallExpression	AfxGetApp ( )
>3693	ArgumentList	 
>3694	Callee	AfxGetApp
>3695	Identifier	AfxGetApp
>3696	Callee	strlen
>3697	Identifier	strlen
>3698	PtrMemberAccess	AfxGetApp ( ) -> m_lpCmdLine
>3699	Identifier	m_lpCmdLine
>3700	CallExpression	AfxGetApp ( )
>3701	ArgumentList	 
>3702	Callee	AfxGetApp
>3703	Identifier	AfxGetApp
>3704	IdentifierDeclStatement	 
>3705	IdentifierDecl	bProjectLoaded = false
>3706	AssignmentExpr	bProjectLoaded = false
>3707	Identifier	false
>3708	Identifier	false
>3709	Identifier	bProjectLoaded
>3710	IdentifierDeclType	bool
>3752	FunctionDef	CMainFrame 
>3753	ParameterList	WPARAM wParam , LPARAM lParam
>3754	Parameter	 
>3755	Identifier	lParam
>3756	ParameterType	LPARAM
>3757	Parameter	 
>3758	Identifier	wParam
>3759	ParameterType	WPARAM
>3760	ReturnType	BOOL
>3761	CompoundStatement	 
>3762	ReturnStatement	 
>3763	CallExpression	CFrameWnd 
>3764	ArgumentList	wParam
>3765	Argument	lParam
>3766	Identifier	lParam
>3767	Argument	wParam
>3768	Identifier	wParam
>3769	Callee	CFrameWnd 
>3770	Identifier	CFrameWnd 
>3777	FunctionDef	CMainFrame 
>3778	ParameterList	UINT message , WPARAM wParam , LPARAM lParam
>3779	Parameter	 
>3780	Identifier	lParam
>3781	ParameterType	LPARAM
>3782	Parameter	 
>3783	Identifier	wParam
>3784	ParameterType	WPARAM
>3785	Parameter	 
>3786	Identifier	message
>3787	ParameterType	UINT
>3788	ReturnType	LRESULT
>3789	CompoundStatement	 
>3790	ReturnStatement	 
>3791	CallExpression	CFrameWnd 
>3792	ArgumentList	message
>3793	Argument	lParam
>3794	Identifier	lParam
>3795	Argument	wParam
>3796	Identifier	wParam
>3797	Argument	message
>3798	Identifier	message
>3799	Callee	CFrameWnd 
>3800	Identifier	CFrameWnd 
>3801	ExpressionStatement	 
>3802	CallExpression	RoutineProcessing ( )
>3803	ArgumentList	 
>3804	Callee	RoutineProcessing
>3805	Identifier	RoutineProcessing
>3813	FunctionDef	CMainFrame 
>3814	ParameterList	 
>3815	ReturnType	void
>3816	CompoundStatement	 
>3817	IfStatement	if ( m_bDoLoop )
>3818	CompoundStatement	 
>3819	IfStatement	if ( g_PrefsDlg . m_bQE4Painting && g_nUpdateBits )
>3820	CompoundStatement	 
>3821	ExpressionStatement	 
>3822	CallExpression	UpdateWindows ( nBits )
>3823	ArgumentList	nBits
>3824	Argument	nBits
>3825	Identifier	nBits
>3826	Callee	UpdateWindows
>3827	Identifier	UpdateWindows
>3828	ExpressionStatement	 
>3829	AssignmentExpr	g_nUpdateBits = 0
>3830	PrimaryExpression	0
>3831	Identifier	g_nUpdateBits
>3832	IdentifierDeclStatement	 
>3833	IdentifierDecl	nBits = g_nUpdateBits
>3834	AssignmentExpr	nBits = g_nUpdateBits
>3835	Identifier	g_nUpdateBits
>3836	Identifier	g_nUpdateBits
>3837	Identifier	nBits
>3838	IdentifierDeclType	int
>3839	Condition	 
>3840	AndExpression	g_PrefsDlg . m_bQE4Painting && g_nUpdateBits
>3841	Identifier	g_nUpdateBits
>3842	MemberAccess	g_PrefsDlg . m_bQE4Painting
>3843	Identifier	m_bQE4Painting
>3844	Identifier	g_PrefsDlg
>3845	IfStatement	if ( m_pCamWnd )
>3846	ExpressionStatement	 
>3847	CallExpression	m_pCamWnd -> Cam_MouseControl ( delta )
>3848	ArgumentList	delta
>3849	Argument	delta
>3850	Identifier	delta
>3851	Callee	m_pCamWnd -> Cam_MouseControl
>3852	PtrMemberAccess	m_pCamWnd -> Cam_MouseControl
>3853	Identifier	Cam_MouseControl
>3854	Identifier	m_pCamWnd
>3855	Condition	 
>3856	Identifier	m_pCamWnd
>3857	IfStatement	if ( delta > 0.2 )
>3858	ExpressionStatement	 
>3859	AssignmentExpr	delta = 0.2
>3860	PrimaryExpression	0.2
>3861	Identifier	delta
>3862	Condition	 
>3863	RelationalExpression	delta > 0.2
>3864	PrimaryExpression	0.2
>3865	Identifier	delta
>3866	ExpressionStatement	 
>3867	AssignmentExpr	oldtime = time
>3868	Identifier	time
>3869	Identifier	oldtime
>3870	ExpressionStatement	 
>3871	AssignmentExpr	delta = time - oldtime
>3872	AdditiveExpression	time - oldtime
>3873	Identifier	oldtime
>3874	Identifier	time
>3875	Identifier	delta
>3876	ExpressionStatement	 
>3877	AssignmentExpr	time = Sys_DoubleTime ( )
>3878	CallExpression	Sys_DoubleTime ( )
>3879	ArgumentList	 
>3880	Callee	Sys_DoubleTime
>3881	Identifier	Sys_DoubleTime
>3882	Identifier	time
>3883	ExpressionStatement	 
>3884	CallExpression	CheckBspProcess ( )
>3885	ArgumentList	 
>3886	Callee	CheckBspProcess
>3887	Identifier	CheckBspProcess
>3888	IdentifierDeclStatement	 
>3889	IdentifierDecl	delta = 0.0
>3890	AssignmentExpr	delta = 0.0
>3891	PrimaryExpression	0.0
>3892	Identifier	delta
>3893	Identifier	delta
>3894	IdentifierDeclType	double
>3895	IdentifierDeclStatement	 
>3896	IdentifierDecl	oldtime = 0.0
>3897	AssignmentExpr	oldtime = 0.0
>3898	PrimaryExpression	0.0
>3899	Identifier	oldtime
>3900	Identifier	oldtime
>3901	IdentifierDeclType	double
>3902	IdentifierDeclStatement	 
>3903	IdentifierDecl	time = 0.0
>3904	AssignmentExpr	time = 0.0
>3905	PrimaryExpression	0.0
>3906	Identifier	time
>3907	Identifier	time
>3908	IdentifierDeclType	double
>3909	Condition	 
>3910	Identifier	m_bDoLoop
>3924	FunctionDef	CMainFrame 
>3925	ParameterList	UINT message , WPARAM wParam , LPARAM lParam
>3926	Parameter	 
>3927	Identifier	lParam
>3928	ParameterType	LPARAM
>3929	Parameter	 
>3930	Identifier	wParam
>3931	ParameterType	WPARAM
>3932	Parameter	 
>3933	Identifier	message
>3934	ParameterType	UINT
>3935	ReturnType	LRESULT
>3936	CompoundStatement	 
>3937	ReturnStatement	 
>3938	CallExpression	CFrameWnd 
>3939	ArgumentList	message
>3940	Argument	lParam
>3941	Identifier	lParam
>3942	Argument	wParam
>3943	Identifier	wParam
>3944	Argument	message
>3945	Identifier	message
>3946	Callee	CFrameWnd 
>3947	Identifier	CFrameWnd 
>3955	FunctionDef	MouseDown ()
>3956	ParameterList	 
>3957	ReturnType	bool
>3958	CompoundStatement	 
>3959	ReturnStatement	 
>3960	Identifier	false
>3961	ReturnStatement	 
>3962	Identifier	true
>3963	Statement	 
>3964	Statement	 
>3965	Statement	 
>3966	Statement	 
>3967	Statement	 
>3968	Statement	 
>3969	Statement	 
>3970	Statement	 
>3971	ReturnStatement	 
>3972	Identifier	true
>3973	Statement	 
>3974	Statement	 
>3975	Statement	 
>3976	Statement	 
>3977	Statement	 
>3978	Statement	 
>3979	Statement	 
>3980	Statement	 
>3981	ReturnStatement	 
>3982	Identifier	true
>3983	Statement	 
>3984	Statement	 
>3985	Statement	 
>3986	Statement	 
>3987	Statement	 
>3988	Statement	 
>3989	Statement	 
>3990	Statement	 
>3996	FunctionDef	CMainFrame 
>3997	ParameterList	UINT nIDEvent
>3998	Parameter	 
>3999	Identifier	nIDEvent
>4000	ParameterType	UINT
>4001	ReturnType	void
>4002	CompoundStatement	 
>4003	IfStatement	if ( ! MouseDown ( ) )
>4004	CompoundStatement	 
>4005	ExpressionStatement	 
>4006	CallExpression	QE_CheckAutoSave ( )
>4007	ArgumentList	 
>4008	Callee	QE_CheckAutoSave
>4009	Identifier	QE_CheckAutoSave
>4010	ExpressionStatement	 
>4011	CallExpression	QE_CountBrushesAndUpdateStatusBar ( )
>4012	ArgumentList	 
>4013	Callee	QE_CountBrushesAndUpdateStatusBar
>4014	Identifier	QE_CountBrushesAndUpdateStatusBar
>4015	Condition	 
>4016	UnaryOp	! MouseDown ( )
>4017	CallExpression	MouseDown ( )
>4018	ArgumentList	 
>4019	Callee	MouseDown
>4020	Identifier	MouseDown
>4021	UnaryOperator	!
>4032	FunctionDef	LoadWindowPlacement (HWND hwnd , const char * pName)
>4033	ParameterList	HWND hwnd , const char * pName
>4034	Parameter	 
>4035	Identifier	pName
>4036	ParameterType	const char *
>4037	Parameter	 
>4038	Identifier	hwnd
>4039	ParameterType	HWND
>4040	ReturnType	bool
>4041	CompoundStatement	 
>4042	ReturnStatement	 
>4043	Identifier	false
>4044	IfStatement	if ( LoadRegistryInfo ( pName , & wp , & lSize ) )
>4045	CompoundStatement	 
>4046	ReturnStatement	 
>4047	Identifier	true
>4048	ExpressionStatement	 
>4049	CallExpression	SetWindowPlacement ( hwnd , & wp )
>4050	ArgumentList	hwnd
>4051	Argument	& wp
>4052	UnaryOp	& wp
>4053	Identifier	wp
>4054	UnaryOperator	&
>4055	Argument	hwnd
>4056	Identifier	hwnd
>4057	Callee	SetWindowPlacement
>4058	Identifier	SetWindowPlacement
>4059	Statement	 
>4060	Condition	 
>4061	CallExpression	LoadRegistryInfo ( pName , & wp , & lSize )
>4062	ArgumentList	pName
>4063	Argument	& lSize
>4064	UnaryOp	& lSize
>4065	Identifier	lSize
>4066	UnaryOperator	&
>4067	Argument	& wp
>4068	UnaryOp	& wp
>4069	Identifier	wp
>4070	UnaryOperator	&
>4071	Argument	pName
>4072	Identifier	pName
>4073	Callee	LoadRegistryInfo
>4074	Identifier	LoadRegistryInfo
>4075	IdentifierDeclStatement	 
>4076	IdentifierDecl	lSize = sizeof ( wp )
>4077	AssignmentExpr	lSize = sizeof ( wp )
>4078	SizeofExpr	sizeof ( wp )
>4079	SizeofOperand	wp
>4080	Sizeof	sizeof
>4081	Identifier	lSize
>4082	Identifier	lSize
>4083	IdentifierDeclType	LONG
>4084	ExpressionStatement	 
>4085	AssignmentExpr	wp . length = sizeof ( WINDOWPLACEMENT )
>4086	SizeofExpr	sizeof ( WINDOWPLACEMENT )
>4087	SizeofOperand	WINDOWPLACEMENT
>4088	Sizeof	sizeof
>4089	MemberAccess	wp . length
>4090	Identifier	length
>4091	Identifier	wp
>4092	IdentifierDeclStatement	 
>4093	IdentifierDecl	wp
>4094	Identifier	wp
>4095	IdentifierDeclType	WINDOWPLACEMENT
>4109	FunctionDef	SaveWindowPlacement (HWND hwnd , const char * pName)
>4110	ParameterList	HWND hwnd , const char * pName
>4111	Parameter	 
>4112	Identifier	pName
>4113	ParameterType	const char *
>4114	Parameter	 
>4115	Identifier	hwnd
>4116	ParameterType	HWND
>4117	ReturnType	void
>4118	CompoundStatement	 
>4119	CompoundStatement	 
>4120	ExpressionStatement	 
>4121	CallExpression	SaveRegistryInfo ( pName , & wp , sizeof ( wp ) )
>4122	ArgumentList	pName
>4123	Argument	sizeof ( wp )
>4124	SizeofExpr	sizeof ( wp )
>4125	SizeofOperand	wp
>4126	Sizeof	sizeof
>4127	Argument	& wp
>4128	UnaryOp	& wp
>4129	Identifier	wp
>4130	UnaryOperator	&
>4131	Argument	pName
>4132	Identifier	pName
>4133	Callee	SaveRegistryInfo
>4134	Identifier	SaveRegistryInfo
>4135	Statement	 
>4136	Statement	 
>4137	Statement	 
>4138	Statement	 
>4139	Statement	 
>4140	Statement	 
>4141	Statement	 
>4142	Statement	 
>4143	Statement	 
>4144	Statement	 
>4145	Statement	 
>4146	ExpressionStatement	 
>4147	AssignmentExpr	wp . length = sizeof ( WINDOWPLACEMENT )
>4148	SizeofExpr	sizeof ( WINDOWPLACEMENT )
>4149	SizeofOperand	WINDOWPLACEMENT
>4150	Sizeof	sizeof
>4151	MemberAccess	wp . length
>4152	Identifier	length
>4153	Identifier	wp
>4154	IdentifierDeclStatement	 
>4155	IdentifierDecl	wp
>4156	Identifier	wp
>4157	IdentifierDeclType	WINDOWPLACEMENT
>4166	FunctionDef	CMainFrame 
>4167	ParameterList	 
>4168	ReturnType	void
>4169	CompoundStatement	 
>4170	ExpressionStatement	 
>4171	CallExpression	CFrameWnd 
>4172	ArgumentList	 
>4173	Callee	CFrameWnd 
>4174	Identifier	CFrameWnd 
>4175	ExpressionStatement	 
>4176	CallExpression	FreeShaders ( )
>4177	ArgumentList	 
>4178	Callee	FreeShaders
>4179	Identifier	FreeShaders
>4180	ExpressionStatement	 
>4181	CallExpression	ClosePakFile ( )
>4182	ArgumentList	 
>4183	Callee	ClosePakFile
>4184	Identifier	ClosePakFile
>4185	IfStatement	if ( notexture )
>4186	CompoundStatement	 
>4187	ExpressionStatement	 
>4188	CallExpression	free ( notexture )
>4189	ArgumentList	notexture
>4190	Argument	notexture
>4191	Identifier	notexture
>4192	Callee	free
>4193	Identifier	free
>4194	IfStatement	if ( notexture -> pData )
>4195	ExpressionStatement	 
>4196	CallExpression	GETPLUGINTEXDEF ( notexture ) -> DecRef ( )
>4197	ArgumentList	 
>4198	Callee	GETPLUGINTEXDEF ( notexture ) -> DecRef
>4199	PtrMemberAccess	GETPLUGINTEXDEF ( notexture ) -> DecRef
>4200	Identifier	DecRef
>4201	CallExpression	GETPLUGINTEXDEF ( notexture )
>4202	ArgumentList	notexture
>4203	Argument	notexture
>4204	Identifier	notexture
>4205	Callee	GETPLUGINTEXDEF
>4206	Identifier	GETPLUGINTEXDEF
>4207	Condition	 
>4208	PtrMemberAccess	notexture -> pData
>4209	Identifier	pData
>4210	Identifier	notexture
>4211	IfStatement	if ( ! notexture -> pData )
>4212	ExpressionStatement	 
>4213	CallExpression	Sys_Printf ( \"WARNING
>4214	ArgumentList	\"WARNING
>4215	Argument	\"WARNING
>4216	PrimaryExpression	\"WARNING
>4217	Callee	Sys_Printf
>4218	Identifier	Sys_Printf
>4219	Condition	 
>4220	UnaryOp	! notexture -> pData
>4221	PtrMemberAccess	notexture -> pData
>4222	Identifier	pData
>4223	Identifier	notexture
>4224	UnaryOperator	!
>4225	Condition	 
>4226	Identifier	notexture
>4227	IfStatement	if ( world_entity )
>4228	ExpressionStatement	 
>4229	CallExpression	Entity_Free ( world_entity )
>4230	ArgumentList	world_entity
>4231	Argument	world_entity
>4232	Identifier	world_entity
>4233	Callee	Entity_Free
>4234	Identifier	Entity_Free
>4235	Condition	 
>4236	Identifier	world_entity
>4237	ExpressionStatement	 
>4238	CallExpression	Texture_Cleanup ( )
>4239	ArgumentList	 
>4240	Callee	Texture_Cleanup
>4241	Identifier	Texture_Cleanup
>4242	WhileStatement	while ( pEntity != NULL && pEntity != g_qeglobals . d_project_entity )
>4243	CompoundStatement	 
>4244	ExpressionStatement	 
>4245	AssignmentExpr	pEntity = pNextEntity
>4246	Identifier	pNextEntity
>4247	Identifier	pEntity
>4248	ExpressionStatement	 
>4249	CallExpression	Entity_Free ( pEntity )
>4250	ArgumentList	pEntity
>4251	Argument	pEntity
>4252	Identifier	pEntity
>4253	Callee	Entity_Free
>4254	Identifier	Entity_Free
>4255	IdentifierDeclStatement	 
>4256	IdentifierDecl	* pNextEntity = pEntity -> next
>4257	AssignmentExpr	* pNextEntity = pEntity -> next
>4258	PtrMemberAccess	pEntity -> next
>4259	Identifier	next
>4260	Identifier	pEntity
>4261	Identifier	pNextEntity
>4262	Identifier	pNextEntity
>4263	IdentifierDeclType	entity_t *
>4264	Condition	 
>4265	AndExpression	pEntity != NULL && pEntity != g_qeglobals . d_project_entity
>4266	EqualityExpression	pEntity != g_qeglobals . d_project_entity
>4267	MemberAccess	g_qeglobals . d_project_entity
>4268	Identifier	d_project_entity
>4269	Identifier	g_qeglobals
>4270	Identifier	pEntity
>4271	EqualityExpression	pEntity != NULL
>4272	Identifier	NULL
>4273	Identifier	pEntity
>4274	IdentifierDeclStatement	 
>4275	IdentifierDecl	* pEntity = g_qeglobals . d_project_entity -> next
>4276	AssignmentExpr	* pEntity = g_qeglobals . d_project_entity -> next
>4277	PtrMemberAccess	g_qeglobals . d_project_entity -> next
>4278	Identifier	next
>4279	MemberAccess	g_qeglobals . d_project_entity
>4280	Identifier	d_project_entity
>4281	Identifier	g_qeglobals
>4282	Identifier	pEntity
>4283	Identifier	pEntity
>4284	IdentifierDeclType	entity_t *
>4285	WhileStatement	while ( pEPair )
>4286	CompoundStatement	 
>4287	ExpressionStatement	 
>4288	AssignmentExpr	pEPair = pNextEPair
>4289	Identifier	pNextEPair
>4290	Identifier	pEPair
>4291	ExpressionStatement	 
>4292	CallExpression	free ( pEPair )
>4293	ArgumentList	pEPair
>4294	Argument	pEPair
>4295	Identifier	pEPair
>4296	Callee	free
>4297	Identifier	free
>4298	ExpressionStatement	 
>4299	CallExpression	free ( pEPair -> value )
>4300	ArgumentList	pEPair -> value
>4301	Argument	pEPair -> value
>4302	PtrMemberAccess	pEPair -> value
>4303	Identifier	value
>4304	Identifier	pEPair
>4305	Callee	free
>4306	Identifier	free
>4307	ExpressionStatement	 
>4308	CallExpression	free ( pEPair -> key )
>4309	ArgumentList	pEPair -> key
>4310	Argument	pEPair -> key
>4311	PtrMemberAccess	pEPair -> key
>4312	Identifier	key
>4313	Identifier	pEPair
>4314	Callee	free
>4315	Identifier	free
>4316	IdentifierDeclStatement	 
>4317	IdentifierDecl	* pNextEPair = pEPair -> next
>4318	AssignmentExpr	* pNextEPair = pEPair -> next
>4319	PtrMemberAccess	pEPair -> next
>4320	Identifier	next
>4321	Identifier	pEPair
>4322	Identifier	pNextEPair
>4323	Identifier	pNextEPair
>4324	IdentifierDeclType	epair_t *
>4325	Condition	 
>4326	Identifier	pEPair
>4327	IdentifierDeclStatement	 
>4328	IdentifierDecl	* pEPair = g_qeglobals . d_project_entity -> epairs
>4329	AssignmentExpr	* pEPair = g_qeglobals . d_project_entity -> epairs
>4330	PtrMemberAccess	g_qeglobals . d_project_entity -> epairs
>4331	Identifier	epairs
>4332	MemberAccess	g_qeglobals . d_project_entity
>4333	Identifier	d_project_entity
>4334	Identifier	g_qeglobals
>4335	Identifier	pEPair
>4336	Identifier	pEPair
>4337	IdentifierDeclType	epair_t *
>4338	WhileStatement	while ( entities . next != & entities )
>4339	ExpressionStatement	 
>4340	CallExpression	Entity_Free ( entities . next )
>4341	ArgumentList	entities . next
>4342	Argument	entities . next
>4343	MemberAccess	entities . next
>4344	Identifier	next
>4345	Identifier	entities
>4346	Callee	Entity_Free
>4347	Identifier	Entity_Free
>4348	Condition	 
>4349	EqualityExpression	entities . next != & entities
>4350	UnaryOp	& entities
>4351	Identifier	entities
>4352	UnaryOperator	&
>4353	MemberAccess	entities . next
>4354	Identifier	next
>4355	Identifier	entities
>4356	WhileStatement	while ( filtered_brushes . next != & filtered_brushes )
>4357	ExpressionStatement	 
>4358	CallExpression	Brush_Free ( filtered_brushes . next , false )
>4359	ArgumentList	filtered_brushes . next
>4360	Argument	false
>4361	Identifier	false
>4362	Argument	filtered_brushes . next
>4363	MemberAccess	filtered_brushes . next
>4364	Identifier	next
>4365	Identifier	filtered_brushes
>4366	Callee	Brush_Free
>4367	Identifier	Brush_Free
>4368	Condition	 
>4369	EqualityExpression	filtered_brushes . next != & filtered_brushes
>4370	UnaryOp	& filtered_brushes
>4371	Identifier	filtered_brushes
>4372	UnaryOperator	&
>4373	MemberAccess	filtered_brushes . next
>4374	Identifier	next
>4375	Identifier	filtered_brushes
>4376	WhileStatement	while ( selected_brushes . next != & selected_brushes )
>4377	ExpressionStatement	 
>4378	CallExpression	Brush_Free ( selected_brushes . next , false )
>4379	ArgumentList	selected_brushes . next
>4380	Argument	false
>4381	Identifier	false
>4382	Argument	selected_brushes . next
>4383	MemberAccess	selected_brushes . next
>4384	Identifier	next
>4385	Identifier	selected_brushes
>4386	Callee	Brush_Free
>4387	Identifier	Brush_Free
>4388	Condition	 
>4389	EqualityExpression	selected_brushes . next != & selected_brushes
>4390	UnaryOp	& selected_brushes
>4391	Identifier	selected_brushes
>4392	UnaryOperator	&
>4393	MemberAccess	selected_brushes . next
>4394	Identifier	next
>4395	Identifier	selected_brushes
>4396	WhileStatement	while ( active_brushes . next != & active_brushes )
>4397	ExpressionStatement	 
>4398	CallExpression	Brush_Free ( active_brushes . next , false )
>4399	ArgumentList	active_brushes . next
>4400	Argument	false
>4401	Identifier	false
>4402	Argument	active_brushes . next
>4403	MemberAccess	active_brushes . next
>4404	Identifier	next
>4405	Identifier	active_brushes
>4406	Callee	Brush_Free
>4407	Identifier	Brush_Free
>4408	Condition	 
>4409	EqualityExpression	active_brushes . next != & active_brushes
>4410	UnaryOp	& active_brushes
>4411	Identifier	active_brushes
>4412	UnaryOperator	&
>4413	MemberAccess	active_brushes . next
>4414	Identifier	next
>4415	Identifier	active_brushes
>4416	ExpressionStatement	 
>4417	CallExpression	CleanUpEntities ( )
>4418	ArgumentList	 
>4419	Callee	CleanUpEntities
>4420	Identifier	CleanUpEntities
>4421	IfStatement	if ( strcmpi ( currentmap , \"unnamed.map\" ) != 0 )
>4422	CompoundStatement	 
>4423	ExpressionStatement	 
>4424	CallExpression	g_PrefsDlg . SavePrefs ( )
>4425	ArgumentList	 
>4426	Callee	g_PrefsDlg . SavePrefs
>4427	MemberAccess	g_PrefsDlg . SavePrefs
>4428	Identifier	SavePrefs
>4429	Identifier	g_PrefsDlg
>4430	ExpressionStatement	 
>4431	AssignmentExpr	g_PrefsDlg . m_strLastMap = currentmap
>4432	Identifier	currentmap
>4433	MemberAccess	g_PrefsDlg . m_strLastMap
>4434	Identifier	m_strLastMap
>4435	Identifier	g_PrefsDlg
>4436	Condition	 
>4437	EqualityExpression	strcmpi ( currentmap , \"unnamed.map\" ) != 0
>4438	PrimaryExpression	0
>4439	CallExpression	strcmpi ( currentmap , \"unnamed.map\" )
>4440	ArgumentList	currentmap
>4441	Argument	\"unnamed.map\"
>4442	PrimaryExpression	\"unnamed.map\"
>4443	Argument	currentmap
>4444	Identifier	currentmap
>4445	Callee	strcmpi
>4446	Identifier	strcmpi
>4447	ExpressionStatement	 
>4448	CallExpression	SaveRegistryInfo ( \"SavedInfo\" , & g_qeglobals . d_savedinfo , sizeof ( g_qeglobals . d_savedinfo ) )
>4449	ArgumentList	\"SavedInfo\"
>4450	Argument	sizeof ( g_qeglobals . d_savedinfo )
>4451	SizeofExpr	sizeof ( g_qeglobals . d_savedinfo )
>4452	MemberAccess	g_qeglobals . d_savedinfo
>4453	Identifier	d_savedinfo
>4454	Identifier	g_qeglobals
>4455	Sizeof	sizeof
>4456	Argument	& g_qeglobals . d_savedinfo
>4457	UnaryOp	& g_qeglobals . d_savedinfo
>4458	MemberAccess	g_qeglobals . d_savedinfo
>4459	Identifier	d_savedinfo
>4460	Identifier	g_qeglobals
>4461	UnaryOperator	&
>4462	Argument	\"SavedInfo\"
>4463	PrimaryExpression	\"SavedInfo\"
>4464	Callee	SaveRegistryInfo
>4465	Identifier	SaveRegistryInfo
>4466	ExpressionStatement	 
>4467	AssignmentExpr	m_pCamWnd = NULL
>4468	Identifier	NULL
>4469	Identifier	m_pCamWnd
>4470	ExpressionStatement	 
>4471	Identifier	m_pCamWnd
>4472	Statement	 
>4473	IfStatement	if ( m_pCamWnd -> GetSafeHwnd ( ) )
>4474	ExpressionStatement	 
>4475	CallExpression	m_pCamWnd -> SendMessage ( WM_DESTROY , 0 , 0 )
>4476	ArgumentList	WM_DESTROY
>4477	Argument	0
>4478	PrimaryExpression	0
>4479	Argument	0
>4480	PrimaryExpression	0
>4481	Argument	WM_DESTROY
>4482	Identifier	WM_DESTROY
>4483	Callee	m_pCamWnd -> SendMessage
>4484	PtrMemberAccess	m_pCamWnd -> SendMessage
>4485	Identifier	SendMessage
>4486	Identifier	m_pCamWnd
>4487	Condition	 
>4488	CallExpression	m_pCamWnd -> GetSafeHwnd ( )
>4489	ArgumentList	 
>4490	Callee	m_pCamWnd -> GetSafeHwnd
>4491	PtrMemberAccess	m_pCamWnd -> GetSafeHwnd
>4492	Identifier	GetSafeHwnd
>4493	Identifier	m_pCamWnd
>4494	ExpressionStatement	 
>4495	AssignmentExpr	m_pEditWnd = NULL
>4496	Identifier	NULL
>4497	Identifier	m_pEditWnd
>4498	ExpressionStatement	 
>4499	Identifier	m_pEditWnd
>4500	Statement	 
>4501	IfStatement	if ( m_pEditWnd -> GetSafeHwnd ( ) )
>4502	ExpressionStatement	 
>4503	CallExpression	m_pEditWnd -> SendMessage ( WM_DESTROY , 0 , 0 )
>4504	ArgumentList	WM_DESTROY
>4505	Argument	0
>4506	PrimaryExpression	0
>4507	Argument	0
>4508	PrimaryExpression	0
>4509	Argument	WM_DESTROY
>4510	Identifier	WM_DESTROY
>4511	Callee	m_pEditWnd -> SendMessage
>4512	PtrMemberAccess	m_pEditWnd -> SendMessage
>4513	Identifier	SendMessage
>4514	Identifier	m_pEditWnd
>4515	Condition	 
>4516	CallExpression	m_pEditWnd -> GetSafeHwnd ( )
>4517	ArgumentList	 
>4518	Callee	m_pEditWnd -> GetSafeHwnd
>4519	PtrMemberAccess	m_pEditWnd -> GetSafeHwnd
>4520	Identifier	GetSafeHwnd
>4521	Identifier	m_pEditWnd
>4522	ExpressionStatement	 
>4523	AssignmentExpr	m_pTexWnd = NULL
>4524	Identifier	NULL
>4525	Identifier	m_pTexWnd
>4526	ExpressionStatement	 
>4527	Identifier	m_pTexWnd
>4528	Statement	 
>4529	IfStatement	if ( m_pTexWnd -> GetSafeHwnd ( ) )
>4530	ExpressionStatement	 
>4531	CallExpression	m_pTexWnd -> SendMessage ( WM_DESTROY , 0 , 0 )
>4532	ArgumentList	WM_DESTROY
>4533	Argument	0
>4534	PrimaryExpression	0
>4535	Argument	0
>4536	PrimaryExpression	0
>4537	Argument	WM_DESTROY
>4538	Identifier	WM_DESTROY
>4539	Callee	m_pTexWnd -> SendMessage
>4540	PtrMemberAccess	m_pTexWnd -> SendMessage
>4541	Identifier	SendMessage
>4542	Identifier	m_pTexWnd
>4543	Condition	 
>4544	CallExpression	m_pTexWnd -> GetSafeHwnd ( )
>4545	ArgumentList	 
>4546	Callee	m_pTexWnd -> GetSafeHwnd
>4547	PtrMemberAccess	m_pTexWnd -> GetSafeHwnd
>4548	Identifier	GetSafeHwnd
>4549	Identifier	m_pTexWnd
>4550	ExpressionStatement	 
>4551	AssignmentExpr	m_pZWnd = NULL
>4552	Identifier	NULL
>4553	Identifier	m_pZWnd
>4554	ExpressionStatement	 
>4555	Identifier	m_pZWnd
>4556	Statement	 
>4557	IfStatement	if ( m_pZWnd -> GetSafeHwnd ( ) )
>4558	ExpressionStatement	 
>4559	CallExpression	m_pZWnd -> SendMessage ( WM_DESTROY , 0 , 0 )
>4560	ArgumentList	WM_DESTROY
>4561	Argument	0
>4562	PrimaryExpression	0
>4563	Argument	0
>4564	PrimaryExpression	0
>4565	Argument	WM_DESTROY
>4566	Identifier	WM_DESTROY
>4567	Callee	m_pZWnd -> SendMessage
>4568	PtrMemberAccess	m_pZWnd -> SendMessage
>4569	Identifier	SendMessage
>4570	Identifier	m_pZWnd
>4571	Condition	 
>4572	CallExpression	m_pZWnd -> GetSafeHwnd ( )
>4573	ArgumentList	 
>4574	Callee	m_pZWnd -> GetSafeHwnd
>4575	PtrMemberAccess	m_pZWnd -> GetSafeHwnd
>4576	Identifier	GetSafeHwnd
>4577	Identifier	m_pZWnd
>4578	ExpressionStatement	 
>4579	AssignmentExpr	m_pXZWnd = NULL
>4580	Identifier	NULL
>4581	Identifier	m_pXZWnd
>4582	ExpressionStatement	 
>4583	Identifier	m_pXZWnd
>4584	Statement	 
>4585	IfStatement	if ( m_pXZWnd -> GetSafeHwnd ( ) )
>4586	ExpressionStatement	 
>4587	CallExpression	m_pXZWnd -> SendMessage ( WM_DESTROY , 0 , 0 )
>4588	ArgumentList	WM_DESTROY
>4589	Argument	0
>4590	PrimaryExpression	0
>4591	Argument	0
>4592	PrimaryExpression	0
>4593	Argument	WM_DESTROY
>4594	Identifier	WM_DESTROY
>4595	Callee	m_pXZWnd -> SendMessage
>4596	PtrMemberAccess	m_pXZWnd -> SendMessage
>4597	Identifier	SendMessage
>4598	Identifier	m_pXZWnd
>4599	Condition	 
>4600	CallExpression	m_pXZWnd -> GetSafeHwnd ( )
>4601	ArgumentList	 
>4602	Callee	m_pXZWnd -> GetSafeHwnd
>4603	PtrMemberAccess	m_pXZWnd -> GetSafeHwnd
>4604	Identifier	GetSafeHwnd
>4605	Identifier	m_pXZWnd
>4606	ExpressionStatement	 
>4607	AssignmentExpr	m_pYZWnd = NULL
>4608	Identifier	NULL
>4609	Identifier	m_pYZWnd
>4610	ExpressionStatement	 
>4611	Identifier	m_pYZWnd
>4612	Statement	 
>4613	IfStatement	if ( m_pYZWnd -> GetSafeHwnd ( ) )
>4614	ExpressionStatement	 
>4615	CallExpression	m_pYZWnd -> SendMessage ( WM_DESTROY , 0 , 0 )
>4616	ArgumentList	WM_DESTROY
>4617	Argument	0
>4618	PrimaryExpression	0
>4619	Argument	0
>4620	PrimaryExpression	0
>4621	Argument	WM_DESTROY
>4622	Identifier	WM_DESTROY
>4623	Callee	m_pYZWnd -> SendMessage
>4624	PtrMemberAccess	m_pYZWnd -> SendMessage
>4625	Identifier	SendMessage
>4626	Identifier	m_pYZWnd
>4627	Condition	 
>4628	CallExpression	m_pYZWnd -> GetSafeHwnd ( )
>4629	ArgumentList	 
>4630	Callee	m_pYZWnd -> GetSafeHwnd
>4631	PtrMemberAccess	m_pYZWnd -> GetSafeHwnd
>4632	Identifier	GetSafeHwnd
>4633	Identifier	m_pYZWnd
>4634	ExpressionStatement	 
>4635	AssignmentExpr	m_pXYWnd = NULL
>4636	Identifier	NULL
>4637	Identifier	m_pXYWnd
>4638	ExpressionStatement	 
>4639	Identifier	m_pXYWnd
>4640	Statement	 
>4641	IfStatement	if ( m_pXYWnd -> GetSafeHwnd ( ) )
>4642	ExpressionStatement	 
>4643	CallExpression	m_pXYWnd -> SendMessage ( WM_DESTROY , 0 , 0 )
>4644	ArgumentList	WM_DESTROY
>4645	Argument	0
>4646	PrimaryExpression	0
>4647	Argument	0
>4648	PrimaryExpression	0
>4649	Argument	WM_DESTROY
>4650	Identifier	WM_DESTROY
>4651	Callee	m_pXYWnd -> SendMessage
>4652	PtrMemberAccess	m_pXYWnd -> SendMessage
>4653	Identifier	SendMessage
>4654	Identifier	m_pXYWnd
>4655	Condition	 
>4656	CallExpression	m_pXYWnd -> GetSafeHwnd ( )
>4657	ArgumentList	 
>4658	Callee	m_pXYWnd -> GetSafeHwnd
>4659	PtrMemberAccess	m_pXYWnd -> GetSafeHwnd
>4660	Identifier	GetSafeHwnd
>4661	Identifier	m_pXYWnd
>4662	IfStatement	if ( m_nCurrentStyle == 0 || m_nCurrentStyle == 3 )
>4663	ElseStatement	else
>4664	CompoundStatement	 
>4665	ExpressionStatement	 
>4666	CallExpression	SaveWindowState ( m_pEditWnd -> GetSafeHwnd ( ) , \"editwindow\" )
>4667	ArgumentList	m_pEditWnd -> GetSafeHwnd ( )
>4668	Argument	\"editwindow\"
>4669	PrimaryExpression	\"editwindow\"
>4670	Argument	m_pEditWnd -> GetSafeHwnd ( )
>4671	CallExpression	m_pEditWnd -> GetSafeHwnd ( )
>4672	ArgumentList	 
>4673	Callee	m_pEditWnd -> GetSafeHwnd
>4674	PtrMemberAccess	m_pEditWnd -> GetSafeHwnd
>4675	Identifier	GetSafeHwnd
>4676	Identifier	m_pEditWnd
>4677	Callee	SaveWindowState
>4678	Identifier	SaveWindowState
>4679	ExpressionStatement	 
>4680	CallExpression	SaveWindowState ( m_pTexWnd -> GetSafeHwnd ( ) , \"texwindow\" )
>4681	ArgumentList	m_pTexWnd -> GetSafeHwnd ( )
>4682	Argument	\"texwindow\"
>4683	PrimaryExpression	\"texwindow\"
>4684	Argument	m_pTexWnd -> GetSafeHwnd ( )
>4685	CallExpression	m_pTexWnd -> GetSafeHwnd ( )
>4686	ArgumentList	 
>4687	Callee	m_pTexWnd -> GetSafeHwnd
>4688	PtrMemberAccess	m_pTexWnd -> GetSafeHwnd
>4689	Identifier	GetSafeHwnd
>4690	Identifier	m_pTexWnd
>4691	Callee	SaveWindowState
>4692	Identifier	SaveWindowState
>4693	ExpressionStatement	 
>4694	CallExpression	SaveWindowPlacement ( m_pZWnd -> GetSafeHwnd ( ) , \"zwindow\" )
>4695	ArgumentList	m_pZWnd -> GetSafeHwnd ( )
>4696	Argument	\"zwindow\"
>4697	PrimaryExpression	\"zwindow\"
>4698	Argument	m_pZWnd -> GetSafeHwnd ( )
>4699	CallExpression	m_pZWnd -> GetSafeHwnd ( )
>4700	ArgumentList	 
>4701	Callee	m_pZWnd -> GetSafeHwnd
>4702	PtrMemberAccess	m_pZWnd -> GetSafeHwnd
>4703	Identifier	GetSafeHwnd
>4704	Identifier	m_pZWnd
>4705	Callee	SaveWindowPlacement
>4706	Identifier	SaveWindowPlacement
>4707	ExpressionStatement	 
>4708	CallExpression	SaveWindowPlacement ( m_pCamWnd -> GetSafeHwnd ( ) , \"camerawindow\" )
>4709	ArgumentList	m_pCamWnd -> GetSafeHwnd ( )
>4710	Argument	\"camerawindow\"
>4711	PrimaryExpression	\"camerawindow\"
>4712	Argument	m_pCamWnd -> GetSafeHwnd ( )
>4713	CallExpression	m_pCamWnd -> GetSafeHwnd ( )
>4714	ArgumentList	 
>4715	Callee	m_pCamWnd -> GetSafeHwnd
>4716	PtrMemberAccess	m_pCamWnd -> GetSafeHwnd
>4717	Identifier	GetSafeHwnd
>4718	Identifier	m_pCamWnd
>4719	Callee	SaveWindowPlacement
>4720	Identifier	SaveWindowPlacement
>4721	ExpressionStatement	 
>4722	CallExpression	SaveWindowPlacement ( m_pYZWnd -> GetSafeHwnd ( ) , \"yzwindow\" )
>4723	ArgumentList	m_pYZWnd -> GetSafeHwnd ( )
>4724	Argument	\"yzwindow\"
>4725	PrimaryExpression	\"yzwindow\"
>4726	Argument	m_pYZWnd -> GetSafeHwnd ( )
>4727	CallExpression	m_pYZWnd -> GetSafeHwnd ( )
>4728	ArgumentList	 
>4729	Callee	m_pYZWnd -> GetSafeHwnd
>4730	PtrMemberAccess	m_pYZWnd -> GetSafeHwnd
>4731	Identifier	GetSafeHwnd
>4732	Identifier	m_pYZWnd
>4733	Callee	SaveWindowPlacement
>4734	Identifier	SaveWindowPlacement
>4735	ExpressionStatement	 
>4736	CallExpression	SaveWindowPlacement ( m_pXZWnd -> GetSafeHwnd ( ) , \"xzwindow\" )
>4737	ArgumentList	m_pXZWnd -> GetSafeHwnd ( )
>4738	Argument	\"xzwindow\"
>4739	PrimaryExpression	\"xzwindow\"
>4740	Argument	m_pXZWnd -> GetSafeHwnd ( )
>4741	CallExpression	m_pXZWnd -> GetSafeHwnd ( )
>4742	ArgumentList	 
>4743	Callee	m_pXZWnd -> GetSafeHwnd
>4744	PtrMemberAccess	m_pXZWnd -> GetSafeHwnd
>4745	Identifier	GetSafeHwnd
>4746	Identifier	m_pXZWnd
>4747	Callee	SaveWindowPlacement
>4748	Identifier	SaveWindowPlacement
>4749	ExpressionStatement	 
>4750	CallExpression	SaveWindowPlacement ( m_pXYWnd -> GetSafeHwnd ( ) , \"xywindow\" )
>4751	ArgumentList	m_pXYWnd -> GetSafeHwnd ( )
>4752	Argument	\"xywindow\"
>4753	PrimaryExpression	\"xywindow\"
>4754	Argument	m_pXYWnd -> GetSafeHwnd ( )
>4755	CallExpression	m_pXYWnd -> GetSafeHwnd ( )
>4756	ArgumentList	 
>4757	Callee	m_pXYWnd -> GetSafeHwnd
>4758	PtrMemberAccess	m_pXYWnd -> GetSafeHwnd
>4759	Identifier	GetSafeHwnd
>4760	Identifier	m_pXYWnd
>4761	Callee	SaveWindowPlacement
>4762	Identifier	SaveWindowPlacement
>4763	CompoundStatement	 
>4764	ExpressionStatement	 
>4765	CallExpression	SaveRegistryInfo ( \"Radiant
>4766	ArgumentList	\"Radiant
>4767	Argument	sizeof ( spinfo )
>4768	SizeofExpr	sizeof ( spinfo )
>4769	SizeofOperand	spinfo
>4770	Sizeof	sizeof
>4771	Argument	& spinfo
>4772	UnaryOp	& spinfo
>4773	Identifier	spinfo
>4774	UnaryOperator	&
>4775	Argument	\"Radiant
>4776	PrimaryExpression	\"Radiant
>4777	Callee	SaveRegistryInfo
>4778	Identifier	SaveRegistryInfo
>4779	ExpressionStatement	 
>4780	CallExpression	m_wndSplit3 . GetRowInfo ( 1 , spinfo . m_nCur , spinfo . m_nMin )
>4781	ArgumentList	1
>4782	Argument	spinfo . m_nMin
>4783	MemberAccess	spinfo . m_nMin
>4784	Identifier	m_nMin
>4785	Identifier	spinfo
>4786	Argument	spinfo . m_nCur
>4787	MemberAccess	spinfo . m_nCur
>4788	Identifier	m_nCur
>4789	Identifier	spinfo
>4790	Argument	1
>4791	PrimaryExpression	1
>4792	Callee	m_wndSplit3 . GetRowInfo
>4793	MemberAccess	m_wndSplit3 . GetRowInfo
>4794	Identifier	GetRowInfo
>4795	Identifier	m_wndSplit3
>4796	ExpressionStatement	 
>4797	CallExpression	SaveRegistryInfo ( \"Radiant
>4798	ArgumentList	\"Radiant
>4799	Argument	sizeof ( spinfo )
>4800	SizeofExpr	sizeof ( spinfo )
>4801	SizeofOperand	spinfo
>4802	Sizeof	sizeof
>4803	Argument	& spinfo
>4804	UnaryOp	& spinfo
>4805	Identifier	spinfo
>4806	UnaryOperator	&
>4807	Argument	\"Radiant
>4808	PrimaryExpression	\"Radiant
>4809	Callee	SaveRegistryInfo
>4810	Identifier	SaveRegistryInfo
>4811	ExpressionStatement	 
>4812	CallExpression	m_wndSplit3 . GetRowInfo ( 0 , spinfo . m_nCur , spinfo . m_nMin )
>4813	ArgumentList	0
>4814	Argument	spinfo . m_nMin
>4815	MemberAccess	spinfo . m_nMin
>4816	Identifier	m_nMin
>4817	Identifier	spinfo
>4818	Argument	spinfo . m_nCur
>4819	MemberAccess	spinfo . m_nCur
>4820	Identifier	m_nCur
>4821	Identifier	spinfo
>4822	Argument	0
>4823	PrimaryExpression	0
>4824	Callee	m_wndSplit3 . GetRowInfo
>4825	MemberAccess	m_wndSplit3 . GetRowInfo
>4826	Identifier	GetRowInfo
>4827	Identifier	m_wndSplit3
>4828	ExpressionStatement	 
>4829	CallExpression	SaveRegistryInfo ( \"Radiant
>4830	ArgumentList	\"Radiant
>4831	Argument	sizeof ( spinfo )
>4832	SizeofExpr	sizeof ( spinfo )
>4833	SizeofOperand	spinfo
>4834	Sizeof	sizeof
>4835	Argument	& spinfo
>4836	UnaryOp	& spinfo
>4837	Identifier	spinfo
>4838	UnaryOperator	&
>4839	Argument	\"Radiant
>4840	PrimaryExpression	\"Radiant
>4841	Callee	SaveRegistryInfo
>4842	Identifier	SaveRegistryInfo
>4843	ExpressionStatement	 
>4844	CallExpression	m_wndSplit2 . GetColumnInfo ( 2 , spinfo . m_nCur , spinfo . m_nMin )
>4845	ArgumentList	2
>4846	Argument	spinfo . m_nMin
>4847	MemberAccess	spinfo . m_nMin
>4848	Identifier	m_nMin
>4849	Identifier	spinfo
>4850	Argument	spinfo . m_nCur
>4851	MemberAccess	spinfo . m_nCur
>4852	Identifier	m_nCur
>4853	Identifier	spinfo
>4854	Argument	2
>4855	PrimaryExpression	2
>4856	Callee	m_wndSplit2 . GetColumnInfo
>4857	MemberAccess	m_wndSplit2 . GetColumnInfo
>4858	Identifier	GetColumnInfo
>4859	Identifier	m_wndSplit2
>4860	ExpressionStatement	 
>4861	CallExpression	SaveRegistryInfo ( \"Radiant
>4862	ArgumentList	\"Radiant
>4863	Argument	sizeof ( spinfo )
>4864	SizeofExpr	sizeof ( spinfo )
>4865	SizeofOperand	spinfo
>4866	Sizeof	sizeof
>4867	Argument	& spinfo
>4868	UnaryOp	& spinfo
>4869	Identifier	spinfo
>4870	UnaryOperator	&
>4871	Argument	\"Radiant
>4872	PrimaryExpression	\"Radiant
>4873	Callee	SaveRegistryInfo
>4874	Identifier	SaveRegistryInfo
>4875	ExpressionStatement	 
>4876	CallExpression	m_wndSplit2 . GetColumnInfo ( 1 , spinfo . m_nCur , spinfo . m_nMin )
>4877	ArgumentList	1
>4878	Argument	spinfo . m_nMin
>4879	MemberAccess	spinfo . m_nMin
>4880	Identifier	m_nMin
>4881	Identifier	spinfo
>4882	Argument	spinfo . m_nCur
>4883	MemberAccess	spinfo . m_nCur
>4884	Identifier	m_nCur
>4885	Identifier	spinfo
>4886	Argument	1
>4887	PrimaryExpression	1
>4888	Callee	m_wndSplit2 . GetColumnInfo
>4889	MemberAccess	m_wndSplit2 . GetColumnInfo
>4890	Identifier	GetColumnInfo
>4891	Identifier	m_wndSplit2
>4892	ExpressionStatement	 
>4893	CallExpression	SaveRegistryInfo ( \"Radiant
>4894	ArgumentList	\"Radiant
>4895	Argument	sizeof ( spinfo )
>4896	SizeofExpr	sizeof ( spinfo )
>4897	SizeofOperand	spinfo
>4898	Sizeof	sizeof
>4899	Argument	& spinfo
>4900	UnaryOp	& spinfo
>4901	Identifier	spinfo
>4902	UnaryOperator	&
>4903	Argument	\"Radiant
>4904	PrimaryExpression	\"Radiant
>4905	Callee	SaveRegistryInfo
>4906	Identifier	SaveRegistryInfo
>4907	ExpressionStatement	 
>4908	CallExpression	m_wndSplit2 . GetColumnInfo ( 0 , spinfo . m_nCur , spinfo . m_nMin )
>4909	ArgumentList	0
>4910	Argument	spinfo . m_nMin
>4911	MemberAccess	spinfo . m_nMin
>4912	Identifier	m_nMin
>4913	Identifier	spinfo
>4914	Argument	spinfo . m_nCur
>4915	MemberAccess	spinfo . m_nCur
>4916	Identifier	m_nCur
>4917	Identifier	spinfo
>4918	Argument	0
>4919	PrimaryExpression	0
>4920	Callee	m_wndSplit2 . GetColumnInfo
>4921	MemberAccess	m_wndSplit2 . GetColumnInfo
>4922	Identifier	GetColumnInfo
>4923	Identifier	m_wndSplit2
>4924	ExpressionStatement	 
>4925	CallExpression	SaveRegistryInfo ( \"Radiant
>4926	ArgumentList	\"Radiant
>4927	Argument	sizeof ( spinfo )
>4928	SizeofExpr	sizeof ( spinfo )
>4929	SizeofOperand	spinfo
>4930	Sizeof	sizeof
>4931	Argument	& spinfo
>4932	UnaryOp	& spinfo
>4933	Identifier	spinfo
>4934	UnaryOperator	&
>4935	Argument	\"Radiant
>4936	PrimaryExpression	\"Radiant
>4937	Callee	SaveRegistryInfo
>4938	Identifier	SaveRegistryInfo
>4939	ExpressionStatement	 
>4940	CallExpression	m_wndSplit . GetRowInfo ( 1 , spinfo . m_nCur , spinfo . m_nMin )
>4941	ArgumentList	1
>4942	Argument	spinfo . m_nMin
>4943	MemberAccess	spinfo . m_nMin
>4944	Identifier	m_nMin
>4945	Identifier	spinfo
>4946	Argument	spinfo . m_nCur
>4947	MemberAccess	spinfo . m_nCur
>4948	Identifier	m_nCur
>4949	Identifier	spinfo
>4950	Argument	1
>4951	PrimaryExpression	1
>4952	Callee	m_wndSplit . GetRowInfo
>4953	MemberAccess	m_wndSplit . GetRowInfo
>4954	Identifier	GetRowInfo
>4955	Identifier	m_wndSplit
>4956	ExpressionStatement	 
>4957	CallExpression	SaveRegistryInfo ( \"Radiant
>4958	ArgumentList	\"Radiant
>4959	Argument	sizeof ( spinfo )
>4960	SizeofExpr	sizeof ( spinfo )
>4961	SizeofOperand	spinfo
>4962	Sizeof	sizeof
>4963	Argument	& spinfo
>4964	UnaryOp	& spinfo
>4965	Identifier	spinfo
>4966	UnaryOperator	&
>4967	Argument	\"Radiant
>4968	PrimaryExpression	\"Radiant
>4969	Callee	SaveRegistryInfo
>4970	Identifier	SaveRegistryInfo
>4971	ExpressionStatement	 
>4972	CallExpression	m_wndSplit . GetRowInfo ( 0 , spinfo . m_nCur , spinfo . m_nMin )
>4973	ArgumentList	0
>4974	Argument	spinfo . m_nMin
>4975	MemberAccess	spinfo . m_nMin
>4976	Identifier	m_nMin
>4977	Identifier	spinfo
>4978	Argument	spinfo . m_nCur
>4979	MemberAccess	spinfo . m_nCur
>4980	Identifier	m_nCur
>4981	Identifier	spinfo
>4982	Argument	0
>4983	PrimaryExpression	0
>4984	Callee	m_wndSplit . GetRowInfo
>4985	MemberAccess	m_wndSplit . GetRowInfo
>4986	Identifier	GetRowInfo
>4987	Identifier	m_wndSplit
>4988	IdentifierDeclStatement	 
>4989	IdentifierDecl	spinfo
>4990	Identifier	spinfo
>4991	IdentifierDeclType	SplitInfo
>4992	ExpressionStatement	 
>4993	CallExpression	SaveWindowState ( m_wndSplit3 . GetSafeHwnd ( ) , \"Radiant
>4994	ArgumentList	m_wndSplit3 . GetSafeHwnd ( )
>4995	Argument	\"Radiant
>4996	PrimaryExpression	\"Radiant
>4997	Argument	m_wndSplit3 . GetSafeHwnd ( )
>4998	CallExpression	m_wndSplit3 . GetSafeHwnd ( )
>4999	ArgumentList	 
>5000	Callee	m_wndSplit3 . GetSafeHwnd
>5001	MemberAccess	m_wndSplit3 . GetSafeHwnd
>5002	Identifier	GetSafeHwnd
>5003	Identifier	m_wndSplit3
>5004	Callee	SaveWindowState
>5005	Identifier	SaveWindowState
>5006	ExpressionStatement	 
>5007	CallExpression	SaveWindowState ( m_wndSplit2 . GetSafeHwnd ( ) , \"Radiant
>5008	ArgumentList	m_wndSplit2 . GetSafeHwnd ( )
>5009	Argument	\"Radiant
>5010	PrimaryExpression	\"Radiant
>5011	Argument	m_wndSplit2 . GetSafeHwnd ( )
>5012	CallExpression	m_wndSplit2 . GetSafeHwnd ( )
>5013	ArgumentList	 
>5014	Callee	m_wndSplit2 . GetSafeHwnd
>5015	MemberAccess	m_wndSplit2 . GetSafeHwnd
>5016	Identifier	GetSafeHwnd
>5017	Identifier	m_wndSplit2
>5018	Callee	SaveWindowState
>5019	Identifier	SaveWindowState
>5020	ExpressionStatement	 
>5021	CallExpression	SaveWindowState ( m_wndSplit . GetSafeHwnd ( ) , \"Radiant
>5022	ArgumentList	m_wndSplit . GetSafeHwnd ( )
>5023	Argument	\"Radiant
>5024	PrimaryExpression	\"Radiant
>5025	Argument	m_wndSplit . GetSafeHwnd ( )
>5026	CallExpression	m_wndSplit . GetSafeHwnd ( )
>5027	ArgumentList	 
>5028	Callee	m_wndSplit . GetSafeHwnd
>5029	MemberAccess	m_wndSplit . GetSafeHwnd
>5030	Identifier	GetSafeHwnd
>5031	Identifier	m_wndSplit
>5032	Callee	SaveWindowState
>5033	Identifier	SaveWindowState
>5034	Condition	 
>5035	OrExpression	m_nCurrentStyle == 0 || m_nCurrentStyle == 3
>5036	EqualityExpression	m_nCurrentStyle == 3
>5037	PrimaryExpression	3
>5038	Identifier	m_nCurrentStyle
>5039	EqualityExpression	m_nCurrentStyle == 0
>5040	PrimaryExpression	0
>5041	Identifier	m_nCurrentStyle
>5042	ExpressionStatement	 
>5043	CallExpression	SaveWindowPlacement ( GetSafeHwnd ( ) , \"Radiant
>5044	ArgumentList	GetSafeHwnd ( )
>5045	Argument	\"Radiant
>5046	PrimaryExpression	\"Radiant
>5047	Argument	GetSafeHwnd ( )
>5048	CallExpression	GetSafeHwnd ( )
>5049	ArgumentList	 
>5050	Callee	GetSafeHwnd
>5051	Identifier	GetSafeHwnd
>5052	Callee	SaveWindowPlacement
>5053	Identifier	SaveWindowPlacement
>5054	ExpressionStatement	 
>5055	CallExpression	DeleteMruMenu ( g_qeglobals . d_lpMruMenu )
>5056	ArgumentList	g_qeglobals . d_lpMruMenu
>5057	Argument	g_qeglobals . d_lpMruMenu
>5058	MemberAccess	g_qeglobals . d_lpMruMenu
>5059	Identifier	d_lpMruMenu
>5060	Identifier	g_qeglobals
>5061	Callee	DeleteMruMenu
>5062	Identifier	DeleteMruMenu
>5063	ExpressionStatement	 
>5064	CallExpression	SaveMruInReg ( g_qeglobals . d_lpMruMenu , \"Software\\id\\QuakeEd4\\MRU\" )
>5065	ArgumentList	g_qeglobals . d_lpMruMenu
>5066	Argument	\"Software\\id\\QuakeEd4\\MRU\"
>5067	PrimaryExpression	\"Software\\id\\QuakeEd4\\MRU\"
>5068	Argument	g_qeglobals . d_lpMruMenu
>5069	MemberAccess	g_qeglobals . d_lpMruMenu
>5070	Identifier	d_lpMruMenu
>5071	Identifier	g_qeglobals
>5072	Callee	SaveMruInReg
>5073	Identifier	SaveMruInReg
>5074	ExpressionStatement	 
>5075	CallExpression	SaveBarState ( \"RadiantToolBars2\" )
>5076	ArgumentList	\"RadiantToolBars2\"
>5077	Argument	\"RadiantToolBars2\"
>5078	PrimaryExpression	\"RadiantToolBars2\"
>5079	Callee	SaveBarState
>5080	Identifier	SaveBarState
>5081	ExpressionStatement	 
>5082	CallExpression	KillTimer ( QE_TIMER0 )
>5083	ArgumentList	QE_TIMER0
>5084	Argument	QE_TIMER0
>5085	Identifier	QE_TIMER0
>5086	Callee	KillTimer
>5087	Identifier	KillTimer
>5169	FunctionDef	CMainFrame 
>5170	ParameterList	 
>5171	ReturnType	void
>5172	CompoundStatement	 
>5173	IfStatement	if ( ConfirmModified ( ) )
>5174	CompoundStatement	 
>5175	ExpressionStatement	 
>5176	CallExpression	CFrameWnd 
>5177	ArgumentList	 
>5178	Callee	CFrameWnd 
>5179	Identifier	CFrameWnd 
>5180	Condition	 
>5181	CallExpression	ConfirmModified ( )
>5182	ArgumentList	 
>5183	Callee	ConfirmModified
>5184	Identifier	ConfirmModified
>5189	FunctionDef	CMainFrame 
>5190	ParameterList	UINT nChar , UINT nRepCnt , UINT nFlags
>5191	Parameter	 
>5192	Identifier	nFlags
>5193	ParameterType	UINT
>5194	Parameter	 
>5195	Identifier	nRepCnt
>5196	ParameterType	UINT
>5197	Parameter	 
>5198	Identifier	nChar
>5199	ParameterType	UINT
>5200	ReturnType	void
>5201	CompoundStatement	 
>5202	ForStatement	for ( int i = 0 ; i < g_nCommandCount ; i ++ )
>5203	CompoundStatement	 
>5204	IfStatement	if ( g_Commands [ i ] . m_nKey == nChar )
>5205	CompoundStatement	 
>5206	IfStatement	if ( g_Commands [ i ] . m_nModifiers & RAD_PRESS )
>5207	CompoundStatement	 
>5208	IfStatement	if ( bGo )
>5209	CompoundStatement	 
>5210	BreakStatement	 
>5211	ExpressionStatement	 
>5212	CallExpression	SendMessage ( WM_COMMAND , g_Commands [ i ] . m_nCommand , 0 )
>5213	ArgumentList	WM_COMMAND
>5214	Argument	0
>5215	PrimaryExpression	0
>5216	Argument	g_Commands [ i ] . m_nCommand
>5217	MemberAccess	g_Commands [ i ] . m_nCommand
>5218	Identifier	m_nCommand
>5219	ArrayIndexing	g_Commands [ i ]
>5220	Identifier	i
>5221	Identifier	g_Commands
>5222	Argument	WM_COMMAND
>5223	Identifier	WM_COMMAND
>5224	Callee	SendMessage
>5225	Identifier	SendMessage
>5226	Condition	 
>5227	Identifier	bGo
>5228	IfStatement	if ( nModifiers )
>5229	ElseStatement	else
>5230	CompoundStatement	 
>5231	IfStatement	if ( GetKeyState ( VK_SHIFT ) & 0x8000 )
>5232	ExpressionStatement	 
>5233	AssignmentExpr	bGo = false
>5234	Identifier	false
>5235	Identifier	bGo
>5236	Condition	 
>5237	BitAndExpression	GetKeyState ( VK_SHIFT ) & 0x8000
>5238	PrimaryExpression	0x8000
>5239	CallExpression	GetKeyState ( VK_SHIFT )
>5240	ArgumentList	VK_SHIFT
>5241	Argument	VK_SHIFT
>5242	Identifier	VK_SHIFT
>5243	Callee	GetKeyState
>5244	Identifier	GetKeyState
>5245	IfStatement	if ( GetKeyState ( VK_CONTROL ) & 0x8000 )
>5246	ExpressionStatement	 
>5247	AssignmentExpr	bGo = false
>5248	Identifier	false
>5249	Identifier	bGo
>5250	Condition	 
>5251	BitAndExpression	GetKeyState ( VK_CONTROL ) & 0x8000
>5252	PrimaryExpression	0x8000
>5253	CallExpression	GetKeyState ( VK_CONTROL )
>5254	ArgumentList	VK_CONTROL
>5255	Argument	VK_CONTROL
>5256	Identifier	VK_CONTROL
>5257	Callee	GetKeyState
>5258	Identifier	GetKeyState
>5259	IfStatement	if ( GetKeyState ( VK_MENU ) & 0x8000 )
>5260	ExpressionStatement	 
>5261	AssignmentExpr	bGo = false
>5262	Identifier	false
>5263	Identifier	bGo
>5264	Condition	 
>5265	BitAndExpression	GetKeyState ( VK_MENU ) & 0x8000
>5266	PrimaryExpression	0x8000
>5267	CallExpression	GetKeyState ( VK_MENU )
>5268	ArgumentList	VK_MENU
>5269	Argument	VK_MENU
>5270	Identifier	VK_MENU
>5271	Callee	GetKeyState
>5272	Identifier	GetKeyState
>5273	CompoundStatement	 
>5274	IfStatement	if ( nModifiers & RAD_SHIFT )
>5275	IfStatement	if ( ! ( GetKeyState ( VK_SHIFT ) & 0x8000 ) )
>5276	ExpressionStatement	 
>5277	AssignmentExpr	bGo = false
>5278	Identifier	false
>5279	Identifier	bGo
>5280	Condition	 
>5281	UnaryOp	! ( GetKeyState ( VK_SHIFT ) & 0x8000 )
>5282	BitAndExpression	GetKeyState ( VK_SHIFT ) & 0x8000
>5283	PrimaryExpression	0x8000
>5284	CallExpression	GetKeyState ( VK_SHIFT )
>5285	ArgumentList	VK_SHIFT
>5286	Argument	VK_SHIFT
>5287	Identifier	VK_SHIFT
>5288	Callee	GetKeyState
>5289	Identifier	GetKeyState
>5290	UnaryOperator	!
>5291	Condition	 
>5292	BitAndExpression	nModifiers & RAD_SHIFT
>5293	Identifier	RAD_SHIFT
>5294	Identifier	nModifiers
>5295	IfStatement	if ( nModifiers & RAD_CONTROL )
>5296	IfStatement	if ( ! ( GetKeyState ( VK_CONTROL ) & 0x8000 ) )
>5297	ExpressionStatement	 
>5298	AssignmentExpr	bGo = false
>5299	Identifier	false
>5300	Identifier	bGo
>5301	Condition	 
>5302	UnaryOp	! ( GetKeyState ( VK_CONTROL ) & 0x8000 )
>5303	BitAndExpression	GetKeyState ( VK_CONTROL ) & 0x8000
>5304	PrimaryExpression	0x8000
>5305	CallExpression	GetKeyState ( VK_CONTROL )
>5306	ArgumentList	VK_CONTROL
>5307	Argument	VK_CONTROL
>5308	Identifier	VK_CONTROL
>5309	Callee	GetKeyState
>5310	Identifier	GetKeyState
>5311	UnaryOperator	!
>5312	Condition	 
>5313	BitAndExpression	nModifiers & RAD_CONTROL
>5314	Identifier	RAD_CONTROL
>5315	Identifier	nModifiers
>5316	IfStatement	if ( nModifiers & RAD_ALT )
>5317	IfStatement	if ( ! ( GetKeyState ( VK_MENU ) & 0x8000 ) )
>5318	ExpressionStatement	 
>5319	AssignmentExpr	bGo = false
>5320	Identifier	false
>5321	Identifier	bGo
>5322	Condition	 
>5323	UnaryOp	! ( GetKeyState ( VK_MENU ) & 0x8000 )
>5324	BitAndExpression	GetKeyState ( VK_MENU ) & 0x8000
>5325	PrimaryExpression	0x8000
>5326	CallExpression	GetKeyState ( VK_MENU )
>5327	ArgumentList	VK_MENU
>5328	Argument	VK_MENU
>5329	Identifier	VK_MENU
>5330	Callee	GetKeyState
>5331	Identifier	GetKeyState
>5332	UnaryOperator	!
>5333	Condition	 
>5334	BitAndExpression	nModifiers & RAD_ALT
>5335	Identifier	RAD_ALT
>5336	Identifier	nModifiers
>5337	Condition	 
>5338	Identifier	nModifiers
>5339	IdentifierDeclStatement	 
>5340	IdentifierDecl	nModifiers = g_Commands [ i ] . m_nModifiers & ~RAD_PRESS
>5341	AssignmentExpr	nModifiers = g_Commands [ i ] . m_nModifiers & ~RAD_PRESS
>5342	BitAndExpression	g_Commands [ i ] . m_nModifiers & ~RAD_PRESS
>5343	Identifier	~RAD_PRESS
>5344	MemberAccess	g_Commands [ i ] . m_nModifiers
>5345	Identifier	m_nModifiers
>5346	ArrayIndexing	g_Commands [ i ]
>5347	Identifier	i
>5348	Identifier	g_Commands
>5349	Identifier	nModifiers
>5350	Identifier	nModifiers
>5351	IdentifierDeclType	int
>5352	Condition	 
>5353	BitAndExpression	g_Commands [ i ] . m_nModifiers & RAD_PRESS
>5354	Identifier	RAD_PRESS
>5355	MemberAccess	g_Commands [ i ] . m_nModifiers
>5356	Identifier	m_nModifiers
>5357	ArrayIndexing	g_Commands [ i ]
>5358	Identifier	i
>5359	Identifier	g_Commands
>5360	IdentifierDeclStatement	 
>5361	IdentifierDecl	bGo = true
>5362	AssignmentExpr	bGo = true
>5363	Identifier	true
>5364	Identifier	true
>5365	Identifier	bGo
>5366	IdentifierDeclType	bool
>5367	Condition	 
>5368	EqualityExpression	g_Commands [ i ] . m_nKey == nChar
>5369	Identifier	nChar
>5370	MemberAccess	g_Commands [ i ] . m_nKey
>5371	Identifier	m_nKey
>5372	ArrayIndexing	g_Commands [ i ]
>5373	Identifier	i
>5374	Identifier	g_Commands
>5375	IncDecOp	 
>5376	IncDec	++
>5377	Identifier	i
>5378	Condition	 
>5379	RelationalExpression	i < g_nCommandCount
>5380	Identifier	g_nCommandCount
>5381	Identifier	i
>5382	ForInit	 
>5383	IdentifierDeclStatement	int i = 0 ;
>5384	IdentifierDecl	i = 0
>5385	AssignmentExpr	i = 0
>5386	PrimaryExpression	0
>5387	Identifier	i
>5388	Identifier	i
>5389	IdentifierDeclType	int
>5418	FunctionDef	CamOK (unsigned int nKey)
>5419	ParameterList	unsigned int nKey
>5420	Parameter	 
>5421	Identifier	nKey
>5422	ParameterType	unsigned int
>5423	ReturnType	bool
>5424	CompoundStatement	 
>5425	ReturnStatement	 
>5426	Identifier	true
>5427	IfStatement	if ( nKey == VK_UP || nKey == VK_LEFT || nKey == VK_RIGHT || nKey == VK_DOWN )
>5428	ElseStatement	else
>5429	ReturnStatement	 
>5430	Identifier	false
>5431	CompoundStatement	 
>5432	ReturnStatement	 
>5433	Identifier	true
>5434	Statement	 
>5435	Statement	 
>5436	Statement	 
>5437	Statement	 
>5438	Statement	 
>5439	Statement	 
>5440	Statement	 
>5441	Statement	 
>5442	Condition	 
>5443	OrExpression	nKey == VK_UP || nKey == VK_LEFT || nKey == VK_RIGHT || nKey == VK_DOWN
>5444	OrExpression	nKey == VK_LEFT || nKey == VK_RIGHT || nKey == VK_DOWN
>5445	OrExpression	nKey == VK_RIGHT || nKey == VK_DOWN
>5446	EqualityExpression	nKey == VK_DOWN
>5447	Identifier	VK_DOWN
>5448	Identifier	nKey
>5449	EqualityExpression	nKey == VK_RIGHT
>5450	Identifier	VK_RIGHT
>5451	Identifier	nKey
>5452	EqualityExpression	nKey == VK_LEFT
>5453	Identifier	VK_LEFT
>5454	Identifier	nKey
>5455	EqualityExpression	nKey == VK_UP
>5456	Identifier	VK_UP
>5457	Identifier	nKey
>5468	FunctionDef	CMainFrame 
>5469	ParameterList	UINT nChar , UINT nRepCnt , UINT nFlags
>5470	Parameter	 
>5471	Identifier	nFlags
>5472	ParameterType	UINT
>5473	Parameter	 
>5474	Identifier	nRepCnt
>5475	ParameterType	UINT
>5476	Parameter	 
>5477	Identifier	nChar
>5478	ParameterType	UINT
>5479	ReturnType	void
>5480	CompoundStatement	 
>5481	ExpressionStatement	 
>5482	CallExpression	CFrameWnd 
>5483	ArgumentList	nChar
>5484	Argument	nFlags
>5485	Identifier	nFlags
>5486	Argument	nRepCnt
>5487	Identifier	nRepCnt
>5488	Argument	nChar
>5489	Identifier	nChar
>5490	Callee	CFrameWnd 
>5491	Identifier	CFrameWnd 
>5492	IfStatement	if ( nChar == VK_DOWN )
>5493	CompoundStatement	 
>5494	ExpressionStatement	 
>5495	CallExpression	OnKeyDown ( nChar , nRepCnt , nFlags )
>5496	ArgumentList	nChar
>5497	Argument	nFlags
>5498	Identifier	nFlags
>5499	Argument	nRepCnt
>5500	Identifier	nRepCnt
>5501	Argument	nChar
>5502	Identifier	nChar
>5503	Callee	OnKeyDown
>5504	Identifier	OnKeyDown
>5505	Condition	 
>5506	EqualityExpression	nChar == VK_DOWN
>5507	Identifier	VK_DOWN
>5508	Identifier	nChar
>5516	FunctionDef	CMainFrame 
>5517	ParameterList	UINT nChar , UINT nRepCnt , UINT nFlags
>5518	Parameter	 
>5519	Identifier	nFlags
>5520	ParameterType	UINT
>5521	Parameter	 
>5522	Identifier	nRepCnt
>5523	ParameterType	UINT
>5524	Parameter	 
>5525	Identifier	nChar
>5526	ParameterType	UINT
>5527	ReturnType	void
>5528	CompoundStatement	 
>5529	ExpressionStatement	 
>5530	CallExpression	CFrameWnd 
>5531	ArgumentList	nChar
>5532	Argument	nFlags
>5533	Identifier	nFlags
>5534	Argument	nRepCnt
>5535	Identifier	nRepCnt
>5536	Argument	nChar
>5537	Identifier	nChar
>5538	Callee	CFrameWnd 
>5539	Identifier	CFrameWnd 
>5540	ForStatement	for ( int i = 0 ; i < g_nCommandCount ; i ++ )
>5541	CompoundStatement	 
>5542	IfStatement	if ( g_Commands [ i ] . m_nKey == nChar )
>5543	CompoundStatement	 
>5544	IfStatement	if ( ( g_Commands [ i ] . m_nModifiers & 0x7 ) == nState )
>5545	CompoundStatement	 
>5546	BreakStatement	 
>5547	ExpressionStatement	 
>5548	CallExpression	SendMessage ( WM_COMMAND , g_Commands [ i ] . m_nCommand , 0 )
>5549	ArgumentList	WM_COMMAND
>5550	Argument	0
>5551	PrimaryExpression	0
>5552	Argument	g_Commands [ i ] . m_nCommand
>5553	MemberAccess	g_Commands [ i ] . m_nCommand
>5554	Identifier	m_nCommand
>5555	ArrayIndexing	g_Commands [ i ]
>5556	Identifier	i
>5557	Identifier	g_Commands
>5558	Argument	WM_COMMAND
>5559	Identifier	WM_COMMAND
>5560	Callee	SendMessage
>5561	Identifier	SendMessage
>5562	Condition	 
>5563	EqualityExpression	( g_Commands [ i ] . m_nModifiers & 0x7 ) == nState
>5564	Identifier	nState
>5565	BitAndExpression	g_Commands [ i ] . m_nModifiers & 0x7
>5566	PrimaryExpression	0x7
>5567	MemberAccess	g_Commands [ i ] . m_nModifiers
>5568	Identifier	m_nModifiers
>5569	ArrayIndexing	g_Commands [ i ]
>5570	Identifier	i
>5571	Identifier	g_Commands
>5572	IfStatement	if ( GetKeyState ( VK_SHIFT ) & 0x8000 )
>5573	ExpressionStatement	 
>5574	AssignmentExpr	nState |= RAD_SHIFT
>5575	Identifier	RAD_SHIFT
>5576	Identifier	nState
>5577	Condition	 
>5578	BitAndExpression	GetKeyState ( VK_SHIFT ) & 0x8000
>5579	PrimaryExpression	0x8000
>5580	CallExpression	GetKeyState ( VK_SHIFT )
>5581	ArgumentList	VK_SHIFT
>5582	Argument	VK_SHIFT
>5583	Identifier	VK_SHIFT
>5584	Callee	GetKeyState
>5585	Identifier	GetKeyState
>5586	IfStatement	if ( GetKeyState ( VK_CONTROL ) & 0x8000 )
>5587	ExpressionStatement	 
>5588	AssignmentExpr	nState |= RAD_CONTROL
>5589	Identifier	RAD_CONTROL
>5590	Identifier	nState
>5591	Condition	 
>5592	BitAndExpression	GetKeyState ( VK_CONTROL ) & 0x8000
>5593	PrimaryExpression	0x8000
>5594	CallExpression	GetKeyState ( VK_CONTROL )
>5595	ArgumentList	VK_CONTROL
>5596	Argument	VK_CONTROL
>5597	Identifier	VK_CONTROL
>5598	Callee	GetKeyState
>5599	Identifier	GetKeyState
>5600	IfStatement	if ( GetKeyState ( VK_MENU ) & 0x8000 )
>5601	ExpressionStatement	 
>5602	AssignmentExpr	nState |= RAD_ALT
>5603	Identifier	RAD_ALT
>5604	Identifier	nState
>5605	Condition	 
>5606	BitAndExpression	GetKeyState ( VK_MENU ) & 0x8000
>5607	PrimaryExpression	0x8000
>5608	CallExpression	GetKeyState ( VK_MENU )
>5609	ArgumentList	VK_MENU
>5610	Argument	VK_MENU
>5611	Identifier	VK_MENU
>5612	Callee	GetKeyState
>5613	Identifier	GetKeyState
>5614	IdentifierDeclStatement	 
>5615	IdentifierDecl	nState = 0
>5616	AssignmentExpr	nState = 0
>5617	PrimaryExpression	0
>5618	Identifier	nState
>5619	Identifier	nState
>5620	IdentifierDeclType	unsigned int
>5621	Condition	 
>5622	EqualityExpression	g_Commands [ i ] . m_nKey == nChar
>5623	Identifier	nChar
>5624	MemberAccess	g_Commands [ i ] . m_nKey
>5625	Identifier	m_nKey
>5626	ArrayIndexing	g_Commands [ i ]
>5627	Identifier	i
>5628	Identifier	g_Commands
>5629	IncDecOp	 
>5630	IncDec	++
>5631	Identifier	i
>5632	Condition	 
>5633	RelationalExpression	i < g_nCommandCount
>5634	Identifier	g_nCommandCount
>5635	Identifier	i
>5636	ForInit	 
>5637	IdentifierDeclStatement	int i = 0 ;
>5638	IdentifierDecl	i = 0
>5639	AssignmentExpr	i = 0
>5640	PrimaryExpression	0
>5641	Identifier	i
>5642	Identifier	i
>5643	IdentifierDeclType	int
>5667	FunctionDef	CMainFrame 
>5668	ParameterList	LPCREATESTRUCT lpcs , CCreateContext * pContext
>5669	Parameter	 
>5670	Identifier	pContext
>5671	ParameterType	CCreateContext *
>5672	Parameter	 
>5673	Identifier	lpcs
>5674	ParameterType	LPCREATESTRUCT
>5675	ReturnType	BOOL
>5676	CompoundStatement	 
>5677	ReturnStatement	 
>5678	Identifier	TRUE
>5679	ExpressionStatement	 
>5680	CallExpression	Texture_SetMode ( g_qeglobals . d_savedinfo . iTexMenu )
>5681	ArgumentList	g_qeglobals . d_savedinfo . iTexMenu
>5682	Argument	g_qeglobals . d_savedinfo . iTexMenu
>5683	MemberAccess	g_qeglobals . d_savedinfo . iTexMenu
>5684	Identifier	iTexMenu
>5685	MemberAccess	g_qeglobals . d_savedinfo
>5686	Identifier	d_savedinfo
>5687	Identifier	g_qeglobals
>5688	Callee	Texture_SetMode
>5689	Identifier	Texture_SetMode
>5690	ExpressionStatement	 
>5691	AssignmentExpr	m_bSplittersOK = true
>5692	Identifier	true
>5693	Identifier	m_bSplittersOK
>5694	IfStatement	if ( m_pXYWnd )
>5695	ExpressionStatement	 
>5696	CallExpression	m_pXYWnd -> SetActive ( true )
>5697	ArgumentList	true
>5698	Argument	true
>5699	Identifier	true
>5700	Callee	m_pXYWnd -> SetActive
>5701	PtrMemberAccess	m_pXYWnd -> SetActive
>5702	Identifier	SetActive
>5703	Identifier	m_pXYWnd
>5704	Condition	 
>5705	Identifier	m_pXYWnd
>5706	ExpressionStatement	 
>5707	Statement	 
>5708	Statement	 
>5709	Statement	 
>5710	Statement	 
>5711	Statement	 
>5712	Statement	 
>5713	Statement	 
>5714	Statement	 
>5715	Statement	 
>5716	Statement	 
>5717	Statement	 
>5718	Statement	 
>5719	Statement	 
>5720	Statement	 
>5721	Statement	 
>5722	Statement	 
>5723	Statement	 
>5724	Statement	 
>5725	Statement	 
>5726	IfStatement	if ( g_pEdit )
>5727	Statement	 
>5728	Condition	 
>5729	Identifier	g_pEdit
>5730	IfStatement	if ( g_PrefsDlg . m_nView == 0 || g_PrefsDlg . m_nView == 3 )
>5731	ElseStatement	else
>5732	IfStatement	if ( g_PrefsDlg . m_nView == 1 )
>5733	ElseStatement	else
>5734	CompoundStatement	 
>5735	ExpressionStatement	 
>5736	CallExpression	m_wndSplit . RecalcLayout ( )
>5737	ArgumentList	 
>5738	Callee	m_wndSplit . RecalcLayout
>5739	MemberAccess	m_wndSplit . RecalcLayout
>5740	Identifier	RecalcLayout
>5741	Identifier	m_wndSplit
>5742	ExpressionStatement	 
>5743	CallExpression	LoadWindowState ( m_wndSplit . GetSafeHwnd ( ) , \"Radiant
>5744	ArgumentList	m_wndSplit . GetSafeHwnd ( )
>5745	Argument	\"Radiant
>5746	PrimaryExpression	\"Radiant
>5747	Argument	m_wndSplit . GetSafeHwnd ( )
>5748	CallExpression	m_wndSplit . GetSafeHwnd ( )
>5749	ArgumentList	 
>5750	Callee	m_wndSplit . GetSafeHwnd
>5751	MemberAccess	m_wndSplit . GetSafeHwnd
>5752	Identifier	GetSafeHwnd
>5753	Identifier	m_wndSplit
>5754	Callee	LoadWindowState
>5755	Identifier	LoadWindowState
>5756	ExpressionStatement	 
>5757	CallExpression	m_wndSplit . SetColumnInfo ( 1 , rctParent . Width ( ) * .5 , 50 )
>5758	ArgumentList	1
>5759	Argument	50
>5760	PrimaryExpression	50
>5761	Argument	rctParent . Width ( ) * .5
>5762	MultiplicativeExpression	rctParent . Width ( ) * .5
>5763	PrimaryExpression	.5
>5764	CallExpression	rctParent . Width ( )
>5765	ArgumentList	 
>5766	Callee	rctParent . Width
>5767	MemberAccess	rctParent . Width
>5768	Identifier	Width
>5769	Identifier	rctParent
>5770	Argument	1
>5771	PrimaryExpression	1
>5772	Callee	m_wndSplit . SetColumnInfo
>5773	MemberAccess	m_wndSplit . SetColumnInfo
>5774	Identifier	SetColumnInfo
>5775	Identifier	m_wndSplit
>5776	ExpressionStatement	 
>5777	CallExpression	m_wndSplit . SetColumnInfo ( 0 , rctParent . Width ( ) * .5 , 50 )
>5778	ArgumentList	0
>5779	Argument	50
>5780	PrimaryExpression	50
>5781	Argument	rctParent . Width ( ) * .5
>5782	MultiplicativeExpression	rctParent . Width ( ) * .5
>5783	PrimaryExpression	.5
>5784	CallExpression	rctParent . Width ( )
>5785	ArgumentList	 
>5786	Callee	rctParent . Width
>5787	MemberAccess	rctParent . Width
>5788	Identifier	Width
>5789	Identifier	rctParent
>5790	Argument	0
>5791	PrimaryExpression	0
>5792	Callee	m_wndSplit . SetColumnInfo
>5793	MemberAccess	m_wndSplit . SetColumnInfo
>5794	Identifier	SetColumnInfo
>5795	Identifier	m_wndSplit
>5796	ExpressionStatement	 
>5797	CallExpression	m_wndSplit . SetRowInfo ( 1 , rctParent . Height ( ) * .5 , 50 )
>5798	ArgumentList	1
>5799	Argument	50
>5800	PrimaryExpression	50
>5801	Argument	rctParent . Height ( ) * .5
>5802	MultiplicativeExpression	rctParent . Height ( ) * .5
>5803	PrimaryExpression	.5
>5804	CallExpression	rctParent . Height ( )
>5805	ArgumentList	 
>5806	Callee	rctParent . Height
>5807	MemberAccess	rctParent . Height
>5808	Identifier	Height
>5809	Identifier	rctParent
>5810	Argument	1
>5811	PrimaryExpression	1
>5812	Callee	m_wndSplit . SetRowInfo
>5813	MemberAccess	m_wndSplit . SetRowInfo
>5814	Identifier	SetRowInfo
>5815	Identifier	m_wndSplit
>5816	ExpressionStatement	 
>5817	CallExpression	m_wndSplit . SetRowInfo ( 0 , rctParent . Height ( ) * .5 , 50 )
>5818	ArgumentList	0
>5819	Argument	50
>5820	PrimaryExpression	50
>5821	Argument	rctParent . Height ( ) * .5
>5822	MultiplicativeExpression	rctParent . Height ( ) * .5
>5823	PrimaryExpression	.5
>5824	CallExpression	rctParent . Height ( )
>5825	ArgumentList	 
>5826	Callee	rctParent . Height
>5827	MemberAccess	rctParent . Height
>5828	Identifier	Height
>5829	Identifier	rctParent
>5830	Argument	0
>5831	PrimaryExpression	0
>5832	Callee	m_wndSplit . SetRowInfo
>5833	MemberAccess	m_wndSplit . SetRowInfo
>5834	Identifier	SetRowInfo
>5835	Identifier	m_wndSplit
>5836	ExpressionStatement	 
>5837	CallExpression	GetClientRect ( rctParent )
>5838	ArgumentList	rctParent
>5839	Argument	rctParent
>5840	Identifier	rctParent
>5841	Callee	GetClientRect
>5842	Identifier	GetClientRect
>5843	IdentifierDeclStatement	 
>5844	IdentifierDecl	rctParent
>5845	Identifier	rctParent
>5846	IdentifierDeclType	CRect
>5847	ExpressionStatement	 
>5848	CallExpression	CreateQEChildren ( )
>5849	ArgumentList	 
>5850	Callee	CreateQEChildren
>5851	Identifier	CreateQEChildren
>5852	ExpressionStatement	 
>5853	CallExpression	ShowWindow ( g_qeglobals . d_hwndEntity , SW_HIDE )
>5854	ArgumentList	g_qeglobals . d_hwndEntity
>5855	Argument	SW_HIDE
>5856	Identifier	SW_HIDE
>5857	Argument	g_qeglobals . d_hwndEntity
>5858	MemberAccess	g_qeglobals . d_hwndEntity
>5859	Identifier	d_hwndEntity
>5860	Identifier	g_qeglobals
>5861	Callee	ShowWindow
>5862	Identifier	ShowWindow
>5863	Statement	 
>5864	ExpressionStatement	 
>5865	CallExpression	LoadWindowState ( m_pEditWnd -> GetSafeHwnd ( ) , \"editwindow\" )
>5866	ArgumentList	m_pEditWnd -> GetSafeHwnd ( )
>5867	Argument	\"editwindow\"
>5868	PrimaryExpression	\"editwindow\"
>5869	Argument	m_pEditWnd -> GetSafeHwnd ( )
>5870	CallExpression	m_pEditWnd -> GetSafeHwnd ( )
>5871	ArgumentList	 
>5872	Callee	m_pEditWnd -> GetSafeHwnd
>5873	PtrMemberAccess	m_pEditWnd -> GetSafeHwnd
>5874	Identifier	GetSafeHwnd
>5875	Identifier	m_pEditWnd
>5876	Callee	LoadWindowState
>5877	Identifier	LoadWindowState
>5878	ExpressionStatement	 
>5879	CallExpression	LoadWindowState ( m_pTexWnd -> GetSafeHwnd ( ) , \"texwindow\" )
>5880	ArgumentList	m_pTexWnd -> GetSafeHwnd ( )
>5881	Argument	\"texwindow\"
>5882	PrimaryExpression	\"texwindow\"
>5883	Argument	m_pTexWnd -> GetSafeHwnd ( )
>5884	CallExpression	m_pTexWnd -> GetSafeHwnd ( )
>5885	ArgumentList	 
>5886	Callee	m_pTexWnd -> GetSafeHwnd
>5887	PtrMemberAccess	m_pTexWnd -> GetSafeHwnd
>5888	Identifier	GetSafeHwnd
>5889	Identifier	m_pTexWnd
>5890	Callee	LoadWindowState
>5891	Identifier	LoadWindowState
>5892	ExpressionStatement	 
>5893	CallExpression	m_pZWnd -> ShowWindow ( SW_HIDE )
>5894	ArgumentList	SW_HIDE
>5895	Argument	SW_HIDE
>5896	Identifier	SW_HIDE
>5897	Callee	m_pZWnd -> ShowWindow
>5898	PtrMemberAccess	m_pZWnd -> ShowWindow
>5899	Identifier	ShowWindow
>5900	Identifier	m_pZWnd
>5901	ExpressionStatement	 
>5902	CallExpression	m_pZWnd -> Create ( Z_WINDOW_CLASS , \"\" , QE3_CHILDSTYLE , rect , this , 1236 )
>5903	ArgumentList	Z_WINDOW_CLASS
>5904	Argument	1236
>5905	PrimaryExpression	1236
>5906	Argument	this
>5907	Identifier	this
>5908	Argument	rect
>5909	Identifier	rect
>5910	Argument	QE3_CHILDSTYLE
>5911	Identifier	QE3_CHILDSTYLE
>5912	Argument	\"\"
>5913	PrimaryExpression	\"\"
>5914	Argument	Z_WINDOW_CLASS
>5915	Identifier	Z_WINDOW_CLASS
>5916	Callee	m_pZWnd -> Create
>5917	PtrMemberAccess	m_pZWnd -> Create
>5918	Identifier	Create
>5919	Identifier	m_pZWnd
>5920	ExpressionStatement	 
>5921	AssignmentExpr	m_pZWnd = new CZWnd ( )
>5922	UnaryExpression	new CZWnd ( )
>5923	Identifier	m_pZWnd
>5924	ExpressionStatement	 
>5925	CallExpression	SetParent ( m_pTexWnd -> GetSafeHwnd ( ) , g_qeglobals . d_hwndEntity )
>5926	ArgumentList	m_pTexWnd -> GetSafeHwnd ( )
>5927	Argument	g_qeglobals . d_hwndEntity
>5928	MemberAccess	g_qeglobals . d_hwndEntity
>5929	Identifier	d_hwndEntity
>5930	Identifier	g_qeglobals
>5931	Argument	m_pTexWnd -> GetSafeHwnd ( )
>5932	CallExpression	m_pTexWnd -> GetSafeHwnd ( )
>5933	ArgumentList	 
>5934	Callee	m_pTexWnd -> GetSafeHwnd
>5935	PtrMemberAccess	m_pTexWnd -> GetSafeHwnd
>5936	Identifier	GetSafeHwnd
>5937	Identifier	m_pTexWnd
>5938	Callee	SetParent
>5939	Identifier	SetParent
>5940	Statement	 
>5941	ExpressionStatement	 
>5942	CallExpression	m_pTexWnd -> Create ( TEXTURE_WINDOW_CLASS , \"\" , QE3_SPLITTER_STYLE , rect , this , 1237 )
>5943	ArgumentList	TEXTURE_WINDOW_CLASS
>5944	Argument	1237
>5945	PrimaryExpression	1237
>5946	Argument	this
>5947	Identifier	this
>5948	Argument	rect
>5949	Identifier	rect
>5950	Argument	QE3_SPLITTER_STYLE
>5951	Identifier	QE3_SPLITTER_STYLE
>5952	Argument	\"\"
>5953	PrimaryExpression	\"\"
>5954	Argument	TEXTURE_WINDOW_CLASS
>5955	Identifier	TEXTURE_WINDOW_CLASS
>5956	Callee	m_pTexWnd -> Create
>5957	PtrMemberAccess	m_pTexWnd -> Create
>5958	Identifier	Create
>5959	Identifier	m_pTexWnd
>5960	ExpressionStatement	 
>5961	AssignmentExpr	m_pTexWnd = new CTexWnd ( )
>5962	UnaryExpression	new CTexWnd ( )
>5963	Identifier	m_pTexWnd
>5964	ExpressionStatement	 
>5965	CallExpression	m_pCamWnd -> SetXYFriend ( m_pXYWnd )
>5966	ArgumentList	m_pXYWnd
>5967	Argument	m_pXYWnd
>5968	Identifier	m_pXYWnd
>5969	Callee	m_pCamWnd -> SetXYFriend
>5970	PtrMemberAccess	m_pCamWnd -> SetXYFriend
>5971	Identifier	SetXYFriend
>5972	Identifier	m_pCamWnd
>5973	ExpressionStatement	 
>5974	CallExpression	m_pXZWnd -> SetViewType ( XZ )
>5975	ArgumentList	XZ
>5976	Argument	XZ
>5977	Identifier	XZ
>5978	Callee	m_pXZWnd -> SetViewType
>5979	PtrMemberAccess	m_pXZWnd -> SetViewType
>5980	Identifier	SetViewType
>5981	Identifier	m_pXZWnd
>5982	ExpressionStatement	 
>5983	CallExpression	m_wndSplit . GetPane ( 1 , 1 )
>5984	ArgumentList	1
>5985	Argument	1
>5986	PrimaryExpression	1
>5987	Argument	1
>5988	PrimaryExpression	1
>5989	Callee	m_wndSplit . GetPane
>5990	MemberAccess	m_wndSplit . GetPane
>5991	Identifier	GetPane
>5992	Identifier	m_wndSplit
>5993	Statement	 
>5994	Statement	 
>5995	Statement	 
>5996	Statement	 
>5997	Statement	 
>5998	Statement	 
>5999	Statement	 
>6000	ExpressionStatement	 
>6001	CallExpression	m_wndSplit . CreateView ( 1 , 1 , RUNTIME_CLASS ( CXYWnd ) , CSize ( 25 , 100 ) , pContext )
>6002	ArgumentList	1
>6003	Argument	pContext
>6004	Identifier	pContext
>6005	Argument	CSize ( 25 , 100 )
>6006	CallExpression	CSize ( 25 , 100 )
>6007	ArgumentList	25
>6008	Argument	100
>6009	PrimaryExpression	100
>6010	Argument	25
>6011	PrimaryExpression	25
>6012	Callee	CSize
>6013	Identifier	CSize
>6014	Argument	RUNTIME_CLASS ( CXYWnd )
>6015	CallExpression	RUNTIME_CLASS ( CXYWnd )
>6016	ArgumentList	CXYWnd
>6017	Argument	CXYWnd
>6018	Identifier	CXYWnd
>6019	Callee	RUNTIME_CLASS
>6020	Identifier	RUNTIME_CLASS
>6021	Argument	1
>6022	PrimaryExpression	1
>6023	Argument	1
>6024	PrimaryExpression	1
>6025	Callee	m_wndSplit . CreateView
>6026	MemberAccess	m_wndSplit . CreateView
>6027	Identifier	CreateView
>6028	Identifier	m_wndSplit
>6029	ExpressionStatement	 
>6030	CallExpression	m_pYZWnd -> SetViewType ( YZ )
>6031	ArgumentList	YZ
>6032	Argument	YZ
>6033	Identifier	YZ
>6034	Callee	m_pYZWnd -> SetViewType
>6035	PtrMemberAccess	m_pYZWnd -> SetViewType
>6036	Identifier	SetViewType
>6037	Identifier	m_pYZWnd
>6038	ExpressionStatement	 
>6039	CallExpression	m_wndSplit . GetPane ( 1 , 0 )
>6040	ArgumentList	1
>6041	Argument	0
>6042	PrimaryExpression	0
>6043	Argument	1
>6044	PrimaryExpression	1
>6045	Callee	m_wndSplit . GetPane
>6046	MemberAccess	m_wndSplit . GetPane
>6047	Identifier	GetPane
>6048	Identifier	m_wndSplit
>6049	Statement	 
>6050	Statement	 
>6051	Statement	 
>6052	Statement	 
>6053	Statement	 
>6054	Statement	 
>6055	Statement	 
>6056	ExpressionStatement	 
>6057	CallExpression	m_wndSplit . CreateView ( 1 , 0 , RUNTIME_CLASS ( CXYWnd ) , CSize ( 25 , 100 ) , pContext )
>6058	ArgumentList	1
>6059	Argument	pContext
>6060	Identifier	pContext
>6061	Argument	CSize ( 25 , 100 )
>6062	CallExpression	CSize ( 25 , 100 )
>6063	ArgumentList	25
>6064	Argument	100
>6065	PrimaryExpression	100
>6066	Argument	25
>6067	PrimaryExpression	25
>6068	Callee	CSize
>6069	Identifier	CSize
>6070	Argument	RUNTIME_CLASS ( CXYWnd )
>6071	CallExpression	RUNTIME_CLASS ( CXYWnd )
>6072	ArgumentList	CXYWnd
>6073	Argument	CXYWnd
>6074	Identifier	CXYWnd
>6075	Callee	RUNTIME_CLASS
>6076	Identifier	RUNTIME_CLASS
>6077	Argument	0
>6078	PrimaryExpression	0
>6079	Argument	1
>6080	PrimaryExpression	1
>6081	Callee	m_wndSplit . CreateView
>6082	MemberAccess	m_wndSplit . CreateView
>6083	Identifier	CreateView
>6084	Identifier	m_wndSplit
>6085	ExpressionStatement	 
>6086	CallExpression	m_pXYWnd -> SetViewType ( XY )
>6087	ArgumentList	XY
>6088	Argument	XY
>6089	Identifier	XY
>6090	Callee	m_pXYWnd -> SetViewType
>6091	PtrMemberAccess	m_pXYWnd -> SetViewType
>6092	Identifier	SetViewType
>6093	Identifier	m_pXYWnd
>6094	ExpressionStatement	 
>6095	CallExpression	m_wndSplit . GetPane ( 0 , 1 )
>6096	ArgumentList	0
>6097	Argument	1
>6098	PrimaryExpression	1
>6099	Argument	0
>6100	PrimaryExpression	0
>6101	Callee	m_wndSplit . GetPane
>6102	MemberAccess	m_wndSplit . GetPane
>6103	Identifier	GetPane
>6104	Identifier	m_wndSplit
>6105	Statement	 
>6106	Statement	 
>6107	Statement	 
>6108	Statement	 
>6109	Statement	 
>6110	Statement	 
>6111	Statement	 
>6112	ExpressionStatement	 
>6113	CallExpression	m_wndSplit . CreateView ( 0 , 1 , RUNTIME_CLASS ( CXYWnd ) , CSize ( 25 , 100 ) , pContext )
>6114	ArgumentList	0
>6115	Argument	pContext
>6116	Identifier	pContext
>6117	Argument	CSize ( 25 , 100 )
>6118	CallExpression	CSize ( 25 , 100 )
>6119	ArgumentList	25
>6120	Argument	100
>6121	PrimaryExpression	100
>6122	Argument	25
>6123	PrimaryExpression	25
>6124	Callee	CSize
>6125	Identifier	CSize
>6126	Argument	RUNTIME_CLASS ( CXYWnd )
>6127	CallExpression	RUNTIME_CLASS ( CXYWnd )
>6128	ArgumentList	CXYWnd
>6129	Argument	CXYWnd
>6130	Identifier	CXYWnd
>6131	Callee	RUNTIME_CLASS
>6132	Identifier	RUNTIME_CLASS
>6133	Argument	1
>6134	PrimaryExpression	1
>6135	Argument	0
>6136	PrimaryExpression	0
>6137	Callee	m_wndSplit . CreateView
>6138	MemberAccess	m_wndSplit . CreateView
>6139	Identifier	CreateView
>6140	Identifier	m_wndSplit
>6141	ExpressionStatement	 
>6142	CallExpression	m_wndSplit . GetPane ( 0 , 0 )
>6143	ArgumentList	0
>6144	Argument	0
>6145	PrimaryExpression	0
>6146	Argument	0
>6147	PrimaryExpression	0
>6148	Callee	m_wndSplit . GetPane
>6149	MemberAccess	m_wndSplit . GetPane
>6150	Identifier	GetPane
>6151	Identifier	m_wndSplit
>6152	Statement	 
>6153	Statement	 
>6154	Statement	 
>6155	Statement	 
>6156	Statement	 
>6157	Statement	 
>6158	Statement	 
>6159	ExpressionStatement	 
>6160	CallExpression	m_wndSplit . CreateView ( 0 , 0 , RUNTIME_CLASS ( CCamWnd ) , CSize ( 25 , 100 ) , pContext )
>6161	ArgumentList	0
>6162	Argument	pContext
>6163	Identifier	pContext
>6164	Argument	CSize ( 25 , 100 )
>6165	CallExpression	CSize ( 25 , 100 )
>6166	ArgumentList	25
>6167	Argument	100
>6168	PrimaryExpression	100
>6169	Argument	25
>6170	PrimaryExpression	25
>6171	Callee	CSize
>6172	Identifier	CSize
>6173	Argument	RUNTIME_CLASS ( CCamWnd )
>6174	CallExpression	RUNTIME_CLASS ( CCamWnd )
>6175	ArgumentList	CCamWnd
>6176	Argument	CCamWnd
>6177	Identifier	CCamWnd
>6178	Callee	RUNTIME_CLASS
>6179	Identifier	RUNTIME_CLASS
>6180	Argument	0
>6181	PrimaryExpression	0
>6182	Argument	0
>6183	PrimaryExpression	0
>6184	Callee	m_wndSplit . CreateView
>6185	MemberAccess	m_wndSplit . CreateView
>6186	Identifier	CreateView
>6187	Identifier	m_wndSplit
>6188	ExpressionStatement	 
>6189	CallExpression	m_wndSplit . CreateStatic ( this , 2 , 2 )
>6190	ArgumentList	this
>6191	Argument	2
>6192	PrimaryExpression	2
>6193	Argument	2
>6194	PrimaryExpression	2
>6195	Argument	this
>6196	Identifier	this
>6197	Callee	m_wndSplit . CreateStatic
>6198	MemberAccess	m_wndSplit . CreateStatic
>6199	Identifier	CreateStatic
>6200	Identifier	m_wndSplit
>6201	CompoundStatement	 
>6202	ExpressionStatement	 
>6203	CallExpression	CreateQEChildren ( )
>6204	ArgumentList	 
>6205	Callee	CreateQEChildren
>6206	Identifier	CreateQEChildren
>6207	IfStatement	if ( ! g_PrefsDlg . m_bZVis )
>6208	ExpressionStatement	 
>6209	CallExpression	m_pZWnd -> ShowWindow ( SW_HIDE )
>6210	ArgumentList	SW_HIDE
>6211	Argument	SW_HIDE
>6212	Identifier	SW_HIDE
>6213	Callee	m_pZWnd -> ShowWindow
>6214	PtrMemberAccess	m_pZWnd -> ShowWindow
>6215	Identifier	ShowWindow
>6216	Identifier	m_pZWnd
>6217	Condition	 
>6218	UnaryOp	! g_PrefsDlg . m_bZVis
>6219	MemberAccess	g_PrefsDlg . m_bZVis
>6220	Identifier	m_bZVis
>6221	Identifier	g_PrefsDlg
>6222	UnaryOperator	!
>6223	IfStatement	if ( ! g_PrefsDlg . m_bYZVis )
>6224	ExpressionStatement	 
>6225	CallExpression	m_pYZWnd -> ShowWindow ( SW_HIDE )
>6226	ArgumentList	SW_HIDE
>6227	Argument	SW_HIDE
>6228	Identifier	SW_HIDE
>6229	Callee	m_pYZWnd -> ShowWindow
>6230	PtrMemberAccess	m_pYZWnd -> ShowWindow
>6231	Identifier	ShowWindow
>6232	Identifier	m_pYZWnd
>6233	Condition	 
>6234	UnaryOp	! g_PrefsDlg . m_bYZVis
>6235	MemberAccess	g_PrefsDlg . m_bYZVis
>6236	Identifier	m_bYZVis
>6237	Identifier	g_PrefsDlg
>6238	UnaryOperator	!
>6239	IfStatement	if ( ! g_PrefsDlg . m_bXZVis )
>6240	ExpressionStatement	 
>6241	CallExpression	m_pXZWnd -> ShowWindow ( SW_HIDE )
>6242	ArgumentList	SW_HIDE
>6243	Argument	SW_HIDE
>6244	Identifier	SW_HIDE
>6245	Callee	m_pXZWnd -> ShowWindow
>6246	PtrMemberAccess	m_pXZWnd -> ShowWindow
>6247	Identifier	ShowWindow
>6248	Identifier	m_pXZWnd
>6249	Condition	 
>6250	UnaryOp	! g_PrefsDlg . m_bXZVis
>6251	MemberAccess	g_PrefsDlg . m_bXZVis
>6252	Identifier	m_bXZVis
>6253	Identifier	g_PrefsDlg
>6254	UnaryOperator	!
>6255	ExpressionStatement	 
>6256	CallExpression	LoadWindowPlacement ( m_pZWnd -> GetSafeHwnd ( ) , \"zwindow\" )
>6257	ArgumentList	m_pZWnd -> GetSafeHwnd ( )
>6258	Argument	\"zwindow\"
>6259	PrimaryExpression	\"zwindow\"
>6260	Argument	m_pZWnd -> GetSafeHwnd ( )
>6261	CallExpression	m_pZWnd -> GetSafeHwnd ( )
>6262	ArgumentList	 
>6263	Callee	m_pZWnd -> GetSafeHwnd
>6264	PtrMemberAccess	m_pZWnd -> GetSafeHwnd
>6265	Identifier	GetSafeHwnd
>6266	Identifier	m_pZWnd
>6267	Callee	LoadWindowPlacement
>6268	Identifier	LoadWindowPlacement
>6269	ExpressionStatement	 
>6270	CallExpression	LoadWindowPlacement ( m_pCamWnd -> GetSafeHwnd ( ) , \"camerawindow\" )
>6271	ArgumentList	m_pCamWnd -> GetSafeHwnd ( )
>6272	Argument	\"camerawindow\"
>6273	PrimaryExpression	\"camerawindow\"
>6274	Argument	m_pCamWnd -> GetSafeHwnd ( )
>6275	CallExpression	m_pCamWnd -> GetSafeHwnd ( )
>6276	ArgumentList	 
>6277	Callee	m_pCamWnd -> GetSafeHwnd
>6278	PtrMemberAccess	m_pCamWnd -> GetSafeHwnd
>6279	Identifier	GetSafeHwnd
>6280	Identifier	m_pCamWnd
>6281	Callee	LoadWindowPlacement
>6282	Identifier	LoadWindowPlacement
>6283	ExpressionStatement	 
>6284	CallExpression	LoadWindowPlacement ( m_pYZWnd -> GetSafeHwnd ( ) , \"yzwindow\" )
>6285	ArgumentList	m_pYZWnd -> GetSafeHwnd ( )
>6286	Argument	\"yzwindow\"
>6287	PrimaryExpression	\"yzwindow\"
>6288	Argument	m_pYZWnd -> GetSafeHwnd ( )
>6289	CallExpression	m_pYZWnd -> GetSafeHwnd ( )
>6290	ArgumentList	 
>6291	Callee	m_pYZWnd -> GetSafeHwnd
>6292	PtrMemberAccess	m_pYZWnd -> GetSafeHwnd
>6293	Identifier	GetSafeHwnd
>6294	Identifier	m_pYZWnd
>6295	Callee	LoadWindowPlacement
>6296	Identifier	LoadWindowPlacement
>6297	ExpressionStatement	 
>6298	CallExpression	LoadWindowPlacement ( m_pXZWnd -> GetSafeHwnd ( ) , \"xzwindow\" )
>6299	ArgumentList	m_pXZWnd -> GetSafeHwnd ( )
>6300	Argument	\"xzwindow\"
>6301	PrimaryExpression	\"xzwindow\"
>6302	Argument	m_pXZWnd -> GetSafeHwnd ( )
>6303	CallExpression	m_pXZWnd -> GetSafeHwnd ( )
>6304	ArgumentList	 
>6305	Callee	m_pXZWnd -> GetSafeHwnd
>6306	PtrMemberAccess	m_pXZWnd -> GetSafeHwnd
>6307	Identifier	GetSafeHwnd
>6308	Identifier	m_pXZWnd
>6309	Callee	LoadWindowPlacement
>6310	Identifier	LoadWindowPlacement
>6311	ExpressionStatement	 
>6312	CallExpression	LoadWindowPlacement ( m_pXYWnd -> GetSafeHwnd ( ) , \"xywindow\" )
>6313	ArgumentList	m_pXYWnd -> GetSafeHwnd ( )
>6314	Argument	\"xywindow\"
>6315	PrimaryExpression	\"xywindow\"
>6316	Argument	m_pXYWnd -> GetSafeHwnd ( )
>6317	CallExpression	m_pXYWnd -> GetSafeHwnd ( )
>6318	ArgumentList	 
>6319	Callee	m_pXYWnd -> GetSafeHwnd
>6320	PtrMemberAccess	m_pXYWnd -> GetSafeHwnd
>6321	Identifier	GetSafeHwnd
>6322	Identifier	m_pXYWnd
>6323	Callee	LoadWindowPlacement
>6324	Identifier	LoadWindowPlacement
>6325	ExpressionStatement	 
>6326	CallExpression	m_pTexWnd -> SetWindowPos ( NULL , xTex , yTex , ( ( float ) rctParent . Width ( ) ) * .30 , ( ( float ) rctParent \
>6327	ArgumentList	NULL
>6328	Argument	SWP_SHOWWINDOW
>6329	Identifier	SWP_SHOWWINDOW
>6330	Argument	( ( float ) rctParent . Height ( ) ) * .45
>6331	MultiplicativeExpression	( ( float ) rctParent . Height ( ) ) * .45
>6332	PrimaryExpression	.45
>6333	CastExpression	( float ) rctParent . Height ( )
>6334	CallExpression	rctParent . Height ( )
>6335	ArgumentList	 
>6336	Callee	rctParent . Height
>6337	MemberAccess	rctParent . Height
>6338	Identifier	Height
>6339	Identifier	rctParent
>6340	CastTarget	float
>6341	Argument	( ( float ) rctParent . Width ( ) ) * .30
>6342	MultiplicativeExpression	( ( float ) rctParent . Width ( ) ) * .30
>6343	PrimaryExpression	.30
>6344	CastExpression	( float ) rctParent . Width ( )
>6345	CallExpression	rctParent . Width ( )
>6346	ArgumentList	 
>6347	Callee	rctParent . Width
>6348	MemberAccess	rctParent . Width
>6349	Identifier	Width
>6350	Identifier	rctParent
>6351	CastTarget	float
>6352	Argument	yTex
>6353	Identifier	yTex
>6354	Argument	xTex
>6355	Identifier	xTex
>6356	Argument	NULL
>6357	Identifier	NULL
>6358	Callee	m_pTexWnd -> SetWindowPos
>6359	PtrMemberAccess	m_pTexWnd -> SetWindowPos
>6360	Identifier	SetWindowPos
>6361	Identifier	m_pTexWnd
>6362	ExpressionStatement	 
>6363	CallExpression	m_pCamWnd -> SetWindowPos ( NULL , xTex , yXY , ( ( float ) rctParent . Width ( ) ) * .30 , ( ( float ) rctParent \
>6364	ArgumentList	NULL
>6365	Argument	SWP_SHOWWINDOW
>6366	Identifier	SWP_SHOWWINDOW
>6367	Argument	( ( float ) rctParent . Height ( ) ) * .45
>6368	MultiplicativeExpression	( ( float ) rctParent . Height ( ) ) * .45
>6369	PrimaryExpression	.45
>6370	CastExpression	( float ) rctParent . Height ( )
>6371	CallExpression	rctParent . Height ( )
>6372	ArgumentList	 
>6373	Callee	rctParent . Height
>6374	MemberAccess	rctParent . Height
>6375	Identifier	Height
>6376	Identifier	rctParent
>6377	CastTarget	float
>6378	Argument	( ( float ) rctParent . Width ( ) ) * .30
>6379	MultiplicativeExpression	( ( float ) rctParent . Width ( ) ) * .30
>6380	PrimaryExpression	.30
>6381	CastExpression	( float ) rctParent . Width ( )
>6382	CallExpression	rctParent . Width ( )
>6383	ArgumentList	 
>6384	Callee	rctParent . Width
>6385	MemberAccess	rctParent . Width
>6386	Identifier	Width
>6387	Identifier	rctParent
>6388	CastTarget	float
>6389	Argument	yXY
>6390	Identifier	yXY
>6391	Argument	xTex
>6392	Identifier	xTex
>6393	Argument	NULL
>6394	Identifier	NULL
>6395	Callee	m_pCamWnd -> SetWindowPos
>6396	PtrMemberAccess	m_pCamWnd -> SetWindowPos
>6397	Identifier	SetWindowPos
>6398	Identifier	m_pCamWnd
>6399	ExpressionStatement	 
>6400	CallExpression	m_pYZWnd -> SetWindowPos ( NULL , xXY , yXY , ( ( float ) rctParent . Width ( ) ) * .60 , rctParent . Height ( ) \
>6401	ArgumentList	NULL
>6402	Argument	SWP_SHOWWINDOW
>6403	Identifier	SWP_SHOWWINDOW
>6404	Argument	rctParent . Height ( ) - 2
>6405	AdditiveExpression	rctParent . Height ( ) - 2
>6406	PrimaryExpression	2
>6407	CallExpression	rctParent . Height ( )
>6408	ArgumentList	 
>6409	Callee	rctParent . Height
>6410	MemberAccess	rctParent . Height
>6411	Identifier	Height
>6412	Identifier	rctParent
>6413	Argument	( ( float ) rctParent . Width ( ) ) * .60
>6414	MultiplicativeExpression	( ( float ) rctParent . Width ( ) ) * .60
>6415	PrimaryExpression	.60
>6416	CastExpression	( float ) rctParent . Width ( )
>6417	CallExpression	rctParent . Width ( )
>6418	ArgumentList	 
>6419	Callee	rctParent . Width
>6420	MemberAccess	rctParent . Width
>6421	Identifier	Width
>6422	Identifier	rctParent
>6423	CastTarget	float
>6424	Argument	yXY
>6425	Identifier	yXY
>6426	Argument	xXY
>6427	Identifier	xXY
>6428	Argument	NULL
>6429	Identifier	NULL
>6430	Callee	m_pYZWnd -> SetWindowPos
>6431	PtrMemberAccess	m_pYZWnd -> SetWindowPos
>6432	Identifier	SetWindowPos
>6433	Identifier	m_pYZWnd
>6434	ExpressionStatement	 
>6435	CallExpression	m_pXZWnd -> SetWindowPos ( NULL , xXY , yXY , ( ( float ) rctParent . Width ( ) ) * .60 , rctParent . Height ( ) \
>6436	ArgumentList	NULL
>6437	Argument	SWP_SHOWWINDOW
>6438	Identifier	SWP_SHOWWINDOW
>6439	Argument	rctParent . Height ( ) - 2
>6440	AdditiveExpression	rctParent . Height ( ) - 2
>6441	PrimaryExpression	2
>6442	CallExpression	rctParent . Height ( )
>6443	ArgumentList	 
>6444	Callee	rctParent . Height
>6445	MemberAccess	rctParent . Height
>6446	Identifier	Height
>6447	Identifier	rctParent
>6448	Argument	( ( float ) rctParent . Width ( ) ) * .60
>6449	MultiplicativeExpression	( ( float ) rctParent . Width ( ) ) * .60
>6450	PrimaryExpression	.60
>6451	CastExpression	( float ) rctParent . Width ( )
>6452	CallExpression	rctParent . Width ( )
>6453	ArgumentList	 
>6454	Callee	rctParent . Width
>6455	MemberAccess	rctParent . Width
>6456	Identifier	Width
>6457	Identifier	rctParent
>6458	CastTarget	float
>6459	Argument	yXY
>6460	Identifier	yXY
>6461	Argument	xXY
>6462	Identifier	xXY
>6463	Argument	NULL
>6464	Identifier	NULL
>6465	Callee	m_pXZWnd -> SetWindowPos
>6466	PtrMemberAccess	m_pXZWnd -> SetWindowPos
>6467	Identifier	SetWindowPos
>6468	Identifier	m_pXZWnd
>6469	ExpressionStatement	 
>6470	CallExpression	m_pXYWnd -> SetWindowPos ( NULL , xXY , yXY , ( ( float ) rctParent . Width ( ) ) * .60 , rctParent . Height ( ) \
>6471	ArgumentList	NULL
>6472	Argument	SWP_SHOWWINDOW
>6473	Identifier	SWP_SHOWWINDOW
>6474	Argument	rctParent . Height ( ) - 2
>6475	AdditiveExpression	rctParent . Height ( ) - 2
>6476	PrimaryExpression	2
>6477	CallExpression	rctParent . Height ( )
>6478	ArgumentList	 
>6479	Callee	rctParent . Height
>6480	MemberAccess	rctParent . Height
>6481	Identifier	Height
>6482	Identifier	rctParent
>6483	Argument	( ( float ) rctParent . Width ( ) ) * .60
>6484	MultiplicativeExpression	( ( float ) rctParent . Width ( ) ) * .60
>6485	PrimaryExpression	.60
>6486	CastExpression	( float ) rctParent . Width ( )
>6487	CallExpression	rctParent . Width ( )
>6488	ArgumentList	 
>6489	Callee	rctParent . Width
>6490	MemberAccess	rctParent . Width
>6491	Identifier	Width
>6492	Identifier	rctParent
>6493	CastTarget	float
>6494	Argument	yXY
>6495	Identifier	yXY
>6496	Argument	xXY
>6497	Identifier	xXY
>6498	Argument	NULL
>6499	Identifier	NULL
>6500	Callee	m_pXYWnd -> SetWindowPos
>6501	PtrMemberAccess	m_pXYWnd -> SetWindowPos
>6502	Identifier	SetWindowPos
>6503	Identifier	m_pXYWnd
>6504	IdentifierDeclStatement	 
>6505	IdentifierDecl	yTex = 1 + ( ( float ) rctParent . Height ( ) ) * .45
>6506	AssignmentExpr	yTex = 1 + ( ( float ) rctParent . Height ( ) ) * .45
>6507	AdditiveExpression	1 + ( ( float ) rctParent . Height ( ) ) * .45
>6508	MultiplicativeExpression	( ( float ) rctParent . Height ( ) ) * .45
>6509	PrimaryExpression	.45
>6510	CastExpression	( float ) rctParent . Height ( )
>6511	CallExpression	rctParent . Height ( )
>6512	ArgumentList	 
>6513	Callee	rctParent . Height
>6514	MemberAccess	rctParent . Height
>6515	Identifier	Height
>6516	Identifier	rctParent
>6517	CastTarget	float
>6518	PrimaryExpression	1
>6519	Identifier	yTex
>6520	Identifier	yTex
>6521	IdentifierDeclType	int
>6522	IdentifierDeclStatement	 
>6523	IdentifierDecl	yXY = 1
>6524	AssignmentExpr	yXY = 1
>6525	PrimaryExpression	1
>6526	Identifier	yXY
>6527	Identifier	yXY
>6528	IdentifierDeclType	int
>6529	IdentifierDeclStatement	 
>6530	IdentifierDecl	xZ = 1 + xXY + ( ( float ) rctParent . Width ( ) ) * .60
>6531	AssignmentExpr	xZ = 1 + xXY + ( ( float ) rctParent . Width ( ) ) * .60
>6532	AdditiveExpression	1 + xXY + ( ( float ) rctParent . Width ( ) ) * .60
>6533	AdditiveExpression	xXY + ( ( float ) rctParent . Width ( ) ) * .60
>6534	MultiplicativeExpression	( ( float ) rctParent . Width ( ) ) * .60
>6535	PrimaryExpression	.60
>6536	CastExpression	( float ) rctParent . Width ( )
>6537	CallExpression	rctParent . Width ( )
>6538	ArgumentList	 
>6539	Callee	rctParent . Width
>6540	MemberAccess	rctParent . Width
>6541	Identifier	Width
>6542	Identifier	rctParent
>6543	CastTarget	float
>6544	Identifier	xXY
>6545	PrimaryExpression	1
>6546	Identifier	xZ
>6547	Identifier	xZ
>6548	IdentifierDeclType	int
>6549	IdentifierDeclStatement	 
>6550	IdentifierDecl	xXY = 1 + xTex + ( ( float ) rctParent . Width ( ) ) * .30
>6551	AssignmentExpr	xXY = 1 + xTex + ( ( float ) rctParent . Width ( ) ) * .30
>6552	AdditiveExpression	1 + xTex + ( ( float ) rctParent . Width ( ) ) * .30
>6553	AdditiveExpression	xTex + ( ( float ) rctParent . Width ( ) ) * .30
>6554	MultiplicativeExpression	( ( float ) rctParent . Width ( ) ) * .30
>6555	PrimaryExpression	.30
>6556	CastExpression	( float ) rctParent . Width ( )
>6557	CallExpression	rctParent . Width ( )
>6558	ArgumentList	 
>6559	Callee	rctParent . Width
>6560	MemberAccess	rctParent . Width
>6561	Identifier	Width
>6562	Identifier	rctParent
>6563	CastTarget	float
>6564	Identifier	xTex
>6565	PrimaryExpression	1
>6566	Identifier	xXY
>6567	Identifier	xXY
>6568	IdentifierDeclType	int
>6569	IdentifierDeclStatement	 
>6570	IdentifierDecl	xTex = 1
>6571	AssignmentExpr	xTex = 1
>6572	PrimaryExpression	1
>6573	Identifier	xTex
>6574	Identifier	xTex
>6575	IdentifierDeclType	int
>6576	IdentifierDeclStatement	 
>6577	IdentifierDecl	rctWork
>6578	Identifier	rctWork
>6579	IdentifierDeclType	CRect
>6580	ExpressionStatement	 
>6581	CallExpression	SetParent ( m_pTexWnd -> GetSafeHwnd ( ) , g_qeglobals . d_hwndEntity )
>6582	ArgumentList	m_pTexWnd -> GetSafeHwnd ( )
>6583	Argument	g_qeglobals . d_hwndEntity
>6584	MemberAccess	g_qeglobals . d_hwndEntity
>6585	Identifier	d_hwndEntity
>6586	Identifier	g_qeglobals
>6587	Argument	m_pTexWnd -> GetSafeHwnd ( )
>6588	CallExpression	m_pTexWnd -> GetSafeHwnd ( )
>6589	ArgumentList	 
>6590	Callee	m_pTexWnd -> GetSafeHwnd
>6591	PtrMemberAccess	m_pTexWnd -> GetSafeHwnd
>6592	Identifier	GetSafeHwnd
>6593	Identifier	m_pTexWnd
>6594	Callee	SetParent
>6595	Identifier	SetParent
>6596	Statement	 
>6597	ExpressionStatement	 
>6598	CallExpression	m_pTexWnd -> Create ( TEXTURE_WINDOW_CLASS , \"\" , QE3_SPLITTER_STYLE , rect , this , 1239 )
>6599	ArgumentList	TEXTURE_WINDOW_CLASS
>6600	Argument	1239
>6601	PrimaryExpression	1239
>6602	Argument	this
>6603	Identifier	this
>6604	Argument	rect
>6605	Identifier	rect
>6606	Argument	QE3_SPLITTER_STYLE
>6607	Identifier	QE3_SPLITTER_STYLE
>6608	Argument	\"\"
>6609	PrimaryExpression	\"\"
>6610	Argument	TEXTURE_WINDOW_CLASS
>6611	Identifier	TEXTURE_WINDOW_CLASS
>6612	Callee	m_pTexWnd -> Create
>6613	PtrMemberAccess	m_pTexWnd -> Create
>6614	Identifier	Create
>6615	Identifier	m_pTexWnd
>6616	ExpressionStatement	 
>6617	AssignmentExpr	m_pTexWnd = new CTexWnd ( )
>6618	UnaryExpression	new CTexWnd ( )
>6619	Identifier	m_pTexWnd
>6620	ExpressionStatement	 
>6621	CallExpression	m_pCamWnd -> SetXYFriend ( m_pXYWnd )
>6622	ArgumentList	m_pXYWnd
>6623	Argument	m_pXYWnd
>6624	Identifier	m_pXYWnd
>6625	Callee	m_pCamWnd -> SetXYFriend
>6626	PtrMemberAccess	m_pCamWnd -> SetXYFriend
>6627	Identifier	SetXYFriend
>6628	Identifier	m_pCamWnd
>6629	ExpressionStatement	 
>6630	CallExpression	m_pYZWnd -> SetViewType ( YZ )
>6631	ArgumentList	YZ
>6632	Argument	YZ
>6633	Identifier	YZ
>6634	Callee	m_pYZWnd -> SetViewType
>6635	PtrMemberAccess	m_pYZWnd -> SetViewType
>6636	Identifier	SetViewType
>6637	Identifier	m_pYZWnd
>6638	ExpressionStatement	 
>6639	CallExpression	m_pYZWnd -> Create ( XY_WINDOW_CLASS , \"\" , QE3_CHILDSTYLE , rect , this , 1237 )
>6640	ArgumentList	XY_WINDOW_CLASS
>6641	Argument	1237
>6642	PrimaryExpression	1237
>6643	Argument	this
>6644	Identifier	this
>6645	Argument	rect
>6646	Identifier	rect
>6647	Argument	QE3_CHILDSTYLE
>6648	Identifier	QE3_CHILDSTYLE
>6649	Argument	\"\"
>6650	PrimaryExpression	\"\"
>6651	Argument	XY_WINDOW_CLASS
>6652	Identifier	XY_WINDOW_CLASS
>6653	Callee	m_pYZWnd -> Create
>6654	PtrMemberAccess	m_pYZWnd -> Create
>6655	Identifier	Create
>6656	Identifier	m_pYZWnd
>6657	ExpressionStatement	 
>6658	AssignmentExpr	m_pYZWnd = new CXYWnd ( )
>6659	UnaryExpression	new CXYWnd ( )
>6660	Identifier	m_pYZWnd
>6661	ExpressionStatement	 
>6662	CallExpression	m_pXZWnd -> SetViewType ( XZ )
>6663	ArgumentList	XZ
>6664	Argument	XZ
>6665	Identifier	XZ
>6666	Callee	m_pXZWnd -> SetViewType
>6667	PtrMemberAccess	m_pXZWnd -> SetViewType
>6668	Identifier	SetViewType
>6669	Identifier	m_pXZWnd
>6670	ExpressionStatement	 
>6671	CallExpression	m_pXZWnd -> Create ( XY_WINDOW_CLASS , \"\" , QE3_CHILDSTYLE , rect , this , 1236 )
>6672	ArgumentList	XY_WINDOW_CLASS
>6673	Argument	1236
>6674	PrimaryExpression	1236
>6675	Argument	this
>6676	Identifier	this
>6677	Argument	rect
>6678	Identifier	rect
>6679	Argument	QE3_CHILDSTYLE
>6680	Identifier	QE3_CHILDSTYLE
>6681	Argument	\"\"
>6682	PrimaryExpression	\"\"
>6683	Argument	XY_WINDOW_CLASS
>6684	Identifier	XY_WINDOW_CLASS
>6685	Callee	m_pXZWnd -> Create
>6686	PtrMemberAccess	m_pXZWnd -> Create
>6687	Identifier	Create
>6688	Identifier	m_pXZWnd
>6689	ExpressionStatement	 
>6690	AssignmentExpr	m_pXZWnd = new CXYWnd ( )
>6691	UnaryExpression	new CXYWnd ( )
>6692	Identifier	m_pXZWnd
>6693	ExpressionStatement	 
>6694	CallExpression	m_pXYWnd -> SetViewType ( XY )
>6695	ArgumentList	XY
>6696	Argument	XY
>6697	Identifier	XY
>6698	Callee	m_pXYWnd -> SetViewType
>6699	PtrMemberAccess	m_pXYWnd -> SetViewType
>6700	Identifier	SetViewType
>6701	Identifier	m_pXYWnd
>6702	ExpressionStatement	 
>6703	CallExpression	m_pXYWnd -> Create ( XY_WINDOW_CLASS , \"\" , QE3_CHILDSTYLE , rect , this , 1235 )
>6704	ArgumentList	XY_WINDOW_CLASS
>6705	Argument	1235
>6706	PrimaryExpression	1235
>6707	Argument	this
>6708	Identifier	this
>6709	Argument	rect
>6710	Identifier	rect
>6711	Argument	QE3_CHILDSTYLE
>6712	Identifier	QE3_CHILDSTYLE
>6713	Argument	\"\"
>6714	PrimaryExpression	\"\"
>6715	Argument	XY_WINDOW_CLASS
>6716	Identifier	XY_WINDOW_CLASS
>6717	Callee	m_pXYWnd -> Create
>6718	PtrMemberAccess	m_pXYWnd -> Create
>6719	Identifier	Create
>6720	Identifier	m_pXYWnd
>6721	ExpressionStatement	 
>6722	AssignmentExpr	m_pXYWnd = new CXYWnd ( )
>6723	UnaryExpression	new CXYWnd ( )
>6724	Identifier	m_pXYWnd
>6725	ExpressionStatement	 
>6726	CallExpression	m_pZWnd -> Create ( Z_WINDOW_CLASS , \"\" , QE3_CHILDSTYLE , rect , this , 1238 )
>6727	ArgumentList	Z_WINDOW_CLASS
>6728	Argument	1238
>6729	PrimaryExpression	1238
>6730	Argument	this
>6731	Identifier	this
>6732	Argument	rect
>6733	Identifier	rect
>6734	Argument	QE3_CHILDSTYLE
>6735	Identifier	QE3_CHILDSTYLE
>6736	Argument	\"\"
>6737	PrimaryExpression	\"\"
>6738	Argument	Z_WINDOW_CLASS
>6739	Identifier	Z_WINDOW_CLASS
>6740	Callee	m_pZWnd -> Create
>6741	PtrMemberAccess	m_pZWnd -> Create
>6742	Identifier	Create
>6743	Identifier	m_pZWnd
>6744	ExpressionStatement	 
>6745	AssignmentExpr	m_pZWnd = new CZWnd ( )
>6746	UnaryExpression	new CZWnd ( )
>6747	Identifier	m_pZWnd
>6748	ExpressionStatement	 
>6749	CallExpression	m_pCamWnd -> Create ( CAMERA_WINDOW_CLASS , \"\" , QE3_CHILDSTYLE , rect , this , 1234 )
>6750	ArgumentList	CAMERA_WINDOW_CLASS
>6751	Argument	1234
>6752	PrimaryExpression	1234
>6753	Argument	this
>6754	Identifier	this
>6755	Argument	rect
>6756	Identifier	rect
>6757	Argument	QE3_CHILDSTYLE
>6758	Identifier	QE3_CHILDSTYLE
>6759	Argument	\"\"
>6760	PrimaryExpression	\"\"
>6761	Argument	CAMERA_WINDOW_CLASS
>6762	Identifier	CAMERA_WINDOW_CLASS
>6763	Callee	m_pCamWnd -> Create
>6764	PtrMemberAccess	m_pCamWnd -> Create
>6765	Identifier	Create
>6766	Identifier	m_pCamWnd
>6767	ExpressionStatement	 
>6768	AssignmentExpr	m_pCamWnd = new CCamWnd ( )
>6769	UnaryExpression	new CCamWnd ( )
>6770	Identifier	m_pCamWnd
>6771	Condition	 
>6772	EqualityExpression	g_PrefsDlg . m_nView == 1
>6773	PrimaryExpression	1
>6774	MemberAccess	g_PrefsDlg . m_nView
>6775	Identifier	m_nView
>6776	Identifier	g_PrefsDlg
>6777	CompoundStatement	 
>6778	ExpressionStatement	 
>6779	CallExpression	m_wndSplit3 . RecalcLayout ( )
>6780	ArgumentList	 
>6781	Callee	m_wndSplit3 . RecalcLayout
>6782	MemberAccess	m_wndSplit3 . RecalcLayout
>6783	Identifier	RecalcLayout
>6784	Identifier	m_wndSplit3
>6785	ExpressionStatement	 
>6786	CallExpression	m_wndSplit2 . RecalcLayout ( )
>6787	ArgumentList	 
>6788	Callee	m_wndSplit2 . RecalcLayout
>6789	MemberAccess	m_wndSplit2 . RecalcLayout
>6790	Identifier	RecalcLayout
>6791	Identifier	m_wndSplit2
>6792	ExpressionStatement	 
>6793	CallExpression	m_wndSplit . RecalcLayout ( )
>6794	ArgumentList	 
>6795	Callee	m_wndSplit . RecalcLayout
>6796	MemberAccess	m_wndSplit . RecalcLayout
>6797	Identifier	RecalcLayout
>6798	Identifier	m_wndSplit
>6799	IfStatement	if ( LoadRegistryInfo ( \"Radiant
>6800	ExpressionStatement	 
>6801	CallExpression	m_wndSplit3 . SetRowInfo ( 1 , spinfo . m_nCur , spinfo . m_nMin )
>6802	ArgumentList	1
>6803	Argument	spinfo . m_nMin
>6804	MemberAccess	spinfo . m_nMin
>6805	Identifier	m_nMin
>6806	Identifier	spinfo
>6807	Argument	spinfo . m_nCur
>6808	MemberAccess	spinfo . m_nCur
>6809	Identifier	m_nCur
>6810	Identifier	spinfo
>6811	Argument	1
>6812	PrimaryExpression	1
>6813	Callee	m_wndSplit3 . SetRowInfo
>6814	MemberAccess	m_wndSplit3 . SetRowInfo
>6815	Identifier	SetRowInfo
>6816	Identifier	m_wndSplit3
>6817	Condition	 
>6818	CallExpression	LoadRegistryInfo ( \"Radiant
>6819	ArgumentList	\"Radiant
>6820	Argument	& lSize
>6821	UnaryOp	& lSize
>6822	Identifier	lSize
>6823	UnaryOperator	&
>6824	Argument	& spinfo
>6825	UnaryOp	& spinfo
>6826	Identifier	spinfo
>6827	UnaryOperator	&
>6828	Argument	\"Radiant
>6829	PrimaryExpression	\"Radiant
>6830	Callee	LoadRegistryInfo
>6831	Identifier	LoadRegistryInfo
>6832	IfStatement	if ( LoadRegistryInfo ( \"Radiant
>6833	ExpressionStatement	 
>6834	CallExpression	m_wndSplit3 . SetRowInfo ( 0 , spinfo . m_nCur , spinfo . m_nMin )
>6835	ArgumentList	0
>6836	Argument	spinfo . m_nMin
>6837	MemberAccess	spinfo . m_nMin
>6838	Identifier	m_nMin
>6839	Identifier	spinfo
>6840	Argument	spinfo . m_nCur
>6841	MemberAccess	spinfo . m_nCur
>6842	Identifier	m_nCur
>6843	Identifier	spinfo
>6844	Argument	0
>6845	PrimaryExpression	0
>6846	Callee	m_wndSplit3 . SetRowInfo
>6847	MemberAccess	m_wndSplit3 . SetRowInfo
>6848	Identifier	SetRowInfo
>6849	Identifier	m_wndSplit3
>6850	Condition	 
>6851	CallExpression	LoadRegistryInfo ( \"Radiant
>6852	ArgumentList	\"Radiant
>6853	Argument	& lSize
>6854	UnaryOp	& lSize
>6855	Identifier	lSize
>6856	UnaryOperator	&
>6857	Argument	& spinfo
>6858	UnaryOp	& spinfo
>6859	Identifier	spinfo
>6860	UnaryOperator	&
>6861	Argument	\"Radiant
>6862	PrimaryExpression	\"Radiant
>6863	Callee	LoadRegistryInfo
>6864	Identifier	LoadRegistryInfo
>6865	IfStatement	if ( LoadRegistryInfo ( \"Radiant
>6866	ExpressionStatement	 
>6867	CallExpression	m_wndSplit2 . SetColumnInfo ( 2 , spinfo . m_nCur , spinfo . m_nMin )
>6868	ArgumentList	2
>6869	Argument	spinfo . m_nMin
>6870	MemberAccess	spinfo . m_nMin
>6871	Identifier	m_nMin
>6872	Identifier	spinfo
>6873	Argument	spinfo . m_nCur
>6874	MemberAccess	spinfo . m_nCur
>6875	Identifier	m_nCur
>6876	Identifier	spinfo
>6877	Argument	2
>6878	PrimaryExpression	2
>6879	Callee	m_wndSplit2 . SetColumnInfo
>6880	MemberAccess	m_wndSplit2 . SetColumnInfo
>6881	Identifier	SetColumnInfo
>6882	Identifier	m_wndSplit2
>6883	Condition	 
>6884	CallExpression	LoadRegistryInfo ( \"Radiant
>6885	ArgumentList	\"Radiant
>6886	Argument	& lSize
>6887	UnaryOp	& lSize
>6888	Identifier	lSize
>6889	UnaryOperator	&
>6890	Argument	& spinfo
>6891	UnaryOp	& spinfo
>6892	Identifier	spinfo
>6893	UnaryOperator	&
>6894	Argument	\"Radiant
>6895	PrimaryExpression	\"Radiant
>6896	Callee	LoadRegistryInfo
>6897	Identifier	LoadRegistryInfo
>6898	IfStatement	if ( LoadRegistryInfo ( \"Radiant
>6899	ExpressionStatement	 
>6900	CallExpression	m_wndSplit2 . SetColumnInfo ( 1 , spinfo . m_nCur , spinfo . m_nMin )
>6901	ArgumentList	1
>6902	Argument	spinfo . m_nMin
>6903	MemberAccess	spinfo . m_nMin
>6904	Identifier	m_nMin
>6905	Identifier	spinfo
>6906	Argument	spinfo . m_nCur
>6907	MemberAccess	spinfo . m_nCur
>6908	Identifier	m_nCur
>6909	Identifier	spinfo
>6910	Argument	1
>6911	PrimaryExpression	1
>6912	Callee	m_wndSplit2 . SetColumnInfo
>6913	MemberAccess	m_wndSplit2 . SetColumnInfo
>6914	Identifier	SetColumnInfo
>6915	Identifier	m_wndSplit2
>6916	Condition	 
>6917	CallExpression	LoadRegistryInfo ( \"Radiant
>6918	ArgumentList	\"Radiant
>6919	Argument	& lSize
>6920	UnaryOp	& lSize
>6921	Identifier	lSize
>6922	UnaryOperator	&
>6923	Argument	& spinfo
>6924	UnaryOp	& spinfo
>6925	Identifier	spinfo
>6926	UnaryOperator	&
>6927	Argument	\"Radiant
>6928	PrimaryExpression	\"Radiant
>6929	Callee	LoadRegistryInfo
>6930	Identifier	LoadRegistryInfo
>6931	IfStatement	if ( LoadRegistryInfo ( \"Radiant
>6932	ExpressionStatement	 
>6933	CallExpression	m_wndSplit2 . SetColumnInfo ( 0 , spinfo . m_nCur , spinfo . m_nMin )
>6934	ArgumentList	0
>6935	Argument	spinfo . m_nMin
>6936	MemberAccess	spinfo . m_nMin
>6937	Identifier	m_nMin
>6938	Identifier	spinfo
>6939	Argument	spinfo . m_nCur
>6940	MemberAccess	spinfo . m_nCur
>6941	Identifier	m_nCur
>6942	Identifier	spinfo
>6943	Argument	0
>6944	PrimaryExpression	0
>6945	Callee	m_wndSplit2 . SetColumnInfo
>6946	MemberAccess	m_wndSplit2 . SetColumnInfo
>6947	Identifier	SetColumnInfo
>6948	Identifier	m_wndSplit2
>6949	Condition	 
>6950	CallExpression	LoadRegistryInfo ( \"Radiant
>6951	ArgumentList	\"Radiant
>6952	Argument	& lSize
>6953	UnaryOp	& lSize
>6954	Identifier	lSize
>6955	UnaryOperator	&
>6956	Argument	& spinfo
>6957	UnaryOp	& spinfo
>6958	Identifier	spinfo
>6959	UnaryOperator	&
>6960	Argument	\"Radiant
>6961	PrimaryExpression	\"Radiant
>6962	Callee	LoadRegistryInfo
>6963	Identifier	LoadRegistryInfo
>6964	IfStatement	if ( LoadRegistryInfo ( \"Radiant
>6965	ExpressionStatement	 
>6966	CallExpression	m_wndSplit . SetRowInfo ( 1 , spinfo . m_nCur , spinfo . m_nMin )
>6967	ArgumentList	1
>6968	Argument	spinfo . m_nMin
>6969	MemberAccess	spinfo . m_nMin
>6970	Identifier	m_nMin
>6971	Identifier	spinfo
>6972	Argument	spinfo . m_nCur
>6973	MemberAccess	spinfo . m_nCur
>6974	Identifier	m_nCur
>6975	Identifier	spinfo
>6976	Argument	1
>6977	PrimaryExpression	1
>6978	Callee	m_wndSplit . SetRowInfo
>6979	MemberAccess	m_wndSplit . SetRowInfo
>6980	Identifier	SetRowInfo
>6981	Identifier	m_wndSplit
>6982	Condition	 
>6983	CallExpression	LoadRegistryInfo ( \"Radiant
>6984	ArgumentList	\"Radiant
>6985	Argument	& lSize
>6986	UnaryOp	& lSize
>6987	Identifier	lSize
>6988	UnaryOperator	&
>6989	Argument	& spinfo
>6990	UnaryOp	& spinfo
>6991	Identifier	spinfo
>6992	UnaryOperator	&
>6993	Argument	\"Radiant
>6994	PrimaryExpression	\"Radiant
>6995	Callee	LoadRegistryInfo
>6996	Identifier	LoadRegistryInfo
>6997	IfStatement	if ( LoadRegistryInfo ( \"Radiant
>6998	ExpressionStatement	 
>6999	CallExpression	m_wndSplit . SetRowInfo ( 0 , spinfo . m_nCur , spinfo . m_nMin )
>7000	ArgumentList	0
>7001	Argument	spinfo . m_nMin
>7002	MemberAccess	spinfo . m_nMin
>7003	Identifier	m_nMin
>7004	Identifier	spinfo
>7005	Argument	spinfo . m_nCur
>7006	MemberAccess	spinfo . m_nCur
>7007	Identifier	m_nCur
>7008	Identifier	spinfo
>7009	Argument	0
>7010	PrimaryExpression	0
>7011	Callee	m_wndSplit . SetRowInfo
>7012	MemberAccess	m_wndSplit . SetRowInfo
>7013	Identifier	SetRowInfo
>7014	Identifier	m_wndSplit
>7015	Condition	 
>7016	CallExpression	LoadRegistryInfo ( \"Radiant
>7017	ArgumentList	\"Radiant
>7018	Argument	& lSize
>7019	UnaryOp	& lSize
>7020	Identifier	lSize
>7021	UnaryOperator	&
>7022	Argument	& spinfo
>7023	UnaryOp	& spinfo
>7024	Identifier	spinfo
>7025	UnaryOperator	&
>7026	Argument	\"Radiant
>7027	PrimaryExpression	\"Radiant
>7028	Callee	LoadRegistryInfo
>7029	Identifier	LoadRegistryInfo
>7030	IdentifierDeclStatement	 
>7031	IdentifierDecl	lSize = sizeof ( spinfo )
>7032	AssignmentExpr	lSize = sizeof ( spinfo )
>7033	SizeofExpr	sizeof ( spinfo )
>7034	SizeofOperand	spinfo
>7035	Sizeof	sizeof
>7036	Identifier	lSize
>7037	Identifier	lSize
>7038	IdentifierDeclType	long
>7039	IdentifierDeclStatement	 
>7040	IdentifierDecl	spinfo
>7041	Identifier	spinfo
>7042	IdentifierDeclType	SplitInfo
>7043	ExpressionStatement	 
>7044	CallExpression	ShowWindow ( g_qeglobals . d_hwndEntity , SW_HIDE )
>7045	ArgumentList	g_qeglobals . d_hwndEntity
>7046	Argument	SW_HIDE
>7047	Identifier	SW_HIDE
>7048	Argument	g_qeglobals . d_hwndEntity
>7049	MemberAccess	g_qeglobals . d_hwndEntity
>7050	Identifier	d_hwndEntity
>7051	Identifier	g_qeglobals
>7052	Callee	ShowWindow
>7053	Identifier	ShowWindow
>7054	Statement	 
>7055	ExpressionStatement	 
>7056	CallExpression	LoadWindowState ( m_wndSplit3 . GetSafeHwnd ( ) , \"Radiant
>7057	ArgumentList	m_wndSplit3 . GetSafeHwnd ( )
>7058	Argument	\"Radiant
>7059	PrimaryExpression	\"Radiant
>7060	Argument	m_wndSplit3 . GetSafeHwnd ( )
>7061	CallExpression	m_wndSplit3 . GetSafeHwnd ( )
>7062	ArgumentList	 
>7063	Callee	m_wndSplit3 . GetSafeHwnd
>7064	MemberAccess	m_wndSplit3 . GetSafeHwnd
>7065	Identifier	GetSafeHwnd
>7066	Identifier	m_wndSplit3
>7067	Callee	LoadWindowState
>7068	Identifier	LoadWindowState
>7069	ExpressionStatement	 
>7070	CallExpression	LoadWindowState ( m_wndSplit2 . GetSafeHwnd ( ) , \"Radiant
>7071	ArgumentList	m_wndSplit2 . GetSafeHwnd ( )
>7072	Argument	\"Radiant
>7073	PrimaryExpression	\"Radiant
>7074	Argument	m_wndSplit2 . GetSafeHwnd ( )
>7075	CallExpression	m_wndSplit2 . GetSafeHwnd ( )
>7076	ArgumentList	 
>7077	Callee	m_wndSplit2 . GetSafeHwnd
>7078	MemberAccess	m_wndSplit2 . GetSafeHwnd
>7079	Identifier	GetSafeHwnd
>7080	Identifier	m_wndSplit2
>7081	Callee	LoadWindowState
>7082	Identifier	LoadWindowState
>7083	ExpressionStatement	 
>7084	CallExpression	LoadWindowState ( m_wndSplit . GetSafeHwnd ( ) , \"Radiant
>7085	ArgumentList	m_wndSplit . GetSafeHwnd ( )
>7086	Argument	\"Radiant
>7087	PrimaryExpression	\"Radiant
>7088	Argument	m_wndSplit . GetSafeHwnd ( )
>7089	CallExpression	m_wndSplit . GetSafeHwnd ( )
>7090	ArgumentList	 
>7091	Callee	m_wndSplit . GetSafeHwnd
>7092	MemberAccess	m_wndSplit . GetSafeHwnd
>7093	Identifier	GetSafeHwnd
>7094	Identifier	m_wndSplit
>7095	Callee	LoadWindowState
>7096	Identifier	LoadWindowState
>7097	ExpressionStatement	 
>7098	CallExpression	m_wndSplit3 . SetRowInfo ( 0 , ( rctParent . Height ( ) * .85 ) * .60 , 15 )
>7099	ArgumentList	0
>7100	Argument	15
>7101	PrimaryExpression	15
>7102	Argument	( rctParent . Height ( ) * .85 ) * .60
>7103	MultiplicativeExpression	( rctParent . Height ( ) * .85 ) * .60
>7104	PrimaryExpression	.60
>7105	MultiplicativeExpression	rctParent . Height ( ) * .85
>7106	PrimaryExpression	.85
>7107	CallExpression	rctParent . Height ( )
>7108	ArgumentList	 
>7109	Callee	rctParent . Height
>7110	MemberAccess	rctParent . Height
>7111	Identifier	Height
>7112	Identifier	rctParent
>7113	Argument	0
>7114	PrimaryExpression	0
>7115	Callee	m_wndSplit3 . SetRowInfo
>7116	MemberAccess	m_wndSplit3 . SetRowInfo
>7117	Identifier	SetRowInfo
>7118	Identifier	m_wndSplit3
>7119	ExpressionStatement	 
>7120	CallExpression	m_wndSplit3 . SetRowInfo ( 1 , ( rctParent . Height ( ) * .85 ) * .40 , 15 )
>7121	ArgumentList	1
>7122	Argument	15
>7123	PrimaryExpression	15
>7124	Argument	( rctParent . Height ( ) * .85 ) * .40
>7125	MultiplicativeExpression	( rctParent . Height ( ) * .85 ) * .40
>7126	PrimaryExpression	.40
>7127	MultiplicativeExpression	rctParent . Height ( ) * .85
>7128	PrimaryExpression	.85
>7129	CallExpression	rctParent . Height ( )
>7130	ArgumentList	 
>7131	Callee	rctParent . Height
>7132	MemberAccess	rctParent . Height
>7133	Identifier	Height
>7134	Identifier	rctParent
>7135	Argument	1
>7136	PrimaryExpression	1
>7137	Callee	m_wndSplit3 . SetRowInfo
>7138	MemberAccess	m_wndSplit3 . SetRowInfo
>7139	Identifier	SetRowInfo
>7140	Identifier	m_wndSplit3
>7141	ExpressionStatement	 
>7142	CallExpression	m_wndSplit2 . SetColumnInfo ( 2 , rctParent . Width ( ) * fRight , nMin2 )
>7143	ArgumentList	2
>7144	Argument	nMin2
>7145	Identifier	nMin2
>7146	Argument	rctParent . Width ( ) * fRight
>7147	MultiplicativeExpression	rctParent . Width ( ) * fRight
>7148	Identifier	fRight
>7149	CallExpression	rctParent . Width ( )
>7150	ArgumentList	 
>7151	Callee	rctParent . Width
>7152	MemberAccess	rctParent . Width
>7153	Identifier	Width
>7154	Identifier	rctParent
>7155	Argument	2
>7156	PrimaryExpression	2
>7157	Callee	m_wndSplit2 . SetColumnInfo
>7158	MemberAccess	m_wndSplit2 . SetColumnInfo
>7159	Identifier	SetColumnInfo
>7160	Identifier	m_wndSplit2
>7161	ExpressionStatement	 
>7162	CallExpression	m_wndSplit2 . SetColumnInfo ( 1 , rctParent . Width ( ) * .70 , 100 )
>7163	ArgumentList	1
>7164	Argument	100
>7165	PrimaryExpression	100
>7166	Argument	rctParent . Width ( ) * .70
>7167	MultiplicativeExpression	rctParent . Width ( ) * .70
>7168	PrimaryExpression	.70
>7169	CallExpression	rctParent . Width ( )
>7170	ArgumentList	 
>7171	Callee	rctParent . Width
>7172	MemberAccess	rctParent . Width
>7173	Identifier	Width
>7174	Identifier	rctParent
>7175	Argument	1
>7176	PrimaryExpression	1
>7177	Callee	m_wndSplit2 . SetColumnInfo
>7178	MemberAccess	m_wndSplit2 . SetColumnInfo
>7179	Identifier	SetColumnInfo
>7180	Identifier	m_wndSplit2
>7181	ExpressionStatement	 
>7182	CallExpression	m_wndSplit2 . SetColumnInfo ( 0 , rctParent . Width ( ) * fLeft , nMin1 )
>7183	ArgumentList	0
>7184	Argument	nMin1
>7185	Identifier	nMin1
>7186	Argument	rctParent . Width ( ) * fLeft
>7187	MultiplicativeExpression	rctParent . Width ( ) * fLeft
>7188	Identifier	fLeft
>7189	CallExpression	rctParent . Width ( )
>7190	ArgumentList	 
>7191	Callee	rctParent . Width
>7192	MemberAccess	rctParent . Width
>7193	Identifier	Width
>7194	Identifier	rctParent
>7195	Argument	0
>7196	PrimaryExpression	0
>7197	Callee	m_wndSplit2 . SetColumnInfo
>7198	MemberAccess	m_wndSplit2 . SetColumnInfo
>7199	Identifier	SetColumnInfo
>7200	Identifier	m_wndSplit2
>7201	IdentifierDeclStatement	 
>7202	IdentifierDecl	nMin2 = ( nMin1 == 10 ) ? 25 
>7203	AssignmentExpr	nMin2 = ( nMin1 == 10 ) ? 25 
>7204	ConditionalExpression	( nMin1 == 10 ) ? 25 
>7205	PrimaryExpression	10
>7206	PrimaryExpression	25
>7207	Condition	nMin1 == 10
>7208	EqualityExpression	nMin1 == 10
>7209	PrimaryExpression	10
>7210	Identifier	nMin1
>7211	Identifier	nMin2
>7212	Identifier	nMin2
>7213	IdentifierDeclType	int
>7214	IdentifierDeclStatement	 
>7215	IdentifierDecl	nMin1 = ( g_PrefsDlg . m_nView == 0 ) ? 10 
>7216	AssignmentExpr	nMin1 = ( g_PrefsDlg . m_nView == 0 ) ? 10 
>7217	ConditionalExpression	( g_PrefsDlg . m_nView == 0 ) ? 10 
>7218	PrimaryExpression	25
>7219	PrimaryExpression	10
>7220	Condition	g_PrefsDlg . m_nView == 0
>7221	EqualityExpression	g_PrefsDlg . m_nView == 0
>7222	PrimaryExpression	0
>7223	MemberAccess	g_PrefsDlg . m_nView
>7224	Identifier	m_nView
>7225	Identifier	g_PrefsDlg
>7226	Identifier	nMin1
>7227	Identifier	nMin1
>7228	IdentifierDeclType	int
>7229	IdentifierDeclStatement	 
>7230	IdentifierDecl	fRight = ( g_PrefsDlg . m_nView == 0 ) ? .25 
>7231	AssignmentExpr	fRight = ( g_PrefsDlg . m_nView == 0 ) ? .25 
>7232	ConditionalExpression	( g_PrefsDlg . m_nView == 0 ) ? .25 
>7233	PrimaryExpression	.05
>7234	PrimaryExpression	.25
>7235	Condition	g_PrefsDlg . m_nView == 0
>7236	EqualityExpression	g_PrefsDlg . m_nView == 0
>7237	PrimaryExpression	0
>7238	MemberAccess	g_PrefsDlg . m_nView
>7239	Identifier	m_nView
>7240	Identifier	g_PrefsDlg
>7241	Identifier	fRight
>7242	Identifier	fRight
>7243	IdentifierDeclType	float
>7244	IdentifierDeclStatement	 
>7245	IdentifierDecl	fLeft = ( g_PrefsDlg . m_nView == 0 ) ? .05 
>7246	AssignmentExpr	fLeft = ( g_PrefsDlg . m_nView == 0 ) ? .05 
>7247	ConditionalExpression	( g_PrefsDlg . m_nView == 0 ) ? .05 
>7248	PrimaryExpression	.25
>7249	PrimaryExpression	.05
>7250	Condition	g_PrefsDlg . m_nView == 0
>7251	EqualityExpression	g_PrefsDlg . m_nView == 0
>7252	PrimaryExpression	0
>7253	MemberAccess	g_PrefsDlg . m_nView
>7254	Identifier	m_nView
>7255	Identifier	g_PrefsDlg
>7256	Identifier	fLeft
>7257	Identifier	fLeft
>7258	IdentifierDeclType	float
>7259	ExpressionStatement	 
>7260	CallExpression	m_wndSplit . SetRowInfo ( 1 , rctParent . Height ( ) * .15 , 5 )
>7261	ArgumentList	1
>7262	Argument	5
>7263	PrimaryExpression	5
>7264	Argument	rctParent . Height ( ) * .15
>7265	MultiplicativeExpression	rctParent . Height ( ) * .15
>7266	PrimaryExpression	.15
>7267	CallExpression	rctParent . Height ( )
>7268	ArgumentList	 
>7269	Callee	rctParent . Height
>7270	MemberAccess	rctParent . Height
>7271	Identifier	Height
>7272	Identifier	rctParent
>7273	Argument	1
>7274	PrimaryExpression	1
>7275	Callee	m_wndSplit . SetRowInfo
>7276	MemberAccess	m_wndSplit . SetRowInfo
>7277	Identifier	SetRowInfo
>7278	Identifier	m_wndSplit
>7279	ExpressionStatement	 
>7280	CallExpression	m_wndSplit . SetRowInfo ( 0 , rctParent . Height ( ) * .85 , 50 )
>7281	ArgumentList	0
>7282	Argument	50
>7283	PrimaryExpression	50
>7284	Argument	rctParent . Height ( ) * .85
>7285	MultiplicativeExpression	rctParent . Height ( ) * .85
>7286	PrimaryExpression	.85
>7287	CallExpression	rctParent . Height ( )
>7288	ArgumentList	 
>7289	Callee	rctParent . Height
>7290	MemberAccess	rctParent . Height
>7291	Identifier	Height
>7292	Identifier	rctParent
>7293	Argument	0
>7294	PrimaryExpression	0
>7295	Callee	m_wndSplit . SetRowInfo
>7296	MemberAccess	m_wndSplit . SetRowInfo
>7297	Identifier	SetRowInfo
>7298	Identifier	m_wndSplit
>7299	IfStatement	if ( g_PrefsDlg . m_nView == 0 )
>7300	CompoundStatement	 
>7301	ExpressionStatement	 
>7302	CallExpression	SetWindowLong ( m_wndSplit3 . GetSafeHwnd ( ) , GWL_ID , lRightID )
>7303	ArgumentList	m_wndSplit3 . GetSafeHwnd ( )
>7304	Argument	lRightID
>7305	Identifier	lRightID
>7306	Argument	GWL_ID
>7307	Identifier	GWL_ID
>7308	Argument	m_wndSplit3 . GetSafeHwnd ( )
>7309	CallExpression	m_wndSplit3 . GetSafeHwnd ( )
>7310	ArgumentList	 
>7311	Callee	m_wndSplit3 . GetSafeHwnd
>7312	MemberAccess	m_wndSplit3 . GetSafeHwnd
>7313	Identifier	GetSafeHwnd
>7314	Identifier	m_wndSplit3
>7315	Callee	SetWindowLong
>7316	Identifier	SetWindowLong
>7317	Statement	 
>7318	ExpressionStatement	 
>7319	CallExpression	SetWindowLong ( pRight -> GetSafeHwnd ( ) , GWL_ID , lLeftID )
>7320	ArgumentList	pRight -> GetSafeHwnd ( )
>7321	Argument	lLeftID
>7322	Identifier	lLeftID
>7323	Argument	GWL_ID
>7324	Identifier	GWL_ID
>7325	Argument	pRight -> GetSafeHwnd ( )
>7326	CallExpression	pRight -> GetSafeHwnd ( )
>7327	ArgumentList	 
>7328	Callee	pRight -> GetSafeHwnd
>7329	PtrMemberAccess	pRight -> GetSafeHwnd
>7330	Identifier	GetSafeHwnd
>7331	Identifier	pRight
>7332	Callee	SetWindowLong
>7333	Identifier	SetWindowLong
>7334	Statement	 
>7335	ExpressionStatement	 
>7336	CallExpression	GetWindowLong ( m_wndSplit3 . GetSafeHwnd ( ) , GWL_ID )
>7337	ArgumentList	m_wndSplit3 . GetSafeHwnd ( )
>7338	Argument	GWL_ID
>7339	Identifier	GWL_ID
>7340	Argument	m_wndSplit3 . GetSafeHwnd ( )
>7341	CallExpression	m_wndSplit3 . GetSafeHwnd ( )
>7342	ArgumentList	 
>7343	Callee	m_wndSplit3 . GetSafeHwnd
>7344	MemberAccess	m_wndSplit3 . GetSafeHwnd
>7345	Identifier	GetSafeHwnd
>7346	Identifier	m_wndSplit3
>7347	Callee	GetWindowLong
>7348	Identifier	GetWindowLong
>7349	Statement	 
>7350	Statement	 
>7351	Statement	 
>7352	Statement	 
>7353	ExpressionStatement	 
>7354	CallExpression	GetWindowLong ( pRight -> GetSafeHwnd ( ) , GWL_ID )
>7355	ArgumentList	pRight -> GetSafeHwnd ( )
>7356	Argument	GWL_ID
>7357	Identifier	GWL_ID
>7358	Argument	pRight -> GetSafeHwnd ( )
>7359	CallExpression	pRight -> GetSafeHwnd ( )
>7360	ArgumentList	 
>7361	Callee	pRight -> GetSafeHwnd
>7362	PtrMemberAccess	pRight -> GetSafeHwnd
>7363	Identifier	GetSafeHwnd
>7364	Identifier	pRight
>7365	Callee	GetWindowLong
>7366	Identifier	GetWindowLong
>7367	Statement	 
>7368	Statement	 
>7369	Statement	 
>7370	Statement	 
>7371	IdentifierDeclStatement	 
>7372	IdentifierDecl	* pRight = m_wndSplit2 . GetPane ( 0 , 2 )
>7373	AssignmentExpr	* pRight = m_wndSplit2 . GetPane ( 0 , 2 )
>7374	CallExpression	m_wndSplit2 . GetPane ( 0 , 2 )
>7375	ArgumentList	0
>7376	Argument	2
>7377	PrimaryExpression	2
>7378	Argument	0
>7379	PrimaryExpression	0
>7380	Callee	m_wndSplit2 . GetPane
>7381	MemberAccess	m_wndSplit2 . GetPane
>7382	Identifier	GetPane
>7383	Identifier	m_wndSplit2
>7384	Identifier	pRight
>7385	Identifier	pRight
>7386	IdentifierDeclType	CWnd *
>7387	Condition	 
>7388	EqualityExpression	g_PrefsDlg . m_nView == 0
>7389	PrimaryExpression	0
>7390	MemberAccess	g_PrefsDlg . m_nView
>7391	Identifier	m_nView
>7392	Identifier	g_PrefsDlg
>7393	ExpressionStatement	 
>7394	CallExpression	CreateQEChildren ( )
>7395	ArgumentList	 
>7396	Callee	CreateQEChildren
>7397	Identifier	CreateQEChildren
>7398	ExpressionStatement	 
>7399	CallExpression	m_wndSplit3 . GetPane ( 1 , 0 )
>7400	ArgumentList	1
>7401	Argument	0
>7402	PrimaryExpression	0
>7403	Argument	1
>7404	PrimaryExpression	1
>7405	Callee	m_wndSplit3 . GetPane
>7406	MemberAccess	m_wndSplit3 . GetPane
>7407	Identifier	GetPane
>7408	Identifier	m_wndSplit3
>7409	Statement	 
>7410	Statement	 
>7411	Statement	 
>7412	Statement	 
>7413	Statement	 
>7414	Statement	 
>7415	Statement	 
>7416	ExpressionStatement	 
>7417	CallExpression	m_wndSplit3 . CreateView ( 1 , 0 , RUNTIME_CLASS ( CTexWnd ) , CSize ( 25 , 100 ) , pContext )
>7418	ArgumentList	1
>7419	Argument	pContext
>7420	Identifier	pContext
>7421	Argument	CSize ( 25 , 100 )
>7422	CallExpression	CSize ( 25 , 100 )
>7423	ArgumentList	25
>7424	Argument	100
>7425	PrimaryExpression	100
>7426	Argument	25
>7427	PrimaryExpression	25
>7428	Callee	CSize
>7429	Identifier	CSize
>7430	Argument	RUNTIME_CLASS ( CTexWnd )
>7431	CallExpression	RUNTIME_CLASS ( CTexWnd )
>7432	ArgumentList	CTexWnd
>7433	Argument	CTexWnd
>7434	Identifier	CTexWnd
>7435	Callee	RUNTIME_CLASS
>7436	Identifier	RUNTIME_CLASS
>7437	Argument	0
>7438	PrimaryExpression	0
>7439	Argument	1
>7440	PrimaryExpression	1
>7441	Callee	m_wndSplit3 . CreateView
>7442	MemberAccess	m_wndSplit3 . CreateView
>7443	Identifier	CreateView
>7444	Identifier	m_wndSplit3
>7445	ExpressionStatement	 
>7446	CallExpression	m_wndSplit2 . GetPane ( 0 , 2 )
>7447	ArgumentList	0
>7448	Argument	2
>7449	PrimaryExpression	2
>7450	Argument	0
>7451	PrimaryExpression	0
>7452	Callee	m_wndSplit2 . GetPane
>7453	MemberAccess	m_wndSplit2 . GetPane
>7454	Identifier	GetPane
>7455	Identifier	m_wndSplit2
>7456	Statement	 
>7457	Statement	 
>7458	Statement	 
>7459	Statement	 
>7460	Statement	 
>7461	Statement	 
>7462	Statement	 
>7463	ExpressionStatement	 
>7464	CallExpression	m_wndSplit2 . CreateView ( 0 , 2 , RUNTIME_CLASS ( CZWnd ) , CSize ( 25 , 100 ) , pContext )
>7465	ArgumentList	0
>7466	Argument	pContext
>7467	Identifier	pContext
>7468	Argument	CSize ( 25 , 100 )
>7469	CallExpression	CSize ( 25 , 100 )
>7470	ArgumentList	25
>7471	Argument	100
>7472	PrimaryExpression	100
>7473	Argument	25
>7474	PrimaryExpression	25
>7475	Callee	CSize
>7476	Identifier	CSize
>7477	Argument	RUNTIME_CLASS ( CZWnd )
>7478	CallExpression	RUNTIME_CLASS ( CZWnd )
>7479	ArgumentList	CZWnd
>7480	Argument	CZWnd
>7481	Identifier	CZWnd
>7482	Callee	RUNTIME_CLASS
>7483	Identifier	RUNTIME_CLASS
>7484	Argument	2
>7485	PrimaryExpression	2
>7486	Argument	0
>7487	PrimaryExpression	0
>7488	Callee	m_wndSplit2 . CreateView
>7489	MemberAccess	m_wndSplit2 . CreateView
>7490	Identifier	CreateView
>7491	Identifier	m_wndSplit2
>7492	ExpressionStatement	 
>7493	CallExpression	m_pCamWnd -> SetXYFriend ( m_pXYWnd )
>7494	ArgumentList	m_pXYWnd
>7495	Argument	m_pXYWnd
>7496	Identifier	m_pXYWnd
>7497	Callee	m_pCamWnd -> SetXYFriend
>7498	PtrMemberAccess	m_pCamWnd -> SetXYFriend
>7499	Identifier	SetXYFriend
>7500	Identifier	m_pCamWnd
>7501	ExpressionStatement	 
>7502	CallExpression	m_pXYWnd -> SetViewType ( XY )
>7503	ArgumentList	XY
>7504	Argument	XY
>7505	Identifier	XY
>7506	Callee	m_pXYWnd -> SetViewType
>7507	PtrMemberAccess	m_pXYWnd -> SetViewType
>7508	Identifier	SetViewType
>7509	Identifier	m_pXYWnd
>7510	ExpressionStatement	 
>7511	CallExpression	m_wndSplit2 . GetPane ( 0 , 1 )
>7512	ArgumentList	0
>7513	Argument	1
>7514	PrimaryExpression	1
>7515	Argument	0
>7516	PrimaryExpression	0
>7517	Callee	m_wndSplit2 . GetPane
>7518	MemberAccess	m_wndSplit2 . GetPane
>7519	Identifier	GetPane
>7520	Identifier	m_wndSplit2
>7521	Statement	 
>7522	Statement	 
>7523	Statement	 
>7524	Statement	 
>7525	Statement	 
>7526	Statement	 
>7527	Statement	 
>7528	ExpressionStatement	 
>7529	CallExpression	m_wndSplit2 . CreateView ( 0 , 1 , RUNTIME_CLASS ( CXYWnd ) , CSize ( 25 , 100 ) , pContext )
>7530	ArgumentList	0
>7531	Argument	pContext
>7532	Identifier	pContext
>7533	Argument	CSize ( 25 , 100 )
>7534	CallExpression	CSize ( 25 , 100 )
>7535	ArgumentList	25
>7536	Argument	100
>7537	PrimaryExpression	100
>7538	Argument	25
>7539	PrimaryExpression	25
>7540	Callee	CSize
>7541	Identifier	CSize
>7542	Argument	RUNTIME_CLASS ( CXYWnd )
>7543	CallExpression	RUNTIME_CLASS ( CXYWnd )
>7544	ArgumentList	CXYWnd
>7545	Argument	CXYWnd
>7546	Identifier	CXYWnd
>7547	Callee	RUNTIME_CLASS
>7548	Identifier	RUNTIME_CLASS
>7549	Argument	1
>7550	PrimaryExpression	1
>7551	Argument	0
>7552	PrimaryExpression	0
>7553	Callee	m_wndSplit2 . CreateView
>7554	MemberAccess	m_wndSplit2 . CreateView
>7555	Identifier	CreateView
>7556	Identifier	m_wndSplit2
>7557	ExpressionStatement	 
>7558	CallExpression	m_wndSplit3 . GetPane ( 0 , 0 )
>7559	ArgumentList	0
>7560	Argument	0
>7561	PrimaryExpression	0
>7562	Argument	0
>7563	PrimaryExpression	0
>7564	Callee	m_wndSplit3 . GetPane
>7565	MemberAccess	m_wndSplit3 . GetPane
>7566	Identifier	GetPane
>7567	Identifier	m_wndSplit3
>7568	Statement	 
>7569	Statement	 
>7570	Statement	 
>7571	Statement	 
>7572	Statement	 
>7573	Statement	 
>7574	Statement	 
>7575	ExpressionStatement	 
>7576	CallExpression	m_wndSplit3 . CreateView ( 0 , 0 , RUNTIME_CLASS ( CCamWnd ) , CSize ( 25 , 100 ) , pContext )
>7577	ArgumentList	0
>7578	Argument	pContext
>7579	Identifier	pContext
>7580	Argument	CSize ( 25 , 100 )
>7581	CallExpression	CSize ( 25 , 100 )
>7582	ArgumentList	25
>7583	Argument	100
>7584	PrimaryExpression	100
>7585	Argument	25
>7586	PrimaryExpression	25
>7587	Callee	CSize
>7588	Identifier	CSize
>7589	Argument	RUNTIME_CLASS ( CCamWnd )
>7590	CallExpression	RUNTIME_CLASS ( CCamWnd )
>7591	ArgumentList	CCamWnd
>7592	Argument	CCamWnd
>7593	Identifier	CCamWnd
>7594	Callee	RUNTIME_CLASS
>7595	Identifier	RUNTIME_CLASS
>7596	Argument	0
>7597	PrimaryExpression	0
>7598	Argument	0
>7599	PrimaryExpression	0
>7600	Callee	m_wndSplit3 . CreateView
>7601	MemberAccess	m_wndSplit3 . CreateView
>7602	Identifier	CreateView
>7603	Identifier	m_wndSplit3
>7604	IfStatement	if ( g_pEdit )
>7605	ExpressionStatement	 
>7606	AssignmentExpr	g_qeglobals . d_hwndEdit = g_pEdit -> GetSafeHwnd ( )
>7607	CallExpression	g_pEdit -> GetSafeHwnd ( )
>7608	ArgumentList	 
>7609	Callee	g_pEdit -> GetSafeHwnd
>7610	PtrMemberAccess	g_pEdit -> GetSafeHwnd
>7611	Identifier	GetSafeHwnd
>7612	Identifier	g_pEdit
>7613	MemberAccess	g_qeglobals . d_hwndEdit
>7614	Identifier	d_hwndEdit
>7615	Identifier	g_qeglobals
>7616	Condition	 
>7617	Identifier	g_pEdit
>7618	ExpressionStatement	 
>7619	CallExpression	m_wndSplit . GetPane ( 1 , 0 )
>7620	ArgumentList	1
>7621	Argument	0
>7622	PrimaryExpression	0
>7623	Argument	1
>7624	PrimaryExpression	1
>7625	Callee	m_wndSplit . GetPane
>7626	MemberAccess	m_wndSplit . GetPane
>7627	Identifier	GetPane
>7628	Identifier	m_wndSplit
>7629	Statement	 
>7630	Statement	 
>7631	Statement	 
>7632	Statement	 
>7633	Statement	 
>7634	Statement	 
>7635	Statement	 
>7636	ExpressionStatement	 
>7637	CallExpression	m_wndSplit . CreateView ( 1 , 0 , RUNTIME_CLASS ( CEditWnd ) , CSize ( 25 , 100 ) , pContext )
>7638	ArgumentList	1
>7639	Argument	pContext
>7640	Identifier	pContext
>7641	Argument	CSize ( 25 , 100 )
>7642	CallExpression	CSize ( 25 , 100 )
>7643	ArgumentList	25
>7644	Argument	100
>7645	PrimaryExpression	100
>7646	Argument	25
>7647	PrimaryExpression	25
>7648	Callee	CSize
>7649	Identifier	CSize
>7650	Argument	RUNTIME_CLASS ( CEditWnd )
>7651	CallExpression	RUNTIME_CLASS ( CEditWnd )
>7652	ArgumentList	CEditWnd
>7653	Argument	CEditWnd
>7654	Identifier	CEditWnd
>7655	Callee	RUNTIME_CLASS
>7656	Identifier	RUNTIME_CLASS
>7657	Argument	0
>7658	PrimaryExpression	0
>7659	Argument	1
>7660	PrimaryExpression	1
>7661	Callee	m_wndSplit . CreateView
>7662	MemberAccess	m_wndSplit . CreateView
>7663	Identifier	CreateView
>7664	Identifier	m_wndSplit
>7665	ExpressionStatement	 
>7666	CallExpression	m_wndSplit3 . CreateStatic ( & m_wndSplit2 , 2 , 1 )
>7667	ArgumentList	& m_wndSplit2
>7668	Argument	1
>7669	PrimaryExpression	1
>7670	Argument	2
>7671	PrimaryExpression	2
>7672	Argument	& m_wndSplit2
>7673	UnaryOp	& m_wndSplit2
>7674	Identifier	m_wndSplit2
>7675	UnaryOperator	&
>7676	Callee	m_wndSplit3 . CreateStatic
>7677	MemberAccess	m_wndSplit3 . CreateStatic
>7678	Identifier	CreateStatic
>7679	Identifier	m_wndSplit3
>7680	ExpressionStatement	 
>7681	CallExpression	m_wndSplit2 . CreateStatic ( & m_wndSplit , 1 , 3 )
>7682	ArgumentList	& m_wndSplit
>7683	Argument	3
>7684	PrimaryExpression	3
>7685	Argument	1
>7686	PrimaryExpression	1
>7687	Argument	& m_wndSplit
>7688	UnaryOp	& m_wndSplit
>7689	Identifier	m_wndSplit
>7690	UnaryOperator	&
>7691	Callee	m_wndSplit2 . CreateStatic
>7692	MemberAccess	m_wndSplit2 . CreateStatic
>7693	Identifier	CreateStatic
>7694	Identifier	m_wndSplit2
>7695	ExpressionStatement	 
>7696	CallExpression	m_wndSplit . CreateStatic ( this , 2 , 1 )
>7697	ArgumentList	this
>7698	Argument	1
>7699	PrimaryExpression	1
>7700	Argument	2
>7701	PrimaryExpression	2
>7702	Argument	this
>7703	Identifier	this
>7704	Callee	m_wndSplit . CreateStatic
>7705	MemberAccess	m_wndSplit . CreateStatic
>7706	Identifier	CreateStatic
>7707	Identifier	m_wndSplit
>7708	Condition	 
>7709	OrExpression	g_PrefsDlg . m_nView == 0 || g_PrefsDlg . m_nView == 3
>7710	EqualityExpression	g_PrefsDlg . m_nView == 3
>7711	PrimaryExpression	3
>7712	MemberAccess	g_PrefsDlg . m_nView
>7713	Identifier	m_nView
>7714	Identifier	g_PrefsDlg
>7715	EqualityExpression	g_PrefsDlg . m_nView == 0
>7716	PrimaryExpression	0
>7717	MemberAccess	g_PrefsDlg . m_nView
>7718	Identifier	m_nView
>7719	Identifier	g_PrefsDlg
>7720	ExpressionStatement	 
>7721	CallExpression	GetClientRect ( rctParent )
>7722	ArgumentList	rctParent
>7723	Argument	rctParent
>7724	Identifier	rctParent
>7725	Callee	GetClientRect
>7726	Identifier	GetClientRect
>7727	IdentifierDeclStatement	 
>7728	IdentifierDecl	rctParent
>7729	Identifier	rctParent
>7730	IdentifierDeclType	CRect
>7731	IdentifierDeclStatement	 
>7732	IdentifierDecl	rect ( 5 , 25 , 100 , 100 )
>7733	Expression	5 , 25 , 100 , 100
>7734	Expression	25 , 100 , 100
>7735	Expression	100 , 100
>7736	PrimaryExpression	100
>7737	PrimaryExpression	100
>7738	PrimaryExpression	25
>7739	PrimaryExpression	5
>7740	Identifier	rect
>7741	IdentifierDeclType	CRect
>7742	IfStatement	if ( ! LoadWindowPlacement ( GetSafeHwnd ( ) , \"Radiant
>7743	CompoundStatement	 
>7744	ExpressionStatement	 
>7745	CallExpression	LoadWindowState ( GetSafeHwnd ( ) , \"Radiant
>7746	ArgumentList	GetSafeHwnd ( )
>7747	Argument	\"Radiant
>7748	PrimaryExpression	\"Radiant
>7749	Argument	GetSafeHwnd ( )
>7750	CallExpression	GetSafeHwnd ( )
>7751	ArgumentList	 
>7752	Callee	GetSafeHwnd
>7753	Identifier	GetSafeHwnd
>7754	Callee	LoadWindowState
>7755	Identifier	LoadWindowState
>7756	Condition	 
>7757	UnaryOp	! LoadWindowPlacement ( GetSafeHwnd ( ) , \"Radiant
>7758	CallExpression	LoadWindowPlacement ( GetSafeHwnd ( ) , \"Radiant
>7759	ArgumentList	GetSafeHwnd ( )
>7760	Argument	\"Radiant
>7761	PrimaryExpression	\"Radiant
>7762	Argument	GetSafeHwnd ( )
>7763	CallExpression	GetSafeHwnd ( )
>7764	ArgumentList	 
>7765	Callee	GetSafeHwnd
>7766	Identifier	GetSafeHwnd
>7767	Callee	LoadWindowPlacement
>7768	Identifier	LoadWindowPlacement
>7769	UnaryOperator	!
>7770	ExpressionStatement	 
>7771	CallExpression	g_pGroupDlg -> ShowWindow ( SW_SHOW )
>7772	ArgumentList	SW_SHOW
>7773	Argument	SW_SHOW
>7774	Identifier	SW_SHOW
>7775	Callee	g_pGroupDlg -> ShowWindow
>7776	PtrMemberAccess	g_pGroupDlg -> ShowWindow
>7777	Identifier	ShowWindow
>7778	Identifier	g_pGroupDlg
>7779	ExpressionStatement	 
>7780	CallExpression	SetParent ( g_qeglobals . d_hwndGroup , g_qeglobals . d_hwndEntity )
>7781	ArgumentList	g_qeglobals . d_hwndGroup
>7782	Argument	g_qeglobals . d_hwndEntity
>7783	MemberAccess	g_qeglobals . d_hwndEntity
>7784	Identifier	d_hwndEntity
>7785	Identifier	g_qeglobals
>7786	Argument	g_qeglobals . d_hwndGroup
>7787	MemberAccess	g_qeglobals . d_hwndGroup
>7788	Identifier	d_hwndGroup
>7789	Identifier	g_qeglobals
>7790	Callee	SetParent
>7791	Identifier	SetParent
>7792	Statement	 
>7793	ExpressionStatement	 
>7794	AssignmentExpr	g_qeglobals . d_hwndGroup = g_pGroupDlg -> GetSafeHwnd ( )
>7795	CallExpression	g_pGroupDlg -> GetSafeHwnd ( )
>7796	ArgumentList	 
>7797	Callee	g_pGroupDlg -> GetSafeHwnd
>7798	PtrMemberAccess	g_pGroupDlg -> GetSafeHwnd
>7799	Identifier	GetSafeHwnd
>7800	Identifier	g_pGroupDlg
>7801	MemberAccess	g_qeglobals . d_hwndGroup
>7802	Identifier	d_hwndGroup
>7803	Identifier	g_qeglobals
>7804	ExpressionStatement	 
>7805	CallExpression	g_pGroupDlg -> Create ( IDD_DLG_GROUP , this )
>7806	ArgumentList	IDD_DLG_GROUP
>7807	Argument	this
>7808	Identifier	this
>7809	Argument	IDD_DLG_GROUP
>7810	Identifier	IDD_DLG_GROUP
>7811	Callee	g_pGroupDlg -> Create
>7812	PtrMemberAccess	g_pGroupDlg -> Create
>7813	Identifier	Create
>7814	Identifier	g_pGroupDlg
>7815	ExpressionStatement	 
>7816	CallExpression	CreateEntityWindow ( AfxGetInstanceHandle ( ) )
>7817	ArgumentList	AfxGetInstanceHandle ( )
>7818	Argument	AfxGetInstanceHandle ( )
>7819	CallExpression	AfxGetInstanceHandle ( )
>7820	ArgumentList	 
>7821	Callee	AfxGetInstanceHandle
>7822	Identifier	AfxGetInstanceHandle
>7823	Callee	CreateEntityWindow
>7824	Identifier	CreateEntityWindow
>7825	ExpressionStatement	 
>7826	AssignmentExpr	m_nCurrentStyle = g_PrefsDlg . m_nView
>7827	MemberAccess	g_PrefsDlg . m_nView
>7828	Identifier	m_nView
>7829	Identifier	g_PrefsDlg
>7830	Identifier	m_nCurrentStyle
>7831	ExpressionStatement	 
>7832	AssignmentExpr	g_qeglobals . d_hwndStatus = GetMessageBar ( ) -> GetSafeHwnd ( )
>7833	CallExpression	GetMessageBar ( ) -> GetSafeHwnd ( )
>7834	ArgumentList	 
>7835	Callee	GetMessageBar ( ) -> GetSafeHwnd
>7836	PtrMemberAccess	GetMessageBar ( ) -> GetSafeHwnd
>7837	Identifier	GetSafeHwnd
>7838	CallExpression	GetMessageBar ( )
>7839	ArgumentList	 
>7840	Callee	GetMessageBar
>7841	Identifier	GetMessageBar
>7842	MemberAccess	g_qeglobals . d_hwndStatus
>7843	Identifier	d_hwndStatus
>7844	Identifier	g_qeglobals
>7845	ExpressionStatement	 
>7846	AssignmentExpr	g_qeglobals . d_hwndMain = GetSafeHwnd ( )
>7847	CallExpression	GetSafeHwnd ( )
>7848	ArgumentList	 
>7849	Callee	GetSafeHwnd
>7850	Identifier	GetSafeHwnd
>7851	MemberAccess	g_qeglobals . d_hwndMain
>7852	Identifier	d_hwndMain
>7853	Identifier	g_qeglobals
>7969	FunctionDef	CMainFrame 
>7970	ParameterList	UINT nType , int cx , int cy
>7971	Parameter	 
>7972	Identifier	cy
>7973	ParameterType	int
>7974	Parameter	 
>7975	Identifier	cx
>7976	ParameterType	int
>7977	Parameter	 
>7978	Identifier	nType
>7979	ParameterType	UINT
>7980	ReturnType	void
>7981	CompoundStatement	 
>7982	IfStatement	if ( nType == SIZE_RESTORED && m_bSplittersOK && g_rctOld . Width ( ) > 0 )
>7983	CompoundStatement	 
>7984	IfStatement	if ( m_nCurrentStyle == 0 || m_nCurrentStyle == 3 )
>7985	CompoundStatement	 
>7986	ExpressionStatement	 
>7987	CallExpression	m_wndSplit3 . RecalcLayout ( )
>7988	ArgumentList	 
>7989	Callee	m_wndSplit3 . RecalcLayout
>7990	MemberAccess	m_wndSplit3 . RecalcLayout
>7991	Identifier	RecalcLayout
>7992	Identifier	m_wndSplit3
>7993	ExpressionStatement	 
>7994	CallExpression	m_wndSplit2 . RecalcLayout ( )
>7995	ArgumentList	 
>7996	Callee	m_wndSplit2 . RecalcLayout
>7997	MemberAccess	m_wndSplit2 . RecalcLayout
>7998	Identifier	RecalcLayout
>7999	Identifier	m_wndSplit2
>8000	ExpressionStatement	 
>8001	CallExpression	m_wndSplit . RecalcLayout ( )
>8002	ArgumentList	 
>8003	Callee	m_wndSplit . RecalcLayout
>8004	MemberAccess	m_wndSplit . RecalcLayout
>8005	Identifier	RecalcLayout
>8006	Identifier	m_wndSplit
>8007	ExpressionStatement	 
>8008	CallExpression	m_wndSplit3 . SetRowInfo ( 1 , rctParent . Height ( ) * fpc7 , 50 )
>8009	ArgumentList	1
>8010	Argument	50
>8011	PrimaryExpression	50
>8012	Argument	rctParent . Height ( ) * fpc7
>8013	MultiplicativeExpression	rctParent . Height ( ) * fpc7
>8014	Identifier	fpc7
>8015	CallExpression	rctParent . Height ( )
>8016	ArgumentList	 
>8017	Callee	rctParent . Height
>8018	MemberAccess	rctParent . Height
>8019	Identifier	Height
>8020	Identifier	rctParent
>8021	Argument	1
>8022	PrimaryExpression	1
>8023	Callee	m_wndSplit3 . SetRowInfo
>8024	MemberAccess	m_wndSplit3 . SetRowInfo
>8025	Identifier	SetRowInfo
>8026	Identifier	m_wndSplit3
>8027	ExpressionStatement	 
>8028	CallExpression	m_wndSplit3 . SetRowInfo ( 0 , rctParent . Height ( ) * fpc6 , 50 )
>8029	ArgumentList	0
>8030	Argument	50
>8031	PrimaryExpression	50
>8032	Argument	rctParent . Height ( ) * fpc6
>8033	MultiplicativeExpression	rctParent . Height ( ) * fpc6
>8034	Identifier	fpc6
>8035	CallExpression	rctParent . Height ( )
>8036	ArgumentList	 
>8037	Callee	rctParent . Height
>8038	MemberAccess	rctParent . Height
>8039	Identifier	Height
>8040	Identifier	rctParent
>8041	Argument	0
>8042	PrimaryExpression	0
>8043	Callee	m_wndSplit3 . SetRowInfo
>8044	MemberAccess	m_wndSplit3 . SetRowInfo
>8045	Identifier	SetRowInfo
>8046	Identifier	m_wndSplit3
>8047	ExpressionStatement	 
>8048	CallExpression	m_wndSplit2 . SetColumnInfo ( 2 , rctParent . Width ( ) * fpc5 , nMin2 )
>8049	ArgumentList	2
>8050	Argument	nMin2
>8051	Identifier	nMin2
>8052	Argument	rctParent . Width ( ) * fpc5
>8053	MultiplicativeExpression	rctParent . Width ( ) * fpc5
>8054	Identifier	fpc5
>8055	CallExpression	rctParent . Width ( )
>8056	ArgumentList	 
>8057	Callee	rctParent . Width
>8058	MemberAccess	rctParent . Width
>8059	Identifier	Width
>8060	Identifier	rctParent
>8061	Argument	2
>8062	PrimaryExpression	2
>8063	Callee	m_wndSplit2 . SetColumnInfo
>8064	MemberAccess	m_wndSplit2 . SetColumnInfo
>8065	Identifier	SetColumnInfo
>8066	Identifier	m_wndSplit2
>8067	ExpressionStatement	 
>8068	CallExpression	m_wndSplit2 . SetColumnInfo ( 1 , rctParent . Width ( ) * fpc4 , 100 )
>8069	ArgumentList	1
>8070	Argument	100
>8071	PrimaryExpression	100
>8072	Argument	rctParent . Width ( ) * fpc4
>8073	MultiplicativeExpression	rctParent . Width ( ) * fpc4
>8074	Identifier	fpc4
>8075	CallExpression	rctParent . Width ( )
>8076	ArgumentList	 
>8077	Callee	rctParent . Width
>8078	MemberAccess	rctParent . Width
>8079	Identifier	Width
>8080	Identifier	rctParent
>8081	Argument	1
>8082	PrimaryExpression	1
>8083	Callee	m_wndSplit2 . SetColumnInfo
>8084	MemberAccess	m_wndSplit2 . SetColumnInfo
>8085	Identifier	SetColumnInfo
>8086	Identifier	m_wndSplit2
>8087	ExpressionStatement	 
>8088	CallExpression	m_wndSplit2 . SetColumnInfo ( 0 , rctParent . Width ( ) * fpc3 , nMin1 )
>8089	ArgumentList	0
>8090	Argument	nMin1
>8091	Identifier	nMin1
>8092	Argument	rctParent . Width ( ) * fpc3
>8093	MultiplicativeExpression	rctParent . Width ( ) * fpc3
>8094	Identifier	fpc3
>8095	CallExpression	rctParent . Width ( )
>8096	ArgumentList	 
>8097	Callee	rctParent . Width
>8098	MemberAccess	rctParent . Width
>8099	Identifier	Width
>8100	Identifier	rctParent
>8101	Argument	0
>8102	PrimaryExpression	0
>8103	Callee	m_wndSplit2 . SetColumnInfo
>8104	MemberAccess	m_wndSplit2 . SetColumnInfo
>8105	Identifier	SetColumnInfo
>8106	Identifier	m_wndSplit2
>8107	IdentifierDeclStatement	 
>8108	IdentifierDecl	nMin2 = ( nMin1 == 10 ) ? 25 
>8109	AssignmentExpr	nMin2 = ( nMin1 == 10 ) ? 25 
>8110	ConditionalExpression	( nMin1 == 10 ) ? 25 
>8111	PrimaryExpression	10
>8112	PrimaryExpression	25
>8113	Condition	nMin1 == 10
>8114	EqualityExpression	nMin1 == 10
>8115	PrimaryExpression	10
>8116	Identifier	nMin1
>8117	Identifier	nMin2
>8118	Identifier	nMin2
>8119	IdentifierDeclType	int
>8120	IdentifierDeclStatement	 
>8121	IdentifierDecl	nMin1 = ( m_nCurrentStyle == 0 ) ? 10 
>8122	AssignmentExpr	nMin1 = ( m_nCurrentStyle == 0 ) ? 10 
>8123	ConditionalExpression	( m_nCurrentStyle == 0 ) ? 10 
>8124	PrimaryExpression	25
>8125	PrimaryExpression	10
>8126	Condition	m_nCurrentStyle == 0
>8127	EqualityExpression	m_nCurrentStyle == 0
>8128	PrimaryExpression	0
>8129	Identifier	m_nCurrentStyle
>8130	Identifier	nMin1
>8131	Identifier	nMin1
>8132	IdentifierDeclType	int
>8133	ExpressionStatement	 
>8134	CallExpression	m_wndSplit . SetRowInfo ( 1 , rctParent . Height ( ) * fpc2 , 25 )
>8135	ArgumentList	1
>8136	Argument	25
>8137	PrimaryExpression	25
>8138	Argument	rctParent . Height ( ) * fpc2
>8139	MultiplicativeExpression	rctParent . Height ( ) * fpc2
>8140	Identifier	fpc2
>8141	CallExpression	rctParent . Height ( )
>8142	ArgumentList	 
>8143	Callee	rctParent . Height
>8144	MemberAccess	rctParent . Height
>8145	Identifier	Height
>8146	Identifier	rctParent
>8147	Argument	1
>8148	PrimaryExpression	1
>8149	Callee	m_wndSplit . SetRowInfo
>8150	MemberAccess	m_wndSplit . SetRowInfo
>8151	Identifier	SetRowInfo
>8152	Identifier	m_wndSplit
>8153	ExpressionStatement	 
>8154	CallExpression	m_wndSplit . SetRowInfo ( 0 , rctParent . Height ( ) * fpc1 , 100 )
>8155	ArgumentList	0
>8156	Argument	100
>8157	PrimaryExpression	100
>8158	Argument	rctParent . Height ( ) * fpc1
>8159	MultiplicativeExpression	rctParent . Height ( ) * fpc1
>8160	Identifier	fpc1
>8161	CallExpression	rctParent . Height ( )
>8162	ArgumentList	 
>8163	Callee	rctParent . Height
>8164	MemberAccess	rctParent . Height
>8165	Identifier	Height
>8166	Identifier	rctParent
>8167	Argument	0
>8168	PrimaryExpression	0
>8169	Callee	m_wndSplit . SetRowInfo
>8170	MemberAccess	m_wndSplit . SetRowInfo
>8171	Identifier	SetRowInfo
>8172	Identifier	m_wndSplit
>8173	IdentifierDeclStatement	 
>8174	IdentifierDecl	fpc7 = ( float ) spinfo . m_nCur / g_rctOld . Height ( )
>8175	AssignmentExpr	fpc7 = ( float ) spinfo . m_nCur / g_rctOld . Height ( )
>8176	MultiplicativeExpression	( float ) spinfo . m_nCur / g_rctOld . Height ( )
>8177	CallExpression	g_rctOld . Height ( )
>8178	ArgumentList	 
>8179	Callee	g_rctOld . Height
>8180	MemberAccess	g_rctOld . Height
>8181	Identifier	Height
>8182	Identifier	g_rctOld
>8183	CastExpression	( float ) spinfo . m_nCur
>8184	MemberAccess	spinfo . m_nCur
>8185	Identifier	m_nCur
>8186	Identifier	spinfo
>8187	CastTarget	float
>8188	Identifier	fpc7
>8189	Identifier	fpc7
>8190	IdentifierDeclType	float
>8191	ExpressionStatement	 
>8192	CallExpression	m_wndSplit3 . GetRowInfo ( 1 , spinfo . m_nCur , spinfo . m_nMin )
>8193	ArgumentList	1
>8194	Argument	spinfo . m_nMin
>8195	MemberAccess	spinfo . m_nMin
>8196	Identifier	m_nMin
>8197	Identifier	spinfo
>8198	Argument	spinfo . m_nCur
>8199	MemberAccess	spinfo . m_nCur
>8200	Identifier	m_nCur
>8201	Identifier	spinfo
>8202	Argument	1
>8203	PrimaryExpression	1
>8204	Callee	m_wndSplit3 . GetRowInfo
>8205	MemberAccess	m_wndSplit3 . GetRowInfo
>8206	Identifier	GetRowInfo
>8207	Identifier	m_wndSplit3
>8208	IdentifierDeclStatement	 
>8209	IdentifierDecl	fpc6 = ( float ) spinfo . m_nCur / g_rctOld . Height ( )
>8210	AssignmentExpr	fpc6 = ( float ) spinfo . m_nCur / g_rctOld . Height ( )
>8211	MultiplicativeExpression	( float ) spinfo . m_nCur / g_rctOld . Height ( )
>8212	CallExpression	g_rctOld . Height ( )
>8213	ArgumentList	 
>8214	Callee	g_rctOld . Height
>8215	MemberAccess	g_rctOld . Height
>8216	Identifier	Height
>8217	Identifier	g_rctOld
>8218	CastExpression	( float ) spinfo . m_nCur
>8219	MemberAccess	spinfo . m_nCur
>8220	Identifier	m_nCur
>8221	Identifier	spinfo
>8222	CastTarget	float
>8223	Identifier	fpc6
>8224	Identifier	fpc6
>8225	IdentifierDeclType	float
>8226	ExpressionStatement	 
>8227	CallExpression	m_wndSplit3 . GetRowInfo ( 0 , spinfo . m_nCur , spinfo . m_nMin )
>8228	ArgumentList	0
>8229	Argument	spinfo . m_nMin
>8230	MemberAccess	spinfo . m_nMin
>8231	Identifier	m_nMin
>8232	Identifier	spinfo
>8233	Argument	spinfo . m_nCur
>8234	MemberAccess	spinfo . m_nCur
>8235	Identifier	m_nCur
>8236	Identifier	spinfo
>8237	Argument	0
>8238	PrimaryExpression	0
>8239	Callee	m_wndSplit3 . GetRowInfo
>8240	MemberAccess	m_wndSplit3 . GetRowInfo
>8241	Identifier	GetRowInfo
>8242	Identifier	m_wndSplit3
>8243	IdentifierDeclStatement	 
>8244	IdentifierDecl	fpc5 = ( float ) spinfo . m_nCur / g_rctOld . Width ( )
>8245	AssignmentExpr	fpc5 = ( float ) spinfo . m_nCur / g_rctOld . Width ( )
>8246	MultiplicativeExpression	( float ) spinfo . m_nCur / g_rctOld . Width ( )
>8247	CallExpression	g_rctOld . Width ( )
>8248	ArgumentList	 
>8249	Callee	g_rctOld . Width
>8250	MemberAccess	g_rctOld . Width
>8251	Identifier	Width
>8252	Identifier	g_rctOld
>8253	CastExpression	( float ) spinfo . m_nCur
>8254	MemberAccess	spinfo . m_nCur
>8255	Identifier	m_nCur
>8256	Identifier	spinfo
>8257	CastTarget	float
>8258	Identifier	fpc5
>8259	Identifier	fpc5
>8260	IdentifierDeclType	float
>8261	ExpressionStatement	 
>8262	CallExpression	m_wndSplit2 . GetColumnInfo ( 2 , spinfo . m_nCur , spinfo . m_nMin )
>8263	ArgumentList	2
>8264	Argument	spinfo . m_nMin
>8265	MemberAccess	spinfo . m_nMin
>8266	Identifier	m_nMin
>8267	Identifier	spinfo
>8268	Argument	spinfo . m_nCur
>8269	MemberAccess	spinfo . m_nCur
>8270	Identifier	m_nCur
>8271	Identifier	spinfo
>8272	Argument	2
>8273	PrimaryExpression	2
>8274	Callee	m_wndSplit2 . GetColumnInfo
>8275	MemberAccess	m_wndSplit2 . GetColumnInfo
>8276	Identifier	GetColumnInfo
>8277	Identifier	m_wndSplit2
>8278	IdentifierDeclStatement	 
>8279	IdentifierDecl	fpc4 = ( float ) spinfo . m_nCur / g_rctOld . Width ( )
>8280	AssignmentExpr	fpc4 = ( float ) spinfo . m_nCur / g_rctOld . Width ( )
>8281	MultiplicativeExpression	( float ) spinfo . m_nCur / g_rctOld . Width ( )
>8282	CallExpression	g_rctOld . Width ( )
>8283	ArgumentList	 
>8284	Callee	g_rctOld . Width
>8285	MemberAccess	g_rctOld . Width
>8286	Identifier	Width
>8287	Identifier	g_rctOld
>8288	CastExpression	( float ) spinfo . m_nCur
>8289	MemberAccess	spinfo . m_nCur
>8290	Identifier	m_nCur
>8291	Identifier	spinfo
>8292	CastTarget	float
>8293	Identifier	fpc4
>8294	Identifier	fpc4
>8295	IdentifierDeclType	float
>8296	ExpressionStatement	 
>8297	CallExpression	m_wndSplit2 . GetColumnInfo ( 1 , spinfo . m_nCur , spinfo . m_nMin )
>8298	ArgumentList	1
>8299	Argument	spinfo . m_nMin
>8300	MemberAccess	spinfo . m_nMin
>8301	Identifier	m_nMin
>8302	Identifier	spinfo
>8303	Argument	spinfo . m_nCur
>8304	MemberAccess	spinfo . m_nCur
>8305	Identifier	m_nCur
>8306	Identifier	spinfo
>8307	Argument	1
>8308	PrimaryExpression	1
>8309	Callee	m_wndSplit2 . GetColumnInfo
>8310	MemberAccess	m_wndSplit2 . GetColumnInfo
>8311	Identifier	GetColumnInfo
>8312	Identifier	m_wndSplit2
>8313	IdentifierDeclStatement	 
>8314	IdentifierDecl	fpc3 = ( float ) spinfo . m_nCur / g_rctOld . Width ( )
>8315	AssignmentExpr	fpc3 = ( float ) spinfo . m_nCur / g_rctOld . Width ( )
>8316	MultiplicativeExpression	( float ) spinfo . m_nCur / g_rctOld . Width ( )
>8317	CallExpression	g_rctOld . Width ( )
>8318	ArgumentList	 
>8319	Callee	g_rctOld . Width
>8320	MemberAccess	g_rctOld . Width
>8321	Identifier	Width
>8322	Identifier	g_rctOld
>8323	CastExpression	( float ) spinfo . m_nCur
>8324	MemberAccess	spinfo . m_nCur
>8325	Identifier	m_nCur
>8326	Identifier	spinfo
>8327	CastTarget	float
>8328	Identifier	fpc3
>8329	Identifier	fpc3
>8330	IdentifierDeclType	float
>8331	ExpressionStatement	 
>8332	CallExpression	m_wndSplit2 . GetColumnInfo ( 0 , spinfo . m_nCur , spinfo . m_nMin )
>8333	ArgumentList	0
>8334	Argument	spinfo . m_nMin
>8335	MemberAccess	spinfo . m_nMin
>8336	Identifier	m_nMin
>8337	Identifier	spinfo
>8338	Argument	spinfo . m_nCur
>8339	MemberAccess	spinfo . m_nCur
>8340	Identifier	m_nCur
>8341	Identifier	spinfo
>8342	Argument	0
>8343	PrimaryExpression	0
>8344	Callee	m_wndSplit2 . GetColumnInfo
>8345	MemberAccess	m_wndSplit2 . GetColumnInfo
>8346	Identifier	GetColumnInfo
>8347	Identifier	m_wndSplit2
>8348	IdentifierDeclStatement	 
>8349	IdentifierDecl	fpc2 = ( float ) spinfo . m_nCur / g_rctOld . Height ( )
>8350	AssignmentExpr	fpc2 = ( float ) spinfo . m_nCur / g_rctOld . Height ( )
>8351	MultiplicativeExpression	( float ) spinfo . m_nCur / g_rctOld . Height ( )
>8352	CallExpression	g_rctOld . Height ( )
>8353	ArgumentList	 
>8354	Callee	g_rctOld . Height
>8355	MemberAccess	g_rctOld . Height
>8356	Identifier	Height
>8357	Identifier	g_rctOld
>8358	CastExpression	( float ) spinfo . m_nCur
>8359	MemberAccess	spinfo . m_nCur
>8360	Identifier	m_nCur
>8361	Identifier	spinfo
>8362	CastTarget	float
>8363	Identifier	fpc2
>8364	Identifier	fpc2
>8365	IdentifierDeclType	float
>8366	ExpressionStatement	 
>8367	CallExpression	m_wndSplit . GetRowInfo ( 1 , spinfo . m_nCur , spinfo . m_nMin )
>8368	ArgumentList	1
>8369	Argument	spinfo . m_nMin
>8370	MemberAccess	spinfo . m_nMin
>8371	Identifier	m_nMin
>8372	Identifier	spinfo
>8373	Argument	spinfo . m_nCur
>8374	MemberAccess	spinfo . m_nCur
>8375	Identifier	m_nCur
>8376	Identifier	spinfo
>8377	Argument	1
>8378	PrimaryExpression	1
>8379	Callee	m_wndSplit . GetRowInfo
>8380	MemberAccess	m_wndSplit . GetRowInfo
>8381	Identifier	GetRowInfo
>8382	Identifier	m_wndSplit
>8383	IdentifierDeclStatement	 
>8384	IdentifierDecl	fpc1 = ( float ) spinfo . m_nCur / g_rctOld . Height ( )
>8385	AssignmentExpr	fpc1 = ( float ) spinfo . m_nCur / g_rctOld . Height ( )
>8386	MultiplicativeExpression	( float ) spinfo . m_nCur / g_rctOld . Height ( )
>8387	CallExpression	g_rctOld . Height ( )
>8388	ArgumentList	 
>8389	Callee	g_rctOld . Height
>8390	MemberAccess	g_rctOld . Height
>8391	Identifier	Height
>8392	Identifier	g_rctOld
>8393	CastExpression	( float ) spinfo . m_nCur
>8394	MemberAccess	spinfo . m_nCur
>8395	Identifier	m_nCur
>8396	Identifier	spinfo
>8397	CastTarget	float
>8398	Identifier	fpc1
>8399	Identifier	fpc1
>8400	IdentifierDeclType	float
>8401	ExpressionStatement	 
>8402	CallExpression	m_wndSplit . GetRowInfo ( 0 , spinfo . m_nCur , spinfo . m_nMin )
>8403	ArgumentList	0
>8404	Argument	spinfo . m_nMin
>8405	MemberAccess	spinfo . m_nMin
>8406	Identifier	m_nMin
>8407	Identifier	spinfo
>8408	Argument	spinfo . m_nCur
>8409	MemberAccess	spinfo . m_nCur
>8410	Identifier	m_nCur
>8411	Identifier	spinfo
>8412	Argument	0
>8413	PrimaryExpression	0
>8414	Callee	m_wndSplit . GetRowInfo
>8415	MemberAccess	m_wndSplit . GetRowInfo
>8416	Identifier	GetRowInfo
>8417	Identifier	m_wndSplit
>8418	IdentifierDeclStatement	 
>8419	IdentifierDecl	spinfo
>8420	Identifier	spinfo
>8421	IdentifierDeclType	SplitInfo
>8422	Condition	 
>8423	OrExpression	m_nCurrentStyle == 0 || m_nCurrentStyle == 3
>8424	EqualityExpression	m_nCurrentStyle == 3
>8425	PrimaryExpression	3
>8426	Identifier	m_nCurrentStyle
>8427	EqualityExpression	m_nCurrentStyle == 0
>8428	PrimaryExpression	0
>8429	Identifier	m_nCurrentStyle
>8430	Condition	 
>8431	AndExpression	nType == SIZE_RESTORED && m_bSplittersOK && g_rctOld . Width ( ) > 0
>8432	AndExpression	m_bSplittersOK && g_rctOld . Width ( ) > 0
>8433	RelationalExpression	g_rctOld . Width ( ) > 0
>8434	PrimaryExpression	0
>8435	CallExpression	g_rctOld . Width ( )
>8436	ArgumentList	 
>8437	Callee	g_rctOld . Width
>8438	MemberAccess	g_rctOld . Width
>8439	Identifier	Width
>8440	Identifier	g_rctOld
>8441	Identifier	m_bSplittersOK
>8442	EqualityExpression	nType == SIZE_RESTORED
>8443	Identifier	SIZE_RESTORED
>8444	Identifier	nType
>8445	IfStatement	if ( m_wndStatusBar . GetSafeHwnd ( ) )
>8446	CompoundStatement	 
>8447	ExpressionStatement	 
>8448	CallExpression	m_wndStatusBar . SetPaneInfo ( 5 , nID , nStyle , rctParent . Width ( ) * .01 )
>8449	ArgumentList	5
>8450	Argument	rctParent . Width ( ) * .01
>8451	MultiplicativeExpression	rctParent . Width ( ) * .01
>8452	PrimaryExpression	.01
>8453	CallExpression	rctParent . Width ( )
>8454	ArgumentList	 
>8455	Callee	rctParent . Width
>8456	MemberAccess	rctParent . Width
>8457	Identifier	Width
>8458	Identifier	rctParent
>8459	Argument	nStyle
>8460	Identifier	nStyle
>8461	Argument	nID
>8462	Identifier	nID
>8463	Argument	5
>8464	PrimaryExpression	5
>8465	Callee	m_wndStatusBar . SetPaneInfo
>8466	MemberAccess	m_wndStatusBar . SetPaneInfo
>8467	Identifier	SetPaneInfo
>8468	Identifier	m_wndStatusBar
>8469	ExpressionStatement	 
>8470	CallExpression	m_wndStatusBar . GetPaneInfo ( 5 , nID , nStyle , nWidth )
>8471	ArgumentList	5
>8472	Argument	nWidth
>8473	Identifier	nWidth
>8474	Argument	nStyle
>8475	Identifier	nStyle
>8476	Argument	nID
>8477	Identifier	nID
>8478	Argument	5
>8479	PrimaryExpression	5
>8480	Callee	m_wndStatusBar . GetPaneInfo
>8481	MemberAccess	m_wndStatusBar . GetPaneInfo
>8482	Identifier	GetPaneInfo
>8483	Identifier	m_wndStatusBar
>8484	ExpressionStatement	 
>8485	CallExpression	m_wndStatusBar . SetPaneInfo ( 4 , nID , nStyle , rctParent . Width ( ) * .13 )
>8486	ArgumentList	4
>8487	Argument	rctParent . Width ( ) * .13
>8488	MultiplicativeExpression	rctParent . Width ( ) * .13
>8489	PrimaryExpression	.13
>8490	CallExpression	rctParent . Width ( )
>8491	ArgumentList	 
>8492	Callee	rctParent . Width
>8493	MemberAccess	rctParent . Width
>8494	Identifier	Width
>8495	Identifier	rctParent
>8496	Argument	nStyle
>8497	Identifier	nStyle
>8498	Argument	nID
>8499	Identifier	nID
>8500	Argument	4
>8501	PrimaryExpression	4
>8502	Callee	m_wndStatusBar . SetPaneInfo
>8503	MemberAccess	m_wndStatusBar . SetPaneInfo
>8504	Identifier	SetPaneInfo
>8505	Identifier	m_wndStatusBar
>8506	ExpressionStatement	 
>8507	CallExpression	m_wndStatusBar . GetPaneInfo ( 4 , nID , nStyle , nWidth )
>8508	ArgumentList	4
>8509	Argument	nWidth
>8510	Identifier	nWidth
>8511	Argument	nStyle
>8512	Identifier	nStyle
>8513	Argument	nID
>8514	Identifier	nID
>8515	Argument	4
>8516	PrimaryExpression	4
>8517	Callee	m_wndStatusBar . GetPaneInfo
>8518	MemberAccess	m_wndStatusBar . GetPaneInfo
>8519	Identifier	GetPaneInfo
>8520	Identifier	m_wndStatusBar
>8521	ExpressionStatement	 
>8522	CallExpression	m_wndStatusBar . SetPaneInfo ( 3 , nID , nStyle , rctParent . Width ( ) * .19 )
>8523	ArgumentList	3
>8524	Argument	rctParent . Width ( ) * .19
>8525	MultiplicativeExpression	rctParent . Width ( ) * .19
>8526	PrimaryExpression	.19
>8527	CallExpression	rctParent . Width ( )
>8528	ArgumentList	 
>8529	Callee	rctParent . Width
>8530	MemberAccess	rctParent . Width
>8531	Identifier	Width
>8532	Identifier	rctParent
>8533	Argument	nStyle
>8534	Identifier	nStyle
>8535	Argument	nID
>8536	Identifier	nID
>8537	Argument	3
>8538	PrimaryExpression	3
>8539	Callee	m_wndStatusBar . SetPaneInfo
>8540	MemberAccess	m_wndStatusBar . SetPaneInfo
>8541	Identifier	SetPaneInfo
>8542	Identifier	m_wndStatusBar
>8543	ExpressionStatement	 
>8544	CallExpression	m_wndStatusBar . GetPaneInfo ( 3 , nID , nStyle , nWidth )
>8545	ArgumentList	3
>8546	Argument	nWidth
>8547	Identifier	nWidth
>8548	Argument	nStyle
>8549	Identifier	nStyle
>8550	Argument	nID
>8551	Identifier	nID
>8552	Argument	3
>8553	PrimaryExpression	3
>8554	Callee	m_wndStatusBar . GetPaneInfo
>8555	MemberAccess	m_wndStatusBar . GetPaneInfo
>8556	Identifier	GetPaneInfo
>8557	Identifier	m_wndStatusBar
>8558	ExpressionStatement	 
>8559	CallExpression	m_wndStatusBar . SetPaneInfo ( 2 , nID , nStyle , rctParent . Width ( ) * .19 )
>8560	ArgumentList	2
>8561	Argument	rctParent . Width ( ) * .19
>8562	MultiplicativeExpression	rctParent . Width ( ) * .19
>8563	PrimaryExpression	.19
>8564	CallExpression	rctParent . Width ( )
>8565	ArgumentList	 
>8566	Callee	rctParent . Width
>8567	MemberAccess	rctParent . Width
>8568	Identifier	Width
>8569	Identifier	rctParent
>8570	Argument	nStyle
>8571	Identifier	nStyle
>8572	Argument	nID
>8573	Identifier	nID
>8574	Argument	2
>8575	PrimaryExpression	2
>8576	Callee	m_wndStatusBar . SetPaneInfo
>8577	MemberAccess	m_wndStatusBar . SetPaneInfo
>8578	Identifier	SetPaneInfo
>8579	Identifier	m_wndStatusBar
>8580	ExpressionStatement	 
>8581	CallExpression	m_wndStatusBar . GetPaneInfo ( 2 , nID , nStyle , nWidth )
>8582	ArgumentList	2
>8583	Argument	nWidth
>8584	Identifier	nWidth
>8585	Argument	nStyle
>8586	Identifier	nStyle
>8587	Argument	nID
>8588	Identifier	nID
>8589	Argument	2
>8590	PrimaryExpression	2
>8591	Callee	m_wndStatusBar . GetPaneInfo
>8592	MemberAccess	m_wndStatusBar . GetPaneInfo
>8593	Identifier	GetPaneInfo
>8594	Identifier	m_wndStatusBar
>8595	ExpressionStatement	 
>8596	CallExpression	m_wndStatusBar . SetPaneInfo ( 1 , nID , nStyle , rctParent . Width ( ) * .19 )
>8597	ArgumentList	1
>8598	Argument	rctParent . Width ( ) * .19
>8599	MultiplicativeExpression	rctParent . Width ( ) * .19
>8600	PrimaryExpression	.19
>8601	CallExpression	rctParent . Width ( )
>8602	ArgumentList	 
>8603	Callee	rctParent . Width
>8604	MemberAccess	rctParent . Width
>8605	Identifier	Width
>8606	Identifier	rctParent
>8607	Argument	nStyle
>8608	Identifier	nStyle
>8609	Argument	nID
>8610	Identifier	nID
>8611	Argument	1
>8612	PrimaryExpression	1
>8613	Callee	m_wndStatusBar . SetPaneInfo
>8614	MemberAccess	m_wndStatusBar . SetPaneInfo
>8615	Identifier	SetPaneInfo
>8616	Identifier	m_wndStatusBar
>8617	ExpressionStatement	 
>8618	CallExpression	m_wndStatusBar . GetPaneInfo ( 1 , nID , nStyle , nWidth )
>8619	ArgumentList	1
>8620	Argument	nWidth
>8621	Identifier	nWidth
>8622	Argument	nStyle
>8623	Identifier	nStyle
>8624	Argument	nID
>8625	Identifier	nID
>8626	Argument	1
>8627	PrimaryExpression	1
>8628	Callee	m_wndStatusBar . GetPaneInfo
>8629	MemberAccess	m_wndStatusBar . GetPaneInfo
>8630	Identifier	GetPaneInfo
>8631	Identifier	m_wndStatusBar
>8632	ExpressionStatement	 
>8633	CallExpression	m_wndStatusBar . SetPaneInfo ( 0 , nID , nStyle , rctParent . Width ( ) * .19 )
>8634	ArgumentList	0
>8635	Argument	rctParent . Width ( ) * .19
>8636	MultiplicativeExpression	rctParent . Width ( ) * .19
>8637	PrimaryExpression	.19
>8638	CallExpression	rctParent . Width ( )
>8639	ArgumentList	 
>8640	Callee	rctParent . Width
>8641	MemberAccess	rctParent . Width
>8642	Identifier	Width
>8643	Identifier	rctParent
>8644	Argument	nStyle
>8645	Identifier	nStyle
>8646	Argument	nID
>8647	Identifier	nID
>8648	Argument	0
>8649	PrimaryExpression	0
>8650	Callee	m_wndStatusBar . SetPaneInfo
>8651	MemberAccess	m_wndStatusBar . SetPaneInfo
>8652	Identifier	SetPaneInfo
>8653	Identifier	m_wndStatusBar
>8654	ExpressionStatement	 
>8655	CallExpression	m_wndStatusBar . GetPaneInfo ( 0 , nID , nStyle , nWidth )
>8656	ArgumentList	0
>8657	Argument	nWidth
>8658	Identifier	nWidth
>8659	Argument	nStyle
>8660	Identifier	nStyle
>8661	Argument	nID
>8662	Identifier	nID
>8663	Argument	0
>8664	PrimaryExpression	0
>8665	Callee	m_wndStatusBar . GetPaneInfo
>8666	MemberAccess	m_wndStatusBar . GetPaneInfo
>8667	Identifier	GetPaneInfo
>8668	Identifier	m_wndStatusBar
>8669	Condition	 
>8670	CallExpression	m_wndStatusBar . GetSafeHwnd ( )
>8671	ArgumentList	 
>8672	Callee	m_wndStatusBar . GetSafeHwnd
>8673	MemberAccess	m_wndStatusBar . GetSafeHwnd
>8674	Identifier	GetSafeHwnd
>8675	Identifier	m_wndStatusBar
>8676	IdentifierDeclStatement	 
>8677	IdentifierDecl	nWidth
>8678	Identifier	nWidth
>8679	IdentifierDeclType	int
>8680	IdentifierDeclStatement	 
>8681	IdentifierDecl	nStyle
>8682	Identifier	nStyle
>8683	IdentifierDeclType	UINT
>8684	IdentifierDeclStatement	 
>8685	IdentifierDecl	nID
>8686	Identifier	nID
>8687	IdentifierDeclType	UINT
>8688	ExpressionStatement	 
>8689	CallExpression	GetClientRect ( rctParent )
>8690	ArgumentList	rctParent
>8691	Argument	rctParent
>8692	Identifier	rctParent
>8693	Callee	GetClientRect
>8694	Identifier	GetClientRect
>8695	IdentifierDeclStatement	 
>8696	IdentifierDecl	rctParent
>8697	Identifier	rctParent
>8698	IdentifierDeclType	CRect
>8699	ExpressionStatement	 
>8700	CallExpression	CFrameWnd 
>8701	ArgumentList	nType
>8702	Argument	cy
>8703	Identifier	cy
>8704	Argument	cx
>8705	Identifier	cx
>8706	Argument	nType
>8707	Identifier	nType
>8708	Callee	CFrameWnd 
>8709	Identifier	CFrameWnd 
>8751	FunctionDef	CMainFrame 
>8752	ParameterList	 
>8753	ReturnType	void
>8754	CompoundStatement	 
>8755	IfStatement	if ( m_bCamPreview )
>8756	ElseStatement	else
>8757	ExpressionStatement	 
>8758	AssignmentExpr	m_bCamPreview = true
>8759	Identifier	true
>8760	Identifier	m_bCamPreview
>8761	ExpressionStatement	 
>8762	AssignmentExpr	m_bCamPreview = false
>8763	Identifier	false
>8764	Identifier	m_bCamPreview
>8765	Condition	 
>8766	Identifier	m_bCamPreview
>8773	FunctionDef	CMainFrame 
>8774	ParameterList	 
>8775	ReturnType	void
>8776	CompoundStatement	 
>8780	FunctionDef	CMainFrame 
>8781	ParameterList	 
>8782	ReturnType	void
>8783	CompoundStatement	 
>8784	ExpressionStatement	 
>8785	CallExpression	PostMessage ( WM_CLOSE , 0 , 0L )
>8786	ArgumentList	WM_CLOSE
>8787	Argument	0L
>8788	PrimaryExpression	0L
>8789	Argument	0
>8790	PrimaryExpression	0
>8791	Argument	WM_CLOSE
>8792	Identifier	WM_CLOSE
>8793	Callee	PostMessage
>8794	Identifier	PostMessage
>8799	FunctionDef	CMainFrame 
>8800	ParameterList	 
>8801	ReturnType	void
>8802	CompoundStatement	 
>8803	IfStatement	if ( ConfirmModified ( ) )
>8804	ExpressionStatement	 
>8805	CallExpression	ProjectDialog ( )
>8806	ArgumentList	 
>8807	Callee	ProjectDialog
>8808	Identifier	ProjectDialog
>8809	Condition	 
>8810	CallExpression	ConfirmModified ( )
>8811	ArgumentList	 
>8812	Callee	ConfirmModified
>8813	Identifier	ConfirmModified
>8818	FunctionDef	CMainFrame 
>8819	ParameterList	 
>8820	ReturnType	void
>8821	CompoundStatement	 
>8822	IfStatement	if ( ConfirmModified ( ) )
>8823	ExpressionStatement	 
>8824	CallExpression	Map_New ( )
>8825	ArgumentList	 
>8826	Callee	Map_New
>8827	Identifier	Map_New
>8828	Condition	 
>8829	CallExpression	ConfirmModified ( )
>8830	ArgumentList	 
>8831	Callee	ConfirmModified
>8832	Identifier	ConfirmModified
>8837	FunctionDef	CMainFrame 
>8838	ParameterList	 
>8839	ReturnType	void
>8840	CompoundStatement	 
>8841	IfStatement	if ( ConfirmModified ( ) )
>8842	ExpressionStatement	 
>8843	CallExpression	OpenDialog ( )
>8844	ArgumentList	 
>8845	Callee	OpenDialog
>8846	Identifier	OpenDialog
>8847	Condition	 
>8848	CallExpression	ConfirmModified ( )
>8849	ArgumentList	 
>8850	Callee	ConfirmModified
>8851	Identifier	ConfirmModified
>8856	FunctionDef	CMainFrame 
>8857	ParameterList	 
>8858	ReturnType	void
>8859	CompoundStatement	 
>8860	IfStatement	if ( g_qeglobals . d_pointfile_display_list )
>8861	ElseStatement	else
>8862	ExpressionStatement	 
>8863	CallExpression	Pointfile_Check ( )
>8864	ArgumentList	 
>8865	Callee	Pointfile_Check
>8866	Identifier	Pointfile_Check
>8867	ExpressionStatement	 
>8868	CallExpression	Pointfile_Clear ( )
>8869	ArgumentList	 
>8870	Callee	Pointfile_Clear
>8871	Identifier	Pointfile_Clear
>8872	Condition	 
>8873	MemberAccess	g_qeglobals . d_pointfile_display_list
>8874	Identifier	d_pointfile_display_list
>8875	Identifier	g_qeglobals
>8881	FunctionDef	CMainFrame 
>8882	ParameterList	 
>8883	ReturnType	void
>8884	CompoundStatement	 
>8888	FunctionDef	CMainFrame 
>8889	ParameterList	 
>8890	ReturnType	void
>8891	CompoundStatement	 
>8895	FunctionDef	CMainFrame 
>8896	ParameterList	 
>8897	ReturnType	void
>8898	CompoundStatement	 
>8899	IfStatement	if ( ! strcmp ( currentmap , \"unnamed.map\" ) )
>8900	ElseStatement	else
>8901	CompoundStatement	 
>8902	ExpressionStatement	 
>8903	CallExpression	Map_SaveFile ( currentmap , false )
>8904	ArgumentList	currentmap
>8905	Argument	false
>8906	Identifier	false
>8907	Argument	currentmap
>8908	Identifier	currentmap
>8909	Callee	Map_SaveFile
>8910	Identifier	Map_SaveFile
>8911	CompoundStatement	 
>8912	ExpressionStatement	 
>8913	CallExpression	SaveAsDialog ( false )
>8914	ArgumentList	false
>8915	Argument	false
>8916	Identifier	false
>8917	Callee	SaveAsDialog
>8918	Identifier	SaveAsDialog
>8919	Condition	 
>8920	UnaryOp	! strcmp ( currentmap , \"unnamed.map\" )
>8921	CallExpression	strcmp ( currentmap , \"unnamed.map\" )
>8922	ArgumentList	currentmap
>8923	Argument	\"unnamed.map\"
>8924	PrimaryExpression	\"unnamed.map\"
>8925	Argument	currentmap
>8926	Identifier	currentmap
>8927	Callee	strcmp
>8928	Identifier	strcmp
>8929	UnaryOperator	!
>8936	FunctionDef	CMainFrame 
>8937	ParameterList	 
>8938	ReturnType	void
>8939	CompoundStatement	 
>8940	ExpressionStatement	 
>8941	CallExpression	SaveAsDialog ( false )
>8942	ArgumentList	false
>8943	Argument	false
>8944	Identifier	false
>8945	Callee	SaveAsDialog
>8946	Identifier	SaveAsDialog
>8951	FunctionDef	CMainFrame 
>8952	ParameterList	 
>8953	ReturnType	void
>8954	CompoundStatement	 
>8955	ExpressionStatement	 
>8956	CallExpression	Sys_UpdateWindows ( W_XY | W_XY_OVERLAY )
>8957	ArgumentList	W_XY | W_XY_OVERLAY
>8958	Argument	W_XY | W_XY_OVERLAY
>8959	InclusiveOrExpression	W_XY | W_XY_OVERLAY
>8960	Identifier	W_XY_OVERLAY
>8961	Identifier	W_XY
>8962	Callee	Sys_UpdateWindows
>8963	Identifier	Sys_UpdateWindows
>8964	IfStatement	if ( m_pYZWnd )
>8965	ExpressionStatement	 
>8966	CallExpression	m_pYZWnd -> SetScale ( 1 )
>8967	ArgumentList	1
>8968	Argument	1
>8969	PrimaryExpression	1
>8970	Callee	m_pYZWnd -> SetScale
>8971	PtrMemberAccess	m_pYZWnd -> SetScale
>8972	Identifier	SetScale
>8973	Identifier	m_pYZWnd
>8974	Condition	 
>8975	Identifier	m_pYZWnd
>8976	IfStatement	if ( m_pXZWnd )
>8977	ExpressionStatement	 
>8978	CallExpression	m_pXZWnd -> SetScale ( 1 )
>8979	ArgumentList	1
>8980	Argument	1
>8981	PrimaryExpression	1
>8982	Callee	m_pXZWnd -> SetScale
>8983	PtrMemberAccess	m_pXZWnd -> SetScale
>8984	Identifier	SetScale
>8985	Identifier	m_pXZWnd
>8986	Condition	 
>8987	Identifier	m_pXZWnd
>8988	IfStatement	if ( m_pXYWnd )
>8989	ExpressionStatement	 
>8990	CallExpression	m_pXYWnd -> SetScale ( 1 )
>8991	ArgumentList	1
>8992	Argument	1
>8993	PrimaryExpression	1
>8994	Callee	m_pXYWnd -> SetScale
>8995	PtrMemberAccess	m_pXYWnd -> SetScale
>8996	Identifier	SetScale
>8997	Identifier	m_pXYWnd
>8998	Condition	 
>8999	Identifier	m_pXYWnd
>9008	FunctionDef	CMainFrame 
>9009	ParameterList	 
>9010	ReturnType	void
>9011	CompoundStatement	 
>9012	ExpressionStatement	 
>9013	CallExpression	Sys_UpdateWindows ( W_CAMERA | W_XY_OVERLAY )
>9014	ArgumentList	W_CAMERA | W_XY_OVERLAY
>9015	Argument	W_CAMERA | W_XY_OVERLAY
>9016	InclusiveOrExpression	W_CAMERA | W_XY_OVERLAY
>9017	Identifier	W_XY_OVERLAY
>9018	Identifier	W_CAMERA
>9019	Callee	Sys_UpdateWindows
>9020	Identifier	Sys_UpdateWindows
>9021	ExpressionStatement	 
>9022	AssignmentExpr	m_pCamWnd -> Camera ( ) . angles [ YAW ] = 22.5 * floor ( ( m_pCamWnd -> Camera ( ) . angles [ YAW ] + \
>9023	MultiplicativeExpression	22.5 * floor ( ( m_pCamWnd -> Camera ( ) . angles [ YAW ] + 11 ) / 22.5 )
>9024	CallExpression	floor ( ( m_pCamWnd -> Camera ( ) . angles [ YAW ] + 11 ) / 22.5 )
>9025	ArgumentList	( m_pCamWnd -> Camera ( ) . angles [ YAW ] + 11 ) / 22.5
>9026	Argument	( m_pCamWnd -> Camera ( ) . angles [ YAW ] + 11 ) / 22.5
>9027	MultiplicativeExpression	( m_pCamWnd -> Camera ( ) . angles [ YAW ] + 11 ) / 22.5
>9028	PrimaryExpression	22.5
>9029	AdditiveExpression	m_pCamWnd -> Camera ( ) . angles [ YAW ] + 11
>9030	PrimaryExpression	11
>9031	ArrayIndexing	m_pCamWnd -> Camera ( ) . angles [ YAW ]
>9032	Identifier	YAW
>9033	MemberAccess	m_pCamWnd -> Camera ( ) . angles
>9034	Identifier	angles
>9035	CallExpression	m_pCamWnd -> Camera ( )
>9036	ArgumentList	 
>9037	Callee	m_pCamWnd -> Camera
>9038	PtrMemberAccess	m_pCamWnd -> Camera
>9039	Identifier	Camera
>9040	Identifier	m_pCamWnd
>9041	Callee	floor
>9042	Identifier	floor
>9043	PrimaryExpression	22.5
>9044	ArrayIndexing	m_pCamWnd -> Camera ( ) . angles [ YAW ]
>9045	Identifier	YAW
>9046	MemberAccess	m_pCamWnd -> Camera ( ) . angles
>9047	Identifier	angles
>9048	CallExpression	m_pCamWnd -> Camera ( )
>9049	ArgumentList	 
>9050	Callee	m_pCamWnd -> Camera
>9051	PtrMemberAccess	m_pCamWnd -> Camera
>9052	Identifier	Camera
>9053	Identifier	m_pCamWnd
>9054	ExpressionStatement	 
>9055	AssignmentExpr	m_pCamWnd -> Camera ( ) . angles [ ROLL ] = m_pCamWnd -> Camera ( ) . angles [ PITCH ] = 0
>9056	AssignmentExpr	m_pCamWnd -> Camera ( ) . angles [ PITCH ] = 0
>9057	PrimaryExpression	0
>9058	ArrayIndexing	m_pCamWnd -> Camera ( ) . angles [ PITCH ]
>9059	Identifier	PITCH
>9060	MemberAccess	m_pCamWnd -> Camera ( ) . angles
>9061	Identifier	angles
>9062	CallExpression	m_pCamWnd -> Camera ( )
>9063	ArgumentList	 
>9064	Callee	m_pCamWnd -> Camera
>9065	PtrMemberAccess	m_pCamWnd -> Camera
>9066	Identifier	Camera
>9067	Identifier	m_pCamWnd
>9068	ArrayIndexing	m_pCamWnd -> Camera ( ) . angles [ ROLL ]
>9069	Identifier	ROLL
>9070	MemberAccess	m_pCamWnd -> Camera ( ) . angles
>9071	Identifier	angles
>9072	CallExpression	m_pCamWnd -> Camera ( )
>9073	ArgumentList	 
>9074	Callee	m_pCamWnd -> Camera
>9075	PtrMemberAccess	m_pCamWnd -> Camera
>9076	Identifier	Camera
>9077	Identifier	m_pCamWnd
>9097	FunctionDef	CMainFrame 
>9098	ParameterList	 
>9099	ReturnType	void
>9100	CompoundStatement	 
>9101	IfStatement	if ( m_nCurrentStyle > 0 && m_nCurrentStyle < 3 )
>9102	ElseStatement	else
>9103	CompoundStatement	 
>9104	ExpressionStatement	 
>9105	CallExpression	SetInspectorMode ( W_CONSOLE )
>9106	ArgumentList	W_CONSOLE
>9107	Argument	W_CONSOLE
>9108	Identifier	W_CONSOLE
>9109	Callee	SetInspectorMode
>9110	Identifier	SetInspectorMode
>9111	ExpressionStatement	 
>9112	CallExpression	ShowWindow ( g_qeglobals . d_hwndEntity , SW_NORMAL )
>9113	ArgumentList	g_qeglobals . d_hwndEntity
>9114	Argument	SW_NORMAL
>9115	Identifier	SW_NORMAL
>9116	Argument	g_qeglobals . d_hwndEntity
>9117	MemberAccess	g_qeglobals . d_hwndEntity
>9118	Identifier	d_hwndEntity
>9119	Identifier	g_qeglobals
>9120	Callee	ShowWindow
>9121	Identifier	ShowWindow
>9122	Statement	 
>9123	CompoundStatement	 
>9124	IfStatement	if ( inspector_mode == W_CONSOLE && m_nCurrentStyle != QR_QE4 )
>9125	ElseStatement	else
>9126	Statement	 
>9127	CompoundStatement	 
>9128	ExpressionStatement	 
>9129	CallExpression	ShowWindow ( g_qeglobals . d_hwndEntity , SW_NORMAL )
>9130	ArgumentList	g_qeglobals . d_hwndEntity
>9131	Argument	SW_NORMAL
>9132	Identifier	SW_NORMAL
>9133	Argument	g_qeglobals . d_hwndEntity
>9134	MemberAccess	g_qeglobals . d_hwndEntity
>9135	Identifier	d_hwndEntity
>9136	Identifier	g_qeglobals
>9137	Callee	ShowWindow
>9138	Identifier	ShowWindow
>9139	ExpressionStatement	 
>9140	CallExpression	ShowWindow ( g_qeglobals . d_hwndEntity , SW_HIDE )
>9141	ArgumentList	g_qeglobals . d_hwndEntity
>9142	Argument	SW_HIDE
>9143	Identifier	SW_HIDE
>9144	Argument	g_qeglobals . d_hwndEntity
>9145	MemberAccess	g_qeglobals . d_hwndEntity
>9146	Identifier	d_hwndEntity
>9147	Identifier	g_qeglobals
>9148	Callee	ShowWindow
>9149	Identifier	ShowWindow
>9150	Statement	 
>9151	Statement	 
>9152	Statement	 
>9153	Statement	 
>9154	Statement	 
>9155	Statement	 
>9156	Statement	 
>9157	Statement	 
>9158	Statement	 
>9159	Statement	 
>9160	Statement	 
>9161	Condition	 
>9162	AndExpression	inspector_mode == W_CONSOLE && m_nCurrentStyle != QR_QE4
>9163	EqualityExpression	m_nCurrentStyle != QR_QE4
>9164	Identifier	QR_QE4
>9165	Identifier	m_nCurrentStyle
>9166	EqualityExpression	inspector_mode == W_CONSOLE
>9167	Identifier	W_CONSOLE
>9168	Identifier	inspector_mode
>9169	Condition	 
>9170	AndExpression	m_nCurrentStyle > 0 && m_nCurrentStyle < 3
>9171	RelationalExpression	m_nCurrentStyle < 3
>9172	PrimaryExpression	3
>9173	Identifier	m_nCurrentStyle
>9174	RelationalExpression	m_nCurrentStyle > 0
>9175	PrimaryExpression	0
>9176	Identifier	m_nCurrentStyle
>9188	FunctionDef	CMainFrame 
>9189	ParameterList	 
>9190	ReturnType	void
>9191	CompoundStatement	 
>9192	ExpressionStatement	 
>9193	CallExpression	m_pCamWnd -> Cam_ChangeFloor ( false )
>9194	ArgumentList	false
>9195	Argument	false
>9196	Identifier	false
>9197	Callee	m_pCamWnd -> Cam_ChangeFloor
>9198	PtrMemberAccess	m_pCamWnd -> Cam_ChangeFloor
>9199	Identifier	Cam_ChangeFloor
>9200	Identifier	m_pCamWnd
>9206	FunctionDef	CMainFrame 
>9207	ParameterList	 
>9208	ReturnType	void
>9209	CompoundStatement	 
>9210	IfStatement	if ( m_nCurrentStyle == 0 || m_nCurrentStyle == 3 )
>9211	ElseStatement	else
>9212	CompoundStatement	 
>9213	ExpressionStatement	 
>9214	CallExpression	SetInspectorMode ( W_ENTITY )
>9215	ArgumentList	W_ENTITY
>9216	Argument	W_ENTITY
>9217	Identifier	W_ENTITY
>9218	Callee	SetInspectorMode
>9219	Identifier	SetInspectorMode
>9220	ExpressionStatement	 
>9221	CallExpression	ShowWindow ( g_qeglobals . d_hwndEntity , SW_NORMAL )
>9222	ArgumentList	g_qeglobals . d_hwndEntity
>9223	Argument	SW_NORMAL
>9224	Identifier	SW_NORMAL
>9225	Argument	g_qeglobals . d_hwndEntity
>9226	MemberAccess	g_qeglobals . d_hwndEntity
>9227	Identifier	d_hwndEntity
>9228	Identifier	g_qeglobals
>9229	Callee	ShowWindow
>9230	Identifier	ShowWindow
>9231	Statement	 
>9232	CompoundStatement	 
>9233	ExpressionStatement	 
>9234	CallExpression	ShowWindow ( g_qeglobals . d_hwndEntity , SW_HIDE )
>9235	ArgumentList	g_qeglobals . d_hwndEntity
>9236	Argument	SW_HIDE
>9237	Identifier	SW_HIDE
>9238	Argument	g_qeglobals . d_hwndEntity
>9239	MemberAccess	g_qeglobals . d_hwndEntity
>9240	Identifier	d_hwndEntity
>9241	Identifier	g_qeglobals
>9242	Callee	ShowWindow
>9243	Identifier	ShowWindow
>9244	Statement	 
>9245	Statement	 
>9246	Statement	 
>9247	Statement	 
>9248	Statement	 
>9249	Statement	 
>9250	Statement	 
>9251	Statement	 
>9252	Statement	 
>9253	Statement	 
>9254	Statement	 
>9255	Statement	 
>9256	Statement	 
>9257	Statement	 
>9258	Statement	 
>9259	Condition	 
>9260	OrExpression	m_nCurrentStyle == 0 || m_nCurrentStyle == 3
>9261	EqualityExpression	m_nCurrentStyle == 3
>9262	PrimaryExpression	3
>9263	Identifier	m_nCurrentStyle
>9264	EqualityExpression	m_nCurrentStyle == 0
>9265	PrimaryExpression	0
>9266	Identifier	m_nCurrentStyle
>9276	FunctionDef	CMainFrame 
>9277	ParameterList	 
>9278	ReturnType	void
>9279	CompoundStatement	 
>9280	ExpressionStatement	 
>9281	CallExpression	Sys_UpdateWindows ( W_XY )
>9282	ArgumentList	W_XY
>9283	Argument	W_XY
>9284	Identifier	W_XY
>9285	Callee	Sys_UpdateWindows
>9286	Identifier	Sys_UpdateWindows
>9287	IfStatement	if ( m_nCurrentStyle != 2 )
>9288	CompoundStatement	 
>9289	ExpressionStatement	 
>9290	CallExpression	m_pXYWnd -> PositionView ( )
>9291	ArgumentList	 
>9292	Callee	m_pXYWnd -> PositionView
>9293	PtrMemberAccess	m_pXYWnd -> PositionView
>9294	Identifier	PositionView
>9295	Identifier	m_pXYWnd
>9296	ExpressionStatement	 
>9297	CallExpression	m_pXYWnd -> SetViewType ( YZ )
>9298	ArgumentList	YZ
>9299	Argument	YZ
>9300	Identifier	YZ
>9301	Callee	m_pXYWnd -> SetViewType
>9302	PtrMemberAccess	m_pXYWnd -> SetViewType
>9303	Identifier	SetViewType
>9304	Identifier	m_pXYWnd
>9305	Condition	 
>9306	EqualityExpression	m_nCurrentStyle != 2
>9307	PrimaryExpression	2
>9308	Identifier	m_nCurrentStyle
>9316	FunctionDef	CMainFrame 
>9317	ParameterList	unsigned int nID
>9318	Parameter	 
>9319	Identifier	nID
>9320	ParameterType	unsigned int
>9321	ReturnType	void
>9322	CompoundStatement	 
>9323	ExpressionStatement	 
>9324	CallExpression	DoMru ( GetSafeHwnd ( ) , nID )
>9325	ArgumentList	GetSafeHwnd ( )
>9326	Argument	nID
>9327	Identifier	nID
>9328	Argument	GetSafeHwnd ( )
>9329	CallExpression	GetSafeHwnd ( )
>9330	ArgumentList	 
>9331	Callee	GetSafeHwnd
>9332	Identifier	GetSafeHwnd
>9333	Callee	DoMru
>9334	Identifier	DoMru
>9340	FunctionDef	CMainFrame 
>9341	ParameterList	unsigned int nID
>9342	Parameter	 
>9343	Identifier	nID
>9344	ParameterType	unsigned int
>9345	ReturnType	void
>9346	CompoundStatement	 
>9347	ExpressionStatement	 
>9348	CallExpression	Texture_SetMode ( nID )
>9349	ArgumentList	nID
>9350	Argument	nID
>9351	Identifier	nID
>9352	Callee	Texture_SetMode
>9353	Identifier	Texture_SetMode
>9358	FunctionDef	CMainFrame 
>9359	ParameterList	unsigned int nID
>9360	Parameter	 
>9361	Identifier	nID
>9362	ParameterType	unsigned int
>9363	ReturnType	void
>9364	CompoundStatement	 
>9365	ExpressionStatement	 
>9366	CallExpression	Sys_UpdateWindows ( W_ALL )
>9367	ArgumentList	W_ALL
>9368	Argument	W_ALL
>9369	Identifier	W_ALL
>9370	Callee	Sys_UpdateWindows
>9371	Identifier	Sys_UpdateWindows
>9372	ExpressionStatement	 
>9373	CallExpression	Texture_ShowDirectory ( nID )
>9374	ArgumentList	nID
>9375	Argument	nID
>9376	Identifier	nID
>9377	Callee	Texture_ShowDirectory
>9378	Identifier	Texture_ShowDirectory
>9379	ExpressionStatement	 
>9380	CallExpression	Sys_BeginWait ( )
>9381	ArgumentList	 
>9382	Callee	Sys_BeginWait
>9383	Identifier	Sys_BeginWait
>9389	FunctionDef	CMainFrame 
>9390	ParameterList	unsigned int nID
>9391	Parameter	 
>9392	Identifier	nID
>9393	ParameterType	unsigned int
>9394	ReturnType	void
>9395	CompoundStatement	 
>9396	IfStatement	if ( g_qeglobals . bBSPFrontendPlugin )
>9397	ElseStatement	else
>9398	CompoundStatement	 
>9399	ExpressionStatement	 
>9400	CallExpression	RunBsp ( bsp_commands [ LOWORD ( nID - CMD_BSPCOMMAND ) ] )
>9401	ArgumentList	bsp_commands [ LOWORD ( nID - CMD_BSPCOMMAND ) ]
>9402	Argument	bsp_commands [ LOWORD ( nID - CMD_BSPCOMMAND ) ]
>9403	ArrayIndexing	bsp_commands [ LOWORD ( nID - CMD_BSPCOMMAND ) ]
>9404	CallExpression	LOWORD ( nID - CMD_BSPCOMMAND )
>9405	ArgumentList	nID - CMD_BSPCOMMAND
>9406	Argument	nID - CMD_BSPCOMMAND
>9407	AdditiveExpression	nID - CMD_BSPCOMMAND
>9408	Identifier	CMD_BSPCOMMAND
>9409	Identifier	nID
>9410	Callee	LOWORD
>9411	Identifier	LOWORD
>9412	Identifier	bsp_commands
>9413	Callee	RunBsp
>9414	Identifier	RunBsp
>9415	CompoundStatement	 
>9416	ExpressionStatement	 
>9417	CallExpression	g_BSPFrontendTable . m_pfnDispatchBSPCommand ( foo . GetBuffer ( 0 ) )
>9418	ArgumentList	foo . GetBuffer ( 0 )
>9419	Argument	foo . GetBuffer ( 0 )
>9420	CallExpression	foo . GetBuffer ( 0 )
>9421	ArgumentList	0
>9422	Argument	0
>9423	PrimaryExpression	0
>9424	Callee	foo . GetBuffer
>9425	MemberAccess	foo . GetBuffer
>9426	Identifier	GetBuffer
>9427	Identifier	foo
>9428	Callee	g_BSPFrontendTable . m_pfnDispatchBSPCommand
>9429	MemberAccess	g_BSPFrontendTable . m_pfnDispatchBSPCommand
>9430	Identifier	m_pfnDispatchBSPCommand
>9431	Identifier	g_BSPFrontendTable
>9432	IdentifierDeclStatement	 
>9433	IdentifierDecl	foo = g_BSPFrontendCommands . GetAt ( nID - CMD_BSPCOMMAND )
>9434	AssignmentExpr	foo = g_BSPFrontendCommands . GetAt ( nID - CMD_BSPCOMMAND )
>9435	CallExpression	g_BSPFrontendCommands . GetAt ( nID - CMD_BSPCOMMAND )
>9436	ArgumentList	nID - CMD_BSPCOMMAND
>9437	Argument	nID - CMD_BSPCOMMAND
>9438	AdditiveExpression	nID - CMD_BSPCOMMAND
>9439	Identifier	CMD_BSPCOMMAND
>9440	Identifier	nID
>9441	Callee	g_BSPFrontendCommands . GetAt
>9442	MemberAccess	g_BSPFrontendCommands . GetAt
>9443	Identifier	GetAt
>9444	Identifier	g_BSPFrontendCommands
>9445	Identifier	foo
>9446	Identifier	foo
>9447	IdentifierDeclType	CString
>9448	Condition	 
>9449	MemberAccess	g_qeglobals . bBSPFrontendPlugin
>9450	Identifier	bBSPFrontendPlugin
>9451	Identifier	g_qeglobals
>9452	IfStatement	if ( g_PrefsDlg . m_bSnapShots && stricmp ( currentmap , \"unnamed.map\" ) != 0 )
>9453	ExpressionStatement	 
>9454	CallExpression	Map_Snapshot ( )
>9455	ArgumentList	 
>9456	Callee	Map_Snapshot
>9457	Identifier	Map_Snapshot
>9458	Condition	 
>9459	AndExpression	g_PrefsDlg . m_bSnapShots && stricmp ( currentmap , \"unnamed.map\" ) != 0
>9460	EqualityExpression	stricmp ( currentmap , \"unnamed.map\" ) != 0
>9461	PrimaryExpression	0
>9462	CallExpression	stricmp ( currentmap , \"unnamed.map\" )
>9463	ArgumentList	currentmap
>9464	Argument	\"unnamed.map\"
>9465	PrimaryExpression	\"unnamed.map\"
>9466	Argument	currentmap
>9467	Identifier	currentmap
>9468	Callee	stricmp
>9469	Identifier	stricmp
>9470	MemberAccess	g_PrefsDlg . m_bSnapShots
>9471	Identifier	m_bSnapShots
>9472	Identifier	g_PrefsDlg
>9493	FunctionDef	CMainFrame 
>9494	ParameterList	 
>9495	ReturnType	void
>9496	CompoundStatement	 
>9497	ExpressionStatement	 
>9498	CallExpression	Sys_UpdateWindows ( W_XY )
>9499	ArgumentList	W_XY
>9500	Argument	W_XY
>9501	Identifier	W_XY
>9502	Callee	Sys_UpdateWindows
>9503	Identifier	Sys_UpdateWindows
>9504	ExpressionStatement	 
>9505	Statement	 
>9506	Statement	 
>9507	Statement	 
>9508	Label	 
>9509	Identifier	MF_CHECKED
>9510	Statement	 
>9511	Statement	 
>9512	Statement	 
>9513	Statement	 
>9514	Statement	 
>9515	Statement	 
>9516	Statement	 
>9517	Statement	 
>9518	Statement	 
>9519	Statement	 
>9520	Statement	 
>9521	Statement	 
>9522	Statement	 
>9523	Statement	 
>9524	Statement	 
>9525	Statement	 
>9526	Statement	 
>9527	Statement	 
>9528	Statement	 
>9529	ExpressionStatement	 
>9530	AssignmentExpr	g_qeglobals . show_blocks ^= 1
>9531	PrimaryExpression	1
>9532	MemberAccess	g_qeglobals . show_blocks
>9533	Identifier	show_blocks
>9534	Identifier	g_qeglobals
>9541	FunctionDef	CMainFrame 
>9542	ParameterList	 
>9543	ReturnType	void
>9544	CompoundStatement	 
>9545	ExpressionStatement	 
>9546	CallExpression	Sys_UpdateWindows ( W_XY | W_CAMERA )
>9547	ArgumentList	W_XY | W_CAMERA
>9548	Argument	W_XY | W_CAMERA
>9549	InclusiveOrExpression	W_XY | W_CAMERA
>9550	Identifier	W_CAMERA
>9551	Identifier	W_XY
>9552	Callee	Sys_UpdateWindows
>9553	Identifier	Sys_UpdateWindows
>9554	ExpressionStatement	 
>9555	Statement	 
>9556	Statement	 
>9557	Statement	 
>9558	Statement	 
>9559	Statement	 
>9560	Statement	 
>9561	Statement	 
>9562	Statement	 
>9563	Statement	 
>9564	Statement	 
>9565	Statement	 
>9566	Statement	 
>9567	Statement	 
>9568	Statement	 
>9569	Statement	 
>9570	ExpressionStatement	 
>9571	Statement	 
>9572	Statement	 
>9573	Statement	 
>9574	Statement	 
>9575	Statement	 
>9576	Statement	 
>9577	Statement	 
>9578	Statement	 
>9579	Statement	 
>9580	Statement	 
>9581	Statement	 
>9582	Statement	 
>9583	Statement	 
>9584	Statement	 
>9585	Statement	 
>9586	IfStatement	if ( ( g_qeglobals . d_savedinfo . exclude ^= EXCLUDE_CLIP ) & EXCLUDE_CLIP )
>9587	ElseStatement	else
>9588	Statement	 
>9589	Statement	 
>9590	Condition	 
>9591	BitAndExpression	( g_qeglobals . d_savedinfo . exclude ^= EXCLUDE_CLIP ) & EXCLUDE_CLIP
>9592	Identifier	EXCLUDE_CLIP
>9593	AssignmentExpr	g_qeglobals . d_savedinfo . exclude ^= EXCLUDE_CLIP
>9594	Identifier	EXCLUDE_CLIP
>9595	MemberAccess	g_qeglobals . d_savedinfo . exclude
>9596	Identifier	exclude
>9597	MemberAccess	g_qeglobals . d_savedinfo
>9598	Identifier	d_savedinfo
>9599	Identifier	g_qeglobals
>9609	FunctionDef	CMainFrame 
>9610	ParameterList	 
>9611	ReturnType	void
>9612	CompoundStatement	 
>9613	ExpressionStatement	 
>9614	CallExpression	Sys_UpdateWindows ( W_XY )
>9615	ArgumentList	W_XY
>9616	Argument	W_XY
>9617	Identifier	W_XY
>9618	Callee	Sys_UpdateWindows
>9619	Identifier	Sys_UpdateWindows
>9620	ExpressionStatement	 
>9621	Statement	 
>9622	Statement	 
>9623	Statement	 
>9624	Label	 
>9625	Identifier	MF_CHECKED
>9626	Statement	 
>9627	Statement	 
>9628	Statement	 
>9629	Statement	 
>9630	Statement	 
>9631	Statement	 
>9632	Statement	 
>9633	Statement	 
>9634	Statement	 
>9635	Statement	 
>9636	Statement	 
>9637	Statement	 
>9638	Statement	 
>9639	Statement	 
>9640	Statement	 
>9641	Statement	 
>9642	Statement	 
>9643	Statement	 
>9644	Statement	 
>9645	Statement	 
>9646	Statement	 
>9647	ExpressionStatement	 
>9648	AssignmentExpr	g_qeglobals . d_savedinfo . show_coordinates ^= 1
>9649	PrimaryExpression	1
>9650	MemberAccess	g_qeglobals . d_savedinfo . show_coordinates
>9651	Identifier	show_coordinates
>9652	MemberAccess	g_qeglobals . d_savedinfo
>9653	Identifier	d_savedinfo
>9654	Identifier	g_qeglobals
>9662	FunctionDef	CMainFrame 
>9663	ParameterList	 
>9664	ReturnType	void
>9665	CompoundStatement	 
>9666	ExpressionStatement	 
>9667	CallExpression	Sys_UpdateWindows ( W_XY | W_CAMERA )
>9668	ArgumentList	W_XY | W_CAMERA
>9669	Argument	W_XY | W_CAMERA
>9670	InclusiveOrExpression	W_XY | W_CAMERA
>9671	Identifier	W_CAMERA
>9672	Identifier	W_XY
>9673	Callee	Sys_UpdateWindows
>9674	Identifier	Sys_UpdateWindows
>9675	IfStatement	if ( ( g_qeglobals . d_savedinfo . exclude ^= EXCLUDE_DETAIL ) & EXCLUDE_DETAIL )
>9676	ElseStatement	else
>9677	CompoundStatement	 
>9678	ExpressionStatement	 
>9679	CallExpression	SetWindowText ( g_qeglobals . d_hwndCamera , \"Camera View\" )
>9680	ArgumentList	g_qeglobals . d_hwndCamera
>9681	Argument	\"Camera View\"
>9682	PrimaryExpression	\"Camera View\"
>9683	Argument	g_qeglobals . d_hwndCamera
>9684	MemberAccess	g_qeglobals . d_hwndCamera
>9685	Identifier	d_hwndCamera
>9686	Identifier	g_qeglobals
>9687	Callee	SetWindowText
>9688	Identifier	SetWindowText
>9689	Statement	 
>9690	ExpressionStatement	 
>9691	Statement	 
>9692	Statement	 
>9693	Statement	 
>9694	Statement	 
>9695	Statement	 
>9696	Statement	 
>9697	Statement	 
>9698	Statement	 
>9699	Statement	 
>9700	Statement	 
>9701	Statement	 
>9702	Statement	 
>9703	Statement	 
>9704	Statement	 
>9705	Statement	 
>9706	Statement	 
>9707	CompoundStatement	 
>9708	ExpressionStatement	 
>9709	CallExpression	SetWindowText ( g_qeglobals . d_hwndCamera , \"Camera View (DETAIL EXCLUDED)\" )
>9710	ArgumentList	g_qeglobals . d_hwndCamera
>9711	Argument	\"Camera View (DETAIL EXCLUDED)\"
>9712	PrimaryExpression	\"Camera View (DETAIL EXCLUDED)\"
>9713	Argument	g_qeglobals . d_hwndCamera
>9714	MemberAccess	g_qeglobals . d_hwndCamera
>9715	Identifier	d_hwndCamera
>9716	Identifier	g_qeglobals
>9717	Callee	SetWindowText
>9718	Identifier	SetWindowText
>9719	Statement	 
>9720	ExpressionStatement	 
>9721	Statement	 
>9722	Statement	 
>9723	Statement	 
>9724	Statement	 
>9725	Statement	 
>9726	Statement	 
>9727	Statement	 
>9728	Statement	 
>9729	Statement	 
>9730	Statement	 
>9731	Statement	 
>9732	Statement	 
>9733	Statement	 
>9734	Statement	 
>9735	Statement	 
>9736	Statement	 
>9737	Condition	 
>9738	BitAndExpression	( g_qeglobals . d_savedinfo . exclude ^= EXCLUDE_DETAIL ) & EXCLUDE_DETAIL
>9739	Identifier	EXCLUDE_DETAIL
>9740	AssignmentExpr	g_qeglobals . d_savedinfo . exclude ^= EXCLUDE_DETAIL
>9741	Identifier	EXCLUDE_DETAIL
>9742	MemberAccess	g_qeglobals . d_savedinfo . exclude
>9743	Identifier	exclude
>9744	MemberAccess	g_qeglobals . d_savedinfo
>9745	Identifier	d_savedinfo
>9746	Identifier	g_qeglobals
>9757	FunctionDef	CMainFrame 
>9758	ParameterList	 
>9759	ReturnType	void
>9760	CompoundStatement	 
>9761	ExpressionStatement	 
>9762	CallExpression	Sys_UpdateWindows ( W_XY | W_CAMERA )
>9763	ArgumentList	W_XY | W_CAMERA
>9764	Argument	W_XY | W_CAMERA
>9765	InclusiveOrExpression	W_XY | W_CAMERA
>9766	Identifier	W_CAMERA
>9767	Identifier	W_XY
>9768	Callee	Sys_UpdateWindows
>9769	Identifier	Sys_UpdateWindows
>9770	ExpressionStatement	 
>9771	Statement	 
>9772	Statement	 
>9773	Statement	 
>9774	Statement	 
>9775	Statement	 
>9776	Statement	 
>9777	Statement	 
>9778	Statement	 
>9779	Statement	 
>9780	Statement	 
>9781	Statement	 
>9782	Statement	 
>9783	Statement	 
>9784	Statement	 
>9785	Statement	 
>9786	ExpressionStatement	 
>9787	Statement	 
>9788	Statement	 
>9789	Statement	 
>9790	Statement	 
>9791	Statement	 
>9792	Statement	 
>9793	Statement	 
>9794	Statement	 
>9795	Statement	 
>9796	Statement	 
>9797	Statement	 
>9798	Statement	 
>9799	Statement	 
>9800	Statement	 
>9801	Statement	 
>9802	IfStatement	if ( ( g_qeglobals . d_savedinfo . exclude ^= EXCLUDE_ENT ) & EXCLUDE_ENT )
>9803	ElseStatement	else
>9804	Statement	 
>9805	Statement	 
>9806	Condition	 
>9807	BitAndExpression	( g_qeglobals . d_savedinfo . exclude ^= EXCLUDE_ENT ) & EXCLUDE_ENT
>9808	Identifier	EXCLUDE_ENT
>9809	AssignmentExpr	g_qeglobals . d_savedinfo . exclude ^= EXCLUDE_ENT
>9810	Identifier	EXCLUDE_ENT
>9811	MemberAccess	g_qeglobals . d_savedinfo . exclude
>9812	Identifier	exclude
>9813	MemberAccess	g_qeglobals . d_savedinfo
>9814	Identifier	d_savedinfo
>9815	Identifier	g_qeglobals
>9825	FunctionDef	CMainFrame 
>9826	ParameterList	 
>9827	ReturnType	void
>9828	CompoundStatement	 
>9829	ExpressionStatement	 
>9830	CallExpression	Sys_UpdateWindows ( W_XY | W_CAMERA )
>9831	ArgumentList	W_XY | W_CAMERA
>9832	Argument	W_XY | W_CAMERA
>9833	InclusiveOrExpression	W_XY | W_CAMERA
>9834	Identifier	W_CAMERA
>9835	Identifier	W_XY
>9836	Callee	Sys_UpdateWindows
>9837	Identifier	Sys_UpdateWindows
>9838	ExpressionStatement	 
>9839	Statement	 
>9840	Statement	 
>9841	Statement	 
>9842	Statement	 
>9843	Statement	 
>9844	Statement	 
>9845	Statement	 
>9846	Statement	 
>9847	Statement	 
>9848	Statement	 
>9849	Statement	 
>9850	Statement	 
>9851	Statement	 
>9852	Statement	 
>9853	Statement	 
>9854	ExpressionStatement	 
>9855	Statement	 
>9856	Statement	 
>9857	Statement	 
>9858	Statement	 
>9859	Statement	 
>9860	Statement	 
>9861	Statement	 
>9862	Statement	 
>9863	Statement	 
>9864	Statement	 
>9865	Statement	 
>9866	Statement	 
>9867	Statement	 
>9868	Statement	 
>9869	Statement	 
>9870	IfStatement	if ( ( g_qeglobals . d_savedinfo . exclude ^= EXCLUDE_LIGHTS ) & EXCLUDE_LIGHTS )
>9871	ElseStatement	else
>9872	Statement	 
>9873	Statement	 
>9874	Condition	 
>9875	BitAndExpression	( g_qeglobals . d_savedinfo . exclude ^= EXCLUDE_LIGHTS ) & EXCLUDE_LIGHTS
>9876	Identifier	EXCLUDE_LIGHTS
>9877	AssignmentExpr	g_qeglobals . d_savedinfo . exclude ^= EXCLUDE_LIGHTS
>9878	Identifier	EXCLUDE_LIGHTS
>9879	MemberAccess	g_qeglobals . d_savedinfo . exclude
>9880	Identifier	exclude
>9881	MemberAccess	g_qeglobals . d_savedinfo
>9882	Identifier	d_savedinfo
>9883	Identifier	g_qeglobals
>9893	FunctionDef	CMainFrame 
>9894	ParameterList	 
>9895	ReturnType	void
>9896	CompoundStatement	 
>9897	ExpressionStatement	 
>9898	CallExpression	Sys_UpdateWindows ( W_XY )
>9899	ArgumentList	W_XY
>9900	Argument	W_XY
>9901	Identifier	W_XY
>9902	Callee	Sys_UpdateWindows
>9903	Identifier	Sys_UpdateWindows
>9904	ExpressionStatement	 
>9905	CallExpression	Map_BuildBrushData ( )
>9906	ArgumentList	 
>9907	Callee	Map_BuildBrushData
>9908	Identifier	Map_BuildBrushData
>9909	ExpressionStatement	 
>9910	Statement	 
>9911	Statement	 
>9912	Statement	 
>9913	Label	 
>9914	Identifier	MF_CHECKED
>9915	Statement	 
>9916	Statement	 
>9917	Statement	 
>9918	Statement	 
>9919	Statement	 
>9920	Statement	 
>9921	Statement	 
>9922	Statement	 
>9923	Statement	 
>9924	Statement	 
>9925	Statement	 
>9926	Statement	 
>9927	Statement	 
>9928	Statement	 
>9929	Statement	 
>9930	Statement	 
>9931	Statement	 
>9932	Statement	 
>9933	Statement	 
>9934	Statement	 
>9935	Statement	 
>9936	ExpressionStatement	 
>9937	AssignmentExpr	g_qeglobals . d_savedinfo . show_names = ! g_qeglobals . d_savedinfo . show_names
>9938	UnaryOp	! g_qeglobals . d_savedinfo . show_names
>9939	MemberAccess	g_qeglobals . d_savedinfo . show_names
>9940	Identifier	show_names
>9941	MemberAccess	g_qeglobals . d_savedinfo
>9942	Identifier	d_savedinfo
>9943	Identifier	g_qeglobals
>9944	UnaryOperator	!
>9945	MemberAccess	g_qeglobals . d_savedinfo . show_names
>9946	Identifier	show_names
>9947	MemberAccess	g_qeglobals . d_savedinfo
>9948	Identifier	d_savedinfo
>9949	Identifier	g_qeglobals
>9957	FunctionDef	CMainFrame 
>9958	ParameterList	 
>9959	ReturnType	void
>9960	CompoundStatement	 
>9961	ExpressionStatement	 
>9962	CallExpression	Sys_UpdateWindows ( W_XY | W_CAMERA )
>9963	ArgumentList	W_XY | W_CAMERA
>9964	Argument	W_XY | W_CAMERA
>9965	InclusiveOrExpression	W_XY | W_CAMERA
>9966	Identifier	W_CAMERA
>9967	Identifier	W_XY
>9968	Callee	Sys_UpdateWindows
>9969	Identifier	Sys_UpdateWindows
>9970	ExpressionStatement	 
>9971	Statement	 
>9972	Statement	 
>9973	Statement	 
>9974	Statement	 
>9975	Statement	 
>9976	Statement	 
>9977	Statement	 
>9978	Statement	 
>9979	Statement	 
>9980	Statement	 
>9981	Statement	 
>9982	Statement	 
>9983	Statement	 
>9984	Statement	 
>9985	Statement	 
>9986	ExpressionStatement	 
>9987	Statement	 
>9988	Statement	 
>9989	Statement	 
>9990	Statement	 
>9991	Statement	 
>9992	Statement	 
>9993	Statement	 
>9994	Statement	 
>9995	Statement	 
>9996	Statement	 
>9997	Statement	 
>9998	Statement	 
>9999	Statement	 
>10000	Statement	 
>10001	Statement	 
>10002	IfStatement	if ( ( g_qeglobals . d_savedinfo . exclude ^= EXCLUDE_PATHS ) & EXCLUDE_PATHS )
>10003	ElseStatement	else
>10004	Statement	 
>10005	Statement	 
>10006	Condition	 
>10007	BitAndExpression	( g_qeglobals . d_savedinfo . exclude ^= EXCLUDE_PATHS ) & EXCLUDE_PATHS
>10008	Identifier	EXCLUDE_PATHS
>10009	AssignmentExpr	g_qeglobals . d_savedinfo . exclude ^= EXCLUDE_PATHS
>10010	Identifier	EXCLUDE_PATHS
>10011	MemberAccess	g_qeglobals . d_savedinfo . exclude
>10012	Identifier	exclude
>10013	MemberAccess	g_qeglobals . d_savedinfo
>10014	Identifier	d_savedinfo
>10015	Identifier	g_qeglobals
>10025	FunctionDef	CMainFrame 
>10026	ParameterList	 
>10027	ReturnType	void
>10028	CompoundStatement	 
>10029	ExpressionStatement	 
>10030	CallExpression	Sys_UpdateWindows ( W_XY | W_CAMERA )
>10031	ArgumentList	W_XY | W_CAMERA
>10032	Argument	W_XY | W_CAMERA
>10033	InclusiveOrExpression	W_XY | W_CAMERA
>10034	Identifier	W_CAMERA
>10035	Identifier	W_XY
>10036	Callee	Sys_UpdateWindows
>10037	Identifier	Sys_UpdateWindows
>10038	ExpressionStatement	 
>10039	Statement	 
>10040	Statement	 
>10041	Statement	 
>10042	Statement	 
>10043	Statement	 
>10044	Statement	 
>10045	Statement	 
>10046	Statement	 
>10047	Statement	 
>10048	Statement	 
>10049	Statement	 
>10050	Statement	 
>10051	Statement	 
>10052	Statement	 
>10053	Statement	 
>10054	ExpressionStatement	 
>10055	Statement	 
>10056	Statement	 
>10057	Statement	 
>10058	Statement	 
>10059	Statement	 
>10060	Statement	 
>10061	Statement	 
>10062	Statement	 
>10063	Statement	 
>10064	Statement	 
>10065	Statement	 
>10066	Statement	 
>10067	Statement	 
>10068	Statement	 
>10069	Statement	 
>10070	IfStatement	if ( ( g_qeglobals . d_savedinfo . exclude ^= EXCLUDE_WATER ) & EXCLUDE_WATER )
>10071	ElseStatement	else
>10072	Statement	 
>10073	Statement	 
>10074	Condition	 
>10075	BitAndExpression	( g_qeglobals . d_savedinfo . exclude ^= EXCLUDE_WATER ) & EXCLUDE_WATER
>10076	Identifier	EXCLUDE_WATER
>10077	AssignmentExpr	g_qeglobals . d_savedinfo . exclude ^= EXCLUDE_WATER
>10078	Identifier	EXCLUDE_WATER
>10079	MemberAccess	g_qeglobals . d_savedinfo . exclude
>10080	Identifier	exclude
>10081	MemberAccess	g_qeglobals . d_savedinfo
>10082	Identifier	d_savedinfo
>10083	Identifier	g_qeglobals
>10093	FunctionDef	CMainFrame 
>10094	ParameterList	 
>10095	ReturnType	void
>10096	CompoundStatement	 
>10097	ExpressionStatement	 
>10098	CallExpression	Sys_UpdateWindows ( W_XY | W_CAMERA )
>10099	ArgumentList	W_XY | W_CAMERA
>10100	Argument	W_XY | W_CAMERA
>10101	InclusiveOrExpression	W_XY | W_CAMERA
>10102	Identifier	W_CAMERA
>10103	Identifier	W_XY
>10104	Callee	Sys_UpdateWindows
>10105	Identifier	Sys_UpdateWindows
>10106	ExpressionStatement	 
>10107	Statement	 
>10108	Statement	 
>10109	Statement	 
>10110	Statement	 
>10111	Statement	 
>10112	Statement	 
>10113	Statement	 
>10114	Statement	 
>10115	Statement	 
>10116	Statement	 
>10117	Statement	 
>10118	Statement	 
>10119	Statement	 
>10120	Statement	 
>10121	Statement	 
>10122	ExpressionStatement	 
>10123	Statement	 
>10124	Statement	 
>10125	Statement	 
>10126	Statement	 
>10127	Statement	 
>10128	Statement	 
>10129	Statement	 
>10130	Statement	 
>10131	Statement	 
>10132	Statement	 
>10133	Statement	 
>10134	Statement	 
>10135	Statement	 
>10136	Statement	 
>10137	Statement	 
>10138	IfStatement	if ( ( g_qeglobals . d_savedinfo . exclude ^= EXCLUDE_WORLD ) & EXCLUDE_WORLD )
>10139	ElseStatement	else
>10140	Statement	 
>10141	Statement	 
>10142	Condition	 
>10143	BitAndExpression	( g_qeglobals . d_savedinfo . exclude ^= EXCLUDE_WORLD ) & EXCLUDE_WORLD
>10144	Identifier	EXCLUDE_WORLD
>10145	AssignmentExpr	g_qeglobals . d_savedinfo . exclude ^= EXCLUDE_WORLD
>10146	Identifier	EXCLUDE_WORLD
>10147	MemberAccess	g_qeglobals . d_savedinfo . exclude
>10148	Identifier	exclude
>10149	MemberAccess	g_qeglobals . d_savedinfo
>10150	Identifier	d_savedinfo
>10151	Identifier	g_qeglobals
>10161	FunctionDef	CMainFrame 
>10162	ParameterList	 
>10163	ReturnType	void
>10164	CompoundStatement	 
>10165	IfStatement	if ( m_nCurrentStyle > 0 && m_nCurrentStyle < 3 )
>10166	ElseStatement	else
>10167	CompoundStatement	 
>10168	ExpressionStatement	 
>10169	CallExpression	SetInspectorMode ( W_TEXTURE )
>10170	ArgumentList	W_TEXTURE
>10171	Argument	W_TEXTURE
>10172	Identifier	W_TEXTURE
>10173	Callee	SetInspectorMode
>10174	Identifier	SetInspectorMode
>10175	ExpressionStatement	 
>10176	CallExpression	ShowWindow ( g_qeglobals . d_hwndEntity , SW_SHOW )
>10177	ArgumentList	g_qeglobals . d_hwndEntity
>10178	Argument	SW_SHOW
>10179	Identifier	SW_SHOW
>10180	Argument	g_qeglobals . d_hwndEntity
>10181	MemberAccess	g_qeglobals . d_hwndEntity
>10182	Identifier	d_hwndEntity
>10183	Identifier	g_qeglobals
>10184	Callee	ShowWindow
>10185	Identifier	ShowWindow
>10186	Statement	 
>10187	CompoundStatement	 
>10188	IfStatement	if ( inspector_mode == W_TEXTURE && m_nCurrentStyle != QR_QE4 )
>10189	ElseStatement	else
>10190	Statement	 
>10191	CompoundStatement	 
>10192	ExpressionStatement	 
>10193	CallExpression	ShowWindow ( g_qeglobals . d_hwndEntity , SW_SHOW )
>10194	ArgumentList	g_qeglobals . d_hwndEntity
>10195	Argument	SW_SHOW
>10196	Identifier	SW_SHOW
>10197	Argument	g_qeglobals . d_hwndEntity
>10198	MemberAccess	g_qeglobals . d_hwndEntity
>10199	Identifier	d_hwndEntity
>10200	Identifier	g_qeglobals
>10201	Callee	ShowWindow
>10202	Identifier	ShowWindow
>10203	ExpressionStatement	 
>10204	CallExpression	ShowWindow ( g_qeglobals . d_hwndEntity , SW_HIDE )
>10205	ArgumentList	g_qeglobals . d_hwndEntity
>10206	Argument	SW_HIDE
>10207	Identifier	SW_HIDE
>10208	Argument	g_qeglobals . d_hwndEntity
>10209	MemberAccess	g_qeglobals . d_hwndEntity
>10210	Identifier	d_hwndEntity
>10211	Identifier	g_qeglobals
>10212	Callee	ShowWindow
>10213	Identifier	ShowWindow
>10214	Statement	 
>10215	Statement	 
>10216	Statement	 
>10217	Statement	 
>10218	Statement	 
>10219	Statement	 
>10220	Statement	 
>10221	Statement	 
>10222	Statement	 
>10223	Statement	 
>10224	Statement	 
>10225	Condition	 
>10226	AndExpression	inspector_mode == W_TEXTURE && m_nCurrentStyle != QR_QE4
>10227	EqualityExpression	m_nCurrentStyle != QR_QE4
>10228	Identifier	QR_QE4
>10229	Identifier	m_nCurrentStyle
>10230	EqualityExpression	inspector_mode == W_TEXTURE
>10231	Identifier	W_TEXTURE
>10232	Identifier	inspector_mode
>10233	Condition	 
>10234	AndExpression	m_nCurrentStyle > 0 && m_nCurrentStyle < 3
>10235	RelationalExpression	m_nCurrentStyle < 3
>10236	PrimaryExpression	3
>10237	Identifier	m_nCurrentStyle
>10238	RelationalExpression	m_nCurrentStyle > 0
>10239	PrimaryExpression	0
>10240	Identifier	m_nCurrentStyle
>10252	FunctionDef	CMainFrame 
>10253	ParameterList	 
>10254	ReturnType	void
>10255	CompoundStatement	 
>10256	ExpressionStatement	 
>10257	CallExpression	m_pCamWnd -> Cam_ChangeFloor ( true )
>10258	ArgumentList	true
>10259	Argument	true
>10260	Identifier	true
>10261	Callee	m_pCamWnd -> Cam_ChangeFloor
>10262	PtrMemberAccess	m_pCamWnd -> Cam_ChangeFloor
>10263	Identifier	Cam_ChangeFloor
>10264	Identifier	m_pCamWnd
>10270	FunctionDef	CMainFrame 
>10271	ParameterList	 
>10272	ReturnType	void
>10273	CompoundStatement	 
>10274	ExpressionStatement	 
>10275	CallExpression	Sys_UpdateWindows ( W_XY )
>10276	ArgumentList	W_XY
>10277	Argument	W_XY
>10278	Identifier	W_XY
>10279	Callee	Sys_UpdateWindows
>10280	Identifier	Sys_UpdateWindows
>10281	IfStatement	if ( m_nCurrentStyle != 2 )
>10282	CompoundStatement	 
>10283	ExpressionStatement	 
>10284	CallExpression	m_pXYWnd -> PositionView ( )
>10285	ArgumentList	 
>10286	Callee	m_pXYWnd -> PositionView
>10287	PtrMemberAccess	m_pXYWnd -> PositionView
>10288	Identifier	PositionView
>10289	Identifier	m_pXYWnd
>10290	ExpressionStatement	 
>10291	CallExpression	m_pXYWnd -> SetViewType ( XY )
>10292	ArgumentList	XY
>10293	Argument	XY
>10294	Identifier	XY
>10295	Callee	m_pXYWnd -> SetViewType
>10296	PtrMemberAccess	m_pXYWnd -> SetViewType
>10297	Identifier	SetViewType
>10298	Identifier	m_pXYWnd
>10299	Condition	 
>10300	EqualityExpression	m_nCurrentStyle != 2
>10301	PrimaryExpression	2
>10302	Identifier	m_nCurrentStyle
>10310	FunctionDef	CMainFrame 
>10311	ParameterList	 
>10312	ReturnType	void
>10313	CompoundStatement	 
>10314	ExpressionStatement	 
>10315	CallExpression	Sys_UpdateWindows ( W_Z | W_Z_OVERLAY )
>10316	ArgumentList	W_Z | W_Z_OVERLAY
>10317	Argument	W_Z | W_Z_OVERLAY
>10318	InclusiveOrExpression	W_Z | W_Z_OVERLAY
>10319	Identifier	W_Z_OVERLAY
>10320	Identifier	W_Z
>10321	Callee	Sys_UpdateWindows
>10322	Identifier	Sys_UpdateWindows
>10323	ExpressionStatement	 
>10324	AssignmentExpr	z . scale = 1
>10325	PrimaryExpression	1
>10326	MemberAccess	z . scale
>10327	Identifier	scale
>10328	Identifier	z
>10336	FunctionDef	CMainFrame 
>10337	ParameterList	 
>10338	ReturnType	void
>10339	CompoundStatement	 
>10340	ExpressionStatement	 
>10341	CallExpression	Sys_UpdateWindows ( W_XY | W_XY_OVERLAY )
>10342	ArgumentList	W_XY | W_XY_OVERLAY
>10343	Argument	W_XY | W_XY_OVERLAY
>10344	InclusiveOrExpression	W_XY | W_XY_OVERLAY
>10345	Identifier	W_XY_OVERLAY
>10346	Identifier	W_XY
>10347	Callee	Sys_UpdateWindows
>10348	Identifier	Sys_UpdateWindows
>10349	IfStatement	if ( m_pYZWnd && m_pYZWnd -> Active ( ) )
>10350	CompoundStatement	 
>10351	IfStatement	if ( m_pYZWnd -> Scale ( ) > 20 )
>10352	ExpressionStatement	 
>10353	CallExpression	m_pYZWnd -> SetScale ( 20 )
>10354	ArgumentList	20
>10355	Argument	20
>10356	PrimaryExpression	20
>10357	Callee	m_pYZWnd -> SetScale
>10358	PtrMemberAccess	m_pYZWnd -> SetScale
>10359	Identifier	SetScale
>10360	Identifier	m_pYZWnd
>10361	Condition	 
>10362	RelationalExpression	m_pYZWnd -> Scale ( ) > 20
>10363	PrimaryExpression	20
>10364	CallExpression	m_pYZWnd -> Scale ( )
>10365	ArgumentList	 
>10366	Callee	m_pYZWnd -> Scale
>10367	PtrMemberAccess	m_pYZWnd -> Scale
>10368	Identifier	Scale
>10369	Identifier	m_pYZWnd
>10370	ExpressionStatement	 
>10371	CallExpression	m_pYZWnd -> SetScale ( m_pYZWnd -> Scale ( ) * 5.0 / 4 )
>10372	ArgumentList	m_pYZWnd -> Scale ( ) * 5.0 / 4
>10373	Argument	m_pYZWnd -> Scale ( ) * 5.0 / 4
>10374	MultiplicativeExpression	m_pYZWnd -> Scale ( ) * 5.0 / 4
>10375	MultiplicativeExpression	5.0 / 4
>10376	PrimaryExpression	4
>10377	PrimaryExpression	5.0
>10378	CallExpression	m_pYZWnd -> Scale ( )
>10379	ArgumentList	 
>10380	Callee	m_pYZWnd -> Scale
>10381	PtrMemberAccess	m_pYZWnd -> Scale
>10382	Identifier	Scale
>10383	Identifier	m_pYZWnd
>10384	Callee	m_pYZWnd -> SetScale
>10385	PtrMemberAccess	m_pYZWnd -> SetScale
>10386	Identifier	SetScale
>10387	Identifier	m_pYZWnd
>10388	Condition	 
>10389	AndExpression	m_pYZWnd && m_pYZWnd -> Active ( )
>10390	CallExpression	m_pYZWnd -> Active ( )
>10391	ArgumentList	 
>10392	Callee	m_pYZWnd -> Active
>10393	PtrMemberAccess	m_pYZWnd -> Active
>10394	Identifier	Active
>10395	Identifier	m_pYZWnd
>10396	Identifier	m_pYZWnd
>10397	IfStatement	if ( m_pXZWnd && m_pXZWnd -> Active ( ) )
>10398	CompoundStatement	 
>10399	IfStatement	if ( m_pXZWnd -> Scale ( ) > 20 )
>10400	ExpressionStatement	 
>10401	CallExpression	m_pXZWnd -> SetScale ( 20 )
>10402	ArgumentList	20
>10403	Argument	20
>10404	PrimaryExpression	20
>10405	Callee	m_pXZWnd -> SetScale
>10406	PtrMemberAccess	m_pXZWnd -> SetScale
>10407	Identifier	SetScale
>10408	Identifier	m_pXZWnd
>10409	Condition	 
>10410	RelationalExpression	m_pXZWnd -> Scale ( ) > 20
>10411	PrimaryExpression	20
>10412	CallExpression	m_pXZWnd -> Scale ( )
>10413	ArgumentList	 
>10414	Callee	m_pXZWnd -> Scale
>10415	PtrMemberAccess	m_pXZWnd -> Scale
>10416	Identifier	Scale
>10417	Identifier	m_pXZWnd
>10418	ExpressionStatement	 
>10419	CallExpression	m_pXZWnd -> SetScale ( m_pXZWnd -> Scale ( ) * 5.0 / 4 )
>10420	ArgumentList	m_pXZWnd -> Scale ( ) * 5.0 / 4
>10421	Argument	m_pXZWnd -> Scale ( ) * 5.0 / 4
>10422	MultiplicativeExpression	m_pXZWnd -> Scale ( ) * 5.0 / 4
>10423	MultiplicativeExpression	5.0 / 4
>10424	PrimaryExpression	4
>10425	PrimaryExpression	5.0
>10426	CallExpression	m_pXZWnd -> Scale ( )
>10427	ArgumentList	 
>10428	Callee	m_pXZWnd -> Scale
>10429	PtrMemberAccess	m_pXZWnd -> Scale
>10430	Identifier	Scale
>10431	Identifier	m_pXZWnd
>10432	Callee	m_pXZWnd -> SetScale
>10433	PtrMemberAccess	m_pXZWnd -> SetScale
>10434	Identifier	SetScale
>10435	Identifier	m_pXZWnd
>10436	Condition	 
>10437	AndExpression	m_pXZWnd && m_pXZWnd -> Active ( )
>10438	CallExpression	m_pXZWnd -> Active ( )
>10439	ArgumentList	 
>10440	Callee	m_pXZWnd -> Active
>10441	PtrMemberAccess	m_pXZWnd -> Active
>10442	Identifier	Active
>10443	Identifier	m_pXZWnd
>10444	Identifier	m_pXZWnd
>10445	IfStatement	if ( m_pXYWnd && m_pXYWnd -> Active ( ) )
>10446	CompoundStatement	 
>10447	IfStatement	if ( m_pXYWnd -> Scale ( ) > 20 )
>10448	ExpressionStatement	 
>10449	CallExpression	m_pXYWnd -> SetScale ( 20 )
>10450	ArgumentList	20
>10451	Argument	20
>10452	PrimaryExpression	20
>10453	Callee	m_pXYWnd -> SetScale
>10454	PtrMemberAccess	m_pXYWnd -> SetScale
>10455	Identifier	SetScale
>10456	Identifier	m_pXYWnd
>10457	Condition	 
>10458	RelationalExpression	m_pXYWnd -> Scale ( ) > 20
>10459	PrimaryExpression	20
>10460	CallExpression	m_pXYWnd -> Scale ( )
>10461	ArgumentList	 
>10462	Callee	m_pXYWnd -> Scale
>10463	PtrMemberAccess	m_pXYWnd -> Scale
>10464	Identifier	Scale
>10465	Identifier	m_pXYWnd
>10466	ExpressionStatement	 
>10467	CallExpression	m_pXYWnd -> SetScale ( m_pXYWnd -> Scale ( ) * 5.0 / 4 )
>10468	ArgumentList	m_pXYWnd -> Scale ( ) * 5.0 / 4
>10469	Argument	m_pXYWnd -> Scale ( ) * 5.0 / 4
>10470	MultiplicativeExpression	m_pXYWnd -> Scale ( ) * 5.0 / 4
>10471	MultiplicativeExpression	5.0 / 4
>10472	PrimaryExpression	4
>10473	PrimaryExpression	5.0
>10474	CallExpression	m_pXYWnd -> Scale ( )
>10475	ArgumentList	 
>10476	Callee	m_pXYWnd -> Scale
>10477	PtrMemberAccess	m_pXYWnd -> Scale
>10478	Identifier	Scale
>10479	Identifier	m_pXYWnd
>10480	Callee	m_pXYWnd -> SetScale
>10481	PtrMemberAccess	m_pXYWnd -> SetScale
>10482	Identifier	SetScale
>10483	Identifier	m_pXYWnd
>10484	Condition	 
>10485	AndExpression	m_pXYWnd && m_pXYWnd -> Active ( )
>10486	CallExpression	m_pXYWnd -> Active ( )
>10487	ArgumentList	 
>10488	Callee	m_pXYWnd -> Active
>10489	PtrMemberAccess	m_pXYWnd -> Active
>10490	Identifier	Active
>10491	Identifier	m_pXYWnd
>10492	Identifier	m_pXYWnd
>10510	FunctionDef	CMainFrame 
>10511	ParameterList	 
>10512	ReturnType	void
>10513	CompoundStatement	 
>10514	ExpressionStatement	 
>10515	CallExpression	Sys_UpdateWindows ( W_XY | W_XY_OVERLAY )
>10516	ArgumentList	W_XY | W_XY_OVERLAY
>10517	Argument	W_XY | W_XY_OVERLAY
>10518	InclusiveOrExpression	W_XY | W_XY_OVERLAY
>10519	Identifier	W_XY_OVERLAY
>10520	Identifier	W_XY
>10521	Callee	Sys_UpdateWindows
>10522	Identifier	Sys_UpdateWindows
>10523	IfStatement	if ( m_pYZWnd && m_pYZWnd -> Active ( ) )
>10524	CompoundStatement	 
>10525	IfStatement	if ( m_pYZWnd -> Scale ( ) < 0.1 / 32 )
>10526	ExpressionStatement	 
>10527	CallExpression	m_pYZWnd -> SetScale ( 0.1 / 32 )
>10528	ArgumentList	0.1 / 32
>10529	Argument	0.1 / 32
>10530	MultiplicativeExpression	0.1 / 32
>10531	PrimaryExpression	32
>10532	PrimaryExpression	0.1
>10533	Callee	m_pYZWnd -> SetScale
>10534	PtrMemberAccess	m_pYZWnd -> SetScale
>10535	Identifier	SetScale
>10536	Identifier	m_pYZWnd
>10537	Condition	 
>10538	RelationalExpression	m_pYZWnd -> Scale ( ) < 0.1 / 32
>10539	MultiplicativeExpression	0.1 / 32
>10540	PrimaryExpression	32
>10541	PrimaryExpression	0.1
>10542	CallExpression	m_pYZWnd -> Scale ( )
>10543	ArgumentList	 
>10544	Callee	m_pYZWnd -> Scale
>10545	PtrMemberAccess	m_pYZWnd -> Scale
>10546	Identifier	Scale
>10547	Identifier	m_pYZWnd
>10548	ExpressionStatement	 
>10549	CallExpression	m_pYZWnd -> SetScale ( m_pYZWnd -> Scale ( ) * 4.0 / 5 )
>10550	ArgumentList	m_pYZWnd -> Scale ( ) * 4.0 / 5
>10551	Argument	m_pYZWnd -> Scale ( ) * 4.0 / 5
>10552	MultiplicativeExpression	m_pYZWnd -> Scale ( ) * 4.0 / 5
>10553	MultiplicativeExpression	4.0 / 5
>10554	PrimaryExpression	5
>10555	PrimaryExpression	4.0
>10556	CallExpression	m_pYZWnd -> Scale ( )
>10557	ArgumentList	 
>10558	Callee	m_pYZWnd -> Scale
>10559	PtrMemberAccess	m_pYZWnd -> Scale
>10560	Identifier	Scale
>10561	Identifier	m_pYZWnd
>10562	Callee	m_pYZWnd -> SetScale
>10563	PtrMemberAccess	m_pYZWnd -> SetScale
>10564	Identifier	SetScale
>10565	Identifier	m_pYZWnd
>10566	Condition	 
>10567	AndExpression	m_pYZWnd && m_pYZWnd -> Active ( )
>10568	CallExpression	m_pYZWnd -> Active ( )
>10569	ArgumentList	 
>10570	Callee	m_pYZWnd -> Active
>10571	PtrMemberAccess	m_pYZWnd -> Active
>10572	Identifier	Active
>10573	Identifier	m_pYZWnd
>10574	Identifier	m_pYZWnd
>10575	IfStatement	if ( m_pXZWnd && m_pXZWnd -> Active ( ) )
>10576	CompoundStatement	 
>10577	IfStatement	if ( m_pXZWnd -> Scale ( ) < 0.1 / 32 )
>10578	ExpressionStatement	 
>10579	CallExpression	m_pXZWnd -> SetScale ( 0.1 / 32 )
>10580	ArgumentList	0.1 / 32
>10581	Argument	0.1 / 32
>10582	MultiplicativeExpression	0.1 / 32
>10583	PrimaryExpression	32
>10584	PrimaryExpression	0.1
>10585	Callee	m_pXZWnd -> SetScale
>10586	PtrMemberAccess	m_pXZWnd -> SetScale
>10587	Identifier	SetScale
>10588	Identifier	m_pXZWnd
>10589	Condition	 
>10590	RelationalExpression	m_pXZWnd -> Scale ( ) < 0.1 / 32
>10591	MultiplicativeExpression	0.1 / 32
>10592	PrimaryExpression	32
>10593	PrimaryExpression	0.1
>10594	CallExpression	m_pXZWnd -> Scale ( )
>10595	ArgumentList	 
>10596	Callee	m_pXZWnd -> Scale
>10597	PtrMemberAccess	m_pXZWnd -> Scale
>10598	Identifier	Scale
>10599	Identifier	m_pXZWnd
>10600	ExpressionStatement	 
>10601	CallExpression	m_pXZWnd -> SetScale ( m_pXZWnd -> Scale ( ) * 4.0 / 5 )
>10602	ArgumentList	m_pXZWnd -> Scale ( ) * 4.0 / 5
>10603	Argument	m_pXZWnd -> Scale ( ) * 4.0 / 5
>10604	MultiplicativeExpression	m_pXZWnd -> Scale ( ) * 4.0 / 5
>10605	MultiplicativeExpression	4.0 / 5
>10606	PrimaryExpression	5
>10607	PrimaryExpression	4.0
>10608	CallExpression	m_pXZWnd -> Scale ( )
>10609	ArgumentList	 
>10610	Callee	m_pXZWnd -> Scale
>10611	PtrMemberAccess	m_pXZWnd -> Scale
>10612	Identifier	Scale
>10613	Identifier	m_pXZWnd
>10614	Callee	m_pXZWnd -> SetScale
>10615	PtrMemberAccess	m_pXZWnd -> SetScale
>10616	Identifier	SetScale
>10617	Identifier	m_pXZWnd
>10618	Condition	 
>10619	AndExpression	m_pXZWnd && m_pXZWnd -> Active ( )
>10620	CallExpression	m_pXZWnd -> Active ( )
>10621	ArgumentList	 
>10622	Callee	m_pXZWnd -> Active
>10623	PtrMemberAccess	m_pXZWnd -> Active
>10624	Identifier	Active
>10625	Identifier	m_pXZWnd
>10626	Identifier	m_pXZWnd
>10627	IfStatement	if ( m_pXYWnd && m_pXYWnd -> Active ( ) )
>10628	CompoundStatement	 
>10629	IfStatement	if ( m_pXYWnd -> Scale ( ) < 0.1 / 32 )
>10630	ExpressionStatement	 
>10631	CallExpression	m_pXYWnd -> SetScale ( 0.1 / 32 )
>10632	ArgumentList	0.1 / 32
>10633	Argument	0.1 / 32
>10634	MultiplicativeExpression	0.1 / 32
>10635	PrimaryExpression	32
>10636	PrimaryExpression	0.1
>10637	Callee	m_pXYWnd -> SetScale
>10638	PtrMemberAccess	m_pXYWnd -> SetScale
>10639	Identifier	SetScale
>10640	Identifier	m_pXYWnd
>10641	Condition	 
>10642	RelationalExpression	m_pXYWnd -> Scale ( ) < 0.1 / 32
>10643	MultiplicativeExpression	0.1 / 32
>10644	PrimaryExpression	32
>10645	PrimaryExpression	0.1
>10646	CallExpression	m_pXYWnd -> Scale ( )
>10647	ArgumentList	 
>10648	Callee	m_pXYWnd -> Scale
>10649	PtrMemberAccess	m_pXYWnd -> Scale
>10650	Identifier	Scale
>10651	Identifier	m_pXYWnd
>10652	ExpressionStatement	 
>10653	CallExpression	m_pXYWnd -> SetScale ( m_pXYWnd -> Scale ( ) * 4.0 / 5 )
>10654	ArgumentList	m_pXYWnd -> Scale ( ) * 4.0 / 5
>10655	Argument	m_pXYWnd -> Scale ( ) * 4.0 / 5
>10656	MultiplicativeExpression	m_pXYWnd -> Scale ( ) * 4.0 / 5
>10657	MultiplicativeExpression	4.0 / 5
>10658	PrimaryExpression	5
>10659	PrimaryExpression	4.0
>10660	CallExpression	m_pXYWnd -> Scale ( )
>10661	ArgumentList	 
>10662	Callee	m_pXYWnd -> Scale
>10663	PtrMemberAccess	m_pXYWnd -> Scale
>10664	Identifier	Scale
>10665	Identifier	m_pXYWnd
>10666	Callee	m_pXYWnd -> SetScale
>10667	PtrMemberAccess	m_pXYWnd -> SetScale
>10668	Identifier	SetScale
>10669	Identifier	m_pXYWnd
>10670	Condition	 
>10671	AndExpression	m_pXYWnd && m_pXYWnd -> Active ( )
>10672	CallExpression	m_pXYWnd -> Active ( )
>10673	ArgumentList	 
>10674	Callee	m_pXYWnd -> Active
>10675	PtrMemberAccess	m_pXYWnd -> Active
>10676	Identifier	Active
>10677	Identifier	m_pXYWnd
>10678	Identifier	m_pXYWnd
>10696	FunctionDef	CMainFrame 
>10697	ParameterList	 
>10698	ReturnType	void
>10699	CompoundStatement	 
>10700	ExpressionStatement	 
>10701	CallExpression	Sys_UpdateWindows ( W_Z | W_Z_OVERLAY )
>10702	ArgumentList	W_Z | W_Z_OVERLAY
>10703	Argument	W_Z | W_Z_OVERLAY
>10704	InclusiveOrExpression	W_Z | W_Z_OVERLAY
>10705	Identifier	W_Z_OVERLAY
>10706	Identifier	W_Z
>10707	Callee	Sys_UpdateWindows
>10708	Identifier	Sys_UpdateWindows
>10709	IfStatement	if ( z . scale > 4 )
>10710	ExpressionStatement	 
>10711	AssignmentExpr	z . scale = 4
>10712	PrimaryExpression	4
>10713	MemberAccess	z . scale
>10714	Identifier	scale
>10715	Identifier	z
>10716	Condition	 
>10717	RelationalExpression	z . scale > 4
>10718	PrimaryExpression	4
>10719	MemberAccess	z . scale
>10720	Identifier	scale
>10721	Identifier	z
>10722	ExpressionStatement	 
>10723	AssignmentExpr	z . scale *= 5.0 / 4
>10724	MultiplicativeExpression	5.0 / 4
>10725	PrimaryExpression	4
>10726	PrimaryExpression	5.0
>10727	MemberAccess	z . scale
>10728	Identifier	scale
>10729	Identifier	z
>10737	FunctionDef	CMainFrame 
>10738	ParameterList	 
>10739	ReturnType	void
>10740	CompoundStatement	 
>10741	ExpressionStatement	 
>10742	CallExpression	Sys_UpdateWindows ( W_Z | W_Z_OVERLAY )
>10743	ArgumentList	W_Z | W_Z_OVERLAY
>10744	Argument	W_Z | W_Z_OVERLAY
>10745	InclusiveOrExpression	W_Z | W_Z_OVERLAY
>10746	Identifier	W_Z_OVERLAY
>10747	Identifier	W_Z
>10748	Callee	Sys_UpdateWindows
>10749	Identifier	Sys_UpdateWindows
>10750	IfStatement	if ( z . scale < 0.125 )
>10751	ExpressionStatement	 
>10752	AssignmentExpr	z . scale = 0.125
>10753	PrimaryExpression	0.125
>10754	MemberAccess	z . scale
>10755	Identifier	scale
>10756	Identifier	z
>10757	Condition	 
>10758	RelationalExpression	z . scale < 0.125
>10759	PrimaryExpression	0.125
>10760	MemberAccess	z . scale
>10761	Identifier	scale
>10762	Identifier	z
>10763	ExpressionStatement	 
>10764	AssignmentExpr	z . scale *= 4.0 / 5
>10765	MultiplicativeExpression	4.0 / 5
>10766	PrimaryExpression	5
>10767	PrimaryExpression	4.0
>10768	MemberAccess	z . scale
>10769	Identifier	scale
>10770	Identifier	z
>10778	FunctionDef	CMainFrame 
>10779	ParameterList	 
>10780	ReturnType	void
>10781	CompoundStatement	 
>10782	ExpressionStatement	 
>10783	CallExpression	Sys_UpdateWindows ( W_XY )
>10784	ArgumentList	W_XY
>10785	Argument	W_XY
>10786	Identifier	W_XY
>10787	Callee	Sys_UpdateWindows
>10788	Identifier	Sys_UpdateWindows
>10789	IfStatement	if ( m_nCurrentStyle != 2 )
>10790	CompoundStatement	 
>10791	ExpressionStatement	 
>10792	CallExpression	m_pXYWnd -> PositionView ( )
>10793	ArgumentList	 
>10794	Callee	m_pXYWnd -> PositionView
>10795	PtrMemberAccess	m_pXYWnd -> PositionView
>10796	Identifier	PositionView
>10797	Identifier	m_pXYWnd
>10798	ExpressionStatement	 
>10799	CallExpression	m_pXYWnd -> SetViewType ( XZ )
>10800	ArgumentList	XZ
>10801	Argument	XZ
>10802	Identifier	XZ
>10803	Callee	m_pXYWnd -> SetViewType
>10804	PtrMemberAccess	m_pXYWnd -> SetViewType
>10805	Identifier	SetViewType
>10806	Identifier	m_pXYWnd
>10807	Condition	 
>10808	EqualityExpression	m_nCurrentStyle != 2
>10809	PrimaryExpression	2
>10810	Identifier	m_nCurrentStyle
>10818	FunctionDef	CMainFrame 
>10819	ParameterList	unsigned int nID
>10820	Parameter	 
>10821	Identifier	nID
>10822	ParameterType	unsigned int
>10823	ReturnType	void
>10824	CompoundStatement	 
>10825	ExpressionStatement	 
>10826	CallExpression	Sys_UpdateWindows ( W_XY | W_Z )
>10827	ArgumentList	W_XY | W_Z
>10828	Argument	W_XY | W_Z
>10829	InclusiveOrExpression	W_XY | W_Z
>10830	Identifier	W_Z
>10831	Identifier	W_XY
>10832	Callee	Sys_UpdateWindows
>10833	Identifier	Sys_UpdateWindows
>10834	ExpressionStatement	 
>10835	CallExpression	CheckMenuItem ( hMenu , nID , MF_BYCOMMAND | MF_CHECKED )
>10836	ArgumentList	hMenu
>10837	Argument	MF_BYCOMMAND | MF_CHECKED
>10838	InclusiveOrExpression	MF_BYCOMMAND | MF_CHECKED
>10839	Identifier	MF_CHECKED
>10840	Identifier	MF_BYCOMMAND
>10841	Argument	nID
>10842	Identifier	nID
>10843	Argument	hMenu
>10844	Identifier	hMenu
>10845	Callee	CheckMenuItem
>10846	Identifier	CheckMenuItem
>10847	ExpressionStatement	 
>10848	CallExpression	SetGridStatus ( )
>10849	ArgumentList	 
>10850	Callee	SetGridStatus
>10851	Identifier	SetGridStatus
>10852	IfStatement	if ( g_PrefsDlg . m_bSnapTToGrid )
>10853	ExpressionStatement	 
>10854	AssignmentExpr	g_qeglobals . d_savedinfo . m_nTextureTweak = g_qeglobals . d_gridsize
>10855	MemberAccess	g_qeglobals . d_gridsize
>10856	Identifier	d_gridsize
>10857	Identifier	g_qeglobals
>10858	MemberAccess	g_qeglobals . d_savedinfo . m_nTextureTweak
>10859	Identifier	m_nTextureTweak
>10860	MemberAccess	g_qeglobals . d_savedinfo
>10861	Identifier	d_savedinfo
>10862	Identifier	g_qeglobals
>10863	Condition	 
>10864	MemberAccess	g_PrefsDlg . m_bSnapTToGrid
>10865	Identifier	m_bSnapTToGrid
>10866	Identifier	g_PrefsDlg
>10867	ExpressionStatement	 
>10868	AssignmentExpr	g_qeglobals . d_gridsize = 1 << g_qeglobals . d_gridsize
>10869	ShiftExpression	1 << g_qeglobals . d_gridsize
>10870	MemberAccess	g_qeglobals . d_gridsize
>10871	Identifier	d_gridsize
>10872	Identifier	g_qeglobals
>10873	PrimaryExpression	1
>10874	MemberAccess	g_qeglobals . d_gridsize
>10875	Identifier	d_gridsize
>10876	Identifier	g_qeglobals
>10877	SwitchStatement	switch ( nID )
>10878	CompoundStatement	 
>10879	BreakStatement	 
>10880	ExpressionStatement	 
>10881	AssignmentExpr	g_qeglobals . d_gridsize = 6
>10882	PrimaryExpression	6
>10883	MemberAccess	g_qeglobals . d_gridsize
>10884	Identifier	d_gridsize
>10885	Identifier	g_qeglobals
>10886	Label	 
>10887	Identifier	ID_GRID_64
>10888	BreakStatement	 
>10889	ExpressionStatement	 
>10890	AssignmentExpr	g_qeglobals . d_gridsize = 5
>10891	PrimaryExpression	5
>10892	MemberAccess	g_qeglobals . d_gridsize
>10893	Identifier	d_gridsize
>10894	Identifier	g_qeglobals
>10895	Label	 
>10896	Identifier	ID_GRID_32
>10897	BreakStatement	 
>10898	ExpressionStatement	 
>10899	AssignmentExpr	g_qeglobals . d_gridsize = 4
>10900	PrimaryExpression	4
>10901	MemberAccess	g_qeglobals . d_gridsize
>10902	Identifier	d_gridsize
>10903	Identifier	g_qeglobals
>10904	Label	 
>10905	Identifier	ID_GRID_16
>10906	BreakStatement	 
>10907	ExpressionStatement	 
>10908	AssignmentExpr	g_qeglobals . d_gridsize = 3
>10909	PrimaryExpression	3
>10910	MemberAccess	g_qeglobals . d_gridsize
>10911	Identifier	d_gridsize
>10912	Identifier	g_qeglobals
>10913	Label	 
>10914	Identifier	ID_GRID_8
>10915	BreakStatement	 
>10916	ExpressionStatement	 
>10917	AssignmentExpr	g_qeglobals . d_gridsize = 2
>10918	PrimaryExpression	2
>10919	MemberAccess	g_qeglobals . d_gridsize
>10920	Identifier	d_gridsize
>10921	Identifier	g_qeglobals
>10922	Label	 
>10923	Identifier	ID_GRID_4
>10924	BreakStatement	 
>10925	ExpressionStatement	 
>10926	AssignmentExpr	g_qeglobals . d_gridsize = 1
>10927	PrimaryExpression	1
>10928	MemberAccess	g_qeglobals . d_gridsize
>10929	Identifier	d_gridsize
>10930	Identifier	g_qeglobals
>10931	Label	 
>10932	Identifier	ID_GRID_2
>10933	BreakStatement	 
>10934	ExpressionStatement	 
>10935	AssignmentExpr	g_qeglobals . d_gridsize = 0
>10936	PrimaryExpression	0
>10937	MemberAccess	g_qeglobals . d_gridsize
>10938	Identifier	d_gridsize
>10939	Identifier	g_qeglobals
>10940	Label	 
>10941	Identifier	ID_GRID_1
>10942	Condition	 
>10943	Identifier	nID
>10944	ExpressionStatement	 
>10945	CallExpression	CheckMenuItem ( hMenu , ID_GRID_64 , MF_BYCOMMAND | MF_UNCHECKED )
>10946	ArgumentList	hMenu
>10947	Argument	MF_BYCOMMAND | MF_UNCHECKED
>10948	InclusiveOrExpression	MF_BYCOMMAND | MF_UNCHECKED
>10949	Identifier	MF_UNCHECKED
>10950	Identifier	MF_BYCOMMAND
>10951	Argument	ID_GRID_64
>10952	Identifier	ID_GRID_64
>10953	Argument	hMenu
>10954	Identifier	hMenu
>10955	Callee	CheckMenuItem
>10956	Identifier	CheckMenuItem
>10957	ExpressionStatement	 
>10958	CallExpression	CheckMenuItem ( hMenu , ID_GRID_32 , MF_BYCOMMAND | MF_UNCHECKED )
>10959	ArgumentList	hMenu
>10960	Argument	MF_BYCOMMAND | MF_UNCHECKED
>10961	InclusiveOrExpression	MF_BYCOMMAND | MF_UNCHECKED
>10962	Identifier	MF_UNCHECKED
>10963	Identifier	MF_BYCOMMAND
>10964	Argument	ID_GRID_32
>10965	Identifier	ID_GRID_32
>10966	Argument	hMenu
>10967	Identifier	hMenu
>10968	Callee	CheckMenuItem
>10969	Identifier	CheckMenuItem
>10970	ExpressionStatement	 
>10971	CallExpression	CheckMenuItem ( hMenu , ID_GRID_16 , MF_BYCOMMAND | MF_UNCHECKED )
>10972	ArgumentList	hMenu
>10973	Argument	MF_BYCOMMAND | MF_UNCHECKED
>10974	InclusiveOrExpression	MF_BYCOMMAND | MF_UNCHECKED
>10975	Identifier	MF_UNCHECKED
>10976	Identifier	MF_BYCOMMAND
>10977	Argument	ID_GRID_16
>10978	Identifier	ID_GRID_16
>10979	Argument	hMenu
>10980	Identifier	hMenu
>10981	Callee	CheckMenuItem
>10982	Identifier	CheckMenuItem
>10983	ExpressionStatement	 
>10984	CallExpression	CheckMenuItem ( hMenu , ID_GRID_8 , MF_BYCOMMAND | MF_UNCHECKED )
>10985	ArgumentList	hMenu
>10986	Argument	MF_BYCOMMAND | MF_UNCHECKED
>10987	InclusiveOrExpression	MF_BYCOMMAND | MF_UNCHECKED
>10988	Identifier	MF_UNCHECKED
>10989	Identifier	MF_BYCOMMAND
>10990	Argument	ID_GRID_8
>10991	Identifier	ID_GRID_8
>10992	Argument	hMenu
>10993	Identifier	hMenu
>10994	Callee	CheckMenuItem
>10995	Identifier	CheckMenuItem
>10996	ExpressionStatement	 
>10997	CallExpression	CheckMenuItem ( hMenu , ID_GRID_4 , MF_BYCOMMAND | MF_UNCHECKED )
>10998	ArgumentList	hMenu
>10999	Argument	MF_BYCOMMAND | MF_UNCHECKED
>11000	InclusiveOrExpression	MF_BYCOMMAND | MF_UNCHECKED
>11001	Identifier	MF_UNCHECKED
>11002	Identifier	MF_BYCOMMAND
>11003	Argument	ID_GRID_4
>11004	Identifier	ID_GRID_4
>11005	Argument	hMenu
>11006	Identifier	hMenu
>11007	Callee	CheckMenuItem
>11008	Identifier	CheckMenuItem
>11009	ExpressionStatement	 
>11010	CallExpression	CheckMenuItem ( hMenu , ID_GRID_2 , MF_BYCOMMAND | MF_UNCHECKED )
>11011	ArgumentList	hMenu
>11012	Argument	MF_BYCOMMAND | MF_UNCHECKED
>11013	InclusiveOrExpression	MF_BYCOMMAND | MF_UNCHECKED
>11014	Identifier	MF_UNCHECKED
>11015	Identifier	MF_BYCOMMAND
>11016	Argument	ID_GRID_2
>11017	Identifier	ID_GRID_2
>11018	Argument	hMenu
>11019	Identifier	hMenu
>11020	Callee	CheckMenuItem
>11021	Identifier	CheckMenuItem
>11022	ExpressionStatement	 
>11023	CallExpression	CheckMenuItem ( hMenu , ID_GRID_1 , MF_BYCOMMAND | MF_UNCHECKED )
>11024	ArgumentList	hMenu
>11025	Argument	MF_BYCOMMAND | MF_UNCHECKED
>11026	InclusiveOrExpression	MF_BYCOMMAND | MF_UNCHECKED
>11027	Identifier	MF_UNCHECKED
>11028	Identifier	MF_BYCOMMAND
>11029	Argument	ID_GRID_1
>11030	Identifier	ID_GRID_1
>11031	Argument	hMenu
>11032	Identifier	hMenu
>11033	Callee	CheckMenuItem
>11034	Identifier	CheckMenuItem
>11035	ExpressionStatement	 
>11036	CallExpression	GetMenu ( GetSafeHwnd ( ) )
>11037	ArgumentList	GetSafeHwnd ( )
>11038	Argument	GetSafeHwnd ( )
>11039	CallExpression	GetSafeHwnd ( )
>11040	ArgumentList	 
>11041	Callee	GetSafeHwnd
>11042	Identifier	GetSafeHwnd
>11043	Callee	GetMenu
>11044	Identifier	GetMenu
>11045	Statement	 
>11046	Statement	 
>11047	Statement	 
>11048	Statement	 
>11073	FunctionDef	CMainFrame 
>11074	ParameterList	 
>11075	ReturnType	void
>11076	CompoundStatement	 
>11077	IfStatement	if ( m_pTexWnd )
>11078	CompoundStatement	 
>11079	ExpressionStatement	 
>11080	CallExpression	m_pTexWnd -> RedrawWindow ( )
>11081	ArgumentList	 
>11082	Callee	m_pTexWnd -> RedrawWindow
>11083	PtrMemberAccess	m_pTexWnd -> RedrawWindow
>11084	Identifier	RedrawWindow
>11085	Identifier	m_pTexWnd
>11086	Condition	 
>11087	Identifier	m_pTexWnd
>11088	ExpressionStatement	 
>11089	CallExpression	Texture_ShowInuse ( )
>11090	ArgumentList	 
>11091	Callee	Texture_ShowInuse
>11092	Identifier	Texture_ShowInuse
>11093	ExpressionStatement	 
>11094	CallExpression	Sys_BeginWait ( )
>11095	ArgumentList	 
>11096	Callee	Sys_BeginWait
>11097	Identifier	Sys_BeginWait
>11104	FunctionDef	CMainFrame 
>11105	ParameterList	CCmdUI * pCmdUI
>11106	Parameter	 
>11107	Identifier	pCmdUI
>11108	ParameterType	CCmdUI *
>11109	ReturnType	void
>11110	CompoundStatement	 
>11111	ExpressionStatement	 
>11112	CallExpression	pCmdUI -> SetCheck ( texture_showinuse )
>11113	ArgumentList	texture_showinuse
>11114	Argument	texture_showinuse
>11115	Identifier	texture_showinuse
>11116	Callee	pCmdUI -> SetCheck
>11117	PtrMemberAccess	pCmdUI -> SetCheck
>11118	Identifier	SetCheck
>11119	Identifier	pCmdUI
>11125	FunctionDef	CMainFrame 
>11126	ParameterList	 
>11127	ReturnType	void
>11128	CompoundStatement	 
>11129	ExpressionStatement	 
>11130	CallExpression	DoSurface ( )
>11131	ArgumentList	 
>11132	Callee	DoSurface
>11133	Identifier	DoSurface
>11137	FunctionDef	CMainFrame 
>11138	ParameterList	 
>11139	ReturnType	void
>11140	CompoundStatement	 
>11141	ExpressionStatement	 
>11142	CallExpression	m_pCamWnd -> BenchMark ( )
>11143	ArgumentList	 
>11144	Callee	m_pCamWnd -> BenchMark
>11145	PtrMemberAccess	m_pCamWnd -> BenchMark
>11146	Identifier	BenchMark
>11147	Identifier	m_pCamWnd
>11152	FunctionDef	CMainFrame 
>11153	ParameterList	 
>11154	ReturnType	void
>11155	CompoundStatement	 
>11156	ExpressionStatement	 
>11157	CallExpression	DoFind ( )
>11158	ArgumentList	 
>11159	Callee	DoFind
>11160	Identifier	DoFind
>11164	FunctionDef	CMainFrame 
>11165	ParameterList	 
>11166	ReturnType	void
>11167	CompoundStatement	 
>11168	IfStatement	if ( fSave != g_qeglobals . d_savedinfo . fGamma )
>11169	CompoundStatement	 
>11170	ExpressionStatement	 
>11171	CallExpression	MessageBox ( \"You must restart Q3Radiant for Gamma settings to take place\" )
>11172	ArgumentList	\"You must restart Q3Radiant for Gamma settings to take place\"
>11173	Argument	\"You must restart Q3Radiant for Gamma settings to take place\"
>11174	PrimaryExpression	\"You must restart Q3Radiant for Gamma settings to take place\"
>11175	Callee	MessageBox
>11176	Identifier	MessageBox
>11177	Condition	 
>11178	EqualityExpression	fSave != g_qeglobals . d_savedinfo . fGamma
>11179	MemberAccess	g_qeglobals . d_savedinfo . fGamma
>11180	Identifier	fGamma
>11181	MemberAccess	g_qeglobals . d_savedinfo
>11182	Identifier	d_savedinfo
>11183	Identifier	g_qeglobals
>11184	Identifier	fSave
>11185	ExpressionStatement	 
>11186	CallExpression	DoGamma ( )
>11187	ArgumentList	 
>11188	Callee	DoGamma
>11189	Identifier	DoGamma
>11190	IdentifierDeclStatement	 
>11191	IdentifierDecl	fSave = g_qeglobals . d_savedinfo . fGamma
>11192	AssignmentExpr	fSave = g_qeglobals . d_savedinfo . fGamma
>11193	MemberAccess	g_qeglobals . d_savedinfo . fGamma
>11194	Identifier	fGamma
>11195	MemberAccess	g_qeglobals . d_savedinfo
>11196	Identifier	d_savedinfo
>11197	Identifier	g_qeglobals
>11198	Identifier	fSave
>11199	Identifier	fSave
>11200	IdentifierDeclType	float
>11208	FunctionDef	CMainFrame 
>11209	ParameterList	 
>11210	ReturnType	void
>11211	CompoundStatement	 
>11212	ExpressionStatement	 
>11213	CallExpression	Pointfile_Next ( )
>11214	ArgumentList	 
>11215	Callee	Pointfile_Next
>11216	Identifier	Pointfile_Next
>11220	FunctionDef	CMainFrame 
>11221	ParameterList	 
>11222	ReturnType	void
>11223	CompoundStatement	 
>11224	ExpressionStatement	 
>11225	CallExpression	Pointfile_Prev ( )
>11226	ArgumentList	 
>11227	Callee	Pointfile_Prev
>11228	Identifier	Pointfile_Prev
>11232	FunctionDef	CMainFrame 
>11233	ParameterList	 
>11234	ReturnType	void
>11235	CompoundStatement	 
>11236	ExpressionStatement	 
>11237	CallExpression	WXY_Print ( )
>11238	ArgumentList	 
>11239	Callee	WXY_Print
>11240	Identifier	WXY_Print
>11244	FunctionDef	CMainFrame 
>11245	ParameterList	 
>11246	ReturnType	void
>11247	CompoundStatement	 
>11248	IfStatement	if ( edit_entity )
>11249	CompoundStatement	 
>11250	ExpressionStatement	 
>11251	CallExpression	Sys_UpdateWindows ( W_ALL )
>11252	ArgumentList	W_ALL
>11253	Argument	W_ALL
>11254	Identifier	W_ALL
>11255	Callee	Sys_UpdateWindows
>11256	Identifier	Sys_UpdateWindows
>11257	IfStatement	if ( inspector_mode == W_ENTITY && ( DoColor ( COLOR_ENTITY ) ) )
>11258	CompoundStatement	 
>11259	ExpressionStatement	 
>11260	CallExpression	AddProp ( )
>11261	ArgumentList	 
>11262	Callee	AddProp
>11263	Identifier	AddProp
>11264	ExpressionStatement	 
>11265	CallExpression	SetWindowText ( hwndEnt [ EntKeyField ] , \"_color\" )
>11266	ArgumentList	hwndEnt [ EntKeyField ]
>11267	Argument	\"_color\"
>11268	PrimaryExpression	\"_color\"
>11269	Argument	hwndEnt [ EntKeyField ]
>11270	ArrayIndexing	hwndEnt [ EntKeyField ]
>11271	Identifier	EntKeyField
>11272	Identifier	hwndEnt
>11273	Callee	SetWindowText
>11274	Identifier	SetWindowText
>11275	Statement	 
>11276	ExpressionStatement	 
>11277	CallExpression	SetWindowText ( hwndEnt [ EntValueField ] , buffer )
>11278	ArgumentList	hwndEnt [ EntValueField ]
>11279	Argument	buffer
>11280	Identifier	buffer
>11281	Argument	hwndEnt [ EntValueField ]
>11282	ArrayIndexing	hwndEnt [ EntValueField ]
>11283	Identifier	EntValueField
>11284	Identifier	hwndEnt
>11285	Callee	SetWindowText
>11286	Identifier	SetWindowText
>11287	Statement	 
>11288	ExpressionStatement	 
>11289	CallExpression	sprintf ( buffer , \"%f %f %f\" , g_qeglobals . d_savedinfo . colors [ COLOR_ENTITY ] [ 0 ] , g_qeglobals . d_savedinfo \
>11290	ArgumentList	buffer
>11291	Argument	g_qeglobals . d_savedinfo . colors [ COLOR_ENTITY ] [ 2 ]
>11292	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_ENTITY ] [ 2 ]
>11293	PrimaryExpression	2
>11294	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_ENTITY ]
>11295	Identifier	COLOR_ENTITY
>11296	MemberAccess	g_qeglobals . d_savedinfo . colors
>11297	Identifier	colors
>11298	MemberAccess	g_qeglobals . d_savedinfo
>11299	Identifier	d_savedinfo
>11300	Identifier	g_qeglobals
>11301	Argument	g_qeglobals . d_savedinfo . colors [ COLOR_ENTITY ] [ 1 ]
>11302	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_ENTITY ] [ 1 ]
>11303	PrimaryExpression	1
>11304	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_ENTITY ]
>11305	Identifier	COLOR_ENTITY
>11306	MemberAccess	g_qeglobals . d_savedinfo . colors
>11307	Identifier	colors
>11308	MemberAccess	g_qeglobals . d_savedinfo
>11309	Identifier	d_savedinfo
>11310	Identifier	g_qeglobals
>11311	Argument	g_qeglobals . d_savedinfo . colors [ COLOR_ENTITY ] [ 0 ]
>11312	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_ENTITY ] [ 0 ]
>11313	PrimaryExpression	0
>11314	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_ENTITY ]
>11315	Identifier	COLOR_ENTITY
>11316	MemberAccess	g_qeglobals . d_savedinfo . colors
>11317	Identifier	colors
>11318	MemberAccess	g_qeglobals . d_savedinfo
>11319	Identifier	d_savedinfo
>11320	Identifier	g_qeglobals
>11321	Argument	\"%f %f %f\"
>11322	PrimaryExpression	\"%f %f %f\"
>11323	Argument	buffer
>11324	Identifier	buffer
>11325	Callee	sprintf
>11326	Identifier	sprintf
>11327	IdentifierDeclStatement	 
>11328	IdentifierDecl	buffer [ 100 ]
>11329	PrimaryExpression	100
>11330	Identifier	buffer
>11331	IdentifierDeclType	char [ 100 ]
>11332	Condition	 
>11333	AndExpression	inspector_mode == W_ENTITY && ( DoColor ( COLOR_ENTITY ) )
>11334	CallExpression	DoColor ( COLOR_ENTITY )
>11335	ArgumentList	COLOR_ENTITY
>11336	Argument	COLOR_ENTITY
>11337	Identifier	COLOR_ENTITY
>11338	Callee	DoColor
>11339	Identifier	DoColor
>11340	EqualityExpression	inspector_mode == W_ENTITY
>11341	Identifier	W_ENTITY
>11342	Identifier	inspector_mode
>11343	IfStatement	if ( strColor . GetLength ( ) > 0 )
>11344	CompoundStatement	 
>11345	IfStatement	if ( n == 3 )
>11346	CompoundStatement	 
>11347	ExpressionStatement	 
>11348	AssignmentExpr	g_qeglobals . d_savedinfo . colors [ COLOR_ENTITY ] [ 2 ] = fB
>11349	Identifier	fB
>11350	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_ENTITY ] [ 2 ]
>11351	PrimaryExpression	2
>11352	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_ENTITY ]
>11353	Identifier	COLOR_ENTITY
>11354	MemberAccess	g_qeglobals . d_savedinfo . colors
>11355	Identifier	colors
>11356	MemberAccess	g_qeglobals . d_savedinfo
>11357	Identifier	d_savedinfo
>11358	Identifier	g_qeglobals
>11359	ExpressionStatement	 
>11360	AssignmentExpr	g_qeglobals . d_savedinfo . colors [ COLOR_ENTITY ] [ 1 ] = fG
>11361	Identifier	fG
>11362	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_ENTITY ] [ 1 ]
>11363	PrimaryExpression	1
>11364	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_ENTITY ]
>11365	Identifier	COLOR_ENTITY
>11366	MemberAccess	g_qeglobals . d_savedinfo . colors
>11367	Identifier	colors
>11368	MemberAccess	g_qeglobals . d_savedinfo
>11369	Identifier	d_savedinfo
>11370	Identifier	g_qeglobals
>11371	ExpressionStatement	 
>11372	AssignmentExpr	g_qeglobals . d_savedinfo . colors [ COLOR_ENTITY ] [ 0 ] = fR
>11373	Identifier	fR
>11374	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_ENTITY ] [ 0 ]
>11375	PrimaryExpression	0
>11376	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_ENTITY ]
>11377	Identifier	COLOR_ENTITY
>11378	MemberAccess	g_qeglobals . d_savedinfo . colors
>11379	Identifier	colors
>11380	MemberAccess	g_qeglobals . d_savedinfo
>11381	Identifier	d_savedinfo
>11382	Identifier	g_qeglobals
>11383	Condition	 
>11384	EqualityExpression	n == 3
>11385	PrimaryExpression	3
>11386	Identifier	n
>11387	IdentifierDeclStatement	 
>11388	IdentifierDecl	n = sscanf ( strColor , \"%f %f %f\" , & fR , & fG , & fB )
>11389	AssignmentExpr	n = sscanf ( strColor , \"%f %f %f\" , & fR , & fG , & fB )
>11390	CallExpression	sscanf ( strColor , \"%f %f %f\" , & fR , & fG , & fB )
>11391	ArgumentList	strColor
>11392	Argument	& fB
>11393	UnaryOp	& fB
>11394	Identifier	fB
>11395	UnaryOperator	&
>11396	Argument	& fG
>11397	UnaryOp	& fG
>11398	Identifier	fG
>11399	UnaryOperator	&
>11400	Argument	& fR
>11401	UnaryOp	& fR
>11402	Identifier	fR
>11403	UnaryOperator	&
>11404	Argument	\"%f %f %f\"
>11405	PrimaryExpression	\"%f %f %f\"
>11406	Argument	strColor
>11407	Identifier	strColor
>11408	Callee	sscanf
>11409	Identifier	sscanf
>11410	Identifier	n
>11411	Identifier	n
>11412	IdentifierDeclType	int
>11413	IdentifierDeclStatement	 
>11414	IdentifierDecl	fB
>11415	Identifier	fB
>11416	IdentifierDeclType	float
>11417	IdentifierDecl	fG
>11418	Identifier	fG
>11419	IdentifierDeclType	float
>11420	IdentifierDecl	fR
>11421	Identifier	fR
>11422	IdentifierDeclType	float
>11423	Condition	 
>11424	RelationalExpression	strColor . GetLength ( ) > 0
>11425	PrimaryExpression	0
>11426	CallExpression	strColor . GetLength ( )
>11427	ArgumentList	 
>11428	Callee	strColor . GetLength
>11429	MemberAccess	strColor . GetLength
>11430	Identifier	GetLength
>11431	Identifier	strColor
>11432	IdentifierDeclStatement	 
>11433	IdentifierDecl	strColor = ValueForKey ( edit_entity , \"_color\" )
>11434	AssignmentExpr	strColor = ValueForKey ( edit_entity , \"_color\" )
>11435	CallExpression	ValueForKey ( edit_entity , \"_color\" )
>11436	ArgumentList	edit_entity
>11437	Argument	\"_color\"
>11438	PrimaryExpression	\"_color\"
>11439	Argument	edit_entity
>11440	Identifier	edit_entity
>11441	Callee	ValueForKey
>11442	Identifier	ValueForKey
>11443	Identifier	strColor
>11444	Identifier	strColor
>11445	IdentifierDeclType	CString
>11446	Condition	 
>11447	Identifier	edit_entity
>11486	FunctionDef	CMainFrame 
>11487	ParameterList	 
>11488	ReturnType	void
>11489	CompoundStatement	 
>11490	ExpressionStatement	 
>11491	CallExpression	Sys_UpdateWindows ( W_ALL )
>11492	ArgumentList	W_ALL
>11493	Argument	W_ALL
>11494	Identifier	W_ALL
>11495	Callee	Sys_UpdateWindows
>11496	Identifier	Sys_UpdateWindows
>11497	ExpressionStatement	 
>11498	CallExpression	DoColor ( COLOR_TEXTUREBACK )
>11499	ArgumentList	COLOR_TEXTUREBACK
>11500	Argument	COLOR_TEXTUREBACK
>11501	Identifier	COLOR_TEXTUREBACK
>11502	Callee	DoColor
>11503	Identifier	DoColor
>11509	FunctionDef	CMainFrame 
>11510	ParameterList	 
>11511	ReturnType	void
>11512	CompoundStatement	 
>11513	ExpressionStatement	 
>11514	CallExpression	Sys_UpdateWindows ( W_ALL )
>11515	ArgumentList	W_ALL
>11516	Argument	W_ALL
>11517	Identifier	W_ALL
>11518	Callee	Sys_UpdateWindows
>11519	Identifier	Sys_UpdateWindows
>11520	ExpressionStatement	 
>11521	CallExpression	DoColor ( COLOR_GRIDMAJOR )
>11522	ArgumentList	COLOR_GRIDMAJOR
>11523	Argument	COLOR_GRIDMAJOR
>11524	Identifier	COLOR_GRIDMAJOR
>11525	Callee	DoColor
>11526	Identifier	DoColor
>11532	FunctionDef	CMainFrame 
>11533	ParameterList	 
>11534	ReturnType	void
>11535	CompoundStatement	 
>11536	ExpressionStatement	 
>11537	CallExpression	Sys_UpdateWindows ( W_ALL )
>11538	ArgumentList	W_ALL
>11539	Argument	W_ALL
>11540	Identifier	W_ALL
>11541	Callee	Sys_UpdateWindows
>11542	Identifier	Sys_UpdateWindows
>11543	ExpressionStatement	 
>11544	CallExpression	DoColor ( COLOR_GRIDMINOR )
>11545	ArgumentList	COLOR_GRIDMINOR
>11546	Argument	COLOR_GRIDMINOR
>11547	Identifier	COLOR_GRIDMINOR
>11548	Callee	DoColor
>11549	Identifier	DoColor
>11555	FunctionDef	CMainFrame 
>11556	ParameterList	 
>11557	ReturnType	void
>11558	CompoundStatement	 
>11559	ExpressionStatement	 
>11560	CallExpression	Sys_UpdateWindows ( W_ALL )
>11561	ArgumentList	W_ALL
>11562	Argument	W_ALL
>11563	Identifier	W_ALL
>11564	Callee	Sys_UpdateWindows
>11565	Identifier	Sys_UpdateWindows
>11566	ExpressionStatement	 
>11567	CallExpression	DoColor ( COLOR_GRIDBACK )
>11568	ArgumentList	COLOR_GRIDBACK
>11569	Argument	COLOR_GRIDBACK
>11570	Identifier	COLOR_GRIDBACK
>11571	Callee	DoColor
>11572	Identifier	DoColor
>11578	FunctionDef	CMainFrame 
>11579	ParameterList	 
>11580	ReturnType	void
>11581	CompoundStatement	 
>11582	ExpressionStatement	 
>11583	CallExpression	Undo_End ( )
>11584	ArgumentList	 
>11585	Callee	Undo_End
>11586	Identifier	Undo_End
>11587	ExpressionStatement	 
>11588	CallExpression	Undo_EndBrushList ( & selected_brushes )
>11589	ArgumentList	& selected_brushes
>11590	Argument	& selected_brushes
>11591	UnaryOp	& selected_brushes
>11592	Identifier	selected_brushes
>11593	UnaryOperator	&
>11594	Callee	Undo_EndBrushList
>11595	Identifier	Undo_EndBrushList
>11596	ExpressionStatement	 
>11597	CallExpression	Brush_MakeSided ( 3 )
>11598	ArgumentList	3
>11599	Argument	3
>11600	PrimaryExpression	3
>11601	Callee	Brush_MakeSided
>11602	Identifier	Brush_MakeSided
>11603	ExpressionStatement	 
>11604	CallExpression	Undo_AddBrushList ( & selected_brushes )
>11605	ArgumentList	& selected_brushes
>11606	Argument	& selected_brushes
>11607	UnaryOp	& selected_brushes
>11608	Identifier	selected_brushes
>11609	UnaryOperator	&
>11610	Callee	Undo_AddBrushList
>11611	Identifier	Undo_AddBrushList
>11612	ExpressionStatement	 
>11613	CallExpression	Undo_Start ( \"3 sided\" )
>11614	ArgumentList	\"3 sided\"
>11615	Argument	\"3 sided\"
>11616	PrimaryExpression	\"3 sided\"
>11617	Callee	Undo_Start
>11618	Identifier	Undo_Start
>11623	FunctionDef	CMainFrame 
>11624	ParameterList	 
>11625	ReturnType	void
>11626	CompoundStatement	 
>11627	ExpressionStatement	 
>11628	CallExpression	Undo_End ( )
>11629	ArgumentList	 
>11630	Callee	Undo_End
>11631	Identifier	Undo_End
>11632	ExpressionStatement	 
>11633	CallExpression	Undo_EndBrushList ( & selected_brushes )
>11634	ArgumentList	& selected_brushes
>11635	Argument	& selected_brushes
>11636	UnaryOp	& selected_brushes
>11637	Identifier	selected_brushes
>11638	UnaryOperator	&
>11639	Callee	Undo_EndBrushList
>11640	Identifier	Undo_EndBrushList
>11641	ExpressionStatement	 
>11642	CallExpression	Brush_MakeSided ( 4 )
>11643	ArgumentList	4
>11644	Argument	4
>11645	PrimaryExpression	4
>11646	Callee	Brush_MakeSided
>11647	Identifier	Brush_MakeSided
>11648	ExpressionStatement	 
>11649	CallExpression	Undo_AddBrushList ( & selected_brushes )
>11650	ArgumentList	& selected_brushes
>11651	Argument	& selected_brushes
>11652	UnaryOp	& selected_brushes
>11653	Identifier	selected_brushes
>11654	UnaryOperator	&
>11655	Callee	Undo_AddBrushList
>11656	Identifier	Undo_AddBrushList
>11657	ExpressionStatement	 
>11658	CallExpression	Undo_Start ( \"4 sided\" )
>11659	ArgumentList	\"4 sided\"
>11660	Argument	\"4 sided\"
>11661	PrimaryExpression	\"4 sided\"
>11662	Callee	Undo_Start
>11663	Identifier	Undo_Start
>11668	FunctionDef	CMainFrame 
>11669	ParameterList	 
>11670	ReturnType	void
>11671	CompoundStatement	 
>11672	ExpressionStatement	 
>11673	CallExpression	Undo_End ( )
>11674	ArgumentList	 
>11675	Callee	Undo_End
>11676	Identifier	Undo_End
>11677	ExpressionStatement	 
>11678	CallExpression	Undo_EndBrushList ( & selected_brushes )
>11679	ArgumentList	& selected_brushes
>11680	Argument	& selected_brushes
>11681	UnaryOp	& selected_brushes
>11682	Identifier	selected_brushes
>11683	UnaryOperator	&
>11684	Callee	Undo_EndBrushList
>11685	Identifier	Undo_EndBrushList
>11686	ExpressionStatement	 
>11687	CallExpression	Brush_MakeSided ( 5 )
>11688	ArgumentList	5
>11689	Argument	5
>11690	PrimaryExpression	5
>11691	Callee	Brush_MakeSided
>11692	Identifier	Brush_MakeSided
>11693	ExpressionStatement	 
>11694	CallExpression	Undo_AddBrushList ( & selected_brushes )
>11695	ArgumentList	& selected_brushes
>11696	Argument	& selected_brushes
>11697	UnaryOp	& selected_brushes
>11698	Identifier	selected_brushes
>11699	UnaryOperator	&
>11700	Callee	Undo_AddBrushList
>11701	Identifier	Undo_AddBrushList
>11702	ExpressionStatement	 
>11703	CallExpression	Undo_Start ( \"5 sided\" )
>11704	ArgumentList	\"5 sided\"
>11705	Argument	\"5 sided\"
>11706	PrimaryExpression	\"5 sided\"
>11707	Callee	Undo_Start
>11708	Identifier	Undo_Start
>11713	FunctionDef	CMainFrame 
>11714	ParameterList	 
>11715	ReturnType	void
>11716	CompoundStatement	 
>11717	ExpressionStatement	 
>11718	CallExpression	Undo_End ( )
>11719	ArgumentList	 
>11720	Callee	Undo_End
>11721	Identifier	Undo_End
>11722	ExpressionStatement	 
>11723	CallExpression	Undo_EndBrushList ( & selected_brushes )
>11724	ArgumentList	& selected_brushes
>11725	Argument	& selected_brushes
>11726	UnaryOp	& selected_brushes
>11727	Identifier	selected_brushes
>11728	UnaryOperator	&
>11729	Callee	Undo_EndBrushList
>11730	Identifier	Undo_EndBrushList
>11731	ExpressionStatement	 
>11732	CallExpression	Brush_MakeSided ( 6 )
>11733	ArgumentList	6
>11734	Argument	6
>11735	PrimaryExpression	6
>11736	Callee	Brush_MakeSided
>11737	Identifier	Brush_MakeSided
>11738	ExpressionStatement	 
>11739	CallExpression	Undo_AddBrushList ( & selected_brushes )
>11740	ArgumentList	& selected_brushes
>11741	Argument	& selected_brushes
>11742	UnaryOp	& selected_brushes
>11743	Identifier	selected_brushes
>11744	UnaryOperator	&
>11745	Callee	Undo_AddBrushList
>11746	Identifier	Undo_AddBrushList
>11747	ExpressionStatement	 
>11748	CallExpression	Undo_Start ( \"6 sided\" )
>11749	ArgumentList	\"6 sided\"
>11750	Argument	\"6 sided\"
>11751	PrimaryExpression	\"6 sided\"
>11752	Callee	Undo_Start
>11753	Identifier	Undo_Start
>11758	FunctionDef	CMainFrame 
>11759	ParameterList	 
>11760	ReturnType	void
>11761	CompoundStatement	 
>11762	ExpressionStatement	 
>11763	CallExpression	Undo_End ( )
>11764	ArgumentList	 
>11765	Callee	Undo_End
>11766	Identifier	Undo_End
>11767	ExpressionStatement	 
>11768	CallExpression	Undo_EndBrushList ( & selected_brushes )
>11769	ArgumentList	& selected_brushes
>11770	Argument	& selected_brushes
>11771	UnaryOp	& selected_brushes
>11772	Identifier	selected_brushes
>11773	UnaryOperator	&
>11774	Callee	Undo_EndBrushList
>11775	Identifier	Undo_EndBrushList
>11776	ExpressionStatement	 
>11777	CallExpression	Brush_MakeSided ( 7 )
>11778	ArgumentList	7
>11779	Argument	7
>11780	PrimaryExpression	7
>11781	Callee	Brush_MakeSided
>11782	Identifier	Brush_MakeSided
>11783	ExpressionStatement	 
>11784	CallExpression	Undo_AddBrushList ( & selected_brushes )
>11785	ArgumentList	& selected_brushes
>11786	Argument	& selected_brushes
>11787	UnaryOp	& selected_brushes
>11788	Identifier	selected_brushes
>11789	UnaryOperator	&
>11790	Callee	Undo_AddBrushList
>11791	Identifier	Undo_AddBrushList
>11792	ExpressionStatement	 
>11793	CallExpression	Undo_Start ( \"7 sided\" )
>11794	ArgumentList	\"7 sided\"
>11795	Argument	\"7 sided\"
>11796	PrimaryExpression	\"7 sided\"
>11797	Callee	Undo_Start
>11798	Identifier	Undo_Start
>11803	FunctionDef	CMainFrame 
>11804	ParameterList	 
>11805	ReturnType	void
>11806	CompoundStatement	 
>11807	ExpressionStatement	 
>11808	CallExpression	Undo_End ( )
>11809	ArgumentList	 
>11810	Callee	Undo_End
>11811	Identifier	Undo_End
>11812	ExpressionStatement	 
>11813	CallExpression	Undo_EndBrushList ( & selected_brushes )
>11814	ArgumentList	& selected_brushes
>11815	Argument	& selected_brushes
>11816	UnaryOp	& selected_brushes
>11817	Identifier	selected_brushes
>11818	UnaryOperator	&
>11819	Callee	Undo_EndBrushList
>11820	Identifier	Undo_EndBrushList
>11821	ExpressionStatement	 
>11822	CallExpression	Brush_MakeSided ( 8 )
>11823	ArgumentList	8
>11824	Argument	8
>11825	PrimaryExpression	8
>11826	Callee	Brush_MakeSided
>11827	Identifier	Brush_MakeSided
>11828	ExpressionStatement	 
>11829	CallExpression	Undo_AddBrushList ( & selected_brushes )
>11830	ArgumentList	& selected_brushes
>11831	Argument	& selected_brushes
>11832	UnaryOp	& selected_brushes
>11833	Identifier	selected_brushes
>11834	UnaryOperator	&
>11835	Callee	Undo_AddBrushList
>11836	Identifier	Undo_AddBrushList
>11837	ExpressionStatement	 
>11838	CallExpression	Undo_Start ( \"8 sided\" )
>11839	ArgumentList	\"8 sided\"
>11840	Argument	\"8 sided\"
>11841	PrimaryExpression	\"8 sided\"
>11842	Callee	Undo_Start
>11843	Identifier	Undo_Start
>11848	FunctionDef	CMainFrame 
>11849	ParameterList	 
>11850	ReturnType	void
>11851	CompoundStatement	 
>11852	ExpressionStatement	 
>11853	CallExpression	Undo_End ( )
>11854	ArgumentList	 
>11855	Callee	Undo_End
>11856	Identifier	Undo_End
>11857	ExpressionStatement	 
>11858	CallExpression	Undo_EndBrushList ( & selected_brushes )
>11859	ArgumentList	& selected_brushes
>11860	Argument	& selected_brushes
>11861	UnaryOp	& selected_brushes
>11862	Identifier	selected_brushes
>11863	UnaryOperator	&
>11864	Callee	Undo_EndBrushList
>11865	Identifier	Undo_EndBrushList
>11866	ExpressionStatement	 
>11867	CallExpression	Brush_MakeSided ( 9 )
>11868	ArgumentList	9
>11869	Argument	9
>11870	PrimaryExpression	9
>11871	Callee	Brush_MakeSided
>11872	Identifier	Brush_MakeSided
>11873	ExpressionStatement	 
>11874	CallExpression	Undo_AddBrushList ( & selected_brushes )
>11875	ArgumentList	& selected_brushes
>11876	Argument	& selected_brushes
>11877	UnaryOp	& selected_brushes
>11878	Identifier	selected_brushes
>11879	UnaryOperator	&
>11880	Callee	Undo_AddBrushList
>11881	Identifier	Undo_AddBrushList
>11882	ExpressionStatement	 
>11883	CallExpression	Undo_Start ( \"9 sided\" )
>11884	ArgumentList	\"9 sided\"
>11885	Argument	\"9 sided\"
>11886	PrimaryExpression	\"9 sided\"
>11887	Callee	Undo_Start
>11888	Identifier	Undo_Start
>11893	FunctionDef	CMainFrame 
>11894	ParameterList	 
>11895	ReturnType	void
>11896	CompoundStatement	 
>11897	ExpressionStatement	 
>11898	CallExpression	Undo_End ( )
>11899	ArgumentList	 
>11900	Callee	Undo_End
>11901	Identifier	Undo_End
>11902	ExpressionStatement	 
>11903	CallExpression	Undo_EndBrushList ( & selected_brushes )
>11904	ArgumentList	& selected_brushes
>11905	Argument	& selected_brushes
>11906	UnaryOp	& selected_brushes
>11907	Identifier	selected_brushes
>11908	UnaryOperator	&
>11909	Callee	Undo_EndBrushList
>11910	Identifier	Undo_EndBrushList
>11911	ExpressionStatement	 
>11912	CallExpression	DoSides ( )
>11913	ArgumentList	 
>11914	Callee	DoSides
>11915	Identifier	DoSides
>11916	ExpressionStatement	 
>11917	CallExpression	Undo_AddBrushList ( & selected_brushes )
>11918	ArgumentList	& selected_brushes
>11919	Argument	& selected_brushes
>11920	UnaryOp	& selected_brushes
>11921	Identifier	selected_brushes
>11922	UnaryOperator	&
>11923	Callee	Undo_AddBrushList
>11924	Identifier	Undo_AddBrushList
>11925	ExpressionStatement	 
>11926	CallExpression	Undo_Start ( \"arbitrary sided\" )
>11927	ArgumentList	\"arbitrary sided\"
>11928	Argument	\"arbitrary sided\"
>11929	PrimaryExpression	\"arbitrary sided\"
>11930	Callee	Undo_Start
>11931	Identifier	Undo_Start
>11936	FunctionDef	CMainFrame 
>11937	ParameterList	 
>11938	ReturnType	void
>11939	CompoundStatement	 
>11940	ExpressionStatement	 
>11941	CallExpression	Undo_End ( )
>11942	ArgumentList	 
>11943	Callee	Undo_End
>11944	Identifier	Undo_End
>11945	ExpressionStatement	 
>11946	CallExpression	Undo_EndBrushList ( & selected_brushes )
>11947	ArgumentList	& selected_brushes
>11948	Argument	& selected_brushes
>11949	UnaryOp	& selected_brushes
>11950	Identifier	selected_brushes
>11951	UnaryOperator	&
>11952	Callee	Undo_EndBrushList
>11953	Identifier	Undo_EndBrushList
>11954	ForStatement	for ( brush_t * b = selected_brushes . next ; b != & selected_brushes ; b = b -> next )
>11955	CompoundStatement	 
>11956	IfStatement	if ( b -> owner -> eclass -> fixedsize )
>11957	CompoundStatement	 
>11958	ExpressionStatement	 
>11959	CallExpression	Brush_Build ( b )
>11960	ArgumentList	b
>11961	Argument	b
>11962	Identifier	b
>11963	Callee	Brush_Build
>11964	Identifier	Brush_Build
>11965	ExpressionStatement	 
>11966	CallExpression	SetKeyValue ( b -> owner , \"angle\" , itoa ( a , buf , 10 ) )
>11967	ArgumentList	b -> owner
>11968	Argument	itoa ( a , buf , 10 )
>11969	CallExpression	itoa ( a , buf , 10 )
>11970	ArgumentList	a
>11971	Argument	10
>11972	PrimaryExpression	10
>11973	Argument	buf
>11974	Identifier	buf
>11975	Argument	a
>11976	Identifier	a
>11977	Callee	itoa
>11978	Identifier	itoa
>11979	Argument	\"angle\"
>11980	PrimaryExpression	\"angle\"
>11981	Argument	b -> owner
>11982	PtrMemberAccess	b -> owner
>11983	Identifier	owner
>11984	Identifier	b
>11985	Callee	SetKeyValue
>11986	Identifier	SetKeyValue
>11987	ExpressionStatement	 
>11988	AssignmentExpr	a = div ( ( 180 - a ) , 180 ) . rem
>11989	MemberAccess	div ( ( 180 - a ) , 180 ) . rem
>11990	Identifier	rem
>11991	CallExpression	div ( ( 180 - a ) , 180 )
>11992	ArgumentList	180 - a
>11993	Argument	180
>11994	PrimaryExpression	180
>11995	Argument	180 - a
>11996	AdditiveExpression	180 - a
>11997	Identifier	a
>11998	PrimaryExpression	180
>11999	Callee	div
>12000	Identifier	div
>12001	Identifier	a
>12002	IdentifierDeclStatement	 
>12003	IdentifierDecl	a = FloatForKey ( b -> owner , \"angle\" )
>12004	AssignmentExpr	a = FloatForKey ( b -> owner , \"angle\" )
>12005	CallExpression	FloatForKey ( b -> owner , \"angle\" )
>12006	ArgumentList	b -> owner
>12007	Argument	\"angle\"
>12008	PrimaryExpression	\"angle\"
>12009	Argument	b -> owner
>12010	PtrMemberAccess	b -> owner
>12011	Identifier	owner
>12012	Identifier	b
>12013	Callee	FloatForKey
>12014	Identifier	FloatForKey
>12015	Identifier	a
>12016	Identifier	a
>12017	IdentifierDeclType	float
>12018	IdentifierDeclStatement	 
>12019	IdentifierDecl	buf [ 16 ]
>12020	PrimaryExpression	16
>12021	Identifier	buf
>12022	IdentifierDeclType	char [ 16 ]
>12023	Condition	 
>12024	PtrMemberAccess	b -> owner -> eclass -> fixedsize
>12025	Identifier	fixedsize
>12026	PtrMemberAccess	b -> owner -> eclass
>12027	Identifier	eclass
>12028	PtrMemberAccess	b -> owner
>12029	Identifier	owner
>12030	Identifier	b
>12031	AssignmentExpr	 
>12032	PtrMemberAccess	b -> next
>12033	Identifier	next
>12034	Identifier	b
>12035	Identifier	b
>12036	Condition	 
>12037	EqualityExpression	b != & selected_brushes
>12038	UnaryOp	& selected_brushes
>12039	Identifier	selected_brushes
>12040	UnaryOperator	&
>12041	Identifier	b
>12042	ForInit	 
>12043	IdentifierDeclStatement	brush_t * b = selected_brushes . next ;
>12044	IdentifierDecl	* b = selected_brushes . next
>12045	AssignmentExpr	* b = selected_brushes . next
>12046	MemberAccess	selected_brushes . next
>12047	Identifier	next
>12048	Identifier	selected_brushes
>12049	Identifier	b
>12050	Identifier	b
>12051	IdentifierDeclType	brush_t *
>12052	ExpressionStatement	 
>12053	CallExpression	Select_FlipAxis ( 0 )
>12054	ArgumentList	0
>12055	Argument	0
>12056	PrimaryExpression	0
>12057	Callee	Select_FlipAxis
>12058	Identifier	Select_FlipAxis
>12059	ExpressionStatement	 
>12060	CallExpression	Undo_AddBrushList ( & selected_brushes )
>12061	ArgumentList	& selected_brushes
>12062	Argument	& selected_brushes
>12063	UnaryOp	& selected_brushes
>12064	Identifier	selected_brushes
>12065	UnaryOperator	&
>12066	Callee	Undo_AddBrushList
>12067	Identifier	Undo_AddBrushList
>12068	ExpressionStatement	 
>12069	CallExpression	Undo_Start ( \"flip X\" )
>12070	ArgumentList	\"flip X\"
>12071	Argument	\"flip X\"
>12072	PrimaryExpression	\"flip X\"
>12073	Callee	Undo_Start
>12074	Identifier	Undo_Start
>12098	FunctionDef	CMainFrame 
>12099	ParameterList	 
>12100	ReturnType	void
>12101	CompoundStatement	 
>12102	ExpressionStatement	 
>12103	CallExpression	Undo_End ( )
>12104	ArgumentList	 
>12105	Callee	Undo_End
>12106	Identifier	Undo_End
>12107	ExpressionStatement	 
>12108	CallExpression	Undo_EndBrushList ( & selected_brushes )
>12109	ArgumentList	& selected_brushes
>12110	Argument	& selected_brushes
>12111	UnaryOp	& selected_brushes
>12112	Identifier	selected_brushes
>12113	UnaryOperator	&
>12114	Callee	Undo_EndBrushList
>12115	Identifier	Undo_EndBrushList
>12116	ForStatement	for ( brush_t * b = selected_brushes . next ; b != & selected_brushes ; b = b -> next )
>12117	CompoundStatement	 
>12118	IfStatement	if ( b -> owner -> eclass -> fixedsize )
>12119	CompoundStatement	 
>12120	ExpressionStatement	 
>12121	CallExpression	Brush_Build ( b )
>12122	ArgumentList	b
>12123	Argument	b
>12124	Identifier	b
>12125	Callee	Brush_Build
>12126	Identifier	Brush_Build
>12127	ExpressionStatement	 
>12128	CallExpression	SetKeyValue ( b -> owner , \"angle\" , itoa ( a , buf , 10 ) )
>12129	ArgumentList	b -> owner
>12130	Argument	itoa ( a , buf , 10 )
>12131	CallExpression	itoa ( a , buf , 10 )
>12132	ArgumentList	a
>12133	Argument	10
>12134	PrimaryExpression	10
>12135	Argument	buf
>12136	Identifier	buf
>12137	Argument	a
>12138	Identifier	a
>12139	Callee	itoa
>12140	Identifier	itoa
>12141	Argument	\"angle\"
>12142	PrimaryExpression	\"angle\"
>12143	Argument	b -> owner
>12144	PtrMemberAccess	b -> owner
>12145	Identifier	owner
>12146	Identifier	b
>12147	Callee	SetKeyValue
>12148	Identifier	SetKeyValue
>12149	IdentifierDeclStatement	 
>12150	IdentifierDecl	buf [ 16 ]
>12151	PrimaryExpression	16
>12152	Identifier	buf
>12153	IdentifierDeclType	char [ 16 ]
>12154	ExpressionStatement	 
>12155	AssignmentExpr	a = ( int ) a % 360
>12156	MultiplicativeExpression	( int ) a % 360
>12157	PrimaryExpression	360
>12158	CastExpression	( int ) a
>12159	Identifier	a
>12160	CastTarget	int
>12161	Identifier	a
>12162	IfStatement	if ( a == 90 || a == 270 )
>12163	ElseStatement	else
>12164	IfStatement	if ( a > 270 )
>12165	ElseStatement	else
>12166	IfStatement	if ( a > 180 )
>12167	ElseStatement	else
>12168	IfStatement	if ( a > 90 )
>12169	ElseStatement	else
>12170	ExpressionStatement	 
>12171	AssignmentExpr	a -= 90
>12172	PrimaryExpression	90
>12173	Identifier	a
>12174	ExpressionStatement	 
>12175	AssignmentExpr	a += 90
>12176	PrimaryExpression	90
>12177	Identifier	a
>12178	Condition	 
>12179	RelationalExpression	a > 90
>12180	PrimaryExpression	90
>12181	Identifier	a
>12182	ExpressionStatement	 
>12183	AssignmentExpr	a -= 90
>12184	PrimaryExpression	90
>12185	Identifier	a
>12186	Condition	 
>12187	RelationalExpression	a > 180
>12188	PrimaryExpression	180
>12189	Identifier	a
>12190	ExpressionStatement	 
>12191	AssignmentExpr	a += 90
>12192	PrimaryExpression	90
>12193	Identifier	a
>12194	Condition	 
>12195	RelationalExpression	a > 270
>12196	PrimaryExpression	270
>12197	Identifier	a
>12198	CompoundStatement	 
>12199	ExpressionStatement	 
>12200	AssignmentExpr	a += 180
>12201	PrimaryExpression	180
>12202	Identifier	a
>12203	Condition	 
>12204	OrExpression	a == 90 || a == 270
>12205	EqualityExpression	a == 270
>12206	PrimaryExpression	270
>12207	Identifier	a
>12208	EqualityExpression	a == 90
>12209	PrimaryExpression	90
>12210	Identifier	a
>12211	IfStatement	if ( a == 0 || a == 180 || a == 360 )
>12212	ContinueStatement	 
>12213	Condition	 
>12214	OrExpression	a == 0 || a == 180 || a == 360
>12215	OrExpression	a == 180 || a == 360
>12216	EqualityExpression	a == 360
>12217	PrimaryExpression	360
>12218	Identifier	a
>12219	EqualityExpression	a == 180
>12220	PrimaryExpression	180
>12221	Identifier	a
>12222	EqualityExpression	a == 0
>12223	PrimaryExpression	0
>12224	Identifier	a
>12225	IdentifierDeclStatement	 
>12226	IdentifierDecl	a = FloatForKey ( b -> owner , \"angle\" )
>12227	AssignmentExpr	a = FloatForKey ( b -> owner , \"angle\" )
>12228	CallExpression	FloatForKey ( b -> owner , \"angle\" )
>12229	ArgumentList	b -> owner
>12230	Argument	\"angle\"
>12231	PrimaryExpression	\"angle\"
>12232	Argument	b -> owner
>12233	PtrMemberAccess	b -> owner
>12234	Identifier	owner
>12235	Identifier	b
>12236	Callee	FloatForKey
>12237	Identifier	FloatForKey
>12238	Identifier	a
>12239	Identifier	a
>12240	IdentifierDeclType	float
>12241	Condition	 
>12242	PtrMemberAccess	b -> owner -> eclass -> fixedsize
>12243	Identifier	fixedsize
>12244	PtrMemberAccess	b -> owner -> eclass
>12245	Identifier	eclass
>12246	PtrMemberAccess	b -> owner
>12247	Identifier	owner
>12248	Identifier	b
>12249	AssignmentExpr	 
>12250	PtrMemberAccess	b -> next
>12251	Identifier	next
>12252	Identifier	b
>12253	Identifier	b
>12254	Condition	 
>12255	EqualityExpression	b != & selected_brushes
>12256	UnaryOp	& selected_brushes
>12257	Identifier	selected_brushes
>12258	UnaryOperator	&
>12259	Identifier	b
>12260	ForInit	 
>12261	IdentifierDeclStatement	brush_t * b = selected_brushes . next ;
>12262	IdentifierDecl	* b = selected_brushes . next
>12263	AssignmentExpr	* b = selected_brushes . next
>12264	MemberAccess	selected_brushes . next
>12265	Identifier	next
>12266	Identifier	selected_brushes
>12267	Identifier	b
>12268	Identifier	b
>12269	IdentifierDeclType	brush_t *
>12270	ExpressionStatement	 
>12271	CallExpression	Select_FlipAxis ( 1 )
>12272	ArgumentList	1
>12273	Argument	1
>12274	PrimaryExpression	1
>12275	Callee	Select_FlipAxis
>12276	Identifier	Select_FlipAxis
>12277	ExpressionStatement	 
>12278	CallExpression	Undo_AddBrushList ( & selected_brushes )
>12279	ArgumentList	& selected_brushes
>12280	Argument	& selected_brushes
>12281	UnaryOp	& selected_brushes
>12282	Identifier	selected_brushes
>12283	UnaryOperator	&
>12284	Callee	Undo_AddBrushList
>12285	Identifier	Undo_AddBrushList
>12286	ExpressionStatement	 
>12287	CallExpression	Undo_Start ( \"flip Y\" )
>12288	ArgumentList	\"flip Y\"
>12289	Argument	\"flip Y\"
>12290	PrimaryExpression	\"flip Y\"
>12291	Callee	Undo_Start
>12292	Identifier	Undo_Start
>12314	FunctionDef	CMainFrame 
>12315	ParameterList	 
>12316	ReturnType	void
>12317	CompoundStatement	 
>12318	ExpressionStatement	 
>12319	CallExpression	Undo_End ( )
>12320	ArgumentList	 
>12321	Callee	Undo_End
>12322	Identifier	Undo_End
>12323	ExpressionStatement	 
>12324	CallExpression	Undo_EndBrushList ( & selected_brushes )
>12325	ArgumentList	& selected_brushes
>12326	Argument	& selected_brushes
>12327	UnaryOp	& selected_brushes
>12328	Identifier	selected_brushes
>12329	UnaryOperator	&
>12330	Callee	Undo_EndBrushList
>12331	Identifier	Undo_EndBrushList
>12332	ExpressionStatement	 
>12333	CallExpression	Select_FlipAxis ( 2 )
>12334	ArgumentList	2
>12335	Argument	2
>12336	PrimaryExpression	2
>12337	Callee	Select_FlipAxis
>12338	Identifier	Select_FlipAxis
>12339	ExpressionStatement	 
>12340	CallExpression	Undo_AddBrushList ( & selected_brushes )
>12341	ArgumentList	& selected_brushes
>12342	Argument	& selected_brushes
>12343	UnaryOp	& selected_brushes
>12344	Identifier	selected_brushes
>12345	UnaryOperator	&
>12346	Callee	Undo_AddBrushList
>12347	Identifier	Undo_AddBrushList
>12348	ExpressionStatement	 
>12349	CallExpression	Undo_Start ( \"flip Z\" )
>12350	ArgumentList	\"flip Z\"
>12351	Argument	\"flip Z\"
>12352	PrimaryExpression	\"flip Z\"
>12353	Callee	Undo_Start
>12354	Identifier	Undo_Start
>12359	FunctionDef	CMainFrame 
>12360	ParameterList	 
>12361	ReturnType	void
>12362	CompoundStatement	 
>12363	ExpressionStatement	 
>12364	CallExpression	Undo_End ( )
>12365	ArgumentList	 
>12366	Callee	Undo_End
>12367	Identifier	Undo_End
>12368	ExpressionStatement	 
>12369	CallExpression	Undo_EndBrushList ( & selected_brushes )
>12370	ArgumentList	& selected_brushes
>12371	Argument	& selected_brushes
>12372	UnaryOp	& selected_brushes
>12373	Identifier	selected_brushes
>12374	UnaryOperator	&
>12375	Callee	Undo_EndBrushList
>12376	Identifier	Undo_EndBrushList
>12377	ExpressionStatement	 
>12378	CallExpression	Select_RotateAxis ( 0 , 90 )
>12379	ArgumentList	0
>12380	Argument	90
>12381	PrimaryExpression	90
>12382	Argument	0
>12383	PrimaryExpression	0
>12384	Callee	Select_RotateAxis
>12385	Identifier	Select_RotateAxis
>12386	ExpressionStatement	 
>12387	CallExpression	Undo_AddBrushList ( & selected_brushes )
>12388	ArgumentList	& selected_brushes
>12389	Argument	& selected_brushes
>12390	UnaryOp	& selected_brushes
>12391	Identifier	selected_brushes
>12392	UnaryOperator	&
>12393	Callee	Undo_AddBrushList
>12394	Identifier	Undo_AddBrushList
>12395	ExpressionStatement	 
>12396	CallExpression	Undo_Start ( \"rotate X\" )
>12397	ArgumentList	\"rotate X\"
>12398	Argument	\"rotate X\"
>12399	PrimaryExpression	\"rotate X\"
>12400	Callee	Undo_Start
>12401	Identifier	Undo_Start
>12406	FunctionDef	CMainFrame 
>12407	ParameterList	 
>12408	ReturnType	void
>12409	CompoundStatement	 
>12410	ExpressionStatement	 
>12411	CallExpression	Undo_End ( )
>12412	ArgumentList	 
>12413	Callee	Undo_End
>12414	Identifier	Undo_End
>12415	ExpressionStatement	 
>12416	CallExpression	Undo_EndBrushList ( & selected_brushes )
>12417	ArgumentList	& selected_brushes
>12418	Argument	& selected_brushes
>12419	UnaryOp	& selected_brushes
>12420	Identifier	selected_brushes
>12421	UnaryOperator	&
>12422	Callee	Undo_EndBrushList
>12423	Identifier	Undo_EndBrushList
>12424	ExpressionStatement	 
>12425	CallExpression	Select_RotateAxis ( 1 , 90 )
>12426	ArgumentList	1
>12427	Argument	90
>12428	PrimaryExpression	90
>12429	Argument	1
>12430	PrimaryExpression	1
>12431	Callee	Select_RotateAxis
>12432	Identifier	Select_RotateAxis
>12433	ExpressionStatement	 
>12434	CallExpression	Undo_AddBrushList ( & selected_brushes )
>12435	ArgumentList	& selected_brushes
>12436	Argument	& selected_brushes
>12437	UnaryOp	& selected_brushes
>12438	Identifier	selected_brushes
>12439	UnaryOperator	&
>12440	Callee	Undo_AddBrushList
>12441	Identifier	Undo_AddBrushList
>12442	ExpressionStatement	 
>12443	CallExpression	Undo_Start ( \"rotate Y\" )
>12444	ArgumentList	\"rotate Y\"
>12445	Argument	\"rotate Y\"
>12446	PrimaryExpression	\"rotate Y\"
>12447	Callee	Undo_Start
>12448	Identifier	Undo_Start
>12453	FunctionDef	CMainFrame 
>12454	ParameterList	 
>12455	ReturnType	void
>12456	CompoundStatement	 
>12457	ExpressionStatement	 
>12458	CallExpression	Undo_End ( )
>12459	ArgumentList	 
>12460	Callee	Undo_End
>12461	Identifier	Undo_End
>12462	ExpressionStatement	 
>12463	CallExpression	Undo_EndBrushList ( & selected_brushes )
>12464	ArgumentList	& selected_brushes
>12465	Argument	& selected_brushes
>12466	UnaryOp	& selected_brushes
>12467	Identifier	selected_brushes
>12468	UnaryOperator	&
>12469	Callee	Undo_EndBrushList
>12470	Identifier	Undo_EndBrushList
>12471	ExpressionStatement	 
>12472	CallExpression	Select_RotateAxis ( 2 , 90 )
>12473	ArgumentList	2
>12474	Argument	90
>12475	PrimaryExpression	90
>12476	Argument	2
>12477	PrimaryExpression	2
>12478	Callee	Select_RotateAxis
>12479	Identifier	Select_RotateAxis
>12480	ExpressionStatement	 
>12481	CallExpression	Undo_AddBrushList ( & selected_brushes )
>12482	ArgumentList	& selected_brushes
>12483	Argument	& selected_brushes
>12484	UnaryOp	& selected_brushes
>12485	Identifier	selected_brushes
>12486	UnaryOperator	&
>12487	Callee	Undo_AddBrushList
>12488	Identifier	Undo_AddBrushList
>12489	ExpressionStatement	 
>12490	CallExpression	Undo_Start ( \"rotate Z\" )
>12491	ArgumentList	\"rotate Z\"
>12492	Argument	\"rotate Z\"
>12493	PrimaryExpression	\"rotate Z\"
>12494	Callee	Undo_Start
>12495	Identifier	Undo_Start
>12500	FunctionDef	CMainFrame 
>12501	ParameterList	 
>12502	ReturnType	void
>12503	CompoundStatement	 
>12504	ExpressionStatement	 
>12505	CallExpression	Map_RegionOff ( )
>12506	ArgumentList	 
>12507	Callee	Map_RegionOff
>12508	Identifier	Map_RegionOff
>12512	FunctionDef	CMainFrame 
>12513	ParameterList	 
>12514	ReturnType	void
>12515	CompoundStatement	 
>12516	ExpressionStatement	 
>12517	CallExpression	Map_RegionBrush ( )
>12518	ArgumentList	 
>12519	Callee	Map_RegionBrush
>12520	Identifier	Map_RegionBrush
>12524	FunctionDef	CMainFrame 
>12525	ParameterList	 
>12526	ReturnType	void
>12527	CompoundStatement	 
>12528	ExpressionStatement	 
>12529	CallExpression	Map_RegionSelectedBrushes ( )
>12530	ArgumentList	 
>12531	Callee	Map_RegionSelectedBrushes
>12532	Identifier	Map_RegionSelectedBrushes
>12536	FunctionDef	CMainFrame 
>12537	ParameterList	 
>12538	ReturnType	void
>12539	CompoundStatement	 
>12540	ExpressionStatement	 
>12541	CallExpression	Map_RegionTallBrush ( )
>12542	ArgumentList	 
>12543	Callee	Map_RegionTallBrush
>12544	Identifier	Map_RegionTallBrush
>12548	FunctionDef	CMainFrame 
>12549	ParameterList	 
>12550	ReturnType	void
>12551	CompoundStatement	 
>12552	ExpressionStatement	 
>12553	CallExpression	Map_RegionXY ( )
>12554	ArgumentList	 
>12555	Callee	Map_RegionXY
>12556	Identifier	Map_RegionXY
>12560	FunctionDef	CMainFrame 
>12561	ParameterList	 
>12562	ReturnType	void
>12563	CompoundStatement	 
>12564	ExpressionStatement	 
>12565	CallExpression	Undo_End ( )
>12566	ArgumentList	 
>12567	Callee	Undo_End
>12568	Identifier	Undo_End
>12569	ExpressionStatement	 
>12570	CallExpression	Undo_EndBrushList ( & selected_brushes )
>12571	ArgumentList	& selected_brushes
>12572	Argument	& selected_brushes
>12573	UnaryOp	& selected_brushes
>12574	Identifier	selected_brushes
>12575	UnaryOperator	&
>12576	Callee	Undo_EndBrushList
>12577	Identifier	Undo_EndBrushList
>12578	ExpressionStatement	 
>12579	CallExpression	dlg . DoModal ( )
>12580	ArgumentList	 
>12581	Callee	dlg . DoModal
>12582	MemberAccess	dlg . DoModal
>12583	Identifier	DoModal
>12584	Identifier	dlg
>12585	IdentifierDeclStatement	 
>12586	IdentifierDecl	dlg
>12587	Identifier	dlg
>12588	IdentifierDeclType	CRotateDlg
>12589	ExpressionStatement	 
>12590	CallExpression	Undo_AddBrushList ( & selected_brushes )
>12591	ArgumentList	& selected_brushes
>12592	Argument	& selected_brushes
>12593	UnaryOp	& selected_brushes
>12594	Identifier	selected_brushes
>12595	UnaryOperator	&
>12596	Callee	Undo_AddBrushList
>12597	Identifier	Undo_AddBrushList
>12598	ExpressionStatement	 
>12599	CallExpression	Undo_Start ( \"arbitrary rotation\" )
>12600	ArgumentList	\"arbitrary rotation\"
>12601	Argument	\"arbitrary rotation\"
>12602	PrimaryExpression	\"arbitrary rotation\"
>12603	Callee	Undo_Start
>12604	Identifier	Undo_Start
>12610	FunctionDef	CMainFrame 
>12611	ParameterList	 
>12612	ReturnType	void
>12613	CompoundStatement	 
>12614	ExpressionStatement	 
>12615	CallExpression	Select_Clone ( )
>12616	ArgumentList	 
>12617	Callee	Select_Clone
>12618	Identifier	Select_Clone
>12622	FunctionDef	CMainFrame 
>12623	ParameterList	 
>12624	ReturnType	void
>12625	CompoundStatement	 
>12626	ExpressionStatement	 
>12627	CallExpression	ConnectEntities ( )
>12628	ArgumentList	 
>12629	Callee	ConnectEntities
>12630	Identifier	ConnectEntities
>12634	FunctionDef	CMainFrame 
>12635	ParameterList	 
>12636	ReturnType	void
>12637	CompoundStatement	 
>12638	ExpressionStatement	 
>12639	CallExpression	Undo_End ( )
>12640	ArgumentList	 
>12641	Callee	Undo_End
>12642	Identifier	Undo_End
>12643	ExpressionStatement	 
>12644	CallExpression	Undo_EndBrushList ( & selected_brushes )
>12645	ArgumentList	& selected_brushes
>12646	Argument	& selected_brushes
>12647	UnaryOp	& selected_brushes
>12648	Identifier	selected_brushes
>12649	UnaryOperator	&
>12650	Callee	Undo_EndBrushList
>12651	Identifier	Undo_EndBrushList
>12652	ExpressionStatement	 
>12653	CallExpression	CSG_MakeHollow ( )
>12654	ArgumentList	 
>12655	Callee	CSG_MakeHollow
>12656	Identifier	CSG_MakeHollow
>12657	ExpressionStatement	 
>12658	CallExpression	Undo_AddBrushList ( & selected_brushes )
>12659	ArgumentList	& selected_brushes
>12660	Argument	& selected_brushes
>12661	UnaryOp	& selected_brushes
>12662	Identifier	selected_brushes
>12663	UnaryOperator	&
>12664	Callee	Undo_AddBrushList
>12665	Identifier	Undo_AddBrushList
>12666	ExpressionStatement	 
>12667	CallExpression	Undo_Start ( \"hollow\" )
>12668	ArgumentList	\"hollow\"
>12669	Argument	\"hollow\"
>12670	PrimaryExpression	\"hollow\"
>12671	Callee	Undo_Start
>12672	Identifier	Undo_Start
>12677	FunctionDef	CMainFrame 
>12678	ParameterList	 
>12679	ReturnType	void
>12680	CompoundStatement	 
>12681	ExpressionStatement	 
>12682	CallExpression	Undo_End ( )
>12683	ArgumentList	 
>12684	Callee	Undo_End
>12685	Identifier	Undo_End
>12686	ExpressionStatement	 
>12687	CallExpression	CSG_Subtract ( )
>12688	ArgumentList	 
>12689	Callee	CSG_Subtract
>12690	Identifier	CSG_Subtract
>12691	ExpressionStatement	 
>12692	CallExpression	Undo_Start ( \"CSG subtract\" )
>12693	ArgumentList	\"CSG subtract\"
>12694	Argument	\"CSG subtract\"
>12695	PrimaryExpression	\"CSG subtract\"
>12696	Callee	Undo_Start
>12697	Identifier	Undo_Start
>12701	FunctionDef	CMainFrame 
>12702	ParameterList	 
>12703	ReturnType	void
>12704	CompoundStatement	 
>12705	ExpressionStatement	 
>12706	CallExpression	Undo_End ( )
>12707	ArgumentList	 
>12708	Callee	Undo_End
>12709	Identifier	Undo_End
>12710	ExpressionStatement	 
>12711	CallExpression	Undo_EndBrushList ( & selected_brushes )
>12712	ArgumentList	& selected_brushes
>12713	Argument	& selected_brushes
>12714	UnaryOp	& selected_brushes
>12715	Identifier	selected_brushes
>12716	UnaryOperator	&
>12717	Callee	Undo_EndBrushList
>12718	Identifier	Undo_EndBrushList
>12719	ExpressionStatement	 
>12720	CallExpression	CSG_Merge ( )
>12721	ArgumentList	 
>12722	Callee	CSG_Merge
>12723	Identifier	CSG_Merge
>12724	ExpressionStatement	 
>12725	CallExpression	Undo_AddBrushList ( & selected_brushes )
>12726	ArgumentList	& selected_brushes
>12727	Argument	& selected_brushes
>12728	UnaryOp	& selected_brushes
>12729	Identifier	selected_brushes
>12730	UnaryOperator	&
>12731	Callee	Undo_AddBrushList
>12732	Identifier	Undo_AddBrushList
>12733	ExpressionStatement	 
>12734	CallExpression	Undo_Start ( \"CSG merge\" )
>12735	ArgumentList	\"CSG merge\"
>12736	Argument	\"CSG merge\"
>12737	PrimaryExpression	\"CSG merge\"
>12738	Callee	Undo_Start
>12739	Identifier	Undo_Start
>12744	FunctionDef	CMainFrame 
>12745	ParameterList	 
>12746	ReturnType	void
>12747	CompoundStatement	 
>12748	ExpressionStatement	 
>12749	CallExpression	Sys_UpdateWindows ( W_ALL )
>12750	ArgumentList	W_ALL
>12751	Argument	W_ALL
>12752	Identifier	W_ALL
>12753	Callee	Sys_UpdateWindows
>12754	Identifier	Sys_UpdateWindows
>12755	ExpressionStatement	 
>12756	AssignmentExpr	g_qeglobals . dontDrawSelectedOutlines ^= 1
>12757	PrimaryExpression	1
>12758	MemberAccess	g_qeglobals . dontDrawSelectedOutlines
>12759	Identifier	dontDrawSelectedOutlines
>12760	Identifier	g_qeglobals
>12767	FunctionDef	CMainFrame 
>12768	ParameterList	 
>12769	ReturnType	void
>12770	CompoundStatement	 
>12771	ExpressionStatement	 
>12772	CallExpression	Undo_End ( )
>12773	ArgumentList	 
>12774	Callee	Undo_End
>12775	Identifier	Undo_End
>12776	ExpressionStatement	 
>12777	CallExpression	Undo_EndBrushList ( & selected_brushes )
>12778	ArgumentList	& selected_brushes
>12779	Argument	& selected_brushes
>12780	UnaryOp	& selected_brushes
>12781	Identifier	selected_brushes
>12782	UnaryOperator	&
>12783	Callee	Undo_EndBrushList
>12784	Identifier	Undo_EndBrushList
>12785	ExpressionStatement	 
>12786	CallExpression	Select_Delete ( )
>12787	ArgumentList	 
>12788	Callee	Select_Delete
>12789	Identifier	Select_Delete
>12790	ForStatement	for ( brush = selected_brushes . next ; brush != & selected_brushes ; brush = brush -> next )
>12791	CompoundStatement	 
>12792	ExpressionStatement	 
>12793	CallExpression	Undo_AddEntity ( brush -> owner )
>12794	ArgumentList	brush -> owner
>12795	Argument	brush -> owner
>12796	PtrMemberAccess	brush -> owner
>12797	Identifier	owner
>12798	Identifier	brush
>12799	Callee	Undo_AddEntity
>12800	Identifier	Undo_AddEntity
>12801	AssignmentExpr	 
>12802	PtrMemberAccess	brush -> next
>12803	Identifier	next
>12804	Identifier	brush
>12805	Identifier	brush
>12806	Condition	 
>12807	EqualityExpression	brush != & selected_brushes
>12808	UnaryOp	& selected_brushes
>12809	Identifier	selected_brushes
>12810	UnaryOperator	&
>12811	Identifier	brush
>12812	ForInit	 
>12813	AssignmentExpr	brush = selected_brushes . next
>12814	MemberAccess	selected_brushes . next
>12815	Identifier	next
>12816	Identifier	selected_brushes
>12817	Identifier	brush
>12818	ExpressionStatement	 
>12819	CallExpression	Undo_AddBrushList ( & selected_brushes )
>12820	ArgumentList	& selected_brushes
>12821	Argument	& selected_brushes
>12822	UnaryOp	& selected_brushes
>12823	Identifier	selected_brushes
>12824	UnaryOperator	&
>12825	Callee	Undo_AddBrushList
>12826	Identifier	Undo_AddBrushList
>12827	ExpressionStatement	 
>12828	CallExpression	Undo_Start ( \"delete\" )
>12829	ArgumentList	\"delete\"
>12830	Argument	\"delete\"
>12831	PrimaryExpression	\"delete\"
>12832	Callee	Undo_Start
>12833	Identifier	Undo_Start
>12834	IdentifierDeclStatement	 
>12835	IdentifierDecl	* brush
>12836	Identifier	brush
>12837	IdentifierDeclType	brush_t *
>12848	FunctionDef	CMainFrame 
>12849	ParameterList	 
>12850	ReturnType	void
>12851	CompoundStatement	 
>12852	IfStatement	if ( ! ByeByeSurfaceDialog ( ) )
>12853	CompoundStatement	 
>12854	IfStatement	if ( g_bClipMode )
>12855	ElseStatement	else
>12856	IfStatement	if ( g_bRotateMode )
>12857	ElseStatement	else
>12858	IfStatement	if ( g_bScaleMode )
>12859	ElseStatement	else
>12860	IfStatement	if ( g_bPathMode )
>12861	ElseStatement	else
>12862	CompoundStatement	 
>12863	IfStatement	if ( g_qeglobals . d_select_mode == sel_curvepoint && g_qeglobals . d_num_move_points > 0 )
>12864	ElseStatement	else
>12865	IfStatement	if ( g_qeglobals . d_select_mode == sel_terrainpoint && g_qeglobals . d_numterrapoints > 0 )
>12866	ElseStatement	else
>12867	CompoundStatement	 
>12868	ExpressionStatement	 
>12869	CallExpression	SetStatusText ( 2 , \" \" )
>12870	ArgumentList	2
>12871	Argument	\" \"
>12872	PrimaryExpression	\" \"
>12873	Argument	2
>12874	PrimaryExpression	2
>12875	Callee	SetStatusText
>12876	Identifier	SetStatusText
>12877	ExpressionStatement	 
>12878	CallExpression	Select_Deselect ( )
>12879	ArgumentList	 
>12880	Callee	Select_Deselect
>12881	Identifier	Select_Deselect
>12882	CompoundStatement	 
>12883	ExpressionStatement	 
>12884	CallExpression	Sys_UpdateWindows ( W_ALL )
>12885	ArgumentList	W_ALL
>12886	Argument	W_ALL
>12887	Identifier	W_ALL
>12888	Callee	Sys_UpdateWindows
>12889	Identifier	Sys_UpdateWindows
>12890	ExpressionStatement	 
>12891	AssignmentExpr	g_qeglobals . d_numterrapoints = 0
>12892	PrimaryExpression	0
>12893	MemberAccess	g_qeglobals . d_numterrapoints
>12894	Identifier	d_numterrapoints
>12895	Identifier	g_qeglobals
>12896	Condition	 
>12897	AndExpression	g_qeglobals . d_select_mode == sel_terrainpoint && g_qeglobals . d_numterrapoints > 0
>12898	RelationalExpression	g_qeglobals . d_numterrapoints > 0
>12899	PrimaryExpression	0
>12900	MemberAccess	g_qeglobals . d_numterrapoints
>12901	Identifier	d_numterrapoints
>12902	Identifier	g_qeglobals
>12903	EqualityExpression	g_qeglobals . d_select_mode == sel_terrainpoint
>12904	Identifier	sel_terrainpoint
>12905	MemberAccess	g_qeglobals . d_select_mode
>12906	Identifier	d_select_mode
>12907	Identifier	g_qeglobals
>12908	CompoundStatement	 
>12909	ExpressionStatement	 
>12910	CallExpression	Sys_UpdateWindows ( W_ALL )
>12911	ArgumentList	W_ALL
>12912	Argument	W_ALL
>12913	Identifier	W_ALL
>12914	Callee	Sys_UpdateWindows
>12915	Identifier	Sys_UpdateWindows
>12916	ExpressionStatement	 
>12917	AssignmentExpr	g_qeglobals . d_num_move_points = 0
>12918	PrimaryExpression	0
>12919	MemberAccess	g_qeglobals . d_num_move_points
>12920	Identifier	d_num_move_points
>12921	Identifier	g_qeglobals
>12922	Condition	 
>12923	AndExpression	g_qeglobals . d_select_mode == sel_curvepoint && g_qeglobals . d_num_move_points > 0
>12924	RelationalExpression	g_qeglobals . d_num_move_points > 0
>12925	PrimaryExpression	0
>12926	MemberAccess	g_qeglobals . d_num_move_points
>12927	Identifier	d_num_move_points
>12928	Identifier	g_qeglobals
>12929	EqualityExpression	g_qeglobals . d_select_mode == sel_curvepoint
>12930	Identifier	sel_curvepoint
>12931	MemberAccess	g_qeglobals . d_select_mode
>12932	Identifier	d_select_mode
>12933	Identifier	g_qeglobals
>12934	CompoundStatement	 
>12935	IfStatement	if ( ActiveXY ( ) )
>12936	ExpressionStatement	 
>12937	CallExpression	ActiveXY ( ) -> KillPathMode ( )
>12938	ArgumentList	 
>12939	Callee	ActiveXY ( ) -> KillPathMode
>12940	PtrMemberAccess	ActiveXY ( ) -> KillPathMode
>12941	Identifier	KillPathMode
>12942	CallExpression	ActiveXY ( )
>12943	ArgumentList	 
>12944	Callee	ActiveXY
>12945	Identifier	ActiveXY
>12946	Condition	 
>12947	CallExpression	ActiveXY ( )
>12948	ArgumentList	 
>12949	Callee	ActiveXY
>12950	Identifier	ActiveXY
>12951	Condition	 
>12952	Identifier	g_bPathMode
>12953	ExpressionStatement	 
>12954	CallExpression	OnSelectMousescale ( )
>12955	ArgumentList	 
>12956	Callee	OnSelectMousescale
>12957	Identifier	OnSelectMousescale
>12958	Condition	 
>12959	Identifier	g_bScaleMode
>12960	ExpressionStatement	 
>12961	CallExpression	OnSelectMouserotate ( )
>12962	ArgumentList	 
>12963	Callee	OnSelectMouserotate
>12964	Identifier	OnSelectMouserotate
>12965	Condition	 
>12966	Identifier	g_bRotateMode
>12967	ExpressionStatement	 
>12968	CallExpression	OnViewClipper ( )
>12969	ArgumentList	 
>12970	Callee	OnViewClipper
>12971	Identifier	OnViewClipper
>12972	Condition	 
>12973	Identifier	g_bClipMode
>12974	Condition	 
>12975	UnaryOp	! ByeByeSurfaceDialog ( )
>12976	CallExpression	ByeByeSurfaceDialog ( )
>12977	ArgumentList	 
>12978	Callee	ByeByeSurfaceDialog
>12979	Identifier	ByeByeSurfaceDialog
>12980	UnaryOperator	!
>12997	FunctionDef	CMainFrame 
>12998	ParameterList	 
>12999	ReturnType	void
>13000	CompoundStatement	 
>13001	IfStatement	if ( g_qeglobals . d_select_mode == sel_edge )
>13002	ElseStatement	else
>13003	CompoundStatement	 
>13004	ExpressionStatement	 
>13005	CallExpression	Sys_UpdateWindows ( W_ALL )
>13006	ArgumentList	W_ALL
>13007	Argument	W_ALL
>13008	Identifier	W_ALL
>13009	Callee	Sys_UpdateWindows
>13010	Identifier	Sys_UpdateWindows
>13011	IfStatement	if ( g_qeglobals . d_numpoints )
>13012	ExpressionStatement	 
>13013	AssignmentExpr	g_qeglobals . d_select_mode = sel_edge
>13014	Identifier	sel_edge
>13015	MemberAccess	g_qeglobals . d_select_mode
>13016	Identifier	d_select_mode
>13017	Identifier	g_qeglobals
>13018	Condition	 
>13019	MemberAccess	g_qeglobals . d_numpoints
>13020	Identifier	d_numpoints
>13021	Identifier	g_qeglobals
>13022	ExpressionStatement	 
>13023	CallExpression	SetupVertexSelection ( )
>13024	ArgumentList	 
>13025	Callee	SetupVertexSelection
>13026	Identifier	SetupVertexSelection
>13027	CompoundStatement	 
>13028	ExpressionStatement	 
>13029	CallExpression	Sys_UpdateWindows ( W_ALL )
>13030	ArgumentList	W_ALL
>13031	Argument	W_ALL
>13032	Identifier	W_ALL
>13033	Callee	Sys_UpdateWindows
>13034	Identifier	Sys_UpdateWindows
>13035	ExpressionStatement	 
>13036	CallExpression	clearSelection ( )
>13037	ArgumentList	 
>13038	Callee	clearSelection
>13039	Identifier	clearSelection
>13040	Condition	 
>13041	EqualityExpression	g_qeglobals . d_select_mode == sel_edge
>13042	Identifier	sel_edge
>13043	MemberAccess	g_qeglobals . d_select_mode
>13044	Identifier	d_select_mode
>13045	Identifier	g_qeglobals
>13054	FunctionDef	CMainFrame 
>13055	ParameterList	 
>13056	ReturnType	void
>13057	CompoundStatement	 
>13058	IfStatement	if ( g_qeglobals . d_select_mode == sel_vertex || g_qeglobals . d_select_mode == sel_curvepoint || g_qeglobals . \
>13059	ElseStatement	else
>13060	CompoundStatement	 
>13061	ExpressionStatement	 
>13062	CallExpression	Sys_UpdateWindows ( W_ALL )
>13063	ArgumentList	W_ALL
>13064	Argument	W_ALL
>13065	Identifier	W_ALL
>13066	Callee	Sys_UpdateWindows
>13067	Identifier	Sys_UpdateWindows
>13068	IfStatement	if ( OnlyTerrainSelected ( ) )
>13069	ElseStatement	else
>13070	IfStatement	if ( OnlyPatchesSelected ( ) )
>13071	ElseStatement	else
>13072	IfStatement	if ( ! AnyPatchesSelected ( ) && ! AnyTerrainSelected ( ) )
>13073	CompoundStatement	 
>13074	IfStatement	if ( g_qeglobals . d_numpoints )
>13075	ExpressionStatement	 
>13076	AssignmentExpr	g_qeglobals . d_select_mode = sel_vertex
>13077	Identifier	sel_vertex
>13078	MemberAccess	g_qeglobals . d_select_mode
>13079	Identifier	d_select_mode
>13080	Identifier	g_qeglobals
>13081	Condition	 
>13082	MemberAccess	g_qeglobals . d_numpoints
>13083	Identifier	d_numpoints
>13084	Identifier	g_qeglobals
>13085	ExpressionStatement	 
>13086	CallExpression	SetupVertexSelection ( )
>13087	ArgumentList	 
>13088	Callee	SetupVertexSelection
>13089	Identifier	SetupVertexSelection
>13090	Condition	 
>13091	AndExpression	! AnyPatchesSelected ( ) && ! AnyTerrainSelected ( )
>13092	UnaryOp	! AnyTerrainSelected ( )
>13093	CallExpression	AnyTerrainSelected ( )
>13094	ArgumentList	 
>13095	Callee	AnyTerrainSelected
>13096	Identifier	AnyTerrainSelected
>13097	UnaryOperator	!
>13098	UnaryOp	! AnyPatchesSelected ( )
>13099	CallExpression	AnyPatchesSelected ( )
>13100	ArgumentList	 
>13101	Callee	AnyPatchesSelected
>13102	Identifier	AnyPatchesSelected
>13103	UnaryOperator	!
>13104	CompoundStatement	 
>13105	ExpressionStatement	 
>13106	CallExpression	Patch_EditPatch ( )
>13107	ArgumentList	 
>13108	Callee	Patch_EditPatch
>13109	Identifier	Patch_EditPatch
>13110	Condition	 
>13111	CallExpression	OnlyPatchesSelected ( )
>13112	ArgumentList	 
>13113	Callee	OnlyPatchesSelected
>13114	Identifier	OnlyPatchesSelected
>13115	CompoundStatement	 
>13116	Condition	 
>13117	CallExpression	OnlyTerrainSelected ( )
>13118	ArgumentList	 
>13119	Callee	OnlyTerrainSelected
>13120	Identifier	OnlyTerrainSelected
>13121	CompoundStatement	 
>13122	ExpressionStatement	 
>13123	CallExpression	Sys_UpdateWindows ( W_ALL )
>13124	ArgumentList	W_ALL
>13125	Argument	W_ALL
>13126	Identifier	W_ALL
>13127	Callee	Sys_UpdateWindows
>13128	Identifier	Sys_UpdateWindows
>13129	ExpressionStatement	 
>13130	CallExpression	clearSelection ( )
>13131	ArgumentList	 
>13132	Callee	clearSelection
>13133	Identifier	clearSelection
>13134	Condition	 
>13135	OrExpression	g_qeglobals . d_select_mode == sel_vertex || g_qeglobals . d_select_mode == sel_curvepoint || g_qeglobals \
>13136	OrExpression	g_qeglobals . d_select_mode == sel_curvepoint || g_qeglobals . d_select_mode == sel_terrainpoint
>13137	EqualityExpression	g_qeglobals . d_select_mode == sel_terrainpoint
>13138	Identifier	sel_terrainpoint
>13139	MemberAccess	g_qeglobals . d_select_mode
>13140	Identifier	d_select_mode
>13141	Identifier	g_qeglobals
>13142	EqualityExpression	g_qeglobals . d_select_mode == sel_curvepoint
>13143	Identifier	sel_curvepoint
>13144	MemberAccess	g_qeglobals . d_select_mode
>13145	Identifier	d_select_mode
>13146	Identifier	g_qeglobals
>13147	EqualityExpression	g_qeglobals . d_select_mode == sel_vertex
>13148	Identifier	sel_vertex
>13149	MemberAccess	g_qeglobals . d_select_mode
>13150	Identifier	d_select_mode
>13151	Identifier	g_qeglobals
>13166	FunctionDef	CMainFrame 
>13167	ParameterList	 
>13168	ReturnType	void
>13169	CompoundStatement	 
>13170	IfStatement	if ( g_qeglobals . d_select_mode == sel_terrainpoint )
>13171	ElseStatement	else
>13172	IfStatement	if ( g_qeglobals . d_select_mode == sel_terraintexture )
>13173	ElseStatement	else
>13174	CompoundStatement	 
>13175	ExpressionStatement	 
>13176	CallExpression	Sys_UpdateWindows ( W_ALL )
>13177	ArgumentList	W_ALL
>13178	Argument	W_ALL
>13179	Identifier	W_ALL
>13180	Callee	Sys_UpdateWindows
>13181	Identifier	Sys_UpdateWindows
>13182	ExpressionStatement	 
>13183	AssignmentExpr	g_qeglobals . d_select_mode = sel_terraintexture
>13184	Identifier	sel_terraintexture
>13185	MemberAccess	g_qeglobals . d_select_mode
>13186	Identifier	d_select_mode
>13187	Identifier	g_qeglobals
>13188	ExpressionStatement	 
>13189	CallExpression	clearSelection ( )
>13190	ArgumentList	 
>13191	Callee	clearSelection
>13192	Identifier	clearSelection
>13193	CompoundStatement	 
>13194	ExpressionStatement	 
>13195	CallExpression	Sys_UpdateWindows ( W_ALL )
>13196	ArgumentList	W_ALL
>13197	Argument	W_ALL
>13198	Identifier	W_ALL
>13199	Callee	Sys_UpdateWindows
>13200	Identifier	Sys_UpdateWindows
>13201	ExpressionStatement	 
>13202	AssignmentExpr	g_qeglobals . d_select_mode = sel_terrainpoint
>13203	Identifier	sel_terrainpoint
>13204	MemberAccess	g_qeglobals . d_select_mode
>13205	Identifier	d_select_mode
>13206	Identifier	g_qeglobals
>13207	ExpressionStatement	 
>13208	CallExpression	clearSelection ( )
>13209	ArgumentList	 
>13210	Callee	clearSelection
>13211	Identifier	clearSelection
>13212	Condition	 
>13213	EqualityExpression	g_qeglobals . d_select_mode == sel_terraintexture
>13214	Identifier	sel_terraintexture
>13215	MemberAccess	g_qeglobals . d_select_mode
>13216	Identifier	d_select_mode
>13217	Identifier	g_qeglobals
>13218	CompoundStatement	 
>13219	ExpressionStatement	 
>13220	CallExpression	Sys_UpdateWindows ( W_ALL )
>13221	ArgumentList	W_ALL
>13222	Argument	W_ALL
>13223	Identifier	W_ALL
>13224	Callee	Sys_UpdateWindows
>13225	Identifier	Sys_UpdateWindows
>13226	ExpressionStatement	 
>13227	CallExpression	clearSelection ( )
>13228	ArgumentList	 
>13229	Callee	clearSelection
>13230	Identifier	clearSelection
>13231	Condition	 
>13232	EqualityExpression	g_qeglobals . d_select_mode == sel_terrainpoint
>13233	Identifier	sel_terrainpoint
>13234	MemberAccess	g_qeglobals . d_select_mode
>13235	Identifier	d_select_mode
>13236	Identifier	g_qeglobals
>13245	FunctionDef	CMainFrame 
>13246	ParameterList	 
>13247	ReturnType	void
>13248	CompoundStatement	 
>13249	ExpressionStatement	 
>13250	CallExpression	Undo_End ( )
>13251	ArgumentList	 
>13252	Callee	Undo_End
>13253	Identifier	Undo_End
>13254	ExpressionStatement	 
>13255	CallExpression	Undo_EndBrushList ( & selected_brushes )
>13256	ArgumentList	& selected_brushes
>13257	Argument	& selected_brushes
>13258	UnaryOp	& selected_brushes
>13259	Identifier	selected_brushes
>13260	UnaryOperator	&
>13261	Callee	Undo_EndBrushList
>13262	Identifier	Undo_EndBrushList
>13263	ExpressionStatement	 
>13264	CallExpression	Select_MakeDetail ( )
>13265	ArgumentList	 
>13266	Callee	Select_MakeDetail
>13267	Identifier	Select_MakeDetail
>13268	ExpressionStatement	 
>13269	CallExpression	Undo_AddBrushList ( & selected_brushes )
>13270	ArgumentList	& selected_brushes
>13271	Argument	& selected_brushes
>13272	UnaryOp	& selected_brushes
>13273	Identifier	selected_brushes
>13274	UnaryOperator	&
>13275	Callee	Undo_AddBrushList
>13276	Identifier	Undo_AddBrushList
>13277	ExpressionStatement	 
>13278	CallExpression	Undo_Start ( \"make detail\" )
>13279	ArgumentList	\"make detail\"
>13280	Argument	\"make detail\"
>13281	PrimaryExpression	\"make detail\"
>13282	Callee	Undo_Start
>13283	Identifier	Undo_Start
>13288	FunctionDef	CMainFrame 
>13289	ParameterList	 
>13290	ReturnType	void
>13291	CompoundStatement	 
>13292	ExpressionStatement	 
>13293	CallExpression	Undo_End ( )
>13294	ArgumentList	 
>13295	Callee	Undo_End
>13296	Identifier	Undo_End
>13297	ExpressionStatement	 
>13298	CallExpression	Undo_EndBrushList ( & selected_brushes )
>13299	ArgumentList	& selected_brushes
>13300	Argument	& selected_brushes
>13301	UnaryOp	& selected_brushes
>13302	Identifier	selected_brushes
>13303	UnaryOperator	&
>13304	Callee	Undo_EndBrushList
>13305	Identifier	Undo_EndBrushList
>13306	ExpressionStatement	 
>13307	CallExpression	Select_MakeStructural ( )
>13308	ArgumentList	 
>13309	Callee	Select_MakeStructural
>13310	Identifier	Select_MakeStructural
>13311	ExpressionStatement	 
>13312	CallExpression	Undo_AddBrushList ( & selected_brushes )
>13313	ArgumentList	& selected_brushes
>13314	Argument	& selected_brushes
>13315	UnaryOp	& selected_brushes
>13316	Identifier	selected_brushes
>13317	UnaryOperator	&
>13318	Callee	Undo_AddBrushList
>13319	Identifier	Undo_AddBrushList
>13320	ExpressionStatement	 
>13321	CallExpression	Undo_Start ( \"make structural\" )
>13322	ArgumentList	\"make structural\"
>13323	Argument	\"make structural\"
>13324	PrimaryExpression	\"make structural\"
>13325	Callee	Undo_Start
>13326	Identifier	Undo_Start
>13331	FunctionDef	CMainFrame 
>13332	ParameterList	 
>13333	ReturnType	void
>13334	CompoundStatement	 
>13335	ExpressionStatement	 
>13336	CallExpression	Select_CompleteTall ( )
>13337	ArgumentList	 
>13338	Callee	Select_CompleteTall
>13339	Identifier	Select_CompleteTall
>13340	IfStatement	if ( ActiveXY ( ) )
>13341	ExpressionStatement	 
>13342	CallExpression	ActiveXY ( ) -> UndoCopy ( )
>13343	ArgumentList	 
>13344	Callee	ActiveXY ( ) -> UndoCopy
>13345	PtrMemberAccess	ActiveXY ( ) -> UndoCopy
>13346	Identifier	UndoCopy
>13347	CallExpression	ActiveXY ( )
>13348	ArgumentList	 
>13349	Callee	ActiveXY
>13350	Identifier	ActiveXY
>13351	Condition	 
>13352	CallExpression	ActiveXY ( )
>13353	ArgumentList	 
>13354	Callee	ActiveXY
>13355	Identifier	ActiveXY
>13360	FunctionDef	CMainFrame 
>13361	ParameterList	 
>13362	ReturnType	void
>13363	CompoundStatement	 
>13364	ExpressionStatement	 
>13365	CallExpression	Select_Inside ( )
>13366	ArgumentList	 
>13367	Callee	Select_Inside
>13368	Identifier	Select_Inside
>13372	FunctionDef	CMainFrame 
>13373	ParameterList	 
>13374	ReturnType	void
>13375	CompoundStatement	 
>13376	ExpressionStatement	 
>13377	CallExpression	Select_PartialTall ( )
>13378	ArgumentList	 
>13379	Callee	Select_PartialTall
>13380	Identifier	Select_PartialTall
>13384	FunctionDef	CMainFrame 
>13385	ParameterList	 
>13386	ReturnType	void
>13387	CompoundStatement	 
>13388	ExpressionStatement	 
>13389	CallExpression	Select_Touching ( )
>13390	ArgumentList	 
>13391	Callee	Select_Touching
>13392	Identifier	Select_Touching
>13396	FunctionDef	CMainFrame 
>13397	ParameterList	 
>13398	ReturnType	void
>13399	CompoundStatement	 
>13400	ExpressionStatement	 
>13401	CallExpression	Select_Ungroup ( )
>13402	ArgumentList	 
>13403	Callee	Select_Ungroup
>13404	Identifier	Select_Ungroup
>13408	FunctionDef	CMainFrame 
>13409	ParameterList	 
>13410	ReturnType	void
>13411	CompoundStatement	 
>13412	ExpressionStatement	 
>13413	CallExpression	HandlePopup ( this , IDR_POPUP_TEXTURE )
>13414	ArgumentList	this
>13415	Argument	IDR_POPUP_TEXTURE
>13416	Identifier	IDR_POPUP_TEXTURE
>13417	Argument	this
>13418	Identifier	this
>13419	Callee	HandlePopup
>13420	Identifier	HandlePopup
>13426	FunctionDef	CMainFrame 
>13427	ParameterList	 
>13428	ReturnType	void
>13429	CompoundStatement	 
>13430	ExpressionStatement	 
>13431	CallExpression	HandlePopup ( this , IDR_POPUP_SPLINE )
>13432	ArgumentList	this
>13433	Argument	IDR_POPUP_SPLINE
>13434	Identifier	IDR_POPUP_SPLINE
>13435	Argument	this
>13436	Identifier	this
>13437	Callee	HandlePopup
>13438	Identifier	HandlePopup
>13444	FunctionDef	CMainFrame 
>13445	ParameterList	 
>13446	ReturnType	void
>13447	CompoundStatement	 
>13448	ExpressionStatement	 
>13449	CallExpression	HandlePopup ( this , IDR_POPUP_SELECTION )
>13450	ArgumentList	this
>13451	Argument	IDR_POPUP_SELECTION
>13452	Identifier	IDR_POPUP_SELECTION
>13453	Argument	this
>13454	Identifier	this
>13455	Callee	HandlePopup
>13456	Identifier	HandlePopup
>13462	FunctionDef	CMainFrame 
>13463	ParameterList	 
>13464	ReturnType	void
>13465	CompoundStatement	 
>13466	ExpressionStatement	 
>13467	CallExpression	OnViewNextview ( )
>13468	ArgumentList	 
>13469	Callee	OnViewNextview
>13470	Identifier	OnViewNextview
>13474	FunctionDef	CMainFrame 
>13475	ParameterList	 
>13476	ReturnType	void
>13477	CompoundStatement	 
>13478	ExpressionStatement	 
>13479	CallExpression	Sys_UpdateWindows ( W_CAMERA )
>13480	ArgumentList	W_CAMERA
>13481	Argument	W_CAMERA
>13482	Identifier	W_CAMERA
>13483	Callee	Sys_UpdateWindows
>13484	Identifier	Sys_UpdateWindows
>13489	FunctionDef	CMainFrame 
>13490	ParameterList	CCmdUI * pCmdUI
>13491	Parameter	 
>13492	Identifier	pCmdUI
>13493	ParameterType	CCmdUI *
>13494	ReturnType	void
>13495	CompoundStatement	 
>13496	ExpressionStatement	 
>13497	CallExpression	pCmdUI -> Enable ( m_bCamPreview == false )
>13498	ArgumentList	m_bCamPreview == false
>13499	Argument	m_bCamPreview == false
>13500	EqualityExpression	m_bCamPreview == false
>13501	Identifier	false
>13502	Identifier	m_bCamPreview
>13503	Callee	pCmdUI -> Enable
>13504	PtrMemberAccess	pCmdUI -> Enable
>13505	Identifier	Enable
>13506	Identifier	pCmdUI
>13513	FunctionDef	CMainFrame 
>13514	ParameterList	UINT fwSide , LPRECT pRect
>13515	Parameter	 
>13516	Identifier	pRect
>13517	ParameterType	LPRECT
>13518	Parameter	 
>13519	Identifier	fwSide
>13520	ParameterType	UINT
>13521	ReturnType	void
>13522	CompoundStatement	 
>13523	ExpressionStatement	 
>13524	CallExpression	GetClientRect ( g_rctOld )
>13525	ArgumentList	g_rctOld
>13526	Argument	g_rctOld
>13527	Identifier	g_rctOld
>13528	Callee	GetClientRect
>13529	Identifier	GetClientRect
>13530	ExpressionStatement	 
>13531	CallExpression	CFrameWnd 
>13532	ArgumentList	fwSide
>13533	Argument	pRect
>13534	Identifier	pRect
>13535	Argument	fwSide
>13536	Identifier	fwSide
>13537	Callee	CFrameWnd 
>13538	Identifier	CFrameWnd 
>13545	FunctionDef	CMainFrame 
>13546	ParameterList	 
>13547	ReturnType	void
>13548	CompoundStatement	 
>13549	ExpressionStatement	 
>13550	CallExpression	DoAbout ( )
>13551	ArgumentList	 
>13552	Callee	DoAbout
>13553	Identifier	DoAbout
>13557	FunctionDef	CMainFrame 
>13558	ParameterList	 
>13559	ReturnType	void
>13560	CompoundStatement	 
>13561	IfStatement	if ( ActiveXY ( ) )
>13562	CompoundStatement	 
>13563	IfStatement	if ( ActiveXY ( ) -> ClipMode ( ) )
>13564	ElseStatement	else
>13565	CompoundStatement	 
>13566	ExpressionStatement	 
>13567	CallExpression	m_wndToolBar . GetToolBarCtrl ( ) . CheckButton ( ID_VIEW_CLIPPER )
>13568	ArgumentList	ID_VIEW_CLIPPER
>13569	Argument	ID_VIEW_CLIPPER
>13570	Identifier	ID_VIEW_CLIPPER
>13571	Callee	m_wndToolBar . GetToolBarCtrl ( ) . CheckButton
>13572	MemberAccess	m_wndToolBar . GetToolBarCtrl ( ) . CheckButton
>13573	Identifier	CheckButton
>13574	CallExpression	m_wndToolBar . GetToolBarCtrl ( )
>13575	ArgumentList	 
>13576	Callee	m_wndToolBar . GetToolBarCtrl
>13577	MemberAccess	m_wndToolBar . GetToolBarCtrl
>13578	Identifier	GetToolBarCtrl
>13579	Identifier	m_wndToolBar
>13580	ExpressionStatement	 
>13581	CallExpression	ActiveXY ( ) -> SetClipMode ( true )
>13582	ArgumentList	true
>13583	Argument	true
>13584	Identifier	true
>13585	Callee	ActiveXY ( ) -> SetClipMode
>13586	PtrMemberAccess	ActiveXY ( ) -> SetClipMode
>13587	Identifier	SetClipMode
>13588	CallExpression	ActiveXY ( )
>13589	ArgumentList	 
>13590	Callee	ActiveXY
>13591	Identifier	ActiveXY
>13592	IfStatement	if ( ActiveXY ( ) -> RotateMode ( ) )
>13593	ExpressionStatement	 
>13594	CallExpression	OnSelectMouserotate ( )
>13595	ArgumentList	 
>13596	Callee	OnSelectMouserotate
>13597	Identifier	OnSelectMouserotate
>13598	Condition	 
>13599	CallExpression	ActiveXY ( ) -> RotateMode ( )
>13600	ArgumentList	 
>13601	Callee	ActiveXY ( ) -> RotateMode
>13602	PtrMemberAccess	ActiveXY ( ) -> RotateMode
>13603	Identifier	RotateMode
>13604	CallExpression	ActiveXY ( )
>13605	ArgumentList	 
>13606	Callee	ActiveXY
>13607	Identifier	ActiveXY
>13608	CompoundStatement	 
>13609	ExpressionStatement	 
>13610	CallExpression	m_wndToolBar . GetToolBarCtrl ( ) . CheckButton ( ID_VIEW_CLIPPER , FALSE )
>13611	ArgumentList	ID_VIEW_CLIPPER
>13612	Argument	FALSE
>13613	Identifier	FALSE
>13614	Argument	ID_VIEW_CLIPPER
>13615	Identifier	ID_VIEW_CLIPPER
>13616	Callee	m_wndToolBar . GetToolBarCtrl ( ) . CheckButton
>13617	MemberAccess	m_wndToolBar . GetToolBarCtrl ( ) . CheckButton
>13618	Identifier	CheckButton
>13619	CallExpression	m_wndToolBar . GetToolBarCtrl ( )
>13620	ArgumentList	 
>13621	Callee	m_wndToolBar . GetToolBarCtrl
>13622	MemberAccess	m_wndToolBar . GetToolBarCtrl
>13623	Identifier	GetToolBarCtrl
>13624	Identifier	m_wndToolBar
>13625	ExpressionStatement	 
>13626	CallExpression	ActiveXY ( ) -> SetClipMode ( false )
>13627	ArgumentList	false
>13628	Argument	false
>13629	Identifier	false
>13630	Callee	ActiveXY ( ) -> SetClipMode
>13631	PtrMemberAccess	ActiveXY ( ) -> SetClipMode
>13632	Identifier	SetClipMode
>13633	CallExpression	ActiveXY ( )
>13634	ArgumentList	 
>13635	Callee	ActiveXY
>13636	Identifier	ActiveXY
>13637	Condition	 
>13638	CallExpression	ActiveXY ( ) -> ClipMode ( )
>13639	ArgumentList	 
>13640	Callee	ActiveXY ( ) -> ClipMode
>13641	PtrMemberAccess	ActiveXY ( ) -> ClipMode
>13642	Identifier	ClipMode
>13643	CallExpression	ActiveXY ( )
>13644	ArgumentList	 
>13645	Callee	ActiveXY
>13646	Identifier	ActiveXY
>13647	Condition	 
>13648	CallExpression	ActiveXY ( )
>13649	ArgumentList	 
>13650	Callee	ActiveXY
>13651	Identifier	ActiveXY
>13665	FunctionDef	CMainFrame 
>13666	ParameterList	 
>13667	ReturnType	void
>13668	CompoundStatement	 
>13669	ExpressionStatement	 
>13670	CallExpression	Sys_UpdateWindows ( W_CAMERA | W_XY_OVERLAY )
>13671	ArgumentList	W_CAMERA | W_XY_OVERLAY
>13672	Argument	W_CAMERA | W_XY_OVERLAY
>13673	InclusiveOrExpression	W_CAMERA | W_XY_OVERLAY
>13674	Identifier	W_XY_OVERLAY
>13675	Identifier	W_CAMERA
>13676	Callee	Sys_UpdateWindows
>13677	Identifier	Sys_UpdateWindows
>13678	IfStatement	if ( m_pCamWnd -> Camera ( ) . angles [ 0 ] < - 85 )
>13679	ExpressionStatement	 
>13680	AssignmentExpr	m_pCamWnd -> Camera ( ) . angles [ 0 ] = - 85
>13681	UnaryOp	- 85
>13682	PrimaryExpression	85
>13683	UnaryOperator	-
>13684	ArrayIndexing	m_pCamWnd -> Camera ( ) . angles [ 0 ]
>13685	PrimaryExpression	0
>13686	MemberAccess	m_pCamWnd -> Camera ( ) . angles
>13687	Identifier	angles
>13688	CallExpression	m_pCamWnd -> Camera ( )
>13689	ArgumentList	 
>13690	Callee	m_pCamWnd -> Camera
>13691	PtrMemberAccess	m_pCamWnd -> Camera
>13692	Identifier	Camera
>13693	Identifier	m_pCamWnd
>13694	Condition	 
>13695	RelationalExpression	m_pCamWnd -> Camera ( ) . angles [ 0 ] < - 85
>13696	UnaryOp	- 85
>13697	PrimaryExpression	85
>13698	UnaryOperator	-
>13699	ArrayIndexing	m_pCamWnd -> Camera ( ) . angles [ 0 ]
>13700	PrimaryExpression	0
>13701	MemberAccess	m_pCamWnd -> Camera ( ) . angles
>13702	Identifier	angles
>13703	CallExpression	m_pCamWnd -> Camera ( )
>13704	ArgumentList	 
>13705	Callee	m_pCamWnd -> Camera
>13706	PtrMemberAccess	m_pCamWnd -> Camera
>13707	Identifier	Camera
>13708	Identifier	m_pCamWnd
>13709	ExpressionStatement	 
>13710	AssignmentExpr	m_pCamWnd -> Camera ( ) . angles [ 0 ] -= SPEED_TURN
>13711	Identifier	SPEED_TURN
>13712	ArrayIndexing	m_pCamWnd -> Camera ( ) . angles [ 0 ]
>13713	PrimaryExpression	0
>13714	MemberAccess	m_pCamWnd -> Camera ( ) . angles
>13715	Identifier	angles
>13716	CallExpression	m_pCamWnd -> Camera ( )
>13717	ArgumentList	 
>13718	Callee	m_pCamWnd -> Camera
>13719	PtrMemberAccess	m_pCamWnd -> Camera
>13720	Identifier	Camera
>13721	Identifier	m_pCamWnd
>13735	FunctionDef	CMainFrame 
>13736	ParameterList	 
>13737	ReturnType	void
>13738	CompoundStatement	 
>13739	ExpressionStatement	 
>13740	CallExpression	Sys_UpdateWindows ( W_CAMERA | W_XY_OVERLAY )
>13741	ArgumentList	W_CAMERA | W_XY_OVERLAY
>13742	Argument	W_CAMERA | W_XY_OVERLAY
>13743	InclusiveOrExpression	W_CAMERA | W_XY_OVERLAY
>13744	Identifier	W_XY_OVERLAY
>13745	Identifier	W_CAMERA
>13746	Callee	Sys_UpdateWindows
>13747	Identifier	Sys_UpdateWindows
>13748	IfStatement	if ( m_pCamWnd -> Camera ( ) . angles [ 0 ] > 85 )
>13749	ExpressionStatement	 
>13750	AssignmentExpr	m_pCamWnd -> Camera ( ) . angles [ 0 ] = 85
>13751	PrimaryExpression	85
>13752	ArrayIndexing	m_pCamWnd -> Camera ( ) . angles [ 0 ]
>13753	PrimaryExpression	0
>13754	MemberAccess	m_pCamWnd -> Camera ( ) . angles
>13755	Identifier	angles
>13756	CallExpression	m_pCamWnd -> Camera ( )
>13757	ArgumentList	 
>13758	Callee	m_pCamWnd -> Camera
>13759	PtrMemberAccess	m_pCamWnd -> Camera
>13760	Identifier	Camera
>13761	Identifier	m_pCamWnd
>13762	Condition	 
>13763	RelationalExpression	m_pCamWnd -> Camera ( ) . angles [ 0 ] > 85
>13764	PrimaryExpression	85
>13765	ArrayIndexing	m_pCamWnd -> Camera ( ) . angles [ 0 ]
>13766	PrimaryExpression	0
>13767	MemberAccess	m_pCamWnd -> Camera ( ) . angles
>13768	Identifier	angles
>13769	CallExpression	m_pCamWnd -> Camera ( )
>13770	ArgumentList	 
>13771	Callee	m_pCamWnd -> Camera
>13772	PtrMemberAccess	m_pCamWnd -> Camera
>13773	Identifier	Camera
>13774	Identifier	m_pCamWnd
>13775	ExpressionStatement	 
>13776	AssignmentExpr	m_pCamWnd -> Camera ( ) . angles [ 0 ] += SPEED_TURN
>13777	Identifier	SPEED_TURN
>13778	ArrayIndexing	m_pCamWnd -> Camera ( ) . angles [ 0 ]
>13779	PrimaryExpression	0
>13780	MemberAccess	m_pCamWnd -> Camera ( ) . angles
>13781	Identifier	angles
>13782	CallExpression	m_pCamWnd -> Camera ( )
>13783	ArgumentList	 
>13784	Callee	m_pCamWnd -> Camera
>13785	PtrMemberAccess	m_pCamWnd -> Camera
>13786	Identifier	Camera
>13787	Identifier	m_pCamWnd
>13801	FunctionDef	CMainFrame 
>13802	ParameterList	 
>13803	ReturnType	void
>13804	CompoundStatement	 
>13805	ExpressionStatement	 
>13806	CallExpression	Sys_UpdateWindows ( nUpdate )
>13807	ArgumentList	nUpdate
>13808	Argument	nUpdate
>13809	Identifier	nUpdate
>13810	Callee	Sys_UpdateWindows
>13811	Identifier	Sys_UpdateWindows
>13812	IdentifierDeclStatement	 
>13813	IdentifierDecl	nUpdate = ( g_PrefsDlg . m_bCamXYUpdate ) ? ( W_CAMERA | W_XY ) 
>13814	AssignmentExpr	nUpdate = ( g_PrefsDlg . m_bCamXYUpdate ) ? ( W_CAMERA | W_XY ) 
>13815	ConditionalExpression	( g_PrefsDlg . m_bCamXYUpdate ) ? ( W_CAMERA | W_XY ) 
>13816	Identifier	W_CAMERA
>13817	InclusiveOrExpression	W_CAMERA | W_XY
>13818	Identifier	W_XY
>13819	Identifier	W_CAMERA
>13820	Condition	g_PrefsDlg . m_bCamXYUpdate
>13821	MemberAccess	g_PrefsDlg . m_bCamXYUpdate
>13822	Identifier	m_bCamXYUpdate
>13823	Identifier	g_PrefsDlg
>13824	Identifier	nUpdate
>13825	Identifier	nUpdate
>13826	IdentifierDeclType	int
>13827	ExpressionStatement	 
>13828	CallExpression	VectorMA ( m_pCamWnd -> Camera ( ) . origin , - SPEED_MOVE , m_pCamWnd -> Camera ( ) . forward , m_pCamWnd -> Camera ( ) \
>13829	ArgumentList	m_pCamWnd -> Camera ( ) . origin
>13830	Argument	m_pCamWnd -> Camera ( ) . origin
>13831	MemberAccess	m_pCamWnd -> Camera ( ) . origin
>13832	Identifier	origin
>13833	CallExpression	m_pCamWnd -> Camera ( )
>13834	ArgumentList	 
>13835	Callee	m_pCamWnd -> Camera
>13836	PtrMemberAccess	m_pCamWnd -> Camera
>13837	Identifier	Camera
>13838	Identifier	m_pCamWnd
>13839	Argument	m_pCamWnd -> Camera ( ) . forward
>13840	MemberAccess	m_pCamWnd -> Camera ( ) . forward
>13841	Identifier	forward
>13842	CallExpression	m_pCamWnd -> Camera ( )
>13843	ArgumentList	 
>13844	Callee	m_pCamWnd -> Camera
>13845	PtrMemberAccess	m_pCamWnd -> Camera
>13846	Identifier	Camera
>13847	Identifier	m_pCamWnd
>13848	Argument	- SPEED_MOVE
>13849	UnaryOp	- SPEED_MOVE
>13850	Identifier	SPEED_MOVE
>13851	UnaryOperator	-
>13852	Argument	m_pCamWnd -> Camera ( ) . origin
>13853	MemberAccess	m_pCamWnd -> Camera ( ) . origin
>13854	Identifier	origin
>13855	CallExpression	m_pCamWnd -> Camera ( )
>13856	ArgumentList	 
>13857	Callee	m_pCamWnd -> Camera
>13858	PtrMemberAccess	m_pCamWnd -> Camera
>13859	Identifier	Camera
>13860	Identifier	m_pCamWnd
>13861	Callee	VectorMA
>13862	Identifier	VectorMA
>13877	FunctionDef	CMainFrame 
>13878	ParameterList	 
>13879	ReturnType	void
>13880	CompoundStatement	 
>13881	ExpressionStatement	 
>13882	CallExpression	Sys_UpdateWindows ( nUpdate )
>13883	ArgumentList	nUpdate
>13884	Argument	nUpdate
>13885	Identifier	nUpdate
>13886	Callee	Sys_UpdateWindows
>13887	Identifier	Sys_UpdateWindows
>13888	IdentifierDeclStatement	 
>13889	IdentifierDecl	nUpdate = ( g_PrefsDlg . m_bCamXYUpdate ) ? ( W_CAMERA | W_XY ) 
>13890	AssignmentExpr	nUpdate = ( g_PrefsDlg . m_bCamXYUpdate ) ? ( W_CAMERA | W_XY ) 
>13891	ConditionalExpression	( g_PrefsDlg . m_bCamXYUpdate ) ? ( W_CAMERA | W_XY ) 
>13892	Identifier	W_CAMERA
>13893	InclusiveOrExpression	W_CAMERA | W_XY
>13894	Identifier	W_XY
>13895	Identifier	W_CAMERA
>13896	Condition	g_PrefsDlg . m_bCamXYUpdate
>13897	MemberAccess	g_PrefsDlg . m_bCamXYUpdate
>13898	Identifier	m_bCamXYUpdate
>13899	Identifier	g_PrefsDlg
>13900	Identifier	nUpdate
>13901	Identifier	nUpdate
>13902	IdentifierDeclType	int
>13903	ExpressionStatement	 
>13904	AssignmentExpr	m_pCamWnd -> Camera ( ) . origin [ 2 ] -= SPEED_MOVE
>13905	Identifier	SPEED_MOVE
>13906	ArrayIndexing	m_pCamWnd -> Camera ( ) . origin [ 2 ]
>13907	PrimaryExpression	2
>13908	MemberAccess	m_pCamWnd -> Camera ( ) . origin
>13909	Identifier	origin
>13910	CallExpression	m_pCamWnd -> Camera ( )
>13911	ArgumentList	 
>13912	Callee	m_pCamWnd -> Camera
>13913	PtrMemberAccess	m_pCamWnd -> Camera
>13914	Identifier	Camera
>13915	Identifier	m_pCamWnd
>13932	FunctionDef	CMainFrame 
>13933	ParameterList	 
>13934	ReturnType	void
>13935	CompoundStatement	 
>13936	ExpressionStatement	 
>13937	CallExpression	Sys_UpdateWindows ( nUpdate )
>13938	ArgumentList	nUpdate
>13939	Argument	nUpdate
>13940	Identifier	nUpdate
>13941	Callee	Sys_UpdateWindows
>13942	Identifier	Sys_UpdateWindows
>13943	IdentifierDeclStatement	 
>13944	IdentifierDecl	nUpdate = ( g_PrefsDlg . m_bCamXYUpdate ) ? ( W_CAMERA | W_XY ) 
>13945	AssignmentExpr	nUpdate = ( g_PrefsDlg . m_bCamXYUpdate ) ? ( W_CAMERA | W_XY ) 
>13946	ConditionalExpression	( g_PrefsDlg . m_bCamXYUpdate ) ? ( W_CAMERA | W_XY ) 
>13947	Identifier	W_CAMERA
>13948	InclusiveOrExpression	W_CAMERA | W_XY
>13949	Identifier	W_XY
>13950	Identifier	W_CAMERA
>13951	Condition	g_PrefsDlg . m_bCamXYUpdate
>13952	MemberAccess	g_PrefsDlg . m_bCamXYUpdate
>13953	Identifier	m_bCamXYUpdate
>13954	Identifier	g_PrefsDlg
>13955	Identifier	nUpdate
>13956	Identifier	nUpdate
>13957	IdentifierDeclType	int
>13958	ExpressionStatement	 
>13959	CallExpression	VectorMA ( m_pCamWnd -> Camera ( ) . origin , SPEED_MOVE , m_pCamWnd -> Camera ( ) . forward , m_pCamWnd -> Camera ( ) \
>13960	ArgumentList	m_pCamWnd -> Camera ( ) . origin
>13961	Argument	m_pCamWnd -> Camera ( ) . origin
>13962	MemberAccess	m_pCamWnd -> Camera ( ) . origin
>13963	Identifier	origin
>13964	CallExpression	m_pCamWnd -> Camera ( )
>13965	ArgumentList	 
>13966	Callee	m_pCamWnd -> Camera
>13967	PtrMemberAccess	m_pCamWnd -> Camera
>13968	Identifier	Camera
>13969	Identifier	m_pCamWnd
>13970	Argument	m_pCamWnd -> Camera ( ) . forward
>13971	MemberAccess	m_pCamWnd -> Camera ( ) . forward
>13972	Identifier	forward
>13973	CallExpression	m_pCamWnd -> Camera ( )
>13974	ArgumentList	 
>13975	Callee	m_pCamWnd -> Camera
>13976	PtrMemberAccess	m_pCamWnd -> Camera
>13977	Identifier	Camera
>13978	Identifier	m_pCamWnd
>13979	Argument	SPEED_MOVE
>13980	Identifier	SPEED_MOVE
>13981	Argument	m_pCamWnd -> Camera ( ) . origin
>13982	MemberAccess	m_pCamWnd -> Camera ( ) . origin
>13983	Identifier	origin
>13984	CallExpression	m_pCamWnd -> Camera ( )
>13985	ArgumentList	 
>13986	Callee	m_pCamWnd -> Camera
>13987	PtrMemberAccess	m_pCamWnd -> Camera
>13988	Identifier	Camera
>13989	Identifier	m_pCamWnd
>13990	Callee	VectorMA
>13991	Identifier	VectorMA
>14006	FunctionDef	CMainFrame 
>14007	ParameterList	 
>14008	ReturnType	void
>14009	CompoundStatement	 
>14010	ExpressionStatement	 
>14011	CallExpression	Sys_UpdateWindows ( nUpdate )
>14012	ArgumentList	nUpdate
>14013	Argument	nUpdate
>14014	Identifier	nUpdate
>14015	Callee	Sys_UpdateWindows
>14016	Identifier	Sys_UpdateWindows
>14017	IdentifierDeclStatement	 
>14018	IdentifierDecl	nUpdate = ( g_PrefsDlg . m_bCamXYUpdate ) ? ( W_CAMERA | W_XY ) 
>14019	AssignmentExpr	nUpdate = ( g_PrefsDlg . m_bCamXYUpdate ) ? ( W_CAMERA | W_XY ) 
>14020	ConditionalExpression	( g_PrefsDlg . m_bCamXYUpdate ) ? ( W_CAMERA | W_XY ) 
>14021	Identifier	W_CAMERA
>14022	InclusiveOrExpression	W_CAMERA | W_XY
>14023	Identifier	W_XY
>14024	Identifier	W_CAMERA
>14025	Condition	g_PrefsDlg . m_bCamXYUpdate
>14026	MemberAccess	g_PrefsDlg . m_bCamXYUpdate
>14027	Identifier	m_bCamXYUpdate
>14028	Identifier	g_PrefsDlg
>14029	Identifier	nUpdate
>14030	Identifier	nUpdate
>14031	IdentifierDeclType	int
>14032	ExpressionStatement	 
>14033	AssignmentExpr	m_pCamWnd -> Camera ( ) . angles [ 1 ] += SPEED_TURN
>14034	Identifier	SPEED_TURN
>14035	ArrayIndexing	m_pCamWnd -> Camera ( ) . angles [ 1 ]
>14036	PrimaryExpression	1
>14037	MemberAccess	m_pCamWnd -> Camera ( ) . angles
>14038	Identifier	angles
>14039	CallExpression	m_pCamWnd -> Camera ( )
>14040	ArgumentList	 
>14041	Callee	m_pCamWnd -> Camera
>14042	PtrMemberAccess	m_pCamWnd -> Camera
>14043	Identifier	Camera
>14044	Identifier	m_pCamWnd
>14061	FunctionDef	CMainFrame 
>14062	ParameterList	 
>14063	ReturnType	void
>14064	CompoundStatement	 
>14065	ExpressionStatement	 
>14066	CallExpression	Sys_UpdateWindows ( nUpdate )
>14067	ArgumentList	nUpdate
>14068	Argument	nUpdate
>14069	Identifier	nUpdate
>14070	Callee	Sys_UpdateWindows
>14071	Identifier	Sys_UpdateWindows
>14072	IdentifierDeclStatement	 
>14073	IdentifierDecl	nUpdate = ( g_PrefsDlg . m_bCamXYUpdate ) ? ( W_CAMERA | W_XY ) 
>14074	AssignmentExpr	nUpdate = ( g_PrefsDlg . m_bCamXYUpdate ) ? ( W_CAMERA | W_XY ) 
>14075	ConditionalExpression	( g_PrefsDlg . m_bCamXYUpdate ) ? ( W_CAMERA | W_XY ) 
>14076	Identifier	W_CAMERA
>14077	InclusiveOrExpression	W_CAMERA | W_XY
>14078	Identifier	W_XY
>14079	Identifier	W_CAMERA
>14080	Condition	g_PrefsDlg . m_bCamXYUpdate
>14081	MemberAccess	g_PrefsDlg . m_bCamXYUpdate
>14082	Identifier	m_bCamXYUpdate
>14083	Identifier	g_PrefsDlg
>14084	Identifier	nUpdate
>14085	Identifier	nUpdate
>14086	IdentifierDeclType	int
>14087	ExpressionStatement	 
>14088	AssignmentExpr	m_pCamWnd -> Camera ( ) . angles [ 1 ] -= SPEED_TURN
>14089	Identifier	SPEED_TURN
>14090	ArrayIndexing	m_pCamWnd -> Camera ( ) . angles [ 1 ]
>14091	PrimaryExpression	1
>14092	MemberAccess	m_pCamWnd -> Camera ( ) . angles
>14093	Identifier	angles
>14094	CallExpression	m_pCamWnd -> Camera ( )
>14095	ArgumentList	 
>14096	Callee	m_pCamWnd -> Camera
>14097	PtrMemberAccess	m_pCamWnd -> Camera
>14098	Identifier	Camera
>14099	Identifier	m_pCamWnd
>14116	FunctionDef	CMainFrame 
>14117	ParameterList	 
>14118	ReturnType	void
>14119	CompoundStatement	 
>14120	ExpressionStatement	 
>14121	CallExpression	Sys_UpdateWindows ( nUpdate )
>14122	ArgumentList	nUpdate
>14123	Argument	nUpdate
>14124	Identifier	nUpdate
>14125	Callee	Sys_UpdateWindows
>14126	Identifier	Sys_UpdateWindows
>14127	IdentifierDeclStatement	 
>14128	IdentifierDecl	nUpdate = ( g_PrefsDlg . m_bCamXYUpdate ) ? ( W_CAMERA | W_XY ) 
>14129	AssignmentExpr	nUpdate = ( g_PrefsDlg . m_bCamXYUpdate ) ? ( W_CAMERA | W_XY ) 
>14130	ConditionalExpression	( g_PrefsDlg . m_bCamXYUpdate ) ? ( W_CAMERA | W_XY ) 
>14131	Identifier	W_CAMERA
>14132	InclusiveOrExpression	W_CAMERA | W_XY
>14133	Identifier	W_XY
>14134	Identifier	W_CAMERA
>14135	Condition	g_PrefsDlg . m_bCamXYUpdate
>14136	MemberAccess	g_PrefsDlg . m_bCamXYUpdate
>14137	Identifier	m_bCamXYUpdate
>14138	Identifier	g_PrefsDlg
>14139	Identifier	nUpdate
>14140	Identifier	nUpdate
>14141	IdentifierDeclType	int
>14142	ExpressionStatement	 
>14143	CallExpression	VectorMA ( m_pCamWnd -> Camera ( ) . origin , - SPEED_MOVE , m_pCamWnd -> Camera ( ) . right , m_pCamWnd -> Camera ( ) \
>14144	ArgumentList	m_pCamWnd -> Camera ( ) . origin
>14145	Argument	m_pCamWnd -> Camera ( ) . origin
>14146	MemberAccess	m_pCamWnd -> Camera ( ) . origin
>14147	Identifier	origin
>14148	CallExpression	m_pCamWnd -> Camera ( )
>14149	ArgumentList	 
>14150	Callee	m_pCamWnd -> Camera
>14151	PtrMemberAccess	m_pCamWnd -> Camera
>14152	Identifier	Camera
>14153	Identifier	m_pCamWnd
>14154	Argument	m_pCamWnd -> Camera ( ) . right
>14155	MemberAccess	m_pCamWnd -> Camera ( ) . right
>14156	Identifier	right
>14157	CallExpression	m_pCamWnd -> Camera ( )
>14158	ArgumentList	 
>14159	Callee	m_pCamWnd -> Camera
>14160	PtrMemberAccess	m_pCamWnd -> Camera
>14161	Identifier	Camera
>14162	Identifier	m_pCamWnd
>14163	Argument	- SPEED_MOVE
>14164	UnaryOp	- SPEED_MOVE
>14165	Identifier	SPEED_MOVE
>14166	UnaryOperator	-
>14167	Argument	m_pCamWnd -> Camera ( ) . origin
>14168	MemberAccess	m_pCamWnd -> Camera ( ) . origin
>14169	Identifier	origin
>14170	CallExpression	m_pCamWnd -> Camera ( )
>14171	ArgumentList	 
>14172	Callee	m_pCamWnd -> Camera
>14173	PtrMemberAccess	m_pCamWnd -> Camera
>14174	Identifier	Camera
>14175	Identifier	m_pCamWnd
>14176	Callee	VectorMA
>14177	Identifier	VectorMA
>14192	FunctionDef	CMainFrame 
>14193	ParameterList	 
>14194	ReturnType	void
>14195	CompoundStatement	 
>14196	ExpressionStatement	 
>14197	CallExpression	Sys_UpdateWindows ( nUpdate )
>14198	ArgumentList	nUpdate
>14199	Argument	nUpdate
>14200	Identifier	nUpdate
>14201	Callee	Sys_UpdateWindows
>14202	Identifier	Sys_UpdateWindows
>14203	IdentifierDeclStatement	 
>14204	IdentifierDecl	nUpdate = ( g_PrefsDlg . m_bCamXYUpdate ) ? ( W_CAMERA | W_XY ) 
>14205	AssignmentExpr	nUpdate = ( g_PrefsDlg . m_bCamXYUpdate ) ? ( W_CAMERA | W_XY ) 
>14206	ConditionalExpression	( g_PrefsDlg . m_bCamXYUpdate ) ? ( W_CAMERA | W_XY ) 
>14207	Identifier	W_CAMERA
>14208	InclusiveOrExpression	W_CAMERA | W_XY
>14209	Identifier	W_XY
>14210	Identifier	W_CAMERA
>14211	Condition	g_PrefsDlg . m_bCamXYUpdate
>14212	MemberAccess	g_PrefsDlg . m_bCamXYUpdate
>14213	Identifier	m_bCamXYUpdate
>14214	Identifier	g_PrefsDlg
>14215	Identifier	nUpdate
>14216	Identifier	nUpdate
>14217	IdentifierDeclType	int
>14218	ExpressionStatement	 
>14219	CallExpression	VectorMA ( m_pCamWnd -> Camera ( ) . origin , SPEED_MOVE , m_pCamWnd -> Camera ( ) . right , m_pCamWnd -> Camera ( ) \
>14220	ArgumentList	m_pCamWnd -> Camera ( ) . origin
>14221	Argument	m_pCamWnd -> Camera ( ) . origin
>14222	MemberAccess	m_pCamWnd -> Camera ( ) . origin
>14223	Identifier	origin
>14224	CallExpression	m_pCamWnd -> Camera ( )
>14225	ArgumentList	 
>14226	Callee	m_pCamWnd -> Camera
>14227	PtrMemberAccess	m_pCamWnd -> Camera
>14228	Identifier	Camera
>14229	Identifier	m_pCamWnd
>14230	Argument	m_pCamWnd -> Camera ( ) . right
>14231	MemberAccess	m_pCamWnd -> Camera ( ) . right
>14232	Identifier	right
>14233	CallExpression	m_pCamWnd -> Camera ( )
>14234	ArgumentList	 
>14235	Callee	m_pCamWnd -> Camera
>14236	PtrMemberAccess	m_pCamWnd -> Camera
>14237	Identifier	Camera
>14238	Identifier	m_pCamWnd
>14239	Argument	SPEED_MOVE
>14240	Identifier	SPEED_MOVE
>14241	Argument	m_pCamWnd -> Camera ( ) . origin
>14242	MemberAccess	m_pCamWnd -> Camera ( ) . origin
>14243	Identifier	origin
>14244	CallExpression	m_pCamWnd -> Camera ( )
>14245	ArgumentList	 
>14246	Callee	m_pCamWnd -> Camera
>14247	PtrMemberAccess	m_pCamWnd -> Camera
>14248	Identifier	Camera
>14249	Identifier	m_pCamWnd
>14250	Callee	VectorMA
>14251	Identifier	VectorMA
>14266	FunctionDef	CMainFrame 
>14267	ParameterList	 
>14268	ReturnType	void
>14269	CompoundStatement	 
>14270	ExpressionStatement	 
>14271	CallExpression	Sys_UpdateWindows ( nUpdate )
>14272	ArgumentList	nUpdate
>14273	Argument	nUpdate
>14274	Identifier	nUpdate
>14275	Callee	Sys_UpdateWindows
>14276	Identifier	Sys_UpdateWindows
>14277	IdentifierDeclStatement	 
>14278	IdentifierDecl	nUpdate = ( g_PrefsDlg . m_bCamXYUpdate ) ? ( W_CAMERA | W_XY ) 
>14279	AssignmentExpr	nUpdate = ( g_PrefsDlg . m_bCamXYUpdate ) ? ( W_CAMERA | W_XY ) 
>14280	ConditionalExpression	( g_PrefsDlg . m_bCamXYUpdate ) ? ( W_CAMERA | W_XY ) 
>14281	Identifier	W_CAMERA
>14282	InclusiveOrExpression	W_CAMERA | W_XY
>14283	Identifier	W_XY
>14284	Identifier	W_CAMERA
>14285	Condition	g_PrefsDlg . m_bCamXYUpdate
>14286	MemberAccess	g_PrefsDlg . m_bCamXYUpdate
>14287	Identifier	m_bCamXYUpdate
>14288	Identifier	g_PrefsDlg
>14289	Identifier	nUpdate
>14290	Identifier	nUpdate
>14291	IdentifierDeclType	int
>14292	ExpressionStatement	 
>14293	AssignmentExpr	m_pCamWnd -> Camera ( ) . origin [ 2 ] += SPEED_MOVE
>14294	Identifier	SPEED_MOVE
>14295	ArrayIndexing	m_pCamWnd -> Camera ( ) . origin [ 2 ]
>14296	PrimaryExpression	2
>14297	MemberAccess	m_pCamWnd -> Camera ( ) . origin
>14298	Identifier	origin
>14299	CallExpression	m_pCamWnd -> Camera ( )
>14300	ArgumentList	 
>14301	Callee	m_pCamWnd -> Camera
>14302	PtrMemberAccess	m_pCamWnd -> Camera
>14303	Identifier	Camera
>14304	Identifier	m_pCamWnd
>14321	FunctionDef	CMainFrame 
>14322	ParameterList	 
>14323	ReturnType	void
>14324	CompoundStatement	 
>14325	ExpressionStatement	 
>14326	CallExpression	Sys_UpdateWindows ( W_XY | W_Z )
>14327	ArgumentList	W_XY | W_Z
>14328	Argument	W_XY | W_Z
>14329	InclusiveOrExpression	W_XY | W_Z
>14330	Identifier	W_Z
>14331	Identifier	W_XY
>14332	Callee	Sys_UpdateWindows
>14333	Identifier	Sys_UpdateWindows
>14334	ExpressionStatement	 
>14335	AssignmentExpr	g_qeglobals . d_showgrid = ! g_qeglobals . d_showgrid
>14336	UnaryOp	! g_qeglobals . d_showgrid
>14337	MemberAccess	g_qeglobals . d_showgrid
>14338	Identifier	d_showgrid
>14339	Identifier	g_qeglobals
>14340	UnaryOperator	!
>14341	MemberAccess	g_qeglobals . d_showgrid
>14342	Identifier	d_showgrid
>14343	Identifier	g_qeglobals
>14351	FunctionDef	CMainFrame 
>14352	ParameterList	 
>14353	ReturnType	void
>14354	CompoundStatement	 
>14355	IfStatement	if ( g_PrefsDlg . DoModal ( ) == IDOK )
>14356	CompoundStatement	 
>14357	IfStatement	if ( pMenu )
>14358	ExpressionStatement	 
>14359	CallExpression	pMenu -> CheckMenuItem ( ID_SNAPTOGRID , MF_BYCOMMAND | ( ! g_PrefsDlg . m_bNoClamp ) ? MF_CHECKED 
>14360	ArgumentList	ID_SNAPTOGRID
>14361	Argument	MF_BYCOMMAND | ( ! g_PrefsDlg . m_bNoClamp ) ? MF_CHECKED 
>14362	ConditionalExpression	MF_BYCOMMAND | ( ! g_PrefsDlg . m_bNoClamp ) ? MF_CHECKED 
>14363	Identifier	MF_UNCHECKED
>14364	Identifier	MF_CHECKED
>14365	Condition	MF_BYCOMMAND | ( ! g_PrefsDlg . m_bNoClamp )
>14366	InclusiveOrExpression	MF_BYCOMMAND | ( ! g_PrefsDlg . m_bNoClamp )
>14367	UnaryOp	! g_PrefsDlg . m_bNoClamp
>14368	MemberAccess	g_PrefsDlg . m_bNoClamp
>14369	Identifier	m_bNoClamp
>14370	Identifier	g_PrefsDlg
>14371	UnaryOperator	!
>14372	Identifier	MF_BYCOMMAND
>14373	Argument	ID_SNAPTOGRID
>14374	Identifier	ID_SNAPTOGRID
>14375	Callee	pMenu -> CheckMenuItem
>14376	PtrMemberAccess	pMenu -> CheckMenuItem
>14377	Identifier	CheckMenuItem
>14378	Identifier	pMenu
>14379	Condition	 
>14380	Identifier	pMenu
>14381	IdentifierDeclStatement	 
>14382	IdentifierDecl	* pMenu = GetMenu ( )
>14383	AssignmentExpr	* pMenu = GetMenu ( )
>14384	CallExpression	GetMenu ( )
>14385	ArgumentList	 
>14386	Callee	GetMenu
>14387	Identifier	GetMenu
>14388	Identifier	pMenu
>14389	Identifier	pMenu
>14390	IdentifierDeclType	CMenu *
>14391	IfStatement	if ( bTextureBar != g_PrefsDlg . m_bTextureBar )
>14392	CompoundStatement	 
>14393	ExpressionStatement	 
>14394	CallExpression	m_wndTextureBar . Invalidate ( )
>14395	ArgumentList	 
>14396	Callee	m_wndTextureBar . Invalidate
>14397	MemberAccess	m_wndTextureBar . Invalidate
>14398	Identifier	Invalidate
>14399	Identifier	m_wndTextureBar
>14400	IfStatement	if ( bTextureBar )
>14401	ElseStatement	else
>14402	ExpressionStatement	 
>14403	CallExpression	ShowControlBar ( & m_wndTextureBar , FALSE , TRUE )
>14404	ArgumentList	& m_wndTextureBar
>14405	Argument	TRUE
>14406	Identifier	TRUE
>14407	Argument	FALSE
>14408	Identifier	FALSE
>14409	Argument	& m_wndTextureBar
>14410	UnaryOp	& m_wndTextureBar
>14411	Identifier	m_wndTextureBar
>14412	UnaryOperator	&
>14413	Callee	ShowControlBar
>14414	Identifier	ShowControlBar
>14415	ExpressionStatement	 
>14416	CallExpression	ShowControlBar ( & m_wndTextureBar , TRUE , TRUE )
>14417	ArgumentList	& m_wndTextureBar
>14418	Argument	TRUE
>14419	Identifier	TRUE
>14420	Argument	TRUE
>14421	Identifier	TRUE
>14422	Argument	& m_wndTextureBar
>14423	UnaryOp	& m_wndTextureBar
>14424	Identifier	m_wndTextureBar
>14425	UnaryOperator	&
>14426	Callee	ShowControlBar
>14427	Identifier	ShowControlBar
>14428	Condition	 
>14429	Identifier	bTextureBar
>14430	Condition	 
>14431	EqualityExpression	bTextureBar != g_PrefsDlg . m_bTextureBar
>14432	MemberAccess	g_PrefsDlg . m_bTextureBar
>14433	Identifier	m_bTextureBar
>14434	Identifier	g_PrefsDlg
>14435	Identifier	bTextureBar
>14436	IfStatement	if ( m_pTexWnd )
>14437	ExpressionStatement	 
>14438	CallExpression	m_pTexWnd -> UpdatePrefs ( )
>14439	ArgumentList	 
>14440	Callee	m_pTexWnd -> UpdatePrefs
>14441	PtrMemberAccess	m_pTexWnd -> UpdatePrefs
>14442	Identifier	UpdatePrefs
>14443	Identifier	m_pTexWnd
>14444	Condition	 
>14445	Identifier	m_pTexWnd
>14446	IfStatement	if ( g_PrefsDlg . m_nView != nView || g_PrefsDlg . m_bWideToolbar != bToolbar || g_PrefsDlg . m_bSGIOpenGL != bSGIOpenGL || \
>14447	ExpressionStatement	 
>14448	CallExpression	MessageBox ( \"You need to restart Q3Radiant for the view changes to take place.\" )
>14449	ArgumentList	\"You need to restart Q3Radiant for the view changes to take place.\"
>14450	Argument	\"You need to restart Q3Radiant for the view changes to take place.\"
>14451	PrimaryExpression	\"You need to restart Q3Radiant for the view changes to take place.\"
>14452	Callee	MessageBox
>14453	Identifier	MessageBox
>14454	Condition	 
>14455	OrExpression	g_PrefsDlg . m_nView != nView || g_PrefsDlg . m_bWideToolbar != bToolbar || g_PrefsDlg . m_bSGIOpenGL != \
>14456	OrExpression	g_PrefsDlg . m_bWideToolbar != bToolbar || g_PrefsDlg . m_bSGIOpenGL != bSGIOpenGL || g_PrefsDlg . m_\
>14457	OrExpression	g_PrefsDlg . m_bSGIOpenGL != bSGIOpenGL || g_PrefsDlg . m_bBuggyICD != bBuggyICD || nShader != g_PrefsDlg \
>14458	OrExpression	g_PrefsDlg . m_bBuggyICD != bBuggyICD || nShader != g_PrefsDlg . m_nShader
>14459	EqualityExpression	nShader != g_PrefsDlg . m_nShader
>14460	MemberAccess	g_PrefsDlg . m_nShader
>14461	Identifier	m_nShader
>14462	Identifier	g_PrefsDlg
>14463	Identifier	nShader
>14464	EqualityExpression	g_PrefsDlg . m_bBuggyICD != bBuggyICD
>14465	Identifier	bBuggyICD
>14466	MemberAccess	g_PrefsDlg . m_bBuggyICD
>14467	Identifier	m_bBuggyICD
>14468	Identifier	g_PrefsDlg
>14469	EqualityExpression	g_PrefsDlg . m_bSGIOpenGL != bSGIOpenGL
>14470	Identifier	bSGIOpenGL
>14471	MemberAccess	g_PrefsDlg . m_bSGIOpenGL
>14472	Identifier	m_bSGIOpenGL
>14473	Identifier	g_PrefsDlg
>14474	EqualityExpression	g_PrefsDlg . m_bWideToolbar != bToolbar
>14475	Identifier	bToolbar
>14476	MemberAccess	g_PrefsDlg . m_bWideToolbar
>14477	Identifier	m_bWideToolbar
>14478	Identifier	g_PrefsDlg
>14479	EqualityExpression	g_PrefsDlg . m_nView != nView
>14480	Identifier	nView
>14481	MemberAccess	g_PrefsDlg . m_nView
>14482	Identifier	m_nView
>14483	Identifier	g_PrefsDlg
>14484	Condition	 
>14485	EqualityExpression	g_PrefsDlg . DoModal ( ) == IDOK
>14486	Identifier	IDOK
>14487	CallExpression	g_PrefsDlg . DoModal ( )
>14488	ArgumentList	 
>14489	Callee	g_PrefsDlg . DoModal
>14490	MemberAccess	g_PrefsDlg . DoModal
>14491	Identifier	DoModal
>14492	Identifier	g_PrefsDlg
>14493	ExpressionStatement	 
>14494	CallExpression	g_PrefsDlg . LoadPrefs ( )
>14495	ArgumentList	 
>14496	Callee	g_PrefsDlg . LoadPrefs
>14497	MemberAccess	g_PrefsDlg . LoadPrefs
>14498	Identifier	LoadPrefs
>14499	Identifier	g_PrefsDlg
>14500	IdentifierDeclStatement	 
>14501	IdentifierDecl	nShader = g_PrefsDlg . m_nShader
>14502	AssignmentExpr	nShader = g_PrefsDlg . m_nShader
>14503	MemberAccess	g_PrefsDlg . m_nShader
>14504	Identifier	m_nShader
>14505	Identifier	g_PrefsDlg
>14506	Identifier	nShader
>14507	Identifier	nShader
>14508	IdentifierDeclType	int
>14509	IdentifierDeclStatement	 
>14510	IdentifierDecl	bBuggyICD = g_PrefsDlg . m_bBuggyICD
>14511	AssignmentExpr	bBuggyICD = g_PrefsDlg . m_bBuggyICD
>14512	MemberAccess	g_PrefsDlg . m_bBuggyICD
>14513	Identifier	m_bBuggyICD
>14514	Identifier	g_PrefsDlg
>14515	Identifier	bBuggyICD
>14516	Identifier	bBuggyICD
>14517	IdentifierDeclType	BOOL
>14518	IdentifierDeclStatement	 
>14519	IdentifierDecl	bSGIOpenGL = g_PrefsDlg . m_bSGIOpenGL
>14520	AssignmentExpr	bSGIOpenGL = g_PrefsDlg . m_bSGIOpenGL
>14521	MemberAccess	g_PrefsDlg . m_bSGIOpenGL
>14522	Identifier	m_bSGIOpenGL
>14523	Identifier	g_PrefsDlg
>14524	Identifier	bSGIOpenGL
>14525	Identifier	bSGIOpenGL
>14526	IdentifierDeclType	BOOL
>14527	IdentifierDeclStatement	 
>14528	IdentifierDecl	bTextureBar = g_PrefsDlg . m_bTextureBar
>14529	AssignmentExpr	bTextureBar = g_PrefsDlg . m_bTextureBar
>14530	MemberAccess	g_PrefsDlg . m_bTextureBar
>14531	Identifier	m_bTextureBar
>14532	Identifier	g_PrefsDlg
>14533	Identifier	bTextureBar
>14534	Identifier	bTextureBar
>14535	IdentifierDeclType	BOOL
>14536	IdentifierDeclStatement	 
>14537	IdentifierDecl	bToolbar = g_PrefsDlg . m_bWideToolbar
>14538	AssignmentExpr	bToolbar = g_PrefsDlg . m_bWideToolbar
>14539	MemberAccess	g_PrefsDlg . m_bWideToolbar
>14540	Identifier	m_bWideToolbar
>14541	Identifier	g_PrefsDlg
>14542	Identifier	bToolbar
>14543	Identifier	bToolbar
>14544	IdentifierDeclType	BOOL
>14545	IdentifierDeclStatement	 
>14546	IdentifierDecl	nView = g_PrefsDlg . m_nView
>14547	AssignmentExpr	nView = g_PrefsDlg . m_nView
>14548	MemberAccess	g_PrefsDlg . m_nView
>14549	Identifier	m_nView
>14550	Identifier	g_PrefsDlg
>14551	Identifier	nView
>14552	Identifier	nView
>14553	IdentifierDeclType	int
>14584	FunctionDef	CMainFrame 
>14585	ParameterList	int nStyle
>14586	Parameter	 
>14587	Identifier	nStyle
>14588	ParameterType	int
>14589	ReturnType	void
>14590	CompoundStatement	 
>14595	FunctionDef	CMainFrame 
>14596	ParameterList	 
>14597	ReturnType	void
>14598	CompoundStatement	 
>14599	IfStatement	if ( m_nCurrentStyle > 0 && m_nCurrentStyle < 3 )
>14600	CompoundStatement	 
>14601	IfStatement	if ( m_pCamWnd && m_pCamWnd -> GetSafeHwnd ( ) )
>14602	CompoundStatement	 
>14603	IfStatement	if ( m_pCamWnd -> IsWindowVisible ( ) )
>14604	ElseStatement	else
>14605	ExpressionStatement	 
>14606	CallExpression	m_pCamWnd -> ShowWindow ( SW_SHOW )
>14607	ArgumentList	SW_SHOW
>14608	Argument	SW_SHOW
>14609	Identifier	SW_SHOW
>14610	Callee	m_pCamWnd -> ShowWindow
>14611	PtrMemberAccess	m_pCamWnd -> ShowWindow
>14612	Identifier	ShowWindow
>14613	Identifier	m_pCamWnd
>14614	ExpressionStatement	 
>14615	CallExpression	m_pCamWnd -> ShowWindow ( SW_HIDE )
>14616	ArgumentList	SW_HIDE
>14617	Argument	SW_HIDE
>14618	Identifier	SW_HIDE
>14619	Callee	m_pCamWnd -> ShowWindow
>14620	PtrMemberAccess	m_pCamWnd -> ShowWindow
>14621	Identifier	ShowWindow
>14622	Identifier	m_pCamWnd
>14623	Condition	 
>14624	CallExpression	m_pCamWnd -> IsWindowVisible ( )
>14625	ArgumentList	 
>14626	Callee	m_pCamWnd -> IsWindowVisible
>14627	PtrMemberAccess	m_pCamWnd -> IsWindowVisible
>14628	Identifier	IsWindowVisible
>14629	Identifier	m_pCamWnd
>14630	Condition	 
>14631	AndExpression	m_pCamWnd && m_pCamWnd -> GetSafeHwnd ( )
>14632	CallExpression	m_pCamWnd -> GetSafeHwnd ( )
>14633	ArgumentList	 
>14634	Callee	m_pCamWnd -> GetSafeHwnd
>14635	PtrMemberAccess	m_pCamWnd -> GetSafeHwnd
>14636	Identifier	GetSafeHwnd
>14637	Identifier	m_pCamWnd
>14638	Identifier	m_pCamWnd
>14639	Condition	 
>14640	AndExpression	m_nCurrentStyle > 0 && m_nCurrentStyle < 3
>14641	RelationalExpression	m_nCurrentStyle < 3
>14642	PrimaryExpression	3
>14643	Identifier	m_nCurrentStyle
>14644	RelationalExpression	m_nCurrentStyle > 0
>14645	PrimaryExpression	0
>14646	Identifier	m_nCurrentStyle
>14657	FunctionDef	CMainFrame 
>14658	ParameterList	 
>14659	ReturnType	void
>14660	CompoundStatement	 
>14661	IfStatement	if ( m_nCurrentStyle > 0 && m_nCurrentStyle < 3 )
>14662	CompoundStatement	 
>14663	IfStatement	if ( m_pEditWnd && m_pEditWnd -> GetSafeHwnd ( ) )
>14664	CompoundStatement	 
>14665	IfStatement	if ( m_pEditWnd -> IsWindowVisible ( ) )
>14666	ElseStatement	else
>14667	ExpressionStatement	 
>14668	CallExpression	m_pEditWnd -> ShowWindow ( SW_SHOW )
>14669	ArgumentList	SW_SHOW
>14670	Argument	SW_SHOW
>14671	Identifier	SW_SHOW
>14672	Callee	m_pEditWnd -> ShowWindow
>14673	PtrMemberAccess	m_pEditWnd -> ShowWindow
>14674	Identifier	ShowWindow
>14675	Identifier	m_pEditWnd
>14676	ExpressionStatement	 
>14677	CallExpression	m_pEditWnd -> ShowWindow ( SW_HIDE )
>14678	ArgumentList	SW_HIDE
>14679	Argument	SW_HIDE
>14680	Identifier	SW_HIDE
>14681	Callee	m_pEditWnd -> ShowWindow
>14682	PtrMemberAccess	m_pEditWnd -> ShowWindow
>14683	Identifier	ShowWindow
>14684	Identifier	m_pEditWnd
>14685	Condition	 
>14686	CallExpression	m_pEditWnd -> IsWindowVisible ( )
>14687	ArgumentList	 
>14688	Callee	m_pEditWnd -> IsWindowVisible
>14689	PtrMemberAccess	m_pEditWnd -> IsWindowVisible
>14690	Identifier	IsWindowVisible
>14691	Identifier	m_pEditWnd
>14692	Condition	 
>14693	AndExpression	m_pEditWnd && m_pEditWnd -> GetSafeHwnd ( )
>14694	CallExpression	m_pEditWnd -> GetSafeHwnd ( )
>14695	ArgumentList	 
>14696	Callee	m_pEditWnd -> GetSafeHwnd
>14697	PtrMemberAccess	m_pEditWnd -> GetSafeHwnd
>14698	Identifier	GetSafeHwnd
>14699	Identifier	m_pEditWnd
>14700	Identifier	m_pEditWnd
>14701	Condition	 
>14702	AndExpression	m_nCurrentStyle > 0 && m_nCurrentStyle < 3
>14703	RelationalExpression	m_nCurrentStyle < 3
>14704	PrimaryExpression	3
>14705	Identifier	m_nCurrentStyle
>14706	RelationalExpression	m_nCurrentStyle > 0
>14707	PrimaryExpression	0
>14708	Identifier	m_nCurrentStyle
>14719	FunctionDef	CMainFrame 
>14720	ParameterList	 
>14721	ReturnType	void
>14722	CompoundStatement	 
>14723	IfStatement	if ( m_nCurrentStyle == 1 )
>14724	CompoundStatement	 
>14725	IfStatement	if ( m_pXYWnd && m_pXYWnd -> GetSafeHwnd ( ) )
>14726	CompoundStatement	 
>14727	IfStatement	if ( m_pXYWnd -> IsWindowVisible ( ) )
>14728	ElseStatement	else
>14729	ExpressionStatement	 
>14730	CallExpression	m_pXYWnd -> ShowWindow ( SW_SHOW )
>14731	ArgumentList	SW_SHOW
>14732	Argument	SW_SHOW
>14733	Identifier	SW_SHOW
>14734	Callee	m_pXYWnd -> ShowWindow
>14735	PtrMemberAccess	m_pXYWnd -> ShowWindow
>14736	Identifier	ShowWindow
>14737	Identifier	m_pXYWnd
>14738	ExpressionStatement	 
>14739	CallExpression	m_pXYWnd -> ShowWindow ( SW_HIDE )
>14740	ArgumentList	SW_HIDE
>14741	Argument	SW_HIDE
>14742	Identifier	SW_HIDE
>14743	Callee	m_pXYWnd -> ShowWindow
>14744	PtrMemberAccess	m_pXYWnd -> ShowWindow
>14745	Identifier	ShowWindow
>14746	Identifier	m_pXYWnd
>14747	Condition	 
>14748	CallExpression	m_pXYWnd -> IsWindowVisible ( )
>14749	ArgumentList	 
>14750	Callee	m_pXYWnd -> IsWindowVisible
>14751	PtrMemberAccess	m_pXYWnd -> IsWindowVisible
>14752	Identifier	IsWindowVisible
>14753	Identifier	m_pXYWnd
>14754	Condition	 
>14755	AndExpression	m_pXYWnd && m_pXYWnd -> GetSafeHwnd ( )
>14756	CallExpression	m_pXYWnd -> GetSafeHwnd ( )
>14757	ArgumentList	 
>14758	Callee	m_pXYWnd -> GetSafeHwnd
>14759	PtrMemberAccess	m_pXYWnd -> GetSafeHwnd
>14760	Identifier	GetSafeHwnd
>14761	Identifier	m_pXYWnd
>14762	Identifier	m_pXYWnd
>14763	Condition	 
>14764	EqualityExpression	m_nCurrentStyle == 1
>14765	PrimaryExpression	1
>14766	Identifier	m_nCurrentStyle
>14777	FunctionDef	CMainFrame 
>14778	ParameterList	 
>14779	ReturnType	void
>14780	CompoundStatement	 
>14781	IfStatement	if ( m_nCurrentStyle == 1 || m_nCurrentStyle == 2 )
>14782	ElseStatement	else
>14783	CompoundStatement	 
>14784	ExpressionStatement	 
>14785	CallExpression	Undo_Redo ( )
>14786	ArgumentList	 
>14787	Callee	Undo_Redo
>14788	Identifier	Undo_Redo
>14789	CompoundStatement	 
>14790	IfStatement	if ( m_pZWnd && m_pZWnd -> GetSafeHwnd ( ) )
>14791	CompoundStatement	 
>14792	IfStatement	if ( m_pZWnd -> IsWindowVisible ( ) )
>14793	ElseStatement	else
>14794	ExpressionStatement	 
>14795	CallExpression	m_pZWnd -> ShowWindow ( SW_SHOW )
>14796	ArgumentList	SW_SHOW
>14797	Argument	SW_SHOW
>14798	Identifier	SW_SHOW
>14799	Callee	m_pZWnd -> ShowWindow
>14800	PtrMemberAccess	m_pZWnd -> ShowWindow
>14801	Identifier	ShowWindow
>14802	Identifier	m_pZWnd
>14803	ExpressionStatement	 
>14804	CallExpression	m_pZWnd -> ShowWindow ( SW_HIDE )
>14805	ArgumentList	SW_HIDE
>14806	Argument	SW_HIDE
>14807	Identifier	SW_HIDE
>14808	Callee	m_pZWnd -> ShowWindow
>14809	PtrMemberAccess	m_pZWnd -> ShowWindow
>14810	Identifier	ShowWindow
>14811	Identifier	m_pZWnd
>14812	Condition	 
>14813	CallExpression	m_pZWnd -> IsWindowVisible ( )
>14814	ArgumentList	 
>14815	Callee	m_pZWnd -> IsWindowVisible
>14816	PtrMemberAccess	m_pZWnd -> IsWindowVisible
>14817	Identifier	IsWindowVisible
>14818	Identifier	m_pZWnd
>14819	Condition	 
>14820	AndExpression	m_pZWnd && m_pZWnd -> GetSafeHwnd ( )
>14821	CallExpression	m_pZWnd -> GetSafeHwnd ( )
>14822	ArgumentList	 
>14823	Callee	m_pZWnd -> GetSafeHwnd
>14824	PtrMemberAccess	m_pZWnd -> GetSafeHwnd
>14825	Identifier	GetSafeHwnd
>14826	Identifier	m_pZWnd
>14827	Identifier	m_pZWnd
>14828	Condition	 
>14829	OrExpression	m_nCurrentStyle == 1 || m_nCurrentStyle == 2
>14830	EqualityExpression	m_nCurrentStyle == 2
>14831	PrimaryExpression	2
>14832	Identifier	m_nCurrentStyle
>14833	EqualityExpression	m_nCurrentStyle == 1
>14834	PrimaryExpression	1
>14835	Identifier	m_nCurrentStyle
>14846	FunctionDef	CMainFrame 
>14847	ParameterList	 
>14848	ReturnType	void
>14849	CompoundStatement	 
>14850	ExpressionStatement	 
>14851	CallExpression	SetGridStatus ( )
>14852	ArgumentList	 
>14853	Callee	SetGridStatus
>14854	Identifier	SetGridStatus
>14855	ExpressionStatement	 
>14856	CallExpression	g_PrefsDlg . SavePrefs ( )
>14857	ArgumentList	 
>14858	Callee	g_PrefsDlg . SavePrefs
>14859	MemberAccess	g_PrefsDlg . SavePrefs
>14860	Identifier	SavePrefs
>14861	Identifier	g_PrefsDlg
>14862	IfStatement	if ( pMenu )
>14863	ExpressionStatement	 
>14864	CallExpression	pMenu -> CheckMenuItem ( ID_TOGGLE_LOCK , MF_BYCOMMAND | ( g_PrefsDlg . m_bTextureLock ) ? MF_CHECKED 
>14865	ArgumentList	ID_TOGGLE_LOCK
>14866	Argument	MF_BYCOMMAND | ( g_PrefsDlg . m_bTextureLock ) ? MF_CHECKED 
>14867	ConditionalExpression	MF_BYCOMMAND | ( g_PrefsDlg . m_bTextureLock ) ? MF_CHECKED 
>14868	Identifier	MF_UNCHECKED
>14869	Identifier	MF_CHECKED
>14870	Condition	MF_BYCOMMAND | ( g_PrefsDlg . m_bTextureLock )
>14871	InclusiveOrExpression	MF_BYCOMMAND | ( g_PrefsDlg . m_bTextureLock )
>14872	MemberAccess	g_PrefsDlg . m_bTextureLock
>14873	Identifier	m_bTextureLock
>14874	Identifier	g_PrefsDlg
>14875	Identifier	MF_BYCOMMAND
>14876	Argument	ID_TOGGLE_LOCK
>14877	Identifier	ID_TOGGLE_LOCK
>14878	Callee	pMenu -> CheckMenuItem
>14879	PtrMemberAccess	pMenu -> CheckMenuItem
>14880	Identifier	CheckMenuItem
>14881	Identifier	pMenu
>14882	Condition	 
>14883	Identifier	pMenu
>14884	IdentifierDeclStatement	 
>14885	IdentifierDecl	* pMenu = GetMenu ( )
>14886	AssignmentExpr	* pMenu = GetMenu ( )
>14887	CallExpression	GetMenu ( )
>14888	ArgumentList	 
>14889	Callee	GetMenu
>14890	Identifier	GetMenu
>14891	Identifier	pMenu
>14892	Identifier	pMenu
>14893	IdentifierDeclType	CMenu *
>14894	ExpressionStatement	 
>14895	AssignmentExpr	g_PrefsDlg . m_bTextureLock = ! g_PrefsDlg . m_bTextureLock
>14896	UnaryOp	! g_PrefsDlg . m_bTextureLock
>14897	MemberAccess	g_PrefsDlg . m_bTextureLock
>14898	Identifier	m_bTextureLock
>14899	Identifier	g_PrefsDlg
>14900	UnaryOperator	!
>14901	MemberAccess	g_PrefsDlg . m_bTextureLock
>14902	Identifier	m_bTextureLock
>14903	Identifier	g_PrefsDlg
>14915	FunctionDef	CMainFrame 
>14916	ParameterList	 
>14917	ReturnType	void
>14918	CompoundStatement	 
>14919	ExpressionStatement	 
>14920	CallExpression	dlg . DoModal ( )
>14921	ArgumentList	 
>14922	Callee	dlg . DoModal
>14923	MemberAccess	dlg . DoModal
>14924	Identifier	DoModal
>14925	Identifier	dlg
>14926	IdentifierDeclStatement	 
>14927	IdentifierDecl	dlg
>14928	Identifier	dlg
>14929	IdentifierDeclType	CMapInfo
>14934	FunctionDef	CMainFrame 
>14935	ParameterList	 
>14936	ReturnType	void
>14937	CompoundStatement	 
>14938	ExpressionStatement	 
>14939	CallExpression	dlg . DoModal ( )
>14940	ArgumentList	 
>14941	Callee	dlg . DoModal
>14942	MemberAccess	dlg . DoModal
>14943	Identifier	DoModal
>14944	Identifier	dlg
>14945	IdentifierDeclStatement	 
>14946	IdentifierDecl	dlg
>14947	Identifier	dlg
>14948	IdentifierDeclType	CEntityListDlg
>14953	FunctionDef	CMainFrame 
>14954	ParameterList	 
>14955	ReturnType	void
>14956	CompoundStatement	 
>14957	ExpressionStatement	 
>14958	CallExpression	dlg . DoModal ( )
>14959	ArgumentList	 
>14960	Callee	dlg . DoModal
>14961	MemberAccess	dlg . DoModal
>14962	Identifier	DoModal
>14963	Identifier	dlg
>14964	IdentifierDeclStatement	 
>14965	IdentifierDecl	dlg
>14966	Identifier	dlg
>14967	IdentifierDeclType	CScriptDlg
>14972	FunctionDef	CMainFrame 
>14973	ParameterList	 
>14974	ReturnType	void
>14975	CompoundStatement	 
>14976	IfStatement	if ( m_nCurrentStyle != 2 )
>14977	CompoundStatement	 
>14978	ExpressionStatement	 
>14979	CallExpression	Sys_UpdateWindows ( W_XY )
>14980	ArgumentList	W_XY
>14981	Argument	W_XY
>14982	Identifier	W_XY
>14983	Callee	Sys_UpdateWindows
>14984	Identifier	Sys_UpdateWindows
>14985	ExpressionStatement	 
>14986	CallExpression	m_pXYWnd -> PositionView ( )
>14987	ArgumentList	 
>14988	Callee	m_pXYWnd -> PositionView
>14989	PtrMemberAccess	m_pXYWnd -> PositionView
>14990	Identifier	PositionView
>14991	Identifier	m_pXYWnd
>14992	IfStatement	if ( m_pXYWnd -> GetViewType ( ) == XY )
>14993	ElseStatement	else
>14994	IfStatement	if ( m_pXYWnd -> GetViewType ( ) == XZ )
>14995	ElseStatement	else
>14996	ExpressionStatement	 
>14997	CallExpression	m_pXYWnd -> SetViewType ( XY )
>14998	ArgumentList	XY
>14999	Argument	XY
>15000	Identifier	XY
>15001	Callee	m_pXYWnd -> SetViewType
>15002	PtrMemberAccess	m_pXYWnd -> SetViewType
>15003	Identifier	SetViewType
>15004	Identifier	m_pXYWnd
>15005	ExpressionStatement	 
>15006	CallExpression	m_pXYWnd -> SetViewType ( YZ )
>15007	ArgumentList	YZ
>15008	Argument	YZ
>15009	Identifier	YZ
>15010	Callee	m_pXYWnd -> SetViewType
>15011	PtrMemberAccess	m_pXYWnd -> SetViewType
>15012	Identifier	SetViewType
>15013	Identifier	m_pXYWnd
>15014	Condition	 
>15015	EqualityExpression	m_pXYWnd -> GetViewType ( ) == XZ
>15016	Identifier	XZ
>15017	CallExpression	m_pXYWnd -> GetViewType ( )
>15018	ArgumentList	 
>15019	Callee	m_pXYWnd -> GetViewType
>15020	PtrMemberAccess	m_pXYWnd -> GetViewType
>15021	Identifier	GetViewType
>15022	Identifier	m_pXYWnd
>15023	ExpressionStatement	 
>15024	CallExpression	m_pXYWnd -> SetViewType ( XZ )
>15025	ArgumentList	XZ
>15026	Argument	XZ
>15027	Identifier	XZ
>15028	Callee	m_pXYWnd -> SetViewType
>15029	PtrMemberAccess	m_pXYWnd -> SetViewType
>15030	Identifier	SetViewType
>15031	Identifier	m_pXYWnd
>15032	Condition	 
>15033	EqualityExpression	m_pXYWnd -> GetViewType ( ) == XY
>15034	Identifier	XY
>15035	CallExpression	m_pXYWnd -> GetViewType ( )
>15036	ArgumentList	 
>15037	Callee	m_pXYWnd -> GetViewType
>15038	PtrMemberAccess	m_pXYWnd -> GetViewType
>15039	Identifier	GetViewType
>15040	Identifier	m_pXYWnd
>15041	Condition	 
>15042	EqualityExpression	m_nCurrentStyle != 2
>15043	PrimaryExpression	2
>15044	Identifier	m_nCurrentStyle
>15056	FunctionDef	CMainFrame 
>15057	ParameterList	 
>15058	ReturnType	void
>15059	CompoundStatement	 
>15060	IfStatement	if ( g_b3Dfx )
>15061	CompoundStatement	 
>15062	ExpressionStatement	 
>15063	CallExpression	pWnd -> ShowWindow ( SW_SHOW )
>15064	ArgumentList	SW_SHOW
>15065	Argument	SW_SHOW
>15066	Identifier	SW_SHOW
>15067	Callee	pWnd -> ShowWindow
>15068	PtrMemberAccess	pWnd -> ShowWindow
>15069	Identifier	ShowWindow
>15070	Identifier	pWnd
>15071	ExpressionStatement	 
>15072	CallExpression	pWnd -> Create ( _3DFXCAMERA_WINDOW_CLASS , \"\" , QE3_CHILDSTYLE , rect , this , 1234 )
>15073	ArgumentList	_3DFXCAMERA_WINDOW_CLASS
>15074	Argument	1234
>15075	PrimaryExpression	1234
>15076	Argument	this
>15077	Identifier	this
>15078	Argument	rect
>15079	Identifier	rect
>15080	Argument	QE3_CHILDSTYLE
>15081	Identifier	QE3_CHILDSTYLE
>15082	Argument	\"\"
>15083	PrimaryExpression	\"\"
>15084	Argument	_3DFXCAMERA_WINDOW_CLASS
>15085	Identifier	_3DFXCAMERA_WINDOW_CLASS
>15086	Callee	pWnd -> Create
>15087	PtrMemberAccess	pWnd -> Create
>15088	Identifier	Create
>15089	Identifier	pWnd
>15090	IdentifierDeclStatement	 
>15091	IdentifierDecl	rect ( 50 , 50 , 400 , 400 )
>15092	Expression	50 , 50 , 400 , 400
>15093	Expression	50 , 400 , 400
>15094	Expression	400 , 400
>15095	PrimaryExpression	400
>15096	PrimaryExpression	400
>15097	PrimaryExpression	50
>15098	PrimaryExpression	50
>15099	Identifier	rect
>15100	IdentifierDeclType	CRect
>15101	IdentifierDeclStatement	 
>15102	IdentifierDecl	* pWnd = new C3DFXCamWnd ( )
>15103	AssignmentExpr	* pWnd = new C3DFXCamWnd ( )
>15104	UnaryExpression	new C3DFXCamWnd ( )
>15105	Identifier	pWnd
>15106	Identifier	pWnd
>15107	IdentifierDeclType	C3DFXCamWnd *
>15108	Condition	 
>15109	Identifier	g_b3Dfx
>15110	ExpressionStatement	 
>15111	CallExpression	dlg . DoModal ( )
>15112	ArgumentList	 
>15113	Callee	dlg . DoModal
>15114	MemberAccess	dlg . DoModal
>15115	Identifier	DoModal
>15116	Identifier	dlg
>15117	IdentifierDeclStatement	 
>15118	IdentifierDecl	dlg
>15119	Identifier	dlg
>15120	IdentifierDeclType	CCommandsDlg
>15132	FunctionDef	CMainFrame 
>15133	ParameterList	 
>15134	ReturnType	void
>15135	CompoundStatement	 
>15136	IdentifierDeclStatement	 
>15137	IdentifierDecl	dlg
>15138	Identifier	dlg
>15139	IdentifierDeclType	CNewProjDlg
>15144	FunctionDef	CMainFrame 
>15145	ParameterList	 
>15146	ReturnType	void
>15147	CompoundStatement	 
>15148	ForStatement	for ( int n = 0 ; n < 6 ; n ++ )
>15149	CompoundStatement	 
>15150	IfStatement	if ( m_strStatus [ n ] . GetLength ( ) >= 0 && m_wndStatusBar . GetSafeHwnd ( ) )
>15151	ExpressionStatement	 
>15152	CallExpression	m_wndStatusBar . SetPaneText ( n , m_strStatus [ n ] )
>15153	ArgumentList	n
>15154	Argument	m_strStatus [ n ]
>15155	ArrayIndexing	m_strStatus [ n ]
>15156	Identifier	n
>15157	Identifier	m_strStatus
>15158	Argument	n
>15159	Identifier	n
>15160	Callee	m_wndStatusBar . SetPaneText
>15161	MemberAccess	m_wndStatusBar . SetPaneText
>15162	Identifier	SetPaneText
>15163	Identifier	m_wndStatusBar
>15164	Condition	 
>15165	AndExpression	m_strStatus [ n ] . GetLength ( ) >= 0 && m_wndStatusBar . GetSafeHwnd ( )
>15166	CallExpression	m_wndStatusBar . GetSafeHwnd ( )
>15167	ArgumentList	 
>15168	Callee	m_wndStatusBar . GetSafeHwnd
>15169	MemberAccess	m_wndStatusBar . GetSafeHwnd
>15170	Identifier	GetSafeHwnd
>15171	Identifier	m_wndStatusBar
>15172	RelationalExpression	m_strStatus [ n ] . GetLength ( ) >= 0
>15173	PrimaryExpression	0
>15174	CallExpression	m_strStatus [ n ] . GetLength ( )
>15175	ArgumentList	 
>15176	Callee	m_strStatus [ n ] . GetLength
>15177	MemberAccess	m_strStatus [ n ] . GetLength
>15178	Identifier	GetLength
>15179	ArrayIndexing	m_strStatus [ n ]
>15180	Identifier	n
>15181	Identifier	m_strStatus
>15182	IncDecOp	 
>15183	IncDec	++
>15184	Identifier	n
>15185	Condition	 
>15186	RelationalExpression	n < 6
>15187	PrimaryExpression	6
>15188	Identifier	n
>15189	ForInit	 
>15190	IdentifierDeclStatement	int n = 0 ;
>15191	IdentifierDecl	n = 0
>15192	AssignmentExpr	n = 0
>15193	PrimaryExpression	0
>15194	Identifier	n
>15195	Identifier	n
>15196	IdentifierDeclType	int
>15207	FunctionDef	CMainFrame 
>15208	ParameterList	int nPane , const char * pText
>15209	Parameter	 
>15210	Identifier	pText
>15211	ParameterType	const char *
>15212	Parameter	 
>15213	Identifier	nPane
>15214	ParameterType	int
>15215	ReturnType	void
>15216	CompoundStatement	 
>15217	IfStatement	if ( pText && nPane <= 5 && nPane > 0 )
>15218	CompoundStatement	 
>15219	ExpressionStatement	 
>15220	CallExpression	UpdateStatusText ( )
>15221	ArgumentList	 
>15222	Callee	UpdateStatusText
>15223	Identifier	UpdateStatusText
>15224	ExpressionStatement	 
>15225	AssignmentExpr	m_strStatus [ nPane ] = pText
>15226	Identifier	pText
>15227	ArrayIndexing	m_strStatus [ nPane ]
>15228	Identifier	nPane
>15229	Identifier	m_strStatus
>15230	Condition	 
>15231	AndExpression	pText && nPane <= 5 && nPane > 0
>15232	AndExpression	nPane <= 5 && nPane > 0
>15233	RelationalExpression	nPane > 0
>15234	PrimaryExpression	0
>15235	Identifier	nPane
>15236	RelationalExpression	nPane <= 5
>15237	PrimaryExpression	5
>15238	Identifier	nPane
>15239	Identifier	pText
>15248	FunctionDef	CMainFrame 
>15249	ParameterList	int nBits
>15250	Parameter	 
>15251	Identifier	nBits
>15252	ParameterType	int
>15253	ReturnType	void
>15254	CompoundStatement	 
>15255	IfStatement	if ( nBits & W_TEXTURE )
>15256	CompoundStatement	 
>15257	IfStatement	if ( m_pTexWnd )
>15258	ExpressionStatement	 
>15259	CallExpression	m_pTexWnd -> RedrawWindow ( NULL , NULL , RDW_INVALIDATE | RDW_UPDATENOW )
>15260	ArgumentList	NULL
>15261	Argument	RDW_INVALIDATE | RDW_UPDATENOW
>15262	InclusiveOrExpression	RDW_INVALIDATE | RDW_UPDATENOW
>15263	Identifier	RDW_UPDATENOW
>15264	Identifier	RDW_INVALIDATE
>15265	Argument	NULL
>15266	Identifier	NULL
>15267	Argument	NULL
>15268	Identifier	NULL
>15269	Callee	m_pTexWnd -> RedrawWindow
>15270	PtrMemberAccess	m_pTexWnd -> RedrawWindow
>15271	Identifier	RedrawWindow
>15272	Identifier	m_pTexWnd
>15273	Condition	 
>15274	Identifier	m_pTexWnd
>15275	Condition	 
>15276	BitAndExpression	nBits & W_TEXTURE
>15277	Identifier	W_TEXTURE
>15278	Identifier	nBits
>15279	IfStatement	if ( nBits & ( W_Z | W_Z_OVERLAY ) )
>15280	CompoundStatement	 
>15281	IfStatement	if ( m_pZWnd )
>15282	ExpressionStatement	 
>15283	CallExpression	m_pZWnd -> RedrawWindow ( NULL , NULL , RDW_INVALIDATE | RDW_UPDATENOW )
>15284	ArgumentList	NULL
>15285	Argument	RDW_INVALIDATE | RDW_UPDATENOW
>15286	InclusiveOrExpression	RDW_INVALIDATE | RDW_UPDATENOW
>15287	Identifier	RDW_UPDATENOW
>15288	Identifier	RDW_INVALIDATE
>15289	Argument	NULL
>15290	Identifier	NULL
>15291	Argument	NULL
>15292	Identifier	NULL
>15293	Callee	m_pZWnd -> RedrawWindow
>15294	PtrMemberAccess	m_pZWnd -> RedrawWindow
>15295	Identifier	RedrawWindow
>15296	Identifier	m_pZWnd
>15297	Condition	 
>15298	Identifier	m_pZWnd
>15299	Condition	 
>15300	BitAndExpression	nBits & ( W_Z | W_Z_OVERLAY )
>15301	InclusiveOrExpression	W_Z | W_Z_OVERLAY
>15302	Identifier	W_Z_OVERLAY
>15303	Identifier	W_Z
>15304	Identifier	nBits
>15305	IfStatement	if ( nBits & W_CAMERA || ( ( nBits & W_CAMERA_IFON ) && m_bCamPreview ) )
>15306	CompoundStatement	 
>15307	IfStatement	if ( m_pCamWnd )
>15308	CompoundStatement	 
>15309	ExpressionStatement	 
>15310	CallExpression	m_pCamWnd -> RedrawWindow ( NULL , NULL , RDW_INVALIDATE | RDW_UPDATENOW )
>15311	ArgumentList	NULL
>15312	Argument	RDW_INVALIDATE | RDW_UPDATENOW
>15313	InclusiveOrExpression	RDW_INVALIDATE | RDW_UPDATENOW
>15314	Identifier	RDW_UPDATENOW
>15315	Identifier	RDW_INVALIDATE
>15316	Argument	NULL
>15317	Identifier	NULL
>15318	Argument	NULL
>15319	Identifier	NULL
>15320	Callee	m_pCamWnd -> RedrawWindow
>15321	PtrMemberAccess	m_pCamWnd -> RedrawWindow
>15322	Identifier	RedrawWindow
>15323	Identifier	m_pCamWnd
>15324	Condition	 
>15325	Identifier	m_pCamWnd
>15326	Condition	 
>15327	OrExpression	nBits & W_CAMERA || ( ( nBits & W_CAMERA_IFON ) && m_bCamPreview )
>15328	AndExpression	( nBits & W_CAMERA_IFON ) && m_bCamPreview
>15329	Identifier	m_bCamPreview
>15330	BitAndExpression	nBits & W_CAMERA_IFON
>15331	Identifier	W_CAMERA_IFON
>15332	Identifier	nBits
>15333	BitAndExpression	nBits & W_CAMERA
>15334	Identifier	W_CAMERA
>15335	Identifier	nBits
>15336	IfStatement	if ( nBits & ( W_XY | W_XY_OVERLAY ) )
>15337	CompoundStatement	 
>15338	IfStatement	if ( m_pYZWnd )
>15339	ExpressionStatement	 
>15340	CallExpression	m_pYZWnd -> RedrawWindow ( NULL , NULL , RDW_INVALIDATE | RDW_UPDATENOW )
>15341	ArgumentList	NULL
>15342	Argument	RDW_INVALIDATE | RDW_UPDATENOW
>15343	InclusiveOrExpression	RDW_INVALIDATE | RDW_UPDATENOW
>15344	Identifier	RDW_UPDATENOW
>15345	Identifier	RDW_INVALIDATE
>15346	Argument	NULL
>15347	Identifier	NULL
>15348	Argument	NULL
>15349	Identifier	NULL
>15350	Callee	m_pYZWnd -> RedrawWindow
>15351	PtrMemberAccess	m_pYZWnd -> RedrawWindow
>15352	Identifier	RedrawWindow
>15353	Identifier	m_pYZWnd
>15354	Condition	 
>15355	Identifier	m_pYZWnd
>15356	IfStatement	if ( m_pXZWnd )
>15357	ExpressionStatement	 
>15358	CallExpression	m_pXZWnd -> RedrawWindow ( NULL , NULL , RDW_INVALIDATE | RDW_UPDATENOW )
>15359	ArgumentList	NULL
>15360	Argument	RDW_INVALIDATE | RDW_UPDATENOW
>15361	InclusiveOrExpression	RDW_INVALIDATE | RDW_UPDATENOW
>15362	Identifier	RDW_UPDATENOW
>15363	Identifier	RDW_INVALIDATE
>15364	Argument	NULL
>15365	Identifier	NULL
>15366	Argument	NULL
>15367	Identifier	NULL
>15368	Callee	m_pXZWnd -> RedrawWindow
>15369	PtrMemberAccess	m_pXZWnd -> RedrawWindow
>15370	Identifier	RedrawWindow
>15371	Identifier	m_pXZWnd
>15372	Condition	 
>15373	Identifier	m_pXZWnd
>15374	IfStatement	if ( m_pXYWnd )
>15375	ExpressionStatement	 
>15376	CallExpression	m_pXYWnd -> RedrawWindow ( NULL , NULL , RDW_INVALIDATE | RDW_UPDATENOW )
>15377	ArgumentList	NULL
>15378	Argument	RDW_INVALIDATE | RDW_UPDATENOW
>15379	InclusiveOrExpression	RDW_INVALIDATE | RDW_UPDATENOW
>15380	Identifier	RDW_UPDATENOW
>15381	Identifier	RDW_INVALIDATE
>15382	Argument	NULL
>15383	Identifier	NULL
>15384	Argument	NULL
>15385	Identifier	NULL
>15386	Callee	m_pXYWnd -> RedrawWindow
>15387	PtrMemberAccess	m_pXYWnd -> RedrawWindow
>15388	Identifier	RedrawWindow
>15389	Identifier	m_pXYWnd
>15390	Condition	 
>15391	Identifier	m_pXYWnd
>15392	Condition	 
>15393	BitAndExpression	nBits & ( W_XY | W_XY_OVERLAY )
>15394	InclusiveOrExpression	W_XY | W_XY_OVERLAY
>15395	Identifier	W_XY_OVERLAY
>15396	Identifier	W_XY
>15397	Identifier	nBits
>15398	IfStatement	if ( ! g_bScreenUpdates )
>15399	ReturnStatement	 
>15400	Condition	 
>15401	UnaryOp	! g_bScreenUpdates
>15402	Identifier	g_bScreenUpdates
>15403	UnaryOperator	!
>15426	FunctionDef	Sys_UpdateWindows (int nBits)
>15427	ParameterList	int nBits
>15428	Parameter	 
>15429	Identifier	nBits
>15430	ParameterType	int
>15431	ReturnType	void WINAPI
>15432	CompoundStatement	 
>15433	IfStatement	if ( g_PrefsDlg . m_bQE4Painting )
>15434	ElseStatement	else
>15435	ExpressionStatement	 
>15436	CallExpression	g_pParentWnd -> UpdateWindows ( nBits )
>15437	ArgumentList	nBits
>15438	Argument	nBits
>15439	Identifier	nBits
>15440	Callee	g_pParentWnd -> UpdateWindows
>15441	PtrMemberAccess	g_pParentWnd -> UpdateWindows
>15442	Identifier	UpdateWindows
>15443	Identifier	g_pParentWnd
>15444	ExpressionStatement	 
>15445	AssignmentExpr	g_nUpdateBits |= nBits
>15446	Identifier	nBits
>15447	Identifier	g_nUpdateBits
>15448	Condition	 
>15449	MemberAccess	g_PrefsDlg . m_bQE4Painting
>15450	Identifier	m_bQE4Painting
>15451	Identifier	g_PrefsDlg
>15460	FunctionDef	CMainFrame 
>15461	ParameterList	 
>15462	ReturnType	void
>15463	CompoundStatement	 
>15464	IfStatement	if ( m_pActiveXY )
>15465	ExpressionStatement	 
>15466	CallExpression	m_pActiveXY -> FlipClip ( )
>15467	ArgumentList	 
>15468	Callee	m_pActiveXY -> FlipClip
>15469	PtrMemberAccess	m_pActiveXY -> FlipClip
>15470	Identifier	FlipClip
>15471	Identifier	m_pActiveXY
>15472	Condition	 
>15473	Identifier	m_pActiveXY
>15478	FunctionDef	CMainFrame 
>15479	ParameterList	 
>15480	ReturnType	void
>15481	CompoundStatement	 
>15482	IfStatement	if ( m_pActiveXY && m_pActiveXY -> ClipMode ( ) )
>15483	ElseStatement	else
>15484	CompoundStatement	 
>15485	IfStatement	if ( g_bPatchBendMode )
>15486	ElseStatement	else
>15487	IfStatement	if ( g_bPatchBendMode )
>15488	ExpressionStatement	 
>15489	CallExpression	Patch_InsDelHandleENTER ( )
>15490	ArgumentList	 
>15491	Callee	Patch_InsDelHandleENTER
>15492	Identifier	Patch_InsDelHandleENTER
>15493	Condition	 
>15494	Identifier	g_bPatchBendMode
>15495	ExpressionStatement	 
>15496	CallExpression	Patch_BendHandleENTER ( )
>15497	ArgumentList	 
>15498	Callee	Patch_BendHandleENTER
>15499	Identifier	Patch_BendHandleENTER
>15500	Condition	 
>15501	Identifier	g_bPatchBendMode
>15502	CompoundStatement	 
>15503	ExpressionStatement	 
>15504	CallExpression	Undo_End ( )
>15505	ArgumentList	 
>15506	Callee	Undo_End
>15507	Identifier	Undo_End
>15508	ExpressionStatement	 
>15509	CallExpression	Undo_EndBrushList ( & selected_brushes )
>15510	ArgumentList	& selected_brushes
>15511	Argument	& selected_brushes
>15512	UnaryOp	& selected_brushes
>15513	Identifier	selected_brushes
>15514	UnaryOperator	&
>15515	Callee	Undo_EndBrushList
>15516	Identifier	Undo_EndBrushList
>15517	ExpressionStatement	 
>15518	CallExpression	m_pActiveXY -> Clip ( )
>15519	ArgumentList	 
>15520	Callee	m_pActiveXY -> Clip
>15521	PtrMemberAccess	m_pActiveXY -> Clip
>15522	Identifier	Clip
>15523	Identifier	m_pActiveXY
>15524	ExpressionStatement	 
>15525	CallExpression	Undo_AddBrushList ( & selected_brushes )
>15526	ArgumentList	& selected_brushes
>15527	Argument	& selected_brushes
>15528	UnaryOp	& selected_brushes
>15529	Identifier	selected_brushes
>15530	UnaryOperator	&
>15531	Callee	Undo_AddBrushList
>15532	Identifier	Undo_AddBrushList
>15533	ExpressionStatement	 
>15534	CallExpression	Undo_Start ( \"clip selected\" )
>15535	ArgumentList	\"clip selected\"
>15536	Argument	\"clip selected\"
>15537	PrimaryExpression	\"clip selected\"
>15538	Callee	Undo_Start
>15539	Identifier	Undo_Start
>15540	Condition	 
>15541	AndExpression	m_pActiveXY && m_pActiveXY -> ClipMode ( )
>15542	CallExpression	m_pActiveXY -> ClipMode ( )
>15543	ArgumentList	 
>15544	Callee	m_pActiveXY -> ClipMode
>15545	PtrMemberAccess	m_pActiveXY -> ClipMode
>15546	Identifier	ClipMode
>15547	Identifier	m_pActiveXY
>15548	Identifier	m_pActiveXY
>15557	FunctionDef	CMainFrame 
>15558	ParameterList	 
>15559	ReturnType	void
>15560	CompoundStatement	 
>15561	IfStatement	if ( m_pActiveXY )
>15562	CompoundStatement	 
>15563	ExpressionStatement	 
>15564	CallExpression	Undo_End ( )
>15565	ArgumentList	 
>15566	Callee	Undo_End
>15567	Identifier	Undo_End
>15568	ExpressionStatement	 
>15569	CallExpression	Undo_EndBrushList ( & selected_brushes )
>15570	ArgumentList	& selected_brushes
>15571	Argument	& selected_brushes
>15572	UnaryOp	& selected_brushes
>15573	Identifier	selected_brushes
>15574	UnaryOperator	&
>15575	Callee	Undo_EndBrushList
>15576	Identifier	Undo_EndBrushList
>15577	ExpressionStatement	 
>15578	CallExpression	m_pActiveXY -> SplitClip ( )
>15579	ArgumentList	 
>15580	Callee	m_pActiveXY -> SplitClip
>15581	PtrMemberAccess	m_pActiveXY -> SplitClip
>15582	Identifier	SplitClip
>15583	Identifier	m_pActiveXY
>15584	ExpressionStatement	 
>15585	CallExpression	Undo_AddBrushList ( & selected_brushes )
>15586	ArgumentList	& selected_brushes
>15587	Argument	& selected_brushes
>15588	UnaryOp	& selected_brushes
>15589	Identifier	selected_brushes
>15590	UnaryOperator	&
>15591	Callee	Undo_AddBrushList
>15592	Identifier	Undo_AddBrushList
>15593	ExpressionStatement	 
>15594	CallExpression	Undo_Start ( \"split selected\" )
>15595	ArgumentList	\"split selected\"
>15596	Argument	\"split selected\"
>15597	PrimaryExpression	\"split selected\"
>15598	Callee	Undo_Start
>15599	Identifier	Undo_Start
>15600	Condition	 
>15601	Identifier	m_pActiveXY
>15607	FunctionDef	CMainFrame 
>15608	ParameterList	 
>15609	ReturnType	CXYWnd *
>15610	CompoundStatement	 
>15611	ReturnStatement	 
>15612	Identifier	m_pActiveXY
>15617	FunctionDef	CMainFrame 
>15618	ParameterList	 
>15619	ReturnType	void
>15620	CompoundStatement	 
>15621	IfStatement	if ( m_nCurrentStyle == 1 )
>15622	CompoundStatement	 
>15623	IfStatement	if ( m_pXZWnd && m_pXZWnd -> GetSafeHwnd ( ) )
>15624	CompoundStatement	 
>15625	ExpressionStatement	 
>15626	CallExpression	g_PrefsDlg . SavePrefs ( )
>15627	ArgumentList	 
>15628	Callee	g_PrefsDlg . SavePrefs
>15629	MemberAccess	g_PrefsDlg . SavePrefs
>15630	Identifier	SavePrefs
>15631	Identifier	g_PrefsDlg
>15632	ExpressionStatement	 
>15633	AssignmentExpr	g_PrefsDlg . m_bXZVis ^= 1
>15634	PrimaryExpression	1
>15635	MemberAccess	g_PrefsDlg . m_bXZVis
>15636	Identifier	m_bXZVis
>15637	Identifier	g_PrefsDlg
>15638	IfStatement	if ( g_PrefsDlg . m_bXZVis )
>15639	ElseStatement	else
>15640	ExpressionStatement	 
>15641	CallExpression	m_pXZWnd -> ShowWindow ( SW_SHOW )
>15642	ArgumentList	SW_SHOW
>15643	Argument	SW_SHOW
>15644	Identifier	SW_SHOW
>15645	Callee	m_pXZWnd -> ShowWindow
>15646	PtrMemberAccess	m_pXZWnd -> ShowWindow
>15647	Identifier	ShowWindow
>15648	Identifier	m_pXZWnd
>15649	ExpressionStatement	 
>15650	CallExpression	m_pXZWnd -> ShowWindow ( SW_HIDE )
>15651	ArgumentList	SW_HIDE
>15652	Argument	SW_HIDE
>15653	Identifier	SW_HIDE
>15654	Callee	m_pXZWnd -> ShowWindow
>15655	PtrMemberAccess	m_pXZWnd -> ShowWindow
>15656	Identifier	ShowWindow
>15657	Identifier	m_pXZWnd
>15658	Condition	 
>15659	MemberAccess	g_PrefsDlg . m_bXZVis
>15660	Identifier	m_bXZVis
>15661	Identifier	g_PrefsDlg
>15662	ExpressionStatement	 
>15663	AssignmentExpr	g_PrefsDlg . m_bXZVis = m_pXZWnd -> IsWindowVisible ( )
>15664	CallExpression	m_pXZWnd -> IsWindowVisible ( )
>15665	ArgumentList	 
>15666	Callee	m_pXZWnd -> IsWindowVisible
>15667	PtrMemberAccess	m_pXZWnd -> IsWindowVisible
>15668	Identifier	IsWindowVisible
>15669	Identifier	m_pXZWnd
>15670	MemberAccess	g_PrefsDlg . m_bXZVis
>15671	Identifier	m_bXZVis
>15672	Identifier	g_PrefsDlg
>15673	Condition	 
>15674	AndExpression	m_pXZWnd && m_pXZWnd -> GetSafeHwnd ( )
>15675	CallExpression	m_pXZWnd -> GetSafeHwnd ( )
>15676	ArgumentList	 
>15677	Callee	m_pXZWnd -> GetSafeHwnd
>15678	PtrMemberAccess	m_pXZWnd -> GetSafeHwnd
>15679	Identifier	GetSafeHwnd
>15680	Identifier	m_pXZWnd
>15681	Identifier	m_pXZWnd
>15682	Condition	 
>15683	EqualityExpression	m_nCurrentStyle == 1
>15684	PrimaryExpression	1
>15685	Identifier	m_nCurrentStyle
>15698	FunctionDef	CMainFrame 
>15699	ParameterList	 
>15700	ReturnType	void
>15701	CompoundStatement	 
>15702	IfStatement	if ( m_nCurrentStyle == 1 )
>15703	CompoundStatement	 
>15704	IfStatement	if ( m_pYZWnd && m_pYZWnd -> GetSafeHwnd ( ) )
>15705	CompoundStatement	 
>15706	ExpressionStatement	 
>15707	CallExpression	g_PrefsDlg . SavePrefs ( )
>15708	ArgumentList	 
>15709	Callee	g_PrefsDlg . SavePrefs
>15710	MemberAccess	g_PrefsDlg . SavePrefs
>15711	Identifier	SavePrefs
>15712	Identifier	g_PrefsDlg
>15713	ExpressionStatement	 
>15714	AssignmentExpr	g_PrefsDlg . m_bYZVis ^= 1
>15715	PrimaryExpression	1
>15716	MemberAccess	g_PrefsDlg . m_bYZVis
>15717	Identifier	m_bYZVis
>15718	Identifier	g_PrefsDlg
>15719	IfStatement	if ( g_PrefsDlg . m_bYZVis )
>15720	ElseStatement	else
>15721	ExpressionStatement	 
>15722	CallExpression	m_pYZWnd -> ShowWindow ( SW_SHOW )
>15723	ArgumentList	SW_SHOW
>15724	Argument	SW_SHOW
>15725	Identifier	SW_SHOW
>15726	Callee	m_pYZWnd -> ShowWindow
>15727	PtrMemberAccess	m_pYZWnd -> ShowWindow
>15728	Identifier	ShowWindow
>15729	Identifier	m_pYZWnd
>15730	ExpressionStatement	 
>15731	CallExpression	m_pYZWnd -> ShowWindow ( SW_HIDE )
>15732	ArgumentList	SW_HIDE
>15733	Argument	SW_HIDE
>15734	Identifier	SW_HIDE
>15735	Callee	m_pYZWnd -> ShowWindow
>15736	PtrMemberAccess	m_pYZWnd -> ShowWindow
>15737	Identifier	ShowWindow
>15738	Identifier	m_pYZWnd
>15739	Condition	 
>15740	MemberAccess	g_PrefsDlg . m_bYZVis
>15741	Identifier	m_bYZVis
>15742	Identifier	g_PrefsDlg
>15743	ExpressionStatement	 
>15744	AssignmentExpr	g_PrefsDlg . m_bYZVis = m_pYZWnd -> IsWindowVisible ( )
>15745	CallExpression	m_pYZWnd -> IsWindowVisible ( )
>15746	ArgumentList	 
>15747	Callee	m_pYZWnd -> IsWindowVisible
>15748	PtrMemberAccess	m_pYZWnd -> IsWindowVisible
>15749	Identifier	IsWindowVisible
>15750	Identifier	m_pYZWnd
>15751	MemberAccess	g_PrefsDlg . m_bYZVis
>15752	Identifier	m_bYZVis
>15753	Identifier	g_PrefsDlg
>15754	Condition	 
>15755	AndExpression	m_pYZWnd && m_pYZWnd -> GetSafeHwnd ( )
>15756	CallExpression	m_pYZWnd -> GetSafeHwnd ( )
>15757	ArgumentList	 
>15758	Callee	m_pYZWnd -> GetSafeHwnd
>15759	PtrMemberAccess	m_pYZWnd -> GetSafeHwnd
>15760	Identifier	GetSafeHwnd
>15761	Identifier	m_pYZWnd
>15762	Identifier	m_pYZWnd
>15763	Condition	 
>15764	EqualityExpression	m_nCurrentStyle == 1
>15765	PrimaryExpression	1
>15766	Identifier	m_nCurrentStyle
>15779	FunctionDef	CMainFrame 
>15780	ParameterList	 
>15781	ReturnType	void
>15782	CompoundStatement	 
>15783	ExpressionStatement	 
>15784	CallExpression	Sys_UpdateWindows ( W_ALL )
>15785	ArgumentList	W_ALL
>15786	Argument	W_ALL
>15787	Identifier	W_ALL
>15788	Callee	Sys_UpdateWindows
>15789	Identifier	Sys_UpdateWindows
>15790	ExpressionStatement	 
>15791	CallExpression	DoColor ( COLOR_BRUSHES )
>15792	ArgumentList	COLOR_BRUSHES
>15793	Argument	COLOR_BRUSHES
>15794	Identifier	COLOR_BRUSHES
>15795	Callee	DoColor
>15796	Identifier	DoColor
>15802	FunctionDef	CMainFrame 
>15803	ParameterList	 
>15804	ReturnType	void
>15805	CompoundStatement	 
>15806	ExpressionStatement	 
>15807	CallExpression	Sys_UpdateWindows ( W_ALL )
>15808	ArgumentList	W_ALL
>15809	Argument	W_ALL
>15810	Identifier	W_ALL
>15811	Callee	Sys_UpdateWindows
>15812	Identifier	Sys_UpdateWindows
>15813	ExpressionStatement	 
>15814	CallExpression	DoColor ( COLOR_CLIPPER )
>15815	ArgumentList	COLOR_CLIPPER
>15816	Argument	COLOR_CLIPPER
>15817	Identifier	COLOR_CLIPPER
>15818	Callee	DoColor
>15819	Identifier	DoColor
>15825	FunctionDef	CMainFrame 
>15826	ParameterList	 
>15827	ReturnType	void
>15828	CompoundStatement	 
>15829	ExpressionStatement	 
>15830	CallExpression	Sys_UpdateWindows ( W_ALL )
>15831	ArgumentList	W_ALL
>15832	Argument	W_ALL
>15833	Identifier	W_ALL
>15834	Callee	Sys_UpdateWindows
>15835	Identifier	Sys_UpdateWindows
>15836	ExpressionStatement	 
>15837	CallExpression	DoColor ( COLOR_GRIDTEXT )
>15838	ArgumentList	COLOR_GRIDTEXT
>15839	Argument	COLOR_GRIDTEXT
>15840	Identifier	COLOR_GRIDTEXT
>15841	Callee	DoColor
>15842	Identifier	DoColor
>15848	FunctionDef	CMainFrame 
>15849	ParameterList	 
>15850	ReturnType	void
>15851	CompoundStatement	 
>15852	ExpressionStatement	 
>15853	CallExpression	Sys_UpdateWindows ( W_ALL )
>15854	ArgumentList	W_ALL
>15855	Argument	W_ALL
>15856	Identifier	W_ALL
>15857	Callee	Sys_UpdateWindows
>15858	Identifier	Sys_UpdateWindows
>15859	ExpressionStatement	 
>15860	CallExpression	DoColor ( COLOR_SELBRUSHES )
>15861	ArgumentList	COLOR_SELBRUSHES
>15862	Argument	COLOR_SELBRUSHES
>15863	Identifier	COLOR_SELBRUSHES
>15864	Callee	DoColor
>15865	Identifier	DoColor
>15871	FunctionDef	CMainFrame 
>15872	ParameterList	 
>15873	ReturnType	void
>15874	CompoundStatement	 
>15875	ExpressionStatement	 
>15876	CallExpression	Sys_UpdateWindows ( W_ALL )
>15877	ArgumentList	W_ALL
>15878	Argument	W_ALL
>15879	Identifier	W_ALL
>15880	Callee	Sys_UpdateWindows
>15881	Identifier	Sys_UpdateWindows
>15882	ExpressionStatement	 
>15883	CallExpression	DoColor ( COLOR_GRIDBLOCK )
>15884	ArgumentList	COLOR_GRIDBLOCK
>15885	Argument	COLOR_GRIDBLOCK
>15886	Identifier	COLOR_GRIDBLOCK
>15887	Callee	DoColor
>15888	Identifier	DoColor
>15894	FunctionDef	CMainFrame 
>15895	ParameterList	 
>15896	ReturnType	void
>15897	CompoundStatement	 
>15898	ExpressionStatement	 
>15899	CallExpression	Sys_UpdateWindows ( W_ALL )
>15900	ArgumentList	W_ALL
>15901	Argument	W_ALL
>15902	Identifier	W_ALL
>15903	Callee	Sys_UpdateWindows
>15904	Identifier	Sys_UpdateWindows
>15905	ExpressionStatement	 
>15906	CallExpression	DoColor ( COLOR_VIEWNAME )
>15907	ArgumentList	COLOR_VIEWNAME
>15908	Argument	COLOR_VIEWNAME
>15909	Identifier	COLOR_VIEWNAME
>15910	Callee	DoColor
>15911	Identifier	DoColor
>15917	FunctionDef	CMainFrame 
>15918	ParameterList	 
>15919	ReturnType	void
>15920	CompoundStatement	 
>15921	ExpressionStatement	 
>15922	CallExpression	Sys_UpdateWindows ( W_ALL )
>15923	ArgumentList	W_ALL
>15924	Argument	W_ALL
>15925	Identifier	W_ALL
>15926	Callee	Sys_UpdateWindows
>15927	Identifier	Sys_UpdateWindows
>15928	ExpressionStatement	 
>15929	AssignmentExpr	g_qeglobals . d_savedinfo . colors [ COLOR_VIEWNAME ] [ 2 ] = 0.75
>15930	PrimaryExpression	0.75
>15931	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_VIEWNAME ] [ 2 ]
>15932	PrimaryExpression	2
>15933	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_VIEWNAME ]
>15934	Identifier	COLOR_VIEWNAME
>15935	MemberAccess	g_qeglobals . d_savedinfo . colors
>15936	Identifier	colors
>15937	MemberAccess	g_qeglobals . d_savedinfo
>15938	Identifier	d_savedinfo
>15939	Identifier	g_qeglobals
>15940	ExpressionStatement	 
>15941	AssignmentExpr	g_qeglobals . d_savedinfo . colors [ COLOR_VIEWNAME ] [ 1 ] = 0.0
>15942	PrimaryExpression	0.0
>15943	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_VIEWNAME ] [ 1 ]
>15944	PrimaryExpression	1
>15945	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_VIEWNAME ]
>15946	Identifier	COLOR_VIEWNAME
>15947	MemberAccess	g_qeglobals . d_savedinfo . colors
>15948	Identifier	colors
>15949	MemberAccess	g_qeglobals . d_savedinfo
>15950	Identifier	d_savedinfo
>15951	Identifier	g_qeglobals
>15952	ExpressionStatement	 
>15953	AssignmentExpr	g_qeglobals . d_savedinfo . colors [ COLOR_VIEWNAME ] [ 0 ] = 0.5
>15954	PrimaryExpression	0.5
>15955	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_VIEWNAME ] [ 0 ]
>15956	PrimaryExpression	0
>15957	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_VIEWNAME ]
>15958	Identifier	COLOR_VIEWNAME
>15959	MemberAccess	g_qeglobals . d_savedinfo . colors
>15960	Identifier	colors
>15961	MemberAccess	g_qeglobals . d_savedinfo
>15962	Identifier	d_savedinfo
>15963	Identifier	g_qeglobals
>15964	ExpressionStatement	 
>15965	AssignmentExpr	g_qeglobals . d_savedinfo . colors [ COLOR_BRUSHES ] [ 2 ] = 0.0
>15966	PrimaryExpression	0.0
>15967	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_BRUSHES ] [ 2 ]
>15968	PrimaryExpression	2
>15969	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_BRUSHES ]
>15970	Identifier	COLOR_BRUSHES
>15971	MemberAccess	g_qeglobals . d_savedinfo . colors
>15972	Identifier	colors
>15973	MemberAccess	g_qeglobals . d_savedinfo
>15974	Identifier	d_savedinfo
>15975	Identifier	g_qeglobals
>15976	ExpressionStatement	 
>15977	AssignmentExpr	g_qeglobals . d_savedinfo . colors [ COLOR_BRUSHES ] [ 1 ] = 0.0
>15978	PrimaryExpression	0.0
>15979	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_BRUSHES ] [ 1 ]
>15980	PrimaryExpression	1
>15981	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_BRUSHES ]
>15982	Identifier	COLOR_BRUSHES
>15983	MemberAccess	g_qeglobals . d_savedinfo . colors
>15984	Identifier	colors
>15985	MemberAccess	g_qeglobals . d_savedinfo
>15986	Identifier	d_savedinfo
>15987	Identifier	g_qeglobals
>15988	ExpressionStatement	 
>15989	AssignmentExpr	g_qeglobals . d_savedinfo . colors [ COLOR_BRUSHES ] [ 0 ] = 0.0
>15990	PrimaryExpression	0.0
>15991	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_BRUSHES ] [ 0 ]
>15992	PrimaryExpression	0
>15993	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_BRUSHES ]
>15994	Identifier	COLOR_BRUSHES
>15995	MemberAccess	g_qeglobals . d_savedinfo . colors
>15996	Identifier	colors
>15997	MemberAccess	g_qeglobals . d_savedinfo
>15998	Identifier	d_savedinfo
>15999	Identifier	g_qeglobals
>16000	ExpressionStatement	 
>16001	AssignmentExpr	g_qeglobals . d_savedinfo . colors [ COLOR_CLIPPER ] [ 2 ] = 1.0
>16002	PrimaryExpression	1.0
>16003	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_CLIPPER ] [ 2 ]
>16004	PrimaryExpression	2
>16005	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_CLIPPER ]
>16006	Identifier	COLOR_CLIPPER
>16007	MemberAccess	g_qeglobals . d_savedinfo . colors
>16008	Identifier	colors
>16009	MemberAccess	g_qeglobals . d_savedinfo
>16010	Identifier	d_savedinfo
>16011	Identifier	g_qeglobals
>16012	ExpressionStatement	 
>16013	AssignmentExpr	g_qeglobals . d_savedinfo . colors [ COLOR_CLIPPER ] [ 1 ] = 0.0
>16014	PrimaryExpression	0.0
>16015	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_CLIPPER ] [ 1 ]
>16016	PrimaryExpression	1
>16017	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_CLIPPER ]
>16018	Identifier	COLOR_CLIPPER
>16019	MemberAccess	g_qeglobals . d_savedinfo . colors
>16020	Identifier	colors
>16021	MemberAccess	g_qeglobals . d_savedinfo
>16022	Identifier	d_savedinfo
>16023	Identifier	g_qeglobals
>16024	ExpressionStatement	 
>16025	AssignmentExpr	g_qeglobals . d_savedinfo . colors [ COLOR_CLIPPER ] [ 0 ] = 0.0
>16026	PrimaryExpression	0.0
>16027	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_CLIPPER ] [ 0 ]
>16028	PrimaryExpression	0
>16029	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_CLIPPER ]
>16030	Identifier	COLOR_CLIPPER
>16031	MemberAccess	g_qeglobals . d_savedinfo . colors
>16032	Identifier	colors
>16033	MemberAccess	g_qeglobals . d_savedinfo
>16034	Identifier	d_savedinfo
>16035	Identifier	g_qeglobals
>16036	ExpressionStatement	 
>16037	AssignmentExpr	g_qeglobals . d_savedinfo . colors [ COLOR_SELBRUSHES ] [ 2 ] = 0.0
>16038	PrimaryExpression	0.0
>16039	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_SELBRUSHES ] [ 2 ]
>16040	PrimaryExpression	2
>16041	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_SELBRUSHES ]
>16042	Identifier	COLOR_SELBRUSHES
>16043	MemberAccess	g_qeglobals . d_savedinfo . colors
>16044	Identifier	colors
>16045	MemberAccess	g_qeglobals . d_savedinfo
>16046	Identifier	d_savedinfo
>16047	Identifier	g_qeglobals
>16048	ExpressionStatement	 
>16049	AssignmentExpr	g_qeglobals . d_savedinfo . colors [ COLOR_SELBRUSHES ] [ 1 ] = 0.0
>16050	PrimaryExpression	0.0
>16051	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_SELBRUSHES ] [ 1 ]
>16052	PrimaryExpression	1
>16053	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_SELBRUSHES ]
>16054	Identifier	COLOR_SELBRUSHES
>16055	MemberAccess	g_qeglobals . d_savedinfo . colors
>16056	Identifier	colors
>16057	MemberAccess	g_qeglobals . d_savedinfo
>16058	Identifier	d_savedinfo
>16059	Identifier	g_qeglobals
>16060	ExpressionStatement	 
>16061	AssignmentExpr	g_qeglobals . d_savedinfo . colors [ COLOR_SELBRUSHES ] [ 0 ] = 1.0
>16062	PrimaryExpression	1.0
>16063	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_SELBRUSHES ] [ 0 ]
>16064	PrimaryExpression	0
>16065	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_SELBRUSHES ]
>16066	Identifier	COLOR_SELBRUSHES
>16067	MemberAccess	g_qeglobals . d_savedinfo . colors
>16068	Identifier	colors
>16069	MemberAccess	g_qeglobals . d_savedinfo
>16070	Identifier	d_savedinfo
>16071	Identifier	g_qeglobals
>16072	ExpressionStatement	 
>16073	AssignmentExpr	g_qeglobals . d_savedinfo . colors [ COLOR_GRIDTEXT ] [ 2 ] = 0.0
>16074	PrimaryExpression	0.0
>16075	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_GRIDTEXT ] [ 2 ]
>16076	PrimaryExpression	2
>16077	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_GRIDTEXT ]
>16078	Identifier	COLOR_GRIDTEXT
>16079	MemberAccess	g_qeglobals . d_savedinfo . colors
>16080	Identifier	colors
>16081	MemberAccess	g_qeglobals . d_savedinfo
>16082	Identifier	d_savedinfo
>16083	Identifier	g_qeglobals
>16084	ExpressionStatement	 
>16085	AssignmentExpr	g_qeglobals . d_savedinfo . colors [ COLOR_GRIDTEXT ] [ 1 ] = 0.0
>16086	PrimaryExpression	0.0
>16087	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_GRIDTEXT ] [ 1 ]
>16088	PrimaryExpression	1
>16089	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_GRIDTEXT ]
>16090	Identifier	COLOR_GRIDTEXT
>16091	MemberAccess	g_qeglobals . d_savedinfo . colors
>16092	Identifier	colors
>16093	MemberAccess	g_qeglobals . d_savedinfo
>16094	Identifier	d_savedinfo
>16095	Identifier	g_qeglobals
>16096	ExpressionStatement	 
>16097	AssignmentExpr	g_qeglobals . d_savedinfo . colors [ COLOR_GRIDTEXT ] [ 0 ] = 0.0
>16098	PrimaryExpression	0.0
>16099	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_GRIDTEXT ] [ 0 ]
>16100	PrimaryExpression	0
>16101	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_GRIDTEXT ]
>16102	Identifier	COLOR_GRIDTEXT
>16103	MemberAccess	g_qeglobals . d_savedinfo . colors
>16104	Identifier	colors
>16105	MemberAccess	g_qeglobals . d_savedinfo
>16106	Identifier	d_savedinfo
>16107	Identifier	g_qeglobals
>16108	ExpressionStatement	 
>16109	AssignmentExpr	g_qeglobals . d_savedinfo . colors [ COLOR_GRIDBLOCK ] [ 2 ] = 1.0
>16110	PrimaryExpression	1.0
>16111	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_GRIDBLOCK ] [ 2 ]
>16112	PrimaryExpression	2
>16113	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_GRIDBLOCK ]
>16114	Identifier	COLOR_GRIDBLOCK
>16115	MemberAccess	g_qeglobals . d_savedinfo . colors
>16116	Identifier	colors
>16117	MemberAccess	g_qeglobals . d_savedinfo
>16118	Identifier	d_savedinfo
>16119	Identifier	g_qeglobals
>16120	ExpressionStatement	 
>16121	AssignmentExpr	g_qeglobals . d_savedinfo . colors [ COLOR_GRIDBLOCK ] [ 1 ] = 0.0
>16122	PrimaryExpression	0.0
>16123	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_GRIDBLOCK ] [ 1 ]
>16124	PrimaryExpression	1
>16125	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_GRIDBLOCK ]
>16126	Identifier	COLOR_GRIDBLOCK
>16127	MemberAccess	g_qeglobals . d_savedinfo . colors
>16128	Identifier	colors
>16129	MemberAccess	g_qeglobals . d_savedinfo
>16130	Identifier	d_savedinfo
>16131	Identifier	g_qeglobals
>16132	ExpressionStatement	 
>16133	AssignmentExpr	g_qeglobals . d_savedinfo . colors [ COLOR_GRIDBLOCK ] [ 0 ] = 0.0
>16134	PrimaryExpression	0.0
>16135	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_GRIDBLOCK ] [ 0 ]
>16136	PrimaryExpression	0
>16137	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_GRIDBLOCK ]
>16138	Identifier	COLOR_GRIDBLOCK
>16139	MemberAccess	g_qeglobals . d_savedinfo . colors
>16140	Identifier	colors
>16141	MemberAccess	g_qeglobals . d_savedinfo
>16142	Identifier	d_savedinfo
>16143	Identifier	g_qeglobals
>16144	ForStatement	for ( int i = 0 ; i < 3 ; i ++ )
>16145	CompoundStatement	 
>16146	ExpressionStatement	 
>16147	AssignmentExpr	g_qeglobals . d_savedinfo . colors [ COLOR_CAMERABACK ] [ i ] = 0.25
>16148	PrimaryExpression	0.25
>16149	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_CAMERABACK ] [ i ]
>16150	Identifier	i
>16151	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_CAMERABACK ]
>16152	Identifier	COLOR_CAMERABACK
>16153	MemberAccess	g_qeglobals . d_savedinfo . colors
>16154	Identifier	colors
>16155	MemberAccess	g_qeglobals . d_savedinfo
>16156	Identifier	d_savedinfo
>16157	Identifier	g_qeglobals
>16158	ExpressionStatement	 
>16159	AssignmentExpr	g_qeglobals . d_savedinfo . colors [ COLOR_GRIDMAJOR ] [ i ] = 0.5
>16160	PrimaryExpression	0.5
>16161	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_GRIDMAJOR ] [ i ]
>16162	Identifier	i
>16163	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_GRIDMAJOR ]
>16164	Identifier	COLOR_GRIDMAJOR
>16165	MemberAccess	g_qeglobals . d_savedinfo . colors
>16166	Identifier	colors
>16167	MemberAccess	g_qeglobals . d_savedinfo
>16168	Identifier	d_savedinfo
>16169	Identifier	g_qeglobals
>16170	ExpressionStatement	 
>16171	AssignmentExpr	g_qeglobals . d_savedinfo . colors [ COLOR_GRIDMINOR ] [ i ] = 0.75
>16172	PrimaryExpression	0.75
>16173	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_GRIDMINOR ] [ i ]
>16174	Identifier	i
>16175	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_GRIDMINOR ]
>16176	Identifier	COLOR_GRIDMINOR
>16177	MemberAccess	g_qeglobals . d_savedinfo . colors
>16178	Identifier	colors
>16179	MemberAccess	g_qeglobals . d_savedinfo
>16180	Identifier	d_savedinfo
>16181	Identifier	g_qeglobals
>16182	ExpressionStatement	 
>16183	AssignmentExpr	g_qeglobals . d_savedinfo . colors [ COLOR_GRIDBACK ] [ i ] = 1.0
>16184	PrimaryExpression	1.0
>16185	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_GRIDBACK ] [ i ]
>16186	Identifier	i
>16187	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_GRIDBACK ]
>16188	Identifier	COLOR_GRIDBACK
>16189	MemberAccess	g_qeglobals . d_savedinfo . colors
>16190	Identifier	colors
>16191	MemberAccess	g_qeglobals . d_savedinfo
>16192	Identifier	d_savedinfo
>16193	Identifier	g_qeglobals
>16194	ExpressionStatement	 
>16195	AssignmentExpr	g_qeglobals . d_savedinfo . colors [ COLOR_TEXTUREBACK ] [ i ] = 0.25
>16196	PrimaryExpression	0.25
>16197	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_TEXTUREBACK ] [ i ]
>16198	Identifier	i
>16199	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_TEXTUREBACK ]
>16200	Identifier	COLOR_TEXTUREBACK
>16201	MemberAccess	g_qeglobals . d_savedinfo . colors
>16202	Identifier	colors
>16203	MemberAccess	g_qeglobals . d_savedinfo
>16204	Identifier	d_savedinfo
>16205	Identifier	g_qeglobals
>16206	IncDecOp	 
>16207	IncDec	++
>16208	Identifier	i
>16209	Condition	 
>16210	RelationalExpression	i < 3
>16211	PrimaryExpression	3
>16212	Identifier	i
>16213	ForInit	 
>16214	IdentifierDeclStatement	int i = 0 ;
>16215	IdentifierDecl	i = 0
>16216	AssignmentExpr	i = 0
>16217	PrimaryExpression	0
>16218	Identifier	i
>16219	Identifier	i
>16220	IdentifierDeclType	int
>16269	FunctionDef	CMainFrame 
>16270	ParameterList	 
>16271	ReturnType	void
>16272	CompoundStatement	 
>16273	ExpressionStatement	 
>16274	CallExpression	Sys_UpdateWindows ( W_ALL )
>16275	ArgumentList	W_ALL
>16276	Argument	W_ALL
>16277	Identifier	W_ALL
>16278	Callee	Sys_UpdateWindows
>16279	Identifier	Sys_UpdateWindows
>16280	ExpressionStatement	 
>16281	AssignmentExpr	g_qeglobals . d_savedinfo . colors [ COLOR_VIEWNAME ] [ 2 ] = 0.75
>16282	PrimaryExpression	0.75
>16283	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_VIEWNAME ] [ 2 ]
>16284	PrimaryExpression	2
>16285	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_VIEWNAME ]
>16286	Identifier	COLOR_VIEWNAME
>16287	MemberAccess	g_qeglobals . d_savedinfo . colors
>16288	Identifier	colors
>16289	MemberAccess	g_qeglobals . d_savedinfo
>16290	Identifier	d_savedinfo
>16291	Identifier	g_qeglobals
>16292	ExpressionStatement	 
>16293	AssignmentExpr	g_qeglobals . d_savedinfo . colors [ COLOR_VIEWNAME ] [ 1 ] = 0.0
>16294	PrimaryExpression	0.0
>16295	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_VIEWNAME ] [ 1 ]
>16296	PrimaryExpression	1
>16297	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_VIEWNAME ]
>16298	Identifier	COLOR_VIEWNAME
>16299	MemberAccess	g_qeglobals . d_savedinfo . colors
>16300	Identifier	colors
>16301	MemberAccess	g_qeglobals . d_savedinfo
>16302	Identifier	d_savedinfo
>16303	Identifier	g_qeglobals
>16304	ExpressionStatement	 
>16305	AssignmentExpr	g_qeglobals . d_savedinfo . colors [ COLOR_VIEWNAME ] [ 0 ] = 0.5
>16306	PrimaryExpression	0.5
>16307	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_VIEWNAME ] [ 0 ]
>16308	PrimaryExpression	0
>16309	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_VIEWNAME ]
>16310	Identifier	COLOR_VIEWNAME
>16311	MemberAccess	g_qeglobals . d_savedinfo . colors
>16312	Identifier	colors
>16313	MemberAccess	g_qeglobals . d_savedinfo
>16314	Identifier	d_savedinfo
>16315	Identifier	g_qeglobals
>16316	ExpressionStatement	 
>16317	AssignmentExpr	g_qeglobals . d_savedinfo . colors [ COLOR_BRUSHES ] [ 2 ] = 0.0
>16318	PrimaryExpression	0.0
>16319	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_BRUSHES ] [ 2 ]
>16320	PrimaryExpression	2
>16321	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_BRUSHES ]
>16322	Identifier	COLOR_BRUSHES
>16323	MemberAccess	g_qeglobals . d_savedinfo . colors
>16324	Identifier	colors
>16325	MemberAccess	g_qeglobals . d_savedinfo
>16326	Identifier	d_savedinfo
>16327	Identifier	g_qeglobals
>16328	ExpressionStatement	 
>16329	AssignmentExpr	g_qeglobals . d_savedinfo . colors [ COLOR_BRUSHES ] [ 1 ] = 0.0
>16330	PrimaryExpression	0.0
>16331	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_BRUSHES ] [ 1 ]
>16332	PrimaryExpression	1
>16333	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_BRUSHES ]
>16334	Identifier	COLOR_BRUSHES
>16335	MemberAccess	g_qeglobals . d_savedinfo . colors
>16336	Identifier	colors
>16337	MemberAccess	g_qeglobals . d_savedinfo
>16338	Identifier	d_savedinfo
>16339	Identifier	g_qeglobals
>16340	ExpressionStatement	 
>16341	AssignmentExpr	g_qeglobals . d_savedinfo . colors [ COLOR_BRUSHES ] [ 0 ] = 0.0
>16342	PrimaryExpression	0.0
>16343	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_BRUSHES ] [ 0 ]
>16344	PrimaryExpression	0
>16345	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_BRUSHES ]
>16346	Identifier	COLOR_BRUSHES
>16347	MemberAccess	g_qeglobals . d_savedinfo . colors
>16348	Identifier	colors
>16349	MemberAccess	g_qeglobals . d_savedinfo
>16350	Identifier	d_savedinfo
>16351	Identifier	g_qeglobals
>16352	ExpressionStatement	 
>16353	AssignmentExpr	g_qeglobals . d_savedinfo . colors [ COLOR_CLIPPER ] [ 2 ] = 1.0
>16354	PrimaryExpression	1.0
>16355	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_CLIPPER ] [ 2 ]
>16356	PrimaryExpression	2
>16357	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_CLIPPER ]
>16358	Identifier	COLOR_CLIPPER
>16359	MemberAccess	g_qeglobals . d_savedinfo . colors
>16360	Identifier	colors
>16361	MemberAccess	g_qeglobals . d_savedinfo
>16362	Identifier	d_savedinfo
>16363	Identifier	g_qeglobals
>16364	ExpressionStatement	 
>16365	AssignmentExpr	g_qeglobals . d_savedinfo . colors [ COLOR_CLIPPER ] [ 1 ] = 0.0
>16366	PrimaryExpression	0.0
>16367	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_CLIPPER ] [ 1 ]
>16368	PrimaryExpression	1
>16369	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_CLIPPER ]
>16370	Identifier	COLOR_CLIPPER
>16371	MemberAccess	g_qeglobals . d_savedinfo . colors
>16372	Identifier	colors
>16373	MemberAccess	g_qeglobals . d_savedinfo
>16374	Identifier	d_savedinfo
>16375	Identifier	g_qeglobals
>16376	ExpressionStatement	 
>16377	AssignmentExpr	g_qeglobals . d_savedinfo . colors [ COLOR_CLIPPER ] [ 0 ] = 0.0
>16378	PrimaryExpression	0.0
>16379	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_CLIPPER ] [ 0 ]
>16380	PrimaryExpression	0
>16381	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_CLIPPER ]
>16382	Identifier	COLOR_CLIPPER
>16383	MemberAccess	g_qeglobals . d_savedinfo . colors
>16384	Identifier	colors
>16385	MemberAccess	g_qeglobals . d_savedinfo
>16386	Identifier	d_savedinfo
>16387	Identifier	g_qeglobals
>16388	ExpressionStatement	 
>16389	AssignmentExpr	g_qeglobals . d_savedinfo . colors [ COLOR_SELBRUSHES ] [ 2 ] = 0.0
>16390	PrimaryExpression	0.0
>16391	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_SELBRUSHES ] [ 2 ]
>16392	PrimaryExpression	2
>16393	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_SELBRUSHES ]
>16394	Identifier	COLOR_SELBRUSHES
>16395	MemberAccess	g_qeglobals . d_savedinfo . colors
>16396	Identifier	colors
>16397	MemberAccess	g_qeglobals . d_savedinfo
>16398	Identifier	d_savedinfo
>16399	Identifier	g_qeglobals
>16400	ExpressionStatement	 
>16401	AssignmentExpr	g_qeglobals . d_savedinfo . colors [ COLOR_SELBRUSHES ] [ 1 ] = 0.0
>16402	PrimaryExpression	0.0
>16403	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_SELBRUSHES ] [ 1 ]
>16404	PrimaryExpression	1
>16405	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_SELBRUSHES ]
>16406	Identifier	COLOR_SELBRUSHES
>16407	MemberAccess	g_qeglobals . d_savedinfo . colors
>16408	Identifier	colors
>16409	MemberAccess	g_qeglobals . d_savedinfo
>16410	Identifier	d_savedinfo
>16411	Identifier	g_qeglobals
>16412	ExpressionStatement	 
>16413	AssignmentExpr	g_qeglobals . d_savedinfo . colors [ COLOR_SELBRUSHES ] [ 0 ] = 1.0
>16414	PrimaryExpression	1.0
>16415	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_SELBRUSHES ] [ 0 ]
>16416	PrimaryExpression	0
>16417	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_SELBRUSHES ]
>16418	Identifier	COLOR_SELBRUSHES
>16419	MemberAccess	g_qeglobals . d_savedinfo . colors
>16420	Identifier	colors
>16421	MemberAccess	g_qeglobals . d_savedinfo
>16422	Identifier	d_savedinfo
>16423	Identifier	g_qeglobals
>16424	ExpressionStatement	 
>16425	AssignmentExpr	g_qeglobals . d_savedinfo . colors [ COLOR_GRIDTEXT ] [ 2 ] = 0.0
>16426	PrimaryExpression	0.0
>16427	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_GRIDTEXT ] [ 2 ]
>16428	PrimaryExpression	2
>16429	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_GRIDTEXT ]
>16430	Identifier	COLOR_GRIDTEXT
>16431	MemberAccess	g_qeglobals . d_savedinfo . colors
>16432	Identifier	colors
>16433	MemberAccess	g_qeglobals . d_savedinfo
>16434	Identifier	d_savedinfo
>16435	Identifier	g_qeglobals
>16436	ExpressionStatement	 
>16437	AssignmentExpr	g_qeglobals . d_savedinfo . colors [ COLOR_GRIDTEXT ] [ 1 ] = 0.0
>16438	PrimaryExpression	0.0
>16439	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_GRIDTEXT ] [ 1 ]
>16440	PrimaryExpression	1
>16441	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_GRIDTEXT ]
>16442	Identifier	COLOR_GRIDTEXT
>16443	MemberAccess	g_qeglobals . d_savedinfo . colors
>16444	Identifier	colors
>16445	MemberAccess	g_qeglobals . d_savedinfo
>16446	Identifier	d_savedinfo
>16447	Identifier	g_qeglobals
>16448	ExpressionStatement	 
>16449	AssignmentExpr	g_qeglobals . d_savedinfo . colors [ COLOR_GRIDTEXT ] [ 0 ] = 0.0
>16450	PrimaryExpression	0.0
>16451	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_GRIDTEXT ] [ 0 ]
>16452	PrimaryExpression	0
>16453	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_GRIDTEXT ]
>16454	Identifier	COLOR_GRIDTEXT
>16455	MemberAccess	g_qeglobals . d_savedinfo . colors
>16456	Identifier	colors
>16457	MemberAccess	g_qeglobals . d_savedinfo
>16458	Identifier	d_savedinfo
>16459	Identifier	g_qeglobals
>16460	ExpressionStatement	 
>16461	AssignmentExpr	g_qeglobals . d_savedinfo . colors [ COLOR_GRIDBLOCK ] [ 2 ] = 1.0
>16462	PrimaryExpression	1.0
>16463	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_GRIDBLOCK ] [ 2 ]
>16464	PrimaryExpression	2
>16465	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_GRIDBLOCK ]
>16466	Identifier	COLOR_GRIDBLOCK
>16467	MemberAccess	g_qeglobals . d_savedinfo . colors
>16468	Identifier	colors
>16469	MemberAccess	g_qeglobals . d_savedinfo
>16470	Identifier	d_savedinfo
>16471	Identifier	g_qeglobals
>16472	ExpressionStatement	 
>16473	AssignmentExpr	g_qeglobals . d_savedinfo . colors [ COLOR_GRIDBLOCK ] [ 1 ] = 0.0
>16474	PrimaryExpression	0.0
>16475	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_GRIDBLOCK ] [ 1 ]
>16476	PrimaryExpression	1
>16477	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_GRIDBLOCK ]
>16478	Identifier	COLOR_GRIDBLOCK
>16479	MemberAccess	g_qeglobals . d_savedinfo . colors
>16480	Identifier	colors
>16481	MemberAccess	g_qeglobals . d_savedinfo
>16482	Identifier	d_savedinfo
>16483	Identifier	g_qeglobals
>16484	ExpressionStatement	 
>16485	AssignmentExpr	g_qeglobals . d_savedinfo . colors [ COLOR_GRIDBLOCK ] [ 0 ] = 0.0
>16486	PrimaryExpression	0.0
>16487	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_GRIDBLOCK ] [ 0 ]
>16488	PrimaryExpression	0
>16489	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_GRIDBLOCK ]
>16490	Identifier	COLOR_GRIDBLOCK
>16491	MemberAccess	g_qeglobals . d_savedinfo . colors
>16492	Identifier	colors
>16493	MemberAccess	g_qeglobals . d_savedinfo
>16494	Identifier	d_savedinfo
>16495	Identifier	g_qeglobals
>16496	ForStatement	for ( int i = 0 ; i < 3 ; i ++ )
>16497	CompoundStatement	 
>16498	ExpressionStatement	 
>16499	AssignmentExpr	g_qeglobals . d_savedinfo . colors [ COLOR_CAMERABACK ] [ i ] = 0.25
>16500	PrimaryExpression	0.25
>16501	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_CAMERABACK ] [ i ]
>16502	Identifier	i
>16503	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_CAMERABACK ]
>16504	Identifier	COLOR_CAMERABACK
>16505	MemberAccess	g_qeglobals . d_savedinfo . colors
>16506	Identifier	colors
>16507	MemberAccess	g_qeglobals . d_savedinfo
>16508	Identifier	d_savedinfo
>16509	Identifier	g_qeglobals
>16510	ExpressionStatement	 
>16511	AssignmentExpr	g_qeglobals . d_savedinfo . colors [ COLOR_GRIDMAJOR ] [ i ] = 0.5
>16512	PrimaryExpression	0.5
>16513	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_GRIDMAJOR ] [ i ]
>16514	Identifier	i
>16515	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_GRIDMAJOR ]
>16516	Identifier	COLOR_GRIDMAJOR
>16517	MemberAccess	g_qeglobals . d_savedinfo . colors
>16518	Identifier	colors
>16519	MemberAccess	g_qeglobals . d_savedinfo
>16520	Identifier	d_savedinfo
>16521	Identifier	g_qeglobals
>16522	ExpressionStatement	 
>16523	AssignmentExpr	g_qeglobals . d_savedinfo . colors [ COLOR_GRIDMINOR ] [ i ] = 1.0
>16524	PrimaryExpression	1.0
>16525	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_GRIDMINOR ] [ i ]
>16526	Identifier	i
>16527	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_GRIDMINOR ]
>16528	Identifier	COLOR_GRIDMINOR
>16529	MemberAccess	g_qeglobals . d_savedinfo . colors
>16530	Identifier	colors
>16531	MemberAccess	g_qeglobals . d_savedinfo
>16532	Identifier	d_savedinfo
>16533	Identifier	g_qeglobals
>16534	ExpressionStatement	 
>16535	AssignmentExpr	g_qeglobals . d_savedinfo . colors [ COLOR_GRIDBACK ] [ i ] = 1.0
>16536	PrimaryExpression	1.0
>16537	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_GRIDBACK ] [ i ]
>16538	Identifier	i
>16539	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_GRIDBACK ]
>16540	Identifier	COLOR_GRIDBACK
>16541	MemberAccess	g_qeglobals . d_savedinfo . colors
>16542	Identifier	colors
>16543	MemberAccess	g_qeglobals . d_savedinfo
>16544	Identifier	d_savedinfo
>16545	Identifier	g_qeglobals
>16546	ExpressionStatement	 
>16547	AssignmentExpr	g_qeglobals . d_savedinfo . colors [ COLOR_TEXTUREBACK ] [ i ] = 0.25
>16548	PrimaryExpression	0.25
>16549	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_TEXTUREBACK ] [ i ]
>16550	Identifier	i
>16551	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_TEXTUREBACK ]
>16552	Identifier	COLOR_TEXTUREBACK
>16553	MemberAccess	g_qeglobals . d_savedinfo . colors
>16554	Identifier	colors
>16555	MemberAccess	g_qeglobals . d_savedinfo
>16556	Identifier	d_savedinfo
>16557	Identifier	g_qeglobals
>16558	IncDecOp	 
>16559	IncDec	++
>16560	Identifier	i
>16561	Condition	 
>16562	RelationalExpression	i < 3
>16563	PrimaryExpression	3
>16564	Identifier	i
>16565	ForInit	 
>16566	IdentifierDeclStatement	int i = 0 ;
>16567	IdentifierDecl	i = 0
>16568	AssignmentExpr	i = 0
>16569	PrimaryExpression	0
>16570	Identifier	i
>16571	Identifier	i
>16572	IdentifierDeclType	int
>16621	FunctionDef	CMainFrame 
>16622	ParameterList	 
>16623	ReturnType	void
>16624	CompoundStatement	 
>16625	ExpressionStatement	 
>16626	CallExpression	Sys_UpdateWindows ( W_ALL )
>16627	ArgumentList	W_ALL
>16628	Argument	W_ALL
>16629	Identifier	W_ALL
>16630	Callee	Sys_UpdateWindows
>16631	Identifier	Sys_UpdateWindows
>16632	ExpressionStatement	 
>16633	AssignmentExpr	g_qeglobals . d_savedinfo . colors [ COLOR_VIEWNAME ] [ 2 ] = 0.0
>16634	PrimaryExpression	0.0
>16635	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_VIEWNAME ] [ 2 ]
>16636	PrimaryExpression	2
>16637	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_VIEWNAME ]
>16638	Identifier	COLOR_VIEWNAME
>16639	MemberAccess	g_qeglobals . d_savedinfo . colors
>16640	Identifier	colors
>16641	MemberAccess	g_qeglobals . d_savedinfo
>16642	Identifier	d_savedinfo
>16643	Identifier	g_qeglobals
>16644	ExpressionStatement	 
>16645	AssignmentExpr	g_qeglobals . d_savedinfo . colors [ COLOR_VIEWNAME ] [ 1 ] = 0.7
>16646	PrimaryExpression	0.7
>16647	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_VIEWNAME ] [ 1 ]
>16648	PrimaryExpression	1
>16649	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_VIEWNAME ]
>16650	Identifier	COLOR_VIEWNAME
>16651	MemberAccess	g_qeglobals . d_savedinfo . colors
>16652	Identifier	colors
>16653	MemberAccess	g_qeglobals . d_savedinfo
>16654	Identifier	d_savedinfo
>16655	Identifier	g_qeglobals
>16656	ExpressionStatement	 
>16657	AssignmentExpr	g_qeglobals . d_savedinfo . colors [ COLOR_VIEWNAME ] [ 0 ] = 0.7
>16658	PrimaryExpression	0.7
>16659	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_VIEWNAME ] [ 0 ]
>16660	PrimaryExpression	0
>16661	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_VIEWNAME ]
>16662	Identifier	COLOR_VIEWNAME
>16663	MemberAccess	g_qeglobals . d_savedinfo . colors
>16664	Identifier	colors
>16665	MemberAccess	g_qeglobals . d_savedinfo
>16666	Identifier	d_savedinfo
>16667	Identifier	g_qeglobals
>16668	ExpressionStatement	 
>16669	AssignmentExpr	g_qeglobals . d_savedinfo . colors [ COLOR_BRUSHES ] [ 2 ] = 1.0
>16670	PrimaryExpression	1.0
>16671	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_BRUSHES ] [ 2 ]
>16672	PrimaryExpression	2
>16673	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_BRUSHES ]
>16674	Identifier	COLOR_BRUSHES
>16675	MemberAccess	g_qeglobals . d_savedinfo . colors
>16676	Identifier	colors
>16677	MemberAccess	g_qeglobals . d_savedinfo
>16678	Identifier	d_savedinfo
>16679	Identifier	g_qeglobals
>16680	ExpressionStatement	 
>16681	AssignmentExpr	g_qeglobals . d_savedinfo . colors [ COLOR_BRUSHES ] [ 1 ] = 1.0
>16682	PrimaryExpression	1.0
>16683	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_BRUSHES ] [ 1 ]
>16684	PrimaryExpression	1
>16685	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_BRUSHES ]
>16686	Identifier	COLOR_BRUSHES
>16687	MemberAccess	g_qeglobals . d_savedinfo . colors
>16688	Identifier	colors
>16689	MemberAccess	g_qeglobals . d_savedinfo
>16690	Identifier	d_savedinfo
>16691	Identifier	g_qeglobals
>16692	ExpressionStatement	 
>16693	AssignmentExpr	g_qeglobals . d_savedinfo . colors [ COLOR_BRUSHES ] [ 0 ] = 1.0
>16694	PrimaryExpression	1.0
>16695	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_BRUSHES ] [ 0 ]
>16696	PrimaryExpression	0
>16697	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_BRUSHES ]
>16698	Identifier	COLOR_BRUSHES
>16699	MemberAccess	g_qeglobals . d_savedinfo . colors
>16700	Identifier	colors
>16701	MemberAccess	g_qeglobals . d_savedinfo
>16702	Identifier	d_savedinfo
>16703	Identifier	g_qeglobals
>16704	ExpressionStatement	 
>16705	AssignmentExpr	g_qeglobals . d_savedinfo . colors [ COLOR_CLIPPER ] [ 2 ] = 1.0
>16706	PrimaryExpression	1.0
>16707	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_CLIPPER ] [ 2 ]
>16708	PrimaryExpression	2
>16709	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_CLIPPER ]
>16710	Identifier	COLOR_CLIPPER
>16711	MemberAccess	g_qeglobals . d_savedinfo . colors
>16712	Identifier	colors
>16713	MemberAccess	g_qeglobals . d_savedinfo
>16714	Identifier	d_savedinfo
>16715	Identifier	g_qeglobals
>16716	ExpressionStatement	 
>16717	AssignmentExpr	g_qeglobals . d_savedinfo . colors [ COLOR_CLIPPER ] [ 1 ] = 0.0
>16718	PrimaryExpression	0.0
>16719	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_CLIPPER ] [ 1 ]
>16720	PrimaryExpression	1
>16721	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_CLIPPER ]
>16722	Identifier	COLOR_CLIPPER
>16723	MemberAccess	g_qeglobals . d_savedinfo . colors
>16724	Identifier	colors
>16725	MemberAccess	g_qeglobals . d_savedinfo
>16726	Identifier	d_savedinfo
>16727	Identifier	g_qeglobals
>16728	ExpressionStatement	 
>16729	AssignmentExpr	g_qeglobals . d_savedinfo . colors [ COLOR_CLIPPER ] [ 0 ] = 0.0
>16730	PrimaryExpression	0.0
>16731	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_CLIPPER ] [ 0 ]
>16732	PrimaryExpression	0
>16733	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_CLIPPER ]
>16734	Identifier	COLOR_CLIPPER
>16735	MemberAccess	g_qeglobals . d_savedinfo . colors
>16736	Identifier	colors
>16737	MemberAccess	g_qeglobals . d_savedinfo
>16738	Identifier	d_savedinfo
>16739	Identifier	g_qeglobals
>16740	ExpressionStatement	 
>16741	AssignmentExpr	g_qeglobals . d_savedinfo . colors [ COLOR_SELBRUSHES ] [ 2 ] = 0.0
>16742	PrimaryExpression	0.0
>16743	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_SELBRUSHES ] [ 2 ]
>16744	PrimaryExpression	2
>16745	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_SELBRUSHES ]
>16746	Identifier	COLOR_SELBRUSHES
>16747	MemberAccess	g_qeglobals . d_savedinfo . colors
>16748	Identifier	colors
>16749	MemberAccess	g_qeglobals . d_savedinfo
>16750	Identifier	d_savedinfo
>16751	Identifier	g_qeglobals
>16752	ExpressionStatement	 
>16753	AssignmentExpr	g_qeglobals . d_savedinfo . colors [ COLOR_SELBRUSHES ] [ 1 ] = 0.0
>16754	PrimaryExpression	0.0
>16755	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_SELBRUSHES ] [ 1 ]
>16756	PrimaryExpression	1
>16757	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_SELBRUSHES ]
>16758	Identifier	COLOR_SELBRUSHES
>16759	MemberAccess	g_qeglobals . d_savedinfo . colors
>16760	Identifier	colors
>16761	MemberAccess	g_qeglobals . d_savedinfo
>16762	Identifier	d_savedinfo
>16763	Identifier	g_qeglobals
>16764	ExpressionStatement	 
>16765	AssignmentExpr	g_qeglobals . d_savedinfo . colors [ COLOR_SELBRUSHES ] [ 0 ] = 1.0
>16766	PrimaryExpression	1.0
>16767	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_SELBRUSHES ] [ 0 ]
>16768	PrimaryExpression	0
>16769	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_SELBRUSHES ]
>16770	Identifier	COLOR_SELBRUSHES
>16771	MemberAccess	g_qeglobals . d_savedinfo . colors
>16772	Identifier	colors
>16773	MemberAccess	g_qeglobals . d_savedinfo
>16774	Identifier	d_savedinfo
>16775	Identifier	g_qeglobals
>16776	ExpressionStatement	 
>16777	AssignmentExpr	g_qeglobals . d_savedinfo . colors [ COLOR_GRIDTEXT ] [ 2 ] = 1.0
>16778	PrimaryExpression	1.0
>16779	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_GRIDTEXT ] [ 2 ]
>16780	PrimaryExpression	2
>16781	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_GRIDTEXT ]
>16782	Identifier	COLOR_GRIDTEXT
>16783	MemberAccess	g_qeglobals . d_savedinfo . colors
>16784	Identifier	colors
>16785	MemberAccess	g_qeglobals . d_savedinfo
>16786	Identifier	d_savedinfo
>16787	Identifier	g_qeglobals
>16788	ExpressionStatement	 
>16789	AssignmentExpr	g_qeglobals . d_savedinfo . colors [ COLOR_GRIDTEXT ] [ 1 ] = 1.0
>16790	PrimaryExpression	1.0
>16791	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_GRIDTEXT ] [ 1 ]
>16792	PrimaryExpression	1
>16793	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_GRIDTEXT ]
>16794	Identifier	COLOR_GRIDTEXT
>16795	MemberAccess	g_qeglobals . d_savedinfo . colors
>16796	Identifier	colors
>16797	MemberAccess	g_qeglobals . d_savedinfo
>16798	Identifier	d_savedinfo
>16799	Identifier	g_qeglobals
>16800	ExpressionStatement	 
>16801	AssignmentExpr	g_qeglobals . d_savedinfo . colors [ COLOR_GRIDTEXT ] [ 0 ] = 1.0
>16802	PrimaryExpression	1.0
>16803	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_GRIDTEXT ] [ 0 ]
>16804	PrimaryExpression	0
>16805	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_GRIDTEXT ]
>16806	Identifier	COLOR_GRIDTEXT
>16807	MemberAccess	g_qeglobals . d_savedinfo . colors
>16808	Identifier	colors
>16809	MemberAccess	g_qeglobals . d_savedinfo
>16810	Identifier	d_savedinfo
>16811	Identifier	g_qeglobals
>16812	ExpressionStatement	 
>16813	AssignmentExpr	g_qeglobals . d_savedinfo . colors [ COLOR_GRIDBLOCK ] [ 2 ] = 1.0
>16814	PrimaryExpression	1.0
>16815	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_GRIDBLOCK ] [ 2 ]
>16816	PrimaryExpression	2
>16817	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_GRIDBLOCK ]
>16818	Identifier	COLOR_GRIDBLOCK
>16819	MemberAccess	g_qeglobals . d_savedinfo . colors
>16820	Identifier	colors
>16821	MemberAccess	g_qeglobals . d_savedinfo
>16822	Identifier	d_savedinfo
>16823	Identifier	g_qeglobals
>16824	ExpressionStatement	 
>16825	AssignmentExpr	g_qeglobals . d_savedinfo . colors [ COLOR_GRIDBLOCK ] [ 1 ] = 0.0
>16826	PrimaryExpression	0.0
>16827	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_GRIDBLOCK ] [ 1 ]
>16828	PrimaryExpression	1
>16829	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_GRIDBLOCK ]
>16830	Identifier	COLOR_GRIDBLOCK
>16831	MemberAccess	g_qeglobals . d_savedinfo . colors
>16832	Identifier	colors
>16833	MemberAccess	g_qeglobals . d_savedinfo
>16834	Identifier	d_savedinfo
>16835	Identifier	g_qeglobals
>16836	ExpressionStatement	 
>16837	AssignmentExpr	g_qeglobals . d_savedinfo . colors [ COLOR_GRIDBLOCK ] [ 0 ] = 0.0
>16838	PrimaryExpression	0.0
>16839	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_GRIDBLOCK ] [ 0 ]
>16840	PrimaryExpression	0
>16841	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_GRIDBLOCK ]
>16842	Identifier	COLOR_GRIDBLOCK
>16843	MemberAccess	g_qeglobals . d_savedinfo . colors
>16844	Identifier	colors
>16845	MemberAccess	g_qeglobals . d_savedinfo
>16846	Identifier	d_savedinfo
>16847	Identifier	g_qeglobals
>16848	ExpressionStatement	 
>16849	AssignmentExpr	g_qeglobals . d_savedinfo . colors [ COLOR_GRIDMAJOR ] [ 2 ] = 0.5
>16850	PrimaryExpression	0.5
>16851	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_GRIDMAJOR ] [ 2 ]
>16852	PrimaryExpression	2
>16853	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_GRIDMAJOR ]
>16854	Identifier	COLOR_GRIDMAJOR
>16855	MemberAccess	g_qeglobals . d_savedinfo . colors
>16856	Identifier	colors
>16857	MemberAccess	g_qeglobals . d_savedinfo
>16858	Identifier	d_savedinfo
>16859	Identifier	g_qeglobals
>16860	ExpressionStatement	 
>16861	AssignmentExpr	g_qeglobals . d_savedinfo . colors [ COLOR_GRIDMAJOR ] [ 1 ] = 0.5
>16862	PrimaryExpression	0.5
>16863	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_GRIDMAJOR ] [ 1 ]
>16864	PrimaryExpression	1
>16865	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_GRIDMAJOR ]
>16866	Identifier	COLOR_GRIDMAJOR
>16867	MemberAccess	g_qeglobals . d_savedinfo . colors
>16868	Identifier	colors
>16869	MemberAccess	g_qeglobals . d_savedinfo
>16870	Identifier	d_savedinfo
>16871	Identifier	g_qeglobals
>16872	ExpressionStatement	 
>16873	AssignmentExpr	g_qeglobals . d_savedinfo . colors [ COLOR_GRIDMAJOR ] [ 0 ] = 0.3
>16874	PrimaryExpression	0.3
>16875	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_GRIDMAJOR ] [ 0 ]
>16876	PrimaryExpression	0
>16877	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_GRIDMAJOR ]
>16878	Identifier	COLOR_GRIDMAJOR
>16879	MemberAccess	g_qeglobals . d_savedinfo . colors
>16880	Identifier	colors
>16881	MemberAccess	g_qeglobals . d_savedinfo
>16882	Identifier	d_savedinfo
>16883	Identifier	g_qeglobals
>16884	ForStatement	for ( int i = 0 ; i < 3 ; i ++ )
>16885	CompoundStatement	 
>16886	ExpressionStatement	 
>16887	AssignmentExpr	g_qeglobals . d_savedinfo . colors [ COLOR_CAMERABACK ] [ i ] = 0.25
>16888	PrimaryExpression	0.25
>16889	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_CAMERABACK ] [ i ]
>16890	Identifier	i
>16891	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_CAMERABACK ]
>16892	Identifier	COLOR_CAMERABACK
>16893	MemberAccess	g_qeglobals . d_savedinfo . colors
>16894	Identifier	colors
>16895	MemberAccess	g_qeglobals . d_savedinfo
>16896	Identifier	d_savedinfo
>16897	Identifier	g_qeglobals
>16898	ExpressionStatement	 
>16899	AssignmentExpr	g_qeglobals . d_savedinfo . colors [ COLOR_GRIDMINOR ] [ i ] = 0.0
>16900	PrimaryExpression	0.0
>16901	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_GRIDMINOR ] [ i ]
>16902	Identifier	i
>16903	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_GRIDMINOR ]
>16904	Identifier	COLOR_GRIDMINOR
>16905	MemberAccess	g_qeglobals . d_savedinfo . colors
>16906	Identifier	colors
>16907	MemberAccess	g_qeglobals . d_savedinfo
>16908	Identifier	d_savedinfo
>16909	Identifier	g_qeglobals
>16910	ExpressionStatement	 
>16911	AssignmentExpr	g_qeglobals . d_savedinfo . colors [ COLOR_GRIDBACK ] [ i ] = 0.0
>16912	PrimaryExpression	0.0
>16913	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_GRIDBACK ] [ i ]
>16914	Identifier	i
>16915	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_GRIDBACK ]
>16916	Identifier	COLOR_GRIDBACK
>16917	MemberAccess	g_qeglobals . d_savedinfo . colors
>16918	Identifier	colors
>16919	MemberAccess	g_qeglobals . d_savedinfo
>16920	Identifier	d_savedinfo
>16921	Identifier	g_qeglobals
>16922	ExpressionStatement	 
>16923	AssignmentExpr	g_qeglobals . d_savedinfo . colors [ COLOR_TEXTUREBACK ] [ i ] = 0.25
>16924	PrimaryExpression	0.25
>16925	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_TEXTUREBACK ] [ i ]
>16926	Identifier	i
>16927	ArrayIndexing	g_qeglobals . d_savedinfo . colors [ COLOR_TEXTUREBACK ]
>16928	Identifier	COLOR_TEXTUREBACK
>16929	MemberAccess	g_qeglobals . d_savedinfo . colors
>16930	Identifier	colors
>16931	MemberAccess	g_qeglobals . d_savedinfo
>16932	Identifier	d_savedinfo
>16933	Identifier	g_qeglobals
>16934	IncDecOp	 
>16935	IncDec	++
>16936	Identifier	i
>16937	Condition	 
>16938	RelationalExpression	i < 3
>16939	PrimaryExpression	3
>16940	Identifier	i
>16941	ForInit	 
>16942	IdentifierDeclStatement	int i = 0 ;
>16943	IdentifierDecl	i = 0
>16944	AssignmentExpr	i = 0
>16945	PrimaryExpression	0
>16946	Identifier	i
>16947	Identifier	i
>16948	IdentifierDeclType	int
>16997	FunctionDef	CMainFrame 
>16998	ParameterList	 
>16999	ReturnType	void
>17000	CompoundStatement	 
>17001	IfStatement	if ( pMenu )
>17002	ExpressionStatement	 
>17003	CallExpression	pMenu -> CheckMenuItem ( ID_SNAPTOGRID , MF_BYCOMMAND | ( ! g_PrefsDlg . m_bNoClamp ) ? MF_CHECKED 
>17004	ArgumentList	ID_SNAPTOGRID
>17005	Argument	MF_BYCOMMAND | ( ! g_PrefsDlg . m_bNoClamp ) ? MF_CHECKED 
>17006	ConditionalExpression	MF_BYCOMMAND | ( ! g_PrefsDlg . m_bNoClamp ) ? MF_CHECKED 
>17007	Identifier	MF_UNCHECKED
>17008	Identifier	MF_CHECKED
>17009	Condition	MF_BYCOMMAND | ( ! g_PrefsDlg . m_bNoClamp )
>17010	InclusiveOrExpression	MF_BYCOMMAND | ( ! g_PrefsDlg . m_bNoClamp )
>17011	UnaryOp	! g_PrefsDlg . m_bNoClamp
>17012	MemberAccess	g_PrefsDlg . m_bNoClamp
>17013	Identifier	m_bNoClamp
>17014	Identifier	g_PrefsDlg
>17015	UnaryOperator	!
>17016	Identifier	MF_BYCOMMAND
>17017	Argument	ID_SNAPTOGRID
>17018	Identifier	ID_SNAPTOGRID
>17019	Callee	pMenu -> CheckMenuItem
>17020	PtrMemberAccess	pMenu -> CheckMenuItem
>17021	Identifier	CheckMenuItem
>17022	Identifier	pMenu
>17023	Condition	 
>17024	Identifier	pMenu
>17025	IdentifierDeclStatement	 
>17026	IdentifierDecl	* pMenu = GetMenu ( )
>17027	AssignmentExpr	* pMenu = GetMenu ( )
>17028	CallExpression	GetMenu ( )
>17029	ArgumentList	 
>17030	Callee	GetMenu
>17031	Identifier	GetMenu
>17032	Identifier	pMenu
>17033	Identifier	pMenu
>17034	IdentifierDeclType	CMenu *
>17035	ExpressionStatement	 
>17036	CallExpression	g_PrefsDlg . SavePrefs ( )
>17037	ArgumentList	 
>17038	Callee	g_PrefsDlg . SavePrefs
>17039	MemberAccess	g_PrefsDlg . SavePrefs
>17040	Identifier	SavePrefs
>17041	Identifier	g_PrefsDlg
>17042	ExpressionStatement	 
>17043	AssignmentExpr	g_PrefsDlg . m_bNoClamp ^= 1
>17044	PrimaryExpression	1
>17045	MemberAccess	g_PrefsDlg . m_bNoClamp
>17046	Identifier	m_bNoClamp
>17047	Identifier	g_PrefsDlg
>17059	FunctionDef	CMainFrame 
>17060	ParameterList	 
>17061	ReturnType	void
>17062	CompoundStatement	 
>17063	ExpressionStatement	 
>17064	CallExpression	Undo_End ( )
>17065	ArgumentList	 
>17066	Callee	Undo_End
>17067	Identifier	Undo_End
>17068	ExpressionStatement	 
>17069	CallExpression	Undo_EndBrushList ( & selected_brushes )
>17070	ArgumentList	& selected_brushes
>17071	Argument	& selected_brushes
>17072	UnaryOp	& selected_brushes
>17073	Identifier	selected_brushes
>17074	UnaryOperator	&
>17075	Callee	Undo_EndBrushList
>17076	Identifier	Undo_EndBrushList
>17077	IfStatement	if ( dlg . DoModal ( ) == IDOK )
>17078	CompoundStatement	 
>17079	IfStatement	if ( dlg . m_fX > 0 && dlg . m_fY > 0 && dlg . m_fZ > 0 )
>17080	ElseStatement	else
>17081	ExpressionStatement	 
>17082	CallExpression	Sys_Printf ( \"Warning.. Tried to scale by a zero value.\" )
>17083	ArgumentList	\"Warning.. Tried to scale by a zero value.\"
>17084	Argument	\"Warning.. Tried to scale by a zero value.\"
>17085	PrimaryExpression	\"Warning.. Tried to scale by a zero value.\"
>17086	Callee	Sys_Printf
>17087	Identifier	Sys_Printf
>17088	CompoundStatement	 
>17089	ExpressionStatement	 
>17090	CallExpression	Sys_UpdateWindows ( W_ALL )
>17091	ArgumentList	W_ALL
>17092	Argument	W_ALL
>17093	Identifier	W_ALL
>17094	Callee	Sys_UpdateWindows
>17095	Identifier	Sys_UpdateWindows
>17096	ExpressionStatement	 
>17097	CallExpression	Select_Scale ( dlg . m_fX , dlg . m_fY , dlg . m_fZ )
>17098	ArgumentList	dlg . m_fX
>17099	Argument	dlg . m_fZ
>17100	MemberAccess	dlg . m_fZ
>17101	Identifier	m_fZ
>17102	Identifier	dlg
>17103	Argument	dlg . m_fY
>17104	MemberAccess	dlg . m_fY
>17105	Identifier	m_fY
>17106	Identifier	dlg
>17107	Argument	dlg . m_fX
>17108	MemberAccess	dlg . m_fX
>17109	Identifier	m_fX
>17110	Identifier	dlg
>17111	Callee	Select_Scale
>17112	Identifier	Select_Scale
>17113	Condition	 
>17114	AndExpression	dlg . m_fX > 0 && dlg . m_fY > 0 && dlg . m_fZ > 0
>17115	AndExpression	dlg . m_fY > 0 && dlg . m_fZ > 0
>17116	RelationalExpression	dlg . m_fZ > 0
>17117	PrimaryExpression	0
>17118	MemberAccess	dlg . m_fZ
>17119	Identifier	m_fZ
>17120	Identifier	dlg
>17121	RelationalExpression	dlg . m_fY > 0
>17122	PrimaryExpression	0
>17123	MemberAccess	dlg . m_fY
>17124	Identifier	m_fY
>17125	Identifier	dlg
>17126	RelationalExpression	dlg . m_fX > 0
>17127	PrimaryExpression	0
>17128	MemberAccess	dlg . m_fX
>17129	Identifier	m_fX
>17130	Identifier	dlg
>17131	Condition	 
>17132	EqualityExpression	dlg . DoModal ( ) == IDOK
>17133	Identifier	IDOK
>17134	CallExpression	dlg . DoModal ( )
>17135	ArgumentList	 
>17136	Callee	dlg . DoModal
>17137	MemberAccess	dlg . DoModal
>17138	Identifier	DoModal
>17139	Identifier	dlg
>17140	IdentifierDeclStatement	 
>17141	IdentifierDecl	dlg
>17142	Identifier	dlg
>17143	IdentifierDeclType	CScaleDialog
>17144	ExpressionStatement	 
>17145	CallExpression	Undo_AddBrushList ( & selected_brushes )
>17146	ArgumentList	& selected_brushes
>17147	Argument	& selected_brushes
>17148	UnaryOp	& selected_brushes
>17149	Identifier	selected_brushes
>17150	UnaryOperator	&
>17151	Callee	Undo_AddBrushList
>17152	Identifier	Undo_AddBrushList
>17153	ExpressionStatement	 
>17154	CallExpression	Undo_Start ( \"scale\" )
>17155	ArgumentList	\"scale\"
>17156	Argument	\"scale\"
>17157	PrimaryExpression	\"scale\"
>17158	Callee	Undo_Start
>17159	Identifier	Undo_Start
>17171	FunctionDef	CMainFrame 
>17172	ParameterList	 
>17173	ReturnType	void
>17174	CompoundStatement	 
>17175	IfStatement	if ( ActiveXY ( ) )
>17176	CompoundStatement	 
>17177	IfStatement	if ( ActiveXY ( ) -> RotateMode ( ) )
>17178	ElseStatement	else
>17179	CompoundStatement	 
>17180	IfStatement	if ( ActiveXY ( ) -> SetRotateMode ( true ) )
>17181	ElseStatement	else
>17182	ExpressionStatement	 
>17183	CallExpression	m_wndToolBar . GetToolBarCtrl ( ) . CheckButton ( ID_SELECT_MOUSEROTATE , FALSE )
>17184	ArgumentList	ID_SELECT_MOUSEROTATE
>17185	Argument	FALSE
>17186	Identifier	FALSE
>17187	Argument	ID_SELECT_MOUSEROTATE
>17188	Identifier	ID_SELECT_MOUSEROTATE
>17189	Callee	m_wndToolBar . GetToolBarCtrl ( ) . CheckButton
>17190	MemberAccess	m_wndToolBar . GetToolBarCtrl ( ) . CheckButton
>17191	Identifier	CheckButton
>17192	CallExpression	m_wndToolBar . GetToolBarCtrl ( )
>17193	ArgumentList	 
>17194	Callee	m_wndToolBar . GetToolBarCtrl
>17195	MemberAccess	m_wndToolBar . GetToolBarCtrl
>17196	Identifier	GetToolBarCtrl
>17197	Identifier	m_wndToolBar
>17198	ExpressionStatement	 
>17199	CallExpression	m_wndToolBar . GetToolBarCtrl ( ) . CheckButton ( ID_SELECT_MOUSEROTATE , TRUE )
>17200	ArgumentList	ID_SELECT_MOUSEROTATE
>17201	Argument	TRUE
>17202	Identifier	TRUE
>17203	Argument	ID_SELECT_MOUSEROTATE
>17204	Identifier	ID_SELECT_MOUSEROTATE
>17205	Callee	m_wndToolBar . GetToolBarCtrl ( ) . CheckButton
>17206	MemberAccess	m_wndToolBar . GetToolBarCtrl ( ) . CheckButton
>17207	Identifier	CheckButton
>17208	CallExpression	m_wndToolBar . GetToolBarCtrl ( )
>17209	ArgumentList	 
>17210	Callee	m_wndToolBar . GetToolBarCtrl
>17211	MemberAccess	m_wndToolBar . GetToolBarCtrl
>17212	Identifier	GetToolBarCtrl
>17213	Identifier	m_wndToolBar
>17214	Condition	 
>17215	CallExpression	ActiveXY ( ) -> SetRotateMode ( true )
>17216	ArgumentList	true
>17217	Argument	true
>17218	Identifier	true
>17219	Callee	ActiveXY ( ) -> SetRotateMode
>17220	PtrMemberAccess	ActiveXY ( ) -> SetRotateMode
>17221	Identifier	SetRotateMode
>17222	CallExpression	ActiveXY ( )
>17223	ArgumentList	 
>17224	Callee	ActiveXY
>17225	Identifier	ActiveXY
>17226	CompoundStatement	 
>17227	ExpressionStatement	 
>17228	CallExpression	Map_BuildBrushData ( )
>17229	ArgumentList	 
>17230	Callee	Map_BuildBrushData
>17231	Identifier	Map_BuildBrushData
>17232	ExpressionStatement	 
>17233	CallExpression	m_wndToolBar . GetToolBarCtrl ( ) . CheckButton ( ID_SELECT_MOUSEROTATE , FALSE )
>17234	ArgumentList	ID_SELECT_MOUSEROTATE
>17235	Argument	FALSE
>17236	Identifier	FALSE
>17237	Argument	ID_SELECT_MOUSEROTATE
>17238	Identifier	ID_SELECT_MOUSEROTATE
>17239	Callee	m_wndToolBar . GetToolBarCtrl ( ) . CheckButton
>17240	MemberAccess	m_wndToolBar . GetToolBarCtrl ( ) . CheckButton
>17241	Identifier	CheckButton
>17242	CallExpression	m_wndToolBar . GetToolBarCtrl ( )
>17243	ArgumentList	 
>17244	Callee	m_wndToolBar . GetToolBarCtrl
>17245	MemberAccess	m_wndToolBar . GetToolBarCtrl
>17246	Identifier	GetToolBarCtrl
>17247	Identifier	m_wndToolBar
>17248	ExpressionStatement	 
>17249	CallExpression	ActiveXY ( ) -> SetRotateMode ( false )
>17250	ArgumentList	false
>17251	Argument	false
>17252	Identifier	false
>17253	Callee	ActiveXY ( ) -> SetRotateMode
>17254	PtrMemberAccess	ActiveXY ( ) -> SetRotateMode
>17255	Identifier	SetRotateMode
>17256	CallExpression	ActiveXY ( )
>17257	ArgumentList	 
>17258	Callee	ActiveXY
>17259	Identifier	ActiveXY
>17260	Condition	 
>17261	CallExpression	ActiveXY ( ) -> RotateMode ( )
>17262	ArgumentList	 
>17263	Callee	ActiveXY ( ) -> RotateMode
>17264	PtrMemberAccess	ActiveXY ( ) -> RotateMode
>17265	Identifier	RotateMode
>17266	CallExpression	ActiveXY ( )
>17267	ArgumentList	 
>17268	Callee	ActiveXY
>17269	Identifier	ActiveXY
>17270	IfStatement	if ( ActiveXY ( ) -> ClipMode ( ) )
>17271	ExpressionStatement	 
>17272	CallExpression	OnViewClipper ( )
>17273	ArgumentList	 
>17274	Callee	OnViewClipper
>17275	Identifier	OnViewClipper
>17276	Condition	 
>17277	CallExpression	ActiveXY ( ) -> ClipMode ( )
>17278	ArgumentList	 
>17279	Callee	ActiveXY ( ) -> ClipMode
>17280	PtrMemberAccess	ActiveXY ( ) -> ClipMode
>17281	Identifier	ClipMode
>17282	CallExpression	ActiveXY ( )
>17283	ArgumentList	 
>17284	Callee	ActiveXY
>17285	Identifier	ActiveXY
>17286	Condition	 
>17287	CallExpression	ActiveXY ( )
>17288	ArgumentList	 
>17289	Callee	ActiveXY
>17290	Identifier	ActiveXY
>17306	FunctionDef	CMainFrame 
>17307	ParameterList	 
>17308	ReturnType	void
>17309	CompoundStatement	 
>17310	IfStatement	if ( ActiveXY ( ) )
>17311	ExpressionStatement	 
>17312	CallExpression	ActiveXY ( ) -> Copy ( )
>17313	ArgumentList	 
>17314	Callee	ActiveXY ( ) -> Copy
>17315	PtrMemberAccess	ActiveXY ( ) -> Copy
>17316	Identifier	Copy
>17317	CallExpression	ActiveXY ( )
>17318	ArgumentList	 
>17319	Callee	ActiveXY
>17320	Identifier	ActiveXY
>17321	Condition	 
>17322	CallExpression	ActiveXY ( )
>17323	ArgumentList	 
>17324	Callee	ActiveXY
>17325	Identifier	ActiveXY
>17330	FunctionDef	CMainFrame 
>17331	ParameterList	 
>17332	ReturnType	void
>17333	CompoundStatement	 
>17334	IfStatement	if ( ActiveXY ( ) )
>17335	ExpressionStatement	 
>17336	CallExpression	ActiveXY ( ) -> Paste ( )
>17337	ArgumentList	 
>17338	Callee	ActiveXY ( ) -> Paste
>17339	PtrMemberAccess	ActiveXY ( ) -> Paste
>17340	Identifier	Paste
>17341	CallExpression	ActiveXY ( )
>17342	ArgumentList	 
>17343	Callee	ActiveXY
>17344	Identifier	ActiveXY
>17345	Condition	 
>17346	CallExpression	ActiveXY ( )
>17347	ArgumentList	 
>17348	Callee	ActiveXY
>17349	Identifier	ActiveXY
>17354	FunctionDef	CMainFrame 
>17355	ParameterList	 
>17356	ReturnType	void
>17357	CompoundStatement	 
>17358	ExpressionStatement	 
>17359	CallExpression	Undo_Undo ( )
>17360	ArgumentList	 
>17361	Callee	Undo_Undo
>17362	Identifier	Undo_Undo
>17366	FunctionDef	CMainFrame 
>17367	ParameterList	 
>17368	ReturnType	void
>17369	CompoundStatement	 
>17370	ExpressionStatement	 
>17371	CallExpression	Undo_Redo ( )
>17372	ArgumentList	 
>17373	Callee	Undo_Redo
>17374	Identifier	Undo_Redo
>17378	FunctionDef	CMainFrame 
>17379	ParameterList	CCmdUI * pCmdUI
>17380	Parameter	 
>17381	Identifier	pCmdUI
>17382	ParameterType	CCmdUI *
>17383	ReturnType	void
>17384	CompoundStatement	 
>17385	ExpressionStatement	 
>17386	CallExpression	pCmdUI -> Enable ( Undo_UndoAvailable ( ) )
>17387	ArgumentList	Undo_UndoAvailable ( )
>17388	Argument	Undo_UndoAvailable ( )
>17389	CallExpression	Undo_UndoAvailable ( )
>17390	ArgumentList	 
>17391	Callee	Undo_UndoAvailable
>17392	Identifier	Undo_UndoAvailable
>17393	Callee	pCmdUI -> Enable
>17394	PtrMemberAccess	pCmdUI -> Enable
>17395	Identifier	Enable
>17396	Identifier	pCmdUI
>17402	FunctionDef	CMainFrame 
>17403	ParameterList	CCmdUI * pCmdUI
>17404	Parameter	 
>17405	Identifier	pCmdUI
>17406	ParameterType	CCmdUI *
>17407	ReturnType	void
>17408	CompoundStatement	 
>17409	ExpressionStatement	 
>17410	CallExpression	pCmdUI -> Enable ( Undo_RedoAvailable ( ) )
>17411	ArgumentList	Undo_RedoAvailable ( )
>17412	Argument	Undo_RedoAvailable ( )
>17413	CallExpression	Undo_RedoAvailable ( )
>17414	ArgumentList	 
>17415	Callee	Undo_RedoAvailable
>17416	Identifier	Undo_RedoAvailable
>17417	Callee	pCmdUI -> Enable
>17418	PtrMemberAccess	pCmdUI -> Enable
>17419	Identifier	Enable
>17420	Identifier	pCmdUI
>17426	FunctionDef	CMainFrame 
>17427	ParameterList	 
>17428	ReturnType	void
>17429	CompoundStatement	 
>17430	ExpressionStatement	 
>17431	CallExpression	SetTexValStatus ( )
>17432	ArgumentList	 
>17433	Callee	SetTexValStatus
>17434	Identifier	SetTexValStatus
>17435	IfStatement	if ( g_qeglobals . d_savedinfo . m_nTextureTweak == 0 )
>17436	ExpressionStatement	 
>17437	IncDecOp	g_qeglobals . d_savedinfo . m_nTextureTweak --
>17438	IncDec	--
>17439	MemberAccess	g_qeglobals . d_savedinfo . m_nTextureTweak
>17440	Identifier	m_nTextureTweak
>17441	MemberAccess	g_qeglobals . d_savedinfo
>17442	Identifier	d_savedinfo
>17443	Identifier	g_qeglobals
>17444	Condition	 
>17445	EqualityExpression	g_qeglobals . d_savedinfo . m_nTextureTweak == 0
>17446	PrimaryExpression	0
>17447	MemberAccess	g_qeglobals . d_savedinfo . m_nTextureTweak
>17448	Identifier	m_nTextureTweak
>17449	MemberAccess	g_qeglobals . d_savedinfo
>17450	Identifier	d_savedinfo
>17451	Identifier	g_qeglobals
>17452	ExpressionStatement	 
>17453	IncDecOp	g_qeglobals . d_savedinfo . m_nTextureTweak --
>17454	IncDec	--
>17455	MemberAccess	g_qeglobals . d_savedinfo . m_nTextureTweak
>17456	Identifier	m_nTextureTweak
>17457	MemberAccess	g_qeglobals . d_savedinfo
>17458	Identifier	d_savedinfo
>17459	Identifier	g_qeglobals
>17466	FunctionDef	CMainFrame 
>17467	ParameterList	 
>17468	ReturnType	void
>17469	CompoundStatement	 
>17473	FunctionDef	CMainFrame 
>17474	ParameterList	 
>17475	ReturnType	void
>17476	CompoundStatement	 
>17477	ExpressionStatement	 
>17478	CallExpression	SetTexValStatus ( )
>17479	ArgumentList	 
>17480	Callee	SetTexValStatus
>17481	Identifier	SetTexValStatus
>17482	IfStatement	if ( g_qeglobals . d_savedinfo . m_nTextureTweak == 0 )
>17483	ExpressionStatement	 
>17484	IncDecOp	g_qeglobals . d_savedinfo . m_nTextureTweak ++
>17485	IncDec	++
>17486	MemberAccess	g_qeglobals . d_savedinfo . m_nTextureTweak
>17487	Identifier	m_nTextureTweak
>17488	MemberAccess	g_qeglobals . d_savedinfo
>17489	Identifier	d_savedinfo
>17490	Identifier	g_qeglobals
>17491	Condition	 
>17492	EqualityExpression	g_qeglobals . d_savedinfo . m_nTextureTweak == 0
>17493	PrimaryExpression	0
>17494	MemberAccess	g_qeglobals . d_savedinfo . m_nTextureTweak
>17495	Identifier	m_nTextureTweak
>17496	MemberAccess	g_qeglobals . d_savedinfo
>17497	Identifier	d_savedinfo
>17498	Identifier	g_qeglobals
>17499	ExpressionStatement	 
>17500	IncDecOp	g_qeglobals . d_savedinfo . m_nTextureTweak ++
>17501	IncDec	++
>17502	MemberAccess	g_qeglobals . d_savedinfo . m_nTextureTweak
>17503	Identifier	m_nTextureTweak
>17504	MemberAccess	g_qeglobals . d_savedinfo
>17505	Identifier	d_savedinfo
>17506	Identifier	g_qeglobals
>17513	FunctionDef	CMainFrame 
>17514	ParameterList	 
>17515	ReturnType	void
>17516	CompoundStatement	 
>17517	ExpressionStatement	 
>17518	CallExpression	Select_RotateTexture ( abs ( g_PrefsDlg . m_nRotation ) )
>17519	ArgumentList	abs ( g_PrefsDlg . m_nRotation )
>17520	Argument	abs ( g_PrefsDlg . m_nRotation )
>17521	CallExpression	abs ( g_PrefsDlg . m_nRotation )
>17522	ArgumentList	g_PrefsDlg . m_nRotation
>17523	Argument	g_PrefsDlg . m_nRotation
>17524	MemberAccess	g_PrefsDlg . m_nRotation
>17525	Identifier	m_nRotation
>17526	Identifier	g_PrefsDlg
>17527	Callee	abs
>17528	Identifier	abs
>17529	Callee	Select_RotateTexture
>17530	Identifier	Select_RotateTexture
>17537	FunctionDef	CMainFrame 
>17538	ParameterList	 
>17539	ReturnType	void
>17540	CompoundStatement	 
>17541	ExpressionStatement	 
>17542	CallExpression	Select_RotateTexture ( - abs ( g_PrefsDlg . m_nRotation ) )
>17543	ArgumentList	- abs ( g_PrefsDlg . m_nRotation )
>17544	Argument	- abs ( g_PrefsDlg . m_nRotation )
>17545	UnaryOp	- abs ( g_PrefsDlg . m_nRotation )
>17546	CallExpression	abs ( g_PrefsDlg . m_nRotation )
>17547	ArgumentList	g_PrefsDlg . m_nRotation
>17548	Argument	g_PrefsDlg . m_nRotation
>17549	MemberAccess	g_PrefsDlg . m_nRotation
>17550	Identifier	m_nRotation
>17551	Identifier	g_PrefsDlg
>17552	Callee	abs
>17553	Identifier	abs
>17554	UnaryOperator	-
>17555	Callee	Select_RotateTexture
>17556	Identifier	Select_RotateTexture
>17563	FunctionDef	CMainFrame 
>17564	ParameterList	 
>17565	ReturnType	void
>17566	CompoundStatement	 
>17567	ExpressionStatement	 
>17568	CallExpression	Select_ScaleTexture ( 0 , - abs ( g_qeglobals . d_savedinfo . m_nTextureTweak ) )
>17569	ArgumentList	0
>17570	Argument	- abs ( g_qeglobals . d_savedinfo . m_nTextureTweak )
>17571	UnaryOp	- abs ( g_qeglobals . d_savedinfo . m_nTextureTweak )
>17572	CallExpression	abs ( g_qeglobals . d_savedinfo . m_nTextureTweak )
>17573	ArgumentList	g_qeglobals . d_savedinfo . m_nTextureTweak
>17574	Argument	g_qeglobals . d_savedinfo . m_nTextureTweak
>17575	MemberAccess	g_qeglobals . d_savedinfo . m_nTextureTweak
>17576	Identifier	m_nTextureTweak
>17577	MemberAccess	g_qeglobals . d_savedinfo
>17578	Identifier	d_savedinfo
>17579	Identifier	g_qeglobals
>17580	Callee	abs
>17581	Identifier	abs
>17582	UnaryOperator	-
>17583	Argument	0
>17584	PrimaryExpression	0
>17585	Callee	Select_ScaleTexture
>17586	Identifier	Select_ScaleTexture
>17594	FunctionDef	CMainFrame 
>17595	ParameterList	 
>17596	ReturnType	void
>17597	CompoundStatement	 
>17598	ExpressionStatement	 
>17599	CallExpression	Select_ScaleTexture ( 0 , abs ( g_qeglobals . d_savedinfo . m_nTextureTweak ) )
>17600	ArgumentList	0
>17601	Argument	abs ( g_qeglobals . d_savedinfo . m_nTextureTweak )
>17602	CallExpression	abs ( g_qeglobals . d_savedinfo . m_nTextureTweak )
>17603	ArgumentList	g_qeglobals . d_savedinfo . m_nTextureTweak
>17604	Argument	g_qeglobals . d_savedinfo . m_nTextureTweak
>17605	MemberAccess	g_qeglobals . d_savedinfo . m_nTextureTweak
>17606	Identifier	m_nTextureTweak
>17607	MemberAccess	g_qeglobals . d_savedinfo
>17608	Identifier	d_savedinfo
>17609	Identifier	g_qeglobals
>17610	Callee	abs
>17611	Identifier	abs
>17612	Argument	0
>17613	PrimaryExpression	0
>17614	Callee	Select_ScaleTexture
>17615	Identifier	Select_ScaleTexture
>17623	FunctionDef	CMainFrame 
>17624	ParameterList	 
>17625	ReturnType	void
>17626	CompoundStatement	 
>17627	ExpressionStatement	 
>17628	CallExpression	Select_ScaleTexture ( - abs ( g_qeglobals . d_savedinfo . m_nTextureTweak ) , 0 )
>17629	ArgumentList	- abs ( g_qeglobals . d_savedinfo . m_nTextureTweak )
>17630	Argument	0
>17631	PrimaryExpression	0
>17632	Argument	- abs ( g_qeglobals . d_savedinfo . m_nTextureTweak )
>17633	UnaryOp	- abs ( g_qeglobals . d_savedinfo . m_nTextureTweak )
>17634	CallExpression	abs ( g_qeglobals . d_savedinfo . m_nTextureTweak )
>17635	ArgumentList	g_qeglobals . d_savedinfo . m_nTextureTweak
>17636	Argument	g_qeglobals . d_savedinfo . m_nTextureTweak
>17637	MemberAccess	g_qeglobals . d_savedinfo . m_nTextureTweak
>17638	Identifier	m_nTextureTweak
>17639	MemberAccess	g_qeglobals . d_savedinfo
>17640	Identifier	d_savedinfo
>17641	Identifier	g_qeglobals
>17642	Callee	abs
>17643	Identifier	abs
>17644	UnaryOperator	-
>17645	Callee	Select_ScaleTexture
>17646	Identifier	Select_ScaleTexture
>17654	FunctionDef	CMainFrame 
>17655	ParameterList	 
>17656	ReturnType	void
>17657	CompoundStatement	 
>17658	ExpressionStatement	 
>17659	CallExpression	Select_ScaleTexture ( abs ( g_qeglobals . d_savedinfo . m_nTextureTweak ) , 0 )
>17660	ArgumentList	abs ( g_qeglobals . d_savedinfo . m_nTextureTweak )
>17661	Argument	0
>17662	PrimaryExpression	0
>17663	Argument	abs ( g_qeglobals . d_savedinfo . m_nTextureTweak )
>17664	CallExpression	abs ( g_qeglobals . d_savedinfo . m_nTextureTweak )
>17665	ArgumentList	g_qeglobals . d_savedinfo . m_nTextureTweak
>17666	Argument	g_qeglobals . d_savedinfo . m_nTextureTweak
>17667	MemberAccess	g_qeglobals . d_savedinfo . m_nTextureTweak
>17668	Identifier	m_nTextureTweak
>17669	MemberAccess	g_qeglobals . d_savedinfo
>17670	Identifier	d_savedinfo
>17671	Identifier	g_qeglobals
>17672	Callee	abs
>17673	Identifier	abs
>17674	Callee	Select_ScaleTexture
>17675	Identifier	Select_ScaleTexture
>17683	FunctionDef	CMainFrame 
>17684	ParameterList	 
>17685	ReturnType	void
>17686	CompoundStatement	 
>17687	ExpressionStatement	 
>17688	CallExpression	Select_ShiftTexture ( 0 , - abs ( g_qeglobals . d_savedinfo . m_nTextureTweak ) )
>17689	ArgumentList	0
>17690	Argument	- abs ( g_qeglobals . d_savedinfo . m_nTextureTweak )
>17691	UnaryOp	- abs ( g_qeglobals . d_savedinfo . m_nTextureTweak )
>17692	CallExpression	abs ( g_qeglobals . d_savedinfo . m_nTextureTweak )
>17693	ArgumentList	g_qeglobals . d_savedinfo . m_nTextureTweak
>17694	Argument	g_qeglobals . d_savedinfo . m_nTextureTweak
>17695	MemberAccess	g_qeglobals . d_savedinfo . m_nTextureTweak
>17696	Identifier	m_nTextureTweak
>17697	MemberAccess	g_qeglobals . d_savedinfo
>17698	Identifier	d_savedinfo
>17699	Identifier	g_qeglobals
>17700	Callee	abs
>17701	Identifier	abs
>17702	UnaryOperator	-
>17703	Argument	0
>17704	PrimaryExpression	0
>17705	Callee	Select_ShiftTexture
>17706	Identifier	Select_ShiftTexture
>17714	FunctionDef	CMainFrame 
>17715	ParameterList	 
>17716	ReturnType	void
>17717	CompoundStatement	 
>17718	ExpressionStatement	 
>17719	CallExpression	Select_ShiftTexture ( - abs ( g_qeglobals . d_savedinfo . m_nTextureTweak ) , 0 )
>17720	ArgumentList	- abs ( g_qeglobals . d_savedinfo . m_nTextureTweak )
>17721	Argument	0
>17722	PrimaryExpression	0
>17723	Argument	- abs ( g_qeglobals . d_savedinfo . m_nTextureTweak )
>17724	UnaryOp	- abs ( g_qeglobals . d_savedinfo . m_nTextureTweak )
>17725	CallExpression	abs ( g_qeglobals . d_savedinfo . m_nTextureTweak )
>17726	ArgumentList	g_qeglobals . d_savedinfo . m_nTextureTweak
>17727	Argument	g_qeglobals . d_savedinfo . m_nTextureTweak
>17728	MemberAccess	g_qeglobals . d_savedinfo . m_nTextureTweak
>17729	Identifier	m_nTextureTweak
>17730	MemberAccess	g_qeglobals . d_savedinfo
>17731	Identifier	d_savedinfo
>17732	Identifier	g_qeglobals
>17733	Callee	abs
>17734	Identifier	abs
>17735	UnaryOperator	-
>17736	Callee	Select_ShiftTexture
>17737	Identifier	Select_ShiftTexture
>17745	FunctionDef	CMainFrame 
>17746	ParameterList	 
>17747	ReturnType	void
>17748	CompoundStatement	 
>17749	ExpressionStatement	 
>17750	CallExpression	Select_ShiftTexture ( abs ( g_qeglobals . d_savedinfo . m_nTextureTweak ) , 0 )
>17751	ArgumentList	abs ( g_qeglobals . d_savedinfo . m_nTextureTweak )
>17752	Argument	0
>17753	PrimaryExpression	0
>17754	Argument	abs ( g_qeglobals . d_savedinfo . m_nTextureTweak )
>17755	CallExpression	abs ( g_qeglobals . d_savedinfo . m_nTextureTweak )
>17756	ArgumentList	g_qeglobals . d_savedinfo . m_nTextureTweak
>17757	Argument	g_qeglobals . d_savedinfo . m_nTextureTweak
>17758	MemberAccess	g_qeglobals . d_savedinfo . m_nTextureTweak
>17759	Identifier	m_nTextureTweak
>17760	MemberAccess	g_qeglobals . d_savedinfo
>17761	Identifier	d_savedinfo
>17762	Identifier	g_qeglobals
>17763	Callee	abs
>17764	Identifier	abs
>17765	Callee	Select_ShiftTexture
>17766	Identifier	Select_ShiftTexture
>17774	FunctionDef	CMainFrame 
>17775	ParameterList	 
>17776	ReturnType	void
>17777	CompoundStatement	 
>17778	ExpressionStatement	 
>17779	CallExpression	Select_ShiftTexture ( 0 , abs ( g_qeglobals . d_savedinfo . m_nTextureTweak ) )
>17780	ArgumentList	0
>17781	Argument	abs ( g_qeglobals . d_savedinfo . m_nTextureTweak )
>17782	CallExpression	abs ( g_qeglobals . d_savedinfo . m_nTextureTweak )
>17783	ArgumentList	g_qeglobals . d_savedinfo . m_nTextureTweak
>17784	Argument	g_qeglobals . d_savedinfo . m_nTextureTweak
>17785	MemberAccess	g_qeglobals . d_savedinfo . m_nTextureTweak
>17786	Identifier	m_nTextureTweak
>17787	MemberAccess	g_qeglobals . d_savedinfo
>17788	Identifier	d_savedinfo
>17789	Identifier	g_qeglobals
>17790	Callee	abs
>17791	Identifier	abs
>17792	Argument	0
>17793	PrimaryExpression	0
>17794	Callee	Select_ShiftTexture
>17795	Identifier	Select_ShiftTexture
>17803	FunctionDef	CMainFrame 
>17804	ParameterList	 
>17805	ReturnType	void
>17806	CompoundStatement	 
>17807	IfStatement	if ( g_qeglobals . d_gridsize < 64 )
>17808	CompoundStatement	 
>17809	ExpressionStatement	 
>17810	CallExpression	CheckMenuItem ( hMenu , nID , MF_BYCOMMAND | MF_CHECKED )
>17811	ArgumentList	hMenu
>17812	Argument	MF_BYCOMMAND | MF_CHECKED
>17813	InclusiveOrExpression	MF_BYCOMMAND | MF_CHECKED
>17814	Identifier	MF_CHECKED
>17815	Identifier	MF_BYCOMMAND
>17816	Argument	nID
>17817	Identifier	nID
>17818	Argument	hMenu
>17819	Identifier	hMenu
>17820	Callee	CheckMenuItem
>17821	Identifier	CheckMenuItem
>17822	SwitchStatement	switch ( g_qeglobals . d_gridsize )
>17823	CompoundStatement	 
>17824	BreakStatement	 
>17825	ExpressionStatement	 
>17826	AssignmentExpr	nID = ID_GRID_64
>17827	Identifier	ID_GRID_64
>17828	Identifier	nID
>17829	Label	 
>17830	BreakStatement	 
>17831	ExpressionStatement	 
>17832	AssignmentExpr	nID = ID_GRID_32
>17833	Identifier	ID_GRID_32
>17834	Identifier	nID
>17835	Label	 
>17836	BreakStatement	 
>17837	ExpressionStatement	 
>17838	AssignmentExpr	nID = ID_GRID_16
>17839	Identifier	ID_GRID_16
>17840	Identifier	nID
>17841	Label	 
>17842	BreakStatement	 
>17843	ExpressionStatement	 
>17844	AssignmentExpr	nID = ID_GRID_8
>17845	Identifier	ID_GRID_8
>17846	Identifier	nID
>17847	Label	 
>17848	BreakStatement	 
>17849	ExpressionStatement	 
>17850	AssignmentExpr	nID = ID_GRID_4
>17851	Identifier	ID_GRID_4
>17852	Identifier	nID
>17853	Label	 
>17854	BreakStatement	 
>17855	ExpressionStatement	 
>17856	AssignmentExpr	nID = ID_GRID_2
>17857	Identifier	ID_GRID_2
>17858	Identifier	nID
>17859	Label	 
>17860	BreakStatement	 
>17861	ExpressionStatement	 
>17862	AssignmentExpr	nID = ID_GRID_1
>17863	Identifier	ID_GRID_1
>17864	Identifier	nID
>17865	Label	 
>17866	Condition	 
>17867	MemberAccess	g_qeglobals . d_gridsize
>17868	Identifier	d_gridsize
>17869	Identifier	g_qeglobals
>17870	IdentifierDeclStatement	 
>17871	IdentifierDecl	nID
>17872	Identifier	nID
>17873	IdentifierDeclType	int
>17874	ExpressionStatement	 
>17875	CallExpression	CheckMenuItem ( hMenu , ID_GRID_64 , MF_BYCOMMAND | MF_UNCHECKED )
>17876	ArgumentList	hMenu
>17877	Argument	MF_BYCOMMAND | MF_UNCHECKED
>17878	InclusiveOrExpression	MF_BYCOMMAND | MF_UNCHECKED
>17879	Identifier	MF_UNCHECKED
>17880	Identifier	MF_BYCOMMAND
>17881	Argument	ID_GRID_64
>17882	Identifier	ID_GRID_64
>17883	Argument	hMenu
>17884	Identifier	hMenu
>17885	Callee	CheckMenuItem
>17886	Identifier	CheckMenuItem
>17887	ExpressionStatement	 
>17888	CallExpression	CheckMenuItem ( hMenu , ID_GRID_32 , MF_BYCOMMAND | MF_UNCHECKED )
>17889	ArgumentList	hMenu
>17890	Argument	MF_BYCOMMAND | MF_UNCHECKED
>17891	InclusiveOrExpression	MF_BYCOMMAND | MF_UNCHECKED
>17892	Identifier	MF_UNCHECKED
>17893	Identifier	MF_BYCOMMAND
>17894	Argument	ID_GRID_32
>17895	Identifier	ID_GRID_32
>17896	Argument	hMenu
>17897	Identifier	hMenu
>17898	Callee	CheckMenuItem
>17899	Identifier	CheckMenuItem
>17900	ExpressionStatement	 
>17901	CallExpression	CheckMenuItem ( hMenu , ID_GRID_16 , MF_BYCOMMAND | MF_UNCHECKED )
>17902	ArgumentList	hMenu
>17903	Argument	MF_BYCOMMAND | MF_UNCHECKED
>17904	InclusiveOrExpression	MF_BYCOMMAND | MF_UNCHECKED
>17905	Identifier	MF_UNCHECKED
>17906	Identifier	MF_BYCOMMAND
>17907	Argument	ID_GRID_16
>17908	Identifier	ID_GRID_16
>17909	Argument	hMenu
>17910	Identifier	hMenu
>17911	Callee	CheckMenuItem
>17912	Identifier	CheckMenuItem
>17913	ExpressionStatement	 
>17914	CallExpression	CheckMenuItem ( hMenu , ID_GRID_8 , MF_BYCOMMAND | MF_UNCHECKED )
>17915	ArgumentList	hMenu
>17916	Argument	MF_BYCOMMAND | MF_UNCHECKED
>17917	InclusiveOrExpression	MF_BYCOMMAND | MF_UNCHECKED
>17918	Identifier	MF_UNCHECKED
>17919	Identifier	MF_BYCOMMAND
>17920	Argument	ID_GRID_8
>17921	Identifier	ID_GRID_8
>17922	Argument	hMenu
>17923	Identifier	hMenu
>17924	Callee	CheckMenuItem
>17925	Identifier	CheckMenuItem
>17926	ExpressionStatement	 
>17927	CallExpression	CheckMenuItem ( hMenu , ID_GRID_4 , MF_BYCOMMAND | MF_UNCHECKED )
>17928	ArgumentList	hMenu
>17929	Argument	MF_BYCOMMAND | MF_UNCHECKED
>17930	InclusiveOrExpression	MF_BYCOMMAND | MF_UNCHECKED
>17931	Identifier	MF_UNCHECKED
>17932	Identifier	MF_BYCOMMAND
>17933	Argument	ID_GRID_4
>17934	Identifier	ID_GRID_4
>17935	Argument	hMenu
>17936	Identifier	hMenu
>17937	Callee	CheckMenuItem
>17938	Identifier	CheckMenuItem
>17939	ExpressionStatement	 
>17940	CallExpression	CheckMenuItem ( hMenu , ID_GRID_2 , MF_BYCOMMAND | MF_UNCHECKED )
>17941	ArgumentList	hMenu
>17942	Argument	MF_BYCOMMAND | MF_UNCHECKED
>17943	InclusiveOrExpression	MF_BYCOMMAND | MF_UNCHECKED
>17944	Identifier	MF_UNCHECKED
>17945	Identifier	MF_BYCOMMAND
>17946	Argument	ID_GRID_2
>17947	Identifier	ID_GRID_2
>17948	Argument	hMenu
>17949	Identifier	hMenu
>17950	Callee	CheckMenuItem
>17951	Identifier	CheckMenuItem
>17952	ExpressionStatement	 
>17953	CallExpression	CheckMenuItem ( hMenu , ID_GRID_1 , MF_BYCOMMAND | MF_UNCHECKED )
>17954	ArgumentList	hMenu
>17955	Argument	MF_BYCOMMAND | MF_UNCHECKED
>17956	InclusiveOrExpression	MF_BYCOMMAND | MF_UNCHECKED
>17957	Identifier	MF_UNCHECKED
>17958	Identifier	MF_BYCOMMAND
>17959	Argument	ID_GRID_1
>17960	Identifier	ID_GRID_1
>17961	Argument	hMenu
>17962	Identifier	hMenu
>17963	Callee	CheckMenuItem
>17964	Identifier	CheckMenuItem
>17965	ExpressionStatement	 
>17966	CallExpression	GetMenu ( GetSafeHwnd ( ) )
>17967	ArgumentList	GetSafeHwnd ( )
>17968	Argument	GetSafeHwnd ( )
>17969	CallExpression	GetSafeHwnd ( )
>17970	ArgumentList	 
>17971	Callee	GetSafeHwnd
>17972	Identifier	GetSafeHwnd
>17973	Callee	GetMenu
>17974	Identifier	GetMenu
>17975	Statement	 
>17976	Statement	 
>17977	Statement	 
>17978	Statement	 
>17979	ExpressionStatement	 
>17980	CallExpression	SetGridStatus ( )
>17981	ArgumentList	 
>17982	Callee	SetGridStatus
>17983	Identifier	SetGridStatus
>17984	ExpressionStatement	 
>17985	CallExpression	Sys_UpdateWindows ( W_XY | W_Z )
>17986	ArgumentList	W_XY | W_Z
>17987	Argument	W_XY | W_Z
>17988	InclusiveOrExpression	W_XY | W_Z
>17989	Identifier	W_Z
>17990	Identifier	W_XY
>17991	Callee	Sys_UpdateWindows
>17992	Identifier	Sys_UpdateWindows
>17993	ExpressionStatement	 
>17994	AssignmentExpr	g_qeglobals . d_gridsize = g_qeglobals . d_gridsize << 1
>17995	ShiftExpression	g_qeglobals . d_gridsize << 1
>17996	PrimaryExpression	1
>17997	MemberAccess	g_qeglobals . d_gridsize
>17998	Identifier	d_gridsize
>17999	Identifier	g_qeglobals
>18000	MemberAccess	g_qeglobals . d_gridsize
>18001	Identifier	d_gridsize
>18002	Identifier	g_qeglobals
>18003	Condition	 
>18004	RelationalExpression	g_qeglobals . d_gridsize < 64
>18005	PrimaryExpression	64
>18006	MemberAccess	g_qeglobals . d_gridsize
>18007	Identifier	d_gridsize
>18008	Identifier	g_qeglobals
>18029	FunctionDef	CMainFrame 
>18030	ParameterList	 
>18031	ReturnType	void
>18032	CompoundStatement	 
>18033	IfStatement	if ( g_qeglobals . d_gridsize > 1 )
>18034	CompoundStatement	 
>18035	ExpressionStatement	 
>18036	CallExpression	CheckMenuItem ( hMenu , nID , MF_BYCOMMAND | MF_CHECKED )
>18037	ArgumentList	hMenu
>18038	Argument	MF_BYCOMMAND | MF_CHECKED
>18039	InclusiveOrExpression	MF_BYCOMMAND | MF_CHECKED
>18040	Identifier	MF_CHECKED
>18041	Identifier	MF_BYCOMMAND
>18042	Argument	nID
>18043	Identifier	nID
>18044	Argument	hMenu
>18045	Identifier	hMenu
>18046	Callee	CheckMenuItem
>18047	Identifier	CheckMenuItem
>18048	SwitchStatement	switch ( g_qeglobals . d_gridsize )
>18049	CompoundStatement	 
>18050	BreakStatement	 
>18051	ExpressionStatement	 
>18052	AssignmentExpr	nID = ID_GRID_64
>18053	Identifier	ID_GRID_64
>18054	Identifier	nID
>18055	Label	 
>18056	BreakStatement	 
>18057	ExpressionStatement	 
>18058	AssignmentExpr	nID = ID_GRID_32
>18059	Identifier	ID_GRID_32
>18060	Identifier	nID
>18061	Label	 
>18062	BreakStatement	 
>18063	ExpressionStatement	 
>18064	AssignmentExpr	nID = ID_GRID_16
>18065	Identifier	ID_GRID_16
>18066	Identifier	nID
>18067	Label	 
>18068	BreakStatement	 
>18069	ExpressionStatement	 
>18070	AssignmentExpr	nID = ID_GRID_8
>18071	Identifier	ID_GRID_8
>18072	Identifier	nID
>18073	Label	 
>18074	BreakStatement	 
>18075	ExpressionStatement	 
>18076	AssignmentExpr	nID = ID_GRID_4
>18077	Identifier	ID_GRID_4
>18078	Identifier	nID
>18079	Label	 
>18080	BreakStatement	 
>18081	ExpressionStatement	 
>18082	AssignmentExpr	nID = ID_GRID_2
>18083	Identifier	ID_GRID_2
>18084	Identifier	nID
>18085	Label	 
>18086	BreakStatement	 
>18087	ExpressionStatement	 
>18088	AssignmentExpr	nID = ID_GRID_1
>18089	Identifier	ID_GRID_1
>18090	Identifier	nID
>18091	Label	 
>18092	Condition	 
>18093	MemberAccess	g_qeglobals . d_gridsize
>18094	Identifier	d_gridsize
>18095	Identifier	g_qeglobals
>18096	IdentifierDeclStatement	 
>18097	IdentifierDecl	nID
>18098	Identifier	nID
>18099	IdentifierDeclType	int
>18100	ExpressionStatement	 
>18101	CallExpression	CheckMenuItem ( hMenu , ID_GRID_64 , MF_BYCOMMAND | MF_UNCHECKED )
>18102	ArgumentList	hMenu
>18103	Argument	MF_BYCOMMAND | MF_UNCHECKED
>18104	InclusiveOrExpression	MF_BYCOMMAND | MF_UNCHECKED
>18105	Identifier	MF_UNCHECKED
>18106	Identifier	MF_BYCOMMAND
>18107	Argument	ID_GRID_64
>18108	Identifier	ID_GRID_64
>18109	Argument	hMenu
>18110	Identifier	hMenu
>18111	Callee	CheckMenuItem
>18112	Identifier	CheckMenuItem
>18113	ExpressionStatement	 
>18114	CallExpression	CheckMenuItem ( hMenu , ID_GRID_32 , MF_BYCOMMAND | MF_UNCHECKED )
>18115	ArgumentList	hMenu
>18116	Argument	MF_BYCOMMAND | MF_UNCHECKED
>18117	InclusiveOrExpression	MF_BYCOMMAND | MF_UNCHECKED
>18118	Identifier	MF_UNCHECKED
>18119	Identifier	MF_BYCOMMAND
>18120	Argument	ID_GRID_32
>18121	Identifier	ID_GRID_32
>18122	Argument	hMenu
>18123	Identifier	hMenu
>18124	Callee	CheckMenuItem
>18125	Identifier	CheckMenuItem
>18126	ExpressionStatement	 
>18127	CallExpression	CheckMenuItem ( hMenu , ID_GRID_16 , MF_BYCOMMAND | MF_UNCHECKED )
>18128	ArgumentList	hMenu
>18129	Argument	MF_BYCOMMAND | MF_UNCHECKED
>18130	InclusiveOrExpression	MF_BYCOMMAND | MF_UNCHECKED
>18131	Identifier	MF_UNCHECKED
>18132	Identifier	MF_BYCOMMAND
>18133	Argument	ID_GRID_16
>18134	Identifier	ID_GRID_16
>18135	Argument	hMenu
>18136	Identifier	hMenu
>18137	Callee	CheckMenuItem
>18138	Identifier	CheckMenuItem
>18139	ExpressionStatement	 
>18140	CallExpression	CheckMenuItem ( hMenu , ID_GRID_8 , MF_BYCOMMAND | MF_UNCHECKED )
>18141	ArgumentList	hMenu
>18142	Argument	MF_BYCOMMAND | MF_UNCHECKED
>18143	InclusiveOrExpression	MF_BYCOMMAND | MF_UNCHECKED
>18144	Identifier	MF_UNCHECKED
>18145	Identifier	MF_BYCOMMAND
>18146	Argument	ID_GRID_8
>18147	Identifier	ID_GRID_8
>18148	Argument	hMenu
>18149	Identifier	hMenu
>18150	Callee	CheckMenuItem
>18151	Identifier	CheckMenuItem
>18152	ExpressionStatement	 
>18153	CallExpression	CheckMenuItem ( hMenu , ID_GRID_4 , MF_BYCOMMAND | MF_UNCHECKED )
>18154	ArgumentList	hMenu
>18155	Argument	MF_BYCOMMAND | MF_UNCHECKED
>18156	InclusiveOrExpression	MF_BYCOMMAND | MF_UNCHECKED
>18157	Identifier	MF_UNCHECKED
>18158	Identifier	MF_BYCOMMAND
>18159	Argument	ID_GRID_4
>18160	Identifier	ID_GRID_4
>18161	Argument	hMenu
>18162	Identifier	hMenu
>18163	Callee	CheckMenuItem
>18164	Identifier	CheckMenuItem
>18165	ExpressionStatement	 
>18166	CallExpression	CheckMenuItem ( hMenu , ID_GRID_2 , MF_BYCOMMAND | MF_UNCHECKED )
>18167	ArgumentList	hMenu
>18168	Argument	MF_BYCOMMAND | MF_UNCHECKED
>18169	InclusiveOrExpression	MF_BYCOMMAND | MF_UNCHECKED
>18170	Identifier	MF_UNCHECKED
>18171	Identifier	MF_BYCOMMAND
>18172	Argument	ID_GRID_2
>18173	Identifier	ID_GRID_2
>18174	Argument	hMenu
>18175	Identifier	hMenu
>18176	Callee	CheckMenuItem
>18177	Identifier	CheckMenuItem
>18178	ExpressionStatement	 
>18179	CallExpression	CheckMenuItem ( hMenu , ID_GRID_1 , MF_BYCOMMAND | MF_UNCHECKED )
>18180	ArgumentList	hMenu
>18181	Argument	MF_BYCOMMAND | MF_UNCHECKED
>18182	InclusiveOrExpression	MF_BYCOMMAND | MF_UNCHECKED
>18183	Identifier	MF_UNCHECKED
>18184	Identifier	MF_BYCOMMAND
>18185	Argument	ID_GRID_1
>18186	Identifier	ID_GRID_1
>18187	Argument	hMenu
>18188	Identifier	hMenu
>18189	Callee	CheckMenuItem
>18190	Identifier	CheckMenuItem
>18191	ExpressionStatement	 
>18192	CallExpression	GetMenu ( GetSafeHwnd ( ) )
>18193	ArgumentList	GetSafeHwnd ( )
>18194	Argument	GetSafeHwnd ( )
>18195	CallExpression	GetSafeHwnd ( )
>18196	ArgumentList	 
>18197	Callee	GetSafeHwnd
>18198	Identifier	GetSafeHwnd
>18199	Callee	GetMenu
>18200	Identifier	GetMenu
>18201	Statement	 
>18202	Statement	 
>18203	Statement	 
>18204	Statement	 
>18205	ExpressionStatement	 
>18206	CallExpression	SetGridStatus ( )
>18207	ArgumentList	 
>18208	Callee	SetGridStatus
>18209	Identifier	SetGridStatus
>18210	ExpressionStatement	 
>18211	CallExpression	Sys_UpdateWindows ( W_XY | W_Z )
>18212	ArgumentList	W_XY | W_Z
>18213	Argument	W_XY | W_Z
>18214	InclusiveOrExpression	W_XY | W_Z
>18215	Identifier	W_Z
>18216	Identifier	W_XY
>18217	Callee	Sys_UpdateWindows
>18218	Identifier	Sys_UpdateWindows
>18219	ExpressionStatement	 
>18220	AssignmentExpr	g_qeglobals . d_gridsize = g_qeglobals . d_gridsize >> 1
>18221	ShiftExpression	g_qeglobals . d_gridsize >> 1
>18222	PrimaryExpression	1
>18223	MemberAccess	g_qeglobals . d_gridsize
>18224	Identifier	d_gridsize
>18225	Identifier	g_qeglobals
>18226	MemberAccess	g_qeglobals . d_gridsize
>18227	Identifier	d_gridsize
>18228	Identifier	g_qeglobals
>18229	Condition	 
>18230	RelationalExpression	g_qeglobals . d_gridsize > 1
>18231	PrimaryExpression	1
>18232	MemberAccess	g_qeglobals . d_gridsize
>18233	Identifier	d_gridsize
>18234	Identifier	g_qeglobals
>18255	FunctionDef	CMainFrame 
>18256	ParameterList	 
>18257	ReturnType	void
>18258	CompoundStatement	 
>18259	ExpressionStatement	 
>18260	CallExpression	SetStatusText ( 4 , strStatus )
>18261	ArgumentList	4
>18262	Argument	strStatus
>18263	Identifier	strStatus
>18264	Argument	4
>18265	PrimaryExpression	4
>18266	Callee	SetStatusText
>18267	Identifier	SetStatusText
>18268	ExpressionStatement	 
>18269	CallExpression	strStatus . Format ( \"G
>18270	ArgumentList	\"G
>18271	Argument	c2
>18272	Identifier	c2
>18273	Argument	c1
>18274	Identifier	c1
>18275	Argument	g_PrefsDlg . m_nCubicScale
>18276	MemberAccess	g_PrefsDlg . m_nCubicScale
>18277	Identifier	m_nCubicScale
>18278	Identifier	g_PrefsDlg
>18279	Argument	g_PrefsDlg . m_nRotation
>18280	MemberAccess	g_PrefsDlg . m_nRotation
>18281	Identifier	m_nRotation
>18282	Identifier	g_PrefsDlg
>18283	Argument	g_qeglobals . d_savedinfo . m_nTextureTweak
>18284	MemberAccess	g_qeglobals . d_savedinfo . m_nTextureTweak
>18285	Identifier	m_nTextureTweak
>18286	MemberAccess	g_qeglobals . d_savedinfo
>18287	Identifier	d_savedinfo
>18288	Identifier	g_qeglobals
>18289	Argument	g_qeglobals . d_gridsize
>18290	MemberAccess	g_qeglobals . d_gridsize
>18291	Identifier	d_gridsize
>18292	Identifier	g_qeglobals
>18293	Argument	\"G
>18294	PrimaryExpression	\"G
>18295	Callee	strStatus . Format
>18296	MemberAccess	strStatus . Format
>18297	Identifier	Format
>18298	Identifier	strStatus
>18299	ExpressionStatement	 
>18300	AssignmentExpr	c2 = ( g_PrefsDlg . m_bRotateLock ) ? 'R' 
>18301	ConditionalExpression	( g_PrefsDlg . m_bRotateLock ) ? 'R' 
>18302	PrimaryExpression	' '
>18303	PrimaryExpression	'R'
>18304	Condition	g_PrefsDlg . m_bRotateLock
>18305	MemberAccess	g_PrefsDlg . m_bRotateLock
>18306	Identifier	m_bRotateLock
>18307	Identifier	g_PrefsDlg
>18308	Identifier	c2
>18309	ExpressionStatement	 
>18310	AssignmentExpr	c1 = ( g_PrefsDlg . m_bTextureLock ) ? 'M' 
>18311	ConditionalExpression	( g_PrefsDlg . m_bTextureLock ) ? 'M' 
>18312	PrimaryExpression	' '
>18313	PrimaryExpression	'M'
>18314	Condition	g_PrefsDlg . m_bTextureLock
>18315	MemberAccess	g_PrefsDlg . m_bTextureLock
>18316	Identifier	m_bTextureLock
>18317	Identifier	g_PrefsDlg
>18318	Identifier	c1
>18319	IdentifierDeclStatement	 
>18320	IdentifierDecl	c2
>18321	Identifier	c2
>18322	IdentifierDeclType	char
>18323	IdentifierDeclStatement	 
>18324	IdentifierDecl	c1
>18325	Identifier	c1
>18326	IdentifierDeclType	char
>18327	IdentifierDeclStatement	 
>18328	IdentifierDecl	strStatus
>18329	Identifier	strStatus
>18330	IdentifierDeclType	CString
>18346	FunctionDef	CMainFrame 
>18347	ParameterList	 
>18348	ReturnType	void
>18349	CompoundStatement	 
>18350	ExpressionStatement	 
>18351	CallExpression	SetGridStatus ( )
>18352	ArgumentList	 
>18353	Callee	SetGridStatus
>18354	Identifier	SetGridStatus
>18358	FunctionDef	CMainFrame 
>18359	ParameterList	 
>18360	ReturnType	void
>18361	CompoundStatement	 
>18362	ExpressionStatement	 
>18363	CallExpression	CFindTextureDlg 
>18364	ArgumentList	 
>18365	Callee	CFindTextureDlg 
>18366	Identifier	CFindTextureDlg 
>18370	FunctionDef	CMainFrame 
>18371	ParameterList	 
>18372	ReturnType	void
>18373	CompoundStatement	 
>18374	IfStatement	if ( g_nScaleHow & SCALE_X )
>18375	ElseStatement	else
>18376	CompoundStatement	 
>18377	ExpressionStatement	 
>18378	CallExpression	m_wndToolBar . GetToolBarCtrl ( ) . CheckButton ( ID_SCALELOCKX )
>18379	ArgumentList	ID_SCALELOCKX
>18380	Argument	ID_SCALELOCKX
>18381	Identifier	ID_SCALELOCKX
>18382	Callee	m_wndToolBar . GetToolBarCtrl ( ) . CheckButton
>18383	MemberAccess	m_wndToolBar . GetToolBarCtrl ( ) . CheckButton
>18384	Identifier	CheckButton
>18385	CallExpression	m_wndToolBar . GetToolBarCtrl ( )
>18386	ArgumentList	 
>18387	Callee	m_wndToolBar . GetToolBarCtrl
>18388	MemberAccess	m_wndToolBar . GetToolBarCtrl
>18389	Identifier	GetToolBarCtrl
>18390	Identifier	m_wndToolBar
>18391	ExpressionStatement	 
>18392	AssignmentExpr	g_nScaleHow |= SCALE_X
>18393	Identifier	SCALE_X
>18394	Identifier	g_nScaleHow
>18395	CompoundStatement	 
>18396	ExpressionStatement	 
>18397	CallExpression	m_wndToolBar . GetToolBarCtrl ( ) . CheckButton ( ID_SCALELOCKX , FALSE )
>18398	ArgumentList	ID_SCALELOCKX
>18399	Argument	FALSE
>18400	Identifier	FALSE
>18401	Argument	ID_SCALELOCKX
>18402	Identifier	ID_SCALELOCKX
>18403	Callee	m_wndToolBar . GetToolBarCtrl ( ) . CheckButton
>18404	MemberAccess	m_wndToolBar . GetToolBarCtrl ( ) . CheckButton
>18405	Identifier	CheckButton
>18406	CallExpression	m_wndToolBar . GetToolBarCtrl ( )
>18407	ArgumentList	 
>18408	Callee	m_wndToolBar . GetToolBarCtrl
>18409	MemberAccess	m_wndToolBar . GetToolBarCtrl
>18410	Identifier	GetToolBarCtrl
>18411	Identifier	m_wndToolBar
>18412	ExpressionStatement	 
>18413	AssignmentExpr	g_nScaleHow ^= SCALE_X
>18414	Identifier	SCALE_X
>18415	Identifier	g_nScaleHow
>18416	Condition	 
>18417	BitAndExpression	g_nScaleHow & SCALE_X
>18418	Identifier	SCALE_X
>18419	Identifier	g_nScaleHow
>18429	FunctionDef	CMainFrame 
>18430	ParameterList	 
>18431	ReturnType	void
>18432	CompoundStatement	 
>18433	IfStatement	if ( g_nScaleHow & SCALE_Y )
>18434	ElseStatement	else
>18435	CompoundStatement	 
>18436	ExpressionStatement	 
>18437	CallExpression	m_wndToolBar . GetToolBarCtrl ( ) . CheckButton ( ID_SCALELOCKY )
>18438	ArgumentList	ID_SCALELOCKY
>18439	Argument	ID_SCALELOCKY
>18440	Identifier	ID_SCALELOCKY
>18441	Callee	m_wndToolBar . GetToolBarCtrl ( ) . CheckButton
>18442	MemberAccess	m_wndToolBar . GetToolBarCtrl ( ) . CheckButton
>18443	Identifier	CheckButton
>18444	CallExpression	m_wndToolBar . GetToolBarCtrl ( )
>18445	ArgumentList	 
>18446	Callee	m_wndToolBar . GetToolBarCtrl
>18447	MemberAccess	m_wndToolBar . GetToolBarCtrl
>18448	Identifier	GetToolBarCtrl
>18449	Identifier	m_wndToolBar
>18450	ExpressionStatement	 
>18451	AssignmentExpr	g_nScaleHow |= SCALE_Y
>18452	Identifier	SCALE_Y
>18453	Identifier	g_nScaleHow
>18454	CompoundStatement	 
>18455	ExpressionStatement	 
>18456	CallExpression	m_wndToolBar . GetToolBarCtrl ( ) . CheckButton ( ID_SCALELOCKY , FALSE )
>18457	ArgumentList	ID_SCALELOCKY
>18458	Argument	FALSE
>18459	Identifier	FALSE
>18460	Argument	ID_SCALELOCKY
>18461	Identifier	ID_SCALELOCKY
>18462	Callee	m_wndToolBar . GetToolBarCtrl ( ) . CheckButton
>18463	MemberAccess	m_wndToolBar . GetToolBarCtrl ( ) . CheckButton
>18464	Identifier	CheckButton
>18465	CallExpression	m_wndToolBar . GetToolBarCtrl ( )
>18466	ArgumentList	 
>18467	Callee	m_wndToolBar . GetToolBarCtrl
>18468	MemberAccess	m_wndToolBar . GetToolBarCtrl
>18469	Identifier	GetToolBarCtrl
>18470	Identifier	m_wndToolBar
>18471	ExpressionStatement	 
>18472	AssignmentExpr	g_nScaleHow ^= SCALE_Y
>18473	Identifier	SCALE_Y
>18474	Identifier	g_nScaleHow
>18475	Condition	 
>18476	BitAndExpression	g_nScaleHow & SCALE_Y
>18477	Identifier	SCALE_Y
>18478	Identifier	g_nScaleHow
>18488	FunctionDef	CMainFrame 
>18489	ParameterList	 
>18490	ReturnType	void
>18491	CompoundStatement	 
>18492	IfStatement	if ( g_nScaleHow & SCALE_Z )
>18493	ElseStatement	else
>18494	CompoundStatement	 
>18495	ExpressionStatement	 
>18496	CallExpression	m_wndToolBar . GetToolBarCtrl ( ) . CheckButton ( ID_SCALELOCKZ )
>18497	ArgumentList	ID_SCALELOCKZ
>18498	Argument	ID_SCALELOCKZ
>18499	Identifier	ID_SCALELOCKZ
>18500	Callee	m_wndToolBar . GetToolBarCtrl ( ) . CheckButton
>18501	MemberAccess	m_wndToolBar . GetToolBarCtrl ( ) . CheckButton
>18502	Identifier	CheckButton
>18503	CallExpression	m_wndToolBar . GetToolBarCtrl ( )
>18504	ArgumentList	 
>18505	Callee	m_wndToolBar . GetToolBarCtrl
>18506	MemberAccess	m_wndToolBar . GetToolBarCtrl
>18507	Identifier	GetToolBarCtrl
>18508	Identifier	m_wndToolBar
>18509	ExpressionStatement	 
>18510	AssignmentExpr	g_nScaleHow |= SCALE_Z
>18511	Identifier	SCALE_Z
>18512	Identifier	g_nScaleHow
>18513	CompoundStatement	 
>18514	ExpressionStatement	 
>18515	CallExpression	m_wndToolBar . GetToolBarCtrl ( ) . CheckButton ( ID_SCALELOCKZ , FALSE )
>18516	ArgumentList	ID_SCALELOCKZ
>18517	Argument	FALSE
>18518	Identifier	FALSE
>18519	Argument	ID_SCALELOCKZ
>18520	Identifier	ID_SCALELOCKZ
>18521	Callee	m_wndToolBar . GetToolBarCtrl ( ) . CheckButton
>18522	MemberAccess	m_wndToolBar . GetToolBarCtrl ( ) . CheckButton
>18523	Identifier	CheckButton
>18524	CallExpression	m_wndToolBar . GetToolBarCtrl ( )
>18525	ArgumentList	 
>18526	Callee	m_wndToolBar . GetToolBarCtrl
>18527	MemberAccess	m_wndToolBar . GetToolBarCtrl
>18528	Identifier	GetToolBarCtrl
>18529	Identifier	m_wndToolBar
>18530	ExpressionStatement	 
>18531	AssignmentExpr	g_nScaleHow ^= SCALE_Z
>18532	Identifier	SCALE_Z
>18533	Identifier	g_nScaleHow
>18534	Condition	 
>18535	BitAndExpression	g_nScaleHow & SCALE_Z
>18536	Identifier	SCALE_Z
>18537	Identifier	g_nScaleHow
>18547	FunctionDef	CMainFrame 
>18548	ParameterList	 
>18549	ReturnType	void
>18550	CompoundStatement	 
>18551	IfStatement	if ( ActiveXY ( ) )
>18552	CompoundStatement	 
>18553	IfStatement	if ( ActiveXY ( ) -> ScaleMode ( ) )
>18554	ElseStatement	else
>18555	CompoundStatement	 
>18556	ExpressionStatement	 
>18557	CallExpression	m_wndToolBar . GetToolBarCtrl ( ) . CheckButton ( ID_SELECT_MOUSESCALE )
>18558	ArgumentList	ID_SELECT_MOUSESCALE
>18559	Argument	ID_SELECT_MOUSESCALE
>18560	Identifier	ID_SELECT_MOUSESCALE
>18561	Callee	m_wndToolBar . GetToolBarCtrl ( ) . CheckButton
>18562	MemberAccess	m_wndToolBar . GetToolBarCtrl ( ) . CheckButton
>18563	Identifier	CheckButton
>18564	CallExpression	m_wndToolBar . GetToolBarCtrl ( )
>18565	ArgumentList	 
>18566	Callee	m_wndToolBar . GetToolBarCtrl
>18567	MemberAccess	m_wndToolBar . GetToolBarCtrl
>18568	Identifier	GetToolBarCtrl
>18569	Identifier	m_wndToolBar
>18570	ExpressionStatement	 
>18571	CallExpression	ActiveXY ( ) -> SetScaleMode ( true )
>18572	ArgumentList	true
>18573	Argument	true
>18574	Identifier	true
>18575	Callee	ActiveXY ( ) -> SetScaleMode
>18576	PtrMemberAccess	ActiveXY ( ) -> SetScaleMode
>18577	Identifier	SetScaleMode
>18578	CallExpression	ActiveXY ( )
>18579	ArgumentList	 
>18580	Callee	ActiveXY
>18581	Identifier	ActiveXY
>18582	CompoundStatement	 
>18583	ExpressionStatement	 
>18584	CallExpression	m_wndToolBar . GetToolBarCtrl ( ) . CheckButton ( ID_SELECT_MOUSESCALE , FALSE )
>18585	ArgumentList	ID_SELECT_MOUSESCALE
>18586	Argument	FALSE
>18587	Identifier	FALSE
>18588	Argument	ID_SELECT_MOUSESCALE
>18589	Identifier	ID_SELECT_MOUSESCALE
>18590	Callee	m_wndToolBar . GetToolBarCtrl ( ) . CheckButton
>18591	MemberAccess	m_wndToolBar . GetToolBarCtrl ( ) . CheckButton
>18592	Identifier	CheckButton
>18593	CallExpression	m_wndToolBar . GetToolBarCtrl ( )
>18594	ArgumentList	 
>18595	Callee	m_wndToolBar . GetToolBarCtrl
>18596	MemberAccess	m_wndToolBar . GetToolBarCtrl
>18597	Identifier	GetToolBarCtrl
>18598	Identifier	m_wndToolBar
>18599	ExpressionStatement	 
>18600	CallExpression	ActiveXY ( ) -> SetScaleMode ( false )
>18601	ArgumentList	false
>18602	Argument	false
>18603	Identifier	false
>18604	Callee	ActiveXY ( ) -> SetScaleMode
>18605	PtrMemberAccess	ActiveXY ( ) -> SetScaleMode
>18606	Identifier	SetScaleMode
>18607	CallExpression	ActiveXY ( )
>18608	ArgumentList	 
>18609	Callee	ActiveXY
>18610	Identifier	ActiveXY
>18611	Condition	 
>18612	CallExpression	ActiveXY ( ) -> ScaleMode ( )
>18613	ArgumentList	 
>18614	Callee	ActiveXY ( ) -> ScaleMode
>18615	PtrMemberAccess	ActiveXY ( ) -> ScaleMode
>18616	Identifier	ScaleMode
>18617	CallExpression	ActiveXY ( )
>18618	ArgumentList	 
>18619	Callee	ActiveXY
>18620	Identifier	ActiveXY
>18621	IfStatement	if ( ActiveXY ( ) -> RotateMode ( ) )
>18622	CompoundStatement	 
>18623	ExpressionStatement	 
>18624	CallExpression	m_wndToolBar . GetToolBarCtrl ( ) . CheckButton ( ID_SELECT_MOUSESCALE , FALSE )
>18625	ArgumentList	ID_SELECT_MOUSESCALE
>18626	Argument	FALSE
>18627	Identifier	FALSE
>18628	Argument	ID_SELECT_MOUSESCALE
>18629	Identifier	ID_SELECT_MOUSESCALE
>18630	Callee	m_wndToolBar . GetToolBarCtrl ( ) . CheckButton
>18631	MemberAccess	m_wndToolBar . GetToolBarCtrl ( ) . CheckButton
>18632	Identifier	CheckButton
>18633	CallExpression	m_wndToolBar . GetToolBarCtrl ( )
>18634	ArgumentList	 
>18635	Callee	m_wndToolBar . GetToolBarCtrl
>18636	MemberAccess	m_wndToolBar . GetToolBarCtrl
>18637	Identifier	GetToolBarCtrl
>18638	Identifier	m_wndToolBar
>18639	ExpressionStatement	 
>18640	CallExpression	ActiveXY ( ) -> SetRotateMode ( false )
>18641	ArgumentList	false
>18642	Argument	false
>18643	Identifier	false
>18644	Callee	ActiveXY ( ) -> SetRotateMode
>18645	PtrMemberAccess	ActiveXY ( ) -> SetRotateMode
>18646	Identifier	SetRotateMode
>18647	CallExpression	ActiveXY ( )
>18648	ArgumentList	 
>18649	Callee	ActiveXY
>18650	Identifier	ActiveXY
>18651	Condition	 
>18652	CallExpression	ActiveXY ( ) -> RotateMode ( )
>18653	ArgumentList	 
>18654	Callee	ActiveXY ( ) -> RotateMode
>18655	PtrMemberAccess	ActiveXY ( ) -> RotateMode
>18656	Identifier	RotateMode
>18657	CallExpression	ActiveXY ( )
>18658	ArgumentList	 
>18659	Callee	ActiveXY
>18660	Identifier	ActiveXY
>18661	IfStatement	if ( ActiveXY ( ) -> ClipMode ( ) )
>18662	ExpressionStatement	 
>18663	CallExpression	OnViewClipper ( )
>18664	ArgumentList	 
>18665	Callee	OnViewClipper
>18666	Identifier	OnViewClipper
>18667	Condition	 
>18668	CallExpression	ActiveXY ( ) -> ClipMode ( )
>18669	ArgumentList	 
>18670	Callee	ActiveXY ( ) -> ClipMode
>18671	PtrMemberAccess	ActiveXY ( ) -> ClipMode
>18672	Identifier	ClipMode
>18673	CallExpression	ActiveXY ( )
>18674	ArgumentList	 
>18675	Callee	ActiveXY
>18676	Identifier	ActiveXY
>18677	Condition	 
>18678	CallExpression	ActiveXY ( )
>18679	ArgumentList	 
>18680	Callee	ActiveXY
>18681	Identifier	ActiveXY
>18696	FunctionDef	CMainFrame 
>18697	ParameterList	 
>18698	ReturnType	void
>18699	CompoundStatement	 
>18703	FunctionDef	CMainFrame 
>18704	ParameterList	 
>18705	ReturnType	void
>18706	CompoundStatement	 
>18707	ExpressionStatement	 
>18708	CallExpression	DoProjectSettings ( )
>18709	ArgumentList	 
>18710	Callee	DoProjectSettings
>18711	Identifier	DoProjectSettings
>18715	FunctionDef	CMainFrame 
>18716	ParameterList	CCmdUI * pCmdUI
>18717	Parameter	 
>18718	Identifier	pCmdUI
>18719	ParameterType	CCmdUI *
>18720	ReturnType	void
>18721	CompoundStatement	 
>18722	ExpressionStatement	 
>18723	CallExpression	pCmdUI -> Enable ( FALSE )
>18724	ArgumentList	FALSE
>18725	Argument	FALSE
>18726	Identifier	FALSE
>18727	Callee	pCmdUI -> Enable
>18728	PtrMemberAccess	pCmdUI -> Enable
>18729	Identifier	Enable
>18730	Identifier	pCmdUI
>18736	FunctionDef	CMainFrame 
>18737	ParameterList	 
>18738	ReturnType	void
>18739	CompoundStatement	 
>18740	ExpressionStatement	 
>18741	CallExpression	SetTexValStatus ( )
>18742	ArgumentList	 
>18743	Callee	SetTexValStatus
>18744	Identifier	SetTexValStatus
>18745	ExpressionStatement	 
>18746	CallExpression	Sys_UpdateWindows ( W_CAMERA )
>18747	ArgumentList	W_CAMERA
>18748	Argument	W_CAMERA
>18749	Identifier	W_CAMERA
>18750	Callee	Sys_UpdateWindows
>18751	Identifier	Sys_UpdateWindows
>18752	ExpressionStatement	 
>18753	CallExpression	g_PrefsDlg . SavePrefs ( )
>18754	ArgumentList	 
>18755	Callee	g_PrefsDlg . SavePrefs
>18756	MemberAccess	g_PrefsDlg . SavePrefs
>18757	Identifier	SavePrefs
>18758	Identifier	g_PrefsDlg
>18759	IfStatement	if ( g_PrefsDlg . m_nCubicScale < 1 )
>18760	ExpressionStatement	 
>18761	AssignmentExpr	g_PrefsDlg . m_nCubicScale = 1
>18762	PrimaryExpression	1
>18763	MemberAccess	g_PrefsDlg . m_nCubicScale
>18764	Identifier	m_nCubicScale
>18765	Identifier	g_PrefsDlg
>18766	Condition	 
>18767	RelationalExpression	g_PrefsDlg . m_nCubicScale < 1
>18768	PrimaryExpression	1
>18769	MemberAccess	g_PrefsDlg . m_nCubicScale
>18770	Identifier	m_nCubicScale
>18771	Identifier	g_PrefsDlg
>18772	ExpressionStatement	 
>18773	IncDecOp	g_PrefsDlg . m_nCubicScale --
>18774	IncDec	--
>18775	MemberAccess	g_PrefsDlg . m_nCubicScale
>18776	Identifier	m_nCubicScale
>18777	Identifier	g_PrefsDlg
>18784	FunctionDef	CMainFrame 
>18785	ParameterList	 
>18786	ReturnType	void
>18787	CompoundStatement	 
>18788	ExpressionStatement	 
>18789	CallExpression	SetTexValStatus ( )
>18790	ArgumentList	 
>18791	Callee	SetTexValStatus
>18792	Identifier	SetTexValStatus
>18793	ExpressionStatement	 
>18794	CallExpression	Sys_UpdateWindows ( W_CAMERA )
>18795	ArgumentList	W_CAMERA
>18796	Argument	W_CAMERA
>18797	Identifier	W_CAMERA
>18798	Callee	Sys_UpdateWindows
>18799	Identifier	Sys_UpdateWindows
>18800	ExpressionStatement	 
>18801	CallExpression	g_PrefsDlg . SavePrefs ( )
>18802	ArgumentList	 
>18803	Callee	g_PrefsDlg . SavePrefs
>18804	MemberAccess	g_PrefsDlg . SavePrefs
>18805	Identifier	SavePrefs
>18806	Identifier	g_PrefsDlg
>18807	IfStatement	if ( g_PrefsDlg . m_nCubicScale > 22 )
>18808	ExpressionStatement	 
>18809	AssignmentExpr	g_PrefsDlg . m_nCubicScale = 22
>18810	PrimaryExpression	22
>18811	MemberAccess	g_PrefsDlg . m_nCubicScale
>18812	Identifier	m_nCubicScale
>18813	Identifier	g_PrefsDlg
>18814	Condition	 
>18815	RelationalExpression	g_PrefsDlg . m_nCubicScale > 22
>18816	PrimaryExpression	22
>18817	MemberAccess	g_PrefsDlg . m_nCubicScale
>18818	Identifier	m_nCubicScale
>18819	Identifier	g_PrefsDlg
>18820	ExpressionStatement	 
>18821	IncDecOp	g_PrefsDlg . m_nCubicScale ++
>18822	IncDec	++
>18823	MemberAccess	g_PrefsDlg . m_nCubicScale
>18824	Identifier	m_nCubicScale
>18825	Identifier	g_PrefsDlg
>18832	FunctionDef	CMainFrame 
>18833	ParameterList	 
>18834	ReturnType	void
>18835	CompoundStatement	 
>18836	ExpressionStatement	 
>18837	CallExpression	Sys_UpdateWindows ( W_CAMERA )
>18838	ArgumentList	W_CAMERA
>18839	Argument	W_CAMERA
>18840	Identifier	W_CAMERA
>18841	Callee	Sys_UpdateWindows
>18842	Identifier	Sys_UpdateWindows
>18843	ExpressionStatement	 
>18844	CallExpression	Map_BuildBrushData ( )
>18845	ArgumentList	 
>18846	Callee	Map_BuildBrushData
>18847	Identifier	Map_BuildBrushData
>18848	ExpressionStatement	 
>18849	CallExpression	g_PrefsDlg . SavePrefs ( )
>18850	ArgumentList	 
>18851	Callee	g_PrefsDlg . SavePrefs
>18852	MemberAccess	g_PrefsDlg . SavePrefs
>18853	Identifier	SavePrefs
>18854	Identifier	g_PrefsDlg
>18855	ExpressionStatement	 
>18856	CallExpression	m_wndToolBar . GetToolBarCtrl ( ) . CheckButton ( ID_VIEW_CUBICCLIPPING , ( g_PrefsDlg . m_bCubicClipping ) ? TRUE 
>18857	ArgumentList	ID_VIEW_CUBICCLIPPING
>18858	Argument	( g_PrefsDlg . m_bCubicClipping ) ? TRUE 
>18859	ConditionalExpression	( g_PrefsDlg . m_bCubicClipping ) ? TRUE 
>18860	Identifier	FALSE
>18861	Identifier	TRUE
>18862	Condition	g_PrefsDlg . m_bCubicClipping
>18863	MemberAccess	g_PrefsDlg . m_bCubicClipping
>18864	Identifier	m_bCubicClipping
>18865	Identifier	g_PrefsDlg
>18866	Argument	ID_VIEW_CUBICCLIPPING
>18867	Identifier	ID_VIEW_CUBICCLIPPING
>18868	Callee	m_wndToolBar . GetToolBarCtrl ( ) . CheckButton
>18869	MemberAccess	m_wndToolBar . GetToolBarCtrl ( ) . CheckButton
>18870	Identifier	CheckButton
>18871	CallExpression	m_wndToolBar . GetToolBarCtrl ( )
>18872	ArgumentList	 
>18873	Callee	m_wndToolBar . GetToolBarCtrl
>18874	MemberAccess	m_wndToolBar . GetToolBarCtrl
>18875	Identifier	GetToolBarCtrl
>18876	Identifier	m_wndToolBar
>18877	IfStatement	if ( pMenu )
>18878	ExpressionStatement	 
>18879	CallExpression	pMenu -> CheckMenuItem ( ID_VIEW_CUBICCLIPPING , MF_BYCOMMAND | ( g_PrefsDlg . m_bCubicClipping ) ? MF_CHECKED 
>18880	ArgumentList	ID_VIEW_CUBICCLIPPING
>18881	Argument	MF_BYCOMMAND | ( g_PrefsDlg . m_bCubicClipping ) ? MF_CHECKED 
>18882	ConditionalExpression	MF_BYCOMMAND | ( g_PrefsDlg . m_bCubicClipping ) ? MF_CHECKED 
>18883	Identifier	MF_UNCHECKED
>18884	Identifier	MF_CHECKED
>18885	Condition	MF_BYCOMMAND | ( g_PrefsDlg . m_bCubicClipping )
>18886	InclusiveOrExpression	MF_BYCOMMAND | ( g_PrefsDlg . m_bCubicClipping )
>18887	MemberAccess	g_PrefsDlg . m_bCubicClipping
>18888	Identifier	m_bCubicClipping
>18889	Identifier	g_PrefsDlg
>18890	Identifier	MF_BYCOMMAND
>18891	Argument	ID_VIEW_CUBICCLIPPING
>18892	Identifier	ID_VIEW_CUBICCLIPPING
>18893	Callee	pMenu -> CheckMenuItem
>18894	PtrMemberAccess	pMenu -> CheckMenuItem
>18895	Identifier	CheckMenuItem
>18896	Identifier	pMenu
>18897	Condition	 
>18898	Identifier	pMenu
>18899	IdentifierDeclStatement	 
>18900	IdentifierDecl	* pMenu = GetMenu ( )
>18901	AssignmentExpr	* pMenu = GetMenu ( )
>18902	CallExpression	GetMenu ( )
>18903	ArgumentList	 
>18904	Callee	GetMenu
>18905	Identifier	GetMenu
>18906	Identifier	pMenu
>18907	Identifier	pMenu
>18908	IdentifierDeclType	CMenu *
>18909	ExpressionStatement	 
>18910	AssignmentExpr	g_PrefsDlg . m_bCubicClipping ^= 1
>18911	PrimaryExpression	1
>18912	MemberAccess	g_PrefsDlg . m_bCubicClipping
>18913	Identifier	m_bCubicClipping
>18914	Identifier	g_PrefsDlg
>18931	FunctionDef	CMainFrame 
>18932	ParameterList	 
>18933	ReturnType	void
>18934	CompoundStatement	 
>18935	ExpressionStatement	 
>18936	CallExpression	SaveAsDialog ( true )
>18937	ArgumentList	true
>18938	Argument	true
>18939	Identifier	true
>18940	Callee	SaveAsDialog
>18941	Identifier	SaveAsDialog
>18946	FunctionDef	CMainFrame 
>18947	ParameterList	CCmdUI * pCmdUI
>18948	Parameter	 
>18949	Identifier	pCmdUI
>18950	ParameterType	CCmdUI *
>18951	ReturnType	void
>18952	CompoundStatement	 
>18953	ExpressionStatement	 
>18954	CallExpression	pCmdUI -> Enable ( static_cast < BOOL > ( region_active ) )
>18955	ArgumentList	static_cast < BOOL > ( region_active )
>18956	Argument	static_cast < BOOL > ( region_active )
>18957	RelationalExpression	static_cast < BOOL > ( region_active )
>18958	RelationalExpression	BOOL > ( region_active )
>18959	Identifier	region_active
>18960	Identifier	BOOL
>18961	Identifier	static_cast
>18962	Callee	pCmdUI -> Enable
>18963	PtrMemberAccess	pCmdUI -> Enable
>18964	Identifier	Enable
>18965	Identifier	pCmdUI
>18973	FunctionDef	CMainFrame 
>18974	ParameterList	 
>18975	ReturnType	void
>18976	CompoundStatement	 
>18977	ExpressionStatement	 
>18978	CallExpression	Undo_End ( )
>18979	ArgumentList	 
>18980	Callee	Undo_End
>18981	Identifier	Undo_End
>18982	ExpressionStatement	 
>18983	CallExpression	Undo_EndBrushList ( & selected_brushes )
>18984	ArgumentList	& selected_brushes
>18985	Argument	& selected_brushes
>18986	UnaryOp	& selected_brushes
>18987	Identifier	selected_brushes
>18988	UnaryOperator	&
>18989	Callee	Undo_EndBrushList
>18990	Identifier	Undo_EndBrushList
>18991	ExpressionStatement	 
>18992	CallExpression	Sys_UpdateWindows ( W_CAMERA | W_XY | W_Z )
>18993	ArgumentList	W_CAMERA | W_XY | W_Z
>18994	Argument	W_CAMERA | W_XY | W_Z
>18995	InclusiveOrExpression	W_CAMERA | W_XY | W_Z
>18996	InclusiveOrExpression	W_XY | W_Z
>18997	Identifier	W_Z
>18998	Identifier	W_XY
>18999	Identifier	W_CAMERA
>19000	Callee	Sys_UpdateWindows
>19001	Identifier	Sys_UpdateWindows
>19002	ExpressionStatement	 
>19003	CallExpression	Select_Move ( vAmt )
>19004	ArgumentList	vAmt
>19005	Argument	vAmt
>19006	Identifier	vAmt
>19007	Callee	Select_Move
>19008	Identifier	Select_Move
>19009	ExpressionStatement	 
>19010	AssignmentExpr	vAmt [ 2 ] = - g_qeglobals . d_gridsize
>19011	UnaryOp	- g_qeglobals . d_gridsize
>19012	MemberAccess	g_qeglobals . d_gridsize
>19013	Identifier	d_gridsize
>19014	Identifier	g_qeglobals
>19015	UnaryOperator	-
>19016	ArrayIndexing	vAmt [ 2 ]
>19017	PrimaryExpression	2
>19018	Identifier	vAmt
>19019	ExpressionStatement	 
>19020	AssignmentExpr	vAmt [ 0 ] = vAmt [ 1 ] = 0.0
>19021	AssignmentExpr	vAmt [ 1 ] = 0.0
>19022	PrimaryExpression	0.0
>19023	ArrayIndexing	vAmt [ 1 ]
>19024	PrimaryExpression	1
>19025	Identifier	vAmt
>19026	ArrayIndexing	vAmt [ 0 ]
>19027	PrimaryExpression	0
>19028	Identifier	vAmt
>19029	IdentifierDeclStatement	 
>19030	IdentifierDecl	vAmt
>19031	Identifier	vAmt
>19032	IdentifierDeclType	vec3_t
>19033	ExpressionStatement	 
>19034	CallExpression	Undo_AddBrushList ( & selected_brushes )
>19035	ArgumentList	& selected_brushes
>19036	Argument	& selected_brushes
>19037	UnaryOp	& selected_brushes
>19038	Identifier	selected_brushes
>19039	UnaryOperator	&
>19040	Callee	Undo_AddBrushList
>19041	Identifier	Undo_AddBrushList
>19042	ExpressionStatement	 
>19043	CallExpression	Undo_Start ( \"move up\" )
>19044	ArgumentList	\"move up\"
>19045	Argument	\"move up\"
>19046	PrimaryExpression	\"move up\"
>19047	Callee	Undo_Start
>19048	Identifier	Undo_Start
>19060	FunctionDef	CMainFrame 
>19061	ParameterList	 
>19062	ReturnType	void
>19063	CompoundStatement	 
>19064	ExpressionStatement	 
>19065	CallExpression	Sys_UpdateWindows ( W_CAMERA | W_XY | W_Z )
>19066	ArgumentList	W_CAMERA | W_XY | W_Z
>19067	Argument	W_CAMERA | W_XY | W_Z
>19068	InclusiveOrExpression	W_CAMERA | W_XY | W_Z
>19069	InclusiveOrExpression	W_XY | W_Z
>19070	Identifier	W_Z
>19071	Identifier	W_XY
>19072	Identifier	W_CAMERA
>19073	Callee	Sys_UpdateWindows
>19074	Identifier	Sys_UpdateWindows
>19075	ExpressionStatement	 
>19076	CallExpression	Select_Move ( vAmt )
>19077	ArgumentList	vAmt
>19078	Argument	vAmt
>19079	Identifier	vAmt
>19080	Callee	Select_Move
>19081	Identifier	Select_Move
>19082	ExpressionStatement	 
>19083	AssignmentExpr	vAmt [ 2 ] = g_qeglobals . d_gridsize
>19084	MemberAccess	g_qeglobals . d_gridsize
>19085	Identifier	d_gridsize
>19086	Identifier	g_qeglobals
>19087	ArrayIndexing	vAmt [ 2 ]
>19088	PrimaryExpression	2
>19089	Identifier	vAmt
>19090	ExpressionStatement	 
>19091	AssignmentExpr	vAmt [ 0 ] = vAmt [ 1 ] = 0.0
>19092	AssignmentExpr	vAmt [ 1 ] = 0.0
>19093	PrimaryExpression	0.0
>19094	ArrayIndexing	vAmt [ 1 ]
>19095	PrimaryExpression	1
>19096	Identifier	vAmt
>19097	ArrayIndexing	vAmt [ 0 ]
>19098	PrimaryExpression	0
>19099	Identifier	vAmt
>19100	IdentifierDeclStatement	 
>19101	IdentifierDecl	vAmt
>19102	Identifier	vAmt
>19103	IdentifierDeclType	vec3_t
>19114	FunctionDef	CMainFrame 
>19115	ParameterList	 
>19116	ReturnType	void
>19117	CompoundStatement	 
>19121	FunctionDef	CMainFrame 
>19122	ParameterList	 
>19123	ReturnType	void
>19124	CompoundStatement	 
>19128	FunctionDef	CMainFrame 
>19129	ParameterList	 
>19130	ReturnType	void
>19131	CompoundStatement	 
>19132	ForStatement	for ( brush_t * b = selected_brushes . next ; b != & selected_brushes ; b = b -> next )
>19133	ExpressionStatement	 
>19134	CallExpression	Brush_Print ( b )
>19135	ArgumentList	b
>19136	Argument	b
>19137	Identifier	b
>19138	Callee	Brush_Print
>19139	Identifier	Brush_Print
>19140	AssignmentExpr	 
>19141	PtrMemberAccess	b -> next
>19142	Identifier	next
>19143	Identifier	b
>19144	Identifier	b
>19145	Condition	 
>19146	EqualityExpression	b != & selected_brushes
>19147	UnaryOp	& selected_brushes
>19148	Identifier	selected_brushes
>19149	UnaryOperator	&
>19150	Identifier	b
>19151	ForInit	 
>19152	IdentifierDeclStatement	brush_t * b = selected_brushes . next ;
>19153	IdentifierDecl	* b = selected_brushes . next
>19154	AssignmentExpr	* b = selected_brushes . next
>19155	MemberAccess	selected_brushes . next
>19156	Identifier	next
>19157	Identifier	selected_brushes
>19158	Identifier	b
>19159	Identifier	b
>19160	IdentifierDeclType	brush_t *
>19170	FunctionDef	CMainFrame 
>19171	ParameterList	 
>19172	ReturnType	void
>19173	CompoundStatement	 
>19174	IfStatement	if ( m_wndTextureBar . GetSafeHwnd ( ) )
>19175	ExpressionStatement	 
>19176	CallExpression	m_wndTextureBar . GetSurfaceAttributes ( )
>19177	ArgumentList	 
>19178	Callee	m_wndTextureBar . GetSurfaceAttributes
>19179	MemberAccess	m_wndTextureBar . GetSurfaceAttributes
>19180	Identifier	GetSurfaceAttributes
>19181	Identifier	m_wndTextureBar
>19182	Condition	 
>19183	CallExpression	m_wndTextureBar . GetSafeHwnd ( )
>19184	ArgumentList	 
>19185	Callee	m_wndTextureBar . GetSafeHwnd
>19186	MemberAccess	m_wndTextureBar . GetSafeHwnd
>19187	Identifier	GetSafeHwnd
>19188	Identifier	m_wndTextureBar
>19198	FunctionDef	CMainFrame 
>19199	ParameterList	 
>19200	ReturnType	void
>19201	CompoundStatement	 
>19202	CompoundStatement	 
>19203	IfStatement	if ( ! g_bTABDown )
>19204	CompoundStatement	 
>19205	ReturnStatement	 
>19206	ExpressionStatement	 
>19207	CallExpression	Sys_UpdateWindows ( W_XY )
>19208	ArgumentList	W_XY
>19209	Argument	W_XY
>19210	Identifier	W_XY
>19211	Callee	Sys_UpdateWindows
>19212	Identifier	Sys_UpdateWindows
>19213	ExpressionStatement	 
>19214	AssignmentExpr	g_PrefsDlg . m_bSizePaint = ! g_bOriginalFlag
>19215	UnaryOp	! g_bOriginalFlag
>19216	Identifier	g_bOriginalFlag
>19217	UnaryOperator	!
>19218	MemberAccess	g_PrefsDlg . m_bSizePaint
>19219	Identifier	m_bSizePaint
>19220	Identifier	g_PrefsDlg
>19221	ExpressionStatement	 
>19222	AssignmentExpr	g_bOriginalFlag = g_PrefsDlg . m_bSizePaint
>19223	MemberAccess	g_PrefsDlg . m_bSizePaint
>19224	Identifier	m_bSizePaint
>19225	Identifier	g_PrefsDlg
>19226	Identifier	g_bOriginalFlag
>19227	ExpressionStatement	 
>19228	AssignmentExpr	g_bTABDown = true
>19229	Identifier	true
>19230	Identifier	g_bTABDown
>19231	Condition	 
>19232	UnaryOp	! g_bTABDown
>19233	Identifier	g_bTABDown
>19234	UnaryOperator	!
>19235	Statement	 
>19236	Statement	 
>19237	Statement	 
>19238	Statement	 
>19239	Statement	 
>19240	Statement	 
>19241	Statement	 
>19242	Statement	 
>19252	FunctionDef	CMainFrame 
>19253	ParameterList	 
>19254	ReturnType	void
>19255	CompoundStatement	 
>19256	ExpressionStatement	 
>19257	CallExpression	Undo_End ( )
>19258	ArgumentList	 
>19259	Callee	Undo_End
>19260	Identifier	Undo_End
>19261	ExpressionStatement	 
>19262	CallExpression	Undo_EndBrushList ( & selected_brushes )
>19263	ArgumentList	& selected_brushes
>19264	Argument	& selected_brushes
>19265	UnaryOp	& selected_brushes
>19266	Identifier	selected_brushes
>19267	UnaryOperator	&
>19268	Callee	Undo_EndBrushList
>19269	Identifier	Undo_EndBrushList
>19270	ExpressionStatement	 
>19271	CallExpression	DoSides ( true )
>19272	ArgumentList	true
>19273	Argument	true
>19274	Identifier	true
>19275	Callee	DoSides
>19276	Identifier	DoSides
>19277	ExpressionStatement	 
>19278	CallExpression	Undo_AddBrushList ( & selected_brushes )
>19279	ArgumentList	& selected_brushes
>19280	Argument	& selected_brushes
>19281	UnaryOp	& selected_brushes
>19282	Identifier	selected_brushes
>19283	UnaryOperator	&
>19284	Callee	Undo_AddBrushList
>19285	Identifier	Undo_AddBrushList
>19286	ExpressionStatement	 
>19287	CallExpression	Undo_Start ( \"make cone\" )
>19288	ArgumentList	\"make cone\"
>19289	Argument	\"make cone\"
>19290	PrimaryExpression	\"make cone\"
>19291	Callee	Undo_Start
>19292	Identifier	Undo_Start
>19298	FunctionDef	CMainFrame 
>19299	ParameterList	 
>19300	ReturnType	void
>19301	CompoundStatement	 
>19302	IfStatement	if ( pidlBrowse )
>19303	CompoundStatement	 
>19304	ExpressionStatement	 
>19305	CallExpression	Texture_ShowDirectory ( strPath . GetBuffer ( 0 ) )
>19306	ArgumentList	strPath . GetBuffer ( 0 )
>19307	Argument	strPath . GetBuffer ( 0 )
>19308	CallExpression	strPath . GetBuffer ( 0 )
>19309	ArgumentList	0
>19310	Argument	0
>19311	PrimaryExpression	0
>19312	Callee	strPath . GetBuffer
>19313	MemberAccess	strPath . GetBuffer
>19314	Identifier	GetBuffer
>19315	Identifier	strPath
>19316	Callee	Texture_ShowDirectory
>19317	Identifier	Texture_ShowDirectory
>19318	ExpressionStatement	 
>19319	CallExpression	AddSlash ( strPath )
>19320	ArgumentList	strPath
>19321	Argument	strPath
>19322	Identifier	strPath
>19323	Callee	AddSlash
>19324	Identifier	AddSlash
>19325	ExpressionStatement	 
>19326	CallExpression	strPath . ReleaseBuffer ( )
>19327	ArgumentList	 
>19328	Callee	strPath . ReleaseBuffer
>19329	MemberAccess	strPath . ReleaseBuffer
>19330	Identifier	ReleaseBuffer
>19331	Identifier	strPath
>19332	ExpressionStatement	 
>19333	CallExpression	SHGetPathFromIDList ( pidlBrowse , p )
>19334	ArgumentList	pidlBrowse
>19335	Argument	p
>19336	Identifier	p
>19337	Argument	pidlBrowse
>19338	Identifier	pidlBrowse
>19339	Callee	SHGetPathFromIDList
>19340	Identifier	SHGetPathFromIDList
>19341	Condition	 
>19342	Identifier	pidlBrowse
>19343	ExpressionStatement	 
>19344	AssignmentExpr	pidlBrowse = SHBrowseForFolder ( & bi )
>19345	CallExpression	SHBrowseForFolder ( & bi )
>19346	ArgumentList	& bi
>19347	Argument	& bi
>19348	UnaryOp	& bi
>19349	Identifier	bi
>19350	UnaryOperator	&
>19351	Callee	SHBrowseForFolder
>19352	Identifier	SHBrowseForFolder
>19353	Identifier	pidlBrowse
>19354	IdentifierDeclStatement	 
>19355	IdentifierDecl	pidlBrowse
>19356	Identifier	pidlBrowse
>19357	IdentifierDeclType	LPITEMIDLIST
>19358	ExpressionStatement	 
>19359	AssignmentExpr	bi . iImage = 0
>19360	PrimaryExpression	0
>19361	MemberAccess	bi . iImage
>19362	Identifier	iImage
>19363	Identifier	bi
>19364	ExpressionStatement	 
>19365	AssignmentExpr	bi . lParam = NULL
>19366	Identifier	NULL
>19367	MemberAccess	bi . lParam
>19368	Identifier	lParam
>19369	Identifier	bi
>19370	ExpressionStatement	 
>19371	AssignmentExpr	bi . lpfn = NULL
>19372	Identifier	NULL
>19373	MemberAccess	bi . lpfn
>19374	Identifier	lpfn
>19375	Identifier	bi
>19376	ExpressionStatement	 
>19377	AssignmentExpr	bi . ulFlags = 0
>19378	PrimaryExpression	0
>19379	MemberAccess	bi . ulFlags
>19380	Identifier	ulFlags
>19381	Identifier	bi
>19382	ExpressionStatement	 
>19383	AssignmentExpr	bi . lpszTitle = \"Load textures from path\"
>19384	PrimaryExpression	\"Load textures from path\"
>19385	MemberAccess	bi . lpszTitle
>19386	Identifier	lpszTitle
>19387	Identifier	bi
>19388	ExpressionStatement	 
>19389	AssignmentExpr	bi . pszDisplayName = p
>19390	Identifier	p
>19391	MemberAccess	bi . pszDisplayName
>19392	Identifier	pszDisplayName
>19393	Identifier	bi
>19394	ExpressionStatement	 
>19395	AssignmentExpr	bi . pidlRoot = NULL
>19396	Identifier	NULL
>19397	MemberAccess	bi . pidlRoot
>19398	Identifier	pidlRoot
>19399	Identifier	bi
>19400	ExpressionStatement	 
>19401	AssignmentExpr	bi . hwndOwner = GetSafeHwnd ( )
>19402	CallExpression	GetSafeHwnd ( )
>19403	ArgumentList	 
>19404	Callee	GetSafeHwnd
>19405	Identifier	GetSafeHwnd
>19406	MemberAccess	bi . hwndOwner
>19407	Identifier	hwndOwner
>19408	Identifier	bi
>19409	IdentifierDeclStatement	 
>19410	IdentifierDecl	* p = strPath . GetBuffer ( MAX_PATH + 1 )
>19411	AssignmentExpr	* p = strPath . GetBuffer ( MAX_PATH + 1 )
>19412	CallExpression	strPath . GetBuffer ( MAX_PATH + 1 )
>19413	ArgumentList	MAX_PATH + 1
>19414	Argument	MAX_PATH + 1
>19415	AdditiveExpression	MAX_PATH + 1
>19416	PrimaryExpression	1
>19417	Identifier	MAX_PATH
>19418	Callee	strPath . GetBuffer
>19419	MemberAccess	strPath . GetBuffer
>19420	Identifier	GetBuffer
>19421	Identifier	strPath
>19422	Identifier	p
>19423	Identifier	p
>19424	IdentifierDeclType	char *
>19425	IdentifierDeclStatement	 
>19426	IdentifierDecl	strPath
>19427	Identifier	strPath
>19428	IdentifierDeclType	CString
>19429	IdentifierDeclStatement	 
>19430	IdentifierDecl	bi
>19431	Identifier	bi
>19432	IdentifierDeclType	BROWSEINFO
>19454	FunctionDef	CMainFrame 
>19455	ParameterList	 
>19456	ReturnType	void
>19457	CompoundStatement	 
>19458	ExpressionStatement	 
>19459	CallExpression	SetGridStatus ( )
>19460	ArgumentList	 
>19461	Callee	SetGridStatus
>19462	Identifier	SetGridStatus
>19463	ExpressionStatement	 
>19464	CallExpression	g_PrefsDlg . SavePrefs ( )
>19465	ArgumentList	 
>19466	Callee	g_PrefsDlg . SavePrefs
>19467	MemberAccess	g_PrefsDlg . SavePrefs
>19468	Identifier	SavePrefs
>19469	Identifier	g_PrefsDlg
>19470	IfStatement	if ( pMenu )
>19471	ExpressionStatement	 
>19472	CallExpression	pMenu -> CheckMenuItem ( ID_TOGGLE_ROTATELOCK , MF_BYCOMMAND | ( g_PrefsDlg . m_bRotateLock ) ? MF_CHECKED 
>19473	ArgumentList	ID_TOGGLE_ROTATELOCK
>19474	Argument	MF_BYCOMMAND | ( g_PrefsDlg . m_bRotateLock ) ? MF_CHECKED 
>19475	ConditionalExpression	MF_BYCOMMAND | ( g_PrefsDlg . m_bRotateLock ) ? MF_CHECKED 
>19476	Identifier	MF_UNCHECKED
>19477	Identifier	MF_CHECKED
>19478	Condition	MF_BYCOMMAND | ( g_PrefsDlg . m_bRotateLock )
>19479	InclusiveOrExpression	MF_BYCOMMAND | ( g_PrefsDlg . m_bRotateLock )
>19480	MemberAccess	g_PrefsDlg . m_bRotateLock
>19481	Identifier	m_bRotateLock
>19482	Identifier	g_PrefsDlg
>19483	Identifier	MF_BYCOMMAND
>19484	Argument	ID_TOGGLE_ROTATELOCK
>19485	Identifier	ID_TOGGLE_ROTATELOCK
>19486	Callee	pMenu -> CheckMenuItem
>19487	PtrMemberAccess	pMenu -> CheckMenuItem
>19488	Identifier	CheckMenuItem
>19489	Identifier	pMenu
>19490	Condition	 
>19491	Identifier	pMenu
>19492	IdentifierDeclStatement	 
>19493	IdentifierDecl	* pMenu = GetMenu ( )
>19494	AssignmentExpr	* pMenu = GetMenu ( )
>19495	CallExpression	GetMenu ( )
>19496	ArgumentList	 
>19497	Callee	GetMenu
>19498	Identifier	GetMenu
>19499	Identifier	pMenu
>19500	Identifier	pMenu
>19501	IdentifierDeclType	CMenu *
>19502	ExpressionStatement	 
>19503	AssignmentExpr	g_PrefsDlg . m_bRotateLock ^= 1
>19504	PrimaryExpression	1
>19505	MemberAccess	g_PrefsDlg . m_bRotateLock
>19506	Identifier	m_bRotateLock
>19507	Identifier	g_PrefsDlg
>19519	FunctionDef	CMainFrame 
>19520	ParameterList	 
>19521	ReturnType	void
>19522	CompoundStatement	 
>19526	FunctionDef	CMainFrame 
>19527	ParameterList	 
>19528	ReturnType	void
>19529	CompoundStatement	 
>19533	FunctionDef	CMainFrame 
>19534	ParameterList	 
>19535	ReturnType	void
>19536	CompoundStatement	 
>19540	FunctionDef	CMainFrame 
>19541	ParameterList	 
>19542	ReturnType	void
>19543	CompoundStatement	 
>19547	FunctionDef	CMainFrame 
>19548	ParameterList	 
>19549	ReturnType	void
>19550	CompoundStatement	 
>19554	FunctionDef	CMainFrame 
>19555	ParameterList	 
>19556	ReturnType	void
>19557	CompoundStatement	 
>19561	FunctionDef	CMainFrame 
>19562	ParameterList	 
>19563	ReturnType	void
>19564	CompoundStatement	 
>19568	FunctionDef	CMainFrame 
>19569	ParameterList	 
>19570	ReturnType	void
>19571	CompoundStatement	 
>19575	FunctionDef	CMainFrame 
>19576	ParameterList	 
>19577	ReturnType	void
>19578	CompoundStatement	 
>19579	IfStatement	if ( dlgFile . DoModal ( ) == IDOK )
>19580	CompoundStatement	 
>19581	ExpressionStatement	 
>19582	CallExpression	Map_ImportFile ( dlgFile . GetPathName ( ) . GetBuffer ( 0 ) )
>19583	ArgumentList	dlgFile . GetPathName ( ) . GetBuffer ( 0 )
>19584	Argument	dlgFile . GetPathName ( ) . GetBuffer ( 0 )
>19585	CallExpression	dlgFile . GetPathName ( ) . GetBuffer ( 0 )
>19586	ArgumentList	0
>19587	Argument	0
>19588	PrimaryExpression	0
>19589	Callee	dlgFile . GetPathName ( ) . GetBuffer
>19590	MemberAccess	dlgFile . GetPathName ( ) . GetBuffer
>19591	Identifier	GetBuffer
>19592	CallExpression	dlgFile . GetPathName ( )
>19593	ArgumentList	 
>19594	Callee	dlgFile . GetPathName
>19595	MemberAccess	dlgFile . GetPathName
>19596	Identifier	GetPathName
>19597	Identifier	dlgFile
>19598	Callee	Map_ImportFile
>19599	Identifier	Map_ImportFile
>19600	Condition	 
>19601	EqualityExpression	dlgFile . DoModal ( ) == IDOK
>19602	Identifier	IDOK
>19603	CallExpression	dlgFile . DoModal ( )
>19604	ArgumentList	 
>19605	Callee	dlgFile . DoModal
>19606	MemberAccess	dlgFile . DoModal
>19607	Identifier	DoModal
>19608	Identifier	dlgFile
>19609	IdentifierDeclStatement	 
>19610	IdentifierDecl	dlgFile ( TRUE , NULL , NULL , OFN_HIDEREADONLY | OFN_OVERWRITEPROMPT , \"Map files (*.map)|*.map||\" , this )
>19611	Expression	TRUE , NULL , NULL , OFN_HIDEREADONLY | OFN_OVERWRITEPROMPT , \"Map files (*.map)|*.map||\" , this
>19612	Expression	NULL , NULL , OFN_HIDEREADONLY | OFN_OVERWRITEPROMPT , \"Map files (*.map)|*.map||\" , this
>19613	Expression	NULL , OFN_HIDEREADONLY | OFN_OVERWRITEPROMPT , \"Map files (*.map)|*.map||\" , this
>19614	Expression	OFN_HIDEREADONLY | OFN_OVERWRITEPROMPT , \"Map files (*.map)|*.map||\" , this
>19615	Expression	\"Map files (*.map)|*.map||\" , this
>19616	Identifier	this
>19617	PrimaryExpression	\"Map files (*.map)|*.map||\"
>19618	InclusiveOrExpression	OFN_HIDEREADONLY | OFN_OVERWRITEPROMPT
>19619	Identifier	OFN_OVERWRITEPROMPT
>19620	Identifier	OFN_HIDEREADONLY
>19621	Identifier	NULL
>19622	Identifier	NULL
>19623	Identifier	TRUE
>19624	Identifier	dlgFile
>19625	IdentifierDeclType	CFileDialog
>19634	FunctionDef	CMainFrame 
>19635	ParameterList	 
>19636	ReturnType	void
>19637	CompoundStatement	 
>19638	IfStatement	if ( dlgFile . DoModal ( ) == IDOK )
>19639	CompoundStatement	 
>19640	ExpressionStatement	 
>19641	CallExpression	Map_SaveSelected ( dlgFile . GetPathName ( ) . GetBuffer ( 0 ) )
>19642	ArgumentList	dlgFile . GetPathName ( ) . GetBuffer ( 0 )
>19643	Argument	dlgFile . GetPathName ( ) . GetBuffer ( 0 )
>19644	CallExpression	dlgFile . GetPathName ( ) . GetBuffer ( 0 )
>19645	ArgumentList	0
>19646	Argument	0
>19647	PrimaryExpression	0
>19648	Callee	dlgFile . GetPathName ( ) . GetBuffer
>19649	MemberAccess	dlgFile . GetPathName ( ) . GetBuffer
>19650	Identifier	GetBuffer
>19651	CallExpression	dlgFile . GetPathName ( )
>19652	ArgumentList	 
>19653	Callee	dlgFile . GetPathName
>19654	MemberAccess	dlgFile . GetPathName
>19655	Identifier	GetPathName
>19656	Identifier	dlgFile
>19657	Callee	Map_SaveSelected
>19658	Identifier	Map_SaveSelected
>19659	Condition	 
>19660	EqualityExpression	dlgFile . DoModal ( ) == IDOK
>19661	Identifier	IDOK
>19662	CallExpression	dlgFile . DoModal ( )
>19663	ArgumentList	 
>19664	Callee	dlgFile . DoModal
>19665	MemberAccess	dlgFile . DoModal
>19666	Identifier	DoModal
>19667	Identifier	dlgFile
>19668	IdentifierDeclStatement	 
>19669	IdentifierDecl	dlgFile ( FALSE , \"map\" , NULL , OFN_HIDEREADONLY | OFN_OVERWRITEPROMPT , \"Map files (*.map)|*.map||\" , this )
>19670	Expression	FALSE , \"map\" , NULL , OFN_HIDEREADONLY | OFN_OVERWRITEPROMPT , \"Map files (*.map)|*.map||\" , this
>19671	Expression	\"map\" , NULL , OFN_HIDEREADONLY | OFN_OVERWRITEPROMPT , \"Map files (*.map)|*.map||\" , this
>19672	Expression	NULL , OFN_HIDEREADONLY | OFN_OVERWRITEPROMPT , \"Map files (*.map)|*.map||\" , this
>19673	Expression	OFN_HIDEREADONLY | OFN_OVERWRITEPROMPT , \"Map files (*.map)|*.map||\" , this
>19674	Expression	\"Map files (*.map)|*.map||\" , this
>19675	Identifier	this
>19676	PrimaryExpression	\"Map files (*.map)|*.map||\"
>19677	InclusiveOrExpression	OFN_HIDEREADONLY | OFN_OVERWRITEPROMPT
>19678	Identifier	OFN_OVERWRITEPROMPT
>19679	Identifier	OFN_HIDEREADONLY
>19680	Identifier	NULL
>19681	PrimaryExpression	\"map\"
>19682	Identifier	FALSE
>19683	Identifier	dlgFile
>19684	IdentifierDeclType	CFileDialog
>19693	FunctionDef	CMainFrame 
>19694	ParameterList	 
>19695	ReturnType	void
>19696	CompoundStatement	 
>19697	ExpressionStatement	 
>19698	CallExpression	Sys_UpdateWindows ( W_XY | W_CAMERA )
>19699	ArgumentList	W_XY | W_CAMERA
>19700	Argument	W_XY | W_CAMERA
>19701	InclusiveOrExpression	W_XY | W_CAMERA
>19702	Identifier	W_CAMERA
>19703	Identifier	W_XY
>19704	Callee	Sys_UpdateWindows
>19705	Identifier	Sys_UpdateWindows
>19706	ExpressionStatement	 
>19707	Statement	 
>19708	Statement	 
>19709	Statement	 
>19710	Statement	 
>19711	Statement	 
>19712	Statement	 
>19713	Statement	 
>19714	Statement	 
>19715	Statement	 
>19716	Statement	 
>19717	Statement	 
>19718	Statement	 
>19719	Statement	 
>19720	Statement	 
>19721	Statement	 
>19722	ExpressionStatement	 
>19723	Statement	 
>19724	Statement	 
>19725	Statement	 
>19726	Statement	 
>19727	Statement	 
>19728	Statement	 
>19729	Statement	 
>19730	Statement	 
>19731	Statement	 
>19732	Statement	 
>19733	Statement	 
>19734	Statement	 
>19735	Statement	 
>19736	Statement	 
>19737	Statement	 
>19738	IfStatement	if ( ( g_qeglobals . d_savedinfo . exclude ^= EXCLUDE_CURVES ) & EXCLUDE_CURVES )
>19739	ElseStatement	else
>19740	Statement	 
>19741	Statement	 
>19742	Condition	 
>19743	BitAndExpression	( g_qeglobals . d_savedinfo . exclude ^= EXCLUDE_CURVES ) & EXCLUDE_CURVES
>19744	Identifier	EXCLUDE_CURVES
>19745	AssignmentExpr	g_qeglobals . d_savedinfo . exclude ^= EXCLUDE_CURVES
>19746	Identifier	EXCLUDE_CURVES
>19747	MemberAccess	g_qeglobals . d_savedinfo . exclude
>19748	Identifier	exclude
>19749	MemberAccess	g_qeglobals . d_savedinfo
>19750	Identifier	d_savedinfo
>19751	Identifier	g_qeglobals
>19761	FunctionDef	CMainFrame 
>19762	ParameterList	 
>19763	ReturnType	void
>19764	CompoundStatement	 
>19765	ExpressionStatement	 
>19766	CallExpression	NudgeSelection ( 3 , g_qeglobals . d_savedinfo . m_nTextureTweak )
>19767	ArgumentList	3
>19768	Argument	g_qeglobals . d_savedinfo . m_nTextureTweak
>19769	MemberAccess	g_qeglobals . d_savedinfo . m_nTextureTweak
>19770	Identifier	m_nTextureTweak
>19771	MemberAccess	g_qeglobals . d_savedinfo
>19772	Identifier	d_savedinfo
>19773	Identifier	g_qeglobals
>19774	Argument	3
>19775	PrimaryExpression	3
>19776	Callee	NudgeSelection
>19777	Identifier	NudgeSelection
>19784	FunctionDef	CMainFrame 
>19785	ParameterList	 
>19786	ReturnType	void
>19787	CompoundStatement	 
>19788	ExpressionStatement	 
>19789	CallExpression	NudgeSelection ( 0 , g_qeglobals . d_savedinfo . m_nTextureTweak )
>19790	ArgumentList	0
>19791	Argument	g_qeglobals . d_savedinfo . m_nTextureTweak
>19792	MemberAccess	g_qeglobals . d_savedinfo . m_nTextureTweak
>19793	Identifier	m_nTextureTweak
>19794	MemberAccess	g_qeglobals . d_savedinfo
>19795	Identifier	d_savedinfo
>19796	Identifier	g_qeglobals
>19797	Argument	0
>19798	PrimaryExpression	0
>19799	Callee	NudgeSelection
>19800	Identifier	NudgeSelection
>19807	FunctionDef	CMainFrame 
>19808	ParameterList	 
>19809	ReturnType	void
>19810	CompoundStatement	 
>19811	ExpressionStatement	 
>19812	CallExpression	NudgeSelection ( 2 , g_qeglobals . d_savedinfo . m_nTextureTweak )
>19813	ArgumentList	2
>19814	Argument	g_qeglobals . d_savedinfo . m_nTextureTweak
>19815	MemberAccess	g_qeglobals . d_savedinfo . m_nTextureTweak
>19816	Identifier	m_nTextureTweak
>19817	MemberAccess	g_qeglobals . d_savedinfo
>19818	Identifier	d_savedinfo
>19819	Identifier	g_qeglobals
>19820	Argument	2
>19821	PrimaryExpression	2
>19822	Callee	NudgeSelection
>19823	Identifier	NudgeSelection
>19830	FunctionDef	CMainFrame 
>19831	ParameterList	 
>19832	ReturnType	void
>19833	CompoundStatement	 
>19834	ExpressionStatement	 
>19835	CallExpression	NudgeSelection ( 1 , g_qeglobals . d_savedinfo . m_nTextureTweak )
>19836	ArgumentList	1
>19837	Argument	g_qeglobals . d_savedinfo . m_nTextureTweak
>19838	MemberAccess	g_qeglobals . d_savedinfo . m_nTextureTweak
>19839	Identifier	m_nTextureTweak
>19840	MemberAccess	g_qeglobals . d_savedinfo
>19841	Identifier	d_savedinfo
>19842	Identifier	g_qeglobals
>19843	Argument	1
>19844	PrimaryExpression	1
>19845	Callee	NudgeSelection
>19846	Identifier	NudgeSelection
>19853	FunctionDef	CMainFrame 
>19854	ParameterList	int nDirection , int nAmount
>19855	Parameter	 
>19856	Identifier	nAmount
>19857	ParameterType	int
>19858	Parameter	 
>19859	Identifier	nDirection
>19860	ParameterType	int
>19861	ReturnType	void
>19862	CompoundStatement	 
>19863	IfStatement	if ( ActiveXY ( ) -> RotateMode ( ) )
>19864	ElseStatement	else
>19865	IfStatement	if ( ActiveXY ( ) -> ScaleMode ( ) )
>19866	ElseStatement	else
>19867	CompoundStatement	 
>19868	ExpressionStatement	 
>19869	CallExpression	Nudge ( nDim , nAmount )
>19870	ArgumentList	nDim
>19871	Argument	nAmount
>19872	Identifier	nAmount
>19873	Argument	nDim
>19874	Identifier	nDim
>19875	Callee	Nudge
>19876	Identifier	Nudge
>19877	IfStatement	if ( nDirection == 0 )
>19878	ElseStatement	else
>19879	IfStatement	if ( nDirection == 1 )
>19880	ElseStatement	else
>19881	IfStatement	if ( nDirection == 2 )
>19882	ElseStatement	else
>19883	CompoundStatement	 
>19884	ExpressionStatement	 
>19885	AssignmentExpr	nAmount = - nAmount
>19886	UnaryOp	- nAmount
>19887	Identifier	nAmount
>19888	UnaryOperator	-
>19889	Identifier	nAmount
>19890	ExpressionStatement	 
>19891	AssignmentExpr	nDim = ActiveXY ( ) -> GetViewType ( ) == XY ? 1 
>19892	ConditionalExpression	ActiveXY ( ) -> GetViewType ( ) == XY ? 1 
>19893	PrimaryExpression	2
>19894	PrimaryExpression	1
>19895	Condition	ActiveXY ( ) -> GetViewType ( ) == XY
>19896	EqualityExpression	ActiveXY ( ) -> GetViewType ( ) == XY
>19897	Identifier	XY
>19898	CallExpression	ActiveXY ( ) -> GetViewType ( )
>19899	ArgumentList	 
>19900	Callee	ActiveXY ( ) -> GetViewType
>19901	PtrMemberAccess	ActiveXY ( ) -> GetViewType
>19902	Identifier	GetViewType
>19903	CallExpression	ActiveXY ( )
>19904	ArgumentList	 
>19905	Callee	ActiveXY
>19906	Identifier	ActiveXY
>19907	Identifier	nDim
>19908	CompoundStatement	 
>19909	ExpressionStatement	 
>19910	AssignmentExpr	nDim = ActiveXY ( ) -> GetViewType ( ) == YZ ? 1 
>19911	ConditionalExpression	ActiveXY ( ) -> GetViewType ( ) == YZ ? 1 
>19912	PrimaryExpression	0
>19913	PrimaryExpression	1
>19914	Condition	ActiveXY ( ) -> GetViewType ( ) == YZ
>19915	EqualityExpression	ActiveXY ( ) -> GetViewType ( ) == YZ
>19916	Identifier	YZ
>19917	CallExpression	ActiveXY ( ) -> GetViewType ( )
>19918	ArgumentList	 
>19919	Callee	ActiveXY ( ) -> GetViewType
>19920	PtrMemberAccess	ActiveXY ( ) -> GetViewType
>19921	Identifier	GetViewType
>19922	CallExpression	ActiveXY ( )
>19923	ArgumentList	 
>19924	Callee	ActiveXY
>19925	Identifier	ActiveXY
>19926	Identifier	nDim
>19927	Condition	 
>19928	EqualityExpression	nDirection == 2
>19929	PrimaryExpression	2
>19930	Identifier	nDirection
>19931	CompoundStatement	 
>19932	ExpressionStatement	 
>19933	AssignmentExpr	nDim = ActiveXY ( ) -> GetViewType ( ) == XY ? 1 
>19934	ConditionalExpression	ActiveXY ( ) -> GetViewType ( ) == XY ? 1 
>19935	PrimaryExpression	2
>19936	PrimaryExpression	1
>19937	Condition	ActiveXY ( ) -> GetViewType ( ) == XY
>19938	EqualityExpression	ActiveXY ( ) -> GetViewType ( ) == XY
>19939	Identifier	XY
>19940	CallExpression	ActiveXY ( ) -> GetViewType ( )
>19941	ArgumentList	 
>19942	Callee	ActiveXY ( ) -> GetViewType
>19943	PtrMemberAccess	ActiveXY ( ) -> GetViewType
>19944	Identifier	GetViewType
>19945	CallExpression	ActiveXY ( )
>19946	ArgumentList	 
>19947	Callee	ActiveXY
>19948	Identifier	ActiveXY
>19949	Identifier	nDim
>19950	Condition	 
>19951	EqualityExpression	nDirection == 1
>19952	PrimaryExpression	1
>19953	Identifier	nDirection
>19954	CompoundStatement	 
>19955	ExpressionStatement	 
>19956	AssignmentExpr	nAmount = - nAmount
>19957	UnaryOp	- nAmount
>19958	Identifier	nAmount
>19959	UnaryOperator	-
>19960	Identifier	nAmount
>19961	ExpressionStatement	 
>19962	AssignmentExpr	nDim = ActiveXY ( ) -> GetViewType ( ) == YZ ? 1 
>19963	ConditionalExpression	ActiveXY ( ) -> GetViewType ( ) == YZ ? 1 
>19964	PrimaryExpression	0
>19965	PrimaryExpression	1
>19966	Condition	ActiveXY ( ) -> GetViewType ( ) == YZ
>19967	EqualityExpression	ActiveXY ( ) -> GetViewType ( ) == YZ
>19968	Identifier	YZ
>19969	CallExpression	ActiveXY ( ) -> GetViewType ( )
>19970	ArgumentList	 
>19971	Callee	ActiveXY ( ) -> GetViewType
>19972	PtrMemberAccess	ActiveXY ( ) -> GetViewType
>19973	Identifier	GetViewType
>19974	CallExpression	ActiveXY ( )
>19975	ArgumentList	 
>19976	Callee	ActiveXY
>19977	Identifier	ActiveXY
>19978	Identifier	nDim
>19979	Condition	 
>19980	EqualityExpression	nDirection == 0
>19981	PrimaryExpression	0
>19982	Identifier	nDirection
>19983	IdentifierDeclStatement	 
>19984	IdentifierDecl	nDim
>19985	Identifier	nDim
>19986	IdentifierDeclType	int
>19987	CompoundStatement	 
>19988	ExpressionStatement	 
>19989	CallExpression	Sys_UpdateWindows ( W_ALL )
>19990	ArgumentList	W_ALL
>19991	Argument	W_ALL
>19992	Identifier	W_ALL
>19993	Callee	Sys_UpdateWindows
>19994	Identifier	Sys_UpdateWindows
>19995	ExpressionStatement	 
>19996	CallExpression	Select_Scale ( ( g_nScaleHow & SCALE_X ) ? v [ 0 ] 
>19997	ArgumentList	( g_nScaleHow & SCALE_X ) ? v [ 0 ] 
>19998	Argument	( g_nScaleHow & SCALE_Z ) ? v [ 2 ] 
>19999	ConditionalExpression	( g_nScaleHow & SCALE_Z ) ? v [ 2 ] 
>20000	PrimaryExpression	1.0
>20001	ArrayIndexing	v [ 2 ]
>20002	PrimaryExpression	2
>20003	Identifier	v
>20004	Condition	g_nScaleHow & SCALE_Z
>20005	BitAndExpression	g_nScaleHow & SCALE_Z
>20006	Identifier	SCALE_Z
>20007	Identifier	g_nScaleHow
>20008	Argument	( g_nScaleHow & SCALE_Y ) ? v [ 1 ] 
>20009	ConditionalExpression	( g_nScaleHow & SCALE_Y ) ? v [ 1 ] 
>20010	PrimaryExpression	1.0
>20011	ArrayIndexing	v [ 1 ]
>20012	PrimaryExpression	1
>20013	Identifier	v
>20014	Condition	g_nScaleHow & SCALE_Y
>20015	BitAndExpression	g_nScaleHow & SCALE_Y
>20016	Identifier	SCALE_Y
>20017	Identifier	g_nScaleHow
>20018	Argument	( g_nScaleHow & SCALE_X ) ? v [ 0 ] 
>20019	ConditionalExpression	( g_nScaleHow & SCALE_X ) ? v [ 0 ] 
>20020	PrimaryExpression	1.0
>20021	ArrayIndexing	v [ 0 ]
>20022	PrimaryExpression	0
>20023	Identifier	v
>20024	Condition	g_nScaleHow & SCALE_X
>20025	BitAndExpression	g_nScaleHow & SCALE_X
>20026	Identifier	SCALE_X
>20027	Identifier	g_nScaleHow
>20028	Callee	Select_Scale
>20029	Identifier	Select_Scale
>20030	IfStatement	if ( nAmount > 0 )
>20031	ElseStatement	else
>20032	CompoundStatement	 
>20033	ExpressionStatement	 
>20034	AssignmentExpr	v [ 2 ] = 0.9
>20035	PrimaryExpression	0.9
>20036	ArrayIndexing	v [ 2 ]
>20037	PrimaryExpression	2
>20038	Identifier	v
>20039	ExpressionStatement	 
>20040	AssignmentExpr	v [ 1 ] = 0.9
>20041	PrimaryExpression	0.9
>20042	ArrayIndexing	v [ 1 ]
>20043	PrimaryExpression	1
>20044	Identifier	v
>20045	ExpressionStatement	 
>20046	AssignmentExpr	v [ 0 ] = 0.9
>20047	PrimaryExpression	0.9
>20048	ArrayIndexing	v [ 0 ]
>20049	PrimaryExpression	0
>20050	Identifier	v
>20051	CompoundStatement	 
>20052	ExpressionStatement	 
>20053	AssignmentExpr	v [ 2 ] = 1.1
>20054	PrimaryExpression	1.1
>20055	ArrayIndexing	v [ 2 ]
>20056	PrimaryExpression	2
>20057	Identifier	v
>20058	ExpressionStatement	 
>20059	AssignmentExpr	v [ 1 ] = 1.1
>20060	PrimaryExpression	1.1
>20061	ArrayIndexing	v [ 1 ]
>20062	PrimaryExpression	1
>20063	Identifier	v
>20064	ExpressionStatement	 
>20065	AssignmentExpr	v [ 0 ] = 1.1
>20066	PrimaryExpression	1.1
>20067	ArrayIndexing	v [ 0 ]
>20068	PrimaryExpression	0
>20069	Identifier	v
>20070	Condition	 
>20071	RelationalExpression	nAmount > 0
>20072	PrimaryExpression	0
>20073	Identifier	nAmount
>20074	ExpressionStatement	 
>20075	AssignmentExpr	v [ 0 ] = v [ 1 ] = v [ 2 ] = 1.0
>20076	AssignmentExpr	v [ 1 ] = v [ 2 ] = 1.0
>20077	AssignmentExpr	v [ 2 ] = 1.0
>20078	PrimaryExpression	1.0
>20079	ArrayIndexing	v [ 2 ]
>20080	PrimaryExpression	2
>20081	Identifier	v
>20082	ArrayIndexing	v [ 1 ]
>20083	PrimaryExpression	1
>20084	Identifier	v
>20085	ArrayIndexing	v [ 0 ]
>20086	PrimaryExpression	0
>20087	Identifier	v
>20088	IdentifierDeclStatement	 
>20089	IdentifierDecl	v
>20090	Identifier	v
>20091	IdentifierDeclType	vec3_t
>20092	IfStatement	if ( nDirection == 0 || nDirection == 3 )
>20093	CompoundStatement	 
>20094	ExpressionStatement	 
>20095	AssignmentExpr	nAmount = - nAmount
>20096	UnaryOp	- nAmount
>20097	Identifier	nAmount
>20098	UnaryOperator	-
>20099	Identifier	nAmount
>20100	Condition	 
>20101	OrExpression	nDirection == 0 || nDirection == 3
>20102	EqualityExpression	nDirection == 3
>20103	PrimaryExpression	3
>20104	Identifier	nDirection
>20105	EqualityExpression	nDirection == 0
>20106	PrimaryExpression	0
>20107	Identifier	nDirection
>20108	Condition	 
>20109	CallExpression	ActiveXY ( ) -> ScaleMode ( )
>20110	ArgumentList	 
>20111	Callee	ActiveXY ( ) -> ScaleMode
>20112	PtrMemberAccess	ActiveXY ( ) -> ScaleMode
>20113	Identifier	ScaleMode
>20114	CallExpression	ActiveXY ( )
>20115	ArgumentList	 
>20116	Callee	ActiveXY
>20117	Identifier	ActiveXY
>20118	CompoundStatement	 
>20119	ExpressionStatement	 
>20120	CallExpression	Sys_UpdateWindows ( W_ALL )
>20121	ArgumentList	W_ALL
>20122	Argument	W_ALL
>20123	Identifier	W_ALL
>20124	Callee	Sys_UpdateWindows
>20125	Identifier	Sys_UpdateWindows
>20126	ExpressionStatement	 
>20127	CallExpression	Select_RotateAxis ( nAxis , fDeg , false , true )
>20128	ArgumentList	nAxis
>20129	Argument	true
>20130	Identifier	true
>20131	Argument	false
>20132	Identifier	false
>20133	Argument	fDeg
>20134	Identifier	fDeg
>20135	Argument	nAxis
>20136	Identifier	nAxis
>20137	Callee	Select_RotateAxis
>20138	Identifier	Select_RotateAxis
>20139	ExpressionStatement	 
>20140	CallExpression	g_pParentWnd -> SetStatusText ( 2 , strStatus )
>20141	ArgumentList	2
>20142	Argument	strStatus
>20143	Identifier	strStatus
>20144	Argument	2
>20145	PrimaryExpression	2
>20146	Callee	g_pParentWnd -> SetStatusText
>20147	PtrMemberAccess	g_pParentWnd -> SetStatusText
>20148	Identifier	SetStatusText
>20149	Identifier	g_pParentWnd
>20150	ExpressionStatement	 
>20151	CallExpression	strStatus . Format ( \"Rotation x
>20152	ArgumentList	\"Rotation x
>20153	Argument	g_pParentWnd -> ActiveXY ( ) -> Rotation ( ) [ 2 ]
>20154	ArrayIndexing	g_pParentWnd -> ActiveXY ( ) -> Rotation ( ) [ 2 ]
>20155	PrimaryExpression	2
>20156	CallExpression	g_pParentWnd -> ActiveXY ( ) -> Rotation ( )
>20157	ArgumentList	 
>20158	Callee	g_pParentWnd -> ActiveXY ( ) -> Rotation
>20159	PtrMemberAccess	g_pParentWnd -> ActiveXY ( ) -> Rotation
>20160	Identifier	Rotation
>20161	CallExpression	g_pParentWnd -> ActiveXY ( )
>20162	ArgumentList	 
>20163	Callee	g_pParentWnd -> ActiveXY
>20164	PtrMemberAccess	g_pParentWnd -> ActiveXY
>20165	Identifier	ActiveXY
>20166	Identifier	g_pParentWnd
>20167	Argument	g_pParentWnd -> ActiveXY ( ) -> Rotation ( ) [ 1 ]
>20168	ArrayIndexing	g_pParentWnd -> ActiveXY ( ) -> Rotation ( ) [ 1 ]
>20169	PrimaryExpression	1
>20170	CallExpression	g_pParentWnd -> ActiveXY ( ) -> Rotation ( )
>20171	ArgumentList	 
>20172	Callee	g_pParentWnd -> ActiveXY ( ) -> Rotation
>20173	PtrMemberAccess	g_pParentWnd -> ActiveXY ( ) -> Rotation
>20174	Identifier	Rotation
>20175	CallExpression	g_pParentWnd -> ActiveXY ( )
>20176	ArgumentList	 
>20177	Callee	g_pParentWnd -> ActiveXY
>20178	PtrMemberAccess	g_pParentWnd -> ActiveXY
>20179	Identifier	ActiveXY
>20180	Identifier	g_pParentWnd
>20181	Argument	g_pParentWnd -> ActiveXY ( ) -> Rotation ( ) [ 0 ]
>20182	ArrayIndexing	g_pParentWnd -> ActiveXY ( ) -> Rotation ( ) [ 0 ]
>20183	PrimaryExpression	0
>20184	CallExpression	g_pParentWnd -> ActiveXY ( ) -> Rotation ( )
>20185	ArgumentList	 
>20186	Callee	g_pParentWnd -> ActiveXY ( ) -> Rotation
>20187	PtrMemberAccess	g_pParentWnd -> ActiveXY ( ) -> Rotation
>20188	Identifier	Rotation
>20189	CallExpression	g_pParentWnd -> ActiveXY ( )
>20190	ArgumentList	 
>20191	Callee	g_pParentWnd -> ActiveXY
>20192	PtrMemberAccess	g_pParentWnd -> ActiveXY
>20193	Identifier	ActiveXY
>20194	Identifier	g_pParentWnd
>20195	Argument	\"Rotation x
>20196	PrimaryExpression	\"Rotation x
>20197	Callee	strStatus . Format
>20198	MemberAccess	strStatus . Format
>20199	Identifier	Format
>20200	Identifier	strStatus
>20201	IdentifierDeclStatement	 
>20202	IdentifierDecl	strStatus
>20203	Identifier	strStatus
>20204	IdentifierDeclType	CString
>20205	ExpressionStatement	 
>20206	AssignmentExpr	g_pParentWnd -> ActiveXY ( ) -> Rotation ( ) [ nAxis ] += fAdj
>20207	Identifier	fAdj
>20208	ArrayIndexing	g_pParentWnd -> ActiveXY ( ) -> Rotation ( ) [ nAxis ]
>20209	Identifier	nAxis
>20210	CallExpression	g_pParentWnd -> ActiveXY ( ) -> Rotation ( )
>20211	ArgumentList	 
>20212	Callee	g_pParentWnd -> ActiveXY ( ) -> Rotation
>20213	PtrMemberAccess	g_pParentWnd -> ActiveXY ( ) -> Rotation
>20214	Identifier	Rotation
>20215	CallExpression	g_pParentWnd -> ActiveXY ( )
>20216	ArgumentList	 
>20217	Callee	g_pParentWnd -> ActiveXY
>20218	PtrMemberAccess	g_pParentWnd -> ActiveXY
>20219	Identifier	ActiveXY
>20220	Identifier	g_pParentWnd
>20221	IdentifierDeclStatement	 
>20222	IdentifierDecl	fAdj = nAmount
>20223	AssignmentExpr	fAdj = nAmount
>20224	Identifier	nAmount
>20225	Identifier	nAmount
>20226	Identifier	fAdj
>20227	IdentifierDeclType	float
>20228	IdentifierDeclStatement	 
>20229	IdentifierDecl	fDeg = - nAmount
>20230	AssignmentExpr	fDeg = - nAmount
>20231	UnaryOp	- nAmount
>20232	Identifier	nAmount
>20233	UnaryOperator	-
>20234	Identifier	fDeg
>20235	Identifier	fDeg
>20236	IdentifierDeclType	float
>20237	IfStatement	if ( nDirection == 2 || nDirection == 3 )
>20238	CompoundStatement	 
>20239	ExpressionStatement	 
>20240	AssignmentExpr	nAmount = - nAmount
>20241	UnaryOp	- nAmount
>20242	Identifier	nAmount
>20243	UnaryOperator	-
>20244	Identifier	nAmount
>20245	Condition	 
>20246	OrExpression	nDirection == 2 || nDirection == 3
>20247	EqualityExpression	nDirection == 3
>20248	PrimaryExpression	3
>20249	Identifier	nDirection
>20250	EqualityExpression	nDirection == 2
>20251	PrimaryExpression	2
>20252	Identifier	nDirection
>20253	IfStatement	if ( ActiveXY ( ) -> GetViewType ( ) == XY )
>20254	ElseStatement	else
>20255	IfStatement	if ( g_pParentWnd -> ActiveXY ( ) -> GetViewType ( ) == XZ )
>20256	CompoundStatement	 
>20257	ExpressionStatement	 
>20258	AssignmentExpr	nAmount = - nAmount
>20259	UnaryOp	- nAmount
>20260	Identifier	nAmount
>20261	UnaryOperator	-
>20262	Identifier	nAmount
>20263	ExpressionStatement	 
>20264	AssignmentExpr	nAxis = 1
>20265	PrimaryExpression	1
>20266	Identifier	nAxis
>20267	Condition	 
>20268	EqualityExpression	g_pParentWnd -> ActiveXY ( ) -> GetViewType ( ) == XZ
>20269	Identifier	XZ
>20270	CallExpression	g_pParentWnd -> ActiveXY ( ) -> GetViewType ( )
>20271	ArgumentList	 
>20272	Callee	g_pParentWnd -> ActiveXY ( ) -> GetViewType
>20273	PtrMemberAccess	g_pParentWnd -> ActiveXY ( ) -> GetViewType
>20274	Identifier	GetViewType
>20275	CallExpression	g_pParentWnd -> ActiveXY ( )
>20276	ArgumentList	 
>20277	Callee	g_pParentWnd -> ActiveXY
>20278	PtrMemberAccess	g_pParentWnd -> ActiveXY
>20279	Identifier	ActiveXY
>20280	Identifier	g_pParentWnd
>20281	CompoundStatement	 
>20282	ExpressionStatement	 
>20283	AssignmentExpr	nAxis = 2
>20284	PrimaryExpression	2
>20285	Identifier	nAxis
>20286	Condition	 
>20287	EqualityExpression	ActiveXY ( ) -> GetViewType ( ) == XY
>20288	Identifier	XY
>20289	CallExpression	ActiveXY ( ) -> GetViewType ( )
>20290	ArgumentList	 
>20291	Callee	ActiveXY ( ) -> GetViewType
>20292	PtrMemberAccess	ActiveXY ( ) -> GetViewType
>20293	Identifier	GetViewType
>20294	CallExpression	ActiveXY ( )
>20295	ArgumentList	 
>20296	Callee	ActiveXY
>20297	Identifier	ActiveXY
>20298	IdentifierDeclStatement	 
>20299	IdentifierDecl	nAxis = 0
>20300	AssignmentExpr	nAxis = 0
>20301	PrimaryExpression	0
>20302	Identifier	nAxis
>20303	Identifier	nAxis
>20304	IdentifierDeclType	int
>20305	Condition	 
>20306	CallExpression	ActiveXY ( ) -> RotateMode ( )
>20307	ArgumentList	 
>20308	Callee	ActiveXY ( ) -> RotateMode
>20309	PtrMemberAccess	ActiveXY ( ) -> RotateMode
>20310	Identifier	RotateMode
>20311	CallExpression	ActiveXY ( )
>20312	ArgumentList	 
>20313	Callee	ActiveXY
>20314	Identifier	ActiveXY
>20353	FunctionDef	CMainFrame 
>20354	ParameterList	MSG * pMsg
>20355	Parameter	 
>20356	Identifier	pMsg
>20357	ParameterType	MSG *
>20358	ReturnType	BOOL
>20359	CompoundStatement	 
>20360	ReturnStatement	 
>20361	CallExpression	CFrameWnd 
>20362	ArgumentList	pMsg
>20363	Argument	pMsg
>20364	Identifier	pMsg
>20365	Callee	CFrameWnd 
>20366	Identifier	CFrameWnd 
>20372	FunctionDef	CMainFrame 
>20373	ParameterList	int nDim , float fNudge
>20374	Parameter	 
>20375	Identifier	fNudge
>20376	ParameterType	float
>20377	Parameter	 
>20378	Identifier	nDim
>20379	ParameterType	int
>20380	ReturnType	void
>20381	CompoundStatement	 
>20382	ExpressionStatement	 
>20383	CallExpression	Sys_UpdateWindows ( W_ALL )
>20384	ArgumentList	W_ALL
>20385	Argument	W_ALL
>20386	Identifier	W_ALL
>20387	Callee	Sys_UpdateWindows
>20388	Identifier	Sys_UpdateWindows
>20389	ExpressionStatement	 
>20390	CallExpression	Select_Move ( vMove , true )
>20391	ArgumentList	vMove
>20392	Argument	true
>20393	Identifier	true
>20394	Argument	vMove
>20395	Identifier	vMove
>20396	Callee	Select_Move
>20397	Identifier	Select_Move
>20398	ExpressionStatement	 
>20399	AssignmentExpr	vMove [ nDim ] = fNudge
>20400	Identifier	fNudge
>20401	ArrayIndexing	vMove [ nDim ]
>20402	Identifier	nDim
>20403	Identifier	vMove
>20404	ExpressionStatement	 
>20405	AssignmentExpr	vMove [ 0 ] = vMove [ 1 ] = vMove [ 2 ] = 0
>20406	AssignmentExpr	vMove [ 1 ] = vMove [ 2 ] = 0
>20407	AssignmentExpr	vMove [ 2 ] = 0
>20408	PrimaryExpression	0
>20409	ArrayIndexing	vMove [ 2 ]
>20410	PrimaryExpression	2
>20411	Identifier	vMove
>20412	ArrayIndexing	vMove [ 1 ]
>20413	PrimaryExpression	1
>20414	Identifier	vMove
>20415	ArrayIndexing	vMove [ 0 ]
>20416	PrimaryExpression	0
>20417	Identifier	vMove
>20418	IdentifierDeclStatement	 
>20419	IdentifierDecl	vMove
>20420	Identifier	vMove
>20421	IdentifierDeclType	vec3_t
>20432	FunctionDef	CMainFrame 
>20433	ParameterList	 
>20434	ReturnType	void
>20435	CompoundStatement	 
>20436	IfStatement	if ( dlg . DoModal ( ) == IDOK && dlg . m_nSelection >= 0 )
>20437	CompoundStatement	 
>20438	ExpressionStatement	 
>20439	CallExpression	Texture_ShowDirectory ( dlg . m_nSelection + CMD_TEXTUREWAD )
>20440	ArgumentList	dlg . m_nSelection + CMD_TEXTUREWAD
>20441	Argument	dlg . m_nSelection + CMD_TEXTUREWAD
>20442	AdditiveExpression	dlg . m_nSelection + CMD_TEXTUREWAD
>20443	Identifier	CMD_TEXTUREWAD
>20444	MemberAccess	dlg . m_nSelection
>20445	Identifier	m_nSelection
>20446	Identifier	dlg
>20447	Callee	Texture_ShowDirectory
>20448	Identifier	Texture_ShowDirectory
>20449	Condition	 
>20450	AndExpression	dlg . DoModal ( ) == IDOK && dlg . m_nSelection >= 0
>20451	RelationalExpression	dlg . m_nSelection >= 0
>20452	PrimaryExpression	0
>20453	MemberAccess	dlg . m_nSelection
>20454	Identifier	m_nSelection
>20455	Identifier	dlg
>20456	EqualityExpression	dlg . DoModal ( ) == IDOK
>20457	Identifier	IDOK
>20458	CallExpression	dlg . DoModal ( )
>20459	ArgumentList	 
>20460	Callee	dlg . DoModal
>20461	MemberAccess	dlg . DoModal
>20462	Identifier	DoModal
>20463	Identifier	dlg
>20464	IdentifierDeclStatement	 
>20465	IdentifierDecl	dlg
>20466	Identifier	dlg
>20467	IdentifierDeclType	CDialogTextures
>20476	FunctionDef	CMainFrame 
>20477	ParameterList	 
>20478	ReturnType	void
>20479	CompoundStatement	 
>20480	ExpressionStatement	 
>20481	CallExpression	m_wndToolBar . GetToolBarCtrl ( ) . CheckButton ( ID_DONTSELECTCURVE , ( g_PrefsDlg . m_bSelectCurves ) ? FALSE 
>20482	ArgumentList	ID_DONTSELECTCURVE
>20483	Argument	( g_PrefsDlg . m_bSelectCurves ) ? FALSE 
>20484	ConditionalExpression	( g_PrefsDlg . m_bSelectCurves ) ? FALSE 
>20485	Identifier	TRUE
>20486	Identifier	FALSE
>20487	Condition	g_PrefsDlg . m_bSelectCurves
>20488	MemberAccess	g_PrefsDlg . m_bSelectCurves
>20489	Identifier	m_bSelectCurves
>20490	Identifier	g_PrefsDlg
>20491	Argument	ID_DONTSELECTCURVE
>20492	Identifier	ID_DONTSELECTCURVE
>20493	Callee	m_wndToolBar . GetToolBarCtrl ( ) . CheckButton
>20494	MemberAccess	m_wndToolBar . GetToolBarCtrl ( ) . CheckButton
>20495	Identifier	CheckButton
>20496	CallExpression	m_wndToolBar . GetToolBarCtrl ( )
>20497	ArgumentList	 
>20498	Callee	m_wndToolBar . GetToolBarCtrl
>20499	MemberAccess	m_wndToolBar . GetToolBarCtrl
>20500	Identifier	GetToolBarCtrl
>20501	Identifier	m_wndToolBar
>20502	ExpressionStatement	 
>20503	AssignmentExpr	g_PrefsDlg . m_bSelectCurves ^= 1
>20504	PrimaryExpression	1
>20505	MemberAccess	g_PrefsDlg . m_bSelectCurves
>20506	Identifier	m_bSelectCurves
>20507	Identifier	g_PrefsDlg
>20518	FunctionDef	CMainFrame 
>20519	ParameterList	 
>20520	ReturnType	void
>20521	CompoundStatement	 
>20522	ExpressionStatement	 
>20523	CallExpression	Map_BuildBrushData ( )
>20524	ArgumentList	 
>20525	Callee	Map_BuildBrushData
>20526	Identifier	Map_BuildBrushData
>20527	ForStatement	for ( brush_t * pb = active_brushes . next ; pb != & active_brushes ; pb = pb -> next )
>20528	CompoundStatement	 
>20529	IfStatement	if ( pb -> curveBrush )
>20530	CompoundStatement	 
>20531	ForStatement	for ( face_t * f = pb -> brush_faces ; f ; f = f -> next )
>20532	CompoundStatement	 
>20533	IfStatement	if ( f -> texdef . contents & CONTENTS_LADDER )
>20534	CompoundStatement	 
>20535	ExpressionStatement	 
>20536	AssignmentExpr	f -> texdef . contents |= CONTENTS_NEGATIVE_CURVE
>20537	Identifier	CONTENTS_NEGATIVE_CURVE
>20538	MemberAccess	f -> texdef . contents
>20539	Identifier	contents
>20540	PtrMemberAccess	f -> texdef
>20541	Identifier	texdef
>20542	Identifier	f
>20543	ExpressionStatement	 
>20544	AssignmentExpr	f -> texdef . contents &= ~CONTENTS_LADDER
>20545	Identifier	~CONTENTS_LADDER
>20546	MemberAccess	f -> texdef . contents
>20547	Identifier	contents
>20548	PtrMemberAccess	f -> texdef
>20549	Identifier	texdef
>20550	Identifier	f
>20551	Condition	 
>20552	BitAndExpression	f -> texdef . contents & CONTENTS_LADDER
>20553	Identifier	CONTENTS_LADDER
>20554	MemberAccess	f -> texdef . contents
>20555	Identifier	contents
>20556	PtrMemberAccess	f -> texdef
>20557	Identifier	texdef
>20558	Identifier	f
>20559	AssignmentExpr	 
>20560	PtrMemberAccess	f -> next
>20561	Identifier	next
>20562	Identifier	f
>20563	Identifier	f
>20564	Condition	 
>20565	Identifier	f
>20566	ForInit	 
>20567	IdentifierDeclStatement	face_t * f = pb -> brush_faces ;
>20568	IdentifierDecl	* f = pb -> brush_faces
>20569	AssignmentExpr	* f = pb -> brush_faces
>20570	PtrMemberAccess	pb -> brush_faces
>20571	Identifier	brush_faces
>20572	Identifier	pb
>20573	Identifier	f
>20574	Identifier	f
>20575	IdentifierDeclType	face_t *
>20576	Condition	 
>20577	PtrMemberAccess	pb -> curveBrush
>20578	Identifier	curveBrush
>20579	Identifier	pb
>20580	AssignmentExpr	 
>20581	PtrMemberAccess	pb -> next
>20582	Identifier	next
>20583	Identifier	pb
>20584	Identifier	pb
>20585	Condition	 
>20586	EqualityExpression	pb != & active_brushes
>20587	UnaryOp	& active_brushes
>20588	Identifier	active_brushes
>20589	UnaryOperator	&
>20590	Identifier	pb
>20591	ForInit	 
>20592	IdentifierDeclStatement	brush_t * pb = active_brushes . next ;
>20593	IdentifierDecl	* pb = active_brushes . next
>20594	AssignmentExpr	* pb = active_brushes . next
>20595	MemberAccess	active_brushes . next
>20596	Identifier	next
>20597	Identifier	active_brushes
>20598	Identifier	pb
>20599	Identifier	pb
>20600	IdentifierDeclType	brush_t *
>20601	ExpressionStatement	 
>20602	CallExpression	Select_Deselect ( )
>20603	ArgumentList	 
>20604	Callee	Select_Deselect
>20605	Identifier	Select_Deselect
>20625	FunctionDef	CMainFrame 
>20626	ParameterList	 
>20627	ReturnType	void
>20628	CompoundStatement	 
>20629	ExpressionStatement	 
>20630	CallExpression	pCam -> ShowWindow ( SW_SHOW )
>20631	ArgumentList	SW_SHOW
>20632	Argument	SW_SHOW
>20633	Identifier	SW_SHOW
>20634	Callee	pCam -> ShowWindow
>20635	PtrMemberAccess	pCam -> ShowWindow
>20636	Identifier	ShowWindow
>20637	Identifier	pCam
>20638	ExpressionStatement	 
>20639	CallExpression	pCam -> Create ( CAMERA_WINDOW_CLASS , \"\" , WS_OVERLAPPEDWINDOW , rect , GetDesktopWindow ( ) , 12345 )
>20640	ArgumentList	CAMERA_WINDOW_CLASS
>20641	Argument	12345
>20642	PrimaryExpression	12345
>20643	Argument	GetDesktopWindow ( )
>20644	CallExpression	GetDesktopWindow ( )
>20645	ArgumentList	 
>20646	Callee	GetDesktopWindow
>20647	Identifier	GetDesktopWindow
>20648	Argument	rect
>20649	Identifier	rect
>20650	Argument	WS_OVERLAPPEDWINDOW
>20651	Identifier	WS_OVERLAPPEDWINDOW
>20652	Argument	\"\"
>20653	PrimaryExpression	\"\"
>20654	Argument	CAMERA_WINDOW_CLASS
>20655	Identifier	CAMERA_WINDOW_CLASS
>20656	Callee	pCam -> Create
>20657	PtrMemberAccess	pCam -> Create
>20658	Identifier	Create
>20659	Identifier	pCam
>20660	IdentifierDeclStatement	 
>20661	IdentifierDecl	rect ( 100 , 100 , 300 , 300 )
>20662	Expression	100 , 100 , 300 , 300
>20663	Expression	100 , 300 , 300
>20664	Expression	300 , 300
>20665	PrimaryExpression	300
>20666	PrimaryExpression	300
>20667	PrimaryExpression	100
>20668	PrimaryExpression	100
>20669	Identifier	rect
>20670	IdentifierDeclType	CRect
>20671	IdentifierDeclStatement	 
>20672	IdentifierDecl	* pCam = new CCamWnd ( )
>20673	AssignmentExpr	* pCam = new CCamWnd ( )
>20674	UnaryExpression	new CCamWnd ( )
>20675	Identifier	pCam
>20676	Identifier	pCam
>20677	IdentifierDeclType	CCamWnd *
>20687	FunctionDef	CMainFrame 
>20688	ParameterList	 
>20689	ReturnType	void
>20690	CompoundStatement	 
>20691	ExpressionStatement	 
>20692	CallExpression	Undo_End ( )
>20693	ArgumentList	 
>20694	Callee	Undo_End
>20695	Identifier	Undo_End
>20696	ExpressionStatement	 
>20697	CallExpression	Undo_EndBrushList ( & selected_brushes )
>20698	ArgumentList	& selected_brushes
>20699	Argument	& selected_brushes
>20700	UnaryOp	& selected_brushes
>20701	Identifier	selected_brushes
>20702	UnaryOperator	&
>20703	Callee	Undo_EndBrushList
>20704	Identifier	Undo_EndBrushList
>20705	ExpressionStatement	 
>20706	CallExpression	dlg . DoModal ( )
>20707	ArgumentList	 
>20708	Callee	dlg . DoModal
>20709	MemberAccess	dlg . DoModal
>20710	Identifier	DoModal
>20711	Identifier	dlg
>20712	IdentifierDeclStatement	 
>20713	IdentifierDecl	dlg
>20714	Identifier	dlg
>20715	IdentifierDeclType	CPatchDensityDlg
>20716	ExpressionStatement	 
>20717	CallExpression	Undo_AddBrushList ( & selected_brushes )
>20718	ArgumentList	& selected_brushes
>20719	Argument	& selected_brushes
>20720	UnaryOp	& selected_brushes
>20721	Identifier	selected_brushes
>20722	UnaryOperator	&
>20723	Callee	Undo_AddBrushList
>20724	Identifier	Undo_AddBrushList
>20725	ExpressionStatement	 
>20726	CallExpression	Undo_Start ( \"make simpe patch mesh\" )
>20727	ArgumentList	\"make simpe patch mesh\"
>20728	Argument	\"make simpe patch mesh\"
>20729	PrimaryExpression	\"make simpe patch mesh\"
>20730	Callee	Undo_Start
>20731	Identifier	Undo_Start
>20737	FunctionDef	CMainFrame 
>20738	ParameterList	 
>20739	ReturnType	void
>20740	CompoundStatement	 
>20741	ExpressionStatement	 
>20742	CallExpression	Sys_UpdateWindows ( W_ALL )
>20743	ArgumentList	W_ALL
>20744	Argument	W_ALL
>20745	Identifier	W_ALL
>20746	Callee	Sys_UpdateWindows
>20747	Identifier	Sys_UpdateWindows
>20748	ExpressionStatement	 
>20749	CallExpression	m_wndToolBar . GetToolBarCtrl ( ) . CheckButton ( ID_PATCH_SHOWBOUNDINGBOX , ( g_bPatchShowBounds ) ? TRUE 
>20750	ArgumentList	ID_PATCH_SHOWBOUNDINGBOX
>20751	Argument	( g_bPatchShowBounds ) ? TRUE 
>20752	ConditionalExpression	( g_bPatchShowBounds ) ? TRUE 
>20753	Identifier	FALSE
>20754	Identifier	TRUE
>20755	Condition	g_bPatchShowBounds
>20756	Identifier	g_bPatchShowBounds
>20757	Argument	ID_PATCH_SHOWBOUNDINGBOX
>20758	Identifier	ID_PATCH_SHOWBOUNDINGBOX
>20759	Callee	m_wndToolBar . GetToolBarCtrl ( ) . CheckButton
>20760	MemberAccess	m_wndToolBar . GetToolBarCtrl ( ) . CheckButton
>20761	Identifier	CheckButton
>20762	CallExpression	m_wndToolBar . GetToolBarCtrl ( )
>20763	ArgumentList	 
>20764	Callee	m_wndToolBar . GetToolBarCtrl
>20765	MemberAccess	m_wndToolBar . GetToolBarCtrl
>20766	Identifier	GetToolBarCtrl
>20767	Identifier	m_wndToolBar
>20768	ExpressionStatement	 
>20769	AssignmentExpr	g_bPatchShowBounds ^= 1
>20770	PrimaryExpression	1
>20771	Identifier	g_bPatchShowBounds
>20782	FunctionDef	CMainFrame 
>20783	ParameterList	 
>20784	ReturnType	void
>20785	CompoundStatement	 
>20786	ExpressionStatement	 
>20787	CallExpression	Sys_UpdateWindows ( W_ALL )
>20788	ArgumentList	W_ALL
>20789	Argument	W_ALL
>20790	Identifier	W_ALL
>20791	Callee	Sys_UpdateWindows
>20792	Identifier	Sys_UpdateWindows
>20793	ExpressionStatement	 
>20794	CallExpression	m_wndToolBar . GetToolBarCtrl ( ) . CheckButton ( ID_PATCH_WIREFRAME , ( g_bPatchWireFrame ) ? TRUE 
>20795	ArgumentList	ID_PATCH_WIREFRAME
>20796	Argument	( g_bPatchWireFrame ) ? TRUE 
>20797	ConditionalExpression	( g_bPatchWireFrame ) ? TRUE 
>20798	Identifier	FALSE
>20799	Identifier	TRUE
>20800	Condition	g_bPatchWireFrame
>20801	Identifier	g_bPatchWireFrame
>20802	Argument	ID_PATCH_WIREFRAME
>20803	Identifier	ID_PATCH_WIREFRAME
>20804	Callee	m_wndToolBar . GetToolBarCtrl ( ) . CheckButton
>20805	MemberAccess	m_wndToolBar . GetToolBarCtrl ( ) . CheckButton
>20806	Identifier	CheckButton
>20807	CallExpression	m_wndToolBar . GetToolBarCtrl ( )
>20808	ArgumentList	 
>20809	Callee	m_wndToolBar . GetToolBarCtrl
>20810	MemberAccess	m_wndToolBar . GetToolBarCtrl
>20811	Identifier	GetToolBarCtrl
>20812	Identifier	m_wndToolBar
>20813	ExpressionStatement	 
>20814	AssignmentExpr	g_bPatchWireFrame ^= 1
>20815	PrimaryExpression	1
>20816	Identifier	g_bPatchWireFrame
>20827	FunctionDef	CMainFrame 
>20828	ParameterList	 
>20829	ReturnType	void
>20830	CompoundStatement	 
>20831	ExpressionStatement	 
>20832	CallExpression	Undo_End ( )
>20833	ArgumentList	 
>20834	Callee	Undo_End
>20835	Identifier	Undo_End
>20836	ExpressionStatement	 
>20837	CallExpression	Undo_EndBrushList ( & selected_brushes )
>20838	ArgumentList	& selected_brushes
>20839	Argument	& selected_brushes
>20840	UnaryOp	& selected_brushes
>20841	Identifier	selected_brushes
>20842	UnaryOperator	&
>20843	Callee	Undo_EndBrushList
>20844	Identifier	Undo_EndBrushList
>20845	ExpressionStatement	 
>20846	CallExpression	Sys_UpdateWindows ( W_ALL )
>20847	ArgumentList	W_ALL
>20848	Argument	W_ALL
>20849	Identifier	W_ALL
>20850	Callee	Sys_UpdateWindows
>20851	Identifier	Sys_UpdateWindows
>20852	ExpressionStatement	 
>20853	CallExpression	Patch_BrushToMesh ( true )
>20854	ArgumentList	true
>20855	Argument	true
>20856	Identifier	true
>20857	Callee	Patch_BrushToMesh
>20858	Identifier	Patch_BrushToMesh
>20859	ExpressionStatement	 
>20860	CallExpression	Undo_AddBrushList ( & selected_brushes )
>20861	ArgumentList	& selected_brushes
>20862	Argument	& selected_brushes
>20863	UnaryOp	& selected_brushes
>20864	Identifier	selected_brushes
>20865	UnaryOperator	&
>20866	Callee	Undo_AddBrushList
>20867	Identifier	Undo_AddBrushList
>20868	ExpressionStatement	 
>20869	CallExpression	Undo_Start ( \"make curve cone\" )
>20870	ArgumentList	\"make curve cone\"
>20871	Argument	\"make curve cone\"
>20872	PrimaryExpression	\"make curve cone\"
>20873	Callee	Undo_Start
>20874	Identifier	Undo_Start
>20881	FunctionDef	CMainFrame 
>20882	ParameterList	 
>20883	ReturnType	void
>20884	CompoundStatement	 
>20885	ExpressionStatement	 
>20886	CallExpression	Undo_End ( )
>20887	ArgumentList	 
>20888	Callee	Undo_End
>20889	Identifier	Undo_End
>20890	ExpressionStatement	 
>20891	CallExpression	Undo_EndBrushList ( & selected_brushes )
>20892	ArgumentList	& selected_brushes
>20893	Argument	& selected_brushes
>20894	UnaryOp	& selected_brushes
>20895	Identifier	selected_brushes
>20896	UnaryOperator	&
>20897	Callee	Undo_EndBrushList
>20898	Identifier	Undo_EndBrushList
>20899	ExpressionStatement	 
>20900	CallExpression	Sys_UpdateWindows ( W_ALL )
>20901	ArgumentList	W_ALL
>20902	Argument	W_ALL
>20903	Identifier	W_ALL
>20904	Callee	Sys_UpdateWindows
>20905	Identifier	Sys_UpdateWindows
>20906	ExpressionStatement	 
>20907	CallExpression	Patch_BrushToMesh ( false )
>20908	ArgumentList	false
>20909	Argument	false
>20910	Identifier	false
>20911	Callee	Patch_BrushToMesh
>20912	Identifier	Patch_BrushToMesh
>20913	ExpressionStatement	 
>20914	CallExpression	Undo_AddBrushList ( & selected_brushes )
>20915	ArgumentList	& selected_brushes
>20916	Argument	& selected_brushes
>20917	UnaryOp	& selected_brushes
>20918	Identifier	selected_brushes
>20919	UnaryOperator	&
>20920	Callee	Undo_AddBrushList
>20921	Identifier	Undo_AddBrushList
>20922	ExpressionStatement	 
>20923	CallExpression	Undo_Start ( \"make curve cylinder\" )
>20924	ArgumentList	\"make curve cylinder\"
>20925	Argument	\"make curve cylinder\"
>20926	PrimaryExpression	\"make curve cylinder\"
>20927	Callee	Undo_Start
>20928	Identifier	Undo_Start
>20935	FunctionDef	CMainFrame 
>20936	ParameterList	 
>20937	ReturnType	void
>20938	CompoundStatement	 
>20939	ExpressionStatement	 
>20940	CallExpression	Sys_UpdateWindows ( W_ALL )
>20941	ArgumentList	W_ALL
>20942	Argument	W_ALL
>20943	Identifier	W_ALL
>20944	Callee	Sys_UpdateWindows
>20945	Identifier	Sys_UpdateWindows
>20946	ExpressionStatement	 
>20947	CallExpression	m_wndToolBar . GetToolBarCtrl ( ) . CheckButton ( ID_PATCH_WELD , ( g_bPatchWeld ) ? TRUE 
>20948	ArgumentList	ID_PATCH_WELD
>20949	Argument	( g_bPatchWeld ) ? TRUE 
>20950	ConditionalExpression	( g_bPatchWeld ) ? TRUE 
>20951	Identifier	FALSE
>20952	Identifier	TRUE
>20953	Condition	g_bPatchWeld
>20954	Identifier	g_bPatchWeld
>20955	Argument	ID_PATCH_WELD
>20956	Identifier	ID_PATCH_WELD
>20957	Callee	m_wndToolBar . GetToolBarCtrl ( ) . CheckButton
>20958	MemberAccess	m_wndToolBar . GetToolBarCtrl ( ) . CheckButton
>20959	Identifier	CheckButton
>20960	CallExpression	m_wndToolBar . GetToolBarCtrl ( )
>20961	ArgumentList	 
>20962	Callee	m_wndToolBar . GetToolBarCtrl
>20963	MemberAccess	m_wndToolBar . GetToolBarCtrl
>20964	Identifier	GetToolBarCtrl
>20965	Identifier	m_wndToolBar
>20966	ExpressionStatement	 
>20967	AssignmentExpr	g_bPatchWeld ^= 1
>20968	PrimaryExpression	1
>20969	Identifier	g_bPatchWeld
>20980	FunctionDef	CMainFrame 
>20981	ParameterList	 
>20982	ReturnType	void
>20983	CompoundStatement	 
>20984	ExpressionStatement	 
>20985	CallExpression	Undo_End ( )
>20986	ArgumentList	 
>20987	Callee	Undo_End
>20988	Identifier	Undo_End
>20989	ExpressionStatement	 
>20990	CallExpression	Undo_EndBrushList ( & selected_brushes )
>20991	ArgumentList	& selected_brushes
>20992	Argument	& selected_brushes
>20993	UnaryOp	& selected_brushes
>20994	Identifier	selected_brushes
>20995	UnaryOperator	&
>20996	Callee	Undo_EndBrushList
>20997	Identifier	Undo_EndBrushList
>20998	ExpressionStatement	 
>20999	CallExpression	Sys_UpdateWindows ( W_ALL )
>21000	ArgumentList	W_ALL
>21001	Argument	W_ALL
>21002	Identifier	W_ALL
>21003	Callee	Sys_UpdateWindows
>21004	Identifier	Sys_UpdateWindows
>21005	ExpressionStatement	 
>21006	CallExpression	Patch_BrushToMesh ( false , true , false )
>21007	ArgumentList	false
>21008	Argument	false
>21009	Identifier	false
>21010	Argument	true
>21011	Identifier	true
>21012	Argument	false
>21013	Identifier	false
>21014	Callee	Patch_BrushToMesh
>21015	Identifier	Patch_BrushToMesh
>21016	ExpressionStatement	 
>21017	CallExpression	Undo_AddBrushList ( & selected_brushes )
>21018	ArgumentList	& selected_brushes
>21019	Argument	& selected_brushes
>21020	UnaryOp	& selected_brushes
>21021	Identifier	selected_brushes
>21022	UnaryOperator	&
>21023	Callee	Undo_AddBrushList
>21024	Identifier	Undo_AddBrushList
>21025	ExpressionStatement	 
>21026	CallExpression	Undo_Start ( \"make bevel\" )
>21027	ArgumentList	\"make bevel\"
>21028	Argument	\"make bevel\"
>21029	PrimaryExpression	\"make bevel\"
>21030	Callee	Undo_Start
>21031	Identifier	Undo_Start
>21039	FunctionDef	CMainFrame 
>21040	ParameterList	 
>21041	ReturnType	void
>21042	CompoundStatement	 
>21043	ExpressionStatement	 
>21044	CallExpression	Undo_End ( )
>21045	ArgumentList	 
>21046	Callee	Undo_End
>21047	Identifier	Undo_End
>21048	ExpressionStatement	 
>21049	CallExpression	Undo_EndBrushList ( & selected_brushes )
>21050	ArgumentList	& selected_brushes
>21051	Argument	& selected_brushes
>21052	UnaryOp	& selected_brushes
>21053	Identifier	selected_brushes
>21054	UnaryOperator	&
>21055	Callee	Undo_EndBrushList
>21056	Identifier	Undo_EndBrushList
>21057	ExpressionStatement	 
>21058	CallExpression	Sys_UpdateWindows ( W_ALL )
>21059	ArgumentList	W_ALL
>21060	Argument	W_ALL
>21061	Identifier	W_ALL
>21062	Callee	Sys_UpdateWindows
>21063	Identifier	Sys_UpdateWindows
>21064	ExpressionStatement	 
>21065	CallExpression	Patch_BrushToMesh ( false , false , true )
>21066	ArgumentList	false
>21067	Argument	true
>21068	Identifier	true
>21069	Argument	false
>21070	Identifier	false
>21071	Argument	false
>21072	Identifier	false
>21073	Callee	Patch_BrushToMesh
>21074	Identifier	Patch_BrushToMesh
>21075	ExpressionStatement	 
>21076	CallExpression	Undo_AddBrushList ( & selected_brushes )
>21077	ArgumentList	& selected_brushes
>21078	Argument	& selected_brushes
>21079	UnaryOp	& selected_brushes
>21080	Identifier	selected_brushes
>21081	UnaryOperator	&
>21082	Callee	Undo_AddBrushList
>21083	Identifier	Undo_AddBrushList
>21084	ExpressionStatement	 
>21085	CallExpression	Undo_Start ( \"make end cap\" )
>21086	ArgumentList	\"make end cap\"
>21087	Argument	\"make end cap\"
>21088	PrimaryExpression	\"make end cap\"
>21089	Callee	Undo_Start
>21090	Identifier	Undo_Start
>21098	FunctionDef	CMainFrame 
>21099	ParameterList	 
>21100	ReturnType	void
>21101	CompoundStatement	 
>21105	FunctionDef	CMainFrame 
>21106	ParameterList	 
>21107	ReturnType	void
>21108	CompoundStatement	 
>21112	FunctionDef	CMainFrame 
>21113	ParameterList	 
>21114	ReturnType	void
>21115	CompoundStatement	 
>21116	ExpressionStatement	 
>21117	CallExpression	Sys_UpdateWindows ( W_ALL )
>21118	ArgumentList	W_ALL
>21119	Argument	W_ALL
>21120	Identifier	W_ALL
>21121	Callee	Sys_UpdateWindows
>21122	Identifier	Sys_UpdateWindows
>21123	ExpressionStatement	 
>21124	CallExpression	m_wndToolBar . GetToolBarCtrl ( ) . CheckButton ( ID_PATCH_DRILLDOWN , ( g_bPatchDrillDown ) ? TRUE 
>21125	ArgumentList	ID_PATCH_DRILLDOWN
>21126	Argument	( g_bPatchDrillDown ) ? TRUE 
>21127	ConditionalExpression	( g_bPatchDrillDown ) ? TRUE 
>21128	Identifier	FALSE
>21129	Identifier	TRUE
>21130	Condition	g_bPatchDrillDown
>21131	Identifier	g_bPatchDrillDown
>21132	Argument	ID_PATCH_DRILLDOWN
>21133	Identifier	ID_PATCH_DRILLDOWN
>21134	Callee	m_wndToolBar . GetToolBarCtrl ( ) . CheckButton
>21135	MemberAccess	m_wndToolBar . GetToolBarCtrl ( ) . CheckButton
>21136	Identifier	CheckButton
>21137	CallExpression	m_wndToolBar . GetToolBarCtrl ( )
>21138	ArgumentList	 
>21139	Callee	m_wndToolBar . GetToolBarCtrl
>21140	MemberAccess	m_wndToolBar . GetToolBarCtrl
>21141	Identifier	GetToolBarCtrl
>21142	Identifier	m_wndToolBar
>21143	ExpressionStatement	 
>21144	AssignmentExpr	g_bPatchDrillDown ^= 1
>21145	PrimaryExpression	1
>21146	Identifier	g_bPatchDrillDown
>21157	FunctionDef	CMainFrame 
>21158	ParameterList	 
>21159	ReturnType	void
>21160	CompoundStatement	 
>21161	ExpressionStatement	 
>21162	CallExpression	Undo_End ( )
>21163	ArgumentList	 
>21164	Callee	Undo_End
>21165	Identifier	Undo_End
>21166	ExpressionStatement	 
>21167	CallExpression	Undo_EndBrushList ( & selected_brushes )
>21168	ArgumentList	& selected_brushes
>21169	Argument	& selected_brushes
>21170	UnaryOp	& selected_brushes
>21171	Identifier	selected_brushes
>21172	UnaryOperator	&
>21173	Callee	Undo_EndBrushList
>21174	Identifier	Undo_EndBrushList
>21175	ExpressionStatement	 
>21176	CallExpression	Sys_UpdateWindows ( W_ALL )
>21177	ArgumentList	W_ALL
>21178	Argument	W_ALL
>21179	Identifier	W_ALL
>21180	Callee	Sys_UpdateWindows
>21181	Identifier	Sys_UpdateWindows
>21182	ExpressionStatement	 
>21183	CallExpression	Patch_AdjustSelected ( true , true , true )
>21184	ArgumentList	true
>21185	Argument	true
>21186	Identifier	true
>21187	Argument	true
>21188	Identifier	true
>21189	Argument	true
>21190	Identifier	true
>21191	Callee	Patch_AdjustSelected
>21192	Identifier	Patch_AdjustSelected
>21193	ExpressionStatement	 
>21194	CallExpression	Undo_AddBrushList ( & selected_brushes )
>21195	ArgumentList	& selected_brushes
>21196	Argument	& selected_brushes
>21197	UnaryOp	& selected_brushes
>21198	Identifier	selected_brushes
>21199	UnaryOperator	&
>21200	Callee	Undo_AddBrushList
>21201	Identifier	Undo_AddBrushList
>21202	ExpressionStatement	 
>21203	CallExpression	Undo_Start ( \"insert colum\" )
>21204	ArgumentList	\"insert colum\"
>21205	Argument	\"insert colum\"
>21206	PrimaryExpression	\"insert colum\"
>21207	Callee	Undo_Start
>21208	Identifier	Undo_Start
>21215	FunctionDef	CMainFrame 
>21216	ParameterList	 
>21217	ReturnType	void
>21218	CompoundStatement	 
>21219	ExpressionStatement	 
>21220	CallExpression	Undo_End ( )
>21221	ArgumentList	 
>21222	Callee	Undo_End
>21223	Identifier	Undo_End
>21224	ExpressionStatement	 
>21225	CallExpression	Undo_EndBrushList ( & selected_brushes )
>21226	ArgumentList	& selected_brushes
>21227	Argument	& selected_brushes
>21228	UnaryOp	& selected_brushes
>21229	Identifier	selected_brushes
>21230	UnaryOperator	&
>21231	Callee	Undo_EndBrushList
>21232	Identifier	Undo_EndBrushList
>21233	ExpressionStatement	 
>21234	CallExpression	Sys_UpdateWindows ( W_ALL )
>21235	ArgumentList	W_ALL
>21236	Argument	W_ALL
>21237	Identifier	W_ALL
>21238	Callee	Sys_UpdateWindows
>21239	Identifier	Sys_UpdateWindows
>21240	ExpressionStatement	 
>21241	CallExpression	Patch_AdjustSelected ( true , false , true )
>21242	ArgumentList	true
>21243	Argument	true
>21244	Identifier	true
>21245	Argument	false
>21246	Identifier	false
>21247	Argument	true
>21248	Identifier	true
>21249	Callee	Patch_AdjustSelected
>21250	Identifier	Patch_AdjustSelected
>21251	ExpressionStatement	 
>21252	CallExpression	Undo_AddBrushList ( & selected_brushes )
>21253	ArgumentList	& selected_brushes
>21254	Argument	& selected_brushes
>21255	UnaryOp	& selected_brushes
>21256	Identifier	selected_brushes
>21257	UnaryOperator	&
>21258	Callee	Undo_AddBrushList
>21259	Identifier	Undo_AddBrushList
>21260	ExpressionStatement	 
>21261	CallExpression	Undo_Start ( \"insert row\" )
>21262	ArgumentList	\"insert row\"
>21263	Argument	\"insert row\"
>21264	PrimaryExpression	\"insert row\"
>21265	Callee	Undo_Start
>21266	Identifier	Undo_Start
>21274	FunctionDef	CMainFrame 
>21275	ParameterList	 
>21276	ReturnType	void
>21277	CompoundStatement	 
>21278	ExpressionStatement	 
>21279	CallExpression	Undo_End ( )
>21280	ArgumentList	 
>21281	Callee	Undo_End
>21282	Identifier	Undo_End
>21283	ExpressionStatement	 
>21284	CallExpression	Undo_EndBrushList ( & selected_brushes )
>21285	ArgumentList	& selected_brushes
>21286	Argument	& selected_brushes
>21287	UnaryOp	& selected_brushes
>21288	Identifier	selected_brushes
>21289	UnaryOperator	&
>21290	Callee	Undo_EndBrushList
>21291	Identifier	Undo_EndBrushList
>21292	ExpressionStatement	 
>21293	CallExpression	Sys_UpdateWindows ( W_ALL )
>21294	ArgumentList	W_ALL
>21295	Argument	W_ALL
>21296	Identifier	W_ALL
>21297	Callee	Sys_UpdateWindows
>21298	Identifier	Sys_UpdateWindows
>21299	ExpressionStatement	 
>21300	CallExpression	Patch_AdjustSelected ( false , true , true )
>21301	ArgumentList	false
>21302	Argument	true
>21303	Identifier	true
>21304	Argument	true
>21305	Identifier	true
>21306	Argument	false
>21307	Identifier	false
>21308	Callee	Patch_AdjustSelected
>21309	Identifier	Patch_AdjustSelected
>21310	ExpressionStatement	 
>21311	CallExpression	Undo_AddBrushList ( & selected_brushes )
>21312	ArgumentList	& selected_brushes
>21313	Argument	& selected_brushes
>21314	UnaryOp	& selected_brushes
>21315	Identifier	selected_brushes
>21316	UnaryOperator	&
>21317	Callee	Undo_AddBrushList
>21318	Identifier	Undo_AddBrushList
>21319	ExpressionStatement	 
>21320	CallExpression	Undo_Start ( \"delete column\" )
>21321	ArgumentList	\"delete column\"
>21322	Argument	\"delete column\"
>21323	PrimaryExpression	\"delete column\"
>21324	Callee	Undo_Start
>21325	Identifier	Undo_Start
>21333	FunctionDef	CMainFrame 
>21334	ParameterList	 
>21335	ReturnType	void
>21336	CompoundStatement	 
>21337	ExpressionStatement	 
>21338	CallExpression	Undo_End ( )
>21339	ArgumentList	 
>21340	Callee	Undo_End
>21341	Identifier	Undo_End
>21342	ExpressionStatement	 
>21343	CallExpression	Undo_EndBrushList ( & selected_brushes )
>21344	ArgumentList	& selected_brushes
>21345	Argument	& selected_brushes
>21346	UnaryOp	& selected_brushes
>21347	Identifier	selected_brushes
>21348	UnaryOperator	&
>21349	Callee	Undo_EndBrushList
>21350	Identifier	Undo_EndBrushList
>21351	ExpressionStatement	 
>21352	CallExpression	Sys_UpdateWindows ( W_ALL )
>21353	ArgumentList	W_ALL
>21354	Argument	W_ALL
>21355	Identifier	W_ALL
>21356	Callee	Sys_UpdateWindows
>21357	Identifier	Sys_UpdateWindows
>21358	ExpressionStatement	 
>21359	CallExpression	Patch_AdjustSelected ( false , false , true )
>21360	ArgumentList	false
>21361	Argument	true
>21362	Identifier	true
>21363	Argument	false
>21364	Identifier	false
>21365	Argument	false
>21366	Identifier	false
>21367	Callee	Patch_AdjustSelected
>21368	Identifier	Patch_AdjustSelected
>21369	ExpressionStatement	 
>21370	CallExpression	Undo_AddBrushList ( & selected_brushes )
>21371	ArgumentList	& selected_brushes
>21372	Argument	& selected_brushes
>21373	UnaryOp	& selected_brushes
>21374	Identifier	selected_brushes
>21375	UnaryOperator	&
>21376	Callee	Undo_AddBrushList
>21377	Identifier	Undo_AddBrushList
>21378	ExpressionStatement	 
>21379	CallExpression	Undo_Start ( \"delete row\" )
>21380	ArgumentList	\"delete row\"
>21381	Argument	\"delete row\"
>21382	PrimaryExpression	\"delete row\"
>21383	Callee	Undo_Start
>21384	Identifier	Undo_Start
>21392	FunctionDef	CMainFrame 
>21393	ParameterList	 
>21394	ReturnType	void
>21395	CompoundStatement	 
>21396	ExpressionStatement	 
>21397	CallExpression	Undo_End ( )
>21398	ArgumentList	 
>21399	Callee	Undo_End
>21400	Identifier	Undo_End
>21401	ExpressionStatement	 
>21402	CallExpression	Undo_EndBrushList ( & selected_brushes )
>21403	ArgumentList	& selected_brushes
>21404	Argument	& selected_brushes
>21405	UnaryOp	& selected_brushes
>21406	Identifier	selected_brushes
>21407	UnaryOperator	&
>21408	Callee	Undo_EndBrushList
>21409	Identifier	Undo_EndBrushList
>21410	ExpressionStatement	 
>21411	CallExpression	Sys_UpdateWindows ( W_ALL )
>21412	ArgumentList	W_ALL
>21413	Argument	W_ALL
>21414	Identifier	W_ALL
>21415	Callee	Sys_UpdateWindows
>21416	Identifier	Sys_UpdateWindows
>21417	ExpressionStatement	 
>21418	CallExpression	Patch_AdjustSelected ( true , true , true )
>21419	ArgumentList	true
>21420	Argument	true
>21421	Identifier	true
>21422	Argument	true
>21423	Identifier	true
>21424	Argument	true
>21425	Identifier	true
>21426	Callee	Patch_AdjustSelected
>21427	Identifier	Patch_AdjustSelected
>21428	ExpressionStatement	 
>21429	CallExpression	Undo_AddBrushList ( & selected_brushes )
>21430	ArgumentList	& selected_brushes
>21431	Argument	& selected_brushes
>21432	UnaryOp	& selected_brushes
>21433	Identifier	selected_brushes
>21434	UnaryOperator	&
>21435	Callee	Undo_AddBrushList
>21436	Identifier	Undo_AddBrushList
>21437	ExpressionStatement	 
>21438	CallExpression	Undo_Start ( \"add (2) columns\" )
>21439	ArgumentList	\"add (2) columns\"
>21440	Argument	\"add (2) columns\"
>21441	PrimaryExpression	\"add (2) columns\"
>21442	Callee	Undo_Start
>21443	Identifier	Undo_Start
>21450	FunctionDef	CMainFrame 
>21451	ParameterList	 
>21452	ReturnType	void
>21453	CompoundStatement	 
>21454	ExpressionStatement	 
>21455	CallExpression	Undo_End ( )
>21456	ArgumentList	 
>21457	Callee	Undo_End
>21458	Identifier	Undo_End
>21459	ExpressionStatement	 
>21460	CallExpression	Undo_EndBrushList ( & selected_brushes )
>21461	ArgumentList	& selected_brushes
>21462	Argument	& selected_brushes
>21463	UnaryOp	& selected_brushes
>21464	Identifier	selected_brushes
>21465	UnaryOperator	&
>21466	Callee	Undo_EndBrushList
>21467	Identifier	Undo_EndBrushList
>21468	ExpressionStatement	 
>21469	CallExpression	Sys_UpdateWindows ( W_ALL )
>21470	ArgumentList	W_ALL
>21471	Argument	W_ALL
>21472	Identifier	W_ALL
>21473	Callee	Sys_UpdateWindows
>21474	Identifier	Sys_UpdateWindows
>21475	ExpressionStatement	 
>21476	CallExpression	Patch_AdjustSelected ( true , false , true )
>21477	ArgumentList	true
>21478	Argument	true
>21479	Identifier	true
>21480	Argument	false
>21481	Identifier	false
>21482	Argument	true
>21483	Identifier	true
>21484	Callee	Patch_AdjustSelected
>21485	Identifier	Patch_AdjustSelected
>21486	ExpressionStatement	 
>21487	CallExpression	Undo_AddBrushList ( & selected_brushes )
>21488	ArgumentList	& selected_brushes
>21489	Argument	& selected_brushes
>21490	UnaryOp	& selected_brushes
>21491	Identifier	selected_brushes
>21492	UnaryOperator	&
>21493	Callee	Undo_AddBrushList
>21494	Identifier	Undo_AddBrushList
>21495	ExpressionStatement	 
>21496	CallExpression	Undo_Start ( \"add (2) rows\" )
>21497	ArgumentList	\"add (2) rows\"
>21498	Argument	\"add (2) rows\"
>21499	PrimaryExpression	\"add (2) rows\"
>21500	Callee	Undo_Start
>21501	Identifier	Undo_Start
>21509	FunctionDef	CMainFrame 
>21510	ParameterList	 
>21511	ReturnType	void
>21512	CompoundStatement	 
>21513	ExpressionStatement	 
>21514	CallExpression	Undo_End ( )
>21515	ArgumentList	 
>21516	Callee	Undo_End
>21517	Identifier	Undo_End
>21518	ExpressionStatement	 
>21519	CallExpression	Undo_EndBrushList ( & selected_brushes )
>21520	ArgumentList	& selected_brushes
>21521	Argument	& selected_brushes
>21522	UnaryOp	& selected_brushes
>21523	Identifier	selected_brushes
>21524	UnaryOperator	&
>21525	Callee	Undo_EndBrushList
>21526	Identifier	Undo_EndBrushList
>21527	ExpressionStatement	 
>21528	CallExpression	Sys_UpdateWindows ( W_ALL )
>21529	ArgumentList	W_ALL
>21530	Argument	W_ALL
>21531	Identifier	W_ALL
>21532	Callee	Sys_UpdateWindows
>21533	Identifier	Sys_UpdateWindows
>21534	ExpressionStatement	 
>21535	CallExpression	Patch_AdjustSelected ( true , true , false )
>21536	ArgumentList	true
>21537	Argument	false
>21538	Identifier	false
>21539	Argument	true
>21540	Identifier	true
>21541	Argument	true
>21542	Identifier	true
>21543	Callee	Patch_AdjustSelected
>21544	Identifier	Patch_AdjustSelected
>21545	ExpressionStatement	 
>21546	CallExpression	Undo_AddBrushList ( & selected_brushes )
>21547	ArgumentList	& selected_brushes
>21548	Argument	& selected_brushes
>21549	UnaryOp	& selected_brushes
>21550	Identifier	selected_brushes
>21551	UnaryOperator	&
>21552	Callee	Undo_AddBrushList
>21553	Identifier	Undo_AddBrushList
>21554	ExpressionStatement	 
>21555	CallExpression	Undo_Start ( \"insert (2) columns\" )
>21556	ArgumentList	\"insert (2) columns\"
>21557	Argument	\"insert (2) columns\"
>21558	PrimaryExpression	\"insert (2) columns\"
>21559	Callee	Undo_Start
>21560	Identifier	Undo_Start
>21568	FunctionDef	CMainFrame 
>21569	ParameterList	 
>21570	ReturnType	void
>21571	CompoundStatement	 
>21572	ExpressionStatement	 
>21573	CallExpression	Undo_End ( )
>21574	ArgumentList	 
>21575	Callee	Undo_End
>21576	Identifier	Undo_End
>21577	ExpressionStatement	 
>21578	CallExpression	Undo_EndBrushList ( & selected_brushes )
>21579	ArgumentList	& selected_brushes
>21580	Argument	& selected_brushes
>21581	UnaryOp	& selected_brushes
>21582	Identifier	selected_brushes
>21583	UnaryOperator	&
>21584	Callee	Undo_EndBrushList
>21585	Identifier	Undo_EndBrushList
>21586	ExpressionStatement	 
>21587	CallExpression	Sys_UpdateWindows ( W_ALL )
>21588	ArgumentList	W_ALL
>21589	Argument	W_ALL
>21590	Identifier	W_ALL
>21591	Callee	Sys_UpdateWindows
>21592	Identifier	Sys_UpdateWindows
>21593	ExpressionStatement	 
>21594	CallExpression	Patch_AdjustSelected ( true , false , false )
>21595	ArgumentList	true
>21596	Argument	false
>21597	Identifier	false
>21598	Argument	false
>21599	Identifier	false
>21600	Argument	true
>21601	Identifier	true
>21602	Callee	Patch_AdjustSelected
>21603	Identifier	Patch_AdjustSelected
>21604	ExpressionStatement	 
>21605	CallExpression	Undo_AddBrushList ( & selected_brushes )
>21606	ArgumentList	& selected_brushes
>21607	Argument	& selected_brushes
>21608	UnaryOp	& selected_brushes
>21609	Identifier	selected_brushes
>21610	UnaryOperator	&
>21611	Callee	Undo_AddBrushList
>21612	Identifier	Undo_AddBrushList
>21613	ExpressionStatement	 
>21614	CallExpression	Undo_Start ( \"insert (2) rows\" )
>21615	ArgumentList	\"insert (2) rows\"
>21616	Argument	\"insert (2) rows\"
>21617	PrimaryExpression	\"insert (2) rows\"
>21618	Callee	Undo_Start
>21619	Identifier	Undo_Start
>21627	FunctionDef	CMainFrame 
>21628	ParameterList	 
>21629	ReturnType	void
>21630	CompoundStatement	 
>21631	ExpressionStatement	 
>21632	CallExpression	Patch_ToggleInverted ( )
>21633	ArgumentList	 
>21634	Callee	Patch_ToggleInverted
>21635	Identifier	Patch_ToggleInverted
>21639	FunctionDef	CMainFrame 
>21640	ParameterList	 
>21641	ReturnType	void
>21642	CompoundStatement	 
>21643	ExpressionStatement	 
>21644	CallExpression	Patch_InvertTexture ( false )
>21645	ArgumentList	false
>21646	Argument	false
>21647	Identifier	false
>21648	Callee	Patch_InvertTexture
>21649	Identifier	Patch_InvertTexture
>21654	FunctionDef	CMainFrame 
>21655	ParameterList	 
>21656	ReturnType	void
>21657	CompoundStatement	 
>21658	ExpressionStatement	 
>21659	CallExpression	Patch_InvertTexture ( true )
>21660	ArgumentList	true
>21661	Argument	true
>21662	Identifier	true
>21663	Callee	Patch_InvertTexture
>21664	Identifier	Patch_InvertTexture
>21669	FunctionDef	CMainFrame 
>21670	ParameterList	 
>21671	ReturnType	void
>21672	CompoundStatement	 
>21673	ExpressionStatement	 
>21674	CallExpression	Undo_End ( )
>21675	ArgumentList	 
>21676	Callee	Undo_End
>21677	Identifier	Undo_End
>21678	ExpressionStatement	 
>21679	CallExpression	Undo_EndBrushList ( & selected_brushes )
>21680	ArgumentList	& selected_brushes
>21681	Argument	& selected_brushes
>21682	UnaryOp	& selected_brushes
>21683	Identifier	selected_brushes
>21684	UnaryOperator	&
>21685	Callee	Undo_EndBrushList
>21686	Identifier	Undo_EndBrushList
>21687	ExpressionStatement	 
>21688	CallExpression	Sys_UpdateWindows ( W_ALL )
>21689	ArgumentList	W_ALL
>21690	Argument	W_ALL
>21691	Identifier	W_ALL
>21692	Callee	Sys_UpdateWindows
>21693	Identifier	Sys_UpdateWindows
>21694	ExpressionStatement	 
>21695	CallExpression	Patch_AdjustSelected ( false , true , true )
>21696	ArgumentList	false
>21697	Argument	true
>21698	Identifier	true
>21699	Argument	true
>21700	Identifier	true
>21701	Argument	false
>21702	Identifier	false
>21703	Callee	Patch_AdjustSelected
>21704	Identifier	Patch_AdjustSelected
>21705	ExpressionStatement	 
>21706	CallExpression	Undo_AddBrushList ( & selected_brushes )
>21707	ArgumentList	& selected_brushes
>21708	Argument	& selected_brushes
>21709	UnaryOp	& selected_brushes
>21710	Identifier	selected_brushes
>21711	UnaryOperator	&
>21712	Callee	Undo_AddBrushList
>21713	Identifier	Undo_AddBrushList
>21714	ExpressionStatement	 
>21715	CallExpression	Undo_Start ( \"delete first (2) columns\" )
>21716	ArgumentList	\"delete first (2) columns\"
>21717	Argument	\"delete first (2) columns\"
>21718	PrimaryExpression	\"delete first (2) columns\"
>21719	Callee	Undo_Start
>21720	Identifier	Undo_Start
>21728	FunctionDef	CMainFrame 
>21729	ParameterList	 
>21730	ReturnType	void
>21731	CompoundStatement	 
>21732	ExpressionStatement	 
>21733	CallExpression	Undo_End ( )
>21734	ArgumentList	 
>21735	Callee	Undo_End
>21736	Identifier	Undo_End
>21737	ExpressionStatement	 
>21738	CallExpression	Undo_EndBrushList ( & selected_brushes )
>21739	ArgumentList	& selected_brushes
>21740	Argument	& selected_brushes
>21741	UnaryOp	& selected_brushes
>21742	Identifier	selected_brushes
>21743	UnaryOperator	&
>21744	Callee	Undo_EndBrushList
>21745	Identifier	Undo_EndBrushList
>21746	ExpressionStatement	 
>21747	CallExpression	Sys_UpdateWindows ( W_ALL )
>21748	ArgumentList	W_ALL
>21749	Argument	W_ALL
>21750	Identifier	W_ALL
>21751	Callee	Sys_UpdateWindows
>21752	Identifier	Sys_UpdateWindows
>21753	ExpressionStatement	 
>21754	CallExpression	Patch_AdjustSelected ( false , false , true )
>21755	ArgumentList	false
>21756	Argument	true
>21757	Identifier	true
>21758	Argument	false
>21759	Identifier	false
>21760	Argument	false
>21761	Identifier	false
>21762	Callee	Patch_AdjustSelected
>21763	Identifier	Patch_AdjustSelected
>21764	ExpressionStatement	 
>21765	CallExpression	Undo_AddBrushList ( & selected_brushes )
>21766	ArgumentList	& selected_brushes
>21767	Argument	& selected_brushes
>21768	UnaryOp	& selected_brushes
>21769	Identifier	selected_brushes
>21770	UnaryOperator	&
>21771	Callee	Undo_AddBrushList
>21772	Identifier	Undo_AddBrushList
>21773	ExpressionStatement	 
>21774	CallExpression	Undo_Start ( \"delete first (2) rows\" )
>21775	ArgumentList	\"delete first (2) rows\"
>21776	Argument	\"delete first (2) rows\"
>21777	PrimaryExpression	\"delete first (2) rows\"
>21778	Callee	Undo_Start
>21779	Identifier	Undo_Start
>21787	FunctionDef	CMainFrame 
>21788	ParameterList	 
>21789	ReturnType	void
>21790	CompoundStatement	 
>21791	ExpressionStatement	 
>21792	CallExpression	Undo_End ( )
>21793	ArgumentList	 
>21794	Callee	Undo_End
>21795	Identifier	Undo_End
>21796	ExpressionStatement	 
>21797	CallExpression	Undo_EndBrushList ( & selected_brushes )
>21798	ArgumentList	& selected_brushes
>21799	Argument	& selected_brushes
>21800	UnaryOp	& selected_brushes
>21801	Identifier	selected_brushes
>21802	UnaryOperator	&
>21803	Callee	Undo_EndBrushList
>21804	Identifier	Undo_EndBrushList
>21805	ExpressionStatement	 
>21806	CallExpression	Sys_UpdateWindows ( W_ALL )
>21807	ArgumentList	W_ALL
>21808	Argument	W_ALL
>21809	Identifier	W_ALL
>21810	Callee	Sys_UpdateWindows
>21811	Identifier	Sys_UpdateWindows
>21812	ExpressionStatement	 
>21813	CallExpression	Patch_AdjustSelected ( false , true , false )
>21814	ArgumentList	false
>21815	Argument	false
>21816	Identifier	false
>21817	Argument	true
>21818	Identifier	true
>21819	Argument	false
>21820	Identifier	false
>21821	Callee	Patch_AdjustSelected
>21822	Identifier	Patch_AdjustSelected
>21823	ExpressionStatement	 
>21824	CallExpression	Undo_AddBrushList ( & selected_brushes )
>21825	ArgumentList	& selected_brushes
>21826	Argument	& selected_brushes
>21827	UnaryOp	& selected_brushes
>21828	Identifier	selected_brushes
>21829	UnaryOperator	&
>21830	Callee	Undo_AddBrushList
>21831	Identifier	Undo_AddBrushList
>21832	ExpressionStatement	 
>21833	CallExpression	Undo_Start ( \"delete last (2) columns\" )
>21834	ArgumentList	\"delete last (2) columns\"
>21835	Argument	\"delete last (2) columns\"
>21836	PrimaryExpression	\"delete last (2) columns\"
>21837	Callee	Undo_Start
>21838	Identifier	Undo_Start
>21846	FunctionDef	CMainFrame 
>21847	ParameterList	 
>21848	ReturnType	void
>21849	CompoundStatement	 
>21850	ExpressionStatement	 
>21851	CallExpression	Undo_End ( )
>21852	ArgumentList	 
>21853	Callee	Undo_End
>21854	Identifier	Undo_End
>21855	ExpressionStatement	 
>21856	CallExpression	Undo_EndBrushList ( & selected_brushes )
>21857	ArgumentList	& selected_brushes
>21858	Argument	& selected_brushes
>21859	UnaryOp	& selected_brushes
>21860	Identifier	selected_brushes
>21861	UnaryOperator	&
>21862	Callee	Undo_EndBrushList
>21863	Identifier	Undo_EndBrushList
>21864	ExpressionStatement	 
>21865	CallExpression	Sys_UpdateWindows ( W_ALL )
>21866	ArgumentList	W_ALL
>21867	Argument	W_ALL
>21868	Identifier	W_ALL
>21869	Callee	Sys_UpdateWindows
>21870	Identifier	Sys_UpdateWindows
>21871	ExpressionStatement	 
>21872	CallExpression	Patch_AdjustSelected ( false , false , false )
>21873	ArgumentList	false
>21874	Argument	false
>21875	Identifier	false
>21876	Argument	false
>21877	Identifier	false
>21878	Argument	false
>21879	Identifier	false
>21880	Callee	Patch_AdjustSelected
>21881	Identifier	Patch_AdjustSelected
>21882	ExpressionStatement	 
>21883	CallExpression	Undo_AddBrushList ( & selected_brushes )
>21884	ArgumentList	& selected_brushes
>21885	Argument	& selected_brushes
>21886	UnaryOp	& selected_brushes
>21887	Identifier	selected_brushes
>21888	UnaryOperator	&
>21889	Callee	Undo_AddBrushList
>21890	Identifier	Undo_AddBrushList
>21891	ExpressionStatement	 
>21892	CallExpression	Undo_Start ( \"delete last (2) rows\" )
>21893	ArgumentList	\"delete last (2) rows\"
>21894	Argument	\"delete last (2) rows\"
>21895	PrimaryExpression	\"delete last (2) rows\"
>21896	Callee	Undo_Start
>21897	Identifier	Undo_Start
>21904	FunctionDef	CMainFrame 
>21905	ParameterList	 
>21906	ReturnType	void
>21907	CompoundStatement	 
>21908	ExpressionStatement	 
>21909	CallExpression	Sys_UpdateWindows ( W_ALL )
>21910	ArgumentList	W_ALL
>21911	Argument	W_ALL
>21912	Identifier	W_ALL
>21913	Callee	Sys_UpdateWindows
>21914	Identifier	Sys_UpdateWindows
>21915	ExpressionStatement	 
>21916	CallExpression	m_wndToolBar . GetToolBarCtrl ( ) . CheckButton ( ID_PATCH_BEND , ( g_bPatchBendMode ) ? TRUE 
>21917	ArgumentList	ID_PATCH_BEND
>21918	Argument	( g_bPatchBendMode ) ? TRUE 
>21919	ConditionalExpression	( g_bPatchBendMode ) ? TRUE 
>21920	Identifier	FALSE
>21921	Identifier	TRUE
>21922	Condition	g_bPatchBendMode
>21923	Identifier	g_bPatchBendMode
>21924	Argument	ID_PATCH_BEND
>21925	Identifier	ID_PATCH_BEND
>21926	Callee	m_wndToolBar . GetToolBarCtrl ( ) . CheckButton
>21927	MemberAccess	m_wndToolBar . GetToolBarCtrl ( ) . CheckButton
>21928	Identifier	CheckButton
>21929	CallExpression	m_wndToolBar . GetToolBarCtrl ( )
>21930	ArgumentList	 
>21931	Callee	m_wndToolBar . GetToolBarCtrl
>21932	MemberAccess	m_wndToolBar . GetToolBarCtrl
>21933	Identifier	GetToolBarCtrl
>21934	Identifier	m_wndToolBar
>21935	ExpressionStatement	 
>21936	CallExpression	Patch_BendToggle ( )
>21937	ArgumentList	 
>21938	Callee	Patch_BendToggle
>21939	Identifier	Patch_BendToggle
>21950	FunctionDef	CMainFrame 
>21951	ParameterList	 
>21952	ReturnType	void
>21953	CompoundStatement	 
>21954	ExpressionStatement	 
>21955	CallExpression	Sys_UpdateWindows ( W_ALL )
>21956	ArgumentList	W_ALL
>21957	Argument	W_ALL
>21958	Identifier	W_ALL
>21959	Callee	Sys_UpdateWindows
>21960	Identifier	Sys_UpdateWindows
>21961	ExpressionStatement	 
>21962	CallExpression	m_wndToolBar . GetToolBarCtrl ( ) . CheckButton ( ID_PATCH_INSDEL , ( g_bPatchInsertMode ) ? TRUE 
>21963	ArgumentList	ID_PATCH_INSDEL
>21964	Argument	( g_bPatchInsertMode ) ? TRUE 
>21965	ConditionalExpression	( g_bPatchInsertMode ) ? TRUE 
>21966	Identifier	FALSE
>21967	Identifier	TRUE
>21968	Condition	g_bPatchInsertMode
>21969	Identifier	g_bPatchInsertMode
>21970	Argument	ID_PATCH_INSDEL
>21971	Identifier	ID_PATCH_INSDEL
>21972	Callee	m_wndToolBar . GetToolBarCtrl ( ) . CheckButton
>21973	MemberAccess	m_wndToolBar . GetToolBarCtrl ( ) . CheckButton
>21974	Identifier	CheckButton
>21975	CallExpression	m_wndToolBar . GetToolBarCtrl ( )
>21976	ArgumentList	 
>21977	Callee	m_wndToolBar . GetToolBarCtrl
>21978	MemberAccess	m_wndToolBar . GetToolBarCtrl
>21979	Identifier	GetToolBarCtrl
>21980	Identifier	m_wndToolBar
>21981	ExpressionStatement	 
>21982	CallExpression	Patch_InsDelToggle ( )
>21983	ArgumentList	 
>21984	Callee	Patch_InsDelToggle
>21985	Identifier	Patch_InsDelToggle
>21996	FunctionDef	CMainFrame 
>21997	ParameterList	 
>21998	ReturnType	void
>21999	CompoundStatement	 
>22003	FunctionDef	CMainFrame 
>22004	ParameterList	 
>22005	ReturnType	void
>22006	CompoundStatement	 
>22007	IfStatement	if ( g_bPatchBendMode )
>22008	ElseStatement	else
>22009	IfStatement	if ( g_bPatchInsertMode )
>22010	ElseStatement	else
>22011	CompoundStatement	 
>22012	IfStatement	if ( b != & selected_brushes )
>22013	CompoundStatement	 
>22014	IfStatement	if ( strcmpi ( b -> owner -> eclass -> name , \"worldspawn\" ) != 0 )
>22015	CompoundStatement	 
>22016	ExpressionStatement	 
>22017	CallExpression	Sys_UpdateWindows ( W_ALL )
>22018	ArgumentList	W_ALL
>22019	Argument	W_ALL
>22020	Identifier	W_ALL
>22021	Callee	Sys_UpdateWindows
>22022	Identifier	Sys_UpdateWindows
>22023	ExpressionStatement	 
>22024	CallExpression	Select_Brush ( b2 , false )
>22025	ArgumentList	b2
>22026	Argument	false
>22027	Identifier	false
>22028	Argument	b2
>22029	Identifier	b2
>22030	Callee	Select_Brush
>22031	Identifier	Select_Brush
>22032	IfStatement	if ( b2 == & e -> brushes )
>22033	ExpressionStatement	 
>22034	AssignmentExpr	b2 = b2 -> onext
>22035	PtrMemberAccess	b2 -> onext
>22036	Identifier	onext
>22037	Identifier	b2
>22038	Identifier	b2
>22039	Condition	 
>22040	EqualityExpression	b2 == & e -> brushes
>22041	UnaryOp	& e -> brushes
>22042	PtrMemberAccess	e -> brushes
>22043	Identifier	brushes
>22044	Identifier	e
>22045	UnaryOperator	&
>22046	Identifier	b2
>22047	ForStatement	for ( brush_t * b2 = e -> brushes . onext ; b2 != & e -> brushes ; b2 = b2 -> onext )
>22048	CompoundStatement	 
>22049	IfStatement	if ( b == b2 )
>22050	CompoundStatement	 
>22051	BreakStatement	 
>22052	ExpressionStatement	 
>22053	AssignmentExpr	b2 = b2 -> onext
>22054	PtrMemberAccess	b2 -> onext
>22055	Identifier	onext
>22056	Identifier	b2
>22057	Identifier	b2
>22058	Condition	 
>22059	EqualityExpression	b == b2
>22060	Identifier	b2
>22061	Identifier	b
>22062	AssignmentExpr	 
>22063	PtrMemberAccess	b2 -> onext
>22064	Identifier	onext
>22065	Identifier	b2
>22066	Identifier	b2
>22067	Condition	 
>22068	EqualityExpression	b2 != & e -> brushes
>22069	UnaryOp	& e -> brushes
>22070	PtrMemberAccess	e -> brushes
>22071	Identifier	brushes
>22072	Identifier	e
>22073	UnaryOperator	&
>22074	Identifier	b2
>22075	ForInit	 
>22076	IdentifierDeclStatement	brush_t * b2 = e -> brushes . onext ;
>22077	IdentifierDecl	* b2 = e -> brushes . onext
>22078	AssignmentExpr	* b2 = e -> brushes . onext
>22079	MemberAccess	e -> brushes . onext
>22080	Identifier	onext
>22081	PtrMemberAccess	e -> brushes
>22082	Identifier	brushes
>22083	Identifier	e
>22084	Identifier	b2
>22085	Identifier	b2
>22086	IdentifierDeclType	brush_t *
>22087	ExpressionStatement	 
>22088	CallExpression	Select_Deselect ( )
>22089	ArgumentList	 
>22090	Callee	Select_Deselect
>22091	Identifier	Select_Deselect
>22092	ExpressionStatement	 
>22093	AssignmentExpr	e = b -> owner
>22094	PtrMemberAccess	b -> owner
>22095	Identifier	owner
>22096	Identifier	b
>22097	Identifier	e
>22098	Condition	 
>22099	EqualityExpression	strcmpi ( b -> owner -> eclass -> name , \"worldspawn\" ) != 0
>22100	PrimaryExpression	0
>22101	CallExpression	strcmpi ( b -> owner -> eclass -> name , \"worldspawn\" )
>22102	ArgumentList	b -> owner -> eclass -> name
>22103	Argument	\"worldspawn\"
>22104	PrimaryExpression	\"worldspawn\"
>22105	Argument	b -> owner -> eclass -> name
>22106	PtrMemberAccess	b -> owner -> eclass -> name
>22107	Identifier	name
>22108	PtrMemberAccess	b -> owner -> eclass
>22109	Identifier	eclass
>22110	PtrMemberAccess	b -> owner
>22111	Identifier	owner
>22112	Identifier	b
>22113	Callee	strcmpi
>22114	Identifier	strcmpi
>22115	Condition	 
>22116	EqualityExpression	b != & selected_brushes
>22117	UnaryOp	& selected_brushes
>22118	Identifier	selected_brushes
>22119	UnaryOperator	&
>22120	Identifier	b
>22121	IdentifierDeclStatement	 
>22122	IdentifierDecl	* e
>22123	Identifier	e
>22124	IdentifierDeclType	entity_t *
>22125	IdentifierDeclStatement	 
>22126	IdentifierDecl	* b = selected_brushes . next
>22127	AssignmentExpr	* b = selected_brushes . next
>22128	MemberAccess	selected_brushes . next
>22129	Identifier	next
>22130	Identifier	selected_brushes
>22131	Identifier	b
>22132	Identifier	b
>22133	IdentifierDeclType	brush_t *
>22134	ExpressionStatement	 
>22135	CallExpression	Patch_InsDelHandleTAB ( )
>22136	ArgumentList	 
>22137	Callee	Patch_InsDelHandleTAB
>22138	Identifier	Patch_InsDelHandleTAB
>22139	Condition	 
>22140	Identifier	g_bPatchInsertMode
>22141	ExpressionStatement	 
>22142	CallExpression	Patch_BendHandleTAB ( )
>22143	ArgumentList	 
>22144	Callee	Patch_BendHandleTAB
>22145	Identifier	Patch_BendHandleTAB
>22146	Condition	 
>22147	Identifier	g_bPatchBendMode
>22178	FunctionDef	CMainFrame 
>22179	ParameterList	 
>22180	ReturnType	void
>22181	CompoundStatement	 
>22182	ExpressionStatement	 
>22183	CallExpression	m_wndToolBar . GetToolBarCtrl ( ) . CheckButton ( ID_PATCH_INSDEL , ( g_bPatchInsertMode ) ? TRUE 
>22184	ArgumentList	ID_PATCH_INSDEL
>22185	Argument	( g_bPatchInsertMode ) ? TRUE 
>22186	ConditionalExpression	( g_bPatchInsertMode ) ? TRUE 
>22187	Identifier	FALSE
>22188	Identifier	TRUE
>22189	Condition	g_bPatchInsertMode
>22190	Identifier	g_bPatchInsertMode
>22191	Argument	ID_PATCH_INSDEL
>22192	Identifier	ID_PATCH_INSDEL
>22193	Callee	m_wndToolBar . GetToolBarCtrl ( ) . CheckButton
>22194	MemberAccess	m_wndToolBar . GetToolBarCtrl ( ) . CheckButton
>22195	Identifier	CheckButton
>22196	CallExpression	m_wndToolBar . GetToolBarCtrl ( )
>22197	ArgumentList	 
>22198	Callee	m_wndToolBar . GetToolBarCtrl
>22199	MemberAccess	m_wndToolBar . GetToolBarCtrl
>22200	Identifier	GetToolBarCtrl
>22201	Identifier	m_wndToolBar
>22202	ExpressionStatement	 
>22203	CallExpression	m_wndToolBar . GetToolBarCtrl ( ) . CheckButton ( ID_PATCH_BEND , ( g_bPatchBendMode ) ? TRUE 
>22204	ArgumentList	ID_PATCH_BEND
>22205	Argument	( g_bPatchBendMode ) ? TRUE 
>22206	ConditionalExpression	( g_bPatchBendMode ) ? TRUE 
>22207	Identifier	FALSE
>22208	Identifier	TRUE
>22209	Condition	g_bPatchBendMode
>22210	Identifier	g_bPatchBendMode
>22211	Argument	ID_PATCH_BEND
>22212	Identifier	ID_PATCH_BEND
>22213	Callee	m_wndToolBar . GetToolBarCtrl ( ) . CheckButton
>22214	MemberAccess	m_wndToolBar . GetToolBarCtrl ( ) . CheckButton
>22215	Identifier	CheckButton
>22216	CallExpression	m_wndToolBar . GetToolBarCtrl ( )
>22217	ArgumentList	 
>22218	Callee	m_wndToolBar . GetToolBarCtrl
>22219	MemberAccess	m_wndToolBar . GetToolBarCtrl
>22220	Identifier	GetToolBarCtrl
>22221	Identifier	m_wndToolBar
>22233	FunctionDef	CMainFrame 
>22234	ParameterList	 
>22235	ReturnType	void
>22236	CompoundStatement	 
>22237	ExpressionStatement	 
>22238	CallExpression	Undo_End ( )
>22239	ArgumentList	 
>22240	Callee	Undo_End
>22241	Identifier	Undo_End
>22242	ExpressionStatement	 
>22243	CallExpression	Undo_EndBrushList ( & selected_brushes )
>22244	ArgumentList	& selected_brushes
>22245	Argument	& selected_brushes
>22246	UnaryOp	& selected_brushes
>22247	Identifier	selected_brushes
>22248	UnaryOperator	&
>22249	Callee	Undo_EndBrushList
>22250	Identifier	Undo_EndBrushList
>22251	ExpressionStatement	 
>22252	CallExpression	Sys_UpdateWindows ( W_ALL )
>22253	ArgumentList	W_ALL
>22254	Argument	W_ALL
>22255	Identifier	W_ALL
>22256	Callee	Sys_UpdateWindows
>22257	Identifier	Sys_UpdateWindows
>22258	ExpressionStatement	 
>22259	CallExpression	OnCurveInsertInsertrow ( )
>22260	ArgumentList	 
>22261	Callee	OnCurveInsertInsertrow
>22262	Identifier	OnCurveInsertInsertrow
>22263	ExpressionStatement	 
>22264	CallExpression	OnCurveInsertAddrow ( )
>22265	ArgumentList	 
>22266	Callee	OnCurveInsertAddrow
>22267	Identifier	OnCurveInsertAddrow
>22268	ExpressionStatement	 
>22269	CallExpression	Patch_BrushToMesh ( false )
>22270	ArgumentList	false
>22271	Argument	false
>22272	Identifier	false
>22273	Callee	Patch_BrushToMesh
>22274	Identifier	Patch_BrushToMesh
>22275	ExpressionStatement	 
>22276	CallExpression	Undo_AddBrushList ( & selected_brushes )
>22277	ArgumentList	& selected_brushes
>22278	Argument	& selected_brushes
>22279	UnaryOp	& selected_brushes
>22280	Identifier	selected_brushes
>22281	UnaryOperator	&
>22282	Callee	Undo_AddBrushList
>22283	Identifier	Undo_AddBrushList
>22284	ExpressionStatement	 
>22285	CallExpression	Undo_Start ( \"dense cylinder\" )
>22286	ArgumentList	\"dense cylinder\"
>22287	Argument	\"dense cylinder\"
>22288	PrimaryExpression	\"dense cylinder\"
>22289	Callee	Undo_Start
>22290	Identifier	Undo_Start
>22297	FunctionDef	CMainFrame 
>22298	ParameterList	 
>22299	ReturnType	void
>22300	CompoundStatement	 
>22301	ExpressionStatement	 
>22302	CallExpression	Undo_End ( )
>22303	ArgumentList	 
>22304	Callee	Undo_End
>22305	Identifier	Undo_End
>22306	ExpressionStatement	 
>22307	CallExpression	Undo_EndBrushList ( & selected_brushes )
>22308	ArgumentList	& selected_brushes
>22309	Argument	& selected_brushes
>22310	UnaryOp	& selected_brushes
>22311	Identifier	selected_brushes
>22312	UnaryOperator	&
>22313	Callee	Undo_EndBrushList
>22314	Identifier	Undo_EndBrushList
>22315	ExpressionStatement	 
>22316	CallExpression	Sys_UpdateWindows ( W_ALL )
>22317	ArgumentList	W_ALL
>22318	Argument	W_ALL
>22319	Identifier	W_ALL
>22320	Callee	Sys_UpdateWindows
>22321	Identifier	Sys_UpdateWindows
>22322	ExpressionStatement	 
>22323	CallExpression	OnCurveInsertInsertrow ( )
>22324	ArgumentList	 
>22325	Callee	OnCurveInsertInsertrow
>22326	Identifier	OnCurveInsertInsertrow
>22327	ExpressionStatement	 
>22328	CallExpression	OnCurveInsertAddrow ( )
>22329	ArgumentList	 
>22330	Callee	OnCurveInsertAddrow
>22331	Identifier	OnCurveInsertAddrow
>22332	ExpressionStatement	 
>22333	CallExpression	OnCurveInsertInsertrow ( )
>22334	ArgumentList	 
>22335	Callee	OnCurveInsertInsertrow
>22336	Identifier	OnCurveInsertInsertrow
>22337	ExpressionStatement	 
>22338	CallExpression	OnCurveInsertAddrow ( )
>22339	ArgumentList	 
>22340	Callee	OnCurveInsertAddrow
>22341	Identifier	OnCurveInsertAddrow
>22342	ExpressionStatement	 
>22343	CallExpression	Patch_BrushToMesh ( false )
>22344	ArgumentList	false
>22345	Argument	false
>22346	Identifier	false
>22347	Callee	Patch_BrushToMesh
>22348	Identifier	Patch_BrushToMesh
>22349	ExpressionStatement	 
>22350	CallExpression	Undo_AddBrushList ( & selected_brushes )
>22351	ArgumentList	& selected_brushes
>22352	Argument	& selected_brushes
>22353	UnaryOp	& selected_brushes
>22354	Identifier	selected_brushes
>22355	UnaryOperator	&
>22356	Callee	Undo_AddBrushList
>22357	Identifier	Undo_AddBrushList
>22358	ExpressionStatement	 
>22359	CallExpression	Undo_Start ( \"very dense cylinder\" )
>22360	ArgumentList	\"very dense cylinder\"
>22361	Argument	\"very dense cylinder\"
>22362	PrimaryExpression	\"very dense cylinder\"
>22363	Callee	Undo_Start
>22364	Identifier	Undo_Start
>22371	FunctionDef	CMainFrame 
>22372	ParameterList	 
>22373	ReturnType	void
>22374	CompoundStatement	 
>22375	ExpressionStatement	 
>22376	CallExpression	Sys_UpdateWindows ( W_ALL )
>22377	ArgumentList	W_ALL
>22378	Argument	W_ALL
>22379	Identifier	W_ALL
>22380	Callee	Sys_UpdateWindows
>22381	Identifier	Sys_UpdateWindows
>22382	ExpressionStatement	 
>22383	CallExpression	Patch_CapCurrent ( )
>22384	ArgumentList	 
>22385	Callee	Patch_CapCurrent
>22386	Identifier	Patch_CapCurrent
>22391	FunctionDef	CMainFrame 
>22392	ParameterList	 
>22393	ReturnType	void
>22394	CompoundStatement	 
>22395	ExpressionStatement	 
>22396	CallExpression	Sys_UpdateWindows ( W_ALL )
>22397	ArgumentList	W_ALL
>22398	Argument	W_ALL
>22399	Identifier	W_ALL
>22400	Callee	Sys_UpdateWindows
>22401	Identifier	Sys_UpdateWindows
>22402	ExpressionStatement	 
>22403	CallExpression	Patch_CapCurrent ( true )
>22404	ArgumentList	true
>22405	Argument	true
>22406	Identifier	true
>22407	Callee	Patch_CapCurrent
>22408	Identifier	Patch_CapCurrent
>22414	FunctionDef	CMainFrame 
>22415	ParameterList	 
>22416	ReturnType	void
>22417	CompoundStatement	 
>22418	ExpressionStatement	 
>22419	CallExpression	Sys_UpdateWindows ( W_ALL )
>22420	ArgumentList	W_ALL
>22421	Argument	W_ALL
>22422	Identifier	W_ALL
>22423	Callee	Sys_UpdateWindows
>22424	Identifier	Sys_UpdateWindows
>22425	ExpressionStatement	 
>22426	CallExpression	Patch_CapCurrent ( false , true )
>22427	ArgumentList	false
>22428	Argument	true
>22429	Identifier	true
>22430	Argument	false
>22431	Identifier	false
>22432	Callee	Patch_CapCurrent
>22433	Identifier	Patch_CapCurrent
>22440	FunctionDef	CMainFrame 
>22441	ParameterList	 
>22442	ReturnType	void
>22443	CompoundStatement	 
>22444	ExpressionStatement	 
>22445	CallExpression	Sys_UpdateWindows ( W_ALL )
>22446	ArgumentList	W_ALL
>22447	Argument	W_ALL
>22448	Identifier	W_ALL
>22449	Callee	Sys_UpdateWindows
>22450	Identifier	Sys_UpdateWindows
>22451	ExpressionStatement	 
>22452	CallExpression	Patch_DisperseColumns ( )
>22453	ArgumentList	 
>22454	Callee	Patch_DisperseColumns
>22455	Identifier	Patch_DisperseColumns
>22460	FunctionDef	CMainFrame 
>22461	ParameterList	 
>22462	ReturnType	void
>22463	CompoundStatement	 
>22464	ExpressionStatement	 
>22465	CallExpression	Sys_UpdateWindows ( W_ALL )
>22466	ArgumentList	W_ALL
>22467	Argument	W_ALL
>22468	Identifier	W_ALL
>22469	Callee	Sys_UpdateWindows
>22470	Identifier	Sys_UpdateWindows
>22471	ExpressionStatement	 
>22472	CallExpression	Patch_DisperseRows ( )
>22473	ArgumentList	 
>22474	Callee	Patch_DisperseRows
>22475	Identifier	Patch_DisperseRows
>22480	FunctionDef	CMainFrame 
>22481	ParameterList	 
>22482	ReturnType	void
>22483	CompoundStatement	 
>22484	ExpressionStatement	 
>22485	CallExpression	Sys_UpdateWindows ( W_ALL )
>22486	ArgumentList	W_ALL
>22487	Argument	W_ALL
>22488	Identifier	W_ALL
>22489	Callee	Sys_UpdateWindows
>22490	Identifier	Sys_UpdateWindows
>22491	ExpressionStatement	 
>22492	CallExpression	Patch_NaturalizeSelected ( )
>22493	ArgumentList	 
>22494	Callee	Patch_NaturalizeSelected
>22495	Identifier	Patch_NaturalizeSelected
>22500	FunctionDef	CMainFrame 
>22501	ParameterList	 
>22502	ReturnType	void
>22503	CompoundStatement	 
>22504	ExpressionStatement	 
>22505	CallExpression	Sys_UpdateWindows ( W_ALL )
>22506	ArgumentList	W_ALL
>22507	Argument	W_ALL
>22508	Identifier	W_ALL
>22509	Callee	Sys_UpdateWindows
>22510	Identifier	Sys_UpdateWindows
>22511	ExpressionStatement	 
>22512	CallExpression	Select_SnapToGrid ( )
>22513	ArgumentList	 
>22514	Callee	Select_SnapToGrid
>22515	Identifier	Select_SnapToGrid
>22520	FunctionDef	CMainFrame 
>22521	ParameterList	 
>22522	ReturnType	void
>22523	CompoundStatement	 
>22524	ExpressionStatement	 
>22525	CallExpression	Undo_End ( )
>22526	ArgumentList	 
>22527	Callee	Undo_End
>22528	Identifier	Undo_End
>22529	ExpressionStatement	 
>22530	CallExpression	Undo_EndBrushList ( & selected_brushes )
>22531	ArgumentList	& selected_brushes
>22532	Argument	& selected_brushes
>22533	UnaryOp	& selected_brushes
>22534	Identifier	selected_brushes
>22535	UnaryOperator	&
>22536	Callee	Undo_EndBrushList
>22537	Identifier	Undo_EndBrushList
>22538	ExpressionStatement	 
>22539	CallExpression	Sys_UpdateWindows ( W_ALL )
>22540	ArgumentList	W_ALL
>22541	Argument	W_ALL
>22542	Identifier	W_ALL
>22543	Callee	Sys_UpdateWindows
>22544	Identifier	Sys_UpdateWindows
>22545	ExpressionStatement	 
>22546	CallExpression	Patch_BrushToMesh ( false , false , false , true )
>22547	ArgumentList	false
>22548	Argument	true
>22549	Identifier	true
>22550	Argument	false
>22551	Identifier	false
>22552	Argument	false
>22553	Identifier	false
>22554	Argument	false
>22555	Identifier	false
>22556	Callee	Patch_BrushToMesh
>22557	Identifier	Patch_BrushToMesh
>22558	ExpressionStatement	 
>22559	CallExpression	Undo_AddBrushList ( & selected_brushes )
>22560	ArgumentList	& selected_brushes
>22561	Argument	& selected_brushes
>22562	UnaryOp	& selected_brushes
>22563	Identifier	selected_brushes
>22564	UnaryOperator	&
>22565	Callee	Undo_AddBrushList
>22566	Identifier	Undo_AddBrushList
>22567	ExpressionStatement	 
>22568	CallExpression	Undo_Start ( \"square cylinder\" )
>22569	ArgumentList	\"square cylinder\"
>22570	Argument	\"square cylinder\"
>22571	PrimaryExpression	\"square cylinder\"
>22572	Callee	Undo_Start
>22573	Identifier	Undo_Start
>22581	FunctionDef	CMainFrame 
>22582	ParameterList	 
>22583	ReturnType	void
>22584	CompoundStatement	 
>22585	ExpressionStatement	 
>22586	CallExpression	Sys_UpdateWindows ( W_ALL )
>22587	ArgumentList	W_ALL
>22588	Argument	W_ALL
>22589	Identifier	W_ALL
>22590	Callee	Sys_UpdateWindows
>22591	Identifier	Sys_UpdateWindows
>22592	ExpressionStatement	 
>22593	CallExpression	Terrain_BrushToMesh ( )
>22594	ArgumentList	 
>22595	Callee	Terrain_BrushToMesh
>22596	Identifier	Terrain_BrushToMesh
>22601	FunctionDef	CMainFrame 
>22602	ParameterList	int id
>22603	Parameter	 
>22604	Identifier	id
>22605	ParameterType	int
>22606	ReturnType	void
>22607	CompoundStatement	 
>22608	ExpressionStatement	 
>22609	CallExpression	Sys_UpdateWindows ( W_TEXTURE )
>22610	ArgumentList	W_TEXTURE
>22611	Argument	W_TEXTURE
>22612	Identifier	W_TEXTURE
>22613	Callee	Sys_UpdateWindows
>22614	Identifier	Sys_UpdateWindows
>22615	ExpressionStatement	 
>22616	CallExpression	Texture_ResetPosition ( )
>22617	ArgumentList	 
>22618	Callee	Texture_ResetPosition
>22619	Identifier	Texture_ResetPosition
>22620	ExpressionStatement	 
>22621	CallExpression	g_PrefsDlg . SavePrefs ( )
>22622	ArgumentList	 
>22623	Callee	g_PrefsDlg . SavePrefs
>22624	MemberAccess	g_PrefsDlg . SavePrefs
>22625	Identifier	SavePrefs
>22626	Identifier	g_PrefsDlg
>22627	IfStatement	if ( pMenu )
>22628	CompoundStatement	 
>22629	ExpressionStatement	 
>22630	CallExpression	pMenu -> CheckMenuItem ( id , MF_BYCOMMAND | MF_CHECKED )
>22631	ArgumentList	id
>22632	Argument	MF_BYCOMMAND | MF_CHECKED
>22633	InclusiveOrExpression	MF_BYCOMMAND | MF_CHECKED
>22634	Identifier	MF_CHECKED
>22635	Identifier	MF_BYCOMMAND
>22636	Argument	id
>22637	Identifier	id
>22638	Callee	pMenu -> CheckMenuItem
>22639	PtrMemberAccess	pMenu -> CheckMenuItem
>22640	Identifier	CheckMenuItem
>22641	Identifier	pMenu
>22642	ExpressionStatement	 
>22643	CallExpression	pMenu -> CheckMenuItem ( ID_TEXTURES_TEXTUREWINDOWSCALE_200 , MF_BYCOMMAND | MF_UNCHECKED )
>22644	ArgumentList	ID_TEXTURES_TEXTUREWINDOWSCALE_200
>22645	Argument	MF_BYCOMMAND | MF_UNCHECKED
>22646	InclusiveOrExpression	MF_BYCOMMAND | MF_UNCHECKED
>22647	Identifier	MF_UNCHECKED
>22648	Identifier	MF_BYCOMMAND
>22649	Argument	ID_TEXTURES_TEXTUREWINDOWSCALE_200
>22650	Identifier	ID_TEXTURES_TEXTUREWINDOWSCALE_200
>22651	Callee	pMenu -> CheckMenuItem
>22652	PtrMemberAccess	pMenu -> CheckMenuItem
>22653	Identifier	CheckMenuItem
>22654	Identifier	pMenu
>22655	ExpressionStatement	 
>22656	CallExpression	pMenu -> CheckMenuItem ( ID_TEXTURES_TEXTUREWINDOWSCALE_100 , MF_BYCOMMAND | MF_UNCHECKED )
>22657	ArgumentList	ID_TEXTURES_TEXTUREWINDOWSCALE_100
>22658	Argument	MF_BYCOMMAND | MF_UNCHECKED
>22659	InclusiveOrExpression	MF_BYCOMMAND | MF_UNCHECKED
>22660	Identifier	MF_UNCHECKED
>22661	Identifier	MF_BYCOMMAND
>22662	Argument	ID_TEXTURES_TEXTUREWINDOWSCALE_100
>22663	Identifier	ID_TEXTURES_TEXTUREWINDOWSCALE_100
>22664	Callee	pMenu -> CheckMenuItem
>22665	PtrMemberAccess	pMenu -> CheckMenuItem
>22666	Identifier	CheckMenuItem
>22667	Identifier	pMenu
>22668	ExpressionStatement	 
>22669	CallExpression	pMenu -> CheckMenuItem ( ID_TEXTURES_TEXTUREWINDOWSCALE_50 , MF_BYCOMMAND | MF_UNCHECKED )
>22670	ArgumentList	ID_TEXTURES_TEXTUREWINDOWSCALE_50
>22671	Argument	MF_BYCOMMAND | MF_UNCHECKED
>22672	InclusiveOrExpression	MF_BYCOMMAND | MF_UNCHECKED
>22673	Identifier	MF_UNCHECKED
>22674	Identifier	MF_BYCOMMAND
>22675	Argument	ID_TEXTURES_TEXTUREWINDOWSCALE_50
>22676	Identifier	ID_TEXTURES_TEXTUREWINDOWSCALE_50
>22677	Callee	pMenu -> CheckMenuItem
>22678	PtrMemberAccess	pMenu -> CheckMenuItem
>22679	Identifier	CheckMenuItem
>22680	Identifier	pMenu
>22681	ExpressionStatement	 
>22682	CallExpression	pMenu -> CheckMenuItem ( ID_TEXTURES_TEXTUREWINDOWSCALE_25 , MF_BYCOMMAND | MF_UNCHECKED )
>22683	ArgumentList	ID_TEXTURES_TEXTUREWINDOWSCALE_25
>22684	Argument	MF_BYCOMMAND | MF_UNCHECKED
>22685	InclusiveOrExpression	MF_BYCOMMAND | MF_UNCHECKED
>22686	Identifier	MF_UNCHECKED
>22687	Identifier	MF_BYCOMMAND
>22688	Argument	ID_TEXTURES_TEXTUREWINDOWSCALE_25
>22689	Identifier	ID_TEXTURES_TEXTUREWINDOWSCALE_25
>22690	Callee	pMenu -> CheckMenuItem
>22691	PtrMemberAccess	pMenu -> CheckMenuItem
>22692	Identifier	CheckMenuItem
>22693	Identifier	pMenu
>22694	ExpressionStatement	 
>22695	CallExpression	pMenu -> CheckMenuItem ( ID_TEXTURES_TEXTUREWINDOWSCALE_10 , MF_BYCOMMAND | MF_UNCHECKED )
>22696	ArgumentList	ID_TEXTURES_TEXTUREWINDOWSCALE_10
>22697	Argument	MF_BYCOMMAND | MF_UNCHECKED
>22698	InclusiveOrExpression	MF_BYCOMMAND | MF_UNCHECKED
>22699	Identifier	MF_UNCHECKED
>22700	Identifier	MF_BYCOMMAND
>22701	Argument	ID_TEXTURES_TEXTUREWINDOWSCALE_10
>22702	Identifier	ID_TEXTURES_TEXTUREWINDOWSCALE_10
>22703	Callee	pMenu -> CheckMenuItem
>22704	PtrMemberAccess	pMenu -> CheckMenuItem
>22705	Identifier	CheckMenuItem
>22706	Identifier	pMenu
>22707	Condition	 
>22708	Identifier	pMenu
>22709	IdentifierDeclStatement	 
>22710	IdentifierDecl	* pMenu = GetMenu ( )
>22711	AssignmentExpr	* pMenu = GetMenu ( )
>22712	CallExpression	GetMenu ( )
>22713	ArgumentList	 
>22714	Callee	GetMenu
>22715	Identifier	GetMenu
>22716	Identifier	pMenu
>22717	Identifier	pMenu
>22718	IdentifierDeclType	CMenu *
>22735	FunctionDef	CMainFrame 
>22736	ParameterList	 
>22737	ReturnType	void
>22738	CompoundStatement	 
>22739	ExpressionStatement	 
>22740	CallExpression	CheckTextureScale ( ID_TEXTURES_TEXTUREWINDOWSCALE_10 )
>22741	ArgumentList	ID_TEXTURES_TEXTUREWINDOWSCALE_10
>22742	Argument	ID_TEXTURES_TEXTUREWINDOWSCALE_10
>22743	Identifier	ID_TEXTURES_TEXTUREWINDOWSCALE_10
>22744	Callee	CheckTextureScale
>22745	Identifier	CheckTextureScale
>22746	ExpressionStatement	 
>22747	AssignmentExpr	g_PrefsDlg . m_nTextureScale = 10
>22748	PrimaryExpression	10
>22749	MemberAccess	g_PrefsDlg . m_nTextureScale
>22750	Identifier	m_nTextureScale
>22751	Identifier	g_PrefsDlg
>22758	FunctionDef	CMainFrame 
>22759	ParameterList	 
>22760	ReturnType	void
>22761	CompoundStatement	 
>22762	ExpressionStatement	 
>22763	CallExpression	CheckTextureScale ( ID_TEXTURES_TEXTUREWINDOWSCALE_100 )
>22764	ArgumentList	ID_TEXTURES_TEXTUREWINDOWSCALE_100
>22765	Argument	ID_TEXTURES_TEXTUREWINDOWSCALE_100
>22766	Identifier	ID_TEXTURES_TEXTUREWINDOWSCALE_100
>22767	Callee	CheckTextureScale
>22768	Identifier	CheckTextureScale
>22769	ExpressionStatement	 
>22770	AssignmentExpr	g_PrefsDlg . m_nTextureScale = 100
>22771	PrimaryExpression	100
>22772	MemberAccess	g_PrefsDlg . m_nTextureScale
>22773	Identifier	m_nTextureScale
>22774	Identifier	g_PrefsDlg
>22781	FunctionDef	CMainFrame 
>22782	ParameterList	 
>22783	ReturnType	void
>22784	CompoundStatement	 
>22785	ExpressionStatement	 
>22786	CallExpression	CheckTextureScale ( ID_TEXTURES_TEXTUREWINDOWSCALE_200 )
>22787	ArgumentList	ID_TEXTURES_TEXTUREWINDOWSCALE_200
>22788	Argument	ID_TEXTURES_TEXTUREWINDOWSCALE_200
>22789	Identifier	ID_TEXTURES_TEXTUREWINDOWSCALE_200
>22790	Callee	CheckTextureScale
>22791	Identifier	CheckTextureScale
>22792	ExpressionStatement	 
>22793	AssignmentExpr	g_PrefsDlg . m_nTextureScale = 200
>22794	PrimaryExpression	200
>22795	MemberAccess	g_PrefsDlg . m_nTextureScale
>22796	Identifier	m_nTextureScale
>22797	Identifier	g_PrefsDlg
>22804	FunctionDef	CMainFrame 
>22805	ParameterList	 
>22806	ReturnType	void
>22807	CompoundStatement	 
>22808	ExpressionStatement	 
>22809	CallExpression	CheckTextureScale ( ID_TEXTURES_TEXTUREWINDOWSCALE_25 )
>22810	ArgumentList	ID_TEXTURES_TEXTUREWINDOWSCALE_25
>22811	Argument	ID_TEXTURES_TEXTUREWINDOWSCALE_25
>22812	Identifier	ID_TEXTURES_TEXTUREWINDOWSCALE_25
>22813	Callee	CheckTextureScale
>22814	Identifier	CheckTextureScale
>22815	ExpressionStatement	 
>22816	AssignmentExpr	g_PrefsDlg . m_nTextureScale = 25
>22817	PrimaryExpression	25
>22818	MemberAccess	g_PrefsDlg . m_nTextureScale
>22819	Identifier	m_nTextureScale
>22820	Identifier	g_PrefsDlg
>22827	FunctionDef	CMainFrame 
>22828	ParameterList	 
>22829	ReturnType	void
>22830	CompoundStatement	 
>22831	ExpressionStatement	 
>22832	CallExpression	CheckTextureScale ( ID_TEXTURES_TEXTUREWINDOWSCALE_50 )
>22833	ArgumentList	ID_TEXTURES_TEXTUREWINDOWSCALE_50
>22834	Argument	ID_TEXTURES_TEXTUREWINDOWSCALE_50
>22835	Identifier	ID_TEXTURES_TEXTUREWINDOWSCALE_50
>22836	Callee	CheckTextureScale
>22837	Identifier	CheckTextureScale
>22838	ExpressionStatement	 
>22839	AssignmentExpr	g_PrefsDlg . m_nTextureScale = 50
>22840	PrimaryExpression	50
>22841	MemberAccess	g_PrefsDlg . m_nTextureScale
>22842	Identifier	m_nTextureScale
>22843	Identifier	g_PrefsDlg
>22850	FunctionDef	CMainFrame 
>22851	ParameterList	 
>22852	ReturnType	void
>22853	CompoundStatement	 
>22854	ExpressionStatement	 
>22855	CallExpression	Sys_UpdateWindows ( W_ALL )
>22856	ArgumentList	W_ALL
>22857	Argument	W_ALL
>22858	Identifier	W_ALL
>22859	Callee	Sys_UpdateWindows
>22860	Identifier	Sys_UpdateWindows
>22861	ExpressionStatement	 
>22862	CallExpression	Texture_Flush ( )
>22863	ArgumentList	 
>22864	Callee	Texture_Flush
>22865	Identifier	Texture_Flush
>22870	FunctionDef	CMainFrame 
>22871	ParameterList	 
>22872	ReturnType	void
>22873	CompoundStatement	 
>22874	ExpressionStatement	 
>22875	CallExpression	Sys_UpdateWindows ( W_ALL )
>22876	ArgumentList	W_ALL
>22877	Argument	W_ALL
>22878	Identifier	W_ALL
>22879	Callee	Sys_UpdateWindows
>22880	Identifier	Sys_UpdateWindows
>22881	ExpressionStatement	 
>22882	CallExpression	Patch_ClearOverlays ( )
>22883	ArgumentList	 
>22884	Callee	Patch_ClearOverlays
>22885	Identifier	Patch_ClearOverlays
>22890	FunctionDef	CMainFrame 
>22891	ParameterList	 
>22892	ReturnType	void
>22893	CompoundStatement	 
>22894	ExpressionStatement	 
>22895	CallExpression	Sys_UpdateWindows ( W_ALL )
>22896	ArgumentList	W_ALL
>22897	Argument	W_ALL
>22898	Identifier	W_ALL
>22899	Callee	Sys_UpdateWindows
>22900	Identifier	Sys_UpdateWindows
>22901	ExpressionStatement	 
>22902	CallExpression	Patch_SetOverlays ( )
>22903	ArgumentList	 
>22904	Callee	Patch_SetOverlays
>22905	Identifier	Patch_SetOverlays
>22910	FunctionDef	CMainFrame 
>22911	ParameterList	 
>22912	ReturnType	void
>22913	CompoundStatement	 
>22914	ExpressionStatement	 
>22915	CallExpression	Undo_End ( )
>22916	ArgumentList	 
>22917	Callee	Undo_End
>22918	Identifier	Undo_End
>22919	ExpressionStatement	 
>22920	CallExpression	Undo_EndBrushList ( & selected_brushes )
>22921	ArgumentList	& selected_brushes
>22922	Argument	& selected_brushes
>22923	UnaryOp	& selected_brushes
>22924	Identifier	selected_brushes
>22925	UnaryOperator	&
>22926	Callee	Undo_EndBrushList
>22927	Identifier	Undo_EndBrushList
>22928	IfStatement	if ( dlg . DoModal ( ) == IDOK )
>22929	CompoundStatement	 
>22930	ExpressionStatement	 
>22931	CallExpression	Sys_UpdateWindows ( W_ALL )
>22932	ArgumentList	W_ALL
>22933	Argument	W_ALL
>22934	Identifier	W_ALL
>22935	Callee	Sys_UpdateWindows
>22936	Identifier	Sys_UpdateWindows
>22937	ExpressionStatement	 
>22938	CallExpression	Patch_Thicken ( dlg . m_nAmount , dlg . m_bSeams )
>22939	ArgumentList	dlg . m_nAmount
>22940	Argument	dlg . m_bSeams
>22941	MemberAccess	dlg . m_bSeams
>22942	Identifier	m_bSeams
>22943	Identifier	dlg
>22944	Argument	dlg . m_nAmount
>22945	MemberAccess	dlg . m_nAmount
>22946	Identifier	m_nAmount
>22947	Identifier	dlg
>22948	Callee	Patch_Thicken
>22949	Identifier	Patch_Thicken
>22950	Condition	 
>22951	EqualityExpression	dlg . DoModal ( ) == IDOK
>22952	Identifier	IDOK
>22953	CallExpression	dlg . DoModal ( )
>22954	ArgumentList	 
>22955	Callee	dlg . DoModal
>22956	MemberAccess	dlg . DoModal
>22957	Identifier	DoModal
>22958	Identifier	dlg
>22959	IdentifierDeclStatement	 
>22960	IdentifierDecl	dlg
>22961	Identifier	dlg
>22962	IdentifierDeclType	CDialogThick
>22963	ExpressionStatement	 
>22964	CallExpression	Undo_AddBrushList ( & selected_brushes )
>22965	ArgumentList	& selected_brushes
>22966	Argument	& selected_brushes
>22967	UnaryOp	& selected_brushes
>22968	Identifier	selected_brushes
>22969	UnaryOperator	&
>22970	Callee	Undo_AddBrushList
>22971	Identifier	Undo_AddBrushList
>22972	ExpressionStatement	 
>22973	CallExpression	Undo_Start ( \"curve thicken\" )
>22974	ArgumentList	\"curve thicken\"
>22975	Argument	\"curve thicken\"
>22976	PrimaryExpression	\"curve thicken\"
>22977	Callee	Undo_Start
>22978	Identifier	Undo_Start
>22989	FunctionDef	CMainFrame 
>22990	ParameterList	 
>22991	ReturnType	void
>22992	CompoundStatement	 
>22993	ExpressionStatement	 
>22994	CallExpression	Sys_UpdateWindows ( W_ALL )
>22995	ArgumentList	W_ALL
>22996	Argument	W_ALL
>22997	Identifier	W_ALL
>22998	Callee	Sys_UpdateWindows
>22999	Identifier	Sys_UpdateWindows
>23000	ExpressionStatement	 
>23001	CallExpression	Patch_NaturalizeSelected ( true , true )
>23002	ArgumentList	true
>23003	Argument	true
>23004	Identifier	true
>23005	Argument	true
>23006	Identifier	true
>23007	Callee	Patch_NaturalizeSelected
>23008	Identifier	Patch_NaturalizeSelected
>23014	FunctionDef	CMainFrame 
>23015	ParameterList	 
>23016	ReturnType	void
>23017	CompoundStatement	 
>23018	ExpressionStatement	 
>23019	CallExpression	Sys_UpdateWindows ( W_ALL )
>23020	ArgumentList	W_ALL
>23021	Argument	W_ALL
>23022	Identifier	W_ALL
>23023	Callee	Sys_UpdateWindows
>23024	Identifier	Sys_UpdateWindows
>23025	ExpressionStatement	 
>23026	CallExpression	Patch_Transpose ( )
>23027	ArgumentList	 
>23028	Callee	Patch_Transpose
>23029	Identifier	Patch_Transpose
>23034	FunctionDef	CMainFrame 
>23035	ParameterList	 
>23036	ReturnType	void
>23037	CompoundStatement	 
>23038	ExpressionStatement	 
>23039	CallExpression	Sys_UpdateWindows ( W_ALL )
>23040	ArgumentList	W_ALL
>23041	Argument	W_ALL
>23042	Identifier	W_ALL
>23043	Callee	Sys_UpdateWindows
>23044	Identifier	Sys_UpdateWindows
>23045	ExpressionStatement	 
>23046	CallExpression	ReloadShaders ( )
>23047	ArgumentList	 
>23048	Callee	ReloadShaders
>23049	Identifier	ReloadShaders
>23050	IdentifierDeclStatement	 
>23051	IdentifierDecl	wait
>23052	Identifier	wait
>23053	IdentifierDeclType	CWaitCursor
>23059	FunctionDef	CMainFrame 
>23060	ParameterList	 
>23061	ReturnType	void
>23062	CompoundStatement	 
>23063	IfStatement	if ( pMenu )
>23064	CompoundStatement	 
>23065	ExpressionStatement	 
>23066	CallExpression	pMenu -> CheckMenuItem ( ID_VIEW_ENTITIESAS_SKINNEDANDBOXED , MF_BYCOMMAND | ( g_PrefsDlg . m_nEntityShowState == \
>23067	ArgumentList	ID_VIEW_ENTITIESAS_SKINNEDANDBOXED
>23068	Argument	MF_BYCOMMAND | ( g_PrefsDlg . m_nEntityShowState == ENTITY_SKINNED_BOXED ) ? MF_CHECKED 
>23069	ConditionalExpression	MF_BYCOMMAND | ( g_PrefsDlg . m_nEntityShowState == ENTITY_SKINNED_BOXED ) ? MF_CHECKED 
>23070	Identifier	MF_UNCHECKED
>23071	Identifier	MF_CHECKED
>23072	Condition	MF_BYCOMMAND | ( g_PrefsDlg . m_nEntityShowState == ENTITY_SKINNED_BOXED )
>23073	InclusiveOrExpression	MF_BYCOMMAND | ( g_PrefsDlg . m_nEntityShowState == ENTITY_SKINNED_BOXED )
>23074	EqualityExpression	g_PrefsDlg . m_nEntityShowState == ENTITY_SKINNED_BOXED
>23075	Identifier	ENTITY_SKINNED_BOXED
>23076	MemberAccess	g_PrefsDlg . m_nEntityShowState
>23077	Identifier	m_nEntityShowState
>23078	Identifier	g_PrefsDlg
>23079	Identifier	MF_BYCOMMAND
>23080	Argument	ID_VIEW_ENTITIESAS_SKINNEDANDBOXED
>23081	Identifier	ID_VIEW_ENTITIESAS_SKINNEDANDBOXED
>23082	Callee	pMenu -> CheckMenuItem
>23083	PtrMemberAccess	pMenu -> CheckMenuItem
>23084	Identifier	CheckMenuItem
>23085	Identifier	pMenu
>23086	ExpressionStatement	 
>23087	CallExpression	pMenu -> CheckMenuItem ( ID_VIEW_ENTITIESAS_SKINNED , MF_BYCOMMAND | ( g_PrefsDlg . m_nEntityShowState == ENTITY_\
>23088	ArgumentList	ID_VIEW_ENTITIESAS_SKINNED
>23089	Argument	MF_BYCOMMAND | ( g_PrefsDlg . m_nEntityShowState == ENTITY_SKINNED ) ? MF_CHECKED 
>23090	ConditionalExpression	MF_BYCOMMAND | ( g_PrefsDlg . m_nEntityShowState == ENTITY_SKINNED ) ? MF_CHECKED 
>23091	Identifier	MF_UNCHECKED
>23092	Identifier	MF_CHECKED
>23093	Condition	MF_BYCOMMAND | ( g_PrefsDlg . m_nEntityShowState == ENTITY_SKINNED )
>23094	InclusiveOrExpression	MF_BYCOMMAND | ( g_PrefsDlg . m_nEntityShowState == ENTITY_SKINNED )
>23095	EqualityExpression	g_PrefsDlg . m_nEntityShowState == ENTITY_SKINNED
>23096	Identifier	ENTITY_SKINNED
>23097	MemberAccess	g_PrefsDlg . m_nEntityShowState
>23098	Identifier	m_nEntityShowState
>23099	Identifier	g_PrefsDlg
>23100	Identifier	MF_BYCOMMAND
>23101	Argument	ID_VIEW_ENTITIESAS_SKINNED
>23102	Identifier	ID_VIEW_ENTITIESAS_SKINNED
>23103	Callee	pMenu -> CheckMenuItem
>23104	PtrMemberAccess	pMenu -> CheckMenuItem
>23105	Identifier	CheckMenuItem
>23106	Identifier	pMenu
>23107	ExpressionStatement	 
>23108	CallExpression	pMenu -> CheckMenuItem ( ID_VIEW_ENTITIESAS_SELECTEDSKINNED , MF_BYCOMMAND | ( g_PrefsDlg . m_nEntityShowState == \
>23109	ArgumentList	ID_VIEW_ENTITIESAS_SELECTEDSKINNED
>23110	Argument	MF_BYCOMMAND | ( g_PrefsDlg . m_nEntityShowState == ENTITY_SELECTED_SKIN ) ? MF_CHECKED 
>23111	ConditionalExpression	MF_BYCOMMAND | ( g_PrefsDlg . m_nEntityShowState == ENTITY_SELECTED_SKIN ) ? MF_CHECKED 
>23112	Identifier	MF_UNCHECKED
>23113	Identifier	MF_CHECKED
>23114	Condition	MF_BYCOMMAND | ( g_PrefsDlg . m_nEntityShowState == ENTITY_SELECTED_SKIN )
>23115	InclusiveOrExpression	MF_BYCOMMAND | ( g_PrefsDlg . m_nEntityShowState == ENTITY_SELECTED_SKIN )
>23116	EqualityExpression	g_PrefsDlg . m_nEntityShowState == ENTITY_SELECTED_SKIN
>23117	Identifier	ENTITY_SELECTED_SKIN
>23118	MemberAccess	g_PrefsDlg . m_nEntityShowState
>23119	Identifier	m_nEntityShowState
>23120	Identifier	g_PrefsDlg
>23121	Identifier	MF_BYCOMMAND
>23122	Argument	ID_VIEW_ENTITIESAS_SELECTEDSKINNED
>23123	Identifier	ID_VIEW_ENTITIESAS_SELECTEDSKINNED
>23124	Callee	pMenu -> CheckMenuItem
>23125	PtrMemberAccess	pMenu -> CheckMenuItem
>23126	Identifier	CheckMenuItem
>23127	Identifier	pMenu
>23128	ExpressionStatement	 
>23129	CallExpression	pMenu -> CheckMenuItem ( ID_VIEW_ENTITIESAS_SELECTEDWIREFRAME , MF_BYCOMMAND | ( g_PrefsDlg . m_nEntityShowState == \
>23130	ArgumentList	ID_VIEW_ENTITIESAS_SELECTEDWIREFRAME
>23131	Argument	MF_BYCOMMAND | ( g_PrefsDlg . m_nEntityShowState == ENTITY_SELECTED ) ? MF_CHECKED 
>23132	ConditionalExpression	MF_BYCOMMAND | ( g_PrefsDlg . m_nEntityShowState == ENTITY_SELECTED ) ? MF_CHECKED 
>23133	Identifier	MF_UNCHECKED
>23134	Identifier	MF_CHECKED
>23135	Condition	MF_BYCOMMAND | ( g_PrefsDlg . m_nEntityShowState == ENTITY_SELECTED )
>23136	InclusiveOrExpression	MF_BYCOMMAND | ( g_PrefsDlg . m_nEntityShowState == ENTITY_SELECTED )
>23137	EqualityExpression	g_PrefsDlg . m_nEntityShowState == ENTITY_SELECTED
>23138	Identifier	ENTITY_SELECTED
>23139	MemberAccess	g_PrefsDlg . m_nEntityShowState
>23140	Identifier	m_nEntityShowState
>23141	Identifier	g_PrefsDlg
>23142	Identifier	MF_BYCOMMAND
>23143	Argument	ID_VIEW_ENTITIESAS_SELECTEDWIREFRAME
>23144	Identifier	ID_VIEW_ENTITIESAS_SELECTEDWIREFRAME
>23145	Callee	pMenu -> CheckMenuItem
>23146	PtrMemberAccess	pMenu -> CheckMenuItem
>23147	Identifier	CheckMenuItem
>23148	Identifier	pMenu
>23149	ExpressionStatement	 
>23150	CallExpression	pMenu -> CheckMenuItem ( ID_VIEW_ENTITIESAS_WIREFRAME , MF_BYCOMMAND | ( g_PrefsDlg . m_nEntityShowState == ENTITY_\
>23151	ArgumentList	ID_VIEW_ENTITIESAS_WIREFRAME
>23152	Argument	MF_BYCOMMAND | ( g_PrefsDlg . m_nEntityShowState == ENTITY_WIRE ) ? MF_CHECKED 
>23153	ConditionalExpression	MF_BYCOMMAND | ( g_PrefsDlg . m_nEntityShowState == ENTITY_WIRE ) ? MF_CHECKED 
>23154	Identifier	MF_UNCHECKED
>23155	Identifier	MF_CHECKED
>23156	Condition	MF_BYCOMMAND | ( g_PrefsDlg . m_nEntityShowState == ENTITY_WIRE )
>23157	InclusiveOrExpression	MF_BYCOMMAND | ( g_PrefsDlg . m_nEntityShowState == ENTITY_WIRE )
>23158	EqualityExpression	g_PrefsDlg . m_nEntityShowState == ENTITY_WIRE
>23159	Identifier	ENTITY_WIRE
>23160	MemberAccess	g_PrefsDlg . m_nEntityShowState
>23161	Identifier	m_nEntityShowState
>23162	Identifier	g_PrefsDlg
>23163	Identifier	MF_BYCOMMAND
>23164	Argument	ID_VIEW_ENTITIESAS_WIREFRAME
>23165	Identifier	ID_VIEW_ENTITIESAS_WIREFRAME
>23166	Callee	pMenu -> CheckMenuItem
>23167	PtrMemberAccess	pMenu -> CheckMenuItem
>23168	Identifier	CheckMenuItem
>23169	Identifier	pMenu
>23170	ExpressionStatement	 
>23171	CallExpression	pMenu -> CheckMenuItem ( ID_VIEW_ENTITIESAS_BOUNDINGBOX , MF_BYCOMMAND | ( g_PrefsDlg . m_nEntityShowState == ENTITY_\
>23172	ArgumentList	ID_VIEW_ENTITIESAS_BOUNDINGBOX
>23173	Argument	MF_BYCOMMAND | ( g_PrefsDlg . m_nEntityShowState == ENTITY_BOX ) ? MF_CHECKED 
>23174	ConditionalExpression	MF_BYCOMMAND | ( g_PrefsDlg . m_nEntityShowState == ENTITY_BOX ) ? MF_CHECKED 
>23175	Identifier	MF_UNCHECKED
>23176	Identifier	MF_CHECKED
>23177	Condition	MF_BYCOMMAND | ( g_PrefsDlg . m_nEntityShowState == ENTITY_BOX )
>23178	InclusiveOrExpression	MF_BYCOMMAND | ( g_PrefsDlg . m_nEntityShowState == ENTITY_BOX )
>23179	EqualityExpression	g_PrefsDlg . m_nEntityShowState == ENTITY_BOX
>23180	Identifier	ENTITY_BOX
>23181	MemberAccess	g_PrefsDlg . m_nEntityShowState
>23182	Identifier	m_nEntityShowState
>23183	Identifier	g_PrefsDlg
>23184	Identifier	MF_BYCOMMAND
>23185	Argument	ID_VIEW_ENTITIESAS_BOUNDINGBOX
>23186	Identifier	ID_VIEW_ENTITIESAS_BOUNDINGBOX
>23187	Callee	pMenu -> CheckMenuItem
>23188	PtrMemberAccess	pMenu -> CheckMenuItem
>23189	Identifier	CheckMenuItem
>23190	Identifier	pMenu
>23191	Condition	 
>23192	Identifier	pMenu
>23193	IdentifierDeclStatement	 
>23194	IdentifierDecl	* pMenu = GetMenu ( )
>23195	AssignmentExpr	* pMenu = GetMenu ( )
>23196	CallExpression	GetMenu ( )
>23197	ArgumentList	 
>23198	Callee	GetMenu
>23199	Identifier	GetMenu
>23200	Identifier	pMenu
>23201	Identifier	pMenu
>23202	IdentifierDeclType	CMenu *
>23225	FunctionDef	CMainFrame 
>23226	ParameterList	 
>23227	ReturnType	void
>23228	CompoundStatement	 
>23229	ExpressionStatement	 
>23230	CallExpression	HandlePopup ( this , IDR_POPUP_ENTITY )
>23231	ArgumentList	this
>23232	Argument	IDR_POPUP_ENTITY
>23233	Identifier	IDR_POPUP_ENTITY
>23234	Argument	this
>23235	Identifier	this
>23236	Callee	HandlePopup
>23237	Identifier	HandlePopup
>23243	FunctionDef	CMainFrame 
>23244	ParameterList	 
>23245	ReturnType	void
>23246	CompoundStatement	 
>23247	ExpressionStatement	 
>23248	CallExpression	Sys_UpdateWindows ( W_ALL )
>23249	ArgumentList	W_ALL
>23250	Argument	W_ALL
>23251	Identifier	W_ALL
>23252	Callee	Sys_UpdateWindows
>23253	Identifier	Sys_UpdateWindows
>23254	ExpressionStatement	 
>23255	CallExpression	g_PrefsDlg . SavePrefs ( )
>23256	ArgumentList	 
>23257	Callee	g_PrefsDlg . SavePrefs
>23258	MemberAccess	g_PrefsDlg . SavePrefs
>23259	Identifier	SavePrefs
>23260	Identifier	g_PrefsDlg
>23261	ExpressionStatement	 
>23262	CallExpression	SetEntityCheck ( )
>23263	ArgumentList	 
>23264	Callee	SetEntityCheck
>23265	Identifier	SetEntityCheck
>23266	ExpressionStatement	 
>23267	AssignmentExpr	g_PrefsDlg . m_nEntityShowState = ENTITY_BOX
>23268	Identifier	ENTITY_BOX
>23269	MemberAccess	g_PrefsDlg . m_nEntityShowState
>23270	Identifier	m_nEntityShowState
>23271	Identifier	g_PrefsDlg
>23279	FunctionDef	CMainFrame 
>23280	ParameterList	 
>23281	ReturnType	void
>23282	CompoundStatement	 
>23283	ExpressionStatement	 
>23284	CallExpression	Sys_UpdateWindows ( W_ALL )
>23285	ArgumentList	W_ALL
>23286	Argument	W_ALL
>23287	Identifier	W_ALL
>23288	Callee	Sys_UpdateWindows
>23289	Identifier	Sys_UpdateWindows
>23290	ExpressionStatement	 
>23291	CallExpression	g_PrefsDlg . SavePrefs ( )
>23292	ArgumentList	 
>23293	Callee	g_PrefsDlg . SavePrefs
>23294	MemberAccess	g_PrefsDlg . SavePrefs
>23295	Identifier	SavePrefs
>23296	Identifier	g_PrefsDlg
>23297	ExpressionStatement	 
>23298	CallExpression	SetEntityCheck ( )
>23299	ArgumentList	 
>23300	Callee	SetEntityCheck
>23301	Identifier	SetEntityCheck
>23302	ExpressionStatement	 
>23303	AssignmentExpr	g_PrefsDlg . m_nEntityShowState = ENTITY_SELECTED_SKIN
>23304	Identifier	ENTITY_SELECTED_SKIN
>23305	MemberAccess	g_PrefsDlg . m_nEntityShowState
>23306	Identifier	m_nEntityShowState
>23307	Identifier	g_PrefsDlg
>23315	FunctionDef	CMainFrame 
>23316	ParameterList	 
>23317	ReturnType	void
>23318	CompoundStatement	 
>23319	ExpressionStatement	 
>23320	CallExpression	Sys_UpdateWindows ( W_ALL )
>23321	ArgumentList	W_ALL
>23322	Argument	W_ALL
>23323	Identifier	W_ALL
>23324	Callee	Sys_UpdateWindows
>23325	Identifier	Sys_UpdateWindows
>23326	ExpressionStatement	 
>23327	CallExpression	g_PrefsDlg . SavePrefs ( )
>23328	ArgumentList	 
>23329	Callee	g_PrefsDlg . SavePrefs
>23330	MemberAccess	g_PrefsDlg . SavePrefs
>23331	Identifier	SavePrefs
>23332	Identifier	g_PrefsDlg
>23333	ExpressionStatement	 
>23334	CallExpression	SetEntityCheck ( )
>23335	ArgumentList	 
>23336	Callee	SetEntityCheck
>23337	Identifier	SetEntityCheck
>23338	ExpressionStatement	 
>23339	AssignmentExpr	g_PrefsDlg . m_nEntityShowState = ENTITY_SELECTED
>23340	Identifier	ENTITY_SELECTED
>23341	MemberAccess	g_PrefsDlg . m_nEntityShowState
>23342	Identifier	m_nEntityShowState
>23343	Identifier	g_PrefsDlg
>23351	FunctionDef	CMainFrame 
>23352	ParameterList	 
>23353	ReturnType	void
>23354	CompoundStatement	 
>23355	ExpressionStatement	 
>23356	CallExpression	Sys_UpdateWindows ( W_ALL )
>23357	ArgumentList	W_ALL
>23358	Argument	W_ALL
>23359	Identifier	W_ALL
>23360	Callee	Sys_UpdateWindows
>23361	Identifier	Sys_UpdateWindows
>23362	ExpressionStatement	 
>23363	CallExpression	g_PrefsDlg . SavePrefs ( )
>23364	ArgumentList	 
>23365	Callee	g_PrefsDlg . SavePrefs
>23366	MemberAccess	g_PrefsDlg . SavePrefs
>23367	Identifier	SavePrefs
>23368	Identifier	g_PrefsDlg
>23369	ExpressionStatement	 
>23370	CallExpression	SetEntityCheck ( )
>23371	ArgumentList	 
>23372	Callee	SetEntityCheck
>23373	Identifier	SetEntityCheck
>23374	ExpressionStatement	 
>23375	AssignmentExpr	g_PrefsDlg . m_nEntityShowState = ENTITY_SKINNED
>23376	Identifier	ENTITY_SKINNED
>23377	MemberAccess	g_PrefsDlg . m_nEntityShowState
>23378	Identifier	m_nEntityShowState
>23379	Identifier	g_PrefsDlg
>23387	FunctionDef	CMainFrame 
>23388	ParameterList	 
>23389	ReturnType	void
>23390	CompoundStatement	 
>23391	ExpressionStatement	 
>23392	CallExpression	Sys_UpdateWindows ( W_ALL )
>23393	ArgumentList	W_ALL
>23394	Argument	W_ALL
>23395	Identifier	W_ALL
>23396	Callee	Sys_UpdateWindows
>23397	Identifier	Sys_UpdateWindows
>23398	ExpressionStatement	 
>23399	CallExpression	g_PrefsDlg . SavePrefs ( )
>23400	ArgumentList	 
>23401	Callee	g_PrefsDlg . SavePrefs
>23402	MemberAccess	g_PrefsDlg . SavePrefs
>23403	Identifier	SavePrefs
>23404	Identifier	g_PrefsDlg
>23405	ExpressionStatement	 
>23406	CallExpression	SetEntityCheck ( )
>23407	ArgumentList	 
>23408	Callee	SetEntityCheck
>23409	Identifier	SetEntityCheck
>23410	ExpressionStatement	 
>23411	AssignmentExpr	g_PrefsDlg . m_nEntityShowState = ENTITY_SKINNED_BOXED
>23412	Identifier	ENTITY_SKINNED_BOXED
>23413	MemberAccess	g_PrefsDlg . m_nEntityShowState
>23414	Identifier	m_nEntityShowState
>23415	Identifier	g_PrefsDlg
>23423	FunctionDef	CMainFrame 
>23424	ParameterList	 
>23425	ReturnType	void
>23426	CompoundStatement	 
>23427	ExpressionStatement	 
>23428	CallExpression	Sys_UpdateWindows ( W_ALL )
>23429	ArgumentList	W_ALL
>23430	Argument	W_ALL
>23431	Identifier	W_ALL
>23432	Callee	Sys_UpdateWindows
>23433	Identifier	Sys_UpdateWindows
>23434	ExpressionStatement	 
>23435	CallExpression	g_PrefsDlg . SavePrefs ( )
>23436	ArgumentList	 
>23437	Callee	g_PrefsDlg . SavePrefs
>23438	MemberAccess	g_PrefsDlg . SavePrefs
>23439	Identifier	SavePrefs
>23440	Identifier	g_PrefsDlg
>23441	ExpressionStatement	 
>23442	CallExpression	SetEntityCheck ( )
>23443	ArgumentList	 
>23444	Callee	SetEntityCheck
>23445	Identifier	SetEntityCheck
>23446	ExpressionStatement	 
>23447	AssignmentExpr	g_PrefsDlg . m_nEntityShowState = ENTITY_WIRE
>23448	Identifier	ENTITY_WIRE
>23449	MemberAccess	g_PrefsDlg . m_nEntityShowState
>23450	Identifier	m_nEntityShowState
>23451	Identifier	g_PrefsDlg
>23459	FunctionDef	CMainFrame 
>23460	ParameterList	 
>23461	ReturnType	void
>23462	CompoundStatement	 
>23463	ExpressionStatement	 
>23464	CallExpression	m_PlugInMgr . Init ( str )
>23465	ArgumentList	str
>23466	Argument	str
>23467	Identifier	str
>23468	Callee	m_PlugInMgr . Init
>23469	MemberAccess	m_PlugInMgr . Init
>23470	Identifier	Init
>23471	Identifier	m_PlugInMgr
>23472	ExpressionStatement	 
>23473	AssignmentExpr	str += \"plugins\\\"
>23474	PrimaryExpression	\"plugins\\\"
>23475	Identifier	str
>23476	ExpressionStatement	 
>23477	CallExpression	AddSlash ( str )
>23478	ArgumentList	str
>23479	Argument	str
>23480	Identifier	str
>23481	Callee	AddSlash
>23482	Identifier	AddSlash
>23483	IdentifierDeclStatement	 
>23484	IdentifierDecl	str ( g_strAppPath )
>23485	Identifier	g_strAppPath
>23486	Identifier	str
>23487	IdentifierDeclType	CString
>23488	ExpressionStatement	 
>23489	CallExpression	CleanPlugInMenu ( )
>23490	ArgumentList	 
>23491	Callee	CleanPlugInMenu
>23492	Identifier	CleanPlugInMenu
>23498	FunctionDef	CMainFrame 
>23499	ParameterList	 
>23500	ReturnType	void
>23501	CompoundStatement	 
>23502	IfStatement	if ( pSub )
>23503	CompoundStatement	 
>23504	ForStatement	for ( int i = n ; i > 1 ; i -- )
>23505	CompoundStatement	 
>23506	ExpressionStatement	 
>23507	CallExpression	pSub -> RemoveMenu ( i , MF_BYPOSITION )
>23508	ArgumentList	i
>23509	Argument	MF_BYPOSITION
>23510	Identifier	MF_BYPOSITION
>23511	Argument	i
>23512	Identifier	i
>23513	Callee	pSub -> RemoveMenu
>23514	PtrMemberAccess	pSub -> RemoveMenu
>23515	Identifier	RemoveMenu
>23516	Identifier	pSub
>23517	IncDecOp	 
>23518	IncDec	--
>23519	Identifier	i
>23520	Condition	 
>23521	RelationalExpression	i > 1
>23522	PrimaryExpression	1
>23523	Identifier	i
>23524	ForInit	 
>23525	IdentifierDeclStatement	int i = n ;
>23526	IdentifierDecl	i = n
>23527	AssignmentExpr	i = n
>23528	Identifier	n
>23529	Identifier	n
>23530	Identifier	i
>23531	IdentifierDeclType	int
>23532	IdentifierDeclStatement	 
>23533	IdentifierDecl	n = pSub -> GetMenuItemCount ( )
>23534	AssignmentExpr	n = pSub -> GetMenuItemCount ( )
>23535	CallExpression	pSub -> GetMenuItemCount ( )
>23536	ArgumentList	 
>23537	Callee	pSub -> GetMenuItemCount
>23538	PtrMemberAccess	pSub -> GetMenuItemCount
>23539	Identifier	GetMenuItemCount
>23540	Identifier	pSub
>23541	Identifier	n
>23542	Identifier	n
>23543	IdentifierDeclType	int
>23544	Condition	 
>23545	Identifier	pSub
>23546	IdentifierDeclStatement	 
>23547	IdentifierDecl	* pSub = pMenu -> GetSubMenu ( MENU_PLUGIN )
>23548	AssignmentExpr	* pSub = pMenu -> GetSubMenu ( MENU_PLUGIN )
>23549	CallExpression	pMenu -> GetSubMenu ( MENU_PLUGIN )
>23550	ArgumentList	MENU_PLUGIN
>23551	Argument	MENU_PLUGIN
>23552	Identifier	MENU_PLUGIN
>23553	Callee	pMenu -> GetSubMenu
>23554	PtrMemberAccess	pMenu -> GetSubMenu
>23555	Identifier	GetSubMenu
>23556	Identifier	pMenu
>23557	Identifier	pSub
>23558	Identifier	pSub
>23559	IdentifierDeclType	CMenu *
>23560	IdentifierDeclStatement	 
>23561	IdentifierDecl	* pMenu = GetMenu ( )
>23562	AssignmentExpr	* pMenu = GetMenu ( )
>23563	CallExpression	GetMenu ( )
>23564	ArgumentList	 
>23565	Callee	GetMenu
>23566	Identifier	GetMenu
>23567	Identifier	pMenu
>23568	Identifier	pMenu
>23569	IdentifierDeclType	CMenu *
>23570	ExpressionStatement	 
>23571	AssignmentExpr	m_nNextPlugInID = ID_PLUGIN_START
>23572	Identifier	ID_PLUGIN_START
>23573	Identifier	m_nNextPlugInID
>23590	FunctionDef	CMainFrame 
>23591	ParameterList	CPlugIn * pPlugIn
>23592	Parameter	 
>23593	Identifier	pPlugIn
>23594	ParameterType	CPlugIn *
>23595	ReturnType	void
>23596	CompoundStatement	 
>23597	IfStatement	if ( pSub )
>23598	CompoundStatement	 
>23599	IfStatement	if ( nCount > 0 )
>23600	CompoundStatement	 
>23601	ExpressionStatement	 
>23602	Statement	 
>23603	Statement	 
>23604	Statement	 
>23605	Statement	 
>23606	Statement	 
>23607	Statement	 
>23608	Statement	 
>23609	Statement	 
>23610	Statement	 
>23611	Statement	 
>23612	Statement	 
>23613	Statement	 
>23614	Statement	 
>23615	Statement	 
>23616	Statement	 
>23617	Statement	 
>23618	Statement	 
>23619	Statement	 
>23620	Statement	 
>23621	Statement	 
>23622	Statement	 
>23623	Statement	 
>23624	Statement	 
>23625	Statement	 
>23626	Statement	 
>23627	WhileStatement	while ( nCount > 0 )
>23628	CompoundStatement	 
>23629	IfStatement	if ( menuText != NULL && strlen ( menuText ) > 0 )
>23630	CompoundStatement	 
>23631	ExpressionStatement	 
>23632	CallExpression	pPlugIn -> addMenuID ( m_nNextPlugInID ++ )
>23633	ArgumentList	m_nNextPlugInID ++
>23634	Argument	m_nNextPlugInID ++
>23635	IncDecOp	m_nNextPlugInID ++
>23636	IncDec	++
>23637	Identifier	m_nNextPlugInID
>23638	Callee	pPlugIn -> addMenuID
>23639	PtrMemberAccess	pPlugIn -> addMenuID
>23640	Identifier	addMenuID
>23641	Identifier	pPlugIn
>23642	IfStatement	if ( ! strcmp ( menuText , \"-\" ) )
>23643	ElseStatement	else
>23644	ExpressionStatement	 
>23645	CallExpression	pChild -> AppendMenu ( MF_STRING , m_nNextPlugInID , menuText )
>23646	ArgumentList	MF_STRING
>23647	Argument	menuText
>23648	Identifier	menuText
>23649	Argument	m_nNextPlugInID
>23650	Identifier	m_nNextPlugInID
>23651	Argument	MF_STRING
>23652	Identifier	MF_STRING
>23653	Callee	pChild -> AppendMenu
>23654	PtrMemberAccess	pChild -> AppendMenu
>23655	Identifier	AppendMenu
>23656	Identifier	pChild
>23657	ExpressionStatement	 
>23658	CallExpression	pChild -> AppendMenu ( MF_SEPARATOR , NULL )
>23659	ArgumentList	MF_SEPARATOR
>23660	Argument	NULL
>23661	Identifier	NULL
>23662	Argument	MF_SEPARATOR
>23663	Identifier	MF_SEPARATOR
>23664	Callee	pChild -> AppendMenu
>23665	PtrMemberAccess	pChild -> AppendMenu
>23666	Identifier	AppendMenu
>23667	Identifier	pChild
>23668	Condition	 
>23669	UnaryOp	! strcmp ( menuText , \"-\" )
>23670	CallExpression	strcmp ( menuText , \"-\" )
>23671	ArgumentList	menuText
>23672	Argument	\"-\"
>23673	PrimaryExpression	\"-\"
>23674	Argument	menuText
>23675	Identifier	menuText
>23676	Callee	strcmp
>23677	Identifier	strcmp
>23678	UnaryOperator	!
>23679	Condition	 
>23680	AndExpression	menuText != NULL && strlen ( menuText ) > 0
>23681	RelationalExpression	strlen ( menuText ) > 0
>23682	PrimaryExpression	0
>23683	CallExpression	strlen ( menuText )
>23684	ArgumentList	menuText
>23685	Argument	menuText
>23686	Identifier	menuText
>23687	Callee	strlen
>23688	Identifier	strlen
>23689	EqualityExpression	menuText != NULL
>23690	Identifier	NULL
>23691	Identifier	menuText
>23692	ExpressionStatement	 
>23693	AssignmentExpr	menuText = pPlugIn -> getCommand ( -- nCount )
>23694	CallExpression	pPlugIn -> getCommand ( -- nCount )
>23695	ArgumentList	-- nCount
>23696	Argument	-- nCount
>23697	UnaryExpression	-- nCount
>23698	Identifier	nCount
>23699	IncDec	--
>23700	Callee	pPlugIn -> getCommand
>23701	PtrMemberAccess	pPlugIn -> getCommand
>23702	Identifier	getCommand
>23703	Identifier	pPlugIn
>23704	Identifier	menuText
>23705	Condition	 
>23706	RelationalExpression	nCount > 0
>23707	PrimaryExpression	0
>23708	Identifier	nCount
>23709	Condition	 
>23710	RelationalExpression	nCount > 0
>23711	PrimaryExpression	0
>23712	Identifier	nCount
>23713	IdentifierDeclStatement	 
>23714	IdentifierDecl	nCount = pPlugIn -> getCommandCount ( )
>23715	AssignmentExpr	nCount = pPlugIn -> getCommandCount ( )
>23716	CallExpression	pPlugIn -> getCommandCount ( )
>23717	ArgumentList	 
>23718	Callee	pPlugIn -> getCommandCount
>23719	PtrMemberAccess	pPlugIn -> getCommandCount
>23720	Identifier	getCommandCount
>23721	Identifier	pPlugIn
>23722	Identifier	nCount
>23723	Identifier	nCount
>23724	IdentifierDeclType	int
>23725	ExpressionStatement	 
>23726	CallExpression	pChild -> CreateMenu ( )
>23727	ArgumentList	 
>23728	Callee	pChild -> CreateMenu
>23729	PtrMemberAccess	pChild -> CreateMenu
>23730	Identifier	CreateMenu
>23731	Identifier	pChild
>23732	IdentifierDeclStatement	 
>23733	IdentifierDecl	* pChild = new CMenu ( )
>23734	AssignmentExpr	* pChild = new CMenu ( )
>23735	UnaryExpression	new CMenu ( )
>23736	Identifier	pChild
>23737	Identifier	pChild
>23738	IdentifierDeclType	CMenu *
>23739	Condition	 
>23740	Identifier	pSub
>23741	IdentifierDeclStatement	 
>23742	IdentifierDecl	* pSub = pMenu -> GetSubMenu ( MENU_PLUGIN )
>23743	AssignmentExpr	* pSub = pMenu -> GetSubMenu ( MENU_PLUGIN )
>23744	CallExpression	pMenu -> GetSubMenu ( MENU_PLUGIN )
>23745	ArgumentList	MENU_PLUGIN
>23746	Argument	MENU_PLUGIN
>23747	Identifier	MENU_PLUGIN
>23748	Callee	pMenu -> GetSubMenu
>23749	PtrMemberAccess	pMenu -> GetSubMenu
>23750	Identifier	GetSubMenu
>23751	Identifier	pMenu
>23752	Identifier	pSub
>23753	Identifier	pSub
>23754	IdentifierDeclType	CMenu *
>23755	IdentifierDeclStatement	 
>23756	IdentifierDecl	* pMenu = GetMenu ( )
>23757	AssignmentExpr	* pMenu = GetMenu ( )
>23758	CallExpression	GetMenu ( )
>23759	ArgumentList	 
>23760	Callee	GetMenu
>23761	Identifier	GetMenu
>23762	Identifier	pMenu
>23763	Identifier	pMenu
>23764	IdentifierDeclType	CMenu *
>23765	IdentifierDeclStatement	 
>23766	IdentifierDecl	* menuText
>23767	Identifier	menuText
>23768	IdentifierDeclType	const char *
>23791	FunctionDef	CMainFrame 
>23792	ParameterList	unsigned int nID
>23793	Parameter	 
>23794	Identifier	nID
>23795	ParameterType	unsigned int
>23796	ReturnType	void
>23797	CompoundStatement	 
>23798	ExpressionStatement	 
>23799	CallExpression	m_PlugInMgr . Dispatch ( nID , str )
>23800	ArgumentList	nID
>23801	Argument	str
>23802	Identifier	str
>23803	Argument	nID
>23804	Identifier	nID
>23805	Callee	m_PlugInMgr . Dispatch
>23806	MemberAccess	m_PlugInMgr . Dispatch
>23807	Identifier	Dispatch
>23808	Identifier	m_PlugInMgr
>23809	ExpressionStatement	 
>23810	CallExpression	pMenu -> GetMenuString ( nID , str , MF_BYCOMMAND )
>23811	ArgumentList	nID
>23812	Argument	MF_BYCOMMAND
>23813	Identifier	MF_BYCOMMAND
>23814	Argument	str
>23815	Identifier	str
>23816	Argument	nID
>23817	Identifier	nID
>23818	Callee	pMenu -> GetMenuString
>23819	PtrMemberAccess	pMenu -> GetMenuString
>23820	Identifier	GetMenuString
>23821	Identifier	pMenu
>23822	IdentifierDeclStatement	 
>23823	IdentifierDecl	str
>23824	Identifier	str
>23825	IdentifierDeclType	CString
>23826	IdentifierDeclStatement	 
>23827	IdentifierDecl	* pMenu = GetMenu ( )
>23828	AssignmentExpr	* pMenu = GetMenu ( )
>23829	CallExpression	GetMenu ( )
>23830	ArgumentList	 
>23831	Callee	GetMenu
>23832	Identifier	GetMenu
>23833	Identifier	pMenu
>23834	Identifier	pMenu
>23835	IdentifierDeclType	CMenu *
>23845	FunctionDef	CMainFrame 
>23846	ParameterList	 
>23847	ReturnType	void
>23848	CompoundStatement	 
>23849	ExpressionStatement	 
>23850	CallExpression	Sys_UpdateWindows ( W_XY | W_CAMERA )
>23851	ArgumentList	W_XY | W_CAMERA
>23852	Argument	W_XY | W_CAMERA
>23853	InclusiveOrExpression	W_XY | W_CAMERA
>23854	Identifier	W_CAMERA
>23855	Identifier	W_XY
>23856	Callee	Sys_UpdateWindows
>23857	Identifier	Sys_UpdateWindows
>23858	ExpressionStatement	 
>23859	Statement	 
>23860	Statement	 
>23861	Statement	 
>23862	Statement	 
>23863	Statement	 
>23864	Statement	 
>23865	Statement	 
>23866	Statement	 
>23867	Statement	 
>23868	Statement	 
>23869	Statement	 
>23870	Statement	 
>23871	Statement	 
>23872	Statement	 
>23873	Statement	 
>23874	ExpressionStatement	 
>23875	Statement	 
>23876	Statement	 
>23877	Statement	 
>23878	Statement	 
>23879	Statement	 
>23880	Statement	 
>23881	Statement	 
>23882	Statement	 
>23883	Statement	 
>23884	Statement	 
>23885	Statement	 
>23886	Statement	 
>23887	Statement	 
>23888	Statement	 
>23889	Statement	 
>23890	IfStatement	if ( ( g_qeglobals . d_savedinfo . exclude ^= EXCLUDE_HINT ) & EXCLUDE_HINT )
>23891	ElseStatement	else
>23892	Statement	 
>23893	Statement	 
>23894	Condition	 
>23895	BitAndExpression	( g_qeglobals . d_savedinfo . exclude ^= EXCLUDE_HINT ) & EXCLUDE_HINT
>23896	Identifier	EXCLUDE_HINT
>23897	AssignmentExpr	g_qeglobals . d_savedinfo . exclude ^= EXCLUDE_HINT
>23898	Identifier	EXCLUDE_HINT
>23899	MemberAccess	g_qeglobals . d_savedinfo . exclude
>23900	Identifier	exclude
>23901	MemberAccess	g_qeglobals . d_savedinfo
>23902	Identifier	d_savedinfo
>23903	Identifier	g_qeglobals
>23913	FunctionDef	CMainFrame 
>23914	ParameterList	 
>23915	ReturnType	void
>23916	CompoundStatement	 
>23917	ExpressionStatement	 
>23918	CallExpression	Texture_ShowAll ( )
>23919	ArgumentList	 
>23920	Callee	Texture_ShowAll
>23921	Identifier	Texture_ShowAll
>23925	FunctionDef	CMainFrame 
>23926	ParameterList	 
>23927	ReturnType	void
>23928	CompoundStatement	 
>23929	ExpressionStatement	 
>23930	CallExpression	DoPatchInspector ( )
>23931	ArgumentList	 
>23932	Callee	DoPatchInspector
>23933	Identifier	DoPatchInspector
>23937	FunctionDef	CMainFrame 
>23938	ParameterList	 
>23939	ReturnType	void
>23940	CompoundStatement	 
>23941	ExpressionStatement	 
>23942	CallExpression	Sys_UpdateWindows ( W_XY | W_CAMERA )
>23943	ArgumentList	W_XY | W_CAMERA
>23944	Argument	W_XY | W_CAMERA
>23945	InclusiveOrExpression	W_XY | W_CAMERA
>23946	Identifier	W_CAMERA
>23947	Identifier	W_XY
>23948	Callee	Sys_UpdateWindows
>23949	Identifier	Sys_UpdateWindows
>23950	ExpressionStatement	 
>23951	Statement	 
>23952	Statement	 
>23953	Label	 
>23954	Identifier	MF_CHECKED
>23955	Statement	 
>23956	Statement	 
>23957	Statement	 
>23958	Statement	 
>23959	Statement	 
>23960	Statement	 
>23961	Statement	 
>23962	Statement	 
>23963	Statement	 
>23964	Statement	 
>23965	Statement	 
>23966	Statement	 
>23967	Statement	 
>23968	Statement	 
>23969	Statement	 
>23970	Statement	 
>23971	Statement	 
>23972	Statement	 
>23973	Statement	 
>23974	Statement	 
>23975	ExpressionStatement	 
>23976	CallExpression	g_PrefsDlg . SavePrefs ( )
>23977	ArgumentList	 
>23978	Callee	g_PrefsDlg . SavePrefs
>23979	MemberAccess	g_PrefsDlg . SavePrefs
>23980	Identifier	SavePrefs
>23981	Identifier	g_PrefsDlg
>23982	ExpressionStatement	 
>23983	AssignmentExpr	g_PrefsDlg . m_bGLLighting ^= 1
>23984	PrimaryExpression	1
>23985	MemberAccess	g_PrefsDlg . m_bGLLighting
>23986	Identifier	m_bGLLighting
>23987	Identifier	g_PrefsDlg
>23995	FunctionDef	CMainFrame 
>23996	ParameterList	 
>23997	ReturnType	void
>23998	CompoundStatement	 
>23999	ExpressionStatement	 
>24000	CallExpression	Select_AllOfType ( )
>24001	ArgumentList	 
>24002	Callee	Select_AllOfType
>24003	Identifier	Select_AllOfType
>24007	FunctionDef	CMainFrame 
>24008	ParameterList	 
>24009	ReturnType	void
>24010	CompoundStatement	 
>24011	ExpressionStatement	 
>24012	CallExpression	Sys_UpdateWindows ( W_XY | W_CAMERA )
>24013	ArgumentList	W_XY | W_CAMERA
>24014	Argument	W_XY | W_CAMERA
>24015	InclusiveOrExpression	W_XY | W_CAMERA
>24016	Identifier	W_CAMERA
>24017	Identifier	W_XY
>24018	Callee	Sys_UpdateWindows
>24019	Identifier	Sys_UpdateWindows
>24020	ExpressionStatement	 
>24021	Statement	 
>24022	Statement	 
>24023	Statement	 
>24024	Statement	 
>24025	Statement	 
>24026	Statement	 
>24027	Statement	 
>24028	Statement	 
>24029	Statement	 
>24030	Statement	 
>24031	Statement	 
>24032	Statement	 
>24033	Statement	 
>24034	Statement	 
>24035	Statement	 
>24036	ExpressionStatement	 
>24037	Statement	 
>24038	Statement	 
>24039	Statement	 
>24040	Statement	 
>24041	Statement	 
>24042	Statement	 
>24043	Statement	 
>24044	Statement	 
>24045	Statement	 
>24046	Statement	 
>24047	Statement	 
>24048	Statement	 
>24049	Statement	 
>24050	Statement	 
>24051	Statement	 
>24052	IfStatement	if ( ( g_qeglobals . d_savedinfo . exclude ^= EXCLUDE_CAULK ) & EXCLUDE_CAULK )
>24053	ElseStatement	else
>24054	Statement	 
>24055	Statement	 
>24056	Condition	 
>24057	BitAndExpression	( g_qeglobals . d_savedinfo . exclude ^= EXCLUDE_CAULK ) & EXCLUDE_CAULK
>24058	Identifier	EXCLUDE_CAULK
>24059	AssignmentExpr	g_qeglobals . d_savedinfo . exclude ^= EXCLUDE_CAULK
>24060	Identifier	EXCLUDE_CAULK
>24061	MemberAccess	g_qeglobals . d_savedinfo . exclude
>24062	Identifier	exclude
>24063	MemberAccess	g_qeglobals . d_savedinfo
>24064	Identifier	d_savedinfo
>24065	Identifier	g_qeglobals
>24075	FunctionDef	CMainFrame 
>24076	ParameterList	 
>24077	ReturnType	void
>24078	CompoundStatement	 
>24079	ExpressionStatement	 
>24080	CallExpression	Patch_Freeze ( )
>24081	ArgumentList	 
>24082	Callee	Patch_Freeze
>24083	Identifier	Patch_Freeze
>24087	FunctionDef	CMainFrame 
>24088	ParameterList	 
>24089	ReturnType	void
>24090	CompoundStatement	 
>24091	ExpressionStatement	 
>24092	CallExpression	Patch_UnFreeze ( false )
>24093	ArgumentList	false
>24094	Argument	false
>24095	Identifier	false
>24096	Callee	Patch_UnFreeze
>24097	Identifier	Patch_UnFreeze
>24102	FunctionDef	CMainFrame 
>24103	ParameterList	 
>24104	ReturnType	void
>24105	CompoundStatement	 
>24106	ExpressionStatement	 
>24107	CallExpression	Patch_UnFreeze ( true )
>24108	ArgumentList	true
>24109	Argument	true
>24110	Identifier	true
>24111	Callee	Patch_UnFreeze
>24112	Identifier	Patch_UnFreeze
>24117	FunctionDef	CMainFrame 
>24118	ParameterList	 
>24119	ReturnType	void
>24120	CompoundStatement	 
>24121	ExpressionStatement	 
>24122	CallExpression	Select_Reselect ( )
>24123	ArgumentList	 
>24124	Callee	Select_Reselect
>24125	Identifier	Select_Reselect
>24129	FunctionDef	CMainFrame 
>24130	ParameterList	 
>24131	ReturnType	void
>24132	CompoundStatement	 
>24133	ExpressionStatement	 
>24134	CallExpression	Sys_UpdateWindows ( W_XY | W_CAMERA )
>24135	ArgumentList	W_XY | W_CAMERA
>24136	Argument	W_XY | W_CAMERA
>24137	InclusiveOrExpression	W_XY | W_CAMERA
>24138	Identifier	W_CAMERA
>24139	Identifier	W_XY
>24140	Callee	Sys_UpdateWindows
>24141	Identifier	Sys_UpdateWindows
>24142	ExpressionStatement	 
>24143	Statement	 
>24144	Statement	 
>24145	Statement	 
>24146	Statement	 
>24147	Statement	 
>24148	Statement	 
>24149	Statement	 
>24150	Statement	 
>24151	Statement	 
>24152	Statement	 
>24153	Statement	 
>24154	Statement	 
>24155	Statement	 
>24156	Statement	 
>24157	Statement	 
>24158	ExpressionStatement	 
>24159	Statement	 
>24160	Statement	 
>24161	Statement	 
>24162	Statement	 
>24163	Statement	 
>24164	Statement	 
>24165	Statement	 
>24166	Statement	 
>24167	Statement	 
>24168	Statement	 
>24169	Statement	 
>24170	Statement	 
>24171	Statement	 
>24172	Statement	 
>24173	Statement	 
>24174	IfStatement	if ( ( g_qeglobals . d_savedinfo . exclude ^= EXCLUDE_ANGLES ) & EXCLUDE_ANGLES )
>24175	ElseStatement	else
>24176	Statement	 
>24177	Statement	 
>24178	Condition	 
>24179	BitAndExpression	( g_qeglobals . d_savedinfo . exclude ^= EXCLUDE_ANGLES ) & EXCLUDE_ANGLES
>24180	Identifier	EXCLUDE_ANGLES
>24181	AssignmentExpr	g_qeglobals . d_savedinfo . exclude ^= EXCLUDE_ANGLES
>24182	Identifier	EXCLUDE_ANGLES
>24183	MemberAccess	g_qeglobals . d_savedinfo . exclude
>24184	Identifier	exclude
>24185	MemberAccess	g_qeglobals . d_savedinfo
>24186	Identifier	d_savedinfo
>24187	Identifier	g_qeglobals
>24197	FunctionDef	CMainFrame 
>24198	ParameterList	 
>24199	ReturnType	void
>24200	CompoundStatement	 
>24201	IfStatement	if ( dlgFile . DoModal ( ) == IDOK )
>24202	CompoundStatement	 
>24203	ExpressionStatement	 
>24204	CallExpression	Map_SaveSelected ( dlgFile . GetPathName ( ) . GetBuffer ( 0 ) )
>24205	ArgumentList	dlgFile . GetPathName ( ) . GetBuffer ( 0 )
>24206	Argument	dlgFile . GetPathName ( ) . GetBuffer ( 0 )
>24207	CallExpression	dlgFile . GetPathName ( ) . GetBuffer ( 0 )
>24208	ArgumentList	0
>24209	Argument	0
>24210	PrimaryExpression	0
>24211	Callee	dlgFile . GetPathName ( ) . GetBuffer
>24212	MemberAccess	dlgFile . GetPathName ( ) . GetBuffer
>24213	Identifier	GetBuffer
>24214	CallExpression	dlgFile . GetPathName ( )
>24215	ArgumentList	 
>24216	Callee	dlgFile . GetPathName
>24217	MemberAccess	dlgFile . GetPathName
>24218	Identifier	GetPathName
>24219	Identifier	dlgFile
>24220	Callee	Map_SaveSelected
>24221	Identifier	Map_SaveSelected
>24222	Condition	 
>24223	EqualityExpression	dlgFile . DoModal ( ) == IDOK
>24224	Identifier	IDOK
>24225	CallExpression	dlgFile . DoModal ( )
>24226	ArgumentList	 
>24227	Callee	dlgFile . DoModal
>24228	MemberAccess	dlgFile . DoModal
>24229	Identifier	DoModal
>24230	Identifier	dlgFile
>24231	ExpressionStatement	 
>24232	AssignmentExpr	dlgFile . m_ofn . lpstrInitialDir = CurPath
>24233	Identifier	CurPath
>24234	MemberAccess	dlgFile . m_ofn . lpstrInitialDir
>24235	Identifier	lpstrInitialDir
>24236	MemberAccess	dlgFile . m_ofn
>24237	Identifier	m_ofn
>24238	Identifier	dlgFile
>24239	IfStatement	if ( g_PrefsDlg . m_strPrefabPath . GetLength ( ) > 0 )
>24240	ElseStatement	else
>24241	CompoundStatement	 
>24242	ExpressionStatement	 
>24243	CallExpression	GetCurrentDirectory ( 1024 , CurPath )
>24244	ArgumentList	1024
>24245	Argument	CurPath
>24246	Identifier	CurPath
>24247	Argument	1024
>24248	PrimaryExpression	1024
>24249	Callee	GetCurrentDirectory
>24250	Identifier	GetCurrentDirectory
>24251	Statement	 
>24252	CompoundStatement	 
>24253	ExpressionStatement	 
>24254	CallExpression	strcpy ( CurPath , g_PrefsDlg . m_strPrefabPath )
>24255	ArgumentList	CurPath
>24256	Argument	g_PrefsDlg . m_strPrefabPath
>24257	MemberAccess	g_PrefsDlg . m_strPrefabPath
>24258	Identifier	m_strPrefabPath
>24259	Identifier	g_PrefsDlg
>24260	Argument	CurPath
>24261	Identifier	CurPath
>24262	Callee	strcpy
>24263	Identifier	strcpy
>24264	Condition	 
>24265	RelationalExpression	g_PrefsDlg . m_strPrefabPath . GetLength ( ) > 0
>24266	PrimaryExpression	0
>24267	CallExpression	g_PrefsDlg . m_strPrefabPath . GetLength ( )
>24268	ArgumentList	 
>24269	Callee	g_PrefsDlg . m_strPrefabPath . GetLength
>24270	MemberAccess	g_PrefsDlg . m_strPrefabPath . GetLength
>24271	Identifier	GetLength
>24272	MemberAccess	g_PrefsDlg . m_strPrefabPath
>24273	Identifier	m_strPrefabPath
>24274	Identifier	g_PrefsDlg
>24275	IdentifierDeclStatement	 
>24276	IdentifierDecl	CurPath [ 1024 ]
>24277	PrimaryExpression	1024
>24278	Identifier	CurPath
>24279	IdentifierDeclType	char [ 1024 ]
>24280	IdentifierDeclStatement	 
>24281	IdentifierDecl	dlgFile ( FALSE , \"pfb\" , NULL , OFN_HIDEREADONLY | OFN_OVERWRITEPROMPT , \"Prefab files (*.pfb)|*.pfb||\" , this )
>24282	Expression	FALSE , \"pfb\" , NULL , OFN_HIDEREADONLY | OFN_OVERWRITEPROMPT , \"Prefab files (*.pfb)|*.pfb||\" , this
>24283	Expression	\"pfb\" , NULL , OFN_HIDEREADONLY | OFN_OVERWRITEPROMPT , \"Prefab files (*.pfb)|*.pfb||\" , this
>24284	Expression	NULL , OFN_HIDEREADONLY | OFN_OVERWRITEPROMPT , \"Prefab files (*.pfb)|*.pfb||\" , this
>24285	Expression	OFN_HIDEREADONLY | OFN_OVERWRITEPROMPT , \"Prefab files (*.pfb)|*.pfb||\" , this
>24286	Expression	\"Prefab files (*.pfb)|*.pfb||\" , this
>24287	Identifier	this
>24288	PrimaryExpression	\"Prefab files (*.pfb)|*.pfb||\"
>24289	InclusiveOrExpression	OFN_HIDEREADONLY | OFN_OVERWRITEPROMPT
>24290	Identifier	OFN_OVERWRITEPROMPT
>24291	Identifier	OFN_HIDEREADONLY
>24292	Identifier	NULL
>24293	PrimaryExpression	\"pfb\"
>24294	Identifier	FALSE
>24295	Identifier	dlgFile
>24296	IdentifierDeclType	CFileDialog
>24311	FunctionDef	CMainFrame 
>24312	ParameterList	 
>24313	ReturnType	void
>24314	CompoundStatement	 
>24315	IfStatement	if ( dlgFile . DoModal ( ) == IDOK )
>24316	CompoundStatement	 
>24317	ExpressionStatement	 
>24318	CallExpression	Map_ImportFile ( dlgFile . GetPathName ( ) . GetBuffer ( 0 ) )
>24319	ArgumentList	dlgFile . GetPathName ( ) . GetBuffer ( 0 )
>24320	Argument	dlgFile . GetPathName ( ) . GetBuffer ( 0 )
>24321	CallExpression	dlgFile . GetPathName ( ) . GetBuffer ( 0 )
>24322	ArgumentList	0
>24323	Argument	0
>24324	PrimaryExpression	0
>24325	Callee	dlgFile . GetPathName ( ) . GetBuffer
>24326	MemberAccess	dlgFile . GetPathName ( ) . GetBuffer
>24327	Identifier	GetBuffer
>24328	CallExpression	dlgFile . GetPathName ( )
>24329	ArgumentList	 
>24330	Callee	dlgFile . GetPathName
>24331	MemberAccess	dlgFile . GetPathName
>24332	Identifier	GetPathName
>24333	Identifier	dlgFile
>24334	Callee	Map_ImportFile
>24335	Identifier	Map_ImportFile
>24336	Condition	 
>24337	EqualityExpression	dlgFile . DoModal ( ) == IDOK
>24338	Identifier	IDOK
>24339	CallExpression	dlgFile . DoModal ( )
>24340	ArgumentList	 
>24341	Callee	dlgFile . DoModal
>24342	MemberAccess	dlgFile . DoModal
>24343	Identifier	DoModal
>24344	Identifier	dlgFile
>24345	ExpressionStatement	 
>24346	AssignmentExpr	dlgFile . m_ofn . lpstrInitialDir = CurPath
>24347	Identifier	CurPath
>24348	MemberAccess	dlgFile . m_ofn . lpstrInitialDir
>24349	Identifier	lpstrInitialDir
>24350	MemberAccess	dlgFile . m_ofn
>24351	Identifier	m_ofn
>24352	Identifier	dlgFile
>24353	IfStatement	if ( g_PrefsDlg . m_strPrefabPath . GetLength ( ) > 0 )
>24354	ElseStatement	else
>24355	CompoundStatement	 
>24356	ExpressionStatement	 
>24357	CallExpression	GetCurrentDirectory ( 1024 , CurPath )
>24358	ArgumentList	1024
>24359	Argument	CurPath
>24360	Identifier	CurPath
>24361	Argument	1024
>24362	PrimaryExpression	1024
>24363	Callee	GetCurrentDirectory
>24364	Identifier	GetCurrentDirectory
>24365	Statement	 
>24366	CompoundStatement	 
>24367	ExpressionStatement	 
>24368	CallExpression	strcpy ( CurPath , g_PrefsDlg . m_strPrefabPath )
>24369	ArgumentList	CurPath
>24370	Argument	g_PrefsDlg . m_strPrefabPath
>24371	MemberAccess	g_PrefsDlg . m_strPrefabPath
>24372	Identifier	m_strPrefabPath
>24373	Identifier	g_PrefsDlg
>24374	Argument	CurPath
>24375	Identifier	CurPath
>24376	Callee	strcpy
>24377	Identifier	strcpy
>24378	Condition	 
>24379	RelationalExpression	g_PrefsDlg . m_strPrefabPath . GetLength ( ) > 0
>24380	PrimaryExpression	0
>24381	CallExpression	g_PrefsDlg . m_strPrefabPath . GetLength ( )
>24382	ArgumentList	 
>24383	Callee	g_PrefsDlg . m_strPrefabPath . GetLength
>24384	MemberAccess	g_PrefsDlg . m_strPrefabPath . GetLength
>24385	Identifier	GetLength
>24386	MemberAccess	g_PrefsDlg . m_strPrefabPath
>24387	Identifier	m_strPrefabPath
>24388	Identifier	g_PrefsDlg
>24389	IdentifierDeclStatement	 
>24390	IdentifierDecl	CurPath [ 1024 ]
>24391	PrimaryExpression	1024
>24392	Identifier	CurPath
>24393	IdentifierDeclType	char [ 1024 ]
>24394	IdentifierDeclStatement	 
>24395	IdentifierDecl	dlgFile ( TRUE , \"pfb\" , NULL , OFN_HIDEREADONLY | OFN_OVERWRITEPROMPT , \"Prefab files (*.pfb)|*.pfb||\" , this )
>24396	Expression	TRUE , \"pfb\" , NULL , OFN_HIDEREADONLY | OFN_OVERWRITEPROMPT , \"Prefab files (*.pfb)|*.pfb||\" , this
>24397	Expression	\"pfb\" , NULL , OFN_HIDEREADONLY | OFN_OVERWRITEPROMPT , \"Prefab files (*.pfb)|*.pfb||\" , this
>24398	Expression	NULL , OFN_HIDEREADONLY | OFN_OVERWRITEPROMPT , \"Prefab files (*.pfb)|*.pfb||\" , this
>24399	Expression	OFN_HIDEREADONLY | OFN_OVERWRITEPROMPT , \"Prefab files (*.pfb)|*.pfb||\" , this
>24400	Expression	\"Prefab files (*.pfb)|*.pfb||\" , this
>24401	Identifier	this
>24402	PrimaryExpression	\"Prefab files (*.pfb)|*.pfb||\"
>24403	InclusiveOrExpression	OFN_HIDEREADONLY | OFN_OVERWRITEPROMPT
>24404	Identifier	OFN_OVERWRITEPROMPT
>24405	Identifier	OFN_HIDEREADONLY
>24406	Identifier	NULL
>24407	PrimaryExpression	\"pfb\"
>24408	Identifier	TRUE
>24409	Identifier	dlgFile
>24410	IdentifierDeclType	CFileDialog
>24425	FunctionDef	CMainFrame 
>24426	ParameterList	 
>24427	ReturnType	void
>24428	CompoundStatement	 
>24429	ExpressionStatement	 
>24430	CallExpression	Undo_End ( )
>24431	ArgumentList	 
>24432	Callee	Undo_End
>24433	Identifier	Undo_End
>24434	ExpressionStatement	 
>24435	CallExpression	Undo_EndBrushList ( & selected_brushes )
>24436	ArgumentList	& selected_brushes
>24437	Argument	& selected_brushes
>24438	UnaryOp	& selected_brushes
>24439	Identifier	selected_brushes
>24440	UnaryOperator	&
>24441	Callee	Undo_EndBrushList
>24442	Identifier	Undo_EndBrushList
>24443	ExpressionStatement	 
>24444	CallExpression	Sys_UpdateWindows ( W_ALL )
>24445	ArgumentList	W_ALL
>24446	Argument	W_ALL
>24447	Identifier	W_ALL
>24448	Callee	Sys_UpdateWindows
>24449	Identifier	Sys_UpdateWindows
>24450	ExpressionStatement	 
>24451	CallExpression	Patch_BrushToMesh ( false , true , false , true )
>24452	ArgumentList	false
>24453	Argument	true
>24454	Identifier	true
>24455	Argument	false
>24456	Identifier	false
>24457	Argument	true
>24458	Identifier	true
>24459	Argument	false
>24460	Identifier	false
>24461	Callee	Patch_BrushToMesh
>24462	Identifier	Patch_BrushToMesh
>24463	ExpressionStatement	 
>24464	CallExpression	Undo_AddBrushList ( & selected_brushes )
>24465	ArgumentList	& selected_brushes
>24466	Argument	& selected_brushes
>24467	UnaryOp	& selected_brushes
>24468	Identifier	selected_brushes
>24469	UnaryOperator	&
>24470	Callee	Undo_AddBrushList
>24471	Identifier	Undo_AddBrushList
>24472	ExpressionStatement	 
>24473	CallExpression	Undo_Start ( \"square bevel\" )
>24474	ArgumentList	\"square bevel\"
>24475	Argument	\"square bevel\"
>24476	PrimaryExpression	\"square bevel\"
>24477	Callee	Undo_Start
>24478	Identifier	Undo_Start
>24486	FunctionDef	CMainFrame 
>24487	ParameterList	 
>24488	ReturnType	void
>24489	CompoundStatement	 
>24490	ExpressionStatement	 
>24491	CallExpression	Undo_End ( )
>24492	ArgumentList	 
>24493	Callee	Undo_End
>24494	Identifier	Undo_End
>24495	ExpressionStatement	 
>24496	CallExpression	Undo_EndBrushList ( & selected_brushes )
>24497	ArgumentList	& selected_brushes
>24498	Argument	& selected_brushes
>24499	UnaryOp	& selected_brushes
>24500	Identifier	selected_brushes
>24501	UnaryOperator	&
>24502	Callee	Undo_EndBrushList
>24503	Identifier	Undo_EndBrushList
>24504	ExpressionStatement	 
>24505	CallExpression	Sys_UpdateWindows ( W_ALL )
>24506	ArgumentList	W_ALL
>24507	Argument	W_ALL
>24508	Identifier	W_ALL
>24509	Callee	Sys_UpdateWindows
>24510	Identifier	Sys_UpdateWindows
>24511	ExpressionStatement	 
>24512	CallExpression	Patch_BrushToMesh ( false , false , true , true )
>24513	ArgumentList	false
>24514	Argument	true
>24515	Identifier	true
>24516	Argument	true
>24517	Identifier	true
>24518	Argument	false
>24519	Identifier	false
>24520	Argument	false
>24521	Identifier	false
>24522	Callee	Patch_BrushToMesh
>24523	Identifier	Patch_BrushToMesh
>24524	ExpressionStatement	 
>24525	CallExpression	Undo_AddBrushList ( & selected_brushes )
>24526	ArgumentList	& selected_brushes
>24527	Argument	& selected_brushes
>24528	UnaryOp	& selected_brushes
>24529	Identifier	selected_brushes
>24530	UnaryOperator	&
>24531	Callee	Undo_AddBrushList
>24532	Identifier	Undo_AddBrushList
>24533	ExpressionStatement	 
>24534	CallExpression	Undo_Start ( \"square endcap\" )
>24535	ArgumentList	\"square endcap\"
>24536	Argument	\"square endcap\"
>24537	PrimaryExpression	\"square endcap\"
>24538	Callee	Undo_Start
>24539	Identifier	Undo_Start
>24547	FunctionDef	CMainFrame 
>24548	ParameterList	 
>24549	ReturnType	void
>24550	CompoundStatement	 
>24551	ExpressionStatement	 
>24552	CallExpression	Undo_End ( )
>24553	ArgumentList	 
>24554	Callee	Undo_End
>24555	Identifier	Undo_End
>24556	ExpressionStatement	 
>24557	CallExpression	Undo_EndBrushList ( & selected_brushes )
>24558	ArgumentList	& selected_brushes
>24559	Argument	& selected_brushes
>24560	UnaryOp	& selected_brushes
>24561	Identifier	selected_brushes
>24562	UnaryOperator	&
>24563	Callee	Undo_EndBrushList
>24564	Identifier	Undo_EndBrushList
>24565	ExpressionStatement	 
>24566	CallExpression	DoSides ( false , true )
>24567	ArgumentList	false
>24568	Argument	true
>24569	Identifier	true
>24570	Argument	false
>24571	Identifier	false
>24572	Callee	DoSides
>24573	Identifier	DoSides
>24574	ExpressionStatement	 
>24575	CallExpression	Undo_AddBrushList ( & selected_brushes )
>24576	ArgumentList	& selected_brushes
>24577	Argument	& selected_brushes
>24578	UnaryOp	& selected_brushes
>24579	Identifier	selected_brushes
>24580	UnaryOperator	&
>24581	Callee	Undo_AddBrushList
>24582	Identifier	Undo_AddBrushList
>24583	ExpressionStatement	 
>24584	CallExpression	Undo_Start ( \"make sphere\" )
>24585	ArgumentList	\"make sphere\"
>24586	Argument	\"make sphere\"
>24587	PrimaryExpression	\"make sphere\"
>24588	Callee	Undo_Start
>24589	Identifier	Undo_Start
>24598	FunctionDef	CMainFrame 
>24599	ParameterList	 
>24600	ReturnType	void
>24601	CompoundStatement	 
>24602	ExpressionStatement	 
>24603	CallExpression	Sys_UpdateWindows ( W_XY )
>24604	ArgumentList	W_XY
>24605	Argument	W_XY
>24606	Identifier	W_XY
>24607	Callee	Sys_UpdateWindows
>24608	Identifier	Sys_UpdateWindows
>24609	ExpressionStatement	 
>24610	AssignmentExpr	g_bCrossHairs ^= 1
>24611	PrimaryExpression	1
>24612	Identifier	g_bCrossHairs
>24618	FunctionDef	CMainFrame 
>24619	ParameterList	 
>24620	ReturnType	void
>24621	CompoundStatement	 
>24622	ExpressionStatement	 
>24623	CallExpression	Select_Deselect ( )
>24624	ArgumentList	 
>24625	Callee	Select_Deselect
>24626	Identifier	Select_Deselect
>24627	ExpressionStatement	 
>24628	CallExpression	Select_Hide ( )
>24629	ArgumentList	 
>24630	Callee	Select_Hide
>24631	Identifier	Select_Hide
>24635	FunctionDef	CMainFrame 
>24636	ParameterList	 
>24637	ReturnType	void
>24638	CompoundStatement	 
>24639	ExpressionStatement	 
>24640	CallExpression	Select_ShowAllHidden ( )
>24641	ArgumentList	 
>24642	Callee	Select_ShowAllHidden
>24643	Identifier	Select_ShowAllHidden
>24647	FunctionDef	CMainFrame 
>24648	ParameterList	 
>24649	ReturnType	void
>24650	CompoundStatement	 
>24651	ExpressionStatement	 
>24652	CallExpression	Sys_UpdateWindows ( W_TEXTURE )
>24653	ArgumentList	W_TEXTURE
>24654	Argument	W_TEXTURE
>24655	Identifier	W_TEXTURE
>24656	Callee	Sys_UpdateWindows
>24657	Identifier	Sys_UpdateWindows
>24658	ExpressionStatement	 
>24659	Statement	 
>24660	Statement	 
>24661	Statement	 
>24662	Label	 
>24663	Identifier	MF_CHECKED
>24664	Statement	 
>24665	Statement	 
>24666	Statement	 
>24667	Statement	 
>24668	Statement	 
>24669	Statement	 
>24670	Statement	 
>24671	Statement	 
>24672	Statement	 
>24673	Statement	 
>24674	Statement	 
>24675	Statement	 
>24676	Statement	 
>24677	Statement	 
>24678	Statement	 
>24679	Statement	 
>24680	Statement	 
>24681	Statement	 
>24682	Statement	 
>24683	Statement	 
>24684	Statement	 
>24685	ExpressionStatement	 
>24686	AssignmentExpr	g_PrefsDlg . m_bShowShaders ^= 1
>24687	PrimaryExpression	1
>24688	MemberAccess	g_PrefsDlg . m_bShowShaders
>24689	Identifier	m_bShowShaders
>24690	Identifier	g_PrefsDlg
>24697	FunctionDef	CMainFrame 
>24698	ParameterList	 
>24699	ReturnType	void
>24700	CompoundStatement	 
>24701	ExpressionStatement	 
>24702	CallExpression	Sys_UpdateWindows ( W_TEXTURE )
>24703	ArgumentList	W_TEXTURE
>24704	Argument	W_TEXTURE
>24705	Identifier	W_TEXTURE
>24706	Callee	Sys_UpdateWindows
>24707	Identifier	Sys_UpdateWindows
>24708	ExpressionStatement	 
>24709	CallExpression	Texture_FlushUnused ( )
>24710	ArgumentList	 
>24711	Callee	Texture_FlushUnused
>24712	Identifier	Texture_FlushUnused
>24717	FunctionDef	CMainFrame 
>24718	ParameterList	 
>24719	ReturnType	void
>24720	CompoundStatement	 
>24721	ExpressionStatement	 
>24722	CallExpression	Sys_UpdateWindows ( W_XY | W_Z | W_CAMERA )
>24723	ArgumentList	W_XY | W_Z | W_CAMERA
>24724	Argument	W_XY | W_Z | W_CAMERA
>24725	InclusiveOrExpression	W_XY | W_Z | W_CAMERA
>24726	InclusiveOrExpression	W_Z | W_CAMERA
>24727	Identifier	W_CAMERA
>24728	Identifier	W_Z
>24729	Identifier	W_XY
>24730	Callee	Sys_UpdateWindows
>24731	Identifier	Sys_UpdateWindows
>24732	ExpressionStatement	 
>24733	CallExpression	Select_Invert ( )
>24734	ArgumentList	 
>24735	Callee	Select_Invert
>24736	Identifier	Select_Invert
>24743	FunctionDef	CMainFrame 
>24744	ParameterList	 
>24745	ReturnType	void
>24746	CompoundStatement	 
>24747	IfStatement	if ( m_nCurrentStyle == 0 || m_nCurrentStyle == 3 )
>24748	ElseStatement	else
>24749	CompoundStatement	 
>24750	ExpressionStatement	 
>24751	CallExpression	SetInspectorMode ( W_GROUP )
>24752	ArgumentList	W_GROUP
>24753	Argument	W_GROUP
>24754	Identifier	W_GROUP
>24755	Callee	SetInspectorMode
>24756	Identifier	SetInspectorMode
>24757	ExpressionStatement	 
>24758	CallExpression	ShowWindow ( g_qeglobals . d_hwndEntity , SW_NORMAL )
>24759	ArgumentList	g_qeglobals . d_hwndEntity
>24760	Argument	SW_NORMAL
>24761	Identifier	SW_NORMAL
>24762	Argument	g_qeglobals . d_hwndEntity
>24763	MemberAccess	g_qeglobals . d_hwndEntity
>24764	Identifier	d_hwndEntity
>24765	Identifier	g_qeglobals
>24766	Callee	ShowWindow
>24767	Identifier	ShowWindow
>24768	Statement	 
>24769	CompoundStatement	 
>24770	ExpressionStatement	 
>24771	CallExpression	ShowWindow ( g_qeglobals . d_hwndEntity , SW_HIDE )
>24772	ArgumentList	g_qeglobals . d_hwndEntity
>24773	Argument	SW_HIDE
>24774	Identifier	SW_HIDE
>24775	Argument	g_qeglobals . d_hwndEntity
>24776	MemberAccess	g_qeglobals . d_hwndEntity
>24777	Identifier	d_hwndEntity
>24778	Identifier	g_qeglobals
>24779	Callee	ShowWindow
>24780	Identifier	ShowWindow
>24781	Statement	 
>24782	Statement	 
>24783	Statement	 
>24784	Statement	 
>24785	Statement	 
>24786	Statement	 
>24787	Statement	 
>24788	Statement	 
>24789	Statement	 
>24790	Statement	 
>24791	Statement	 
>24792	Statement	 
>24793	Statement	 
>24794	Statement	 
>24795	Statement	 
>24796	Condition	 
>24797	OrExpression	m_nCurrentStyle == 0 || m_nCurrentStyle == 3
>24798	EqualityExpression	m_nCurrentStyle == 3
>24799	PrimaryExpression	3
>24800	Identifier	m_nCurrentStyle
>24801	EqualityExpression	m_nCurrentStyle == 0
>24802	PrimaryExpression	0
>24803	Identifier	m_nCurrentStyle
>24813	FunctionDef	CMainFrame 
>24814	ParameterList	 
>24815	ReturnType	void
>24816	CompoundStatement	 
>24817	ExpressionStatement	 
>24818	CallExpression	Sys_UpdateWindows ( W_ALL )
>24819	ArgumentList	W_ALL
>24820	Argument	W_ALL
>24821	Identifier	W_ALL
>24822	Callee	Sys_UpdateWindows
>24823	Identifier	Sys_UpdateWindows
>24824	ExpressionStatement	 
>24825	CallExpression	Select_AddToGroup ( \"World\" )
>24826	ArgumentList	\"World\"
>24827	Argument	\"World\"
>24828	PrimaryExpression	\"World\"
>24829	Callee	Select_AddToGroup
>24830	Identifier	Select_AddToGroup
>24835	FunctionDef	CMainFrame 
>24836	ParameterList	 
>24837	ReturnType	void
>24838	CompoundStatement	 
>24839	IfStatement	if ( dlg . DoModal ( ) == IDOK )
>24840	CompoundStatement	 
>24841	ExpressionStatement	 
>24842	CallExpression	Sys_UpdateWindows ( W_ALL )
>24843	ArgumentList	W_ALL
>24844	Argument	W_ALL
>24845	Identifier	W_ALL
>24846	Callee	Sys_UpdateWindows
>24847	Identifier	Sys_UpdateWindows
>24848	ExpressionStatement	 
>24849	CallExpression	Select_Name ( dlg . m_strName )
>24850	ArgumentList	dlg . m_strName
>24851	Argument	dlg . m_strName
>24852	MemberAccess	dlg . m_strName
>24853	Identifier	m_strName
>24854	Identifier	dlg
>24855	Callee	Select_Name
>24856	Identifier	Select_Name
>24857	Condition	 
>24858	EqualityExpression	dlg . DoModal ( ) == IDOK
>24859	Identifier	IDOK
>24860	CallExpression	dlg . DoModal ( )
>24861	ArgumentList	 
>24862	Callee	dlg . DoModal
>24863	MemberAccess	dlg . DoModal
>24864	Identifier	DoModal
>24865	Identifier	dlg
>24866	IdentifierDeclStatement	 
>24867	IdentifierDecl	dlg ( \"Name Selection\" , this )
>24868	Expression	\"Name Selection\" , this
>24869	Identifier	this
>24870	PrimaryExpression	\"Name Selection\"
>24871	Identifier	dlg
>24872	IdentifierDeclType	CNameDlg
>24881	FunctionDef	CMainFrame 
>24882	ParameterList	 
>24883	ReturnType	void
>24884	CompoundStatement	 
>24888	FunctionDef	CMainFrame 
>24889	ParameterList	 
>24890	ReturnType	void
>24891	CompoundStatement	 
>24892	ExpressionStatement	 
>24893	CallExpression	Sys_UpdateWindows ( W_ALL )
>24894	ArgumentList	W_ALL
>24895	Argument	W_ALL
>24896	Identifier	W_ALL
>24897	Callee	Sys_UpdateWindows
>24898	Identifier	Sys_UpdateWindows
>24899	ExpressionStatement	 
>24900	CallExpression	Select_AddToGroup ( \"World\" )
>24901	ArgumentList	\"World\"
>24902	Argument	\"World\"
>24903	PrimaryExpression	\"World\"
>24904	Callee	Select_AddToGroup
>24905	Identifier	Select_AddToGroup
>24910	FunctionDef	CMainFrame 
>24911	ParameterList	 
>24912	ReturnType	void
>24913	CompoundStatement	 
>24914	ExpressionStatement	 
>24915	CallExpression	Sys_UpdateWindows ( W_ALL )
>24916	ArgumentList	W_ALL
>24917	Argument	W_ALL
>24918	Identifier	W_ALL
>24919	Callee	Sys_UpdateWindows
>24920	Identifier	Sys_UpdateWindows
>24921	ExpressionStatement	 
>24922	CallExpression	showCameraInspector ( )
>24923	ArgumentList	 
>24924	Callee	showCameraInspector
>24925	Identifier	showCameraInspector
>24926	ExpressionStatement	 
>24927	CallExpression	g_splineList -> startEdit ( true )
>24928	ArgumentList	true
>24929	Argument	true
>24930	Identifier	true
>24931	Callee	g_splineList -> startEdit
>24932	PtrMemberAccess	g_splineList -> startEdit
>24933	Identifier	startEdit
>24934	Identifier	g_splineList
>24935	ExpressionStatement	 
>24936	CallExpression	g_splineList -> clear ( )
>24937	ArgumentList	 
>24938	Callee	g_splineList -> clear
>24939	PtrMemberAccess	g_splineList -> clear
>24940	Identifier	clear
>24941	Identifier	g_splineList
>24942	ExpressionStatement	 
>24943	AssignmentExpr	g_qeglobals . selectObject = g_splineList -> getPositionObj ( )
>24944	CallExpression	g_splineList -> getPositionObj ( )
>24945	ArgumentList	 
>24946	Callee	g_splineList -> getPositionObj
>24947	PtrMemberAccess	g_splineList -> getPositionObj
>24948	Identifier	getPositionObj
>24949	Identifier	g_splineList
>24950	MemberAccess	g_qeglobals . selectObject
>24951	Identifier	selectObject
>24952	Identifier	g_qeglobals
>24953	ExpressionStatement	 
>24954	AssignmentExpr	g_qeglobals . d_select_mode = sel_addpoint
>24955	Identifier	sel_addpoint
>24956	MemberAccess	g_qeglobals . d_select_mode
>24957	Identifier	d_select_mode
>24958	Identifier	g_qeglobals
>24971	FunctionDef	CMainFrame 
>24972	ParameterList	 
>24973	ReturnType	void
>24974	CompoundStatement	 
>24975	ExpressionStatement	 
>24976	CallExpression	g_splineList -> buildCamera ( )
>24977	ArgumentList	 
>24978	Callee	g_splineList -> buildCamera
>24979	PtrMemberAccess	g_splineList -> buildCamera
>24980	Identifier	buildCamera
>24981	Identifier	g_splineList
>24982	ExpressionStatement	 
>24983	CallExpression	g_splineList -> load ( \"maps/test.camera\" )
>24984	ArgumentList	\"maps/test.camera\"
>24985	Argument	\"maps/test.camera\"
>24986	PrimaryExpression	\"maps/test.camera\"
>24987	Callee	g_splineList -> load
>24988	PtrMemberAccess	g_splineList -> load
>24989	Identifier	load
>24990	Identifier	g_splineList
>24995	FunctionDef	CMainFrame 
>24996	ParameterList	 
>24997	ReturnType	void
>24998	CompoundStatement	 
>24999	ExpressionStatement	 
>25000	CallExpression	g_splineList -> save ( \"maps/test.camera\" )
>25001	ArgumentList	\"maps/test.camera\"
>25002	Argument	\"maps/test.camera\"
>25003	PrimaryExpression	\"maps/test.camera\"
>25004	Callee	g_splineList -> save
>25005	PtrMemberAccess	g_splineList -> save
>25006	Identifier	save
>25007	Identifier	g_splineList
>25012	FunctionDef	CMainFrame 
>25013	ParameterList	 
>25014	ReturnType	void
>25015	CompoundStatement	 
>25016	ExpressionStatement	 
>25017	CallExpression	Sys_UpdateWindows ( W_ALL )
>25018	ArgumentList	W_ALL
>25019	Argument	W_ALL
>25020	Identifier	W_ALL
>25021	Callee	Sys_UpdateWindows
>25022	Identifier	Sys_UpdateWindows
>25023	ExpressionStatement	 
>25024	CallExpression	showCameraInspector ( )
>25025	ArgumentList	 
>25026	Callee	showCameraInspector
>25027	Identifier	showCameraInspector
>25034	FunctionDef	CMainFrame 
>25035	ParameterList	 
>25036	ReturnType	void
>25037	CompoundStatement	 
>25038	ExpressionStatement	 
>25039	CallExpression	g_splineList -> setRunning ( false )
>25040	ArgumentList	false
>25041	Argument	false
>25042	Identifier	false
>25043	Callee	g_splineList -> setRunning
>25044	PtrMemberAccess	g_splineList -> setRunning
>25045	Identifier	setRunning
>25046	Identifier	g_splineList
>25047	WhileStatement	while ( current < start + msecs )
>25048	CompoundStatement	 
>25049	ExpressionStatement	 
>25050	AssignmentExpr	current = GetTickCount ( )
>25051	CallExpression	GetTickCount ( )
>25052	ArgumentList	 
>25053	Callee	GetTickCount
>25054	Identifier	GetTickCount
>25055	Identifier	current
>25056	ExpressionStatement	 
>25057	CallExpression	g_pParentWnd -> UpdateWindows ( W_XY | W_CAMERA )
>25058	ArgumentList	W_XY | W_CAMERA
>25059	Argument	W_XY | W_CAMERA
>25060	InclusiveOrExpression	W_XY | W_CAMERA
>25061	Identifier	W_CAMERA
>25062	Identifier	W_XY
>25063	Callee	g_pParentWnd -> UpdateWindows
>25064	PtrMemberAccess	g_pParentWnd -> UpdateWindows
>25065	Identifier	UpdateWindows
>25066	Identifier	g_pParentWnd
>25067	ExpressionStatement	 
>25068	AssignmentExpr	g_pParentWnd -> GetCamera ( ) -> Camera ( ) . angles [ 0 ] = asin ( dir [ 2 ] ) * 180 / 3.14159
>25069	MultiplicativeExpression	asin ( dir [ 2 ] ) * 180 / 3.14159
>25070	MultiplicativeExpression	180 / 3.14159
>25071	PrimaryExpression	3.14159
>25072	PrimaryExpression	180
>25073	CallExpression	asin ( dir [ 2 ] )
>25074	ArgumentList	dir [ 2 ]
>25075	Argument	dir [ 2 ]
>25076	ArrayIndexing	dir [ 2 ]
>25077	PrimaryExpression	2
>25078	Identifier	dir
>25079	Callee	asin
>25080	Identifier	asin
>25081	ArrayIndexing	g_pParentWnd -> GetCamera ( ) -> Camera ( ) . angles [ 0 ]
>25082	PrimaryExpression	0
>25083	MemberAccess	g_pParentWnd -> GetCamera ( ) -> Camera ( ) . angles
>25084	Identifier	angles
>25085	CallExpression	g_pParentWnd -> GetCamera ( ) -> Camera ( )
>25086	ArgumentList	 
>25087	Callee	g_pParentWnd -> GetCamera ( ) -> Camera
>25088	PtrMemberAccess	g_pParentWnd -> GetCamera ( ) -> Camera
>25089	Identifier	Camera
>25090	CallExpression	g_pParentWnd -> GetCamera ( )
>25091	ArgumentList	 
>25092	Callee	g_pParentWnd -> GetCamera
>25093	PtrMemberAccess	g_pParentWnd -> GetCamera
>25094	Identifier	GetCamera
>25095	Identifier	g_pParentWnd
>25096	ExpressionStatement	 
>25097	AssignmentExpr	g_pParentWnd -> GetCamera ( ) -> Camera ( ) . angles [ 1 ] = atan2 ( dir [ 1 ] , dir [ 0 ] ) * 180 / \
>25098	MultiplicativeExpression	atan2 ( dir [ 1 ] , dir [ 0 ] ) * 180 / 3.14159
>25099	MultiplicativeExpression	180 / 3.14159
>25100	PrimaryExpression	3.14159
>25101	PrimaryExpression	180
>25102	CallExpression	atan2 ( dir [ 1 ] , dir [ 0 ] )
>25103	ArgumentList	dir [ 1 ]
>25104	Argument	dir [ 0 ]
>25105	ArrayIndexing	dir [ 0 ]
>25106	PrimaryExpression	0
>25107	Identifier	dir
>25108	Argument	dir [ 1 ]
>25109	ArrayIndexing	dir [ 1 ]
>25110	PrimaryExpression	1
>25111	Identifier	dir
>25112	Callee	atan2
>25113	Identifier	atan2
>25114	ArrayIndexing	g_pParentWnd -> GetCamera ( ) -> Camera ( ) . angles [ 1 ]
>25115	PrimaryExpression	1
>25116	MemberAccess	g_pParentWnd -> GetCamera ( ) -> Camera ( ) . angles
>25117	Identifier	angles
>25118	CallExpression	g_pParentWnd -> GetCamera ( ) -> Camera ( )
>25119	ArgumentList	 
>25120	Callee	g_pParentWnd -> GetCamera ( ) -> Camera
>25121	PtrMemberAccess	g_pParentWnd -> GetCamera ( ) -> Camera
>25122	Identifier	Camera
>25123	CallExpression	g_pParentWnd -> GetCamera ( )
>25124	ArgumentList	 
>25125	Callee	g_pParentWnd -> GetCamera
>25126	PtrMemberAccess	g_pParentWnd -> GetCamera
>25127	Identifier	GetCamera
>25128	Identifier	g_pParentWnd
>25129	ExpressionStatement	 
>25130	CallExpression	g_splineList -> getCameraInfo ( current , & g_pParentWnd -> GetCamera ( ) -> Camera ( ) . origin [ 0 ] , & dir [ \
>25131	ArgumentList	current
>25132	Argument	& fov
>25133	UnaryOp	& fov
>25134	Identifier	fov
>25135	UnaryOperator	&
>25136	Argument	& dir [ 0 ]
>25137	UnaryOp	& dir [ 0 ]
>25138	ArrayIndexing	dir [ 0 ]
>25139	PrimaryExpression	0
>25140	Identifier	dir
>25141	UnaryOperator	&
>25142	Argument	& g_pParentWnd -> GetCamera ( ) -> Camera ( ) . origin [ 0 ]
>25143	UnaryOp	& g_pParentWnd -> GetCamera ( ) -> Camera ( ) . origin [ 0 ]
>25144	ArrayIndexing	g_pParentWnd -> GetCamera ( ) -> Camera ( ) . origin [ 0 ]
>25145	PrimaryExpression	0
>25146	MemberAccess	g_pParentWnd -> GetCamera ( ) -> Camera ( ) . origin
>25147	Identifier	origin
>25148	CallExpression	g_pParentWnd -> GetCamera ( ) -> Camera ( )
>25149	ArgumentList	 
>25150	Callee	g_pParentWnd -> GetCamera ( ) -> Camera
>25151	PtrMemberAccess	g_pParentWnd -> GetCamera ( ) -> Camera
>25152	Identifier	Camera
>25153	CallExpression	g_pParentWnd -> GetCamera ( )
>25154	ArgumentList	 
>25155	Callee	g_pParentWnd -> GetCamera
>25156	PtrMemberAccess	g_pParentWnd -> GetCamera
>25157	Identifier	GetCamera
>25158	Identifier	g_pParentWnd
>25159	UnaryOperator	&
>25160	Argument	current
>25161	Identifier	current
>25162	Callee	g_splineList -> getCameraInfo
>25163	PtrMemberAccess	g_splineList -> getCameraInfo
>25164	Identifier	getCameraInfo
>25165	Identifier	g_splineList
>25166	IdentifierDeclStatement	 
>25167	IdentifierDecl	fov
>25168	Identifier	fov
>25169	IdentifierDeclType	float
>25170	Condition	 
>25171	RelationalExpression	current < start + msecs
>25172	AdditiveExpression	start + msecs
>25173	Identifier	msecs
>25174	Identifier	start
>25175	Identifier	current
>25176	IdentifierDeclStatement	 
>25177	IdentifierDecl	dir
>25178	Identifier	dir
>25179	IdentifierDeclType	vec3_t
>25180	ExpressionStatement	 
>25181	CallExpression	VectorClear ( lookat )
>25182	ArgumentList	lookat
>25183	Argument	lookat
>25184	Identifier	lookat
>25185	Callee	VectorClear
>25186	Identifier	VectorClear
>25187	IdentifierDeclStatement	 
>25188	IdentifierDecl	lookat
>25189	Identifier	lookat
>25190	IdentifierDeclType	vec3_t
>25191	IdentifierDeclStatement	 
>25192	IdentifierDecl	current = start
>25193	AssignmentExpr	current = start
>25194	Identifier	start
>25195	Identifier	start
>25196	Identifier	current
>25197	IdentifierDeclType	long
>25198	IdentifierDeclStatement	 
>25199	IdentifierDecl	msecs = cycle * 1000
>25200	AssignmentExpr	msecs = cycle * 1000
>25201	MultiplicativeExpression	cycle * 1000
>25202	PrimaryExpression	1000
>25203	Identifier	cycle
>25204	Identifier	msecs
>25205	Identifier	msecs
>25206	IdentifierDeclType	long
>25207	IdentifierDeclStatement	 
>25208	IdentifierDecl	cycle = g_splineList -> getTotalTime ( )
>25209	AssignmentExpr	cycle = g_splineList -> getTotalTime ( )
>25210	CallExpression	g_splineList -> getTotalTime ( )
>25211	ArgumentList	 
>25212	Callee	g_splineList -> getTotalTime
>25213	PtrMemberAccess	g_splineList -> getTotalTime
>25214	Identifier	getTotalTime
>25215	Identifier	g_splineList
>25216	Identifier	cycle
>25217	Identifier	cycle
>25218	IdentifierDeclType	float
>25219	ExpressionStatement	 
>25220	CallExpression	g_splineList -> startCamera ( start )
>25221	ArgumentList	start
>25222	Argument	start
>25223	Identifier	start
>25224	Callee	g_splineList -> startCamera
>25225	PtrMemberAccess	g_splineList -> startCamera
>25226	Identifier	startCamera
>25227	Identifier	g_splineList
>25228	IdentifierDeclStatement	 
>25229	IdentifierDecl	start = GetTickCount ( )
>25230	AssignmentExpr	start = GetTickCount ( )
>25231	CallExpression	GetTickCount ( )
>25232	ArgumentList	 
>25233	Callee	GetTickCount
>25234	Identifier	GetTickCount
>25235	Identifier	start
>25236	Identifier	start
>25237	IdentifierDeclType	long
>25276	FunctionDef	CMainFrame 
>25277	ParameterList	 
>25278	ReturnType	void
>25279	CompoundStatement	 
>25283	FunctionDef	CMainFrame 
>25284	ParameterList	 
>25285	ReturnType	void
>25286	CompoundStatement	 
>25290	FunctionDef	CMainFrame 
>25291	ParameterList	 
>25292	ReturnType	void
>25293	CompoundStatement	 
>25297	FunctionDef	CMainFrame 
>25298	ParameterList	 
>25299	ReturnType	void
>25300	CompoundStatement	 
>25301	ExpressionStatement	 
>25302	CallExpression	OnSplinesEdit ( )
>25303	ArgumentList	 
>25304	Callee	OnSplinesEdit
>25305	Identifier	OnSplinesEdit
>25306	ExpressionStatement	 
>25307	AssignmentExpr	g_qeglobals . selectObject = g_splineList -> startNewCamera ( idCameraPosition 
>25308	CallExpression	g_splineList -> startNewCamera ( idCameraPosition 
>25309	ArgumentList	idCameraPosition 
>25310	Argument	idCameraPosition 
>25311	Identifier	idCameraPosition 
>25312	Callee	g_splineList -> startNewCamera
>25313	PtrMemberAccess	g_splineList -> startNewCamera
>25314	Identifier	startNewCamera
>25315	Identifier	g_splineList
>25316	MemberAccess	g_qeglobals . selectObject
>25317	Identifier	selectObject
>25318	Identifier	g_qeglobals
>25319	ExpressionStatement	 
>25320	AssignmentExpr	g_qeglobals . d_select_mode = sel_addpoint
>25321	Identifier	sel_addpoint
>25322	MemberAccess	g_qeglobals . d_select_mode
>25323	Identifier	d_select_mode
>25324	Identifier	g_qeglobals
>25336	FunctionDef	CMainFrame 
>25337	ParameterList	 
>25338	ReturnType	void
>25339	CompoundStatement	 
>25340	ExpressionStatement	 
>25341	CallExpression	OnSplinesEdit ( )
>25342	ArgumentList	 
>25343	Callee	OnSplinesEdit
>25344	Identifier	OnSplinesEdit
>25345	ExpressionStatement	 
>25346	AssignmentExpr	g_qeglobals . selectObject = g_splineList -> startNewCamera ( idCameraPosition 
>25347	CallExpression	g_splineList -> startNewCamera ( idCameraPosition 
>25348	ArgumentList	idCameraPosition 
>25349	Argument	idCameraPosition 
>25350	Identifier	idCameraPosition 
>25351	Callee	g_splineList -> startNewCamera
>25352	PtrMemberAccess	g_splineList -> startNewCamera
>25353	Identifier	startNewCamera
>25354	Identifier	g_splineList
>25355	MemberAccess	g_qeglobals . selectObject
>25356	Identifier	selectObject
>25357	Identifier	g_qeglobals
>25358	ExpressionStatement	 
>25359	AssignmentExpr	g_qeglobals . d_select_mode = sel_addpoint
>25360	Identifier	sel_addpoint
>25361	MemberAccess	g_qeglobals . d_select_mode
>25362	Identifier	d_select_mode
>25363	Identifier	g_qeglobals
>25375	FunctionDef	CMainFrame 
>25376	ParameterList	 
>25377	ReturnType	void
>25378	CompoundStatement	 
>25379	ExpressionStatement	 
>25380	CallExpression	OnSplinesEdit ( )
>25381	ArgumentList	 
>25382	Callee	OnSplinesEdit
>25383	Identifier	OnSplinesEdit
>25384	ExpressionStatement	 
>25385	AssignmentExpr	g_qeglobals . selectObject = g_splineList -> startNewCamera ( idCameraPosition 
>25386	CallExpression	g_splineList -> startNewCamera ( idCameraPosition 
>25387	ArgumentList	idCameraPosition 
>25388	Argument	idCameraPosition 
>25389	Identifier	idCameraPosition 
>25390	Callee	g_splineList -> startNewCamera
>25391	PtrMemberAccess	g_splineList -> startNewCamera
>25392	Identifier	startNewCamera
>25393	Identifier	g_splineList
>25394	MemberAccess	g_qeglobals . selectObject
>25395	Identifier	selectObject
>25396	Identifier	g_qeglobals
>25397	ExpressionStatement	 
>25398	AssignmentExpr	g_qeglobals . d_select_mode = sel_addpoint
>25399	Identifier	sel_addpoint
>25400	MemberAccess	g_qeglobals . d_select_mode
>25401	Identifier	d_select_mode
>25402	Identifier	g_qeglobals
<41=50,49,42
<42=46,43
<43=45,44
<46=48,47
<50=53,51
<51=52
<53=54
<54=59,58,55
<55=57,56
<66=75,74,67
<67=71,68
<68=70,69
<71=73,72
<75=76
<76=77
<83=92,91,84
<84=88,85
<85=87,86
<88=90,89
<92=95,93
<93=94
<95=96
<96=98,97
<98=99
<105=107,106
<107=152,148,144,140,136,132,128,124,120,116,112,108
<108=109
<109=111,110
<112=113
<113=115,114
<116=117
<117=119,118
<120=121
<121=123,122
<124=125
<125=127,126
<128=129
<129=131,130
<132=133
<133=135,134
<136=137
<137=139,138
<140=141
<141=143,142
<144=145
<145=147,146
<148=149
<149=151,150
<152=153
<153=155,154
<175=177,176
<181=190,189,182
<182=186,183
<183=185,184
<186=188,187
<190=262,253,249,235,205,198,191
<191=192
<192=194,193
<194=195
<195=197,196
<198=199
<199=201,200
<201=202
<202=204,203
<205=206
<206=224,207
<207=218,214,210,208
<208=209
<210=211
<211=213,212
<214=215
<215=217,216
<218=219
<219=223,220
<220=222,221
<224=225
<225=227,226
<227=231,228
<228=229
<229=230
<231=232
<232=234,233
<235=236
<236=247,237
<237=238
<238=239
<239=243,240
<240=241
<241=242
<243=244
<244=246,245
<247=248
<249=250
<250=252,251
<253=254
<254=260,255
<255=256
<256=257
<257=259,258
<260=261
<262=263
<263=265,264
<281=290,289,282
<282=286,283
<283=285,284
<286=288,287
<296=299,298,297
<299=778,350,300
<300=346,301
<301=341,336,325,324,323,322,321,320,319,318,317,316,315,314,313,312,311,310,309,308,307,306,305,304,303,302
<325=326
<326=334,327
<327=330,328
<328=329
<330=331
<331=333,332
<334=335
<336=337
<337=339,338
<339=340
<341=342
<342=344,343
<344=345
<346=347
<347=349,348
<350=776,351
<351=754,732,710,688,666,644,622,600,578,556,534,515,496,477,458,437,407,398,394,359,352
<352=353
<353=357,354
<354=355
<355=356
<357=358
<359=392,360
<360=391,387,386,385,381,380,379,375,374,373,369,368,366,362,361
<362=363
<363=365,364
<366=367
<369=370
<370=372,371
<375=376
<376=378,377
<381=382
<382=384,383
<387=388
<388=390,389
<392=393
<394=395
<395=397,396
<398=399
<399=406,405,400
<400=404,401
<401=403,402
<407=430,408
<408=409
<409=421,410
<410=419,411
<411=412
<412=415,414,413
<415=416
<416=418,417
<419=420
<421=422
<422=424,423
<424=426,425
<426=427
<427=429,428
<430=431
<431=433,432
<433=434
<434=436,435
<437=438
<438=454,439
<439=452,440
<440=441
<441=444,443,442
<444=445
<445=451,446
<446=450,447
<447=449,448
<452=453
<454=455
<455=457,456
<458=459
<459=473,460
<460=471,461
<461=462
<462=465,464,463
<465=466
<466=470,467
<467=469,468
<471=472
<473=474
<474=476,475
<477=478
<478=492,479
<479=490,480
<480=481
<481=484,483,482
<484=485
<485=489,486
<486=488,487
<490=491
<492=493
<493=495,494
<496=497
<497=511,498
<498=509,499
<499=500
<500=503,502,501
<503=504
<504=508,505
<505=507,506
<509=510
<511=512
<512=514,513
<515=516
<516=530,517
<517=528,518
<518=519
<519=522,521,520
<522=523
<523=527,524
<524=526,525
<528=529
<530=531
<531=533,532
<534=548,535
<535=536
<536=544,537
<537=542,538
<538=539
<539=541,540
<542=543
<544=545
<545=547,546
<548=549
<549=551,550
<551=553,552
<553=555,554
<556=570,557
<557=558
<558=566,559
<559=564,560
<560=561
<561=563,562
<564=565
<566=567
<567=569,568
<570=571
<571=573,572
<573=575,574
<575=577,576
<578=592,579
<579=580
<580=588,581
<581=586,582
<582=583
<583=585,584
<586=587
<588=589
<589=591,590
<592=593
<593=595,594
<595=597,596
<597=599,598
<600=614,601
<601=602
<602=610,603
<603=608,604
<604=605
<605=607,606
<608=609
<610=611
<611=613,612
<614=615
<615=617,616
<617=619,618
<619=621,620
<622=636,623
<623=624
<624=632,625
<625=630,626
<626=627
<627=629,628
<630=631
<632=633
<633=635,634
<636=637
<637=639,638
<639=641,640
<641=643,642
<644=658,645
<645=646
<646=654,647
<647=652,648
<648=649
<649=651,650
<652=653
<654=655
<655=657,656
<658=659
<659=661,660
<661=663,662
<663=665,664
<666=680,667
<667=668
<668=676,669
<669=674,670
<670=671
<671=673,672
<674=675
<676=677
<677=679,678
<680=681
<681=683,682
<683=685,684
<685=687,686
<688=702,689
<689=690
<690=698,691
<691=696,692
<692=693
<693=695,694
<696=697
<698=699
<699=701,700
<702=703
<703=705,704
<705=707,706
<707=709,708
<710=724,711
<711=712
<712=720,713
<713=718,714
<714=715
<715=717,716
<718=719
<720=721
<721=723,722
<724=725
<725=727,726
<727=729,728
<729=731,730
<732=746,733
<733=734
<734=742,735
<735=740,736
<736=737
<737=739,738
<740=741
<742=743
<743=745,744
<746=747
<747=753,748
<748=750,749
<750=752,751
<754=768,755
<755=756
<756=764,757
<757=762,758
<758=759
<759=761,760
<762=763
<764=765
<765=767,766
<768=769
<769=775,770
<770=772,771
<772=774,773
<776=777
<778=779
<779=787,786,780
<780=785,781
<781=783,782
<783=784
<847=853,852,848
<848=849
<849=851,850
<853=1186,1178,1174,854
<854=1170,1166,1163,855
<855=1148,1140,1134,1128,1120,1099,1091,1080,1071,1062,1000,959,929,914,906,900,894,888,877,856
<856=857
<857=875,858
<858=871,865,863,859
<859=860
<860=862,861
<863=864
<865=866
<866=868,867
<868=870,869
<871=872
<872=874,873
<875=876
<877=878
<878=885,879
<879=883,880
<880=881
<881=882
<883=884
<885=887,886
<888=889
<889=891,890
<891=893,892
<894=895
<895=897,896
<897=899,898
<900=901
<901=903,902
<903=905,904
<906=907
<907=911,908
<908=910,909
<911=913,912
<914=915
<915=927,916
<916=923,921,917
<917=918
<918=920,919
<921=922
<923=924
<924=926,925
<927=928
<929=955,930
<930=931
<931=932
<932=953,933
<933=942,940,934
<934=935
<935=937,936
<937=939,938
<940=941
<942=943
<943=952,944
<944=951,945
<945=949,946
<946=947
<947=948
<949=950
<953=954
<955=956
<956=958,957
<959=996,992,989,960
<960=961
<961=977,962
<962=964,963
<964=965
<965=975,966
<966=973,967
<967=968
<968=970,969
<970=972,971
<973=974
<975=976
<977=978
<978=984,979
<979=981,980
<981=983,982
<984=986,985
<986=988,987
<989=991,990
<992=993
<993=995,994
<996=997
<997=999,998
<1000=1056,1001
<1001=1038,1020,1002
<1002=1012,1003
<1003=1004
<1004=1010,1005
<1005=1008,1006
<1006=1007
<1008=1009
<1010=1011
<1012=1013
<1013=1015,1014
<1015=1017,1016
<1017=1019,1018
<1020=1030,1021
<1021=1022
<1022=1028,1023
<1023=1026,1024
<1024=1025
<1026=1027
<1028=1029
<1030=1031
<1031=1033,1032
<1033=1035,1034
<1035=1037,1036
<1038=1048,1039
<1039=1040
<1040=1046,1041
<1041=1044,1042
<1042=1043
<1044=1045
<1046=1047
<1048=1049
<1049=1051,1050
<1051=1053,1052
<1053=1055,1054
<1056=1057
<1057=1059,1058
<1059=1061,1060
<1062=1063
<1063=1069,1064
<1064=1067,1065
<1065=1066
<1067=1068
<1069=1070
<1071=1078,1072
<1072=1073
<1073=1075,1074
<1075=1077,1076
<1078=1079
<1080=1081
<1081=1090,1082
<1082=1088,1083
<1083=1086,1084
<1084=1085
<1086=1087
<1088=1089
<1091=1093,1092
<1093=1094
<1094=1096,1095
<1096=1098,1097
<1099=1101,1100
<1101=1102
<1102=1119,1103
<1103=1115,1104
<1104=1109,1105
<1105=1106
<1106=1108,1107
<1109=1110
<1110=1112,1111
<1112=1114,1113
<1115=1116
<1116=1118,1117
<1120=1121
<1121=1125,1122
<1122=1124,1123
<1125=1127,1126
<1128=1129
<1129=1131,1130
<1131=1133,1132
<1134=1135
<1135=1137,1136
<1137=1139,1138
<1140=1141
<1141=1145,1142
<1142=1144,1143
<1145=1147,1146
<1148=1149
<1149=1161,1150
<1150=1157,1155,1151
<1151=1152
<1152=1154,1153
<1155=1156
<1157=1158
<1158=1160,1159
<1161=1162
<1163=1165,1164
<1166=1167
<1167=1169,1168
<1170=1171
<1171=1173,1172
<1174=1175
<1175=1177,1176
<1178=1182,1179
<1179=1181,1180
<1182=1185,1184,1183
<1186=1190,1187
<1187=1189,1188
<1190=1192,1191
<1235=1241,1240,1236
<1236=1237
<1237=1239,1238
<1241=2737,2736,2735,2734,2733,2722,2713,2698,2691,2686,2677,2667,2651,2647,2634,2599,2556,2521,2501,2492,2485,2476,2472,2458,2408,2404,2393,2357,2346,2310,2299,1242,1244,1255,1262,1269,1289,1323,1330,1335,1340,1345,1515,1520,1529,1544,1551,1558,1563,1567,1576,1585,1594,1609,1618,1627,1634,1646,1650,1686,1697,1733,1744,1796,1807,1859,1870,1922,1933,1969,1980,2032,2043,2095,2106,2158,2169,2205,2216,2252,2263
<1242=1243
<1244=1245
<1245=1253,1246
<1246=1251,1249,1247
<1247=1248
<1249=1250
<1251=1252
<1253=1254
<1255=1256
<1256=1258,1257
<1258=1259
<1259=1261,1260
<1262=1263
<1263=1267,1264
<1264=1265
<1265=1266
<1267=1268
<1269=1270
<1270=1287,1271
<1271=1283,1274,1272
<1272=1273
<1274=1275
<1275=1277,1276
<1277=1279,1278
<1279=1280
<1280=1282,1281
<1283=1284
<1284=1286,1285
<1287=1288
<1289=1317,1304,1290
<1290=1291
<1291=1292
<1292=1302,1293
<1293=1298,1296,1294
<1294=1295
<1296=1297
<1298=1299
<1299=1301,1300
<1302=1303
<1304=1305
<1305=1315,1306
<1306=1311,1309,1307
<1307=1308
<1309=1310
<1311=1312
<1312=1314,1313
<1315=1316
<1317=1318
<1318=1322,1319
<1319=1321,1320
<1323=1324
<1324=1328,1325
<1325=1326
<1326=1327
<1328=1329
<1330=1331
<1331=1333,1332
<1333=1334
<1335=1336
<1336=1338,1337
<1338=1339
<1340=1341
<1341=1343,1342
<1343=1344
<1345=1509,1495,1346
<1346=1347
<1347=1380,1348
<1348=1365,1349
<1349=1350
<1350=1363,1351
<1351=1352
<1352=1353
<1353=1357,1354
<1354=1355
<1355=1356
<1357=1358
<1358=1360,1359
<1360=1362,1361
<1363=1364
<1365=1366
<1366=1377,1367
<1367=1369,1368
<1369=1371,1370
<1371=1372
<1372=1374,1373
<1374=1376,1375
<1377=1379,1378
<1380=1491,1381
<1381=1484,1470,1456,1434,1425,1418,1407,1400,1393,1382
<1382=1383
<1383=1391,1384
<1384=1389,1387,1385
<1385=1386
<1387=1388
<1389=1390
<1391=1392
<1393=1394
<1394=1398,1395
<1395=1396
<1396=1397
<1398=1399
<1400=1401
<1401=1405,1402
<1402=1403
<1403=1404
<1405=1406
<1407=1408
<1408=1416,1409
<1409=1414,1410
<1410=1411
<1411=1413,1412
<1414=1415
<1416=1417
<1418=1419
<1419=1423,1420
<1420=1421
<1421=1422
<1423=1424
<1425=1426
<1426=1432,1427
<1427=1430,1428
<1428=1429
<1430=1431
<1432=1433
<1434=1435
<1435=1455,1454,1436
<1436=1453,1437
<1437=1451,1438
<1438=1449,1447,1439
<1439=1440
<1440=1446,1441
<1441=1443,1442
<1443=1445,1444
<1447=1448
<1449=1450
<1451=1452
<1456=1457
<1457=1467,1458
<1458=1464,1459
<1459=1461,1460
<1461=1463,1462
<1464=1466,1465
<1467=1469,1468
<1470=1471
<1471=1481,1472
<1472=1478,1473
<1473=1475,1474
<1475=1477,1476
<1478=1480,1479
<1481=1483,1482
<1484=1488,1485
<1485=1487,1486
<1488=1490,1489
<1491=1492
<1492=1494,1493
<1495=1503,1496
<1496=1497
<1497=1499,1498
<1499=1500
<1500=1502,1501
<1503=1504
<1504=1506,1505
<1506=1508,1507
<1509=1510
<1510=1512,1511
<1512=1514,1513
<1515=1516
<1516=1518,1517
<1518=1519
<1520=1521
<1521=1525,1522
<1522=1523
<1523=1524
<1525=1526
<1526=1528,1527
<1529=1530
<1530=1540,1531
<1531=1534,1532
<1532=1533
<1534=1535
<1535=1537,1536
<1537=1539,1538
<1540=1541
<1541=1543,1542
<1544=1545
<1545=1550,1549,1546
<1546=1548,1547
<1551=1552
<1552=1556,1553
<1553=1554
<1554=1555
<1556=1557
<1558=1559
<1559=1561,1560
<1561=1562
<1563=1564
<1564=1566,1565
<1567=1568
<1568=1573,1569
<1569=1571,1570
<1571=1572
<1573=1575,1574
<1576=1577
<1577=1583,1578
<1578=1579
<1579=1580
<1580=1582,1581
<1583=1584
<1585=1586
<1586=1590,1587
<1587=1588
<1588=1589
<1590=1591
<1591=1593,1592
<1594=1595
<1595=1605,1596
<1596=1603,1601,1599,1597
<1597=1598
<1599=1600
<1601=1602
<1603=1604
<1605=1606
<1606=1608,1607
<1609=1610
<1610=1614,1611
<1611=1612
<1612=1613
<1614=1615
<1615=1617,1616
<1618=1619
<1619=1623,1620
<1620=1621
<1621=1622
<1623=1624
<1624=1626,1625
<1627=1628
<1628=1633,1632,1629
<1629=1631,1630
<1634=1635
<1635=1637,1636
<1637=1638
<1638=1640,1639
<1640=1642,1641
<1642=1643
<1643=1645,1644
<1646=1647
<1647=1649,1648
<1650=1682,1651
<1651=1667,1652
<1652=1653
<1653=1663,1654
<1654=1661,1659,1657,1655
<1655=1656
<1657=1658
<1659=1660
<1661=1662
<1663=1664
<1664=1666,1665
<1667=1668
<1668=1678,1669
<1669=1676,1674,1672,1670
<1670=1671
<1672=1673
<1674=1675
<1676=1677
<1678=1679
<1679=1681,1680
<1682=1683
<1683=1685,1684
<1686=1687
<1687=1696,1688
<1688=1692,1689
<1689=1690
<1690=1691
<1692=1693
<1693=1695,1694
<1697=1729,1698
<1698=1714,1699
<1699=1700
<1700=1710,1701
<1701=1708,1706,1704,1702
<1702=1703
<1704=1705
<1706=1707
<1708=1709
<1710=1711
<1711=1713,1712
<1714=1715
<1715=1725,1716
<1716=1723,1721,1719,1717
<1717=1718
<1719=1720
<1721=1722
<1723=1724
<1725=1726
<1726=1728,1727
<1729=1730
<1730=1732,1731
<1733=1734
<1734=1743,1735
<1735=1739,1736
<1736=1737
<1737=1738
<1739=1740
<1740=1742,1741
<1744=1792,1745
<1745=1777,1762,1746
<1746=1747
<1747=1753,1748
<1748=1751,1749
<1749=1750
<1751=1752
<1753=1754
<1754=1756,1755
<1756=1758,1757
<1758=1759
<1759=1761,1760
<1762=1763
<1763=1773,1764
<1764=1771,1769,1767,1765
<1765=1766
<1767=1768
<1769=1770
<1771=1772
<1773=1774
<1774=1776,1775
<1777=1778
<1778=1788,1779
<1779=1786,1784,1782,1780
<1780=1781
<1782=1783
<1784=1785
<1786=1787
<1788=1789
<1789=1791,1790
<1792=1793
<1793=1795,1794
<1796=1797
<1797=1806,1798
<1798=1802,1799
<1799=1800
<1800=1801
<1802=1803
<1803=1805,1804
<1807=1855,1808
<1808=1840,1825,1809
<1809=1810
<1810=1816,1811
<1811=1814,1812
<1812=1813
<1814=1815
<1816=1817
<1817=1819,1818
<1819=1821,1820
<1821=1822
<1822=1824,1823
<1825=1826
<1826=1836,1827
<1827=1834,1832,1830,1828
<1828=1829
<1830=1831
<1832=1833
<1834=1835
<1836=1837
<1837=1839,1838
<1840=1841
<1841=1851,1842
<1842=1849,1847,1845,1843
<1843=1844
<1845=1846
<1847=1848
<1849=1850
<1851=1852
<1852=1854,1853
<1855=1856
<1856=1858,1857
<1859=1860
<1860=1869,1861
<1861=1865,1862
<1862=1863
<1863=1864
<1865=1866
<1866=1868,1867
<1870=1918,1871
<1871=1903,1888,1872
<1872=1873
<1873=1879,1874
<1874=1877,1875
<1875=1876
<1877=1878
<1879=1880
<1880=1882,1881
<1882=1884,1883
<1884=1885
<1885=1887,1886
<1888=1889
<1889=1899,1890
<1890=1897,1895,1893,1891
<1891=1892
<1893=1894
<1895=1896
<1897=1898
<1899=1900
<1900=1902,1901
<1903=1904
<1904=1914,1905
<1905=1912,1910,1908,1906
<1906=1907
<1908=1909
<1910=1911
<1912=1913
<1914=1915
<1915=1917,1916
<1918=1919
<1919=1921,1920
<1922=1923
<1923=1932,1924
<1924=1928,1925
<1925=1926
<1926=1927
<1928=1929
<1929=1931,1930
<1933=1965,1934
<1934=1950,1935
<1935=1936
<1936=1946,1937
<1937=1944,1942,1940,1938
<1938=1939
<1940=1941
<1942=1943
<1944=1945
<1946=1947
<1947=1949,1948
<1950=1951
<1951=1961,1952
<1952=1959,1957,1955,1953
<1953=1954
<1955=1956
<1957=1958
<1959=1960
<1961=1962
<1962=1964,1963
<1965=1966
<1966=1968,1967
<1969=1970
<1970=1979,1971
<1971=1975,1972
<1972=1973
<1973=1974
<1975=1976
<1976=1978,1977
<1980=2028,1981
<1981=2013,1998,1982
<1982=1983
<1983=1989,1984
<1984=1987,1985
<1985=1986
<1987=1988
<1989=1990
<1990=1992,1991
<1992=1994,1993
<1994=1995
<1995=1997,1996
<1998=1999
<1999=2009,2000
<2000=2007,2005,2003,2001
<2001=2002
<2003=2004
<2005=2006
<2007=2008
<2009=2010
<2010=2012,2011
<2013=2014
<2014=2024,2015
<2015=2022,2020,2018,2016
<2016=2017
<2018=2019
<2020=2021
<2022=2023
<2024=2025
<2025=2027,2026
<2028=2029
<2029=2031,2030
<2032=2033
<2033=2042,2034
<2034=2038,2035
<2035=2036
<2036=2037
<2038=2039
<2039=2041,2040
<2043=2091,2044
<2044=2076,2061,2045
<2045=2046
<2046=2052,2047
<2047=2050,2048
<2048=2049
<2050=2051
<2052=2053
<2053=2055,2054
<2055=2057,2056
<2057=2058
<2058=2060,2059
<2061=2062
<2062=2072,2063
<2063=2070,2068,2066,2064
<2064=2065
<2066=2067
<2068=2069
<2070=2071
<2072=2073
<2073=2075,2074
<2076=2077
<2077=2087,2078
<2078=2085,2083,2081,2079
<2079=2080
<2081=2082
<2083=2084
<2085=2086
<2087=2088
<2088=2090,2089
<2091=2092
<2092=2094,2093
<2095=2096
<2096=2105,2097
<2097=2101,2098
<2098=2099
<2099=2100
<2101=2102
<2102=2104,2103
<2106=2154,2107
<2107=2139,2124,2108
<2108=2109
<2109=2115,2110
<2110=2113,2111
<2111=2112
<2113=2114
<2115=2116
<2116=2118,2117
<2118=2120,2119
<2120=2121
<2121=2123,2122
<2124=2125
<2125=2135,2126
<2126=2133,2131,2129,2127
<2127=2128
<2129=2130
<2131=2132
<2133=2134
<2135=2136
<2136=2138,2137
<2139=2140
<2140=2150,2141
<2141=2148,2146,2144,2142
<2142=2143
<2144=2145
<2146=2147
<2148=2149
<2150=2151
<2151=2153,2152
<2154=2155
<2155=2157,2156
<2158=2159
<2159=2168,2160
<2160=2164,2161
<2161=2162
<2162=2163
<2164=2165
<2165=2167,2166
<2169=2201,2170
<2170=2186,2171
<2171=2172
<2172=2182,2173
<2173=2180,2178,2176,2174
<2174=2175
<2176=2177
<2178=2179
<2180=2181
<2182=2183
<2183=2185,2184
<2186=2187
<2187=2197,2188
<2188=2195,2193,2191,2189
<2189=2190
<2191=2192
<2193=2194
<2195=2196
<2197=2198
<2198=2200,2199
<2201=2202
<2202=2204,2203
<2205=2206
<2206=2215,2207
<2207=2211,2208
<2208=2209
<2209=2210
<2211=2212
<2212=2214,2213
<2216=2248,2217
<2217=2233,2218
<2218=2219
<2219=2229,2220
<2220=2227,2225,2223,2221
<2221=2222
<2223=2224
<2225=2226
<2227=2228
<2229=2230
<2230=2232,2231
<2233=2234
<2234=2244,2235
<2235=2242,2240,2238,2236
<2236=2237
<2238=2239
<2240=2241
<2242=2243
<2244=2245
<2245=2247,2246
<2248=2249
<2249=2251,2250
<2252=2253
<2253=2262,2254
<2254=2258,2255
<2255=2256
<2256=2257
<2258=2259
<2259=2261,2260
<2263=2295,2264
<2264=2280,2265
<2265=2266
<2266=2276,2267
<2267=2274,2272,2270,2268
<2268=2269
<2270=2271
<2272=2273
<2274=2275
<2276=2277
<2277=2279,2278
<2280=2281
<2281=2291,2282
<2282=2289,2287,2285,2283
<2283=2284
<2285=2286
<2287=2288
<2289=2290
<2291=2292
<2292=2294,2293
<2295=2296
<2296=2298,2297
<2299=2300
<2300=2309,2301
<2301=2305,2302
<2302=2303
<2303=2304
<2305=2306
<2306=2308,2307
<2310=2342,2311
<2311=2327,2312
<2312=2313
<2313=2323,2314
<2314=2321,2319,2317,2315
<2315=2316
<2317=2318
<2319=2320
<2321=2322
<2323=2324
<2324=2326,2325
<2327=2328
<2328=2338,2329
<2329=2336,2334,2332,2330
<2330=2331
<2332=2333
<2334=2335
<2336=2337
<2338=2339
<2339=2341,2340
<2342=2343
<2343=2345,2344
<2346=2347
<2347=2356,2348
<2348=2352,2349
<2349=2350
<2350=2351
<2352=2353
<2353=2355,2354
<2357=2389,2358
<2358=2374,2359
<2359=2360
<2360=2370,2361
<2361=2368,2366,2364,2362
<2362=2363
<2364=2365
<2366=2367
<2368=2369
<2370=2371
<2371=2373,2372
<2374=2375
<2375=2385,2376
<2376=2383,2381,2379,2377
<2377=2378
<2379=2380
<2381=2382
<2383=2384
<2385=2386
<2386=2388,2387
<2389=2390
<2390=2392,2391
<2393=2394
<2394=2403,2395
<2395=2399,2396
<2396=2397
<2397=2398
<2399=2400
<2400=2402,2401
<2404=2405
<2405=2407,2406
<2408=2454,2409
<2409=2439,2424,2410
<2410=2411
<2411=2415,2412
<2412=2413
<2413=2414
<2415=2416
<2416=2418,2417
<2418=2420,2419
<2420=2421
<2421=2423,2422
<2424=2425
<2425=2435,2426
<2426=2433,2431,2429,2427
<2427=2428
<2429=2430
<2431=2432
<2433=2434
<2435=2436
<2436=2438,2437
<2439=2440
<2440=2450,2441
<2441=2448,2446,2444,2442
<2442=2443
<2444=2445
<2446=2447
<2448=2449
<2450=2451
<2451=2453,2452
<2454=2455
<2455=2457,2456
<2458=2459
<2459=2471,2470,2460
<2460=2469,2461
<2461=2465,2462
<2462=2463
<2463=2464
<2465=2466
<2466=2468,2467
<2472=2473
<2473=2475,2474
<2476=2477
<2477=2483,2478
<2478=2479
<2479=2480
<2480=2482,2481
<2483=2484
<2485=2486
<2486=2490,2487
<2487=2488
<2488=2489
<2490=2491
<2492=2493
<2493=2497,2494
<2494=2495
<2495=2496
<2497=2498
<2498=2500,2499
<2501=2502
<2502=2517,2503
<2503=2504
<2504=2505
<2505=2511,2506
<2506=2510,2507
<2507=2509,2508
<2511=2513,2512
<2513=2514
<2514=2516,2515
<2517=2518
<2518=2520,2519
<2521=2534,2522
<2522=2527,2523
<2523=2524
<2524=2526,2525
<2527=2528
<2528=2532,2529
<2529=2530
<2530=2531
<2532=2533
<2534=2535
<2535=2546,2536
<2536=2545,2537
<2537=2541,2538
<2538=2539
<2539=2540
<2541=2542
<2542=2544,2543
<2546=2555,2547
<2547=2551,2548
<2548=2549
<2549=2550
<2551=2552
<2552=2554,2553
<2556=2569,2557
<2557=2562,2558
<2558=2559
<2559=2561,2560
<2562=2563
<2563=2567,2564
<2564=2565
<2565=2566
<2567=2568
<2569=2570
<2570=2589,2571
<2571=2588,2572
<2572=2584,2573
<2573=2582,2574
<2574=2575
<2575=2579,2576
<2576=2578,2577
<2579=2581,2580
<2582=2583
<2584=2585
<2585=2587,2586
<2589=2598,2590
<2590=2594,2591
<2591=2592
<2592=2593
<2594=2595
<2595=2597,2596
<2599=2612,2600
<2600=2605,2601
<2601=2602
<2602=2604,2603
<2605=2606
<2606=2610,2607
<2607=2608
<2608=2609
<2610=2611
<2612=2613
<2613=2624,2614
<2614=2623,2615
<2615=2619,2616
<2616=2617
<2617=2618
<2619=2620
<2620=2622,2621
<2624=2633,2625
<2625=2629,2626
<2626=2627
<2627=2628
<2629=2630
<2630=2632,2631
<2634=2635
<2635=2646,2645,2636
<2636=2644,2637
<2637=2640,2639,2638
<2640=2641
<2641=2643,2642
<2647=2648
<2648=2650,2649
<2651=2656,2652
<2652=2653
<2653=2655,2654
<2656=2657
<2657=2661,2658
<2658=2660,2659
<2661=2665,2662
<2662=2663
<2663=2664
<2665=2666
<2667=2668
<2668=2675,2669
<2669=2670
<2670=2671
<2671=2673,2672
<2673=2674
<2675=2676
<2677=2678
<2678=2683,2679
<2679=2681,2680
<2681=2682
<2683=2685,2684
<2686=2687
<2687=2689,2688
<2689=2690
<2691=2692
<2692=2694,2693
<2694=2695
<2695=2697,2696
<2698=2699
<2699=2701,2700
<2701=2712,2702
<2702=2704,2703
<2704=2708,2705
<2705=2706
<2706=2707
<2708=2709
<2709=2711,2710
<2713=2714
<2714=2720,2715
<2715=2716
<2716=2717
<2717=2719,2718
<2720=2721
<2722=2723
<2723=2731,2724
<2724=2729,2727,2725
<2725=2726
<2727=2728
<2729=2730
<2731=2732
<2737=2738
<2738=2752,2751,2739
<2739=2750,2740
<2740=2746,2741
<2741=2742
<2742=2743
<2743=2745,2744
<2746=2747
<2747=2749,2748
<2860=2863,2862,2861
<2863=3189,3182,3154,2869,2868,2867,2866,2864
<2864=2865
<2869=3146,3142,3139,2870
<2870=3113,2871
<2871=3109,2872
<2872=3102,3095,3088,3074,3066,3041,3030,3005,2994,2969,2962,2955,2948,2873
<2873=2944,2923,2874
<2874=2875
<2875=2876
<2876=2915,2911,2908,2877
<2877=2878
<2878=2893,2879
<2879=2881,2880
<2881=2882
<2882=2888,2883
<2883=2885,2884
<2885=2887,2886
<2888=2890,2889
<2890=2892,2891
<2893=2894
<2894=2896,2895
<2896=2904,2897
<2897=2898
<2898=2899
<2899=2901,2900
<2901=2903,2902
<2904=2905
<2905=2907,2906
<2908=2910,2909
<2911=2912
<2912=2914,2913
<2915=2916
<2916=2917
<2917=2922,2921,2918
<2918=2920,2919
<2923=2924
<2924=2925
<2925=2939,2926
<2926=2937,2927
<2927=2928
<2928=2929
<2929=2933,2930
<2930=2931
<2931=2932
<2933=2934
<2934=2936,2935
<2937=2938
<2939=2941,2940
<2941=2943,2942
<2944=2945
<2945=2947,2946
<2948=2949
<2949=2951,2950
<2951=2952
<2952=2954,2953
<2955=2956
<2956=2958,2957
<2958=2959
<2959=2961,2960
<2962=2963
<2963=2965,2964
<2965=2966
<2966=2968,2967
<2969=2990,2970
<2970=2982,2971
<2971=2972
<2972=2980,2973
<2973=2978,2976,2974
<2974=2975
<2976=2977
<2978=2979
<2980=2981
<2982=2983
<2983=2985,2984
<2985=2987,2986
<2987=2989,2988
<2990=2991
<2991=2993,2992
<2994=2995
<2995=3004,2996
<2996=3000,2997
<2997=2998
<2998=2999
<3000=3001
<3001=3003,3002
<3005=3026,3006
<3006=3018,3007
<3007=3008
<3008=3016,3009
<3009=3014,3012,3010
<3010=3011
<3012=3013
<3014=3015
<3016=3017
<3018=3019
<3019=3021,3020
<3021=3023,3022
<3023=3025,3024
<3026=3027
<3027=3029,3028
<3030=3031
<3031=3040,3032
<3032=3036,3033
<3033=3034
<3034=3035
<3036=3037
<3037=3039,3038
<3041=3062,3042
<3042=3054,3043
<3043=3044
<3044=3052,3045
<3045=3050,3048,3046
<3046=3047
<3048=3049
<3050=3051
<3052=3053
<3054=3055
<3055=3057,3056
<3057=3059,3058
<3059=3061,3060
<3062=3063
<3063=3065,3064
<3066=3067
<3067=3069,3068
<3069=3071,3070
<3071=3073,3072
<3074=3075
<3075=3087,3086,3076
<3076=3085,3077
<3077=3081,3078
<3078=3079
<3079=3080
<3081=3082
<3082=3084,3083
<3088=3089
<3089=3091,3090
<3091=3092
<3092=3094,3093
<3095=3096
<3096=3098,3097
<3098=3099
<3099=3101,3100
<3102=3103
<3103=3108,3107,3104
<3104=3106,3105
<3109=3110
<3110=3112,3111
<3113=3114
<3114=3138,3137,3115
<3115=3136,3116
<3116=3134,3117
<3117=3132,3126,3124,3122,3120,3118
<3118=3119
<3120=3121
<3122=3123
<3124=3125
<3126=3127
<3127=3129,3128
<3129=3131,3130
<3132=3133
<3134=3135
<3139=3141,3140
<3142=3143
<3143=3145,3144
<3146=3147
<3147=3148
<3148=3153,3152,3149
<3149=3151,3150
<3154=3171,3165,3155
<3155=3156
<3156=3161,3157
<3157=3158
<3158=3160,3159
<3161=3162
<3162=3164,3163
<3165=3166
<3166=3170,3167
<3167=3169,3168
<3171=3172
<3172=3174,3173
<3174=3176,3175
<3176=3177
<3177=3179,3178
<3179=3181,3180
<3182=3183
<3183=3188,3187,3184
<3184=3186,3185
<3189=3190
<3190=3192,3191
<3228=3234,3233,3229
<3229=3230
<3230=3232,3231
<3234=3235
<3235=3236
<3236=3240,3237
<3237=3238
<3238=3239
<3240=3241
<3247=3250,3249,3248
<3250=3251
<3251=3252
<3252=3254,3253
<3254=3255
<3259=3265,3264,3260
<3260=3261
<3261=3263,3262
<3265=3266
<3266=3267
<3267=3271,3268
<3268=3269
<3269=3270
<3271=3272
<3277=3280,3279,3278
<3280=3704,3548,3346,3334,3308,3303,3296,3292,3281
<3281=3282
<3282=3290,3283
<3283=3288,3286,3284
<3284=3285
<3286=3287
<3288=3289
<3290=3291
<3292=3293
<3293=3295,3294
<3296=3297
<3297=3301,3298
<3298=3299
<3299=3300
<3301=3302
<3303=3304
<3304=3306,3305
<3306=3307
<3308=3328,3309
<3309=3310
<3310=3311
<3311=3326,3312
<3312=3315,3313
<3313=3314
<3315=3316
<3316=3324,3317
<3317=3320,3318
<3318=3319
<3320=3321
<3321=3323,3322
<3324=3325
<3326=3327
<3328=3329
<3329=3331,3330
<3331=3333,3332
<3334=3342,3335
<3335=3336
<3336=3340,3337
<3337=3338
<3338=3339
<3340=3341
<3342=3343
<3343=3345,3344
<3346=3544,3357,3347
<3347=3348
<3348=3356,3349
<3349=3350
<3350=3354,3351
<3351=3352
<3352=3353
<3354=3355
<3357=3537,3536,3527,3520,3513,3509,3508,3507,3506,3505,3504,3503,3502,3501,3457,3456,3455,3454,3452,3358
<3358=3448,3359
<3359=3441,3434,3430,3414,3360
<3360=3410,3361
<3361=3393,3362
<3362=3384,3363
<3363=3364
<3364=3383,3365
<3365=3381,3366
<3366=3367
<3367=3368
<3368=3372,3369
<3369=3370
<3370=3371
<3372=3373
<3373=3375,3374
<3375=3377,3376
<3377=3378
<3378=3380,3379
<3381=3382
<3384=3385
<3385=3387,3386
<3387=3389,3388
<3389=3390
<3390=3392,3391
<3393=3394
<3394=3409,3408,3395
<3395=3407,3396
<3396=3406,3397
<3397=3405,3398
<3398=3402,3399
<3399=3401,3400
<3402=3404,3403
<3410=3411
<3411=3413,3412
<3414=3415
<3415=3429,3416
<3416=3427,3417
<3417=3418
<3418=3419
<3419=3423,3420
<3420=3421
<3421=3422
<3423=3424
<3424=3426,3425
<3427=3428
<3430=3431
<3431=3433,3432
<3434=3435
<3435=3440,3439,3436
<3436=3438,3437
<3441=3442
<3442=3446,3443
<3443=3444
<3444=3445
<3446=3447
<3448=3449
<3449=3451,3450
<3452=3453
<3457=3492,3458
<3458=3490,3459
<3459=3484,3477,3473,3467,3460
<3460=3461
<3461=3463,3462
<3463=3464
<3464=3466,3465
<3467=3468
<3468=3470,3469
<3470=3472,3471
<3473=3474
<3474=3476,3475
<3477=3478
<3478=3482,3479
<3479=3480
<3480=3481
<3482=3483
<3484=3485
<3485=3487,3486
<3487=3489,3488
<3490=3491
<3492=3493
<3493=3500,3494
<3494=3498,3495
<3495=3496
<3496=3497
<3498=3499
<3509=3510
<3510=3512,3511
<3513=3514
<3514=3518,3515
<3515=3516
<3516=3517
<3518=3519
<3520=3521
<3521=3526,3525,3522
<3522=3524,3523
<3527=3528
<3528=3534,3529
<3529=3532,3530
<3530=3531
<3532=3533
<3534=3535
<3537=3538
<3538=3543,3542,3539
<3539=3541,3540
<3544=3545
<3545=3547,3546
<3548=3685,3661,3549
<3549=3550
<3550=3626,3566,3551
<3551=3562,3552
<3552=3553
<3553=3554
<3554=3561,3555
<3555=3559,3556
<3556=3557
<3557=3558
<3559=3560
<3562=3563
<3563=3565,3564
<3566=3622,3567
<3567=3615,3608,3604,3599,3592,3577,3568
<3568=3569
<3569=3576,3570
<3570=3574,3571
<3571=3572
<3572=3573
<3574=3575
<3577=3578
<3578=3590,3579
<3579=3588,3586,3584,3580
<3580=3581
<3581=3583,3582
<3584=3585
<3586=3587
<3588=3589
<3590=3591
<3592=3593
<3593=3598,3597,3594
<3594=3596,3595
<3599=3600
<3600=3603,3602,3601
<3604=3605
<3605=3607,3606
<3608=3609
<3609=3613,3610
<3610=3611
<3611=3612
<3613=3614
<3615=3616
<3616=3621,3620,3617
<3617=3619,3618
<3622=3623
<3623=3625,3624
<3626=3646,3627
<3627=3628
<3628=3629
<3629=3645,3630
<3630=3643,3631
<3631=3632
<3632=3633
<3633=3637,3634
<3634=3635
<3635=3636
<3637=3638
<3638=3640,3639
<3640=3642,3641
<3643=3644
<3646=3647
<3647=3658,3648
<3648=3650,3649
<3650=3652,3651
<3652=3653
<3653=3655,3654
<3655=3657,3656
<3658=3660,3659
<3661=3673,3662
<3662=3663
<3663=3672,3664
<3664=3670,3665
<3665=3666
<3666=3667
<3667=3669,3668
<3670=3671
<3673=3674
<3674=3683,3675
<3675=3676
<3676=3677
<3677=3679,3678
<3679=3681,3680
<3681=3682
<3683=3684
<3685=3686
<3686=3698,3687
<3687=3696,3688
<3688=3689
<3689=3690
<3690=3692,3691
<3692=3694,3693
<3694=3695
<3696=3697
<3698=3700,3699
<3700=3702,3701
<3702=3703
<3704=3705
<3705=3710,3709,3706
<3706=3708,3707
<3752=3761,3760,3753
<3753=3757,3754
<3754=3756,3755
<3757=3759,3758
<3761=3762
<3762=3763
<3763=3769,3764
<3764=3767,3765
<3765=3766
<3767=3768
<3769=3770
<3777=3789,3788,3778
<3778=3785,3782,3779
<3779=3781,3780
<3782=3784,3783
<3785=3787,3786
<3789=3801,3790
<3790=3791
<3791=3799,3792
<3792=3797,3795,3793
<3793=3794
<3795=3796
<3797=3798
<3799=3800
<3801=3802
<3802=3804,3803
<3804=3805
<3813=3816,3815,3814
<3816=3817
<3817=3909,3818
<3818=3902,3895,3888,3883,3876,3870,3866,3857,3845,3819
<3819=3839,3820
<3820=3832,3828,3821
<3821=3822
<3822=3826,3823
<3823=3824
<3824=3825
<3826=3827
<3828=3829
<3829=3831,3830
<3832=3833
<3833=3838,3837,3834
<3834=3836,3835
<3839=3840
<3840=3842,3841
<3842=3844,3843
<3845=3855,3846
<3846=3847
<3847=3851,3848
<3848=3849
<3849=3850
<3851=3852
<3852=3854,3853
<3855=3856
<3857=3862,3858
<3858=3859
<3859=3861,3860
<3862=3863
<3863=3865,3864
<3866=3867
<3867=3869,3868
<3870=3871
<3871=3875,3872
<3872=3874,3873
<3876=3877
<3877=3882,3878
<3878=3880,3879
<3880=3881
<3883=3884
<3884=3886,3885
<3886=3887
<3888=3889
<3889=3894,3893,3890
<3890=3892,3891
<3895=3896
<3896=3901,3900,3897
<3897=3899,3898
<3902=3903
<3903=3908,3907,3904
<3904=3906,3905
<3909=3910
<3924=3936,3935,3925
<3925=3932,3929,3926
<3926=3928,3927
<3929=3931,3930
<3932=3934,3933
<3936=3937
<3937=3938
<3938=3946,3939
<3939=3944,3942,3940
<3940=3941
<3942=3943
<3944=3945
<3946=3947
<3955=3958,3957,3956
<3958=3990,3989,3988,3987,3986,3985,3984,3983,3981,3980,3979,3978,3977,3976,3975,3974,3973,3971,3970,3969,3968,3967,3966,3965,3964,3963,3961,3959
<3959=3960
<3961=3962
<3971=3972
<3981=3982
<3996=4002,4001,3997
<3997=3998
<3998=4000,3999
<4002=4003
<4003=4015,4004
<4004=4010,4005
<4005=4006
<4006=4008,4007
<4008=4009
<4010=4011
<4011=4013,4012
<4013=4014
<4015=4016
<4016=4021,4017
<4017=4019,4018
<4019=4020
<4032=4041,4040,4033
<4033=4037,4034
<4034=4036,4035
<4037=4039,4038
<4041=4092,4084,4075,4044,4042
<4042=4043
<4044=4060,4045
<4045=4059,4048,4046
<4046=4047
<4048=4049
<4049=4057,4050
<4050=4055,4051
<4051=4052
<4052=4054,4053
<4055=4056
<4057=4058
<4060=4061
<4061=4073,4062
<4062=4071,4067,4063
<4063=4064
<4064=4066,4065
<4067=4068
<4068=4070,4069
<4071=4072
<4073=4074
<4075=4076
<4076=4083,4082,4077
<4077=4081,4078
<4078=4080,4079
<4084=4085
<4085=4089,4086
<4086=4088,4087
<4089=4091,4090
<4092=4093
<4093=4095,4094
<4109=4118,4117,4110
<4110=4114,4111
<4111=4113,4112
<4114=4116,4115
<4118=4154,4146,4145,4144,4143,4142,4141,4140,4139,4138,4137,4136,4135,4119
<4119=4120
<4120=4121
<4121=4133,4122
<4122=4131,4127,4123
<4123=4124
<4124=4126,4125
<4127=4128
<4128=4130,4129
<4131=4132
<4133=4134
<4146=4147
<4147=4151,4148
<4148=4150,4149
<4151=4153,4152
<4154=4155
<4155=4157,4156
<4166=4169,4168,4167
<4169=5081,4170,4175,4180,4185,4227,4237,4242,4274,4285,4327,4338,4356,4376,4396,4416,4421,4447,4466,4470,4472,4473,4494,4498,4500,4501,4522,4526,4528,4529,4550,4554,4556,4557,4578,4582,4584,4585,4606,4610,4612,4613,4634,4638,4640,4641,4662,5042,5054,5063,5074
<4170=4171
<4171=4173,4172
<4173=4174
<4175=4176
<4176=4178,4177
<4178=4179
<4180=4181
<4181=4183,4182
<4183=4184
<4185=4225,4186
<4186=4211,4194,4187
<4187=4188
<4188=4192,4189
<4189=4190
<4190=4191
<4192=4193
<4194=4207,4195
<4195=4196
<4196=4198,4197
<4198=4199
<4199=4201,4200
<4201=4205,4202
<4202=4203
<4203=4204
<4205=4206
<4207=4208
<4208=4210,4209
<4211=4219,4212
<4212=4213
<4213=4217,4214
<4214=4215
<4215=4216
<4217=4218
<4219=4220
<4220=4224,4221
<4221=4223,4222
<4225=4226
<4227=4235,4228
<4228=4229
<4229=4233,4230
<4230=4231
<4231=4232
<4233=4234
<4235=4236
<4237=4238
<4238=4240,4239
<4240=4241
<4242=4264,4243
<4243=4255,4248,4244
<4244=4245
<4245=4247,4246
<4248=4249
<4249=4253,4250
<4250=4251
<4251=4252
<4253=4254
<4255=4256
<4256=4263,4262,4257
<4257=4261,4258
<4258=4260,4259
<4264=4265
<4265=4271,4266
<4266=4270,4267
<4267=4269,4268
<4271=4273,4272
<4274=4275
<4275=4284,4283,4276
<4276=4282,4277
<4277=4279,4278
<4279=4281,4280
<4285=4325,4286
<4286=4316,4307,4298,4291,4287
<4287=4288
<4288=4290,4289
<4291=4292
<4292=4296,4293
<4293=4294
<4294=4295
<4296=4297
<4298=4299
<4299=4305,4300
<4300=4301
<4301=4302
<4302=4304,4303
<4305=4306
<4307=4308
<4308=4314,4309
<4309=4310
<4310=4311
<4311=4313,4312
<4314=4315
<4316=4317
<4317=4324,4323,4318
<4318=4322,4319
<4319=4321,4320
<4325=4326
<4327=4328
<4328=4337,4336,4329
<4329=4335,4330
<4330=4332,4331
<4332=4334,4333
<4338=4348,4339
<4339=4340
<4340=4346,4341
<4341=4342
<4342=4343
<4343=4345,4344
<4346=4347
<4348=4349
<4349=4353,4350
<4350=4352,4351
<4353=4355,4354
<4356=4368,4357
<4357=4358
<4358=4366,4359
<4359=4362,4360
<4360=4361
<4362=4363
<4363=4365,4364
<4366=4367
<4368=4369
<4369=4373,4370
<4370=4372,4371
<4373=4375,4374
<4376=4388,4377
<4377=4378
<4378=4386,4379
<4379=4382,4380
<4380=4381
<4382=4383
<4383=4385,4384
<4386=4387
<4388=4389
<4389=4393,4390
<4390=4392,4391
<4393=4395,4394
<4396=4408,4397
<4397=4398
<4398=4406,4399
<4399=4402,4400
<4400=4401
<4402=4403
<4403=4405,4404
<4406=4407
<4408=4409
<4409=4413,4410
<4410=4412,4411
<4413=4415,4414
<4416=4417
<4417=4419,4418
<4419=4420
<4421=4436,4422
<4422=4430,4423
<4423=4424
<4424=4426,4425
<4426=4427
<4427=4429,4428
<4430=4431
<4431=4433,4432
<4433=4435,4434
<4436=4437
<4437=4439,4438
<4439=4445,4440
<4440=4443,4441
<4441=4442
<4443=4444
<4445=4446
<4447=4448
<4448=4464,4449
<4449=4462,4456,4450
<4450=4451
<4451=4455,4452
<4452=4454,4453
<4456=4457
<4457=4461,4458
<4458=4460,4459
<4462=4463
<4464=4465
<4466=4467
<4467=4469,4468
<4470=4471
<4473=4487,4474
<4474=4475
<4475=4483,4476
<4476=4481,4479,4477
<4477=4478
<4479=4480
<4481=4482
<4483=4484
<4484=4486,4485
<4487=4488
<4488=4490,4489
<4490=4491
<4491=4493,4492
<4494=4495
<4495=4497,4496
<4498=4499
<4501=4515,4502
<4502=4503
<4503=4511,4504
<4504=4509,4507,4505
<4505=4506
<4507=4508
<4509=4510
<4511=4512
<4512=4514,4513
<4515=4516
<4516=4518,4517
<4518=4519
<4519=4521,4520
<4522=4523
<4523=4525,4524
<4526=4527
<4529=4543,4530
<4530=4531
<4531=4539,4532
<4532=4537,4535,4533
<4533=4534
<4535=4536
<4537=4538
<4539=4540
<4540=4542,4541
<4543=4544
<4544=4546,4545
<4546=4547
<4547=4549,4548
<4550=4551
<4551=4553,4552
<4554=4555
<4557=4571,4558
<4558=4559
<4559=4567,4560
<4560=4565,4563,4561
<4561=4562
<4563=4564
<4565=4566
<4567=4568
<4568=4570,4569
<4571=4572
<4572=4574,4573
<4574=4575
<4575=4577,4576
<4578=4579
<4579=4581,4580
<4582=4583
<4585=4599,4586
<4586=4587
<4587=4595,4588
<4588=4593,4591,4589
<4589=4590
<4591=4592
<4593=4594
<4595=4596
<4596=4598,4597
<4599=4600
<4600=4602,4601
<4602=4603
<4603=4605,4604
<4606=4607
<4607=4609,4608
<4610=4611
<4613=4627,4614
<4614=4615
<4615=4623,4616
<4616=4621,4619,4617
<4617=4618
<4619=4620
<4621=4622
<4623=4624
<4624=4626,4625
<4627=4628
<4628=4630,4629
<4630=4631
<4631=4633,4632
<4634=4635
<4635=4637,4636
<4638=4639
<4641=4655,4642
<4642=4643
<4643=4651,4644
<4644=4649,4647,4645
<4645=4646
<4647=4648
<4649=4650
<4651=4652
<4652=4654,4653
<4655=4656
<4656=4658,4657
<4658=4659
<4659=4661,4660
<4662=5034,4763,4663
<4663=4664
<4664=4749,4735,4721,4707,4693,4679,4665
<4665=4666
<4666=4677,4667
<4667=4670,4668
<4668=4669
<4670=4671
<4671=4673,4672
<4673=4674
<4674=4676,4675
<4677=4678
<4679=4680
<4680=4691,4681
<4681=4684,4682
<4682=4683
<4684=4685
<4685=4687,4686
<4687=4688
<4688=4690,4689
<4691=4692
<4693=4694
<4694=4705,4695
<4695=4698,4696
<4696=4697
<4698=4699
<4699=4701,4700
<4701=4702
<4702=4704,4703
<4705=4706
<4707=4708
<4708=4719,4709
<4709=4712,4710
<4710=4711
<4712=4713
<4713=4715,4714
<4715=4716
<4716=4718,4717
<4719=4720
<4721=4722
<4722=4733,4723
<4723=4726,4724
<4724=4725
<4726=4727
<4727=4729,4728
<4729=4730
<4730=4732,4731
<4733=4734
<4735=4736
<4736=4747,4737
<4737=4740,4738
<4738=4739
<4740=4741
<4741=4743,4742
<4743=4744
<4744=4746,4745
<4747=4748
<4749=4750
<4750=4761,4751
<4751=4754,4752
<4752=4753
<4754=4755
<4755=4757,4756
<4757=4758
<4758=4760,4759
<4761=4762
<4763=5020,5006,4992,4988,4971,4956,4939,4924,4907,4892,4875,4860,4843,4828,4811,4796,4779,4764
<4764=4765
<4765=4777,4766
<4766=4775,4771,4767
<4767=4768
<4768=4770,4769
<4771=4772
<4772=4774,4773
<4775=4776
<4777=4778
<4779=4780
<4780=4792,4781
<4781=4790,4786,4782
<4782=4783
<4783=4785,4784
<4786=4787
<4787=4789,4788
<4790=4791
<4792=4793
<4793=4795,4794
<4796=4797
<4797=4809,4798
<4798=4807,4803,4799
<4799=4800
<4800=4802,4801
<4803=4804
<4804=4806,4805
<4807=4808
<4809=4810
<4811=4812
<4812=4824,4813
<4813=4822,4818,4814
<4814=4815
<4815=4817,4816
<4818=4819
<4819=4821,4820
<4822=4823
<4824=4825
<4825=4827,4826
<4828=4829
<4829=4841,4830
<4830=4839,4835,4831
<4831=4832
<4832=4834,4833
<4835=4836
<4836=4838,4837
<4839=4840
<4841=4842
<4843=4844
<4844=4856,4845
<4845=4854,4850,4846
<4846=4847
<4847=4849,4848
<4850=4851
<4851=4853,4852
<4854=4855
<4856=4857
<4857=4859,4858
<4860=4861
<4861=4873,4862
<4862=4871,4867,4863
<4863=4864
<4864=4866,4865
<4867=4868
<4868=4870,4869
<4871=4872
<4873=4874
<4875=4876
<4876=4888,4877
<4877=4886,4882,4878
<4878=4879
<4879=4881,4880
<4882=4883
<4883=4885,4884
<4886=4887
<4888=4889
<4889=4891,4890
<4892=4893
<4893=4905,4894
<4894=4903,4899,4895
<4895=4896
<4896=4898,4897
<4899=4900
<4900=4902,4901
<4903=4904
<4905=4906
<4907=4908
<4908=4920,4909
<4909=4918,4914,4910
<4910=4911
<4911=4913,4912
<4914=4915
<4915=4917,4916
<4918=4919
<4920=4921
<4921=4923,4922
<4924=4925
<4925=4937,4926
<4926=4935,4931,4927
<4927=4928
<4928=4930,4929
<4931=4932
<4932=4934,4933
<4935=4936
<4937=4938
<4939=4940
<4940=4952,4941
<4941=4950,4946,4942
<4942=4943
<4943=4945,4944
<4946=4947
<4947=4949,4948
<4950=4951
<4952=4953
<4953=4955,4954
<4956=4957
<4957=4969,4958
<4958=4967,4963,4959
<4959=4960
<4960=4962,4961
<4963=4964
<4964=4966,4965
<4967=4968
<4969=4970
<4971=4972
<4972=4984,4973
<4973=4982,4978,4974
<4974=4975
<4975=4977,4976
<4978=4979
<4979=4981,4980
<4982=4983
<4984=4985
<4985=4987,4986
<4988=4989
<4989=4991,4990
<4992=4993
<4993=5004,4994
<4994=4997,4995
<4995=4996
<4997=4998
<4998=5000,4999
<5000=5001
<5001=5003,5002
<5004=5005
<5006=5007
<5007=5018,5008
<5008=5011,5009
<5009=5010
<5011=5012
<5012=5014,5013
<5014=5015
<5015=5017,5016
<5018=5019
<5020=5021
<5021=5032,5022
<5022=5025,5023
<5023=5024
<5025=5026
<5026=5028,5027
<5028=5029
<5029=5031,5030
<5032=5033
<5034=5035
<5035=5039,5036
<5036=5038,5037
<5039=5041,5040
<5042=5043
<5043=5052,5044
<5044=5047,5045
<5045=5046
<5047=5048
<5048=5050,5049
<5050=5051
<5052=5053
<5054=5055
<5055=5061,5056
<5056=5057
<5057=5058
<5058=5060,5059
<5061=5062
<5063=5064
<5064=5072,5065
<5065=5068,5066
<5066=5067
<5068=5069
<5069=5071,5070
<5072=5073
<5074=5075
<5075=5079,5076
<5076=5077
<5077=5078
<5079=5080
<5081=5082
<5082=5086,5083
<5083=5084
<5084=5085
<5086=5087
<5169=5172,5171,5170
<5172=5173
<5173=5180,5174
<5174=5175
<5175=5176
<5176=5178,5177
<5178=5179
<5180=5181
<5181=5183,5182
<5183=5184
<5189=5201,5200,5190
<5190=5197,5194,5191
<5191=5193,5192
<5194=5196,5195
<5197=5199,5198
<5201=5202
<5202=5382,5378,5375,5203
<5203=5204
<5204=5367,5205
<5205=5360,5206
<5206=5352,5207
<5207=5339,5228,5208
<5208=5226,5209
<5209=5211,5210
<5211=5212
<5212=5224,5213
<5213=5222,5216,5214
<5214=5215
<5216=5217
<5217=5219,5218
<5219=5221,5220
<5222=5223
<5224=5225
<5226=5227
<5228=5337,5273,5229
<5229=5230
<5230=5259,5245,5231
<5231=5236,5232
<5232=5233
<5233=5235,5234
<5236=5237
<5237=5239,5238
<5239=5243,5240
<5240=5241
<5241=5242
<5243=5244
<5245=5250,5246
<5246=5247
<5247=5249,5248
<5250=5251
<5251=5253,5252
<5253=5257,5254
<5254=5255
<5255=5256
<5257=5258
<5259=5264,5260
<5260=5261
<5261=5263,5262
<5264=5265
<5265=5267,5266
<5267=5271,5268
<5268=5269
<5269=5270
<5271=5272
<5273=5316,5295,5274
<5274=5291,5275
<5275=5280,5276
<5276=5277
<5277=5279,5278
<5280=5281
<5281=5290,5282
<5282=5284,5283
<5284=5288,5285
<5285=5286
<5286=5287
<5288=5289
<5291=5292
<5292=5294,5293
<5295=5312,5296
<5296=5301,5297
<5297=5298
<5298=5300,5299
<5301=5302
<5302=5311,5303
<5303=5305,5304
<5305=5309,5306
<5306=5307
<5307=5308
<5309=5310
<5312=5313
<5313=5315,5314
<5316=5333,5317
<5317=5322,5318
<5318=5319
<5319=5321,5320
<5322=5323
<5323=5332,5324
<5324=5326,5325
<5326=5330,5327
<5327=5328
<5328=5329
<5330=5331
<5333=5334
<5334=5336,5335
<5337=5338
<5339=5340
<5340=5351,5350,5341
<5341=5349,5342
<5342=5344,5343
<5344=5346,5345
<5346=5348,5347
<5352=5353
<5353=5355,5354
<5355=5357,5356
<5357=5359,5358
<5360=5361
<5361=5366,5365,5362
<5362=5364,5363
<5367=5368
<5368=5370,5369
<5370=5372,5371
<5372=5374,5373
<5375=5377,5376
<5378=5379
<5379=5381,5380
<5382=5383
<5383=5384
<5384=5389,5388,5385
<5385=5387,5386
<5418=5424,5423,5419
<5419=5420
<5420=5422,5421
<5424=5427,5425
<5425=5426
<5427=5442,5431,5428
<5428=5429
<5429=5430
<5431=5441,5440,5439,5438,5437,5436,5435,5434,5432
<5432=5433
<5442=5443
<5443=5455,5444
<5444=5452,5445
<5445=5449,5446
<5446=5448,5447
<5449=5451,5450
<5452=5454,5453
<5455=5457,5456
<5468=5480,5479,5469
<5469=5476,5473,5470
<5470=5472,5471
<5473=5475,5474
<5476=5478,5477
<5480=5492,5481
<5481=5482
<5482=5490,5483
<5483=5488,5486,5484
<5484=5485
<5486=5487
<5488=5489
<5490=5491
<5492=5505,5493
<5493=5494
<5494=5495
<5495=5503,5496
<5496=5501,5499,5497
<5497=5498
<5499=5500
<5501=5502
<5503=5504
<5505=5506
<5506=5508,5507
<5516=5528,5527,5517
<5517=5524,5521,5518
<5518=5520,5519
<5521=5523,5522
<5524=5526,5525
<5528=5540,5529
<5529=5530
<5530=5538,5531
<5531=5536,5534,5532
<5532=5533
<5534=5535
<5536=5537
<5538=5539
<5540=5636,5632,5629,5541
<5541=5542
<5542=5621,5543
<5543=5614,5600,5586,5572,5544
<5544=5562,5545
<5545=5547,5546
<5547=5548
<5548=5560,5549
<5549=5558,5552,5550
<5550=5551
<5552=5553
<5553=5555,5554
<5555=5557,5556
<5558=5559
<5560=5561
<5562=5563
<5563=5565,5564
<5565=5567,5566
<5567=5569,5568
<5569=5571,5570
<5572=5577,5573
<5573=5574
<5574=5576,5575
<5577=5578
<5578=5580,5579
<5580=5584,5581
<5581=5582
<5582=5583
<5584=5585
<5586=5591,5587
<5587=5588
<5588=5590,5589
<5591=5592
<5592=5594,5593
<5594=5598,5595
<5595=5596
<5596=5597
<5598=5599
<5600=5605,5601
<5601=5602
<5602=5604,5603
<5605=5606
<5606=5608,5607
<5608=5612,5609
<5609=5610
<5610=5611
<5612=5613
<5614=5615
<5615=5620,5619,5616
<5616=5618,5617
<5621=5622
<5622=5624,5623
<5624=5626,5625
<5626=5628,5627
<5629=5631,5630
<5632=5633
<5633=5635,5634
<5636=5637
<5637=5638
<5638=5643,5642,5639
<5639=5641,5640
<5667=5676,5675,5668
<5668=5672,5669
<5669=5671,5670
<5672=5674,5673
<5676=7845,7831,7825,7815,7804,7793,7792,7779,7770,7742,7731,7727,7720,5730,5726,5725,5724,5723,5722,5721,5720,5719,5718,5717,5716,5715,5714,5713,5712,5711,5710,5709,5708,5707,5706,5694,5690,5679,5677
<5677=5678
<5679=5680
<5680=5688,5681
<5681=5682
<5682=5683
<5683=5685,5684
<5685=5687,5686
<5688=5689
<5690=5691
<5691=5693,5692
<5694=5704,5695
<5695=5696
<5696=5700,5697
<5697=5698
<5698=5699
<5700=5701
<5701=5703,5702
<5704=5705
<5726=5728,5727
<5728=5729
<5730=7708,6777,5731
<5731=5732
<5732=6771,6201,5733
<5733=5734
<5734=6188,6159,6158,6157,6156,6155,6154,6153,6152,6141,6112,5735,5742,5756,5776,5796,5816,5836,5843,5847,5852,5863,5864,5878,5892,5901,5920,5924,5940,5941,5960,5964,5973,5982,5993,5994,5995,5996,5997,5998,5999,6000,6029,6038,6049,6050,6051,6052,6053,6054,6055,6056,6085,6094,6105,6106,6107,6108,6109,6110,6111
<5735=5736
<5736=5738,5737
<5738=5739
<5739=5741,5740
<5742=5743
<5743=5754,5744
<5744=5747,5745
<5745=5746
<5747=5748
<5748=5750,5749
<5750=5751
<5751=5753,5752
<5754=5755
<5756=5757
<5757=5772,5758
<5758=5770,5761,5759
<5759=5760
<5761=5762
<5762=5764,5763
<5764=5766,5765
<5766=5767
<5767=5769,5768
<5770=5771
<5772=5773
<5773=5775,5774
<5776=5777
<5777=5792,5778
<5778=5790,5781,5779
<5779=5780
<5781=5782
<5782=5784,5783
<5784=5786,5785
<5786=5787
<5787=5789,5788
<5790=5791
<5792=5793
<5793=5795,5794
<5796=5797
<5797=5812,5798
<5798=5810,5801,5799
<5799=5800
<5801=5802
<5802=5804,5803
<5804=5806,5805
<5806=5807
<5807=5809,5808
<5810=5811
<5812=5813
<5813=5815,5814
<5816=5817
<5817=5832,5818
<5818=5830,5821,5819
<5819=5820
<5821=5822
<5822=5824,5823
<5824=5826,5825
<5826=5827
<5827=5829,5828
<5830=5831
<5832=5833
<5833=5835,5834
<5836=5837
<5837=5841,5838
<5838=5839
<5839=5840
<5841=5842
<5843=5844
<5844=5846,5845
<5847=5848
<5848=5850,5849
<5850=5851
<5852=5853
<5853=5861,5854
<5854=5857,5855
<5855=5856
<5857=5858
<5858=5860,5859
<5861=5862
<5864=5865
<5865=5876,5866
<5866=5869,5867
<5867=5868
<5869=5870
<5870=5872,5871
<5872=5873
<5873=5875,5874
<5876=5877
<5878=5879
<5879=5890,5880
<5880=5883,5881
<5881=5882
<5883=5884
<5884=5886,5885
<5886=5887
<5887=5889,5888
<5890=5891
<5892=5893
<5893=5897,5894
<5894=5895
<5895=5896
<5897=5898
<5898=5900,5899
<5901=5902
<5902=5916,5903
<5903=5914,5912,5910,5908,5906,5904
<5904=5905
<5906=5907
<5908=5909
<5910=5911
<5912=5913
<5914=5915
<5916=5917
<5917=5919,5918
<5920=5921
<5921=5923,5922
<5924=5925
<5925=5938,5926
<5926=5931,5927
<5927=5928
<5928=5930,5929
<5931=5932
<5932=5934,5933
<5934=5935
<5935=5937,5936
<5938=5939
<5941=5942
<5942=5956,5943
<5943=5954,5952,5950,5948,5946,5944
<5944=5945
<5946=5947
<5948=5949
<5950=5951
<5952=5953
<5954=5955
<5956=5957
<5957=5959,5958
<5960=5961
<5961=5963,5962
<5964=5965
<5965=5969,5966
<5966=5967
<5967=5968
<5969=5970
<5970=5972,5971
<5973=5974
<5974=5978,5975
<5975=5976
<5976=5977
<5978=5979
<5979=5981,5980
<5982=5983
<5983=5989,5984
<5984=5987,5985
<5985=5986
<5987=5988
<5989=5990
<5990=5992,5991
<6000=6001
<6001=6025,6002
<6002=6023,6021,6014,6005,6003
<6003=6004
<6005=6006
<6006=6012,6007
<6007=6010,6008
<6008=6009
<6010=6011
<6012=6013
<6014=6015
<6015=6019,6016
<6016=6017
<6017=6018
<6019=6020
<6021=6022
<6023=6024
<6025=6026
<6026=6028,6027
<6029=6030
<6030=6034,6031
<6031=6032
<6032=6033
<6034=6035
<6035=6037,6036
<6038=6039
<6039=6045,6040
<6040=6043,6041
<6041=6042
<6043=6044
<6045=6046
<6046=6048,6047
<6056=6057
<6057=6081,6058
<6058=6079,6077,6070,6061,6059
<6059=6060
<6061=6062
<6062=6068,6063
<6063=6066,6064
<6064=6065
<6066=6067
<6068=6069
<6070=6071
<6071=6075,6072
<6072=6073
<6073=6074
<6075=6076
<6077=6078
<6079=6080
<6081=6082
<6082=6084,6083
<6085=6086
<6086=6090,6087
<6087=6088
<6088=6089
<6090=6091
<6091=6093,6092
<6094=6095
<6095=6101,6096
<6096=6099,6097
<6097=6098
<6099=6100
<6101=6102
<6102=6104,6103
<6112=6113
<6113=6137,6114
<6114=6135,6133,6126,6117,6115
<6115=6116
<6117=6118
<6118=6124,6119
<6119=6122,6120
<6120=6121
<6122=6123
<6124=6125
<6126=6127
<6127=6131,6128
<6128=6129
<6129=6130
<6131=6132
<6133=6134
<6135=6136
<6137=6138
<6138=6140,6139
<6141=6142
<6142=6148,6143
<6143=6146,6144
<6144=6145
<6146=6147
<6148=6149
<6149=6151,6150
<6159=6160
<6160=6184,6161
<6161=6182,6180,6173,6164,6162
<6162=6163
<6164=6165
<6165=6171,6166
<6166=6169,6167
<6167=6168
<6169=6170
<6171=6172
<6173=6174
<6174=6178,6175
<6175=6176
<6176=6177
<6178=6179
<6180=6181
<6182=6183
<6184=6185
<6185=6187,6186
<6188=6189
<6189=6197,6190
<6190=6195,6193,6191
<6191=6192
<6193=6194
<6195=6196
<6197=6198
<6198=6200,6199
<6201=6767,6748,6744,6725,6721,6702,6693,6689,6670,6661,6657,6638,6629,6620,6616,6597,6596,6580,6576,6569,6549,6529,6522,6504,6469,6434,6399,6362,6325,6311,6297,6283,6269,6255,6239,6223,6207,6202
<6202=6203
<6203=6205,6204
<6205=6206
<6207=6217,6208
<6208=6209
<6209=6213,6210
<6210=6211
<6211=6212
<6213=6214
<6214=6216,6215
<6217=6218
<6218=6222,6219
<6219=6221,6220
<6223=6233,6224
<6224=6225
<6225=6229,6226
<6226=6227
<6227=6228
<6229=6230
<6230=6232,6231
<6233=6234
<6234=6238,6235
<6235=6237,6236
<6239=6249,6240
<6240=6241
<6241=6245,6242
<6242=6243
<6243=6244
<6245=6246
<6246=6248,6247
<6249=6250
<6250=6254,6251
<6251=6253,6252
<6255=6256
<6256=6267,6257
<6257=6260,6258
<6258=6259
<6260=6261
<6261=6263,6262
<6263=6264
<6264=6266,6265
<6267=6268
<6269=6270
<6270=6281,6271
<6271=6274,6272
<6272=6273
<6274=6275
<6275=6277,6276
<6277=6278
<6278=6280,6279
<6281=6282
<6283=6284
<6284=6295,6285
<6285=6288,6286
<6286=6287
<6288=6289
<6289=6291,6290
<6291=6292
<6292=6294,6293
<6295=6296
<6297=6298
<6298=6309,6299
<6299=6302,6300
<6300=6301
<6302=6303
<6303=6305,6304
<6305=6306
<6306=6308,6307
<6309=6310
<6311=6312
<6312=6323,6313
<6313=6316,6314
<6314=6315
<6316=6317
<6317=6319,6318
<6319=6320
<6320=6322,6321
<6323=6324
<6325=6326
<6326=6358,6327
<6327=6356,6354,6352,6341,6330,6328
<6328=6329
<6330=6331
<6331=6333,6332
<6333=6340,6334
<6334=6336,6335
<6336=6337
<6337=6339,6338
<6341=6342
<6342=6344,6343
<6344=6351,6345
<6345=6347,6346
<6347=6348
<6348=6350,6349
<6352=6353
<6354=6355
<6356=6357
<6358=6359
<6359=6361,6360
<6362=6363
<6363=6395,6364
<6364=6393,6391,6389,6378,6367,6365
<6365=6366
<6367=6368
<6368=6370,6369
<6370=6377,6371
<6371=6373,6372
<6373=6374
<6374=6376,6375
<6378=6379
<6379=6381,6380
<6381=6388,6382
<6382=6384,6383
<6384=6385
<6385=6387,6386
<6389=6390
<6391=6392
<6393=6394
<6395=6396
<6396=6398,6397
<6399=6400
<6400=6430,6401
<6401=6428,6426,6424,6413,6404,6402
<6402=6403
<6404=6405
<6405=6407,6406
<6407=6409,6408
<6409=6410
<6410=6412,6411
<6413=6414
<6414=6416,6415
<6416=6423,6417
<6417=6419,6418
<6419=6420
<6420=6422,6421
<6424=6425
<6426=6427
<6428=6429
<6430=6431
<6431=6433,6432
<6434=6435
<6435=6465,6436
<6436=6463,6461,6459,6448,6439,6437
<6437=6438
<6439=6440
<6440=6442,6441
<6442=6444,6443
<6444=6445
<6445=6447,6446
<6448=6449
<6449=6451,6450
<6451=6458,6452
<6452=6454,6453
<6454=6455
<6455=6457,6456
<6459=6460
<6461=6462
<6463=6464
<6465=6466
<6466=6468,6467
<6469=6470
<6470=6500,6471
<6471=6498,6496,6494,6483,6474,6472
<6472=6473
<6474=6475
<6475=6477,6476
<6477=6479,6478
<6479=6480
<6480=6482,6481
<6483=6484
<6484=6486,6485
<6486=6493,6487
<6487=6489,6488
<6489=6490
<6490=6492,6491
<6494=6495
<6496=6497
<6498=6499
<6500=6501
<6501=6503,6502
<6504=6505
<6505=6521,6520,6506
<6506=6519,6507
<6507=6518,6508
<6508=6510,6509
<6510=6517,6511
<6511=6513,6512
<6513=6514
<6514=6516,6515
<6522=6523
<6523=6528,6527,6524
<6524=6526,6525
<6529=6530
<6530=6548,6547,6531
<6531=6546,6532
<6532=6545,6533
<6533=6544,6534
<6534=6536,6535
<6536=6543,6537
<6537=6539,6538
<6539=6540
<6540=6542,6541
<6549=6550
<6550=6568,6567,6551
<6551=6566,6552
<6552=6565,6553
<6553=6564,6554
<6554=6556,6555
<6556=6563,6557
<6557=6559,6558
<6559=6560
<6560=6562,6561
<6569=6570
<6570=6575,6574,6571
<6571=6573,6572
<6576=6577
<6577=6579,6578
<6580=6581
<6581=6594,6582
<6582=6587,6583
<6583=6584
<6584=6586,6585
<6587=6588
<6588=6590,6589
<6590=6591
<6591=6593,6592
<6594=6595
<6597=6598
<6598=6612,6599
<6599=6610,6608,6606,6604,6602,6600
<6600=6601
<6602=6603
<6604=6605
<6606=6607
<6608=6609
<6610=6611
<6612=6613
<6613=6615,6614
<6616=6617
<6617=6619,6618
<6620=6621
<6621=6625,6622
<6622=6623
<6623=6624
<6625=6626
<6626=6628,6627
<6629=6630
<6630=6634,6631
<6631=6632
<6632=6633
<6634=6635
<6635=6637,6636
<6638=6639
<6639=6653,6640
<6640=6651,6649,6647,6645,6643,6641
<6641=6642
<6643=6644
<6645=6646
<6647=6648
<6649=6650
<6651=6652
<6653=6654
<6654=6656,6655
<6657=6658
<6658=6660,6659
<6661=6662
<6662=6666,6663
<6663=6664
<6664=6665
<6666=6667
<6667=6669,6668
<6670=6671
<6671=6685,6672
<6672=6683,6681,6679,6677,6675,6673
<6673=6674
<6675=6676
<6677=6678
<6679=6680
<6681=6682
<6683=6684
<6685=6686
<6686=6688,6687
<6689=6690
<6690=6692,6691
<6693=6694
<6694=6698,6695
<6695=6696
<6696=6697
<6698=6699
<6699=6701,6700
<6702=6703
<6703=6717,6704
<6704=6715,6713,6711,6709,6707,6705
<6705=6706
<6707=6708
<6709=6710
<6711=6712
<6713=6714
<6715=6716
<6717=6718
<6718=6720,6719
<6721=6722
<6722=6724,6723
<6725=6726
<6726=6740,6727
<6727=6738,6736,6734,6732,6730,6728
<6728=6729
<6730=6731
<6732=6733
<6734=6735
<6736=6737
<6738=6739
<6740=6741
<6741=6743,6742
<6744=6745
<6745=6747,6746
<6748=6749
<6749=6763,6750
<6750=6761,6759,6757,6755,6753,6751
<6751=6752
<6753=6754
<6755=6756
<6757=6758
<6759=6760
<6761=6762
<6763=6764
<6764=6766,6765
<6767=6768
<6768=6770,6769
<6771=6772
<6772=6774,6773
<6774=6776,6775
<6777=7695,7680,7665,7636,7635,7634,7633,7632,7631,7630,7629,7618,7604,7575,7574,7573,7572,7571,7570,7569,7568,7557,7528,7527,7526,7525,7524,7523,7522,7521,7510,6778,6785,6792,6799,6832,6865,6898,6931,6964,6997,7030,7039,7043,7054,7055,7069,7083,7097,7119,7141,7161,7181,7201,7214,7229,7244,7259,7279,7299,7393,7398,7409,7410,7411,7412,7413,7414,7415,7416,7445,7456,7457,7458,7459,7460,7461,7462,7463,7492,7501
<6778=6779
<6779=6781,6780
<6781=6782
<6782=6784,6783
<6785=6786
<6786=6788,6787
<6788=6789
<6789=6791,6790
<6792=6793
<6793=6795,6794
<6795=6796
<6796=6798,6797
<6799=6817,6800
<6800=6801
<6801=6813,6802
<6802=6811,6807,6803
<6803=6804
<6804=6806,6805
<6807=6808
<6808=6810,6809
<6811=6812
<6813=6814
<6814=6816,6815
<6817=6818
<6818=6830,6819
<6819=6828,6824,6820
<6820=6821
<6821=6823,6822
<6824=6825
<6825=6827,6826
<6828=6829
<6830=6831
<6832=6850,6833
<6833=6834
<6834=6846,6835
<6835=6844,6840,6836
<6836=6837
<6837=6839,6838
<6840=6841
<6841=6843,6842
<6844=6845
<6846=6847
<6847=6849,6848
<6850=6851
<6851=6863,6852
<6852=6861,6857,6853
<6853=6854
<6854=6856,6855
<6857=6858
<6858=6860,6859
<6861=6862
<6863=6864
<6865=6883,6866
<6866=6867
<6867=6879,6868
<6868=6877,6873,6869
<6869=6870
<6870=6872,6871
<6873=6874
<6874=6876,6875
<6877=6878
<6879=6880
<6880=6882,6881
<6883=6884
<6884=6896,6885
<6885=6894,6890,6886
<6886=6887
<6887=6889,6888
<6890=6891
<6891=6893,6892
<6894=6895
<6896=6897
<6898=6916,6899
<6899=6900
<6900=6912,6901
<6901=6910,6906,6902
<6902=6903
<6903=6905,6904
<6906=6907
<6907=6909,6908
<6910=6911
<6912=6913
<6913=6915,6914
<6916=6917
<6917=6929,6918
<6918=6927,6923,6919
<6919=6920
<6920=6922,6921
<6923=6924
<6924=6926,6925
<6927=6928
<6929=6930
<6931=6949,6932
<6932=6933
<6933=6945,6934
<6934=6943,6939,6935
<6935=6936
<6936=6938,6937
<6939=6940
<6940=6942,6941
<6943=6944
<6945=6946
<6946=6948,6947
<6949=6950
<6950=6962,6951
<6951=6960,6956,6952
<6952=6953
<6953=6955,6954
<6956=6957
<6957=6959,6958
<6960=6961
<6962=6963
<6964=6982,6965
<6965=6966
<6966=6978,6967
<6967=6976,6972,6968
<6968=6969
<6969=6971,6970
<6972=6973
<6973=6975,6974
<6976=6977
<6978=6979
<6979=6981,6980
<6982=6983
<6983=6995,6984
<6984=6993,6989,6985
<6985=6986
<6986=6988,6987
<6989=6990
<6990=6992,6991
<6993=6994
<6995=6996
<6997=7015,6998
<6998=6999
<6999=7011,7000
<7000=7009,7005,7001
<7001=7002
<7002=7004,7003
<7005=7006
<7006=7008,7007
<7009=7010
<7011=7012
<7012=7014,7013
<7015=7016
<7016=7028,7017
<7017=7026,7022,7018
<7018=7019
<7019=7021,7020
<7022=7023
<7023=7025,7024
<7026=7027
<7028=7029
<7030=7031
<7031=7038,7037,7032
<7032=7036,7033
<7033=7035,7034
<7039=7040
<7040=7042,7041
<7043=7044
<7044=7052,7045
<7045=7048,7046
<7046=7047
<7048=7049
<7049=7051,7050
<7052=7053
<7055=7056
<7056=7067,7057
<7057=7060,7058
<7058=7059
<7060=7061
<7061=7063,7062
<7063=7064
<7064=7066,7065
<7067=7068
<7069=7070
<7070=7081,7071
<7071=7074,7072
<7072=7073
<7074=7075
<7075=7077,7076
<7077=7078
<7078=7080,7079
<7081=7082
<7083=7084
<7084=7095,7085
<7085=7088,7086
<7086=7087
<7088=7089
<7089=7091,7090
<7091=7092
<7092=7094,7093
<7095=7096
<7097=7098
<7098=7115,7099
<7099=7113,7102,7100
<7100=7101
<7102=7103
<7103=7105,7104
<7105=7107,7106
<7107=7109,7108
<7109=7110
<7110=7112,7111
<7113=7114
<7115=7116
<7116=7118,7117
<7119=7120
<7120=7137,7121
<7121=7135,7124,7122
<7122=7123
<7124=7125
<7125=7127,7126
<7127=7129,7128
<7129=7131,7130
<7131=7132
<7132=7134,7133
<7135=7136
<7137=7138
<7138=7140,7139
<7141=7142
<7142=7157,7143
<7143=7155,7146,7144
<7144=7145
<7146=7147
<7147=7149,7148
<7149=7151,7150
<7151=7152
<7152=7154,7153
<7155=7156
<7157=7158
<7158=7160,7159
<7161=7162
<7162=7177,7163
<7163=7175,7166,7164
<7164=7165
<7166=7167
<7167=7169,7168
<7169=7171,7170
<7171=7172
<7172=7174,7173
<7175=7176
<7177=7178
<7178=7180,7179
<7181=7182
<7182=7197,7183
<7183=7195,7186,7184
<7184=7185
<7186=7187
<7187=7189,7188
<7189=7191,7190
<7191=7192
<7192=7194,7193
<7195=7196
<7197=7198
<7198=7200,7199
<7201=7202
<7202=7213,7212,7203
<7203=7211,7204
<7204=7207,7206,7205
<7207=7208
<7208=7210,7209
<7214=7215
<7215=7228,7227,7216
<7216=7226,7217
<7217=7220,7219,7218
<7220=7221
<7221=7223,7222
<7223=7225,7224
<7229=7230
<7230=7243,7242,7231
<7231=7241,7232
<7232=7235,7234,7233
<7235=7236
<7236=7238,7237
<7238=7240,7239
<7244=7245
<7245=7258,7257,7246
<7246=7256,7247
<7247=7250,7249,7248
<7250=7251
<7251=7253,7252
<7253=7255,7254
<7259=7260
<7260=7275,7261
<7261=7273,7264,7262
<7262=7263
<7264=7265
<7265=7267,7266
<7267=7269,7268
<7269=7270
<7270=7272,7271
<7273=7274
<7275=7276
<7276=7278,7277
<7279=7280
<7280=7295,7281
<7281=7293,7284,7282
<7282=7283
<7284=7285
<7285=7287,7286
<7287=7289,7288
<7289=7290
<7290=7292,7291
<7293=7294
<7295=7296
<7296=7298,7297
<7299=7387,7300
<7300=7371,7370,7369,7368,7367,7353,7352,7351,7350,7349,7335,7334,7318,7317,7301
<7301=7302
<7302=7315,7303
<7303=7308,7306,7304
<7304=7305
<7306=7307
<7308=7309
<7309=7311,7310
<7311=7312
<7312=7314,7313
<7315=7316
<7318=7319
<7319=7332,7320
<7320=7325,7323,7321
<7321=7322
<7323=7324
<7325=7326
<7326=7328,7327
<7328=7329
<7329=7331,7330
<7332=7333
<7335=7336
<7336=7347,7337
<7337=7340,7338
<7338=7339
<7340=7341
<7341=7343,7342
<7343=7344
<7344=7346,7345
<7347=7348
<7353=7354
<7354=7365,7355
<7355=7358,7356
<7356=7357
<7358=7359
<7359=7361,7360
<7361=7362
<7362=7364,7363
<7365=7366
<7371=7372
<7372=7386,7385,7373
<7373=7384,7374
<7374=7380,7375
<7375=7378,7376
<7376=7377
<7378=7379
<7380=7381
<7381=7383,7382
<7387=7388
<7388=7390,7389
<7390=7392,7391
<7393=7394
<7394=7396,7395
<7396=7397
<7398=7399
<7399=7405,7400
<7400=7403,7401
<7401=7402
<7403=7404
<7405=7406
<7406=7408,7407
<7416=7417
<7417=7441,7418
<7418=7439,7437,7430,7421,7419
<7419=7420
<7421=7422
<7422=7428,7423
<7423=7426,7424
<7424=7425
<7426=7427
<7428=7429
<7430=7431
<7431=7435,7432
<7432=7433
<7433=7434
<7435=7436
<7437=7438
<7439=7440
<7441=7442
<7442=7444,7443
<7445=7446
<7446=7452,7447
<7447=7450,7448
<7448=7449
<7450=7451
<7452=7453
<7453=7455,7454
<7463=7464
<7464=7488,7465
<7465=7486,7484,7477,7468,7466
<7466=7467
<7468=7469
<7469=7475,7470
<7470=7473,7471
<7471=7472
<7473=7474
<7475=7476
<7477=7478
<7478=7482,7479
<7479=7480
<7480=7481
<7482=7483
<7484=7485
<7486=7487
<7488=7489
<7489=7491,7490
<7492=7493
<7493=7497,7494
<7494=7495
<7495=7496
<7497=7498
<7498=7500,7499
<7501=7502
<7502=7506,7503
<7503=7504
<7504=7505
<7506=7507
<7507=7509,7508
<7510=7511
<7511=7517,7512
<7512=7515,7513
<7513=7514
<7515=7516
<7517=7518
<7518=7520,7519
<7528=7529
<7529=7553,7530
<7530=7551,7549,7542,7533,7531
<7531=7532
<7533=7534
<7534=7540,7535
<7535=7538,7536
<7536=7537
<7538=7539
<7540=7541
<7542=7543
<7543=7547,7544
<7544=7545
<7545=7546
<7547=7548
<7549=7550
<7551=7552
<7553=7554
<7554=7556,7555
<7557=7558
<7558=7564,7559
<7559=7562,7560
<7560=7561
<7562=7563
<7564=7565
<7565=7567,7566
<7575=7576
<7576=7600,7577
<7577=7598,7596,7589,7580,7578
<7578=7579
<7580=7581
<7581=7587,7582
<7582=7585,7583
<7583=7584
<7585=7586
<7587=7588
<7589=7590
<7590=7594,7591
<7591=7592
<7592=7593
<7594=7595
<7596=7597
<7598=7599
<7600=7601
<7601=7603,7602
<7604=7616,7605
<7605=7606
<7606=7613,7607
<7607=7609,7608
<7609=7610
<7610=7612,7611
<7613=7615,7614
<7616=7617
<7618=7619
<7619=7625,7620
<7620=7623,7621
<7621=7622
<7623=7624
<7625=7626
<7626=7628,7627
<7636=7637
<7637=7661,7638
<7638=7659,7657,7650,7641,7639
<7639=7640
<7641=7642
<7642=7648,7643
<7643=7646,7644
<7644=7645
<7646=7647
<7648=7649
<7650=7651
<7651=7655,7652
<7652=7653
<7653=7654
<7655=7656
<7657=7658
<7659=7660
<7661=7662
<7662=7664,7663
<7665=7666
<7666=7676,7667
<7667=7672,7670,7668
<7668=7669
<7670=7671
<7672=7673
<7673=7675,7674
<7676=7677
<7677=7679,7678
<7680=7681
<7681=7691,7682
<7682=7687,7685,7683
<7683=7684
<7685=7686
<7687=7688
<7688=7690,7689
<7691=7692
<7692=7694,7693
<7695=7696
<7696=7704,7697
<7697=7702,7700,7698
<7698=7699
<7700=7701
<7702=7703
<7704=7705
<7705=7707,7706
<7708=7709
<7709=7715,7710
<7710=7712,7711
<7712=7714,7713
<7715=7717,7716
<7717=7719,7718
<7720=7721
<7721=7725,7722
<7722=7723
<7723=7724
<7725=7726
<7727=7728
<7728=7730,7729
<7731=7732
<7732=7741,7740,7733
<7733=7739,7734
<7734=7738,7735
<7735=7737,7736
<7742=7756,7743
<7743=7744
<7744=7745
<7745=7754,7746
<7746=7749,7747
<7747=7748
<7749=7750
<7750=7752,7751
<7752=7753
<7754=7755
<7756=7757
<7757=7769,7758
<7758=7767,7759
<7759=7762,7760
<7760=7761
<7762=7763
<7763=7765,7764
<7765=7766
<7767=7768
<7770=7771
<7771=7775,7772
<7772=7773
<7773=7774
<7775=7776
<7776=7778,7777
<7779=7780
<7780=7790,7781
<7781=7786,7782
<7782=7783
<7783=7785,7784
<7786=7787
<7787=7789,7788
<7790=7791
<7793=7794
<7794=7801,7795
<7795=7797,7796
<7797=7798
<7798=7800,7799
<7801=7803,7802
<7804=7805
<7805=7811,7806
<7806=7809,7807
<7807=7808
<7809=7810
<7811=7812
<7812=7814,7813
<7815=7816
<7816=7823,7817
<7817=7818
<7818=7819
<7819=7821,7820
<7821=7822
<7823=7824
<7825=7826
<7826=7830,7827
<7827=7829,7828
<7831=7832
<7832=7842,7833
<7833=7835,7834
<7835=7836
<7836=7838,7837
<7838=7840,7839
<7840=7841
<7842=7844,7843
<7845=7846
<7846=7851,7847
<7847=7849,7848
<7849=7850
<7851=7853,7852
<7969=7981,7980,7970
<7970=7977,7974,7971
<7971=7973,7972
<7974=7976,7975
<7977=7979,7978
<7981=8699,8695,8688,8684,8680,8676,8445,7982
<7982=8430,7983
<7983=7984
<7984=8422,7985
<7985=8418,8401,8383,8366,8348,8331,8313,8296,8278,8261,8243,8226,8208,8191,8173,8153,8133,8120,8107,8087,8067,8047,8027,8007,8000,7993,7986
<7986=7987
<7987=7989,7988
<7989=7990
<7990=7992,7991
<7993=7994
<7994=7996,7995
<7996=7997
<7997=7999,7998
<8000=8001
<8001=8003,8002
<8003=8004
<8004=8006,8005
<8007=8008
<8008=8023,8009
<8009=8021,8012,8010
<8010=8011
<8012=8013
<8013=8015,8014
<8015=8017,8016
<8017=8018
<8018=8020,8019
<8021=8022
<8023=8024
<8024=8026,8025
<8027=8028
<8028=8043,8029
<8029=8041,8032,8030
<8030=8031
<8032=8033
<8033=8035,8034
<8035=8037,8036
<8037=8038
<8038=8040,8039
<8041=8042
<8043=8044
<8044=8046,8045
<8047=8048
<8048=8063,8049
<8049=8061,8052,8050
<8050=8051
<8052=8053
<8053=8055,8054
<8055=8057,8056
<8057=8058
<8058=8060,8059
<8061=8062
<8063=8064
<8064=8066,8065
<8067=8068
<8068=8083,8069
<8069=8081,8072,8070
<8070=8071
<8072=8073
<8073=8075,8074
<8075=8077,8076
<8077=8078
<8078=8080,8079
<8081=8082
<8083=8084
<8084=8086,8085
<8087=8088
<8088=8103,8089
<8089=8101,8092,8090
<8090=8091
<8092=8093
<8093=8095,8094
<8095=8097,8096
<8097=8098
<8098=8100,8099
<8101=8102
<8103=8104
<8104=8106,8105
<8107=8108
<8108=8119,8118,8109
<8109=8117,8110
<8110=8113,8112,8111
<8113=8114
<8114=8116,8115
<8120=8121
<8121=8132,8131,8122
<8122=8130,8123
<8123=8126,8125,8124
<8126=8127
<8127=8129,8128
<8133=8134
<8134=8149,8135
<8135=8147,8138,8136
<8136=8137
<8138=8139
<8139=8141,8140
<8141=8143,8142
<8143=8144
<8144=8146,8145
<8147=8148
<8149=8150
<8150=8152,8151
<8153=8154
<8154=8169,8155
<8155=8167,8158,8156
<8156=8157
<8158=8159
<8159=8161,8160
<8161=8163,8162
<8163=8164
<8164=8166,8165
<8167=8168
<8169=8170
<8170=8172,8171
<8173=8174
<8174=8190,8189,8175
<8175=8188,8176
<8176=8183,8177
<8177=8179,8178
<8179=8180
<8180=8182,8181
<8183=8187,8184
<8184=8186,8185
<8191=8192
<8192=8204,8193
<8193=8202,8198,8194
<8194=8195
<8195=8197,8196
<8198=8199
<8199=8201,8200
<8202=8203
<8204=8205
<8205=8207,8206
<8208=8209
<8209=8225,8224,8210
<8210=8223,8211
<8211=8218,8212
<8212=8214,8213
<8214=8215
<8215=8217,8216
<8218=8222,8219
<8219=8221,8220
<8226=8227
<8227=8239,8228
<8228=8237,8233,8229
<8229=8230
<8230=8232,8231
<8233=8234
<8234=8236,8235
<8237=8238
<8239=8240
<8240=8242,8241
<8243=8244
<8244=8260,8259,8245
<8245=8258,8246
<8246=8253,8247
<8247=8249,8248
<8249=8250
<8250=8252,8251
<8253=8257,8254
<8254=8256,8255
<8261=8262
<8262=8274,8263
<8263=8272,8268,8264
<8264=8265
<8265=8267,8266
<8268=8269
<8269=8271,8270
<8272=8273
<8274=8275
<8275=8277,8276
<8278=8279
<8279=8295,8294,8280
<8280=8293,8281
<8281=8288,8282
<8282=8284,8283
<8284=8285
<8285=8287,8286
<8288=8292,8289
<8289=8291,8290
<8296=8297
<8297=8309,8298
<8298=8307,8303,8299
<8299=8300
<8300=8302,8301
<8303=8304
<8304=8306,8305
<8307=8308
<8309=8310
<8310=8312,8311
<8313=8314
<8314=8330,8329,8315
<8315=8328,8316
<8316=8323,8317
<8317=8319,8318
<8319=8320
<8320=8322,8321
<8323=8327,8324
<8324=8326,8325
<8331=8332
<8332=8344,8333
<8333=8342,8338,8334
<8334=8335
<8335=8337,8336
<8338=8339
<8339=8341,8340
<8342=8343
<8344=8345
<8345=8347,8346
<8348=8349
<8349=8365,8364,8350
<8350=8363,8351
<8351=8358,8352
<8352=8354,8353
<8354=8355
<8355=8357,8356
<8358=8362,8359
<8359=8361,8360
<8366=8367
<8367=8379,8368
<8368=8377,8373,8369
<8369=8370
<8370=8372,8371
<8373=8374
<8374=8376,8375
<8377=8378
<8379=8380
<8380=8382,8381
<8383=8384
<8384=8400,8399,8385
<8385=8398,8386
<8386=8393,8387
<8387=8389,8388
<8389=8390
<8390=8392,8391
<8393=8397,8394
<8394=8396,8395
<8401=8402
<8402=8414,8403
<8403=8412,8408,8404
<8404=8405
<8405=8407,8406
<8408=8409
<8409=8411,8410
<8412=8413
<8414=8415
<8415=8417,8416
<8418=8419
<8419=8421,8420
<8422=8423
<8423=8427,8424
<8424=8426,8425
<8427=8429,8428
<8430=8431
<8431=8442,8432
<8432=8441,8433
<8433=8435,8434
<8435=8437,8436
<8437=8438
<8438=8440,8439
<8442=8444,8443
<8445=8669,8446
<8446=8654,8632,8617,8595,8580,8558,8543,8521,8506,8484,8469,8447
<8447=8448
<8448=8465,8449
<8449=8463,8461,8459,8450
<8450=8451
<8451=8453,8452
<8453=8455,8454
<8455=8456
<8456=8458,8457
<8459=8460
<8461=8462
<8463=8464
<8465=8466
<8466=8468,8467
<8469=8470
<8470=8480,8471
<8471=8478,8476,8474,8472
<8472=8473
<8474=8475
<8476=8477
<8478=8479
<8480=8481
<8481=8483,8482
<8484=8485
<8485=8502,8486
<8486=8500,8498,8496,8487
<8487=8488
<8488=8490,8489
<8490=8492,8491
<8492=8493
<8493=8495,8494
<8496=8497
<8498=8499
<8500=8501
<8502=8503
<8503=8505,8504
<8506=8507
<8507=8517,8508
<8508=8515,8513,8511,8509
<8509=8510
<8511=8512
<8513=8514
<8515=8516
<8517=8518
<8518=8520,8519
<8521=8522
<8522=8539,8523
<8523=8537,8535,8533,8524
<8524=8525
<8525=8527,8526
<8527=8529,8528
<8529=8530
<8530=8532,8531
<8533=8534
<8535=8536
<8537=8538
<8539=8540
<8540=8542,8541
<8543=8544
<8544=8554,8545
<8545=8552,8550,8548,8546
<8546=8547
<8548=8549
<8550=8551
<8552=8553
<8554=8555
<8555=8557,8556
<8558=8559
<8559=8576,8560
<8560=8574,8572,8570,8561
<8561=8562
<8562=8564,8563
<8564=8566,8565
<8566=8567
<8567=8569,8568
<8570=8571
<8572=8573
<8574=8575
<8576=8577
<8577=8579,8578
<8580=8581
<8581=8591,8582
<8582=8589,8587,8585,8583
<8583=8584
<8585=8586
<8587=8588
<8589=8590
<8591=8592
<8592=8594,8593
<8595=8596
<8596=8613,8597
<8597=8611,8609,8607,8598
<8598=8599
<8599=8601,8600
<8601=8603,8602
<8603=8604
<8604=8606,8605
<8607=8608
<8609=8610
<8611=8612
<8613=8614
<8614=8616,8615
<8617=8618
<8618=8628,8619
<8619=8626,8624,8622,8620
<8620=8621
<8622=8623
<8624=8625
<8626=8627
<8628=8629
<8629=8631,8630
<8632=8633
<8633=8650,8634
<8634=8648,8646,8644,8635
<8635=8636
<8636=8638,8637
<8638=8640,8639
<8640=8641
<8641=8643,8642
<8644=8645
<8646=8647
<8648=8649
<8650=8651
<8651=8653,8652
<8654=8655
<8655=8665,8656
<8656=8663,8661,8659,8657
<8657=8658
<8659=8660
<8661=8662
<8663=8664
<8665=8666
<8666=8668,8667
<8669=8670
<8670=8672,8671
<8672=8673
<8673=8675,8674
<8676=8677
<8677=8679,8678
<8680=8681
<8681=8683,8682
<8684=8685
<8685=8687,8686
<8688=8689
<8689=8693,8690
<8690=8691
<8691=8692
<8693=8694
<8695=8696
<8696=8698,8697
<8699=8700
<8700=8708,8701
<8701=8706,8704,8702
<8702=8703
<8704=8705
<8706=8707
<8708=8709
<8751=8754,8753,8752
<8754=8755
<8755=8765,8761,8756
<8756=8757
<8757=8758
<8758=8760,8759
<8761=8762
<8762=8764,8763
<8765=8766
<8773=8776,8775,8774
<8780=8783,8782,8781
<8783=8784
<8784=8785
<8785=8793,8786
<8786=8791,8789,8787
<8787=8788
<8789=8790
<8791=8792
<8793=8794
<8799=8802,8801,8800
<8802=8803
<8803=8809,8804
<8804=8805
<8805=8807,8806
<8807=8808
<8809=8810
<8810=8812,8811
<8812=8813
<8818=8821,8820,8819
<8821=8822
<8822=8828,8823
<8823=8824
<8824=8826,8825
<8826=8827
<8828=8829
<8829=8831,8830
<8831=8832
<8837=8840,8839,8838
<8840=8841
<8841=8847,8842
<8842=8843
<8843=8845,8844
<8845=8846
<8847=8848
<8848=8850,8849
<8850=8851
<8856=8859,8858,8857
<8859=8860
<8860=8872,8867,8861
<8861=8862
<8862=8863
<8863=8865,8864
<8865=8866
<8867=8868
<8868=8870,8869
<8870=8871
<8872=8873
<8873=8875,8874
<8881=8884,8883,8882
<8888=8891,8890,8889
<8895=8898,8897,8896
<8898=8899
<8899=8919,8911,8900
<8900=8901
<8901=8902
<8902=8903
<8903=8909,8904
<8904=8907,8905
<8905=8906
<8907=8908
<8909=8910
<8911=8912
<8912=8913
<8913=8917,8914
<8914=8915
<8915=8916
<8917=8918
<8919=8920
<8920=8929,8921
<8921=8927,8922
<8922=8925,8923
<8923=8924
<8925=8926
<8927=8928
<8936=8939,8938,8937
<8939=8940
<8940=8941
<8941=8945,8942
<8942=8943
<8943=8944
<8945=8946
<8951=8954,8953,8952
<8954=8988,8976,8964,8955
<8955=8956
<8956=8962,8957
<8957=8958
<8958=8959
<8959=8961,8960
<8962=8963
<8964=8974,8965
<8965=8966
<8966=8970,8967
<8967=8968
<8968=8969
<8970=8971
<8971=8973,8972
<8974=8975
<8976=8986,8977
<8977=8978
<8978=8982,8979
<8979=8980
<8980=8981
<8982=8983
<8983=8985,8984
<8986=8987
<8988=8998,8989
<8989=8990
<8990=8994,8991
<8991=8992
<8992=8993
<8994=8995
<8995=8997,8996
<8998=8999
<9008=9011,9010,9009
<9011=9054,9021,9012
<9012=9013
<9013=9019,9014
<9014=9015
<9015=9016
<9016=9018,9017
<9019=9020
<9021=9022
<9022=9044,9023
<9023=9043,9024
<9024=9041,9025
<9025=9026
<9026=9027
<9027=9029,9028
<9029=9031,9030
<9031=9033,9032
<9033=9035,9034
<9035=9037,9036
<9037=9038
<9038=9040,9039
<9041=9042
<9044=9046,9045
<9046=9048,9047
<9048=9050,9049
<9050=9051
<9051=9053,9052
<9054=9055
<9055=9068,9056
<9056=9058,9057
<9058=9060,9059
<9060=9062,9061
<9062=9064,9063
<9064=9065
<9065=9067,9066
<9068=9070,9069
<9070=9072,9071
<9072=9074,9073
<9074=9075
<9075=9077,9076
<9097=9100,9099,9098
<9100=9101
<9101=9169,9123,9102
<9102=9103
<9103=9122,9111,9104
<9104=9105
<9105=9109,9106
<9106=9107
<9107=9108
<9109=9110
<9111=9112
<9112=9120,9113
<9113=9116,9114
<9114=9115
<9116=9117
<9117=9119,9118
<9120=9121
<9123=9124
<9124=9161,9127,9125
<9125=9126
<9127=9160,9159,9158,9157,9156,9155,9154,9153,9152,9151,9150,9139,9128
<9128=9129
<9129=9137,9130
<9130=9133,9131
<9131=9132
<9133=9134
<9134=9136,9135
<9137=9138
<9139=9140
<9140=9148,9141
<9141=9144,9142
<9142=9143
<9144=9145
<9145=9147,9146
<9148=9149
<9161=9162
<9162=9166,9163
<9163=9165,9164
<9166=9168,9167
<9169=9170
<9170=9174,9171
<9171=9173,9172
<9174=9176,9175
<9188=9191,9190,9189
<9191=9192
<9192=9193
<9193=9197,9194
<9194=9195
<9195=9196
<9197=9198
<9198=9200,9199
<9206=9209,9208,9207
<9209=9210
<9210=9259,9232,9211
<9211=9212
<9212=9231,9220,9213
<9213=9214
<9214=9218,9215
<9215=9216
<9216=9217
<9218=9219
<9220=9221
<9221=9229,9222
<9222=9225,9223
<9223=9224
<9225=9226
<9226=9228,9227
<9229=9230
<9232=9258,9257,9256,9255,9254,9253,9252,9251,9250,9249,9248,9247,9246,9245,9244,9233
<9233=9234
<9234=9242,9235
<9235=9238,9236
<9236=9237
<9238=9239
<9239=9241,9240
<9242=9243
<9259=9260
<9260=9264,9261
<9261=9263,9262
<9264=9266,9265
<9276=9279,9278,9277
<9279=9287,9280
<9280=9281
<9281=9285,9282
<9282=9283
<9283=9284
<9285=9286
<9287=9305,9288
<9288=9296,9289
<9289=9290
<9290=9292,9291
<9292=9293
<9293=9295,9294
<9296=9297
<9297=9301,9298
<9298=9299
<9299=9300
<9301=9302
<9302=9304,9303
<9305=9306
<9306=9308,9307
<9316=9322,9321,9317
<9317=9318
<9318=9320,9319
<9322=9323
<9323=9324
<9324=9333,9325
<9325=9328,9326
<9326=9327
<9328=9329
<9329=9331,9330
<9331=9332
<9333=9334
<9340=9346,9345,9341
<9341=9342
<9342=9344,9343
<9346=9347
<9347=9348
<9348=9352,9349
<9349=9350
<9350=9351
<9352=9353
<9358=9364,9363,9359
<9359=9360
<9360=9362,9361
<9364=9379,9372,9365
<9365=9366
<9366=9370,9367
<9367=9368
<9368=9369
<9370=9371
<9372=9373
<9373=9377,9374
<9374=9375
<9375=9376
<9377=9378
<9379=9380
<9380=9382,9381
<9382=9383
<9389=9395,9394,9390
<9390=9391
<9391=9393,9392
<9395=9452,9396
<9396=9448,9415,9397
<9397=9398
<9398=9399
<9399=9400
<9400=9413,9401
<9401=9402
<9402=9403
<9403=9412,9404
<9404=9410,9405
<9405=9406
<9406=9407
<9407=9409,9408
<9410=9411
<9413=9414
<9415=9432,9416
<9416=9417
<9417=9428,9418
<9418=9419
<9419=9420
<9420=9424,9421
<9421=9422
<9422=9423
<9424=9425
<9425=9427,9426
<9428=9429
<9429=9431,9430
<9432=9433
<9433=9447,9446,9434
<9434=9445,9435
<9435=9441,9436
<9436=9437
<9437=9438
<9438=9440,9439
<9441=9442
<9442=9444,9443
<9448=9449
<9449=9451,9450
<9452=9458,9453
<9453=9454
<9454=9456,9455
<9456=9457
<9458=9459
<9459=9470,9460
<9460=9462,9461
<9462=9468,9463
<9463=9466,9464
<9464=9465
<9466=9467
<9468=9469
<9470=9472,9471
<9493=9496,9495,9494
<9496=9529,9528,9527,9526,9525,9524,9523,9522,9521,9520,9519,9518,9517,9516,9515,9514,9513,9512,9511,9510,9508,9507,9506,9505,9504,9497
<9497=9498
<9498=9502,9499
<9499=9500
<9500=9501
<9502=9503
<9508=9509
<9529=9530
<9530=9532,9531
<9532=9534,9533
<9541=9544,9543,9542
<9544=9586,9585,9584,9583,9582,9581,9580,9579,9578,9577,9576,9575,9574,9573,9572,9571,9570,9569,9568,9567,9566,9565,9564,9563,9562,9561,9560,9559,9558,9557,9556,9555,9554,9545
<9545=9546
<9546=9552,9547
<9547=9548
<9548=9549
<9549=9551,9550
<9552=9553
<9586=9590,9589,9587
<9587=9588
<9590=9591
<9591=9593,9592
<9593=9595,9594
<9595=9597,9596
<9597=9599,9598
<9609=9612,9611,9610
<9612=9647,9646,9645,9644,9643,9642,9641,9640,9639,9638,9637,9636,9635,9634,9633,9632,9631,9630,9629,9628,9627,9626,9624,9623,9622,9621,9620,9613
<9613=9614
<9614=9618,9615
<9615=9616
<9616=9617
<9618=9619
<9624=9625
<9647=9648
<9648=9650,9649
<9650=9652,9651
<9652=9654,9653
<9662=9665,9664,9663
<9665=9675,9666
<9666=9667
<9667=9673,9668
<9668=9669
<9669=9670
<9670=9672,9671
<9673=9674
<9675=9737,9707,9676
<9676=9677
<9677=9706,9705,9704,9703,9702,9701,9700,9699,9698,9697,9696,9695,9694,9693,9692,9691,9690,9689,9678
<9678=9679
<9679=9687,9680
<9680=9683,9681
<9681=9682
<9683=9684
<9684=9686,9685
<9687=9688
<9707=9736,9735,9734,9733,9732,9731,9730,9729,9728,9727,9726,9725,9724,9723,9722,9721,9720,9719,9708
<9708=9709
<9709=9717,9710
<9710=9713,9711
<9711=9712
<9713=9714
<9714=9716,9715
<9717=9718
<9737=9738
<9738=9740,9739
<9740=9742,9741
<9742=9744,9743
<9744=9746,9745
<9757=9760,9759,9758
<9760=9802,9801,9800,9799,9798,9797,9796,9795,9794,9793,9792,9791,9790,9789,9788,9787,9786,9785,9784,9783,9782,9781,9780,9779,9778,9777,9776,9775,9774,9773,9772,9771,9770,9761
<9761=9762
<9762=9768,9763
<9763=9764
<9764=9765
<9765=9767,9766
<9768=9769
<9802=9806,9805,9803
<9803=9804
<9806=9807
<9807=9809,9808
<9809=9811,9810
<9811=9813,9812
<9813=9815,9814
<9825=9828,9827,9826
<9828=9870,9869,9868,9867,9866,9865,9864,9863,9862,9861,9860,9859,9858,9857,9856,9855,9854,9853,9852,9851,9850,9849,9848,9847,9846,9845,9844,9843,9842,9841,9840,9839,9838,9829
<9829=9830
<9830=9836,9831
<9831=9832
<9832=9833
<9833=9835,9834
<9836=9837
<9870=9874,9873,9871
<9871=9872
<9874=9875
<9875=9877,9876
<9877=9879,9878
<9879=9881,9880
<9881=9883,9882
<9893=9896,9895,9894
<9896=9936,9935,9934,9933,9932,9931,9930,9929,9928,9927,9926,9925,9924,9923,9922,9921,9920,9919,9918,9917,9916,9915,9913,9912,9911,9910,9909,9904,9897
<9897=9898
<9898=9902,9899
<9899=9900
<9900=9901
<9902=9903
<9904=9905
<9905=9907,9906
<9907=9908
<9913=9914
<9936=9937
<9937=9945,9938
<9938=9944,9939
<9939=9941,9940
<9941=9943,9942
<9945=9947,9946
<9947=9949,9948
<9957=9960,9959,9958
<9960=10002,10001,10000,9999,9998,9997,9996,9995,9994,9993,9992,9991,9990,9989,9988,9987,9986,9985,9984,9983,9982,9981,9980,9979,9978,9977,9976,9975,9974,9973,9972,9971,9970,9961
<9961=9962
<9962=9968,9963
<9963=9964
<9964=9965
<9965=9967,9966
<9968=9969
<10002=10006,10005,10003
<10003=10004
<10006=10007
<10007=10009,10008
<10009=10011,10010
<10011=10013,10012
<10013=10015,10014
<10025=10028,10027,10026
<10028=10070,10069,10068,10067,10066,10065,10064,10063,10062,10061,10060,10059,10058,10057,10056,10055,10054,10053,10052,10051,10050,10049,10048,10047,10046,10045,10044,10043,10042,10041,10040,10039,10038,10029
<10029=10030
<10030=10036,10031
<10031=10032
<10032=10033
<10033=10035,10034
<10036=10037
<10070=10074,10073,10071
<10071=10072
<10074=10075
<10075=10077,10076
<10077=10079,10078
<10079=10081,10080
<10081=10083,10082
<10093=10096,10095,10094
<10096=10138,10137,10136,10135,10134,10133,10132,10131,10130,10129,10128,10127,10126,10125,10124,10123,10122,10121,10120,10119,10118,10117,10116,10115,10114,10113,10112,10111,10110,10109,10108,10107,10106,10097
<10097=10098
<10098=10104,10099
<10099=10100
<10100=10101
<10101=10103,10102
<10104=10105
<10138=10142,10141,10139
<10139=10140
<10142=10143
<10143=10145,10144
<10145=10147,10146
<10147=10149,10148
<10149=10151,10150
<10161=10164,10163,10162
<10164=10165
<10165=10233,10187,10166
<10166=10167
<10167=10186,10175,10168
<10168=10169
<10169=10173,10170
<10170=10171
<10171=10172
<10173=10174
<10175=10176
<10176=10184,10177
<10177=10180,10178
<10178=10179
<10180=10181
<10181=10183,10182
<10184=10185
<10187=10188
<10188=10225,10191,10189
<10189=10190
<10191=10224,10223,10222,10221,10220,10219,10218,10217,10216,10215,10214,10203,10192
<10192=10193
<10193=10201,10194
<10194=10197,10195
<10195=10196
<10197=10198
<10198=10200,10199
<10201=10202
<10203=10204
<10204=10212,10205
<10205=10208,10206
<10206=10207
<10208=10209
<10209=10211,10210
<10212=10213
<10225=10226
<10226=10230,10227
<10227=10229,10228
<10230=10232,10231
<10233=10234
<10234=10238,10235
<10235=10237,10236
<10238=10240,10239
<10252=10255,10254,10253
<10255=10256
<10256=10257
<10257=10261,10258
<10258=10259
<10259=10260
<10261=10262
<10262=10264,10263
<10270=10273,10272,10271
<10273=10281,10274
<10274=10275
<10275=10279,10276
<10276=10277
<10277=10278
<10279=10280
<10281=10299,10282
<10282=10290,10283
<10283=10284
<10284=10286,10285
<10286=10287
<10287=10289,10288
<10290=10291
<10291=10295,10292
<10292=10293
<10293=10294
<10295=10296
<10296=10298,10297
<10299=10300
<10300=10302,10301
<10310=10313,10312,10311
<10313=10323,10314
<10314=10315
<10315=10321,10316
<10316=10317
<10317=10318
<10318=10320,10319
<10321=10322
<10323=10324
<10324=10326,10325
<10326=10328,10327
<10336=10339,10338,10337
<10339=10445,10397,10349,10340
<10340=10341
<10341=10347,10342
<10342=10343
<10343=10344
<10344=10346,10345
<10347=10348
<10349=10388,10350
<10350=10370,10351
<10351=10361,10352
<10352=10353
<10353=10357,10354
<10354=10355
<10355=10356
<10357=10358
<10358=10360,10359
<10361=10362
<10362=10364,10363
<10364=10366,10365
<10366=10367
<10367=10369,10368
<10370=10371
<10371=10384,10372
<10372=10373
<10373=10374
<10374=10378,10375
<10375=10377,10376
<10378=10380,10379
<10380=10381
<10381=10383,10382
<10384=10385
<10385=10387,10386
<10388=10389
<10389=10396,10390
<10390=10392,10391
<10392=10393
<10393=10395,10394
<10397=10436,10398
<10398=10418,10399
<10399=10409,10400
<10400=10401
<10401=10405,10402
<10402=10403
<10403=10404
<10405=10406
<10406=10408,10407
<10409=10410
<10410=10412,10411
<10412=10414,10413
<10414=10415
<10415=10417,10416
<10418=10419
<10419=10432,10420
<10420=10421
<10421=10422
<10422=10426,10423
<10423=10425,10424
<10426=10428,10427
<10428=10429
<10429=10431,10430
<10432=10433
<10433=10435,10434
<10436=10437
<10437=10444,10438
<10438=10440,10439
<10440=10441
<10441=10443,10442
<10445=10484,10446
<10446=10466,10447
<10447=10457,10448
<10448=10449
<10449=10453,10450
<10450=10451
<10451=10452
<10453=10454
<10454=10456,10455
<10457=10458
<10458=10460,10459
<10460=10462,10461
<10462=10463
<10463=10465,10464
<10466=10467
<10467=10480,10468
<10468=10469
<10469=10470
<10470=10474,10471
<10471=10473,10472
<10474=10476,10475
<10476=10477
<10477=10479,10478
<10480=10481
<10481=10483,10482
<10484=10485
<10485=10492,10486
<10486=10488,10487
<10488=10489
<10489=10491,10490
<10510=10513,10512,10511
<10513=10627,10575,10523,10514
<10514=10515
<10515=10521,10516
<10516=10517
<10517=10518
<10518=10520,10519
<10521=10522
<10523=10566,10524
<10524=10548,10525
<10525=10537,10526
<10526=10527
<10527=10533,10528
<10528=10529
<10529=10530
<10530=10532,10531
<10533=10534
<10534=10536,10535
<10537=10538
<10538=10542,10539
<10539=10541,10540
<10542=10544,10543
<10544=10545
<10545=10547,10546
<10548=10549
<10549=10562,10550
<10550=10551
<10551=10552
<10552=10556,10553
<10553=10555,10554
<10556=10558,10557
<10558=10559
<10559=10561,10560
<10562=10563
<10563=10565,10564
<10566=10567
<10567=10574,10568
<10568=10570,10569
<10570=10571
<10571=10573,10572
<10575=10618,10576
<10576=10600,10577
<10577=10589,10578
<10578=10579
<10579=10585,10580
<10580=10581
<10581=10582
<10582=10584,10583
<10585=10586
<10586=10588,10587
<10589=10590
<10590=10594,10591
<10591=10593,10592
<10594=10596,10595
<10596=10597
<10597=10599,10598
<10600=10601
<10601=10614,10602
<10602=10603
<10603=10604
<10604=10608,10605
<10605=10607,10606
<10608=10610,10609
<10610=10611
<10611=10613,10612
<10614=10615
<10615=10617,10616
<10618=10619
<10619=10626,10620
<10620=10622,10621
<10622=10623
<10623=10625,10624
<10627=10670,10628
<10628=10652,10629
<10629=10641,10630
<10630=10631
<10631=10637,10632
<10632=10633
<10633=10634
<10634=10636,10635
<10637=10638
<10638=10640,10639
<10641=10642
<10642=10646,10643
<10643=10645,10644
<10646=10648,10647
<10648=10649
<10649=10651,10650
<10652=10653
<10653=10666,10654
<10654=10655
<10655=10656
<10656=10660,10657
<10657=10659,10658
<10660=10662,10661
<10662=10663
<10663=10665,10664
<10666=10667
<10667=10669,10668
<10670=10671
<10671=10678,10672
<10672=10674,10673
<10674=10675
<10675=10677,10676
<10696=10699,10698,10697
<10699=10722,10709,10700
<10700=10701
<10701=10707,10702
<10702=10703
<10703=10704
<10704=10706,10705
<10707=10708
<10709=10716,10710
<10710=10711
<10711=10713,10712
<10713=10715,10714
<10716=10717
<10717=10719,10718
<10719=10721,10720
<10722=10723
<10723=10727,10724
<10724=10726,10725
<10727=10729,10728
<10737=10740,10739,10738
<10740=10763,10750,10741
<10741=10742
<10742=10748,10743
<10743=10744
<10744=10745
<10745=10747,10746
<10748=10749
<10750=10757,10751
<10751=10752
<10752=10754,10753
<10754=10756,10755
<10757=10758
<10758=10760,10759
<10760=10762,10761
<10763=10764
<10764=10768,10765
<10765=10767,10766
<10768=10770,10769
<10778=10781,10780,10779
<10781=10789,10782
<10782=10783
<10783=10787,10784
<10784=10785
<10785=10786
<10787=10788
<10789=10807,10790
<10790=10798,10791
<10791=10792
<10792=10794,10793
<10794=10795
<10795=10797,10796
<10798=10799
<10799=10803,10800
<10800=10801
<10801=10802
<10803=10804
<10804=10806,10805
<10807=10808
<10808=10810,10809
<10818=10824,10823,10819
<10819=10820
<10820=10822,10821
<10824=11048,11047,11046,11045,11035,11022,11009,10996,10983,10970,10957,10944,10877,10867,10852,10847,10834,10825
<10825=10826
<10826=10832,10827
<10827=10828
<10828=10829
<10829=10831,10830
<10832=10833
<10834=10835
<10835=10845,10836
<10836=10843,10841,10837
<10837=10838
<10838=10840,10839
<10841=10842
<10843=10844
<10845=10846
<10847=10848
<10848=10850,10849
<10850=10851
<10852=10863,10853
<10853=10854
<10854=10858,10855
<10855=10857,10856
<10858=10860,10859
<10860=10862,10861
<10863=10864
<10864=10866,10865
<10867=10868
<10868=10874,10869
<10869=10873,10870
<10870=10872,10871
<10874=10876,10875
<10877=10942,10878
<10878=10940,10934,10933,10931,10925,10924,10922,10916,10915,10913,10907,10906,10904,10898,10897,10895,10889,10888,10886,10880,10879
<10880=10881
<10881=10883,10882
<10883=10885,10884
<10886=10887
<10889=10890
<10890=10892,10891
<10892=10894,10893
<10895=10896
<10898=10899
<10899=10901,10900
<10901=10903,10902
<10904=10905
<10907=10908
<10908=10910,10909
<10910=10912,10911
<10913=10914
<10916=10917
<10917=10919,10918
<10919=10921,10920
<10922=10923
<10925=10926
<10926=10928,10927
<10928=10930,10929
<10931=10932
<10934=10935
<10935=10937,10936
<10937=10939,10938
<10940=10941
<10942=10943
<10944=10945
<10945=10955,10946
<10946=10953,10951,10947
<10947=10948
<10948=10950,10949
<10951=10952
<10953=10954
<10955=10956
<10957=10958
<10958=10968,10959
<10959=10966,10964,10960
<10960=10961
<10961=10963,10962
<10964=10965
<10966=10967
<10968=10969
<10970=10971
<10971=10981,10972
<10972=10979,10977,10973
<10973=10974
<10974=10976,10975
<10977=10978
<10979=10980
<10981=10982
<10983=10984
<10984=10994,10985
<10985=10992,10990,10986
<10986=10987
<10987=10989,10988
<10990=10991
<10992=10993
<10994=10995
<10996=10997
<10997=11007,10998
<10998=11005,11003,10999
<10999=11000
<11000=11002,11001
<11003=11004
<11005=11006
<11007=11008
<11009=11010
<11010=11020,11011
<11011=11018,11016,11012
<11012=11013
<11013=11015,11014
<11016=11017
<11018=11019
<11020=11021
<11022=11023
<11023=11033,11024
<11024=11031,11029,11025
<11025=11026
<11026=11028,11027
<11029=11030
<11031=11032
<11033=11034
<11035=11036
<11036=11043,11037
<11037=11038
<11038=11039
<11039=11041,11040
<11041=11042
<11043=11044
<11073=11076,11075,11074
<11076=11093,11088,11077
<11077=11086,11078
<11078=11079
<11079=11080
<11080=11082,11081
<11082=11083
<11083=11085,11084
<11086=11087
<11088=11089
<11089=11091,11090
<11091=11092
<11093=11094
<11094=11096,11095
<11096=11097
<11104=11110,11109,11105
<11105=11106
<11106=11108,11107
<11110=11111
<11111=11112
<11112=11116,11113
<11113=11114
<11114=11115
<11116=11117
<11117=11119,11118
<11125=11128,11127,11126
<11128=11129
<11129=11130
<11130=11132,11131
<11132=11133
<11137=11140,11139,11138
<11140=11141
<11141=11142
<11142=11144,11143
<11144=11145
<11145=11147,11146
<11152=11155,11154,11153
<11155=11156
<11156=11157
<11157=11159,11158
<11159=11160
<11164=11167,11166,11165
<11167=11190,11185,11168
<11168=11177,11169
<11169=11170
<11170=11171
<11171=11175,11172
<11172=11173
<11173=11174
<11175=11176
<11177=11178
<11178=11184,11179
<11179=11181,11180
<11181=11183,11182
<11185=11186
<11186=11188,11187
<11188=11189
<11190=11191
<11191=11200,11199,11192
<11192=11198,11193
<11193=11195,11194
<11195=11197,11196
<11208=11211,11210,11209
<11211=11212
<11212=11213
<11213=11215,11214
<11215=11216
<11220=11223,11222,11221
<11223=11224
<11224=11225
<11225=11227,11226
<11227=11228
<11232=11235,11234,11233
<11235=11236
<11236=11237
<11237=11239,11238
<11239=11240
<11244=11247,11246,11245
<11247=11248
<11248=11446,11249
<11249=11432,11343,11257,11250
<11250=11251
<11251=11255,11252
<11252=11253
<11253=11254
<11255=11256
<11257=11332,11258
<11258=11327,11288,11287,11276,11275,11264,11259
<11259=11260
<11260=11262,11261
<11262=11263
<11264=11265
<11265=11273,11266
<11266=11269,11267
<11267=11268
<11269=11270
<11270=11272,11271
<11273=11274
<11276=11277
<11277=11285,11278
<11278=11281,11279
<11279=11280
<11281=11282
<11282=11284,11283
<11285=11286
<11288=11289
<11289=11325,11290
<11290=11323,11321,11311,11301,11291
<11291=11292
<11292=11294,11293
<11294=11296,11295
<11296=11298,11297
<11298=11300,11299
<11301=11302
<11302=11304,11303
<11304=11306,11305
<11306=11308,11307
<11308=11310,11309
<11311=11312
<11312=11314,11313
<11314=11316,11315
<11316=11318,11317
<11318=11320,11319
<11321=11322
<11323=11324
<11325=11326
<11327=11328
<11328=11331,11330,11329
<11332=11333
<11333=11340,11334
<11334=11338,11335
<11335=11336
<11336=11337
<11338=11339
<11340=11342,11341
<11343=11423,11344
<11344=11413,11387,11345
<11345=11383,11346
<11346=11371,11359,11347
<11347=11348
<11348=11350,11349
<11350=11352,11351
<11352=11354,11353
<11354=11356,11355
<11356=11358,11357
<11359=11360
<11360=11362,11361
<11362=11364,11363
<11364=11366,11365
<11366=11368,11367
<11368=11370,11369
<11371=11372
<11372=11374,11373
<11374=11376,11375
<11376=11378,11377
<11378=11380,11379
<11380=11382,11381
<11383=11384
<11384=11386,11385
<11387=11388
<11388=11412,11411,11389
<11389=11410,11390
<11390=11408,11391
<11391=11406,11404,11400,11396,11392
<11392=11393
<11393=11395,11394
<11396=11397
<11397=11399,11398
<11400=11401
<11401=11403,11402
<11404=11405
<11406=11407
<11408=11409
<11413=11420,11417,11414
<11414=11416,11415
<11417=11419,11418
<11420=11422,11421
<11423=11424
<11424=11426,11425
<11426=11428,11427
<11428=11429
<11429=11431,11430
<11432=11433
<11433=11445,11444,11434
<11434=11443,11435
<11435=11441,11436
<11436=11439,11437
<11437=11438
<11439=11440
<11441=11442
<11446=11447
<11486=11489,11488,11487
<11489=11497,11490
<11490=11491
<11491=11495,11492
<11492=11493
<11493=11494
<11495=11496
<11497=11498
<11498=11502,11499
<11499=11500
<11500=11501
<11502=11503
<11509=11512,11511,11510
<11512=11520,11513
<11513=11514
<11514=11518,11515
<11515=11516
<11516=11517
<11518=11519
<11520=11521
<11521=11525,11522
<11522=11523
<11523=11524
<11525=11526
<11532=11535,11534,11533
<11535=11543,11536
<11536=11537
<11537=11541,11538
<11538=11539
<11539=11540
<11541=11542
<11543=11544
<11544=11548,11545
<11545=11546
<11546=11547
<11548=11549
<11555=11558,11557,11556
<11558=11566,11559
<11559=11560
<11560=11564,11561
<11561=11562
<11562=11563
<11564=11565
<11566=11567
<11567=11571,11568
<11568=11569
<11569=11570
<11571=11572
<11578=11581,11580,11579
<11581=11612,11603,11596,11587,11582
<11582=11583
<11583=11585,11584
<11585=11586
<11587=11588
<11588=11594,11589
<11589=11590
<11590=11591
<11591=11593,11592
<11594=11595
<11596=11597
<11597=11601,11598
<11598=11599
<11599=11600
<11601=11602
<11603=11604
<11604=11610,11605
<11605=11606
<11606=11607
<11607=11609,11608
<11610=11611
<11612=11613
<11613=11617,11614
<11614=11615
<11615=11616
<11617=11618
<11623=11626,11625,11624
<11626=11657,11648,11641,11632,11627
<11627=11628
<11628=11630,11629
<11630=11631
<11632=11633
<11633=11639,11634
<11634=11635
<11635=11636
<11636=11638,11637
<11639=11640
<11641=11642
<11642=11646,11643
<11643=11644
<11644=11645
<11646=11647
<11648=11649
<11649=11655,11650
<11650=11651
<11651=11652
<11652=11654,11653
<11655=11656
<11657=11658
<11658=11662,11659
<11659=11660
<11660=11661
<11662=11663
<11668=11671,11670,11669
<11671=11702,11693,11686,11677,11672
<11672=11673
<11673=11675,11674
<11675=11676
<11677=11678
<11678=11684,11679
<11679=11680
<11680=11681
<11681=11683,11682
<11684=11685
<11686=11687
<11687=11691,11688
<11688=11689
<11689=11690
<11691=11692
<11693=11694
<11694=11700,11695
<11695=11696
<11696=11697
<11697=11699,11698
<11700=11701
<11702=11703
<11703=11707,11704
<11704=11705
<11705=11706
<11707=11708
<11713=11716,11715,11714
<11716=11747,11738,11731,11722,11717
<11717=11718
<11718=11720,11719
<11720=11721
<11722=11723
<11723=11729,11724
<11724=11725
<11725=11726
<11726=11728,11727
<11729=11730
<11731=11732
<11732=11736,11733
<11733=11734
<11734=11735
<11736=11737
<11738=11739
<11739=11745,11740
<11740=11741
<11741=11742
<11742=11744,11743
<11745=11746
<11747=11748
<11748=11752,11749
<11749=11750
<11750=11751
<11752=11753
<11758=11761,11760,11759
<11761=11792,11783,11776,11767,11762
<11762=11763
<11763=11765,11764
<11765=11766
<11767=11768
<11768=11774,11769
<11769=11770
<11770=11771
<11771=11773,11772
<11774=11775
<11776=11777
<11777=11781,11778
<11778=11779
<11779=11780
<11781=11782
<11783=11784
<11784=11790,11785
<11785=11786
<11786=11787
<11787=11789,11788
<11790=11791
<11792=11793
<11793=11797,11794
<11794=11795
<11795=11796
<11797=11798
<11803=11806,11805,11804
<11806=11837,11828,11821,11812,11807
<11807=11808
<11808=11810,11809
<11810=11811
<11812=11813
<11813=11819,11814
<11814=11815
<11815=11816
<11816=11818,11817
<11819=11820
<11821=11822
<11822=11826,11823
<11823=11824
<11824=11825
<11826=11827
<11828=11829
<11829=11835,11830
<11830=11831
<11831=11832
<11832=11834,11833
<11835=11836
<11837=11838
<11838=11842,11839
<11839=11840
<11840=11841
<11842=11843
<11848=11851,11850,11849
<11851=11882,11873,11866,11857,11852
<11852=11853
<11853=11855,11854
<11855=11856
<11857=11858
<11858=11864,11859
<11859=11860
<11860=11861
<11861=11863,11862
<11864=11865
<11866=11867
<11867=11871,11868
<11868=11869
<11869=11870
<11871=11872
<11873=11874
<11874=11880,11875
<11875=11876
<11876=11877
<11877=11879,11878
<11880=11881
<11882=11883
<11883=11887,11884
<11884=11885
<11885=11886
<11887=11888
<11893=11896,11895,11894
<11896=11925,11916,11911,11902,11897
<11897=11898
<11898=11900,11899
<11900=11901
<11902=11903
<11903=11909,11904
<11904=11905
<11905=11906
<11906=11908,11907
<11909=11910
<11911=11912
<11912=11914,11913
<11914=11915
<11916=11917
<11917=11923,11918
<11918=11919
<11919=11920
<11920=11922,11921
<11923=11924
<11925=11926
<11926=11930,11927
<11927=11928
<11928=11929
<11930=11931
<11936=11939,11938,11937
<11939=12068,12059,12052,11954,11945,11940
<11940=11941
<11941=11943,11942
<11943=11944
<11945=11946
<11946=11952,11947
<11947=11948
<11948=11949
<11949=11951,11950
<11952=11953
<11954=12042,12036,12031,11955
<11955=11956
<11956=12023,11957
<11957=12018,12002,11987,11965,11958
<11958=11959
<11959=11963,11960
<11960=11961
<11961=11962
<11963=11964
<11965=11966
<11966=11985,11967
<11967=11981,11979,11968
<11968=11969
<11969=11977,11970
<11970=11975,11973,11971
<11971=11972
<11973=11974
<11975=11976
<11977=11978
<11979=11980
<11981=11982
<11982=11984,11983
<11985=11986
<11987=11988
<11988=12001,11989
<11989=11991,11990
<11991=11999,11992
<11992=11995,11993
<11993=11994
<11995=11996
<11996=11998,11997
<11999=12000
<12002=12003
<12003=12017,12016,12004
<12004=12015,12005
<12005=12013,12006
<12006=12009,12007
<12007=12008
<12009=12010
<12010=12012,12011
<12013=12014
<12018=12019
<12019=12022,12021,12020
<12023=12024
<12024=12026,12025
<12026=12028,12027
<12028=12030,12029
<12031=12035,12032
<12032=12034,12033
<12036=12037
<12037=12041,12038
<12038=12040,12039
<12042=12043
<12043=12044
<12044=12051,12050,12045
<12045=12049,12046
<12046=12048,12047
<12052=12053
<12053=12057,12054
<12054=12055
<12055=12056
<12057=12058
<12059=12060
<12060=12066,12061
<12061=12062
<12062=12063
<12063=12065,12064
<12066=12067
<12068=12069
<12069=12073,12070
<12070=12071
<12071=12072
<12073=12074
<12098=12101,12100,12099
<12101=12286,12277,12270,12116,12107,12102
<12102=12103
<12103=12105,12104
<12105=12106
<12107=12108
<12108=12114,12109
<12109=12110
<12110=12111
<12111=12113,12112
<12114=12115
<12116=12260,12254,12249,12117
<12117=12118
<12118=12241,12119
<12119=12225,12211,12162,12154,12149,12127,12120
<12120=12121
<12121=12125,12122
<12122=12123
<12123=12124
<12125=12126
<12127=12128
<12128=12147,12129
<12129=12143,12141,12130
<12130=12131
<12131=12139,12132
<12132=12137,12135,12133
<12133=12134
<12135=12136
<12137=12138
<12139=12140
<12141=12142
<12143=12144
<12144=12146,12145
<12147=12148
<12149=12150
<12150=12153,12152,12151
<12154=12155
<12155=12161,12156
<12156=12158,12157
<12158=12160,12159
<12162=12203,12198,12163
<12163=12164
<12164=12194,12190,12165
<12165=12166
<12166=12186,12182,12167
<12167=12168
<12168=12178,12174,12169
<12169=12170
<12170=12171
<12171=12173,12172
<12174=12175
<12175=12177,12176
<12178=12179
<12179=12181,12180
<12182=12183
<12183=12185,12184
<12186=12187
<12187=12189,12188
<12190=12191
<12191=12193,12192
<12194=12195
<12195=12197,12196
<12198=12199
<12199=12200
<12200=12202,12201
<12203=12204
<12204=12208,12205
<12205=12207,12206
<12208=12210,12209
<12211=12213,12212
<12213=12214
<12214=12222,12215
<12215=12219,12216
<12216=12218,12217
<12219=12221,12220
<12222=12224,12223
<12225=12226
<12226=12240,12239,12227
<12227=12238,12228
<12228=12236,12229
<12229=12232,12230
<12230=12231
<12232=12233
<12233=12235,12234
<12236=12237
<12241=12242
<12242=12244,12243
<12244=12246,12245
<12246=12248,12247
<12249=12253,12250
<12250=12252,12251
<12254=12255
<12255=12259,12256
<12256=12258,12257
<12260=12261
<12261=12262
<12262=12269,12268,12263
<12263=12267,12264
<12264=12266,12265
<12270=12271
<12271=12275,12272
<12272=12273
<12273=12274
<12275=12276
<12277=12278
<12278=12284,12279
<12279=12280
<12280=12281
<12281=12283,12282
<12284=12285
<12286=12287
<12287=12291,12288
<12288=12289
<12289=12290
<12291=12292
<12314=12317,12316,12315
<12317=12348,12339,12332,12323,12318
<12318=12319
<12319=12321,12320
<12321=12322
<12323=12324
<12324=12330,12325
<12325=12326
<12326=12327
<12327=12329,12328
<12330=12331
<12332=12333
<12333=12337,12334
<12334=12335
<12335=12336
<12337=12338
<12339=12340
<12340=12346,12341
<12341=12342
<12342=12343
<12343=12345,12344
<12346=12347
<12348=12349
<12349=12353,12350
<12350=12351
<12351=12352
<12353=12354
<12359=12362,12361,12360
<12362=12395,12386,12377,12368,12363
<12363=12364
<12364=12366,12365
<12366=12367
<12368=12369
<12369=12375,12370
<12370=12371
<12371=12372
<12372=12374,12373
<12375=12376
<12377=12378
<12378=12384,12379
<12379=12382,12380
<12380=12381
<12382=12383
<12384=12385
<12386=12387
<12387=12393,12388
<12388=12389
<12389=12390
<12390=12392,12391
<12393=12394
<12395=12396
<12396=12400,12397
<12397=12398
<12398=12399
<12400=12401
<12406=12409,12408,12407
<12409=12442,12433,12424,12415,12410
<12410=12411
<12411=12413,12412
<12413=12414
<12415=12416
<12416=12422,12417
<12417=12418
<12418=12419
<12419=12421,12420
<12422=12423
<12424=12425
<12425=12431,12426
<12426=12429,12427
<12427=12428
<12429=12430
<12431=12432
<12433=12434
<12434=12440,12435
<12435=12436
<12436=12437
<12437=12439,12438
<12440=12441
<12442=12443
<12443=12447,12444
<12444=12445
<12445=12446
<12447=12448
<12453=12456,12455,12454
<12456=12489,12480,12471,12462,12457
<12457=12458
<12458=12460,12459
<12460=12461
<12462=12463
<12463=12469,12464
<12464=12465
<12465=12466
<12466=12468,12467
<12469=12470
<12471=12472
<12472=12478,12473
<12473=12476,12474
<12474=12475
<12476=12477
<12478=12479
<12480=12481
<12481=12487,12482
<12482=12483
<12483=12484
<12484=12486,12485
<12487=12488
<12489=12490
<12490=12494,12491
<12491=12492
<12492=12493
<12494=12495
<12500=12503,12502,12501
<12503=12504
<12504=12505
<12505=12507,12506
<12507=12508
<12512=12515,12514,12513
<12515=12516
<12516=12517
<12517=12519,12518
<12519=12520
<12524=12527,12526,12525
<12527=12528
<12528=12529
<12529=12531,12530
<12531=12532
<12536=12539,12538,12537
<12539=12540
<12540=12541
<12541=12543,12542
<12543=12544
<12548=12551,12550,12549
<12551=12552
<12552=12553
<12553=12555,12554
<12555=12556
<12560=12563,12562,12561
<12563=12598,12589,12585,12578,12569,12564
<12564=12565
<12565=12567,12566
<12567=12568
<12569=12570
<12570=12576,12571
<12571=12572
<12572=12573
<12573=12575,12574
<12576=12577
<12578=12579
<12579=12581,12580
<12581=12582
<12582=12584,12583
<12585=12586
<12586=12588,12587
<12589=12590
<12590=12596,12591
<12591=12592
<12592=12593
<12593=12595,12594
<12596=12597
<12598=12599
<12599=12603,12600
<12600=12601
<12601=12602
<12603=12604
<12610=12613,12612,12611
<12613=12614
<12614=12615
<12615=12617,12616
<12617=12618
<12622=12625,12624,12623
<12625=12626
<12626=12627
<12627=12629,12628
<12629=12630
<12634=12637,12636,12635
<12637=12666,12657,12652,12643,12638
<12638=12639
<12639=12641,12640
<12641=12642
<12643=12644
<12644=12650,12645
<12645=12646
<12646=12647
<12647=12649,12648
<12650=12651
<12652=12653
<12653=12655,12654
<12655=12656
<12657=12658
<12658=12664,12659
<12659=12660
<12660=12661
<12661=12663,12662
<12664=12665
<12666=12667
<12667=12671,12668
<12668=12669
<12669=12670
<12671=12672
<12677=12680,12679,12678
<12680=12691,12686,12681
<12681=12682
<12682=12684,12683
<12684=12685
<12686=12687
<12687=12689,12688
<12689=12690
<12691=12692
<12692=12696,12693
<12693=12694
<12694=12695
<12696=12697
<12701=12704,12703,12702
<12704=12733,12724,12719,12710,12705
<12705=12706
<12706=12708,12707
<12708=12709
<12710=12711
<12711=12717,12712
<12712=12713
<12713=12714
<12714=12716,12715
<12717=12718
<12719=12720
<12720=12722,12721
<12722=12723
<12724=12725
<12725=12731,12726
<12726=12727
<12727=12728
<12728=12730,12729
<12731=12732
<12733=12734
<12734=12738,12735
<12735=12736
<12736=12737
<12738=12739
<12744=12747,12746,12745
<12747=12755,12748
<12748=12749
<12749=12753,12750
<12750=12751
<12751=12752
<12753=12754
<12755=12756
<12756=12758,12757
<12758=12760,12759
<12767=12770,12769,12768
<12770=12834,12827,12818,12790,12785,12776,12771
<12771=12772
<12772=12774,12773
<12774=12775
<12776=12777
<12777=12783,12778
<12778=12779
<12779=12780
<12780=12782,12781
<12783=12784
<12785=12786
<12786=12788,12787
<12788=12789
<12790=12812,12806,12801,12791
<12791=12792
<12792=12793
<12793=12799,12794
<12794=12795
<12795=12796
<12796=12798,12797
<12799=12800
<12801=12805,12802
<12802=12804,12803
<12806=12807
<12807=12811,12808
<12808=12810,12809
<12812=12813
<12813=12817,12814
<12814=12816,12815
<12818=12819
<12819=12825,12820
<12820=12821
<12821=12822
<12822=12824,12823
<12825=12826
<12827=12828
<12828=12832,12829
<12829=12830
<12830=12831
<12832=12833
<12834=12835
<12835=12837,12836
<12848=12851,12850,12849
<12851=12852
<12852=12974,12853
<12853=12854
<12854=12972,12967,12855
<12855=12856
<12856=12965,12960,12857
<12857=12858
<12858=12958,12953,12859
<12859=12860
<12860=12951,12934,12861
<12861=12862
<12862=12863
<12863=12922,12908,12864
<12864=12865
<12865=12896,12882,12866
<12866=12867
<12867=12877,12868
<12868=12869
<12869=12875,12870
<12870=12873,12871
<12871=12872
<12873=12874
<12875=12876
<12877=12878
<12878=12880,12879
<12880=12881
<12882=12890,12883
<12883=12884
<12884=12888,12885
<12885=12886
<12886=12887
<12888=12889
<12890=12891
<12891=12893,12892
<12893=12895,12894
<12896=12897
<12897=12903,12898
<12898=12900,12899
<12900=12902,12901
<12903=12905,12904
<12905=12907,12906
<12908=12916,12909
<12909=12910
<12910=12914,12911
<12911=12912
<12912=12913
<12914=12915
<12916=12917
<12917=12919,12918
<12919=12921,12920
<12922=12923
<12923=12929,12924
<12924=12926,12925
<12926=12928,12927
<12929=12931,12930
<12931=12933,12932
<12934=12935
<12935=12946,12936
<12936=12937
<12937=12939,12938
<12939=12940
<12940=12942,12941
<12942=12944,12943
<12944=12945
<12946=12947
<12947=12949,12948
<12949=12950
<12951=12952
<12953=12954
<12954=12956,12955
<12956=12957
<12958=12959
<12960=12961
<12961=12963,12962
<12963=12964
<12965=12966
<12967=12968
<12968=12970,12969
<12970=12971
<12972=12973
<12974=12975
<12975=12980,12976
<12976=12978,12977
<12978=12979
<12997=13000,12999,12998
<13000=13001
<13001=13040,13027,13002
<13002=13003
<13003=13022,13011,13004
<13004=13005
<13005=13009,13006
<13006=13007
<13007=13008
<13009=13010
<13011=13018,13012
<13012=13013
<13013=13015,13014
<13015=13017,13016
<13018=13019
<13019=13021,13020
<13022=13023
<13023=13025,13024
<13025=13026
<13027=13035,13028
<13028=13029
<13029=13033,13030
<13030=13031
<13031=13032
<13033=13034
<13035=13036
<13036=13038,13037
<13038=13039
<13040=13041
<13041=13043,13042
<13043=13045,13044
<13054=13057,13056,13055
<13057=13058
<13058=13134,13121,13059
<13059=13060
<13060=13068,13061
<13061=13062
<13062=13066,13063
<13063=13064
<13064=13065
<13066=13067
<13068=13116,13115,13069
<13069=13070
<13070=13110,13104,13071
<13071=13072
<13072=13090,13073
<13073=13085,13074
<13074=13081,13075
<13075=13076
<13076=13078,13077
<13078=13080,13079
<13081=13082
<13082=13084,13083
<13085=13086
<13086=13088,13087
<13088=13089
<13090=13091
<13091=13098,13092
<13092=13097,13093
<13093=13095,13094
<13095=13096
<13098=13103,13099
<13099=13101,13100
<13101=13102
<13104=13105
<13105=13106
<13106=13108,13107
<13108=13109
<13110=13111
<13111=13113,13112
<13113=13114
<13116=13117
<13117=13119,13118
<13119=13120
<13121=13129,13122
<13122=13123
<13123=13127,13124
<13124=13125
<13125=13126
<13127=13128
<13129=13130
<13130=13132,13131
<13132=13133
<13134=13135
<13135=13147,13136
<13136=13142,13137
<13137=13139,13138
<13139=13141,13140
<13142=13144,13143
<13144=13146,13145
<13147=13149,13148
<13149=13151,13150
<13166=13169,13168,13167
<13169=13170
<13170=13231,13218,13171
<13171=13172
<13172=13212,13193,13173
<13173=13174
<13174=13188,13182,13175
<13175=13176
<13176=13180,13177
<13177=13178
<13178=13179
<13180=13181
<13182=13183
<13183=13185,13184
<13185=13187,13186
<13188=13189
<13189=13191,13190
<13191=13192
<13193=13207,13201,13194
<13194=13195
<13195=13199,13196
<13196=13197
<13197=13198
<13199=13200
<13201=13202
<13202=13204,13203
<13204=13206,13205
<13207=13208
<13208=13210,13209
<13210=13211
<13212=13213
<13213=13215,13214
<13215=13217,13216
<13218=13226,13219
<13219=13220
<13220=13224,13221
<13221=13222
<13222=13223
<13224=13225
<13226=13227
<13227=13229,13228
<13229=13230
<13231=13232
<13232=13234,13233
<13234=13236,13235
<13245=13248,13247,13246
<13248=13277,13268,13263,13254,13249
<13249=13250
<13250=13252,13251
<13252=13253
<13254=13255
<13255=13261,13256
<13256=13257
<13257=13258
<13258=13260,13259
<13261=13262
<13263=13264
<13264=13266,13265
<13266=13267
<13268=13269
<13269=13275,13270
<13270=13271
<13271=13272
<13272=13274,13273
<13275=13276
<13277=13278
<13278=13282,13279
<13279=13280
<13280=13281
<13282=13283
<13288=13291,13290,13289
<13291=13320,13311,13306,13297,13292
<13292=13293
<13293=13295,13294
<13295=13296
<13297=13298
<13298=13304,13299
<13299=13300
<13300=13301
<13301=13303,13302
<13304=13305
<13306=13307
<13307=13309,13308
<13309=13310
<13311=13312
<13312=13318,13313
<13313=13314
<13314=13315
<13315=13317,13316
<13318=13319
<13320=13321
<13321=13325,13322
<13322=13323
<13323=13324
<13325=13326
<13331=13334,13333,13332
<13334=13340,13335
<13335=13336
<13336=13338,13337
<13338=13339
<13340=13351,13341
<13341=13342
<13342=13344,13343
<13344=13345
<13345=13347,13346
<13347=13349,13348
<13349=13350
<13351=13352
<13352=13354,13353
<13354=13355
<13360=13363,13362,13361
<13363=13364
<13364=13365
<13365=13367,13366
<13367=13368
<13372=13375,13374,13373
<13375=13376
<13376=13377
<13377=13379,13378
<13379=13380
<13384=13387,13386,13385
<13387=13388
<13388=13389
<13389=13391,13390
<13391=13392
<13396=13399,13398,13397
<13399=13400
<13400=13401
<13401=13403,13402
<13403=13404
<13408=13411,13410,13409
<13411=13412
<13412=13413
<13413=13419,13414
<13414=13417,13415
<13415=13416
<13417=13418
<13419=13420
<13426=13429,13428,13427
<13429=13430
<13430=13431
<13431=13437,13432
<13432=13435,13433
<13433=13434
<13435=13436
<13437=13438
<13444=13447,13446,13445
<13447=13448
<13448=13449
<13449=13455,13450
<13450=13453,13451
<13451=13452
<13453=13454
<13455=13456
<13462=13465,13464,13463
<13465=13466
<13466=13467
<13467=13469,13468
<13469=13470
<13474=13477,13476,13475
<13477=13478
<13478=13479
<13479=13483,13480
<13480=13481
<13481=13482
<13483=13484
<13489=13495,13494,13490
<13490=13491
<13491=13493,13492
<13495=13496
<13496=13497
<13497=13503,13498
<13498=13499
<13499=13500
<13500=13502,13501
<13503=13504
<13504=13506,13505
<13513=13522,13521,13514
<13514=13518,13515
<13515=13517,13516
<13518=13520,13519
<13522=13530,13523
<13523=13524
<13524=13528,13525
<13525=13526
<13526=13527
<13528=13529
<13530=13531
<13531=13537,13532
<13532=13535,13533
<13533=13534
<13535=13536
<13537=13538
<13545=13548,13547,13546
<13548=13549
<13549=13550
<13550=13552,13551
<13552=13553
<13557=13560,13559,13558
<13560=13561
<13561=13647,13562
<13562=13563
<13563=13637,13608,13564
<13564=13565
<13565=13592,13580,13566
<13566=13567
<13567=13571,13568
<13568=13569
<13569=13570
<13571=13572
<13572=13574,13573
<13574=13576,13575
<13576=13577
<13577=13579,13578
<13580=13581
<13581=13585,13582
<13582=13583
<13583=13584
<13585=13586
<13586=13588,13587
<13588=13590,13589
<13590=13591
<13592=13598,13593
<13593=13594
<13594=13596,13595
<13596=13597
<13598=13599
<13599=13601,13600
<13601=13602
<13602=13604,13603
<13604=13606,13605
<13606=13607
<13608=13625,13609
<13609=13610
<13610=13616,13611
<13611=13614,13612
<13612=13613
<13614=13615
<13616=13617
<13617=13619,13618
<13619=13621,13620
<13621=13622
<13622=13624,13623
<13625=13626
<13626=13630,13627
<13627=13628
<13628=13629
<13630=13631
<13631=13633,13632
<13633=13635,13634
<13635=13636
<13637=13638
<13638=13640,13639
<13640=13641
<13641=13643,13642
<13643=13645,13644
<13645=13646
<13647=13648
<13648=13650,13649
<13650=13651
<13665=13668,13667,13666
<13668=13709,13678,13669
<13669=13670
<13670=13676,13671
<13671=13672
<13672=13673
<13673=13675,13674
<13676=13677
<13678=13694,13679
<13679=13680
<13680=13684,13681
<13681=13683,13682
<13684=13686,13685
<13686=13688,13687
<13688=13690,13689
<13690=13691
<13691=13693,13692
<13694=13695
<13695=13699,13696
<13696=13698,13697
<13699=13701,13700
<13701=13703,13702
<13703=13705,13704
<13705=13706
<13706=13708,13707
<13709=13710
<13710=13712,13711
<13712=13714,13713
<13714=13716,13715
<13716=13718,13717
<13718=13719
<13719=13721,13720
<13735=13738,13737,13736
<13738=13775,13748,13739
<13739=13740
<13740=13746,13741
<13741=13742
<13742=13743
<13743=13745,13744
<13746=13747
<13748=13762,13749
<13749=13750
<13750=13752,13751
<13752=13754,13753
<13754=13756,13755
<13756=13758,13757
<13758=13759
<13759=13761,13760
<13762=13763
<13763=13765,13764
<13765=13767,13766
<13767=13769,13768
<13769=13771,13770
<13771=13772
<13772=13774,13773
<13775=13776
<13776=13778,13777
<13778=13780,13779
<13780=13782,13781
<13782=13784,13783
<13784=13785
<13785=13787,13786
<13801=13804,13803,13802
<13804=13827,13812,13805
<13805=13806
<13806=13810,13807
<13807=13808
<13808=13809
<13810=13811
<13812=13813
<13813=13826,13825,13814
<13814=13824,13815
<13815=13820,13817,13816
<13817=13819,13818
<13820=13821
<13821=13823,13822
<13827=13828
<13828=13861,13829
<13829=13852,13848,13839,13830
<13830=13831
<13831=13833,13832
<13833=13835,13834
<13835=13836
<13836=13838,13837
<13839=13840
<13840=13842,13841
<13842=13844,13843
<13844=13845
<13845=13847,13846
<13848=13849
<13849=13851,13850
<13852=13853
<13853=13855,13854
<13855=13857,13856
<13857=13858
<13858=13860,13859
<13861=13862
<13877=13880,13879,13878
<13880=13903,13888,13881
<13881=13882
<13882=13886,13883
<13883=13884
<13884=13885
<13886=13887
<13888=13889
<13889=13902,13901,13890
<13890=13900,13891
<13891=13896,13893,13892
<13893=13895,13894
<13896=13897
<13897=13899,13898
<13903=13904
<13904=13906,13905
<13906=13908,13907
<13908=13910,13909
<13910=13912,13911
<13912=13913
<13913=13915,13914
<13932=13935,13934,13933
<13935=13958,13943,13936
<13936=13937
<13937=13941,13938
<13938=13939
<13939=13940
<13941=13942
<13943=13944
<13944=13957,13956,13945
<13945=13955,13946
<13946=13951,13948,13947
<13948=13950,13949
<13951=13952
<13952=13954,13953
<13958=13959
<13959=13990,13960
<13960=13981,13979,13970,13961
<13961=13962
<13962=13964,13963
<13964=13966,13965
<13966=13967
<13967=13969,13968
<13970=13971
<13971=13973,13972
<13973=13975,13974
<13975=13976
<13976=13978,13977
<13979=13980
<13981=13982
<13982=13984,13983
<13984=13986,13985
<13986=13987
<13987=13989,13988
<13990=13991
<14006=14009,14008,14007
<14009=14032,14017,14010
<14010=14011
<14011=14015,14012
<14012=14013
<14013=14014
<14015=14016
<14017=14018
<14018=14031,14030,14019
<14019=14029,14020
<14020=14025,14022,14021
<14022=14024,14023
<14025=14026
<14026=14028,14027
<14032=14033
<14033=14035,14034
<14035=14037,14036
<14037=14039,14038
<14039=14041,14040
<14041=14042
<14042=14044,14043
<14061=14064,14063,14062
<14064=14087,14072,14065
<14065=14066
<14066=14070,14067
<14067=14068
<14068=14069
<14070=14071
<14072=14073
<14073=14086,14085,14074
<14074=14084,14075
<14075=14080,14077,14076
<14077=14079,14078
<14080=14081
<14081=14083,14082
<14087=14088
<14088=14090,14089
<14090=14092,14091
<14092=14094,14093
<14094=14096,14095
<14096=14097
<14097=14099,14098
<14116=14119,14118,14117
<14119=14142,14127,14120
<14120=14121
<14121=14125,14122
<14122=14123
<14123=14124
<14125=14126
<14127=14128
<14128=14141,14140,14129
<14129=14139,14130
<14130=14135,14132,14131
<14132=14134,14133
<14135=14136
<14136=14138,14137
<14142=14143
<14143=14176,14144
<14144=14167,14163,14154,14145
<14145=14146
<14146=14148,14147
<14148=14150,14149
<14150=14151
<14151=14153,14152
<14154=14155
<14155=14157,14156
<14157=14159,14158
<14159=14160
<14160=14162,14161
<14163=14164
<14164=14166,14165
<14167=14168
<14168=14170,14169
<14170=14172,14171
<14172=14173
<14173=14175,14174
<14176=14177
<14192=14195,14194,14193
<14195=14218,14203,14196
<14196=14197
<14197=14201,14198
<14198=14199
<14199=14200
<14201=14202
<14203=14204
<14204=14217,14216,14205
<14205=14215,14206
<14206=14211,14208,14207
<14208=14210,14209
<14211=14212
<14212=14214,14213
<14218=14219
<14219=14250,14220
<14220=14241,14239,14230,14221
<14221=14222
<14222=14224,14223
<14224=14226,14225
<14226=14227
<14227=14229,14228
<14230=14231
<14231=14233,14232
<14233=14235,14234
<14235=14236
<14236=14238,14237
<14239=14240
<14241=14242
<14242=14244,14243
<14244=14246,14245
<14246=14247
<14247=14249,14248
<14250=14251
<14266=14269,14268,14267
<14269=14292,14277,14270
<14270=14271
<14271=14275,14272
<14272=14273
<14273=14274
<14275=14276
<14277=14278
<14278=14291,14290,14279
<14279=14289,14280
<14280=14285,14282,14281
<14282=14284,14283
<14285=14286
<14286=14288,14287
<14292=14293
<14293=14295,14294
<14295=14297,14296
<14297=14299,14298
<14299=14301,14300
<14301=14302
<14302=14304,14303
<14321=14324,14323,14322
<14324=14334,14325
<14325=14326
<14326=14332,14327
<14327=14328
<14328=14329
<14329=14331,14330
<14332=14333
<14334=14335
<14335=14341,14336
<14336=14340,14337
<14337=14339,14338
<14341=14343,14342
<14351=14354,14353,14352
<14354=14545,14536,14527,14518,14509,14500,14493,14355
<14355=14484,14356
<14356=14446,14436,14391,14381,14357
<14357=14379,14358
<14358=14359
<14359=14375,14360
<14360=14373,14361
<14361=14362
<14362=14365,14364,14363
<14365=14366
<14366=14372,14367
<14367=14371,14368
<14368=14370,14369
<14373=14374
<14375=14376
<14376=14378,14377
<14379=14380
<14381=14382
<14382=14390,14389,14383
<14383=14388,14384
<14384=14386,14385
<14386=14387
<14391=14430,14392
<14392=14400,14393
<14393=14394
<14394=14396,14395
<14396=14397
<14397=14399,14398
<14400=14428,14415,14401
<14401=14402
<14402=14403
<14403=14413,14404
<14404=14409,14407,14405
<14405=14406
<14407=14408
<14409=14410
<14410=14412,14411
<14413=14414
<14415=14416
<14416=14426,14417
<14417=14422,14420,14418
<14418=14419
<14420=14421
<14422=14423
<14423=14425,14424
<14426=14427
<14428=14429
<14430=14431
<14431=14435,14432
<14432=14434,14433
<14436=14444,14437
<14437=14438
<14438=14440,14439
<14440=14441
<14441=14443,14442
<14444=14445
<14446=14454,14447
<14447=14448
<14448=14452,14449
<14449=14450
<14450=14451
<14452=14453
<14454=14455
<14455=14479,14456
<14456=14474,14457
<14457=14469,14458
<14458=14464,14459
<14459=14463,14460
<14460=14462,14461
<14464=14466,14465
<14466=14468,14467
<14469=14471,14470
<14471=14473,14472
<14474=14476,14475
<14476=14478,14477
<14479=14481,14480
<14481=14483,14482
<14484=14485
<14485=14487,14486
<14487=14489,14488
<14489=14490
<14490=14492,14491
<14493=14494
<14494=14496,14495
<14496=14497
<14497=14499,14498
<14500=14501
<14501=14508,14507,14502
<14502=14506,14503
<14503=14505,14504
<14509=14510
<14510=14517,14516,14511
<14511=14515,14512
<14512=14514,14513
<14518=14519
<14519=14526,14525,14520
<14520=14524,14521
<14521=14523,14522
<14527=14528
<14528=14535,14534,14529
<14529=14533,14530
<14530=14532,14531
<14536=14537
<14537=14544,14543,14538
<14538=14542,14539
<14539=14541,14540
<14545=14546
<14546=14553,14552,14547
<14547=14551,14548
<14548=14550,14549
<14584=14590,14589,14585
<14585=14586
<14586=14588,14587
<14595=14598,14597,14596
<14598=14599
<14599=14639,14600
<14600=14601
<14601=14630,14602
<14602=14603
<14603=14623,14614,14604
<14604=14605
<14605=14606
<14606=14610,14607
<14607=14608
<14608=14609
<14610=14611
<14611=14613,14612
<14614=14615
<14615=14619,14616
<14616=14617
<14617=14618
<14619=14620
<14620=14622,14621
<14623=14624
<14624=14626,14625
<14626=14627
<14627=14629,14628
<14630=14631
<14631=14638,14632
<14632=14634,14633
<14634=14635
<14635=14637,14636
<14639=14640
<14640=14644,14641
<14641=14643,14642
<14644=14646,14645
<14657=14660,14659,14658
<14660=14661
<14661=14701,14662
<14662=14663
<14663=14692,14664
<14664=14665
<14665=14685,14676,14666
<14666=14667
<14667=14668
<14668=14672,14669
<14669=14670
<14670=14671
<14672=14673
<14673=14675,14674
<14676=14677
<14677=14681,14678
<14678=14679
<14679=14680
<14681=14682
<14682=14684,14683
<14685=14686
<14686=14688,14687
<14688=14689
<14689=14691,14690
<14692=14693
<14693=14700,14694
<14694=14696,14695
<14696=14697
<14697=14699,14698
<14701=14702
<14702=14706,14703
<14703=14705,14704
<14706=14708,14707
<14719=14722,14721,14720
<14722=14723
<14723=14763,14724
<14724=14725
<14725=14754,14726
<14726=14727
<14727=14747,14738,14728
<14728=14729
<14729=14730
<14730=14734,14731
<14731=14732
<14732=14733
<14734=14735
<14735=14737,14736
<14738=14739
<14739=14743,14740
<14740=14741
<14741=14742
<14743=14744
<14744=14746,14745
<14747=14748
<14748=14750,14749
<14750=14751
<14751=14753,14752
<14754=14755
<14755=14762,14756
<14756=14758,14757
<14758=14759
<14759=14761,14760
<14763=14764
<14764=14766,14765
<14777=14780,14779,14778
<14780=14781
<14781=14828,14789,14782
<14782=14783
<14783=14784
<14784=14785
<14785=14787,14786
<14787=14788
<14789=14790
<14790=14819,14791
<14791=14792
<14792=14812,14803,14793
<14793=14794
<14794=14795
<14795=14799,14796
<14796=14797
<14797=14798
<14799=14800
<14800=14802,14801
<14803=14804
<14804=14808,14805
<14805=14806
<14806=14807
<14808=14809
<14809=14811,14810
<14812=14813
<14813=14815,14814
<14815=14816
<14816=14818,14817
<14819=14820
<14820=14827,14821
<14821=14823,14822
<14823=14824
<14824=14826,14825
<14828=14829
<14829=14833,14830
<14830=14832,14831
<14833=14835,14834
<14846=14849,14848,14847
<14849=14894,14884,14862,14855,14850
<14850=14851
<14851=14853,14852
<14853=14854
<14855=14856
<14856=14858,14857
<14858=14859
<14859=14861,14860
<14862=14882,14863
<14863=14864
<14864=14878,14865
<14865=14876,14866
<14866=14867
<14867=14870,14869,14868
<14870=14871
<14871=14875,14872
<14872=14874,14873
<14876=14877
<14878=14879
<14879=14881,14880
<14882=14883
<14884=14885
<14885=14893,14892,14886
<14886=14891,14887
<14887=14889,14888
<14889=14890
<14894=14895
<14895=14901,14896
<14896=14900,14897
<14897=14899,14898
<14901=14903,14902
<14915=14918,14917,14916
<14918=14926,14919
<14919=14920
<14920=14922,14921
<14922=14923
<14923=14925,14924
<14926=14927
<14927=14929,14928
<14934=14937,14936,14935
<14937=14945,14938
<14938=14939
<14939=14941,14940
<14941=14942
<14942=14944,14943
<14945=14946
<14946=14948,14947
<14953=14956,14955,14954
<14956=14964,14957
<14957=14958
<14958=14960,14959
<14960=14961
<14961=14963,14962
<14964=14965
<14965=14967,14966
<14972=14975,14974,14973
<14975=14976
<14976=15041,14977
<14977=14992,14985,14978
<14978=14979
<14979=14983,14980
<14980=14981
<14981=14982
<14983=14984
<14985=14986
<14986=14988,14987
<14988=14989
<14989=14991,14990
<14992=15032,15023,14993
<14993=14994
<14994=15014,15005,14995
<14995=14996
<14996=14997
<14997=15001,14998
<14998=14999
<14999=15000
<15001=15002
<15002=15004,15003
<15005=15006
<15006=15010,15007
<15007=15008
<15008=15009
<15010=15011
<15011=15013,15012
<15014=15015
<15015=15017,15016
<15017=15019,15018
<15019=15020
<15020=15022,15021
<15023=15024
<15024=15028,15025
<15025=15026
<15026=15027
<15028=15029
<15029=15031,15030
<15032=15033
<15033=15035,15034
<15035=15037,15036
<15037=15038
<15038=15040,15039
<15041=15042
<15042=15044,15043
<15056=15059,15058,15057
<15059=15117,15110,15060
<15060=15108,15061
<15061=15101,15090,15071,15062
<15062=15063
<15063=15067,15064
<15064=15065
<15065=15066
<15067=15068
<15068=15070,15069
<15071=15072
<15072=15086,15073
<15073=15084,15082,15080,15078,15076,15074
<15074=15075
<15076=15077
<15078=15079
<15080=15081
<15082=15083
<15084=15085
<15086=15087
<15087=15089,15088
<15090=15091
<15091=15100,15099,15092
<15092=15098,15093
<15093=15097,15094
<15094=15096,15095
<15101=15102
<15102=15107,15106,15103
<15103=15105,15104
<15108=15109
<15110=15111
<15111=15113,15112
<15113=15114
<15114=15116,15115
<15117=15118
<15118=15120,15119
<15132=15135,15134,15133
<15135=15136
<15136=15137
<15137=15139,15138
<15144=15147,15146,15145
<15147=15148
<15148=15189,15185,15182,15149
<15149=15150
<15150=15164,15151
<15151=15152
<15152=15160,15153
<15153=15158,15154
<15154=15155
<15155=15157,15156
<15158=15159
<15160=15161
<15161=15163,15162
<15164=15165
<15165=15172,15166
<15166=15168,15167
<15168=15169
<15169=15171,15170
<15172=15174,15173
<15174=15176,15175
<15176=15177
<15177=15179,15178
<15179=15181,15180
<15182=15184,15183
<15185=15186
<15186=15188,15187
<15189=15190
<15190=15191
<15191=15196,15195,15192
<15192=15194,15193
<15207=15216,15215,15208
<15208=15212,15209
<15209=15211,15210
<15212=15214,15213
<15216=15217
<15217=15230,15218
<15218=15224,15219
<15219=15220
<15220=15222,15221
<15222=15223
<15224=15225
<15225=15227,15226
<15227=15229,15228
<15230=15231
<15231=15239,15232
<15232=15236,15233
<15233=15235,15234
<15236=15238,15237
<15248=15254,15253,15249
<15249=15250
<15250=15252,15251
<15254=15398,15336,15305,15279,15255
<15255=15275,15256
<15256=15257
<15257=15273,15258
<15258=15259
<15259=15269,15260
<15260=15267,15265,15261
<15261=15262
<15262=15264,15263
<15265=15266
<15267=15268
<15269=15270
<15270=15272,15271
<15273=15274
<15275=15276
<15276=15278,15277
<15279=15299,15280
<15280=15281
<15281=15297,15282
<15282=15283
<15283=15293,15284
<15284=15291,15289,15285
<15285=15286
<15286=15288,15287
<15289=15290
<15291=15292
<15293=15294
<15294=15296,15295
<15297=15298
<15299=15300
<15300=15304,15301
<15301=15303,15302
<15305=15326,15306
<15306=15307
<15307=15324,15308
<15308=15309
<15309=15310
<15310=15320,15311
<15311=15318,15316,15312
<15312=15313
<15313=15315,15314
<15316=15317
<15318=15319
<15320=15321
<15321=15323,15322
<15324=15325
<15326=15327
<15327=15333,15328
<15328=15330,15329
<15330=15332,15331
<15333=15335,15334
<15336=15392,15337
<15337=15374,15356,15338
<15338=15354,15339
<15339=15340
<15340=15350,15341
<15341=15348,15346,15342
<15342=15343
<15343=15345,15344
<15346=15347
<15348=15349
<15350=15351
<15351=15353,15352
<15354=15355
<15356=15372,15357
<15357=15358
<15358=15368,15359
<15359=15366,15364,15360
<15360=15361
<15361=15363,15362
<15364=15365
<15366=15367
<15368=15369
<15369=15371,15370
<15372=15373
<15374=15390,15375
<15375=15376
<15376=15386,15377
<15377=15384,15382,15378
<15378=15379
<15379=15381,15380
<15382=15383
<15384=15385
<15386=15387
<15387=15389,15388
<15390=15391
<15392=15393
<15393=15397,15394
<15394=15396,15395
<15398=15400,15399
<15400=15401
<15401=15403,15402
<15426=15432,15431,15427
<15427=15428
<15428=15430,15429
<15432=15433
<15433=15448,15444,15434
<15434=15435
<15435=15436
<15436=15440,15437
<15437=15438
<15438=15439
<15440=15441
<15441=15443,15442
<15444=15445
<15445=15447,15446
<15448=15449
<15449=15451,15450
<15460=15463,15462,15461
<15463=15464
<15464=15472,15465
<15465=15466
<15466=15468,15467
<15468=15469
<15469=15471,15470
<15472=15473
<15478=15481,15480,15479
<15481=15482
<15482=15540,15502,15483
<15483=15484
<15484=15485
<15485=15500,15495,15486
<15486=15487
<15487=15493,15488
<15488=15489
<15489=15491,15490
<15491=15492
<15493=15494
<15495=15496
<15496=15498,15497
<15498=15499
<15500=15501
<15502=15533,15524,15517,15508,15503
<15503=15504
<15504=15506,15505
<15506=15507
<15508=15509
<15509=15515,15510
<15510=15511
<15511=15512
<15512=15514,15513
<15515=15516
<15517=15518
<15518=15520,15519
<15520=15521
<15521=15523,15522
<15524=15525
<15525=15531,15526
<15526=15527
<15527=15528
<15528=15530,15529
<15531=15532
<15533=15534
<15534=15538,15535
<15535=15536
<15536=15537
<15538=15539
<15540=15541
<15541=15548,15542
<15542=15544,15543
<15544=15545
<15545=15547,15546
<15557=15560,15559,15558
<15560=15561
<15561=15600,15562
<15562=15593,15584,15577,15568,15563
<15563=15564
<15564=15566,15565
<15566=15567
<15568=15569
<15569=15575,15570
<15570=15571
<15571=15572
<15572=15574,15573
<15575=15576
<15577=15578
<15578=15580,15579
<15580=15581
<15581=15583,15582
<15584=15585
<15585=15591,15586
<15586=15587
<15587=15588
<15588=15590,15589
<15591=15592
<15593=15594
<15594=15598,15595
<15595=15596
<15596=15597
<15598=15599
<15600=15601
<15607=15610,15609,15608
<15610=15611
<15611=15612
<15617=15620,15619,15618
<15620=15621
<15621=15682,15622
<15622=15623
<15623=15673,15624
<15624=15662,15638,15632,15625
<15625=15626
<15626=15628,15627
<15628=15629
<15629=15631,15630
<15632=15633
<15633=15635,15634
<15635=15637,15636
<15638=15658,15649,15639
<15639=15640
<15640=15641
<15641=15645,15642
<15642=15643
<15643=15644
<15645=15646
<15646=15648,15647
<15649=15650
<15650=15654,15651
<15651=15652
<15652=15653
<15654=15655
<15655=15657,15656
<15658=15659
<15659=15661,15660
<15662=15663
<15663=15670,15664
<15664=15666,15665
<15666=15667
<15667=15669,15668
<15670=15672,15671
<15673=15674
<15674=15681,15675
<15675=15677,15676
<15677=15678
<15678=15680,15679
<15682=15683
<15683=15685,15684
<15698=15701,15700,15699
<15701=15702
<15702=15763,15703
<15703=15704
<15704=15754,15705
<15705=15743,15719,15713,15706
<15706=15707
<15707=15709,15708
<15709=15710
<15710=15712,15711
<15713=15714
<15714=15716,15715
<15716=15718,15717
<15719=15739,15730,15720
<15720=15721
<15721=15722
<15722=15726,15723
<15723=15724
<15724=15725
<15726=15727
<15727=15729,15728
<15730=15731
<15731=15735,15732
<15732=15733
<15733=15734
<15735=15736
<15736=15738,15737
<15739=15740
<15740=15742,15741
<15743=15744
<15744=15751,15745
<15745=15747,15746
<15747=15748
<15748=15750,15749
<15751=15753,15752
<15754=15755
<15755=15762,15756
<15756=15758,15757
<15758=15759
<15759=15761,15760
<15763=15764
<15764=15766,15765
<15779=15782,15781,15780
<15782=15790,15783
<15783=15784
<15784=15788,15785
<15785=15786
<15786=15787
<15788=15789
<15790=15791
<15791=15795,15792
<15792=15793
<15793=15794
<15795=15796
<15802=15805,15804,15803
<15805=15813,15806
<15806=15807
<15807=15811,15808
<15808=15809
<15809=15810
<15811=15812
<15813=15814
<15814=15818,15815
<15815=15816
<15816=15817
<15818=15819
<15825=15828,15827,15826
<15828=15836,15829
<15829=15830
<15830=15834,15831
<15831=15832
<15832=15833
<15834=15835
<15836=15837
<15837=15841,15838
<15838=15839
<15839=15840
<15841=15842
<15848=15851,15850,15849
<15851=15859,15852
<15852=15853
<15853=15857,15854
<15854=15855
<15855=15856
<15857=15858
<15859=15860
<15860=15864,15861
<15861=15862
<15862=15863
<15864=15865
<15871=15874,15873,15872
<15874=15882,15875
<15875=15876
<15876=15880,15877
<15877=15878
<15878=15879
<15880=15881
<15882=15883
<15883=15887,15884
<15884=15885
<15885=15886
<15887=15888
<15894=15897,15896,15895
<15897=15905,15898
<15898=15899
<15899=15903,15900
<15900=15901
<15901=15902
<15903=15904
<15905=15906
<15906=15910,15907
<15907=15908
<15908=15909
<15910=15911
<15917=15920,15919,15918
<15920=16144,16132,16120,16108,16096,16084,16072,16060,16048,16036,16024,16012,16000,15988,15976,15964,15952,15940,15928,15921
<15921=15922
<15922=15926,15923
<15923=15924
<15924=15925
<15926=15927
<15928=15929
<15929=15931,15930
<15931=15933,15932
<15933=15935,15934
<15935=15937,15936
<15937=15939,15938
<15940=15941
<15941=15943,15942
<15943=15945,15944
<15945=15947,15946
<15947=15949,15948
<15949=15951,15950
<15952=15953
<15953=15955,15954
<15955=15957,15956
<15957=15959,15958
<15959=15961,15960
<15961=15963,15962
<15964=15965
<15965=15967,15966
<15967=15969,15968
<15969=15971,15970
<15971=15973,15972
<15973=15975,15974
<15976=15977
<15977=15979,15978
<15979=15981,15980
<15981=15983,15982
<15983=15985,15984
<15985=15987,15986
<15988=15989
<15989=15991,15990
<15991=15993,15992
<15993=15995,15994
<15995=15997,15996
<15997=15999,15998
<16000=16001
<16001=16003,16002
<16003=16005,16004
<16005=16007,16006
<16007=16009,16008
<16009=16011,16010
<16012=16013
<16013=16015,16014
<16015=16017,16016
<16017=16019,16018
<16019=16021,16020
<16021=16023,16022
<16024=16025
<16025=16027,16026
<16027=16029,16028
<16029=16031,16030
<16031=16033,16032
<16033=16035,16034
<16036=16037
<16037=16039,16038
<16039=16041,16040
<16041=16043,16042
<16043=16045,16044
<16045=16047,16046
<16048=16049
<16049=16051,16050
<16051=16053,16052
<16053=16055,16054
<16055=16057,16056
<16057=16059,16058
<16060=16061
<16061=16063,16062
<16063=16065,16064
<16065=16067,16066
<16067=16069,16068
<16069=16071,16070
<16072=16073
<16073=16075,16074
<16075=16077,16076
<16077=16079,16078
<16079=16081,16080
<16081=16083,16082
<16084=16085
<16085=16087,16086
<16087=16089,16088
<16089=16091,16090
<16091=16093,16092
<16093=16095,16094
<16096=16097
<16097=16099,16098
<16099=16101,16100
<16101=16103,16102
<16103=16105,16104
<16105=16107,16106
<16108=16109
<16109=16111,16110
<16111=16113,16112
<16113=16115,16114
<16115=16117,16116
<16117=16119,16118
<16120=16121
<16121=16123,16122
<16123=16125,16124
<16125=16127,16126
<16127=16129,16128
<16129=16131,16130
<16132=16133
<16133=16135,16134
<16135=16137,16136
<16137=16139,16138
<16139=16141,16140
<16141=16143,16142
<16144=16213,16209,16206,16145
<16145=16194,16182,16170,16158,16146
<16146=16147
<16147=16149,16148
<16149=16151,16150
<16151=16153,16152
<16153=16155,16154
<16155=16157,16156
<16158=16159
<16159=16161,16160
<16161=16163,16162
<16163=16165,16164
<16165=16167,16166
<16167=16169,16168
<16170=16171
<16171=16173,16172
<16173=16175,16174
<16175=16177,16176
<16177=16179,16178
<16179=16181,16180
<16182=16183
<16183=16185,16184
<16185=16187,16186
<16187=16189,16188
<16189=16191,16190
<16191=16193,16192
<16194=16195
<16195=16197,16196
<16197=16199,16198
<16199=16201,16200
<16201=16203,16202
<16203=16205,16204
<16206=16208,16207
<16209=16210
<16210=16212,16211
<16213=16214
<16214=16215
<16215=16220,16219,16216
<16216=16218,16217
<16269=16272,16271,16270
<16272=16496,16484,16472,16460,16448,16436,16424,16412,16400,16388,16376,16364,16352,16340,16328,16316,16304,16292,16280,16273
<16273=16274
<16274=16278,16275
<16275=16276
<16276=16277
<16278=16279
<16280=16281
<16281=16283,16282
<16283=16285,16284
<16285=16287,16286
<16287=16289,16288
<16289=16291,16290
<16292=16293
<16293=16295,16294
<16295=16297,16296
<16297=16299,16298
<16299=16301,16300
<16301=16303,16302
<16304=16305
<16305=16307,16306
<16307=16309,16308
<16309=16311,16310
<16311=16313,16312
<16313=16315,16314
<16316=16317
<16317=16319,16318
<16319=16321,16320
<16321=16323,16322
<16323=16325,16324
<16325=16327,16326
<16328=16329
<16329=16331,16330
<16331=16333,16332
<16333=16335,16334
<16335=16337,16336
<16337=16339,16338
<16340=16341
<16341=16343,16342
<16343=16345,16344
<16345=16347,16346
<16347=16349,16348
<16349=16351,16350
<16352=16353
<16353=16355,16354
<16355=16357,16356
<16357=16359,16358
<16359=16361,16360
<16361=16363,16362
<16364=16365
<16365=16367,16366
<16367=16369,16368
<16369=16371,16370
<16371=16373,16372
<16373=16375,16374
<16376=16377
<16377=16379,16378
<16379=16381,16380
<16381=16383,16382
<16383=16385,16384
<16385=16387,16386
<16388=16389
<16389=16391,16390
<16391=16393,16392
<16393=16395,16394
<16395=16397,16396
<16397=16399,16398
<16400=16401
<16401=16403,16402
<16403=16405,16404
<16405=16407,16406
<16407=16409,16408
<16409=16411,16410
<16412=16413
<16413=16415,16414
<16415=16417,16416
<16417=16419,16418
<16419=16421,16420
<16421=16423,16422
<16424=16425
<16425=16427,16426
<16427=16429,16428
<16429=16431,16430
<16431=16433,16432
<16433=16435,16434
<16436=16437
<16437=16439,16438
<16439=16441,16440
<16441=16443,16442
<16443=16445,16444
<16445=16447,16446
<16448=16449
<16449=16451,16450
<16451=16453,16452
<16453=16455,16454
<16455=16457,16456
<16457=16459,16458
<16460=16461
<16461=16463,16462
<16463=16465,16464
<16465=16467,16466
<16467=16469,16468
<16469=16471,16470
<16472=16473
<16473=16475,16474
<16475=16477,16476
<16477=16479,16478
<16479=16481,16480
<16481=16483,16482
<16484=16485
<16485=16487,16486
<16487=16489,16488
<16489=16491,16490
<16491=16493,16492
<16493=16495,16494
<16496=16565,16561,16558,16497
<16497=16546,16534,16522,16510,16498
<16498=16499
<16499=16501,16500
<16501=16503,16502
<16503=16505,16504
<16505=16507,16506
<16507=16509,16508
<16510=16511
<16511=16513,16512
<16513=16515,16514
<16515=16517,16516
<16517=16519,16518
<16519=16521,16520
<16522=16523
<16523=16525,16524
<16525=16527,16526
<16527=16529,16528
<16529=16531,16530
<16531=16533,16532
<16534=16535
<16535=16537,16536
<16537=16539,16538
<16539=16541,16540
<16541=16543,16542
<16543=16545,16544
<16546=16547
<16547=16549,16548
<16549=16551,16550
<16551=16553,16552
<16553=16555,16554
<16555=16557,16556
<16558=16560,16559
<16561=16562
<16562=16564,16563
<16565=16566
<16566=16567
<16567=16572,16571,16568
<16568=16570,16569
<16621=16624,16623,16622
<16624=16884,16872,16860,16848,16836,16824,16812,16800,16788,16776,16764,16752,16740,16728,16716,16704,16692,16680,16668,16656,16644,16632,16625
<16625=16626
<16626=16630,16627
<16627=16628
<16628=16629
<16630=16631
<16632=16633
<16633=16635,16634
<16635=16637,16636
<16637=16639,16638
<16639=16641,16640
<16641=16643,16642
<16644=16645
<16645=16647,16646
<16647=16649,16648
<16649=16651,16650
<16651=16653,16652
<16653=16655,16654
<16656=16657
<16657=16659,16658
<16659=16661,16660
<16661=16663,16662
<16663=16665,16664
<16665=16667,16666
<16668=16669
<16669=16671,16670
<16671=16673,16672
<16673=16675,16674
<16675=16677,16676
<16677=16679,16678
<16680=16681
<16681=16683,16682
<16683=16685,16684
<16685=16687,16686
<16687=16689,16688
<16689=16691,16690
<16692=16693
<16693=16695,16694
<16695=16697,16696
<16697=16699,16698
<16699=16701,16700
<16701=16703,16702
<16704=16705
<16705=16707,16706
<16707=16709,16708
<16709=16711,16710
<16711=16713,16712
<16713=16715,16714
<16716=16717
<16717=16719,16718
<16719=16721,16720
<16721=16723,16722
<16723=16725,16724
<16725=16727,16726
<16728=16729
<16729=16731,16730
<16731=16733,16732
<16733=16735,16734
<16735=16737,16736
<16737=16739,16738
<16740=16741
<16741=16743,16742
<16743=16745,16744
<16745=16747,16746
<16747=16749,16748
<16749=16751,16750
<16752=16753
<16753=16755,16754
<16755=16757,16756
<16757=16759,16758
<16759=16761,16760
<16761=16763,16762
<16764=16765
<16765=16767,16766
<16767=16769,16768
<16769=16771,16770
<16771=16773,16772
<16773=16775,16774
<16776=16777
<16777=16779,16778
<16779=16781,16780
<16781=16783,16782
<16783=16785,16784
<16785=16787,16786
<16788=16789
<16789=16791,16790
<16791=16793,16792
<16793=16795,16794
<16795=16797,16796
<16797=16799,16798
<16800=16801
<16801=16803,16802
<16803=16805,16804
<16805=16807,16806
<16807=16809,16808
<16809=16811,16810
<16812=16813
<16813=16815,16814
<16815=16817,16816
<16817=16819,16818
<16819=16821,16820
<16821=16823,16822
<16824=16825
<16825=16827,16826
<16827=16829,16828
<16829=16831,16830
<16831=16833,16832
<16833=16835,16834
<16836=16837
<16837=16839,16838
<16839=16841,16840
<16841=16843,16842
<16843=16845,16844
<16845=16847,16846
<16848=16849
<16849=16851,16850
<16851=16853,16852
<16853=16855,16854
<16855=16857,16856
<16857=16859,16858
<16860=16861
<16861=16863,16862
<16863=16865,16864
<16865=16867,16866
<16867=16869,16868
<16869=16871,16870
<16872=16873
<16873=16875,16874
<16875=16877,16876
<16877=16879,16878
<16879=16881,16880
<16881=16883,16882
<16884=16941,16937,16934,16885
<16885=16922,16910,16898,16886
<16886=16887
<16887=16889,16888
<16889=16891,16890
<16891=16893,16892
<16893=16895,16894
<16895=16897,16896
<16898=16899
<16899=16901,16900
<16901=16903,16902
<16903=16905,16904
<16905=16907,16906
<16907=16909,16908
<16910=16911
<16911=16913,16912
<16913=16915,16914
<16915=16917,16916
<16917=16919,16918
<16919=16921,16920
<16922=16923
<16923=16925,16924
<16925=16927,16926
<16927=16929,16928
<16929=16931,16930
<16931=16933,16932
<16934=16936,16935
<16937=16938
<16938=16940,16939
<16941=16942
<16942=16943
<16943=16948,16947,16944
<16944=16946,16945
<16997=17000,16999,16998
<17000=17042,17035,17025,17001
<17001=17023,17002
<17002=17003
<17003=17019,17004
<17004=17017,17005
<17005=17006
<17006=17009,17008,17007
<17009=17010
<17010=17016,17011
<17011=17015,17012
<17012=17014,17013
<17017=17018
<17019=17020
<17020=17022,17021
<17023=17024
<17025=17026
<17026=17034,17033,17027
<17027=17032,17028
<17028=17030,17029
<17030=17031
<17035=17036
<17036=17038,17037
<17038=17039
<17039=17041,17040
<17042=17043
<17043=17045,17044
<17045=17047,17046
<17059=17062,17061,17060
<17062=17153,17144,17140,17077,17068,17063
<17063=17064
<17064=17066,17065
<17066=17067
<17068=17069
<17069=17075,17070
<17070=17071
<17071=17072
<17072=17074,17073
<17075=17076
<17077=17131,17078
<17078=17079
<17079=17113,17088,17080
<17080=17081
<17081=17082
<17082=17086,17083
<17083=17084
<17084=17085
<17086=17087
<17088=17096,17089
<17089=17090
<17090=17094,17091
<17091=17092
<17092=17093
<17094=17095
<17096=17097
<17097=17111,17098
<17098=17107,17103,17099
<17099=17100
<17100=17102,17101
<17103=17104
<17104=17106,17105
<17107=17108
<17108=17110,17109
<17111=17112
<17113=17114
<17114=17126,17115
<17115=17121,17116
<17116=17118,17117
<17118=17120,17119
<17121=17123,17122
<17123=17125,17124
<17126=17128,17127
<17128=17130,17129
<17131=17132
<17132=17134,17133
<17134=17136,17135
<17136=17137
<17137=17139,17138
<17140=17141
<17141=17143,17142
<17144=17145
<17145=17151,17146
<17146=17147
<17147=17148
<17148=17150,17149
<17151=17152
<17153=17154
<17154=17158,17155
<17155=17156
<17156=17157
<17158=17159
<17171=17174,17173,17172
<17174=17175
<17175=17286,17176
<17176=17270,17177
<17177=17260,17226,17178
<17178=17179
<17179=17180
<17180=17214,17198,17181
<17181=17182
<17182=17183
<17183=17189,17184
<17184=17187,17185
<17185=17186
<17187=17188
<17189=17190
<17190=17192,17191
<17192=17194,17193
<17194=17195
<17195=17197,17196
<17198=17199
<17199=17205,17200
<17200=17203,17201
<17201=17202
<17203=17204
<17205=17206
<17206=17208,17207
<17208=17210,17209
<17210=17211
<17211=17213,17212
<17214=17215
<17215=17219,17216
<17216=17217
<17217=17218
<17219=17220
<17220=17222,17221
<17222=17224,17223
<17224=17225
<17226=17248,17232,17227
<17227=17228
<17228=17230,17229
<17230=17231
<17232=17233
<17233=17239,17234
<17234=17237,17235
<17235=17236
<17237=17238
<17239=17240
<17240=17242,17241
<17242=17244,17243
<17244=17245
<17245=17247,17246
<17248=17249
<17249=17253,17250
<17250=17251
<17251=17252
<17253=17254
<17254=17256,17255
<17256=17258,17257
<17258=17259
<17260=17261
<17261=17263,17262
<17263=17264
<17264=17266,17265
<17266=17268,17267
<17268=17269
<17270=17276,17271
<17271=17272
<17272=17274,17273
<17274=17275
<17276=17277
<17277=17279,17278
<17279=17280
<17280=17282,17281
<17282=17284,17283
<17284=17285
<17286=17287
<17287=17289,17288
<17289=17290
<17306=17309,17308,17307
<17309=17310
<17310=17321,17311
<17311=17312
<17312=17314,17313
<17314=17315
<17315=17317,17316
<17317=17319,17318
<17319=17320
<17321=17322
<17322=17324,17323
<17324=17325
<17330=17333,17332,17331
<17333=17334
<17334=17345,17335
<17335=17336
<17336=17338,17337
<17338=17339
<17339=17341,17340
<17341=17343,17342
<17343=17344
<17345=17346
<17346=17348,17347
<17348=17349
<17354=17357,17356,17355
<17357=17358
<17358=17359
<17359=17361,17360
<17361=17362
<17366=17369,17368,17367
<17369=17370
<17370=17371
<17371=17373,17372
<17373=17374
<17378=17384,17383,17379
<17379=17380
<17380=17382,17381
<17384=17385
<17385=17386
<17386=17393,17387
<17387=17388
<17388=17389
<17389=17391,17390
<17391=17392
<17393=17394
<17394=17396,17395
<17402=17408,17407,17403
<17403=17404
<17404=17406,17405
<17408=17409
<17409=17410
<17410=17417,17411
<17411=17412
<17412=17413
<17413=17415,17414
<17415=17416
<17417=17418
<17418=17420,17419
<17426=17429,17428,17427
<17429=17452,17435,17430
<17430=17431
<17431=17433,17432
<17433=17434
<17435=17444,17436
<17436=17437
<17437=17439,17438
<17439=17441,17440
<17441=17443,17442
<17444=17445
<17445=17447,17446
<17447=17449,17448
<17449=17451,17450
<17452=17453
<17453=17455,17454
<17455=17457,17456
<17457=17459,17458
<17466=17469,17468,17467
<17473=17476,17475,17474
<17476=17499,17482,17477
<17477=17478
<17478=17480,17479
<17480=17481
<17482=17491,17483
<17483=17484
<17484=17486,17485
<17486=17488,17487
<17488=17490,17489
<17491=17492
<17492=17494,17493
<17494=17496,17495
<17496=17498,17497
<17499=17500
<17500=17502,17501
<17502=17504,17503
<17504=17506,17505
<17513=17516,17515,17514
<17516=17517
<17517=17518
<17518=17529,17519
<17519=17520
<17520=17521
<17521=17527,17522
<17522=17523
<17523=17524
<17524=17526,17525
<17527=17528
<17529=17530
<17537=17540,17539,17538
<17540=17541
<17541=17542
<17542=17555,17543
<17543=17544
<17544=17545
<17545=17554,17546
<17546=17552,17547
<17547=17548
<17548=17549
<17549=17551,17550
<17552=17553
<17555=17556
<17563=17566,17565,17564
<17566=17567
<17567=17568
<17568=17585,17569
<17569=17583,17570
<17570=17571
<17571=17582,17572
<17572=17580,17573
<17573=17574
<17574=17575
<17575=17577,17576
<17577=17579,17578
<17580=17581
<17583=17584
<17585=17586
<17594=17597,17596,17595
<17597=17598
<17598=17599
<17599=17614,17600
<17600=17612,17601
<17601=17602
<17602=17610,17603
<17603=17604
<17604=17605
<17605=17607,17606
<17607=17609,17608
<17610=17611
<17612=17613
<17614=17615
<17623=17626,17625,17624
<17626=17627
<17627=17628
<17628=17645,17629
<17629=17632,17630
<17630=17631
<17632=17633
<17633=17644,17634
<17634=17642,17635
<17635=17636
<17636=17637
<17637=17639,17638
<17639=17641,17640
<17642=17643
<17645=17646
<17654=17657,17656,17655
<17657=17658
<17658=17659
<17659=17674,17660
<17660=17663,17661
<17661=17662
<17663=17664
<17664=17672,17665
<17665=17666
<17666=17667
<17667=17669,17668
<17669=17671,17670
<17672=17673
<17674=17675
<17683=17686,17685,17684
<17686=17687
<17687=17688
<17688=17705,17689
<17689=17703,17690
<17690=17691
<17691=17702,17692
<17692=17700,17693
<17693=17694
<17694=17695
<17695=17697,17696
<17697=17699,17698
<17700=17701
<17703=17704
<17705=17706
<17714=17717,17716,17715
<17717=17718
<17718=17719
<17719=17736,17720
<17720=17723,17721
<17721=17722
<17723=17724
<17724=17735,17725
<17725=17733,17726
<17726=17727
<17727=17728
<17728=17730,17729
<17730=17732,17731
<17733=17734
<17736=17737
<17745=17748,17747,17746
<17748=17749
<17749=17750
<17750=17765,17751
<17751=17754,17752
<17752=17753
<17754=17755
<17755=17763,17756
<17756=17757
<17757=17758
<17758=17760,17759
<17760=17762,17761
<17763=17764
<17765=17766
<17774=17777,17776,17775
<17777=17778
<17778=17779
<17779=17794,17780
<17780=17792,17781
<17781=17782
<17782=17790,17783
<17783=17784
<17784=17785
<17785=17787,17786
<17787=17789,17788
<17790=17791
<17792=17793
<17794=17795
<17803=17806,17805,17804
<17806=17807
<17807=18003,17808
<17808=17993,17984,17979,17978,17977,17976,17975,17965,17952,17939,17926,17913,17900,17887,17874,17870,17822,17809
<17809=17810
<17810=17820,17811
<17811=17818,17816,17812
<17812=17813
<17813=17815,17814
<17816=17817
<17818=17819
<17820=17821
<17822=17866,17823
<17823=17865,17861,17860,17859,17855,17854,17853,17849,17848,17847,17843,17842,17841,17837,17836,17835,17831,17830,17829,17825,17824
<17825=17826
<17826=17828,17827
<17831=17832
<17832=17834,17833
<17837=17838
<17838=17840,17839
<17843=17844
<17844=17846,17845
<17849=17850
<17850=17852,17851
<17855=17856
<17856=17858,17857
<17861=17862
<17862=17864,17863
<17866=17867
<17867=17869,17868
<17870=17871
<17871=17873,17872
<17874=17875
<17875=17885,17876
<17876=17883,17881,17877
<17877=17878
<17878=17880,17879
<17881=17882
<17883=17884
<17885=17886
<17887=17888
<17888=17898,17889
<17889=17896,17894,17890
<17890=17891
<17891=17893,17892
<17894=17895
<17896=17897
<17898=17899
<17900=17901
<17901=17911,17902
<17902=17909,17907,17903
<17903=17904
<17904=17906,17905
<17907=17908
<17909=17910
<17911=17912
<17913=17914
<17914=17924,17915
<17915=17922,17920,17916
<17916=17917
<17917=17919,17918
<17920=17921
<17922=17923
<17924=17925
<17926=17927
<17927=17937,17928
<17928=17935,17933,17929
<17929=17930
<17930=17932,17931
<17933=17934
<17935=17936
<17937=17938
<17939=17940
<17940=17950,17941
<17941=17948,17946,17942
<17942=17943
<17943=17945,17944
<17946=17947
<17948=17949
<17950=17951
<17952=17953
<17953=17963,17954
<17954=17961,17959,17955
<17955=17956
<17956=17958,17957
<17959=17960
<17961=17962
<17963=17964
<17965=17966
<17966=17973,17967
<17967=17968
<17968=17969
<17969=17971,17970
<17971=17972
<17973=17974
<17979=17980
<17980=17982,17981
<17982=17983
<17984=17985
<17985=17991,17986
<17986=17987
<17987=17988
<17988=17990,17989
<17991=17992
<17993=17994
<17994=18000,17995
<17995=17997,17996
<17997=17999,17998
<18000=18002,18001
<18003=18004
<18004=18006,18005
<18006=18008,18007
<18029=18032,18031,18030
<18032=18033
<18033=18229,18034
<18034=18219,18210,18205,18204,18203,18202,18201,18191,18178,18165,18152,18139,18126,18113,18100,18096,18048,18035
<18035=18036
<18036=18046,18037
<18037=18044,18042,18038
<18038=18039
<18039=18041,18040
<18042=18043
<18044=18045
<18046=18047
<18048=18092,18049
<18049=18091,18087,18086,18085,18081,18080,18079,18075,18074,18073,18069,18068,18067,18063,18062,18061,18057,18056,18055,18051,18050
<18051=18052
<18052=18054,18053
<18057=18058
<18058=18060,18059
<18063=18064
<18064=18066,18065
<18069=18070
<18070=18072,18071
<18075=18076
<18076=18078,18077
<18081=18082
<18082=18084,18083
<18087=18088
<18088=18090,18089
<18092=18093
<18093=18095,18094
<18096=18097
<18097=18099,18098
<18100=18101
<18101=18111,18102
<18102=18109,18107,18103
<18103=18104
<18104=18106,18105
<18107=18108
<18109=18110
<18111=18112
<18113=18114
<18114=18124,18115
<18115=18122,18120,18116
<18116=18117
<18117=18119,18118
<18120=18121
<18122=18123
<18124=18125
<18126=18127
<18127=18137,18128
<18128=18135,18133,18129
<18129=18130
<18130=18132,18131
<18133=18134
<18135=18136
<18137=18138
<18139=18140
<18140=18150,18141
<18141=18148,18146,18142
<18142=18143
<18143=18145,18144
<18146=18147
<18148=18149
<18150=18151
<18152=18153
<18153=18163,18154
<18154=18161,18159,18155
<18155=18156
<18156=18158,18157
<18159=18160
<18161=18162
<18163=18164
<18165=18166
<18166=18176,18167
<18167=18174,18172,18168
<18168=18169
<18169=18171,18170
<18172=18173
<18174=18175
<18176=18177
<18178=18179
<18179=18189,18180
<18180=18187,18185,18181
<18181=18182
<18182=18184,18183
<18185=18186
<18187=18188
<18189=18190
<18191=18192
<18192=18199,18193
<18193=18194
<18194=18195
<18195=18197,18196
<18197=18198
<18199=18200
<18205=18206
<18206=18208,18207
<18208=18209
<18210=18211
<18211=18217,18212
<18212=18213
<18213=18214
<18214=18216,18215
<18217=18218
<18219=18220
<18220=18226,18221
<18221=18223,18222
<18223=18225,18224
<18226=18228,18227
<18229=18230
<18230=18232,18231
<18232=18234,18233
<18255=18258,18257,18256
<18258=18327,18323,18319,18309,18299,18268,18259
<18259=18260
<18260=18266,18261
<18261=18264,18262
<18262=18263
<18264=18265
<18266=18267
<18268=18269
<18269=18295,18270
<18270=18293,18289,18283,18279,18275,18273,18271
<18271=18272
<18273=18274
<18275=18276
<18276=18278,18277
<18279=18280
<18280=18282,18281
<18283=18284
<18284=18286,18285
<18286=18288,18287
<18289=18290
<18290=18292,18291
<18293=18294
<18295=18296
<18296=18298,18297
<18299=18300
<18300=18308,18301
<18301=18304,18303,18302
<18304=18305
<18305=18307,18306
<18309=18310
<18310=18318,18311
<18311=18314,18313,18312
<18314=18315
<18315=18317,18316
<18319=18320
<18320=18322,18321
<18323=18324
<18324=18326,18325
<18327=18328
<18328=18330,18329
<18346=18349,18348,18347
<18349=18350
<18350=18351
<18351=18353,18352
<18353=18354
<18358=18361,18360,18359
<18361=18362
<18362=18363
<18363=18365,18364
<18365=18366
<18370=18373,18372,18371
<18373=18374
<18374=18416,18395,18375
<18375=18376
<18376=18391,18377
<18377=18378
<18378=18382,18379
<18379=18380
<18380=18381
<18382=18383
<18383=18385,18384
<18385=18387,18386
<18387=18388
<18388=18390,18389
<18391=18392
<18392=18394,18393
<18395=18412,18396
<18396=18397
<18397=18403,18398
<18398=18401,18399
<18399=18400
<18401=18402
<18403=18404
<18404=18406,18405
<18406=18408,18407
<18408=18409
<18409=18411,18410
<18412=18413
<18413=18415,18414
<18416=18417
<18417=18419,18418
<18429=18432,18431,18430
<18432=18433
<18433=18475,18454,18434
<18434=18435
<18435=18450,18436
<18436=18437
<18437=18441,18438
<18438=18439
<18439=18440
<18441=18442
<18442=18444,18443
<18444=18446,18445
<18446=18447
<18447=18449,18448
<18450=18451
<18451=18453,18452
<18454=18471,18455
<18455=18456
<18456=18462,18457
<18457=18460,18458
<18458=18459
<18460=18461
<18462=18463
<18463=18465,18464
<18465=18467,18466
<18467=18468
<18468=18470,18469
<18471=18472
<18472=18474,18473
<18475=18476
<18476=18478,18477
<18488=18491,18490,18489
<18491=18492
<18492=18534,18513,18493
<18493=18494
<18494=18509,18495
<18495=18496
<18496=18500,18497
<18497=18498
<18498=18499
<18500=18501
<18501=18503,18502
<18503=18505,18504
<18505=18506
<18506=18508,18507
<18509=18510
<18510=18512,18511
<18513=18530,18514
<18514=18515
<18515=18521,18516
<18516=18519,18517
<18517=18518
<18519=18520
<18521=18522
<18522=18524,18523
<18524=18526,18525
<18526=18527
<18527=18529,18528
<18530=18531
<18531=18533,18532
<18534=18535
<18535=18537,18536
<18547=18550,18549,18548
<18550=18551
<18551=18677,18552
<18552=18661,18621,18553
<18553=18611,18582,18554
<18554=18555
<18555=18570,18556
<18556=18557
<18557=18561,18558
<18558=18559
<18559=18560
<18561=18562
<18562=18564,18563
<18564=18566,18565
<18566=18567
<18567=18569,18568
<18570=18571
<18571=18575,18572
<18572=18573
<18573=18574
<18575=18576
<18576=18578,18577
<18578=18580,18579
<18580=18581
<18582=18599,18583
<18583=18584
<18584=18590,18585
<18585=18588,18586
<18586=18587
<18588=18589
<18590=18591
<18591=18593,18592
<18593=18595,18594
<18595=18596
<18596=18598,18597
<18599=18600
<18600=18604,18601
<18601=18602
<18602=18603
<18604=18605
<18605=18607,18606
<18607=18609,18608
<18609=18610
<18611=18612
<18612=18614,18613
<18614=18615
<18615=18617,18616
<18617=18619,18618
<18619=18620
<18621=18651,18622
<18622=18639,18623
<18623=18624
<18624=18630,18625
<18625=18628,18626
<18626=18627
<18628=18629
<18630=18631
<18631=18633,18632
<18633=18635,18634
<18635=18636
<18636=18638,18637
<18639=18640
<18640=18644,18641
<18641=18642
<18642=18643
<18644=18645
<18645=18647,18646
<18647=18649,18648
<18649=18650
<18651=18652
<18652=18654,18653
<18654=18655
<18655=18657,18656
<18657=18659,18658
<18659=18660
<18661=18667,18662
<18662=18663
<18663=18665,18664
<18665=18666
<18667=18668
<18668=18670,18669
<18670=18671
<18671=18673,18672
<18673=18675,18674
<18675=18676
<18677=18678
<18678=18680,18679
<18680=18681
<18696=18699,18698,18697
<18703=18706,18705,18704
<18706=18707
<18707=18708
<18708=18710,18709
<18710=18711
<18715=18721,18720,18716
<18716=18717
<18717=18719,18718
<18721=18722
<18722=18723
<18723=18727,18724
<18724=18725
<18725=18726
<18727=18728
<18728=18730,18729
<18736=18739,18738,18737
<18739=18772,18759,18752,18745,18740
<18740=18741
<18741=18743,18742
<18743=18744
<18745=18746
<18746=18750,18747
<18747=18748
<18748=18749
<18750=18751
<18752=18753
<18753=18755,18754
<18755=18756
<18756=18758,18757
<18759=18766,18760
<18760=18761
<18761=18763,18762
<18763=18765,18764
<18766=18767
<18767=18769,18768
<18769=18771,18770
<18772=18773
<18773=18775,18774
<18775=18777,18776
<18784=18787,18786,18785
<18787=18820,18807,18800,18793,18788
<18788=18789
<18789=18791,18790
<18791=18792
<18793=18794
<18794=18798,18795
<18795=18796
<18796=18797
<18798=18799
<18800=18801
<18801=18803,18802
<18803=18804
<18804=18806,18805
<18807=18814,18808
<18808=18809
<18809=18811,18810
<18811=18813,18812
<18814=18815
<18815=18817,18816
<18817=18819,18818
<18820=18821
<18821=18823,18822
<18823=18825,18824
<18832=18835,18834,18833
<18835=18909,18899,18877,18855,18848,18843,18836
<18836=18837
<18837=18841,18838
<18838=18839
<18839=18840
<18841=18842
<18843=18844
<18844=18846,18845
<18846=18847
<18848=18849
<18849=18851,18850
<18851=18852
<18852=18854,18853
<18855=18856
<18856=18868,18857
<18857=18866,18858
<18858=18859
<18859=18862,18861,18860
<18862=18863
<18863=18865,18864
<18866=18867
<18868=18869
<18869=18871,18870
<18871=18873,18872
<18873=18874
<18874=18876,18875
<18877=18897,18878
<18878=18879
<18879=18893,18880
<18880=18891,18881
<18881=18882
<18882=18885,18884,18883
<18885=18886
<18886=18890,18887
<18887=18889,18888
<18891=18892
<18893=18894
<18894=18896,18895
<18897=18898
<18899=18900
<18900=18908,18907,18901
<18901=18906,18902
<18902=18904,18903
<18904=18905
<18909=18910
<18910=18912,18911
<18912=18914,18913
<18931=18934,18933,18932
<18934=18935
<18935=18936
<18936=18940,18937
<18937=18938
<18938=18939
<18940=18941
<18946=18952,18951,18947
<18947=18948
<18948=18950,18949
<18952=18953
<18953=18954
<18954=18962,18955
<18955=18956
<18956=18957
<18957=18961,18958
<18958=18960,18959
<18962=18963
<18963=18965,18964
<18973=18976,18975,18974
<18976=19042,19033,19029,19019,19009,19002,18991,18982,18977
<18977=18978
<18978=18980,18979
<18980=18981
<18982=18983
<18983=18989,18984
<18984=18985
<18985=18986
<18986=18988,18987
<18989=18990
<18991=18992
<18992=19000,18993
<18993=18994
<18994=18995
<18995=18999,18996
<18996=18998,18997
<19000=19001
<19002=19003
<19003=19007,19004
<19004=19005
<19005=19006
<19007=19008
<19009=19010
<19010=19016,19011
<19011=19015,19012
<19012=19014,19013
<19016=19018,19017
<19019=19020
<19020=19026,19021
<19021=19023,19022
<19023=19025,19024
<19026=19028,19027
<19029=19030
<19030=19032,19031
<19033=19034
<19034=19040,19035
<19035=19036
<19036=19037
<19037=19039,19038
<19040=19041
<19042=19043
<19043=19047,19044
<19044=19045
<19045=19046
<19047=19048
<19060=19063,19062,19061
<19063=19100,19090,19082,19075,19064
<19064=19065
<19065=19073,19066
<19066=19067
<19067=19068
<19068=19072,19069
<19069=19071,19070
<19073=19074
<19075=19076
<19076=19080,19077
<19077=19078
<19078=19079
<19080=19081
<19082=19083
<19083=19087,19084
<19084=19086,19085
<19087=19089,19088
<19090=19091
<19091=19097,19092
<19092=19094,19093
<19094=19096,19095
<19097=19099,19098
<19100=19101
<19101=19103,19102
<19114=19117,19116,19115
<19121=19124,19123,19122
<19128=19131,19130,19129
<19131=19132
<19132=19151,19145,19140,19133
<19133=19134
<19134=19138,19135
<19135=19136
<19136=19137
<19138=19139
<19140=19144,19141
<19141=19143,19142
<19145=19146
<19146=19150,19147
<19147=19149,19148
<19151=19152
<19152=19153
<19153=19160,19159,19154
<19154=19158,19155
<19155=19157,19156
<19170=19173,19172,19171
<19173=19174
<19174=19182,19175
<19175=19176
<19176=19178,19177
<19178=19179
<19179=19181,19180
<19182=19183
<19183=19185,19184
<19185=19186
<19186=19188,19187
<19198=19201,19200,19199
<19201=19242,19241,19240,19239,19238,19237,19236,19235,19202
<19202=19203
<19203=19231,19204
<19204=19227,19221,19213,19206,19205
<19206=19207
<19207=19211,19208
<19208=19209
<19209=19210
<19211=19212
<19213=19214
<19214=19218,19215
<19215=19217,19216
<19218=19220,19219
<19221=19222
<19222=19226,19223
<19223=19225,19224
<19227=19228
<19228=19230,19229
<19231=19232
<19232=19234,19233
<19252=19255,19254,19253
<19255=19286,19277,19270,19261,19256
<19256=19257
<19257=19259,19258
<19259=19260
<19261=19262
<19262=19268,19263
<19263=19264
<19264=19265
<19265=19267,19266
<19268=19269
<19270=19271
<19271=19275,19272
<19272=19273
<19273=19274
<19275=19276
<19277=19278
<19278=19284,19279
<19279=19280
<19280=19281
<19281=19283,19282
<19284=19285
<19286=19287
<19287=19291,19288
<19288=19289
<19289=19290
<19291=19292
<19298=19301,19300,19299
<19301=19429,19425,19409,19400,19394,19388,19382,19376,19370,19364,19358,19354,19343,19302
<19302=19341,19303
<19303=19332,19325,19318,19304
<19304=19305
<19305=19316,19306
<19306=19307
<19307=19308
<19308=19312,19309
<19309=19310
<19310=19311
<19312=19313
<19313=19315,19314
<19316=19317
<19318=19319
<19319=19323,19320
<19320=19321
<19321=19322
<19323=19324
<19325=19326
<19326=19328,19327
<19328=19329
<19329=19331,19330
<19332=19333
<19333=19339,19334
<19334=19337,19335
<19335=19336
<19337=19338
<19339=19340
<19341=19342
<19343=19344
<19344=19353,19345
<19345=19351,19346
<19346=19347
<19347=19348
<19348=19350,19349
<19351=19352
<19354=19355
<19355=19357,19356
<19358=19359
<19359=19361,19360
<19361=19363,19362
<19364=19365
<19365=19367,19366
<19367=19369,19368
<19370=19371
<19371=19373,19372
<19373=19375,19374
<19376=19377
<19377=19379,19378
<19379=19381,19380
<19382=19383
<19383=19385,19384
<19385=19387,19386
<19388=19389
<19389=19391,19390
<19391=19393,19392
<19394=19395
<19395=19397,19396
<19397=19399,19398
<19400=19401
<19401=19406,19402
<19402=19404,19403
<19404=19405
<19406=19408,19407
<19409=19410
<19410=19424,19423,19411
<19411=19422,19412
<19412=19418,19413
<19413=19414
<19414=19415
<19415=19417,19416
<19418=19419
<19419=19421,19420
<19425=19426
<19426=19428,19427
<19429=19430
<19430=19432,19431
<19454=19457,19456,19455
<19457=19502,19492,19470,19463,19458
<19458=19459
<19459=19461,19460
<19461=19462
<19463=19464
<19464=19466,19465
<19466=19467
<19467=19469,19468
<19470=19490,19471
<19471=19472
<19472=19486,19473
<19473=19484,19474
<19474=19475
<19475=19478,19477,19476
<19478=19479
<19479=19483,19480
<19480=19482,19481
<19484=19485
<19486=19487
<19487=19489,19488
<19490=19491
<19492=19493
<19493=19501,19500,19494
<19494=19499,19495
<19495=19497,19496
<19497=19498
<19502=19503
<19503=19505,19504
<19505=19507,19506
<19519=19522,19521,19520
<19526=19529,19528,19527
<19533=19536,19535,19534
<19540=19543,19542,19541
<19547=19550,19549,19548
<19554=19557,19556,19555
<19561=19564,19563,19562
<19568=19571,19570,19569
<19575=19578,19577,19576
<19578=19609,19579
<19579=19600,19580
<19580=19581
<19581=19582
<19582=19598,19583
<19583=19584
<19584=19585
<19585=19589,19586
<19586=19587
<19587=19588
<19589=19590
<19590=19592,19591
<19592=19594,19593
<19594=19595
<19595=19597,19596
<19598=19599
<19600=19601
<19601=19603,19602
<19603=19605,19604
<19605=19606
<19606=19608,19607
<19609=19610
<19610=19625,19624,19611
<19611=19623,19612
<19612=19622,19613
<19613=19621,19614
<19614=19618,19615
<19615=19617,19616
<19618=19620,19619
<19634=19637,19636,19635
<19637=19668,19638
<19638=19659,19639
<19639=19640
<19640=19641
<19641=19657,19642
<19642=19643
<19643=19644
<19644=19648,19645
<19645=19646
<19646=19647
<19648=19649
<19649=19651,19650
<19651=19653,19652
<19653=19654
<19654=19656,19655
<19657=19658
<19659=19660
<19660=19662,19661
<19662=19664,19663
<19664=19665
<19665=19667,19666
<19668=19669
<19669=19684,19683,19670
<19670=19682,19671
<19671=19681,19672
<19672=19680,19673
<19673=19677,19674
<19674=19676,19675
<19677=19679,19678
<19693=19696,19695,19694
<19696=19738,19737,19736,19735,19734,19733,19732,19731,19730,19729,19728,19727,19726,19725,19724,19723,19722,19721,19720,19719,19718,19717,19716,19715,19714,19713,19712,19711,19710,19709,19708,19707,19706,19697
<19697=19698
<19698=19704,19699
<19699=19700
<19700=19701
<19701=19703,19702
<19704=19705
<19738=19742,19741,19739
<19739=19740
<19742=19743
<19743=19745,19744
<19745=19747,19746
<19747=19749,19748
<19749=19751,19750
<19761=19764,19763,19762
<19764=19765
<19765=19766
<19766=19776,19767
<19767=19774,19768
<19768=19769
<19769=19771,19770
<19771=19773,19772
<19774=19775
<19776=19777
<19784=19787,19786,19785
<19787=19788
<19788=19789
<19789=19799,19790
<19790=19797,19791
<19791=19792
<19792=19794,19793
<19794=19796,19795
<19797=19798
<19799=19800
<19807=19810,19809,19808
<19810=19811
<19811=19812
<19812=19822,19813
<19813=19820,19814
<19814=19815
<19815=19817,19816
<19817=19819,19818
<19820=19821
<19822=19823
<19830=19833,19832,19831
<19833=19834
<19834=19835
<19835=19845,19836
<19836=19843,19837
<19837=19838
<19838=19840,19839
<19840=19842,19841
<19843=19844
<19845=19846
<19853=19862,19861,19854
<19854=19858,19855
<19855=19857,19856
<19858=19860,19859
<19862=19863
<19863=20305,20118,19864
<19864=19865
<19865=20108,19987,19866
<19866=19867
<19867=19983,19877,19868
<19868=19869
<19869=19875,19870
<19870=19873,19871
<19871=19872
<19873=19874
<19875=19876
<19877=19979,19954,19878
<19878=19879
<19879=19950,19931,19880
<19880=19881
<19881=19927,19908,19882
<19882=19883
<19883=19890,19884
<19884=19885
<19885=19889,19886
<19886=19888,19887
<19890=19891
<19891=19907,19892
<19892=19895,19894,19893
<19895=19896
<19896=19898,19897
<19898=19900,19899
<19900=19901
<19901=19903,19902
<19903=19905,19904
<19905=19906
<19908=19909
<19909=19910
<19910=19926,19911
<19911=19914,19913,19912
<19914=19915
<19915=19917,19916
<19917=19919,19918
<19919=19920
<19920=19922,19921
<19922=19924,19923
<19924=19925
<19927=19928
<19928=19930,19929
<19931=19932
<19932=19933
<19933=19949,19934
<19934=19937,19936,19935
<19937=19938
<19938=19940,19939
<19940=19942,19941
<19942=19943
<19943=19945,19944
<19945=19947,19946
<19947=19948
<19950=19951
<19951=19953,19952
<19954=19961,19955
<19955=19956
<19956=19960,19957
<19957=19959,19958
<19961=19962
<19962=19978,19963
<19963=19966,19965,19964
<19966=19967
<19967=19969,19968
<19969=19971,19970
<19971=19972
<19972=19974,19973
<19974=19976,19975
<19976=19977
<19979=19980
<19980=19982,19981
<19983=19984
<19984=19986,19985
<19987=20092,20088,20074,20030,19995,19988
<19988=19989
<19989=19993,19990
<19990=19991
<19991=19992
<19993=19994
<19995=19996
<19996=20028,19997
<19997=20018,20008,19998
<19998=19999
<19999=20004,20001,20000
<20001=20003,20002
<20004=20005
<20005=20007,20006
<20008=20009
<20009=20014,20011,20010
<20011=20013,20012
<20014=20015
<20015=20017,20016
<20018=20019
<20019=20024,20021,20020
<20021=20023,20022
<20024=20025
<20025=20027,20026
<20028=20029
<20030=20070,20051,20031
<20031=20032
<20032=20045,20039,20033
<20033=20034
<20034=20036,20035
<20036=20038,20037
<20039=20040
<20040=20042,20041
<20042=20044,20043
<20045=20046
<20046=20048,20047
<20048=20050,20049
<20051=20064,20058,20052
<20052=20053
<20053=20055,20054
<20055=20057,20056
<20058=20059
<20059=20061,20060
<20061=20063,20062
<20064=20065
<20065=20067,20066
<20067=20069,20068
<20070=20071
<20071=20073,20072
<20074=20075
<20075=20085,20076
<20076=20082,20077
<20077=20079,20078
<20079=20081,20080
<20082=20084,20083
<20085=20087,20086
<20088=20089
<20089=20091,20090
<20092=20100,20093
<20093=20094
<20094=20095
<20095=20099,20096
<20096=20098,20097
<20100=20101
<20101=20105,20102
<20102=20104,20103
<20105=20107,20106
<20108=20109
<20109=20111,20110
<20111=20112
<20112=20114,20113
<20114=20116,20115
<20116=20117
<20118=20298,20253,20237,20228,20221,20205,20201,20150,20139,20126,20119
<20119=20120
<20120=20124,20121
<20121=20122
<20122=20123
<20124=20125
<20126=20127
<20127=20137,20128
<20128=20135,20133,20131,20129
<20129=20130
<20131=20132
<20133=20134
<20135=20136
<20137=20138
<20139=20140
<20140=20146,20141
<20141=20144,20142
<20142=20143
<20144=20145
<20146=20147
<20147=20149,20148
<20150=20151
<20151=20197,20152
<20152=20195,20181,20167,20153
<20153=20154
<20154=20156,20155
<20156=20158,20157
<20158=20159
<20159=20161,20160
<20161=20163,20162
<20163=20164
<20164=20166,20165
<20167=20168
<20168=20170,20169
<20170=20172,20171
<20172=20173
<20173=20175,20174
<20175=20177,20176
<20177=20178
<20178=20180,20179
<20181=20182
<20182=20184,20183
<20184=20186,20185
<20186=20187
<20187=20189,20188
<20189=20191,20190
<20191=20192
<20192=20194,20193
<20195=20196
<20197=20198
<20198=20200,20199
<20201=20202
<20202=20204,20203
<20205=20206
<20206=20208,20207
<20208=20210,20209
<20210=20212,20211
<20212=20213
<20213=20215,20214
<20215=20217,20216
<20217=20218
<20218=20220,20219
<20221=20222
<20222=20227,20226,20223
<20223=20225,20224
<20228=20229
<20229=20236,20235,20230
<20230=20234,20231
<20231=20233,20232
<20237=20245,20238
<20238=20239
<20239=20240
<20240=20244,20241
<20241=20243,20242
<20245=20246
<20246=20250,20247
<20247=20249,20248
<20250=20252,20251
<20253=20286,20281,20254
<20254=20255
<20255=20267,20256
<20256=20263,20257
<20257=20258
<20258=20262,20259
<20259=20261,20260
<20263=20264
<20264=20266,20265
<20267=20268
<20268=20270,20269
<20270=20272,20271
<20272=20273
<20273=20275,20274
<20275=20277,20276
<20277=20278
<20278=20280,20279
<20281=20282
<20282=20283
<20283=20285,20284
<20286=20287
<20287=20289,20288
<20289=20291,20290
<20291=20292
<20292=20294,20293
<20294=20296,20295
<20296=20297
<20298=20299
<20299=20304,20303,20300
<20300=20302,20301
<20305=20306
<20306=20308,20307
<20308=20309
<20309=20311,20310
<20311=20313,20312
<20313=20314
<20353=20359,20358,20354
<20354=20355
<20355=20357,20356
<20359=20360
<20360=20361
<20361=20365,20362
<20362=20363
<20363=20364
<20365=20366
<20372=20381,20380,20373
<20373=20377,20374
<20374=20376,20375
<20377=20379,20378
<20381=20418,20404,20398,20389,20382
<20382=20383
<20383=20387,20384
<20384=20385
<20385=20386
<20387=20388
<20389=20390
<20390=20396,20391
<20391=20394,20392
<20392=20393
<20394=20395
<20396=20397
<20398=20399
<20399=20401,20400
<20401=20403,20402
<20404=20405
<20405=20415,20406
<20406=20412,20407
<20407=20409,20408
<20409=20411,20410
<20412=20414,20413
<20415=20417,20416
<20418=20419
<20419=20421,20420
<20432=20435,20434,20433
<20435=20464,20436
<20436=20449,20437
<20437=20438
<20438=20439
<20439=20447,20440
<20440=20441
<20441=20442
<20442=20444,20443
<20444=20446,20445
<20447=20448
<20449=20450
<20450=20456,20451
<20451=20453,20452
<20453=20455,20454
<20456=20458,20457
<20458=20460,20459
<20460=20461
<20461=20463,20462
<20464=20465
<20465=20467,20466
<20476=20479,20478,20477
<20479=20502,20480
<20480=20481
<20481=20493,20482
<20482=20491,20483
<20483=20484
<20484=20487,20486,20485
<20487=20488
<20488=20490,20489
<20491=20492
<20493=20494
<20494=20496,20495
<20496=20498,20497
<20498=20499
<20499=20501,20500
<20502=20503
<20503=20505,20504
<20505=20507,20506
<20518=20521,20520,20519
<20521=20601,20527,20522
<20522=20523
<20523=20525,20524
<20525=20526
<20527=20591,20585,20580,20528
<20528=20529
<20529=20576,20530
<20530=20531
<20531=20566,20564,20559,20532
<20532=20533
<20533=20551,20534
<20534=20543,20535
<20535=20536
<20536=20538,20537
<20538=20540,20539
<20540=20542,20541
<20543=20544
<20544=20546,20545
<20546=20548,20547
<20548=20550,20549
<20551=20552
<20552=20554,20553
<20554=20556,20555
<20556=20558,20557
<20559=20563,20560
<20560=20562,20561
<20564=20565
<20566=20567
<20567=20568
<20568=20575,20574,20569
<20569=20573,20570
<20570=20572,20571
<20576=20577
<20577=20579,20578
<20580=20584,20581
<20581=20583,20582
<20585=20586
<20586=20590,20587
<20587=20589,20588
<20591=20592
<20592=20593
<20593=20600,20599,20594
<20594=20598,20595
<20595=20597,20596
<20601=20602
<20602=20604,20603
<20604=20605
<20625=20628,20627,20626
<20628=20671,20660,20638,20629
<20629=20630
<20630=20634,20631
<20631=20632
<20632=20633
<20634=20635
<20635=20637,20636
<20638=20639
<20639=20656,20640
<20640=20654,20652,20650,20648,20643,20641
<20641=20642
<20643=20644
<20644=20646,20645
<20646=20647
<20648=20649
<20650=20651
<20652=20653
<20654=20655
<20656=20657
<20657=20659,20658
<20660=20661
<20661=20670,20669,20662
<20662=20668,20663
<20663=20667,20664
<20664=20666,20665
<20671=20672
<20672=20677,20676,20673
<20673=20675,20674
<20687=20690,20689,20688
<20690=20725,20716,20712,20705,20696,20691
<20691=20692
<20692=20694,20693
<20694=20695
<20696=20697
<20697=20703,20698
<20698=20699
<20699=20700
<20700=20702,20701
<20703=20704
<20705=20706
<20706=20708,20707
<20708=20709
<20709=20711,20710
<20712=20713
<20713=20715,20714
<20716=20717
<20717=20723,20718
<20718=20719
<20719=20720
<20720=20722,20721
<20723=20724
<20725=20726
<20726=20730,20727
<20727=20728
<20728=20729
<20730=20731
<20737=20740,20739,20738
<20740=20768,20748,20741
<20741=20742
<20742=20746,20743
<20743=20744
<20744=20745
<20746=20747
<20748=20749
<20749=20759,20750
<20750=20757,20751
<20751=20752
<20752=20755,20754,20753
<20755=20756
<20757=20758
<20759=20760
<20760=20762,20761
<20762=20764,20763
<20764=20765
<20765=20767,20766
<20768=20769
<20769=20771,20770
<20782=20785,20784,20783
<20785=20813,20793,20786
<20786=20787
<20787=20791,20788
<20788=20789
<20789=20790
<20791=20792
<20793=20794
<20794=20804,20795
<20795=20802,20796
<20796=20797
<20797=20800,20799,20798
<20800=20801
<20802=20803
<20804=20805
<20805=20807,20806
<20807=20809,20808
<20809=20810
<20810=20812,20811
<20813=20814
<20814=20816,20815
<20827=20830,20829,20828
<20830=20868,20859,20852,20845,20836,20831
<20831=20832
<20832=20834,20833
<20834=20835
<20836=20837
<20837=20843,20838
<20838=20839
<20839=20840
<20840=20842,20841
<20843=20844
<20845=20846
<20846=20850,20847
<20847=20848
<20848=20849
<20850=20851
<20852=20853
<20853=20857,20854
<20854=20855
<20855=20856
<20857=20858
<20859=20860
<20860=20866,20861
<20861=20862
<20862=20863
<20863=20865,20864
<20866=20867
<20868=20869
<20869=20873,20870
<20870=20871
<20871=20872
<20873=20874
<20881=20884,20883,20882
<20884=20922,20913,20906,20899,20890,20885
<20885=20886
<20886=20888,20887
<20888=20889
<20890=20891
<20891=20897,20892
<20892=20893
<20893=20894
<20894=20896,20895
<20897=20898
<20899=20900
<20900=20904,20901
<20901=20902
<20902=20903
<20904=20905
<20906=20907
<20907=20911,20908
<20908=20909
<20909=20910
<20911=20912
<20913=20914
<20914=20920,20915
<20915=20916
<20916=20917
<20917=20919,20918
<20920=20921
<20922=20923
<20923=20927,20924
<20924=20925
<20925=20926
<20927=20928
<20935=20938,20937,20936
<20938=20966,20946,20939
<20939=20940
<20940=20944,20941
<20941=20942
<20942=20943
<20944=20945
<20946=20947
<20947=20957,20948
<20948=20955,20949
<20949=20950
<20950=20953,20952,20951
<20953=20954
<20955=20956
<20957=20958
<20958=20960,20959
<20960=20962,20961
<20962=20963
<20963=20965,20964
<20966=20967
<20967=20969,20968
<20980=20983,20982,20981
<20983=21025,21016,21005,20998,20989,20984
<20984=20985
<20985=20987,20986
<20987=20988
<20989=20990
<20990=20996,20991
<20991=20992
<20992=20993
<20993=20995,20994
<20996=20997
<20998=20999
<20999=21003,21000
<21000=21001
<21001=21002
<21003=21004
<21005=21006
<21006=21014,21007
<21007=21012,21010,21008
<21008=21009
<21010=21011
<21012=21013
<21014=21015
<21016=21017
<21017=21023,21018
<21018=21019
<21019=21020
<21020=21022,21021
<21023=21024
<21025=21026
<21026=21030,21027
<21027=21028
<21028=21029
<21030=21031
<21039=21042,21041,21040
<21042=21084,21075,21064,21057,21048,21043
<21043=21044
<21044=21046,21045
<21046=21047
<21048=21049
<21049=21055,21050
<21050=21051
<21051=21052
<21052=21054,21053
<21055=21056
<21057=21058
<21058=21062,21059
<21059=21060
<21060=21061
<21062=21063
<21064=21065
<21065=21073,21066
<21066=21071,21069,21067
<21067=21068
<21069=21070
<21071=21072
<21073=21074
<21075=21076
<21076=21082,21077
<21077=21078
<21078=21079
<21079=21081,21080
<21082=21083
<21084=21085
<21085=21089,21086
<21086=21087
<21087=21088
<21089=21090
<21098=21101,21100,21099
<21105=21108,21107,21106
<21112=21115,21114,21113
<21115=21143,21123,21116
<21116=21117
<21117=21121,21118
<21118=21119
<21119=21120
<21121=21122
<21123=21124
<21124=21134,21125
<21125=21132,21126
<21126=21127
<21127=21130,21129,21128
<21130=21131
<21132=21133
<21134=21135
<21135=21137,21136
<21137=21139,21138
<21139=21140
<21140=21142,21141
<21143=21144
<21144=21146,21145
<21157=21160,21159,21158
<21160=21202,21193,21182,21175,21166,21161
<21161=21162
<21162=21164,21163
<21164=21165
<21166=21167
<21167=21173,21168
<21168=21169
<21169=21170
<21170=21172,21171
<21173=21174
<21175=21176
<21176=21180,21177
<21177=21178
<21178=21179
<21180=21181
<21182=21183
<21183=21191,21184
<21184=21189,21187,21185
<21185=21186
<21187=21188
<21189=21190
<21191=21192
<21193=21194
<21194=21200,21195
<21195=21196
<21196=21197
<21197=21199,21198
<21200=21201
<21202=21203
<21203=21207,21204
<21204=21205
<21205=21206
<21207=21208
<21215=21218,21217,21216
<21218=21260,21251,21240,21233,21224,21219
<21219=21220
<21220=21222,21221
<21222=21223
<21224=21225
<21225=21231,21226
<21226=21227
<21227=21228
<21228=21230,21229
<21231=21232
<21233=21234
<21234=21238,21235
<21235=21236
<21236=21237
<21238=21239
<21240=21241
<21241=21249,21242
<21242=21247,21245,21243
<21243=21244
<21245=21246
<21247=21248
<21249=21250
<21251=21252
<21252=21258,21253
<21253=21254
<21254=21255
<21255=21257,21256
<21258=21259
<21260=21261
<21261=21265,21262
<21262=21263
<21263=21264
<21265=21266
<21274=21277,21276,21275
<21277=21319,21310,21299,21292,21283,21278
<21278=21279
<21279=21281,21280
<21281=21282
<21283=21284
<21284=21290,21285
<21285=21286
<21286=21287
<21287=21289,21288
<21290=21291
<21292=21293
<21293=21297,21294
<21294=21295
<21295=21296
<21297=21298
<21299=21300
<21300=21308,21301
<21301=21306,21304,21302
<21302=21303
<21304=21305
<21306=21307
<21308=21309
<21310=21311
<21311=21317,21312
<21312=21313
<21313=21314
<21314=21316,21315
<21317=21318
<21319=21320
<21320=21324,21321
<21321=21322
<21322=21323
<21324=21325
<21333=21336,21335,21334
<21336=21378,21369,21358,21351,21342,21337
<21337=21338
<21338=21340,21339
<21340=21341
<21342=21343
<21343=21349,21344
<21344=21345
<21345=21346
<21346=21348,21347
<21349=21350
<21351=21352
<21352=21356,21353
<21353=21354
<21354=21355
<21356=21357
<21358=21359
<21359=21367,21360
<21360=21365,21363,21361
<21361=21362
<21363=21364
<21365=21366
<21367=21368
<21369=21370
<21370=21376,21371
<21371=21372
<21372=21373
<21373=21375,21374
<21376=21377
<21378=21379
<21379=21383,21380
<21380=21381
<21381=21382
<21383=21384
<21392=21395,21394,21393
<21395=21437,21428,21417,21410,21401,21396
<21396=21397
<21397=21399,21398
<21399=21400
<21401=21402
<21402=21408,21403
<21403=21404
<21404=21405
<21405=21407,21406
<21408=21409
<21410=21411
<21411=21415,21412
<21412=21413
<21413=21414
<21415=21416
<21417=21418
<21418=21426,21419
<21419=21424,21422,21420
<21420=21421
<21422=21423
<21424=21425
<21426=21427
<21428=21429
<21429=21435,21430
<21430=21431
<21431=21432
<21432=21434,21433
<21435=21436
<21437=21438
<21438=21442,21439
<21439=21440
<21440=21441
<21442=21443
<21450=21453,21452,21451
<21453=21495,21486,21475,21468,21459,21454
<21454=21455
<21455=21457,21456
<21457=21458
<21459=21460
<21460=21466,21461
<21461=21462
<21462=21463
<21463=21465,21464
<21466=21467
<21468=21469
<21469=21473,21470
<21470=21471
<21471=21472
<21473=21474
<21475=21476
<21476=21484,21477
<21477=21482,21480,21478
<21478=21479
<21480=21481
<21482=21483
<21484=21485
<21486=21487
<21487=21493,21488
<21488=21489
<21489=21490
<21490=21492,21491
<21493=21494
<21495=21496
<21496=21500,21497
<21497=21498
<21498=21499
<21500=21501
<21509=21512,21511,21510
<21512=21554,21545,21534,21527,21518,21513
<21513=21514
<21514=21516,21515
<21516=21517
<21518=21519
<21519=21525,21520
<21520=21521
<21521=21522
<21522=21524,21523
<21525=21526
<21527=21528
<21528=21532,21529
<21529=21530
<21530=21531
<21532=21533
<21534=21535
<21535=21543,21536
<21536=21541,21539,21537
<21537=21538
<21539=21540
<21541=21542
<21543=21544
<21545=21546
<21546=21552,21547
<21547=21548
<21548=21549
<21549=21551,21550
<21552=21553
<21554=21555
<21555=21559,21556
<21556=21557
<21557=21558
<21559=21560
<21568=21571,21570,21569
<21571=21613,21604,21593,21586,21577,21572
<21572=21573
<21573=21575,21574
<21575=21576
<21577=21578
<21578=21584,21579
<21579=21580
<21580=21581
<21581=21583,21582
<21584=21585
<21586=21587
<21587=21591,21588
<21588=21589
<21589=21590
<21591=21592
<21593=21594
<21594=21602,21595
<21595=21600,21598,21596
<21596=21597
<21598=21599
<21600=21601
<21602=21603
<21604=21605
<21605=21611,21606
<21606=21607
<21607=21608
<21608=21610,21609
<21611=21612
<21613=21614
<21614=21618,21615
<21615=21616
<21616=21617
<21618=21619
<21627=21630,21629,21628
<21630=21631
<21631=21632
<21632=21634,21633
<21634=21635
<21639=21642,21641,21640
<21642=21643
<21643=21644
<21644=21648,21645
<21645=21646
<21646=21647
<21648=21649
<21654=21657,21656,21655
<21657=21658
<21658=21659
<21659=21663,21660
<21660=21661
<21661=21662
<21663=21664
<21669=21672,21671,21670
<21672=21714,21705,21694,21687,21678,21673
<21673=21674
<21674=21676,21675
<21676=21677
<21678=21679
<21679=21685,21680
<21680=21681
<21681=21682
<21682=21684,21683
<21685=21686
<21687=21688
<21688=21692,21689
<21689=21690
<21690=21691
<21692=21693
<21694=21695
<21695=21703,21696
<21696=21701,21699,21697
<21697=21698
<21699=21700
<21701=21702
<21703=21704
<21705=21706
<21706=21712,21707
<21707=21708
<21708=21709
<21709=21711,21710
<21712=21713
<21714=21715
<21715=21719,21716
<21716=21717
<21717=21718
<21719=21720
<21728=21731,21730,21729
<21731=21773,21764,21753,21746,21737,21732
<21732=21733
<21733=21735,21734
<21735=21736
<21737=21738
<21738=21744,21739
<21739=21740
<21740=21741
<21741=21743,21742
<21744=21745
<21746=21747
<21747=21751,21748
<21748=21749
<21749=21750
<21751=21752
<21753=21754
<21754=21762,21755
<21755=21760,21758,21756
<21756=21757
<21758=21759
<21760=21761
<21762=21763
<21764=21765
<21765=21771,21766
<21766=21767
<21767=21768
<21768=21770,21769
<21771=21772
<21773=21774
<21774=21778,21775
<21775=21776
<21776=21777
<21778=21779
<21787=21790,21789,21788
<21790=21832,21823,21812,21805,21796,21791
<21791=21792
<21792=21794,21793
<21794=21795
<21796=21797
<21797=21803,21798
<21798=21799
<21799=21800
<21800=21802,21801
<21803=21804
<21805=21806
<21806=21810,21807
<21807=21808
<21808=21809
<21810=21811
<21812=21813
<21813=21821,21814
<21814=21819,21817,21815
<21815=21816
<21817=21818
<21819=21820
<21821=21822
<21823=21824
<21824=21830,21825
<21825=21826
<21826=21827
<21827=21829,21828
<21830=21831
<21832=21833
<21833=21837,21834
<21834=21835
<21835=21836
<21837=21838
<21846=21849,21848,21847
<21849=21891,21882,21871,21864,21855,21850
<21850=21851
<21851=21853,21852
<21853=21854
<21855=21856
<21856=21862,21857
<21857=21858
<21858=21859
<21859=21861,21860
<21862=21863
<21864=21865
<21865=21869,21866
<21866=21867
<21867=21868
<21869=21870
<21871=21872
<21872=21880,21873
<21873=21878,21876,21874
<21874=21875
<21876=21877
<21878=21879
<21880=21881
<21882=21883
<21883=21889,21884
<21884=21885
<21885=21886
<21886=21888,21887
<21889=21890
<21891=21892
<21892=21896,21893
<21893=21894
<21894=21895
<21896=21897
<21904=21907,21906,21905
<21907=21935,21915,21908
<21908=21909
<21909=21913,21910
<21910=21911
<21911=21912
<21913=21914
<21915=21916
<21916=21926,21917
<21917=21924,21918
<21918=21919
<21919=21922,21921,21920
<21922=21923
<21924=21925
<21926=21927
<21927=21929,21928
<21929=21931,21930
<21931=21932
<21932=21934,21933
<21935=21936
<21936=21938,21937
<21938=21939
<21950=21953,21952,21951
<21953=21981,21961,21954
<21954=21955
<21955=21959,21956
<21956=21957
<21957=21958
<21959=21960
<21961=21962
<21962=21972,21963
<21963=21970,21964
<21964=21965
<21965=21968,21967,21966
<21968=21969
<21970=21971
<21972=21973
<21973=21975,21974
<21975=21977,21976
<21977=21978
<21978=21980,21979
<21981=21982
<21982=21984,21983
<21984=21985
<21996=21999,21998,21997
<22003=22006,22005,22004
<22006=22007
<22007=22146,22141,22008
<22008=22009
<22009=22139,22134,22010
<22010=22011
<22011=22125,22121,22012
<22012=22115,22013
<22013=22014
<22014=22098,22015
<22015=22092,22087,22047,22032,22023,22016
<22016=22017
<22017=22021,22018
<22018=22019
<22019=22020
<22021=22022
<22023=22024
<22024=22030,22025
<22025=22028,22026
<22026=22027
<22028=22029
<22030=22031
<22032=22039,22033
<22033=22034
<22034=22038,22035
<22035=22037,22036
<22039=22040
<22040=22046,22041
<22041=22045,22042
<22042=22044,22043
<22047=22075,22067,22062,22048
<22048=22049
<22049=22058,22050
<22050=22052,22051
<22052=22053
<22053=22057,22054
<22054=22056,22055
<22058=22059
<22059=22061,22060
<22062=22066,22063
<22063=22065,22064
<22067=22068
<22068=22074,22069
<22069=22073,22070
<22070=22072,22071
<22075=22076
<22076=22077
<22077=22086,22085,22078
<22078=22084,22079
<22079=22081,22080
<22081=22083,22082
<22087=22088
<22088=22090,22089
<22090=22091
<22092=22093
<22093=22097,22094
<22094=22096,22095
<22098=22099
<22099=22101,22100
<22101=22113,22102
<22102=22105,22103
<22103=22104
<22105=22106
<22106=22108,22107
<22108=22110,22109
<22110=22112,22111
<22113=22114
<22115=22116
<22116=22120,22117
<22117=22119,22118
<22121=22122
<22122=22124,22123
<22125=22126
<22126=22133,22132,22127
<22127=22131,22128
<22128=22130,22129
<22134=22135
<22135=22137,22136
<22137=22138
<22139=22140
<22141=22142
<22142=22144,22143
<22144=22145
<22146=22147
<22178=22181,22180,22179
<22181=22202,22182
<22182=22183
<22183=22193,22184
<22184=22191,22185
<22185=22186
<22186=22189,22188,22187
<22189=22190
<22191=22192
<22193=22194
<22194=22196,22195
<22196=22198,22197
<22198=22199
<22199=22201,22200
<22202=22203
<22203=22213,22204
<22204=22211,22205
<22205=22206
<22206=22209,22208,22207
<22209=22210
<22211=22212
<22213=22214
<22214=22216,22215
<22216=22218,22217
<22218=22219
<22219=22221,22220
<22233=22236,22235,22234
<22236=22284,22275,22268,22263,22258,22251,22242,22237
<22237=22238
<22238=22240,22239
<22240=22241
<22242=22243
<22243=22249,22244
<22244=22245
<22245=22246
<22246=22248,22247
<22249=22250
<22251=22252
<22252=22256,22253
<22253=22254
<22254=22255
<22256=22257
<22258=22259
<22259=22261,22260
<22261=22262
<22263=22264
<22264=22266,22265
<22266=22267
<22268=22269
<22269=22273,22270
<22270=22271
<22271=22272
<22273=22274
<22275=22276
<22276=22282,22277
<22277=22278
<22278=22279
<22279=22281,22280
<22282=22283
<22284=22285
<22285=22289,22286
<22286=22287
<22287=22288
<22289=22290
<22297=22300,22299,22298
<22300=22358,22349,22342,22337,22332,22327,22322,22315,22306,22301
<22301=22302
<22302=22304,22303
<22304=22305
<22306=22307
<22307=22313,22308
<22308=22309
<22309=22310
<22310=22312,22311
<22313=22314
<22315=22316
<22316=22320,22317
<22317=22318
<22318=22319
<22320=22321
<22322=22323
<22323=22325,22324
<22325=22326
<22327=22328
<22328=22330,22329
<22330=22331
<22332=22333
<22333=22335,22334
<22335=22336
<22337=22338
<22338=22340,22339
<22340=22341
<22342=22343
<22343=22347,22344
<22344=22345
<22345=22346
<22347=22348
<22349=22350
<22350=22356,22351
<22351=22352
<22352=22353
<22353=22355,22354
<22356=22357
<22358=22359
<22359=22363,22360
<22360=22361
<22361=22362
<22363=22364
<22371=22374,22373,22372
<22374=22382,22375
<22375=22376
<22376=22380,22377
<22377=22378
<22378=22379
<22380=22381
<22382=22383
<22383=22385,22384
<22385=22386
<22391=22394,22393,22392
<22394=22402,22395
<22395=22396
<22396=22400,22397
<22397=22398
<22398=22399
<22400=22401
<22402=22403
<22403=22407,22404
<22404=22405
<22405=22406
<22407=22408
<22414=22417,22416,22415
<22417=22425,22418
<22418=22419
<22419=22423,22420
<22420=22421
<22421=22422
<22423=22424
<22425=22426
<22426=22432,22427
<22427=22430,22428
<22428=22429
<22430=22431
<22432=22433
<22440=22443,22442,22441
<22443=22451,22444
<22444=22445
<22445=22449,22446
<22446=22447
<22447=22448
<22449=22450
<22451=22452
<22452=22454,22453
<22454=22455
<22460=22463,22462,22461
<22463=22471,22464
<22464=22465
<22465=22469,22466
<22466=22467
<22467=22468
<22469=22470
<22471=22472
<22472=22474,22473
<22474=22475
<22480=22483,22482,22481
<22483=22491,22484
<22484=22485
<22485=22489,22486
<22486=22487
<22487=22488
<22489=22490
<22491=22492
<22492=22494,22493
<22494=22495
<22500=22503,22502,22501
<22503=22511,22504
<22504=22505
<22505=22509,22506
<22506=22507
<22507=22508
<22509=22510
<22511=22512
<22512=22514,22513
<22514=22515
<22520=22523,22522,22521
<22523=22567,22558,22545,22538,22529,22524
<22524=22525
<22525=22527,22526
<22527=22528
<22529=22530
<22530=22536,22531
<22531=22532
<22532=22533
<22533=22535,22534
<22536=22537
<22538=22539
<22539=22543,22540
<22540=22541
<22541=22542
<22543=22544
<22545=22546
<22546=22556,22547
<22547=22554,22552,22550,22548
<22548=22549
<22550=22551
<22552=22553
<22554=22555
<22556=22557
<22558=22559
<22559=22565,22560
<22560=22561
<22561=22562
<22562=22564,22563
<22565=22566
<22567=22568
<22568=22572,22569
<22569=22570
<22570=22571
<22572=22573
<22581=22584,22583,22582
<22584=22592,22585
<22585=22586
<22586=22590,22587
<22587=22588
<22588=22589
<22590=22591
<22592=22593
<22593=22595,22594
<22595=22596
<22601=22607,22606,22602
<22602=22603
<22603=22605,22604
<22607=22709,22627,22620,22615,22608
<22608=22609
<22609=22613,22610
<22610=22611
<22611=22612
<22613=22614
<22615=22616
<22616=22618,22617
<22618=22619
<22620=22621
<22621=22623,22622
<22623=22624
<22624=22626,22625
<22627=22707,22628
<22628=22694,22681,22668,22655,22642,22629
<22629=22630
<22630=22638,22631
<22631=22636,22632
<22632=22633
<22633=22635,22634
<22636=22637
<22638=22639
<22639=22641,22640
<22642=22643
<22643=22651,22644
<22644=22649,22645
<22645=22646
<22646=22648,22647
<22649=22650
<22651=22652
<22652=22654,22653
<22655=22656
<22656=22664,22657
<22657=22662,22658
<22658=22659
<22659=22661,22660
<22662=22663
<22664=22665
<22665=22667,22666
<22668=22669
<22669=22677,22670
<22670=22675,22671
<22671=22672
<22672=22674,22673
<22675=22676
<22677=22678
<22678=22680,22679
<22681=22682
<22682=22690,22683
<22683=22688,22684
<22684=22685
<22685=22687,22686
<22688=22689
<22690=22691
<22691=22693,22692
<22694=22695
<22695=22703,22696
<22696=22701,22697
<22697=22698
<22698=22700,22699
<22701=22702
<22703=22704
<22704=22706,22705
<22707=22708
<22709=22710
<22710=22718,22717,22711
<22711=22716,22712
<22712=22714,22713
<22714=22715
<22735=22738,22737,22736
<22738=22746,22739
<22739=22740
<22740=22744,22741
<22741=22742
<22742=22743
<22744=22745
<22746=22747
<22747=22749,22748
<22749=22751,22750
<22758=22761,22760,22759
<22761=22769,22762
<22762=22763
<22763=22767,22764
<22764=22765
<22765=22766
<22767=22768
<22769=22770
<22770=22772,22771
<22772=22774,22773
<22781=22784,22783,22782
<22784=22792,22785
<22785=22786
<22786=22790,22787
<22787=22788
<22788=22789
<22790=22791
<22792=22793
<22793=22795,22794
<22795=22797,22796
<22804=22807,22806,22805
<22807=22815,22808
<22808=22809
<22809=22813,22810
<22810=22811
<22811=22812
<22813=22814
<22815=22816
<22816=22818,22817
<22818=22820,22819
<22827=22830,22829,22828
<22830=22838,22831
<22831=22832
<22832=22836,22833
<22833=22834
<22834=22835
<22836=22837
<22838=22839
<22839=22841,22840
<22841=22843,22842
<22850=22853,22852,22851
<22853=22861,22854
<22854=22855
<22855=22859,22856
<22856=22857
<22857=22858
<22859=22860
<22861=22862
<22862=22864,22863
<22864=22865
<22870=22873,22872,22871
<22873=22881,22874
<22874=22875
<22875=22879,22876
<22876=22877
<22877=22878
<22879=22880
<22881=22882
<22882=22884,22883
<22884=22885
<22890=22893,22892,22891
<22893=22901,22894
<22894=22895
<22895=22899,22896
<22896=22897
<22897=22898
<22899=22900
<22901=22902
<22902=22904,22903
<22904=22905
<22910=22913,22912,22911
<22913=22972,22963,22959,22928,22919,22914
<22914=22915
<22915=22917,22916
<22917=22918
<22919=22920
<22920=22926,22921
<22921=22922
<22922=22923
<22923=22925,22924
<22926=22927
<22928=22950,22929
<22929=22937,22930
<22930=22931
<22931=22935,22932
<22932=22933
<22933=22934
<22935=22936
<22937=22938
<22938=22948,22939
<22939=22944,22940
<22940=22941
<22941=22943,22942
<22944=22945
<22945=22947,22946
<22948=22949
<22950=22951
<22951=22953,22952
<22953=22955,22954
<22955=22956
<22956=22958,22957
<22959=22960
<22960=22962,22961
<22963=22964
<22964=22970,22965
<22965=22966
<22966=22967
<22967=22969,22968
<22970=22971
<22972=22973
<22973=22977,22974
<22974=22975
<22975=22976
<22977=22978
<22989=22992,22991,22990
<22992=23000,22993
<22993=22994
<22994=22998,22995
<22995=22996
<22996=22997
<22998=22999
<23000=23001
<23001=23007,23002
<23002=23005,23003
<23003=23004
<23005=23006
<23007=23008
<23014=23017,23016,23015
<23017=23025,23018
<23018=23019
<23019=23023,23020
<23020=23021
<23021=23022
<23023=23024
<23025=23026
<23026=23028,23027
<23028=23029
<23034=23037,23036,23035
<23037=23050,23045,23038
<23038=23039
<23039=23043,23040
<23040=23041
<23041=23042
<23043=23044
<23045=23046
<23046=23048,23047
<23048=23049
<23050=23051
<23051=23053,23052
<23059=23062,23061,23060
<23062=23193,23063
<23063=23191,23064
<23064=23170,23149,23128,23107,23086,23065
<23065=23066
<23066=23082,23067
<23067=23080,23068
<23068=23069
<23069=23072,23071,23070
<23072=23073
<23073=23079,23074
<23074=23076,23075
<23076=23078,23077
<23080=23081
<23082=23083
<23083=23085,23084
<23086=23087
<23087=23103,23088
<23088=23101,23089
<23089=23090
<23090=23093,23092,23091
<23093=23094
<23094=23100,23095
<23095=23097,23096
<23097=23099,23098
<23101=23102
<23103=23104
<23104=23106,23105
<23107=23108
<23108=23124,23109
<23109=23122,23110
<23110=23111
<23111=23114,23113,23112
<23114=23115
<23115=23121,23116
<23116=23118,23117
<23118=23120,23119
<23122=23123
<23124=23125
<23125=23127,23126
<23128=23129
<23129=23145,23130
<23130=23143,23131
<23131=23132
<23132=23135,23134,23133
<23135=23136
<23136=23142,23137
<23137=23139,23138
<23139=23141,23140
<23143=23144
<23145=23146
<23146=23148,23147
<23149=23150
<23150=23166,23151
<23151=23164,23152
<23152=23153
<23153=23156,23155,23154
<23156=23157
<23157=23163,23158
<23158=23160,23159
<23160=23162,23161
<23164=23165
<23166=23167
<23167=23169,23168
<23170=23171
<23171=23187,23172
<23172=23185,23173
<23173=23174
<23174=23177,23176,23175
<23177=23178
<23178=23184,23179
<23179=23181,23180
<23181=23183,23182
<23185=23186
<23187=23188
<23188=23190,23189
<23191=23192
<23193=23194
<23194=23202,23201,23195
<23195=23200,23196
<23196=23198,23197
<23198=23199
<23225=23228,23227,23226
<23228=23229
<23229=23230
<23230=23236,23231
<23231=23234,23232
<23232=23233
<23234=23235
<23236=23237
<23243=23246,23245,23244
<23246=23266,23261,23254,23247
<23247=23248
<23248=23252,23249
<23249=23250
<23250=23251
<23252=23253
<23254=23255
<23255=23257,23256
<23257=23258
<23258=23260,23259
<23261=23262
<23262=23264,23263
<23264=23265
<23266=23267
<23267=23269,23268
<23269=23271,23270
<23279=23282,23281,23280
<23282=23302,23297,23290,23283
<23283=23284
<23284=23288,23285
<23285=23286
<23286=23287
<23288=23289
<23290=23291
<23291=23293,23292
<23293=23294
<23294=23296,23295
<23297=23298
<23298=23300,23299
<23300=23301
<23302=23303
<23303=23305,23304
<23305=23307,23306
<23315=23318,23317,23316
<23318=23338,23333,23326,23319
<23319=23320
<23320=23324,23321
<23321=23322
<23322=23323
<23324=23325
<23326=23327
<23327=23329,23328
<23329=23330
<23330=23332,23331
<23333=23334
<23334=23336,23335
<23336=23337
<23338=23339
<23339=23341,23340
<23341=23343,23342
<23351=23354,23353,23352
<23354=23374,23369,23362,23355
<23355=23356
<23356=23360,23357
<23357=23358
<23358=23359
<23360=23361
<23362=23363
<23363=23365,23364
<23365=23366
<23366=23368,23367
<23369=23370
<23370=23372,23371
<23372=23373
<23374=23375
<23375=23377,23376
<23377=23379,23378
<23387=23390,23389,23388
<23390=23410,23405,23398,23391
<23391=23392
<23392=23396,23393
<23393=23394
<23394=23395
<23396=23397
<23398=23399
<23399=23401,23400
<23401=23402
<23402=23404,23403
<23405=23406
<23406=23408,23407
<23408=23409
<23410=23411
<23411=23413,23412
<23413=23415,23414
<23423=23426,23425,23424
<23426=23446,23441,23434,23427
<23427=23428
<23428=23432,23429
<23429=23430
<23430=23431
<23432=23433
<23434=23435
<23435=23437,23436
<23437=23438
<23438=23440,23439
<23441=23442
<23442=23444,23443
<23444=23445
<23446=23447
<23447=23449,23448
<23449=23451,23450
<23459=23462,23461,23460
<23462=23488,23483,23476,23472,23463
<23463=23464
<23464=23468,23465
<23465=23466
<23466=23467
<23468=23469
<23469=23471,23470
<23472=23473
<23473=23475,23474
<23476=23477
<23477=23481,23478
<23478=23479
<23479=23480
<23481=23482
<23483=23484
<23484=23487,23486,23485
<23488=23489
<23489=23491,23490
<23491=23492
<23498=23501,23500,23499
<23501=23570,23560,23546,23502
<23502=23544,23503
<23503=23532,23504
<23504=23524,23520,23517,23505
<23505=23506
<23506=23507
<23507=23513,23508
<23508=23511,23509
<23509=23510
<23511=23512
<23513=23514
<23514=23516,23515
<23517=23519,23518
<23520=23521
<23521=23523,23522
<23524=23525
<23525=23526
<23526=23531,23530,23527
<23527=23529,23528
<23532=23533
<23533=23543,23542,23534
<23534=23541,23535
<23535=23537,23536
<23537=23538
<23538=23540,23539
<23544=23545
<23546=23547
<23547=23559,23558,23548
<23548=23557,23549
<23549=23553,23550
<23550=23551
<23551=23552
<23553=23554
<23554=23556,23555
<23560=23561
<23561=23569,23568,23562
<23562=23567,23563
<23563=23565,23564
<23565=23566
<23570=23571
<23571=23573,23572
<23590=23596,23595,23591
<23591=23592
<23592=23594,23593
<23596=23765,23755,23741,23597
<23597=23739,23598
<23598=23732,23725,23713,23599
<23599=23709,23600
<23600=23627,23626,23625,23624,23623,23622,23621,23620,23619,23618,23617,23616,23615,23614,23613,23612,23611,23610,23609,23608,23607,23606,23605,23604,23603,23602,23601
<23627=23705,23628
<23628=23692,23629
<23629=23679,23630
<23630=23642,23631
<23631=23632
<23632=23638,23633
<23633=23634
<23634=23635
<23635=23637,23636
<23638=23639
<23639=23641,23640
<23642=23668,23657,23643
<23643=23644
<23644=23645
<23645=23653,23646
<23646=23651,23649,23647
<23647=23648
<23649=23650
<23651=23652
<23653=23654
<23654=23656,23655
<23657=23658
<23658=23664,23659
<23659=23662,23660
<23660=23661
<23662=23663
<23664=23665
<23665=23667,23666
<23668=23669
<23669=23678,23670
<23670=23676,23671
<23671=23674,23672
<23672=23673
<23674=23675
<23676=23677
<23679=23680
<23680=23689,23681
<23681=23683,23682
<23683=23687,23684
<23684=23685
<23685=23686
<23687=23688
<23689=23691,23690
<23692=23693
<23693=23704,23694
<23694=23700,23695
<23695=23696
<23696=23697
<23697=23699,23698
<23700=23701
<23701=23703,23702
<23705=23706
<23706=23708,23707
<23709=23710
<23710=23712,23711
<23713=23714
<23714=23724,23723,23715
<23715=23722,23716
<23716=23718,23717
<23718=23719
<23719=23721,23720
<23725=23726
<23726=23728,23727
<23728=23729
<23729=23731,23730
<23732=23733
<23733=23738,23737,23734
<23734=23736,23735
<23739=23740
<23741=23742
<23742=23754,23753,23743
<23743=23752,23744
<23744=23748,23745
<23745=23746
<23746=23747
<23748=23749
<23749=23751,23750
<23755=23756
<23756=23764,23763,23757
<23757=23762,23758
<23758=23760,23759
<23760=23761
<23765=23766
<23766=23768,23767
<23791=23797,23796,23792
<23792=23793
<23793=23795,23794
<23797=23826,23822,23809,23798
<23798=23799
<23799=23805,23800
<23800=23803,23801
<23801=23802
<23803=23804
<23805=23806
<23806=23808,23807
<23809=23810
<23810=23818,23811
<23811=23816,23814,23812
<23812=23813
<23814=23815
<23816=23817
<23818=23819
<23819=23821,23820
<23822=23823
<23823=23825,23824
<23826=23827
<23827=23835,23834,23828
<23828=23833,23829
<23829=23831,23830
<23831=23832
<23845=23848,23847,23846
<23848=23890,23889,23888,23887,23886,23885,23884,23883,23882,23881,23880,23879,23878,23877,23876,23875,23874,23873,23872,23871,23870,23869,23868,23867,23866,23865,23864,23863,23862,23861,23860,23859,23858,23849
<23849=23850
<23850=23856,23851
<23851=23852
<23852=23853
<23853=23855,23854
<23856=23857
<23890=23894,23893,23891
<23891=23892
<23894=23895
<23895=23897,23896
<23897=23899,23898
<23899=23901,23900
<23901=23903,23902
<23913=23916,23915,23914
<23916=23917
<23917=23918
<23918=23920,23919
<23920=23921
<23925=23928,23927,23926
<23928=23929
<23929=23930
<23930=23932,23931
<23932=23933
<23937=23940,23939,23938
<23940=23982,23975,23974,23973,23972,23971,23970,23969,23968,23967,23966,23965,23964,23963,23962,23961,23960,23959,23958,23957,23956,23955,23953,23952,23951,23950,23941
<23941=23942
<23942=23948,23943
<23943=23944
<23944=23945
<23945=23947,23946
<23948=23949
<23953=23954
<23975=23976
<23976=23978,23977
<23978=23979
<23979=23981,23980
<23982=23983
<23983=23985,23984
<23985=23987,23986
<23995=23998,23997,23996
<23998=23999
<23999=24000
<24000=24002,24001
<24002=24003
<24007=24010,24009,24008
<24010=24052,24051,24050,24049,24048,24047,24046,24045,24044,24043,24042,24041,24040,24039,24038,24037,24036,24035,24034,24033,24032,24031,24030,24029,24028,24027,24026,24025,24024,24023,24022,24021,24020,24011
<24011=24012
<24012=24018,24013
<24013=24014
<24014=24015
<24015=24017,24016
<24018=24019
<24052=24056,24055,24053
<24053=24054
<24056=24057
<24057=24059,24058
<24059=24061,24060
<24061=24063,24062
<24063=24065,24064
<24075=24078,24077,24076
<24078=24079
<24079=24080
<24080=24082,24081
<24082=24083
<24087=24090,24089,24088
<24090=24091
<24091=24092
<24092=24096,24093
<24093=24094
<24094=24095
<24096=24097
<24102=24105,24104,24103
<24105=24106
<24106=24107
<24107=24111,24108
<24108=24109
<24109=24110
<24111=24112
<24117=24120,24119,24118
<24120=24121
<24121=24122
<24122=24124,24123
<24124=24125
<24129=24132,24131,24130
<24132=24174,24173,24172,24171,24170,24169,24168,24167,24166,24165,24164,24163,24162,24161,24160,24159,24158,24157,24156,24155,24154,24153,24152,24151,24150,24149,24148,24147,24146,24145,24144,24143,24142,24133
<24133=24134
<24134=24140,24135
<24135=24136
<24136=24137
<24137=24139,24138
<24140=24141
<24174=24178,24177,24175
<24175=24176
<24178=24179
<24179=24181,24180
<24181=24183,24182
<24183=24185,24184
<24185=24187,24186
<24197=24200,24199,24198
<24200=24280,24275,24239,24231,24201
<24201=24222,24202
<24202=24203
<24203=24204
<24204=24220,24205
<24205=24206
<24206=24207
<24207=24211,24208
<24208=24209
<24209=24210
<24211=24212
<24212=24214,24213
<24214=24216,24215
<24216=24217
<24217=24219,24218
<24220=24221
<24222=24223
<24223=24225,24224
<24225=24227,24226
<24227=24228
<24228=24230,24229
<24231=24232
<24232=24234,24233
<24234=24236,24235
<24236=24238,24237
<24239=24264,24252,24240
<24240=24241
<24241=24251,24242
<24242=24243
<24243=24249,24244
<24244=24247,24245
<24245=24246
<24247=24248
<24249=24250
<24252=24253
<24253=24254
<24254=24262,24255
<24255=24260,24256
<24256=24257
<24257=24259,24258
<24260=24261
<24262=24263
<24264=24265
<24265=24267,24266
<24267=24269,24268
<24269=24270
<24270=24272,24271
<24272=24274,24273
<24275=24276
<24276=24279,24278,24277
<24280=24281
<24281=24296,24295,24282
<24282=24294,24283
<24283=24293,24284
<24284=24292,24285
<24285=24289,24286
<24286=24288,24287
<24289=24291,24290
<24311=24314,24313,24312
<24314=24394,24389,24353,24345,24315
<24315=24336,24316
<24316=24317
<24317=24318
<24318=24334,24319
<24319=24320
<24320=24321
<24321=24325,24322
<24322=24323
<24323=24324
<24325=24326
<24326=24328,24327
<24328=24330,24329
<24330=24331
<24331=24333,24332
<24334=24335
<24336=24337
<24337=24339,24338
<24339=24341,24340
<24341=24342
<24342=24344,24343
<24345=24346
<24346=24348,24347
<24348=24350,24349
<24350=24352,24351
<24353=24378,24366,24354
<24354=24355
<24355=24365,24356
<24356=24357
<24357=24363,24358
<24358=24361,24359
<24359=24360
<24361=24362
<24363=24364
<24366=24367
<24367=24368
<24368=24376,24369
<24369=24374,24370
<24370=24371
<24371=24373,24372
<24374=24375
<24376=24377
<24378=24379
<24379=24381,24380
<24381=24383,24382
<24383=24384
<24384=24386,24385
<24386=24388,24387
<24389=24390
<24390=24393,24392,24391
<24394=24395
<24395=24410,24409,24396
<24396=24408,24397
<24397=24407,24398
<24398=24406,24399
<24399=24403,24400
<24400=24402,24401
<24403=24405,24404
<24425=24428,24427,24426
<24428=24472,24463,24450,24443,24434,24429
<24429=24430
<24430=24432,24431
<24432=24433
<24434=24435
<24435=24441,24436
<24436=24437
<24437=24438
<24438=24440,24439
<24441=24442
<24443=24444
<24444=24448,24445
<24445=24446
<24446=24447
<24448=24449
<24450=24451
<24451=24461,24452
<24452=24459,24457,24455,24453
<24453=24454
<24455=24456
<24457=24458
<24459=24460
<24461=24462
<24463=24464
<24464=24470,24465
<24465=24466
<24466=24467
<24467=24469,24468
<24470=24471
<24472=24473
<24473=24477,24474
<24474=24475
<24475=24476
<24477=24478
<24486=24489,24488,24487
<24489=24533,24524,24511,24504,24495,24490
<24490=24491
<24491=24493,24492
<24493=24494
<24495=24496
<24496=24502,24497
<24497=24498
<24498=24499
<24499=24501,24500
<24502=24503
<24504=24505
<24505=24509,24506
<24506=24507
<24507=24508
<24509=24510
<24511=24512
<24512=24522,24513
<24513=24520,24518,24516,24514
<24514=24515
<24516=24517
<24518=24519
<24520=24521
<24522=24523
<24524=24525
<24525=24531,24526
<24526=24527
<24527=24528
<24528=24530,24529
<24531=24532
<24533=24534
<24534=24538,24535
<24535=24536
<24536=24537
<24538=24539
<24547=24550,24549,24548
<24550=24583,24574,24565,24556,24551
<24551=24552
<24552=24554,24553
<24554=24555
<24556=24557
<24557=24563,24558
<24558=24559
<24559=24560
<24560=24562,24561
<24563=24564
<24565=24566
<24566=24572,24567
<24567=24570,24568
<24568=24569
<24570=24571
<24572=24573
<24574=24575
<24575=24581,24576
<24576=24577
<24577=24578
<24578=24580,24579
<24581=24582
<24583=24584
<24584=24588,24585
<24585=24586
<24586=24587
<24588=24589
<24598=24601,24600,24599
<24601=24609,24602
<24602=24603
<24603=24607,24604
<24604=24605
<24605=24606
<24607=24608
<24609=24610
<24610=24612,24611
<24618=24621,24620,24619
<24621=24627,24622
<24622=24623
<24623=24625,24624
<24625=24626
<24627=24628
<24628=24630,24629
<24630=24631
<24635=24638,24637,24636
<24638=24639
<24639=24640
<24640=24642,24641
<24642=24643
<24647=24650,24649,24648
<24650=24685,24684,24683,24682,24681,24680,24679,24678,24677,24676,24675,24674,24673,24672,24671,24670,24669,24668,24667,24666,24665,24664,24662,24661,24660,24659,24658,24651
<24651=24652
<24652=24656,24653
<24653=24654
<24654=24655
<24656=24657
<24662=24663
<24685=24686
<24686=24688,24687
<24688=24690,24689
<24697=24700,24699,24698
<24700=24708,24701
<24701=24702
<24702=24706,24703
<24703=24704
<24704=24705
<24706=24707
<24708=24709
<24709=24711,24710
<24711=24712
<24717=24720,24719,24718
<24720=24732,24721
<24721=24722
<24722=24730,24723
<24723=24724
<24724=24725
<24725=24729,24726
<24726=24728,24727
<24730=24731
<24732=24733
<24733=24735,24734
<24735=24736
<24743=24746,24745,24744
<24746=24747
<24747=24796,24769,24748
<24748=24749
<24749=24768,24757,24750
<24750=24751
<24751=24755,24752
<24752=24753
<24753=24754
<24755=24756
<24757=24758
<24758=24766,24759
<24759=24762,24760
<24760=24761
<24762=24763
<24763=24765,24764
<24766=24767
<24769=24795,24794,24793,24792,24791,24790,24789,24788,24787,24786,24785,24784,24783,24782,24781,24770
<24770=24771
<24771=24779,24772
<24772=24775,24773
<24773=24774
<24775=24776
<24776=24778,24777
<24779=24780
<24796=24797
<24797=24801,24798
<24798=24800,24799
<24801=24803,24802
<24813=24816,24815,24814
<24816=24824,24817
<24817=24818
<24818=24822,24819
<24819=24820
<24820=24821
<24822=24823
<24824=24825
<24825=24829,24826
<24826=24827
<24827=24828
<24829=24830
<24835=24838,24837,24836
<24838=24866,24839
<24839=24857,24840
<24840=24848,24841
<24841=24842
<24842=24846,24843
<24843=24844
<24844=24845
<24846=24847
<24848=24849
<24849=24855,24850
<24850=24851
<24851=24852
<24852=24854,24853
<24855=24856
<24857=24858
<24858=24860,24859
<24860=24862,24861
<24862=24863
<24863=24865,24864
<24866=24867
<24867=24872,24871,24868
<24868=24870,24869
<24881=24884,24883,24882
<24888=24891,24890,24889
<24891=24899,24892
<24892=24893
<24893=24897,24894
<24894=24895
<24895=24896
<24897=24898
<24899=24900
<24900=24904,24901
<24901=24902
<24902=24903
<24904=24905
<24910=24913,24912,24911
<24913=24953,24942,24935,24926,24921,24914
<24914=24915
<24915=24919,24916
<24916=24917
<24917=24918
<24919=24920
<24921=24922
<24922=24924,24923
<24924=24925
<24926=24927
<24927=24931,24928
<24928=24929
<24929=24930
<24931=24932
<24932=24934,24933
<24935=24936
<24936=24938,24937
<24938=24939
<24939=24941,24940
<24942=24943
<24943=24950,24944
<24944=24946,24945
<24946=24947
<24947=24949,24948
<24950=24952,24951
<24953=24954
<24954=24956,24955
<24956=24958,24957
<24971=24974,24973,24972
<24974=24982,24975
<24975=24976
<24976=24978,24977
<24978=24979
<24979=24981,24980
<24982=24983
<24983=24987,24984
<24984=24985
<24985=24986
<24987=24988
<24988=24990,24989
<24995=24998,24997,24996
<24998=24999
<24999=25000
<25000=25004,25001
<25001=25002
<25002=25003
<25004=25005
<25005=25007,25006
<25012=25015,25014,25013
<25015=25023,25016
<25016=25017
<25017=25021,25018
<25018=25019
<25019=25020
<25021=25022
<25023=25024
<25024=25026,25025
<25026=25027
<25034=25037,25036,25035
<25037=25228,25219,25207,25198,25191,25187,25180,25176,25047,25038
<25038=25039
<25039=25043,25040
<25040=25041
<25041=25042
<25043=25044
<25044=25046,25045
<25047=25170,25048
<25048=25166,25129,25096,25067,25056,25049
<25049=25050
<25050=25055,25051
<25051=25053,25052
<25053=25054
<25056=25057
<25057=25063,25058
<25058=25059
<25059=25060
<25060=25062,25061
<25063=25064
<25064=25066,25065
<25067=25068
<25068=25081,25069
<25069=25073,25070
<25070=25072,25071
<25073=25079,25074
<25074=25075
<25075=25076
<25076=25078,25077
<25079=25080
<25081=25083,25082
<25083=25085,25084
<25085=25087,25086
<25087=25088
<25088=25090,25089
<25090=25092,25091
<25092=25093
<25093=25095,25094
<25096=25097
<25097=25114,25098
<25098=25102,25099
<25099=25101,25100
<25102=25112,25103
<25103=25108,25104
<25104=25105
<25105=25107,25106
<25108=25109
<25109=25111,25110
<25112=25113
<25114=25116,25115
<25116=25118,25117
<25118=25120,25119
<25120=25121
<25121=25123,25122
<25123=25125,25124
<25125=25126
<25126=25128,25127
<25129=25130
<25130=25162,25131
<25131=25160,25142,25136,25132
<25132=25133
<25133=25135,25134
<25136=25137
<25137=25141,25138
<25138=25140,25139
<25142=25143
<25143=25159,25144
<25144=25146,25145
<25146=25148,25147
<25148=25150,25149
<25150=25151
<25151=25153,25152
<25153=25155,25154
<25155=25156
<25156=25158,25157
<25160=25161
<25162=25163
<25163=25165,25164
<25166=25167
<25167=25169,25168
<25170=25171
<25171=25175,25172
<25172=25174,25173
<25176=25177
<25177=25179,25178
<25180=25181
<25181=25185,25182
<25182=25183
<25183=25184
<25185=25186
<25187=25188
<25188=25190,25189
<25191=25192
<25192=25197,25196,25193
<25193=25195,25194
<25198=25199
<25199=25206,25205,25200
<25200=25204,25201
<25201=25203,25202
<25207=25208
<25208=25218,25217,25209
<25209=25216,25210
<25210=25212,25211
<25212=25213
<25213=25215,25214
<25219=25220
<25220=25224,25221
<25221=25222
<25222=25223
<25224=25225
<25225=25227,25226
<25228=25229
<25229=25237,25236,25230
<25230=25235,25231
<25231=25233,25232
<25233=25234
<25276=25279,25278,25277
<25283=25286,25285,25284
<25290=25293,25292,25291
<25297=25300,25299,25298
<25300=25319,25306,25301
<25301=25302
<25302=25304,25303
<25304=25305
<25306=25307
<25307=25316,25308
<25308=25312,25309
<25309=25310
<25310=25311
<25312=25313
<25313=25315,25314
<25316=25318,25317
<25319=25320
<25320=25322,25321
<25322=25324,25323
<25336=25339,25338,25337
<25339=25358,25345,25340
<25340=25341
<25341=25343,25342
<25343=25344
<25345=25346
<25346=25355,25347
<25347=25351,25348
<25348=25349
<25349=25350
<25351=25352
<25352=25354,25353
<25355=25357,25356
<25358=25359
<25359=25361,25360
<25361=25363,25362
<25375=25378,25377,25376
<25378=25397,25384,25379
<25379=25380
<25380=25382,25381
<25382=25383
<25384=25385
<25385=25394,25386
<25386=25390,25387
<25387=25388
<25388=25389
<25390=25391
<25391=25393,25392
<25394=25396,25395
<25397=25398
<25398=25400,25399
<25400=25402,25401
