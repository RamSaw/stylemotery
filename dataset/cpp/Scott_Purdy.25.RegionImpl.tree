>3	FunctionDef	RegionImpl 
>4	ParameterList	Region * region
>5	Parameter	 
>6	Identifier	region
>7	ParameterType	Region *
>8	CompoundStatement	 
>13	FunctionDef	RegionImpl 
>14	ParameterList	 
>15	CompoundStatement	 
>19	FunctionDef	RegionImpl 
>20	ParameterList	 
>21	ReturnType	const std 
>22	CompoundStatement	 
>23	ReturnStatement	 
>24	CallExpression	region_ -> getType ( )
>25	ArgumentList	 
>26	Callee	region_ -> getType
>27	PtrMemberAccess	region_ -> getType
>28	Identifier	getType
>29	Identifier	region_
>36	FunctionDef	RegionImpl 
>37	ParameterList	 
>38	ReturnType	const std 
>39	CompoundStatement	 
>40	ReturnStatement	 
>41	CallExpression	region_ -> getName ( )
>42	ArgumentList	 
>43	Callee	region_ -> getName
>44	PtrMemberAccess	region_ -> getName
>45	Identifier	getName
>46	Identifier	region_
>53	FunctionDef	RegionImpl 
>54	ParameterList	 
>55	ReturnType	const NodeSet &
>56	CompoundStatement	 
>57	ReturnStatement	 
>58	CallExpression	region_ -> getEnabledNodes ( )
>59	ArgumentList	 
>60	Callee	region_ -> getEnabledNodes
>61	PtrMemberAccess	region_ -> getEnabledNodes
>62	Identifier	getEnabledNodes
>63	Identifier	region_
>70	FunctionDef	Type (const std 
>71	ParameterList	const std 
>72	Parameter	 
>73	Identifier	index
>74	ParameterType	Int64
>75	Parameter	 
>76	Identifier	name
>77	ParameterType	const std 
>78	ReturnType	Type RegionImpl 
>79	CompoundStatement	 
>80	ReturnStatement	 
>81	Identifier	val
>82	IfStatement	if ( rc != 0 )
>83	CompoundStatement	 
>84	ExpressionStatement	 
>85	ShiftExpression	\" -- failure to get parameter '\" << name << \"' on node of type \" << getType ( )
>86	ShiftExpression	name << \"' on node of type \" << getType ( )
>87	ShiftExpression	\"' on node of type \" << getType ( )
>88	CallExpression	getType ( )
>89	ArgumentList	 
>90	Callee	getType
>91	Identifier	getType
>92	PrimaryExpression	\"' on node of type \"
>93	Identifier	name
>94	PrimaryExpression	\" -- failure to get parameter '\"
>95	Statement	 
>96	Statement	 
>97	Statement	 
>98	Statement	 
>99	Condition	 
>100	EqualityExpression	rc != 0
>101	PrimaryExpression	0
>102	Identifier	rc
>103	IdentifierDeclStatement	 
>104	IdentifierDecl	rc = rb . read ( val )
>105	AssignmentExpr	rc = rb . read ( val )
>106	CallExpression	rb . read ( val )
>107	ArgumentList	val
>108	Argument	val
>109	Identifier	val
>110	Callee	rb . read
>111	MemberAccess	rb . read
>112	Identifier	read
>113	Identifier	rb
>114	Identifier	rc
>115	Identifier	rc
>116	IdentifierDeclType	int
>117	IdentifierDeclStatement	 
>118	IdentifierDecl	val
>119	Identifier	val
>120	IdentifierDeclType	Type
>121	IdentifierDeclStatement	 
>122	IdentifierDecl	rb ( wb . getData ( ) , wb . getSize ( ) , false )
>123	Expression	wb . getData ( ) , wb . getSize ( ) , false
>124	Expression	wb . getSize ( ) , false
>125	Identifier	false
>126	CallExpression	wb . getSize ( )
>127	ArgumentList	 
>128	Callee	wb . getSize
>129	MemberAccess	wb . getSize
>130	Identifier	getSize
>131	Identifier	wb
>132	CallExpression	wb . getData ( )
>133	ArgumentList	 
>134	Callee	wb . getData
>135	MemberAccess	wb . getData
>136	Identifier	getData
>137	Identifier	wb
>138	Identifier	rb
>139	IdentifierDeclType	ReadBuffer
>140	ExpressionStatement	 
>141	CallExpression	getParameterFromBuffer ( name , index , wb )
>142	ArgumentList	name
>143	Argument	wb
>144	Identifier	wb
>145	Argument	index
>146	Identifier	index
>147	Argument	name
>148	Identifier	name
>149	Callee	getParameterFromBuffer
>150	Identifier	getParameterFromBuffer
>151	IdentifierDeclStatement	 
>152	IdentifierDecl	wb
>153	Identifier	wb
>154	IdentifierDeclType	WriteBuffer
>155	ExpressionStatement	 
>156	Identifier	Type
>157	Statement	 
>158	Statement	 
>159	Statement	 
>160	Statement	 
>161	Statement	 
>162	Statement	 
>163	Statement	 
>164	Statement	 
>165	Statement	 
>166	Statement	 
>167	Statement	 
>168	Statement	 
>169	Statement	 
>170	Statement	 
>171	Statement	 
>172	Statement	 
>173	Statement	 
>174	Statement	 
>175	Statement	 
>176	Statement	 
>177	Statement	 
>178	Statement	 
>179	Statement	 
>180	Statement	 
>181	Statement	 
>182	Statement	 
>183	Statement	 
>184	Statement	 
>185	Statement	 
>186	IdentifierDeclStatement	 
>187	IdentifierDecl	p = region_ -> getSpec ( ) -> parameters . getByName ( name )
>188	AssignmentExpr	p = region_ -> getSpec ( ) -> parameters . getByName ( name )
>189	CallExpression	region_ -> getSpec ( ) -> parameters . getByName ( name )
>190	ArgumentList	name
>191	Argument	name
>192	Identifier	name
>193	Callee	region_ -> getSpec ( ) -> parameters . getByName
>194	MemberAccess	region_ -> getSpec ( ) -> parameters . getByName
>195	Identifier	getByName
>196	PtrMemberAccess	region_ -> getSpec ( ) -> parameters
>197	Identifier	parameters
>198	CallExpression	region_ -> getSpec ( )
>199	ArgumentList	 
>200	Callee	region_ -> getSpec
>201	PtrMemberAccess	region_ -> getSpec
>202	Identifier	getSpec
>203	Identifier	region_
>204	Identifier	p
>205	Identifier	p
>206	IdentifierDeclType	ParameterSpec
>207	ExpressionStatement	 
>208	ShiftExpression	\"
>209	ShiftExpression	name << \" does not exist in nodespec\"
>210	PrimaryExpression	\" does not exist in nodespec\"
>211	Identifier	name
>212	PrimaryExpression	\"
>213	Statement	 
>214	Statement	 
>215	Statement	 
>216	IfStatement	if ( ! region_ -> getSpec ( ) -> parameters . contains ( name ) )
>217	Statement	 
>218	Condition	 
>219	UnaryOp	! region_ -> getSpec ( ) -> parameters . contains ( name )
>220	CallExpression	region_ -> getSpec ( ) -> parameters . contains ( name )
>221	ArgumentList	name
>222	Argument	name
>223	Identifier	name
>224	Callee	region_ -> getSpec ( ) -> parameters . contains
>225	MemberAccess	region_ -> getSpec ( ) -> parameters . contains
>226	Identifier	contains
>227	PtrMemberAccess	region_ -> getSpec ( ) -> parameters
>228	Identifier	parameters
>229	CallExpression	region_ -> getSpec ( )
>230	ArgumentList	 
>231	Callee	region_ -> getSpec
>232	PtrMemberAccess	region_ -> getSpec
>233	Identifier	getSpec
>234	Identifier	region_
>235	UnaryOperator	!
>255	FunctionDef	Type (const std 
>256	ParameterList	const std 
>257	Parameter	 
>258	Identifier	value
>259	ParameterType	Type
>260	Parameter	 
>261	Identifier	index
>262	ParameterType	Int64
>263	Parameter	 
>264	Identifier	name
>265	ParameterType	const std 
>266	ReturnType	void RegionImpl 
>267	CompoundStatement	 
>268	ExpressionStatement	 
>269	CallExpression	setParameterFromBuffer ( name , index , rb )
>270	ArgumentList	name
>271	Argument	rb
>272	Identifier	rb
>273	Argument	index
>274	Identifier	index
>275	Argument	name
>276	Identifier	name
>277	Callee	setParameterFromBuffer
>278	Identifier	setParameterFromBuffer
>279	IdentifierDeclStatement	 
>280	IdentifierDecl	rb ( wb . getData ( ) , wb . getSize ( ) , false )
>281	Expression	wb . getData ( ) , wb . getSize ( ) , false
>282	Expression	wb . getSize ( ) , false
>283	Identifier	false
>284	CallExpression	wb . getSize ( )
>285	ArgumentList	 
>286	Callee	wb . getSize
>287	MemberAccess	wb . getSize
>288	Identifier	getSize
>289	Identifier	wb
>290	CallExpression	wb . getData ( )
>291	ArgumentList	 
>292	Callee	wb . getData
>293	MemberAccess	wb . getData
>294	Identifier	getData
>295	Identifier	wb
>296	Identifier	rb
>297	IdentifierDeclType	ReadBuffer
>298	ExpressionStatement	 
>299	CallExpression	wb . write ( ( Type ) value )
>300	ArgumentList	( Type ) value
>301	Argument	( Type ) value
>302	CastExpression	( Type ) value
>303	Identifier	value
>304	CastTarget	Type
>305	Callee	wb . write
>306	MemberAccess	wb . write
>307	Identifier	write
>308	Identifier	wb
>309	IdentifierDeclStatement	 
>310	IdentifierDecl	wb
>311	Identifier	wb
>312	IdentifierDeclType	WriteBuffer
>321	FunctionDef	RegionImpl 
>322	ParameterList	const std 
>323	Parameter	 
>324	Identifier	index
>325	ParameterType	Int64
>326	Parameter	 
>327	Identifier	name
>328	ParameterType	const std 
>329	ReturnType	Handle
>330	CompoundStatement	 
>331	ExpressionStatement	 
>332	ShiftExpression	NTA_THROW << \"Unknown parameter '\" << name << \"' of type Handle.\"
>333	ShiftExpression	\"Unknown parameter '\" << name << \"' of type Handle.\"
>334	ShiftExpression	name << \"' of type Handle.\"
>335	PrimaryExpression	\"' of type Handle.\"
>336	Identifier	name
>337	PrimaryExpression	\"Unknown parameter '\"
>338	Identifier	NTA_THROW
>344	FunctionDef	RegionImpl 
>345	ParameterList	const std 
>346	Parameter	 
>347	Identifier	h
>348	ParameterType	Handle
>349	Parameter	 
>350	Identifier	index
>351	ParameterType	Int64
>352	Parameter	 
>353	Identifier	name
>354	ParameterType	const std 
>355	ReturnType	void
>356	CompoundStatement	 
>357	ExpressionStatement	 
>358	ShiftExpression	NTA_THROW << \"Unknown parameter '\" << name << \"' of type Handle.\"
>359	ShiftExpression	\"Unknown parameter '\" << name << \"' of type Handle.\"
>360	ShiftExpression	name << \"' of type Handle.\"
>361	PrimaryExpression	\"' of type Handle.\"
>362	Identifier	name
>363	PrimaryExpression	\"Unknown parameter '\"
>364	Identifier	NTA_THROW
>371	FunctionDef	RegionImpl 
>372	ParameterList	const std 
>373	Parameter	 
>374	Identifier	array
>375	ParameterType	Array &
>376	Parameter	 
>377	Identifier	index
>378	ParameterType	Int64
>379	Parameter	 
>380	Identifier	name
>381	ParameterType	const std 
>382	ReturnType	void
>383	CompoundStatement	 
>384	ReturnStatement	 
>385	ForStatement	for ( size_t i = 0 ; i < count ; i ++ )
>386	CompoundStatement	 
>387	IfStatement	if ( rc != 0 )
>388	CompoundStatement	 
>389	ExpressionStatement	 
>390	ShiftExpression	NTA_THROW << \"getParameterArray -- failure to get parameter '\" << name << \"' on node of type \" << getType ( )
>391	ShiftExpression	\"getParameterArray -- failure to get parameter '\" << name << \"' on node of type \" << getType ( )
>392	ShiftExpression	name << \"' on node of type \" << getType ( )
>393	ShiftExpression	\"' on node of type \" << getType ( )
>394	CallExpression	getType ( )
>395	ArgumentList	 
>396	Callee	getType
>397	Identifier	getType
>398	PrimaryExpression	\"' on node of type \"
>399	Identifier	name
>400	PrimaryExpression	\"getParameterArray -- failure to get parameter '\"
>401	Identifier	NTA_THROW
>402	Condition	 
>403	EqualityExpression	rc != 0
>404	PrimaryExpression	0
>405	Identifier	rc
>406	SwitchStatement	switch ( array . getType ( ) )
>407	CompoundStatement	 
>408	BreakStatement	 
>409	ExpressionStatement	 
>410	ShiftExpression	NTA_THROW << \"Unsupported basic type \" << BasicType 
>411	ShiftExpression	\"Unsupported basic type \" << BasicType 
>412	ShiftExpression	BasicType 
>413	ShiftExpression	\" in getParameterArray for parameter \" << name
>414	Identifier	name
>415	PrimaryExpression	\" in getParameterArray for parameter \"
>416	CallExpression	BasicType 
>417	ArgumentList	array . getType ( )
>418	Argument	array . getType ( )
>419	CallExpression	array . getType ( )
>420	ArgumentList	 
>421	Callee	array . getType
>422	MemberAccess	array . getType
>423	Identifier	getType
>424	Identifier	array
>425	Callee	BasicType 
>426	Identifier	BasicType 
>427	PrimaryExpression	\"Unsupported basic type \"
>428	Identifier	NTA_THROW
>429	Label	 
>430	Identifier	default
>431	BreakStatement	 
>432	ExpressionStatement	 
>433	AssignmentExpr	rc = rb . read ( ( ( Real64 * ) buffer ) [ i ] )
>434	CallExpression	rb . read ( ( ( Real64 * ) buffer ) [ i ] )
>435	ArgumentList	( ( Real64 * ) buffer ) [ i ]
>436	Argument	( ( Real64 * ) buffer ) [ i ]
>437	ArrayIndexing	( ( Real64 * ) buffer ) [ i ]
>438	Identifier	i
>439	CastExpression	( Real64 * ) buffer
>440	Identifier	buffer
>441	CastTarget	Real64 *
>442	Callee	rb . read
>443	MemberAccess	rb . read
>444	Identifier	read
>445	Identifier	rb
>446	Identifier	rc
>447	Label	 
>448	Identifier	NTA_BasicType_Real64
>449	BreakStatement	 
>450	ExpressionStatement	 
>451	AssignmentExpr	rc = rb . read ( ( ( Real32 * ) buffer ) [ i ] )
>452	CallExpression	rb . read ( ( ( Real32 * ) buffer ) [ i ] )
>453	ArgumentList	( ( Real32 * ) buffer ) [ i ]
>454	Argument	( ( Real32 * ) buffer ) [ i ]
>455	ArrayIndexing	( ( Real32 * ) buffer ) [ i ]
>456	Identifier	i
>457	CastExpression	( Real32 * ) buffer
>458	Identifier	buffer
>459	CastTarget	Real32 *
>460	Callee	rb . read
>461	MemberAccess	rb . read
>462	Identifier	read
>463	Identifier	rb
>464	Identifier	rc
>465	Label	 
>466	Identifier	NTA_BasicType_Real32
>467	BreakStatement	 
>468	ExpressionStatement	 
>469	AssignmentExpr	rc = rb . read ( ( ( UInt64 * ) buffer ) [ i ] )
>470	CallExpression	rb . read ( ( ( UInt64 * ) buffer ) [ i ] )
>471	ArgumentList	( ( UInt64 * ) buffer ) [ i ]
>472	Argument	( ( UInt64 * ) buffer ) [ i ]
>473	ArrayIndexing	( ( UInt64 * ) buffer ) [ i ]
>474	Identifier	i
>475	CastExpression	( UInt64 * ) buffer
>476	Identifier	buffer
>477	CastTarget	UInt64 *
>478	Callee	rb . read
>479	MemberAccess	rb . read
>480	Identifier	read
>481	Identifier	rb
>482	Identifier	rc
>483	Label	 
>484	Identifier	NTA_BasicType_UInt64
>485	BreakStatement	 
>486	ExpressionStatement	 
>487	AssignmentExpr	rc = rb . read ( ( ( Int64 * ) buffer ) [ i ] )
>488	CallExpression	rb . read ( ( ( Int64 * ) buffer ) [ i ] )
>489	ArgumentList	( ( Int64 * ) buffer ) [ i ]
>490	Argument	( ( Int64 * ) buffer ) [ i ]
>491	ArrayIndexing	( ( Int64 * ) buffer ) [ i ]
>492	Identifier	i
>493	CastExpression	( Int64 * ) buffer
>494	Identifier	buffer
>495	CastTarget	Int64 *
>496	Callee	rb . read
>497	MemberAccess	rb . read
>498	Identifier	read
>499	Identifier	rb
>500	Identifier	rc
>501	Label	 
>502	Identifier	NTA_BasicType_Int64
>503	BreakStatement	 
>504	ExpressionStatement	 
>505	AssignmentExpr	rc = rb . read ( ( ( UInt32 * ) buffer ) [ i ] )
>506	CallExpression	rb . read ( ( ( UInt32 * ) buffer ) [ i ] )
>507	ArgumentList	( ( UInt32 * ) buffer ) [ i ]
>508	Argument	( ( UInt32 * ) buffer ) [ i ]
>509	ArrayIndexing	( ( UInt32 * ) buffer ) [ i ]
>510	Identifier	i
>511	CastExpression	( UInt32 * ) buffer
>512	Identifier	buffer
>513	CastTarget	UInt32 *
>514	Callee	rb . read
>515	MemberAccess	rb . read
>516	Identifier	read
>517	Identifier	rb
>518	Identifier	rc
>519	Label	 
>520	Identifier	NTA_BasicType_UInt32
>521	BreakStatement	 
>522	ExpressionStatement	 
>523	AssignmentExpr	rc = rb . read ( ( ( Int32 * ) buffer ) [ i ] )
>524	CallExpression	rb . read ( ( ( Int32 * ) buffer ) [ i ] )
>525	ArgumentList	( ( Int32 * ) buffer ) [ i ]
>526	Argument	( ( Int32 * ) buffer ) [ i ]
>527	ArrayIndexing	( ( Int32 * ) buffer ) [ i ]
>528	Identifier	i
>529	CastExpression	( Int32 * ) buffer
>530	Identifier	buffer
>531	CastTarget	Int32 *
>532	Callee	rb . read
>533	MemberAccess	rb . read
>534	Identifier	read
>535	Identifier	rb
>536	Identifier	rc
>537	Label	 
>538	Identifier	NTA_BasicType_Int32
>539	BreakStatement	 
>540	ExpressionStatement	 
>541	AssignmentExpr	rc = rb . read ( ( ( Byte * ) buffer ) [ i ] )
>542	CallExpression	rb . read ( ( ( Byte * ) buffer ) [ i ] )
>543	ArgumentList	( ( Byte * ) buffer ) [ i ]
>544	Argument	( ( Byte * ) buffer ) [ i ]
>545	ArrayIndexing	( ( Byte * ) buffer ) [ i ]
>546	Identifier	i
>547	CastExpression	( Byte * ) buffer
>548	Identifier	buffer
>549	CastTarget	Byte *
>550	Callee	rb . read
>551	MemberAccess	rb . read
>552	Identifier	read
>553	Identifier	rb
>554	Identifier	rc
>555	Label	 
>556	Identifier	NTA_BasicType_Byte
>557	Condition	 
>558	CallExpression	array . getType ( )
>559	ArgumentList	 
>560	Callee	array . getType
>561	MemberAccess	array . getType
>562	Identifier	getType
>563	Identifier	array
>564	IdentifierDeclStatement	 
>565	IdentifierDecl	rc
>566	Identifier	rc
>567	IdentifierDeclType	int
>568	IncDecOp	 
>569	IncDec	++
>570	Identifier	i
>571	Condition	 
>572	RelationalExpression	i < count
>573	Identifier	count
>574	Identifier	i
>575	ForInit	 
>576	IdentifierDeclStatement	size_t i = 0 ;
>577	IdentifierDecl	i = 0
>578	AssignmentExpr	i = 0
>579	PrimaryExpression	0
>580	Identifier	i
>581	Identifier	i
>582	IdentifierDeclType	size_t
>583	IdentifierDeclStatement	 
>584	IdentifierDecl	* buffer = array . getBuffer ( )
>585	AssignmentExpr	* buffer = array . getBuffer ( )
>586	CallExpression	array . getBuffer ( )
>587	ArgumentList	 
>588	Callee	array . getBuffer
>589	MemberAccess	array . getBuffer
>590	Identifier	getBuffer
>591	Identifier	array
>592	Identifier	buffer
>593	Identifier	buffer
>594	IdentifierDeclType	void *
>595	IdentifierDeclStatement	 
>596	IdentifierDecl	count = array . getCount ( )
>597	AssignmentExpr	count = array . getCount ( )
>598	CallExpression	array . getCount ( )
>599	ArgumentList	 
>600	Callee	array . getCount
>601	MemberAccess	array . getCount
>602	Identifier	getCount
>603	Identifier	array
>604	Identifier	count
>605	Identifier	count
>606	IdentifierDeclType	size_t
>607	IdentifierDeclStatement	 
>608	IdentifierDecl	rb ( wb . getData ( ) , wb . getSize ( ) , false )
>609	Expression	wb . getData ( ) , wb . getSize ( ) , false
>610	Expression	wb . getSize ( ) , false
>611	Identifier	false
>612	CallExpression	wb . getSize ( )
>613	ArgumentList	 
>614	Callee	wb . getSize
>615	MemberAccess	wb . getSize
>616	Identifier	getSize
>617	Identifier	wb
>618	CallExpression	wb . getData ( )
>619	ArgumentList	 
>620	Callee	wb . getData
>621	MemberAccess	wb . getData
>622	Identifier	getData
>623	Identifier	wb
>624	Identifier	rb
>625	IdentifierDeclType	ReadBuffer
>626	ExpressionStatement	 
>627	CallExpression	getParameterFromBuffer ( name , index , wb )
>628	ArgumentList	name
>629	Argument	wb
>630	Identifier	wb
>631	Argument	index
>632	Identifier	index
>633	Argument	name
>634	Identifier	name
>635	Callee	getParameterFromBuffer
>636	Identifier	getParameterFromBuffer
>637	IdentifierDeclStatement	 
>638	IdentifierDecl	wb
>639	Identifier	wb
>640	IdentifierDeclType	WriteBuffer
>659	FunctionDef	RegionImpl 
>660	ParameterList	const std 
>661	Parameter	 
>662	Identifier	array
>663	ParameterType	const Array &
>664	Parameter	 
>665	Identifier	index
>666	ParameterType	Int64
>667	Parameter	 
>668	Identifier	name
>669	ParameterType	const std 
>670	ReturnType	void
>671	CompoundStatement	 
>672	ExpressionStatement	 
>673	CallExpression	setParameterFromBuffer ( name , index , rb )
>674	ArgumentList	name
>675	Argument	rb
>676	Identifier	rb
>677	Argument	index
>678	Identifier	index
>679	Argument	name
>680	Identifier	name
>681	Callee	setParameterFromBuffer
>682	Identifier	setParameterFromBuffer
>683	IdentifierDeclStatement	 
>684	IdentifierDecl	rb ( wb . getData ( ) , wb . getSize ( ) , false )
>685	Expression	wb . getData ( ) , wb . getSize ( ) , false
>686	Expression	wb . getSize ( ) , false
>687	Identifier	false
>688	CallExpression	wb . getSize ( )
>689	ArgumentList	 
>690	Callee	wb . getSize
>691	MemberAccess	wb . getSize
>692	Identifier	getSize
>693	Identifier	wb
>694	CallExpression	wb . getData ( )
>695	ArgumentList	 
>696	Callee	wb . getData
>697	MemberAccess	wb . getData
>698	Identifier	getData
>699	Identifier	wb
>700	Identifier	rb
>701	IdentifierDeclType	ReadBuffer
>702	ForStatement	for ( size_t i = 0 ; i < count ; i ++ )
>703	CompoundStatement	 
>704	SwitchStatement	switch ( array . getType ( ) )
>705	CompoundStatement	 
>706	BreakStatement	 
>707	ExpressionStatement	 
>708	ShiftExpression	NTA_THROW << \"Unsupported basic type \" << BasicType 
>709	ShiftExpression	\"Unsupported basic type \" << BasicType 
>710	ShiftExpression	BasicType 
>711	ShiftExpression	\" in setParameterArray for parameter \" << name
>712	Identifier	name
>713	PrimaryExpression	\" in setParameterArray for parameter \"
>714	CallExpression	BasicType 
>715	ArgumentList	array . getType ( )
>716	Argument	array . getType ( )
>717	CallExpression	array . getType ( )
>718	ArgumentList	 
>719	Callee	array . getType
>720	MemberAccess	array . getType
>721	Identifier	getType
>722	Identifier	array
>723	Callee	BasicType 
>724	Identifier	BasicType 
>725	PrimaryExpression	\"Unsupported basic type \"
>726	Identifier	NTA_THROW
>727	Label	 
>728	Identifier	default
>729	BreakStatement	 
>730	ExpressionStatement	 
>731	AssignmentExpr	rc = wb . write ( ( ( Real64 * ) buffer ) [ i ] )
>732	CallExpression	wb . write ( ( ( Real64 * ) buffer ) [ i ] )
>733	ArgumentList	( ( Real64 * ) buffer ) [ i ]
>734	Argument	( ( Real64 * ) buffer ) [ i ]
>735	ArrayIndexing	( ( Real64 * ) buffer ) [ i ]
>736	Identifier	i
>737	CastExpression	( Real64 * ) buffer
>738	Identifier	buffer
>739	CastTarget	Real64 *
>740	Callee	wb . write
>741	MemberAccess	wb . write
>742	Identifier	write
>743	Identifier	wb
>744	Identifier	rc
>745	Label	 
>746	Identifier	NTA_BasicType_Real64
>747	BreakStatement	 
>748	ExpressionStatement	 
>749	AssignmentExpr	rc = wb . write ( ( ( Real32 * ) buffer ) [ i ] )
>750	CallExpression	wb . write ( ( ( Real32 * ) buffer ) [ i ] )
>751	ArgumentList	( ( Real32 * ) buffer ) [ i ]
>752	Argument	( ( Real32 * ) buffer ) [ i ]
>753	ArrayIndexing	( ( Real32 * ) buffer ) [ i ]
>754	Identifier	i
>755	CastExpression	( Real32 * ) buffer
>756	Identifier	buffer
>757	CastTarget	Real32 *
>758	Callee	wb . write
>759	MemberAccess	wb . write
>760	Identifier	write
>761	Identifier	wb
>762	Identifier	rc
>763	Label	 
>764	Identifier	NTA_BasicType_Real32
>765	BreakStatement	 
>766	ExpressionStatement	 
>767	AssignmentExpr	rc = wb . write ( ( ( UInt64 * ) buffer ) [ i ] )
>768	CallExpression	wb . write ( ( ( UInt64 * ) buffer ) [ i ] )
>769	ArgumentList	( ( UInt64 * ) buffer ) [ i ]
>770	Argument	( ( UInt64 * ) buffer ) [ i ]
>771	ArrayIndexing	( ( UInt64 * ) buffer ) [ i ]
>772	Identifier	i
>773	CastExpression	( UInt64 * ) buffer
>774	Identifier	buffer
>775	CastTarget	UInt64 *
>776	Callee	wb . write
>777	MemberAccess	wb . write
>778	Identifier	write
>779	Identifier	wb
>780	Identifier	rc
>781	Label	 
>782	Identifier	NTA_BasicType_UInt64
>783	BreakStatement	 
>784	ExpressionStatement	 
>785	AssignmentExpr	rc = wb . write ( ( ( Int64 * ) buffer ) [ i ] )
>786	CallExpression	wb . write ( ( ( Int64 * ) buffer ) [ i ] )
>787	ArgumentList	( ( Int64 * ) buffer ) [ i ]
>788	Argument	( ( Int64 * ) buffer ) [ i ]
>789	ArrayIndexing	( ( Int64 * ) buffer ) [ i ]
>790	Identifier	i
>791	CastExpression	( Int64 * ) buffer
>792	Identifier	buffer
>793	CastTarget	Int64 *
>794	Callee	wb . write
>795	MemberAccess	wb . write
>796	Identifier	write
>797	Identifier	wb
>798	Identifier	rc
>799	Label	 
>800	Identifier	NTA_BasicType_Int64
>801	BreakStatement	 
>802	ExpressionStatement	 
>803	AssignmentExpr	rc = wb . write ( ( ( UInt32 * ) buffer ) [ i ] )
>804	CallExpression	wb . write ( ( ( UInt32 * ) buffer ) [ i ] )
>805	ArgumentList	( ( UInt32 * ) buffer ) [ i ]
>806	Argument	( ( UInt32 * ) buffer ) [ i ]
>807	ArrayIndexing	( ( UInt32 * ) buffer ) [ i ]
>808	Identifier	i
>809	CastExpression	( UInt32 * ) buffer
>810	Identifier	buffer
>811	CastTarget	UInt32 *
>812	Callee	wb . write
>813	MemberAccess	wb . write
>814	Identifier	write
>815	Identifier	wb
>816	Identifier	rc
>817	Label	 
>818	Identifier	NTA_BasicType_UInt32
>819	BreakStatement	 
>820	ExpressionStatement	 
>821	AssignmentExpr	rc = wb . write ( ( ( Int32 * ) buffer ) [ i ] )
>822	CallExpression	wb . write ( ( ( Int32 * ) buffer ) [ i ] )
>823	ArgumentList	( ( Int32 * ) buffer ) [ i ]
>824	Argument	( ( Int32 * ) buffer ) [ i ]
>825	ArrayIndexing	( ( Int32 * ) buffer ) [ i ]
>826	Identifier	i
>827	CastExpression	( Int32 * ) buffer
>828	Identifier	buffer
>829	CastTarget	Int32 *
>830	Callee	wb . write
>831	MemberAccess	wb . write
>832	Identifier	write
>833	Identifier	wb
>834	Identifier	rc
>835	Label	 
>836	Identifier	NTA_BasicType_Int32
>837	BreakStatement	 
>838	ExpressionStatement	 
>839	AssignmentExpr	rc = wb . write ( ( ( Byte * ) buffer ) [ i ] )
>840	CallExpression	wb . write ( ( ( Byte * ) buffer ) [ i ] )
>841	ArgumentList	( ( Byte * ) buffer ) [ i ]
>842	Argument	( ( Byte * ) buffer ) [ i ]
>843	ArrayIndexing	( ( Byte * ) buffer ) [ i ]
>844	Identifier	i
>845	CastExpression	( Byte * ) buffer
>846	Identifier	buffer
>847	CastTarget	Byte *
>848	Callee	wb . write
>849	MemberAccess	wb . write
>850	Identifier	write
>851	Identifier	wb
>852	Identifier	rc
>853	Label	 
>854	Identifier	NTA_BasicType_Byte
>855	Condition	 
>856	CallExpression	array . getType ( )
>857	ArgumentList	 
>858	Callee	array . getType
>859	MemberAccess	array . getType
>860	Identifier	getType
>861	Identifier	array
>862	IdentifierDeclStatement	 
>863	IdentifierDecl	rc
>864	Identifier	rc
>865	IdentifierDeclType	int
>866	IncDecOp	 
>867	IncDec	++
>868	Identifier	i
>869	Condition	 
>870	RelationalExpression	i < count
>871	Identifier	count
>872	Identifier	i
>873	ForInit	 
>874	IdentifierDeclStatement	size_t i = 0 ;
>875	IdentifierDecl	i = 0
>876	AssignmentExpr	i = 0
>877	PrimaryExpression	0
>878	Identifier	i
>879	Identifier	i
>880	IdentifierDeclType	size_t
>881	IdentifierDeclStatement	 
>882	IdentifierDecl	* buffer = array . getBuffer ( )
>883	AssignmentExpr	* buffer = array . getBuffer ( )
>884	CallExpression	array . getBuffer ( )
>885	ArgumentList	 
>886	Callee	array . getBuffer
>887	MemberAccess	array . getBuffer
>888	Identifier	getBuffer
>889	Identifier	array
>890	Identifier	buffer
>891	Identifier	buffer
>892	IdentifierDeclType	void *
>893	IdentifierDeclStatement	 
>894	IdentifierDecl	count = array . getCount ( )
>895	AssignmentExpr	count = array . getCount ( )
>896	CallExpression	array . getCount ( )
>897	ArgumentList	 
>898	Callee	array . getCount
>899	MemberAccess	array . getCount
>900	Identifier	getCount
>901	Identifier	array
>902	Identifier	count
>903	Identifier	count
>904	IdentifierDeclType	size_t
>905	IdentifierDeclStatement	 
>906	IdentifierDecl	wb
>907	Identifier	wb
>908	IdentifierDeclType	WriteBuffer
>927	FunctionDef	RegionImpl 
>928	ParameterList	const std 
>929	Parameter	 
>930	Identifier	s
>931	ParameterType	const std 
>932	Parameter	 
>933	Identifier	index
>934	ParameterType	Int64
>935	Parameter	 
>936	Identifier	name
>937	ParameterType	const std 
>938	ReturnType	void
>939	CompoundStatement	 
>940	ExpressionStatement	 
>941	CallExpression	setParameterFromBuffer ( name , index , rb )
>942	ArgumentList	name
>943	Argument	rb
>944	Identifier	rb
>945	Argument	index
>946	Identifier	index
>947	Argument	name
>948	Identifier	name
>949	Callee	setParameterFromBuffer
>950	Identifier	setParameterFromBuffer
>951	IdentifierDeclStatement	 
>952	IdentifierDecl	rb ( s . c_str ( ) , s . size ( ) , false )
>953	Expression	s . c_str ( ) , s . size ( ) , false
>954	Expression	s . size ( ) , false
>955	Identifier	false
>956	CallExpression	s . size ( )
>957	ArgumentList	 
>958	Callee	s . size
>959	MemberAccess	s . size
>960	Identifier	size
>961	Identifier	s
>962	CallExpression	s . c_str ( )
>963	ArgumentList	 
>964	Callee	s . c_str
>965	MemberAccess	s . c_str
>966	Identifier	c_str
>967	Identifier	s
>968	Identifier	rb
>969	IdentifierDeclType	ReadBuffer
>977	FunctionDef	RegionImpl 
>978	ParameterList	const std 
>979	Parameter	 
>980	Identifier	index
>981	ParameterType	Int64
>982	Parameter	 
>983	Identifier	name
>984	ParameterType	const std 
>985	ReturnType	std 
>986	CompoundStatement	 
>987	ReturnStatement	 
>988	CallExpression	std 
>989	ArgumentList	wb . getData ( )
>990	Argument	wb . getSize ( )
>991	CallExpression	wb . getSize ( )
>992	ArgumentList	 
>993	Callee	wb . getSize
>994	MemberAccess	wb . getSize
>995	Identifier	getSize
>996	Identifier	wb
>997	Argument	wb . getData ( )
>998	CallExpression	wb . getData ( )
>999	ArgumentList	 
>1000	Callee	wb . getData
>1001	MemberAccess	wb . getData
>1002	Identifier	getData
>1003	Identifier	wb
>1004	Callee	std 
>1005	Identifier	std 
>1006	ExpressionStatement	 
>1007	CallExpression	getParameterFromBuffer ( name , index , wb )
>1008	ArgumentList	name
>1009	Argument	wb
>1010	Identifier	wb
>1011	Argument	index
>1012	Identifier	index
>1013	Argument	name
>1014	Identifier	name
>1015	Callee	getParameterFromBuffer
>1016	Identifier	getParameterFromBuffer
>1017	IdentifierDeclStatement	 
>1018	IdentifierDecl	wb
>1019	Identifier	wb
>1020	IdentifierDeclType	WriteBuffer
>1030	FunctionDef	RegionImpl 
>1031	ParameterList	const std 
>1032	Parameter	 
>1033	Identifier	name
>1034	ParameterType	const std 
>1035	ReturnType	bool
>1036	CompoundStatement	 
>1037	ExpressionStatement	 
>1038	ShiftExpression	NTA_THROW << \"RegionImpl
>1039	ShiftExpression	\"RegionImpl
>1040	CallExpression	getType ( )
>1041	ArgumentList	 
>1042	Callee	getType
>1043	Identifier	getType
>1044	PrimaryExpression	\"RegionImpl
>1045	Identifier	NTA_THROW
>1050	FunctionDef	RegionImpl 
>1051	ParameterList	const std 
>1052	Parameter	 
>1053	Identifier	value
>1054	ParameterType	IWriteBuffer &
>1055	Parameter	 
>1056	Identifier	index
>1057	ParameterType	Int64
>1058	Parameter	 
>1059	Identifier	name
>1060	ParameterType	const std 
>1061	ReturnType	void
>1062	CompoundStatement	 
>1063	ExpressionStatement	 
>1064	ShiftExpression	NTA_THROW << \"RegionImpl
>1065	PrimaryExpression	\"RegionImpl
>1066	Identifier	NTA_THROW
>1073	FunctionDef	RegionImpl 
>1074	ParameterList	const std 
>1075	Parameter	 
>1076	Identifier	value
>1077	ParameterType	IReadBuffer &
>1078	Parameter	 
>1079	Identifier	index
>1080	ParameterType	Int64
>1081	Parameter	 
>1082	Identifier	name
>1083	ParameterType	const std 
>1084	ReturnType	void
>1085	CompoundStatement	 
>1086	ExpressionStatement	 
>1087	ShiftExpression	NTA_THROW << \"RegionImpl
>1088	PrimaryExpression	\"RegionImpl
>1089	Identifier	NTA_THROW
>1096	FunctionDef	RegionImpl 
>1097	ParameterList	const std 
>1098	Parameter	 
>1099	Identifier	index
>1100	ParameterType	Int64
>1101	Parameter	 
>1102	Identifier	name
>1103	ParameterType	const std 
>1104	ReturnType	size_t
>1105	CompoundStatement	 
>1106	ReturnStatement	 
>1107	Identifier	count
>1108	IfStatement	if ( count == 0 )
>1109	CompoundStatement	 
>1110	ExpressionStatement	 
>1111	ShiftExpression	NTA_THROW << \"Internal Error -- unknown element count for \" << \"node type \" << getType ( ) << \". The \
>1112	ShiftExpression	\"Internal Error -- unknown element count for \" << \"node type \" << getType ( ) << \". The RegionImpl \" << \"\
>1113	ShiftExpression	\"node type \" << getType ( ) << \". The RegionImpl \" << \"implementation should override this method.\"type
>1114	ShiftExpression	getType ( ) << \". The RegionImpl \" << \"implementation should override this method.\"
>1115	ShiftExpression	\". The RegionImpl \" << \"implementation should override this method.\"
>1116	PrimaryExpression	\"implementation should override this method.\"
>1117	PrimaryExpression	\". The RegionImpl \"
>1118	CallExpression	getType ( )
>1119	ArgumentList	 
>1120	Callee	getType
>1121	Identifier	getType
>1122	PrimaryExpression	\"node type \"
>1123	PrimaryExpression	\"Internal Error -- unknown element count for \"
>1124	Identifier	NTA_THROW
>1125	Condition	 
>1126	EqualityExpression	count == 0
>1127	PrimaryExpression	0
>1128	Identifier	count
>1129	IdentifierDeclStatement	 
>1130	IdentifierDecl	count = region_ -> getSpec ( ) -> parameters . getByName ( name ) . count
>1131	AssignmentExpr	count = region_ -> getSpec ( ) -> parameters . getByName ( name ) . count
>1132	MemberAccess	region_ -> getSpec ( ) -> parameters . getByName ( name ) . count
>1133	Identifier	count
>1134	CallExpression	region_ -> getSpec ( ) -> parameters . getByName ( name )
>1135	ArgumentList	name
>1136	Argument	name
>1137	Identifier	name
>1138	Callee	region_ -> getSpec ( ) -> parameters . getByName
>1139	MemberAccess	region_ -> getSpec ( ) -> parameters . getByName
>1140	Identifier	getByName
>1141	PtrMemberAccess	region_ -> getSpec ( ) -> parameters
>1142	Identifier	parameters
>1143	CallExpression	region_ -> getSpec ( )
>1144	ArgumentList	 
>1145	Callee	region_ -> getSpec
>1146	PtrMemberAccess	region_ -> getSpec
>1147	Identifier	getSpec
>1148	Identifier	region_
>1149	Identifier	count
>1150	Identifier	count
>1151	IdentifierDeclType	UInt32
>1152	IfStatement	if ( ! region_ -> getSpec ( ) -> parameters . contains ( name ) )
>1153	CompoundStatement	 
>1154	ExpressionStatement	 
>1155	ShiftExpression	NTA_THROW << \"getParameterArrayCount -- no parameter named '\" << name << \"' in node of type \" << getType ( )
>1156	ShiftExpression	\"getParameterArrayCount -- no parameter named '\" << name << \"' in node of type \" << getType ( )
>1157	ShiftExpression	name << \"' in node of type \" << getType ( )
>1158	ShiftExpression	\"' in node of type \" << getType ( )
>1159	CallExpression	getType ( )
>1160	ArgumentList	 
>1161	Callee	getType
>1162	Identifier	getType
>1163	PrimaryExpression	\"' in node of type \"
>1164	Identifier	name
>1165	PrimaryExpression	\"getParameterArrayCount -- no parameter named '\"
>1166	Identifier	NTA_THROW
>1167	Condition	 
>1168	UnaryOp	! region_ -> getSpec ( ) -> parameters . contains ( name )
>1169	CallExpression	region_ -> getSpec ( ) -> parameters . contains ( name )
>1170	ArgumentList	name
>1171	Argument	name
>1172	Identifier	name
>1173	Callee	region_ -> getSpec ( ) -> parameters . contains
>1174	MemberAccess	region_ -> getSpec ( ) -> parameters . contains
>1175	Identifier	contains
>1176	PtrMemberAccess	region_ -> getSpec ( ) -> parameters
>1177	Identifier	parameters
>1178	CallExpression	region_ -> getSpec ( )
>1179	ArgumentList	 
>1180	Callee	region_ -> getSpec
>1181	PtrMemberAccess	region_ -> getSpec
>1182	Identifier	getSpec
>1183	Identifier	region_
>1184	UnaryOperator	!
>1200	FunctionDef	RegionImpl 
>1201	ParameterList	const std 
>1202	Parameter	 
>1203	Identifier	name
>1204	ParameterType	const std 
>1205	ReturnType	const Input *
>1206	CompoundStatement	 
>1207	ReturnStatement	 
>1208	CallExpression	region_ -> getInput ( name )
>1209	ArgumentList	name
>1210	Argument	name
>1211	Identifier	name
>1212	Callee	region_ -> getInput
>1213	PtrMemberAccess	region_ -> getInput
>1214	Identifier	getInput
>1215	Identifier	region_
>1223	FunctionDef	RegionImpl 
>1224	ParameterList	const std 
>1225	Parameter	 
>1226	Identifier	name
>1227	ParameterType	const std 
>1228	ReturnType	const Output *
>1229	CompoundStatement	 
>1230	ReturnStatement	 
>1231	CallExpression	region_ -> getOutput ( name )
>1232	ArgumentList	name
>1233	Argument	name
>1234	Identifier	name
>1235	Callee	region_ -> getOutput
>1236	PtrMemberAccess	region_ -> getOutput
>1237	Identifier	getOutput
>1238	Identifier	region_
>1246	FunctionDef	RegionImpl 
>1247	ParameterList	 
>1248	ReturnType	const Dimensions &
>1249	CompoundStatement	 
>1250	ReturnStatement	 
>1251	CallExpression	region_ -> getDimensions ( )
>1252	ArgumentList	 
>1253	Callee	region_ -> getDimensions
>1254	PtrMemberAccess	region_ -> getDimensions
>1255	Identifier	getDimensions
>1256	Identifier	region_
<3=8,4
<4=5
<5=7,6
<13=15,14
<19=22,21,20
<22=23
<23=24
<24=26,25
<26=27
<27=29,28
<36=39,38,37
<39=40
<40=41
<41=43,42
<43=44
<44=46,45
<53=56,55,54
<56=57
<57=58
<58=60,59
<60=61
<61=63,62
<70=79,78,71
<71=75,72
<72=74,73
<75=77,76
<79=216,215,214,213,207,186,185,184,183,182,181,180,179,178,177,176,175,174,173,172,171,170,169,168,167,166,165,164,163,162,161,160,159,158,157,155,151,140,121,117,103,82,80
<80=81
<82=99,83
<83=98,97,96,95,84
<84=85
<85=94,86
<86=93,87
<87=92,88
<88=90,89
<90=91
<99=100
<100=102,101
<103=104
<104=116,115,105
<105=114,106
<106=110,107
<107=108
<108=109
<110=111
<111=113,112
<117=118
<118=120,119
<121=122
<122=139,138,123
<123=132,124
<124=126,125
<126=128,127
<128=129
<129=131,130
<132=134,133
<134=135
<135=137,136
<140=141
<141=149,142
<142=147,145,143
<143=144
<145=146
<147=148
<149=150
<151=152
<152=154,153
<155=156
<186=187
<187=206,205,188
<188=204,189
<189=193,190
<190=191
<191=192
<193=194
<194=196,195
<196=198,197
<198=200,199
<200=201
<201=203,202
<207=208
<208=212,209
<209=211,210
<216=218,217
<218=219
<219=235,220
<220=224,221
<221=222
<222=223
<224=225
<225=227,226
<227=229,228
<229=231,230
<231=232
<232=234,233
<255=267,266,256
<256=263,260,257
<257=259,258
<260=262,261
<263=265,264
<267=309,298,279,268
<268=269
<269=277,270
<270=275,273,271
<271=272
<273=274
<275=276
<277=278
<279=280
<280=297,296,281
<281=290,282
<282=284,283
<284=286,285
<286=287
<287=289,288
<290=292,291
<292=293
<293=295,294
<298=299
<299=305,300
<300=301
<301=302
<302=304,303
<305=306
<306=308,307
<309=310
<310=312,311
<321=330,329,322
<322=326,323
<323=325,324
<326=328,327
<330=331
<331=332
<332=338,333
<333=337,334
<334=336,335
<344=356,355,345
<345=352,349,346
<346=348,347
<349=351,350
<352=354,353
<356=357
<357=358
<358=364,359
<359=363,360
<360=362,361
<371=383,382,372
<372=379,376,373
<373=375,374
<376=378,377
<379=381,380
<383=637,626,607,595,583,385,384
<385=575,571,568,386
<386=564,406,387
<387=402,388
<388=389
<389=390
<390=401,391
<391=400,392
<392=399,393
<393=398,394
<394=396,395
<396=397
<402=403
<403=405,404
<406=557,407
<407=555,540,539,537,522,521,519,504,503,501,486,485,483,468,467,465,450,449,447,432,431,429,409,408
<409=410
<410=428,411
<411=427,412
<412=416,413
<413=415,414
<416=425,417
<417=418
<418=419
<419=421,420
<421=422
<422=424,423
<425=426
<429=430
<432=433
<433=446,434
<434=442,435
<435=436
<436=437
<437=439,438
<439=441,440
<442=443
<443=445,444
<447=448
<450=451
<451=464,452
<452=460,453
<453=454
<454=455
<455=457,456
<457=459,458
<460=461
<461=463,462
<465=466
<468=469
<469=482,470
<470=478,471
<471=472
<472=473
<473=475,474
<475=477,476
<478=479
<479=481,480
<483=484
<486=487
<487=500,488
<488=496,489
<489=490
<490=491
<491=493,492
<493=495,494
<496=497
<497=499,498
<501=502
<504=505
<505=518,506
<506=514,507
<507=508
<508=509
<509=511,510
<511=513,512
<514=515
<515=517,516
<519=520
<522=523
<523=536,524
<524=532,525
<525=526
<526=527
<527=529,528
<529=531,530
<532=533
<533=535,534
<537=538
<540=541
<541=554,542
<542=550,543
<543=544
<544=545
<545=547,546
<547=549,548
<550=551
<551=553,552
<555=556
<557=558
<558=560,559
<560=561
<561=563,562
<564=565
<565=567,566
<568=570,569
<571=572
<572=574,573
<575=576
<576=577
<577=582,581,578
<578=580,579
<583=584
<584=594,593,585
<585=592,586
<586=588,587
<588=589
<589=591,590
<595=596
<596=606,605,597
<597=604,598
<598=600,599
<600=601
<601=603,602
<607=608
<608=625,624,609
<609=618,610
<610=612,611
<612=614,613
<614=615
<615=617,616
<618=620,619
<620=621
<621=623,622
<626=627
<627=635,628
<628=633,631,629
<629=630
<631=632
<633=634
<635=636
<637=638
<638=640,639
<659=671,670,660
<660=667,664,661
<661=663,662
<664=666,665
<667=669,668
<671=905,893,881,702,683,672
<672=673
<673=681,674
<674=679,677,675
<675=676
<677=678
<679=680
<681=682
<683=684
<684=701,700,685
<685=694,686
<686=688,687
<688=690,689
<690=691
<691=693,692
<694=696,695
<696=697
<697=699,698
<702=873,869,866,703
<703=862,704
<704=855,705
<705=853,838,837,835,820,819,817,802,801,799,784,783,781,766,765,763,748,747,745,730,729,727,707,706
<707=708
<708=726,709
<709=725,710
<710=714,711
<711=713,712
<714=723,715
<715=716
<716=717
<717=719,718
<719=720
<720=722,721
<723=724
<727=728
<730=731
<731=744,732
<732=740,733
<733=734
<734=735
<735=737,736
<737=739,738
<740=741
<741=743,742
<745=746
<748=749
<749=762,750
<750=758,751
<751=752
<752=753
<753=755,754
<755=757,756
<758=759
<759=761,760
<763=764
<766=767
<767=780,768
<768=776,769
<769=770
<770=771
<771=773,772
<773=775,774
<776=777
<777=779,778
<781=782
<784=785
<785=798,786
<786=794,787
<787=788
<788=789
<789=791,790
<791=793,792
<794=795
<795=797,796
<799=800
<802=803
<803=816,804
<804=812,805
<805=806
<806=807
<807=809,808
<809=811,810
<812=813
<813=815,814
<817=818
<820=821
<821=834,822
<822=830,823
<823=824
<824=825
<825=827,826
<827=829,828
<830=831
<831=833,832
<835=836
<838=839
<839=852,840
<840=848,841
<841=842
<842=843
<843=845,844
<845=847,846
<848=849
<849=851,850
<853=854
<855=856
<856=858,857
<858=859
<859=861,860
<862=863
<863=865,864
<866=868,867
<869=870
<870=872,871
<873=874
<874=875
<875=880,879,876
<876=878,877
<881=882
<882=892,891,883
<883=890,884
<884=886,885
<886=887
<887=889,888
<893=894
<894=904,903,895
<895=902,896
<896=898,897
<898=899
<899=901,900
<905=906
<906=908,907
<927=939,938,928
<928=935,932,929
<929=931,930
<932=934,933
<935=937,936
<939=951,940
<940=941
<941=949,942
<942=947,945,943
<943=944
<945=946
<947=948
<949=950
<951=952
<952=969,968,953
<953=962,954
<954=956,955
<956=958,957
<958=959
<959=961,960
<962=964,963
<964=965
<965=967,966
<977=986,985,978
<978=982,979
<979=981,980
<982=984,983
<986=1017,1006,987
<987=988
<988=1004,989
<989=997,990
<990=991
<991=993,992
<993=994
<994=996,995
<997=998
<998=1000,999
<1000=1001
<1001=1003,1002
<1004=1005
<1006=1007
<1007=1015,1008
<1008=1013,1011,1009
<1009=1010
<1011=1012
<1013=1014
<1015=1016
<1017=1018
<1018=1020,1019
<1030=1036,1035,1031
<1031=1032
<1032=1034,1033
<1036=1037
<1037=1038
<1038=1045,1039
<1039=1044,1040
<1040=1042,1041
<1042=1043
<1050=1062,1061,1051
<1051=1058,1055,1052
<1052=1054,1053
<1055=1057,1056
<1058=1060,1059
<1062=1063
<1063=1064
<1064=1066,1065
<1073=1085,1084,1074
<1074=1081,1078,1075
<1075=1077,1076
<1078=1080,1079
<1081=1083,1082
<1085=1086
<1086=1087
<1087=1089,1088
<1096=1105,1104,1097
<1097=1101,1098
<1098=1100,1099
<1101=1103,1102
<1105=1152,1129,1108,1106
<1106=1107
<1108=1125,1109
<1109=1110
<1110=1111
<1111=1124,1112
<1112=1123,1113
<1113=1122,1114
<1114=1118,1115
<1115=1117,1116
<1118=1120,1119
<1120=1121
<1125=1126
<1126=1128,1127
<1129=1130
<1130=1151,1150,1131
<1131=1149,1132
<1132=1134,1133
<1134=1138,1135
<1135=1136
<1136=1137
<1138=1139
<1139=1141,1140
<1141=1143,1142
<1143=1145,1144
<1145=1146
<1146=1148,1147
<1152=1167,1153
<1153=1154
<1154=1155
<1155=1166,1156
<1156=1165,1157
<1157=1164,1158
<1158=1163,1159
<1159=1161,1160
<1161=1162
<1167=1168
<1168=1184,1169
<1169=1173,1170
<1170=1171
<1171=1172
<1173=1174
<1174=1176,1175
<1176=1178,1177
<1178=1180,1179
<1180=1181
<1181=1183,1182
<1200=1206,1205,1201
<1201=1202
<1202=1204,1203
<1206=1207
<1207=1208
<1208=1212,1209
<1209=1210
<1210=1211
<1212=1213
<1213=1215,1214
<1223=1229,1228,1224
<1224=1225
<1225=1227,1226
<1229=1230
<1230=1231
<1231=1235,1232
<1232=1233
<1233=1234
<1235=1236
<1236=1238,1237
<1246=1249,1248,1247
<1249=1250
<1250=1251
<1251=1253,1252
<1253=1254
<1254=1256,1255
