>8	FunctionDef	drwnNNGraphAppendImageJob (drwnNNGraph * graph , const string & baseName)
>9	ParameterList	drwnNNGraph * graph , const string & baseName
>10	Parameter	 
>11	Identifier	baseName
>12	ParameterType	const string &
>13	Parameter	 
>14	Identifier	graph
>15	ParameterType	drwnNNGraph *
>16	CompoundStatement	 
>22	FunctionDef	~drwnNNGraphAppendImageJob ()
>23	ParameterList	 
>24	CompoundStatement	 
>28	FunctionDef	operator ( ) ()
>29	ParameterList	 
>30	ReturnType	void
>31	CompoundStatement	 
>32	ExpressionStatement	 
>33	CallExpression	unlock ( )
>34	ArgumentList	 
>35	Callee	unlock
>36	Identifier	unlock
>37	ExpressionStatement	 
>38	CallExpression	_graph -> appendImage ( img )
>39	ArgumentList	img
>40	Argument	img
>41	Identifier	img
>42	Callee	_graph -> appendImage
>43	PtrMemberAccess	_graph -> appendImage
>44	Identifier	appendImage
>45	Identifier	_graph
>46	ExpressionStatement	 
>47	CallExpression	lock ( )
>48	ArgumentList	 
>49	Callee	lock
>50	Identifier	lock
>51	IdentifierDeclStatement	 
>52	IdentifierDecl	img ( data )
>53	Identifier	data
>54	Identifier	img
>55	IdentifierDeclType	const drwnNNGraphImage
>56	IdentifierDeclStatement	 
>57	IdentifierDecl	data ( _baseName )
>58	Identifier	_baseName
>59	Identifier	data
>60	IdentifierDeclType	const drwnNNGraphImageData
>67	FunctionDef	usage ()
>68	ParameterList	 
>69	ReturnType	void
>70	CompoundStatement	 
>71	ExpressionStatement	 
>72	ShiftExpression	cerr << \"OPTIONS
>73	ShiftExpression	\"OPTIONS
>74	ShiftExpression	\"  -i <filename>     
>75	ShiftExpression	\"  -o <filename>     
>76	ShiftExpression	DRWN_STANDARD_OPTIONS_USAGE << endl
>77	Identifier	endl
>78	Identifier	DRWN_STANDARD_OPTIONS_USAGE
>79	PrimaryExpression	\"  -o <filename>     
>80	PrimaryExpression	\"  -i <filename>     
>81	PrimaryExpression	\"OPTIONS
>82	Identifier	cerr
>83	ExpressionStatement	 
>84	ShiftExpression	cerr << \"USAGE
>85	PrimaryExpression	\"USAGE
>86	Identifier	cerr
>87	ExpressionStatement	 
>88	ShiftExpression	cerr << DRWN_USAGE_HEADER << endl
>89	ShiftExpression	DRWN_USAGE_HEADER << endl
>90	Identifier	endl
>91	Identifier	DRWN_USAGE_HEADER
>92	Identifier	cerr
>96	FunctionDef	main (int argc , char * argv [ ])
>97	ParameterList	int argc , char * argv [ ]
>98	Parameter	 
>99	Identifier	argv
>100	ParameterType	char * [ ]
>101	Parameter	 
>102	Identifier	argc
>103	ParameterType	int
>104	ReturnType	int
>105	CompoundStatement	 
>106	ReturnStatement	 
>107	PrimaryExpression	0
>108	ExpressionStatement	 
>109	CallExpression	drwnCodeProfiler 
>110	ArgumentList	 
>111	Callee	drwnCodeProfiler 
>112	Identifier	drwnCodeProfiler 
>113	ExpressionStatement	 
>114	CallExpression	drwnCodeProfiler 
>115	ArgumentList	hMain
>116	Argument	hMain
>117	Identifier	hMain
>118	Callee	drwnCodeProfiler 
>119	Identifier	drwnCodeProfiler 
>120	IfStatement	if ( outGraphFile != NULL )
>121	CompoundStatement	 
>122	ExpressionStatement	 
>123	CallExpression	graph . write ( outGraphFile )
>124	ArgumentList	outGraphFile
>125	Argument	outGraphFile
>126	Identifier	outGraphFile
>127	Callee	graph . write
>128	MemberAccess	graph . write
>129	Identifier	write
>130	Identifier	graph
>131	ExpressionStatement	 
>132	CallExpression	DRWN_LOG_MESSAGE ( \"Writing drwnNNGraph to \" << outGraphFile << \"...\" )
>133	ArgumentList	\"Writing drwnNNGraph to \" << outGraphFile << \"...\"
>134	Argument	\"Writing drwnNNGraph to \" << outGraphFile << \"...\"
>135	ShiftExpression	\"Writing drwnNNGraph to \" << outGraphFile << \"...\"
>136	ShiftExpression	outGraphFile << \"...\"
>137	PrimaryExpression	\"...\"
>138	Identifier	outGraphFile
>139	PrimaryExpression	\"Writing drwnNNGraph to \"
>140	Callee	DRWN_LOG_MESSAGE
>141	Identifier	DRWN_LOG_MESSAGE
>142	Condition	 
>143	EqualityExpression	outGraphFile != NULL
>144	Identifier	NULL
>145	Identifier	outGraphFile
>146	ExpressionStatement	 
>147	CallExpression	DRWN_LOG_VERBOSE ( \"...graph has \" << graph . numNodes ( ) << \" nodes\" )
>148	ArgumentList	\"...graph has \" << graph . numNodes ( ) << \" nodes\"
>149	Argument	\"...graph has \" << graph . numNodes ( ) << \" nodes\"
>150	ShiftExpression	\"...graph has \" << graph . numNodes ( ) << \" nodes\"
>151	ShiftExpression	graph . numNodes ( ) << \" nodes\"
>152	PrimaryExpression	\" nodes\"
>153	CallExpression	graph . numNodes ( )
>154	ArgumentList	 
>155	Callee	graph . numNodes
>156	MemberAccess	graph . numNodes
>157	Identifier	numNodes
>158	Identifier	graph
>159	PrimaryExpression	\"...graph has \"
>160	Callee	DRWN_LOG_VERBOSE
>161	Identifier	DRWN_LOG_VERBOSE
>162	ExpressionStatement	 
>163	CallExpression	DRWN_LOG_MESSAGE ( \"...graph has \" << graph . numImages ( ) << \" images\" )
>164	ArgumentList	\"...graph has \" << graph . numImages ( ) << \" images\"
>165	Argument	\"...graph has \" << graph . numImages ( ) << \" images\"
>166	ShiftExpression	\"...graph has \" << graph . numImages ( ) << \" images\"
>167	ShiftExpression	graph . numImages ( ) << \" images\"
>168	PrimaryExpression	\" images\"
>169	CallExpression	graph . numImages ( )
>170	ArgumentList	 
>171	Callee	graph . numImages
>172	MemberAccess	graph . numImages
>173	Identifier	numImages
>174	Identifier	graph
>175	PrimaryExpression	\"...graph has \"
>176	Callee	DRWN_LOG_MESSAGE
>177	Identifier	DRWN_LOG_MESSAGE
>178	ForStatement	for ( unsigned i = 0 ; i < baseNames . size ( ) ; i ++ )
>179	CompoundStatement	 
>180	IfStatement	if ( indx < 0 )
>181	CompoundStatement	 
>182	ExpressionStatement	 
>183	CallExpression	graph . appendImage ( drwnNNGraphImage ( drwnNNGraphImageData ( baseNames [ i ] ) ) )
>184	ArgumentList	drwnNNGraphImage ( drwnNNGraphImageData ( baseNames [ i ] ) )
>185	Argument	drwnNNGraphImage ( drwnNNGraphImageData ( baseNames [ i ] ) )
>186	CallExpression	drwnNNGraphImage ( drwnNNGraphImageData ( baseNames [ i ] ) )
>187	ArgumentList	drwnNNGraphImageData ( baseNames [ i ] )
>188	Argument	drwnNNGraphImageData ( baseNames [ i ] )
>189	CallExpression	drwnNNGraphImageData ( baseNames [ i ] )
>190	ArgumentList	baseNames [ i ]
>191	Argument	baseNames [ i ]
>192	ArrayIndexing	baseNames [ i ]
>193	Identifier	i
>194	Identifier	baseNames
>195	Callee	drwnNNGraphImageData
>196	Identifier	drwnNNGraphImageData
>197	Callee	drwnNNGraphImage
>198	Identifier	drwnNNGraphImage
>199	Callee	graph . appendImage
>200	MemberAccess	graph . appendImage
>201	Identifier	appendImage
>202	Identifier	graph
>203	Condition	 
>204	RelationalExpression	indx < 0
>205	PrimaryExpression	0
>206	Identifier	indx
>207	IdentifierDeclStatement	 
>208	IdentifierDecl	indx = graph . findImage ( baseNames [ i ] )
>209	AssignmentExpr	indx = graph . findImage ( baseNames [ i ] )
>210	CallExpression	graph . findImage ( baseNames [ i ] )
>211	ArgumentList	baseNames [ i ]
>212	Argument	baseNames [ i ]
>213	ArrayIndexing	baseNames [ i ]
>214	Identifier	i
>215	Identifier	baseNames
>216	Callee	graph . findImage
>217	MemberAccess	graph . findImage
>218	Identifier	findImage
>219	Identifier	graph
>220	Identifier	indx
>221	Identifier	indx
>222	IdentifierDeclType	const int
>223	IncDecOp	 
>224	IncDec	++
>225	Identifier	i
>226	Condition	 
>227	RelationalExpression	i < baseNames . size ( )
>228	CallExpression	baseNames . size ( )
>229	ArgumentList	 
>230	Callee	baseNames . size
>231	MemberAccess	baseNames . size
>232	Identifier	size
>233	Identifier	baseNames
>234	Identifier	i
>235	ForInit	 
>236	IdentifierDeclStatement	unsigned i = 0 ;
>237	IdentifierDecl	i = 0
>238	AssignmentExpr	i = 0
>239	PrimaryExpression	0
>240	Identifier	i
>241	Identifier	i
>242	IdentifierDeclType	unsigned
>243	ExpressionStatement	 
>244	CallExpression	DRWN_LOG_MESSAGE ( \"Adding images to drwnNNGraph...\" )
>245	ArgumentList	\"Adding images to drwnNNGraph...\"
>246	Argument	\"Adding images to drwnNNGraph...\"
>247	PrimaryExpression	\"Adding images to drwnNNGraph...\"
>248	Callee	DRWN_LOG_MESSAGE
>249	Identifier	DRWN_LOG_MESSAGE
>250	IfStatement	if ( inGraphFile != NULL )
>251	CompoundStatement	 
>252	ExpressionStatement	 
>253	CallExpression	DRWN_LOG_MESSAGE ( \"...graph has \" << graph . numImages ( ) << \" images\" )
>254	ArgumentList	\"...graph has \" << graph . numImages ( ) << \" images\"
>255	Argument	\"...graph has \" << graph . numImages ( ) << \" images\"
>256	ShiftExpression	\"...graph has \" << graph . numImages ( ) << \" images\"
>257	ShiftExpression	graph . numImages ( ) << \" images\"
>258	PrimaryExpression	\" images\"
>259	CallExpression	graph . numImages ( )
>260	ArgumentList	 
>261	Callee	graph . numImages
>262	MemberAccess	graph . numImages
>263	Identifier	numImages
>264	Identifier	graph
>265	PrimaryExpression	\"...graph has \"
>266	Callee	DRWN_LOG_MESSAGE
>267	Identifier	DRWN_LOG_MESSAGE
>268	ExpressionStatement	 
>269	CallExpression	graph . read ( inGraphFile )
>270	ArgumentList	inGraphFile
>271	Argument	inGraphFile
>272	Identifier	inGraphFile
>273	Callee	graph . read
>274	MemberAccess	graph . read
>275	Identifier	read
>276	Identifier	graph
>277	ExpressionStatement	 
>278	CallExpression	DRWN_LOG_MESSAGE ( \"Loading drwnNNGraph from \" << inGraphFile << \"...\" )
>279	ArgumentList	\"Loading drwnNNGraph from \" << inGraphFile << \"...\"
>280	Argument	\"Loading drwnNNGraph from \" << inGraphFile << \"...\"
>281	ShiftExpression	\"Loading drwnNNGraph from \" << inGraphFile << \"...\"
>282	ShiftExpression	inGraphFile << \"...\"
>283	PrimaryExpression	\"...\"
>284	Identifier	inGraphFile
>285	PrimaryExpression	\"Loading drwnNNGraph from \"
>286	Callee	DRWN_LOG_MESSAGE
>287	Identifier	DRWN_LOG_MESSAGE
>288	Condition	 
>289	EqualityExpression	inGraphFile != NULL
>290	Identifier	NULL
>291	Identifier	inGraphFile
>292	IdentifierDeclStatement	 
>293	IdentifierDecl	graph
>294	Identifier	graph
>295	IdentifierDeclType	drwnNNGraph
>296	ExpressionStatement	 
>297	CallExpression	DRWN_LOG_MESSAGE ( \"...read \" << baseNames . size ( ) << \" images\" )
>298	ArgumentList	\"...read \" << baseNames . size ( ) << \" images\"
>299	Argument	\"...read \" << baseNames . size ( ) << \" images\"
>300	ShiftExpression	\"...read \" << baseNames . size ( ) << \" images\"
>301	ShiftExpression	baseNames . size ( ) << \" images\"
>302	PrimaryExpression	\" images\"
>303	CallExpression	baseNames . size ( )
>304	ArgumentList	 
>305	Callee	baseNames . size
>306	MemberAccess	baseNames . size
>307	Identifier	size
>308	Identifier	baseNames
>309	PrimaryExpression	\"...read \"
>310	Callee	DRWN_LOG_MESSAGE
>311	Identifier	DRWN_LOG_MESSAGE
>312	ExpressionStatement	 
>313	AssignmentExpr	baseNames = drwnReadFile ( imgList )
>314	CallExpression	drwnReadFile ( imgList )
>315	ArgumentList	imgList
>316	Argument	imgList
>317	Identifier	imgList
>318	Callee	drwnReadFile
>319	Identifier	drwnReadFile
>320	Identifier	baseNames
>321	ExpressionStatement	 
>322	CallExpression	DRWN_LOG_MESSAGE ( \"Reading image list from \" << imgList << \"...\" )
>323	ArgumentList	\"Reading image list from \" << imgList << \"...\"
>324	Argument	\"Reading image list from \" << imgList << \"...\"
>325	ShiftExpression	\"Reading image list from \" << imgList << \"...\"
>326	ShiftExpression	imgList << \"...\"
>327	PrimaryExpression	\"...\"
>328	Identifier	imgList
>329	PrimaryExpression	\"Reading image list from \"
>330	Callee	DRWN_LOG_MESSAGE
>331	Identifier	DRWN_LOG_MESSAGE
>332	IdentifierDeclStatement	 
>333	IdentifierDecl	baseNames
>334	Identifier	baseNames
>335	IdentifierDeclType	vector < string >
>336	IdentifierDeclStatement	 
>337	IdentifierDecl	* imgList = DRWN_CMDLINE_ARGV [ 0 ]
>338	AssignmentExpr	* imgList = DRWN_CMDLINE_ARGV [ 0 ]
>339	ArrayIndexing	DRWN_CMDLINE_ARGV [ 0 ]
>340	PrimaryExpression	0
>341	Identifier	DRWN_CMDLINE_ARGV
>342	Identifier	imgList
>343	Identifier	imgList
>344	IdentifierDeclType	const char *
>345	ExpressionStatement	 
>346	CallExpression	drwnCodeProfiler 
>347	ArgumentList	hMain
>348	Argument	hMain
>349	Identifier	hMain
>350	Callee	drwnCodeProfiler 
>351	Identifier	drwnCodeProfiler 
>352	IdentifierDeclStatement	 
>353	IdentifierDecl	hMain = drwnCodeProfiler 
>354	AssignmentExpr	hMain = drwnCodeProfiler 
>355	CallExpression	drwnCodeProfiler 
>356	ArgumentList	\"main\"
>357	Argument	\"main\"
>358	PrimaryExpression	\"main\"
>359	Callee	drwnCodeProfiler 
>360	Identifier	drwnCodeProfiler 
>361	Identifier	hMain
>362	Identifier	hMain
>363	IdentifierDeclType	const int
>364	IfStatement	if ( DRWN_CMDLINE_ARGC != 1 )
>365	CompoundStatement	 
>366	ReturnStatement	 
>367	UnaryOp	- 1
>368	PrimaryExpression	1
>369	UnaryOperator	-
>370	ExpressionStatement	 
>371	CallExpression	usage ( )
>372	ArgumentList	 
>373	Callee	usage
>374	Identifier	usage
>375	Condition	 
>376	EqualityExpression	DRWN_CMDLINE_ARGC != 1
>377	PrimaryExpression	1
>378	Identifier	DRWN_CMDLINE_ARGC
>379	ExpressionStatement	 
>380	CallExpression	DRWN_END_CMDLINE_PROCESSING ( usage ( ) )
>381	ArgumentList	usage ( )
>382	Argument	usage ( )
>383	CallExpression	usage ( )
>384	ArgumentList	 
>385	Callee	usage
>386	Identifier	usage
>387	Callee	DRWN_END_CMDLINE_PROCESSING
>388	Identifier	DRWN_END_CMDLINE_PROCESSING
>389	Statement	 
>390	Statement	 
>391	Statement	 
>392	Statement	 
>393	Statement	 
>394	Statement	 
>395	Statement	 
>396	Statement	 
>397	Statement	 
>398	Statement	 
>399	Statement	 
>400	Statement	 
>401	Statement	 
>402	Statement	 
>403	Statement	 
>404	Statement	 
>405	Statement	 
>406	Statement	 
>407	ExpressionStatement	 
>408	CallExpression	srand48 ( ( unsigned ) time ( NULL ) )
>409	ArgumentList	( unsigned ) time ( NULL )
>410	Argument	( unsigned ) time ( NULL )
>411	CastExpression	( unsigned ) time ( NULL )
>412	CallExpression	time ( NULL )
>413	ArgumentList	NULL
>414	Argument	NULL
>415	Identifier	NULL
>416	Callee	time
>417	Identifier	time
>418	CastTarget	unsigned
>419	Callee	srand48
>420	Identifier	srand48
>421	IdentifierDeclStatement	 
>422	IdentifierDecl	* outGraphFile = NULL
>423	AssignmentExpr	* outGraphFile = NULL
>424	Identifier	NULL
>425	Identifier	NULL
>426	Identifier	outGraphFile
>427	IdentifierDeclType	const char *
>428	IdentifierDeclStatement	 
>429	IdentifierDecl	* inGraphFile = NULL
>430	AssignmentExpr	* inGraphFile = NULL
>431	Identifier	NULL
>432	Identifier	NULL
>433	Identifier	inGraphFile
>434	IdentifierDeclType	const char *
<8=16,9
<9=13,10
<10=12,11
<13=15,14
<22=24,23
<28=31,30,29
<31=56,51,46,37,32
<32=33
<33=35,34
<35=36
<37=38
<38=42,39
<39=40
<40=41
<42=43
<43=45,44
<46=47
<47=49,48
<49=50
<51=52
<52=55,54,53
<56=57
<57=60,59,58
<67=70,69,68
<70=87,83,71
<71=72
<72=82,73
<73=81,74
<74=80,75
<75=79,76
<76=78,77
<83=84
<84=86,85
<87=88
<88=92,89
<89=91,90
<96=105,104,97
<97=101,98
<98=100,99
<101=103,102
<105=428,421,407,406,405,404,403,402,401,400,399,398,397,396,395,394,393,392,391,390,389,379,364,352,345,336,332,321,312,296,292,250,243,178,162,146,120,113,108,106
<106=107
<108=109
<109=111,110
<111=112
<113=114
<114=118,115
<115=116
<116=117
<118=119
<120=142,121
<121=131,122
<122=123
<123=127,124
<124=125
<125=126
<127=128
<128=130,129
<131=132
<132=140,133
<133=134
<134=135
<135=139,136
<136=138,137
<140=141
<142=143
<143=145,144
<146=147
<147=160,148
<148=149
<149=150
<150=159,151
<151=153,152
<153=155,154
<155=156
<156=158,157
<160=161
<162=163
<163=176,164
<164=165
<165=166
<166=175,167
<167=169,168
<169=171,170
<171=172
<172=174,173
<176=177
<178=235,226,223,179
<179=207,180
<180=203,181
<181=182
<182=183
<183=199,184
<184=185
<185=186
<186=197,187
<187=188
<188=189
<189=195,190
<190=191
<191=192
<192=194,193
<195=196
<197=198
<199=200
<200=202,201
<203=204
<204=206,205
<207=208
<208=222,221,209
<209=220,210
<210=216,211
<211=212
<212=213
<213=215,214
<216=217
<217=219,218
<223=225,224
<226=227
<227=234,228
<228=230,229
<230=231
<231=233,232
<235=236
<236=237
<237=242,241,238
<238=240,239
<243=244
<244=248,245
<245=246
<246=247
<248=249
<250=288,251
<251=277,268,252
<252=253
<253=266,254
<254=255
<255=256
<256=265,257
<257=259,258
<259=261,260
<261=262
<262=264,263
<266=267
<268=269
<269=273,270
<270=271
<271=272
<273=274
<274=276,275
<277=278
<278=286,279
<279=280
<280=281
<281=285,282
<282=284,283
<286=287
<288=289
<289=291,290
<292=293
<293=295,294
<296=297
<297=310,298
<298=299
<299=300
<300=309,301
<301=303,302
<303=305,304
<305=306
<306=308,307
<310=311
<312=313
<313=320,314
<314=318,315
<315=316
<316=317
<318=319
<321=322
<322=330,323
<323=324
<324=325
<325=329,326
<326=328,327
<330=331
<332=333
<333=335,334
<336=337
<337=344,343,338
<338=342,339
<339=341,340
<345=346
<346=350,347
<347=348
<348=349
<350=351
<352=353
<353=363,362,354
<354=361,355
<355=359,356
<356=357
<357=358
<359=360
<364=375,365
<365=370,366
<366=367
<367=369,368
<370=371
<371=373,372
<373=374
<375=376
<376=378,377
<379=380
<380=387,381
<381=382
<382=383
<383=385,384
<385=386
<387=388
<407=408
<408=419,409
<409=410
<410=411
<411=418,412
<412=416,413
<413=414
<414=415
<416=417
<419=420
<421=422
<422=427,426,423
<423=425,424
<428=429
<429=434,433,430
<430=432,431
