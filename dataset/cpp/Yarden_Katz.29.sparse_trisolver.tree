>11	FunctionDef	fillMatrix (float density , int rows , int cols , EigenSparseTriMatrix & dst)
>12	ParameterList	float density , int rows , int cols , EigenSparseTriMatrix & dst
>13	Parameter	 
>14	Identifier	dst
>15	ParameterType	EigenSparseTriMatrix &
>16	Parameter	 
>17	Identifier	cols
>18	ParameterType	int
>19	Parameter	 
>20	Identifier	rows
>21	ParameterType	int
>22	Parameter	 
>23	Identifier	density
>24	ParameterType	float
>25	ReturnType	void
>26	CompoundStatement	 
>27	ExpressionStatement	 
>28	CallExpression	dst . endFill ( )
>29	ArgumentList	 
>30	Callee	dst . endFill
>31	MemberAccess	dst . endFill
>32	Identifier	endFill
>33	Identifier	dst
>34	ForStatement	for ( int j = 0 ; j < cols ; j ++ )
>35	CompoundStatement	 
>36	ExpressionStatement	 
>37	Statement	 
>38	Statement	 
>39	Statement	 
>40	Statement	 
>41	Statement	 
>42	Statement	 
>43	Statement	 
>44	Statement	 
>45	Statement	 
>46	Statement	 
>47	Statement	 
>48	Statement	 
>49	Statement	 
>50	Statement	 
>51	Statement	 
>52	Statement	 
>53	Statement	 
>54	ForStatement	for ( int i = 0 ; i < j ; i ++ )
>55	CompoundStatement	 
>56	IfStatement	if ( v != 0 )
>57	ExpressionStatement	 
>58	AssignmentExpr	dst . fill ( i , j ) = v
>59	Identifier	v
>60	CallExpression	dst . fill ( i , j )
>61	ArgumentList	i
>62	Argument	j
>63	Identifier	j
>64	Argument	i
>65	Identifier	i
>66	Callee	dst . fill
>67	MemberAccess	dst . fill
>68	Identifier	fill
>69	Identifier	dst
>70	Condition	 
>71	EqualityExpression	v != 0
>72	PrimaryExpression	0
>73	Identifier	v
>74	ExpressionStatement	 
>75	PrimaryExpression	0
>76	Statement	 
>77	Statement	 
>78	Statement	 
>79	Statement	 
>80	Statement	 
>81	Statement	 
>82	Statement	 
>83	Statement	 
>84	Statement	 
>85	Statement	 
>86	Statement	 
>87	Statement	 
>88	Statement	 
>89	Statement	 
>90	Statement	 
>91	Statement	 
>92	Statement	 
>93	Statement	 
>94	Statement	 
>95	Statement	 
>96	Statement	 
>97	Statement	 
>98	Statement	 
>99	Statement	 
>100	Statement	 
>101	Statement	 
>102	Statement	 
>103	Statement	 
>104	IncDecOp	 
>105	IncDec	++
>106	Identifier	i
>107	Condition	 
>108	RelationalExpression	i < j
>109	Identifier	j
>110	Identifier	i
>111	ForInit	 
>112	IdentifierDeclStatement	int i = 0 ;
>113	IdentifierDecl	i = 0
>114	AssignmentExpr	i = 0
>115	PrimaryExpression	0
>116	Identifier	i
>117	Identifier	i
>118	IdentifierDeclType	int
>119	IncDecOp	 
>120	IncDec	++
>121	Identifier	j
>122	Condition	 
>123	RelationalExpression	j < cols
>124	Identifier	cols
>125	Identifier	j
>126	ForInit	 
>127	IdentifierDeclStatement	int j = 0 ;
>128	IdentifierDecl	j = 0
>129	AssignmentExpr	j = 0
>130	PrimaryExpression	0
>131	Identifier	j
>132	Identifier	j
>133	IdentifierDeclType	int
>134	ExpressionStatement	 
>135	CallExpression	dst . startFill ( rows * cols * density )
>136	ArgumentList	rows * cols * density
>137	Argument	rows * cols * density
>138	MultiplicativeExpression	rows * cols * density
>139	MultiplicativeExpression	cols * density
>140	Identifier	density
>141	Identifier	cols
>142	Identifier	rows
>143	Callee	dst . startFill
>144	MemberAccess	dst . startFill
>145	Identifier	startFill
>146	Identifier	dst
>158	FunctionDef	main (int argc , char * argv [ ])
>159	ParameterList	int argc , char * argv [ ]
>160	Parameter	 
>161	Identifier	argv
>162	ParameterType	char * [ ]
>163	Parameter	 
>164	Identifier	argc
>165	ParameterType	int
>166	ReturnType	int
>167	CompoundStatement	 
>168	ReturnStatement	 
>169	PrimaryExpression	0
>170	CompoundStatement	 
>171	ExpressionStatement	 
>172	ShiftExpression	std 
>173	ShiftExpression	\"4x4 IP 
>174	ShiftExpression	timer . value ( ) << endl
>175	Identifier	endl
>176	CallExpression	timer . value ( )
>177	ArgumentList	 
>178	Callee	timer . value
>179	MemberAccess	timer . value
>180	Identifier	value
>181	Identifier	timer
>182	PrimaryExpression	\"4x4 IP 
>183	Identifier	std 
>184	ForStatement	for ( int _j = 0 ; _j < 10 ; ++ _j )
>185	CompoundStatement	 
>186	ExpressionStatement	 
>187	CallExpression	timer . stop ( )
>188	ArgumentList	 
>189	Callee	timer . stop
>190	MemberAccess	timer . stop
>191	Identifier	stop
>192	Identifier	timer
>193	ForStatement	for ( int _k = 0 ; _k < 1000000 ; ++ _k )
>194	CompoundStatement	 
>195	ExpressionStatement	 
>196	CallExpression	m . inverseProductInPlace ( x )
>197	ArgumentList	x
>198	Argument	x
>199	Identifier	x
>200	Callee	m . inverseProductInPlace
>201	MemberAccess	m . inverseProductInPlace
>202	Identifier	inverseProductInPlace
>203	Identifier	m
>204	UnaryExpression	 
>205	Identifier	_k
>206	IncDec	++
>207	Condition	 
>208	RelationalExpression	_k < 1000000
>209	PrimaryExpression	1000000
>210	Identifier	_k
>211	ForInit	 
>212	IdentifierDeclStatement	int _k = 0 ;
>213	IdentifierDecl	_k = 0
>214	AssignmentExpr	_k = 0
>215	PrimaryExpression	0
>216	Identifier	_k
>217	Identifier	_k
>218	IdentifierDeclType	int
>219	ExpressionStatement	 
>220	CallExpression	timer . start ( )
>221	ArgumentList	 
>222	Callee	timer . start
>223	MemberAccess	timer . start
>224	Identifier	start
>225	Identifier	timer
>226	IdentifierDeclStatement	 
>227	IdentifierDecl	x = Vector4f 
>228	AssignmentExpr	x = Vector4f 
>229	CallExpression	Vector4f 
>230	ArgumentList	 
>231	Callee	Vector4f 
>232	Identifier	Vector4f 
>233	Identifier	x
>234	Identifier	x
>235	IdentifierDeclType	Vector4f
>236	IdentifierDeclStatement	 
>237	IdentifierDecl	b = Vector4f 
>238	AssignmentExpr	b = Vector4f 
>239	CallExpression	Vector4f 
>240	ArgumentList	 
>241	Callee	Vector4f 
>242	Identifier	Vector4f 
>243	Identifier	b
>244	Identifier	b
>245	IdentifierDeclType	Vector4f
>246	IdentifierDeclStatement	 
>247	IdentifierDecl	m = Matrix4f 
>248	AssignmentExpr	m = Matrix4f 
>249	CallExpression	Matrix4f 
>250	ArgumentList	 
>251	Callee	Matrix4f 
>252	Identifier	Matrix4f 
>253	Identifier	m
>254	Identifier	m
>255	IdentifierDeclType	Matrix4f
>256	UnaryExpression	 
>257	Identifier	_j
>258	IncDec	++
>259	Condition	 
>260	RelationalExpression	_j < 10
>261	PrimaryExpression	10
>262	Identifier	_j
>263	ForInit	 
>264	IdentifierDeclStatement	int _j = 0 ;
>265	IdentifierDecl	_j = 0
>266	AssignmentExpr	_j = 0
>267	PrimaryExpression	0
>268	Identifier	_j
>269	Identifier	_j
>270	IdentifierDeclType	int
>271	ExpressionStatement	 
>272	CallExpression	timer . reset ( )
>273	ArgumentList	 
>274	Callee	timer . reset
>275	MemberAccess	timer . reset
>276	Identifier	reset
>277	Identifier	timer
>278	CompoundStatement	 
>279	ExpressionStatement	 
>280	ShiftExpression	std 
>281	ShiftExpression	\"4x4 
>282	ShiftExpression	timer . value ( ) << endl
>283	Identifier	endl
>284	CallExpression	timer . value ( )
>285	ArgumentList	 
>286	Callee	timer . value
>287	MemberAccess	timer . value
>288	Identifier	value
>289	Identifier	timer
>290	PrimaryExpression	\"4x4 
>291	Identifier	std 
>292	ForStatement	for ( int _j = 0 ; _j < 10 ; ++ _j )
>293	CompoundStatement	 
>294	ExpressionStatement	 
>295	CallExpression	timer . stop ( )
>296	ArgumentList	 
>297	Callee	timer . stop
>298	MemberAccess	timer . stop
>299	Identifier	stop
>300	Identifier	timer
>301	ForStatement	for ( int _k = 0 ; _k < 1000000 ; ++ _k )
>302	CompoundStatement	 
>303	ExpressionStatement	 
>304	AssignmentExpr	b = m . inverseProduct ( b )
>305	CallExpression	m . inverseProduct ( b )
>306	ArgumentList	b
>307	Argument	b
>308	Identifier	b
>309	Callee	m . inverseProduct
>310	MemberAccess	m . inverseProduct
>311	Identifier	inverseProduct
>312	Identifier	m
>313	Identifier	b
>314	UnaryExpression	 
>315	Identifier	_k
>316	IncDec	++
>317	Condition	 
>318	RelationalExpression	_k < 1000000
>319	PrimaryExpression	1000000
>320	Identifier	_k
>321	ForInit	 
>322	IdentifierDeclStatement	int _k = 0 ;
>323	IdentifierDecl	_k = 0
>324	AssignmentExpr	_k = 0
>325	PrimaryExpression	0
>326	Identifier	_k
>327	Identifier	_k
>328	IdentifierDeclType	int
>329	ExpressionStatement	 
>330	CallExpression	timer . start ( )
>331	ArgumentList	 
>332	Callee	timer . start
>333	MemberAccess	timer . start
>334	Identifier	start
>335	Identifier	timer
>336	IdentifierDeclStatement	 
>337	IdentifierDecl	x = Vector4f 
>338	AssignmentExpr	x = Vector4f 
>339	CallExpression	Vector4f 
>340	ArgumentList	 
>341	Callee	Vector4f 
>342	Identifier	Vector4f 
>343	Identifier	x
>344	Identifier	x
>345	IdentifierDeclType	Vector4f
>346	IdentifierDeclStatement	 
>347	IdentifierDecl	b = Vector4f 
>348	AssignmentExpr	b = Vector4f 
>349	CallExpression	Vector4f 
>350	ArgumentList	 
>351	Callee	Vector4f 
>352	Identifier	Vector4f 
>353	Identifier	b
>354	Identifier	b
>355	IdentifierDeclType	Vector4f
>356	IdentifierDeclStatement	 
>357	IdentifierDecl	m = Matrix4f 
>358	AssignmentExpr	m = Matrix4f 
>359	CallExpression	Matrix4f 
>360	ArgumentList	 
>361	Callee	Matrix4f 
>362	Identifier	Matrix4f 
>363	Identifier	m
>364	Identifier	m
>365	IdentifierDeclType	Matrix4f
>366	UnaryExpression	 
>367	Identifier	_j
>368	IncDec	++
>369	Condition	 
>370	RelationalExpression	_j < 10
>371	PrimaryExpression	10
>372	Identifier	_j
>373	ForInit	 
>374	IdentifierDeclStatement	int _j = 0 ;
>375	IdentifierDecl	_j = 0
>376	AssignmentExpr	_j = 0
>377	PrimaryExpression	0
>378	Identifier	_j
>379	Identifier	_j
>380	IdentifierDeclType	int
>381	ExpressionStatement	 
>382	CallExpression	timer . reset ( )
>383	ArgumentList	 
>384	Callee	timer . reset
>385	MemberAccess	timer . reset
>386	Identifier	reset
>387	Identifier	timer
>388	ForStatement	for ( float density = DENSITY ; density >= MINDENSITY ; density *= 0.5 )
>389	CompoundStatement	 
>390	ExpressionStatement	 
>391	ShiftExpression	std 
>392	PrimaryExpression	\"\n\n\"
>393	Identifier	std 
>394	CompoundStatement	 
>395	ExpressionStatement	 
>396	ShiftExpression	std 
>397	ShiftExpression	\"   rowmajor^-1 * b
>398	ShiftExpression	timer . value ( ) << endl
>399	Identifier	endl
>400	CallExpression	timer . value ( )
>401	ArgumentList	 
>402	Callee	timer . value
>403	MemberAccess	timer . value
>404	Identifier	value
>405	Identifier	timer
>406	PrimaryExpression	\"   rowmajor^-1 * b
>407	Identifier	std 
>408	Statement	 
>409	ExpressionStatement	 
>410	AssignmentExpr	x = mtl 
>411	CallExpression	mtl 
>412	ArgumentList	m2
>413	Argument	b
>414	Identifier	b
>415	Argument	m2
>416	Identifier	m2
>417	Callee	mtl 
>418	Identifier	mtl 
>419	Identifier	x
>420	Statement	 
>421	Statement	 
>422	ExpressionStatement	 
>423	ShiftExpression	std 
>424	ShiftExpression	\"   colmajor^-1 * b
>425	ShiftExpression	timer . value ( ) << endl
>426	Identifier	endl
>427	CallExpression	timer . value ( )
>428	ArgumentList	 
>429	Callee	timer . value
>430	MemberAccess	timer . value
>431	Identifier	value
>432	Identifier	timer
>433	PrimaryExpression	\"   colmajor^-1 * b
>434	Identifier	std 
>435	Statement	 
>436	ExpressionStatement	 
>437	AssignmentExpr	x = mtl 
>438	CallExpression	mtl 
>439	ArgumentList	m1
>440	Argument	b
>441	Identifier	b
>442	Argument	m1
>443	Identifier	m1
>444	Callee	mtl 
>445	Identifier	mtl 
>446	Identifier	x
>447	Statement	 
>448	Statement	 
>449	IdentifierDeclStatement	 
>450	IdentifierDecl	b ( rows , 1.0 )
>451	Expression	rows , 1.0
>452	PrimaryExpression	1.0
>453	Identifier	rows
>454	Identifier	b
>455	IdentifierDeclType	mtl 
>456	IdentifierDeclStatement	 
>457	IdentifierDecl	x ( rows , 1.0 )
>458	Expression	rows , 1.0
>459	PrimaryExpression	1.0
>460	Identifier	rows
>461	Identifier	x
>462	IdentifierDeclType	mtl 
>463	ExpressionStatement	 
>464	AssignmentExpr	m2 = m1
>465	Identifier	m1
>466	Identifier	m2
>467	ExpressionStatement	 
>468	CallExpression	eiToMtl ( sm1 , m1 )
>469	ArgumentList	sm1
>470	Argument	m1
>471	Identifier	m1
>472	Argument	sm1
>473	Identifier	sm1
>474	Callee	eiToMtl
>475	Identifier	eiToMtl
>476	IdentifierDeclStatement	 
>477	IdentifierDecl	m2 ( rows , cols )
>478	Expression	rows , cols
>479	Identifier	cols
>480	Identifier	rows
>481	Identifier	m2
>482	IdentifierDeclType	MtlSparseRowMajor
>483	IdentifierDeclStatement	 
>484	IdentifierDecl	m1 ( rows , cols )
>485	Expression	rows , cols
>486	Identifier	cols
>487	Identifier	rows
>488	Identifier	m1
>489	IdentifierDeclType	MtlSparse
>490	ExpressionStatement	 
>491	ShiftExpression	std 
>492	ShiftExpression	\"MTL4\t\" << density * 100 << \"%\n\"
>493	ShiftExpression	density * 100 << \"%\n\"
>494	PrimaryExpression	\"%\n\"
>495	MultiplicativeExpression	density * 100
>496	PrimaryExpression	100
>497	Identifier	density
>498	PrimaryExpression	\"MTL4\t\"
>499	Identifier	std 
>500	CompoundStatement	 
>501	ExpressionStatement	 
>502	ShiftExpression	std 
>503	ShiftExpression	\"   rowmajor^-1 * b
>504	ShiftExpression	timer . value ( ) << endl
>505	Identifier	endl
>506	CallExpression	timer . value ( )
>507	ArgumentList	 
>508	Callee	timer . value
>509	MemberAccess	timer . value
>510	Identifier	value
>511	Identifier	timer
>512	PrimaryExpression	\"   rowmajor^-1 * b
>513	Identifier	std 
>514	ExpressionStatement	 
>515	CallExpression	timer . stop ( )
>516	ArgumentList	 
>517	Callee	timer . stop
>518	MemberAccess	timer . stop
>519	Identifier	stop
>520	Identifier	timer
>521	Statement	 
>522	ExpressionStatement	 
>523	CallExpression	gmm 
>524	ArgumentList	m2
>525	Argument	false
>526	Identifier	false
>527	Argument	gmmX
>528	Identifier	gmmX
>529	Argument	m2
>530	Identifier	m2
>531	Callee	gmm 
>532	Identifier	gmm 
>533	Statement	 
>534	Statement	 
>535	ExpressionStatement	 
>536	AssignmentExpr	gmmX = gmmB
>537	Identifier	gmmB
>538	Identifier	gmmX
>539	ExpressionStatement	 
>540	ShiftExpression	std 
>541	ShiftExpression	\"   colmajor^-1 * b
>542	ShiftExpression	timer . value ( ) << endl
>543	Identifier	endl
>544	CallExpression	timer . value ( )
>545	ArgumentList	 
>546	Callee	timer . value
>547	MemberAccess	timer . value
>548	Identifier	value
>549	Identifier	timer
>550	PrimaryExpression	\"   colmajor^-1 * b
>551	Identifier	std 
>552	Statement	 
>553	ExpressionStatement	 
>554	CallExpression	gmm 
>555	ArgumentList	m1
>556	Argument	false
>557	Identifier	false
>558	Argument	gmmX
>559	Identifier	gmmX
>560	Argument	m1
>561	Identifier	m1
>562	Callee	gmm 
>563	Identifier	gmm 
>564	Statement	 
>565	Statement	 
>566	ExpressionStatement	 
>567	AssignmentExpr	gmmX = gmmB
>568	Identifier	gmmB
>569	Identifier	gmmX
>570	ExpressionStatement	 
>571	AssignmentExpr	( & gmmB [ 0 ] , cols ) = b
>572	Identifier	b
>573	Expression	& gmmB [ 0 ] , cols
>574	Identifier	cols
>575	UnaryOp	& gmmB [ 0 ]
>576	ArrayIndexing	gmmB [ 0 ]
>577	PrimaryExpression	0
>578	Identifier	gmmB
>579	UnaryOperator	&
>580	Statement	 
>581	Statement	 
>582	Statement	 
>583	Statement	 
>584	Statement	 
>585	Statement	 
>586	Statement	 
>587	Statement	 
>588	Statement	 
>589	Statement	 
>590	Statement	 
>591	ExpressionStatement	 
>592	AssignmentExpr	( & gmmX [ 0 ] , cols ) = x
>593	Identifier	x
>594	Expression	& gmmX [ 0 ] , cols
>595	Identifier	cols
>596	UnaryOp	& gmmX [ 0 ]
>597	ArrayIndexing	gmmX [ 0 ]
>598	PrimaryExpression	0
>599	Identifier	gmmX
>600	UnaryOperator	&
>601	Statement	 
>602	Statement	 
>603	Statement	 
>604	Statement	 
>605	Statement	 
>606	Statement	 
>607	Statement	 
>608	Statement	 
>609	Statement	 
>610	Statement	 
>611	Statement	 
>612	IdentifierDeclStatement	 
>613	IdentifierDecl	gmmB ( cols )
>614	Identifier	cols
>615	Identifier	gmmB
>616	IdentifierDeclType	std 
>617	IdentifierDecl	gmmX ( cols )
>618	Identifier	cols
>619	Identifier	gmmX
>620	IdentifierDeclType	std 
>621	ExpressionStatement	 
>622	CallExpression	gmm 
>623	ArgumentList	m1
>624	Argument	m2
>625	Identifier	m2
>626	Argument	m1
>627	Identifier	m1
>628	Callee	gmm 
>629	Identifier	gmm 
>630	ExpressionStatement	 
>631	CallExpression	eiToGmm ( sm1 , m1 )
>632	ArgumentList	sm1
>633	Argument	m1
>634	Identifier	m1
>635	Argument	sm1
>636	Identifier	sm1
>637	Callee	eiToGmm
>638	Identifier	eiToGmm
>639	IdentifierDeclStatement	 
>640	IdentifierDecl	m2
>641	Identifier	m2
>642	IdentifierDeclType	gmm 
>643	IdentifierDeclStatement	 
>644	IdentifierDecl	m1 ( rows , cols )
>645	Expression	rows , cols
>646	Identifier	cols
>647	Identifier	rows
>648	Identifier	m1
>649	IdentifierDeclType	GmmSparse
>650	ExpressionStatement	 
>651	ShiftExpression	std 
>652	ShiftExpression	\"GMM++ sparse\t\" << density * 100 << \"%\n\"
>653	ShiftExpression	density * 100 << \"%\n\"
>654	PrimaryExpression	\"%\n\"
>655	MultiplicativeExpression	density * 100
>656	PrimaryExpression	100
>657	Identifier	density
>658	PrimaryExpression	\"GMM++ sparse\t\"
>659	Identifier	std 
>660	CompoundStatement	 
>661	ExpressionStatement	 
>662	ShiftExpression	std 
>663	ShiftExpression	\"   colmajor^-1 * b
>664	ShiftExpression	timer . value ( ) << endl
>665	Identifier	endl
>666	CallExpression	timer . value ( )
>667	ArgumentList	 
>668	Callee	timer . value
>669	MemberAccess	timer . value
>670	Identifier	value
>671	Identifier	timer
>672	PrimaryExpression	\"   colmajor^-1 * b
>673	Identifier	std 
>674	Statement	 
>675	ExpressionStatement	 
>676	IfStatement	if ( ! cs_lsolve ( m1 , x . data ( ) ) )
>677	CompoundStatement	 
>678	BreakStatement	 
>679	ExpressionStatement	 
>680	ShiftExpression	std 
>681	PrimaryExpression	\"cs_lsolve failed\n\"
>682	Identifier	std 
>683	Condition	 
>684	UnaryOp	! cs_lsolve ( m1 , x . data ( ) )
>685	CallExpression	cs_lsolve ( m1 , x . data ( ) )
>686	ArgumentList	m1
>687	Argument	x . data ( )
>688	CallExpression	x . data ( )
>689	ArgumentList	 
>690	Callee	x . data
>691	MemberAccess	x . data
>692	Identifier	data
>693	Identifier	x
>694	Argument	m1
>695	Identifier	m1
>696	Callee	cs_lsolve
>697	Identifier	cs_lsolve
>698	UnaryOperator	!
>699	ExpressionStatement	 
>700	AssignmentExpr	x = b
>701	Identifier	b
>702	Identifier	x
>703	Statement	 
>704	Statement	 
>705	ExpressionStatement	 
>706	CallExpression	eiToCSparse ( sm1 , m1 )
>707	ArgumentList	sm1
>708	Argument	m1
>709	Identifier	m1
>710	Argument	sm1
>711	Identifier	sm1
>712	Callee	eiToCSparse
>713	Identifier	eiToCSparse
>714	IdentifierDeclStatement	 
>715	IdentifierDecl	* m1
>716	Identifier	m1
>717	IdentifierDeclType	cs *
>718	ExpressionStatement	 
>719	ShiftExpression	std 
>720	ShiftExpression	\"CSparse \t\" << density * 100 << \"%\n\"
>721	ShiftExpression	density * 100 << \"%\n\"
>722	PrimaryExpression	\"%\n\"
>723	MultiplicativeExpression	density * 100
>724	PrimaryExpression	100
>725	Identifier	density
>726	PrimaryExpression	\"CSparse \t\"
>727	Identifier	std 
>728	CompoundStatement	 
>729	ExpressionStatement	 
>730	ShiftExpression	std 
>731	ShiftExpression	\"   rowmajor^-1 * b
>732	ShiftExpression	timer . value ( ) << endl
>733	Identifier	endl
>734	CallExpression	timer . value ( )
>735	ArgumentList	 
>736	Callee	timer . value
>737	MemberAccess	timer . value
>738	Identifier	value
>739	Identifier	timer
>740	PrimaryExpression	\"   rowmajor^-1 * b
>741	Identifier	std 
>742	Statement	 
>743	ExpressionStatement	 
>744	AssignmentExpr	x = sm2 . solveTriangular ( b )
>745	CallExpression	sm2 . solveTriangular ( b )
>746	ArgumentList	b
>747	Argument	b
>748	Identifier	b
>749	Callee	sm2 . solveTriangular
>750	MemberAccess	sm2 . solveTriangular
>751	Identifier	solveTriangular
>752	Identifier	sm2
>753	Identifier	x
>754	Statement	 
>755	Statement	 
>756	ExpressionStatement	 
>757	ShiftExpression	std 
>758	ShiftExpression	\"   colmajor^-1 * b
>759	ShiftExpression	timer . value ( ) << endl
>760	Identifier	endl
>761	CallExpression	timer . value ( )
>762	ArgumentList	 
>763	Callee	timer . value
>764	MemberAccess	timer . value
>765	Identifier	value
>766	Identifier	timer
>767	PrimaryExpression	\"   colmajor^-1 * b
>768	Identifier	std 
>769	Statement	 
>770	ExpressionStatement	 
>771	AssignmentExpr	x = sm1 . solveTriangular ( b )
>772	CallExpression	sm1 . solveTriangular ( b )
>773	ArgumentList	b
>774	Argument	b
>775	Identifier	b
>776	Callee	sm1 . solveTriangular
>777	MemberAccess	sm1 . solveTriangular
>778	Identifier	solveTriangular
>779	Identifier	sm1
>780	Identifier	x
>781	Statement	 
>782	Statement	 
>783	IdentifierDeclStatement	 
>784	IdentifierDecl	sm2 = sm1
>785	AssignmentExpr	sm2 = sm1
>786	Identifier	sm1
>787	Identifier	sm1
>788	Identifier	sm2
>789	IdentifierDeclType	EigenSparseTriMatrixRow
>790	ExpressionStatement	 
>791	ShiftExpression	std 
>792	ShiftExpression	\"Eigen sparse\t\" << density * 100 << \"%\n\"
>793	ShiftExpression	density * 100 << \"%\n\"
>794	PrimaryExpression	\"%\n\"
>795	MultiplicativeExpression	density * 100
>796	PrimaryExpression	100
>797	Identifier	density
>798	PrimaryExpression	\"Eigen sparse\t\"
>799	Identifier	std 
>800	IfStatement	if ( ! densedone )
>801	CompoundStatement	 
>802	ExpressionStatement	 
>803	ShiftExpression	std 
>804	ShiftExpression	\"   rowmajor^-1 * b
>805	ShiftExpression	timer . value ( ) << endl
>806	Identifier	endl
>807	CallExpression	timer . value ( )
>808	ArgumentList	 
>809	Callee	timer . value
>810	MemberAccess	timer . value
>811	Identifier	value
>812	Identifier	timer
>813	PrimaryExpression	\"   rowmajor^-1 * b
>814	Identifier	std 
>815	Statement	 
>816	ExpressionStatement	 
>817	CallExpression	solveTriangular ( b )
>818	ArgumentList	b
>819	Argument	b
>820	Identifier	b
>821	Callee	solveTriangular
>822	Identifier	solveTriangular
>823	Statement	 
>824	Statement	 
>825	Statement	 
>826	Statement	 
>827	Statement	 
>828	Statement	 
>829	Statement	 
>830	Statement	 
>831	Statement	 
>832	Statement	 
>833	Statement	 
>834	Statement	 
>835	Statement	 
>836	ExpressionStatement	 
>837	ShiftExpression	std 
>838	ShiftExpression	\"   colmajor^-1 * b
>839	ShiftExpression	timer . value ( ) << endl
>840	Identifier	endl
>841	CallExpression	timer . value ( )
>842	ArgumentList	 
>843	Callee	timer . value
>844	MemberAccess	timer . value
>845	Identifier	value
>846	Identifier	timer
>847	PrimaryExpression	\"   colmajor^-1 * b
>848	Identifier	std 
>849	Statement	 
>850	ExpressionStatement	 
>851	CallExpression	solveTriangular ( b )
>852	ArgumentList	b
>853	Argument	b
>854	Identifier	b
>855	Callee	solveTriangular
>856	Identifier	solveTriangular
>857	Statement	 
>858	Statement	 
>859	Statement	 
>860	Statement	 
>861	Statement	 
>862	Statement	 
>863	Statement	 
>864	Statement	 
>865	Statement	 
>866	Statement	 
>867	Statement	 
>868	Statement	 
>869	Statement	 
>870	ExpressionStatement	 
>871	AssignmentExpr	m2 = m1
>872	Identifier	m1
>873	Identifier	m2
>874	ExpressionStatement	 
>875	CallExpression	eiToDense ( sm1 , m1 )
>876	ArgumentList	sm1
>877	Argument	m1
>878	Identifier	m1
>879	Argument	sm1
>880	Identifier	sm1
>881	Callee	eiToDense
>882	Identifier	eiToDense
>883	IdentifierDeclStatement	 
>884	IdentifierDecl	m2 ( rows , cols )
>885	Expression	rows , cols
>886	Identifier	cols
>887	Identifier	rows
>888	Identifier	m2
>889	IdentifierDeclType	Matrix < Scalar , Dynamic , Dynamic , Dynamic , Dynamic , RowMajorBit >
>890	IdentifierDeclStatement	 
>891	IdentifierDecl	m1 ( rows , cols )
>892	Expression	rows , cols
>893	Identifier	cols
>894	Identifier	rows
>895	Identifier	m1
>896	IdentifierDeclType	DenseMatrix
>897	ExpressionStatement	 
>898	ShiftExpression	std 
>899	ShiftExpression	\"Eigen Dense\t\" << density * 100 << \"%\n\"
>900	ShiftExpression	density * 100 << \"%\n\"
>901	PrimaryExpression	\"%\n\"
>902	MultiplicativeExpression	density * 100
>903	PrimaryExpression	100
>904	Identifier	density
>905	PrimaryExpression	\"Eigen Dense\t\"
>906	Identifier	std 
>907	ExpressionStatement	 
>908	AssignmentExpr	densedone = true
>909	Identifier	true
>910	Identifier	densedone
>911	Condition	 
>912	UnaryOp	! densedone
>913	Identifier	densedone
>914	UnaryOperator	!
>915	ExpressionStatement	 
>916	CallExpression	fillMatrix ( density , rows , cols , sm1 )
>917	ArgumentList	density
>918	Argument	sm1
>919	Identifier	sm1
>920	Argument	cols
>921	Identifier	cols
>922	Argument	rows
>923	Identifier	rows
>924	Argument	density
>925	Identifier	density
>926	Callee	fillMatrix
>927	Identifier	fillMatrix
>928	IdentifierDeclStatement	 
>929	IdentifierDecl	sm1 ( rows , cols )
>930	Expression	rows , cols
>931	Identifier	cols
>932	Identifier	rows
>933	Identifier	sm1
>934	IdentifierDeclType	EigenSparseTriMatrix
>935	AssignmentExpr	 
>936	PrimaryExpression	0.5
>937	Identifier	density
>938	Condition	 
>939	RelationalExpression	density >= MINDENSITY
>940	Identifier	MINDENSITY
>941	Identifier	density
>942	ForInit	 
>943	IdentifierDeclStatement	float density = DENSITY ;
>944	IdentifierDecl	density = DENSITY
>945	AssignmentExpr	density = DENSITY
>946	Identifier	DENSITY
>947	Identifier	DENSITY
>948	Identifier	density
>949	IdentifierDeclType	float
>950	IdentifierDeclStatement	 
>951	IdentifierDecl	densedone = false
>952	AssignmentExpr	densedone = false
>953	Identifier	false
>954	Identifier	false
>955	Identifier	densedone
>956	IdentifierDeclType	bool
>957	IdentifierDeclStatement	 
>958	IdentifierDecl	x = DenseVector 
>959	AssignmentExpr	x = DenseVector 
>960	CallExpression	DenseVector 
>961	ArgumentList	cols
>962	Argument	cols
>963	Identifier	cols
>964	Callee	DenseVector 
>965	Identifier	DenseVector 
>966	Identifier	x
>967	Identifier	x
>968	IdentifierDeclType	DenseVector
>969	IdentifierDeclStatement	 
>970	IdentifierDecl	b = DenseVector 
>971	AssignmentExpr	b = DenseVector 
>972	CallExpression	DenseVector 
>973	ArgumentList	cols
>974	Argument	cols
>975	Identifier	cols
>976	Callee	DenseVector 
>977	Identifier	DenseVector 
>978	Identifier	b
>979	Identifier	b
>980	IdentifierDeclType	DenseVector
>981	IdentifierDeclStatement	 
>982	IdentifierDecl	DenseVector
>983	Identifier	DenseVector
>984	IdentifierDeclType	Matrix < Scalar , Dynamic , 1 >
>985	IdentifierDeclStatement	 
>986	IdentifierDecl	sm1 ( rows , cols )
>987	Expression	rows , cols
>988	Identifier	cols
>989	Identifier	rows
>990	Identifier	sm1
>991	IdentifierDeclType	EigenSparseTriMatrix
>992	IdentifierDeclStatement	 
>993	IdentifierDecl	timer
>994	Identifier	timer
>995	IdentifierDeclType	BenchTimer
>996	IdentifierDeclStatement	 
>997	IdentifierDecl	density = DENSITY
>998	AssignmentExpr	density = DENSITY
>999	Identifier	DENSITY
>1000	Identifier	DENSITY
>1001	Identifier	density
>1002	IdentifierDeclType	float
>1003	IdentifierDeclStatement	 
>1004	IdentifierDecl	cols = SIZE
>1005	AssignmentExpr	cols = SIZE
>1006	Identifier	SIZE
>1007	Identifier	SIZE
>1008	Identifier	cols
>1009	IdentifierDeclType	int
>1010	IdentifierDeclStatement	 
>1011	IdentifierDecl	rows = SIZE
>1012	AssignmentExpr	rows = SIZE
>1013	Identifier	SIZE
>1014	Identifier	SIZE
>1015	Identifier	rows
>1016	IdentifierDeclType	int
<11=26,25,12
<12=22,19,16,13
<13=15,14
<16=18,17
<19=21,20
<22=24,23
<26=134,34,27
<27=28
<28=30,29
<30=31
<31=33,32
<34=126,122,119,35
<35=54,53,52,51,50,49,48,47,46,45,44,43,42,41,40,39,38,37,36
<54=111,107,104,55
<55=103,102,101,100,99,98,97,96,95,94,93,92,91,90,89,88,87,86,85,84,83,82,81,80,79,78,77,76,74,56
<56=70,57
<57=58
<58=60,59
<60=66,61
<61=64,62
<62=63
<64=65
<66=67
<67=69,68
<70=71
<71=73,72
<74=75
<104=106,105
<107=108
<108=110,109
<111=112
<112=113
<113=118,117,114
<114=116,115
<119=121,120
<122=123
<123=125,124
<126=127
<127=128
<128=133,132,129
<129=131,130
<134=135
<135=143,136
<136=137
<137=138
<138=142,139
<139=141,140
<143=144
<144=146,145
<158=167,166,159
<159=163,160
<160=162,161
<163=165,164
<167=1010,1003,996,992,985,981,969,957,950,388,278,170,168
<168=169
<170=271,184,171
<171=172
<172=183,173
<173=182,174
<174=176,175
<176=178,177
<178=179
<179=181,180
<184=263,259,256,185
<185=246,236,226,219,193,186
<186=187
<187=189,188
<189=190
<190=192,191
<193=211,207,204,194
<194=195
<195=196
<196=200,197
<197=198
<198=199
<200=201
<201=203,202
<204=206,205
<207=208
<208=210,209
<211=212
<212=213
<213=218,217,214
<214=216,215
<219=220
<220=222,221
<222=223
<223=225,224
<226=227
<227=235,234,228
<228=233,229
<229=231,230
<231=232
<236=237
<237=245,244,238
<238=243,239
<239=241,240
<241=242
<246=247
<247=255,254,248
<248=253,249
<249=251,250
<251=252
<256=258,257
<259=260
<260=262,261
<263=264
<264=265
<265=270,269,266
<266=268,267
<271=272
<272=274,273
<274=275
<275=277,276
<278=381,292,279
<279=280
<280=291,281
<281=290,282
<282=284,283
<284=286,285
<286=287
<287=289,288
<292=373,369,366,293
<293=356,346,336,329,301,294
<294=295
<295=297,296
<297=298
<298=300,299
<301=321,317,314,302
<302=303
<303=304
<304=313,305
<305=309,306
<306=307
<307=308
<309=310
<310=312,311
<314=316,315
<317=318
<318=320,319
<321=322
<322=323
<323=328,327,324
<324=326,325
<329=330
<330=332,331
<332=333
<333=335,334
<336=337
<337=345,344,338
<338=343,339
<339=341,340
<341=342
<346=347
<347=355,354,348
<348=353,349
<349=351,350
<351=352
<356=357
<357=365,364,358
<358=363,359
<359=361,360
<361=362
<366=368,367
<369=370
<370=372,371
<373=374
<374=375
<375=380,379,376
<376=378,377
<381=382
<382=384,383
<384=385
<385=387,386
<388=942,938,935,389
<389=928,915,800,728,660,500,394,390
<390=391
<391=393,392
<394=490,483,476,467,463,456,449,448,447,436,435,422,421,420,409,408,395
<395=396
<396=407,397
<397=406,398
<398=400,399
<400=402,401
<402=403
<403=405,404
<409=410
<410=419,411
<411=417,412
<412=415,413
<413=414
<415=416
<417=418
<422=423
<423=434,424
<424=433,425
<425=427,426
<427=429,428
<429=430
<430=432,431
<436=437
<437=446,438
<438=444,439
<439=442,440
<440=441
<442=443
<444=445
<449=450
<450=455,454,451
<451=453,452
<456=457
<457=462,461,458
<458=460,459
<463=464
<464=466,465
<467=468
<468=474,469
<469=472,470
<470=471
<472=473
<474=475
<476=477
<477=482,481,478
<478=480,479
<483=484
<484=489,488,485
<485=487,486
<490=491
<491=499,492
<492=498,493
<493=495,494
<495=497,496
<500=650,643,639,630,621,612,611,610,609,608,607,606,605,604,603,602,601,591,590,589,588,587,586,585,584,583,582,581,580,570,566,565,564,553,552,539,535,534,533,522,521,514,501
<501=502
<502=513,503
<503=512,504
<504=506,505
<506=508,507
<508=509
<509=511,510
<514=515
<515=517,516
<517=518
<518=520,519
<522=523
<523=531,524
<524=529,527,525
<525=526
<527=528
<529=530
<531=532
<535=536
<536=538,537
<539=540
<540=551,541
<541=550,542
<542=544,543
<544=546,545
<546=547
<547=549,548
<553=554
<554=562,555
<555=560,558,556
<556=557
<558=559
<560=561
<562=563
<566=567
<567=569,568
<570=571
<571=573,572
<573=575,574
<575=579,576
<576=578,577
<591=592
<592=594,593
<594=596,595
<596=600,597
<597=599,598
<612=617,613
<613=616,615,614
<617=620,619,618
<621=622
<622=628,623
<623=626,624
<624=625
<626=627
<628=629
<630=631
<631=637,632
<632=635,633
<633=634
<635=636
<637=638
<639=640
<640=642,641
<643=644
<644=649,648,645
<645=647,646
<650=651
<651=659,652
<652=658,653
<653=655,654
<655=657,656
<660=718,714,705,704,703,699,676,675,674,661
<661=662
<662=673,663
<663=672,664
<664=666,665
<666=668,667
<668=669
<669=671,670
<676=683,677
<677=679,678
<679=680
<680=682,681
<683=684
<684=698,685
<685=696,686
<686=694,687
<687=688
<688=690,689
<690=691
<691=693,692
<694=695
<696=697
<699=700
<700=702,701
<705=706
<706=712,707
<707=710,708
<708=709
<710=711
<712=713
<714=715
<715=717,716
<718=719
<719=727,720
<720=726,721
<721=723,722
<723=725,724
<728=790,783,782,781,770,769,756,755,754,743,742,729
<729=730
<730=741,731
<731=740,732
<732=734,733
<734=736,735
<736=737
<737=739,738
<743=744
<744=753,745
<745=749,746
<746=747
<747=748
<749=750
<750=752,751
<756=757
<757=768,758
<758=767,759
<759=761,760
<761=763,762
<763=764
<764=766,765
<770=771
<771=780,772
<772=776,773
<773=774
<774=775
<776=777
<777=779,778
<783=784
<784=789,788,785
<785=787,786
<790=791
<791=799,792
<792=798,793
<793=795,794
<795=797,796
<800=911,801
<801=907,897,890,883,874,870,869,868,867,866,865,864,863,862,861,860,859,858,857,850,849,836,835,834,833,832,831,830,829,828,827,826,825,824,823,816,815,802
<802=803
<803=814,804
<804=813,805
<805=807,806
<807=809,808
<809=810
<810=812,811
<816=817
<817=821,818
<818=819
<819=820
<821=822
<836=837
<837=848,838
<838=847,839
<839=841,840
<841=843,842
<843=844
<844=846,845
<850=851
<851=855,852
<852=853
<853=854
<855=856
<870=871
<871=873,872
<874=875
<875=881,876
<876=879,877
<877=878
<879=880
<881=882
<883=884
<884=889,888,885
<885=887,886
<890=891
<891=896,895,892
<892=894,893
<897=898
<898=906,899
<899=905,900
<900=902,901
<902=904,903
<907=908
<908=910,909
<911=912
<912=914,913
<915=916
<916=926,917
<917=924,922,920,918
<918=919
<920=921
<922=923
<924=925
<926=927
<928=929
<929=934,933,930
<930=932,931
<935=937,936
<938=939
<939=941,940
<942=943
<943=944
<944=949,948,945
<945=947,946
<950=951
<951=956,955,952
<952=954,953
<957=958
<958=968,967,959
<959=966,960
<960=964,961
<961=962
<962=963
<964=965
<969=970
<970=980,979,971
<971=978,972
<972=976,973
<973=974
<974=975
<976=977
<981=982
<982=984,983
<985=986
<986=991,990,987
<987=989,988
<992=993
<993=995,994
<996=997
<997=1002,1001,998
<998=1000,999
<1003=1004
<1004=1009,1008,1005
<1005=1007,1006
<1010=1011
<1011=1016,1015,1012
<1012=1014,1013
