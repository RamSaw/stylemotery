>3	FunctionDef	HUlib_init ()
>4	ParameterList	 
>5	ReturnType	void
>6	CompoundStatement	 
>10	FunctionDef	HUlib_clearTextLine (hu_textline_t * t)
>11	ParameterList	hu_textline_t * t
>12	Parameter	 
>13	Identifier	t
>14	ParameterType	hu_textline_t *
>15	ReturnType	void
>16	CompoundStatement	 
>17	ExpressionStatement	 
>18	AssignmentExpr	t -> needsupdate = true
>19	Identifier	true
>20	PtrMemberAccess	t -> needsupdate
>21	Identifier	needsupdate
>22	Identifier	t
>23	ExpressionStatement	 
>24	AssignmentExpr	t -> l [ 0 ] = 0
>25	PrimaryExpression	0
>26	ArrayIndexing	t -> l [ 0 ]
>27	PrimaryExpression	0
>28	PtrMemberAccess	t -> l
>29	Identifier	l
>30	Identifier	t
>31	ExpressionStatement	 
>32	AssignmentExpr	t -> len = 0
>33	PrimaryExpression	0
>34	PtrMemberAccess	t -> len
>35	Identifier	len
>36	Identifier	t
>48	FunctionDef	HUlib_initTextLine (hu_textline_t * t , int x , int y , patch_t * * f , int sc)
>49	ParameterList	hu_textline_t * t , int x , int y , patch_t * * f , int sc
>50	Parameter	 
>51	Identifier	sc
>52	ParameterType	int
>53	Parameter	 
>54	Identifier	f
>55	ParameterType	patch_t * *
>56	Parameter	 
>57	Identifier	y
>58	ParameterType	int
>59	Parameter	 
>60	Identifier	x
>61	ParameterType	int
>62	Parameter	 
>63	Identifier	t
>64	ParameterType	hu_textline_t *
>65	ReturnType	void
>66	CompoundStatement	 
>67	ExpressionStatement	 
>68	CallExpression	HUlib_clearTextLine ( t )
>69	ArgumentList	t
>70	Argument	t
>71	Identifier	t
>72	Callee	HUlib_clearTextLine
>73	Identifier	HUlib_clearTextLine
>74	ExpressionStatement	 
>75	AssignmentExpr	t -> sc = sc
>76	Identifier	sc
>77	PtrMemberAccess	t -> sc
>78	Identifier	sc
>79	Identifier	t
>80	ExpressionStatement	 
>81	AssignmentExpr	t -> f = f
>82	Identifier	f
>83	PtrMemberAccess	t -> f
>84	Identifier	f
>85	Identifier	t
>86	ExpressionStatement	 
>87	AssignmentExpr	t -> y = y
>88	Identifier	y
>89	PtrMemberAccess	t -> y
>90	Identifier	y
>91	Identifier	t
>92	ExpressionStatement	 
>93	AssignmentExpr	t -> x = x
>94	Identifier	x
>95	PtrMemberAccess	t -> x
>96	Identifier	x
>97	Identifier	t
>111	FunctionDef	HUlib_addCharToTextLine (hu_textline_t * t , char ch)
>112	ParameterList	hu_textline_t * t , char ch
>113	Parameter	 
>114	Identifier	ch
>115	ParameterType	char
>116	Parameter	 
>117	Identifier	t
>118	ParameterType	hu_textline_t *
>119	ReturnType	qboolean
>120	CompoundStatement	 
>121	IfStatement	if ( t -> len == HU_MAXLINELENGTH )
>122	ElseStatement	else
>123	CompoundStatement	 
>124	ReturnStatement	 
>125	Identifier	true
>126	ExpressionStatement	 
>127	AssignmentExpr	t -> needsupdate = 4
>128	PrimaryExpression	4
>129	PtrMemberAccess	t -> needsupdate
>130	Identifier	needsupdate
>131	Identifier	t
>132	ExpressionStatement	 
>133	AssignmentExpr	t -> l [ t -> len ] = 0
>134	PrimaryExpression	0
>135	ArrayIndexing	t -> l [ t -> len ]
>136	PtrMemberAccess	t -> len
>137	Identifier	len
>138	Identifier	t
>139	PtrMemberAccess	t -> l
>140	Identifier	l
>141	Identifier	t
>142	ExpressionStatement	 
>143	AssignmentExpr	t -> l [ t -> len ++ ] = ch
>144	Identifier	ch
>145	ArrayIndexing	t -> l [ t -> len ++ ]
>146	IncDecOp	t -> len ++
>147	IncDec	++
>148	PtrMemberAccess	t -> len
>149	Identifier	len
>150	Identifier	t
>151	PtrMemberAccess	t -> l
>152	Identifier	l
>153	Identifier	t
>154	ReturnStatement	 
>155	Identifier	false
>156	Condition	 
>157	EqualityExpression	t -> len == HU_MAXLINELENGTH
>158	Identifier	HU_MAXLINELENGTH
>159	PtrMemberAccess	t -> len
>160	Identifier	len
>161	Identifier	t
>177	FunctionDef	HUlib_delCharFromTextLine (hu_textline_t * t)
>178	ParameterList	hu_textline_t * t
>179	Parameter	 
>180	Identifier	t
>181	ParameterType	hu_textline_t *
>182	ReturnType	qboolean
>183	CompoundStatement	 
>184	IfStatement	if ( ! t -> len )
>185	ElseStatement	else
>186	CompoundStatement	 
>187	ReturnStatement	 
>188	Identifier	true
>189	ExpressionStatement	 
>190	AssignmentExpr	t -> needsupdate = 4
>191	PrimaryExpression	4
>192	PtrMemberAccess	t -> needsupdate
>193	Identifier	needsupdate
>194	Identifier	t
>195	ExpressionStatement	 
>196	AssignmentExpr	t -> l [ -- t -> len ] = 0
>197	PrimaryExpression	0
>198	ArrayIndexing	t -> l [ -- t -> len ]
>199	UnaryExpression	-- t -> len
>200	PtrMemberAccess	t -> len
>201	Identifier	len
>202	Identifier	t
>203	IncDec	--
>204	PtrMemberAccess	t -> l
>205	Identifier	l
>206	Identifier	t
>207	ReturnStatement	 
>208	Identifier	false
>209	Condition	 
>210	UnaryOp	! t -> len
>211	PtrMemberAccess	t -> len
>212	Identifier	len
>213	Identifier	t
>214	UnaryOperator	!
>228	FunctionDef	HUlib_drawTextLine (hu_textline_t * l , qboolean drawcursor)
>229	ParameterList	hu_textline_t * l , qboolean drawcursor
>230	Parameter	 
>231	Identifier	drawcursor
>232	ParameterType	qboolean
>233	Parameter	 
>234	Identifier	l
>235	ParameterType	hu_textline_t *
>236	ReturnType	void
>237	CompoundStatement	 
>238	IfStatement	if ( drawcursor && x + SHORT ( l -> f [ '_' - l -> sc ] -> width ) <= SCREENWIDTH )
>239	CompoundStatement	 
>240	ExpressionStatement	 
>241	CallExpression	V_DrawPatchDirect ( x , l -> y , FG , l -> f [ '_' - l -> sc ] )
>242	ArgumentList	x
>243	Argument	l -> f [ '_' - l -> sc ]
>244	ArrayIndexing	l -> f [ '_' - l -> sc ]
>245	AdditiveExpression	'_' - l -> sc
>246	PtrMemberAccess	l -> sc
>247	Identifier	sc
>248	Identifier	l
>249	PrimaryExpression	'_'
>250	PtrMemberAccess	l -> f
>251	Identifier	f
>252	Identifier	l
>253	Argument	FG
>254	Identifier	FG
>255	Argument	l -> y
>256	PtrMemberAccess	l -> y
>257	Identifier	y
>258	Identifier	l
>259	Argument	x
>260	Identifier	x
>261	Callee	V_DrawPatchDirect
>262	Identifier	V_DrawPatchDirect
>263	Condition	 
>264	AndExpression	drawcursor && x + SHORT ( l -> f [ '_' - l -> sc ] -> width ) <= SCREENWIDTH
>265	RelationalExpression	x + SHORT ( l -> f [ '_' - l -> sc ] -> width ) <= SCREENWIDTH
>266	Identifier	SCREENWIDTH
>267	AdditiveExpression	x + SHORT ( l -> f [ '_' - l -> sc ] -> width )
>268	CallExpression	SHORT ( l -> f [ '_' - l -> sc ] -> width )
>269	ArgumentList	l -> f [ '_' - l -> sc ] -> width
>270	Argument	l -> f [ '_' - l -> sc ] -> width
>271	PtrMemberAccess	l -> f [ '_' - l -> sc ] -> width
>272	Identifier	width
>273	ArrayIndexing	l -> f [ '_' - l -> sc ]
>274	AdditiveExpression	'_' - l -> sc
>275	PtrMemberAccess	l -> sc
>276	Identifier	sc
>277	Identifier	l
>278	PrimaryExpression	'_'
>279	PtrMemberAccess	l -> f
>280	Identifier	f
>281	Identifier	l
>282	Callee	SHORT
>283	Identifier	SHORT
>284	Identifier	x
>285	Identifier	drawcursor
>286	ForStatement	for ( i = 0 ; i < l -> len ; i ++ )
>287	CompoundStatement	 
>288	IfStatement	if ( c != ' ' && c >= l -> sc && c <= '_' )
>289	ElseStatement	else
>290	CompoundStatement	 
>291	IfStatement	if ( x >= SCREENWIDTH )
>292	BreakStatement	 
>293	Condition	 
>294	RelationalExpression	x >= SCREENWIDTH
>295	Identifier	SCREENWIDTH
>296	Identifier	x
>297	ExpressionStatement	 
>298	AssignmentExpr	x += 4
>299	PrimaryExpression	4
>300	Identifier	x
>301	CompoundStatement	 
>302	ExpressionStatement	 
>303	AssignmentExpr	x += w
>304	Identifier	w
>305	Identifier	x
>306	ExpressionStatement	 
>307	CallExpression	V_DrawPatchDirect ( x , l -> y , FG , l -> f [ c - l -> sc ] )
>308	ArgumentList	x
>309	Argument	l -> f [ c - l -> sc ]
>310	ArrayIndexing	l -> f [ c - l -> sc ]
>311	AdditiveExpression	c - l -> sc
>312	PtrMemberAccess	l -> sc
>313	Identifier	sc
>314	Identifier	l
>315	Identifier	c
>316	PtrMemberAccess	l -> f
>317	Identifier	f
>318	Identifier	l
>319	Argument	FG
>320	Identifier	FG
>321	Argument	l -> y
>322	PtrMemberAccess	l -> y
>323	Identifier	y
>324	Identifier	l
>325	Argument	x
>326	Identifier	x
>327	Callee	V_DrawPatchDirect
>328	Identifier	V_DrawPatchDirect
>329	IfStatement	if ( x + w > SCREENWIDTH )
>330	BreakStatement	 
>331	Condition	 
>332	RelationalExpression	x + w > SCREENWIDTH
>333	Identifier	SCREENWIDTH
>334	AdditiveExpression	x + w
>335	Identifier	w
>336	Identifier	x
>337	ExpressionStatement	 
>338	AssignmentExpr	w = SHORT ( l -> f [ c - l -> sc ] -> width )
>339	CallExpression	SHORT ( l -> f [ c - l -> sc ] -> width )
>340	ArgumentList	l -> f [ c - l -> sc ] -> width
>341	Argument	l -> f [ c - l -> sc ] -> width
>342	PtrMemberAccess	l -> f [ c - l -> sc ] -> width
>343	Identifier	width
>344	ArrayIndexing	l -> f [ c - l -> sc ]
>345	AdditiveExpression	c - l -> sc
>346	PtrMemberAccess	l -> sc
>347	Identifier	sc
>348	Identifier	l
>349	Identifier	c
>350	PtrMemberAccess	l -> f
>351	Identifier	f
>352	Identifier	l
>353	Callee	SHORT
>354	Identifier	SHORT
>355	Identifier	w
>356	Condition	 
>357	AndExpression	c != ' ' && c >= l -> sc && c <= '_'
>358	AndExpression	c >= l -> sc && c <= '_'
>359	RelationalExpression	c <= '_'
>360	PrimaryExpression	'_'
>361	Identifier	c
>362	RelationalExpression	c >= l -> sc
>363	PtrMemberAccess	l -> sc
>364	Identifier	sc
>365	Identifier	l
>366	Identifier	c
>367	EqualityExpression	c != ' '
>368	PrimaryExpression	' '
>369	Identifier	c
>370	ExpressionStatement	 
>371	AssignmentExpr	c = toupper ( l -> l [ i ] )
>372	CallExpression	toupper ( l -> l [ i ] )
>373	ArgumentList	l -> l [ i ]
>374	Argument	l -> l [ i ]
>375	ArrayIndexing	l -> l [ i ]
>376	Identifier	i
>377	PtrMemberAccess	l -> l
>378	Identifier	l
>379	Identifier	l
>380	Callee	toupper
>381	Identifier	toupper
>382	Identifier	c
>383	IncDecOp	 
>384	IncDec	++
>385	Identifier	i
>386	Condition	 
>387	RelationalExpression	i < l -> len
>388	PtrMemberAccess	l -> len
>389	Identifier	len
>390	Identifier	l
>391	Identifier	i
>392	ForInit	 
>393	AssignmentExpr	i = 0
>394	PrimaryExpression	0
>395	Identifier	i
>396	ExpressionStatement	 
>397	AssignmentExpr	x = l -> x
>398	PtrMemberAccess	l -> x
>399	Identifier	x
>400	Identifier	l
>401	Identifier	x
>402	IdentifierDeclStatement	 
>403	IdentifierDecl	c
>404	Identifier	c
>405	IdentifierDeclType	unsigned char
>406	IdentifierDeclStatement	 
>407	IdentifierDecl	x
>408	Identifier	x
>409	IdentifierDeclType	int
>410	IdentifierDeclStatement	 
>411	IdentifierDecl	w
>412	Identifier	w
>413	IdentifierDeclType	int
>414	IdentifierDeclStatement	 
>415	IdentifierDecl	i
>416	Identifier	i
>417	IdentifierDeclType	int
>450	FunctionDef	HUlib_eraseTextLine (hu_textline_t * l)
>451	ParameterList	hu_textline_t * l
>452	Parameter	 
>453	Identifier	l
>454	ParameterType	hu_textline_t *
>455	ReturnType	void
>456	CompoundStatement	 
>457	Statement	 
>458	Statement	 
>459	Statement	 
>460	Statement	 
>461	Statement	 
>462	Statement	 
>463	Statement	 
>464	Statement	 
>465	Statement	 
>466	Statement	 
>467	Statement	 
>468	Statement	 
>469	Statement	 
>470	Statement	 
>471	Statement	 
>472	Statement	 
>473	Statement	 
>474	IdentifierDeclStatement	 
>475	IdentifierDecl	yoffset
>476	Identifier	yoffset
>477	IdentifierDeclType	int
>478	IdentifierDeclStatement	 
>479	IdentifierDecl	y
>480	Identifier	y
>481	IdentifierDeclType	int
>482	IdentifierDeclStatement	 
>483	IdentifierDecl	lh
>484	Identifier	lh
>485	IdentifierDeclType	int
>493	FunctionDef	HUlib_initSText (hu_stext_t * s , int x , int y , int h , patch_t * * font , int startchar , qboolean * on)
>494	ParameterList	hu_stext_t * s , int x , int y , int h , patch_t * * font , int startchar , qboolean * on
>495	Parameter	 
>496	Identifier	on
>497	ParameterType	qboolean *
>498	Parameter	 
>499	Identifier	startchar
>500	ParameterType	int
>501	Parameter	 
>502	Identifier	font
>503	ParameterType	patch_t * *
>504	Parameter	 
>505	Identifier	h
>506	ParameterType	int
>507	Parameter	 
>508	Identifier	y
>509	ParameterType	int
>510	Parameter	 
>511	Identifier	x
>512	ParameterType	int
>513	Parameter	 
>514	Identifier	s
>515	ParameterType	hu_stext_t *
>516	ReturnType	void
>517	CompoundStatement	 
>518	ForStatement	for ( i = 0 ; i < h ; i ++ )
>519	ExpressionStatement	 
>520	CallExpression	HUlib_initTextLine ( & s -> l [ i ] , x , y - i * ( SHORT ( font [ 0 ] -> height ) + 1 ) , font , startchar )
>521	ArgumentList	& s -> l [ i ]
>522	Argument	startchar
>523	Identifier	startchar
>524	Argument	font
>525	Identifier	font
>526	Argument	y - i * ( SHORT ( font [ 0 ] -> height ) + 1 )
>527	AdditiveExpression	y - i * ( SHORT ( font [ 0 ] -> height ) + 1 )
>528	MultiplicativeExpression	i * ( SHORT ( font [ 0 ] -> height ) + 1 )
>529	AdditiveExpression	SHORT ( font [ 0 ] -> height ) + 1
>530	PrimaryExpression	1
>531	CallExpression	SHORT ( font [ 0 ] -> height )
>532	ArgumentList	font [ 0 ] -> height
>533	Argument	font [ 0 ] -> height
>534	PtrMemberAccess	font [ 0 ] -> height
>535	Identifier	height
>536	ArrayIndexing	font [ 0 ]
>537	PrimaryExpression	0
>538	Identifier	font
>539	Callee	SHORT
>540	Identifier	SHORT
>541	Identifier	i
>542	Identifier	y
>543	Argument	x
>544	Identifier	x
>545	Argument	& s -> l [ i ]
>546	UnaryOp	& s -> l [ i ]
>547	ArrayIndexing	s -> l [ i ]
>548	Identifier	i
>549	PtrMemberAccess	s -> l
>550	Identifier	l
>551	Identifier	s
>552	UnaryOperator	&
>553	Callee	HUlib_initTextLine
>554	Identifier	HUlib_initTextLine
>555	IncDecOp	 
>556	IncDec	++
>557	Identifier	i
>558	Condition	 
>559	RelationalExpression	i < h
>560	Identifier	h
>561	Identifier	i
>562	ForInit	 
>563	AssignmentExpr	i = 0
>564	PrimaryExpression	0
>565	Identifier	i
>566	ExpressionStatement	 
>567	AssignmentExpr	s -> cl = 0
>568	PrimaryExpression	0
>569	PtrMemberAccess	s -> cl
>570	Identifier	cl
>571	Identifier	s
>572	ExpressionStatement	 
>573	AssignmentExpr	s -> laston = true
>574	Identifier	true
>575	PtrMemberAccess	s -> laston
>576	Identifier	laston
>577	Identifier	s
>578	ExpressionStatement	 
>579	AssignmentExpr	s -> on = on
>580	Identifier	on
>581	PtrMemberAccess	s -> on
>582	Identifier	on
>583	Identifier	s
>584	ExpressionStatement	 
>585	AssignmentExpr	s -> h = h
>586	Identifier	h
>587	PtrMemberAccess	s -> h
>588	Identifier	h
>589	Identifier	s
>590	IdentifierDeclStatement	 
>591	IdentifierDecl	i
>592	Identifier	i
>593	IdentifierDeclType	int
>619	FunctionDef	HUlib_addLineToSText (hu_stext_t * s)
>620	ParameterList	hu_stext_t * s
>621	Parameter	 
>622	Identifier	s
>623	ParameterType	hu_stext_t *
>624	ReturnType	void
>625	CompoundStatement	 
>626	ForStatement	for ( i = 0 ; i < s -> h ; i ++ )
>627	ExpressionStatement	 
>628	AssignmentExpr	s -> l [ i ] . needsupdate = 4
>629	PrimaryExpression	4
>630	MemberAccess	s -> l [ i ] . needsupdate
>631	Identifier	needsupdate
>632	ArrayIndexing	s -> l [ i ]
>633	Identifier	i
>634	PtrMemberAccess	s -> l
>635	Identifier	l
>636	Identifier	s
>637	IncDecOp	 
>638	IncDec	++
>639	Identifier	i
>640	Condition	 
>641	RelationalExpression	i < s -> h
>642	PtrMemberAccess	s -> h
>643	Identifier	h
>644	Identifier	s
>645	Identifier	i
>646	ForInit	 
>647	AssignmentExpr	i = 0
>648	PrimaryExpression	0
>649	Identifier	i
>650	ExpressionStatement	 
>651	CallExpression	HUlib_clearTextLine ( & s -> l [ s -> cl ] )
>652	ArgumentList	& s -> l [ s -> cl ]
>653	Argument	& s -> l [ s -> cl ]
>654	UnaryOp	& s -> l [ s -> cl ]
>655	ArrayIndexing	s -> l [ s -> cl ]
>656	PtrMemberAccess	s -> cl
>657	Identifier	cl
>658	Identifier	s
>659	PtrMemberAccess	s -> l
>660	Identifier	l
>661	Identifier	s
>662	UnaryOperator	&
>663	Callee	HUlib_clearTextLine
>664	Identifier	HUlib_clearTextLine
>665	IfStatement	if ( ++ s -> cl == s -> h )
>666	ExpressionStatement	 
>667	AssignmentExpr	s -> cl = 0
>668	PrimaryExpression	0
>669	PtrMemberAccess	s -> cl
>670	Identifier	cl
>671	Identifier	s
>672	Condition	 
>673	EqualityExpression	++ s -> cl == s -> h
>674	PtrMemberAccess	s -> h
>675	Identifier	h
>676	Identifier	s
>677	UnaryExpression	++ s -> cl
>678	PtrMemberAccess	s -> cl
>679	Identifier	cl
>680	Identifier	s
>681	IncDec	++
>682	IdentifierDeclStatement	 
>683	IdentifierDecl	i
>684	Identifier	i
>685	IdentifierDeclType	int
>702	FunctionDef	HUlib_addMessageToSText (hu_stext_t * s , const char * prefix , const char * msg)
>703	ParameterList	hu_stext_t * s , const char * prefix , const char * msg
>704	Parameter	 
>705	Identifier	msg
>706	ParameterType	const char *
>707	Parameter	 
>708	Identifier	prefix
>709	ParameterType	const char *
>710	Parameter	 
>711	Identifier	s
>712	ParameterType	hu_stext_t *
>713	ReturnType	void
>714	CompoundStatement	 
>715	WhileStatement	while ( * msg )
>716	ExpressionStatement	 
>717	CallExpression	HUlib_addCharToTextLine ( & s -> l [ s -> cl ] , * ( msg ++ ) )
>718	ArgumentList	& s -> l [ s -> cl ]
>719	Argument	* ( msg ++ )
>720	UnaryOp	* ( msg ++ )
>721	IncDecOp	msg ++
>722	IncDec	++
>723	Identifier	msg
>724	UnaryOperator	*
>725	Argument	& s -> l [ s -> cl ]
>726	UnaryOp	& s -> l [ s -> cl ]
>727	ArrayIndexing	s -> l [ s -> cl ]
>728	PtrMemberAccess	s -> cl
>729	Identifier	cl
>730	Identifier	s
>731	PtrMemberAccess	s -> l
>732	Identifier	l
>733	Identifier	s
>734	UnaryOperator	&
>735	Callee	HUlib_addCharToTextLine
>736	Identifier	HUlib_addCharToTextLine
>737	Condition	 
>738	UnaryOp	* msg
>739	Identifier	msg
>740	UnaryOperator	*
>741	IfStatement	if ( prefix )
>742	WhileStatement	while ( * prefix )
>743	ExpressionStatement	 
>744	CallExpression	HUlib_addCharToTextLine ( & s -> l [ s -> cl ] , * ( prefix ++ ) )
>745	ArgumentList	& s -> l [ s -> cl ]
>746	Argument	* ( prefix ++ )
>747	UnaryOp	* ( prefix ++ )
>748	IncDecOp	prefix ++
>749	IncDec	++
>750	Identifier	prefix
>751	UnaryOperator	*
>752	Argument	& s -> l [ s -> cl ]
>753	UnaryOp	& s -> l [ s -> cl ]
>754	ArrayIndexing	s -> l [ s -> cl ]
>755	PtrMemberAccess	s -> cl
>756	Identifier	cl
>757	Identifier	s
>758	PtrMemberAccess	s -> l
>759	Identifier	l
>760	Identifier	s
>761	UnaryOperator	&
>762	Callee	HUlib_addCharToTextLine
>763	Identifier	HUlib_addCharToTextLine
>764	Condition	 
>765	UnaryOp	* prefix
>766	Identifier	prefix
>767	UnaryOperator	*
>768	Condition	 
>769	Identifier	prefix
>770	ExpressionStatement	 
>771	CallExpression	HUlib_addLineToSText ( s )
>772	ArgumentList	s
>773	Argument	s
>774	Identifier	s
>775	Callee	HUlib_addLineToSText
>776	Identifier	HUlib_addLineToSText
>793	FunctionDef	HUlib_drawSText (hu_stext_t * s)
>794	ParameterList	hu_stext_t * s
>795	Parameter	 
>796	Identifier	s
>797	ParameterType	hu_stext_t *
>798	ReturnType	void
>799	CompoundStatement	 
>800	ForStatement	for ( i = 0 ; i < s -> h ; i ++ )
>801	CompoundStatement	 
>802	ExpressionStatement	 
>803	CallExpression	HUlib_drawTextLine ( l , false )
>804	ArgumentList	l
>805	Argument	false
>806	Identifier	false
>807	Argument	l
>808	Identifier	l
>809	Callee	HUlib_drawTextLine
>810	Identifier	HUlib_drawTextLine
>811	ExpressionStatement	 
>812	AssignmentExpr	l = & s -> l [ idx ]
>813	UnaryOp	& s -> l [ idx ]
>814	ArrayIndexing	s -> l [ idx ]
>815	Identifier	idx
>816	PtrMemberAccess	s -> l
>817	Identifier	l
>818	Identifier	s
>819	UnaryOperator	&
>820	Identifier	l
>821	IfStatement	if ( idx < 0 )
>822	ExpressionStatement	 
>823	AssignmentExpr	idx += s -> h
>824	PtrMemberAccess	s -> h
>825	Identifier	h
>826	Identifier	s
>827	Identifier	idx
>828	Condition	 
>829	RelationalExpression	idx < 0
>830	PrimaryExpression	0
>831	Identifier	idx
>832	ExpressionStatement	 
>833	AssignmentExpr	idx = s -> cl - i
>834	AdditiveExpression	s -> cl - i
>835	Identifier	i
>836	PtrMemberAccess	s -> cl
>837	Identifier	cl
>838	Identifier	s
>839	Identifier	idx
>840	IncDecOp	 
>841	IncDec	++
>842	Identifier	i
>843	Condition	 
>844	RelationalExpression	i < s -> h
>845	PtrMemberAccess	s -> h
>846	Identifier	h
>847	Identifier	s
>848	Identifier	i
>849	ForInit	 
>850	AssignmentExpr	i = 0
>851	PrimaryExpression	0
>852	Identifier	i
>853	IfStatement	if ( ! * s -> on )
>854	ReturnStatement	 
>855	Condition	 
>856	UnaryOp	! * s -> on
>857	UnaryOp	* s -> on
>858	PtrMemberAccess	s -> on
>859	Identifier	on
>860	Identifier	s
>861	UnaryOperator	*
>862	UnaryOperator	!
>863	IdentifierDeclStatement	 
>864	IdentifierDecl	* l
>865	Identifier	l
>866	IdentifierDeclType	hu_textline_t *
>867	IdentifierDeclStatement	 
>868	IdentifierDecl	idx
>869	Identifier	idx
>870	IdentifierDeclType	int
>871	IdentifierDecl	i
>872	Identifier	i
>873	IdentifierDeclType	int
>892	FunctionDef	HUlib_eraseSText (hu_stext_t * s)
>893	ParameterList	hu_stext_t * s
>894	Parameter	 
>895	Identifier	s
>896	ParameterType	hu_stext_t *
>897	ReturnType	void
>898	CompoundStatement	 
>899	ExpressionStatement	 
>900	AssignmentExpr	s -> laston = * s -> on
>901	UnaryOp	* s -> on
>902	PtrMemberAccess	s -> on
>903	Identifier	on
>904	Identifier	s
>905	UnaryOperator	*
>906	PtrMemberAccess	s -> laston
>907	Identifier	laston
>908	Identifier	s
>909	ForStatement	for ( i = 0 ; i < s -> h ; i ++ )
>910	CompoundStatement	 
>911	ExpressionStatement	 
>912	CallExpression	HUlib_eraseTextLine ( & s -> l [ i ] )
>913	ArgumentList	& s -> l [ i ]
>914	Argument	& s -> l [ i ]
>915	UnaryOp	& s -> l [ i ]
>916	ArrayIndexing	s -> l [ i ]
>917	Identifier	i
>918	PtrMemberAccess	s -> l
>919	Identifier	l
>920	Identifier	s
>921	UnaryOperator	&
>922	Callee	HUlib_eraseTextLine
>923	Identifier	HUlib_eraseTextLine
>924	IfStatement	if ( s -> laston && ! * s -> on )
>925	ExpressionStatement	 
>926	AssignmentExpr	s -> l [ i ] . needsupdate = 4
>927	PrimaryExpression	4
>928	MemberAccess	s -> l [ i ] . needsupdate
>929	Identifier	needsupdate
>930	ArrayIndexing	s -> l [ i ]
>931	Identifier	i
>932	PtrMemberAccess	s -> l
>933	Identifier	l
>934	Identifier	s
>935	Condition	 
>936	AndExpression	s -> laston && ! * s -> on
>937	UnaryOp	! * s -> on
>938	UnaryOp	* s -> on
>939	PtrMemberAccess	s -> on
>940	Identifier	on
>941	Identifier	s
>942	UnaryOperator	*
>943	UnaryOperator	!
>944	PtrMemberAccess	s -> laston
>945	Identifier	laston
>946	Identifier	s
>947	IncDecOp	 
>948	IncDec	++
>949	Identifier	i
>950	Condition	 
>951	RelationalExpression	i < s -> h
>952	PtrMemberAccess	s -> h
>953	Identifier	h
>954	Identifier	s
>955	Identifier	i
>956	ForInit	 
>957	AssignmentExpr	i = 0
>958	PrimaryExpression	0
>959	Identifier	i
>960	IdentifierDeclStatement	 
>961	IdentifierDecl	i
>962	Identifier	i
>963	IdentifierDeclType	int
>982	FunctionDef	HUlib_initIText (hu_itext_t * it , int x , int y , patch_t * * font , int startchar , qboolean * on)
>983	ParameterList	hu_itext_t * it , int x , int y , patch_t * * font , int startchar , qboolean * on
>984	Parameter	 
>985	Identifier	on
>986	ParameterType	qboolean *
>987	Parameter	 
>988	Identifier	startchar
>989	ParameterType	int
>990	Parameter	 
>991	Identifier	font
>992	ParameterType	patch_t * *
>993	Parameter	 
>994	Identifier	y
>995	ParameterType	int
>996	Parameter	 
>997	Identifier	x
>998	ParameterType	int
>999	Parameter	 
>1000	Identifier	it
>1001	ParameterType	hu_itext_t *
>1002	ReturnType	void
>1003	CompoundStatement	 
>1004	ExpressionStatement	 
>1005	CallExpression	HUlib_initTextLine ( & it -> l , x , y , font , startchar )
>1006	ArgumentList	& it -> l
>1007	Argument	startchar
>1008	Identifier	startchar
>1009	Argument	font
>1010	Identifier	font
>1011	Argument	y
>1012	Identifier	y
>1013	Argument	x
>1014	Identifier	x
>1015	Argument	& it -> l
>1016	UnaryOp	& it -> l
>1017	PtrMemberAccess	it -> l
>1018	Identifier	l
>1019	Identifier	it
>1020	UnaryOperator	&
>1021	Callee	HUlib_initTextLine
>1022	Identifier	HUlib_initTextLine
>1023	ExpressionStatement	 
>1024	AssignmentExpr	it -> laston = true
>1025	Identifier	true
>1026	PtrMemberAccess	it -> laston
>1027	Identifier	laston
>1028	Identifier	it
>1029	ExpressionStatement	 
>1030	AssignmentExpr	it -> on = on
>1031	Identifier	on
>1032	PtrMemberAccess	it -> on
>1033	Identifier	on
>1034	Identifier	it
>1035	ExpressionStatement	 
>1036	AssignmentExpr	it -> lm = 0
>1037	PrimaryExpression	0
>1038	PtrMemberAccess	it -> lm
>1039	Identifier	lm
>1040	Identifier	it
>1057	FunctionDef	HUlib_delCharFromIText (hu_itext_t * it)
>1058	ParameterList	hu_itext_t * it
>1059	Parameter	 
>1060	Identifier	it
>1061	ParameterType	hu_itext_t *
>1062	ReturnType	void
>1063	CompoundStatement	 
>1064	IfStatement	if ( it -> l . len != it -> lm )
>1065	ExpressionStatement	 
>1066	CallExpression	HUlib_delCharFromTextLine ( & it -> l )
>1067	ArgumentList	& it -> l
>1068	Argument	& it -> l
>1069	UnaryOp	& it -> l
>1070	PtrMemberAccess	it -> l
>1071	Identifier	l
>1072	Identifier	it
>1073	UnaryOperator	&
>1074	Callee	HUlib_delCharFromTextLine
>1075	Identifier	HUlib_delCharFromTextLine
>1076	Condition	 
>1077	EqualityExpression	it -> l . len != it -> lm
>1078	PtrMemberAccess	it -> lm
>1079	Identifier	lm
>1080	Identifier	it
>1081	MemberAccess	it -> l . len
>1082	Identifier	len
>1083	PtrMemberAccess	it -> l
>1084	Identifier	l
>1085	Identifier	it
>1096	FunctionDef	HUlib_eraseLineFromIText (hu_itext_t * it)
>1097	ParameterList	hu_itext_t * it
>1098	Parameter	 
>1099	Identifier	it
>1100	ParameterType	hu_itext_t *
>1101	ReturnType	void
>1102	CompoundStatement	 
>1103	WhileStatement	while ( it -> lm != it -> l . len )
>1104	ExpressionStatement	 
>1105	CallExpression	HUlib_delCharFromTextLine ( & it -> l )
>1106	ArgumentList	& it -> l
>1107	Argument	& it -> l
>1108	UnaryOp	& it -> l
>1109	PtrMemberAccess	it -> l
>1110	Identifier	l
>1111	Identifier	it
>1112	UnaryOperator	&
>1113	Callee	HUlib_delCharFromTextLine
>1114	Identifier	HUlib_delCharFromTextLine
>1115	Condition	 
>1116	EqualityExpression	it -> lm != it -> l . len
>1117	MemberAccess	it -> l . len
>1118	Identifier	len
>1119	PtrMemberAccess	it -> l
>1120	Identifier	l
>1121	Identifier	it
>1122	PtrMemberAccess	it -> lm
>1123	Identifier	lm
>1124	Identifier	it
>1135	FunctionDef	HUlib_resetIText (hu_itext_t * it)
>1136	ParameterList	hu_itext_t * it
>1137	Parameter	 
>1138	Identifier	it
>1139	ParameterType	hu_itext_t *
>1140	ReturnType	void
>1141	CompoundStatement	 
>1142	ExpressionStatement	 
>1143	CallExpression	HUlib_clearTextLine ( & it -> l )
>1144	ArgumentList	& it -> l
>1145	Argument	& it -> l
>1146	UnaryOp	& it -> l
>1147	PtrMemberAccess	it -> l
>1148	Identifier	l
>1149	Identifier	it
>1150	UnaryOperator	&
>1151	Callee	HUlib_clearTextLine
>1152	Identifier	HUlib_clearTextLine
>1153	ExpressionStatement	 
>1154	AssignmentExpr	it -> lm = 0
>1155	PrimaryExpression	0
>1156	PtrMemberAccess	it -> lm
>1157	Identifier	lm
>1158	Identifier	it
>1167	FunctionDef	HUlib_addPrefixToIText (hu_itext_t * it , char * str)
>1168	ParameterList	hu_itext_t * it , char * str
>1169	Parameter	 
>1170	Identifier	str
>1171	ParameterType	char *
>1172	Parameter	 
>1173	Identifier	it
>1174	ParameterType	hu_itext_t *
>1175	ReturnType	void
>1176	CompoundStatement	 
>1177	ExpressionStatement	 
>1178	AssignmentExpr	it -> lm = it -> l . len
>1179	MemberAccess	it -> l . len
>1180	Identifier	len
>1181	PtrMemberAccess	it -> l
>1182	Identifier	l
>1183	Identifier	it
>1184	PtrMemberAccess	it -> lm
>1185	Identifier	lm
>1186	Identifier	it
>1187	WhileStatement	while ( * str )
>1188	ExpressionStatement	 
>1189	CallExpression	HUlib_addCharToTextLine ( & it -> l , * ( str ++ ) )
>1190	ArgumentList	& it -> l
>1191	Argument	* ( str ++ )
>1192	UnaryOp	* ( str ++ )
>1193	IncDecOp	str ++
>1194	IncDec	++
>1195	Identifier	str
>1196	UnaryOperator	*
>1197	Argument	& it -> l
>1198	UnaryOp	& it -> l
>1199	PtrMemberAccess	it -> l
>1200	Identifier	l
>1201	Identifier	it
>1202	UnaryOperator	&
>1203	Callee	HUlib_addCharToTextLine
>1204	Identifier	HUlib_addCharToTextLine
>1205	Condition	 
>1206	UnaryOp	* str
>1207	Identifier	str
>1208	UnaryOperator	*
>1222	FunctionDef	HUlib_keyInIText (hu_itext_t * it , unsigned char ch)
>1223	ParameterList	hu_itext_t * it , unsigned char ch
>1224	Parameter	 
>1225	Identifier	ch
>1226	ParameterType	unsigned char
>1227	Parameter	 
>1228	Identifier	it
>1229	ParameterType	hu_itext_t *
>1230	ReturnType	qboolean
>1231	CompoundStatement	 
>1232	ReturnStatement	 
>1233	Identifier	true
>1234	IfStatement	if ( ch >= ' ' && ch <= '_' )
>1235	ElseStatement	else
>1236	IfStatement	if ( ch == KEY_BACKSPACE )
>1237	ElseStatement	else
>1238	IfStatement	if ( ch != KEY_ENTER )
>1239	ReturnStatement	 
>1240	Identifier	false
>1241	Condition	 
>1242	EqualityExpression	ch != KEY_ENTER
>1243	Identifier	KEY_ENTER
>1244	Identifier	ch
>1245	ExpressionStatement	 
>1246	CallExpression	HUlib_delCharFromIText ( it )
>1247	ArgumentList	it
>1248	Argument	it
>1249	Identifier	it
>1250	Callee	HUlib_delCharFromIText
>1251	Identifier	HUlib_delCharFromIText
>1252	Condition	 
>1253	EqualityExpression	ch == KEY_BACKSPACE
>1254	Identifier	KEY_BACKSPACE
>1255	Identifier	ch
>1256	ExpressionStatement	 
>1257	CallExpression	HUlib_addCharToTextLine ( & it -> l , ( char ) ch )
>1258	ArgumentList	& it -> l
>1259	Argument	( char ) ch
>1260	CastExpression	( char ) ch
>1261	Identifier	ch
>1262	CastTarget	char
>1263	Argument	& it -> l
>1264	UnaryOp	& it -> l
>1265	PtrMemberAccess	it -> l
>1266	Identifier	l
>1267	Identifier	it
>1268	UnaryOperator	&
>1269	Callee	HUlib_addCharToTextLine
>1270	Identifier	HUlib_addCharToTextLine
>1271	Condition	 
>1272	AndExpression	ch >= ' ' && ch <= '_'
>1273	RelationalExpression	ch <= '_'
>1274	PrimaryExpression	'_'
>1275	Identifier	ch
>1276	RelationalExpression	ch >= ' '
>1277	PrimaryExpression	' '
>1278	Identifier	ch
>1290	FunctionDef	HUlib_drawIText (hu_itext_t * it)
>1291	ParameterList	hu_itext_t * it
>1292	Parameter	 
>1293	Identifier	it
>1294	ParameterType	hu_itext_t *
>1295	ReturnType	void
>1296	CompoundStatement	 
>1297	ExpressionStatement	 
>1298	CallExpression	HUlib_drawTextLine ( l , true )
>1299	ArgumentList	l
>1300	Argument	true
>1301	Identifier	true
>1302	Argument	l
>1303	Identifier	l
>1304	Callee	HUlib_drawTextLine
>1305	Identifier	HUlib_drawTextLine
>1306	IfStatement	if ( ! * it -> on )
>1307	ReturnStatement	 
>1308	Condition	 
>1309	UnaryOp	! * it -> on
>1310	UnaryOp	* it -> on
>1311	PtrMemberAccess	it -> on
>1312	Identifier	on
>1313	Identifier	it
>1314	UnaryOperator	*
>1315	UnaryOperator	!
>1316	IdentifierDeclStatement	 
>1317	IdentifierDecl	* l = & it -> l
>1318	AssignmentExpr	* l = & it -> l
>1319	UnaryOp	& it -> l
>1320	PtrMemberAccess	it -> l
>1321	Identifier	l
>1322	Identifier	it
>1323	UnaryOperator	&
>1324	Identifier	l
>1325	Identifier	l
>1326	IdentifierDeclType	hu_textline_t *
>1339	FunctionDef	HUlib_eraseIText (hu_itext_t * it)
>1340	ParameterList	hu_itext_t * it
>1341	Parameter	 
>1342	Identifier	it
>1343	ParameterType	hu_itext_t *
>1344	ReturnType	void
>1345	CompoundStatement	 
>1346	ExpressionStatement	 
>1347	AssignmentExpr	it -> laston = * it -> on
>1348	UnaryOp	* it -> on
>1349	PtrMemberAccess	it -> on
>1350	Identifier	on
>1351	Identifier	it
>1352	UnaryOperator	*
>1353	PtrMemberAccess	it -> laston
>1354	Identifier	laston
>1355	Identifier	it
>1356	ExpressionStatement	 
>1357	CallExpression	HUlib_eraseTextLine ( & it -> l )
>1358	ArgumentList	& it -> l
>1359	Argument	& it -> l
>1360	UnaryOp	& it -> l
>1361	PtrMemberAccess	it -> l
>1362	Identifier	l
>1363	Identifier	it
>1364	UnaryOperator	&
>1365	Callee	HUlib_eraseTextLine
>1366	Identifier	HUlib_eraseTextLine
>1367	IfStatement	if ( it -> laston && ! * it -> on )
>1368	ExpressionStatement	 
>1369	AssignmentExpr	it -> l . needsupdate = 4
>1370	PrimaryExpression	4
>1371	MemberAccess	it -> l . needsupdate
>1372	Identifier	needsupdate
>1373	PtrMemberAccess	it -> l
>1374	Identifier	l
>1375	Identifier	it
>1376	Condition	 
>1377	AndExpression	it -> laston && ! * it -> on
>1378	UnaryOp	! * it -> on
>1379	UnaryOp	* it -> on
>1380	PtrMemberAccess	it -> on
>1381	Identifier	on
>1382	Identifier	it
>1383	UnaryOperator	*
>1384	UnaryOperator	!
>1385	PtrMemberAccess	it -> laston
>1386	Identifier	laston
>1387	Identifier	it
<3=6,5,4
<10=16,15,11
<11=12
<12=14,13
<16=31,23,17
<17=18
<18=20,19
<20=22,21
<23=24
<24=26,25
<26=28,27
<28=30,29
<31=32
<32=34,33
<34=36,35
<48=66,65,49
<49=62,59,56,53,50
<50=52,51
<53=55,54
<56=58,57
<59=61,60
<62=64,63
<66=92,86,80,74,67
<67=68
<68=72,69
<69=70
<70=71
<72=73
<74=75
<75=77,76
<77=79,78
<80=81
<81=83,82
<83=85,84
<86=87
<87=89,88
<89=91,90
<92=93
<93=95,94
<95=97,96
<111=120,119,112
<112=116,113
<113=115,114
<116=118,117
<120=121
<121=156,154,122
<122=123
<123=142,132,126,124
<124=125
<126=127
<127=129,128
<129=131,130
<132=133
<133=135,134
<135=139,136
<136=138,137
<139=141,140
<142=143
<143=145,144
<145=151,146
<146=148,147
<148=150,149
<151=153,152
<154=155
<156=157
<157=159,158
<159=161,160
<177=183,182,178
<178=179
<179=181,180
<183=184
<184=209,207,185
<185=186
<186=195,189,187
<187=188
<189=190
<190=192,191
<192=194,193
<195=196
<196=198,197
<198=204,199
<199=203,200
<200=202,201
<204=206,205
<207=208
<209=210
<210=214,211
<211=213,212
<228=237,236,229
<229=233,230
<230=232,231
<233=235,234
<237=414,410,406,402,396,286,238
<238=263,239
<239=240
<240=241
<241=261,242
<242=259,255,253,243
<243=244
<244=250,245
<245=249,246
<246=248,247
<250=252,251
<253=254
<255=256
<256=258,257
<259=260
<261=262
<263=264
<264=285,265
<265=267,266
<267=284,268
<268=282,269
<269=270
<270=271
<271=273,272
<273=279,274
<274=278,275
<275=277,276
<279=281,280
<282=283
<286=392,386,383,287
<287=370,288
<288=356,301,289
<289=290
<290=297,291
<291=293,292
<293=294
<294=296,295
<297=298
<298=300,299
<301=337,329,306,302
<302=303
<303=305,304
<306=307
<307=327,308
<308=325,321,319,309
<309=310
<310=316,311
<311=315,312
<312=314,313
<316=318,317
<319=320
<321=322
<322=324,323
<325=326
<327=328
<329=331,330
<331=332
<332=334,333
<334=336,335
<337=338
<338=355,339
<339=353,340
<340=341
<341=342
<342=344,343
<344=350,345
<345=349,346
<346=348,347
<350=352,351
<353=354
<356=357
<357=367,358
<358=362,359
<359=361,360
<362=366,363
<363=365,364
<367=369,368
<370=371
<371=382,372
<372=380,373
<373=374
<374=375
<375=377,376
<377=379,378
<380=381
<383=385,384
<386=387
<387=391,388
<388=390,389
<392=393
<393=395,394
<396=397
<397=401,398
<398=400,399
<402=403
<403=405,404
<406=407
<407=409,408
<410=411
<411=413,412
<414=415
<415=417,416
<450=456,455,451
<451=452
<452=454,453
<456=482,478,474,473,472,471,470,469,468,467,466,465,464,463,462,461,460,459,458,457
<474=475
<475=477,476
<478=479
<479=481,480
<482=483
<483=485,484
<493=517,516,494
<494=513,510,507,504,501,498,495
<495=497,496
<498=500,499
<501=503,502
<504=506,505
<507=509,508
<510=512,511
<513=515,514
<517=590,584,578,572,566,518
<518=562,558,555,519
<519=520
<520=553,521
<521=545,543,526,524,522
<522=523
<524=525
<526=527
<527=542,528
<528=541,529
<529=531,530
<531=539,532
<532=533
<533=534
<534=536,535
<536=538,537
<539=540
<543=544
<545=546
<546=552,547
<547=549,548
<549=551,550
<553=554
<555=557,556
<558=559
<559=561,560
<562=563
<563=565,564
<566=567
<567=569,568
<569=571,570
<572=573
<573=575,574
<575=577,576
<578=579
<579=581,580
<581=583,582
<584=585
<585=587,586
<587=589,588
<590=591
<591=593,592
<619=625,624,620
<620=621
<621=623,622
<625=682,665,650,626
<626=646,640,637,627
<627=628
<628=630,629
<630=632,631
<632=634,633
<634=636,635
<637=639,638
<640=641
<641=645,642
<642=644,643
<646=647
<647=649,648
<650=651
<651=663,652
<652=653
<653=654
<654=662,655
<655=659,656
<656=658,657
<659=661,660
<663=664
<665=672,666
<666=667
<667=669,668
<669=671,670
<672=673
<673=677,674
<674=676,675
<677=681,678
<678=680,679
<682=683
<683=685,684
<702=714,713,703
<703=710,707,704
<704=706,705
<707=709,708
<710=712,711
<714=770,741,715
<715=737,716
<716=717
<717=735,718
<718=725,719
<719=720
<720=724,721
<721=723,722
<725=726
<726=734,727
<727=731,728
<728=730,729
<731=733,732
<735=736
<737=738
<738=740,739
<741=768,742
<742=764,743
<743=744
<744=762,745
<745=752,746
<746=747
<747=751,748
<748=750,749
<752=753
<753=761,754
<754=758,755
<755=757,756
<758=760,759
<762=763
<764=765
<765=767,766
<768=769
<770=771
<771=775,772
<772=773
<773=774
<775=776
<793=799,798,794
<794=795
<795=797,796
<799=867,863,853,800
<800=849,843,840,801
<801=832,821,811,802
<802=803
<803=809,804
<804=807,805
<805=806
<807=808
<809=810
<811=812
<812=820,813
<813=819,814
<814=816,815
<816=818,817
<821=828,822
<822=823
<823=827,824
<824=826,825
<828=829
<829=831,830
<832=833
<833=839,834
<834=836,835
<836=838,837
<840=842,841
<843=844
<844=848,845
<845=847,846
<849=850
<850=852,851
<853=855,854
<855=856
<856=862,857
<857=861,858
<858=860,859
<863=864
<864=866,865
<867=871,868
<868=870,869
<871=873,872
<892=898,897,893
<893=894
<894=896,895
<898=960,909,899
<899=900
<900=906,901
<901=905,902
<902=904,903
<906=908,907
<909=956,950,947,910
<910=924,911
<911=912
<912=922,913
<913=914
<914=915
<915=921,916
<916=918,917
<918=920,919
<922=923
<924=935,925
<925=926
<926=928,927
<928=930,929
<930=932,931
<932=934,933
<935=936
<936=944,937
<937=943,938
<938=942,939
<939=941,940
<944=946,945
<947=949,948
<950=951
<951=955,952
<952=954,953
<956=957
<957=959,958
<960=961
<961=963,962
<982=1003,1002,983
<983=999,996,993,990,987,984
<984=986,985
<987=989,988
<990=992,991
<993=995,994
<996=998,997
<999=1001,1000
<1003=1035,1029,1023,1004
<1004=1005
<1005=1021,1006
<1006=1015,1013,1011,1009,1007
<1007=1008
<1009=1010
<1011=1012
<1013=1014
<1015=1016
<1016=1020,1017
<1017=1019,1018
<1021=1022
<1023=1024
<1024=1026,1025
<1026=1028,1027
<1029=1030
<1030=1032,1031
<1032=1034,1033
<1035=1036
<1036=1038,1037
<1038=1040,1039
<1057=1063,1062,1058
<1058=1059
<1059=1061,1060
<1063=1064
<1064=1076,1065
<1065=1066
<1066=1074,1067
<1067=1068
<1068=1069
<1069=1073,1070
<1070=1072,1071
<1074=1075
<1076=1077
<1077=1081,1078
<1078=1080,1079
<1081=1083,1082
<1083=1085,1084
<1096=1102,1101,1097
<1097=1098
<1098=1100,1099
<1102=1103
<1103=1115,1104
<1104=1105
<1105=1113,1106
<1106=1107
<1107=1108
<1108=1112,1109
<1109=1111,1110
<1113=1114
<1115=1116
<1116=1122,1117
<1117=1119,1118
<1119=1121,1120
<1122=1124,1123
<1135=1141,1140,1136
<1136=1137
<1137=1139,1138
<1141=1153,1142
<1142=1143
<1143=1151,1144
<1144=1145
<1145=1146
<1146=1150,1147
<1147=1149,1148
<1151=1152
<1153=1154
<1154=1156,1155
<1156=1158,1157
<1167=1176,1175,1168
<1168=1172,1169
<1169=1171,1170
<1172=1174,1173
<1176=1187,1177
<1177=1178
<1178=1184,1179
<1179=1181,1180
<1181=1183,1182
<1184=1186,1185
<1187=1205,1188
<1188=1189
<1189=1203,1190
<1190=1197,1191
<1191=1192
<1192=1196,1193
<1193=1195,1194
<1197=1198
<1198=1202,1199
<1199=1201,1200
<1203=1204
<1205=1206
<1206=1208,1207
<1222=1231,1230,1223
<1223=1227,1224
<1224=1226,1225
<1227=1229,1228
<1231=1234,1232
<1232=1233
<1234=1271,1256,1235
<1235=1236
<1236=1252,1245,1237
<1237=1238
<1238=1241,1239
<1239=1240
<1241=1242
<1242=1244,1243
<1245=1246
<1246=1250,1247
<1247=1248
<1248=1249
<1250=1251
<1252=1253
<1253=1255,1254
<1256=1257
<1257=1269,1258
<1258=1263,1259
<1259=1260
<1260=1262,1261
<1263=1264
<1264=1268,1265
<1265=1267,1266
<1269=1270
<1271=1272
<1272=1276,1273
<1273=1275,1274
<1276=1278,1277
<1290=1296,1295,1291
<1291=1292
<1292=1294,1293
<1296=1316,1306,1297
<1297=1298
<1298=1304,1299
<1299=1302,1300
<1300=1301
<1302=1303
<1304=1305
<1306=1308,1307
<1308=1309
<1309=1315,1310
<1310=1314,1311
<1311=1313,1312
<1316=1317
<1317=1326,1325,1318
<1318=1324,1319
<1319=1323,1320
<1320=1322,1321
<1339=1345,1344,1340
<1340=1341
<1341=1343,1342
<1345=1367,1356,1346
<1346=1347
<1347=1353,1348
<1348=1352,1349
<1349=1351,1350
<1353=1355,1354
<1356=1357
<1357=1365,1358
<1358=1359
<1359=1360
<1360=1364,1361
<1361=1363,1362
<1365=1366
<1367=1376,1368
<1368=1369
<1369=1371,1370
<1371=1373,1372
<1373=1375,1374
<1376=1377
<1377=1385,1378
<1378=1384,1379
<1379=1383,1380
<1380=1382,1381
<1385=1387,1386
