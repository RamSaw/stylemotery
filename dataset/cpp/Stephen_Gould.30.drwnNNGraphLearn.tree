>10	FunctionDef	drwnNNGraphMoveUpdateThread (drwnNNGraph * graph)
>11	ParameterList	drwnNNGraph * graph
>12	Parameter	 
>13	Identifier	graph
>14	ParameterType	drwnNNGraph *
>15	CompoundStatement	 
>20	FunctionDef	drwnNNGraphMoveUpdateThread (drwnNNGraph * graph , const DistanceMetric & M)
>21	ParameterList	drwnNNGraph * graph , const DistanceMetric & M
>22	Parameter	 
>23	Identifier	M
>24	ParameterType	const DistanceMetric &
>25	Parameter	 
>26	Identifier	graph
>27	ParameterType	drwnNNGraph *
>28	CompoundStatement	 
>34	FunctionDef	~drwnNNGraphMoveUpdateThread ()
>35	ParameterList	 
>36	CompoundStatement	 
>40	FunctionDef	operator ( ) ()
>41	ParameterList	 
>42	ReturnType	void
>43	CompoundStatement	 
>44	ExpressionStatement	 
>45	AssignmentExpr	energy = _graph -> energy ( )
>46	CallExpression	_graph -> energy ( )
>47	ArgumentList	 
>48	Callee	_graph -> energy
>49	PtrMemberAccess	_graph -> energy
>50	Identifier	energy
>51	Identifier	_graph
>52	Identifier	energy
>53	ExpressionStatement	 
>54	CallExpression	drwnNNGraphThreadedMoves 
>55	ArgumentList	* _graph
>56	Argument	_M
>57	Identifier	_M
>58	Argument	* _graph
>59	UnaryOp	* _graph
>60	Identifier	_graph
>61	UnaryOperator	*
>62	Callee	drwnNNGraphThreadedMoves 
>63	Identifier	drwnNNGraphThreadedMoves 
>79	FunctionDef	drwnNNGraphDataMatrixThread (const drwnNNGraphLearner * learner , MatrixXd * X , unsigned imgIndx)
>80	ParameterList	const drwnNNGraphLearner * learner , MatrixXd * X , unsigned imgIndx
>81	Parameter	 
>82	Identifier	imgIndx
>83	ParameterType	unsigned
>84	Parameter	 
>85	Identifier	X
>86	ParameterType	MatrixXd *
>87	Parameter	 
>88	Identifier	learner
>89	ParameterType	const drwnNNGraphLearner *
>90	CompoundStatement	 
>91	ExpressionStatement	 
>92	CallExpression	_imgIndxes . insert ( imgIndx )
>93	ArgumentList	imgIndx
>94	Argument	imgIndx
>95	Identifier	imgIndx
>96	Callee	_imgIndxes . insert
>97	MemberAccess	_imgIndxes . insert
>98	Identifier	insert
>99	Identifier	_imgIndxes
>107	FunctionDef	drwnNNGraphDataMatrixThread (const drwnNNGraphLearner * learner , MatrixXd * X , const set < unsigned > & imgIndxes)
>108	ParameterList	const drwnNNGraphLearner * learner , MatrixXd * X , const set < unsigned > & imgIndxes
>109	Parameter	 
>110	Identifier	imgIndxes
>111	ParameterType	const set < unsigned > &
>112	Parameter	 
>113	Identifier	X
>114	ParameterType	MatrixXd *
>115	Parameter	 
>116	Identifier	learner
>117	ParameterType	const drwnNNGraphLearner *
>118	CompoundStatement	 
>125	FunctionDef	~drwnNNGraphDataMatrixThread ()
>126	ParameterList	 
>127	CompoundStatement	 
>131	FunctionDef	operator ( ) ()
>132	ParameterList	 
>133	ReturnType	void
>134	CompoundStatement	 
>135	ForStatement	for ( set < unsigned > 
>136	CompoundStatement	 
>137	ExpressionStatement	 
>138	CallExpression	unlock ( )
>139	ArgumentList	 
>140	Callee	unlock
>141	Identifier	unlock
>142	ExpressionStatement	 
>143	Statement	 
>144	Statement	 
>145	Statement	 
>146	Statement	 
>147	Statement	 
>148	Statement	 
>149	Statement	 
>150	Statement	 
>151	Statement	 
>152	Statement	 
>153	Statement	 
>154	Statement	 
>155	Statement	 
>156	Statement	 
>157	Statement	 
>158	Statement	 
>159	Statement	 
>160	Statement	 
>161	Statement	 
>162	Statement	 
>163	Statement	 
>164	Statement	 
>165	ExpressionStatement	 
>166	CallExpression	lock ( )
>167	ArgumentList	 
>168	Callee	lock
>169	Identifier	lock
>170	ForStatement	for ( unsigned segId = 0 ; segId < posGraph [ * it ] . numNodes ( ) ; segId ++ )
>171	CompoundStatement	 
>172	ForStatement	for ( drwnNNGraphEdgeList 
>173	CompoundStatement	 
>174	ExpressionStatement	 
>175	CallExpression	rankUpdate ( delta )
>176	ArgumentList	delta
>177	Argument	delta
>178	Identifier	delta
>179	Callee	rankUpdate
>180	Identifier	rankUpdate
>181	Statement	 
>182	Statement	 
>183	Statement	 
>184	Statement	 
>185	Statement	 
>186	Statement	 
>187	Statement	 
>188	Statement	 
>189	Statement	 
>190	Statement	 
>191	Statement	 
>192	IdentifierDeclStatement	 
>193	IdentifierDecl	delta ( graph [ u ] . features - graph [ v ] . features )
>194	AdditiveExpression	graph [ u ] . features - graph [ v ] . features
>195	MemberAccess	graph [ v ] . features
>196	Identifier	features
>197	ArrayIndexing	graph [ v ]
>198	Identifier	v
>199	Identifier	graph
>200	MemberAccess	graph [ u ] . features
>201	Identifier	features
>202	ArrayIndexing	graph [ u ]
>203	Identifier	u
>204	Identifier	graph
>205	Identifier	delta
>206	IdentifierDeclType	const VectorXf
>207	IdentifierDeclStatement	 
>208	IdentifierDecl	v ( kt -> targetNode )
>209	PtrMemberAccess	kt -> targetNode
>210	Identifier	targetNode
>211	Identifier	kt
>212	Identifier	v
>213	IdentifierDeclType	const drwnNNGraphNodeIndex
>214	UnaryExpression	 
>215	Identifier	kt
>216	IncDec	++
>217	Condition	 
>218	EqualityExpression	kt != e . end ( )
>219	CallExpression	e . end ( )
>220	ArgumentList	 
>221	Callee	e . end
>222	MemberAccess	e . end
>223	Identifier	end
>224	Identifier	e
>225	Identifier	kt
>226	ForInit	 
>227	IdentifierDeclStatement	drwnNNGraphEdgeList 
>228	IdentifierDecl	kt = e . begin ( )
>229	AssignmentExpr	kt = e . begin ( )
>230	CallExpression	e . begin ( )
>231	ArgumentList	 
>232	Callee	e . begin
>233	MemberAccess	e . begin
>234	Identifier	begin
>235	Identifier	e
>236	Identifier	kt
>237	Identifier	kt
>238	IdentifierDeclType	drwnNNGraphEdgeList 
>239	IdentifierDeclStatement	 
>240	IdentifierDecl	& e = posGraph [ u ] . edges
>241	AssignmentExpr	& e = posGraph [ u ] . edges
>242	MemberAccess	posGraph [ u ] . edges
>243	Identifier	edges
>244	ArrayIndexing	posGraph [ u ]
>245	Identifier	u
>246	Identifier	posGraph
>247	Identifier	e
>248	Identifier	e
>249	IdentifierDeclType	const drwnNNGraphEdgeList &
>250	IdentifierDeclStatement	 
>251	IdentifierDecl	u ( * it , segId )
>252	Expression	* it , segId
>253	Identifier	segId
>254	UnaryOp	* it
>255	Identifier	it
>256	UnaryOperator	*
>257	Identifier	u
>258	IdentifierDeclType	const drwnNNGraphNodeIndex
>259	IncDecOp	 
>260	IncDec	++
>261	Identifier	segId
>262	Condition	 
>263	RelationalExpression	segId < posGraph [ * it ] . numNodes ( )
>264	CallExpression	posGraph [ * it ] . numNodes ( )
>265	ArgumentList	 
>266	Callee	posGraph [ * it ] . numNodes
>267	MemberAccess	posGraph [ * it ] . numNodes
>268	Identifier	numNodes
>269	ArrayIndexing	posGraph [ * it ]
>270	UnaryOp	* it
>271	Identifier	it
>272	UnaryOperator	*
>273	Identifier	posGraph
>274	Identifier	segId
>275	ForInit	 
>276	IdentifierDeclStatement	unsigned segId = 0 ;
>277	IdentifierDecl	segId = 0
>278	AssignmentExpr	segId = 0
>279	PrimaryExpression	0
>280	Identifier	segId
>281	Identifier	segId
>282	IdentifierDeclType	unsigned
>283	IdentifierDeclStatement	 
>284	IdentifierDecl	localX = MatrixXf 
>285	AssignmentExpr	localX = MatrixXf 
>286	CallExpression	MatrixXf 
>287	ArgumentList	_X -> rows ( )
>288	Argument	_X -> cols ( )
>289	CallExpression	_X -> cols ( )
>290	ArgumentList	 
>291	Callee	_X -> cols
>292	PtrMemberAccess	_X -> cols
>293	Identifier	cols
>294	Identifier	_X
>295	Argument	_X -> rows ( )
>296	CallExpression	_X -> rows ( )
>297	ArgumentList	 
>298	Callee	_X -> rows
>299	PtrMemberAccess	_X -> rows
>300	Identifier	rows
>301	Identifier	_X
>302	Callee	MatrixXf 
>303	Identifier	MatrixXf 
>304	Identifier	localX
>305	Identifier	localX
>306	IdentifierDeclType	MatrixXf
>307	UnaryExpression	 
>308	Identifier	it
>309	IncDec	++
>310	Condition	 
>311	EqualityExpression	it != _imgIndxes . end ( )
>312	CallExpression	_imgIndxes . end ( )
>313	ArgumentList	 
>314	Callee	_imgIndxes . end
>315	MemberAccess	_imgIndxes . end
>316	Identifier	end
>317	Identifier	_imgIndxes
>318	Identifier	it
>319	ForInit	 
>320	IdentifierDeclStatement	set < unsigned > 
>321	IdentifierDecl	it = _imgIndxes . begin ( )
>322	AssignmentExpr	it = _imgIndxes . begin ( )
>323	CallExpression	_imgIndxes . begin ( )
>324	ArgumentList	 
>325	Callee	_imgIndxes . begin
>326	MemberAccess	_imgIndxes . begin
>327	Identifier	begin
>328	Identifier	_imgIndxes
>329	Identifier	it
>330	Identifier	it
>331	IdentifierDeclType	set < unsigned > 
>332	IdentifierDeclStatement	 
>333	IdentifierDecl	& posGraph = _learner -> getPosGraph ( )
>334	AssignmentExpr	& posGraph = _learner -> getPosGraph ( )
>335	CallExpression	_learner -> getPosGraph ( )
>336	ArgumentList	 
>337	Callee	_learner -> getPosGraph
>338	PtrMemberAccess	_learner -> getPosGraph
>339	Identifier	getPosGraph
>340	Identifier	_learner
>341	Identifier	posGraph
>342	Identifier	posGraph
>343	IdentifierDeclType	const drwnNNGraph &
>344	IdentifierDeclStatement	 
>345	IdentifierDecl	& graph = _learner -> getSrcGraph ( )
>346	AssignmentExpr	& graph = _learner -> getSrcGraph ( )
>347	CallExpression	_learner -> getSrcGraph ( )
>348	ArgumentList	 
>349	Callee	_learner -> getSrcGraph
>350	PtrMemberAccess	_learner -> getSrcGraph
>351	Identifier	getSrcGraph
>352	Identifier	_learner
>353	Identifier	graph
>354	Identifier	graph
>355	IdentifierDeclType	const drwnNNGraph &
>400	FunctionDef	drwnNNGraphSubGradientThread (const drwnNNGraphLearner * learner , MatrixXd * G , drwnNNGraphNodeAnnotation < drwnNNGraphLearnViolatedConstraints > * \
>401	ParameterList	const drwnNNGraphLearner * learner , MatrixXd * G , drwnNNGraphNodeAnnotation < drwnNNGraphLearnViolatedConstraints > * \
>402	Parameter	 
>403	Identifier	imgIndx
>404	ParameterType	unsigned
>405	Parameter	 
>406	Identifier	lastUpdated
>407	ParameterType	drwnNNGraphNodeAnnotation < drwnNNGraphLearnViolatedConstraints > *
>408	Parameter	 
>409	Identifier	G
>410	ParameterType	MatrixXd *
>411	Parameter	 
>412	Identifier	learner
>413	ParameterType	const drwnNNGraphLearner *
>414	CompoundStatement	 
>415	ExpressionStatement	 
>416	CallExpression	_imgIndxes . insert ( imgIndx )
>417	ArgumentList	imgIndx
>418	Argument	imgIndx
>419	Identifier	imgIndx
>420	Callee	_imgIndxes . insert
>421	MemberAccess	_imgIndxes . insert
>422	Identifier	insert
>423	Identifier	_imgIndxes
>432	FunctionDef	drwnNNGraphSubGradientThread (const drwnNNGraphLearner * learner , MatrixXd * G , drwnNNGraphNodeAnnotation < drwnNNGraphLearnViolatedConstraints > * \
>433	ParameterList	const drwnNNGraphLearner * learner , MatrixXd * G , drwnNNGraphNodeAnnotation < drwnNNGraphLearnViolatedConstraints > * \
>434	Parameter	 
>435	Identifier	imgIndxes
>436	ParameterType	const set < unsigned > &
>437	Parameter	 
>438	Identifier	lastUpdated
>439	ParameterType	drwnNNGraphNodeAnnotation < drwnNNGraphLearnViolatedConstraints > *
>440	Parameter	 
>441	Identifier	G
>442	ParameterType	MatrixXd *
>443	Parameter	 
>444	Identifier	learner
>445	ParameterType	const drwnNNGraphLearner *
>446	CompoundStatement	 
>454	FunctionDef	~drwnNNGraphSubGradientThread ()
>455	ParameterList	 
>456	CompoundStatement	 
>460	FunctionDef	operator ( ) ()
>461	ParameterList	 
>462	ReturnType	void
>463	CompoundStatement	 
>464	ExpressionStatement	 
>465	CallExpression	unlock ( )
>466	ArgumentList	 
>467	Callee	unlock
>468	Identifier	unlock
>469	ExpressionStatement	 
>470	Statement	 
>471	Statement	 
>472	Statement	 
>473	Statement	 
>474	Statement	 
>475	Statement	 
>476	Statement	 
>477	Statement	 
>478	Statement	 
>479	Statement	 
>480	Statement	 
>481	Statement	 
>482	Statement	 
>483	Statement	 
>484	Statement	 
>485	Statement	 
>486	Statement	 
>487	Statement	 
>488	Statement	 
>489	Statement	 
>490	Statement	 
>491	Statement	 
>492	ExpressionStatement	 
>493	CallExpression	lock ( )
>494	ArgumentList	 
>495	Callee	lock
>496	Identifier	lock
>497	ForStatement	for ( set < unsigned > 
>498	CompoundStatement	 
>499	ForStatement	for ( unsigned segId = 0 ; segId < graph [ * it ] . numNodes ( ) ; segId ++ )
>500	CompoundStatement	 
>501	ForStatement	for ( drwnNNGraphEdgeList 
>502	CompoundStatement	 
>503	ForStatement	for ( drwnNNGraphEdgeList 
>504	CompoundStatement	 
>505	IfStatement	if ( xi_uvw <= 0.0 )
>506	ElseStatement	else
>507	CompoundStatement	 
>508	ExpressionStatement	 
>509	CallExpression	( * _lastUpdated ) [ u ] . insert ( make_pair ( vt -> targetNode , wt -> targetNode ) )
>510	ArgumentList	make_pair ( vt -> targetNode , wt -> targetNode )
>511	Argument	make_pair ( vt -> targetNode , wt -> targetNode )
>512	CallExpression	make_pair ( vt -> targetNode , wt -> targetNode )
>513	ArgumentList	vt -> targetNode
>514	Argument	wt -> targetNode
>515	PtrMemberAccess	wt -> targetNode
>516	Identifier	targetNode
>517	Identifier	wt
>518	Argument	vt -> targetNode
>519	PtrMemberAccess	vt -> targetNode
>520	Identifier	targetNode
>521	Identifier	vt
>522	Callee	make_pair
>523	Identifier	make_pair
>524	Callee	( * _lastUpdated ) [ u ] . insert
>525	MemberAccess	( * _lastUpdated ) [ u ] . insert
>526	Identifier	insert
>527	ArrayIndexing	( * _lastUpdated ) [ u ]
>528	Identifier	u
>529	UnaryOp	* _lastUpdated
>530	Identifier	_lastUpdated
>531	UnaryOperator	*
>532	ExpressionStatement	 
>533	CallExpression	rankUpdate ( delta_w , - alpha )
>534	ArgumentList	delta_w
>535	Argument	- alpha
>536	UnaryOp	- alpha
>537	Identifier	alpha
>538	UnaryOperator	-
>539	Argument	delta_w
>540	Identifier	delta_w
>541	Callee	rankUpdate
>542	Identifier	rankUpdate
>543	Statement	 
>544	Statement	 
>545	Statement	 
>546	Statement	 
>547	Statement	 
>548	Statement	 
>549	Statement	 
>550	Statement	 
>551	Statement	 
>552	Statement	 
>553	Statement	 
>554	ExpressionStatement	 
>555	CallExpression	rankUpdate ( delta_v , alpha )
>556	ArgumentList	delta_v
>557	Argument	alpha
>558	Identifier	alpha
>559	Argument	delta_v
>560	Identifier	delta_v
>561	Callee	rankUpdate
>562	Identifier	rankUpdate
>563	Statement	 
>564	Statement	 
>565	Statement	 
>566	Statement	 
>567	Statement	 
>568	Statement	 
>569	Statement	 
>570	Statement	 
>571	Statement	 
>572	Statement	 
>573	Statement	 
>574	CompoundStatement	 
>575	ExpressionStatement	 
>576	CallExpression	( * _lastUpdated ) [ u ] . erase ( it )
>577	ArgumentList	it
>578	Argument	it
>579	Identifier	it
>580	Callee	( * _lastUpdated ) [ u ] . erase
>581	MemberAccess	( * _lastUpdated ) [ u ] . erase
>582	Identifier	erase
>583	ArrayIndexing	( * _lastUpdated ) [ u ]
>584	Identifier	u
>585	UnaryOp	* _lastUpdated
>586	Identifier	_lastUpdated
>587	UnaryOperator	*
>588	ExpressionStatement	 
>589	CallExpression	rankUpdate ( delta_w , alpha )
>590	ArgumentList	delta_w
>591	Argument	alpha
>592	Identifier	alpha
>593	Argument	delta_w
>594	Identifier	delta_w
>595	Callee	rankUpdate
>596	Identifier	rankUpdate
>597	Statement	 
>598	Statement	 
>599	Statement	 
>600	Statement	 
>601	Statement	 
>602	Statement	 
>603	Statement	 
>604	Statement	 
>605	Statement	 
>606	Statement	 
>607	Statement	 
>608	ExpressionStatement	 
>609	CallExpression	rankUpdate ( delta_v , - alpha )
>610	ArgumentList	delta_v
>611	Argument	- alpha
>612	UnaryOp	- alpha
>613	Identifier	alpha
>614	UnaryOperator	-
>615	Argument	delta_v
>616	Identifier	delta_v
>617	Callee	rankUpdate
>618	Identifier	rankUpdate
>619	Statement	 
>620	Statement	 
>621	Statement	 
>622	Statement	 
>623	Statement	 
>624	Statement	 
>625	Statement	 
>626	Statement	 
>627	Statement	 
>628	Statement	 
>629	Statement	 
>630	Condition	 
>631	RelationalExpression	xi_uvw <= 0.0
>632	PrimaryExpression	0.0
>633	Identifier	xi_uvw
>634	IdentifierDeclStatement	 
>635	IdentifierDecl	delta_w ( graph [ u ] . features - graph [ wt -> targetNode ] . features )
>636	AdditiveExpression	graph [ u ] . features - graph [ wt -> targetNode ] . features
>637	MemberAccess	graph [ wt -> targetNode ] . features
>638	Identifier	features
>639	ArrayIndexing	graph [ wt -> targetNode ]
>640	PtrMemberAccess	wt -> targetNode
>641	Identifier	targetNode
>642	Identifier	wt
>643	Identifier	graph
>644	MemberAccess	graph [ u ] . features
>645	Identifier	features
>646	ArrayIndexing	graph [ u ]
>647	Identifier	u
>648	Identifier	graph
>649	Identifier	delta_w
>650	IdentifierDeclType	const VectorXf
>651	IdentifierDeclStatement	 
>652	IdentifierDecl	delta_v ( graph [ u ] . features - graph [ vt -> targetNode ] . features )
>653	AdditiveExpression	graph [ u ] . features - graph [ vt -> targetNode ] . features
>654	MemberAccess	graph [ vt -> targetNode ] . features
>655	Identifier	features
>656	ArrayIndexing	graph [ vt -> targetNode ]
>657	PtrMemberAccess	vt -> targetNode
>658	Identifier	targetNode
>659	Identifier	vt
>660	Identifier	graph
>661	MemberAccess	graph [ u ] . features
>662	Identifier	features
>663	ArrayIndexing	graph [ u ]
>664	Identifier	u
>665	Identifier	graph
>666	Identifier	delta_v
>667	IdentifierDeclType	const VectorXf
>668	IfStatement	if ( ( xi_uvw > 0.0 ) && ( it != ( * _lastUpdated ) [ u ] . end ( ) ) )
>669	ContinueStatement	 
>670	Condition	 
>671	AndExpression	( xi_uvw > 0.0 ) && ( it != ( * _lastUpdated ) [ u ] . end ( ) )
>672	EqualityExpression	it != ( * _lastUpdated ) [ u ] . end ( )
>673	CallExpression	( * _lastUpdated ) [ u ] . end ( )
>674	ArgumentList	 
>675	Callee	( * _lastUpdated ) [ u ] . end
>676	MemberAccess	( * _lastUpdated ) [ u ] . end
>677	Identifier	end
>678	ArrayIndexing	( * _lastUpdated ) [ u ]
>679	Identifier	u
>680	UnaryOp	* _lastUpdated
>681	Identifier	_lastUpdated
>682	UnaryOperator	*
>683	Identifier	it
>684	RelationalExpression	xi_uvw > 0.0
>685	PrimaryExpression	0.0
>686	Identifier	xi_uvw
>687	IfStatement	if ( ( xi_uvw <= 0.0 ) && ( it == ( * _lastUpdated ) [ u ] . end ( ) ) )
>688	ContinueStatement	 
>689	Condition	 
>690	AndExpression	( xi_uvw <= 0.0 ) && ( it == ( * _lastUpdated ) [ u ] . end ( ) )
>691	EqualityExpression	it == ( * _lastUpdated ) [ u ] . end ( )
>692	CallExpression	( * _lastUpdated ) [ u ] . end ( )
>693	ArgumentList	 
>694	Callee	( * _lastUpdated ) [ u ] . end
>695	MemberAccess	( * _lastUpdated ) [ u ] . end
>696	Identifier	end
>697	ArrayIndexing	( * _lastUpdated ) [ u ]
>698	Identifier	u
>699	UnaryOp	* _lastUpdated
>700	Identifier	_lastUpdated
>701	UnaryOperator	*
>702	Identifier	it
>703	RelationalExpression	xi_uvw <= 0.0
>704	PrimaryExpression	0.0
>705	Identifier	xi_uvw
>706	IdentifierDeclStatement	 
>707	IdentifierDecl	it = ( * _lastUpdated ) [ u ] . find ( make_pair ( vt -> targetNode , wt -> targetNode ) )
>708	AssignmentExpr	it = ( * _lastUpdated ) [ u ] . find ( make_pair ( vt -> targetNode , wt -> targetNode ) )
>709	CallExpression	( * _lastUpdated ) [ u ] . find ( make_pair ( vt -> targetNode , wt -> targetNode ) )
>710	ArgumentList	make_pair ( vt -> targetNode , wt -> targetNode )
>711	Argument	make_pair ( vt -> targetNode , wt -> targetNode )
>712	CallExpression	make_pair ( vt -> targetNode , wt -> targetNode )
>713	ArgumentList	vt -> targetNode
>714	Argument	wt -> targetNode
>715	PtrMemberAccess	wt -> targetNode
>716	Identifier	targetNode
>717	Identifier	wt
>718	Argument	vt -> targetNode
>719	PtrMemberAccess	vt -> targetNode
>720	Identifier	targetNode
>721	Identifier	vt
>722	Callee	make_pair
>723	Identifier	make_pair
>724	Callee	( * _lastUpdated ) [ u ] . find
>725	MemberAccess	( * _lastUpdated ) [ u ] . find
>726	Identifier	find
>727	ArrayIndexing	( * _lastUpdated ) [ u ]
>728	Identifier	u
>729	UnaryOp	* _lastUpdated
>730	Identifier	_lastUpdated
>731	UnaryOperator	*
>732	Identifier	it
>733	Identifier	it
>734	IdentifierDeclType	drwnNNGraphLearnViolatedConstraints 
>735	IdentifierDeclStatement	 
>736	IdentifierDecl	xi_uvw = vt -> weight - wt -> weight + 1.0
>737	AssignmentExpr	xi_uvw = vt -> weight - wt -> weight + 1.0
>738	AdditiveExpression	vt -> weight - wt -> weight + 1.0
>739	AdditiveExpression	wt -> weight + 1.0
>740	PrimaryExpression	1.0
>741	PtrMemberAccess	wt -> weight
>742	Identifier	weight
>743	Identifier	wt
>744	PtrMemberAccess	vt -> weight
>745	Identifier	weight
>746	Identifier	vt
>747	Identifier	xi_uvw
>748	Identifier	xi_uvw
>749	IdentifierDeclType	const double
>750	UnaryExpression	 
>751	Identifier	wt
>752	IncDec	++
>753	Condition	 
>754	EqualityExpression	wt != ew . end ( )
>755	CallExpression	ew . end ( )
>756	ArgumentList	 
>757	Callee	ew . end
>758	MemberAccess	ew . end
>759	Identifier	end
>760	Identifier	ew
>761	Identifier	wt
>762	ForInit	 
>763	IdentifierDeclStatement	drwnNNGraphEdgeList 
>764	IdentifierDecl	wt = ew . begin ( )
>765	AssignmentExpr	wt = ew . begin ( )
>766	CallExpression	ew . begin ( )
>767	ArgumentList	 
>768	Callee	ew . begin
>769	MemberAccess	ew . begin
>770	Identifier	begin
>771	Identifier	ew
>772	Identifier	wt
>773	Identifier	wt
>774	IdentifierDeclType	drwnNNGraphEdgeList 
>775	UnaryExpression	 
>776	Identifier	vt
>777	IncDec	++
>778	Condition	 
>779	EqualityExpression	vt != ev . end ( )
>780	CallExpression	ev . end ( )
>781	ArgumentList	 
>782	Callee	ev . end
>783	MemberAccess	ev . end
>784	Identifier	end
>785	Identifier	ev
>786	Identifier	vt
>787	ForInit	 
>788	IdentifierDeclStatement	drwnNNGraphEdgeList 
>789	IdentifierDecl	vt = ev . begin ( )
>790	AssignmentExpr	vt = ev . begin ( )
>791	CallExpression	ev . begin ( )
>792	ArgumentList	 
>793	Callee	ev . begin
>794	MemberAccess	ev . begin
>795	Identifier	begin
>796	Identifier	ev
>797	Identifier	vt
>798	Identifier	vt
>799	IdentifierDeclType	drwnNNGraphEdgeList 
>800	IdentifierDeclStatement	 
>801	IdentifierDecl	& ew = _learner -> getNegGraph ( ) [ u ] . edges
>802	AssignmentExpr	& ew = _learner -> getNegGraph ( ) [ u ] . edges
>803	MemberAccess	_learner -> getNegGraph ( ) [ u ] . edges
>804	Identifier	edges
>805	ArrayIndexing	_learner -> getNegGraph ( ) [ u ]
>806	Identifier	u
>807	CallExpression	_learner -> getNegGraph ( )
>808	ArgumentList	 
>809	Callee	_learner -> getNegGraph
>810	PtrMemberAccess	_learner -> getNegGraph
>811	Identifier	getNegGraph
>812	Identifier	_learner
>813	Identifier	ew
>814	Identifier	ew
>815	IdentifierDeclType	const drwnNNGraphEdgeList &
>816	IdentifierDeclStatement	 
>817	IdentifierDecl	& ev = _learner -> getPosGraph ( ) [ u ] . edges
>818	AssignmentExpr	& ev = _learner -> getPosGraph ( ) [ u ] . edges
>819	MemberAccess	_learner -> getPosGraph ( ) [ u ] . edges
>820	Identifier	edges
>821	ArrayIndexing	_learner -> getPosGraph ( ) [ u ]
>822	Identifier	u
>823	CallExpression	_learner -> getPosGraph ( )
>824	ArgumentList	 
>825	Callee	_learner -> getPosGraph
>826	PtrMemberAccess	_learner -> getPosGraph
>827	Identifier	getPosGraph
>828	Identifier	_learner
>829	Identifier	ev
>830	Identifier	ev
>831	IdentifierDeclType	const drwnNNGraphEdgeList &
>832	IdentifierDeclStatement	 
>833	IdentifierDecl	alpha = labelWeights . empty ( ) ? 1.0f 
>834	AssignmentExpr	alpha = labelWeights . empty ( ) ? 1.0f 
>835	ConditionalExpression	labelWeights . empty ( ) ? 1.0f 
>836	CastExpression	( float ) labelWeights [ graph [ u ] . label ]
>837	ArrayIndexing	labelWeights [ graph [ u ] . label ]
>838	MemberAccess	graph [ u ] . label
>839	Identifier	label
>840	ArrayIndexing	graph [ u ]
>841	Identifier	u
>842	Identifier	graph
>843	Identifier	labelWeights
>844	CastTarget	float
>845	PrimaryExpression	1.0f
>846	Condition	labelWeights . empty ( )
>847	CallExpression	labelWeights . empty ( )
>848	ArgumentList	 
>849	Callee	labelWeights . empty
>850	MemberAccess	labelWeights . empty
>851	Identifier	empty
>852	Identifier	labelWeights
>853	Identifier	alpha
>854	Identifier	alpha
>855	IdentifierDeclType	const float
>856	IdentifierDeclStatement	 
>857	IdentifierDecl	u ( * it , segId )
>858	Expression	* it , segId
>859	Identifier	segId
>860	UnaryOp	* it
>861	Identifier	it
>862	UnaryOperator	*
>863	Identifier	u
>864	IdentifierDeclType	const drwnNNGraphNodeIndex
>865	IncDecOp	 
>866	IncDec	++
>867	Identifier	segId
>868	Condition	 
>869	RelationalExpression	segId < graph [ * it ] . numNodes ( )
>870	CallExpression	graph [ * it ] . numNodes ( )
>871	ArgumentList	 
>872	Callee	graph [ * it ] . numNodes
>873	MemberAccess	graph [ * it ] . numNodes
>874	Identifier	numNodes
>875	ArrayIndexing	graph [ * it ]
>876	UnaryOp	* it
>877	Identifier	it
>878	UnaryOperator	*
>879	Identifier	graph
>880	Identifier	segId
>881	ForInit	 
>882	IdentifierDeclStatement	unsigned segId = 0 ;
>883	IdentifierDecl	segId = 0
>884	AssignmentExpr	segId = 0
>885	PrimaryExpression	0
>886	Identifier	segId
>887	Identifier	segId
>888	IdentifierDeclType	unsigned
>889	UnaryExpression	 
>890	Identifier	it
>891	IncDec	++
>892	Condition	 
>893	EqualityExpression	it != _imgIndxes . end ( )
>894	CallExpression	_imgIndxes . end ( )
>895	ArgumentList	 
>896	Callee	_imgIndxes . end
>897	MemberAccess	_imgIndxes . end
>898	Identifier	end
>899	Identifier	_imgIndxes
>900	Identifier	it
>901	ForInit	 
>902	IdentifierDeclStatement	set < unsigned > 
>903	IdentifierDecl	it = _imgIndxes . begin ( )
>904	AssignmentExpr	it = _imgIndxes . begin ( )
>905	CallExpression	_imgIndxes . begin ( )
>906	ArgumentList	 
>907	Callee	_imgIndxes . begin
>908	MemberAccess	_imgIndxes . begin
>909	Identifier	begin
>910	Identifier	_imgIndxes
>911	Identifier	it
>912	Identifier	it
>913	IdentifierDeclType	set < unsigned > 
>914	IdentifierDeclStatement	 
>915	IdentifierDecl	& labelWeights = _learner -> getLabelWeights ( )
>916	AssignmentExpr	& labelWeights = _learner -> getLabelWeights ( )
>917	CallExpression	_learner -> getLabelWeights ( )
>918	ArgumentList	 
>919	Callee	_learner -> getLabelWeights
>920	PtrMemberAccess	_learner -> getLabelWeights
>921	Identifier	getLabelWeights
>922	Identifier	_learner
>923	Identifier	labelWeights
>924	Identifier	labelWeights
>925	IdentifierDeclType	const vector < double > &
>926	IdentifierDeclStatement	 
>927	IdentifierDecl	& graph = _learner -> getSrcGraph ( )
>928	AssignmentExpr	& graph = _learner -> getSrcGraph ( )
>929	CallExpression	_learner -> getSrcGraph ( )
>930	ArgumentList	 
>931	Callee	_learner -> getSrcGraph
>932	PtrMemberAccess	_learner -> getSrcGraph
>933	Identifier	getSrcGraph
>934	Identifier	_learner
>935	Identifier	graph
>936	Identifier	graph
>937	IdentifierDeclType	const drwnNNGraph &
>938	IdentifierDeclStatement	 
>939	IdentifierDecl	localG = MatrixXf 
>940	AssignmentExpr	localG = MatrixXf 
>941	CallExpression	MatrixXf 
>942	ArgumentList	_G -> rows ( )
>943	Argument	_G -> cols ( )
>944	CallExpression	_G -> cols ( )
>945	ArgumentList	 
>946	Callee	_G -> cols
>947	PtrMemberAccess	_G -> cols
>948	Identifier	cols
>949	Identifier	_G
>950	Argument	_G -> rows ( )
>951	CallExpression	_G -> rows ( )
>952	ArgumentList	 
>953	Callee	_G -> rows
>954	PtrMemberAccess	_G -> rows
>955	Identifier	rows
>956	Identifier	_G
>957	Callee	MatrixXf 
>958	Identifier	MatrixXf 
>959	Identifier	localG
>960	Identifier	localG
>961	IdentifierDeclType	MatrixXf
>1038	FunctionDef	drwnNNGraphSparseSubGradientThread (const drwnNNGraphLearner * learner , MatrixXd * G , drwnNNGraphNodeAnnotation < \
>1039	ParameterList	const drwnNNGraphLearner * learner , MatrixXd * G , drwnNNGraphNodeAnnotation < drwnNNGraphLearnSparseViolatedConstraint > * \
>1040	Parameter	 
>1041	Identifier	imgIndx
>1042	ParameterType	unsigned
>1043	Parameter	 
>1044	Identifier	lastUpdated
>1045	ParameterType	drwnNNGraphNodeAnnotation < drwnNNGraphLearnSparseViolatedConstraint > *
>1046	Parameter	 
>1047	Identifier	G
>1048	ParameterType	MatrixXd *
>1049	Parameter	 
>1050	Identifier	learner
>1051	ParameterType	const drwnNNGraphLearner *
>1052	CompoundStatement	 
>1053	ExpressionStatement	 
>1054	CallExpression	_imgIndxes . insert ( imgIndx )
>1055	ArgumentList	imgIndx
>1056	Argument	imgIndx
>1057	Identifier	imgIndx
>1058	Callee	_imgIndxes . insert
>1059	MemberAccess	_imgIndxes . insert
>1060	Identifier	insert
>1061	Identifier	_imgIndxes
>1070	FunctionDef	drwnNNGraphSparseSubGradientThread (const drwnNNGraphLearner * learner , MatrixXd * G , drwnNNGraphNodeAnnotation < \
>1071	ParameterList	const drwnNNGraphLearner * learner , MatrixXd * G , drwnNNGraphNodeAnnotation < drwnNNGraphLearnSparseViolatedConstraint > * \
>1072	Parameter	 
>1073	Identifier	imgIndxes
>1074	ParameterType	const set < unsigned > &
>1075	Parameter	 
>1076	Identifier	lastUpdated
>1077	ParameterType	drwnNNGraphNodeAnnotation < drwnNNGraphLearnSparseViolatedConstraint > *
>1078	Parameter	 
>1079	Identifier	G
>1080	ParameterType	MatrixXd *
>1081	Parameter	 
>1082	Identifier	learner
>1083	ParameterType	const drwnNNGraphLearner *
>1084	CompoundStatement	 
>1092	FunctionDef	~drwnNNGraphSparseSubGradientThread ()
>1093	ParameterList	 
>1094	CompoundStatement	 
>1098	FunctionDef	operator ( ) ()
>1099	ParameterList	 
>1100	ReturnType	void
>1101	CompoundStatement	 
>1102	ExpressionStatement	 
>1103	CallExpression	unlock ( )
>1104	ArgumentList	 
>1105	Callee	unlock
>1106	Identifier	unlock
>1107	ExpressionStatement	 
>1108	Statement	 
>1109	Statement	 
>1110	Statement	 
>1111	Statement	 
>1112	Statement	 
>1113	Statement	 
>1114	Statement	 
>1115	Statement	 
>1116	Statement	 
>1117	Statement	 
>1118	Statement	 
>1119	Statement	 
>1120	Statement	 
>1121	Statement	 
>1122	Statement	 
>1123	Statement	 
>1124	Statement	 
>1125	Statement	 
>1126	Statement	 
>1127	Statement	 
>1128	Statement	 
>1129	Statement	 
>1130	ExpressionStatement	 
>1131	CallExpression	lock ( )
>1132	ArgumentList	 
>1133	Callee	lock
>1134	Identifier	lock
>1135	ForStatement	for ( set < unsigned > 
>1136	CompoundStatement	 
>1137	ForStatement	for ( unsigned segId = 0 ; segId < graph [ * it ] . numNodes ( ) ; segId ++ )
>1138	CompoundStatement	 
>1139	ExpressionStatement	 
>1140	AssignmentExpr	( * _lastUpdated ) [ u ] . third = w
>1141	Identifier	w
>1142	MemberAccess	( * _lastUpdated ) [ u ] . third
>1143	Identifier	third
>1144	ArrayIndexing	( * _lastUpdated ) [ u ]
>1145	Identifier	u
>1146	UnaryOp	* _lastUpdated
>1147	Identifier	_lastUpdated
>1148	UnaryOperator	*
>1149	ExpressionStatement	 
>1150	AssignmentExpr	( * _lastUpdated ) [ u ] . second = v
>1151	Identifier	v
>1152	MemberAccess	( * _lastUpdated ) [ u ] . second
>1153	Identifier	second
>1154	ArrayIndexing	( * _lastUpdated ) [ u ]
>1155	Identifier	u
>1156	UnaryOp	* _lastUpdated
>1157	Identifier	_lastUpdated
>1158	UnaryOperator	*
>1159	ExpressionStatement	 
>1160	AssignmentExpr	( * _lastUpdated ) [ u ] . first = true
>1161	Identifier	true
>1162	MemberAccess	( * _lastUpdated ) [ u ] . first
>1163	Identifier	first
>1164	ArrayIndexing	( * _lastUpdated ) [ u ]
>1165	Identifier	u
>1166	UnaryOp	* _lastUpdated
>1167	Identifier	_lastUpdated
>1168	UnaryOperator	*
>1169	ExpressionStatement	 
>1170	CallExpression	rankUpdate ( delta_w , - alpha )
>1171	ArgumentList	delta_w
>1172	Argument	- alpha
>1173	UnaryOp	- alpha
>1174	Identifier	alpha
>1175	UnaryOperator	-
>1176	Argument	delta_w
>1177	Identifier	delta_w
>1178	Callee	rankUpdate
>1179	Identifier	rankUpdate
>1180	Statement	 
>1181	Statement	 
>1182	Statement	 
>1183	Statement	 
>1184	Statement	 
>1185	Statement	 
>1186	Statement	 
>1187	Statement	 
>1188	Statement	 
>1189	Statement	 
>1190	Statement	 
>1191	ExpressionStatement	 
>1192	CallExpression	rankUpdate ( delta_v , alpha )
>1193	ArgumentList	delta_v
>1194	Argument	alpha
>1195	Identifier	alpha
>1196	Argument	delta_v
>1197	Identifier	delta_v
>1198	Callee	rankUpdate
>1199	Identifier	rankUpdate
>1200	Statement	 
>1201	Statement	 
>1202	Statement	 
>1203	Statement	 
>1204	Statement	 
>1205	Statement	 
>1206	Statement	 
>1207	Statement	 
>1208	Statement	 
>1209	Statement	 
>1210	Statement	 
>1211	IdentifierDeclStatement	 
>1212	IdentifierDecl	delta_w ( graph [ u ] . features - graph [ w ] . features )
>1213	AdditiveExpression	graph [ u ] . features - graph [ w ] . features
>1214	MemberAccess	graph [ w ] . features
>1215	Identifier	features
>1216	ArrayIndexing	graph [ w ]
>1217	Identifier	w
>1218	Identifier	graph
>1219	MemberAccess	graph [ u ] . features
>1220	Identifier	features
>1221	ArrayIndexing	graph [ u ]
>1222	Identifier	u
>1223	Identifier	graph
>1224	Identifier	delta_w
>1225	IdentifierDeclType	const VectorXf
>1226	IdentifierDeclStatement	 
>1227	IdentifierDecl	delta_v ( graph [ u ] . features - graph [ v ] . features )
>1228	AdditiveExpression	graph [ u ] . features - graph [ v ] . features
>1229	MemberAccess	graph [ v ] . features
>1230	Identifier	features
>1231	ArrayIndexing	graph [ v ]
>1232	Identifier	v
>1233	Identifier	graph
>1234	MemberAccess	graph [ u ] . features
>1235	Identifier	features
>1236	ArrayIndexing	graph [ u ]
>1237	Identifier	u
>1238	Identifier	graph
>1239	Identifier	delta_v
>1240	IdentifierDeclType	const VectorXf
>1241	IfStatement	if ( ( * _lastUpdated ) [ u ] . first )
>1242	CompoundStatement	 
>1243	ExpressionStatement	 
>1244	CallExpression	rankUpdate ( delta_w_prev , alpha )
>1245	ArgumentList	delta_w_prev
>1246	Argument	alpha
>1247	Identifier	alpha
>1248	Argument	delta_w_prev
>1249	Identifier	delta_w_prev
>1250	Callee	rankUpdate
>1251	Identifier	rankUpdate
>1252	Statement	 
>1253	Statement	 
>1254	Statement	 
>1255	Statement	 
>1256	Statement	 
>1257	Statement	 
>1258	Statement	 
>1259	Statement	 
>1260	Statement	 
>1261	Statement	 
>1262	Statement	 
>1263	ExpressionStatement	 
>1264	CallExpression	rankUpdate ( delta_v_prev , - alpha )
>1265	ArgumentList	delta_v_prev
>1266	Argument	- alpha
>1267	UnaryOp	- alpha
>1268	Identifier	alpha
>1269	UnaryOperator	-
>1270	Argument	delta_v_prev
>1271	Identifier	delta_v_prev
>1272	Callee	rankUpdate
>1273	Identifier	rankUpdate
>1274	Statement	 
>1275	Statement	 
>1276	Statement	 
>1277	Statement	 
>1278	Statement	 
>1279	Statement	 
>1280	Statement	 
>1281	Statement	 
>1282	Statement	 
>1283	Statement	 
>1284	Statement	 
>1285	IdentifierDeclStatement	 
>1286	IdentifierDecl	delta_w_prev ( graph [ u ] . features - graph [ w_prev ] . features )
>1287	AdditiveExpression	graph [ u ] . features - graph [ w_prev ] . features
>1288	MemberAccess	graph [ w_prev ] . features
>1289	Identifier	features
>1290	ArrayIndexing	graph [ w_prev ]
>1291	Identifier	w_prev
>1292	Identifier	graph
>1293	MemberAccess	graph [ u ] . features
>1294	Identifier	features
>1295	ArrayIndexing	graph [ u ]
>1296	Identifier	u
>1297	Identifier	graph
>1298	Identifier	delta_w_prev
>1299	IdentifierDeclType	const VectorXf
>1300	IdentifierDeclStatement	 
>1301	IdentifierDecl	delta_v_prev ( graph [ u ] . features - graph [ v_prev ] . features )
>1302	AdditiveExpression	graph [ u ] . features - graph [ v_prev ] . features
>1303	MemberAccess	graph [ v_prev ] . features
>1304	Identifier	features
>1305	ArrayIndexing	graph [ v_prev ]
>1306	Identifier	v_prev
>1307	Identifier	graph
>1308	MemberAccess	graph [ u ] . features
>1309	Identifier	features
>1310	ArrayIndexing	graph [ u ]
>1311	Identifier	u
>1312	Identifier	graph
>1313	Identifier	delta_v_prev
>1314	IdentifierDeclType	const VectorXf
>1315	Condition	 
>1316	MemberAccess	( * _lastUpdated ) [ u ] . first
>1317	Identifier	first
>1318	ArrayIndexing	( * _lastUpdated ) [ u ]
>1319	Identifier	u
>1320	UnaryOp	* _lastUpdated
>1321	Identifier	_lastUpdated
>1322	UnaryOperator	*
>1323	IdentifierDeclStatement	 
>1324	IdentifierDecl	alpha = labelWeights . empty ( ) ? 1.0f 
>1325	AssignmentExpr	alpha = labelWeights . empty ( ) ? 1.0f 
>1326	ConditionalExpression	labelWeights . empty ( ) ? 1.0f 
>1327	CastExpression	( float ) labelWeights [ graph [ u ] . label ]
>1328	ArrayIndexing	labelWeights [ graph [ u ] . label ]
>1329	MemberAccess	graph [ u ] . label
>1330	Identifier	label
>1331	ArrayIndexing	graph [ u ]
>1332	Identifier	u
>1333	Identifier	graph
>1334	Identifier	labelWeights
>1335	CastTarget	float
>1336	PrimaryExpression	1.0f
>1337	Condition	labelWeights . empty ( )
>1338	CallExpression	labelWeights . empty ( )
>1339	ArgumentList	 
>1340	Callee	labelWeights . empty
>1341	MemberAccess	labelWeights . empty
>1342	Identifier	empty
>1343	Identifier	labelWeights
>1344	Identifier	alpha
>1345	Identifier	alpha
>1346	IdentifierDeclType	const float
>1347	IfStatement	if ( ( * _lastUpdated ) [ u ] . first && ( v_prev == v ) && ( w_prev == w ) )
>1348	ContinueStatement	 
>1349	Condition	 
>1350	AndExpression	( * _lastUpdated ) [ u ] . first && ( v_prev == v ) && ( w_prev == w )
>1351	AndExpression	( v_prev == v ) && ( w_prev == w )
>1352	EqualityExpression	w_prev == w
>1353	Identifier	w
>1354	Identifier	w_prev
>1355	EqualityExpression	v_prev == v
>1356	Identifier	v
>1357	Identifier	v_prev
>1358	MemberAccess	( * _lastUpdated ) [ u ] . first
>1359	Identifier	first
>1360	ArrayIndexing	( * _lastUpdated ) [ u ]
>1361	Identifier	u
>1362	UnaryOp	* _lastUpdated
>1363	Identifier	_lastUpdated
>1364	UnaryOperator	*
>1365	IdentifierDeclStatement	 
>1366	IdentifierDecl	& w_prev ( ( * _lastUpdated ) [ u ] . third )
>1367	MemberAccess	( * _lastUpdated ) [ u ] . third
>1368	Identifier	third
>1369	ArrayIndexing	( * _lastUpdated ) [ u ]
>1370	Identifier	u
>1371	UnaryOp	* _lastUpdated
>1372	Identifier	_lastUpdated
>1373	UnaryOperator	*
>1374	Identifier	w_prev
>1375	IdentifierDeclType	const drwnNNGraphNodeIndex &
>1376	IdentifierDeclStatement	 
>1377	IdentifierDecl	& v_prev ( ( * _lastUpdated ) [ u ] . second )
>1378	MemberAccess	( * _lastUpdated ) [ u ] . second
>1379	Identifier	second
>1380	ArrayIndexing	( * _lastUpdated ) [ u ]
>1381	Identifier	u
>1382	UnaryOp	* _lastUpdated
>1383	Identifier	_lastUpdated
>1384	UnaryOperator	*
>1385	Identifier	v_prev
>1386	IdentifierDeclType	const drwnNNGraphNodeIndex &
>1387	IdentifierDeclStatement	 
>1388	IdentifierDecl	& w ( negGraph [ u ] . edges . front ( ) . targetNode )
>1389	MemberAccess	negGraph [ u ] . edges . front ( ) . targetNode
>1390	Identifier	targetNode
>1391	CallExpression	negGraph [ u ] . edges . front ( )
>1392	ArgumentList	 
>1393	Callee	negGraph [ u ] . edges . front
>1394	MemberAccess	negGraph [ u ] . edges . front
>1395	Identifier	front
>1396	MemberAccess	negGraph [ u ] . edges
>1397	Identifier	edges
>1398	ArrayIndexing	negGraph [ u ]
>1399	Identifier	u
>1400	Identifier	negGraph
>1401	Identifier	w
>1402	IdentifierDeclType	const drwnNNGraphNodeIndex &
>1403	IdentifierDeclStatement	 
>1404	IdentifierDecl	& v ( posGraph [ u ] . edges . back ( ) . targetNode )
>1405	MemberAccess	posGraph [ u ] . edges . back ( ) . targetNode
>1406	Identifier	targetNode
>1407	CallExpression	posGraph [ u ] . edges . back ( )
>1408	ArgumentList	 
>1409	Callee	posGraph [ u ] . edges . back
>1410	MemberAccess	posGraph [ u ] . edges . back
>1411	Identifier	back
>1412	MemberAccess	posGraph [ u ] . edges
>1413	Identifier	edges
>1414	ArrayIndexing	posGraph [ u ]
>1415	Identifier	u
>1416	Identifier	posGraph
>1417	Identifier	v
>1418	IdentifierDeclType	const drwnNNGraphNodeIndex &
>1419	IfStatement	if ( xi_u <= 0.0 )
>1420	CompoundStatement	 
>1421	ContinueStatement	 
>1422	ExpressionStatement	 
>1423	AssignmentExpr	( * _lastUpdated ) [ u ] . first = false
>1424	Identifier	false
>1425	MemberAccess	( * _lastUpdated ) [ u ] . first
>1426	Identifier	first
>1427	ArrayIndexing	( * _lastUpdated ) [ u ]
>1428	Identifier	u
>1429	UnaryOp	* _lastUpdated
>1430	Identifier	_lastUpdated
>1431	UnaryOperator	*
>1432	IfStatement	if ( ( * _lastUpdated ) [ u ] . first )
>1433	CompoundStatement	 
>1434	ExpressionStatement	 
>1435	CallExpression	rankUpdate ( delta_w_prev , alpha )
>1436	ArgumentList	delta_w_prev
>1437	Argument	alpha
>1438	Identifier	alpha
>1439	Argument	delta_w_prev
>1440	Identifier	delta_w_prev
>1441	Callee	rankUpdate
>1442	Identifier	rankUpdate
>1443	Statement	 
>1444	Statement	 
>1445	Statement	 
>1446	Statement	 
>1447	Statement	 
>1448	Statement	 
>1449	Statement	 
>1450	Statement	 
>1451	Statement	 
>1452	Statement	 
>1453	Statement	 
>1454	ExpressionStatement	 
>1455	CallExpression	rankUpdate ( delta_v_prev , - alpha )
>1456	ArgumentList	delta_v_prev
>1457	Argument	- alpha
>1458	UnaryOp	- alpha
>1459	Identifier	alpha
>1460	UnaryOperator	-
>1461	Argument	delta_v_prev
>1462	Identifier	delta_v_prev
>1463	Callee	rankUpdate
>1464	Identifier	rankUpdate
>1465	Statement	 
>1466	Statement	 
>1467	Statement	 
>1468	Statement	 
>1469	Statement	 
>1470	Statement	 
>1471	Statement	 
>1472	Statement	 
>1473	Statement	 
>1474	Statement	 
>1475	Statement	 
>1476	IdentifierDeclStatement	 
>1477	IdentifierDecl	delta_w_prev ( graph [ u ] . features - graph [ w_prev ] . features )
>1478	AdditiveExpression	graph [ u ] . features - graph [ w_prev ] . features
>1479	MemberAccess	graph [ w_prev ] . features
>1480	Identifier	features
>1481	ArrayIndexing	graph [ w_prev ]
>1482	Identifier	w_prev
>1483	Identifier	graph
>1484	MemberAccess	graph [ u ] . features
>1485	Identifier	features
>1486	ArrayIndexing	graph [ u ]
>1487	Identifier	u
>1488	Identifier	graph
>1489	Identifier	delta_w_prev
>1490	IdentifierDeclType	const VectorXf
>1491	IdentifierDeclStatement	 
>1492	IdentifierDecl	delta_v_prev ( graph [ u ] . features - graph [ v_prev ] . features )
>1493	AdditiveExpression	graph [ u ] . features - graph [ v_prev ] . features
>1494	MemberAccess	graph [ v_prev ] . features
>1495	Identifier	features
>1496	ArrayIndexing	graph [ v_prev ]
>1497	Identifier	v_prev
>1498	Identifier	graph
>1499	MemberAccess	graph [ u ] . features
>1500	Identifier	features
>1501	ArrayIndexing	graph [ u ]
>1502	Identifier	u
>1503	Identifier	graph
>1504	Identifier	delta_v_prev
>1505	IdentifierDeclType	const VectorXf
>1506	IdentifierDeclStatement	 
>1507	IdentifierDecl	& w_prev ( ( * _lastUpdated ) [ u ] . third )
>1508	MemberAccess	( * _lastUpdated ) [ u ] . third
>1509	Identifier	third
>1510	ArrayIndexing	( * _lastUpdated ) [ u ]
>1511	Identifier	u
>1512	UnaryOp	* _lastUpdated
>1513	Identifier	_lastUpdated
>1514	UnaryOperator	*
>1515	Identifier	w_prev
>1516	IdentifierDeclType	const drwnNNGraphNodeIndex &
>1517	IdentifierDeclStatement	 
>1518	IdentifierDecl	& v_prev ( ( * _lastUpdated ) [ u ] . second )
>1519	MemberAccess	( * _lastUpdated ) [ u ] . second
>1520	Identifier	second
>1521	ArrayIndexing	( * _lastUpdated ) [ u ]
>1522	Identifier	u
>1523	UnaryOp	* _lastUpdated
>1524	Identifier	_lastUpdated
>1525	UnaryOperator	*
>1526	Identifier	v_prev
>1527	IdentifierDeclType	const drwnNNGraphNodeIndex &
>1528	IdentifierDeclStatement	 
>1529	IdentifierDecl	alpha = labelWeights . empty ( ) ? 1.0f 
>1530	AssignmentExpr	alpha = labelWeights . empty ( ) ? 1.0f 
>1531	ConditionalExpression	labelWeights . empty ( ) ? 1.0f 
>1532	CastExpression	( float ) labelWeights [ graph [ u ] . label ]
>1533	ArrayIndexing	labelWeights [ graph [ u ] . label ]
>1534	MemberAccess	graph [ u ] . label
>1535	Identifier	label
>1536	ArrayIndexing	graph [ u ]
>1537	Identifier	u
>1538	Identifier	graph
>1539	Identifier	labelWeights
>1540	CastTarget	float
>1541	PrimaryExpression	1.0f
>1542	Condition	labelWeights . empty ( )
>1543	CallExpression	labelWeights . empty ( )
>1544	ArgumentList	 
>1545	Callee	labelWeights . empty
>1546	MemberAccess	labelWeights . empty
>1547	Identifier	empty
>1548	Identifier	labelWeights
>1549	Identifier	alpha
>1550	Identifier	alpha
>1551	IdentifierDeclType	const float
>1552	Condition	 
>1553	MemberAccess	( * _lastUpdated ) [ u ] . first
>1554	Identifier	first
>1555	ArrayIndexing	( * _lastUpdated ) [ u ]
>1556	Identifier	u
>1557	UnaryOp	* _lastUpdated
>1558	Identifier	_lastUpdated
>1559	UnaryOperator	*
>1560	Condition	 
>1561	RelationalExpression	xi_u <= 0.0
>1562	PrimaryExpression	0.0
>1563	Identifier	xi_u
>1564	IdentifierDeclStatement	 
>1565	IdentifierDecl	xi_u = posGraph [ u ] . edges . back ( ) . weight - negGraph [ u ] . edges . front ( ) . weight + 1.0
>1566	AssignmentExpr	xi_u = posGraph [ u ] . edges . back ( ) . weight - negGraph [ u ] . edges . front ( ) . weight + 1.0
>1567	AdditiveExpression	posGraph [ u ] . edges . back ( ) . weight - negGraph [ u ] . edges . front ( ) . weight + 1.0
>1568	AdditiveExpression	negGraph [ u ] . edges . front ( ) . weight + 1.0
>1569	PrimaryExpression	1.0
>1570	MemberAccess	negGraph [ u ] . edges . front ( ) . weight
>1571	Identifier	weight
>1572	CallExpression	negGraph [ u ] . edges . front ( )
>1573	ArgumentList	 
>1574	Callee	negGraph [ u ] . edges . front
>1575	MemberAccess	negGraph [ u ] . edges . front
>1576	Identifier	front
>1577	MemberAccess	negGraph [ u ] . edges
>1578	Identifier	edges
>1579	ArrayIndexing	negGraph [ u ]
>1580	Identifier	u
>1581	Identifier	negGraph
>1582	MemberAccess	posGraph [ u ] . edges . back ( ) . weight
>1583	Identifier	weight
>1584	CallExpression	posGraph [ u ] . edges . back ( )
>1585	ArgumentList	 
>1586	Callee	posGraph [ u ] . edges . back
>1587	MemberAccess	posGraph [ u ] . edges . back
>1588	Identifier	back
>1589	MemberAccess	posGraph [ u ] . edges
>1590	Identifier	edges
>1591	ArrayIndexing	posGraph [ u ]
>1592	Identifier	u
>1593	Identifier	posGraph
>1594	Identifier	xi_u
>1595	Identifier	xi_u
>1596	IdentifierDeclType	const double
>1597	IfStatement	if ( posGraph [ u ] . edges . empty ( ) || negGraph [ u ] . edges . empty ( ) )
>1598	ContinueStatement	 
>1599	Condition	 
>1600	OrExpression	posGraph [ u ] . edges . empty ( ) || negGraph [ u ] . edges . empty ( )
>1601	CallExpression	negGraph [ u ] . edges . empty ( )
>1602	ArgumentList	 
>1603	Callee	negGraph [ u ] . edges . empty
>1604	MemberAccess	negGraph [ u ] . edges . empty
>1605	Identifier	empty
>1606	MemberAccess	negGraph [ u ] . edges
>1607	Identifier	edges
>1608	ArrayIndexing	negGraph [ u ]
>1609	Identifier	u
>1610	Identifier	negGraph
>1611	CallExpression	posGraph [ u ] . edges . empty ( )
>1612	ArgumentList	 
>1613	Callee	posGraph [ u ] . edges . empty
>1614	MemberAccess	posGraph [ u ] . edges . empty
>1615	Identifier	empty
>1616	MemberAccess	posGraph [ u ] . edges
>1617	Identifier	edges
>1618	ArrayIndexing	posGraph [ u ]
>1619	Identifier	u
>1620	Identifier	posGraph
>1621	IdentifierDeclStatement	 
>1622	IdentifierDecl	u ( * it , segId )
>1623	Expression	* it , segId
>1624	Identifier	segId
>1625	UnaryOp	* it
>1626	Identifier	it
>1627	UnaryOperator	*
>1628	Identifier	u
>1629	IdentifierDeclType	const drwnNNGraphNodeIndex
>1630	IncDecOp	 
>1631	IncDec	++
>1632	Identifier	segId
>1633	Condition	 
>1634	RelationalExpression	segId < graph [ * it ] . numNodes ( )
>1635	CallExpression	graph [ * it ] . numNodes ( )
>1636	ArgumentList	 
>1637	Callee	graph [ * it ] . numNodes
>1638	MemberAccess	graph [ * it ] . numNodes
>1639	Identifier	numNodes
>1640	ArrayIndexing	graph [ * it ]
>1641	UnaryOp	* it
>1642	Identifier	it
>1643	UnaryOperator	*
>1644	Identifier	graph
>1645	Identifier	segId
>1646	ForInit	 
>1647	IdentifierDeclStatement	unsigned segId = 0 ;
>1648	IdentifierDecl	segId = 0
>1649	AssignmentExpr	segId = 0
>1650	PrimaryExpression	0
>1651	Identifier	segId
>1652	Identifier	segId
>1653	IdentifierDeclType	unsigned
>1654	UnaryExpression	 
>1655	Identifier	it
>1656	IncDec	++
>1657	Condition	 
>1658	EqualityExpression	it != _imgIndxes . end ( )
>1659	CallExpression	_imgIndxes . end ( )
>1660	ArgumentList	 
>1661	Callee	_imgIndxes . end
>1662	MemberAccess	_imgIndxes . end
>1663	Identifier	end
>1664	Identifier	_imgIndxes
>1665	Identifier	it
>1666	ForInit	 
>1667	IdentifierDeclStatement	set < unsigned > 
>1668	IdentifierDecl	it = _imgIndxes . begin ( )
>1669	AssignmentExpr	it = _imgIndxes . begin ( )
>1670	CallExpression	_imgIndxes . begin ( )
>1671	ArgumentList	 
>1672	Callee	_imgIndxes . begin
>1673	MemberAccess	_imgIndxes . begin
>1674	Identifier	begin
>1675	Identifier	_imgIndxes
>1676	Identifier	it
>1677	Identifier	it
>1678	IdentifierDeclType	set < unsigned > 
>1679	IdentifierDeclStatement	 
>1680	IdentifierDecl	& labelWeights = _learner -> getLabelWeights ( )
>1681	AssignmentExpr	& labelWeights = _learner -> getLabelWeights ( )
>1682	CallExpression	_learner -> getLabelWeights ( )
>1683	ArgumentList	 
>1684	Callee	_learner -> getLabelWeights
>1685	PtrMemberAccess	_learner -> getLabelWeights
>1686	Identifier	getLabelWeights
>1687	Identifier	_learner
>1688	Identifier	labelWeights
>1689	Identifier	labelWeights
>1690	IdentifierDeclType	const vector < double > &
>1691	IdentifierDeclStatement	 
>1692	IdentifierDecl	& negGraph = _learner -> getNegGraph ( )
>1693	AssignmentExpr	& negGraph = _learner -> getNegGraph ( )
>1694	CallExpression	_learner -> getNegGraph ( )
>1695	ArgumentList	 
>1696	Callee	_learner -> getNegGraph
>1697	PtrMemberAccess	_learner -> getNegGraph
>1698	Identifier	getNegGraph
>1699	Identifier	_learner
>1700	Identifier	negGraph
>1701	Identifier	negGraph
>1702	IdentifierDeclType	const drwnNNGraph &
>1703	IdentifierDeclStatement	 
>1704	IdentifierDecl	& posGraph = _learner -> getPosGraph ( )
>1705	AssignmentExpr	& posGraph = _learner -> getPosGraph ( )
>1706	CallExpression	_learner -> getPosGraph ( )
>1707	ArgumentList	 
>1708	Callee	_learner -> getPosGraph
>1709	PtrMemberAccess	_learner -> getPosGraph
>1710	Identifier	getPosGraph
>1711	Identifier	_learner
>1712	Identifier	posGraph
>1713	Identifier	posGraph
>1714	IdentifierDeclType	const drwnNNGraph &
>1715	IdentifierDeclStatement	 
>1716	IdentifierDecl	& graph = _learner -> getSrcGraph ( )
>1717	AssignmentExpr	& graph = _learner -> getSrcGraph ( )
>1718	CallExpression	_learner -> getSrcGraph ( )
>1719	ArgumentList	 
>1720	Callee	_learner -> getSrcGraph
>1721	PtrMemberAccess	_learner -> getSrcGraph
>1722	Identifier	getSrcGraph
>1723	Identifier	_learner
>1724	Identifier	graph
>1725	Identifier	graph
>1726	IdentifierDeclType	const drwnNNGraph &
>1727	IdentifierDeclStatement	 
>1728	IdentifierDecl	localG = MatrixXf 
>1729	AssignmentExpr	localG = MatrixXf 
>1730	CallExpression	MatrixXf 
>1731	ArgumentList	_G -> rows ( )
>1732	Argument	_G -> cols ( )
>1733	CallExpression	_G -> cols ( )
>1734	ArgumentList	 
>1735	Callee	_G -> cols
>1736	PtrMemberAccess	_G -> cols
>1737	Identifier	cols
>1738	Identifier	_G
>1739	Argument	_G -> rows ( )
>1740	CallExpression	_G -> rows ( )
>1741	ArgumentList	 
>1742	Callee	_G -> rows
>1743	PtrMemberAccess	_G -> rows
>1744	Identifier	rows
>1745	Identifier	_G
>1746	Callee	MatrixXf 
>1747	Identifier	MatrixXf 
>1748	Identifier	localG
>1749	Identifier	localG
>1750	IdentifierDeclType	MatrixXf
>1832	FunctionDef	drwnNNGraphProjectFeaturesThread (unsigned imgIndx , const drwnNNGraph & srcGraph , drwnNNGraph & posGraph , drwnNNGraph & \
>1833	ParameterList	unsigned imgIndx , const drwnNNGraph & srcGraph , drwnNNGraph & posGraph , drwnNNGraph & negGraph , const MatrixXf & \
>1834	Parameter	 
>1835	Identifier	Lt
>1836	ParameterType	const MatrixXf &
>1837	Parameter	 
>1838	Identifier	negGraph
>1839	ParameterType	drwnNNGraph &
>1840	Parameter	 
>1841	Identifier	posGraph
>1842	ParameterType	drwnNNGraph &
>1843	Parameter	 
>1844	Identifier	srcGraph
>1845	ParameterType	const drwnNNGraph &
>1846	Parameter	 
>1847	Identifier	imgIndx
>1848	ParameterType	unsigned
>1849	CompoundStatement	 
>1850	ExpressionStatement	 
>1851	CallExpression	_imgIndxes . insert ( imgIndx )
>1852	ArgumentList	imgIndx
>1853	Argument	imgIndx
>1854	Identifier	imgIndx
>1855	Callee	_imgIndxes . insert
>1856	MemberAccess	_imgIndxes . insert
>1857	Identifier	insert
>1858	Identifier	_imgIndxes
>1868	FunctionDef	drwnNNGraphProjectFeaturesThread (const set < unsigned > & imgIndxes , const drwnNNGraph & srcGraph , drwnNNGraph & \
>1869	ParameterList	const set < unsigned > & imgIndxes , const drwnNNGraph & srcGraph , drwnNNGraph & posGraph , drwnNNGraph & negGraph , \
>1870	Parameter	 
>1871	Identifier	Lt
>1872	ParameterType	const MatrixXf &
>1873	Parameter	 
>1874	Identifier	negGraph
>1875	ParameterType	drwnNNGraph &
>1876	Parameter	 
>1877	Identifier	posGraph
>1878	ParameterType	drwnNNGraph &
>1879	Parameter	 
>1880	Identifier	srcGraph
>1881	ParameterType	const drwnNNGraph &
>1882	Parameter	 
>1883	Identifier	imgIndxes
>1884	ParameterType	const set < unsigned > &
>1885	CompoundStatement	 
>1894	FunctionDef	~drwnNNGraphProjectFeaturesThread ()
>1895	ParameterList	 
>1896	CompoundStatement	 
>1900	FunctionDef	operator ( ) ()
>1901	ParameterList	 
>1902	ReturnType	void
>1903	CompoundStatement	 
>1904	ForStatement	for ( set < unsigned > 
>1905	CompoundStatement	 
>1906	ForStatement	for ( unsigned segId = 0 ; segId < _srcGraph [ * it ] . numNodes ( ) ; segId ++ )
>1907	CompoundStatement	 
>1908	ExpressionStatement	 
>1909	AssignmentExpr	_negGraph [ * it ] [ segId ] . features = _posGraph [ * it ] [ segId ] . features = X . col ( segId )
>1910	AssignmentExpr	_posGraph [ * it ] [ segId ] . features = X . col ( segId )
>1911	CallExpression	X . col ( segId )
>1912	ArgumentList	segId
>1913	Argument	segId
>1914	Identifier	segId
>1915	Callee	X . col
>1916	MemberAccess	X . col
>1917	Identifier	col
>1918	Identifier	X
>1919	MemberAccess	_posGraph [ * it ] [ segId ] . features
>1920	Identifier	features
>1921	ArrayIndexing	_posGraph [ * it ] [ segId ]
>1922	Identifier	segId
>1923	ArrayIndexing	_posGraph [ * it ]
>1924	UnaryOp	* it
>1925	Identifier	it
>1926	UnaryOperator	*
>1927	Identifier	_posGraph
>1928	MemberAccess	_negGraph [ * it ] [ segId ] . features
>1929	Identifier	features
>1930	ArrayIndexing	_negGraph [ * it ] [ segId ]
>1931	Identifier	segId
>1932	ArrayIndexing	_negGraph [ * it ]
>1933	UnaryOp	* it
>1934	Identifier	it
>1935	UnaryOperator	*
>1936	Identifier	_negGraph
>1937	IncDecOp	 
>1938	IncDec	++
>1939	Identifier	segId
>1940	Condition	 
>1941	RelationalExpression	segId < _srcGraph [ * it ] . numNodes ( )
>1942	CallExpression	_srcGraph [ * it ] . numNodes ( )
>1943	ArgumentList	 
>1944	Callee	_srcGraph [ * it ] . numNodes
>1945	MemberAccess	_srcGraph [ * it ] . numNodes
>1946	Identifier	numNodes
>1947	ArrayIndexing	_srcGraph [ * it ]
>1948	UnaryOp	* it
>1949	Identifier	it
>1950	UnaryOperator	*
>1951	Identifier	_srcGraph
>1952	Identifier	segId
>1953	ForInit	 
>1954	IdentifierDeclStatement	unsigned segId = 0 ;
>1955	IdentifierDecl	segId = 0
>1956	AssignmentExpr	segId = 0
>1957	PrimaryExpression	0
>1958	Identifier	segId
>1959	Identifier	segId
>1960	IdentifierDeclType	unsigned
>1961	ExpressionStatement	 
>1962	UnaryOp	* ft -> second
>1963	PtrMemberAccess	ft -> second
>1964	Identifier	second
>1965	Identifier	ft
>1966	UnaryOperator	*
>1967	Statement	 
>1968	Statement	 
>1969	Statement	 
>1970	Statement	 
>1971	Statement	 
>1972	Statement	 
>1973	Statement	 
>1974	Statement	 
>1975	Statement	 
>1976	Statement	 
>1977	Statement	 
>1978	Statement	 
>1979	Statement	 
>1980	Statement	 
>1981	ExpressionStatement	 
>1982	CallExpression	unlock ( )
>1983	ArgumentList	 
>1984	Callee	unlock
>1985	Identifier	unlock
>1986	IfStatement	if ( ft == _imgFeatureData . end ( ) )
>1987	CompoundStatement	 
>1988	ExpressionStatement	 
>1989	AssignmentExpr	ft = _imgFeatureData . insert ( _imgFeatureData . end ( ) , make_pair ( * it , X ) )
>1990	CallExpression	_imgFeatureData . insert ( _imgFeatureData . end ( ) , make_pair ( * it , X ) )
>1991	ArgumentList	_imgFeatureData . end ( )
>1992	Argument	make_pair ( * it , X )
>1993	CallExpression	make_pair ( * it , X )
>1994	ArgumentList	* it
>1995	Argument	X
>1996	Identifier	X
>1997	Argument	* it
>1998	UnaryOp	* it
>1999	Identifier	it
>2000	UnaryOperator	*
>2001	Callee	make_pair
>2002	Identifier	make_pair
>2003	Argument	_imgFeatureData . end ( )
>2004	CallExpression	_imgFeatureData . end ( )
>2005	ArgumentList	 
>2006	Callee	_imgFeatureData . end
>2007	MemberAccess	_imgFeatureData . end
>2008	Identifier	end
>2009	Identifier	_imgFeatureData
>2010	Callee	_imgFeatureData . insert
>2011	MemberAccess	_imgFeatureData . insert
>2012	Identifier	insert
>2013	Identifier	_imgFeatureData
>2014	Identifier	ft
>2015	ForStatement	for ( unsigned segId = 0 ; segId < _srcGraph [ * it ] . numNodes ( ) ; segId ++ )
>2016	CompoundStatement	 
>2017	ExpressionStatement	 
>2018	AssignmentExpr	X . col ( segId ) = _srcGraph [ * it ] [ segId ] . features
>2019	MemberAccess	_srcGraph [ * it ] [ segId ] . features
>2020	Identifier	features
>2021	ArrayIndexing	_srcGraph [ * it ] [ segId ]
>2022	Identifier	segId
>2023	ArrayIndexing	_srcGraph [ * it ]
>2024	UnaryOp	* it
>2025	Identifier	it
>2026	UnaryOperator	*
>2027	Identifier	_srcGraph
>2028	CallExpression	X . col ( segId )
>2029	ArgumentList	segId
>2030	Argument	segId
>2031	Identifier	segId
>2032	Callee	X . col
>2033	MemberAccess	X . col
>2034	Identifier	col
>2035	Identifier	X
>2036	IncDecOp	 
>2037	IncDec	++
>2038	Identifier	segId
>2039	Condition	 
>2040	RelationalExpression	segId < _srcGraph [ * it ] . numNodes ( )
>2041	CallExpression	_srcGraph [ * it ] . numNodes ( )
>2042	ArgumentList	 
>2043	Callee	_srcGraph [ * it ] . numNodes
>2044	MemberAccess	_srcGraph [ * it ] . numNodes
>2045	Identifier	numNodes
>2046	ArrayIndexing	_srcGraph [ * it ]
>2047	UnaryOp	* it
>2048	Identifier	it
>2049	UnaryOperator	*
>2050	Identifier	_srcGraph
>2051	Identifier	segId
>2052	ForInit	 
>2053	IdentifierDeclStatement	unsigned segId = 0 ;
>2054	IdentifierDecl	segId = 0
>2055	AssignmentExpr	segId = 0
>2056	PrimaryExpression	0
>2057	Identifier	segId
>2058	Identifier	segId
>2059	IdentifierDeclType	unsigned
>2060	IdentifierDeclStatement	 
>2061	IdentifierDecl	X ( _Lt . cols ( ) , _srcGraph [ * it ] . numNodes ( ) )
>2062	Expression	_Lt . cols ( ) , _srcGraph [ * it ] . numNodes ( )
>2063	CallExpression	_srcGraph [ * it ] . numNodes ( )
>2064	ArgumentList	 
>2065	Callee	_srcGraph [ * it ] . numNodes
>2066	MemberAccess	_srcGraph [ * it ] . numNodes
>2067	Identifier	numNodes
>2068	ArrayIndexing	_srcGraph [ * it ]
>2069	UnaryOp	* it
>2070	Identifier	it
>2071	UnaryOperator	*
>2072	Identifier	_srcGraph
>2073	CallExpression	_Lt . cols ( )
>2074	ArgumentList	 
>2075	Callee	_Lt . cols
>2076	MemberAccess	_Lt . cols
>2077	Identifier	cols
>2078	Identifier	_Lt
>2079	Identifier	X
>2080	IdentifierDeclType	MatrixXf
>2081	Condition	 
>2082	EqualityExpression	ft == _imgFeatureData . end ( )
>2083	CallExpression	_imgFeatureData . end ( )
>2084	ArgumentList	 
>2085	Callee	_imgFeatureData . end
>2086	MemberAccess	_imgFeatureData . end
>2087	Identifier	end
>2088	Identifier	_imgFeatureData
>2089	Identifier	ft
>2090	IdentifierDeclStatement	 
>2091	IdentifierDecl	ft = _imgFeatureData . find ( * it )
>2092	AssignmentExpr	ft = _imgFeatureData . find ( * it )
>2093	CallExpression	_imgFeatureData . find ( * it )
>2094	ArgumentList	* it
>2095	Argument	* it
>2096	UnaryOp	* it
>2097	Identifier	it
>2098	UnaryOperator	*
>2099	Callee	_imgFeatureData . find
>2100	MemberAccess	_imgFeatureData . find
>2101	Identifier	find
>2102	Identifier	_imgFeatureData
>2103	Identifier	ft
>2104	Identifier	ft
>2105	IdentifierDeclType	map < unsigned , MatrixXf > 
>2106	ExpressionStatement	 
>2107	CallExpression	lock ( )
>2108	ArgumentList	 
>2109	Callee	lock
>2110	Identifier	lock
>2111	UnaryExpression	 
>2112	Identifier	it
>2113	IncDec	++
>2114	Condition	 
>2115	EqualityExpression	it != _imgIndxes . end ( )
>2116	CallExpression	_imgIndxes . end ( )
>2117	ArgumentList	 
>2118	Callee	_imgIndxes . end
>2119	MemberAccess	_imgIndxes . end
>2120	Identifier	end
>2121	Identifier	_imgIndxes
>2122	Identifier	it
>2123	ForInit	 
>2124	IdentifierDeclStatement	set < unsigned > 
>2125	IdentifierDecl	it = _imgIndxes . begin ( )
>2126	AssignmentExpr	it = _imgIndxes . begin ( )
>2127	CallExpression	_imgIndxes . begin ( )
>2128	ArgumentList	 
>2129	Callee	_imgIndxes . begin
>2130	MemberAccess	_imgIndxes . begin
>2131	Identifier	begin
>2132	Identifier	_imgIndxes
>2133	Identifier	it
>2134	Identifier	it
>2135	IdentifierDeclType	set < unsigned > 
>2180	FunctionDef	drwnNNGraphLearner 
>2181	ParameterList	const drwnNNGraph & graph , double lambda
>2182	Parameter	 
>2183	Identifier	lambda
>2184	ParameterType	double
>2185	Parameter	 
>2186	Identifier	graph
>2187	ParameterType	const drwnNNGraph &
>2188	CompoundStatement	 
>2189	ExpressionStatement	 
>2190	CallExpression	DRWN_LOG_VERBOSE ( \"initializing metric learner with \" << graph . numImages ( ) << \" images and \" << _dim << \"-dimensional \
>2191	ArgumentList	\"initializing metric learner with \" << graph . numImages ( ) << \" images and \" << _dim << \"-dimensional features\"\
>2192	Argument	\"initializing metric learner with \" << graph . numImages ( ) << \" images and \" << _dim << \"-dimensional features\"\
>2193	ShiftExpression	\"initializing metric learner with \" << graph . numImages ( ) << \" images and \" << _dim << \"-dimensional \
>2194	ShiftExpression	graph . numImages ( ) << \" images and \" << _dim << \"-dimensional features\"
>2195	ShiftExpression	\" images and \" << _dim << \"-dimensional features\"
>2196	ShiftExpression	_dim << \"-dimensional features\"
>2197	PrimaryExpression	\"-dimensional features\"
>2198	Identifier	_dim
>2199	PrimaryExpression	\" images and \"
>2200	CallExpression	graph . numImages ( )
>2201	ArgumentList	 
>2202	Callee	graph . numImages
>2203	MemberAccess	graph . numImages
>2204	Identifier	numImages
>2205	Identifier	graph
>2206	PrimaryExpression	\"initializing metric learner with \"
>2207	Callee	DRWN_LOG_VERBOSE
>2208	Identifier	DRWN_LOG_VERBOSE
>2209	ExpressionStatement	 
>2210	AssignmentExpr	_dim = graph [ 0 ] [ 0 ] . features . rows ( )
>2211	CallExpression	graph [ 0 ] [ 0 ] . features . rows ( )
>2212	ArgumentList	 
>2213	Callee	graph [ 0 ] [ 0 ] . features . rows
>2214	MemberAccess	graph [ 0 ] [ 0 ] . features . rows
>2215	Identifier	rows
>2216	MemberAccess	graph [ 0 ] [ 0 ] . features
>2217	Identifier	features
>2218	ArrayIndexing	graph [ 0 ] [ 0 ]
>2219	PrimaryExpression	0
>2220	ArrayIndexing	graph [ 0 ]
>2221	PrimaryExpression	0
>2222	Identifier	graph
>2223	Identifier	_dim
>2224	ExpressionStatement	 
>2225	CallExpression	DRWN_ASSERT ( graph . numImages ( ) > 0 )
>2226	ArgumentList	graph . numImages ( ) > 0
>2227	Argument	graph . numImages ( ) > 0
>2228	RelationalExpression	graph . numImages ( ) > 0
>2229	PrimaryExpression	0
>2230	CallExpression	graph . numImages ( )
>2231	ArgumentList	 
>2232	Callee	graph . numImages
>2233	MemberAccess	graph . numImages
>2234	Identifier	numImages
>2235	Identifier	graph
>2236	Callee	DRWN_ASSERT
>2237	Identifier	DRWN_ASSERT
>2249	FunctionDef	drwnNNGraphLearner 
>2250	ParameterList	 
>2251	CompoundStatement	 
>2255	FunctionDef	drwnNNGraphLearner 
>2256	ParameterList	unsigned maxCycles
>2257	Parameter	 
>2258	Identifier	maxCycles
>2259	ParameterType	unsigned
>2260	ReturnType	double
>2261	CompoundStatement	 
>2262	ReturnStatement	 
>2263	Identifier	obj
>2264	ExpressionStatement	 
>2265	CallExpression	DRWN_LOG_MESSAGE ( \"final learning objective \" << obj )
>2266	ArgumentList	\"final learning objective \" << obj
>2267	Argument	\"final learning objective \" << obj
>2268	ShiftExpression	\"final learning objective \" << obj
>2269	Identifier	obj
>2270	PrimaryExpression	\"final learning objective \"
>2271	Callee	DRWN_LOG_MESSAGE
>2272	Identifier	DRWN_LOG_MESSAGE
>2273	IdentifierDeclStatement	 
>2274	IdentifierDecl	obj = computeObjective ( )
>2275	AssignmentExpr	obj = computeObjective ( )
>2276	CallExpression	computeObjective ( )
>2277	ArgumentList	 
>2278	Callee	computeObjective
>2279	Identifier	computeObjective
>2280	Identifier	obj
>2281	Identifier	obj
>2282	IdentifierDeclType	const double
>2283	ForStatement	for ( unsigned nCycle = 0 ; nCycle < maxCycles ; nCycle ++ )
>2284	CompoundStatement	 
>2285	ExpressionStatement	 
>2286	CallExpression	endMetricCycle ( )
>2287	ArgumentList	 
>2288	Callee	endMetricCycle
>2289	Identifier	endMetricCycle
>2290	IfStatement	if ( obj_best < obj )
>2291	CompoundStatement	 
>2292	ExpressionStatement	 
>2293	CallExpression	setTransform ( L_best )
>2294	ArgumentList	L_best
>2295	Argument	L_best
>2296	Identifier	L_best
>2297	Callee	setTransform
>2298	Identifier	setTransform
>2299	Condition	 
>2300	RelationalExpression	obj_best < obj
>2301	Identifier	obj
>2302	Identifier	obj_best
>2303	ForStatement	for ( unsigned nIterations = 0 ; nIterations < METRIC_ITERATIONS ; nIterations ++ )
>2304	CompoundStatement	 
>2305	IfStatement	if ( obj < obj_best )
>2306	ElseStatement	else
>2307	IfStatement	if ( obj > ( 1.0 + 1.0e-3 ) * obj_best )
>2308	CompoundStatement	 
>2309	ExpressionStatement	 
>2310	AssignmentExpr	obj = obj_best
>2311	Identifier	obj_best
>2312	Identifier	obj
>2313	ExpressionStatement	 
>2314	CallExpression	setTransform ( L_best )
>2315	ArgumentList	L_best
>2316	Argument	L_best
>2317	Identifier	L_best
>2318	Callee	setTransform
>2319	Identifier	setTransform
>2320	ExpressionStatement	 
>2321	AssignmentExpr	ALPHA_ZERO *= 0.5
>2322	PrimaryExpression	0.5
>2323	Identifier	ALPHA_ZERO
>2324	Condition	 
>2325	RelationalExpression	obj > ( 1.0 + 1.0e-3 ) * obj_best
>2326	MultiplicativeExpression	( 1.0 + 1.0e-3 ) * obj_best
>2327	Identifier	obj_best
>2328	AdditiveExpression	1.0 + 1.0e-3
>2329	PrimaryExpression	1.0e-3
>2330	PrimaryExpression	1.0
>2331	Identifier	obj
>2332	CompoundStatement	 
>2333	ExpressionStatement	 
>2334	AssignmentExpr	ALPHA_ZERO *= 1.05
>2335	PrimaryExpression	1.05
>2336	Identifier	ALPHA_ZERO
>2337	ExpressionStatement	 
>2338	AssignmentExpr	L_best = getTransform ( )
>2339	CallExpression	getTransform ( )
>2340	ArgumentList	 
>2341	Callee	getTransform
>2342	Identifier	getTransform
>2343	Identifier	L_best
>2344	ExpressionStatement	 
>2345	AssignmentExpr	obj_best = obj
>2346	Identifier	obj
>2347	Identifier	obj_best
>2348	Condition	 
>2349	RelationalExpression	obj < obj_best
>2350	Identifier	obj_best
>2351	Identifier	obj
>2352	ExpressionStatement	 
>2353	AssignmentExpr	obj = computeObjective ( )
>2354	CallExpression	computeObjective ( )
>2355	ArgumentList	 
>2356	Callee	computeObjective
>2357	Identifier	computeObjective
>2358	Identifier	obj
>2359	ExpressionStatement	 
>2360	CallExpression	updateGraphFeatures ( )
>2361	ArgumentList	 
>2362	Callee	updateGraphFeatures
>2363	Identifier	updateGraphFeatures
>2364	ExpressionStatement	 
>2365	CallExpression	subGradientStep ( G_avg , alpha )
>2366	ArgumentList	G_avg
>2367	Argument	alpha
>2368	Identifier	alpha
>2369	Argument	G_avg
>2370	Identifier	G_avg
>2371	Callee	subGradientStep
>2372	Identifier	subGradientStep
>2373	IdentifierDeclStatement	 
>2374	IdentifierDecl	alpha = ALPHA_ZERO / ( nCycle + sqrt ( nIterations + 1.0 ) )
>2375	AssignmentExpr	alpha = ALPHA_ZERO / ( nCycle + sqrt ( nIterations + 1.0 ) )
>2376	MultiplicativeExpression	ALPHA_ZERO / ( nCycle + sqrt ( nIterations + 1.0 ) )
>2377	AdditiveExpression	nCycle + sqrt ( nIterations + 1.0 )
>2378	CallExpression	sqrt ( nIterations + 1.0 )
>2379	ArgumentList	nIterations + 1.0
>2380	Argument	nIterations + 1.0
>2381	AdditiveExpression	nIterations + 1.0
>2382	PrimaryExpression	1.0
>2383	Identifier	nIterations
>2384	Callee	sqrt
>2385	Identifier	sqrt
>2386	Identifier	nCycle
>2387	Identifier	ALPHA_ZERO
>2388	Identifier	alpha
>2389	Identifier	alpha
>2390	IdentifierDeclType	const double
>2391	IfStatement	if ( nIterations == 0 )
>2392	ElseStatement	else
>2393	CompoundStatement	 
>2394	ExpressionStatement	 
>2395	AssignmentExpr	G_avg = beta * G + ( 1.0 - beta ) * G_avg
>2396	AdditiveExpression	beta * G + ( 1.0 - beta ) * G_avg
>2397	MultiplicativeExpression	( 1.0 - beta ) * G_avg
>2398	Identifier	G_avg
>2399	AdditiveExpression	1.0 - beta
>2400	Identifier	beta
>2401	PrimaryExpression	1.0
>2402	MultiplicativeExpression	beta * G
>2403	Identifier	G
>2404	Identifier	beta
>2405	Identifier	G_avg
>2406	IdentifierDeclStatement	 
>2407	IdentifierDecl	beta = 0.5
>2408	AssignmentExpr	beta = 0.5
>2409	PrimaryExpression	0.5
>2410	Identifier	beta
>2411	Identifier	beta
>2412	IdentifierDeclType	const double
>2413	CompoundStatement	 
>2414	ExpressionStatement	 
>2415	AssignmentExpr	G_avg = G
>2416	Identifier	G
>2417	Identifier	G_avg
>2418	Condition	 
>2419	EqualityExpression	nIterations == 0
>2420	PrimaryExpression	0
>2421	Identifier	nIterations
>2422	IdentifierDeclStatement	 
>2423	IdentifierDecl	G = computeSubGradient ( )
>2424	AssignmentExpr	G = computeSubGradient ( )
>2425	CallExpression	computeSubGradient ( )
>2426	ArgumentList	 
>2427	Callee	computeSubGradient
>2428	Identifier	computeSubGradient
>2429	Identifier	G
>2430	Identifier	G
>2431	IdentifierDeclType	const MatrixXd
>2432	ExpressionStatement	 
>2433	CallExpression	DRWN_LOG_MESSAGE ( \"...learning iteration \" << nCycle << \".\" << nIterations << \"; objective \" << obj )
>2434	ArgumentList	\"...learning iteration \" << nCycle << \".\" << nIterations << \"; objective \" << obj
>2435	Argument	\"...learning iteration \" << nCycle << \".\" << nIterations << \"; objective \" << obj
>2436	ShiftExpression	\"...learning iteration \" << nCycle << \".\" << nIterations << \"; objective \" << obj
>2437	ShiftExpression	nCycle << \".\" << nIterations << \"; objective \" << obj
>2438	ShiftExpression	\".\" << nIterations << \"; objective \" << obj
>2439	ShiftExpression	nIterations << \"; objective \" << obj
>2440	ShiftExpression	\"; objective \" << obj
>2441	Identifier	obj
>2442	PrimaryExpression	\"; objective \"
>2443	Identifier	nIterations
>2444	PrimaryExpression	\".\"
>2445	Identifier	nCycle
>2446	PrimaryExpression	\"...learning iteration \"
>2447	Callee	DRWN_LOG_MESSAGE
>2448	Identifier	DRWN_LOG_MESSAGE
>2449	IncDecOp	 
>2450	IncDec	++
>2451	Identifier	nIterations
>2452	Condition	 
>2453	RelationalExpression	nIterations < METRIC_ITERATIONS
>2454	Identifier	METRIC_ITERATIONS
>2455	Identifier	nIterations
>2456	ForInit	 
>2457	IdentifierDeclStatement	unsigned nIterations = 0 ;
>2458	IdentifierDecl	nIterations = 0
>2459	AssignmentExpr	nIterations = 0
>2460	PrimaryExpression	0
>2461	Identifier	nIterations
>2462	Identifier	nIterations
>2463	IdentifierDeclType	unsigned
>2464	ExpressionStatement	 
>2465	CallExpression	startMetricCycle ( )
>2466	ArgumentList	 
>2467	Callee	startMetricCycle
>2468	Identifier	startMetricCycle
>2469	IdentifierDeclStatement	 
>2470	IdentifierDecl	G_avg
>2471	Identifier	G_avg
>2472	IdentifierDeclType	MatrixXd
>2473	IdentifierDeclStatement	 
>2474	IdentifierDecl	obj_best = obj
>2475	AssignmentExpr	obj_best = obj
>2476	Identifier	obj
>2477	Identifier	obj
>2478	Identifier	obj_best
>2479	IdentifierDeclType	double
>2480	IdentifierDeclStatement	 
>2481	IdentifierDecl	L_best = getTransform ( )
>2482	AssignmentExpr	L_best = getTransform ( )
>2483	CallExpression	getTransform ( )
>2484	ArgumentList	 
>2485	Callee	getTransform
>2486	Identifier	getTransform
>2487	Identifier	L_best
>2488	Identifier	L_best
>2489	IdentifierDeclType	MatrixXd
>2490	IdentifierDeclStatement	 
>2491	IdentifierDecl	obj = computeObjective ( )
>2492	AssignmentExpr	obj = computeObjective ( )
>2493	CallExpression	computeObjective ( )
>2494	ArgumentList	 
>2495	Callee	computeObjective
>2496	Identifier	computeObjective
>2497	Identifier	obj
>2498	Identifier	obj
>2499	IdentifierDeclType	double
>2500	ExpressionStatement	 
>2501	CallExpression	nearestNeighbourUpdate ( nCycle , SEARCH_ITERATIONS )
>2502	ArgumentList	nCycle
>2503	Argument	SEARCH_ITERATIONS
>2504	Identifier	SEARCH_ITERATIONS
>2505	Argument	nCycle
>2506	Identifier	nCycle
>2507	Callee	nearestNeighbourUpdate
>2508	Identifier	nearestNeighbourUpdate
>2509	IncDecOp	 
>2510	IncDec	++
>2511	Identifier	nCycle
>2512	Condition	 
>2513	RelationalExpression	nCycle < maxCycles
>2514	Identifier	maxCycles
>2515	Identifier	nCycle
>2516	ForInit	 
>2517	IdentifierDeclStatement	unsigned nCycle = 0 ;
>2518	IdentifierDecl	nCycle = 0
>2519	AssignmentExpr	nCycle = 0
>2520	PrimaryExpression	0
>2521	Identifier	nCycle
>2522	Identifier	nCycle
>2523	IdentifierDeclType	unsigned
>2524	ExpressionStatement	 
>2525	CallExpression	drwnNNGraphThreadedMoves 
>2526	ArgumentList	_negGraph
>2527	Argument	drwnNNGraphLabelsNotEqualMetric ( )
>2528	CallExpression	drwnNNGraphLabelsNotEqualMetric ( )
>2529	ArgumentList	 
>2530	Callee	drwnNNGraphLabelsNotEqualMetric
>2531	Identifier	drwnNNGraphLabelsNotEqualMetric
>2532	Argument	_negGraph
>2533	Identifier	_negGraph
>2534	Callee	drwnNNGraphThreadedMoves 
>2535	Identifier	drwnNNGraphThreadedMoves 
>2536	ExpressionStatement	 
>2537	CallExpression	drwnNNGraphThreadedMoves 
>2538	ArgumentList	_posGraph
>2539	Argument	drwnNNGraphLabelsEqualMetric ( )
>2540	CallExpression	drwnNNGraphLabelsEqualMetric ( )
>2541	ArgumentList	 
>2542	Callee	drwnNNGraphLabelsEqualMetric
>2543	Identifier	drwnNNGraphLabelsEqualMetric
>2544	Argument	_posGraph
>2545	Identifier	_posGraph
>2546	Callee	drwnNNGraphThreadedMoves 
>2547	Identifier	drwnNNGraphThreadedMoves 
>2572	FunctionDef	drwnNNGraphLearner 
>2573	ParameterList	 
>2574	ReturnType	double
>2575	CompoundStatement	 
>2576	ReturnStatement	 
>2577	Identifier	obj
>2578	ExpressionStatement	 
>2579	Identifier	DRWN_FCN_TOC
>2580	ExpressionStatement	 
>2581	AssignmentExpr	obj += computeLossFunction ( )
>2582	CallExpression	computeLossFunction ( )
>2583	ArgumentList	 
>2584	Callee	computeLossFunction
>2585	Identifier	computeLossFunction
>2586	Identifier	obj
>2587	ExpressionStatement	 
>2588	AssignmentExpr	obj *= _lambda
>2589	Identifier	_lambda
>2590	Identifier	obj
>2591	ForStatement	for ( u . imgIndx = 0 ; u . imgIndx < _posGraph . numImages ( ) ; u . imgIndx ++ )
>2592	CompoundStatement	 
>2593	ForStatement	for ( u . segId = 0 ; u . segId < _posGraph [ u . imgIndx ] . numNodes ( ) ; u . segId ++ )
>2594	CompoundStatement	 
>2595	ForStatement	for ( drwnNNGraphEdgeList 
>2596	CompoundStatement	 
>2597	ExpressionStatement	 
>2598	AssignmentExpr	obj += kt -> weight
>2599	PtrMemberAccess	kt -> weight
>2600	Identifier	weight
>2601	Identifier	kt
>2602	Identifier	obj
>2603	UnaryExpression	 
>2604	Identifier	kt
>2605	IncDec	++
>2606	Condition	 
>2607	EqualityExpression	kt != e . end ( )
>2608	CallExpression	e . end ( )
>2609	ArgumentList	 
>2610	Callee	e . end
>2611	MemberAccess	e . end
>2612	Identifier	end
>2613	Identifier	e
>2614	Identifier	kt
>2615	ForInit	 
>2616	IdentifierDeclStatement	drwnNNGraphEdgeList 
>2617	IdentifierDecl	kt = e . begin ( )
>2618	AssignmentExpr	kt = e . begin ( )
>2619	CallExpression	e . begin ( )
>2620	ArgumentList	 
>2621	Callee	e . begin
>2622	MemberAccess	e . begin
>2623	Identifier	begin
>2624	Identifier	e
>2625	Identifier	kt
>2626	Identifier	kt
>2627	IdentifierDeclType	drwnNNGraphEdgeList 
>2628	IdentifierDeclStatement	 
>2629	IdentifierDecl	& e = _posGraph [ u ] . edges
>2630	AssignmentExpr	& e = _posGraph [ u ] . edges
>2631	MemberAccess	_posGraph [ u ] . edges
>2632	Identifier	edges
>2633	ArrayIndexing	_posGraph [ u ]
>2634	Identifier	u
>2635	Identifier	_posGraph
>2636	Identifier	e
>2637	Identifier	e
>2638	IdentifierDeclType	const drwnNNGraphEdgeList &
>2639	IncDecOp	 
>2640	IncDec	++
>2641	MemberAccess	u . segId
>2642	Identifier	segId
>2643	Identifier	u
>2644	Condition	 
>2645	RelationalExpression	u . segId < _posGraph [ u . imgIndx ] . numNodes ( )
>2646	CallExpression	_posGraph [ u . imgIndx ] . numNodes ( )
>2647	ArgumentList	 
>2648	Callee	_posGraph [ u . imgIndx ] . numNodes
>2649	MemberAccess	_posGraph [ u . imgIndx ] . numNodes
>2650	Identifier	numNodes
>2651	ArrayIndexing	_posGraph [ u . imgIndx ]
>2652	MemberAccess	u . imgIndx
>2653	Identifier	imgIndx
>2654	Identifier	u
>2655	Identifier	_posGraph
>2656	MemberAccess	u . segId
>2657	Identifier	segId
>2658	Identifier	u
>2659	ForInit	 
>2660	AssignmentExpr	u . segId = 0
>2661	PrimaryExpression	0
>2662	MemberAccess	u . segId
>2663	Identifier	segId
>2664	Identifier	u
>2665	IncDecOp	 
>2666	IncDec	++
>2667	MemberAccess	u . imgIndx
>2668	Identifier	imgIndx
>2669	Identifier	u
>2670	Condition	 
>2671	RelationalExpression	u . imgIndx < _posGraph . numImages ( )
>2672	CallExpression	_posGraph . numImages ( )
>2673	ArgumentList	 
>2674	Callee	_posGraph . numImages
>2675	MemberAccess	_posGraph . numImages
>2676	Identifier	numImages
>2677	Identifier	_posGraph
>2678	MemberAccess	u . imgIndx
>2679	Identifier	imgIndx
>2680	Identifier	u
>2681	ForInit	 
>2682	AssignmentExpr	u . imgIndx = 0
>2683	PrimaryExpression	0
>2684	MemberAccess	u . imgIndx
>2685	Identifier	imgIndx
>2686	Identifier	u
>2687	IdentifierDeclStatement	 
>2688	IdentifierDecl	u ( 0 , 0 )
>2689	Expression	0 , 0
>2690	PrimaryExpression	0
>2691	PrimaryExpression	0
>2692	Identifier	u
>2693	IdentifierDeclType	drwnNNGraphNodeIndex
>2694	IdentifierDeclStatement	 
>2695	IdentifierDecl	obj = 0.0
>2696	AssignmentExpr	obj = 0.0
>2697	PrimaryExpression	0.0
>2698	Identifier	obj
>2699	Identifier	obj
>2700	IdentifierDeclType	double
>2701	ExpressionStatement	 
>2702	Identifier	DRWN_FCN_TIC
>2725	FunctionDef	drwnNNGraphLearner 
>2726	ParameterList	 
>2727	ReturnType	double
>2728	CompoundStatement	 
>2729	ReturnStatement	 
>2730	Identifier	loss
>2731	ForStatement	for ( u . imgIndx = 0 ; u . imgIndx < _posGraph . numImages ( ) ; u . imgIndx ++ )
>2732	CompoundStatement	 
>2733	ForStatement	for ( u . segId = 0 ; u . segId < _posGraph [ u . imgIndx ] . numNodes ( ) ; u . segId ++ )
>2734	CompoundStatement	 
>2735	ForStatement	for ( drwnNNGraphEdgeList 
>2736	CompoundStatement	 
>2737	ForStatement	for ( drwnNNGraphEdgeList 
>2738	CompoundStatement	 
>2739	ExpressionStatement	 
>2740	AssignmentExpr	loss += std 
>2741	CallExpression	std 
>2742	ArgumentList	xi_uvw
>2743	Argument	0.0
>2744	PrimaryExpression	0.0
>2745	Argument	xi_uvw
>2746	Identifier	xi_uvw
>2747	Callee	std 
>2748	Identifier	std 
>2749	Identifier	loss
>2750	IdentifierDeclStatement	 
>2751	IdentifierDecl	xi_uvw = alpha * ( vt -> weight - wt -> weight + 1.0 )
>2752	AssignmentExpr	xi_uvw = alpha * ( vt -> weight - wt -> weight + 1.0 )
>2753	MultiplicativeExpression	alpha * ( vt -> weight - wt -> weight + 1.0 )
>2754	AdditiveExpression	vt -> weight - wt -> weight + 1.0
>2755	AdditiveExpression	wt -> weight + 1.0
>2756	PrimaryExpression	1.0
>2757	PtrMemberAccess	wt -> weight
>2758	Identifier	weight
>2759	Identifier	wt
>2760	PtrMemberAccess	vt -> weight
>2761	Identifier	weight
>2762	Identifier	vt
>2763	Identifier	alpha
>2764	Identifier	xi_uvw
>2765	Identifier	xi_uvw
>2766	IdentifierDeclType	const double
>2767	UnaryExpression	 
>2768	Identifier	wt
>2769	IncDec	++
>2770	Condition	 
>2771	EqualityExpression	wt != ew . end ( )
>2772	CallExpression	ew . end ( )
>2773	ArgumentList	 
>2774	Callee	ew . end
>2775	MemberAccess	ew . end
>2776	Identifier	end
>2777	Identifier	ew
>2778	Identifier	wt
>2779	ForInit	 
>2780	IdentifierDeclStatement	drwnNNGraphEdgeList 
>2781	IdentifierDecl	wt = ew . begin ( )
>2782	AssignmentExpr	wt = ew . begin ( )
>2783	CallExpression	ew . begin ( )
>2784	ArgumentList	 
>2785	Callee	ew . begin
>2786	MemberAccess	ew . begin
>2787	Identifier	begin
>2788	Identifier	ew
>2789	Identifier	wt
>2790	Identifier	wt
>2791	IdentifierDeclType	drwnNNGraphEdgeList 
>2792	UnaryExpression	 
>2793	Identifier	vt
>2794	IncDec	++
>2795	Condition	 
>2796	EqualityExpression	vt != ev . end ( )
>2797	CallExpression	ev . end ( )
>2798	ArgumentList	 
>2799	Callee	ev . end
>2800	MemberAccess	ev . end
>2801	Identifier	end
>2802	Identifier	ev
>2803	Identifier	vt
>2804	ForInit	 
>2805	IdentifierDeclStatement	drwnNNGraphEdgeList 
>2806	IdentifierDecl	vt = ev . begin ( )
>2807	AssignmentExpr	vt = ev . begin ( )
>2808	CallExpression	ev . begin ( )
>2809	ArgumentList	 
>2810	Callee	ev . begin
>2811	MemberAccess	ev . begin
>2812	Identifier	begin
>2813	Identifier	ev
>2814	Identifier	vt
>2815	Identifier	vt
>2816	IdentifierDeclType	drwnNNGraphEdgeList 
>2817	IdentifierDeclStatement	 
>2818	IdentifierDecl	& ew = _negGraph [ u ] . edges
>2819	AssignmentExpr	& ew = _negGraph [ u ] . edges
>2820	MemberAccess	_negGraph [ u ] . edges
>2821	Identifier	edges
>2822	ArrayIndexing	_negGraph [ u ]
>2823	Identifier	u
>2824	Identifier	_negGraph
>2825	Identifier	ew
>2826	Identifier	ew
>2827	IdentifierDeclType	const drwnNNGraphEdgeList &
>2828	IdentifierDeclStatement	 
>2829	IdentifierDecl	& ev = _posGraph [ u ] . edges
>2830	AssignmentExpr	& ev = _posGraph [ u ] . edges
>2831	MemberAccess	_posGraph [ u ] . edges
>2832	Identifier	edges
>2833	ArrayIndexing	_posGraph [ u ]
>2834	Identifier	u
>2835	Identifier	_posGraph
>2836	Identifier	ev
>2837	Identifier	ev
>2838	IdentifierDeclType	const drwnNNGraphEdgeList &
>2839	IdentifierDeclStatement	 
>2840	IdentifierDecl	alpha = _labelWeights . empty ( ) ? 1.0 
>2841	AssignmentExpr	alpha = _labelWeights . empty ( ) ? 1.0 
>2842	ConditionalExpression	_labelWeights . empty ( ) ? 1.0 
>2843	ArrayIndexing	_labelWeights [ _graph [ u ] . label ]
>2844	MemberAccess	_graph [ u ] . label
>2845	Identifier	label
>2846	ArrayIndexing	_graph [ u ]
>2847	Identifier	u
>2848	Identifier	_graph
>2849	Identifier	_labelWeights
>2850	PrimaryExpression	1.0
>2851	Condition	_labelWeights . empty ( )
>2852	CallExpression	_labelWeights . empty ( )
>2853	ArgumentList	 
>2854	Callee	_labelWeights . empty
>2855	MemberAccess	_labelWeights . empty
>2856	Identifier	empty
>2857	Identifier	_labelWeights
>2858	Identifier	alpha
>2859	Identifier	alpha
>2860	IdentifierDeclType	const double
>2861	IncDecOp	 
>2862	IncDec	++
>2863	MemberAccess	u . segId
>2864	Identifier	segId
>2865	Identifier	u
>2866	Condition	 
>2867	RelationalExpression	u . segId < _posGraph [ u . imgIndx ] . numNodes ( )
>2868	CallExpression	_posGraph [ u . imgIndx ] . numNodes ( )
>2869	ArgumentList	 
>2870	Callee	_posGraph [ u . imgIndx ] . numNodes
>2871	MemberAccess	_posGraph [ u . imgIndx ] . numNodes
>2872	Identifier	numNodes
>2873	ArrayIndexing	_posGraph [ u . imgIndx ]
>2874	MemberAccess	u . imgIndx
>2875	Identifier	imgIndx
>2876	Identifier	u
>2877	Identifier	_posGraph
>2878	MemberAccess	u . segId
>2879	Identifier	segId
>2880	Identifier	u
>2881	ForInit	 
>2882	AssignmentExpr	u . segId = 0
>2883	PrimaryExpression	0
>2884	MemberAccess	u . segId
>2885	Identifier	segId
>2886	Identifier	u
>2887	IncDecOp	 
>2888	IncDec	++
>2889	MemberAccess	u . imgIndx
>2890	Identifier	imgIndx
>2891	Identifier	u
>2892	Condition	 
>2893	RelationalExpression	u . imgIndx < _posGraph . numImages ( )
>2894	CallExpression	_posGraph . numImages ( )
>2895	ArgumentList	 
>2896	Callee	_posGraph . numImages
>2897	MemberAccess	_posGraph . numImages
>2898	Identifier	numImages
>2899	Identifier	_posGraph
>2900	MemberAccess	u . imgIndx
>2901	Identifier	imgIndx
>2902	Identifier	u
>2903	ForInit	 
>2904	AssignmentExpr	u . imgIndx = 0
>2905	PrimaryExpression	0
>2906	MemberAccess	u . imgIndx
>2907	Identifier	imgIndx
>2908	Identifier	u
>2909	IdentifierDeclStatement	 
>2910	IdentifierDecl	u ( 0 , 0 )
>2911	Expression	0 , 0
>2912	PrimaryExpression	0
>2913	PrimaryExpression	0
>2914	Identifier	u
>2915	IdentifierDeclType	drwnNNGraphNodeIndex
>2916	IdentifierDeclStatement	 
>2917	IdentifierDecl	loss = 0.0
>2918	AssignmentExpr	loss = 0.0
>2919	PrimaryExpression	0.0
>2920	Identifier	loss
>2921	Identifier	loss
>2922	IdentifierDeclType	double
>2964	FunctionDef	drwnNNGraphLearner 
>2965	ParameterList	 
>2966	ReturnType	void
>2967	CompoundStatement	 
>2968	ExpressionStatement	 
>2969	Identifier	DRWN_FCN_TOC
>2970	ExpressionStatement	 
>2971	CallExpression	drwnNNGraphThreadedMoves 
>2972	ArgumentList	_negGraph
>2973	Argument	_negGraph
>2974	Identifier	_negGraph
>2975	Callee	drwnNNGraphThreadedMoves 
>2976	Identifier	drwnNNGraphThreadedMoves 
>2977	ExpressionStatement	 
>2978	CallExpression	drwnNNGraphThreadedMoves 
>2979	ArgumentList	_posGraph
>2980	Argument	_posGraph
>2981	Identifier	_posGraph
>2982	Callee	drwnNNGraphThreadedMoves 
>2983	Identifier	drwnNNGraphThreadedMoves 
>2984	ForStatement	for ( unsigned imgIndx = 0 ; imgIndx < _posGraph . numImages ( ) ; imgIndx ++ )
>2985	CompoundStatement	 
>2986	ForStatement	for ( unsigned segId = 0 ; segId < _posGraph [ imgIndx ] . numNodes ( ) ; segId ++ )
>2987	CompoundStatement	 
>2988	ExpressionStatement	 
>2989	AssignmentExpr	_negGraph [ imgIndx ] [ segId ] . features = _posGraph [ imgIndx ] [ segId ] . features
>2990	MemberAccess	_posGraph [ imgIndx ] [ segId ] . features
>2991	Identifier	features
>2992	ArrayIndexing	_posGraph [ imgIndx ] [ segId ]
>2993	Identifier	segId
>2994	ArrayIndexing	_posGraph [ imgIndx ]
>2995	Identifier	imgIndx
>2996	Identifier	_posGraph
>2997	MemberAccess	_negGraph [ imgIndx ] [ segId ] . features
>2998	Identifier	features
>2999	ArrayIndexing	_negGraph [ imgIndx ] [ segId ]
>3000	Identifier	segId
>3001	ArrayIndexing	_negGraph [ imgIndx ]
>3002	Identifier	imgIndx
>3003	Identifier	_negGraph
>3004	IncDecOp	 
>3005	IncDec	++
>3006	Identifier	segId
>3007	Condition	 
>3008	RelationalExpression	segId < _posGraph [ imgIndx ] . numNodes ( )
>3009	CallExpression	_posGraph [ imgIndx ] . numNodes ( )
>3010	ArgumentList	 
>3011	Callee	_posGraph [ imgIndx ] . numNodes
>3012	MemberAccess	_posGraph [ imgIndx ] . numNodes
>3013	Identifier	numNodes
>3014	ArrayIndexing	_posGraph [ imgIndx ]
>3015	Identifier	imgIndx
>3016	Identifier	_posGraph
>3017	Identifier	segId
>3018	ForInit	 
>3019	IdentifierDeclStatement	unsigned segId = 0 ;
>3020	IdentifierDecl	segId = 0
>3021	AssignmentExpr	segId = 0
>3022	PrimaryExpression	0
>3023	Identifier	segId
>3024	Identifier	segId
>3025	IdentifierDeclType	unsigned
>3026	IncDecOp	 
>3027	IncDec	++
>3028	Identifier	imgIndx
>3029	Condition	 
>3030	RelationalExpression	imgIndx < _posGraph . numImages ( )
>3031	CallExpression	_posGraph . numImages ( )
>3032	ArgumentList	 
>3033	Callee	_posGraph . numImages
>3034	MemberAccess	_posGraph . numImages
>3035	Identifier	numImages
>3036	Identifier	_posGraph
>3037	Identifier	imgIndx
>3038	ForInit	 
>3039	IdentifierDeclStatement	unsigned imgIndx = 0 ;
>3040	IdentifierDecl	imgIndx = 0
>3041	AssignmentExpr	imgIndx = 0
>3042	PrimaryExpression	0
>3043	Identifier	imgIndx
>3044	Identifier	imgIndx
>3045	IdentifierDeclType	unsigned
>3046	ForStatement	for ( unsigned imgIndx = 0 ; imgIndx < _posGraph . numImages ( ) ; imgIndx ++ )
>3047	CompoundStatement	 
>3048	ForStatement	for ( unsigned segId = 0 ; segId < _posGraph [ imgIndx ] . numNodes ( ) ; segId ++ )
>3049	CompoundStatement	 
>3050	ExpressionStatement	 
>3051	AssignmentExpr	_posGraph [ imgIndx ] [ segId ] . features = L * _graph [ imgIndx ] [ segId ] . features
>3052	MultiplicativeExpression	L * _graph [ imgIndx ] [ segId ] . features
>3053	MemberAccess	_graph [ imgIndx ] [ segId ] . features
>3054	Identifier	features
>3055	ArrayIndexing	_graph [ imgIndx ] [ segId ]
>3056	Identifier	segId
>3057	ArrayIndexing	_graph [ imgIndx ]
>3058	Identifier	imgIndx
>3059	Identifier	_graph
>3060	Identifier	L
>3061	MemberAccess	_posGraph [ imgIndx ] [ segId ] . features
>3062	Identifier	features
>3063	ArrayIndexing	_posGraph [ imgIndx ] [ segId ]
>3064	Identifier	segId
>3065	ArrayIndexing	_posGraph [ imgIndx ]
>3066	Identifier	imgIndx
>3067	Identifier	_posGraph
>3068	IncDecOp	 
>3069	IncDec	++
>3070	Identifier	segId
>3071	Condition	 
>3072	RelationalExpression	segId < _posGraph [ imgIndx ] . numNodes ( )
>3073	CallExpression	_posGraph [ imgIndx ] . numNodes ( )
>3074	ArgumentList	 
>3075	Callee	_posGraph [ imgIndx ] . numNodes
>3076	MemberAccess	_posGraph [ imgIndx ] . numNodes
>3077	Identifier	numNodes
>3078	ArrayIndexing	_posGraph [ imgIndx ]
>3079	Identifier	imgIndx
>3080	Identifier	_posGraph
>3081	Identifier	segId
>3082	ForInit	 
>3083	IdentifierDeclStatement	unsigned segId = 0 ;
>3084	IdentifierDecl	segId = 0
>3085	AssignmentExpr	segId = 0
>3086	PrimaryExpression	0
>3087	Identifier	segId
>3088	Identifier	segId
>3089	IdentifierDeclType	unsigned
>3090	IncDecOp	 
>3091	IncDec	++
>3092	Identifier	imgIndx
>3093	Condition	 
>3094	RelationalExpression	imgIndx < _posGraph . numImages ( )
>3095	CallExpression	_posGraph . numImages ( )
>3096	ArgumentList	 
>3097	Callee	_posGraph . numImages
>3098	MemberAccess	_posGraph . numImages
>3099	Identifier	numImages
>3100	Identifier	_posGraph
>3101	Identifier	imgIndx
>3102	ForInit	 
>3103	IdentifierDeclStatement	unsigned imgIndx = 0 ;
>3104	IdentifierDecl	imgIndx = 0
>3105	AssignmentExpr	imgIndx = 0
>3106	PrimaryExpression	0
>3107	Identifier	imgIndx
>3108	Identifier	imgIndx
>3109	IdentifierDeclType	unsigned
>3110	ExpressionStatement	 
>3111	Statement	 
>3112	Statement	 
>3113	Statement	 
>3114	Statement	 
>3115	Statement	 
>3116	Statement	 
>3117	Statement	 
>3118	Statement	 
>3119	Statement	 
>3120	Statement	 
>3121	Statement	 
>3122	Statement	 
>3123	Statement	 
>3124	Statement	 
>3125	Statement	 
>3126	Statement	 
>3127	ExpressionStatement	 
>3128	Identifier	DRWN_FCN_TIC
>3152	FunctionDef	drwnNNGraphLearner 
>3153	ParameterList	unsigned nCycle , unsigned maxIterations
>3154	Parameter	 
>3155	Identifier	maxIterations
>3156	ParameterType	unsigned
>3157	Parameter	 
>3158	Identifier	nCycle
>3159	ParameterType	unsigned
>3160	ReturnType	void
>3161	CompoundStatement	 
>3162	ExpressionStatement	 
>3163	Identifier	DRWN_FCN_TOC
>3164	ForStatement	for ( u . imgIndx = 0 ; u . imgIndx < _posGraph . numImages ( ) ; u . imgIndx ++ )
>3165	CompoundStatement	 
>3166	ExpressionStatement	 
>3167	Statement	 
>3168	Statement	 
>3169	Statement	 
>3170	Statement	 
>3171	Statement	 
>3172	Statement	 
>3173	Statement	 
>3174	Statement	 
>3175	Statement	 
>3176	Statement	 
>3177	ForStatement	for ( u . segId = 0 ; u . segId < _posGraph [ u . imgIndx ] . numNodes ( ) ; u . segId ++ )
>3178	CompoundStatement	 
>3179	ForStatement	for ( drwnNNGraphEdgeList 
>3180	CompoundStatement	 
>3181	ExpressionStatement	 
>3182	AssignmentExpr	localX += delta * delta . transpose ( )
>3183	MultiplicativeExpression	delta * delta . transpose ( )
>3184	CallExpression	delta . transpose ( )
>3185	ArgumentList	 
>3186	Callee	delta . transpose
>3187	MemberAccess	delta . transpose
>3188	Identifier	transpose
>3189	Identifier	delta
>3190	Identifier	delta
>3191	Identifier	localX
>3192	IdentifierDeclStatement	 
>3193	IdentifierDecl	delta ( _graph [ u ] . features - _graph [ v ] . features )
>3194	AdditiveExpression	_graph [ u ] . features - _graph [ v ] . features
>3195	MemberAccess	_graph [ v ] . features
>3196	Identifier	features
>3197	ArrayIndexing	_graph [ v ]
>3198	Identifier	v
>3199	Identifier	_graph
>3200	MemberAccess	_graph [ u ] . features
>3201	Identifier	features
>3202	ArrayIndexing	_graph [ u ]
>3203	Identifier	u
>3204	Identifier	_graph
>3205	Identifier	delta
>3206	IdentifierDeclType	const VectorXf
>3207	IdentifierDeclStatement	 
>3208	IdentifierDecl	v ( kt -> targetNode )
>3209	PtrMemberAccess	kt -> targetNode
>3210	Identifier	targetNode
>3211	Identifier	kt
>3212	Identifier	v
>3213	IdentifierDeclType	const drwnNNGraphNodeIndex
>3214	UnaryExpression	 
>3215	Identifier	kt
>3216	IncDec	++
>3217	Condition	 
>3218	EqualityExpression	kt != e . end ( )
>3219	CallExpression	e . end ( )
>3220	ArgumentList	 
>3221	Callee	e . end
>3222	MemberAccess	e . end
>3223	Identifier	end
>3224	Identifier	e
>3225	Identifier	kt
>3226	ForInit	 
>3227	IdentifierDeclStatement	drwnNNGraphEdgeList 
>3228	IdentifierDecl	kt = e . begin ( )
>3229	AssignmentExpr	kt = e . begin ( )
>3230	CallExpression	e . begin ( )
>3231	ArgumentList	 
>3232	Callee	e . begin
>3233	MemberAccess	e . begin
>3234	Identifier	begin
>3235	Identifier	e
>3236	Identifier	kt
>3237	Identifier	kt
>3238	IdentifierDeclType	drwnNNGraphEdgeList 
>3239	IdentifierDeclStatement	 
>3240	IdentifierDecl	& e = _posGraph [ u ] . edges
>3241	AssignmentExpr	& e = _posGraph [ u ] . edges
>3242	MemberAccess	_posGraph [ u ] . edges
>3243	Identifier	edges
>3244	ArrayIndexing	_posGraph [ u ]
>3245	Identifier	u
>3246	Identifier	_posGraph
>3247	Identifier	e
>3248	Identifier	e
>3249	IdentifierDeclType	const drwnNNGraphEdgeList &
>3250	IncDecOp	 
>3251	IncDec	++
>3252	MemberAccess	u . segId
>3253	Identifier	segId
>3254	Identifier	u
>3255	Condition	 
>3256	RelationalExpression	u . segId < _posGraph [ u . imgIndx ] . numNodes ( )
>3257	CallExpression	_posGraph [ u . imgIndx ] . numNodes ( )
>3258	ArgumentList	 
>3259	Callee	_posGraph [ u . imgIndx ] . numNodes
>3260	MemberAccess	_posGraph [ u . imgIndx ] . numNodes
>3261	Identifier	numNodes
>3262	ArrayIndexing	_posGraph [ u . imgIndx ]
>3263	MemberAccess	u . imgIndx
>3264	Identifier	imgIndx
>3265	Identifier	u
>3266	Identifier	_posGraph
>3267	MemberAccess	u . segId
>3268	Identifier	segId
>3269	Identifier	u
>3270	ForInit	 
>3271	AssignmentExpr	u . segId = 0
>3272	PrimaryExpression	0
>3273	MemberAccess	u . segId
>3274	Identifier	segId
>3275	Identifier	u
>3276	IdentifierDeclStatement	 
>3277	IdentifierDecl	localX = MatrixXf 
>3278	AssignmentExpr	localX = MatrixXf 
>3279	CallExpression	MatrixXf 
>3280	ArgumentList	_dim
>3281	Argument	_dim
>3282	Identifier	_dim
>3283	Argument	_dim
>3284	Identifier	_dim
>3285	Callee	MatrixXf 
>3286	Identifier	MatrixXf 
>3287	Identifier	localX
>3288	Identifier	localX
>3289	IdentifierDeclType	MatrixXf
>3290	IncDecOp	 
>3291	IncDec	++
>3292	MemberAccess	u . imgIndx
>3293	Identifier	imgIndx
>3294	Identifier	u
>3295	Condition	 
>3296	RelationalExpression	u . imgIndx < _posGraph . numImages ( )
>3297	CallExpression	_posGraph . numImages ( )
>3298	ArgumentList	 
>3299	Callee	_posGraph . numImages
>3300	MemberAccess	_posGraph . numImages
>3301	Identifier	numImages
>3302	Identifier	_posGraph
>3303	MemberAccess	u . imgIndx
>3304	Identifier	imgIndx
>3305	Identifier	u
>3306	ForInit	 
>3307	AssignmentExpr	u . imgIndx = 0
>3308	PrimaryExpression	0
>3309	MemberAccess	u . imgIndx
>3310	Identifier	imgIndx
>3311	Identifier	u
>3312	IdentifierDeclStatement	 
>3313	IdentifierDecl	u ( 0 , 0 )
>3314	Expression	0 , 0
>3315	PrimaryExpression	0
>3316	PrimaryExpression	0
>3317	Identifier	u
>3318	IdentifierDeclType	drwnNNGraphNodeIndex
>3319	ExpressionStatement	 
>3320	AssignmentExpr	_X = MatrixXd 
>3321	CallExpression	MatrixXd 
>3322	ArgumentList	_dim
>3323	Argument	_dim
>3324	Identifier	_dim
>3325	Argument	_dim
>3326	Identifier	_dim
>3327	Callee	MatrixXd 
>3328	Identifier	MatrixXd 
>3329	Identifier	_X
>3330	ExpressionStatement	 
>3331	CallExpression	DRWN_LOG_VERBOSE ( \"...caching data matrix of size \" << _dim << \"-by-\" << _dim )
>3332	ArgumentList	\"...caching data matrix of size \" << _dim << \"-by-\" << _dim
>3333	Argument	\"...caching data matrix of size \" << _dim << \"-by-\" << _dim
>3334	ShiftExpression	\"...caching data matrix of size \" << _dim << \"-by-\" << _dim
>3335	ShiftExpression	_dim << \"-by-\" << _dim
>3336	ShiftExpression	\"-by-\" << _dim
>3337	Identifier	_dim
>3338	PrimaryExpression	\"-by-\"
>3339	Identifier	_dim
>3340	PrimaryExpression	\"...caching data matrix of size \"
>3341	Callee	DRWN_LOG_VERBOSE
>3342	Identifier	DRWN_LOG_VERBOSE
>3343	ForStatement	for ( unsigned nIterations = 0 ; nIterations < maxIterations ; nIterations ++ )
>3344	CompoundStatement	 
>3345	ExpressionStatement	 
>3346	CallExpression	DRWN_LOG_MESSAGE ( \"...search iteration \" << nCycle << \".\" << nIterations << \"; energy (+) \" << e_pos . first << \" (\
>3347	ArgumentList	\"...search iteration \" << nCycle << \".\" << nIterations << \"; energy (+) \" << e_pos . first << \" (-) \" << e_neg . \
>3348	Argument	\"...search iteration \" << nCycle << \".\" << nIterations << \"; energy (+) \" << e_pos . first << \" (-) \" << e_neg . \
>3349	ShiftExpression	\"...search iteration \" << nCycle << \".\" << nIterations << \"; energy (+) \" << e_pos . first << \" (-) \" << \
>3350	ShiftExpression	nCycle << \".\" << nIterations << \"; energy (+) \" << e_pos . first << \" (-) \" << e_neg . first
>3351	ShiftExpression	\".\" << nIterations << \"; energy (+) \" << e_pos . first << \" (-) \" << e_neg . first
>3352	ShiftExpression	nIterations << \"; energy (+) \" << e_pos . first << \" (-) \" << e_neg . first
>3353	ShiftExpression	\"; energy (+) \" << e_pos . first << \" (-) \" << e_neg . first
>3354	ShiftExpression	e_pos . first << \" (-) \" << e_neg . first
>3355	ShiftExpression	\" (-) \" << e_neg . first
>3356	MemberAccess	e_neg . first
>3357	Identifier	first
>3358	Identifier	e_neg
>3359	PrimaryExpression	\" (-) \"
>3360	MemberAccess	e_pos . first
>3361	Identifier	first
>3362	Identifier	e_pos
>3363	PrimaryExpression	\"; energy (+) \"
>3364	Identifier	nIterations
>3365	PrimaryExpression	\".\"
>3366	Identifier	nCycle
>3367	PrimaryExpression	\"...search iteration \"
>3368	Callee	DRWN_LOG_MESSAGE
>3369	Identifier	DRWN_LOG_MESSAGE
>3370	IdentifierDeclStatement	 
>3371	IdentifierDecl	e_neg = _negGraph . energy ( )
>3372	AssignmentExpr	e_neg = _negGraph . energy ( )
>3373	CallExpression	_negGraph . energy ( )
>3374	ArgumentList	 
>3375	Callee	_negGraph . energy
>3376	MemberAccess	_negGraph . energy
>3377	Identifier	energy
>3378	Identifier	_negGraph
>3379	Identifier	e_neg
>3380	Identifier	e_neg
>3381	IdentifierDeclType	pair < double , double >
>3382	IdentifierDeclStatement	 
>3383	IdentifierDecl	e_pos = _posGraph . energy ( )
>3384	AssignmentExpr	e_pos = _posGraph . energy ( )
>3385	CallExpression	_posGraph . energy ( )
>3386	ArgumentList	 
>3387	Callee	_posGraph . energy
>3388	MemberAccess	_posGraph . energy
>3389	Identifier	energy
>3390	Identifier	_posGraph
>3391	Identifier	e_pos
>3392	Identifier	e_pos
>3393	IdentifierDeclType	pair < double , double >
>3394	ExpressionStatement	 
>3395	CallExpression	drwnNNGraphMoves 
>3396	ArgumentList	_negGraph
>3397	Argument	drwnNNGraphLabelsNotEqualMetric ( )
>3398	CallExpression	drwnNNGraphLabelsNotEqualMetric ( )
>3399	ArgumentList	 
>3400	Callee	drwnNNGraphLabelsNotEqualMetric
>3401	Identifier	drwnNNGraphLabelsNotEqualMetric
>3402	Argument	_negGraph
>3403	Identifier	_negGraph
>3404	Callee	drwnNNGraphMoves 
>3405	Identifier	drwnNNGraphMoves 
>3406	ExpressionStatement	 
>3407	CallExpression	drwnNNGraphMoves 
>3408	ArgumentList	_posGraph
>3409	Argument	drwnNNGraphLabelsEqualMetric ( )
>3410	CallExpression	drwnNNGraphLabelsEqualMetric ( )
>3411	ArgumentList	 
>3412	Callee	drwnNNGraphLabelsEqualMetric
>3413	Identifier	drwnNNGraphLabelsEqualMetric
>3414	Argument	_posGraph
>3415	Identifier	_posGraph
>3416	Callee	drwnNNGraphMoves 
>3417	Identifier	drwnNNGraphMoves 
>3418	IncDecOp	 
>3419	IncDec	++
>3420	Identifier	nIterations
>3421	Condition	 
>3422	RelationalExpression	nIterations < maxIterations
>3423	Identifier	maxIterations
>3424	Identifier	nIterations
>3425	ForInit	 
>3426	IdentifierDeclStatement	unsigned nIterations = 0 ;
>3427	IdentifierDecl	nIterations = 0
>3428	AssignmentExpr	nIterations = 0
>3429	PrimaryExpression	0
>3430	Identifier	nIterations
>3431	Identifier	nIterations
>3432	IdentifierDeclType	unsigned
>3433	ExpressionStatement	 
>3434	Identifier	DRWN_FCN_TIC
>3475	FunctionDef	drwnNNGraphLearner 
>3476	ParameterList	 
>3477	ReturnType	void
>3478	CompoundStatement	 
>3482	FunctionDef	drwnNNGraphLearner 
>3483	ParameterList	 
>3484	ReturnType	void
>3485	CompoundStatement	 
>3489	FunctionDef	drwnNNGraphLearner 
>3490	ParameterList	 
>3491	ReturnType	MatrixXd
>3492	CompoundStatement	 
>3493	ReturnStatement	 
>3494	MultiplicativeExpression	( 1.0 / ( double ) _dim ) * L
>3495	Identifier	L
>3496	MultiplicativeExpression	1.0 / ( double ) _dim
>3497	CastExpression	( double ) _dim
>3498	Identifier	_dim
>3499	CastTarget	double
>3500	PrimaryExpression	1.0
>3501	ForStatement	for ( unsigned i = 0 ; i < _dim ; i ++ )
>3502	CompoundStatement	 
>3503	IfStatement	if ( sigma < DRWN_DBL_MIN )
>3504	ElseStatement	else
>3505	CompoundStatement	 
>3506	ExpressionStatement	 
>3507	AssignmentExpr	L ( i , i ) = 1.0 / sqrt ( sigma )
>3508	MultiplicativeExpression	1.0 / sqrt ( sigma )
>3509	CallExpression	sqrt ( sigma )
>3510	ArgumentList	sigma
>3511	Argument	sigma
>3512	Identifier	sigma
>3513	Callee	sqrt
>3514	Identifier	sqrt
>3515	PrimaryExpression	1.0
>3516	CallExpression	L ( i , i )
>3517	ArgumentList	i
>3518	Argument	i
>3519	Identifier	i
>3520	Argument	i
>3521	Identifier	i
>3522	Callee	L
>3523	Identifier	L
>3524	CompoundStatement	 
>3525	ExpressionStatement	 
>3526	AssignmentExpr	L ( i , i ) = 0.0
>3527	PrimaryExpression	0.0
>3528	CallExpression	L ( i , i )
>3529	ArgumentList	i
>3530	Argument	i
>3531	Identifier	i
>3532	Argument	i
>3533	Identifier	i
>3534	Callee	L
>3535	Identifier	L
>3536	Condition	 
>3537	RelationalExpression	sigma < DRWN_DBL_MIN
>3538	Identifier	DRWN_DBL_MIN
>3539	Identifier	sigma
>3540	IdentifierDeclStatement	 
>3541	IdentifierDecl	sigma = stats . sum2 ( i , i ) / ( stats . count ( ) + DRWN_DBL_MIN ) - mu * mu
>3542	AssignmentExpr	sigma = stats . sum2 ( i , i ) / ( stats . count ( ) + DRWN_DBL_MIN ) - mu * mu
>3543	AdditiveExpression	stats . sum2 ( i , i ) / ( stats . count ( ) + DRWN_DBL_MIN ) - mu * mu
>3544	MultiplicativeExpression	mu * mu
>3545	Identifier	mu
>3546	Identifier	mu
>3547	MultiplicativeExpression	stats . sum2 ( i , i ) / ( stats . count ( ) + DRWN_DBL_MIN )
>3548	AdditiveExpression	stats . count ( ) + DRWN_DBL_MIN
>3549	Identifier	DRWN_DBL_MIN
>3550	CallExpression	stats . count ( )
>3551	ArgumentList	 
>3552	Callee	stats . count
>3553	MemberAccess	stats . count
>3554	Identifier	count
>3555	Identifier	stats
>3556	CallExpression	stats . sum2 ( i , i )
>3557	ArgumentList	i
>3558	Argument	i
>3559	Identifier	i
>3560	Argument	i
>3561	Identifier	i
>3562	Callee	stats . sum2
>3563	MemberAccess	stats . sum2
>3564	Identifier	sum2
>3565	Identifier	stats
>3566	Identifier	sigma
>3567	Identifier	sigma
>3568	IdentifierDeclType	const double
>3569	IdentifierDeclStatement	 
>3570	IdentifierDecl	mu = stats . sum ( i ) / ( stats . count ( ) + DRWN_DBL_MIN )
>3571	AssignmentExpr	mu = stats . sum ( i ) / ( stats . count ( ) + DRWN_DBL_MIN )
>3572	MultiplicativeExpression	stats . sum ( i ) / ( stats . count ( ) + DRWN_DBL_MIN )
>3573	AdditiveExpression	stats . count ( ) + DRWN_DBL_MIN
>3574	Identifier	DRWN_DBL_MIN
>3575	CallExpression	stats . count ( )
>3576	ArgumentList	 
>3577	Callee	stats . count
>3578	MemberAccess	stats . count
>3579	Identifier	count
>3580	Identifier	stats
>3581	CallExpression	stats . sum ( i )
>3582	ArgumentList	i
>3583	Argument	i
>3584	Identifier	i
>3585	Callee	stats . sum
>3586	MemberAccess	stats . sum
>3587	Identifier	sum
>3588	Identifier	stats
>3589	Identifier	mu
>3590	Identifier	mu
>3591	IdentifierDeclType	const double
>3592	IncDecOp	 
>3593	IncDec	++
>3594	Identifier	i
>3595	Condition	 
>3596	RelationalExpression	i < _dim
>3597	Identifier	_dim
>3598	Identifier	i
>3599	ForInit	 
>3600	IdentifierDeclStatement	unsigned i = 0 ;
>3601	IdentifierDecl	i = 0
>3602	AssignmentExpr	i = 0
>3603	PrimaryExpression	0
>3604	Identifier	i
>3605	Identifier	i
>3606	IdentifierDeclType	unsigned
>3607	IdentifierDeclStatement	 
>3608	IdentifierDecl	L = MatrixXd 
>3609	AssignmentExpr	L = MatrixXd 
>3610	CallExpression	MatrixXd 
>3611	ArgumentList	_dim
>3612	Argument	_dim
>3613	Identifier	_dim
>3614	Argument	_dim
>3615	Identifier	_dim
>3616	Callee	MatrixXd 
>3617	Identifier	MatrixXd 
>3618	Identifier	L
>3619	Identifier	L
>3620	IdentifierDeclType	MatrixXd
>3621	ForStatement	for ( u . imgIndx = 0 ; u . imgIndx < _graph . numImages ( ) ; u . imgIndx ++ )
>3622	CompoundStatement	 
>3623	ForStatement	for ( u . segId = 0 ; u . segId < _graph [ u . imgIndx ] . numNodes ( ) ; u . segId ++ )
>3624	CompoundStatement	 
>3625	ExpressionStatement	 
>3626	CallExpression	stats . accumulate ( x )
>3627	ArgumentList	x
>3628	Argument	x
>3629	Identifier	x
>3630	Callee	stats . accumulate
>3631	MemberAccess	stats . accumulate
>3632	Identifier	accumulate
>3633	Identifier	stats
>3634	ExpressionStatement	 
>3635	Statement	 
>3636	Statement	 
>3637	Statement	 
>3638	Statement	 
>3639	Statement	 
>3640	Statement	 
>3641	Statement	 
>3642	Statement	 
>3643	Statement	 
>3644	Statement	 
>3645	Statement	 
>3646	Statement	 
>3647	Statement	 
>3648	Statement	 
>3649	Statement	 
>3650	Statement	 
>3651	Statement	 
>3652	Statement	 
>3653	Statement	 
>3654	Statement	 
>3655	Statement	 
>3656	Statement	 
>3657	Statement	 
>3658	Statement	 
>3659	Statement	 
>3660	Statement	 
>3661	Statement	 
>3662	Statement	 
>3663	Statement	 
>3664	Statement	 
>3665	Statement	 
>3666	Statement	 
>3667	Statement	 
>3668	IncDecOp	 
>3669	IncDec	++
>3670	MemberAccess	u . segId
>3671	Identifier	segId
>3672	Identifier	u
>3673	Condition	 
>3674	RelationalExpression	u . segId < _graph [ u . imgIndx ] . numNodes ( )
>3675	CallExpression	_graph [ u . imgIndx ] . numNodes ( )
>3676	ArgumentList	 
>3677	Callee	_graph [ u . imgIndx ] . numNodes
>3678	MemberAccess	_graph [ u . imgIndx ] . numNodes
>3679	Identifier	numNodes
>3680	ArrayIndexing	_graph [ u . imgIndx ]
>3681	MemberAccess	u . imgIndx
>3682	Identifier	imgIndx
>3683	Identifier	u
>3684	Identifier	_graph
>3685	MemberAccess	u . segId
>3686	Identifier	segId
>3687	Identifier	u
>3688	ForInit	 
>3689	AssignmentExpr	u . segId = 0
>3690	PrimaryExpression	0
>3691	MemberAccess	u . segId
>3692	Identifier	segId
>3693	Identifier	u
>3694	IncDecOp	 
>3695	IncDec	++
>3696	MemberAccess	u . imgIndx
>3697	Identifier	imgIndx
>3698	Identifier	u
>3699	Condition	 
>3700	RelationalExpression	u . imgIndx < _graph . numImages ( )
>3701	CallExpression	_graph . numImages ( )
>3702	ArgumentList	 
>3703	Callee	_graph . numImages
>3704	MemberAccess	_graph . numImages
>3705	Identifier	numImages
>3706	Identifier	_graph
>3707	MemberAccess	u . imgIndx
>3708	Identifier	imgIndx
>3709	Identifier	u
>3710	ForInit	 
>3711	AssignmentExpr	u . imgIndx = 0
>3712	PrimaryExpression	0
>3713	MemberAccess	u . imgIndx
>3714	Identifier	imgIndx
>3715	Identifier	u
>3716	IdentifierDeclStatement	 
>3717	IdentifierDecl	u ( 0 , 0 )
>3718	Expression	0 , 0
>3719	PrimaryExpression	0
>3720	PrimaryExpression	0
>3721	Identifier	u
>3722	IdentifierDeclType	drwnNNGraphNodeIndex
>3723	IdentifierDeclStatement	 
>3724	IdentifierDecl	x ( _dim )
>3725	Identifier	_dim
>3726	Identifier	x
>3727	IdentifierDeclType	vector < double >
>3728	IdentifierDeclStatement	 
>3729	IdentifierDecl	stats ( _dim )
>3730	Identifier	_dim
>3731	Identifier	stats
>3732	IdentifierDeclType	drwnSuffStats
>3758	FunctionDef	drwnNNGraphMLearner 
>3759	ParameterList	const drwnNNGraph & graph , double lambda
>3760	Parameter	 
>3761	Identifier	lambda
>3762	ParameterType	double
>3763	Parameter	 
>3764	Identifier	graph
>3765	ParameterType	const drwnNNGraph &
>3766	CompoundStatement	 
>3767	ExpressionStatement	 
>3768	CallExpression	setTransform ( initializeTransform ( ) )
>3769	ArgumentList	initializeTransform ( )
>3770	Argument	initializeTransform ( )
>3771	CallExpression	initializeTransform ( )
>3772	ArgumentList	 
>3773	Callee	initializeTransform
>3774	Identifier	initializeTransform
>3775	Callee	setTransform
>3776	Identifier	setTransform
>3777	ExpressionStatement	 
>3778	AssignmentExpr	_G = MatrixXd 
>3779	CallExpression	MatrixXd 
>3780	ArgumentList	_dim
>3781	Argument	_dim
>3782	Identifier	_dim
>3783	Argument	_dim
>3784	Identifier	_dim
>3785	Callee	MatrixXd 
>3786	Identifier	MatrixXd 
>3787	Identifier	_G
>3788	ExpressionStatement	 
>3789	CallExpression	_updateCache . initialize ( graph , drwnNNGraphLearnViolatedConstraints ( ) )
>3790	ArgumentList	graph
>3791	Argument	drwnNNGraphLearnViolatedConstraints ( )
>3792	CallExpression	drwnNNGraphLearnViolatedConstraints ( )
>3793	ArgumentList	 
>3794	Callee	drwnNNGraphLearnViolatedConstraints
>3795	Identifier	drwnNNGraphLearnViolatedConstraints
>3796	Argument	graph
>3797	Identifier	graph
>3798	Callee	_updateCache . initialize
>3799	MemberAccess	_updateCache . initialize
>3800	Identifier	initialize
>3801	Identifier	_updateCache
>3813	FunctionDef	drwnNNGraphMLearner 
>3814	ParameterList	 
>3815	CompoundStatement	 
>3819	FunctionDef	drwnNNGraphMLearner 
>3820	ParameterList	const MatrixXd & L
>3821	Parameter	 
>3822	Identifier	L
>3823	ParameterType	const MatrixXd &
>3824	ReturnType	void
>3825	CompoundStatement	 
>3826	ExpressionStatement	 
>3827	CallExpression	updateGraphFeatures ( )
>3828	ArgumentList	 
>3829	Callee	updateGraphFeatures
>3830	Identifier	updateGraphFeatures
>3831	ExpressionStatement	 
>3832	AssignmentExpr	_M = L . transpose ( ) * L
>3833	MultiplicativeExpression	L . transpose ( ) * L
>3834	Identifier	L
>3835	CallExpression	L . transpose ( )
>3836	ArgumentList	 
>3837	Callee	L . transpose
>3838	MemberAccess	L . transpose
>3839	Identifier	transpose
>3840	Identifier	L
>3841	Identifier	_M
>3842	ExpressionStatement	 
>3843	CallExpression	DRWN_ASSERT ( ( L . rows ( ) == ( int ) _dim ) && ( L . cols ( ) == ( int ) _dim ) )
>3844	ArgumentList	( L . rows ( ) == ( int ) _dim ) && ( L . cols ( ) == ( int ) _dim )
>3845	Argument	( L . rows ( ) == ( int ) _dim ) && ( L . cols ( ) == ( int ) _dim )
>3846	AndExpression	( L . rows ( ) == ( int ) _dim ) && ( L . cols ( ) == ( int ) _dim )
>3847	EqualityExpression	L . cols ( ) == ( int ) _dim
>3848	CastExpression	( int ) _dim
>3849	Identifier	_dim
>3850	CastTarget	int
>3851	CallExpression	L . cols ( )
>3852	ArgumentList	 
>3853	Callee	L . cols
>3854	MemberAccess	L . cols
>3855	Identifier	cols
>3856	Identifier	L
>3857	EqualityExpression	L . rows ( ) == ( int ) _dim
>3858	CastExpression	( int ) _dim
>3859	Identifier	_dim
>3860	CastTarget	int
>3861	CallExpression	L . rows ( )
>3862	ArgumentList	 
>3863	Callee	L . rows
>3864	MemberAccess	L . rows
>3865	Identifier	rows
>3866	Identifier	L
>3867	Callee	DRWN_ASSERT
>3868	Identifier	DRWN_ASSERT
>3878	FunctionDef	drwnNNGraphMLearner 
>3879	ParameterList	 
>3880	ReturnType	MatrixXd
>3881	CompoundStatement	 
>3882	ReturnStatement	 
>3883	CallExpression	_M . llt ( ) . matrixU ( )
>3884	ArgumentList	 
>3885	Callee	_M . llt ( ) . matrixU
>3886	MemberAccess	_M . llt ( ) . matrixU
>3887	Identifier	matrixU
>3888	CallExpression	_M . llt ( )
>3889	ArgumentList	 
>3890	Callee	_M . llt
>3891	MemberAccess	_M . llt
>3892	Identifier	llt
>3893	Identifier	_M
>3900	FunctionDef	drwnNNGraphMLearner 
>3901	ParameterList	 
>3902	ReturnType	MatrixXd
>3903	CompoundStatement	 
>3904	ReturnStatement	 
>3905	AdditiveExpression	G + _G
>3906	Identifier	_G
>3907	Identifier	G
>3908	ExpressionStatement	 
>3909	Identifier	DRWN_FCN_TOC
>3910	ExpressionStatement	 
>3911	CallExpression	jobs . clear ( )
>3912	ArgumentList	 
>3913	Callee	jobs . clear
>3914	MemberAccess	jobs . clear
>3915	Identifier	clear
>3916	Identifier	jobs
>3917	ForStatement	for ( unsigned i = 0 ; i < jobs . size ( ) ; i ++ )
>3918	CompoundStatement	 
>3919	ExpressionStatement	 
>3920	ArrayIndexing	jobs [ i ]
>3921	Identifier	i
>3922	Identifier	jobs
>3923	Statement	 
>3924	IncDecOp	 
>3925	IncDec	++
>3926	Identifier	i
>3927	Condition	 
>3928	RelationalExpression	i < jobs . size ( )
>3929	CallExpression	jobs . size ( )
>3930	ArgumentList	 
>3931	Callee	jobs . size
>3932	MemberAccess	jobs . size
>3933	Identifier	size
>3934	Identifier	jobs
>3935	Identifier	i
>3936	ForInit	 
>3937	IdentifierDeclStatement	unsigned i = 0 ;
>3938	IdentifierDecl	i = 0
>3939	AssignmentExpr	i = 0
>3940	PrimaryExpression	0
>3941	Identifier	i
>3942	Identifier	i
>3943	IdentifierDeclType	unsigned
>3944	ExpressionStatement	 
>3945	CallExpression	threadPool . finish ( )
>3946	ArgumentList	 
>3947	Callee	threadPool . finish
>3948	MemberAccess	threadPool . finish
>3949	Identifier	finish
>3950	Identifier	threadPool
>3951	ForStatement	for ( unsigned i = 0 ; i < nJobs ; i ++ )
>3952	CompoundStatement	 
>3953	ExpressionStatement	 
>3954	CallExpression	threadPool . addJob ( jobs [ i ] )
>3955	ArgumentList	jobs [ i ]
>3956	Argument	jobs [ i ]
>3957	ArrayIndexing	jobs [ i ]
>3958	Identifier	i
>3959	Identifier	jobs
>3960	Callee	threadPool . addJob
>3961	MemberAccess	threadPool . addJob
>3962	Identifier	addJob
>3963	Identifier	threadPool
>3964	ExpressionStatement	 
>3965	AssignmentExpr	jobs [ i ] = new drwnNNGraphSubGradientThread ( this , & _G , & _updateCache , imgIndxes [ i ] )
>3966	Expression	this , & _G , & _updateCache , imgIndxes [ i ]
>3967	Expression	& _G , & _updateCache , imgIndxes [ i ]
>3968	Expression	& _updateCache , imgIndxes [ i ]
>3969	ArrayIndexing	imgIndxes [ i ]
>3970	Identifier	i
>3971	Identifier	imgIndxes
>3972	UnaryOp	& _updateCache
>3973	Identifier	_updateCache
>3974	UnaryOperator	&
>3975	UnaryOp	& _G
>3976	Identifier	_G
>3977	UnaryOperator	&
>3978	Identifier	this
>3979	ArrayIndexing	jobs [ i ]
>3980	Identifier	i
>3981	Identifier	jobs
>3982	IncDecOp	 
>3983	IncDec	++
>3984	Identifier	i
>3985	Condition	 
>3986	RelationalExpression	i < nJobs
>3987	Identifier	nJobs
>3988	Identifier	i
>3989	ForInit	 
>3990	IdentifierDeclStatement	unsigned i = 0 ;
>3991	IdentifierDecl	i = 0
>3992	AssignmentExpr	i = 0
>3993	PrimaryExpression	0
>3994	Identifier	i
>3995	Identifier	i
>3996	IdentifierDeclType	unsigned
>3997	IdentifierDeclStatement	 
>3998	IdentifierDecl	jobs ( nJobs )
>3999	Identifier	nJobs
>4000	Identifier	jobs
>4001	IdentifierDeclType	vector < drwnNNGraphSubGradientThread * >
>4002	ExpressionStatement	 
>4003	CallExpression	threadPool . start ( )
>4004	ArgumentList	 
>4005	Callee	threadPool . start
>4006	MemberAccess	threadPool . start
>4007	Identifier	start
>4008	Identifier	threadPool
>4009	IdentifierDeclStatement	 
>4010	IdentifierDecl	threadPool ( nJobs )
>4011	Identifier	nJobs
>4012	Identifier	threadPool
>4013	IdentifierDeclType	drwnThreadPool
>4014	ForStatement	for ( unsigned imgIndx = 0 ; imgIndx < _posGraph . numImages ( ) ; imgIndx ++ )
>4015	CompoundStatement	 
>4016	ExpressionStatement	 
>4017	CallExpression	imgIndxes [ imgIndx % nJobs ] . insert ( imgIndx )
>4018	ArgumentList	imgIndx
>4019	Argument	imgIndx
>4020	Identifier	imgIndx
>4021	Callee	imgIndxes [ imgIndx % nJobs ] . insert
>4022	MemberAccess	imgIndxes [ imgIndx % nJobs ] . insert
>4023	Identifier	insert
>4024	ArrayIndexing	imgIndxes [ imgIndx % nJobs ]
>4025	MultiplicativeExpression	imgIndx % nJobs
>4026	Identifier	nJobs
>4027	Identifier	imgIndx
>4028	Identifier	imgIndxes
>4029	IncDecOp	 
>4030	IncDec	++
>4031	Identifier	imgIndx
>4032	Condition	 
>4033	RelationalExpression	imgIndx < _posGraph . numImages ( )
>4034	CallExpression	_posGraph . numImages ( )
>4035	ArgumentList	 
>4036	Callee	_posGraph . numImages
>4037	MemberAccess	_posGraph . numImages
>4038	Identifier	numImages
>4039	Identifier	_posGraph
>4040	Identifier	imgIndx
>4041	ForInit	 
>4042	IdentifierDeclStatement	unsigned imgIndx = 0 ;
>4043	IdentifierDecl	imgIndx = 0
>4044	AssignmentExpr	imgIndx = 0
>4045	PrimaryExpression	0
>4046	Identifier	imgIndx
>4047	Identifier	imgIndx
>4048	IdentifierDeclType	unsigned
>4049	IdentifierDeclStatement	 
>4050	IdentifierDecl	imgIndxes ( nJobs )
>4051	Identifier	nJobs
>4052	Identifier	imgIndxes
>4053	IdentifierDeclType	vector < set < unsigned > >
>4054	IdentifierDeclStatement	 
>4055	IdentifierDecl	nJobs = std 
>4056	AssignmentExpr	nJobs = std 
>4057	CallExpression	std 
>4058	ArgumentList	( unsigned ) _posGraph . numImages ( )
>4059	Argument	std 
>4060	CallExpression	std 
>4061	ArgumentList	( unsigned ) 1
>4062	Argument	drwnThreadPool 
>4063	Identifier	drwnThreadPool 
>4064	Argument	( unsigned ) 1
>4065	CastExpression	( unsigned ) 1
>4066	PrimaryExpression	1
>4067	CastTarget	unsigned
>4068	Callee	std 
>4069	Identifier	std 
>4070	Argument	( unsigned ) _posGraph . numImages ( )
>4071	CastExpression	( unsigned ) _posGraph . numImages ( )
>4072	CallExpression	_posGraph . numImages ( )
>4073	ArgumentList	 
>4074	Callee	_posGraph . numImages
>4075	MemberAccess	_posGraph . numImages
>4076	Identifier	numImages
>4077	Identifier	_posGraph
>4078	CastTarget	unsigned
>4079	Callee	std 
>4080	Identifier	std 
>4081	Identifier	nJobs
>4082	Identifier	nJobs
>4083	IdentifierDeclType	unsigned
>4084	Statement	 
>4085	IdentifierDeclStatement	 
>4086	IdentifierDecl	G = _lambda * _X
>4087	AssignmentExpr	G = _lambda * _X
>4088	MultiplicativeExpression	_lambda * _X
>4089	Identifier	_X
>4090	Identifier	_lambda
>4091	Identifier	G
>4092	Identifier	G
>4093	IdentifierDeclType	MatrixXd
>4094	ExpressionStatement	 
>4095	Identifier	DRWN_FCN_TIC
>4123	FunctionDef	drwnNNGraphMLearner 
>4124	ParameterList	const MatrixXd & G , double alpha
>4125	Parameter	 
>4126	Identifier	alpha
>4127	ParameterType	double
>4128	Parameter	 
>4129	Identifier	G
>4130	ParameterType	const MatrixXd &
>4131	ReturnType	void
>4132	CompoundStatement	 
>4133	ExpressionStatement	 
>4134	Identifier	DRWN_FCN_TOC
>4135	IfStatement	if ( ( d . array ( ) < 0.0 ) . any ( ) )
>4136	CompoundStatement	 
>4137	ExpressionStatement	 
>4138	AssignmentExpr	_M = V * d . cwiseMax ( VectorXd 
>4139	MultiplicativeExpression	V * d . cwiseMax ( VectorXd 
>4140	MultiplicativeExpression	d . cwiseMax ( VectorXd 
>4141	CallExpression	V . inverse ( )
>4142	ArgumentList	 
>4143	Callee	V . inverse
>4144	MemberAccess	V . inverse
>4145	Identifier	inverse
>4146	Identifier	V
>4147	CallExpression	d . cwiseMax ( VectorXd 
>4148	ArgumentList	 
>4149	Callee	d . cwiseMax ( VectorXd 
>4150	MemberAccess	d . cwiseMax ( VectorXd 
>4151	Identifier	asDiagonal
>4152	CallExpression	d . cwiseMax ( VectorXd 
>4153	ArgumentList	VectorXd 
>4154	Argument	VectorXd 
>4155	CallExpression	VectorXd 
>4156	ArgumentList	d . rows ( )
>4157	Argument	DRWN_EPSILON
>4158	Identifier	DRWN_EPSILON
>4159	Argument	d . rows ( )
>4160	CallExpression	d . rows ( )
>4161	ArgumentList	 
>4162	Callee	d . rows
>4163	MemberAccess	d . rows
>4164	Identifier	rows
>4165	Identifier	d
>4166	Callee	VectorXd 
>4167	Identifier	VectorXd 
>4168	Callee	d . cwiseMax
>4169	MemberAccess	d . cwiseMax
>4170	Identifier	cwiseMax
>4171	Identifier	d
>4172	Identifier	V
>4173	Identifier	_M
>4174	IdentifierDeclStatement	 
>4175	IdentifierDecl	V = es . eigenvectors ( )
>4176	AssignmentExpr	V = es . eigenvectors ( )
>4177	CallExpression	es . eigenvectors ( )
>4178	ArgumentList	 
>4179	Callee	es . eigenvectors
>4180	MemberAccess	es . eigenvectors
>4181	Identifier	eigenvectors
>4182	Identifier	es
>4183	Identifier	V
>4184	Identifier	V
>4185	IdentifierDeclType	const MatrixXd
>4186	Condition	 
>4187	CallExpression	( d . array ( ) < 0.0 ) . any ( )
>4188	ArgumentList	 
>4189	Callee	( d . array ( ) < 0.0 ) . any
>4190	MemberAccess	( d . array ( ) < 0.0 ) . any
>4191	Identifier	any
>4192	RelationalExpression	d . array ( ) < 0.0
>4193	PrimaryExpression	0.0
>4194	CallExpression	d . array ( )
>4195	ArgumentList	 
>4196	Callee	d . array
>4197	MemberAccess	d . array
>4198	Identifier	array
>4199	Identifier	d
>4200	IdentifierDeclStatement	 
>4201	IdentifierDecl	d = es . eigenvalues ( ) . real ( )
>4202	AssignmentExpr	d = es . eigenvalues ( ) . real ( )
>4203	CallExpression	es . eigenvalues ( ) . real ( )
>4204	ArgumentList	 
>4205	Callee	es . eigenvalues ( ) . real
>4206	MemberAccess	es . eigenvalues ( ) . real
>4207	Identifier	real
>4208	CallExpression	es . eigenvalues ( )
>4209	ArgumentList	 
>4210	Callee	es . eigenvalues
>4211	MemberAccess	es . eigenvalues
>4212	Identifier	eigenvalues
>4213	Identifier	es
>4214	Identifier	d
>4215	Identifier	d
>4216	IdentifierDeclType	const VectorXd
>4217	ExpressionStatement	 
>4218	CallExpression	es . compute ( _M )
>4219	ArgumentList	_M
>4220	Argument	_M
>4221	Identifier	_M
>4222	Callee	es . compute
>4223	MemberAccess	es . compute
>4224	Identifier	compute
>4225	Identifier	es
>4226	IdentifierDeclStatement	 
>4227	IdentifierDecl	es
>4228	Identifier	es
>4229	IdentifierDeclType	SelfAdjointEigenSolver < MatrixXd >
>4230	ExpressionStatement	 
>4231	AssignmentExpr	_M -= alpha * G
>4232	MultiplicativeExpression	alpha * G
>4233	Identifier	G
>4234	Identifier	alpha
>4235	Identifier	_M
>4236	ExpressionStatement	 
>4237	Identifier	DRWN_FCN_TIC
>4258	FunctionDef	drwnNNGraphMLearner 
>4259	ParameterList	 
>4260	ReturnType	void
>4261	CompoundStatement	 
>4262	ExpressionStatement	 
>4263	AssignmentExpr	_G = MatrixXd 
>4264	CallExpression	MatrixXd 
>4265	ArgumentList	_dim
>4266	Argument	_dim
>4267	Identifier	_dim
>4268	Argument	_dim
>4269	Identifier	_dim
>4270	Callee	MatrixXd 
>4271	Identifier	MatrixXd 
>4272	Identifier	_G
>4273	ExpressionStatement	 
>4274	CallExpression	_updateCache . reset ( drwnNNGraphLearnViolatedConstraints ( ) )
>4275	ArgumentList	drwnNNGraphLearnViolatedConstraints ( )
>4276	Argument	drwnNNGraphLearnViolatedConstraints ( )
>4277	CallExpression	drwnNNGraphLearnViolatedConstraints ( )
>4278	ArgumentList	 
>4279	Callee	drwnNNGraphLearnViolatedConstraints
>4280	Identifier	drwnNNGraphLearnViolatedConstraints
>4281	Callee	_updateCache . reset
>4282	MemberAccess	_updateCache . reset
>4283	Identifier	reset
>4284	Identifier	_updateCache
>4293	FunctionDef	drwnNNGraphLLearner 
>4294	ParameterList	const drwnNNGraph & graph , double lambda
>4295	Parameter	 
>4296	Identifier	lambda
>4297	ParameterType	double
>4298	Parameter	 
>4299	Identifier	graph
>4300	ParameterType	const drwnNNGraph &
>4301	CompoundStatement	 
>4302	ExpressionStatement	 
>4303	CallExpression	setTransform ( initializeTransform ( ) )
>4304	ArgumentList	initializeTransform ( )
>4305	Argument	initializeTransform ( )
>4306	CallExpression	initializeTransform ( )
>4307	ArgumentList	 
>4308	Callee	initializeTransform
>4309	Identifier	initializeTransform
>4310	Callee	setTransform
>4311	Identifier	setTransform
>4312	ExpressionStatement	 
>4313	AssignmentExpr	_G = MatrixXd 
>4314	CallExpression	MatrixXd 
>4315	ArgumentList	_dim
>4316	Argument	_dim
>4317	Identifier	_dim
>4318	Argument	_dim
>4319	Identifier	_dim
>4320	Callee	MatrixXd 
>4321	Identifier	MatrixXd 
>4322	Identifier	_G
>4323	ExpressionStatement	 
>4324	CallExpression	_updateCache . initialize ( graph , drwnNNGraphLearnViolatedConstraints ( ) )
>4325	ArgumentList	graph
>4326	Argument	drwnNNGraphLearnViolatedConstraints ( )
>4327	CallExpression	drwnNNGraphLearnViolatedConstraints ( )
>4328	ArgumentList	 
>4329	Callee	drwnNNGraphLearnViolatedConstraints
>4330	Identifier	drwnNNGraphLearnViolatedConstraints
>4331	Argument	graph
>4332	Identifier	graph
>4333	Callee	_updateCache . initialize
>4334	MemberAccess	_updateCache . initialize
>4335	Identifier	initialize
>4336	Identifier	_updateCache
>4348	FunctionDef	drwnNNGraphLLearner 
>4349	ParameterList	 
>4350	CompoundStatement	 
>4354	FunctionDef	drwnNNGraphLLearner 
>4355	ParameterList	const MatrixXd & Lt
>4356	Parameter	 
>4357	Identifier	Lt
>4358	ParameterType	const MatrixXd &
>4359	ReturnType	void
>4360	CompoundStatement	 
>4361	ExpressionStatement	 
>4362	CallExpression	updateGraphFeatures ( )
>4363	ArgumentList	 
>4364	Callee	updateGraphFeatures
>4365	Identifier	updateGraphFeatures
>4366	ExpressionStatement	 
>4367	Statement	 
>4368	Statement	 
>4369	Statement	 
>4370	Statement	 
>4371	Statement	 
>4372	Statement	 
>4373	Statement	 
>4374	Statement	 
>4375	Statement	 
>4376	Statement	 
>4377	Statement	 
>4378	Statement	 
>4379	ExpressionStatement	 
>4380	CallExpression	DRWN_ASSERT ( ( Lt . rows ( ) == ( int ) _dim ) && ( Lt . cols ( ) == ( int ) _dim ) )
>4381	ArgumentList	( Lt . rows ( ) == ( int ) _dim ) && ( Lt . cols ( ) == ( int ) _dim )
>4382	Argument	( Lt . rows ( ) == ( int ) _dim ) && ( Lt . cols ( ) == ( int ) _dim )
>4383	AndExpression	( Lt . rows ( ) == ( int ) _dim ) && ( Lt . cols ( ) == ( int ) _dim )
>4384	EqualityExpression	Lt . cols ( ) == ( int ) _dim
>4385	CastExpression	( int ) _dim
>4386	Identifier	_dim
>4387	CastTarget	int
>4388	CallExpression	Lt . cols ( )
>4389	ArgumentList	 
>4390	Callee	Lt . cols
>4391	MemberAccess	Lt . cols
>4392	Identifier	cols
>4393	Identifier	Lt
>4394	EqualityExpression	Lt . rows ( ) == ( int ) _dim
>4395	CastExpression	( int ) _dim
>4396	Identifier	_dim
>4397	CastTarget	int
>4398	CallExpression	Lt . rows ( )
>4399	ArgumentList	 
>4400	Callee	Lt . rows
>4401	MemberAccess	Lt . rows
>4402	Identifier	rows
>4403	Identifier	Lt
>4404	Callee	DRWN_ASSERT
>4405	Identifier	DRWN_ASSERT
>4413	FunctionDef	drwnNNGraphLLearner 
>4414	ParameterList	 
>4415	ReturnType	MatrixXd
>4416	CompoundStatement	 
>4417	ReturnStatement	 
>4418	Identifier	_Lt
>4423	FunctionDef	drwnNNGraphLLearner 
>4424	ParameterList	 
>4425	ReturnType	MatrixXd
>4426	CompoundStatement	 
>4427	ExpressionStatement	 
>4428	Statement	 
>4429	Statement	 
>4430	Statement	 
>4431	Statement	 
>4432	Statement	 
>4433	Statement	 
>4434	Statement	 
>4435	Statement	 
>4436	Statement	 
>4437	Statement	 
>4438	Statement	 
>4439	Statement	 
>4440	Statement	 
>4441	Statement	 
>4442	Statement	 
>4443	Statement	 
>4444	Statement	 
>4445	ExpressionStatement	 
>4446	Identifier	DRWN_FCN_TOC
>4447	ExpressionStatement	 
>4448	AssignmentExpr	G += _G
>4449	Identifier	_G
>4450	Identifier	G
>4451	ExpressionStatement	 
>4452	CallExpression	jobs . clear ( )
>4453	ArgumentList	 
>4454	Callee	jobs . clear
>4455	MemberAccess	jobs . clear
>4456	Identifier	clear
>4457	Identifier	jobs
>4458	ForStatement	for ( unsigned i = 0 ; i < jobs . size ( ) ; i ++ )
>4459	CompoundStatement	 
>4460	ExpressionStatement	 
>4461	ArrayIndexing	jobs [ i ]
>4462	Identifier	i
>4463	Identifier	jobs
>4464	Statement	 
>4465	IncDecOp	 
>4466	IncDec	++
>4467	Identifier	i
>4468	Condition	 
>4469	RelationalExpression	i < jobs . size ( )
>4470	CallExpression	jobs . size ( )
>4471	ArgumentList	 
>4472	Callee	jobs . size
>4473	MemberAccess	jobs . size
>4474	Identifier	size
>4475	Identifier	jobs
>4476	Identifier	i
>4477	ForInit	 
>4478	IdentifierDeclStatement	unsigned i = 0 ;
>4479	IdentifierDecl	i = 0
>4480	AssignmentExpr	i = 0
>4481	PrimaryExpression	0
>4482	Identifier	i
>4483	Identifier	i
>4484	IdentifierDeclType	unsigned
>4485	ExpressionStatement	 
>4486	CallExpression	threadPool . finish ( )
>4487	ArgumentList	 
>4488	Callee	threadPool . finish
>4489	MemberAccess	threadPool . finish
>4490	Identifier	finish
>4491	Identifier	threadPool
>4492	ForStatement	for ( unsigned i = 0 ; i < nJobs ; i ++ )
>4493	CompoundStatement	 
>4494	ExpressionStatement	 
>4495	CallExpression	threadPool . addJob ( jobs [ i ] )
>4496	ArgumentList	jobs [ i ]
>4497	Argument	jobs [ i ]
>4498	ArrayIndexing	jobs [ i ]
>4499	Identifier	i
>4500	Identifier	jobs
>4501	Callee	threadPool . addJob
>4502	MemberAccess	threadPool . addJob
>4503	Identifier	addJob
>4504	Identifier	threadPool
>4505	ExpressionStatement	 
>4506	AssignmentExpr	jobs [ i ] = new drwnNNGraphSubGradientThread ( this , & _G , & _updateCache , imgIndxes [ i ] )
>4507	Expression	this , & _G , & _updateCache , imgIndxes [ i ]
>4508	Expression	& _G , & _updateCache , imgIndxes [ i ]
>4509	Expression	& _updateCache , imgIndxes [ i ]
>4510	ArrayIndexing	imgIndxes [ i ]
>4511	Identifier	i
>4512	Identifier	imgIndxes
>4513	UnaryOp	& _updateCache
>4514	Identifier	_updateCache
>4515	UnaryOperator	&
>4516	UnaryOp	& _G
>4517	Identifier	_G
>4518	UnaryOperator	&
>4519	Identifier	this
>4520	ArrayIndexing	jobs [ i ]
>4521	Identifier	i
>4522	Identifier	jobs
>4523	IncDecOp	 
>4524	IncDec	++
>4525	Identifier	i
>4526	Condition	 
>4527	RelationalExpression	i < nJobs
>4528	Identifier	nJobs
>4529	Identifier	i
>4530	ForInit	 
>4531	IdentifierDeclStatement	unsigned i = 0 ;
>4532	IdentifierDecl	i = 0
>4533	AssignmentExpr	i = 0
>4534	PrimaryExpression	0
>4535	Identifier	i
>4536	Identifier	i
>4537	IdentifierDeclType	unsigned
>4538	IdentifierDeclStatement	 
>4539	IdentifierDecl	jobs ( nJobs )
>4540	Identifier	nJobs
>4541	Identifier	jobs
>4542	IdentifierDeclType	vector < drwnNNGraphSubGradientThread * >
>4543	ExpressionStatement	 
>4544	CallExpression	threadPool . start ( )
>4545	ArgumentList	 
>4546	Callee	threadPool . start
>4547	MemberAccess	threadPool . start
>4548	Identifier	start
>4549	Identifier	threadPool
>4550	IdentifierDeclStatement	 
>4551	IdentifierDecl	threadPool ( nJobs )
>4552	Identifier	nJobs
>4553	Identifier	threadPool
>4554	IdentifierDeclType	drwnThreadPool
>4555	ForStatement	for ( unsigned imgIndx = 0 ; imgIndx < _posGraph . numImages ( ) ; imgIndx ++ )
>4556	CompoundStatement	 
>4557	ExpressionStatement	 
>4558	CallExpression	imgIndxes [ imgIndx % nJobs ] . insert ( imgIndx )
>4559	ArgumentList	imgIndx
>4560	Argument	imgIndx
>4561	Identifier	imgIndx
>4562	Callee	imgIndxes [ imgIndx % nJobs ] . insert
>4563	MemberAccess	imgIndxes [ imgIndx % nJobs ] . insert
>4564	Identifier	insert
>4565	ArrayIndexing	imgIndxes [ imgIndx % nJobs ]
>4566	MultiplicativeExpression	imgIndx % nJobs
>4567	Identifier	nJobs
>4568	Identifier	imgIndx
>4569	Identifier	imgIndxes
>4570	IncDecOp	 
>4571	IncDec	++
>4572	Identifier	imgIndx
>4573	Condition	 
>4574	RelationalExpression	imgIndx < _posGraph . numImages ( )
>4575	CallExpression	_posGraph . numImages ( )
>4576	ArgumentList	 
>4577	Callee	_posGraph . numImages
>4578	MemberAccess	_posGraph . numImages
>4579	Identifier	numImages
>4580	Identifier	_posGraph
>4581	Identifier	imgIndx
>4582	ForInit	 
>4583	IdentifierDeclStatement	unsigned imgIndx = 0 ;
>4584	IdentifierDecl	imgIndx = 0
>4585	AssignmentExpr	imgIndx = 0
>4586	PrimaryExpression	0
>4587	Identifier	imgIndx
>4588	Identifier	imgIndx
>4589	IdentifierDeclType	unsigned
>4590	IdentifierDeclStatement	 
>4591	IdentifierDecl	imgIndxes ( nJobs )
>4592	Identifier	nJobs
>4593	Identifier	imgIndxes
>4594	IdentifierDeclType	vector < set < unsigned > >
>4595	IdentifierDeclStatement	 
>4596	IdentifierDecl	nJobs = std 
>4597	AssignmentExpr	nJobs = std 
>4598	CallExpression	std 
>4599	ArgumentList	( unsigned ) _posGraph . numImages ( )
>4600	Argument	std 
>4601	CallExpression	std 
>4602	ArgumentList	( unsigned ) 1
>4603	Argument	drwnThreadPool 
>4604	Identifier	drwnThreadPool 
>4605	Argument	( unsigned ) 1
>4606	CastExpression	( unsigned ) 1
>4607	PrimaryExpression	1
>4608	CastTarget	unsigned
>4609	Callee	std 
>4610	Identifier	std 
>4611	Argument	( unsigned ) _posGraph . numImages ( )
>4612	CastExpression	( unsigned ) _posGraph . numImages ( )
>4613	CallExpression	_posGraph . numImages ( )
>4614	ArgumentList	 
>4615	Callee	_posGraph . numImages
>4616	MemberAccess	_posGraph . numImages
>4617	Identifier	numImages
>4618	Identifier	_posGraph
>4619	CastTarget	unsigned
>4620	Callee	std 
>4621	Identifier	std 
>4622	Identifier	nJobs
>4623	Identifier	nJobs
>4624	IdentifierDeclType	unsigned
>4625	Statement	 
>4626	ExpressionStatement	 
>4627	AssignmentExpr	G = _lambda * _X
>4628	MultiplicativeExpression	_lambda * _X
>4629	Identifier	_X
>4630	Identifier	_lambda
>4631	Identifier	G
>4632	IdentifierDeclStatement	 
>4633	IdentifierDecl	G = MatrixXd 
>4634	AssignmentExpr	G = MatrixXd 
>4635	CallExpression	MatrixXd 
>4636	ArgumentList	_Lt . rows ( )
>4637	Argument	_Lt . cols ( )
>4638	CallExpression	_Lt . cols ( )
>4639	ArgumentList	 
>4640	Callee	_Lt . cols
>4641	MemberAccess	_Lt . cols
>4642	Identifier	cols
>4643	Identifier	_Lt
>4644	Argument	_Lt . rows ( )
>4645	CallExpression	_Lt . rows ( )
>4646	ArgumentList	 
>4647	Callee	_Lt . rows
>4648	MemberAccess	_Lt . rows
>4649	Identifier	rows
>4650	Identifier	_Lt
>4651	Callee	MatrixXd 
>4652	Identifier	MatrixXd 
>4653	Identifier	G
>4654	Identifier	G
>4655	IdentifierDeclType	MatrixXd
>4656	ExpressionStatement	 
>4657	Identifier	DRWN_FCN_TIC
>4689	FunctionDef	drwnNNGraphLLearner 
>4690	ParameterList	const MatrixXd & G , double alpha
>4691	Parameter	 
>4692	Identifier	alpha
>4693	ParameterType	double
>4694	Parameter	 
>4695	Identifier	G
>4696	ParameterType	const MatrixXd &
>4697	ReturnType	void
>4698	CompoundStatement	 
>4699	ExpressionStatement	 
>4700	AssignmentExpr	_Lt -= alpha * G
>4701	MultiplicativeExpression	alpha * G
>4702	Identifier	G
>4703	Identifier	alpha
>4704	Identifier	_Lt
>4711	FunctionDef	drwnNNGraphLLearner 
>4712	ParameterList	 
>4713	ReturnType	void
>4714	CompoundStatement	 
>4715	ExpressionStatement	 
>4716	AssignmentExpr	_G = MatrixXd 
>4717	CallExpression	MatrixXd 
>4718	ArgumentList	_dim
>4719	Argument	_dim
>4720	Identifier	_dim
>4721	Argument	_dim
>4722	Identifier	_dim
>4723	Callee	MatrixXd 
>4724	Identifier	MatrixXd 
>4725	Identifier	_G
>4726	ExpressionStatement	 
>4727	CallExpression	_updateCache . reset ( drwnNNGraphLearnViolatedConstraints ( ) )
>4728	ArgumentList	drwnNNGraphLearnViolatedConstraints ( )
>4729	Argument	drwnNNGraphLearnViolatedConstraints ( )
>4730	CallExpression	drwnNNGraphLearnViolatedConstraints ( )
>4731	ArgumentList	 
>4732	Callee	drwnNNGraphLearnViolatedConstraints
>4733	Identifier	drwnNNGraphLearnViolatedConstraints
>4734	Callee	_updateCache . reset
>4735	MemberAccess	_updateCache . reset
>4736	Identifier	reset
>4737	Identifier	_updateCache
>4746	FunctionDef	drwnNNGraphSparseLearner 
>4747	ParameterList	const drwnNNGraph & graph , double lambda
>4748	Parameter	 
>4749	Identifier	lambda
>4750	ParameterType	double
>4751	Parameter	 
>4752	Identifier	graph
>4753	ParameterType	const drwnNNGraph &
>4754	CompoundStatement	 
>4760	FunctionDef	drwnNNGraphSparseLearner 
>4761	ParameterList	 
>4762	CompoundStatement	 
>4766	FunctionDef	drwnNNGraphSparseLearner 
>4767	ParameterList	 
>4768	ReturnType	double
>4769	CompoundStatement	 
>4770	ReturnStatement	 
>4771	Identifier	loss
>4772	ForStatement	for ( u . imgIndx = 0 ; u . imgIndx < _posGraph . numImages ( ) ; u . imgIndx ++ )
>4773	CompoundStatement	 
>4774	ForStatement	for ( u . segId = 0 ; u . segId < _posGraph [ u . imgIndx ] . numNodes ( ) ; u . segId ++ )
>4775	CompoundStatement	 
>4776	ExpressionStatement	 
>4777	AssignmentExpr	loss += std 
>4778	CallExpression	std 
>4779	ArgumentList	xi_u
>4780	Argument	0.0
>4781	PrimaryExpression	0.0
>4782	Argument	xi_u
>4783	Identifier	xi_u
>4784	Callee	std 
>4785	Identifier	std 
>4786	Identifier	loss
>4787	IdentifierDeclStatement	 
>4788	IdentifierDecl	xi_u = alpha * ( _posGraph [ u ] . edges . back ( ) . weight - _negGraph [ u ] . edges . front ( ) . weight + 1.0 )
>4789	AssignmentExpr	xi_u = alpha * ( _posGraph [ u ] . edges . back ( ) . weight - _negGraph [ u ] . edges . front ( ) . \
>4790	MultiplicativeExpression	alpha * ( _posGraph [ u ] . edges . back ( ) . weight - _negGraph [ u ] . edges . front ( ) . weight + \
>4791	AdditiveExpression	_posGraph [ u ] . edges . back ( ) . weight - _negGraph [ u ] . edges . front ( ) . weight + 1.0
>4792	AdditiveExpression	_negGraph [ u ] . edges . front ( ) . weight + 1.0
>4793	PrimaryExpression	1.0
>4794	MemberAccess	_negGraph [ u ] . edges . front ( ) . weight
>4795	Identifier	weight
>4796	CallExpression	_negGraph [ u ] . edges . front ( )
>4797	ArgumentList	 
>4798	Callee	_negGraph [ u ] . edges . front
>4799	MemberAccess	_negGraph [ u ] . edges . front
>4800	Identifier	front
>4801	MemberAccess	_negGraph [ u ] . edges
>4802	Identifier	edges
>4803	ArrayIndexing	_negGraph [ u ]
>4804	Identifier	u
>4805	Identifier	_negGraph
>4806	MemberAccess	_posGraph [ u ] . edges . back ( ) . weight
>4807	Identifier	weight
>4808	CallExpression	_posGraph [ u ] . edges . back ( )
>4809	ArgumentList	 
>4810	Callee	_posGraph [ u ] . edges . back
>4811	MemberAccess	_posGraph [ u ] . edges . back
>4812	Identifier	back
>4813	MemberAccess	_posGraph [ u ] . edges
>4814	Identifier	edges
>4815	ArrayIndexing	_posGraph [ u ]
>4816	Identifier	u
>4817	Identifier	_posGraph
>4818	Identifier	alpha
>4819	Identifier	xi_u
>4820	Identifier	xi_u
>4821	IdentifierDeclType	const double
>4822	IdentifierDeclStatement	 
>4823	IdentifierDecl	alpha = _labelWeights . empty ( ) ? 1.0 
>4824	AssignmentExpr	alpha = _labelWeights . empty ( ) ? 1.0 
>4825	ConditionalExpression	_labelWeights . empty ( ) ? 1.0 
>4826	ArrayIndexing	_labelWeights [ _graph [ u ] . label ]
>4827	MemberAccess	_graph [ u ] . label
>4828	Identifier	label
>4829	ArrayIndexing	_graph [ u ]
>4830	Identifier	u
>4831	Identifier	_graph
>4832	Identifier	_labelWeights
>4833	PrimaryExpression	1.0
>4834	Condition	_labelWeights . empty ( )
>4835	CallExpression	_labelWeights . empty ( )
>4836	ArgumentList	 
>4837	Callee	_labelWeights . empty
>4838	MemberAccess	_labelWeights . empty
>4839	Identifier	empty
>4840	Identifier	_labelWeights
>4841	Identifier	alpha
>4842	Identifier	alpha
>4843	IdentifierDeclType	const double
>4844	IfStatement	if ( _posGraph [ u ] . edges . empty ( ) || _negGraph [ u ] . edges . empty ( ) )
>4845	ContinueStatement	 
>4846	Condition	 
>4847	OrExpression	_posGraph [ u ] . edges . empty ( ) || _negGraph [ u ] . edges . empty ( )
>4848	CallExpression	_negGraph [ u ] . edges . empty ( )
>4849	ArgumentList	 
>4850	Callee	_negGraph [ u ] . edges . empty
>4851	MemberAccess	_negGraph [ u ] . edges . empty
>4852	Identifier	empty
>4853	MemberAccess	_negGraph [ u ] . edges
>4854	Identifier	edges
>4855	ArrayIndexing	_negGraph [ u ]
>4856	Identifier	u
>4857	Identifier	_negGraph
>4858	CallExpression	_posGraph [ u ] . edges . empty ( )
>4859	ArgumentList	 
>4860	Callee	_posGraph [ u ] . edges . empty
>4861	MemberAccess	_posGraph [ u ] . edges . empty
>4862	Identifier	empty
>4863	MemberAccess	_posGraph [ u ] . edges
>4864	Identifier	edges
>4865	ArrayIndexing	_posGraph [ u ]
>4866	Identifier	u
>4867	Identifier	_posGraph
>4868	IncDecOp	 
>4869	IncDec	++
>4870	MemberAccess	u . segId
>4871	Identifier	segId
>4872	Identifier	u
>4873	Condition	 
>4874	RelationalExpression	u . segId < _posGraph [ u . imgIndx ] . numNodes ( )
>4875	CallExpression	_posGraph [ u . imgIndx ] . numNodes ( )
>4876	ArgumentList	 
>4877	Callee	_posGraph [ u . imgIndx ] . numNodes
>4878	MemberAccess	_posGraph [ u . imgIndx ] . numNodes
>4879	Identifier	numNodes
>4880	ArrayIndexing	_posGraph [ u . imgIndx ]
>4881	MemberAccess	u . imgIndx
>4882	Identifier	imgIndx
>4883	Identifier	u
>4884	Identifier	_posGraph
>4885	MemberAccess	u . segId
>4886	Identifier	segId
>4887	Identifier	u
>4888	ForInit	 
>4889	AssignmentExpr	u . segId = 0
>4890	PrimaryExpression	0
>4891	MemberAccess	u . segId
>4892	Identifier	segId
>4893	Identifier	u
>4894	IncDecOp	 
>4895	IncDec	++
>4896	MemberAccess	u . imgIndx
>4897	Identifier	imgIndx
>4898	Identifier	u
>4899	Condition	 
>4900	RelationalExpression	u . imgIndx < _posGraph . numImages ( )
>4901	CallExpression	_posGraph . numImages ( )
>4902	ArgumentList	 
>4903	Callee	_posGraph . numImages
>4904	MemberAccess	_posGraph . numImages
>4905	Identifier	numImages
>4906	Identifier	_posGraph
>4907	MemberAccess	u . imgIndx
>4908	Identifier	imgIndx
>4909	Identifier	u
>4910	ForInit	 
>4911	AssignmentExpr	u . imgIndx = 0
>4912	PrimaryExpression	0
>4913	MemberAccess	u . imgIndx
>4914	Identifier	imgIndx
>4915	Identifier	u
>4916	IdentifierDeclStatement	 
>4917	IdentifierDecl	u ( 0 , 0 )
>4918	Expression	0 , 0
>4919	PrimaryExpression	0
>4920	PrimaryExpression	0
>4921	Identifier	u
>4922	IdentifierDeclType	drwnNNGraphNodeIndex
>4923	IdentifierDeclStatement	 
>4924	IdentifierDecl	loss = 0.0
>4925	AssignmentExpr	loss = 0.0
>4926	PrimaryExpression	0.0
>4927	Identifier	loss
>4928	Identifier	loss
>4929	IdentifierDeclType	double
>4965	FunctionDef	drwnNNGraphLSparseLearner 
>4966	ParameterList	const drwnNNGraph & graph , double lambda
>4967	Parameter	 
>4968	Identifier	lambda
>4969	ParameterType	double
>4970	Parameter	 
>4971	Identifier	graph
>4972	ParameterType	const drwnNNGraph &
>4973	CompoundStatement	 
>4974	ExpressionStatement	 
>4975	CallExpression	setTransform ( initializeTransform ( ) )
>4976	ArgumentList	initializeTransform ( )
>4977	Argument	initializeTransform ( )
>4978	CallExpression	initializeTransform ( )
>4979	ArgumentList	 
>4980	Callee	initializeTransform
>4981	Identifier	initializeTransform
>4982	Callee	setTransform
>4983	Identifier	setTransform
>4984	ExpressionStatement	 
>4985	AssignmentExpr	_G = MatrixXd 
>4986	CallExpression	MatrixXd 
>4987	ArgumentList	_dim
>4988	Argument	_dim
>4989	Identifier	_dim
>4990	Argument	_dim
>4991	Identifier	_dim
>4992	Callee	MatrixXd 
>4993	Identifier	MatrixXd 
>4994	Identifier	_G
>4995	ExpressionStatement	 
>4996	CallExpression	_updateCache . initialize ( graph , drwnNNGraphLearnSparseViolatedConstraint ( false , drwnNNGraphNodeIndex ( ) , \
>4997	ArgumentList	graph
>4998	Argument	drwnNNGraphLearnSparseViolatedConstraint ( false , drwnNNGraphNodeIndex ( ) , drwnNNGraphNodeIndex ( ) )
>4999	CallExpression	drwnNNGraphLearnSparseViolatedConstraint ( false , drwnNNGraphNodeIndex ( ) , drwnNNGraphNodeIndex ( ) )
>5000	ArgumentList	false
>5001	Argument	drwnNNGraphNodeIndex ( )
>5002	CallExpression	drwnNNGraphNodeIndex ( )
>5003	ArgumentList	 
>5004	Callee	drwnNNGraphNodeIndex
>5005	Identifier	drwnNNGraphNodeIndex
>5006	Argument	drwnNNGraphNodeIndex ( )
>5007	CallExpression	drwnNNGraphNodeIndex ( )
>5008	ArgumentList	 
>5009	Callee	drwnNNGraphNodeIndex
>5010	Identifier	drwnNNGraphNodeIndex
>5011	Argument	false
>5012	Identifier	false
>5013	Callee	drwnNNGraphLearnSparseViolatedConstraint
>5014	Identifier	drwnNNGraphLearnSparseViolatedConstraint
>5015	Argument	graph
>5016	Identifier	graph
>5017	Callee	_updateCache . initialize
>5018	MemberAccess	_updateCache . initialize
>5019	Identifier	initialize
>5020	Identifier	_updateCache
>5034	FunctionDef	drwnNNGraphLSparseLearner 
>5035	ParameterList	 
>5036	CompoundStatement	 
>5040	FunctionDef	drwnNNGraphLSparseLearner 
>5041	ParameterList	const MatrixXd & Lt
>5042	Parameter	 
>5043	Identifier	Lt
>5044	ParameterType	const MatrixXd &
>5045	ReturnType	void
>5046	CompoundStatement	 
>5047	ExpressionStatement	 
>5048	CallExpression	updateGraphFeatures ( )
>5049	ArgumentList	 
>5050	Callee	updateGraphFeatures
>5051	Identifier	updateGraphFeatures
>5052	ExpressionStatement	 
>5053	AssignmentExpr	_Lt = Lt
>5054	Identifier	Lt
>5055	Identifier	_Lt
>5056	ExpressionStatement	 
>5057	CallExpression	DRWN_ASSERT ( ( Lt . rows ( ) == ( int ) _dim ) && ( Lt . cols ( ) == ( int ) _dim ) )
>5058	ArgumentList	( Lt . rows ( ) == ( int ) _dim ) && ( Lt . cols ( ) == ( int ) _dim )
>5059	Argument	( Lt . rows ( ) == ( int ) _dim ) && ( Lt . cols ( ) == ( int ) _dim )
>5060	AndExpression	( Lt . rows ( ) == ( int ) _dim ) && ( Lt . cols ( ) == ( int ) _dim )
>5061	EqualityExpression	Lt . cols ( ) == ( int ) _dim
>5062	CastExpression	( int ) _dim
>5063	Identifier	_dim
>5064	CastTarget	int
>5065	CallExpression	Lt . cols ( )
>5066	ArgumentList	 
>5067	Callee	Lt . cols
>5068	MemberAccess	Lt . cols
>5069	Identifier	cols
>5070	Identifier	Lt
>5071	EqualityExpression	Lt . rows ( ) == ( int ) _dim
>5072	CastExpression	( int ) _dim
>5073	Identifier	_dim
>5074	CastTarget	int
>5075	CallExpression	Lt . rows ( )
>5076	ArgumentList	 
>5077	Callee	Lt . rows
>5078	MemberAccess	Lt . rows
>5079	Identifier	rows
>5080	Identifier	Lt
>5081	Callee	DRWN_ASSERT
>5082	Identifier	DRWN_ASSERT
>5091	FunctionDef	drwnNNGraphLSparseLearner 
>5092	ParameterList	 
>5093	ReturnType	MatrixXd
>5094	CompoundStatement	 
>5095	ReturnStatement	 
>5096	Identifier	_Lt
>5101	FunctionDef	drwnNNGraphLSparseLearner 
>5102	ParameterList	 
>5103	ReturnType	MatrixXd
>5104	CompoundStatement	 
>5105	ExpressionStatement	 
>5106	Statement	 
>5107	Statement	 
>5108	Statement	 
>5109	Statement	 
>5110	Statement	 
>5111	Statement	 
>5112	Statement	 
>5113	Statement	 
>5114	Statement	 
>5115	Statement	 
>5116	Statement	 
>5117	Statement	 
>5118	Statement	 
>5119	Statement	 
>5120	Statement	 
>5121	Statement	 
>5122	Statement	 
>5123	ExpressionStatement	 
>5124	Identifier	DRWN_FCN_TOC
>5125	ExpressionStatement	 
>5126	AssignmentExpr	G += _G
>5127	Identifier	_G
>5128	Identifier	G
>5129	ExpressionStatement	 
>5130	Identifier	DRWN_TODO
>5131	ExpressionStatement	 
>5132	AssignmentExpr	G *= _lambda
>5133	Identifier	_lambda
>5134	Identifier	G
>5135	ForStatement	for ( u . imgIndx = 0 ; u . imgIndx < _posGraph . numImages ( ) ; u . imgIndx ++ )
>5136	CompoundStatement	 
>5137	ForStatement	for ( u . segId = 0 ; u . segId < _posGraph [ u . imgIndx ] . numNodes ( ) ; u . segId ++ )
>5138	CompoundStatement	 
>5139	ForStatement	for ( drwnNNGraphEdgeList 
>5140	CompoundStatement	 
>5141	ExpressionStatement	 
>5142	AssignmentExpr	G += delta * delta . transpose ( )
>5143	MultiplicativeExpression	delta * delta . transpose ( )
>5144	CallExpression	delta . transpose ( )
>5145	ArgumentList	 
>5146	Callee	delta . transpose
>5147	MemberAccess	delta . transpose
>5148	Identifier	transpose
>5149	Identifier	delta
>5150	Identifier	delta
>5151	Identifier	G
>5152	ExpressionStatement	 
>5153	Statement	 
>5154	Statement	 
>5155	Statement	 
>5156	Statement	 
>5157	Statement	 
>5158	Statement	 
>5159	Statement	 
>5160	Statement	 
>5161	Statement	 
>5162	Statement	 
>5163	Statement	 
>5164	Statement	 
>5165	Statement	 
>5166	Statement	 
>5167	Statement	 
>5168	Statement	 
>5169	Statement	 
>5170	Statement	 
>5171	Statement	 
>5172	Statement	 
>5173	Statement	 
>5174	Statement	 
>5175	Statement	 
>5176	Statement	 
>5177	Statement	 
>5178	Statement	 
>5179	Statement	 
>5180	IdentifierDeclStatement	 
>5181	IdentifierDecl	v ( kt -> targetNode )
>5182	PtrMemberAccess	kt -> targetNode
>5183	Identifier	targetNode
>5184	Identifier	kt
>5185	Identifier	v
>5186	IdentifierDeclType	const drwnNNGraphNodeIndex
>5187	UnaryExpression	 
>5188	Identifier	kt
>5189	IncDec	++
>5190	Condition	 
>5191	EqualityExpression	kt != e . end ( )
>5192	CallExpression	e . end ( )
>5193	ArgumentList	 
>5194	Callee	e . end
>5195	MemberAccess	e . end
>5196	Identifier	end
>5197	Identifier	e
>5198	Identifier	kt
>5199	ForInit	 
>5200	IdentifierDeclStatement	drwnNNGraphEdgeList 
>5201	IdentifierDecl	kt = e . begin ( )
>5202	AssignmentExpr	kt = e . begin ( )
>5203	CallExpression	e . begin ( )
>5204	ArgumentList	 
>5205	Callee	e . begin
>5206	MemberAccess	e . begin
>5207	Identifier	begin
>5208	Identifier	e
>5209	Identifier	kt
>5210	Identifier	kt
>5211	IdentifierDeclType	drwnNNGraphEdgeList 
>5212	IdentifierDeclStatement	 
>5213	IdentifierDecl	& e = _posGraph [ u ] . edges
>5214	AssignmentExpr	& e = _posGraph [ u ] . edges
>5215	MemberAccess	_posGraph [ u ] . edges
>5216	Identifier	edges
>5217	ArrayIndexing	_posGraph [ u ]
>5218	Identifier	u
>5219	Identifier	_posGraph
>5220	Identifier	e
>5221	Identifier	e
>5222	IdentifierDeclType	const drwnNNGraphEdgeList &
>5223	IncDecOp	 
>5224	IncDec	++
>5225	MemberAccess	u . segId
>5226	Identifier	segId
>5227	Identifier	u
>5228	Condition	 
>5229	RelationalExpression	u . segId < _posGraph [ u . imgIndx ] . numNodes ( )
>5230	CallExpression	_posGraph [ u . imgIndx ] . numNodes ( )
>5231	ArgumentList	 
>5232	Callee	_posGraph [ u . imgIndx ] . numNodes
>5233	MemberAccess	_posGraph [ u . imgIndx ] . numNodes
>5234	Identifier	numNodes
>5235	ArrayIndexing	_posGraph [ u . imgIndx ]
>5236	MemberAccess	u . imgIndx
>5237	Identifier	imgIndx
>5238	Identifier	u
>5239	Identifier	_posGraph
>5240	MemberAccess	u . segId
>5241	Identifier	segId
>5242	Identifier	u
>5243	ForInit	 
>5244	AssignmentExpr	u . segId = 0
>5245	PrimaryExpression	0
>5246	MemberAccess	u . segId
>5247	Identifier	segId
>5248	Identifier	u
>5249	IncDecOp	 
>5250	IncDec	++
>5251	MemberAccess	u . imgIndx
>5252	Identifier	imgIndx
>5253	Identifier	u
>5254	Condition	 
>5255	RelationalExpression	u . imgIndx < _posGraph . numImages ( )
>5256	CallExpression	_posGraph . numImages ( )
>5257	ArgumentList	 
>5258	Callee	_posGraph . numImages
>5259	MemberAccess	_posGraph . numImages
>5260	Identifier	numImages
>5261	Identifier	_posGraph
>5262	MemberAccess	u . imgIndx
>5263	Identifier	imgIndx
>5264	Identifier	u
>5265	ForInit	 
>5266	AssignmentExpr	u . imgIndx = 0
>5267	PrimaryExpression	0
>5268	MemberAccess	u . imgIndx
>5269	Identifier	imgIndx
>5270	Identifier	u
>5271	IdentifierDeclStatement	 
>5272	IdentifierDecl	u ( 0 , 0 )
>5273	Expression	0 , 0
>5274	PrimaryExpression	0
>5275	PrimaryExpression	0
>5276	Identifier	u
>5277	IdentifierDeclType	drwnNNGraphNodeIndex
>5278	IdentifierDeclStatement	 
>5279	IdentifierDecl	G = MatrixXd 
>5280	AssignmentExpr	G = MatrixXd 
>5281	CallExpression	MatrixXd 
>5282	ArgumentList	_Lt . rows ( )
>5283	Argument	_Lt . cols ( )
>5284	CallExpression	_Lt . cols ( )
>5285	ArgumentList	 
>5286	Callee	_Lt . cols
>5287	MemberAccess	_Lt . cols
>5288	Identifier	cols
>5289	Identifier	_Lt
>5290	Argument	_Lt . rows ( )
>5291	CallExpression	_Lt . rows ( )
>5292	ArgumentList	 
>5293	Callee	_Lt . rows
>5294	MemberAccess	_Lt . rows
>5295	Identifier	rows
>5296	Identifier	_Lt
>5297	Callee	MatrixXd 
>5298	Identifier	MatrixXd 
>5299	Identifier	G
>5300	Identifier	G
>5301	IdentifierDeclType	MatrixXd
>5302	ExpressionStatement	 
>5303	Identifier	DRWN_FCN_TIC
>5331	FunctionDef	drwnNNGraphLSparseLearner 
>5332	ParameterList	const MatrixXd & G , double alpha
>5333	Parameter	 
>5334	Identifier	alpha
>5335	ParameterType	double
>5336	Parameter	 
>5337	Identifier	G
>5338	ParameterType	const MatrixXd &
>5339	ReturnType	void
>5340	CompoundStatement	 
>5341	ExpressionStatement	 
>5342	AssignmentExpr	_Lt -= alpha * G
>5343	MultiplicativeExpression	alpha * G
>5344	Identifier	G
>5345	Identifier	alpha
>5346	Identifier	_Lt
>5353	FunctionDef	drwnNNGraphLSparseLearner 
>5354	ParameterList	 
>5355	ReturnType	void
>5356	CompoundStatement	 
>5357	ExpressionStatement	 
>5358	AssignmentExpr	_G = MatrixXd 
>5359	CallExpression	MatrixXd 
>5360	ArgumentList	_dim
>5361	Argument	_dim
>5362	Identifier	_dim
>5363	Argument	_dim
>5364	Identifier	_dim
>5365	Callee	MatrixXd 
>5366	Identifier	MatrixXd 
>5367	Identifier	_G
>5368	ExpressionStatement	 
>5369	CallExpression	_updateCache . reset ( drwnNNGraphLearnSparseViolatedConstraint ( false , drwnNNGraphNodeIndex ( ) , drwnNNGraphNodeIndex ( ) ) )
>5370	ArgumentList	drwnNNGraphLearnSparseViolatedConstraint ( false , drwnNNGraphNodeIndex ( ) , drwnNNGraphNodeIndex ( ) )
>5371	Argument	drwnNNGraphLearnSparseViolatedConstraint ( false , drwnNNGraphNodeIndex ( ) , drwnNNGraphNodeIndex ( ) )
>5372	CallExpression	drwnNNGraphLearnSparseViolatedConstraint ( false , drwnNNGraphNodeIndex ( ) , drwnNNGraphNodeIndex ( ) )
>5373	ArgumentList	false
>5374	Argument	drwnNNGraphNodeIndex ( )
>5375	CallExpression	drwnNNGraphNodeIndex ( )
>5376	ArgumentList	 
>5377	Callee	drwnNNGraphNodeIndex
>5378	Identifier	drwnNNGraphNodeIndex
>5379	Argument	drwnNNGraphNodeIndex ( )
>5380	CallExpression	drwnNNGraphNodeIndex ( )
>5381	ArgumentList	 
>5382	Callee	drwnNNGraphNodeIndex
>5383	Identifier	drwnNNGraphNodeIndex
>5384	Argument	false
>5385	Identifier	false
>5386	Callee	drwnNNGraphLearnSparseViolatedConstraint
>5387	Identifier	drwnNNGraphLearnSparseViolatedConstraint
>5388	Callee	_updateCache . reset
>5389	MemberAccess	_updateCache . reset
>5390	Identifier	reset
>5391	Identifier	_updateCache
>5403	FunctionDef	drwnNNGraphLearnerConfig ()
>5404	ParameterList	 
>5405	CompoundStatement	 
>5409	FunctionDef	~drwnNNGraphLearnerConfig ()
>5410	ParameterList	 
>5411	CompoundStatement	 
>5415	FunctionDef	usage (ostream & os)
>5416	ParameterList	ostream & os
>5417	Parameter	 
>5418	Identifier	os
>5419	ParameterType	ostream &
>5420	ReturnType	void
>5421	CompoundStatement	 
>5422	ExpressionStatement	 
>5423	ShiftExpression	os << \"      searchIters      
>5424	ShiftExpression	\"      searchIters      
>5425	ShiftExpression	drwnNNGraphLearner 
>5426	PrimaryExpression	\")\n\"
>5427	Identifier	drwnNNGraphLearner 
>5428	PrimaryExpression	\"      searchIters      
>5429	Identifier	os
>5430	ExpressionStatement	 
>5431	ShiftExpression	os << \"      metricIters      
>5432	ShiftExpression	\"      metricIters      
>5433	ShiftExpression	drwnNNGraphLearner 
>5434	PrimaryExpression	\")\n\"
>5435	Identifier	drwnNNGraphLearner 
>5436	PrimaryExpression	\"      metricIters      
>5437	Identifier	os
>5438	ExpressionStatement	 
>5439	ShiftExpression	os << \"      alpha0           
>5440	ShiftExpression	\"      alpha0           
>5441	ShiftExpression	drwnNNGraphLearner 
>5442	PrimaryExpression	\")\n\"
>5443	Identifier	drwnNNGraphLearner 
>5444	PrimaryExpression	\"      alpha0           
>5445	Identifier	os
>5450	FunctionDef	setConfiguration (const char * name , const char * value)
>5451	ParameterList	const char * name , const char * value
>5452	Parameter	 
>5453	Identifier	value
>5454	ParameterType	const char *
>5455	Parameter	 
>5456	Identifier	name
>5457	ParameterType	const char *
>5458	ReturnType	void
>5459	CompoundStatement	 
>5460	IfStatement	if ( ! strcmp ( name , \"alpha0\" ) )
>5461	ElseStatement	else
>5462	IfStatement	if ( ! strcmp ( name , \"metricIters\" ) )
>5463	ElseStatement	else
>5464	IfStatement	if ( ! strcmp ( name , \"searchIters\" ) )
>5465	ElseStatement	else
>5466	CompoundStatement	 
>5467	ExpressionStatement	 
>5468	CallExpression	DRWN_LOG_FATAL ( \"unrecognized configuration option \" << name << \" for \" << this -> name ( ) )
>5469	ArgumentList	\"unrecognized configuration option \" << name << \" for \" << this -> name ( )
>5470	Argument	\"unrecognized configuration option \" << name << \" for \" << this -> name ( )
>5471	ShiftExpression	\"unrecognized configuration option \" << name << \" for \" << this -> name ( )
>5472	ShiftExpression	name << \" for \" << this -> name ( )
>5473	ShiftExpression	\" for \" << this -> name ( )
>5474	CallExpression	this -> name ( )
>5475	ArgumentList	 
>5476	Callee	this -> name
>5477	PtrMemberAccess	this -> name
>5478	Identifier	name
>5479	Identifier	this
>5480	PrimaryExpression	\" for \"
>5481	Identifier	name
>5482	PrimaryExpression	\"unrecognized configuration option \"
>5483	Callee	DRWN_LOG_FATAL
>5484	Identifier	DRWN_LOG_FATAL
>5485	CompoundStatement	 
>5486	ExpressionStatement	 
>5487	AssignmentExpr	drwnNNGraphLearner 
>5488	CallExpression	atoi ( value )
>5489	ArgumentList	value
>5490	Argument	value
>5491	Identifier	value
>5492	Callee	atoi
>5493	Identifier	atoi
>5494	Identifier	drwnNNGraphLearner 
>5495	Condition	 
>5496	UnaryOp	! strcmp ( name , \"searchIters\" )
>5497	CallExpression	strcmp ( name , \"searchIters\" )
>5498	ArgumentList	name
>5499	Argument	\"searchIters\"
>5500	PrimaryExpression	\"searchIters\"
>5501	Argument	name
>5502	Identifier	name
>5503	Callee	strcmp
>5504	Identifier	strcmp
>5505	UnaryOperator	!
>5506	CompoundStatement	 
>5507	ExpressionStatement	 
>5508	AssignmentExpr	drwnNNGraphLearner 
>5509	CallExpression	atoi ( value )
>5510	ArgumentList	value
>5511	Argument	value
>5512	Identifier	value
>5513	Callee	atoi
>5514	Identifier	atoi
>5515	Identifier	drwnNNGraphLearner 
>5516	Condition	 
>5517	UnaryOp	! strcmp ( name , \"metricIters\" )
>5518	CallExpression	strcmp ( name , \"metricIters\" )
>5519	ArgumentList	name
>5520	Argument	\"metricIters\"
>5521	PrimaryExpression	\"metricIters\"
>5522	Argument	name
>5523	Identifier	name
>5524	Callee	strcmp
>5525	Identifier	strcmp
>5526	UnaryOperator	!
>5527	CompoundStatement	 
>5528	ExpressionStatement	 
>5529	AssignmentExpr	drwnNNGraphLearner 
>5530	CallExpression	std 
>5531	ArgumentList	atof ( value )
>5532	Argument	DRWN_DBL_MIN
>5533	Identifier	DRWN_DBL_MIN
>5534	Argument	atof ( value )
>5535	CallExpression	atof ( value )
>5536	ArgumentList	value
>5537	Argument	value
>5538	Identifier	value
>5539	Callee	atof
>5540	Identifier	atof
>5541	Callee	std 
>5542	Identifier	std 
>5543	Identifier	drwnNNGraphLearner 
>5544	Condition	 
>5545	UnaryOp	! strcmp ( name , \"alpha0\" )
>5546	CallExpression	strcmp ( name , \"alpha0\" )
>5547	ArgumentList	name
>5548	Argument	\"alpha0\"
>5549	PrimaryExpression	\"alpha0\"
>5550	Argument	name
>5551	Identifier	name
>5552	Callee	strcmp
>5553	Identifier	strcmp
>5554	UnaryOperator	!
<10=15,11
<11=12
<12=14,13
<20=28,21
<21=25,22
<22=24,23
<25=27,26
<34=36,35
<40=43,42,41
<43=53,44
<44=45
<45=52,46
<46=48,47
<48=49
<49=51,50
<53=54
<54=62,55
<55=58,56
<56=57
<58=59
<59=61,60
<62=63
<79=90,80
<80=87,84,81
<81=83,82
<84=86,85
<87=89,88
<90=91
<91=92
<92=96,93
<93=94
<94=95
<96=97
<97=99,98
<107=118,108
<108=115,112,109
<109=111,110
<112=114,113
<115=117,116
<125=127,126
<131=134,133,132
<134=344,332,135
<135=319,310,307,136
<136=283,170,165,164,163,162,161,160,159,158,157,156,155,154,153,152,151,150,149,148,147,146,145,144,143,142,137
<137=138
<138=140,139
<140=141
<165=166
<166=168,167
<168=169
<170=275,262,259,171
<171=250,239,172
<172=226,217,214,173
<173=207,192,191,190,189,188,187,186,185,184,183,182,181,174
<174=175
<175=179,176
<176=177
<177=178
<179=180
<192=193
<193=206,205,194
<194=200,195
<195=197,196
<197=199,198
<200=202,201
<202=204,203
<207=208
<208=213,212,209
<209=211,210
<214=216,215
<217=218
<218=225,219
<219=221,220
<221=222
<222=224,223
<226=227
<227=228
<228=238,237,229
<229=236,230
<230=232,231
<232=233
<233=235,234
<239=240
<240=249,248,241
<241=247,242
<242=244,243
<244=246,245
<250=251
<251=258,257,252
<252=254,253
<254=256,255
<259=261,260
<262=263
<263=274,264
<264=266,265
<266=267
<267=269,268
<269=273,270
<270=272,271
<275=276
<276=277
<277=282,281,278
<278=280,279
<283=284
<284=306,305,285
<285=304,286
<286=302,287
<287=295,288
<288=289
<289=291,290
<291=292
<292=294,293
<295=296
<296=298,297
<298=299
<299=301,300
<302=303
<307=309,308
<310=311
<311=318,312
<312=314,313
<314=315
<315=317,316
<319=320
<320=321
<321=331,330,322
<322=329,323
<323=325,324
<325=326
<326=328,327
<332=333
<333=343,342,334
<334=341,335
<335=337,336
<337=338
<338=340,339
<344=345
<345=355,354,346
<346=353,347
<347=349,348
<349=350
<350=352,351
<400=414,401
<401=411,408,405,402
<402=404,403
<405=407,406
<408=410,409
<411=413,412
<414=415
<415=416
<416=420,417
<417=418
<418=419
<420=421
<421=423,422
<432=446,433
<433=443,440,437,434
<434=436,435
<437=439,438
<440=442,441
<443=445,444
<454=456,455
<460=463,462,461
<463=938,926,914,497,492,491,490,489,488,487,486,485,484,483,482,481,480,479,478,477,476,475,474,473,472,471,470,469,464
<464=465
<465=467,466
<467=468
<492=493
<493=495,494
<495=496
<497=901,892,889,498
<498=499
<499=881,868,865,500
<500=856,832,816,800,501
<501=787,778,775,502
<502=503
<503=762,753,750,504
<504=735,706,687,668,651,634,505
<505=630,574,506
<506=507
<507=573,572,571,570,569,568,567,566,565,564,563,554,553,552,551,550,549,548,547,546,545,544,543,532,508
<508=509
<509=524,510
<510=511
<511=512
<512=522,513
<513=518,514
<514=515
<515=517,516
<518=519
<519=521,520
<522=523
<524=525
<525=527,526
<527=529,528
<529=531,530
<532=533
<533=541,534
<534=539,535
<535=536
<536=538,537
<539=540
<541=542
<554=555
<555=561,556
<556=559,557
<557=558
<559=560
<561=562
<574=629,628,627,626,625,624,623,622,621,620,619,608,607,606,605,604,603,602,601,600,599,598,597,588,575
<575=576
<576=580,577
<577=578
<578=579
<580=581
<581=583,582
<583=585,584
<585=587,586
<588=589
<589=595,590
<590=593,591
<591=592
<593=594
<595=596
<608=609
<609=617,610
<610=615,611
<611=612
<612=614,613
<615=616
<617=618
<630=631
<631=633,632
<634=635
<635=650,649,636
<636=644,637
<637=639,638
<639=643,640
<640=642,641
<644=646,645
<646=648,647
<651=652
<652=667,666,653
<653=661,654
<654=656,655
<656=660,657
<657=659,658
<661=663,662
<663=665,664
<668=670,669
<670=671
<671=684,672
<672=683,673
<673=675,674
<675=676
<676=678,677
<678=680,679
<680=682,681
<684=686,685
<687=689,688
<689=690
<690=703,691
<691=702,692
<692=694,693
<694=695
<695=697,696
<697=699,698
<699=701,700
<703=705,704
<706=707
<707=734,733,708
<708=732,709
<709=724,710
<710=711
<711=712
<712=722,713
<713=718,714
<714=715
<715=717,716
<718=719
<719=721,720
<722=723
<724=725
<725=727,726
<727=729,728
<729=731,730
<735=736
<736=749,748,737
<737=747,738
<738=744,739
<739=741,740
<741=743,742
<744=746,745
<750=752,751
<753=754
<754=761,755
<755=757,756
<757=758
<758=760,759
<762=763
<763=764
<764=774,773,765
<765=772,766
<766=768,767
<768=769
<769=771,770
<775=777,776
<778=779
<779=786,780
<780=782,781
<782=783
<783=785,784
<787=788
<788=789
<789=799,798,790
<790=797,791
<791=793,792
<793=794
<794=796,795
<800=801
<801=815,814,802
<802=813,803
<803=805,804
<805=807,806
<807=809,808
<809=810
<810=812,811
<816=817
<817=831,830,818
<818=829,819
<819=821,820
<821=823,822
<823=825,824
<825=826
<826=828,827
<832=833
<833=855,854,834
<834=853,835
<835=846,845,836
<836=844,837
<837=843,838
<838=840,839
<840=842,841
<846=847
<847=849,848
<849=850
<850=852,851
<856=857
<857=864,863,858
<858=860,859
<860=862,861
<865=867,866
<868=869
<869=880,870
<870=872,871
<872=873
<873=875,874
<875=879,876
<876=878,877
<881=882
<882=883
<883=888,887,884
<884=886,885
<889=891,890
<892=893
<893=900,894
<894=896,895
<896=897
<897=899,898
<901=902
<902=903
<903=913,912,904
<904=911,905
<905=907,906
<907=908
<908=910,909
<914=915
<915=925,924,916
<916=923,917
<917=919,918
<919=920
<920=922,921
<926=927
<927=937,936,928
<928=935,929
<929=931,930
<931=932
<932=934,933
<938=939
<939=961,960,940
<940=959,941
<941=957,942
<942=950,943
<943=944
<944=946,945
<946=947
<947=949,948
<950=951
<951=953,952
<953=954
<954=956,955
<957=958
<1038=1052,1039
<1039=1049,1046,1043,1040
<1040=1042,1041
<1043=1045,1044
<1046=1048,1047
<1049=1051,1050
<1052=1053
<1053=1054
<1054=1058,1055
<1055=1056
<1056=1057
<1058=1059
<1059=1061,1060
<1070=1084,1071
<1071=1081,1078,1075,1072
<1072=1074,1073
<1075=1077,1076
<1078=1080,1079
<1081=1083,1082
<1092=1094,1093
<1098=1101,1100,1099
<1101=1727,1715,1703,1691,1679,1135,1130,1129,1128,1127,1126,1125,1124,1123,1122,1121,1120,1119,1118,1117,1116,1115,1114,1113,1112,1111,1110,1109,1108,1107,1102
<1102=1103
<1103=1105,1104
<1105=1106
<1130=1131
<1131=1133,1132
<1133=1134
<1135=1666,1657,1654,1136
<1136=1137
<1137=1646,1633,1630,1138
<1138=1621,1597,1564,1419,1403,1387,1376,1365,1347,1323,1241,1226,1211,1210,1209,1208,1207,1206,1205,1204,1203,1202,1201,1200,1191,1190,1189,1188,1187,1186,1185,1184,1183,1182,1181,1180,1169,1159,1149,1139
<1139=1140
<1140=1142,1141
<1142=1144,1143
<1144=1146,1145
<1146=1148,1147
<1149=1150
<1150=1152,1151
<1152=1154,1153
<1154=1156,1155
<1156=1158,1157
<1159=1160
<1160=1162,1161
<1162=1164,1163
<1164=1166,1165
<1166=1168,1167
<1169=1170
<1170=1178,1171
<1171=1176,1172
<1172=1173
<1173=1175,1174
<1176=1177
<1178=1179
<1191=1192
<1192=1198,1193
<1193=1196,1194
<1194=1195
<1196=1197
<1198=1199
<1211=1212
<1212=1225,1224,1213
<1213=1219,1214
<1214=1216,1215
<1216=1218,1217
<1219=1221,1220
<1221=1223,1222
<1226=1227
<1227=1240,1239,1228
<1228=1234,1229
<1229=1231,1230
<1231=1233,1232
<1234=1236,1235
<1236=1238,1237
<1241=1315,1242
<1242=1300,1285,1284,1283,1282,1281,1280,1279,1278,1277,1276,1275,1274,1263,1262,1261,1260,1259,1258,1257,1256,1255,1254,1253,1252,1243
<1243=1244
<1244=1250,1245
<1245=1248,1246
<1246=1247
<1248=1249
<1250=1251
<1263=1264
<1264=1272,1265
<1265=1270,1266
<1266=1267
<1267=1269,1268
<1270=1271
<1272=1273
<1285=1286
<1286=1299,1298,1287
<1287=1293,1288
<1288=1290,1289
<1290=1292,1291
<1293=1295,1294
<1295=1297,1296
<1300=1301
<1301=1314,1313,1302
<1302=1308,1303
<1303=1305,1304
<1305=1307,1306
<1308=1310,1309
<1310=1312,1311
<1315=1316
<1316=1318,1317
<1318=1320,1319
<1320=1322,1321
<1323=1324
<1324=1346,1345,1325
<1325=1344,1326
<1326=1337,1336,1327
<1327=1335,1328
<1328=1334,1329
<1329=1331,1330
<1331=1333,1332
<1337=1338
<1338=1340,1339
<1340=1341
<1341=1343,1342
<1347=1349,1348
<1349=1350
<1350=1358,1351
<1351=1355,1352
<1352=1354,1353
<1355=1357,1356
<1358=1360,1359
<1360=1362,1361
<1362=1364,1363
<1365=1366
<1366=1375,1374,1367
<1367=1369,1368
<1369=1371,1370
<1371=1373,1372
<1376=1377
<1377=1386,1385,1378
<1378=1380,1379
<1380=1382,1381
<1382=1384,1383
<1387=1388
<1388=1402,1401,1389
<1389=1391,1390
<1391=1393,1392
<1393=1394
<1394=1396,1395
<1396=1398,1397
<1398=1400,1399
<1403=1404
<1404=1418,1417,1405
<1405=1407,1406
<1407=1409,1408
<1409=1410
<1410=1412,1411
<1412=1414,1413
<1414=1416,1415
<1419=1560,1420
<1420=1432,1422,1421
<1422=1423
<1423=1425,1424
<1425=1427,1426
<1427=1429,1428
<1429=1431,1430
<1432=1552,1433
<1433=1528,1517,1506,1491,1476,1475,1474,1473,1472,1471,1470,1469,1468,1467,1466,1465,1454,1453,1452,1451,1450,1449,1448,1447,1446,1445,1444,1443,1434
<1434=1435
<1435=1441,1436
<1436=1439,1437
<1437=1438
<1439=1440
<1441=1442
<1454=1455
<1455=1463,1456
<1456=1461,1457
<1457=1458
<1458=1460,1459
<1461=1462
<1463=1464
<1476=1477
<1477=1490,1489,1478
<1478=1484,1479
<1479=1481,1480
<1481=1483,1482
<1484=1486,1485
<1486=1488,1487
<1491=1492
<1492=1505,1504,1493
<1493=1499,1494
<1494=1496,1495
<1496=1498,1497
<1499=1501,1500
<1501=1503,1502
<1506=1507
<1507=1516,1515,1508
<1508=1510,1509
<1510=1512,1511
<1512=1514,1513
<1517=1518
<1518=1527,1526,1519
<1519=1521,1520
<1521=1523,1522
<1523=1525,1524
<1528=1529
<1529=1551,1550,1530
<1530=1549,1531
<1531=1542,1541,1532
<1532=1540,1533
<1533=1539,1534
<1534=1536,1535
<1536=1538,1537
<1542=1543
<1543=1545,1544
<1545=1546
<1546=1548,1547
<1552=1553
<1553=1555,1554
<1555=1557,1556
<1557=1559,1558
<1560=1561
<1561=1563,1562
<1564=1565
<1565=1596,1595,1566
<1566=1594,1567
<1567=1582,1568
<1568=1570,1569
<1570=1572,1571
<1572=1574,1573
<1574=1575
<1575=1577,1576
<1577=1579,1578
<1579=1581,1580
<1582=1584,1583
<1584=1586,1585
<1586=1587
<1587=1589,1588
<1589=1591,1590
<1591=1593,1592
<1597=1599,1598
<1599=1600
<1600=1611,1601
<1601=1603,1602
<1603=1604
<1604=1606,1605
<1606=1608,1607
<1608=1610,1609
<1611=1613,1612
<1613=1614
<1614=1616,1615
<1616=1618,1617
<1618=1620,1619
<1621=1622
<1622=1629,1628,1623
<1623=1625,1624
<1625=1627,1626
<1630=1632,1631
<1633=1634
<1634=1645,1635
<1635=1637,1636
<1637=1638
<1638=1640,1639
<1640=1644,1641
<1641=1643,1642
<1646=1647
<1647=1648
<1648=1653,1652,1649
<1649=1651,1650
<1654=1656,1655
<1657=1658
<1658=1665,1659
<1659=1661,1660
<1661=1662
<1662=1664,1663
<1666=1667
<1667=1668
<1668=1678,1677,1669
<1669=1676,1670
<1670=1672,1671
<1672=1673
<1673=1675,1674
<1679=1680
<1680=1690,1689,1681
<1681=1688,1682
<1682=1684,1683
<1684=1685
<1685=1687,1686
<1691=1692
<1692=1702,1701,1693
<1693=1700,1694
<1694=1696,1695
<1696=1697
<1697=1699,1698
<1703=1704
<1704=1714,1713,1705
<1705=1712,1706
<1706=1708,1707
<1708=1709
<1709=1711,1710
<1715=1716
<1716=1726,1725,1717
<1717=1724,1718
<1718=1720,1719
<1720=1721
<1721=1723,1722
<1727=1728
<1728=1750,1749,1729
<1729=1748,1730
<1730=1746,1731
<1731=1739,1732
<1732=1733
<1733=1735,1734
<1735=1736
<1736=1738,1737
<1739=1740
<1740=1742,1741
<1742=1743
<1743=1745,1744
<1746=1747
<1832=1849,1833
<1833=1846,1843,1840,1837,1834
<1834=1836,1835
<1837=1839,1838
<1840=1842,1841
<1843=1845,1844
<1846=1848,1847
<1849=1850
<1850=1851
<1851=1855,1852
<1852=1853
<1853=1854
<1855=1856
<1856=1858,1857
<1868=1885,1869
<1869=1882,1879,1876,1873,1870
<1870=1872,1871
<1873=1875,1874
<1876=1878,1877
<1879=1881,1880
<1882=1884,1883
<1894=1896,1895
<1900=1903,1902,1901
<1903=1904
<1904=2123,2114,2111,1905
<1905=2106,2090,1986,1981,1980,1979,1978,1977,1976,1975,1974,1973,1972,1971,1970,1969,1968,1967,1961,1906
<1906=1953,1940,1937,1907
<1907=1908
<1908=1909
<1909=1928,1910
<1910=1919,1911
<1911=1915,1912
<1912=1913
<1913=1914
<1915=1916
<1916=1918,1917
<1919=1921,1920
<1921=1923,1922
<1923=1927,1924
<1924=1926,1925
<1928=1930,1929
<1930=1932,1931
<1932=1936,1933
<1933=1935,1934
<1937=1939,1938
<1940=1941
<1941=1952,1942
<1942=1944,1943
<1944=1945
<1945=1947,1946
<1947=1951,1948
<1948=1950,1949
<1953=1954
<1954=1955
<1955=1960,1959,1956
<1956=1958,1957
<1961=1962
<1962=1966,1963
<1963=1965,1964
<1981=1982
<1982=1984,1983
<1984=1985
<1986=2081,1987
<1987=2060,2015,1988
<1988=1989
<1989=2014,1990
<1990=2010,1991
<1991=2003,1992
<1992=1993
<1993=2001,1994
<1994=1997,1995
<1995=1996
<1997=1998
<1998=2000,1999
<2001=2002
<2003=2004
<2004=2006,2005
<2006=2007
<2007=2009,2008
<2010=2011
<2011=2013,2012
<2015=2052,2039,2036,2016
<2016=2017
<2017=2018
<2018=2028,2019
<2019=2021,2020
<2021=2023,2022
<2023=2027,2024
<2024=2026,2025
<2028=2032,2029
<2029=2030
<2030=2031
<2032=2033
<2033=2035,2034
<2036=2038,2037
<2039=2040
<2040=2051,2041
<2041=2043,2042
<2043=2044
<2044=2046,2045
<2046=2050,2047
<2047=2049,2048
<2052=2053
<2053=2054
<2054=2059,2058,2055
<2055=2057,2056
<2060=2061
<2061=2080,2079,2062
<2062=2073,2063
<2063=2065,2064
<2065=2066
<2066=2068,2067
<2068=2072,2069
<2069=2071,2070
<2073=2075,2074
<2075=2076
<2076=2078,2077
<2081=2082
<2082=2089,2083
<2083=2085,2084
<2085=2086
<2086=2088,2087
<2090=2091
<2091=2105,2104,2092
<2092=2103,2093
<2093=2099,2094
<2094=2095
<2095=2096
<2096=2098,2097
<2099=2100
<2100=2102,2101
<2106=2107
<2107=2109,2108
<2109=2110
<2111=2113,2112
<2114=2115
<2115=2122,2116
<2116=2118,2117
<2118=2119
<2119=2121,2120
<2123=2124
<2124=2125
<2125=2135,2134,2126
<2126=2133,2127
<2127=2129,2128
<2129=2130
<2130=2132,2131
<2180=2188,2181
<2181=2185,2182
<2182=2184,2183
<2185=2187,2186
<2188=2224,2209,2189
<2189=2190
<2190=2207,2191
<2191=2192
<2192=2193
<2193=2206,2194
<2194=2200,2195
<2195=2199,2196
<2196=2198,2197
<2200=2202,2201
<2202=2203
<2203=2205,2204
<2207=2208
<2209=2210
<2210=2223,2211
<2211=2213,2212
<2213=2214
<2214=2216,2215
<2216=2218,2217
<2218=2220,2219
<2220=2222,2221
<2224=2225
<2225=2236,2226
<2226=2227
<2227=2228
<2228=2230,2229
<2230=2232,2231
<2232=2233
<2233=2235,2234
<2236=2237
<2249=2251,2250
<2255=2261,2260,2256
<2256=2257
<2257=2259,2258
<2261=2536,2524,2283,2273,2264,2262
<2262=2263
<2264=2265
<2265=2271,2266
<2266=2267
<2267=2268
<2268=2270,2269
<2271=2272
<2273=2274
<2274=2282,2281,2275
<2275=2280,2276
<2276=2278,2277
<2278=2279
<2283=2516,2512,2509,2284
<2284=2500,2490,2480,2473,2469,2464,2303,2290,2285
<2285=2286
<2286=2288,2287
<2288=2289
<2290=2299,2291
<2291=2292
<2292=2293
<2293=2297,2294
<2294=2295
<2295=2296
<2297=2298
<2299=2300
<2300=2302,2301
<2303=2456,2452,2449,2304
<2304=2432,2422,2391,2373,2364,2359,2352,2305
<2305=2348,2332,2306
<2306=2307
<2307=2324,2308
<2308=2320,2313,2309
<2309=2310
<2310=2312,2311
<2313=2314
<2314=2318,2315
<2315=2316
<2316=2317
<2318=2319
<2320=2321
<2321=2323,2322
<2324=2325
<2325=2331,2326
<2326=2328,2327
<2328=2330,2329
<2332=2344,2337,2333
<2333=2334
<2334=2336,2335
<2337=2338
<2338=2343,2339
<2339=2341,2340
<2341=2342
<2344=2345
<2345=2347,2346
<2348=2349
<2349=2351,2350
<2352=2353
<2353=2358,2354
<2354=2356,2355
<2356=2357
<2359=2360
<2360=2362,2361
<2362=2363
<2364=2365
<2365=2371,2366
<2366=2369,2367
<2367=2368
<2369=2370
<2371=2372
<2373=2374
<2374=2390,2389,2375
<2375=2388,2376
<2376=2387,2377
<2377=2386,2378
<2378=2384,2379
<2379=2380
<2380=2381
<2381=2383,2382
<2384=2385
<2391=2418,2413,2392
<2392=2393
<2393=2406,2394
<2394=2395
<2395=2405,2396
<2396=2402,2397
<2397=2399,2398
<2399=2401,2400
<2402=2404,2403
<2406=2407
<2407=2412,2411,2408
<2408=2410,2409
<2413=2414
<2414=2415
<2415=2417,2416
<2418=2419
<2419=2421,2420
<2422=2423
<2423=2431,2430,2424
<2424=2429,2425
<2425=2427,2426
<2427=2428
<2432=2433
<2433=2447,2434
<2434=2435
<2435=2436
<2436=2446,2437
<2437=2445,2438
<2438=2444,2439
<2439=2443,2440
<2440=2442,2441
<2447=2448
<2449=2451,2450
<2452=2453
<2453=2455,2454
<2456=2457
<2457=2458
<2458=2463,2462,2459
<2459=2461,2460
<2464=2465
<2465=2467,2466
<2467=2468
<2469=2470
<2470=2472,2471
<2473=2474
<2474=2479,2478,2475
<2475=2477,2476
<2480=2481
<2481=2489,2488,2482
<2482=2487,2483
<2483=2485,2484
<2485=2486
<2490=2491
<2491=2499,2498,2492
<2492=2497,2493
<2493=2495,2494
<2495=2496
<2500=2501
<2501=2507,2502
<2502=2505,2503
<2503=2504
<2505=2506
<2507=2508
<2509=2511,2510
<2512=2513
<2513=2515,2514
<2516=2517
<2517=2518
<2518=2523,2522,2519
<2519=2521,2520
<2524=2525
<2525=2534,2526
<2526=2532,2527
<2527=2528
<2528=2530,2529
<2530=2531
<2532=2533
<2534=2535
<2536=2537
<2537=2546,2538
<2538=2544,2539
<2539=2540
<2540=2542,2541
<2542=2543
<2544=2545
<2546=2547
<2572=2575,2574,2573
<2575=2701,2694,2687,2591,2587,2580,2578,2576
<2576=2577
<2578=2579
<2580=2581
<2581=2586,2582
<2582=2584,2583
<2584=2585
<2587=2588
<2588=2590,2589
<2591=2681,2670,2665,2592
<2592=2593
<2593=2659,2644,2639,2594
<2594=2628,2595
<2595=2615,2606,2603,2596
<2596=2597
<2597=2598
<2598=2602,2599
<2599=2601,2600
<2603=2605,2604
<2606=2607
<2607=2614,2608
<2608=2610,2609
<2610=2611
<2611=2613,2612
<2615=2616
<2616=2617
<2617=2627,2626,2618
<2618=2625,2619
<2619=2621,2620
<2621=2622
<2622=2624,2623
<2628=2629
<2629=2638,2637,2630
<2630=2636,2631
<2631=2633,2632
<2633=2635,2634
<2639=2641,2640
<2641=2643,2642
<2644=2645
<2645=2656,2646
<2646=2648,2647
<2648=2649
<2649=2651,2650
<2651=2655,2652
<2652=2654,2653
<2656=2658,2657
<2659=2660
<2660=2662,2661
<2662=2664,2663
<2665=2667,2666
<2667=2669,2668
<2670=2671
<2671=2678,2672
<2672=2674,2673
<2674=2675
<2675=2677,2676
<2678=2680,2679
<2681=2682
<2682=2684,2683
<2684=2686,2685
<2687=2688
<2688=2693,2692,2689
<2689=2691,2690
<2694=2695
<2695=2700,2699,2696
<2696=2698,2697
<2701=2702
<2725=2728,2727,2726
<2728=2916,2909,2731,2729
<2729=2730
<2731=2903,2892,2887,2732
<2732=2733
<2733=2881,2866,2861,2734
<2734=2839,2828,2817,2735
<2735=2804,2795,2792,2736
<2736=2737
<2737=2779,2770,2767,2738
<2738=2750,2739
<2739=2740
<2740=2749,2741
<2741=2747,2742
<2742=2745,2743
<2743=2744
<2745=2746
<2747=2748
<2750=2751
<2751=2766,2765,2752
<2752=2764,2753
<2753=2763,2754
<2754=2760,2755
<2755=2757,2756
<2757=2759,2758
<2760=2762,2761
<2767=2769,2768
<2770=2771
<2771=2778,2772
<2772=2774,2773
<2774=2775
<2775=2777,2776
<2779=2780
<2780=2781
<2781=2791,2790,2782
<2782=2789,2783
<2783=2785,2784
<2785=2786
<2786=2788,2787
<2792=2794,2793
<2795=2796
<2796=2803,2797
<2797=2799,2798
<2799=2800
<2800=2802,2801
<2804=2805
<2805=2806
<2806=2816,2815,2807
<2807=2814,2808
<2808=2810,2809
<2810=2811
<2811=2813,2812
<2817=2818
<2818=2827,2826,2819
<2819=2825,2820
<2820=2822,2821
<2822=2824,2823
<2828=2829
<2829=2838,2837,2830
<2830=2836,2831
<2831=2833,2832
<2833=2835,2834
<2839=2840
<2840=2860,2859,2841
<2841=2858,2842
<2842=2851,2850,2843
<2843=2849,2844
<2844=2846,2845
<2846=2848,2847
<2851=2852
<2852=2854,2853
<2854=2855
<2855=2857,2856
<2861=2863,2862
<2863=2865,2864
<2866=2867
<2867=2878,2868
<2868=2870,2869
<2870=2871
<2871=2873,2872
<2873=2877,2874
<2874=2876,2875
<2878=2880,2879
<2881=2882
<2882=2884,2883
<2884=2886,2885
<2887=2889,2888
<2889=2891,2890
<2892=2893
<2893=2900,2894
<2894=2896,2895
<2896=2897
<2897=2899,2898
<2900=2902,2901
<2903=2904
<2904=2906,2905
<2906=2908,2907
<2909=2910
<2910=2915,2914,2911
<2911=2913,2912
<2916=2917
<2917=2922,2921,2918
<2918=2920,2919
<2964=2967,2966,2965
<2967=3127,3126,3125,3124,3123,3122,3121,3120,3119,3118,3117,3116,3115,3114,3113,3112,3111,3110,3046,2984,2977,2970,2968
<2968=2969
<2970=2971
<2971=2975,2972
<2972=2973
<2973=2974
<2975=2976
<2977=2978
<2978=2982,2979
<2979=2980
<2980=2981
<2982=2983
<2984=3038,3029,3026,2985
<2985=2986
<2986=3018,3007,3004,2987
<2987=2988
<2988=2989
<2989=2997,2990
<2990=2992,2991
<2992=2994,2993
<2994=2996,2995
<2997=2999,2998
<2999=3001,3000
<3001=3003,3002
<3004=3006,3005
<3007=3008
<3008=3017,3009
<3009=3011,3010
<3011=3012
<3012=3014,3013
<3014=3016,3015
<3018=3019
<3019=3020
<3020=3025,3024,3021
<3021=3023,3022
<3026=3028,3027
<3029=3030
<3030=3037,3031
<3031=3033,3032
<3033=3034
<3034=3036,3035
<3038=3039
<3039=3040
<3040=3045,3044,3041
<3041=3043,3042
<3046=3102,3093,3090,3047
<3047=3048
<3048=3082,3071,3068,3049
<3049=3050
<3050=3051
<3051=3061,3052
<3052=3060,3053
<3053=3055,3054
<3055=3057,3056
<3057=3059,3058
<3061=3063,3062
<3063=3065,3064
<3065=3067,3066
<3068=3070,3069
<3071=3072
<3072=3081,3073
<3073=3075,3074
<3075=3076
<3076=3078,3077
<3078=3080,3079
<3082=3083
<3083=3084
<3084=3089,3088,3085
<3085=3087,3086
<3090=3092,3091
<3093=3094
<3094=3101,3095
<3095=3097,3096
<3097=3098
<3098=3100,3099
<3102=3103
<3103=3104
<3104=3109,3108,3105
<3105=3107,3106
<3127=3128
<3152=3161,3160,3153
<3153=3157,3154
<3154=3156,3155
<3157=3159,3158
<3161=3433,3343,3330,3319,3312,3164,3162
<3162=3163
<3164=3306,3295,3290,3165
<3165=3276,3177,3176,3175,3174,3173,3172,3171,3170,3169,3168,3167,3166
<3177=3270,3255,3250,3178
<3178=3239,3179
<3179=3226,3217,3214,3180
<3180=3207,3192,3181
<3181=3182
<3182=3191,3183
<3183=3190,3184
<3184=3186,3185
<3186=3187
<3187=3189,3188
<3192=3193
<3193=3206,3205,3194
<3194=3200,3195
<3195=3197,3196
<3197=3199,3198
<3200=3202,3201
<3202=3204,3203
<3207=3208
<3208=3213,3212,3209
<3209=3211,3210
<3214=3216,3215
<3217=3218
<3218=3225,3219
<3219=3221,3220
<3221=3222
<3222=3224,3223
<3226=3227
<3227=3228
<3228=3238,3237,3229
<3229=3236,3230
<3230=3232,3231
<3232=3233
<3233=3235,3234
<3239=3240
<3240=3249,3248,3241
<3241=3247,3242
<3242=3244,3243
<3244=3246,3245
<3250=3252,3251
<3252=3254,3253
<3255=3256
<3256=3267,3257
<3257=3259,3258
<3259=3260
<3260=3262,3261
<3262=3266,3263
<3263=3265,3264
<3267=3269,3268
<3270=3271
<3271=3273,3272
<3273=3275,3274
<3276=3277
<3277=3289,3288,3278
<3278=3287,3279
<3279=3285,3280
<3280=3283,3281
<3281=3282
<3283=3284
<3285=3286
<3290=3292,3291
<3292=3294,3293
<3295=3296
<3296=3303,3297
<3297=3299,3298
<3299=3300
<3300=3302,3301
<3303=3305,3304
<3306=3307
<3307=3309,3308
<3309=3311,3310
<3312=3313
<3313=3318,3317,3314
<3314=3316,3315
<3319=3320
<3320=3329,3321
<3321=3327,3322
<3322=3325,3323
<3323=3324
<3325=3326
<3327=3328
<3330=3331
<3331=3341,3332
<3332=3333
<3333=3334
<3334=3340,3335
<3335=3339,3336
<3336=3338,3337
<3341=3342
<3343=3425,3421,3418,3344
<3344=3406,3394,3382,3370,3345
<3345=3346
<3346=3368,3347
<3347=3348
<3348=3349
<3349=3367,3350
<3350=3366,3351
<3351=3365,3352
<3352=3364,3353
<3353=3363,3354
<3354=3360,3355
<3355=3359,3356
<3356=3358,3357
<3360=3362,3361
<3368=3369
<3370=3371
<3371=3381,3380,3372
<3372=3379,3373
<3373=3375,3374
<3375=3376
<3376=3378,3377
<3382=3383
<3383=3393,3392,3384
<3384=3391,3385
<3385=3387,3386
<3387=3388
<3388=3390,3389
<3394=3395
<3395=3404,3396
<3396=3402,3397
<3397=3398
<3398=3400,3399
<3400=3401
<3402=3403
<3404=3405
<3406=3407
<3407=3416,3408
<3408=3414,3409
<3409=3410
<3410=3412,3411
<3412=3413
<3414=3415
<3416=3417
<3418=3420,3419
<3421=3422
<3422=3424,3423
<3425=3426
<3426=3427
<3427=3432,3431,3428
<3428=3430,3429
<3433=3434
<3475=3478,3477,3476
<3482=3485,3484,3483
<3489=3492,3491,3490
<3492=3728,3723,3716,3621,3607,3501,3493
<3493=3494
<3494=3496,3495
<3496=3500,3497
<3497=3499,3498
<3501=3599,3595,3592,3502
<3502=3569,3540,3503
<3503=3536,3524,3504
<3504=3505
<3505=3506
<3506=3507
<3507=3516,3508
<3508=3515,3509
<3509=3513,3510
<3510=3511
<3511=3512
<3513=3514
<3516=3522,3517
<3517=3520,3518
<3518=3519
<3520=3521
<3522=3523
<3524=3525
<3525=3526
<3526=3528,3527
<3528=3534,3529
<3529=3532,3530
<3530=3531
<3532=3533
<3534=3535
<3536=3537
<3537=3539,3538
<3540=3541
<3541=3568,3567,3542
<3542=3566,3543
<3543=3547,3544
<3544=3546,3545
<3547=3556,3548
<3548=3550,3549
<3550=3552,3551
<3552=3553
<3553=3555,3554
<3556=3562,3557
<3557=3560,3558
<3558=3559
<3560=3561
<3562=3563
<3563=3565,3564
<3569=3570
<3570=3591,3590,3571
<3571=3589,3572
<3572=3581,3573
<3573=3575,3574
<3575=3577,3576
<3577=3578
<3578=3580,3579
<3581=3585,3582
<3582=3583
<3583=3584
<3585=3586
<3586=3588,3587
<3592=3594,3593
<3595=3596
<3596=3598,3597
<3599=3600
<3600=3601
<3601=3606,3605,3602
<3602=3604,3603
<3607=3608
<3608=3620,3619,3609
<3609=3618,3610
<3610=3616,3611
<3611=3614,3612
<3612=3613
<3614=3615
<3616=3617
<3621=3710,3699,3694,3622
<3622=3623
<3623=3688,3673,3668,3624
<3624=3667,3666,3665,3664,3663,3662,3661,3660,3659,3658,3657,3656,3655,3654,3653,3652,3651,3650,3649,3648,3647,3646,3645,3644,3643,3642,3641,3640,3639,3638,3637,3636,3635,3634,3625
<3625=3626
<3626=3630,3627
<3627=3628
<3628=3629
<3630=3631
<3631=3633,3632
<3668=3670,3669
<3670=3672,3671
<3673=3674
<3674=3685,3675
<3675=3677,3676
<3677=3678
<3678=3680,3679
<3680=3684,3681
<3681=3683,3682
<3685=3687,3686
<3688=3689
<3689=3691,3690
<3691=3693,3692
<3694=3696,3695
<3696=3698,3697
<3699=3700
<3700=3707,3701
<3701=3703,3702
<3703=3704
<3704=3706,3705
<3707=3709,3708
<3710=3711
<3711=3713,3712
<3713=3715,3714
<3716=3717
<3717=3722,3721,3718
<3718=3720,3719
<3723=3724
<3724=3727,3726,3725
<3728=3729
<3729=3732,3731,3730
<3758=3766,3759
<3759=3763,3760
<3760=3762,3761
<3763=3765,3764
<3766=3788,3777,3767
<3767=3768
<3768=3775,3769
<3769=3770
<3770=3771
<3771=3773,3772
<3773=3774
<3775=3776
<3777=3778
<3778=3787,3779
<3779=3785,3780
<3780=3783,3781
<3781=3782
<3783=3784
<3785=3786
<3788=3789
<3789=3798,3790
<3790=3796,3791
<3791=3792
<3792=3794,3793
<3794=3795
<3796=3797
<3798=3799
<3799=3801,3800
<3813=3815,3814
<3819=3825,3824,3820
<3820=3821
<3821=3823,3822
<3825=3842,3831,3826
<3826=3827
<3827=3829,3828
<3829=3830
<3831=3832
<3832=3841,3833
<3833=3835,3834
<3835=3837,3836
<3837=3838
<3838=3840,3839
<3842=3843
<3843=3867,3844
<3844=3845
<3845=3846
<3846=3857,3847
<3847=3851,3848
<3848=3850,3849
<3851=3853,3852
<3853=3854
<3854=3856,3855
<3857=3861,3858
<3858=3860,3859
<3861=3863,3862
<3863=3864
<3864=3866,3865
<3867=3868
<3878=3881,3880,3879
<3881=3882
<3882=3883
<3883=3885,3884
<3885=3886
<3886=3888,3887
<3888=3890,3889
<3890=3891
<3891=3893,3892
<3900=3903,3902,3901
<3903=4094,4085,4084,4054,4049,4014,4009,4002,3997,3951,3944,3917,3910,3908,3904
<3904=3905
<3905=3907,3906
<3908=3909
<3910=3911
<3911=3913,3912
<3913=3914
<3914=3916,3915
<3917=3936,3927,3924,3918
<3918=3923,3919
<3919=3920
<3920=3922,3921
<3924=3926,3925
<3927=3928
<3928=3935,3929
<3929=3931,3930
<3931=3932
<3932=3934,3933
<3936=3937
<3937=3938
<3938=3943,3942,3939
<3939=3941,3940
<3944=3945
<3945=3947,3946
<3947=3948
<3948=3950,3949
<3951=3989,3985,3982,3952
<3952=3964,3953
<3953=3954
<3954=3960,3955
<3955=3956
<3956=3957
<3957=3959,3958
<3960=3961
<3961=3963,3962
<3964=3965
<3965=3979,3966
<3966=3978,3967
<3967=3975,3968
<3968=3972,3969
<3969=3971,3970
<3972=3974,3973
<3975=3977,3976
<3979=3981,3980
<3982=3984,3983
<3985=3986
<3986=3988,3987
<3989=3990
<3990=3991
<3991=3996,3995,3992
<3992=3994,3993
<3997=3998
<3998=4001,4000,3999
<4002=4003
<4003=4005,4004
<4005=4006
<4006=4008,4007
<4009=4010
<4010=4013,4012,4011
<4014=4041,4032,4029,4015
<4015=4016
<4016=4017
<4017=4021,4018
<4018=4019
<4019=4020
<4021=4022
<4022=4024,4023
<4024=4028,4025
<4025=4027,4026
<4029=4031,4030
<4032=4033
<4033=4040,4034
<4034=4036,4035
<4036=4037
<4037=4039,4038
<4041=4042
<4042=4043
<4043=4048,4047,4044
<4044=4046,4045
<4049=4050
<4050=4053,4052,4051
<4054=4055
<4055=4083,4082,4056
<4056=4081,4057
<4057=4079,4058
<4058=4070,4059
<4059=4060
<4060=4068,4061
<4061=4064,4062
<4062=4063
<4064=4065
<4065=4067,4066
<4068=4069
<4070=4071
<4071=4078,4072
<4072=4074,4073
<4074=4075
<4075=4077,4076
<4079=4080
<4085=4086
<4086=4093,4092,4087
<4087=4091,4088
<4088=4090,4089
<4094=4095
<4123=4132,4131,4124
<4124=4128,4125
<4125=4127,4126
<4128=4130,4129
<4132=4236,4230,4226,4217,4200,4135,4133
<4133=4134
<4135=4186,4136
<4136=4174,4137
<4137=4138
<4138=4173,4139
<4139=4172,4140
<4140=4147,4141
<4141=4143,4142
<4143=4144
<4144=4146,4145
<4147=4149,4148
<4149=4150
<4150=4152,4151
<4152=4168,4153
<4153=4154
<4154=4155
<4155=4166,4156
<4156=4159,4157
<4157=4158
<4159=4160
<4160=4162,4161
<4162=4163
<4163=4165,4164
<4166=4167
<4168=4169
<4169=4171,4170
<4174=4175
<4175=4185,4184,4176
<4176=4183,4177
<4177=4179,4178
<4179=4180
<4180=4182,4181
<4186=4187
<4187=4189,4188
<4189=4190
<4190=4192,4191
<4192=4194,4193
<4194=4196,4195
<4196=4197
<4197=4199,4198
<4200=4201
<4201=4216,4215,4202
<4202=4214,4203
<4203=4205,4204
<4205=4206
<4206=4208,4207
<4208=4210,4209
<4210=4211
<4211=4213,4212
<4217=4218
<4218=4222,4219
<4219=4220
<4220=4221
<4222=4223
<4223=4225,4224
<4226=4227
<4227=4229,4228
<4230=4231
<4231=4235,4232
<4232=4234,4233
<4236=4237
<4258=4261,4260,4259
<4261=4273,4262
<4262=4263
<4263=4272,4264
<4264=4270,4265
<4265=4268,4266
<4266=4267
<4268=4269
<4270=4271
<4273=4274
<4274=4281,4275
<4275=4276
<4276=4277
<4277=4279,4278
<4279=4280
<4281=4282
<4282=4284,4283
<4293=4301,4294
<4294=4298,4295
<4295=4297,4296
<4298=4300,4299
<4301=4323,4312,4302
<4302=4303
<4303=4310,4304
<4304=4305
<4305=4306
<4306=4308,4307
<4308=4309
<4310=4311
<4312=4313
<4313=4322,4314
<4314=4320,4315
<4315=4318,4316
<4316=4317
<4318=4319
<4320=4321
<4323=4324
<4324=4333,4325
<4325=4331,4326
<4326=4327
<4327=4329,4328
<4329=4330
<4331=4332
<4333=4334
<4334=4336,4335
<4348=4350,4349
<4354=4360,4359,4355
<4355=4356
<4356=4358,4357
<4360=4379,4378,4377,4376,4375,4374,4373,4372,4371,4370,4369,4368,4367,4366,4361
<4361=4362
<4362=4364,4363
<4364=4365
<4379=4380
<4380=4404,4381
<4381=4382
<4382=4383
<4383=4394,4384
<4384=4388,4385
<4385=4387,4386
<4388=4390,4389
<4390=4391
<4391=4393,4392
<4394=4398,4395
<4395=4397,4396
<4398=4400,4399
<4400=4401
<4401=4403,4402
<4404=4405
<4413=4416,4415,4414
<4416=4417
<4417=4418
<4423=4426,4425,4424
<4426=4656,4632,4626,4625,4595,4590,4555,4550,4543,4538,4492,4485,4458,4451,4447,4445,4444,4443,4442,4441,4440,4439,4438,4437,4436,4435,4434,4433,4432,4431,4430,4429,4428,4427
<4445=4446
<4447=4448
<4448=4450,4449
<4451=4452
<4452=4454,4453
<4454=4455
<4455=4457,4456
<4458=4477,4468,4465,4459
<4459=4464,4460
<4460=4461
<4461=4463,4462
<4465=4467,4466
<4468=4469
<4469=4476,4470
<4470=4472,4471
<4472=4473
<4473=4475,4474
<4477=4478
<4478=4479
<4479=4484,4483,4480
<4480=4482,4481
<4485=4486
<4486=4488,4487
<4488=4489
<4489=4491,4490
<4492=4530,4526,4523,4493
<4493=4505,4494
<4494=4495
<4495=4501,4496
<4496=4497
<4497=4498
<4498=4500,4499
<4501=4502
<4502=4504,4503
<4505=4506
<4506=4520,4507
<4507=4519,4508
<4508=4516,4509
<4509=4513,4510
<4510=4512,4511
<4513=4515,4514
<4516=4518,4517
<4520=4522,4521
<4523=4525,4524
<4526=4527
<4527=4529,4528
<4530=4531
<4531=4532
<4532=4537,4536,4533
<4533=4535,4534
<4538=4539
<4539=4542,4541,4540
<4543=4544
<4544=4546,4545
<4546=4547
<4547=4549,4548
<4550=4551
<4551=4554,4553,4552
<4555=4582,4573,4570,4556
<4556=4557
<4557=4558
<4558=4562,4559
<4559=4560
<4560=4561
<4562=4563
<4563=4565,4564
<4565=4569,4566
<4566=4568,4567
<4570=4572,4571
<4573=4574
<4574=4581,4575
<4575=4577,4576
<4577=4578
<4578=4580,4579
<4582=4583
<4583=4584
<4584=4589,4588,4585
<4585=4587,4586
<4590=4591
<4591=4594,4593,4592
<4595=4596
<4596=4624,4623,4597
<4597=4622,4598
<4598=4620,4599
<4599=4611,4600
<4600=4601
<4601=4609,4602
<4602=4605,4603
<4603=4604
<4605=4606
<4606=4608,4607
<4609=4610
<4611=4612
<4612=4619,4613
<4613=4615,4614
<4615=4616
<4616=4618,4617
<4620=4621
<4626=4627
<4627=4631,4628
<4628=4630,4629
<4632=4633
<4633=4655,4654,4634
<4634=4653,4635
<4635=4651,4636
<4636=4644,4637
<4637=4638
<4638=4640,4639
<4640=4641
<4641=4643,4642
<4644=4645
<4645=4647,4646
<4647=4648
<4648=4650,4649
<4651=4652
<4656=4657
<4689=4698,4697,4690
<4690=4694,4691
<4691=4693,4692
<4694=4696,4695
<4698=4699
<4699=4700
<4700=4704,4701
<4701=4703,4702
<4711=4714,4713,4712
<4714=4726,4715
<4715=4716
<4716=4725,4717
<4717=4723,4718
<4718=4721,4719
<4719=4720
<4721=4722
<4723=4724
<4726=4727
<4727=4734,4728
<4728=4729
<4729=4730
<4730=4732,4731
<4732=4733
<4734=4735
<4735=4737,4736
<4746=4754,4747
<4747=4751,4748
<4748=4750,4749
<4751=4753,4752
<4760=4762,4761
<4766=4769,4768,4767
<4769=4923,4916,4772,4770
<4770=4771
<4772=4910,4899,4894,4773
<4773=4774
<4774=4888,4873,4868,4775
<4775=4844,4822,4787,4776
<4776=4777
<4777=4786,4778
<4778=4784,4779
<4779=4782,4780
<4780=4781
<4782=4783
<4784=4785
<4787=4788
<4788=4821,4820,4789
<4789=4819,4790
<4790=4818,4791
<4791=4806,4792
<4792=4794,4793
<4794=4796,4795
<4796=4798,4797
<4798=4799
<4799=4801,4800
<4801=4803,4802
<4803=4805,4804
<4806=4808,4807
<4808=4810,4809
<4810=4811
<4811=4813,4812
<4813=4815,4814
<4815=4817,4816
<4822=4823
<4823=4843,4842,4824
<4824=4841,4825
<4825=4834,4833,4826
<4826=4832,4827
<4827=4829,4828
<4829=4831,4830
<4834=4835
<4835=4837,4836
<4837=4838
<4838=4840,4839
<4844=4846,4845
<4846=4847
<4847=4858,4848
<4848=4850,4849
<4850=4851
<4851=4853,4852
<4853=4855,4854
<4855=4857,4856
<4858=4860,4859
<4860=4861
<4861=4863,4862
<4863=4865,4864
<4865=4867,4866
<4868=4870,4869
<4870=4872,4871
<4873=4874
<4874=4885,4875
<4875=4877,4876
<4877=4878
<4878=4880,4879
<4880=4884,4881
<4881=4883,4882
<4885=4887,4886
<4888=4889
<4889=4891,4890
<4891=4893,4892
<4894=4896,4895
<4896=4898,4897
<4899=4900
<4900=4907,4901
<4901=4903,4902
<4903=4904
<4904=4906,4905
<4907=4909,4908
<4910=4911
<4911=4913,4912
<4913=4915,4914
<4916=4917
<4917=4922,4921,4918
<4918=4920,4919
<4923=4924
<4924=4929,4928,4925
<4925=4927,4926
<4965=4973,4966
<4966=4970,4967
<4967=4969,4968
<4970=4972,4971
<4973=4995,4984,4974
<4974=4975
<4975=4982,4976
<4976=4977
<4977=4978
<4978=4980,4979
<4980=4981
<4982=4983
<4984=4985
<4985=4994,4986
<4986=4992,4987
<4987=4990,4988
<4988=4989
<4990=4991
<4992=4993
<4995=4996
<4996=5017,4997
<4997=5015,4998
<4998=4999
<4999=5013,5000
<5000=5011,5006,5001
<5001=5002
<5002=5004,5003
<5004=5005
<5006=5007
<5007=5009,5008
<5009=5010
<5011=5012
<5013=5014
<5015=5016
<5017=5018
<5018=5020,5019
<5034=5036,5035
<5040=5046,5045,5041
<5041=5042
<5042=5044,5043
<5046=5056,5052,5047
<5047=5048
<5048=5050,5049
<5050=5051
<5052=5053
<5053=5055,5054
<5056=5057
<5057=5081,5058
<5058=5059
<5059=5060
<5060=5071,5061
<5061=5065,5062
<5062=5064,5063
<5065=5067,5066
<5067=5068
<5068=5070,5069
<5071=5075,5072
<5072=5074,5073
<5075=5077,5076
<5077=5078
<5078=5080,5079
<5081=5082
<5091=5094,5093,5092
<5094=5095
<5095=5096
<5101=5104,5103,5102
<5104=5302,5278,5271,5135,5131,5129,5125,5123,5122,5121,5120,5119,5118,5117,5116,5115,5114,5113,5112,5111,5110,5109,5108,5107,5106,5105
<5123=5124
<5125=5126
<5126=5128,5127
<5129=5130
<5131=5132
<5132=5134,5133
<5135=5265,5254,5249,5136
<5136=5137
<5137=5243,5228,5223,5138
<5138=5212,5139
<5139=5199,5190,5187,5140
<5140=5180,5179,5178,5177,5176,5175,5174,5173,5172,5171,5170,5169,5168,5167,5166,5165,5164,5163,5162,5161,5160,5159,5158,5157,5156,5155,5154,5153,5152,5141
<5141=5142
<5142=5151,5143
<5143=5150,5144
<5144=5146,5145
<5146=5147
<5147=5149,5148
<5180=5181
<5181=5186,5185,5182
<5182=5184,5183
<5187=5189,5188
<5190=5191
<5191=5198,5192
<5192=5194,5193
<5194=5195
<5195=5197,5196
<5199=5200
<5200=5201
<5201=5211,5210,5202
<5202=5209,5203
<5203=5205,5204
<5205=5206
<5206=5208,5207
<5212=5213
<5213=5222,5221,5214
<5214=5220,5215
<5215=5217,5216
<5217=5219,5218
<5223=5225,5224
<5225=5227,5226
<5228=5229
<5229=5240,5230
<5230=5232,5231
<5232=5233
<5233=5235,5234
<5235=5239,5236
<5236=5238,5237
<5240=5242,5241
<5243=5244
<5244=5246,5245
<5246=5248,5247
<5249=5251,5250
<5251=5253,5252
<5254=5255
<5255=5262,5256
<5256=5258,5257
<5258=5259
<5259=5261,5260
<5262=5264,5263
<5265=5266
<5266=5268,5267
<5268=5270,5269
<5271=5272
<5272=5277,5276,5273
<5273=5275,5274
<5278=5279
<5279=5301,5300,5280
<5280=5299,5281
<5281=5297,5282
<5282=5290,5283
<5283=5284
<5284=5286,5285
<5286=5287
<5287=5289,5288
<5290=5291
<5291=5293,5292
<5293=5294
<5294=5296,5295
<5297=5298
<5302=5303
<5331=5340,5339,5332
<5332=5336,5333
<5333=5335,5334
<5336=5338,5337
<5340=5341
<5341=5342
<5342=5346,5343
<5343=5345,5344
<5353=5356,5355,5354
<5356=5368,5357
<5357=5358
<5358=5367,5359
<5359=5365,5360
<5360=5363,5361
<5361=5362
<5363=5364
<5365=5366
<5368=5369
<5369=5388,5370
<5370=5371
<5371=5372
<5372=5386,5373
<5373=5384,5379,5374
<5374=5375
<5375=5377,5376
<5377=5378
<5379=5380
<5380=5382,5381
<5382=5383
<5384=5385
<5386=5387
<5388=5389
<5389=5391,5390
<5403=5405,5404
<5409=5411,5410
<5415=5421,5420,5416
<5416=5417
<5417=5419,5418
<5421=5438,5430,5422
<5422=5423
<5423=5429,5424
<5424=5428,5425
<5425=5427,5426
<5430=5431
<5431=5437,5432
<5432=5436,5433
<5433=5435,5434
<5438=5439
<5439=5445,5440
<5440=5444,5441
<5441=5443,5442
<5450=5459,5458,5451
<5451=5455,5452
<5452=5454,5453
<5455=5457,5456
<5459=5460
<5460=5544,5527,5461
<5461=5462
<5462=5516,5506,5463
<5463=5464
<5464=5495,5485,5465
<5465=5466
<5466=5467
<5467=5468
<5468=5483,5469
<5469=5470
<5470=5471
<5471=5482,5472
<5472=5481,5473
<5473=5480,5474
<5474=5476,5475
<5476=5477
<5477=5479,5478
<5483=5484
<5485=5486
<5486=5487
<5487=5494,5488
<5488=5492,5489
<5489=5490
<5490=5491
<5492=5493
<5495=5496
<5496=5505,5497
<5497=5503,5498
<5498=5501,5499
<5499=5500
<5501=5502
<5503=5504
<5506=5507
<5507=5508
<5508=5515,5509
<5509=5513,5510
<5510=5511
<5511=5512
<5513=5514
<5516=5517
<5517=5526,5518
<5518=5524,5519
<5519=5522,5520
<5520=5521
<5522=5523
<5524=5525
<5527=5528
<5528=5529
<5529=5543,5530
<5530=5541,5531
<5531=5534,5532
<5532=5533
<5534=5535
<5535=5539,5536
<5536=5537
<5537=5538
<5539=5540
<5541=5542
<5544=5545
<5545=5554,5546
<5546=5552,5547
<5547=5550,5548
<5548=5549
<5550=5551
<5552=5553
