>3	FunctionDef	callFunction (mxArray * plhs [ ] , const mxArray * prhs [ ] , const long nlhs , const long nrhs)
>4	ParameterList	mxArray * plhs [ ] , const mxArray * prhs [ ] , const long nlhs , const long nrhs
>5	Parameter	 
>6	Identifier	nrhs
>7	ParameterType	const long
>8	Parameter	 
>9	Identifier	nlhs
>10	ParameterType	const long
>11	Parameter	 
>12	Identifier	prhs
>13	ParameterType	const mxArray * [ ]
>14	Parameter	 
>15	Identifier	plhs
>16	ParameterType	mxArray * [ ]
>17	ReturnType	inline void
>18	CompoundStatement	 
>19	ExpressionStatement	 
>20	Identifier	X
>21	Statement	 
>22	ExpressionStatement	 
>23	Identifier	trainer
>24	Statement	 
>25	IfStatement	if ( nlhs == 2 )
>26	CompoundStatement	 
>27	ExpressionStatement	 
>28	CallExpression	mxSetField ( plhs [ 1 ] , 0 , \"iter\" , priter )
>29	ArgumentList	plhs [ 1 ]
>30	Argument	priter
>31	Identifier	priter
>32	Argument	\"iter\"
>33	PrimaryExpression	\"iter\"
>34	Argument	0
>35	PrimaryExpression	0
>36	Argument	plhs [ 1 ]
>37	ArrayIndexing	plhs [ 1 ]
>38	PrimaryExpression	1
>39	Identifier	plhs
>40	Callee	mxSetField
>41	Identifier	mxSetField
>42	ExpressionStatement	 
>43	AssignmentExpr	* mxGetPr ( priter ) = static_cast < T > ( trainer -> getIter ( ) )
>44	RelationalExpression	static_cast < T > ( trainer -> getIter ( ) )
>45	RelationalExpression	T > ( trainer -> getIter ( ) )
>46	CallExpression	trainer -> getIter ( )
>47	ArgumentList	 
>48	Callee	trainer -> getIter
>49	PtrMemberAccess	trainer -> getIter
>50	Identifier	getIter
>51	Identifier	trainer
>52	Identifier	T
>53	Identifier	static_cast
>54	UnaryOp	* mxGetPr ( priter )
>55	CallExpression	mxGetPr ( priter )
>56	ArgumentList	priter
>57	Argument	priter
>58	Identifier	priter
>59	Callee	mxGetPr
>60	Identifier	mxGetPr
>61	UnaryOperator	*
>62	ExpressionStatement	 
>63	Statement	 
>64	Statement	 
>65	Statement	 
>66	Statement	 
>67	Statement	 
>68	Statement	 
>69	Statement	 
>70	Statement	 
>71	Statement	 
>72	Statement	 
>73	ExpressionStatement	 
>74	CallExpression	mxSetField ( plhs [ 1 ] , 0 , \"B\" , prB )
>75	ArgumentList	plhs [ 1 ]
>76	Argument	prB
>77	Identifier	prB
>78	Argument	\"B\"
>79	PrimaryExpression	\"B\"
>80	Argument	0
>81	PrimaryExpression	0
>82	Argument	plhs [ 1 ]
>83	ArrayIndexing	plhs [ 1 ]
>84	PrimaryExpression	1
>85	Identifier	plhs
>86	Callee	mxSetField
>87	Identifier	mxSetField
>88	ExpressionStatement	 
>89	CallExpression	trainer -> getB ( B )
>90	ArgumentList	B
>91	Argument	B
>92	Identifier	B
>93	Callee	trainer -> getB
>94	PtrMemberAccess	trainer -> getB
>95	Identifier	getB
>96	Identifier	trainer
>97	IdentifierDeclStatement	 
>98	IdentifierDecl	B ( pr_B , n , K )
>99	Expression	pr_B , n , K
>100	Expression	n , K
>101	Identifier	K
>102	Identifier	n
>103	Identifier	pr_B
>104	Identifier	B
>105	IdentifierDeclType	Matrix < T >
>106	ExpressionStatement	 
>107	CallExpression	mxGetPr ( prB )
>108	ArgumentList	prB
>109	Argument	prB
>110	Identifier	prB
>111	Callee	mxGetPr
>112	Identifier	mxGetPr
>113	Statement	 
>114	Statement	 
>115	Statement	 
>116	Statement	 
>117	Statement	 
>118	Statement	 
>119	Statement	 
>120	Statement	 
>121	Statement	 
>122	IdentifierDeclStatement	 
>123	IdentifierDecl	* prB = createMatrix < T > ( n , K )
>124	AssignmentExpr	* prB = createMatrix < T > ( n , K )
>125	RelationalExpression	createMatrix < T > ( n , K )
>126	RelationalExpression	T > ( n , K )
>127	Expression	n , K
>128	Identifier	K
>129	Identifier	n
>130	Identifier	T
>131	Identifier	createMatrix
>132	Identifier	prB
>133	Identifier	prB
>134	IdentifierDeclType	mxArray *
>135	ExpressionStatement	 
>136	CallExpression	mxSetField ( plhs [ 1 ] , 0 , \"A\" , prA )
>137	ArgumentList	plhs [ 1 ]
>138	Argument	prA
>139	Identifier	prA
>140	Argument	\"A\"
>141	PrimaryExpression	\"A\"
>142	Argument	0
>143	PrimaryExpression	0
>144	Argument	plhs [ 1 ]
>145	ArrayIndexing	plhs [ 1 ]
>146	PrimaryExpression	1
>147	Identifier	plhs
>148	Callee	mxSetField
>149	Identifier	mxSetField
>150	ExpressionStatement	 
>151	CallExpression	trainer -> getA ( A )
>152	ArgumentList	A
>153	Argument	A
>154	Identifier	A
>155	Callee	trainer -> getA
>156	PtrMemberAccess	trainer -> getA
>157	Identifier	getA
>158	Identifier	trainer
>159	IdentifierDeclStatement	 
>160	IdentifierDecl	A ( pr_A , K , K )
>161	Expression	pr_A , K , K
>162	Expression	K , K
>163	Identifier	K
>164	Identifier	K
>165	Identifier	pr_A
>166	Identifier	A
>167	IdentifierDeclType	Matrix < T >
>168	ExpressionStatement	 
>169	CallExpression	mxGetPr ( prA )
>170	ArgumentList	prA
>171	Argument	prA
>172	Identifier	prA
>173	Callee	mxGetPr
>174	Identifier	mxGetPr
>175	Statement	 
>176	Statement	 
>177	Statement	 
>178	Statement	 
>179	Statement	 
>180	Statement	 
>181	Statement	 
>182	Statement	 
>183	Statement	 
>184	IdentifierDeclStatement	 
>185	IdentifierDecl	* prA = createMatrix < T > ( K , K )
>186	AssignmentExpr	* prA = createMatrix < T > ( K , K )
>187	RelationalExpression	createMatrix < T > ( K , K )
>188	RelationalExpression	T > ( K , K )
>189	Expression	K , K
>190	Identifier	K
>191	Identifier	K
>192	Identifier	T
>193	Identifier	createMatrix
>194	Identifier	prA
>195	Identifier	prA
>196	IdentifierDeclType	mxArray *
>197	ExpressionStatement	 
>198	AssignmentExpr	plhs [ 1 ] = mxCreateStructArray ( 1 , dims , nfields , names )
>199	CallExpression	mxCreateStructArray ( 1 , dims , nfields , names )
>200	ArgumentList	1
>201	Argument	names
>202	Identifier	names
>203	Argument	nfields
>204	Identifier	nfields
>205	Argument	dims
>206	Identifier	dims
>207	Argument	1
>208	PrimaryExpression	1
>209	Callee	mxCreateStructArray
>210	Identifier	mxCreateStructArray
>211	ArrayIndexing	plhs [ 1 ]
>212	PrimaryExpression	1
>213	Identifier	plhs
>214	IdentifierDeclStatement	 
>215	IdentifierDecl	* names [ ] = { \"A\" , \"B\" , \"iter\" }
>216	AssignmentExpr	* names [ ] = { \"A\" , \"B\" , \"iter\" }
>217	InitializerList	\"A\"
>218	PrimaryExpression	\"iter\"
>219	PrimaryExpression	\"B\"
>220	PrimaryExpression	\"A\"
>221	Identifier	names
>222	Identifier	names
>223	IdentifierDeclType	const char * [ ]
>224	IdentifierDeclStatement	 
>225	IdentifierDecl	nfields = 3
>226	AssignmentExpr	nfields = 3
>227	PrimaryExpression	3
>228	Identifier	nfields
>229	Identifier	nfields
>230	IdentifierDeclType	long
>231	IdentifierDeclStatement	 
>232	IdentifierDecl	dims [ 1 ] = { 1 }
>233	AssignmentExpr	dims [ 1 ] = { 1 }
>234	InitializerList	1
>235	PrimaryExpression	1
>236	Identifier	dims
>237	PrimaryExpression	1
>238	Identifier	dims
>239	IdentifierDeclType	mwSize [ 1 ]
>240	Condition	 
>241	EqualityExpression	nlhs == 2
>242	PrimaryExpression	2
>243	Identifier	nlhs
>244	ExpressionStatement	 
>245	CallExpression	D2 . copy ( D )
>246	ArgumentList	D
>247	Argument	D
>248	Identifier	D
>249	Callee	D2 . copy
>250	MemberAccess	D2 . copy
>251	Identifier	copy
>252	Identifier	D2
>253	IdentifierDeclStatement	 
>254	IdentifierDecl	D2 ( prD2 , n , K )
>255	Expression	prD2 , n , K
>256	Expression	n , K
>257	Identifier	K
>258	Identifier	n
>259	Identifier	prD2
>260	Identifier	D2
>261	IdentifierDeclType	Matrix < T >
>262	ExpressionStatement	 
>263	CallExpression	mxGetPr ( plhs [ 0 ] )
>264	ArgumentList	plhs [ 0 ]
>265	Argument	plhs [ 0 ]
>266	ArrayIndexing	plhs [ 0 ]
>267	PrimaryExpression	0
>268	Identifier	plhs
>269	Callee	mxGetPr
>270	Identifier	mxGetPr
>271	Statement	 
>272	Statement	 
>273	Statement	 
>274	Statement	 
>275	Statement	 
>276	Statement	 
>277	Statement	 
>278	Statement	 
>279	Statement	 
>280	ExpressionStatement	 
>281	AssignmentExpr	plhs [ 0 ] = createMatrix < T > ( n , K )
>282	RelationalExpression	createMatrix < T > ( n , K )
>283	RelationalExpression	T > ( n , K )
>284	Expression	n , K
>285	Identifier	K
>286	Identifier	n
>287	Identifier	T
>288	Identifier	createMatrix
>289	ArrayIndexing	plhs [ 0 ]
>290	PrimaryExpression	0
>291	Identifier	plhs
>292	IdentifierDeclStatement	 
>293	IdentifierDecl	K = D . n ( )
>294	AssignmentExpr	K = D . n ( )
>295	CallExpression	D . n ( )
>296	ArgumentList	 
>297	Callee	D . n
>298	MemberAccess	D . n
>299	Identifier	n
>300	Identifier	D
>301	Identifier	K
>302	Identifier	K
>303	IdentifierDeclType	long
>304	ExpressionStatement	 
>305	CallExpression	trainer -> getD ( D )
>306	ArgumentList	D
>307	Argument	D
>308	Identifier	D
>309	Callee	trainer -> getD
>310	PtrMemberAccess	trainer -> getD
>311	Identifier	getD
>312	Identifier	trainer
>313	IdentifierDeclStatement	 
>314	IdentifierDecl	D
>315	Identifier	D
>316	IdentifierDeclType	Matrix < T >
>317	IfStatement	if ( param . log )
>318	ExpressionStatement	 
>319	CallExpression	mxFree ( param . logName )
>320	ArgumentList	param . logName
>321	Argument	param . logName
>322	MemberAccess	param . logName
>323	Identifier	logName
>324	Identifier	param
>325	Callee	mxFree
>326	Identifier	mxFree
>327	Condition	 
>328	MemberAccess	param . log
>329	Identifier	log
>330	Identifier	param
>331	ExpressionStatement	 
>332	CallExpression	trainer -> train ( * X , param )
>333	ArgumentList	* X
>334	Argument	param
>335	Identifier	param
>336	Argument	* X
>337	UnaryOp	* X
>338	Identifier	X
>339	UnaryOperator	*
>340	Callee	trainer -> train
>341	PtrMemberAccess	trainer -> train
>342	Identifier	train
>343	Identifier	trainer
>344	IfStatement	if ( param . log )
>345	CompoundStatement	 
>346	ExpressionStatement	 
>347	CallExpression	mxGetString ( stringData , param . logName , stringLength )
>348	ArgumentList	stringData
>349	Argument	stringLength
>350	Identifier	stringLength
>351	Argument	param . logName
>352	MemberAccess	param . logName
>353	Identifier	logName
>354	Identifier	param
>355	Argument	stringData
>356	Identifier	stringData
>357	Callee	mxGetString
>358	Identifier	mxGetString
>359	ExpressionStatement	 
>360	AssignmentExpr	param . logName = new char [ stringLength ]
>361	Identifier	stringLength
>362	MemberAccess	param . logName
>363	Identifier	logName
>364	Identifier	param
>365	IdentifierDeclStatement	 
>366	IdentifierDecl	stringLength = mxGetN ( stringData ) + 1
>367	AssignmentExpr	stringLength = mxGetN ( stringData ) + 1
>368	AdditiveExpression	mxGetN ( stringData ) + 1
>369	PrimaryExpression	1
>370	CallExpression	mxGetN ( stringData )
>371	ArgumentList	stringData
>372	Argument	stringData
>373	Identifier	stringData
>374	Callee	mxGetN
>375	Identifier	mxGetN
>376	Identifier	stringLength
>377	Identifier	stringLength
>378	IdentifierDeclType	long
>379	IfStatement	if ( ! stringData )
>380	ExpressionStatement	 
>381	CallExpression	mexErrMsgTxt ( \"Missing field logName_deprecated\" )
>382	ArgumentList	\"Missing field logName_deprecated\"
>383	Argument	\"Missing field logName_deprecated\"
>384	PrimaryExpression	\"Missing field logName_deprecated\"
>385	Callee	mexErrMsgTxt
>386	Identifier	mexErrMsgTxt
>387	Condition	 
>388	UnaryOp	! stringData
>389	Identifier	stringData
>390	UnaryOperator	!
>391	IdentifierDeclStatement	 
>392	IdentifierDecl	* stringData = mxGetField ( prhs [ 1 ] , 0 , \"logName_deprecated\" )
>393	AssignmentExpr	* stringData = mxGetField ( prhs [ 1 ] , 0 , \"logName_deprecated\" )
>394	CallExpression	mxGetField ( prhs [ 1 ] , 0 , \"logName_deprecated\" )
>395	ArgumentList	prhs [ 1 ]
>396	Argument	\"logName_deprecated\"
>397	PrimaryExpression	\"logName_deprecated\"
>398	Argument	0
>399	PrimaryExpression	0
>400	Argument	prhs [ 1 ]
>401	ArrayIndexing	prhs [ 1 ]
>402	PrimaryExpression	1
>403	Identifier	prhs
>404	Callee	mxGetField
>405	Identifier	mxGetField
>406	Identifier	stringData
>407	Identifier	stringData
>408	IdentifierDeclType	mxArray *
>409	Condition	 
>410	MemberAccess	param . log
>411	Identifier	log
>412	Identifier	param
>413	ExpressionStatement	 
>414	AssignmentExpr	param . log = getScalarStructDef < bool > ( prhs [ 1 ] , \"log_deprecated\" , false )
>415	RelationalExpression	getScalarStructDef < bool > ( prhs [ 1 ] , \"log_deprecated\" , false )
>416	RelationalExpression	bool > ( prhs [ 1 ] , \"log_deprecated\" , false )
>417	Expression	prhs [ 1 ] , \"log_deprecated\" , false
>418	Expression	\"log_deprecated\" , false
>419	Identifier	false
>420	PrimaryExpression	\"log_deprecated\"
>421	ArrayIndexing	prhs [ 1 ]
>422	PrimaryExpression	1
>423	Identifier	prhs
>424	Identifier	bool
>425	Identifier	getScalarStructDef
>426	MemberAccess	param . log
>427	Identifier	log
>428	Identifier	param
>429	ExpressionStatement	 
>430	AssignmentExpr	param . iter_updateD = getScalarStructDef < T > ( prhs [ 1 ] , \"iter_updateD\" , param . batch ? 5 
>431	RelationalExpression	getScalarStructDef < T > ( prhs [ 1 ] , \"iter_updateD\" , param . batch ? 5 
>432	RelationalExpression	T > ( prhs [ 1 ] , \"iter_updateD\" , param . batch ? 5 
>433	Expression	prhs [ 1 ] , \"iter_updateD\" , param . batch ? 5 
>434	Expression	\"iter_updateD\" , param . batch ? 5 
>435	ConditionalExpression	param . batch ? 5 
>436	PrimaryExpression	1
>437	PrimaryExpression	5
>438	Condition	param . batch
>439	MemberAccess	param . batch
>440	Identifier	batch
>441	Identifier	param
>442	PrimaryExpression	\"iter_updateD\"
>443	ArrayIndexing	prhs [ 1 ]
>444	PrimaryExpression	1
>445	Identifier	prhs
>446	Identifier	T
>447	Identifier	getScalarStructDef
>448	MemberAccess	param . iter_updateD
>449	Identifier	iter_updateD
>450	Identifier	param
>451	ExpressionStatement	 
>452	AssignmentExpr	param . batch = getScalarStructDef < bool > ( prhs [ 1 ] , \"batch\" , false )
>453	RelationalExpression	getScalarStructDef < bool > ( prhs [ 1 ] , \"batch\" , false )
>454	RelationalExpression	bool > ( prhs [ 1 ] , \"batch\" , false )
>455	Expression	prhs [ 1 ] , \"batch\" , false
>456	Expression	\"batch\" , false
>457	Identifier	false
>458	PrimaryExpression	\"batch\"
>459	ArrayIndexing	prhs [ 1 ]
>460	PrimaryExpression	1
>461	Identifier	prhs
>462	Identifier	bool
>463	Identifier	getScalarStructDef
>464	MemberAccess	param . batch
>465	Identifier	batch
>466	Identifier	param
>467	ExpressionStatement	 
>468	Statement	 
>469	Statement	 
>470	Statement	 
>471	Statement	 
>472	Statement	 
>473	Statement	 
>474	Statement	 
>475	Statement	 
>476	Statement	 
>477	Statement	 
>478	Statement	 
>479	Statement	 
>480	Statement	 
>481	Statement	 
>482	Statement	 
>483	Statement	 
>484	Statement	 
>485	Statement	 
>486	Statement	 
>487	Statement	 
>488	Statement	 
>489	Statement	 
>490	Statement	 
>491	Statement	 
>492	ExpressionStatement	 
>493	AssignmentExpr	param . stochastic = getScalarStructDef < bool > ( prhs [ 1 ] , \"stochastic_deprecated\" , false )
>494	RelationalExpression	getScalarStructDef < bool > ( prhs [ 1 ] , \"stochastic_deprecated\" , false )
>495	RelationalExpression	bool > ( prhs [ 1 ] , \"stochastic_deprecated\" , false )
>496	Expression	prhs [ 1 ] , \"stochastic_deprecated\" , false
>497	Expression	\"stochastic_deprecated\" , false
>498	Identifier	false
>499	PrimaryExpression	\"stochastic_deprecated\"
>500	ArrayIndexing	prhs [ 1 ]
>501	PrimaryExpression	1
>502	Identifier	prhs
>503	Identifier	bool
>504	Identifier	getScalarStructDef
>505	MemberAccess	param . stochastic
>506	Identifier	stochastic
>507	Identifier	param
>508	ExpressionStatement	 
>509	AssignmentExpr	param . rho = getScalarStructDef < T > ( prhs [ 1 ] , \"rho\" , T ( 1.0 ) )
>510	RelationalExpression	getScalarStructDef < T > ( prhs [ 1 ] , \"rho\" , T ( 1.0 ) )
>511	RelationalExpression	T > ( prhs [ 1 ] , \"rho\" , T ( 1.0 ) )
>512	Expression	prhs [ 1 ] , \"rho\" , T ( 1.0 )
>513	Expression	\"rho\" , T ( 1.0 )
>514	CallExpression	T ( 1.0 )
>515	ArgumentList	1.0
>516	Argument	1.0
>517	PrimaryExpression	1.0
>518	Callee	T
>519	Identifier	T
>520	PrimaryExpression	\"rho\"
>521	ArrayIndexing	prhs [ 1 ]
>522	PrimaryExpression	1
>523	Identifier	prhs
>524	Identifier	T
>525	Identifier	getScalarStructDef
>526	MemberAccess	param . rho
>527	Identifier	rho
>528	Identifier	param
>529	ExpressionStatement	 
>530	AssignmentExpr	param . gamma2 = getScalarStructDef < T > ( prhs [ 1 ] , \"gamma2\" , 0 )
>531	RelationalExpression	getScalarStructDef < T > ( prhs [ 1 ] , \"gamma2\" , 0 )
>532	RelationalExpression	T > ( prhs [ 1 ] , \"gamma2\" , 0 )
>533	Expression	prhs [ 1 ] , \"gamma2\" , 0
>534	Expression	\"gamma2\" , 0
>535	PrimaryExpression	0
>536	PrimaryExpression	\"gamma2\"
>537	ArrayIndexing	prhs [ 1 ]
>538	PrimaryExpression	1
>539	Identifier	prhs
>540	Identifier	T
>541	Identifier	getScalarStructDef
>542	MemberAccess	param . gamma2
>543	Identifier	gamma2
>544	Identifier	param
>545	ExpressionStatement	 
>546	AssignmentExpr	param . gamma1 = getScalarStructDef < T > ( prhs [ 1 ] , \"gamma1\" , 0 )
>547	RelationalExpression	getScalarStructDef < T > ( prhs [ 1 ] , \"gamma1\" , 0 )
>548	RelationalExpression	T > ( prhs [ 1 ] , \"gamma1\" , 0 )
>549	Expression	prhs [ 1 ] , \"gamma1\" , 0
>550	Expression	\"gamma1\" , 0
>551	PrimaryExpression	0
>552	PrimaryExpression	\"gamma1\"
>553	ArrayIndexing	prhs [ 1 ]
>554	PrimaryExpression	1
>555	Identifier	prhs
>556	Identifier	T
>557	Identifier	getScalarStructDef
>558	MemberAccess	param . gamma1
>559	Identifier	gamma1
>560	Identifier	param
>561	ExpressionStatement	 
>562	AssignmentExpr	param . verbose = getScalarStructDef < bool > ( prhs [ 1 ] , \"verbose\" , true )
>563	RelationalExpression	getScalarStructDef < bool > ( prhs [ 1 ] , \"verbose\" , true )
>564	RelationalExpression	bool > ( prhs [ 1 ] , \"verbose\" , true )
>565	Expression	prhs [ 1 ] , \"verbose\" , true
>566	Expression	\"verbose\" , true
>567	Identifier	true
>568	PrimaryExpression	\"verbose\"
>569	ArrayIndexing	prhs [ 1 ]
>570	PrimaryExpression	1
>571	Identifier	prhs
>572	Identifier	bool
>573	Identifier	getScalarStructDef
>574	MemberAccess	param . verbose
>575	Identifier	verbose
>576	Identifier	param
>577	ExpressionStatement	 
>578	AssignmentExpr	param . clean = getScalarStructDef < bool > ( prhs [ 1 ] , \"clean\" , true )
>579	RelationalExpression	getScalarStructDef < bool > ( prhs [ 1 ] , \"clean\" , true )
>580	RelationalExpression	bool > ( prhs [ 1 ] , \"clean\" , true )
>581	Expression	prhs [ 1 ] , \"clean\" , true
>582	Expression	\"clean\" , true
>583	Identifier	true
>584	PrimaryExpression	\"clean\"
>585	ArrayIndexing	prhs [ 1 ]
>586	PrimaryExpression	1
>587	Identifier	prhs
>588	Identifier	bool
>589	Identifier	getScalarStructDef
>590	MemberAccess	param . clean
>591	Identifier	clean
>592	Identifier	param
>593	ExpressionStatement	 
>594	AssignmentExpr	param . whiten = getScalarStructDef < bool > ( prhs [ 1 ] , \"whiten\" , false )
>595	RelationalExpression	getScalarStructDef < bool > ( prhs [ 1 ] , \"whiten\" , false )
>596	RelationalExpression	bool > ( prhs [ 1 ] , \"whiten\" , false )
>597	Expression	prhs [ 1 ] , \"whiten\" , false
>598	Expression	\"whiten\" , false
>599	Identifier	false
>600	PrimaryExpression	\"whiten\"
>601	ArrayIndexing	prhs [ 1 ]
>602	PrimaryExpression	1
>603	Identifier	prhs
>604	Identifier	bool
>605	Identifier	getScalarStructDef
>606	MemberAccess	param . whiten
>607	Identifier	whiten
>608	Identifier	param
>609	ExpressionStatement	 
>610	Expression	prhs [ 1 ] , \"modeD\" , L2
>611	Expression	\"modeD\" , L2
>612	Identifier	L2
>613	PrimaryExpression	\"modeD\"
>614	ArrayIndexing	prhs [ 1 ]
>615	PrimaryExpression	1
>616	Identifier	prhs
>617	Statement	 
>618	Statement	 
>619	Statement	 
>620	Statement	 
>621	Statement	 
>622	Statement	 
>623	Statement	 
>624	Statement	 
>625	Statement	 
>626	Statement	 
>627	Statement	 
>628	ExpressionStatement	 
>629	AssignmentExpr	param . expand = getScalarStructDef < bool > ( prhs [ 1 ] , \"expand\" , false )
>630	RelationalExpression	getScalarStructDef < bool > ( prhs [ 1 ] , \"expand\" , false )
>631	RelationalExpression	bool > ( prhs [ 1 ] , \"expand\" , false )
>632	Expression	prhs [ 1 ] , \"expand\" , false
>633	Expression	\"expand\" , false
>634	Identifier	false
>635	PrimaryExpression	\"expand\"
>636	ArrayIndexing	prhs [ 1 ]
>637	PrimaryExpression	1
>638	Identifier	prhs
>639	Identifier	bool
>640	Identifier	getScalarStructDef
>641	MemberAccess	param . expand
>642	Identifier	expand
>643	Identifier	param
>644	ExpressionStatement	 
>645	AssignmentExpr	param . posD = getScalarStructDef < bool > ( prhs [ 1 ] , \"posD\" , false )
>646	RelationalExpression	getScalarStructDef < bool > ( prhs [ 1 ] , \"posD\" , false )
>647	RelationalExpression	bool > ( prhs [ 1 ] , \"posD\" , false )
>648	Expression	prhs [ 1 ] , \"posD\" , false
>649	Expression	\"posD\" , false
>650	Identifier	false
>651	PrimaryExpression	\"posD\"
>652	ArrayIndexing	prhs [ 1 ]
>653	PrimaryExpression	1
>654	Identifier	prhs
>655	Identifier	bool
>656	Identifier	getScalarStructDef
>657	MemberAccess	param . posD
>658	Identifier	posD
>659	Identifier	param
>660	ExpressionStatement	 
>661	AssignmentExpr	param . posAlpha = getScalarStructDef < bool > ( prhs [ 1 ] , \"posAlpha\" , false )
>662	RelationalExpression	getScalarStructDef < bool > ( prhs [ 1 ] , \"posAlpha\" , false )
>663	RelationalExpression	bool > ( prhs [ 1 ] , \"posAlpha\" , false )
>664	Expression	prhs [ 1 ] , \"posAlpha\" , false
>665	Expression	\"posAlpha\" , false
>666	Identifier	false
>667	PrimaryExpression	\"posAlpha\"
>668	ArrayIndexing	prhs [ 1 ]
>669	PrimaryExpression	1
>670	Identifier	prhs
>671	Identifier	bool
>672	Identifier	getScalarStructDef
>673	MemberAccess	param . posAlpha
>674	Identifier	posAlpha
>675	Identifier	param
>676	ExpressionStatement	 
>677	Expression	prhs [ 1 ] , \"mode\" , PENALTY
>678	Expression	\"mode\" , PENALTY
>679	Identifier	PENALTY
>680	PrimaryExpression	\"mode\"
>681	ArrayIndexing	prhs [ 1 ]
>682	PrimaryExpression	1
>683	Identifier	prhs
>684	Statement	 
>685	Statement	 
>686	Statement	 
>687	Statement	 
>688	Statement	 
>689	Statement	 
>690	Statement	 
>691	Statement	 
>692	Statement	 
>693	Statement	 
>694	Statement	 
>695	ExpressionStatement	 
>696	AssignmentExpr	param . t0 = getScalarStructDef < T > ( prhs [ 1 ] , \"t0\" , 1e-5 )
>697	RelationalExpression	getScalarStructDef < T > ( prhs [ 1 ] , \"t0\" , 1e-5 )
>698	RelationalExpression	T > ( prhs [ 1 ] , \"t0\" , 1e-5 )
>699	Expression	prhs [ 1 ] , \"t0\" , 1e-5
>700	Expression	\"t0\" , 1e-5
>701	PrimaryExpression	1e-5
>702	PrimaryExpression	\"t0\"
>703	ArrayIndexing	prhs [ 1 ]
>704	PrimaryExpression	1
>705	Identifier	prhs
>706	Identifier	T
>707	Identifier	getScalarStructDef
>708	MemberAccess	param . t0
>709	Identifier	t0
>710	Identifier	param
>711	ExpressionStatement	 
>712	Expression	prhs [ 1 ] , \"iter\"
>713	PrimaryExpression	\"iter\"
>714	ArrayIndexing	prhs [ 1 ]
>715	PrimaryExpression	1
>716	Identifier	prhs
>717	Statement	 
>718	Statement	 
>719	Statement	 
>720	Statement	 
>721	Statement	 
>722	Statement	 
>723	Statement	 
>724	Statement	 
>725	ExpressionStatement	 
>726	AssignmentExpr	param . lambda2 = getScalarStructDef < T > ( prhs [ 1 ] , \"lambda2\" , 10e-10 )
>727	RelationalExpression	getScalarStructDef < T > ( prhs [ 1 ] , \"lambda2\" , 10e-10 )
>728	RelationalExpression	T > ( prhs [ 1 ] , \"lambda2\" , 10e-10 )
>729	Expression	prhs [ 1 ] , \"lambda2\" , 10e-10
>730	Expression	\"lambda2\" , 10e-10
>731	PrimaryExpression	10e-10
>732	PrimaryExpression	\"lambda2\"
>733	ArrayIndexing	prhs [ 1 ]
>734	PrimaryExpression	1
>735	Identifier	prhs
>736	Identifier	T
>737	Identifier	getScalarStructDef
>738	MemberAccess	param . lambda2
>739	Identifier	lambda2
>740	Identifier	param
>741	ExpressionStatement	 
>742	AssignmentExpr	param . lambda = getScalarStruct < T > ( prhs [ 1 ] , \"lambda\" )
>743	RelationalExpression	getScalarStruct < T > ( prhs [ 1 ] , \"lambda\" )
>744	RelationalExpression	T > ( prhs [ 1 ] , \"lambda\" )
>745	Expression	prhs [ 1 ] , \"lambda\"
>746	PrimaryExpression	\"lambda\"
>747	ArrayIndexing	prhs [ 1 ]
>748	PrimaryExpression	1
>749	Identifier	prhs
>750	Identifier	T
>751	Identifier	getScalarStruct
>752	MemberAccess	param . lambda
>753	Identifier	lambda
>754	Identifier	param
>755	IdentifierDeclStatement	 
>756	IdentifierDecl	param
>757	Identifier	param
>758	IdentifierDeclType	ParamDictLearn < T >
>759	IfStatement	if ( ! pr_D )
>760	ElseStatement	else
>761	CompoundStatement	 
>762	IfStatement	if ( nrhs == 3 )
>763	ElseStatement	else
>764	CompoundStatement	 
>765	ExpressionStatement	 
>766	AssignmentExpr	trainer = new Trainer < T > ( D1 , batch_size , NUM_THREADS )
>767	Expression	D1 , batch_size , NUM_THREADS
>768	Expression	batch_size , NUM_THREADS
>769	Identifier	NUM_THREADS
>770	Identifier	batch_size
>771	Identifier	D1
>772	Identifier	trainer
>773	CompoundStatement	 
>774	ExpressionStatement	 
>775	AssignmentExpr	trainer = new Trainer < T > ( A , B , D1 , iter , batch_size , NUM_THREADS )
>776	Expression	A , B , D1 , iter , batch_size , NUM_THREADS
>777	Expression	B , D1 , iter , batch_size , NUM_THREADS
>778	Expression	D1 , iter , batch_size , NUM_THREADS
>779	Expression	iter , batch_size , NUM_THREADS
>780	Expression	batch_size , NUM_THREADS
>781	Identifier	NUM_THREADS
>782	Identifier	batch_size
>783	Identifier	iter
>784	Identifier	D1
>785	Identifier	B
>786	Identifier	A
>787	Identifier	trainer
>788	ExpressionStatement	 
>789	Expression	prhs [ 2 ] , \"iter\"
>790	PrimaryExpression	\"iter\"
>791	ArrayIndexing	prhs [ 2 ]
>792	PrimaryExpression	2
>793	Identifier	prhs
>794	Statement	 
>795	Statement	 
>796	Statement	 
>797	Statement	 
>798	Statement	 
>799	Statement	 
>800	Statement	 
>801	IdentifierDeclStatement	 
>802	IdentifierDecl	B ( prB , n , K )
>803	Expression	prB , n , K
>804	Expression	n , K
>805	Identifier	K
>806	Identifier	n
>807	Identifier	prB
>808	Identifier	B
>809	IdentifierDeclType	Matrix < T >
>810	IfStatement	if ( xB != n || yB != K )
>811	ExpressionStatement	 
>812	CallExpression	mexErrMsgTxt ( \"Size of B is not consistent\" )
>813	ArgumentList	\"Size of B is not consistent\"
>814	Argument	\"Size of B is not consistent\"
>815	PrimaryExpression	\"Size of B is not consistent\"
>816	Callee	mexErrMsgTxt
>817	Identifier	mexErrMsgTxt
>818	Condition	 
>819	OrExpression	xB != n || yB != K
>820	EqualityExpression	yB != K
>821	Identifier	K
>822	Identifier	yB
>823	EqualityExpression	xB != n
>824	Identifier	n
>825	Identifier	xB
>826	ExpressionStatement	 
>827	ArrayIndexing	dimsB [ 1 ]
>828	PrimaryExpression	1
>829	Identifier	dimsB
>830	Statement	 
>831	Statement	 
>832	Statement	 
>833	Statement	 
>834	Statement	 
>835	Statement	 
>836	Statement	 
>837	ExpressionStatement	 
>838	ArrayIndexing	dimsB [ 0 ]
>839	PrimaryExpression	0
>840	Identifier	dimsB
>841	Statement	 
>842	Statement	 
>843	Statement	 
>844	Statement	 
>845	Statement	 
>846	Statement	 
>847	Statement	 
>848	IdentifierDeclStatement	 
>849	IdentifierDecl	* dimsB = mxGetDimensions ( pr_B )
>850	AssignmentExpr	* dimsB = mxGetDimensions ( pr_B )
>851	CallExpression	mxGetDimensions ( pr_B )
>852	ArgumentList	pr_B
>853	Argument	pr_B
>854	Identifier	pr_B
>855	Callee	mxGetDimensions
>856	Identifier	mxGetDimensions
>857	Identifier	dimsB
>858	Identifier	dimsB
>859	IdentifierDeclType	const mwSize *
>860	ExpressionStatement	 
>861	CallExpression	mxGetPr ( pr_B )
>862	ArgumentList	pr_B
>863	Argument	pr_B
>864	Identifier	pr_B
>865	Callee	mxGetPr
>866	Identifier	mxGetPr
>867	Statement	 
>868	Statement	 
>869	Statement	 
>870	Statement	 
>871	Statement	 
>872	Statement	 
>873	Statement	 
>874	Statement	 
>875	Statement	 
>876	IfStatement	if ( ! pr_B )
>877	ExpressionStatement	 
>878	CallExpression	mexErrMsgTxt ( \"field B is not provided\" )
>879	ArgumentList	\"field B is not provided\"
>880	Argument	\"field B is not provided\"
>881	PrimaryExpression	\"field B is not provided\"
>882	Callee	mexErrMsgTxt
>883	Identifier	mexErrMsgTxt
>884	Condition	 
>885	UnaryOp	! pr_B
>886	Identifier	pr_B
>887	UnaryOperator	!
>888	IdentifierDeclStatement	 
>889	IdentifierDecl	* pr_B = mxGetField ( prhs [ 2 ] , 0 , \"B\" )
>890	AssignmentExpr	* pr_B = mxGetField ( prhs [ 2 ] , 0 , \"B\" )
>891	CallExpression	mxGetField ( prhs [ 2 ] , 0 , \"B\" )
>892	ArgumentList	prhs [ 2 ]
>893	Argument	\"B\"
>894	PrimaryExpression	\"B\"
>895	Argument	0
>896	PrimaryExpression	0
>897	Argument	prhs [ 2 ]
>898	ArrayIndexing	prhs [ 2 ]
>899	PrimaryExpression	2
>900	Identifier	prhs
>901	Callee	mxGetField
>902	Identifier	mxGetField
>903	Identifier	pr_B
>904	Identifier	pr_B
>905	IdentifierDeclType	mxArray *
>906	IdentifierDeclStatement	 
>907	IdentifierDecl	A ( prA , K , K )
>908	Expression	prA , K , K
>909	Expression	K , K
>910	Identifier	K
>911	Identifier	K
>912	Identifier	prA
>913	Identifier	A
>914	IdentifierDeclType	Matrix < T >
>915	IfStatement	if ( xA != K || yA != K )
>916	ExpressionStatement	 
>917	CallExpression	mexErrMsgTxt ( \"Size of A is not consistent\" )
>918	ArgumentList	\"Size of A is not consistent\"
>919	Argument	\"Size of A is not consistent\"
>920	PrimaryExpression	\"Size of A is not consistent\"
>921	Callee	mexErrMsgTxt
>922	Identifier	mexErrMsgTxt
>923	Condition	 
>924	OrExpression	xA != K || yA != K
>925	EqualityExpression	yA != K
>926	Identifier	K
>927	Identifier	yA
>928	EqualityExpression	xA != K
>929	Identifier	K
>930	Identifier	xA
>931	ExpressionStatement	 
>932	ArrayIndexing	dimsA [ 1 ]
>933	PrimaryExpression	1
>934	Identifier	dimsA
>935	Statement	 
>936	Statement	 
>937	Statement	 
>938	Statement	 
>939	Statement	 
>940	Statement	 
>941	Statement	 
>942	ExpressionStatement	 
>943	ArrayIndexing	dimsA [ 0 ]
>944	PrimaryExpression	0
>945	Identifier	dimsA
>946	Statement	 
>947	Statement	 
>948	Statement	 
>949	Statement	 
>950	Statement	 
>951	Statement	 
>952	Statement	 
>953	IdentifierDeclStatement	 
>954	IdentifierDecl	* dimsA = mxGetDimensions ( pr_A )
>955	AssignmentExpr	* dimsA = mxGetDimensions ( pr_A )
>956	CallExpression	mxGetDimensions ( pr_A )
>957	ArgumentList	pr_A
>958	Argument	pr_A
>959	Identifier	pr_A
>960	Callee	mxGetDimensions
>961	Identifier	mxGetDimensions
>962	Identifier	dimsA
>963	Identifier	dimsA
>964	IdentifierDeclType	const mwSize *
>965	ExpressionStatement	 
>966	CallExpression	mxGetPr ( pr_A )
>967	ArgumentList	pr_A
>968	Argument	pr_A
>969	Identifier	pr_A
>970	Callee	mxGetPr
>971	Identifier	mxGetPr
>972	Statement	 
>973	Statement	 
>974	Statement	 
>975	Statement	 
>976	Statement	 
>977	Statement	 
>978	Statement	 
>979	Statement	 
>980	Statement	 
>981	IfStatement	if ( ! pr_A )
>982	ExpressionStatement	 
>983	CallExpression	mexErrMsgTxt ( \"field A is not provided\" )
>984	ArgumentList	\"field A is not provided\"
>985	Argument	\"field A is not provided\"
>986	PrimaryExpression	\"field A is not provided\"
>987	Callee	mexErrMsgTxt
>988	Identifier	mexErrMsgTxt
>989	Condition	 
>990	UnaryOp	! pr_A
>991	Identifier	pr_A
>992	UnaryOperator	!
>993	IdentifierDeclStatement	 
>994	IdentifierDecl	* pr_A = mxGetField ( prhs [ 2 ] , 0 , \"A\" )
>995	AssignmentExpr	* pr_A = mxGetField ( prhs [ 2 ] , 0 , \"A\" )
>996	CallExpression	mxGetField ( prhs [ 2 ] , 0 , \"A\" )
>997	ArgumentList	prhs [ 2 ]
>998	Argument	\"A\"
>999	PrimaryExpression	\"A\"
>1000	Argument	0
>1001	PrimaryExpression	0
>1002	Argument	prhs [ 2 ]
>1003	ArrayIndexing	prhs [ 2 ]
>1004	PrimaryExpression	2
>1005	Identifier	prhs
>1006	Callee	mxGetField
>1007	Identifier	mxGetField
>1008	Identifier	pr_A
>1009	Identifier	pr_A
>1010	IdentifierDeclType	mxArray *
>1011	Condition	 
>1012	EqualityExpression	nrhs == 3
>1013	PrimaryExpression	3
>1014	Identifier	nrhs
>1015	IdentifierDeclStatement	 
>1016	IdentifierDecl	D1 ( prD , n , K )
>1017	Expression	prD , n , K
>1018	Expression	n , K
>1019	Identifier	K
>1020	Identifier	n
>1021	Identifier	prD
>1022	Identifier	D1
>1023	IdentifierDeclType	Matrix < T >
>1024	IfStatement	if ( n != nD )
>1025	ExpressionStatement	 
>1026	CallExpression	mexErrMsgTxt ( \"sizes of D are not consistent\" )
>1027	ArgumentList	\"sizes of D are not consistent\"
>1028	Argument	\"sizes of D are not consistent\"
>1029	PrimaryExpression	\"sizes of D are not consistent\"
>1030	Callee	mexErrMsgTxt
>1031	Identifier	mexErrMsgTxt
>1032	Condition	 
>1033	EqualityExpression	n != nD
>1034	Identifier	nD
>1035	Identifier	n
>1036	ExpressionStatement	 
>1037	ArrayIndexing	dimsD [ 1 ]
>1038	PrimaryExpression	1
>1039	Identifier	dimsD
>1040	Statement	 
>1041	Statement	 
>1042	Statement	 
>1043	Statement	 
>1044	Statement	 
>1045	Statement	 
>1046	Statement	 
>1047	ExpressionStatement	 
>1048	ArrayIndexing	dimsD [ 0 ]
>1049	PrimaryExpression	0
>1050	Identifier	dimsD
>1051	Statement	 
>1052	Statement	 
>1053	Statement	 
>1054	Statement	 
>1055	Statement	 
>1056	Statement	 
>1057	Statement	 
>1058	IdentifierDeclStatement	 
>1059	IdentifierDecl	* dimsD = mxGetDimensions ( pr_D )
>1060	AssignmentExpr	* dimsD = mxGetDimensions ( pr_D )
>1061	CallExpression	mxGetDimensions ( pr_D )
>1062	ArgumentList	pr_D
>1063	Argument	pr_D
>1064	Identifier	pr_D
>1065	Callee	mxGetDimensions
>1066	Identifier	mxGetDimensions
>1067	Identifier	dimsD
>1068	Identifier	dimsD
>1069	IdentifierDeclType	const mwSize *
>1070	ExpressionStatement	 
>1071	CallExpression	mxGetPr ( pr_D )
>1072	ArgumentList	pr_D
>1073	Argument	pr_D
>1074	Identifier	pr_D
>1075	Callee	mxGetPr
>1076	Identifier	mxGetPr
>1077	Statement	 
>1078	Statement	 
>1079	Statement	 
>1080	Statement	 
>1081	Statement	 
>1082	Statement	 
>1083	Statement	 
>1084	Statement	 
>1085	Statement	 
>1086	CompoundStatement	 
>1087	ExpressionStatement	 
>1088	AssignmentExpr	trainer = new Trainer < T > ( K , batch_size , NUM_THREADS )
>1089	Expression	K , batch_size , NUM_THREADS
>1090	Expression	batch_size , NUM_THREADS
>1091	Identifier	NUM_THREADS
>1092	Identifier	batch_size
>1093	Identifier	K
>1094	Identifier	trainer
>1095	ExpressionStatement	 
>1096	Expression	prhs [ 1 ] , \"K\"
>1097	PrimaryExpression	\"K\"
>1098	ArrayIndexing	prhs [ 1 ]
>1099	PrimaryExpression	1
>1100	Identifier	prhs
>1101	Statement	 
>1102	Statement	 
>1103	Statement	 
>1104	Statement	 
>1105	Statement	 
>1106	Statement	 
>1107	Statement	 
>1108	Condition	 
>1109	UnaryOp	! pr_D
>1110	Identifier	pr_D
>1111	UnaryOperator	!
>1112	IdentifierDeclStatement	 
>1113	IdentifierDecl	* trainer
>1114	Identifier	trainer
>1115	IdentifierDeclType	Trainer < T > *
>1116	IdentifierDeclStatement	 
>1117	IdentifierDecl	* pr_D = mxGetField ( prhs [ 1 ] , 0 , \"D\" )
>1118	AssignmentExpr	* pr_D = mxGetField ( prhs [ 1 ] , 0 , \"D\" )
>1119	CallExpression	mxGetField ( prhs [ 1 ] , 0 , \"D\" )
>1120	ArgumentList	prhs [ 1 ]
>1121	Argument	\"D\"
>1122	PrimaryExpression	\"D\"
>1123	Argument	0
>1124	PrimaryExpression	0
>1125	Argument	prhs [ 1 ]
>1126	ArrayIndexing	prhs [ 1 ]
>1127	PrimaryExpression	1
>1128	Identifier	prhs
>1129	Callee	mxGetField
>1130	Identifier	mxGetField
>1131	Identifier	pr_D
>1132	Identifier	pr_D
>1133	IdentifierDeclType	mxArray *
>1134	ExpressionStatement	 
>1135	Expression	prhs [ 1 ] , \"batchsize\" , 256 * ( NUM_THREADS + 1 )
>1136	Expression	\"batchsize\" , 256 * ( NUM_THREADS + 1 )
>1137	MultiplicativeExpression	256 * ( NUM_THREADS + 1 )
>1138	AdditiveExpression	NUM_THREADS + 1
>1139	PrimaryExpression	1
>1140	Identifier	NUM_THREADS
>1141	PrimaryExpression	256
>1142	PrimaryExpression	\"batchsize\"
>1143	ArrayIndexing	prhs [ 1 ]
>1144	PrimaryExpression	1
>1145	Identifier	prhs
>1146	Statement	 
>1147	Statement	 
>1148	Statement	 
>1149	Statement	 
>1150	Statement	 
>1151	Statement	 
>1152	Statement	 
>1153	ExpressionStatement	 
>1154	AssignmentExpr	NUM_THREADS = NUM_THREADS == - 1 ? omp_get_num_procs ( ) 
>1155	ConditionalExpression	NUM_THREADS == - 1 ? omp_get_num_procs ( ) 
>1156	Identifier	NUM_THREADS
>1157	CallExpression	omp_get_num_procs ( )
>1158	ArgumentList	 
>1159	Callee	omp_get_num_procs
>1160	Identifier	omp_get_num_procs
>1161	Condition	NUM_THREADS == - 1
>1162	EqualityExpression	NUM_THREADS == - 1
>1163	UnaryOp	- 1
>1164	PrimaryExpression	1
>1165	UnaryOperator	-
>1166	Identifier	NUM_THREADS
>1167	Identifier	NUM_THREADS
>1168	ExpressionStatement	 
>1169	Expression	prhs [ 1 ] , \"numThreads\" , - 1
>1170	Expression	\"numThreads\" , - 1
>1171	UnaryOp	- 1
>1172	PrimaryExpression	1
>1173	UnaryOperator	-
>1174	PrimaryExpression	\"numThreads\"
>1175	ArrayIndexing	prhs [ 1 ]
>1176	PrimaryExpression	1
>1177	Identifier	prhs
>1178	Statement	 
>1179	Statement	 
>1180	Statement	 
>1181	Statement	 
>1182	Statement	 
>1183	Statement	 
>1184	Statement	 
>1185	IfStatement	if ( mxIsSparse ( prhs [ 0 ] ) )
>1186	ElseStatement	else
>1187	CompoundStatement	 
>1188	ExpressionStatement	 
>1189	AssignmentExpr	X = new Matrix < T > ( prX , n , M )
>1190	Expression	prX , n , M
>1191	Expression	n , M
>1192	Identifier	M
>1193	Identifier	n
>1194	Identifier	prX
>1195	Identifier	X
>1196	ExpressionStatement	 
>1197	CallExpression	mxGetPr ( prhs [ 0 ] )
>1198	ArgumentList	prhs [ 0 ]
>1199	Argument	prhs [ 0 ]
>1200	ArrayIndexing	prhs [ 0 ]
>1201	PrimaryExpression	0
>1202	Identifier	prhs
>1203	Callee	mxGetPr
>1204	Identifier	mxGetPr
>1205	Statement	 
>1206	Statement	 
>1207	Statement	 
>1208	Statement	 
>1209	Statement	 
>1210	Statement	 
>1211	Statement	 
>1212	Statement	 
>1213	Statement	 
>1214	CompoundStatement	 
>1215	ExpressionStatement	 
>1216	AssignmentExpr	X = new SpMatrix < T > ( X_v2 , X_r2 , X_pB2 , X_pE2 , n , M , X_pB2 [ M ] )
>1217	Expression	X_v2 , X_r2 , X_pB2 , X_pE2 , n , M , X_pB2 [ M ]
>1218	Expression	X_r2 , X_pB2 , X_pE2 , n , M , X_pB2 [ M ]
>1219	Expression	X_pB2 , X_pE2 , n , M , X_pB2 [ M ]
>1220	Expression	X_pE2 , n , M , X_pB2 [ M ]
>1221	Expression	n , M , X_pB2 [ M ]
>1222	Expression	M , X_pB2 [ M ]
>1223	ArrayIndexing	X_pB2 [ M ]
>1224	Identifier	M
>1225	Identifier	X_pB2
>1226	Identifier	M
>1227	Identifier	n
>1228	Identifier	X_pE2
>1229	Identifier	X_pB2
>1230	Identifier	X_r2
>1231	Identifier	X_v2
>1232	Identifier	X
>1233	ExpressionStatement	 
>1234	RelationalExpression	createCopySparse < T > ( X_v2 , X_r2 , X_pB2 , X_pE2 , X_v , X_r , X_pB , X_pE , M )
>1235	RelationalExpression	T > ( X_v2 , X_r2 , X_pB2 , X_pE2 , X_v , X_r , X_pB , X_pE , M )
>1236	Expression	X_v2 , X_r2 , X_pB2 , X_pE2 , X_v , X_r , X_pB , X_pE , M
>1237	Expression	X_r2 , X_pB2 , X_pE2 , X_v , X_r , X_pB , X_pE , M
>1238	Expression	X_pB2 , X_pE2 , X_v , X_r , X_pB , X_pE , M
>1239	Expression	X_pE2 , X_v , X_r , X_pB , X_pE , M
>1240	Expression	X_v , X_r , X_pB , X_pE , M
>1241	Expression	X_r , X_pB , X_pE , M
>1242	Expression	X_pB , X_pE , M
>1243	Expression	X_pE , M
>1244	Identifier	M
>1245	Identifier	X_pE
>1246	Identifier	X_pB
>1247	Identifier	X_r
>1248	Identifier	X_v
>1249	Identifier	X_pE2
>1250	Identifier	X_pB2
>1251	Identifier	X_r2
>1252	Identifier	X_v2
>1253	Identifier	T
>1254	Identifier	createCopySparse
>1255	IdentifierDeclStatement	 
>1256	IdentifierDecl	* X_v2
>1257	Identifier	X_v2
>1258	IdentifierDeclType	T *
>1259	IdentifierDeclStatement	 
>1260	IdentifierDecl	* X_pE2
>1261	Identifier	X_pE2
>1262	IdentifierDeclType	long *
>1263	IdentifierDecl	* X_pB2
>1264	Identifier	X_pB2
>1265	IdentifierDeclType	long *
>1266	IdentifierDecl	* X_r2
>1267	Identifier	X_r2
>1268	IdentifierDeclType	long *
>1269	IdentifierDeclStatement	 
>1270	IdentifierDecl	* X_pE = X_pB + 1
>1271	AssignmentExpr	* X_pE = X_pB + 1
>1272	AdditiveExpression	X_pB + 1
>1273	PrimaryExpression	1
>1274	Identifier	X_pB
>1275	Identifier	X_pE
>1276	Identifier	X_pE
>1277	IdentifierDeclType	mwSize *
>1278	IdentifierDeclStatement	 
>1279	IdentifierDecl	* X_pB = mxGetJc ( prhs [ 0 ] )
>1280	AssignmentExpr	* X_pB = mxGetJc ( prhs [ 0 ] )
>1281	CallExpression	mxGetJc ( prhs [ 0 ] )
>1282	ArgumentList	prhs [ 0 ]
>1283	Argument	prhs [ 0 ]
>1284	ArrayIndexing	prhs [ 0 ]
>1285	PrimaryExpression	0
>1286	Identifier	prhs
>1287	Callee	mxGetJc
>1288	Identifier	mxGetJc
>1289	Identifier	X_pB
>1290	Identifier	X_pB
>1291	IdentifierDeclType	mwSize *
>1292	IdentifierDeclStatement	 
>1293	IdentifierDecl	* X_r = mxGetIr ( prhs [ 0 ] )
>1294	AssignmentExpr	* X_r = mxGetIr ( prhs [ 0 ] )
>1295	CallExpression	mxGetIr ( prhs [ 0 ] )
>1296	ArgumentList	prhs [ 0 ]
>1297	Argument	prhs [ 0 ]
>1298	ArrayIndexing	prhs [ 0 ]
>1299	PrimaryExpression	0
>1300	Identifier	prhs
>1301	Callee	mxGetIr
>1302	Identifier	mxGetIr
>1303	Identifier	X_r
>1304	Identifier	X_r
>1305	IdentifierDeclType	mwSize *
>1306	ExpressionStatement	 
>1307	CallExpression	mxGetPr ( prhs [ 0 ] )
>1308	ArgumentList	prhs [ 0 ]
>1309	Argument	prhs [ 0 ]
>1310	ArrayIndexing	prhs [ 0 ]
>1311	PrimaryExpression	0
>1312	Identifier	prhs
>1313	Callee	mxGetPr
>1314	Identifier	mxGetPr
>1315	Statement	 
>1316	Statement	 
>1317	Statement	 
>1318	Statement	 
>1319	Statement	 
>1320	Statement	 
>1321	Statement	 
>1322	Statement	 
>1323	Statement	 
>1324	Condition	 
>1325	CallExpression	mxIsSparse ( prhs [ 0 ] )
>1326	ArgumentList	prhs [ 0 ]
>1327	Argument	prhs [ 0 ]
>1328	ArrayIndexing	prhs [ 0 ]
>1329	PrimaryExpression	0
>1330	Identifier	prhs
>1331	Callee	mxIsSparse
>1332	Identifier	mxIsSparse
>1333	ExpressionStatement	 
>1334	ArrayIndexing	dimsX [ 1 ]
>1335	PrimaryExpression	1
>1336	Identifier	dimsX
>1337	Statement	 
>1338	Statement	 
>1339	Statement	 
>1340	Statement	 
>1341	Statement	 
>1342	Statement	 
>1343	Statement	 
>1344	ExpressionStatement	 
>1345	ArrayIndexing	dimsX [ 0 ]
>1346	PrimaryExpression	0
>1347	Identifier	dimsX
>1348	Statement	 
>1349	Statement	 
>1350	Statement	 
>1351	Statement	 
>1352	Statement	 
>1353	Statement	 
>1354	Statement	 
>1355	IdentifierDeclStatement	 
>1356	IdentifierDecl	* dimsX = mxGetDimensions ( prhs [ 0 ] )
>1357	AssignmentExpr	* dimsX = mxGetDimensions ( prhs [ 0 ] )
>1358	CallExpression	mxGetDimensions ( prhs [ 0 ] )
>1359	ArgumentList	prhs [ 0 ]
>1360	Argument	prhs [ 0 ]
>1361	ArrayIndexing	prhs [ 0 ]
>1362	PrimaryExpression	0
>1363	Identifier	prhs
>1364	Callee	mxGetDimensions
>1365	Identifier	mxGetDimensions
>1366	Identifier	dimsX
>1367	Identifier	dimsX
>1368	IdentifierDeclType	const mwSize *
>1369	IdentifierDeclStatement	 
>1370	IdentifierDecl	* X
>1371	Identifier	X
>1372	IdentifierDeclType	Data < T > *
>1373	IfStatement	if ( nrhs == 3 )
>1374	IfStatement	if ( ! mxIsStruct ( prhs [ 2 ] ) )
>1375	ExpressionStatement	 
>1376	CallExpression	mexErrMsgTxt ( \"argument 3 should be struct\" )
>1377	ArgumentList	\"argument 3 should be struct\"
>1378	Argument	\"argument 3 should be struct\"
>1379	PrimaryExpression	\"argument 3 should be struct\"
>1380	Callee	mexErrMsgTxt
>1381	Identifier	mexErrMsgTxt
>1382	Condition	 
>1383	UnaryOp	! mxIsStruct ( prhs [ 2 ] )
>1384	CallExpression	mxIsStruct ( prhs [ 2 ] )
>1385	ArgumentList	prhs [ 2 ]
>1386	Argument	prhs [ 2 ]
>1387	ArrayIndexing	prhs [ 2 ]
>1388	PrimaryExpression	2
>1389	Identifier	prhs
>1390	Callee	mxIsStruct
>1391	Identifier	mxIsStruct
>1392	UnaryOperator	!
>1393	Condition	 
>1394	EqualityExpression	nrhs == 3
>1395	PrimaryExpression	3
>1396	Identifier	nrhs
>1397	IfStatement	if ( ! mxIsStruct ( prhs [ 1 ] ) )
>1398	ExpressionStatement	 
>1399	CallExpression	mexErrMsgTxt ( \"argument 2 should be struct\" )
>1400	ArgumentList	\"argument 2 should be struct\"
>1401	Argument	\"argument 2 should be struct\"
>1402	PrimaryExpression	\"argument 2 should be struct\"
>1403	Callee	mexErrMsgTxt
>1404	Identifier	mexErrMsgTxt
>1405	Condition	 
>1406	UnaryOp	! mxIsStruct ( prhs [ 1 ] )
>1407	CallExpression	mxIsStruct ( prhs [ 1 ] )
>1408	ArgumentList	prhs [ 1 ]
>1409	Argument	prhs [ 1 ]
>1410	ArrayIndexing	prhs [ 1 ]
>1411	PrimaryExpression	1
>1412	Identifier	prhs
>1413	Callee	mxIsStruct
>1414	Identifier	mxIsStruct
>1415	UnaryOperator	!
>1416	IfStatement	if ( ! mexCheckType < T > ( prhs [ 0 ] ) )
>1417	ExpressionStatement	 
>1418	CallExpression	mexErrMsgTxt ( \"type of argument 1 is not consistent\" )
>1419	ArgumentList	\"type of argument 1 is not consistent\"
>1420	Argument	\"type of argument 1 is not consistent\"
>1421	PrimaryExpression	\"type of argument 1 is not consistent\"
>1422	Callee	mexErrMsgTxt
>1423	Identifier	mexErrMsgTxt
>1424	Condition	 
>1425	RelationalExpression	! mexCheckType < T > ( prhs [ 0 ] )
>1426	RelationalExpression	T > ( prhs [ 0 ] )
>1427	ArrayIndexing	prhs [ 0 ]
>1428	PrimaryExpression	0
>1429	Identifier	prhs
>1430	Identifier	T
>1431	UnaryOp	! mexCheckType
>1432	Identifier	mexCheckType
>1433	UnaryOperator	!
>1529	FunctionDef	mexFunction (int nlhs , mxArray * plhs [ ] , int nrhs , const mxArray * prhs [ ])
>1530	ParameterList	int nlhs , mxArray * plhs [ ] , int nrhs , const mxArray * prhs [ ]
>1531	Parameter	 
>1532	Identifier	prhs
>1533	ParameterType	const mxArray * [ ]
>1534	Parameter	 
>1535	Identifier	nrhs
>1536	ParameterType	int
>1537	Parameter	 
>1538	Identifier	plhs
>1539	ParameterType	mxArray * [ ]
>1540	Parameter	 
>1541	Identifier	nlhs
>1542	ParameterType	int
>1543	ReturnType	void
>1544	CompoundStatement	 
>1545	IfStatement	if ( mxGetClassID ( prhs [ 0 ] ) == mxDOUBLE_CLASS )
>1546	ElseStatement	else
>1547	CompoundStatement	 
>1548	ExpressionStatement	 
>1549	RelationalExpression	callFunction < float > ( plhs , prhs , nlhs , nrhs )
>1550	RelationalExpression	float > ( plhs , prhs , nlhs , nrhs )
>1551	Expression	plhs , prhs , nlhs , nrhs
>1552	Expression	prhs , nlhs , nrhs
>1553	Expression	nlhs , nrhs
>1554	Identifier	nrhs
>1555	Identifier	nlhs
>1556	Identifier	prhs
>1557	Identifier	plhs
>1558	Identifier	float
>1559	Identifier	callFunction
>1560	CompoundStatement	 
>1561	ExpressionStatement	 
>1562	RelationalExpression	callFunction < double > ( plhs , prhs , nlhs , nrhs )
>1563	RelationalExpression	double > ( plhs , prhs , nlhs , nrhs )
>1564	Expression	plhs , prhs , nlhs , nrhs
>1565	Expression	prhs , nlhs , nrhs
>1566	Expression	nlhs , nrhs
>1567	Identifier	nrhs
>1568	Identifier	nlhs
>1569	Identifier	prhs
>1570	Identifier	plhs
>1571	Identifier	double
>1572	Identifier	callFunction
>1573	Condition	 
>1574	EqualityExpression	mxGetClassID ( prhs [ 0 ] ) == mxDOUBLE_CLASS
>1575	Identifier	mxDOUBLE_CLASS
>1576	CallExpression	mxGetClassID ( prhs [ 0 ] )
>1577	ArgumentList	prhs [ 0 ]
>1578	Argument	prhs [ 0 ]
>1579	ArrayIndexing	prhs [ 0 ]
>1580	PrimaryExpression	0
>1581	Identifier	prhs
>1582	Callee	mxGetClassID
>1583	Identifier	mxGetClassID
>1584	IfStatement	if ( ( nlhs < 1 ) && ( nlhs > 2 ) )
>1585	ExpressionStatement	 
>1586	CallExpression	mexErrMsgTxt ( \"Bad number of output arguments\" )
>1587	ArgumentList	\"Bad number of output arguments\"
>1588	Argument	\"Bad number of output arguments\"
>1589	PrimaryExpression	\"Bad number of output arguments\"
>1590	Callee	mexErrMsgTxt
>1591	Identifier	mexErrMsgTxt
>1592	Condition	 
>1593	AndExpression	( nlhs < 1 ) && ( nlhs > 2 )
>1594	RelationalExpression	nlhs > 2
>1595	PrimaryExpression	2
>1596	Identifier	nlhs
>1597	RelationalExpression	nlhs < 1
>1598	PrimaryExpression	1
>1599	Identifier	nlhs
>1600	IfStatement	if ( nrhs < 2 && nrhs > 3 )
>1601	ExpressionStatement	 
>1602	CallExpression	mexErrMsgTxt ( \"Bad number of inputs arguments\" )
>1603	ArgumentList	\"Bad number of inputs arguments\"
>1604	Argument	\"Bad number of inputs arguments\"
>1605	PrimaryExpression	\"Bad number of inputs arguments\"
>1606	Callee	mexErrMsgTxt
>1607	Identifier	mexErrMsgTxt
>1608	Condition	 
>1609	AndExpression	nrhs < 2 && nrhs > 3
>1610	RelationalExpression	nrhs > 3
>1611	PrimaryExpression	3
>1612	Identifier	nrhs
>1613	RelationalExpression	nrhs < 2
>1614	PrimaryExpression	2
>1615	Identifier	nrhs
<3=18,17,4
<4=14,11,8,5
<5=7,6
<8=10,9
<11=13,12
<14=16,15
<18=1416,1397,1373,1369,1355,1354,1353,1352,1351,1350,1349,1348,1344,1343,1342,1341,1340,1339,1338,1337,1333,1185,1184,1183,1182,1181,1180,1179,1178,1168,1153,1152,1151,1150,1149,1148,1147,1146,1134,1116,1112,759,755,741,725,724,723,722,721,720,719,718,717,711,695,694,693,692,691,690,689,688,687,686,685,684,676,660,644,628,627,626,625,624,623,622,621,620,619,618,617,609,593,577,561,545,529,508,492,491,490,19,21,22,24,25,244,253,262,271,272,273,274,275,276,277,278,279,280,292,304,313,317,331,344,413,429,451,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489
<19=20
<22=23
<25=240,26
<26=231,224,214,197,184,183,182,181,180,179,178,177,176,175,168,159,150,135,122,121,120,119,118,117,116,115,114,113,106,97,88,73,72,71,70,69,68,67,66,65,64,63,62,42,27
<27=28
<28=40,29
<29=36,34,32,30
<30=31
<32=33
<34=35
<36=37
<37=39,38
<40=41
<42=43
<43=54,44
<44=53,45
<45=52,46
<46=48,47
<48=49
<49=51,50
<54=61,55
<55=59,56
<56=57
<57=58
<59=60
<73=74
<74=86,75
<75=82,80,78,76
<76=77
<78=79
<80=81
<82=83
<83=85,84
<86=87
<88=89
<89=93,90
<90=91
<91=92
<93=94
<94=96,95
<97=98
<98=105,104,99
<99=103,100
<100=102,101
<106=107
<107=111,108
<108=109
<109=110
<111=112
<122=123
<123=134,133,124
<124=132,125
<125=131,126
<126=130,127
<127=129,128
<135=136
<136=148,137
<137=144,142,140,138
<138=139
<140=141
<142=143
<144=145
<145=147,146
<148=149
<150=151
<151=155,152
<152=153
<153=154
<155=156
<156=158,157
<159=160
<160=167,166,161
<161=165,162
<162=164,163
<168=169
<169=173,170
<170=171
<171=172
<173=174
<184=185
<185=196,195,186
<186=194,187
<187=193,188
<188=192,189
<189=191,190
<197=198
<198=211,199
<199=209,200
<200=207,205,203,201
<201=202
<203=204
<205=206
<207=208
<209=210
<211=213,212
<214=215
<215=223,222,216
<216=221,217
<217=220,219,218
<224=225
<225=230,229,226
<226=228,227
<231=232
<232=239,238,237,233
<233=236,234
<234=235
<240=241
<241=243,242
<244=245
<245=249,246
<246=247
<247=248
<249=250
<250=252,251
<253=254
<254=261,260,255
<255=259,256
<256=258,257
<262=263
<263=269,264
<264=265
<265=266
<266=268,267
<269=270
<280=281
<281=289,282
<282=288,283
<283=287,284
<284=286,285
<289=291,290
<292=293
<293=303,302,294
<294=301,295
<295=297,296
<297=298
<298=300,299
<304=305
<305=309,306
<306=307
<307=308
<309=310
<310=312,311
<313=314
<314=316,315
<317=327,318
<318=319
<319=325,320
<320=321
<321=322
<322=324,323
<325=326
<327=328
<328=330,329
<331=332
<332=340,333
<333=336,334
<334=335
<336=337
<337=339,338
<340=341
<341=343,342
<344=409,345
<345=391,379,365,359,346
<346=347
<347=357,348
<348=355,351,349
<349=350
<351=352
<352=354,353
<355=356
<357=358
<359=360
<360=362,361
<362=364,363
<365=366
<366=378,377,367
<367=376,368
<368=370,369
<370=374,371
<371=372
<372=373
<374=375
<379=387,380
<380=381
<381=385,382
<382=383
<383=384
<385=386
<387=388
<388=390,389
<391=392
<392=408,407,393
<393=406,394
<394=404,395
<395=400,398,396
<396=397
<398=399
<400=401
<401=403,402
<404=405
<409=410
<410=412,411
<413=414
<414=426,415
<415=425,416
<416=424,417
<417=421,418
<418=420,419
<421=423,422
<426=428,427
<429=430
<430=448,431
<431=447,432
<432=446,433
<433=443,434
<434=442,435
<435=438,437,436
<438=439
<439=441,440
<443=445,444
<448=450,449
<451=452
<452=464,453
<453=463,454
<454=462,455
<455=459,456
<456=458,457
<459=461,460
<464=466,465
<492=493
<493=505,494
<494=504,495
<495=503,496
<496=500,497
<497=499,498
<500=502,501
<505=507,506
<508=509
<509=526,510
<510=525,511
<511=524,512
<512=521,513
<513=520,514
<514=518,515
<515=516
<516=517
<518=519
<521=523,522
<526=528,527
<529=530
<530=542,531
<531=541,532
<532=540,533
<533=537,534
<534=536,535
<537=539,538
<542=544,543
<545=546
<546=558,547
<547=557,548
<548=556,549
<549=553,550
<550=552,551
<553=555,554
<558=560,559
<561=562
<562=574,563
<563=573,564
<564=572,565
<565=569,566
<566=568,567
<569=571,570
<574=576,575
<577=578
<578=590,579
<579=589,580
<580=588,581
<581=585,582
<582=584,583
<585=587,586
<590=592,591
<593=594
<594=606,595
<595=605,596
<596=604,597
<597=601,598
<598=600,599
<601=603,602
<606=608,607
<609=610
<610=614,611
<611=613,612
<614=616,615
<628=629
<629=641,630
<630=640,631
<631=639,632
<632=636,633
<633=635,634
<636=638,637
<641=643,642
<644=645
<645=657,646
<646=656,647
<647=655,648
<648=652,649
<649=651,650
<652=654,653
<657=659,658
<660=661
<661=673,662
<662=672,663
<663=671,664
<664=668,665
<665=667,666
<668=670,669
<673=675,674
<676=677
<677=681,678
<678=680,679
<681=683,682
<695=696
<696=708,697
<697=707,698
<698=706,699
<699=703,700
<700=702,701
<703=705,704
<708=710,709
<711=712
<712=714,713
<714=716,715
<725=726
<726=738,727
<727=737,728
<728=736,729
<729=733,730
<730=732,731
<733=735,734
<738=740,739
<741=742
<742=752,743
<743=751,744
<744=750,745
<745=747,746
<747=749,748
<752=754,753
<755=756
<756=758,757
<759=1108,1086,760
<760=761
<761=1085,1084,1083,1082,1081,1080,1079,1078,1077,1070,1058,1057,1056,1055,1054,1053,1052,1051,1047,1046,1045,1044,1043,1042,1041,1040,1036,1024,1015,762
<762=1011,773,763
<763=764
<764=765
<765=766
<766=772,767
<767=771,768
<768=770,769
<773=993,981,980,979,978,977,976,975,974,973,972,965,953,952,951,950,949,948,947,946,942,774,788,794,795,796,797,798,799,800,801,810,826,830,831,832,833,834,835,836,837,841,842,843,844,845,846,847,848,860,867,868,869,870,871,872,873,874,875,876,888,906,915,931,935,936,937,938,939,940,941
<774=775
<775=787,776
<776=786,777
<777=785,778
<778=784,779
<779=783,780
<780=782,781
<788=789
<789=791,790
<791=793,792
<801=802
<802=809,808,803
<803=807,804
<804=806,805
<810=818,811
<811=812
<812=816,813
<813=814
<814=815
<816=817
<818=819
<819=823,820
<820=822,821
<823=825,824
<826=827
<827=829,828
<837=838
<838=840,839
<848=849
<849=859,858,850
<850=857,851
<851=855,852
<852=853
<853=854
<855=856
<860=861
<861=865,862
<862=863
<863=864
<865=866
<876=884,877
<877=878
<878=882,879
<879=880
<880=881
<882=883
<884=885
<885=887,886
<888=889
<889=905,904,890
<890=903,891
<891=901,892
<892=897,895,893
<893=894
<895=896
<897=898
<898=900,899
<901=902
<906=907
<907=914,913,908
<908=912,909
<909=911,910
<915=923,916
<916=917
<917=921,918
<918=919
<919=920
<921=922
<923=924
<924=928,925
<925=927,926
<928=930,929
<931=932
<932=934,933
<942=943
<943=945,944
<953=954
<954=964,963,955
<955=962,956
<956=960,957
<957=958
<958=959
<960=961
<965=966
<966=970,967
<967=968
<968=969
<970=971
<981=989,982
<982=983
<983=987,984
<984=985
<985=986
<987=988
<989=990
<990=992,991
<993=994
<994=1010,1009,995
<995=1008,996
<996=1006,997
<997=1002,1000,998
<998=999
<1000=1001
<1002=1003
<1003=1005,1004
<1006=1007
<1011=1012
<1012=1014,1013
<1015=1016
<1016=1023,1022,1017
<1017=1021,1018
<1018=1020,1019
<1024=1032,1025
<1025=1026
<1026=1030,1027
<1027=1028
<1028=1029
<1030=1031
<1032=1033
<1033=1035,1034
<1036=1037
<1037=1039,1038
<1047=1048
<1048=1050,1049
<1058=1059
<1059=1069,1068,1060
<1060=1067,1061
<1061=1065,1062
<1062=1063
<1063=1064
<1065=1066
<1070=1071
<1071=1075,1072
<1072=1073
<1073=1074
<1075=1076
<1086=1107,1106,1105,1104,1103,1102,1101,1095,1087
<1087=1088
<1088=1094,1089
<1089=1093,1090
<1090=1092,1091
<1095=1096
<1096=1098,1097
<1098=1100,1099
<1108=1109
<1109=1111,1110
<1112=1113
<1113=1115,1114
<1116=1117
<1117=1133,1132,1118
<1118=1131,1119
<1119=1129,1120
<1120=1125,1123,1121
<1121=1122
<1123=1124
<1125=1126
<1126=1128,1127
<1129=1130
<1134=1135
<1135=1143,1136
<1136=1142,1137
<1137=1141,1138
<1138=1140,1139
<1143=1145,1144
<1153=1154
<1154=1167,1155
<1155=1161,1157,1156
<1157=1159,1158
<1159=1160
<1161=1162
<1162=1166,1163
<1163=1165,1164
<1168=1169
<1169=1175,1170
<1170=1174,1171
<1171=1173,1172
<1175=1177,1176
<1185=1324,1214,1186
<1186=1187
<1187=1213,1212,1211,1210,1209,1208,1207,1206,1205,1196,1188
<1188=1189
<1189=1195,1190
<1190=1194,1191
<1191=1193,1192
<1196=1197
<1197=1203,1198
<1198=1199
<1199=1200
<1200=1202,1201
<1203=1204
<1214=1323,1322,1321,1320,1319,1318,1317,1316,1315,1306,1292,1278,1269,1259,1255,1233,1215
<1215=1216
<1216=1232,1217
<1217=1231,1218
<1218=1230,1219
<1219=1229,1220
<1220=1228,1221
<1221=1227,1222
<1222=1226,1223
<1223=1225,1224
<1233=1234
<1234=1254,1235
<1235=1253,1236
<1236=1252,1237
<1237=1251,1238
<1238=1250,1239
<1239=1249,1240
<1240=1248,1241
<1241=1247,1242
<1242=1246,1243
<1243=1245,1244
<1255=1256
<1256=1258,1257
<1259=1266,1263,1260
<1260=1262,1261
<1263=1265,1264
<1266=1268,1267
<1269=1270
<1270=1277,1276,1271
<1271=1275,1272
<1272=1274,1273
<1278=1279
<1279=1291,1290,1280
<1280=1289,1281
<1281=1287,1282
<1282=1283
<1283=1284
<1284=1286,1285
<1287=1288
<1292=1293
<1293=1305,1304,1294
<1294=1303,1295
<1295=1301,1296
<1296=1297
<1297=1298
<1298=1300,1299
<1301=1302
<1306=1307
<1307=1313,1308
<1308=1309
<1309=1310
<1310=1312,1311
<1313=1314
<1324=1325
<1325=1331,1326
<1326=1327
<1327=1328
<1328=1330,1329
<1331=1332
<1333=1334
<1334=1336,1335
<1344=1345
<1345=1347,1346
<1355=1356
<1356=1368,1367,1357
<1357=1366,1358
<1358=1364,1359
<1359=1360
<1360=1361
<1361=1363,1362
<1364=1365
<1369=1370
<1370=1372,1371
<1373=1393,1374
<1374=1382,1375
<1375=1376
<1376=1380,1377
<1377=1378
<1378=1379
<1380=1381
<1382=1383
<1383=1392,1384
<1384=1390,1385
<1385=1386
<1386=1387
<1387=1389,1388
<1390=1391
<1393=1394
<1394=1396,1395
<1397=1405,1398
<1398=1399
<1399=1403,1400
<1400=1401
<1401=1402
<1403=1404
<1405=1406
<1406=1415,1407
<1407=1413,1408
<1408=1409
<1409=1410
<1410=1412,1411
<1413=1414
<1416=1424,1417
<1417=1418
<1418=1422,1419
<1419=1420
<1420=1421
<1422=1423
<1424=1425
<1425=1431,1426
<1426=1430,1427
<1427=1429,1428
<1431=1433,1432
<1529=1544,1543,1530
<1530=1540,1537,1534,1531
<1531=1533,1532
<1534=1536,1535
<1537=1539,1538
<1540=1542,1541
<1544=1600,1584,1545
<1545=1573,1560,1546
<1546=1547
<1547=1548
<1548=1549
<1549=1559,1550
<1550=1558,1551
<1551=1557,1552
<1552=1556,1553
<1553=1555,1554
<1560=1561
<1561=1562
<1562=1572,1563
<1563=1571,1564
<1564=1570,1565
<1565=1569,1566
<1566=1568,1567
<1573=1574
<1574=1576,1575
<1576=1582,1577
<1577=1578
<1578=1579
<1579=1581,1580
<1582=1583
<1584=1592,1585
<1585=1586
<1586=1590,1587
<1587=1588
<1588=1589
<1590=1591
<1592=1593
<1593=1597,1594
<1594=1596,1595
<1597=1599,1598
<1600=1608,1601
<1601=1602
<1602=1606,1603
<1603=1604
<1604=1605
<1606=1607
<1608=1609
<1609=1613,1610
<1610=1612,1611
<1613=1615,1614
