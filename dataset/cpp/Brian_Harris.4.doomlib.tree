>43	FunctionDef	GetCurrentExpansion ()
>44	ParameterList	 
>45	ReturnType	const ExpansionData *
>46	CompoundStatement	 
>47	ReturnStatement	 
>48	UnaryOp	& App_Expansion_Data_Local [ DoomLib 
>49	ArrayIndexing	App_Expansion_Data_Local [ DoomLib 
>50	Identifier	DoomLib 
>51	Identifier	App_Expansion_Data_Local
>52	UnaryOperator	&
>60	FunctionDef	SetCurrentExpansion (int expansion)
>61	ParameterList	int expansion
>62	Parameter	 
>63	Identifier	expansion
>64	ParameterType	int
>65	ReturnType	void
>66	CompoundStatement	 
>67	ExpressionStatement	 
>68	AssignmentExpr	expansionSelected = expansion
>69	Identifier	expansion
>70	Identifier	expansionSelected
>71	ExpressionStatement	 
>72	AssignmentExpr	expansionDirty = true
>73	Identifier	true
>74	Identifier	expansionDirty
>82	FunctionDef	SetIdealExpansion (int expansion)
>83	ParameterList	int expansion
>84	Parameter	 
>85	Identifier	expansion
>86	ParameterType	int
>87	ReturnType	void
>88	CompoundStatement	 
>89	ExpressionStatement	 
>90	AssignmentExpr	idealExpansion = expansion
>91	Identifier	expansion
>92	Identifier	idealExpansion
>102	FunctionDef	SetCurrentMapName (idStr name)
>103	ParameterList	idStr name
>104	Parameter	 
>105	Identifier	name
>106	ParameterType	idStr
>107	ReturnType	void
>108	CompoundStatement	 
>109	ExpressionStatement	 
>110	AssignmentExpr	currentMapName = name
>111	Identifier	name
>112	Identifier	currentMapName
>118	FunctionDef	GetCurrentMapName ()
>119	ParameterList	 
>120	ReturnType	const idStr &
>121	CompoundStatement	 
>122	ReturnStatement	 
>123	Identifier	currentMapName
>128	FunctionDef	SetCurrentDifficulty (idStr name)
>129	ParameterList	idStr name
>130	Parameter	 
>131	Identifier	name
>132	ParameterType	idStr
>133	ReturnType	void
>134	CompoundStatement	 
>135	ExpressionStatement	 
>136	AssignmentExpr	currentDifficulty = name
>137	Identifier	name
>138	Identifier	currentDifficulty
>144	FunctionDef	GetCurrentDifficulty ()
>145	ParameterList	 
>146	ReturnType	const idStr &
>147	CompoundStatement	 
>148	ReturnStatement	 
>149	Identifier	currentDifficulty
>188	FunctionDef	ExitGame ()
>189	ParameterList	 
>190	ReturnType	void
>191	CompoundStatement	 
>192	ExpressionStatement	 
>193	CallExpression	session -> QuitMatch ( )
>194	ArgumentList	 
>195	Callee	session -> QuitMatch
>196	PtrMemberAccess	session -> QuitMatch
>197	Identifier	QuitMatch
>198	Identifier	session
>199	ExpressionStatement	 
>200	CallExpression	D_QuitNetGame ( )
>201	ArgumentList	 
>202	Callee	D_QuitNetGame
>203	Identifier	D_QuitNetGame
>204	ExpressionStatement	 
>205	CallExpression	DoomLib 
>206	ArgumentList	0
>207	Argument	0
>208	PrimaryExpression	0
>209	Callee	DoomLib 
>210	Identifier	DoomLib 
>215	FunctionDef	ShowXToContinue (bool activate)
>216	ParameterList	bool activate
>217	Parameter	 
>218	Identifier	activate
>219	ParameterType	bool
>220	ReturnType	void
>221	CompoundStatement	 
>226	FunctionDef	GetGameSKU ()
>227	ParameterList	 
>228	ReturnType	gameSKU_t
>229	CompoundStatement	 
>230	ReturnStatement	 
>231	Identifier	GAME_SKU_DCC
>232	ExpressionStatement	 
>233	CallExpression	assert ( false && \"Invalid basepath\" )
>234	ArgumentList	false && \"Invalid basepath\"
>235	Argument	false && \"Invalid basepath\"
>236	AndExpression	false && \"Invalid basepath\"
>237	PrimaryExpression	\"Invalid basepath\"
>238	Identifier	false
>239	Callee	assert
>240	Identifier	assert
>241	IfStatement	if ( common -> GetCurrentGame ( ) == DOOM_CLASSIC )
>242	ElseStatement	else
>243	IfStatement	if ( common -> GetCurrentGame ( ) == DOOM2_CLASSIC )
>244	CompoundStatement	 
>245	ReturnStatement	 
>246	Identifier	GAME_SKU_DOOM2_BFG
>247	Condition	 
>248	EqualityExpression	common -> GetCurrentGame ( ) == DOOM2_CLASSIC
>249	Identifier	DOOM2_CLASSIC
>250	CallExpression	common -> GetCurrentGame ( )
>251	ArgumentList	 
>252	Callee	common -> GetCurrentGame
>253	PtrMemberAccess	common -> GetCurrentGame
>254	Identifier	GetCurrentGame
>255	Identifier	common
>256	CompoundStatement	 
>257	ReturnStatement	 
>258	Identifier	GAME_SKU_DOOM1_BFG
>259	Condition	 
>260	EqualityExpression	common -> GetCurrentGame ( ) == DOOM_CLASSIC
>261	Identifier	DOOM_CLASSIC
>262	CallExpression	common -> GetCurrentGame ( )
>263	ArgumentList	 
>264	Callee	common -> GetCurrentGame
>265	PtrMemberAccess	common -> GetCurrentGame
>266	Identifier	GetCurrentGame
>267	Identifier	common
>280	FunctionDef	ActivateGame ()
>281	ParameterList	 
>282	ReturnType	void
>283	CompoundStatement	 
>284	ExpressionStatement	 
>285	CallExpression	DoomLib 
>286	ArgumentList	originalPlayer
>287	Argument	originalPlayer
>288	Identifier	originalPlayer
>289	Callee	DoomLib 
>290	Identifier	DoomLib 
>291	ExpressionStatement	 
>292	AssignmentExpr	globalPauseTime = false
>293	Identifier	false
>294	Identifier	globalPauseTime
>295	ForStatement	for ( int i = 0 ; i < Interface . GetNumPlayers ( ) ; i ++ )
>296	CompoundStatement	 
>297	ExpressionStatement	 
>298	AssignmentExpr	g -> menuactive = false
>299	Identifier	false
>300	PtrMemberAccess	g -> menuactive
>301	Identifier	menuactive
>302	Identifier	g
>303	Statement	 
>304	ExpressionStatement	 
>305	CallExpression	DoomLib 
>306	ArgumentList	i
>307	Argument	i
>308	Identifier	i
>309	Callee	DoomLib 
>310	Identifier	DoomLib 
>311	IncDecOp	 
>312	IncDec	++
>313	Identifier	i
>314	Condition	 
>315	RelationalExpression	i < Interface . GetNumPlayers ( )
>316	CallExpression	Interface . GetNumPlayers ( )
>317	ArgumentList	 
>318	Callee	Interface . GetNumPlayers
>319	MemberAccess	Interface . GetNumPlayers
>320	Identifier	GetNumPlayers
>321	Identifier	Interface
>322	Identifier	i
>323	ForInit	 
>324	IdentifierDeclStatement	int i = 0 ;
>325	IdentifierDecl	i = 0
>326	AssignmentExpr	i = 0
>327	PrimaryExpression	0
>328	Identifier	i
>329	Identifier	i
>330	IdentifierDeclType	int
>331	IdentifierDeclStatement	 
>332	IdentifierDecl	originalPlayer = DoomLib 
>333	AssignmentExpr	originalPlayer = DoomLib 
>334	CallExpression	DoomLib 
>335	ArgumentList	 
>336	Callee	DoomLib 
>337	Identifier	DoomLib 
>338	Identifier	originalPlayer
>339	Identifier	originalPlayer
>340	IdentifierDeclType	int
>341	ExpressionStatement	 
>342	AssignmentExpr	Active = true
>343	Identifier	true
>344	Identifier	Active
>360	FunctionDef	HandleEndMatch ()
>361	ParameterList	 
>362	ReturnType	void
>363	CompoundStatement	 
>364	IfStatement	if ( session -> GetGameLobbyBase ( ) . IsHost ( ) )
>365	CompoundStatement	 
>366	ExpressionStatement	 
>367	CallExpression	session -> EndMatch ( )
>368	ArgumentList	 
>369	Callee	session -> EndMatch
>370	PtrMemberAccess	session -> EndMatch
>371	Identifier	EndMatch
>372	Identifier	session
>373	ExpressionStatement	 
>374	CallExpression	ShowXToContinue ( false )
>375	ArgumentList	false
>376	Argument	false
>377	Identifier	false
>378	Callee	ShowXToContinue
>379	Identifier	ShowXToContinue
>380	Condition	 
>381	CallExpression	session -> GetGameLobbyBase ( ) . IsHost ( )
>382	ArgumentList	 
>383	Callee	session -> GetGameLobbyBase ( ) . IsHost
>384	MemberAccess	session -> GetGameLobbyBase ( ) . IsHost
>385	Identifier	IsHost
>386	CallExpression	session -> GetGameLobbyBase ( )
>387	ArgumentList	 
>388	Callee	session -> GetGameLobbyBase
>389	PtrMemberAccess	session -> GetGameLobbyBase
>390	Identifier	GetGameLobbyBase
>391	Identifier	session
>418	FunctionDef	DoomLib 
>419	ParameterList	void * ptr
>420	Parameter	 
>421	Identifier	ptr
>422	ParameterType	void *
>423	ReturnType	void
>424	CompoundStatement	 
>425	ExpressionStatement	 
>426	CallExpression	g -> InitGlobals ( )
>427	ArgumentList	 
>428	Callee	g -> InitGlobals
>429	PtrMemberAccess	g -> InitGlobals
>430	Identifier	InitGlobals
>431	Identifier	g
>432	ExpressionStatement	 
>433	AssignmentExpr	g = globaldata [ currentplayer ]
>434	ArrayIndexing	globaldata [ currentplayer ]
>435	Identifier	currentplayer
>436	Identifier	globaldata
>437	Identifier	g
>438	ExpressionStatement	 
>439	CallExpression	memset ( globaldata [ currentplayer ] , 0 , sizeof ( Globals ) )
>440	ArgumentList	globaldata [ currentplayer ]
>441	Argument	sizeof ( Globals )
>442	SizeofExpr	sizeof ( Globals )
>443	SizeofOperand	Globals
>444	Sizeof	sizeof
>445	Argument	0
>446	PrimaryExpression	0
>447	Argument	globaldata [ currentplayer ]
>448	ArrayIndexing	globaldata [ currentplayer ]
>449	Identifier	currentplayer
>450	Identifier	globaldata
>451	Callee	memset
>452	Identifier	memset
>453	ExpressionStatement	 
>454	Identifier	ptr
>455	Statement	 
>456	Statement	 
>457	Statement	 
>458	Statement	 
>459	Statement	 
>460	Statement	 
>461	Statement	 
>462	Statement	 
>463	Statement	 
>464	Statement	 
>465	ExpressionStatement	 
>466	Identifier	Globals
>467	Statement	 
>468	Statement	 
>469	IfStatement	if ( ptr == NULL )
>470	Statement	 
>471	Condition	 
>472	EqualityExpression	ptr == NULL
>473	Identifier	NULL
>474	Identifier	ptr
>485	FunctionDef	DoomLib 
>486	ParameterList	int player
>487	Parameter	 
>488	Identifier	player
>489	ParameterType	int
>490	ReturnType	void *
>491	CompoundStatement	 
>492	ReturnStatement	 
>493	ArrayIndexing	globaldata [ player ]
>494	Identifier	player
>495	Identifier	globaldata
>503	FunctionDef	DoomLib 
>504	ParameterList	 
>505	ReturnType	void
>506	CompoundStatement	 
>507	ExpressionStatement	 
>508	AssignmentExpr	classicRemap [ K_JOY1 ] = K_ENTER
>509	Identifier	K_ENTER
>510	ArrayIndexing	classicRemap [ K_JOY1 ]
>511	Identifier	K_JOY1
>512	Identifier	classicRemap
>513	ExpressionStatement	 
>514	AssignmentExpr	classicRemap [ K_JOY_DPAD_RIGHT ] = K_RIGHTARROW
>515	Identifier	K_RIGHTARROW
>516	ArrayIndexing	classicRemap [ K_JOY_DPAD_RIGHT ]
>517	Identifier	K_JOY_DPAD_RIGHT
>518	Identifier	classicRemap
>519	ExpressionStatement	 
>520	AssignmentExpr	classicRemap [ K_JOY_STICK1_RIGHT ] = K_RIGHTARROW
>521	Identifier	K_RIGHTARROW
>522	ArrayIndexing	classicRemap [ K_JOY_STICK1_RIGHT ]
>523	Identifier	K_JOY_STICK1_RIGHT
>524	Identifier	classicRemap
>525	ExpressionStatement	 
>526	AssignmentExpr	classicRemap [ K_JOY_DPAD_LEFT ] = K_LEFTARROW
>527	Identifier	K_LEFTARROW
>528	ArrayIndexing	classicRemap [ K_JOY_DPAD_LEFT ]
>529	Identifier	K_JOY_DPAD_LEFT
>530	Identifier	classicRemap
>531	ExpressionStatement	 
>532	AssignmentExpr	classicRemap [ K_JOY_STICK1_LEFT ] = K_LEFTARROW
>533	Identifier	K_LEFTARROW
>534	ArrayIndexing	classicRemap [ K_JOY_STICK1_LEFT ]
>535	Identifier	K_JOY_STICK1_LEFT
>536	Identifier	classicRemap
>537	ExpressionStatement	 
>538	AssignmentExpr	classicRemap [ K_JOY_DPAD_DOWN ] = K_DOWNARROW
>539	Identifier	K_DOWNARROW
>540	ArrayIndexing	classicRemap [ K_JOY_DPAD_DOWN ]
>541	Identifier	K_JOY_DPAD_DOWN
>542	Identifier	classicRemap
>543	ExpressionStatement	 
>544	AssignmentExpr	classicRemap [ K_JOY_STICK1_DOWN ] = K_DOWNARROW
>545	Identifier	K_DOWNARROW
>546	ArrayIndexing	classicRemap [ K_JOY_STICK1_DOWN ]
>547	Identifier	K_JOY_STICK1_DOWN
>548	Identifier	classicRemap
>549	ExpressionStatement	 
>550	AssignmentExpr	classicRemap [ K_JOY_DPAD_UP ] = K_UPARROW
>551	Identifier	K_UPARROW
>552	ArrayIndexing	classicRemap [ K_JOY_DPAD_UP ]
>553	Identifier	K_JOY_DPAD_UP
>554	Identifier	classicRemap
>555	ExpressionStatement	 
>556	AssignmentExpr	classicRemap [ K_JOY_STICK1_UP ] = K_UPARROW
>557	Identifier	K_UPARROW
>558	ArrayIndexing	classicRemap [ K_JOY_STICK1_UP ]
>559	Identifier	K_JOY_STICK1_UP
>560	Identifier	classicRemap
>561	ExpressionStatement	 
>562	AssignmentExpr	classicRemap [ K_JOY9 ] = K_ESCAPE
>563	Identifier	K_ESCAPE
>564	ArrayIndexing	classicRemap [ K_JOY9 ]
>565	Identifier	K_JOY9
>566	Identifier	classicRemap
>567	ExpressionStatement	 
>568	AssignmentExpr	classicRemap [ K_JOY2 ] = K_EQUALS
>569	Identifier	K_EQUALS
>570	ArrayIndexing	classicRemap [ K_JOY2 ]
>571	Identifier	K_JOY2
>572	Identifier	classicRemap
>573	ExpressionStatement	 
>574	AssignmentExpr	classicRemap [ K_JOY4 ] = K_MINUS
>575	Identifier	K_MINUS
>576	ArrayIndexing	classicRemap [ K_JOY4 ]
>577	Identifier	K_JOY4
>578	Identifier	classicRemap
>579	ExpressionStatement	 
>580	AssignmentExpr	classicRemap [ K_JOY3 ] = KEY_TAB
>581	Identifier	KEY_TAB
>582	ArrayIndexing	classicRemap [ K_JOY3 ]
>583	Identifier	K_JOY3
>584	Identifier	classicRemap
>585	ExpressionStatement	 
>586	CallExpression	memset ( classicRemap , K_NONE , sizeof ( classicRemap ) )
>587	ArgumentList	classicRemap
>588	Argument	sizeof ( classicRemap )
>589	SizeofExpr	sizeof ( classicRemap )
>590	SizeofOperand	classicRemap
>591	Sizeof	sizeof
>592	Argument	K_NONE
>593	Identifier	K_NONE
>594	Argument	classicRemap
>595	Identifier	classicRemap
>596	Callee	memset
>597	Identifier	memset
>639	FunctionDef	DoomLib 
>640	ParameterList	keyNum_t key
>641	Parameter	 
>642	Identifier	key
>643	ParameterType	keyNum_t
>644	ReturnType	keyNum_t
>645	CompoundStatement	 
>646	IfStatement	if ( classicRemap [ key ] == K_NONE )
>647	ElseStatement	else
>648	CompoundStatement	 
>649	ReturnStatement	 
>650	CastExpression	( keyNum_t ) classicRemap [ key ]
>651	ArrayIndexing	classicRemap [ key ]
>652	Identifier	key
>653	Identifier	classicRemap
>654	CastTarget	keyNum_t
>655	CompoundStatement	 
>656	ReturnStatement	 
>657	Identifier	K_BACKSPACE
>658	Statement	 
>659	Statement	 
>660	Statement	 
>661	Statement	 
>662	Statement	 
>663	Statement	 
>664	Statement	 
>665	Statement	 
>666	Statement	 
>667	Statement	 
>668	Statement	 
>669	CompoundStatement	 
>670	ReturnStatement	 
>671	Identifier	key
>672	Condition	 
>673	EqualityExpression	classicRemap [ key ] == K_NONE
>674	Identifier	K_NONE
>675	ArrayIndexing	classicRemap [ key ]
>676	Identifier	key
>677	Identifier	classicRemap
>687	FunctionDef	DoomLib 
>688	ParameterList	int argc , char * * argv
>689	Parameter	 
>690	Identifier	argv
>691	ParameterType	char * *
>692	Parameter	 
>693	Identifier	argc
>694	ParameterType	int
>695	ReturnType	void
>696	CompoundStatement	 
>697	ExpressionStatement	 
>698	CallExpression	D_DoomMain ( )
>699	ArgumentList	 
>700	Callee	D_DoomMain
>701	Identifier	D_DoomMain
>702	ExpressionStatement	 
>703	CallExpression	InitControlRemap ( )
>704	ArgumentList	 
>705	Callee	InitControlRemap
>706	Identifier	InitControlRemap
>707	ExpressionStatement	 
>708	AssignmentExpr	g -> myargv = argv
>709	Identifier	argv
>710	PtrMemberAccess	g -> myargv
>711	Identifier	myargv
>712	Identifier	g
>713	Statement	 
>714	ExpressionStatement	 
>715	AssignmentExpr	g -> myargc = argc
>716	Identifier	argc
>717	PtrMemberAccess	g -> myargc
>718	Identifier	myargc
>719	Identifier	g
>720	Statement	 
>730	FunctionDef	DoomLib 
>731	ParameterList	 
>732	ReturnType	bool
>733	CompoundStatement	 
>734	ReturnStatement	 
>735	CallExpression	D_DoomMainPoll ( )
>736	ArgumentList	 
>737	Callee	D_DoomMainPoll
>738	Identifier	D_DoomMainPoll
>745	FunctionDef	DoomLib 
>746	ParameterList	idUserCmdMgr * userCmdMgr
>747	Parameter	 
>748	Identifier	userCmdMgr
>749	ParameterType	idUserCmdMgr *
>750	ReturnType	bool
>751	CompoundStatement	 
>752	ReturnStatement	 
>753	CallExpression	TryRunTics ( userCmdMgr )
>754	ArgumentList	userCmdMgr
>755	Argument	userCmdMgr
>756	Identifier	userCmdMgr
>757	Callee	TryRunTics
>758	Identifier	TryRunTics
>766	FunctionDef	DoomLib 
>767	ParameterList	 
>768	ReturnType	void
>769	CompoundStatement	 
>770	ExpressionStatement	 
>771	CallExpression	D_Wipe ( )
>772	ArgumentList	 
>773	Callee	D_Wipe
>774	Identifier	D_Wipe
>778	FunctionDef	DoomLib 
>779	ParameterList	int realoffset , int buffer
>780	Parameter	 
>781	Identifier	buffer
>782	ParameterType	int
>783	Parameter	 
>784	Identifier	realoffset
>785	ParameterType	int
>786	ReturnType	void
>787	CompoundStatement	 
>788	IfStatement	if ( 0 <= currentplayer && currentplayer <= 4 )
>789	CompoundStatement	 
>790	ExpressionStatement	 
>791	CallExpression	D_RunFrame ( true )
>792	ArgumentList	true
>793	Argument	true
>794	Identifier	true
>795	Callee	D_RunFrame
>796	Identifier	D_RunFrame
>797	IdentifierDeclStatement	 
>798	IdentifierDecl	crit ( playerScreenMutexes [ currentplayer ] )
>799	ArrayIndexing	playerScreenMutexes [ currentplayer ]
>800	Identifier	currentplayer
>801	Identifier	playerScreenMutexes
>802	Identifier	crit
>803	IdentifierDeclType	idScopedCriticalSection
>804	Condition	 
>805	AndExpression	0 <= currentplayer && currentplayer <= 4
>806	RelationalExpression	currentplayer <= 4
>807	PrimaryExpression	4
>808	Identifier	currentplayer
>809	RelationalExpression	0 <= currentplayer
>810	Identifier	currentplayer
>811	PrimaryExpression	0
>812	ExpressionStatement	 
>813	AssignmentExpr	g -> realoffset = realoffset
>814	Identifier	realoffset
>815	PtrMemberAccess	g -> realoffset
>816	Identifier	realoffset
>817	Identifier	g
>818	Statement	 
>831	FunctionDef	DoomLib 
>832	ParameterList	 
>833	ReturnType	void
>834	CompoundStatement	 
>835	ExpressionStatement	 
>836	Statement	 
>837	Statement	 
>838	Statement	 
>839	Statement	 
>840	Statement	 
>841	Statement	 
>842	Statement	 
>843	Statement	 
>844	Statement	 
>845	Statement	 
>846	Statement	 
>847	Statement	 
>848	Statement	 
>849	Statement	 
>853	FunctionDef	GetViewAngle ()
>854	ParameterList	 
>855	ReturnType	angle_t
>856	CompoundStatement	 
>857	ReturnStatement	 
>858	PtrMemberAccess	g -> viewangle
>859	Identifier	viewangle
>860	Identifier	g
>867	FunctionDef	SetViewAngle (angle_t ang)
>868	ParameterList	angle_t ang
>869	Parameter	 
>870	Identifier	ang
>871	ParameterType	angle_t
>872	ReturnType	void
>873	CompoundStatement	 
>874	ExpressionStatement	 
>875	PrimaryExpression	8
>876	Statement	 
>877	Statement	 
>878	Statement	 
>879	Statement	 
>880	Statement	 
>881	Statement	 
>882	Statement	 
>883	Statement	 
>884	Statement	 
>885	Statement	 
>886	Statement	 
>887	Statement	 
>888	Statement	 
>889	Statement	 
>890	Statement	 
>891	Statement	 
>892	Statement	 
>893	Statement	 
>894	Statement	 
>895	Statement	 
>896	Statement	 
>897	ExpressionStatement	 
>898	PrimaryExpression	8
>899	Statement	 
>900	Statement	 
>901	Statement	 
>902	Statement	 
>903	Statement	 
>904	Statement	 
>905	Statement	 
>906	Statement	 
>907	Statement	 
>908	Statement	 
>909	Statement	 
>910	Statement	 
>911	Statement	 
>912	Statement	 
>913	Statement	 
>914	Statement	 
>915	Statement	 
>916	Statement	 
>917	Statement	 
>918	Statement	 
>919	Statement	 
>920	ExpressionStatement	 
>921	AssignmentExpr	g -> viewangle = ang
>922	Identifier	ang
>923	PtrMemberAccess	g -> viewangle
>924	Identifier	viewangle
>925	Identifier	g
>933	FunctionDef	SetViewX (fixed_t x)
>934	ParameterList	fixed_t x
>935	Parameter	 
>936	Identifier	x
>937	ParameterType	fixed_t
>938	ReturnType	void
>939	CompoundStatement	 
>940	ExpressionStatement	 
>941	AssignmentExpr	g -> viewx = x
>942	Identifier	x
>943	PtrMemberAccess	g -> viewx
>944	Identifier	viewx
>945	Identifier	g
>946	Statement	 
>954	FunctionDef	SetViewY (fixed_t y)
>955	ParameterList	fixed_t y
>956	Parameter	 
>957	Identifier	y
>958	ParameterType	fixed_t
>959	ReturnType	void
>960	CompoundStatement	 
>961	ExpressionStatement	 
>962	AssignmentExpr	g -> viewy = y
>963	Identifier	y
>964	PtrMemberAccess	g -> viewy
>965	Identifier	viewy
>966	Identifier	g
>967	Statement	 
>975	FunctionDef	GetViewX ()
>976	ParameterList	 
>977	ReturnType	fixed_t
>978	CompoundStatement	 
>979	ExpressionStatement	 
>980	PtrMemberAccess	g -> viewxoffset
>981	Identifier	viewxoffset
>982	Identifier	g
>983	Statement	 
>984	Statement	 
>985	Statement	 
>986	Statement	 
>987	Statement	 
>988	Statement	 
>989	Statement	 
>994	FunctionDef	GetViewY ()
>995	ParameterList	 
>996	ReturnType	fixed_t
>997	CompoundStatement	 
>998	ExpressionStatement	 
>999	PtrMemberAccess	g -> viewyoffset
>1000	Identifier	viewyoffset
>1001	Identifier	g
>1002	Statement	 
>1003	Statement	 
>1004	Statement	 
>1005	Statement	 
>1006	Statement	 
>1007	Statement	 
>1008	Statement	 
>1013	FunctionDef	DoomLib 
>1014	ParameterList	 
>1015	ReturnType	void
>1016	CompoundStatement	 
>1017	IfStatement	if ( globaldata [ currentplayer ] )
>1018	CompoundStatement	 
>1019	ExpressionStatement	 
>1020	AssignmentExpr	globaldata [ currentplayer ] = NULL
>1021	Identifier	NULL
>1022	ArrayIndexing	globaldata [ currentplayer ]
>1023	Identifier	currentplayer
>1024	Identifier	globaldata
>1025	ExpressionStatement	 
>1026	ArrayIndexing	globaldata [ currentplayer ]
>1027	Identifier	currentplayer
>1028	Identifier	globaldata
>1029	Statement	 
>1030	Condition	 
>1031	ArrayIndexing	globaldata [ currentplayer ]
>1032	Identifier	currentplayer
>1033	Identifier	globaldata
>1034	CompoundStatement	 
>1035	ExpressionStatement	 
>1036	Statement	 
>1037	Statement	 
>1038	Statement	 
>1039	Statement	 
>1040	Statement	 
>1041	Statement	 
>1042	Statement	 
>1043	Statement	 
>1044	Statement	 
>1045	Statement	 
>1046	Statement	 
>1047	Statement	 
>1048	Statement	 
>1049	Statement	 
>1050	ExpressionStatement	 
>1051	CallExpression	W_Shutdown ( )
>1052	ArgumentList	 
>1053	Callee	W_Shutdown
>1054	Identifier	W_Shutdown
>1055	ExpressionStatement	 
>1056	CallExpression	I_ShutdownGraphics ( )
>1057	ArgumentList	 
>1058	Callee	I_ShutdownGraphics
>1059	Identifier	I_ShutdownGraphics
>1060	ExpressionStatement	 
>1061	CallExpression	I_ShutdownSound ( )
>1062	ArgumentList	 
>1063	Callee	I_ShutdownSound
>1064	Identifier	I_ShutdownSound
>1073	FunctionDef	DoomLib 
>1074	ParameterList	int id
>1075	Parameter	 
>1076	Identifier	id
>1077	ParameterType	int
>1078	ReturnType	void
>1079	CompoundStatement	 
>1080	IfStatement	if ( id < 0 || id >= MAX_PLAYERS )
>1081	ElseStatement	else
>1082	CompoundStatement	 
>1083	ExpressionStatement	 
>1084	AssignmentExpr	g = globaldata [ currentplayer ]
>1085	ArrayIndexing	globaldata [ currentplayer ]
>1086	Identifier	currentplayer
>1087	Identifier	globaldata
>1088	Identifier	g
>1089	IfStatement	if ( globalNetworking && session -> GetGameLobbyBase ( ) . GetMatchParms ( ) . matchFlags | MATCH_ONLINE )
>1090	CompoundStatement	 
>1091	ExpressionStatement	 
>1092	AssignmentExpr	currentplayer = 0
>1093	PrimaryExpression	0
>1094	Identifier	currentplayer
>1095	Condition	 
>1096	AndExpression	globalNetworking && session -> GetGameLobbyBase ( ) . GetMatchParms ( ) . matchFlags | MATCH_ONLINE
>1097	InclusiveOrExpression	session -> GetGameLobbyBase ( ) . GetMatchParms ( ) . matchFlags | MATCH_ONLINE
>1098	Identifier	MATCH_ONLINE
>1099	MemberAccess	session -> GetGameLobbyBase ( ) . GetMatchParms ( ) . matchFlags
>1100	Identifier	matchFlags
>1101	CallExpression	session -> GetGameLobbyBase ( ) . GetMatchParms ( )
>1102	ArgumentList	 
>1103	Callee	session -> GetGameLobbyBase ( ) . GetMatchParms
>1104	MemberAccess	session -> GetGameLobbyBase ( ) . GetMatchParms
>1105	Identifier	GetMatchParms
>1106	CallExpression	session -> GetGameLobbyBase ( )
>1107	ArgumentList	 
>1108	Callee	session -> GetGameLobbyBase
>1109	PtrMemberAccess	session -> GetGameLobbyBase
>1110	Identifier	GetGameLobbyBase
>1111	Identifier	session
>1112	Identifier	globalNetworking
>1113	CompoundStatement	 
>1114	ExpressionStatement	 
>1115	AssignmentExpr	g = NULL
>1116	Identifier	NULL
>1117	Identifier	g
>1118	Condition	 
>1119	OrExpression	id < 0 || id >= MAX_PLAYERS
>1120	RelationalExpression	id >= MAX_PLAYERS
>1121	Identifier	MAX_PLAYERS
>1122	Identifier	id
>1123	RelationalExpression	id < 0
>1124	PrimaryExpression	0
>1125	Identifier	id
>1126	ExpressionStatement	 
>1127	AssignmentExpr	currentplayer = id
>1128	Identifier	id
>1129	Identifier	currentplayer
>1148	FunctionDef	DoomLib 
>1149	ParameterList	RecvFunc rf , SendFunc sf , SendRemoteFunc sendRemote
>1150	Parameter	 
>1151	Identifier	sendRemote
>1152	ParameterType	SendRemoteFunc
>1153	Parameter	 
>1154	Identifier	sf
>1155	ParameterType	SendFunc
>1156	Parameter	 
>1157	Identifier	rf
>1158	ParameterType	RecvFunc
>1159	ReturnType	void
>1160	CompoundStatement	 
>1161	ExpressionStatement	 
>1162	AssignmentExpr	SendRemote = sendRemote
>1163	Identifier	sendRemote
>1164	Identifier	SendRemote
>1165	ExpressionStatement	 
>1166	AssignmentExpr	Send = sf
>1167	Identifier	sf
>1168	Identifier	Send
>1169	ExpressionStatement	 
>1170	AssignmentExpr	Recv = rf
>1171	Identifier	rf
>1172	Identifier	Recv
>1182	FunctionDef	DoomLib 
>1183	ParameterList	 
>1184	ReturnType	int
>1185	CompoundStatement	 
>1186	ReturnStatement	 
>1187	Identifier	currentplayer
>1192	FunctionDef	DoomLib 
>1193	ParameterList	int toNode
>1194	Parameter	 
>1195	Identifier	toNode
>1196	ParameterType	int
>1197	ReturnType	byte
>1198	CompoundStatement	 
>1199	ReturnStatement	 
>1200	Identifier	sourceDest
>1201	ExpressionStatement	 
>1202	AssignmentExpr	sourceDest |= RemoteNodeToPlayerIndex ( toNode )
>1203	CallExpression	RemoteNodeToPlayerIndex ( toNode )
>1204	ArgumentList	toNode
>1205	Argument	toNode
>1206	Identifier	toNode
>1207	Callee	RemoteNodeToPlayerIndex
>1208	Identifier	RemoteNodeToPlayerIndex
>1209	Identifier	sourceDest
>1210	ExpressionStatement	 
>1211	ShiftExpression	g -> consoleplayer << 2
>1212	PrimaryExpression	2
>1213	PtrMemberAccess	g -> consoleplayer
>1214	Identifier	consoleplayer
>1215	Identifier	g
>1216	Statement	 
>1217	Statement	 
>1218	Statement	 
>1219	IdentifierDeclStatement	 
>1220	IdentifierDecl	sourceDest = 0
>1221	AssignmentExpr	sourceDest = 0
>1222	PrimaryExpression	0
>1223	Identifier	sourceDest
>1224	Identifier	sourceDest
>1225	IdentifierDeclType	byte
>1233	FunctionDef	DoomLib 
>1234	ParameterList	byte sourceDest , int * source , int * dest
>1235	Parameter	 
>1236	Identifier	dest
>1237	ParameterType	int *
>1238	Parameter	 
>1239	Identifier	source
>1240	ParameterType	int *
>1241	Parameter	 
>1242	Identifier	sourceDest
>1243	ParameterType	byte
>1244	ReturnType	void
>1245	CompoundStatement	 
>1246	ExpressionStatement	 
>1247	AssignmentExpr	* dest = PlayerIndexToRemoteNode ( dst )
>1248	CallExpression	PlayerIndexToRemoteNode ( dst )
>1249	ArgumentList	dst
>1250	Argument	dst
>1251	Identifier	dst
>1252	Callee	PlayerIndexToRemoteNode
>1253	Identifier	PlayerIndexToRemoteNode
>1254	UnaryOp	* dest
>1255	Identifier	dest
>1256	UnaryOperator	*
>1257	ExpressionStatement	 
>1258	AssignmentExpr	* source = PlayerIndexToRemoteNode ( src )
>1259	CallExpression	PlayerIndexToRemoteNode ( src )
>1260	ArgumentList	src
>1261	Argument	src
>1262	Identifier	src
>1263	Callee	PlayerIndexToRemoteNode
>1264	Identifier	PlayerIndexToRemoteNode
>1265	UnaryOp	* source
>1266	Identifier	source
>1267	UnaryOperator	*
>1268	IdentifierDeclStatement	 
>1269	IdentifierDecl	dst = sourceDest & 3
>1270	AssignmentExpr	dst = sourceDest & 3
>1271	BitAndExpression	sourceDest & 3
>1272	PrimaryExpression	3
>1273	Identifier	sourceDest
>1274	Identifier	dst
>1275	Identifier	dst
>1276	IdentifierDeclType	int
>1277	IdentifierDeclStatement	 
>1278	IdentifierDecl	src = ( sourceDest & 12 ) >> 2
>1279	AssignmentExpr	src = ( sourceDest & 12 ) >> 2
>1280	ShiftExpression	( sourceDest & 12 ) >> 2
>1281	PrimaryExpression	2
>1282	BitAndExpression	sourceDest & 12
>1283	PrimaryExpression	12
>1284	Identifier	sourceDest
>1285	Identifier	src
>1286	Identifier	src
>1287	IdentifierDeclType	int
>1299	FunctionDef	DoomLib 
>1300	ParameterList	int node
>1301	Parameter	 
>1302	Identifier	node
>1303	ParameterType	int
>1304	ReturnType	int
>1305	CompoundStatement	 
>1306	ExpressionStatement	 
>1307	Statement	 
>1308	Statement	 
>1309	Statement	 
>1310	Statement	 
>1311	Statement	 
>1312	Statement	 
>1313	Statement	 
>1314	Statement	 
>1315	Statement	 
>1316	Statement	 
>1317	Statement	 
>1322	FunctionDef	DoomLib 
>1323	ParameterList	int index
>1324	Parameter	 
>1325	Identifier	index
>1326	ParameterType	int
>1327	ReturnType	int
>1328	CompoundStatement	 
>1329	ExpressionStatement	 
>1330	Statement	 
>1331	Statement	 
>1332	Statement	 
>1333	Statement	 
>1334	Statement	 
>1335	Statement	 
>1336	Statement	 
>1337	Statement	 
>1338	Statement	 
>1339	Statement	 
>1340	Statement	 
>1347	FunctionDef	DoomLib 
>1348	ParameterList	 
>1349	ReturnType	void
>1350	CompoundStatement	 
>1351	IfStatement	if ( ! useTech5Packets )
>1352	CompoundStatement	 
>1353	WhileStatement	while ( 1 )
>1354	CompoundStatement	 
>1355	ExpressionStatement	 
>1356	CallExpression	DoomLib 
>1357	ArgumentList	( char * ) & sw
>1358	Argument	dest
>1359	Identifier	dest
>1360	Argument	NULL
>1361	Identifier	NULL
>1362	Argument	receivedSize
>1363	Identifier	receivedSize
>1364	Argument	( char * ) & sw
>1365	CastExpression	( char * ) & sw
>1366	UnaryOp	& sw
>1367	Identifier	sw
>1368	UnaryOperator	&
>1369	CastTarget	char *
>1370	Callee	DoomLib 
>1371	Identifier	DoomLib 
>1372	ExpressionStatement	 
>1373	CallExpression	GetSourceDest ( sw . sourceDest , & source , & dest )
>1374	ArgumentList	sw . sourceDest
>1375	Argument	& dest
>1376	UnaryOp	& dest
>1377	Identifier	dest
>1378	UnaryOperator	&
>1379	Argument	& source
>1380	UnaryOp	& source
>1381	Identifier	source
>1382	UnaryOperator	&
>1383	Argument	sw . sourceDest
>1384	MemberAccess	sw . sourceDest
>1385	Identifier	sourceDest
>1386	Identifier	sw
>1387	Callee	GetSourceDest
>1388	Identifier	GetSourceDest
>1389	IdentifierDeclStatement	 
>1390	IdentifierDecl	dest
>1391	Identifier	dest
>1392	IdentifierDeclType	int
>1393	IdentifierDeclStatement	 
>1394	IdentifierDecl	source
>1395	Identifier	source
>1396	IdentifierDeclType	int
>1397	ExpressionStatement	 
>1398	CallExpression	printf ( \"RECEIVED PACKET!!\n\" )
>1399	ArgumentList	\"RECEIVED PACKET!!\n\"
>1400	Argument	\"RECEIVED PACKET!!\n\"
>1401	PrimaryExpression	\"RECEIVED PACKET!!\n\"
>1402	Callee	printf
>1403	Identifier	printf
>1404	IfStatement	if ( receivedSize < 0 )
>1405	CompoundStatement	 
>1406	ReturnStatement	 
>1407	IfStatement	if ( err != SYS_NET_EWOULDBLOCK )
>1408	CompoundStatement	 
>1409	ExpressionStatement	 
>1410	CallExpression	I_Error ( \"GetPacket
>1411	ArgumentList	\"GetPacket
>1412	Argument	err
>1413	Identifier	err
>1414	Argument	\"GetPacket
>1415	PrimaryExpression	\"GetPacket
>1416	Callee	I_Error
>1417	Identifier	I_Error
>1418	Condition	 
>1419	EqualityExpression	err != SYS_NET_EWOULDBLOCK
>1420	Identifier	SYS_NET_EWOULDBLOCK
>1421	Identifier	err
>1422	IdentifierDeclStatement	 
>1423	IdentifierDecl	err = sys_net_errno
>1424	AssignmentExpr	err = sys_net_errno
>1425	Identifier	sys_net_errno
>1426	Identifier	sys_net_errno
>1427	Identifier	err
>1428	IdentifierDeclType	int
>1429	Condition	 
>1430	RelationalExpression	receivedSize < 0
>1431	PrimaryExpression	0
>1432	Identifier	receivedSize
>1433	ExpressionStatement	 
>1434	Statement	 
>1435	Statement	 
>1436	Statement	 
>1437	Statement	 
>1438	Statement	 
>1439	Statement	 
>1440	Statement	 
>1441	Statement	 
>1442	Statement	 
>1443	Statement	 
>1444	Statement	 
>1445	Statement	 
>1446	Statement	 
>1447	Statement	 
>1448	Statement	 
>1449	Statement	 
>1450	Statement	 
>1451	Statement	 
>1452	Statement	 
>1453	Statement	 
>1454	Statement	 
>1455	Statement	 
>1456	Statement	 
>1457	Statement	 
>1458	Statement	 
>1459	Statement	 
>1460	Condition	 
>1461	PrimaryExpression	1
>1462	IdentifierDeclStatement	 
>1463	IdentifierDecl	sw
>1464	Identifier	sw
>1465	IdentifierDeclType	doomdata_t
>1466	IdentifierDeclStatement	 
>1467	IdentifierDecl	fromlen
>1468	Identifier	fromlen
>1469	IdentifierDeclType	socklen_t
>1470	IdentifierDeclStatement	 
>1471	IdentifierDecl	fromaddress
>1472	Identifier	fromaddress
>1473	IdentifierDeclType	struct sockaddr
>1474	IdentifierDeclStatement	 
>1475	IdentifierDecl	c
>1476	Identifier	c
>1477	IdentifierDeclType	int
>1478	IfStatement	if ( ! globalNetworking )
>1479	CompoundStatement	 
>1480	ReturnStatement	 
>1481	Condition	 
>1482	UnaryOp	! globalNetworking
>1483	Identifier	globalNetworking
>1484	UnaryOperator	!
>1485	Condition	 
>1486	UnaryOp	! useTech5Packets
>1487	Identifier	useTech5Packets
>1488	UnaryOperator	!
>1509	FunctionDef	DoomLib 
>1510	ParameterList	 
>1511	ReturnType	void
>1512	CompoundStatement	 
>1513	ExpressionStatement	 
>1514	CallExpression	DoomLib 
>1515	ArgumentList	 
>1516	Callee	DoomLib 
>1517	Identifier	DoomLib 
>1518	IfStatement	if ( ! globalNetworking )
>1519	CompoundStatement	 
>1520	ReturnStatement	 
>1521	Condition	 
>1522	UnaryOp	! globalNetworking
>1523	Identifier	globalNetworking
>1524	UnaryOperator	!
>1529	FunctionDef	DoomLib 
>1530	ParameterList	 
>1531	ReturnType	void
>1532	CompoundStatement	 
>1533	ExpressionStatement	 
>1534	CallExpression	I_ProcessSoundEvents ( )
>1535	ArgumentList	 
>1536	Callee	I_ProcessSoundEvents
>1537	Identifier	I_ProcessSoundEvents
<43=46,45,44
<46=47
<47=48
<48=52,49
<49=51,50
<60=66,65,61
<61=62
<62=64,63
<66=71,67
<67=68
<68=70,69
<71=72
<72=74,73
<82=88,87,83
<83=84
<84=86,85
<88=89
<89=90
<90=92,91
<102=108,107,103
<103=104
<104=106,105
<108=109
<109=110
<110=112,111
<118=121,120,119
<121=122
<122=123
<128=134,133,129
<129=130
<130=132,131
<134=135
<135=136
<136=138,137
<144=147,146,145
<147=148
<148=149
<188=191,190,189
<191=204,199,192
<192=193
<193=195,194
<195=196
<196=198,197
<199=200
<200=202,201
<202=203
<204=205
<205=209,206
<206=207
<207=208
<209=210
<215=221,220,216
<216=217
<217=219,218
<226=229,228,227
<229=241,232,230
<230=231
<232=233
<233=239,234
<234=235
<235=236
<236=238,237
<239=240
<241=259,256,242
<242=243
<243=247,244
<244=245
<245=246
<247=248
<248=250,249
<250=252,251
<252=253
<253=255,254
<256=257
<257=258
<259=260
<260=262,261
<262=264,263
<264=265
<265=267,266
<280=283,282,281
<283=341,331,295,291,284
<284=285
<285=289,286
<286=287
<287=288
<289=290
<291=292
<292=294,293
<295=323,314,311,296
<296=304,303,297
<297=298
<298=300,299
<300=302,301
<304=305
<305=309,306
<306=307
<307=308
<309=310
<311=313,312
<314=315
<315=322,316
<316=318,317
<318=319
<319=321,320
<323=324
<324=325
<325=330,329,326
<326=328,327
<331=332
<332=340,339,333
<333=338,334
<334=336,335
<336=337
<341=342
<342=344,343
<360=363,362,361
<363=364
<364=380,365
<365=373,366
<366=367
<367=369,368
<369=370
<370=372,371
<373=374
<374=378,375
<375=376
<376=377
<378=379
<380=381
<381=383,382
<383=384
<384=386,385
<386=388,387
<388=389
<389=391,390
<418=424,423,419
<419=420
<420=422,421
<424=469,468,467,465,464,463,462,461,460,459,458,457,456,455,453,438,432,425
<425=426
<426=428,427
<428=429
<429=431,430
<432=433
<433=437,434
<434=436,435
<438=439
<439=451,440
<440=447,445,441
<441=442
<442=444,443
<445=446
<447=448
<448=450,449
<451=452
<453=454
<465=466
<469=471,470
<471=472
<472=474,473
<485=491,490,486
<486=487
<487=489,488
<491=492
<492=493
<493=495,494
<503=506,505,504
<506=585,579,573,567,561,555,549,543,537,531,525,519,513,507
<507=508
<508=510,509
<510=512,511
<513=514
<514=516,515
<516=518,517
<519=520
<520=522,521
<522=524,523
<525=526
<526=528,527
<528=530,529
<531=532
<532=534,533
<534=536,535
<537=538
<538=540,539
<540=542,541
<543=544
<544=546,545
<546=548,547
<549=550
<550=552,551
<552=554,553
<555=556
<556=558,557
<558=560,559
<561=562
<562=564,563
<564=566,565
<567=568
<568=570,569
<570=572,571
<573=574
<574=576,575
<576=578,577
<579=580
<580=582,581
<582=584,583
<585=586
<586=596,587
<587=594,592,588
<588=589
<589=591,590
<592=593
<594=595
<596=597
<639=645,644,640
<640=641
<641=643,642
<645=646
<646=672,669,647
<647=648
<648=668,667,666,665,664,663,662,661,660,659,658,655,649
<649=650
<650=654,651
<651=653,652
<655=656
<656=657
<669=670
<670=671
<672=673
<673=675,674
<675=677,676
<687=696,695,688
<688=692,689
<689=691,690
<692=694,693
<696=720,714,713,707,702,697
<697=698
<698=700,699
<700=701
<702=703
<703=705,704
<705=706
<707=708
<708=710,709
<710=712,711
<714=715
<715=717,716
<717=719,718
<730=733,732,731
<733=734
<734=735
<735=737,736
<737=738
<745=751,750,746
<746=747
<747=749,748
<751=752
<752=753
<753=757,754
<754=755
<755=756
<757=758
<766=769,768,767
<769=770
<770=771
<771=773,772
<773=774
<778=787,786,779
<779=783,780
<780=782,781
<783=785,784
<787=818,812,788
<788=804,789
<789=797,790
<790=791
<791=795,792
<792=793
<793=794
<795=796
<797=798
<798=803,802,799
<799=801,800
<804=805
<805=809,806
<806=808,807
<809=811,810
<812=813
<813=815,814
<815=817,816
<831=834,833,832
<834=849,848,847,846,845,844,843,842,841,840,839,838,837,836,835
<853=856,855,854
<856=857
<857=858
<858=860,859
<867=873,872,868
<868=869
<869=871,870
<873=920,919,918,917,916,915,914,913,912,911,910,909,908,907,906,905,904,903,902,901,900,899,897,896,895,894,893,892,891,890,889,888,887,886,885,884,883,882,881,880,879,878,877,876,874
<874=875
<897=898
<920=921
<921=923,922
<923=925,924
<933=939,938,934
<934=935
<935=937,936
<939=946,940
<940=941
<941=943,942
<943=945,944
<954=960,959,955
<955=956
<956=958,957
<960=967,961
<961=962
<962=964,963
<964=966,965
<975=978,977,976
<978=989,988,987,986,985,984,983,979
<979=980
<980=982,981
<994=997,996,995
<997=1008,1007,1006,1005,1004,1003,1002,998
<998=999
<999=1001,1000
<1013=1016,1015,1014
<1016=1060,1055,1050,1049,1048,1047,1046,1045,1044,1043,1034,1017
<1017=1030,1018
<1018=1029,1025,1019
<1019=1020
<1020=1022,1021
<1022=1024,1023
<1025=1026
<1026=1028,1027
<1030=1031
<1031=1033,1032
<1034=1042,1041,1040,1039,1038,1037,1036,1035
<1050=1051
<1051=1053,1052
<1053=1054
<1055=1056
<1056=1058,1057
<1058=1059
<1060=1061
<1061=1063,1062
<1063=1064
<1073=1079,1078,1074
<1074=1075
<1075=1077,1076
<1079=1126,1080
<1080=1118,1113,1081
<1081=1082
<1082=1089,1083
<1083=1084
<1084=1088,1085
<1085=1087,1086
<1089=1095,1090
<1090=1091
<1091=1092
<1092=1094,1093
<1095=1096
<1096=1112,1097
<1097=1099,1098
<1099=1101,1100
<1101=1103,1102
<1103=1104
<1104=1106,1105
<1106=1108,1107
<1108=1109
<1109=1111,1110
<1113=1114
<1114=1115
<1115=1117,1116
<1118=1119
<1119=1123,1120
<1120=1122,1121
<1123=1125,1124
<1126=1127
<1127=1129,1128
<1148=1160,1159,1149
<1149=1156,1153,1150
<1150=1152,1151
<1153=1155,1154
<1156=1158,1157
<1160=1169,1165,1161
<1161=1162
<1162=1164,1163
<1165=1166
<1166=1168,1167
<1169=1170
<1170=1172,1171
<1182=1185,1184,1183
<1185=1186
<1186=1187
<1192=1198,1197,1193
<1193=1194
<1194=1196,1195
<1198=1219,1218,1217,1216,1210,1201,1199
<1199=1200
<1201=1202
<1202=1209,1203
<1203=1207,1204
<1204=1205
<1205=1206
<1207=1208
<1210=1211
<1211=1213,1212
<1213=1215,1214
<1219=1220
<1220=1225,1224,1221
<1221=1223,1222
<1233=1245,1244,1234
<1234=1241,1238,1235
<1235=1237,1236
<1238=1240,1239
<1241=1243,1242
<1245=1277,1268,1257,1246
<1246=1247
<1247=1254,1248
<1248=1252,1249
<1249=1250
<1250=1251
<1252=1253
<1254=1256,1255
<1257=1258
<1258=1265,1259
<1259=1263,1260
<1260=1261
<1261=1262
<1263=1264
<1265=1267,1266
<1268=1269
<1269=1276,1275,1270
<1270=1274,1271
<1271=1273,1272
<1277=1278
<1278=1287,1286,1279
<1279=1285,1280
<1280=1282,1281
<1282=1284,1283
<1299=1305,1304,1300
<1300=1301
<1301=1303,1302
<1305=1317,1316,1315,1314,1313,1312,1311,1310,1309,1308,1307,1306
<1322=1328,1327,1323
<1323=1324
<1324=1326,1325
<1328=1340,1339,1338,1337,1336,1335,1334,1333,1332,1331,1330,1329
<1347=1350,1349,1348
<1350=1351
<1351=1485,1352
<1352=1478,1474,1470,1466,1462,1353
<1353=1460,1354
<1354=1459,1458,1457,1456,1455,1454,1453,1452,1451,1450,1449,1448,1447,1446,1445,1444,1443,1442,1441,1440,1439,1438,1437,1436,1435,1434,1433,1404,1397,1393,1389,1372,1355
<1355=1356
<1356=1370,1357
<1357=1364,1362,1360,1358
<1358=1359
<1360=1361
<1362=1363
<1364=1365
<1365=1369,1366
<1366=1368,1367
<1370=1371
<1372=1373
<1373=1387,1374
<1374=1383,1379,1375
<1375=1376
<1376=1378,1377
<1379=1380
<1380=1382,1381
<1383=1384
<1384=1386,1385
<1387=1388
<1389=1390
<1390=1392,1391
<1393=1394
<1394=1396,1395
<1397=1398
<1398=1402,1399
<1399=1400
<1400=1401
<1402=1403
<1404=1429,1405
<1405=1422,1407,1406
<1407=1418,1408
<1408=1409
<1409=1410
<1410=1416,1411
<1411=1414,1412
<1412=1413
<1414=1415
<1416=1417
<1418=1419
<1419=1421,1420
<1422=1423
<1423=1428,1427,1424
<1424=1426,1425
<1429=1430
<1430=1432,1431
<1460=1461
<1462=1463
<1463=1465,1464
<1466=1467
<1467=1469,1468
<1470=1471
<1471=1473,1472
<1474=1475
<1475=1477,1476
<1478=1481,1479
<1479=1480
<1481=1482
<1482=1484,1483
<1485=1486
<1486=1488,1487
<1509=1512,1511,1510
<1512=1518,1513
<1513=1514
<1514=1516,1515
<1516=1517
<1518=1521,1519
<1519=1520
<1521=1522
<1522=1524,1523
<1529=1532,1531,1530
<1532=1533
<1533=1534
<1534=1536,1535
<1536=1537
