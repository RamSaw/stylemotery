>3	FunctionDef	callFunction (mxArray * plhs [ ] , const mxArray * prhs [ ])
>4	ParameterList	mxArray * plhs [ ] , const mxArray * prhs [ ]
>5	Parameter	 
>6	Identifier	prhs
>7	ParameterType	const mxArray * [ ]
>8	Parameter	 
>9	Identifier	plhs
>10	ParameterType	mxArray * [ ]
>11	ReturnType	inline void
>12	CompoundStatement	 
>13	ExpressionStatement	 
>14	RelationalExpression	deleteCopySparse < T > ( alpha_v2 , alpha_r2 , alpha_pB2 , alpha_pE2 , alpha_v , alpha_r )
>15	RelationalExpression	T > ( alpha_v2 , alpha_r2 , alpha_pB2 , alpha_pE2 , alpha_v , alpha_r )
>16	Expression	alpha_v2 , alpha_r2 , alpha_pB2 , alpha_pE2 , alpha_v , alpha_r
>17	Expression	alpha_r2 , alpha_pB2 , alpha_pE2 , alpha_v , alpha_r
>18	Expression	alpha_pB2 , alpha_pE2 , alpha_v , alpha_r
>19	Expression	alpha_pE2 , alpha_v , alpha_r
>20	Expression	alpha_v , alpha_r
>21	Identifier	alpha_r
>22	Identifier	alpha_v
>23	Identifier	alpha_pE2
>24	Identifier	alpha_pB2
>25	Identifier	alpha_r2
>26	Identifier	alpha_v2
>27	Identifier	T
>28	Identifier	deleteCopySparse
>29	ExpressionStatement	 
>30	CallExpression	alpha . AAt ( aat )
>31	ArgumentList	aat
>32	Argument	aat
>33	Identifier	aat
>34	Callee	alpha . AAt
>35	MemberAccess	alpha . AAt
>36	Identifier	AAt
>37	Identifier	alpha
>38	IdentifierDeclStatement	 
>39	IdentifierDecl	alpha ( alpha_v2 , alpha_r2 , alpha_pB2 , alpha_pE2 , K , M , alpha_pB2 [ M ] )
>40	Expression	alpha_v2 , alpha_r2 , alpha_pB2 , alpha_pE2 , K , M , alpha_pB2 [ M ]
>41	Expression	alpha_r2 , alpha_pB2 , alpha_pE2 , K , M , alpha_pB2 [ M ]
>42	Expression	alpha_pB2 , alpha_pE2 , K , M , alpha_pB2 [ M ]
>43	Expression	alpha_pE2 , K , M , alpha_pB2 [ M ]
>44	Expression	K , M , alpha_pB2 [ M ]
>45	Expression	M , alpha_pB2 [ M ]
>46	ArrayIndexing	alpha_pB2 [ M ]
>47	Identifier	M
>48	Identifier	alpha_pB2
>49	Identifier	M
>50	Identifier	K
>51	Identifier	alpha_pE2
>52	Identifier	alpha_pB2
>53	Identifier	alpha_r2
>54	Identifier	alpha_v2
>55	Identifier	alpha
>56	IdentifierDeclType	SpMatrix < T >
>57	IdentifierDeclStatement	 
>58	IdentifierDecl	aat ( prAAt , K , K )
>59	Expression	prAAt , K , K
>60	Expression	K , K
>61	Identifier	K
>62	Identifier	K
>63	Identifier	prAAt
>64	Identifier	aat
>65	IdentifierDeclType	Matrix < T >
>66	ExpressionStatement	 
>67	CallExpression	mxGetPr ( plhs [ 0 ] )
>68	ArgumentList	plhs [ 0 ]
>69	Argument	plhs [ 0 ]
>70	ArrayIndexing	plhs [ 0 ]
>71	PrimaryExpression	0
>72	Identifier	plhs
>73	Callee	mxGetPr
>74	Identifier	mxGetPr
>75	Statement	 
>76	Statement	 
>77	Statement	 
>78	Statement	 
>79	Statement	 
>80	Statement	 
>81	Statement	 
>82	Statement	 
>83	Statement	 
>84	ExpressionStatement	 
>85	AssignmentExpr	plhs [ 0 ] = createMatrix < T > ( K , K )
>86	RelationalExpression	createMatrix < T > ( K , K )
>87	RelationalExpression	T > ( K , K )
>88	Expression	K , K
>89	Identifier	K
>90	Identifier	K
>91	Identifier	T
>92	Identifier	createMatrix
>93	ArrayIndexing	plhs [ 0 ]
>94	PrimaryExpression	0
>95	Identifier	plhs
>96	ExpressionStatement	 
>97	RelationalExpression	createCopySparse < T > ( alpha_v2 , alpha_r2 , alpha_pB2 , alpha_pE2 , alpha_v , alpha_r , alpha_pB , \
>98	RelationalExpression	T > ( alpha_v2 , alpha_r2 , alpha_pB2 , alpha_pE2 , alpha_v , alpha_r , alpha_pB , alpha_pE , M )
>99	Expression	alpha_v2 , alpha_r2 , alpha_pB2 , alpha_pE2 , alpha_v , alpha_r , alpha_pB , alpha_pE , M
>100	Expression	alpha_r2 , alpha_pB2 , alpha_pE2 , alpha_v , alpha_r , alpha_pB , alpha_pE , M
>101	Expression	alpha_pB2 , alpha_pE2 , alpha_v , alpha_r , alpha_pB , alpha_pE , M
>102	Expression	alpha_pE2 , alpha_v , alpha_r , alpha_pB , alpha_pE , M
>103	Expression	alpha_v , alpha_r , alpha_pB , alpha_pE , M
>104	Expression	alpha_r , alpha_pB , alpha_pE , M
>105	Expression	alpha_pB , alpha_pE , M
>106	Expression	alpha_pE , M
>107	Identifier	M
>108	Identifier	alpha_pE
>109	Identifier	alpha_pB
>110	Identifier	alpha_r
>111	Identifier	alpha_v
>112	Identifier	alpha_pE2
>113	Identifier	alpha_pB2
>114	Identifier	alpha_r2
>115	Identifier	alpha_v2
>116	Identifier	T
>117	Identifier	createCopySparse
>118	IdentifierDeclStatement	 
>119	IdentifierDecl	* alpha_v2
>120	Identifier	alpha_v2
>121	IdentifierDeclType	T *
>122	IdentifierDeclStatement	 
>123	IdentifierDecl	* alpha_pE2
>124	Identifier	alpha_pE2
>125	IdentifierDeclType	long *
>126	IdentifierDecl	* alpha_pB2
>127	Identifier	alpha_pB2
>128	IdentifierDeclType	long *
>129	IdentifierDecl	* alpha_r2
>130	Identifier	alpha_r2
>131	IdentifierDeclType	long *
>132	IdentifierDeclStatement	 
>133	IdentifierDecl	* alpha_pE = alpha_pB + 1
>134	AssignmentExpr	* alpha_pE = alpha_pB + 1
>135	AdditiveExpression	alpha_pB + 1
>136	PrimaryExpression	1
>137	Identifier	alpha_pB
>138	Identifier	alpha_pE
>139	Identifier	alpha_pE
>140	IdentifierDeclType	mwSize *
>141	IdentifierDeclStatement	 
>142	IdentifierDecl	* alpha_pB = mxGetJc ( prhs [ 0 ] )
>143	AssignmentExpr	* alpha_pB = mxGetJc ( prhs [ 0 ] )
>144	CallExpression	mxGetJc ( prhs [ 0 ] )
>145	ArgumentList	prhs [ 0 ]
>146	Argument	prhs [ 0 ]
>147	ArrayIndexing	prhs [ 0 ]
>148	PrimaryExpression	0
>149	Identifier	prhs
>150	Callee	mxGetJc
>151	Identifier	mxGetJc
>152	Identifier	alpha_pB
>153	Identifier	alpha_pB
>154	IdentifierDeclType	mwSize *
>155	IdentifierDeclStatement	 
>156	IdentifierDecl	* alpha_r = mxGetIr ( prhs [ 0 ] )
>157	AssignmentExpr	* alpha_r = mxGetIr ( prhs [ 0 ] )
>158	CallExpression	mxGetIr ( prhs [ 0 ] )
>159	ArgumentList	prhs [ 0 ]
>160	Argument	prhs [ 0 ]
>161	ArrayIndexing	prhs [ 0 ]
>162	PrimaryExpression	0
>163	Identifier	prhs
>164	Callee	mxGetIr
>165	Identifier	mxGetIr
>166	Identifier	alpha_r
>167	Identifier	alpha_r
>168	IdentifierDeclType	mwSize *
>169	ExpressionStatement	 
>170	ArrayIndexing	dims [ 1 ]
>171	PrimaryExpression	1
>172	Identifier	dims
>173	Statement	 
>174	Statement	 
>175	Statement	 
>176	Statement	 
>177	Statement	 
>178	Statement	 
>179	Statement	 
>180	ExpressionStatement	 
>181	ArrayIndexing	dims [ 0 ]
>182	PrimaryExpression	0
>183	Identifier	dims
>184	Statement	 
>185	Statement	 
>186	Statement	 
>187	Statement	 
>188	Statement	 
>189	Statement	 
>190	Statement	 
>191	IdentifierDeclStatement	 
>192	IdentifierDecl	* dims = mxGetDimensions ( prhs [ 0 ] )
>193	AssignmentExpr	* dims = mxGetDimensions ( prhs [ 0 ] )
>194	CallExpression	mxGetDimensions ( prhs [ 0 ] )
>195	ArgumentList	prhs [ 0 ]
>196	Argument	prhs [ 0 ]
>197	ArrayIndexing	prhs [ 0 ]
>198	PrimaryExpression	0
>199	Identifier	prhs
>200	Callee	mxGetDimensions
>201	Identifier	mxGetDimensions
>202	Identifier	dims
>203	Identifier	dims
>204	IdentifierDeclType	const mwSize *
>205	ExpressionStatement	 
>206	CallExpression	mxGetPr ( prhs [ 0 ] )
>207	ArgumentList	prhs [ 0 ]
>208	Argument	prhs [ 0 ]
>209	ArrayIndexing	prhs [ 0 ]
>210	PrimaryExpression	0
>211	Identifier	prhs
>212	Callee	mxGetPr
>213	Identifier	mxGetPr
>214	Statement	 
>215	Statement	 
>216	Statement	 
>217	Statement	 
>218	Statement	 
>219	Statement	 
>220	Statement	 
>221	Statement	 
>222	Statement	 
>223	IfStatement	if ( ! mxIsSparse ( prhs [ 0 ] ) )
>224	ExpressionStatement	 
>225	CallExpression	mexErrMsgTxt ( \"argument 1 should be sparse\" )
>226	ArgumentList	\"argument 1 should be sparse\"
>227	Argument	\"argument 1 should be sparse\"
>228	PrimaryExpression	\"argument 1 should be sparse\"
>229	Callee	mexErrMsgTxt
>230	Identifier	mexErrMsgTxt
>231	Condition	 
>232	UnaryOp	! mxIsSparse ( prhs [ 0 ] )
>233	CallExpression	mxIsSparse ( prhs [ 0 ] )
>234	ArgumentList	prhs [ 0 ]
>235	Argument	prhs [ 0 ]
>236	ArrayIndexing	prhs [ 0 ]
>237	PrimaryExpression	0
>238	Identifier	prhs
>239	Callee	mxIsSparse
>240	Identifier	mxIsSparse
>241	UnaryOperator	!
>242	IfStatement	if ( ! mexCheckType < T > ( prhs [ 0 ] ) )
>243	ExpressionStatement	 
>244	CallExpression	mexErrMsgTxt ( \"type of argument 1 is not consistent\" )
>245	ArgumentList	\"type of argument 1 is not consistent\"
>246	Argument	\"type of argument 1 is not consistent\"
>247	PrimaryExpression	\"type of argument 1 is not consistent\"
>248	Callee	mexErrMsgTxt
>249	Identifier	mexErrMsgTxt
>250	Condition	 
>251	RelationalExpression	! mexCheckType < T > ( prhs [ 0 ] )
>252	RelationalExpression	T > ( prhs [ 0 ] )
>253	ArrayIndexing	prhs [ 0 ]
>254	PrimaryExpression	0
>255	Identifier	prhs
>256	Identifier	T
>257	UnaryOp	! mexCheckType
>258	Identifier	mexCheckType
>259	UnaryOperator	!
>286	FunctionDef	mexFunction (int nlhs , mxArray * plhs [ ] , int nrhs , const mxArray * prhs [ ])
>287	ParameterList	int nlhs , mxArray * plhs [ ] , int nrhs , const mxArray * prhs [ ]
>288	Parameter	 
>289	Identifier	prhs
>290	ParameterType	const mxArray * [ ]
>291	Parameter	 
>292	Identifier	nrhs
>293	ParameterType	int
>294	Parameter	 
>295	Identifier	plhs
>296	ParameterType	mxArray * [ ]
>297	Parameter	 
>298	Identifier	nlhs
>299	ParameterType	int
>300	ReturnType	void
>301	CompoundStatement	 
>302	IfStatement	if ( mxGetClassID ( prhs [ 0 ] ) == mxDOUBLE_CLASS )
>303	ElseStatement	else
>304	CompoundStatement	 
>305	ExpressionStatement	 
>306	RelationalExpression	callFunction < float > ( plhs , prhs )
>307	RelationalExpression	float > ( plhs , prhs )
>308	Expression	plhs , prhs
>309	Identifier	prhs
>310	Identifier	plhs
>311	Identifier	float
>312	Identifier	callFunction
>313	CompoundStatement	 
>314	ExpressionStatement	 
>315	RelationalExpression	callFunction < double > ( plhs , prhs )
>316	RelationalExpression	double > ( plhs , prhs )
>317	Expression	plhs , prhs
>318	Identifier	prhs
>319	Identifier	plhs
>320	Identifier	double
>321	Identifier	callFunction
>322	Condition	 
>323	EqualityExpression	mxGetClassID ( prhs [ 0 ] ) == mxDOUBLE_CLASS
>324	Identifier	mxDOUBLE_CLASS
>325	CallExpression	mxGetClassID ( prhs [ 0 ] )
>326	ArgumentList	prhs [ 0 ]
>327	Argument	prhs [ 0 ]
>328	ArrayIndexing	prhs [ 0 ]
>329	PrimaryExpression	0
>330	Identifier	prhs
>331	Callee	mxGetClassID
>332	Identifier	mxGetClassID
>333	IfStatement	if ( nlhs != 1 )
>334	ExpressionStatement	 
>335	CallExpression	mexErrMsgTxt ( \"Bad number of output arguments\" )
>336	ArgumentList	\"Bad number of output arguments\"
>337	Argument	\"Bad number of output arguments\"
>338	PrimaryExpression	\"Bad number of output arguments\"
>339	Callee	mexErrMsgTxt
>340	Identifier	mexErrMsgTxt
>341	Condition	 
>342	EqualityExpression	nlhs != 1
>343	PrimaryExpression	1
>344	Identifier	nlhs
>345	IfStatement	if ( nrhs != 1 )
>346	ExpressionStatement	 
>347	CallExpression	mexErrMsgTxt ( \"Bad number of inputs arguments\" )
>348	ArgumentList	\"Bad number of inputs arguments\"
>349	Argument	\"Bad number of inputs arguments\"
>350	PrimaryExpression	\"Bad number of inputs arguments\"
>351	Callee	mexErrMsgTxt
>352	Identifier	mexErrMsgTxt
>353	Condition	 
>354	EqualityExpression	nrhs != 1
>355	PrimaryExpression	1
>356	Identifier	nrhs
<3=12,11,4
<4=8,5
<5=7,6
<8=10,9
<12=13,29,38,57,66,75,76,77,78,79,80,81,82,83,84,96,118,122,132,141,155,169,173,174,175,176,177,178,179,180,184,185,186,187,188,189,190,191,205,214,215,216,217,218,219,220,221,222,223,242
<13=14
<14=28,15
<15=27,16
<16=26,17
<17=25,18
<18=24,19
<19=23,20
<20=22,21
<29=30
<30=34,31
<31=32
<32=33
<34=35
<35=37,36
<38=39
<39=56,55,40
<40=54,41
<41=53,42
<42=52,43
<43=51,44
<44=50,45
<45=49,46
<46=48,47
<57=58
<58=65,64,59
<59=63,60
<60=62,61
<66=67
<67=73,68
<68=69
<69=70
<70=72,71
<73=74
<84=85
<85=93,86
<86=92,87
<87=91,88
<88=90,89
<93=95,94
<96=97
<97=117,98
<98=116,99
<99=115,100
<100=114,101
<101=113,102
<102=112,103
<103=111,104
<104=110,105
<105=109,106
<106=108,107
<118=119
<119=121,120
<122=129,126,123
<123=125,124
<126=128,127
<129=131,130
<132=133
<133=140,139,134
<134=138,135
<135=137,136
<141=142
<142=154,153,143
<143=152,144
<144=150,145
<145=146
<146=147
<147=149,148
<150=151
<155=156
<156=168,167,157
<157=166,158
<158=164,159
<159=160
<160=161
<161=163,162
<164=165
<169=170
<170=172,171
<180=181
<181=183,182
<191=192
<192=204,203,193
<193=202,194
<194=200,195
<195=196
<196=197
<197=199,198
<200=201
<205=206
<206=212,207
<207=208
<208=209
<209=211,210
<212=213
<223=231,224
<224=225
<225=229,226
<226=227
<227=228
<229=230
<231=232
<232=241,233
<233=239,234
<234=235
<235=236
<236=238,237
<239=240
<242=250,243
<243=244
<244=248,245
<245=246
<246=247
<248=249
<250=251
<251=257,252
<252=256,253
<253=255,254
<257=259,258
<286=301,300,287
<287=297,294,291,288
<288=290,289
<291=293,292
<294=296,295
<297=299,298
<301=345,333,302
<302=322,313,303
<303=304
<304=305
<305=306
<306=312,307
<307=311,308
<308=310,309
<313=314
<314=315
<315=321,316
<316=320,317
<317=319,318
<322=323
<323=325,324
<325=331,326
<326=327
<327=328
<328=330,329
<331=332
<333=341,334
<334=335
<335=339,336
<336=337
<337=338
<339=340
<341=342
<342=344,343
<345=353,346
<346=347
<347=351,348
<348=349
<349=350
<351=352
<353=354
<354=356,355
