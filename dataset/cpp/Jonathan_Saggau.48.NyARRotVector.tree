>3	FunctionDef	NyARRotVector 
>4	ParameterList	const NyARPerspectiveProjectionMatrix * i_cmat
>5	Parameter	 
>6	Identifier	i_cmat
>7	ParameterType	const NyARPerspectiveProjectionMatrix *
>8	CompoundStatement	 
>9	ReturnStatement	 
>10	ExpressionStatement	 
>11	AssignmentExpr	this -> _projection_mat_ref = i_cmat
>12	Identifier	i_cmat
>13	PtrMemberAccess	this -> _projection_mat_ref
>14	Identifier	_projection_mat_ref
>15	Identifier	this
>16	ExpressionStatement	 
>17	CallExpression	this -> _mat_a -> matrixSelfInv ( )
>18	ArgumentList	 
>19	Callee	this -> _mat_a -> matrixSelfInv
>20	PtrMemberAccess	this -> _mat_a -> matrixSelfInv
>21	Identifier	matrixSelfInv
>22	PtrMemberAccess	this -> _mat_a
>23	Identifier	_mat_a
>24	Identifier	this
>25	ExpressionStatement	 
>26	AssignmentExpr	a_array [ 2 * 3 + 2 ] = i_cmat -> m22
>27	PtrMemberAccess	i_cmat -> m22
>28	Identifier	m22
>29	Identifier	i_cmat
>30	ArrayIndexing	a_array [ 2 * 3 + 2 ]
>31	AdditiveExpression	2 * 3 + 2
>32	PrimaryExpression	2
>33	MultiplicativeExpression	2 * 3
>34	PrimaryExpression	3
>35	PrimaryExpression	2
>36	Identifier	a_array
>37	ExpressionStatement	 
>38	AssignmentExpr	a_array [ 2 * 3 + 1 ] = i_cmat -> m21
>39	PtrMemberAccess	i_cmat -> m21
>40	Identifier	m21
>41	Identifier	i_cmat
>42	ArrayIndexing	a_array [ 2 * 3 + 1 ]
>43	AdditiveExpression	2 * 3 + 1
>44	PrimaryExpression	1
>45	MultiplicativeExpression	2 * 3
>46	PrimaryExpression	3
>47	PrimaryExpression	2
>48	Identifier	a_array
>49	ExpressionStatement	 
>50	AssignmentExpr	a_array [ 2 * 3 + 0 ] = i_cmat -> m20
>51	PtrMemberAccess	i_cmat -> m20
>52	Identifier	m20
>53	Identifier	i_cmat
>54	ArrayIndexing	a_array [ 2 * 3 + 0 ]
>55	AdditiveExpression	2 * 3 + 0
>56	PrimaryExpression	0
>57	MultiplicativeExpression	2 * 3
>58	PrimaryExpression	3
>59	PrimaryExpression	2
>60	Identifier	a_array
>61	ExpressionStatement	 
>62	AssignmentExpr	a_array [ 1 * 3 + 2 ] = i_cmat -> m12
>63	PtrMemberAccess	i_cmat -> m12
>64	Identifier	m12
>65	Identifier	i_cmat
>66	ArrayIndexing	a_array [ 1 * 3 + 2 ]
>67	AdditiveExpression	1 * 3 + 2
>68	PrimaryExpression	2
>69	MultiplicativeExpression	1 * 3
>70	PrimaryExpression	3
>71	PrimaryExpression	1
>72	Identifier	a_array
>73	ExpressionStatement	 
>74	AssignmentExpr	a_array [ 1 * 3 + 1 ] = i_cmat -> m11
>75	PtrMemberAccess	i_cmat -> m11
>76	Identifier	m11
>77	Identifier	i_cmat
>78	ArrayIndexing	a_array [ 1 * 3 + 1 ]
>79	AdditiveExpression	1 * 3 + 1
>80	PrimaryExpression	1
>81	MultiplicativeExpression	1 * 3
>82	PrimaryExpression	3
>83	PrimaryExpression	1
>84	Identifier	a_array
>85	ExpressionStatement	 
>86	AssignmentExpr	a_array [ 1 * 3 + 0 ] = i_cmat -> m10
>87	PtrMemberAccess	i_cmat -> m10
>88	Identifier	m10
>89	Identifier	i_cmat
>90	ArrayIndexing	a_array [ 1 * 3 + 0 ]
>91	AdditiveExpression	1 * 3 + 0
>92	PrimaryExpression	0
>93	MultiplicativeExpression	1 * 3
>94	PrimaryExpression	3
>95	PrimaryExpression	1
>96	Identifier	a_array
>97	ExpressionStatement	 
>98	AssignmentExpr	a_array [ 0 * 3 + 2 ] = i_cmat -> m02
>99	PtrMemberAccess	i_cmat -> m02
>100	Identifier	m02
>101	Identifier	i_cmat
>102	ArrayIndexing	a_array [ 0 * 3 + 2 ]
>103	AdditiveExpression	0 * 3 + 2
>104	PrimaryExpression	2
>105	MultiplicativeExpression	0 * 3
>106	PrimaryExpression	3
>107	PrimaryExpression	0
>108	Identifier	a_array
>109	ExpressionStatement	 
>110	AssignmentExpr	a_array [ 0 * 3 + 1 ] = i_cmat -> m01
>111	PtrMemberAccess	i_cmat -> m01
>112	Identifier	m01
>113	Identifier	i_cmat
>114	ArrayIndexing	a_array [ 0 * 3 + 1 ]
>115	AdditiveExpression	0 * 3 + 1
>116	PrimaryExpression	1
>117	MultiplicativeExpression	0 * 3
>118	PrimaryExpression	3
>119	PrimaryExpression	0
>120	Identifier	a_array
>121	ExpressionStatement	 
>122	AssignmentExpr	a_array [ 0 * 3 + 0 ] = i_cmat -> m00
>123	PtrMemberAccess	i_cmat -> m00
>124	Identifier	m00
>125	Identifier	i_cmat
>126	ArrayIndexing	a_array [ 0 * 3 + 0 ]
>127	AdditiveExpression	0 * 3 + 0
>128	PrimaryExpression	0
>129	MultiplicativeExpression	0 * 3
>130	PrimaryExpression	3
>131	PrimaryExpression	0
>132	Identifier	a_array
>133	IdentifierDeclStatement	 
>134	IdentifierDecl	* a_array = this -> _mat_a -> getArray ( )
>135	AssignmentExpr	* a_array = this -> _mat_a -> getArray ( )
>136	CallExpression	this -> _mat_a -> getArray ( )
>137	ArgumentList	 
>138	Callee	this -> _mat_a -> getArray
>139	PtrMemberAccess	this -> _mat_a -> getArray
>140	Identifier	getArray
>141	PtrMemberAccess	this -> _mat_a
>142	Identifier	_mat_a
>143	Identifier	this
>144	Identifier	a_array
>145	Identifier	a_array
>146	IdentifierDeclType	double *
>147	ExpressionStatement	 
>148	AssignmentExpr	this -> _mat_a = new NyARMat ( 3 , 3 )
>149	Expression	3 , 3
>150	PrimaryExpression	3
>151	PrimaryExpression	3
>152	PtrMemberAccess	this -> _mat_a
>153	Identifier	_mat_a
>154	Identifier	this
>178	FunctionDef	NyARRotVector 
>179	ParameterList	 
>180	CompoundStatement	 
>181	ReturnStatement	 
>182	ExpressionStatement	 
>183	CallExpression	NyAR_SAFE_DELETE ( this -> _mat_a )
>184	ArgumentList	this -> _mat_a
>185	Argument	this -> _mat_a
>186	PtrMemberAccess	this -> _mat_a
>187	Identifier	_mat_a
>188	Identifier	this
>189	Callee	NyAR_SAFE_DELETE
>190	Identifier	NyAR_SAFE_DELETE
>197	FunctionDef	NyARRotVector 
>198	ParameterList	const TNyARLinear & i_linear1 , const TNyARLinear & i_linear2
>199	Parameter	 
>200	Identifier	i_linear2
>201	ParameterType	const TNyARLinear &
>202	Parameter	 
>203	Identifier	i_linear1
>204	ParameterType	const TNyARLinear &
>205	ReturnType	void
>206	CompoundStatement	 
>207	ReturnStatement	 
>208	ExpressionStatement	 
>209	AssignmentExpr	this -> v3 = m2 / w
>210	MultiplicativeExpression	m2 / w
>211	Identifier	w
>212	Identifier	m2
>213	PtrMemberAccess	this -> v3
>214	Identifier	v3
>215	Identifier	this
>216	ExpressionStatement	 
>217	AssignmentExpr	this -> v2 = m1 / w
>218	MultiplicativeExpression	m1 / w
>219	Identifier	w
>220	Identifier	m1
>221	PtrMemberAccess	this -> v2
>222	Identifier	v2
>223	Identifier	this
>224	ExpressionStatement	 
>225	AssignmentExpr	this -> v1 = m0 / w
>226	MultiplicativeExpression	m0 / w
>227	Identifier	w
>228	Identifier	m0
>229	PtrMemberAccess	this -> v1
>230	Identifier	v1
>231	Identifier	this
>232	IdentifierDeclStatement	 
>233	IdentifierDecl	w = sqrt ( m0 * m0 + m1 * m1 + m2 * m2 )
>234	AssignmentExpr	w = sqrt ( m0 * m0 + m1 * m1 + m2 * m2 )
>235	CallExpression	sqrt ( m0 * m0 + m1 * m1 + m2 * m2 )
>236	ArgumentList	m0 * m0 + m1 * m1 + m2 * m2
>237	Argument	m0 * m0 + m1 * m1 + m2 * m2
>238	AdditiveExpression	m0 * m0 + m1 * m1 + m2 * m2
>239	AdditiveExpression	m1 * m1 + m2 * m2
>240	MultiplicativeExpression	m2 * m2
>241	Identifier	m2
>242	Identifier	m2
>243	MultiplicativeExpression	m1 * m1
>244	Identifier	m1
>245	Identifier	m1
>246	MultiplicativeExpression	m0 * m0
>247	Identifier	m0
>248	Identifier	m0
>249	Callee	sqrt
>250	Identifier	sqrt
>251	Identifier	w
>252	Identifier	w
>253	IdentifierDeclType	const double
>254	IdentifierDeclStatement	 
>255	IdentifierDecl	m2 = w1 * cmat . m00 * cmat . m11
>256	AssignmentExpr	m2 = w1 * cmat . m00 * cmat . m11
>257	MultiplicativeExpression	w1 * cmat . m00 * cmat . m11
>258	MultiplicativeExpression	cmat . m00 * cmat . m11
>259	MemberAccess	cmat . m11
>260	Identifier	m11
>261	Identifier	cmat
>262	MemberAccess	cmat . m00
>263	Identifier	m00
>264	Identifier	cmat
>265	Identifier	w1
>266	Identifier	m2
>267	Identifier	m2
>268	IdentifierDeclType	const double
>269	IdentifierDeclStatement	 
>270	IdentifierDecl	m1 = - w1 * cmat . m00 * cmat . m12 + w3 * cmat . m00
>271	AssignmentExpr	m1 = - w1 * cmat . m00 * cmat . m12 + w3 * cmat . m00
>272	AdditiveExpression	- w1 * cmat . m00 * cmat . m12 + w3 * cmat . m00
>273	MultiplicativeExpression	w3 * cmat . m00
>274	MemberAccess	cmat . m00
>275	Identifier	m00
>276	Identifier	cmat
>277	Identifier	w3
>278	MultiplicativeExpression	- w1 * cmat . m00 * cmat . m12
>279	MultiplicativeExpression	cmat . m00 * cmat . m12
>280	MemberAccess	cmat . m12
>281	Identifier	m12
>282	Identifier	cmat
>283	MemberAccess	cmat . m00
>284	Identifier	m00
>285	Identifier	cmat
>286	UnaryOp	- w1
>287	Identifier	w1
>288	UnaryOperator	-
>289	Identifier	m1
>290	Identifier	m1
>291	IdentifierDeclType	const double
>292	IdentifierDeclStatement	 
>293	IdentifierDecl	m0 = w1 * ( cmat . m01 * cmat . m12 - cmat . m02 * cmat . m11 ) + w2 * cmat . m11 - w3 * cmat . m01
>294	AssignmentExpr	m0 = w1 * ( cmat . m01 * cmat . m12 - cmat . m02 * cmat . m11 ) + w2 * cmat . m11 - w3 * cmat . m01
>295	AdditiveExpression	w1 * ( cmat . m01 * cmat . m12 - cmat . m02 * cmat . m11 ) + w2 * cmat . m11 - w3 * cmat . m01
>296	AdditiveExpression	w2 * cmat . m11 - w3 * cmat . m01
>297	MultiplicativeExpression	w3 * cmat . m01
>298	MemberAccess	cmat . m01
>299	Identifier	m01
>300	Identifier	cmat
>301	Identifier	w3
>302	MultiplicativeExpression	w2 * cmat . m11
>303	MemberAccess	cmat . m11
>304	Identifier	m11
>305	Identifier	cmat
>306	Identifier	w2
>307	MultiplicativeExpression	w1 * ( cmat . m01 * cmat . m12 - cmat . m02 * cmat . m11 )
>308	AdditiveExpression	cmat . m01 * cmat . m12 - cmat . m02 * cmat . m11
>309	MultiplicativeExpression	cmat . m02 * cmat . m11
>310	MemberAccess	cmat . m11
>311	Identifier	m11
>312	Identifier	cmat
>313	MemberAccess	cmat . m02
>314	Identifier	m02
>315	Identifier	cmat
>316	MultiplicativeExpression	cmat . m01 * cmat . m12
>317	MemberAccess	cmat . m12
>318	Identifier	m12
>319	Identifier	cmat
>320	MemberAccess	cmat . m01
>321	Identifier	m01
>322	Identifier	cmat
>323	Identifier	w1
>324	Identifier	m0
>325	Identifier	m0
>326	IdentifierDeclType	const double
>327	IdentifierDeclStatement	 
>328	IdentifierDecl	w3 = i_linear1 . intercept * i_linear2 . run - i_linear2 . intercept * i_linear1 . run
>329	AssignmentExpr	w3 = i_linear1 . intercept * i_linear2 . run - i_linear2 . intercept * i_linear1 . run
>330	AdditiveExpression	i_linear1 . intercept * i_linear2 . run - i_linear2 . intercept * i_linear1 . run
>331	MultiplicativeExpression	i_linear2 . intercept * i_linear1 . run
>332	MemberAccess	i_linear1 . run
>333	Identifier	run
>334	Identifier	i_linear1
>335	MemberAccess	i_linear2 . intercept
>336	Identifier	intercept
>337	Identifier	i_linear2
>338	MultiplicativeExpression	i_linear1 . intercept * i_linear2 . run
>339	MemberAccess	i_linear2 . run
>340	Identifier	run
>341	Identifier	i_linear2
>342	MemberAccess	i_linear1 . intercept
>343	Identifier	intercept
>344	Identifier	i_linear1
>345	Identifier	w3
>346	Identifier	w3
>347	IdentifierDeclType	const double
>348	IdentifierDeclStatement	 
>349	IdentifierDecl	w2 = i_linear1 . rise * i_linear2 . intercept - i_linear2 . rise * i_linear1 . intercept
>350	AssignmentExpr	w2 = i_linear1 . rise * i_linear2 . intercept - i_linear2 . rise * i_linear1 . intercept
>351	AdditiveExpression	i_linear1 . rise * i_linear2 . intercept - i_linear2 . rise * i_linear1 . intercept
>352	MultiplicativeExpression	i_linear2 . rise * i_linear1 . intercept
>353	MemberAccess	i_linear1 . intercept
>354	Identifier	intercept
>355	Identifier	i_linear1
>356	MemberAccess	i_linear2 . rise
>357	Identifier	rise
>358	Identifier	i_linear2
>359	MultiplicativeExpression	i_linear1 . rise * i_linear2 . intercept
>360	MemberAccess	i_linear2 . intercept
>361	Identifier	intercept
>362	Identifier	i_linear2
>363	MemberAccess	i_linear1 . rise
>364	Identifier	rise
>365	Identifier	i_linear1
>366	Identifier	w2
>367	Identifier	w2
>368	IdentifierDeclType	const double
>369	IdentifierDeclStatement	 
>370	IdentifierDecl	w1 = i_linear1 . run * i_linear2 . rise - i_linear2 . run * i_linear1 . rise
>371	AssignmentExpr	w1 = i_linear1 . run * i_linear2 . rise - i_linear2 . run * i_linear1 . rise
>372	AdditiveExpression	i_linear1 . run * i_linear2 . rise - i_linear2 . run * i_linear1 . rise
>373	MultiplicativeExpression	i_linear2 . run * i_linear1 . rise
>374	MemberAccess	i_linear1 . rise
>375	Identifier	rise
>376	Identifier	i_linear1
>377	MemberAccess	i_linear2 . run
>378	Identifier	run
>379	Identifier	i_linear2
>380	MultiplicativeExpression	i_linear1 . run * i_linear2 . rise
>381	MemberAccess	i_linear2 . rise
>382	Identifier	rise
>383	Identifier	i_linear2
>384	MemberAccess	i_linear1 . run
>385	Identifier	run
>386	Identifier	i_linear1
>387	Identifier	w1
>388	Identifier	w1
>389	IdentifierDeclType	const double
>390	IdentifierDeclStatement	 
>391	IdentifierDecl	& cmat = * this -> _projection_mat_ref
>392	AssignmentExpr	& cmat = * this -> _projection_mat_ref
>393	UnaryOp	* this -> _projection_mat_ref
>394	PtrMemberAccess	this -> _projection_mat_ref
>395	Identifier	_projection_mat_ref
>396	Identifier	this
>397	UnaryOperator	*
>398	Identifier	cmat
>399	Identifier	cmat
>400	IdentifierDeclType	const NyARPerspectiveProjectionMatrix &
>434	FunctionDef	NyARRotVector 
>435	ParameterList	const TNyARDoublePoint2d & i_start_vertex , const TNyARDoublePoint2d & i_end_vertex
>436	Parameter	 
>437	Identifier	i_end_vertex
>438	ParameterType	const TNyARDoublePoint2d &
>439	Parameter	 
>440	Identifier	i_start_vertex
>441	ParameterType	const TNyARDoublePoint2d &
>442	ReturnType	void
>443	CompoundStatement	 
>444	ReturnStatement	 
>445	IfStatement	if ( v < 0 )
>446	CompoundStatement	 
>447	ExpressionStatement	 
>448	AssignmentExpr	this -> v3 = - this -> v3
>449	UnaryOp	- this -> v3
>450	PtrMemberAccess	this -> v3
>451	Identifier	v3
>452	Identifier	this
>453	UnaryOperator	-
>454	PtrMemberAccess	this -> v3
>455	Identifier	v3
>456	Identifier	this
>457	ExpressionStatement	 
>458	AssignmentExpr	this -> v2 = - this -> v2
>459	UnaryOp	- this -> v2
>460	PtrMemberAccess	this -> v2
>461	Identifier	v2
>462	Identifier	this
>463	UnaryOperator	-
>464	PtrMemberAccess	this -> v2
>465	Identifier	v2
>466	Identifier	this
>467	ExpressionStatement	 
>468	AssignmentExpr	this -> v1 = - this -> v1
>469	UnaryOp	- this -> v1
>470	PtrMemberAccess	this -> v1
>471	Identifier	v1
>472	Identifier	this
>473	UnaryOperator	-
>474	PtrMemberAccess	this -> v1
>475	Identifier	v1
>476	Identifier	this
>477	Condition	 
>478	RelationalExpression	v < 0
>479	PrimaryExpression	0
>480	Identifier	v
>481	IdentifierDeclStatement	 
>482	IdentifierDecl	v = ( i_end_vertex . x - i_start_vertex . x ) * ( camera2 - camera0 ) + ( i_end_vertex . y - i_start_vertex . y ) * ( \
>483	AssignmentExpr	v = ( i_end_vertex . x - i_start_vertex . x ) * ( camera2 - camera0 ) + ( i_end_vertex . y - i_start_\
>484	AdditiveExpression	( i_end_vertex . x - i_start_vertex . x ) * ( camera2 - camera0 ) + ( i_end_vertex . y - i_start_vertex \
>485	MultiplicativeExpression	( i_end_vertex . y - i_start_vertex . y ) * ( camera3 - camera1 )
>486	AdditiveExpression	camera3 - camera1
>487	Identifier	camera1
>488	Identifier	camera3
>489	AdditiveExpression	i_end_vertex . y - i_start_vertex . y
>490	MemberAccess	i_start_vertex . y
>491	Identifier	y
>492	Identifier	i_start_vertex
>493	MemberAccess	i_end_vertex . y
>494	Identifier	y
>495	Identifier	i_end_vertex
>496	MultiplicativeExpression	( i_end_vertex . x - i_start_vertex . x ) * ( camera2 - camera0 )
>497	AdditiveExpression	camera2 - camera0
>498	Identifier	camera0
>499	Identifier	camera2
>500	AdditiveExpression	i_end_vertex . x - i_start_vertex . x
>501	MemberAccess	i_start_vertex . x
>502	Identifier	x
>503	Identifier	i_start_vertex
>504	MemberAccess	i_end_vertex . x
>505	Identifier	x
>506	Identifier	i_end_vertex
>507	Identifier	v
>508	Identifier	v
>509	IdentifierDeclType	const double
>510	IdentifierDeclStatement	 
>511	IdentifierDecl	camera3 = ( cmat . m10 * world3 + cmat . m11 * world4 + cmat . m12 * world5 ) / h
>512	AssignmentExpr	camera3 = ( cmat . m10 * world3 + cmat . m11 * world4 + cmat . m12 * world5 ) / h
>513	MultiplicativeExpression	( cmat . m10 * world3 + cmat . m11 * world4 + cmat . m12 * world5 ) / h
>514	Identifier	h
>515	AdditiveExpression	cmat . m10 * world3 + cmat . m11 * world4 + cmat . m12 * world5
>516	AdditiveExpression	cmat . m11 * world4 + cmat . m12 * world5
>517	MultiplicativeExpression	cmat . m12 * world5
>518	Identifier	world5
>519	MemberAccess	cmat . m12
>520	Identifier	m12
>521	Identifier	cmat
>522	MultiplicativeExpression	cmat . m11 * world4
>523	Identifier	world4
>524	MemberAccess	cmat . m11
>525	Identifier	m11
>526	Identifier	cmat
>527	MultiplicativeExpression	cmat . m10 * world3
>528	Identifier	world3
>529	MemberAccess	cmat . m10
>530	Identifier	m10
>531	Identifier	cmat
>532	Identifier	camera3
>533	Identifier	camera3
>534	IdentifierDeclType	const double
>535	IdentifierDeclStatement	 
>536	IdentifierDecl	camera2 = ( cmat . m00 * world3 + cmat . m01 * world4 + cmat . m02 * world5 ) / h
>537	AssignmentExpr	camera2 = ( cmat . m00 * world3 + cmat . m01 * world4 + cmat . m02 * world5 ) / h
>538	MultiplicativeExpression	( cmat . m00 * world3 + cmat . m01 * world4 + cmat . m02 * world5 ) / h
>539	Identifier	h
>540	AdditiveExpression	cmat . m00 * world3 + cmat . m01 * world4 + cmat . m02 * world5
>541	AdditiveExpression	cmat . m01 * world4 + cmat . m02 * world5
>542	MultiplicativeExpression	cmat . m02 * world5
>543	Identifier	world5
>544	MemberAccess	cmat . m02
>545	Identifier	m02
>546	Identifier	cmat
>547	MultiplicativeExpression	cmat . m01 * world4
>548	Identifier	world4
>549	MemberAccess	cmat . m01
>550	Identifier	m01
>551	Identifier	cmat
>552	MultiplicativeExpression	cmat . m00 * world3
>553	Identifier	world3
>554	MemberAccess	cmat . m00
>555	Identifier	m00
>556	Identifier	cmat
>557	Identifier	camera2
>558	Identifier	camera2
>559	IdentifierDeclType	const double
>560	IfStatement	if ( h == 0.0 )
>561	CompoundStatement	 
>562	ExpressionStatement	 
>563	CallExpression	NyARException ( )
>564	ArgumentList	 
>565	Callee	NyARException
>566	Identifier	NyARException
>567	Statement	 
>568	Condition	 
>569	EqualityExpression	h == 0.0
>570	PrimaryExpression	0.0
>571	Identifier	h
>572	ExpressionStatement	 
>573	AssignmentExpr	h = cmat . m20 * world3 + cmat . m21 * world4 + cmat . m22 * world5
>574	AdditiveExpression	cmat . m20 * world3 + cmat . m21 * world4 + cmat . m22 * world5
>575	AdditiveExpression	cmat . m21 * world4 + cmat . m22 * world5
>576	MultiplicativeExpression	cmat . m22 * world5
>577	Identifier	world5
>578	MemberAccess	cmat . m22
>579	Identifier	m22
>580	Identifier	cmat
>581	MultiplicativeExpression	cmat . m21 * world4
>582	Identifier	world4
>583	MemberAccess	cmat . m21
>584	Identifier	m21
>585	Identifier	cmat
>586	MultiplicativeExpression	cmat . m20 * world3
>587	Identifier	world3
>588	MemberAccess	cmat . m20
>589	Identifier	m20
>590	Identifier	cmat
>591	Identifier	h
>592	IdentifierDeclStatement	 
>593	IdentifierDecl	camera1 = ( cmat . m10 * world0 + cmat . m11 * world1 + cmat . m12 * world2 ) / h
>594	AssignmentExpr	camera1 = ( cmat . m10 * world0 + cmat . m11 * world1 + cmat . m12 * world2 ) / h
>595	MultiplicativeExpression	( cmat . m10 * world0 + cmat . m11 * world1 + cmat . m12 * world2 ) / h
>596	Identifier	h
>597	AdditiveExpression	cmat . m10 * world0 + cmat . m11 * world1 + cmat . m12 * world2
>598	AdditiveExpression	cmat . m11 * world1 + cmat . m12 * world2
>599	MultiplicativeExpression	cmat . m12 * world2
>600	Identifier	world2
>601	MemberAccess	cmat . m12
>602	Identifier	m12
>603	Identifier	cmat
>604	MultiplicativeExpression	cmat . m11 * world1
>605	Identifier	world1
>606	MemberAccess	cmat . m11
>607	Identifier	m11
>608	Identifier	cmat
>609	MultiplicativeExpression	cmat . m10 * world0
>610	Identifier	world0
>611	MemberAccess	cmat . m10
>612	Identifier	m10
>613	Identifier	cmat
>614	Identifier	camera1
>615	Identifier	camera1
>616	IdentifierDeclType	const double
>617	IdentifierDeclStatement	 
>618	IdentifierDecl	camera0 = ( cmat . m00 * world0 + cmat . m01 * world1 + cmat . m02 * world2 ) / h
>619	AssignmentExpr	camera0 = ( cmat . m00 * world0 + cmat . m01 * world1 + cmat . m02 * world2 ) / h
>620	MultiplicativeExpression	( cmat . m00 * world0 + cmat . m01 * world1 + cmat . m02 * world2 ) / h
>621	Identifier	h
>622	AdditiveExpression	cmat . m00 * world0 + cmat . m01 * world1 + cmat . m02 * world2
>623	AdditiveExpression	cmat . m01 * world1 + cmat . m02 * world2
>624	MultiplicativeExpression	cmat . m02 * world2
>625	Identifier	world2
>626	MemberAccess	cmat . m02
>627	Identifier	m02
>628	Identifier	cmat
>629	MultiplicativeExpression	cmat . m01 * world1
>630	Identifier	world1
>631	MemberAccess	cmat . m01
>632	Identifier	m01
>633	Identifier	cmat
>634	MultiplicativeExpression	cmat . m00 * world0
>635	Identifier	world0
>636	MemberAccess	cmat . m00
>637	Identifier	m00
>638	Identifier	cmat
>639	Identifier	camera0
>640	Identifier	camera0
>641	IdentifierDeclType	const double
>642	IfStatement	if ( h == 0.0 )
>643	CompoundStatement	 
>644	ExpressionStatement	 
>645	CallExpression	NyARException ( )
>646	ArgumentList	 
>647	Callee	NyARException
>648	Identifier	NyARException
>649	Statement	 
>650	Condition	 
>651	EqualityExpression	h == 0.0
>652	PrimaryExpression	0.0
>653	Identifier	h
>654	ExpressionStatement	 
>655	AssignmentExpr	h = cmat . m20 * world0 + cmat . m21 * world1 + cmat . m22 * world2
>656	AdditiveExpression	cmat . m20 * world0 + cmat . m21 * world1 + cmat . m22 * world2
>657	AdditiveExpression	cmat . m21 * world1 + cmat . m22 * world2
>658	MultiplicativeExpression	cmat . m22 * world2
>659	Identifier	world2
>660	MemberAccess	cmat . m22
>661	Identifier	m22
>662	Identifier	cmat
>663	MultiplicativeExpression	cmat . m21 * world1
>664	Identifier	world1
>665	MemberAccess	cmat . m21
>666	Identifier	m21
>667	Identifier	cmat
>668	MultiplicativeExpression	cmat . m20 * world0
>669	Identifier	world0
>670	MemberAccess	cmat . m20
>671	Identifier	m20
>672	Identifier	cmat
>673	Identifier	h
>674	IdentifierDeclStatement	 
>675	IdentifierDecl	& cmat = * this -> _projection_mat_ref
>676	AssignmentExpr	& cmat = * this -> _projection_mat_ref
>677	UnaryOp	* this -> _projection_mat_ref
>678	PtrMemberAccess	this -> _projection_mat_ref
>679	Identifier	_projection_mat_ref
>680	Identifier	this
>681	UnaryOperator	*
>682	Identifier	cmat
>683	Identifier	cmat
>684	IdentifierDeclType	const NyARPerspectiveProjectionMatrix &
>685	IdentifierDeclStatement	 
>686	IdentifierDecl	world5 = world2 + this -> v3
>687	AssignmentExpr	world5 = world2 + this -> v3
>688	AdditiveExpression	world2 + this -> v3
>689	PtrMemberAccess	this -> v3
>690	Identifier	v3
>691	Identifier	this
>692	Identifier	world2
>693	Identifier	world5
>694	Identifier	world5
>695	IdentifierDeclType	const double
>696	IdentifierDeclStatement	 
>697	IdentifierDecl	world4 = world1 + this -> v2
>698	AssignmentExpr	world4 = world1 + this -> v2
>699	AdditiveExpression	world1 + this -> v2
>700	PtrMemberAccess	this -> v2
>701	Identifier	v2
>702	Identifier	this
>703	Identifier	world1
>704	Identifier	world4
>705	Identifier	world4
>706	IdentifierDeclType	const double
>707	IdentifierDeclStatement	 
>708	IdentifierDecl	world3 = world0 + this -> v1
>709	AssignmentExpr	world3 = world0 + this -> v1
>710	AdditiveExpression	world0 + this -> v1
>711	PtrMemberAccess	this -> v1
>712	Identifier	v1
>713	Identifier	this
>714	Identifier	world0
>715	Identifier	world3
>716	Identifier	world3
>717	IdentifierDeclType	const double
>718	IdentifierDeclStatement	 
>719	IdentifierDecl	world2 = inv_cpara [ 2 * 3 + 0 ] * i_start_vertex . x * 10.0 + inv_cpara [ 2 * 3 + 1 ] * i_start_vertex . y * 10.0 + \
>720	AssignmentExpr	world2 = inv_cpara [ 2 * 3 + 0 ] * i_start_vertex . x * 10.0 + inv_cpara [ 2 * 3 + 1 ] * i_start_vertex \
>721	AdditiveExpression	inv_cpara [ 2 * 3 + 0 ] * i_start_vertex . x * 10.0 + inv_cpara [ 2 * 3 + 1 ] * i_start_vertex . y * \
>722	AdditiveExpression	inv_cpara [ 2 * 3 + 1 ] * i_start_vertex . y * 10.0 + inv_cpara [ 2 * 3 + 2 ] * 10.0
>723	MultiplicativeExpression	inv_cpara [ 2 * 3 + 2 ] * 10.0
>724	PrimaryExpression	10.0
>725	ArrayIndexing	inv_cpara [ 2 * 3 + 2 ]
>726	AdditiveExpression	2 * 3 + 2
>727	PrimaryExpression	2
>728	MultiplicativeExpression	2 * 3
>729	PrimaryExpression	3
>730	PrimaryExpression	2
>731	Identifier	inv_cpara
>732	MultiplicativeExpression	inv_cpara [ 2 * 3 + 1 ] * i_start_vertex . y * 10.0
>733	MultiplicativeExpression	i_start_vertex . y * 10.0
>734	PrimaryExpression	10.0
>735	MemberAccess	i_start_vertex . y
>736	Identifier	y
>737	Identifier	i_start_vertex
>738	ArrayIndexing	inv_cpara [ 2 * 3 + 1 ]
>739	AdditiveExpression	2 * 3 + 1
>740	PrimaryExpression	1
>741	MultiplicativeExpression	2 * 3
>742	PrimaryExpression	3
>743	PrimaryExpression	2
>744	Identifier	inv_cpara
>745	MultiplicativeExpression	inv_cpara [ 2 * 3 + 0 ] * i_start_vertex . x * 10.0
>746	MultiplicativeExpression	i_start_vertex . x * 10.0
>747	PrimaryExpression	10.0
>748	MemberAccess	i_start_vertex . x
>749	Identifier	x
>750	Identifier	i_start_vertex
>751	ArrayIndexing	inv_cpara [ 2 * 3 + 0 ]
>752	AdditiveExpression	2 * 3 + 0
>753	PrimaryExpression	0
>754	MultiplicativeExpression	2 * 3
>755	PrimaryExpression	3
>756	PrimaryExpression	2
>757	Identifier	inv_cpara
>758	Identifier	world2
>759	Identifier	world2
>760	IdentifierDeclType	const double
>761	IdentifierDeclStatement	 
>762	IdentifierDecl	world1 = inv_cpara [ 1 * 3 + 0 ] * i_start_vertex . x * 10.0 + inv_cpara [ 1 * 3 + 1 ] * i_start_vertex . y * 10.0 + \
>763	AssignmentExpr	world1 = inv_cpara [ 1 * 3 + 0 ] * i_start_vertex . x * 10.0 + inv_cpara [ 1 * 3 + 1 ] * i_start_vertex \
>764	AdditiveExpression	inv_cpara [ 1 * 3 + 0 ] * i_start_vertex . x * 10.0 + inv_cpara [ 1 * 3 + 1 ] * i_start_vertex . y * \
>765	AdditiveExpression	inv_cpara [ 1 * 3 + 1 ] * i_start_vertex . y * 10.0 + inv_cpara [ 1 * 3 + 2 ] * 10.0
>766	MultiplicativeExpression	inv_cpara [ 1 * 3 + 2 ] * 10.0
>767	PrimaryExpression	10.0
>768	ArrayIndexing	inv_cpara [ 1 * 3 + 2 ]
>769	AdditiveExpression	1 * 3 + 2
>770	PrimaryExpression	2
>771	MultiplicativeExpression	1 * 3
>772	PrimaryExpression	3
>773	PrimaryExpression	1
>774	Identifier	inv_cpara
>775	MultiplicativeExpression	inv_cpara [ 1 * 3 + 1 ] * i_start_vertex . y * 10.0
>776	MultiplicativeExpression	i_start_vertex . y * 10.0
>777	PrimaryExpression	10.0
>778	MemberAccess	i_start_vertex . y
>779	Identifier	y
>780	Identifier	i_start_vertex
>781	ArrayIndexing	inv_cpara [ 1 * 3 + 1 ]
>782	AdditiveExpression	1 * 3 + 1
>783	PrimaryExpression	1
>784	MultiplicativeExpression	1 * 3
>785	PrimaryExpression	3
>786	PrimaryExpression	1
>787	Identifier	inv_cpara
>788	MultiplicativeExpression	inv_cpara [ 1 * 3 + 0 ] * i_start_vertex . x * 10.0
>789	MultiplicativeExpression	i_start_vertex . x * 10.0
>790	PrimaryExpression	10.0
>791	MemberAccess	i_start_vertex . x
>792	Identifier	x
>793	Identifier	i_start_vertex
>794	ArrayIndexing	inv_cpara [ 1 * 3 + 0 ]
>795	AdditiveExpression	1 * 3 + 0
>796	PrimaryExpression	0
>797	MultiplicativeExpression	1 * 3
>798	PrimaryExpression	3
>799	PrimaryExpression	1
>800	Identifier	inv_cpara
>801	Identifier	world1
>802	Identifier	world1
>803	IdentifierDeclType	const double
>804	IdentifierDeclStatement	 
>805	IdentifierDecl	world0 = inv_cpara [ 0 * 3 + 0 ] * i_start_vertex . x * 10.0 + inv_cpara [ 0 * 3 + 1 ] * i_start_vertex . y * 10.0 + \
>806	AssignmentExpr	world0 = inv_cpara [ 0 * 3 + 0 ] * i_start_vertex . x * 10.0 + inv_cpara [ 0 * 3 + 1 ] * i_start_vertex \
>807	AdditiveExpression	inv_cpara [ 0 * 3 + 0 ] * i_start_vertex . x * 10.0 + inv_cpara [ 0 * 3 + 1 ] * i_start_vertex . y * \
>808	AdditiveExpression	inv_cpara [ 0 * 3 + 1 ] * i_start_vertex . y * 10.0 + inv_cpara [ 0 * 3 + 2 ] * 10.0
>809	MultiplicativeExpression	inv_cpara [ 0 * 3 + 2 ] * 10.0
>810	PrimaryExpression	10.0
>811	ArrayIndexing	inv_cpara [ 0 * 3 + 2 ]
>812	AdditiveExpression	0 * 3 + 2
>813	PrimaryExpression	2
>814	MultiplicativeExpression	0 * 3
>815	PrimaryExpression	3
>816	PrimaryExpression	0
>817	Identifier	inv_cpara
>818	MultiplicativeExpression	inv_cpara [ 0 * 3 + 1 ] * i_start_vertex . y * 10.0
>819	MultiplicativeExpression	i_start_vertex . y * 10.0
>820	PrimaryExpression	10.0
>821	MemberAccess	i_start_vertex . y
>822	Identifier	y
>823	Identifier	i_start_vertex
>824	ArrayIndexing	inv_cpara [ 0 * 3 + 1 ]
>825	AdditiveExpression	0 * 3 + 1
>826	PrimaryExpression	1
>827	MultiplicativeExpression	0 * 3
>828	PrimaryExpression	3
>829	PrimaryExpression	0
>830	Identifier	inv_cpara
>831	MultiplicativeExpression	inv_cpara [ 0 * 3 + 0 ] * i_start_vertex . x * 10.0
>832	MultiplicativeExpression	i_start_vertex . x * 10.0
>833	PrimaryExpression	10.0
>834	MemberAccess	i_start_vertex . x
>835	Identifier	x
>836	Identifier	i_start_vertex
>837	ArrayIndexing	inv_cpara [ 0 * 3 + 0 ]
>838	AdditiveExpression	0 * 3 + 0
>839	PrimaryExpression	0
>840	MultiplicativeExpression	0 * 3
>841	PrimaryExpression	3
>842	PrimaryExpression	0
>843	Identifier	inv_cpara
>844	Identifier	world0
>845	Identifier	world0
>846	IdentifierDeclType	const double
>847	IdentifierDeclStatement	 
>848	IdentifierDecl	* inv_cpara = this -> _mat_a -> getArray ( )
>849	AssignmentExpr	* inv_cpara = this -> _mat_a -> getArray ( )
>850	CallExpression	this -> _mat_a -> getArray ( )
>851	ArgumentList	 
>852	Callee	this -> _mat_a -> getArray
>853	PtrMemberAccess	this -> _mat_a -> getArray
>854	Identifier	getArray
>855	PtrMemberAccess	this -> _mat_a
>856	Identifier	_mat_a
>857	Identifier	this
>858	Identifier	inv_cpara
>859	Identifier	inv_cpara
>860	IdentifierDeclType	const double *
>861	IdentifierDeclStatement	 
>862	IdentifierDecl	h
>863	Identifier	h
>864	IdentifierDeclType	double
>909	FunctionDef	NyARRotVector 
>910	ParameterList	NyARRotVector & io_vec1 , NyARRotVector & io_vec2
>911	Parameter	 
>912	Identifier	io_vec2
>913	ParameterType	NyARRotVector &
>914	Parameter	 
>915	Identifier	io_vec1
>916	ParameterType	NyARRotVector &
>917	ReturnType	void
>918	CompoundStatement	 
>919	ReturnStatement	 
>920	IfStatement	if ( e1 < e2 )
>921	ElseStatement	else
>922	CompoundStatement	 
>923	IfStatement	if ( e2 < e3 )
>924	ElseStatement	else
>925	CompoundStatement	 
>926	IfStatement	if ( e3 < e4 )
>927	ElseStatement	else
>928	CompoundStatement	 
>929	ExpressionStatement	 
>930	AssignmentExpr	io_vec2 . v3 = r4
>931	Identifier	r4
>932	MemberAccess	io_vec2 . v3
>933	Identifier	v3
>934	Identifier	io_vec2
>935	ExpressionStatement	 
>936	AssignmentExpr	io_vec2 . v2 = q4
>937	Identifier	q4
>938	MemberAccess	io_vec2 . v2
>939	Identifier	v2
>940	Identifier	io_vec2
>941	ExpressionStatement	 
>942	AssignmentExpr	io_vec2 . v1 = p4
>943	Identifier	p4
>944	MemberAccess	io_vec2 . v1
>945	Identifier	v1
>946	Identifier	io_vec2
>947	ExpressionStatement	 
>948	AssignmentExpr	io_vec1 . v3 = r2
>949	Identifier	r2
>950	MemberAccess	io_vec1 . v3
>951	Identifier	v3
>952	Identifier	io_vec1
>953	ExpressionStatement	 
>954	AssignmentExpr	io_vec1 . v2 = q2
>955	Identifier	q2
>956	MemberAccess	io_vec1 . v2
>957	Identifier	v2
>958	Identifier	io_vec1
>959	ExpressionStatement	 
>960	AssignmentExpr	io_vec1 . v1 = p2
>961	Identifier	p2
>962	MemberAccess	io_vec1 . v1
>963	Identifier	v1
>964	Identifier	io_vec1
>965	CompoundStatement	 
>966	ExpressionStatement	 
>967	AssignmentExpr	io_vec2 . v3 = r3
>968	Identifier	r3
>969	MemberAccess	io_vec2 . v3
>970	Identifier	v3
>971	Identifier	io_vec2
>972	ExpressionStatement	 
>973	AssignmentExpr	io_vec2 . v2 = q3
>974	Identifier	q3
>975	MemberAccess	io_vec2 . v2
>976	Identifier	v2
>977	Identifier	io_vec2
>978	ExpressionStatement	 
>979	AssignmentExpr	io_vec2 . v1 = p3
>980	Identifier	p3
>981	MemberAccess	io_vec2 . v1
>982	Identifier	v1
>983	Identifier	io_vec2
>984	ExpressionStatement	 
>985	AssignmentExpr	io_vec1 . v3 = r2
>986	Identifier	r2
>987	MemberAccess	io_vec1 . v3
>988	Identifier	v3
>989	Identifier	io_vec1
>990	ExpressionStatement	 
>991	AssignmentExpr	io_vec1 . v2 = q2
>992	Identifier	q2
>993	MemberAccess	io_vec1 . v2
>994	Identifier	v2
>995	Identifier	io_vec1
>996	ExpressionStatement	 
>997	AssignmentExpr	io_vec1 . v1 = p2
>998	Identifier	p2
>999	MemberAccess	io_vec1 . v1
>1000	Identifier	v1
>1001	Identifier	io_vec1
>1002	Condition	 
>1003	RelationalExpression	e3 < e4
>1004	Identifier	e4
>1005	Identifier	e3
>1006	CompoundStatement	 
>1007	IfStatement	if ( e2 < e4 )
>1008	ElseStatement	else
>1009	CompoundStatement	 
>1010	ExpressionStatement	 
>1011	AssignmentExpr	io_vec2 . v3 = r4
>1012	Identifier	r4
>1013	MemberAccess	io_vec2 . v3
>1014	Identifier	v3
>1015	Identifier	io_vec2
>1016	ExpressionStatement	 
>1017	AssignmentExpr	io_vec2 . v2 = q4
>1018	Identifier	q4
>1019	MemberAccess	io_vec2 . v2
>1020	Identifier	v2
>1021	Identifier	io_vec2
>1022	ExpressionStatement	 
>1023	AssignmentExpr	io_vec2 . v1 = p4
>1024	Identifier	p4
>1025	MemberAccess	io_vec2 . v1
>1026	Identifier	v1
>1027	Identifier	io_vec2
>1028	ExpressionStatement	 
>1029	AssignmentExpr	io_vec1 . v3 = r2
>1030	Identifier	r2
>1031	MemberAccess	io_vec1 . v3
>1032	Identifier	v3
>1033	Identifier	io_vec1
>1034	ExpressionStatement	 
>1035	AssignmentExpr	io_vec1 . v2 = q2
>1036	Identifier	q2
>1037	MemberAccess	io_vec1 . v2
>1038	Identifier	v2
>1039	Identifier	io_vec1
>1040	ExpressionStatement	 
>1041	AssignmentExpr	io_vec1 . v1 = p2
>1042	Identifier	p2
>1043	MemberAccess	io_vec1 . v1
>1044	Identifier	v1
>1045	Identifier	io_vec1
>1046	CompoundStatement	 
>1047	ExpressionStatement	 
>1048	AssignmentExpr	io_vec2 . v3 = r4
>1049	Identifier	r4
>1050	MemberAccess	io_vec2 . v3
>1051	Identifier	v3
>1052	Identifier	io_vec2
>1053	ExpressionStatement	 
>1054	AssignmentExpr	io_vec2 . v2 = q4
>1055	Identifier	q4
>1056	MemberAccess	io_vec2 . v2
>1057	Identifier	v2
>1058	Identifier	io_vec2
>1059	ExpressionStatement	 
>1060	AssignmentExpr	io_vec2 . v1 = p4
>1061	Identifier	p4
>1062	MemberAccess	io_vec2 . v1
>1063	Identifier	v1
>1064	Identifier	io_vec2
>1065	ExpressionStatement	 
>1066	AssignmentExpr	io_vec1 . v3 = r1
>1067	Identifier	r1
>1068	MemberAccess	io_vec1 . v3
>1069	Identifier	v3
>1070	Identifier	io_vec1
>1071	ExpressionStatement	 
>1072	AssignmentExpr	io_vec1 . v2 = q1
>1073	Identifier	q1
>1074	MemberAccess	io_vec1 . v2
>1075	Identifier	v2
>1076	Identifier	io_vec1
>1077	ExpressionStatement	 
>1078	AssignmentExpr	io_vec1 . v1 = p1
>1079	Identifier	p1
>1080	MemberAccess	io_vec1 . v1
>1081	Identifier	v1
>1082	Identifier	io_vec1
>1083	Condition	 
>1084	RelationalExpression	e2 < e4
>1085	Identifier	e4
>1086	Identifier	e2
>1087	Condition	 
>1088	RelationalExpression	e2 < e3
>1089	Identifier	e3
>1090	Identifier	e2
>1091	CompoundStatement	 
>1092	IfStatement	if ( e1 < e3 )
>1093	ElseStatement	else
>1094	CompoundStatement	 
>1095	IfStatement	if ( e3 < e4 )
>1096	ElseStatement	else
>1097	CompoundStatement	 
>1098	ExpressionStatement	 
>1099	AssignmentExpr	io_vec2 . v3 = r4
>1100	Identifier	r4
>1101	MemberAccess	io_vec2 . v3
>1102	Identifier	v3
>1103	Identifier	io_vec2
>1104	ExpressionStatement	 
>1105	AssignmentExpr	io_vec2 . v2 = q4
>1106	Identifier	q4
>1107	MemberAccess	io_vec2 . v2
>1108	Identifier	v2
>1109	Identifier	io_vec2
>1110	ExpressionStatement	 
>1111	AssignmentExpr	io_vec2 . v1 = p4
>1112	Identifier	p4
>1113	MemberAccess	io_vec2 . v1
>1114	Identifier	v1
>1115	Identifier	io_vec2
>1116	ExpressionStatement	 
>1117	AssignmentExpr	io_vec1 . v3 = r2
>1118	Identifier	r2
>1119	MemberAccess	io_vec1 . v3
>1120	Identifier	v3
>1121	Identifier	io_vec1
>1122	ExpressionStatement	 
>1123	AssignmentExpr	io_vec1 . v2 = q2
>1124	Identifier	q2
>1125	MemberAccess	io_vec1 . v2
>1126	Identifier	v2
>1127	Identifier	io_vec1
>1128	ExpressionStatement	 
>1129	AssignmentExpr	io_vec1 . v1 = p2
>1130	Identifier	p2
>1131	MemberAccess	io_vec1 . v1
>1132	Identifier	v1
>1133	Identifier	io_vec1
>1134	CompoundStatement	 
>1135	ExpressionStatement	 
>1136	AssignmentExpr	io_vec2 . v3 = r3
>1137	Identifier	r3
>1138	MemberAccess	io_vec2 . v3
>1139	Identifier	v3
>1140	Identifier	io_vec2
>1141	ExpressionStatement	 
>1142	AssignmentExpr	io_vec2 . v2 = q3
>1143	Identifier	q3
>1144	MemberAccess	io_vec2 . v2
>1145	Identifier	v2
>1146	Identifier	io_vec2
>1147	ExpressionStatement	 
>1148	AssignmentExpr	io_vec2 . v1 = p3
>1149	Identifier	p3
>1150	MemberAccess	io_vec2 . v1
>1151	Identifier	v1
>1152	Identifier	io_vec2
>1153	ExpressionStatement	 
>1154	AssignmentExpr	io_vec1 . v3 = r2
>1155	Identifier	r2
>1156	MemberAccess	io_vec1 . v3
>1157	Identifier	v3
>1158	Identifier	io_vec1
>1159	ExpressionStatement	 
>1160	AssignmentExpr	io_vec1 . v2 = q2
>1161	Identifier	q2
>1162	MemberAccess	io_vec1 . v2
>1163	Identifier	v2
>1164	Identifier	io_vec1
>1165	ExpressionStatement	 
>1166	AssignmentExpr	io_vec1 . v1 = p2
>1167	Identifier	p2
>1168	MemberAccess	io_vec1 . v1
>1169	Identifier	v1
>1170	Identifier	io_vec1
>1171	Condition	 
>1172	RelationalExpression	e3 < e4
>1173	Identifier	e4
>1174	Identifier	e3
>1175	CompoundStatement	 
>1176	IfStatement	if ( e1 < e4 )
>1177	ElseStatement	else
>1178	CompoundStatement	 
>1179	ExpressionStatement	 
>1180	AssignmentExpr	io_vec2 . v3 = r4
>1181	Identifier	r4
>1182	MemberAccess	io_vec2 . v3
>1183	Identifier	v3
>1184	Identifier	io_vec2
>1185	ExpressionStatement	 
>1186	AssignmentExpr	io_vec2 . v2 = q4
>1187	Identifier	q4
>1188	MemberAccess	io_vec2 . v2
>1189	Identifier	v2
>1190	Identifier	io_vec2
>1191	ExpressionStatement	 
>1192	AssignmentExpr	io_vec2 . v1 = p4
>1193	Identifier	p4
>1194	MemberAccess	io_vec2 . v1
>1195	Identifier	v1
>1196	Identifier	io_vec2
>1197	ExpressionStatement	 
>1198	AssignmentExpr	io_vec1 . v3 = r2
>1199	Identifier	r2
>1200	MemberAccess	io_vec1 . v3
>1201	Identifier	v3
>1202	Identifier	io_vec1
>1203	ExpressionStatement	 
>1204	AssignmentExpr	io_vec1 . v2 = q2
>1205	Identifier	q2
>1206	MemberAccess	io_vec1 . v2
>1207	Identifier	v2
>1208	Identifier	io_vec1
>1209	ExpressionStatement	 
>1210	AssignmentExpr	io_vec1 . v1 = p2
>1211	Identifier	p2
>1212	MemberAccess	io_vec1 . v1
>1213	Identifier	v1
>1214	Identifier	io_vec1
>1215	CompoundStatement	 
>1216	ExpressionStatement	 
>1217	AssignmentExpr	io_vec2 . v3 = r3
>1218	Identifier	r3
>1219	MemberAccess	io_vec2 . v3
>1220	Identifier	v3
>1221	Identifier	io_vec2
>1222	ExpressionStatement	 
>1223	AssignmentExpr	io_vec2 . v2 = q3
>1224	Identifier	q3
>1225	MemberAccess	io_vec2 . v2
>1226	Identifier	v2
>1227	Identifier	io_vec2
>1228	ExpressionStatement	 
>1229	AssignmentExpr	io_vec2 . v1 = p3
>1230	Identifier	p3
>1231	MemberAccess	io_vec2 . v1
>1232	Identifier	v1
>1233	Identifier	io_vec2
>1234	ExpressionStatement	 
>1235	AssignmentExpr	io_vec1 . v3 = r1
>1236	Identifier	r1
>1237	MemberAccess	io_vec1 . v3
>1238	Identifier	v3
>1239	Identifier	io_vec1
>1240	ExpressionStatement	 
>1241	AssignmentExpr	io_vec1 . v2 = q1
>1242	Identifier	q1
>1243	MemberAccess	io_vec1 . v2
>1244	Identifier	v2
>1245	Identifier	io_vec1
>1246	ExpressionStatement	 
>1247	AssignmentExpr	io_vec1 . v1 = p1
>1248	Identifier	p1
>1249	MemberAccess	io_vec1 . v1
>1250	Identifier	v1
>1251	Identifier	io_vec1
>1252	Condition	 
>1253	RelationalExpression	e1 < e4
>1254	Identifier	e4
>1255	Identifier	e1
>1256	Condition	 
>1257	RelationalExpression	e1 < e3
>1258	Identifier	e3
>1259	Identifier	e1
>1260	Condition	 
>1261	RelationalExpression	e1 < e2
>1262	Identifier	e2
>1263	Identifier	e1
>1264	IfStatement	if ( e4 < 0 )
>1265	CompoundStatement	 
>1266	ExpressionStatement	 
>1267	AssignmentExpr	e4 = - e4
>1268	UnaryOp	- e4
>1269	Identifier	e4
>1270	UnaryOperator	-
>1271	Identifier	e4
>1272	Condition	 
>1273	RelationalExpression	e4 < 0
>1274	PrimaryExpression	0
>1275	Identifier	e4
>1276	IdentifierDeclStatement	 
>1277	IdentifierDecl	e4 = p2 * p4 + q2 * q4 + r2 * r4
>1278	AssignmentExpr	e4 = p2 * p4 + q2 * q4 + r2 * r4
>1279	AdditiveExpression	p2 * p4 + q2 * q4 + r2 * r4
>1280	AdditiveExpression	q2 * q4 + r2 * r4
>1281	MultiplicativeExpression	r2 * r4
>1282	Identifier	r4
>1283	Identifier	r2
>1284	MultiplicativeExpression	q2 * q4
>1285	Identifier	q4
>1286	Identifier	q2
>1287	MultiplicativeExpression	p2 * p4
>1288	Identifier	p4
>1289	Identifier	p2
>1290	Identifier	e4
>1291	Identifier	e4
>1292	IdentifierDeclType	double
>1293	IfStatement	if ( e3 < 0 )
>1294	CompoundStatement	 
>1295	ExpressionStatement	 
>1296	AssignmentExpr	e3 = - e3
>1297	UnaryOp	- e3
>1298	Identifier	e3
>1299	UnaryOperator	-
>1300	Identifier	e3
>1301	Condition	 
>1302	RelationalExpression	e3 < 0
>1303	PrimaryExpression	0
>1304	Identifier	e3
>1305	IdentifierDeclStatement	 
>1306	IdentifierDecl	e3 = p2 * p3 + q2 * q3 + r2 * r3
>1307	AssignmentExpr	e3 = p2 * p3 + q2 * q3 + r2 * r3
>1308	AdditiveExpression	p2 * p3 + q2 * q3 + r2 * r3
>1309	AdditiveExpression	q2 * q3 + r2 * r3
>1310	MultiplicativeExpression	r2 * r3
>1311	Identifier	r3
>1312	Identifier	r2
>1313	MultiplicativeExpression	q2 * q3
>1314	Identifier	q3
>1315	Identifier	q2
>1316	MultiplicativeExpression	p2 * p3
>1317	Identifier	p3
>1318	Identifier	p2
>1319	Identifier	e3
>1320	Identifier	e3
>1321	IdentifierDeclType	double
>1322	IfStatement	if ( e2 < 0 )
>1323	CompoundStatement	 
>1324	ExpressionStatement	 
>1325	AssignmentExpr	e2 = - e2
>1326	UnaryOp	- e2
>1327	Identifier	e2
>1328	UnaryOperator	-
>1329	Identifier	e2
>1330	Condition	 
>1331	RelationalExpression	e2 < 0
>1332	PrimaryExpression	0
>1333	Identifier	e2
>1334	IdentifierDeclStatement	 
>1335	IdentifierDecl	e2 = p1 * p4 + q1 * q4 + r1 * r4
>1336	AssignmentExpr	e2 = p1 * p4 + q1 * q4 + r1 * r4
>1337	AdditiveExpression	p1 * p4 + q1 * q4 + r1 * r4
>1338	AdditiveExpression	q1 * q4 + r1 * r4
>1339	MultiplicativeExpression	r1 * r4
>1340	Identifier	r4
>1341	Identifier	r1
>1342	MultiplicativeExpression	q1 * q4
>1343	Identifier	q4
>1344	Identifier	q1
>1345	MultiplicativeExpression	p1 * p4
>1346	Identifier	p4
>1347	Identifier	p1
>1348	Identifier	e2
>1349	Identifier	e2
>1350	IdentifierDeclType	double
>1351	IfStatement	if ( e1 < 0 )
>1352	CompoundStatement	 
>1353	ExpressionStatement	 
>1354	AssignmentExpr	e1 = - e1
>1355	UnaryOp	- e1
>1356	Identifier	e1
>1357	UnaryOperator	-
>1358	Identifier	e1
>1359	Condition	 
>1360	RelationalExpression	e1 < 0
>1361	PrimaryExpression	0
>1362	Identifier	e1
>1363	IdentifierDeclStatement	 
>1364	IdentifierDecl	e1 = p1 * p3 + q1 * q3 + r1 * r3
>1365	AssignmentExpr	e1 = p1 * p3 + q1 * q3 + r1 * r3
>1366	AdditiveExpression	p1 * p3 + q1 * q3 + r1 * r3
>1367	AdditiveExpression	q1 * q3 + r1 * r3
>1368	MultiplicativeExpression	r1 * r3
>1369	Identifier	r3
>1370	Identifier	r1
>1371	MultiplicativeExpression	q1 * q3
>1372	Identifier	q3
>1373	Identifier	q1
>1374	MultiplicativeExpression	p1 * p3
>1375	Identifier	p3
>1376	Identifier	p1
>1377	Identifier	e1
>1378	Identifier	e1
>1379	IdentifierDeclType	double
>1380	IfStatement	if ( f == 2 )
>1381	CompoundStatement	 
>1382	ExpressionStatement	 
>1383	AssignmentExpr	f = 0
>1384	PrimaryExpression	0
>1385	Identifier	f
>1386	ExpressionStatement	 
>1387	AssignmentExpr	vec32 = w
>1388	Identifier	w
>1389	Identifier	vec32
>1390	ExpressionStatement	 
>1391	AssignmentExpr	vec30 = vec32
>1392	Identifier	vec32
>1393	Identifier	vec30
>1394	ExpressionStatement	 
>1395	AssignmentExpr	w = vec30
>1396	Identifier	vec30
>1397	Identifier	w
>1398	ExpressionStatement	 
>1399	AssignmentExpr	vec22 = w
>1400	Identifier	w
>1401	Identifier	vec22
>1402	ExpressionStatement	 
>1403	AssignmentExpr	vec20 = vec22
>1404	Identifier	vec22
>1405	Identifier	vec20
>1406	ExpressionStatement	 
>1407	AssignmentExpr	w = vec20
>1408	Identifier	vec20
>1409	Identifier	w
>1410	ExpressionStatement	 
>1411	AssignmentExpr	r4 = w
>1412	Identifier	w
>1413	Identifier	r4
>1414	ExpressionStatement	 
>1415	AssignmentExpr	p4 = r4
>1416	Identifier	r4
>1417	Identifier	p4
>1418	ExpressionStatement	 
>1419	AssignmentExpr	w = p4
>1420	Identifier	p4
>1421	Identifier	w
>1422	ExpressionStatement	 
>1423	AssignmentExpr	r3 = w
>1424	Identifier	w
>1425	Identifier	r3
>1426	ExpressionStatement	 
>1427	AssignmentExpr	p3 = r3
>1428	Identifier	r3
>1429	Identifier	p3
>1430	ExpressionStatement	 
>1431	AssignmentExpr	w = p3
>1432	Identifier	p3
>1433	Identifier	w
>1434	Condition	 
>1435	EqualityExpression	f == 2
>1436	PrimaryExpression	2
>1437	Identifier	f
>1438	IfStatement	if ( f == 1 )
>1439	CompoundStatement	 
>1440	ExpressionStatement	 
>1441	AssignmentExpr	f = 0
>1442	PrimaryExpression	0
>1443	Identifier	f
>1444	ExpressionStatement	 
>1445	AssignmentExpr	vec32 = w
>1446	Identifier	w
>1447	Identifier	vec32
>1448	ExpressionStatement	 
>1449	AssignmentExpr	vec31 = vec32
>1450	Identifier	vec32
>1451	Identifier	vec31
>1452	ExpressionStatement	 
>1453	AssignmentExpr	w = vec31
>1454	Identifier	vec31
>1455	Identifier	w
>1456	ExpressionStatement	 
>1457	AssignmentExpr	vec22 = w
>1458	Identifier	w
>1459	Identifier	vec22
>1460	ExpressionStatement	 
>1461	AssignmentExpr	vec21 = vec22
>1462	Identifier	vec22
>1463	Identifier	vec21
>1464	ExpressionStatement	 
>1465	AssignmentExpr	w = vec21
>1466	Identifier	vec21
>1467	Identifier	w
>1468	ExpressionStatement	 
>1469	AssignmentExpr	r4 = w
>1470	Identifier	w
>1471	Identifier	r4
>1472	ExpressionStatement	 
>1473	AssignmentExpr	q4 = r4
>1474	Identifier	r4
>1475	Identifier	q4
>1476	ExpressionStatement	 
>1477	AssignmentExpr	w = q4
>1478	Identifier	q4
>1479	Identifier	w
>1480	ExpressionStatement	 
>1481	AssignmentExpr	r3 = w
>1482	Identifier	w
>1483	Identifier	r3
>1484	ExpressionStatement	 
>1485	AssignmentExpr	q3 = r3
>1486	Identifier	r3
>1487	Identifier	q3
>1488	ExpressionStatement	 
>1489	AssignmentExpr	w = q3
>1490	Identifier	q3
>1491	Identifier	w
>1492	Condition	 
>1493	EqualityExpression	f == 1
>1494	PrimaryExpression	1
>1495	Identifier	f
>1496	ExpressionStatement	 
>1497	AssignmentExpr	q4 = k3 * r4 + k4
>1498	AdditiveExpression	k3 * r4 + k4
>1499	Identifier	k4
>1500	MultiplicativeExpression	k3 * r4
>1501	Identifier	r4
>1502	Identifier	k3
>1503	Identifier	q4
>1504	ExpressionStatement	 
>1505	AssignmentExpr	p4 = k1 * r4 + k2
>1506	AdditiveExpression	k1 * r4 + k2
>1507	Identifier	k2
>1508	MultiplicativeExpression	k1 * r4
>1509	Identifier	r4
>1510	Identifier	k1
>1511	Identifier	p4
>1512	ExpressionStatement	 
>1513	AssignmentExpr	r4 = ( - b - sqrt ( d ) ) / a
>1514	MultiplicativeExpression	( - b - sqrt ( d ) ) / a
>1515	Identifier	a
>1516	AdditiveExpression	- b - sqrt ( d )
>1517	CallExpression	sqrt ( d )
>1518	ArgumentList	d
>1519	Argument	d
>1520	Identifier	d
>1521	Callee	sqrt
>1522	Identifier	sqrt
>1523	UnaryOp	- b
>1524	Identifier	b
>1525	UnaryOperator	-
>1526	Identifier	r4
>1527	ExpressionStatement	 
>1528	AssignmentExpr	q3 = k3 * r3 + k4
>1529	AdditiveExpression	k3 * r3 + k4
>1530	Identifier	k4
>1531	MultiplicativeExpression	k3 * r3
>1532	Identifier	r3
>1533	Identifier	k3
>1534	Identifier	q3
>1535	ExpressionStatement	 
>1536	AssignmentExpr	p3 = k1 * r3 + k2
>1537	AdditiveExpression	k1 * r3 + k2
>1538	Identifier	k2
>1539	MultiplicativeExpression	k1 * r3
>1540	Identifier	r3
>1541	Identifier	k1
>1542	Identifier	p3
>1543	ExpressionStatement	 
>1544	AssignmentExpr	r3 = ( - b + sqrt ( d ) ) / a
>1545	MultiplicativeExpression	( - b + sqrt ( d ) ) / a
>1546	Identifier	a
>1547	AdditiveExpression	- b + sqrt ( d )
>1548	CallExpression	sqrt ( d )
>1549	ArgumentList	d
>1550	Argument	d
>1551	Identifier	d
>1552	Callee	sqrt
>1553	Identifier	sqrt
>1554	UnaryOp	- b
>1555	Identifier	b
>1556	UnaryOperator	-
>1557	Identifier	r3
>1558	IfStatement	if ( d < 0 )
>1559	CompoundStatement	 
>1560	ExpressionStatement	 
>1561	CallExpression	NyARException ( )
>1562	ArgumentList	 
>1563	Callee	NyARException
>1564	Identifier	NyARException
>1565	Statement	 
>1566	Condition	 
>1567	RelationalExpression	d < 0
>1568	PrimaryExpression	0
>1569	Identifier	d
>1570	ExpressionStatement	 
>1571	AssignmentExpr	d = b * b - a * c
>1572	AdditiveExpression	b * b - a * c
>1573	MultiplicativeExpression	a * c
>1574	Identifier	c
>1575	Identifier	a
>1576	MultiplicativeExpression	b * b
>1577	Identifier	b
>1578	Identifier	b
>1579	Identifier	d
>1580	ExpressionStatement	 
>1581	AssignmentExpr	c = k2 * k2 + k4 * k4 - 1
>1582	AdditiveExpression	k2 * k2 + k4 * k4 - 1
>1583	AdditiveExpression	k4 * k4 - 1
>1584	PrimaryExpression	1
>1585	MultiplicativeExpression	k4 * k4
>1586	Identifier	k4
>1587	Identifier	k4
>1588	MultiplicativeExpression	k2 * k2
>1589	Identifier	k2
>1590	Identifier	k2
>1591	Identifier	c
>1592	ExpressionStatement	 
>1593	AssignmentExpr	b = k1 * k2 + k3 * k4
>1594	AdditiveExpression	k1 * k2 + k3 * k4
>1595	MultiplicativeExpression	k3 * k4
>1596	Identifier	k4
>1597	Identifier	k3
>1598	MultiplicativeExpression	k1 * k2
>1599	Identifier	k2
>1600	Identifier	k1
>1601	Identifier	b
>1602	ExpressionStatement	 
>1603	AssignmentExpr	a = k1 * k1 + k3 * k3 + 1
>1604	AdditiveExpression	k1 * k1 + k3 * k3 + 1
>1605	AdditiveExpression	k3 * k3 + 1
>1606	PrimaryExpression	1
>1607	MultiplicativeExpression	k3 * k3
>1608	Identifier	k3
>1609	Identifier	k3
>1610	MultiplicativeExpression	k1 * k1
>1611	Identifier	k1
>1612	Identifier	k1
>1613	Identifier	a
>1614	ExpressionStatement	 
>1615	AssignmentExpr	k4 = ( vec30 * ca ) / ( vec30 * vec21 - vec20 * vec31 )
>1616	MultiplicativeExpression	( vec30 * ca ) / ( vec30 * vec21 - vec20 * vec31 )
>1617	AdditiveExpression	vec30 * vec21 - vec20 * vec31
>1618	MultiplicativeExpression	vec20 * vec31
>1619	Identifier	vec31
>1620	Identifier	vec20
>1621	MultiplicativeExpression	vec30 * vec21
>1622	Identifier	vec21
>1623	Identifier	vec30
>1624	MultiplicativeExpression	vec30 * ca
>1625	Identifier	ca
>1626	Identifier	vec30
>1627	Identifier	k4
>1628	ExpressionStatement	 
>1629	AssignmentExpr	k3 = ( vec20 * vec32 - vec30 * vec22 ) / ( vec30 * vec21 - vec20 * vec31 )
>1630	MultiplicativeExpression	( vec20 * vec32 - vec30 * vec22 ) / ( vec30 * vec21 - vec20 * vec31 )
>1631	AdditiveExpression	vec30 * vec21 - vec20 * vec31
>1632	MultiplicativeExpression	vec20 * vec31
>1633	Identifier	vec31
>1634	Identifier	vec20
>1635	MultiplicativeExpression	vec30 * vec21
>1636	Identifier	vec21
>1637	Identifier	vec30
>1638	AdditiveExpression	vec20 * vec32 - vec30 * vec22
>1639	MultiplicativeExpression	vec30 * vec22
>1640	Identifier	vec22
>1641	Identifier	vec30
>1642	MultiplicativeExpression	vec20 * vec32
>1643	Identifier	vec32
>1644	Identifier	vec20
>1645	Identifier	k3
>1646	ExpressionStatement	 
>1647	AssignmentExpr	k2 = ( vec31 * ca ) / ( vec31 * vec20 - vec21 * vec30 )
>1648	MultiplicativeExpression	( vec31 * ca ) / ( vec31 * vec20 - vec21 * vec30 )
>1649	AdditiveExpression	vec31 * vec20 - vec21 * vec30
>1650	MultiplicativeExpression	vec21 * vec30
>1651	Identifier	vec30
>1652	Identifier	vec21
>1653	MultiplicativeExpression	vec31 * vec20
>1654	Identifier	vec20
>1655	Identifier	vec31
>1656	MultiplicativeExpression	vec31 * ca
>1657	Identifier	ca
>1658	Identifier	vec31
>1659	Identifier	k2
>1660	ExpressionStatement	 
>1661	AssignmentExpr	k1 = ( vec21 * vec32 - vec31 * vec22 ) / ( vec31 * vec20 - vec21 * vec30 )
>1662	MultiplicativeExpression	( vec21 * vec32 - vec31 * vec22 ) / ( vec31 * vec20 - vec21 * vec30 )
>1663	AdditiveExpression	vec31 * vec20 - vec21 * vec30
>1664	MultiplicativeExpression	vec21 * vec30
>1665	Identifier	vec30
>1666	Identifier	vec21
>1667	MultiplicativeExpression	vec31 * vec20
>1668	Identifier	vec20
>1669	Identifier	vec31
>1670	AdditiveExpression	vec21 * vec32 - vec31 * vec22
>1671	MultiplicativeExpression	vec31 * vec22
>1672	Identifier	vec22
>1673	Identifier	vec31
>1674	MultiplicativeExpression	vec21 * vec32
>1675	Identifier	vec32
>1676	Identifier	vec21
>1677	Identifier	k1
>1678	IfStatement	if ( vec31 * vec20 - vec21 * vec30 == 0.0 )
>1679	CompoundStatement	 
>1680	ExpressionStatement	 
>1681	CallExpression	NyARException ( )
>1682	ArgumentList	 
>1683	Callee	NyARException
>1684	Identifier	NyARException
>1685	Statement	 
>1686	Condition	 
>1687	EqualityExpression	vec31 * vec20 - vec21 * vec30 == 0.0
>1688	PrimaryExpression	0.0
>1689	AdditiveExpression	vec31 * vec20 - vec21 * vec30
>1690	MultiplicativeExpression	vec21 * vec30
>1691	Identifier	vec30
>1692	Identifier	vec21
>1693	MultiplicativeExpression	vec31 * vec20
>1694	Identifier	vec20
>1695	Identifier	vec31
>1696	IfStatement	if ( vec31 * vec20 - vec21 * vec30 != 0.0 )
>1697	ElseStatement	else
>1698	CompoundStatement	 
>1699	IfStatement	if ( vec32 * vec20 - vec22 * vec30 != 0.0 )
>1700	ElseStatement	else
>1701	CompoundStatement	 
>1702	ExpressionStatement	 
>1703	AssignmentExpr	f = 2
>1704	PrimaryExpression	2
>1705	Identifier	f
>1706	ExpressionStatement	 
>1707	AssignmentExpr	vec32 = w
>1708	Identifier	w
>1709	Identifier	vec32
>1710	ExpressionStatement	 
>1711	AssignmentExpr	vec30 = vec32
>1712	Identifier	vec32
>1713	Identifier	vec30
>1714	ExpressionStatement	 
>1715	AssignmentExpr	w = vec30
>1716	Identifier	vec30
>1717	Identifier	w
>1718	ExpressionStatement	 
>1719	AssignmentExpr	vec22 = w
>1720	Identifier	w
>1721	Identifier	vec22
>1722	ExpressionStatement	 
>1723	AssignmentExpr	vec20 = vec22
>1724	Identifier	vec22
>1725	Identifier	vec20
>1726	ExpressionStatement	 
>1727	AssignmentExpr	w = vec20
>1728	Identifier	vec20
>1729	Identifier	w
>1730	CompoundStatement	 
>1731	ExpressionStatement	 
>1732	AssignmentExpr	f = 1
>1733	PrimaryExpression	1
>1734	Identifier	f
>1735	ExpressionStatement	 
>1736	AssignmentExpr	vec32 = w
>1737	Identifier	w
>1738	Identifier	vec32
>1739	ExpressionStatement	 
>1740	AssignmentExpr	vec31 = vec32
>1741	Identifier	vec32
>1742	Identifier	vec31
>1743	ExpressionStatement	 
>1744	AssignmentExpr	w = vec31
>1745	Identifier	vec31
>1746	Identifier	w
>1747	ExpressionStatement	 
>1748	AssignmentExpr	vec22 = w
>1749	Identifier	w
>1750	Identifier	vec22
>1751	ExpressionStatement	 
>1752	AssignmentExpr	vec21 = vec22
>1753	Identifier	vec22
>1754	Identifier	vec21
>1755	ExpressionStatement	 
>1756	AssignmentExpr	w = vec21
>1757	Identifier	vec21
>1758	Identifier	w
>1759	Condition	 
>1760	EqualityExpression	vec32 * vec20 - vec22 * vec30 != 0.0
>1761	PrimaryExpression	0.0
>1762	AdditiveExpression	vec32 * vec20 - vec22 * vec30
>1763	MultiplicativeExpression	vec22 * vec30
>1764	Identifier	vec30
>1765	Identifier	vec22
>1766	MultiplicativeExpression	vec32 * vec20
>1767	Identifier	vec20
>1768	Identifier	vec32
>1769	CompoundStatement	 
>1770	ExpressionStatement	 
>1771	AssignmentExpr	f = 0
>1772	PrimaryExpression	0
>1773	Identifier	f
>1774	Condition	 
>1775	EqualityExpression	vec31 * vec20 - vec21 * vec30 != 0.0
>1776	PrimaryExpression	0.0
>1777	AdditiveExpression	vec31 * vec20 - vec21 * vec30
>1778	MultiplicativeExpression	vec21 * vec30
>1779	Identifier	vec30
>1780	Identifier	vec21
>1781	MultiplicativeExpression	vec31 * vec20
>1782	Identifier	vec20
>1783	Identifier	vec31
>1784	IfStatement	if ( f == 2 )
>1785	CompoundStatement	 
>1786	ExpressionStatement	 
>1787	AssignmentExpr	f = 0
>1788	PrimaryExpression	0
>1789	Identifier	f
>1790	ExpressionStatement	 
>1791	AssignmentExpr	vec32 = w
>1792	Identifier	w
>1793	Identifier	vec32
>1794	ExpressionStatement	 
>1795	AssignmentExpr	vec30 = vec32
>1796	Identifier	vec32
>1797	Identifier	vec30
>1798	ExpressionStatement	 
>1799	AssignmentExpr	w = vec30
>1800	Identifier	vec30
>1801	Identifier	w
>1802	ExpressionStatement	 
>1803	AssignmentExpr	vec12 = w
>1804	Identifier	w
>1805	Identifier	vec12
>1806	ExpressionStatement	 
>1807	AssignmentExpr	vec10 = vec12
>1808	Identifier	vec12
>1809	Identifier	vec10
>1810	ExpressionStatement	 
>1811	AssignmentExpr	w = vec10
>1812	Identifier	vec10
>1813	Identifier	w
>1814	ExpressionStatement	 
>1815	AssignmentExpr	r2 = w
>1816	Identifier	w
>1817	Identifier	r2
>1818	ExpressionStatement	 
>1819	AssignmentExpr	p2 = r2
>1820	Identifier	r2
>1821	Identifier	p2
>1822	ExpressionStatement	 
>1823	AssignmentExpr	w = p2
>1824	Identifier	p2
>1825	Identifier	w
>1826	ExpressionStatement	 
>1827	AssignmentExpr	r1 = w
>1828	Identifier	w
>1829	Identifier	r1
>1830	ExpressionStatement	 
>1831	AssignmentExpr	p1 = r1
>1832	Identifier	r1
>1833	Identifier	p1
>1834	ExpressionStatement	 
>1835	AssignmentExpr	w = p1
>1836	Identifier	p1
>1837	Identifier	w
>1838	Condition	 
>1839	EqualityExpression	f == 2
>1840	PrimaryExpression	2
>1841	Identifier	f
>1842	IfStatement	if ( f == 1 )
>1843	CompoundStatement	 
>1844	ExpressionStatement	 
>1845	AssignmentExpr	f = 0
>1846	PrimaryExpression	0
>1847	Identifier	f
>1848	ExpressionStatement	 
>1849	AssignmentExpr	vec32 = w
>1850	Identifier	w
>1851	Identifier	vec32
>1852	ExpressionStatement	 
>1853	AssignmentExpr	vec31 = vec32
>1854	Identifier	vec32
>1855	Identifier	vec31
>1856	ExpressionStatement	 
>1857	AssignmentExpr	w = vec31
>1858	Identifier	vec31
>1859	Identifier	w
>1860	ExpressionStatement	 
>1861	AssignmentExpr	vec12 = w
>1862	Identifier	w
>1863	Identifier	vec12
>1864	ExpressionStatement	 
>1865	AssignmentExpr	vec11 = vec12
>1866	Identifier	vec12
>1867	Identifier	vec11
>1868	ExpressionStatement	 
>1869	AssignmentExpr	w = vec11
>1870	Identifier	vec11
>1871	Identifier	w
>1872	ExpressionStatement	 
>1873	AssignmentExpr	r2 = w
>1874	Identifier	w
>1875	Identifier	r2
>1876	ExpressionStatement	 
>1877	AssignmentExpr	q2 = r2
>1878	Identifier	r2
>1879	Identifier	q2
>1880	ExpressionStatement	 
>1881	AssignmentExpr	w = q2
>1882	Identifier	q2
>1883	Identifier	w
>1884	ExpressionStatement	 
>1885	AssignmentExpr	r1 = w
>1886	Identifier	w
>1887	Identifier	r1
>1888	ExpressionStatement	 
>1889	AssignmentExpr	q1 = r1
>1890	Identifier	r1
>1891	Identifier	q1
>1892	ExpressionStatement	 
>1893	AssignmentExpr	w = q1
>1894	Identifier	q1
>1895	Identifier	w
>1896	Condition	 
>1897	EqualityExpression	f == 1
>1898	PrimaryExpression	1
>1899	Identifier	f
>1900	ExpressionStatement	 
>1901	AssignmentExpr	q2 = k3 * r2 + k4
>1902	AdditiveExpression	k3 * r2 + k4
>1903	Identifier	k4
>1904	MultiplicativeExpression	k3 * r2
>1905	Identifier	r2
>1906	Identifier	k3
>1907	Identifier	q2
>1908	ExpressionStatement	 
>1909	AssignmentExpr	p2 = k1 * r2 + k2
>1910	AdditiveExpression	k1 * r2 + k2
>1911	Identifier	k2
>1912	MultiplicativeExpression	k1 * r2
>1913	Identifier	r2
>1914	Identifier	k1
>1915	Identifier	p2
>1916	ExpressionStatement	 
>1917	AssignmentExpr	r2 = ( - b - sqrt ( d ) ) / a
>1918	MultiplicativeExpression	( - b - sqrt ( d ) ) / a
>1919	Identifier	a
>1920	AdditiveExpression	- b - sqrt ( d )
>1921	CallExpression	sqrt ( d )
>1922	ArgumentList	d
>1923	Argument	d
>1924	Identifier	d
>1925	Callee	sqrt
>1926	Identifier	sqrt
>1927	UnaryOp	- b
>1928	Identifier	b
>1929	UnaryOperator	-
>1930	Identifier	r2
>1931	ExpressionStatement	 
>1932	AssignmentExpr	q1 = k3 * r1 + k4
>1933	AdditiveExpression	k3 * r1 + k4
>1934	Identifier	k4
>1935	MultiplicativeExpression	k3 * r1
>1936	Identifier	r1
>1937	Identifier	k3
>1938	Identifier	q1
>1939	ExpressionStatement	 
>1940	AssignmentExpr	p1 = k1 * r1 + k2
>1941	AdditiveExpression	k1 * r1 + k2
>1942	Identifier	k2
>1943	MultiplicativeExpression	k1 * r1
>1944	Identifier	r1
>1945	Identifier	k1
>1946	Identifier	p1
>1947	ExpressionStatement	 
>1948	AssignmentExpr	r1 = ( - b + sqrt ( d ) ) / a
>1949	MultiplicativeExpression	( - b + sqrt ( d ) ) / a
>1950	Identifier	a
>1951	AdditiveExpression	- b + sqrt ( d )
>1952	CallExpression	sqrt ( d )
>1953	ArgumentList	d
>1954	Argument	d
>1955	Identifier	d
>1956	Callee	sqrt
>1957	Identifier	sqrt
>1958	UnaryOp	- b
>1959	Identifier	b
>1960	UnaryOperator	-
>1961	Identifier	r1
>1962	IfStatement	if ( d < 0 )
>1963	CompoundStatement	 
>1964	ExpressionStatement	 
>1965	CallExpression	NyARException ( )
>1966	ArgumentList	 
>1967	Callee	NyARException
>1968	Identifier	NyARException
>1969	Statement	 
>1970	Condition	 
>1971	RelationalExpression	d < 0
>1972	PrimaryExpression	0
>1973	Identifier	d
>1974	ExpressionStatement	 
>1975	AssignmentExpr	d = b * b - a * c
>1976	AdditiveExpression	b * b - a * c
>1977	MultiplicativeExpression	a * c
>1978	Identifier	c
>1979	Identifier	a
>1980	MultiplicativeExpression	b * b
>1981	Identifier	b
>1982	Identifier	b
>1983	Identifier	d
>1984	ExpressionStatement	 
>1985	AssignmentExpr	c = k2 * k2 + k4 * k4 - 1
>1986	AdditiveExpression	k2 * k2 + k4 * k4 - 1
>1987	AdditiveExpression	k4 * k4 - 1
>1988	PrimaryExpression	1
>1989	MultiplicativeExpression	k4 * k4
>1990	Identifier	k4
>1991	Identifier	k4
>1992	MultiplicativeExpression	k2 * k2
>1993	Identifier	k2
>1994	Identifier	k2
>1995	Identifier	c
>1996	ExpressionStatement	 
>1997	AssignmentExpr	b = k1 * k2 + k3 * k4
>1998	AdditiveExpression	k1 * k2 + k3 * k4
>1999	MultiplicativeExpression	k3 * k4
>2000	Identifier	k4
>2001	Identifier	k3
>2002	MultiplicativeExpression	k1 * k2
>2003	Identifier	k2
>2004	Identifier	k1
>2005	Identifier	b
>2006	ExpressionStatement	 
>2007	AssignmentExpr	a = k1 * k1 + k3 * k3 + 1
>2008	AdditiveExpression	k1 * k1 + k3 * k3 + 1
>2009	AdditiveExpression	k3 * k3 + 1
>2010	PrimaryExpression	1
>2011	MultiplicativeExpression	k3 * k3
>2012	Identifier	k3
>2013	Identifier	k3
>2014	MultiplicativeExpression	k1 * k1
>2015	Identifier	k1
>2016	Identifier	k1
>2017	Identifier	a
>2018	ExpressionStatement	 
>2019	AssignmentExpr	k4 = ( vec30 * ca ) / ( vec30 * vec11 - vec10 * vec31 )
>2020	MultiplicativeExpression	( vec30 * ca ) / ( vec30 * vec11 - vec10 * vec31 )
>2021	AdditiveExpression	vec30 * vec11 - vec10 * vec31
>2022	MultiplicativeExpression	vec10 * vec31
>2023	Identifier	vec31
>2024	Identifier	vec10
>2025	MultiplicativeExpression	vec30 * vec11
>2026	Identifier	vec11
>2027	Identifier	vec30
>2028	MultiplicativeExpression	vec30 * ca
>2029	Identifier	ca
>2030	Identifier	vec30
>2031	Identifier	k4
>2032	ExpressionStatement	 
>2033	AssignmentExpr	k3 = ( vec10 * vec32 - vec30 * vec12 ) / ( vec30 * vec11 - vec10 * vec31 )
>2034	MultiplicativeExpression	( vec10 * vec32 - vec30 * vec12 ) / ( vec30 * vec11 - vec10 * vec31 )
>2035	AdditiveExpression	vec30 * vec11 - vec10 * vec31
>2036	MultiplicativeExpression	vec10 * vec31
>2037	Identifier	vec31
>2038	Identifier	vec10
>2039	MultiplicativeExpression	vec30 * vec11
>2040	Identifier	vec11
>2041	Identifier	vec30
>2042	AdditiveExpression	vec10 * vec32 - vec30 * vec12
>2043	MultiplicativeExpression	vec30 * vec12
>2044	Identifier	vec12
>2045	Identifier	vec30
>2046	MultiplicativeExpression	vec10 * vec32
>2047	Identifier	vec32
>2048	Identifier	vec10
>2049	Identifier	k3
>2050	ExpressionStatement	 
>2051	AssignmentExpr	k2 = ( vec31 * ca ) / ( vec31 * vec10 - vec11 * vec30 )
>2052	MultiplicativeExpression	( vec31 * ca ) / ( vec31 * vec10 - vec11 * vec30 )
>2053	AdditiveExpression	vec31 * vec10 - vec11 * vec30
>2054	MultiplicativeExpression	vec11 * vec30
>2055	Identifier	vec30
>2056	Identifier	vec11
>2057	MultiplicativeExpression	vec31 * vec10
>2058	Identifier	vec10
>2059	Identifier	vec31
>2060	MultiplicativeExpression	vec31 * ca
>2061	Identifier	ca
>2062	Identifier	vec31
>2063	Identifier	k2
>2064	ExpressionStatement	 
>2065	AssignmentExpr	k1 = ( vec11 * vec32 - vec31 * vec12 ) / ( vec31 * vec10 - vec11 * vec30 )
>2066	MultiplicativeExpression	( vec11 * vec32 - vec31 * vec12 ) / ( vec31 * vec10 - vec11 * vec30 )
>2067	AdditiveExpression	vec31 * vec10 - vec11 * vec30
>2068	MultiplicativeExpression	vec11 * vec30
>2069	Identifier	vec30
>2070	Identifier	vec11
>2071	MultiplicativeExpression	vec31 * vec10
>2072	Identifier	vec10
>2073	Identifier	vec31
>2074	AdditiveExpression	vec11 * vec32 - vec31 * vec12
>2075	MultiplicativeExpression	vec31 * vec12
>2076	Identifier	vec12
>2077	Identifier	vec31
>2078	MultiplicativeExpression	vec11 * vec32
>2079	Identifier	vec32
>2080	Identifier	vec11
>2081	Identifier	k1
>2082	IdentifierDeclStatement	 
>2083	IdentifierDecl	r4
>2084	Identifier	r4
>2085	IdentifierDeclType	double
>2086	IdentifierDecl	q4
>2087	Identifier	q4
>2088	IdentifierDeclType	double
>2089	IdentifierDecl	p4
>2090	Identifier	p4
>2091	IdentifierDeclType	double
>2092	IdentifierDeclStatement	 
>2093	IdentifierDecl	r3
>2094	Identifier	r3
>2095	IdentifierDeclType	double
>2096	IdentifierDecl	q3
>2097	Identifier	q3
>2098	IdentifierDeclType	double
>2099	IdentifierDecl	p3
>2100	Identifier	p3
>2101	IdentifierDeclType	double
>2102	IdentifierDeclStatement	 
>2103	IdentifierDecl	r2
>2104	Identifier	r2
>2105	IdentifierDeclType	double
>2106	IdentifierDecl	q2
>2107	Identifier	q2
>2108	IdentifierDeclType	double
>2109	IdentifierDecl	p2
>2110	Identifier	p2
>2111	IdentifierDeclType	double
>2112	IdentifierDeclStatement	 
>2113	IdentifierDecl	r1
>2114	Identifier	r1
>2115	IdentifierDeclType	double
>2116	IdentifierDecl	q1
>2117	Identifier	q1
>2118	IdentifierDeclType	double
>2119	IdentifierDecl	p1
>2120	Identifier	p1
>2121	IdentifierDeclType	double
>2122	IdentifierDeclStatement	 
>2123	IdentifierDecl	d
>2124	Identifier	d
>2125	IdentifierDeclType	double
>2126	IdentifierDecl	c
>2127	Identifier	c
>2128	IdentifierDeclType	double
>2129	IdentifierDecl	b
>2130	Identifier	b
>2131	IdentifierDeclType	double
>2132	IdentifierDecl	a
>2133	Identifier	a
>2134	IdentifierDeclType	double
>2135	IdentifierDeclStatement	 
>2136	IdentifierDecl	k4
>2137	Identifier	k4
>2138	IdentifierDeclType	double
>2139	IdentifierDecl	k3
>2140	Identifier	k3
>2141	IdentifierDeclType	double
>2142	IdentifierDecl	k2
>2143	Identifier	k2
>2144	IdentifierDeclType	double
>2145	IdentifierDecl	k1
>2146	Identifier	k1
>2147	IdentifierDeclType	double
>2148	IfStatement	if ( vec31 * vec10 - vec11 * vec30 == 0.0 )
>2149	CompoundStatement	 
>2150	ExpressionStatement	 
>2151	CallExpression	NyARException ( )
>2152	ArgumentList	 
>2153	Callee	NyARException
>2154	Identifier	NyARException
>2155	Statement	 
>2156	Condition	 
>2157	EqualityExpression	vec31 * vec10 - vec11 * vec30 == 0.0
>2158	PrimaryExpression	0.0
>2159	AdditiveExpression	vec31 * vec10 - vec11 * vec30
>2160	MultiplicativeExpression	vec11 * vec30
>2161	Identifier	vec30
>2162	Identifier	vec11
>2163	MultiplicativeExpression	vec31 * vec10
>2164	Identifier	vec10
>2165	Identifier	vec31
>2166	IfStatement	if ( vec31 * vec10 - vec11 * vec30 != 0.0 )
>2167	ElseStatement	else
>2168	CompoundStatement	 
>2169	IfStatement	if ( vec32 * vec10 - vec12 * vec30 != 0.0 )
>2170	ElseStatement	else
>2171	CompoundStatement	 
>2172	ExpressionStatement	 
>2173	AssignmentExpr	f = 2
>2174	PrimaryExpression	2
>2175	Identifier	f
>2176	ExpressionStatement	 
>2177	AssignmentExpr	vec32 = w
>2178	Identifier	w
>2179	Identifier	vec32
>2180	ExpressionStatement	 
>2181	AssignmentExpr	vec30 = vec32
>2182	Identifier	vec32
>2183	Identifier	vec30
>2184	ExpressionStatement	 
>2185	AssignmentExpr	w = vec30
>2186	Identifier	vec30
>2187	Identifier	w
>2188	ExpressionStatement	 
>2189	AssignmentExpr	vec12 = w
>2190	Identifier	w
>2191	Identifier	vec12
>2192	ExpressionStatement	 
>2193	AssignmentExpr	vec10 = vec12
>2194	Identifier	vec12
>2195	Identifier	vec10
>2196	ExpressionStatement	 
>2197	AssignmentExpr	w = vec10
>2198	Identifier	vec10
>2199	Identifier	w
>2200	CompoundStatement	 
>2201	ExpressionStatement	 
>2202	AssignmentExpr	f = 1
>2203	PrimaryExpression	1
>2204	Identifier	f
>2205	ExpressionStatement	 
>2206	AssignmentExpr	vec32 = w
>2207	Identifier	w
>2208	Identifier	vec32
>2209	ExpressionStatement	 
>2210	AssignmentExpr	vec31 = vec32
>2211	Identifier	vec32
>2212	Identifier	vec31
>2213	ExpressionStatement	 
>2214	AssignmentExpr	w = vec31
>2215	Identifier	vec31
>2216	Identifier	w
>2217	ExpressionStatement	 
>2218	AssignmentExpr	vec12 = w
>2219	Identifier	w
>2220	Identifier	vec12
>2221	ExpressionStatement	 
>2222	AssignmentExpr	vec11 = vec12
>2223	Identifier	vec12
>2224	Identifier	vec11
>2225	ExpressionStatement	 
>2226	AssignmentExpr	w = vec11
>2227	Identifier	vec11
>2228	Identifier	w
>2229	Condition	 
>2230	EqualityExpression	vec32 * vec10 - vec12 * vec30 != 0.0
>2231	PrimaryExpression	0.0
>2232	AdditiveExpression	vec32 * vec10 - vec12 * vec30
>2233	MultiplicativeExpression	vec12 * vec30
>2234	Identifier	vec30
>2235	Identifier	vec12
>2236	MultiplicativeExpression	vec32 * vec10
>2237	Identifier	vec10
>2238	Identifier	vec32
>2239	CompoundStatement	 
>2240	ExpressionStatement	 
>2241	AssignmentExpr	f = 0
>2242	PrimaryExpression	0
>2243	Identifier	f
>2244	Condition	 
>2245	EqualityExpression	vec31 * vec10 - vec11 * vec30 != 0.0
>2246	PrimaryExpression	0.0
>2247	AdditiveExpression	vec31 * vec10 - vec11 * vec30
>2248	MultiplicativeExpression	vec11 * vec30
>2249	Identifier	vec30
>2250	Identifier	vec11
>2251	MultiplicativeExpression	vec31 * vec10
>2252	Identifier	vec10
>2253	Identifier	vec31
>2254	IdentifierDeclStatement	 
>2255	IdentifierDecl	ca = ( sqrt ( cb + 1.0 ) + sqrt ( 1.0 - cb ) ) * 0.5
>2256	AssignmentExpr	ca = ( sqrt ( cb + 1.0 ) + sqrt ( 1.0 - cb ) ) * 0.5
>2257	MultiplicativeExpression	( sqrt ( cb + 1.0 ) + sqrt ( 1.0 - cb ) ) * 0.5
>2258	PrimaryExpression	0.5
>2259	AdditiveExpression	sqrt ( cb + 1.0 ) + sqrt ( 1.0 - cb )
>2260	CallExpression	sqrt ( 1.0 - cb )
>2261	ArgumentList	1.0 - cb
>2262	Argument	1.0 - cb
>2263	AdditiveExpression	1.0 - cb
>2264	Identifier	cb
>2265	PrimaryExpression	1.0
>2266	Callee	sqrt
>2267	Identifier	sqrt
>2268	CallExpression	sqrt ( cb + 1.0 )
>2269	ArgumentList	cb + 1.0
>2270	Argument	cb + 1.0
>2271	AdditiveExpression	cb + 1.0
>2272	PrimaryExpression	1.0
>2273	Identifier	cb
>2274	Callee	sqrt
>2275	Identifier	sqrt
>2276	Identifier	ca
>2277	Identifier	ca
>2278	IdentifierDeclType	const double
>2279	IfStatement	if ( cb < 0 )
>2280	CompoundStatement	 
>2281	ExpressionStatement	 
>2282	AssignmentExpr	cb = - cb
>2283	UnaryOp	- cb
>2284	Identifier	cb
>2285	UnaryOperator	-
>2286	Identifier	cb
>2287	Condition	 
>2288	RelationalExpression	cb < 0
>2289	PrimaryExpression	0
>2290	Identifier	cb
>2291	IdentifierDeclStatement	 
>2292	IdentifierDecl	cb = vec10 * vec20 + vec11 * vec21 + vec12 * vec22
>2293	AssignmentExpr	cb = vec10 * vec20 + vec11 * vec21 + vec12 * vec22
>2294	AdditiveExpression	vec10 * vec20 + vec11 * vec21 + vec12 * vec22
>2295	AdditiveExpression	vec11 * vec21 + vec12 * vec22
>2296	MultiplicativeExpression	vec12 * vec22
>2297	Identifier	vec22
>2298	Identifier	vec12
>2299	MultiplicativeExpression	vec11 * vec21
>2300	Identifier	vec21
>2301	Identifier	vec11
>2302	MultiplicativeExpression	vec10 * vec20
>2303	Identifier	vec20
>2304	Identifier	vec10
>2305	Identifier	cb
>2306	Identifier	cb
>2307	IdentifierDeclType	double
>2308	ExpressionStatement	 
>2309	AssignmentExpr	vec32 /= w
>2310	Identifier	w
>2311	Identifier	vec32
>2312	ExpressionStatement	 
>2313	AssignmentExpr	vec31 /= w
>2314	Identifier	w
>2315	Identifier	vec31
>2316	ExpressionStatement	 
>2317	AssignmentExpr	vec30 /= w
>2318	Identifier	w
>2319	Identifier	vec30
>2320	IfStatement	if ( w == 0.0 )
>2321	CompoundStatement	 
>2322	ExpressionStatement	 
>2323	CallExpression	NyARException ( )
>2324	ArgumentList	 
>2325	Callee	NyARException
>2326	Identifier	NyARException
>2327	Statement	 
>2328	Condition	 
>2329	EqualityExpression	w == 0.0
>2330	PrimaryExpression	0.0
>2331	Identifier	w
>2332	ExpressionStatement	 
>2333	AssignmentExpr	w = sqrt ( vec30 * vec30 + vec31 * vec31 + vec32 * vec32 )
>2334	CallExpression	sqrt ( vec30 * vec30 + vec31 * vec31 + vec32 * vec32 )
>2335	ArgumentList	vec30 * vec30 + vec31 * vec31 + vec32 * vec32
>2336	Argument	vec30 * vec30 + vec31 * vec31 + vec32 * vec32
>2337	AdditiveExpression	vec30 * vec30 + vec31 * vec31 + vec32 * vec32
>2338	AdditiveExpression	vec31 * vec31 + vec32 * vec32
>2339	MultiplicativeExpression	vec32 * vec32
>2340	Identifier	vec32
>2341	Identifier	vec32
>2342	MultiplicativeExpression	vec31 * vec31
>2343	Identifier	vec31
>2344	Identifier	vec31
>2345	MultiplicativeExpression	vec30 * vec30
>2346	Identifier	vec30
>2347	Identifier	vec30
>2348	Callee	sqrt
>2349	Identifier	sqrt
>2350	Identifier	w
>2351	IdentifierDeclStatement	 
>2352	IdentifierDecl	vec32 = vec10 * vec21 - vec11 * vec20
>2353	AssignmentExpr	vec32 = vec10 * vec21 - vec11 * vec20
>2354	AdditiveExpression	vec10 * vec21 - vec11 * vec20
>2355	MultiplicativeExpression	vec11 * vec20
>2356	Identifier	vec20
>2357	Identifier	vec11
>2358	MultiplicativeExpression	vec10 * vec21
>2359	Identifier	vec21
>2360	Identifier	vec10
>2361	Identifier	vec32
>2362	Identifier	vec32
>2363	IdentifierDeclType	double
>2364	IdentifierDeclStatement	 
>2365	IdentifierDecl	vec31 = vec12 * vec20 - vec10 * vec22
>2366	AssignmentExpr	vec31 = vec12 * vec20 - vec10 * vec22
>2367	AdditiveExpression	vec12 * vec20 - vec10 * vec22
>2368	MultiplicativeExpression	vec10 * vec22
>2369	Identifier	vec22
>2370	Identifier	vec10
>2371	MultiplicativeExpression	vec12 * vec20
>2372	Identifier	vec20
>2373	Identifier	vec12
>2374	Identifier	vec31
>2375	Identifier	vec31
>2376	IdentifierDeclType	double
>2377	IdentifierDeclStatement	 
>2378	IdentifierDecl	vec30 = vec11 * vec22 - vec12 * vec21
>2379	AssignmentExpr	vec30 = vec11 * vec22 - vec12 * vec21
>2380	AdditiveExpression	vec11 * vec22 - vec12 * vec21
>2381	MultiplicativeExpression	vec12 * vec21
>2382	Identifier	vec21
>2383	Identifier	vec12
>2384	MultiplicativeExpression	vec11 * vec22
>2385	Identifier	vec22
>2386	Identifier	vec11
>2387	Identifier	vec30
>2388	Identifier	vec30
>2389	IdentifierDeclType	double
>2390	IdentifierDeclStatement	 
>2391	IdentifierDecl	vec22 = io_vec2 . v3
>2392	AssignmentExpr	vec22 = io_vec2 . v3
>2393	MemberAccess	io_vec2 . v3
>2394	Identifier	v3
>2395	Identifier	io_vec2
>2396	Identifier	vec22
>2397	Identifier	vec22
>2398	IdentifierDeclType	double
>2399	IdentifierDeclStatement	 
>2400	IdentifierDecl	vec21 = io_vec2 . v2
>2401	AssignmentExpr	vec21 = io_vec2 . v2
>2402	MemberAccess	io_vec2 . v2
>2403	Identifier	v2
>2404	Identifier	io_vec2
>2405	Identifier	vec21
>2406	Identifier	vec21
>2407	IdentifierDeclType	double
>2408	IdentifierDeclStatement	 
>2409	IdentifierDecl	vec20 = io_vec2 . v1
>2410	AssignmentExpr	vec20 = io_vec2 . v1
>2411	MemberAccess	io_vec2 . v1
>2412	Identifier	v1
>2413	Identifier	io_vec2
>2414	Identifier	vec20
>2415	Identifier	vec20
>2416	IdentifierDeclType	double
>2417	IdentifierDeclStatement	 
>2418	IdentifierDecl	vec12 = io_vec1 . v3
>2419	AssignmentExpr	vec12 = io_vec1 . v3
>2420	MemberAccess	io_vec1 . v3
>2421	Identifier	v3
>2422	Identifier	io_vec1
>2423	Identifier	vec12
>2424	Identifier	vec12
>2425	IdentifierDeclType	double
>2426	IdentifierDeclStatement	 
>2427	IdentifierDecl	vec11 = io_vec1 . v2
>2428	AssignmentExpr	vec11 = io_vec1 . v2
>2429	MemberAccess	io_vec1 . v2
>2430	Identifier	v2
>2431	Identifier	io_vec1
>2432	Identifier	vec11
>2433	Identifier	vec11
>2434	IdentifierDeclType	double
>2435	IdentifierDeclStatement	 
>2436	IdentifierDecl	vec10 = io_vec1 . v1
>2437	AssignmentExpr	vec10 = io_vec1 . v1
>2438	MemberAccess	io_vec1 . v1
>2439	Identifier	v1
>2440	Identifier	io_vec1
>2441	Identifier	vec10
>2442	Identifier	vec10
>2443	IdentifierDeclType	double
>2444	IdentifierDeclStatement	 
>2445	IdentifierDecl	f
>2446	Identifier	f
>2447	IdentifierDeclType	int
>2448	IdentifierDeclStatement	 
>2449	IdentifierDecl	w
>2450	Identifier	w
>2451	IdentifierDeclType	double
<3=8,4
<4=5
<5=7,6
<8=147,133,121,109,97,85,73,61,49,37,25,16,10,9
<10=11
<11=13,12
<13=15,14
<16=17
<17=19,18
<19=20
<20=22,21
<22=24,23
<25=26
<26=30,27
<27=29,28
<30=36,31
<31=33,32
<33=35,34
<37=38
<38=42,39
<39=41,40
<42=48,43
<43=45,44
<45=47,46
<49=50
<50=54,51
<51=53,52
<54=60,55
<55=57,56
<57=59,58
<61=62
<62=66,63
<63=65,64
<66=72,67
<67=69,68
<69=71,70
<73=74
<74=78,75
<75=77,76
<78=84,79
<79=81,80
<81=83,82
<85=86
<86=90,87
<87=89,88
<90=96,91
<91=93,92
<93=95,94
<97=98
<98=102,99
<99=101,100
<102=108,103
<103=105,104
<105=107,106
<109=110
<110=114,111
<111=113,112
<114=120,115
<115=117,116
<117=119,118
<121=122
<122=126,123
<123=125,124
<126=132,127
<127=129,128
<129=131,130
<133=134
<134=146,145,135
<135=144,136
<136=138,137
<138=139
<139=141,140
<141=143,142
<147=148
<148=152,149
<149=151,150
<152=154,153
<178=180,179
<180=182,181
<182=183
<183=189,184
<184=185
<185=186
<186=188,187
<189=190
<197=206,205,198
<198=202,199
<199=201,200
<202=204,203
<206=390,369,348,327,292,269,254,232,224,216,208,207
<208=209
<209=213,210
<210=212,211
<213=215,214
<216=217
<217=221,218
<218=220,219
<221=223,222
<224=225
<225=229,226
<226=228,227
<229=231,230
<232=233
<233=253,252,234
<234=251,235
<235=249,236
<236=237
<237=238
<238=246,239
<239=243,240
<240=242,241
<243=245,244
<246=248,247
<249=250
<254=255
<255=268,267,256
<256=266,257
<257=265,258
<258=262,259
<259=261,260
<262=264,263
<269=270
<270=291,290,271
<271=289,272
<272=278,273
<273=277,274
<274=276,275
<278=286,279
<279=283,280
<280=282,281
<283=285,284
<286=288,287
<292=293
<293=326,325,294
<294=324,295
<295=307,296
<296=302,297
<297=301,298
<298=300,299
<302=306,303
<303=305,304
<307=323,308
<308=316,309
<309=313,310
<310=312,311
<313=315,314
<316=320,317
<317=319,318
<320=322,321
<327=328
<328=347,346,329
<329=345,330
<330=338,331
<331=335,332
<332=334,333
<335=337,336
<338=342,339
<339=341,340
<342=344,343
<348=349
<349=368,367,350
<350=366,351
<351=359,352
<352=356,353
<353=355,354
<356=358,357
<359=363,360
<360=362,361
<363=365,364
<369=370
<370=389,388,371
<371=387,372
<372=380,373
<373=377,374
<374=376,375
<377=379,378
<380=384,381
<381=383,382
<384=386,385
<390=391
<391=400,399,392
<392=398,393
<393=397,394
<394=396,395
<434=443,442,435
<435=439,436
<436=438,437
<439=441,440
<443=861,847,804,761,718,707,696,685,674,654,642,617,592,572,560,535,510,481,445,444
<445=477,446
<446=467,457,447
<447=448
<448=454,449
<449=453,450
<450=452,451
<454=456,455
<457=458
<458=464,459
<459=463,460
<460=462,461
<464=466,465
<467=468
<468=474,469
<469=473,470
<470=472,471
<474=476,475
<477=478
<478=480,479
<481=482
<482=509,508,483
<483=507,484
<484=496,485
<485=489,486
<486=488,487
<489=493,490
<490=492,491
<493=495,494
<496=500,497
<497=499,498
<500=504,501
<501=503,502
<504=506,505
<510=511
<511=534,533,512
<512=532,513
<513=515,514
<515=527,516
<516=522,517
<517=519,518
<519=521,520
<522=524,523
<524=526,525
<527=529,528
<529=531,530
<535=536
<536=559,558,537
<537=557,538
<538=540,539
<540=552,541
<541=547,542
<542=544,543
<544=546,545
<547=549,548
<549=551,550
<552=554,553
<554=556,555
<560=568,561
<561=567,562
<562=563
<563=565,564
<565=566
<568=569
<569=571,570
<572=573
<573=591,574
<574=586,575
<575=581,576
<576=578,577
<578=580,579
<581=583,582
<583=585,584
<586=588,587
<588=590,589
<592=593
<593=616,615,594
<594=614,595
<595=597,596
<597=609,598
<598=604,599
<599=601,600
<601=603,602
<604=606,605
<606=608,607
<609=611,610
<611=613,612
<617=618
<618=641,640,619
<619=639,620
<620=622,621
<622=634,623
<623=629,624
<624=626,625
<626=628,627
<629=631,630
<631=633,632
<634=636,635
<636=638,637
<642=650,643
<643=649,644
<644=645
<645=647,646
<647=648
<650=651
<651=653,652
<654=655
<655=673,656
<656=668,657
<657=663,658
<658=660,659
<660=662,661
<663=665,664
<665=667,666
<668=670,669
<670=672,671
<674=675
<675=684,683,676
<676=682,677
<677=681,678
<678=680,679
<685=686
<686=695,694,687
<687=693,688
<688=692,689
<689=691,690
<696=697
<697=706,705,698
<698=704,699
<699=703,700
<700=702,701
<707=708
<708=717,716,709
<709=715,710
<710=714,711
<711=713,712
<718=719
<719=760,759,720
<720=758,721
<721=745,722
<722=732,723
<723=725,724
<725=731,726
<726=728,727
<728=730,729
<732=738,733
<733=735,734
<735=737,736
<738=744,739
<739=741,740
<741=743,742
<745=751,746
<746=748,747
<748=750,749
<751=757,752
<752=754,753
<754=756,755
<761=762
<762=803,802,763
<763=801,764
<764=788,765
<765=775,766
<766=768,767
<768=774,769
<769=771,770
<771=773,772
<775=781,776
<776=778,777
<778=780,779
<781=787,782
<782=784,783
<784=786,785
<788=794,789
<789=791,790
<791=793,792
<794=800,795
<795=797,796
<797=799,798
<804=805
<805=846,845,806
<806=844,807
<807=831,808
<808=818,809
<809=811,810
<811=817,812
<812=814,813
<814=816,815
<818=824,819
<819=821,820
<821=823,822
<824=830,825
<825=827,826
<827=829,828
<831=837,832
<832=834,833
<834=836,835
<837=843,838
<838=840,839
<840=842,841
<847=848
<848=860,859,849
<849=858,850
<850=852,851
<852=853
<853=855,854
<855=857,856
<861=862
<862=864,863
<909=918,917,910
<910=914,911
<911=913,912
<914=916,915
<918=2448,2444,2435,2426,2417,2408,2399,2390,2377,2364,2351,2332,2320,2316,2312,2308,2291,2279,2254,2166,2148,2135,2122,919,920,1264,1276,1293,1305,1322,1334,1351,1363,1380,1438,1496,1504,1512,1527,1535,1543,1558,1570,1580,1592,1602,1614,1628,1646,1660,1678,1696,1784,1842,1900,1908,1916,1931,1939,1947,1962,1974,1984,1996,2006,2018,2032,2050,2064,2082,2092,2102,2112
<920=1260,1091,921
<921=922
<922=923
<923=1087,1006,924
<924=925
<925=926
<926=1002,965,927
<927=928
<928=959,953,947,941,935,929
<929=930
<930=932,931
<932=934,933
<935=936
<936=938,937
<938=940,939
<941=942
<942=944,943
<944=946,945
<947=948
<948=950,949
<950=952,951
<953=954
<954=956,955
<956=958,957
<959=960
<960=962,961
<962=964,963
<965=996,990,984,978,972,966
<966=967
<967=969,968
<969=971,970
<972=973
<973=975,974
<975=977,976
<978=979
<979=981,980
<981=983,982
<984=985
<985=987,986
<987=989,988
<990=991
<991=993,992
<993=995,994
<996=997
<997=999,998
<999=1001,1000
<1002=1003
<1003=1005,1004
<1006=1007
<1007=1083,1046,1008
<1008=1009
<1009=1040,1034,1028,1022,1016,1010
<1010=1011
<1011=1013,1012
<1013=1015,1014
<1016=1017
<1017=1019,1018
<1019=1021,1020
<1022=1023
<1023=1025,1024
<1025=1027,1026
<1028=1029
<1029=1031,1030
<1031=1033,1032
<1034=1035
<1035=1037,1036
<1037=1039,1038
<1040=1041
<1041=1043,1042
<1043=1045,1044
<1046=1077,1071,1065,1059,1053,1047
<1047=1048
<1048=1050,1049
<1050=1052,1051
<1053=1054
<1054=1056,1055
<1056=1058,1057
<1059=1060
<1060=1062,1061
<1062=1064,1063
<1065=1066
<1066=1068,1067
<1068=1070,1069
<1071=1072
<1072=1074,1073
<1074=1076,1075
<1077=1078
<1078=1080,1079
<1080=1082,1081
<1083=1084
<1084=1086,1085
<1087=1088
<1088=1090,1089
<1091=1092
<1092=1256,1175,1093
<1093=1094
<1094=1095
<1095=1171,1134,1096
<1096=1097
<1097=1128,1122,1116,1110,1104,1098
<1098=1099
<1099=1101,1100
<1101=1103,1102
<1104=1105
<1105=1107,1106
<1107=1109,1108
<1110=1111
<1111=1113,1112
<1113=1115,1114
<1116=1117
<1117=1119,1118
<1119=1121,1120
<1122=1123
<1123=1125,1124
<1125=1127,1126
<1128=1129
<1129=1131,1130
<1131=1133,1132
<1134=1165,1159,1153,1147,1141,1135
<1135=1136
<1136=1138,1137
<1138=1140,1139
<1141=1142
<1142=1144,1143
<1144=1146,1145
<1147=1148
<1148=1150,1149
<1150=1152,1151
<1153=1154
<1154=1156,1155
<1156=1158,1157
<1159=1160
<1160=1162,1161
<1162=1164,1163
<1165=1166
<1166=1168,1167
<1168=1170,1169
<1171=1172
<1172=1174,1173
<1175=1176
<1176=1252,1215,1177
<1177=1178
<1178=1209,1203,1197,1191,1185,1179
<1179=1180
<1180=1182,1181
<1182=1184,1183
<1185=1186
<1186=1188,1187
<1188=1190,1189
<1191=1192
<1192=1194,1193
<1194=1196,1195
<1197=1198
<1198=1200,1199
<1200=1202,1201
<1203=1204
<1204=1206,1205
<1206=1208,1207
<1209=1210
<1210=1212,1211
<1212=1214,1213
<1215=1246,1240,1234,1228,1222,1216
<1216=1217
<1217=1219,1218
<1219=1221,1220
<1222=1223
<1223=1225,1224
<1225=1227,1226
<1228=1229
<1229=1231,1230
<1231=1233,1232
<1234=1235
<1235=1237,1236
<1237=1239,1238
<1240=1241
<1241=1243,1242
<1243=1245,1244
<1246=1247
<1247=1249,1248
<1249=1251,1250
<1252=1253
<1253=1255,1254
<1256=1257
<1257=1259,1258
<1260=1261
<1261=1263,1262
<1264=1272,1265
<1265=1266
<1266=1267
<1267=1271,1268
<1268=1270,1269
<1272=1273
<1273=1275,1274
<1276=1277
<1277=1292,1291,1278
<1278=1290,1279
<1279=1287,1280
<1280=1284,1281
<1281=1283,1282
<1284=1286,1285
<1287=1289,1288
<1293=1301,1294
<1294=1295
<1295=1296
<1296=1300,1297
<1297=1299,1298
<1301=1302
<1302=1304,1303
<1305=1306
<1306=1321,1320,1307
<1307=1319,1308
<1308=1316,1309
<1309=1313,1310
<1310=1312,1311
<1313=1315,1314
<1316=1318,1317
<1322=1330,1323
<1323=1324
<1324=1325
<1325=1329,1326
<1326=1328,1327
<1330=1331
<1331=1333,1332
<1334=1335
<1335=1350,1349,1336
<1336=1348,1337
<1337=1345,1338
<1338=1342,1339
<1339=1341,1340
<1342=1344,1343
<1345=1347,1346
<1351=1359,1352
<1352=1353
<1353=1354
<1354=1358,1355
<1355=1357,1356
<1359=1360
<1360=1362,1361
<1363=1364
<1364=1379,1378,1365
<1365=1377,1366
<1366=1374,1367
<1367=1371,1368
<1368=1370,1369
<1371=1373,1372
<1374=1376,1375
<1380=1434,1381
<1381=1430,1426,1422,1418,1414,1410,1406,1402,1398,1394,1390,1386,1382
<1382=1383
<1383=1385,1384
<1386=1387
<1387=1389,1388
<1390=1391
<1391=1393,1392
<1394=1395
<1395=1397,1396
<1398=1399
<1399=1401,1400
<1402=1403
<1403=1405,1404
<1406=1407
<1407=1409,1408
<1410=1411
<1411=1413,1412
<1414=1415
<1415=1417,1416
<1418=1419
<1419=1421,1420
<1422=1423
<1423=1425,1424
<1426=1427
<1427=1429,1428
<1430=1431
<1431=1433,1432
<1434=1435
<1435=1437,1436
<1438=1492,1439
<1439=1488,1484,1480,1476,1472,1468,1464,1460,1456,1452,1448,1444,1440
<1440=1441
<1441=1443,1442
<1444=1445
<1445=1447,1446
<1448=1449
<1449=1451,1450
<1452=1453
<1453=1455,1454
<1456=1457
<1457=1459,1458
<1460=1461
<1461=1463,1462
<1464=1465
<1465=1467,1466
<1468=1469
<1469=1471,1470
<1472=1473
<1473=1475,1474
<1476=1477
<1477=1479,1478
<1480=1481
<1481=1483,1482
<1484=1485
<1485=1487,1486
<1488=1489
<1489=1491,1490
<1492=1493
<1493=1495,1494
<1496=1497
<1497=1503,1498
<1498=1500,1499
<1500=1502,1501
<1504=1505
<1505=1511,1506
<1506=1508,1507
<1508=1510,1509
<1512=1513
<1513=1526,1514
<1514=1516,1515
<1516=1523,1517
<1517=1521,1518
<1518=1519
<1519=1520
<1521=1522
<1523=1525,1524
<1527=1528
<1528=1534,1529
<1529=1531,1530
<1531=1533,1532
<1535=1536
<1536=1542,1537
<1537=1539,1538
<1539=1541,1540
<1543=1544
<1544=1557,1545
<1545=1547,1546
<1547=1554,1548
<1548=1552,1549
<1549=1550
<1550=1551
<1552=1553
<1554=1556,1555
<1558=1566,1559
<1559=1565,1560
<1560=1561
<1561=1563,1562
<1563=1564
<1566=1567
<1567=1569,1568
<1570=1571
<1571=1579,1572
<1572=1576,1573
<1573=1575,1574
<1576=1578,1577
<1580=1581
<1581=1591,1582
<1582=1588,1583
<1583=1585,1584
<1585=1587,1586
<1588=1590,1589
<1592=1593
<1593=1601,1594
<1594=1598,1595
<1595=1597,1596
<1598=1600,1599
<1602=1603
<1603=1613,1604
<1604=1610,1605
<1605=1607,1606
<1607=1609,1608
<1610=1612,1611
<1614=1615
<1615=1627,1616
<1616=1624,1617
<1617=1621,1618
<1618=1620,1619
<1621=1623,1622
<1624=1626,1625
<1628=1629
<1629=1645,1630
<1630=1638,1631
<1631=1635,1632
<1632=1634,1633
<1635=1637,1636
<1638=1642,1639
<1639=1641,1640
<1642=1644,1643
<1646=1647
<1647=1659,1648
<1648=1656,1649
<1649=1653,1650
<1650=1652,1651
<1653=1655,1654
<1656=1658,1657
<1660=1661
<1661=1677,1662
<1662=1670,1663
<1663=1667,1664
<1664=1666,1665
<1667=1669,1668
<1670=1674,1671
<1671=1673,1672
<1674=1676,1675
<1678=1686,1679
<1679=1685,1680
<1680=1681
<1681=1683,1682
<1683=1684
<1686=1687
<1687=1689,1688
<1689=1693,1690
<1690=1692,1691
<1693=1695,1694
<1696=1774,1769,1697
<1697=1698
<1698=1699
<1699=1759,1730,1700
<1700=1701
<1701=1726,1722,1718,1714,1710,1706,1702
<1702=1703
<1703=1705,1704
<1706=1707
<1707=1709,1708
<1710=1711
<1711=1713,1712
<1714=1715
<1715=1717,1716
<1718=1719
<1719=1721,1720
<1722=1723
<1723=1725,1724
<1726=1727
<1727=1729,1728
<1730=1755,1751,1747,1743,1739,1735,1731
<1731=1732
<1732=1734,1733
<1735=1736
<1736=1738,1737
<1739=1740
<1740=1742,1741
<1743=1744
<1744=1746,1745
<1747=1748
<1748=1750,1749
<1751=1752
<1752=1754,1753
<1755=1756
<1756=1758,1757
<1759=1760
<1760=1762,1761
<1762=1766,1763
<1763=1765,1764
<1766=1768,1767
<1769=1770
<1770=1771
<1771=1773,1772
<1774=1775
<1775=1777,1776
<1777=1781,1778
<1778=1780,1779
<1781=1783,1782
<1784=1838,1785
<1785=1834,1830,1826,1822,1818,1814,1810,1806,1802,1798,1794,1790,1786
<1786=1787
<1787=1789,1788
<1790=1791
<1791=1793,1792
<1794=1795
<1795=1797,1796
<1798=1799
<1799=1801,1800
<1802=1803
<1803=1805,1804
<1806=1807
<1807=1809,1808
<1810=1811
<1811=1813,1812
<1814=1815
<1815=1817,1816
<1818=1819
<1819=1821,1820
<1822=1823
<1823=1825,1824
<1826=1827
<1827=1829,1828
<1830=1831
<1831=1833,1832
<1834=1835
<1835=1837,1836
<1838=1839
<1839=1841,1840
<1842=1896,1843
<1843=1892,1888,1884,1880,1876,1872,1868,1864,1860,1856,1852,1848,1844
<1844=1845
<1845=1847,1846
<1848=1849
<1849=1851,1850
<1852=1853
<1853=1855,1854
<1856=1857
<1857=1859,1858
<1860=1861
<1861=1863,1862
<1864=1865
<1865=1867,1866
<1868=1869
<1869=1871,1870
<1872=1873
<1873=1875,1874
<1876=1877
<1877=1879,1878
<1880=1881
<1881=1883,1882
<1884=1885
<1885=1887,1886
<1888=1889
<1889=1891,1890
<1892=1893
<1893=1895,1894
<1896=1897
<1897=1899,1898
<1900=1901
<1901=1907,1902
<1902=1904,1903
<1904=1906,1905
<1908=1909
<1909=1915,1910
<1910=1912,1911
<1912=1914,1913
<1916=1917
<1917=1930,1918
<1918=1920,1919
<1920=1927,1921
<1921=1925,1922
<1922=1923
<1923=1924
<1925=1926
<1927=1929,1928
<1931=1932
<1932=1938,1933
<1933=1935,1934
<1935=1937,1936
<1939=1940
<1940=1946,1941
<1941=1943,1942
<1943=1945,1944
<1947=1948
<1948=1961,1949
<1949=1951,1950
<1951=1958,1952
<1952=1956,1953
<1953=1954
<1954=1955
<1956=1957
<1958=1960,1959
<1962=1970,1963
<1963=1969,1964
<1964=1965
<1965=1967,1966
<1967=1968
<1970=1971
<1971=1973,1972
<1974=1975
<1975=1983,1976
<1976=1980,1977
<1977=1979,1978
<1980=1982,1981
<1984=1985
<1985=1995,1986
<1986=1992,1987
<1987=1989,1988
<1989=1991,1990
<1992=1994,1993
<1996=1997
<1997=2005,1998
<1998=2002,1999
<1999=2001,2000
<2002=2004,2003
<2006=2007
<2007=2017,2008
<2008=2014,2009
<2009=2011,2010
<2011=2013,2012
<2014=2016,2015
<2018=2019
<2019=2031,2020
<2020=2028,2021
<2021=2025,2022
<2022=2024,2023
<2025=2027,2026
<2028=2030,2029
<2032=2033
<2033=2049,2034
<2034=2042,2035
<2035=2039,2036
<2036=2038,2037
<2039=2041,2040
<2042=2046,2043
<2043=2045,2044
<2046=2048,2047
<2050=2051
<2051=2063,2052
<2052=2060,2053
<2053=2057,2054
<2054=2056,2055
<2057=2059,2058
<2060=2062,2061
<2064=2065
<2065=2081,2066
<2066=2074,2067
<2067=2071,2068
<2068=2070,2069
<2071=2073,2072
<2074=2078,2075
<2075=2077,2076
<2078=2080,2079
<2082=2089,2086,2083
<2083=2085,2084
<2086=2088,2087
<2089=2091,2090
<2092=2099,2096,2093
<2093=2095,2094
<2096=2098,2097
<2099=2101,2100
<2102=2109,2106,2103
<2103=2105,2104
<2106=2108,2107
<2109=2111,2110
<2112=2119,2116,2113
<2113=2115,2114
<2116=2118,2117
<2119=2121,2120
<2122=2132,2129,2126,2123
<2123=2125,2124
<2126=2128,2127
<2129=2131,2130
<2132=2134,2133
<2135=2145,2142,2139,2136
<2136=2138,2137
<2139=2141,2140
<2142=2144,2143
<2145=2147,2146
<2148=2156,2149
<2149=2155,2150
<2150=2151
<2151=2153,2152
<2153=2154
<2156=2157
<2157=2159,2158
<2159=2163,2160
<2160=2162,2161
<2163=2165,2164
<2166=2244,2239,2167
<2167=2168
<2168=2169
<2169=2229,2200,2170
<2170=2171
<2171=2196,2192,2188,2184,2180,2176,2172
<2172=2173
<2173=2175,2174
<2176=2177
<2177=2179,2178
<2180=2181
<2181=2183,2182
<2184=2185
<2185=2187,2186
<2188=2189
<2189=2191,2190
<2192=2193
<2193=2195,2194
<2196=2197
<2197=2199,2198
<2200=2225,2221,2217,2213,2209,2205,2201
<2201=2202
<2202=2204,2203
<2205=2206
<2206=2208,2207
<2209=2210
<2210=2212,2211
<2213=2214
<2214=2216,2215
<2217=2218
<2218=2220,2219
<2221=2222
<2222=2224,2223
<2225=2226
<2226=2228,2227
<2229=2230
<2230=2232,2231
<2232=2236,2233
<2233=2235,2234
<2236=2238,2237
<2239=2240
<2240=2241
<2241=2243,2242
<2244=2245
<2245=2247,2246
<2247=2251,2248
<2248=2250,2249
<2251=2253,2252
<2254=2255
<2255=2278,2277,2256
<2256=2276,2257
<2257=2259,2258
<2259=2268,2260
<2260=2266,2261
<2261=2262
<2262=2263
<2263=2265,2264
<2266=2267
<2268=2274,2269
<2269=2270
<2270=2271
<2271=2273,2272
<2274=2275
<2279=2287,2280
<2280=2281
<2281=2282
<2282=2286,2283
<2283=2285,2284
<2287=2288
<2288=2290,2289
<2291=2292
<2292=2307,2306,2293
<2293=2305,2294
<2294=2302,2295
<2295=2299,2296
<2296=2298,2297
<2299=2301,2300
<2302=2304,2303
<2308=2309
<2309=2311,2310
<2312=2313
<2313=2315,2314
<2316=2317
<2317=2319,2318
<2320=2328,2321
<2321=2327,2322
<2322=2323
<2323=2325,2324
<2325=2326
<2328=2329
<2329=2331,2330
<2332=2333
<2333=2350,2334
<2334=2348,2335
<2335=2336
<2336=2337
<2337=2345,2338
<2338=2342,2339
<2339=2341,2340
<2342=2344,2343
<2345=2347,2346
<2348=2349
<2351=2352
<2352=2363,2362,2353
<2353=2361,2354
<2354=2358,2355
<2355=2357,2356
<2358=2360,2359
<2364=2365
<2365=2376,2375,2366
<2366=2374,2367
<2367=2371,2368
<2368=2370,2369
<2371=2373,2372
<2377=2378
<2378=2389,2388,2379
<2379=2387,2380
<2380=2384,2381
<2381=2383,2382
<2384=2386,2385
<2390=2391
<2391=2398,2397,2392
<2392=2396,2393
<2393=2395,2394
<2399=2400
<2400=2407,2406,2401
<2401=2405,2402
<2402=2404,2403
<2408=2409
<2409=2416,2415,2410
<2410=2414,2411
<2411=2413,2412
<2417=2418
<2418=2425,2424,2419
<2419=2423,2420
<2420=2422,2421
<2426=2427
<2427=2434,2433,2428
<2428=2432,2429
<2429=2431,2430
<2435=2436
<2436=2443,2442,2437
<2437=2441,2438
<2438=2440,2439
<2444=2445
<2445=2447,2446
<2448=2449
<2449=2451,2450
