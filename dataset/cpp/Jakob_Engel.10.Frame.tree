>5	FunctionDef	Frame 
>6	ParameterList	int id , int width , int height , const Eigen 
>7	Parameter	 
>8	Identifier	image
>9	ParameterType	const unsigned char *
>10	Parameter	 
>11	Identifier	timestamp
>12	ParameterType	double
>13	Parameter	 
>14	Identifier	K
>15	ParameterType	const Eigen 
>16	Parameter	 
>17	Identifier	height
>18	ParameterType	int
>19	Parameter	 
>20	Identifier	width
>21	ParameterType	int
>22	Parameter	 
>23	Identifier	id
>24	ParameterType	int
>25	CompoundStatement	 
>26	IfStatement	if ( enablePrintDebugInfo && printMemoryDebugInfo )
>27	ExpressionStatement	 
>28	CallExpression	printf ( \"ALLOCATED frame %d, now there are %d\n\" , this -> id ( ) , privateFrameAllocCount )
>29	ArgumentList	\"ALLOCATED frame %d, now there are %d\n\"
>30	Argument	privateFrameAllocCount
>31	Identifier	privateFrameAllocCount
>32	Argument	this -> id ( )
>33	CallExpression	this -> id ( )
>34	ArgumentList	 
>35	Callee	this -> id
>36	PtrMemberAccess	this -> id
>37	Identifier	id
>38	Identifier	this
>39	Argument	\"ALLOCATED frame %d, now there are %d\n\"
>40	PrimaryExpression	\"ALLOCATED frame %d, now there are %d\n\"
>41	Callee	printf
>42	Identifier	printf
>43	Condition	 
>44	AndExpression	enablePrintDebugInfo && printMemoryDebugInfo
>45	Identifier	printMemoryDebugInfo
>46	Identifier	enablePrintDebugInfo
>47	ExpressionStatement	 
>48	IncDecOp	privateFrameAllocCount ++
>49	IncDec	++
>50	Identifier	privateFrameAllocCount
>51	ExpressionStatement	 
>52	AssignmentExpr	data . imageValid [ 0 ] = true
>53	Identifier	true
>54	ArrayIndexing	data . imageValid [ 0 ]
>55	PrimaryExpression	0
>56	MemberAccess	data . imageValid
>57	Identifier	imageValid
>58	Identifier	data
>59	ForStatement	for ( float * pt = data . image [ 0 ] ; pt < maxPt ; pt ++ )
>60	CompoundStatement	 
>61	ExpressionStatement	 
>62	IncDecOp	image ++
>63	IncDec	++
>64	Identifier	image
>65	ExpressionStatement	 
>66	AssignmentExpr	* pt = * image
>67	UnaryOp	* image
>68	Identifier	image
>69	UnaryOperator	*
>70	UnaryOp	* pt
>71	Identifier	pt
>72	UnaryOperator	*
>73	IncDecOp	 
>74	IncDec	++
>75	Identifier	pt
>76	Condition	 
>77	RelationalExpression	pt < maxPt
>78	Identifier	maxPt
>79	Identifier	pt
>80	ForInit	 
>81	IdentifierDeclStatement	float * pt = data . image [ 0 ] ;
>82	IdentifierDecl	* pt = data . image [ 0 ]
>83	AssignmentExpr	* pt = data . image [ 0 ]
>84	ArrayIndexing	data . image [ 0 ]
>85	PrimaryExpression	0
>86	MemberAccess	data . image
>87	Identifier	image
>88	Identifier	data
>89	Identifier	pt
>90	Identifier	pt
>91	IdentifierDeclType	float *
>92	IdentifierDeclStatement	 
>93	IdentifierDecl	* maxPt = data . image [ 0 ] + data . width [ 0 ] * data . height [ 0 ]
>94	AssignmentExpr	* maxPt = data . image [ 0 ] + data . width [ 0 ] * data . height [ 0 ]
>95	AdditiveExpression	data . image [ 0 ] + data . width [ 0 ] * data . height [ 0 ]
>96	MultiplicativeExpression	data . width [ 0 ] * data . height [ 0 ]
>97	ArrayIndexing	data . height [ 0 ]
>98	PrimaryExpression	0
>99	MemberAccess	data . height
>100	Identifier	height
>101	Identifier	data
>102	ArrayIndexing	data . width [ 0 ]
>103	PrimaryExpression	0
>104	MemberAccess	data . width
>105	Identifier	width
>106	Identifier	data
>107	ArrayIndexing	data . image [ 0 ]
>108	PrimaryExpression	0
>109	MemberAccess	data . image
>110	Identifier	image
>111	Identifier	data
>112	Identifier	maxPt
>113	Identifier	maxPt
>114	IdentifierDeclType	float *
>115	ExpressionStatement	 
>116	AssignmentExpr	data . image [ 0 ] = FrameMemory 
>117	CallExpression	FrameMemory 
>118	ArgumentList	data . width [ 0 ] * data . height [ 0 ]
>119	Argument	data . width [ 0 ] * data . height [ 0 ]
>120	MultiplicativeExpression	data . width [ 0 ] * data . height [ 0 ]
>121	ArrayIndexing	data . height [ 0 ]
>122	PrimaryExpression	0
>123	MemberAccess	data . height
>124	Identifier	height
>125	Identifier	data
>126	ArrayIndexing	data . width [ 0 ]
>127	PrimaryExpression	0
>128	MemberAccess	data . width
>129	Identifier	width
>130	Identifier	data
>131	Callee	FrameMemory 
>132	MemberAccess	FrameMemory 
>133	Identifier	getFloatBuffer
>134	CallExpression	FrameMemory 
>135	ArgumentList	 
>136	Callee	FrameMemory 
>137	Identifier	FrameMemory 
>138	ArrayIndexing	data . image [ 0 ]
>139	PrimaryExpression	0
>140	MemberAccess	data . image
>141	Identifier	image
>142	Identifier	data
>143	ExpressionStatement	 
>144	CallExpression	initialize ( id , width , height , K , timestamp )
>145	ArgumentList	id
>146	Argument	timestamp
>147	Identifier	timestamp
>148	Argument	K
>149	Identifier	K
>150	Argument	height
>151	Identifier	height
>152	Argument	width
>153	Identifier	width
>154	Argument	id
>155	Identifier	id
>156	Callee	initialize
>157	Identifier	initialize
>190	FunctionDef	Frame 
>191	ParameterList	int id , int width , int height , const Eigen 
>192	Parameter	 
>193	Identifier	image
>194	ParameterType	const float *
>195	Parameter	 
>196	Identifier	timestamp
>197	ParameterType	double
>198	Parameter	 
>199	Identifier	K
>200	ParameterType	const Eigen 
>201	Parameter	 
>202	Identifier	height
>203	ParameterType	int
>204	Parameter	 
>205	Identifier	width
>206	ParameterType	int
>207	Parameter	 
>208	Identifier	id
>209	ParameterType	int
>210	CompoundStatement	 
>211	IfStatement	if ( enablePrintDebugInfo && printMemoryDebugInfo )
>212	ExpressionStatement	 
>213	CallExpression	printf ( \"ALLOCATED frame %d, now there are %d\n\" , this -> id ( ) , privateFrameAllocCount )
>214	ArgumentList	\"ALLOCATED frame %d, now there are %d\n\"
>215	Argument	privateFrameAllocCount
>216	Identifier	privateFrameAllocCount
>217	Argument	this -> id ( )
>218	CallExpression	this -> id ( )
>219	ArgumentList	 
>220	Callee	this -> id
>221	PtrMemberAccess	this -> id
>222	Identifier	id
>223	Identifier	this
>224	Argument	\"ALLOCATED frame %d, now there are %d\n\"
>225	PrimaryExpression	\"ALLOCATED frame %d, now there are %d\n\"
>226	Callee	printf
>227	Identifier	printf
>228	Condition	 
>229	AndExpression	enablePrintDebugInfo && printMemoryDebugInfo
>230	Identifier	printMemoryDebugInfo
>231	Identifier	enablePrintDebugInfo
>232	ExpressionStatement	 
>233	IncDecOp	privateFrameAllocCount ++
>234	IncDec	++
>235	Identifier	privateFrameAllocCount
>236	ExpressionStatement	 
>237	AssignmentExpr	data . imageValid [ 0 ] = true
>238	Identifier	true
>239	ArrayIndexing	data . imageValid [ 0 ]
>240	PrimaryExpression	0
>241	MemberAccess	data . imageValid
>242	Identifier	imageValid
>243	Identifier	data
>244	ExpressionStatement	 
>245	CallExpression	memcpy ( data . image [ 0 ] , image , data . width [ 0 ] * data . height [ 0 ] * sizeof ( float ) )
>246	ArgumentList	data . image [ 0 ]
>247	Argument	data . width [ 0 ] * data . height [ 0 ] * sizeof ( float )
>248	MultiplicativeExpression	data . width [ 0 ] * data . height [ 0 ] * sizeof ( float )
>249	MultiplicativeExpression	data . height [ 0 ] * sizeof ( float )
>250	SizeofExpr	sizeof ( float )
>251	SizeofOperand	float
>252	Sizeof	sizeof
>253	ArrayIndexing	data . height [ 0 ]
>254	PrimaryExpression	0
>255	MemberAccess	data . height
>256	Identifier	height
>257	Identifier	data
>258	ArrayIndexing	data . width [ 0 ]
>259	PrimaryExpression	0
>260	MemberAccess	data . width
>261	Identifier	width
>262	Identifier	data
>263	Argument	image
>264	Identifier	image
>265	Argument	data . image [ 0 ]
>266	ArrayIndexing	data . image [ 0 ]
>267	PrimaryExpression	0
>268	MemberAccess	data . image
>269	Identifier	image
>270	Identifier	data
>271	Callee	memcpy
>272	Identifier	memcpy
>273	ExpressionStatement	 
>274	AssignmentExpr	data . image [ 0 ] = FrameMemory 
>275	CallExpression	FrameMemory 
>276	ArgumentList	data . width [ 0 ] * data . height [ 0 ]
>277	Argument	data . width [ 0 ] * data . height [ 0 ]
>278	MultiplicativeExpression	data . width [ 0 ] * data . height [ 0 ]
>279	ArrayIndexing	data . height [ 0 ]
>280	PrimaryExpression	0
>281	MemberAccess	data . height
>282	Identifier	height
>283	Identifier	data
>284	ArrayIndexing	data . width [ 0 ]
>285	PrimaryExpression	0
>286	MemberAccess	data . width
>287	Identifier	width
>288	Identifier	data
>289	Callee	FrameMemory 
>290	MemberAccess	FrameMemory 
>291	Identifier	getFloatBuffer
>292	CallExpression	FrameMemory 
>293	ArgumentList	 
>294	Callee	FrameMemory 
>295	Identifier	FrameMemory 
>296	ArrayIndexing	data . image [ 0 ]
>297	PrimaryExpression	0
>298	MemberAccess	data . image
>299	Identifier	image
>300	Identifier	data
>301	ExpressionStatement	 
>302	CallExpression	initialize ( id , width , height , K , timestamp )
>303	ArgumentList	id
>304	Argument	timestamp
>305	Identifier	timestamp
>306	Argument	K
>307	Identifier	K
>308	Argument	height
>309	Identifier	height
>310	Argument	width
>311	Identifier	width
>312	Argument	id
>313	Identifier	id
>314	Callee	initialize
>315	Identifier	initialize
>344	FunctionDef	Frame 
>345	ParameterList	 
>346	CompoundStatement	 
>347	IfStatement	if ( enablePrintDebugInfo && printMemoryDebugInfo )
>348	ExpressionStatement	 
>349	CallExpression	printf ( \"DELETED frame %d, now there are %d\n\" , this -> id ( ) , privateFrameAllocCount )
>350	ArgumentList	\"DELETED frame %d, now there are %d\n\"
>351	Argument	privateFrameAllocCount
>352	Identifier	privateFrameAllocCount
>353	Argument	this -> id ( )
>354	CallExpression	this -> id ( )
>355	ArgumentList	 
>356	Callee	this -> id
>357	PtrMemberAccess	this -> id
>358	Identifier	id
>359	Identifier	this
>360	Argument	\"DELETED frame %d, now there are %d\n\"
>361	PrimaryExpression	\"DELETED frame %d, now there are %d\n\"
>362	Callee	printf
>363	Identifier	printf
>364	Condition	 
>365	AndExpression	enablePrintDebugInfo && printMemoryDebugInfo
>366	Identifier	printMemoryDebugInfo
>367	Identifier	enablePrintDebugInfo
>368	ExpressionStatement	 
>369	IncDecOp	privateFrameAllocCount --
>370	IncDec	--
>371	Identifier	privateFrameAllocCount
>372	ExpressionStatement	 
>373	Identifier	permaRef_posData
>374	IfStatement	if ( permaRef_posData != 0 )
>375	Statement	 
>376	Condition	 
>377	EqualityExpression	permaRef_posData != 0
>378	PrimaryExpression	0
>379	Identifier	permaRef_posData
>380	ExpressionStatement	 
>381	Identifier	permaRef_colorAndVarData
>382	IfStatement	if ( permaRef_colorAndVarData != 0 )
>383	Statement	 
>384	Condition	 
>385	EqualityExpression	permaRef_colorAndVarData != 0
>386	PrimaryExpression	0
>387	Identifier	permaRef_colorAndVarData
>388	ExpressionStatement	 
>389	CallExpression	FrameMemory 
>390	ArgumentList	data . idepthVar_reAct
>391	Argument	data . idepthVar_reAct
>392	MemberAccess	data . idepthVar_reAct
>393	Identifier	idepthVar_reAct
>394	Identifier	data
>395	Callee	FrameMemory 
>396	MemberAccess	FrameMemory 
>397	Identifier	returnBuffer
>398	CallExpression	FrameMemory 
>399	ArgumentList	 
>400	Callee	FrameMemory 
>401	Identifier	FrameMemory 
>402	ExpressionStatement	 
>403	CallExpression	FrameMemory 
>404	ArgumentList	data . idepth_reAct
>405	Argument	data . idepth_reAct
>406	MemberAccess	data . idepth_reAct
>407	Identifier	idepth_reAct
>408	Identifier	data
>409	Callee	FrameMemory 
>410	MemberAccess	FrameMemory 
>411	Identifier	returnBuffer
>412	CallExpression	FrameMemory 
>413	ArgumentList	 
>414	Callee	FrameMemory 
>415	Identifier	FrameMemory 
>416	ExpressionStatement	 
>417	CallExpression	FrameMemory 
>418	ArgumentList	( float * ) data . validity_reAct
>419	Argument	( float * ) data . validity_reAct
>420	CastExpression	( float * ) data . validity_reAct
>421	MemberAccess	data . validity_reAct
>422	Identifier	validity_reAct
>423	Identifier	data
>424	CastTarget	float *
>425	Callee	FrameMemory 
>426	MemberAccess	FrameMemory 
>427	Identifier	returnBuffer
>428	CallExpression	FrameMemory 
>429	ArgumentList	 
>430	Callee	FrameMemory 
>431	Identifier	FrameMemory 
>432	ForStatement	for ( int level = 0 ; level < PYRAMID_LEVELS ; ++ level )
>433	CompoundStatement	 
>434	ExpressionStatement	 
>435	CallExpression	FrameMemory 
>436	ArgumentList	data . idepthVar [ level ]
>437	Argument	data . idepthVar [ level ]
>438	ArrayIndexing	data . idepthVar [ level ]
>439	Identifier	level
>440	MemberAccess	data . idepthVar
>441	Identifier	idepthVar
>442	Identifier	data
>443	Callee	FrameMemory 
>444	MemberAccess	FrameMemory 
>445	Identifier	returnBuffer
>446	CallExpression	FrameMemory 
>447	ArgumentList	 
>448	Callee	FrameMemory 
>449	Identifier	FrameMemory 
>450	ExpressionStatement	 
>451	CallExpression	FrameMemory 
>452	ArgumentList	data . idepth [ level ]
>453	Argument	data . idepth [ level ]
>454	ArrayIndexing	data . idepth [ level ]
>455	Identifier	level
>456	MemberAccess	data . idepth
>457	Identifier	idepth
>458	Identifier	data
>459	Callee	FrameMemory 
>460	MemberAccess	FrameMemory 
>461	Identifier	returnBuffer
>462	CallExpression	FrameMemory 
>463	ArgumentList	 
>464	Callee	FrameMemory 
>465	Identifier	FrameMemory 
>466	ExpressionStatement	 
>467	CallExpression	FrameMemory 
>468	ArgumentList	data . maxGradients [ level ]
>469	Argument	data . maxGradients [ level ]
>470	ArrayIndexing	data . maxGradients [ level ]
>471	Identifier	level
>472	MemberAccess	data . maxGradients
>473	Identifier	maxGradients
>474	Identifier	data
>475	Callee	FrameMemory 
>476	MemberAccess	FrameMemory 
>477	Identifier	returnBuffer
>478	CallExpression	FrameMemory 
>479	ArgumentList	 
>480	Callee	FrameMemory 
>481	Identifier	FrameMemory 
>482	ExpressionStatement	 
>483	Statement	 
>484	Statement	 
>485	Statement	 
>486	Statement	 
>487	Statement	 
>488	Statement	 
>489	Statement	 
>490	Statement	 
>491	Statement	 
>492	Statement	 
>493	Statement	 
>494	Statement	 
>495	Statement	 
>496	Statement	 
>497	Statement	 
>498	Statement	 
>499	Statement	 
>500	Statement	 
>501	Statement	 
>502	Statement	 
>503	Statement	 
>504	Statement	 
>505	ExpressionStatement	 
>506	CallExpression	FrameMemory 
>507	ArgumentList	data . image [ level ]
>508	Argument	data . image [ level ]
>509	ArrayIndexing	data . image [ level ]
>510	Identifier	level
>511	MemberAccess	data . image
>512	Identifier	image
>513	Identifier	data
>514	Callee	FrameMemory 
>515	MemberAccess	FrameMemory 
>516	Identifier	returnBuffer
>517	CallExpression	FrameMemory 
>518	ArgumentList	 
>519	Callee	FrameMemory 
>520	Identifier	FrameMemory 
>521	UnaryExpression	 
>522	Identifier	level
>523	IncDec	++
>524	Condition	 
>525	RelationalExpression	level < PYRAMID_LEVELS
>526	Identifier	PYRAMID_LEVELS
>527	Identifier	level
>528	ForInit	 
>529	IdentifierDeclStatement	int level = 0 ;
>530	IdentifierDecl	level = 0
>531	AssignmentExpr	level = 0
>532	PrimaryExpression	0
>533	Identifier	level
>534	Identifier	level
>535	IdentifierDeclType	int
>536	ExpressionStatement	 
>537	Identifier	pose
>538	IfStatement	if ( ! pose -> isRegisteredToGraph )
>539	ElseStatement	else
>540	ExpressionStatement	 
>541	AssignmentExpr	pose -> frame = 0
>542	PrimaryExpression	0
>543	PtrMemberAccess	pose -> frame
>544	Identifier	frame
>545	Identifier	pose
>546	Statement	 
>547	Condition	 
>548	UnaryOp	! pose -> isRegisteredToGraph
>549	PtrMemberAccess	pose -> isRegisteredToGraph
>550	Identifier	isRegisteredToGraph
>551	Identifier	pose
>552	UnaryOperator	!
>553	ExpressionStatement	 
>554	CallExpression	FrameMemory 
>555	ArgumentList	this
>556	Argument	this
>557	Identifier	this
>558	Callee	FrameMemory 
>559	MemberAccess	FrameMemory 
>560	Identifier	deactivateFrame
>561	CallExpression	FrameMemory 
>562	ArgumentList	 
>563	Callee	FrameMemory 
>564	Identifier	FrameMemory 
>565	IfStatement	if ( enablePrintDebugInfo && printMemoryDebugInfo )
>566	ExpressionStatement	 
>567	CallExpression	printf ( \"DELETING frame %d\n\" , this -> id ( ) )
>568	ArgumentList	\"DELETING frame %d\n\"
>569	Argument	this -> id ( )
>570	CallExpression	this -> id ( )
>571	ArgumentList	 
>572	Callee	this -> id
>573	PtrMemberAccess	this -> id
>574	Identifier	id
>575	Identifier	this
>576	Argument	\"DELETING frame %d\n\"
>577	PrimaryExpression	\"DELETING frame %d\n\"
>578	Callee	printf
>579	Identifier	printf
>580	Condition	 
>581	AndExpression	enablePrintDebugInfo && printMemoryDebugInfo
>582	Identifier	printMemoryDebugInfo
>583	Identifier	enablePrintDebugInfo
>616	FunctionDef	Frame 
>617	ParameterList	DepthMapPixelHypothesis * depthMap
>618	Parameter	 
>619	Identifier	depthMap
>620	ParameterType	DepthMapPixelHypothesis *
>621	ReturnType	void
>622	CompoundStatement	 
>623	ExpressionStatement	 
>624	AssignmentExpr	data . reActivationDataValid = true
>625	Identifier	true
>626	MemberAccess	data . reActivationDataValid
>627	Identifier	reActivationDataValid
>628	Identifier	data
>629	ForStatement	for ( ; id_pt < id_pt_max ; ++ id_pt , ++ idv_pt , ++ val_pt , ++ depthMap )
>630	CompoundStatement	 
>631	IfStatement	if ( depthMap -> isValid )
>632	ElseStatement	else
>633	IfStatement	if ( depthMap -> blacklisted < MIN_BLACKLIST )
>634	ElseStatement	else
>635	CompoundStatement	 
>636	ExpressionStatement	 
>637	AssignmentExpr	* idv_pt = - 1
>638	UnaryOp	- 1
>639	PrimaryExpression	1
>640	UnaryOperator	-
>641	UnaryOp	* idv_pt
>642	Identifier	idv_pt
>643	UnaryOperator	*
>644	CompoundStatement	 
>645	ExpressionStatement	 
>646	AssignmentExpr	* idv_pt = - 2
>647	UnaryOp	- 2
>648	PrimaryExpression	2
>649	UnaryOperator	-
>650	UnaryOp	* idv_pt
>651	Identifier	idv_pt
>652	UnaryOperator	*
>653	Condition	 
>654	RelationalExpression	depthMap -> blacklisted < MIN_BLACKLIST
>655	Identifier	MIN_BLACKLIST
>656	PtrMemberAccess	depthMap -> blacklisted
>657	Identifier	blacklisted
>658	Identifier	depthMap
>659	CompoundStatement	 
>660	ExpressionStatement	 
>661	AssignmentExpr	* val_pt = depthMap -> validity_counter
>662	PtrMemberAccess	depthMap -> validity_counter
>663	Identifier	validity_counter
>664	Identifier	depthMap
>665	UnaryOp	* val_pt
>666	Identifier	val_pt
>667	UnaryOperator	*
>668	ExpressionStatement	 
>669	AssignmentExpr	* idv_pt = depthMap -> idepth_var
>670	PtrMemberAccess	depthMap -> idepth_var
>671	Identifier	idepth_var
>672	Identifier	depthMap
>673	UnaryOp	* idv_pt
>674	Identifier	idv_pt
>675	UnaryOperator	*
>676	ExpressionStatement	 
>677	AssignmentExpr	* id_pt = depthMap -> idepth
>678	PtrMemberAccess	depthMap -> idepth
>679	Identifier	idepth
>680	Identifier	depthMap
>681	UnaryOp	* id_pt
>682	Identifier	id_pt
>683	UnaryOperator	*
>684	Condition	 
>685	PtrMemberAccess	depthMap -> isValid
>686	Identifier	isValid
>687	Identifier	depthMap
>688	Expression	 
>689	Expression	++ idv_pt , ++ val_pt , ++ depthMap
>690	Expression	++ val_pt , ++ depthMap
>691	UnaryExpression	++ depthMap
>692	Identifier	depthMap
>693	IncDec	++
>694	UnaryExpression	++ val_pt
>695	Identifier	val_pt
>696	IncDec	++
>697	UnaryExpression	++ idv_pt
>698	Identifier	idv_pt
>699	IncDec	++
>700	UnaryExpression	++ id_pt
>701	Identifier	id_pt
>702	IncDec	++
>703	Condition	 
>704	RelationalExpression	id_pt < id_pt_max
>705	Identifier	id_pt_max
>706	Identifier	id_pt
>707	IdentifierDeclStatement	 
>708	IdentifierDecl	* val_pt = data . validity_reAct
>709	AssignmentExpr	* val_pt = data . validity_reAct
>710	MemberAccess	data . validity_reAct
>711	Identifier	validity_reAct
>712	Identifier	data
>713	Identifier	val_pt
>714	Identifier	val_pt
>715	IdentifierDeclType	unsigned char *
>716	IdentifierDeclStatement	 
>717	IdentifierDecl	* idv_pt = data . idepthVar_reAct
>718	AssignmentExpr	* idv_pt = data . idepthVar_reAct
>719	MemberAccess	data . idepthVar_reAct
>720	Identifier	idepthVar_reAct
>721	Identifier	data
>722	Identifier	idv_pt
>723	Identifier	idv_pt
>724	IdentifierDeclType	float *
>725	IdentifierDeclStatement	 
>726	IdentifierDecl	* id_pt_max = data . idepth_reAct + ( data . width [ 0 ] * data . height [ 0 ] )
>727	AssignmentExpr	* id_pt_max = data . idepth_reAct + ( data . width [ 0 ] * data . height [ 0 ] )
>728	AdditiveExpression	data . idepth_reAct + ( data . width [ 0 ] * data . height [ 0 ] )
>729	MultiplicativeExpression	data . width [ 0 ] * data . height [ 0 ]
>730	ArrayIndexing	data . height [ 0 ]
>731	PrimaryExpression	0
>732	MemberAccess	data . height
>733	Identifier	height
>734	Identifier	data
>735	ArrayIndexing	data . width [ 0 ]
>736	PrimaryExpression	0
>737	MemberAccess	data . width
>738	Identifier	width
>739	Identifier	data
>740	MemberAccess	data . idepth_reAct
>741	Identifier	idepth_reAct
>742	Identifier	data
>743	Identifier	id_pt_max
>744	Identifier	id_pt_max
>745	IdentifierDeclType	float *
>746	IdentifierDeclStatement	 
>747	IdentifierDecl	* id_pt = data . idepth_reAct
>748	AssignmentExpr	* id_pt = data . idepth_reAct
>749	MemberAccess	data . idepth_reAct
>750	Identifier	idepth_reAct
>751	Identifier	data
>752	Identifier	id_pt
>753	Identifier	id_pt
>754	IdentifierDeclType	float *
>755	IfStatement	if ( data . idepthVar_reAct == 0 )
>756	ExpressionStatement	 
>757	AssignmentExpr	data . idepthVar_reAct = FrameMemory 
>758	CallExpression	FrameMemory 
>759	ArgumentList	data . width [ 0 ] * data . height [ 0 ]
>760	Argument	data . width [ 0 ] * data . height [ 0 ]
>761	MultiplicativeExpression	data . width [ 0 ] * data . height [ 0 ]
>762	ArrayIndexing	data . height [ 0 ]
>763	PrimaryExpression	0
>764	MemberAccess	data . height
>765	Identifier	height
>766	Identifier	data
>767	ArrayIndexing	data . width [ 0 ]
>768	PrimaryExpression	0
>769	MemberAccess	data . width
>770	Identifier	width
>771	Identifier	data
>772	Callee	FrameMemory 
>773	MemberAccess	FrameMemory 
>774	Identifier	getFloatBuffer
>775	CallExpression	FrameMemory 
>776	ArgumentList	 
>777	Callee	FrameMemory 
>778	Identifier	FrameMemory 
>779	MemberAccess	data . idepthVar_reAct
>780	Identifier	idepthVar_reAct
>781	Identifier	data
>782	Condition	 
>783	EqualityExpression	data . idepthVar_reAct == 0
>784	PrimaryExpression	0
>785	MemberAccess	data . idepthVar_reAct
>786	Identifier	idepthVar_reAct
>787	Identifier	data
>788	IfStatement	if ( data . idepth_reAct == 0 )
>789	ExpressionStatement	 
>790	AssignmentExpr	data . idepth_reAct = FrameMemory 
>791	CallExpression	FrameMemory 
>792	ArgumentList	data . width [ 0 ] * data . height [ 0 ]
>793	Argument	data . width [ 0 ] * data . height [ 0 ]
>794	MultiplicativeExpression	data . width [ 0 ] * data . height [ 0 ]
>795	ArrayIndexing	data . height [ 0 ]
>796	PrimaryExpression	0
>797	MemberAccess	data . height
>798	Identifier	height
>799	Identifier	data
>800	ArrayIndexing	data . width [ 0 ]
>801	PrimaryExpression	0
>802	MemberAccess	data . width
>803	Identifier	width
>804	Identifier	data
>805	Callee	FrameMemory 
>806	MemberAccess	FrameMemory 
>807	Identifier	getFloatBuffer
>808	CallExpression	FrameMemory 
>809	ArgumentList	 
>810	Callee	FrameMemory 
>811	Identifier	FrameMemory 
>812	MemberAccess	data . idepth_reAct
>813	Identifier	idepth_reAct
>814	Identifier	data
>815	Condition	 
>816	EqualityExpression	data . idepth_reAct == 0
>817	PrimaryExpression	0
>818	MemberAccess	data . idepth_reAct
>819	Identifier	idepth_reAct
>820	Identifier	data
>821	IfStatement	if ( data . validity_reAct == 0 )
>822	ExpressionStatement	 
>823	AssignmentExpr	data . validity_reAct = ( unsigned char * ) FrameMemory 
>824	CastExpression	( unsigned char * ) FrameMemory 
>825	CallExpression	FrameMemory 
>826	ArgumentList	data . width [ 0 ] * data . height [ 0 ]
>827	Argument	data . width [ 0 ] * data . height [ 0 ]
>828	MultiplicativeExpression	data . width [ 0 ] * data . height [ 0 ]
>829	ArrayIndexing	data . height [ 0 ]
>830	PrimaryExpression	0
>831	MemberAccess	data . height
>832	Identifier	height
>833	Identifier	data
>834	ArrayIndexing	data . width [ 0 ]
>835	PrimaryExpression	0
>836	MemberAccess	data . width
>837	Identifier	width
>838	Identifier	data
>839	Callee	FrameMemory 
>840	MemberAccess	FrameMemory 
>841	Identifier	getBuffer
>842	CallExpression	FrameMemory 
>843	ArgumentList	 
>844	Callee	FrameMemory 
>845	Identifier	FrameMemory 
>846	CastTarget	unsigned char *
>847	MemberAccess	data . validity_reAct
>848	Identifier	validity_reAct
>849	Identifier	data
>850	Condition	 
>851	EqualityExpression	data . validity_reAct == 0
>852	PrimaryExpression	0
>853	MemberAccess	data . validity_reAct
>854	Identifier	validity_reAct
>855	Identifier	data
>856	IdentifierDeclStatement	 
>857	IdentifierDecl	lock = getActiveLock ( )
>858	AssignmentExpr	lock = getActiveLock ( )
>859	CallExpression	getActiveLock ( )
>860	ArgumentList	 
>861	Callee	getActiveLock
>862	Identifier	getActiveLock
>863	Identifier	lock
>864	Identifier	lock
>865	IdentifierDeclType	boost 
>900	FunctionDef	Frame 
>901	ParameterList	TrackingReference * reference
>902	Parameter	 
>903	Identifier	reference
>904	ParameterType	TrackingReference *
>905	ReturnType	void
>906	CompoundStatement	 
>907	ExpressionStatement	 
>908	CallExpression	permaRef_mutex . unlock ( )
>909	ArgumentList	 
>910	Callee	permaRef_mutex . unlock
>911	MemberAccess	permaRef_mutex . unlock
>912	Identifier	unlock
>913	Identifier	permaRef_mutex
>914	ExpressionStatement	 
>915	CallExpression	memcpy ( permaRef_posData , reference -> posData [ QUICK_KF_CHECK_LVL ] , sizeof ( Eigen 
>916	ArgumentList	permaRef_posData
>917	Argument	sizeof ( Eigen 
>918	MultiplicativeExpression	sizeof ( Eigen 
>919	Identifier	permaRefNumPts
>920	SizeofExpr	sizeof ( Eigen 
>921	SizeofOperand	Eigen 
>922	Sizeof	sizeof
>923	Argument	reference -> posData [ QUICK_KF_CHECK_LVL ]
>924	ArrayIndexing	reference -> posData [ QUICK_KF_CHECK_LVL ]
>925	Identifier	QUICK_KF_CHECK_LVL
>926	PtrMemberAccess	reference -> posData
>927	Identifier	posData
>928	Identifier	reference
>929	Argument	permaRef_posData
>930	Identifier	permaRef_posData
>931	Callee	memcpy
>932	Identifier	memcpy
>933	ExpressionStatement	 
>934	CallExpression	memcpy ( permaRef_colorAndVarData , reference -> colorAndVarData [ QUICK_KF_CHECK_LVL ] , sizeof ( Eigen 
>935	ArgumentList	permaRef_colorAndVarData
>936	Argument	sizeof ( Eigen 
>937	MultiplicativeExpression	sizeof ( Eigen 
>938	Identifier	permaRefNumPts
>939	SizeofExpr	sizeof ( Eigen 
>940	SizeofOperand	Eigen 
>941	Sizeof	sizeof
>942	Argument	reference -> colorAndVarData [ QUICK_KF_CHECK_LVL ]
>943	ArrayIndexing	reference -> colorAndVarData [ QUICK_KF_CHECK_LVL ]
>944	Identifier	QUICK_KF_CHECK_LVL
>945	PtrMemberAccess	reference -> colorAndVarData
>946	Identifier	colorAndVarData
>947	Identifier	reference
>948	Argument	permaRef_colorAndVarData
>949	Identifier	permaRef_colorAndVarData
>950	Callee	memcpy
>951	Identifier	memcpy
>952	ExpressionStatement	 
>953	AssignmentExpr	permaRef_posData = new Eigen 
>954	Identifier	permaRefNumPts
>955	Identifier	permaRef_posData
>956	ExpressionStatement	 
>957	AssignmentExpr	permaRef_colorAndVarData = new Eigen 
>958	Identifier	permaRefNumPts
>959	Identifier	permaRef_colorAndVarData
>960	ExpressionStatement	 
>961	AssignmentExpr	permaRefNumPts = reference -> numData [ QUICK_KF_CHECK_LVL ]
>962	ArrayIndexing	reference -> numData [ QUICK_KF_CHECK_LVL ]
>963	Identifier	QUICK_KF_CHECK_LVL
>964	PtrMemberAccess	reference -> numData
>965	Identifier	numData
>966	Identifier	reference
>967	Identifier	permaRefNumPts
>968	ExpressionStatement	 
>969	Identifier	permaRef_posData
>970	IfStatement	if ( permaRef_posData != 0 )
>971	Statement	 
>972	Condition	 
>973	EqualityExpression	permaRef_posData != 0
>974	PrimaryExpression	0
>975	Identifier	permaRef_posData
>976	ExpressionStatement	 
>977	Identifier	permaRef_colorAndVarData
>978	IfStatement	if ( permaRef_colorAndVarData != 0 )
>979	Statement	 
>980	Condition	 
>981	EqualityExpression	permaRef_colorAndVarData != 0
>982	PrimaryExpression	0
>983	Identifier	permaRef_colorAndVarData
>984	ExpressionStatement	 
>985	CallExpression	permaRef_mutex . lock ( )
>986	ArgumentList	 
>987	Callee	permaRef_mutex . lock
>988	MemberAccess	permaRef_mutex . lock
>989	Identifier	lock
>990	Identifier	permaRef_mutex
>991	ExpressionStatement	 
>992	CallExpression	reference -> makePointCloud ( QUICK_KF_CHECK_LVL )
>993	ArgumentList	QUICK_KF_CHECK_LVL
>994	Argument	QUICK_KF_CHECK_LVL
>995	Identifier	QUICK_KF_CHECK_LVL
>996	Callee	reference -> makePointCloud
>997	PtrMemberAccess	reference -> makePointCloud
>998	Identifier	makePointCloud
>999	Identifier	reference
>1000	ExpressionStatement	 
>1001	CallExpression	assert ( reference -> frameID == id ( ) )
>1002	ArgumentList	reference -> frameID == id ( )
>1003	Argument	reference -> frameID == id ( )
>1004	EqualityExpression	reference -> frameID == id ( )
>1005	CallExpression	id ( )
>1006	ArgumentList	 
>1007	Callee	id
>1008	Identifier	id
>1009	PtrMemberAccess	reference -> frameID
>1010	Identifier	frameID
>1011	Identifier	reference
>1012	Callee	assert
>1013	Identifier	assert
>1034	FunctionDef	Frame 
>1035	ParameterList	 
>1036	ReturnType	void
>1037	CompoundStatement	 
>1038	ExpressionStatement	 
>1039	AssignmentExpr	meanInformation = sum / goodpx
>1040	MultiplicativeExpression	sum / goodpx
>1041	Identifier	goodpx
>1042	Identifier	sum
>1043	Identifier	meanInformation
>1044	ForStatement	for ( const float * pt = idv ; pt < idv_max ; pt ++ )
>1045	CompoundStatement	 
>1046	IfStatement	if ( * pt > 0 )
>1047	CompoundStatement	 
>1048	ExpressionStatement	 
>1049	IncDecOp	goodpx ++
>1050	IncDec	++
>1051	Identifier	goodpx
>1052	ExpressionStatement	 
>1053	AssignmentExpr	sum += sqrtf ( 1.0f / * pt )
>1054	CallExpression	sqrtf ( 1.0f / * pt )
>1055	ArgumentList	1.0f / * pt
>1056	Argument	1.0f / * pt
>1057	MultiplicativeExpression	1.0f / * pt
>1058	UnaryOp	* pt
>1059	Identifier	pt
>1060	UnaryOperator	*
>1061	PrimaryExpression	1.0f
>1062	Callee	sqrtf
>1063	Identifier	sqrtf
>1064	Identifier	sum
>1065	Condition	 
>1066	RelationalExpression	* pt > 0
>1067	PrimaryExpression	0
>1068	UnaryOp	* pt
>1069	Identifier	pt
>1070	UnaryOperator	*
>1071	IncDecOp	 
>1072	IncDec	++
>1073	Identifier	pt
>1074	Condition	 
>1075	RelationalExpression	pt < idv_max
>1076	Identifier	idv_max
>1077	Identifier	pt
>1078	ForInit	 
>1079	IdentifierDeclStatement	const float * pt = idv ;
>1080	IdentifierDecl	* pt = idv
>1081	AssignmentExpr	* pt = idv
>1082	Identifier	idv
>1083	Identifier	idv
>1084	Identifier	pt
>1085	IdentifierDeclType	const float *
>1086	IdentifierDeclStatement	 
>1087	IdentifierDecl	goodpx = 0
>1088	AssignmentExpr	goodpx = 0
>1089	PrimaryExpression	0
>1090	Identifier	goodpx
>1091	Identifier	goodpx
>1092	IdentifierDeclType	int
>1093	IdentifierDeclStatement	 
>1094	IdentifierDecl	sum = 0
>1095	AssignmentExpr	sum = 0
>1096	PrimaryExpression	0
>1097	Identifier	sum
>1098	Identifier	sum
>1099	IdentifierDeclType	float
>1100	IdentifierDeclStatement	 
>1101	IdentifierDecl	* idv_max = idv + width ( 0 ) * height ( 0 )
>1102	AssignmentExpr	* idv_max = idv + width ( 0 ) * height ( 0 )
>1103	AdditiveExpression	idv + width ( 0 ) * height ( 0 )
>1104	MultiplicativeExpression	width ( 0 ) * height ( 0 )
>1105	CallExpression	height ( 0 )
>1106	ArgumentList	0
>1107	Argument	0
>1108	PrimaryExpression	0
>1109	Callee	height
>1110	Identifier	height
>1111	CallExpression	width ( 0 )
>1112	ArgumentList	0
>1113	Argument	0
>1114	PrimaryExpression	0
>1115	Callee	width
>1116	Identifier	width
>1117	Identifier	idv
>1118	Identifier	idv_max
>1119	Identifier	idv_max
>1120	IdentifierDeclType	const float *
>1121	IdentifierDeclStatement	 
>1122	IdentifierDecl	* idv = idepthVar ( 0 )
>1123	AssignmentExpr	* idv = idepthVar ( 0 )
>1124	CallExpression	idepthVar ( 0 )
>1125	ArgumentList	0
>1126	Argument	0
>1127	PrimaryExpression	0
>1128	Callee	idepthVar
>1129	Identifier	idepthVar
>1130	Identifier	idv
>1131	Identifier	idv
>1132	IdentifierDeclType	const float *
>1133	IfStatement	if ( numMappablePixels < 0 )
>1134	ExpressionStatement	 
>1135	CallExpression	maxGradients ( 0 )
>1136	ArgumentList	0
>1137	Argument	0
>1138	PrimaryExpression	0
>1139	Callee	maxGradients
>1140	Identifier	maxGradients
>1141	Condition	 
>1142	RelationalExpression	numMappablePixels < 0
>1143	PrimaryExpression	0
>1144	Identifier	numMappablePixels
>1145	ReturnStatement	 
>1161	FunctionDef	Frame 
>1162	ParameterList	const DepthMapPixelHypothesis * newDepth
>1163	Parameter	 
>1164	Identifier	newDepth
>1165	ParameterType	const DepthMapPixelHypothesis *
>1166	ReturnType	void
>1167	CompoundStatement	 
>1168	ExpressionStatement	 
>1169	AssignmentExpr	depthHasBeenUpdatedFlag = true
>1170	Identifier	true
>1171	Identifier	depthHasBeenUpdatedFlag
>1172	ExpressionStatement	 
>1173	AssignmentExpr	data . hasIDepthBeenSet = true
>1174	Identifier	true
>1175	MemberAccess	data . hasIDepthBeenSet
>1176	Identifier	hasIDepthBeenSet
>1177	Identifier	data
>1178	ExpressionStatement	 
>1179	CallExpression	release ( IDEPTH | IDEPTH_VAR , true , true )
>1180	ArgumentList	IDEPTH | IDEPTH_VAR
>1181	Argument	true
>1182	Identifier	true
>1183	Argument	true
>1184	Identifier	true
>1185	Argument	IDEPTH | IDEPTH_VAR
>1186	InclusiveOrExpression	IDEPTH | IDEPTH_VAR
>1187	Identifier	IDEPTH_VAR
>1188	Identifier	IDEPTH
>1189	Callee	release
>1190	Identifier	release
>1191	ExpressionStatement	 
>1192	AssignmentExpr	data . idepthVarValid [ 0 ] = true
>1193	Identifier	true
>1194	ArrayIndexing	data . idepthVarValid [ 0 ]
>1195	PrimaryExpression	0
>1196	MemberAccess	data . idepthVarValid
>1197	Identifier	idepthVarValid
>1198	Identifier	data
>1199	ExpressionStatement	 
>1200	AssignmentExpr	data . idepthValid [ 0 ] = true
>1201	Identifier	true
>1202	ArrayIndexing	data . idepthValid [ 0 ]
>1203	PrimaryExpression	0
>1204	MemberAccess	data . idepthValid
>1205	Identifier	idepthValid
>1206	Identifier	data
>1207	ExpressionStatement	 
>1208	AssignmentExpr	numPoints = numIdepth
>1209	Identifier	numIdepth
>1210	Identifier	numPoints
>1211	ExpressionStatement	 
>1212	AssignmentExpr	meanIdepth = sumIdepth / numIdepth
>1213	MultiplicativeExpression	sumIdepth / numIdepth
>1214	Identifier	numIdepth
>1215	Identifier	sumIdepth
>1216	Identifier	meanIdepth
>1217	ForStatement	for ( ; pyrIDepth < pyrIDepthMax ; ++ pyrIDepth , ++ pyrIDepthVar , ++ newDepth )
>1218	CompoundStatement	 
>1219	IfStatement	if ( newDepth -> isValid && newDepth -> idepth_smoothed >= - 0.05 )
>1220	ElseStatement	else
>1221	CompoundStatement	 
>1222	ExpressionStatement	 
>1223	AssignmentExpr	* pyrIDepthVar = - 1
>1224	UnaryOp	- 1
>1225	PrimaryExpression	1
>1226	UnaryOperator	-
>1227	UnaryOp	* pyrIDepthVar
>1228	Identifier	pyrIDepthVar
>1229	UnaryOperator	*
>1230	ExpressionStatement	 
>1231	AssignmentExpr	* pyrIDepth = - 1
>1232	UnaryOp	- 1
>1233	PrimaryExpression	1
>1234	UnaryOperator	-
>1235	UnaryOp	* pyrIDepth
>1236	Identifier	pyrIDepth
>1237	UnaryOperator	*
>1238	CompoundStatement	 
>1239	ExpressionStatement	 
>1240	AssignmentExpr	sumIdepth += newDepth -> idepth_smoothed
>1241	PtrMemberAccess	newDepth -> idepth_smoothed
>1242	Identifier	idepth_smoothed
>1243	Identifier	newDepth
>1244	Identifier	sumIdepth
>1245	ExpressionStatement	 
>1246	IncDecOp	numIdepth ++
>1247	IncDec	++
>1248	Identifier	numIdepth
>1249	ExpressionStatement	 
>1250	AssignmentExpr	* pyrIDepthVar = newDepth -> idepth_var_smoothed
>1251	PtrMemberAccess	newDepth -> idepth_var_smoothed
>1252	Identifier	idepth_var_smoothed
>1253	Identifier	newDepth
>1254	UnaryOp	* pyrIDepthVar
>1255	Identifier	pyrIDepthVar
>1256	UnaryOperator	*
>1257	ExpressionStatement	 
>1258	AssignmentExpr	* pyrIDepth = newDepth -> idepth_smoothed
>1259	PtrMemberAccess	newDepth -> idepth_smoothed
>1260	Identifier	idepth_smoothed
>1261	Identifier	newDepth
>1262	UnaryOp	* pyrIDepth
>1263	Identifier	pyrIDepth
>1264	UnaryOperator	*
>1265	Condition	 
>1266	AndExpression	newDepth -> isValid && newDepth -> idepth_smoothed >= - 0.05
>1267	RelationalExpression	newDepth -> idepth_smoothed >= - 0.05
>1268	UnaryOp	- 0.05
>1269	PrimaryExpression	0.05
>1270	UnaryOperator	-
>1271	PtrMemberAccess	newDepth -> idepth_smoothed
>1272	Identifier	idepth_smoothed
>1273	Identifier	newDepth
>1274	PtrMemberAccess	newDepth -> isValid
>1275	Identifier	isValid
>1276	Identifier	newDepth
>1277	Expression	 
>1278	Expression	++ pyrIDepthVar , ++ newDepth
>1279	UnaryExpression	++ newDepth
>1280	Identifier	newDepth
>1281	IncDec	++
>1282	UnaryExpression	++ pyrIDepthVar
>1283	Identifier	pyrIDepthVar
>1284	IncDec	++
>1285	UnaryExpression	++ pyrIDepth
>1286	Identifier	pyrIDepth
>1287	IncDec	++
>1288	Condition	 
>1289	RelationalExpression	pyrIDepth < pyrIDepthMax
>1290	Identifier	pyrIDepthMax
>1291	Identifier	pyrIDepth
>1292	IdentifierDeclStatement	 
>1293	IdentifierDecl	numIdepth = 0
>1294	AssignmentExpr	numIdepth = 0
>1295	PrimaryExpression	0
>1296	Identifier	numIdepth
>1297	Identifier	numIdepth
>1298	IdentifierDeclType	int
>1299	IdentifierDeclStatement	 
>1300	IdentifierDecl	sumIdepth = 0
>1301	AssignmentExpr	sumIdepth = 0
>1302	PrimaryExpression	0
>1303	Identifier	sumIdepth
>1304	Identifier	sumIdepth
>1305	IdentifierDeclType	float
>1306	IdentifierDeclStatement	 
>1307	IdentifierDecl	* pyrIDepthMax = pyrIDepth + ( data . width [ 0 ] * data . height [ 0 ] )
>1308	AssignmentExpr	* pyrIDepthMax = pyrIDepth + ( data . width [ 0 ] * data . height [ 0 ] )
>1309	AdditiveExpression	pyrIDepth + ( data . width [ 0 ] * data . height [ 0 ] )
>1310	MultiplicativeExpression	data . width [ 0 ] * data . height [ 0 ]
>1311	ArrayIndexing	data . height [ 0 ]
>1312	PrimaryExpression	0
>1313	MemberAccess	data . height
>1314	Identifier	height
>1315	Identifier	data
>1316	ArrayIndexing	data . width [ 0 ]
>1317	PrimaryExpression	0
>1318	MemberAccess	data . width
>1319	Identifier	width
>1320	Identifier	data
>1321	Identifier	pyrIDepth
>1322	Identifier	pyrIDepthMax
>1323	Identifier	pyrIDepthMax
>1324	IdentifierDeclType	float *
>1325	IdentifierDeclStatement	 
>1326	IdentifierDecl	* pyrIDepthVar = data . idepthVar [ 0 ]
>1327	AssignmentExpr	* pyrIDepthVar = data . idepthVar [ 0 ]
>1328	ArrayIndexing	data . idepthVar [ 0 ]
>1329	PrimaryExpression	0
>1330	MemberAccess	data . idepthVar
>1331	Identifier	idepthVar
>1332	Identifier	data
>1333	Identifier	pyrIDepthVar
>1334	Identifier	pyrIDepthVar
>1335	IdentifierDeclType	float *
>1336	IdentifierDeclStatement	 
>1337	IdentifierDecl	* pyrIDepth = data . idepth [ 0 ]
>1338	AssignmentExpr	* pyrIDepth = data . idepth [ 0 ]
>1339	ArrayIndexing	data . idepth [ 0 ]
>1340	PrimaryExpression	0
>1341	MemberAccess	data . idepth
>1342	Identifier	idepth
>1343	Identifier	data
>1344	Identifier	pyrIDepth
>1345	Identifier	pyrIDepth
>1346	IdentifierDeclType	float *
>1347	IfStatement	if ( data . idepthVar [ 0 ] == 0 )
>1348	ExpressionStatement	 
>1349	AssignmentExpr	data . idepthVar [ 0 ] = FrameMemory 
>1350	CallExpression	FrameMemory 
>1351	ArgumentList	data . width [ 0 ] * data . height [ 0 ]
>1352	Argument	data . width [ 0 ] * data . height [ 0 ]
>1353	MultiplicativeExpression	data . width [ 0 ] * data . height [ 0 ]
>1354	ArrayIndexing	data . height [ 0 ]
>1355	PrimaryExpression	0
>1356	MemberAccess	data . height
>1357	Identifier	height
>1358	Identifier	data
>1359	ArrayIndexing	data . width [ 0 ]
>1360	PrimaryExpression	0
>1361	MemberAccess	data . width
>1362	Identifier	width
>1363	Identifier	data
>1364	Callee	FrameMemory 
>1365	MemberAccess	FrameMemory 
>1366	Identifier	getFloatBuffer
>1367	CallExpression	FrameMemory 
>1368	ArgumentList	 
>1369	Callee	FrameMemory 
>1370	Identifier	FrameMemory 
>1371	ArrayIndexing	data . idepthVar [ 0 ]
>1372	PrimaryExpression	0
>1373	MemberAccess	data . idepthVar
>1374	Identifier	idepthVar
>1375	Identifier	data
>1376	Condition	 
>1377	EqualityExpression	data . idepthVar [ 0 ] == 0
>1378	PrimaryExpression	0
>1379	ArrayIndexing	data . idepthVar [ 0 ]
>1380	PrimaryExpression	0
>1381	MemberAccess	data . idepthVar
>1382	Identifier	idepthVar
>1383	Identifier	data
>1384	IfStatement	if ( data . idepth [ 0 ] == 0 )
>1385	ExpressionStatement	 
>1386	AssignmentExpr	data . idepth [ 0 ] = FrameMemory 
>1387	CallExpression	FrameMemory 
>1388	ArgumentList	data . width [ 0 ] * data . height [ 0 ]
>1389	Argument	data . width [ 0 ] * data . height [ 0 ]
>1390	MultiplicativeExpression	data . width [ 0 ] * data . height [ 0 ]
>1391	ArrayIndexing	data . height [ 0 ]
>1392	PrimaryExpression	0
>1393	MemberAccess	data . height
>1394	Identifier	height
>1395	Identifier	data
>1396	ArrayIndexing	data . width [ 0 ]
>1397	PrimaryExpression	0
>1398	MemberAccess	data . width
>1399	Identifier	width
>1400	Identifier	data
>1401	Callee	FrameMemory 
>1402	MemberAccess	FrameMemory 
>1403	Identifier	getFloatBuffer
>1404	CallExpression	FrameMemory 
>1405	ArgumentList	 
>1406	Callee	FrameMemory 
>1407	Identifier	FrameMemory 
>1408	ArrayIndexing	data . idepth [ 0 ]
>1409	PrimaryExpression	0
>1410	MemberAccess	data . idepth
>1411	Identifier	idepth
>1412	Identifier	data
>1413	Condition	 
>1414	EqualityExpression	data . idepth [ 0 ] == 0
>1415	PrimaryExpression	0
>1416	ArrayIndexing	data . idepth [ 0 ]
>1417	PrimaryExpression	0
>1418	MemberAccess	data . idepth
>1419	Identifier	idepth
>1420	Identifier	data
>1421	IdentifierDeclStatement	 
>1422	IdentifierDecl	lock2 ( buildMutex )
>1423	Identifier	buildMutex
>1424	Identifier	lock2
>1425	IdentifierDeclType	boost 
>1426	IdentifierDeclStatement	 
>1427	IdentifierDecl	lock = getActiveLock ( )
>1428	AssignmentExpr	lock = getActiveLock ( )
>1429	CallExpression	getActiveLock ( )
>1430	ArgumentList	 
>1431	Callee	getActiveLock
>1432	Identifier	getActiveLock
>1433	Identifier	lock
>1434	Identifier	lock
>1435	IdentifierDeclType	boost 
>1477	FunctionDef	Frame 
>1478	ParameterList	const float * depth , float cov_scale
>1479	Parameter	 
>1480	Identifier	cov_scale
>1481	ParameterType	float
>1482	Parameter	 
>1483	Identifier	depth
>1484	ParameterType	const float *
>1485	ReturnType	void
>1486	CompoundStatement	 
>1487	ExpressionStatement	 
>1488	AssignmentExpr	data . hasIDepthBeenSet = true
>1489	Identifier	true
>1490	MemberAccess	data . hasIDepthBeenSet
>1491	Identifier	hasIDepthBeenSet
>1492	Identifier	data
>1493	ExpressionStatement	 
>1494	CallExpression	release ( IDEPTH | IDEPTH_VAR , true , true )
>1495	ArgumentList	IDEPTH | IDEPTH_VAR
>1496	Argument	true
>1497	Identifier	true
>1498	Argument	true
>1499	Identifier	true
>1500	Argument	IDEPTH | IDEPTH_VAR
>1501	InclusiveOrExpression	IDEPTH | IDEPTH_VAR
>1502	Identifier	IDEPTH_VAR
>1503	Identifier	IDEPTH
>1504	Callee	release
>1505	Identifier	release
>1506	ExpressionStatement	 
>1507	AssignmentExpr	data . idepthVarValid [ 0 ] = true
>1508	Identifier	true
>1509	ArrayIndexing	data . idepthVarValid [ 0 ]
>1510	PrimaryExpression	0
>1511	MemberAccess	data . idepthVarValid
>1512	Identifier	idepthVarValid
>1513	Identifier	data
>1514	ExpressionStatement	 
>1515	AssignmentExpr	data . idepthValid [ 0 ] = true
>1516	Identifier	true
>1517	ArrayIndexing	data . idepthValid [ 0 ]
>1518	PrimaryExpression	0
>1519	MemberAccess	data . idepthValid
>1520	Identifier	idepthValid
>1521	Identifier	data
>1522	ForStatement	for ( int y = 0 ; y < height0 ; y ++ )
>1523	CompoundStatement	 
>1524	ForStatement	for ( int x = 0 ; x < width0 ; x ++ )
>1525	CompoundStatement	 
>1526	ExpressionStatement	 
>1527	UnaryExpression	++ pyrIDepthVar
>1528	Identifier	pyrIDepthVar
>1529	IncDec	++
>1530	ExpressionStatement	 
>1531	UnaryExpression	++ pyrIDepth
>1532	Identifier	pyrIDepth
>1533	IncDec	++
>1534	ExpressionStatement	 
>1535	UnaryExpression	++ depth
>1536	Identifier	depth
>1537	IncDec	++
>1538	IfStatement	if ( x > 0 && x < width0 - 1 && y > 0 && y < height0 - 1 && pyrMaxGradient [ x + y * width0 ] >= MIN_ABS_GRAD_CREATE && ! \
>1539	ElseStatement	else
>1540	CompoundStatement	 
>1541	ExpressionStatement	 
>1542	AssignmentExpr	* pyrIDepthVar = - 1
>1543	UnaryOp	- 1
>1544	PrimaryExpression	1
>1545	UnaryOperator	-
>1546	UnaryOp	* pyrIDepthVar
>1547	Identifier	pyrIDepthVar
>1548	UnaryOperator	*
>1549	ExpressionStatement	 
>1550	AssignmentExpr	* pyrIDepth = - 1
>1551	UnaryOp	- 1
>1552	PrimaryExpression	1
>1553	UnaryOperator	-
>1554	UnaryOp	* pyrIDepth
>1555	Identifier	pyrIDepth
>1556	UnaryOperator	*
>1557	CompoundStatement	 
>1558	ExpressionStatement	 
>1559	AssignmentExpr	* pyrIDepthVar = VAR_GT_INIT_INITIAL * cov_scale
>1560	MultiplicativeExpression	VAR_GT_INIT_INITIAL * cov_scale
>1561	Identifier	cov_scale
>1562	Identifier	VAR_GT_INIT_INITIAL
>1563	UnaryOp	* pyrIDepthVar
>1564	Identifier	pyrIDepthVar
>1565	UnaryOperator	*
>1566	ExpressionStatement	 
>1567	AssignmentExpr	* pyrIDepth = 1.0f / * depth
>1568	MultiplicativeExpression	1.0f / * depth
>1569	UnaryOp	* depth
>1570	Identifier	depth
>1571	UnaryOperator	*
>1572	PrimaryExpression	1.0f
>1573	UnaryOp	* pyrIDepth
>1574	Identifier	pyrIDepth
>1575	UnaryOperator	*
>1576	Condition	 
>1577	AndExpression	x > 0 && x < width0 - 1 && y > 0 && y < height0 - 1 && pyrMaxGradient [ x + y * width0 ] >= MIN_ABS_\
>1578	AndExpression	x < width0 - 1 && y > 0 && y < height0 - 1 && pyrMaxGradient [ x + y * width0 ] >= MIN_ABS_GRAD_CREATE && ! \
>1579	AndExpression	y > 0 && y < height0 - 1 && pyrMaxGradient [ x + y * width0 ] >= MIN_ABS_GRAD_CREATE && ! isnanf ( * \
>1580	AndExpression	y < height0 - 1 && pyrMaxGradient [ x + y * width0 ] >= MIN_ABS_GRAD_CREATE && ! isnanf ( * depth ) && * \
>1581	AndExpression	pyrMaxGradient [ x + y * width0 ] >= MIN_ABS_GRAD_CREATE && ! isnanf ( * depth ) && * depth > 0
>1582	AndExpression	! isnanf ( * depth ) && * depth > 0
>1583	RelationalExpression	* depth > 0
>1584	PrimaryExpression	0
>1585	UnaryOp	* depth
>1586	Identifier	depth
>1587	UnaryOperator	*
>1588	UnaryOp	! isnanf ( * depth )
>1589	CallExpression	isnanf ( * depth )
>1590	ArgumentList	* depth
>1591	Argument	* depth
>1592	UnaryOp	* depth
>1593	Identifier	depth
>1594	UnaryOperator	*
>1595	Callee	isnanf
>1596	Identifier	isnanf
>1597	UnaryOperator	!
>1598	RelationalExpression	pyrMaxGradient [ x + y * width0 ] >= MIN_ABS_GRAD_CREATE
>1599	Identifier	MIN_ABS_GRAD_CREATE
>1600	ArrayIndexing	pyrMaxGradient [ x + y * width0 ]
>1601	AdditiveExpression	x + y * width0
>1602	MultiplicativeExpression	y * width0
>1603	Identifier	width0
>1604	Identifier	y
>1605	Identifier	x
>1606	Identifier	pyrMaxGradient
>1607	RelationalExpression	y < height0 - 1
>1608	AdditiveExpression	height0 - 1
>1609	PrimaryExpression	1
>1610	Identifier	height0
>1611	Identifier	y
>1612	RelationalExpression	y > 0
>1613	PrimaryExpression	0
>1614	Identifier	y
>1615	RelationalExpression	x < width0 - 1
>1616	AdditiveExpression	width0 - 1
>1617	PrimaryExpression	1
>1618	Identifier	width0
>1619	Identifier	x
>1620	RelationalExpression	x > 0
>1621	PrimaryExpression	0
>1622	Identifier	x
>1623	IncDecOp	 
>1624	IncDec	++
>1625	Identifier	x
>1626	Condition	 
>1627	RelationalExpression	x < width0
>1628	Identifier	width0
>1629	Identifier	x
>1630	ForInit	 
>1631	IdentifierDeclStatement	int x = 0 ;
>1632	IdentifierDecl	x = 0
>1633	AssignmentExpr	x = 0
>1634	PrimaryExpression	0
>1635	Identifier	x
>1636	Identifier	x
>1637	IdentifierDeclType	int
>1638	IncDecOp	 
>1639	IncDec	++
>1640	Identifier	y
>1641	Condition	 
>1642	RelationalExpression	y < height0
>1643	Identifier	height0
>1644	Identifier	y
>1645	ForInit	 
>1646	IdentifierDeclStatement	int y = 0 ;
>1647	IdentifierDecl	y = 0
>1648	AssignmentExpr	y = 0
>1649	PrimaryExpression	0
>1650	Identifier	y
>1651	Identifier	y
>1652	IdentifierDeclType	int
>1653	IdentifierDeclStatement	 
>1654	IdentifierDecl	height0 = data . height [ 0 ]
>1655	AssignmentExpr	height0 = data . height [ 0 ]
>1656	ArrayIndexing	data . height [ 0 ]
>1657	PrimaryExpression	0
>1658	MemberAccess	data . height
>1659	Identifier	height
>1660	Identifier	data
>1661	Identifier	height0
>1662	Identifier	height0
>1663	IdentifierDeclType	int
>1664	IdentifierDeclStatement	 
>1665	IdentifierDecl	width0 = data . width [ 0 ]
>1666	AssignmentExpr	width0 = data . width [ 0 ]
>1667	ArrayIndexing	data . width [ 0 ]
>1668	PrimaryExpression	0
>1669	MemberAccess	data . width
>1670	Identifier	width
>1671	Identifier	data
>1672	Identifier	width0
>1673	Identifier	width0
>1674	IdentifierDeclType	int
>1675	IdentifierDeclStatement	 
>1676	IdentifierDecl	* pyrIDepthVar = data . idepthVar [ 0 ]
>1677	AssignmentExpr	* pyrIDepthVar = data . idepthVar [ 0 ]
>1678	ArrayIndexing	data . idepthVar [ 0 ]
>1679	PrimaryExpression	0
>1680	MemberAccess	data . idepthVar
>1681	Identifier	idepthVar
>1682	Identifier	data
>1683	Identifier	pyrIDepthVar
>1684	Identifier	pyrIDepthVar
>1685	IdentifierDeclType	float *
>1686	IdentifierDeclStatement	 
>1687	IdentifierDecl	* pyrIDepth = data . idepth [ 0 ]
>1688	AssignmentExpr	* pyrIDepth = data . idepth [ 0 ]
>1689	ArrayIndexing	data . idepth [ 0 ]
>1690	PrimaryExpression	0
>1691	MemberAccess	data . idepth
>1692	Identifier	idepth
>1693	Identifier	data
>1694	Identifier	pyrIDepth
>1695	Identifier	pyrIDepth
>1696	IdentifierDeclType	float *
>1697	IfStatement	if ( data . idepthVar [ 0 ] == 0 )
>1698	ExpressionStatement	 
>1699	AssignmentExpr	data . idepthVar [ 0 ] = FrameMemory 
>1700	CallExpression	FrameMemory 
>1701	ArgumentList	data . width [ 0 ] * data . height [ 0 ]
>1702	Argument	data . width [ 0 ] * data . height [ 0 ]
>1703	MultiplicativeExpression	data . width [ 0 ] * data . height [ 0 ]
>1704	ArrayIndexing	data . height [ 0 ]
>1705	PrimaryExpression	0
>1706	MemberAccess	data . height
>1707	Identifier	height
>1708	Identifier	data
>1709	ArrayIndexing	data . width [ 0 ]
>1710	PrimaryExpression	0
>1711	MemberAccess	data . width
>1712	Identifier	width
>1713	Identifier	data
>1714	Callee	FrameMemory 
>1715	MemberAccess	FrameMemory 
>1716	Identifier	getFloatBuffer
>1717	CallExpression	FrameMemory 
>1718	ArgumentList	 
>1719	Callee	FrameMemory 
>1720	Identifier	FrameMemory 
>1721	ArrayIndexing	data . idepthVar [ 0 ]
>1722	PrimaryExpression	0
>1723	MemberAccess	data . idepthVar
>1724	Identifier	idepthVar
>1725	Identifier	data
>1726	Condition	 
>1727	EqualityExpression	data . idepthVar [ 0 ] == 0
>1728	PrimaryExpression	0
>1729	ArrayIndexing	data . idepthVar [ 0 ]
>1730	PrimaryExpression	0
>1731	MemberAccess	data . idepthVar
>1732	Identifier	idepthVar
>1733	Identifier	data
>1734	IfStatement	if ( data . idepth [ 0 ] == 0 )
>1735	ExpressionStatement	 
>1736	AssignmentExpr	data . idepth [ 0 ] = FrameMemory 
>1737	CallExpression	FrameMemory 
>1738	ArgumentList	data . width [ 0 ] * data . height [ 0 ]
>1739	Argument	data . width [ 0 ] * data . height [ 0 ]
>1740	MultiplicativeExpression	data . width [ 0 ] * data . height [ 0 ]
>1741	ArrayIndexing	data . height [ 0 ]
>1742	PrimaryExpression	0
>1743	MemberAccess	data . height
>1744	Identifier	height
>1745	Identifier	data
>1746	ArrayIndexing	data . width [ 0 ]
>1747	PrimaryExpression	0
>1748	MemberAccess	data . width
>1749	Identifier	width
>1750	Identifier	data
>1751	Callee	FrameMemory 
>1752	MemberAccess	FrameMemory 
>1753	Identifier	getFloatBuffer
>1754	CallExpression	FrameMemory 
>1755	ArgumentList	 
>1756	Callee	FrameMemory 
>1757	Identifier	FrameMemory 
>1758	ArrayIndexing	data . idepth [ 0 ]
>1759	PrimaryExpression	0
>1760	MemberAccess	data . idepth
>1761	Identifier	idepth
>1762	Identifier	data
>1763	Condition	 
>1764	EqualityExpression	data . idepth [ 0 ] == 0
>1765	PrimaryExpression	0
>1766	ArrayIndexing	data . idepth [ 0 ]
>1767	PrimaryExpression	0
>1768	MemberAccess	data . idepth
>1769	Identifier	idepth
>1770	Identifier	data
>1771	IdentifierDeclStatement	 
>1772	IdentifierDecl	lock2 ( buildMutex )
>1773	Identifier	buildMutex
>1774	Identifier	lock2
>1775	IdentifierDeclType	boost 
>1776	IdentifierDeclStatement	 
>1777	IdentifierDecl	* pyrMaxGradient = maxGradients ( 0 )
>1778	AssignmentExpr	* pyrMaxGradient = maxGradients ( 0 )
>1779	CallExpression	maxGradients ( 0 )
>1780	ArgumentList	0
>1781	Argument	0
>1782	PrimaryExpression	0
>1783	Callee	maxGradients
>1784	Identifier	maxGradients
>1785	Identifier	pyrMaxGradient
>1786	Identifier	pyrMaxGradient
>1787	IdentifierDeclType	const float *
>1788	IdentifierDeclStatement	 
>1789	IdentifierDecl	lock = getActiveLock ( )
>1790	AssignmentExpr	lock = getActiveLock ( )
>1791	CallExpression	getActiveLock ( )
>1792	ArgumentList	 
>1793	Callee	getActiveLock
>1794	Identifier	getActiveLock
>1795	Identifier	lock
>1796	Identifier	lock
>1797	IdentifierDeclType	boost 
>1844	FunctionDef	Frame 
>1845	ParameterList	Frame * other , Sim3 thisToOther , const Eigen 
>1846	Parameter	 
>1847	Identifier	level
>1848	ParameterType	const int
>1849	Parameter	 
>1850	Identifier	K
>1851	ParameterType	const Eigen 
>1852	Parameter	 
>1853	Identifier	thisToOther
>1854	ParameterType	Sim3
>1855	Parameter	 
>1856	Identifier	other
>1857	ParameterType	Frame *
>1858	ReturnType	void
>1859	CompoundStatement	 
>1860	ExpressionStatement	 
>1861	AssignmentExpr	referenceLevel = level
>1862	Identifier	level
>1863	Identifier	referenceLevel
>1864	ExpressionStatement	 
>1865	AssignmentExpr	referenceID = other -> id ( )
>1866	CallExpression	other -> id ( )
>1867	ArgumentList	 
>1868	Callee	other -> id
>1869	PtrMemberAccess	other -> id
>1870	Identifier	id
>1871	Identifier	other
>1872	Identifier	referenceID
>1873	ExpressionStatement	 
>1874	AssignmentExpr	distSquared = otherToThis . translation ( ) . dot ( otherToThis . translation ( ) )
>1875	CallExpression	otherToThis . translation ( ) . dot ( otherToThis . translation ( ) )
>1876	ArgumentList	otherToThis . translation ( )
>1877	Argument	otherToThis . translation ( )
>1878	CallExpression	otherToThis . translation ( )
>1879	ArgumentList	 
>1880	Callee	otherToThis . translation
>1881	MemberAccess	otherToThis . translation
>1882	Identifier	translation
>1883	Identifier	otherToThis
>1884	Callee	otherToThis . translation ( ) . dot
>1885	MemberAccess	otherToThis . translation ( ) . dot
>1886	Identifier	dot
>1887	CallExpression	otherToThis . translation ( )
>1888	ArgumentList	 
>1889	Callee	otherToThis . translation
>1890	MemberAccess	otherToThis . translation
>1891	Identifier	translation
>1892	Identifier	otherToThis
>1893	Identifier	distSquared
>1894	ExpressionStatement	 
>1895	AssignmentExpr	otherToThis_R_row2 = thisToOther_R . col ( 2 )
>1896	CallExpression	thisToOther_R . col ( 2 )
>1897	ArgumentList	2
>1898	Argument	2
>1899	PrimaryExpression	2
>1900	Callee	thisToOther_R . col
>1901	MemberAccess	thisToOther_R . col
>1902	Identifier	col
>1903	Identifier	thisToOther_R
>1904	Identifier	otherToThis_R_row2
>1905	ExpressionStatement	 
>1906	AssignmentExpr	otherToThis_R_row1 = thisToOther_R . col ( 1 )
>1907	CallExpression	thisToOther_R . col ( 1 )
>1908	ArgumentList	1
>1909	Argument	1
>1910	PrimaryExpression	1
>1911	Callee	thisToOther_R . col
>1912	MemberAccess	thisToOther_R . col
>1913	Identifier	col
>1914	Identifier	thisToOther_R
>1915	Identifier	otherToThis_R_row1
>1916	ExpressionStatement	 
>1917	AssignmentExpr	otherToThis_R_row0 = thisToOther_R . col ( 0 )
>1918	CallExpression	thisToOther_R . col ( 0 )
>1919	ArgumentList	0
>1920	Argument	0
>1921	PrimaryExpression	0
>1922	Callee	thisToOther_R . col
>1923	MemberAccess	thisToOther_R . col
>1924	Identifier	col
>1925	Identifier	thisToOther_R
>1926	Identifier	otherToThis_R_row0
>1927	ExpressionStatement	 
>1928	UnaryOp	* thisToOther . scale ( )
>1929	CallExpression	thisToOther . scale ( )
>1930	ArgumentList	 
>1931	Callee	thisToOther . scale
>1932	MemberAccess	thisToOther . scale
>1933	Identifier	scale
>1934	Identifier	thisToOther
>1935	UnaryOperator	*
>1936	Statement	 
>1937	Statement	 
>1938	Statement	 
>1939	Statement	 
>1940	Statement	 
>1941	Statement	 
>1942	Statement	 
>1943	Statement	 
>1944	Statement	 
>1945	Statement	 
>1946	Statement	 
>1947	Statement	 
>1948	Statement	 
>1949	Statement	 
>1950	ExpressionStatement	 
>1951	AssignmentExpr	K_thisToOther_t = K * thisToOther_t
>1952	MultiplicativeExpression	K * thisToOther_t
>1953	Identifier	thisToOther_t
>1954	Identifier	K
>1955	Identifier	K_thisToOther_t
>1956	ExpressionStatement	 
>1957	Statement	 
>1958	Statement	 
>1959	Statement	 
>1960	Statement	 
>1961	Statement	 
>1962	Statement	 
>1963	Statement	 
>1964	Statement	 
>1965	Statement	 
>1966	Statement	 
>1967	Statement	 
>1968	Statement	 
>1969	Statement	 
>1970	Statement	 
>1971	ExpressionStatement	 
>1972	AssignmentExpr	K_otherToThis_t = K * otherToThis_t
>1973	MultiplicativeExpression	K * otherToThis_t
>1974	Identifier	otherToThis_t
>1975	Identifier	K
>1976	Identifier	K_otherToThis_t
>1977	ExpressionStatement	 
>1978	Statement	 
>1979	Statement	 
>1980	Statement	 
>1981	Statement	 
>1982	Statement	 
>1983	Statement	 
>1984	Statement	 
>1985	Statement	 
>1986	Statement	 
>1987	Statement	 
>1988	Statement	 
>1989	Statement	 
>1990	Statement	 
>1991	Statement	 
>1992	ExpressionStatement	 
>1993	UnaryOp	* otherToThis . scale ( )
>1994	CallExpression	otherToThis . scale ( )
>1995	ArgumentList	 
>1996	Callee	otherToThis . scale
>1997	MemberAccess	otherToThis . scale
>1998	Identifier	scale
>1999	Identifier	otherToThis
>2000	UnaryOperator	*
>2001	Statement	 
>2002	Statement	 
>2003	Statement	 
>2004	Statement	 
>2005	Statement	 
>2006	Statement	 
>2007	Statement	 
>2008	Statement	 
>2009	Statement	 
>2010	Statement	 
>2011	Statement	 
>2012	Statement	 
>2013	Statement	 
>2014	Statement	 
>2015	Statement	 
>2016	Statement	 
>2017	IdentifierDeclStatement	 
>2018	IdentifierDecl	otherToThis = thisToOther . inverse ( )
>2019	AssignmentExpr	otherToThis = thisToOther . inverse ( )
>2020	CallExpression	thisToOther . inverse ( )
>2021	ArgumentList	 
>2022	Callee	thisToOther . inverse
>2023	MemberAccess	thisToOther . inverse
>2024	Identifier	inverse
>2025	Identifier	thisToOther
>2026	Identifier	otherToThis
>2027	Identifier	otherToThis
>2028	IdentifierDeclType	Sim3
>2056	FunctionDef	Frame 
>2057	ParameterList	int dataFlags , int level
>2058	Parameter	 
>2059	Identifier	level
>2060	ParameterType	int
>2061	Parameter	 
>2062	Identifier	dataFlags
>2063	ParameterType	int
>2064	ReturnType	void
>2065	CompoundStatement	 
>2066	IfStatement	if ( ( ( dataFlags & IDEPTH ) && ! data . idepthValid [ level ] ) || ( ( dataFlags & IDEPTH_VAR ) && ! data . idepthVarValid [ \
>2067	CompoundStatement	 
>2068	ExpressionStatement	 
>2069	CallExpression	buildIDepthAndIDepthVar ( level )
>2070	ArgumentList	level
>2071	Argument	level
>2072	Identifier	level
>2073	Callee	buildIDepthAndIDepthVar
>2074	Identifier	buildIDepthAndIDepthVar
>2075	Condition	 
>2076	OrExpression	( ( dataFlags & IDEPTH ) && ! data . idepthValid [ level ] ) || ( ( dataFlags & IDEPTH_VAR ) && ! data \
>2077	AndExpression	( dataFlags & IDEPTH_VAR ) && ! data . idepthVarValid [ level ]
>2078	UnaryOp	! data . idepthVarValid [ level ]
>2079	ArrayIndexing	data . idepthVarValid [ level ]
>2080	Identifier	level
>2081	MemberAccess	data . idepthVarValid
>2082	Identifier	idepthVarValid
>2083	Identifier	data
>2084	UnaryOperator	!
>2085	BitAndExpression	dataFlags & IDEPTH_VAR
>2086	Identifier	IDEPTH_VAR
>2087	Identifier	dataFlags
>2088	AndExpression	( dataFlags & IDEPTH ) && ! data . idepthValid [ level ]
>2089	UnaryOp	! data . idepthValid [ level ]
>2090	ArrayIndexing	data . idepthValid [ level ]
>2091	Identifier	level
>2092	MemberAccess	data . idepthValid
>2093	Identifier	idepthValid
>2094	Identifier	data
>2095	UnaryOperator	!
>2096	BitAndExpression	dataFlags & IDEPTH
>2097	Identifier	IDEPTH
>2098	Identifier	dataFlags
>2099	IfStatement	if ( ( dataFlags & MAX_GRADIENTS ) && ! data . maxGradientsValid [ level ] )
>2100	CompoundStatement	 
>2101	ExpressionStatement	 
>2102	CallExpression	buildMaxGradients ( level )
>2103	ArgumentList	level
>2104	Argument	level
>2105	Identifier	level
>2106	Callee	buildMaxGradients
>2107	Identifier	buildMaxGradients
>2108	Condition	 
>2109	AndExpression	( dataFlags & MAX_GRADIENTS ) && ! data . maxGradientsValid [ level ]
>2110	UnaryOp	! data . maxGradientsValid [ level ]
>2111	ArrayIndexing	data . maxGradientsValid [ level ]
>2112	Identifier	level
>2113	MemberAccess	data . maxGradientsValid
>2114	Identifier	maxGradientsValid
>2115	Identifier	data
>2116	UnaryOperator	!
>2117	BitAndExpression	dataFlags & MAX_GRADIENTS
>2118	Identifier	MAX_GRADIENTS
>2119	Identifier	dataFlags
>2120	IfStatement	if ( ( dataFlags & GRADIENTS ) && ! data . gradientsValid [ level ] )
>2121	CompoundStatement	 
>2122	ExpressionStatement	 
>2123	CallExpression	buildGradients ( level )
>2124	ArgumentList	level
>2125	Argument	level
>2126	Identifier	level
>2127	Callee	buildGradients
>2128	Identifier	buildGradients
>2129	Condition	 
>2130	AndExpression	( dataFlags & GRADIENTS ) && ! data . gradientsValid [ level ]
>2131	UnaryOp	! data . gradientsValid [ level ]
>2132	ArrayIndexing	data . gradientsValid [ level ]
>2133	Identifier	level
>2134	MemberAccess	data . gradientsValid
>2135	Identifier	gradientsValid
>2136	Identifier	data
>2137	UnaryOperator	!
>2138	BitAndExpression	dataFlags & GRADIENTS
>2139	Identifier	GRADIENTS
>2140	Identifier	dataFlags
>2141	IfStatement	if ( ( dataFlags & IMAGE ) && ! data . imageValid [ level ] )
>2142	CompoundStatement	 
>2143	ExpressionStatement	 
>2144	CallExpression	buildImage ( level )
>2145	ArgumentList	level
>2146	Argument	level
>2147	Identifier	level
>2148	Callee	buildImage
>2149	Identifier	buildImage
>2150	Condition	 
>2151	AndExpression	( dataFlags & IMAGE ) && ! data . imageValid [ level ]
>2152	UnaryOp	! data . imageValid [ level ]
>2153	ArrayIndexing	data . imageValid [ level ]
>2154	Identifier	level
>2155	MemberAccess	data . imageValid
>2156	Identifier	imageValid
>2157	Identifier	data
>2158	UnaryOperator	!
>2159	BitAndExpression	dataFlags & IMAGE
>2160	Identifier	IMAGE
>2161	Identifier	dataFlags
>2185	FunctionDef	Frame 
>2186	ParameterList	int dataFlags , bool pyramidsOnly , bool invalidateOnly
>2187	Parameter	 
>2188	Identifier	invalidateOnly
>2189	ParameterType	bool
>2190	Parameter	 
>2191	Identifier	pyramidsOnly
>2192	ParameterType	bool
>2193	Parameter	 
>2194	Identifier	dataFlags
>2195	ParameterType	int
>2196	ReturnType	void
>2197	CompoundStatement	 
>2198	ForStatement	for ( int level = ( pyramidsOnly ? 1 
>2199	CompoundStatement	 
>2200	IfStatement	if ( ( dataFlags & IDEPTH_VAR ) && data . idepthVarValid [ level ] )
>2201	CompoundStatement	 
>2202	IfStatement	if ( ! invalidateOnly )
>2203	ExpressionStatement	 
>2204	CallExpression	releaseIDepthVar ( level )
>2205	ArgumentList	level
>2206	Argument	level
>2207	Identifier	level
>2208	Callee	releaseIDepthVar
>2209	Identifier	releaseIDepthVar
>2210	Condition	 
>2211	UnaryOp	! invalidateOnly
>2212	Identifier	invalidateOnly
>2213	UnaryOperator	!
>2214	ExpressionStatement	 
>2215	AssignmentExpr	data . idepthVarValid [ level ] = false
>2216	Identifier	false
>2217	ArrayIndexing	data . idepthVarValid [ level ]
>2218	Identifier	level
>2219	MemberAccess	data . idepthVarValid
>2220	Identifier	idepthVarValid
>2221	Identifier	data
>2222	Condition	 
>2223	AndExpression	( dataFlags & IDEPTH_VAR ) && data . idepthVarValid [ level ]
>2224	ArrayIndexing	data . idepthVarValid [ level ]
>2225	Identifier	level
>2226	MemberAccess	data . idepthVarValid
>2227	Identifier	idepthVarValid
>2228	Identifier	data
>2229	BitAndExpression	dataFlags & IDEPTH_VAR
>2230	Identifier	IDEPTH_VAR
>2231	Identifier	dataFlags
>2232	IfStatement	if ( ( dataFlags & IDEPTH ) && data . idepthValid [ level ] )
>2233	CompoundStatement	 
>2234	IfStatement	if ( ! invalidateOnly )
>2235	ExpressionStatement	 
>2236	CallExpression	releaseIDepth ( level )
>2237	ArgumentList	level
>2238	Argument	level
>2239	Identifier	level
>2240	Callee	releaseIDepth
>2241	Identifier	releaseIDepth
>2242	Condition	 
>2243	UnaryOp	! invalidateOnly
>2244	Identifier	invalidateOnly
>2245	UnaryOperator	!
>2246	ExpressionStatement	 
>2247	AssignmentExpr	data . idepthValid [ level ] = false
>2248	Identifier	false
>2249	ArrayIndexing	data . idepthValid [ level ]
>2250	Identifier	level
>2251	MemberAccess	data . idepthValid
>2252	Identifier	idepthValid
>2253	Identifier	data
>2254	Condition	 
>2255	AndExpression	( dataFlags & IDEPTH ) && data . idepthValid [ level ]
>2256	ArrayIndexing	data . idepthValid [ level ]
>2257	Identifier	level
>2258	MemberAccess	data . idepthValid
>2259	Identifier	idepthValid
>2260	Identifier	data
>2261	BitAndExpression	dataFlags & IDEPTH
>2262	Identifier	IDEPTH
>2263	Identifier	dataFlags
>2264	IfStatement	if ( ( dataFlags & MAX_GRADIENTS ) && data . maxGradientsValid [ level ] )
>2265	CompoundStatement	 
>2266	IfStatement	if ( ! invalidateOnly )
>2267	ExpressionStatement	 
>2268	CallExpression	releaseMaxGradients ( level )
>2269	ArgumentList	level
>2270	Argument	level
>2271	Identifier	level
>2272	Callee	releaseMaxGradients
>2273	Identifier	releaseMaxGradients
>2274	Condition	 
>2275	UnaryOp	! invalidateOnly
>2276	Identifier	invalidateOnly
>2277	UnaryOperator	!
>2278	ExpressionStatement	 
>2279	AssignmentExpr	data . maxGradientsValid [ level ] = false
>2280	Identifier	false
>2281	ArrayIndexing	data . maxGradientsValid [ level ]
>2282	Identifier	level
>2283	MemberAccess	data . maxGradientsValid
>2284	Identifier	maxGradientsValid
>2285	Identifier	data
>2286	Condition	 
>2287	AndExpression	( dataFlags & MAX_GRADIENTS ) && data . maxGradientsValid [ level ]
>2288	ArrayIndexing	data . maxGradientsValid [ level ]
>2289	Identifier	level
>2290	MemberAccess	data . maxGradientsValid
>2291	Identifier	maxGradientsValid
>2292	Identifier	data
>2293	BitAndExpression	dataFlags & MAX_GRADIENTS
>2294	Identifier	MAX_GRADIENTS
>2295	Identifier	dataFlags
>2296	IfStatement	if ( ( dataFlags & GRADIENTS ) && data . gradientsValid [ level ] )
>2297	CompoundStatement	 
>2298	IfStatement	if ( ! invalidateOnly )
>2299	ExpressionStatement	 
>2300	CallExpression	releaseGradients ( level )
>2301	ArgumentList	level
>2302	Argument	level
>2303	Identifier	level
>2304	Callee	releaseGradients
>2305	Identifier	releaseGradients
>2306	Condition	 
>2307	UnaryOp	! invalidateOnly
>2308	Identifier	invalidateOnly
>2309	UnaryOperator	!
>2310	ExpressionStatement	 
>2311	AssignmentExpr	data . gradientsValid [ level ] = false
>2312	Identifier	false
>2313	ArrayIndexing	data . gradientsValid [ level ]
>2314	Identifier	level
>2315	MemberAccess	data . gradientsValid
>2316	Identifier	gradientsValid
>2317	Identifier	data
>2318	Condition	 
>2319	AndExpression	( dataFlags & GRADIENTS ) && data . gradientsValid [ level ]
>2320	ArrayIndexing	data . gradientsValid [ level ]
>2321	Identifier	level
>2322	MemberAccess	data . gradientsValid
>2323	Identifier	gradientsValid
>2324	Identifier	data
>2325	BitAndExpression	dataFlags & GRADIENTS
>2326	Identifier	GRADIENTS
>2327	Identifier	dataFlags
>2328	IfStatement	if ( ( dataFlags & IMAGE ) && data . imageValid [ level ] )
>2329	CompoundStatement	 
>2330	IfStatement	if ( ! invalidateOnly )
>2331	ExpressionStatement	 
>2332	CallExpression	releaseImage ( level )
>2333	ArgumentList	level
>2334	Argument	level
>2335	Identifier	level
>2336	Callee	releaseImage
>2337	Identifier	releaseImage
>2338	Condition	 
>2339	UnaryOp	! invalidateOnly
>2340	Identifier	invalidateOnly
>2341	UnaryOperator	!
>2342	ExpressionStatement	 
>2343	AssignmentExpr	data . imageValid [ level ] = false
>2344	Identifier	false
>2345	ArrayIndexing	data . imageValid [ level ]
>2346	Identifier	level
>2347	MemberAccess	data . imageValid
>2348	Identifier	imageValid
>2349	Identifier	data
>2350	Condition	 
>2351	AndExpression	( dataFlags & IMAGE ) && data . imageValid [ level ]
>2352	ArrayIndexing	data . imageValid [ level ]
>2353	Identifier	level
>2354	MemberAccess	data . imageValid
>2355	Identifier	imageValid
>2356	Identifier	data
>2357	BitAndExpression	dataFlags & IMAGE
>2358	Identifier	IMAGE
>2359	Identifier	dataFlags
>2360	UnaryExpression	 
>2361	Identifier	level
>2362	IncDec	++
>2363	Condition	 
>2364	RelationalExpression	level < PYRAMID_LEVELS
>2365	Identifier	PYRAMID_LEVELS
>2366	Identifier	level
>2367	ForInit	 
>2368	IdentifierDeclStatement	int level = ( pyramidsOnly ? 1 
>2369	IdentifierDecl	level = ( pyramidsOnly ? 1 
>2370	AssignmentExpr	level = ( pyramidsOnly ? 1 
>2371	ConditionalExpression	pyramidsOnly ? 1 
>2372	PrimaryExpression	0
>2373	PrimaryExpression	1
>2374	Condition	pyramidsOnly
>2375	Identifier	pyramidsOnly
>2376	Identifier	level
>2377	Identifier	level
>2378	IdentifierDeclType	int
>2406	FunctionDef	Frame 
>2407	ParameterList	 
>2408	ReturnType	bool
>2409	CompoundStatement	 
>2410	ReturnStatement	 
>2411	Identifier	false
>2412	IfStatement	if ( activeMutex . timed_lock ( boost 
>2413	CompoundStatement	 
>2414	ReturnStatement	 
>2415	Identifier	true
>2416	ExpressionStatement	 
>2417	CallExpression	activeMutex . unlock ( )
>2418	ArgumentList	 
>2419	Callee	activeMutex . unlock
>2420	MemberAccess	activeMutex . unlock
>2421	Identifier	unlock
>2422	Identifier	activeMutex
>2423	ExpressionStatement	 
>2424	CallExpression	buildMutex . unlock ( )
>2425	ArgumentList	 
>2426	Callee	buildMutex . unlock
>2427	MemberAccess	buildMutex . unlock
>2428	Identifier	unlock
>2429	Identifier	buildMutex
>2430	ExpressionStatement	 
>2431	CallExpression	clear_refPixelWasGood ( )
>2432	ArgumentList	 
>2433	Callee	clear_refPixelWasGood
>2434	Identifier	clear_refPixelWasGood
>2435	ExpressionStatement	 
>2436	CallExpression	release ( GRADIENTS | MAX_GRADIENTS , false , false )
>2437	ArgumentList	GRADIENTS | MAX_GRADIENTS
>2438	Argument	false
>2439	Identifier	false
>2440	Argument	false
>2441	Identifier	false
>2442	Argument	GRADIENTS | MAX_GRADIENTS
>2443	InclusiveOrExpression	GRADIENTS | MAX_GRADIENTS
>2444	Identifier	MAX_GRADIENTS
>2445	Identifier	GRADIENTS
>2446	Callee	release
>2447	Identifier	release
>2448	ExpressionStatement	 
>2449	CallExpression	release ( IMAGE | IDEPTH | IDEPTH_VAR , true , false )
>2450	ArgumentList	IMAGE | IDEPTH | IDEPTH_VAR
>2451	Argument	false
>2452	Identifier	false
>2453	Argument	true
>2454	Identifier	true
>2455	Argument	IMAGE | IDEPTH | IDEPTH_VAR
>2456	InclusiveOrExpression	IMAGE | IDEPTH | IDEPTH_VAR
>2457	InclusiveOrExpression	IDEPTH | IDEPTH_VAR
>2458	Identifier	IDEPTH_VAR
>2459	Identifier	IDEPTH
>2460	Identifier	IMAGE
>2461	Callee	release
>2462	Identifier	release
>2463	IfStatement	if ( enablePrintDebugInfo && printMemoryDebugInfo )
>2464	ExpressionStatement	 
>2465	CallExpression	printf ( \"minimizing frame %d\n\" , id ( ) )
>2466	ArgumentList	\"minimizing frame %d\n\"
>2467	Argument	id ( )
>2468	CallExpression	id ( )
>2469	ArgumentList	 
>2470	Callee	id
>2471	Identifier	id
>2472	Argument	\"minimizing frame %d\n\"
>2473	PrimaryExpression	\"minimizing frame %d\n\"
>2474	Callee	printf
>2475	Identifier	printf
>2476	Condition	 
>2477	AndExpression	enablePrintDebugInfo && printMemoryDebugInfo
>2478	Identifier	printMemoryDebugInfo
>2479	Identifier	enablePrintDebugInfo
>2480	ExpressionStatement	 
>2481	CallExpression	buildMutex . lock ( )
>2482	ArgumentList	 
>2483	Callee	buildMutex . lock
>2484	MemberAccess	buildMutex . lock
>2485	Identifier	lock
>2486	Identifier	buildMutex
>2487	Condition	 
>2488	CallExpression	activeMutex . timed_lock ( boost 
>2489	ArgumentList	boost 
>2490	Argument	boost 
>2491	CallExpression	boost 
>2492	ArgumentList	10
>2493	Argument	10
>2494	PrimaryExpression	10
>2495	Callee	boost 
>2496	Identifier	boost 
>2497	Callee	activeMutex . timed_lock
>2498	MemberAccess	activeMutex . timed_lock
>2499	Identifier	timed_lock
>2500	Identifier	activeMutex
>2518	FunctionDef	Frame 
>2519	ParameterList	int id , int width , int height , const Eigen 
>2520	Parameter	 
>2521	Identifier	timestamp
>2522	ParameterType	double
>2523	Parameter	 
>2524	Identifier	K
>2525	ParameterType	const Eigen 
>2526	Parameter	 
>2527	Identifier	height
>2528	ParameterType	int
>2529	Parameter	 
>2530	Identifier	width
>2531	ParameterType	int
>2532	Parameter	 
>2533	Identifier	id
>2534	ParameterType	int
>2535	ReturnType	void
>2536	CompoundStatement	 
>2537	ExpressionStatement	 
>2538	AssignmentExpr	isActive = false
>2539	Identifier	false
>2540	Identifier	isActive
>2541	ExpressionStatement	 
>2542	AssignmentExpr	lastConstraintTrackedCamToWorld = Sim3 ( )
>2543	CallExpression	Sim3 ( )
>2544	ArgumentList	 
>2545	Callee	Sim3
>2546	Identifier	Sim3
>2547	Identifier	lastConstraintTrackedCamToWorld
>2548	ExpressionStatement	 
>2549	AssignmentExpr	edgeErrorSum = edgesNum = 1
>2550	AssignmentExpr	edgesNum = 1
>2551	PrimaryExpression	1
>2552	Identifier	edgesNum
>2553	Identifier	edgeErrorSum
>2554	ExpressionStatement	 
>2555	AssignmentExpr	idxInKeyframes = - 1
>2556	UnaryOp	- 1
>2557	PrimaryExpression	1
>2558	UnaryOperator	-
>2559	Identifier	idxInKeyframes
>2560	ExpressionStatement	 
>2561	AssignmentExpr	numFramesTrackedOnThis = numMappedOnThis = numMappedOnThisTotal = 0
>2562	AssignmentExpr	numMappedOnThis = numMappedOnThisTotal = 0
>2563	AssignmentExpr	numMappedOnThisTotal = 0
>2564	PrimaryExpression	0
>2565	Identifier	numMappedOnThisTotal
>2566	Identifier	numMappedOnThis
>2567	Identifier	numFramesTrackedOnThis
>2568	ExpressionStatement	 
>2569	AssignmentExpr	numPoints = 0
>2570	PrimaryExpression	0
>2571	Identifier	numPoints
>2572	ExpressionStatement	 
>2573	AssignmentExpr	meanIdepth = 1
>2574	PrimaryExpression	1
>2575	Identifier	meanIdepth
>2576	ExpressionStatement	 
>2577	AssignmentExpr	permaRef_posData = 0
>2578	PrimaryExpression	0
>2579	Identifier	permaRef_posData
>2580	ExpressionStatement	 
>2581	AssignmentExpr	permaRef_colorAndVarData = 0
>2582	PrimaryExpression	0
>2583	Identifier	permaRef_colorAndVarData
>2584	ExpressionStatement	 
>2585	AssignmentExpr	permaRefNumPts = 0
>2586	PrimaryExpression	0
>2587	Identifier	permaRefNumPts
>2588	ExpressionStatement	 
>2589	AssignmentExpr	data . refPixelWasGood = 0
>2590	PrimaryExpression	0
>2591	MemberAccess	data . refPixelWasGood
>2592	Identifier	refPixelWasGood
>2593	Identifier	data
>2594	ExpressionStatement	 
>2595	AssignmentExpr	data . idepth_reAct = 0
>2596	PrimaryExpression	0
>2597	MemberAccess	data . idepth_reAct
>2598	Identifier	idepth_reAct
>2599	Identifier	data
>2600	ExpressionStatement	 
>2601	AssignmentExpr	data . idepthVar_reAct = 0
>2602	PrimaryExpression	0
>2603	MemberAccess	data . idepthVar_reAct
>2604	Identifier	idepthVar_reAct
>2605	Identifier	data
>2606	ExpressionStatement	 
>2607	AssignmentExpr	data . validity_reAct = 0
>2608	PrimaryExpression	0
>2609	MemberAccess	data . validity_reAct
>2610	Identifier	validity_reAct
>2611	Identifier	data
>2612	ForStatement	for ( int level = 0 ; level < PYRAMID_LEVELS ; ++ level )
>2613	CompoundStatement	 
>2614	IfStatement	if ( level > 0 )
>2615	CompoundStatement	 
>2616	ExpressionStatement	 
>2617	AssignmentExpr	data . cyInv [ level ] = data . KInv [ level ] ( 1 , 2 )
>2618	CallExpression	data . KInv [ level ] ( 1 , 2 )
>2619	ArgumentList	1
>2620	Argument	2
>2621	PrimaryExpression	2
>2622	Argument	1
>2623	PrimaryExpression	1
>2624	Callee	data . KInv [ level ]
>2625	ArrayIndexing	data . KInv [ level ]
>2626	Identifier	level
>2627	MemberAccess	data . KInv
>2628	Identifier	KInv
>2629	Identifier	data
>2630	ArrayIndexing	data . cyInv [ level ]
>2631	Identifier	level
>2632	MemberAccess	data . cyInv
>2633	Identifier	cyInv
>2634	Identifier	data
>2635	ExpressionStatement	 
>2636	AssignmentExpr	data . cxInv [ level ] = data . KInv [ level ] ( 0 , 2 )
>2637	CallExpression	data . KInv [ level ] ( 0 , 2 )
>2638	ArgumentList	0
>2639	Argument	2
>2640	PrimaryExpression	2
>2641	Argument	0
>2642	PrimaryExpression	0
>2643	Callee	data . KInv [ level ]
>2644	ArrayIndexing	data . KInv [ level ]
>2645	Identifier	level
>2646	MemberAccess	data . KInv
>2647	Identifier	KInv
>2648	Identifier	data
>2649	ArrayIndexing	data . cxInv [ level ]
>2650	Identifier	level
>2651	MemberAccess	data . cxInv
>2652	Identifier	cxInv
>2653	Identifier	data
>2654	ExpressionStatement	 
>2655	AssignmentExpr	data . fyInv [ level ] = data . KInv [ level ] ( 1 , 1 )
>2656	CallExpression	data . KInv [ level ] ( 1 , 1 )
>2657	ArgumentList	1
>2658	Argument	1
>2659	PrimaryExpression	1
>2660	Argument	1
>2661	PrimaryExpression	1
>2662	Callee	data . KInv [ level ]
>2663	ArrayIndexing	data . KInv [ level ]
>2664	Identifier	level
>2665	MemberAccess	data . KInv
>2666	Identifier	KInv
>2667	Identifier	data
>2668	ArrayIndexing	data . fyInv [ level ]
>2669	Identifier	level
>2670	MemberAccess	data . fyInv
>2671	Identifier	fyInv
>2672	Identifier	data
>2673	ExpressionStatement	 
>2674	AssignmentExpr	data . fxInv [ level ] = data . KInv [ level ] ( 0 , 0 )
>2675	CallExpression	data . KInv [ level ] ( 0 , 0 )
>2676	ArgumentList	0
>2677	Argument	0
>2678	PrimaryExpression	0
>2679	Argument	0
>2680	PrimaryExpression	0
>2681	Callee	data . KInv [ level ]
>2682	ArrayIndexing	data . KInv [ level ]
>2683	Identifier	level
>2684	MemberAccess	data . KInv
>2685	Identifier	KInv
>2686	Identifier	data
>2687	ArrayIndexing	data . fxInv [ level ]
>2688	Identifier	level
>2689	MemberAccess	data . fxInv
>2690	Identifier	fxInv
>2691	Identifier	data
>2692	ExpressionStatement	 
>2693	AssignmentExpr	data . KInv [ level ] = ( data . K [ level ] ) . inverse ( )
>2694	CallExpression	( data . K [ level ] ) . inverse ( )
>2695	ArgumentList	 
>2696	Callee	( data . K [ level ] ) . inverse
>2697	MemberAccess	( data . K [ level ] ) . inverse
>2698	Identifier	inverse
>2699	ArrayIndexing	data . K [ level ]
>2700	Identifier	level
>2701	MemberAccess	data . K
>2702	Identifier	K
>2703	Identifier	data
>2704	ArrayIndexing	data . KInv [ level ]
>2705	Identifier	level
>2706	MemberAccess	data . KInv
>2707	Identifier	KInv
>2708	Identifier	data
>2709	ExpressionStatement	 
>2710	Expression	data . K [ level ] << data . fx [ level ] , 0.0 , data . cx [ level ] , 0.0 , data . fy [ level ] , data . cy [ \
>2711	Expression	0.0 , data . cx [ level ] , 0.0 , data . fy [ level ] , data . cy [ level ] , 0.0 , 0.0 , 1.0
>2712	Expression	data . cx [ level ] , 0.0 , data . fy [ level ] , data . cy [ level ] , 0.0 , 0.0 , 1.0
>2713	Expression	0.0 , data . fy [ level ] , data . cy [ level ] , 0.0 , 0.0 , 1.0
>2714	Expression	data . fy [ level ] , data . cy [ level ] , 0.0 , 0.0 , 1.0
>2715	Expression	data . cy [ level ] , 0.0 , 0.0 , 1.0
>2716	Expression	0.0 , 0.0 , 1.0
>2717	Expression	0.0 , 1.0
>2718	PrimaryExpression	1.0
>2719	PrimaryExpression	0.0
>2720	PrimaryExpression	0.0
>2721	ArrayIndexing	data . cy [ level ]
>2722	Identifier	level
>2723	MemberAccess	data . cy
>2724	Identifier	cy
>2725	Identifier	data
>2726	ArrayIndexing	data . fy [ level ]
>2727	Identifier	level
>2728	MemberAccess	data . fy
>2729	Identifier	fy
>2730	Identifier	data
>2731	PrimaryExpression	0.0
>2732	ArrayIndexing	data . cx [ level ]
>2733	Identifier	level
>2734	MemberAccess	data . cx
>2735	Identifier	cx
>2736	Identifier	data
>2737	PrimaryExpression	0.0
>2738	ShiftExpression	data . K [ level ] << data . fx [ level ]
>2739	ArrayIndexing	data . fx [ level ]
>2740	Identifier	level
>2741	MemberAccess	data . fx
>2742	Identifier	fx
>2743	Identifier	data
>2744	ArrayIndexing	data . K [ level ]
>2745	Identifier	level
>2746	MemberAccess	data . K
>2747	Identifier	K
>2748	Identifier	data
>2749	ExpressionStatement	 
>2750	AssignmentExpr	data . cy [ level ] = ( data . cy [ 0 ] + 0.5 ) / ( ( int ) 1 << level ) - 0.5
>2751	AdditiveExpression	( data . cy [ 0 ] + 0.5 ) / ( ( int ) 1 << level ) - 0.5
>2752	PrimaryExpression	0.5
>2753	MultiplicativeExpression	( data . cy [ 0 ] + 0.5 ) / ( ( int ) 1 << level )
>2754	ShiftExpression	( int ) 1 << level
>2755	Identifier	level
>2756	CastExpression	( int ) 1
>2757	PrimaryExpression	1
>2758	CastTarget	int
>2759	AdditiveExpression	data . cy [ 0 ] + 0.5
>2760	PrimaryExpression	0.5
>2761	ArrayIndexing	data . cy [ 0 ]
>2762	PrimaryExpression	0
>2763	MemberAccess	data . cy
>2764	Identifier	cy
>2765	Identifier	data
>2766	ArrayIndexing	data . cy [ level ]
>2767	Identifier	level
>2768	MemberAccess	data . cy
>2769	Identifier	cy
>2770	Identifier	data
>2771	ExpressionStatement	 
>2772	AssignmentExpr	data . cx [ level ] = ( data . cx [ 0 ] + 0.5 ) / ( ( int ) 1 << level ) - 0.5
>2773	AdditiveExpression	( data . cx [ 0 ] + 0.5 ) / ( ( int ) 1 << level ) - 0.5
>2774	PrimaryExpression	0.5
>2775	MultiplicativeExpression	( data . cx [ 0 ] + 0.5 ) / ( ( int ) 1 << level )
>2776	ShiftExpression	( int ) 1 << level
>2777	Identifier	level
>2778	CastExpression	( int ) 1
>2779	PrimaryExpression	1
>2780	CastTarget	int
>2781	AdditiveExpression	data . cx [ 0 ] + 0.5
>2782	PrimaryExpression	0.5
>2783	ArrayIndexing	data . cx [ 0 ]
>2784	PrimaryExpression	0
>2785	MemberAccess	data . cx
>2786	Identifier	cx
>2787	Identifier	data
>2788	ArrayIndexing	data . cx [ level ]
>2789	Identifier	level
>2790	MemberAccess	data . cx
>2791	Identifier	cx
>2792	Identifier	data
>2793	ExpressionStatement	 
>2794	AssignmentExpr	data . fy [ level ] = data . fy [ level - 1 ] * 0.5
>2795	MultiplicativeExpression	data . fy [ level - 1 ] * 0.5
>2796	PrimaryExpression	0.5
>2797	ArrayIndexing	data . fy [ level - 1 ]
>2798	AdditiveExpression	level - 1
>2799	PrimaryExpression	1
>2800	Identifier	level
>2801	MemberAccess	data . fy
>2802	Identifier	fy
>2803	Identifier	data
>2804	ArrayIndexing	data . fy [ level ]
>2805	Identifier	level
>2806	MemberAccess	data . fy
>2807	Identifier	fy
>2808	Identifier	data
>2809	ExpressionStatement	 
>2810	AssignmentExpr	data . fx [ level ] = data . fx [ level - 1 ] * 0.5
>2811	MultiplicativeExpression	data . fx [ level - 1 ] * 0.5
>2812	PrimaryExpression	0.5
>2813	ArrayIndexing	data . fx [ level - 1 ]
>2814	AdditiveExpression	level - 1
>2815	PrimaryExpression	1
>2816	Identifier	level
>2817	MemberAccess	data . fx
>2818	Identifier	fx
>2819	Identifier	data
>2820	ArrayIndexing	data . fx [ level ]
>2821	Identifier	level
>2822	MemberAccess	data . fx
>2823	Identifier	fx
>2824	Identifier	data
>2825	Condition	 
>2826	RelationalExpression	level > 0
>2827	PrimaryExpression	0
>2828	Identifier	level
>2829	ExpressionStatement	 
>2830	AssignmentExpr	data . reActivationDataValid = false
>2831	Identifier	false
>2832	MemberAccess	data . reActivationDataValid
>2833	Identifier	reActivationDataValid
>2834	Identifier	data
>2835	ExpressionStatement	 
>2836	AssignmentExpr	data . idepthVar [ level ] = 0
>2837	PrimaryExpression	0
>2838	ArrayIndexing	data . idepthVar [ level ]
>2839	Identifier	level
>2840	MemberAccess	data . idepthVar
>2841	Identifier	idepthVar
>2842	Identifier	data
>2843	ExpressionStatement	 
>2844	AssignmentExpr	data . idepth [ level ] = 0
>2845	PrimaryExpression	0
>2846	ArrayIndexing	data . idepth [ level ]
>2847	Identifier	level
>2848	MemberAccess	data . idepth
>2849	Identifier	idepth
>2850	Identifier	data
>2851	ExpressionStatement	 
>2852	AssignmentExpr	data . maxGradients [ level ] = 0
>2853	PrimaryExpression	0
>2854	ArrayIndexing	data . maxGradients [ level ]
>2855	Identifier	level
>2856	MemberAccess	data . maxGradients
>2857	Identifier	maxGradients
>2858	Identifier	data
>2859	ExpressionStatement	 
>2860	AssignmentExpr	data . gradients [ level ] = 0
>2861	PrimaryExpression	0
>2862	ArrayIndexing	data . gradients [ level ]
>2863	Identifier	level
>2864	MemberAccess	data . gradients
>2865	Identifier	gradients
>2866	Identifier	data
>2867	ExpressionStatement	 
>2868	AssignmentExpr	data . image [ level ] = 0
>2869	PrimaryExpression	0
>2870	ArrayIndexing	data . image [ level ]
>2871	Identifier	level
>2872	MemberAccess	data . image
>2873	Identifier	image
>2874	Identifier	data
>2875	ExpressionStatement	 
>2876	AssignmentExpr	data . idepthVarValid [ level ] = false
>2877	Identifier	false
>2878	ArrayIndexing	data . idepthVarValid [ level ]
>2879	Identifier	level
>2880	MemberAccess	data . idepthVarValid
>2881	Identifier	idepthVarValid
>2882	Identifier	data
>2883	ExpressionStatement	 
>2884	AssignmentExpr	data . idepthValid [ level ] = false
>2885	Identifier	false
>2886	ArrayIndexing	data . idepthValid [ level ]
>2887	Identifier	level
>2888	MemberAccess	data . idepthValid
>2889	Identifier	idepthValid
>2890	Identifier	data
>2891	ExpressionStatement	 
>2892	AssignmentExpr	data . maxGradientsValid [ level ] = false
>2893	Identifier	false
>2894	ArrayIndexing	data . maxGradientsValid [ level ]
>2895	Identifier	level
>2896	MemberAccess	data . maxGradientsValid
>2897	Identifier	maxGradientsValid
>2898	Identifier	data
>2899	ExpressionStatement	 
>2900	AssignmentExpr	data . gradientsValid [ level ] = false
>2901	Identifier	false
>2902	ArrayIndexing	data . gradientsValid [ level ]
>2903	Identifier	level
>2904	MemberAccess	data . gradientsValid
>2905	Identifier	gradientsValid
>2906	Identifier	data
>2907	ExpressionStatement	 
>2908	AssignmentExpr	data . imageValid [ level ] = false
>2909	Identifier	false
>2910	ArrayIndexing	data . imageValid [ level ]
>2911	Identifier	level
>2912	MemberAccess	data . imageValid
>2913	Identifier	imageValid
>2914	Identifier	data
>2915	ExpressionStatement	 
>2916	AssignmentExpr	data . height [ level ] = height >> level
>2917	ShiftExpression	height >> level
>2918	Identifier	level
>2919	Identifier	height
>2920	ArrayIndexing	data . height [ level ]
>2921	Identifier	level
>2922	MemberAccess	data . height
>2923	Identifier	height
>2924	Identifier	data
>2925	ExpressionStatement	 
>2926	AssignmentExpr	data . width [ level ] = width >> level
>2927	ShiftExpression	width >> level
>2928	Identifier	level
>2929	Identifier	width
>2930	ArrayIndexing	data . width [ level ]
>2931	Identifier	level
>2932	MemberAccess	data . width
>2933	Identifier	width
>2934	Identifier	data
>2935	UnaryExpression	 
>2936	Identifier	level
>2937	IncDec	++
>2938	Condition	 
>2939	RelationalExpression	level < PYRAMID_LEVELS
>2940	Identifier	PYRAMID_LEVELS
>2941	Identifier	level
>2942	ForInit	 
>2943	IdentifierDeclStatement	int level = 0 ;
>2944	IdentifierDecl	level = 0
>2945	AssignmentExpr	level = 0
>2946	PrimaryExpression	0
>2947	Identifier	level
>2948	Identifier	level
>2949	IdentifierDeclType	int
>2950	ExpressionStatement	 
>2951	AssignmentExpr	numMappablePixels = - 1
>2952	UnaryOp	- 1
>2953	PrimaryExpression	1
>2954	UnaryOperator	-
>2955	Identifier	numMappablePixels
>2956	ExpressionStatement	 
>2957	AssignmentExpr	referenceLevel = - 1
>2958	UnaryOp	- 1
>2959	PrimaryExpression	1
>2960	UnaryOperator	-
>2961	Identifier	referenceLevel
>2962	ExpressionStatement	 
>2963	AssignmentExpr	referenceID = - 1
>2964	UnaryOp	- 1
>2965	PrimaryExpression	1
>2966	UnaryOperator	-
>2967	Identifier	referenceID
>2968	ExpressionStatement	 
>2969	AssignmentExpr	depthHasBeenUpdatedFlag = false
>2970	Identifier	false
>2971	Identifier	depthHasBeenUpdatedFlag
>2972	ExpressionStatement	 
>2973	AssignmentExpr	data . hasIDepthBeenSet = false
>2974	Identifier	false
>2975	MemberAccess	data . hasIDepthBeenSet
>2976	Identifier	hasIDepthBeenSet
>2977	Identifier	data
>2978	ExpressionStatement	 
>2979	AssignmentExpr	data . timestamp = timestamp
>2980	Identifier	timestamp
>2981	MemberAccess	data . timestamp
>2982	Identifier	timestamp
>2983	Identifier	data
>2984	ExpressionStatement	 
>2985	AssignmentExpr	data . cyInv [ 0 ] = data . KInv [ 0 ] ( 1 , 2 )
>2986	CallExpression	data . KInv [ 0 ] ( 1 , 2 )
>2987	ArgumentList	1
>2988	Argument	2
>2989	PrimaryExpression	2
>2990	Argument	1
>2991	PrimaryExpression	1
>2992	Callee	data . KInv [ 0 ]
>2993	ArrayIndexing	data . KInv [ 0 ]
>2994	PrimaryExpression	0
>2995	MemberAccess	data . KInv
>2996	Identifier	KInv
>2997	Identifier	data
>2998	ArrayIndexing	data . cyInv [ 0 ]
>2999	PrimaryExpression	0
>3000	MemberAccess	data . cyInv
>3001	Identifier	cyInv
>3002	Identifier	data
>3003	ExpressionStatement	 
>3004	AssignmentExpr	data . cxInv [ 0 ] = data . KInv [ 0 ] ( 0 , 2 )
>3005	CallExpression	data . KInv [ 0 ] ( 0 , 2 )
>3006	ArgumentList	0
>3007	Argument	2
>3008	PrimaryExpression	2
>3009	Argument	0
>3010	PrimaryExpression	0
>3011	Callee	data . KInv [ 0 ]
>3012	ArrayIndexing	data . KInv [ 0 ]
>3013	PrimaryExpression	0
>3014	MemberAccess	data . KInv
>3015	Identifier	KInv
>3016	Identifier	data
>3017	ArrayIndexing	data . cxInv [ 0 ]
>3018	PrimaryExpression	0
>3019	MemberAccess	data . cxInv
>3020	Identifier	cxInv
>3021	Identifier	data
>3022	ExpressionStatement	 
>3023	AssignmentExpr	data . fyInv [ 0 ] = data . KInv [ 0 ] ( 1 , 1 )
>3024	CallExpression	data . KInv [ 0 ] ( 1 , 1 )
>3025	ArgumentList	1
>3026	Argument	1
>3027	PrimaryExpression	1
>3028	Argument	1
>3029	PrimaryExpression	1
>3030	Callee	data . KInv [ 0 ]
>3031	ArrayIndexing	data . KInv [ 0 ]
>3032	PrimaryExpression	0
>3033	MemberAccess	data . KInv
>3034	Identifier	KInv
>3035	Identifier	data
>3036	ArrayIndexing	data . fyInv [ 0 ]
>3037	PrimaryExpression	0
>3038	MemberAccess	data . fyInv
>3039	Identifier	fyInv
>3040	Identifier	data
>3041	ExpressionStatement	 
>3042	AssignmentExpr	data . fxInv [ 0 ] = data . KInv [ 0 ] ( 0 , 0 )
>3043	CallExpression	data . KInv [ 0 ] ( 0 , 0 )
>3044	ArgumentList	0
>3045	Argument	0
>3046	PrimaryExpression	0
>3047	Argument	0
>3048	PrimaryExpression	0
>3049	Callee	data . KInv [ 0 ]
>3050	ArrayIndexing	data . KInv [ 0 ]
>3051	PrimaryExpression	0
>3052	MemberAccess	data . KInv
>3053	Identifier	KInv
>3054	Identifier	data
>3055	ArrayIndexing	data . fxInv [ 0 ]
>3056	PrimaryExpression	0
>3057	MemberAccess	data . fxInv
>3058	Identifier	fxInv
>3059	Identifier	data
>3060	ExpressionStatement	 
>3061	AssignmentExpr	data . KInv [ 0 ] = K . inverse ( )
>3062	CallExpression	K . inverse ( )
>3063	ArgumentList	 
>3064	Callee	K . inverse
>3065	MemberAccess	K . inverse
>3066	Identifier	inverse
>3067	Identifier	K
>3068	ArrayIndexing	data . KInv [ 0 ]
>3069	PrimaryExpression	0
>3070	MemberAccess	data . KInv
>3071	Identifier	KInv
>3072	Identifier	data
>3073	ExpressionStatement	 
>3074	AssignmentExpr	data . cy [ 0 ] = K ( 1 , 2 )
>3075	CallExpression	K ( 1 , 2 )
>3076	ArgumentList	1
>3077	Argument	2
>3078	PrimaryExpression	2
>3079	Argument	1
>3080	PrimaryExpression	1
>3081	Callee	K
>3082	Identifier	K
>3083	ArrayIndexing	data . cy [ 0 ]
>3084	PrimaryExpression	0
>3085	MemberAccess	data . cy
>3086	Identifier	cy
>3087	Identifier	data
>3088	ExpressionStatement	 
>3089	AssignmentExpr	data . cx [ 0 ] = K ( 0 , 2 )
>3090	CallExpression	K ( 0 , 2 )
>3091	ArgumentList	0
>3092	Argument	2
>3093	PrimaryExpression	2
>3094	Argument	0
>3095	PrimaryExpression	0
>3096	Callee	K
>3097	Identifier	K
>3098	ArrayIndexing	data . cx [ 0 ]
>3099	PrimaryExpression	0
>3100	MemberAccess	data . cx
>3101	Identifier	cx
>3102	Identifier	data
>3103	ExpressionStatement	 
>3104	AssignmentExpr	data . fy [ 0 ] = K ( 1 , 1 )
>3105	CallExpression	K ( 1 , 1 )
>3106	ArgumentList	1
>3107	Argument	1
>3108	PrimaryExpression	1
>3109	Argument	1
>3110	PrimaryExpression	1
>3111	Callee	K
>3112	Identifier	K
>3113	ArrayIndexing	data . fy [ 0 ]
>3114	PrimaryExpression	0
>3115	MemberAccess	data . fy
>3116	Identifier	fy
>3117	Identifier	data
>3118	ExpressionStatement	 
>3119	AssignmentExpr	data . fx [ 0 ] = K ( 0 , 0 )
>3120	CallExpression	K ( 0 , 0 )
>3121	ArgumentList	0
>3122	Argument	0
>3123	PrimaryExpression	0
>3124	Argument	0
>3125	PrimaryExpression	0
>3126	Callee	K
>3127	Identifier	K
>3128	ArrayIndexing	data . fx [ 0 ]
>3129	PrimaryExpression	0
>3130	MemberAccess	data . fx
>3131	Identifier	fx
>3132	Identifier	data
>3133	ExpressionStatement	 
>3134	AssignmentExpr	data . K [ 0 ] = K
>3135	Identifier	K
>3136	ArrayIndexing	data . K [ 0 ]
>3137	PrimaryExpression	0
>3138	MemberAccess	data . K
>3139	Identifier	K
>3140	Identifier	data
>3141	ExpressionStatement	 
>3142	AssignmentExpr	pose = new FramePoseStruct ( this )
>3143	Identifier	this
>3144	Identifier	pose
>3145	ExpressionStatement	 
>3146	AssignmentExpr	data . id = id
>3147	Identifier	id
>3148	MemberAccess	data . id
>3149	Identifier	id
>3150	Identifier	data
>3239	FunctionDef	Frame 
>3240	ParameterList	 
>3241	ReturnType	void
>3242	CompoundStatement	 
>3243	ReturnStatement	 
>3247	FunctionDef	Frame 
>3248	ParameterList	int level
>3249	Parameter	 
>3250	Identifier	level
>3251	ParameterType	int
>3252	ReturnType	void
>3253	CompoundStatement	 
>3254	ExpressionStatement	 
>3255	AssignmentExpr	data . imageValid [ level ] = true
>3256	Identifier	true
>3257	ArrayIndexing	data . imageValid [ level ]
>3258	Identifier	level
>3259	MemberAccess	data . imageValid
>3260	Identifier	imageValid
>3261	Identifier	data
>3262	ForStatement	for ( int y = 0 ; y < wh ; y += width * 2 )
>3263	CompoundStatement	 
>3264	ForStatement	for ( int x = 0 ; x < width ; x += 2 )
>3265	CompoundStatement	 
>3266	ExpressionStatement	 
>3267	IncDecOp	dest ++
>3268	IncDec	++
>3269	Identifier	dest
>3270	ExpressionStatement	 
>3271	AssignmentExpr	* dest = ( s [ 0 ] + s [ 1 ] + s [ width ] + s [ 1 + width ] ) * 0.25f
>3272	MultiplicativeExpression	( s [ 0 ] + s [ 1 ] + s [ width ] + s [ 1 + width ] ) * 0.25f
>3273	PrimaryExpression	0.25f
>3274	AdditiveExpression	s [ 0 ] + s [ 1 ] + s [ width ] + s [ 1 + width ]
>3275	AdditiveExpression	s [ 1 ] + s [ width ] + s [ 1 + width ]
>3276	AdditiveExpression	s [ width ] + s [ 1 + width ]
>3277	ArrayIndexing	s [ 1 + width ]
>3278	AdditiveExpression	1 + width
>3279	Identifier	width
>3280	PrimaryExpression	1
>3281	Identifier	s
>3282	ArrayIndexing	s [ width ]
>3283	Identifier	width
>3284	Identifier	s
>3285	ArrayIndexing	s [ 1 ]
>3286	PrimaryExpression	1
>3287	Identifier	s
>3288	ArrayIndexing	s [ 0 ]
>3289	PrimaryExpression	0
>3290	Identifier	s
>3291	UnaryOp	* dest
>3292	Identifier	dest
>3293	UnaryOperator	*
>3294	ExpressionStatement	 
>3295	AssignmentExpr	s = source + x + y
>3296	AdditiveExpression	source + x + y
>3297	AdditiveExpression	x + y
>3298	Identifier	y
>3299	Identifier	x
>3300	Identifier	source
>3301	Identifier	s
>3302	AssignmentExpr	 
>3303	PrimaryExpression	2
>3304	Identifier	x
>3305	Condition	 
>3306	RelationalExpression	x < width
>3307	Identifier	width
>3308	Identifier	x
>3309	ForInit	 
>3310	IdentifierDeclStatement	int x = 0 ;
>3311	IdentifierDecl	x = 0
>3312	AssignmentExpr	x = 0
>3313	PrimaryExpression	0
>3314	Identifier	x
>3315	Identifier	x
>3316	IdentifierDeclType	int
>3317	AssignmentExpr	 
>3318	MultiplicativeExpression	width * 2
>3319	PrimaryExpression	2
>3320	Identifier	width
>3321	Identifier	y
>3322	Condition	 
>3323	RelationalExpression	y < wh
>3324	Identifier	wh
>3325	Identifier	y
>3326	ForInit	 
>3327	IdentifierDeclStatement	int y = 0 ;
>3328	IdentifierDecl	y = 0
>3329	AssignmentExpr	y = 0
>3330	PrimaryExpression	0
>3331	Identifier	y
>3332	Identifier	y
>3333	IdentifierDeclType	int
>3334	IdentifierDeclStatement	 
>3335	IdentifierDecl	* s
>3336	Identifier	s
>3337	IdentifierDeclType	const float *
>3338	IdentifierDeclStatement	 
>3339	IdentifierDecl	wh = width * height
>3340	AssignmentExpr	wh = width * height
>3341	MultiplicativeExpression	width * height
>3342	Identifier	height
>3343	Identifier	width
>3344	Identifier	wh
>3345	Identifier	wh
>3346	IdentifierDeclType	int
>3347	IfStatement	if ( width % 8 == 0 )
>3348	CompoundStatement	 
>3349	ReturnStatement	 
>3350	ExpressionStatement	 
>3351	AssignmentExpr	data . imageValid [ level ] = true
>3352	Identifier	true
>3353	ArrayIndexing	data . imageValid [ level ]
>3354	Identifier	level
>3355	MemberAccess	data . imageValid
>3356	Identifier	imageValid
>3357	Identifier	data
>3358	ForStatement	for ( const float * y = source ; y < maxY ; y += width * 2 )
>3359	CompoundStatement	 
>3360	ForStatement	for ( const float * x = y ; x < maxX ; x += 8 )
>3361	CompoundStatement	 
>3362	ExpressionStatement	 
>3363	AssignmentExpr	dest += 4
>3364	PrimaryExpression	4
>3365	Identifier	dest
>3366	ExpressionStatement	 
>3367	CallExpression	_mm_store_ps ( dest , sum )
>3368	ArgumentList	dest
>3369	Argument	sum
>3370	Identifier	sum
>3371	Argument	dest
>3372	Identifier	dest
>3373	Callee	_mm_store_ps
>3374	Identifier	_mm_store_ps
>3375	ExpressionStatement	 
>3376	AssignmentExpr	sum = _mm_mul_ps ( sum , p025 )
>3377	CallExpression	_mm_mul_ps ( sum , p025 )
>3378	ArgumentList	sum
>3379	Argument	p025
>3380	Identifier	p025
>3381	Argument	sum
>3382	Identifier	sum
>3383	Callee	_mm_mul_ps
>3384	Identifier	_mm_mul_ps
>3385	Identifier	sum
>3386	IdentifierDeclStatement	 
>3387	IdentifierDecl	sum = _mm_add_ps ( sumA , sumB )
>3388	AssignmentExpr	sum = _mm_add_ps ( sumA , sumB )
>3389	CallExpression	_mm_add_ps ( sumA , sumB )
>3390	ArgumentList	sumA
>3391	Argument	sumB
>3392	Identifier	sumB
>3393	Argument	sumA
>3394	Identifier	sumA
>3395	Callee	_mm_add_ps
>3396	Identifier	_mm_add_ps
>3397	Identifier	sum
>3398	Identifier	sum
>3399	IdentifierDeclType	__m128
>3400	IdentifierDeclStatement	 
>3401	IdentifierDecl	sumB = _mm_shuffle_ps ( left , right , _MM_SHUFFLE ( 3 , 1 , 3 , 1 ) )
>3402	AssignmentExpr	sumB = _mm_shuffle_ps ( left , right , _MM_SHUFFLE ( 3 , 1 , 3 , 1 ) )
>3403	CallExpression	_mm_shuffle_ps ( left , right , _MM_SHUFFLE ( 3 , 1 , 3 , 1 ) )
>3404	ArgumentList	left
>3405	Argument	_MM_SHUFFLE ( 3 , 1 , 3 , 1 )
>3406	CallExpression	_MM_SHUFFLE ( 3 , 1 , 3 , 1 )
>3407	ArgumentList	3
>3408	Argument	1
>3409	PrimaryExpression	1
>3410	Argument	3
>3411	PrimaryExpression	3
>3412	Argument	1
>3413	PrimaryExpression	1
>3414	Argument	3
>3415	PrimaryExpression	3
>3416	Callee	_MM_SHUFFLE
>3417	Identifier	_MM_SHUFFLE
>3418	Argument	right
>3419	Identifier	right
>3420	Argument	left
>3421	Identifier	left
>3422	Callee	_mm_shuffle_ps
>3423	Identifier	_mm_shuffle_ps
>3424	Identifier	sumB
>3425	Identifier	sumB
>3426	IdentifierDeclType	__m128
>3427	IdentifierDeclStatement	 
>3428	IdentifierDecl	sumA = _mm_shuffle_ps ( left , right , _MM_SHUFFLE ( 2 , 0 , 2 , 0 ) )
>3429	AssignmentExpr	sumA = _mm_shuffle_ps ( left , right , _MM_SHUFFLE ( 2 , 0 , 2 , 0 ) )
>3430	CallExpression	_mm_shuffle_ps ( left , right , _MM_SHUFFLE ( 2 , 0 , 2 , 0 ) )
>3431	ArgumentList	left
>3432	Argument	_MM_SHUFFLE ( 2 , 0 , 2 , 0 )
>3433	CallExpression	_MM_SHUFFLE ( 2 , 0 , 2 , 0 )
>3434	ArgumentList	2
>3435	Argument	0
>3436	PrimaryExpression	0
>3437	Argument	2
>3438	PrimaryExpression	2
>3439	Argument	0
>3440	PrimaryExpression	0
>3441	Argument	2
>3442	PrimaryExpression	2
>3443	Callee	_MM_SHUFFLE
>3444	Identifier	_MM_SHUFFLE
>3445	Argument	right
>3446	Identifier	right
>3447	Argument	left
>3448	Identifier	left
>3449	Callee	_mm_shuffle_ps
>3450	Identifier	_mm_shuffle_ps
>3451	Identifier	sumA
>3452	Identifier	sumA
>3453	IdentifierDeclType	__m128
>3454	IdentifierDeclStatement	 
>3455	IdentifierDecl	right = _mm_add_ps ( top_right , bot_right )
>3456	AssignmentExpr	right = _mm_add_ps ( top_right , bot_right )
>3457	CallExpression	_mm_add_ps ( top_right , bot_right )
>3458	ArgumentList	top_right
>3459	Argument	bot_right
>3460	Identifier	bot_right
>3461	Argument	top_right
>3462	Identifier	top_right
>3463	Callee	_mm_add_ps
>3464	Identifier	_mm_add_ps
>3465	Identifier	right
>3466	Identifier	right
>3467	IdentifierDeclType	__m128
>3468	IdentifierDeclStatement	 
>3469	IdentifierDecl	bot_right = _mm_load_ps ( ( float * ) x + width + 4 )
>3470	AssignmentExpr	bot_right = _mm_load_ps ( ( float * ) x + width + 4 )
>3471	CallExpression	_mm_load_ps ( ( float * ) x + width + 4 )
>3472	ArgumentList	( float * ) x + width + 4
>3473	Argument	( float * ) x + width + 4
>3474	AdditiveExpression	( float * ) x + width + 4
>3475	AdditiveExpression	width + 4
>3476	PrimaryExpression	4
>3477	Identifier	width
>3478	CastExpression	( float * ) x
>3479	Identifier	x
>3480	CastTarget	float *
>3481	Callee	_mm_load_ps
>3482	Identifier	_mm_load_ps
>3483	Identifier	bot_right
>3484	Identifier	bot_right
>3485	IdentifierDeclType	__m128
>3486	IdentifierDeclStatement	 
>3487	IdentifierDecl	top_right = _mm_load_ps ( ( float * ) x + 4 )
>3488	AssignmentExpr	top_right = _mm_load_ps ( ( float * ) x + 4 )
>3489	CallExpression	_mm_load_ps ( ( float * ) x + 4 )
>3490	ArgumentList	( float * ) x + 4
>3491	Argument	( float * ) x + 4
>3492	AdditiveExpression	( float * ) x + 4
>3493	PrimaryExpression	4
>3494	CastExpression	( float * ) x
>3495	Identifier	x
>3496	CastTarget	float *
>3497	Callee	_mm_load_ps
>3498	Identifier	_mm_load_ps
>3499	Identifier	top_right
>3500	Identifier	top_right
>3501	IdentifierDeclType	__m128
>3502	IdentifierDeclStatement	 
>3503	IdentifierDecl	left = _mm_add_ps ( top_left , bot_left )
>3504	AssignmentExpr	left = _mm_add_ps ( top_left , bot_left )
>3505	CallExpression	_mm_add_ps ( top_left , bot_left )
>3506	ArgumentList	top_left
>3507	Argument	bot_left
>3508	Identifier	bot_left
>3509	Argument	top_left
>3510	Identifier	top_left
>3511	Callee	_mm_add_ps
>3512	Identifier	_mm_add_ps
>3513	Identifier	left
>3514	Identifier	left
>3515	IdentifierDeclType	__m128
>3516	IdentifierDeclStatement	 
>3517	IdentifierDecl	bot_left = _mm_load_ps ( ( float * ) x + width )
>3518	AssignmentExpr	bot_left = _mm_load_ps ( ( float * ) x + width )
>3519	CallExpression	_mm_load_ps ( ( float * ) x + width )
>3520	ArgumentList	( float * ) x + width
>3521	Argument	( float * ) x + width
>3522	AdditiveExpression	( float * ) x + width
>3523	Identifier	width
>3524	CastExpression	( float * ) x
>3525	Identifier	x
>3526	CastTarget	float *
>3527	Callee	_mm_load_ps
>3528	Identifier	_mm_load_ps
>3529	Identifier	bot_left
>3530	Identifier	bot_left
>3531	IdentifierDeclType	__m128
>3532	IdentifierDeclStatement	 
>3533	IdentifierDecl	top_left = _mm_load_ps ( ( float * ) x )
>3534	AssignmentExpr	top_left = _mm_load_ps ( ( float * ) x )
>3535	CallExpression	_mm_load_ps ( ( float * ) x )
>3536	ArgumentList	( float * ) x
>3537	Argument	( float * ) x
>3538	CastExpression	( float * ) x
>3539	Identifier	x
>3540	CastTarget	float *
>3541	Callee	_mm_load_ps
>3542	Identifier	_mm_load_ps
>3543	Identifier	top_left
>3544	Identifier	top_left
>3545	IdentifierDeclType	__m128
>3546	AssignmentExpr	 
>3547	PrimaryExpression	8
>3548	Identifier	x
>3549	Condition	 
>3550	RelationalExpression	x < maxX
>3551	Identifier	maxX
>3552	Identifier	x
>3553	ForInit	 
>3554	IdentifierDeclStatement	const float * x = y ;
>3555	IdentifierDecl	* x = y
>3556	AssignmentExpr	* x = y
>3557	Identifier	y
>3558	Identifier	y
>3559	Identifier	x
>3560	IdentifierDeclType	const float *
>3561	IdentifierDeclStatement	 
>3562	IdentifierDecl	* maxX = y + width
>3563	AssignmentExpr	* maxX = y + width
>3564	AdditiveExpression	y + width
>3565	Identifier	width
>3566	Identifier	y
>3567	Identifier	maxX
>3568	Identifier	maxX
>3569	IdentifierDeclType	const float *
>3570	AssignmentExpr	 
>3571	MultiplicativeExpression	width * 2
>3572	PrimaryExpression	2
>3573	Identifier	width
>3574	Identifier	y
>3575	Condition	 
>3576	RelationalExpression	y < maxY
>3577	Identifier	maxY
>3578	Identifier	y
>3579	ForInit	 
>3580	IdentifierDeclStatement	const float * y = source ;
>3581	IdentifierDecl	* y = source
>3582	AssignmentExpr	* y = source
>3583	Identifier	source
>3584	Identifier	source
>3585	Identifier	y
>3586	IdentifierDeclType	const float *
>3587	IdentifierDeclStatement	 
>3588	IdentifierDecl	* maxY = source + width * height
>3589	AssignmentExpr	* maxY = source + width * height
>3590	AdditiveExpression	source + width * height
>3591	MultiplicativeExpression	width * height
>3592	Identifier	height
>3593	Identifier	width
>3594	Identifier	source
>3595	Identifier	maxY
>3596	Identifier	maxY
>3597	IdentifierDeclType	const float *
>3598	IdentifierDeclStatement	 
>3599	IdentifierDecl	p025 = _mm_setr_ps ( 0.25f , 0.25f , 0.25f , 0.25f )
>3600	AssignmentExpr	p025 = _mm_setr_ps ( 0.25f , 0.25f , 0.25f , 0.25f )
>3601	CallExpression	_mm_setr_ps ( 0.25f , 0.25f , 0.25f , 0.25f )
>3602	ArgumentList	0.25f
>3603	Argument	0.25f
>3604	PrimaryExpression	0.25f
>3605	Argument	0.25f
>3606	PrimaryExpression	0.25f
>3607	Argument	0.25f
>3608	PrimaryExpression	0.25f
>3609	Argument	0.25f
>3610	PrimaryExpression	0.25f
>3611	Callee	_mm_setr_ps
>3612	Identifier	_mm_setr_ps
>3613	Identifier	p025
>3614	Identifier	p025
>3615	IdentifierDeclType	__m128
>3616	Condition	 
>3617	EqualityExpression	width % 8 == 0
>3618	PrimaryExpression	0
>3619	MultiplicativeExpression	width % 8
>3620	PrimaryExpression	8
>3621	Identifier	width
>3622	IdentifierDeclStatement	 
>3623	IdentifierDecl	* dest = data . image [ level ]
>3624	AssignmentExpr	* dest = data . image [ level ]
>3625	ArrayIndexing	data . image [ level ]
>3626	Identifier	level
>3627	MemberAccess	data . image
>3628	Identifier	image
>3629	Identifier	data
>3630	Identifier	dest
>3631	Identifier	dest
>3632	IdentifierDeclType	float *
>3633	IfStatement	if ( data . image [ level ] == 0 )
>3634	ExpressionStatement	 
>3635	AssignmentExpr	data . image [ level ] = FrameMemory 
>3636	CallExpression	FrameMemory 
>3637	ArgumentList	data . width [ level ] * data . height [ level ]
>3638	Argument	data . width [ level ] * data . height [ level ]
>3639	MultiplicativeExpression	data . width [ level ] * data . height [ level ]
>3640	ArrayIndexing	data . height [ level ]
>3641	Identifier	level
>3642	MemberAccess	data . height
>3643	Identifier	height
>3644	Identifier	data
>3645	ArrayIndexing	data . width [ level ]
>3646	Identifier	level
>3647	MemberAccess	data . width
>3648	Identifier	width
>3649	Identifier	data
>3650	Callee	FrameMemory 
>3651	MemberAccess	FrameMemory 
>3652	Identifier	getFloatBuffer
>3653	CallExpression	FrameMemory 
>3654	ArgumentList	 
>3655	Callee	FrameMemory 
>3656	Identifier	FrameMemory 
>3657	ArrayIndexing	data . image [ level ]
>3658	Identifier	level
>3659	MemberAccess	data . image
>3660	Identifier	image
>3661	Identifier	data
>3662	Condition	 
>3663	EqualityExpression	data . image [ level ] == 0
>3664	PrimaryExpression	0
>3665	ArrayIndexing	data . image [ level ]
>3666	Identifier	level
>3667	MemberAccess	data . image
>3668	Identifier	image
>3669	Identifier	data
>3670	IdentifierDeclStatement	 
>3671	IdentifierDecl	* source = data . image [ level - 1 ]
>3672	AssignmentExpr	* source = data . image [ level - 1 ]
>3673	ArrayIndexing	data . image [ level - 1 ]
>3674	AdditiveExpression	level - 1
>3675	PrimaryExpression	1
>3676	Identifier	level
>3677	MemberAccess	data . image
>3678	Identifier	image
>3679	Identifier	data
>3680	Identifier	source
>3681	Identifier	source
>3682	IdentifierDeclType	const float *
>3683	IdentifierDeclStatement	 
>3684	IdentifierDecl	height = data . height [ level - 1 ]
>3685	AssignmentExpr	height = data . height [ level - 1 ]
>3686	ArrayIndexing	data . height [ level - 1 ]
>3687	AdditiveExpression	level - 1
>3688	PrimaryExpression	1
>3689	Identifier	level
>3690	MemberAccess	data . height
>3691	Identifier	height
>3692	Identifier	data
>3693	Identifier	height
>3694	Identifier	height
>3695	IdentifierDeclType	int
>3696	IdentifierDeclStatement	 
>3697	IdentifierDecl	width = data . width [ level - 1 ]
>3698	AssignmentExpr	width = data . width [ level - 1 ]
>3699	ArrayIndexing	data . width [ level - 1 ]
>3700	AdditiveExpression	level - 1
>3701	PrimaryExpression	1
>3702	Identifier	level
>3703	MemberAccess	data . width
>3704	Identifier	width
>3705	Identifier	data
>3706	Identifier	width
>3707	Identifier	width
>3708	IdentifierDeclType	int
>3709	IfStatement	if ( enablePrintDebugInfo && printFrameBuildDebugInfo )
>3710	ExpressionStatement	 
>3711	CallExpression	printf ( \"CREATE Image lvl %d for frame %d\n\" , level , id ( ) )
>3712	ArgumentList	\"CREATE Image lvl %d for frame %d\n\"
>3713	Argument	id ( )
>3714	CallExpression	id ( )
>3715	ArgumentList	 
>3716	Callee	id
>3717	Identifier	id
>3718	Argument	level
>3719	Identifier	level
>3720	Argument	\"CREATE Image lvl %d for frame %d\n\"
>3721	PrimaryExpression	\"CREATE Image lvl %d for frame %d\n\"
>3722	Callee	printf
>3723	Identifier	printf
>3724	Condition	 
>3725	AndExpression	enablePrintDebugInfo && printFrameBuildDebugInfo
>3726	Identifier	printFrameBuildDebugInfo
>3727	Identifier	enablePrintDebugInfo
>3728	IfStatement	if ( data . imageValid [ level ] )
>3729	ReturnStatement	 
>3730	Condition	 
>3731	ArrayIndexing	data . imageValid [ level ]
>3732	Identifier	level
>3733	MemberAccess	data . imageValid
>3734	Identifier	imageValid
>3735	Identifier	data
>3736	IdentifierDeclStatement	 
>3737	IdentifierDecl	lock2 ( buildMutex )
>3738	Identifier	buildMutex
>3739	Identifier	lock2
>3740	IdentifierDeclType	boost 
>3741	ExpressionStatement	 
>3742	CallExpression	require ( IMAGE , level - 1 )
>3743	ArgumentList	IMAGE
>3744	Argument	level - 1
>3745	AdditiveExpression	level - 1
>3746	PrimaryExpression	1
>3747	Identifier	level
>3748	Argument	IMAGE
>3749	Identifier	IMAGE
>3750	Callee	require
>3751	Identifier	require
>3752	IfStatement	if ( level == 0 )
>3753	CompoundStatement	 
>3754	ReturnStatement	 
>3755	ExpressionStatement	 
>3756	CallExpression	printf ( \"Frame
>3757	ArgumentList	\"Frame
>3758	Argument	\"Frame
>3759	PrimaryExpression	\"Frame
>3760	Callee	printf
>3761	Identifier	printf
>3762	Condition	 
>3763	EqualityExpression	level == 0
>3764	PrimaryExpression	0
>3765	Identifier	level
>3818	FunctionDef	Frame 
>3819	ParameterList	int level
>3820	Parameter	 
>3821	Identifier	level
>3822	ParameterType	int
>3823	ReturnType	void
>3824	CompoundStatement	 
>3825	ExpressionStatement	 
>3826	AssignmentExpr	data . image [ level ] = 0
>3827	PrimaryExpression	0
>3828	ArrayIndexing	data . image [ level ]
>3829	Identifier	level
>3830	MemberAccess	data . image
>3831	Identifier	image
>3832	Identifier	data
>3833	ExpressionStatement	 
>3834	CallExpression	FrameMemory 
>3835	ArgumentList	data . image [ level ]
>3836	Argument	data . image [ level ]
>3837	ArrayIndexing	data . image [ level ]
>3838	Identifier	level
>3839	MemberAccess	data . image
>3840	Identifier	image
>3841	Identifier	data
>3842	Callee	FrameMemory 
>3843	MemberAccess	FrameMemory 
>3844	Identifier	returnBuffer
>3845	CallExpression	FrameMemory 
>3846	ArgumentList	 
>3847	Callee	FrameMemory 
>3848	Identifier	FrameMemory 
>3849	IfStatement	if ( level == 0 )
>3850	CompoundStatement	 
>3851	ReturnStatement	 
>3852	ExpressionStatement	 
>3853	CallExpression	printf ( \"Frame
>3854	ArgumentList	\"Frame
>3855	Argument	\"Frame
>3856	PrimaryExpression	\"Frame
>3857	Callee	printf
>3858	Identifier	printf
>3859	Condition	 
>3860	EqualityExpression	level == 0
>3861	PrimaryExpression	0
>3862	Identifier	level
>3873	FunctionDef	Frame 
>3874	ParameterList	int level
>3875	Parameter	 
>3876	Identifier	level
>3877	ParameterType	int
>3878	ReturnType	void
>3879	CompoundStatement	 
>3880	ExpressionStatement	 
>3881	AssignmentExpr	data . gradientsValid [ level ] = true
>3882	Identifier	true
>3883	ArrayIndexing	data . gradientsValid [ level ]
>3884	Identifier	level
>3885	MemberAccess	data . gradientsValid
>3886	Identifier	gradientsValid
>3887	Identifier	data
>3888	ForStatement	for ( ; img_pt < img_pt_max ; img_pt ++ , gradxyii_pt ++ )
>3889	CompoundStatement	 
>3890	ExpressionStatement	 
>3891	AssignmentExpr	val_00 = val_p1
>3892	Identifier	val_p1
>3893	Identifier	val_00
>3894	ExpressionStatement	 
>3895	AssignmentExpr	val_m1 = val_00
>3896	Identifier	val_00
>3897	Identifier	val_m1
>3898	ExpressionStatement	 
>3899	AssignmentExpr	* ( ( ( float * ) gradxyii_pt ) + 2 ) = val_00
>3900	Identifier	val_00
>3901	UnaryOp	* ( ( ( float * ) gradxyii_pt ) + 2 )
>3902	AdditiveExpression	( ( float * ) gradxyii_pt ) + 2
>3903	PrimaryExpression	2
>3904	CastExpression	( float * ) gradxyii_pt
>3905	Identifier	gradxyii_pt
>3906	CastTarget	float *
>3907	UnaryOperator	*
>3908	ExpressionStatement	 
>3909	AssignmentExpr	* ( ( ( float * ) gradxyii_pt ) + 1 ) = 0.5f * ( * ( img_pt + width ) - * ( img_pt - width ) )
>3910	MultiplicativeExpression	0.5f * ( * ( img_pt + width ) - * ( img_pt - width ) )
>3911	AdditiveExpression	* ( img_pt + width ) - * ( img_pt - width )
>3912	UnaryOp	* ( img_pt - width )
>3913	AdditiveExpression	img_pt - width
>3914	Identifier	width
>3915	Identifier	img_pt
>3916	UnaryOperator	*
>3917	UnaryOp	* ( img_pt + width )
>3918	AdditiveExpression	img_pt + width
>3919	Identifier	width
>3920	Identifier	img_pt
>3921	UnaryOperator	*
>3922	PrimaryExpression	0.5f
>3923	UnaryOp	* ( ( ( float * ) gradxyii_pt ) + 1 )
>3924	AdditiveExpression	( ( float * ) gradxyii_pt ) + 1
>3925	PrimaryExpression	1
>3926	CastExpression	( float * ) gradxyii_pt
>3927	Identifier	gradxyii_pt
>3928	CastTarget	float *
>3929	UnaryOperator	*
>3930	ExpressionStatement	 
>3931	AssignmentExpr	* ( ( float * ) gradxyii_pt ) = 0.5f * ( val_p1 - val_m1 )
>3932	MultiplicativeExpression	0.5f * ( val_p1 - val_m1 )
>3933	AdditiveExpression	val_p1 - val_m1
>3934	Identifier	val_m1
>3935	Identifier	val_p1
>3936	PrimaryExpression	0.5f
>3937	UnaryOp	* ( ( float * ) gradxyii_pt )
>3938	CastExpression	( float * ) gradxyii_pt
>3939	Identifier	gradxyii_pt
>3940	CastTarget	float *
>3941	UnaryOperator	*
>3942	ExpressionStatement	 
>3943	AssignmentExpr	val_p1 = * ( img_pt + 1 )
>3944	UnaryOp	* ( img_pt + 1 )
>3945	AdditiveExpression	img_pt + 1
>3946	PrimaryExpression	1
>3947	Identifier	img_pt
>3948	UnaryOperator	*
>3949	Identifier	val_p1
>3950	Expression	 
>3951	IncDecOp	gradxyii_pt ++
>3952	IncDec	++
>3953	Identifier	gradxyii_pt
>3954	IncDecOp	img_pt ++
>3955	IncDec	++
>3956	Identifier	img_pt
>3957	Condition	 
>3958	RelationalExpression	img_pt < img_pt_max
>3959	Identifier	img_pt_max
>3960	Identifier	img_pt
>3961	IdentifierDeclStatement	 
>3962	IdentifierDecl	val_p1
>3963	Identifier	val_p1
>3964	IdentifierDeclType	float
>3965	IdentifierDeclStatement	 
>3966	IdentifierDecl	val_00 = * img_pt
>3967	AssignmentExpr	val_00 = * img_pt
>3968	UnaryOp	* img_pt
>3969	Identifier	img_pt
>3970	UnaryOperator	*
>3971	Identifier	val_00
>3972	Identifier	val_00
>3973	IdentifierDeclType	float
>3974	IdentifierDeclStatement	 
>3975	IdentifierDecl	val_m1 = * ( img_pt - 1 )
>3976	AssignmentExpr	val_m1 = * ( img_pt - 1 )
>3977	UnaryOp	* ( img_pt - 1 )
>3978	AdditiveExpression	img_pt - 1
>3979	PrimaryExpression	1
>3980	Identifier	img_pt
>3981	UnaryOperator	*
>3982	Identifier	val_m1
>3983	Identifier	val_m1
>3984	IdentifierDeclType	float
>3985	IdentifierDeclStatement	 
>3986	IdentifierDecl	* gradxyii_pt = data . gradients [ level ] + width
>3987	AssignmentExpr	* gradxyii_pt = data . gradients [ level ] + width
>3988	AdditiveExpression	data . gradients [ level ] + width
>3989	Identifier	width
>3990	ArrayIndexing	data . gradients [ level ]
>3991	Identifier	level
>3992	MemberAccess	data . gradients
>3993	Identifier	gradients
>3994	Identifier	data
>3995	Identifier	gradxyii_pt
>3996	Identifier	gradxyii_pt
>3997	IdentifierDeclType	Eigen 
>3998	IdentifierDeclStatement	 
>3999	IdentifierDecl	* img_pt_max = data . image [ level ] + width * ( height - 1 )
>4000	AssignmentExpr	* img_pt_max = data . image [ level ] + width * ( height - 1 )
>4001	AdditiveExpression	data . image [ level ] + width * ( height - 1 )
>4002	MultiplicativeExpression	width * ( height - 1 )
>4003	AdditiveExpression	height - 1
>4004	PrimaryExpression	1
>4005	Identifier	height
>4006	Identifier	width
>4007	ArrayIndexing	data . image [ level ]
>4008	Identifier	level
>4009	MemberAccess	data . image
>4010	Identifier	image
>4011	Identifier	data
>4012	Identifier	img_pt_max
>4013	Identifier	img_pt_max
>4014	IdentifierDeclType	const float *
>4015	IdentifierDeclStatement	 
>4016	IdentifierDecl	* img_pt = data . image [ level ] + width
>4017	AssignmentExpr	* img_pt = data . image [ level ] + width
>4018	AdditiveExpression	data . image [ level ] + width
>4019	Identifier	width
>4020	ArrayIndexing	data . image [ level ]
>4021	Identifier	level
>4022	MemberAccess	data . image
>4023	Identifier	image
>4024	Identifier	data
>4025	Identifier	img_pt
>4026	Identifier	img_pt
>4027	IdentifierDeclType	const float *
>4028	IfStatement	if ( data . gradients [ level ] == 0 )
>4029	ExpressionStatement	 
>4030	AssignmentExpr	data . gradients [ level ] = ( Eigen 
>4031	CastExpression	( Eigen 
>4032	CallExpression	FrameMemory 
>4033	ArgumentList	sizeof ( Eigen 
>4034	Argument	sizeof ( Eigen 
>4035	MultiplicativeExpression	sizeof ( Eigen 
>4036	MultiplicativeExpression	width * height
>4037	Identifier	height
>4038	Identifier	width
>4039	SizeofExpr	sizeof ( Eigen 
>4040	SizeofOperand	Eigen 
>4041	Sizeof	sizeof
>4042	Callee	FrameMemory 
>4043	MemberAccess	FrameMemory 
>4044	Identifier	getBuffer
>4045	CallExpression	FrameMemory 
>4046	ArgumentList	 
>4047	Callee	FrameMemory 
>4048	Identifier	FrameMemory 
>4049	CastTarget	Eigen 
>4050	ArrayIndexing	data . gradients [ level ]
>4051	Identifier	level
>4052	MemberAccess	data . gradients
>4053	Identifier	gradients
>4054	Identifier	data
>4055	Condition	 
>4056	EqualityExpression	data . gradients [ level ] == 0
>4057	PrimaryExpression	0
>4058	ArrayIndexing	data . gradients [ level ]
>4059	Identifier	level
>4060	MemberAccess	data . gradients
>4061	Identifier	gradients
>4062	Identifier	data
>4063	IdentifierDeclStatement	 
>4064	IdentifierDecl	height = data . height [ level ]
>4065	AssignmentExpr	height = data . height [ level ]
>4066	ArrayIndexing	data . height [ level ]
>4067	Identifier	level
>4068	MemberAccess	data . height
>4069	Identifier	height
>4070	Identifier	data
>4071	Identifier	height
>4072	Identifier	height
>4073	IdentifierDeclType	int
>4074	IdentifierDeclStatement	 
>4075	IdentifierDecl	width = data . width [ level ]
>4076	AssignmentExpr	width = data . width [ level ]
>4077	ArrayIndexing	data . width [ level ]
>4078	Identifier	level
>4079	MemberAccess	data . width
>4080	Identifier	width
>4081	Identifier	data
>4082	Identifier	width
>4083	Identifier	width
>4084	IdentifierDeclType	int
>4085	IfStatement	if ( enablePrintDebugInfo && printFrameBuildDebugInfo )
>4086	ExpressionStatement	 
>4087	CallExpression	printf ( \"CREATE Gradients lvl %d for frame %d\n\" , level , id ( ) )
>4088	ArgumentList	\"CREATE Gradients lvl %d for frame %d\n\"
>4089	Argument	id ( )
>4090	CallExpression	id ( )
>4091	ArgumentList	 
>4092	Callee	id
>4093	Identifier	id
>4094	Argument	level
>4095	Identifier	level
>4096	Argument	\"CREATE Gradients lvl %d for frame %d\n\"
>4097	PrimaryExpression	\"CREATE Gradients lvl %d for frame %d\n\"
>4098	Callee	printf
>4099	Identifier	printf
>4100	Condition	 
>4101	AndExpression	enablePrintDebugInfo && printFrameBuildDebugInfo
>4102	Identifier	printFrameBuildDebugInfo
>4103	Identifier	enablePrintDebugInfo
>4104	IfStatement	if ( data . gradientsValid [ level ] )
>4105	ReturnStatement	 
>4106	Condition	 
>4107	ArrayIndexing	data . gradientsValid [ level ]
>4108	Identifier	level
>4109	MemberAccess	data . gradientsValid
>4110	Identifier	gradientsValid
>4111	Identifier	data
>4112	IdentifierDeclStatement	 
>4113	IdentifierDecl	lock2 ( buildMutex )
>4114	Identifier	buildMutex
>4115	Identifier	lock2
>4116	IdentifierDeclType	boost 
>4117	ExpressionStatement	 
>4118	CallExpression	require ( IMAGE , level )
>4119	ArgumentList	IMAGE
>4120	Argument	level
>4121	Identifier	level
>4122	Argument	IMAGE
>4123	Identifier	IMAGE
>4124	Callee	require
>4125	Identifier	require
>4169	FunctionDef	Frame 
>4170	ParameterList	int level
>4171	Parameter	 
>4172	Identifier	level
>4173	ParameterType	int
>4174	ReturnType	void
>4175	CompoundStatement	 
>4176	ExpressionStatement	 
>4177	AssignmentExpr	data . gradients [ level ] = 0
>4178	PrimaryExpression	0
>4179	ArrayIndexing	data . gradients [ level ]
>4180	Identifier	level
>4181	MemberAccess	data . gradients
>4182	Identifier	gradients
>4183	Identifier	data
>4184	ExpressionStatement	 
>4185	Statement	 
>4186	Statement	 
>4187	Statement	 
>4188	Statement	 
>4189	Statement	 
>4190	Statement	 
>4191	Statement	 
>4192	Statement	 
>4193	Statement	 
>4194	Statement	 
>4195	Statement	 
>4196	Statement	 
>4197	Statement	 
>4198	Statement	 
>4199	Statement	 
>4200	Statement	 
>4201	Statement	 
>4202	Statement	 
>4203	Statement	 
>4204	Statement	 
>4205	Statement	 
>4206	Statement	 
>4216	FunctionDef	Frame 
>4217	ParameterList	int level
>4218	Parameter	 
>4219	Identifier	level
>4220	ParameterType	int
>4221	ReturnType	void
>4222	CompoundStatement	 
>4223	ExpressionStatement	 
>4224	AssignmentExpr	data . maxGradientsValid [ level ] = true
>4225	Identifier	true
>4226	ArrayIndexing	data . maxGradientsValid [ level ]
>4227	Identifier	level
>4228	MemberAccess	data . maxGradientsValid
>4229	Identifier	maxGradientsValid
>4230	Identifier	data
>4231	ExpressionStatement	 
>4232	CallExpression	FrameMemory 
>4233	ArgumentList	maxGradTemp
>4234	Argument	maxGradTemp
>4235	Identifier	maxGradTemp
>4236	Callee	FrameMemory 
>4237	MemberAccess	FrameMemory 
>4238	Identifier	returnBuffer
>4239	CallExpression	FrameMemory 
>4240	ArgumentList	 
>4241	Callee	FrameMemory 
>4242	Identifier	FrameMemory 
>4243	IfStatement	if ( level == 0 )
>4244	ExpressionStatement	 
>4245	AssignmentExpr	this -> numMappablePixels = numMappablePixels
>4246	Identifier	numMappablePixels
>4247	PtrMemberAccess	this -> numMappablePixels
>4248	Identifier	numMappablePixels
>4249	Identifier	this
>4250	Condition	 
>4251	EqualityExpression	level == 0
>4252	PrimaryExpression	0
>4253	Identifier	level
>4254	ForStatement	for ( ; maxgrad_pt < maxgrad_pt_max ; maxgrad_pt ++ , maxgrad_t_pt ++ )
>4255	CompoundStatement	 
>4256	IfStatement	if ( g1 < g3 )
>4257	ElseStatement	else
>4258	CompoundStatement	 
>4259	IfStatement	if ( g1 >= MIN_ABS_GRAD_CREATE )
>4260	ExpressionStatement	 
>4261	IncDecOp	numMappablePixels ++
>4262	IncDec	++
>4263	Identifier	numMappablePixels
>4264	Condition	 
>4265	RelationalExpression	g1 >= MIN_ABS_GRAD_CREATE
>4266	Identifier	MIN_ABS_GRAD_CREATE
>4267	Identifier	g1
>4268	ExpressionStatement	 
>4269	AssignmentExpr	* maxgrad_pt = g1
>4270	Identifier	g1
>4271	UnaryOp	* maxgrad_pt
>4272	Identifier	maxgrad_pt
>4273	UnaryOperator	*
>4274	CompoundStatement	 
>4275	IfStatement	if ( g3 >= MIN_ABS_GRAD_CREATE )
>4276	ExpressionStatement	 
>4277	IncDecOp	numMappablePixels ++
>4278	IncDec	++
>4279	Identifier	numMappablePixels
>4280	Condition	 
>4281	RelationalExpression	g3 >= MIN_ABS_GRAD_CREATE
>4282	Identifier	MIN_ABS_GRAD_CREATE
>4283	Identifier	g3
>4284	ExpressionStatement	 
>4285	AssignmentExpr	* maxgrad_pt = g3
>4286	Identifier	g3
>4287	UnaryOp	* maxgrad_pt
>4288	Identifier	maxgrad_pt
>4289	UnaryOperator	*
>4290	Condition	 
>4291	RelationalExpression	g1 < g3
>4292	Identifier	g3
>4293	Identifier	g1
>4294	IdentifierDeclStatement	 
>4295	IdentifierDecl	g3 = maxgrad_t_pt [ 1 ]
>4296	AssignmentExpr	g3 = maxgrad_t_pt [ 1 ]
>4297	ArrayIndexing	maxgrad_t_pt [ 1 ]
>4298	PrimaryExpression	1
>4299	Identifier	maxgrad_t_pt
>4300	Identifier	g3
>4301	Identifier	g3
>4302	IdentifierDeclType	float
>4303	IfStatement	if ( g1 < g2 )
>4304	ExpressionStatement	 
>4305	AssignmentExpr	g1 = g2
>4306	Identifier	g2
>4307	Identifier	g1
>4308	Condition	 
>4309	RelationalExpression	g1 < g2
>4310	Identifier	g2
>4311	Identifier	g1
>4312	IdentifierDeclStatement	 
>4313	IdentifierDecl	g2 = maxgrad_t_pt [ 0 ]
>4314	AssignmentExpr	g2 = maxgrad_t_pt [ 0 ]
>4315	ArrayIndexing	maxgrad_t_pt [ 0 ]
>4316	PrimaryExpression	0
>4317	Identifier	maxgrad_t_pt
>4318	Identifier	g2
>4319	Identifier	g2
>4320	IdentifierDeclType	float
>4321	IdentifierDeclStatement	 
>4322	IdentifierDecl	g1 = maxgrad_t_pt [ - 1 ]
>4323	AssignmentExpr	g1 = maxgrad_t_pt [ - 1 ]
>4324	ArrayIndexing	maxgrad_t_pt [ - 1 ]
>4325	UnaryOp	- 1
>4326	PrimaryExpression	1
>4327	UnaryOperator	-
>4328	Identifier	maxgrad_t_pt
>4329	Identifier	g1
>4330	Identifier	g1
>4331	IdentifierDeclType	float
>4332	Expression	 
>4333	IncDecOp	maxgrad_t_pt ++
>4334	IncDec	++
>4335	Identifier	maxgrad_t_pt
>4336	IncDecOp	maxgrad_pt ++
>4337	IncDec	++
>4338	Identifier	maxgrad_pt
>4339	Condition	 
>4340	RelationalExpression	maxgrad_pt < maxgrad_pt_max
>4341	Identifier	maxgrad_pt_max
>4342	Identifier	maxgrad_pt
>4343	ExpressionStatement	 
>4344	AssignmentExpr	maxgrad_t_pt = maxGradTemp + width + 1
>4345	AdditiveExpression	maxGradTemp + width + 1
>4346	AdditiveExpression	width + 1
>4347	PrimaryExpression	1
>4348	Identifier	width
>4349	Identifier	maxGradTemp
>4350	Identifier	maxgrad_t_pt
>4351	ExpressionStatement	 
>4352	AssignmentExpr	maxgrad_pt_max = data . maxGradients [ level ] + width * ( height - 1 ) - 1
>4353	AdditiveExpression	data . maxGradients [ level ] + width * ( height - 1 ) - 1
>4354	AdditiveExpression	width * ( height - 1 ) - 1
>4355	PrimaryExpression	1
>4356	MultiplicativeExpression	width * ( height - 1 )
>4357	AdditiveExpression	height - 1
>4358	PrimaryExpression	1
>4359	Identifier	height
>4360	Identifier	width
>4361	ArrayIndexing	data . maxGradients [ level ]
>4362	Identifier	level
>4363	MemberAccess	data . maxGradients
>4364	Identifier	maxGradients
>4365	Identifier	data
>4366	Identifier	maxgrad_pt_max
>4367	ExpressionStatement	 
>4368	AssignmentExpr	maxgrad_pt = data . maxGradients [ level ] + width + 1
>4369	AdditiveExpression	data . maxGradients [ level ] + width + 1
>4370	AdditiveExpression	width + 1
>4371	PrimaryExpression	1
>4372	Identifier	width
>4373	ArrayIndexing	data . maxGradients [ level ]
>4374	Identifier	level
>4375	MemberAccess	data . maxGradients
>4376	Identifier	maxGradients
>4377	Identifier	data
>4378	Identifier	maxgrad_pt
>4379	IdentifierDeclStatement	 
>4380	IdentifierDecl	numMappablePixels = 0
>4381	AssignmentExpr	numMappablePixels = 0
>4382	PrimaryExpression	0
>4383	Identifier	numMappablePixels
>4384	Identifier	numMappablePixels
>4385	IdentifierDeclType	float
>4386	ForStatement	for ( ; maxgrad_pt < maxgrad_pt_max ; maxgrad_pt ++ , maxgrad_t_pt ++ )
>4387	CompoundStatement	 
>4388	IfStatement	if ( g1 < g3 )
>4389	ElseStatement	else
>4390	ExpressionStatement	 
>4391	AssignmentExpr	* maxgrad_t_pt = g1
>4392	Identifier	g1
>4393	UnaryOp	* maxgrad_t_pt
>4394	Identifier	maxgrad_t_pt
>4395	UnaryOperator	*
>4396	ExpressionStatement	 
>4397	AssignmentExpr	* maxgrad_t_pt = g3
>4398	Identifier	g3
>4399	UnaryOp	* maxgrad_t_pt
>4400	Identifier	maxgrad_t_pt
>4401	UnaryOperator	*
>4402	Condition	 
>4403	RelationalExpression	g1 < g3
>4404	Identifier	g3
>4405	Identifier	g1
>4406	IdentifierDeclStatement	 
>4407	IdentifierDecl	g3 = maxgrad_pt [ width ]
>4408	AssignmentExpr	g3 = maxgrad_pt [ width ]
>4409	ArrayIndexing	maxgrad_pt [ width ]
>4410	Identifier	width
>4411	Identifier	maxgrad_pt
>4412	Identifier	g3
>4413	Identifier	g3
>4414	IdentifierDeclType	float
>4415	IfStatement	if ( g1 < g2 )
>4416	ExpressionStatement	 
>4417	AssignmentExpr	g1 = g2
>4418	Identifier	g2
>4419	Identifier	g1
>4420	Condition	 
>4421	RelationalExpression	g1 < g2
>4422	Identifier	g2
>4423	Identifier	g1
>4424	IdentifierDeclStatement	 
>4425	IdentifierDecl	g2 = maxgrad_pt [ 0 ]
>4426	AssignmentExpr	g2 = maxgrad_pt [ 0 ]
>4427	ArrayIndexing	maxgrad_pt [ 0 ]
>4428	PrimaryExpression	0
>4429	Identifier	maxgrad_pt
>4430	Identifier	g2
>4431	Identifier	g2
>4432	IdentifierDeclType	float
>4433	IdentifierDeclStatement	 
>4434	IdentifierDecl	g1 = maxgrad_pt [ - width ]
>4435	AssignmentExpr	g1 = maxgrad_pt [ - width ]
>4436	ArrayIndexing	maxgrad_pt [ - width ]
>4437	UnaryOp	- width
>4438	Identifier	width
>4439	UnaryOperator	-
>4440	Identifier	maxgrad_pt
>4441	Identifier	g1
>4442	Identifier	g1
>4443	IdentifierDeclType	float
>4444	Expression	 
>4445	IncDecOp	maxgrad_t_pt ++
>4446	IncDec	++
>4447	Identifier	maxgrad_t_pt
>4448	IncDecOp	maxgrad_pt ++
>4449	IncDec	++
>4450	Identifier	maxgrad_pt
>4451	Condition	 
>4452	RelationalExpression	maxgrad_pt < maxgrad_pt_max
>4453	Identifier	maxgrad_pt_max
>4454	Identifier	maxgrad_pt
>4455	IdentifierDeclStatement	 
>4456	IdentifierDecl	* maxgrad_t_pt = maxGradTemp + width + 1
>4457	AssignmentExpr	* maxgrad_t_pt = maxGradTemp + width + 1
>4458	AdditiveExpression	maxGradTemp + width + 1
>4459	AdditiveExpression	width + 1
>4460	PrimaryExpression	1
>4461	Identifier	width
>4462	Identifier	maxGradTemp
>4463	Identifier	maxgrad_t_pt
>4464	Identifier	maxgrad_t_pt
>4465	IdentifierDeclType	float *
>4466	ExpressionStatement	 
>4467	AssignmentExpr	maxgrad_pt_max = data . maxGradients [ level ] + width * ( height - 1 ) - 1
>4468	AdditiveExpression	data . maxGradients [ level ] + width * ( height - 1 ) - 1
>4469	AdditiveExpression	width * ( height - 1 ) - 1
>4470	PrimaryExpression	1
>4471	MultiplicativeExpression	width * ( height - 1 )
>4472	AdditiveExpression	height - 1
>4473	PrimaryExpression	1
>4474	Identifier	height
>4475	Identifier	width
>4476	ArrayIndexing	data . maxGradients [ level ]
>4477	Identifier	level
>4478	MemberAccess	data . maxGradients
>4479	Identifier	maxGradients
>4480	Identifier	data
>4481	Identifier	maxgrad_pt_max
>4482	ExpressionStatement	 
>4483	AssignmentExpr	maxgrad_pt = data . maxGradients [ level ] + width + 1
>4484	AdditiveExpression	data . maxGradients [ level ] + width + 1
>4485	AdditiveExpression	width + 1
>4486	PrimaryExpression	1
>4487	Identifier	width
>4488	ArrayIndexing	data . maxGradients [ level ]
>4489	Identifier	level
>4490	MemberAccess	data . maxGradients
>4491	Identifier	maxGradients
>4492	Identifier	data
>4493	Identifier	maxgrad_pt
>4494	ForStatement	for ( ; maxgrad_pt < maxgrad_pt_max ; maxgrad_pt ++ , gradxyii_pt ++ )
>4495	CompoundStatement	 
>4496	ExpressionStatement	 
>4497	AssignmentExpr	* maxgrad_pt = sqrtf ( dx * dx + dy * dy )
>4498	CallExpression	sqrtf ( dx * dx + dy * dy )
>4499	ArgumentList	dx * dx + dy * dy
>4500	Argument	dx * dx + dy * dy
>4501	AdditiveExpression	dx * dx + dy * dy
>4502	MultiplicativeExpression	dy * dy
>4503	Identifier	dy
>4504	Identifier	dy
>4505	MultiplicativeExpression	dx * dx
>4506	Identifier	dx
>4507	Identifier	dx
>4508	Callee	sqrtf
>4509	Identifier	sqrtf
>4510	UnaryOp	* maxgrad_pt
>4511	Identifier	maxgrad_pt
>4512	UnaryOperator	*
>4513	IdentifierDeclStatement	 
>4514	IdentifierDecl	dy = * ( 1 + ( float * ) gradxyii_pt )
>4515	AssignmentExpr	dy = * ( 1 + ( float * ) gradxyii_pt )
>4516	UnaryOp	* ( 1 + ( float * ) gradxyii_pt )
>4517	AdditiveExpression	1 + ( float * ) gradxyii_pt
>4518	CastExpression	( float * ) gradxyii_pt
>4519	Identifier	gradxyii_pt
>4520	CastTarget	float *
>4521	PrimaryExpression	1
>4522	UnaryOperator	*
>4523	Identifier	dy
>4524	Identifier	dy
>4525	IdentifierDeclType	float
>4526	IdentifierDeclStatement	 
>4527	IdentifierDecl	dx = * ( ( float * ) gradxyii_pt )
>4528	AssignmentExpr	dx = * ( ( float * ) gradxyii_pt )
>4529	UnaryOp	* ( ( float * ) gradxyii_pt )
>4530	CastExpression	( float * ) gradxyii_pt
>4531	Identifier	gradxyii_pt
>4532	CastTarget	float *
>4533	UnaryOperator	*
>4534	Identifier	dx
>4535	Identifier	dx
>4536	IdentifierDeclType	float
>4537	Expression	 
>4538	IncDecOp	gradxyii_pt ++
>4539	IncDec	++
>4540	Identifier	gradxyii_pt
>4541	IncDecOp	maxgrad_pt ++
>4542	IncDec	++
>4543	Identifier	maxgrad_pt
>4544	Condition	 
>4545	RelationalExpression	maxgrad_pt < maxgrad_pt_max
>4546	Identifier	maxgrad_pt_max
>4547	Identifier	maxgrad_pt
>4548	IdentifierDeclStatement	 
>4549	IdentifierDecl	* maxgrad_pt_max = data . maxGradients [ level ] + width * ( height - 1 )
>4550	AssignmentExpr	* maxgrad_pt_max = data . maxGradients [ level ] + width * ( height - 1 )
>4551	AdditiveExpression	data . maxGradients [ level ] + width * ( height - 1 )
>4552	MultiplicativeExpression	width * ( height - 1 )
>4553	AdditiveExpression	height - 1
>4554	PrimaryExpression	1
>4555	Identifier	height
>4556	Identifier	width
>4557	ArrayIndexing	data . maxGradients [ level ]
>4558	Identifier	level
>4559	MemberAccess	data . maxGradients
>4560	Identifier	maxGradients
>4561	Identifier	data
>4562	Identifier	maxgrad_pt_max
>4563	Identifier	maxgrad_pt_max
>4564	IdentifierDeclType	float *
>4565	IdentifierDeclStatement	 
>4566	IdentifierDecl	* maxgrad_pt = data . maxGradients [ level ] + width
>4567	AssignmentExpr	* maxgrad_pt = data . maxGradients [ level ] + width
>4568	AdditiveExpression	data . maxGradients [ level ] + width
>4569	Identifier	width
>4570	ArrayIndexing	data . maxGradients [ level ]
>4571	Identifier	level
>4572	MemberAccess	data . maxGradients
>4573	Identifier	maxGradients
>4574	Identifier	data
>4575	Identifier	maxgrad_pt
>4576	Identifier	maxgrad_pt
>4577	IdentifierDeclType	float *
>4578	IdentifierDeclStatement	 
>4579	IdentifierDecl	* gradxyii_pt = data . gradients [ level ] + width
>4580	AssignmentExpr	* gradxyii_pt = data . gradients [ level ] + width
>4581	AdditiveExpression	data . gradients [ level ] + width
>4582	Identifier	width
>4583	ArrayIndexing	data . gradients [ level ]
>4584	Identifier	level
>4585	MemberAccess	data . gradients
>4586	Identifier	gradients
>4587	Identifier	data
>4588	Identifier	gradxyii_pt
>4589	Identifier	gradxyii_pt
>4590	IdentifierDeclType	Eigen 
>4591	IdentifierDeclStatement	 
>4592	IdentifierDecl	* maxGradTemp = FrameMemory 
>4593	AssignmentExpr	* maxGradTemp = FrameMemory 
>4594	CallExpression	FrameMemory 
>4595	ArgumentList	width * height
>4596	Argument	width * height
>4597	MultiplicativeExpression	width * height
>4598	Identifier	height
>4599	Identifier	width
>4600	Callee	FrameMemory 
>4601	MemberAccess	FrameMemory 
>4602	Identifier	getFloatBuffer
>4603	CallExpression	FrameMemory 
>4604	ArgumentList	 
>4605	Callee	FrameMemory 
>4606	Identifier	FrameMemory 
>4607	Identifier	maxGradTemp
>4608	Identifier	maxGradTemp
>4609	IdentifierDeclType	float *
>4610	IfStatement	if ( data . maxGradients [ level ] == 0 )
>4611	ExpressionStatement	 
>4612	AssignmentExpr	data . maxGradients [ level ] = FrameMemory 
>4613	CallExpression	FrameMemory 
>4614	ArgumentList	width * height
>4615	Argument	width * height
>4616	MultiplicativeExpression	width * height
>4617	Identifier	height
>4618	Identifier	width
>4619	Callee	FrameMemory 
>4620	MemberAccess	FrameMemory 
>4621	Identifier	getFloatBuffer
>4622	CallExpression	FrameMemory 
>4623	ArgumentList	 
>4624	Callee	FrameMemory 
>4625	Identifier	FrameMemory 
>4626	ArrayIndexing	data . maxGradients [ level ]
>4627	Identifier	level
>4628	MemberAccess	data . maxGradients
>4629	Identifier	maxGradients
>4630	Identifier	data
>4631	Condition	 
>4632	EqualityExpression	data . maxGradients [ level ] == 0
>4633	PrimaryExpression	0
>4634	ArrayIndexing	data . maxGradients [ level ]
>4635	Identifier	level
>4636	MemberAccess	data . maxGradients
>4637	Identifier	maxGradients
>4638	Identifier	data
>4639	IdentifierDeclStatement	 
>4640	IdentifierDecl	height = data . height [ level ]
>4641	AssignmentExpr	height = data . height [ level ]
>4642	ArrayIndexing	data . height [ level ]
>4643	Identifier	level
>4644	MemberAccess	data . height
>4645	Identifier	height
>4646	Identifier	data
>4647	Identifier	height
>4648	Identifier	height
>4649	IdentifierDeclType	int
>4650	IdentifierDeclStatement	 
>4651	IdentifierDecl	width = data . width [ level ]
>4652	AssignmentExpr	width = data . width [ level ]
>4653	ArrayIndexing	data . width [ level ]
>4654	Identifier	level
>4655	MemberAccess	data . width
>4656	Identifier	width
>4657	Identifier	data
>4658	Identifier	width
>4659	Identifier	width
>4660	IdentifierDeclType	int
>4661	IfStatement	if ( enablePrintDebugInfo && printFrameBuildDebugInfo )
>4662	ExpressionStatement	 
>4663	CallExpression	printf ( \"CREATE AbsGrad lvl %d for frame %d\n\" , level , id ( ) )
>4664	ArgumentList	\"CREATE AbsGrad lvl %d for frame %d\n\"
>4665	Argument	id ( )
>4666	CallExpression	id ( )
>4667	ArgumentList	 
>4668	Callee	id
>4669	Identifier	id
>4670	Argument	level
>4671	Identifier	level
>4672	Argument	\"CREATE AbsGrad lvl %d for frame %d\n\"
>4673	PrimaryExpression	\"CREATE AbsGrad lvl %d for frame %d\n\"
>4674	Callee	printf
>4675	Identifier	printf
>4676	Condition	 
>4677	AndExpression	enablePrintDebugInfo && printFrameBuildDebugInfo
>4678	Identifier	printFrameBuildDebugInfo
>4679	Identifier	enablePrintDebugInfo
>4680	IfStatement	if ( data . maxGradientsValid [ level ] )
>4681	ReturnStatement	 
>4682	Condition	 
>4683	ArrayIndexing	data . maxGradientsValid [ level ]
>4684	Identifier	level
>4685	MemberAccess	data . maxGradientsValid
>4686	Identifier	maxGradientsValid
>4687	Identifier	data
>4688	IdentifierDeclStatement	 
>4689	IdentifierDecl	lock2 ( buildMutex )
>4690	Identifier	buildMutex
>4691	Identifier	lock2
>4692	IdentifierDeclType	boost 
>4693	ExpressionStatement	 
>4694	CallExpression	require ( GRADIENTS , level )
>4695	ArgumentList	GRADIENTS
>4696	Argument	level
>4697	Identifier	level
>4698	Argument	GRADIENTS
>4699	Identifier	GRADIENTS
>4700	Callee	require
>4701	Identifier	require
>4751	FunctionDef	Frame 
>4752	ParameterList	int level
>4753	Parameter	 
>4754	Identifier	level
>4755	ParameterType	int
>4756	ReturnType	void
>4757	CompoundStatement	 
>4758	ExpressionStatement	 
>4759	AssignmentExpr	data . maxGradients [ level ] = 0
>4760	PrimaryExpression	0
>4761	ArrayIndexing	data . maxGradients [ level ]
>4762	Identifier	level
>4763	MemberAccess	data . maxGradients
>4764	Identifier	maxGradients
>4765	Identifier	data
>4766	ExpressionStatement	 
>4767	CallExpression	FrameMemory 
>4768	ArgumentList	data . maxGradients [ level ]
>4769	Argument	data . maxGradients [ level ]
>4770	ArrayIndexing	data . maxGradients [ level ]
>4771	Identifier	level
>4772	MemberAccess	data . maxGradients
>4773	Identifier	maxGradients
>4774	Identifier	data
>4775	Callee	FrameMemory 
>4776	MemberAccess	FrameMemory 
>4777	Identifier	returnBuffer
>4778	CallExpression	FrameMemory 
>4779	ArgumentList	 
>4780	Callee	FrameMemory 
>4781	Identifier	FrameMemory 
>4792	FunctionDef	Frame 
>4793	ParameterList	int level
>4794	Parameter	 
>4795	Identifier	level
>4796	ParameterType	int
>4797	ReturnType	void
>4798	CompoundStatement	 
>4799	ExpressionStatement	 
>4800	AssignmentExpr	data . idepthVarValid [ level ] = true
>4801	Identifier	true
>4802	ArrayIndexing	data . idepthVarValid [ level ]
>4803	Identifier	level
>4804	MemberAccess	data . idepthVarValid
>4805	Identifier	idepthVarValid
>4806	Identifier	data
>4807	ExpressionStatement	 
>4808	AssignmentExpr	data . idepthValid [ level ] = true
>4809	Identifier	true
>4810	ArrayIndexing	data . idepthValid [ level ]
>4811	Identifier	level
>4812	MemberAccess	data . idepthValid
>4813	Identifier	idepthValid
>4814	Identifier	data
>4815	ForStatement	for ( int y = 0 ; y < height ; y ++ )
>4816	CompoundStatement	 
>4817	ForStatement	for ( int x = 0 ; x < width ; x ++ )
>4818	CompoundStatement	 
>4819	IfStatement	if ( num > 0 )
>4820	ElseStatement	else
>4821	CompoundStatement	 
>4822	ExpressionStatement	 
>4823	AssignmentExpr	idepthVarDest [ idxDest ] = - 1
>4824	UnaryOp	- 1
>4825	PrimaryExpression	1
>4826	UnaryOperator	-
>4827	ArrayIndexing	idepthVarDest [ idxDest ]
>4828	Identifier	idxDest
>4829	Identifier	idepthVarDest
>4830	ExpressionStatement	 
>4831	AssignmentExpr	idepthDest [ idxDest ] = - 1
>4832	UnaryOp	- 1
>4833	PrimaryExpression	1
>4834	UnaryOperator	-
>4835	ArrayIndexing	idepthDest [ idxDest ]
>4836	Identifier	idxDest
>4837	Identifier	idepthDest
>4838	CompoundStatement	 
>4839	ExpressionStatement	 
>4840	AssignmentExpr	idepthVarDest [ idxDest ] = num / ivarSumsSum
>4841	MultiplicativeExpression	num / ivarSumsSum
>4842	Identifier	ivarSumsSum
>4843	Identifier	num
>4844	ArrayIndexing	idepthVarDest [ idxDest ]
>4845	Identifier	idxDest
>4846	Identifier	idepthVarDest
>4847	ExpressionStatement	 
>4848	AssignmentExpr	idepthDest [ idxDest ] = 1.0f / depth
>4849	MultiplicativeExpression	1.0f / depth
>4850	Identifier	depth
>4851	PrimaryExpression	1.0f
>4852	ArrayIndexing	idepthDest [ idxDest ]
>4853	Identifier	idxDest
>4854	Identifier	idepthDest
>4855	IdentifierDeclStatement	 
>4856	IdentifierDecl	depth = ivarSumsSum / idepthSumsSum
>4857	AssignmentExpr	depth = ivarSumsSum / idepthSumsSum
>4858	MultiplicativeExpression	ivarSumsSum / idepthSumsSum
>4859	Identifier	idepthSumsSum
>4860	Identifier	ivarSumsSum
>4861	Identifier	depth
>4862	Identifier	depth
>4863	IdentifierDeclType	float
>4864	Condition	 
>4865	RelationalExpression	num > 0
>4866	PrimaryExpression	0
>4867	Identifier	num
>4868	IfStatement	if ( var > 0 )
>4869	CompoundStatement	 
>4870	ExpressionStatement	 
>4871	IncDecOp	num ++
>4872	IncDec	++
>4873	Identifier	num
>4874	ExpressionStatement	 
>4875	AssignmentExpr	idepthSumsSum += ivar * idepthSource [ idx + sw + 1 ]
>4876	MultiplicativeExpression	ivar * idepthSource [ idx + sw + 1 ]
>4877	ArrayIndexing	idepthSource [ idx + sw + 1 ]
>4878	AdditiveExpression	idx + sw + 1
>4879	AdditiveExpression	sw + 1
>4880	PrimaryExpression	1
>4881	Identifier	sw
>4882	Identifier	idx
>4883	Identifier	idepthSource
>4884	Identifier	ivar
>4885	Identifier	idepthSumsSum
>4886	ExpressionStatement	 
>4887	AssignmentExpr	ivarSumsSum += ivar
>4888	Identifier	ivar
>4889	Identifier	ivarSumsSum
>4890	ExpressionStatement	 
>4891	AssignmentExpr	ivar = 1.0f / var
>4892	MultiplicativeExpression	1.0f / var
>4893	Identifier	var
>4894	PrimaryExpression	1.0f
>4895	Identifier	ivar
>4896	Condition	 
>4897	RelationalExpression	var > 0
>4898	PrimaryExpression	0
>4899	Identifier	var
>4900	ExpressionStatement	 
>4901	AssignmentExpr	var = idepthVarSource [ idx + sw + 1 ]
>4902	ArrayIndexing	idepthVarSource [ idx + sw + 1 ]
>4903	AdditiveExpression	idx + sw + 1
>4904	AdditiveExpression	sw + 1
>4905	PrimaryExpression	1
>4906	Identifier	sw
>4907	Identifier	idx
>4908	Identifier	idepthVarSource
>4909	Identifier	var
>4910	IfStatement	if ( var > 0 )
>4911	CompoundStatement	 
>4912	ExpressionStatement	 
>4913	IncDecOp	num ++
>4914	IncDec	++
>4915	Identifier	num
>4916	ExpressionStatement	 
>4917	AssignmentExpr	idepthSumsSum += ivar * idepthSource [ idx + sw ]
>4918	MultiplicativeExpression	ivar * idepthSource [ idx + sw ]
>4919	ArrayIndexing	idepthSource [ idx + sw ]
>4920	AdditiveExpression	idx + sw
>4921	Identifier	sw
>4922	Identifier	idx
>4923	Identifier	idepthSource
>4924	Identifier	ivar
>4925	Identifier	idepthSumsSum
>4926	ExpressionStatement	 
>4927	AssignmentExpr	ivarSumsSum += ivar
>4928	Identifier	ivar
>4929	Identifier	ivarSumsSum
>4930	ExpressionStatement	 
>4931	AssignmentExpr	ivar = 1.0f / var
>4932	MultiplicativeExpression	1.0f / var
>4933	Identifier	var
>4934	PrimaryExpression	1.0f
>4935	Identifier	ivar
>4936	Condition	 
>4937	RelationalExpression	var > 0
>4938	PrimaryExpression	0
>4939	Identifier	var
>4940	ExpressionStatement	 
>4941	AssignmentExpr	var = idepthVarSource [ idx + sw ]
>4942	ArrayIndexing	idepthVarSource [ idx + sw ]
>4943	AdditiveExpression	idx + sw
>4944	Identifier	sw
>4945	Identifier	idx
>4946	Identifier	idepthVarSource
>4947	Identifier	var
>4948	IfStatement	if ( var > 0 )
>4949	CompoundStatement	 
>4950	ExpressionStatement	 
>4951	IncDecOp	num ++
>4952	IncDec	++
>4953	Identifier	num
>4954	ExpressionStatement	 
>4955	AssignmentExpr	idepthSumsSum += ivar * idepthSource [ idx + 1 ]
>4956	MultiplicativeExpression	ivar * idepthSource [ idx + 1 ]
>4957	ArrayIndexing	idepthSource [ idx + 1 ]
>4958	AdditiveExpression	idx + 1
>4959	PrimaryExpression	1
>4960	Identifier	idx
>4961	Identifier	idepthSource
>4962	Identifier	ivar
>4963	Identifier	idepthSumsSum
>4964	ExpressionStatement	 
>4965	AssignmentExpr	ivarSumsSum += ivar
>4966	Identifier	ivar
>4967	Identifier	ivarSumsSum
>4968	ExpressionStatement	 
>4969	AssignmentExpr	ivar = 1.0f / var
>4970	MultiplicativeExpression	1.0f / var
>4971	Identifier	var
>4972	PrimaryExpression	1.0f
>4973	Identifier	ivar
>4974	Condition	 
>4975	RelationalExpression	var > 0
>4976	PrimaryExpression	0
>4977	Identifier	var
>4978	ExpressionStatement	 
>4979	AssignmentExpr	var = idepthVarSource [ idx + 1 ]
>4980	ArrayIndexing	idepthVarSource [ idx + 1 ]
>4981	AdditiveExpression	idx + 1
>4982	PrimaryExpression	1
>4983	Identifier	idx
>4984	Identifier	idepthVarSource
>4985	Identifier	var
>4986	IfStatement	if ( var > 0 )
>4987	CompoundStatement	 
>4988	ExpressionStatement	 
>4989	IncDecOp	num ++
>4990	IncDec	++
>4991	Identifier	num
>4992	ExpressionStatement	 
>4993	AssignmentExpr	idepthSumsSum += ivar * idepthSource [ idx ]
>4994	MultiplicativeExpression	ivar * idepthSource [ idx ]
>4995	ArrayIndexing	idepthSource [ idx ]
>4996	Identifier	idx
>4997	Identifier	idepthSource
>4998	Identifier	ivar
>4999	Identifier	idepthSumsSum
>5000	ExpressionStatement	 
>5001	AssignmentExpr	ivarSumsSum += ivar
>5002	Identifier	ivar
>5003	Identifier	ivarSumsSum
>5004	ExpressionStatement	 
>5005	AssignmentExpr	ivar = 1.0f / var
>5006	MultiplicativeExpression	1.0f / var
>5007	Identifier	var
>5008	PrimaryExpression	1.0f
>5009	Identifier	ivar
>5010	Condition	 
>5011	RelationalExpression	var > 0
>5012	PrimaryExpression	0
>5013	Identifier	var
>5014	IdentifierDeclStatement	 
>5015	IdentifierDecl	var = idepthVarSource [ idx ]
>5016	AssignmentExpr	var = idepthVarSource [ idx ]
>5017	ArrayIndexing	idepthVarSource [ idx ]
>5018	Identifier	idx
>5019	Identifier	idepthVarSource
>5020	Identifier	var
>5021	Identifier	var
>5022	IdentifierDeclType	float
>5023	IdentifierDeclStatement	 
>5024	IdentifierDecl	ivar
>5025	Identifier	ivar
>5026	IdentifierDeclType	float
>5027	IdentifierDeclStatement	 
>5028	IdentifierDecl	num = 0
>5029	AssignmentExpr	num = 0
>5030	PrimaryExpression	0
>5031	Identifier	num
>5032	Identifier	num
>5033	IdentifierDeclType	int
>5034	IdentifierDeclStatement	 
>5035	IdentifierDecl	ivarSumsSum = 0
>5036	AssignmentExpr	ivarSumsSum = 0
>5037	PrimaryExpression	0
>5038	Identifier	ivarSumsSum
>5039	Identifier	ivarSumsSum
>5040	IdentifierDeclType	float
>5041	IdentifierDeclStatement	 
>5042	IdentifierDecl	idepthSumsSum = 0
>5043	AssignmentExpr	idepthSumsSum = 0
>5044	PrimaryExpression	0
>5045	Identifier	idepthSumsSum
>5046	Identifier	idepthSumsSum
>5047	IdentifierDeclType	float
>5048	IdentifierDeclStatement	 
>5049	IdentifierDecl	idxDest = ( x + y * width )
>5050	AssignmentExpr	idxDest = ( x + y * width )
>5051	AdditiveExpression	x + y * width
>5052	MultiplicativeExpression	y * width
>5053	Identifier	width
>5054	Identifier	y
>5055	Identifier	x
>5056	Identifier	idxDest
>5057	Identifier	idxDest
>5058	IdentifierDeclType	int
>5059	IdentifierDeclStatement	 
>5060	IdentifierDecl	idx = 2 * ( x + y * sw )
>5061	AssignmentExpr	idx = 2 * ( x + y * sw )
>5062	MultiplicativeExpression	2 * ( x + y * sw )
>5063	AdditiveExpression	x + y * sw
>5064	MultiplicativeExpression	y * sw
>5065	Identifier	sw
>5066	Identifier	y
>5067	Identifier	x
>5068	PrimaryExpression	2
>5069	Identifier	idx
>5070	Identifier	idx
>5071	IdentifierDeclType	int
>5072	IncDecOp	 
>5073	IncDec	++
>5074	Identifier	x
>5075	Condition	 
>5076	RelationalExpression	x < width
>5077	Identifier	width
>5078	Identifier	x
>5079	ForInit	 
>5080	IdentifierDeclStatement	int x = 0 ;
>5081	IdentifierDecl	x = 0
>5082	AssignmentExpr	x = 0
>5083	PrimaryExpression	0
>5084	Identifier	x
>5085	Identifier	x
>5086	IdentifierDeclType	int
>5087	IncDecOp	 
>5088	IncDec	++
>5089	Identifier	y
>5090	Condition	 
>5091	RelationalExpression	y < height
>5092	Identifier	height
>5093	Identifier	y
>5094	ForInit	 
>5095	IdentifierDeclStatement	int y = 0 ;
>5096	IdentifierDecl	y = 0
>5097	AssignmentExpr	y = 0
>5098	PrimaryExpression	0
>5099	Identifier	y
>5100	Identifier	y
>5101	IdentifierDeclType	int
>5102	IdentifierDeclStatement	 
>5103	IdentifierDecl	* idepthVarDest = data . idepthVar [ level ]
>5104	AssignmentExpr	* idepthVarDest = data . idepthVar [ level ]
>5105	ArrayIndexing	data . idepthVar [ level ]
>5106	Identifier	level
>5107	MemberAccess	data . idepthVar
>5108	Identifier	idepthVar
>5109	Identifier	data
>5110	Identifier	idepthVarDest
>5111	Identifier	idepthVarDest
>5112	IdentifierDeclType	float *
>5113	IdentifierDeclStatement	 
>5114	IdentifierDecl	* idepthDest = data . idepth [ level ]
>5115	AssignmentExpr	* idepthDest = data . idepth [ level ]
>5116	ArrayIndexing	data . idepth [ level ]
>5117	Identifier	level
>5118	MemberAccess	data . idepth
>5119	Identifier	idepth
>5120	Identifier	data
>5121	Identifier	idepthDest
>5122	Identifier	idepthDest
>5123	IdentifierDeclType	float *
>5124	IdentifierDeclStatement	 
>5125	IdentifierDecl	* idepthVarSource = data . idepthVar [ level - 1 ]
>5126	AssignmentExpr	* idepthVarSource = data . idepthVar [ level - 1 ]
>5127	ArrayIndexing	data . idepthVar [ level - 1 ]
>5128	AdditiveExpression	level - 1
>5129	PrimaryExpression	1
>5130	Identifier	level
>5131	MemberAccess	data . idepthVar
>5132	Identifier	idepthVar
>5133	Identifier	data
>5134	Identifier	idepthVarSource
>5135	Identifier	idepthVarSource
>5136	IdentifierDeclType	const float *
>5137	IdentifierDeclStatement	 
>5138	IdentifierDecl	* idepthSource = data . idepth [ level - 1 ]
>5139	AssignmentExpr	* idepthSource = data . idepth [ level - 1 ]
>5140	ArrayIndexing	data . idepth [ level - 1 ]
>5141	AdditiveExpression	level - 1
>5142	PrimaryExpression	1
>5143	Identifier	level
>5144	MemberAccess	data . idepth
>5145	Identifier	idepth
>5146	Identifier	data
>5147	Identifier	idepthSource
>5148	Identifier	idepthSource
>5149	IdentifierDeclType	const float *
>5150	IdentifierDeclStatement	 
>5151	IdentifierDecl	sw = data . width [ level - 1 ]
>5152	AssignmentExpr	sw = data . width [ level - 1 ]
>5153	ArrayIndexing	data . width [ level - 1 ]
>5154	AdditiveExpression	level - 1
>5155	PrimaryExpression	1
>5156	Identifier	level
>5157	MemberAccess	data . width
>5158	Identifier	width
>5159	Identifier	data
>5160	Identifier	sw
>5161	Identifier	sw
>5162	IdentifierDeclType	int
>5163	IfStatement	if ( data . idepthVar [ level ] == 0 )
>5164	ExpressionStatement	 
>5165	AssignmentExpr	data . idepthVar [ level ] = FrameMemory 
>5166	CallExpression	FrameMemory 
>5167	ArgumentList	width * height
>5168	Argument	width * height
>5169	MultiplicativeExpression	width * height
>5170	Identifier	height
>5171	Identifier	width
>5172	Callee	FrameMemory 
>5173	MemberAccess	FrameMemory 
>5174	Identifier	getFloatBuffer
>5175	CallExpression	FrameMemory 
>5176	ArgumentList	 
>5177	Callee	FrameMemory 
>5178	Identifier	FrameMemory 
>5179	ArrayIndexing	data . idepthVar [ level ]
>5180	Identifier	level
>5181	MemberAccess	data . idepthVar
>5182	Identifier	idepthVar
>5183	Identifier	data
>5184	Condition	 
>5185	EqualityExpression	data . idepthVar [ level ] == 0
>5186	PrimaryExpression	0
>5187	ArrayIndexing	data . idepthVar [ level ]
>5188	Identifier	level
>5189	MemberAccess	data . idepthVar
>5190	Identifier	idepthVar
>5191	Identifier	data
>5192	IfStatement	if ( data . idepth [ level ] == 0 )
>5193	ExpressionStatement	 
>5194	AssignmentExpr	data . idepth [ level ] = FrameMemory 
>5195	CallExpression	FrameMemory 
>5196	ArgumentList	width * height
>5197	Argument	width * height
>5198	MultiplicativeExpression	width * height
>5199	Identifier	height
>5200	Identifier	width
>5201	Callee	FrameMemory 
>5202	MemberAccess	FrameMemory 
>5203	Identifier	getFloatBuffer
>5204	CallExpression	FrameMemory 
>5205	ArgumentList	 
>5206	Callee	FrameMemory 
>5207	Identifier	FrameMemory 
>5208	ArrayIndexing	data . idepth [ level ]
>5209	Identifier	level
>5210	MemberAccess	data . idepth
>5211	Identifier	idepth
>5212	Identifier	data
>5213	Condition	 
>5214	EqualityExpression	data . idepth [ level ] == 0
>5215	PrimaryExpression	0
>5216	ArrayIndexing	data . idepth [ level ]
>5217	Identifier	level
>5218	MemberAccess	data . idepth
>5219	Identifier	idepth
>5220	Identifier	data
>5221	IdentifierDeclStatement	 
>5222	IdentifierDecl	height = data . height [ level ]
>5223	AssignmentExpr	height = data . height [ level ]
>5224	ArrayIndexing	data . height [ level ]
>5225	Identifier	level
>5226	MemberAccess	data . height
>5227	Identifier	height
>5228	Identifier	data
>5229	Identifier	height
>5230	Identifier	height
>5231	IdentifierDeclType	int
>5232	IdentifierDeclStatement	 
>5233	IdentifierDecl	width = data . width [ level ]
>5234	AssignmentExpr	width = data . width [ level ]
>5235	ArrayIndexing	data . width [ level ]
>5236	Identifier	level
>5237	MemberAccess	data . width
>5238	Identifier	width
>5239	Identifier	data
>5240	Identifier	width
>5241	Identifier	width
>5242	IdentifierDeclType	int
>5243	IfStatement	if ( enablePrintDebugInfo && printFrameBuildDebugInfo )
>5244	ExpressionStatement	 
>5245	CallExpression	printf ( \"CREATE IDepth lvl %d for frame %d\n\" , level , id ( ) )
>5246	ArgumentList	\"CREATE IDepth lvl %d for frame %d\n\"
>5247	Argument	id ( )
>5248	CallExpression	id ( )
>5249	ArgumentList	 
>5250	Callee	id
>5251	Identifier	id
>5252	Argument	level
>5253	Identifier	level
>5254	Argument	\"CREATE IDepth lvl %d for frame %d\n\"
>5255	PrimaryExpression	\"CREATE IDepth lvl %d for frame %d\n\"
>5256	Callee	printf
>5257	Identifier	printf
>5258	Condition	 
>5259	AndExpression	enablePrintDebugInfo && printFrameBuildDebugInfo
>5260	Identifier	printFrameBuildDebugInfo
>5261	Identifier	enablePrintDebugInfo
>5262	IfStatement	if ( data . idepthValid [ level ] && data . idepthVarValid [ level ] )
>5263	ReturnStatement	 
>5264	Condition	 
>5265	AndExpression	data . idepthValid [ level ] && data . idepthVarValid [ level ]
>5266	ArrayIndexing	data . idepthVarValid [ level ]
>5267	Identifier	level
>5268	MemberAccess	data . idepthVarValid
>5269	Identifier	idepthVarValid
>5270	Identifier	data
>5271	ArrayIndexing	data . idepthValid [ level ]
>5272	Identifier	level
>5273	MemberAccess	data . idepthValid
>5274	Identifier	idepthValid
>5275	Identifier	data
>5276	IdentifierDeclStatement	 
>5277	IdentifierDecl	lock2 ( buildMutex )
>5278	Identifier	buildMutex
>5279	Identifier	lock2
>5280	IdentifierDeclType	boost 
>5281	ExpressionStatement	 
>5282	CallExpression	require ( IDEPTH , level - 1 )
>5283	ArgumentList	IDEPTH
>5284	Argument	level - 1
>5285	AdditiveExpression	level - 1
>5286	PrimaryExpression	1
>5287	Identifier	level
>5288	Argument	IDEPTH
>5289	Identifier	IDEPTH
>5290	Callee	require
>5291	Identifier	require
>5292	IfStatement	if ( level == 0 )
>5293	CompoundStatement	 
>5294	ReturnStatement	 
>5295	ExpressionStatement	 
>5296	CallExpression	printf ( \"Frame
>5297	ArgumentList	\"Frame
>5298	Argument	\"Frame
>5299	PrimaryExpression	\"Frame
>5300	Callee	printf
>5301	Identifier	printf
>5302	Condition	 
>5303	EqualityExpression	level == 0
>5304	PrimaryExpression	0
>5305	Identifier	level
>5306	IfStatement	if ( ! data . hasIDepthBeenSet )
>5307	CompoundStatement	 
>5308	ReturnStatement	 
>5309	ExpressionStatement	 
>5310	CallExpression	printfAssert ( \"Frame
>5311	ArgumentList	\"Frame
>5312	Argument	\"Frame
>5313	PrimaryExpression	\"Frame
>5314	Callee	printfAssert
>5315	Identifier	printfAssert
>5316	Condition	 
>5317	UnaryOp	! data . hasIDepthBeenSet
>5318	MemberAccess	data . hasIDepthBeenSet
>5319	Identifier	hasIDepthBeenSet
>5320	Identifier	data
>5321	UnaryOperator	!
>5374	FunctionDef	Frame 
>5375	ParameterList	int level
>5376	Parameter	 
>5377	Identifier	level
>5378	ParameterType	int
>5379	ReturnType	void
>5380	CompoundStatement	 
>5381	ExpressionStatement	 
>5382	AssignmentExpr	data . idepth [ level ] = 0
>5383	PrimaryExpression	0
>5384	ArrayIndexing	data . idepth [ level ]
>5385	Identifier	level
>5386	MemberAccess	data . idepth
>5387	Identifier	idepth
>5388	Identifier	data
>5389	ExpressionStatement	 
>5390	CallExpression	FrameMemory 
>5391	ArgumentList	data . idepth [ level ]
>5392	Argument	data . idepth [ level ]
>5393	ArrayIndexing	data . idepth [ level ]
>5394	Identifier	level
>5395	MemberAccess	data . idepth
>5396	Identifier	idepth
>5397	Identifier	data
>5398	Callee	FrameMemory 
>5399	MemberAccess	FrameMemory 
>5400	Identifier	returnBuffer
>5401	CallExpression	FrameMemory 
>5402	ArgumentList	 
>5403	Callee	FrameMemory 
>5404	Identifier	FrameMemory 
>5405	IfStatement	if ( level == 0 )
>5406	CompoundStatement	 
>5407	ReturnStatement	 
>5408	ExpressionStatement	 
>5409	CallExpression	printf ( \"Frame
>5410	ArgumentList	\"Frame
>5411	Argument	\"Frame
>5412	PrimaryExpression	\"Frame
>5413	Callee	printf
>5414	Identifier	printf
>5415	Condition	 
>5416	EqualityExpression	level == 0
>5417	PrimaryExpression	0
>5418	Identifier	level
>5429	FunctionDef	Frame 
>5430	ParameterList	int level
>5431	Parameter	 
>5432	Identifier	level
>5433	ParameterType	int
>5434	ReturnType	void
>5435	CompoundStatement	 
>5436	ExpressionStatement	 
>5437	AssignmentExpr	data . idepthVar [ level ] = 0
>5438	PrimaryExpression	0
>5439	ArrayIndexing	data . idepthVar [ level ]
>5440	Identifier	level
>5441	MemberAccess	data . idepthVar
>5442	Identifier	idepthVar
>5443	Identifier	data
>5444	ExpressionStatement	 
>5445	CallExpression	FrameMemory 
>5446	ArgumentList	data . idepthVar [ level ]
>5447	Argument	data . idepthVar [ level ]
>5448	ArrayIndexing	data . idepthVar [ level ]
>5449	Identifier	level
>5450	MemberAccess	data . idepthVar
>5451	Identifier	idepthVar
>5452	Identifier	data
>5453	Callee	FrameMemory 
>5454	MemberAccess	FrameMemory 
>5455	Identifier	returnBuffer
>5456	CallExpression	FrameMemory 
>5457	ArgumentList	 
>5458	Callee	FrameMemory 
>5459	Identifier	FrameMemory 
>5460	IfStatement	if ( level == 0 )
>5461	CompoundStatement	 
>5462	ReturnStatement	 
>5463	ExpressionStatement	 
>5464	CallExpression	printf ( \"Frame
>5465	ArgumentList	\"Frame
>5466	Argument	\"Frame
>5467	PrimaryExpression	\"Frame
>5468	Callee	printf
>5469	Identifier	printf
>5470	Condition	 
>5471	EqualityExpression	level == 0
>5472	PrimaryExpression	0
>5473	Identifier	level
>5484	FunctionDef	Frame 
>5485	ParameterList	const char * message
>5486	Parameter	 
>5487	Identifier	message
>5488	ParameterType	const char *
>5489	ReturnType	void
>5490	CompoundStatement	 
>5491	ExpressionStatement	 
>5492	CallExpression	printf ( \"%s\n\" , message )
>5493	ArgumentList	\"%s\n\"
>5494	Argument	message
>5495	Identifier	message
>5496	Argument	\"%s\n\"
>5497	PrimaryExpression	\"%s\n\"
>5498	Callee	printf
>5499	Identifier	printf
>5500	ExpressionStatement	 
>5501	CallExpression	assert ( ! message )
>5502	ArgumentList	! message
>5503	Argument	! message
>5504	UnaryOp	! message
>5505	Identifier	message
>5506	UnaryOperator	!
>5507	Callee	assert
>5508	Identifier	assert
<5=25,6
<6=22,19,16,13,10,7
<7=9,8
<10=12,11
<13=15,14
<16=18,17
<19=21,20
<22=24,23
<25=143,115,92,59,51,47,26
<26=43,27
<27=28
<28=41,29
<29=39,32,30
<30=31
<32=33
<33=35,34
<35=36
<36=38,37
<39=40
<41=42
<43=44
<44=46,45
<47=48
<48=50,49
<51=52
<52=54,53
<54=56,55
<56=58,57
<59=80,76,73,60
<60=65,61
<61=62
<62=64,63
<65=66
<66=70,67
<67=69,68
<70=72,71
<73=75,74
<76=77
<77=79,78
<80=81
<81=82
<82=91,90,83
<83=89,84
<84=86,85
<86=88,87
<92=93
<93=114,113,94
<94=112,95
<95=107,96
<96=102,97
<97=99,98
<99=101,100
<102=104,103
<104=106,105
<107=109,108
<109=111,110
<115=116
<116=138,117
<117=131,118
<118=119
<119=120
<120=126,121
<121=123,122
<123=125,124
<126=128,127
<128=130,129
<131=132
<132=134,133
<134=136,135
<136=137
<138=140,139
<140=142,141
<143=144
<144=156,145
<145=154,152,150,148,146
<146=147
<148=149
<150=151
<152=153
<154=155
<156=157
<190=210,191
<191=207,204,201,198,195,192
<192=194,193
<195=197,196
<198=200,199
<201=203,202
<204=206,205
<207=209,208
<210=301,273,244,236,232,211
<211=228,212
<212=213
<213=226,214
<214=224,217,215
<215=216
<217=218
<218=220,219
<220=221
<221=223,222
<224=225
<226=227
<228=229
<229=231,230
<232=233
<233=235,234
<236=237
<237=239,238
<239=241,240
<241=243,242
<244=245
<245=271,246
<246=265,263,247
<247=248
<248=258,249
<249=253,250
<250=252,251
<253=255,254
<255=257,256
<258=260,259
<260=262,261
<263=264
<265=266
<266=268,267
<268=270,269
<271=272
<273=274
<274=296,275
<275=289,276
<276=277
<277=278
<278=284,279
<279=281,280
<281=283,282
<284=286,285
<286=288,287
<289=290
<290=292,291
<292=294,293
<294=295
<296=298,297
<298=300,299
<301=302
<302=314,303
<303=312,310,308,306,304
<304=305
<306=307
<308=309
<310=311
<312=313
<314=315
<344=346,345
<346=565,553,538,536,432,416,402,388,382,380,374,372,368,347
<347=364,348
<348=349
<349=362,350
<350=360,353,351
<351=352
<353=354
<354=356,355
<356=357
<357=359,358
<360=361
<362=363
<364=365
<365=367,366
<368=369
<369=371,370
<372=373
<374=376,375
<376=377
<377=379,378
<380=381
<382=384,383
<384=385
<385=387,386
<388=389
<389=395,390
<390=391
<391=392
<392=394,393
<395=396
<396=398,397
<398=400,399
<400=401
<402=403
<403=409,404
<404=405
<405=406
<406=408,407
<409=410
<410=412,411
<412=414,413
<414=415
<416=417
<417=425,418
<418=419
<419=420
<420=424,421
<421=423,422
<425=426
<426=428,427
<428=430,429
<430=431
<432=528,524,521,433
<433=505,504,503,502,501,500,499,498,497,496,495,494,493,492,491,490,489,488,487,486,485,484,483,482,466,450,434
<434=435
<435=443,436
<436=437
<437=438
<438=440,439
<440=442,441
<443=444
<444=446,445
<446=448,447
<448=449
<450=451
<451=459,452
<452=453
<453=454
<454=456,455
<456=458,457
<459=460
<460=462,461
<462=464,463
<464=465
<466=467
<467=475,468
<468=469
<469=470
<470=472,471
<472=474,473
<475=476
<476=478,477
<478=480,479
<480=481
<505=506
<506=514,507
<507=508
<508=509
<509=511,510
<511=513,512
<514=515
<515=517,516
<517=519,518
<519=520
<521=523,522
<524=525
<525=527,526
<528=529
<529=530
<530=535,534,531
<531=533,532
<536=537
<538=547,546,539
<539=540
<540=541
<541=543,542
<543=545,544
<547=548
<548=552,549
<549=551,550
<553=554
<554=558,555
<555=556
<556=557
<558=559
<559=561,560
<561=563,562
<563=564
<565=580,566
<566=567
<567=578,568
<568=576,569
<569=570
<570=572,571
<572=573
<573=575,574
<576=577
<578=579
<580=581
<581=583,582
<616=622,621,617
<617=618
<618=620,619
<622=856,821,788,755,746,725,716,707,629,623
<623=624
<624=626,625
<626=628,627
<629=703,688,630
<630=631
<631=684,659,632
<632=633
<633=653,644,634
<634=635
<635=636
<636=637
<637=641,638
<638=640,639
<641=643,642
<644=645
<645=646
<646=650,647
<647=649,648
<650=652,651
<653=654
<654=656,655
<656=658,657
<659=676,668,660
<660=661
<661=665,662
<662=664,663
<665=667,666
<668=669
<669=673,670
<670=672,671
<673=675,674
<676=677
<677=681,678
<678=680,679
<681=683,682
<684=685
<685=687,686
<688=700,689
<689=697,690
<690=694,691
<691=693,692
<694=696,695
<697=699,698
<700=702,701
<703=704
<704=706,705
<707=708
<708=715,714,709
<709=713,710
<710=712,711
<716=717
<717=724,723,718
<718=722,719
<719=721,720
<725=726
<726=745,744,727
<727=743,728
<728=740,729
<729=735,730
<730=732,731
<732=734,733
<735=737,736
<737=739,738
<740=742,741
<746=747
<747=754,753,748
<748=752,749
<749=751,750
<755=782,756
<756=757
<757=779,758
<758=772,759
<759=760
<760=761
<761=767,762
<762=764,763
<764=766,765
<767=769,768
<769=771,770
<772=773
<773=775,774
<775=777,776
<777=778
<779=781,780
<782=783
<783=785,784
<785=787,786
<788=815,789
<789=790
<790=812,791
<791=805,792
<792=793
<793=794
<794=800,795
<795=797,796
<797=799,798
<800=802,801
<802=804,803
<805=806
<806=808,807
<808=810,809
<810=811
<812=814,813
<815=816
<816=818,817
<818=820,819
<821=850,822
<822=823
<823=847,824
<824=846,825
<825=839,826
<826=827
<827=828
<828=834,829
<829=831,830
<831=833,832
<834=836,835
<836=838,837
<839=840
<840=842,841
<842=844,843
<844=845
<847=849,848
<850=851
<851=853,852
<853=855,854
<856=857
<857=865,864,858
<858=863,859
<859=861,860
<861=862
<900=906,905,901
<901=902
<902=904,903
<906=1000,991,984,978,976,970,968,960,956,952,933,914,907
<907=908
<908=910,909
<910=911
<911=913,912
<914=915
<915=931,916
<916=929,923,917
<917=918
<918=920,919
<920=922,921
<923=924
<924=926,925
<926=928,927
<929=930
<931=932
<933=934
<934=950,935
<935=948,942,936
<936=937
<937=939,938
<939=941,940
<942=943
<943=945,944
<945=947,946
<948=949
<950=951
<952=953
<953=955,954
<956=957
<957=959,958
<960=961
<961=967,962
<962=964,963
<964=966,965
<968=969
<970=972,971
<972=973
<973=975,974
<976=977
<978=980,979
<980=981
<981=983,982
<984=985
<985=987,986
<987=988
<988=990,989
<991=992
<992=996,993
<993=994
<994=995
<996=997
<997=999,998
<1000=1001
<1001=1012,1002
<1002=1003
<1003=1004
<1004=1009,1005
<1005=1007,1006
<1007=1008
<1009=1011,1010
<1012=1013
<1034=1037,1036,1035
<1037=1145,1133,1121,1100,1093,1086,1044,1038
<1038=1039
<1039=1043,1040
<1040=1042,1041
<1044=1078,1074,1071,1045
<1045=1046
<1046=1065,1047
<1047=1052,1048
<1048=1049
<1049=1051,1050
<1052=1053
<1053=1064,1054
<1054=1062,1055
<1055=1056
<1056=1057
<1057=1061,1058
<1058=1060,1059
<1062=1063
<1065=1066
<1066=1068,1067
<1068=1070,1069
<1071=1073,1072
<1074=1075
<1075=1077,1076
<1078=1079
<1079=1080
<1080=1085,1084,1081
<1081=1083,1082
<1086=1087
<1087=1092,1091,1088
<1088=1090,1089
<1093=1094
<1094=1099,1098,1095
<1095=1097,1096
<1100=1101
<1101=1120,1119,1102
<1102=1118,1103
<1103=1117,1104
<1104=1111,1105
<1105=1109,1106
<1106=1107
<1107=1108
<1109=1110
<1111=1115,1112
<1112=1113
<1113=1114
<1115=1116
<1121=1122
<1122=1132,1131,1123
<1123=1130,1124
<1124=1128,1125
<1125=1126
<1126=1127
<1128=1129
<1133=1141,1134
<1134=1135
<1135=1139,1136
<1136=1137
<1137=1138
<1139=1140
<1141=1142
<1142=1144,1143
<1161=1167,1166,1162
<1162=1163
<1163=1165,1164
<1167=1426,1421,1384,1347,1336,1325,1306,1299,1292,1217,1211,1207,1199,1191,1178,1172,1168
<1168=1169
<1169=1171,1170
<1172=1173
<1173=1175,1174
<1175=1177,1176
<1178=1179
<1179=1189,1180
<1180=1185,1183,1181
<1181=1182
<1183=1184
<1185=1186
<1186=1188,1187
<1189=1190
<1191=1192
<1192=1194,1193
<1194=1196,1195
<1196=1198,1197
<1199=1200
<1200=1202,1201
<1202=1204,1203
<1204=1206,1205
<1207=1208
<1208=1210,1209
<1211=1212
<1212=1216,1213
<1213=1215,1214
<1217=1288,1277,1218
<1218=1219
<1219=1265,1238,1220
<1220=1221
<1221=1230,1222
<1222=1223
<1223=1227,1224
<1224=1226,1225
<1227=1229,1228
<1230=1231
<1231=1235,1232
<1232=1234,1233
<1235=1237,1236
<1238=1257,1249,1245,1239
<1239=1240
<1240=1244,1241
<1241=1243,1242
<1245=1246
<1246=1248,1247
<1249=1250
<1250=1254,1251
<1251=1253,1252
<1254=1256,1255
<1257=1258
<1258=1262,1259
<1259=1261,1260
<1262=1264,1263
<1265=1266
<1266=1274,1267
<1267=1271,1268
<1268=1270,1269
<1271=1273,1272
<1274=1276,1275
<1277=1285,1278
<1278=1282,1279
<1279=1281,1280
<1282=1284,1283
<1285=1287,1286
<1288=1289
<1289=1291,1290
<1292=1293
<1293=1298,1297,1294
<1294=1296,1295
<1299=1300
<1300=1305,1304,1301
<1301=1303,1302
<1306=1307
<1307=1324,1323,1308
<1308=1322,1309
<1309=1321,1310
<1310=1316,1311
<1311=1313,1312
<1313=1315,1314
<1316=1318,1317
<1318=1320,1319
<1325=1326
<1326=1335,1334,1327
<1327=1333,1328
<1328=1330,1329
<1330=1332,1331
<1336=1337
<1337=1346,1345,1338
<1338=1344,1339
<1339=1341,1340
<1341=1343,1342
<1347=1376,1348
<1348=1349
<1349=1371,1350
<1350=1364,1351
<1351=1352
<1352=1353
<1353=1359,1354
<1354=1356,1355
<1356=1358,1357
<1359=1361,1360
<1361=1363,1362
<1364=1365
<1365=1367,1366
<1367=1369,1368
<1369=1370
<1371=1373,1372
<1373=1375,1374
<1376=1377
<1377=1379,1378
<1379=1381,1380
<1381=1383,1382
<1384=1413,1385
<1385=1386
<1386=1408,1387
<1387=1401,1388
<1388=1389
<1389=1390
<1390=1396,1391
<1391=1393,1392
<1393=1395,1394
<1396=1398,1397
<1398=1400,1399
<1401=1402
<1402=1404,1403
<1404=1406,1405
<1406=1407
<1408=1410,1409
<1410=1412,1411
<1413=1414
<1414=1416,1415
<1416=1418,1417
<1418=1420,1419
<1421=1422
<1422=1425,1424,1423
<1426=1427
<1427=1435,1434,1428
<1428=1433,1429
<1429=1431,1430
<1431=1432
<1477=1486,1485,1478
<1478=1482,1479
<1479=1481,1480
<1482=1484,1483
<1486=1788,1776,1771,1734,1697,1686,1675,1664,1653,1522,1514,1506,1493,1487
<1487=1488
<1488=1490,1489
<1490=1492,1491
<1493=1494
<1494=1504,1495
<1495=1500,1498,1496
<1496=1497
<1498=1499
<1500=1501
<1501=1503,1502
<1504=1505
<1506=1507
<1507=1509,1508
<1509=1511,1510
<1511=1513,1512
<1514=1515
<1515=1517,1516
<1517=1519,1518
<1519=1521,1520
<1522=1645,1641,1638,1523
<1523=1524
<1524=1630,1626,1623,1525
<1525=1538,1534,1530,1526
<1526=1527
<1527=1529,1528
<1530=1531
<1531=1533,1532
<1534=1535
<1535=1537,1536
<1538=1576,1557,1539
<1539=1540
<1540=1549,1541
<1541=1542
<1542=1546,1543
<1543=1545,1544
<1546=1548,1547
<1549=1550
<1550=1554,1551
<1551=1553,1552
<1554=1556,1555
<1557=1566,1558
<1558=1559
<1559=1563,1560
<1560=1562,1561
<1563=1565,1564
<1566=1567
<1567=1573,1568
<1568=1572,1569
<1569=1571,1570
<1573=1575,1574
<1576=1577
<1577=1620,1578
<1578=1615,1579
<1579=1612,1580
<1580=1607,1581
<1581=1598,1582
<1582=1588,1583
<1583=1585,1584
<1585=1587,1586
<1588=1597,1589
<1589=1595,1590
<1590=1591
<1591=1592
<1592=1594,1593
<1595=1596
<1598=1600,1599
<1600=1606,1601
<1601=1605,1602
<1602=1604,1603
<1607=1611,1608
<1608=1610,1609
<1612=1614,1613
<1615=1619,1616
<1616=1618,1617
<1620=1622,1621
<1623=1625,1624
<1626=1627
<1627=1629,1628
<1630=1631
<1631=1632
<1632=1637,1636,1633
<1633=1635,1634
<1638=1640,1639
<1641=1642
<1642=1644,1643
<1645=1646
<1646=1647
<1647=1652,1651,1648
<1648=1650,1649
<1653=1654
<1654=1663,1662,1655
<1655=1661,1656
<1656=1658,1657
<1658=1660,1659
<1664=1665
<1665=1674,1673,1666
<1666=1672,1667
<1667=1669,1668
<1669=1671,1670
<1675=1676
<1676=1685,1684,1677
<1677=1683,1678
<1678=1680,1679
<1680=1682,1681
<1686=1687
<1687=1696,1695,1688
<1688=1694,1689
<1689=1691,1690
<1691=1693,1692
<1697=1726,1698
<1698=1699
<1699=1721,1700
<1700=1714,1701
<1701=1702
<1702=1703
<1703=1709,1704
<1704=1706,1705
<1706=1708,1707
<1709=1711,1710
<1711=1713,1712
<1714=1715
<1715=1717,1716
<1717=1719,1718
<1719=1720
<1721=1723,1722
<1723=1725,1724
<1726=1727
<1727=1729,1728
<1729=1731,1730
<1731=1733,1732
<1734=1763,1735
<1735=1736
<1736=1758,1737
<1737=1751,1738
<1738=1739
<1739=1740
<1740=1746,1741
<1741=1743,1742
<1743=1745,1744
<1746=1748,1747
<1748=1750,1749
<1751=1752
<1752=1754,1753
<1754=1756,1755
<1756=1757
<1758=1760,1759
<1760=1762,1761
<1763=1764
<1764=1766,1765
<1766=1768,1767
<1768=1770,1769
<1771=1772
<1772=1775,1774,1773
<1776=1777
<1777=1787,1786,1778
<1778=1785,1779
<1779=1783,1780
<1780=1781
<1781=1782
<1783=1784
<1788=1789
<1789=1797,1796,1790
<1790=1795,1791
<1791=1793,1792
<1793=1794
<1844=1859,1858,1845
<1845=1855,1852,1849,1846
<1846=1848,1847
<1849=1851,1850
<1852=1854,1853
<1855=1857,1856
<1859=2017,2016,2015,2014,2013,2012,2011,2010,2009,2008,2007,2006,2005,2004,2003,2002,2001,1992,1991,1990,1989,1860,1864,1873,1894,1905,1916,1927,1936,1937,1938,1939,1940,1941,1942,1943,1944,1945,1946,1947,1948,1949,1950,1956,1957,1958,1959,1960,1961,1962,1963,1964,1965,1966,1967,1968,1969,1970,1971,1977,1978,1979,1980,1981,1982,1983,1984,1985,1986,1987,1988
<1860=1861
<1861=1863,1862
<1864=1865
<1865=1872,1866
<1866=1868,1867
<1868=1869
<1869=1871,1870
<1873=1874
<1874=1893,1875
<1875=1884,1876
<1876=1877
<1877=1878
<1878=1880,1879
<1880=1881
<1881=1883,1882
<1884=1885
<1885=1887,1886
<1887=1889,1888
<1889=1890
<1890=1892,1891
<1894=1895
<1895=1904,1896
<1896=1900,1897
<1897=1898
<1898=1899
<1900=1901
<1901=1903,1902
<1905=1906
<1906=1915,1907
<1907=1911,1908
<1908=1909
<1909=1910
<1911=1912
<1912=1914,1913
<1916=1917
<1917=1926,1918
<1918=1922,1919
<1919=1920
<1920=1921
<1922=1923
<1923=1925,1924
<1927=1928
<1928=1935,1929
<1929=1931,1930
<1931=1932
<1932=1934,1933
<1950=1951
<1951=1955,1952
<1952=1954,1953
<1971=1972
<1972=1976,1973
<1973=1975,1974
<1992=1993
<1993=2000,1994
<1994=1996,1995
<1996=1997
<1997=1999,1998
<2017=2018
<2018=2028,2027,2019
<2019=2026,2020
<2020=2022,2021
<2022=2023
<2023=2025,2024
<2056=2065,2064,2057
<2057=2061,2058
<2058=2060,2059
<2061=2063,2062
<2065=2141,2120,2099,2066
<2066=2075,2067
<2067=2068
<2068=2069
<2069=2073,2070
<2070=2071
<2071=2072
<2073=2074
<2075=2076
<2076=2088,2077
<2077=2085,2078
<2078=2084,2079
<2079=2081,2080
<2081=2083,2082
<2085=2087,2086
<2088=2096,2089
<2089=2095,2090
<2090=2092,2091
<2092=2094,2093
<2096=2098,2097
<2099=2108,2100
<2100=2101
<2101=2102
<2102=2106,2103
<2103=2104
<2104=2105
<2106=2107
<2108=2109
<2109=2117,2110
<2110=2116,2111
<2111=2113,2112
<2113=2115,2114
<2117=2119,2118
<2120=2129,2121
<2121=2122
<2122=2123
<2123=2127,2124
<2124=2125
<2125=2126
<2127=2128
<2129=2130
<2130=2138,2131
<2131=2137,2132
<2132=2134,2133
<2134=2136,2135
<2138=2140,2139
<2141=2150,2142
<2142=2143
<2143=2144
<2144=2148,2145
<2145=2146
<2146=2147
<2148=2149
<2150=2151
<2151=2159,2152
<2152=2158,2153
<2153=2155,2154
<2155=2157,2156
<2159=2161,2160
<2185=2197,2196,2186
<2186=2193,2190,2187
<2187=2189,2188
<2190=2192,2191
<2193=2195,2194
<2197=2198
<2198=2367,2363,2360,2199
<2199=2328,2296,2264,2232,2200
<2200=2222,2201
<2201=2214,2202
<2202=2210,2203
<2203=2204
<2204=2208,2205
<2205=2206
<2206=2207
<2208=2209
<2210=2211
<2211=2213,2212
<2214=2215
<2215=2217,2216
<2217=2219,2218
<2219=2221,2220
<2222=2223
<2223=2229,2224
<2224=2226,2225
<2226=2228,2227
<2229=2231,2230
<2232=2254,2233
<2233=2246,2234
<2234=2242,2235
<2235=2236
<2236=2240,2237
<2237=2238
<2238=2239
<2240=2241
<2242=2243
<2243=2245,2244
<2246=2247
<2247=2249,2248
<2249=2251,2250
<2251=2253,2252
<2254=2255
<2255=2261,2256
<2256=2258,2257
<2258=2260,2259
<2261=2263,2262
<2264=2286,2265
<2265=2278,2266
<2266=2274,2267
<2267=2268
<2268=2272,2269
<2269=2270
<2270=2271
<2272=2273
<2274=2275
<2275=2277,2276
<2278=2279
<2279=2281,2280
<2281=2283,2282
<2283=2285,2284
<2286=2287
<2287=2293,2288
<2288=2290,2289
<2290=2292,2291
<2293=2295,2294
<2296=2318,2297
<2297=2310,2298
<2298=2306,2299
<2299=2300
<2300=2304,2301
<2301=2302
<2302=2303
<2304=2305
<2306=2307
<2307=2309,2308
<2310=2311
<2311=2313,2312
<2313=2315,2314
<2315=2317,2316
<2318=2319
<2319=2325,2320
<2320=2322,2321
<2322=2324,2323
<2325=2327,2326
<2328=2350,2329
<2329=2342,2330
<2330=2338,2331
<2331=2332
<2332=2336,2333
<2333=2334
<2334=2335
<2336=2337
<2338=2339
<2339=2341,2340
<2342=2343
<2343=2345,2344
<2345=2347,2346
<2347=2349,2348
<2350=2351
<2351=2357,2352
<2352=2354,2353
<2354=2356,2355
<2357=2359,2358
<2360=2362,2361
<2363=2364
<2364=2366,2365
<2367=2368
<2368=2369
<2369=2378,2377,2370
<2370=2376,2371
<2371=2374,2373,2372
<2374=2375
<2406=2409,2408,2407
<2409=2412,2410
<2410=2411
<2412=2487,2413
<2413=2480,2463,2448,2435,2430,2423,2416,2414
<2414=2415
<2416=2417
<2417=2419,2418
<2419=2420
<2420=2422,2421
<2423=2424
<2424=2426,2425
<2426=2427
<2427=2429,2428
<2430=2431
<2431=2433,2432
<2433=2434
<2435=2436
<2436=2446,2437
<2437=2442,2440,2438
<2438=2439
<2440=2441
<2442=2443
<2443=2445,2444
<2446=2447
<2448=2449
<2449=2461,2450
<2450=2455,2453,2451
<2451=2452
<2453=2454
<2455=2456
<2456=2460,2457
<2457=2459,2458
<2461=2462
<2463=2476,2464
<2464=2465
<2465=2474,2466
<2466=2472,2467
<2467=2468
<2468=2470,2469
<2470=2471
<2472=2473
<2474=2475
<2476=2477
<2477=2479,2478
<2480=2481
<2481=2483,2482
<2483=2484
<2484=2486,2485
<2487=2488
<2488=2497,2489
<2489=2490
<2490=2491
<2491=2495,2492
<2492=2493
<2493=2494
<2495=2496
<2497=2498
<2498=2500,2499
<2518=2536,2535,2519
<2519=2532,2529,2526,2523,2520
<2520=2522,2521
<2523=2525,2524
<2526=2528,2527
<2529=2531,2530
<2532=2534,2533
<2536=3145,3141,3133,3118,3103,3088,3073,3060,3041,3022,3003,2984,2978,2972,2968,2962,2956,2950,2612,2606,2600,2594,2588,2584,2580,2576,2572,2568,2560,2554,2548,2541,2537
<2537=2538
<2538=2540,2539
<2541=2542
<2542=2547,2543
<2543=2545,2544
<2545=2546
<2548=2549
<2549=2553,2550
<2550=2552,2551
<2554=2555
<2555=2559,2556
<2556=2558,2557
<2560=2561
<2561=2567,2562
<2562=2566,2563
<2563=2565,2564
<2568=2569
<2569=2571,2570
<2572=2573
<2573=2575,2574
<2576=2577
<2577=2579,2578
<2580=2581
<2581=2583,2582
<2584=2585
<2585=2587,2586
<2588=2589
<2589=2591,2590
<2591=2593,2592
<2594=2595
<2595=2597,2596
<2597=2599,2598
<2600=2601
<2601=2603,2602
<2603=2605,2604
<2606=2607
<2607=2609,2608
<2609=2611,2610
<2612=2942,2938,2935,2613
<2613=2925,2915,2907,2899,2891,2883,2875,2867,2859,2851,2843,2835,2829,2614
<2614=2825,2615
<2615=2809,2793,2771,2749,2709,2692,2673,2654,2635,2616
<2616=2617
<2617=2630,2618
<2618=2624,2619
<2619=2622,2620
<2620=2621
<2622=2623
<2624=2625
<2625=2627,2626
<2627=2629,2628
<2630=2632,2631
<2632=2634,2633
<2635=2636
<2636=2649,2637
<2637=2643,2638
<2638=2641,2639
<2639=2640
<2641=2642
<2643=2644
<2644=2646,2645
<2646=2648,2647
<2649=2651,2650
<2651=2653,2652
<2654=2655
<2655=2668,2656
<2656=2662,2657
<2657=2660,2658
<2658=2659
<2660=2661
<2662=2663
<2663=2665,2664
<2665=2667,2666
<2668=2670,2669
<2670=2672,2671
<2673=2674
<2674=2687,2675
<2675=2681,2676
<2676=2679,2677
<2677=2678
<2679=2680
<2681=2682
<2682=2684,2683
<2684=2686,2685
<2687=2689,2688
<2689=2691,2690
<2692=2693
<2693=2704,2694
<2694=2696,2695
<2696=2697
<2697=2699,2698
<2699=2701,2700
<2701=2703,2702
<2704=2706,2705
<2706=2708,2707
<2709=2710
<2710=2738,2711
<2711=2737,2712
<2712=2732,2713
<2713=2731,2714
<2714=2726,2715
<2715=2721,2716
<2716=2720,2717
<2717=2719,2718
<2721=2723,2722
<2723=2725,2724
<2726=2728,2727
<2728=2730,2729
<2732=2734,2733
<2734=2736,2735
<2738=2744,2739
<2739=2741,2740
<2741=2743,2742
<2744=2746,2745
<2746=2748,2747
<2749=2750
<2750=2766,2751
<2751=2753,2752
<2753=2759,2754
<2754=2756,2755
<2756=2758,2757
<2759=2761,2760
<2761=2763,2762
<2763=2765,2764
<2766=2768,2767
<2768=2770,2769
<2771=2772
<2772=2788,2773
<2773=2775,2774
<2775=2781,2776
<2776=2778,2777
<2778=2780,2779
<2781=2783,2782
<2783=2785,2784
<2785=2787,2786
<2788=2790,2789
<2790=2792,2791
<2793=2794
<2794=2804,2795
<2795=2797,2796
<2797=2801,2798
<2798=2800,2799
<2801=2803,2802
<2804=2806,2805
<2806=2808,2807
<2809=2810
<2810=2820,2811
<2811=2813,2812
<2813=2817,2814
<2814=2816,2815
<2817=2819,2818
<2820=2822,2821
<2822=2824,2823
<2825=2826
<2826=2828,2827
<2829=2830
<2830=2832,2831
<2832=2834,2833
<2835=2836
<2836=2838,2837
<2838=2840,2839
<2840=2842,2841
<2843=2844
<2844=2846,2845
<2846=2848,2847
<2848=2850,2849
<2851=2852
<2852=2854,2853
<2854=2856,2855
<2856=2858,2857
<2859=2860
<2860=2862,2861
<2862=2864,2863
<2864=2866,2865
<2867=2868
<2868=2870,2869
<2870=2872,2871
<2872=2874,2873
<2875=2876
<2876=2878,2877
<2878=2880,2879
<2880=2882,2881
<2883=2884
<2884=2886,2885
<2886=2888,2887
<2888=2890,2889
<2891=2892
<2892=2894,2893
<2894=2896,2895
<2896=2898,2897
<2899=2900
<2900=2902,2901
<2902=2904,2903
<2904=2906,2905
<2907=2908
<2908=2910,2909
<2910=2912,2911
<2912=2914,2913
<2915=2916
<2916=2920,2917
<2917=2919,2918
<2920=2922,2921
<2922=2924,2923
<2925=2926
<2926=2930,2927
<2927=2929,2928
<2930=2932,2931
<2932=2934,2933
<2935=2937,2936
<2938=2939
<2939=2941,2940
<2942=2943
<2943=2944
<2944=2949,2948,2945
<2945=2947,2946
<2950=2951
<2951=2955,2952
<2952=2954,2953
<2956=2957
<2957=2961,2958
<2958=2960,2959
<2962=2963
<2963=2967,2964
<2964=2966,2965
<2968=2969
<2969=2971,2970
<2972=2973
<2973=2975,2974
<2975=2977,2976
<2978=2979
<2979=2981,2980
<2981=2983,2982
<2984=2985
<2985=2998,2986
<2986=2992,2987
<2987=2990,2988
<2988=2989
<2990=2991
<2992=2993
<2993=2995,2994
<2995=2997,2996
<2998=3000,2999
<3000=3002,3001
<3003=3004
<3004=3017,3005
<3005=3011,3006
<3006=3009,3007
<3007=3008
<3009=3010
<3011=3012
<3012=3014,3013
<3014=3016,3015
<3017=3019,3018
<3019=3021,3020
<3022=3023
<3023=3036,3024
<3024=3030,3025
<3025=3028,3026
<3026=3027
<3028=3029
<3030=3031
<3031=3033,3032
<3033=3035,3034
<3036=3038,3037
<3038=3040,3039
<3041=3042
<3042=3055,3043
<3043=3049,3044
<3044=3047,3045
<3045=3046
<3047=3048
<3049=3050
<3050=3052,3051
<3052=3054,3053
<3055=3057,3056
<3057=3059,3058
<3060=3061
<3061=3068,3062
<3062=3064,3063
<3064=3065
<3065=3067,3066
<3068=3070,3069
<3070=3072,3071
<3073=3074
<3074=3083,3075
<3075=3081,3076
<3076=3079,3077
<3077=3078
<3079=3080
<3081=3082
<3083=3085,3084
<3085=3087,3086
<3088=3089
<3089=3098,3090
<3090=3096,3091
<3091=3094,3092
<3092=3093
<3094=3095
<3096=3097
<3098=3100,3099
<3100=3102,3101
<3103=3104
<3104=3113,3105
<3105=3111,3106
<3106=3109,3107
<3107=3108
<3109=3110
<3111=3112
<3113=3115,3114
<3115=3117,3116
<3118=3119
<3119=3128,3120
<3120=3126,3121
<3121=3124,3122
<3122=3123
<3124=3125
<3126=3127
<3128=3130,3129
<3130=3132,3131
<3133=3134
<3134=3136,3135
<3136=3138,3137
<3138=3140,3139
<3141=3142
<3142=3144,3143
<3145=3146
<3146=3148,3147
<3148=3150,3149
<3239=3242,3241,3240
<3242=3243
<3247=3253,3252,3248
<3248=3249
<3249=3251,3250
<3253=3752,3741,3736,3728,3709,3696,3683,3670,3633,3622,3347,3338,3334,3262,3254
<3254=3255
<3255=3257,3256
<3257=3259,3258
<3259=3261,3260
<3262=3326,3322,3317,3263
<3263=3264
<3264=3309,3305,3302,3265
<3265=3294,3270,3266
<3266=3267
<3267=3269,3268
<3270=3271
<3271=3291,3272
<3272=3274,3273
<3274=3288,3275
<3275=3285,3276
<3276=3282,3277
<3277=3281,3278
<3278=3280,3279
<3282=3284,3283
<3285=3287,3286
<3288=3290,3289
<3291=3293,3292
<3294=3295
<3295=3301,3296
<3296=3300,3297
<3297=3299,3298
<3302=3304,3303
<3305=3306
<3306=3308,3307
<3309=3310
<3310=3311
<3311=3316,3315,3312
<3312=3314,3313
<3317=3321,3318
<3318=3320,3319
<3322=3323
<3323=3325,3324
<3326=3327
<3327=3328
<3328=3333,3332,3329
<3329=3331,3330
<3334=3335
<3335=3337,3336
<3338=3339
<3339=3346,3345,3340
<3340=3344,3341
<3341=3343,3342
<3347=3616,3348
<3348=3598,3587,3358,3350,3349
<3350=3351
<3351=3353,3352
<3353=3355,3354
<3355=3357,3356
<3358=3579,3575,3570,3359
<3359=3561,3360
<3360=3553,3549,3546,3361
<3361=3532,3516,3502,3486,3468,3454,3427,3400,3386,3375,3366,3362
<3362=3363
<3363=3365,3364
<3366=3367
<3367=3373,3368
<3368=3371,3369
<3369=3370
<3371=3372
<3373=3374
<3375=3376
<3376=3385,3377
<3377=3383,3378
<3378=3381,3379
<3379=3380
<3381=3382
<3383=3384
<3386=3387
<3387=3399,3398,3388
<3388=3397,3389
<3389=3395,3390
<3390=3393,3391
<3391=3392
<3393=3394
<3395=3396
<3400=3401
<3401=3426,3425,3402
<3402=3424,3403
<3403=3422,3404
<3404=3420,3418,3405
<3405=3406
<3406=3416,3407
<3407=3414,3412,3410,3408
<3408=3409
<3410=3411
<3412=3413
<3414=3415
<3416=3417
<3418=3419
<3420=3421
<3422=3423
<3427=3428
<3428=3453,3452,3429
<3429=3451,3430
<3430=3449,3431
<3431=3447,3445,3432
<3432=3433
<3433=3443,3434
<3434=3441,3439,3437,3435
<3435=3436
<3437=3438
<3439=3440
<3441=3442
<3443=3444
<3445=3446
<3447=3448
<3449=3450
<3454=3455
<3455=3467,3466,3456
<3456=3465,3457
<3457=3463,3458
<3458=3461,3459
<3459=3460
<3461=3462
<3463=3464
<3468=3469
<3469=3485,3484,3470
<3470=3483,3471
<3471=3481,3472
<3472=3473
<3473=3474
<3474=3478,3475
<3475=3477,3476
<3478=3480,3479
<3481=3482
<3486=3487
<3487=3501,3500,3488
<3488=3499,3489
<3489=3497,3490
<3490=3491
<3491=3492
<3492=3494,3493
<3494=3496,3495
<3497=3498
<3502=3503
<3503=3515,3514,3504
<3504=3513,3505
<3505=3511,3506
<3506=3509,3507
<3507=3508
<3509=3510
<3511=3512
<3516=3517
<3517=3531,3530,3518
<3518=3529,3519
<3519=3527,3520
<3520=3521
<3521=3522
<3522=3524,3523
<3524=3526,3525
<3527=3528
<3532=3533
<3533=3545,3544,3534
<3534=3543,3535
<3535=3541,3536
<3536=3537
<3537=3538
<3538=3540,3539
<3541=3542
<3546=3548,3547
<3549=3550
<3550=3552,3551
<3553=3554
<3554=3555
<3555=3560,3559,3556
<3556=3558,3557
<3561=3562
<3562=3569,3568,3563
<3563=3567,3564
<3564=3566,3565
<3570=3574,3571
<3571=3573,3572
<3575=3576
<3576=3578,3577
<3579=3580
<3580=3581
<3581=3586,3585,3582
<3582=3584,3583
<3587=3588
<3588=3597,3596,3589
<3589=3595,3590
<3590=3594,3591
<3591=3593,3592
<3598=3599
<3599=3615,3614,3600
<3600=3613,3601
<3601=3611,3602
<3602=3609,3607,3605,3603
<3603=3604
<3605=3606
<3607=3608
<3609=3610
<3611=3612
<3616=3617
<3617=3619,3618
<3619=3621,3620
<3622=3623
<3623=3632,3631,3624
<3624=3630,3625
<3625=3627,3626
<3627=3629,3628
<3633=3662,3634
<3634=3635
<3635=3657,3636
<3636=3650,3637
<3637=3638
<3638=3639
<3639=3645,3640
<3640=3642,3641
<3642=3644,3643
<3645=3647,3646
<3647=3649,3648
<3650=3651
<3651=3653,3652
<3653=3655,3654
<3655=3656
<3657=3659,3658
<3659=3661,3660
<3662=3663
<3663=3665,3664
<3665=3667,3666
<3667=3669,3668
<3670=3671
<3671=3682,3681,3672
<3672=3680,3673
<3673=3677,3674
<3674=3676,3675
<3677=3679,3678
<3683=3684
<3684=3695,3694,3685
<3685=3693,3686
<3686=3690,3687
<3687=3689,3688
<3690=3692,3691
<3696=3697
<3697=3708,3707,3698
<3698=3706,3699
<3699=3703,3700
<3700=3702,3701
<3703=3705,3704
<3709=3724,3710
<3710=3711
<3711=3722,3712
<3712=3720,3718,3713
<3713=3714
<3714=3716,3715
<3716=3717
<3718=3719
<3720=3721
<3722=3723
<3724=3725
<3725=3727,3726
<3728=3730,3729
<3730=3731
<3731=3733,3732
<3733=3735,3734
<3736=3737
<3737=3740,3739,3738
<3741=3742
<3742=3750,3743
<3743=3748,3744
<3744=3745
<3745=3747,3746
<3748=3749
<3750=3751
<3752=3762,3753
<3753=3755,3754
<3755=3756
<3756=3760,3757
<3757=3758
<3758=3759
<3760=3761
<3762=3763
<3763=3765,3764
<3818=3824,3823,3819
<3819=3820
<3820=3822,3821
<3824=3849,3833,3825
<3825=3826
<3826=3828,3827
<3828=3830,3829
<3830=3832,3831
<3833=3834
<3834=3842,3835
<3835=3836
<3836=3837
<3837=3839,3838
<3839=3841,3840
<3842=3843
<3843=3845,3844
<3845=3847,3846
<3847=3848
<3849=3859,3850
<3850=3852,3851
<3852=3853
<3853=3857,3854
<3854=3855
<3855=3856
<3857=3858
<3859=3860
<3860=3862,3861
<3873=3879,3878,3874
<3874=3875
<3875=3877,3876
<3879=4117,4112,4104,4085,4074,4063,4028,4015,3998,3985,3974,3965,3961,3888,3880
<3880=3881
<3881=3883,3882
<3883=3885,3884
<3885=3887,3886
<3888=3957,3950,3889
<3889=3942,3930,3908,3898,3894,3890
<3890=3891
<3891=3893,3892
<3894=3895
<3895=3897,3896
<3898=3899
<3899=3901,3900
<3901=3907,3902
<3902=3904,3903
<3904=3906,3905
<3908=3909
<3909=3923,3910
<3910=3922,3911
<3911=3917,3912
<3912=3916,3913
<3913=3915,3914
<3917=3921,3918
<3918=3920,3919
<3923=3929,3924
<3924=3926,3925
<3926=3928,3927
<3930=3931
<3931=3937,3932
<3932=3936,3933
<3933=3935,3934
<3937=3941,3938
<3938=3940,3939
<3942=3943
<3943=3949,3944
<3944=3948,3945
<3945=3947,3946
<3950=3954,3951
<3951=3953,3952
<3954=3956,3955
<3957=3958
<3958=3960,3959
<3961=3962
<3962=3964,3963
<3965=3966
<3966=3973,3972,3967
<3967=3971,3968
<3968=3970,3969
<3974=3975
<3975=3984,3983,3976
<3976=3982,3977
<3977=3981,3978
<3978=3980,3979
<3985=3986
<3986=3997,3996,3987
<3987=3995,3988
<3988=3990,3989
<3990=3992,3991
<3992=3994,3993
<3998=3999
<3999=4014,4013,4000
<4000=4012,4001
<4001=4007,4002
<4002=4006,4003
<4003=4005,4004
<4007=4009,4008
<4009=4011,4010
<4015=4016
<4016=4027,4026,4017
<4017=4025,4018
<4018=4020,4019
<4020=4022,4021
<4022=4024,4023
<4028=4055,4029
<4029=4030
<4030=4050,4031
<4031=4049,4032
<4032=4042,4033
<4033=4034
<4034=4035
<4035=4039,4036
<4036=4038,4037
<4039=4041,4040
<4042=4043
<4043=4045,4044
<4045=4047,4046
<4047=4048
<4050=4052,4051
<4052=4054,4053
<4055=4056
<4056=4058,4057
<4058=4060,4059
<4060=4062,4061
<4063=4064
<4064=4073,4072,4065
<4065=4071,4066
<4066=4068,4067
<4068=4070,4069
<4074=4075
<4075=4084,4083,4076
<4076=4082,4077
<4077=4079,4078
<4079=4081,4080
<4085=4100,4086
<4086=4087
<4087=4098,4088
<4088=4096,4094,4089
<4089=4090
<4090=4092,4091
<4092=4093
<4094=4095
<4096=4097
<4098=4099
<4100=4101
<4101=4103,4102
<4104=4106,4105
<4106=4107
<4107=4109,4108
<4109=4111,4110
<4112=4113
<4113=4116,4115,4114
<4117=4118
<4118=4124,4119
<4119=4122,4120
<4120=4121
<4122=4123
<4124=4125
<4169=4175,4174,4170
<4170=4171
<4171=4173,4172
<4175=4206,4205,4204,4203,4202,4201,4200,4199,4198,4197,4196,4195,4194,4193,4192,4191,4190,4189,4188,4187,4186,4185,4184,4176
<4176=4177
<4177=4179,4178
<4179=4181,4180
<4181=4183,4182
<4216=4222,4221,4217
<4217=4218
<4218=4220,4219
<4222=4693,4688,4680,4661,4650,4639,4610,4591,4578,4565,4548,4494,4482,4466,4455,4386,4379,4367,4351,4343,4254,4243,4231,4223
<4223=4224
<4224=4226,4225
<4226=4228,4227
<4228=4230,4229
<4231=4232
<4232=4236,4233
<4233=4234
<4234=4235
<4236=4237
<4237=4239,4238
<4239=4241,4240
<4241=4242
<4243=4250,4244
<4244=4245
<4245=4247,4246
<4247=4249,4248
<4250=4251
<4251=4253,4252
<4254=4339,4332,4255
<4255=4321,4312,4303,4294,4256
<4256=4290,4274,4257
<4257=4258
<4258=4268,4259
<4259=4264,4260
<4260=4261
<4261=4263,4262
<4264=4265
<4265=4267,4266
<4268=4269
<4269=4271,4270
<4271=4273,4272
<4274=4284,4275
<4275=4280,4276
<4276=4277
<4277=4279,4278
<4280=4281
<4281=4283,4282
<4284=4285
<4285=4287,4286
<4287=4289,4288
<4290=4291
<4291=4293,4292
<4294=4295
<4295=4302,4301,4296
<4296=4300,4297
<4297=4299,4298
<4303=4308,4304
<4304=4305
<4305=4307,4306
<4308=4309
<4309=4311,4310
<4312=4313
<4313=4320,4319,4314
<4314=4318,4315
<4315=4317,4316
<4321=4322
<4322=4331,4330,4323
<4323=4329,4324
<4324=4328,4325
<4325=4327,4326
<4332=4336,4333
<4333=4335,4334
<4336=4338,4337
<4339=4340
<4340=4342,4341
<4343=4344
<4344=4350,4345
<4345=4349,4346
<4346=4348,4347
<4351=4352
<4352=4366,4353
<4353=4361,4354
<4354=4356,4355
<4356=4360,4357
<4357=4359,4358
<4361=4363,4362
<4363=4365,4364
<4367=4368
<4368=4378,4369
<4369=4373,4370
<4370=4372,4371
<4373=4375,4374
<4375=4377,4376
<4379=4380
<4380=4385,4384,4381
<4381=4383,4382
<4386=4451,4444,4387
<4387=4433,4424,4415,4406,4388
<4388=4402,4396,4389
<4389=4390
<4390=4391
<4391=4393,4392
<4393=4395,4394
<4396=4397
<4397=4399,4398
<4399=4401,4400
<4402=4403
<4403=4405,4404
<4406=4407
<4407=4414,4413,4408
<4408=4412,4409
<4409=4411,4410
<4415=4420,4416
<4416=4417
<4417=4419,4418
<4420=4421
<4421=4423,4422
<4424=4425
<4425=4432,4431,4426
<4426=4430,4427
<4427=4429,4428
<4433=4434
<4434=4443,4442,4435
<4435=4441,4436
<4436=4440,4437
<4437=4439,4438
<4444=4448,4445
<4445=4447,4446
<4448=4450,4449
<4451=4452
<4452=4454,4453
<4455=4456
<4456=4465,4464,4457
<4457=4463,4458
<4458=4462,4459
<4459=4461,4460
<4466=4467
<4467=4481,4468
<4468=4476,4469
<4469=4471,4470
<4471=4475,4472
<4472=4474,4473
<4476=4478,4477
<4478=4480,4479
<4482=4483
<4483=4493,4484
<4484=4488,4485
<4485=4487,4486
<4488=4490,4489
<4490=4492,4491
<4494=4544,4537,4495
<4495=4526,4513,4496
<4496=4497
<4497=4510,4498
<4498=4508,4499
<4499=4500
<4500=4501
<4501=4505,4502
<4502=4504,4503
<4505=4507,4506
<4508=4509
<4510=4512,4511
<4513=4514
<4514=4525,4524,4515
<4515=4523,4516
<4516=4522,4517
<4517=4521,4518
<4518=4520,4519
<4526=4527
<4527=4536,4535,4528
<4528=4534,4529
<4529=4533,4530
<4530=4532,4531
<4537=4541,4538
<4538=4540,4539
<4541=4543,4542
<4544=4545
<4545=4547,4546
<4548=4549
<4549=4564,4563,4550
<4550=4562,4551
<4551=4557,4552
<4552=4556,4553
<4553=4555,4554
<4557=4559,4558
<4559=4561,4560
<4565=4566
<4566=4577,4576,4567
<4567=4575,4568
<4568=4570,4569
<4570=4572,4571
<4572=4574,4573
<4578=4579
<4579=4590,4589,4580
<4580=4588,4581
<4581=4583,4582
<4583=4585,4584
<4585=4587,4586
<4591=4592
<4592=4609,4608,4593
<4593=4607,4594
<4594=4600,4595
<4595=4596
<4596=4597
<4597=4599,4598
<4600=4601
<4601=4603,4602
<4603=4605,4604
<4605=4606
<4610=4631,4611
<4611=4612
<4612=4626,4613
<4613=4619,4614
<4614=4615
<4615=4616
<4616=4618,4617
<4619=4620
<4620=4622,4621
<4622=4624,4623
<4624=4625
<4626=4628,4627
<4628=4630,4629
<4631=4632
<4632=4634,4633
<4634=4636,4635
<4636=4638,4637
<4639=4640
<4640=4649,4648,4641
<4641=4647,4642
<4642=4644,4643
<4644=4646,4645
<4650=4651
<4651=4660,4659,4652
<4652=4658,4653
<4653=4655,4654
<4655=4657,4656
<4661=4676,4662
<4662=4663
<4663=4674,4664
<4664=4672,4670,4665
<4665=4666
<4666=4668,4667
<4668=4669
<4670=4671
<4672=4673
<4674=4675
<4676=4677
<4677=4679,4678
<4680=4682,4681
<4682=4683
<4683=4685,4684
<4685=4687,4686
<4688=4689
<4689=4692,4691,4690
<4693=4694
<4694=4700,4695
<4695=4698,4696
<4696=4697
<4698=4699
<4700=4701
<4751=4757,4756,4752
<4752=4753
<4753=4755,4754
<4757=4766,4758
<4758=4759
<4759=4761,4760
<4761=4763,4762
<4763=4765,4764
<4766=4767
<4767=4775,4768
<4768=4769
<4769=4770
<4770=4772,4771
<4772=4774,4773
<4775=4776
<4776=4778,4777
<4778=4780,4779
<4780=4781
<4792=4798,4797,4793
<4793=4794
<4794=4796,4795
<4798=5306,5292,5281,5276,5262,5243,5232,5221,5192,5163,5150,5137,5124,5113,5102,4815,4807,4799
<4799=4800
<4800=4802,4801
<4802=4804,4803
<4804=4806,4805
<4807=4808
<4808=4810,4809
<4810=4812,4811
<4812=4814,4813
<4815=5094,5090,5087,4816
<4816=4817
<4817=5079,5075,5072,4818
<4818=5059,5048,5041,5034,5027,5023,5014,4986,4978,4948,4940,4910,4900,4868,4819
<4819=4864,4838,4820
<4820=4821
<4821=4830,4822
<4822=4823
<4823=4827,4824
<4824=4826,4825
<4827=4829,4828
<4830=4831
<4831=4835,4832
<4832=4834,4833
<4835=4837,4836
<4838=4855,4847,4839
<4839=4840
<4840=4844,4841
<4841=4843,4842
<4844=4846,4845
<4847=4848
<4848=4852,4849
<4849=4851,4850
<4852=4854,4853
<4855=4856
<4856=4863,4862,4857
<4857=4861,4858
<4858=4860,4859
<4864=4865
<4865=4867,4866
<4868=4896,4869
<4869=4890,4886,4874,4870
<4870=4871
<4871=4873,4872
<4874=4875
<4875=4885,4876
<4876=4884,4877
<4877=4883,4878
<4878=4882,4879
<4879=4881,4880
<4886=4887
<4887=4889,4888
<4890=4891
<4891=4895,4892
<4892=4894,4893
<4896=4897
<4897=4899,4898
<4900=4901
<4901=4909,4902
<4902=4908,4903
<4903=4907,4904
<4904=4906,4905
<4910=4936,4911
<4911=4930,4926,4916,4912
<4912=4913
<4913=4915,4914
<4916=4917
<4917=4925,4918
<4918=4924,4919
<4919=4923,4920
<4920=4922,4921
<4926=4927
<4927=4929,4928
<4930=4931
<4931=4935,4932
<4932=4934,4933
<4936=4937
<4937=4939,4938
<4940=4941
<4941=4947,4942
<4942=4946,4943
<4943=4945,4944
<4948=4974,4949
<4949=4968,4964,4954,4950
<4950=4951
<4951=4953,4952
<4954=4955
<4955=4963,4956
<4956=4962,4957
<4957=4961,4958
<4958=4960,4959
<4964=4965
<4965=4967,4966
<4968=4969
<4969=4973,4970
<4970=4972,4971
<4974=4975
<4975=4977,4976
<4978=4979
<4979=4985,4980
<4980=4984,4981
<4981=4983,4982
<4986=5010,4987
<4987=5004,5000,4992,4988
<4988=4989
<4989=4991,4990
<4992=4993
<4993=4999,4994
<4994=4998,4995
<4995=4997,4996
<5000=5001
<5001=5003,5002
<5004=5005
<5005=5009,5006
<5006=5008,5007
<5010=5011
<5011=5013,5012
<5014=5015
<5015=5022,5021,5016
<5016=5020,5017
<5017=5019,5018
<5023=5024
<5024=5026,5025
<5027=5028
<5028=5033,5032,5029
<5029=5031,5030
<5034=5035
<5035=5040,5039,5036
<5036=5038,5037
<5041=5042
<5042=5047,5046,5043
<5043=5045,5044
<5048=5049
<5049=5058,5057,5050
<5050=5056,5051
<5051=5055,5052
<5052=5054,5053
<5059=5060
<5060=5071,5070,5061
<5061=5069,5062
<5062=5068,5063
<5063=5067,5064
<5064=5066,5065
<5072=5074,5073
<5075=5076
<5076=5078,5077
<5079=5080
<5080=5081
<5081=5086,5085,5082
<5082=5084,5083
<5087=5089,5088
<5090=5091
<5091=5093,5092
<5094=5095
<5095=5096
<5096=5101,5100,5097
<5097=5099,5098
<5102=5103
<5103=5112,5111,5104
<5104=5110,5105
<5105=5107,5106
<5107=5109,5108
<5113=5114
<5114=5123,5122,5115
<5115=5121,5116
<5116=5118,5117
<5118=5120,5119
<5124=5125
<5125=5136,5135,5126
<5126=5134,5127
<5127=5131,5128
<5128=5130,5129
<5131=5133,5132
<5137=5138
<5138=5149,5148,5139
<5139=5147,5140
<5140=5144,5141
<5141=5143,5142
<5144=5146,5145
<5150=5151
<5151=5162,5161,5152
<5152=5160,5153
<5153=5157,5154
<5154=5156,5155
<5157=5159,5158
<5163=5184,5164
<5164=5165
<5165=5179,5166
<5166=5172,5167
<5167=5168
<5168=5169
<5169=5171,5170
<5172=5173
<5173=5175,5174
<5175=5177,5176
<5177=5178
<5179=5181,5180
<5181=5183,5182
<5184=5185
<5185=5187,5186
<5187=5189,5188
<5189=5191,5190
<5192=5213,5193
<5193=5194
<5194=5208,5195
<5195=5201,5196
<5196=5197
<5197=5198
<5198=5200,5199
<5201=5202
<5202=5204,5203
<5204=5206,5205
<5206=5207
<5208=5210,5209
<5210=5212,5211
<5213=5214
<5214=5216,5215
<5216=5218,5217
<5218=5220,5219
<5221=5222
<5222=5231,5230,5223
<5223=5229,5224
<5224=5226,5225
<5226=5228,5227
<5232=5233
<5233=5242,5241,5234
<5234=5240,5235
<5235=5237,5236
<5237=5239,5238
<5243=5258,5244
<5244=5245
<5245=5256,5246
<5246=5254,5252,5247
<5247=5248
<5248=5250,5249
<5250=5251
<5252=5253
<5254=5255
<5256=5257
<5258=5259
<5259=5261,5260
<5262=5264,5263
<5264=5265
<5265=5271,5266
<5266=5268,5267
<5268=5270,5269
<5271=5273,5272
<5273=5275,5274
<5276=5277
<5277=5280,5279,5278
<5281=5282
<5282=5290,5283
<5283=5288,5284
<5284=5285
<5285=5287,5286
<5288=5289
<5290=5291
<5292=5302,5293
<5293=5295,5294
<5295=5296
<5296=5300,5297
<5297=5298
<5298=5299
<5300=5301
<5302=5303
<5303=5305,5304
<5306=5316,5307
<5307=5309,5308
<5309=5310
<5310=5314,5311
<5311=5312
<5312=5313
<5314=5315
<5316=5317
<5317=5321,5318
<5318=5320,5319
<5374=5380,5379,5375
<5375=5376
<5376=5378,5377
<5380=5405,5389,5381
<5381=5382
<5382=5384,5383
<5384=5386,5385
<5386=5388,5387
<5389=5390
<5390=5398,5391
<5391=5392
<5392=5393
<5393=5395,5394
<5395=5397,5396
<5398=5399
<5399=5401,5400
<5401=5403,5402
<5403=5404
<5405=5415,5406
<5406=5408,5407
<5408=5409
<5409=5413,5410
<5410=5411
<5411=5412
<5413=5414
<5415=5416
<5416=5418,5417
<5429=5435,5434,5430
<5430=5431
<5431=5433,5432
<5435=5460,5444,5436
<5436=5437
<5437=5439,5438
<5439=5441,5440
<5441=5443,5442
<5444=5445
<5445=5453,5446
<5446=5447
<5447=5448
<5448=5450,5449
<5450=5452,5451
<5453=5454
<5454=5456,5455
<5456=5458,5457
<5458=5459
<5460=5470,5461
<5461=5463,5462
<5463=5464
<5464=5468,5465
<5465=5466
<5466=5467
<5468=5469
<5470=5471
<5471=5473,5472
<5484=5490,5489,5485
<5485=5486
<5486=5488,5487
<5490=5500,5491
<5491=5492
<5492=5498,5493
<5493=5496,5494
<5494=5495
<5496=5497
<5498=5499
<5500=5501
<5501=5507,5502
<5502=5503
<5503=5504
<5504=5506,5505
<5507=5508
