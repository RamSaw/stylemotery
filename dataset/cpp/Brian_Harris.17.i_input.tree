>5	FunctionDef	Cheat_God ()
>6	ParameterList	 
>7	ReturnType	static bool
>8	CompoundStatement	 
>9	CompoundStatement	 
>10	ExpressionStatement	 
>11	AssignmentExpr	g -> plyr -> message = STSTR_DQDON
>12	Identifier	STSTR_DQDON
>13	PtrMemberAccess	g -> plyr -> message
>14	Identifier	message
>15	PtrMemberAccess	g -> plyr
>16	Identifier	plyr
>17	Identifier	g
>18	Statement	 
>19	ExpressionStatement	 
>20	AssignmentExpr	g -> plyr -> health = 100
>21	PrimaryExpression	100
>22	PtrMemberAccess	g -> plyr -> health
>23	Identifier	health
>24	PtrMemberAccess	g -> plyr
>25	Identifier	plyr
>26	Identifier	g
>27	Statement	 
>28	ExpressionStatement	 
>29	AssignmentExpr	g -> plyr -> mo -> health = 100
>30	PrimaryExpression	100
>31	PtrMemberAccess	g -> plyr -> mo -> health
>32	Identifier	health
>33	PtrMemberAccess	g -> plyr -> mo
>34	Identifier	mo
>35	PtrMemberAccess	g -> plyr
>36	Identifier	plyr
>37	Identifier	g
>38	Statement	 
>39	Statement	 
>40	Statement	 
>41	Statement	 
>42	Statement	 
>43	Statement	 
>44	Statement	 
>45	Statement	 
>46	Statement	 
>47	Statement	 
>48	Statement	 
>49	Statement	 
>50	Statement	 
>51	Statement	 
>52	Statement	 
>53	Statement	 
>54	Statement	 
>55	Statement	 
>56	Statement	 
>57	Statement	 
>58	Statement	 
>59	ExpressionStatement	 
>60	AssignmentExpr	g -> plyr -> cheats ^= CF_GODMODE
>61	Identifier	CF_GODMODE
>62	PtrMemberAccess	g -> plyr -> cheats
>63	Identifier	cheats
>64	PtrMemberAccess	g -> plyr
>65	Identifier	plyr
>66	Identifier	g
>67	Statement	 
>68	CompoundStatement	 
>69	ReturnStatement	 
>70	Identifier	false
>71	Statement	 
>72	Statement	 
>73	Statement	 
>74	Statement	 
>75	Statement	 
>76	Statement	 
>77	Statement	 
>78	Statement	 
>79	Statement	 
>80	Statement	 
>81	Statement	 
>101	FunctionDef	Cheat_NextLevel ()
>102	ParameterList	 
>103	ReturnType	static bool
>104	CompoundStatement	 
>105	ReturnStatement	 
>106	Identifier	true
>107	ExpressionStatement	 
>108	CallExpression	G_ExitLevel ( )
>109	ArgumentList	 
>110	Callee	G_ExitLevel
>111	Identifier	G_ExitLevel
>112	CompoundStatement	 
>113	ReturnStatement	 
>114	Identifier	false
>115	Statement	 
>116	Statement	 
>117	Statement	 
>118	Statement	 
>119	Statement	 
>120	Statement	 
>121	Statement	 
>122	Statement	 
>123	Statement	 
>124	Statement	 
>125	Statement	 
>131	FunctionDef	Cheat_GiveAll ()
>132	ParameterList	 
>133	ReturnType	static bool
>134	CompoundStatement	 
>135	ReturnStatement	 
>136	Identifier	true
>137	ExpressionStatement	 
>138	AssignmentExpr	g -> plyr -> message = STSTR_KFAADDED
>139	Identifier	STSTR_KFAADDED
>140	PtrMemberAccess	g -> plyr -> message
>141	Identifier	message
>142	PtrMemberAccess	g -> plyr
>143	Identifier	plyr
>144	Identifier	g
>145	Statement	 
>146	ExpressionStatement	 
>147	AssignmentExpr	g -> plyr -> cards [ i ] = true
>148	Identifier	true
>149	ArrayIndexing	g -> plyr -> cards [ i ]
>150	Identifier	i
>151	PtrMemberAccess	g -> plyr -> cards
>152	Identifier	cards
>153	PtrMemberAccess	g -> plyr
>154	Identifier	plyr
>155	Identifier	g
>156	ForStatement	for ( i = 0 ; i < NUMCARDS ; i ++ )
>157	Statement	 
>158	IncDecOp	 
>159	IncDec	++
>160	Identifier	i
>161	Condition	 
>162	RelationalExpression	i < NUMCARDS
>163	Identifier	NUMCARDS
>164	Identifier	i
>165	ForInit	 
>166	AssignmentExpr	i = 0
>167	PrimaryExpression	0
>168	Identifier	i
>169	ExpressionStatement	 
>170	ArrayIndexing	g -> plyr -> maxammo [ i ]
>171	Identifier	i
>172	PtrMemberAccess	g -> plyr -> maxammo
>173	Identifier	maxammo
>174	PtrMemberAccess	g -> plyr
>175	Identifier	plyr
>176	Identifier	g
>177	Statement	 
>178	Statement	 
>179	Statement	 
>180	Statement	 
>181	Statement	 
>182	Statement	 
>183	Statement	 
>184	Statement	 
>185	Statement	 
>186	Statement	 
>187	ForStatement	for ( i = 0 ; i < NUMAMMO ; i ++ )
>188	Statement	 
>189	IncDecOp	 
>190	IncDec	++
>191	Identifier	i
>192	Condition	 
>193	RelationalExpression	i < NUMAMMO
>194	Identifier	NUMAMMO
>195	Identifier	i
>196	ForInit	 
>197	AssignmentExpr	i = 0
>198	PrimaryExpression	0
>199	Identifier	i
>200	ExpressionStatement	 
>201	AssignmentExpr	g -> plyr -> weaponowned [ i ] = true
>202	Identifier	true
>203	ArrayIndexing	g -> plyr -> weaponowned [ i ]
>204	Identifier	i
>205	PtrMemberAccess	g -> plyr -> weaponowned
>206	Identifier	weaponowned
>207	PtrMemberAccess	g -> plyr
>208	Identifier	plyr
>209	Identifier	g
>210	ForStatement	for ( i = 0 ; i < NUMWEAPONS ; i ++ )
>211	Statement	 
>212	IncDecOp	 
>213	IncDec	++
>214	Identifier	i
>215	Condition	 
>216	RelationalExpression	i < NUMWEAPONS
>217	Identifier	NUMWEAPONS
>218	Identifier	i
>219	ForInit	 
>220	AssignmentExpr	i = 0
>221	PrimaryExpression	0
>222	Identifier	i
>223	IdentifierDeclStatement	 
>224	IdentifierDecl	i
>225	Identifier	i
>226	IdentifierDeclType	int
>227	ExpressionStatement	 
>228	AssignmentExpr	g -> plyr -> armortype = 2
>229	PrimaryExpression	2
>230	PtrMemberAccess	g -> plyr -> armortype
>231	Identifier	armortype
>232	PtrMemberAccess	g -> plyr
>233	Identifier	plyr
>234	Identifier	g
>235	Statement	 
>236	ExpressionStatement	 
>237	AssignmentExpr	g -> plyr -> armorpoints = 200
>238	PrimaryExpression	200
>239	PtrMemberAccess	g -> plyr -> armorpoints
>240	Identifier	armorpoints
>241	PtrMemberAccess	g -> plyr
>242	Identifier	plyr
>243	Identifier	g
>244	Statement	 
>245	CompoundStatement	 
>246	ReturnStatement	 
>247	Identifier	false
>248	Statement	 
>249	Statement	 
>250	Statement	 
>251	Statement	 
>252	Statement	 
>253	Statement	 
>254	Statement	 
>255	Statement	 
>256	Statement	 
>257	Statement	 
>258	Statement	 
>285	FunctionDef	Cheat_GiveAmmo ()
>286	ParameterList	 
>287	ReturnType	static bool
>288	CompoundStatement	 
>289	ReturnStatement	 
>290	Identifier	true
>291	ExpressionStatement	 
>292	AssignmentExpr	g -> plyr -> message = STSTR_KFAADDED
>293	Identifier	STSTR_KFAADDED
>294	PtrMemberAccess	g -> plyr -> message
>295	Identifier	message
>296	PtrMemberAccess	g -> plyr
>297	Identifier	plyr
>298	Identifier	g
>299	Statement	 
>300	ExpressionStatement	 
>301	ArrayIndexing	g -> plyr -> maxammo [ i ]
>302	Identifier	i
>303	PtrMemberAccess	g -> plyr -> maxammo
>304	Identifier	maxammo
>305	PtrMemberAccess	g -> plyr
>306	Identifier	plyr
>307	Identifier	g
>308	Statement	 
>309	Statement	 
>310	Statement	 
>311	Statement	 
>312	Statement	 
>313	Statement	 
>314	Statement	 
>315	Statement	 
>316	Statement	 
>317	Statement	 
>318	ForStatement	for ( i = 0 ; i < NUMAMMO ; i ++ )
>319	Statement	 
>320	IncDecOp	 
>321	IncDec	++
>322	Identifier	i
>323	Condition	 
>324	RelationalExpression	i < NUMAMMO
>325	Identifier	NUMAMMO
>326	Identifier	i
>327	ForInit	 
>328	AssignmentExpr	i = 0
>329	PrimaryExpression	0
>330	Identifier	i
>331	ExpressionStatement	 
>332	AssignmentExpr	g -> plyr -> weaponowned [ i ] = true
>333	Identifier	true
>334	ArrayIndexing	g -> plyr -> weaponowned [ i ]
>335	Identifier	i
>336	PtrMemberAccess	g -> plyr -> weaponowned
>337	Identifier	weaponowned
>338	PtrMemberAccess	g -> plyr
>339	Identifier	plyr
>340	Identifier	g
>341	ForStatement	for ( i = 0 ; i < NUMWEAPONS ; i ++ )
>342	Statement	 
>343	IncDecOp	 
>344	IncDec	++
>345	Identifier	i
>346	Condition	 
>347	RelationalExpression	i < NUMWEAPONS
>348	Identifier	NUMWEAPONS
>349	Identifier	i
>350	ForInit	 
>351	AssignmentExpr	i = 0
>352	PrimaryExpression	0
>353	Identifier	i
>354	IdentifierDeclStatement	 
>355	IdentifierDecl	i
>356	Identifier	i
>357	IdentifierDeclType	int
>358	ExpressionStatement	 
>359	AssignmentExpr	g -> plyr -> armortype = 2
>360	PrimaryExpression	2
>361	PtrMemberAccess	g -> plyr -> armortype
>362	Identifier	armortype
>363	PtrMemberAccess	g -> plyr
>364	Identifier	plyr
>365	Identifier	g
>366	Statement	 
>367	ExpressionStatement	 
>368	AssignmentExpr	g -> plyr -> armorpoints = 200
>369	PrimaryExpression	200
>370	PtrMemberAccess	g -> plyr -> armorpoints
>371	Identifier	armorpoints
>372	PtrMemberAccess	g -> plyr
>373	Identifier	plyr
>374	Identifier	g
>375	Statement	 
>376	CompoundStatement	 
>377	ReturnStatement	 
>378	Identifier	false
>379	Statement	 
>380	Statement	 
>381	Statement	 
>382	Statement	 
>383	Statement	 
>384	Statement	 
>385	Statement	 
>386	Statement	 
>387	Statement	 
>388	Statement	 
>389	Statement	 
>413	FunctionDef	Cheat_Choppers ()
>414	ParameterList	 
>415	ReturnType	static bool
>416	CompoundStatement	 
>417	ReturnStatement	 
>418	Identifier	true
>419	ExpressionStatement	 
>420	AssignmentExpr	g -> plyr -> message = \"Chainsaw!\"
>421	PrimaryExpression	\"Chainsaw!\"
>422	PtrMemberAccess	g -> plyr -> message
>423	Identifier	message
>424	PtrMemberAccess	g -> plyr
>425	Identifier	plyr
>426	Identifier	g
>427	Statement	 
>428	ExpressionStatement	 
>429	AssignmentExpr	g -> plyr -> weaponowned [ wp_chainsaw ] = true
>430	Identifier	true
>431	ArrayIndexing	g -> plyr -> weaponowned [ wp_chainsaw ]
>432	Identifier	wp_chainsaw
>433	PtrMemberAccess	g -> plyr -> weaponowned
>434	Identifier	weaponowned
>435	PtrMemberAccess	g -> plyr
>436	Identifier	plyr
>437	Identifier	g
>438	Statement	 
>439	CompoundStatement	 
>440	ReturnStatement	 
>441	Identifier	false
>442	Statement	 
>443	Statement	 
>444	Statement	 
>445	Statement	 
>446	Statement	 
>447	Statement	 
>448	Statement	 
>449	Statement	 
>450	Statement	 
>451	Statement	 
>452	Statement	 
>472	FunctionDef	TogglePowerUp (int i)
>473	ParameterList	int i
>474	Parameter	 
>475	Identifier	i
>476	ParameterType	int
>477	ReturnType	static void
>478	CompoundStatement	 
>479	ExpressionStatement	 
>480	AssignmentExpr	g -> plyr -> message = STSTR_BEHOLDX
>481	Identifier	STSTR_BEHOLDX
>482	PtrMemberAccess	g -> plyr -> message
>483	Identifier	message
>484	PtrMemberAccess	g -> plyr
>485	Identifier	plyr
>486	Identifier	g
>487	Statement	 
>488	ExpressionStatement	 
>489	AssignmentExpr	g -> plyr -> powers [ i ] = 0
>490	PrimaryExpression	0
>491	ArrayIndexing	g -> plyr -> powers [ i ]
>492	Identifier	i
>493	PtrMemberAccess	g -> plyr -> powers
>494	Identifier	powers
>495	PtrMemberAccess	g -> plyr
>496	Identifier	plyr
>497	Identifier	g
>498	ExpressionStatement	 
>499	AssignmentExpr	g -> plyr -> powers [ i ] = 1
>500	PrimaryExpression	1
>501	ArrayIndexing	g -> plyr -> powers [ i ]
>502	Identifier	i
>503	PtrMemberAccess	g -> plyr -> powers
>504	Identifier	powers
>505	PtrMemberAccess	g -> plyr
>506	Identifier	plyr
>507	Identifier	g
>508	ExpressionStatement	 
>509	Statement	 
>510	Statement	 
>511	Statement	 
>512	Statement	 
>513	Statement	 
>514	Statement	 
>515	Statement	 
>516	Statement	 
>517	Statement	 
>518	Statement	 
>519	Statement	 
>520	Statement	 
>521	Statement	 
>522	Statement	 
>523	Statement	 
>524	Statement	 
>525	Statement	 
>526	Statement	 
>527	Statement	 
>528	Statement	 
>529	Statement	 
>530	Statement	 
>547	FunctionDef	Cheat_GiveInvul ()
>548	ParameterList	 
>549	ReturnType	static bool
>550	CompoundStatement	 
>551	ReturnStatement	 
>552	Identifier	true
>553	ExpressionStatement	 
>554	CallExpression	TogglePowerUp ( 0 )
>555	ArgumentList	0
>556	Argument	0
>557	PrimaryExpression	0
>558	Callee	TogglePowerUp
>559	Identifier	TogglePowerUp
>560	CompoundStatement	 
>561	ReturnStatement	 
>562	Identifier	false
>563	Statement	 
>564	Statement	 
>565	Statement	 
>566	Statement	 
>567	Statement	 
>568	Statement	 
>569	Statement	 
>570	Statement	 
>571	Statement	 
>572	Statement	 
>573	Statement	 
>579	FunctionDef	Cheat_GiveBerserk ()
>580	ParameterList	 
>581	ReturnType	static bool
>582	CompoundStatement	 
>583	ReturnStatement	 
>584	Identifier	true
>585	ExpressionStatement	 
>586	CallExpression	TogglePowerUp ( 1 )
>587	ArgumentList	1
>588	Argument	1
>589	PrimaryExpression	1
>590	Callee	TogglePowerUp
>591	Identifier	TogglePowerUp
>592	CompoundStatement	 
>593	ReturnStatement	 
>594	Identifier	false
>595	Statement	 
>596	Statement	 
>597	Statement	 
>598	Statement	 
>599	Statement	 
>600	Statement	 
>601	Statement	 
>602	Statement	 
>603	Statement	 
>604	Statement	 
>605	Statement	 
>611	FunctionDef	Cheat_GiveBlur ()
>612	ParameterList	 
>613	ReturnType	static bool
>614	CompoundStatement	 
>615	ReturnStatement	 
>616	Identifier	true
>617	ExpressionStatement	 
>618	CallExpression	TogglePowerUp ( 2 )
>619	ArgumentList	2
>620	Argument	2
>621	PrimaryExpression	2
>622	Callee	TogglePowerUp
>623	Identifier	TogglePowerUp
>624	CompoundStatement	 
>625	ReturnStatement	 
>626	Identifier	false
>627	Statement	 
>628	Statement	 
>629	Statement	 
>630	Statement	 
>631	Statement	 
>632	Statement	 
>633	Statement	 
>634	Statement	 
>635	Statement	 
>636	Statement	 
>637	Statement	 
>643	FunctionDef	Cheat_GiveRad ()
>644	ParameterList	 
>645	ReturnType	static bool
>646	CompoundStatement	 
>647	ReturnStatement	 
>648	Identifier	true
>649	ExpressionStatement	 
>650	CallExpression	TogglePowerUp ( 3 )
>651	ArgumentList	3
>652	Argument	3
>653	PrimaryExpression	3
>654	Callee	TogglePowerUp
>655	Identifier	TogglePowerUp
>656	CompoundStatement	 
>657	ReturnStatement	 
>658	Identifier	false
>659	Statement	 
>660	Statement	 
>661	Statement	 
>662	Statement	 
>663	Statement	 
>664	Statement	 
>665	Statement	 
>666	Statement	 
>667	Statement	 
>668	Statement	 
>669	Statement	 
>675	FunctionDef	Cheat_GiveMap ()
>676	ParameterList	 
>677	ReturnType	static bool
>678	CompoundStatement	 
>679	ReturnStatement	 
>680	Identifier	true
>681	ExpressionStatement	 
>682	CallExpression	TogglePowerUp ( 4 )
>683	ArgumentList	4
>684	Argument	4
>685	PrimaryExpression	4
>686	Callee	TogglePowerUp
>687	Identifier	TogglePowerUp
>688	CompoundStatement	 
>689	ReturnStatement	 
>690	Identifier	false
>691	Statement	 
>692	Statement	 
>693	Statement	 
>694	Statement	 
>695	Statement	 
>696	Statement	 
>697	Statement	 
>698	Statement	 
>699	Statement	 
>700	Statement	 
>701	Statement	 
>707	FunctionDef	Cheat_GiveLight ()
>708	ParameterList	 
>709	ReturnType	static bool
>710	CompoundStatement	 
>711	ReturnStatement	 
>712	Identifier	true
>713	ExpressionStatement	 
>714	CallExpression	TogglePowerUp ( 5 )
>715	ArgumentList	5
>716	Argument	5
>717	PrimaryExpression	5
>718	Callee	TogglePowerUp
>719	Identifier	TogglePowerUp
>720	CompoundStatement	 
>721	ReturnStatement	 
>722	Identifier	false
>723	Statement	 
>724	Statement	 
>725	Statement	 
>726	Statement	 
>727	Statement	 
>728	Statement	 
>729	Statement	 
>730	Statement	 
>731	Statement	 
>732	Statement	 
>733	Statement	 
>754	FunctionDef	BeginTrackingCheat ()
>755	ParameterList	 
>756	ReturnType	void
>757	CompoundStatement	 
>758	ExpressionStatement	 
>759	CallExpression	memset ( currentCode , 0 , sizeof ( currentCode ) )
>760	ArgumentList	currentCode
>761	Argument	sizeof ( currentCode )
>762	SizeofExpr	sizeof ( currentCode )
>763	SizeofOperand	currentCode
>764	Sizeof	sizeof
>765	Argument	0
>766	PrimaryExpression	0
>767	Argument	currentCode
>768	Identifier	currentCode
>769	Callee	memset
>770	Identifier	memset
>771	ExpressionStatement	 
>772	AssignmentExpr	currentCheatLength = 0
>773	PrimaryExpression	0
>774	Identifier	currentCheatLength
>775	ExpressionStatement	 
>776	AssignmentExpr	tracking = true
>777	Identifier	true
>778	Identifier	tracking
>786	FunctionDef	EndTrackingCheat ()
>787	ParameterList	 
>788	ReturnType	void
>789	CompoundStatement	 
>790	ExpressionStatement	 
>791	AssignmentExpr	tracking = false
>792	Identifier	false
>793	Identifier	tracking
>801	FunctionDef	CheckCheat (int button)
>802	ParameterList	int button
>803	Parameter	 
>804	Identifier	button
>805	ParameterType	int
>806	ReturnType	void
>807	CompoundStatement	 
>808	CompoundStatement	 
>809	IfStatement	if ( currentCheatLength == NUM_BUTTONS )
>810	CompoundStatement	 
>811	ExpressionStatement	 
>812	AssignmentExpr	currentCheatLength = 0
>813	PrimaryExpression	0
>814	Identifier	currentCheatLength
>815	ExpressionStatement	 
>816	CallExpression	memset ( currentCode , 0 , sizeof ( currentCode ) )
>817	ArgumentList	currentCode
>818	Argument	sizeof ( currentCode )
>819	SizeofExpr	sizeof ( currentCode )
>820	SizeofOperand	currentCode
>821	Sizeof	sizeof
>822	Argument	0
>823	PrimaryExpression	0
>824	Argument	currentCode
>825	Identifier	currentCode
>826	Callee	memset
>827	Identifier	memset
>828	ForStatement	for ( int i = 0 ; i < numberOfCodes ; ++ i )
>829	CompoundStatement	 
>830	IfStatement	if ( memcmp ( & codes [ i ] . code [ 0 ] , & currentCode [ 0 ] , sizeof ( currentCode ) ) == 0 )
>831	CompoundStatement	 
>832	IfStatement	if ( codes [ i ] . function ( ) )
>833	CompoundStatement	 
>834	ExpressionStatement	 
>835	CallExpression	S_StartSound ( 0 , sfx_cybsit )
>836	ArgumentList	0
>837	Argument	sfx_cybsit
>838	Identifier	sfx_cybsit
>839	Argument	0
>840	PrimaryExpression	0
>841	Callee	S_StartSound
>842	Identifier	S_StartSound
>843	Condition	 
>844	CallExpression	codes [ i ] . function ( )
>845	ArgumentList	 
>846	Callee	codes [ i ] . function
>847	MemberAccess	codes [ i ] . function
>848	Identifier	function
>849	ArrayIndexing	codes [ i ]
>850	Identifier	i
>851	Identifier	codes
>852	Condition	 
>853	EqualityExpression	memcmp ( & codes [ i ] . code [ 0 ] , & currentCode [ 0 ] , sizeof ( currentCode ) ) == 0
>854	PrimaryExpression	0
>855	CallExpression	memcmp ( & codes [ i ] . code [ 0 ] , & currentCode [ 0 ] , sizeof ( currentCode ) )
>856	ArgumentList	& codes [ i ] . code [ 0 ]
>857	Argument	sizeof ( currentCode )
>858	SizeofExpr	sizeof ( currentCode )
>859	SizeofOperand	currentCode
>860	Sizeof	sizeof
>861	Argument	& currentCode [ 0 ]
>862	UnaryOp	& currentCode [ 0 ]
>863	ArrayIndexing	currentCode [ 0 ]
>864	PrimaryExpression	0
>865	Identifier	currentCode
>866	UnaryOperator	&
>867	Argument	& codes [ i ] . code [ 0 ]
>868	UnaryOp	& codes [ i ] . code [ 0 ]
>869	ArrayIndexing	codes [ i ] . code [ 0 ]
>870	PrimaryExpression	0
>871	MemberAccess	codes [ i ] . code
>872	Identifier	code
>873	ArrayIndexing	codes [ i ]
>874	Identifier	i
>875	Identifier	codes
>876	UnaryOperator	&
>877	Callee	memcmp
>878	Identifier	memcmp
>879	UnaryExpression	 
>880	Identifier	i
>881	IncDec	++
>882	Condition	 
>883	RelationalExpression	i < numberOfCodes
>884	Identifier	numberOfCodes
>885	Identifier	i
>886	ForInit	 
>887	IdentifierDeclStatement	int i = 0 ;
>888	IdentifierDecl	i = 0
>889	AssignmentExpr	i = 0
>890	PrimaryExpression	0
>891	Identifier	i
>892	Identifier	i
>893	IdentifierDeclType	int
>894	Condition	 
>895	EqualityExpression	currentCheatLength == NUM_BUTTONS
>896	Identifier	NUM_BUTTONS
>897	Identifier	currentCheatLength
>898	ExpressionStatement	 
>899	AssignmentExpr	currentCode [ currentCheatLength ++ ] = button
>900	Identifier	button
>901	ArrayIndexing	currentCode [ currentCheatLength ++ ]
>902	IncDecOp	currentCheatLength ++
>903	IncDec	++
>904	Identifier	currentCheatLength
>905	Identifier	currentCode
>906	Statement	 
>907	Statement	 
>908	Statement	 
>909	Statement	 
>910	Statement	 
>911	Statement	 
>912	Statement	 
>913	Statement	 
>914	Statement	 
>915	Statement	 
>940	FunctionDef	I_InitInput ()
>941	ParameterList	 
>942	ReturnType	void
>943	CompoundStatement	 
>947	FunctionDef	I_ShutdownInput ()
>948	ParameterList	 
>949	ReturnType	void
>950	CompoundStatement	 
>954	FunctionDef	_joyAxisConvert (short x , float xbxScale , float dScale , float deadZone)
>955	ParameterList	short x , float xbxScale , float dScale , float deadZone
>956	Parameter	 
>957	Identifier	deadZone
>958	ParameterType	float
>959	Parameter	 
>960	Identifier	dScale
>961	ParameterType	float
>962	Parameter	 
>963	Identifier	xbxScale
>964	ParameterType	float
>965	Parameter	 
>966	Identifier	x
>967	ParameterType	short
>968	ReturnType	static float
>969	CompoundStatement	 
>970	ReturnStatement	 
>971	ConditionalExpression	( fabs ( y ) < deadZone ) ? 0.f 
>972	MultiplicativeExpression	y * dScale
>973	Identifier	dScale
>974	Identifier	y
>975	PrimaryExpression	0.f
>976	Condition	fabs ( y ) < deadZone
>977	RelationalExpression	fabs ( y ) < deadZone
>978	Identifier	deadZone
>979	CallExpression	fabs ( y )
>980	ArgumentList	y
>981	Argument	y
>982	Identifier	y
>983	Callee	fabs
>984	Identifier	fabs
>985	ExpressionStatement	 
>986	AssignmentExpr	y = y / xbxScale
>987	MultiplicativeExpression	y / xbxScale
>988	Identifier	xbxScale
>989	Identifier	y
>990	Identifier	y
>991	IdentifierDeclStatement	 
>992	IdentifierDecl	y = x - 127
>993	AssignmentExpr	y = x - 127
>994	AdditiveExpression	x - 127
>995	PrimaryExpression	127
>996	Identifier	x
>997	Identifier	y
>998	Identifier	y
>999	IdentifierDeclType	float
>1009	FunctionDef	I_PollMouseInputEvents (controller_t * con)
>1010	ParameterList	controller_t * con
>1011	Parameter	 
>1012	Identifier	con
>1013	ParameterType	controller_t *
>1014	ReturnType	int
>1015	CompoundStatement	 
>1016	ReturnStatement	 
>1017	Identifier	numEvents
>1018	IdentifierDeclStatement	 
>1019	IdentifierDecl	numEvents = 0
>1020	AssignmentExpr	numEvents = 0
>1021	PrimaryExpression	0
>1022	Identifier	numEvents
>1023	Identifier	numEvents
>1024	IdentifierDeclType	int
>1030	FunctionDef	I_ReturnMouseInputEvent (const int n , event_t * e)
>1031	ParameterList	const int n , event_t * e
>1032	Parameter	 
>1033	Identifier	e
>1034	ParameterType	event_t *
>1035	Parameter	 
>1036	Identifier	n
>1037	ParameterType	const int
>1038	ReturnType	int
>1039	CompoundStatement	 
>1040	ReturnStatement	 
>1041	PrimaryExpression	0
>1042	CompoundStatement	 
>1043	BreakStatement	 
>1044	Label	 
>1045	Identifier	default
>1046	ReturnStatement	 
>1047	PrimaryExpression	1
>1048	CompoundStatement	 
>1049	BreakStatement	 
>1050	ExpressionStatement	 
>1051	MemberAccess	g -> mouseEvents [ n ] . data
>1052	Identifier	data
>1053	ArrayIndexing	g -> mouseEvents [ n ]
>1054	Identifier	n
>1055	PtrMemberAccess	g -> mouseEvents
>1056	Identifier	mouseEvents
>1057	Identifier	g
>1058	Statement	 
>1059	Statement	 
>1060	Statement	 
>1061	Statement	 
>1062	Statement	 
>1063	Label	 
>1064	Identifier	M_DELTAY
>1065	BreakStatement	 
>1066	ExpressionStatement	 
>1067	MemberAccess	g -> mouseEvents [ n ] . data
>1068	Identifier	data
>1069	ArrayIndexing	g -> mouseEvents [ n ]
>1070	Identifier	n
>1071	PtrMemberAccess	g -> mouseEvents
>1072	Identifier	mouseEvents
>1073	Identifier	g
>1074	Statement	 
>1075	Statement	 
>1076	Statement	 
>1077	Statement	 
>1078	Statement	 
>1079	Label	 
>1080	Identifier	M_DELTAX
>1081	Statement	 
>1082	Statement	 
>1083	Statement	 
>1084	Statement	 
>1085	Statement	 
>1086	Statement	 
>1087	Statement	 
>1088	Statement	 
>1089	Statement	 
>1090	Statement	 
>1091	Statement	 
>1092	Statement	 
>1093	Label	 
>1094	Identifier	IETAxis
>1095	Statement	 
>1096	Statement	 
>1097	Statement	 
>1098	Statement	 
>1099	Statement	 
>1100	Statement	 
>1101	Statement	 
>1102	Statement	 
>1103	Statement	 
>1104	Statement	 
>1105	Statement	 
>1106	Statement	 
>1107	ExpressionStatement	 
>1108	AssignmentExpr	e -> data1 = e -> data2 = e -> data3 = 0
>1109	AssignmentExpr	e -> data2 = e -> data3 = 0
>1110	AssignmentExpr	e -> data3 = 0
>1111	PrimaryExpression	0
>1112	PtrMemberAccess	e -> data3
>1113	Identifier	data3
>1114	Identifier	e
>1115	PtrMemberAccess	e -> data2
>1116	Identifier	data2
>1117	Identifier	e
>1118	PtrMemberAccess	e -> data1
>1119	Identifier	data1
>1120	Identifier	e
>1121	ExpressionStatement	 
>1122	AssignmentExpr	e -> type = ev_mouse
>1123	Identifier	ev_mouse
>1124	PtrMemberAccess	e -> type
>1125	Identifier	type
>1126	Identifier	e
>1145	FunctionDef	I_PollJoystickInputEvents (controller_t * con)
>1146	ParameterList	controller_t * con
>1147	Parameter	 
>1148	Identifier	con
>1149	ParameterType	controller_t *
>1150	ReturnType	int
>1151	CompoundStatement	 
>1152	ReturnStatement	 
>1153	Identifier	numEvents
>1154	IdentifierDeclStatement	 
>1155	IdentifierDecl	numEvents = 0
>1156	AssignmentExpr	numEvents = 0
>1157	PrimaryExpression	0
>1158	Identifier	numEvents
>1159	Identifier	numEvents
>1160	IdentifierDeclType	int
>1166	FunctionDef	xlatekey (int key)
>1167	ParameterList	int key
>1168	Parameter	 
>1169	Identifier	key
>1170	ParameterType	int
>1171	ReturnType	static int
>1172	CompoundStatement	 
>1173	IdentifierDeclStatement	 
>1174	IdentifierDecl	rc = KEY_F1
>1175	AssignmentExpr	rc = KEY_F1
>1176	Identifier	KEY_F1
>1177	Identifier	KEY_F1
>1178	Identifier	rc
>1179	IdentifierDeclType	int
>1186	FunctionDef	I_ReturnJoystickInputEvent (const int n , event_t * e)
>1187	ParameterList	const int n , event_t * e
>1188	Parameter	 
>1189	Identifier	e
>1190	ParameterType	event_t *
>1191	Parameter	 
>1192	Identifier	n
>1193	ParameterType	const int
>1194	ReturnType	int
>1195	CompoundStatement	 
>1196	Statement	 
>1197	Statement	 
>1198	Statement	 
>1199	Statement	 
>1200	Statement	 
>1201	Statement	 
>1202	Statement	 
>1203	Statement	 
>1204	Statement	 
>1205	Statement	 
>1206	Statement	 
>1207	Statement	 
>1208	ExpressionStatement	 
>1209	AssignmentExpr	e -> data1 = e -> data2 = e -> data3 = 0
>1210	AssignmentExpr	e -> data2 = e -> data3 = 0
>1211	AssignmentExpr	e -> data3 = 0
>1212	PrimaryExpression	0
>1213	PtrMemberAccess	e -> data3
>1214	Identifier	data3
>1215	Identifier	e
>1216	PtrMemberAccess	e -> data2
>1217	Identifier	data2
>1218	Identifier	e
>1219	PtrMemberAccess	e -> data1
>1220	Identifier	data1
>1221	Identifier	e
>1231	FunctionDef	I_EndJoystickInputEvents ()
>1232	ParameterList	 
>1233	ReturnType	void
>1234	CompoundStatement	 
>1235	ForStatement	for ( i = 0 ; i < 18 ; i ++ )
>1236	CompoundStatement	 
>1237	ExpressionStatement	 
>1238	AssignmentExpr	g -> joyEvents [ i ] . type = IETNone
>1239	Identifier	IETNone
>1240	MemberAccess	g -> joyEvents [ i ] . type
>1241	Identifier	type
>1242	ArrayIndexing	g -> joyEvents [ i ]
>1243	Identifier	i
>1244	PtrMemberAccess	g -> joyEvents
>1245	Identifier	joyEvents
>1246	Identifier	g
>1247	Statement	 
>1248	IncDecOp	 
>1249	IncDec	++
>1250	Identifier	i
>1251	Condition	 
>1252	RelationalExpression	i < 18
>1253	PrimaryExpression	18
>1254	Identifier	i
>1255	ForInit	 
>1256	AssignmentExpr	i = 0
>1257	PrimaryExpression	0
>1258	Identifier	i
>1259	IdentifierDeclStatement	 
>1260	IdentifierDecl	i
>1261	Identifier	i
>1262	IdentifierDeclType	int
<5=8,7,6
<8=81,80,79,78,77,76,75,74,73,72,71,68,67,59,58,57,56,55,54,53,52,51,50,49,48,9
<9=47,46,45,44,43,42,41,40,39,38,28,27,19,18,10
<10=11
<11=13,12
<13=15,14
<15=17,16
<19=20
<20=22,21
<22=24,23
<24=26,25
<28=29
<29=31,30
<31=33,32
<33=35,34
<35=37,36
<59=60
<60=62,61
<62=64,63
<64=66,65
<68=69
<69=70
<101=104,103,102
<104=125,124,123,122,121,120,119,118,117,116,115,112,107,105
<105=106
<107=108
<108=110,109
<110=111
<112=113
<113=114
<131=134,133,132
<134=258,257,256,255,254,253,252,251,250,249,248,245,244,236,235,227,223,210,200,187,186,185,184,183,182,181,180,179,178,177,169,156,146,145,137,135
<135=136
<137=138
<138=140,139
<140=142,141
<142=144,143
<146=147
<147=149,148
<149=151,150
<151=153,152
<153=155,154
<156=165,161,158,157
<158=160,159
<161=162
<162=164,163
<165=166
<166=168,167
<169=170
<170=172,171
<172=174,173
<174=176,175
<187=196,192,189,188
<189=191,190
<192=193
<193=195,194
<196=197
<197=199,198
<200=201
<201=203,202
<203=205,204
<205=207,206
<207=209,208
<210=219,215,212,211
<212=214,213
<215=216
<216=218,217
<219=220
<220=222,221
<223=224
<224=226,225
<227=228
<228=230,229
<230=232,231
<232=234,233
<236=237
<237=239,238
<239=241,240
<241=243,242
<245=246
<246=247
<285=288,287,286
<288=389,388,387,386,385,384,383,382,381,380,379,376,375,367,366,358,354,341,331,318,317,316,315,314,313,312,311,310,309,308,300,299,291,289
<289=290
<291=292
<292=294,293
<294=296,295
<296=298,297
<300=301
<301=303,302
<303=305,304
<305=307,306
<318=327,323,320,319
<320=322,321
<323=324
<324=326,325
<327=328
<328=330,329
<331=332
<332=334,333
<334=336,335
<336=338,337
<338=340,339
<341=350,346,343,342
<343=345,344
<346=347
<347=349,348
<350=351
<351=353,352
<354=355
<355=357,356
<358=359
<359=361,360
<361=363,362
<363=365,364
<367=368
<368=370,369
<370=372,371
<372=374,373
<376=377
<377=378
<413=416,415,414
<416=452,451,450,449,448,447,446,445,444,443,442,439,438,428,427,419,417
<417=418
<419=420
<420=422,421
<422=424,423
<424=426,425
<428=429
<429=431,430
<431=433,432
<433=435,434
<435=437,436
<439=440
<440=441
<472=478,477,473
<473=474
<474=476,475
<478=530,529,528,527,526,525,524,523,522,521,520,519,518,517,516,515,514,513,512,511,510,509,508,498,488,487,479
<479=480
<480=482,481
<482=484,483
<484=486,485
<488=489
<489=491,490
<491=493,492
<493=495,494
<495=497,496
<498=499
<499=501,500
<501=503,502
<503=505,504
<505=507,506
<547=550,549,548
<550=573,572,571,570,569,568,567,566,565,564,563,560,553,551
<551=552
<553=554
<554=558,555
<555=556
<556=557
<558=559
<560=561
<561=562
<579=582,581,580
<582=605,604,603,602,601,600,599,598,597,596,595,592,585,583
<583=584
<585=586
<586=590,587
<587=588
<588=589
<590=591
<592=593
<593=594
<611=614,613,612
<614=637,636,635,634,633,632,631,630,629,628,627,624,617,615
<615=616
<617=618
<618=622,619
<619=620
<620=621
<622=623
<624=625
<625=626
<643=646,645,644
<646=669,668,667,666,665,664,663,662,661,660,659,656,649,647
<647=648
<649=650
<650=654,651
<651=652
<652=653
<654=655
<656=657
<657=658
<675=678,677,676
<678=701,700,699,698,697,696,695,694,693,692,691,688,681,679
<679=680
<681=682
<682=686,683
<683=684
<684=685
<686=687
<688=689
<689=690
<707=710,709,708
<710=733,732,731,730,729,728,727,726,725,724,723,720,713,711
<711=712
<713=714
<714=718,715
<715=716
<716=717
<718=719
<720=721
<721=722
<754=757,756,755
<757=775,771,758
<758=759
<759=769,760
<760=767,765,761
<761=762
<762=764,763
<765=766
<767=768
<769=770
<771=772
<772=774,773
<775=776
<776=778,777
<786=789,788,787
<789=790
<790=791
<791=793,792
<801=807,806,802
<802=803
<803=805,804
<807=915,914,913,912,911,910,909,908,907,906,808
<808=898,809
<809=894,810
<810=828,815,811
<811=812
<812=814,813
<815=816
<816=826,817
<817=824,822,818
<818=819
<819=821,820
<822=823
<824=825
<826=827
<828=886,882,879,829
<829=830
<830=852,831
<831=832
<832=843,833
<833=834
<834=835
<835=841,836
<836=839,837
<837=838
<839=840
<841=842
<843=844
<844=846,845
<846=847
<847=849,848
<849=851,850
<852=853
<853=855,854
<855=877,856
<856=867,861,857
<857=858
<858=860,859
<861=862
<862=866,863
<863=865,864
<867=868
<868=876,869
<869=871,870
<871=873,872
<873=875,874
<877=878
<879=881,880
<882=883
<883=885,884
<886=887
<887=888
<888=893,892,889
<889=891,890
<894=895
<895=897,896
<898=899
<899=901,900
<901=905,902
<902=904,903
<940=943,942,941
<947=950,949,948
<954=969,968,955
<955=965,962,959,956
<956=958,957
<959=961,960
<962=964,963
<965=967,966
<969=991,985,970
<970=971
<971=976,975,972
<972=974,973
<976=977
<977=979,978
<979=983,980
<980=981
<981=982
<983=984
<985=986
<986=990,987
<987=989,988
<991=992
<992=999,998,993
<993=997,994
<994=996,995
<1009=1015,1014,1010
<1010=1011
<1011=1013,1012
<1015=1018,1016
<1016=1017
<1018=1019
<1019=1024,1023,1020
<1020=1022,1021
<1030=1039,1038,1031
<1031=1035,1032
<1032=1034,1033
<1035=1037,1036
<1039=1121,1107,1106,1105,1104,1103,1102,1101,1100,1099,1098,1097,1096,1095,1042,1040
<1040=1041
<1042=1093,1092,1091,1090,1089,1088,1087,1086,1085,1084,1083,1082,1081,1048,1046,1044,1043
<1044=1045
<1046=1047
<1048=1079,1078,1077,1076,1075,1074,1066,1065,1063,1062,1061,1060,1059,1058,1050,1049
<1050=1051
<1051=1053,1052
<1053=1055,1054
<1055=1057,1056
<1063=1064
<1066=1067
<1067=1069,1068
<1069=1071,1070
<1071=1073,1072
<1079=1080
<1093=1094
<1107=1108
<1108=1118,1109
<1109=1115,1110
<1110=1112,1111
<1112=1114,1113
<1115=1117,1116
<1118=1120,1119
<1121=1122
<1122=1124,1123
<1124=1126,1125
<1145=1151,1150,1146
<1146=1147
<1147=1149,1148
<1151=1154,1152
<1152=1153
<1154=1155
<1155=1160,1159,1156
<1156=1158,1157
<1166=1172,1171,1167
<1167=1168
<1168=1170,1169
<1172=1173
<1173=1174
<1174=1179,1178,1175
<1175=1177,1176
<1186=1195,1194,1187
<1187=1191,1188
<1188=1190,1189
<1191=1193,1192
<1195=1208,1207,1206,1205,1204,1203,1202,1201,1200,1199,1198,1197,1196
<1208=1209
<1209=1219,1210
<1210=1216,1211
<1211=1213,1212
<1213=1215,1214
<1216=1218,1217
<1219=1221,1220
<1231=1234,1233,1232
<1234=1259,1235
<1235=1255,1251,1248,1236
<1236=1247,1237
<1237=1238
<1238=1240,1239
<1240=1242,1241
<1242=1244,1243
<1244=1246,1245
<1248=1250,1249
<1251=1252
<1252=1254,1253
<1255=1256
<1256=1258,1257
<1259=1260
<1260=1262,1261
