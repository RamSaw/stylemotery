>37	FunctionDef	main (int argc , char * argv [ ])
>38	ParameterList	int argc , char * argv [ ]
>39	Parameter	 
>40	Identifier	argv
>41	ParameterType	char * [ ]
>42	Parameter	 
>43	Identifier	argc
>44	ParameterType	int
>45	ReturnType	int
>46	CompoundStatement	 
>47	ReturnStatement	 
>48	PrimaryExpression	0
>49	CompoundStatement	 
>50	ExpressionStatement	 
>51	ShiftExpression	std 
>52	ShiftExpression	\"MTL\t\" << timer . value ( ) << \"\n\"
>53	ShiftExpression	timer . value ( ) << \"\n\"
>54	PrimaryExpression	\"\n\"
>55	CallExpression	timer . value ( )
>56	ArgumentList	 
>57	Callee	timer . value
>58	MemberAccess	timer . value
>59	Identifier	value
>60	Identifier	timer
>61	PrimaryExpression	\"MTL\t\"
>62	Identifier	std 
>63	ExpressionStatement	 
>64	CallExpression	BENCH ( setrand_mtl ( coords , values ) )
>65	ArgumentList	setrand_mtl ( coords , values )
>66	Argument	setrand_mtl ( coords , values )
>67	CallExpression	setrand_mtl ( coords , values )
>68	ArgumentList	coords
>69	Argument	values
>70	Identifier	values
>71	Argument	coords
>72	Identifier	coords
>73	Callee	setrand_mtl
>74	Identifier	setrand_mtl
>75	Callee	BENCH
>76	Identifier	BENCH
>77	CompoundStatement	 
>78	ExpressionStatement	 
>79	ShiftExpression	std 
>80	ShiftExpression	\"ublas vecofvec\t\" << timer . value ( ) << \"\n\"
>81	ShiftExpression	timer . value ( ) << \"\n\"
>82	PrimaryExpression	\"\n\"
>83	CallExpression	timer . value ( )
>84	ArgumentList	 
>85	Callee	timer . value
>86	MemberAccess	timer . value
>87	Identifier	value
>88	Identifier	timer
>89	PrimaryExpression	\"ublas vecofvec\t\"
>90	Identifier	std 
>91	Statement	 
>92	ExpressionStatement	 
>93	CallExpression	setrand_ublas_genvec ( coords , values )
>94	ArgumentList	coords
>95	Argument	values
>96	Identifier	values
>97	Argument	coords
>98	Identifier	coords
>99	Callee	setrand_ublas_genvec
>100	Identifier	setrand_ublas_genvec
>101	Statement	 
>102	Statement	 
>103	CompoundStatement	 
>104	CompoundStatement	 
>105	ExpressionStatement	 
>106	ShiftExpression	std 
>107	ShiftExpression	\"Eigen google sparse\t\" << timer . value ( ) << \"\n\"
>108	ShiftExpression	timer . value ( ) << \"\n\"
>109	PrimaryExpression	\"\n\"
>110	CallExpression	timer . value ( )
>111	ArgumentList	 
>112	Callee	timer . value
>113	MemberAccess	timer . value
>114	Identifier	value
>115	Identifier	timer
>116	PrimaryExpression	\"Eigen google sparse\t\"
>117	Identifier	std 
>118	Statement	 
>119	ExpressionStatement	 
>120	CallExpression	setrand_eigen_google_sparse ( coords , values )
>121	ArgumentList	coords
>122	Argument	values
>123	Identifier	values
>124	Argument	coords
>125	Identifier	coords
>126	Callee	setrand_eigen_google_sparse
>127	Identifier	setrand_eigen_google_sparse
>128	Statement	 
>129	Statement	 
>130	CompoundStatement	 
>131	ExpressionStatement	 
>132	ShiftExpression	std 
>133	ShiftExpression	\"Eigen google dense\t\" << timer . value ( ) << \"\n\"
>134	ShiftExpression	timer . value ( ) << \"\n\"
>135	PrimaryExpression	\"\n\"
>136	CallExpression	timer . value ( )
>137	ArgumentList	 
>138	Callee	timer . value
>139	MemberAccess	timer . value
>140	Identifier	value
>141	Identifier	timer
>142	PrimaryExpression	\"Eigen google dense\t\"
>143	Identifier	std 
>144	Statement	 
>145	ExpressionStatement	 
>146	CallExpression	setrand_eigen_google_dense ( coords , values )
>147	ArgumentList	coords
>148	Argument	values
>149	Identifier	values
>150	Argument	coords
>151	Identifier	coords
>152	Callee	setrand_eigen_google_dense
>153	Identifier	setrand_eigen_google_dense
>154	Statement	 
>155	Statement	 
>156	CompoundStatement	 
>157	ExpressionStatement	 
>158	ShiftExpression	std 
>159	ShiftExpression	\"scipy\t\" << timer . value ( ) << \"\n\"
>160	ShiftExpression	timer . value ( ) << \"\n\"
>161	PrimaryExpression	\"\n\"
>162	CallExpression	timer . value ( )
>163	ArgumentList	 
>164	Callee	timer . value
>165	MemberAccess	timer . value
>166	Identifier	value
>167	Identifier	timer
>168	PrimaryExpression	\"scipy\t\"
>169	Identifier	std 
>170	Statement	 
>171	ExpressionStatement	 
>172	CallExpression	setrand_scipy ( coords , values )
>173	ArgumentList	coords
>174	Argument	values
>175	Identifier	values
>176	Argument	coords
>177	Identifier	coords
>178	Callee	setrand_scipy
>179	Identifier	setrand_scipy
>180	Statement	 
>181	Statement	 
>182	CompoundStatement	 
>183	CompoundStatement	 
>184	ExpressionStatement	 
>185	ShiftExpression	std 
>186	ShiftExpression	\"Eigen sumeq\t\" << timer . value ( ) << \"\n\"
>187	ShiftExpression	timer . value ( ) << \"\n\"
>188	PrimaryExpression	\"\n\"
>189	CallExpression	timer . value ( )
>190	ArgumentList	 
>191	Callee	timer . value
>192	MemberAccess	timer . value
>193	Identifier	value
>194	Identifier	timer
>195	PrimaryExpression	\"Eigen sumeq\t\"
>196	Identifier	std 
>197	Statement	 
>198	ExpressionStatement	 
>199	CallExpression	setrand_eigen_sumeq ( coords , values )
>200	ArgumentList	coords
>201	Argument	values
>202	Identifier	values
>203	Argument	coords
>204	Identifier	coords
>205	Callee	setrand_eigen_sumeq
>206	Identifier	setrand_eigen_sumeq
>207	Statement	 
>208	Statement	 
>209	CompoundStatement	 
>210	ExpressionStatement	 
>211	ShiftExpression	std 
>212	ShiftExpression	\"Eigen dynamic\t\" << timer . value ( ) << \"\n\"
>213	ShiftExpression	timer . value ( ) << \"\n\"
>214	PrimaryExpression	\"\n\"
>215	CallExpression	timer . value ( )
>216	ArgumentList	 
>217	Callee	timer . value
>218	MemberAccess	timer . value
>219	Identifier	value
>220	Identifier	timer
>221	PrimaryExpression	\"Eigen dynamic\t\"
>222	Identifier	std 
>223	Statement	 
>224	ExpressionStatement	 
>225	CallExpression	setrand_eigen_dynamic ( coords , values )
>226	ArgumentList	coords
>227	Argument	values
>228	Identifier	values
>229	Argument	coords
>230	Identifier	coords
>231	Callee	setrand_eigen_dynamic
>232	Identifier	setrand_eigen_dynamic
>233	Statement	 
>234	Statement	 
>235	CompoundStatement	 
>236	ExpressionStatement	 
>237	ShiftExpression	std 
>238	ShiftExpression	\"Eigen Dense\t\" << timer . value ( ) << \"\n\"
>239	ShiftExpression	timer . value ( ) << \"\n\"
>240	PrimaryExpression	\"\n\"
>241	CallExpression	timer . value ( )
>242	ArgumentList	 
>243	Callee	timer . value
>244	MemberAccess	timer . value
>245	Identifier	value
>246	Identifier	timer
>247	PrimaryExpression	\"Eigen Dense\t\"
>248	Identifier	std 
>249	Statement	 
>250	ExpressionStatement	 
>251	CallExpression	setrand_eigen_dense ( coords , values )
>252	ArgumentList	coords
>253	Argument	values
>254	Identifier	values
>255	Argument	coords
>256	Identifier	coords
>257	Callee	setrand_eigen_dense
>258	Identifier	setrand_eigen_dense
>259	Statement	 
>260	Statement	 
>261	Statement	 
>262	ExpressionStatement	 
>263	ShiftExpression	std 
>264	ShiftExpression	\"nnz = \" << coords . size ( ) << \"\n\"
>265	ShiftExpression	coords . size ( ) << \"\n\"
>266	PrimaryExpression	\"\n\"
>267	CallExpression	coords . size ( )
>268	ArgumentList	 
>269	Callee	coords . size
>270	MemberAccess	coords . size
>271	Identifier	size
>272	Identifier	coords
>273	PrimaryExpression	\"nnz = \"
>274	Identifier	std 
>275	IfStatement	if ( fullyrand )
>276	ElseStatement	else
>277	CompoundStatement	 
>278	ForStatement	for ( int j = 0 ; j < cols ; ++ j )
>279	ForStatement	for ( int i = 0 ; i < NBPERROW ; ++ i )
>280	CompoundStatement	 
>281	ExpressionStatement	 
>282	Statement	 
>283	Statement	 
>284	Statement	 
>285	Statement	 
>286	Statement	 
>287	Statement	 
>288	Statement	 
>289	Statement	 
>290	Statement	 
>291	Statement	 
>292	Statement	 
>293	Statement	 
>294	Statement	 
>295	ExpressionStatement	 
>296	CallExpression	coords . push_back ( Vector2i ( internal 
>297	ArgumentList	Vector2i ( internal 
>298	Argument	Vector2i ( internal 
>299	CallExpression	Vector2i ( internal 
>300	ArgumentList	internal 
>301	Argument	j
>302	Identifier	j
>303	Argument	internal 
>304	RelationalExpression	internal 
>305	RelationalExpression	int > ( 0 , rows - 1 )
>306	Expression	0 , rows - 1
>307	AdditiveExpression	rows - 1
>308	PrimaryExpression	1
>309	Identifier	rows
>310	PrimaryExpression	0
>311	Identifier	int
>312	Identifier	internal 
>313	Callee	Vector2i
>314	Identifier	Vector2i
>315	Callee	coords . push_back
>316	MemberAccess	coords . push_back
>317	Identifier	push_back
>318	Identifier	coords
>319	UnaryExpression	 
>320	Identifier	i
>321	IncDec	++
>322	Condition	 
>323	RelationalExpression	i < NBPERROW
>324	Identifier	NBPERROW
>325	Identifier	i
>326	ForInit	 
>327	IdentifierDeclStatement	int i = 0 ;
>328	IdentifierDecl	i = 0
>329	AssignmentExpr	i = 0
>330	PrimaryExpression	0
>331	Identifier	i
>332	Identifier	i
>333	IdentifierDeclType	int
>334	UnaryExpression	 
>335	Identifier	j
>336	IncDec	++
>337	Condition	 
>338	RelationalExpression	j < cols
>339	Identifier	cols
>340	Identifier	j
>341	ForInit	 
>342	IdentifierDeclStatement	int j = 0 ;
>343	IdentifierDecl	j = 0
>344	AssignmentExpr	j = 0
>345	PrimaryExpression	0
>346	Identifier	j
>347	Identifier	j
>348	IdentifierDeclType	int
>349	CompoundStatement	 
>350	ForStatement	for ( int i = 0 ; i < n ; ++ i )
>351	CompoundStatement	 
>352	ExpressionStatement	 
>353	Statement	 
>354	Statement	 
>355	Statement	 
>356	Statement	 
>357	Statement	 
>358	Statement	 
>359	Statement	 
>360	Statement	 
>361	Statement	 
>362	Statement	 
>363	Statement	 
>364	Statement	 
>365	Statement	 
>366	ExpressionStatement	 
>367	CallExpression	coords . push_back ( pool [ i ] )
>368	ArgumentList	pool [ i ]
>369	Argument	pool [ i ]
>370	ArrayIndexing	pool [ i ]
>371	Identifier	i
>372	Identifier	pool
>373	Callee	coords . push_back
>374	MemberAccess	coords . push_back
>375	Identifier	push_back
>376	Identifier	coords
>377	IdentifierDeclStatement	 
>378	IdentifierDecl	i = internal 
>379	AssignmentExpr	i = internal 
>380	RelationalExpression	internal 
>381	RelationalExpression	int > ( 0 , pool . size ( ) )
>382	Expression	0 , pool . size ( )
>383	CallExpression	pool . size ( )
>384	ArgumentList	 
>385	Callee	pool . size
>386	MemberAccess	pool . size
>387	Identifier	size
>388	Identifier	pool
>389	PrimaryExpression	0
>390	Identifier	int
>391	Identifier	internal 
>392	Identifier	i
>393	Identifier	i
>394	IdentifierDeclType	int
>395	UnaryExpression	 
>396	Identifier	i
>397	IncDec	++
>398	Condition	 
>399	RelationalExpression	i < n
>400	Identifier	n
>401	Identifier	i
>402	ForInit	 
>403	IdentifierDeclStatement	int i = 0 ;
>404	IdentifierDecl	i = 0
>405	AssignmentExpr	i = 0
>406	PrimaryExpression	0
>407	Identifier	i
>408	Identifier	i
>409	IdentifierDeclType	int
>410	ExpressionStatement	 
>411	CallExpression	values . reserve ( n )
>412	ArgumentList	n
>413	Argument	n
>414	Identifier	n
>415	Callee	values . reserve
>416	MemberAccess	values . reserve
>417	Identifier	reserve
>418	Identifier	values
>419	ExpressionStatement	 
>420	CallExpression	coords . reserve ( n )
>421	ArgumentList	n
>422	Argument	n
>423	Identifier	n
>424	Callee	coords . reserve
>425	MemberAccess	coords . reserve
>426	Identifier	reserve
>427	Identifier	coords
>428	IdentifierDeclStatement	 
>429	IdentifierDecl	n = cols * NBPERROW * KK
>430	AssignmentExpr	n = cols * NBPERROW * KK
>431	MultiplicativeExpression	cols * NBPERROW * KK
>432	MultiplicativeExpression	NBPERROW * KK
>433	Identifier	KK
>434	Identifier	NBPERROW
>435	Identifier	cols
>436	Identifier	n
>437	Identifier	n
>438	IdentifierDeclType	int
>439	ExpressionStatement	 
>440	ShiftExpression	std 
>441	ShiftExpression	\"pool ok\" << \"\n\"
>442	PrimaryExpression	\"\n\"
>443	PrimaryExpression	\"pool ok\"
>444	Identifier	std 
>445	ForStatement	for ( int i = 0 ; i < cols * NBPERROW ; )
>446	CompoundStatement	 
>447	ExpressionStatement	 
>448	UnaryExpression	++ i
>449	Identifier	i
>450	IncDec	++
>451	CompoundStatement	 
>452	ExpressionStatement	 
>453	CallExpression	pool . push_back ( ij )
>454	ArgumentList	ij
>455	Argument	ij
>456	Identifier	ij
>457	Callee	pool . push_back
>458	MemberAccess	pool . push_back
>459	Identifier	push_back
>460	Identifier	pool
>461	IdentifierDeclStatement	 
>462	IdentifierDecl	ij ( internal 
>463	Expression	internal 
>464	RelationalExpression	internal 
>465	RelationalExpression	int > ( 0 , cols - 1 )
>466	Expression	0 , cols - 1
>467	AdditiveExpression	cols - 1
>468	PrimaryExpression	1
>469	Identifier	cols
>470	PrimaryExpression	0
>471	Identifier	int
>472	Identifier	internal 
>473	RelationalExpression	internal 
>474	RelationalExpression	int > ( 0 , rows - 1 )
>475	Expression	0 , rows - 1
>476	AdditiveExpression	rows - 1
>477	PrimaryExpression	1
>478	Identifier	rows
>479	PrimaryExpression	0
>480	Identifier	int
>481	Identifier	internal 
>482	Identifier	ij
>483	IdentifierDeclType	Vector2i
>484	Condition	 
>485	RelationalExpression	i < cols * NBPERROW
>486	MultiplicativeExpression	cols * NBPERROW
>487	Identifier	NBPERROW
>488	Identifier	cols
>489	Identifier	i
>490	ForInit	 
>491	IdentifierDeclStatement	int i = 0 ;
>492	IdentifierDecl	i = 0
>493	AssignmentExpr	i = 0
>494	PrimaryExpression	0
>495	Identifier	i
>496	Identifier	i
>497	IdentifierDeclType	int
>498	ExpressionStatement	 
>499	ShiftExpression	std 
>500	ShiftExpression	\"fill pool\" << \"\n\"
>501	PrimaryExpression	\"\n\"
>502	PrimaryExpression	\"fill pool\"
>503	Identifier	std 
>504	ExpressionStatement	 
>505	CallExpression	pool . reserve ( cols * NBPERROW )
>506	ArgumentList	cols * NBPERROW
>507	Argument	cols * NBPERROW
>508	MultiplicativeExpression	cols * NBPERROW
>509	Identifier	NBPERROW
>510	Identifier	cols
>511	Callee	pool . reserve
>512	MemberAccess	pool . reserve
>513	Identifier	reserve
>514	Identifier	pool
>515	IdentifierDeclStatement	 
>516	IdentifierDecl	pool
>517	Identifier	pool
>518	IdentifierDeclType	Coordinates
>519	Condition	 
>520	Identifier	fullyrand
>521	IdentifierDeclStatement	 
>522	IdentifierDecl	values
>523	Identifier	values
>524	IdentifierDeclType	Values
>525	IdentifierDeclStatement	 
>526	IdentifierDecl	coords
>527	Identifier	coords
>528	IdentifierDeclType	Coordinates
>529	IdentifierDeclStatement	 
>530	IdentifierDecl	timer
>531	Identifier	timer
>532	IdentifierDeclType	BenchTimer
>533	IdentifierDeclStatement	 
>534	IdentifierDecl	fullyrand = true
>535	AssignmentExpr	fullyrand = true
>536	Identifier	true
>537	Identifier	true
>538	Identifier	fullyrand
>539	IdentifierDeclType	bool
>540	IdentifierDeclStatement	 
>541	IdentifierDecl	cols = SIZE
>542	AssignmentExpr	cols = SIZE
>543	Identifier	SIZE
>544	Identifier	SIZE
>545	Identifier	cols
>546	IdentifierDeclType	int
>547	IdentifierDeclStatement	 
>548	IdentifierDecl	rows = SIZE
>549	AssignmentExpr	rows = SIZE
>550	Identifier	SIZE
>551	Identifier	SIZE
>552	Identifier	rows
>553	IdentifierDeclType	int
>581	FunctionDef	setinnerrand_eigen (const Coordinates & coords , const Values & vals)
>582	ParameterList	const Coordinates & coords , const Values & vals
>583	Parameter	 
>584	Identifier	vals
>585	ParameterType	const Values &
>586	Parameter	 
>587	Identifier	coords
>588	ParameterType	const Coordinates &
>589	ReturnType	EIGEN_DONT_INLINE Scalar *
>590	CompoundStatement	 
>591	ReturnStatement	 
>592	PrimaryExpression	0
>593	ExpressionStatement	 
>594	Identifier	CHECK_MEM
>595	ExpressionStatement	 
>596	CallExpression	mat . finalize ( )
>597	ArgumentList	 
>598	Callee	mat . finalize
>599	MemberAccess	mat . finalize
>600	Identifier	finalize
>601	Identifier	mat
>602	ForStatement	for ( int i = 0 ; i < coords . size ( ) ; ++ i )
>603	CompoundStatement	 
>604	ExpressionStatement	 
>605	AssignmentExpr	mat . insert ( coords [ i ] . x ( ) , coords [ i ] . y ( ) ) = vals [ i ]
>606	ArrayIndexing	vals [ i ]
>607	Identifier	i
>608	Identifier	vals
>609	CallExpression	mat . insert ( coords [ i ] . x ( ) , coords [ i ] . y ( ) )
>610	ArgumentList	coords [ i ] . x ( )
>611	Argument	coords [ i ] . y ( )
>612	CallExpression	coords [ i ] . y ( )
>613	ArgumentList	 
>614	Callee	coords [ i ] . y
>615	MemberAccess	coords [ i ] . y
>616	Identifier	y
>617	ArrayIndexing	coords [ i ]
>618	Identifier	i
>619	Identifier	coords
>620	Argument	coords [ i ] . x ( )
>621	CallExpression	coords [ i ] . x ( )
>622	ArgumentList	 
>623	Callee	coords [ i ] . x
>624	MemberAccess	coords [ i ] . x
>625	Identifier	x
>626	ArrayIndexing	coords [ i ]
>627	Identifier	i
>628	Identifier	coords
>629	Callee	mat . insert
>630	MemberAccess	mat . insert
>631	Identifier	insert
>632	Identifier	mat
>633	UnaryExpression	 
>634	Identifier	i
>635	IncDec	++
>636	Condition	 
>637	RelationalExpression	i < coords . size ( )
>638	CallExpression	coords . size ( )
>639	ArgumentList	 
>640	Callee	coords . size
>641	MemberAccess	coords . size
>642	Identifier	size
>643	Identifier	coords
>644	Identifier	i
>645	ForInit	 
>646	IdentifierDeclStatement	int i = 0 ;
>647	IdentifierDecl	i = 0
>648	AssignmentExpr	i = 0
>649	PrimaryExpression	0
>650	Identifier	i
>651	Identifier	i
>652	IdentifierDeclType	int
>653	IdentifierDeclStatement	 
>654	IdentifierDecl	mat ( SIZE , SIZE )
>655	Expression	SIZE , SIZE
>656	Identifier	SIZE
>657	Identifier	SIZE
>658	Identifier	mat
>659	IdentifierDeclType	SparseMatrix < Scalar >
>660	ExpressionStatement	 
>661	Identifier	Eigen
>662	Statement	 
>663	Statement	 
>678	FunctionDef	setrand_eigen_dynamic (const Coordinates & coords , const Values & vals)
>679	ParameterList	const Coordinates & coords , const Values & vals
>680	Parameter	 
>681	Identifier	vals
>682	ParameterType	const Values &
>683	Parameter	 
>684	Identifier	coords
>685	ParameterType	const Coordinates &
>686	ReturnType	EIGEN_DONT_INLINE Scalar *
>687	CompoundStatement	 
>688	ReturnStatement	 
>689	UnaryOp	& mat . coeffRef ( coords [ 0 ] . x ( ) , coords [ 0 ] . y ( ) )
>690	CallExpression	mat . coeffRef ( coords [ 0 ] . x ( ) , coords [ 0 ] . y ( ) )
>691	ArgumentList	coords [ 0 ] . x ( )
>692	Argument	coords [ 0 ] . y ( )
>693	CallExpression	coords [ 0 ] . y ( )
>694	ArgumentList	 
>695	Callee	coords [ 0 ] . y
>696	MemberAccess	coords [ 0 ] . y
>697	Identifier	y
>698	ArrayIndexing	coords [ 0 ]
>699	PrimaryExpression	0
>700	Identifier	coords
>701	Argument	coords [ 0 ] . x ( )
>702	CallExpression	coords [ 0 ] . x ( )
>703	ArgumentList	 
>704	Callee	coords [ 0 ] . x
>705	MemberAccess	coords [ 0 ] . x
>706	Identifier	x
>707	ArrayIndexing	coords [ 0 ]
>708	PrimaryExpression	0
>709	Identifier	coords
>710	Callee	mat . coeffRef
>711	MemberAccess	mat . coeffRef
>712	Identifier	coeffRef
>713	Identifier	mat
>714	UnaryOperator	&
>715	ExpressionStatement	 
>716	Identifier	CHECK_MEM
>717	ExpressionStatement	 
>718	CallExpression	mat . finalize ( )
>719	ArgumentList	 
>720	Callee	mat . finalize
>721	MemberAccess	mat . finalize
>722	Identifier	finalize
>723	Identifier	mat
>724	ForStatement	for ( int i = 0 ; i < coords . size ( ) ; ++ i )
>725	CompoundStatement	 
>726	ExpressionStatement	 
>727	AssignmentExpr	mat . coeffRef ( coords [ i ] . x ( ) , coords [ i ] . y ( ) ) += vals [ i ]
>728	ArrayIndexing	vals [ i ]
>729	Identifier	i
>730	Identifier	vals
>731	CallExpression	mat . coeffRef ( coords [ i ] . x ( ) , coords [ i ] . y ( ) )
>732	ArgumentList	coords [ i ] . x ( )
>733	Argument	coords [ i ] . y ( )
>734	CallExpression	coords [ i ] . y ( )
>735	ArgumentList	 
>736	Callee	coords [ i ] . y
>737	MemberAccess	coords [ i ] . y
>738	Identifier	y
>739	ArrayIndexing	coords [ i ]
>740	Identifier	i
>741	Identifier	coords
>742	Argument	coords [ i ] . x ( )
>743	CallExpression	coords [ i ] . x ( )
>744	ArgumentList	 
>745	Callee	coords [ i ] . x
>746	MemberAccess	coords [ i ] . x
>747	Identifier	x
>748	ArrayIndexing	coords [ i ]
>749	Identifier	i
>750	Identifier	coords
>751	Callee	mat . coeffRef
>752	MemberAccess	mat . coeffRef
>753	Identifier	coeffRef
>754	Identifier	mat
>755	UnaryExpression	 
>756	Identifier	i
>757	IncDec	++
>758	Condition	 
>759	RelationalExpression	i < coords . size ( )
>760	CallExpression	coords . size ( )
>761	ArgumentList	 
>762	Callee	coords . size
>763	MemberAccess	coords . size
>764	Identifier	size
>765	Identifier	coords
>766	Identifier	i
>767	ForInit	 
>768	IdentifierDeclStatement	int i = 0 ;
>769	IdentifierDecl	i = 0
>770	AssignmentExpr	i = 0
>771	PrimaryExpression	0
>772	Identifier	i
>773	Identifier	i
>774	IdentifierDeclType	int
>775	ExpressionStatement	 
>776	CallExpression	mat . reserve ( coords . size ( ) / 10 )
>777	ArgumentList	coords . size ( ) / 10
>778	Argument	coords . size ( ) / 10
>779	MultiplicativeExpression	coords . size ( ) / 10
>780	PrimaryExpression	10
>781	CallExpression	coords . size ( )
>782	ArgumentList	 
>783	Callee	coords . size
>784	MemberAccess	coords . size
>785	Identifier	size
>786	Identifier	coords
>787	Callee	mat . reserve
>788	MemberAccess	mat . reserve
>789	Identifier	reserve
>790	Identifier	mat
>791	IdentifierDeclStatement	 
>792	IdentifierDecl	mat ( SIZE , SIZE )
>793	Expression	SIZE , SIZE
>794	Identifier	SIZE
>795	Identifier	SIZE
>796	Identifier	mat
>797	IdentifierDeclType	DynamicSparseMatrix < Scalar >
>798	ExpressionStatement	 
>799	Identifier	Eigen
>800	Statement	 
>801	Statement	 
>820	FunctionDef	setrand_eigen_sumeq (const Coordinates & coords , const Values & vals)
>821	ParameterList	const Coordinates & coords , const Values & vals
>822	Parameter	 
>823	Identifier	vals
>824	ParameterType	const Values &
>825	Parameter	 
>826	Identifier	coords
>827	ParameterType	const Coordinates &
>828	ReturnType	EIGEN_DONT_INLINE Scalar *
>829	CompoundStatement	 
>830	ReturnStatement	 
>831	UnaryOp	& mat . coeffRef ( coords [ 0 ] . x ( ) , coords [ 0 ] . y ( ) )
>832	CallExpression	mat . coeffRef ( coords [ 0 ] . x ( ) , coords [ 0 ] . y ( ) )
>833	ArgumentList	coords [ 0 ] . x ( )
>834	Argument	coords [ 0 ] . y ( )
>835	CallExpression	coords [ 0 ] . y ( )
>836	ArgumentList	 
>837	Callee	coords [ 0 ] . y
>838	MemberAccess	coords [ 0 ] . y
>839	Identifier	y
>840	ArrayIndexing	coords [ 0 ]
>841	PrimaryExpression	0
>842	Identifier	coords
>843	Argument	coords [ 0 ] . x ( )
>844	CallExpression	coords [ 0 ] . x ( )
>845	ArgumentList	 
>846	Callee	coords [ 0 ] . x
>847	MemberAccess	coords [ 0 ] . x
>848	Identifier	x
>849	ArrayIndexing	coords [ 0 ]
>850	PrimaryExpression	0
>851	Identifier	coords
>852	Callee	mat . coeffRef
>853	MemberAccess	mat . coeffRef
>854	Identifier	coeffRef
>855	Identifier	mat
>856	UnaryOperator	&
>857	ForStatement	for ( int j = 0 ; j < KK ; ++ j )
>858	CompoundStatement	 
>859	ExpressionStatement	 
>860	AssignmentExpr	mat += aux
>861	Identifier	aux
>862	Identifier	mat
>863	ExpressionStatement	 
>864	CallExpression	aux . finalize ( )
>865	ArgumentList	 
>866	Callee	aux . finalize
>867	MemberAccess	aux . finalize
>868	Identifier	finalize
>869	Identifier	aux
>870	ForStatement	for ( int i = j * n ; i < ( j + 1 ) * n ; ++ i )
>871	CompoundStatement	 
>872	ExpressionStatement	 
>873	AssignmentExpr	aux . insert ( coords [ i ] . x ( ) , coords [ i ] . y ( ) ) += vals [ i ]
>874	ArrayIndexing	vals [ i ]
>875	Identifier	i
>876	Identifier	vals
>877	CallExpression	aux . insert ( coords [ i ] . x ( ) , coords [ i ] . y ( ) )
>878	ArgumentList	coords [ i ] . x ( )
>879	Argument	coords [ i ] . y ( )
>880	CallExpression	coords [ i ] . y ( )
>881	ArgumentList	 
>882	Callee	coords [ i ] . y
>883	MemberAccess	coords [ i ] . y
>884	Identifier	y
>885	ArrayIndexing	coords [ i ]
>886	Identifier	i
>887	Identifier	coords
>888	Argument	coords [ i ] . x ( )
>889	CallExpression	coords [ i ] . x ( )
>890	ArgumentList	 
>891	Callee	coords [ i ] . x
>892	MemberAccess	coords [ i ] . x
>893	Identifier	x
>894	ArrayIndexing	coords [ i ]
>895	Identifier	i
>896	Identifier	coords
>897	Callee	aux . insert
>898	MemberAccess	aux . insert
>899	Identifier	insert
>900	Identifier	aux
>901	UnaryExpression	 
>902	Identifier	i
>903	IncDec	++
>904	Condition	 
>905	RelationalExpression	i < ( j + 1 ) * n
>906	MultiplicativeExpression	( j + 1 ) * n
>907	Identifier	n
>908	AdditiveExpression	j + 1
>909	PrimaryExpression	1
>910	Identifier	j
>911	Identifier	i
>912	ForInit	 
>913	IdentifierDeclStatement	int i = j * n ;
>914	IdentifierDecl	i = j * n
>915	AssignmentExpr	i = j * n
>916	MultiplicativeExpression	j * n
>917	Identifier	n
>918	Identifier	j
>919	Identifier	i
>920	Identifier	i
>921	IdentifierDeclType	int
>922	ExpressionStatement	 
>923	CallExpression	mat . reserve ( n )
>924	ArgumentList	n
>925	Argument	n
>926	Identifier	n
>927	Callee	mat . reserve
>928	MemberAccess	mat . reserve
>929	Identifier	reserve
>930	Identifier	mat
>931	IdentifierDeclStatement	 
>932	IdentifierDecl	aux ( SIZE , SIZE )
>933	Expression	SIZE , SIZE
>934	Identifier	SIZE
>935	Identifier	SIZE
>936	Identifier	aux
>937	IdentifierDeclType	DynamicSparseMatrix < Scalar >
>938	UnaryExpression	 
>939	Identifier	j
>940	IncDec	++
>941	Condition	 
>942	RelationalExpression	j < KK
>943	Identifier	KK
>944	Identifier	j
>945	ForInit	 
>946	IdentifierDeclStatement	int j = 0 ;
>947	IdentifierDecl	j = 0
>948	AssignmentExpr	j = 0
>949	PrimaryExpression	0
>950	Identifier	j
>951	Identifier	j
>952	IdentifierDeclType	int
>953	IdentifierDeclStatement	 
>954	IdentifierDecl	mat ( SIZE , SIZE )
>955	Expression	SIZE , SIZE
>956	Identifier	SIZE
>957	Identifier	SIZE
>958	Identifier	mat
>959	IdentifierDeclType	DynamicSparseMatrix < Scalar >
>960	IdentifierDeclStatement	 
>961	IdentifierDecl	n = coords . size ( ) / KK
>962	AssignmentExpr	n = coords . size ( ) / KK
>963	MultiplicativeExpression	coords . size ( ) / KK
>964	Identifier	KK
>965	CallExpression	coords . size ( )
>966	ArgumentList	 
>967	Callee	coords . size
>968	MemberAccess	coords . size
>969	Identifier	size
>970	Identifier	coords
>971	Identifier	n
>972	Identifier	n
>973	IdentifierDeclType	int
>974	ExpressionStatement	 
>975	Identifier	Eigen
>976	Statement	 
>977	Statement	 
>1000	FunctionDef	setrand_eigen_compact (const Coordinates & coords , const Values & vals)
>1001	ParameterList	const Coordinates & coords , const Values & vals
>1002	Parameter	 
>1003	Identifier	vals
>1004	ParameterType	const Values &
>1005	Parameter	 
>1006	Identifier	coords
>1007	ParameterType	const Coordinates &
>1008	ReturnType	EIGEN_DONT_INLINE Scalar *
>1009	CompoundStatement	 
>1010	ReturnStatement	 
>1011	UnaryOp	& mat . coeffRef ( coords [ 0 ] . x ( ) , coords [ 0 ] . y ( ) )
>1012	CallExpression	mat . coeffRef ( coords [ 0 ] . x ( ) , coords [ 0 ] . y ( ) )
>1013	ArgumentList	coords [ 0 ] . x ( )
>1014	Argument	coords [ 0 ] . y ( )
>1015	CallExpression	coords [ 0 ] . y ( )
>1016	ArgumentList	 
>1017	Callee	coords [ 0 ] . y
>1018	MemberAccess	coords [ 0 ] . y
>1019	Identifier	y
>1020	ArrayIndexing	coords [ 0 ]
>1021	PrimaryExpression	0
>1022	Identifier	coords
>1023	Argument	coords [ 0 ] . x ( )
>1024	CallExpression	coords [ 0 ] . x ( )
>1025	ArgumentList	 
>1026	Callee	coords [ 0 ] . x
>1027	MemberAccess	coords [ 0 ] . x
>1028	Identifier	x
>1029	ArrayIndexing	coords [ 0 ]
>1030	PrimaryExpression	0
>1031	Identifier	coords
>1032	Callee	mat . coeffRef
>1033	MemberAccess	mat . coeffRef
>1034	Identifier	coeffRef
>1035	Identifier	mat
>1036	UnaryOperator	&
>1037	ExpressionStatement	 
>1038	Identifier	CHECK_MEM
>1039	IdentifierDeclStatement	 
>1040	IdentifierDecl	mat = setter
>1041	AssignmentExpr	mat = setter
>1042	Identifier	setter
>1043	Identifier	setter
>1044	Identifier	mat
>1045	IdentifierDeclType	SparseMatrix < Scalar >
>1046	ForStatement	for ( int i = 0 ; i < coords . size ( ) ; ++ i )
>1047	CompoundStatement	 
>1048	ExpressionStatement	 
>1049	AssignmentExpr	setter . coeffRef ( coords [ i ] . x ( ) , coords [ i ] . y ( ) ) += vals [ i ]
>1050	ArrayIndexing	vals [ i ]
>1051	Identifier	i
>1052	Identifier	vals
>1053	CallExpression	setter . coeffRef ( coords [ i ] . x ( ) , coords [ i ] . y ( ) )
>1054	ArgumentList	coords [ i ] . x ( )
>1055	Argument	coords [ i ] . y ( )
>1056	CallExpression	coords [ i ] . y ( )
>1057	ArgumentList	 
>1058	Callee	coords [ i ] . y
>1059	MemberAccess	coords [ i ] . y
>1060	Identifier	y
>1061	ArrayIndexing	coords [ i ]
>1062	Identifier	i
>1063	Identifier	coords
>1064	Argument	coords [ i ] . x ( )
>1065	CallExpression	coords [ i ] . x ( )
>1066	ArgumentList	 
>1067	Callee	coords [ i ] . x
>1068	MemberAccess	coords [ i ] . x
>1069	Identifier	x
>1070	ArrayIndexing	coords [ i ]
>1071	Identifier	i
>1072	Identifier	coords
>1073	Callee	setter . coeffRef
>1074	MemberAccess	setter . coeffRef
>1075	Identifier	coeffRef
>1076	Identifier	setter
>1077	UnaryExpression	 
>1078	Identifier	i
>1079	IncDec	++
>1080	Condition	 
>1081	RelationalExpression	i < coords . size ( )
>1082	CallExpression	coords . size ( )
>1083	ArgumentList	 
>1084	Callee	coords . size
>1085	MemberAccess	coords . size
>1086	Identifier	size
>1087	Identifier	coords
>1088	Identifier	i
>1089	ForInit	 
>1090	IdentifierDeclStatement	int i = 0 ;
>1091	IdentifierDecl	i = 0
>1092	AssignmentExpr	i = 0
>1093	PrimaryExpression	0
>1094	Identifier	i
>1095	Identifier	i
>1096	IdentifierDeclType	int
>1097	ExpressionStatement	 
>1098	CallExpression	setter . reserve ( coords . size ( ) / 10 )
>1099	ArgumentList	coords . size ( ) / 10
>1100	Argument	coords . size ( ) / 10
>1101	MultiplicativeExpression	coords . size ( ) / 10
>1102	PrimaryExpression	10
>1103	CallExpression	coords . size ( )
>1104	ArgumentList	 
>1105	Callee	coords . size
>1106	MemberAccess	coords . size
>1107	Identifier	size
>1108	Identifier	coords
>1109	Callee	setter . reserve
>1110	MemberAccess	setter . reserve
>1111	Identifier	reserve
>1112	Identifier	setter
>1113	IdentifierDeclStatement	 
>1114	IdentifierDecl	setter ( SIZE , SIZE )
>1115	Expression	SIZE , SIZE
>1116	Identifier	SIZE
>1117	Identifier	SIZE
>1118	Identifier	setter
>1119	IdentifierDeclType	DynamicSparseMatrix < Scalar >
>1120	ExpressionStatement	 
>1121	Identifier	Eigen
>1122	Statement	 
>1123	Statement	 
>1143	FunctionDef	setrand_eigen_gnu_hash (const Coordinates & coords , const Values & vals)
>1144	ParameterList	const Coordinates & coords , const Values & vals
>1145	Parameter	 
>1146	Identifier	vals
>1147	ParameterType	const Values &
>1148	Parameter	 
>1149	Identifier	coords
>1150	ParameterType	const Coordinates &
>1151	ReturnType	EIGEN_DONT_INLINE Scalar *
>1152	CompoundStatement	 
>1153	ReturnStatement	 
>1154	UnaryOp	& mat . coeffRef ( coords [ 0 ] . x ( ) , coords [ 0 ] . y ( ) )
>1155	CallExpression	mat . coeffRef ( coords [ 0 ] . x ( ) , coords [ 0 ] . y ( ) )
>1156	ArgumentList	coords [ 0 ] . x ( )
>1157	Argument	coords [ 0 ] . y ( )
>1158	CallExpression	coords [ 0 ] . y ( )
>1159	ArgumentList	 
>1160	Callee	coords [ 0 ] . y
>1161	MemberAccess	coords [ 0 ] . y
>1162	Identifier	y
>1163	ArrayIndexing	coords [ 0 ]
>1164	PrimaryExpression	0
>1165	Identifier	coords
>1166	Argument	coords [ 0 ] . x ( )
>1167	CallExpression	coords [ 0 ] . x ( )
>1168	ArgumentList	 
>1169	Callee	coords [ 0 ] . x
>1170	MemberAccess	coords [ 0 ] . x
>1171	Identifier	x
>1172	ArrayIndexing	coords [ 0 ]
>1173	PrimaryExpression	0
>1174	Identifier	coords
>1175	Callee	mat . coeffRef
>1176	MemberAccess	mat . coeffRef
>1177	Identifier	coeffRef
>1178	Identifier	mat
>1179	UnaryOperator	&
>1180	CompoundStatement	 
>1181	ExpressionStatement	 
>1182	Identifier	CHECK_MEM
>1183	ForStatement	for ( int i = 0 ; i < coords . size ( ) ; ++ i )
>1184	CompoundStatement	 
>1185	ExpressionStatement	 
>1186	AssignmentExpr	setter ( coords [ i ] . x ( ) , coords [ i ] . y ( ) ) += vals [ i ]
>1187	ArrayIndexing	vals [ i ]
>1188	Identifier	i
>1189	Identifier	vals
>1190	CallExpression	setter ( coords [ i ] . x ( ) , coords [ i ] . y ( ) )
>1191	ArgumentList	coords [ i ] . x ( )
>1192	Argument	coords [ i ] . y ( )
>1193	CallExpression	coords [ i ] . y ( )
>1194	ArgumentList	 
>1195	Callee	coords [ i ] . y
>1196	MemberAccess	coords [ i ] . y
>1197	Identifier	y
>1198	ArrayIndexing	coords [ i ]
>1199	Identifier	i
>1200	Identifier	coords
>1201	Argument	coords [ i ] . x ( )
>1202	CallExpression	coords [ i ] . x ( )
>1203	ArgumentList	 
>1204	Callee	coords [ i ] . x
>1205	MemberAccess	coords [ i ] . x
>1206	Identifier	x
>1207	ArrayIndexing	coords [ i ]
>1208	Identifier	i
>1209	Identifier	coords
>1210	Callee	setter
>1211	Identifier	setter
>1212	UnaryExpression	 
>1213	Identifier	i
>1214	IncDec	++
>1215	Condition	 
>1216	RelationalExpression	i < coords . size ( )
>1217	CallExpression	coords . size ( )
>1218	ArgumentList	 
>1219	Callee	coords . size
>1220	MemberAccess	coords . size
>1221	Identifier	size
>1222	Identifier	coords
>1223	Identifier	i
>1224	ForInit	 
>1225	IdentifierDeclStatement	int i = 0 ;
>1226	IdentifierDecl	i = 0
>1227	AssignmentExpr	i = 0
>1228	PrimaryExpression	0
>1229	Identifier	i
>1230	Identifier	i
>1231	IdentifierDeclType	int
>1232	IdentifierDeclStatement	 
>1233	IdentifierDecl	setter ( mat )
>1234	Identifier	mat
>1235	Identifier	setter
>1236	IdentifierDeclType	RandomSetter < SparseMatrix < Scalar > , StdMapTraits >
>1237	IdentifierDeclStatement	 
>1238	IdentifierDecl	mat ( SIZE , SIZE )
>1239	Expression	SIZE , SIZE
>1240	Identifier	SIZE
>1241	Identifier	SIZE
>1242	Identifier	mat
>1243	IdentifierDeclType	SparseMatrix < Scalar >
>1244	ExpressionStatement	 
>1245	Identifier	Eigen
>1246	Statement	 
>1247	Statement	 
>1266	FunctionDef	setrand_eigen_google_dense (const Coordinates & coords , const Values & vals)
>1267	ParameterList	const Coordinates & coords , const Values & vals
>1268	Parameter	 
>1269	Identifier	vals
>1270	ParameterType	const Values &
>1271	Parameter	 
>1272	Identifier	coords
>1273	ParameterType	const Coordinates &
>1274	ReturnType	EIGEN_DONT_INLINE Scalar *
>1275	CompoundStatement	 
>1276	ReturnStatement	 
>1277	UnaryOp	& mat . coeffRef ( coords [ 0 ] . x ( ) , coords [ 0 ] . y ( ) )
>1278	CallExpression	mat . coeffRef ( coords [ 0 ] . x ( ) , coords [ 0 ] . y ( ) )
>1279	ArgumentList	coords [ 0 ] . x ( )
>1280	Argument	coords [ 0 ] . y ( )
>1281	CallExpression	coords [ 0 ] . y ( )
>1282	ArgumentList	 
>1283	Callee	coords [ 0 ] . y
>1284	MemberAccess	coords [ 0 ] . y
>1285	Identifier	y
>1286	ArrayIndexing	coords [ 0 ]
>1287	PrimaryExpression	0
>1288	Identifier	coords
>1289	Argument	coords [ 0 ] . x ( )
>1290	CallExpression	coords [ 0 ] . x ( )
>1291	ArgumentList	 
>1292	Callee	coords [ 0 ] . x
>1293	MemberAccess	coords [ 0 ] . x
>1294	Identifier	x
>1295	ArrayIndexing	coords [ 0 ]
>1296	PrimaryExpression	0
>1297	Identifier	coords
>1298	Callee	mat . coeffRef
>1299	MemberAccess	mat . coeffRef
>1300	Identifier	coeffRef
>1301	Identifier	mat
>1302	UnaryOperator	&
>1303	CompoundStatement	 
>1304	ExpressionStatement	 
>1305	Identifier	CHECK_MEM
>1306	ForStatement	for ( int i = 0 ; i < coords . size ( ) ; ++ i )
>1307	ExpressionStatement	 
>1308	AssignmentExpr	setter ( coords [ i ] . x ( ) , coords [ i ] . y ( ) ) += vals [ i ]
>1309	ArrayIndexing	vals [ i ]
>1310	Identifier	i
>1311	Identifier	vals
>1312	CallExpression	setter ( coords [ i ] . x ( ) , coords [ i ] . y ( ) )
>1313	ArgumentList	coords [ i ] . x ( )
>1314	Argument	coords [ i ] . y ( )
>1315	CallExpression	coords [ i ] . y ( )
>1316	ArgumentList	 
>1317	Callee	coords [ i ] . y
>1318	MemberAccess	coords [ i ] . y
>1319	Identifier	y
>1320	ArrayIndexing	coords [ i ]
>1321	Identifier	i
>1322	Identifier	coords
>1323	Argument	coords [ i ] . x ( )
>1324	CallExpression	coords [ i ] . x ( )
>1325	ArgumentList	 
>1326	Callee	coords [ i ] . x
>1327	MemberAccess	coords [ i ] . x
>1328	Identifier	x
>1329	ArrayIndexing	coords [ i ]
>1330	Identifier	i
>1331	Identifier	coords
>1332	Callee	setter
>1333	Identifier	setter
>1334	UnaryExpression	 
>1335	Identifier	i
>1336	IncDec	++
>1337	Condition	 
>1338	RelationalExpression	i < coords . size ( )
>1339	CallExpression	coords . size ( )
>1340	ArgumentList	 
>1341	Callee	coords . size
>1342	MemberAccess	coords . size
>1343	Identifier	size
>1344	Identifier	coords
>1345	Identifier	i
>1346	ForInit	 
>1347	IdentifierDeclStatement	int i = 0 ;
>1348	IdentifierDecl	i = 0
>1349	AssignmentExpr	i = 0
>1350	PrimaryExpression	0
>1351	Identifier	i
>1352	Identifier	i
>1353	IdentifierDeclType	int
>1354	IdentifierDeclStatement	 
>1355	IdentifierDecl	setter ( mat )
>1356	Identifier	mat
>1357	Identifier	setter
>1358	IdentifierDeclType	RandomSetter < SparseMatrix < Scalar > , GoogleDenseHashMapTraits >
>1359	IdentifierDeclStatement	 
>1360	IdentifierDecl	mat ( SIZE , SIZE )
>1361	Expression	SIZE , SIZE
>1362	Identifier	SIZE
>1363	Identifier	SIZE
>1364	Identifier	mat
>1365	IdentifierDeclType	SparseMatrix < Scalar >
>1366	ExpressionStatement	 
>1367	Identifier	Eigen
>1368	Statement	 
>1369	Statement	 
>1388	FunctionDef	setrand_eigen_google_sparse (const Coordinates & coords , const Values & vals)
>1389	ParameterList	const Coordinates & coords , const Values & vals
>1390	Parameter	 
>1391	Identifier	vals
>1392	ParameterType	const Values &
>1393	Parameter	 
>1394	Identifier	coords
>1395	ParameterType	const Coordinates &
>1396	ReturnType	EIGEN_DONT_INLINE Scalar *
>1397	CompoundStatement	 
>1398	ReturnStatement	 
>1399	UnaryOp	& mat . coeffRef ( coords [ 0 ] . x ( ) , coords [ 0 ] . y ( ) )
>1400	CallExpression	mat . coeffRef ( coords [ 0 ] . x ( ) , coords [ 0 ] . y ( ) )
>1401	ArgumentList	coords [ 0 ] . x ( )
>1402	Argument	coords [ 0 ] . y ( )
>1403	CallExpression	coords [ 0 ] . y ( )
>1404	ArgumentList	 
>1405	Callee	coords [ 0 ] . y
>1406	MemberAccess	coords [ 0 ] . y
>1407	Identifier	y
>1408	ArrayIndexing	coords [ 0 ]
>1409	PrimaryExpression	0
>1410	Identifier	coords
>1411	Argument	coords [ 0 ] . x ( )
>1412	CallExpression	coords [ 0 ] . x ( )
>1413	ArgumentList	 
>1414	Callee	coords [ 0 ] . x
>1415	MemberAccess	coords [ 0 ] . x
>1416	Identifier	x
>1417	ArrayIndexing	coords [ 0 ]
>1418	PrimaryExpression	0
>1419	Identifier	coords
>1420	Callee	mat . coeffRef
>1421	MemberAccess	mat . coeffRef
>1422	Identifier	coeffRef
>1423	Identifier	mat
>1424	UnaryOperator	&
>1425	CompoundStatement	 
>1426	ExpressionStatement	 
>1427	Identifier	CHECK_MEM
>1428	ForStatement	for ( int i = 0 ; i < coords . size ( ) ; ++ i )
>1429	ExpressionStatement	 
>1430	AssignmentExpr	setter ( coords [ i ] . x ( ) , coords [ i ] . y ( ) ) += vals [ i ]
>1431	ArrayIndexing	vals [ i ]
>1432	Identifier	i
>1433	Identifier	vals
>1434	CallExpression	setter ( coords [ i ] . x ( ) , coords [ i ] . y ( ) )
>1435	ArgumentList	coords [ i ] . x ( )
>1436	Argument	coords [ i ] . y ( )
>1437	CallExpression	coords [ i ] . y ( )
>1438	ArgumentList	 
>1439	Callee	coords [ i ] . y
>1440	MemberAccess	coords [ i ] . y
>1441	Identifier	y
>1442	ArrayIndexing	coords [ i ]
>1443	Identifier	i
>1444	Identifier	coords
>1445	Argument	coords [ i ] . x ( )
>1446	CallExpression	coords [ i ] . x ( )
>1447	ArgumentList	 
>1448	Callee	coords [ i ] . x
>1449	MemberAccess	coords [ i ] . x
>1450	Identifier	x
>1451	ArrayIndexing	coords [ i ]
>1452	Identifier	i
>1453	Identifier	coords
>1454	Callee	setter
>1455	Identifier	setter
>1456	UnaryExpression	 
>1457	Identifier	i
>1458	IncDec	++
>1459	Condition	 
>1460	RelationalExpression	i < coords . size ( )
>1461	CallExpression	coords . size ( )
>1462	ArgumentList	 
>1463	Callee	coords . size
>1464	MemberAccess	coords . size
>1465	Identifier	size
>1466	Identifier	coords
>1467	Identifier	i
>1468	ForInit	 
>1469	IdentifierDeclStatement	int i = 0 ;
>1470	IdentifierDecl	i = 0
>1471	AssignmentExpr	i = 0
>1472	PrimaryExpression	0
>1473	Identifier	i
>1474	Identifier	i
>1475	IdentifierDeclType	int
>1476	IdentifierDeclStatement	 
>1477	IdentifierDecl	setter ( mat )
>1478	Identifier	mat
>1479	Identifier	setter
>1480	IdentifierDeclType	RandomSetter < SparseMatrix < Scalar > , GoogleSparseHashMapTraits >
>1481	IdentifierDeclStatement	 
>1482	IdentifierDecl	mat ( SIZE , SIZE )
>1483	Expression	SIZE , SIZE
>1484	Identifier	SIZE
>1485	Identifier	SIZE
>1486	Identifier	mat
>1487	IdentifierDeclType	SparseMatrix < Scalar >
>1488	ExpressionStatement	 
>1489	Identifier	Eigen
>1490	Statement	 
>1491	Statement	 
>1510	FunctionDef	coo_tocsr (const int n_row , const int n_col , const int nnz , const Coordinates Aij , const Values Ax , int Bp [ ] , \
>1511	ParameterList	const int n_row , const int n_col , const int nnz , const Coordinates Aij , const Values Ax , int Bp [ ] , int Bj [ ] , \
>1512	Parameter	 
>1513	Identifier	Bx
>1514	ParameterType	T [ ]
>1515	Parameter	 
>1516	Identifier	Bj
>1517	ParameterType	int [ ]
>1518	Parameter	 
>1519	Identifier	Bp
>1520	ParameterType	int [ ]
>1521	Parameter	 
>1522	Identifier	Ax
>1523	ParameterType	const Values
>1524	Parameter	 
>1525	Identifier	Aij
>1526	ParameterType	const Coordinates
>1527	Parameter	 
>1528	Identifier	nnz
>1529	ParameterType	const int
>1530	Parameter	 
>1531	Identifier	n_col
>1532	ParameterType	const int
>1533	Parameter	 
>1534	Identifier	n_row
>1535	ParameterType	const int
>1536	ReturnType	void
>1537	CompoundStatement	 
>1538	ForStatement	for ( int i = 0 , last = 0 ; i <= n_row ; i ++ )
>1539	CompoundStatement	 
>1540	ExpressionStatement	 
>1541	AssignmentExpr	last = temp
>1542	Identifier	temp
>1543	Identifier	last
>1544	ExpressionStatement	 
>1545	AssignmentExpr	Bp [ i ] = last
>1546	Identifier	last
>1547	ArrayIndexing	Bp [ i ]
>1548	Identifier	i
>1549	Identifier	Bp
>1550	IdentifierDeclStatement	 
>1551	IdentifierDecl	temp = Bp [ i ]
>1552	AssignmentExpr	temp = Bp [ i ]
>1553	ArrayIndexing	Bp [ i ]
>1554	Identifier	i
>1555	Identifier	Bp
>1556	Identifier	temp
>1557	Identifier	temp
>1558	IdentifierDeclType	int
>1559	IncDecOp	 
>1560	IncDec	++
>1561	Identifier	i
>1562	Condition	 
>1563	RelationalExpression	i <= n_row
>1564	Identifier	n_row
>1565	Identifier	i
>1566	ForInit	 
>1567	IdentifierDeclStatement	int i = 0 , last = 0 ;
>1568	IdentifierDecl	last = 0
>1569	AssignmentExpr	last = 0
>1570	PrimaryExpression	0
>1571	Identifier	last
>1572	Identifier	last
>1573	IdentifierDeclType	int
>1574	IdentifierDecl	i = 0
>1575	AssignmentExpr	i = 0
>1576	PrimaryExpression	0
>1577	Identifier	i
>1578	Identifier	i
>1579	IdentifierDeclType	int
>1580	ForStatement	for ( int n = 0 ; n < nnz ; n ++ )
>1581	CompoundStatement	 
>1582	ExpressionStatement	 
>1583	IncDecOp	Bp [ row ] ++
>1584	IncDec	++
>1585	ArrayIndexing	Bp [ row ]
>1586	Identifier	row
>1587	Identifier	Bp
>1588	ExpressionStatement	 
>1589	AssignmentExpr	Bx [ dest ] = Ax [ n ]
>1590	ArrayIndexing	Ax [ n ]
>1591	Identifier	n
>1592	Identifier	Ax
>1593	ArrayIndexing	Bx [ dest ]
>1594	Identifier	dest
>1595	Identifier	Bx
>1596	ExpressionStatement	 
>1597	AssignmentExpr	Bj [ dest ] = Aij [ n ] . y ( )
>1598	CallExpression	Aij [ n ] . y ( )
>1599	ArgumentList	 
>1600	Callee	Aij [ n ] . y
>1601	MemberAccess	Aij [ n ] . y
>1602	Identifier	y
>1603	ArrayIndexing	Aij [ n ]
>1604	Identifier	n
>1605	Identifier	Aij
>1606	ArrayIndexing	Bj [ dest ]
>1607	Identifier	dest
>1608	Identifier	Bj
>1609	IdentifierDeclStatement	 
>1610	IdentifierDecl	dest = Bp [ row ]
>1611	AssignmentExpr	dest = Bp [ row ]
>1612	ArrayIndexing	Bp [ row ]
>1613	Identifier	row
>1614	Identifier	Bp
>1615	Identifier	dest
>1616	Identifier	dest
>1617	IdentifierDeclType	int
>1618	IdentifierDeclStatement	 
>1619	IdentifierDecl	row = Aij [ n ] . x ( )
>1620	AssignmentExpr	row = Aij [ n ] . x ( )
>1621	CallExpression	Aij [ n ] . x ( )
>1622	ArgumentList	 
>1623	Callee	Aij [ n ] . x
>1624	MemberAccess	Aij [ n ] . x
>1625	Identifier	x
>1626	ArrayIndexing	Aij [ n ]
>1627	Identifier	n
>1628	Identifier	Aij
>1629	Identifier	row
>1630	Identifier	row
>1631	IdentifierDeclType	int
>1632	IncDecOp	 
>1633	IncDec	++
>1634	Identifier	n
>1635	Condition	 
>1636	RelationalExpression	n < nnz
>1637	Identifier	nnz
>1638	Identifier	n
>1639	ForInit	 
>1640	IdentifierDeclStatement	int n = 0 ;
>1641	IdentifierDecl	n = 0
>1642	AssignmentExpr	n = 0
>1643	PrimaryExpression	0
>1644	Identifier	n
>1645	Identifier	n
>1646	IdentifierDeclType	int
>1647	ExpressionStatement	 
>1648	AssignmentExpr	Bp [ n_row ] = nnz
>1649	Identifier	nnz
>1650	ArrayIndexing	Bp [ n_row ]
>1651	Identifier	n_row
>1652	Identifier	Bp
>1653	ForStatement	for ( int i = 0 , cumsum = 0 ; i < n_row ; i ++ )
>1654	CompoundStatement	 
>1655	ExpressionStatement	 
>1656	AssignmentExpr	cumsum += temp
>1657	Identifier	temp
>1658	Identifier	cumsum
>1659	ExpressionStatement	 
>1660	AssignmentExpr	Bp [ i ] = cumsum
>1661	Identifier	cumsum
>1662	ArrayIndexing	Bp [ i ]
>1663	Identifier	i
>1664	Identifier	Bp
>1665	IdentifierDeclStatement	 
>1666	IdentifierDecl	temp = Bp [ i ]
>1667	AssignmentExpr	temp = Bp [ i ]
>1668	ArrayIndexing	Bp [ i ]
>1669	Identifier	i
>1670	Identifier	Bp
>1671	Identifier	temp
>1672	Identifier	temp
>1673	IdentifierDeclType	int
>1674	IncDecOp	 
>1675	IncDec	++
>1676	Identifier	i
>1677	Condition	 
>1678	RelationalExpression	i < n_row
>1679	Identifier	n_row
>1680	Identifier	i
>1681	ForInit	 
>1682	IdentifierDeclStatement	int i = 0 , cumsum = 0 ;
>1683	IdentifierDecl	cumsum = 0
>1684	AssignmentExpr	cumsum = 0
>1685	PrimaryExpression	0
>1686	Identifier	cumsum
>1687	Identifier	cumsum
>1688	IdentifierDeclType	int
>1689	IdentifierDecl	i = 0
>1690	AssignmentExpr	i = 0
>1691	PrimaryExpression	0
>1692	Identifier	i
>1693	Identifier	i
>1694	IdentifierDeclType	int
>1695	ForStatement	for ( int n = 0 ; n < nnz ; n ++ )
>1696	CompoundStatement	 
>1697	ExpressionStatement	 
>1698	IncDecOp	Bp [ Aij [ n ] . x ( ) ] ++
>1699	IncDec	++
>1700	ArrayIndexing	Bp [ Aij [ n ] . x ( ) ]
>1701	CallExpression	Aij [ n ] . x ( )
>1702	ArgumentList	 
>1703	Callee	Aij [ n ] . x
>1704	MemberAccess	Aij [ n ] . x
>1705	Identifier	x
>1706	ArrayIndexing	Aij [ n ]
>1707	Identifier	n
>1708	Identifier	Aij
>1709	Identifier	Bp
>1710	IncDecOp	 
>1711	IncDec	++
>1712	Identifier	n
>1713	Condition	 
>1714	RelationalExpression	n < nnz
>1715	Identifier	nnz
>1716	Identifier	n
>1717	ForInit	 
>1718	IdentifierDeclStatement	int n = 0 ;
>1719	IdentifierDecl	n = 0
>1720	AssignmentExpr	n = 0
>1721	PrimaryExpression	0
>1722	Identifier	n
>1723	Identifier	n
>1724	IdentifierDeclType	int
>1725	ExpressionStatement	 
>1726	CallExpression	std 
>1727	ArgumentList	Bp
>1728	Argument	0
>1729	PrimaryExpression	0
>1730	Argument	Bp + n_row
>1731	AdditiveExpression	Bp + n_row
>1732	Identifier	n_row
>1733	Identifier	Bp
>1734	Argument	Bp
>1735	Identifier	Bp
>1736	Callee	std 
>1737	Identifier	std 
>1771	FunctionDef	kv_pair_less (const std 
>1772	ParameterList	const std 
>1773	Parameter	 
>1774	Identifier	y
>1775	ParameterType	const std 
>1776	Parameter	 
>1777	Identifier	x
>1778	ParameterType	const std 
>1779	ReturnType	bool
>1780	CompoundStatement	 
>1781	ReturnStatement	 
>1782	RelationalExpression	x . first < y . first
>1783	MemberAccess	y . first
>1784	Identifier	first
>1785	Identifier	y
>1786	MemberAccess	x . first
>1787	Identifier	first
>1788	Identifier	x
>1796	FunctionDef	csr_sort_indices (const I n_row , const I Ap [ ] , I Aj [ ] , T Ax [ ])
>1797	ParameterList	const I n_row , const I Ap [ ] , I Aj [ ] , T Ax [ ]
>1798	Parameter	 
>1799	Identifier	Ax
>1800	ParameterType	T [ ]
>1801	Parameter	 
>1802	Identifier	Aj
>1803	ParameterType	I [ ]
>1804	Parameter	 
>1805	Identifier	Ap
>1806	ParameterType	const I [ ]
>1807	Parameter	 
>1808	Identifier	n_row
>1809	ParameterType	const I
>1810	ReturnType	void
>1811	CompoundStatement	 
>1812	ForStatement	for ( I i = 0 ; i < n_row ; i ++ )
>1813	CompoundStatement	 
>1814	ForStatement	for ( I jj = row_start , n = 0 ; jj < row_end ; jj ++ , n ++ )
>1815	CompoundStatement	 
>1816	ExpressionStatement	 
>1817	AssignmentExpr	Ax [ jj ] = temp [ n ] . second
>1818	MemberAccess	temp [ n ] . second
>1819	Identifier	second
>1820	ArrayIndexing	temp [ n ]
>1821	Identifier	n
>1822	Identifier	temp
>1823	ArrayIndexing	Ax [ jj ]
>1824	Identifier	jj
>1825	Identifier	Ax
>1826	ExpressionStatement	 
>1827	AssignmentExpr	Aj [ jj ] = temp [ n ] . first
>1828	MemberAccess	temp [ n ] . first
>1829	Identifier	first
>1830	ArrayIndexing	temp [ n ]
>1831	Identifier	n
>1832	Identifier	temp
>1833	ArrayIndexing	Aj [ jj ]
>1834	Identifier	jj
>1835	Identifier	Aj
>1836	Expression	 
>1837	IncDecOp	n ++
>1838	IncDec	++
>1839	Identifier	n
>1840	IncDecOp	jj ++
>1841	IncDec	++
>1842	Identifier	jj
>1843	Condition	 
>1844	RelationalExpression	jj < row_end
>1845	Identifier	row_end
>1846	Identifier	jj
>1847	ForInit	 
>1848	IdentifierDeclStatement	I jj = row_start , n = 0 ;
>1849	IdentifierDecl	n = 0
>1850	AssignmentExpr	n = 0
>1851	PrimaryExpression	0
>1852	Identifier	n
>1853	Identifier	n
>1854	IdentifierDeclType	I
>1855	IdentifierDecl	jj = row_start
>1856	AssignmentExpr	jj = row_start
>1857	Identifier	row_start
>1858	Identifier	row_start
>1859	Identifier	jj
>1860	IdentifierDeclType	I
>1861	ExpressionStatement	 
>1862	Statement	 
>1863	Statement	 
>1864	Statement	 
>1865	Statement	 
>1866	Statement	 
>1867	Statement	 
>1868	Statement	 
>1869	Statement	 
>1870	Statement	 
>1871	Statement	 
>1872	Statement	 
>1873	Statement	 
>1874	Statement	 
>1875	Statement	 
>1876	Statement	 
>1877	Statement	 
>1878	Statement	 
>1879	Statement	 
>1880	Statement	 
>1881	Statement	 
>1882	Statement	 
>1883	Statement	 
>1884	Statement	 
>1885	ForStatement	for ( I jj = row_start ; jj < row_end ; jj ++ )
>1886	CompoundStatement	 
>1887	ExpressionStatement	 
>1888	CallExpression	temp . push_back ( std 
>1889	ArgumentList	std 
>1890	Argument	std 
>1891	CallExpression	std 
>1892	ArgumentList	Aj [ jj ]
>1893	Argument	Ax [ jj ]
>1894	ArrayIndexing	Ax [ jj ]
>1895	Identifier	jj
>1896	Identifier	Ax
>1897	Argument	Aj [ jj ]
>1898	ArrayIndexing	Aj [ jj ]
>1899	Identifier	jj
>1900	Identifier	Aj
>1901	Callee	std 
>1902	Identifier	std 
>1903	Callee	temp . push_back
>1904	MemberAccess	temp . push_back
>1905	Identifier	push_back
>1906	Identifier	temp
>1907	IncDecOp	 
>1908	IncDec	++
>1909	Identifier	jj
>1910	Condition	 
>1911	RelationalExpression	jj < row_end
>1912	Identifier	row_end
>1913	Identifier	jj
>1914	ForInit	 
>1915	IdentifierDeclStatement	I jj = row_start ;
>1916	IdentifierDecl	jj = row_start
>1917	AssignmentExpr	jj = row_start
>1918	Identifier	row_start
>1919	Identifier	row_start
>1920	Identifier	jj
>1921	IdentifierDeclType	I
>1922	ExpressionStatement	 
>1923	CallExpression	temp . clear ( )
>1924	ArgumentList	 
>1925	Callee	temp . clear
>1926	MemberAccess	temp . clear
>1927	Identifier	clear
>1928	Identifier	temp
>1929	IdentifierDeclStatement	 
>1930	IdentifierDecl	row_end = Ap [ i + 1 ]
>1931	AssignmentExpr	row_end = Ap [ i + 1 ]
>1932	ArrayIndexing	Ap [ i + 1 ]
>1933	AdditiveExpression	i + 1
>1934	PrimaryExpression	1
>1935	Identifier	i
>1936	Identifier	Ap
>1937	Identifier	row_end
>1938	Identifier	row_end
>1939	IdentifierDeclType	I
>1940	IdentifierDeclStatement	 
>1941	IdentifierDecl	row_start = Ap [ i ]
>1942	AssignmentExpr	row_start = Ap [ i ]
>1943	ArrayIndexing	Ap [ i ]
>1944	Identifier	i
>1945	Identifier	Ap
>1946	Identifier	row_start
>1947	Identifier	row_start
>1948	IdentifierDeclType	I
>1949	IncDecOp	 
>1950	IncDec	++
>1951	Identifier	i
>1952	Condition	 
>1953	RelationalExpression	i < n_row
>1954	Identifier	n_row
>1955	Identifier	i
>1956	ForInit	 
>1957	IdentifierDeclStatement	I i = 0 ;
>1958	IdentifierDecl	i = 0
>1959	AssignmentExpr	i = 0
>1960	PrimaryExpression	0
>1961	Identifier	i
>1962	Identifier	i
>1963	IdentifierDeclType	I
>1964	IdentifierDeclStatement	 
>1965	IdentifierDecl	temp
>1966	Identifier	temp
>1967	IdentifierDeclType	std 
>1991	FunctionDef	csr_sum_duplicates (const I n_row , const I n_col , I Ap [ ] , I Aj [ ] , T Ax [ ])
>1992	ParameterList	const I n_row , const I n_col , I Ap [ ] , I Aj [ ] , T Ax [ ]
>1993	Parameter	 
>1994	Identifier	Ax
>1995	ParameterType	T [ ]
>1996	Parameter	 
>1997	Identifier	Aj
>1998	ParameterType	I [ ]
>1999	Parameter	 
>2000	Identifier	Ap
>2001	ParameterType	I [ ]
>2002	Parameter	 
>2003	Identifier	n_col
>2004	ParameterType	const I
>2005	Parameter	 
>2006	Identifier	n_row
>2007	ParameterType	const I
>2008	ReturnType	void
>2009	CompoundStatement	 
>2010	ForStatement	for ( I i = 0 ; i < n_row ; i ++ )
>2011	CompoundStatement	 
>2012	ExpressionStatement	 
>2013	AssignmentExpr	Ap [ i + 1 ] = nnz
>2014	Identifier	nnz
>2015	ArrayIndexing	Ap [ i + 1 ]
>2016	AdditiveExpression	i + 1
>2017	PrimaryExpression	1
>2018	Identifier	i
>2019	Identifier	Ap
>2020	WhileStatement	while ( jj < row_end )
>2021	CompoundStatement	 
>2022	ExpressionStatement	 
>2023	IncDecOp	nnz ++
>2024	IncDec	++
>2025	Identifier	nnz
>2026	ExpressionStatement	 
>2027	AssignmentExpr	Ax [ nnz ] = x
>2028	Identifier	x
>2029	ArrayIndexing	Ax [ nnz ]
>2030	Identifier	nnz
>2031	Identifier	Ax
>2032	ExpressionStatement	 
>2033	AssignmentExpr	Aj [ nnz ] = j
>2034	Identifier	j
>2035	ArrayIndexing	Aj [ nnz ]
>2036	Identifier	nnz
>2037	Identifier	Aj
>2038	WhileStatement	while ( jj < row_end && Aj [ jj ] == j )
>2039	CompoundStatement	 
>2040	ExpressionStatement	 
>2041	IncDecOp	jj ++
>2042	IncDec	++
>2043	Identifier	jj
>2044	ExpressionStatement	 
>2045	AssignmentExpr	x += Ax [ jj ]
>2046	ArrayIndexing	Ax [ jj ]
>2047	Identifier	jj
>2048	Identifier	Ax
>2049	Identifier	x
>2050	Condition	 
>2051	AndExpression	jj < row_end && Aj [ jj ] == j
>2052	EqualityExpression	Aj [ jj ] == j
>2053	Identifier	j
>2054	ArrayIndexing	Aj [ jj ]
>2055	Identifier	jj
>2056	Identifier	Aj
>2057	RelationalExpression	jj < row_end
>2058	Identifier	row_end
>2059	Identifier	jj
>2060	ExpressionStatement	 
>2061	IncDecOp	jj ++
>2062	IncDec	++
>2063	Identifier	jj
>2064	IdentifierDeclStatement	 
>2065	IdentifierDecl	x = Ax [ jj ]
>2066	AssignmentExpr	x = Ax [ jj ]
>2067	ArrayIndexing	Ax [ jj ]
>2068	Identifier	jj
>2069	Identifier	Ax
>2070	Identifier	x
>2071	Identifier	x
>2072	IdentifierDeclType	T
>2073	IdentifierDeclStatement	 
>2074	IdentifierDecl	j = Aj [ jj ]
>2075	AssignmentExpr	j = Aj [ jj ]
>2076	ArrayIndexing	Aj [ jj ]
>2077	Identifier	jj
>2078	Identifier	Aj
>2079	Identifier	j
>2080	Identifier	j
>2081	IdentifierDeclType	I
>2082	Condition	 
>2083	RelationalExpression	jj < row_end
>2084	Identifier	row_end
>2085	Identifier	jj
>2086	ExpressionStatement	 
>2087	AssignmentExpr	row_end = Ap [ i + 1 ]
>2088	ArrayIndexing	Ap [ i + 1 ]
>2089	AdditiveExpression	i + 1
>2090	PrimaryExpression	1
>2091	Identifier	i
>2092	Identifier	Ap
>2093	Identifier	row_end
>2094	IdentifierDeclStatement	 
>2095	IdentifierDecl	jj = row_end
>2096	AssignmentExpr	jj = row_end
>2097	Identifier	row_end
>2098	Identifier	row_end
>2099	Identifier	jj
>2100	IdentifierDeclType	I
>2101	IncDecOp	 
>2102	IncDec	++
>2103	Identifier	i
>2104	Condition	 
>2105	RelationalExpression	i < n_row
>2106	Identifier	n_row
>2107	Identifier	i
>2108	ForInit	 
>2109	IdentifierDeclStatement	I i = 0 ;
>2110	IdentifierDecl	i = 0
>2111	AssignmentExpr	i = 0
>2112	PrimaryExpression	0
>2113	Identifier	i
>2114	Identifier	i
>2115	IdentifierDeclType	I
>2116	IdentifierDeclStatement	 
>2117	IdentifierDecl	row_end = 0
>2118	AssignmentExpr	row_end = 0
>2119	PrimaryExpression	0
>2120	Identifier	row_end
>2121	Identifier	row_end
>2122	IdentifierDeclType	I
>2123	IdentifierDeclStatement	 
>2124	IdentifierDecl	nnz = 0
>2125	AssignmentExpr	nnz = 0
>2126	PrimaryExpression	0
>2127	Identifier	nnz
>2128	Identifier	nnz
>2129	IdentifierDeclType	I
>2150	FunctionDef	setrand_scipy (const Coordinates & coords , const Values & vals)
>2151	ParameterList	const Coordinates & coords , const Values & vals
>2152	Parameter	 
>2153	Identifier	vals
>2154	ParameterType	const Values &
>2155	Parameter	 
>2156	Identifier	coords
>2157	ParameterType	const Coordinates &
>2158	ReturnType	EIGEN_DONT_INLINE Scalar *
>2159	CompoundStatement	 
>2160	ReturnStatement	 
>2161	UnaryOp	& mat . coeffRef ( coords [ 0 ] . x ( ) , coords [ 0 ] . y ( ) )
>2162	CallExpression	mat . coeffRef ( coords [ 0 ] . x ( ) , coords [ 0 ] . y ( ) )
>2163	ArgumentList	coords [ 0 ] . x ( )
>2164	Argument	coords [ 0 ] . y ( )
>2165	CallExpression	coords [ 0 ] . y ( )
>2166	ArgumentList	 
>2167	Callee	coords [ 0 ] . y
>2168	MemberAccess	coords [ 0 ] . y
>2169	Identifier	y
>2170	ArrayIndexing	coords [ 0 ]
>2171	PrimaryExpression	0
>2172	Identifier	coords
>2173	Argument	coords [ 0 ] . x ( )
>2174	CallExpression	coords [ 0 ] . x ( )
>2175	ArgumentList	 
>2176	Callee	coords [ 0 ] . x
>2177	MemberAccess	coords [ 0 ] . x
>2178	Identifier	x
>2179	ArrayIndexing	coords [ 0 ]
>2180	PrimaryExpression	0
>2181	Identifier	coords
>2182	Callee	mat . coeffRef
>2183	MemberAccess	mat . coeffRef
>2184	Identifier	coeffRef
>2185	Identifier	mat
>2186	UnaryOperator	&
>2187	ExpressionStatement	 
>2188	CallExpression	mat . resizeNonZeros ( mat . _outerIndexPtr ( ) [ SIZE ] )
>2189	ArgumentList	mat . _outerIndexPtr ( ) [ SIZE ]
>2190	Argument	mat . _outerIndexPtr ( ) [ SIZE ]
>2191	ArrayIndexing	mat . _outerIndexPtr ( ) [ SIZE ]
>2192	Identifier	SIZE
>2193	CallExpression	mat . _outerIndexPtr ( )
>2194	ArgumentList	 
>2195	Callee	mat . _outerIndexPtr
>2196	MemberAccess	mat . _outerIndexPtr
>2197	Identifier	_outerIndexPtr
>2198	Identifier	mat
>2199	Callee	mat . resizeNonZeros
>2200	MemberAccess	mat . resizeNonZeros
>2201	Identifier	resizeNonZeros
>2202	Identifier	mat
>2203	ExpressionStatement	 
>2204	CallExpression	csr_sum_duplicates ( SIZE , SIZE , mat . _outerIndexPtr ( ) , mat . _innerIndexPtr ( ) , mat . _valuePtr ( ) )
>2205	ArgumentList	SIZE
>2206	Argument	mat . _valuePtr ( )
>2207	CallExpression	mat . _valuePtr ( )
>2208	ArgumentList	 
>2209	Callee	mat . _valuePtr
>2210	MemberAccess	mat . _valuePtr
>2211	Identifier	_valuePtr
>2212	Identifier	mat
>2213	Argument	mat . _innerIndexPtr ( )
>2214	CallExpression	mat . _innerIndexPtr ( )
>2215	ArgumentList	 
>2216	Callee	mat . _innerIndexPtr
>2217	MemberAccess	mat . _innerIndexPtr
>2218	Identifier	_innerIndexPtr
>2219	Identifier	mat
>2220	Argument	mat . _outerIndexPtr ( )
>2221	CallExpression	mat . _outerIndexPtr ( )
>2222	ArgumentList	 
>2223	Callee	mat . _outerIndexPtr
>2224	MemberAccess	mat . _outerIndexPtr
>2225	Identifier	_outerIndexPtr
>2226	Identifier	mat
>2227	Argument	SIZE
>2228	Identifier	SIZE
>2229	Argument	SIZE
>2230	Identifier	SIZE
>2231	Callee	csr_sum_duplicates
>2232	Identifier	csr_sum_duplicates
>2233	ExpressionStatement	 
>2234	CallExpression	csr_sort_indices ( SIZE , mat . _outerIndexPtr ( ) , mat . _innerIndexPtr ( ) , mat . _valuePtr ( ) )
>2235	ArgumentList	SIZE
>2236	Argument	mat . _valuePtr ( )
>2237	CallExpression	mat . _valuePtr ( )
>2238	ArgumentList	 
>2239	Callee	mat . _valuePtr
>2240	MemberAccess	mat . _valuePtr
>2241	Identifier	_valuePtr
>2242	Identifier	mat
>2243	Argument	mat . _innerIndexPtr ( )
>2244	CallExpression	mat . _innerIndexPtr ( )
>2245	ArgumentList	 
>2246	Callee	mat . _innerIndexPtr
>2247	MemberAccess	mat . _innerIndexPtr
>2248	Identifier	_innerIndexPtr
>2249	Identifier	mat
>2250	Argument	mat . _outerIndexPtr ( )
>2251	CallExpression	mat . _outerIndexPtr ( )
>2252	ArgumentList	 
>2253	Callee	mat . _outerIndexPtr
>2254	MemberAccess	mat . _outerIndexPtr
>2255	Identifier	_outerIndexPtr
>2256	Identifier	mat
>2257	Argument	SIZE
>2258	Identifier	SIZE
>2259	Callee	csr_sort_indices
>2260	Identifier	csr_sort_indices
>2261	ExpressionStatement	 
>2262	RelationalExpression	coo_tocsr < Scalar > ( SIZE , SIZE , coords . size ( ) , coords , vals , mat . _outerIndexPtr ( ) , mat \
>2263	RelationalExpression	Scalar > ( SIZE , SIZE , coords . size ( ) , coords , vals , mat . _outerIndexPtr ( ) , mat . _innerIndexPtr ( ) , \
>2264	Expression	SIZE , SIZE , coords . size ( ) , coords , vals , mat . _outerIndexPtr ( ) , mat . _innerIndexPtr ( ) , mat . _valuePtr ( )
>2265	Expression	SIZE , coords . size ( ) , coords , vals , mat . _outerIndexPtr ( ) , mat . _innerIndexPtr ( ) , mat . _valuePtr ( )
>2266	Expression	coords . size ( ) , coords , vals , mat . _outerIndexPtr ( ) , mat . _innerIndexPtr ( ) , mat . _valuePtr ( )
>2267	Expression	coords , vals , mat . _outerIndexPtr ( ) , mat . _innerIndexPtr ( ) , mat . _valuePtr ( )
>2268	Expression	vals , mat . _outerIndexPtr ( ) , mat . _innerIndexPtr ( ) , mat . _valuePtr ( )
>2269	Expression	mat . _outerIndexPtr ( ) , mat . _innerIndexPtr ( ) , mat . _valuePtr ( )
>2270	Expression	mat . _innerIndexPtr ( ) , mat . _valuePtr ( )
>2271	CallExpression	mat . _valuePtr ( )
>2272	ArgumentList	 
>2273	Callee	mat . _valuePtr
>2274	MemberAccess	mat . _valuePtr
>2275	Identifier	_valuePtr
>2276	Identifier	mat
>2277	CallExpression	mat . _innerIndexPtr ( )
>2278	ArgumentList	 
>2279	Callee	mat . _innerIndexPtr
>2280	MemberAccess	mat . _innerIndexPtr
>2281	Identifier	_innerIndexPtr
>2282	Identifier	mat
>2283	CallExpression	mat . _outerIndexPtr ( )
>2284	ArgumentList	 
>2285	Callee	mat . _outerIndexPtr
>2286	MemberAccess	mat . _outerIndexPtr
>2287	Identifier	_outerIndexPtr
>2288	Identifier	mat
>2289	Identifier	vals
>2290	Identifier	coords
>2291	CallExpression	coords . size ( )
>2292	ArgumentList	 
>2293	Callee	coords . size
>2294	MemberAccess	coords . size
>2295	Identifier	size
>2296	Identifier	coords
>2297	Identifier	SIZE
>2298	Identifier	SIZE
>2299	Identifier	Scalar
>2300	Identifier	coo_tocsr
>2301	ExpressionStatement	 
>2302	CallExpression	mat . resizeNonZeros ( coords . size ( ) )
>2303	ArgumentList	coords . size ( )
>2304	Argument	coords . size ( )
>2305	CallExpression	coords . size ( )
>2306	ArgumentList	 
>2307	Callee	coords . size
>2308	MemberAccess	coords . size
>2309	Identifier	size
>2310	Identifier	coords
>2311	Callee	mat . resizeNonZeros
>2312	MemberAccess	mat . resizeNonZeros
>2313	Identifier	resizeNonZeros
>2314	Identifier	mat
>2315	IdentifierDeclStatement	 
>2316	IdentifierDecl	mat ( SIZE , SIZE )
>2317	Expression	SIZE , SIZE
>2318	Identifier	SIZE
>2319	Identifier	SIZE
>2320	Identifier	mat
>2321	IdentifierDeclType	SparseMatrix < Scalar >
>2322	ExpressionStatement	 
>2323	Identifier	Eigen
>2324	Statement	 
>2325	Statement	 
>2345	FunctionDef	setrand_ublas_mapped (const Coordinates & coords , const Values & vals)
>2346	ParameterList	const Coordinates & coords , const Values & vals
>2347	Parameter	 
>2348	Identifier	vals
>2349	ParameterType	const Values &
>2350	Parameter	 
>2351	Identifier	coords
>2352	ParameterType	const Coordinates &
>2353	ReturnType	EIGEN_DONT_INLINE Scalar *
>2354	CompoundStatement	 
>2355	ReturnStatement	 
>2356	PrimaryExpression	0
>2357	IdentifierDeclStatement	 
>2358	IdentifierDecl	mat ( aux )
>2359	Identifier	aux
>2360	Identifier	mat
>2361	IdentifierDeclType	compressed_matrix < Scalar >
>2362	ExpressionStatement	 
>2363	Identifier	CHECK_MEM
>2364	ForStatement	for ( int i = 0 ; i < coords . size ( ) ; ++ i )
>2365	CompoundStatement	 
>2366	ExpressionStatement	 
>2367	AssignmentExpr	aux ( coords [ i ] . x ( ) , coords [ i ] . y ( ) ) += vals [ i ]
>2368	ArrayIndexing	vals [ i ]
>2369	Identifier	i
>2370	Identifier	vals
>2371	CallExpression	aux ( coords [ i ] . x ( ) , coords [ i ] . y ( ) )
>2372	ArgumentList	coords [ i ] . x ( )
>2373	Argument	coords [ i ] . y ( )
>2374	CallExpression	coords [ i ] . y ( )
>2375	ArgumentList	 
>2376	Callee	coords [ i ] . y
>2377	MemberAccess	coords [ i ] . y
>2378	Identifier	y
>2379	ArrayIndexing	coords [ i ]
>2380	Identifier	i
>2381	Identifier	coords
>2382	Argument	coords [ i ] . x ( )
>2383	CallExpression	coords [ i ] . x ( )
>2384	ArgumentList	 
>2385	Callee	coords [ i ] . x
>2386	MemberAccess	coords [ i ] . x
>2387	Identifier	x
>2388	ArrayIndexing	coords [ i ]
>2389	Identifier	i
>2390	Identifier	coords
>2391	Callee	aux
>2392	Identifier	aux
>2393	UnaryExpression	 
>2394	Identifier	i
>2395	IncDec	++
>2396	Condition	 
>2397	RelationalExpression	i < coords . size ( )
>2398	CallExpression	coords . size ( )
>2399	ArgumentList	 
>2400	Callee	coords . size
>2401	MemberAccess	coords . size
>2402	Identifier	size
>2403	Identifier	coords
>2404	Identifier	i
>2405	ForInit	 
>2406	IdentifierDeclStatement	int i = 0 ;
>2407	IdentifierDecl	i = 0
>2408	AssignmentExpr	i = 0
>2409	PrimaryExpression	0
>2410	Identifier	i
>2411	Identifier	i
>2412	IdentifierDeclType	int
>2413	IdentifierDeclStatement	 
>2414	IdentifierDecl	aux ( SIZE , SIZE )
>2415	Expression	SIZE , SIZE
>2416	Identifier	SIZE
>2417	Identifier	SIZE
>2418	Identifier	aux
>2419	IdentifierDeclType	mapped_matrix < Scalar >
>2420	ExpressionStatement	 
>2421	Identifier	boost 
>2422	Statement	 
>2423	Statement	 
>2424	ExpressionStatement	 
>2425	Identifier	boost 
>2426	Statement	 
>2427	Statement	 
>2428	ExpressionStatement	 
>2429	Identifier	boost
>2430	Statement	 
>2431	Statement	 
>2446	FunctionDef	setrand_ublas_genvec (const Coordinates & coords , const Values & vals)
>2447	ParameterList	const Coordinates & coords , const Values & vals
>2448	Parameter	 
>2449	Identifier	vals
>2450	ParameterType	const Values &
>2451	Parameter	 
>2452	Identifier	coords
>2453	ParameterType	const Coordinates &
>2454	ReturnType	EIGEN_DONT_INLINE Scalar *
>2455	CompoundStatement	 
>2456	ReturnStatement	 
>2457	PrimaryExpression	0
>2458	IdentifierDeclStatement	 
>2459	IdentifierDecl	mat ( aux )
>2460	Identifier	aux
>2461	Identifier	mat
>2462	IdentifierDeclType	compressed_matrix < Scalar , row_major >
>2463	ExpressionStatement	 
>2464	Identifier	CHECK_MEM
>2465	ForStatement	for ( int i = 0 ; i < coords . size ( ) ; ++ i )
>2466	CompoundStatement	 
>2467	ExpressionStatement	 
>2468	AssignmentExpr	aux ( coords [ i ] . x ( ) , coords [ i ] . y ( ) ) += vals [ i ]
>2469	ArrayIndexing	vals [ i ]
>2470	Identifier	i
>2471	Identifier	vals
>2472	CallExpression	aux ( coords [ i ] . x ( ) , coords [ i ] . y ( ) )
>2473	ArgumentList	coords [ i ] . x ( )
>2474	Argument	coords [ i ] . y ( )
>2475	CallExpression	coords [ i ] . y ( )
>2476	ArgumentList	 
>2477	Callee	coords [ i ] . y
>2478	MemberAccess	coords [ i ] . y
>2479	Identifier	y
>2480	ArrayIndexing	coords [ i ]
>2481	Identifier	i
>2482	Identifier	coords
>2483	Argument	coords [ i ] . x ( )
>2484	CallExpression	coords [ i ] . x ( )
>2485	ArgumentList	 
>2486	Callee	coords [ i ] . x
>2487	MemberAccess	coords [ i ] . x
>2488	Identifier	x
>2489	ArrayIndexing	coords [ i ]
>2490	Identifier	i
>2491	Identifier	coords
>2492	Callee	aux
>2493	Identifier	aux
>2494	UnaryExpression	 
>2495	Identifier	i
>2496	IncDec	++
>2497	Condition	 
>2498	RelationalExpression	i < coords . size ( )
>2499	CallExpression	coords . size ( )
>2500	ArgumentList	 
>2501	Callee	coords . size
>2502	MemberAccess	coords . size
>2503	Identifier	size
>2504	Identifier	coords
>2505	Identifier	i
>2506	ForInit	 
>2507	IdentifierDeclStatement	int i = 0 ;
>2508	IdentifierDecl	i = 0
>2509	AssignmentExpr	i = 0
>2510	PrimaryExpression	0
>2511	Identifier	i
>2512	Identifier	i
>2513	IdentifierDeclType	int
>2514	IdentifierDeclStatement	 
>2515	IdentifierDecl	aux ( SIZE , SIZE )
>2516	Expression	SIZE , SIZE
>2517	Identifier	SIZE
>2518	Identifier	SIZE
>2519	Identifier	aux
>2520	IdentifierDeclType	generalized_vector_of_vector < Scalar , row_major , ublas 
>2521	ExpressionStatement	 
>2522	Identifier	boost 
>2523	Statement	 
>2524	Statement	 
>2525	ExpressionStatement	 
>2526	Identifier	boost 
>2527	Statement	 
>2528	Statement	 
>2529	ExpressionStatement	 
>2530	Identifier	boost
>2531	Statement	 
>2532	Statement	 
<37=46,45,38
<38=42,39
<39=41,40
<42=44,43
<46=547,540,533,529,525,521,275,262,261,235,209,183,182,156,130,104,103,77,49,47
<47=48
<49=63,50
<50=51
<51=62,52
<52=61,53
<53=55,54
<55=57,56
<57=58
<58=60,59
<63=64
<64=75,65
<65=66
<66=67
<67=73,68
<68=71,69
<69=70
<71=72
<73=74
<75=76
<77=102,101,92,91,78
<78=79
<79=90,80
<80=89,81
<81=83,82
<83=85,84
<85=86
<86=88,87
<92=93
<93=99,94
<94=97,95
<95=96
<97=98
<99=100
<104=129,128,119,118,105
<105=106
<106=117,107
<107=116,108
<108=110,109
<110=112,111
<112=113
<113=115,114
<119=120
<120=126,121
<121=124,122
<122=123
<124=125
<126=127
<130=155,154,145,144,131
<131=132
<132=143,133
<133=142,134
<134=136,135
<136=138,137
<138=139
<139=141,140
<145=146
<146=152,147
<147=150,148
<148=149
<150=151
<152=153
<156=181,180,171,170,157
<157=158
<158=169,159
<159=168,160
<160=162,161
<162=164,163
<164=165
<165=167,166
<171=172
<172=178,173
<173=176,174
<174=175
<176=177
<178=179
<183=208,207,198,197,184
<184=185
<185=196,186
<186=195,187
<187=189,188
<189=191,190
<191=192
<192=194,193
<198=199
<199=205,200
<200=203,201
<201=202
<203=204
<205=206
<209=234,233,224,223,210
<210=211
<211=222,212
<212=221,213
<213=215,214
<215=217,216
<217=218
<218=220,219
<224=225
<225=231,226
<226=229,227
<227=228
<229=230
<231=232
<235=260,259,250,249,236
<236=237
<237=248,238
<238=247,239
<239=241,240
<241=243,242
<243=244
<244=246,245
<250=251
<251=257,252
<252=255,253
<253=254
<255=256
<257=258
<262=263
<263=274,264
<264=273,265
<265=267,266
<267=269,268
<269=270
<270=272,271
<275=519,349,276
<276=277
<277=278
<278=341,337,334,279
<279=326,322,319,280
<280=295,294,293,292,291,290,289,288,287,286,285,284,283,282,281
<295=296
<296=315,297
<297=298
<298=299
<299=313,300
<300=303,301
<301=302
<303=304
<304=312,305
<305=311,306
<306=310,307
<307=309,308
<313=314
<315=316
<316=318,317
<319=321,320
<322=323
<323=325,324
<326=327
<327=328
<328=333,332,329
<329=331,330
<334=336,335
<337=338
<338=340,339
<341=342
<342=343
<343=348,347,344
<344=346,345
<349=515,504,498,445,439,428,419,410,350
<350=402,398,395,351
<351=377,366,365,364,363,362,361,360,359,358,357,356,355,354,353,352
<366=367
<367=373,368
<368=369
<369=370
<370=372,371
<373=374
<374=376,375
<377=378
<378=394,393,379
<379=392,380
<380=391,381
<381=390,382
<382=389,383
<383=385,384
<385=386
<386=388,387
<395=397,396
<398=399
<399=401,400
<402=403
<403=404
<404=409,408,405
<405=407,406
<410=411
<411=415,412
<412=413
<413=414
<415=416
<416=418,417
<419=420
<420=424,421
<421=422
<422=423
<424=425
<425=427,426
<428=429
<429=438,437,430
<430=436,431
<431=435,432
<432=434,433
<439=440
<440=444,441
<441=443,442
<445=490,484,446
<446=461,451,447
<447=448
<448=450,449
<451=452
<452=453
<453=457,454
<454=455
<455=456
<457=458
<458=460,459
<461=462
<462=483,482,463
<463=473,464
<464=472,465
<465=471,466
<466=470,467
<467=469,468
<473=481,474
<474=480,475
<475=479,476
<476=478,477
<484=485
<485=489,486
<486=488,487
<490=491
<491=492
<492=497,496,493
<493=495,494
<498=499
<499=503,500
<500=502,501
<504=505
<505=511,506
<506=507
<507=508
<508=510,509
<511=512
<512=514,513
<515=516
<516=518,517
<519=520
<521=522
<522=524,523
<525=526
<526=528,527
<529=530
<530=532,531
<533=534
<534=539,538,535
<535=537,536
<540=541
<541=546,545,542
<542=544,543
<547=548
<548=553,552,549
<549=551,550
<581=590,589,582
<582=586,583
<583=585,584
<586=588,587
<590=663,662,660,653,602,595,593,591
<591=592
<593=594
<595=596
<596=598,597
<598=599
<599=601,600
<602=645,636,633,603
<603=604
<604=605
<605=609,606
<606=608,607
<609=629,610
<610=620,611
<611=612
<612=614,613
<614=615
<615=617,616
<617=619,618
<620=621
<621=623,622
<623=624
<624=626,625
<626=628,627
<629=630
<630=632,631
<633=635,634
<636=637
<637=644,638
<638=640,639
<640=641
<641=643,642
<645=646
<646=647
<647=652,651,648
<648=650,649
<653=654
<654=659,658,655
<655=657,656
<660=661
<678=687,686,679
<679=683,680
<680=682,681
<683=685,684
<687=801,800,798,791,775,724,717,715,688
<688=689
<689=714,690
<690=710,691
<691=701,692
<692=693
<693=695,694
<695=696
<696=698,697
<698=700,699
<701=702
<702=704,703
<704=705
<705=707,706
<707=709,708
<710=711
<711=713,712
<715=716
<717=718
<718=720,719
<720=721
<721=723,722
<724=767,758,755,725
<725=726
<726=727
<727=731,728
<728=730,729
<731=751,732
<732=742,733
<733=734
<734=736,735
<736=737
<737=739,738
<739=741,740
<742=743
<743=745,744
<745=746
<746=748,747
<748=750,749
<751=752
<752=754,753
<755=757,756
<758=759
<759=766,760
<760=762,761
<762=763
<763=765,764
<767=768
<768=769
<769=774,773,770
<770=772,771
<775=776
<776=787,777
<777=778
<778=779
<779=781,780
<781=783,782
<783=784
<784=786,785
<787=788
<788=790,789
<791=792
<792=797,796,793
<793=795,794
<798=799
<820=829,828,821
<821=825,822
<822=824,823
<825=827,826
<829=977,976,974,960,953,857,830
<830=831
<831=856,832
<832=852,833
<833=843,834
<834=835
<835=837,836
<837=838
<838=840,839
<840=842,841
<843=844
<844=846,845
<846=847
<847=849,848
<849=851,850
<852=853
<853=855,854
<857=945,941,938,858
<858=931,922,870,863,859
<859=860
<860=862,861
<863=864
<864=866,865
<866=867
<867=869,868
<870=912,904,901,871
<871=872
<872=873
<873=877,874
<874=876,875
<877=897,878
<878=888,879
<879=880
<880=882,881
<882=883
<883=885,884
<885=887,886
<888=889
<889=891,890
<891=892
<892=894,893
<894=896,895
<897=898
<898=900,899
<901=903,902
<904=905
<905=911,906
<906=908,907
<908=910,909
<912=913
<913=914
<914=921,920,915
<915=919,916
<916=918,917
<922=923
<923=927,924
<924=925
<925=926
<927=928
<928=930,929
<931=932
<932=937,936,933
<933=935,934
<938=940,939
<941=942
<942=944,943
<945=946
<946=947
<947=952,951,948
<948=950,949
<953=954
<954=959,958,955
<955=957,956
<960=961
<961=973,972,962
<962=971,963
<963=965,964
<965=967,966
<967=968
<968=970,969
<974=975
<1000=1009,1008,1001
<1001=1005,1002
<1002=1004,1003
<1005=1007,1006
<1009=1123,1122,1120,1113,1097,1046,1039,1037,1010
<1010=1011
<1011=1036,1012
<1012=1032,1013
<1013=1023,1014
<1014=1015
<1015=1017,1016
<1017=1018
<1018=1020,1019
<1020=1022,1021
<1023=1024
<1024=1026,1025
<1026=1027
<1027=1029,1028
<1029=1031,1030
<1032=1033
<1033=1035,1034
<1037=1038
<1039=1040
<1040=1045,1044,1041
<1041=1043,1042
<1046=1089,1080,1077,1047
<1047=1048
<1048=1049
<1049=1053,1050
<1050=1052,1051
<1053=1073,1054
<1054=1064,1055
<1055=1056
<1056=1058,1057
<1058=1059
<1059=1061,1060
<1061=1063,1062
<1064=1065
<1065=1067,1066
<1067=1068
<1068=1070,1069
<1070=1072,1071
<1073=1074
<1074=1076,1075
<1077=1079,1078
<1080=1081
<1081=1088,1082
<1082=1084,1083
<1084=1085
<1085=1087,1086
<1089=1090
<1090=1091
<1091=1096,1095,1092
<1092=1094,1093
<1097=1098
<1098=1109,1099
<1099=1100
<1100=1101
<1101=1103,1102
<1103=1105,1104
<1105=1106
<1106=1108,1107
<1109=1110
<1110=1112,1111
<1113=1114
<1114=1119,1118,1115
<1115=1117,1116
<1120=1121
<1143=1152,1151,1144
<1144=1148,1145
<1145=1147,1146
<1148=1150,1149
<1152=1247,1246,1244,1237,1180,1153
<1153=1154
<1154=1179,1155
<1155=1175,1156
<1156=1166,1157
<1157=1158
<1158=1160,1159
<1160=1161
<1161=1163,1162
<1163=1165,1164
<1166=1167
<1167=1169,1168
<1169=1170
<1170=1172,1171
<1172=1174,1173
<1175=1176
<1176=1178,1177
<1180=1232,1183,1181
<1181=1182
<1183=1224,1215,1212,1184
<1184=1185
<1185=1186
<1186=1190,1187
<1187=1189,1188
<1190=1210,1191
<1191=1201,1192
<1192=1193
<1193=1195,1194
<1195=1196
<1196=1198,1197
<1198=1200,1199
<1201=1202
<1202=1204,1203
<1204=1205
<1205=1207,1206
<1207=1209,1208
<1210=1211
<1212=1214,1213
<1215=1216
<1216=1223,1217
<1217=1219,1218
<1219=1220
<1220=1222,1221
<1224=1225
<1225=1226
<1226=1231,1230,1227
<1227=1229,1228
<1232=1233
<1233=1236,1235,1234
<1237=1238
<1238=1243,1242,1239
<1239=1241,1240
<1244=1245
<1266=1275,1274,1267
<1267=1271,1268
<1268=1270,1269
<1271=1273,1272
<1275=1369,1368,1366,1359,1303,1276
<1276=1277
<1277=1302,1278
<1278=1298,1279
<1279=1289,1280
<1280=1281
<1281=1283,1282
<1283=1284
<1284=1286,1285
<1286=1288,1287
<1289=1290
<1290=1292,1291
<1292=1293
<1293=1295,1294
<1295=1297,1296
<1298=1299
<1299=1301,1300
<1303=1354,1306,1304
<1304=1305
<1306=1346,1337,1334,1307
<1307=1308
<1308=1312,1309
<1309=1311,1310
<1312=1332,1313
<1313=1323,1314
<1314=1315
<1315=1317,1316
<1317=1318
<1318=1320,1319
<1320=1322,1321
<1323=1324
<1324=1326,1325
<1326=1327
<1327=1329,1328
<1329=1331,1330
<1332=1333
<1334=1336,1335
<1337=1338
<1338=1345,1339
<1339=1341,1340
<1341=1342
<1342=1344,1343
<1346=1347
<1347=1348
<1348=1353,1352,1349
<1349=1351,1350
<1354=1355
<1355=1358,1357,1356
<1359=1360
<1360=1365,1364,1361
<1361=1363,1362
<1366=1367
<1388=1397,1396,1389
<1389=1393,1390
<1390=1392,1391
<1393=1395,1394
<1397=1491,1490,1488,1481,1425,1398
<1398=1399
<1399=1424,1400
<1400=1420,1401
<1401=1411,1402
<1402=1403
<1403=1405,1404
<1405=1406
<1406=1408,1407
<1408=1410,1409
<1411=1412
<1412=1414,1413
<1414=1415
<1415=1417,1416
<1417=1419,1418
<1420=1421
<1421=1423,1422
<1425=1476,1428,1426
<1426=1427
<1428=1468,1459,1456,1429
<1429=1430
<1430=1434,1431
<1431=1433,1432
<1434=1454,1435
<1435=1445,1436
<1436=1437
<1437=1439,1438
<1439=1440
<1440=1442,1441
<1442=1444,1443
<1445=1446
<1446=1448,1447
<1448=1449
<1449=1451,1450
<1451=1453,1452
<1454=1455
<1456=1458,1457
<1459=1460
<1460=1467,1461
<1461=1463,1462
<1463=1464
<1464=1466,1465
<1468=1469
<1469=1470
<1470=1475,1474,1471
<1471=1473,1472
<1476=1477
<1477=1480,1479,1478
<1481=1482
<1482=1487,1486,1483
<1483=1485,1484
<1488=1489
<1510=1537,1536,1511
<1511=1533,1530,1527,1524,1521,1518,1515,1512
<1512=1514,1513
<1515=1517,1516
<1518=1520,1519
<1521=1523,1522
<1524=1526,1525
<1527=1529,1528
<1530=1532,1531
<1533=1535,1534
<1537=1725,1695,1653,1647,1580,1538
<1538=1566,1562,1559,1539
<1539=1550,1544,1540
<1540=1541
<1541=1543,1542
<1544=1545
<1545=1547,1546
<1547=1549,1548
<1550=1551
<1551=1558,1557,1552
<1552=1556,1553
<1553=1555,1554
<1559=1561,1560
<1562=1563
<1563=1565,1564
<1566=1567
<1567=1574,1568
<1568=1573,1572,1569
<1569=1571,1570
<1574=1579,1578,1575
<1575=1577,1576
<1580=1639,1635,1632,1581
<1581=1618,1609,1596,1588,1582
<1582=1583
<1583=1585,1584
<1585=1587,1586
<1588=1589
<1589=1593,1590
<1590=1592,1591
<1593=1595,1594
<1596=1597
<1597=1606,1598
<1598=1600,1599
<1600=1601
<1601=1603,1602
<1603=1605,1604
<1606=1608,1607
<1609=1610
<1610=1617,1616,1611
<1611=1615,1612
<1612=1614,1613
<1618=1619
<1619=1631,1630,1620
<1620=1629,1621
<1621=1623,1622
<1623=1624
<1624=1626,1625
<1626=1628,1627
<1632=1634,1633
<1635=1636
<1636=1638,1637
<1639=1640
<1640=1641
<1641=1646,1645,1642
<1642=1644,1643
<1647=1648
<1648=1650,1649
<1650=1652,1651
<1653=1681,1677,1674,1654
<1654=1665,1659,1655
<1655=1656
<1656=1658,1657
<1659=1660
<1660=1662,1661
<1662=1664,1663
<1665=1666
<1666=1673,1672,1667
<1667=1671,1668
<1668=1670,1669
<1674=1676,1675
<1677=1678
<1678=1680,1679
<1681=1682
<1682=1689,1683
<1683=1688,1687,1684
<1684=1686,1685
<1689=1694,1693,1690
<1690=1692,1691
<1695=1717,1713,1710,1696
<1696=1697
<1697=1698
<1698=1700,1699
<1700=1709,1701
<1701=1703,1702
<1703=1704
<1704=1706,1705
<1706=1708,1707
<1710=1712,1711
<1713=1714
<1714=1716,1715
<1717=1718
<1718=1719
<1719=1724,1723,1720
<1720=1722,1721
<1725=1726
<1726=1736,1727
<1727=1734,1730,1728
<1728=1729
<1730=1731
<1731=1733,1732
<1734=1735
<1736=1737
<1771=1780,1779,1772
<1772=1776,1773
<1773=1775,1774
<1776=1778,1777
<1780=1781
<1781=1782
<1782=1786,1783
<1783=1785,1784
<1786=1788,1787
<1796=1811,1810,1797
<1797=1807,1804,1801,1798
<1798=1800,1799
<1801=1803,1802
<1804=1806,1805
<1807=1809,1808
<1811=1964,1812
<1812=1956,1952,1949,1813
<1813=1940,1929,1922,1885,1884,1883,1882,1881,1880,1879,1878,1877,1876,1875,1874,1873,1872,1871,1870,1869,1868,1867,1866,1865,1864,1863,1862,1861,1814
<1814=1847,1843,1836,1815
<1815=1826,1816
<1816=1817
<1817=1823,1818
<1818=1820,1819
<1820=1822,1821
<1823=1825,1824
<1826=1827
<1827=1833,1828
<1828=1830,1829
<1830=1832,1831
<1833=1835,1834
<1836=1840,1837
<1837=1839,1838
<1840=1842,1841
<1843=1844
<1844=1846,1845
<1847=1848
<1848=1855,1849
<1849=1854,1853,1850
<1850=1852,1851
<1855=1860,1859,1856
<1856=1858,1857
<1885=1914,1910,1907,1886
<1886=1887
<1887=1888
<1888=1903,1889
<1889=1890
<1890=1891
<1891=1901,1892
<1892=1897,1893
<1893=1894
<1894=1896,1895
<1897=1898
<1898=1900,1899
<1901=1902
<1903=1904
<1904=1906,1905
<1907=1909,1908
<1910=1911
<1911=1913,1912
<1914=1915
<1915=1916
<1916=1921,1920,1917
<1917=1919,1918
<1922=1923
<1923=1925,1924
<1925=1926
<1926=1928,1927
<1929=1930
<1930=1939,1938,1931
<1931=1937,1932
<1932=1936,1933
<1933=1935,1934
<1940=1941
<1941=1948,1947,1942
<1942=1946,1943
<1943=1945,1944
<1949=1951,1950
<1952=1953
<1953=1955,1954
<1956=1957
<1957=1958
<1958=1963,1962,1959
<1959=1961,1960
<1964=1965
<1965=1967,1966
<1991=2009,2008,1992
<1992=2005,2002,1999,1996,1993
<1993=1995,1994
<1996=1998,1997
<1999=2001,2000
<2002=2004,2003
<2005=2007,2006
<2009=2123,2116,2010
<2010=2108,2104,2101,2011
<2011=2094,2086,2020,2012
<2012=2013
<2013=2015,2014
<2015=2019,2016
<2016=2018,2017
<2020=2082,2021
<2021=2073,2064,2060,2038,2032,2026,2022
<2022=2023
<2023=2025,2024
<2026=2027
<2027=2029,2028
<2029=2031,2030
<2032=2033
<2033=2035,2034
<2035=2037,2036
<2038=2050,2039
<2039=2044,2040
<2040=2041
<2041=2043,2042
<2044=2045
<2045=2049,2046
<2046=2048,2047
<2050=2051
<2051=2057,2052
<2052=2054,2053
<2054=2056,2055
<2057=2059,2058
<2060=2061
<2061=2063,2062
<2064=2065
<2065=2072,2071,2066
<2066=2070,2067
<2067=2069,2068
<2073=2074
<2074=2081,2080,2075
<2075=2079,2076
<2076=2078,2077
<2082=2083
<2083=2085,2084
<2086=2087
<2087=2093,2088
<2088=2092,2089
<2089=2091,2090
<2094=2095
<2095=2100,2099,2096
<2096=2098,2097
<2101=2103,2102
<2104=2105
<2105=2107,2106
<2108=2109
<2109=2110
<2110=2115,2114,2111
<2111=2113,2112
<2116=2117
<2117=2122,2121,2118
<2118=2120,2119
<2123=2124
<2124=2129,2128,2125
<2125=2127,2126
<2150=2159,2158,2151
<2151=2155,2152
<2152=2154,2153
<2155=2157,2156
<2159=2325,2324,2322,2315,2301,2261,2233,2203,2187,2160
<2160=2161
<2161=2186,2162
<2162=2182,2163
<2163=2173,2164
<2164=2165
<2165=2167,2166
<2167=2168
<2168=2170,2169
<2170=2172,2171
<2173=2174
<2174=2176,2175
<2176=2177
<2177=2179,2178
<2179=2181,2180
<2182=2183
<2183=2185,2184
<2187=2188
<2188=2199,2189
<2189=2190
<2190=2191
<2191=2193,2192
<2193=2195,2194
<2195=2196
<2196=2198,2197
<2199=2200
<2200=2202,2201
<2203=2204
<2204=2231,2205
<2205=2229,2227,2220,2213,2206
<2206=2207
<2207=2209,2208
<2209=2210
<2210=2212,2211
<2213=2214
<2214=2216,2215
<2216=2217
<2217=2219,2218
<2220=2221
<2221=2223,2222
<2223=2224
<2224=2226,2225
<2227=2228
<2229=2230
<2231=2232
<2233=2234
<2234=2259,2235
<2235=2257,2250,2243,2236
<2236=2237
<2237=2239,2238
<2239=2240
<2240=2242,2241
<2243=2244
<2244=2246,2245
<2246=2247
<2247=2249,2248
<2250=2251
<2251=2253,2252
<2253=2254
<2254=2256,2255
<2257=2258
<2259=2260
<2261=2262
<2262=2300,2263
<2263=2299,2264
<2264=2298,2265
<2265=2297,2266
<2266=2291,2267
<2267=2290,2268
<2268=2289,2269
<2269=2283,2270
<2270=2277,2271
<2271=2273,2272
<2273=2274
<2274=2276,2275
<2277=2279,2278
<2279=2280
<2280=2282,2281
<2283=2285,2284
<2285=2286
<2286=2288,2287
<2291=2293,2292
<2293=2294
<2294=2296,2295
<2301=2302
<2302=2311,2303
<2303=2304
<2304=2305
<2305=2307,2306
<2307=2308
<2308=2310,2309
<2311=2312
<2312=2314,2313
<2315=2316
<2316=2321,2320,2317
<2317=2319,2318
<2322=2323
<2345=2354,2353,2346
<2346=2350,2347
<2347=2349,2348
<2350=2352,2351
<2354=2431,2430,2428,2427,2426,2424,2423,2422,2420,2413,2364,2362,2357,2355
<2355=2356
<2357=2358
<2358=2361,2360,2359
<2362=2363
<2364=2405,2396,2393,2365
<2365=2366
<2366=2367
<2367=2371,2368
<2368=2370,2369
<2371=2391,2372
<2372=2382,2373
<2373=2374
<2374=2376,2375
<2376=2377
<2377=2379,2378
<2379=2381,2380
<2382=2383
<2383=2385,2384
<2385=2386
<2386=2388,2387
<2388=2390,2389
<2391=2392
<2393=2395,2394
<2396=2397
<2397=2404,2398
<2398=2400,2399
<2400=2401
<2401=2403,2402
<2405=2406
<2406=2407
<2407=2412,2411,2408
<2408=2410,2409
<2413=2414
<2414=2419,2418,2415
<2415=2417,2416
<2420=2421
<2424=2425
<2428=2429
<2446=2455,2454,2447
<2447=2451,2448
<2448=2450,2449
<2451=2453,2452
<2455=2532,2531,2529,2528,2527,2525,2524,2523,2521,2514,2465,2463,2458,2456
<2456=2457
<2458=2459
<2459=2462,2461,2460
<2463=2464
<2465=2506,2497,2494,2466
<2466=2467
<2467=2468
<2468=2472,2469
<2469=2471,2470
<2472=2492,2473
<2473=2483,2474
<2474=2475
<2475=2477,2476
<2477=2478
<2478=2480,2479
<2480=2482,2481
<2483=2484
<2484=2486,2485
<2486=2487
<2487=2489,2488
<2489=2491,2490
<2492=2493
<2494=2496,2495
<2497=2498
<2498=2505,2499
<2499=2501,2500
<2501=2502
<2502=2504,2503
<2506=2507
<2507=2508
<2508=2513,2512,2509
<2509=2511,2510
<2514=2515
<2515=2520,2519,2516
<2516=2518,2517
<2521=2522
<2525=2526
<2529=2530
