>5	FunctionDef	Brush_Name (brush_t * b)
>6	ParameterList	brush_t * b
>7	Parameter	 
>8	Identifier	b
>9	ParameterType	brush_t *
>10	ReturnType	const char *
>11	CompoundStatement	 
>12	ReturnStatement	 
>13	Identifier	cBuff
>14	IfStatement	if ( g_qeglobals . m_bBrushPrimitMode )
>15	CompoundStatement	 
>16	ExpressionStatement	 
>17	CallExpression	Brush_SetEpair ( b , \"Name\" , cBuff )
>18	ArgumentList	b
>19	Argument	cBuff
>20	Identifier	cBuff
>21	Argument	\"Name\"
>22	PrimaryExpression	\"Name\"
>23	Argument	b
>24	Identifier	b
>25	Callee	Brush_SetEpair
>26	Identifier	Brush_SetEpair
>27	ExpressionStatement	 
>28	CallExpression	sprintf ( cBuff , \"Brush %i\" , b -> numberId )
>29	ArgumentList	cBuff
>30	Argument	b -> numberId
>31	PtrMemberAccess	b -> numberId
>32	Identifier	numberId
>33	Identifier	b
>34	Argument	\"Brush %i\"
>35	PrimaryExpression	\"Brush %i\"
>36	Argument	cBuff
>37	Identifier	cBuff
>38	Callee	sprintf
>39	Identifier	sprintf
>40	Condition	 
>41	MemberAccess	g_qeglobals . m_bBrushPrimitMode
>42	Identifier	m_bBrushPrimitMode
>43	Identifier	g_qeglobals
>44	ExpressionStatement	 
>45	AssignmentExpr	b -> numberId = g_nBrushId ++
>46	IncDecOp	g_nBrushId ++
>47	IncDec	++
>48	Identifier	g_nBrushId
>49	PtrMemberAccess	b -> numberId
>50	Identifier	numberId
>51	Identifier	b
>52	IdentifierDeclStatement	 
>53	IdentifierDecl	cBuff [ 1024 ]
>54	PrimaryExpression	1024
>55	Identifier	cBuff
>56	IdentifierDeclType	char [ 1024 ]
>57	Statement	 
>68	FunctionDef	Brush_Alloc ()
>69	ParameterList	 
>70	ReturnType	brush_t *
>71	CompoundStatement	 
>72	ReturnStatement	 
>73	Identifier	b
>74	IdentifierDeclStatement	 
>75	IdentifierDecl	* b = ( brush_t * ) qmalloc ( sizeof ( brush_t ) )
>76	AssignmentExpr	* b = ( brush_t * ) qmalloc ( sizeof ( brush_t ) )
>77	CastExpression	( brush_t * ) qmalloc ( sizeof ( brush_t ) )
>78	CallExpression	qmalloc ( sizeof ( brush_t ) )
>79	ArgumentList	sizeof ( brush_t )
>80	Argument	sizeof ( brush_t )
>81	SizeofExpr	sizeof ( brush_t )
>82	SizeofOperand	brush_t
>83	Sizeof	sizeof
>84	Callee	qmalloc
>85	Identifier	qmalloc
>86	CastTarget	brush_t *
>87	Identifier	b
>88	Identifier	b
>89	IdentifierDeclType	brush_t *
>95	FunctionDef	PrintWinding (winding_t * w)
>96	ParameterList	winding_t * w
>97	Parameter	 
>98	Identifier	w
>99	ParameterType	winding_t *
>100	ReturnType	void
>101	CompoundStatement	 
>102	ForStatement	for ( i = 0 ; i < w -> numpoints ; i ++ )
>103	ExpressionStatement	 
>104	CallExpression	printf ( \"(%5.2f, %5.2f, %5.2f)\n\" , w -> points [ i ] [ 0 ] , w -> points [ i ] [ 1 ] , w -> points [ i ] [ 2 ] )
>105	ArgumentList	\"(%5.2f, %5.2f, %5.2f)\n\"
>106	Argument	w -> points [ i ] [ 2 ]
>107	ArrayIndexing	w -> points [ i ] [ 2 ]
>108	PrimaryExpression	2
>109	ArrayIndexing	w -> points [ i ]
>110	Identifier	i
>111	PtrMemberAccess	w -> points
>112	Identifier	points
>113	Identifier	w
>114	Argument	w -> points [ i ] [ 1 ]
>115	ArrayIndexing	w -> points [ i ] [ 1 ]
>116	PrimaryExpression	1
>117	ArrayIndexing	w -> points [ i ]
>118	Identifier	i
>119	PtrMemberAccess	w -> points
>120	Identifier	points
>121	Identifier	w
>122	Argument	w -> points [ i ] [ 0 ]
>123	ArrayIndexing	w -> points [ i ] [ 0 ]
>124	PrimaryExpression	0
>125	ArrayIndexing	w -> points [ i ]
>126	Identifier	i
>127	PtrMemberAccess	w -> points
>128	Identifier	points
>129	Identifier	w
>130	Argument	\"(%5.2f, %5.2f, %5.2f)\n\"
>131	PrimaryExpression	\"(%5.2f, %5.2f, %5.2f)\n\"
>132	Callee	printf
>133	Identifier	printf
>134	IncDecOp	 
>135	IncDec	++
>136	Identifier	i
>137	Condition	 
>138	RelationalExpression	i < w -> numpoints
>139	PtrMemberAccess	w -> numpoints
>140	Identifier	numpoints
>141	Identifier	w
>142	Identifier	i
>143	ForInit	 
>144	AssignmentExpr	i = 0
>145	PrimaryExpression	0
>146	Identifier	i
>147	ExpressionStatement	 
>148	CallExpression	printf ( \"-------------\n\" )
>149	ArgumentList	\"-------------\n\"
>150	Argument	\"-------------\n\"
>151	PrimaryExpression	\"-------------\n\"
>152	Callee	printf
>153	Identifier	printf
>154	IdentifierDeclStatement	 
>155	IdentifierDecl	i
>156	Identifier	i
>157	IdentifierDeclType	int
>172	FunctionDef	PrintPlane (plane_t * p)
>173	ParameterList	plane_t * p
>174	Parameter	 
>175	Identifier	p
>176	ParameterType	plane_t *
>177	ReturnType	void
>178	CompoundStatement	 
>179	ExpressionStatement	 
>180	CallExpression	printf ( \"(%5.2f, %5.2f, %5.2f) 
>181	ArgumentList	\"(%5.2f, %5.2f, %5.2f) 
>182	Argument	p -> dist
>183	PtrMemberAccess	p -> dist
>184	Identifier	dist
>185	Identifier	p
>186	Argument	p -> normal [ 2 ]
>187	ArrayIndexing	p -> normal [ 2 ]
>188	PrimaryExpression	2
>189	PtrMemberAccess	p -> normal
>190	Identifier	normal
>191	Identifier	p
>192	Argument	p -> normal [ 1 ]
>193	ArrayIndexing	p -> normal [ 1 ]
>194	PrimaryExpression	1
>195	PtrMemberAccess	p -> normal
>196	Identifier	normal
>197	Identifier	p
>198	Argument	p -> normal [ 0 ]
>199	ArrayIndexing	p -> normal [ 0 ]
>200	PrimaryExpression	0
>201	PtrMemberAccess	p -> normal
>202	Identifier	normal
>203	Identifier	p
>204	Argument	\"(%5.2f, %5.2f, %5.2f) 
>205	PrimaryExpression	\"(%5.2f, %5.2f, %5.2f) 
>206	Callee	printf
>207	Identifier	printf
>217	FunctionDef	PrintVector (vec3_t v)
>218	ParameterList	vec3_t v
>219	Parameter	 
>220	Identifier	v
>221	ParameterType	vec3_t
>222	ReturnType	void
>223	CompoundStatement	 
>224	ExpressionStatement	 
>225	CallExpression	printf ( \"(%5.2f, %5.2f, %5.2f)\n\" , v [ 0 ] , v [ 1 ] , v [ 2 ] )
>226	ArgumentList	\"(%5.2f, %5.2f, %5.2f)\n\"
>227	Argument	v [ 2 ]
>228	ArrayIndexing	v [ 2 ]
>229	PrimaryExpression	2
>230	Identifier	v
>231	Argument	v [ 1 ]
>232	ArrayIndexing	v [ 1 ]
>233	PrimaryExpression	1
>234	Identifier	v
>235	Argument	v [ 0 ]
>236	ArrayIndexing	v [ 0 ]
>237	PrimaryExpression	0
>238	Identifier	v
>239	Argument	\"(%5.2f, %5.2f, %5.2f)\n\"
>240	PrimaryExpression	\"(%5.2f, %5.2f, %5.2f)\n\"
>241	Callee	printf
>242	Identifier	printf
>250	FunctionDef	TextureAxisFromPlane (plane_t * pln , vec3_t xv , vec3_t yv)
>251	ParameterList	plane_t * pln , vec3_t xv , vec3_t yv
>252	Parameter	 
>253	Identifier	yv
>254	ParameterType	vec3_t
>255	Parameter	 
>256	Identifier	xv
>257	ParameterType	vec3_t
>258	Parameter	 
>259	Identifier	pln
>260	ParameterType	plane_t *
>261	ReturnType	void
>262	CompoundStatement	 
>263	ExpressionStatement	 
>264	CallExpression	VectorCopy ( baseaxis [ bestaxis * 3 + 2 ] , yv )
>265	ArgumentList	baseaxis [ bestaxis * 3 + 2 ]
>266	Argument	yv
>267	Identifier	yv
>268	Argument	baseaxis [ bestaxis * 3 + 2 ]
>269	ArrayIndexing	baseaxis [ bestaxis * 3 + 2 ]
>270	AdditiveExpression	bestaxis * 3 + 2
>271	PrimaryExpression	2
>272	MultiplicativeExpression	bestaxis * 3
>273	PrimaryExpression	3
>274	Identifier	bestaxis
>275	Identifier	baseaxis
>276	Callee	VectorCopy
>277	Identifier	VectorCopy
>278	ExpressionStatement	 
>279	CallExpression	VectorCopy ( baseaxis [ bestaxis * 3 + 1 ] , xv )
>280	ArgumentList	baseaxis [ bestaxis * 3 + 1 ]
>281	Argument	xv
>282	Identifier	xv
>283	Argument	baseaxis [ bestaxis * 3 + 1 ]
>284	ArrayIndexing	baseaxis [ bestaxis * 3 + 1 ]
>285	AdditiveExpression	bestaxis * 3 + 1
>286	PrimaryExpression	1
>287	MultiplicativeExpression	bestaxis * 3
>288	PrimaryExpression	3
>289	Identifier	bestaxis
>290	Identifier	baseaxis
>291	Callee	VectorCopy
>292	Identifier	VectorCopy
>293	ForStatement	for ( i = 0 ; i < 6 ; i ++ )
>294	CompoundStatement	 
>295	IfStatement	if ( dot > best )
>296	CompoundStatement	 
>297	ExpressionStatement	 
>298	AssignmentExpr	bestaxis = i
>299	Identifier	i
>300	Identifier	bestaxis
>301	ExpressionStatement	 
>302	AssignmentExpr	best = dot
>303	Identifier	dot
>304	Identifier	best
>305	Condition	 
>306	RelationalExpression	dot > best
>307	Identifier	best
>308	Identifier	dot
>309	ExpressionStatement	 
>310	AssignmentExpr	dot = DotProduct ( pln -> normal , baseaxis [ i * 3 ] )
>311	CallExpression	DotProduct ( pln -> normal , baseaxis [ i * 3 ] )
>312	ArgumentList	pln -> normal
>313	Argument	baseaxis [ i * 3 ]
>314	ArrayIndexing	baseaxis [ i * 3 ]
>315	MultiplicativeExpression	i * 3
>316	PrimaryExpression	3
>317	Identifier	i
>318	Identifier	baseaxis
>319	Argument	pln -> normal
>320	PtrMemberAccess	pln -> normal
>321	Identifier	normal
>322	Identifier	pln
>323	Callee	DotProduct
>324	Identifier	DotProduct
>325	Identifier	dot
>326	IncDecOp	 
>327	IncDec	++
>328	Identifier	i
>329	Condition	 
>330	RelationalExpression	i < 6
>331	PrimaryExpression	6
>332	Identifier	i
>333	ForInit	 
>334	AssignmentExpr	i = 0
>335	PrimaryExpression	0
>336	Identifier	i
>337	ExpressionStatement	 
>338	AssignmentExpr	bestaxis = 0
>339	PrimaryExpression	0
>340	Identifier	bestaxis
>341	ExpressionStatement	 
>342	AssignmentExpr	best = 0
>343	PrimaryExpression	0
>344	Identifier	best
>345	IdentifierDeclStatement	 
>346	IdentifierDecl	i
>347	Identifier	i
>348	IdentifierDeclType	int
>349	IdentifierDeclStatement	 
>350	IdentifierDecl	best
>351	Identifier	best
>352	IdentifierDeclType	float
>353	IdentifierDecl	dot
>354	Identifier	dot
>355	IdentifierDeclType	float
>356	IdentifierDeclStatement	 
>357	IdentifierDecl	bestaxis
>358	Identifier	bestaxis
>359	IdentifierDeclType	int
>379	FunctionDef	SetShadeForPlane (plane_t * p)
>380	ParameterList	plane_t * p
>381	Parameter	 
>382	Identifier	p
>383	ParameterType	plane_t *
>384	ReturnType	float
>385	CompoundStatement	 
>386	ReturnStatement	 
>387	Identifier	f
>388	ExpressionStatement	 
>389	AssignmentExpr	f = ( lightaxis [ 0 ] + lightaxis [ 1 ] + lightaxis [ 2 ] ) / 3
>390	MultiplicativeExpression	( lightaxis [ 0 ] + lightaxis [ 1 ] + lightaxis [ 2 ] ) / 3
>391	PrimaryExpression	3
>392	AdditiveExpression	lightaxis [ 0 ] + lightaxis [ 1 ] + lightaxis [ 2 ]
>393	AdditiveExpression	lightaxis [ 1 ] + lightaxis [ 2 ]
>394	ArrayIndexing	lightaxis [ 2 ]
>395	PrimaryExpression	2
>396	Identifier	lightaxis
>397	ArrayIndexing	lightaxis [ 1 ]
>398	PrimaryExpression	1
>399	Identifier	lightaxis
>400	ArrayIndexing	lightaxis [ 0 ]
>401	PrimaryExpression	0
>402	Identifier	lightaxis
>403	Identifier	f
>404	ForStatement	for ( i = 0 ; i < 3 ; i ++ )
>405	IfStatement	if ( fabs ( p -> normal [ i ] ) < 0.1 )
>406	CompoundStatement	 
>407	ReturnStatement	 
>408	Identifier	f
>409	ExpressionStatement	 
>410	AssignmentExpr	f = ( lightaxis [ ( i + 1 ) % 3 ] + lightaxis [ ( i + 2 ) % 3 ] ) / 2
>411	MultiplicativeExpression	( lightaxis [ ( i + 1 ) % 3 ] + lightaxis [ ( i + 2 ) % 3 ] ) / 2
>412	PrimaryExpression	2
>413	AdditiveExpression	lightaxis [ ( i + 1 ) % 3 ] + lightaxis [ ( i + 2 ) % 3 ]
>414	ArrayIndexing	lightaxis [ ( i + 2 ) % 3 ]
>415	MultiplicativeExpression	( i + 2 ) % 3
>416	PrimaryExpression	3
>417	AdditiveExpression	i + 2
>418	PrimaryExpression	2
>419	Identifier	i
>420	Identifier	lightaxis
>421	ArrayIndexing	lightaxis [ ( i + 1 ) % 3 ]
>422	MultiplicativeExpression	( i + 1 ) % 3
>423	PrimaryExpression	3
>424	AdditiveExpression	i + 1
>425	PrimaryExpression	1
>426	Identifier	i
>427	Identifier	lightaxis
>428	Identifier	f
>429	Condition	 
>430	RelationalExpression	fabs ( p -> normal [ i ] ) < 0.1
>431	PrimaryExpression	0.1
>432	CallExpression	fabs ( p -> normal [ i ] )
>433	ArgumentList	p -> normal [ i ]
>434	Argument	p -> normal [ i ]
>435	ArrayIndexing	p -> normal [ i ]
>436	Identifier	i
>437	PtrMemberAccess	p -> normal
>438	Identifier	normal
>439	Identifier	p
>440	Callee	fabs
>441	Identifier	fabs
>442	IncDecOp	 
>443	IncDec	++
>444	Identifier	i
>445	Condition	 
>446	RelationalExpression	i < 3
>447	PrimaryExpression	3
>448	Identifier	i
>449	ForInit	 
>450	AssignmentExpr	i = 0
>451	PrimaryExpression	0
>452	Identifier	i
>453	ForStatement	for ( i = 0 ; i < 3 ; i ++ )
>454	IfStatement	if ( fabs ( p -> normal [ i ] ) > 0.9 )
>455	CompoundStatement	 
>456	ReturnStatement	 
>457	Identifier	f
>458	ExpressionStatement	 
>459	AssignmentExpr	f = lightaxis [ i ]
>460	ArrayIndexing	lightaxis [ i ]
>461	Identifier	i
>462	Identifier	lightaxis
>463	Identifier	f
>464	Condition	 
>465	RelationalExpression	fabs ( p -> normal [ i ] ) > 0.9
>466	PrimaryExpression	0.9
>467	CallExpression	fabs ( p -> normal [ i ] )
>468	ArgumentList	p -> normal [ i ]
>469	Argument	p -> normal [ i ]
>470	ArrayIndexing	p -> normal [ i ]
>471	Identifier	i
>472	PtrMemberAccess	p -> normal
>473	Identifier	normal
>474	Identifier	p
>475	Callee	fabs
>476	Identifier	fabs
>477	IncDecOp	 
>478	IncDec	++
>479	Identifier	i
>480	Condition	 
>481	RelationalExpression	i < 3
>482	PrimaryExpression	3
>483	Identifier	i
>484	ForInit	 
>485	AssignmentExpr	i = 0
>486	PrimaryExpression	0
>487	Identifier	i
>488	IdentifierDeclStatement	 
>489	IdentifierDecl	f
>490	Identifier	f
>491	IdentifierDeclType	float
>492	IdentifierDeclStatement	 
>493	IdentifierDecl	i
>494	Identifier	i
>495	IdentifierDeclType	int
>514	FunctionDef	Face_Alloc ()
>515	ParameterList	 
>516	ReturnType	face_t *
>517	CompoundStatement	 
>518	ReturnStatement	 
>519	Identifier	f
>520	ExpressionStatement	 
>521	CallExpression	g_SurfaceTable . m_pfnTexdefAlloc ( f )
>522	ArgumentList	f
>523	Argument	f
>524	Identifier	f
>525	Callee	g_SurfaceTable . m_pfnTexdefAlloc
>526	MemberAccess	g_SurfaceTable . m_pfnTexdefAlloc
>527	Identifier	m_pfnTexdefAlloc
>528	Identifier	g_SurfaceTable
>529	Statement	 
>530	Statement	 
>531	Statement	 
>532	Statement	 
>533	Statement	 
>534	Statement	 
>535	Statement	 
>536	Statement	 
>537	IfStatement	if ( g_qeglobals . bSurfacePropertiesPlugin )
>538	Statement	 
>539	Condition	 
>540	MemberAccess	g_qeglobals . bSurfacePropertiesPlugin
>541	Identifier	bSurfacePropertiesPlugin
>542	Identifier	g_qeglobals
>543	IdentifierDeclStatement	 
>544	IdentifierDecl	* f = ( face_t * ) qmalloc ( sizeof ( * f ) )
>545	AssignmentExpr	* f = ( face_t * ) qmalloc ( sizeof ( * f ) )
>546	CastExpression	( face_t * ) qmalloc ( sizeof ( * f ) )
>547	CallExpression	qmalloc ( sizeof ( * f ) )
>548	ArgumentList	sizeof ( * f )
>549	Argument	sizeof ( * f )
>550	SizeofExpr	sizeof ( * f )
>551	UnaryOp	* f
>552	Identifier	f
>553	UnaryOperator	*
>554	Sizeof	sizeof
>555	Callee	qmalloc
>556	Identifier	qmalloc
>557	CastTarget	face_t *
>558	Identifier	f
>559	Identifier	f
>560	IdentifierDeclType	face_t *
>570	FunctionDef	Face_Free (face_t * f)
>571	ParameterList	face_t * f
>572	Parameter	 
>573	Identifier	f
>574	ParameterType	face_t *
>575	ReturnType	void
>576	CompoundStatement	 
>577	ExpressionStatement	 
>578	CallExpression	free ( f )
>579	ArgumentList	f
>580	Argument	f
>581	Identifier	f
>582	Callee	free
>583	Identifier	free
>584	ExpressionStatement	 
>585	ExpressionStatement	 
>586	CallExpression	f -> texdef . ~texdef_t ( )
>587	ArgumentList	 
>588	Callee	f -> texdef . ~texdef_t
>589	MemberAccess	f -> texdef . ~texdef_t
>590	Identifier	~texdef_t
>591	PtrMemberAccess	f -> texdef
>592	Identifier	texdef
>593	Identifier	f
>594	IfStatement	if ( g_qeglobals . bSurfacePropertiesPlugin )
>595	CompoundStatement	 
>596	IfStatement	if ( ! f -> pData )
>597	ElseStatement	else
>598	ExpressionStatement	 
>599	CallExpression	GETPLUGINTEXDEF ( f ) -> DecRef ( )
>600	ArgumentList	 
>601	Callee	GETPLUGINTEXDEF ( f ) -> DecRef
>602	PtrMemberAccess	GETPLUGINTEXDEF ( f ) -> DecRef
>603	Identifier	DecRef
>604	CallExpression	GETPLUGINTEXDEF ( f )
>605	ArgumentList	f
>606	Argument	f
>607	Identifier	f
>608	Callee	GETPLUGINTEXDEF
>609	Identifier	GETPLUGINTEXDEF
>610	CompoundStatement	 
>611	ExpressionStatement	 
>612	CallExpression	Sys_Printf ( \"WARNING
>613	ArgumentList	\"WARNING
>614	Argument	\"WARNING
>615	PrimaryExpression	\"WARNING
>616	Callee	Sys_Printf
>617	Identifier	Sys_Printf
>618	Condition	 
>619	UnaryOp	! f -> pData
>620	PtrMemberAccess	f -> pData
>621	Identifier	pData
>622	Identifier	f
>623	UnaryOperator	!
>624	Condition	 
>625	MemberAccess	g_qeglobals . bSurfacePropertiesPlugin
>626	Identifier	bSurfacePropertiesPlugin
>627	Identifier	g_qeglobals
>628	IfStatement	if ( f -> face_winding )
>629	CompoundStatement	 
>630	ExpressionStatement	 
>631	AssignmentExpr	f -> face_winding = 0
>632	PrimaryExpression	0
>633	PtrMemberAccess	f -> face_winding
>634	Identifier	face_winding
>635	Identifier	f
>636	ExpressionStatement	 
>637	CallExpression	free ( f -> face_winding )
>638	ArgumentList	f -> face_winding
>639	Argument	f -> face_winding
>640	PtrMemberAccess	f -> face_winding
>641	Identifier	face_winding
>642	Identifier	f
>643	Callee	free
>644	Identifier	free
>645	Condition	 
>646	PtrMemberAccess	f -> face_winding
>647	Identifier	face_winding
>648	Identifier	f
>649	ExpressionStatement	 
>650	CallExpression	assert ( f != 0 )
>651	ArgumentList	f != 0
>652	Argument	f != 0
>653	EqualityExpression	f != 0
>654	PrimaryExpression	0
>655	Identifier	f
>656	Callee	assert
>657	Identifier	assert
>669	FunctionDef	Face_Clone (face_t * f)
>670	ParameterList	face_t * f
>671	Parameter	 
>672	Identifier	f
>673	ParameterType	face_t *
>674	ReturnType	face_t *
>675	CompoundStatement	 
>676	ReturnStatement	 
>677	Identifier	n
>678	ExpressionStatement	 
>679	CallExpression	memcpy ( n -> planepts , f -> planepts , sizeof ( n -> planepts ) )
>680	ArgumentList	n -> planepts
>681	Argument	sizeof ( n -> planepts )
>682	SizeofExpr	sizeof ( n -> planepts )
>683	PtrMemberAccess	n -> planepts
>684	Identifier	planepts
>685	Identifier	n
>686	Sizeof	sizeof
>687	Argument	f -> planepts
>688	PtrMemberAccess	f -> planepts
>689	Identifier	planepts
>690	Identifier	f
>691	Argument	n -> planepts
>692	PtrMemberAccess	n -> planepts
>693	Identifier	planepts
>694	Identifier	n
>695	Callee	memcpy
>696	Identifier	memcpy
>697	ExpressionStatement	 
>698	AssignmentExpr	n -> texdef = f -> texdef
>699	PtrMemberAccess	f -> texdef
>700	Identifier	texdef
>701	Identifier	f
>702	PtrMemberAccess	n -> texdef
>703	Identifier	texdef
>704	Identifier	n
>705	ExpressionStatement	 
>706	AssignmentExpr	n = Face_Alloc ( )
>707	CallExpression	Face_Alloc ( )
>708	ArgumentList	 
>709	Callee	Face_Alloc
>710	Identifier	Face_Alloc
>711	Identifier	n
>712	IdentifierDeclStatement	 
>713	IdentifierDecl	* n
>714	Identifier	n
>715	IdentifierDeclType	face_t *
>728	FunctionDef	Face_FullClone (face_t * f)
>729	ParameterList	face_t * f
>730	Parameter	 
>731	Identifier	f
>732	ParameterType	face_t *
>733	ReturnType	face_t *
>734	CompoundStatement	 
>735	ReturnStatement	 
>736	Identifier	n
>737	ExpressionStatement	 
>738	AssignmentExpr	n -> d_texture = Texture_ForName ( n -> texdef . name )
>739	CallExpression	Texture_ForName ( n -> texdef . name )
>740	ArgumentList	n -> texdef . name
>741	Argument	n -> texdef . name
>742	MemberAccess	n -> texdef . name
>743	Identifier	name
>744	PtrMemberAccess	n -> texdef
>745	Identifier	texdef
>746	Identifier	n
>747	Callee	Texture_ForName
>748	Identifier	Texture_ForName
>749	PtrMemberAccess	n -> d_texture
>750	Identifier	d_texture
>751	Identifier	n
>752	IfStatement	if ( f -> face_winding )
>753	ElseStatement	else
>754	ExpressionStatement	 
>755	AssignmentExpr	n -> face_winding = NULL
>756	Identifier	NULL
>757	PtrMemberAccess	n -> face_winding
>758	Identifier	face_winding
>759	Identifier	n
>760	ExpressionStatement	 
>761	AssignmentExpr	n -> face_winding = Winding_Clone ( f -> face_winding )
>762	CallExpression	Winding_Clone ( f -> face_winding )
>763	ArgumentList	f -> face_winding
>764	Argument	f -> face_winding
>765	PtrMemberAccess	f -> face_winding
>766	Identifier	face_winding
>767	Identifier	f
>768	Callee	Winding_Clone
>769	Identifier	Winding_Clone
>770	PtrMemberAccess	n -> face_winding
>771	Identifier	face_winding
>772	Identifier	n
>773	Condition	 
>774	PtrMemberAccess	f -> face_winding
>775	Identifier	face_winding
>776	Identifier	f
>777	ExpressionStatement	 
>778	CallExpression	memcpy ( & n -> plane , & f -> plane , sizeof ( plane_t ) )
>779	ArgumentList	& n -> plane
>780	Argument	sizeof ( plane_t )
>781	SizeofExpr	sizeof ( plane_t )
>782	SizeofOperand	plane_t
>783	Sizeof	sizeof
>784	Argument	& f -> plane
>785	UnaryOp	& f -> plane
>786	PtrMemberAccess	f -> plane
>787	Identifier	plane
>788	Identifier	f
>789	UnaryOperator	&
>790	Argument	& n -> plane
>791	UnaryOp	& n -> plane
>792	PtrMemberAccess	n -> plane
>793	Identifier	plane
>794	Identifier	n
>795	UnaryOperator	&
>796	Callee	memcpy
>797	Identifier	memcpy
>798	ExpressionStatement	 
>799	CallExpression	memcpy ( n -> planepts , f -> planepts , sizeof ( n -> planepts ) )
>800	ArgumentList	n -> planepts
>801	Argument	sizeof ( n -> planepts )
>802	SizeofExpr	sizeof ( n -> planepts )
>803	PtrMemberAccess	n -> planepts
>804	Identifier	planepts
>805	Identifier	n
>806	Sizeof	sizeof
>807	Argument	f -> planepts
>808	PtrMemberAccess	f -> planepts
>809	Identifier	planepts
>810	Identifier	f
>811	Argument	n -> planepts
>812	PtrMemberAccess	n -> planepts
>813	Identifier	planepts
>814	Identifier	n
>815	Callee	memcpy
>816	Identifier	memcpy
>817	ExpressionStatement	 
>818	AssignmentExpr	n -> texdef = f -> texdef
>819	PtrMemberAccess	f -> texdef
>820	Identifier	texdef
>821	Identifier	f
>822	PtrMemberAccess	n -> texdef
>823	Identifier	texdef
>824	Identifier	n
>825	ExpressionStatement	 
>826	AssignmentExpr	n = Face_Alloc ( )
>827	CallExpression	Face_Alloc ( )
>828	ArgumentList	 
>829	Callee	Face_Alloc
>830	Identifier	Face_Alloc
>831	Identifier	n
>832	IdentifierDeclStatement	 
>833	IdentifierDecl	* n
>834	Identifier	n
>835	IdentifierDeclType	face_t *
>859	FunctionDef	Clamp (float & f , int nClamp)
>860	ParameterList	float & f , int nClamp
>861	Parameter	 
>862	Identifier	nClamp
>863	ParameterType	int
>864	Parameter	 
>865	Identifier	f
>866	ParameterType	float &
>867	ReturnType	void
>868	CompoundStatement	 
>869	ExpressionStatement	 
>870	AssignmentExpr	f += fFrac
>871	Identifier	fFrac
>872	Identifier	f
>873	ExpressionStatement	 
>874	AssignmentExpr	f = static_cast < int > ( f ) % nClamp
>875	RelationalExpression	static_cast < int > ( f ) % nClamp
>876	RelationalExpression	int > ( f ) % nClamp
>877	MultiplicativeExpression	( f ) % nClamp
>878	Identifier	nClamp
>879	Identifier	f
>880	Identifier	int
>881	Identifier	static_cast
>882	Identifier	f
>883	IdentifierDeclStatement	 
>884	IdentifierDecl	fFrac = f - static_cast < int > ( f )
>885	AssignmentExpr	fFrac = f - static_cast < int > ( f )
>886	RelationalExpression	f - static_cast < int > ( f )
>887	RelationalExpression	int > ( f )
>888	Identifier	f
>889	Identifier	int
>890	AdditiveExpression	f - static_cast
>891	Identifier	static_cast
>892	Identifier	f
>893	Identifier	fFrac
>894	Identifier	fFrac
>895	IdentifierDeclType	float
>904	FunctionDef	Face_MoveTexture (face_t * f , vec3_t delta)
>905	ParameterList	face_t * f , vec3_t delta
>906	Parameter	 
>907	Identifier	delta
>908	ParameterType	vec3_t
>909	Parameter	 
>910	Identifier	f
>911	ParameterType	face_t *
>912	ReturnType	void
>913	CompoundStatement	 
>914	IfStatement	if ( g_qeglobals . m_bBrushPrimitMode )
>915	ElseStatement	else
>916	CompoundStatement	 
>917	ExpressionStatement	 
>918	CallExpression	Clamp ( f -> texdef . shift [ 1 ] , f -> d_texture -> height )
>919	ArgumentList	f -> texdef . shift [ 1 ]
>920	Argument	f -> d_texture -> height
>921	PtrMemberAccess	f -> d_texture -> height
>922	Identifier	height
>923	PtrMemberAccess	f -> d_texture
>924	Identifier	d_texture
>925	Identifier	f
>926	Argument	f -> texdef . shift [ 1 ]
>927	ArrayIndexing	f -> texdef . shift [ 1 ]
>928	PrimaryExpression	1
>929	MemberAccess	f -> texdef . shift
>930	Identifier	shift
>931	PtrMemberAccess	f -> texdef
>932	Identifier	texdef
>933	Identifier	f
>934	Callee	Clamp
>935	Identifier	Clamp
>936	ExpressionStatement	 
>937	CallExpression	Clamp ( f -> texdef . shift [ 0 ] , f -> d_texture -> width )
>938	ArgumentList	f -> texdef . shift [ 0 ]
>939	Argument	f -> d_texture -> width
>940	PtrMemberAccess	f -> d_texture -> width
>941	Identifier	width
>942	PtrMemberAccess	f -> d_texture
>943	Identifier	d_texture
>944	Identifier	f
>945	Argument	f -> texdef . shift [ 0 ]
>946	ArrayIndexing	f -> texdef . shift [ 0 ]
>947	PrimaryExpression	0
>948	MemberAccess	f -> texdef . shift
>949	Identifier	shift
>950	PtrMemberAccess	f -> texdef
>951	Identifier	texdef
>952	Identifier	f
>953	Callee	Clamp
>954	Identifier	Clamp
>955	ExpressionStatement	 
>956	AssignmentExpr	f -> texdef . shift [ 1 ] -= vShift [ 1 ] / f -> texdef . scale [ 1 ]
>957	MultiplicativeExpression	vShift [ 1 ] / f -> texdef . scale [ 1 ]
>958	ArrayIndexing	f -> texdef . scale [ 1 ]
>959	PrimaryExpression	1
>960	MemberAccess	f -> texdef . scale
>961	Identifier	scale
>962	PtrMemberAccess	f -> texdef
>963	Identifier	texdef
>964	Identifier	f
>965	ArrayIndexing	vShift [ 1 ]
>966	PrimaryExpression	1
>967	Identifier	vShift
>968	ArrayIndexing	f -> texdef . shift [ 1 ]
>969	PrimaryExpression	1
>970	MemberAccess	f -> texdef . shift
>971	Identifier	shift
>972	PtrMemberAccess	f -> texdef
>973	Identifier	texdef
>974	Identifier	f
>975	ExpressionStatement	 
>976	AssignmentExpr	f -> texdef . shift [ 0 ] -= vShift [ 0 ] / f -> texdef . scale [ 0 ]
>977	MultiplicativeExpression	vShift [ 0 ] / f -> texdef . scale [ 0 ]
>978	ArrayIndexing	f -> texdef . scale [ 0 ]
>979	PrimaryExpression	0
>980	MemberAccess	f -> texdef . scale
>981	Identifier	scale
>982	PtrMemberAccess	f -> texdef
>983	Identifier	texdef
>984	Identifier	f
>985	ArrayIndexing	vShift [ 0 ]
>986	PrimaryExpression	0
>987	Identifier	vShift
>988	ArrayIndexing	f -> texdef . shift [ 0 ]
>989	PrimaryExpression	0
>990	MemberAccess	f -> texdef . shift
>991	Identifier	shift
>992	PtrMemberAccess	f -> texdef
>993	Identifier	texdef
>994	Identifier	f
>995	IfStatement	if ( ! f -> texdef . scale [ 1 ] )
>996	ExpressionStatement	 
>997	AssignmentExpr	f -> texdef . scale [ 1 ] = 1
>998	PrimaryExpression	1
>999	ArrayIndexing	f -> texdef . scale [ 1 ]
>1000	PrimaryExpression	1
>1001	MemberAccess	f -> texdef . scale
>1002	Identifier	scale
>1003	PtrMemberAccess	f -> texdef
>1004	Identifier	texdef
>1005	Identifier	f
>1006	Condition	 
>1007	UnaryOp	! f -> texdef . scale [ 1 ]
>1008	ArrayIndexing	f -> texdef . scale [ 1 ]
>1009	PrimaryExpression	1
>1010	MemberAccess	f -> texdef . scale
>1011	Identifier	scale
>1012	PtrMemberAccess	f -> texdef
>1013	Identifier	texdef
>1014	Identifier	f
>1015	UnaryOperator	!
>1016	IfStatement	if ( ! f -> texdef . scale [ 0 ] )
>1017	ExpressionStatement	 
>1018	AssignmentExpr	f -> texdef . scale [ 0 ] = 1
>1019	PrimaryExpression	1
>1020	ArrayIndexing	f -> texdef . scale [ 0 ]
>1021	PrimaryExpression	0
>1022	MemberAccess	f -> texdef . scale
>1023	Identifier	scale
>1024	PtrMemberAccess	f -> texdef
>1025	Identifier	texdef
>1026	Identifier	f
>1027	Condition	 
>1028	UnaryOp	! f -> texdef . scale [ 0 ]
>1029	ArrayIndexing	f -> texdef . scale [ 0 ]
>1030	PrimaryExpression	0
>1031	MemberAccess	f -> texdef . scale
>1032	Identifier	scale
>1033	PtrMemberAccess	f -> texdef
>1034	Identifier	texdef
>1035	Identifier	f
>1036	UnaryOperator	!
>1037	ExpressionStatement	 
>1038	AssignmentExpr	vShift [ 1 ] = vDP [ 0 ] * s + vDP [ 1 ] * c
>1039	AdditiveExpression	vDP [ 0 ] * s + vDP [ 1 ] * c
>1040	MultiplicativeExpression	vDP [ 1 ] * c
>1041	Identifier	c
>1042	ArrayIndexing	vDP [ 1 ]
>1043	PrimaryExpression	1
>1044	Identifier	vDP
>1045	MultiplicativeExpression	vDP [ 0 ] * s
>1046	Identifier	s
>1047	ArrayIndexing	vDP [ 0 ]
>1048	PrimaryExpression	0
>1049	Identifier	vDP
>1050	ArrayIndexing	vShift [ 1 ]
>1051	PrimaryExpression	1
>1052	Identifier	vShift
>1053	ExpressionStatement	 
>1054	AssignmentExpr	vShift [ 0 ] = vDP [ 0 ] * c - vDP [ 1 ] * s
>1055	AdditiveExpression	vDP [ 0 ] * c - vDP [ 1 ] * s
>1056	MultiplicativeExpression	vDP [ 1 ] * s
>1057	Identifier	s
>1058	ArrayIndexing	vDP [ 1 ]
>1059	PrimaryExpression	1
>1060	Identifier	vDP
>1061	MultiplicativeExpression	vDP [ 0 ] * c
>1062	Identifier	c
>1063	ArrayIndexing	vDP [ 0 ]
>1064	PrimaryExpression	0
>1065	Identifier	vDP
>1066	ArrayIndexing	vShift [ 0 ]
>1067	PrimaryExpression	0
>1068	Identifier	vShift
>1069	IdentifierDeclStatement	 
>1070	IdentifierDecl	s = sin ( fAngle )
>1071	AssignmentExpr	s = sin ( fAngle )
>1072	CallExpression	sin ( fAngle )
>1073	ArgumentList	fAngle
>1074	Argument	fAngle
>1075	Identifier	fAngle
>1076	Callee	sin
>1077	Identifier	sin
>1078	Identifier	s
>1079	Identifier	s
>1080	IdentifierDeclType	double
>1081	IdentifierDeclStatement	 
>1082	IdentifierDecl	c = cos ( fAngle )
>1083	AssignmentExpr	c = cos ( fAngle )
>1084	CallExpression	cos ( fAngle )
>1085	ArgumentList	fAngle
>1086	Argument	fAngle
>1087	Identifier	fAngle
>1088	Callee	cos
>1089	Identifier	cos
>1090	Identifier	c
>1091	Identifier	c
>1092	IdentifierDeclType	double
>1093	IdentifierDeclStatement	 
>1094	IdentifierDecl	fAngle = f -> texdef . rotate / 180 * Q_PI
>1095	AssignmentExpr	fAngle = f -> texdef . rotate / 180 * Q_PI
>1096	MultiplicativeExpression	f -> texdef . rotate / 180 * Q_PI
>1097	MultiplicativeExpression	180 * Q_PI
>1098	Identifier	Q_PI
>1099	PrimaryExpression	180
>1100	MemberAccess	f -> texdef . rotate
>1101	Identifier	rotate
>1102	PtrMemberAccess	f -> texdef
>1103	Identifier	texdef
>1104	Identifier	f
>1105	Identifier	fAngle
>1106	Identifier	fAngle
>1107	IdentifierDeclType	double
>1108	ExpressionStatement	 
>1109	AssignmentExpr	vDP [ 1 ] = DotProduct ( delta , vY )
>1110	CallExpression	DotProduct ( delta , vY )
>1111	ArgumentList	delta
>1112	Argument	vY
>1113	Identifier	vY
>1114	Argument	delta
>1115	Identifier	delta
>1116	Callee	DotProduct
>1117	Identifier	DotProduct
>1118	ArrayIndexing	vDP [ 1 ]
>1119	PrimaryExpression	1
>1120	Identifier	vDP
>1121	ExpressionStatement	 
>1122	AssignmentExpr	vDP [ 0 ] = DotProduct ( delta , vX )
>1123	CallExpression	DotProduct ( delta , vX )
>1124	ArgumentList	delta
>1125	Argument	vX
>1126	Identifier	vX
>1127	Argument	delta
>1128	Identifier	delta
>1129	Callee	DotProduct
>1130	Identifier	DotProduct
>1131	ArrayIndexing	vDP [ 0 ]
>1132	PrimaryExpression	0
>1133	Identifier	vDP
>1134	IdentifierDeclStatement	 
>1135	IdentifierDecl	vShift
>1136	Identifier	vShift
>1137	IdentifierDeclType	vec3_t
>1138	IdentifierDecl	vDP
>1139	Identifier	vDP
>1140	IdentifierDeclType	vec3_t
>1141	ExpressionStatement	 
>1142	CallExpression	TextureAxisFromPlane ( & f -> plane , vX , vY )
>1143	ArgumentList	& f -> plane
>1144	Argument	vY
>1145	Identifier	vY
>1146	Argument	vX
>1147	Identifier	vX
>1148	Argument	& f -> plane
>1149	UnaryOp	& f -> plane
>1150	PtrMemberAccess	f -> plane
>1151	Identifier	plane
>1152	Identifier	f
>1153	UnaryOperator	&
>1154	Callee	TextureAxisFromPlane
>1155	Identifier	TextureAxisFromPlane
>1156	ExpressionStatement	 
>1157	CallExpression	Face_MoveTexture_BrushPrimit ( f , delta )
>1158	ArgumentList	f
>1159	Argument	delta
>1160	Identifier	delta
>1161	Argument	f
>1162	Identifier	f
>1163	Callee	Face_MoveTexture_BrushPrimit
>1164	Identifier	Face_MoveTexture_BrushPrimit
>1165	Condition	 
>1166	MemberAccess	g_qeglobals . m_bBrushPrimitMode
>1167	Identifier	m_bBrushPrimitMode
>1168	Identifier	g_qeglobals
>1169	IdentifierDeclStatement	 
>1170	IdentifierDecl	vY
>1171	Identifier	vY
>1172	IdentifierDeclType	vec3_t
>1173	IdentifierDecl	vX
>1174	Identifier	vX
>1175	IdentifierDeclType	vec3_t
>1211	FunctionDef	Face_SetColor (brush_t * b , face_t * f , float fCurveColor)
>1212	ParameterList	brush_t * b , face_t * f , float fCurveColor
>1213	Parameter	 
>1214	Identifier	fCurveColor
>1215	ParameterType	float
>1216	Parameter	 
>1217	Identifier	f
>1218	ParameterType	face_t *
>1219	Parameter	 
>1220	Identifier	b
>1221	ParameterType	brush_t *
>1222	ReturnType	void
>1223	CompoundStatement	 
>1224	IfStatement	if ( g_pParentWnd -> GetCamera ( ) -> Camera ( ) . draw_mode == cd_texture && ! b -> owner -> eclass -> fixedsize )
>1225	ElseStatement	else
>1226	CompoundStatement	 
>1227	ExpressionStatement	 
>1228	AssignmentExpr	f -> d_color [ 2 ] = shade * q -> color [ 2 ]
>1229	MultiplicativeExpression	shade * q -> color [ 2 ]
>1230	ArrayIndexing	q -> color [ 2 ]
>1231	PrimaryExpression	2
>1232	PtrMemberAccess	q -> color
>1233	Identifier	color
>1234	Identifier	q
>1235	Identifier	shade
>1236	ArrayIndexing	f -> d_color [ 2 ]
>1237	PrimaryExpression	2
>1238	PtrMemberAccess	f -> d_color
>1239	Identifier	d_color
>1240	Identifier	f
>1241	ExpressionStatement	 
>1242	AssignmentExpr	f -> d_color [ 1 ] = shade * q -> color [ 1 ]
>1243	MultiplicativeExpression	shade * q -> color [ 1 ]
>1244	ArrayIndexing	q -> color [ 1 ]
>1245	PrimaryExpression	1
>1246	PtrMemberAccess	q -> color
>1247	Identifier	color
>1248	Identifier	q
>1249	Identifier	shade
>1250	ArrayIndexing	f -> d_color [ 1 ]
>1251	PrimaryExpression	1
>1252	PtrMemberAccess	f -> d_color
>1253	Identifier	d_color
>1254	Identifier	f
>1255	ExpressionStatement	 
>1256	AssignmentExpr	f -> d_color [ 0 ] = shade * q -> color [ 0 ]
>1257	MultiplicativeExpression	shade * q -> color [ 0 ]
>1258	ArrayIndexing	q -> color [ 0 ]
>1259	PrimaryExpression	0
>1260	PtrMemberAccess	q -> color
>1261	Identifier	color
>1262	Identifier	q
>1263	Identifier	shade
>1264	ArrayIndexing	f -> d_color [ 0 ]
>1265	PrimaryExpression	0
>1266	PtrMemberAccess	f -> d_color
>1267	Identifier	d_color
>1268	Identifier	f
>1269	CompoundStatement	 
>1270	ExpressionStatement	 
>1271	AssignmentExpr	f -> d_color [ 0 ] = f -> d_color [ 1 ] = f -> d_color [ 2 ] = shade
>1272	AssignmentExpr	f -> d_color [ 1 ] = f -> d_color [ 2 ] = shade
>1273	AssignmentExpr	f -> d_color [ 2 ] = shade
>1274	Identifier	shade
>1275	ArrayIndexing	f -> d_color [ 2 ]
>1276	PrimaryExpression	2
>1277	PtrMemberAccess	f -> d_color
>1278	Identifier	d_color
>1279	Identifier	f
>1280	ArrayIndexing	f -> d_color [ 1 ]
>1281	PrimaryExpression	1
>1282	PtrMemberAccess	f -> d_color
>1283	Identifier	d_color
>1284	Identifier	f
>1285	ArrayIndexing	f -> d_color [ 0 ]
>1286	PrimaryExpression	0
>1287	PtrMemberAccess	f -> d_color
>1288	Identifier	d_color
>1289	Identifier	f
>1290	Condition	 
>1291	AndExpression	g_pParentWnd -> GetCamera ( ) -> Camera ( ) . draw_mode == cd_texture && ! b -> owner -> eclass -> fixedsize
>1292	UnaryOp	! b -> owner -> eclass -> fixedsize
>1293	PtrMemberAccess	b -> owner -> eclass -> fixedsize
>1294	Identifier	fixedsize
>1295	PtrMemberAccess	b -> owner -> eclass
>1296	Identifier	eclass
>1297	PtrMemberAccess	b -> owner
>1298	Identifier	owner
>1299	Identifier	b
>1300	UnaryOperator	!
>1301	EqualityExpression	g_pParentWnd -> GetCamera ( ) -> Camera ( ) . draw_mode == cd_texture
>1302	Identifier	cd_texture
>1303	MemberAccess	g_pParentWnd -> GetCamera ( ) -> Camera ( ) . draw_mode
>1304	Identifier	draw_mode
>1305	CallExpression	g_pParentWnd -> GetCamera ( ) -> Camera ( )
>1306	ArgumentList	 
>1307	Callee	g_pParentWnd -> GetCamera ( ) -> Camera
>1308	PtrMemberAccess	g_pParentWnd -> GetCamera ( ) -> Camera
>1309	Identifier	Camera
>1310	CallExpression	g_pParentWnd -> GetCamera ( )
>1311	ArgumentList	 
>1312	Callee	g_pParentWnd -> GetCamera
>1313	PtrMemberAccess	g_pParentWnd -> GetCamera
>1314	Identifier	GetCamera
>1315	Identifier	g_pParentWnd
>1316	ExpressionStatement	 
>1317	AssignmentExpr	shade = SetShadeForPlane ( & f -> plane )
>1318	CallExpression	SetShadeForPlane ( & f -> plane )
>1319	ArgumentList	& f -> plane
>1320	Argument	& f -> plane
>1321	UnaryOp	& f -> plane
>1322	PtrMemberAccess	f -> plane
>1323	Identifier	plane
>1324	Identifier	f
>1325	UnaryOperator	&
>1326	Callee	SetShadeForPlane
>1327	Identifier	SetShadeForPlane
>1328	Identifier	shade
>1329	ExpressionStatement	 
>1330	AssignmentExpr	q = f -> d_texture
>1331	PtrMemberAccess	f -> d_texture
>1332	Identifier	d_texture
>1333	Identifier	f
>1334	Identifier	q
>1335	IdentifierDeclStatement	 
>1336	IdentifierDecl	* q
>1337	Identifier	q
>1338	IdentifierDeclType	qtexture_t *
>1339	IdentifierDeclStatement	 
>1340	IdentifierDecl	shade
>1341	Identifier	shade
>1342	IdentifierDeclType	float
>1399	FunctionDef	Face_MakePlane (face_t * f)
>1400	ParameterList	face_t * f
>1401	Parameter	 
>1402	Identifier	f
>1403	ParameterType	face_t *
>1404	ReturnType	void
>1405	CompoundStatement	 
>1406	ExpressionStatement	 
>1407	AssignmentExpr	f -> plane . dist = DotProduct ( t3 , f -> plane . normal )
>1408	CallExpression	DotProduct ( t3 , f -> plane . normal )
>1409	ArgumentList	t3
>1410	Argument	f -> plane . normal
>1411	MemberAccess	f -> plane . normal
>1412	Identifier	normal
>1413	PtrMemberAccess	f -> plane
>1414	Identifier	plane
>1415	Identifier	f
>1416	Argument	t3
>1417	Identifier	t3
>1418	Callee	DotProduct
>1419	Identifier	DotProduct
>1420	MemberAccess	f -> plane . dist
>1421	Identifier	dist
>1422	PtrMemberAccess	f -> plane
>1423	Identifier	plane
>1424	Identifier	f
>1425	ExpressionStatement	 
>1426	CallExpression	VectorNormalize ( f -> plane . normal )
>1427	ArgumentList	f -> plane . normal
>1428	Argument	f -> plane . normal
>1429	MemberAccess	f -> plane . normal
>1430	Identifier	normal
>1431	PtrMemberAccess	f -> plane
>1432	Identifier	plane
>1433	Identifier	f
>1434	Callee	VectorNormalize
>1435	Identifier	VectorNormalize
>1436	IfStatement	if ( VectorCompare ( f -> plane . normal , vec3_origin ) )
>1437	ExpressionStatement	 
>1438	CallExpression	printf ( \"WARNING
>1439	ArgumentList	\"WARNING
>1440	Argument	\"WARNING
>1441	PrimaryExpression	\"WARNING
>1442	Callee	printf
>1443	Identifier	printf
>1444	Condition	 
>1445	CallExpression	VectorCompare ( f -> plane . normal , vec3_origin )
>1446	ArgumentList	f -> plane . normal
>1447	Argument	vec3_origin
>1448	Identifier	vec3_origin
>1449	Argument	f -> plane . normal
>1450	MemberAccess	f -> plane . normal
>1451	Identifier	normal
>1452	PtrMemberAccess	f -> plane
>1453	Identifier	plane
>1454	Identifier	f
>1455	Callee	VectorCompare
>1456	Identifier	VectorCompare
>1457	ExpressionStatement	 
>1458	CallExpression	CrossProduct ( t1 , t2 , f -> plane . normal )
>1459	ArgumentList	t1
>1460	Argument	f -> plane . normal
>1461	MemberAccess	f -> plane . normal
>1462	Identifier	normal
>1463	PtrMemberAccess	f -> plane
>1464	Identifier	plane
>1465	Identifier	f
>1466	Argument	t2
>1467	Identifier	t2
>1468	Argument	t1
>1469	Identifier	t1
>1470	Callee	CrossProduct
>1471	Identifier	CrossProduct
>1472	ForStatement	for ( j = 0 ; j < 3 ; j ++ )
>1473	CompoundStatement	 
>1474	ExpressionStatement	 
>1475	AssignmentExpr	t3 [ j ] = f -> planepts [ 1 ] [ j ]
>1476	ArrayIndexing	f -> planepts [ 1 ] [ j ]
>1477	Identifier	j
>1478	ArrayIndexing	f -> planepts [ 1 ]
>1479	PrimaryExpression	1
>1480	PtrMemberAccess	f -> planepts
>1481	Identifier	planepts
>1482	Identifier	f
>1483	ArrayIndexing	t3 [ j ]
>1484	Identifier	j
>1485	Identifier	t3
>1486	ExpressionStatement	 
>1487	AssignmentExpr	t2 [ j ] = f -> planepts [ 2 ] [ j ] - f -> planepts [ 1 ] [ j ]
>1488	AdditiveExpression	f -> planepts [ 2 ] [ j ] - f -> planepts [ 1 ] [ j ]
>1489	ArrayIndexing	f -> planepts [ 1 ] [ j ]
>1490	Identifier	j
>1491	ArrayIndexing	f -> planepts [ 1 ]
>1492	PrimaryExpression	1
>1493	PtrMemberAccess	f -> planepts
>1494	Identifier	planepts
>1495	Identifier	f
>1496	ArrayIndexing	f -> planepts [ 2 ] [ j ]
>1497	Identifier	j
>1498	ArrayIndexing	f -> planepts [ 2 ]
>1499	PrimaryExpression	2
>1500	PtrMemberAccess	f -> planepts
>1501	Identifier	planepts
>1502	Identifier	f
>1503	ArrayIndexing	t2 [ j ]
>1504	Identifier	j
>1505	Identifier	t2
>1506	ExpressionStatement	 
>1507	AssignmentExpr	t1 [ j ] = f -> planepts [ 0 ] [ j ] - f -> planepts [ 1 ] [ j ]
>1508	AdditiveExpression	f -> planepts [ 0 ] [ j ] - f -> planepts [ 1 ] [ j ]
>1509	ArrayIndexing	f -> planepts [ 1 ] [ j ]
>1510	Identifier	j
>1511	ArrayIndexing	f -> planepts [ 1 ]
>1512	PrimaryExpression	1
>1513	PtrMemberAccess	f -> planepts
>1514	Identifier	planepts
>1515	Identifier	f
>1516	ArrayIndexing	f -> planepts [ 0 ] [ j ]
>1517	Identifier	j
>1518	ArrayIndexing	f -> planepts [ 0 ]
>1519	PrimaryExpression	0
>1520	PtrMemberAccess	f -> planepts
>1521	Identifier	planepts
>1522	Identifier	f
>1523	ArrayIndexing	t1 [ j ]
>1524	Identifier	j
>1525	Identifier	t1
>1526	IncDecOp	 
>1527	IncDec	++
>1528	Identifier	j
>1529	Condition	 
>1530	RelationalExpression	j < 3
>1531	PrimaryExpression	3
>1532	Identifier	j
>1533	ForInit	 
>1534	AssignmentExpr	j = 0
>1535	PrimaryExpression	0
>1536	Identifier	j
>1537	IdentifierDeclStatement	 
>1538	IdentifierDecl	t3
>1539	Identifier	t3
>1540	IdentifierDeclType	vec3_t
>1541	IdentifierDecl	t2
>1542	Identifier	t2
>1543	IdentifierDeclType	vec3_t
>1544	IdentifierDecl	t1
>1545	Identifier	t1
>1546	IdentifierDeclType	vec3_t
>1547	IdentifierDeclStatement	 
>1548	IdentifierDecl	j
>1549	Identifier	j
>1550	IdentifierDeclType	int
>1575	FunctionDef	EmitTextureCoordinates (float * xyzst , qtexture_t * q , face_t * f)
>1576	ParameterList	float * xyzst , qtexture_t * q , face_t * f
>1577	Parameter	 
>1578	Identifier	f
>1579	ParameterType	face_t *
>1580	Parameter	 
>1581	Identifier	q
>1582	ParameterType	qtexture_t *
>1583	Parameter	 
>1584	Identifier	xyzst
>1585	ParameterType	float *
>1586	ReturnType	void
>1587	CompoundStatement	 
>1588	ExpressionStatement	 
>1589	AssignmentExpr	xyzst [ 4 ] = DotProduct ( xyzst , STfromXYZ [ 1 ] ) + STfromXYZ [ 1 ] [ 3 ]
>1590	AdditiveExpression	DotProduct ( xyzst , STfromXYZ [ 1 ] ) + STfromXYZ [ 1 ] [ 3 ]
>1591	ArrayIndexing	STfromXYZ [ 1 ] [ 3 ]
>1592	PrimaryExpression	3
>1593	ArrayIndexing	STfromXYZ [ 1 ]
>1594	PrimaryExpression	1
>1595	Identifier	STfromXYZ
>1596	CallExpression	DotProduct ( xyzst , STfromXYZ [ 1 ] )
>1597	ArgumentList	xyzst
>1598	Argument	STfromXYZ [ 1 ]
>1599	ArrayIndexing	STfromXYZ [ 1 ]
>1600	PrimaryExpression	1
>1601	Identifier	STfromXYZ
>1602	Argument	xyzst
>1603	Identifier	xyzst
>1604	Callee	DotProduct
>1605	Identifier	DotProduct
>1606	ArrayIndexing	xyzst [ 4 ]
>1607	PrimaryExpression	4
>1608	Identifier	xyzst
>1609	ExpressionStatement	 
>1610	AssignmentExpr	xyzst [ 3 ] = DotProduct ( xyzst , STfromXYZ [ 0 ] ) + STfromXYZ [ 0 ] [ 3 ]
>1611	AdditiveExpression	DotProduct ( xyzst , STfromXYZ [ 0 ] ) + STfromXYZ [ 0 ] [ 3 ]
>1612	ArrayIndexing	STfromXYZ [ 0 ] [ 3 ]
>1613	PrimaryExpression	3
>1614	ArrayIndexing	STfromXYZ [ 0 ]
>1615	PrimaryExpression	0
>1616	Identifier	STfromXYZ
>1617	CallExpression	DotProduct ( xyzst , STfromXYZ [ 0 ] )
>1618	ArgumentList	xyzst
>1619	Argument	STfromXYZ [ 0 ]
>1620	ArrayIndexing	STfromXYZ [ 0 ]
>1621	PrimaryExpression	0
>1622	Identifier	STfromXYZ
>1623	Argument	xyzst
>1624	Identifier	xyzst
>1625	Callee	DotProduct
>1626	Identifier	DotProduct
>1627	ArrayIndexing	xyzst [ 3 ]
>1628	PrimaryExpression	3
>1629	Identifier	xyzst
>1630	ExpressionStatement	 
>1631	CallExpression	Face_TextureVectors ( f , STfromXYZ )
>1632	ArgumentList	f
>1633	Argument	STfromXYZ
>1634	Identifier	STfromXYZ
>1635	Argument	f
>1636	Identifier	f
>1637	Callee	Face_TextureVectors
>1638	Identifier	Face_TextureVectors
>1639	ExpressionStatement	 
>1640	ArrayIndexing	STfromXYZ [ 2 ] [ 4 ]
>1641	PrimaryExpression	4
>1642	ArrayIndexing	STfromXYZ [ 2 ]
>1643	PrimaryExpression	2
>1644	Identifier	STfromXYZ
>1645	Statement	 
>1657	FunctionDef	Brush_MakeFacePlanes (brush_t * b)
>1658	ParameterList	brush_t * b
>1659	Parameter	 
>1660	Identifier	b
>1661	ParameterType	brush_t *
>1662	ReturnType	void
>1663	CompoundStatement	 
>1664	ForStatement	for ( f = b -> brush_faces ; f ; f = f -> next )
>1665	CompoundStatement	 
>1666	ExpressionStatement	 
>1667	CallExpression	Face_MakePlane ( f )
>1668	ArgumentList	f
>1669	Argument	f
>1670	Identifier	f
>1671	Callee	Face_MakePlane
>1672	Identifier	Face_MakePlane
>1673	AssignmentExpr	 
>1674	PtrMemberAccess	f -> next
>1675	Identifier	next
>1676	Identifier	f
>1677	Identifier	f
>1678	Condition	 
>1679	Identifier	f
>1680	ForInit	 
>1681	AssignmentExpr	f = b -> brush_faces
>1682	PtrMemberAccess	b -> brush_faces
>1683	Identifier	brush_faces
>1684	Identifier	b
>1685	Identifier	f
>1686	IdentifierDeclStatement	 
>1687	IdentifierDecl	* f
>1688	Identifier	f
>1689	IdentifierDeclType	face_t *
>1699	FunctionDef	DrawBrushEntityName (brush_t * b)
>1700	ParameterList	brush_t * b
>1701	Parameter	 
>1702	Identifier	b
>1703	ParameterType	brush_t *
>1704	ReturnType	void
>1705	CompoundStatement	 
>1706	IfStatement	if ( g_qeglobals . d_savedinfo . show_names )
>1707	CompoundStatement	 
>1708	ExpressionStatement	 
>1709	CallExpression	qglCallLists ( strlen ( name ) , GL_UNSIGNED_BYTE , name )
>1710	ArgumentList	strlen ( name )
>1711	Argument	name
>1712	Identifier	name
>1713	Argument	GL_UNSIGNED_BYTE
>1714	Identifier	GL_UNSIGNED_BYTE
>1715	Argument	strlen ( name )
>1716	CallExpression	strlen ( name )
>1717	ArgumentList	name
>1718	Argument	name
>1719	Identifier	name
>1720	Callee	strlen
>1721	Identifier	strlen
>1722	Callee	qglCallLists
>1723	Identifier	qglCallLists
>1724	ExpressionStatement	 
>1725	CallExpression	qglRasterPos3f ( b -> mins [ 0 ] + 4 , b -> mins [ 1 ] + 4 , b -> mins [ 2 ] + 4 )
>1726	ArgumentList	b -> mins [ 0 ] + 4
>1727	Argument	b -> mins [ 2 ] + 4
>1728	AdditiveExpression	b -> mins [ 2 ] + 4
>1729	PrimaryExpression	4
>1730	ArrayIndexing	b -> mins [ 2 ]
>1731	PrimaryExpression	2
>1732	PtrMemberAccess	b -> mins
>1733	Identifier	mins
>1734	Identifier	b
>1735	Argument	b -> mins [ 1 ] + 4
>1736	AdditiveExpression	b -> mins [ 1 ] + 4
>1737	PrimaryExpression	4
>1738	ArrayIndexing	b -> mins [ 1 ]
>1739	PrimaryExpression	1
>1740	PtrMemberAccess	b -> mins
>1741	Identifier	mins
>1742	Identifier	b
>1743	Argument	b -> mins [ 0 ] + 4
>1744	AdditiveExpression	b -> mins [ 0 ] + 4
>1745	PrimaryExpression	4
>1746	ArrayIndexing	b -> mins [ 0 ]
>1747	PrimaryExpression	0
>1748	PtrMemberAccess	b -> mins
>1749	Identifier	mins
>1750	Identifier	b
>1751	Callee	qglRasterPos3f
>1752	Identifier	qglRasterPos3f
>1753	ExpressionStatement	 
>1754	AssignmentExpr	name = ValueForKey ( b -> owner , \"classname\" )
>1755	CallExpression	ValueForKey ( b -> owner , \"classname\" )
>1756	ArgumentList	b -> owner
>1757	Argument	\"classname\"
>1758	PrimaryExpression	\"classname\"
>1759	Argument	b -> owner
>1760	PtrMemberAccess	b -> owner
>1761	Identifier	owner
>1762	Identifier	b
>1763	Callee	ValueForKey
>1764	Identifier	ValueForKey
>1765	Identifier	name
>1766	Condition	 
>1767	MemberAccess	g_qeglobals . d_savedinfo . show_names
>1768	Identifier	show_names
>1769	MemberAccess	g_qeglobals . d_savedinfo
>1770	Identifier	d_savedinfo
>1771	Identifier	g_qeglobals
>1772	IfStatement	if ( ! ( g_qeglobals . d_savedinfo . exclude & EXCLUDE_ANGLES ) )
>1773	CompoundStatement	 
>1774	IfStatement	if ( a )
>1775	CompoundStatement	 
>1776	ExpressionStatement	 
>1777	CallExpression	qglEnd ( )
>1778	ArgumentList	 
>1779	Callee	qglEnd
>1780	Identifier	qglEnd
>1781	ExpressionStatement	 
>1782	CallExpression	qglVertex3fv ( mid )
>1783	ArgumentList	mid
>1784	Argument	mid
>1785	Identifier	mid
>1786	Callee	qglVertex3fv
>1787	Identifier	qglVertex3fv
>1788	ExpressionStatement	 
>1789	AssignmentExpr	mid [ 2 ] -= c * 4
>1790	MultiplicativeExpression	c * 4
>1791	PrimaryExpression	4
>1792	Identifier	c
>1793	ArrayIndexing	mid [ 2 ]
>1794	PrimaryExpression	2
>1795	Identifier	mid
>1796	ExpressionStatement	 
>1797	AssignmentExpr	mid [ 1 ] -= c * 4
>1798	MultiplicativeExpression	c * 4
>1799	PrimaryExpression	4
>1800	Identifier	c
>1801	ArrayIndexing	mid [ 1 ]
>1802	PrimaryExpression	1
>1803	Identifier	mid
>1804	ExpressionStatement	 
>1805	AssignmentExpr	mid [ 0 ] += s * 4
>1806	MultiplicativeExpression	s * 4
>1807	PrimaryExpression	4
>1808	Identifier	s
>1809	ArrayIndexing	mid [ 0 ]
>1810	PrimaryExpression	0
>1811	Identifier	mid
>1812	ExpressionStatement	 
>1813	AssignmentExpr	mid [ 2 ] -= s * 4
>1814	MultiplicativeExpression	s * 4
>1815	PrimaryExpression	4
>1816	Identifier	s
>1817	ArrayIndexing	mid [ 2 ]
>1818	PrimaryExpression	2
>1819	Identifier	mid
>1820	ExpressionStatement	 
>1821	AssignmentExpr	mid [ 1 ] -= s * 4
>1822	MultiplicativeExpression	s * 4
>1823	PrimaryExpression	4
>1824	Identifier	s
>1825	ArrayIndexing	mid [ 1 ]
>1826	PrimaryExpression	1
>1827	Identifier	mid
>1828	ExpressionStatement	 
>1829	AssignmentExpr	mid [ 0 ] -= c * 4
>1830	MultiplicativeExpression	c * 4
>1831	PrimaryExpression	4
>1832	Identifier	c
>1833	ArrayIndexing	mid [ 0 ]
>1834	PrimaryExpression	0
>1835	Identifier	mid
>1836	ExpressionStatement	 
>1837	CallExpression	qglVertex3fv ( mid )
>1838	ArgumentList	mid
>1839	Argument	mid
>1840	Identifier	mid
>1841	Callee	qglVertex3fv
>1842	Identifier	qglVertex3fv
>1843	ExpressionStatement	 
>1844	AssignmentExpr	mid [ 2 ] -= c * 4
>1845	MultiplicativeExpression	c * 4
>1846	PrimaryExpression	4
>1847	Identifier	c
>1848	ArrayIndexing	mid [ 2 ]
>1849	PrimaryExpression	2
>1850	Identifier	mid
>1851	ExpressionStatement	 
>1852	AssignmentExpr	mid [ 1 ] -= c * 4
>1853	MultiplicativeExpression	c * 4
>1854	PrimaryExpression	4
>1855	Identifier	c
>1856	ArrayIndexing	mid [ 1 ]
>1857	PrimaryExpression	1
>1858	Identifier	mid
>1859	ExpressionStatement	 
>1860	AssignmentExpr	mid [ 0 ] += s * 4
>1861	MultiplicativeExpression	s * 4
>1862	PrimaryExpression	4
>1863	Identifier	s
>1864	ArrayIndexing	mid [ 0 ]
>1865	PrimaryExpression	0
>1866	Identifier	mid
>1867	ExpressionStatement	 
>1868	AssignmentExpr	mid [ 2 ] += s * 4
>1869	MultiplicativeExpression	s * 4
>1870	PrimaryExpression	4
>1871	Identifier	s
>1872	ArrayIndexing	mid [ 2 ]
>1873	PrimaryExpression	2
>1874	Identifier	mid
>1875	ExpressionStatement	 
>1876	AssignmentExpr	mid [ 1 ] += s * 4
>1877	MultiplicativeExpression	s * 4
>1878	PrimaryExpression	4
>1879	Identifier	s
>1880	ArrayIndexing	mid [ 1 ]
>1881	PrimaryExpression	1
>1882	Identifier	mid
>1883	ExpressionStatement	 
>1884	AssignmentExpr	mid [ 0 ] += c * 4
>1885	MultiplicativeExpression	c * 4
>1886	PrimaryExpression	4
>1887	Identifier	c
>1888	ArrayIndexing	mid [ 0 ]
>1889	PrimaryExpression	0
>1890	Identifier	mid
>1891	ExpressionStatement	 
>1892	CallExpression	qglVertex3fv ( mid )
>1893	ArgumentList	mid
>1894	Argument	mid
>1895	Identifier	mid
>1896	Callee	qglVertex3fv
>1897	Identifier	qglVertex3fv
>1898	ExpressionStatement	 
>1899	AssignmentExpr	mid [ 2 ] += c * 4
>1900	MultiplicativeExpression	c * 4
>1901	PrimaryExpression	4
>1902	Identifier	c
>1903	ArrayIndexing	mid [ 2 ]
>1904	PrimaryExpression	2
>1905	Identifier	mid
>1906	ExpressionStatement	 
>1907	AssignmentExpr	mid [ 1 ] += c * 4
>1908	MultiplicativeExpression	c * 4
>1909	PrimaryExpression	4
>1910	Identifier	c
>1911	ArrayIndexing	mid [ 1 ]
>1912	PrimaryExpression	1
>1913	Identifier	mid
>1914	ExpressionStatement	 
>1915	AssignmentExpr	mid [ 0 ] -= s * 4
>1916	MultiplicativeExpression	s * 4
>1917	PrimaryExpression	4
>1918	Identifier	s
>1919	ArrayIndexing	mid [ 0 ]
>1920	PrimaryExpression	0
>1921	Identifier	mid
>1922	ExpressionStatement	 
>1923	AssignmentExpr	mid [ 2 ] -= s * 4
>1924	MultiplicativeExpression	s * 4
>1925	PrimaryExpression	4
>1926	Identifier	s
>1927	ArrayIndexing	mid [ 2 ]
>1928	PrimaryExpression	2
>1929	Identifier	mid
>1930	ExpressionStatement	 
>1931	AssignmentExpr	mid [ 1 ] -= s * 4
>1932	MultiplicativeExpression	s * 4
>1933	PrimaryExpression	4
>1934	Identifier	s
>1935	ArrayIndexing	mid [ 1 ]
>1936	PrimaryExpression	1
>1937	Identifier	mid
>1938	ExpressionStatement	 
>1939	AssignmentExpr	mid [ 0 ] -= c * 4
>1940	MultiplicativeExpression	c * 4
>1941	PrimaryExpression	4
>1942	Identifier	c
>1943	ArrayIndexing	mid [ 0 ]
>1944	PrimaryExpression	0
>1945	Identifier	mid
>1946	ExpressionStatement	 
>1947	CallExpression	qglVertex3fv ( mid )
>1948	ArgumentList	mid
>1949	Argument	mid
>1950	Identifier	mid
>1951	Callee	qglVertex3fv
>1952	Identifier	qglVertex3fv
>1953	ExpressionStatement	 
>1954	AssignmentExpr	mid [ 2 ] += s * 8
>1955	MultiplicativeExpression	s * 8
>1956	PrimaryExpression	8
>1957	Identifier	s
>1958	ArrayIndexing	mid [ 2 ]
>1959	PrimaryExpression	2
>1960	Identifier	mid
>1961	ExpressionStatement	 
>1962	AssignmentExpr	mid [ 1 ] += s * 8
>1963	MultiplicativeExpression	s * 8
>1964	PrimaryExpression	8
>1965	Identifier	s
>1966	ArrayIndexing	mid [ 1 ]
>1967	PrimaryExpression	1
>1968	Identifier	mid
>1969	ExpressionStatement	 
>1970	AssignmentExpr	mid [ 0 ] += c * 8
>1971	MultiplicativeExpression	c * 8
>1972	PrimaryExpression	8
>1973	Identifier	c
>1974	ArrayIndexing	mid [ 0 ]
>1975	PrimaryExpression	0
>1976	Identifier	mid
>1977	ExpressionStatement	 
>1978	CallExpression	qglVertex3fv ( mid )
>1979	ArgumentList	mid
>1980	Argument	mid
>1981	Identifier	mid
>1982	Callee	qglVertex3fv
>1983	Identifier	qglVertex3fv
>1984	ExpressionStatement	 
>1985	CallExpression	qglBegin ( GL_LINE_STRIP )
>1986	ArgumentList	GL_LINE_STRIP
>1987	Argument	GL_LINE_STRIP
>1988	Identifier	GL_LINE_STRIP
>1989	Callee	qglBegin
>1990	Identifier	qglBegin
>1991	ForStatement	for ( i = 0 ; i < 3 ; i ++ )
>1992	ExpressionStatement	 
>1993	AssignmentExpr	mid [ i ] = ( b -> mins [ i ] + b -> maxs [ i ] ) * 0.5
>1994	MultiplicativeExpression	( b -> mins [ i ] + b -> maxs [ i ] ) * 0.5
>1995	PrimaryExpression	0.5
>1996	AdditiveExpression	b -> mins [ i ] + b -> maxs [ i ]
>1997	ArrayIndexing	b -> maxs [ i ]
>1998	Identifier	i
>1999	PtrMemberAccess	b -> maxs
>2000	Identifier	maxs
>2001	Identifier	b
>2002	ArrayIndexing	b -> mins [ i ]
>2003	Identifier	i
>2004	PtrMemberAccess	b -> mins
>2005	Identifier	mins
>2006	Identifier	b
>2007	ArrayIndexing	mid [ i ]
>2008	Identifier	i
>2009	Identifier	mid
>2010	IncDecOp	 
>2011	IncDec	++
>2012	Identifier	i
>2013	Condition	 
>2014	RelationalExpression	i < 3
>2015	PrimaryExpression	3
>2016	Identifier	i
>2017	ForInit	 
>2018	AssignmentExpr	i = 0
>2019	PrimaryExpression	0
>2020	Identifier	i
>2021	ExpressionStatement	 
>2022	AssignmentExpr	c = cos ( a / 180 * Q_PI )
>2023	CallExpression	cos ( a / 180 * Q_PI )
>2024	ArgumentList	a / 180 * Q_PI
>2025	Argument	a / 180 * Q_PI
>2026	MultiplicativeExpression	a / 180 * Q_PI
>2027	MultiplicativeExpression	180 * Q_PI
>2028	Identifier	Q_PI
>2029	PrimaryExpression	180
>2030	Identifier	a
>2031	Callee	cos
>2032	Identifier	cos
>2033	Identifier	c
>2034	ExpressionStatement	 
>2035	AssignmentExpr	s = sin ( a / 180 * Q_PI )
>2036	CallExpression	sin ( a / 180 * Q_PI )
>2037	ArgumentList	a / 180 * Q_PI
>2038	Argument	a / 180 * Q_PI
>2039	MultiplicativeExpression	a / 180 * Q_PI
>2040	MultiplicativeExpression	180 * Q_PI
>2041	Identifier	Q_PI
>2042	PrimaryExpression	180
>2043	Identifier	a
>2044	Callee	sin
>2045	Identifier	sin
>2046	Identifier	s
>2047	Condition	 
>2048	Identifier	a
>2049	ExpressionStatement	 
>2050	AssignmentExpr	a = FloatForKey ( b -> owner , \"angle\" )
>2051	CallExpression	FloatForKey ( b -> owner , \"angle\" )
>2052	ArgumentList	b -> owner
>2053	Argument	\"angle\"
>2054	PrimaryExpression	\"angle\"
>2055	Argument	b -> owner
>2056	PtrMemberAccess	b -> owner
>2057	Identifier	owner
>2058	Identifier	b
>2059	Callee	FloatForKey
>2060	Identifier	FloatForKey
>2061	Identifier	a
>2062	Condition	 
>2063	UnaryOp	! ( g_qeglobals . d_savedinfo . exclude & EXCLUDE_ANGLES )
>2064	BitAndExpression	g_qeglobals . d_savedinfo . exclude & EXCLUDE_ANGLES
>2065	Identifier	EXCLUDE_ANGLES
>2066	MemberAccess	g_qeglobals . d_savedinfo . exclude
>2067	Identifier	exclude
>2068	MemberAccess	g_qeglobals . d_savedinfo
>2069	Identifier	d_savedinfo
>2070	Identifier	g_qeglobals
>2071	UnaryOperator	!
>2072	IfStatement	if ( b != b -> owner -> brushes . onext )
>2073	ReturnStatement	 
>2074	Condition	 
>2075	EqualityExpression	b != b -> owner -> brushes . onext
>2076	MemberAccess	b -> owner -> brushes . onext
>2077	Identifier	onext
>2078	PtrMemberAccess	b -> owner -> brushes
>2079	Identifier	brushes
>2080	PtrMemberAccess	b -> owner
>2081	Identifier	owner
>2082	Identifier	b
>2083	Identifier	b
>2084	IfStatement	if ( b -> owner == world_entity )
>2085	ReturnStatement	 
>2086	Condition	 
>2087	EqualityExpression	b -> owner == world_entity
>2088	Identifier	world_entity
>2089	PtrMemberAccess	b -> owner
>2090	Identifier	owner
>2091	Identifier	b
>2092	IfStatement	if ( ! b -> owner )
>2093	ReturnStatement	 
>2094	Condition	 
>2095	UnaryOp	! b -> owner
>2096	PtrMemberAccess	b -> owner
>2097	Identifier	owner
>2098	Identifier	b
>2099	UnaryOperator	!
>2100	IdentifierDeclStatement	 
>2101	IdentifierDecl	* name
>2102	Identifier	name
>2103	IdentifierDeclType	char *
>2140	FunctionDef	Brush_MakeFaceWinding (brush_t * b , face_t * face)
>2141	ParameterList	brush_t * b , face_t * face
>2142	Parameter	 
>2143	Identifier	face
>2144	ParameterType	face_t *
>2145	Parameter	 
>2146	Identifier	b
>2147	ParameterType	brush_t *
>2148	ReturnType	winding_t *
>2149	CompoundStatement	 
>2150	ReturnStatement	 
>2151	Identifier	w
>2152	IfStatement	if ( ! w )
>2153	ExpressionStatement	 
>2154	CallExpression	printf ( \"unused plane\n\" )
>2155	ArgumentList	\"unused plane\n\"
>2156	Argument	\"unused plane\n\"
>2157	PrimaryExpression	\"unused plane\n\"
>2158	Callee	printf
>2159	Identifier	printf
>2160	Condition	 
>2161	UnaryOp	! w
>2162	Identifier	w
>2163	UnaryOperator	!
>2164	IfStatement	if ( w -> numpoints < 3 )
>2165	CompoundStatement	 
>2166	ExpressionStatement	 
>2167	AssignmentExpr	w = NULL
>2168	Identifier	NULL
>2169	Identifier	w
>2170	ExpressionStatement	 
>2171	CallExpression	free ( w )
>2172	ArgumentList	w
>2173	Argument	w
>2174	Identifier	w
>2175	Callee	free
>2176	Identifier	free
>2177	Condition	 
>2178	RelationalExpression	w -> numpoints < 3
>2179	PrimaryExpression	3
>2180	PtrMemberAccess	w -> numpoints
>2181	Identifier	numpoints
>2182	Identifier	w
>2183	ForStatement	for ( clip = b -> brush_faces ; clip && w ; clip = clip -> next )
>2184	CompoundStatement	 
>2185	IfStatement	if ( ! w )
>2186	ReturnStatement	 
>2187	Identifier	w
>2188	Condition	 
>2189	UnaryOp	! w
>2190	Identifier	w
>2191	UnaryOperator	!
>2192	ExpressionStatement	 
>2193	AssignmentExpr	w = Winding_Clip ( w , & plane , false )
>2194	CallExpression	Winding_Clip ( w , & plane , false )
>2195	ArgumentList	w
>2196	Argument	false
>2197	Identifier	false
>2198	Argument	& plane
>2199	UnaryOp	& plane
>2200	Identifier	plane
>2201	UnaryOperator	&
>2202	Argument	w
>2203	Identifier	w
>2204	Callee	Winding_Clip
>2205	Identifier	Winding_Clip
>2206	Identifier	w
>2207	ExpressionStatement	 
>2208	AssignmentExpr	plane . dist = - clip -> plane . dist
>2209	UnaryOp	- clip -> plane . dist
>2210	MemberAccess	clip -> plane . dist
>2211	Identifier	dist
>2212	PtrMemberAccess	clip -> plane
>2213	Identifier	plane
>2214	Identifier	clip
>2215	UnaryOperator	-
>2216	MemberAccess	plane . dist
>2217	Identifier	dist
>2218	Identifier	plane
>2219	ExpressionStatement	 
>2220	CallExpression	VectorSubtract ( vec3_origin , clip -> plane . normal , plane . normal )
>2221	ArgumentList	vec3_origin
>2222	Argument	plane . normal
>2223	MemberAccess	plane . normal
>2224	Identifier	normal
>2225	Identifier	plane
>2226	Argument	clip -> plane . normal
>2227	MemberAccess	clip -> plane . normal
>2228	Identifier	normal
>2229	PtrMemberAccess	clip -> plane
>2230	Identifier	plane
>2231	Identifier	clip
>2232	Argument	vec3_origin
>2233	Identifier	vec3_origin
>2234	Callee	VectorSubtract
>2235	Identifier	VectorSubtract
>2236	IfStatement	if ( DotProduct ( face -> plane . normal , clip -> plane . normal ) > 0.999 && fabs ( face -> plane . dist - clip \
>2237	CompoundStatement	 
>2238	ContinueStatement	 
>2239	IfStatement	if ( past )
>2240	CompoundStatement	 
>2241	ReturnStatement	 
>2242	Identifier	NULL
>2243	ExpressionStatement	 
>2244	CallExpression	free ( w )
>2245	ArgumentList	w
>2246	Argument	w
>2247	Identifier	w
>2248	Callee	free
>2249	Identifier	free
>2250	Condition	 
>2251	Identifier	past
>2252	Condition	 
>2253	AndExpression	DotProduct ( face -> plane . normal , clip -> plane . normal ) > 0.999 && fabs ( face -> plane . dist \
>2254	RelationalExpression	fabs ( face -> plane . dist - clip -> plane . dist ) < 0.01
>2255	PrimaryExpression	0.01
>2256	CallExpression	fabs ( face -> plane . dist - clip -> plane . dist )
>2257	ArgumentList	face -> plane . dist - clip -> plane . dist
>2258	Argument	face -> plane . dist - clip -> plane . dist
>2259	AdditiveExpression	face -> plane . dist - clip -> plane . dist
>2260	MemberAccess	clip -> plane . dist
>2261	Identifier	dist
>2262	PtrMemberAccess	clip -> plane
>2263	Identifier	plane
>2264	Identifier	clip
>2265	MemberAccess	face -> plane . dist
>2266	Identifier	dist
>2267	PtrMemberAccess	face -> plane
>2268	Identifier	plane
>2269	Identifier	face
>2270	Callee	fabs
>2271	Identifier	fabs
>2272	RelationalExpression	DotProduct ( face -> plane . normal , clip -> plane . normal ) > 0.999
>2273	PrimaryExpression	0.999
>2274	CallExpression	DotProduct ( face -> plane . normal , clip -> plane . normal )
>2275	ArgumentList	face -> plane . normal
>2276	Argument	clip -> plane . normal
>2277	MemberAccess	clip -> plane . normal
>2278	Identifier	normal
>2279	PtrMemberAccess	clip -> plane
>2280	Identifier	plane
>2281	Identifier	clip
>2282	Argument	face -> plane . normal
>2283	MemberAccess	face -> plane . normal
>2284	Identifier	normal
>2285	PtrMemberAccess	face -> plane
>2286	Identifier	plane
>2287	Identifier	face
>2288	Callee	DotProduct
>2289	Identifier	DotProduct
>2290	IfStatement	if ( clip == face )
>2291	CompoundStatement	 
>2292	ContinueStatement	 
>2293	ExpressionStatement	 
>2294	AssignmentExpr	past = true
>2295	Identifier	true
>2296	Identifier	past
>2297	Condition	 
>2298	EqualityExpression	clip == face
>2299	Identifier	face
>2300	Identifier	clip
>2301	AssignmentExpr	 
>2302	PtrMemberAccess	clip -> next
>2303	Identifier	next
>2304	Identifier	clip
>2305	Identifier	clip
>2306	Condition	 
>2307	AndExpression	clip && w
>2308	Identifier	w
>2309	Identifier	clip
>2310	ForInit	 
>2311	AssignmentExpr	clip = b -> brush_faces
>2312	PtrMemberAccess	b -> brush_faces
>2313	Identifier	brush_faces
>2314	Identifier	b
>2315	Identifier	clip
>2316	ExpressionStatement	 
>2317	AssignmentExpr	past = false
>2318	Identifier	false
>2319	Identifier	past
>2320	ExpressionStatement	 
>2321	AssignmentExpr	w = Winding_BaseForPlane ( & face -> plane )
>2322	CallExpression	Winding_BaseForPlane ( & face -> plane )
>2323	ArgumentList	& face -> plane
>2324	Argument	& face -> plane
>2325	UnaryOp	& face -> plane
>2326	PtrMemberAccess	face -> plane
>2327	Identifier	plane
>2328	Identifier	face
>2329	UnaryOperator	&
>2330	Callee	Winding_BaseForPlane
>2331	Identifier	Winding_BaseForPlane
>2332	Identifier	w
>2333	IdentifierDeclStatement	 
>2334	IdentifierDecl	past
>2335	Identifier	past
>2336	IdentifierDeclType	qboolean
>2337	IdentifierDeclStatement	 
>2338	IdentifierDecl	plane
>2339	Identifier	plane
>2340	IdentifierDeclType	plane_t
>2341	IdentifierDeclStatement	 
>2342	IdentifierDecl	* clip
>2343	Identifier	clip
>2344	IdentifierDeclType	face_t *
>2345	IdentifierDeclStatement	 
>2346	IdentifierDecl	* w
>2347	Identifier	w
>2348	IdentifierDeclType	winding_t *
>2384	FunctionDef	Brush_SnapPlanepts (brush_t * b)
>2385	ParameterList	brush_t * b
>2386	Parameter	 
>2387	Identifier	b
>2388	ParameterType	brush_t *
>2389	ReturnType	void
>2390	CompoundStatement	 
>2391	ForStatement	for ( f = b -> brush_faces ; f ; f = f -> next )
>2392	ForStatement	for ( i = 0 ; i < 3 ; i ++ )
>2393	ForStatement	for ( j = 0 ; j < 3 ; j ++ )
>2394	ExpressionStatement	 
>2395	AssignmentExpr	f -> planepts [ i ] [ j ] = floor ( f -> planepts [ i ] [ j ] + 0.5 )
>2396	CallExpression	floor ( f -> planepts [ i ] [ j ] + 0.5 )
>2397	ArgumentList	f -> planepts [ i ] [ j ] + 0.5
>2398	Argument	f -> planepts [ i ] [ j ] + 0.5
>2399	AdditiveExpression	f -> planepts [ i ] [ j ] + 0.5
>2400	PrimaryExpression	0.5
>2401	ArrayIndexing	f -> planepts [ i ] [ j ]
>2402	Identifier	j
>2403	ArrayIndexing	f -> planepts [ i ]
>2404	Identifier	i
>2405	PtrMemberAccess	f -> planepts
>2406	Identifier	planepts
>2407	Identifier	f
>2408	Callee	floor
>2409	Identifier	floor
>2410	ArrayIndexing	f -> planepts [ i ] [ j ]
>2411	Identifier	j
>2412	ArrayIndexing	f -> planepts [ i ]
>2413	Identifier	i
>2414	PtrMemberAccess	f -> planepts
>2415	Identifier	planepts
>2416	Identifier	f
>2417	IncDecOp	 
>2418	IncDec	++
>2419	Identifier	j
>2420	Condition	 
>2421	RelationalExpression	j < 3
>2422	PrimaryExpression	3
>2423	Identifier	j
>2424	ForInit	 
>2425	AssignmentExpr	j = 0
>2426	PrimaryExpression	0
>2427	Identifier	j
>2428	IncDecOp	 
>2429	IncDec	++
>2430	Identifier	i
>2431	Condition	 
>2432	RelationalExpression	i < 3
>2433	PrimaryExpression	3
>2434	Identifier	i
>2435	ForInit	 
>2436	AssignmentExpr	i = 0
>2437	PrimaryExpression	0
>2438	Identifier	i
>2439	AssignmentExpr	 
>2440	PtrMemberAccess	f -> next
>2441	Identifier	next
>2442	Identifier	f
>2443	Identifier	f
>2444	Condition	 
>2445	Identifier	f
>2446	ForInit	 
>2447	AssignmentExpr	f = b -> brush_faces
>2448	PtrMemberAccess	b -> brush_faces
>2449	Identifier	brush_faces
>2450	Identifier	b
>2451	Identifier	f
>2452	IfStatement	if ( g_PrefsDlg . m_bNoClamp )
>2453	ReturnStatement	 
>2454	Condition	 
>2455	MemberAccess	g_PrefsDlg . m_bNoClamp
>2456	Identifier	m_bNoClamp
>2457	Identifier	g_PrefsDlg
>2458	IdentifierDeclStatement	 
>2459	IdentifierDecl	* f
>2460	Identifier	f
>2461	IdentifierDeclType	face_t *
>2462	IdentifierDeclStatement	 
>2463	IdentifierDecl	j
>2464	Identifier	j
>2465	IdentifierDeclType	int
>2466	IdentifierDecl	i
>2467	Identifier	i
>2468	IdentifierDeclType	int
>2491	FunctionDef	Brush_Build (brush_t * b , bool bSnap , bool bMarkMap , bool bConvert)
>2492	ParameterList	brush_t * b , bool bSnap , bool bMarkMap , bool bConvert
>2493	Parameter	 
>2494	Identifier	bConvert
>2495	ParameterType	bool
>2496	Parameter	 
>2497	Identifier	bMarkMap
>2498	ParameterType	bool
>2499	Parameter	 
>2500	Identifier	bSnap
>2501	ParameterType	bool
>2502	Parameter	 
>2503	Identifier	b
>2504	ParameterType	brush_t *
>2505	ReturnType	void
>2506	CompoundStatement	 
>2507	IfStatement	if ( bLocalConvert )
>2508	ExpressionStatement	 
>2509	AssignmentExpr	g_qeglobals . bNeedConvert = false
>2510	Identifier	false
>2511	MemberAccess	g_qeglobals . bNeedConvert
>2512	Identifier	bNeedConvert
>2513	Identifier	g_qeglobals
>2514	Condition	 
>2515	Identifier	bLocalConvert
>2516	IfStatement	if ( bMarkMap )
>2517	CompoundStatement	 
>2518	ExpressionStatement	 
>2519	CallExpression	Sys_MarkMapModified ( )
>2520	ArgumentList	 
>2521	Callee	Sys_MarkMapModified
>2522	Identifier	Sys_MarkMapModified
>2523	Condition	 
>2524	Identifier	bMarkMap
>2525	IfStatement	if ( b -> itemOwner == NULL )
>2526	ExpressionStatement	 
>2527	CallExpression	Group_AddToProperGroup ( b )
>2528	ArgumentList	b
>2529	Argument	b
>2530	Identifier	b
>2531	Callee	Group_AddToProperGroup
>2532	Identifier	Group_AddToProperGroup
>2533	Condition	 
>2534	EqualityExpression	b -> itemOwner == NULL
>2535	Identifier	NULL
>2536	PtrMemberAccess	b -> itemOwner
>2537	Identifier	itemOwner
>2538	Identifier	b
>2539	IfStatement	if ( g_qeglobals . d_select_mode == sel_vertex || g_qeglobals . d_select_mode == sel_edge )
>2540	ExpressionStatement	 
>2541	CallExpression	SetupVertexSelection ( )
>2542	ArgumentList	 
>2543	Callee	SetupVertexSelection
>2544	Identifier	SetupVertexSelection
>2545	Condition	 
>2546	OrExpression	g_qeglobals . d_select_mode == sel_vertex || g_qeglobals . d_select_mode == sel_edge
>2547	EqualityExpression	g_qeglobals . d_select_mode == sel_edge
>2548	Identifier	sel_edge
>2549	MemberAccess	g_qeglobals . d_select_mode
>2550	Identifier	d_select_mode
>2551	Identifier	g_qeglobals
>2552	EqualityExpression	g_qeglobals . d_select_mode == sel_vertex
>2553	Identifier	sel_vertex
>2554	MemberAccess	g_qeglobals . d_select_mode
>2555	Identifier	d_select_mode
>2556	Identifier	g_qeglobals
>2557	ExpressionStatement	 
>2558	CallExpression	Patch_BuildPoints ( b )
>2559	ArgumentList	b
>2560	Argument	b
>2561	Identifier	b
>2562	Callee	Patch_BuildPoints
>2563	Identifier	Patch_BuildPoints
>2564	ExpressionStatement	 
>2565	CallExpression	Brush_BuildWindings ( b , bSnap )
>2566	ArgumentList	b
>2567	Argument	bSnap
>2568	Identifier	bSnap
>2569	Argument	b
>2570	Identifier	b
>2571	Callee	Brush_BuildWindings
>2572	Identifier	Brush_BuildWindings
>2573	IfStatement	if ( bConvert && ! g_qeglobals . bNeedConvert )
>2574	CompoundStatement	 
>2575	ExpressionStatement	 
>2576	AssignmentExpr	g_qeglobals . bNeedConvert = true
>2577	Identifier	true
>2578	MemberAccess	g_qeglobals . bNeedConvert
>2579	Identifier	bNeedConvert
>2580	Identifier	g_qeglobals
>2581	ExpressionStatement	 
>2582	AssignmentExpr	bLocalConvert = true
>2583	Identifier	true
>2584	Identifier	bLocalConvert
>2585	Condition	 
>2586	AndExpression	bConvert && ! g_qeglobals . bNeedConvert
>2587	UnaryOp	! g_qeglobals . bNeedConvert
>2588	MemberAccess	g_qeglobals . bNeedConvert
>2589	Identifier	bNeedConvert
>2590	Identifier	g_qeglobals
>2591	UnaryOperator	!
>2592	Identifier	bConvert
>2593	IfStatement	if ( ! g_qeglobals . m_bBrushPrimitMode && bConvert )
>2594	ExpressionStatement	 
>2595	CallExpression	Sys_Printf ( \"Warning 
>2596	ArgumentList	\"Warning 
>2597	Argument	\"Warning 
>2598	PrimaryExpression	\"Warning 
>2599	Callee	Sys_Printf
>2600	Identifier	Sys_Printf
>2601	Condition	 
>2602	AndExpression	! g_qeglobals . m_bBrushPrimitMode && bConvert
>2603	Identifier	bConvert
>2604	UnaryOp	! g_qeglobals . m_bBrushPrimitMode
>2605	MemberAccess	g_qeglobals . m_bBrushPrimitMode
>2606	Identifier	m_bBrushPrimitMode
>2607	Identifier	g_qeglobals
>2608	UnaryOperator	!
>2609	IdentifierDeclStatement	 
>2610	IdentifierDecl	bLocalConvert
>2611	Identifier	bLocalConvert
>2612	IdentifierDeclType	bool
>2632	FunctionDef	Brush_SplitBrushByFace (brush_t * in , face_t * f , brush_t * * front , brush_t * * back)
>2633	ParameterList	brush_t * in , face_t * f , brush_t * * front , brush_t * * back
>2634	Parameter	 
>2635	Identifier	back
>2636	ParameterType	brush_t * *
>2637	Parameter	 
>2638	Identifier	front
>2639	ParameterType	brush_t * *
>2640	Parameter	 
>2641	Identifier	f
>2642	ParameterType	face_t *
>2643	Parameter	 
>2644	Identifier	in
>2645	ParameterType	brush_t *
>2646	ReturnType	void
>2647	CompoundStatement	 
>2648	IfStatement	if ( ! b -> brush_faces )
>2649	ElseStatement	else
>2650	CompoundStatement	 
>2651	ExpressionStatement	 
>2652	AssignmentExpr	* front = b
>2653	Identifier	b
>2654	UnaryOp	* front
>2655	Identifier	front
>2656	UnaryOperator	*
>2657	ExpressionStatement	 
>2658	CallExpression	Entity_LinkBrush ( in -> owner , b )
>2659	ArgumentList	in -> owner
>2660	Argument	b
>2661	Identifier	b
>2662	Argument	in -> owner
>2663	PtrMemberAccess	in -> owner
>2664	Identifier	owner
>2665	Identifier	in
>2666	Callee	Entity_LinkBrush
>2667	Identifier	Entity_LinkBrush
>2668	CompoundStatement	 
>2669	ExpressionStatement	 
>2670	AssignmentExpr	* front = NULL
>2671	Identifier	NULL
>2672	UnaryOp	* front
>2673	Identifier	front
>2674	UnaryOperator	*
>2675	ExpressionStatement	 
>2676	CallExpression	Brush_Free ( b )
>2677	ArgumentList	b
>2678	Argument	b
>2679	Identifier	b
>2680	Callee	Brush_Free
>2681	Identifier	Brush_Free
>2682	Condition	 
>2683	UnaryOp	! b -> brush_faces
>2684	PtrMemberAccess	b -> brush_faces
>2685	Identifier	brush_faces
>2686	Identifier	b
>2687	UnaryOperator	!
>2688	ExpressionStatement	 
>2689	CallExpression	Brush_RemoveEmptyFaces ( b )
>2690	ArgumentList	b
>2691	Argument	b
>2692	Identifier	b
>2693	Callee	Brush_RemoveEmptyFaces
>2694	Identifier	Brush_RemoveEmptyFaces
>2695	ExpressionStatement	 
>2696	CallExpression	Brush_Build ( b )
>2697	ArgumentList	b
>2698	Argument	b
>2699	Identifier	b
>2700	Callee	Brush_Build
>2701	Identifier	Brush_Build
>2702	ExpressionStatement	 
>2703	AssignmentExpr	b -> brush_faces = nf
>2704	Identifier	nf
>2705	PtrMemberAccess	b -> brush_faces
>2706	Identifier	brush_faces
>2707	Identifier	b
>2708	ExpressionStatement	 
>2709	AssignmentExpr	nf -> next = b -> brush_faces
>2710	PtrMemberAccess	b -> brush_faces
>2711	Identifier	brush_faces
>2712	Identifier	b
>2713	PtrMemberAccess	nf -> next
>2714	Identifier	next
>2715	Identifier	nf
>2716	ExpressionStatement	 
>2717	AssignmentExpr	nf -> texdef = b -> brush_faces -> texdef
>2718	PtrMemberAccess	b -> brush_faces -> texdef
>2719	Identifier	texdef
>2720	PtrMemberAccess	b -> brush_faces
>2721	Identifier	brush_faces
>2722	Identifier	b
>2723	PtrMemberAccess	nf -> texdef
>2724	Identifier	texdef
>2725	Identifier	nf
>2726	ExpressionStatement	 
>2727	CallExpression	VectorCopy ( temp , nf -> planepts [ 1 ] )
>2728	ArgumentList	temp
>2729	Argument	nf -> planepts [ 1 ]
>2730	ArrayIndexing	nf -> planepts [ 1 ]
>2731	PrimaryExpression	1
>2732	PtrMemberAccess	nf -> planepts
>2733	Identifier	planepts
>2734	Identifier	nf
>2735	Argument	temp
>2736	Identifier	temp
>2737	Callee	VectorCopy
>2738	Identifier	VectorCopy
>2739	ExpressionStatement	 
>2740	CallExpression	VectorCopy ( nf -> planepts [ 1 ] , nf -> planepts [ 0 ] )
>2741	ArgumentList	nf -> planepts [ 1 ]
>2742	Argument	nf -> planepts [ 0 ]
>2743	ArrayIndexing	nf -> planepts [ 0 ]
>2744	PrimaryExpression	0
>2745	PtrMemberAccess	nf -> planepts
>2746	Identifier	planepts
>2747	Identifier	nf
>2748	Argument	nf -> planepts [ 1 ]
>2749	ArrayIndexing	nf -> planepts [ 1 ]
>2750	PrimaryExpression	1
>2751	PtrMemberAccess	nf -> planepts
>2752	Identifier	planepts
>2753	Identifier	nf
>2754	Callee	VectorCopy
>2755	Identifier	VectorCopy
>2756	ExpressionStatement	 
>2757	CallExpression	VectorCopy ( nf -> planepts [ 0 ] , temp )
>2758	ArgumentList	nf -> planepts [ 0 ]
>2759	Argument	temp
>2760	Identifier	temp
>2761	Argument	nf -> planepts [ 0 ]
>2762	ArrayIndexing	nf -> planepts [ 0 ]
>2763	PrimaryExpression	0
>2764	PtrMemberAccess	nf -> planepts
>2765	Identifier	planepts
>2766	Identifier	nf
>2767	Callee	VectorCopy
>2768	Identifier	VectorCopy
>2769	ExpressionStatement	 
>2770	AssignmentExpr	nf = Face_Clone ( f )
>2771	CallExpression	Face_Clone ( f )
>2772	ArgumentList	f
>2773	Argument	f
>2774	Identifier	f
>2775	Callee	Face_Clone
>2776	Identifier	Face_Clone
>2777	Identifier	nf
>2778	ExpressionStatement	 
>2779	AssignmentExpr	b = Brush_Clone ( in )
>2780	CallExpression	Brush_Clone ( in )
>2781	ArgumentList	in
>2782	Argument	in
>2783	Identifier	in
>2784	Callee	Brush_Clone
>2785	Identifier	Brush_Clone
>2786	Identifier	b
>2787	IfStatement	if ( ! b -> brush_faces )
>2788	ElseStatement	else
>2789	CompoundStatement	 
>2790	ExpressionStatement	 
>2791	AssignmentExpr	* back = b
>2792	Identifier	b
>2793	UnaryOp	* back
>2794	Identifier	back
>2795	UnaryOperator	*
>2796	ExpressionStatement	 
>2797	CallExpression	Entity_LinkBrush ( in -> owner , b )
>2798	ArgumentList	in -> owner
>2799	Argument	b
>2800	Identifier	b
>2801	Argument	in -> owner
>2802	PtrMemberAccess	in -> owner
>2803	Identifier	owner
>2804	Identifier	in
>2805	Callee	Entity_LinkBrush
>2806	Identifier	Entity_LinkBrush
>2807	CompoundStatement	 
>2808	ExpressionStatement	 
>2809	AssignmentExpr	* back = NULL
>2810	Identifier	NULL
>2811	UnaryOp	* back
>2812	Identifier	back
>2813	UnaryOperator	*
>2814	ExpressionStatement	 
>2815	CallExpression	Brush_Free ( b )
>2816	ArgumentList	b
>2817	Argument	b
>2818	Identifier	b
>2819	Callee	Brush_Free
>2820	Identifier	Brush_Free
>2821	Condition	 
>2822	UnaryOp	! b -> brush_faces
>2823	PtrMemberAccess	b -> brush_faces
>2824	Identifier	brush_faces
>2825	Identifier	b
>2826	UnaryOperator	!
>2827	ExpressionStatement	 
>2828	CallExpression	Brush_RemoveEmptyFaces ( b )
>2829	ArgumentList	b
>2830	Argument	b
>2831	Identifier	b
>2832	Callee	Brush_RemoveEmptyFaces
>2833	Identifier	Brush_RemoveEmptyFaces
>2834	ExpressionStatement	 
>2835	CallExpression	Brush_Build ( b )
>2836	ArgumentList	b
>2837	Argument	b
>2838	Identifier	b
>2839	Callee	Brush_Build
>2840	Identifier	Brush_Build
>2841	ExpressionStatement	 
>2842	AssignmentExpr	b -> brush_faces = nf
>2843	Identifier	nf
>2844	PtrMemberAccess	b -> brush_faces
>2845	Identifier	brush_faces
>2846	Identifier	b
>2847	ExpressionStatement	 
>2848	AssignmentExpr	nf -> next = b -> brush_faces
>2849	PtrMemberAccess	b -> brush_faces
>2850	Identifier	brush_faces
>2851	Identifier	b
>2852	PtrMemberAccess	nf -> next
>2853	Identifier	next
>2854	Identifier	nf
>2855	ExpressionStatement	 
>2856	AssignmentExpr	nf -> texdef = b -> brush_faces -> texdef
>2857	PtrMemberAccess	b -> brush_faces -> texdef
>2858	Identifier	texdef
>2859	PtrMemberAccess	b -> brush_faces
>2860	Identifier	brush_faces
>2861	Identifier	b
>2862	PtrMemberAccess	nf -> texdef
>2863	Identifier	texdef
>2864	Identifier	nf
>2865	ExpressionStatement	 
>2866	AssignmentExpr	nf = Face_Clone ( f )
>2867	CallExpression	Face_Clone ( f )
>2868	ArgumentList	f
>2869	Argument	f
>2870	Identifier	f
>2871	Callee	Face_Clone
>2872	Identifier	Face_Clone
>2873	Identifier	nf
>2874	ExpressionStatement	 
>2875	AssignmentExpr	b = Brush_Clone ( in )
>2876	CallExpression	Brush_Clone ( in )
>2877	ArgumentList	in
>2878	Argument	in
>2879	Identifier	in
>2880	Callee	Brush_Clone
>2881	Identifier	Brush_Clone
>2882	Identifier	b
>2883	IdentifierDeclStatement	 
>2884	IdentifierDecl	temp
>2885	Identifier	temp
>2886	IdentifierDeclType	vec3_t
>2887	IdentifierDeclStatement	 
>2888	IdentifierDecl	* nf
>2889	Identifier	nf
>2890	IdentifierDeclType	face_t *
>2891	IdentifierDeclStatement	 
>2892	IdentifierDecl	* b
>2893	Identifier	b
>2894	IdentifierDeclType	brush_t *
>2923	FunctionDef	Brush_BestSplitFace (brush_t * b)
>2924	ParameterList	brush_t * b
>2925	Parameter	 
>2926	Identifier	b
>2927	ParameterType	brush_t *
>2928	ReturnType	face_t *
>2929	CompoundStatement	 
>2930	ReturnStatement	 
>2931	Identifier	bestface
>2932	ForStatement	for ( face = b -> brush_faces ; face ; face = face -> next )
>2933	CompoundStatement	 
>2934	IfStatement	if ( splits )
>2935	CompoundStatement	 
>2936	IfStatement	if ( value < bestvalue )
>2937	CompoundStatement	 
>2938	ExpressionStatement	 
>2939	AssignmentExpr	bestface = face
>2940	Identifier	face
>2941	Identifier	bestface
>2942	ExpressionStatement	 
>2943	AssignmentExpr	bestvalue = value
>2944	Identifier	value
>2945	Identifier	bestvalue
>2946	Condition	 
>2947	RelationalExpression	value < bestvalue
>2948	Identifier	bestvalue
>2949	Identifier	value
>2950	ExpressionStatement	 
>2951	AssignmentExpr	value = splits + 50 * tinywindings
>2952	AdditiveExpression	splits + 50 * tinywindings
>2953	MultiplicativeExpression	50 * tinywindings
>2954	Identifier	tinywindings
>2955	PrimaryExpression	50
>2956	Identifier	splits
>2957	Identifier	value
>2958	Condition	 
>2959	Identifier	splits
>2960	ForStatement	for ( f = b -> brush_faces ; f ; f = f -> next )
>2961	CompoundStatement	 
>2962	IfStatement	if ( ! front )
>2963	ElseStatement	else
>2964	IfStatement	if ( ! back )
>2965	ElseStatement	else
>2966	CompoundStatement	 
>2967	IfStatement	if ( Winding_IsTiny ( back ) )
>2968	ExpressionStatement	 
>2969	IncDecOp	tinywindings ++
>2970	IncDec	++
>2971	Identifier	tinywindings
>2972	Condition	 
>2973	CallExpression	Winding_IsTiny ( back )
>2974	ArgumentList	back
>2975	Argument	back
>2976	Identifier	back
>2977	Callee	Winding_IsTiny
>2978	Identifier	Winding_IsTiny
>2979	IfStatement	if ( Winding_IsTiny ( front ) )
>2980	ExpressionStatement	 
>2981	IncDecOp	tinywindings ++
>2982	IncDec	++
>2983	Identifier	tinywindings
>2984	Condition	 
>2985	CallExpression	Winding_IsTiny ( front )
>2986	ArgumentList	front
>2987	Argument	front
>2988	Identifier	front
>2989	Callee	Winding_IsTiny
>2990	Identifier	Winding_IsTiny
>2991	ExpressionStatement	 
>2992	IncDecOp	splits ++
>2993	IncDec	++
>2994	Identifier	splits
>2995	CompoundStatement	 
>2996	ExpressionStatement	 
>2997	CallExpression	Winding_Free ( front )
>2998	ArgumentList	front
>2999	Argument	front
>3000	Identifier	front
>3001	Callee	Winding_Free
>3002	Identifier	Winding_Free
>3003	Condition	 
>3004	UnaryOp	! back
>3005	Identifier	back
>3006	UnaryOperator	!
>3007	CompoundStatement	 
>3008	ExpressionStatement	 
>3009	CallExpression	Winding_Free ( back )
>3010	ArgumentList	back
>3011	Argument	back
>3012	Identifier	back
>3013	Callee	Winding_Free
>3014	Identifier	Winding_Free
>3015	Condition	 
>3016	UnaryOp	! front
>3017	Identifier	front
>3018	UnaryOperator	!
>3019	ExpressionStatement	 
>3020	CallExpression	Winding_SplitEpsilon ( f -> face_winding , face -> plane . normal , face -> plane . dist , 0.1 , & front , & back )
>3021	ArgumentList	f -> face_winding
>3022	Argument	& back
>3023	UnaryOp	& back
>3024	Identifier	back
>3025	UnaryOperator	&
>3026	Argument	& front
>3027	UnaryOp	& front
>3028	Identifier	front
>3029	UnaryOperator	&
>3030	Argument	0.1
>3031	PrimaryExpression	0.1
>3032	Argument	face -> plane . dist
>3033	MemberAccess	face -> plane . dist
>3034	Identifier	dist
>3035	PtrMemberAccess	face -> plane
>3036	Identifier	plane
>3037	Identifier	face
>3038	Argument	face -> plane . normal
>3039	MemberAccess	face -> plane . normal
>3040	Identifier	normal
>3041	PtrMemberAccess	face -> plane
>3042	Identifier	plane
>3043	Identifier	face
>3044	Argument	f -> face_winding
>3045	PtrMemberAccess	f -> face_winding
>3046	Identifier	face_winding
>3047	Identifier	f
>3048	Callee	Winding_SplitEpsilon
>3049	Identifier	Winding_SplitEpsilon
>3050	IfStatement	if ( f == face )
>3051	ContinueStatement	 
>3052	Condition	 
>3053	EqualityExpression	f == face
>3054	Identifier	face
>3055	Identifier	f
>3056	AssignmentExpr	 
>3057	PtrMemberAccess	f -> next
>3058	Identifier	next
>3059	Identifier	f
>3060	Identifier	f
>3061	Condition	 
>3062	Identifier	f
>3063	ForInit	 
>3064	AssignmentExpr	f = b -> brush_faces
>3065	PtrMemberAccess	b -> brush_faces
>3066	Identifier	brush_faces
>3067	Identifier	b
>3068	Identifier	f
>3069	ExpressionStatement	 
>3070	AssignmentExpr	tinywindings = 0
>3071	PrimaryExpression	0
>3072	Identifier	tinywindings
>3073	ExpressionStatement	 
>3074	AssignmentExpr	splits = 0
>3075	PrimaryExpression	0
>3076	Identifier	splits
>3077	AssignmentExpr	 
>3078	PtrMemberAccess	face -> next
>3079	Identifier	next
>3080	Identifier	face
>3081	Identifier	face
>3082	Condition	 
>3083	Identifier	face
>3084	ForInit	 
>3085	AssignmentExpr	face = b -> brush_faces
>3086	PtrMemberAccess	b -> brush_faces
>3087	Identifier	brush_faces
>3088	Identifier	b
>3089	Identifier	face
>3090	ExpressionStatement	 
>3091	AssignmentExpr	bestface = NULL
>3092	Identifier	NULL
>3093	Identifier	bestface
>3094	ExpressionStatement	 
>3095	AssignmentExpr	bestvalue = 999999
>3096	PrimaryExpression	999999
>3097	Identifier	bestvalue
>3098	IdentifierDeclStatement	 
>3099	IdentifierDecl	bestvalue
>3100	Identifier	bestvalue
>3101	IdentifierDeclType	int
>3102	IdentifierDecl	value
>3103	Identifier	value
>3104	IdentifierDeclType	int
>3105	IdentifierDecl	tinywindings
>3106	Identifier	tinywindings
>3107	IdentifierDeclType	int
>3108	IdentifierDecl	splits
>3109	Identifier	splits
>3110	IdentifierDeclType	int
>3111	IdentifierDeclStatement	 
>3112	IdentifierDecl	* back
>3113	Identifier	back
>3114	IdentifierDeclType	winding_t *
>3115	IdentifierDecl	* front
>3116	Identifier	front
>3117	IdentifierDeclType	winding_t *
>3118	IdentifierDeclStatement	 
>3119	IdentifierDecl	* bestface
>3120	Identifier	bestface
>3121	IdentifierDeclType	face_t *
>3122	IdentifierDecl	* f
>3123	Identifier	f
>3124	IdentifierDeclType	face_t *
>3125	IdentifierDecl	* face
>3126	Identifier	face
>3127	IdentifierDeclType	face_t *
>3155	FunctionDef	Brush_MakeConvexBrushes (brush_t * b)
>3156	ParameterList	brush_t * b
>3157	Parameter	 
>3158	Identifier	b
>3159	ParameterType	brush_t *
>3160	ReturnType	brush_t *
>3161	CompoundStatement	 
>3162	ReturnStatement	 
>3163	Identifier	b
>3164	IfStatement	if ( back )
>3165	CompoundStatement	 
>3166	ExpressionStatement	 
>3167	AssignmentExpr	end -> next = Brush_MakeConvexBrushes ( back )
>3168	CallExpression	Brush_MakeConvexBrushes ( back )
>3169	ArgumentList	back
>3170	Argument	back
>3171	Identifier	back
>3172	Callee	Brush_MakeConvexBrushes
>3173	Identifier	Brush_MakeConvexBrushes
>3174	PtrMemberAccess	end -> next
>3175	Identifier	next
>3176	Identifier	end
>3177	ForStatement	for ( end = b ; end -> next ; end = end -> next )
>3178	ExpressionStatement	 
>3179	AssignmentExpr	 
>3180	PtrMemberAccess	end -> next
>3181	Identifier	next
>3182	Identifier	end
>3183	Identifier	end
>3184	Condition	 
>3185	PtrMemberAccess	end -> next
>3186	Identifier	next
>3187	Identifier	end
>3188	ForInit	 
>3189	AssignmentExpr	end = b
>3190	Identifier	b
>3191	Identifier	end
>3192	Condition	 
>3193	Identifier	back
>3194	ExpressionStatement	 
>3195	AssignmentExpr	b = Brush_MakeConvexBrushes ( front )
>3196	CallExpression	Brush_MakeConvexBrushes ( front )
>3197	ArgumentList	front
>3198	Argument	front
>3199	Identifier	front
>3200	Callee	Brush_MakeConvexBrushes
>3201	Identifier	Brush_MakeConvexBrushes
>3202	Identifier	b
>3203	IfStatement	if ( ! front )
>3204	ReturnStatement	 
>3205	CallExpression	Brush_MakeConvexBrushes ( back )
>3206	ArgumentList	back
>3207	Argument	back
>3208	Identifier	back
>3209	Callee	Brush_MakeConvexBrushes
>3210	Identifier	Brush_MakeConvexBrushes
>3211	Condition	 
>3212	UnaryOp	! front
>3213	Identifier	front
>3214	UnaryOperator	!
>3215	ExpressionStatement	 
>3216	CallExpression	Brush_Free ( b )
>3217	ArgumentList	b
>3218	Argument	b
>3219	Identifier	b
>3220	Callee	Brush_Free
>3221	Identifier	Brush_Free
>3222	IfStatement	if ( ! front && ! back )
>3223	ReturnStatement	 
>3224	Identifier	b
>3225	Condition	 
>3226	AndExpression	! front && ! back
>3227	UnaryOp	! back
>3228	Identifier	back
>3229	UnaryOperator	!
>3230	UnaryOp	! front
>3231	Identifier	front
>3232	UnaryOperator	!
>3233	ExpressionStatement	 
>3234	CallExpression	Brush_SplitBrushByFace ( b , face , & front , & back )
>3235	ArgumentList	b
>3236	Argument	& back
>3237	UnaryOp	& back
>3238	Identifier	back
>3239	UnaryOperator	&
>3240	Argument	& front
>3241	UnaryOp	& front
>3242	Identifier	front
>3243	UnaryOperator	&
>3244	Argument	face
>3245	Identifier	face
>3246	Argument	b
>3247	Identifier	b
>3248	Callee	Brush_SplitBrushByFace
>3249	Identifier	Brush_SplitBrushByFace
>3250	IfStatement	if ( ! face )
>3251	ReturnStatement	 
>3252	Identifier	b
>3253	Condition	 
>3254	UnaryOp	! face
>3255	Identifier	face
>3256	UnaryOperator	!
>3257	ExpressionStatement	 
>3258	AssignmentExpr	face = Brush_BestSplitFace ( b )
>3259	CallExpression	Brush_BestSplitFace ( b )
>3260	ArgumentList	b
>3261	Argument	b
>3262	Identifier	b
>3263	Callee	Brush_BestSplitFace
>3264	Identifier	Brush_BestSplitFace
>3265	Identifier	face
>3266	ExpressionStatement	 
>3267	AssignmentExpr	b -> next = NULL
>3268	Identifier	NULL
>3269	PtrMemberAccess	b -> next
>3270	Identifier	next
>3271	Identifier	b
>3272	IdentifierDeclStatement	 
>3273	IdentifierDecl	* face
>3274	Identifier	face
>3275	IdentifierDeclType	face_t *
>3276	IdentifierDeclStatement	 
>3277	IdentifierDecl	* end
>3278	Identifier	end
>3279	IdentifierDeclType	brush_t *
>3280	IdentifierDecl	* back
>3281	Identifier	back
>3282	IdentifierDeclType	brush_t *
>3283	IdentifierDecl	* front
>3284	Identifier	front
>3285	IdentifierDeclType	brush_t *
>3303	FunctionDef	Brush_Convex (brush_t * b)
>3304	ParameterList	brush_t * b
>3305	Parameter	 
>3306	Identifier	b
>3307	ParameterType	brush_t *
>3308	ReturnType	int
>3309	CompoundStatement	 
>3310	ReturnStatement	 
>3311	Identifier	true
>3312	ForStatement	for ( face1 = b -> brush_faces ; face1 ; face1 = face1 -> next )
>3313	CompoundStatement	 
>3314	ForStatement	for ( face2 = b -> brush_faces ; face2 ; face2 = face2 -> next )
>3315	CompoundStatement	 
>3316	IfStatement	if ( Winding_PlanesConcave ( face1 -> face_winding , face2 -> face_winding , face1 -> plane . normal , face2 -> \
>3317	CompoundStatement	 
>3318	ReturnStatement	 
>3319	Identifier	false
>3320	Condition	 
>3321	CallExpression	Winding_PlanesConcave ( face1 -> face_winding , face2 -> face_winding , face1 -> plane . normal , face2 -> plane \
>3322	ArgumentList	face1 -> face_winding
>3323	Argument	face2 -> plane . dist
>3324	MemberAccess	face2 -> plane . dist
>3325	Identifier	dist
>3326	PtrMemberAccess	face2 -> plane
>3327	Identifier	plane
>3328	Identifier	face2
>3329	Argument	face1 -> plane . dist
>3330	MemberAccess	face1 -> plane . dist
>3331	Identifier	dist
>3332	PtrMemberAccess	face1 -> plane
>3333	Identifier	plane
>3334	Identifier	face1
>3335	Argument	face2 -> plane . normal
>3336	MemberAccess	face2 -> plane . normal
>3337	Identifier	normal
>3338	PtrMemberAccess	face2 -> plane
>3339	Identifier	plane
>3340	Identifier	face2
>3341	Argument	face1 -> plane . normal
>3342	MemberAccess	face1 -> plane . normal
>3343	Identifier	normal
>3344	PtrMemberAccess	face1 -> plane
>3345	Identifier	plane
>3346	Identifier	face1
>3347	Argument	face2 -> face_winding
>3348	PtrMemberAccess	face2 -> face_winding
>3349	Identifier	face_winding
>3350	Identifier	face2
>3351	Argument	face1 -> face_winding
>3352	PtrMemberAccess	face1 -> face_winding
>3353	Identifier	face_winding
>3354	Identifier	face1
>3355	Callee	Winding_PlanesConcave
>3356	Identifier	Winding_PlanesConcave
>3357	IfStatement	if ( ! face2 -> face_winding )
>3358	ContinueStatement	 
>3359	Condition	 
>3360	UnaryOp	! face2 -> face_winding
>3361	PtrMemberAccess	face2 -> face_winding
>3362	Identifier	face_winding
>3363	Identifier	face2
>3364	UnaryOperator	!
>3365	IfStatement	if ( face1 == face2 )
>3366	ContinueStatement	 
>3367	Condition	 
>3368	EqualityExpression	face1 == face2
>3369	Identifier	face2
>3370	Identifier	face1
>3371	AssignmentExpr	 
>3372	PtrMemberAccess	face2 -> next
>3373	Identifier	next
>3374	Identifier	face2
>3375	Identifier	face2
>3376	Condition	 
>3377	Identifier	face2
>3378	ForInit	 
>3379	AssignmentExpr	face2 = b -> brush_faces
>3380	PtrMemberAccess	b -> brush_faces
>3381	Identifier	brush_faces
>3382	Identifier	b
>3383	Identifier	face2
>3384	IfStatement	if ( ! face1 -> face_winding )
>3385	ContinueStatement	 
>3386	Condition	 
>3387	UnaryOp	! face1 -> face_winding
>3388	PtrMemberAccess	face1 -> face_winding
>3389	Identifier	face_winding
>3390	Identifier	face1
>3391	UnaryOperator	!
>3392	AssignmentExpr	 
>3393	PtrMemberAccess	face1 -> next
>3394	Identifier	next
>3395	Identifier	face1
>3396	Identifier	face1
>3397	Condition	 
>3398	Identifier	face1
>3399	ForInit	 
>3400	AssignmentExpr	face1 = b -> brush_faces
>3401	PtrMemberAccess	b -> brush_faces
>3402	Identifier	brush_faces
>3403	Identifier	b
>3404	Identifier	face1
>3405	IdentifierDeclStatement	 
>3406	IdentifierDecl	* face2
>3407	Identifier	face2
>3408	IdentifierDeclType	face_t *
>3409	IdentifierDecl	* face1
>3410	Identifier	face1
>3411	IdentifierDeclType	face_t *
>3435	FunctionDef	Brush_MoveVertex_old1 (brush_t * b , vec3_t vertex , vec3_t delta , vec3_t end , bool bSnap)
>3436	ParameterList	brush_t * b , vec3_t vertex , vec3_t delta , vec3_t end , bool bSnap
>3437	Parameter	 
>3438	Identifier	bSnap
>3439	ParameterType	bool
>3440	Parameter	 
>3441	Identifier	end
>3442	ParameterType	vec3_t
>3443	Parameter	 
>3444	Identifier	delta
>3445	ParameterType	vec3_t
>3446	Parameter	 
>3447	Identifier	vertex
>3448	ParameterType	vec3_t
>3449	Parameter	 
>3450	Identifier	b
>3451	ParameterType	brush_t *
>3452	ReturnType	int
>3453	CompoundStatement	 
>3454	ReturnStatement	 
>3455	Identifier	result
>3456	ForStatement	for ( face = b -> brush_faces ; face ; face = nextface )
>3457	CompoundStatement	 
>3458	ExpressionStatement	 
>3459	CallExpression	Face_Free ( face )
>3460	ArgumentList	face
>3461	Argument	face
>3462	Identifier	face
>3463	Callee	Face_Free
>3464	Identifier	Face_Free
>3465	IfStatement	if ( lastface )
>3466	ElseStatement	else
>3467	ExpressionStatement	 
>3468	AssignmentExpr	b -> brush_faces = face -> next
>3469	PtrMemberAccess	face -> next
>3470	Identifier	next
>3471	Identifier	face
>3472	PtrMemberAccess	b -> brush_faces
>3473	Identifier	brush_faces
>3474	Identifier	b
>3475	ExpressionStatement	 
>3476	AssignmentExpr	lastface -> next = face -> next
>3477	PtrMemberAccess	face -> next
>3478	Identifier	next
>3479	Identifier	face
>3480	PtrMemberAccess	lastface -> next
>3481	Identifier	next
>3482	Identifier	lastface
>3483	Condition	 
>3484	Identifier	lastface
>3485	ForStatement	for ( j = 0 ; j < face -> original -> face_winding -> numpoints ; j ++ )
>3486	ExpressionStatement	 
>3487	CallExpression	EmitTextureCoordinates ( face -> original -> face_winding -> points [ j ] , face -> original -> d_texture , face \
>3488	ArgumentList	face -> original -> face_winding -> points [ j ]
>3489	Argument	face -> original
>3490	PtrMemberAccess	face -> original
>3491	Identifier	original
>3492	Identifier	face
>3493	Argument	face -> original -> d_texture
>3494	PtrMemberAccess	face -> original -> d_texture
>3495	Identifier	d_texture
>3496	PtrMemberAccess	face -> original
>3497	Identifier	original
>3498	Identifier	face
>3499	Argument	face -> original -> face_winding -> points [ j ]
>3500	ArrayIndexing	face -> original -> face_winding -> points [ j ]
>3501	Identifier	j
>3502	PtrMemberAccess	face -> original -> face_winding -> points
>3503	Identifier	points
>3504	PtrMemberAccess	face -> original -> face_winding
>3505	Identifier	face_winding
>3506	PtrMemberAccess	face -> original
>3507	Identifier	original
>3508	Identifier	face
>3509	Callee	EmitTextureCoordinates
>3510	Identifier	EmitTextureCoordinates
>3511	IncDecOp	 
>3512	IncDec	++
>3513	Identifier	j
>3514	Condition	 
>3515	RelationalExpression	j < face -> original -> face_winding -> numpoints
>3516	PtrMemberAccess	face -> original -> face_winding -> numpoints
>3517	Identifier	numpoints
>3518	PtrMemberAccess	face -> original -> face_winding
>3519	Identifier	face_winding
>3520	PtrMemberAccess	face -> original
>3521	Identifier	original
>3522	Identifier	face
>3523	Identifier	j
>3524	ForInit	 
>3525	AssignmentExpr	j = 0
>3526	PrimaryExpression	0
>3527	Identifier	j
>3528	ExpressionStatement	 
>3529	CallExpression	Face_SetColor ( b , face -> original , 1.0 )
>3530	ArgumentList	b
>3531	Argument	1.0
>3532	PrimaryExpression	1.0
>3533	Argument	face -> original
>3534	PtrMemberAccess	face -> original
>3535	Identifier	original
>3536	Identifier	face
>3537	Argument	b
>3538	Identifier	b
>3539	Callee	Face_SetColor
>3540	Identifier	Face_SetColor
>3541	ExpressionStatement	 
>3542	AssignmentExpr	face -> original -> face_winding = w
>3543	Identifier	w
>3544	PtrMemberAccess	face -> original -> face_winding
>3545	Identifier	face_winding
>3546	PtrMemberAccess	face -> original
>3547	Identifier	original
>3548	Identifier	face
>3549	ExpressionStatement	 
>3550	CallExpression	Winding_Free ( face -> original -> face_winding )
>3551	ArgumentList	face -> original -> face_winding
>3552	Argument	face -> original -> face_winding
>3553	PtrMemberAccess	face -> original -> face_winding
>3554	Identifier	face_winding
>3555	PtrMemberAccess	face -> original
>3556	Identifier	original
>3557	Identifier	face
>3558	Callee	Winding_Free
>3559	Identifier	Winding_Free
>3560	IfStatement	if ( ! w )
>3561	CompoundStatement	 
>3562	ContinueStatement	 
>3563	ExpressionStatement	 
>3564	AssignmentExpr	lastface = face
>3565	Identifier	face
>3566	Identifier	lastface
>3567	Condition	 
>3568	UnaryOp	! w
>3569	Identifier	w
>3570	UnaryOperator	!
>3571	ExpressionStatement	 
>3572	AssignmentExpr	w = Winding_TryMerge ( face -> face_winding , face -> original -> face_winding , face -> plane . normal , \
>3573	CallExpression	Winding_TryMerge ( face -> face_winding , face -> original -> face_winding , face -> plane . normal , true )
>3574	ArgumentList	face -> face_winding
>3575	Argument	true
>3576	Identifier	true
>3577	Argument	face -> plane . normal
>3578	MemberAccess	face -> plane . normal
>3579	Identifier	normal
>3580	PtrMemberAccess	face -> plane
>3581	Identifier	plane
>3582	Identifier	face
>3583	Argument	face -> original -> face_winding
>3584	PtrMemberAccess	face -> original -> face_winding
>3585	Identifier	face_winding
>3586	PtrMemberAccess	face -> original
>3587	Identifier	original
>3588	Identifier	face
>3589	Argument	face -> face_winding
>3590	PtrMemberAccess	face -> face_winding
>3591	Identifier	face_winding
>3592	Identifier	face
>3593	Callee	Winding_TryMerge
>3594	Identifier	Winding_TryMerge
>3595	Identifier	w
>3596	IfStatement	if ( ! Plane_Equal ( & face -> plane , & face -> original -> plane , false ) )
>3597	CompoundStatement	 
>3598	ContinueStatement	 
>3599	ExpressionStatement	 
>3600	AssignmentExpr	lastface = face
>3601	Identifier	face
>3602	Identifier	lastface
>3603	Condition	 
>3604	UnaryOp	! Plane_Equal ( & face -> plane , & face -> original -> plane , false )
>3605	CallExpression	Plane_Equal ( & face -> plane , & face -> original -> plane , false )
>3606	ArgumentList	& face -> plane
>3607	Argument	false
>3608	Identifier	false
>3609	Argument	& face -> original -> plane
>3610	UnaryOp	& face -> original -> plane
>3611	PtrMemberAccess	face -> original -> plane
>3612	Identifier	plane
>3613	PtrMemberAccess	face -> original
>3614	Identifier	original
>3615	Identifier	face
>3616	UnaryOperator	&
>3617	Argument	& face -> plane
>3618	UnaryOp	& face -> plane
>3619	PtrMemberAccess	face -> plane
>3620	Identifier	plane
>3621	Identifier	face
>3622	UnaryOperator	&
>3623	Callee	Plane_Equal
>3624	Identifier	Plane_Equal
>3625	UnaryOperator	!
>3626	IfStatement	if ( ! face -> original )
>3627	CompoundStatement	 
>3628	ContinueStatement	 
>3629	ExpressionStatement	 
>3630	AssignmentExpr	lastface = face
>3631	Identifier	face
>3632	Identifier	lastface
>3633	Condition	 
>3634	UnaryOp	! face -> original
>3635	PtrMemberAccess	face -> original
>3636	Identifier	original
>3637	Identifier	face
>3638	UnaryOperator	!
>3639	ExpressionStatement	 
>3640	AssignmentExpr	nextface = face -> next
>3641	PtrMemberAccess	face -> next
>3642	Identifier	next
>3643	Identifier	face
>3644	Identifier	nextface
>3645	AssignmentExpr	 
>3646	Identifier	nextface
>3647	Identifier	face
>3648	Condition	 
>3649	Identifier	face
>3650	ForInit	 
>3651	AssignmentExpr	face = b -> brush_faces
>3652	PtrMemberAccess	b -> brush_faces
>3653	Identifier	brush_faces
>3654	Identifier	b
>3655	Identifier	face
>3656	ExpressionStatement	 
>3657	AssignmentExpr	lastface = NULL
>3658	Identifier	NULL
>3659	Identifier	lastface
>3660	ForStatement	for ( i = 0 ; i < nummovefaces ; i ++ )
>3661	CompoundStatement	 
>3662	ForStatement	for ( j = 0 ; j < movefaces [ i ] -> face_winding -> numpoints ; j ++ )
>3663	ExpressionStatement	 
>3664	CallExpression	EmitTextureCoordinates ( movefaces [ i ] -> face_winding -> points [ j ] , movefaces [ i ] -> d_texture , movefaces [ \
>3665	ArgumentList	movefaces [ i ] -> face_winding -> points [ j ]
>3666	Argument	movefaces [ i ]
>3667	ArrayIndexing	movefaces [ i ]
>3668	Identifier	i
>3669	Identifier	movefaces
>3670	Argument	movefaces [ i ] -> d_texture
>3671	PtrMemberAccess	movefaces [ i ] -> d_texture
>3672	Identifier	d_texture
>3673	ArrayIndexing	movefaces [ i ]
>3674	Identifier	i
>3675	Identifier	movefaces
>3676	Argument	movefaces [ i ] -> face_winding -> points [ j ]
>3677	ArrayIndexing	movefaces [ i ] -> face_winding -> points [ j ]
>3678	Identifier	j
>3679	PtrMemberAccess	movefaces [ i ] -> face_winding -> points
>3680	Identifier	points
>3681	PtrMemberAccess	movefaces [ i ] -> face_winding
>3682	Identifier	face_winding
>3683	ArrayIndexing	movefaces [ i ]
>3684	Identifier	i
>3685	Identifier	movefaces
>3686	Callee	EmitTextureCoordinates
>3687	Identifier	EmitTextureCoordinates
>3688	IncDecOp	 
>3689	IncDec	++
>3690	Identifier	j
>3691	Condition	 
>3692	RelationalExpression	j < movefaces [ i ] -> face_winding -> numpoints
>3693	PtrMemberAccess	movefaces [ i ] -> face_winding -> numpoints
>3694	Identifier	numpoints
>3695	PtrMemberAccess	movefaces [ i ] -> face_winding
>3696	Identifier	face_winding
>3697	ArrayIndexing	movefaces [ i ]
>3698	Identifier	i
>3699	Identifier	movefaces
>3700	Identifier	j
>3701	ForInit	 
>3702	AssignmentExpr	j = 0
>3703	PrimaryExpression	0
>3704	Identifier	j
>3705	ExpressionStatement	 
>3706	CallExpression	Face_SetColor ( b , movefaces [ i ] , 1.0 )
>3707	ArgumentList	b
>3708	Argument	1.0
>3709	PrimaryExpression	1.0
>3710	Argument	movefaces [ i ]
>3711	ArrayIndexing	movefaces [ i ]
>3712	Identifier	i
>3713	Identifier	movefaces
>3714	Argument	b
>3715	Identifier	b
>3716	Callee	Face_SetColor
>3717	Identifier	Face_SetColor
>3718	IncDecOp	 
>3719	IncDec	++
>3720	Identifier	i
>3721	Condition	 
>3722	RelationalExpression	i < nummovefaces
>3723	Identifier	nummovefaces
>3724	Identifier	i
>3725	ForInit	 
>3726	AssignmentExpr	i = 0
>3727	PrimaryExpression	0
>3728	Identifier	i
>3729	IfStatement	if ( ! face )
>3730	CompoundStatement	 
>3731	ExpressionStatement	 
>3732	AssignmentExpr	result = true
>3733	Identifier	true
>3734	Identifier	result
>3735	ForStatement	for ( i = 0 ; i < nummovefaces ; i ++ )
>3736	CompoundStatement	 
>3737	ExpressionStatement	 
>3738	CallExpression	Face_MakePlane ( movefaces [ i ] )
>3739	ArgumentList	movefaces [ i ]
>3740	Argument	movefaces [ i ]
>3741	ArrayIndexing	movefaces [ i ]
>3742	Identifier	i
>3743	Identifier	movefaces
>3744	Callee	Face_MakePlane
>3745	Identifier	Face_MakePlane
>3746	ForStatement	for ( j = 0 ; j < 3 ; j ++ )
>3747	CompoundStatement	 
>3748	ExpressionStatement	 
>3749	CallExpression	VectorCopy ( movefaces [ i ] -> face_winding -> points [ j ] , movefaces [ i ] -> planepts [ j ] )
>3750	ArgumentList	movefaces [ i ] -> face_winding -> points [ j ]
>3751	Argument	movefaces [ i ] -> planepts [ j ]
>3752	ArrayIndexing	movefaces [ i ] -> planepts [ j ]
>3753	Identifier	j
>3754	PtrMemberAccess	movefaces [ i ] -> planepts
>3755	Identifier	planepts
>3756	ArrayIndexing	movefaces [ i ]
>3757	Identifier	i
>3758	Identifier	movefaces
>3759	Argument	movefaces [ i ] -> face_winding -> points [ j ]
>3760	ArrayIndexing	movefaces [ i ] -> face_winding -> points [ j ]
>3761	Identifier	j
>3762	PtrMemberAccess	movefaces [ i ] -> face_winding -> points
>3763	Identifier	points
>3764	PtrMemberAccess	movefaces [ i ] -> face_winding
>3765	Identifier	face_winding
>3766	ArrayIndexing	movefaces [ i ]
>3767	Identifier	i
>3768	Identifier	movefaces
>3769	Callee	VectorCopy
>3770	Identifier	VectorCopy
>3771	IncDecOp	 
>3772	IncDec	++
>3773	Identifier	j
>3774	Condition	 
>3775	RelationalExpression	j < 3
>3776	PrimaryExpression	3
>3777	Identifier	j
>3778	ForInit	 
>3779	AssignmentExpr	j = 0
>3780	PrimaryExpression	0
>3781	Identifier	j
>3782	ExpressionStatement	 
>3783	CallExpression	VectorCopy ( end , movefaces [ i ] -> face_winding -> points [ movefacepoints [ i ] ] )
>3784	ArgumentList	end
>3785	Argument	movefaces [ i ] -> face_winding -> points [ movefacepoints [ i ] ]
>3786	ArrayIndexing	movefaces [ i ] -> face_winding -> points [ movefacepoints [ i ] ]
>3787	ArrayIndexing	movefacepoints [ i ]
>3788	Identifier	i
>3789	Identifier	movefacepoints
>3790	PtrMemberAccess	movefaces [ i ] -> face_winding -> points
>3791	Identifier	points
>3792	PtrMemberAccess	movefaces [ i ] -> face_winding
>3793	Identifier	face_winding
>3794	ArrayIndexing	movefaces [ i ]
>3795	Identifier	i
>3796	Identifier	movefaces
>3797	Argument	end
>3798	Identifier	end
>3799	Callee	VectorCopy
>3800	Identifier	VectorCopy
>3801	IncDecOp	 
>3802	IncDec	++
>3803	Identifier	i
>3804	Condition	 
>3805	RelationalExpression	i < nummovefaces
>3806	Identifier	nummovefaces
>3807	Identifier	i
>3808	ForInit	 
>3809	AssignmentExpr	i = 0
>3810	PrimaryExpression	0
>3811	Identifier	i
>3812	Condition	 
>3813	UnaryOp	! face
>3814	Identifier	face
>3815	UnaryOperator	!
>3816	ForStatement	for ( face = b -> brush_faces ; face ; face = face -> next )
>3817	CompoundStatement	 
>3818	IfStatement	if ( i < nummovefaces )
>3819	BreakStatement	 
>3820	Condition	 
>3821	RelationalExpression	i < nummovefaces
>3822	Identifier	nummovefaces
>3823	Identifier	i
>3824	ForStatement	for ( i = 0 ; i < nummovefaces ; i ++ )
>3825	CompoundStatement	 
>3826	IfStatement	if ( k <= 1 )
>3827	BreakStatement	 
>3828	Condition	 
>3829	RelationalExpression	k <= 1
>3830	PrimaryExpression	1
>3831	Identifier	k
>3832	ForStatement	for ( k = - 1 ; k <= 1 ; k += 2 )
>3833	CompoundStatement	 
>3834	IfStatement	if ( l < w2 -> numpoints )
>3835	CompoundStatement	 
>3836	BreakStatement	 
>3837	Condition	 
>3838	RelationalExpression	l < w2 -> numpoints
>3839	PtrMemberAccess	w2 -> numpoints
>3840	Identifier	numpoints
>3841	Identifier	w2
>3842	Identifier	l
>3843	ForStatement	for ( l = 0 ; l < w2 -> numpoints ; l ++ )
>3844	CompoundStatement	 
>3845	IfStatement	if ( Winding_VectorIntersect ( & tmpw , & plane , p1 , p2 , INTERSECT_EPSILON ) )
>3846	BreakStatement	 
>3847	Condition	 
>3848	CallExpression	Winding_VectorIntersect ( & tmpw , & plane , p1 , p2 , INTERSECT_EPSILON )
>3849	ArgumentList	& tmpw
>3850	Argument	INTERSECT_EPSILON
>3851	Identifier	INTERSECT_EPSILON
>3852	Argument	p2
>3853	Identifier	p2
>3854	Argument	p1
>3855	Identifier	p1
>3856	Argument	& plane
>3857	UnaryOp	& plane
>3858	Identifier	plane
>3859	UnaryOperator	&
>3860	Argument	& tmpw
>3861	UnaryOp	& tmpw
>3862	Identifier	tmpw
>3863	UnaryOperator	&
>3864	Callee	Winding_VectorIntersect
>3865	Identifier	Winding_VectorIntersect
>3866	IfStatement	if ( Point_Equal ( p2 , tmpw . points [ 0 ] , POINT_EPSILON ) )
>3867	ContinueStatement	 
>3868	Condition	 
>3869	CallExpression	Point_Equal ( p2 , tmpw . points [ 0 ] , POINT_EPSILON )
>3870	ArgumentList	p2
>3871	Argument	POINT_EPSILON
>3872	Identifier	POINT_EPSILON
>3873	Argument	tmpw . points [ 0 ]
>3874	ArrayIndexing	tmpw . points [ 0 ]
>3875	PrimaryExpression	0
>3876	MemberAccess	tmpw . points
>3877	Identifier	points
>3878	Identifier	tmpw
>3879	Argument	p2
>3880	Identifier	p2
>3881	Callee	Point_Equal
>3882	Identifier	Point_Equal
>3883	ExpressionStatement	 
>3884	CallExpression	VectorCopy ( w2 -> points [ ( l + 1 ) % w2 -> numpoints ] , p2 )
>3885	ArgumentList	w2 -> points [ ( l + 1 ) % w2 -> numpoints ]
>3886	Argument	p2
>3887	Identifier	p2
>3888	Argument	w2 -> points [ ( l + 1 ) % w2 -> numpoints ]
>3889	ArrayIndexing	w2 -> points [ ( l + 1 ) % w2 -> numpoints ]
>3890	MultiplicativeExpression	( l + 1 ) % w2 -> numpoints
>3891	PtrMemberAccess	w2 -> numpoints
>3892	Identifier	numpoints
>3893	Identifier	w2
>3894	AdditiveExpression	l + 1
>3895	PrimaryExpression	1
>3896	Identifier	l
>3897	PtrMemberAccess	w2 -> points
>3898	Identifier	points
>3899	Identifier	w2
>3900	Callee	VectorCopy
>3901	Identifier	VectorCopy
>3902	IfStatement	if ( Point_Equal ( p1 , tmpw . points [ 0 ] , POINT_EPSILON ) )
>3903	ContinueStatement	 
>3904	Condition	 
>3905	CallExpression	Point_Equal ( p1 , tmpw . points [ 0 ] , POINT_EPSILON )
>3906	ArgumentList	p1
>3907	Argument	POINT_EPSILON
>3908	Identifier	POINT_EPSILON
>3909	Argument	tmpw . points [ 0 ]
>3910	ArrayIndexing	tmpw . points [ 0 ]
>3911	PrimaryExpression	0
>3912	MemberAccess	tmpw . points
>3913	Identifier	points
>3914	Identifier	tmpw
>3915	Argument	p1
>3916	Identifier	p1
>3917	Callee	Point_Equal
>3918	Identifier	Point_Equal
>3919	ExpressionStatement	 
>3920	CallExpression	VectorCopy ( w2 -> points [ l ] , p1 )
>3921	ArgumentList	w2 -> points [ l ]
>3922	Argument	p1
>3923	Identifier	p1
>3924	Argument	w2 -> points [ l ]
>3925	ArrayIndexing	w2 -> points [ l ]
>3926	Identifier	l
>3927	PtrMemberAccess	w2 -> points
>3928	Identifier	points
>3929	Identifier	w2
>3930	Callee	VectorCopy
>3931	Identifier	VectorCopy
>3932	IncDecOp	 
>3933	IncDec	++
>3934	Identifier	l
>3935	Condition	 
>3936	RelationalExpression	l < w2 -> numpoints
>3937	PtrMemberAccess	w2 -> numpoints
>3938	Identifier	numpoints
>3939	Identifier	w2
>3940	Identifier	l
>3941	ForInit	 
>3942	AssignmentExpr	l = 0
>3943	PrimaryExpression	0
>3944	Identifier	l
>3945	ExpressionStatement	 
>3946	AssignmentExpr	w2 = face -> face_winding
>3947	PtrMemberAccess	face -> face_winding
>3948	Identifier	face_winding
>3949	Identifier	face
>3950	Identifier	w2
>3951	ExpressionStatement	 
>3952	CallExpression	Winding_Plane ( & tmpw , plane . normal , & plane . dist )
>3953	ArgumentList	& tmpw
>3954	Argument	& plane . dist
>3955	UnaryOp	& plane . dist
>3956	MemberAccess	plane . dist
>3957	Identifier	dist
>3958	Identifier	plane
>3959	UnaryOperator	&
>3960	Argument	plane . normal
>3961	MemberAccess	plane . normal
>3962	Identifier	normal
>3963	Identifier	plane
>3964	Argument	& tmpw
>3965	UnaryOp	& tmpw
>3966	Identifier	tmpw
>3967	UnaryOperator	&
>3968	Callee	Winding_Plane
>3969	Identifier	Winding_Plane
>3970	IfStatement	if ( Winding_VectorIntersect ( face -> face_winding , & face -> plane , tmpw . points [ 0 ] , end , INTERSECT_EPSILON ) )
>3971	CompoundStatement	 
>3972	Condition	 
>3973	CallExpression	Winding_VectorIntersect ( face -> face_winding , & face -> plane , tmpw . points [ 0 ] , end , INTERSECT_EPSILON )
>3974	ArgumentList	face -> face_winding
>3975	Argument	INTERSECT_EPSILON
>3976	Identifier	INTERSECT_EPSILON
>3977	Argument	end
>3978	Identifier	end
>3979	Argument	tmpw . points [ 0 ]
>3980	ArrayIndexing	tmpw . points [ 0 ]
>3981	PrimaryExpression	0
>3982	MemberAccess	tmpw . points
>3983	Identifier	points
>3984	Identifier	tmpw
>3985	Argument	& face -> plane
>3986	UnaryOp	& face -> plane
>3987	PtrMemberAccess	face -> plane
>3988	Identifier	plane
>3989	Identifier	face
>3990	UnaryOperator	&
>3991	Argument	face -> face_winding
>3992	PtrMemberAccess	face -> face_winding
>3993	Identifier	face_winding
>3994	Identifier	face
>3995	Callee	Winding_VectorIntersect
>3996	Identifier	Winding_VectorIntersect
>3997	ExpressionStatement	 
>3998	CallExpression	VectorCopy ( w -> points [ ( j + k + w -> numpoints ) % w -> numpoints ] , tmpw . points [ 0 ] )
>3999	ArgumentList	w -> points [ ( j + k + w -> numpoints ) % w -> numpoints ]
>4000	Argument	tmpw . points [ 0 ]
>4001	ArrayIndexing	tmpw . points [ 0 ]
>4002	PrimaryExpression	0
>4003	MemberAccess	tmpw . points
>4004	Identifier	points
>4005	Identifier	tmpw
>4006	Argument	w -> points [ ( j + k + w -> numpoints ) % w -> numpoints ]
>4007	ArrayIndexing	w -> points [ ( j + k + w -> numpoints ) % w -> numpoints ]
>4008	MultiplicativeExpression	( j + k + w -> numpoints ) % w -> numpoints
>4009	PtrMemberAccess	w -> numpoints
>4010	Identifier	numpoints
>4011	Identifier	w
>4012	AdditiveExpression	j + k + w -> numpoints
>4013	AdditiveExpression	k + w -> numpoints
>4014	PtrMemberAccess	w -> numpoints
>4015	Identifier	numpoints
>4016	Identifier	w
>4017	Identifier	k
>4018	Identifier	j
>4019	PtrMemberAccess	w -> points
>4020	Identifier	points
>4021	Identifier	w
>4022	Callee	VectorCopy
>4023	Identifier	VectorCopy
>4024	AssignmentExpr	 
>4025	PrimaryExpression	2
>4026	Identifier	k
>4027	Condition	 
>4028	RelationalExpression	k <= 1
>4029	PrimaryExpression	1
>4030	Identifier	k
>4031	ForInit	 
>4032	AssignmentExpr	k = - 1
>4033	UnaryOp	- 1
>4034	PrimaryExpression	1
>4035	UnaryOperator	-
>4036	Identifier	k
>4037	ExpressionStatement	 
>4038	AssignmentExpr	j = movefacepoints [ i ]
>4039	ArrayIndexing	movefacepoints [ i ]
>4040	Identifier	i
>4041	Identifier	movefacepoints
>4042	Identifier	j
>4043	ExpressionStatement	 
>4044	AssignmentExpr	w = movefaces [ i ] -> face_winding
>4045	PtrMemberAccess	movefaces [ i ] -> face_winding
>4046	Identifier	face_winding
>4047	ArrayIndexing	movefaces [ i ]
>4048	Identifier	i
>4049	Identifier	movefaces
>4050	Identifier	w
>4051	IncDecOp	 
>4052	IncDec	++
>4053	Identifier	i
>4054	Condition	 
>4055	RelationalExpression	i < nummovefaces
>4056	Identifier	nummovefaces
>4057	Identifier	i
>4058	ForInit	 
>4059	AssignmentExpr	i = 0
>4060	PrimaryExpression	0
>4061	Identifier	i
>4062	IfStatement	if ( abs ( DotProduct ( face -> plane . normal , end ) - face -> plane . dist ) < 0.5 )
>4063	CompoundStatement	 
>4064	IfStatement	if ( Winding_PointInside ( face -> face_winding , & face -> plane , end , 0.5 ) )
>4065	BreakStatement	 
>4066	Condition	 
>4067	CallExpression	Winding_PointInside ( face -> face_winding , & face -> plane , end , 0.5 )
>4068	ArgumentList	face -> face_winding
>4069	Argument	0.5
>4070	PrimaryExpression	0.5
>4071	Argument	end
>4072	Identifier	end
>4073	Argument	& face -> plane
>4074	UnaryOp	& face -> plane
>4075	PtrMemberAccess	face -> plane
>4076	Identifier	plane
>4077	Identifier	face
>4078	UnaryOperator	&
>4079	Argument	face -> face_winding
>4080	PtrMemberAccess	face -> face_winding
>4081	Identifier	face_winding
>4082	Identifier	face
>4083	Callee	Winding_PointInside
>4084	Identifier	Winding_PointInside
>4085	Condition	 
>4086	RelationalExpression	abs ( DotProduct ( face -> plane . normal , end ) - face -> plane . dist ) < 0.5
>4087	PrimaryExpression	0.5
>4088	CallExpression	abs ( DotProduct ( face -> plane . normal , end ) - face -> plane . dist )
>4089	ArgumentList	DotProduct ( face -> plane . normal , end ) - face -> plane . dist
>4090	Argument	DotProduct ( face -> plane . normal , end ) - face -> plane . dist
>4091	AdditiveExpression	DotProduct ( face -> plane . normal , end ) - face -> plane . dist
>4092	MemberAccess	face -> plane . dist
>4093	Identifier	dist
>4094	PtrMemberAccess	face -> plane
>4095	Identifier	plane
>4096	Identifier	face
>4097	CallExpression	DotProduct ( face -> plane . normal , end )
>4098	ArgumentList	face -> plane . normal
>4099	Argument	end
>4100	Identifier	end
>4101	Argument	face -> plane . normal
>4102	MemberAccess	face -> plane . normal
>4103	Identifier	normal
>4104	PtrMemberAccess	face -> plane
>4105	Identifier	plane
>4106	Identifier	face
>4107	Callee	DotProduct
>4108	Identifier	DotProduct
>4109	Callee	abs
>4110	Identifier	abs
>4111	IfStatement	if ( Winding_VectorIntersect ( face -> face_winding , & face -> plane , vertex , end , INTERSECT_EPSILON ) )
>4112	BreakStatement	 
>4113	Condition	 
>4114	CallExpression	Winding_VectorIntersect ( face -> face_winding , & face -> plane , vertex , end , INTERSECT_EPSILON )
>4115	ArgumentList	face -> face_winding
>4116	Argument	INTERSECT_EPSILON
>4117	Identifier	INTERSECT_EPSILON
>4118	Argument	end
>4119	Identifier	end
>4120	Argument	vertex
>4121	Identifier	vertex
>4122	Argument	& face -> plane
>4123	UnaryOp	& face -> plane
>4124	PtrMemberAccess	face -> plane
>4125	Identifier	plane
>4126	Identifier	face
>4127	UnaryOperator	&
>4128	Argument	face -> face_winding
>4129	PtrMemberAccess	face -> face_winding
>4130	Identifier	face_winding
>4131	Identifier	face
>4132	Callee	Winding_VectorIntersect
>4133	Identifier	Winding_VectorIntersect
>4134	IfStatement	if ( i < nummovefaces )
>4135	ContinueStatement	 
>4136	Condition	 
>4137	RelationalExpression	i < nummovefaces
>4138	Identifier	nummovefaces
>4139	Identifier	i
>4140	ForStatement	for ( i = 0 ; i < nummovefaces ; i ++ )
>4141	CompoundStatement	 
>4142	IfStatement	if ( face == movefaces [ i ] )
>4143	BreakStatement	 
>4144	Condition	 
>4145	EqualityExpression	face == movefaces [ i ]
>4146	ArrayIndexing	movefaces [ i ]
>4147	Identifier	i
>4148	Identifier	movefaces
>4149	Identifier	face
>4150	IncDecOp	 
>4151	IncDec	++
>4152	Identifier	i
>4153	Condition	 
>4154	RelationalExpression	i < nummovefaces
>4155	Identifier	nummovefaces
>4156	Identifier	i
>4157	ForInit	 
>4158	AssignmentExpr	i = 0
>4159	PrimaryExpression	0
>4160	Identifier	i
>4161	AssignmentExpr	 
>4162	PtrMemberAccess	face -> next
>4163	Identifier	next
>4164	Identifier	face
>4165	Identifier	face
>4166	Condition	 
>4167	Identifier	face
>4168	ForInit	 
>4169	AssignmentExpr	face = b -> brush_faces
>4170	PtrMemberAccess	b -> brush_faces
>4171	Identifier	brush_faces
>4172	Identifier	b
>4173	Identifier	face
>4174	ExpressionStatement	 
>4175	CallExpression	VectorCopy ( end , tmpw . points [ 2 ] )
>4176	ArgumentList	end
>4177	Argument	tmpw . points [ 2 ]
>4178	ArrayIndexing	tmpw . points [ 2 ]
>4179	PrimaryExpression	2
>4180	MemberAccess	tmpw . points
>4181	Identifier	points
>4182	Identifier	tmpw
>4183	Argument	end
>4184	Identifier	end
>4185	Callee	VectorCopy
>4186	Identifier	VectorCopy
>4187	ExpressionStatement	 
>4188	CallExpression	VectorCopy ( vertex , tmpw . points [ 1 ] )
>4189	ArgumentList	vertex
>4190	Argument	tmpw . points [ 1 ]
>4191	ArrayIndexing	tmpw . points [ 1 ]
>4192	PrimaryExpression	1
>4193	MemberAccess	tmpw . points
>4194	Identifier	points
>4195	Identifier	tmpw
>4196	Argument	vertex
>4197	Identifier	vertex
>4198	Callee	VectorCopy
>4199	Identifier	VectorCopy
>4200	ExpressionStatement	 
>4201	AssignmentExpr	face = NULL
>4202	Identifier	NULL
>4203	Identifier	face
>4204	IdentifierDeclStatement	 
>4205	IdentifierDecl	plane
>4206	Identifier	plane
>4207	IdentifierDeclType	plane_t
>4208	IdentifierDeclStatement	 
>4209	IdentifierDecl	* w2
>4210	Identifier	w2
>4211	IdentifierDeclType	winding_t *
>4212	IdentifierDeclStatement	 
>4213	IdentifierDecl	p2
>4214	Identifier	p2
>4215	IdentifierDeclType	vec3_t
>4216	IdentifierDecl	p1
>4217	Identifier	p1
>4218	IdentifierDeclType	vec3_t
>4219	IdentifierDeclStatement	 
>4220	IdentifierDecl	l
>4221	Identifier	l
>4222	IdentifierDeclType	int
>4223	ForStatement	for ( face = b -> brush_faces ; face ; face = face -> next )
>4224	CompoundStatement	 
>4225	ForStatement	for ( i = 0 ; i < w -> numpoints ; i ++ )
>4226	CompoundStatement	 
>4227	IfStatement	if ( Point_Equal ( w -> points [ i ] , vertex , POINT_EPSILON ) )
>4228	CompoundStatement	 
>4229	BreakStatement	 
>4230	IfStatement	if ( dot > 0.1 )
>4231	ElseStatement	else
>4232	CompoundStatement	 
>4233	ExpressionStatement	 
>4234	AssignmentExpr	movefaces [ nummovefaces ++ ] = newface
>4235	Identifier	newface
>4236	ArrayIndexing	movefaces [ nummovefaces ++ ]
>4237	IncDecOp	nummovefaces ++
>4238	IncDec	++
>4239	Identifier	nummovefaces
>4240	Identifier	movefaces
>4241	ExpressionStatement	 
>4242	AssignmentExpr	movefacepoints [ nummovefaces ] = 1
>4243	PrimaryExpression	1
>4244	ArrayIndexing	movefacepoints [ nummovefaces ]
>4245	Identifier	nummovefaces
>4246	Identifier	movefacepoints
>4247	ExpressionStatement	 
>4248	AssignmentExpr	b -> brush_faces = newface
>4249	Identifier	newface
>4250	PtrMemberAccess	b -> brush_faces
>4251	Identifier	brush_faces
>4252	Identifier	b
>4253	ExpressionStatement	 
>4254	AssignmentExpr	newface -> next = b -> brush_faces
>4255	PtrMemberAccess	b -> brush_faces
>4256	Identifier	brush_faces
>4257	Identifier	b
>4258	PtrMemberAccess	newface -> next
>4259	Identifier	next
>4260	Identifier	newface
>4261	ExpressionStatement	 
>4262	AssignmentExpr	newface -> d_texture = Texture_ForName ( newface -> texdef . name )
>4263	CallExpression	Texture_ForName ( newface -> texdef . name )
>4264	ArgumentList	newface -> texdef . name
>4265	Argument	newface -> texdef . name
>4266	MemberAccess	newface -> texdef . name
>4267	Identifier	name
>4268	PtrMemberAccess	newface -> texdef
>4269	Identifier	texdef
>4270	Identifier	newface
>4271	Callee	Texture_ForName
>4272	Identifier	Texture_ForName
>4273	PtrMemberAccess	newface -> d_texture
>4274	Identifier	d_texture
>4275	Identifier	newface
>4276	ExpressionStatement	 
>4277	AssignmentExpr	newface -> face_winding = Winding_Clone ( & tmpw )
>4278	CallExpression	Winding_Clone ( & tmpw )
>4279	ArgumentList	& tmpw
>4280	Argument	& tmpw
>4281	UnaryOp	& tmpw
>4282	Identifier	tmpw
>4283	UnaryOperator	&
>4284	Callee	Winding_Clone
>4285	Identifier	Winding_Clone
>4286	PtrMemberAccess	newface -> face_winding
>4287	Identifier	face_winding
>4288	Identifier	newface
>4289	IfStatement	if ( newface -> face_winding )
>4290	ExpressionStatement	 
>4291	CallExpression	Winding_Free ( newface -> face_winding )
>4292	ArgumentList	newface -> face_winding
>4293	Argument	newface -> face_winding
>4294	PtrMemberAccess	newface -> face_winding
>4295	Identifier	face_winding
>4296	Identifier	newface
>4297	Callee	Winding_Free
>4298	Identifier	Winding_Free
>4299	Condition	 
>4300	PtrMemberAccess	newface -> face_winding
>4301	Identifier	face_winding
>4302	Identifier	newface
>4303	ExpressionStatement	 
>4304	AssignmentExpr	newface -> original = f
>4305	Identifier	f
>4306	PtrMemberAccess	newface -> original
>4307	Identifier	original
>4308	Identifier	newface
>4309	ForStatement	for ( f = face ; f -> original ; f = f -> original )
>4310	ExpressionStatement	 
>4311	AssignmentExpr	 
>4312	PtrMemberAccess	f -> original
>4313	Identifier	original
>4314	Identifier	f
>4315	Identifier	f
>4316	Condition	 
>4317	PtrMemberAccess	f -> original
>4318	Identifier	original
>4319	Identifier	f
>4320	ForInit	 
>4321	AssignmentExpr	f = face
>4322	Identifier	face
>4323	Identifier	f
>4324	ExpressionStatement	 
>4325	AssignmentExpr	newface = Face_Clone ( face )
>4326	CallExpression	Face_Clone ( face )
>4327	ArgumentList	face
>4328	Argument	face
>4329	Identifier	face
>4330	Callee	Face_Clone
>4331	Identifier	Face_Clone
>4332	Identifier	newface
>4333	ForStatement	for ( j = 0 ; j < w -> numpoints ; j ++ )
>4334	ExpressionStatement	 
>4335	CallExpression	EmitTextureCoordinates ( w -> points [ j ] , face -> d_texture , face )
>4336	ArgumentList	w -> points [ j ]
>4337	Argument	face
>4338	Identifier	face
>4339	Argument	face -> d_texture
>4340	PtrMemberAccess	face -> d_texture
>4341	Identifier	d_texture
>4342	Identifier	face
>4343	Argument	w -> points [ j ]
>4344	ArrayIndexing	w -> points [ j ]
>4345	Identifier	j
>4346	PtrMemberAccess	w -> points
>4347	Identifier	points
>4348	Identifier	w
>4349	Callee	EmitTextureCoordinates
>4350	Identifier	EmitTextureCoordinates
>4351	IncDecOp	 
>4352	IncDec	++
>4353	Identifier	j
>4354	Condition	 
>4355	RelationalExpression	j < w -> numpoints
>4356	PtrMemberAccess	w -> numpoints
>4357	Identifier	numpoints
>4358	Identifier	w
>4359	Identifier	j
>4360	ForInit	 
>4361	AssignmentExpr	j = 0
>4362	PrimaryExpression	0
>4363	Identifier	j
>4364	ExpressionStatement	 
>4365	CallExpression	Face_SetColor ( b , face , 1.0 )
>4366	ArgumentList	b
>4367	Argument	1.0
>4368	PrimaryExpression	1.0
>4369	Argument	face
>4370	Identifier	face
>4371	Argument	b
>4372	Identifier	b
>4373	Callee	Face_SetColor
>4374	Identifier	Face_SetColor
>4375	ExpressionStatement	 
>4376	CallExpression	Winding_RemovePoint ( w , i )
>4377	ArgumentList	w
>4378	Argument	i
>4379	Identifier	i
>4380	Argument	w
>4381	Identifier	w
>4382	Callee	Winding_RemovePoint
>4383	Identifier	Winding_RemovePoint
>4384	ExpressionStatement	 
>4385	CallExpression	VectorCopy ( w -> points [ ( i + 1 ) % w -> numpoints ] , tmpw . points [ 2 ] )
>4386	ArgumentList	w -> points [ ( i + 1 ) % w -> numpoints ]
>4387	Argument	tmpw . points [ 2 ]
>4388	ArrayIndexing	tmpw . points [ 2 ]
>4389	PrimaryExpression	2
>4390	MemberAccess	tmpw . points
>4391	Identifier	points
>4392	Identifier	tmpw
>4393	Argument	w -> points [ ( i + 1 ) % w -> numpoints ]
>4394	ArrayIndexing	w -> points [ ( i + 1 ) % w -> numpoints ]
>4395	MultiplicativeExpression	( i + 1 ) % w -> numpoints
>4396	PtrMemberAccess	w -> numpoints
>4397	Identifier	numpoints
>4398	Identifier	w
>4399	AdditiveExpression	i + 1
>4400	PrimaryExpression	1
>4401	Identifier	i
>4402	PtrMemberAccess	w -> points
>4403	Identifier	points
>4404	Identifier	w
>4405	Callee	VectorCopy
>4406	Identifier	VectorCopy
>4407	ExpressionStatement	 
>4408	CallExpression	VectorCopy ( w -> points [ i ] , tmpw . points [ 1 ] )
>4409	ArgumentList	w -> points [ i ]
>4410	Argument	tmpw . points [ 1 ]
>4411	ArrayIndexing	tmpw . points [ 1 ]
>4412	PrimaryExpression	1
>4413	MemberAccess	tmpw . points
>4414	Identifier	points
>4415	Identifier	tmpw
>4416	Argument	w -> points [ i ]
>4417	ArrayIndexing	w -> points [ i ]
>4418	Identifier	i
>4419	PtrMemberAccess	w -> points
>4420	Identifier	points
>4421	Identifier	w
>4422	Callee	VectorCopy
>4423	Identifier	VectorCopy
>4424	ExpressionStatement	 
>4425	CallExpression	VectorCopy ( w -> points [ ( i - 1 + w -> numpoints ) % w -> numpoints ] , tmpw . points [ 0 ] )
>4426	ArgumentList	w -> points [ ( i - 1 + w -> numpoints ) % w -> numpoints ]
>4427	Argument	tmpw . points [ 0 ]
>4428	ArrayIndexing	tmpw . points [ 0 ]
>4429	PrimaryExpression	0
>4430	MemberAccess	tmpw . points
>4431	Identifier	points
>4432	Identifier	tmpw
>4433	Argument	w -> points [ ( i - 1 + w -> numpoints ) % w -> numpoints ]
>4434	ArrayIndexing	w -> points [ ( i - 1 + w -> numpoints ) % w -> numpoints ]
>4435	MultiplicativeExpression	( i - 1 + w -> numpoints ) % w -> numpoints
>4436	PtrMemberAccess	w -> numpoints
>4437	Identifier	numpoints
>4438	Identifier	w
>4439	AdditiveExpression	i - 1 + w -> numpoints
>4440	AdditiveExpression	1 + w -> numpoints
>4441	PtrMemberAccess	w -> numpoints
>4442	Identifier	numpoints
>4443	Identifier	w
>4444	PrimaryExpression	1
>4445	Identifier	i
>4446	PtrMemberAccess	w -> points
>4447	Identifier	points
>4448	Identifier	w
>4449	Callee	VectorCopy
>4450	Identifier	VectorCopy
>4451	CompoundStatement	 
>4452	ExpressionStatement	 
>4453	AssignmentExpr	movefaces [ nummovefaces ++ ] = face
>4454	Identifier	face
>4455	ArrayIndexing	movefaces [ nummovefaces ++ ]
>4456	IncDecOp	nummovefaces ++
>4457	IncDec	++
>4458	Identifier	nummovefaces
>4459	Identifier	movefaces
>4460	ExpressionStatement	 
>4461	AssignmentExpr	movefacepoints [ nummovefaces ] = 2
>4462	PrimaryExpression	2
>4463	ArrayIndexing	movefacepoints [ nummovefaces ]
>4464	Identifier	nummovefaces
>4465	Identifier	movefacepoints
>4466	ExpressionStatement	 
>4467	AssignmentExpr	face -> face_winding = Winding_Clone ( & tmpw )
>4468	CallExpression	Winding_Clone ( & tmpw )
>4469	ArgumentList	& tmpw
>4470	Argument	& tmpw
>4471	UnaryOp	& tmpw
>4472	Identifier	tmpw
>4473	UnaryOperator	&
>4474	Callee	Winding_Clone
>4475	Identifier	Winding_Clone
>4476	PtrMemberAccess	face -> face_winding
>4477	Identifier	face_winding
>4478	Identifier	face
>4479	ExpressionStatement	 
>4480	CallExpression	Winding_Free ( face -> face_winding )
>4481	ArgumentList	face -> face_winding
>4482	Argument	face -> face_winding
>4483	PtrMemberAccess	face -> face_winding
>4484	Identifier	face_winding
>4485	Identifier	face
>4486	Callee	Winding_Free
>4487	Identifier	Winding_Free
>4488	ExpressionStatement	 
>4489	CallExpression	VectorCopy ( w -> points [ i ] , tmpw . points [ 2 ] )
>4490	ArgumentList	w -> points [ i ]
>4491	Argument	tmpw . points [ 2 ]
>4492	ArrayIndexing	tmpw . points [ 2 ]
>4493	PrimaryExpression	2
>4494	MemberAccess	tmpw . points
>4495	Identifier	points
>4496	Identifier	tmpw
>4497	Argument	w -> points [ i ]
>4498	ArrayIndexing	w -> points [ i ]
>4499	Identifier	i
>4500	PtrMemberAccess	w -> points
>4501	Identifier	points
>4502	Identifier	w
>4503	Callee	VectorCopy
>4504	Identifier	VectorCopy
>4505	ExpressionStatement	 
>4506	CallExpression	VectorCopy ( w -> points [ ( i - 1 + w -> numpoints ) % w -> numpoints ] , tmpw . points [ 1 ] )
>4507	ArgumentList	w -> points [ ( i - 1 + w -> numpoints ) % w -> numpoints ]
>4508	Argument	tmpw . points [ 1 ]
>4509	ArrayIndexing	tmpw . points [ 1 ]
>4510	PrimaryExpression	1
>4511	MemberAccess	tmpw . points
>4512	Identifier	points
>4513	Identifier	tmpw
>4514	Argument	w -> points [ ( i - 1 + w -> numpoints ) % w -> numpoints ]
>4515	ArrayIndexing	w -> points [ ( i - 1 + w -> numpoints ) % w -> numpoints ]
>4516	MultiplicativeExpression	( i - 1 + w -> numpoints ) % w -> numpoints
>4517	PtrMemberAccess	w -> numpoints
>4518	Identifier	numpoints
>4519	Identifier	w
>4520	AdditiveExpression	i - 1 + w -> numpoints
>4521	AdditiveExpression	1 + w -> numpoints
>4522	PtrMemberAccess	w -> numpoints
>4523	Identifier	numpoints
>4524	Identifier	w
>4525	PrimaryExpression	1
>4526	Identifier	i
>4527	PtrMemberAccess	w -> points
>4528	Identifier	points
>4529	Identifier	w
>4530	Callee	VectorCopy
>4531	Identifier	VectorCopy
>4532	ExpressionStatement	 
>4533	CallExpression	VectorCopy ( w -> points [ ( i - 2 + w -> numpoints ) % w -> numpoints ] , tmpw . points [ 0 ] )
>4534	ArgumentList	w -> points [ ( i - 2 + w -> numpoints ) % w -> numpoints ]
>4535	Argument	tmpw . points [ 0 ]
>4536	ArrayIndexing	tmpw . points [ 0 ]
>4537	PrimaryExpression	0
>4538	MemberAccess	tmpw . points
>4539	Identifier	points
>4540	Identifier	tmpw
>4541	Argument	w -> points [ ( i - 2 + w -> numpoints ) % w -> numpoints ]
>4542	ArrayIndexing	w -> points [ ( i - 2 + w -> numpoints ) % w -> numpoints ]
>4543	MultiplicativeExpression	( i - 2 + w -> numpoints ) % w -> numpoints
>4544	PtrMemberAccess	w -> numpoints
>4545	Identifier	numpoints
>4546	Identifier	w
>4547	AdditiveExpression	i - 2 + w -> numpoints
>4548	AdditiveExpression	2 + w -> numpoints
>4549	PtrMemberAccess	w -> numpoints
>4550	Identifier	numpoints
>4551	Identifier	w
>4552	PrimaryExpression	2
>4553	Identifier	i
>4554	PtrMemberAccess	w -> points
>4555	Identifier	points
>4556	Identifier	w
>4557	Callee	VectorCopy
>4558	Identifier	VectorCopy
>4559	ForStatement	for ( k = i ; k < i + w -> numpoints - 3 ; k ++ )
>4560	CompoundStatement	 
>4561	ExpressionStatement	 
>4562	AssignmentExpr	movefaces [ nummovefaces ++ ] = newface
>4563	Identifier	newface
>4564	ArrayIndexing	movefaces [ nummovefaces ++ ]
>4565	IncDecOp	nummovefaces ++
>4566	IncDec	++
>4567	Identifier	nummovefaces
>4568	Identifier	movefaces
>4569	ExpressionStatement	 
>4570	AssignmentExpr	movefacepoints [ nummovefaces ] = 0
>4571	PrimaryExpression	0
>4572	ArrayIndexing	movefacepoints [ nummovefaces ]
>4573	Identifier	nummovefaces
>4574	Identifier	movefacepoints
>4575	ExpressionStatement	 
>4576	AssignmentExpr	b -> brush_faces = newface
>4577	Identifier	newface
>4578	PtrMemberAccess	b -> brush_faces
>4579	Identifier	brush_faces
>4580	Identifier	b
>4581	ExpressionStatement	 
>4582	AssignmentExpr	newface -> next = b -> brush_faces
>4583	PtrMemberAccess	b -> brush_faces
>4584	Identifier	brush_faces
>4585	Identifier	b
>4586	PtrMemberAccess	newface -> next
>4587	Identifier	next
>4588	Identifier	newface
>4589	ExpressionStatement	 
>4590	AssignmentExpr	newface -> d_texture = Texture_ForName ( newface -> texdef . name )
>4591	CallExpression	Texture_ForName ( newface -> texdef . name )
>4592	ArgumentList	newface -> texdef . name
>4593	Argument	newface -> texdef . name
>4594	MemberAccess	newface -> texdef . name
>4595	Identifier	name
>4596	PtrMemberAccess	newface -> texdef
>4597	Identifier	texdef
>4598	Identifier	newface
>4599	Callee	Texture_ForName
>4600	Identifier	Texture_ForName
>4601	PtrMemberAccess	newface -> d_texture
>4602	Identifier	d_texture
>4603	Identifier	newface
>4604	ExpressionStatement	 
>4605	AssignmentExpr	newface -> face_winding = Winding_Clone ( & tmpw )
>4606	CallExpression	Winding_Clone ( & tmpw )
>4607	ArgumentList	& tmpw
>4608	Argument	& tmpw
>4609	UnaryOp	& tmpw
>4610	Identifier	tmpw
>4611	UnaryOperator	&
>4612	Callee	Winding_Clone
>4613	Identifier	Winding_Clone
>4614	PtrMemberAccess	newface -> face_winding
>4615	Identifier	face_winding
>4616	Identifier	newface
>4617	IfStatement	if ( newface -> face_winding )
>4618	ExpressionStatement	 
>4619	CallExpression	Winding_Free ( newface -> face_winding )
>4620	ArgumentList	newface -> face_winding
>4621	Argument	newface -> face_winding
>4622	PtrMemberAccess	newface -> face_winding
>4623	Identifier	face_winding
>4624	Identifier	newface
>4625	Callee	Winding_Free
>4626	Identifier	Winding_Free
>4627	Condition	 
>4628	PtrMemberAccess	newface -> face_winding
>4629	Identifier	face_winding
>4630	Identifier	newface
>4631	ExpressionStatement	 
>4632	AssignmentExpr	newface -> original = f
>4633	Identifier	f
>4634	PtrMemberAccess	newface -> original
>4635	Identifier	original
>4636	Identifier	newface
>4637	ForStatement	for ( f = face ; f -> original ; f = f -> original )
>4638	ExpressionStatement	 
>4639	AssignmentExpr	 
>4640	PtrMemberAccess	f -> original
>4641	Identifier	original
>4642	Identifier	f
>4643	Identifier	f
>4644	Condition	 
>4645	PtrMemberAccess	f -> original
>4646	Identifier	original
>4647	Identifier	f
>4648	ForInit	 
>4649	AssignmentExpr	f = face
>4650	Identifier	face
>4651	Identifier	f
>4652	ExpressionStatement	 
>4653	AssignmentExpr	newface = Face_Clone ( face )
>4654	CallExpression	Face_Clone ( face )
>4655	ArgumentList	face
>4656	Argument	face
>4657	Identifier	face
>4658	Callee	Face_Clone
>4659	Identifier	Face_Clone
>4660	Identifier	newface
>4661	ExpressionStatement	 
>4662	CallExpression	VectorCopy ( w -> points [ ( k + 2 ) % w -> numpoints ] , tmpw . points [ 2 ] )
>4663	ArgumentList	w -> points [ ( k + 2 ) % w -> numpoints ]
>4664	Argument	tmpw . points [ 2 ]
>4665	ArrayIndexing	tmpw . points [ 2 ]
>4666	PrimaryExpression	2
>4667	MemberAccess	tmpw . points
>4668	Identifier	points
>4669	Identifier	tmpw
>4670	Argument	w -> points [ ( k + 2 ) % w -> numpoints ]
>4671	ArrayIndexing	w -> points [ ( k + 2 ) % w -> numpoints ]
>4672	MultiplicativeExpression	( k + 2 ) % w -> numpoints
>4673	PtrMemberAccess	w -> numpoints
>4674	Identifier	numpoints
>4675	Identifier	w
>4676	AdditiveExpression	k + 2
>4677	PrimaryExpression	2
>4678	Identifier	k
>4679	PtrMemberAccess	w -> points
>4680	Identifier	points
>4681	Identifier	w
>4682	Callee	VectorCopy
>4683	Identifier	VectorCopy
>4684	ExpressionStatement	 
>4685	CallExpression	VectorCopy ( w -> points [ ( k + 1 ) % w -> numpoints ] , tmpw . points [ 1 ] )
>4686	ArgumentList	w -> points [ ( k + 1 ) % w -> numpoints ]
>4687	Argument	tmpw . points [ 1 ]
>4688	ArrayIndexing	tmpw . points [ 1 ]
>4689	PrimaryExpression	1
>4690	MemberAccess	tmpw . points
>4691	Identifier	points
>4692	Identifier	tmpw
>4693	Argument	w -> points [ ( k + 1 ) % w -> numpoints ]
>4694	ArrayIndexing	w -> points [ ( k + 1 ) % w -> numpoints ]
>4695	MultiplicativeExpression	( k + 1 ) % w -> numpoints
>4696	PtrMemberAccess	w -> numpoints
>4697	Identifier	numpoints
>4698	Identifier	w
>4699	AdditiveExpression	k + 1
>4700	PrimaryExpression	1
>4701	Identifier	k
>4702	PtrMemberAccess	w -> points
>4703	Identifier	points
>4704	Identifier	w
>4705	Callee	VectorCopy
>4706	Identifier	VectorCopy
>4707	ExpressionStatement	 
>4708	CallExpression	VectorCopy ( w -> points [ i ] , tmpw . points [ 0 ] )
>4709	ArgumentList	w -> points [ i ]
>4710	Argument	tmpw . points [ 0 ]
>4711	ArrayIndexing	tmpw . points [ 0 ]
>4712	PrimaryExpression	0
>4713	MemberAccess	tmpw . points
>4714	Identifier	points
>4715	Identifier	tmpw
>4716	Argument	w -> points [ i ]
>4717	ArrayIndexing	w -> points [ i ]
>4718	Identifier	i
>4719	PtrMemberAccess	w -> points
>4720	Identifier	points
>4721	Identifier	w
>4722	Callee	VectorCopy
>4723	Identifier	VectorCopy
>4724	IncDecOp	 
>4725	IncDec	++
>4726	Identifier	k
>4727	Condition	 
>4728	RelationalExpression	k < i + w -> numpoints - 3
>4729	AdditiveExpression	i + w -> numpoints - 3
>4730	AdditiveExpression	w -> numpoints - 3
>4731	PrimaryExpression	3
>4732	PtrMemberAccess	w -> numpoints
>4733	Identifier	numpoints
>4734	Identifier	w
>4735	Identifier	i
>4736	Identifier	k
>4737	ForInit	 
>4738	AssignmentExpr	k = i
>4739	Identifier	i
>4740	Identifier	k
>4741	Condition	 
>4742	RelationalExpression	dot > 0.1
>4743	PrimaryExpression	0.1
>4744	Identifier	dot
>4745	ExpressionStatement	 
>4746	AssignmentExpr	dot = DotProduct ( end , face -> plane . normal ) - face -> plane . dist
>4747	AdditiveExpression	DotProduct ( end , face -> plane . normal ) - face -> plane . dist
>4748	MemberAccess	face -> plane . dist
>4749	Identifier	dist
>4750	PtrMemberAccess	face -> plane
>4751	Identifier	plane
>4752	Identifier	face
>4753	CallExpression	DotProduct ( end , face -> plane . normal )
>4754	ArgumentList	end
>4755	Argument	face -> plane . normal
>4756	MemberAccess	face -> plane . normal
>4757	Identifier	normal
>4758	PtrMemberAccess	face -> plane
>4759	Identifier	plane
>4760	Identifier	face
>4761	Argument	end
>4762	Identifier	end
>4763	Callee	DotProduct
>4764	Identifier	DotProduct
>4765	Identifier	dot
>4766	IfStatement	if ( face -> face_winding -> numpoints <= 3 )
>4767	CompoundStatement	 
>4768	BreakStatement	 
>4769	ExpressionStatement	 
>4770	AssignmentExpr	movefaces [ nummovefaces ++ ] = face
>4771	Identifier	face
>4772	ArrayIndexing	movefaces [ nummovefaces ++ ]
>4773	IncDecOp	nummovefaces ++
>4774	IncDec	++
>4775	Identifier	nummovefaces
>4776	Identifier	movefaces
>4777	ExpressionStatement	 
>4778	AssignmentExpr	movefacepoints [ nummovefaces ] = i
>4779	Identifier	i
>4780	ArrayIndexing	movefacepoints [ nummovefaces ]
>4781	Identifier	nummovefaces
>4782	Identifier	movefacepoints
>4783	Condition	 
>4784	RelationalExpression	face -> face_winding -> numpoints <= 3
>4785	PrimaryExpression	3
>4786	PtrMemberAccess	face -> face_winding -> numpoints
>4787	Identifier	numpoints
>4788	PtrMemberAccess	face -> face_winding
>4789	Identifier	face_winding
>4790	Identifier	face
>4791	Condition	 
>4792	CallExpression	Point_Equal ( w -> points [ i ] , vertex , POINT_EPSILON )
>4793	ArgumentList	w -> points [ i ]
>4794	Argument	POINT_EPSILON
>4795	Identifier	POINT_EPSILON
>4796	Argument	vertex
>4797	Identifier	vertex
>4798	Argument	w -> points [ i ]
>4799	ArrayIndexing	w -> points [ i ]
>4800	Identifier	i
>4801	PtrMemberAccess	w -> points
>4802	Identifier	points
>4803	Identifier	w
>4804	Callee	Point_Equal
>4805	Identifier	Point_Equal
>4806	IncDecOp	 
>4807	IncDec	++
>4808	Identifier	i
>4809	Condition	 
>4810	RelationalExpression	i < w -> numpoints
>4811	PtrMemberAccess	w -> numpoints
>4812	Identifier	numpoints
>4813	Identifier	w
>4814	Identifier	i
>4815	ForInit	 
>4816	AssignmentExpr	i = 0
>4817	PrimaryExpression	0
>4818	Identifier	i
>4819	IfStatement	if ( ! w )
>4820	ContinueStatement	 
>4821	Condition	 
>4822	UnaryOp	! w
>4823	Identifier	w
>4824	UnaryOperator	!
>4825	ExpressionStatement	 
>4826	AssignmentExpr	w = face -> face_winding
>4827	PtrMemberAccess	face -> face_winding
>4828	Identifier	face_winding
>4829	Identifier	face
>4830	Identifier	w
>4831	AssignmentExpr	 
>4832	PtrMemberAccess	face -> next
>4833	Identifier	next
>4834	Identifier	face
>4835	Identifier	face
>4836	Condition	 
>4837	Identifier	face
>4838	ForInit	 
>4839	AssignmentExpr	face = b -> brush_faces
>4840	PtrMemberAccess	b -> brush_faces
>4841	Identifier	brush_faces
>4842	Identifier	b
>4843	Identifier	face
>4844	ExpressionStatement	 
>4845	AssignmentExpr	nummovefaces = 0
>4846	PrimaryExpression	0
>4847	Identifier	nummovefaces
>4848	IfStatement	if ( bSnap )
>4849	ForStatement	for ( i = 0 ; i < 3 ; i ++ )
>4850	ExpressionStatement	 
>4851	AssignmentExpr	end [ i ] = floor ( end [ i ] / g_qeglobals . d_gridsize + 0.5 ) * g_qeglobals . d_gridsize
>4852	MultiplicativeExpression	floor ( end [ i ] / g_qeglobals . d_gridsize + 0.5 ) * g_qeglobals . d_gridsize
>4853	MemberAccess	g_qeglobals . d_gridsize
>4854	Identifier	d_gridsize
>4855	Identifier	g_qeglobals
>4856	CallExpression	floor ( end [ i ] / g_qeglobals . d_gridsize + 0.5 )
>4857	ArgumentList	end [ i ] / g_qeglobals . d_gridsize + 0.5
>4858	Argument	end [ i ] / g_qeglobals . d_gridsize + 0.5
>4859	AdditiveExpression	end [ i ] / g_qeglobals . d_gridsize + 0.5
>4860	PrimaryExpression	0.5
>4861	MultiplicativeExpression	end [ i ] / g_qeglobals . d_gridsize
>4862	MemberAccess	g_qeglobals . d_gridsize
>4863	Identifier	d_gridsize
>4864	Identifier	g_qeglobals
>4865	ArrayIndexing	end [ i ]
>4866	Identifier	i
>4867	Identifier	end
>4868	Callee	floor
>4869	Identifier	floor
>4870	ArrayIndexing	end [ i ]
>4871	Identifier	i
>4872	Identifier	end
>4873	IncDecOp	 
>4874	IncDec	++
>4875	Identifier	i
>4876	Condition	 
>4877	RelationalExpression	i < 3
>4878	PrimaryExpression	3
>4879	Identifier	i
>4880	ForInit	 
>4881	AssignmentExpr	i = 0
>4882	PrimaryExpression	0
>4883	Identifier	i
>4884	Condition	 
>4885	Identifier	bSnap
>4886	ExpressionStatement	 
>4887	CallExpression	VectorAdd ( vertex , delta , end )
>4888	ArgumentList	vertex
>4889	Argument	end
>4890	Identifier	end
>4891	Argument	delta
>4892	Identifier	delta
>4893	Argument	vertex
>4894	Identifier	vertex
>4895	Callee	VectorAdd
>4896	Identifier	VectorAdd
>4897	ExpressionStatement	 
>4898	AssignmentExpr	tmpw . maxpoints = 3
>4899	PrimaryExpression	3
>4900	MemberAccess	tmpw . maxpoints
>4901	Identifier	maxpoints
>4902	Identifier	tmpw
>4903	ExpressionStatement	 
>4904	AssignmentExpr	tmpw . numpoints = 3
>4905	PrimaryExpression	3
>4906	MemberAccess	tmpw . numpoints
>4907	Identifier	numpoints
>4908	Identifier	tmpw
>4909	ExpressionStatement	 
>4910	AssignmentExpr	result = false
>4911	Identifier	false
>4912	Identifier	result
>4913	IdentifierDeclStatement	 
>4914	IdentifierDecl	dot
>4915	Identifier	dot
>4916	IdentifierDeclType	float
>4917	IdentifierDeclStatement	 
>4918	IdentifierDecl	result
>4919	Identifier	result
>4920	IdentifierDeclType	int
>4921	IdentifierDecl	nummovefaces
>4922	Identifier	nummovefaces
>4923	IdentifierDeclType	int
>4924	IdentifierDecl	k
>4925	Identifier	k
>4926	IdentifierDeclType	int
>4927	IdentifierDecl	j
>4928	Identifier	j
>4929	IdentifierDeclType	int
>4930	IdentifierDecl	i
>4931	Identifier	i
>4932	IdentifierDeclType	int
>4933	IdentifierDeclStatement	 
>4934	IdentifierDecl	tmpw
>4935	Identifier	tmpw
>4936	IdentifierDeclType	winding_t
>4937	IdentifierDecl	* w
>4938	Identifier	w
>4939	IdentifierDeclType	winding_t *
>4940	IdentifierDeclStatement	 
>4941	IdentifierDecl	movefacepoints [ MAX_MOVE_FACES ]
>4942	Identifier	MAX_MOVE_FACES
>4943	Identifier	movefacepoints
>4944	IdentifierDeclType	int [ MAX_MOVE_FACES ]
>4945	IdentifierDeclStatement	 
>4946	IdentifierDecl	* movefaces [ MAX_MOVE_FACES ]
>4947	Identifier	MAX_MOVE_FACES
>4948	Identifier	movefaces
>4949	IdentifierDeclType	face_t * [ MAX_MOVE_FACES ]
>4950	IdentifierDeclStatement	 
>4951	IdentifierDecl	* nextface
>4952	Identifier	nextface
>4953	IdentifierDeclType	face_t *
>4954	IdentifierDecl	* lastface
>4955	Identifier	lastface
>4956	IdentifierDeclType	face_t *
>4957	IdentifierDecl	* newface
>4958	Identifier	newface
>4959	IdentifierDeclType	face_t *
>4960	IdentifierDecl	* face
>4961	Identifier	face
>4962	IdentifierDeclType	face_t *
>4963	IdentifierDecl	* f
>4964	Identifier	f
>4965	IdentifierDeclType	face_t *
>5098	FunctionDef	Brush_MoveVertex_old2 (brush_t * b , vec3_t vertex , vec3_t delta , vec3_t end , bool bSnap)
>5099	ParameterList	brush_t * b , vec3_t vertex , vec3_t delta , vec3_t end , bool bSnap
>5100	Parameter	 
>5101	Identifier	bSnap
>5102	ParameterType	bool
>5103	Parameter	 
>5104	Identifier	end
>5105	ParameterType	vec3_t
>5106	Parameter	 
>5107	Identifier	delta
>5108	ParameterType	vec3_t
>5109	Parameter	 
>5110	Identifier	vertex
>5111	ParameterType	vec3_t
>5112	Parameter	 
>5113	Identifier	b
>5114	ParameterType	brush_t *
>5115	ReturnType	int
>5116	CompoundStatement	 
>5117	ReturnStatement	 
>5118	Identifier	result
>5119	ForStatement	for ( face = b -> brush_faces ; face ; face = nextface )
>5120	CompoundStatement	 
>5121	ExpressionStatement	 
>5122	CallExpression	Face_Free ( face )
>5123	ArgumentList	face
>5124	Argument	face
>5125	Identifier	face
>5126	Callee	Face_Free
>5127	Identifier	Face_Free
>5128	IfStatement	if ( lastface )
>5129	ElseStatement	else
>5130	ExpressionStatement	 
>5131	AssignmentExpr	b -> brush_faces = face -> next
>5132	PtrMemberAccess	face -> next
>5133	Identifier	next
>5134	Identifier	face
>5135	PtrMemberAccess	b -> brush_faces
>5136	Identifier	brush_faces
>5137	Identifier	b
>5138	ExpressionStatement	 
>5139	AssignmentExpr	lastface -> next = face -> next
>5140	PtrMemberAccess	face -> next
>5141	Identifier	next
>5142	Identifier	face
>5143	PtrMemberAccess	lastface -> next
>5144	Identifier	next
>5145	Identifier	lastface
>5146	Condition	 
>5147	Identifier	lastface
>5148	ForStatement	for ( j = 0 ; j < face -> original -> face_winding -> numpoints ; j ++ )
>5149	ExpressionStatement	 
>5150	CallExpression	EmitTextureCoordinates ( face -> original -> face_winding -> points [ j ] , face -> original -> d_texture , face \
>5151	ArgumentList	face -> original -> face_winding -> points [ j ]
>5152	Argument	face -> original
>5153	PtrMemberAccess	face -> original
>5154	Identifier	original
>5155	Identifier	face
>5156	Argument	face -> original -> d_texture
>5157	PtrMemberAccess	face -> original -> d_texture
>5158	Identifier	d_texture
>5159	PtrMemberAccess	face -> original
>5160	Identifier	original
>5161	Identifier	face
>5162	Argument	face -> original -> face_winding -> points [ j ]
>5163	ArrayIndexing	face -> original -> face_winding -> points [ j ]
>5164	Identifier	j
>5165	PtrMemberAccess	face -> original -> face_winding -> points
>5166	Identifier	points
>5167	PtrMemberAccess	face -> original -> face_winding
>5168	Identifier	face_winding
>5169	PtrMemberAccess	face -> original
>5170	Identifier	original
>5171	Identifier	face
>5172	Callee	EmitTextureCoordinates
>5173	Identifier	EmitTextureCoordinates
>5174	IncDecOp	 
>5175	IncDec	++
>5176	Identifier	j
>5177	Condition	 
>5178	RelationalExpression	j < face -> original -> face_winding -> numpoints
>5179	PtrMemberAccess	face -> original -> face_winding -> numpoints
>5180	Identifier	numpoints
>5181	PtrMemberAccess	face -> original -> face_winding
>5182	Identifier	face_winding
>5183	PtrMemberAccess	face -> original
>5184	Identifier	original
>5185	Identifier	face
>5186	Identifier	j
>5187	ForInit	 
>5188	AssignmentExpr	j = 0
>5189	PrimaryExpression	0
>5190	Identifier	j
>5191	ExpressionStatement	 
>5192	CallExpression	Face_SetColor ( b , face -> original , 1.0 )
>5193	ArgumentList	b
>5194	Argument	1.0
>5195	PrimaryExpression	1.0
>5196	Argument	face -> original
>5197	PtrMemberAccess	face -> original
>5198	Identifier	original
>5199	Identifier	face
>5200	Argument	b
>5201	Identifier	b
>5202	Callee	Face_SetColor
>5203	Identifier	Face_SetColor
>5204	ExpressionStatement	 
>5205	AssignmentExpr	face -> original -> face_winding = w
>5206	Identifier	w
>5207	PtrMemberAccess	face -> original -> face_winding
>5208	Identifier	face_winding
>5209	PtrMemberAccess	face -> original
>5210	Identifier	original
>5211	Identifier	face
>5212	ExpressionStatement	 
>5213	CallExpression	Winding_Free ( face -> original -> face_winding )
>5214	ArgumentList	face -> original -> face_winding
>5215	Argument	face -> original -> face_winding
>5216	PtrMemberAccess	face -> original -> face_winding
>5217	Identifier	face_winding
>5218	PtrMemberAccess	face -> original
>5219	Identifier	original
>5220	Identifier	face
>5221	Callee	Winding_Free
>5222	Identifier	Winding_Free
>5223	IfStatement	if ( ! w )
>5224	CompoundStatement	 
>5225	ContinueStatement	 
>5226	ExpressionStatement	 
>5227	AssignmentExpr	lastface = face
>5228	Identifier	face
>5229	Identifier	lastface
>5230	Condition	 
>5231	UnaryOp	! w
>5232	Identifier	w
>5233	UnaryOperator	!
>5234	ExpressionStatement	 
>5235	AssignmentExpr	w = Winding_TryMerge ( face -> face_winding , face -> original -> face_winding , face -> plane . normal , \
>5236	CallExpression	Winding_TryMerge ( face -> face_winding , face -> original -> face_winding , face -> plane . normal , true )
>5237	ArgumentList	face -> face_winding
>5238	Argument	true
>5239	Identifier	true
>5240	Argument	face -> plane . normal
>5241	MemberAccess	face -> plane . normal
>5242	Identifier	normal
>5243	PtrMemberAccess	face -> plane
>5244	Identifier	plane
>5245	Identifier	face
>5246	Argument	face -> original -> face_winding
>5247	PtrMemberAccess	face -> original -> face_winding
>5248	Identifier	face_winding
>5249	PtrMemberAccess	face -> original
>5250	Identifier	original
>5251	Identifier	face
>5252	Argument	face -> face_winding
>5253	PtrMemberAccess	face -> face_winding
>5254	Identifier	face_winding
>5255	Identifier	face
>5256	Callee	Winding_TryMerge
>5257	Identifier	Winding_TryMerge
>5258	Identifier	w
>5259	IfStatement	if ( ! Plane_Equal ( & face -> plane , & face -> original -> plane , false ) )
>5260	CompoundStatement	 
>5261	ContinueStatement	 
>5262	ExpressionStatement	 
>5263	AssignmentExpr	lastface = face
>5264	Identifier	face
>5265	Identifier	lastface
>5266	Condition	 
>5267	UnaryOp	! Plane_Equal ( & face -> plane , & face -> original -> plane , false )
>5268	CallExpression	Plane_Equal ( & face -> plane , & face -> original -> plane , false )
>5269	ArgumentList	& face -> plane
>5270	Argument	false
>5271	Identifier	false
>5272	Argument	& face -> original -> plane
>5273	UnaryOp	& face -> original -> plane
>5274	PtrMemberAccess	face -> original -> plane
>5275	Identifier	plane
>5276	PtrMemberAccess	face -> original
>5277	Identifier	original
>5278	Identifier	face
>5279	UnaryOperator	&
>5280	Argument	& face -> plane
>5281	UnaryOp	& face -> plane
>5282	PtrMemberAccess	face -> plane
>5283	Identifier	plane
>5284	Identifier	face
>5285	UnaryOperator	&
>5286	Callee	Plane_Equal
>5287	Identifier	Plane_Equal
>5288	UnaryOperator	!
>5289	IfStatement	if ( ! face -> original )
>5290	CompoundStatement	 
>5291	ContinueStatement	 
>5292	ExpressionStatement	 
>5293	AssignmentExpr	lastface = face
>5294	Identifier	face
>5295	Identifier	lastface
>5296	Condition	 
>5297	UnaryOp	! face -> original
>5298	PtrMemberAccess	face -> original
>5299	Identifier	original
>5300	Identifier	face
>5301	UnaryOperator	!
>5302	ExpressionStatement	 
>5303	AssignmentExpr	nextface = face -> next
>5304	PtrMemberAccess	face -> next
>5305	Identifier	next
>5306	Identifier	face
>5307	Identifier	nextface
>5308	AssignmentExpr	 
>5309	Identifier	nextface
>5310	Identifier	face
>5311	Condition	 
>5312	Identifier	face
>5313	ForInit	 
>5314	AssignmentExpr	face = b -> brush_faces
>5315	PtrMemberAccess	b -> brush_faces
>5316	Identifier	brush_faces
>5317	Identifier	b
>5318	Identifier	face
>5319	ExpressionStatement	 
>5320	AssignmentExpr	lastface = NULL
>5321	Identifier	NULL
>5322	Identifier	lastface
>5323	ForStatement	for ( i = 0 ; i < nummovefaces ; i ++ )
>5324	CompoundStatement	 
>5325	ForStatement	for ( j = 0 ; j < movefaces [ i ] -> face_winding -> numpoints ; j ++ )
>5326	ExpressionStatement	 
>5327	CallExpression	EmitTextureCoordinates ( movefaces [ i ] -> face_winding -> points [ j ] , movefaces [ i ] -> d_texture , movefaces [ \
>5328	ArgumentList	movefaces [ i ] -> face_winding -> points [ j ]
>5329	Argument	movefaces [ i ]
>5330	ArrayIndexing	movefaces [ i ]
>5331	Identifier	i
>5332	Identifier	movefaces
>5333	Argument	movefaces [ i ] -> d_texture
>5334	PtrMemberAccess	movefaces [ i ] -> d_texture
>5335	Identifier	d_texture
>5336	ArrayIndexing	movefaces [ i ]
>5337	Identifier	i
>5338	Identifier	movefaces
>5339	Argument	movefaces [ i ] -> face_winding -> points [ j ]
>5340	ArrayIndexing	movefaces [ i ] -> face_winding -> points [ j ]
>5341	Identifier	j
>5342	PtrMemberAccess	movefaces [ i ] -> face_winding -> points
>5343	Identifier	points
>5344	PtrMemberAccess	movefaces [ i ] -> face_winding
>5345	Identifier	face_winding
>5346	ArrayIndexing	movefaces [ i ]
>5347	Identifier	i
>5348	Identifier	movefaces
>5349	Callee	EmitTextureCoordinates
>5350	Identifier	EmitTextureCoordinates
>5351	IncDecOp	 
>5352	IncDec	++
>5353	Identifier	j
>5354	Condition	 
>5355	RelationalExpression	j < movefaces [ i ] -> face_winding -> numpoints
>5356	PtrMemberAccess	movefaces [ i ] -> face_winding -> numpoints
>5357	Identifier	numpoints
>5358	PtrMemberAccess	movefaces [ i ] -> face_winding
>5359	Identifier	face_winding
>5360	ArrayIndexing	movefaces [ i ]
>5361	Identifier	i
>5362	Identifier	movefaces
>5363	Identifier	j
>5364	ForInit	 
>5365	AssignmentExpr	j = 0
>5366	PrimaryExpression	0
>5367	Identifier	j
>5368	ExpressionStatement	 
>5369	CallExpression	Face_SetColor ( b , movefaces [ i ] , 1.0 )
>5370	ArgumentList	b
>5371	Argument	1.0
>5372	PrimaryExpression	1.0
>5373	Argument	movefaces [ i ]
>5374	ArrayIndexing	movefaces [ i ]
>5375	Identifier	i
>5376	Identifier	movefaces
>5377	Argument	b
>5378	Identifier	b
>5379	Callee	Face_SetColor
>5380	Identifier	Face_SetColor
>5381	IncDecOp	 
>5382	IncDec	++
>5383	Identifier	i
>5384	Condition	 
>5385	RelationalExpression	i < nummovefaces
>5386	Identifier	nummovefaces
>5387	Identifier	i
>5388	ForInit	 
>5389	AssignmentExpr	i = 0
>5390	PrimaryExpression	0
>5391	Identifier	i
>5392	IfStatement	if ( ! Brush_Convex ( b ) )
>5393	CompoundStatement	 
>5394	ExpressionStatement	 
>5395	AssignmentExpr	result = false
>5396	Identifier	false
>5397	Identifier	result
>5398	ForStatement	for ( i = 0 ; i < nummovefaces ; i ++ )
>5399	CompoundStatement	 
>5400	ExpressionStatement	 
>5401	CallExpression	Face_MakePlane ( movefaces [ i ] )
>5402	ArgumentList	movefaces [ i ]
>5403	Argument	movefaces [ i ]
>5404	ArrayIndexing	movefaces [ i ]
>5405	Identifier	i
>5406	Identifier	movefaces
>5407	Callee	Face_MakePlane
>5408	Identifier	Face_MakePlane
>5409	ForStatement	for ( j = 0 ; j < 3 ; j ++ )
>5410	CompoundStatement	 
>5411	ExpressionStatement	 
>5412	CallExpression	VectorCopy ( movefaces [ i ] -> face_winding -> points [ j ] , movefaces [ i ] -> planepts [ j ] )
>5413	ArgumentList	movefaces [ i ] -> face_winding -> points [ j ]
>5414	Argument	movefaces [ i ] -> planepts [ j ]
>5415	ArrayIndexing	movefaces [ i ] -> planepts [ j ]
>5416	Identifier	j
>5417	PtrMemberAccess	movefaces [ i ] -> planepts
>5418	Identifier	planepts
>5419	ArrayIndexing	movefaces [ i ]
>5420	Identifier	i
>5421	Identifier	movefaces
>5422	Argument	movefaces [ i ] -> face_winding -> points [ j ]
>5423	ArrayIndexing	movefaces [ i ] -> face_winding -> points [ j ]
>5424	Identifier	j
>5425	PtrMemberAccess	movefaces [ i ] -> face_winding -> points
>5426	Identifier	points
>5427	PtrMemberAccess	movefaces [ i ] -> face_winding
>5428	Identifier	face_winding
>5429	ArrayIndexing	movefaces [ i ]
>5430	Identifier	i
>5431	Identifier	movefaces
>5432	Callee	VectorCopy
>5433	Identifier	VectorCopy
>5434	IncDecOp	 
>5435	IncDec	++
>5436	Identifier	j
>5437	Condition	 
>5438	RelationalExpression	j < 3
>5439	PrimaryExpression	3
>5440	Identifier	j
>5441	ForInit	 
>5442	AssignmentExpr	j = 0
>5443	PrimaryExpression	0
>5444	Identifier	j
>5445	ExpressionStatement	 
>5446	CallExpression	VectorCopy ( vertex , movefaces [ i ] -> face_winding -> points [ movefacepoints [ i ] ] )
>5447	ArgumentList	vertex
>5448	Argument	movefaces [ i ] -> face_winding -> points [ movefacepoints [ i ] ]
>5449	ArrayIndexing	movefaces [ i ] -> face_winding -> points [ movefacepoints [ i ] ]
>5450	ArrayIndexing	movefacepoints [ i ]
>5451	Identifier	i
>5452	Identifier	movefacepoints
>5453	PtrMemberAccess	movefaces [ i ] -> face_winding -> points
>5454	Identifier	points
>5455	PtrMemberAccess	movefaces [ i ] -> face_winding
>5456	Identifier	face_winding
>5457	ArrayIndexing	movefaces [ i ]
>5458	Identifier	i
>5459	Identifier	movefaces
>5460	Argument	vertex
>5461	Identifier	vertex
>5462	Callee	VectorCopy
>5463	Identifier	VectorCopy
>5464	IncDecOp	 
>5465	IncDec	++
>5466	Identifier	i
>5467	Condition	 
>5468	RelationalExpression	i < nummovefaces
>5469	Identifier	nummovefaces
>5470	Identifier	i
>5471	ForInit	 
>5472	AssignmentExpr	i = 0
>5473	PrimaryExpression	0
>5474	Identifier	i
>5475	Condition	 
>5476	UnaryOp	! Brush_Convex ( b )
>5477	CallExpression	Brush_Convex ( b )
>5478	ArgumentList	b
>5479	Argument	b
>5480	Identifier	b
>5481	Callee	Brush_Convex
>5482	Identifier	Brush_Convex
>5483	UnaryOperator	!
>5484	ForStatement	for ( i = 0 ; i < nummovefaces ; i ++ )
>5485	CompoundStatement	 
>5486	ExpressionStatement	 
>5487	CallExpression	Face_MakePlane ( movefaces [ i ] )
>5488	ArgumentList	movefaces [ i ]
>5489	Argument	movefaces [ i ]
>5490	ArrayIndexing	movefaces [ i ]
>5491	Identifier	i
>5492	Identifier	movefaces
>5493	Callee	Face_MakePlane
>5494	Identifier	Face_MakePlane
>5495	ForStatement	for ( j = 0 ; j < 3 ; j ++ )
>5496	CompoundStatement	 
>5497	ExpressionStatement	 
>5498	CallExpression	VectorCopy ( movefaces [ i ] -> face_winding -> points [ j ] , movefaces [ i ] -> planepts [ j ] )
>5499	ArgumentList	movefaces [ i ] -> face_winding -> points [ j ]
>5500	Argument	movefaces [ i ] -> planepts [ j ]
>5501	ArrayIndexing	movefaces [ i ] -> planepts [ j ]
>5502	Identifier	j
>5503	PtrMemberAccess	movefaces [ i ] -> planepts
>5504	Identifier	planepts
>5505	ArrayIndexing	movefaces [ i ]
>5506	Identifier	i
>5507	Identifier	movefaces
>5508	Argument	movefaces [ i ] -> face_winding -> points [ j ]
>5509	ArrayIndexing	movefaces [ i ] -> face_winding -> points [ j ]
>5510	Identifier	j
>5511	PtrMemberAccess	movefaces [ i ] -> face_winding -> points
>5512	Identifier	points
>5513	PtrMemberAccess	movefaces [ i ] -> face_winding
>5514	Identifier	face_winding
>5515	ArrayIndexing	movefaces [ i ]
>5516	Identifier	i
>5517	Identifier	movefaces
>5518	Callee	VectorCopy
>5519	Identifier	VectorCopy
>5520	IncDecOp	 
>5521	IncDec	++
>5522	Identifier	j
>5523	Condition	 
>5524	RelationalExpression	j < 3
>5525	PrimaryExpression	3
>5526	Identifier	j
>5527	ForInit	 
>5528	AssignmentExpr	j = 0
>5529	PrimaryExpression	0
>5530	Identifier	j
>5531	ExpressionStatement	 
>5532	CallExpression	VectorCopy ( end , movefaces [ i ] -> face_winding -> points [ movefacepoints [ i ] ] )
>5533	ArgumentList	end
>5534	Argument	movefaces [ i ] -> face_winding -> points [ movefacepoints [ i ] ]
>5535	ArrayIndexing	movefaces [ i ] -> face_winding -> points [ movefacepoints [ i ] ]
>5536	ArrayIndexing	movefacepoints [ i ]
>5537	Identifier	i
>5538	Identifier	movefacepoints
>5539	PtrMemberAccess	movefaces [ i ] -> face_winding -> points
>5540	Identifier	points
>5541	PtrMemberAccess	movefaces [ i ] -> face_winding
>5542	Identifier	face_winding
>5543	ArrayIndexing	movefaces [ i ]
>5544	Identifier	i
>5545	Identifier	movefaces
>5546	Argument	end
>5547	Identifier	end
>5548	Callee	VectorCopy
>5549	Identifier	VectorCopy
>5550	IncDecOp	 
>5551	IncDec	++
>5552	Identifier	i
>5553	Condition	 
>5554	RelationalExpression	i < nummovefaces
>5555	Identifier	nummovefaces
>5556	Identifier	i
>5557	ForInit	 
>5558	AssignmentExpr	i = 0
>5559	PrimaryExpression	0
>5560	Identifier	i
>5561	ForStatement	for ( face = b -> brush_faces ; face ; face = face -> next )
>5562	CompoundStatement	 
>5563	ForStatement	for ( i = 0 ; i < w -> numpoints ; i ++ )
>5564	CompoundStatement	 
>5565	IfStatement	if ( Point_Equal ( w -> points [ i ] , vertex , POINT_EPSILON ) )
>5566	CompoundStatement	 
>5567	BreakStatement	 
>5568	IfStatement	if ( dot > 0.1 )
>5569	ElseStatement	else
>5570	CompoundStatement	 
>5571	ExpressionStatement	 
>5572	AssignmentExpr	movefaces [ nummovefaces ++ ] = newface
>5573	Identifier	newface
>5574	ArrayIndexing	movefaces [ nummovefaces ++ ]
>5575	IncDecOp	nummovefaces ++
>5576	IncDec	++
>5577	Identifier	nummovefaces
>5578	Identifier	movefaces
>5579	ExpressionStatement	 
>5580	AssignmentExpr	movefacepoints [ nummovefaces ] = 1
>5581	PrimaryExpression	1
>5582	ArrayIndexing	movefacepoints [ nummovefaces ]
>5583	Identifier	nummovefaces
>5584	Identifier	movefacepoints
>5585	ExpressionStatement	 
>5586	AssignmentExpr	b -> brush_faces = newface
>5587	Identifier	newface
>5588	PtrMemberAccess	b -> brush_faces
>5589	Identifier	brush_faces
>5590	Identifier	b
>5591	ExpressionStatement	 
>5592	AssignmentExpr	newface -> next = b -> brush_faces
>5593	PtrMemberAccess	b -> brush_faces
>5594	Identifier	brush_faces
>5595	Identifier	b
>5596	PtrMemberAccess	newface -> next
>5597	Identifier	next
>5598	Identifier	newface
>5599	ExpressionStatement	 
>5600	AssignmentExpr	newface -> d_texture = Texture_ForName ( newface -> texdef . name )
>5601	CallExpression	Texture_ForName ( newface -> texdef . name )
>5602	ArgumentList	newface -> texdef . name
>5603	Argument	newface -> texdef . name
>5604	MemberAccess	newface -> texdef . name
>5605	Identifier	name
>5606	PtrMemberAccess	newface -> texdef
>5607	Identifier	texdef
>5608	Identifier	newface
>5609	Callee	Texture_ForName
>5610	Identifier	Texture_ForName
>5611	PtrMemberAccess	newface -> d_texture
>5612	Identifier	d_texture
>5613	Identifier	newface
>5614	ExpressionStatement	 
>5615	AssignmentExpr	newface -> face_winding = Winding_Clone ( & tmpw )
>5616	CallExpression	Winding_Clone ( & tmpw )
>5617	ArgumentList	& tmpw
>5618	Argument	& tmpw
>5619	UnaryOp	& tmpw
>5620	Identifier	tmpw
>5621	UnaryOperator	&
>5622	Callee	Winding_Clone
>5623	Identifier	Winding_Clone
>5624	PtrMemberAccess	newface -> face_winding
>5625	Identifier	face_winding
>5626	Identifier	newface
>5627	IfStatement	if ( newface -> face_winding )
>5628	ExpressionStatement	 
>5629	CallExpression	Winding_Free ( newface -> face_winding )
>5630	ArgumentList	newface -> face_winding
>5631	Argument	newface -> face_winding
>5632	PtrMemberAccess	newface -> face_winding
>5633	Identifier	face_winding
>5634	Identifier	newface
>5635	Callee	Winding_Free
>5636	Identifier	Winding_Free
>5637	Condition	 
>5638	PtrMemberAccess	newface -> face_winding
>5639	Identifier	face_winding
>5640	Identifier	newface
>5641	ExpressionStatement	 
>5642	AssignmentExpr	newface -> original = f
>5643	Identifier	f
>5644	PtrMemberAccess	newface -> original
>5645	Identifier	original
>5646	Identifier	newface
>5647	ForStatement	for ( f = face ; f -> original ; f = f -> original )
>5648	ExpressionStatement	 
>5649	AssignmentExpr	 
>5650	PtrMemberAccess	f -> original
>5651	Identifier	original
>5652	Identifier	f
>5653	Identifier	f
>5654	Condition	 
>5655	PtrMemberAccess	f -> original
>5656	Identifier	original
>5657	Identifier	f
>5658	ForInit	 
>5659	AssignmentExpr	f = face
>5660	Identifier	face
>5661	Identifier	f
>5662	ExpressionStatement	 
>5663	AssignmentExpr	newface = Face_Clone ( face )
>5664	CallExpression	Face_Clone ( face )
>5665	ArgumentList	face
>5666	Argument	face
>5667	Identifier	face
>5668	Callee	Face_Clone
>5669	Identifier	Face_Clone
>5670	Identifier	newface
>5671	ForStatement	for ( j = 0 ; j < w -> numpoints ; j ++ )
>5672	ExpressionStatement	 
>5673	CallExpression	EmitTextureCoordinates ( w -> points [ j ] , face -> d_texture , face )
>5674	ArgumentList	w -> points [ j ]
>5675	Argument	face
>5676	Identifier	face
>5677	Argument	face -> d_texture
>5678	PtrMemberAccess	face -> d_texture
>5679	Identifier	d_texture
>5680	Identifier	face
>5681	Argument	w -> points [ j ]
>5682	ArrayIndexing	w -> points [ j ]
>5683	Identifier	j
>5684	PtrMemberAccess	w -> points
>5685	Identifier	points
>5686	Identifier	w
>5687	Callee	EmitTextureCoordinates
>5688	Identifier	EmitTextureCoordinates
>5689	IncDecOp	 
>5690	IncDec	++
>5691	Identifier	j
>5692	Condition	 
>5693	RelationalExpression	j < w -> numpoints
>5694	PtrMemberAccess	w -> numpoints
>5695	Identifier	numpoints
>5696	Identifier	w
>5697	Identifier	j
>5698	ForInit	 
>5699	AssignmentExpr	j = 0
>5700	PrimaryExpression	0
>5701	Identifier	j
>5702	ExpressionStatement	 
>5703	CallExpression	Face_SetColor ( b , face , 1.0 )
>5704	ArgumentList	b
>5705	Argument	1.0
>5706	PrimaryExpression	1.0
>5707	Argument	face
>5708	Identifier	face
>5709	Argument	b
>5710	Identifier	b
>5711	Callee	Face_SetColor
>5712	Identifier	Face_SetColor
>5713	ExpressionStatement	 
>5714	CallExpression	Winding_RemovePoint ( w , i )
>5715	ArgumentList	w
>5716	Argument	i
>5717	Identifier	i
>5718	Argument	w
>5719	Identifier	w
>5720	Callee	Winding_RemovePoint
>5721	Identifier	Winding_RemovePoint
>5722	ExpressionStatement	 
>5723	CallExpression	VectorCopy ( w -> points [ ( i + 1 ) % w -> numpoints ] , tmpw . points [ 2 ] )
>5724	ArgumentList	w -> points [ ( i + 1 ) % w -> numpoints ]
>5725	Argument	tmpw . points [ 2 ]
>5726	ArrayIndexing	tmpw . points [ 2 ]
>5727	PrimaryExpression	2
>5728	MemberAccess	tmpw . points
>5729	Identifier	points
>5730	Identifier	tmpw
>5731	Argument	w -> points [ ( i + 1 ) % w -> numpoints ]
>5732	ArrayIndexing	w -> points [ ( i + 1 ) % w -> numpoints ]
>5733	MultiplicativeExpression	( i + 1 ) % w -> numpoints
>5734	PtrMemberAccess	w -> numpoints
>5735	Identifier	numpoints
>5736	Identifier	w
>5737	AdditiveExpression	i + 1
>5738	PrimaryExpression	1
>5739	Identifier	i
>5740	PtrMemberAccess	w -> points
>5741	Identifier	points
>5742	Identifier	w
>5743	Callee	VectorCopy
>5744	Identifier	VectorCopy
>5745	ExpressionStatement	 
>5746	CallExpression	VectorCopy ( w -> points [ i ] , tmpw . points [ 1 ] )
>5747	ArgumentList	w -> points [ i ]
>5748	Argument	tmpw . points [ 1 ]
>5749	ArrayIndexing	tmpw . points [ 1 ]
>5750	PrimaryExpression	1
>5751	MemberAccess	tmpw . points
>5752	Identifier	points
>5753	Identifier	tmpw
>5754	Argument	w -> points [ i ]
>5755	ArrayIndexing	w -> points [ i ]
>5756	Identifier	i
>5757	PtrMemberAccess	w -> points
>5758	Identifier	points
>5759	Identifier	w
>5760	Callee	VectorCopy
>5761	Identifier	VectorCopy
>5762	ExpressionStatement	 
>5763	CallExpression	VectorCopy ( w -> points [ ( i - 1 + w -> numpoints ) % w -> numpoints ] , tmpw . points [ 0 ] )
>5764	ArgumentList	w -> points [ ( i - 1 + w -> numpoints ) % w -> numpoints ]
>5765	Argument	tmpw . points [ 0 ]
>5766	ArrayIndexing	tmpw . points [ 0 ]
>5767	PrimaryExpression	0
>5768	MemberAccess	tmpw . points
>5769	Identifier	points
>5770	Identifier	tmpw
>5771	Argument	w -> points [ ( i - 1 + w -> numpoints ) % w -> numpoints ]
>5772	ArrayIndexing	w -> points [ ( i - 1 + w -> numpoints ) % w -> numpoints ]
>5773	MultiplicativeExpression	( i - 1 + w -> numpoints ) % w -> numpoints
>5774	PtrMemberAccess	w -> numpoints
>5775	Identifier	numpoints
>5776	Identifier	w
>5777	AdditiveExpression	i - 1 + w -> numpoints
>5778	AdditiveExpression	1 + w -> numpoints
>5779	PtrMemberAccess	w -> numpoints
>5780	Identifier	numpoints
>5781	Identifier	w
>5782	PrimaryExpression	1
>5783	Identifier	i
>5784	PtrMemberAccess	w -> points
>5785	Identifier	points
>5786	Identifier	w
>5787	Callee	VectorCopy
>5788	Identifier	VectorCopy
>5789	CompoundStatement	 
>5790	ExpressionStatement	 
>5791	AssignmentExpr	movefaces [ nummovefaces ++ ] = face
>5792	Identifier	face
>5793	ArrayIndexing	movefaces [ nummovefaces ++ ]
>5794	IncDecOp	nummovefaces ++
>5795	IncDec	++
>5796	Identifier	nummovefaces
>5797	Identifier	movefaces
>5798	ExpressionStatement	 
>5799	AssignmentExpr	movefacepoints [ nummovefaces ] = 2
>5800	PrimaryExpression	2
>5801	ArrayIndexing	movefacepoints [ nummovefaces ]
>5802	Identifier	nummovefaces
>5803	Identifier	movefacepoints
>5804	ExpressionStatement	 
>5805	AssignmentExpr	face -> face_winding = Winding_Clone ( & tmpw )
>5806	CallExpression	Winding_Clone ( & tmpw )
>5807	ArgumentList	& tmpw
>5808	Argument	& tmpw
>5809	UnaryOp	& tmpw
>5810	Identifier	tmpw
>5811	UnaryOperator	&
>5812	Callee	Winding_Clone
>5813	Identifier	Winding_Clone
>5814	PtrMemberAccess	face -> face_winding
>5815	Identifier	face_winding
>5816	Identifier	face
>5817	ExpressionStatement	 
>5818	CallExpression	Winding_Free ( face -> face_winding )
>5819	ArgumentList	face -> face_winding
>5820	Argument	face -> face_winding
>5821	PtrMemberAccess	face -> face_winding
>5822	Identifier	face_winding
>5823	Identifier	face
>5824	Callee	Winding_Free
>5825	Identifier	Winding_Free
>5826	ExpressionStatement	 
>5827	CallExpression	VectorCopy ( w -> points [ i ] , tmpw . points [ 2 ] )
>5828	ArgumentList	w -> points [ i ]
>5829	Argument	tmpw . points [ 2 ]
>5830	ArrayIndexing	tmpw . points [ 2 ]
>5831	PrimaryExpression	2
>5832	MemberAccess	tmpw . points
>5833	Identifier	points
>5834	Identifier	tmpw
>5835	Argument	w -> points [ i ]
>5836	ArrayIndexing	w -> points [ i ]
>5837	Identifier	i
>5838	PtrMemberAccess	w -> points
>5839	Identifier	points
>5840	Identifier	w
>5841	Callee	VectorCopy
>5842	Identifier	VectorCopy
>5843	ExpressionStatement	 
>5844	CallExpression	VectorCopy ( w -> points [ ( i - 1 + w -> numpoints ) % w -> numpoints ] , tmpw . points [ 1 ] )
>5845	ArgumentList	w -> points [ ( i - 1 + w -> numpoints ) % w -> numpoints ]
>5846	Argument	tmpw . points [ 1 ]
>5847	ArrayIndexing	tmpw . points [ 1 ]
>5848	PrimaryExpression	1
>5849	MemberAccess	tmpw . points
>5850	Identifier	points
>5851	Identifier	tmpw
>5852	Argument	w -> points [ ( i - 1 + w -> numpoints ) % w -> numpoints ]
>5853	ArrayIndexing	w -> points [ ( i - 1 + w -> numpoints ) % w -> numpoints ]
>5854	MultiplicativeExpression	( i - 1 + w -> numpoints ) % w -> numpoints
>5855	PtrMemberAccess	w -> numpoints
>5856	Identifier	numpoints
>5857	Identifier	w
>5858	AdditiveExpression	i - 1 + w -> numpoints
>5859	AdditiveExpression	1 + w -> numpoints
>5860	PtrMemberAccess	w -> numpoints
>5861	Identifier	numpoints
>5862	Identifier	w
>5863	PrimaryExpression	1
>5864	Identifier	i
>5865	PtrMemberAccess	w -> points
>5866	Identifier	points
>5867	Identifier	w
>5868	Callee	VectorCopy
>5869	Identifier	VectorCopy
>5870	ExpressionStatement	 
>5871	CallExpression	VectorCopy ( w -> points [ ( i - 2 + w -> numpoints ) % w -> numpoints ] , tmpw . points [ 0 ] )
>5872	ArgumentList	w -> points [ ( i - 2 + w -> numpoints ) % w -> numpoints ]
>5873	Argument	tmpw . points [ 0 ]
>5874	ArrayIndexing	tmpw . points [ 0 ]
>5875	PrimaryExpression	0
>5876	MemberAccess	tmpw . points
>5877	Identifier	points
>5878	Identifier	tmpw
>5879	Argument	w -> points [ ( i - 2 + w -> numpoints ) % w -> numpoints ]
>5880	ArrayIndexing	w -> points [ ( i - 2 + w -> numpoints ) % w -> numpoints ]
>5881	MultiplicativeExpression	( i - 2 + w -> numpoints ) % w -> numpoints
>5882	PtrMemberAccess	w -> numpoints
>5883	Identifier	numpoints
>5884	Identifier	w
>5885	AdditiveExpression	i - 2 + w -> numpoints
>5886	AdditiveExpression	2 + w -> numpoints
>5887	PtrMemberAccess	w -> numpoints
>5888	Identifier	numpoints
>5889	Identifier	w
>5890	PrimaryExpression	2
>5891	Identifier	i
>5892	PtrMemberAccess	w -> points
>5893	Identifier	points
>5894	Identifier	w
>5895	Callee	VectorCopy
>5896	Identifier	VectorCopy
>5897	ForStatement	for ( k = i ; k < i + w -> numpoints - 3 ; k ++ )
>5898	CompoundStatement	 
>5899	ExpressionStatement	 
>5900	AssignmentExpr	movefaces [ nummovefaces ++ ] = newface
>5901	Identifier	newface
>5902	ArrayIndexing	movefaces [ nummovefaces ++ ]
>5903	IncDecOp	nummovefaces ++
>5904	IncDec	++
>5905	Identifier	nummovefaces
>5906	Identifier	movefaces
>5907	ExpressionStatement	 
>5908	AssignmentExpr	movefacepoints [ nummovefaces ] = 0
>5909	PrimaryExpression	0
>5910	ArrayIndexing	movefacepoints [ nummovefaces ]
>5911	Identifier	nummovefaces
>5912	Identifier	movefacepoints
>5913	ExpressionStatement	 
>5914	AssignmentExpr	b -> brush_faces = newface
>5915	Identifier	newface
>5916	PtrMemberAccess	b -> brush_faces
>5917	Identifier	brush_faces
>5918	Identifier	b
>5919	ExpressionStatement	 
>5920	AssignmentExpr	newface -> next = b -> brush_faces
>5921	PtrMemberAccess	b -> brush_faces
>5922	Identifier	brush_faces
>5923	Identifier	b
>5924	PtrMemberAccess	newface -> next
>5925	Identifier	next
>5926	Identifier	newface
>5927	ExpressionStatement	 
>5928	AssignmentExpr	newface -> d_texture = Texture_ForName ( newface -> texdef . name )
>5929	CallExpression	Texture_ForName ( newface -> texdef . name )
>5930	ArgumentList	newface -> texdef . name
>5931	Argument	newface -> texdef . name
>5932	MemberAccess	newface -> texdef . name
>5933	Identifier	name
>5934	PtrMemberAccess	newface -> texdef
>5935	Identifier	texdef
>5936	Identifier	newface
>5937	Callee	Texture_ForName
>5938	Identifier	Texture_ForName
>5939	PtrMemberAccess	newface -> d_texture
>5940	Identifier	d_texture
>5941	Identifier	newface
>5942	ExpressionStatement	 
>5943	AssignmentExpr	newface -> face_winding = Winding_Clone ( & tmpw )
>5944	CallExpression	Winding_Clone ( & tmpw )
>5945	ArgumentList	& tmpw
>5946	Argument	& tmpw
>5947	UnaryOp	& tmpw
>5948	Identifier	tmpw
>5949	UnaryOperator	&
>5950	Callee	Winding_Clone
>5951	Identifier	Winding_Clone
>5952	PtrMemberAccess	newface -> face_winding
>5953	Identifier	face_winding
>5954	Identifier	newface
>5955	IfStatement	if ( newface -> face_winding )
>5956	ExpressionStatement	 
>5957	CallExpression	Winding_Free ( newface -> face_winding )
>5958	ArgumentList	newface -> face_winding
>5959	Argument	newface -> face_winding
>5960	PtrMemberAccess	newface -> face_winding
>5961	Identifier	face_winding
>5962	Identifier	newface
>5963	Callee	Winding_Free
>5964	Identifier	Winding_Free
>5965	Condition	 
>5966	PtrMemberAccess	newface -> face_winding
>5967	Identifier	face_winding
>5968	Identifier	newface
>5969	ExpressionStatement	 
>5970	AssignmentExpr	newface -> original = f
>5971	Identifier	f
>5972	PtrMemberAccess	newface -> original
>5973	Identifier	original
>5974	Identifier	newface
>5975	ForStatement	for ( f = face ; f -> original ; f = f -> original )
>5976	ExpressionStatement	 
>5977	AssignmentExpr	 
>5978	PtrMemberAccess	f -> original
>5979	Identifier	original
>5980	Identifier	f
>5981	Identifier	f
>5982	Condition	 
>5983	PtrMemberAccess	f -> original
>5984	Identifier	original
>5985	Identifier	f
>5986	ForInit	 
>5987	AssignmentExpr	f = face
>5988	Identifier	face
>5989	Identifier	f
>5990	ExpressionStatement	 
>5991	AssignmentExpr	newface = Face_Clone ( face )
>5992	CallExpression	Face_Clone ( face )
>5993	ArgumentList	face
>5994	Argument	face
>5995	Identifier	face
>5996	Callee	Face_Clone
>5997	Identifier	Face_Clone
>5998	Identifier	newface
>5999	ExpressionStatement	 
>6000	CallExpression	VectorCopy ( w -> points [ ( k + 2 ) % w -> numpoints ] , tmpw . points [ 2 ] )
>6001	ArgumentList	w -> points [ ( k + 2 ) % w -> numpoints ]
>6002	Argument	tmpw . points [ 2 ]
>6003	ArrayIndexing	tmpw . points [ 2 ]
>6004	PrimaryExpression	2
>6005	MemberAccess	tmpw . points
>6006	Identifier	points
>6007	Identifier	tmpw
>6008	Argument	w -> points [ ( k + 2 ) % w -> numpoints ]
>6009	ArrayIndexing	w -> points [ ( k + 2 ) % w -> numpoints ]
>6010	MultiplicativeExpression	( k + 2 ) % w -> numpoints
>6011	PtrMemberAccess	w -> numpoints
>6012	Identifier	numpoints
>6013	Identifier	w
>6014	AdditiveExpression	k + 2
>6015	PrimaryExpression	2
>6016	Identifier	k
>6017	PtrMemberAccess	w -> points
>6018	Identifier	points
>6019	Identifier	w
>6020	Callee	VectorCopy
>6021	Identifier	VectorCopy
>6022	ExpressionStatement	 
>6023	CallExpression	VectorCopy ( w -> points [ ( k + 1 ) % w -> numpoints ] , tmpw . points [ 1 ] )
>6024	ArgumentList	w -> points [ ( k + 1 ) % w -> numpoints ]
>6025	Argument	tmpw . points [ 1 ]
>6026	ArrayIndexing	tmpw . points [ 1 ]
>6027	PrimaryExpression	1
>6028	MemberAccess	tmpw . points
>6029	Identifier	points
>6030	Identifier	tmpw
>6031	Argument	w -> points [ ( k + 1 ) % w -> numpoints ]
>6032	ArrayIndexing	w -> points [ ( k + 1 ) % w -> numpoints ]
>6033	MultiplicativeExpression	( k + 1 ) % w -> numpoints
>6034	PtrMemberAccess	w -> numpoints
>6035	Identifier	numpoints
>6036	Identifier	w
>6037	AdditiveExpression	k + 1
>6038	PrimaryExpression	1
>6039	Identifier	k
>6040	PtrMemberAccess	w -> points
>6041	Identifier	points
>6042	Identifier	w
>6043	Callee	VectorCopy
>6044	Identifier	VectorCopy
>6045	ExpressionStatement	 
>6046	CallExpression	VectorCopy ( w -> points [ i ] , tmpw . points [ 0 ] )
>6047	ArgumentList	w -> points [ i ]
>6048	Argument	tmpw . points [ 0 ]
>6049	ArrayIndexing	tmpw . points [ 0 ]
>6050	PrimaryExpression	0
>6051	MemberAccess	tmpw . points
>6052	Identifier	points
>6053	Identifier	tmpw
>6054	Argument	w -> points [ i ]
>6055	ArrayIndexing	w -> points [ i ]
>6056	Identifier	i
>6057	PtrMemberAccess	w -> points
>6058	Identifier	points
>6059	Identifier	w
>6060	Callee	VectorCopy
>6061	Identifier	VectorCopy
>6062	IncDecOp	 
>6063	IncDec	++
>6064	Identifier	k
>6065	Condition	 
>6066	RelationalExpression	k < i + w -> numpoints - 3
>6067	AdditiveExpression	i + w -> numpoints - 3
>6068	AdditiveExpression	w -> numpoints - 3
>6069	PrimaryExpression	3
>6070	PtrMemberAccess	w -> numpoints
>6071	Identifier	numpoints
>6072	Identifier	w
>6073	Identifier	i
>6074	Identifier	k
>6075	ForInit	 
>6076	AssignmentExpr	k = i
>6077	Identifier	i
>6078	Identifier	k
>6079	Condition	 
>6080	RelationalExpression	dot > 0.1
>6081	PrimaryExpression	0.1
>6082	Identifier	dot
>6083	ExpressionStatement	 
>6084	AssignmentExpr	dot = DotProduct ( end , face -> plane . normal ) - face -> plane . dist
>6085	AdditiveExpression	DotProduct ( end , face -> plane . normal ) - face -> plane . dist
>6086	MemberAccess	face -> plane . dist
>6087	Identifier	dist
>6088	PtrMemberAccess	face -> plane
>6089	Identifier	plane
>6090	Identifier	face
>6091	CallExpression	DotProduct ( end , face -> plane . normal )
>6092	ArgumentList	end
>6093	Argument	face -> plane . normal
>6094	MemberAccess	face -> plane . normal
>6095	Identifier	normal
>6096	PtrMemberAccess	face -> plane
>6097	Identifier	plane
>6098	Identifier	face
>6099	Argument	end
>6100	Identifier	end
>6101	Callee	DotProduct
>6102	Identifier	DotProduct
>6103	Identifier	dot
>6104	IfStatement	if ( face -> face_winding -> numpoints <= 3 )
>6105	CompoundStatement	 
>6106	BreakStatement	 
>6107	ExpressionStatement	 
>6108	AssignmentExpr	movefaces [ nummovefaces ++ ] = face
>6109	Identifier	face
>6110	ArrayIndexing	movefaces [ nummovefaces ++ ]
>6111	IncDecOp	nummovefaces ++
>6112	IncDec	++
>6113	Identifier	nummovefaces
>6114	Identifier	movefaces
>6115	ExpressionStatement	 
>6116	AssignmentExpr	movefacepoints [ nummovefaces ] = i
>6117	Identifier	i
>6118	ArrayIndexing	movefacepoints [ nummovefaces ]
>6119	Identifier	nummovefaces
>6120	Identifier	movefacepoints
>6121	Condition	 
>6122	RelationalExpression	face -> face_winding -> numpoints <= 3
>6123	PrimaryExpression	3
>6124	PtrMemberAccess	face -> face_winding -> numpoints
>6125	Identifier	numpoints
>6126	PtrMemberAccess	face -> face_winding
>6127	Identifier	face_winding
>6128	Identifier	face
>6129	Condition	 
>6130	CallExpression	Point_Equal ( w -> points [ i ] , vertex , POINT_EPSILON )
>6131	ArgumentList	w -> points [ i ]
>6132	Argument	POINT_EPSILON
>6133	Identifier	POINT_EPSILON
>6134	Argument	vertex
>6135	Identifier	vertex
>6136	Argument	w -> points [ i ]
>6137	ArrayIndexing	w -> points [ i ]
>6138	Identifier	i
>6139	PtrMemberAccess	w -> points
>6140	Identifier	points
>6141	Identifier	w
>6142	Callee	Point_Equal
>6143	Identifier	Point_Equal
>6144	IncDecOp	 
>6145	IncDec	++
>6146	Identifier	i
>6147	Condition	 
>6148	RelationalExpression	i < w -> numpoints
>6149	PtrMemberAccess	w -> numpoints
>6150	Identifier	numpoints
>6151	Identifier	w
>6152	Identifier	i
>6153	ForInit	 
>6154	AssignmentExpr	i = 0
>6155	PrimaryExpression	0
>6156	Identifier	i
>6157	IfStatement	if ( ! w )
>6158	ContinueStatement	 
>6159	Condition	 
>6160	UnaryOp	! w
>6161	Identifier	w
>6162	UnaryOperator	!
>6163	ExpressionStatement	 
>6164	AssignmentExpr	w = face -> face_winding
>6165	PtrMemberAccess	face -> face_winding
>6166	Identifier	face_winding
>6167	Identifier	face
>6168	Identifier	w
>6169	AssignmentExpr	 
>6170	PtrMemberAccess	face -> next
>6171	Identifier	next
>6172	Identifier	face
>6173	Identifier	face
>6174	Condition	 
>6175	Identifier	face
>6176	ForInit	 
>6177	AssignmentExpr	face = b -> brush_faces
>6178	PtrMemberAccess	b -> brush_faces
>6179	Identifier	brush_faces
>6180	Identifier	b
>6181	Identifier	face
>6182	ExpressionStatement	 
>6183	AssignmentExpr	nummovefaces = 0
>6184	PrimaryExpression	0
>6185	Identifier	nummovefaces
>6186	IfStatement	if ( bSnap )
>6187	ForStatement	for ( i = 0 ; i < 3 ; i ++ )
>6188	ExpressionStatement	 
>6189	AssignmentExpr	end [ i ] = floor ( end [ i ] / g_qeglobals . d_gridsize + 0.5 ) * g_qeglobals . d_gridsize
>6190	MultiplicativeExpression	floor ( end [ i ] / g_qeglobals . d_gridsize + 0.5 ) * g_qeglobals . d_gridsize
>6191	MemberAccess	g_qeglobals . d_gridsize
>6192	Identifier	d_gridsize
>6193	Identifier	g_qeglobals
>6194	CallExpression	floor ( end [ i ] / g_qeglobals . d_gridsize + 0.5 )
>6195	ArgumentList	end [ i ] / g_qeglobals . d_gridsize + 0.5
>6196	Argument	end [ i ] / g_qeglobals . d_gridsize + 0.5
>6197	AdditiveExpression	end [ i ] / g_qeglobals . d_gridsize + 0.5
>6198	PrimaryExpression	0.5
>6199	MultiplicativeExpression	end [ i ] / g_qeglobals . d_gridsize
>6200	MemberAccess	g_qeglobals . d_gridsize
>6201	Identifier	d_gridsize
>6202	Identifier	g_qeglobals
>6203	ArrayIndexing	end [ i ]
>6204	Identifier	i
>6205	Identifier	end
>6206	Callee	floor
>6207	Identifier	floor
>6208	ArrayIndexing	end [ i ]
>6209	Identifier	i
>6210	Identifier	end
>6211	IncDecOp	 
>6212	IncDec	++
>6213	Identifier	i
>6214	Condition	 
>6215	RelationalExpression	i < 3
>6216	PrimaryExpression	3
>6217	Identifier	i
>6218	ForInit	 
>6219	AssignmentExpr	i = 0
>6220	PrimaryExpression	0
>6221	Identifier	i
>6222	Condition	 
>6223	Identifier	bSnap
>6224	ExpressionStatement	 
>6225	CallExpression	VectorAdd ( vertex , delta , end )
>6226	ArgumentList	vertex
>6227	Argument	end
>6228	Identifier	end
>6229	Argument	delta
>6230	Identifier	delta
>6231	Argument	vertex
>6232	Identifier	vertex
>6233	Callee	VectorAdd
>6234	Identifier	VectorAdd
>6235	ExpressionStatement	 
>6236	AssignmentExpr	tmpw . maxpoints = 3
>6237	PrimaryExpression	3
>6238	MemberAccess	tmpw . maxpoints
>6239	Identifier	maxpoints
>6240	Identifier	tmpw
>6241	ExpressionStatement	 
>6242	AssignmentExpr	tmpw . numpoints = 3
>6243	PrimaryExpression	3
>6244	MemberAccess	tmpw . numpoints
>6245	Identifier	numpoints
>6246	Identifier	tmpw
>6247	ExpressionStatement	 
>6248	AssignmentExpr	result = true
>6249	Identifier	true
>6250	Identifier	result
>6251	IdentifierDeclStatement	 
>6252	IdentifierDecl	dot
>6253	Identifier	dot
>6254	IdentifierDeclType	float
>6255	IdentifierDeclStatement	 
>6256	IdentifierDecl	result
>6257	Identifier	result
>6258	IdentifierDeclType	int
>6259	IdentifierDecl	nummovefaces
>6260	Identifier	nummovefaces
>6261	IdentifierDeclType	int
>6262	IdentifierDecl	k
>6263	Identifier	k
>6264	IdentifierDeclType	int
>6265	IdentifierDecl	j
>6266	Identifier	j
>6267	IdentifierDeclType	int
>6268	IdentifierDecl	i
>6269	Identifier	i
>6270	IdentifierDeclType	int
>6271	IdentifierDeclStatement	 
>6272	IdentifierDecl	tmpw
>6273	Identifier	tmpw
>6274	IdentifierDeclType	winding_t
>6275	IdentifierDecl	* w
>6276	Identifier	w
>6277	IdentifierDeclType	winding_t *
>6278	IdentifierDeclStatement	 
>6279	IdentifierDecl	movefacepoints [ MAX_MOVE_FACES ]
>6280	Identifier	MAX_MOVE_FACES
>6281	Identifier	movefacepoints
>6282	IdentifierDeclType	int [ MAX_MOVE_FACES ]
>6283	IdentifierDeclStatement	 
>6284	IdentifierDecl	* movefaces [ MAX_MOVE_FACES ]
>6285	Identifier	MAX_MOVE_FACES
>6286	Identifier	movefaces
>6287	IdentifierDeclType	face_t * [ MAX_MOVE_FACES ]
>6288	IdentifierDeclStatement	 
>6289	IdentifierDecl	* nextface
>6290	Identifier	nextface
>6291	IdentifierDeclType	face_t *
>6292	IdentifierDecl	* lastface
>6293	Identifier	lastface
>6294	IdentifierDeclType	face_t *
>6295	IdentifierDecl	* newface
>6296	Identifier	newface
>6297	IdentifierDeclType	face_t *
>6298	IdentifierDecl	* face
>6299	Identifier	face
>6300	IdentifierDeclType	face_t *
>6301	IdentifierDecl	* f
>6302	Identifier	f
>6303	IdentifierDeclType	face_t *
>6418	FunctionDef	Brush_MoveVertex (brush_t * b , vec3_t vertex , vec3_t delta , vec3_t end , bool bSnap)
>6419	ParameterList	brush_t * b , vec3_t vertex , vec3_t delta , vec3_t end , bool bSnap
>6420	Parameter	 
>6421	Identifier	bSnap
>6422	ParameterType	bool
>6423	Parameter	 
>6424	Identifier	end
>6425	ParameterType	vec3_t
>6426	Parameter	 
>6427	Identifier	delta
>6428	ParameterType	vec3_t
>6429	Parameter	 
>6430	Identifier	vertex
>6431	ParameterType	vec3_t
>6432	Parameter	 
>6433	Identifier	b
>6434	ParameterType	brush_t *
>6435	ReturnType	int
>6436	CompoundStatement	 
>6437	ReturnStatement	 
>6438	Identifier	result
>6439	WhileStatement	while ( ! done )
>6440	CompoundStatement	 
>6441	ForStatement	for ( face = b -> brush_faces ; face ; face = nextface )
>6442	CompoundStatement	 
>6443	ExpressionStatement	 
>6444	CallExpression	Face_Free ( face )
>6445	ArgumentList	face
>6446	Argument	face
>6447	Identifier	face
>6448	Callee	Face_Free
>6449	Identifier	Face_Free
>6450	IfStatement	if ( lastface )
>6451	ElseStatement	else
>6452	ExpressionStatement	 
>6453	AssignmentExpr	b -> brush_faces = face -> next
>6454	PtrMemberAccess	face -> next
>6455	Identifier	next
>6456	Identifier	face
>6457	PtrMemberAccess	b -> brush_faces
>6458	Identifier	brush_faces
>6459	Identifier	b
>6460	ExpressionStatement	 
>6461	AssignmentExpr	lastface -> next = face -> next
>6462	PtrMemberAccess	face -> next
>6463	Identifier	next
>6464	Identifier	face
>6465	PtrMemberAccess	lastface -> next
>6466	Identifier	next
>6467	Identifier	lastface
>6468	Condition	 
>6469	Identifier	lastface
>6470	ForStatement	for ( j = 0 ; j < face -> original -> face_winding -> numpoints ; j ++ )
>6471	ExpressionStatement	 
>6472	CallExpression	EmitTextureCoordinates ( face -> original -> face_winding -> points [ j ] , face -> original -> d_texture , face \
>6473	ArgumentList	face -> original -> face_winding -> points [ j ]
>6474	Argument	face -> original
>6475	PtrMemberAccess	face -> original
>6476	Identifier	original
>6477	Identifier	face
>6478	Argument	face -> original -> d_texture
>6479	PtrMemberAccess	face -> original -> d_texture
>6480	Identifier	d_texture
>6481	PtrMemberAccess	face -> original
>6482	Identifier	original
>6483	Identifier	face
>6484	Argument	face -> original -> face_winding -> points [ j ]
>6485	ArrayIndexing	face -> original -> face_winding -> points [ j ]
>6486	Identifier	j
>6487	PtrMemberAccess	face -> original -> face_winding -> points
>6488	Identifier	points
>6489	PtrMemberAccess	face -> original -> face_winding
>6490	Identifier	face_winding
>6491	PtrMemberAccess	face -> original
>6492	Identifier	original
>6493	Identifier	face
>6494	Callee	EmitTextureCoordinates
>6495	Identifier	EmitTextureCoordinates
>6496	IncDecOp	 
>6497	IncDec	++
>6498	Identifier	j
>6499	Condition	 
>6500	RelationalExpression	j < face -> original -> face_winding -> numpoints
>6501	PtrMemberAccess	face -> original -> face_winding -> numpoints
>6502	Identifier	numpoints
>6503	PtrMemberAccess	face -> original -> face_winding
>6504	Identifier	face_winding
>6505	PtrMemberAccess	face -> original
>6506	Identifier	original
>6507	Identifier	face
>6508	Identifier	j
>6509	ForInit	 
>6510	AssignmentExpr	j = 0
>6511	PrimaryExpression	0
>6512	Identifier	j
>6513	ExpressionStatement	 
>6514	CallExpression	Face_SetColor ( b , face -> original , 1.0 )
>6515	ArgumentList	b
>6516	Argument	1.0
>6517	PrimaryExpression	1.0
>6518	Argument	face -> original
>6519	PtrMemberAccess	face -> original
>6520	Identifier	original
>6521	Identifier	face
>6522	Argument	b
>6523	Identifier	b
>6524	Callee	Face_SetColor
>6525	Identifier	Face_SetColor
>6526	ExpressionStatement	 
>6527	AssignmentExpr	face -> original -> face_winding = w
>6528	Identifier	w
>6529	PtrMemberAccess	face -> original -> face_winding
>6530	Identifier	face_winding
>6531	PtrMemberAccess	face -> original
>6532	Identifier	original
>6533	Identifier	face
>6534	ExpressionStatement	 
>6535	CallExpression	Winding_Free ( face -> original -> face_winding )
>6536	ArgumentList	face -> original -> face_winding
>6537	Argument	face -> original -> face_winding
>6538	PtrMemberAccess	face -> original -> face_winding
>6539	Identifier	face_winding
>6540	PtrMemberAccess	face -> original
>6541	Identifier	original
>6542	Identifier	face
>6543	Callee	Winding_Free
>6544	Identifier	Winding_Free
>6545	IfStatement	if ( ! w )
>6546	CompoundStatement	 
>6547	ContinueStatement	 
>6548	ExpressionStatement	 
>6549	AssignmentExpr	lastface = face
>6550	Identifier	face
>6551	Identifier	lastface
>6552	Condition	 
>6553	UnaryOp	! w
>6554	Identifier	w
>6555	UnaryOperator	!
>6556	ExpressionStatement	 
>6557	AssignmentExpr	w = Winding_TryMerge ( face -> face_winding , face -> original -> face_winding , face -> plane . normal , \
>6558	CallExpression	Winding_TryMerge ( face -> face_winding , face -> original -> face_winding , face -> plane . normal , true )
>6559	ArgumentList	face -> face_winding
>6560	Argument	true
>6561	Identifier	true
>6562	Argument	face -> plane . normal
>6563	MemberAccess	face -> plane . normal
>6564	Identifier	normal
>6565	PtrMemberAccess	face -> plane
>6566	Identifier	plane
>6567	Identifier	face
>6568	Argument	face -> original -> face_winding
>6569	PtrMemberAccess	face -> original -> face_winding
>6570	Identifier	face_winding
>6571	PtrMemberAccess	face -> original
>6572	Identifier	original
>6573	Identifier	face
>6574	Argument	face -> face_winding
>6575	PtrMemberAccess	face -> face_winding
>6576	Identifier	face_winding
>6577	Identifier	face
>6578	Callee	Winding_TryMerge
>6579	Identifier	Winding_TryMerge
>6580	Identifier	w
>6581	IfStatement	if ( ! Plane_Equal ( & face -> plane , & face -> original -> plane , false ) )
>6582	CompoundStatement	 
>6583	ContinueStatement	 
>6584	ExpressionStatement	 
>6585	AssignmentExpr	lastface = face
>6586	Identifier	face
>6587	Identifier	lastface
>6588	Condition	 
>6589	UnaryOp	! Plane_Equal ( & face -> plane , & face -> original -> plane , false )
>6590	CallExpression	Plane_Equal ( & face -> plane , & face -> original -> plane , false )
>6591	ArgumentList	& face -> plane
>6592	Argument	false
>6593	Identifier	false
>6594	Argument	& face -> original -> plane
>6595	UnaryOp	& face -> original -> plane
>6596	PtrMemberAccess	face -> original -> plane
>6597	Identifier	plane
>6598	PtrMemberAccess	face -> original
>6599	Identifier	original
>6600	Identifier	face
>6601	UnaryOperator	&
>6602	Argument	& face -> plane
>6603	UnaryOp	& face -> plane
>6604	PtrMemberAccess	face -> plane
>6605	Identifier	plane
>6606	Identifier	face
>6607	UnaryOperator	&
>6608	Callee	Plane_Equal
>6609	Identifier	Plane_Equal
>6610	UnaryOperator	!
>6611	IfStatement	if ( ! face -> original )
>6612	CompoundStatement	 
>6613	ContinueStatement	 
>6614	ExpressionStatement	 
>6615	AssignmentExpr	lastface = face
>6616	Identifier	face
>6617	Identifier	lastface
>6618	Condition	 
>6619	UnaryOp	! face -> original
>6620	PtrMemberAccess	face -> original
>6621	Identifier	original
>6622	Identifier	face
>6623	UnaryOperator	!
>6624	ExpressionStatement	 
>6625	AssignmentExpr	nextface = face -> next
>6626	PtrMemberAccess	face -> next
>6627	Identifier	next
>6628	Identifier	face
>6629	Identifier	nextface
>6630	AssignmentExpr	 
>6631	Identifier	nextface
>6632	Identifier	face
>6633	Condition	 
>6634	Identifier	face
>6635	ForInit	 
>6636	AssignmentExpr	face = b -> brush_faces
>6637	PtrMemberAccess	b -> brush_faces
>6638	Identifier	brush_faces
>6639	Identifier	b
>6640	Identifier	face
>6641	ExpressionStatement	 
>6642	AssignmentExpr	lastface = NULL
>6643	Identifier	NULL
>6644	Identifier	lastface
>6645	ForStatement	for ( i = 0 ; i < nummovefaces ; i ++ )
>6646	CompoundStatement	 
>6647	ForStatement	for ( j = 0 ; j < movefaces [ i ] -> face_winding -> numpoints ; j ++ )
>6648	ExpressionStatement	 
>6649	CallExpression	EmitTextureCoordinates ( movefaces [ i ] -> face_winding -> points [ j ] , movefaces [ i ] -> d_texture , movefaces [ \
>6650	ArgumentList	movefaces [ i ] -> face_winding -> points [ j ]
>6651	Argument	movefaces [ i ]
>6652	ArrayIndexing	movefaces [ i ]
>6653	Identifier	i
>6654	Identifier	movefaces
>6655	Argument	movefaces [ i ] -> d_texture
>6656	PtrMemberAccess	movefaces [ i ] -> d_texture
>6657	Identifier	d_texture
>6658	ArrayIndexing	movefaces [ i ]
>6659	Identifier	i
>6660	Identifier	movefaces
>6661	Argument	movefaces [ i ] -> face_winding -> points [ j ]
>6662	ArrayIndexing	movefaces [ i ] -> face_winding -> points [ j ]
>6663	Identifier	j
>6664	PtrMemberAccess	movefaces [ i ] -> face_winding -> points
>6665	Identifier	points
>6666	PtrMemberAccess	movefaces [ i ] -> face_winding
>6667	Identifier	face_winding
>6668	ArrayIndexing	movefaces [ i ]
>6669	Identifier	i
>6670	Identifier	movefaces
>6671	Callee	EmitTextureCoordinates
>6672	Identifier	EmitTextureCoordinates
>6673	IncDecOp	 
>6674	IncDec	++
>6675	Identifier	j
>6676	Condition	 
>6677	RelationalExpression	j < movefaces [ i ] -> face_winding -> numpoints
>6678	PtrMemberAccess	movefaces [ i ] -> face_winding -> numpoints
>6679	Identifier	numpoints
>6680	PtrMemberAccess	movefaces [ i ] -> face_winding
>6681	Identifier	face_winding
>6682	ArrayIndexing	movefaces [ i ]
>6683	Identifier	i
>6684	Identifier	movefaces
>6685	Identifier	j
>6686	ForInit	 
>6687	AssignmentExpr	j = 0
>6688	PrimaryExpression	0
>6689	Identifier	j
>6690	ExpressionStatement	 
>6691	CallExpression	Face_SetColor ( b , movefaces [ i ] , 1.0 )
>6692	ArgumentList	b
>6693	Argument	1.0
>6694	PrimaryExpression	1.0
>6695	Argument	movefaces [ i ]
>6696	ArrayIndexing	movefaces [ i ]
>6697	Identifier	i
>6698	Identifier	movefaces
>6699	Argument	b
>6700	Identifier	b
>6701	Callee	Face_SetColor
>6702	Identifier	Face_SetColor
>6703	IncDecOp	 
>6704	IncDec	++
>6705	Identifier	i
>6706	Condition	 
>6707	RelationalExpression	i < nummovefaces
>6708	Identifier	nummovefaces
>6709	Identifier	i
>6710	ForInit	 
>6711	AssignmentExpr	i = 0
>6712	PrimaryExpression	0
>6713	Identifier	i
>6714	IfStatement	if ( ! result || ! Brush_Convex ( b ) )
>6715	ElseStatement	else
>6716	CompoundStatement	 
>6717	ExpressionStatement	 
>6718	CallExpression	VectorCopy ( mid , start )
>6719	ArgumentList	mid
>6720	Argument	start
>6721	Identifier	start
>6722	Argument	mid
>6723	Identifier	mid
>6724	Callee	VectorCopy
>6725	Identifier	VectorCopy
>6726	CompoundStatement	 
>6727	ExpressionStatement	 
>6728	AssignmentExpr	done = true
>6729	Identifier	true
>6730	Identifier	done
>6731	ExpressionStatement	 
>6732	CallExpression	VectorCopy ( start , end )
>6733	ArgumentList	start
>6734	Argument	end
>6735	Identifier	end
>6736	Argument	start
>6737	Identifier	start
>6738	Callee	VectorCopy
>6739	Identifier	VectorCopy
>6740	ExpressionStatement	 
>6741	AssignmentExpr	result = false
>6742	Identifier	false
>6743	Identifier	result
>6744	ForStatement	for ( i = 0 ; i < nummovefaces ; i ++ )
>6745	CompoundStatement	 
>6746	ExpressionStatement	 
>6747	CallExpression	Face_MakePlane ( movefaces [ i ] )
>6748	ArgumentList	movefaces [ i ]
>6749	Argument	movefaces [ i ]
>6750	ArrayIndexing	movefaces [ i ]
>6751	Identifier	i
>6752	Identifier	movefaces
>6753	Callee	Face_MakePlane
>6754	Identifier	Face_MakePlane
>6755	ForStatement	for ( j = 0 ; j < 3 ; j ++ )
>6756	CompoundStatement	 
>6757	ExpressionStatement	 
>6758	CallExpression	VectorCopy ( movefaces [ i ] -> face_winding -> points [ j ] , movefaces [ i ] -> planepts [ j ] )
>6759	ArgumentList	movefaces [ i ] -> face_winding -> points [ j ]
>6760	Argument	movefaces [ i ] -> planepts [ j ]
>6761	ArrayIndexing	movefaces [ i ] -> planepts [ j ]
>6762	Identifier	j
>6763	PtrMemberAccess	movefaces [ i ] -> planepts
>6764	Identifier	planepts
>6765	ArrayIndexing	movefaces [ i ]
>6766	Identifier	i
>6767	Identifier	movefaces
>6768	Argument	movefaces [ i ] -> face_winding -> points [ j ]
>6769	ArrayIndexing	movefaces [ i ] -> face_winding -> points [ j ]
>6770	Identifier	j
>6771	PtrMemberAccess	movefaces [ i ] -> face_winding -> points
>6772	Identifier	points
>6773	PtrMemberAccess	movefaces [ i ] -> face_winding
>6774	Identifier	face_winding
>6775	ArrayIndexing	movefaces [ i ]
>6776	Identifier	i
>6777	Identifier	movefaces
>6778	Callee	VectorCopy
>6779	Identifier	VectorCopy
>6780	IncDecOp	 
>6781	IncDec	++
>6782	Identifier	j
>6783	Condition	 
>6784	RelationalExpression	j < 3
>6785	PrimaryExpression	3
>6786	Identifier	j
>6787	ForInit	 
>6788	AssignmentExpr	j = 0
>6789	PrimaryExpression	0
>6790	Identifier	j
>6791	ExpressionStatement	 
>6792	CallExpression	VectorCopy ( start , movefaces [ i ] -> face_winding -> points [ movefacepoints [ i ] ] )
>6793	ArgumentList	start
>6794	Argument	movefaces [ i ] -> face_winding -> points [ movefacepoints [ i ] ]
>6795	ArrayIndexing	movefaces [ i ] -> face_winding -> points [ movefacepoints [ i ] ]
>6796	ArrayIndexing	movefacepoints [ i ]
>6797	Identifier	i
>6798	Identifier	movefacepoints
>6799	PtrMemberAccess	movefaces [ i ] -> face_winding -> points
>6800	Identifier	points
>6801	PtrMemberAccess	movefaces [ i ] -> face_winding
>6802	Identifier	face_winding
>6803	ArrayIndexing	movefaces [ i ]
>6804	Identifier	i
>6805	Identifier	movefaces
>6806	Argument	start
>6807	Identifier	start
>6808	Callee	VectorCopy
>6809	Identifier	VectorCopy
>6810	IncDecOp	 
>6811	IncDec	++
>6812	Identifier	i
>6813	Condition	 
>6814	RelationalExpression	i < nummovefaces
>6815	Identifier	nummovefaces
>6816	Identifier	i
>6817	ForInit	 
>6818	AssignmentExpr	i = 0
>6819	PrimaryExpression	0
>6820	Identifier	i
>6821	Condition	 
>6822	OrExpression	! result || ! Brush_Convex ( b )
>6823	UnaryOp	! Brush_Convex ( b )
>6824	CallExpression	Brush_Convex ( b )
>6825	ArgumentList	b
>6826	Argument	b
>6827	Identifier	b
>6828	Callee	Brush_Convex
>6829	Identifier	Brush_Convex
>6830	UnaryOperator	!
>6831	UnaryOp	! result
>6832	Identifier	result
>6833	UnaryOperator	!
>6834	ForStatement	for ( i = 0 ; i < nummovefaces ; i ++ )
>6835	CompoundStatement	 
>6836	IfStatement	if ( VectorLength ( movefaces [ i ] -> plane . normal ) < 0.1 )
>6837	ExpressionStatement	 
>6838	AssignmentExpr	result = false
>6839	Identifier	false
>6840	Identifier	result
>6841	Condition	 
>6842	RelationalExpression	VectorLength ( movefaces [ i ] -> plane . normal ) < 0.1
>6843	PrimaryExpression	0.1
>6844	CallExpression	VectorLength ( movefaces [ i ] -> plane . normal )
>6845	ArgumentList	movefaces [ i ] -> plane . normal
>6846	Argument	movefaces [ i ] -> plane . normal
>6847	MemberAccess	movefaces [ i ] -> plane . normal
>6848	Identifier	normal
>6849	PtrMemberAccess	movefaces [ i ] -> plane
>6850	Identifier	plane
>6851	ArrayIndexing	movefaces [ i ]
>6852	Identifier	i
>6853	Identifier	movefaces
>6854	Callee	VectorLength
>6855	Identifier	VectorLength
>6856	ExpressionStatement	 
>6857	CallExpression	Face_MakePlane ( movefaces [ i ] )
>6858	ArgumentList	movefaces [ i ]
>6859	Argument	movefaces [ i ]
>6860	ArrayIndexing	movefaces [ i ]
>6861	Identifier	i
>6862	Identifier	movefaces
>6863	Callee	Face_MakePlane
>6864	Identifier	Face_MakePlane
>6865	ForStatement	for ( j = 0 ; j < 3 ; j ++ )
>6866	CompoundStatement	 
>6867	ExpressionStatement	 
>6868	CallExpression	VectorCopy ( movefaces [ i ] -> face_winding -> points [ j ] , movefaces [ i ] -> planepts [ j ] )
>6869	ArgumentList	movefaces [ i ] -> face_winding -> points [ j ]
>6870	Argument	movefaces [ i ] -> planepts [ j ]
>6871	ArrayIndexing	movefaces [ i ] -> planepts [ j ]
>6872	Identifier	j
>6873	PtrMemberAccess	movefaces [ i ] -> planepts
>6874	Identifier	planepts
>6875	ArrayIndexing	movefaces [ i ]
>6876	Identifier	i
>6877	Identifier	movefaces
>6878	Argument	movefaces [ i ] -> face_winding -> points [ j ]
>6879	ArrayIndexing	movefaces [ i ] -> face_winding -> points [ j ]
>6880	Identifier	j
>6881	PtrMemberAccess	movefaces [ i ] -> face_winding -> points
>6882	Identifier	points
>6883	PtrMemberAccess	movefaces [ i ] -> face_winding
>6884	Identifier	face_winding
>6885	ArrayIndexing	movefaces [ i ]
>6886	Identifier	i
>6887	Identifier	movefaces
>6888	Callee	VectorCopy
>6889	Identifier	VectorCopy
>6890	IncDecOp	 
>6891	IncDec	++
>6892	Identifier	j
>6893	Condition	 
>6894	RelationalExpression	j < 3
>6895	PrimaryExpression	3
>6896	Identifier	j
>6897	ForInit	 
>6898	AssignmentExpr	j = 0
>6899	PrimaryExpression	0
>6900	Identifier	j
>6901	ExpressionStatement	 
>6902	CallExpression	VectorCopy ( mid , movefaces [ i ] -> face_winding -> points [ movefacepoints [ i ] ] )
>6903	ArgumentList	mid
>6904	Argument	movefaces [ i ] -> face_winding -> points [ movefacepoints [ i ] ]
>6905	ArrayIndexing	movefaces [ i ] -> face_winding -> points [ movefacepoints [ i ] ]
>6906	ArrayIndexing	movefacepoints [ i ]
>6907	Identifier	i
>6908	Identifier	movefacepoints
>6909	PtrMemberAccess	movefaces [ i ] -> face_winding -> points
>6910	Identifier	points
>6911	PtrMemberAccess	movefaces [ i ] -> face_winding
>6912	Identifier	face_winding
>6913	ArrayIndexing	movefaces [ i ]
>6914	Identifier	i
>6915	Identifier	movefaces
>6916	Argument	mid
>6917	Identifier	mid
>6918	Callee	VectorCopy
>6919	Identifier	VectorCopy
>6920	IncDecOp	 
>6921	IncDec	++
>6922	Identifier	i
>6923	Condition	 
>6924	RelationalExpression	i < nummovefaces
>6925	Identifier	nummovefaces
>6926	Identifier	i
>6927	ForInit	 
>6928	AssignmentExpr	i = 0
>6929	PrimaryExpression	0
>6930	Identifier	i
>6931	ForStatement	for ( face = b -> brush_faces ; face ; face = face -> next )
>6932	CompoundStatement	 
>6933	ExpressionStatement	 
>6934	AssignmentExpr	done = false
>6935	Identifier	false
>6936	Identifier	done
>6937	IfStatement	if ( frac < smallestfrac )
>6938	CompoundStatement	 
>6939	ExpressionStatement	 
>6940	AssignmentExpr	smallestfrac = frac
>6941	Identifier	frac
>6942	Identifier	smallestfrac
>6943	ExpressionStatement	 
>6944	AssignmentExpr	mid [ 2 ] = start [ 2 ] + ( end [ 2 ] - start [ 2 ] ) * frac
>6945	AdditiveExpression	start [ 2 ] + ( end [ 2 ] - start [ 2 ] ) * frac
>6946	MultiplicativeExpression	( end [ 2 ] - start [ 2 ] ) * frac
>6947	Identifier	frac
>6948	AdditiveExpression	end [ 2 ] - start [ 2 ]
>6949	ArrayIndexing	start [ 2 ]
>6950	PrimaryExpression	2
>6951	Identifier	start
>6952	ArrayIndexing	end [ 2 ]
>6953	PrimaryExpression	2
>6954	Identifier	end
>6955	ArrayIndexing	start [ 2 ]
>6956	PrimaryExpression	2
>6957	Identifier	start
>6958	ArrayIndexing	mid [ 2 ]
>6959	PrimaryExpression	2
>6960	Identifier	mid
>6961	ExpressionStatement	 
>6962	AssignmentExpr	mid [ 1 ] = start [ 1 ] + ( end [ 1 ] - start [ 1 ] ) * frac
>6963	AdditiveExpression	start [ 1 ] + ( end [ 1 ] - start [ 1 ] ) * frac
>6964	MultiplicativeExpression	( end [ 1 ] - start [ 1 ] ) * frac
>6965	Identifier	frac
>6966	AdditiveExpression	end [ 1 ] - start [ 1 ]
>6967	ArrayIndexing	start [ 1 ]
>6968	PrimaryExpression	1
>6969	Identifier	start
>6970	ArrayIndexing	end [ 1 ]
>6971	PrimaryExpression	1
>6972	Identifier	end
>6973	ArrayIndexing	start [ 1 ]
>6974	PrimaryExpression	1
>6975	Identifier	start
>6976	ArrayIndexing	mid [ 1 ]
>6977	PrimaryExpression	1
>6978	Identifier	mid
>6979	ExpressionStatement	 
>6980	AssignmentExpr	mid [ 0 ] = start [ 0 ] + ( end [ 0 ] - start [ 0 ] ) * frac
>6981	AdditiveExpression	start [ 0 ] + ( end [ 0 ] - start [ 0 ] ) * frac
>6982	MultiplicativeExpression	( end [ 0 ] - start [ 0 ] ) * frac
>6983	Identifier	frac
>6984	AdditiveExpression	end [ 0 ] - start [ 0 ]
>6985	ArrayIndexing	start [ 0 ]
>6986	PrimaryExpression	0
>6987	Identifier	start
>6988	ArrayIndexing	end [ 0 ]
>6989	PrimaryExpression	0
>6990	Identifier	end
>6991	ArrayIndexing	start [ 0 ]
>6992	PrimaryExpression	0
>6993	Identifier	start
>6994	ArrayIndexing	mid [ 0 ]
>6995	PrimaryExpression	0
>6996	Identifier	mid
>6997	Condition	 
>6998	RelationalExpression	frac < smallestfrac
>6999	Identifier	smallestfrac
>7000	Identifier	frac
>7001	ExpressionStatement	 
>7002	AssignmentExpr	frac = front / ( front - back )
>7003	MultiplicativeExpression	front / ( front - back )
>7004	AdditiveExpression	front - back
>7005	Identifier	back
>7006	Identifier	front
>7007	Identifier	front
>7008	Identifier	frac
>7009	IfStatement	if ( fabs ( front - back ) < 0.001 )
>7010	ContinueStatement	 
>7011	Condition	 
>7012	RelationalExpression	fabs ( front - back ) < 0.001
>7013	PrimaryExpression	0.001
>7014	CallExpression	fabs ( front - back )
>7015	ArgumentList	front - back
>7016	Argument	front - back
>7017	AdditiveExpression	front - back
>7018	Identifier	back
>7019	Identifier	front
>7020	Callee	fabs
>7021	Identifier	fabs
>7022	IfStatement	if ( front > - 0.01 && back > - 0.01 )
>7023	ContinueStatement	 
>7024	Condition	 
>7025	AndExpression	front > - 0.01 && back > - 0.01
>7026	RelationalExpression	back > - 0.01
>7027	UnaryOp	- 0.01
>7028	PrimaryExpression	0.01
>7029	UnaryOperator	-
>7030	Identifier	back
>7031	RelationalExpression	front > - 0.01
>7032	UnaryOp	- 0.01
>7033	PrimaryExpression	0.01
>7034	UnaryOperator	-
>7035	Identifier	front
>7036	IfStatement	if ( front < 0.01 && back < 0.01 )
>7037	ContinueStatement	 
>7038	Condition	 
>7039	AndExpression	front < 0.01 && back < 0.01
>7040	RelationalExpression	back < 0.01
>7041	PrimaryExpression	0.01
>7042	Identifier	back
>7043	RelationalExpression	front < 0.01
>7044	PrimaryExpression	0.01
>7045	Identifier	front
>7046	ExpressionStatement	 
>7047	AssignmentExpr	back = DotProduct ( end , plane . normal ) - plane . dist
>7048	AdditiveExpression	DotProduct ( end , plane . normal ) - plane . dist
>7049	MemberAccess	plane . dist
>7050	Identifier	dist
>7051	Identifier	plane
>7052	CallExpression	DotProduct ( end , plane . normal )
>7053	ArgumentList	end
>7054	Argument	plane . normal
>7055	MemberAccess	plane . normal
>7056	Identifier	normal
>7057	Identifier	plane
>7058	Argument	end
>7059	Identifier	end
>7060	Callee	DotProduct
>7061	Identifier	DotProduct
>7062	Identifier	back
>7063	ExpressionStatement	 
>7064	AssignmentExpr	front = DotProduct ( start , plane . normal ) - plane . dist
>7065	AdditiveExpression	DotProduct ( start , plane . normal ) - plane . dist
>7066	MemberAccess	plane . dist
>7067	Identifier	dist
>7068	Identifier	plane
>7069	CallExpression	DotProduct ( start , plane . normal )
>7070	ArgumentList	start
>7071	Argument	plane . normal
>7072	MemberAccess	plane . normal
>7073	Identifier	normal
>7074	Identifier	plane
>7075	Argument	start
>7076	Identifier	start
>7077	Callee	DotProduct
>7078	Identifier	DotProduct
>7079	Identifier	front
>7080	IfStatement	if ( j >= nummovefaces )
>7081	ElseStatement	else
>7082	CompoundStatement	 
>7083	IfStatement	if ( ! Plane_FromPoints ( tmpw . points [ 0 ] , tmpw . points [ 1 ] , tmpw . points [ 2 ] , & plane ) )
>7084	CompoundStatement	 
>7085	IfStatement	if ( ! Plane_FromPoints ( tmpw . points [ 0 ] , tmpw . points [ 1 ] , tmpw . points [ 2 ] , & plane ) )
>7086	ContinueStatement	 
>7087	Condition	 
>7088	UnaryOp	! Plane_FromPoints ( tmpw . points [ 0 ] , tmpw . points [ 1 ] , tmpw . points [ 2 ] , & plane )
>7089	CallExpression	Plane_FromPoints ( tmpw . points [ 0 ] , tmpw . points [ 1 ] , tmpw . points [ 2 ] , & plane )
>7090	ArgumentList	tmpw . points [ 0 ]
>7091	Argument	& plane
>7092	UnaryOp	& plane
>7093	Identifier	plane
>7094	UnaryOperator	&
>7095	Argument	tmpw . points [ 2 ]
>7096	ArrayIndexing	tmpw . points [ 2 ]
>7097	PrimaryExpression	2
>7098	MemberAccess	tmpw . points
>7099	Identifier	points
>7100	Identifier	tmpw
>7101	Argument	tmpw . points [ 1 ]
>7102	ArrayIndexing	tmpw . points [ 1 ]
>7103	PrimaryExpression	1
>7104	MemberAccess	tmpw . points
>7105	Identifier	points
>7106	Identifier	tmpw
>7107	Argument	tmpw . points [ 0 ]
>7108	ArrayIndexing	tmpw . points [ 0 ]
>7109	PrimaryExpression	0
>7110	MemberAccess	tmpw . points
>7111	Identifier	points
>7112	Identifier	tmpw
>7113	Callee	Plane_FromPoints
>7114	Identifier	Plane_FromPoints
>7115	UnaryOperator	!
>7116	ExpressionStatement	 
>7117	CallExpression	VectorCopy ( w -> points [ ( k + 2 ) % w -> numpoints ] , tmpw . points [ 2 ] )
>7118	ArgumentList	w -> points [ ( k + 2 ) % w -> numpoints ]
>7119	Argument	tmpw . points [ 2 ]
>7120	ArrayIndexing	tmpw . points [ 2 ]
>7121	PrimaryExpression	2
>7122	MemberAccess	tmpw . points
>7123	Identifier	points
>7124	Identifier	tmpw
>7125	Argument	w -> points [ ( k + 2 ) % w -> numpoints ]
>7126	ArrayIndexing	w -> points [ ( k + 2 ) % w -> numpoints ]
>7127	MultiplicativeExpression	( k + 2 ) % w -> numpoints
>7128	PtrMemberAccess	w -> numpoints
>7129	Identifier	numpoints
>7130	Identifier	w
>7131	AdditiveExpression	k + 2
>7132	PrimaryExpression	2
>7133	Identifier	k
>7134	PtrMemberAccess	w -> points
>7135	Identifier	points
>7136	Identifier	w
>7137	Callee	VectorCopy
>7138	Identifier	VectorCopy
>7139	Condition	 
>7140	UnaryOp	! Plane_FromPoints ( tmpw . points [ 0 ] , tmpw . points [ 1 ] , tmpw . points [ 2 ] , & plane )
>7141	CallExpression	Plane_FromPoints ( tmpw . points [ 0 ] , tmpw . points [ 1 ] , tmpw . points [ 2 ] , & plane )
>7142	ArgumentList	tmpw . points [ 0 ]
>7143	Argument	& plane
>7144	UnaryOp	& plane
>7145	Identifier	plane
>7146	UnaryOperator	&
>7147	Argument	tmpw . points [ 2 ]
>7148	ArrayIndexing	tmpw . points [ 2 ]
>7149	PrimaryExpression	2
>7150	MemberAccess	tmpw . points
>7151	Identifier	points
>7152	Identifier	tmpw
>7153	Argument	tmpw . points [ 1 ]
>7154	ArrayIndexing	tmpw . points [ 1 ]
>7155	PrimaryExpression	1
>7156	MemberAccess	tmpw . points
>7157	Identifier	points
>7158	Identifier	tmpw
>7159	Argument	tmpw . points [ 0 ]
>7160	ArrayIndexing	tmpw . points [ 0 ]
>7161	PrimaryExpression	0
>7162	MemberAccess	tmpw . points
>7163	Identifier	points
>7164	Identifier	tmpw
>7165	Callee	Plane_FromPoints
>7166	Identifier	Plane_FromPoints
>7167	UnaryOperator	!
>7168	ExpressionStatement	 
>7169	CallExpression	VectorCopy ( w -> points [ ( k + 1 ) % w -> numpoints ] , tmpw . points [ 2 ] )
>7170	ArgumentList	w -> points [ ( k + 1 ) % w -> numpoints ]
>7171	Argument	tmpw . points [ 2 ]
>7172	ArrayIndexing	tmpw . points [ 2 ]
>7173	PrimaryExpression	2
>7174	MemberAccess	tmpw . points
>7175	Identifier	points
>7176	Identifier	tmpw
>7177	Argument	w -> points [ ( k + 1 ) % w -> numpoints ]
>7178	ArrayIndexing	w -> points [ ( k + 1 ) % w -> numpoints ]
>7179	MultiplicativeExpression	( k + 1 ) % w -> numpoints
>7180	PtrMemberAccess	w -> numpoints
>7181	Identifier	numpoints
>7182	Identifier	w
>7183	AdditiveExpression	k + 1
>7184	PrimaryExpression	1
>7185	Identifier	k
>7186	PtrMemberAccess	w -> points
>7187	Identifier	points
>7188	Identifier	w
>7189	Callee	VectorCopy
>7190	Identifier	VectorCopy
>7191	ExpressionStatement	 
>7192	AssignmentExpr	w = movefaces [ i ] -> face_winding
>7193	PtrMemberAccess	movefaces [ i ] -> face_winding
>7194	Identifier	face_winding
>7195	ArrayIndexing	movefaces [ i ]
>7196	Identifier	i
>7197	Identifier	movefaces
>7198	Identifier	w
>7199	ExpressionStatement	 
>7200	AssignmentExpr	k = movefacepoints [ i ]
>7201	ArrayIndexing	movefacepoints [ i ]
>7202	Identifier	i
>7203	Identifier	movefacepoints
>7204	Identifier	k
>7205	ExpressionStatement	 
>7206	CallExpression	VectorCopy ( w -> points [ ( k + 2 ) % w -> numpoints ] , tmpw . points [ 1 ] )
>7207	ArgumentList	w -> points [ ( k + 2 ) % w -> numpoints ]
>7208	Argument	tmpw . points [ 1 ]
>7209	ArrayIndexing	tmpw . points [ 1 ]
>7210	PrimaryExpression	1
>7211	MemberAccess	tmpw . points
>7212	Identifier	points
>7213	Identifier	tmpw
>7214	Argument	w -> points [ ( k + 2 ) % w -> numpoints ]
>7215	ArrayIndexing	w -> points [ ( k + 2 ) % w -> numpoints ]
>7216	MultiplicativeExpression	( k + 2 ) % w -> numpoints
>7217	PtrMemberAccess	w -> numpoints
>7218	Identifier	numpoints
>7219	Identifier	w
>7220	AdditiveExpression	k + 2
>7221	PrimaryExpression	2
>7222	Identifier	k
>7223	PtrMemberAccess	w -> points
>7224	Identifier	points
>7225	Identifier	w
>7226	Callee	VectorCopy
>7227	Identifier	VectorCopy
>7228	ExpressionStatement	 
>7229	CallExpression	VectorCopy ( w -> points [ ( k + 1 ) % w -> numpoints ] , tmpw . points [ 0 ] )
>7230	ArgumentList	w -> points [ ( k + 1 ) % w -> numpoints ]
>7231	Argument	tmpw . points [ 0 ]
>7232	ArrayIndexing	tmpw . points [ 0 ]
>7233	PrimaryExpression	0
>7234	MemberAccess	tmpw . points
>7235	Identifier	points
>7236	Identifier	tmpw
>7237	Argument	w -> points [ ( k + 1 ) % w -> numpoints ]
>7238	ArrayIndexing	w -> points [ ( k + 1 ) % w -> numpoints ]
>7239	MultiplicativeExpression	( k + 1 ) % w -> numpoints
>7240	PtrMemberAccess	w -> numpoints
>7241	Identifier	numpoints
>7242	Identifier	w
>7243	AdditiveExpression	k + 1
>7244	PrimaryExpression	1
>7245	Identifier	k
>7246	PtrMemberAccess	w -> points
>7247	Identifier	points
>7248	Identifier	w
>7249	Callee	VectorCopy
>7250	Identifier	VectorCopy
>7251	ExpressionStatement	 
>7252	AssignmentExpr	w = movefaces [ j ] -> face_winding
>7253	PtrMemberAccess	movefaces [ j ] -> face_winding
>7254	Identifier	face_winding
>7255	ArrayIndexing	movefaces [ j ]
>7256	Identifier	j
>7257	Identifier	movefaces
>7258	Identifier	w
>7259	ExpressionStatement	 
>7260	AssignmentExpr	k = movefacepoints [ j ]
>7261	ArrayIndexing	movefacepoints [ j ]
>7262	Identifier	j
>7263	Identifier	movefacepoints
>7264	Identifier	k
>7265	CompoundStatement	 
>7266	ExpressionStatement	 
>7267	CallExpression	memcpy ( & plane , & movefaces [ i ] -> original -> plane , sizeof ( plane_t ) )
>7268	ArgumentList	& plane
>7269	Argument	sizeof ( plane_t )
>7270	SizeofExpr	sizeof ( plane_t )
>7271	SizeofOperand	plane_t
>7272	Sizeof	sizeof
>7273	Argument	& movefaces [ i ] -> original -> plane
>7274	UnaryOp	& movefaces [ i ] -> original -> plane
>7275	PtrMemberAccess	movefaces [ i ] -> original -> plane
>7276	Identifier	plane
>7277	PtrMemberAccess	movefaces [ i ] -> original
>7278	Identifier	original
>7279	ArrayIndexing	movefaces [ i ]
>7280	Identifier	i
>7281	Identifier	movefaces
>7282	UnaryOperator	&
>7283	Argument	& plane
>7284	UnaryOp	& plane
>7285	Identifier	plane
>7286	UnaryOperator	&
>7287	Callee	memcpy
>7288	Identifier	memcpy
>7289	Condition	 
>7290	RelationalExpression	j >= nummovefaces
>7291	Identifier	nummovefaces
>7292	Identifier	j
>7293	ForStatement	for ( j = 0 ; j < nummovefaces ; j ++ )
>7294	CompoundStatement	 
>7295	IfStatement	if ( face == movefaces [ j ] )
>7296	BreakStatement	 
>7297	Condition	 
>7298	EqualityExpression	face == movefaces [ j ]
>7299	ArrayIndexing	movefaces [ j ]
>7300	Identifier	j
>7301	Identifier	movefaces
>7302	Identifier	face
>7303	IncDecOp	 
>7304	IncDec	++
>7305	Identifier	j
>7306	Condition	 
>7307	RelationalExpression	j < nummovefaces
>7308	Identifier	nummovefaces
>7309	Identifier	j
>7310	ForInit	 
>7311	AssignmentExpr	j = 0
>7312	PrimaryExpression	0
>7313	Identifier	j
>7314	IfStatement	if ( i >= nummovefaces )
>7315	ContinueStatement	 
>7316	Condition	 
>7317	RelationalExpression	i >= nummovefaces
>7318	Identifier	nummovefaces
>7319	Identifier	i
>7320	ForStatement	for ( i = 0 ; i < nummovefaces ; i ++ )
>7321	CompoundStatement	 
>7322	IfStatement	if ( movefaces [ i ] -> original == face )
>7323	BreakStatement	 
>7324	Condition	 
>7325	EqualityExpression	movefaces [ i ] -> original == face
>7326	Identifier	face
>7327	PtrMemberAccess	movefaces [ i ] -> original
>7328	Identifier	original
>7329	ArrayIndexing	movefaces [ i ]
>7330	Identifier	i
>7331	Identifier	movefaces
>7332	IncDecOp	 
>7333	IncDec	++
>7334	Identifier	i
>7335	Condition	 
>7336	RelationalExpression	i < nummovefaces
>7337	Identifier	nummovefaces
>7338	Identifier	i
>7339	ForInit	 
>7340	AssignmentExpr	i = 0
>7341	PrimaryExpression	0
>7342	Identifier	i
>7343	AssignmentExpr	 
>7344	PtrMemberAccess	face -> next
>7345	Identifier	next
>7346	Identifier	face
>7347	Identifier	face
>7348	Condition	 
>7349	Identifier	face
>7350	ForInit	 
>7351	AssignmentExpr	face = b -> brush_faces
>7352	PtrMemberAccess	b -> brush_faces
>7353	Identifier	brush_faces
>7354	Identifier	b
>7355	Identifier	face
>7356	ExpressionStatement	 
>7357	AssignmentExpr	smallestfrac = 1
>7358	PrimaryExpression	1
>7359	Identifier	smallestfrac
>7360	ExpressionStatement	 
>7361	CallExpression	VectorCopy ( end , mid )
>7362	ArgumentList	end
>7363	Argument	mid
>7364	Identifier	mid
>7365	Argument	end
>7366	Identifier	end
>7367	Callee	VectorCopy
>7368	Identifier	VectorCopy
>7369	ExpressionStatement	 
>7370	AssignmentExpr	done = true
>7371	Identifier	true
>7372	Identifier	done
>7373	ForStatement	for ( face = b -> brush_faces ; face ; face = face -> next )
>7374	CompoundStatement	 
>7375	ForStatement	for ( i = 0 ; i < w -> numpoints ; i ++ )
>7376	CompoundStatement	 
>7377	IfStatement	if ( Point_Equal ( w -> points [ i ] , start , 0.2 ) )
>7378	CompoundStatement	 
>7379	BreakStatement	 
>7380	IfStatement	if ( dot > 0.1 )
>7381	ElseStatement	else
>7382	CompoundStatement	 
>7383	ExpressionStatement	 
>7384	AssignmentExpr	movefaces [ nummovefaces ++ ] = newface
>7385	Identifier	newface
>7386	ArrayIndexing	movefaces [ nummovefaces ++ ]
>7387	IncDecOp	nummovefaces ++
>7388	IncDec	++
>7389	Identifier	nummovefaces
>7390	Identifier	movefaces
>7391	ExpressionStatement	 
>7392	AssignmentExpr	movefacepoints [ nummovefaces ] = 1
>7393	PrimaryExpression	1
>7394	ArrayIndexing	movefacepoints [ nummovefaces ]
>7395	Identifier	nummovefaces
>7396	Identifier	movefacepoints
>7397	ExpressionStatement	 
>7398	AssignmentExpr	b -> brush_faces = newface
>7399	Identifier	newface
>7400	PtrMemberAccess	b -> brush_faces
>7401	Identifier	brush_faces
>7402	Identifier	b
>7403	ExpressionStatement	 
>7404	AssignmentExpr	newface -> next = b -> brush_faces
>7405	PtrMemberAccess	b -> brush_faces
>7406	Identifier	brush_faces
>7407	Identifier	b
>7408	PtrMemberAccess	newface -> next
>7409	Identifier	next
>7410	Identifier	newface
>7411	ExpressionStatement	 
>7412	AssignmentExpr	newface -> d_texture = Texture_ForName ( newface -> texdef . name )
>7413	CallExpression	Texture_ForName ( newface -> texdef . name )
>7414	ArgumentList	newface -> texdef . name
>7415	Argument	newface -> texdef . name
>7416	MemberAccess	newface -> texdef . name
>7417	Identifier	name
>7418	PtrMemberAccess	newface -> texdef
>7419	Identifier	texdef
>7420	Identifier	newface
>7421	Callee	Texture_ForName
>7422	Identifier	Texture_ForName
>7423	PtrMemberAccess	newface -> d_texture
>7424	Identifier	d_texture
>7425	Identifier	newface
>7426	ExpressionStatement	 
>7427	AssignmentExpr	newface -> face_winding = Winding_Clone ( & tmpw )
>7428	CallExpression	Winding_Clone ( & tmpw )
>7429	ArgumentList	& tmpw
>7430	Argument	& tmpw
>7431	UnaryOp	& tmpw
>7432	Identifier	tmpw
>7433	UnaryOperator	&
>7434	Callee	Winding_Clone
>7435	Identifier	Winding_Clone
>7436	PtrMemberAccess	newface -> face_winding
>7437	Identifier	face_winding
>7438	Identifier	newface
>7439	IfStatement	if ( newface -> face_winding )
>7440	ExpressionStatement	 
>7441	CallExpression	Winding_Free ( newface -> face_winding )
>7442	ArgumentList	newface -> face_winding
>7443	Argument	newface -> face_winding
>7444	PtrMemberAccess	newface -> face_winding
>7445	Identifier	face_winding
>7446	Identifier	newface
>7447	Callee	Winding_Free
>7448	Identifier	Winding_Free
>7449	Condition	 
>7450	PtrMemberAccess	newface -> face_winding
>7451	Identifier	face_winding
>7452	Identifier	newface
>7453	ExpressionStatement	 
>7454	AssignmentExpr	newface -> original = f
>7455	Identifier	f
>7456	PtrMemberAccess	newface -> original
>7457	Identifier	original
>7458	Identifier	newface
>7459	ForStatement	for ( f = face ; f -> original ; f = f -> original )
>7460	ExpressionStatement	 
>7461	AssignmentExpr	 
>7462	PtrMemberAccess	f -> original
>7463	Identifier	original
>7464	Identifier	f
>7465	Identifier	f
>7466	Condition	 
>7467	PtrMemberAccess	f -> original
>7468	Identifier	original
>7469	Identifier	f
>7470	ForInit	 
>7471	AssignmentExpr	f = face
>7472	Identifier	face
>7473	Identifier	f
>7474	ExpressionStatement	 
>7475	AssignmentExpr	newface = Face_Clone ( face )
>7476	CallExpression	Face_Clone ( face )
>7477	ArgumentList	face
>7478	Argument	face
>7479	Identifier	face
>7480	Callee	Face_Clone
>7481	Identifier	Face_Clone
>7482	Identifier	newface
>7483	ForStatement	for ( j = 0 ; j < w -> numpoints ; j ++ )
>7484	ExpressionStatement	 
>7485	CallExpression	EmitTextureCoordinates ( w -> points [ j ] , face -> d_texture , face )
>7486	ArgumentList	w -> points [ j ]
>7487	Argument	face
>7488	Identifier	face
>7489	Argument	face -> d_texture
>7490	PtrMemberAccess	face -> d_texture
>7491	Identifier	d_texture
>7492	Identifier	face
>7493	Argument	w -> points [ j ]
>7494	ArrayIndexing	w -> points [ j ]
>7495	Identifier	j
>7496	PtrMemberAccess	w -> points
>7497	Identifier	points
>7498	Identifier	w
>7499	Callee	EmitTextureCoordinates
>7500	Identifier	EmitTextureCoordinates
>7501	IncDecOp	 
>7502	IncDec	++
>7503	Identifier	j
>7504	Condition	 
>7505	RelationalExpression	j < w -> numpoints
>7506	PtrMemberAccess	w -> numpoints
>7507	Identifier	numpoints
>7508	Identifier	w
>7509	Identifier	j
>7510	ForInit	 
>7511	AssignmentExpr	j = 0
>7512	PrimaryExpression	0
>7513	Identifier	j
>7514	ExpressionStatement	 
>7515	CallExpression	Face_SetColor ( b , face , 1.0 )
>7516	ArgumentList	b
>7517	Argument	1.0
>7518	PrimaryExpression	1.0
>7519	Argument	face
>7520	Identifier	face
>7521	Argument	b
>7522	Identifier	b
>7523	Callee	Face_SetColor
>7524	Identifier	Face_SetColor
>7525	ExpressionStatement	 
>7526	CallExpression	Winding_RemovePoint ( w , i )
>7527	ArgumentList	w
>7528	Argument	i
>7529	Identifier	i
>7530	Argument	w
>7531	Identifier	w
>7532	Callee	Winding_RemovePoint
>7533	Identifier	Winding_RemovePoint
>7534	ExpressionStatement	 
>7535	CallExpression	VectorCopy ( w -> points [ ( i + 1 ) % w -> numpoints ] , tmpw . points [ 2 ] )
>7536	ArgumentList	w -> points [ ( i + 1 ) % w -> numpoints ]
>7537	Argument	tmpw . points [ 2 ]
>7538	ArrayIndexing	tmpw . points [ 2 ]
>7539	PrimaryExpression	2
>7540	MemberAccess	tmpw . points
>7541	Identifier	points
>7542	Identifier	tmpw
>7543	Argument	w -> points [ ( i + 1 ) % w -> numpoints ]
>7544	ArrayIndexing	w -> points [ ( i + 1 ) % w -> numpoints ]
>7545	MultiplicativeExpression	( i + 1 ) % w -> numpoints
>7546	PtrMemberAccess	w -> numpoints
>7547	Identifier	numpoints
>7548	Identifier	w
>7549	AdditiveExpression	i + 1
>7550	PrimaryExpression	1
>7551	Identifier	i
>7552	PtrMemberAccess	w -> points
>7553	Identifier	points
>7554	Identifier	w
>7555	Callee	VectorCopy
>7556	Identifier	VectorCopy
>7557	ExpressionStatement	 
>7558	CallExpression	VectorCopy ( w -> points [ i ] , tmpw . points [ 1 ] )
>7559	ArgumentList	w -> points [ i ]
>7560	Argument	tmpw . points [ 1 ]
>7561	ArrayIndexing	tmpw . points [ 1 ]
>7562	PrimaryExpression	1
>7563	MemberAccess	tmpw . points
>7564	Identifier	points
>7565	Identifier	tmpw
>7566	Argument	w -> points [ i ]
>7567	ArrayIndexing	w -> points [ i ]
>7568	Identifier	i
>7569	PtrMemberAccess	w -> points
>7570	Identifier	points
>7571	Identifier	w
>7572	Callee	VectorCopy
>7573	Identifier	VectorCopy
>7574	ExpressionStatement	 
>7575	CallExpression	VectorCopy ( w -> points [ ( i - 1 + w -> numpoints ) % w -> numpoints ] , tmpw . points [ 0 ] )
>7576	ArgumentList	w -> points [ ( i - 1 + w -> numpoints ) % w -> numpoints ]
>7577	Argument	tmpw . points [ 0 ]
>7578	ArrayIndexing	tmpw . points [ 0 ]
>7579	PrimaryExpression	0
>7580	MemberAccess	tmpw . points
>7581	Identifier	points
>7582	Identifier	tmpw
>7583	Argument	w -> points [ ( i - 1 + w -> numpoints ) % w -> numpoints ]
>7584	ArrayIndexing	w -> points [ ( i - 1 + w -> numpoints ) % w -> numpoints ]
>7585	MultiplicativeExpression	( i - 1 + w -> numpoints ) % w -> numpoints
>7586	PtrMemberAccess	w -> numpoints
>7587	Identifier	numpoints
>7588	Identifier	w
>7589	AdditiveExpression	i - 1 + w -> numpoints
>7590	AdditiveExpression	1 + w -> numpoints
>7591	PtrMemberAccess	w -> numpoints
>7592	Identifier	numpoints
>7593	Identifier	w
>7594	PrimaryExpression	1
>7595	Identifier	i
>7596	PtrMemberAccess	w -> points
>7597	Identifier	points
>7598	Identifier	w
>7599	Callee	VectorCopy
>7600	Identifier	VectorCopy
>7601	CompoundStatement	 
>7602	ExpressionStatement	 
>7603	AssignmentExpr	movefaces [ nummovefaces ++ ] = face
>7604	Identifier	face
>7605	ArrayIndexing	movefaces [ nummovefaces ++ ]
>7606	IncDecOp	nummovefaces ++
>7607	IncDec	++
>7608	Identifier	nummovefaces
>7609	Identifier	movefaces
>7610	ExpressionStatement	 
>7611	AssignmentExpr	movefacepoints [ nummovefaces ] = 2
>7612	PrimaryExpression	2
>7613	ArrayIndexing	movefacepoints [ nummovefaces ]
>7614	Identifier	nummovefaces
>7615	Identifier	movefacepoints
>7616	ExpressionStatement	 
>7617	AssignmentExpr	face -> face_winding = Winding_Clone ( & tmpw )
>7618	CallExpression	Winding_Clone ( & tmpw )
>7619	ArgumentList	& tmpw
>7620	Argument	& tmpw
>7621	UnaryOp	& tmpw
>7622	Identifier	tmpw
>7623	UnaryOperator	&
>7624	Callee	Winding_Clone
>7625	Identifier	Winding_Clone
>7626	PtrMemberAccess	face -> face_winding
>7627	Identifier	face_winding
>7628	Identifier	face
>7629	ExpressionStatement	 
>7630	CallExpression	Winding_Free ( face -> face_winding )
>7631	ArgumentList	face -> face_winding
>7632	Argument	face -> face_winding
>7633	PtrMemberAccess	face -> face_winding
>7634	Identifier	face_winding
>7635	Identifier	face
>7636	Callee	Winding_Free
>7637	Identifier	Winding_Free
>7638	ExpressionStatement	 
>7639	CallExpression	VectorCopy ( w -> points [ i ] , tmpw . points [ 2 ] )
>7640	ArgumentList	w -> points [ i ]
>7641	Argument	tmpw . points [ 2 ]
>7642	ArrayIndexing	tmpw . points [ 2 ]
>7643	PrimaryExpression	2
>7644	MemberAccess	tmpw . points
>7645	Identifier	points
>7646	Identifier	tmpw
>7647	Argument	w -> points [ i ]
>7648	ArrayIndexing	w -> points [ i ]
>7649	Identifier	i
>7650	PtrMemberAccess	w -> points
>7651	Identifier	points
>7652	Identifier	w
>7653	Callee	VectorCopy
>7654	Identifier	VectorCopy
>7655	ExpressionStatement	 
>7656	CallExpression	VectorCopy ( w -> points [ ( i - 1 + w -> numpoints ) % w -> numpoints ] , tmpw . points [ 1 ] )
>7657	ArgumentList	w -> points [ ( i - 1 + w -> numpoints ) % w -> numpoints ]
>7658	Argument	tmpw . points [ 1 ]
>7659	ArrayIndexing	tmpw . points [ 1 ]
>7660	PrimaryExpression	1
>7661	MemberAccess	tmpw . points
>7662	Identifier	points
>7663	Identifier	tmpw
>7664	Argument	w -> points [ ( i - 1 + w -> numpoints ) % w -> numpoints ]
>7665	ArrayIndexing	w -> points [ ( i - 1 + w -> numpoints ) % w -> numpoints ]
>7666	MultiplicativeExpression	( i - 1 + w -> numpoints ) % w -> numpoints
>7667	PtrMemberAccess	w -> numpoints
>7668	Identifier	numpoints
>7669	Identifier	w
>7670	AdditiveExpression	i - 1 + w -> numpoints
>7671	AdditiveExpression	1 + w -> numpoints
>7672	PtrMemberAccess	w -> numpoints
>7673	Identifier	numpoints
>7674	Identifier	w
>7675	PrimaryExpression	1
>7676	Identifier	i
>7677	PtrMemberAccess	w -> points
>7678	Identifier	points
>7679	Identifier	w
>7680	Callee	VectorCopy
>7681	Identifier	VectorCopy
>7682	ExpressionStatement	 
>7683	CallExpression	VectorCopy ( w -> points [ ( i - 2 + w -> numpoints ) % w -> numpoints ] , tmpw . points [ 0 ] )
>7684	ArgumentList	w -> points [ ( i - 2 + w -> numpoints ) % w -> numpoints ]
>7685	Argument	tmpw . points [ 0 ]
>7686	ArrayIndexing	tmpw . points [ 0 ]
>7687	PrimaryExpression	0
>7688	MemberAccess	tmpw . points
>7689	Identifier	points
>7690	Identifier	tmpw
>7691	Argument	w -> points [ ( i - 2 + w -> numpoints ) % w -> numpoints ]
>7692	ArrayIndexing	w -> points [ ( i - 2 + w -> numpoints ) % w -> numpoints ]
>7693	MultiplicativeExpression	( i - 2 + w -> numpoints ) % w -> numpoints
>7694	PtrMemberAccess	w -> numpoints
>7695	Identifier	numpoints
>7696	Identifier	w
>7697	AdditiveExpression	i - 2 + w -> numpoints
>7698	AdditiveExpression	2 + w -> numpoints
>7699	PtrMemberAccess	w -> numpoints
>7700	Identifier	numpoints
>7701	Identifier	w
>7702	PrimaryExpression	2
>7703	Identifier	i
>7704	PtrMemberAccess	w -> points
>7705	Identifier	points
>7706	Identifier	w
>7707	Callee	VectorCopy
>7708	Identifier	VectorCopy
>7709	ForStatement	for ( k = i ; k < i + w -> numpoints - 3 ; k ++ )
>7710	CompoundStatement	 
>7711	ExpressionStatement	 
>7712	AssignmentExpr	movefaces [ nummovefaces ++ ] = newface
>7713	Identifier	newface
>7714	ArrayIndexing	movefaces [ nummovefaces ++ ]
>7715	IncDecOp	nummovefaces ++
>7716	IncDec	++
>7717	Identifier	nummovefaces
>7718	Identifier	movefaces
>7719	ExpressionStatement	 
>7720	AssignmentExpr	movefacepoints [ nummovefaces ] = 0
>7721	PrimaryExpression	0
>7722	ArrayIndexing	movefacepoints [ nummovefaces ]
>7723	Identifier	nummovefaces
>7724	Identifier	movefacepoints
>7725	ExpressionStatement	 
>7726	AssignmentExpr	b -> brush_faces = newface
>7727	Identifier	newface
>7728	PtrMemberAccess	b -> brush_faces
>7729	Identifier	brush_faces
>7730	Identifier	b
>7731	ExpressionStatement	 
>7732	AssignmentExpr	newface -> next = b -> brush_faces
>7733	PtrMemberAccess	b -> brush_faces
>7734	Identifier	brush_faces
>7735	Identifier	b
>7736	PtrMemberAccess	newface -> next
>7737	Identifier	next
>7738	Identifier	newface
>7739	ExpressionStatement	 
>7740	AssignmentExpr	newface -> d_texture = Texture_ForName ( newface -> texdef . name )
>7741	CallExpression	Texture_ForName ( newface -> texdef . name )
>7742	ArgumentList	newface -> texdef . name
>7743	Argument	newface -> texdef . name
>7744	MemberAccess	newface -> texdef . name
>7745	Identifier	name
>7746	PtrMemberAccess	newface -> texdef
>7747	Identifier	texdef
>7748	Identifier	newface
>7749	Callee	Texture_ForName
>7750	Identifier	Texture_ForName
>7751	PtrMemberAccess	newface -> d_texture
>7752	Identifier	d_texture
>7753	Identifier	newface
>7754	ExpressionStatement	 
>7755	AssignmentExpr	newface -> face_winding = Winding_Clone ( & tmpw )
>7756	CallExpression	Winding_Clone ( & tmpw )
>7757	ArgumentList	& tmpw
>7758	Argument	& tmpw
>7759	UnaryOp	& tmpw
>7760	Identifier	tmpw
>7761	UnaryOperator	&
>7762	Callee	Winding_Clone
>7763	Identifier	Winding_Clone
>7764	PtrMemberAccess	newface -> face_winding
>7765	Identifier	face_winding
>7766	Identifier	newface
>7767	IfStatement	if ( newface -> face_winding )
>7768	ExpressionStatement	 
>7769	CallExpression	Winding_Free ( newface -> face_winding )
>7770	ArgumentList	newface -> face_winding
>7771	Argument	newface -> face_winding
>7772	PtrMemberAccess	newface -> face_winding
>7773	Identifier	face_winding
>7774	Identifier	newface
>7775	Callee	Winding_Free
>7776	Identifier	Winding_Free
>7777	Condition	 
>7778	PtrMemberAccess	newface -> face_winding
>7779	Identifier	face_winding
>7780	Identifier	newface
>7781	ExpressionStatement	 
>7782	AssignmentExpr	newface -> original = f
>7783	Identifier	f
>7784	PtrMemberAccess	newface -> original
>7785	Identifier	original
>7786	Identifier	newface
>7787	ForStatement	for ( f = face ; f -> original ; f = f -> original )
>7788	ExpressionStatement	 
>7789	AssignmentExpr	 
>7790	PtrMemberAccess	f -> original
>7791	Identifier	original
>7792	Identifier	f
>7793	Identifier	f
>7794	Condition	 
>7795	PtrMemberAccess	f -> original
>7796	Identifier	original
>7797	Identifier	f
>7798	ForInit	 
>7799	AssignmentExpr	f = face
>7800	Identifier	face
>7801	Identifier	f
>7802	ExpressionStatement	 
>7803	AssignmentExpr	newface = Face_Clone ( face )
>7804	CallExpression	Face_Clone ( face )
>7805	ArgumentList	face
>7806	Argument	face
>7807	Identifier	face
>7808	Callee	Face_Clone
>7809	Identifier	Face_Clone
>7810	Identifier	newface
>7811	ExpressionStatement	 
>7812	CallExpression	VectorCopy ( w -> points [ ( k + 2 ) % w -> numpoints ] , tmpw . points [ 2 ] )
>7813	ArgumentList	w -> points [ ( k + 2 ) % w -> numpoints ]
>7814	Argument	tmpw . points [ 2 ]
>7815	ArrayIndexing	tmpw . points [ 2 ]
>7816	PrimaryExpression	2
>7817	MemberAccess	tmpw . points
>7818	Identifier	points
>7819	Identifier	tmpw
>7820	Argument	w -> points [ ( k + 2 ) % w -> numpoints ]
>7821	ArrayIndexing	w -> points [ ( k + 2 ) % w -> numpoints ]
>7822	MultiplicativeExpression	( k + 2 ) % w -> numpoints
>7823	PtrMemberAccess	w -> numpoints
>7824	Identifier	numpoints
>7825	Identifier	w
>7826	AdditiveExpression	k + 2
>7827	PrimaryExpression	2
>7828	Identifier	k
>7829	PtrMemberAccess	w -> points
>7830	Identifier	points
>7831	Identifier	w
>7832	Callee	VectorCopy
>7833	Identifier	VectorCopy
>7834	ExpressionStatement	 
>7835	CallExpression	VectorCopy ( w -> points [ ( k + 1 ) % w -> numpoints ] , tmpw . points [ 1 ] )
>7836	ArgumentList	w -> points [ ( k + 1 ) % w -> numpoints ]
>7837	Argument	tmpw . points [ 1 ]
>7838	ArrayIndexing	tmpw . points [ 1 ]
>7839	PrimaryExpression	1
>7840	MemberAccess	tmpw . points
>7841	Identifier	points
>7842	Identifier	tmpw
>7843	Argument	w -> points [ ( k + 1 ) % w -> numpoints ]
>7844	ArrayIndexing	w -> points [ ( k + 1 ) % w -> numpoints ]
>7845	MultiplicativeExpression	( k + 1 ) % w -> numpoints
>7846	PtrMemberAccess	w -> numpoints
>7847	Identifier	numpoints
>7848	Identifier	w
>7849	AdditiveExpression	k + 1
>7850	PrimaryExpression	1
>7851	Identifier	k
>7852	PtrMemberAccess	w -> points
>7853	Identifier	points
>7854	Identifier	w
>7855	Callee	VectorCopy
>7856	Identifier	VectorCopy
>7857	ExpressionStatement	 
>7858	CallExpression	VectorCopy ( w -> points [ i ] , tmpw . points [ 0 ] )
>7859	ArgumentList	w -> points [ i ]
>7860	Argument	tmpw . points [ 0 ]
>7861	ArrayIndexing	tmpw . points [ 0 ]
>7862	PrimaryExpression	0
>7863	MemberAccess	tmpw . points
>7864	Identifier	points
>7865	Identifier	tmpw
>7866	Argument	w -> points [ i ]
>7867	ArrayIndexing	w -> points [ i ]
>7868	Identifier	i
>7869	PtrMemberAccess	w -> points
>7870	Identifier	points
>7871	Identifier	w
>7872	Callee	VectorCopy
>7873	Identifier	VectorCopy
>7874	IncDecOp	 
>7875	IncDec	++
>7876	Identifier	k
>7877	Condition	 
>7878	RelationalExpression	k < i + w -> numpoints - 3
>7879	AdditiveExpression	i + w -> numpoints - 3
>7880	AdditiveExpression	w -> numpoints - 3
>7881	PrimaryExpression	3
>7882	PtrMemberAccess	w -> numpoints
>7883	Identifier	numpoints
>7884	Identifier	w
>7885	Identifier	i
>7886	Identifier	k
>7887	ForInit	 
>7888	AssignmentExpr	k = i
>7889	Identifier	i
>7890	Identifier	k
>7891	Condition	 
>7892	RelationalExpression	dot > 0.1
>7893	PrimaryExpression	0.1
>7894	Identifier	dot
>7895	ExpressionStatement	 
>7896	AssignmentExpr	dot = DotProduct ( end , face -> plane . normal ) - face -> plane . dist
>7897	AdditiveExpression	DotProduct ( end , face -> plane . normal ) - face -> plane . dist
>7898	MemberAccess	face -> plane . dist
>7899	Identifier	dist
>7900	PtrMemberAccess	face -> plane
>7901	Identifier	plane
>7902	Identifier	face
>7903	CallExpression	DotProduct ( end , face -> plane . normal )
>7904	ArgumentList	end
>7905	Argument	face -> plane . normal
>7906	MemberAccess	face -> plane . normal
>7907	Identifier	normal
>7908	PtrMemberAccess	face -> plane
>7909	Identifier	plane
>7910	Identifier	face
>7911	Argument	end
>7912	Identifier	end
>7913	Callee	DotProduct
>7914	Identifier	DotProduct
>7915	Identifier	dot
>7916	IfStatement	if ( face -> face_winding -> numpoints <= 3 )
>7917	CompoundStatement	 
>7918	BreakStatement	 
>7919	ExpressionStatement	 
>7920	AssignmentExpr	movefaces [ nummovefaces ++ ] = face
>7921	Identifier	face
>7922	ArrayIndexing	movefaces [ nummovefaces ++ ]
>7923	IncDecOp	nummovefaces ++
>7924	IncDec	++
>7925	Identifier	nummovefaces
>7926	Identifier	movefaces
>7927	ExpressionStatement	 
>7928	AssignmentExpr	movefacepoints [ nummovefaces ] = i
>7929	Identifier	i
>7930	ArrayIndexing	movefacepoints [ nummovefaces ]
>7931	Identifier	nummovefaces
>7932	Identifier	movefacepoints
>7933	Condition	 
>7934	RelationalExpression	face -> face_winding -> numpoints <= 3
>7935	PrimaryExpression	3
>7936	PtrMemberAccess	face -> face_winding -> numpoints
>7937	Identifier	numpoints
>7938	PtrMemberAccess	face -> face_winding
>7939	Identifier	face_winding
>7940	Identifier	face
>7941	Condition	 
>7942	CallExpression	Point_Equal ( w -> points [ i ] , start , 0.2 )
>7943	ArgumentList	w -> points [ i ]
>7944	Argument	0.2
>7945	PrimaryExpression	0.2
>7946	Argument	start
>7947	Identifier	start
>7948	Argument	w -> points [ i ]
>7949	ArrayIndexing	w -> points [ i ]
>7950	Identifier	i
>7951	PtrMemberAccess	w -> points
>7952	Identifier	points
>7953	Identifier	w
>7954	Callee	Point_Equal
>7955	Identifier	Point_Equal
>7956	IncDecOp	 
>7957	IncDec	++
>7958	Identifier	i
>7959	Condition	 
>7960	RelationalExpression	i < w -> numpoints
>7961	PtrMemberAccess	w -> numpoints
>7962	Identifier	numpoints
>7963	Identifier	w
>7964	Identifier	i
>7965	ForInit	 
>7966	AssignmentExpr	i = 0
>7967	PrimaryExpression	0
>7968	Identifier	i
>7969	IfStatement	if ( ! w )
>7970	ContinueStatement	 
>7971	Condition	 
>7972	UnaryOp	! w
>7973	Identifier	w
>7974	UnaryOperator	!
>7975	ExpressionStatement	 
>7976	AssignmentExpr	w = face -> face_winding
>7977	PtrMemberAccess	face -> face_winding
>7978	Identifier	face_winding
>7979	Identifier	face
>7980	Identifier	w
>7981	AssignmentExpr	 
>7982	PtrMemberAccess	face -> next
>7983	Identifier	next
>7984	Identifier	face
>7985	Identifier	face
>7986	Condition	 
>7987	Identifier	face
>7988	ForInit	 
>7989	AssignmentExpr	face = b -> brush_faces
>7990	PtrMemberAccess	b -> brush_faces
>7991	Identifier	brush_faces
>7992	Identifier	b
>7993	Identifier	face
>7994	ExpressionStatement	 
>7995	AssignmentExpr	nummovefaces = 0
>7996	PrimaryExpression	0
>7997	Identifier	nummovefaces
>7998	Condition	 
>7999	UnaryOp	! done
>8000	Identifier	done
>8001	UnaryOperator	!
>8002	ExpressionStatement	 
>8003	AssignmentExpr	done = false
>8004	Identifier	false
>8005	Identifier	done
>8006	ForStatement	for ( face = b -> brush_faces ; face ; face = face -> next )
>8007	CompoundStatement	 
>8008	ForStatement	for ( i = 0 ; i < w -> numpoints ; i ++ )
>8009	CompoundStatement	 
>8010	IfStatement	if ( Point_Equal ( w -> points [ i ] , end , 0.3 ) )
>8011	CompoundStatement	 
>8012	ReturnStatement	 
>8013	Identifier	false
>8014	ExpressionStatement	 
>8015	CallExpression	VectorCopy ( vertex , end )
>8016	ArgumentList	vertex
>8017	Argument	end
>8018	Identifier	end
>8019	Argument	vertex
>8020	Identifier	vertex
>8021	Callee	VectorCopy
>8022	Identifier	VectorCopy
>8023	Condition	 
>8024	CallExpression	Point_Equal ( w -> points [ i ] , end , 0.3 )
>8025	ArgumentList	w -> points [ i ]
>8026	Argument	0.3
>8027	PrimaryExpression	0.3
>8028	Argument	end
>8029	Identifier	end
>8030	Argument	w -> points [ i ]
>8031	ArrayIndexing	w -> points [ i ]
>8032	Identifier	i
>8033	PtrMemberAccess	w -> points
>8034	Identifier	points
>8035	Identifier	w
>8036	Callee	Point_Equal
>8037	Identifier	Point_Equal
>8038	IncDecOp	 
>8039	IncDec	++
>8040	Identifier	i
>8041	Condition	 
>8042	RelationalExpression	i < w -> numpoints
>8043	PtrMemberAccess	w -> numpoints
>8044	Identifier	numpoints
>8045	Identifier	w
>8046	Identifier	i
>8047	ForInit	 
>8048	AssignmentExpr	i = 0
>8049	PrimaryExpression	0
>8050	Identifier	i
>8051	IfStatement	if ( ! w )
>8052	ContinueStatement	 
>8053	Condition	 
>8054	UnaryOp	! w
>8055	Identifier	w
>8056	UnaryOperator	!
>8057	ExpressionStatement	 
>8058	AssignmentExpr	w = face -> face_winding
>8059	PtrMemberAccess	face -> face_winding
>8060	Identifier	face_winding
>8061	Identifier	face
>8062	Identifier	w
>8063	AssignmentExpr	 
>8064	PtrMemberAccess	face -> next
>8065	Identifier	next
>8066	Identifier	face
>8067	Identifier	face
>8068	Condition	 
>8069	Identifier	face
>8070	ForInit	 
>8071	AssignmentExpr	face = b -> brush_faces
>8072	PtrMemberAccess	b -> brush_faces
>8073	Identifier	brush_faces
>8074	Identifier	b
>8075	Identifier	face
>8076	IfStatement	if ( Point_Equal ( start , end , 0.3 ) )
>8077	ReturnStatement	 
>8078	Identifier	false
>8079	Condition	 
>8080	CallExpression	Point_Equal ( start , end , 0.3 )
>8081	ArgumentList	start
>8082	Argument	0.3
>8083	PrimaryExpression	0.3
>8084	Argument	end
>8085	Identifier	end
>8086	Argument	start
>8087	Identifier	start
>8088	Callee	Point_Equal
>8089	Identifier	Point_Equal
>8090	ExpressionStatement	 
>8091	CallExpression	VectorCopy ( end , mid )
>8092	ArgumentList	end
>8093	Argument	mid
>8094	Identifier	mid
>8095	Argument	end
>8096	Identifier	end
>8097	Callee	VectorCopy
>8098	Identifier	VectorCopy
>8099	IfStatement	if ( bSnap )
>8100	ForStatement	for ( i = 0 ; i < 3 ; i ++ )
>8101	ExpressionStatement	 
>8102	AssignmentExpr	end [ i ] = floor ( end [ i ] / g_qeglobals . d_gridsize + 0.5 ) * g_qeglobals . d_gridsize
>8103	MultiplicativeExpression	floor ( end [ i ] / g_qeglobals . d_gridsize + 0.5 ) * g_qeglobals . d_gridsize
>8104	MemberAccess	g_qeglobals . d_gridsize
>8105	Identifier	d_gridsize
>8106	Identifier	g_qeglobals
>8107	CallExpression	floor ( end [ i ] / g_qeglobals . d_gridsize + 0.5 )
>8108	ArgumentList	end [ i ] / g_qeglobals . d_gridsize + 0.5
>8109	Argument	end [ i ] / g_qeglobals . d_gridsize + 0.5
>8110	AdditiveExpression	end [ i ] / g_qeglobals . d_gridsize + 0.5
>8111	PrimaryExpression	0.5
>8112	MultiplicativeExpression	end [ i ] / g_qeglobals . d_gridsize
>8113	MemberAccess	g_qeglobals . d_gridsize
>8114	Identifier	d_gridsize
>8115	Identifier	g_qeglobals
>8116	ArrayIndexing	end [ i ]
>8117	Identifier	i
>8118	Identifier	end
>8119	Callee	floor
>8120	Identifier	floor
>8121	ArrayIndexing	end [ i ]
>8122	Identifier	i
>8123	Identifier	end
>8124	IncDecOp	 
>8125	IncDec	++
>8126	Identifier	i
>8127	Condition	 
>8128	RelationalExpression	i < 3
>8129	PrimaryExpression	3
>8130	Identifier	i
>8131	ForInit	 
>8132	AssignmentExpr	i = 0
>8133	PrimaryExpression	0
>8134	Identifier	i
>8135	Condition	 
>8136	Identifier	bSnap
>8137	ExpressionStatement	 
>8138	CallExpression	VectorAdd ( vertex , delta , end )
>8139	ArgumentList	vertex
>8140	Argument	end
>8141	Identifier	end
>8142	Argument	delta
>8143	Identifier	delta
>8144	Argument	vertex
>8145	Identifier	vertex
>8146	Callee	VectorAdd
>8147	Identifier	VectorAdd
>8148	ExpressionStatement	 
>8149	CallExpression	VectorCopy ( vertex , start )
>8150	ArgumentList	vertex
>8151	Argument	start
>8152	Identifier	start
>8153	Argument	vertex
>8154	Identifier	vertex
>8155	Callee	VectorCopy
>8156	Identifier	VectorCopy
>8157	ExpressionStatement	 
>8158	AssignmentExpr	tmpw . maxpoints = 3
>8159	PrimaryExpression	3
>8160	MemberAccess	tmpw . maxpoints
>8161	Identifier	maxpoints
>8162	Identifier	tmpw
>8163	ExpressionStatement	 
>8164	AssignmentExpr	tmpw . numpoints = 3
>8165	PrimaryExpression	3
>8166	MemberAccess	tmpw . numpoints
>8167	Identifier	numpoints
>8168	Identifier	tmpw
>8169	ExpressionStatement	 
>8170	AssignmentExpr	result = true
>8171	Identifier	true
>8172	Identifier	result
>8173	IdentifierDeclStatement	 
>8174	IdentifierDecl	smallestfrac
>8175	Identifier	smallestfrac
>8176	IdentifierDeclType	float
>8177	IdentifierDecl	frac
>8178	Identifier	frac
>8179	IdentifierDeclType	float
>8180	IdentifierDecl	back
>8181	Identifier	back
>8182	IdentifierDeclType	float
>8183	IdentifierDecl	front
>8184	Identifier	front
>8185	IdentifierDeclType	float
>8186	IdentifierDecl	dot
>8187	Identifier	dot
>8188	IdentifierDeclType	float
>8189	IdentifierDeclStatement	 
>8190	IdentifierDecl	done
>8191	Identifier	done
>8192	IdentifierDeclType	int
>8193	IdentifierDecl	result
>8194	Identifier	result
>8195	IdentifierDeclType	int
>8196	IdentifierDecl	nummovefaces
>8197	Identifier	nummovefaces
>8198	IdentifierDeclType	int
>8199	IdentifierDecl	k
>8200	Identifier	k
>8201	IdentifierDeclType	int
>8202	IdentifierDecl	j
>8203	Identifier	j
>8204	IdentifierDeclType	int
>8205	IdentifierDecl	i
>8206	Identifier	i
>8207	IdentifierDeclType	int
>8208	IdentifierDeclStatement	 
>8209	IdentifierDecl	plane
>8210	Identifier	plane
>8211	IdentifierDeclType	plane_t
>8212	IdentifierDeclStatement	 
>8213	IdentifierDecl	mid
>8214	Identifier	mid
>8215	IdentifierDeclType	vec3_t
>8216	IdentifierDecl	start
>8217	Identifier	start
>8218	IdentifierDeclType	vec3_t
>8219	IdentifierDeclStatement	 
>8220	IdentifierDecl	tmpw
>8221	Identifier	tmpw
>8222	IdentifierDeclType	winding_t
>8223	IdentifierDecl	* w
>8224	Identifier	w
>8225	IdentifierDeclType	winding_t *
>8226	IdentifierDeclStatement	 
>8227	IdentifierDecl	movefacepoints [ MAX_MOVE_FACES ]
>8228	Identifier	MAX_MOVE_FACES
>8229	Identifier	movefacepoints
>8230	IdentifierDeclType	int [ MAX_MOVE_FACES ]
>8231	IdentifierDeclStatement	 
>8232	IdentifierDecl	* movefaces [ MAX_MOVE_FACES ]
>8233	Identifier	MAX_MOVE_FACES
>8234	Identifier	movefaces
>8235	IdentifierDeclType	face_t * [ MAX_MOVE_FACES ]
>8236	IdentifierDeclStatement	 
>8237	IdentifierDecl	* nextface
>8238	Identifier	nextface
>8239	IdentifierDeclType	face_t *
>8240	IdentifierDecl	* lastface
>8241	Identifier	lastface
>8242	IdentifierDeclType	face_t *
>8243	IdentifierDecl	* newface
>8244	Identifier	newface
>8245	IdentifierDeclType	face_t *
>8246	IdentifierDecl	* face
>8247	Identifier	face
>8248	IdentifierDeclType	face_t *
>8249	IdentifierDecl	* f
>8250	Identifier	f
>8251	IdentifierDeclType	face_t *
>8390	FunctionDef	Brush_InsertVertexBetween (brush_t * b , vec3_t p1 , vec3_t p2)
>8391	ParameterList	brush_t * b , vec3_t p1 , vec3_t p2
>8392	Parameter	 
>8393	Identifier	p2
>8394	ParameterType	vec3_t
>8395	Parameter	 
>8396	Identifier	p1
>8397	ParameterType	vec3_t
>8398	Parameter	 
>8399	Identifier	b
>8400	ParameterType	brush_t *
>8401	ReturnType	int
>8402	CompoundStatement	 
>8403	ReturnStatement	 
>8404	Identifier	insert
>8405	ForStatement	for ( face = b -> brush_faces ; face ; face = face -> next )
>8406	CompoundStatement	 
>8407	IfStatement	if ( neww )
>8408	CompoundStatement	 
>8409	ExpressionStatement	 
>8410	AssignmentExpr	insert = true
>8411	Identifier	true
>8412	Identifier	insert
>8413	ExpressionStatement	 
>8414	AssignmentExpr	face -> face_winding = neww
>8415	Identifier	neww
>8416	PtrMemberAccess	face -> face_winding
>8417	Identifier	face_winding
>8418	Identifier	face
>8419	ExpressionStatement	 
>8420	CallExpression	Winding_Free ( face -> face_winding )
>8421	ArgumentList	face -> face_winding
>8422	Argument	face -> face_winding
>8423	PtrMemberAccess	face -> face_winding
>8424	Identifier	face_winding
>8425	Identifier	face
>8426	Callee	Winding_Free
>8427	Identifier	Winding_Free
>8428	Condition	 
>8429	Identifier	neww
>8430	ForStatement	for ( i = 0 ; i < w -> numpoints ; i ++ )
>8431	CompoundStatement	 
>8432	IfStatement	if ( Point_Equal ( w -> points [ ( i + 1 ) % w -> numpoints ] , p2 , 0.1 ) )
>8433	ElseStatement	else
>8434	IfStatement	if ( Point_Equal ( w -> points [ ( i - 1 + w -> numpoints ) % w -> numpoints ] , p2 , 0.3 ) )
>8435	CompoundStatement	 
>8436	BreakStatement	 
>8437	ExpressionStatement	 
>8438	AssignmentExpr	neww = Winding_InsertPoint ( w , point , i )
>8439	CallExpression	Winding_InsertPoint ( w , point , i )
>8440	ArgumentList	w
>8441	Argument	i
>8442	Identifier	i
>8443	Argument	point
>8444	Identifier	point
>8445	Argument	w
>8446	Identifier	w
>8447	Callee	Winding_InsertPoint
>8448	Identifier	Winding_InsertPoint
>8449	Identifier	neww
>8450	Condition	 
>8451	CallExpression	Point_Equal ( w -> points [ ( i - 1 + w -> numpoints ) % w -> numpoints ] , p2 , 0.3 )
>8452	ArgumentList	w -> points [ ( i - 1 + w -> numpoints ) % w -> numpoints ]
>8453	Argument	0.3
>8454	PrimaryExpression	0.3
>8455	Argument	p2
>8456	Identifier	p2
>8457	Argument	w -> points [ ( i - 1 + w -> numpoints ) % w -> numpoints ]
>8458	ArrayIndexing	w -> points [ ( i - 1 + w -> numpoints ) % w -> numpoints ]
>8459	MultiplicativeExpression	( i - 1 + w -> numpoints ) % w -> numpoints
>8460	PtrMemberAccess	w -> numpoints
>8461	Identifier	numpoints
>8462	Identifier	w
>8463	AdditiveExpression	i - 1 + w -> numpoints
>8464	AdditiveExpression	1 + w -> numpoints
>8465	PtrMemberAccess	w -> numpoints
>8466	Identifier	numpoints
>8467	Identifier	w
>8468	PrimaryExpression	1
>8469	Identifier	i
>8470	PtrMemberAccess	w -> points
>8471	Identifier	points
>8472	Identifier	w
>8473	Callee	Point_Equal
>8474	Identifier	Point_Equal
>8475	CompoundStatement	 
>8476	BreakStatement	 
>8477	ExpressionStatement	 
>8478	AssignmentExpr	neww = Winding_InsertPoint ( w , point , ( i + 1 ) % w -> numpoints )
>8479	CallExpression	Winding_InsertPoint ( w , point , ( i + 1 ) % w -> numpoints )
>8480	ArgumentList	w
>8481	Argument	( i + 1 ) % w -> numpoints
>8482	MultiplicativeExpression	( i + 1 ) % w -> numpoints
>8483	PtrMemberAccess	w -> numpoints
>8484	Identifier	numpoints
>8485	Identifier	w
>8486	AdditiveExpression	i + 1
>8487	PrimaryExpression	1
>8488	Identifier	i
>8489	Argument	point
>8490	Identifier	point
>8491	Argument	w
>8492	Identifier	w
>8493	Callee	Winding_InsertPoint
>8494	Identifier	Winding_InsertPoint
>8495	Identifier	neww
>8496	Condition	 
>8497	CallExpression	Point_Equal ( w -> points [ ( i + 1 ) % w -> numpoints ] , p2 , 0.1 )
>8498	ArgumentList	w -> points [ ( i + 1 ) % w -> numpoints ]
>8499	Argument	0.1
>8500	PrimaryExpression	0.1
>8501	Argument	p2
>8502	Identifier	p2
>8503	Argument	w -> points [ ( i + 1 ) % w -> numpoints ]
>8504	ArrayIndexing	w -> points [ ( i + 1 ) % w -> numpoints ]
>8505	MultiplicativeExpression	( i + 1 ) % w -> numpoints
>8506	PtrMemberAccess	w -> numpoints
>8507	Identifier	numpoints
>8508	Identifier	w
>8509	AdditiveExpression	i + 1
>8510	PrimaryExpression	1
>8511	Identifier	i
>8512	PtrMemberAccess	w -> points
>8513	Identifier	points
>8514	Identifier	w
>8515	Callee	Point_Equal
>8516	Identifier	Point_Equal
>8517	IfStatement	if ( ! Point_Equal ( w -> points [ i ] , p1 , 0.1 ) )
>8518	ContinueStatement	 
>8519	Condition	 
>8520	UnaryOp	! Point_Equal ( w -> points [ i ] , p1 , 0.1 )
>8521	CallExpression	Point_Equal ( w -> points [ i ] , p1 , 0.1 )
>8522	ArgumentList	w -> points [ i ]
>8523	Argument	0.1
>8524	PrimaryExpression	0.1
>8525	Argument	p1
>8526	Identifier	p1
>8527	Argument	w -> points [ i ]
>8528	ArrayIndexing	w -> points [ i ]
>8529	Identifier	i
>8530	PtrMemberAccess	w -> points
>8531	Identifier	points
>8532	Identifier	w
>8533	Callee	Point_Equal
>8534	Identifier	Point_Equal
>8535	UnaryOperator	!
>8536	IncDecOp	 
>8537	IncDec	++
>8538	Identifier	i
>8539	Condition	 
>8540	RelationalExpression	i < w -> numpoints
>8541	PtrMemberAccess	w -> numpoints
>8542	Identifier	numpoints
>8543	Identifier	w
>8544	Identifier	i
>8545	ForInit	 
>8546	AssignmentExpr	i = 0
>8547	PrimaryExpression	0
>8548	Identifier	i
>8549	ExpressionStatement	 
>8550	AssignmentExpr	neww = NULL
>8551	Identifier	NULL
>8552	Identifier	neww
>8553	IfStatement	if ( ! w )
>8554	ContinueStatement	 
>8555	Condition	 
>8556	UnaryOp	! w
>8557	Identifier	w
>8558	UnaryOperator	!
>8559	ExpressionStatement	 
>8560	AssignmentExpr	w = face -> face_winding
>8561	PtrMemberAccess	face -> face_winding
>8562	Identifier	face_winding
>8563	Identifier	face
>8564	Identifier	w
>8565	AssignmentExpr	 
>8566	PtrMemberAccess	face -> next
>8567	Identifier	next
>8568	Identifier	face
>8569	Identifier	face
>8570	Condition	 
>8571	Identifier	face
>8572	ForInit	 
>8573	AssignmentExpr	face = b -> brush_faces
>8574	PtrMemberAccess	b -> brush_faces
>8575	Identifier	brush_faces
>8576	Identifier	b
>8577	Identifier	face
>8578	ExpressionStatement	 
>8579	AssignmentExpr	insert = false
>8580	Identifier	false
>8581	Identifier	insert
>8582	ExpressionStatement	 
>8583	CallExpression	VectorScale ( point , 0.5 , point )
>8584	ArgumentList	point
>8585	Argument	point
>8586	Identifier	point
>8587	Argument	0.5
>8588	PrimaryExpression	0.5
>8589	Argument	point
>8590	Identifier	point
>8591	Callee	VectorScale
>8592	Identifier	VectorScale
>8593	ExpressionStatement	 
>8594	CallExpression	VectorAdd ( p1 , p2 , point )
>8595	ArgumentList	p1
>8596	Argument	point
>8597	Identifier	point
>8598	Argument	p2
>8599	Identifier	p2
>8600	Argument	p1
>8601	Identifier	p1
>8602	Callee	VectorAdd
>8603	Identifier	VectorAdd
>8604	IfStatement	if ( Point_Equal ( p1 , p2 , 0.4 ) )
>8605	ReturnStatement	 
>8606	Identifier	false
>8607	Condition	 
>8608	CallExpression	Point_Equal ( p1 , p2 , 0.4 )
>8609	ArgumentList	p1
>8610	Argument	0.4
>8611	PrimaryExpression	0.4
>8612	Argument	p2
>8613	Identifier	p2
>8614	Argument	p1
>8615	Identifier	p1
>8616	Callee	Point_Equal
>8617	Identifier	Point_Equal
>8618	IdentifierDeclStatement	 
>8619	IdentifierDecl	insert
>8620	Identifier	insert
>8621	IdentifierDeclType	int
>8622	IdentifierDecl	i
>8623	Identifier	i
>8624	IdentifierDeclType	int
>8625	IdentifierDeclStatement	 
>8626	IdentifierDecl	point
>8627	Identifier	point
>8628	IdentifierDeclType	vec3_t
>8629	IdentifierDeclStatement	 
>8630	IdentifierDecl	* neww
>8631	Identifier	neww
>8632	IdentifierDeclType	winding_t *
>8633	IdentifierDecl	* w
>8634	Identifier	w
>8635	IdentifierDeclType	winding_t *
>8636	IdentifierDeclStatement	 
>8637	IdentifierDecl	* face
>8638	Identifier	face
>8639	IdentifierDeclType	face_t *
>8669	FunctionDef	Brush_ResetFaceOriginals (brush_t * b)
>8670	ParameterList	brush_t * b
>8671	Parameter	 
>8672	Identifier	b
>8673	ParameterType	brush_t *
>8674	ReturnType	void
>8675	CompoundStatement	 
>8676	ForStatement	for ( face = b -> brush_faces ; face ; face = face -> next )
>8677	CompoundStatement	 
>8678	ExpressionStatement	 
>8679	AssignmentExpr	face -> original = NULL
>8680	Identifier	NULL
>8681	PtrMemberAccess	face -> original
>8682	Identifier	original
>8683	Identifier	face
>8684	AssignmentExpr	 
>8685	PtrMemberAccess	face -> next
>8686	Identifier	next
>8687	Identifier	face
>8688	Identifier	face
>8689	Condition	 
>8690	Identifier	face
>8691	ForInit	 
>8692	AssignmentExpr	face = b -> brush_faces
>8693	PtrMemberAccess	b -> brush_faces
>8694	Identifier	brush_faces
>8695	Identifier	b
>8696	Identifier	face
>8697	IdentifierDeclStatement	 
>8698	IdentifierDecl	* face
>8699	Identifier	face
>8700	IdentifierDeclType	face_t *
>8712	FunctionDef	Brush_Parse ()
>8713	ParameterList	 
>8714	ReturnType	brush_t *
>8715	CompoundStatement	 
>8716	ReturnStatement	 
>8717	Identifier	b
>8718	DoStatement	do
>8719	Condition	 
>8720	PrimaryExpression	1
>8721	CompoundStatement	 
>8722	IfStatement	if ( g_qeglobals . bSurfacePropertiesPlugin )
>8723	ElseStatement	else
>8724	CompoundStatement	 
>8725	IfStatement	if ( TokenAvailable ( ) )
>8726	CompoundStatement	 
>8727	ExpressionStatement	 
>8728	AssignmentExpr	f -> texdef . value = atoi ( token )
>8729	CallExpression	atoi ( token )
>8730	ArgumentList	token
>8731	Argument	token
>8732	Identifier	token
>8733	Callee	atoi
>8734	Identifier	atoi
>8735	MemberAccess	f -> texdef . value
>8736	Identifier	value
>8737	PtrMemberAccess	f -> texdef
>8738	Identifier	texdef
>8739	Identifier	f
>8740	ExpressionStatement	 
>8741	CallExpression	GetToken ( false )
>8742	ArgumentList	false
>8743	Argument	false
>8744	Identifier	false
>8745	Callee	GetToken
>8746	Identifier	GetToken
>8747	ExpressionStatement	 
>8748	AssignmentExpr	f -> texdef . flags = atoi ( token )
>8749	CallExpression	atoi ( token )
>8750	ArgumentList	token
>8751	Argument	token
>8752	Identifier	token
>8753	Callee	atoi
>8754	Identifier	atoi
>8755	MemberAccess	f -> texdef . flags
>8756	Identifier	flags
>8757	PtrMemberAccess	f -> texdef
>8758	Identifier	texdef
>8759	Identifier	f
>8760	ExpressionStatement	 
>8761	CallExpression	GetToken ( false )
>8762	ArgumentList	false
>8763	Argument	false
>8764	Identifier	false
>8765	Callee	GetToken
>8766	Identifier	GetToken
>8767	ExpressionStatement	 
>8768	AssignmentExpr	f -> texdef . contents = atoi ( token )
>8769	CallExpression	atoi ( token )
>8770	ArgumentList	token
>8771	Argument	token
>8772	Identifier	token
>8773	Callee	atoi
>8774	Identifier	atoi
>8775	MemberAccess	f -> texdef . contents
>8776	Identifier	contents
>8777	PtrMemberAccess	f -> texdef
>8778	Identifier	texdef
>8779	Identifier	f
>8780	ExpressionStatement	 
>8781	CallExpression	GetToken ( false )
>8782	ArgumentList	false
>8783	Argument	false
>8784	Identifier	false
>8785	Callee	GetToken
>8786	Identifier	GetToken
>8787	Condition	 
>8788	CallExpression	TokenAvailable ( )
>8789	ArgumentList	 
>8790	Callee	TokenAvailable
>8791	Identifier	TokenAvailable
>8792	ExpressionStatement	 
>8793	AssignmentExpr	f -> texdef . contents = f -> d_texture -> contents
>8794	PtrMemberAccess	f -> d_texture -> contents
>8795	Identifier	contents
>8796	PtrMemberAccess	f -> d_texture
>8797	Identifier	d_texture
>8798	Identifier	f
>8799	MemberAccess	f -> texdef . contents
>8800	Identifier	contents
>8801	PtrMemberAccess	f -> texdef
>8802	Identifier	texdef
>8803	Identifier	f
>8804	ExpressionStatement	 
>8805	AssignmentExpr	f -> texdef . value = f -> d_texture -> value
>8806	PtrMemberAccess	f -> d_texture -> value
>8807	Identifier	value
>8808	PtrMemberAccess	f -> d_texture
>8809	Identifier	d_texture
>8810	Identifier	f
>8811	MemberAccess	f -> texdef . value
>8812	Identifier	value
>8813	PtrMemberAccess	f -> texdef
>8814	Identifier	texdef
>8815	Identifier	f
>8816	ExpressionStatement	 
>8817	AssignmentExpr	f -> texdef . flags = f -> d_texture -> flags
>8818	PtrMemberAccess	f -> d_texture -> flags
>8819	Identifier	flags
>8820	PtrMemberAccess	f -> d_texture
>8821	Identifier	d_texture
>8822	Identifier	f
>8823	MemberAccess	f -> texdef . flags
>8824	Identifier	flags
>8825	PtrMemberAccess	f -> texdef
>8826	Identifier	texdef
>8827	Identifier	f
>8828	ExpressionStatement	 
>8829	AssignmentExpr	f -> d_texture = Texture_ForName ( f -> texdef . name )
>8830	CallExpression	Texture_ForName ( f -> texdef . name )
>8831	ArgumentList	f -> texdef . name
>8832	Argument	f -> texdef . name
>8833	MemberAccess	f -> texdef . name
>8834	Identifier	name
>8835	PtrMemberAccess	f -> texdef
>8836	Identifier	texdef
>8837	Identifier	f
>8838	Callee	Texture_ForName
>8839	Identifier	Texture_ForName
>8840	PtrMemberAccess	f -> d_texture
>8841	Identifier	d_texture
>8842	Identifier	f
>8843	ExpressionStatement	 
>8844	AssignmentExpr	f -> texdef . scale [ 1 ] = atof ( token )
>8845	CallExpression	atof ( token )
>8846	ArgumentList	token
>8847	Argument	token
>8848	Identifier	token
>8849	Callee	atof
>8850	Identifier	atof
>8851	ArrayIndexing	f -> texdef . scale [ 1 ]
>8852	PrimaryExpression	1
>8853	MemberAccess	f -> texdef . scale
>8854	Identifier	scale
>8855	PtrMemberAccess	f -> texdef
>8856	Identifier	texdef
>8857	Identifier	f
>8858	ExpressionStatement	 
>8859	CallExpression	GetToken ( false )
>8860	ArgumentList	false
>8861	Argument	false
>8862	Identifier	false
>8863	Callee	GetToken
>8864	Identifier	GetToken
>8865	ExpressionStatement	 
>8866	AssignmentExpr	f -> texdef . scale [ 0 ] = atof ( token )
>8867	CallExpression	atof ( token )
>8868	ArgumentList	token
>8869	Argument	token
>8870	Identifier	token
>8871	Callee	atof
>8872	Identifier	atof
>8873	ArrayIndexing	f -> texdef . scale [ 0 ]
>8874	PrimaryExpression	0
>8875	MemberAccess	f -> texdef . scale
>8876	Identifier	scale
>8877	PtrMemberAccess	f -> texdef
>8878	Identifier	texdef
>8879	Identifier	f
>8880	ExpressionStatement	 
>8881	CallExpression	GetToken ( false )
>8882	ArgumentList	false
>8883	Argument	false
>8884	Identifier	false
>8885	Callee	GetToken
>8886	Identifier	GetToken
>8887	ExpressionStatement	 
>8888	AssignmentExpr	f -> texdef . rotate = atoi ( token )
>8889	CallExpression	atoi ( token )
>8890	ArgumentList	token
>8891	Argument	token
>8892	Identifier	token
>8893	Callee	atoi
>8894	Identifier	atoi
>8895	MemberAccess	f -> texdef . rotate
>8896	Identifier	rotate
>8897	PtrMemberAccess	f -> texdef
>8898	Identifier	texdef
>8899	Identifier	f
>8900	ExpressionStatement	 
>8901	CallExpression	GetToken ( false )
>8902	ArgumentList	false
>8903	Argument	false
>8904	Identifier	false
>8905	Callee	GetToken
>8906	Identifier	GetToken
>8907	ExpressionStatement	 
>8908	AssignmentExpr	f -> texdef . shift [ 1 ] = atoi ( token )
>8909	CallExpression	atoi ( token )
>8910	ArgumentList	token
>8911	Argument	token
>8912	Identifier	token
>8913	Callee	atoi
>8914	Identifier	atoi
>8915	ArrayIndexing	f -> texdef . shift [ 1 ]
>8916	PrimaryExpression	1
>8917	MemberAccess	f -> texdef . shift
>8918	Identifier	shift
>8919	PtrMemberAccess	f -> texdef
>8920	Identifier	texdef
>8921	Identifier	f
>8922	ExpressionStatement	 
>8923	CallExpression	GetToken ( false )
>8924	ArgumentList	false
>8925	Argument	false
>8926	Identifier	false
>8927	Callee	GetToken
>8928	Identifier	GetToken
>8929	ExpressionStatement	 
>8930	AssignmentExpr	f -> texdef . shift [ 0 ] = atoi ( token )
>8931	CallExpression	atoi ( token )
>8932	ArgumentList	token
>8933	Argument	token
>8934	Identifier	token
>8935	Callee	atoi
>8936	Identifier	atoi
>8937	ArrayIndexing	f -> texdef . shift [ 0 ]
>8938	PrimaryExpression	0
>8939	MemberAccess	f -> texdef . shift
>8940	Identifier	shift
>8941	PtrMemberAccess	f -> texdef
>8942	Identifier	texdef
>8943	Identifier	f
>8944	ExpressionStatement	 
>8945	CallExpression	GetToken ( false )
>8946	ArgumentList	false
>8947	Argument	false
>8948	Identifier	false
>8949	Callee	GetToken
>8950	Identifier	GetToken
>8951	IfStatement	if ( token [ 0 ] == '(' )
>8952	CompoundStatement	 
>8953	IdentifierDeclStatement	 
>8954	IdentifierDecl	i = 32
>8955	AssignmentExpr	i = 32
>8956	PrimaryExpression	32
>8957	Identifier	i
>8958	Identifier	i
>8959	IdentifierDeclType	int
>8960	Condition	 
>8961	EqualityExpression	token [ 0 ] == '('
>8962	PrimaryExpression	'('
>8963	ArrayIndexing	token [ 0 ]
>8964	PrimaryExpression	0
>8965	Identifier	token
>8966	ExpressionStatement	 
>8967	CallExpression	f -> texdef . SetName ( token )
>8968	ArgumentList	token
>8969	Argument	token
>8970	Identifier	token
>8971	Callee	f -> texdef . SetName
>8972	MemberAccess	f -> texdef . SetName
>8973	Identifier	SetName
>8974	PtrMemberAccess	f -> texdef
>8975	Identifier	texdef
>8976	Identifier	f
>8977	ExpressionStatement	 
>8978	CallExpression	GetToken ( false )
>8979	ArgumentList	false
>8980	Argument	false
>8981	Identifier	false
>8982	Callee	GetToken
>8983	Identifier	GetToken
>8984	CompoundStatement	 
>8985	ExpressionStatement	 
>8986	CallExpression	GETPLUGINTEXDEF ( f ) -> ParseTexdef ( )
>8987	ArgumentList	 
>8988	Callee	GETPLUGINTEXDEF ( f ) -> ParseTexdef
>8989	PtrMemberAccess	GETPLUGINTEXDEF ( f ) -> ParseTexdef
>8990	Identifier	ParseTexdef
>8991	CallExpression	GETPLUGINTEXDEF ( f )
>8992	ArgumentList	f
>8993	Argument	f
>8994	Identifier	f
>8995	Callee	GETPLUGINTEXDEF
>8996	Identifier	GETPLUGINTEXDEF
>8997	Condition	 
>8998	MemberAccess	g_qeglobals . bSurfacePropertiesPlugin
>8999	Identifier	bSurfacePropertiesPlugin
>9000	Identifier	g_qeglobals
>9001	IfStatement	if ( strcmpi ( token , \"patchDef2\" ) == 0 || strcmpi ( token , \"patchDef3\" ) == 0 )
>9002	ElseStatement	else
>9003	CompoundStatement	 
>9004	ForStatement	for ( i = 0 ; i < 3 ; i ++ )
>9005	CompoundStatement	 
>9006	IfStatement	if ( strcmp ( token , \")\" ) )
>9007	CompoundStatement	 
>9008	ReturnStatement	 
>9009	Identifier	NULL
>9010	ExpressionStatement	 
>9011	CallExpression	Warning ( \"parsing brush\" )
>9012	ArgumentList	\"parsing brush\"
>9013	Argument	\"parsing brush\"
>9014	PrimaryExpression	\"parsing brush\"
>9015	Callee	Warning
>9016	Identifier	Warning
>9017	Condition	 
>9018	CallExpression	strcmp ( token , \")\" )
>9019	ArgumentList	token
>9020	Argument	\")\"
>9021	PrimaryExpression	\")\"
>9022	Argument	token
>9023	Identifier	token
>9024	Callee	strcmp
>9025	Identifier	strcmp
>9026	ExpressionStatement	 
>9027	CallExpression	GetToken ( false )
>9028	ArgumentList	false
>9029	Argument	false
>9030	Identifier	false
>9031	Callee	GetToken
>9032	Identifier	GetToken
>9033	ForStatement	for ( j = 0 ; j < 3 ; j ++ )
>9034	CompoundStatement	 
>9035	ExpressionStatement	 
>9036	AssignmentExpr	f -> planepts [ i ] [ j ] = atof ( token )
>9037	CallExpression	atof ( token )
>9038	ArgumentList	token
>9039	Argument	token
>9040	Identifier	token
>9041	Callee	atof
>9042	Identifier	atof
>9043	ArrayIndexing	f -> planepts [ i ] [ j ]
>9044	Identifier	j
>9045	ArrayIndexing	f -> planepts [ i ]
>9046	Identifier	i
>9047	PtrMemberAccess	f -> planepts
>9048	Identifier	planepts
>9049	Identifier	f
>9050	ExpressionStatement	 
>9051	CallExpression	GetToken ( false )
>9052	ArgumentList	false
>9053	Argument	false
>9054	Identifier	false
>9055	Callee	GetToken
>9056	Identifier	GetToken
>9057	IncDecOp	 
>9058	IncDec	++
>9059	Identifier	j
>9060	Condition	 
>9061	RelationalExpression	j < 3
>9062	PrimaryExpression	3
>9063	Identifier	j
>9064	ForInit	 
>9065	AssignmentExpr	j = 0
>9066	PrimaryExpression	0
>9067	Identifier	j
>9068	IfStatement	if ( strcmp ( token , \"(\" ) )
>9069	CompoundStatement	 
>9070	ReturnStatement	 
>9071	Identifier	NULL
>9072	ExpressionStatement	 
>9073	CallExpression	Warning ( \"parsing brush\" )
>9074	ArgumentList	\"parsing brush\"
>9075	Argument	\"parsing brush\"
>9076	PrimaryExpression	\"parsing brush\"
>9077	Callee	Warning
>9078	Identifier	Warning
>9079	Condition	 
>9080	CallExpression	strcmp ( token , \"(\" )
>9081	ArgumentList	token
>9082	Argument	\"(\"
>9083	PrimaryExpression	\"(\"
>9084	Argument	token
>9085	Identifier	token
>9086	Callee	strcmp
>9087	Identifier	strcmp
>9088	IfStatement	if ( i != 0 )
>9089	ExpressionStatement	 
>9090	CallExpression	GetToken ( true )
>9091	ArgumentList	true
>9092	Argument	true
>9093	Identifier	true
>9094	Callee	GetToken
>9095	Identifier	GetToken
>9096	Condition	 
>9097	EqualityExpression	i != 0
>9098	PrimaryExpression	0
>9099	Identifier	i
>9100	IncDecOp	 
>9101	IncDec	++
>9102	Identifier	i
>9103	Condition	 
>9104	RelationalExpression	i < 3
>9105	PrimaryExpression	3
>9106	Identifier	i
>9107	ForInit	 
>9108	AssignmentExpr	i = 0
>9109	PrimaryExpression	0
>9110	Identifier	i
>9111	IfStatement	if ( ! b -> brush_faces )
>9112	ElseStatement	else
>9113	CompoundStatement	 
>9114	ExpressionStatement	 
>9115	AssignmentExpr	scan -> next = f
>9116	Identifier	f
>9117	PtrMemberAccess	scan -> next
>9118	Identifier	next
>9119	Identifier	scan
>9120	ForStatement	for ( scan = b -> brush_faces ; scan -> next ; scan = scan -> next )
>9121	ExpressionStatement	 
>9122	AssignmentExpr	 
>9123	PtrMemberAccess	scan -> next
>9124	Identifier	next
>9125	Identifier	scan
>9126	Identifier	scan
>9127	Condition	 
>9128	PtrMemberAccess	scan -> next
>9129	Identifier	next
>9130	Identifier	scan
>9131	ForInit	 
>9132	AssignmentExpr	scan = b -> brush_faces
>9133	PtrMemberAccess	b -> brush_faces
>9134	Identifier	brush_faces
>9135	Identifier	b
>9136	Identifier	scan
>9137	IdentifierDeclStatement	 
>9138	IdentifierDecl	* scan
>9139	Identifier	scan
>9140	IdentifierDeclType	face_t *
>9141	CompoundStatement	 
>9142	ExpressionStatement	 
>9143	AssignmentExpr	b -> brush_faces = f
>9144	Identifier	f
>9145	PtrMemberAccess	b -> brush_faces
>9146	Identifier	brush_faces
>9147	Identifier	b
>9148	Condition	 
>9149	UnaryOp	! b -> brush_faces
>9150	PtrMemberAccess	b -> brush_faces
>9151	Identifier	brush_faces
>9152	Identifier	b
>9153	UnaryOperator	!
>9154	ExpressionStatement	 
>9155	AssignmentExpr	f -> next = NULL
>9156	Identifier	NULL
>9157	PtrMemberAccess	f -> next
>9158	Identifier	next
>9159	Identifier	f
>9160	ExpressionStatement	 
>9161	AssignmentExpr	f = Face_Alloc ( )
>9162	CallExpression	Face_Alloc ( )
>9163	ArgumentList	 
>9164	Callee	Face_Alloc
>9165	Identifier	Face_Alloc
>9166	Identifier	f
>9167	IfStatement	if ( g_qeglobals . m_bBrushPrimitMode )
>9168	CompoundStatement	 
>9169	ExpressionStatement	 
>9170	AssignmentExpr	g_qeglobals . bNeedConvert = true
>9171	Identifier	true
>9172	MemberAccess	g_qeglobals . bNeedConvert
>9173	Identifier	bNeedConvert
>9174	Identifier	g_qeglobals
>9175	IfStatement	if ( g_qeglobals . bPrimitBrushes )
>9176	ExpressionStatement	 
>9177	CallExpression	Sys_Printf ( \"Warning 
>9178	ArgumentList	\"Warning 
>9179	Argument	\"Warning 
>9180	PrimaryExpression	\"Warning 
>9181	Callee	Sys_Printf
>9182	Identifier	Sys_Printf
>9183	Condition	 
>9184	MemberAccess	g_qeglobals . bPrimitBrushes
>9185	Identifier	bPrimitBrushes
>9186	Identifier	g_qeglobals
>9187	Condition	 
>9188	MemberAccess	g_qeglobals . m_bBrushPrimitMode
>9189	Identifier	m_bBrushPrimitMode
>9190	Identifier	g_qeglobals
>9191	ExpressionStatement	 
>9192	AssignmentExpr	g_qeglobals . bOldBrushes = true
>9193	Identifier	true
>9194	MemberAccess	g_qeglobals . bOldBrushes
>9195	Identifier	bOldBrushes
>9196	Identifier	g_qeglobals
>9197	CompoundStatement	 
>9198	IfStatement	if ( b == NULL )
>9199	ElseStatement	else
>9200	CompoundStatement	 
>9201	ContinueStatement	 
>9202	CompoundStatement	 
>9203	ReturnStatement	 
>9204	Identifier	NULL
>9205	ExpressionStatement	 
>9206	CallExpression	Warning ( \"parsing patch/brush\" )
>9207	ArgumentList	\"parsing patch/brush\"
>9208	Argument	\"parsing patch/brush\"
>9209	PrimaryExpression	\"parsing patch/brush\"
>9210	Callee	Warning
>9211	Identifier	Warning
>9212	Condition	 
>9213	EqualityExpression	b == NULL
>9214	Identifier	NULL
>9215	Identifier	b
>9216	ExpressionStatement	 
>9217	AssignmentExpr	b = Patch_Parse ( strcmpi ( token , \"patchDef2\" ) == 0 )
>9218	CallExpression	Patch_Parse ( strcmpi ( token , \"patchDef2\" ) == 0 )
>9219	ArgumentList	strcmpi ( token , \"patchDef2\" ) == 0
>9220	Argument	strcmpi ( token , \"patchDef2\" ) == 0
>9221	EqualityExpression	strcmpi ( token , \"patchDef2\" ) == 0
>9222	PrimaryExpression	0
>9223	CallExpression	strcmpi ( token , \"patchDef2\" )
>9224	ArgumentList	token
>9225	Argument	\"patchDef2\"
>9226	PrimaryExpression	\"patchDef2\"
>9227	Argument	token
>9228	Identifier	token
>9229	Callee	strcmpi
>9230	Identifier	strcmpi
>9231	Callee	Patch_Parse
>9232	Identifier	Patch_Parse
>9233	Identifier	b
>9234	ExpressionStatement	 
>9235	CallExpression	free ( b )
>9236	ArgumentList	b
>9237	Argument	b
>9238	Identifier	b
>9239	Callee	free
>9240	Identifier	free
>9241	Condition	 
>9242	OrExpression	strcmpi ( token , \"patchDef2\" ) == 0 || strcmpi ( token , \"patchDef3\" ) == 0
>9243	EqualityExpression	strcmpi ( token , \"patchDef3\" ) == 0
>9244	PrimaryExpression	0
>9245	CallExpression	strcmpi ( token , \"patchDef3\" )
>9246	ArgumentList	token
>9247	Argument	\"patchDef3\"
>9248	PrimaryExpression	\"patchDef3\"
>9249	Argument	token
>9250	Identifier	token
>9251	Callee	strcmpi
>9252	Identifier	strcmpi
>9253	EqualityExpression	strcmpi ( token , \"patchDef2\" ) == 0
>9254	PrimaryExpression	0
>9255	CallExpression	strcmpi ( token , \"patchDef2\" )
>9256	ArgumentList	token
>9257	Argument	\"patchDef2\"
>9258	PrimaryExpression	\"patchDef2\"
>9259	Argument	token
>9260	Identifier	token
>9261	Callee	strcmpi
>9262	Identifier	strcmpi
>9263	IfStatement	if ( strcmpi ( token , \"terrainDef\" ) == 0 )
>9264	CompoundStatement	 
>9265	IfStatement	if ( b == NULL )
>9266	ElseStatement	else
>9267	CompoundStatement	 
>9268	ContinueStatement	 
>9269	CompoundStatement	 
>9270	ReturnStatement	 
>9271	Identifier	NULL
>9272	ExpressionStatement	 
>9273	CallExpression	Warning ( \"parsing terrain/brush\" )
>9274	ArgumentList	\"parsing terrain/brush\"
>9275	Argument	\"parsing terrain/brush\"
>9276	PrimaryExpression	\"parsing terrain/brush\"
>9277	Callee	Warning
>9278	Identifier	Warning
>9279	Condition	 
>9280	EqualityExpression	b == NULL
>9281	Identifier	NULL
>9282	Identifier	b
>9283	ExpressionStatement	 
>9284	AssignmentExpr	b = Terrain_Parse ( )
>9285	CallExpression	Terrain_Parse ( )
>9286	ArgumentList	 
>9287	Callee	Terrain_Parse
>9288	Identifier	Terrain_Parse
>9289	Identifier	b
>9290	ExpressionStatement	 
>9291	CallExpression	free ( b )
>9292	ArgumentList	b
>9293	Argument	b
>9294	Identifier	b
>9295	Callee	free
>9296	Identifier	free
>9297	Condition	 
>9298	EqualityExpression	strcmpi ( token , \"terrainDef\" ) == 0
>9299	PrimaryExpression	0
>9300	CallExpression	strcmpi ( token , \"terrainDef\" )
>9301	ArgumentList	token
>9302	Argument	\"terrainDef\"
>9303	PrimaryExpression	\"terrainDef\"
>9304	Argument	token
>9305	Identifier	token
>9306	Callee	strcmpi
>9307	Identifier	strcmpi
>9308	IfStatement	if ( strcmpi ( token , \"brushDef\" ) == 0 )
>9309	CompoundStatement	 
>9310	IfStatement	if ( b == NULL )
>9311	ElseStatement	else
>9312	CompoundStatement	 
>9313	ContinueStatement	 
>9314	CompoundStatement	 
>9315	ReturnStatement	 
>9316	Identifier	NULL
>9317	ExpressionStatement	 
>9318	CallExpression	Warning ( \"parsing brush primitive\" )
>9319	ArgumentList	\"parsing brush primitive\"
>9320	Argument	\"parsing brush primitive\"
>9321	PrimaryExpression	\"parsing brush primitive\"
>9322	Callee	Warning
>9323	Identifier	Warning
>9324	Condition	 
>9325	EqualityExpression	b == NULL
>9326	Identifier	NULL
>9327	Identifier	b
>9328	ExpressionStatement	 
>9329	CallExpression	BrushPrimit_Parse ( b )
>9330	ArgumentList	b
>9331	Argument	b
>9332	Identifier	b
>9333	Callee	BrushPrimit_Parse
>9334	Identifier	BrushPrimit_Parse
>9335	IfStatement	if ( g_qeglobals . m_bBrushPrimitMode )
>9336	ElseStatement	else
>9337	ExpressionStatement	 
>9338	CallExpression	Sys_Printf ( \"Warning 
>9339	ArgumentList	\"Warning 
>9340	Argument	\"Warning 
>9341	PrimaryExpression	\"Warning 
>9342	Callee	Sys_Printf
>9343	Identifier	Sys_Printf
>9344	CompoundStatement	 
>9345	IfStatement	if ( g_qeglobals . bOldBrushes )
>9346	ExpressionStatement	 
>9347	CallExpression	Sys_Printf ( \"Warning 
>9348	ArgumentList	\"Warning 
>9349	Argument	\"Warning 
>9350	PrimaryExpression	\"Warning 
>9351	Callee	Sys_Printf
>9352	Identifier	Sys_Printf
>9353	Condition	 
>9354	MemberAccess	g_qeglobals . bOldBrushes
>9355	Identifier	bOldBrushes
>9356	Identifier	g_qeglobals
>9357	Condition	 
>9358	MemberAccess	g_qeglobals . m_bBrushPrimitMode
>9359	Identifier	m_bBrushPrimitMode
>9360	Identifier	g_qeglobals
>9361	ExpressionStatement	 
>9362	AssignmentExpr	g_qeglobals . bPrimitBrushes = true
>9363	Identifier	true
>9364	MemberAccess	g_qeglobals . bPrimitBrushes
>9365	Identifier	bPrimitBrushes
>9366	Identifier	g_qeglobals
>9367	Condition	 
>9368	EqualityExpression	strcmpi ( token , \"brushDef\" ) == 0
>9369	PrimaryExpression	0
>9370	CallExpression	strcmpi ( token , \"brushDef\" )
>9371	ArgumentList	token
>9372	Argument	\"brushDef\"
>9373	PrimaryExpression	\"brushDef\"
>9374	Argument	token
>9375	Identifier	token
>9376	Callee	strcmpi
>9377	Identifier	strcmpi
>9378	IfStatement	if ( ! strcmp ( token , \"}\" ) )
>9379	BreakStatement	 
>9380	Condition	 
>9381	UnaryOp	! strcmp ( token , \"}\" )
>9382	CallExpression	strcmp ( token , \"}\" )
>9383	ArgumentList	token
>9384	Argument	\"}\"
>9385	PrimaryExpression	\"}\"
>9386	Argument	token
>9387	Identifier	token
>9388	Callee	strcmp
>9389	Identifier	strcmp
>9390	UnaryOperator	!
>9391	IfStatement	if ( ! GetToken ( true ) )
>9392	BreakStatement	 
>9393	Condition	 
>9394	UnaryOp	! GetToken ( true )
>9395	CallExpression	GetToken ( true )
>9396	ArgumentList	true
>9397	Argument	true
>9398	Identifier	true
>9399	Callee	GetToken
>9400	Identifier	GetToken
>9401	UnaryOperator	!
>9402	ExpressionStatement	 
>9403	AssignmentExpr	b = Brush_Alloc ( )
>9404	CallExpression	Brush_Alloc ( )
>9405	ArgumentList	 
>9406	Callee	Brush_Alloc
>9407	Identifier	Brush_Alloc
>9408	Identifier	b
>9409	ExpressionStatement	 
>9410	IncDecOp	g_qeglobals . d_parsed_brushes ++
>9411	IncDec	++
>9412	MemberAccess	g_qeglobals . d_parsed_brushes
>9413	Identifier	d_parsed_brushes
>9414	Identifier	g_qeglobals
>9415	IdentifierDeclStatement	 
>9416	IdentifierDecl	j
>9417	Identifier	j
>9418	IdentifierDeclType	int
>9419	IdentifierDecl	i
>9420	Identifier	i
>9421	IdentifierDeclType	int
>9422	IdentifierDeclStatement	 
>9423	IdentifierDecl	* f
>9424	Identifier	f
>9425	IdentifierDeclType	face_t *
>9426	IdentifierDeclStatement	 
>9427	IdentifierDecl	* b
>9428	Identifier	b
>9429	IdentifierDeclType	brush_t *
>9494	FunctionDef	QERApp_MapPrintf_FILE (char * text)
>9495	ParameterList	char * text
>9496	Parameter	 
>9497	Identifier	text
>9498	ParameterType	char *
>9499	ReturnType	void WINAPI
>9500	CompoundStatement	 
>9501	ExpressionStatement	 
>9502	CallExpression	fprintf ( g_File , buf )
>9503	ArgumentList	g_File
>9504	Argument	buf
>9505	Identifier	buf
>9506	Argument	g_File
>9507	Identifier	g_File
>9508	Callee	fprintf
>9509	Identifier	fprintf
>9510	ExpressionStatement	 
>9511	CallExpression	va_end ( argptr )
>9512	ArgumentList	argptr
>9513	Argument	argptr
>9514	Identifier	argptr
>9515	Callee	va_end
>9516	Identifier	va_end
>9517	ExpressionStatement	 
>9518	CallExpression	vsprintf ( buf , text , argptr )
>9519	ArgumentList	buf
>9520	Argument	argptr
>9521	Identifier	argptr
>9522	Argument	text
>9523	Identifier	text
>9524	Argument	buf
>9525	Identifier	buf
>9526	Callee	vsprintf
>9527	Identifier	vsprintf
>9528	ExpressionStatement	 
>9529	CallExpression	va_start ( argptr , text )
>9530	ArgumentList	argptr
>9531	Argument	text
>9532	Identifier	text
>9533	Argument	argptr
>9534	Identifier	argptr
>9535	Callee	va_start
>9536	Identifier	va_start
>9537	IdentifierDeclStatement	 
>9538	IdentifierDecl	buf [ 32768 ]
>9539	PrimaryExpression	32768
>9540	Identifier	buf
>9541	IdentifierDeclType	char [ 32768 ]
>9542	IdentifierDeclStatement	 
>9543	IdentifierDecl	argptr
>9544	Identifier	argptr
>9545	IdentifierDeclType	va_list
>9553	FunctionDef	Brush_SetEpair (brush_t * b , const char * pKey , const char * pValue)
>9554	ParameterList	brush_t * b , const char * pKey , const char * pValue
>9555	Parameter	 
>9556	Identifier	pValue
>9557	ParameterType	const char *
>9558	Parameter	 
>9559	Identifier	pKey
>9560	ParameterType	const char *
>9561	Parameter	 
>9562	Identifier	b
>9563	ParameterType	brush_t *
>9564	ReturnType	void
>9565	CompoundStatement	 
>9566	IfStatement	if ( g_qeglobals . m_bBrushPrimitMode )
>9567	ElseStatement	else
>9568	CompoundStatement	 
>9569	ExpressionStatement	 
>9570	CallExpression	Sys_Printf ( \"Can only set key/values in Brush primitive mode\n\" )
>9571	ArgumentList	\"Can only set key/values in Brush primitive mode\n\"
>9572	Argument	\"Can only set key/values in Brush primitive mode\n\"
>9573	PrimaryExpression	\"Can only set key/values in Brush primitive mode\n\"
>9574	Callee	Sys_Printf
>9575	Identifier	Sys_Printf
>9576	CompoundStatement	 
>9577	IfStatement	if ( b -> patchBrush )
>9578	ElseStatement	else
>9579	IfStatement	if ( b -> terrainBrush )
>9580	ElseStatement	else
>9581	CompoundStatement	 
>9582	ExpressionStatement	 
>9583	CallExpression	SetKeyValue ( b -> epairs , pKey , pValue )
>9584	ArgumentList	b -> epairs
>9585	Argument	pValue
>9586	Identifier	pValue
>9587	Argument	pKey
>9588	Identifier	pKey
>9589	Argument	b -> epairs
>9590	PtrMemberAccess	b -> epairs
>9591	Identifier	epairs
>9592	Identifier	b
>9593	Callee	SetKeyValue
>9594	Identifier	SetKeyValue
>9595	CompoundStatement	 
>9596	ExpressionStatement	 
>9597	CallExpression	Terrain_SetEpair ( b -> pTerrain , pKey , pValue )
>9598	ArgumentList	b -> pTerrain
>9599	Argument	pValue
>9600	Identifier	pValue
>9601	Argument	pKey
>9602	Identifier	pKey
>9603	Argument	b -> pTerrain
>9604	PtrMemberAccess	b -> pTerrain
>9605	Identifier	pTerrain
>9606	Identifier	b
>9607	Callee	Terrain_SetEpair
>9608	Identifier	Terrain_SetEpair
>9609	Condition	 
>9610	PtrMemberAccess	b -> terrainBrush
>9611	Identifier	terrainBrush
>9612	Identifier	b
>9613	CompoundStatement	 
>9614	ExpressionStatement	 
>9615	CallExpression	Patch_SetEpair ( b -> pPatch , pKey , pValue )
>9616	ArgumentList	b -> pPatch
>9617	Argument	pValue
>9618	Identifier	pValue
>9619	Argument	pKey
>9620	Identifier	pKey
>9621	Argument	b -> pPatch
>9622	PtrMemberAccess	b -> pPatch
>9623	Identifier	pPatch
>9624	Identifier	b
>9625	Callee	Patch_SetEpair
>9626	Identifier	Patch_SetEpair
>9627	Condition	 
>9628	PtrMemberAccess	b -> patchBrush
>9629	Identifier	patchBrush
>9630	Identifier	b
>9631	Condition	 
>9632	MemberAccess	g_qeglobals . m_bBrushPrimitMode
>9633	Identifier	m_bBrushPrimitMode
>9634	Identifier	g_qeglobals
>9649	FunctionDef	Brush_GetKeyValue (brush_t * b , const char * pKey)
>9650	ParameterList	brush_t * b , const char * pKey
>9651	Parameter	 
>9652	Identifier	pKey
>9653	ParameterType	const char *
>9654	Parameter	 
>9655	Identifier	b
>9656	ParameterType	brush_t *
>9657	ReturnType	const char *
>9658	CompoundStatement	 
>9659	ReturnStatement	 
>9660	PrimaryExpression	\"\"
>9661	IfStatement	if ( g_qeglobals . m_bBrushPrimitMode )
>9662	ElseStatement	else
>9663	CompoundStatement	 
>9664	ExpressionStatement	 
>9665	CallExpression	Sys_Printf ( \"Can only set brush/patch key/values in Brush primitive mode\n\" )
>9666	ArgumentList	\"Can only set brush/patch key/values in Brush primitive mode\n\"
>9667	Argument	\"Can only set brush/patch key/values in Brush primitive mode\n\"
>9668	PrimaryExpression	\"Can only set brush/patch key/values in Brush primitive mode\n\"
>9669	Callee	Sys_Printf
>9670	Identifier	Sys_Printf
>9671	CompoundStatement	 
>9672	IfStatement	if ( b -> patchBrush )
>9673	ElseStatement	else
>9674	IfStatement	if ( b -> terrainBrush )
>9675	ElseStatement	else
>9676	CompoundStatement	 
>9677	ReturnStatement	 
>9678	CallExpression	ValueForKey ( b -> epairs , pKey )
>9679	ArgumentList	b -> epairs
>9680	Argument	pKey
>9681	Identifier	pKey
>9682	Argument	b -> epairs
>9683	PtrMemberAccess	b -> epairs
>9684	Identifier	epairs
>9685	Identifier	b
>9686	Callee	ValueForKey
>9687	Identifier	ValueForKey
>9688	CompoundStatement	 
>9689	ReturnStatement	 
>9690	CallExpression	Terrain_GetKeyValue ( b -> pTerrain , pKey )
>9691	ArgumentList	b -> pTerrain
>9692	Argument	pKey
>9693	Identifier	pKey
>9694	Argument	b -> pTerrain
>9695	PtrMemberAccess	b -> pTerrain
>9696	Identifier	pTerrain
>9697	Identifier	b
>9698	Callee	Terrain_GetKeyValue
>9699	Identifier	Terrain_GetKeyValue
>9700	Condition	 
>9701	PtrMemberAccess	b -> terrainBrush
>9702	Identifier	terrainBrush
>9703	Identifier	b
>9704	CompoundStatement	 
>9705	ReturnStatement	 
>9706	CallExpression	Patch_GetKeyValue ( b -> pPatch , pKey )
>9707	ArgumentList	b -> pPatch
>9708	Argument	pKey
>9709	Identifier	pKey
>9710	Argument	b -> pPatch
>9711	PtrMemberAccess	b -> pPatch
>9712	Identifier	pPatch
>9713	Identifier	b
>9714	Callee	Patch_GetKeyValue
>9715	Identifier	Patch_GetKeyValue
>9716	Condition	 
>9717	PtrMemberAccess	b -> patchBrush
>9718	Identifier	patchBrush
>9719	Identifier	b
>9720	Condition	 
>9721	MemberAccess	g_qeglobals . m_bBrushPrimitMode
>9722	Identifier	m_bBrushPrimitMode
>9723	Identifier	g_qeglobals
>9740	FunctionDef	Brush_Write (brush_t * b , FILE * f)
>9741	ParameterList	brush_t * b , FILE * f
>9742	Parameter	 
>9743	Identifier	f
>9744	ParameterType	FILE *
>9745	Parameter	 
>9746	Identifier	b
>9747	ParameterType	brush_t *
>9748	ReturnType	void
>9749	CompoundStatement	 
>9750	IfStatement	if ( g_qeglobals . m_bBrushPrimitMode )
>9751	ElseStatement	else
>9752	CompoundStatement	 
>9753	ExpressionStatement	 
>9754	CallExpression	fprintf ( f , \"}\n\" )
>9755	ArgumentList	f
>9756	Argument	\"}\n\"
>9757	PrimaryExpression	\"}\n\"
>9758	Argument	f
>9759	Identifier	f
>9760	Callee	fprintf
>9761	Identifier	fprintf
>9762	ForStatement	for ( fa = b -> brush_faces ; fa ; fa = fa -> next )
>9763	CompoundStatement	 
>9764	ExpressionStatement	 
>9765	CallExpression	fprintf ( f , \"\n\" )
>9766	ArgumentList	f
>9767	Argument	\"\n\"
>9768	PrimaryExpression	\"\n\"
>9769	Argument	f
>9770	Identifier	f
>9771	Callee	fprintf
>9772	Identifier	fprintf
>9773	IfStatement	if ( g_qeglobals . bSurfacePropertiesPlugin )
>9774	ElseStatement	else
>9775	CompoundStatement	 
>9776	ExpressionStatement	 
>9777	CallExpression	fprintf ( f , \" %i %i %i\" , fa -> texdef . contents , fa -> texdef . flags , fa -> texdef . value )
>9778	ArgumentList	f
>9779	Argument	fa -> texdef . value
>9780	MemberAccess	fa -> texdef . value
>9781	Identifier	value
>9782	PtrMemberAccess	fa -> texdef
>9783	Identifier	texdef
>9784	Identifier	fa
>9785	Argument	fa -> texdef . flags
>9786	MemberAccess	fa -> texdef . flags
>9787	Identifier	flags
>9788	PtrMemberAccess	fa -> texdef
>9789	Identifier	texdef
>9790	Identifier	fa
>9791	Argument	fa -> texdef . contents
>9792	MemberAccess	fa -> texdef . contents
>9793	Identifier	contents
>9794	PtrMemberAccess	fa -> texdef
>9795	Identifier	texdef
>9796	Identifier	fa
>9797	Argument	\" %i %i %i\"
>9798	PrimaryExpression	\" %i %i %i\"
>9799	Argument	f
>9800	Identifier	f
>9801	Callee	fprintf
>9802	Identifier	fprintf
>9803	IfStatement	if ( fa -> texdef . scale [ 1 ] == ( int ) fa -> texdef . scale [ 1 ] )
>9804	ElseStatement	else
>9805	ExpressionStatement	 
>9806	CallExpression	fprintf ( f , \"%f\" , ( float ) fa -> texdef . scale [ 1 ] )
>9807	ArgumentList	f
>9808	Argument	( float ) fa -> texdef . scale [ 1 ]
>9809	CastExpression	( float ) fa -> texdef . scale [ 1 ]
>9810	ArrayIndexing	fa -> texdef . scale [ 1 ]
>9811	PrimaryExpression	1
>9812	MemberAccess	fa -> texdef . scale
>9813	Identifier	scale
>9814	PtrMemberAccess	fa -> texdef
>9815	Identifier	texdef
>9816	Identifier	fa
>9817	CastTarget	float
>9818	Argument	\"%f\"
>9819	PrimaryExpression	\"%f\"
>9820	Argument	f
>9821	Identifier	f
>9822	Callee	fprintf
>9823	Identifier	fprintf
>9824	ExpressionStatement	 
>9825	CallExpression	fprintf ( f , \"%i\" , ( int ) fa -> texdef . scale [ 1 ] )
>9826	ArgumentList	f
>9827	Argument	( int ) fa -> texdef . scale [ 1 ]
>9828	CastExpression	( int ) fa -> texdef . scale [ 1 ]
>9829	ArrayIndexing	fa -> texdef . scale [ 1 ]
>9830	PrimaryExpression	1
>9831	MemberAccess	fa -> texdef . scale
>9832	Identifier	scale
>9833	PtrMemberAccess	fa -> texdef
>9834	Identifier	texdef
>9835	Identifier	fa
>9836	CastTarget	int
>9837	Argument	\"%i\"
>9838	PrimaryExpression	\"%i\"
>9839	Argument	f
>9840	Identifier	f
>9841	Callee	fprintf
>9842	Identifier	fprintf
>9843	Condition	 
>9844	EqualityExpression	fa -> texdef . scale [ 1 ] == ( int ) fa -> texdef . scale [ 1 ]
>9845	CastExpression	( int ) fa -> texdef . scale [ 1 ]
>9846	ArrayIndexing	fa -> texdef . scale [ 1 ]
>9847	PrimaryExpression	1
>9848	MemberAccess	fa -> texdef . scale
>9849	Identifier	scale
>9850	PtrMemberAccess	fa -> texdef
>9851	Identifier	texdef
>9852	Identifier	fa
>9853	CastTarget	int
>9854	ArrayIndexing	fa -> texdef . scale [ 1 ]
>9855	PrimaryExpression	1
>9856	MemberAccess	fa -> texdef . scale
>9857	Identifier	scale
>9858	PtrMemberAccess	fa -> texdef
>9859	Identifier	texdef
>9860	Identifier	fa
>9861	IfStatement	if ( fa -> texdef . scale [ 0 ] == ( int ) fa -> texdef . scale [ 0 ] )
>9862	ElseStatement	else
>9863	ExpressionStatement	 
>9864	CallExpression	fprintf ( f , \"%f \" , ( float ) fa -> texdef . scale [ 0 ] )
>9865	ArgumentList	f
>9866	Argument	( float ) fa -> texdef . scale [ 0 ]
>9867	CastExpression	( float ) fa -> texdef . scale [ 0 ]
>9868	ArrayIndexing	fa -> texdef . scale [ 0 ]
>9869	PrimaryExpression	0
>9870	MemberAccess	fa -> texdef . scale
>9871	Identifier	scale
>9872	PtrMemberAccess	fa -> texdef
>9873	Identifier	texdef
>9874	Identifier	fa
>9875	CastTarget	float
>9876	Argument	\"%f \"
>9877	PrimaryExpression	\"%f \"
>9878	Argument	f
>9879	Identifier	f
>9880	Callee	fprintf
>9881	Identifier	fprintf
>9882	ExpressionStatement	 
>9883	CallExpression	fprintf ( f , \"%i \" , ( int ) fa -> texdef . scale [ 0 ] )
>9884	ArgumentList	f
>9885	Argument	( int ) fa -> texdef . scale [ 0 ]
>9886	CastExpression	( int ) fa -> texdef . scale [ 0 ]
>9887	ArrayIndexing	fa -> texdef . scale [ 0 ]
>9888	PrimaryExpression	0
>9889	MemberAccess	fa -> texdef . scale
>9890	Identifier	scale
>9891	PtrMemberAccess	fa -> texdef
>9892	Identifier	texdef
>9893	Identifier	fa
>9894	CastTarget	int
>9895	Argument	\"%i \"
>9896	PrimaryExpression	\"%i \"
>9897	Argument	f
>9898	Identifier	f
>9899	Callee	fprintf
>9900	Identifier	fprintf
>9901	Condition	 
>9902	EqualityExpression	fa -> texdef . scale [ 0 ] == ( int ) fa -> texdef . scale [ 0 ]
>9903	CastExpression	( int ) fa -> texdef . scale [ 0 ]
>9904	ArrayIndexing	fa -> texdef . scale [ 0 ]
>9905	PrimaryExpression	0
>9906	MemberAccess	fa -> texdef . scale
>9907	Identifier	scale
>9908	PtrMemberAccess	fa -> texdef
>9909	Identifier	texdef
>9910	Identifier	fa
>9911	CastTarget	int
>9912	ArrayIndexing	fa -> texdef . scale [ 0 ]
>9913	PrimaryExpression	0
>9914	MemberAccess	fa -> texdef . scale
>9915	Identifier	scale
>9916	PtrMemberAccess	fa -> texdef
>9917	Identifier	texdef
>9918	Identifier	fa
>9919	ExpressionStatement	 
>9920	CallExpression	fprintf ( f , \"%s %i %i %i \" , pname , ( int ) fa -> texdef . shift [ 0 ] , ( int ) fa -> texdef . shift [ 1 ] , ( \
>9921	ArgumentList	f
>9922	Argument	( int ) fa -> texdef . rotate
>9923	CastExpression	( int ) fa -> texdef . rotate
>9924	MemberAccess	fa -> texdef . rotate
>9925	Identifier	rotate
>9926	PtrMemberAccess	fa -> texdef
>9927	Identifier	texdef
>9928	Identifier	fa
>9929	CastTarget	int
>9930	Argument	( int ) fa -> texdef . shift [ 1 ]
>9931	CastExpression	( int ) fa -> texdef . shift [ 1 ]
>9932	ArrayIndexing	fa -> texdef . shift [ 1 ]
>9933	PrimaryExpression	1
>9934	MemberAccess	fa -> texdef . shift
>9935	Identifier	shift
>9936	PtrMemberAccess	fa -> texdef
>9937	Identifier	texdef
>9938	Identifier	fa
>9939	CastTarget	int
>9940	Argument	( int ) fa -> texdef . shift [ 0 ]
>9941	CastExpression	( int ) fa -> texdef . shift [ 0 ]
>9942	ArrayIndexing	fa -> texdef . shift [ 0 ]
>9943	PrimaryExpression	0
>9944	MemberAccess	fa -> texdef . shift
>9945	Identifier	shift
>9946	PtrMemberAccess	fa -> texdef
>9947	Identifier	texdef
>9948	Identifier	fa
>9949	CastTarget	int
>9950	Argument	pname
>9951	Identifier	pname
>9952	Argument	\"%s %i %i %i \"
>9953	PrimaryExpression	\"%s %i %i %i \"
>9954	Argument	f
>9955	Identifier	f
>9956	Callee	fprintf
>9957	Identifier	fprintf
>9958	IfStatement	if ( pname [ 0 ] == 0 )
>9959	ExpressionStatement	 
>9960	AssignmentExpr	pname = \"unnamed\"
>9961	PrimaryExpression	\"unnamed\"
>9962	Identifier	pname
>9963	Condition	 
>9964	EqualityExpression	pname [ 0 ] == 0
>9965	PrimaryExpression	0
>9966	ArrayIndexing	pname [ 0 ]
>9967	PrimaryExpression	0
>9968	Identifier	pname
>9969	ExpressionStatement	 
>9970	AssignmentExpr	pname = fa -> texdef . name
>9971	MemberAccess	fa -> texdef . name
>9972	Identifier	name
>9973	PtrMemberAccess	fa -> texdef
>9974	Identifier	texdef
>9975	Identifier	fa
>9976	Identifier	pname
>9977	CompoundStatement	 
>9978	IfStatement	if ( ! fa -> pData )
>9979	ElseStatement	else
>9980	ExpressionStatement	 
>9981	CallExpression	GETPLUGINTEXDEF ( fa ) -> WriteTexdef ( QERApp_MapPrintf_FILE )
>9982	ArgumentList	QERApp_MapPrintf_FILE
>9983	Argument	QERApp_MapPrintf_FILE
>9984	Identifier	QERApp_MapPrintf_FILE
>9985	Callee	GETPLUGINTEXDEF ( fa ) -> WriteTexdef
>9986	PtrMemberAccess	GETPLUGINTEXDEF ( fa ) -> WriteTexdef
>9987	Identifier	WriteTexdef
>9988	CallExpression	GETPLUGINTEXDEF ( fa )
>9989	ArgumentList	fa
>9990	Argument	fa
>9991	Identifier	fa
>9992	Callee	GETPLUGINTEXDEF
>9993	Identifier	GETPLUGINTEXDEF
>9994	ExpressionStatement	 
>9995	CallExpression	Sys_Printf ( \"ERROR
>9996	ArgumentList	\"ERROR
>9997	Argument	\"ERROR
>9998	PrimaryExpression	\"ERROR
>9999	Callee	Sys_Printf
>10000	Identifier	Sys_Printf
>10001	Condition	 
>10002	UnaryOp	! fa -> pData
>10003	PtrMemberAccess	fa -> pData
>10004	Identifier	pData
>10005	Identifier	fa
>10006	UnaryOperator	!
>10007	ExpressionStatement	 
>10008	AssignmentExpr	g_File = f
>10009	Identifier	f
>10010	Identifier	g_File
>10011	Condition	 
>10012	MemberAccess	g_qeglobals . bSurfacePropertiesPlugin
>10013	Identifier	bSurfacePropertiesPlugin
>10014	Identifier	g_qeglobals
>10015	ForStatement	for ( i = 0 ; i < 3 ; i ++ )
>10016	CompoundStatement	 
>10017	ExpressionStatement	 
>10018	CallExpression	fprintf ( f , \") \" )
>10019	ArgumentList	f
>10020	Argument	\") \"
>10021	PrimaryExpression	\") \"
>10022	Argument	f
>10023	Identifier	f
>10024	Callee	fprintf
>10025	Identifier	fprintf
>10026	ForStatement	for ( int j = 0 ; j < 3 ; j ++ )
>10027	CompoundStatement	 
>10028	IfStatement	if ( fa -> planepts [ i ] [ j ] == static_cast < int > ( fa -> planepts [ i ] [ j ] ) )
>10029	ElseStatement	else
>10030	ExpressionStatement	 
>10031	CallExpression	fprintf ( f , \"%f \" , fa -> planepts [ i ] [ j ] )
>10032	ArgumentList	f
>10033	Argument	fa -> planepts [ i ] [ j ]
>10034	ArrayIndexing	fa -> planepts [ i ] [ j ]
>10035	Identifier	j
>10036	ArrayIndexing	fa -> planepts [ i ]
>10037	Identifier	i
>10038	PtrMemberAccess	fa -> planepts
>10039	Identifier	planepts
>10040	Identifier	fa
>10041	Argument	\"%f \"
>10042	PrimaryExpression	\"%f \"
>10043	Argument	f
>10044	Identifier	f
>10045	Callee	fprintf
>10046	Identifier	fprintf
>10047	ExpressionStatement	 
>10048	CallExpression	fprintf ( f , \"%i \" , static_cast < int > ( fa -> planepts [ i ] [ j ] ) )
>10049	ArgumentList	f
>10050	Argument	static_cast < int > ( fa -> planepts [ i ] [ j ] )
>10051	RelationalExpression	static_cast < int > ( fa -> planepts [ i ] [ j ] )
>10052	RelationalExpression	int > ( fa -> planepts [ i ] [ j ] )
>10053	ArrayIndexing	fa -> planepts [ i ] [ j ]
>10054	Identifier	j
>10055	ArrayIndexing	fa -> planepts [ i ]
>10056	Identifier	i
>10057	PtrMemberAccess	fa -> planepts
>10058	Identifier	planepts
>10059	Identifier	fa
>10060	Identifier	int
>10061	Identifier	static_cast
>10062	Argument	\"%i \"
>10063	PrimaryExpression	\"%i \"
>10064	Argument	f
>10065	Identifier	f
>10066	Callee	fprintf
>10067	Identifier	fprintf
>10068	Condition	 
>10069	EqualityExpression	fa -> planepts [ i ] [ j ] == static_cast < int > ( fa -> planepts [ i ] [ j ] )
>10070	RelationalExpression	static_cast < int > ( fa -> planepts [ i ] [ j ] )
>10071	RelationalExpression	int > ( fa -> planepts [ i ] [ j ] )
>10072	ArrayIndexing	fa -> planepts [ i ] [ j ]
>10073	Identifier	j
>10074	ArrayIndexing	fa -> planepts [ i ]
>10075	Identifier	i
>10076	PtrMemberAccess	fa -> planepts
>10077	Identifier	planepts
>10078	Identifier	fa
>10079	Identifier	int
>10080	Identifier	static_cast
>10081	ArrayIndexing	fa -> planepts [ i ] [ j ]
>10082	Identifier	j
>10083	ArrayIndexing	fa -> planepts [ i ]
>10084	Identifier	i
>10085	PtrMemberAccess	fa -> planepts
>10086	Identifier	planepts
>10087	Identifier	fa
>10088	IncDecOp	 
>10089	IncDec	++
>10090	Identifier	j
>10091	Condition	 
>10092	RelationalExpression	j < 3
>10093	PrimaryExpression	3
>10094	Identifier	j
>10095	ForInit	 
>10096	IdentifierDeclStatement	int j = 0 ;
>10097	IdentifierDecl	j = 0
>10098	AssignmentExpr	j = 0
>10099	PrimaryExpression	0
>10100	Identifier	j
>10101	Identifier	j
>10102	IdentifierDeclType	int
>10103	ExpressionStatement	 
>10104	CallExpression	fprintf ( f , \"( \" )
>10105	ArgumentList	f
>10106	Argument	\"( \"
>10107	PrimaryExpression	\"( \"
>10108	Argument	f
>10109	Identifier	f
>10110	Callee	fprintf
>10111	Identifier	fprintf
>10112	IncDecOp	 
>10113	IncDec	++
>10114	Identifier	i
>10115	Condition	 
>10116	RelationalExpression	i < 3
>10117	PrimaryExpression	3
>10118	Identifier	i
>10119	ForInit	 
>10120	AssignmentExpr	i = 0
>10121	PrimaryExpression	0
>10122	Identifier	i
>10123	AssignmentExpr	 
>10124	PtrMemberAccess	fa -> next
>10125	Identifier	next
>10126	Identifier	fa
>10127	Identifier	fa
>10128	Condition	 
>10129	Identifier	fa
>10130	ForInit	 
>10131	AssignmentExpr	fa = b -> brush_faces
>10132	PtrMemberAccess	b -> brush_faces
>10133	Identifier	brush_faces
>10134	Identifier	b
>10135	Identifier	fa
>10136	ExpressionStatement	 
>10137	CallExpression	fprintf ( f , \"{\n\" )
>10138	ArgumentList	f
>10139	Argument	\"{\n\"
>10140	PrimaryExpression	\"{\n\"
>10141	Argument	f
>10142	Identifier	f
>10143	Callee	fprintf
>10144	Identifier	fprintf
>10145	CompoundStatement	 
>10146	ExpressionStatement	 
>10147	CallExpression	fprintf ( f , \"}\n}\n\" )
>10148	ArgumentList	f
>10149	Argument	\"}\n}\n\"
>10150	PrimaryExpression	\"}\n}\n\"
>10151	Argument	f
>10152	Identifier	f
>10153	Callee	fprintf
>10154	Identifier	fprintf
>10155	ForStatement	for ( fa = b -> brush_faces ; fa ; fa = fa -> next )
>10156	CompoundStatement	 
>10157	ExpressionStatement	 
>10158	CallExpression	fprintf ( f , \"%i %i %i\n\" , fa -> texdef . contents , fa -> texdef . flags , fa -> texdef . value )
>10159	ArgumentList	f
>10160	Argument	fa -> texdef . value
>10161	MemberAccess	fa -> texdef . value
>10162	Identifier	value
>10163	PtrMemberAccess	fa -> texdef
>10164	Identifier	texdef
>10165	Identifier	fa
>10166	Argument	fa -> texdef . flags
>10167	MemberAccess	fa -> texdef . flags
>10168	Identifier	flags
>10169	PtrMemberAccess	fa -> texdef
>10170	Identifier	texdef
>10171	Identifier	fa
>10172	Argument	fa -> texdef . contents
>10173	MemberAccess	fa -> texdef . contents
>10174	Identifier	contents
>10175	PtrMemberAccess	fa -> texdef
>10176	Identifier	texdef
>10177	Identifier	fa
>10178	Argument	\"%i %i %i\n\"
>10179	PrimaryExpression	\"%i %i %i\n\"
>10180	Argument	f
>10181	Identifier	f
>10182	Callee	fprintf
>10183	Identifier	fprintf
>10184	ExpressionStatement	 
>10185	CallExpression	fprintf ( f , \"%s \" , pName )
>10186	ArgumentList	f
>10187	Argument	pName
>10188	Identifier	pName
>10189	Argument	\"%s \"
>10190	PrimaryExpression	\"%s \"
>10191	Argument	f
>10192	Identifier	f
>10193	Callee	fprintf
>10194	Identifier	fprintf
>10195	IdentifierDeclStatement	 
>10196	IdentifierDecl	* pName = strlen ( fa -> texdef . name ) > 0 ? fa -> texdef . name 
>10197	AssignmentExpr	* pName = strlen ( fa -> texdef . name ) > 0 ? fa -> texdef . name 
>10198	ConditionalExpression	strlen ( fa -> texdef . name ) > 0 ? fa -> texdef . name 
>10199	PrimaryExpression	\"unnamed\"
>10200	MemberAccess	fa -> texdef . name
>10201	Identifier	name
>10202	PtrMemberAccess	fa -> texdef
>10203	Identifier	texdef
>10204	Identifier	fa
>10205	Condition	strlen ( fa -> texdef . name ) > 0
>10206	RelationalExpression	strlen ( fa -> texdef . name ) > 0
>10207	PrimaryExpression	0
>10208	CallExpression	strlen ( fa -> texdef . name )
>10209	ArgumentList	fa -> texdef . name
>10210	Argument	fa -> texdef . name
>10211	MemberAccess	fa -> texdef . name
>10212	Identifier	name
>10213	PtrMemberAccess	fa -> texdef
>10214	Identifier	texdef
>10215	Identifier	fa
>10216	Callee	strlen
>10217	Identifier	strlen
>10218	Identifier	pName
>10219	Identifier	pName
>10220	IdentifierDeclType	char *
>10221	IfStatement	if ( g_qeglobals . bSurfacePropertiesPlugin )
>10222	ExpressionStatement	 
>10223	CallExpression	Sys_Printf ( \"WARNING
>10224	ArgumentList	\"WARNING
>10225	Argument	\"WARNING
>10226	PrimaryExpression	\"WARNING
>10227	Callee	Sys_Printf
>10228	Identifier	Sys_Printf
>10229	Condition	 
>10230	MemberAccess	g_qeglobals . bSurfacePropertiesPlugin
>10231	Identifier	bSurfacePropertiesPlugin
>10232	Identifier	g_qeglobals
>10233	ExpressionStatement	 
>10234	CallExpression	fprintf ( f , \") ) \" )
>10235	ArgumentList	f
>10236	Argument	\") ) \"
>10237	PrimaryExpression	\") ) \"
>10238	Argument	f
>10239	Identifier	f
>10240	Callee	fprintf
>10241	Identifier	fprintf
>10242	ForStatement	for ( i = 0 ; i < 3 ; i ++ )
>10243	IfStatement	if ( fa -> brushprimit_texdef . coords [ 1 ] [ i ] == static_cast < int > ( fa -> brushprimit_texdef . coords [ \
>10244	ElseStatement	else
>10245	ExpressionStatement	 
>10246	CallExpression	fprintf ( f , \"%f \" , fa -> brushprimit_texdef . coords [ 1 ] [ i ] )
>10247	ArgumentList	f
>10248	Argument	fa -> brushprimit_texdef . coords [ 1 ] [ i ]
>10249	ArrayIndexing	fa -> brushprimit_texdef . coords [ 1 ] [ i ]
>10250	Identifier	i
>10251	ArrayIndexing	fa -> brushprimit_texdef . coords [ 1 ]
>10252	PrimaryExpression	1
>10253	MemberAccess	fa -> brushprimit_texdef . coords
>10254	Identifier	coords
>10255	PtrMemberAccess	fa -> brushprimit_texdef
>10256	Identifier	brushprimit_texdef
>10257	Identifier	fa
>10258	Argument	\"%f \"
>10259	PrimaryExpression	\"%f \"
>10260	Argument	f
>10261	Identifier	f
>10262	Callee	fprintf
>10263	Identifier	fprintf
>10264	ExpressionStatement	 
>10265	CallExpression	fprintf ( f , \"%i \" , static_cast < int > ( fa -> brushprimit_texdef . coords [ 1 ] [ i ] ) )
>10266	ArgumentList	f
>10267	Argument	static_cast < int > ( fa -> brushprimit_texdef . coords [ 1 ] [ i ] )
>10268	RelationalExpression	static_cast < int > ( fa -> brushprimit_texdef . coords [ 1 ] [ i ] )
>10269	RelationalExpression	int > ( fa -> brushprimit_texdef . coords [ 1 ] [ i ] )
>10270	ArrayIndexing	fa -> brushprimit_texdef . coords [ 1 ] [ i ]
>10271	Identifier	i
>10272	ArrayIndexing	fa -> brushprimit_texdef . coords [ 1 ]
>10273	PrimaryExpression	1
>10274	MemberAccess	fa -> brushprimit_texdef . coords
>10275	Identifier	coords
>10276	PtrMemberAccess	fa -> brushprimit_texdef
>10277	Identifier	brushprimit_texdef
>10278	Identifier	fa
>10279	Identifier	int
>10280	Identifier	static_cast
>10281	Argument	\"%i \"
>10282	PrimaryExpression	\"%i \"
>10283	Argument	f
>10284	Identifier	f
>10285	Callee	fprintf
>10286	Identifier	fprintf
>10287	Condition	 
>10288	EqualityExpression	fa -> brushprimit_texdef . coords [ 1 ] [ i ] == static_cast < int > ( fa -> brushprimit_texdef . coords [ \
>10289	RelationalExpression	static_cast < int > ( fa -> brushprimit_texdef . coords [ 1 ] [ i ] )
>10290	RelationalExpression	int > ( fa -> brushprimit_texdef . coords [ 1 ] [ i ] )
>10291	ArrayIndexing	fa -> brushprimit_texdef . coords [ 1 ] [ i ]
>10292	Identifier	i
>10293	ArrayIndexing	fa -> brushprimit_texdef . coords [ 1 ]
>10294	PrimaryExpression	1
>10295	MemberAccess	fa -> brushprimit_texdef . coords
>10296	Identifier	coords
>10297	PtrMemberAccess	fa -> brushprimit_texdef
>10298	Identifier	brushprimit_texdef
>10299	Identifier	fa
>10300	Identifier	int
>10301	Identifier	static_cast
>10302	ArrayIndexing	fa -> brushprimit_texdef . coords [ 1 ] [ i ]
>10303	Identifier	i
>10304	ArrayIndexing	fa -> brushprimit_texdef . coords [ 1 ]
>10305	PrimaryExpression	1
>10306	MemberAccess	fa -> brushprimit_texdef . coords
>10307	Identifier	coords
>10308	PtrMemberAccess	fa -> brushprimit_texdef
>10309	Identifier	brushprimit_texdef
>10310	Identifier	fa
>10311	IncDecOp	 
>10312	IncDec	++
>10313	Identifier	i
>10314	Condition	 
>10315	RelationalExpression	i < 3
>10316	PrimaryExpression	3
>10317	Identifier	i
>10318	ForInit	 
>10319	AssignmentExpr	i = 0
>10320	PrimaryExpression	0
>10321	Identifier	i
>10322	ExpressionStatement	 
>10323	CallExpression	fprintf ( f , \") ( \" )
>10324	ArgumentList	f
>10325	Argument	\") ( \"
>10326	PrimaryExpression	\") ( \"
>10327	Argument	f
>10328	Identifier	f
>10329	Callee	fprintf
>10330	Identifier	fprintf
>10331	ForStatement	for ( i = 0 ; i < 3 ; i ++ )
>10332	IfStatement	if ( fa -> brushprimit_texdef . coords [ 0 ] [ i ] == static_cast < int > ( fa -> brushprimit_texdef . coords [ \
>10333	ElseStatement	else
>10334	ExpressionStatement	 
>10335	CallExpression	fprintf ( f , \"%f \" , fa -> brushprimit_texdef . coords [ 0 ] [ i ] )
>10336	ArgumentList	f
>10337	Argument	fa -> brushprimit_texdef . coords [ 0 ] [ i ]
>10338	ArrayIndexing	fa -> brushprimit_texdef . coords [ 0 ] [ i ]
>10339	Identifier	i
>10340	ArrayIndexing	fa -> brushprimit_texdef . coords [ 0 ]
>10341	PrimaryExpression	0
>10342	MemberAccess	fa -> brushprimit_texdef . coords
>10343	Identifier	coords
>10344	PtrMemberAccess	fa -> brushprimit_texdef
>10345	Identifier	brushprimit_texdef
>10346	Identifier	fa
>10347	Argument	\"%f \"
>10348	PrimaryExpression	\"%f \"
>10349	Argument	f
>10350	Identifier	f
>10351	Callee	fprintf
>10352	Identifier	fprintf
>10353	ExpressionStatement	 
>10354	CallExpression	fprintf ( f , \"%i \" , static_cast < int > ( fa -> brushprimit_texdef . coords [ 0 ] [ i ] ) )
>10355	ArgumentList	f
>10356	Argument	static_cast < int > ( fa -> brushprimit_texdef . coords [ 0 ] [ i ] )
>10357	RelationalExpression	static_cast < int > ( fa -> brushprimit_texdef . coords [ 0 ] [ i ] )
>10358	RelationalExpression	int > ( fa -> brushprimit_texdef . coords [ 0 ] [ i ] )
>10359	ArrayIndexing	fa -> brushprimit_texdef . coords [ 0 ] [ i ]
>10360	Identifier	i
>10361	ArrayIndexing	fa -> brushprimit_texdef . coords [ 0 ]
>10362	PrimaryExpression	0
>10363	MemberAccess	fa -> brushprimit_texdef . coords
>10364	Identifier	coords
>10365	PtrMemberAccess	fa -> brushprimit_texdef
>10366	Identifier	brushprimit_texdef
>10367	Identifier	fa
>10368	Identifier	int
>10369	Identifier	static_cast
>10370	Argument	\"%i \"
>10371	PrimaryExpression	\"%i \"
>10372	Argument	f
>10373	Identifier	f
>10374	Callee	fprintf
>10375	Identifier	fprintf
>10376	Condition	 
>10377	EqualityExpression	fa -> brushprimit_texdef . coords [ 0 ] [ i ] == static_cast < int > ( fa -> brushprimit_texdef . coords [ \
>10378	RelationalExpression	static_cast < int > ( fa -> brushprimit_texdef . coords [ 0 ] [ i ] )
>10379	RelationalExpression	int > ( fa -> brushprimit_texdef . coords [ 0 ] [ i ] )
>10380	ArrayIndexing	fa -> brushprimit_texdef . coords [ 0 ] [ i ]
>10381	Identifier	i
>10382	ArrayIndexing	fa -> brushprimit_texdef . coords [ 0 ]
>10383	PrimaryExpression	0
>10384	MemberAccess	fa -> brushprimit_texdef . coords
>10385	Identifier	coords
>10386	PtrMemberAccess	fa -> brushprimit_texdef
>10387	Identifier	brushprimit_texdef
>10388	Identifier	fa
>10389	Identifier	int
>10390	Identifier	static_cast
>10391	ArrayIndexing	fa -> brushprimit_texdef . coords [ 0 ] [ i ]
>10392	Identifier	i
>10393	ArrayIndexing	fa -> brushprimit_texdef . coords [ 0 ]
>10394	PrimaryExpression	0
>10395	MemberAccess	fa -> brushprimit_texdef . coords
>10396	Identifier	coords
>10397	PtrMemberAccess	fa -> brushprimit_texdef
>10398	Identifier	brushprimit_texdef
>10399	Identifier	fa
>10400	IncDecOp	 
>10401	IncDec	++
>10402	Identifier	i
>10403	Condition	 
>10404	RelationalExpression	i < 3
>10405	PrimaryExpression	3
>10406	Identifier	i
>10407	ForInit	 
>10408	AssignmentExpr	i = 0
>10409	PrimaryExpression	0
>10410	Identifier	i
>10411	ExpressionStatement	 
>10412	CallExpression	fprintf ( f , \"( ( \" )
>10413	ArgumentList	f
>10414	Argument	\"( ( \"
>10415	PrimaryExpression	\"( ( \"
>10416	Argument	f
>10417	Identifier	f
>10418	Callee	fprintf
>10419	Identifier	fprintf
>10420	ForStatement	for ( i = 0 ; i < 3 ; i ++ )
>10421	CompoundStatement	 
>10422	ExpressionStatement	 
>10423	CallExpression	fprintf ( f , \") \" )
>10424	ArgumentList	f
>10425	Argument	\") \"
>10426	PrimaryExpression	\") \"
>10427	Argument	f
>10428	Identifier	f
>10429	Callee	fprintf
>10430	Identifier	fprintf
>10431	ForStatement	for ( int j = 0 ; j < 3 ; j ++ )
>10432	IfStatement	if ( fa -> planepts [ i ] [ j ] == static_cast < int > ( fa -> planepts [ i ] [ j ] ) )
>10433	ElseStatement	else
>10434	ExpressionStatement	 
>10435	CallExpression	fprintf ( f , \"%f \" , fa -> planepts [ i ] [ j ] )
>10436	ArgumentList	f
>10437	Argument	fa -> planepts [ i ] [ j ]
>10438	ArrayIndexing	fa -> planepts [ i ] [ j ]
>10439	Identifier	j
>10440	ArrayIndexing	fa -> planepts [ i ]
>10441	Identifier	i
>10442	PtrMemberAccess	fa -> planepts
>10443	Identifier	planepts
>10444	Identifier	fa
>10445	Argument	\"%f \"
>10446	PrimaryExpression	\"%f \"
>10447	Argument	f
>10448	Identifier	f
>10449	Callee	fprintf
>10450	Identifier	fprintf
>10451	ExpressionStatement	 
>10452	CallExpression	fprintf ( f , \"%i \" , static_cast < int > ( fa -> planepts [ i ] [ j ] ) )
>10453	ArgumentList	f
>10454	Argument	static_cast < int > ( fa -> planepts [ i ] [ j ] )
>10455	RelationalExpression	static_cast < int > ( fa -> planepts [ i ] [ j ] )
>10456	RelationalExpression	int > ( fa -> planepts [ i ] [ j ] )
>10457	ArrayIndexing	fa -> planepts [ i ] [ j ]
>10458	Identifier	j
>10459	ArrayIndexing	fa -> planepts [ i ]
>10460	Identifier	i
>10461	PtrMemberAccess	fa -> planepts
>10462	Identifier	planepts
>10463	Identifier	fa
>10464	Identifier	int
>10465	Identifier	static_cast
>10466	Argument	\"%i \"
>10467	PrimaryExpression	\"%i \"
>10468	Argument	f
>10469	Identifier	f
>10470	Callee	fprintf
>10471	Identifier	fprintf
>10472	Condition	 
>10473	EqualityExpression	fa -> planepts [ i ] [ j ] == static_cast < int > ( fa -> planepts [ i ] [ j ] )
>10474	RelationalExpression	static_cast < int > ( fa -> planepts [ i ] [ j ] )
>10475	RelationalExpression	int > ( fa -> planepts [ i ] [ j ] )
>10476	ArrayIndexing	fa -> planepts [ i ] [ j ]
>10477	Identifier	j
>10478	ArrayIndexing	fa -> planepts [ i ]
>10479	Identifier	i
>10480	PtrMemberAccess	fa -> planepts
>10481	Identifier	planepts
>10482	Identifier	fa
>10483	Identifier	int
>10484	Identifier	static_cast
>10485	ArrayIndexing	fa -> planepts [ i ] [ j ]
>10486	Identifier	j
>10487	ArrayIndexing	fa -> planepts [ i ]
>10488	Identifier	i
>10489	PtrMemberAccess	fa -> planepts
>10490	Identifier	planepts
>10491	Identifier	fa
>10492	IncDecOp	 
>10493	IncDec	++
>10494	Identifier	j
>10495	Condition	 
>10496	RelationalExpression	j < 3
>10497	PrimaryExpression	3
>10498	Identifier	j
>10499	ForInit	 
>10500	IdentifierDeclStatement	int j = 0 ;
>10501	IdentifierDecl	j = 0
>10502	AssignmentExpr	j = 0
>10503	PrimaryExpression	0
>10504	Identifier	j
>10505	Identifier	j
>10506	IdentifierDeclType	int
>10507	ExpressionStatement	 
>10508	CallExpression	fprintf ( f , \"( \" )
>10509	ArgumentList	f
>10510	Argument	\"( \"
>10511	PrimaryExpression	\"( \"
>10512	Argument	f
>10513	Identifier	f
>10514	Callee	fprintf
>10515	Identifier	fprintf
>10516	IncDecOp	 
>10517	IncDec	++
>10518	Identifier	i
>10519	Condition	 
>10520	RelationalExpression	i < 3
>10521	PrimaryExpression	3
>10522	Identifier	i
>10523	ForInit	 
>10524	AssignmentExpr	i = 0
>10525	PrimaryExpression	0
>10526	Identifier	i
>10527	AssignmentExpr	 
>10528	PtrMemberAccess	fa -> next
>10529	Identifier	next
>10530	Identifier	fa
>10531	Identifier	fa
>10532	Condition	 
>10533	Identifier	fa
>10534	ForInit	 
>10535	AssignmentExpr	fa = b -> brush_faces
>10536	PtrMemberAccess	b -> brush_faces
>10537	Identifier	brush_faces
>10538	Identifier	b
>10539	Identifier	fa
>10540	IfStatement	if ( b -> epairs )
>10541	ForStatement	for ( ep = b -> epairs ; ep ; ep = ep -> next )
>10542	ExpressionStatement	 
>10543	CallExpression	fprintf ( f , \"\\"%s\\" \\"%s\\"\n\" , ep -> key , ep -> value )
>10544	ArgumentList	f
>10545	Argument	ep -> value
>10546	PtrMemberAccess	ep -> value
>10547	Identifier	value
>10548	Identifier	ep
>10549	Argument	ep -> key
>10550	PtrMemberAccess	ep -> key
>10551	Identifier	key
>10552	Identifier	ep
>10553	Argument	\"\\"%s\\" \\"%s\\"\n\"
>10554	PrimaryExpression	\"\\"%s\\" \\"%s\\"\n\"
>10555	Argument	f
>10556	Identifier	f
>10557	Callee	fprintf
>10558	Identifier	fprintf
>10559	AssignmentExpr	 
>10560	PtrMemberAccess	ep -> next
>10561	Identifier	next
>10562	Identifier	ep
>10563	Identifier	ep
>10564	Condition	 
>10565	Identifier	ep
>10566	ForInit	 
>10567	AssignmentExpr	ep = b -> epairs
>10568	PtrMemberAccess	b -> epairs
>10569	Identifier	epairs
>10570	Identifier	b
>10571	Identifier	ep
>10572	Condition	 
>10573	PtrMemberAccess	b -> epairs
>10574	Identifier	epairs
>10575	Identifier	b
>10576	ExpressionStatement	 
>10577	CallExpression	fprintf ( f , \"{\nbrushDef\n{\n\" )
>10578	ArgumentList	f
>10579	Argument	\"{\nbrushDef\n{\n\"
>10580	PrimaryExpression	\"{\nbrushDef\n{\n\"
>10581	Argument	f
>10582	Identifier	f
>10583	Callee	fprintf
>10584	Identifier	fprintf
>10585	Condition	 
>10586	MemberAccess	g_qeglobals . m_bBrushPrimitMode
>10587	Identifier	m_bBrushPrimitMode
>10588	Identifier	g_qeglobals
>10589	IfStatement	if ( b -> pTerrain )
>10590	CompoundStatement	 
>10591	ReturnStatement	 
>10592	ExpressionStatement	 
>10593	CallExpression	Terrain_Write ( b -> pTerrain , f )
>10594	ArgumentList	b -> pTerrain
>10595	Argument	f
>10596	Identifier	f
>10597	Argument	b -> pTerrain
>10598	PtrMemberAccess	b -> pTerrain
>10599	Identifier	pTerrain
>10600	Identifier	b
>10601	Callee	Terrain_Write
>10602	Identifier	Terrain_Write
>10603	Condition	 
>10604	PtrMemberAccess	b -> pTerrain
>10605	Identifier	pTerrain
>10606	Identifier	b
>10607	IfStatement	if ( b -> patchBrush )
>10608	CompoundStatement	 
>10609	ReturnStatement	 
>10610	ExpressionStatement	 
>10611	CallExpression	Patch_Write ( b -> pPatch , f )
>10612	ArgumentList	b -> pPatch
>10613	Argument	f
>10614	Identifier	f
>10615	Argument	b -> pPatch
>10616	PtrMemberAccess	b -> pPatch
>10617	Identifier	pPatch
>10618	Identifier	b
>10619	Callee	Patch_Write
>10620	Identifier	Patch_Write
>10621	Condition	 
>10622	PtrMemberAccess	b -> patchBrush
>10623	Identifier	patchBrush
>10624	Identifier	b
>10625	IdentifierDeclStatement	 
>10626	IdentifierDecl	i
>10627	Identifier	i
>10628	IdentifierDeclType	int
>10629	IdentifierDeclStatement	 
>10630	IdentifierDecl	* pname
>10631	Identifier	pname
>10632	IdentifierDeclType	char *
>10633	IdentifierDeclStatement	 
>10634	IdentifierDecl	* fa
>10635	Identifier	fa
>10636	IdentifierDeclType	face_t *
>10637	IdentifierDeclStatement	 
>10638	IdentifierDecl	* ep
>10639	Identifier	ep
>10640	IdentifierDeclType	epair_t *
>10702	FunctionDef	QERApp_MapPrintf_MEMFILE (char * text)
>10703	ParameterList	char * text
>10704	Parameter	 
>10705	Identifier	text
>10706	ParameterType	char *
>10707	ReturnType	void WINAPI
>10708	CompoundStatement	 
>10709	ExpressionStatement	 
>10710	CallExpression	MemFile_fprintf ( g_pMemFile , buf )
>10711	ArgumentList	g_pMemFile
>10712	Argument	buf
>10713	Identifier	buf
>10714	Argument	g_pMemFile
>10715	Identifier	g_pMemFile
>10716	Callee	MemFile_fprintf
>10717	Identifier	MemFile_fprintf
>10718	ExpressionStatement	 
>10719	CallExpression	va_end ( argptr )
>10720	ArgumentList	argptr
>10721	Argument	argptr
>10722	Identifier	argptr
>10723	Callee	va_end
>10724	Identifier	va_end
>10725	ExpressionStatement	 
>10726	CallExpression	vsprintf ( buf , text , argptr )
>10727	ArgumentList	buf
>10728	Argument	argptr
>10729	Identifier	argptr
>10730	Argument	text
>10731	Identifier	text
>10732	Argument	buf
>10733	Identifier	buf
>10734	Callee	vsprintf
>10735	Identifier	vsprintf
>10736	ExpressionStatement	 
>10737	CallExpression	va_start ( argptr , text )
>10738	ArgumentList	argptr
>10739	Argument	text
>10740	Identifier	text
>10741	Argument	argptr
>10742	Identifier	argptr
>10743	Callee	va_start
>10744	Identifier	va_start
>10745	IdentifierDeclStatement	 
>10746	IdentifierDecl	buf [ 32768 ]
>10747	PrimaryExpression	32768
>10748	Identifier	buf
>10749	IdentifierDeclType	char [ 32768 ]
>10750	IdentifierDeclStatement	 
>10751	IdentifierDecl	argptr
>10752	Identifier	argptr
>10753	IdentifierDeclType	va_list
>10761	FunctionDef	Brush_Write (brush_t * b , CMemFile * pMemFile)
>10762	ParameterList	brush_t * b , CMemFile * pMemFile
>10763	Parameter	 
>10764	Identifier	pMemFile
>10765	ParameterType	CMemFile *
>10766	Parameter	 
>10767	Identifier	b
>10768	ParameterType	brush_t *
>10769	ReturnType	void
>10770	CompoundStatement	 
>10771	IfStatement	if ( g_qeglobals . m_bBrushPrimitMode )
>10772	ElseStatement	else
>10773	CompoundStatement	 
>10774	ExpressionStatement	 
>10775	CallExpression	MemFile_fprintf ( pMemFile , \"}\n\" )
>10776	ArgumentList	pMemFile
>10777	Argument	\"}\n\"
>10778	PrimaryExpression	\"}\n\"
>10779	Argument	pMemFile
>10780	Identifier	pMemFile
>10781	Callee	MemFile_fprintf
>10782	Identifier	MemFile_fprintf
>10783	ForStatement	for ( fa = b -> brush_faces ; fa ; fa = fa -> next )
>10784	CompoundStatement	 
>10785	ExpressionStatement	 
>10786	CallExpression	MemFile_fprintf ( pMemFile , \"\n\" )
>10787	ArgumentList	pMemFile
>10788	Argument	\"\n\"
>10789	PrimaryExpression	\"\n\"
>10790	Argument	pMemFile
>10791	Identifier	pMemFile
>10792	Callee	MemFile_fprintf
>10793	Identifier	MemFile_fprintf
>10794	IfStatement	if ( g_qeglobals . bSurfacePropertiesPlugin )
>10795	ElseStatement	else
>10796	CompoundStatement	 
>10797	ExpressionStatement	 
>10798	CallExpression	MemFile_fprintf ( pMemFile , \" %i %i %i\" , fa -> texdef . contents , fa -> texdef . flags , fa -> texdef . value )
>10799	ArgumentList	pMemFile
>10800	Argument	fa -> texdef . value
>10801	MemberAccess	fa -> texdef . value
>10802	Identifier	value
>10803	PtrMemberAccess	fa -> texdef
>10804	Identifier	texdef
>10805	Identifier	fa
>10806	Argument	fa -> texdef . flags
>10807	MemberAccess	fa -> texdef . flags
>10808	Identifier	flags
>10809	PtrMemberAccess	fa -> texdef
>10810	Identifier	texdef
>10811	Identifier	fa
>10812	Argument	fa -> texdef . contents
>10813	MemberAccess	fa -> texdef . contents
>10814	Identifier	contents
>10815	PtrMemberAccess	fa -> texdef
>10816	Identifier	texdef
>10817	Identifier	fa
>10818	Argument	\" %i %i %i\"
>10819	PrimaryExpression	\" %i %i %i\"
>10820	Argument	pMemFile
>10821	Identifier	pMemFile
>10822	Callee	MemFile_fprintf
>10823	Identifier	MemFile_fprintf
>10824	IfStatement	if ( fa -> texdef . scale [ 1 ] == ( int ) fa -> texdef . scale [ 1 ] )
>10825	ElseStatement	else
>10826	ExpressionStatement	 
>10827	CallExpression	MemFile_fprintf ( pMemFile , \"%f\" , ( float ) fa -> texdef . scale [ 1 ] )
>10828	ArgumentList	pMemFile
>10829	Argument	( float ) fa -> texdef . scale [ 1 ]
>10830	CastExpression	( float ) fa -> texdef . scale [ 1 ]
>10831	ArrayIndexing	fa -> texdef . scale [ 1 ]
>10832	PrimaryExpression	1
>10833	MemberAccess	fa -> texdef . scale
>10834	Identifier	scale
>10835	PtrMemberAccess	fa -> texdef
>10836	Identifier	texdef
>10837	Identifier	fa
>10838	CastTarget	float
>10839	Argument	\"%f\"
>10840	PrimaryExpression	\"%f\"
>10841	Argument	pMemFile
>10842	Identifier	pMemFile
>10843	Callee	MemFile_fprintf
>10844	Identifier	MemFile_fprintf
>10845	ExpressionStatement	 
>10846	CallExpression	MemFile_fprintf ( pMemFile , \"%i\" , ( int ) fa -> texdef . scale [ 1 ] )
>10847	ArgumentList	pMemFile
>10848	Argument	( int ) fa -> texdef . scale [ 1 ]
>10849	CastExpression	( int ) fa -> texdef . scale [ 1 ]
>10850	ArrayIndexing	fa -> texdef . scale [ 1 ]
>10851	PrimaryExpression	1
>10852	MemberAccess	fa -> texdef . scale
>10853	Identifier	scale
>10854	PtrMemberAccess	fa -> texdef
>10855	Identifier	texdef
>10856	Identifier	fa
>10857	CastTarget	int
>10858	Argument	\"%i\"
>10859	PrimaryExpression	\"%i\"
>10860	Argument	pMemFile
>10861	Identifier	pMemFile
>10862	Callee	MemFile_fprintf
>10863	Identifier	MemFile_fprintf
>10864	Condition	 
>10865	EqualityExpression	fa -> texdef . scale [ 1 ] == ( int ) fa -> texdef . scale [ 1 ]
>10866	CastExpression	( int ) fa -> texdef . scale [ 1 ]
>10867	ArrayIndexing	fa -> texdef . scale [ 1 ]
>10868	PrimaryExpression	1
>10869	MemberAccess	fa -> texdef . scale
>10870	Identifier	scale
>10871	PtrMemberAccess	fa -> texdef
>10872	Identifier	texdef
>10873	Identifier	fa
>10874	CastTarget	int
>10875	ArrayIndexing	fa -> texdef . scale [ 1 ]
>10876	PrimaryExpression	1
>10877	MemberAccess	fa -> texdef . scale
>10878	Identifier	scale
>10879	PtrMemberAccess	fa -> texdef
>10880	Identifier	texdef
>10881	Identifier	fa
>10882	IfStatement	if ( fa -> texdef . scale [ 0 ] == ( int ) fa -> texdef . scale [ 0 ] )
>10883	ElseStatement	else
>10884	ExpressionStatement	 
>10885	CallExpression	MemFile_fprintf ( pMemFile , \"%f \" , ( float ) fa -> texdef . scale [ 0 ] )
>10886	ArgumentList	pMemFile
>10887	Argument	( float ) fa -> texdef . scale [ 0 ]
>10888	CastExpression	( float ) fa -> texdef . scale [ 0 ]
>10889	ArrayIndexing	fa -> texdef . scale [ 0 ]
>10890	PrimaryExpression	0
>10891	MemberAccess	fa -> texdef . scale
>10892	Identifier	scale
>10893	PtrMemberAccess	fa -> texdef
>10894	Identifier	texdef
>10895	Identifier	fa
>10896	CastTarget	float
>10897	Argument	\"%f \"
>10898	PrimaryExpression	\"%f \"
>10899	Argument	pMemFile
>10900	Identifier	pMemFile
>10901	Callee	MemFile_fprintf
>10902	Identifier	MemFile_fprintf
>10903	ExpressionStatement	 
>10904	CallExpression	MemFile_fprintf ( pMemFile , \"%i \" , ( int ) fa -> texdef . scale [ 0 ] )
>10905	ArgumentList	pMemFile
>10906	Argument	( int ) fa -> texdef . scale [ 0 ]
>10907	CastExpression	( int ) fa -> texdef . scale [ 0 ]
>10908	ArrayIndexing	fa -> texdef . scale [ 0 ]
>10909	PrimaryExpression	0
>10910	MemberAccess	fa -> texdef . scale
>10911	Identifier	scale
>10912	PtrMemberAccess	fa -> texdef
>10913	Identifier	texdef
>10914	Identifier	fa
>10915	CastTarget	int
>10916	Argument	\"%i \"
>10917	PrimaryExpression	\"%i \"
>10918	Argument	pMemFile
>10919	Identifier	pMemFile
>10920	Callee	MemFile_fprintf
>10921	Identifier	MemFile_fprintf
>10922	Condition	 
>10923	EqualityExpression	fa -> texdef . scale [ 0 ] == ( int ) fa -> texdef . scale [ 0 ]
>10924	CastExpression	( int ) fa -> texdef . scale [ 0 ]
>10925	ArrayIndexing	fa -> texdef . scale [ 0 ]
>10926	PrimaryExpression	0
>10927	MemberAccess	fa -> texdef . scale
>10928	Identifier	scale
>10929	PtrMemberAccess	fa -> texdef
>10930	Identifier	texdef
>10931	Identifier	fa
>10932	CastTarget	int
>10933	ArrayIndexing	fa -> texdef . scale [ 0 ]
>10934	PrimaryExpression	0
>10935	MemberAccess	fa -> texdef . scale
>10936	Identifier	scale
>10937	PtrMemberAccess	fa -> texdef
>10938	Identifier	texdef
>10939	Identifier	fa
>10940	ExpressionStatement	 
>10941	CallExpression	MemFile_fprintf ( pMemFile , \"%s %i %i %i \" , pname , ( int ) fa -> texdef . shift [ 0 ] , ( int ) fa -> texdef \
>10942	ArgumentList	pMemFile
>10943	Argument	( int ) fa -> texdef . rotate
>10944	CastExpression	( int ) fa -> texdef . rotate
>10945	MemberAccess	fa -> texdef . rotate
>10946	Identifier	rotate
>10947	PtrMemberAccess	fa -> texdef
>10948	Identifier	texdef
>10949	Identifier	fa
>10950	CastTarget	int
>10951	Argument	( int ) fa -> texdef . shift [ 1 ]
>10952	CastExpression	( int ) fa -> texdef . shift [ 1 ]
>10953	ArrayIndexing	fa -> texdef . shift [ 1 ]
>10954	PrimaryExpression	1
>10955	MemberAccess	fa -> texdef . shift
>10956	Identifier	shift
>10957	PtrMemberAccess	fa -> texdef
>10958	Identifier	texdef
>10959	Identifier	fa
>10960	CastTarget	int
>10961	Argument	( int ) fa -> texdef . shift [ 0 ]
>10962	CastExpression	( int ) fa -> texdef . shift [ 0 ]
>10963	ArrayIndexing	fa -> texdef . shift [ 0 ]
>10964	PrimaryExpression	0
>10965	MemberAccess	fa -> texdef . shift
>10966	Identifier	shift
>10967	PtrMemberAccess	fa -> texdef
>10968	Identifier	texdef
>10969	Identifier	fa
>10970	CastTarget	int
>10971	Argument	pname
>10972	Identifier	pname
>10973	Argument	\"%s %i %i %i \"
>10974	PrimaryExpression	\"%s %i %i %i \"
>10975	Argument	pMemFile
>10976	Identifier	pMemFile
>10977	Callee	MemFile_fprintf
>10978	Identifier	MemFile_fprintf
>10979	IfStatement	if ( pname [ 0 ] == 0 )
>10980	ExpressionStatement	 
>10981	AssignmentExpr	pname = \"unnamed\"
>10982	PrimaryExpression	\"unnamed\"
>10983	Identifier	pname
>10984	Condition	 
>10985	EqualityExpression	pname [ 0 ] == 0
>10986	PrimaryExpression	0
>10987	ArrayIndexing	pname [ 0 ]
>10988	PrimaryExpression	0
>10989	Identifier	pname
>10990	ExpressionStatement	 
>10991	AssignmentExpr	pname = fa -> texdef . name
>10992	MemberAccess	fa -> texdef . name
>10993	Identifier	name
>10994	PtrMemberAccess	fa -> texdef
>10995	Identifier	texdef
>10996	Identifier	fa
>10997	Identifier	pname
>10998	CompoundStatement	 
>10999	IfStatement	if ( ! fa -> pData )
>11000	ElseStatement	else
>11001	ExpressionStatement	 
>11002	CallExpression	GETPLUGINTEXDEF ( fa ) -> WriteTexdef ( QERApp_MapPrintf_MEMFILE )
>11003	ArgumentList	QERApp_MapPrintf_MEMFILE
>11004	Argument	QERApp_MapPrintf_MEMFILE
>11005	Identifier	QERApp_MapPrintf_MEMFILE
>11006	Callee	GETPLUGINTEXDEF ( fa ) -> WriteTexdef
>11007	PtrMemberAccess	GETPLUGINTEXDEF ( fa ) -> WriteTexdef
>11008	Identifier	WriteTexdef
>11009	CallExpression	GETPLUGINTEXDEF ( fa )
>11010	ArgumentList	fa
>11011	Argument	fa
>11012	Identifier	fa
>11013	Callee	GETPLUGINTEXDEF
>11014	Identifier	GETPLUGINTEXDEF
>11015	ExpressionStatement	 
>11016	CallExpression	Sys_Printf ( \"ERROR
>11017	ArgumentList	\"ERROR
>11018	Argument	\"ERROR
>11019	PrimaryExpression	\"ERROR
>11020	Callee	Sys_Printf
>11021	Identifier	Sys_Printf
>11022	Condition	 
>11023	UnaryOp	! fa -> pData
>11024	PtrMemberAccess	fa -> pData
>11025	Identifier	pData
>11026	Identifier	fa
>11027	UnaryOperator	!
>11028	ExpressionStatement	 
>11029	AssignmentExpr	g_pMemFile = pMemFile
>11030	Identifier	pMemFile
>11031	Identifier	g_pMemFile
>11032	Condition	 
>11033	MemberAccess	g_qeglobals . bSurfacePropertiesPlugin
>11034	Identifier	bSurfacePropertiesPlugin
>11035	Identifier	g_qeglobals
>11036	ForStatement	for ( i = 0 ; i < 3 ; i ++ )
>11037	CompoundStatement	 
>11038	ExpressionStatement	 
>11039	CallExpression	MemFile_fprintf ( pMemFile , \") \" )
>11040	ArgumentList	pMemFile
>11041	Argument	\") \"
>11042	PrimaryExpression	\") \"
>11043	Argument	pMemFile
>11044	Identifier	pMemFile
>11045	Callee	MemFile_fprintf
>11046	Identifier	MemFile_fprintf
>11047	ForStatement	for ( int j = 0 ; j < 3 ; j ++ )
>11048	CompoundStatement	 
>11049	IfStatement	if ( fa -> planepts [ i ] [ j ] == static_cast < int > ( fa -> planepts [ i ] [ j ] ) )
>11050	ElseStatement	else
>11051	ExpressionStatement	 
>11052	CallExpression	MemFile_fprintf ( pMemFile , \"%f \" , fa -> planepts [ i ] [ j ] )
>11053	ArgumentList	pMemFile
>11054	Argument	fa -> planepts [ i ] [ j ]
>11055	ArrayIndexing	fa -> planepts [ i ] [ j ]
>11056	Identifier	j
>11057	ArrayIndexing	fa -> planepts [ i ]
>11058	Identifier	i
>11059	PtrMemberAccess	fa -> planepts
>11060	Identifier	planepts
>11061	Identifier	fa
>11062	Argument	\"%f \"
>11063	PrimaryExpression	\"%f \"
>11064	Argument	pMemFile
>11065	Identifier	pMemFile
>11066	Callee	MemFile_fprintf
>11067	Identifier	MemFile_fprintf
>11068	ExpressionStatement	 
>11069	CallExpression	MemFile_fprintf ( pMemFile , \"%i \" , static_cast < int > ( fa -> planepts [ i ] [ j ] ) )
>11070	ArgumentList	pMemFile
>11071	Argument	static_cast < int > ( fa -> planepts [ i ] [ j ] )
>11072	RelationalExpression	static_cast < int > ( fa -> planepts [ i ] [ j ] )
>11073	RelationalExpression	int > ( fa -> planepts [ i ] [ j ] )
>11074	ArrayIndexing	fa -> planepts [ i ] [ j ]
>11075	Identifier	j
>11076	ArrayIndexing	fa -> planepts [ i ]
>11077	Identifier	i
>11078	PtrMemberAccess	fa -> planepts
>11079	Identifier	planepts
>11080	Identifier	fa
>11081	Identifier	int
>11082	Identifier	static_cast
>11083	Argument	\"%i \"
>11084	PrimaryExpression	\"%i \"
>11085	Argument	pMemFile
>11086	Identifier	pMemFile
>11087	Callee	MemFile_fprintf
>11088	Identifier	MemFile_fprintf
>11089	Condition	 
>11090	EqualityExpression	fa -> planepts [ i ] [ j ] == static_cast < int > ( fa -> planepts [ i ] [ j ] )
>11091	RelationalExpression	static_cast < int > ( fa -> planepts [ i ] [ j ] )
>11092	RelationalExpression	int > ( fa -> planepts [ i ] [ j ] )
>11093	ArrayIndexing	fa -> planepts [ i ] [ j ]
>11094	Identifier	j
>11095	ArrayIndexing	fa -> planepts [ i ]
>11096	Identifier	i
>11097	PtrMemberAccess	fa -> planepts
>11098	Identifier	planepts
>11099	Identifier	fa
>11100	Identifier	int
>11101	Identifier	static_cast
>11102	ArrayIndexing	fa -> planepts [ i ] [ j ]
>11103	Identifier	j
>11104	ArrayIndexing	fa -> planepts [ i ]
>11105	Identifier	i
>11106	PtrMemberAccess	fa -> planepts
>11107	Identifier	planepts
>11108	Identifier	fa
>11109	IncDecOp	 
>11110	IncDec	++
>11111	Identifier	j
>11112	Condition	 
>11113	RelationalExpression	j < 3
>11114	PrimaryExpression	3
>11115	Identifier	j
>11116	ForInit	 
>11117	IdentifierDeclStatement	int j = 0 ;
>11118	IdentifierDecl	j = 0
>11119	AssignmentExpr	j = 0
>11120	PrimaryExpression	0
>11121	Identifier	j
>11122	Identifier	j
>11123	IdentifierDeclType	int
>11124	ExpressionStatement	 
>11125	CallExpression	MemFile_fprintf ( pMemFile , \"( \" )
>11126	ArgumentList	pMemFile
>11127	Argument	\"( \"
>11128	PrimaryExpression	\"( \"
>11129	Argument	pMemFile
>11130	Identifier	pMemFile
>11131	Callee	MemFile_fprintf
>11132	Identifier	MemFile_fprintf
>11133	IncDecOp	 
>11134	IncDec	++
>11135	Identifier	i
>11136	Condition	 
>11137	RelationalExpression	i < 3
>11138	PrimaryExpression	3
>11139	Identifier	i
>11140	ForInit	 
>11141	AssignmentExpr	i = 0
>11142	PrimaryExpression	0
>11143	Identifier	i
>11144	AssignmentExpr	 
>11145	PtrMemberAccess	fa -> next
>11146	Identifier	next
>11147	Identifier	fa
>11148	Identifier	fa
>11149	Condition	 
>11150	Identifier	fa
>11151	ForInit	 
>11152	AssignmentExpr	fa = b -> brush_faces
>11153	PtrMemberAccess	b -> brush_faces
>11154	Identifier	brush_faces
>11155	Identifier	b
>11156	Identifier	fa
>11157	ExpressionStatement	 
>11158	CallExpression	MemFile_fprintf ( pMemFile , \"{\n\" )
>11159	ArgumentList	pMemFile
>11160	Argument	\"{\n\"
>11161	PrimaryExpression	\"{\n\"
>11162	Argument	pMemFile
>11163	Identifier	pMemFile
>11164	Callee	MemFile_fprintf
>11165	Identifier	MemFile_fprintf
>11166	CompoundStatement	 
>11167	ExpressionStatement	 
>11168	CallExpression	MemFile_fprintf ( pMemFile , \"}\n}\n\" )
>11169	ArgumentList	pMemFile
>11170	Argument	\"}\n}\n\"
>11171	PrimaryExpression	\"}\n}\n\"
>11172	Argument	pMemFile
>11173	Identifier	pMemFile
>11174	Callee	MemFile_fprintf
>11175	Identifier	MemFile_fprintf
>11176	ForStatement	for ( fa = b -> brush_faces ; fa ; fa = fa -> next )
>11177	CompoundStatement	 
>11178	ExpressionStatement	 
>11179	CallExpression	MemFile_fprintf ( pMemFile , \"%i %i %i\n\" , fa -> texdef . contents , fa -> texdef . flags , fa -> texdef . value )
>11180	ArgumentList	pMemFile
>11181	Argument	fa -> texdef . value
>11182	MemberAccess	fa -> texdef . value
>11183	Identifier	value
>11184	PtrMemberAccess	fa -> texdef
>11185	Identifier	texdef
>11186	Identifier	fa
>11187	Argument	fa -> texdef . flags
>11188	MemberAccess	fa -> texdef . flags
>11189	Identifier	flags
>11190	PtrMemberAccess	fa -> texdef
>11191	Identifier	texdef
>11192	Identifier	fa
>11193	Argument	fa -> texdef . contents
>11194	MemberAccess	fa -> texdef . contents
>11195	Identifier	contents
>11196	PtrMemberAccess	fa -> texdef
>11197	Identifier	texdef
>11198	Identifier	fa
>11199	Argument	\"%i %i %i\n\"
>11200	PrimaryExpression	\"%i %i %i\n\"
>11201	Argument	pMemFile
>11202	Identifier	pMemFile
>11203	Callee	MemFile_fprintf
>11204	Identifier	MemFile_fprintf
>11205	ExpressionStatement	 
>11206	CallExpression	MemFile_fprintf ( pMemFile , \"%s \" , pName )
>11207	ArgumentList	pMemFile
>11208	Argument	pName
>11209	Identifier	pName
>11210	Argument	\"%s \"
>11211	PrimaryExpression	\"%s \"
>11212	Argument	pMemFile
>11213	Identifier	pMemFile
>11214	Callee	MemFile_fprintf
>11215	Identifier	MemFile_fprintf
>11216	IdentifierDeclStatement	 
>11217	IdentifierDecl	* pName = strlen ( fa -> texdef . name ) > 0 ? fa -> texdef . name 
>11218	AssignmentExpr	* pName = strlen ( fa -> texdef . name ) > 0 ? fa -> texdef . name 
>11219	ConditionalExpression	strlen ( fa -> texdef . name ) > 0 ? fa -> texdef . name 
>11220	PrimaryExpression	\"unnamed\"
>11221	MemberAccess	fa -> texdef . name
>11222	Identifier	name
>11223	PtrMemberAccess	fa -> texdef
>11224	Identifier	texdef
>11225	Identifier	fa
>11226	Condition	strlen ( fa -> texdef . name ) > 0
>11227	RelationalExpression	strlen ( fa -> texdef . name ) > 0
>11228	PrimaryExpression	0
>11229	CallExpression	strlen ( fa -> texdef . name )
>11230	ArgumentList	fa -> texdef . name
>11231	Argument	fa -> texdef . name
>11232	MemberAccess	fa -> texdef . name
>11233	Identifier	name
>11234	PtrMemberAccess	fa -> texdef
>11235	Identifier	texdef
>11236	Identifier	fa
>11237	Callee	strlen
>11238	Identifier	strlen
>11239	Identifier	pName
>11240	Identifier	pName
>11241	IdentifierDeclType	char *
>11242	ExpressionStatement	 
>11243	CallExpression	MemFile_fprintf ( pMemFile , \") ) \" )
>11244	ArgumentList	pMemFile
>11245	Argument	\") ) \"
>11246	PrimaryExpression	\") ) \"
>11247	Argument	pMemFile
>11248	Identifier	pMemFile
>11249	Callee	MemFile_fprintf
>11250	Identifier	MemFile_fprintf
>11251	ForStatement	for ( i = 0 ; i < 3 ; i ++ )
>11252	IfStatement	if ( fa -> brushprimit_texdef . coords [ 1 ] [ i ] == static_cast < int > ( fa -> brushprimit_texdef . coords [ \
>11253	ElseStatement	else
>11254	ExpressionStatement	 
>11255	CallExpression	MemFile_fprintf ( pMemFile , \"%f \" , fa -> brushprimit_texdef . coords [ 1 ] [ i ] )
>11256	ArgumentList	pMemFile
>11257	Argument	fa -> brushprimit_texdef . coords [ 1 ] [ i ]
>11258	ArrayIndexing	fa -> brushprimit_texdef . coords [ 1 ] [ i ]
>11259	Identifier	i
>11260	ArrayIndexing	fa -> brushprimit_texdef . coords [ 1 ]
>11261	PrimaryExpression	1
>11262	MemberAccess	fa -> brushprimit_texdef . coords
>11263	Identifier	coords
>11264	PtrMemberAccess	fa -> brushprimit_texdef
>11265	Identifier	brushprimit_texdef
>11266	Identifier	fa
>11267	Argument	\"%f \"
>11268	PrimaryExpression	\"%f \"
>11269	Argument	pMemFile
>11270	Identifier	pMemFile
>11271	Callee	MemFile_fprintf
>11272	Identifier	MemFile_fprintf
>11273	ExpressionStatement	 
>11274	CallExpression	MemFile_fprintf ( pMemFile , \"%i \" , static_cast < int > ( fa -> brushprimit_texdef . coords [ 1 ] [ i ] ) )
>11275	ArgumentList	pMemFile
>11276	Argument	static_cast < int > ( fa -> brushprimit_texdef . coords [ 1 ] [ i ] )
>11277	RelationalExpression	static_cast < int > ( fa -> brushprimit_texdef . coords [ 1 ] [ i ] )
>11278	RelationalExpression	int > ( fa -> brushprimit_texdef . coords [ 1 ] [ i ] )
>11279	ArrayIndexing	fa -> brushprimit_texdef . coords [ 1 ] [ i ]
>11280	Identifier	i
>11281	ArrayIndexing	fa -> brushprimit_texdef . coords [ 1 ]
>11282	PrimaryExpression	1
>11283	MemberAccess	fa -> brushprimit_texdef . coords
>11284	Identifier	coords
>11285	PtrMemberAccess	fa -> brushprimit_texdef
>11286	Identifier	brushprimit_texdef
>11287	Identifier	fa
>11288	Identifier	int
>11289	Identifier	static_cast
>11290	Argument	\"%i \"
>11291	PrimaryExpression	\"%i \"
>11292	Argument	pMemFile
>11293	Identifier	pMemFile
>11294	Callee	MemFile_fprintf
>11295	Identifier	MemFile_fprintf
>11296	Condition	 
>11297	EqualityExpression	fa -> brushprimit_texdef . coords [ 1 ] [ i ] == static_cast < int > ( fa -> brushprimit_texdef . coords [ \
>11298	RelationalExpression	static_cast < int > ( fa -> brushprimit_texdef . coords [ 1 ] [ i ] )
>11299	RelationalExpression	int > ( fa -> brushprimit_texdef . coords [ 1 ] [ i ] )
>11300	ArrayIndexing	fa -> brushprimit_texdef . coords [ 1 ] [ i ]
>11301	Identifier	i
>11302	ArrayIndexing	fa -> brushprimit_texdef . coords [ 1 ]
>11303	PrimaryExpression	1
>11304	MemberAccess	fa -> brushprimit_texdef . coords
>11305	Identifier	coords
>11306	PtrMemberAccess	fa -> brushprimit_texdef
>11307	Identifier	brushprimit_texdef
>11308	Identifier	fa
>11309	Identifier	int
>11310	Identifier	static_cast
>11311	ArrayIndexing	fa -> brushprimit_texdef . coords [ 1 ] [ i ]
>11312	Identifier	i
>11313	ArrayIndexing	fa -> brushprimit_texdef . coords [ 1 ]
>11314	PrimaryExpression	1
>11315	MemberAccess	fa -> brushprimit_texdef . coords
>11316	Identifier	coords
>11317	PtrMemberAccess	fa -> brushprimit_texdef
>11318	Identifier	brushprimit_texdef
>11319	Identifier	fa
>11320	IncDecOp	 
>11321	IncDec	++
>11322	Identifier	i
>11323	Condition	 
>11324	RelationalExpression	i < 3
>11325	PrimaryExpression	3
>11326	Identifier	i
>11327	ForInit	 
>11328	AssignmentExpr	i = 0
>11329	PrimaryExpression	0
>11330	Identifier	i
>11331	ExpressionStatement	 
>11332	CallExpression	MemFile_fprintf ( pMemFile , \") ( \" )
>11333	ArgumentList	pMemFile
>11334	Argument	\") ( \"
>11335	PrimaryExpression	\") ( \"
>11336	Argument	pMemFile
>11337	Identifier	pMemFile
>11338	Callee	MemFile_fprintf
>11339	Identifier	MemFile_fprintf
>11340	ForStatement	for ( i = 0 ; i < 3 ; i ++ )
>11341	IfStatement	if ( fa -> brushprimit_texdef . coords [ 0 ] [ i ] == static_cast < int > ( fa -> brushprimit_texdef . coords [ \
>11342	ElseStatement	else
>11343	ExpressionStatement	 
>11344	CallExpression	MemFile_fprintf ( pMemFile , \"%f \" , fa -> brushprimit_texdef . coords [ 0 ] [ i ] )
>11345	ArgumentList	pMemFile
>11346	Argument	fa -> brushprimit_texdef . coords [ 0 ] [ i ]
>11347	ArrayIndexing	fa -> brushprimit_texdef . coords [ 0 ] [ i ]
>11348	Identifier	i
>11349	ArrayIndexing	fa -> brushprimit_texdef . coords [ 0 ]
>11350	PrimaryExpression	0
>11351	MemberAccess	fa -> brushprimit_texdef . coords
>11352	Identifier	coords
>11353	PtrMemberAccess	fa -> brushprimit_texdef
>11354	Identifier	brushprimit_texdef
>11355	Identifier	fa
>11356	Argument	\"%f \"
>11357	PrimaryExpression	\"%f \"
>11358	Argument	pMemFile
>11359	Identifier	pMemFile
>11360	Callee	MemFile_fprintf
>11361	Identifier	MemFile_fprintf
>11362	ExpressionStatement	 
>11363	CallExpression	MemFile_fprintf ( pMemFile , \"%i \" , static_cast < int > ( fa -> brushprimit_texdef . coords [ 0 ] [ i ] ) )
>11364	ArgumentList	pMemFile
>11365	Argument	static_cast < int > ( fa -> brushprimit_texdef . coords [ 0 ] [ i ] )
>11366	RelationalExpression	static_cast < int > ( fa -> brushprimit_texdef . coords [ 0 ] [ i ] )
>11367	RelationalExpression	int > ( fa -> brushprimit_texdef . coords [ 0 ] [ i ] )
>11368	ArrayIndexing	fa -> brushprimit_texdef . coords [ 0 ] [ i ]
>11369	Identifier	i
>11370	ArrayIndexing	fa -> brushprimit_texdef . coords [ 0 ]
>11371	PrimaryExpression	0
>11372	MemberAccess	fa -> brushprimit_texdef . coords
>11373	Identifier	coords
>11374	PtrMemberAccess	fa -> brushprimit_texdef
>11375	Identifier	brushprimit_texdef
>11376	Identifier	fa
>11377	Identifier	int
>11378	Identifier	static_cast
>11379	Argument	\"%i \"
>11380	PrimaryExpression	\"%i \"
>11381	Argument	pMemFile
>11382	Identifier	pMemFile
>11383	Callee	MemFile_fprintf
>11384	Identifier	MemFile_fprintf
>11385	Condition	 
>11386	EqualityExpression	fa -> brushprimit_texdef . coords [ 0 ] [ i ] == static_cast < int > ( fa -> brushprimit_texdef . coords [ \
>11387	RelationalExpression	static_cast < int > ( fa -> brushprimit_texdef . coords [ 0 ] [ i ] )
>11388	RelationalExpression	int > ( fa -> brushprimit_texdef . coords [ 0 ] [ i ] )
>11389	ArrayIndexing	fa -> brushprimit_texdef . coords [ 0 ] [ i ]
>11390	Identifier	i
>11391	ArrayIndexing	fa -> brushprimit_texdef . coords [ 0 ]
>11392	PrimaryExpression	0
>11393	MemberAccess	fa -> brushprimit_texdef . coords
>11394	Identifier	coords
>11395	PtrMemberAccess	fa -> brushprimit_texdef
>11396	Identifier	brushprimit_texdef
>11397	Identifier	fa
>11398	Identifier	int
>11399	Identifier	static_cast
>11400	ArrayIndexing	fa -> brushprimit_texdef . coords [ 0 ] [ i ]
>11401	Identifier	i
>11402	ArrayIndexing	fa -> brushprimit_texdef . coords [ 0 ]
>11403	PrimaryExpression	0
>11404	MemberAccess	fa -> brushprimit_texdef . coords
>11405	Identifier	coords
>11406	PtrMemberAccess	fa -> brushprimit_texdef
>11407	Identifier	brushprimit_texdef
>11408	Identifier	fa
>11409	IncDecOp	 
>11410	IncDec	++
>11411	Identifier	i
>11412	Condition	 
>11413	RelationalExpression	i < 3
>11414	PrimaryExpression	3
>11415	Identifier	i
>11416	ForInit	 
>11417	AssignmentExpr	i = 0
>11418	PrimaryExpression	0
>11419	Identifier	i
>11420	ExpressionStatement	 
>11421	CallExpression	MemFile_fprintf ( pMemFile , \"( ( \" )
>11422	ArgumentList	pMemFile
>11423	Argument	\"( ( \"
>11424	PrimaryExpression	\"( ( \"
>11425	Argument	pMemFile
>11426	Identifier	pMemFile
>11427	Callee	MemFile_fprintf
>11428	Identifier	MemFile_fprintf
>11429	ForStatement	for ( i = 0 ; i < 3 ; i ++ )
>11430	CompoundStatement	 
>11431	ExpressionStatement	 
>11432	CallExpression	MemFile_fprintf ( pMemFile , \") \" )
>11433	ArgumentList	pMemFile
>11434	Argument	\") \"
>11435	PrimaryExpression	\") \"
>11436	Argument	pMemFile
>11437	Identifier	pMemFile
>11438	Callee	MemFile_fprintf
>11439	Identifier	MemFile_fprintf
>11440	ForStatement	for ( int j = 0 ; j < 3 ; j ++ )
>11441	IfStatement	if ( fa -> planepts [ i ] [ j ] == static_cast < int > ( fa -> planepts [ i ] [ j ] ) )
>11442	ElseStatement	else
>11443	ExpressionStatement	 
>11444	CallExpression	MemFile_fprintf ( pMemFile , \"%f \" , fa -> planepts [ i ] [ j ] )
>11445	ArgumentList	pMemFile
>11446	Argument	fa -> planepts [ i ] [ j ]
>11447	ArrayIndexing	fa -> planepts [ i ] [ j ]
>11448	Identifier	j
>11449	ArrayIndexing	fa -> planepts [ i ]
>11450	Identifier	i
>11451	PtrMemberAccess	fa -> planepts
>11452	Identifier	planepts
>11453	Identifier	fa
>11454	Argument	\"%f \"
>11455	PrimaryExpression	\"%f \"
>11456	Argument	pMemFile
>11457	Identifier	pMemFile
>11458	Callee	MemFile_fprintf
>11459	Identifier	MemFile_fprintf
>11460	ExpressionStatement	 
>11461	CallExpression	MemFile_fprintf ( pMemFile , \"%i \" , static_cast < int > ( fa -> planepts [ i ] [ j ] ) )
>11462	ArgumentList	pMemFile
>11463	Argument	static_cast < int > ( fa -> planepts [ i ] [ j ] )
>11464	RelationalExpression	static_cast < int > ( fa -> planepts [ i ] [ j ] )
>11465	RelationalExpression	int > ( fa -> planepts [ i ] [ j ] )
>11466	ArrayIndexing	fa -> planepts [ i ] [ j ]
>11467	Identifier	j
>11468	ArrayIndexing	fa -> planepts [ i ]
>11469	Identifier	i
>11470	PtrMemberAccess	fa -> planepts
>11471	Identifier	planepts
>11472	Identifier	fa
>11473	Identifier	int
>11474	Identifier	static_cast
>11475	Argument	\"%i \"
>11476	PrimaryExpression	\"%i \"
>11477	Argument	pMemFile
>11478	Identifier	pMemFile
>11479	Callee	MemFile_fprintf
>11480	Identifier	MemFile_fprintf
>11481	Condition	 
>11482	EqualityExpression	fa -> planepts [ i ] [ j ] == static_cast < int > ( fa -> planepts [ i ] [ j ] )
>11483	RelationalExpression	static_cast < int > ( fa -> planepts [ i ] [ j ] )
>11484	RelationalExpression	int > ( fa -> planepts [ i ] [ j ] )
>11485	ArrayIndexing	fa -> planepts [ i ] [ j ]
>11486	Identifier	j
>11487	ArrayIndexing	fa -> planepts [ i ]
>11488	Identifier	i
>11489	PtrMemberAccess	fa -> planepts
>11490	Identifier	planepts
>11491	Identifier	fa
>11492	Identifier	int
>11493	Identifier	static_cast
>11494	ArrayIndexing	fa -> planepts [ i ] [ j ]
>11495	Identifier	j
>11496	ArrayIndexing	fa -> planepts [ i ]
>11497	Identifier	i
>11498	PtrMemberAccess	fa -> planepts
>11499	Identifier	planepts
>11500	Identifier	fa
>11501	IncDecOp	 
>11502	IncDec	++
>11503	Identifier	j
>11504	Condition	 
>11505	RelationalExpression	j < 3
>11506	PrimaryExpression	3
>11507	Identifier	j
>11508	ForInit	 
>11509	IdentifierDeclStatement	int j = 0 ;
>11510	IdentifierDecl	j = 0
>11511	AssignmentExpr	j = 0
>11512	PrimaryExpression	0
>11513	Identifier	j
>11514	Identifier	j
>11515	IdentifierDeclType	int
>11516	ExpressionStatement	 
>11517	CallExpression	MemFile_fprintf ( pMemFile , \"( \" )
>11518	ArgumentList	pMemFile
>11519	Argument	\"( \"
>11520	PrimaryExpression	\"( \"
>11521	Argument	pMemFile
>11522	Identifier	pMemFile
>11523	Callee	MemFile_fprintf
>11524	Identifier	MemFile_fprintf
>11525	IncDecOp	 
>11526	IncDec	++
>11527	Identifier	i
>11528	Condition	 
>11529	RelationalExpression	i < 3
>11530	PrimaryExpression	3
>11531	Identifier	i
>11532	ForInit	 
>11533	AssignmentExpr	i = 0
>11534	PrimaryExpression	0
>11535	Identifier	i
>11536	AssignmentExpr	 
>11537	PtrMemberAccess	fa -> next
>11538	Identifier	next
>11539	Identifier	fa
>11540	Identifier	fa
>11541	Condition	 
>11542	Identifier	fa
>11543	ForInit	 
>11544	AssignmentExpr	fa = b -> brush_faces
>11545	PtrMemberAccess	b -> brush_faces
>11546	Identifier	brush_faces
>11547	Identifier	b
>11548	Identifier	fa
>11549	IfStatement	if ( b -> epairs )
>11550	ForStatement	for ( ep = b -> epairs ; ep ; ep = ep -> next )
>11551	ExpressionStatement	 
>11552	CallExpression	MemFile_fprintf ( pMemFile , \"\\"%s\\" \\"%s\\"\n\" , ep -> key , ep -> value )
>11553	ArgumentList	pMemFile
>11554	Argument	ep -> value
>11555	PtrMemberAccess	ep -> value
>11556	Identifier	value
>11557	Identifier	ep
>11558	Argument	ep -> key
>11559	PtrMemberAccess	ep -> key
>11560	Identifier	key
>11561	Identifier	ep
>11562	Argument	\"\\"%s\\" \\"%s\\"\n\"
>11563	PrimaryExpression	\"\\"%s\\" \\"%s\\"\n\"
>11564	Argument	pMemFile
>11565	Identifier	pMemFile
>11566	Callee	MemFile_fprintf
>11567	Identifier	MemFile_fprintf
>11568	AssignmentExpr	 
>11569	PtrMemberAccess	ep -> next
>11570	Identifier	next
>11571	Identifier	ep
>11572	Identifier	ep
>11573	Condition	 
>11574	Identifier	ep
>11575	ForInit	 
>11576	AssignmentExpr	ep = b -> epairs
>11577	PtrMemberAccess	b -> epairs
>11578	Identifier	epairs
>11579	Identifier	b
>11580	Identifier	ep
>11581	Condition	 
>11582	PtrMemberAccess	b -> epairs
>11583	Identifier	epairs
>11584	Identifier	b
>11585	ExpressionStatement	 
>11586	CallExpression	MemFile_fprintf ( pMemFile , \"{\nBrushDef\n{\n\" )
>11587	ArgumentList	pMemFile
>11588	Argument	\"{\nBrushDef\n{\n\"
>11589	PrimaryExpression	\"{\nBrushDef\n{\n\"
>11590	Argument	pMemFile
>11591	Identifier	pMemFile
>11592	Callee	MemFile_fprintf
>11593	Identifier	MemFile_fprintf
>11594	Condition	 
>11595	MemberAccess	g_qeglobals . m_bBrushPrimitMode
>11596	Identifier	m_bBrushPrimitMode
>11597	Identifier	g_qeglobals
>11598	IfStatement	if ( g_qeglobals . bSurfacePropertiesPlugin )
>11599	CompoundStatement	 
>11600	ExpressionStatement	 
>11601	CallExpression	Sys_Printf ( \"WARNING
>11602	ArgumentList	\"WARNING
>11603	Argument	\"WARNING
>11604	PrimaryExpression	\"WARNING
>11605	Callee	Sys_Printf
>11606	Identifier	Sys_Printf
>11607	Condition	 
>11608	MemberAccess	g_qeglobals . bSurfacePropertiesPlugin
>11609	Identifier	bSurfacePropertiesPlugin
>11610	Identifier	g_qeglobals
>11611	IfStatement	if ( b -> terrainBrush )
>11612	CompoundStatement	 
>11613	ReturnStatement	 
>11614	ExpressionStatement	 
>11615	CallExpression	Terrain_Write ( b -> pTerrain , pMemFile )
>11616	ArgumentList	b -> pTerrain
>11617	Argument	pMemFile
>11618	Identifier	pMemFile
>11619	Argument	b -> pTerrain
>11620	PtrMemberAccess	b -> pTerrain
>11621	Identifier	pTerrain
>11622	Identifier	b
>11623	Callee	Terrain_Write
>11624	Identifier	Terrain_Write
>11625	Condition	 
>11626	PtrMemberAccess	b -> terrainBrush
>11627	Identifier	terrainBrush
>11628	Identifier	b
>11629	IfStatement	if ( b -> patchBrush )
>11630	CompoundStatement	 
>11631	ReturnStatement	 
>11632	ExpressionStatement	 
>11633	CallExpression	Patch_Write ( b -> pPatch , pMemFile )
>11634	ArgumentList	b -> pPatch
>11635	Argument	pMemFile
>11636	Identifier	pMemFile
>11637	Argument	b -> pPatch
>11638	PtrMemberAccess	b -> pPatch
>11639	Identifier	pPatch
>11640	Identifier	b
>11641	Callee	Patch_Write
>11642	Identifier	Patch_Write
>11643	Condition	 
>11644	PtrMemberAccess	b -> patchBrush
>11645	Identifier	patchBrush
>11646	Identifier	b
>11647	IdentifierDeclStatement	 
>11648	IdentifierDecl	i
>11649	Identifier	i
>11650	IdentifierDeclType	int
>11651	IdentifierDeclStatement	 
>11652	IdentifierDecl	* pname
>11653	Identifier	pname
>11654	IdentifierDeclType	char *
>11655	IdentifierDeclStatement	 
>11656	IdentifierDecl	* fa
>11657	Identifier	fa
>11658	IdentifierDeclType	face_t *
>11659	IdentifierDeclStatement	 
>11660	IdentifierDecl	* ep
>11661	Identifier	ep
>11662	IdentifierDeclType	epair_t *
>11723	FunctionDef	Brush_Create (vec3_t mins , vec3_t maxs , texdef_t * texdef)
>11724	ParameterList	vec3_t mins , vec3_t maxs , texdef_t * texdef
>11725	Parameter	 
>11726	Identifier	texdef
>11727	ParameterType	texdef_t *
>11728	Parameter	 
>11729	Identifier	maxs
>11730	ParameterType	vec3_t
>11731	Parameter	 
>11732	Identifier	mins
>11733	ParameterType	vec3_t
>11734	ReturnType	brush_t *
>11735	CompoundStatement	 
>11736	ReturnStatement	 
>11737	Identifier	b
>11738	ExpressionStatement	 
>11739	CallExpression	VectorCopy ( pts [ 0 ] [ 0 ] , f -> planepts [ 2 ] )
>11740	ArgumentList	pts [ 0 ] [ 0 ]
>11741	Argument	f -> planepts [ 2 ]
>11742	ArrayIndexing	f -> planepts [ 2 ]
>11743	PrimaryExpression	2
>11744	PtrMemberAccess	f -> planepts
>11745	Identifier	planepts
>11746	Identifier	f
>11747	Argument	pts [ 0 ] [ 0 ]
>11748	ArrayIndexing	pts [ 0 ] [ 0 ]
>11749	PrimaryExpression	0
>11750	ArrayIndexing	pts [ 0 ]
>11751	PrimaryExpression	0
>11752	Identifier	pts
>11753	Callee	VectorCopy
>11754	Identifier	VectorCopy
>11755	ExpressionStatement	 
>11756	CallExpression	VectorCopy ( pts [ 1 ] [ 0 ] , f -> planepts [ 1 ] )
>11757	ArgumentList	pts [ 1 ] [ 0 ]
>11758	Argument	f -> planepts [ 1 ]
>11759	ArrayIndexing	f -> planepts [ 1 ]
>11760	PrimaryExpression	1
>11761	PtrMemberAccess	f -> planepts
>11762	Identifier	planepts
>11763	Identifier	f
>11764	Argument	pts [ 1 ] [ 0 ]
>11765	ArrayIndexing	pts [ 1 ] [ 0 ]
>11766	PrimaryExpression	0
>11767	ArrayIndexing	pts [ 1 ]
>11768	PrimaryExpression	1
>11769	Identifier	pts
>11770	Callee	VectorCopy
>11771	Identifier	VectorCopy
>11772	ExpressionStatement	 
>11773	CallExpression	VectorCopy ( pts [ 2 ] [ 0 ] , f -> planepts [ 0 ] )
>11774	ArgumentList	pts [ 2 ] [ 0 ]
>11775	Argument	f -> planepts [ 0 ]
>11776	ArrayIndexing	f -> planepts [ 0 ]
>11777	PrimaryExpression	0
>11778	PtrMemberAccess	f -> planepts
>11779	Identifier	planepts
>11780	Identifier	f
>11781	Argument	pts [ 2 ] [ 0 ]
>11782	ArrayIndexing	pts [ 2 ] [ 0 ]
>11783	PrimaryExpression	0
>11784	ArrayIndexing	pts [ 2 ]
>11785	PrimaryExpression	2
>11786	Identifier	pts
>11787	Callee	VectorCopy
>11788	Identifier	VectorCopy
>11789	ExpressionStatement	 
>11790	AssignmentExpr	b -> brush_faces = f
>11791	Identifier	f
>11792	PtrMemberAccess	b -> brush_faces
>11793	Identifier	brush_faces
>11794	Identifier	b
>11795	ExpressionStatement	 
>11796	AssignmentExpr	f -> next = b -> brush_faces
>11797	PtrMemberAccess	b -> brush_faces
>11798	Identifier	brush_faces
>11799	Identifier	b
>11800	PtrMemberAccess	f -> next
>11801	Identifier	next
>11802	Identifier	f
>11803	ExpressionStatement	 
>11804	AssignmentExpr	f -> texdef . contents &= ~CONTENTS_KEEP
>11805	Identifier	~CONTENTS_KEEP
>11806	MemberAccess	f -> texdef . contents
>11807	Identifier	contents
>11808	PtrMemberAccess	f -> texdef
>11809	Identifier	texdef
>11810	Identifier	f
>11811	ExpressionStatement	 
>11812	AssignmentExpr	f -> texdef . flags &= ~SURF_KEEP
>11813	Identifier	~SURF_KEEP
>11814	MemberAccess	f -> texdef . flags
>11815	Identifier	flags
>11816	PtrMemberAccess	f -> texdef
>11817	Identifier	texdef
>11818	Identifier	f
>11819	ExpressionStatement	 
>11820	AssignmentExpr	f -> texdef = * texdef
>11821	UnaryOp	* texdef
>11822	Identifier	texdef
>11823	UnaryOperator	*
>11824	PtrMemberAccess	f -> texdef
>11825	Identifier	texdef
>11826	Identifier	f
>11827	ExpressionStatement	 
>11828	AssignmentExpr	f = Face_Alloc ( )
>11829	CallExpression	Face_Alloc ( )
>11830	ArgumentList	 
>11831	Callee	Face_Alloc
>11832	Identifier	Face_Alloc
>11833	Identifier	f
>11834	ExpressionStatement	 
>11835	CallExpression	VectorCopy ( pts [ 2 ] [ 1 ] , f -> planepts [ 2 ] )
>11836	ArgumentList	pts [ 2 ] [ 1 ]
>11837	Argument	f -> planepts [ 2 ]
>11838	ArrayIndexing	f -> planepts [ 2 ]
>11839	PrimaryExpression	2
>11840	PtrMemberAccess	f -> planepts
>11841	Identifier	planepts
>11842	Identifier	f
>11843	Argument	pts [ 2 ] [ 1 ]
>11844	ArrayIndexing	pts [ 2 ] [ 1 ]
>11845	PrimaryExpression	1
>11846	ArrayIndexing	pts [ 2 ]
>11847	PrimaryExpression	2
>11848	Identifier	pts
>11849	Callee	VectorCopy
>11850	Identifier	VectorCopy
>11851	ExpressionStatement	 
>11852	CallExpression	VectorCopy ( pts [ 1 ] [ 1 ] , f -> planepts [ 1 ] )
>11853	ArgumentList	pts [ 1 ] [ 1 ]
>11854	Argument	f -> planepts [ 1 ]
>11855	ArrayIndexing	f -> planepts [ 1 ]
>11856	PrimaryExpression	1
>11857	PtrMemberAccess	f -> planepts
>11858	Identifier	planepts
>11859	Identifier	f
>11860	Argument	pts [ 1 ] [ 1 ]
>11861	ArrayIndexing	pts [ 1 ] [ 1 ]
>11862	PrimaryExpression	1
>11863	ArrayIndexing	pts [ 1 ]
>11864	PrimaryExpression	1
>11865	Identifier	pts
>11866	Callee	VectorCopy
>11867	Identifier	VectorCopy
>11868	ExpressionStatement	 
>11869	CallExpression	VectorCopy ( pts [ 0 ] [ 1 ] , f -> planepts [ 0 ] )
>11870	ArgumentList	pts [ 0 ] [ 1 ]
>11871	Argument	f -> planepts [ 0 ]
>11872	ArrayIndexing	f -> planepts [ 0 ]
>11873	PrimaryExpression	0
>11874	PtrMemberAccess	f -> planepts
>11875	Identifier	planepts
>11876	Identifier	f
>11877	Argument	pts [ 0 ] [ 1 ]
>11878	ArrayIndexing	pts [ 0 ] [ 1 ]
>11879	PrimaryExpression	1
>11880	ArrayIndexing	pts [ 0 ]
>11881	PrimaryExpression	0
>11882	Identifier	pts
>11883	Callee	VectorCopy
>11884	Identifier	VectorCopy
>11885	ExpressionStatement	 
>11886	AssignmentExpr	b -> brush_faces = f
>11887	Identifier	f
>11888	PtrMemberAccess	b -> brush_faces
>11889	Identifier	brush_faces
>11890	Identifier	b
>11891	ExpressionStatement	 
>11892	AssignmentExpr	f -> next = b -> brush_faces
>11893	PtrMemberAccess	b -> brush_faces
>11894	Identifier	brush_faces
>11895	Identifier	b
>11896	PtrMemberAccess	f -> next
>11897	Identifier	next
>11898	Identifier	f
>11899	ExpressionStatement	 
>11900	AssignmentExpr	f -> texdef . contents &= ~CONTENTS_KEEP
>11901	Identifier	~CONTENTS_KEEP
>11902	MemberAccess	f -> texdef . contents
>11903	Identifier	contents
>11904	PtrMemberAccess	f -> texdef
>11905	Identifier	texdef
>11906	Identifier	f
>11907	ExpressionStatement	 
>11908	AssignmentExpr	f -> texdef . flags &= ~SURF_KEEP
>11909	Identifier	~SURF_KEEP
>11910	MemberAccess	f -> texdef . flags
>11911	Identifier	flags
>11912	PtrMemberAccess	f -> texdef
>11913	Identifier	texdef
>11914	Identifier	f
>11915	ExpressionStatement	 
>11916	AssignmentExpr	f -> texdef = * texdef
>11917	UnaryOp	* texdef
>11918	Identifier	texdef
>11919	UnaryOperator	*
>11920	PtrMemberAccess	f -> texdef
>11921	Identifier	texdef
>11922	Identifier	f
>11923	ExpressionStatement	 
>11924	AssignmentExpr	f = Face_Alloc ( )
>11925	CallExpression	Face_Alloc ( )
>11926	ArgumentList	 
>11927	Callee	Face_Alloc
>11928	Identifier	Face_Alloc
>11929	Identifier	f
>11930	ForStatement	for ( i = 0 ; i < 4 ; i ++ )
>11931	CompoundStatement	 
>11932	ExpressionStatement	 
>11933	CallExpression	VectorCopy ( pts [ i ] [ 0 ] , f -> planepts [ 2 ] )
>11934	ArgumentList	pts [ i ] [ 0 ]
>11935	Argument	f -> planepts [ 2 ]
>11936	ArrayIndexing	f -> planepts [ 2 ]
>11937	PrimaryExpression	2
>11938	PtrMemberAccess	f -> planepts
>11939	Identifier	planepts
>11940	Identifier	f
>11941	Argument	pts [ i ] [ 0 ]
>11942	ArrayIndexing	pts [ i ] [ 0 ]
>11943	PrimaryExpression	0
>11944	ArrayIndexing	pts [ i ]
>11945	Identifier	i
>11946	Identifier	pts
>11947	Callee	VectorCopy
>11948	Identifier	VectorCopy
>11949	ExpressionStatement	 
>11950	CallExpression	VectorCopy ( pts [ i ] [ 1 ] , f -> planepts [ 1 ] )
>11951	ArgumentList	pts [ i ] [ 1 ]
>11952	Argument	f -> planepts [ 1 ]
>11953	ArrayIndexing	f -> planepts [ 1 ]
>11954	PrimaryExpression	1
>11955	PtrMemberAccess	f -> planepts
>11956	Identifier	planepts
>11957	Identifier	f
>11958	Argument	pts [ i ] [ 1 ]
>11959	ArrayIndexing	pts [ i ] [ 1 ]
>11960	PrimaryExpression	1
>11961	ArrayIndexing	pts [ i ]
>11962	Identifier	i
>11963	Identifier	pts
>11964	Callee	VectorCopy
>11965	Identifier	VectorCopy
>11966	ExpressionStatement	 
>11967	CallExpression	VectorCopy ( pts [ j ] [ 1 ] , f -> planepts [ 0 ] )
>11968	ArgumentList	pts [ j ] [ 1 ]
>11969	Argument	f -> planepts [ 0 ]
>11970	ArrayIndexing	f -> planepts [ 0 ]
>11971	PrimaryExpression	0
>11972	PtrMemberAccess	f -> planepts
>11973	Identifier	planepts
>11974	Identifier	f
>11975	Argument	pts [ j ] [ 1 ]
>11976	ArrayIndexing	pts [ j ] [ 1 ]
>11977	PrimaryExpression	1
>11978	ArrayIndexing	pts [ j ]
>11979	Identifier	j
>11980	Identifier	pts
>11981	Callee	VectorCopy
>11982	Identifier	VectorCopy
>11983	ExpressionStatement	 
>11984	AssignmentExpr	j = ( i + 1 ) % 4
>11985	MultiplicativeExpression	( i + 1 ) % 4
>11986	PrimaryExpression	4
>11987	AdditiveExpression	i + 1
>11988	PrimaryExpression	1
>11989	Identifier	i
>11990	Identifier	j
>11991	ExpressionStatement	 
>11992	AssignmentExpr	b -> brush_faces = f
>11993	Identifier	f
>11994	PtrMemberAccess	b -> brush_faces
>11995	Identifier	brush_faces
>11996	Identifier	b
>11997	ExpressionStatement	 
>11998	AssignmentExpr	f -> next = b -> brush_faces
>11999	PtrMemberAccess	b -> brush_faces
>12000	Identifier	brush_faces
>12001	Identifier	b
>12002	PtrMemberAccess	f -> next
>12003	Identifier	next
>12004	Identifier	f
>12005	ExpressionStatement	 
>12006	AssignmentExpr	f -> texdef . contents &= ~CONTENTS_KEEP
>12007	Identifier	~CONTENTS_KEEP
>12008	MemberAccess	f -> texdef . contents
>12009	Identifier	contents
>12010	PtrMemberAccess	f -> texdef
>12011	Identifier	texdef
>12012	Identifier	f
>12013	ExpressionStatement	 
>12014	AssignmentExpr	f -> texdef . flags &= ~SURF_KEEP
>12015	Identifier	~SURF_KEEP
>12016	MemberAccess	f -> texdef . flags
>12017	Identifier	flags
>12018	PtrMemberAccess	f -> texdef
>12019	Identifier	texdef
>12020	Identifier	f
>12021	ExpressionStatement	 
>12022	AssignmentExpr	f -> texdef = * texdef
>12023	UnaryOp	* texdef
>12024	Identifier	texdef
>12025	UnaryOperator	*
>12026	PtrMemberAccess	f -> texdef
>12027	Identifier	texdef
>12028	Identifier	f
>12029	ExpressionStatement	 
>12030	AssignmentExpr	f = Face_Alloc ( )
>12031	CallExpression	Face_Alloc ( )
>12032	ArgumentList	 
>12033	Callee	Face_Alloc
>12034	Identifier	Face_Alloc
>12035	Identifier	f
>12036	IncDecOp	 
>12037	IncDec	++
>12038	Identifier	i
>12039	Condition	 
>12040	RelationalExpression	i < 4
>12041	PrimaryExpression	4
>12042	Identifier	i
>12043	ForInit	 
>12044	AssignmentExpr	i = 0
>12045	PrimaryExpression	0
>12046	Identifier	i
>12047	ForStatement	for ( i = 0 ; i < 4 ; i ++ )
>12048	CompoundStatement	 
>12049	ExpressionStatement	 
>12050	AssignmentExpr	pts [ i ] [ 1 ] [ 2 ] = maxs [ 2 ]
>12051	ArrayIndexing	maxs [ 2 ]
>12052	PrimaryExpression	2
>12053	Identifier	maxs
>12054	ArrayIndexing	pts [ i ] [ 1 ] [ 2 ]
>12055	PrimaryExpression	2
>12056	ArrayIndexing	pts [ i ] [ 1 ]
>12057	PrimaryExpression	1
>12058	ArrayIndexing	pts [ i ]
>12059	Identifier	i
>12060	Identifier	pts
>12061	ExpressionStatement	 
>12062	AssignmentExpr	pts [ i ] [ 1 ] [ 1 ] = pts [ i ] [ 0 ] [ 1 ]
>12063	ArrayIndexing	pts [ i ] [ 0 ] [ 1 ]
>12064	PrimaryExpression	1
>12065	ArrayIndexing	pts [ i ] [ 0 ]
>12066	PrimaryExpression	0
>12067	ArrayIndexing	pts [ i ]
>12068	Identifier	i
>12069	Identifier	pts
>12070	ArrayIndexing	pts [ i ] [ 1 ] [ 1 ]
>12071	PrimaryExpression	1
>12072	ArrayIndexing	pts [ i ] [ 1 ]
>12073	PrimaryExpression	1
>12074	ArrayIndexing	pts [ i ]
>12075	Identifier	i
>12076	Identifier	pts
>12077	ExpressionStatement	 
>12078	AssignmentExpr	pts [ i ] [ 1 ] [ 0 ] = pts [ i ] [ 0 ] [ 0 ]
>12079	ArrayIndexing	pts [ i ] [ 0 ] [ 0 ]
>12080	PrimaryExpression	0
>12081	ArrayIndexing	pts [ i ] [ 0 ]
>12082	PrimaryExpression	0
>12083	ArrayIndexing	pts [ i ]
>12084	Identifier	i
>12085	Identifier	pts
>12086	ArrayIndexing	pts [ i ] [ 1 ] [ 0 ]
>12087	PrimaryExpression	0
>12088	ArrayIndexing	pts [ i ] [ 1 ]
>12089	PrimaryExpression	1
>12090	ArrayIndexing	pts [ i ]
>12091	Identifier	i
>12092	Identifier	pts
>12093	ExpressionStatement	 
>12094	AssignmentExpr	pts [ i ] [ 0 ] [ 2 ] = mins [ 2 ]
>12095	ArrayIndexing	mins [ 2 ]
>12096	PrimaryExpression	2
>12097	Identifier	mins
>12098	ArrayIndexing	pts [ i ] [ 0 ] [ 2 ]
>12099	PrimaryExpression	2
>12100	ArrayIndexing	pts [ i ] [ 0 ]
>12101	PrimaryExpression	0
>12102	ArrayIndexing	pts [ i ]
>12103	Identifier	i
>12104	Identifier	pts
>12105	IncDecOp	 
>12106	IncDec	++
>12107	Identifier	i
>12108	Condition	 
>12109	RelationalExpression	i < 4
>12110	PrimaryExpression	4
>12111	Identifier	i
>12112	ForInit	 
>12113	AssignmentExpr	i = 0
>12114	PrimaryExpression	0
>12115	Identifier	i
>12116	ExpressionStatement	 
>12117	AssignmentExpr	pts [ 3 ] [ 0 ] [ 1 ] = mins [ 1 ]
>12118	ArrayIndexing	mins [ 1 ]
>12119	PrimaryExpression	1
>12120	Identifier	mins
>12121	ArrayIndexing	pts [ 3 ] [ 0 ] [ 1 ]
>12122	PrimaryExpression	1
>12123	ArrayIndexing	pts [ 3 ] [ 0 ]
>12124	PrimaryExpression	0
>12125	ArrayIndexing	pts [ 3 ]
>12126	PrimaryExpression	3
>12127	Identifier	pts
>12128	ExpressionStatement	 
>12129	AssignmentExpr	pts [ 3 ] [ 0 ] [ 0 ] = maxs [ 0 ]
>12130	ArrayIndexing	maxs [ 0 ]
>12131	PrimaryExpression	0
>12132	Identifier	maxs
>12133	ArrayIndexing	pts [ 3 ] [ 0 ] [ 0 ]
>12134	PrimaryExpression	0
>12135	ArrayIndexing	pts [ 3 ] [ 0 ]
>12136	PrimaryExpression	0
>12137	ArrayIndexing	pts [ 3 ]
>12138	PrimaryExpression	3
>12139	Identifier	pts
>12140	ExpressionStatement	 
>12141	AssignmentExpr	pts [ 2 ] [ 0 ] [ 1 ] = maxs [ 1 ]
>12142	ArrayIndexing	maxs [ 1 ]
>12143	PrimaryExpression	1
>12144	Identifier	maxs
>12145	ArrayIndexing	pts [ 2 ] [ 0 ] [ 1 ]
>12146	PrimaryExpression	1
>12147	ArrayIndexing	pts [ 2 ] [ 0 ]
>12148	PrimaryExpression	0
>12149	ArrayIndexing	pts [ 2 ]
>12150	PrimaryExpression	2
>12151	Identifier	pts
>12152	ExpressionStatement	 
>12153	AssignmentExpr	pts [ 2 ] [ 0 ] [ 0 ] = maxs [ 0 ]
>12154	ArrayIndexing	maxs [ 0 ]
>12155	PrimaryExpression	0
>12156	Identifier	maxs
>12157	ArrayIndexing	pts [ 2 ] [ 0 ] [ 0 ]
>12158	PrimaryExpression	0
>12159	ArrayIndexing	pts [ 2 ] [ 0 ]
>12160	PrimaryExpression	0
>12161	ArrayIndexing	pts [ 2 ]
>12162	PrimaryExpression	2
>12163	Identifier	pts
>12164	ExpressionStatement	 
>12165	AssignmentExpr	pts [ 1 ] [ 0 ] [ 1 ] = maxs [ 1 ]
>12166	ArrayIndexing	maxs [ 1 ]
>12167	PrimaryExpression	1
>12168	Identifier	maxs
>12169	ArrayIndexing	pts [ 1 ] [ 0 ] [ 1 ]
>12170	PrimaryExpression	1
>12171	ArrayIndexing	pts [ 1 ] [ 0 ]
>12172	PrimaryExpression	0
>12173	ArrayIndexing	pts [ 1 ]
>12174	PrimaryExpression	1
>12175	Identifier	pts
>12176	ExpressionStatement	 
>12177	AssignmentExpr	pts [ 1 ] [ 0 ] [ 0 ] = mins [ 0 ]
>12178	ArrayIndexing	mins [ 0 ]
>12179	PrimaryExpression	0
>12180	Identifier	mins
>12181	ArrayIndexing	pts [ 1 ] [ 0 ] [ 0 ]
>12182	PrimaryExpression	0
>12183	ArrayIndexing	pts [ 1 ] [ 0 ]
>12184	PrimaryExpression	0
>12185	ArrayIndexing	pts [ 1 ]
>12186	PrimaryExpression	1
>12187	Identifier	pts
>12188	ExpressionStatement	 
>12189	AssignmentExpr	pts [ 0 ] [ 0 ] [ 1 ] = mins [ 1 ]
>12190	ArrayIndexing	mins [ 1 ]
>12191	PrimaryExpression	1
>12192	Identifier	mins
>12193	ArrayIndexing	pts [ 0 ] [ 0 ] [ 1 ]
>12194	PrimaryExpression	1
>12195	ArrayIndexing	pts [ 0 ] [ 0 ]
>12196	PrimaryExpression	0
>12197	ArrayIndexing	pts [ 0 ]
>12198	PrimaryExpression	0
>12199	Identifier	pts
>12200	ExpressionStatement	 
>12201	AssignmentExpr	pts [ 0 ] [ 0 ] [ 0 ] = mins [ 0 ]
>12202	ArrayIndexing	mins [ 0 ]
>12203	PrimaryExpression	0
>12204	Identifier	mins
>12205	ArrayIndexing	pts [ 0 ] [ 0 ] [ 0 ]
>12206	PrimaryExpression	0
>12207	ArrayIndexing	pts [ 0 ] [ 0 ]
>12208	PrimaryExpression	0
>12209	ArrayIndexing	pts [ 0 ]
>12210	PrimaryExpression	0
>12211	Identifier	pts
>12212	ExpressionStatement	 
>12213	AssignmentExpr	b = Brush_Alloc ( )
>12214	CallExpression	Brush_Alloc ( )
>12215	ArgumentList	 
>12216	Callee	Brush_Alloc
>12217	Identifier	Brush_Alloc
>12218	Identifier	b
>12219	ForStatement	for ( i = 0 ; i < 3 ; i ++ )
>12220	CompoundStatement	 
>12221	IfStatement	if ( maxs [ i ] < mins [ i ] )
>12222	ExpressionStatement	 
>12223	CallExpression	Error ( \"Brush_InitSolid
>12224	ArgumentList	\"Brush_InitSolid
>12225	Argument	\"Brush_InitSolid
>12226	PrimaryExpression	\"Brush_InitSolid
>12227	Callee	Error
>12228	Identifier	Error
>12229	Condition	 
>12230	RelationalExpression	maxs [ i ] < mins [ i ]
>12231	ArrayIndexing	mins [ i ]
>12232	Identifier	i
>12233	Identifier	mins
>12234	ArrayIndexing	maxs [ i ]
>12235	Identifier	i
>12236	Identifier	maxs
>12237	IncDecOp	 
>12238	IncDec	++
>12239	Identifier	i
>12240	Condition	 
>12241	RelationalExpression	i < 3
>12242	PrimaryExpression	3
>12243	Identifier	i
>12244	ForInit	 
>12245	AssignmentExpr	i = 0
>12246	PrimaryExpression	0
>12247	Identifier	i
>12248	IfStatement	if ( g_qeglobals . m_bBrushPrimitMode )
>12249	CompoundStatement	 
>12250	IfStatement	if ( texdef -> shift [ 0 ] != 0 || texdef -> shift [ 1 ] != 0 || texdef -> scale [ 0 ] != 0 || texdef -> scale [ \
>12251	ExpressionStatement	 
>12252	CallExpression	Sys_Printf ( \"Warning 
>12253	ArgumentList	\"Warning 
>12254	Argument	\"Warning 
>12255	PrimaryExpression	\"Warning 
>12256	Callee	Sys_Printf
>12257	Identifier	Sys_Printf
>12258	Condition	 
>12259	OrExpression	texdef -> shift [ 0 ] != 0 || texdef -> shift [ 1 ] != 0 || texdef -> scale [ 0 ] != 0 || texdef -> \
>12260	OrExpression	texdef -> shift [ 1 ] != 0 || texdef -> scale [ 0 ] != 0 || texdef -> scale [ 1 ] != 0 || texdef -> \
>12261	OrExpression	texdef -> scale [ 0 ] != 0 || texdef -> scale [ 1 ] != 0 || texdef -> rotate != 0
>12262	OrExpression	texdef -> scale [ 1 ] != 0 || texdef -> rotate != 0
>12263	EqualityExpression	texdef -> rotate != 0
>12264	PrimaryExpression	0
>12265	PtrMemberAccess	texdef -> rotate
>12266	Identifier	rotate
>12267	Identifier	texdef
>12268	EqualityExpression	texdef -> scale [ 1 ] != 0
>12269	PrimaryExpression	0
>12270	ArrayIndexing	texdef -> scale [ 1 ]
>12271	PrimaryExpression	1
>12272	PtrMemberAccess	texdef -> scale
>12273	Identifier	scale
>12274	Identifier	texdef
>12275	EqualityExpression	texdef -> scale [ 0 ] != 0
>12276	PrimaryExpression	0
>12277	ArrayIndexing	texdef -> scale [ 0 ]
>12278	PrimaryExpression	0
>12279	PtrMemberAccess	texdef -> scale
>12280	Identifier	scale
>12281	Identifier	texdef
>12282	EqualityExpression	texdef -> shift [ 1 ] != 0
>12283	PrimaryExpression	0
>12284	ArrayIndexing	texdef -> shift [ 1 ]
>12285	PrimaryExpression	1
>12286	PtrMemberAccess	texdef -> shift
>12287	Identifier	shift
>12288	Identifier	texdef
>12289	EqualityExpression	texdef -> shift [ 0 ] != 0
>12290	PrimaryExpression	0
>12291	ArrayIndexing	texdef -> shift [ 0 ]
>12292	PrimaryExpression	0
>12293	PtrMemberAccess	texdef -> shift
>12294	Identifier	shift
>12295	Identifier	texdef
>12296	Condition	 
>12297	MemberAccess	g_qeglobals . m_bBrushPrimitMode
>12298	Identifier	m_bBrushPrimitMode
>12299	Identifier	g_qeglobals
>12300	IdentifierDeclStatement	 
>12301	IdentifierDecl	* b
>12302	Identifier	b
>12303	IdentifierDeclType	brush_t *
>12304	IdentifierDeclStatement	 
>12305	IdentifierDecl	* f
>12306	Identifier	f
>12307	IdentifierDeclType	face_t *
>12308	ExpressionStatement	 
>12309	ArrayIndexing	pts [ 4 ] [ 2 ]
>12310	PrimaryExpression	2
>12311	ArrayIndexing	pts [ 4 ]
>12312	PrimaryExpression	4
>12313	Identifier	pts
>12314	Statement	 
>12315	IdentifierDeclStatement	 
>12316	IdentifierDecl	j
>12317	Identifier	j
>12318	IdentifierDeclType	int
>12319	IdentifierDecl	i
>12320	Identifier	i
>12321	IdentifierDeclType	int
>12366	FunctionDef	Brush_CreatePyramid (vec3_t mins , vec3_t maxs , texdef_t * texdef)
>12367	ParameterList	vec3_t mins , vec3_t maxs , texdef_t * texdef
>12368	Parameter	 
>12369	Identifier	texdef
>12370	ParameterType	texdef_t *
>12371	Parameter	 
>12372	Identifier	maxs
>12373	ParameterType	vec3_t
>12374	Parameter	 
>12375	Identifier	mins
>12376	ParameterType	vec3_t
>12377	ReturnType	brush_t *
>12378	CompoundStatement	 
>12379	ReturnStatement	 
>12380	Identifier	b
>12381	ForStatement	for ( i = 0 ; i < 4 ; i ++ )
>12382	CompoundStatement	 
>12383	ExpressionStatement	 
>12384	CallExpression	VectorCopy ( corners [ j ] , f -> planepts [ 0 ] )
>12385	ArgumentList	corners [ j ]
>12386	Argument	f -> planepts [ 0 ]
>12387	ArrayIndexing	f -> planepts [ 0 ]
>12388	PrimaryExpression	0
>12389	PtrMemberAccess	f -> planepts
>12390	Identifier	planepts
>12391	Identifier	f
>12392	Argument	corners [ j ]
>12393	ArrayIndexing	corners [ j ]
>12394	Identifier	j
>12395	Identifier	corners
>12396	Callee	VectorCopy
>12397	Identifier	VectorCopy
>12398	ExpressionStatement	 
>12399	CallExpression	VectorCopy ( corners [ i ] , f -> planepts [ 1 ] )
>12400	ArgumentList	corners [ i ]
>12401	Argument	f -> planepts [ 1 ]
>12402	ArrayIndexing	f -> planepts [ 1 ]
>12403	PrimaryExpression	1
>12404	PtrMemberAccess	f -> planepts
>12405	Identifier	planepts
>12406	Identifier	f
>12407	Argument	corners [ i ]
>12408	ArrayIndexing	corners [ i ]
>12409	Identifier	i
>12410	Identifier	corners
>12411	Callee	VectorCopy
>12412	Identifier	VectorCopy
>12413	ExpressionStatement	 
>12414	CallExpression	VectorCopy ( bottom , f -> planepts [ 2 ] )
>12415	ArgumentList	bottom
>12416	Argument	f -> planepts [ 2 ]
>12417	ArrayIndexing	f -> planepts [ 2 ]
>12418	PrimaryExpression	2
>12419	PtrMemberAccess	f -> planepts
>12420	Identifier	planepts
>12421	Identifier	f
>12422	Argument	bottom
>12423	Identifier	bottom
>12424	Callee	VectorCopy
>12425	Identifier	VectorCopy
>12426	ExpressionStatement	 
>12427	AssignmentExpr	b -> brush_faces = f
>12428	Identifier	f
>12429	PtrMemberAccess	b -> brush_faces
>12430	Identifier	brush_faces
>12431	Identifier	b
>12432	ExpressionStatement	 
>12433	AssignmentExpr	f -> next = b -> brush_faces
>12434	PtrMemberAccess	b -> brush_faces
>12435	Identifier	brush_faces
>12436	Identifier	b
>12437	PtrMemberAccess	f -> next
>12438	Identifier	next
>12439	Identifier	f
>12440	ExpressionStatement	 
>12441	AssignmentExpr	f -> texdef . contents &= ~CONTENTS_KEEP
>12442	Identifier	~CONTENTS_KEEP
>12443	MemberAccess	f -> texdef . contents
>12444	Identifier	contents
>12445	PtrMemberAccess	f -> texdef
>12446	Identifier	texdef
>12447	Identifier	f
>12448	ExpressionStatement	 
>12449	AssignmentExpr	f -> texdef . flags &= ~SURF_KEEP
>12450	Identifier	~SURF_KEEP
>12451	MemberAccess	f -> texdef . flags
>12452	Identifier	flags
>12453	PtrMemberAccess	f -> texdef
>12454	Identifier	texdef
>12455	Identifier	f
>12456	ExpressionStatement	 
>12457	AssignmentExpr	f -> texdef = * texdef
>12458	UnaryOp	* texdef
>12459	Identifier	texdef
>12460	UnaryOperator	*
>12461	PtrMemberAccess	f -> texdef
>12462	Identifier	texdef
>12463	Identifier	f
>12464	ExpressionStatement	 
>12465	AssignmentExpr	f = Face_Alloc ( )
>12466	CallExpression	Face_Alloc ( )
>12467	ArgumentList	 
>12468	Callee	Face_Alloc
>12469	Identifier	Face_Alloc
>12470	Identifier	f
>12471	ExpressionStatement	 
>12472	CallExpression	VectorCopy ( corners [ j ] , f -> planepts [ 2 ] )
>12473	ArgumentList	corners [ j ]
>12474	Argument	f -> planepts [ 2 ]
>12475	ArrayIndexing	f -> planepts [ 2 ]
>12476	PrimaryExpression	2
>12477	PtrMemberAccess	f -> planepts
>12478	Identifier	planepts
>12479	Identifier	f
>12480	Argument	corners [ j ]
>12481	ArrayIndexing	corners [ j ]
>12482	Identifier	j
>12483	Identifier	corners
>12484	Callee	VectorCopy
>12485	Identifier	VectorCopy
>12486	ExpressionStatement	 
>12487	CallExpression	VectorCopy ( corners [ i ] , f -> planepts [ 1 ] )
>12488	ArgumentList	corners [ i ]
>12489	Argument	f -> planepts [ 1 ]
>12490	ArrayIndexing	f -> planepts [ 1 ]
>12491	PrimaryExpression	1
>12492	PtrMemberAccess	f -> planepts
>12493	Identifier	planepts
>12494	Identifier	f
>12495	Argument	corners [ i ]
>12496	ArrayIndexing	corners [ i ]
>12497	Identifier	i
>12498	Identifier	corners
>12499	Callee	VectorCopy
>12500	Identifier	VectorCopy
>12501	ExpressionStatement	 
>12502	CallExpression	VectorCopy ( top , f -> planepts [ 0 ] )
>12503	ArgumentList	top
>12504	Argument	f -> planepts [ 0 ]
>12505	ArrayIndexing	f -> planepts [ 0 ]
>12506	PrimaryExpression	0
>12507	PtrMemberAccess	f -> planepts
>12508	Identifier	planepts
>12509	Identifier	f
>12510	Argument	top
>12511	Identifier	top
>12512	Callee	VectorCopy
>12513	Identifier	VectorCopy
>12514	IdentifierDeclStatement	 
>12515	IdentifierDecl	j = ( i + 1 ) % 4
>12516	AssignmentExpr	j = ( i + 1 ) % 4
>12517	MultiplicativeExpression	( i + 1 ) % 4
>12518	PrimaryExpression	4
>12519	AdditiveExpression	i + 1
>12520	PrimaryExpression	1
>12521	Identifier	i
>12522	Identifier	j
>12523	Identifier	j
>12524	IdentifierDeclType	int
>12525	ExpressionStatement	 
>12526	AssignmentExpr	b -> brush_faces = f
>12527	Identifier	f
>12528	PtrMemberAccess	b -> brush_faces
>12529	Identifier	brush_faces
>12530	Identifier	b
>12531	ExpressionStatement	 
>12532	AssignmentExpr	f -> next = b -> brush_faces
>12533	PtrMemberAccess	b -> brush_faces
>12534	Identifier	brush_faces
>12535	Identifier	b
>12536	PtrMemberAccess	f -> next
>12537	Identifier	next
>12538	Identifier	f
>12539	ExpressionStatement	 
>12540	AssignmentExpr	f -> texdef . contents &= ~CONTENTS_KEEP
>12541	Identifier	~CONTENTS_KEEP
>12542	MemberAccess	f -> texdef . contents
>12543	Identifier	contents
>12544	PtrMemberAccess	f -> texdef
>12545	Identifier	texdef
>12546	Identifier	f
>12547	ExpressionStatement	 
>12548	AssignmentExpr	f -> texdef . flags &= ~SURF_KEEP
>12549	Identifier	~SURF_KEEP
>12550	MemberAccess	f -> texdef . flags
>12551	Identifier	flags
>12552	PtrMemberAccess	f -> texdef
>12553	Identifier	texdef
>12554	Identifier	f
>12555	ExpressionStatement	 
>12556	AssignmentExpr	f -> texdef = * texdef
>12557	UnaryOp	* texdef
>12558	Identifier	texdef
>12559	UnaryOperator	*
>12560	PtrMemberAccess	f -> texdef
>12561	Identifier	texdef
>12562	Identifier	f
>12563	IdentifierDeclStatement	 
>12564	IdentifierDecl	* f = Face_Alloc ( )
>12565	AssignmentExpr	* f = Face_Alloc ( )
>12566	CallExpression	Face_Alloc ( )
>12567	ArgumentList	 
>12568	Callee	Face_Alloc
>12569	Identifier	Face_Alloc
>12570	Identifier	f
>12571	Identifier	f
>12572	IdentifierDeclType	face_t *
>12573	IncDecOp	 
>12574	IncDec	++
>12575	Identifier	i
>12576	Condition	 
>12577	RelationalExpression	i < 4
>12578	PrimaryExpression	4
>12579	Identifier	i
>12580	ForInit	 
>12581	AssignmentExpr	i = 0
>12582	PrimaryExpression	0
>12583	Identifier	i
>12584	ExpressionStatement	 
>12585	AssignmentExpr	bottom [ 2 ] = mins [ 2 ]
>12586	ArrayIndexing	mins [ 2 ]
>12587	PrimaryExpression	2
>12588	Identifier	mins
>12589	ArrayIndexing	bottom [ 2 ]
>12590	PrimaryExpression	2
>12591	Identifier	bottom
>12592	ExpressionStatement	 
>12593	CallExpression	VectorCopy ( top , bottom )
>12594	ArgumentList	top
>12595	Argument	bottom
>12596	Identifier	bottom
>12597	Argument	top
>12598	Identifier	top
>12599	Callee	VectorCopy
>12600	Identifier	VectorCopy
>12601	ExpressionStatement	 
>12602	AssignmentExpr	top [ 2 ] = Q_rint ( maxs [ 2 ] )
>12603	CallExpression	Q_rint ( maxs [ 2 ] )
>12604	ArgumentList	maxs [ 2 ]
>12605	Argument	maxs [ 2 ]
>12606	ArrayIndexing	maxs [ 2 ]
>12607	PrimaryExpression	2
>12608	Identifier	maxs
>12609	Callee	Q_rint
>12610	Identifier	Q_rint
>12611	ArrayIndexing	top [ 2 ]
>12612	PrimaryExpression	2
>12613	Identifier	top
>12614	ExpressionStatement	 
>12615	AssignmentExpr	top [ 1 ] = Q_rint ( mins [ 1 ] + ( ( maxs [ 1 ] - mins [ 1 ] ) / 2 ) )
>12616	CallExpression	Q_rint ( mins [ 1 ] + ( ( maxs [ 1 ] - mins [ 1 ] ) / 2 ) )
>12617	ArgumentList	mins [ 1 ] + ( ( maxs [ 1 ] - mins [ 1 ] ) / 2 )
>12618	Argument	mins [ 1 ] + ( ( maxs [ 1 ] - mins [ 1 ] ) / 2 )
>12619	AdditiveExpression	mins [ 1 ] + ( ( maxs [ 1 ] - mins [ 1 ] ) / 2 )
>12620	MultiplicativeExpression	( maxs [ 1 ] - mins [ 1 ] ) / 2
>12621	PrimaryExpression	2
>12622	AdditiveExpression	maxs [ 1 ] - mins [ 1 ]
>12623	ArrayIndexing	mins [ 1 ]
>12624	PrimaryExpression	1
>12625	Identifier	mins
>12626	ArrayIndexing	maxs [ 1 ]
>12627	PrimaryExpression	1
>12628	Identifier	maxs
>12629	ArrayIndexing	mins [ 1 ]
>12630	PrimaryExpression	1
>12631	Identifier	mins
>12632	Callee	Q_rint
>12633	Identifier	Q_rint
>12634	ArrayIndexing	top [ 1 ]
>12635	PrimaryExpression	1
>12636	Identifier	top
>12637	ExpressionStatement	 
>12638	AssignmentExpr	top [ 0 ] = Q_rint ( mins [ 0 ] + ( ( maxs [ 0 ] - mins [ 0 ] ) / 2 ) )
>12639	CallExpression	Q_rint ( mins [ 0 ] + ( ( maxs [ 0 ] - mins [ 0 ] ) / 2 ) )
>12640	ArgumentList	mins [ 0 ] + ( ( maxs [ 0 ] - mins [ 0 ] ) / 2 )
>12641	Argument	mins [ 0 ] + ( ( maxs [ 0 ] - mins [ 0 ] ) / 2 )
>12642	AdditiveExpression	mins [ 0 ] + ( ( maxs [ 0 ] - mins [ 0 ] ) / 2 )
>12643	MultiplicativeExpression	( maxs [ 0 ] - mins [ 0 ] ) / 2
>12644	PrimaryExpression	2
>12645	AdditiveExpression	maxs [ 0 ] - mins [ 0 ]
>12646	ArrayIndexing	mins [ 0 ]
>12647	PrimaryExpression	0
>12648	Identifier	mins
>12649	ArrayIndexing	maxs [ 0 ]
>12650	PrimaryExpression	0
>12651	Identifier	maxs
>12652	ArrayIndexing	mins [ 0 ]
>12653	PrimaryExpression	0
>12654	Identifier	mins
>12655	Callee	Q_rint
>12656	Identifier	Q_rint
>12657	ArrayIndexing	top [ 0 ]
>12658	PrimaryExpression	0
>12659	Identifier	top
>12660	IdentifierDeclStatement	 
>12661	IdentifierDecl	bottom
>12662	Identifier	bottom
>12663	IdentifierDeclType	vec3_t
>12664	IdentifierDecl	top
>12665	Identifier	top
>12666	IdentifierDeclType	vec3_t
>12667	ExpressionStatement	 
>12668	AssignmentExpr	corners [ 3 ] [ 2 ] = fMid
>12669	Identifier	fMid
>12670	ArrayIndexing	corners [ 3 ] [ 2 ]
>12671	PrimaryExpression	2
>12672	ArrayIndexing	corners [ 3 ]
>12673	PrimaryExpression	3
>12674	Identifier	corners
>12675	ExpressionStatement	 
>12676	AssignmentExpr	corners [ 3 ] [ 1 ] = mins [ 1 ]
>12677	ArrayIndexing	mins [ 1 ]
>12678	PrimaryExpression	1
>12679	Identifier	mins
>12680	ArrayIndexing	corners [ 3 ] [ 1 ]
>12681	PrimaryExpression	1
>12682	ArrayIndexing	corners [ 3 ]
>12683	PrimaryExpression	3
>12684	Identifier	corners
>12685	ExpressionStatement	 
>12686	AssignmentExpr	corners [ 3 ] [ 0 ] = maxs [ 0 ]
>12687	ArrayIndexing	maxs [ 0 ]
>12688	PrimaryExpression	0
>12689	Identifier	maxs
>12690	ArrayIndexing	corners [ 3 ] [ 0 ]
>12691	PrimaryExpression	0
>12692	ArrayIndexing	corners [ 3 ]
>12693	PrimaryExpression	3
>12694	Identifier	corners
>12695	ExpressionStatement	 
>12696	AssignmentExpr	corners [ 2 ] [ 2 ] = fMid
>12697	Identifier	fMid
>12698	ArrayIndexing	corners [ 2 ] [ 2 ]
>12699	PrimaryExpression	2
>12700	ArrayIndexing	corners [ 2 ]
>12701	PrimaryExpression	2
>12702	Identifier	corners
>12703	ExpressionStatement	 
>12704	AssignmentExpr	corners [ 2 ] [ 1 ] = maxs [ 1 ]
>12705	ArrayIndexing	maxs [ 1 ]
>12706	PrimaryExpression	1
>12707	Identifier	maxs
>12708	ArrayIndexing	corners [ 2 ] [ 1 ]
>12709	PrimaryExpression	1
>12710	ArrayIndexing	corners [ 2 ]
>12711	PrimaryExpression	2
>12712	Identifier	corners
>12713	ExpressionStatement	 
>12714	AssignmentExpr	corners [ 2 ] [ 0 ] = maxs [ 0 ]
>12715	ArrayIndexing	maxs [ 0 ]
>12716	PrimaryExpression	0
>12717	Identifier	maxs
>12718	ArrayIndexing	corners [ 2 ] [ 0 ]
>12719	PrimaryExpression	0
>12720	ArrayIndexing	corners [ 2 ]
>12721	PrimaryExpression	2
>12722	Identifier	corners
>12723	ExpressionStatement	 
>12724	AssignmentExpr	corners [ 1 ] [ 2 ] = fMid
>12725	Identifier	fMid
>12726	ArrayIndexing	corners [ 1 ] [ 2 ]
>12727	PrimaryExpression	2
>12728	ArrayIndexing	corners [ 1 ]
>12729	PrimaryExpression	1
>12730	Identifier	corners
>12731	ExpressionStatement	 
>12732	AssignmentExpr	corners [ 1 ] [ 1 ] = maxs [ 1 ]
>12733	ArrayIndexing	maxs [ 1 ]
>12734	PrimaryExpression	1
>12735	Identifier	maxs
>12736	ArrayIndexing	corners [ 1 ] [ 1 ]
>12737	PrimaryExpression	1
>12738	ArrayIndexing	corners [ 1 ]
>12739	PrimaryExpression	1
>12740	Identifier	corners
>12741	ExpressionStatement	 
>12742	AssignmentExpr	corners [ 1 ] [ 0 ] = mins [ 0 ]
>12743	ArrayIndexing	mins [ 0 ]
>12744	PrimaryExpression	0
>12745	Identifier	mins
>12746	ArrayIndexing	corners [ 1 ] [ 0 ]
>12747	PrimaryExpression	0
>12748	ArrayIndexing	corners [ 1 ]
>12749	PrimaryExpression	1
>12750	Identifier	corners
>12751	ExpressionStatement	 
>12752	AssignmentExpr	corners [ 0 ] [ 2 ] = fMid
>12753	Identifier	fMid
>12754	ArrayIndexing	corners [ 0 ] [ 2 ]
>12755	PrimaryExpression	2
>12756	ArrayIndexing	corners [ 0 ]
>12757	PrimaryExpression	0
>12758	Identifier	corners
>12759	ExpressionStatement	 
>12760	AssignmentExpr	corners [ 0 ] [ 1 ] = mins [ 1 ]
>12761	ArrayIndexing	mins [ 1 ]
>12762	PrimaryExpression	1
>12763	Identifier	mins
>12764	ArrayIndexing	corners [ 0 ] [ 1 ]
>12765	PrimaryExpression	1
>12766	ArrayIndexing	corners [ 0 ]
>12767	PrimaryExpression	0
>12768	Identifier	corners
>12769	ExpressionStatement	 
>12770	AssignmentExpr	corners [ 0 ] [ 0 ] = mins [ 0 ]
>12771	ArrayIndexing	mins [ 0 ]
>12772	PrimaryExpression	0
>12773	Identifier	mins
>12774	ArrayIndexing	corners [ 0 ] [ 0 ]
>12775	PrimaryExpression	0
>12776	ArrayIndexing	corners [ 0 ]
>12777	PrimaryExpression	0
>12778	Identifier	corners
>12779	IdentifierDeclStatement	 
>12780	IdentifierDecl	fMid = Q_rint ( mins [ 2 ] + ( Q_rint ( ( maxs [ 2 ] - mins [ 2 ] ) / 2 ) ) )
>12781	AssignmentExpr	fMid = Q_rint ( mins [ 2 ] + ( Q_rint ( ( maxs [ 2 ] - mins [ 2 ] ) / 2 ) ) )
>12782	CallExpression	Q_rint ( mins [ 2 ] + ( Q_rint ( ( maxs [ 2 ] - mins [ 2 ] ) / 2 ) ) )
>12783	ArgumentList	mins [ 2 ] + ( Q_rint ( ( maxs [ 2 ] - mins [ 2 ] ) / 2 ) )
>12784	Argument	mins [ 2 ] + ( Q_rint ( ( maxs [ 2 ] - mins [ 2 ] ) / 2 ) )
>12785	AdditiveExpression	mins [ 2 ] + ( Q_rint ( ( maxs [ 2 ] - mins [ 2 ] ) / 2 ) )
>12786	CallExpression	Q_rint ( ( maxs [ 2 ] - mins [ 2 ] ) / 2 )
>12787	ArgumentList	( maxs [ 2 ] - mins [ 2 ] ) / 2
>12788	Argument	( maxs [ 2 ] - mins [ 2 ] ) / 2
>12789	MultiplicativeExpression	( maxs [ 2 ] - mins [ 2 ] ) / 2
>12790	PrimaryExpression	2
>12791	AdditiveExpression	maxs [ 2 ] - mins [ 2 ]
>12792	ArrayIndexing	mins [ 2 ]
>12793	PrimaryExpression	2
>12794	Identifier	mins
>12795	ArrayIndexing	maxs [ 2 ]
>12796	PrimaryExpression	2
>12797	Identifier	maxs
>12798	Callee	Q_rint
>12799	Identifier	Q_rint
>12800	ArrayIndexing	mins [ 2 ]
>12801	PrimaryExpression	2
>12802	Identifier	mins
>12803	Callee	Q_rint
>12804	Identifier	Q_rint
>12805	Identifier	fMid
>12806	Identifier	fMid
>12807	IdentifierDeclType	float
>12808	IdentifierDeclStatement	 
>12809	IdentifierDecl	corners [ 4 ]
>12810	PrimaryExpression	4
>12811	Identifier	corners
>12812	IdentifierDeclType	vec3_t [ 4 ]
>12813	IdentifierDeclStatement	 
>12814	IdentifierDecl	* b = Brush_Alloc ( )
>12815	AssignmentExpr	* b = Brush_Alloc ( )
>12816	CallExpression	Brush_Alloc ( )
>12817	ArgumentList	 
>12818	Callee	Brush_Alloc
>12819	Identifier	Brush_Alloc
>12820	Identifier	b
>12821	Identifier	b
>12822	IdentifierDeclType	brush_t *
>12823	ForStatement	for ( int i = 0 ; i < 3 ; i ++ )
>12824	IfStatement	if ( maxs [ i ] < mins [ i ] )
>12825	ExpressionStatement	 
>12826	CallExpression	Error ( \"Brush_InitSolid
>12827	ArgumentList	\"Brush_InitSolid
>12828	Argument	\"Brush_InitSolid
>12829	PrimaryExpression	\"Brush_InitSolid
>12830	Callee	Error
>12831	Identifier	Error
>12832	Condition	 
>12833	RelationalExpression	maxs [ i ] < mins [ i ]
>12834	ArrayIndexing	mins [ i ]
>12835	Identifier	i
>12836	Identifier	mins
>12837	ArrayIndexing	maxs [ i ]
>12838	Identifier	i
>12839	Identifier	maxs
>12840	IncDecOp	 
>12841	IncDec	++
>12842	Identifier	i
>12843	Condition	 
>12844	RelationalExpression	i < 3
>12845	PrimaryExpression	3
>12846	Identifier	i
>12847	ForInit	 
>12848	IdentifierDeclStatement	int i = 0 ;
>12849	IdentifierDecl	i = 0
>12850	AssignmentExpr	i = 0
>12851	PrimaryExpression	0
>12852	Identifier	i
>12853	Identifier	i
>12854	IdentifierDeclType	int
>12855	ReturnStatement	 
>12856	CallExpression	Brush_Create ( mins , maxs , texdef )
>12857	ArgumentList	mins
>12858	Argument	texdef
>12859	Identifier	texdef
>12860	Argument	maxs
>12861	Identifier	maxs
>12862	Argument	mins
>12863	Identifier	mins
>12864	Callee	Brush_Create
>12865	Identifier	Brush_Create
>12905	FunctionDef	Brush_MakeSided (int sides)
>12906	ParameterList	int sides
>12907	Parameter	 
>12908	Identifier	sides
>12909	ParameterType	int
>12910	ReturnType	void
>12911	CompoundStatement	 
>12912	ExpressionStatement	 
>12913	CallExpression	Sys_UpdateWindows ( W_ALL )
>12914	ArgumentList	W_ALL
>12915	Argument	W_ALL
>12916	Identifier	W_ALL
>12917	Callee	Sys_UpdateWindows
>12918	Identifier	Sys_UpdateWindows
>12919	ExpressionStatement	 
>12920	CallExpression	Brush_Build ( b )
>12921	ArgumentList	b
>12922	Argument	b
>12923	Identifier	b
>12924	Callee	Brush_Build
>12925	Identifier	Brush_Build
>12926	ExpressionStatement	 
>12927	CallExpression	Entity_LinkBrush ( world_entity , b )
>12928	ArgumentList	world_entity
>12929	Argument	b
>12930	Identifier	b
>12931	Argument	world_entity
>12932	Identifier	world_entity
>12933	Callee	Entity_LinkBrush
>12934	Identifier	Entity_LinkBrush
>12935	ExpressionStatement	 
>12936	CallExpression	Brush_AddToList ( b , & selected_brushes )
>12937	ArgumentList	b
>12938	Argument	& selected_brushes
>12939	UnaryOp	& selected_brushes
>12940	Identifier	selected_brushes
>12941	UnaryOperator	&
>12942	Argument	b
>12943	Identifier	b
>12944	Callee	Brush_AddToList
>12945	Identifier	Brush_AddToList
>12946	ForStatement	for ( i = 0 ; i < sides ; i ++ )
>12947	CompoundStatement	 
>12948	ExpressionStatement	 
>12949	AssignmentExpr	f -> planepts [ 2 ] [ axis ] = maxs [ axis ]
>12950	ArrayIndexing	maxs [ axis ]
>12951	Identifier	axis
>12952	Identifier	maxs
>12953	ArrayIndexing	f -> planepts [ 2 ] [ axis ]
>12954	Identifier	axis
>12955	ArrayIndexing	f -> planepts [ 2 ]
>12956	PrimaryExpression	2
>12957	PtrMemberAccess	f -> planepts
>12958	Identifier	planepts
>12959	Identifier	f
>12960	ExpressionStatement	 
>12961	AssignmentExpr	f -> planepts [ 2 ] [ ( axis + 2 ) % 3 ] = floor ( f -> planepts [ 0 ] [ ( axis + 2 ) % 3 ] + width * \
>12962	CallExpression	floor ( f -> planepts [ 0 ] [ ( axis + 2 ) % 3 ] + width * cv + 0.5 )
>12963	ArgumentList	f -> planepts [ 0 ] [ ( axis + 2 ) % 3 ] + width * cv + 0.5
>12964	Argument	f -> planepts [ 0 ] [ ( axis + 2 ) % 3 ] + width * cv + 0.5
>12965	AdditiveExpression	f -> planepts [ 0 ] [ ( axis + 2 ) % 3 ] + width * cv + 0.5
>12966	AdditiveExpression	width * cv + 0.5
>12967	PrimaryExpression	0.5
>12968	MultiplicativeExpression	width * cv
>12969	Identifier	cv
>12970	Identifier	width
>12971	ArrayIndexing	f -> planepts [ 0 ] [ ( axis + 2 ) % 3 ]
>12972	MultiplicativeExpression	( axis + 2 ) % 3
>12973	PrimaryExpression	3
>12974	AdditiveExpression	axis + 2
>12975	PrimaryExpression	2
>12976	Identifier	axis
>12977	ArrayIndexing	f -> planepts [ 0 ]
>12978	PrimaryExpression	0
>12979	PtrMemberAccess	f -> planepts
>12980	Identifier	planepts
>12981	Identifier	f
>12982	Callee	floor
>12983	Identifier	floor
>12984	ArrayIndexing	f -> planepts [ 2 ] [ ( axis + 2 ) % 3 ]
>12985	MultiplicativeExpression	( axis + 2 ) % 3
>12986	PrimaryExpression	3
>12987	AdditiveExpression	axis + 2
>12988	PrimaryExpression	2
>12989	Identifier	axis
>12990	ArrayIndexing	f -> planepts [ 2 ]
>12991	PrimaryExpression	2
>12992	PtrMemberAccess	f -> planepts
>12993	Identifier	planepts
>12994	Identifier	f
>12995	ExpressionStatement	 
>12996	AssignmentExpr	f -> planepts [ 2 ] [ ( axis + 1 ) % 3 ] = floor ( f -> planepts [ 0 ] [ ( axis + 1 ) % 3 ] - width * \
>12997	CallExpression	floor ( f -> planepts [ 0 ] [ ( axis + 1 ) % 3 ] - width * sv + 0.5 )
>12998	ArgumentList	f -> planepts [ 0 ] [ ( axis + 1 ) % 3 ] - width * sv + 0.5
>12999	Argument	f -> planepts [ 0 ] [ ( axis + 1 ) % 3 ] - width * sv + 0.5
>13000	AdditiveExpression	f -> planepts [ 0 ] [ ( axis + 1 ) % 3 ] - width * sv + 0.5
>13001	AdditiveExpression	width * sv + 0.5
>13002	PrimaryExpression	0.5
>13003	MultiplicativeExpression	width * sv
>13004	Identifier	sv
>13005	Identifier	width
>13006	ArrayIndexing	f -> planepts [ 0 ] [ ( axis + 1 ) % 3 ]
>13007	MultiplicativeExpression	( axis + 1 ) % 3
>13008	PrimaryExpression	3
>13009	AdditiveExpression	axis + 1
>13010	PrimaryExpression	1
>13011	Identifier	axis
>13012	ArrayIndexing	f -> planepts [ 0 ]
>13013	PrimaryExpression	0
>13014	PtrMemberAccess	f -> planepts
>13015	Identifier	planepts
>13016	Identifier	f
>13017	Callee	floor
>13018	Identifier	floor
>13019	ArrayIndexing	f -> planepts [ 2 ] [ ( axis + 1 ) % 3 ]
>13020	MultiplicativeExpression	( axis + 1 ) % 3
>13021	PrimaryExpression	3
>13022	AdditiveExpression	axis + 1
>13023	PrimaryExpression	1
>13024	Identifier	axis
>13025	ArrayIndexing	f -> planepts [ 2 ]
>13026	PrimaryExpression	2
>13027	PtrMemberAccess	f -> planepts
>13028	Identifier	planepts
>13029	Identifier	f
>13030	ExpressionStatement	 
>13031	AssignmentExpr	f -> planepts [ 1 ] [ axis ] = maxs [ axis ]
>13032	ArrayIndexing	maxs [ axis ]
>13033	Identifier	axis
>13034	Identifier	maxs
>13035	ArrayIndexing	f -> planepts [ 1 ] [ axis ]
>13036	Identifier	axis
>13037	ArrayIndexing	f -> planepts [ 1 ]
>13038	PrimaryExpression	1
>13039	PtrMemberAccess	f -> planepts
>13040	Identifier	planepts
>13041	Identifier	f
>13042	ExpressionStatement	 
>13043	AssignmentExpr	f -> planepts [ 1 ] [ ( axis + 2 ) % 3 ] = f -> planepts [ 0 ] [ ( axis + 2 ) % 3 ]
>13044	ArrayIndexing	f -> planepts [ 0 ] [ ( axis + 2 ) % 3 ]
>13045	MultiplicativeExpression	( axis + 2 ) % 3
>13046	PrimaryExpression	3
>13047	AdditiveExpression	axis + 2
>13048	PrimaryExpression	2
>13049	Identifier	axis
>13050	ArrayIndexing	f -> planepts [ 0 ]
>13051	PrimaryExpression	0
>13052	PtrMemberAccess	f -> planepts
>13053	Identifier	planepts
>13054	Identifier	f
>13055	ArrayIndexing	f -> planepts [ 1 ] [ ( axis + 2 ) % 3 ]
>13056	MultiplicativeExpression	( axis + 2 ) % 3
>13057	PrimaryExpression	3
>13058	AdditiveExpression	axis + 2
>13059	PrimaryExpression	2
>13060	Identifier	axis
>13061	ArrayIndexing	f -> planepts [ 1 ]
>13062	PrimaryExpression	1
>13063	PtrMemberAccess	f -> planepts
>13064	Identifier	planepts
>13065	Identifier	f
>13066	ExpressionStatement	 
>13067	AssignmentExpr	f -> planepts [ 1 ] [ ( axis + 1 ) % 3 ] = f -> planepts [ 0 ] [ ( axis + 1 ) % 3 ]
>13068	ArrayIndexing	f -> planepts [ 0 ] [ ( axis + 1 ) % 3 ]
>13069	MultiplicativeExpression	( axis + 1 ) % 3
>13070	PrimaryExpression	3
>13071	AdditiveExpression	axis + 1
>13072	PrimaryExpression	1
>13073	Identifier	axis
>13074	ArrayIndexing	f -> planepts [ 0 ]
>13075	PrimaryExpression	0
>13076	PtrMemberAccess	f -> planepts
>13077	Identifier	planepts
>13078	Identifier	f
>13079	ArrayIndexing	f -> planepts [ 1 ] [ ( axis + 1 ) % 3 ]
>13080	MultiplicativeExpression	( axis + 1 ) % 3
>13081	PrimaryExpression	3
>13082	AdditiveExpression	axis + 1
>13083	PrimaryExpression	1
>13084	Identifier	axis
>13085	ArrayIndexing	f -> planepts [ 1 ]
>13086	PrimaryExpression	1
>13087	PtrMemberAccess	f -> planepts
>13088	Identifier	planepts
>13089	Identifier	f
>13090	ExpressionStatement	 
>13091	AssignmentExpr	f -> planepts [ 0 ] [ axis ] = mins [ axis ]
>13092	ArrayIndexing	mins [ axis ]
>13093	Identifier	axis
>13094	Identifier	mins
>13095	ArrayIndexing	f -> planepts [ 0 ] [ axis ]
>13096	Identifier	axis
>13097	ArrayIndexing	f -> planepts [ 0 ]
>13098	PrimaryExpression	0
>13099	PtrMemberAccess	f -> planepts
>13100	Identifier	planepts
>13101	Identifier	f
>13102	ExpressionStatement	 
>13103	AssignmentExpr	f -> planepts [ 0 ] [ ( axis + 2 ) % 3 ] = floor ( mid [ ( axis + 2 ) % 3 ] + width * sv + 0.5 )
>13104	CallExpression	floor ( mid [ ( axis + 2 ) % 3 ] + width * sv + 0.5 )
>13105	ArgumentList	mid [ ( axis + 2 ) % 3 ] + width * sv + 0.5
>13106	Argument	mid [ ( axis + 2 ) % 3 ] + width * sv + 0.5
>13107	AdditiveExpression	mid [ ( axis + 2 ) % 3 ] + width * sv + 0.5
>13108	AdditiveExpression	width * sv + 0.5
>13109	PrimaryExpression	0.5
>13110	MultiplicativeExpression	width * sv
>13111	Identifier	sv
>13112	Identifier	width
>13113	ArrayIndexing	mid [ ( axis + 2 ) % 3 ]
>13114	MultiplicativeExpression	( axis + 2 ) % 3
>13115	PrimaryExpression	3
>13116	AdditiveExpression	axis + 2
>13117	PrimaryExpression	2
>13118	Identifier	axis
>13119	Identifier	mid
>13120	Callee	floor
>13121	Identifier	floor
>13122	ArrayIndexing	f -> planepts [ 0 ] [ ( axis + 2 ) % 3 ]
>13123	MultiplicativeExpression	( axis + 2 ) % 3
>13124	PrimaryExpression	3
>13125	AdditiveExpression	axis + 2
>13126	PrimaryExpression	2
>13127	Identifier	axis
>13128	ArrayIndexing	f -> planepts [ 0 ]
>13129	PrimaryExpression	0
>13130	PtrMemberAccess	f -> planepts
>13131	Identifier	planepts
>13132	Identifier	f
>13133	ExpressionStatement	 
>13134	AssignmentExpr	f -> planepts [ 0 ] [ ( axis + 1 ) % 3 ] = floor ( mid [ ( axis + 1 ) % 3 ] + width * cv + 0.5 )
>13135	CallExpression	floor ( mid [ ( axis + 1 ) % 3 ] + width * cv + 0.5 )
>13136	ArgumentList	mid [ ( axis + 1 ) % 3 ] + width * cv + 0.5
>13137	Argument	mid [ ( axis + 1 ) % 3 ] + width * cv + 0.5
>13138	AdditiveExpression	mid [ ( axis + 1 ) % 3 ] + width * cv + 0.5
>13139	AdditiveExpression	width * cv + 0.5
>13140	PrimaryExpression	0.5
>13141	MultiplicativeExpression	width * cv
>13142	Identifier	cv
>13143	Identifier	width
>13144	ArrayIndexing	mid [ ( axis + 1 ) % 3 ]
>13145	MultiplicativeExpression	( axis + 1 ) % 3
>13146	PrimaryExpression	3
>13147	AdditiveExpression	axis + 1
>13148	PrimaryExpression	1
>13149	Identifier	axis
>13150	Identifier	mid
>13151	Callee	floor
>13152	Identifier	floor
>13153	ArrayIndexing	f -> planepts [ 0 ] [ ( axis + 1 ) % 3 ]
>13154	MultiplicativeExpression	( axis + 1 ) % 3
>13155	PrimaryExpression	3
>13156	AdditiveExpression	axis + 1
>13157	PrimaryExpression	1
>13158	Identifier	axis
>13159	ArrayIndexing	f -> planepts [ 0 ]
>13160	PrimaryExpression	0
>13161	PtrMemberAccess	f -> planepts
>13162	Identifier	planepts
>13163	Identifier	f
>13164	ExpressionStatement	 
>13165	AssignmentExpr	cv = cos ( i * 3.14159265 * 2 / sides )
>13166	CallExpression	cos ( i * 3.14159265 * 2 / sides )
>13167	ArgumentList	i * 3.14159265 * 2 / sides
>13168	Argument	i * 3.14159265 * 2 / sides
>13169	MultiplicativeExpression	i * 3.14159265 * 2 / sides
>13170	MultiplicativeExpression	3.14159265 * 2 / sides
>13171	MultiplicativeExpression	2 / sides
>13172	Identifier	sides
>13173	PrimaryExpression	2
>13174	PrimaryExpression	3.14159265
>13175	Identifier	i
>13176	Callee	cos
>13177	Identifier	cos
>13178	Identifier	cv
>13179	ExpressionStatement	 
>13180	AssignmentExpr	sv = sin ( i * 3.14159265 * 2 / sides )
>13181	CallExpression	sin ( i * 3.14159265 * 2 / sides )
>13182	ArgumentList	i * 3.14159265 * 2 / sides
>13183	Argument	i * 3.14159265 * 2 / sides
>13184	MultiplicativeExpression	i * 3.14159265 * 2 / sides
>13185	MultiplicativeExpression	3.14159265 * 2 / sides
>13186	MultiplicativeExpression	2 / sides
>13187	Identifier	sides
>13188	PrimaryExpression	2
>13189	PrimaryExpression	3.14159265
>13190	Identifier	i
>13191	Callee	sin
>13192	Identifier	sin
>13193	Identifier	sv
>13194	ExpressionStatement	 
>13195	AssignmentExpr	b -> brush_faces = f
>13196	Identifier	f
>13197	PtrMemberAccess	b -> brush_faces
>13198	Identifier	brush_faces
>13199	Identifier	b
>13200	ExpressionStatement	 
>13201	AssignmentExpr	f -> next = b -> brush_faces
>13202	PtrMemberAccess	b -> brush_faces
>13203	Identifier	brush_faces
>13204	Identifier	b
>13205	PtrMemberAccess	f -> next
>13206	Identifier	next
>13207	Identifier	f
>13208	ExpressionStatement	 
>13209	AssignmentExpr	f -> texdef = * texdef
>13210	UnaryOp	* texdef
>13211	Identifier	texdef
>13212	UnaryOperator	*
>13213	PtrMemberAccess	f -> texdef
>13214	Identifier	texdef
>13215	Identifier	f
>13216	ExpressionStatement	 
>13217	AssignmentExpr	f = Face_Alloc ( )
>13218	CallExpression	Face_Alloc ( )
>13219	ArgumentList	 
>13220	Callee	Face_Alloc
>13221	Identifier	Face_Alloc
>13222	Identifier	f
>13223	IncDecOp	 
>13224	IncDec	++
>13225	Identifier	i
>13226	Condition	 
>13227	RelationalExpression	i < sides
>13228	Identifier	sides
>13229	Identifier	i
>13230	ForInit	 
>13231	AssignmentExpr	i = 0
>13232	PrimaryExpression	0
>13233	Identifier	i
>13234	ExpressionStatement	 
>13235	AssignmentExpr	f -> planepts [ 2 ] [ axis ] = mins [ axis ]
>13236	ArrayIndexing	mins [ axis ]
>13237	Identifier	axis
>13238	Identifier	mins
>13239	ArrayIndexing	f -> planepts [ 2 ] [ axis ]
>13240	Identifier	axis
>13241	ArrayIndexing	f -> planepts [ 2 ]
>13242	PrimaryExpression	2
>13243	PtrMemberAccess	f -> planepts
>13244	Identifier	planepts
>13245	Identifier	f
>13246	ExpressionStatement	 
>13247	AssignmentExpr	f -> planepts [ 2 ] [ ( axis + 2 ) % 3 ] = maxs [ ( axis + 2 ) % 3 ]
>13248	ArrayIndexing	maxs [ ( axis + 2 ) % 3 ]
>13249	MultiplicativeExpression	( axis + 2 ) % 3
>13250	PrimaryExpression	3
>13251	AdditiveExpression	axis + 2
>13252	PrimaryExpression	2
>13253	Identifier	axis
>13254	Identifier	maxs
>13255	ArrayIndexing	f -> planepts [ 2 ] [ ( axis + 2 ) % 3 ]
>13256	MultiplicativeExpression	( axis + 2 ) % 3
>13257	PrimaryExpression	3
>13258	AdditiveExpression	axis + 2
>13259	PrimaryExpression	2
>13260	Identifier	axis
>13261	ArrayIndexing	f -> planepts [ 2 ]
>13262	PrimaryExpression	2
>13263	PtrMemberAccess	f -> planepts
>13264	Identifier	planepts
>13265	Identifier	f
>13266	ExpressionStatement	 
>13267	AssignmentExpr	f -> planepts [ 2 ] [ ( axis + 1 ) % 3 ] = maxs [ ( axis + 1 ) % 3 ]
>13268	ArrayIndexing	maxs [ ( axis + 1 ) % 3 ]
>13269	MultiplicativeExpression	( axis + 1 ) % 3
>13270	PrimaryExpression	3
>13271	AdditiveExpression	axis + 1
>13272	PrimaryExpression	1
>13273	Identifier	axis
>13274	Identifier	maxs
>13275	ArrayIndexing	f -> planepts [ 2 ] [ ( axis + 1 ) % 3 ]
>13276	MultiplicativeExpression	( axis + 1 ) % 3
>13277	PrimaryExpression	3
>13278	AdditiveExpression	axis + 1
>13279	PrimaryExpression	1
>13280	Identifier	axis
>13281	ArrayIndexing	f -> planepts [ 2 ]
>13282	PrimaryExpression	2
>13283	PtrMemberAccess	f -> planepts
>13284	Identifier	planepts
>13285	Identifier	f
>13286	ExpressionStatement	 
>13287	AssignmentExpr	f -> planepts [ 1 ] [ axis ] = mins [ axis ]
>13288	ArrayIndexing	mins [ axis ]
>13289	Identifier	axis
>13290	Identifier	mins
>13291	ArrayIndexing	f -> planepts [ 1 ] [ axis ]
>13292	Identifier	axis
>13293	ArrayIndexing	f -> planepts [ 1 ]
>13294	PrimaryExpression	1
>13295	PtrMemberAccess	f -> planepts
>13296	Identifier	planepts
>13297	Identifier	f
>13298	ExpressionStatement	 
>13299	AssignmentExpr	f -> planepts [ 1 ] [ ( axis + 2 ) % 3 ] = mins [ ( axis + 2 ) % 3 ]
>13300	ArrayIndexing	mins [ ( axis + 2 ) % 3 ]
>13301	MultiplicativeExpression	( axis + 2 ) % 3
>13302	PrimaryExpression	3
>13303	AdditiveExpression	axis + 2
>13304	PrimaryExpression	2
>13305	Identifier	axis
>13306	Identifier	mins
>13307	ArrayIndexing	f -> planepts [ 1 ] [ ( axis + 2 ) % 3 ]
>13308	MultiplicativeExpression	( axis + 2 ) % 3
>13309	PrimaryExpression	3
>13310	AdditiveExpression	axis + 2
>13311	PrimaryExpression	2
>13312	Identifier	axis
>13313	ArrayIndexing	f -> planepts [ 1 ]
>13314	PrimaryExpression	1
>13315	PtrMemberAccess	f -> planepts
>13316	Identifier	planepts
>13317	Identifier	f
>13318	ExpressionStatement	 
>13319	AssignmentExpr	f -> planepts [ 1 ] [ ( axis + 1 ) % 3 ] = maxs [ ( axis + 1 ) % 3 ]
>13320	ArrayIndexing	maxs [ ( axis + 1 ) % 3 ]
>13321	MultiplicativeExpression	( axis + 1 ) % 3
>13322	PrimaryExpression	3
>13323	AdditiveExpression	axis + 1
>13324	PrimaryExpression	1
>13325	Identifier	axis
>13326	Identifier	maxs
>13327	ArrayIndexing	f -> planepts [ 1 ] [ ( axis + 1 ) % 3 ]
>13328	MultiplicativeExpression	( axis + 1 ) % 3
>13329	PrimaryExpression	3
>13330	AdditiveExpression	axis + 1
>13331	PrimaryExpression	1
>13332	Identifier	axis
>13333	ArrayIndexing	f -> planepts [ 1 ]
>13334	PrimaryExpression	1
>13335	PtrMemberAccess	f -> planepts
>13336	Identifier	planepts
>13337	Identifier	f
>13338	ExpressionStatement	 
>13339	AssignmentExpr	f -> planepts [ 0 ] [ axis ] = mins [ axis ]
>13340	ArrayIndexing	mins [ axis ]
>13341	Identifier	axis
>13342	Identifier	mins
>13343	ArrayIndexing	f -> planepts [ 0 ] [ axis ]
>13344	Identifier	axis
>13345	ArrayIndexing	f -> planepts [ 0 ]
>13346	PrimaryExpression	0
>13347	PtrMemberAccess	f -> planepts
>13348	Identifier	planepts
>13349	Identifier	f
>13350	ExpressionStatement	 
>13351	AssignmentExpr	f -> planepts [ 0 ] [ ( axis + 2 ) % 3 ] = mins [ ( axis + 2 ) % 3 ]
>13352	ArrayIndexing	mins [ ( axis + 2 ) % 3 ]
>13353	MultiplicativeExpression	( axis + 2 ) % 3
>13354	PrimaryExpression	3
>13355	AdditiveExpression	axis + 2
>13356	PrimaryExpression	2
>13357	Identifier	axis
>13358	Identifier	mins
>13359	ArrayIndexing	f -> planepts [ 0 ] [ ( axis + 2 ) % 3 ]
>13360	MultiplicativeExpression	( axis + 2 ) % 3
>13361	PrimaryExpression	3
>13362	AdditiveExpression	axis + 2
>13363	PrimaryExpression	2
>13364	Identifier	axis
>13365	ArrayIndexing	f -> planepts [ 0 ]
>13366	PrimaryExpression	0
>13367	PtrMemberAccess	f -> planepts
>13368	Identifier	planepts
>13369	Identifier	f
>13370	ExpressionStatement	 
>13371	AssignmentExpr	f -> planepts [ 0 ] [ ( axis + 1 ) % 3 ] = mins [ ( axis + 1 ) % 3 ]
>13372	ArrayIndexing	mins [ ( axis + 1 ) % 3 ]
>13373	MultiplicativeExpression	( axis + 1 ) % 3
>13374	PrimaryExpression	3
>13375	AdditiveExpression	axis + 1
>13376	PrimaryExpression	1
>13377	Identifier	axis
>13378	Identifier	mins
>13379	ArrayIndexing	f -> planepts [ 0 ] [ ( axis + 1 ) % 3 ]
>13380	MultiplicativeExpression	( axis + 1 ) % 3
>13381	PrimaryExpression	3
>13382	AdditiveExpression	axis + 1
>13383	PrimaryExpression	1
>13384	Identifier	axis
>13385	ArrayIndexing	f -> planepts [ 0 ]
>13386	PrimaryExpression	0
>13387	PtrMemberAccess	f -> planepts
>13388	Identifier	planepts
>13389	Identifier	f
>13390	ExpressionStatement	 
>13391	AssignmentExpr	b -> brush_faces = f
>13392	Identifier	f
>13393	PtrMemberAccess	b -> brush_faces
>13394	Identifier	brush_faces
>13395	Identifier	b
>13396	ExpressionStatement	 
>13397	AssignmentExpr	f -> next = b -> brush_faces
>13398	PtrMemberAccess	b -> brush_faces
>13399	Identifier	brush_faces
>13400	Identifier	b
>13401	PtrMemberAccess	f -> next
>13402	Identifier	next
>13403	Identifier	f
>13404	ExpressionStatement	 
>13405	AssignmentExpr	f -> texdef = * texdef
>13406	UnaryOp	* texdef
>13407	Identifier	texdef
>13408	UnaryOperator	*
>13409	PtrMemberAccess	f -> texdef
>13410	Identifier	texdef
>13411	Identifier	f
>13412	ExpressionStatement	 
>13413	AssignmentExpr	f = Face_Alloc ( )
>13414	CallExpression	Face_Alloc ( )
>13415	ArgumentList	 
>13416	Callee	Face_Alloc
>13417	Identifier	Face_Alloc
>13418	Identifier	f
>13419	ExpressionStatement	 
>13420	AssignmentExpr	f -> planepts [ 0 ] [ axis ] = maxs [ axis ]
>13421	ArrayIndexing	maxs [ axis ]
>13422	Identifier	axis
>13423	Identifier	maxs
>13424	ArrayIndexing	f -> planepts [ 0 ] [ axis ]
>13425	Identifier	axis
>13426	ArrayIndexing	f -> planepts [ 0 ]
>13427	PrimaryExpression	0
>13428	PtrMemberAccess	f -> planepts
>13429	Identifier	planepts
>13430	Identifier	f
>13431	ExpressionStatement	 
>13432	AssignmentExpr	f -> planepts [ 0 ] [ ( axis + 2 ) % 3 ] = maxs [ ( axis + 2 ) % 3 ]
>13433	ArrayIndexing	maxs [ ( axis + 2 ) % 3 ]
>13434	MultiplicativeExpression	( axis + 2 ) % 3
>13435	PrimaryExpression	3
>13436	AdditiveExpression	axis + 2
>13437	PrimaryExpression	2
>13438	Identifier	axis
>13439	Identifier	maxs
>13440	ArrayIndexing	f -> planepts [ 0 ] [ ( axis + 2 ) % 3 ]
>13441	MultiplicativeExpression	( axis + 2 ) % 3
>13442	PrimaryExpression	3
>13443	AdditiveExpression	axis + 2
>13444	PrimaryExpression	2
>13445	Identifier	axis
>13446	ArrayIndexing	f -> planepts [ 0 ]
>13447	PrimaryExpression	0
>13448	PtrMemberAccess	f -> planepts
>13449	Identifier	planepts
>13450	Identifier	f
>13451	ExpressionStatement	 
>13452	AssignmentExpr	f -> planepts [ 0 ] [ ( axis + 1 ) % 3 ] = maxs [ ( axis + 1 ) % 3 ]
>13453	ArrayIndexing	maxs [ ( axis + 1 ) % 3 ]
>13454	MultiplicativeExpression	( axis + 1 ) % 3
>13455	PrimaryExpression	3
>13456	AdditiveExpression	axis + 1
>13457	PrimaryExpression	1
>13458	Identifier	axis
>13459	Identifier	maxs
>13460	ArrayIndexing	f -> planepts [ 0 ] [ ( axis + 1 ) % 3 ]
>13461	MultiplicativeExpression	( axis + 1 ) % 3
>13462	PrimaryExpression	3
>13463	AdditiveExpression	axis + 1
>13464	PrimaryExpression	1
>13465	Identifier	axis
>13466	ArrayIndexing	f -> planepts [ 0 ]
>13467	PrimaryExpression	0
>13468	PtrMemberAccess	f -> planepts
>13469	Identifier	planepts
>13470	Identifier	f
>13471	ExpressionStatement	 
>13472	AssignmentExpr	f -> planepts [ 1 ] [ axis ] = maxs [ axis ]
>13473	ArrayIndexing	maxs [ axis ]
>13474	Identifier	axis
>13475	Identifier	maxs
>13476	ArrayIndexing	f -> planepts [ 1 ] [ axis ]
>13477	Identifier	axis
>13478	ArrayIndexing	f -> planepts [ 1 ]
>13479	PrimaryExpression	1
>13480	PtrMemberAccess	f -> planepts
>13481	Identifier	planepts
>13482	Identifier	f
>13483	ExpressionStatement	 
>13484	AssignmentExpr	f -> planepts [ 1 ] [ ( axis + 2 ) % 3 ] = mins [ ( axis + 2 ) % 3 ]
>13485	ArrayIndexing	mins [ ( axis + 2 ) % 3 ]
>13486	MultiplicativeExpression	( axis + 2 ) % 3
>13487	PrimaryExpression	3
>13488	AdditiveExpression	axis + 2
>13489	PrimaryExpression	2
>13490	Identifier	axis
>13491	Identifier	mins
>13492	ArrayIndexing	f -> planepts [ 1 ] [ ( axis + 2 ) % 3 ]
>13493	MultiplicativeExpression	( axis + 2 ) % 3
>13494	PrimaryExpression	3
>13495	AdditiveExpression	axis + 2
>13496	PrimaryExpression	2
>13497	Identifier	axis
>13498	ArrayIndexing	f -> planepts [ 1 ]
>13499	PrimaryExpression	1
>13500	PtrMemberAccess	f -> planepts
>13501	Identifier	planepts
>13502	Identifier	f
>13503	ExpressionStatement	 
>13504	AssignmentExpr	f -> planepts [ 1 ] [ ( axis + 1 ) % 3 ] = maxs [ ( axis + 1 ) % 3 ]
>13505	ArrayIndexing	maxs [ ( axis + 1 ) % 3 ]
>13506	MultiplicativeExpression	( axis + 1 ) % 3
>13507	PrimaryExpression	3
>13508	AdditiveExpression	axis + 1
>13509	PrimaryExpression	1
>13510	Identifier	axis
>13511	Identifier	maxs
>13512	ArrayIndexing	f -> planepts [ 1 ] [ ( axis + 1 ) % 3 ]
>13513	MultiplicativeExpression	( axis + 1 ) % 3
>13514	PrimaryExpression	3
>13515	AdditiveExpression	axis + 1
>13516	PrimaryExpression	1
>13517	Identifier	axis
>13518	ArrayIndexing	f -> planepts [ 1 ]
>13519	PrimaryExpression	1
>13520	PtrMemberAccess	f -> planepts
>13521	Identifier	planepts
>13522	Identifier	f
>13523	ExpressionStatement	 
>13524	AssignmentExpr	f -> planepts [ 2 ] [ axis ] = maxs [ axis ]
>13525	ArrayIndexing	maxs [ axis ]
>13526	Identifier	axis
>13527	Identifier	maxs
>13528	ArrayIndexing	f -> planepts [ 2 ] [ axis ]
>13529	Identifier	axis
>13530	ArrayIndexing	f -> planepts [ 2 ]
>13531	PrimaryExpression	2
>13532	PtrMemberAccess	f -> planepts
>13533	Identifier	planepts
>13534	Identifier	f
>13535	ExpressionStatement	 
>13536	AssignmentExpr	f -> planepts [ 2 ] [ ( axis + 2 ) % 3 ] = mins [ ( axis + 2 ) % 3 ]
>13537	ArrayIndexing	mins [ ( axis + 2 ) % 3 ]
>13538	MultiplicativeExpression	( axis + 2 ) % 3
>13539	PrimaryExpression	3
>13540	AdditiveExpression	axis + 2
>13541	PrimaryExpression	2
>13542	Identifier	axis
>13543	Identifier	mins
>13544	ArrayIndexing	f -> planepts [ 2 ] [ ( axis + 2 ) % 3 ]
>13545	MultiplicativeExpression	( axis + 2 ) % 3
>13546	PrimaryExpression	3
>13547	AdditiveExpression	axis + 2
>13548	PrimaryExpression	2
>13549	Identifier	axis
>13550	ArrayIndexing	f -> planepts [ 2 ]
>13551	PrimaryExpression	2
>13552	PtrMemberAccess	f -> planepts
>13553	Identifier	planepts
>13554	Identifier	f
>13555	ExpressionStatement	 
>13556	AssignmentExpr	f -> planepts [ 2 ] [ ( axis + 1 ) % 3 ] = mins [ ( axis + 1 ) % 3 ]
>13557	ArrayIndexing	mins [ ( axis + 1 ) % 3 ]
>13558	MultiplicativeExpression	( axis + 1 ) % 3
>13559	PrimaryExpression	3
>13560	AdditiveExpression	axis + 1
>13561	PrimaryExpression	1
>13562	Identifier	axis
>13563	Identifier	mins
>13564	ArrayIndexing	f -> planepts [ 2 ] [ ( axis + 1 ) % 3 ]
>13565	MultiplicativeExpression	( axis + 1 ) % 3
>13566	PrimaryExpression	3
>13567	AdditiveExpression	axis + 1
>13568	PrimaryExpression	1
>13569	Identifier	axis
>13570	ArrayIndexing	f -> planepts [ 2 ]
>13571	PrimaryExpression	2
>13572	PtrMemberAccess	f -> planepts
>13573	Identifier	planepts
>13574	Identifier	f
>13575	ExpressionStatement	 
>13576	AssignmentExpr	b -> brush_faces = f
>13577	Identifier	f
>13578	PtrMemberAccess	b -> brush_faces
>13579	Identifier	brush_faces
>13580	Identifier	b
>13581	ExpressionStatement	 
>13582	AssignmentExpr	f -> next = b -> brush_faces
>13583	PtrMemberAccess	b -> brush_faces
>13584	Identifier	brush_faces
>13585	Identifier	b
>13586	PtrMemberAccess	f -> next
>13587	Identifier	next
>13588	Identifier	f
>13589	ExpressionStatement	 
>13590	AssignmentExpr	f -> texdef = * texdef
>13591	UnaryOp	* texdef
>13592	Identifier	texdef
>13593	UnaryOperator	*
>13594	PtrMemberAccess	f -> texdef
>13595	Identifier	texdef
>13596	Identifier	f
>13597	ExpressionStatement	 
>13598	AssignmentExpr	f = Face_Alloc ( )
>13599	CallExpression	Face_Alloc ( )
>13600	ArgumentList	 
>13601	Callee	Face_Alloc
>13602	Identifier	Face_Alloc
>13603	Identifier	f
>13604	ExpressionStatement	 
>13605	AssignmentExpr	b = Brush_Alloc ( )
>13606	CallExpression	Brush_Alloc ( )
>13607	ArgumentList	 
>13608	Callee	Brush_Alloc
>13609	Identifier	Brush_Alloc
>13610	Identifier	b
>13611	ForStatement	for ( i = 0 ; i < 3 ; i ++ )
>13612	CompoundStatement	 
>13613	IfStatement	if ( ( maxs [ i ] - mins [ i ] ) * 0.5 > width )
>13614	ExpressionStatement	 
>13615	AssignmentExpr	width = ( maxs [ i ] - mins [ i ] ) * 0.5
>13616	MultiplicativeExpression	( maxs [ i ] - mins [ i ] ) * 0.5
>13617	PrimaryExpression	0.5
>13618	AdditiveExpression	maxs [ i ] - mins [ i ]
>13619	ArrayIndexing	mins [ i ]
>13620	Identifier	i
>13621	Identifier	mins
>13622	ArrayIndexing	maxs [ i ]
>13623	Identifier	i
>13624	Identifier	maxs
>13625	Identifier	width
>13626	Condition	 
>13627	RelationalExpression	( maxs [ i ] - mins [ i ] ) * 0.5 > width
>13628	Identifier	width
>13629	MultiplicativeExpression	( maxs [ i ] - mins [ i ] ) * 0.5
>13630	PrimaryExpression	0.5
>13631	AdditiveExpression	maxs [ i ] - mins [ i ]
>13632	ArrayIndexing	mins [ i ]
>13633	Identifier	i
>13634	Identifier	mins
>13635	ArrayIndexing	maxs [ i ]
>13636	Identifier	i
>13637	Identifier	maxs
>13638	IfStatement	if ( i == axis )
>13639	ContinueStatement	 
>13640	Condition	 
>13641	EqualityExpression	i == axis
>13642	Identifier	axis
>13643	Identifier	i
>13644	ExpressionStatement	 
>13645	AssignmentExpr	mid [ i ] = ( maxs [ i ] + mins [ i ] ) * 0.5
>13646	MultiplicativeExpression	( maxs [ i ] + mins [ i ] ) * 0.5
>13647	PrimaryExpression	0.5
>13648	AdditiveExpression	maxs [ i ] + mins [ i ]
>13649	ArrayIndexing	mins [ i ]
>13650	Identifier	i
>13651	Identifier	mins
>13652	ArrayIndexing	maxs [ i ]
>13653	Identifier	i
>13654	Identifier	maxs
>13655	ArrayIndexing	mid [ i ]
>13656	Identifier	i
>13657	Identifier	mid
>13658	IncDecOp	 
>13659	IncDec	++
>13660	Identifier	i
>13661	Condition	 
>13662	RelationalExpression	i < 3
>13663	PrimaryExpression	3
>13664	Identifier	i
>13665	ForInit	 
>13666	AssignmentExpr	i = 0
>13667	PrimaryExpression	0
>13668	Identifier	i
>13669	ExpressionStatement	 
>13670	AssignmentExpr	width = 8
>13671	PrimaryExpression	8
>13672	Identifier	width
>13673	IfStatement	if ( g_pParentWnd -> ActiveXY ( ) )
>13674	ElseStatement	else
>13675	CompoundStatement	 
>13676	ExpressionStatement	 
>13677	AssignmentExpr	axis = 2
>13678	PrimaryExpression	2
>13679	Identifier	axis
>13680	CompoundStatement	 
>13681	SwitchStatement	switch ( g_pParentWnd -> ActiveXY ( ) -> GetViewType ( ) )
>13682	CompoundStatement	 
>13683	BreakStatement	 
>13684	ExpressionStatement	 
>13685	AssignmentExpr	axis = 0
>13686	PrimaryExpression	0
>13687	Identifier	axis
>13688	Label	 
>13689	Identifier	YZ
>13690	BreakStatement	 
>13691	ExpressionStatement	 
>13692	AssignmentExpr	axis = 1
>13693	PrimaryExpression	1
>13694	Identifier	axis
>13695	Label	 
>13696	Identifier	XZ
>13697	BreakStatement	 
>13698	ExpressionStatement	 
>13699	AssignmentExpr	axis = 2
>13700	PrimaryExpression	2
>13701	Identifier	axis
>13702	Label	 
>13703	Identifier	XY
>13704	Condition	 
>13705	CallExpression	g_pParentWnd -> ActiveXY ( ) -> GetViewType ( )
>13706	ArgumentList	 
>13707	Callee	g_pParentWnd -> ActiveXY ( ) -> GetViewType
>13708	PtrMemberAccess	g_pParentWnd -> ActiveXY ( ) -> GetViewType
>13709	Identifier	GetViewType
>13710	CallExpression	g_pParentWnd -> ActiveXY ( )
>13711	ArgumentList	 
>13712	Callee	g_pParentWnd -> ActiveXY
>13713	PtrMemberAccess	g_pParentWnd -> ActiveXY
>13714	Identifier	ActiveXY
>13715	Identifier	g_pParentWnd
>13716	Condition	 
>13717	CallExpression	g_pParentWnd -> ActiveXY ( )
>13718	ArgumentList	 
>13719	Callee	g_pParentWnd -> ActiveXY
>13720	PtrMemberAccess	g_pParentWnd -> ActiveXY
>13721	Identifier	ActiveXY
>13722	Identifier	g_pParentWnd
>13723	ExpressionStatement	 
>13724	CallExpression	Brush_Free ( b )
>13725	ArgumentList	b
>13726	Argument	b
>13727	Identifier	b
>13728	Callee	Brush_Free
>13729	Identifier	Brush_Free
>13730	ExpressionStatement	 
>13731	AssignmentExpr	texdef = & g_qeglobals . d_texturewin . texdef
>13732	UnaryOp	& g_qeglobals . d_texturewin . texdef
>13733	MemberAccess	g_qeglobals . d_texturewin . texdef
>13734	Identifier	texdef
>13735	MemberAccess	g_qeglobals . d_texturewin
>13736	Identifier	d_texturewin
>13737	Identifier	g_qeglobals
>13738	UnaryOperator	&
>13739	Identifier	texdef
>13740	ExpressionStatement	 
>13741	CallExpression	VectorCopy ( b -> maxs , maxs )
>13742	ArgumentList	b -> maxs
>13743	Argument	maxs
>13744	Identifier	maxs
>13745	Argument	b -> maxs
>13746	PtrMemberAccess	b -> maxs
>13747	Identifier	maxs
>13748	Identifier	b
>13749	Callee	VectorCopy
>13750	Identifier	VectorCopy
>13751	ExpressionStatement	 
>13752	CallExpression	VectorCopy ( b -> mins , mins )
>13753	ArgumentList	b -> mins
>13754	Argument	mins
>13755	Identifier	mins
>13756	Argument	b -> mins
>13757	PtrMemberAccess	b -> mins
>13758	Identifier	mins
>13759	Identifier	b
>13760	Callee	VectorCopy
>13761	Identifier	VectorCopy
>13762	ExpressionStatement	 
>13763	AssignmentExpr	b = selected_brushes . next
>13764	MemberAccess	selected_brushes . next
>13765	Identifier	next
>13766	Identifier	selected_brushes
>13767	Identifier	b
>13768	IfStatement	if ( ! QE_SingleBrush ( ) )
>13769	CompoundStatement	 
>13770	ReturnStatement	 
>13771	ExpressionStatement	 
>13772	CallExpression	Sys_Status ( \"Must have a single brush selected\" , 0 )
>13773	ArgumentList	\"Must have a single brush selected\"
>13774	Argument	0
>13775	PrimaryExpression	0
>13776	Argument	\"Must have a single brush selected\"
>13777	PrimaryExpression	\"Must have a single brush selected\"
>13778	Callee	Sys_Status
>13779	Identifier	Sys_Status
>13780	Condition	 
>13781	UnaryOp	! QE_SingleBrush ( )
>13782	CallExpression	QE_SingleBrush ( )
>13783	ArgumentList	 
>13784	Callee	QE_SingleBrush
>13785	Identifier	QE_SingleBrush
>13786	UnaryOperator	!
>13787	IfStatement	if ( sides >= MAX_POINTS_ON_WINDING - 4 )
>13788	CompoundStatement	 
>13789	ReturnStatement	 
>13790	ExpressionStatement	 
>13791	CallExpression	Sys_Printf ( \"too many sides.\n\" )
>13792	ArgumentList	\"too many sides.\n\"
>13793	Argument	\"too many sides.\n\"
>13794	PrimaryExpression	\"too many sides.\n\"
>13795	Callee	Sys_Printf
>13796	Identifier	Sys_Printf
>13797	Condition	 
>13798	RelationalExpression	sides >= MAX_POINTS_ON_WINDING - 4
>13799	AdditiveExpression	MAX_POINTS_ON_WINDING - 4
>13800	PrimaryExpression	4
>13801	Identifier	MAX_POINTS_ON_WINDING
>13802	Identifier	sides
>13803	IfStatement	if ( sides < 3 )
>13804	CompoundStatement	 
>13805	ReturnStatement	 
>13806	ExpressionStatement	 
>13807	CallExpression	Sys_Status ( \"Bad sides number\" , 0 )
>13808	ArgumentList	\"Bad sides number\"
>13809	Argument	0
>13810	PrimaryExpression	0
>13811	Argument	\"Bad sides number\"
>13812	PrimaryExpression	\"Bad sides number\"
>13813	Callee	Sys_Status
>13814	Identifier	Sys_Status
>13815	Condition	 
>13816	RelationalExpression	sides < 3
>13817	PrimaryExpression	3
>13818	Identifier	sides
>13819	IdentifierDeclStatement	 
>13820	IdentifierDecl	cv
>13821	Identifier	cv
>13822	IdentifierDeclType	float
>13823	IdentifierDecl	sv
>13824	Identifier	sv
>13825	IdentifierDeclType	float
>13826	IdentifierDeclStatement	 
>13827	IdentifierDecl	width
>13828	Identifier	width
>13829	IdentifierDeclType	float
>13830	IdentifierDeclStatement	 
>13831	IdentifierDecl	mid
>13832	Identifier	mid
>13833	IdentifierDeclType	vec3_t
>13834	IdentifierDeclStatement	 
>13835	IdentifierDecl	* f
>13836	Identifier	f
>13837	IdentifierDeclType	face_t *
>13838	IdentifierDeclStatement	 
>13839	IdentifierDecl	* texdef
>13840	Identifier	texdef
>13841	IdentifierDeclType	texdef_t *
>13842	IdentifierDeclStatement	 
>13843	IdentifierDecl	* b
>13844	Identifier	b
>13845	IdentifierDeclType	brush_t *
>13846	IdentifierDeclStatement	 
>13847	IdentifierDecl	maxs
>13848	Identifier	maxs
>13849	IdentifierDeclType	vec3_t
>13850	IdentifierDecl	mins
>13851	Identifier	mins
>13852	IdentifierDeclType	vec3_t
>13853	IdentifierDeclStatement	 
>13854	IdentifierDecl	axis
>13855	Identifier	axis
>13856	IdentifierDeclType	int
>13857	IdentifierDecl	i
>13858	Identifier	i
>13859	IdentifierDeclType	int
>13916	FunctionDef	Brush_Free (brush_t * b , bool bRemoveNode)
>13917	ParameterList	brush_t * b , bool bRemoveNode
>13918	Parameter	 
>13919	Identifier	bRemoveNode
>13920	ParameterType	bool
>13921	Parameter	 
>13922	Identifier	b
>13923	ParameterType	brush_t *
>13924	ReturnType	void
>13925	CompoundStatement	 
>13926	ExpressionStatement	 
>13927	CallExpression	free ( b )
>13928	ArgumentList	b
>13929	Argument	b
>13930	Identifier	b
>13931	Callee	free
>13932	Identifier	free
>13933	IfStatement	if ( b -> onext )
>13934	ExpressionStatement	 
>13935	CallExpression	Entity_UnlinkBrush ( b )
>13936	ArgumentList	b
>13937	Argument	b
>13938	Identifier	b
>13939	Callee	Entity_UnlinkBrush
>13940	Identifier	Entity_UnlinkBrush
>13941	Condition	 
>13942	PtrMemberAccess	b -> onext
>13943	Identifier	onext
>13944	Identifier	b
>13945	IfStatement	if ( b -> next )
>13946	ExpressionStatement	 
>13947	CallExpression	Brush_RemoveFromList ( b )
>13948	ArgumentList	b
>13949	Argument	b
>13950	Identifier	b
>13951	Callee	Brush_RemoveFromList
>13952	Identifier	Brush_RemoveFromList
>13953	Condition	 
>13954	PtrMemberAccess	b -> next
>13955	Identifier	next
>13956	Identifier	b
>13957	ForStatement	for ( ep = b -> epairs ; ep ; ep = enext )
>13958	CompoundStatement	 
>13959	ExpressionStatement	 
>13960	CallExpression	free ( ep )
>13961	ArgumentList	ep
>13962	Argument	ep
>13963	Identifier	ep
>13964	Callee	free
>13965	Identifier	free
>13966	ExpressionStatement	 
>13967	CallExpression	free ( ep -> value )
>13968	ArgumentList	ep -> value
>13969	Argument	ep -> value
>13970	PtrMemberAccess	ep -> value
>13971	Identifier	value
>13972	Identifier	ep
>13973	Callee	free
>13974	Identifier	free
>13975	ExpressionStatement	 
>13976	CallExpression	free ( ep -> key )
>13977	ArgumentList	ep -> key
>13978	Argument	ep -> key
>13979	PtrMemberAccess	ep -> key
>13980	Identifier	key
>13981	Identifier	ep
>13982	Callee	free
>13983	Identifier	free
>13984	ExpressionStatement	 
>13985	AssignmentExpr	enext = ep -> next
>13986	PtrMemberAccess	ep -> next
>13987	Identifier	next
>13988	Identifier	ep
>13989	Identifier	enext
>13990	AssignmentExpr	 
>13991	Identifier	enext
>13992	Identifier	ep
>13993	Condition	 
>13994	Identifier	ep
>13995	ForInit	 
>13996	AssignmentExpr	ep = b -> epairs
>13997	PtrMemberAccess	b -> epairs
>13998	Identifier	epairs
>13999	Identifier	b
>14000	Identifier	ep
>14001	ForStatement	for ( f = b -> brush_faces ; f ; f = next )
>14002	CompoundStatement	 
>14003	ExpressionStatement	 
>14004	CallExpression	Face_Free ( f )
>14005	ArgumentList	f
>14006	Argument	f
>14007	Identifier	f
>14008	Callee	Face_Free
>14009	Identifier	Face_Free
>14010	ExpressionStatement	 
>14011	AssignmentExpr	next = f -> next
>14012	PtrMemberAccess	f -> next
>14013	Identifier	next
>14014	Identifier	f
>14015	Identifier	next
>14016	AssignmentExpr	 
>14017	Identifier	next
>14018	Identifier	f
>14019	Condition	 
>14020	Identifier	f
>14021	ForInit	 
>14022	AssignmentExpr	f = b -> brush_faces
>14023	PtrMemberAccess	b -> brush_faces
>14024	Identifier	brush_faces
>14025	Identifier	b
>14026	Identifier	f
>14027	IfStatement	if ( b -> terrainBrush )
>14028	CompoundStatement	 
>14029	ExpressionStatement	 
>14030	CallExpression	Terrain_Delete ( b -> pTerrain )
>14031	ArgumentList	b -> pTerrain
>14032	Argument	b -> pTerrain
>14033	PtrMemberAccess	b -> pTerrain
>14034	Identifier	pTerrain
>14035	Identifier	b
>14036	Callee	Terrain_Delete
>14037	Identifier	Terrain_Delete
>14038	Condition	 
>14039	PtrMemberAccess	b -> terrainBrush
>14040	Identifier	terrainBrush
>14041	Identifier	b
>14042	IfStatement	if ( b -> patchBrush )
>14043	CompoundStatement	 
>14044	ExpressionStatement	 
>14045	CallExpression	Patch_Delete ( b -> pPatch )
>14046	ArgumentList	b -> pPatch
>14047	Argument	b -> pPatch
>14048	PtrMemberAccess	b -> pPatch
>14049	Identifier	pPatch
>14050	Identifier	b
>14051	Callee	Patch_Delete
>14052	Identifier	Patch_Delete
>14053	Condition	 
>14054	PtrMemberAccess	b -> patchBrush
>14055	Identifier	patchBrush
>14056	Identifier	b
>14057	IfStatement	if ( bRemoveNode )
>14058	ExpressionStatement	 
>14059	CallExpression	Group_RemoveBrush ( b )
>14060	ArgumentList	b
>14061	Argument	b
>14062	Identifier	b
>14063	Callee	Group_RemoveBrush
>14064	Identifier	Group_RemoveBrush
>14065	Condition	 
>14066	Identifier	bRemoveNode
>14067	IdentifierDeclStatement	 
>14068	IdentifierDecl	* enext
>14069	Identifier	enext
>14070	IdentifierDeclType	epair_t *
>14071	IdentifierDecl	* ep
>14072	Identifier	ep
>14073	IdentifierDeclType	epair_t *
>14074	IdentifierDeclStatement	 
>14075	IdentifierDecl	* next
>14076	Identifier	next
>14077	IdentifierDeclType	face_t *
>14078	IdentifierDecl	* f
>14079	Identifier	f
>14080	IdentifierDeclType	face_t *
>14105	FunctionDef	Face_MemorySize (face_t * f)
>14106	ParameterList	face_t * f
>14107	Parameter	 
>14108	Identifier	f
>14109	ParameterType	face_t *
>14110	ReturnType	int
>14111	CompoundStatement	 
>14112	ReturnStatement	 
>14113	Identifier	size
>14114	ExpressionStatement	 
>14115	AssignmentExpr	size += _msize ( f )
>14116	CallExpression	_msize ( f )
>14117	ArgumentList	f
>14118	Argument	f
>14119	Identifier	f
>14120	Callee	_msize
>14121	Identifier	_msize
>14122	Identifier	size
>14123	IfStatement	if ( f -> face_winding )
>14124	CompoundStatement	 
>14125	ExpressionStatement	 
>14126	AssignmentExpr	size += _msize ( f -> face_winding )
>14127	CallExpression	_msize ( f -> face_winding )
>14128	ArgumentList	f -> face_winding
>14129	Argument	f -> face_winding
>14130	PtrMemberAccess	f -> face_winding
>14131	Identifier	face_winding
>14132	Identifier	f
>14133	Callee	_msize
>14134	Identifier	_msize
>14135	Identifier	size
>14136	Condition	 
>14137	PtrMemberAccess	f -> face_winding
>14138	Identifier	face_winding
>14139	Identifier	f
>14140	IdentifierDeclStatement	 
>14141	IdentifierDecl	size = 0
>14142	AssignmentExpr	size = 0
>14143	PrimaryExpression	0
>14144	Identifier	size
>14145	Identifier	size
>14146	IdentifierDeclType	int
>14155	FunctionDef	Brush_MemorySize (brush_t * b)
>14156	ParameterList	brush_t * b
>14157	Parameter	 
>14158	Identifier	b
>14159	ParameterType	brush_t *
>14160	ReturnType	int
>14161	CompoundStatement	 
>14162	ReturnStatement	 
>14163	Identifier	size
>14164	ExpressionStatement	 
>14165	AssignmentExpr	size += _msize ( b )
>14166	CallExpression	_msize ( b )
>14167	ArgumentList	b
>14168	Argument	b
>14169	Identifier	b
>14170	Callee	_msize
>14171	Identifier	_msize
>14172	Identifier	size
>14173	ForStatement	for ( ep = b -> epairs ; ep ; ep = ep -> next )
>14174	CompoundStatement	 
>14175	ExpressionStatement	 
>14176	AssignmentExpr	size += _msize ( ep )
>14177	CallExpression	_msize ( ep )
>14178	ArgumentList	ep
>14179	Argument	ep
>14180	Identifier	ep
>14181	Callee	_msize
>14182	Identifier	_msize
>14183	Identifier	size
>14184	ExpressionStatement	 
>14185	AssignmentExpr	size += _msize ( ep -> value )
>14186	CallExpression	_msize ( ep -> value )
>14187	ArgumentList	ep -> value
>14188	Argument	ep -> value
>14189	PtrMemberAccess	ep -> value
>14190	Identifier	value
>14191	Identifier	ep
>14192	Callee	_msize
>14193	Identifier	_msize
>14194	Identifier	size
>14195	ExpressionStatement	 
>14196	AssignmentExpr	size += _msize ( ep -> key )
>14197	CallExpression	_msize ( ep -> key )
>14198	ArgumentList	ep -> key
>14199	Argument	ep -> key
>14200	PtrMemberAccess	ep -> key
>14201	Identifier	key
>14202	Identifier	ep
>14203	Callee	_msize
>14204	Identifier	_msize
>14205	Identifier	size
>14206	AssignmentExpr	 
>14207	PtrMemberAccess	ep -> next
>14208	Identifier	next
>14209	Identifier	ep
>14210	Identifier	ep
>14211	Condition	 
>14212	Identifier	ep
>14213	ForInit	 
>14214	AssignmentExpr	ep = b -> epairs
>14215	PtrMemberAccess	b -> epairs
>14216	Identifier	epairs
>14217	Identifier	b
>14218	Identifier	ep
>14219	ForStatement	for ( f = b -> brush_faces ; f ; f = f -> next )
>14220	CompoundStatement	 
>14221	ExpressionStatement	 
>14222	AssignmentExpr	size += Face_MemorySize ( f )
>14223	CallExpression	Face_MemorySize ( f )
>14224	ArgumentList	f
>14225	Argument	f
>14226	Identifier	f
>14227	Callee	Face_MemorySize
>14228	Identifier	Face_MemorySize
>14229	Identifier	size
>14230	AssignmentExpr	 
>14231	PtrMemberAccess	f -> next
>14232	Identifier	next
>14233	Identifier	f
>14234	Identifier	f
>14235	Condition	 
>14236	Identifier	f
>14237	ForInit	 
>14238	AssignmentExpr	f = b -> brush_faces
>14239	PtrMemberAccess	b -> brush_faces
>14240	Identifier	brush_faces
>14241	Identifier	b
>14242	Identifier	f
>14243	IfStatement	if ( b -> terrainBrush )
>14244	CompoundStatement	 
>14245	ExpressionStatement	 
>14246	AssignmentExpr	size += Terrain_MemorySize ( b -> pTerrain )
>14247	CallExpression	Terrain_MemorySize ( b -> pTerrain )
>14248	ArgumentList	b -> pTerrain
>14249	Argument	b -> pTerrain
>14250	PtrMemberAccess	b -> pTerrain
>14251	Identifier	pTerrain
>14252	Identifier	b
>14253	Callee	Terrain_MemorySize
>14254	Identifier	Terrain_MemorySize
>14255	Identifier	size
>14256	Condition	 
>14257	PtrMemberAccess	b -> terrainBrush
>14258	Identifier	terrainBrush
>14259	Identifier	b
>14260	IfStatement	if ( b -> patchBrush )
>14261	CompoundStatement	 
>14262	ExpressionStatement	 
>14263	AssignmentExpr	size += Patch_MemorySize ( b -> pPatch )
>14264	CallExpression	Patch_MemorySize ( b -> pPatch )
>14265	ArgumentList	b -> pPatch
>14266	Argument	b -> pPatch
>14267	PtrMemberAccess	b -> pPatch
>14268	Identifier	pPatch
>14269	Identifier	b
>14270	Callee	Patch_MemorySize
>14271	Identifier	Patch_MemorySize
>14272	Identifier	size
>14273	Condition	 
>14274	PtrMemberAccess	b -> patchBrush
>14275	Identifier	patchBrush
>14276	Identifier	b
>14277	IdentifierDeclStatement	 
>14278	IdentifierDecl	size = 0
>14279	AssignmentExpr	size = 0
>14280	PrimaryExpression	0
>14281	Identifier	size
>14282	Identifier	size
>14283	IdentifierDeclType	int
>14284	IdentifierDeclStatement	 
>14285	IdentifierDecl	* ep
>14286	Identifier	ep
>14287	IdentifierDeclType	epair_t *
>14288	IdentifierDeclStatement	 
>14289	IdentifierDecl	* f
>14290	Identifier	f
>14291	IdentifierDeclType	face_t *
>14316	FunctionDef	Brush_Clone (brush_t * b)
>14317	ParameterList	brush_t * b
>14318	Parameter	 
>14319	Identifier	b
>14320	ParameterType	brush_t *
>14321	ReturnType	brush_t *
>14322	CompoundStatement	 
>14323	ReturnStatement	 
>14324	Identifier	n
>14325	IfStatement	if ( b -> patchBrush )
>14326	ElseStatement	else
>14327	IfStatement	if ( b -> terrainBrush )
>14328	ElseStatement	else
>14329	CompoundStatement	 
>14330	ForStatement	for ( f = b -> brush_faces ; f ; f = f -> next )
>14331	CompoundStatement	 
>14332	ExpressionStatement	 
>14333	AssignmentExpr	n -> brush_faces = nf
>14334	Identifier	nf
>14335	PtrMemberAccess	n -> brush_faces
>14336	Identifier	brush_faces
>14337	Identifier	n
>14338	ExpressionStatement	 
>14339	AssignmentExpr	nf -> next = n -> brush_faces
>14340	PtrMemberAccess	n -> brush_faces
>14341	Identifier	brush_faces
>14342	Identifier	n
>14343	PtrMemberAccess	nf -> next
>14344	Identifier	next
>14345	Identifier	nf
>14346	ExpressionStatement	 
>14347	AssignmentExpr	nf = Face_Clone ( f )
>14348	CallExpression	Face_Clone ( f )
>14349	ArgumentList	f
>14350	Argument	f
>14351	Identifier	f
>14352	Callee	Face_Clone
>14353	Identifier	Face_Clone
>14354	Identifier	nf
>14355	AssignmentExpr	 
>14356	PtrMemberAccess	f -> next
>14357	Identifier	next
>14358	Identifier	f
>14359	Identifier	f
>14360	Condition	 
>14361	Identifier	f
>14362	ForInit	 
>14363	AssignmentExpr	f = b -> brush_faces
>14364	PtrMemberAccess	b -> brush_faces
>14365	Identifier	brush_faces
>14366	Identifier	b
>14367	Identifier	f
>14368	ExpressionStatement	 
>14369	AssignmentExpr	n -> owner = b -> owner
>14370	PtrMemberAccess	b -> owner
>14371	Identifier	owner
>14372	Identifier	b
>14373	PtrMemberAccess	n -> owner
>14374	Identifier	owner
>14375	Identifier	n
>14376	ExpressionStatement	 
>14377	AssignmentExpr	n -> numberId = g_nBrushId ++
>14378	IncDecOp	g_nBrushId ++
>14379	IncDec	++
>14380	Identifier	g_nBrushId
>14381	PtrMemberAccess	n -> numberId
>14382	Identifier	numberId
>14383	Identifier	n
>14384	ExpressionStatement	 
>14385	AssignmentExpr	n = Brush_Alloc ( )
>14386	CallExpression	Brush_Alloc ( )
>14387	ArgumentList	 
>14388	Callee	Brush_Alloc
>14389	Identifier	Brush_Alloc
>14390	Identifier	n
>14391	CompoundStatement	 
>14392	ExpressionStatement	 
>14393	AssignmentExpr	n = p -> pSymbiot
>14394	PtrMemberAccess	p -> pSymbiot
>14395	Identifier	pSymbiot
>14396	Identifier	p
>14397	Identifier	n
>14398	ExpressionStatement	 
>14399	CallExpression	Entity_UnlinkBrush ( p -> pSymbiot )
>14400	ArgumentList	p -> pSymbiot
>14401	Argument	p -> pSymbiot
>14402	PtrMemberAccess	p -> pSymbiot
>14403	Identifier	pSymbiot
>14404	Identifier	p
>14405	Callee	Entity_UnlinkBrush
>14406	Identifier	Entity_UnlinkBrush
>14407	ExpressionStatement	 
>14408	CallExpression	Brush_RemoveFromList ( p -> pSymbiot )
>14409	ArgumentList	p -> pSymbiot
>14410	Argument	p -> pSymbiot
>14411	PtrMemberAccess	p -> pSymbiot
>14412	Identifier	pSymbiot
>14413	Identifier	p
>14414	Callee	Brush_RemoveFromList
>14415	Identifier	Brush_RemoveFromList
>14416	IdentifierDeclStatement	 
>14417	IdentifierDecl	* p = Terrain_Duplicate ( b -> pTerrain )
>14418	AssignmentExpr	* p = Terrain_Duplicate ( b -> pTerrain )
>14419	CallExpression	Terrain_Duplicate ( b -> pTerrain )
>14420	ArgumentList	b -> pTerrain
>14421	Argument	b -> pTerrain
>14422	PtrMemberAccess	b -> pTerrain
>14423	Identifier	pTerrain
>14424	Identifier	b
>14425	Callee	Terrain_Duplicate
>14426	Identifier	Terrain_Duplicate
>14427	Identifier	p
>14428	Identifier	p
>14429	IdentifierDeclType	terrainMesh_t *
>14430	Condition	 
>14431	PtrMemberAccess	b -> terrainBrush
>14432	Identifier	terrainBrush
>14433	Identifier	b
>14434	CompoundStatement	 
>14435	ExpressionStatement	 
>14436	AssignmentExpr	n = p -> pSymbiot
>14437	PtrMemberAccess	p -> pSymbiot
>14438	Identifier	pSymbiot
>14439	Identifier	p
>14440	Identifier	n
>14441	ExpressionStatement	 
>14442	CallExpression	Entity_UnlinkBrush ( p -> pSymbiot )
>14443	ArgumentList	p -> pSymbiot
>14444	Argument	p -> pSymbiot
>14445	PtrMemberAccess	p -> pSymbiot
>14446	Identifier	pSymbiot
>14447	Identifier	p
>14448	Callee	Entity_UnlinkBrush
>14449	Identifier	Entity_UnlinkBrush
>14450	ExpressionStatement	 
>14451	CallExpression	Brush_RemoveFromList ( p -> pSymbiot )
>14452	ArgumentList	p -> pSymbiot
>14453	Argument	p -> pSymbiot
>14454	PtrMemberAccess	p -> pSymbiot
>14455	Identifier	pSymbiot
>14456	Identifier	p
>14457	Callee	Brush_RemoveFromList
>14458	Identifier	Brush_RemoveFromList
>14459	IdentifierDeclStatement	 
>14460	IdentifierDecl	* p = Patch_Duplicate ( b -> pPatch )
>14461	AssignmentExpr	* p = Patch_Duplicate ( b -> pPatch )
>14462	CallExpression	Patch_Duplicate ( b -> pPatch )
>14463	ArgumentList	b -> pPatch
>14464	Argument	b -> pPatch
>14465	PtrMemberAccess	b -> pPatch
>14466	Identifier	pPatch
>14467	Identifier	b
>14468	Callee	Patch_Duplicate
>14469	Identifier	Patch_Duplicate
>14470	Identifier	p
>14471	Identifier	p
>14472	IdentifierDeclType	patchMesh_t *
>14473	Condition	 
>14474	PtrMemberAccess	b -> patchBrush
>14475	Identifier	patchBrush
>14476	Identifier	b
>14477	IdentifierDeclStatement	 
>14478	IdentifierDecl	* nf
>14479	Identifier	nf
>14480	IdentifierDeclType	face_t *
>14481	IdentifierDecl	* f
>14482	Identifier	f
>14483	IdentifierDeclType	face_t *
>14484	IdentifierDeclStatement	 
>14485	IdentifierDecl	* n = NULL
>14486	AssignmentExpr	* n = NULL
>14487	Identifier	NULL
>14488	Identifier	NULL
>14489	Identifier	n
>14490	IdentifierDeclType	brush_t *
>14522	FunctionDef	Brush_FullClone (brush_t * b)
>14523	ParameterList	brush_t * b
>14524	Parameter	 
>14525	Identifier	b
>14526	ParameterType	brush_t *
>14527	ReturnType	brush_t *
>14528	CompoundStatement	 
>14529	ReturnStatement	 
>14530	Identifier	n
>14531	IfStatement	if ( b -> patchBrush )
>14532	ElseStatement	else
>14533	IfStatement	if ( b -> terrainBrush )
>14534	ElseStatement	else
>14535	CompoundStatement	 
>14536	ForStatement	for ( nf = n -> brush_faces ; nf ; nf = nf -> next )
>14537	CompoundStatement	 
>14538	IfStatement	if ( nf -> face_winding )
>14539	CompoundStatement	 
>14540	IfStatement	if ( g_qeglobals . m_bBrushPrimitMode )
>14541	ElseStatement	else
>14542	CompoundStatement	 
>14543	ForStatement	for ( j = 0 ; j < nf -> face_winding -> numpoints ; j ++ )
>14544	ExpressionStatement	 
>14545	CallExpression	EmitTextureCoordinates ( nf -> face_winding -> points [ j ] , nf -> d_texture , nf )
>14546	ArgumentList	nf -> face_winding -> points [ j ]
>14547	Argument	nf
>14548	Identifier	nf
>14549	Argument	nf -> d_texture
>14550	PtrMemberAccess	nf -> d_texture
>14551	Identifier	d_texture
>14552	Identifier	nf
>14553	Argument	nf -> face_winding -> points [ j ]
>14554	ArrayIndexing	nf -> face_winding -> points [ j ]
>14555	Identifier	j
>14556	PtrMemberAccess	nf -> face_winding -> points
>14557	Identifier	points
>14558	PtrMemberAccess	nf -> face_winding
>14559	Identifier	face_winding
>14560	Identifier	nf
>14561	Callee	EmitTextureCoordinates
>14562	Identifier	EmitTextureCoordinates
>14563	IncDecOp	 
>14564	IncDec	++
>14565	Identifier	j
>14566	Condition	 
>14567	RelationalExpression	j < nf -> face_winding -> numpoints
>14568	PtrMemberAccess	nf -> face_winding -> numpoints
>14569	Identifier	numpoints
>14570	PtrMemberAccess	nf -> face_winding
>14571	Identifier	face_winding
>14572	Identifier	nf
>14573	Identifier	j
>14574	ForInit	 
>14575	AssignmentExpr	j = 0
>14576	PrimaryExpression	0
>14577	Identifier	j
>14578	ExpressionStatement	 
>14579	CallExpression	EmitBrushPrimitTextureCoordinates ( nf , nf -> face_winding )
>14580	ArgumentList	nf
>14581	Argument	nf -> face_winding
>14582	PtrMemberAccess	nf -> face_winding
>14583	Identifier	face_winding
>14584	Identifier	nf
>14585	Argument	nf
>14586	Identifier	nf
>14587	Callee	EmitBrushPrimitTextureCoordinates
>14588	Identifier	EmitBrushPrimitTextureCoordinates
>14589	Condition	 
>14590	MemberAccess	g_qeglobals . m_bBrushPrimitMode
>14591	Identifier	m_bBrushPrimitMode
>14592	Identifier	g_qeglobals
>14593	Condition	 
>14594	PtrMemberAccess	nf -> face_winding
>14595	Identifier	face_winding
>14596	Identifier	nf
>14597	ExpressionStatement	 
>14598	CallExpression	Face_SetColor ( n , nf , 1.0 )
>14599	ArgumentList	n
>14600	Argument	1.0
>14601	PrimaryExpression	1.0
>14602	Argument	nf
>14603	Identifier	nf
>14604	Argument	n
>14605	Identifier	n
>14606	Callee	Face_SetColor
>14607	Identifier	Face_SetColor
>14608	AssignmentExpr	 
>14609	PtrMemberAccess	nf -> next
>14610	Identifier	next
>14611	Identifier	nf
>14612	Identifier	nf
>14613	Condition	 
>14614	Identifier	nf
>14615	ForInit	 
>14616	AssignmentExpr	nf = n -> brush_faces
>14617	PtrMemberAccess	n -> brush_faces
>14618	Identifier	brush_faces
>14619	Identifier	n
>14620	Identifier	nf
>14621	ForStatement	for ( f = b -> brush_faces ; f ; f = f -> next )
>14622	CompoundStatement	 
>14623	ForStatement	for ( f2 = b -> brush_faces ; f2 ; f2 = f2 -> next )
>14624	CompoundStatement	 
>14625	IfStatement	if ( f2 -> original == f )
>14626	CompoundStatement	 
>14627	ExpressionStatement	 
>14628	AssignmentExpr	nf2 -> original = nf
>14629	Identifier	nf
>14630	PtrMemberAccess	nf2 -> original
>14631	Identifier	original
>14632	Identifier	nf2
>14633	ExpressionStatement	 
>14634	AssignmentExpr	n -> brush_faces = nf2
>14635	Identifier	nf2
>14636	PtrMemberAccess	n -> brush_faces
>14637	Identifier	brush_faces
>14638	Identifier	n
>14639	ExpressionStatement	 
>14640	AssignmentExpr	nf2 -> next = n -> brush_faces
>14641	PtrMemberAccess	n -> brush_faces
>14642	Identifier	brush_faces
>14643	Identifier	n
>14644	PtrMemberAccess	nf2 -> next
>14645	Identifier	next
>14646	Identifier	nf2
>14647	ExpressionStatement	 
>14648	AssignmentExpr	nf2 = Face_FullClone ( f2 )
>14649	CallExpression	Face_FullClone ( f2 )
>14650	ArgumentList	f2
>14651	Argument	f2
>14652	Identifier	f2
>14653	Callee	Face_FullClone
>14654	Identifier	Face_FullClone
>14655	Identifier	nf2
>14656	Condition	 
>14657	EqualityExpression	f2 -> original == f
>14658	Identifier	f
>14659	PtrMemberAccess	f2 -> original
>14660	Identifier	original
>14661	Identifier	f2
>14662	AssignmentExpr	 
>14663	PtrMemberAccess	f2 -> next
>14664	Identifier	next
>14665	Identifier	f2
>14666	Identifier	f2
>14667	Condition	 
>14668	Identifier	f2
>14669	ForInit	 
>14670	AssignmentExpr	f2 = b -> brush_faces
>14671	PtrMemberAccess	b -> brush_faces
>14672	Identifier	brush_faces
>14673	Identifier	b
>14674	Identifier	f2
>14675	ExpressionStatement	 
>14676	AssignmentExpr	n -> brush_faces = nf
>14677	Identifier	nf
>14678	PtrMemberAccess	n -> brush_faces
>14679	Identifier	brush_faces
>14680	Identifier	n
>14681	ExpressionStatement	 
>14682	AssignmentExpr	nf -> next = n -> brush_faces
>14683	PtrMemberAccess	n -> brush_faces
>14684	Identifier	brush_faces
>14685	Identifier	n
>14686	PtrMemberAccess	nf -> next
>14687	Identifier	next
>14688	Identifier	nf
>14689	ExpressionStatement	 
>14690	AssignmentExpr	nf = Face_FullClone ( f )
>14691	CallExpression	Face_FullClone ( f )
>14692	ArgumentList	f
>14693	Argument	f
>14694	Identifier	f
>14695	Callee	Face_FullClone
>14696	Identifier	Face_FullClone
>14697	Identifier	nf
>14698	IfStatement	if ( f -> original )
>14699	ContinueStatement	 
>14700	Condition	 
>14701	PtrMemberAccess	f -> original
>14702	Identifier	original
>14703	Identifier	f
>14704	AssignmentExpr	 
>14705	PtrMemberAccess	f -> next
>14706	Identifier	next
>14707	Identifier	f
>14708	Identifier	f
>14709	Condition	 
>14710	Identifier	f
>14711	ForInit	 
>14712	AssignmentExpr	f = b -> brush_faces
>14713	PtrMemberAccess	b -> brush_faces
>14714	Identifier	brush_faces
>14715	Identifier	b
>14716	Identifier	f
>14717	ExpressionStatement	 
>14718	CallExpression	VectorCopy ( b -> maxs , n -> maxs )
>14719	ArgumentList	b -> maxs
>14720	Argument	n -> maxs
>14721	PtrMemberAccess	n -> maxs
>14722	Identifier	maxs
>14723	Identifier	n
>14724	Argument	b -> maxs
>14725	PtrMemberAccess	b -> maxs
>14726	Identifier	maxs
>14727	Identifier	b
>14728	Callee	VectorCopy
>14729	Identifier	VectorCopy
>14730	ExpressionStatement	 
>14731	CallExpression	VectorCopy ( b -> mins , n -> mins )
>14732	ArgumentList	b -> mins
>14733	Argument	n -> mins
>14734	PtrMemberAccess	n -> mins
>14735	Identifier	mins
>14736	Identifier	n
>14737	Argument	b -> mins
>14738	PtrMemberAccess	b -> mins
>14739	Identifier	mins
>14740	Identifier	b
>14741	Callee	VectorCopy
>14742	Identifier	VectorCopy
>14743	ExpressionStatement	 
>14744	AssignmentExpr	n -> owner = b -> owner
>14745	PtrMemberAccess	b -> owner
>14746	Identifier	owner
>14747	Identifier	b
>14748	PtrMemberAccess	n -> owner
>14749	Identifier	owner
>14750	Identifier	n
>14751	ExpressionStatement	 
>14752	AssignmentExpr	n -> numberId = g_nBrushId ++
>14753	IncDecOp	g_nBrushId ++
>14754	IncDec	++
>14755	Identifier	g_nBrushId
>14756	PtrMemberAccess	n -> numberId
>14757	Identifier	numberId
>14758	Identifier	n
>14759	ExpressionStatement	 
>14760	AssignmentExpr	n = Brush_Alloc ( )
>14761	CallExpression	Brush_Alloc ( )
>14762	ArgumentList	 
>14763	Callee	Brush_Alloc
>14764	Identifier	Brush_Alloc
>14765	Identifier	n
>14766	CompoundStatement	 
>14767	ExpressionStatement	 
>14768	CallExpression	Brush_Build ( n )
>14769	ArgumentList	n
>14770	Argument	n
>14771	Identifier	n
>14772	Callee	Brush_Build
>14773	Identifier	Brush_Build
>14774	ExpressionStatement	 
>14775	AssignmentExpr	n -> owner = b -> owner
>14776	PtrMemberAccess	b -> owner
>14777	Identifier	owner
>14778	Identifier	b
>14779	PtrMemberAccess	n -> owner
>14780	Identifier	owner
>14781	Identifier	n
>14782	ExpressionStatement	 
>14783	AssignmentExpr	n = p -> pSymbiot
>14784	PtrMemberAccess	p -> pSymbiot
>14785	Identifier	pSymbiot
>14786	Identifier	p
>14787	Identifier	n
>14788	ExpressionStatement	 
>14789	CallExpression	Entity_UnlinkBrush ( p -> pSymbiot )
>14790	ArgumentList	p -> pSymbiot
>14791	Argument	p -> pSymbiot
>14792	PtrMemberAccess	p -> pSymbiot
>14793	Identifier	pSymbiot
>14794	Identifier	p
>14795	Callee	Entity_UnlinkBrush
>14796	Identifier	Entity_UnlinkBrush
>14797	ExpressionStatement	 
>14798	CallExpression	Brush_RemoveFromList ( p -> pSymbiot )
>14799	ArgumentList	p -> pSymbiot
>14800	Argument	p -> pSymbiot
>14801	PtrMemberAccess	p -> pSymbiot
>14802	Identifier	pSymbiot
>14803	Identifier	p
>14804	Callee	Brush_RemoveFromList
>14805	Identifier	Brush_RemoveFromList
>14806	IdentifierDeclStatement	 
>14807	IdentifierDecl	* p = Terrain_Duplicate ( b -> pTerrain )
>14808	AssignmentExpr	* p = Terrain_Duplicate ( b -> pTerrain )
>14809	CallExpression	Terrain_Duplicate ( b -> pTerrain )
>14810	ArgumentList	b -> pTerrain
>14811	Argument	b -> pTerrain
>14812	PtrMemberAccess	b -> pTerrain
>14813	Identifier	pTerrain
>14814	Identifier	b
>14815	Callee	Terrain_Duplicate
>14816	Identifier	Terrain_Duplicate
>14817	Identifier	p
>14818	Identifier	p
>14819	IdentifierDeclType	terrainMesh_t *
>14820	Condition	 
>14821	PtrMemberAccess	b -> terrainBrush
>14822	Identifier	terrainBrush
>14823	Identifier	b
>14824	CompoundStatement	 
>14825	ExpressionStatement	 
>14826	CallExpression	Brush_Build ( n )
>14827	ArgumentList	n
>14828	Argument	n
>14829	Identifier	n
>14830	Callee	Brush_Build
>14831	Identifier	Brush_Build
>14832	ExpressionStatement	 
>14833	AssignmentExpr	n -> owner = b -> owner
>14834	PtrMemberAccess	b -> owner
>14835	Identifier	owner
>14836	Identifier	b
>14837	PtrMemberAccess	n -> owner
>14838	Identifier	owner
>14839	Identifier	n
>14840	ExpressionStatement	 
>14841	AssignmentExpr	n = p -> pSymbiot
>14842	PtrMemberAccess	p -> pSymbiot
>14843	Identifier	pSymbiot
>14844	Identifier	p
>14845	Identifier	n
>14846	ExpressionStatement	 
>14847	CallExpression	Entity_UnlinkBrush ( p -> pSymbiot )
>14848	ArgumentList	p -> pSymbiot
>14849	Argument	p -> pSymbiot
>14850	PtrMemberAccess	p -> pSymbiot
>14851	Identifier	pSymbiot
>14852	Identifier	p
>14853	Callee	Entity_UnlinkBrush
>14854	Identifier	Entity_UnlinkBrush
>14855	ExpressionStatement	 
>14856	CallExpression	Brush_RemoveFromList ( p -> pSymbiot )
>14857	ArgumentList	p -> pSymbiot
>14858	Argument	p -> pSymbiot
>14859	PtrMemberAccess	p -> pSymbiot
>14860	Identifier	pSymbiot
>14861	Identifier	p
>14862	Callee	Brush_RemoveFromList
>14863	Identifier	Brush_RemoveFromList
>14864	IdentifierDeclStatement	 
>14865	IdentifierDecl	* p = Patch_Duplicate ( b -> pPatch )
>14866	AssignmentExpr	* p = Patch_Duplicate ( b -> pPatch )
>14867	CallExpression	Patch_Duplicate ( b -> pPatch )
>14868	ArgumentList	b -> pPatch
>14869	Argument	b -> pPatch
>14870	PtrMemberAccess	b -> pPatch
>14871	Identifier	pPatch
>14872	Identifier	b
>14873	Callee	Patch_Duplicate
>14874	Identifier	Patch_Duplicate
>14875	Identifier	p
>14876	Identifier	p
>14877	IdentifierDeclType	patchMesh_t *
>14878	Condition	 
>14879	PtrMemberAccess	b -> patchBrush
>14880	Identifier	patchBrush
>14881	Identifier	b
>14882	IdentifierDeclStatement	 
>14883	IdentifierDecl	j
>14884	Identifier	j
>14885	IdentifierDeclType	int
>14886	IdentifierDeclStatement	 
>14887	IdentifierDecl	* nf2
>14888	Identifier	nf2
>14889	IdentifierDeclType	face_t *
>14890	IdentifierDecl	* f2
>14891	Identifier	f2
>14892	IdentifierDeclType	face_t *
>14893	IdentifierDecl	* nf
>14894	Identifier	nf
>14895	IdentifierDeclType	face_t *
>14896	IdentifierDecl	* f
>14897	Identifier	f
>14898	IdentifierDeclType	face_t *
>14899	IdentifierDeclStatement	 
>14900	IdentifierDecl	* n = NULL
>14901	AssignmentExpr	* n = NULL
>14902	Identifier	NULL
>14903	Identifier	NULL
>14904	Identifier	n
>14905	IdentifierDeclType	brush_t *
>14963	FunctionDef	Brush_Ray (vec3_t origin , vec3_t dir , brush_t * b , float * dist)
>14964	ParameterList	vec3_t origin , vec3_t dir , brush_t * b , float * dist
>14965	Parameter	 
>14966	Identifier	dist
>14967	ParameterType	float *
>14968	Parameter	 
>14969	Identifier	b
>14970	ParameterType	brush_t *
>14971	Parameter	 
>14972	Identifier	dir
>14973	ParameterType	vec3_t
>14974	Parameter	 
>14975	Identifier	origin
>14976	ParameterType	vec3_t
>14977	ReturnType	face_t *
>14978	CompoundStatement	 
>14979	ReturnStatement	 
>14980	Identifier	firstface
>14981	ExpressionStatement	 
>14982	AssignmentExpr	* dist = d1
>14983	Identifier	d1
>14984	UnaryOp	* dist
>14985	Identifier	dist
>14986	UnaryOperator	*
>14987	ExpressionStatement	 
>14988	AssignmentExpr	d1 = DotProduct ( p1 , dir )
>14989	CallExpression	DotProduct ( p1 , dir )
>14990	ArgumentList	p1
>14991	Argument	dir
>14992	Identifier	dir
>14993	Argument	p1
>14994	Identifier	p1
>14995	Callee	DotProduct
>14996	Identifier	DotProduct
>14997	Identifier	d1
>14998	ExpressionStatement	 
>14999	CallExpression	VectorSubtract ( p1 , origin , p1 )
>15000	ArgumentList	p1
>15001	Argument	p1
>15002	Identifier	p1
>15003	Argument	origin
>15004	Identifier	origin
>15005	Argument	p1
>15006	Identifier	p1
>15007	Callee	VectorSubtract
>15008	Identifier	VectorSubtract
>15009	ForStatement	for ( f = b -> brush_faces ; f ; f = f -> next )
>15010	CompoundStatement	 
>15011	IfStatement	if ( d1 > 0 )
>15012	ElseStatement	else
>15013	CompoundStatement	 
>15014	ForStatement	for ( i = 0 ; i < 3 ; i ++ )
>15015	ExpressionStatement	 
>15016	AssignmentExpr	p2 [ i ] = p1 [ i ] + frac * ( p2 [ i ] - p1 [ i ] )
>15017	AdditiveExpression	p1 [ i ] + frac * ( p2 [ i ] - p1 [ i ] )
>15018	MultiplicativeExpression	frac * ( p2 [ i ] - p1 [ i ] )
>15019	AdditiveExpression	p2 [ i ] - p1 [ i ]
>15020	ArrayIndexing	p1 [ i ]
>15021	Identifier	i
>15022	Identifier	p1
>15023	ArrayIndexing	p2 [ i ]
>15024	Identifier	i
>15025	Identifier	p2
>15026	Identifier	frac
>15027	ArrayIndexing	p1 [ i ]
>15028	Identifier	i
>15029	Identifier	p1
>15030	ArrayIndexing	p2 [ i ]
>15031	Identifier	i
>15032	Identifier	p2
>15033	IncDecOp	 
>15034	IncDec	++
>15035	Identifier	i
>15036	Condition	 
>15037	RelationalExpression	i < 3
>15038	PrimaryExpression	3
>15039	Identifier	i
>15040	ForInit	 
>15041	AssignmentExpr	i = 0
>15042	PrimaryExpression	0
>15043	Identifier	i
>15044	CompoundStatement	 
>15045	ForStatement	for ( i = 0 ; i < 3 ; i ++ )
>15046	ExpressionStatement	 
>15047	AssignmentExpr	p1 [ i ] = p1 [ i ] + frac * ( p2 [ i ] - p1 [ i ] )
>15048	AdditiveExpression	p1 [ i ] + frac * ( p2 [ i ] - p1 [ i ] )
>15049	MultiplicativeExpression	frac * ( p2 [ i ] - p1 [ i ] )
>15050	AdditiveExpression	p2 [ i ] - p1 [ i ]
>15051	ArrayIndexing	p1 [ i ]
>15052	Identifier	i
>15053	Identifier	p1
>15054	ArrayIndexing	p2 [ i ]
>15055	Identifier	i
>15056	Identifier	p2
>15057	Identifier	frac
>15058	ArrayIndexing	p1 [ i ]
>15059	Identifier	i
>15060	Identifier	p1
>15061	ArrayIndexing	p1 [ i ]
>15062	Identifier	i
>15063	Identifier	p1
>15064	IncDecOp	 
>15065	IncDec	++
>15066	Identifier	i
>15067	Condition	 
>15068	RelationalExpression	i < 3
>15069	PrimaryExpression	3
>15070	Identifier	i
>15071	ForInit	 
>15072	AssignmentExpr	i = 0
>15073	PrimaryExpression	0
>15074	Identifier	i
>15075	ExpressionStatement	 
>15076	AssignmentExpr	firstface = f
>15077	Identifier	f
>15078	Identifier	firstface
>15079	Condition	 
>15080	RelationalExpression	d1 > 0
>15081	PrimaryExpression	0
>15082	Identifier	d1
>15083	ExpressionStatement	 
>15084	AssignmentExpr	frac = d1 / ( d1 - d2 )
>15085	MultiplicativeExpression	d1 / ( d1 - d2 )
>15086	AdditiveExpression	d1 - d2
>15087	Identifier	d2
>15088	Identifier	d1
>15089	Identifier	d1
>15090	Identifier	frac
>15091	IfStatement	if ( d1 <= 0 && d2 <= 0 )
>15092	ContinueStatement	 
>15093	Condition	 
>15094	AndExpression	d1 <= 0 && d2 <= 0
>15095	RelationalExpression	d2 <= 0
>15096	PrimaryExpression	0
>15097	Identifier	d2
>15098	RelationalExpression	d1 <= 0
>15099	PrimaryExpression	0
>15100	Identifier	d1
>15101	IfStatement	if ( d1 >= 0 && d2 >= 0 )
>15102	CompoundStatement	 
>15103	ReturnStatement	 
>15104	Identifier	NULL
>15105	ExpressionStatement	 
>15106	AssignmentExpr	* dist = 0
>15107	PrimaryExpression	0
>15108	UnaryOp	* dist
>15109	Identifier	dist
>15110	UnaryOperator	*
>15111	Condition	 
>15112	AndExpression	d1 >= 0 && d2 >= 0
>15113	RelationalExpression	d2 >= 0
>15114	PrimaryExpression	0
>15115	Identifier	d2
>15116	RelationalExpression	d1 >= 0
>15117	PrimaryExpression	0
>15118	Identifier	d1
>15119	ExpressionStatement	 
>15120	AssignmentExpr	d2 = DotProduct ( p2 , f -> plane . normal ) - f -> plane . dist
>15121	AdditiveExpression	DotProduct ( p2 , f -> plane . normal ) - f -> plane . dist
>15122	MemberAccess	f -> plane . dist
>15123	Identifier	dist
>15124	PtrMemberAccess	f -> plane
>15125	Identifier	plane
>15126	Identifier	f
>15127	CallExpression	DotProduct ( p2 , f -> plane . normal )
>15128	ArgumentList	p2
>15129	Argument	f -> plane . normal
>15130	MemberAccess	f -> plane . normal
>15131	Identifier	normal
>15132	PtrMemberAccess	f -> plane
>15133	Identifier	plane
>15134	Identifier	f
>15135	Argument	p2
>15136	Identifier	p2
>15137	Callee	DotProduct
>15138	Identifier	DotProduct
>15139	Identifier	d2
>15140	ExpressionStatement	 
>15141	AssignmentExpr	d1 = DotProduct ( p1 , f -> plane . normal ) - f -> plane . dist
>15142	AdditiveExpression	DotProduct ( p1 , f -> plane . normal ) - f -> plane . dist
>15143	MemberAccess	f -> plane . dist
>15144	Identifier	dist
>15145	PtrMemberAccess	f -> plane
>15146	Identifier	plane
>15147	Identifier	f
>15148	CallExpression	DotProduct ( p1 , f -> plane . normal )
>15149	ArgumentList	p1
>15150	Argument	f -> plane . normal
>15151	MemberAccess	f -> plane . normal
>15152	Identifier	normal
>15153	PtrMemberAccess	f -> plane
>15154	Identifier	plane
>15155	Identifier	f
>15156	Argument	p1
>15157	Identifier	p1
>15158	Callee	DotProduct
>15159	Identifier	DotProduct
>15160	Identifier	d1
>15161	AssignmentExpr	 
>15162	PtrMemberAccess	f -> next
>15163	Identifier	next
>15164	Identifier	f
>15165	Identifier	f
>15166	Condition	 
>15167	Identifier	f
>15168	ForInit	 
>15169	AssignmentExpr	f = b -> brush_faces
>15170	PtrMemberAccess	b -> brush_faces
>15171	Identifier	brush_faces
>15172	Identifier	b
>15173	Identifier	f
>15174	ForStatement	for ( i = 0 ; i < 3 ; i ++ )
>15175	ExpressionStatement	 
>15176	AssignmentExpr	p2 [ i ] = p1 [ i ] + dir [ i ] * 16384
>15177	AdditiveExpression	p1 [ i ] + dir [ i ] * 16384
>15178	MultiplicativeExpression	dir [ i ] * 16384
>15179	PrimaryExpression	16384
>15180	ArrayIndexing	dir [ i ]
>15181	Identifier	i
>15182	Identifier	dir
>15183	ArrayIndexing	p1 [ i ]
>15184	Identifier	i
>15185	Identifier	p1
>15186	ArrayIndexing	p2 [ i ]
>15187	Identifier	i
>15188	Identifier	p2
>15189	IncDecOp	 
>15190	IncDec	++
>15191	Identifier	i
>15192	Condition	 
>15193	RelationalExpression	i < 3
>15194	PrimaryExpression	3
>15195	Identifier	i
>15196	ForInit	 
>15197	AssignmentExpr	i = 0
>15198	PrimaryExpression	0
>15199	Identifier	i
>15200	ExpressionStatement	 
>15201	CallExpression	VectorCopy ( origin , p1 )
>15202	ArgumentList	origin
>15203	Argument	p1
>15204	Identifier	p1
>15205	Argument	origin
>15206	Identifier	origin
>15207	Callee	VectorCopy
>15208	Identifier	VectorCopy
>15209	IdentifierDeclStatement	 
>15210	IdentifierDecl	i
>15211	Identifier	i
>15212	IdentifierDeclType	int
>15213	IdentifierDeclStatement	 
>15214	IdentifierDecl	d2
>15215	Identifier	d2
>15216	IdentifierDeclType	float
>15217	IdentifierDecl	d1
>15218	Identifier	d1
>15219	IdentifierDeclType	float
>15220	IdentifierDecl	frac
>15221	Identifier	frac
>15222	IdentifierDeclType	float
>15223	IdentifierDeclStatement	 
>15224	IdentifierDecl	p2
>15225	Identifier	p2
>15226	IdentifierDeclType	vec3_t
>15227	IdentifierDecl	p1
>15228	Identifier	p1
>15229	IdentifierDeclType	vec3_t
>15230	IdentifierDeclStatement	 
>15231	IdentifierDecl	* firstface
>15232	Identifier	firstface
>15233	IdentifierDeclType	face_t *
>15234	IdentifierDecl	* f
>15235	Identifier	f
>15236	IdentifierDeclType	face_t *
>15266	FunctionDef	Brush_Point (vec3_t origin , brush_t * b)
>15267	ParameterList	vec3_t origin , brush_t * b
>15268	Parameter	 
>15269	Identifier	b
>15270	ParameterType	brush_t *
>15271	Parameter	 
>15272	Identifier	origin
>15273	ParameterType	vec3_t
>15274	ReturnType	face_t *
>15275	CompoundStatement	 
>15276	ReturnStatement	 
>15277	PtrMemberAccess	b -> brush_faces
>15278	Identifier	brush_faces
>15279	Identifier	b
>15280	ForStatement	for ( f = b -> brush_faces ; f ; f = f -> next )
>15281	CompoundStatement	 
>15282	IfStatement	if ( d1 > 0 )
>15283	CompoundStatement	 
>15284	ReturnStatement	 
>15285	Identifier	NULL
>15286	Condition	 
>15287	RelationalExpression	d1 > 0
>15288	PrimaryExpression	0
>15289	Identifier	d1
>15290	ExpressionStatement	 
>15291	AssignmentExpr	d1 = DotProduct ( origin , f -> plane . normal ) - f -> plane . dist
>15292	AdditiveExpression	DotProduct ( origin , f -> plane . normal ) - f -> plane . dist
>15293	MemberAccess	f -> plane . dist
>15294	Identifier	dist
>15295	PtrMemberAccess	f -> plane
>15296	Identifier	plane
>15297	Identifier	f
>15298	CallExpression	DotProduct ( origin , f -> plane . normal )
>15299	ArgumentList	origin
>15300	Argument	f -> plane . normal
>15301	MemberAccess	f -> plane . normal
>15302	Identifier	normal
>15303	PtrMemberAccess	f -> plane
>15304	Identifier	plane
>15305	Identifier	f
>15306	Argument	origin
>15307	Identifier	origin
>15308	Callee	DotProduct
>15309	Identifier	DotProduct
>15310	Identifier	d1
>15311	AssignmentExpr	 
>15312	PtrMemberAccess	f -> next
>15313	Identifier	next
>15314	Identifier	f
>15315	Identifier	f
>15316	Condition	 
>15317	Identifier	f
>15318	ForInit	 
>15319	AssignmentExpr	f = b -> brush_faces
>15320	PtrMemberAccess	b -> brush_faces
>15321	Identifier	brush_faces
>15322	Identifier	b
>15323	Identifier	f
>15324	IdentifierDeclStatement	 
>15325	IdentifierDecl	d1
>15326	Identifier	d1
>15327	IdentifierDeclType	float
>15328	IdentifierDeclStatement	 
>15329	IdentifierDecl	* f
>15330	Identifier	f
>15331	IdentifierDeclType	face_t *
>15348	FunctionDef	Brush_AddToList (brush_t * b , brush_t * list)
>15349	ParameterList	brush_t * b , brush_t * list
>15350	Parameter	 
>15351	Identifier	list
>15352	ParameterType	brush_t *
>15353	Parameter	 
>15354	Identifier	b
>15355	ParameterType	brush_t *
>15356	ReturnType	void
>15357	CompoundStatement	 
>15358	ExpressionStatement	 
>15359	CallExpression	DispatchRadiantMsg ( RADIANT_SELECTION )
>15360	ArgumentList	RADIANT_SELECTION
>15361	Argument	RADIANT_SELECTION
>15362	Identifier	RADIANT_SELECTION
>15363	Callee	DispatchRadiantMsg
>15364	Identifier	DispatchRadiantMsg
>15365	ExpressionStatement	 
>15366	AssignmentExpr	b -> prev = list
>15367	Identifier	list
>15368	PtrMemberAccess	b -> prev
>15369	Identifier	prev
>15370	Identifier	b
>15371	ExpressionStatement	 
>15372	AssignmentExpr	list -> next = b
>15373	Identifier	b
>15374	PtrMemberAccess	list -> next
>15375	Identifier	next
>15376	Identifier	list
>15377	ExpressionStatement	 
>15378	AssignmentExpr	list -> next -> prev = b
>15379	Identifier	b
>15380	PtrMemberAccess	list -> next -> prev
>15381	Identifier	prev
>15382	PtrMemberAccess	list -> next
>15383	Identifier	next
>15384	Identifier	list
>15385	ExpressionStatement	 
>15386	AssignmentExpr	b -> next = list -> next
>15387	PtrMemberAccess	list -> next
>15388	Identifier	next
>15389	Identifier	list
>15390	PtrMemberAccess	b -> next
>15391	Identifier	next
>15392	Identifier	b
>15393	IfStatement	if ( list == & selected_brushes || list == & active_brushes )
>15394	CompoundStatement	 
>15395	IfStatement	if ( b -> terrainBrush && list == & selected_brushes )
>15396	CompoundStatement	 
>15397	ExpressionStatement	 
>15398	CallExpression	Terrain_Select ( b -> pTerrain )
>15399	ArgumentList	b -> pTerrain
>15400	Argument	b -> pTerrain
>15401	PtrMemberAccess	b -> pTerrain
>15402	Identifier	pTerrain
>15403	Identifier	b
>15404	Callee	Terrain_Select
>15405	Identifier	Terrain_Select
>15406	Condition	 
>15407	AndExpression	b -> terrainBrush && list == & selected_brushes
>15408	EqualityExpression	list == & selected_brushes
>15409	UnaryOp	& selected_brushes
>15410	Identifier	selected_brushes
>15411	UnaryOperator	&
>15412	Identifier	list
>15413	PtrMemberAccess	b -> terrainBrush
>15414	Identifier	terrainBrush
>15415	Identifier	b
>15416	IfStatement	if ( b -> patchBrush && list == & selected_brushes )
>15417	CompoundStatement	 
>15418	ExpressionStatement	 
>15419	CallExpression	Patch_Select ( b -> pPatch )
>15420	ArgumentList	b -> pPatch
>15421	Argument	b -> pPatch
>15422	PtrMemberAccess	b -> pPatch
>15423	Identifier	pPatch
>15424	Identifier	b
>15425	Callee	Patch_Select
>15426	Identifier	Patch_Select
>15427	Condition	 
>15428	AndExpression	b -> patchBrush && list == & selected_brushes
>15429	EqualityExpression	list == & selected_brushes
>15430	UnaryOp	& selected_brushes
>15431	Identifier	selected_brushes
>15432	UnaryOperator	&
>15433	Identifier	list
>15434	PtrMemberAccess	b -> patchBrush
>15435	Identifier	patchBrush
>15436	Identifier	b
>15437	Condition	 
>15438	OrExpression	list == & selected_brushes || list == & active_brushes
>15439	EqualityExpression	list == & active_brushes
>15440	UnaryOp	& active_brushes
>15441	Identifier	active_brushes
>15442	UnaryOperator	&
>15443	Identifier	list
>15444	EqualityExpression	list == & selected_brushes
>15445	UnaryOp	& selected_brushes
>15446	Identifier	selected_brushes
>15447	UnaryOperator	&
>15448	Identifier	list
>15449	IfStatement	if ( b -> next || b -> prev )
>15450	ExpressionStatement	 
>15451	CallExpression	Error ( \"Brush_AddToList
>15452	ArgumentList	\"Brush_AddToList
>15453	Argument	\"Brush_AddToList
>15454	PrimaryExpression	\"Brush_AddToList
>15455	Callee	Error
>15456	Identifier	Error
>15457	Condition	 
>15458	OrExpression	b -> next || b -> prev
>15459	PtrMemberAccess	b -> prev
>15460	Identifier	prev
>15461	Identifier	b
>15462	PtrMemberAccess	b -> next
>15463	Identifier	next
>15464	Identifier	b
>15485	FunctionDef	Brush_RemoveFromList (brush_t * b)
>15486	ParameterList	brush_t * b
>15487	Parameter	 
>15488	Identifier	b
>15489	ParameterType	brush_t *
>15490	ReturnType	void
>15491	CompoundStatement	 
>15492	ExpressionStatement	 
>15493	AssignmentExpr	b -> next = b -> prev = NULL
>15494	AssignmentExpr	b -> prev = NULL
>15495	Identifier	NULL
>15496	PtrMemberAccess	b -> prev
>15497	Identifier	prev
>15498	Identifier	b
>15499	PtrMemberAccess	b -> next
>15500	Identifier	next
>15501	Identifier	b
>15502	ExpressionStatement	 
>15503	AssignmentExpr	b -> prev -> next = b -> next
>15504	PtrMemberAccess	b -> next
>15505	Identifier	next
>15506	Identifier	b
>15507	PtrMemberAccess	b -> prev -> next
>15508	Identifier	next
>15509	PtrMemberAccess	b -> prev
>15510	Identifier	prev
>15511	Identifier	b
>15512	ExpressionStatement	 
>15513	AssignmentExpr	b -> next -> prev = b -> prev
>15514	PtrMemberAccess	b -> prev
>15515	Identifier	prev
>15516	Identifier	b
>15517	PtrMemberAccess	b -> next -> prev
>15518	Identifier	prev
>15519	PtrMemberAccess	b -> next
>15520	Identifier	next
>15521	Identifier	b
>15522	IfStatement	if ( b -> terrainBrush )
>15523	CompoundStatement	 
>15524	ExpressionStatement	 
>15525	CallExpression	Terrain_Deselect ( b -> pTerrain )
>15526	ArgumentList	b -> pTerrain
>15527	Argument	b -> pTerrain
>15528	PtrMemberAccess	b -> pTerrain
>15529	Identifier	pTerrain
>15530	Identifier	b
>15531	Callee	Terrain_Deselect
>15532	Identifier	Terrain_Deselect
>15533	Condition	 
>15534	PtrMemberAccess	b -> terrainBrush
>15535	Identifier	terrainBrush
>15536	Identifier	b
>15537	IfStatement	if ( b -> patchBrush )
>15538	CompoundStatement	 
>15539	ExpressionStatement	 
>15540	CallExpression	Patch_Deselect ( b -> pPatch )
>15541	ArgumentList	b -> pPatch
>15542	Argument	b -> pPatch
>15543	PtrMemberAccess	b -> pPatch
>15544	Identifier	pPatch
>15545	Identifier	b
>15546	Callee	Patch_Deselect
>15547	Identifier	Patch_Deselect
>15548	Condition	 
>15549	PtrMemberAccess	b -> patchBrush
>15550	Identifier	patchBrush
>15551	Identifier	b
>15552	IfStatement	if ( ! b -> next || ! b -> prev )
>15553	ExpressionStatement	 
>15554	CallExpression	Error ( \"Brush_RemoveFromList
>15555	ArgumentList	\"Brush_RemoveFromList
>15556	Argument	\"Brush_RemoveFromList
>15557	PrimaryExpression	\"Brush_RemoveFromList
>15558	Callee	Error
>15559	Identifier	Error
>15560	Condition	 
>15561	OrExpression	! b -> next || ! b -> prev
>15562	UnaryOp	! b -> prev
>15563	PtrMemberAccess	b -> prev
>15564	Identifier	prev
>15565	Identifier	b
>15566	UnaryOperator	!
>15567	UnaryOp	! b -> next
>15568	PtrMemberAccess	b -> next
>15569	Identifier	next
>15570	Identifier	b
>15571	UnaryOperator	!
>15589	FunctionDef	SetFaceTexdef (brush_t * b , face_t * f , texdef_t * texdef , brushprimit_texdef_t * brushprimit_texdef , bool bFitScale , \
>15590	ParameterList	brush_t * b , face_t * f , texdef_t * texdef , brushprimit_texdef_t * brushprimit_texdef , bool bFitScale , IPluginTexdef * \
>15591	Parameter	 
>15592	Identifier	pPlugTexdef
>15593	ParameterType	IPluginTexdef *
>15594	Parameter	 
>15595	Identifier	bFitScale
>15596	ParameterType	bool
>15597	Parameter	 
>15598	Identifier	brushprimit_texdef
>15599	ParameterType	brushprimit_texdef_t *
>15600	Parameter	 
>15601	Identifier	texdef
>15602	ParameterType	texdef_t *
>15603	Parameter	 
>15604	Identifier	f
>15605	ParameterType	face_t *
>15606	Parameter	 
>15607	Identifier	b
>15608	ParameterType	brush_t *
>15609	ReturnType	void
>15610	CompoundStatement	 
>15611	IfStatement	if ( f -> texdef . flags & SURF_CURVE )
>15612	CompoundStatement	 
>15613	ForStatement	for ( tf = b -> brush_faces ; tf ; tf = tf -> next )
>15614	CompoundStatement	 
>15615	IfStatement	if ( tf -> texdef . flags & SURF_CURVE )
>15616	ExpressionStatement	 
>15617	AssignmentExpr	tf -> texdef = f -> texdef
>15618	PtrMemberAccess	f -> texdef
>15619	Identifier	texdef
>15620	Identifier	f
>15621	PtrMemberAccess	tf -> texdef
>15622	Identifier	texdef
>15623	Identifier	tf
>15624	Condition	 
>15625	BitAndExpression	tf -> texdef . flags & SURF_CURVE
>15626	Identifier	SURF_CURVE
>15627	MemberAccess	tf -> texdef . flags
>15628	Identifier	flags
>15629	PtrMemberAccess	tf -> texdef
>15630	Identifier	texdef
>15631	Identifier	tf
>15632	AssignmentExpr	 
>15633	PtrMemberAccess	tf -> next
>15634	Identifier	next
>15635	Identifier	tf
>15636	Identifier	tf
>15637	Condition	 
>15638	Identifier	tf
>15639	ForInit	 
>15640	AssignmentExpr	tf = b -> brush_faces
>15641	PtrMemberAccess	b -> brush_faces
>15642	Identifier	brush_faces
>15643	Identifier	b
>15644	Identifier	tf
>15645	Condition	 
>15646	BitAndExpression	f -> texdef . flags & SURF_CURVE
>15647	Identifier	SURF_CURVE
>15648	MemberAccess	f -> texdef . flags
>15649	Identifier	flags
>15650	PtrMemberAccess	f -> texdef
>15651	Identifier	texdef
>15652	Identifier	f
>15653	IfStatement	if ( g_qeglobals . bSurfacePropertiesPlugin )
>15654	CompoundStatement	 
>15655	ExpressionStatement	 
>15656	AssignmentExpr	f -> pData = pTexdef
>15657	Identifier	pTexdef
>15658	PtrMemberAccess	f -> pData
>15659	Identifier	pData
>15660	Identifier	f
>15661	IfStatement	if ( pPlugTexdef )
>15662	ElseStatement	else
>15663	ExpressionStatement	 
>15664	AssignmentExpr	pTexdef = g_SurfaceTable . m_pfnTexdefAlloc ( f )
>15665	CallExpression	g_SurfaceTable . m_pfnTexdefAlloc ( f )
>15666	ArgumentList	f
>15667	Argument	f
>15668	Identifier	f
>15669	Callee	g_SurfaceTable . m_pfnTexdefAlloc
>15670	MemberAccess	g_SurfaceTable . m_pfnTexdefAlloc
>15671	Identifier	m_pfnTexdefAlloc
>15672	Identifier	g_SurfaceTable
>15673	Identifier	pTexdef
>15674	CompoundStatement	 
>15675	ExpressionStatement	 
>15676	CallExpression	pTexdef -> Hook ( f )
>15677	ArgumentList	f
>15678	Argument	f
>15679	Identifier	f
>15680	Callee	pTexdef -> Hook
>15681	PtrMemberAccess	pTexdef -> Hook
>15682	Identifier	Hook
>15683	Identifier	pTexdef
>15684	ExpressionStatement	 
>15685	AssignmentExpr	pTexdef = pPlugTexdef -> Copy ( )
>15686	CallExpression	pPlugTexdef -> Copy ( )
>15687	ArgumentList	 
>15688	Callee	pPlugTexdef -> Copy
>15689	PtrMemberAccess	pPlugTexdef -> Copy
>15690	Identifier	Copy
>15691	Identifier	pPlugTexdef
>15692	Identifier	pTexdef
>15693	Condition	 
>15694	Identifier	pPlugTexdef
>15695	IdentifierDeclStatement	 
>15696	IdentifierDecl	* pTexdef = NULL
>15697	AssignmentExpr	* pTexdef = NULL
>15698	Identifier	NULL
>15699	Identifier	NULL
>15700	Identifier	pTexdef
>15701	IdentifierDeclType	IPluginTexdef *
>15702	IfStatement	if ( ! f -> pData )
>15703	ElseStatement	else
>15704	ExpressionStatement	 
>15705	CallExpression	GETPLUGINTEXDEF ( f ) -> DecRef ( )
>15706	ArgumentList	 
>15707	Callee	GETPLUGINTEXDEF ( f ) -> DecRef
>15708	PtrMemberAccess	GETPLUGINTEXDEF ( f ) -> DecRef
>15709	Identifier	DecRef
>15710	CallExpression	GETPLUGINTEXDEF ( f )
>15711	ArgumentList	f
>15712	Argument	f
>15713	Identifier	f
>15714	Callee	GETPLUGINTEXDEF
>15715	Identifier	GETPLUGINTEXDEF
>15716	ExpressionStatement	 
>15717	CallExpression	Sys_Printf ( \"ERROR
>15718	ArgumentList	\"ERROR
>15719	Argument	\"ERROR
>15720	PrimaryExpression	\"ERROR
>15721	Callee	Sys_Printf
>15722	Identifier	Sys_Printf
>15723	Condition	 
>15724	UnaryOp	! f -> pData
>15725	PtrMemberAccess	f -> pData
>15726	Identifier	pData
>15727	Identifier	f
>15728	UnaryOperator	!
>15729	Condition	 
>15730	MemberAccess	g_qeglobals . bSurfacePropertiesPlugin
>15731	Identifier	bSurfacePropertiesPlugin
>15732	Identifier	g_qeglobals
>15733	ExpressionStatement	 
>15734	AssignmentExpr	f -> texdef . contents = ( f -> texdef . contents & ~CONTENTS_KEEP ) | ( oldContents & CONTENTS_KEEP )
>15735	InclusiveOrExpression	( f -> texdef . contents & ~CONTENTS_KEEP ) | ( oldContents & CONTENTS_KEEP )
>15736	BitAndExpression	oldContents & CONTENTS_KEEP
>15737	Identifier	CONTENTS_KEEP
>15738	Identifier	oldContents
>15739	BitAndExpression	f -> texdef . contents & ~CONTENTS_KEEP
>15740	Identifier	~CONTENTS_KEEP
>15741	MemberAccess	f -> texdef . contents
>15742	Identifier	contents
>15743	PtrMemberAccess	f -> texdef
>15744	Identifier	texdef
>15745	Identifier	f
>15746	MemberAccess	f -> texdef . contents
>15747	Identifier	contents
>15748	PtrMemberAccess	f -> texdef
>15749	Identifier	texdef
>15750	Identifier	f
>15751	ExpressionStatement	 
>15752	AssignmentExpr	f -> texdef . flags = ( f -> texdef . flags & ~SURF_KEEP ) | ( oldFlags & SURF_KEEP )
>15753	InclusiveOrExpression	( f -> texdef . flags & ~SURF_KEEP ) | ( oldFlags & SURF_KEEP )
>15754	BitAndExpression	oldFlags & SURF_KEEP
>15755	Identifier	SURF_KEEP
>15756	Identifier	oldFlags
>15757	BitAndExpression	f -> texdef . flags & ~SURF_KEEP
>15758	Identifier	~SURF_KEEP
>15759	MemberAccess	f -> texdef . flags
>15760	Identifier	flags
>15761	PtrMemberAccess	f -> texdef
>15762	Identifier	texdef
>15763	Identifier	f
>15764	MemberAccess	f -> texdef . flags
>15765	Identifier	flags
>15766	PtrMemberAccess	f -> texdef
>15767	Identifier	texdef
>15768	Identifier	f
>15769	IfStatement	if ( g_qeglobals . m_bBrushPrimitMode )
>15770	ElseStatement	else
>15771	IfStatement	if ( bFitScale )
>15772	ElseStatement	else
>15773	ExpressionStatement	 
>15774	AssignmentExpr	f -> texdef = * texdef
>15775	UnaryOp	* texdef
>15776	Identifier	texdef
>15777	UnaryOperator	*
>15778	PtrMemberAccess	f -> texdef
>15779	Identifier	texdef
>15780	Identifier	f
>15781	CompoundStatement	 
>15782	ExpressionStatement	 
>15783	CallExpression	AbsoluteToLocal ( f -> plane , f , p1 , p2 , p3 )
>15784	ArgumentList	f -> plane
>15785	Argument	p3
>15786	Identifier	p3
>15787	Argument	p2
>15788	Identifier	p2
>15789	Argument	p1
>15790	Identifier	p1
>15791	Argument	f
>15792	Identifier	f
>15793	Argument	f -> plane
>15794	PtrMemberAccess	f -> plane
>15795	Identifier	plane
>15796	Identifier	f
>15797	Callee	AbsoluteToLocal
>15798	Identifier	AbsoluteToLocal
>15799	ExpressionStatement	 
>15800	CallExpression	VectorAdd ( p1 , vy , p3 )
>15801	ArgumentList	p1
>15802	Argument	p3
>15803	Identifier	p3
>15804	Argument	vy
>15805	Identifier	vy
>15806	Argument	p1
>15807	Identifier	p1
>15808	Callee	VectorAdd
>15809	Identifier	VectorAdd
>15810	ExpressionStatement	 
>15811	CallExpression	VectorAdd ( p1 , vx , p2 )
>15812	ArgumentList	p1
>15813	Argument	p2
>15814	Identifier	p2
>15815	Argument	vx
>15816	Identifier	vx
>15817	Argument	p1
>15818	Identifier	p1
>15819	Callee	VectorAdd
>15820	Identifier	VectorAdd
>15821	ExpressionStatement	 
>15822	CallExpression	VectorScale ( vy , texdef -> scale [ 1 ] , vy )
>15823	ArgumentList	vy
>15824	Argument	vy
>15825	Identifier	vy
>15826	Argument	texdef -> scale [ 1 ]
>15827	ArrayIndexing	texdef -> scale [ 1 ]
>15828	PrimaryExpression	1
>15829	PtrMemberAccess	texdef -> scale
>15830	Identifier	scale
>15831	Identifier	texdef
>15832	Argument	vy
>15833	Identifier	vy
>15834	Callee	VectorScale
>15835	Identifier	VectorScale
>15836	ExpressionStatement	 
>15837	CallExpression	VectorScale ( vx , texdef -> scale [ 0 ] , vx )
>15838	ArgumentList	vx
>15839	Argument	vx
>15840	Identifier	vx
>15841	Argument	texdef -> scale [ 0 ]
>15842	ArrayIndexing	texdef -> scale [ 0 ]
>15843	PrimaryExpression	0
>15844	PtrMemberAccess	texdef -> scale
>15845	Identifier	scale
>15846	Identifier	texdef
>15847	Argument	vx
>15848	Identifier	vx
>15849	Callee	VectorScale
>15850	Identifier	VectorScale
>15851	ExpressionStatement	 
>15852	CallExpression	VectorNormalize ( vy )
>15853	ArgumentList	vy
>15854	Argument	vy
>15855	Identifier	vy
>15856	Callee	VectorNormalize
>15857	Identifier	VectorNormalize
>15858	ExpressionStatement	 
>15859	CallExpression	VectorSubtract ( p3 , p1 , vy )
>15860	ArgumentList	p3
>15861	Argument	vy
>15862	Identifier	vy
>15863	Argument	p1
>15864	Identifier	p1
>15865	Argument	p3
>15866	Identifier	p3
>15867	Callee	VectorSubtract
>15868	Identifier	VectorSubtract
>15869	ExpressionStatement	 
>15870	CallExpression	VectorNormalize ( vx )
>15871	ArgumentList	vx
>15872	Argument	vx
>15873	Identifier	vx
>15874	Callee	VectorNormalize
>15875	Identifier	VectorNormalize
>15876	ExpressionStatement	 
>15877	CallExpression	VectorSubtract ( p2 , p1 , vx )
>15878	ArgumentList	p2
>15879	Argument	vx
>15880	Identifier	vx
>15881	Argument	p1
>15882	Identifier	p1
>15883	Argument	p2
>15884	Identifier	p2
>15885	Callee	VectorSubtract
>15886	Identifier	VectorSubtract
>15887	IdentifierDeclStatement	 
>15888	IdentifierDecl	vy
>15889	Identifier	vy
>15890	IdentifierDeclType	vec3_t
>15891	IdentifierDecl	vx
>15892	Identifier	vx
>15893	IdentifierDeclType	vec3_t
>15894	ExpressionStatement	 
>15895	CallExpression	ComputeAbsolute ( f , p1 , p2 , p3 )
>15896	ArgumentList	f
>15897	Argument	p3
>15898	Identifier	p3
>15899	Argument	p2
>15900	Identifier	p2
>15901	Argument	p1
>15902	Identifier	p1
>15903	Argument	f
>15904	Identifier	f
>15905	Callee	ComputeAbsolute
>15906	Identifier	ComputeAbsolute
>15907	IdentifierDeclStatement	 
>15908	IdentifierDecl	p3
>15909	Identifier	p3
>15910	IdentifierDeclType	vec3_t
>15911	IdentifierDecl	p2
>15912	Identifier	p2
>15913	IdentifierDeclType	vec3_t
>15914	IdentifierDecl	p1
>15915	Identifier	p1
>15916	IdentifierDeclType	vec3_t
>15917	ExpressionStatement	 
>15918	AssignmentExpr	f -> texdef = * texdef
>15919	UnaryOp	* texdef
>15920	Identifier	texdef
>15921	UnaryOperator	*
>15922	PtrMemberAccess	f -> texdef
>15923	Identifier	texdef
>15924	Identifier	f
>15925	Condition	 
>15926	Identifier	bFitScale
>15927	CompoundStatement	 
>15928	ExpressionStatement	 
>15929	CallExpression	ConvertTexMatWithQTexture ( brushprimit_texdef , NULL , & f -> brushprimit_texdef , Texture_ForName ( f -> texdef \
>15930	ArgumentList	brushprimit_texdef
>15931	Argument	Texture_ForName ( f -> texdef . name )
>15932	CallExpression	Texture_ForName ( f -> texdef . name )
>15933	ArgumentList	f -> texdef . name
>15934	Argument	f -> texdef . name
>15935	MemberAccess	f -> texdef . name
>15936	Identifier	name
>15937	PtrMemberAccess	f -> texdef
>15938	Identifier	texdef
>15939	Identifier	f
>15940	Callee	Texture_ForName
>15941	Identifier	Texture_ForName
>15942	Argument	& f -> brushprimit_texdef
>15943	UnaryOp	& f -> brushprimit_texdef
>15944	PtrMemberAccess	f -> brushprimit_texdef
>15945	Identifier	brushprimit_texdef
>15946	Identifier	f
>15947	UnaryOperator	&
>15948	Argument	NULL
>15949	Identifier	NULL
>15950	Argument	brushprimit_texdef
>15951	Identifier	brushprimit_texdef
>15952	Callee	ConvertTexMatWithQTexture
>15953	Identifier	ConvertTexMatWithQTexture
>15954	ExpressionStatement	 
>15955	AssignmentExpr	f -> texdef = * texdef
>15956	UnaryOp	* texdef
>15957	Identifier	texdef
>15958	UnaryOperator	*
>15959	PtrMemberAccess	f -> texdef
>15960	Identifier	texdef
>15961	Identifier	f
>15962	Condition	 
>15963	MemberAccess	g_qeglobals . m_bBrushPrimitMode
>15964	Identifier	m_bBrushPrimitMode
>15965	Identifier	g_qeglobals
>15966	ExpressionStatement	 
>15967	AssignmentExpr	oldContents = f -> texdef . contents
>15968	MemberAccess	f -> texdef . contents
>15969	Identifier	contents
>15970	PtrMemberAccess	f -> texdef
>15971	Identifier	texdef
>15972	Identifier	f
>15973	Identifier	oldContents
>15974	ExpressionStatement	 
>15975	AssignmentExpr	oldFlags = f -> texdef . flags
>15976	MemberAccess	f -> texdef . flags
>15977	Identifier	flags
>15978	PtrMemberAccess	f -> texdef
>15979	Identifier	texdef
>15980	Identifier	f
>15981	Identifier	oldFlags
>15982	IdentifierDeclStatement	 
>15983	IdentifierDecl	* tf
>15984	Identifier	tf
>15985	IdentifierDeclType	face_t *
>15986	IdentifierDeclStatement	 
>15987	IdentifierDecl	oldContents
>15988	Identifier	oldContents
>15989	IdentifierDeclType	int
>15990	IdentifierDeclStatement	 
>15991	IdentifierDecl	oldFlags
>15992	Identifier	oldFlags
>15993	IdentifierDeclType	int
>16046	FunctionDef	Brush_SetTexture (brush_t * b , texdef_t * texdef , brushprimit_texdef_t * brushprimit_texdef , bool bFitScale , \
>16047	ParameterList	brush_t * b , texdef_t * texdef , brushprimit_texdef_t * brushprimit_texdef , bool bFitScale , IPluginTexdef * pTexdef
>16048	Parameter	 
>16049	Identifier	pTexdef
>16050	ParameterType	IPluginTexdef *
>16051	Parameter	 
>16052	Identifier	bFitScale
>16053	ParameterType	bool
>16054	Parameter	 
>16055	Identifier	brushprimit_texdef
>16056	ParameterType	brushprimit_texdef_t *
>16057	Parameter	 
>16058	Identifier	texdef
>16059	ParameterType	texdef_t *
>16060	Parameter	 
>16061	Identifier	b
>16062	ParameterType	brush_t *
>16063	ReturnType	void
>16064	CompoundStatement	 
>16065	IfStatement	if ( b -> terrainBrush )
>16066	CompoundStatement	 
>16067	ExpressionStatement	 
>16068	CallExpression	Terrain_SetTexture ( b -> pTerrain , texdef )
>16069	ArgumentList	b -> pTerrain
>16070	Argument	texdef
>16071	Identifier	texdef
>16072	Argument	b -> pTerrain
>16073	PtrMemberAccess	b -> pTerrain
>16074	Identifier	pTerrain
>16075	Identifier	b
>16076	Callee	Terrain_SetTexture
>16077	Identifier	Terrain_SetTexture
>16078	Condition	 
>16079	PtrMemberAccess	b -> terrainBrush
>16080	Identifier	terrainBrush
>16081	Identifier	b
>16082	IfStatement	if ( b -> patchBrush )
>16083	CompoundStatement	 
>16084	ExpressionStatement	 
>16085	CallExpression	Patch_SetTexture ( b -> pPatch , texdef , pTexdef )
>16086	ArgumentList	b -> pPatch
>16087	Argument	pTexdef
>16088	Identifier	pTexdef
>16089	Argument	texdef
>16090	Identifier	texdef
>16091	Argument	b -> pPatch
>16092	PtrMemberAccess	b -> pPatch
>16093	Identifier	pPatch
>16094	Identifier	b
>16095	Callee	Patch_SetTexture
>16096	Identifier	Patch_SetTexture
>16097	Condition	 
>16098	PtrMemberAccess	b -> patchBrush
>16099	Identifier	patchBrush
>16100	Identifier	b
>16101	ExpressionStatement	 
>16102	CallExpression	Brush_Build ( b )
>16103	ArgumentList	b
>16104	Argument	b
>16105	Identifier	b
>16106	Callee	Brush_Build
>16107	Identifier	Brush_Build
>16108	ForStatement	for ( face_t * f = b -> brush_faces ; f ; f = f -> next )
>16109	CompoundStatement	 
>16110	ExpressionStatement	 
>16111	CallExpression	SetFaceTexdef ( b , f , texdef , brushprimit_texdef , bFitScale , pTexdef )
>16112	ArgumentList	b
>16113	Argument	pTexdef
>16114	Identifier	pTexdef
>16115	Argument	bFitScale
>16116	Identifier	bFitScale
>16117	Argument	brushprimit_texdef
>16118	Identifier	brushprimit_texdef
>16119	Argument	texdef
>16120	Identifier	texdef
>16121	Argument	f
>16122	Identifier	f
>16123	Argument	b
>16124	Identifier	b
>16125	Callee	SetFaceTexdef
>16126	Identifier	SetFaceTexdef
>16127	AssignmentExpr	 
>16128	PtrMemberAccess	f -> next
>16129	Identifier	next
>16130	Identifier	f
>16131	Identifier	f
>16132	Condition	 
>16133	Identifier	f
>16134	ForInit	 
>16135	IdentifierDeclStatement	face_t * f = b -> brush_faces ;
>16136	IdentifierDecl	* f = b -> brush_faces
>16137	AssignmentExpr	* f = b -> brush_faces
>16138	PtrMemberAccess	b -> brush_faces
>16139	Identifier	brush_faces
>16140	Identifier	b
>16141	Identifier	f
>16142	Identifier	f
>16143	IdentifierDeclType	face_t *
>16161	FunctionDef	ClipLineToFace (vec3_t p1 , vec3_t p2 , face_t * f)
>16162	ParameterList	vec3_t p1 , vec3_t p2 , face_t * f
>16163	Parameter	 
>16164	Identifier	f
>16165	ParameterType	face_t *
>16166	Parameter	 
>16167	Identifier	p2
>16168	ParameterType	vec3_t
>16169	Parameter	 
>16170	Identifier	p1
>16171	ParameterType	vec3_t
>16172	ReturnType	qboolean
>16173	CompoundStatement	 
>16174	ReturnStatement	 
>16175	Identifier	true
>16176	ForStatement	for ( i = 0 ; i < 3 ; i ++ )
>16177	ExpressionStatement	 
>16178	AssignmentExpr	v [ i ] = p1 [ i ] + fr * ( p2 [ i ] - p1 [ i ] )
>16179	AdditiveExpression	p1 [ i ] + fr * ( p2 [ i ] - p1 [ i ] )
>16180	MultiplicativeExpression	fr * ( p2 [ i ] - p1 [ i ] )
>16181	AdditiveExpression	p2 [ i ] - p1 [ i ]
>16182	ArrayIndexing	p1 [ i ]
>16183	Identifier	i
>16184	Identifier	p1
>16185	ArrayIndexing	p2 [ i ]
>16186	Identifier	i
>16187	Identifier	p2
>16188	Identifier	fr
>16189	ArrayIndexing	p1 [ i ]
>16190	Identifier	i
>16191	Identifier	p1
>16192	ArrayIndexing	v [ i ]
>16193	Identifier	i
>16194	Identifier	v
>16195	IncDecOp	 
>16196	IncDec	++
>16197	Identifier	i
>16198	Condition	 
>16199	RelationalExpression	i < 3
>16200	PrimaryExpression	3
>16201	Identifier	i
>16202	ForInit	 
>16203	AssignmentExpr	i = 0
>16204	PrimaryExpression	0
>16205	Identifier	i
>16206	IfStatement	if ( d1 > 0 )
>16207	ElseStatement	else
>16208	ExpressionStatement	 
>16209	AssignmentExpr	v = p2
>16210	Identifier	p2
>16211	Identifier	v
>16212	ExpressionStatement	 
>16213	AssignmentExpr	v = p1
>16214	Identifier	p1
>16215	Identifier	v
>16216	Condition	 
>16217	RelationalExpression	d1 > 0
>16218	PrimaryExpression	0
>16219	Identifier	d1
>16220	ExpressionStatement	 
>16221	AssignmentExpr	fr = d1 / ( d1 - d2 )
>16222	MultiplicativeExpression	d1 / ( d1 - d2 )
>16223	AdditiveExpression	d1 - d2
>16224	Identifier	d2
>16225	Identifier	d1
>16226	Identifier	d1
>16227	Identifier	fr
>16228	IfStatement	if ( d1 <= 0 && d2 <= 0 )
>16229	ReturnStatement	 
>16230	Identifier	true
>16231	Condition	 
>16232	AndExpression	d1 <= 0 && d2 <= 0
>16233	RelationalExpression	d2 <= 0
>16234	PrimaryExpression	0
>16235	Identifier	d2
>16236	RelationalExpression	d1 <= 0
>16237	PrimaryExpression	0
>16238	Identifier	d1
>16239	IfStatement	if ( d1 >= 0 && d2 >= 0 )
>16240	ReturnStatement	 
>16241	Identifier	false
>16242	Condition	 
>16243	AndExpression	d1 >= 0 && d2 >= 0
>16244	RelationalExpression	d2 >= 0
>16245	PrimaryExpression	0
>16246	Identifier	d2
>16247	RelationalExpression	d1 >= 0
>16248	PrimaryExpression	0
>16249	Identifier	d1
>16250	ExpressionStatement	 
>16251	AssignmentExpr	d2 = DotProduct ( p2 , f -> plane . normal ) - f -> plane . dist
>16252	AdditiveExpression	DotProduct ( p2 , f -> plane . normal ) - f -> plane . dist
>16253	MemberAccess	f -> plane . dist
>16254	Identifier	dist
>16255	PtrMemberAccess	f -> plane
>16256	Identifier	plane
>16257	Identifier	f
>16258	CallExpression	DotProduct ( p2 , f -> plane . normal )
>16259	ArgumentList	p2
>16260	Argument	f -> plane . normal
>16261	MemberAccess	f -> plane . normal
>16262	Identifier	normal
>16263	PtrMemberAccess	f -> plane
>16264	Identifier	plane
>16265	Identifier	f
>16266	Argument	p2
>16267	Identifier	p2
>16268	Callee	DotProduct
>16269	Identifier	DotProduct
>16270	Identifier	d2
>16271	ExpressionStatement	 
>16272	AssignmentExpr	d1 = DotProduct ( p1 , f -> plane . normal ) - f -> plane . dist
>16273	AdditiveExpression	DotProduct ( p1 , f -> plane . normal ) - f -> plane . dist
>16274	MemberAccess	f -> plane . dist
>16275	Identifier	dist
>16276	PtrMemberAccess	f -> plane
>16277	Identifier	plane
>16278	Identifier	f
>16279	CallExpression	DotProduct ( p1 , f -> plane . normal )
>16280	ArgumentList	p1
>16281	Argument	f -> plane . normal
>16282	MemberAccess	f -> plane . normal
>16283	Identifier	normal
>16284	PtrMemberAccess	f -> plane
>16285	Identifier	plane
>16286	Identifier	f
>16287	Argument	p1
>16288	Identifier	p1
>16289	Callee	DotProduct
>16290	Identifier	DotProduct
>16291	Identifier	d1
>16292	IdentifierDeclStatement	 
>16293	IdentifierDecl	* v
>16294	Identifier	v
>16295	IdentifierDeclType	float *
>16296	IdentifierDeclStatement	 
>16297	IdentifierDecl	i
>16298	Identifier	i
>16299	IdentifierDeclType	int
>16300	IdentifierDeclStatement	 
>16301	IdentifierDecl	fr
>16302	Identifier	fr
>16303	IdentifierDeclType	float
>16304	IdentifierDecl	d2
>16305	Identifier	d2
>16306	IdentifierDeclType	float
>16307	IdentifierDecl	d1
>16308	Identifier	d1
>16309	IdentifierDeclType	float
>16332	FunctionDef	AddPlanept (float * f)
>16333	ParameterList	float * f
>16334	Parameter	 
>16335	Identifier	f
>16336	ParameterType	float *
>16337	ReturnType	int
>16338	CompoundStatement	 
>16339	ReturnStatement	 
>16340	PrimaryExpression	1
>16341	ExpressionStatement	 
>16342	AssignmentExpr	g_qeglobals . d_move_points [ g_qeglobals . d_num_move_points ++ ] = f
>16343	Identifier	f
>16344	ArrayIndexing	g_qeglobals . d_move_points [ g_qeglobals . d_num_move_points ++ ]
>16345	IncDecOp	g_qeglobals . d_num_move_points ++
>16346	IncDec	++
>16347	MemberAccess	g_qeglobals . d_num_move_points
>16348	Identifier	d_num_move_points
>16349	Identifier	g_qeglobals
>16350	MemberAccess	g_qeglobals . d_move_points
>16351	Identifier	d_move_points
>16352	Identifier	g_qeglobals
>16353	ForStatement	for ( i = 0 ; i < g_qeglobals . d_num_move_points ; i ++ )
>16354	IfStatement	if ( g_qeglobals . d_move_points [ i ] == f )
>16355	ReturnStatement	 
>16356	PrimaryExpression	0
>16357	Condition	 
>16358	EqualityExpression	g_qeglobals . d_move_points [ i ] == f
>16359	Identifier	f
>16360	ArrayIndexing	g_qeglobals . d_move_points [ i ]
>16361	Identifier	i
>16362	MemberAccess	g_qeglobals . d_move_points
>16363	Identifier	d_move_points
>16364	Identifier	g_qeglobals
>16365	IncDecOp	 
>16366	IncDec	++
>16367	Identifier	i
>16368	Condition	 
>16369	RelationalExpression	i < g_qeglobals . d_num_move_points
>16370	MemberAccess	g_qeglobals . d_num_move_points
>16371	Identifier	d_num_move_points
>16372	Identifier	g_qeglobals
>16373	Identifier	i
>16374	ForInit	 
>16375	AssignmentExpr	i = 0
>16376	PrimaryExpression	0
>16377	Identifier	i
>16378	IdentifierDeclStatement	 
>16379	IdentifierDecl	i
>16380	Identifier	i
>16381	IdentifierDeclType	int
>16394	FunctionDef	Brush_SelectFaceForDragging (brush_t * b , face_t * f , qboolean shear)
>16395	ParameterList	brush_t * b , face_t * f , qboolean shear
>16396	Parameter	 
>16397	Identifier	shear
>16398	ParameterType	qboolean
>16399	Parameter	 
>16400	Identifier	f
>16401	ParameterType	face_t *
>16402	Parameter	 
>16403	Identifier	b
>16404	ParameterType	brush_t *
>16405	ReturnType	void
>16406	CompoundStatement	 
>16407	ForStatement	for ( f2 = b -> brush_faces ; f2 ; f2 = f2 -> next )
>16408	CompoundStatement	 
>16409	ExpressionStatement	 
>16410	CallExpression	free ( w )
>16411	ArgumentList	w
>16412	Argument	w
>16413	Identifier	w
>16414	Callee	free
>16415	Identifier	free
>16416	IfStatement	if ( i != w -> numpoints )
>16417	CompoundStatement	 
>16418	ExpressionStatement	 
>16419	CallExpression	VectorCopy ( w -> points [ i ] , f2 -> planepts [ 2 ] )
>16420	ArgumentList	w -> points [ i ]
>16421	Argument	f2 -> planepts [ 2 ]
>16422	ArrayIndexing	f2 -> planepts [ 2 ]
>16423	PrimaryExpression	2
>16424	PtrMemberAccess	f2 -> planepts
>16425	Identifier	planepts
>16426	Identifier	f2
>16427	Argument	w -> points [ i ]
>16428	ArrayIndexing	w -> points [ i ]
>16429	Identifier	i
>16430	PtrMemberAccess	w -> points
>16431	Identifier	points
>16432	Identifier	w
>16433	Callee	VectorCopy
>16434	Identifier	VectorCopy
>16435	IfStatement	if ( ++ i == w -> numpoints )
>16436	ExpressionStatement	 
>16437	AssignmentExpr	i = 0
>16438	PrimaryExpression	0
>16439	Identifier	i
>16440	Condition	 
>16441	EqualityExpression	++ i == w -> numpoints
>16442	PtrMemberAccess	w -> numpoints
>16443	Identifier	numpoints
>16444	Identifier	w
>16445	UnaryExpression	++ i
>16446	Identifier	i
>16447	IncDec	++
>16448	ExpressionStatement	 
>16449	CallExpression	VectorCopy ( w -> points [ i ] , f2 -> planepts [ 1 ] )
>16450	ArgumentList	w -> points [ i ]
>16451	Argument	f2 -> planepts [ 1 ]
>16452	ArrayIndexing	f2 -> planepts [ 1 ]
>16453	PrimaryExpression	1
>16454	PtrMemberAccess	f2 -> planepts
>16455	Identifier	planepts
>16456	Identifier	f2
>16457	Argument	w -> points [ i ]
>16458	ArrayIndexing	w -> points [ i ]
>16459	Identifier	i
>16460	PtrMemberAccess	w -> points
>16461	Identifier	points
>16462	Identifier	w
>16463	Callee	VectorCopy
>16464	Identifier	VectorCopy
>16465	IfStatement	if ( d > - ON_EPSILON && d < ON_EPSILON )
>16466	ExpressionStatement	 
>16467	CallExpression	AddPlanept ( f2 -> planepts [ 1 ] )
>16468	ArgumentList	f2 -> planepts [ 1 ]
>16469	Argument	f2 -> planepts [ 1 ]
>16470	ArrayIndexing	f2 -> planepts [ 1 ]
>16471	PrimaryExpression	1
>16472	PtrMemberAccess	f2 -> planepts
>16473	Identifier	planepts
>16474	Identifier	f2
>16475	Callee	AddPlanept
>16476	Identifier	AddPlanept
>16477	Condition	 
>16478	AndExpression	d > - ON_EPSILON && d < ON_EPSILON
>16479	RelationalExpression	d < ON_EPSILON
>16480	Identifier	ON_EPSILON
>16481	Identifier	d
>16482	RelationalExpression	d > - ON_EPSILON
>16483	UnaryOp	- ON_EPSILON
>16484	Identifier	ON_EPSILON
>16485	UnaryOperator	-
>16486	Identifier	d
>16487	ExpressionStatement	 
>16488	AssignmentExpr	d = DotProduct ( w -> points [ i ] , f -> plane . normal ) - f -> plane . dist
>16489	AdditiveExpression	DotProduct ( w -> points [ i ] , f -> plane . normal ) - f -> plane . dist
>16490	MemberAccess	f -> plane . dist
>16491	Identifier	dist
>16492	PtrMemberAccess	f -> plane
>16493	Identifier	plane
>16494	Identifier	f
>16495	CallExpression	DotProduct ( w -> points [ i ] , f -> plane . normal )
>16496	ArgumentList	w -> points [ i ]
>16497	Argument	f -> plane . normal
>16498	MemberAccess	f -> plane . normal
>16499	Identifier	normal
>16500	PtrMemberAccess	f -> plane
>16501	Identifier	plane
>16502	Identifier	f
>16503	Argument	w -> points [ i ]
>16504	ArrayIndexing	w -> points [ i ]
>16505	Identifier	i
>16506	PtrMemberAccess	w -> points
>16507	Identifier	points
>16508	Identifier	w
>16509	Callee	DotProduct
>16510	Identifier	DotProduct
>16511	Identifier	d
>16512	IfStatement	if ( ++ i == w -> numpoints )
>16513	ExpressionStatement	 
>16514	AssignmentExpr	i = 0
>16515	PrimaryExpression	0
>16516	Identifier	i
>16517	Condition	 
>16518	EqualityExpression	++ i == w -> numpoints
>16519	PtrMemberAccess	w -> numpoints
>16520	Identifier	numpoints
>16521	Identifier	w
>16522	UnaryExpression	++ i
>16523	Identifier	i
>16524	IncDec	++
>16525	ExpressionStatement	 
>16526	CallExpression	VectorCopy ( w -> points [ i ] , f2 -> planepts [ 0 ] )
>16527	ArgumentList	w -> points [ i ]
>16528	Argument	f2 -> planepts [ 0 ]
>16529	ArrayIndexing	f2 -> planepts [ 0 ]
>16530	PrimaryExpression	0
>16531	PtrMemberAccess	f2 -> planepts
>16532	Identifier	planepts
>16533	Identifier	f2
>16534	Argument	w -> points [ i ]
>16535	ArrayIndexing	w -> points [ i ]
>16536	Identifier	i
>16537	PtrMemberAccess	w -> points
>16538	Identifier	points
>16539	Identifier	w
>16540	Callee	VectorCopy
>16541	Identifier	VectorCopy
>16542	ExpressionStatement	 
>16543	CallExpression	AddPlanept ( f2 -> planepts [ 0 ] )
>16544	ArgumentList	f2 -> planepts [ 0 ]
>16545	Argument	f2 -> planepts [ 0 ]
>16546	ArrayIndexing	f2 -> planepts [ 0 ]
>16547	PrimaryExpression	0
>16548	PtrMemberAccess	f2 -> planepts
>16549	Identifier	planepts
>16550	Identifier	f2
>16551	Callee	AddPlanept
>16552	Identifier	AddPlanept
>16553	IfStatement	if ( i == 0 )
>16554	CompoundStatement	 
>16555	IfStatement	if ( d > - ON_EPSILON && d < ON_EPSILON )
>16556	ExpressionStatement	 
>16557	AssignmentExpr	i = w -> numpoints - 1
>16558	AdditiveExpression	w -> numpoints - 1
>16559	PrimaryExpression	1
>16560	PtrMemberAccess	w -> numpoints
>16561	Identifier	numpoints
>16562	Identifier	w
>16563	Identifier	i
>16564	Condition	 
>16565	AndExpression	d > - ON_EPSILON && d < ON_EPSILON
>16566	RelationalExpression	d < ON_EPSILON
>16567	Identifier	ON_EPSILON
>16568	Identifier	d
>16569	RelationalExpression	d > - ON_EPSILON
>16570	UnaryOp	- ON_EPSILON
>16571	Identifier	ON_EPSILON
>16572	UnaryOperator	-
>16573	Identifier	d
>16574	ExpressionStatement	 
>16575	AssignmentExpr	d = DotProduct ( w -> points [ w -> numpoints - 1 ] , f -> plane . normal ) - f -> plane . dist
>16576	AdditiveExpression	DotProduct ( w -> points [ w -> numpoints - 1 ] , f -> plane . normal ) - f -> plane . dist
>16577	MemberAccess	f -> plane . dist
>16578	Identifier	dist
>16579	PtrMemberAccess	f -> plane
>16580	Identifier	plane
>16581	Identifier	f
>16582	CallExpression	DotProduct ( w -> points [ w -> numpoints - 1 ] , f -> plane . normal )
>16583	ArgumentList	w -> points [ w -> numpoints - 1 ]
>16584	Argument	f -> plane . normal
>16585	MemberAccess	f -> plane . normal
>16586	Identifier	normal
>16587	PtrMemberAccess	f -> plane
>16588	Identifier	plane
>16589	Identifier	f
>16590	Argument	w -> points [ w -> numpoints - 1 ]
>16591	ArrayIndexing	w -> points [ w -> numpoints - 1 ]
>16592	AdditiveExpression	w -> numpoints - 1
>16593	PrimaryExpression	1
>16594	PtrMemberAccess	w -> numpoints
>16595	Identifier	numpoints
>16596	Identifier	w
>16597	PtrMemberAccess	w -> points
>16598	Identifier	points
>16599	Identifier	w
>16600	Callee	DotProduct
>16601	Identifier	DotProduct
>16602	Identifier	d
>16603	Condition	 
>16604	EqualityExpression	i == 0
>16605	PrimaryExpression	0
>16606	Identifier	i
>16607	Condition	 
>16608	EqualityExpression	i != w -> numpoints
>16609	PtrMemberAccess	w -> numpoints
>16610	Identifier	numpoints
>16611	Identifier	w
>16612	Identifier	i
>16613	ForStatement	for ( i = 0 ; i < w -> numpoints ; i ++ )
>16614	CompoundStatement	 
>16615	IfStatement	if ( d > - ON_EPSILON && d < ON_EPSILON )
>16616	BreakStatement	 
>16617	Condition	 
>16618	AndExpression	d > - ON_EPSILON && d < ON_EPSILON
>16619	RelationalExpression	d < ON_EPSILON
>16620	Identifier	ON_EPSILON
>16621	Identifier	d
>16622	RelationalExpression	d > - ON_EPSILON
>16623	UnaryOp	- ON_EPSILON
>16624	Identifier	ON_EPSILON
>16625	UnaryOperator	-
>16626	Identifier	d
>16627	ExpressionStatement	 
>16628	AssignmentExpr	d = DotProduct ( w -> points [ i ] , f -> plane . normal ) - f -> plane . dist
>16629	AdditiveExpression	DotProduct ( w -> points [ i ] , f -> plane . normal ) - f -> plane . dist
>16630	MemberAccess	f -> plane . dist
>16631	Identifier	dist
>16632	PtrMemberAccess	f -> plane
>16633	Identifier	plane
>16634	Identifier	f
>16635	CallExpression	DotProduct ( w -> points [ i ] , f -> plane . normal )
>16636	ArgumentList	w -> points [ i ]
>16637	Argument	f -> plane . normal
>16638	MemberAccess	f -> plane . normal
>16639	Identifier	normal
>16640	PtrMemberAccess	f -> plane
>16641	Identifier	plane
>16642	Identifier	f
>16643	Argument	w -> points [ i ]
>16644	ArrayIndexing	w -> points [ i ]
>16645	Identifier	i
>16646	PtrMemberAccess	w -> points
>16647	Identifier	points
>16648	Identifier	w
>16649	Callee	DotProduct
>16650	Identifier	DotProduct
>16651	Identifier	d
>16652	IncDecOp	 
>16653	IncDec	++
>16654	Identifier	i
>16655	Condition	 
>16656	RelationalExpression	i < w -> numpoints
>16657	PtrMemberAccess	w -> numpoints
>16658	Identifier	numpoints
>16659	Identifier	w
>16660	Identifier	i
>16661	ForInit	 
>16662	AssignmentExpr	i = 0
>16663	PrimaryExpression	0
>16664	Identifier	i
>16665	IfStatement	if ( ! w )
>16666	ContinueStatement	 
>16667	Condition	 
>16668	UnaryOp	! w
>16669	Identifier	w
>16670	UnaryOperator	!
>16671	ExpressionStatement	 
>16672	AssignmentExpr	w = Brush_MakeFaceWinding ( b , f2 )
>16673	CallExpression	Brush_MakeFaceWinding ( b , f2 )
>16674	ArgumentList	b
>16675	Argument	f2
>16676	Identifier	f2
>16677	Argument	b
>16678	Identifier	b
>16679	Callee	Brush_MakeFaceWinding
>16680	Identifier	Brush_MakeFaceWinding
>16681	Identifier	w
>16682	IfStatement	if ( f2 == f )
>16683	ContinueStatement	 
>16684	Condition	 
>16685	EqualityExpression	f2 == f
>16686	Identifier	f
>16687	Identifier	f2
>16688	AssignmentExpr	 
>16689	PtrMemberAccess	f2 -> next
>16690	Identifier	next
>16691	Identifier	f2
>16692	Identifier	f2
>16693	Condition	 
>16694	Identifier	f2
>16695	ForInit	 
>16696	AssignmentExpr	f2 = b -> brush_faces
>16697	PtrMemberAccess	b -> brush_faces
>16698	Identifier	brush_faces
>16699	Identifier	b
>16700	Identifier	f2
>16701	IfStatement	if ( ! shear )
>16702	ReturnStatement	 
>16703	Condition	 
>16704	UnaryOp	! shear
>16705	Identifier	shear
>16706	UnaryOperator	!
>16707	ForStatement	for ( b2 = selected_brushes . next ; b2 != & selected_brushes ; b2 = b2 -> next )
>16708	CompoundStatement	 
>16709	ForStatement	for ( f2 = b2 -> brush_faces ; f2 ; f2 = f2 -> next )
>16710	CompoundStatement	 
>16711	IfStatement	if ( i == 3 )
>16712	CompoundStatement	 
>16713	BreakStatement	 
>16714	ExpressionStatement	 
>16715	CallExpression	Brush_SelectFaceForDragging ( b2 , f2 , shear )
>16716	ArgumentList	b2
>16717	Argument	shear
>16718	Identifier	shear
>16719	Argument	f2
>16720	Identifier	f2
>16721	Argument	b2
>16722	Identifier	b2
>16723	Callee	Brush_SelectFaceForDragging
>16724	Identifier	Brush_SelectFaceForDragging
>16725	Condition	 
>16726	EqualityExpression	i == 3
>16727	PrimaryExpression	3
>16728	Identifier	i
>16729	ForStatement	for ( i = 0 ; i < 3 ; i ++ )
>16730	IfStatement	if ( fabs ( DotProduct ( f2 -> planepts [ i ] , f -> plane . normal ) - f -> plane . dist ) > ON_EPSILON )
>16731	BreakStatement	 
>16732	Condition	 
>16733	RelationalExpression	fabs ( DotProduct ( f2 -> planepts [ i ] , f -> plane . normal ) - f -> plane . dist ) > ON_EPSILON
>16734	Identifier	ON_EPSILON
>16735	CallExpression	fabs ( DotProduct ( f2 -> planepts [ i ] , f -> plane . normal ) - f -> plane . dist )
>16736	ArgumentList	DotProduct ( f2 -> planepts [ i ] , f -> plane . normal ) - f -> plane . dist
>16737	Argument	DotProduct ( f2 -> planepts [ i ] , f -> plane . normal ) - f -> plane . dist
>16738	AdditiveExpression	DotProduct ( f2 -> planepts [ i ] , f -> plane . normal ) - f -> plane . dist
>16739	MemberAccess	f -> plane . dist
>16740	Identifier	dist
>16741	PtrMemberAccess	f -> plane
>16742	Identifier	plane
>16743	Identifier	f
>16744	CallExpression	DotProduct ( f2 -> planepts [ i ] , f -> plane . normal )
>16745	ArgumentList	f2 -> planepts [ i ]
>16746	Argument	f -> plane . normal
>16747	MemberAccess	f -> plane . normal
>16748	Identifier	normal
>16749	PtrMemberAccess	f -> plane
>16750	Identifier	plane
>16751	Identifier	f
>16752	Argument	f2 -> planepts [ i ]
>16753	ArrayIndexing	f2 -> planepts [ i ]
>16754	Identifier	i
>16755	PtrMemberAccess	f2 -> planepts
>16756	Identifier	planepts
>16757	Identifier	f2
>16758	Callee	DotProduct
>16759	Identifier	DotProduct
>16760	Callee	fabs
>16761	Identifier	fabs
>16762	IncDecOp	 
>16763	IncDec	++
>16764	Identifier	i
>16765	Condition	 
>16766	RelationalExpression	i < 3
>16767	PrimaryExpression	3
>16768	Identifier	i
>16769	ForInit	 
>16770	AssignmentExpr	i = 0
>16771	PrimaryExpression	0
>16772	Identifier	i
>16773	AssignmentExpr	 
>16774	PtrMemberAccess	f2 -> next
>16775	Identifier	next
>16776	Identifier	f2
>16777	Identifier	f2
>16778	Condition	 
>16779	Identifier	f2
>16780	ForInit	 
>16781	AssignmentExpr	f2 = b2 -> brush_faces
>16782	PtrMemberAccess	b2 -> brush_faces
>16783	Identifier	brush_faces
>16784	Identifier	b2
>16785	Identifier	f2
>16786	IfStatement	if ( b2 == b )
>16787	ContinueStatement	 
>16788	Condition	 
>16789	EqualityExpression	b2 == b
>16790	Identifier	b
>16791	Identifier	b2
>16792	AssignmentExpr	 
>16793	PtrMemberAccess	b2 -> next
>16794	Identifier	next
>16795	Identifier	b2
>16796	Identifier	b2
>16797	Condition	 
>16798	EqualityExpression	b2 != & selected_brushes
>16799	UnaryOp	& selected_brushes
>16800	Identifier	selected_brushes
>16801	UnaryOperator	&
>16802	Identifier	b2
>16803	ForInit	 
>16804	AssignmentExpr	b2 = selected_brushes . next
>16805	MemberAccess	selected_brushes . next
>16806	Identifier	next
>16807	Identifier	selected_brushes
>16808	Identifier	b2
>16809	IfStatement	if ( c == 0 )
>16810	ReturnStatement	 
>16811	Condition	 
>16812	EqualityExpression	c == 0
>16813	PrimaryExpression	0
>16814	Identifier	c
>16815	ForStatement	for ( i = 0 ; i < 3 ; i ++ )
>16816	ExpressionStatement	 
>16817	AssignmentExpr	c += AddPlanept ( f -> planepts [ i ] )
>16818	CallExpression	AddPlanept ( f -> planepts [ i ] )
>16819	ArgumentList	f -> planepts [ i ]
>16820	Argument	f -> planepts [ i ]
>16821	ArrayIndexing	f -> planepts [ i ]
>16822	Identifier	i
>16823	PtrMemberAccess	f -> planepts
>16824	Identifier	planepts
>16825	Identifier	f
>16826	Callee	AddPlanept
>16827	Identifier	AddPlanept
>16828	Identifier	c
>16829	IncDecOp	 
>16830	IncDec	++
>16831	Identifier	i
>16832	Condition	 
>16833	RelationalExpression	i < 3
>16834	PrimaryExpression	3
>16835	Identifier	i
>16836	ForInit	 
>16837	AssignmentExpr	i = 0
>16838	PrimaryExpression	0
>16839	Identifier	i
>16840	ExpressionStatement	 
>16841	AssignmentExpr	c = 0
>16842	PrimaryExpression	0
>16843	Identifier	c
>16844	IfStatement	if ( b -> owner -> eclass -> fixedsize )
>16845	ReturnStatement	 
>16846	Condition	 
>16847	PtrMemberAccess	b -> owner -> eclass -> fixedsize
>16848	Identifier	fixedsize
>16849	PtrMemberAccess	b -> owner -> eclass
>16850	Identifier	eclass
>16851	PtrMemberAccess	b -> owner
>16852	Identifier	owner
>16853	Identifier	b
>16854	IdentifierDeclStatement	 
>16855	IdentifierDecl	c
>16856	Identifier	c
>16857	IdentifierDeclType	int
>16858	IdentifierDeclStatement	 
>16859	IdentifierDecl	* b2
>16860	Identifier	b2
>16861	IdentifierDeclType	brush_t *
>16862	IdentifierDeclStatement	 
>16863	IdentifierDecl	d
>16864	Identifier	d
>16865	IdentifierDeclType	float
>16866	IdentifierDeclStatement	 
>16867	IdentifierDecl	* w
>16868	Identifier	w
>16869	IdentifierDeclType	winding_t *
>16870	IdentifierDeclStatement	 
>16871	IdentifierDecl	* f2
>16872	Identifier	f2
>16873	IdentifierDeclType	face_t *
>16874	IdentifierDeclStatement	 
>16875	IdentifierDecl	i
>16876	Identifier	i
>16877	IdentifierDeclType	int
>16930	FunctionDef	Brush_SideSelect (brush_t * b , vec3_t origin , vec3_t dir , qboolean shear)
>16931	ParameterList	brush_t * b , vec3_t origin , vec3_t dir , qboolean shear
>16932	Parameter	 
>16933	Identifier	shear
>16934	ParameterType	qboolean
>16935	Parameter	 
>16936	Identifier	dir
>16937	ParameterType	vec3_t
>16938	Parameter	 
>16939	Identifier	origin
>16940	ParameterType	vec3_t
>16941	Parameter	 
>16942	Identifier	b
>16943	ParameterType	brush_t *
>16944	ReturnType	void
>16945	CompoundStatement	 
>16946	ForStatement	for ( f = b -> brush_faces ; f ; f = f -> next )
>16947	CompoundStatement	 
>16948	ExpressionStatement	 
>16949	CallExpression	Brush_SelectFaceForDragging ( b , f , shear )
>16950	ArgumentList	b
>16951	Argument	shear
>16952	Identifier	shear
>16953	Argument	f
>16954	Identifier	f
>16955	Argument	b
>16956	Identifier	b
>16957	Callee	Brush_SelectFaceForDragging
>16958	Identifier	Brush_SelectFaceForDragging
>16959	IfStatement	if ( ClipLineToFace ( p1 , p2 , f ) )
>16960	ContinueStatement	 
>16961	Condition	 
>16962	CallExpression	ClipLineToFace ( p1 , p2 , f )
>16963	ArgumentList	p1
>16964	Argument	f
>16965	Identifier	f
>16966	Argument	p2
>16967	Identifier	p2
>16968	Argument	p1
>16969	Identifier	p1
>16970	Callee	ClipLineToFace
>16971	Identifier	ClipLineToFace
>16972	IfStatement	if ( VectorCompare ( p1 , origin ) )
>16973	ContinueStatement	 
>16974	Condition	 
>16975	CallExpression	VectorCompare ( p1 , origin )
>16976	ArgumentList	p1
>16977	Argument	origin
>16978	Identifier	origin
>16979	Argument	p1
>16980	Identifier	p1
>16981	Callee	VectorCompare
>16982	Identifier	VectorCompare
>16983	IfStatement	if ( f2 )
>16984	ContinueStatement	 
>16985	Condition	 
>16986	Identifier	f2
>16987	ForStatement	for ( f2 = b -> brush_faces ; f2 ; f2 = f2 -> next )
>16988	CompoundStatement	 
>16989	ExpressionStatement	 
>16990	CallExpression	ClipLineToFace ( p1 , p2 , f2 )
>16991	ArgumentList	p1
>16992	Argument	f2
>16993	Identifier	f2
>16994	Argument	p2
>16995	Identifier	p2
>16996	Argument	p1
>16997	Identifier	p1
>16998	Callee	ClipLineToFace
>16999	Identifier	ClipLineToFace
>17000	IfStatement	if ( f2 == f )
>17001	ContinueStatement	 
>17002	Condition	 
>17003	EqualityExpression	f2 == f
>17004	Identifier	f
>17005	Identifier	f2
>17006	AssignmentExpr	 
>17007	PtrMemberAccess	f2 -> next
>17008	Identifier	next
>17009	Identifier	f2
>17010	Identifier	f2
>17011	Condition	 
>17012	Identifier	f2
>17013	ForInit	 
>17014	AssignmentExpr	f2 = b -> brush_faces
>17015	PtrMemberAccess	b -> brush_faces
>17016	Identifier	brush_faces
>17017	Identifier	b
>17018	Identifier	f2
>17019	ExpressionStatement	 
>17020	CallExpression	VectorMA ( origin , 16384 , dir , p2 )
>17021	ArgumentList	origin
>17022	Argument	p2
>17023	Identifier	p2
>17024	Argument	dir
>17025	Identifier	dir
>17026	Argument	16384
>17027	PrimaryExpression	16384
>17028	Argument	origin
>17029	Identifier	origin
>17030	Callee	VectorMA
>17031	Identifier	VectorMA
>17032	ExpressionStatement	 
>17033	CallExpression	VectorCopy ( origin , p1 )
>17034	ArgumentList	origin
>17035	Argument	p1
>17036	Identifier	p1
>17037	Argument	origin
>17038	Identifier	origin
>17039	Callee	VectorCopy
>17040	Identifier	VectorCopy
>17041	AssignmentExpr	 
>17042	PtrMemberAccess	f -> next
>17043	Identifier	next
>17044	Identifier	f
>17045	Identifier	f
>17046	Condition	 
>17047	Identifier	f
>17048	ForInit	 
>17049	AssignmentExpr	f = b -> brush_faces
>17050	PtrMemberAccess	b -> brush_faces
>17051	Identifier	brush_faces
>17052	Identifier	b
>17053	Identifier	f
>17054	IdentifierDeclStatement	 
>17055	IdentifierDecl	p2
>17056	Identifier	p2
>17057	IdentifierDeclType	vec3_t
>17058	IdentifierDecl	p1
>17059	Identifier	p1
>17060	IdentifierDeclType	vec3_t
>17061	IdentifierDeclStatement	 
>17062	IdentifierDecl	* f2
>17063	Identifier	f2
>17064	IdentifierDeclType	face_t *
>17065	IdentifierDecl	* f
>17066	Identifier	f
>17067	IdentifierDeclType	face_t *
>17087	FunctionDef	Brush_BuildWindings (brush_t * b , bool bSnap)
>17088	ParameterList	brush_t * b , bool bSnap
>17089	Parameter	 
>17090	Identifier	bSnap
>17091	ParameterType	bool
>17092	Parameter	 
>17093	Identifier	b
>17094	ParameterType	brush_t *
>17095	ReturnType	void
>17096	CompoundStatement	 
>17097	ForStatement	for ( ; face ; face = face -> next )
>17098	CompoundStatement	 
>17099	IfStatement	if ( g_qeglobals . m_bBrushPrimitMode )
>17100	ElseStatement	else
>17101	CompoundStatement	 
>17102	ForStatement	for ( i = 0 ; i < w -> numpoints ; i ++ )
>17103	ExpressionStatement	 
>17104	CallExpression	EmitTextureCoordinates ( w -> points [ i ] , face -> d_texture , face )
>17105	ArgumentList	w -> points [ i ]
>17106	Argument	face
>17107	Identifier	face
>17108	Argument	face -> d_texture
>17109	PtrMemberAccess	face -> d_texture
>17110	Identifier	d_texture
>17111	Identifier	face
>17112	Argument	w -> points [ i ]
>17113	ArrayIndexing	w -> points [ i ]
>17114	Identifier	i
>17115	PtrMemberAccess	w -> points
>17116	Identifier	points
>17117	Identifier	w
>17118	Callee	EmitTextureCoordinates
>17119	Identifier	EmitTextureCoordinates
>17120	IncDecOp	 
>17121	IncDec	++
>17122	Identifier	i
>17123	Condition	 
>17124	RelationalExpression	i < w -> numpoints
>17125	PtrMemberAccess	w -> numpoints
>17126	Identifier	numpoints
>17127	Identifier	w
>17128	Identifier	i
>17129	ForInit	 
>17130	AssignmentExpr	i = 0
>17131	PrimaryExpression	0
>17132	Identifier	i
>17133	CompoundStatement	 
>17134	ExpressionStatement	 
>17135	CallExpression	EmitBrushPrimitTextureCoordinates ( face , w )
>17136	ArgumentList	face
>17137	Argument	w
>17138	Identifier	w
>17139	Argument	face
>17140	Identifier	face
>17141	Callee	EmitBrushPrimitTextureCoordinates
>17142	Identifier	EmitBrushPrimitTextureCoordinates
>17143	IfStatement	if ( g_qeglobals . bNeedConvert )
>17144	CompoundStatement	 
>17145	ForStatement	for ( i = 0 ; i < w -> numpoints ; i ++ )
>17146	ExpressionStatement	 
>17147	CallExpression	EmitTextureCoordinates ( w -> points [ i ] , face -> d_texture , face )
>17148	ArgumentList	w -> points [ i ]
>17149	Argument	face
>17150	Identifier	face
>17151	Argument	face -> d_texture
>17152	PtrMemberAccess	face -> d_texture
>17153	Identifier	d_texture
>17154	Identifier	face
>17155	Argument	w -> points [ i ]
>17156	ArrayIndexing	w -> points [ i ]
>17157	Identifier	i
>17158	PtrMemberAccess	w -> points
>17159	Identifier	points
>17160	Identifier	w
>17161	Callee	EmitTextureCoordinates
>17162	Identifier	EmitTextureCoordinates
>17163	IncDecOp	 
>17164	IncDec	++
>17165	Identifier	i
>17166	Condition	 
>17167	RelationalExpression	i < w -> numpoints
>17168	PtrMemberAccess	w -> numpoints
>17169	Identifier	numpoints
>17170	Identifier	w
>17171	Identifier	i
>17172	ForInit	 
>17173	AssignmentExpr	i = 0
>17174	PrimaryExpression	0
>17175	Identifier	i
>17176	ExpressionStatement	 
>17177	CallExpression	FaceToBrushPrimitFace ( face )
>17178	ArgumentList	face
>17179	Argument	face
>17180	Identifier	face
>17181	Callee	FaceToBrushPrimitFace
>17182	Identifier	FaceToBrushPrimitFace
>17183	Condition	 
>17184	MemberAccess	g_qeglobals . bNeedConvert
>17185	Identifier	bNeedConvert
>17186	Identifier	g_qeglobals
>17187	Condition	 
>17188	MemberAccess	g_qeglobals . m_bBrushPrimitMode
>17189	Identifier	m_bBrushPrimitMode
>17190	Identifier	g_qeglobals
>17191	IfStatement	if ( fCurveColor <= 0 )
>17192	ExpressionStatement	 
>17193	AssignmentExpr	fCurveColor = 1.0
>17194	PrimaryExpression	1.0
>17195	Identifier	fCurveColor
>17196	Condition	 
>17197	RelationalExpression	fCurveColor <= 0
>17198	PrimaryExpression	0
>17199	Identifier	fCurveColor
>17200	ExpressionStatement	 
>17201	AssignmentExpr	fCurveColor -= .10
>17202	PrimaryExpression	.10
>17203	Identifier	fCurveColor
>17204	ExpressionStatement	 
>17205	CallExpression	Face_SetColor ( b , face , fCurveColor )
>17206	ArgumentList	b
>17207	Argument	fCurveColor
>17208	Identifier	fCurveColor
>17209	Argument	face
>17210	Identifier	face
>17211	Argument	b
>17212	Identifier	b
>17213	Callee	Face_SetColor
>17214	Identifier	Face_SetColor
>17215	ForStatement	for ( i = 0 ; i < w -> numpoints ; i ++ )
>17216	CompoundStatement	 
>17217	ForStatement	for ( j = 0 ; j < 3 ; j ++ )
>17218	CompoundStatement	 
>17219	IfStatement	if ( v < b -> mins [ j ] )
>17220	ExpressionStatement	 
>17221	AssignmentExpr	b -> mins [ j ] = v
>17222	Identifier	v
>17223	ArrayIndexing	b -> mins [ j ]
>17224	Identifier	j
>17225	PtrMemberAccess	b -> mins
>17226	Identifier	mins
>17227	Identifier	b
>17228	Condition	 
>17229	RelationalExpression	v < b -> mins [ j ]
>17230	ArrayIndexing	b -> mins [ j ]
>17231	Identifier	j
>17232	PtrMemberAccess	b -> mins
>17233	Identifier	mins
>17234	Identifier	b
>17235	Identifier	v
>17236	IfStatement	if ( v > b -> maxs [ j ] )
>17237	ExpressionStatement	 
>17238	AssignmentExpr	b -> maxs [ j ] = v
>17239	Identifier	v
>17240	ArrayIndexing	b -> maxs [ j ]
>17241	Identifier	j
>17242	PtrMemberAccess	b -> maxs
>17243	Identifier	maxs
>17244	Identifier	b
>17245	Condition	 
>17246	RelationalExpression	v > b -> maxs [ j ]
>17247	ArrayIndexing	b -> maxs [ j ]
>17248	Identifier	j
>17249	PtrMemberAccess	b -> maxs
>17250	Identifier	maxs
>17251	Identifier	b
>17252	Identifier	v
>17253	ExpressionStatement	 
>17254	AssignmentExpr	v = w -> points [ i ] [ j ]
>17255	ArrayIndexing	w -> points [ i ] [ j ]
>17256	Identifier	j
>17257	ArrayIndexing	w -> points [ i ]
>17258	Identifier	i
>17259	PtrMemberAccess	w -> points
>17260	Identifier	points
>17261	Identifier	w
>17262	Identifier	v
>17263	IncDecOp	 
>17264	IncDec	++
>17265	Identifier	j
>17266	Condition	 
>17267	RelationalExpression	j < 3
>17268	PrimaryExpression	3
>17269	Identifier	j
>17270	ForInit	 
>17271	AssignmentExpr	j = 0
>17272	PrimaryExpression	0
>17273	Identifier	j
>17274	IncDecOp	 
>17275	IncDec	++
>17276	Identifier	i
>17277	Condition	 
>17278	RelationalExpression	i < w -> numpoints
>17279	PtrMemberAccess	w -> numpoints
>17280	Identifier	numpoints
>17281	Identifier	w
>17282	Identifier	i
>17283	ForInit	 
>17284	AssignmentExpr	i = 0
>17285	PrimaryExpression	0
>17286	Identifier	i
>17287	IfStatement	if ( ! w )
>17288	ContinueStatement	 
>17289	Condition	 
>17290	UnaryOp	! w
>17291	Identifier	w
>17292	UnaryOperator	!
>17293	ExpressionStatement	 
>17294	AssignmentExpr	face -> d_texture = Texture_ForName ( face -> texdef . name )
>17295	CallExpression	Texture_ForName ( face -> texdef . name )
>17296	ArgumentList	face -> texdef . name
>17297	Argument	face -> texdef . name
>17298	MemberAccess	face -> texdef . name
>17299	Identifier	name
>17300	PtrMemberAccess	face -> texdef
>17301	Identifier	texdef
>17302	Identifier	face
>17303	Callee	Texture_ForName
>17304	Identifier	Texture_ForName
>17305	PtrMemberAccess	face -> d_texture
>17306	Identifier	d_texture
>17307	Identifier	face
>17308	ExpressionStatement	 
>17309	AssignmentExpr	w = face -> face_winding = Brush_MakeFaceWinding ( b , face )
>17310	AssignmentExpr	face -> face_winding = Brush_MakeFaceWinding ( b , face )
>17311	CallExpression	Brush_MakeFaceWinding ( b , face )
>17312	ArgumentList	b
>17313	Argument	face
>17314	Identifier	face
>17315	Argument	b
>17316	Identifier	b
>17317	Callee	Brush_MakeFaceWinding
>17318	Identifier	Brush_MakeFaceWinding
>17319	PtrMemberAccess	face -> face_winding
>17320	Identifier	face_winding
>17321	Identifier	face
>17322	Identifier	w
>17323	ExpressionStatement	 
>17324	CallExpression	free ( face -> face_winding )
>17325	ArgumentList	face -> face_winding
>17326	Argument	face -> face_winding
>17327	PtrMemberAccess	face -> face_winding
>17328	Identifier	face_winding
>17329	Identifier	face
>17330	Callee	free
>17331	Identifier	free
>17332	IdentifierDeclStatement	 
>17333	IdentifierDecl	j
>17334	Identifier	j
>17335	IdentifierDeclType	int
>17336	IdentifierDecl	i
>17337	Identifier	i
>17338	IdentifierDeclType	int
>17339	AssignmentExpr	 
>17340	PtrMemberAccess	face -> next
>17341	Identifier	next
>17342	Identifier	face
>17343	Identifier	face
>17344	Condition	 
>17345	Identifier	face
>17346	IdentifierDeclStatement	 
>17347	IdentifierDecl	fCurveColor = 1.0
>17348	AssignmentExpr	fCurveColor = 1.0
>17349	PrimaryExpression	1.0
>17350	Identifier	fCurveColor
>17351	Identifier	fCurveColor
>17352	IdentifierDeclType	float
>17353	ExpressionStatement	 
>17354	AssignmentExpr	face = b -> brush_faces
>17355	PtrMemberAccess	b -> brush_faces
>17356	Identifier	brush_faces
>17357	Identifier	b
>17358	Identifier	face
>17359	ExpressionStatement	 
>17360	CallExpression	Brush_MakeFacePlanes ( b )
>17361	ArgumentList	b
>17362	Argument	b
>17363	Identifier	b
>17364	Callee	Brush_MakeFacePlanes
>17365	Identifier	Brush_MakeFacePlanes
>17366	ExpressionStatement	 
>17367	AssignmentExpr	b -> maxs [ 0 ] = b -> maxs [ 1 ] = b -> maxs [ 2 ] = - 99999
>17368	AssignmentExpr	b -> maxs [ 1 ] = b -> maxs [ 2 ] = - 99999
>17369	AssignmentExpr	b -> maxs [ 2 ] = - 99999
>17370	UnaryOp	- 99999
>17371	PrimaryExpression	99999
>17372	UnaryOperator	-
>17373	ArrayIndexing	b -> maxs [ 2 ]
>17374	PrimaryExpression	2
>17375	PtrMemberAccess	b -> maxs
>17376	Identifier	maxs
>17377	Identifier	b
>17378	ArrayIndexing	b -> maxs [ 1 ]
>17379	PrimaryExpression	1
>17380	PtrMemberAccess	b -> maxs
>17381	Identifier	maxs
>17382	Identifier	b
>17383	ArrayIndexing	b -> maxs [ 0 ]
>17384	PrimaryExpression	0
>17385	PtrMemberAccess	b -> maxs
>17386	Identifier	maxs
>17387	Identifier	b
>17388	ExpressionStatement	 
>17389	AssignmentExpr	b -> mins [ 0 ] = b -> mins [ 1 ] = b -> mins [ 2 ] = 99999
>17390	AssignmentExpr	b -> mins [ 1 ] = b -> mins [ 2 ] = 99999
>17391	AssignmentExpr	b -> mins [ 2 ] = 99999
>17392	PrimaryExpression	99999
>17393	ArrayIndexing	b -> mins [ 2 ]
>17394	PrimaryExpression	2
>17395	PtrMemberAccess	b -> mins
>17396	Identifier	mins
>17397	Identifier	b
>17398	ArrayIndexing	b -> mins [ 1 ]
>17399	PrimaryExpression	1
>17400	PtrMemberAccess	b -> mins
>17401	Identifier	mins
>17402	Identifier	b
>17403	ArrayIndexing	b -> mins [ 0 ]
>17404	PrimaryExpression	0
>17405	PtrMemberAccess	b -> mins
>17406	Identifier	mins
>17407	Identifier	b
>17408	IfStatement	if ( bSnap )
>17409	ExpressionStatement	 
>17410	CallExpression	Brush_SnapPlanepts ( b )
>17411	ArgumentList	b
>17412	Argument	b
>17413	Identifier	b
>17414	Callee	Brush_SnapPlanepts
>17415	Identifier	Brush_SnapPlanepts
>17416	Condition	 
>17417	Identifier	bSnap
>17418	IdentifierDeclStatement	 
>17419	IdentifierDecl	v
>17420	Identifier	v
>17421	IdentifierDeclType	vec_t
>17422	IdentifierDeclStatement	 
>17423	IdentifierDecl	* face
>17424	Identifier	face
>17425	IdentifierDeclType	face_t *
>17426	IdentifierDeclStatement	 
>17427	IdentifierDecl	* w
>17428	Identifier	w
>17429	IdentifierDeclType	winding_t *
>17469	FunctionDef	Brush_RemoveEmptyFaces (brush_t * b)
>17470	ParameterList	brush_t * b
>17471	Parameter	 
>17472	Identifier	b
>17473	ParameterType	brush_t *
>17474	ReturnType	void
>17475	CompoundStatement	 
>17476	ForStatement	for ( ; f ; f = next )
>17477	CompoundStatement	 
>17478	IfStatement	if ( ! f -> face_winding )
>17479	ElseStatement	else
>17480	CompoundStatement	 
>17481	ExpressionStatement	 
>17482	AssignmentExpr	b -> brush_faces = f
>17483	Identifier	f
>17484	PtrMemberAccess	b -> brush_faces
>17485	Identifier	brush_faces
>17486	Identifier	b
>17487	ExpressionStatement	 
>17488	AssignmentExpr	f -> next = b -> brush_faces
>17489	PtrMemberAccess	b -> brush_faces
>17490	Identifier	brush_faces
>17491	Identifier	b
>17492	PtrMemberAccess	f -> next
>17493	Identifier	next
>17494	Identifier	f
>17495	ExpressionStatement	 
>17496	CallExpression	Face_Free ( f )
>17497	ArgumentList	f
>17498	Argument	f
>17499	Identifier	f
>17500	Callee	Face_Free
>17501	Identifier	Face_Free
>17502	Condition	 
>17503	UnaryOp	! f -> face_winding
>17504	PtrMemberAccess	f -> face_winding
>17505	Identifier	face_winding
>17506	Identifier	f
>17507	UnaryOperator	!
>17508	ExpressionStatement	 
>17509	AssignmentExpr	next = f -> next
>17510	PtrMemberAccess	f -> next
>17511	Identifier	next
>17512	Identifier	f
>17513	Identifier	next
>17514	AssignmentExpr	 
>17515	Identifier	next
>17516	Identifier	f
>17517	Condition	 
>17518	Identifier	f
>17519	ExpressionStatement	 
>17520	AssignmentExpr	b -> brush_faces = NULL
>17521	Identifier	NULL
>17522	PtrMemberAccess	b -> brush_faces
>17523	Identifier	brush_faces
>17524	Identifier	b
>17525	ExpressionStatement	 
>17526	AssignmentExpr	f = b -> brush_faces
>17527	PtrMemberAccess	b -> brush_faces
>17528	Identifier	brush_faces
>17529	Identifier	b
>17530	Identifier	f
>17531	IdentifierDeclStatement	 
>17532	IdentifierDecl	* next
>17533	Identifier	next
>17534	IdentifierDeclType	face_t *
>17535	IdentifierDecl	* f
>17536	Identifier	f
>17537	IdentifierDeclType	face_t *
>17550	FunctionDef	Brush_SnapToGrid (brush_t * pb)
>17551	ParameterList	brush_t * pb
>17552	Parameter	 
>17553	Identifier	pb
>17554	ParameterType	brush_t *
>17555	ReturnType	void
>17556	CompoundStatement	 
>17557	ExpressionStatement	 
>17558	CallExpression	Brush_Build ( pb )
>17559	ArgumentList	pb
>17560	Argument	pb
>17561	Identifier	pb
>17562	Callee	Brush_Build
>17563	Identifier	Brush_Build
>17564	ForStatement	for ( face_t * f = pb -> brush_faces ; f ; f = f -> next )
>17565	CompoundStatement	 
>17566	ForStatement	for ( int i = 0 ; i < 3 ; i ++ )
>17567	CompoundStatement	 
>17568	ForStatement	for ( int j = 0 ; j < 3 ; j ++ )
>17569	CompoundStatement	 
>17570	ExpressionStatement	 
>17571	AssignmentExpr	f -> planepts [ i ] [ j ] = floor ( f -> planepts [ i ] [ j ] / g_qeglobals . d_gridsize + 0.5 ) * g_\
>17572	MultiplicativeExpression	floor ( f -> planepts [ i ] [ j ] / g_qeglobals . d_gridsize + 0.5 ) * g_qeglobals . d_gridsize
>17573	MemberAccess	g_qeglobals . d_gridsize
>17574	Identifier	d_gridsize
>17575	Identifier	g_qeglobals
>17576	CallExpression	floor ( f -> planepts [ i ] [ j ] / g_qeglobals . d_gridsize + 0.5 )
>17577	ArgumentList	f -> planepts [ i ] [ j ] / g_qeglobals . d_gridsize + 0.5
>17578	Argument	f -> planepts [ i ] [ j ] / g_qeglobals . d_gridsize + 0.5
>17579	AdditiveExpression	f -> planepts [ i ] [ j ] / g_qeglobals . d_gridsize + 0.5
>17580	PrimaryExpression	0.5
>17581	MultiplicativeExpression	f -> planepts [ i ] [ j ] / g_qeglobals . d_gridsize
>17582	MemberAccess	g_qeglobals . d_gridsize
>17583	Identifier	d_gridsize
>17584	Identifier	g_qeglobals
>17585	ArrayIndexing	f -> planepts [ i ] [ j ]
>17586	Identifier	j
>17587	ArrayIndexing	f -> planepts [ i ]
>17588	Identifier	i
>17589	PtrMemberAccess	f -> planepts
>17590	Identifier	planepts
>17591	Identifier	f
>17592	Callee	floor
>17593	Identifier	floor
>17594	ArrayIndexing	f -> planepts [ i ] [ j ]
>17595	Identifier	j
>17596	ArrayIndexing	f -> planepts [ i ]
>17597	Identifier	i
>17598	PtrMemberAccess	f -> planepts
>17599	Identifier	planepts
>17600	Identifier	f
>17601	IncDecOp	 
>17602	IncDec	++
>17603	Identifier	j
>17604	Condition	 
>17605	RelationalExpression	j < 3
>17606	PrimaryExpression	3
>17607	Identifier	j
>17608	ForInit	 
>17609	IdentifierDeclStatement	int j = 0 ;
>17610	IdentifierDecl	j = 0
>17611	AssignmentExpr	j = 0
>17612	PrimaryExpression	0
>17613	Identifier	j
>17614	Identifier	j
>17615	IdentifierDeclType	int
>17616	IncDecOp	 
>17617	IncDec	++
>17618	Identifier	i
>17619	Condition	 
>17620	RelationalExpression	i < 3
>17621	PrimaryExpression	3
>17622	Identifier	i
>17623	ForInit	 
>17624	IdentifierDeclStatement	int i = 0 ;
>17625	IdentifierDecl	i = 0
>17626	AssignmentExpr	i = 0
>17627	PrimaryExpression	0
>17628	Identifier	i
>17629	Identifier	i
>17630	IdentifierDeclType	int
>17631	AssignmentExpr	 
>17632	PtrMemberAccess	f -> next
>17633	Identifier	next
>17634	Identifier	f
>17635	Identifier	f
>17636	Condition	 
>17637	Identifier	f
>17638	ForInit	 
>17639	IdentifierDeclStatement	face_t * f = pb -> brush_faces ;
>17640	IdentifierDecl	* f = pb -> brush_faces
>17641	AssignmentExpr	* f = pb -> brush_faces
>17642	PtrMemberAccess	pb -> brush_faces
>17643	Identifier	brush_faces
>17644	Identifier	pb
>17645	Identifier	f
>17646	Identifier	f
>17647	IdentifierDeclType	face_t *
>17670	FunctionDef	Brush_Rotate (brush_t * b , vec3_t vAngle , vec3_t vOrigin , bool bBuild)
>17671	ParameterList	brush_t * b , vec3_t vAngle , vec3_t vOrigin , bool bBuild
>17672	Parameter	 
>17673	Identifier	bBuild
>17674	ParameterType	bool
>17675	Parameter	 
>17676	Identifier	vOrigin
>17677	ParameterType	vec3_t
>17678	Parameter	 
>17679	Identifier	vAngle
>17680	ParameterType	vec3_t
>17681	Parameter	 
>17682	Identifier	b
>17683	ParameterType	brush_t *
>17684	ReturnType	void
>17685	CompoundStatement	 
>17686	IfStatement	if ( bBuild )
>17687	CompoundStatement	 
>17688	ExpressionStatement	 
>17689	CallExpression	Brush_Build ( b , false , false )
>17690	ArgumentList	b
>17691	Argument	false
>17692	Identifier	false
>17693	Argument	false
>17694	Identifier	false
>17695	Argument	b
>17696	Identifier	b
>17697	Callee	Brush_Build
>17698	Identifier	Brush_Build
>17699	Condition	 
>17700	Identifier	bBuild
>17701	ForStatement	for ( face_t * f = b -> brush_faces ; f ; f = f -> next )
>17702	CompoundStatement	 
>17703	ForStatement	for ( int i = 0 ; i < 3 ; i ++ )
>17704	CompoundStatement	 
>17705	ExpressionStatement	 
>17706	CallExpression	VectorRotate ( f -> planepts [ i ] , vAngle , vOrigin , f -> planepts [ i ] )
>17707	ArgumentList	f -> planepts [ i ]
>17708	Argument	f -> planepts [ i ]
>17709	ArrayIndexing	f -> planepts [ i ]
>17710	Identifier	i
>17711	PtrMemberAccess	f -> planepts
>17712	Identifier	planepts
>17713	Identifier	f
>17714	Argument	vOrigin
>17715	Identifier	vOrigin
>17716	Argument	vAngle
>17717	Identifier	vAngle
>17718	Argument	f -> planepts [ i ]
>17719	ArrayIndexing	f -> planepts [ i ]
>17720	Identifier	i
>17721	PtrMemberAccess	f -> planepts
>17722	Identifier	planepts
>17723	Identifier	f
>17724	Callee	VectorRotate
>17725	Identifier	VectorRotate
>17726	IncDecOp	 
>17727	IncDec	++
>17728	Identifier	i
>17729	Condition	 
>17730	RelationalExpression	i < 3
>17731	PrimaryExpression	3
>17732	Identifier	i
>17733	ForInit	 
>17734	IdentifierDeclStatement	int i = 0 ;
>17735	IdentifierDecl	i = 0
>17736	AssignmentExpr	i = 0
>17737	PrimaryExpression	0
>17738	Identifier	i
>17739	Identifier	i
>17740	IdentifierDeclType	int
>17741	AssignmentExpr	 
>17742	PtrMemberAccess	f -> next
>17743	Identifier	next
>17744	Identifier	f
>17745	Identifier	f
>17746	Condition	 
>17747	Identifier	f
>17748	ForInit	 
>17749	IdentifierDeclStatement	face_t * f = b -> brush_faces ;
>17750	IdentifierDecl	* f = b -> brush_faces
>17751	AssignmentExpr	* f = b -> brush_faces
>17752	PtrMemberAccess	b -> brush_faces
>17753	Identifier	brush_faces
>17754	Identifier	b
>17755	Identifier	f
>17756	Identifier	f
>17757	IdentifierDeclType	face_t *
>17776	FunctionDef	Brush_Center (brush_t * b , vec3_t vNewCenter)
>17777	ParameterList	brush_t * b , vec3_t vNewCenter
>17778	Parameter	 
>17779	Identifier	vNewCenter
>17780	ParameterType	vec3_t
>17781	Parameter	 
>17782	Identifier	b
>17783	ParameterType	brush_t *
>17784	ReturnType	void
>17785	CompoundStatement	 
>17786	ExpressionStatement	 
>17787	CallExpression	Brush_Move ( b , vMid , true )
>17788	ArgumentList	b
>17789	Argument	true
>17790	Identifier	true
>17791	Argument	vMid
>17792	Identifier	vMid
>17793	Argument	b
>17794	Identifier	b
>17795	Callee	Brush_Move
>17796	Identifier	Brush_Move
>17797	ExpressionStatement	 
>17798	CallExpression	VectorSubtract ( vNewCenter , vMid , vMid )
>17799	ArgumentList	vNewCenter
>17800	Argument	vMid
>17801	Identifier	vMid
>17802	Argument	vMid
>17803	Identifier	vMid
>17804	Argument	vNewCenter
>17805	Identifier	vNewCenter
>17806	Callee	VectorSubtract
>17807	Identifier	VectorSubtract
>17808	ForStatement	for ( int j = 0 ; j < 3 ; j ++ )
>17809	CompoundStatement	 
>17810	ExpressionStatement	 
>17811	AssignmentExpr	vMid [ j ] = b -> mins [ j ] + abs ( ( b -> maxs [ j ] - b -> mins [ j ] ) * 0.5 )
>17812	AdditiveExpression	b -> mins [ j ] + abs ( ( b -> maxs [ j ] - b -> mins [ j ] ) * 0.5 )
>17813	CallExpression	abs ( ( b -> maxs [ j ] - b -> mins [ j ] ) * 0.5 )
>17814	ArgumentList	( b -> maxs [ j ] - b -> mins [ j ] ) * 0.5
>17815	Argument	( b -> maxs [ j ] - b -> mins [ j ] ) * 0.5
>17816	MultiplicativeExpression	( b -> maxs [ j ] - b -> mins [ j ] ) * 0.5
>17817	PrimaryExpression	0.5
>17818	AdditiveExpression	b -> maxs [ j ] - b -> mins [ j ]
>17819	ArrayIndexing	b -> mins [ j ]
>17820	Identifier	j
>17821	PtrMemberAccess	b -> mins
>17822	Identifier	mins
>17823	Identifier	b
>17824	ArrayIndexing	b -> maxs [ j ]
>17825	Identifier	j
>17826	PtrMemberAccess	b -> maxs
>17827	Identifier	maxs
>17828	Identifier	b
>17829	Callee	abs
>17830	Identifier	abs
>17831	ArrayIndexing	b -> mins [ j ]
>17832	Identifier	j
>17833	PtrMemberAccess	b -> mins
>17834	Identifier	mins
>17835	Identifier	b
>17836	ArrayIndexing	vMid [ j ]
>17837	Identifier	j
>17838	Identifier	vMid
>17839	IncDecOp	 
>17840	IncDec	++
>17841	Identifier	j
>17842	Condition	 
>17843	RelationalExpression	j < 3
>17844	PrimaryExpression	3
>17845	Identifier	j
>17846	ForInit	 
>17847	IdentifierDeclStatement	int j = 0 ;
>17848	IdentifierDecl	j = 0
>17849	AssignmentExpr	j = 0
>17850	PrimaryExpression	0
>17851	Identifier	j
>17852	Identifier	j
>17853	IdentifierDeclType	int
>17854	IdentifierDeclStatement	 
>17855	IdentifierDecl	vMid
>17856	Identifier	vMid
>17857	IdentifierDeclType	vec3_t
>17875	FunctionDef	Brush_Resize (brush_t * b , vec3_t vMin , vec3_t vMax)
>17876	ParameterList	brush_t * b , vec3_t vMin , vec3_t vMax
>17877	Parameter	 
>17878	Identifier	vMax
>17879	ParameterType	vec3_t
>17880	Parameter	 
>17881	Identifier	vMin
>17882	ParameterType	vec3_t
>17883	Parameter	 
>17884	Identifier	b
>17885	ParameterType	brush_t *
>17886	ReturnType	void
>17887	CompoundStatement	 
>17888	ExpressionStatement	 
>17889	CallExpression	Brush_Build ( b , true )
>17890	ArgumentList	b
>17891	Argument	true
>17892	Identifier	true
>17893	Argument	b
>17894	Identifier	b
>17895	Callee	Brush_Build
>17896	Identifier	Brush_Build
>17897	ExpressionStatement	 
>17898	CallExpression	free ( b2 )
>17899	ArgumentList	b2
>17900	Argument	b2
>17901	Identifier	b2
>17902	Callee	free
>17903	Identifier	free
>17904	IfStatement	if ( b2 -> next )
>17905	ExpressionStatement	 
>17906	CallExpression	Brush_RemoveFromList ( b2 )
>17907	ArgumentList	b2
>17908	Argument	b2
>17909	Identifier	b2
>17910	Callee	Brush_RemoveFromList
>17911	Identifier	Brush_RemoveFromList
>17912	Condition	 
>17913	PtrMemberAccess	b2 -> next
>17914	Identifier	next
>17915	Identifier	b2
>17916	ExpressionStatement	 
>17917	AssignmentExpr	b -> brush_faces = b2 -> brush_faces
>17918	PtrMemberAccess	b2 -> brush_faces
>17919	Identifier	brush_faces
>17920	Identifier	b2
>17921	PtrMemberAccess	b -> brush_faces
>17922	Identifier	brush_faces
>17923	Identifier	b
>17924	ForStatement	for ( face_t * f = b -> brush_faces ; f ; f = next )
>17925	CompoundStatement	 
>17926	ExpressionStatement	 
>17927	CallExpression	Face_Free ( f )
>17928	ArgumentList	f
>17929	Argument	f
>17930	Identifier	f
>17931	Callee	Face_Free
>17932	Identifier	Face_Free
>17933	ExpressionStatement	 
>17934	AssignmentExpr	next = f -> next
>17935	PtrMemberAccess	f -> next
>17936	Identifier	next
>17937	Identifier	f
>17938	Identifier	next
>17939	AssignmentExpr	 
>17940	Identifier	next
>17941	Identifier	f
>17942	Condition	 
>17943	Identifier	f
>17944	ForInit	 
>17945	IdentifierDeclStatement	face_t * f = b -> brush_faces ;
>17946	IdentifierDecl	* f = b -> brush_faces
>17947	AssignmentExpr	* f = b -> brush_faces
>17948	PtrMemberAccess	b -> brush_faces
>17949	Identifier	brush_faces
>17950	Identifier	b
>17951	Identifier	f
>17952	Identifier	f
>17953	IdentifierDeclType	face_t *
>17954	IdentifierDeclStatement	 
>17955	IdentifierDecl	* next
>17956	Identifier	next
>17957	IdentifierDeclType	face_t *
>17958	IdentifierDeclStatement	 
>17959	IdentifierDecl	* b2 = Brush_Create ( vMin , vMax , & b -> brush_faces -> texdef )
>17960	AssignmentExpr	* b2 = Brush_Create ( vMin , vMax , & b -> brush_faces -> texdef )
>17961	CallExpression	Brush_Create ( vMin , vMax , & b -> brush_faces -> texdef )
>17962	ArgumentList	vMin
>17963	Argument	& b -> brush_faces -> texdef
>17964	UnaryOp	& b -> brush_faces -> texdef
>17965	PtrMemberAccess	b -> brush_faces -> texdef
>17966	Identifier	texdef
>17967	PtrMemberAccess	b -> brush_faces
>17968	Identifier	brush_faces
>17969	Identifier	b
>17970	UnaryOperator	&
>17971	Argument	vMax
>17972	Identifier	vMax
>17973	Argument	vMin
>17974	Identifier	vMin
>17975	Callee	Brush_Create
>17976	Identifier	Brush_Create
>17977	Identifier	b2
>17978	Identifier	b2
>17979	IdentifierDeclType	brush_t *
>18001	FunctionDef	HasModel (brush_t * b)
>18002	ParameterList	brush_t * b
>18003	Parameter	 
>18004	Identifier	b
>18005	ParameterType	brush_t *
>18006	ReturnType	eclass_t *
>18007	CompoundStatement	 
>18008	ReturnStatement	 
>18009	Identifier	e
>18010	IfStatement	if ( b -> owner -> eclass -> nShowFlags & ECLASS_MISCMODEL )
>18011	CompoundStatement	 
>18012	IfStatement	if ( pModel != NULL && strlen ( pModel ) > 0 )
>18013	CompoundStatement	 
>18014	IfStatement	if ( e != NULL )
>18015	ElseStatement	else
>18016	CompoundStatement	 
>18017	ExpressionStatement	 
>18018	AssignmentExpr	b -> bModelFailed = true
>18019	Identifier	true
>18020	PtrMemberAccess	b -> bModelFailed
>18021	Identifier	bModelFailed
>18022	Identifier	b
>18023	CompoundStatement	 
>18024	ExpressionStatement	 
>18025	AssignmentExpr	b -> bModelFailed = false
>18026	Identifier	false
>18027	PtrMemberAccess	b -> bModelFailed
>18028	Identifier	bModelFailed
>18029	Identifier	b
>18030	ExpressionStatement	 
>18031	CallExpression	Brush_Resize ( b , vMin , vMax )
>18032	ArgumentList	b
>18033	Argument	vMax
>18034	Identifier	vMax
>18035	Argument	vMin
>18036	Identifier	vMin
>18037	Argument	b
>18038	Identifier	b
>18039	Callee	Brush_Resize
>18040	Identifier	Brush_Resize
>18041	ExpressionStatement	 
>18042	CallExpression	VectorAdd ( vMax , b -> owner -> origin , vMax )
>18043	ArgumentList	vMax
>18044	Argument	vMax
>18045	Identifier	vMax
>18046	Argument	b -> owner -> origin
>18047	PtrMemberAccess	b -> owner -> origin
>18048	Identifier	origin
>18049	PtrMemberAccess	b -> owner
>18050	Identifier	owner
>18051	Identifier	b
>18052	Argument	vMax
>18053	Identifier	vMax
>18054	Callee	VectorAdd
>18055	Identifier	VectorAdd
>18056	ExpressionStatement	 
>18057	CallExpression	VectorAdd ( vMin , b -> owner -> origin , vMin )
>18058	ArgumentList	vMin
>18059	Argument	vMin
>18060	Identifier	vMin
>18061	Argument	b -> owner -> origin
>18062	PtrMemberAccess	b -> owner -> origin
>18063	Identifier	origin
>18064	PtrMemberAccess	b -> owner
>18065	Identifier	owner
>18066	Identifier	b
>18067	Argument	vMin
>18068	Identifier	vMin
>18069	Callee	VectorAdd
>18070	Identifier	VectorAdd
>18071	Condition	 
>18072	EqualityExpression	e != NULL
>18073	Identifier	NULL
>18074	Identifier	e
>18075	ExpressionStatement	 
>18076	AssignmentExpr	e = GetCachedModel ( b -> owner , pModel , vMin , vMax )
>18077	CallExpression	GetCachedModel ( b -> owner , pModel , vMin , vMax )
>18078	ArgumentList	b -> owner
>18079	Argument	vMax
>18080	Identifier	vMax
>18081	Argument	vMin
>18082	Identifier	vMin
>18083	Argument	pModel
>18084	Identifier	pModel
>18085	Argument	b -> owner
>18086	PtrMemberAccess	b -> owner
>18087	Identifier	owner
>18088	Identifier	b
>18089	Callee	GetCachedModel
>18090	Identifier	GetCachedModel
>18091	Identifier	e
>18092	Condition	 
>18093	AndExpression	pModel != NULL && strlen ( pModel ) > 0
>18094	RelationalExpression	strlen ( pModel ) > 0
>18095	PrimaryExpression	0
>18096	CallExpression	strlen ( pModel )
>18097	ArgumentList	pModel
>18098	Argument	pModel
>18099	Identifier	pModel
>18100	Callee	strlen
>18101	Identifier	strlen
>18102	EqualityExpression	pModel != NULL
>18103	Identifier	NULL
>18104	Identifier	pModel
>18105	IdentifierDeclStatement	 
>18106	IdentifierDecl	* pModel = ValueForKey ( b -> owner , \"model\" )
>18107	AssignmentExpr	* pModel = ValueForKey ( b -> owner , \"model\" )
>18108	CallExpression	ValueForKey ( b -> owner , \"model\" )
>18109	ArgumentList	b -> owner
>18110	Argument	\"model\"
>18111	PrimaryExpression	\"model\"
>18112	Argument	b -> owner
>18113	PtrMemberAccess	b -> owner
>18114	Identifier	owner
>18115	Identifier	b
>18116	Callee	ValueForKey
>18117	Identifier	ValueForKey
>18118	Identifier	pModel
>18119	Identifier	pModel
>18120	IdentifierDeclType	char *
>18121	Condition	 
>18122	BitAndExpression	b -> owner -> eclass -> nShowFlags & ECLASS_MISCMODEL
>18123	Identifier	ECLASS_MISCMODEL
>18124	PtrMemberAccess	b -> owner -> eclass -> nShowFlags
>18125	Identifier	nShowFlags
>18126	PtrMemberAccess	b -> owner -> eclass
>18127	Identifier	eclass
>18128	PtrMemberAccess	b -> owner
>18129	Identifier	owner
>18130	Identifier	b
>18131	IdentifierDeclStatement	 
>18132	IdentifierDecl	* e = NULL
>18133	AssignmentExpr	* e = NULL
>18134	Identifier	NULL
>18135	Identifier	NULL
>18136	Identifier	e
>18137	IdentifierDeclType	eclass_t *
>18138	IfStatement	if ( Eclass_hasModel ( b -> owner -> eclass , vMin , vMax ) )
>18139	CompoundStatement	 
>18140	ReturnStatement	 
>18141	PtrMemberAccess	b -> owner -> eclass
>18142	Identifier	eclass
>18143	PtrMemberAccess	b -> owner
>18144	Identifier	owner
>18145	Identifier	b
>18146	Condition	 
>18147	CallExpression	Eclass_hasModel ( b -> owner -> eclass , vMin , vMax )
>18148	ArgumentList	b -> owner -> eclass
>18149	Argument	vMax
>18150	Identifier	vMax
>18151	Argument	vMin
>18152	Identifier	vMin
>18153	Argument	b -> owner -> eclass
>18154	PtrMemberAccess	b -> owner -> eclass
>18155	Identifier	eclass
>18156	PtrMemberAccess	b -> owner
>18157	Identifier	owner
>18158	Identifier	b
>18159	Callee	Eclass_hasModel
>18160	Identifier	Eclass_hasModel
>18161	IfStatement	if ( b -> owner -> md3Class != NULL )
>18162	CompoundStatement	 
>18163	ReturnStatement	 
>18164	PtrMemberAccess	b -> owner -> md3Class
>18165	Identifier	md3Class
>18166	PtrMemberAccess	b -> owner
>18167	Identifier	owner
>18168	Identifier	b
>18169	Condition	 
>18170	EqualityExpression	b -> owner -> md3Class != NULL
>18171	Identifier	NULL
>18172	PtrMemberAccess	b -> owner -> md3Class
>18173	Identifier	md3Class
>18174	PtrMemberAccess	b -> owner
>18175	Identifier	owner
>18176	Identifier	b
>18177	ExpressionStatement	 
>18178	AssignmentExpr	vMax [ 0 ] = vMax [ 1 ] = vMax [ 2 ] = - 9999
>18179	AssignmentExpr	vMax [ 1 ] = vMax [ 2 ] = - 9999
>18180	AssignmentExpr	vMax [ 2 ] = - 9999
>18181	UnaryOp	- 9999
>18182	PrimaryExpression	9999
>18183	UnaryOperator	-
>18184	ArrayIndexing	vMax [ 2 ]
>18185	PrimaryExpression	2
>18186	Identifier	vMax
>18187	ArrayIndexing	vMax [ 1 ]
>18188	PrimaryExpression	1
>18189	Identifier	vMax
>18190	ArrayIndexing	vMax [ 0 ]
>18191	PrimaryExpression	0
>18192	Identifier	vMax
>18193	ExpressionStatement	 
>18194	AssignmentExpr	vMin [ 0 ] = vMin [ 1 ] = vMin [ 2 ] = 9999
>18195	AssignmentExpr	vMin [ 1 ] = vMin [ 2 ] = 9999
>18196	AssignmentExpr	vMin [ 2 ] = 9999
>18197	PrimaryExpression	9999
>18198	ArrayIndexing	vMin [ 2 ]
>18199	PrimaryExpression	2
>18200	Identifier	vMin
>18201	ArrayIndexing	vMin [ 1 ]
>18202	PrimaryExpression	1
>18203	Identifier	vMin
>18204	ArrayIndexing	vMin [ 0 ]
>18205	PrimaryExpression	0
>18206	Identifier	vMin
>18207	IdentifierDeclStatement	 
>18208	IdentifierDecl	vMax
>18209	Identifier	vMax
>18210	IdentifierDeclType	vec3_t
>18211	IdentifierDecl	vMin
>18212	Identifier	vMin
>18213	IdentifierDeclType	vec3_t
>18248	FunctionDef	PaintedModel (brush_t * b , bool bOkToTexture)
>18249	ParameterList	brush_t * b , bool bOkToTexture
>18250	Parameter	 
>18251	Identifier	bOkToTexture
>18252	ParameterType	bool
>18253	Parameter	 
>18254	Identifier	b
>18255	ParameterType	brush_t *
>18256	ReturnType	bool
>18257	CompoundStatement	 
>18258	ReturnStatement	 
>18259	Identifier	bReturn
>18260	ExpressionStatement	 
>18261	AssignmentExpr	g_bInPaintedModel = false
>18262	Identifier	false
>18263	Identifier	g_bInPaintedModel
>18264	IfStatement	if ( pEclass )
>18265	ElseStatement	else
>18266	CompoundStatement	 
>18267	ExpressionStatement	 
>18268	AssignmentExpr	b -> bModelFailed = true
>18269	Identifier	true
>18270	PtrMemberAccess	b -> bModelFailed
>18271	Identifier	bModelFailed
>18272	Identifier	b
>18273	CompoundStatement	 
>18274	ExpressionStatement	 
>18275	AssignmentExpr	bReturn = true
>18276	Identifier	true
>18277	Identifier	bReturn
>18278	ExpressionStatement	 
>18279	CallExpression	qglPopAttrib ( )
>18280	ArgumentList	 
>18281	Callee	qglPopAttrib
>18282	Identifier	qglPopAttrib
>18283	IfStatement	if ( g_PrefsDlg . m_nEntityShowState & ENTITY_BOXED )
>18284	CompoundStatement	 
>18285	ExpressionStatement	 
>18286	CallExpression	qglEnd ( )
>18287	ArgumentList	 
>18288	Callee	qglEnd
>18289	Identifier	qglEnd
>18290	ExpressionStatement	 
>18291	CallExpression	qglVertex3f ( maxs [ 0 ] , maxs [ 1 ] , mins [ 2 ] )
>18292	ArgumentList	maxs [ 0 ]
>18293	Argument	mins [ 2 ]
>18294	ArrayIndexing	mins [ 2 ]
>18295	PrimaryExpression	2
>18296	Identifier	mins
>18297	Argument	maxs [ 1 ]
>18298	ArrayIndexing	maxs [ 1 ]
>18299	PrimaryExpression	1
>18300	Identifier	maxs
>18301	Argument	maxs [ 0 ]
>18302	ArrayIndexing	maxs [ 0 ]
>18303	PrimaryExpression	0
>18304	Identifier	maxs
>18305	Callee	qglVertex3f
>18306	Identifier	qglVertex3f
>18307	ExpressionStatement	 
>18308	CallExpression	qglVertex3f ( maxs [ 0 ] , maxs [ 1 ] , maxs [ 2 ] )
>18309	ArgumentList	maxs [ 0 ]
>18310	Argument	maxs [ 2 ]
>18311	ArrayIndexing	maxs [ 2 ]
>18312	PrimaryExpression	2
>18313	Identifier	maxs
>18314	Argument	maxs [ 1 ]
>18315	ArrayIndexing	maxs [ 1 ]
>18316	PrimaryExpression	1
>18317	Identifier	maxs
>18318	Argument	maxs [ 0 ]
>18319	ArrayIndexing	maxs [ 0 ]
>18320	PrimaryExpression	0
>18321	Identifier	maxs
>18322	Callee	qglVertex3f
>18323	Identifier	qglVertex3f
>18324	ExpressionStatement	 
>18325	CallExpression	qglVertex3f ( maxs [ 0 ] , mins [ 1 ] , maxs [ 2 ] )
>18326	ArgumentList	maxs [ 0 ]
>18327	Argument	maxs [ 2 ]
>18328	ArrayIndexing	maxs [ 2 ]
>18329	PrimaryExpression	2
>18330	Identifier	maxs
>18331	Argument	mins [ 1 ]
>18332	ArrayIndexing	mins [ 1 ]
>18333	PrimaryExpression	1
>18334	Identifier	mins
>18335	Argument	maxs [ 0 ]
>18336	ArrayIndexing	maxs [ 0 ]
>18337	PrimaryExpression	0
>18338	Identifier	maxs
>18339	Callee	qglVertex3f
>18340	Identifier	qglVertex3f
>18341	ExpressionStatement	 
>18342	CallExpression	qglVertex3f ( maxs [ 0 ] , mins [ 1 ] , mins [ 2 ] )
>18343	ArgumentList	maxs [ 0 ]
>18344	Argument	mins [ 2 ]
>18345	ArrayIndexing	mins [ 2 ]
>18346	PrimaryExpression	2
>18347	Identifier	mins
>18348	Argument	mins [ 1 ]
>18349	ArrayIndexing	mins [ 1 ]
>18350	PrimaryExpression	1
>18351	Identifier	mins
>18352	Argument	maxs [ 0 ]
>18353	ArrayIndexing	maxs [ 0 ]
>18354	PrimaryExpression	0
>18355	Identifier	maxs
>18356	Callee	qglVertex3f
>18357	Identifier	qglVertex3f
>18358	ExpressionStatement	 
>18359	CallExpression	qglVertex3f ( mins [ 0 ] , maxs [ 1 ] , mins [ 2 ] )
>18360	ArgumentList	mins [ 0 ]
>18361	Argument	mins [ 2 ]
>18362	ArrayIndexing	mins [ 2 ]
>18363	PrimaryExpression	2
>18364	Identifier	mins
>18365	Argument	maxs [ 1 ]
>18366	ArrayIndexing	maxs [ 1 ]
>18367	PrimaryExpression	1
>18368	Identifier	maxs
>18369	Argument	mins [ 0 ]
>18370	ArrayIndexing	mins [ 0 ]
>18371	PrimaryExpression	0
>18372	Identifier	mins
>18373	Callee	qglVertex3f
>18374	Identifier	qglVertex3f
>18375	ExpressionStatement	 
>18376	CallExpression	qglVertex3f ( mins [ 0 ] , maxs [ 1 ] , maxs [ 2 ] )
>18377	ArgumentList	mins [ 0 ]
>18378	Argument	maxs [ 2 ]
>18379	ArrayIndexing	maxs [ 2 ]
>18380	PrimaryExpression	2
>18381	Identifier	maxs
>18382	Argument	maxs [ 1 ]
>18383	ArrayIndexing	maxs [ 1 ]
>18384	PrimaryExpression	1
>18385	Identifier	maxs
>18386	Argument	mins [ 0 ]
>18387	ArrayIndexing	mins [ 0 ]
>18388	PrimaryExpression	0
>18389	Identifier	mins
>18390	Callee	qglVertex3f
>18391	Identifier	qglVertex3f
>18392	ExpressionStatement	 
>18393	CallExpression	qglVertex3f ( mins [ 0 ] , mins [ 1 ] , maxs [ 2 ] )
>18394	ArgumentList	mins [ 0 ]
>18395	Argument	maxs [ 2 ]
>18396	ArrayIndexing	maxs [ 2 ]
>18397	PrimaryExpression	2
>18398	Identifier	maxs
>18399	Argument	mins [ 1 ]
>18400	ArrayIndexing	mins [ 1 ]
>18401	PrimaryExpression	1
>18402	Identifier	mins
>18403	Argument	mins [ 0 ]
>18404	ArrayIndexing	mins [ 0 ]
>18405	PrimaryExpression	0
>18406	Identifier	mins
>18407	Callee	qglVertex3f
>18408	Identifier	qglVertex3f
>18409	ExpressionStatement	 
>18410	CallExpression	qglVertex3f ( mins [ 0 ] , mins [ 1 ] , mins [ 2 ] )
>18411	ArgumentList	mins [ 0 ]
>18412	Argument	mins [ 2 ]
>18413	ArrayIndexing	mins [ 2 ]
>18414	PrimaryExpression	2
>18415	Identifier	mins
>18416	Argument	mins [ 1 ]
>18417	ArrayIndexing	mins [ 1 ]
>18418	PrimaryExpression	1
>18419	Identifier	mins
>18420	Argument	mins [ 0 ]
>18421	ArrayIndexing	mins [ 0 ]
>18422	PrimaryExpression	0
>18423	Identifier	mins
>18424	Callee	qglVertex3f
>18425	Identifier	qglVertex3f
>18426	ExpressionStatement	 
>18427	CallExpression	qglBegin ( GL_LINES )
>18428	ArgumentList	GL_LINES
>18429	Argument	GL_LINES
>18430	Identifier	GL_LINES
>18431	Callee	qglBegin
>18432	Identifier	qglBegin
>18433	ExpressionStatement	 
>18434	CallExpression	qglEnd ( )
>18435	ArgumentList	 
>18436	Callee	qglEnd
>18437	Identifier	qglEnd
>18438	ExpressionStatement	 
>18439	CallExpression	qglVertex3f ( mins [ 0 ] , maxs [ 1 ] , maxs [ 2 ] )
>18440	ArgumentList	mins [ 0 ]
>18441	Argument	maxs [ 2 ]
>18442	ArrayIndexing	maxs [ 2 ]
>18443	PrimaryExpression	2
>18444	Identifier	maxs
>18445	Argument	maxs [ 1 ]
>18446	ArrayIndexing	maxs [ 1 ]
>18447	PrimaryExpression	1
>18448	Identifier	maxs
>18449	Argument	mins [ 0 ]
>18450	ArrayIndexing	mins [ 0 ]
>18451	PrimaryExpression	0
>18452	Identifier	mins
>18453	Callee	qglVertex3f
>18454	Identifier	qglVertex3f
>18455	ExpressionStatement	 
>18456	CallExpression	qglVertex3f ( maxs [ 0 ] , maxs [ 1 ] , maxs [ 2 ] )
>18457	ArgumentList	maxs [ 0 ]
>18458	Argument	maxs [ 2 ]
>18459	ArrayIndexing	maxs [ 2 ]
>18460	PrimaryExpression	2
>18461	Identifier	maxs
>18462	Argument	maxs [ 1 ]
>18463	ArrayIndexing	maxs [ 1 ]
>18464	PrimaryExpression	1
>18465	Identifier	maxs
>18466	Argument	maxs [ 0 ]
>18467	ArrayIndexing	maxs [ 0 ]
>18468	PrimaryExpression	0
>18469	Identifier	maxs
>18470	Callee	qglVertex3f
>18471	Identifier	qglVertex3f
>18472	ExpressionStatement	 
>18473	CallExpression	qglVertex3f ( maxs [ 0 ] , mins [ 1 ] , maxs [ 2 ] )
>18474	ArgumentList	maxs [ 0 ]
>18475	Argument	maxs [ 2 ]
>18476	ArrayIndexing	maxs [ 2 ]
>18477	PrimaryExpression	2
>18478	Identifier	maxs
>18479	Argument	mins [ 1 ]
>18480	ArrayIndexing	mins [ 1 ]
>18481	PrimaryExpression	1
>18482	Identifier	mins
>18483	Argument	maxs [ 0 ]
>18484	ArrayIndexing	maxs [ 0 ]
>18485	PrimaryExpression	0
>18486	Identifier	maxs
>18487	Callee	qglVertex3f
>18488	Identifier	qglVertex3f
>18489	ExpressionStatement	 
>18490	CallExpression	qglVertex3f ( mins [ 0 ] , mins [ 1 ] , maxs [ 2 ] )
>18491	ArgumentList	mins [ 0 ]
>18492	Argument	maxs [ 2 ]
>18493	ArrayIndexing	maxs [ 2 ]
>18494	PrimaryExpression	2
>18495	Identifier	maxs
>18496	Argument	mins [ 1 ]
>18497	ArrayIndexing	mins [ 1 ]
>18498	PrimaryExpression	1
>18499	Identifier	mins
>18500	Argument	mins [ 0 ]
>18501	ArrayIndexing	mins [ 0 ]
>18502	PrimaryExpression	0
>18503	Identifier	mins
>18504	Callee	qglVertex3f
>18505	Identifier	qglVertex3f
>18506	ExpressionStatement	 
>18507	CallExpression	qglBegin ( GL_LINE_LOOP )
>18508	ArgumentList	GL_LINE_LOOP
>18509	Argument	GL_LINE_LOOP
>18510	Identifier	GL_LINE_LOOP
>18511	Callee	qglBegin
>18512	Identifier	qglBegin
>18513	ExpressionStatement	 
>18514	CallExpression	qglEnd ( )
>18515	ArgumentList	 
>18516	Callee	qglEnd
>18517	Identifier	qglEnd
>18518	ExpressionStatement	 
>18519	CallExpression	qglVertex3f ( mins [ 0 ] , maxs [ 1 ] , mins [ 2 ] )
>18520	ArgumentList	mins [ 0 ]
>18521	Argument	mins [ 2 ]
>18522	ArrayIndexing	mins [ 2 ]
>18523	PrimaryExpression	2
>18524	Identifier	mins
>18525	Argument	maxs [ 1 ]
>18526	ArrayIndexing	maxs [ 1 ]
>18527	PrimaryExpression	1
>18528	Identifier	maxs
>18529	Argument	mins [ 0 ]
>18530	ArrayIndexing	mins [ 0 ]
>18531	PrimaryExpression	0
>18532	Identifier	mins
>18533	Callee	qglVertex3f
>18534	Identifier	qglVertex3f
>18535	ExpressionStatement	 
>18536	CallExpression	qglVertex3f ( maxs [ 0 ] , maxs [ 1 ] , mins [ 2 ] )
>18537	ArgumentList	maxs [ 0 ]
>18538	Argument	mins [ 2 ]
>18539	ArrayIndexing	mins [ 2 ]
>18540	PrimaryExpression	2
>18541	Identifier	mins
>18542	Argument	maxs [ 1 ]
>18543	ArrayIndexing	maxs [ 1 ]
>18544	PrimaryExpression	1
>18545	Identifier	maxs
>18546	Argument	maxs [ 0 ]
>18547	ArrayIndexing	maxs [ 0 ]
>18548	PrimaryExpression	0
>18549	Identifier	maxs
>18550	Callee	qglVertex3f
>18551	Identifier	qglVertex3f
>18552	ExpressionStatement	 
>18553	CallExpression	qglVertex3f ( maxs [ 0 ] , mins [ 1 ] , mins [ 2 ] )
>18554	ArgumentList	maxs [ 0 ]
>18555	Argument	mins [ 2 ]
>18556	ArrayIndexing	mins [ 2 ]
>18557	PrimaryExpression	2
>18558	Identifier	mins
>18559	Argument	mins [ 1 ]
>18560	ArrayIndexing	mins [ 1 ]
>18561	PrimaryExpression	1
>18562	Identifier	mins
>18563	Argument	maxs [ 0 ]
>18564	ArrayIndexing	maxs [ 0 ]
>18565	PrimaryExpression	0
>18566	Identifier	maxs
>18567	Callee	qglVertex3f
>18568	Identifier	qglVertex3f
>18569	ExpressionStatement	 
>18570	CallExpression	qglVertex3f ( mins [ 0 ] , mins [ 1 ] , mins [ 2 ] )
>18571	ArgumentList	mins [ 0 ]
>18572	Argument	mins [ 2 ]
>18573	ArrayIndexing	mins [ 2 ]
>18574	PrimaryExpression	2
>18575	Identifier	mins
>18576	Argument	mins [ 1 ]
>18577	ArrayIndexing	mins [ 1 ]
>18578	PrimaryExpression	1
>18579	Identifier	mins
>18580	Argument	mins [ 0 ]
>18581	ArrayIndexing	mins [ 0 ]
>18582	PrimaryExpression	0
>18583	Identifier	mins
>18584	Callee	qglVertex3f
>18585	Identifier	qglVertex3f
>18586	ExpressionStatement	 
>18587	CallExpression	qglBegin ( GL_LINE_LOOP )
>18588	ArgumentList	GL_LINE_LOOP
>18589	Argument	GL_LINE_LOOP
>18590	Identifier	GL_LINE_LOOP
>18591	Callee	qglBegin
>18592	Identifier	qglBegin
>18593	ExpressionStatement	 
>18594	CallExpression	VectorCopy ( b -> maxs , maxs )
>18595	ArgumentList	b -> maxs
>18596	Argument	maxs
>18597	Identifier	maxs
>18598	Argument	b -> maxs
>18599	PtrMemberAccess	b -> maxs
>18600	Identifier	maxs
>18601	Identifier	b
>18602	Callee	VectorCopy
>18603	Identifier	VectorCopy
>18604	ExpressionStatement	 
>18605	CallExpression	VectorCopy ( b -> mins , mins )
>18606	ArgumentList	b -> mins
>18607	Argument	mins
>18608	Identifier	mins
>18609	Argument	b -> mins
>18610	PtrMemberAccess	b -> mins
>18611	Identifier	mins
>18612	Identifier	b
>18613	Callee	VectorCopy
>18614	Identifier	VectorCopy
>18615	IdentifierDeclStatement	 
>18616	IdentifierDecl	maxs
>18617	Identifier	maxs
>18618	IdentifierDeclType	vec3_t
>18619	IdentifierDecl	mins
>18620	Identifier	mins
>18621	IdentifierDeclType	vec3_t
>18622	ExpressionStatement	 
>18623	CallExpression	qglColor3fv ( pEclass -> color )
>18624	ArgumentList	pEclass -> color
>18625	Argument	pEclass -> color
>18626	PtrMemberAccess	pEclass -> color
>18627	Identifier	color
>18628	Identifier	pEclass
>18629	Callee	qglColor3fv
>18630	Identifier	qglColor3fv
>18631	Condition	 
>18632	BitAndExpression	g_PrefsDlg . m_nEntityShowState & ENTITY_BOXED
>18633	Identifier	ENTITY_BOXED
>18634	MemberAccess	g_PrefsDlg . m_nEntityShowState
>18635	Identifier	m_nEntityShowState
>18636	Identifier	g_PrefsDlg
>18637	ExpressionStatement	 
>18638	CallExpression	qglEnd ( )
>18639	ArgumentList	 
>18640	Callee	qglEnd
>18641	Identifier	qglEnd
>18642	ExpressionStatement	 
>18643	CallExpression	qglVertex3f ( vMax [ 0 ] , vMax [ 1 ] , vMin [ 2 ] )
>18644	ArgumentList	vMax [ 0 ]
>18645	Argument	vMin [ 2 ]
>18646	ArrayIndexing	vMin [ 2 ]
>18647	PrimaryExpression	2
>18648	Identifier	vMin
>18649	Argument	vMax [ 1 ]
>18650	ArrayIndexing	vMax [ 1 ]
>18651	PrimaryExpression	1
>18652	Identifier	vMax
>18653	Argument	vMax [ 0 ]
>18654	ArrayIndexing	vMax [ 0 ]
>18655	PrimaryExpression	0
>18656	Identifier	vMax
>18657	Callee	qglVertex3f
>18658	Identifier	qglVertex3f
>18659	ExpressionStatement	 
>18660	CallExpression	qglVertex3f ( vMax [ 0 ] , vMax [ 1 ] , vMax [ 2 ] )
>18661	ArgumentList	vMax [ 0 ]
>18662	Argument	vMax [ 2 ]
>18663	ArrayIndexing	vMax [ 2 ]
>18664	PrimaryExpression	2
>18665	Identifier	vMax
>18666	Argument	vMax [ 1 ]
>18667	ArrayIndexing	vMax [ 1 ]
>18668	PrimaryExpression	1
>18669	Identifier	vMax
>18670	Argument	vMax [ 0 ]
>18671	ArrayIndexing	vMax [ 0 ]
>18672	PrimaryExpression	0
>18673	Identifier	vMax
>18674	Callee	qglVertex3f
>18675	Identifier	qglVertex3f
>18676	ExpressionStatement	 
>18677	CallExpression	qglVertex3f ( vMax [ 0 ] , vMin [ 1 ] , vMax [ 2 ] )
>18678	ArgumentList	vMax [ 0 ]
>18679	Argument	vMax [ 2 ]
>18680	ArrayIndexing	vMax [ 2 ]
>18681	PrimaryExpression	2
>18682	Identifier	vMax
>18683	Argument	vMin [ 1 ]
>18684	ArrayIndexing	vMin [ 1 ]
>18685	PrimaryExpression	1
>18686	Identifier	vMin
>18687	Argument	vMax [ 0 ]
>18688	ArrayIndexing	vMax [ 0 ]
>18689	PrimaryExpression	0
>18690	Identifier	vMax
>18691	Callee	qglVertex3f
>18692	Identifier	qglVertex3f
>18693	ExpressionStatement	 
>18694	CallExpression	qglVertex3f ( vMax [ 0 ] , vMin [ 1 ] , vMin [ 2 ] )
>18695	ArgumentList	vMax [ 0 ]
>18696	Argument	vMin [ 2 ]
>18697	ArrayIndexing	vMin [ 2 ]
>18698	PrimaryExpression	2
>18699	Identifier	vMin
>18700	Argument	vMin [ 1 ]
>18701	ArrayIndexing	vMin [ 1 ]
>18702	PrimaryExpression	1
>18703	Identifier	vMin
>18704	Argument	vMax [ 0 ]
>18705	ArrayIndexing	vMax [ 0 ]
>18706	PrimaryExpression	0
>18707	Identifier	vMax
>18708	Callee	qglVertex3f
>18709	Identifier	qglVertex3f
>18710	ExpressionStatement	 
>18711	CallExpression	qglVertex3f ( vMin [ 0 ] , vMax [ 1 ] , vMin [ 2 ] )
>18712	ArgumentList	vMin [ 0 ]
>18713	Argument	vMin [ 2 ]
>18714	ArrayIndexing	vMin [ 2 ]
>18715	PrimaryExpression	2
>18716	Identifier	vMin
>18717	Argument	vMax [ 1 ]
>18718	ArrayIndexing	vMax [ 1 ]
>18719	PrimaryExpression	1
>18720	Identifier	vMax
>18721	Argument	vMin [ 0 ]
>18722	ArrayIndexing	vMin [ 0 ]
>18723	PrimaryExpression	0
>18724	Identifier	vMin
>18725	Callee	qglVertex3f
>18726	Identifier	qglVertex3f
>18727	ExpressionStatement	 
>18728	CallExpression	qglVertex3f ( vMin [ 0 ] , vMax [ 1 ] , vMax [ 2 ] )
>18729	ArgumentList	vMin [ 0 ]
>18730	Argument	vMax [ 2 ]
>18731	ArrayIndexing	vMax [ 2 ]
>18732	PrimaryExpression	2
>18733	Identifier	vMax
>18734	Argument	vMax [ 1 ]
>18735	ArrayIndexing	vMax [ 1 ]
>18736	PrimaryExpression	1
>18737	Identifier	vMax
>18738	Argument	vMin [ 0 ]
>18739	ArrayIndexing	vMin [ 0 ]
>18740	PrimaryExpression	0
>18741	Identifier	vMin
>18742	Callee	qglVertex3f
>18743	Identifier	qglVertex3f
>18744	ExpressionStatement	 
>18745	CallExpression	qglVertex3f ( vMin [ 0 ] , vMin [ 1 ] , vMax [ 2 ] )
>18746	ArgumentList	vMin [ 0 ]
>18747	Argument	vMax [ 2 ]
>18748	ArrayIndexing	vMax [ 2 ]
>18749	PrimaryExpression	2
>18750	Identifier	vMax
>18751	Argument	vMin [ 1 ]
>18752	ArrayIndexing	vMin [ 1 ]
>18753	PrimaryExpression	1
>18754	Identifier	vMin
>18755	Argument	vMin [ 0 ]
>18756	ArrayIndexing	vMin [ 0 ]
>18757	PrimaryExpression	0
>18758	Identifier	vMin
>18759	Callee	qglVertex3f
>18760	Identifier	qglVertex3f
>18761	ExpressionStatement	 
>18762	CallExpression	qglVertex3f ( vMin [ 0 ] , vMin [ 1 ] , vMin [ 2 ] )
>18763	ArgumentList	vMin [ 0 ]
>18764	Argument	vMin [ 2 ]
>18765	ArrayIndexing	vMin [ 2 ]
>18766	PrimaryExpression	2
>18767	Identifier	vMin
>18768	Argument	vMin [ 1 ]
>18769	ArrayIndexing	vMin [ 1 ]
>18770	PrimaryExpression	1
>18771	Identifier	vMin
>18772	Argument	vMin [ 0 ]
>18773	ArrayIndexing	vMin [ 0 ]
>18774	PrimaryExpression	0
>18775	Identifier	vMin
>18776	Callee	qglVertex3f
>18777	Identifier	qglVertex3f
>18778	ExpressionStatement	 
>18779	CallExpression	qglBegin ( GL_LINES )
>18780	ArgumentList	GL_LINES
>18781	Argument	GL_LINES
>18782	Identifier	GL_LINES
>18783	Callee	qglBegin
>18784	Identifier	qglBegin
>18785	ExpressionStatement	 
>18786	CallExpression	qglEnd ( )
>18787	ArgumentList	 
>18788	Callee	qglEnd
>18789	Identifier	qglEnd
>18790	ExpressionStatement	 
>18791	CallExpression	qglVertex3f ( vMin [ 0 ] , vMax [ 1 ] , vMax [ 2 ] )
>18792	ArgumentList	vMin [ 0 ]
>18793	Argument	vMax [ 2 ]
>18794	ArrayIndexing	vMax [ 2 ]
>18795	PrimaryExpression	2
>18796	Identifier	vMax
>18797	Argument	vMax [ 1 ]
>18798	ArrayIndexing	vMax [ 1 ]
>18799	PrimaryExpression	1
>18800	Identifier	vMax
>18801	Argument	vMin [ 0 ]
>18802	ArrayIndexing	vMin [ 0 ]
>18803	PrimaryExpression	0
>18804	Identifier	vMin
>18805	Callee	qglVertex3f
>18806	Identifier	qglVertex3f
>18807	ExpressionStatement	 
>18808	CallExpression	qglVertex3f ( vMax [ 0 ] , vMax [ 1 ] , vMax [ 2 ] )
>18809	ArgumentList	vMax [ 0 ]
>18810	Argument	vMax [ 2 ]
>18811	ArrayIndexing	vMax [ 2 ]
>18812	PrimaryExpression	2
>18813	Identifier	vMax
>18814	Argument	vMax [ 1 ]
>18815	ArrayIndexing	vMax [ 1 ]
>18816	PrimaryExpression	1
>18817	Identifier	vMax
>18818	Argument	vMax [ 0 ]
>18819	ArrayIndexing	vMax [ 0 ]
>18820	PrimaryExpression	0
>18821	Identifier	vMax
>18822	Callee	qglVertex3f
>18823	Identifier	qglVertex3f
>18824	ExpressionStatement	 
>18825	CallExpression	qglVertex3f ( vMax [ 0 ] , vMin [ 1 ] , vMax [ 2 ] )
>18826	ArgumentList	vMax [ 0 ]
>18827	Argument	vMax [ 2 ]
>18828	ArrayIndexing	vMax [ 2 ]
>18829	PrimaryExpression	2
>18830	Identifier	vMax
>18831	Argument	vMin [ 1 ]
>18832	ArrayIndexing	vMin [ 1 ]
>18833	PrimaryExpression	1
>18834	Identifier	vMin
>18835	Argument	vMax [ 0 ]
>18836	ArrayIndexing	vMax [ 0 ]
>18837	PrimaryExpression	0
>18838	Identifier	vMax
>18839	Callee	qglVertex3f
>18840	Identifier	qglVertex3f
>18841	ExpressionStatement	 
>18842	CallExpression	qglVertex3f ( vMin [ 0 ] , vMin [ 1 ] , vMax [ 2 ] )
>18843	ArgumentList	vMin [ 0 ]
>18844	Argument	vMax [ 2 ]
>18845	ArrayIndexing	vMax [ 2 ]
>18846	PrimaryExpression	2
>18847	Identifier	vMax
>18848	Argument	vMin [ 1 ]
>18849	ArrayIndexing	vMin [ 1 ]
>18850	PrimaryExpression	1
>18851	Identifier	vMin
>18852	Argument	vMin [ 0 ]
>18853	ArrayIndexing	vMin [ 0 ]
>18854	PrimaryExpression	0
>18855	Identifier	vMin
>18856	Callee	qglVertex3f
>18857	Identifier	qglVertex3f
>18858	ExpressionStatement	 
>18859	CallExpression	qglBegin ( GL_LINE_LOOP )
>18860	ArgumentList	GL_LINE_LOOP
>18861	Argument	GL_LINE_LOOP
>18862	Identifier	GL_LINE_LOOP
>18863	Callee	qglBegin
>18864	Identifier	qglBegin
>18865	ExpressionStatement	 
>18866	CallExpression	qglEnd ( )
>18867	ArgumentList	 
>18868	Callee	qglEnd
>18869	Identifier	qglEnd
>18870	ExpressionStatement	 
>18871	CallExpression	qglVertex3f ( vMin [ 0 ] , vMax [ 1 ] , vMin [ 2 ] )
>18872	ArgumentList	vMin [ 0 ]
>18873	Argument	vMin [ 2 ]
>18874	ArrayIndexing	vMin [ 2 ]
>18875	PrimaryExpression	2
>18876	Identifier	vMin
>18877	Argument	vMax [ 1 ]
>18878	ArrayIndexing	vMax [ 1 ]
>18879	PrimaryExpression	1
>18880	Identifier	vMax
>18881	Argument	vMin [ 0 ]
>18882	ArrayIndexing	vMin [ 0 ]
>18883	PrimaryExpression	0
>18884	Identifier	vMin
>18885	Callee	qglVertex3f
>18886	Identifier	qglVertex3f
>18887	ExpressionStatement	 
>18888	CallExpression	qglVertex3f ( vMax [ 0 ] , vMax [ 1 ] , vMin [ 2 ] )
>18889	ArgumentList	vMax [ 0 ]
>18890	Argument	vMin [ 2 ]
>18891	ArrayIndexing	vMin [ 2 ]
>18892	PrimaryExpression	2
>18893	Identifier	vMin
>18894	Argument	vMax [ 1 ]
>18895	ArrayIndexing	vMax [ 1 ]
>18896	PrimaryExpression	1
>18897	Identifier	vMax
>18898	Argument	vMax [ 0 ]
>18899	ArrayIndexing	vMax [ 0 ]
>18900	PrimaryExpression	0
>18901	Identifier	vMax
>18902	Callee	qglVertex3f
>18903	Identifier	qglVertex3f
>18904	ExpressionStatement	 
>18905	CallExpression	qglVertex3f ( vMax [ 0 ] , vMin [ 1 ] , vMin [ 2 ] )
>18906	ArgumentList	vMax [ 0 ]
>18907	Argument	vMin [ 2 ]
>18908	ArrayIndexing	vMin [ 2 ]
>18909	PrimaryExpression	2
>18910	Identifier	vMin
>18911	Argument	vMin [ 1 ]
>18912	ArrayIndexing	vMin [ 1 ]
>18913	PrimaryExpression	1
>18914	Identifier	vMin
>18915	Argument	vMax [ 0 ]
>18916	ArrayIndexing	vMax [ 0 ]
>18917	PrimaryExpression	0
>18918	Identifier	vMax
>18919	Callee	qglVertex3f
>18920	Identifier	qglVertex3f
>18921	ExpressionStatement	 
>18922	CallExpression	qglVertex3f ( vMin [ 0 ] , vMin [ 1 ] , vMin [ 2 ] )
>18923	ArgumentList	vMin [ 0 ]
>18924	Argument	vMin [ 2 ]
>18925	ArrayIndexing	vMin [ 2 ]
>18926	PrimaryExpression	2
>18927	Identifier	vMin
>18928	Argument	vMin [ 1 ]
>18929	ArrayIndexing	vMin [ 1 ]
>18930	PrimaryExpression	1
>18931	Identifier	vMin
>18932	Argument	vMin [ 0 ]
>18933	ArrayIndexing	vMin [ 0 ]
>18934	PrimaryExpression	0
>18935	Identifier	vMin
>18936	Callee	qglVertex3f
>18937	Identifier	qglVertex3f
>18938	ExpressionStatement	 
>18939	CallExpression	qglBegin ( GL_LINE_LOOP )
>18940	ArgumentList	GL_LINE_LOOP
>18941	Argument	GL_LINE_LOOP
>18942	Identifier	GL_LINE_LOOP
>18943	Callee	qglBegin
>18944	Identifier	qglBegin
>18945	ExpressionStatement	 
>18946	AssignmentExpr	vMax [ 2 ] += 4
>18947	PrimaryExpression	4
>18948	ArrayIndexing	vMax [ 2 ]
>18949	PrimaryExpression	2
>18950	Identifier	vMax
>18951	ExpressionStatement	 
>18952	AssignmentExpr	vMax [ 1 ] += 4
>18953	PrimaryExpression	4
>18954	ArrayIndexing	vMax [ 1 ]
>18955	PrimaryExpression	1
>18956	Identifier	vMax
>18957	ExpressionStatement	 
>18958	AssignmentExpr	vMax [ 0 ] += 4
>18959	PrimaryExpression	4
>18960	ArrayIndexing	vMax [ 0 ]
>18961	PrimaryExpression	0
>18962	Identifier	vMax
>18963	ExpressionStatement	 
>18964	AssignmentExpr	vMin [ 2 ] -= 4
>18965	PrimaryExpression	4
>18966	ArrayIndexing	vMin [ 2 ]
>18967	PrimaryExpression	2
>18968	Identifier	vMin
>18969	ExpressionStatement	 
>18970	AssignmentExpr	vMin [ 1 ] -= 4
>18971	PrimaryExpression	4
>18972	ArrayIndexing	vMin [ 1 ]
>18973	PrimaryExpression	1
>18974	Identifier	vMin
>18975	ExpressionStatement	 
>18976	AssignmentExpr	vMin [ 0 ] -= 4
>18977	PrimaryExpression	4
>18978	ArrayIndexing	vMin [ 0 ]
>18979	PrimaryExpression	0
>18980	Identifier	vMin
>18981	ExpressionStatement	 
>18982	CallExpression	VectorCopy ( vCenter , vMax )
>18983	ArgumentList	vCenter
>18984	Argument	vMax
>18985	Identifier	vMax
>18986	Argument	vCenter
>18987	Identifier	vCenter
>18988	Callee	VectorCopy
>18989	Identifier	VectorCopy
>18990	ExpressionStatement	 
>18991	CallExpression	VectorCopy ( vCenter , vMin )
>18992	ArgumentList	vCenter
>18993	Argument	vMin
>18994	Identifier	vMin
>18995	Argument	vCenter
>18996	Identifier	vCenter
>18997	Callee	VectorCopy
>18998	Identifier	VectorCopy
>18999	ExpressionStatement	 
>19000	CallExpression	qglEnd ( )
>19001	ArgumentList	 
>19002	Callee	qglEnd
>19003	Identifier	qglEnd
>19004	ExpressionStatement	 
>19005	AssignmentExpr	vCenter [ 2 ] -= 8
>19006	PrimaryExpression	8
>19007	ArrayIndexing	vCenter [ 2 ]
>19008	PrimaryExpression	2
>19009	Identifier	vCenter
>19010	ExpressionStatement	 
>19011	CallExpression	qglVertex3fv ( vCenter )
>19012	ArgumentList	vCenter
>19013	Argument	vCenter
>19014	Identifier	vCenter
>19015	Callee	qglVertex3fv
>19016	Identifier	qglVertex3fv
>19017	ExpressionStatement	 
>19018	AssignmentExpr	vCenter [ 2 ] += 16
>19019	PrimaryExpression	16
>19020	ArrayIndexing	vCenter [ 2 ]
>19021	PrimaryExpression	2
>19022	Identifier	vCenter
>19023	ExpressionStatement	 
>19024	CallExpression	qglVertex3fv ( vCenter )
>19025	ArgumentList	vCenter
>19026	Argument	vCenter
>19027	Identifier	vCenter
>19028	Callee	qglVertex3fv
>19029	Identifier	qglVertex3fv
>19030	ExpressionStatement	 
>19031	AssignmentExpr	vCenter [ 2 ] -= 8
>19032	PrimaryExpression	8
>19033	ArrayIndexing	vCenter [ 2 ]
>19034	PrimaryExpression	2
>19035	Identifier	vCenter
>19036	ExpressionStatement	 
>19037	AssignmentExpr	vCenter [ 1 ] -= 8
>19038	PrimaryExpression	8
>19039	ArrayIndexing	vCenter [ 1 ]
>19040	PrimaryExpression	1
>19041	Identifier	vCenter
>19042	ExpressionStatement	 
>19043	CallExpression	qglVertex3fv ( vCenter )
>19044	ArgumentList	vCenter
>19045	Argument	vCenter
>19046	Identifier	vCenter
>19047	Callee	qglVertex3fv
>19048	Identifier	qglVertex3fv
>19049	ExpressionStatement	 
>19050	AssignmentExpr	vCenter [ 1 ] += 16
>19051	PrimaryExpression	16
>19052	ArrayIndexing	vCenter [ 1 ]
>19053	PrimaryExpression	1
>19054	Identifier	vCenter
>19055	ExpressionStatement	 
>19056	CallExpression	qglVertex3fv ( vCenter )
>19057	ArgumentList	vCenter
>19058	Argument	vCenter
>19059	Identifier	vCenter
>19060	Callee	qglVertex3fv
>19061	Identifier	qglVertex3fv
>19062	ExpressionStatement	 
>19063	AssignmentExpr	vCenter [ 1 ] -= 8
>19064	PrimaryExpression	8
>19065	ArrayIndexing	vCenter [ 1 ]
>19066	PrimaryExpression	1
>19067	Identifier	vCenter
>19068	ExpressionStatement	 
>19069	AssignmentExpr	vCenter [ 0 ] -= 8
>19070	PrimaryExpression	8
>19071	ArrayIndexing	vCenter [ 0 ]
>19072	PrimaryExpression	0
>19073	Identifier	vCenter
>19074	ExpressionStatement	 
>19075	CallExpression	qglVertex3fv ( vCenter )
>19076	ArgumentList	vCenter
>19077	Argument	vCenter
>19078	Identifier	vCenter
>19079	Callee	qglVertex3fv
>19080	Identifier	qglVertex3fv
>19081	ExpressionStatement	 
>19082	AssignmentExpr	vCenter [ 0 ] += 16
>19083	PrimaryExpression	16
>19084	ArrayIndexing	vCenter [ 0 ]
>19085	PrimaryExpression	0
>19086	Identifier	vCenter
>19087	ExpressionStatement	 
>19088	CallExpression	qglVertex3fv ( vCenter )
>19089	ArgumentList	vCenter
>19090	Argument	vCenter
>19091	Identifier	vCenter
>19092	Callee	qglVertex3fv
>19093	Identifier	qglVertex3fv
>19094	ExpressionStatement	 
>19095	AssignmentExpr	vCenter [ 0 ] -= 8
>19096	PrimaryExpression	8
>19097	ArrayIndexing	vCenter [ 0 ]
>19098	PrimaryExpression	0
>19099	Identifier	vCenter
>19100	ExpressionStatement	 
>19101	CallExpression	qglBegin ( GL_LINES )
>19102	ArgumentList	GL_LINES
>19103	Argument	GL_LINES
>19104	Identifier	GL_LINES
>19105	Callee	qglBegin
>19106	Identifier	qglBegin
>19107	ExpressionStatement	 
>19108	CallExpression	qglEnd ( )
>19109	ArgumentList	 
>19110	Callee	qglEnd
>19111	Identifier	qglEnd
>19112	ExpressionStatement	 
>19113	CallExpression	qglVertex3fv ( b -> owner -> origin )
>19114	ArgumentList	b -> owner -> origin
>19115	Argument	b -> owner -> origin
>19116	PtrMemberAccess	b -> owner -> origin
>19117	Identifier	origin
>19118	PtrMemberAccess	b -> owner
>19119	Identifier	owner
>19120	Identifier	b
>19121	Callee	qglVertex3fv
>19122	Identifier	qglVertex3fv
>19123	ExpressionStatement	 
>19124	CallExpression	qglBegin ( GL_POINTS )
>19125	ArgumentList	GL_POINTS
>19126	Argument	GL_POINTS
>19127	Identifier	GL_POINTS
>19128	Callee	qglBegin
>19129	Identifier	qglBegin
>19130	ExpressionStatement	 
>19131	CallExpression	qglPointSize ( 4 )
>19132	ArgumentList	4
>19133	Argument	4
>19134	PrimaryExpression	4
>19135	Callee	qglPointSize
>19136	Identifier	qglPointSize
>19137	ExpressionStatement	 
>19138	CallExpression	qglColor3fv ( vColor )
>19139	ArgumentList	vColor
>19140	Argument	vColor
>19141	Identifier	vColor
>19142	Callee	qglColor3fv
>19143	Identifier	qglColor3fv
>19144	ExpressionStatement	 
>19145	CallExpression	VectorCopy ( b -> owner -> origin , vCenter )
>19146	ArgumentList	b -> owner -> origin
>19147	Argument	vCenter
>19148	Identifier	vCenter
>19149	Argument	b -> owner -> origin
>19150	PtrMemberAccess	b -> owner -> origin
>19151	Identifier	origin
>19152	PtrMemberAccess	b -> owner
>19153	Identifier	owner
>19154	Identifier	b
>19155	Callee	VectorCopy
>19156	Identifier	VectorCopy
>19157	IdentifierDeclStatement	 
>19158	IdentifierDecl	vMax
>19159	Identifier	vMax
>19160	IdentifierDeclType	vec3_t
>19161	IdentifierDecl	vMin
>19162	Identifier	vMin
>19163	IdentifierDeclType	vec3_t
>19164	IdentifierDecl	vCenter
>19165	Identifier	vCenter
>19166	IdentifierDeclType	vec3_t
>19167	ExpressionStatement	 
>19168	CallExpression	VectorScale ( pEclass -> color , 0.50 , vColor )
>19169	ArgumentList	pEclass -> color
>19170	Argument	vColor
>19171	Identifier	vColor
>19172	Argument	0.50
>19173	PrimaryExpression	0.50
>19174	Argument	pEclass -> color
>19175	PtrMemberAccess	pEclass -> color
>19176	Identifier	color
>19177	Identifier	pEclass
>19178	Callee	VectorScale
>19179	Identifier	VectorScale
>19180	IdentifierDeclStatement	 
>19181	IdentifierDecl	vColor
>19182	Identifier	vColor
>19183	IdentifierDeclType	vec3_t
>19184	IfStatement	if ( g_bDoIt )
>19185	CompoundStatement	 
>19186	ExpressionStatement	 
>19187	AssignmentExpr	g_bDoIt = false
>19188	Identifier	false
>19189	Identifier	g_bDoIt
>19190	Condition	 
>19191	Identifier	g_bDoIt
>19192	WhileStatement	while ( model != NULL )
>19193	CompoundStatement	 
>19194	ExpressionStatement	 
>19195	AssignmentExpr	model = model -> pNext
>19196	PtrMemberAccess	model -> pNext
>19197	Identifier	pNext
>19198	Identifier	model
>19199	Identifier	model
>19200	IfStatement	if ( g_PrefsDlg . m_nEntityShowState & ENTITY_WIREFRAME )
>19201	ElseStatement	else
>19202	CompoundStatement	 
>19203	ExpressionStatement	 
>19204	CallExpression	qglDisable ( GL_TEXTURE_2D )
>19205	ArgumentList	GL_TEXTURE_2D
>19206	Argument	GL_TEXTURE_2D
>19207	Identifier	GL_TEXTURE_2D
>19208	Callee	qglDisable
>19209	Identifier	qglDisable
>19210	CompoundStatement	 
>19211	ExpressionStatement	 
>19212	CallExpression	qglPolygonMode ( GL_FRONT_AND_BACK , GL_FILL )
>19213	ArgumentList	GL_FRONT_AND_BACK
>19214	Argument	GL_FILL
>19215	Identifier	GL_FILL
>19216	Argument	GL_FRONT_AND_BACK
>19217	Identifier	GL_FRONT_AND_BACK
>19218	Callee	qglPolygonMode
>19219	Identifier	qglPolygonMode
>19220	ExpressionStatement	 
>19221	CallExpression	qglEnable ( GL_TEXTURE_2D )
>19222	ArgumentList	GL_TEXTURE_2D
>19223	Argument	GL_TEXTURE_2D
>19224	Identifier	GL_TEXTURE_2D
>19225	Callee	qglEnable
>19226	Identifier	qglEnable
>19227	ExpressionStatement	 
>19228	CallExpression	qglEnable ( GL_CULL_FACE )
>19229	ArgumentList	GL_CULL_FACE
>19230	Argument	GL_CULL_FACE
>19231	Identifier	GL_CULL_FACE
>19232	Callee	qglEnable
>19233	Identifier	qglEnable
>19234	Condition	 
>19235	BitAndExpression	g_PrefsDlg . m_nEntityShowState & ENTITY_WIREFRAME
>19236	Identifier	ENTITY_WIREFRAME
>19237	MemberAccess	g_PrefsDlg . m_nEntityShowState
>19238	Identifier	m_nEntityShowState
>19239	Identifier	g_PrefsDlg
>19240	ExpressionStatement	 
>19241	CallExpression	qglEnd ( )
>19242	ArgumentList	 
>19243	Callee	qglEnd
>19244	Identifier	qglEnd
>19245	ForStatement	for ( i = 0 ; i < model -> nTriCount ; i ++ )
>19246	CompoundStatement	 
>19247	IfStatement	if ( g_bDoIt )
>19248	CompoundStatement	 
>19249	ExpressionStatement	 
>19250	CallExpression	Patch_FromTriangle ( vTest [ 0 ] , vTest [ 1 ] , vTest [ 2 ] )
>19251	ArgumentList	vTest [ 0 ]
>19252	Argument	vTest [ 2 ]
>19253	ArrayIndexing	vTest [ 2 ]
>19254	PrimaryExpression	2
>19255	Identifier	vTest
>19256	Argument	vTest [ 1 ]
>19257	ArrayIndexing	vTest [ 1 ]
>19258	PrimaryExpression	1
>19259	Identifier	vTest
>19260	Argument	vTest [ 0 ]
>19261	ArrayIndexing	vTest [ 0 ]
>19262	PrimaryExpression	0
>19263	Identifier	vTest
>19264	Callee	Patch_FromTriangle
>19265	Identifier	Patch_FromTriangle
>19266	Condition	 
>19267	Identifier	g_bDoIt
>19268	ForStatement	for ( j = 0 ; j < 3 ; j ++ )
>19269	CompoundStatement	 
>19270	IfStatement	if ( g_bDoIt )
>19271	CompoundStatement	 
>19272	ExpressionStatement	 
>19273	AssignmentExpr	vTest [ j ] [ 4 ] = model -> pTriList [ i ] . st [ j ] [ 1 ]
>19274	ArrayIndexing	model -> pTriList [ i ] . st [ j ] [ 1 ]
>19275	PrimaryExpression	1
>19276	ArrayIndexing	model -> pTriList [ i ] . st [ j ]
>19277	Identifier	j
>19278	MemberAccess	model -> pTriList [ i ] . st
>19279	Identifier	st
>19280	ArrayIndexing	model -> pTriList [ i ]
>19281	Identifier	i
>19282	PtrMemberAccess	model -> pTriList
>19283	Identifier	pTriList
>19284	Identifier	model
>19285	ArrayIndexing	vTest [ j ] [ 4 ]
>19286	PrimaryExpression	4
>19287	ArrayIndexing	vTest [ j ]
>19288	Identifier	j
>19289	Identifier	vTest
>19290	ExpressionStatement	 
>19291	AssignmentExpr	vTest [ j ] [ 3 ] = model -> pTriList [ i ] . st [ j ] [ 0 ]
>19292	ArrayIndexing	model -> pTriList [ i ] . st [ j ] [ 0 ]
>19293	PrimaryExpression	0
>19294	ArrayIndexing	model -> pTriList [ i ] . st [ j ]
>19295	Identifier	j
>19296	MemberAccess	model -> pTriList [ i ] . st
>19297	Identifier	st
>19298	ArrayIndexing	model -> pTriList [ i ]
>19299	Identifier	i
>19300	PtrMemberAccess	model -> pTriList
>19301	Identifier	pTriList
>19302	Identifier	model
>19303	ArrayIndexing	vTest [ j ] [ 3 ]
>19304	PrimaryExpression	3
>19305	ArrayIndexing	vTest [ j ]
>19306	Identifier	j
>19307	Identifier	vTest
>19308	ExpressionStatement	 
>19309	AssignmentExpr	vTest [ j ] [ 2 ] = model -> pTriList [ i ] . v [ j ] [ 2 ] + v [ 2 ]
>19310	AdditiveExpression	model -> pTriList [ i ] . v [ j ] [ 2 ] + v [ 2 ]
>19311	ArrayIndexing	v [ 2 ]
>19312	PrimaryExpression	2
>19313	Identifier	v
>19314	ArrayIndexing	model -> pTriList [ i ] . v [ j ] [ 2 ]
>19315	PrimaryExpression	2
>19316	ArrayIndexing	model -> pTriList [ i ] . v [ j ]
>19317	Identifier	j
>19318	MemberAccess	model -> pTriList [ i ] . v
>19319	Identifier	v
>19320	ArrayIndexing	model -> pTriList [ i ]
>19321	Identifier	i
>19322	PtrMemberAccess	model -> pTriList
>19323	Identifier	pTriList
>19324	Identifier	model
>19325	ArrayIndexing	vTest [ j ] [ 2 ]
>19326	PrimaryExpression	2
>19327	ArrayIndexing	vTest [ j ]
>19328	Identifier	j
>19329	Identifier	vTest
>19330	ExpressionStatement	 
>19331	AssignmentExpr	vTest [ j ] [ 1 ] = y
>19332	Identifier	y
>19333	ArrayIndexing	vTest [ j ] [ 1 ]
>19334	PrimaryExpression	1
>19335	ArrayIndexing	vTest [ j ]
>19336	Identifier	j
>19337	Identifier	vTest
>19338	ExpressionStatement	 
>19339	AssignmentExpr	vTest [ j ] [ 0 ] = x
>19340	Identifier	x
>19341	ArrayIndexing	vTest [ j ] [ 0 ]
>19342	PrimaryExpression	0
>19343	ArrayIndexing	vTest [ j ]
>19344	Identifier	j
>19345	Identifier	vTest
>19346	Condition	 
>19347	Identifier	g_bDoIt
>19348	ExpressionStatement	 
>19349	CallExpression	qglVertex3f ( x , y , model -> pTriList [ i ] . v [ j ] [ 2 ] + v [ 2 ] )
>19350	ArgumentList	x
>19351	Argument	model -> pTriList [ i ] . v [ j ] [ 2 ] + v [ 2 ]
>19352	AdditiveExpression	model -> pTriList [ i ] . v [ j ] [ 2 ] + v [ 2 ]
>19353	ArrayIndexing	v [ 2 ]
>19354	PrimaryExpression	2
>19355	Identifier	v
>19356	ArrayIndexing	model -> pTriList [ i ] . v [ j ] [ 2 ]
>19357	PrimaryExpression	2
>19358	ArrayIndexing	model -> pTriList [ i ] . v [ j ]
>19359	Identifier	j
>19360	MemberAccess	model -> pTriList [ i ] . v
>19361	Identifier	v
>19362	ArrayIndexing	model -> pTriList [ i ]
>19363	Identifier	i
>19364	PtrMemberAccess	model -> pTriList
>19365	Identifier	pTriList
>19366	Identifier	model
>19367	Argument	y
>19368	Identifier	y
>19369	Argument	x
>19370	Identifier	x
>19371	Callee	qglVertex3f
>19372	Identifier	qglVertex3f
>19373	ExpressionStatement	 
>19374	CallExpression	qglTexCoord2f ( model -> pTriList [ i ] . st [ j ] [ 0 ] , model -> pTriList [ i ] . st [ j ] [ 1 ] )
>19375	ArgumentList	model -> pTriList [ i ] . st [ j ] [ 0 ]
>19376	Argument	model -> pTriList [ i ] . st [ j ] [ 1 ]
>19377	ArrayIndexing	model -> pTriList [ i ] . st [ j ] [ 1 ]
>19378	PrimaryExpression	1
>19379	ArrayIndexing	model -> pTriList [ i ] . st [ j ]
>19380	Identifier	j
>19381	MemberAccess	model -> pTriList [ i ] . st
>19382	Identifier	st
>19383	ArrayIndexing	model -> pTriList [ i ]
>19384	Identifier	i
>19385	PtrMemberAccess	model -> pTriList
>19386	Identifier	pTriList
>19387	Identifier	model
>19388	Argument	model -> pTriList [ i ] . st [ j ] [ 0 ]
>19389	ArrayIndexing	model -> pTriList [ i ] . st [ j ] [ 0 ]
>19390	PrimaryExpression	0
>19391	ArrayIndexing	model -> pTriList [ i ] . st [ j ]
>19392	Identifier	j
>19393	MemberAccess	model -> pTriList [ i ] . st
>19394	Identifier	st
>19395	ArrayIndexing	model -> pTriList [ i ]
>19396	Identifier	i
>19397	PtrMemberAccess	model -> pTriList
>19398	Identifier	pTriList
>19399	Identifier	model
>19400	Callee	qglTexCoord2f
>19401	Identifier	qglTexCoord2f
>19402	IfStatement	if ( a )
>19403	CompoundStatement	 
>19404	ExpressionStatement	 
>19405	AssignmentExpr	y = y2
>19406	Identifier	y2
>19407	Identifier	y
>19408	ExpressionStatement	 
>19409	AssignmentExpr	x = x2
>19410	Identifier	x2
>19411	Identifier	x
>19412	IdentifierDeclStatement	 
>19413	IdentifierDecl	y2 = ( ( ( x - v [ 0 ] ) * s ) + ( ( y - v [ 1 ] ) * c ) ) + v [ 1 ]
>19414	AssignmentExpr	y2 = ( ( ( x - v [ 0 ] ) * s ) + ( ( y - v [ 1 ] ) * c ) ) + v [ 1 ]
>19415	AdditiveExpression	( ( ( x - v [ 0 ] ) * s ) + ( ( y - v [ 1 ] ) * c ) ) + v [ 1 ]
>19416	ArrayIndexing	v [ 1 ]
>19417	PrimaryExpression	1
>19418	Identifier	v
>19419	AdditiveExpression	( ( x - v [ 0 ] ) * s ) + ( ( y - v [ 1 ] ) * c )
>19420	MultiplicativeExpression	( y - v [ 1 ] ) * c
>19421	Identifier	c
>19422	AdditiveExpression	y - v [ 1 ]
>19423	ArrayIndexing	v [ 1 ]
>19424	PrimaryExpression	1
>19425	Identifier	v
>19426	Identifier	y
>19427	MultiplicativeExpression	( x - v [ 0 ] ) * s
>19428	Identifier	s
>19429	AdditiveExpression	x - v [ 0 ]
>19430	ArrayIndexing	v [ 0 ]
>19431	PrimaryExpression	0
>19432	Identifier	v
>19433	Identifier	x
>19434	Identifier	y2
>19435	Identifier	y2
>19436	IdentifierDeclType	float
>19437	IdentifierDeclStatement	 
>19438	IdentifierDecl	x2 = ( ( ( x - v [ 0 ] ) * c ) - ( ( y - v [ 1 ] ) * s ) ) + v [ 0 ]
>19439	AssignmentExpr	x2 = ( ( ( x - v [ 0 ] ) * c ) - ( ( y - v [ 1 ] ) * s ) ) + v [ 0 ]
>19440	AdditiveExpression	( ( ( x - v [ 0 ] ) * c ) - ( ( y - v [ 1 ] ) * s ) ) + v [ 0 ]
>19441	ArrayIndexing	v [ 0 ]
>19442	PrimaryExpression	0
>19443	Identifier	v
>19444	AdditiveExpression	( ( x - v [ 0 ] ) * c ) - ( ( y - v [ 1 ] ) * s )
>19445	MultiplicativeExpression	( y - v [ 1 ] ) * s
>19446	Identifier	s
>19447	AdditiveExpression	y - v [ 1 ]
>19448	ArrayIndexing	v [ 1 ]
>19449	PrimaryExpression	1
>19450	Identifier	v
>19451	Identifier	y
>19452	MultiplicativeExpression	( x - v [ 0 ] ) * c
>19453	Identifier	c
>19454	AdditiveExpression	x - v [ 0 ]
>19455	ArrayIndexing	v [ 0 ]
>19456	PrimaryExpression	0
>19457	Identifier	v
>19458	Identifier	x
>19459	Identifier	x2
>19460	Identifier	x2
>19461	IdentifierDeclType	float
>19462	Condition	 
>19463	Identifier	a
>19464	IdentifierDeclStatement	 
>19465	IdentifierDecl	y = model -> pTriList [ i ] . v [ j ] [ 1 ] + v [ 1 ]
>19466	AssignmentExpr	y = model -> pTriList [ i ] . v [ j ] [ 1 ] + v [ 1 ]
>19467	AdditiveExpression	model -> pTriList [ i ] . v [ j ] [ 1 ] + v [ 1 ]
>19468	ArrayIndexing	v [ 1 ]
>19469	PrimaryExpression	1
>19470	Identifier	v
>19471	ArrayIndexing	model -> pTriList [ i ] . v [ j ] [ 1 ]
>19472	PrimaryExpression	1
>19473	ArrayIndexing	model -> pTriList [ i ] . v [ j ]
>19474	Identifier	j
>19475	MemberAccess	model -> pTriList [ i ] . v
>19476	Identifier	v
>19477	ArrayIndexing	model -> pTriList [ i ]
>19478	Identifier	i
>19479	PtrMemberAccess	model -> pTriList
>19480	Identifier	pTriList
>19481	Identifier	model
>19482	Identifier	y
>19483	Identifier	y
>19484	IdentifierDeclType	float
>19485	IdentifierDeclStatement	 
>19486	IdentifierDecl	x = model -> pTriList [ i ] . v [ j ] [ 0 ] + v [ 0 ]
>19487	AssignmentExpr	x = model -> pTriList [ i ] . v [ j ] [ 0 ] + v [ 0 ]
>19488	AdditiveExpression	model -> pTriList [ i ] . v [ j ] [ 0 ] + v [ 0 ]
>19489	ArrayIndexing	v [ 0 ]
>19490	PrimaryExpression	0
>19491	Identifier	v
>19492	ArrayIndexing	model -> pTriList [ i ] . v [ j ] [ 0 ]
>19493	PrimaryExpression	0
>19494	ArrayIndexing	model -> pTriList [ i ] . v [ j ]
>19495	Identifier	j
>19496	MemberAccess	model -> pTriList [ i ] . v
>19497	Identifier	v
>19498	ArrayIndexing	model -> pTriList [ i ]
>19499	Identifier	i
>19500	PtrMemberAccess	model -> pTriList
>19501	Identifier	pTriList
>19502	Identifier	model
>19503	Identifier	x
>19504	Identifier	x
>19505	IdentifierDeclType	float
>19506	IncDecOp	 
>19507	IncDec	++
>19508	Identifier	j
>19509	Condition	 
>19510	RelationalExpression	j < 3
>19511	PrimaryExpression	3
>19512	Identifier	j
>19513	ForInit	 
>19514	AssignmentExpr	j = 0
>19515	PrimaryExpression	0
>19516	Identifier	j
>19517	IncDecOp	 
>19518	IncDec	++
>19519	Identifier	i
>19520	Condition	 
>19521	RelationalExpression	i < model -> nTriCount
>19522	PtrMemberAccess	model -> nTriCount
>19523	Identifier	nTriCount
>19524	Identifier	model
>19525	Identifier	i
>19526	ForInit	 
>19527	AssignmentExpr	i = 0
>19528	PrimaryExpression	0
>19529	Identifier	i
>19530	IdentifierDeclStatement	 
>19531	IdentifierDecl	vTest [ 3 ]
>19532	PrimaryExpression	3
>19533	Identifier	vTest
>19534	IdentifierDeclType	vec5_t [ 3 ]
>19535	ExpressionStatement	 
>19536	CallExpression	qglBegin ( GL_TRIANGLES )
>19537	ArgumentList	GL_TRIANGLES
>19538	Argument	GL_TRIANGLES
>19539	Identifier	GL_TRIANGLES
>19540	Callee	qglBegin
>19541	Identifier	qglBegin
>19542	ForStatement	for ( j = 0 ; j < 3 ; j ++ )
>19543	CompoundStatement	 
>19544	IfStatement	if ( b -> owner -> vRotation [ j ] )
>19545	CompoundStatement	 
>19546	ExpressionStatement	 
>19547	AssignmentExpr	vCos [ j ] = cos ( b -> owner -> vRotation [ j ] / 180 * Q_PI )
>19548	CallExpression	cos ( b -> owner -> vRotation [ j ] / 180 * Q_PI )
>19549	ArgumentList	b -> owner -> vRotation [ j ] / 180 * Q_PI
>19550	Argument	b -> owner -> vRotation [ j ] / 180 * Q_PI
>19551	MultiplicativeExpression	b -> owner -> vRotation [ j ] / 180 * Q_PI
>19552	MultiplicativeExpression	180 * Q_PI
>19553	Identifier	Q_PI
>19554	PrimaryExpression	180
>19555	ArrayIndexing	b -> owner -> vRotation [ j ]
>19556	Identifier	j
>19557	PtrMemberAccess	b -> owner -> vRotation
>19558	Identifier	vRotation
>19559	PtrMemberAccess	b -> owner
>19560	Identifier	owner
>19561	Identifier	b
>19562	Callee	cos
>19563	Identifier	cos
>19564	ArrayIndexing	vCos [ j ]
>19565	Identifier	j
>19566	Identifier	vCos
>19567	ExpressionStatement	 
>19568	AssignmentExpr	vSin [ j ] = sin ( b -> owner -> vRotation [ j ] / 180 * Q_PI )
>19569	CallExpression	sin ( b -> owner -> vRotation [ j ] / 180 * Q_PI )
>19570	ArgumentList	b -> owner -> vRotation [ j ] / 180 * Q_PI
>19571	Argument	b -> owner -> vRotation [ j ] / 180 * Q_PI
>19572	MultiplicativeExpression	b -> owner -> vRotation [ j ] / 180 * Q_PI
>19573	MultiplicativeExpression	180 * Q_PI
>19574	Identifier	Q_PI
>19575	PrimaryExpression	180
>19576	ArrayIndexing	b -> owner -> vRotation [ j ]
>19577	Identifier	j
>19578	PtrMemberAccess	b -> owner -> vRotation
>19579	Identifier	vRotation
>19580	PtrMemberAccess	b -> owner
>19581	Identifier	owner
>19582	Identifier	b
>19583	Callee	sin
>19584	Identifier	sin
>19585	ArrayIndexing	vSin [ j ]
>19586	Identifier	j
>19587	Identifier	vSin
>19588	Condition	 
>19589	ArrayIndexing	b -> owner -> vRotation [ j ]
>19590	Identifier	j
>19591	PtrMemberAccess	b -> owner -> vRotation
>19592	Identifier	vRotation
>19593	PtrMemberAccess	b -> owner
>19594	Identifier	owner
>19595	Identifier	b
>19596	IncDecOp	 
>19597	IncDec	++
>19598	Identifier	j
>19599	Condition	 
>19600	RelationalExpression	j < 3
>19601	PrimaryExpression	3
>19602	Identifier	j
>19603	ForInit	 
>19604	AssignmentExpr	j = 0
>19605	PrimaryExpression	0
>19606	Identifier	j
>19607	ExpressionStatement	 
>19608	CallExpression	VectorClear ( vCos )
>19609	ArgumentList	vCos
>19610	Argument	vCos
>19611	Identifier	vCos
>19612	Callee	VectorClear
>19613	Identifier	VectorClear
>19614	ExpressionStatement	 
>19615	CallExpression	VectorClear ( vSin )
>19616	ArgumentList	vSin
>19617	Argument	vSin
>19618	Identifier	vSin
>19619	Callee	VectorClear
>19620	Identifier	VectorClear
>19621	IdentifierDeclStatement	 
>19622	IdentifierDecl	vCos
>19623	Identifier	vCos
>19624	IdentifierDeclType	vec3_t
>19625	IdentifierDeclStatement	 
>19626	IdentifierDecl	vSin
>19627	Identifier	vSin
>19628	IdentifierDeclType	vec3_t
>19629	IfStatement	if ( a )
>19630	CompoundStatement	 
>19631	ExpressionStatement	 
>19632	AssignmentExpr	c = cos ( a / 180 * Q_PI )
>19633	CallExpression	cos ( a / 180 * Q_PI )
>19634	ArgumentList	a / 180 * Q_PI
>19635	Argument	a / 180 * Q_PI
>19636	MultiplicativeExpression	a / 180 * Q_PI
>19637	MultiplicativeExpression	180 * Q_PI
>19638	Identifier	Q_PI
>19639	PrimaryExpression	180
>19640	Identifier	a
>19641	Callee	cos
>19642	Identifier	cos
>19643	Identifier	c
>19644	ExpressionStatement	 
>19645	AssignmentExpr	s = sin ( a / 180 * Q_PI )
>19646	CallExpression	sin ( a / 180 * Q_PI )
>19647	ArgumentList	a / 180 * Q_PI
>19648	Argument	a / 180 * Q_PI
>19649	MultiplicativeExpression	a / 180 * Q_PI
>19650	MultiplicativeExpression	180 * Q_PI
>19651	Identifier	Q_PI
>19652	PrimaryExpression	180
>19653	Identifier	a
>19654	Callee	sin
>19655	Identifier	sin
>19656	Identifier	s
>19657	Condition	 
>19658	Identifier	a
>19659	IdentifierDeclStatement	 
>19660	IdentifierDecl	c
>19661	Identifier	c
>19662	IdentifierDeclType	float
>19663	IdentifierDecl	s
>19664	Identifier	s
>19665	IdentifierDeclType	float
>19666	ExpressionStatement	 
>19667	CallExpression	VectorCopy ( b -> owner -> origin , v )
>19668	ArgumentList	b -> owner -> origin
>19669	Argument	v
>19670	Identifier	v
>19671	Argument	b -> owner -> origin
>19672	PtrMemberAccess	b -> owner -> origin
>19673	Identifier	origin
>19674	PtrMemberAccess	b -> owner
>19675	Identifier	owner
>19676	Identifier	b
>19677	Callee	VectorCopy
>19678	Identifier	VectorCopy
>19679	ExpressionStatement	 
>19680	CallExpression	VectorScale ( v , 0.5 , v )
>19681	ArgumentList	v
>19682	Argument	v
>19683	Identifier	v
>19684	Argument	0.5
>19685	PrimaryExpression	0.5
>19686	Argument	v
>19687	Identifier	v
>19688	Callee	VectorScale
>19689	Identifier	VectorScale
>19690	ExpressionStatement	 
>19691	CallExpression	VectorAdd ( b -> maxs , b -> mins , v )
>19692	ArgumentList	b -> maxs
>19693	Argument	v
>19694	Identifier	v
>19695	Argument	b -> mins
>19696	PtrMemberAccess	b -> mins
>19697	Identifier	mins
>19698	Identifier	b
>19699	Argument	b -> maxs
>19700	PtrMemberAccess	b -> maxs
>19701	Identifier	maxs
>19702	Identifier	b
>19703	Callee	VectorAdd
>19704	Identifier	VectorAdd
>19705	IdentifierDeclStatement	 
>19706	IdentifierDecl	j
>19707	Identifier	j
>19708	IdentifierDeclType	int
>19709	IdentifierDecl	i
>19710	Identifier	i
>19711	IdentifierDeclType	int
>19712	IdentifierDeclStatement	 
>19713	IdentifierDecl	v
>19714	Identifier	v
>19715	IdentifierDeclType	vec3_t
>19716	IfStatement	if ( bOkToTexture == false || g_PrefsDlg . m_nEntityShowState & ENTITY_WIREFRAME || model -> nTextureBind == - 1 )
>19717	ElseStatement	else
>19718	CompoundStatement	 
>19719	ExpressionStatement	 
>19720	CallExpression	qglBindTexture ( GL_TEXTURE_2D , model -> nTextureBind )
>19721	ArgumentList	GL_TEXTURE_2D
>19722	Argument	model -> nTextureBind
>19723	PtrMemberAccess	model -> nTextureBind
>19724	Identifier	nTextureBind
>19725	Identifier	model
>19726	Argument	GL_TEXTURE_2D
>19727	Identifier	GL_TEXTURE_2D
>19728	Callee	qglBindTexture
>19729	Identifier	qglBindTexture
>19730	ExpressionStatement	 
>19731	CallExpression	qglEnable ( GL_TEXTURE_2D )
>19732	ArgumentList	GL_TEXTURE_2D
>19733	Argument	GL_TEXTURE_2D
>19734	Identifier	GL_TEXTURE_2D
>19735	Callee	qglEnable
>19736	Identifier	qglEnable
>19737	ExpressionStatement	 
>19738	CallExpression	qglColor3f ( 1 , 1 , 1 )
>19739	ArgumentList	1
>19740	Argument	1
>19741	PrimaryExpression	1
>19742	Argument	1
>19743	PrimaryExpression	1
>19744	Argument	1
>19745	PrimaryExpression	1
>19746	Callee	qglColor3f
>19747	Identifier	qglColor3f
>19748	CompoundStatement	 
>19749	ExpressionStatement	 
>19750	CallExpression	qglColor3fv ( pEclass -> color )
>19751	ArgumentList	pEclass -> color
>19752	Argument	pEclass -> color
>19753	PtrMemberAccess	pEclass -> color
>19754	Identifier	color
>19755	Identifier	pEclass
>19756	Callee	qglColor3fv
>19757	Identifier	qglColor3fv
>19758	ExpressionStatement	 
>19759	CallExpression	qglDisable ( GL_TEXTURE_2D )
>19760	ArgumentList	GL_TEXTURE_2D
>19761	Argument	GL_TEXTURE_2D
>19762	Identifier	GL_TEXTURE_2D
>19763	Callee	qglDisable
>19764	Identifier	qglDisable
>19765	ExpressionStatement	 
>19766	CallExpression	qglPolygonMode ( GL_FRONT_AND_BACK , GL_LINE )
>19767	ArgumentList	GL_FRONT_AND_BACK
>19768	Argument	GL_LINE
>19769	Identifier	GL_LINE
>19770	Argument	GL_FRONT_AND_BACK
>19771	Identifier	GL_FRONT_AND_BACK
>19772	Callee	qglPolygonMode
>19773	Identifier	qglPolygonMode
>19774	ExpressionStatement	 
>19775	CallExpression	qglDisable ( GL_CULL_FACE )
>19776	ArgumentList	GL_CULL_FACE
>19777	Argument	GL_CULL_FACE
>19778	Identifier	GL_CULL_FACE
>19779	Callee	qglDisable
>19780	Identifier	qglDisable
>19781	Condition	 
>19782	OrExpression	bOkToTexture == false || g_PrefsDlg . m_nEntityShowState & ENTITY_WIREFRAME || model -> nTextureBind == \
>19783	OrExpression	g_PrefsDlg . m_nEntityShowState & ENTITY_WIREFRAME || model -> nTextureBind == - 1
>19784	EqualityExpression	model -> nTextureBind == - 1
>19785	UnaryOp	- 1
>19786	PrimaryExpression	1
>19787	UnaryOperator	-
>19788	PtrMemberAccess	model -> nTextureBind
>19789	Identifier	nTextureBind
>19790	Identifier	model
>19791	BitAndExpression	g_PrefsDlg . m_nEntityShowState & ENTITY_WIREFRAME
>19792	Identifier	ENTITY_WIREFRAME
>19793	MemberAccess	g_PrefsDlg . m_nEntityShowState
>19794	Identifier	m_nEntityShowState
>19795	Identifier	g_PrefsDlg
>19796	EqualityExpression	bOkToTexture == false
>19797	Identifier	false
>19798	Identifier	bOkToTexture
>19799	Condition	 
>19800	EqualityExpression	model != NULL
>19801	Identifier	NULL
>19802	Identifier	model
>19803	IdentifierDeclStatement	 
>19804	IdentifierDecl	a = FloatForKey ( b -> owner , \"angle\" )
>19805	AssignmentExpr	a = FloatForKey ( b -> owner , \"angle\" )
>19806	CallExpression	FloatForKey ( b -> owner , \"angle\" )
>19807	ArgumentList	b -> owner
>19808	Argument	\"angle\"
>19809	PrimaryExpression	\"angle\"
>19810	Argument	b -> owner
>19811	PtrMemberAccess	b -> owner
>19812	Identifier	owner
>19813	Identifier	b
>19814	Callee	FloatForKey
>19815	Identifier	FloatForKey
>19816	Identifier	a
>19817	Identifier	a
>19818	IdentifierDeclType	float
>19819	IdentifierDeclStatement	 
>19820	IdentifierDecl	* model = pEclass -> model
>19821	AssignmentExpr	* model = pEclass -> model
>19822	PtrMemberAccess	pEclass -> model
>19823	Identifier	model
>19824	Identifier	pEclass
>19825	Identifier	model
>19826	Identifier	model
>19827	IdentifierDeclType	entitymodel *
>19828	ExpressionStatement	 
>19829	CallExpression	qglPushAttrib ( GL_ALL_ATTRIB_BITS )
>19830	ArgumentList	GL_ALL_ATTRIB_BITS
>19831	Argument	GL_ALL_ATTRIB_BITS
>19832	Identifier	GL_ALL_ATTRIB_BITS
>19833	Callee	qglPushAttrib
>19834	Identifier	qglPushAttrib
>19835	Condition	 
>19836	Identifier	pEclass
>19837	IdentifierDeclStatement	 
>19838	IdentifierDecl	* pEclass = HasModel ( b )
>19839	AssignmentExpr	* pEclass = HasModel ( b )
>19840	CallExpression	HasModel ( b )
>19841	ArgumentList	b
>19842	Argument	b
>19843	Identifier	b
>19844	Callee	HasModel
>19845	Identifier	HasModel
>19846	Identifier	pEclass
>19847	Identifier	pEclass
>19848	IdentifierDeclType	eclass_t *
>19849	IdentifierDeclStatement	 
>19850	IdentifierDecl	bReturn = false
>19851	AssignmentExpr	bReturn = false
>19852	Identifier	false
>19853	Identifier	false
>19854	Identifier	bReturn
>19855	IdentifierDeclType	bool
>19856	ExpressionStatement	 
>19857	AssignmentExpr	g_bInPaintedModel = true
>19858	Identifier	true
>19859	Identifier	g_bInPaintedModel
>19860	IfStatement	if ( g_PrefsDlg . m_nEntityShowState == ENTITY_BOX || b -> bModelFailed )
>19861	ElseStatement	else
>19862	IfStatement	if ( ! IsBrushSelected ( b ) && ( g_PrefsDlg . m_nEntityShowState & ENTITY_SELECTED_ONLY ) )
>19863	CompoundStatement	 
>19864	ReturnStatement	 
>19865	Identifier	false
>19866	Condition	 
>19867	AndExpression	! IsBrushSelected ( b ) && ( g_PrefsDlg . m_nEntityShowState & ENTITY_SELECTED_ONLY )
>19868	BitAndExpression	g_PrefsDlg . m_nEntityShowState & ENTITY_SELECTED_ONLY
>19869	Identifier	ENTITY_SELECTED_ONLY
>19870	MemberAccess	g_PrefsDlg . m_nEntityShowState
>19871	Identifier	m_nEntityShowState
>19872	Identifier	g_PrefsDlg
>19873	UnaryOp	! IsBrushSelected ( b )
>19874	CallExpression	IsBrushSelected ( b )
>19875	ArgumentList	b
>19876	Argument	b
>19877	Identifier	b
>19878	Callee	IsBrushSelected
>19879	Identifier	IsBrushSelected
>19880	UnaryOperator	!
>19881	CompoundStatement	 
>19882	ReturnStatement	 
>19883	Identifier	false
>19884	Condition	 
>19885	OrExpression	g_PrefsDlg . m_nEntityShowState == ENTITY_BOX || b -> bModelFailed
>19886	PtrMemberAccess	b -> bModelFailed
>19887	Identifier	bModelFailed
>19888	Identifier	b
>19889	EqualityExpression	g_PrefsDlg . m_nEntityShowState == ENTITY_BOX
>19890	Identifier	ENTITY_BOX
>19891	MemberAccess	g_PrefsDlg . m_nEntityShowState
>19892	Identifier	m_nEntityShowState
>19893	Identifier	g_PrefsDlg
>19894	IfStatement	if ( g_bInPaintedModel )
>19895	CompoundStatement	 
>19896	ReturnStatement	 
>19897	Identifier	true
>19898	Condition	 
>19899	Identifier	g_bInPaintedModel
>20001	FunctionDef	FacingVectors (entity_t * e , vec3_t forward , vec3_t right , vec3_t up)
>20002	ParameterList	entity_t * e , vec3_t forward , vec3_t right , vec3_t up
>20003	Parameter	 
>20004	Identifier	up
>20005	ParameterType	vec3_t
>20006	Parameter	 
>20007	Identifier	right
>20008	ParameterType	vec3_t
>20009	Parameter	 
>20010	Identifier	forward
>20011	ParameterType	vec3_t
>20012	Parameter	 
>20013	Identifier	e
>20014	ParameterType	entity_t *
>20015	ReturnType	void
>20016	CompoundStatement	 
>20017	ExpressionStatement	 
>20018	CallExpression	AngleVectors ( angles , forward , right , up )
>20019	ArgumentList	angles
>20020	Argument	up
>20021	Identifier	up
>20022	Argument	right
>20023	Identifier	right
>20024	Argument	forward
>20025	Identifier	forward
>20026	Argument	angles
>20027	Identifier	angles
>20028	Callee	AngleVectors
>20029	Identifier	AngleVectors
>20030	IfStatement	if ( angleVal == - 1 )
>20031	ElseStatement	else
>20032	IfStatement	if ( angleVal == - 2 )
>20033	ElseStatement	else
>20034	CompoundStatement	 
>20035	ExpressionStatement	 
>20036	CallExpression	VectorSet ( angles , 0 , angleVal , 0 )
>20037	ArgumentList	angles
>20038	Argument	0
>20039	PrimaryExpression	0
>20040	Argument	angleVal
>20041	Identifier	angleVal
>20042	Argument	0
>20043	PrimaryExpression	0
>20044	Argument	angles
>20045	Identifier	angles
>20046	Callee	VectorSet
>20047	Identifier	VectorSet
>20048	CompoundStatement	 
>20049	ExpressionStatement	 
>20050	CallExpression	VectorSet ( angles , 90 , 0 , 0 )
>20051	ArgumentList	angles
>20052	Argument	0
>20053	PrimaryExpression	0
>20054	Argument	0
>20055	PrimaryExpression	0
>20056	Argument	90
>20057	PrimaryExpression	90
>20058	Argument	angles
>20059	Identifier	angles
>20060	Callee	VectorSet
>20061	Identifier	VectorSet
>20062	Condition	 
>20063	EqualityExpression	angleVal == - 2
>20064	UnaryOp	- 2
>20065	PrimaryExpression	2
>20066	UnaryOperator	-
>20067	Identifier	angleVal
>20068	CompoundStatement	 
>20069	ExpressionStatement	 
>20070	CallExpression	VectorSet ( angles , 270 , 0 , 0 )
>20071	ArgumentList	angles
>20072	Argument	0
>20073	PrimaryExpression	0
>20074	Argument	0
>20075	PrimaryExpression	0
>20076	Argument	270
>20077	PrimaryExpression	270
>20078	Argument	angles
>20079	Identifier	angles
>20080	Callee	VectorSet
>20081	Identifier	VectorSet
>20082	Condition	 
>20083	EqualityExpression	angleVal == - 1
>20084	UnaryOp	- 1
>20085	PrimaryExpression	1
>20086	UnaryOperator	-
>20087	Identifier	angleVal
>20088	ExpressionStatement	 
>20089	AssignmentExpr	angleVal = IntForKey ( e , \"angle\" )
>20090	CallExpression	IntForKey ( e , \"angle\" )
>20091	ArgumentList	e
>20092	Argument	\"angle\"
>20093	PrimaryExpression	\"angle\"
>20094	Argument	e
>20095	Identifier	e
>20096	Callee	IntForKey
>20097	Identifier	IntForKey
>20098	Identifier	angleVal
>20099	IdentifierDeclStatement	 
>20100	IdentifierDecl	angles
>20101	Identifier	angles
>20102	IdentifierDeclType	vec3_t
>20103	IdentifierDeclStatement	 
>20104	IdentifierDecl	angleVal
>20105	Identifier	angleVal
>20106	IdentifierDeclType	int
>20117	FunctionDef	Brush_DrawFacingAngle (brush_t * b , entity_t * e)
>20118	ParameterList	brush_t * b , entity_t * e
>20119	Parameter	 
>20120	Identifier	e
>20121	ParameterType	entity_t *
>20122	Parameter	 
>20123	Identifier	b
>20124	ParameterType	brush_t *
>20125	ReturnType	void
>20126	CompoundStatement	 
>20127	ExpressionStatement	 
>20128	CallExpression	qglLineWidth ( 1 )
>20129	ArgumentList	1
>20130	Argument	1
>20131	PrimaryExpression	1
>20132	Callee	qglLineWidth
>20133	Identifier	qglLineWidth
>20134	ExpressionStatement	 
>20135	CallExpression	qglEnd ( )
>20136	ArgumentList	 
>20137	Callee	qglEnd
>20138	Identifier	qglEnd
>20139	ExpressionStatement	 
>20140	CallExpression	qglVertex3fv ( tip2 )
>20141	ArgumentList	tip2
>20142	Argument	tip2
>20143	Identifier	tip2
>20144	Callee	qglVertex3fv
>20145	Identifier	qglVertex3fv
>20146	ExpressionStatement	 
>20147	CallExpression	qglVertex3fv ( endpoint )
>20148	ArgumentList	endpoint
>20149	Argument	endpoint
>20150	Identifier	endpoint
>20151	Callee	qglVertex3fv
>20152	Identifier	qglVertex3fv
>20153	ExpressionStatement	 
>20154	CallExpression	qglVertex3fv ( tip1 )
>20155	ArgumentList	tip1
>20156	Argument	tip1
>20157	Identifier	tip1
>20158	Callee	qglVertex3fv
>20159	Identifier	qglVertex3fv
>20160	ExpressionStatement	 
>20161	CallExpression	qglVertex3fv ( endpoint )
>20162	ArgumentList	endpoint
>20163	Argument	endpoint
>20164	Identifier	endpoint
>20165	Callee	qglVertex3fv
>20166	Identifier	qglVertex3fv
>20167	ExpressionStatement	 
>20168	CallExpression	qglVertex3fv ( endpoint )
>20169	ArgumentList	endpoint
>20170	Argument	endpoint
>20171	Identifier	endpoint
>20172	Callee	qglVertex3fv
>20173	Identifier	qglVertex3fv
>20174	ExpressionStatement	 
>20175	CallExpression	qglVertex3fv ( start )
>20176	ArgumentList	start
>20177	Argument	start
>20178	Identifier	start
>20179	Callee	qglVertex3fv
>20180	Identifier	qglVertex3fv
>20181	ExpressionStatement	 
>20182	CallExpression	qglBegin ( GL_LINES )
>20183	ArgumentList	GL_LINES
>20184	Argument	GL_LINES
>20185	Identifier	GL_LINES
>20186	Callee	qglBegin
>20187	Identifier	qglBegin
>20188	ExpressionStatement	 
>20189	CallExpression	qglLineWidth ( 4 )
>20190	ArgumentList	4
>20191	Argument	4
>20192	PrimaryExpression	4
>20193	Callee	qglLineWidth
>20194	Identifier	qglLineWidth
>20195	ExpressionStatement	 
>20196	CallExpression	qglColor4f ( 1 , 1 , 1 , 1 )
>20197	ArgumentList	1
>20198	Argument	1
>20199	PrimaryExpression	1
>20200	Argument	1
>20201	PrimaryExpression	1
>20202	Argument	1
>20203	PrimaryExpression	1
>20204	Argument	1
>20205	PrimaryExpression	1
>20206	Callee	qglColor4f
>20207	Identifier	qglColor4f
>20208	ExpressionStatement	 
>20209	CallExpression	VectorMA ( tip1 , 2 * dist , up , tip2 )
>20210	ArgumentList	tip1
>20211	Argument	tip2
>20212	Identifier	tip2
>20213	Argument	up
>20214	Identifier	up
>20215	Argument	2 * dist
>20216	MultiplicativeExpression	2 * dist
>20217	Identifier	dist
>20218	PrimaryExpression	2
>20219	Argument	tip1
>20220	Identifier	tip1
>20221	Callee	VectorMA
>20222	Identifier	VectorMA
>20223	ExpressionStatement	 
>20224	CallExpression	VectorMA ( tip1 , - dist , up , tip1 )
>20225	ArgumentList	tip1
>20226	Argument	tip1
>20227	Identifier	tip1
>20228	Argument	up
>20229	Identifier	up
>20230	Argument	- dist
>20231	UnaryOp	- dist
>20232	Identifier	dist
>20233	UnaryOperator	-
>20234	Argument	tip1
>20235	Identifier	tip1
>20236	Callee	VectorMA
>20237	Identifier	VectorMA
>20238	ExpressionStatement	 
>20239	CallExpression	VectorMA ( endpoint , - dist , forward , tip1 )
>20240	ArgumentList	endpoint
>20241	Argument	tip1
>20242	Identifier	tip1
>20243	Argument	forward
>20244	Identifier	forward
>20245	Argument	- dist
>20246	UnaryOp	- dist
>20247	Identifier	dist
>20248	UnaryOperator	-
>20249	Argument	endpoint
>20250	Identifier	endpoint
>20251	Callee	VectorMA
>20252	Identifier	VectorMA
>20253	ExpressionStatement	 
>20254	AssignmentExpr	dist = ( b -> maxs [ 0 ] - start [ 0 ] ) * 0.5
>20255	MultiplicativeExpression	( b -> maxs [ 0 ] - start [ 0 ] ) * 0.5
>20256	PrimaryExpression	0.5
>20257	AdditiveExpression	b -> maxs [ 0 ] - start [ 0 ]
>20258	ArrayIndexing	start [ 0 ]
>20259	PrimaryExpression	0
>20260	Identifier	start
>20261	ArrayIndexing	b -> maxs [ 0 ]
>20262	PrimaryExpression	0
>20263	PtrMemberAccess	b -> maxs
>20264	Identifier	maxs
>20265	Identifier	b
>20266	Identifier	dist
>20267	ExpressionStatement	 
>20268	CallExpression	VectorMA ( start , dist , forward , endpoint )
>20269	ArgumentList	start
>20270	Argument	endpoint
>20271	Identifier	endpoint
>20272	Argument	forward
>20273	Identifier	forward
>20274	Argument	dist
>20275	Identifier	dist
>20276	Argument	start
>20277	Identifier	start
>20278	Callee	VectorMA
>20279	Identifier	VectorMA
>20280	ExpressionStatement	 
>20281	CallExpression	FacingVectors ( e , forward , right , up )
>20282	ArgumentList	e
>20283	Argument	up
>20284	Identifier	up
>20285	Argument	right
>20286	Identifier	right
>20287	Argument	forward
>20288	Identifier	forward
>20289	Argument	e
>20290	Identifier	e
>20291	Callee	FacingVectors
>20292	Identifier	FacingVectors
>20293	ExpressionStatement	 
>20294	AssignmentExpr	dist = ( b -> maxs [ 0 ] - start [ 0 ] ) * 2.5
>20295	MultiplicativeExpression	( b -> maxs [ 0 ] - start [ 0 ] ) * 2.5
>20296	PrimaryExpression	2.5
>20297	AdditiveExpression	b -> maxs [ 0 ] - start [ 0 ]
>20298	ArrayIndexing	start [ 0 ]
>20299	PrimaryExpression	0
>20300	Identifier	start
>20301	ArrayIndexing	b -> maxs [ 0 ]
>20302	PrimaryExpression	0
>20303	PtrMemberAccess	b -> maxs
>20304	Identifier	maxs
>20305	Identifier	b
>20306	Identifier	dist
>20307	ExpressionStatement	 
>20308	CallExpression	VectorScale ( start , 0.5 , start )
>20309	ArgumentList	start
>20310	Argument	start
>20311	Identifier	start
>20312	Argument	0.5
>20313	PrimaryExpression	0.5
>20314	Argument	start
>20315	Identifier	start
>20316	Callee	VectorScale
>20317	Identifier	VectorScale
>20318	ExpressionStatement	 
>20319	CallExpression	VectorAdd ( e -> brushes . onext -> mins , e -> brushes . onext -> maxs , start )
>20320	ArgumentList	e -> brushes . onext -> mins
>20321	Argument	start
>20322	Identifier	start
>20323	Argument	e -> brushes . onext -> maxs
>20324	PtrMemberAccess	e -> brushes . onext -> maxs
>20325	Identifier	maxs
>20326	MemberAccess	e -> brushes . onext
>20327	Identifier	onext
>20328	PtrMemberAccess	e -> brushes
>20329	Identifier	brushes
>20330	Identifier	e
>20331	Argument	e -> brushes . onext -> mins
>20332	PtrMemberAccess	e -> brushes . onext -> mins
>20333	Identifier	mins
>20334	MemberAccess	e -> brushes . onext
>20335	Identifier	onext
>20336	PtrMemberAccess	e -> brushes
>20337	Identifier	brushes
>20338	Identifier	e
>20339	Callee	VectorAdd
>20340	Identifier	VectorAdd
>20341	IdentifierDeclStatement	 
>20342	IdentifierDecl	dist
>20343	Identifier	dist
>20344	IdentifierDeclType	float
>20345	IdentifierDeclStatement	 
>20346	IdentifierDecl	start
>20347	Identifier	start
>20348	IdentifierDeclType	vec3_t
>20349	IdentifierDeclStatement	 
>20350	IdentifierDecl	tip2
>20351	Identifier	tip2
>20352	IdentifierDeclType	vec3_t
>20353	IdentifierDecl	tip1
>20354	Identifier	tip1
>20355	IdentifierDeclType	vec3_t
>20356	IdentifierDecl	endpoint
>20357	Identifier	endpoint
>20358	IdentifierDeclType	vec3_t
>20359	IdentifierDeclStatement	 
>20360	IdentifierDecl	up
>20361	Identifier	up
>20362	IdentifierDeclType	vec3_t
>20363	IdentifierDecl	right
>20364	Identifier	right
>20365	IdentifierDeclType	vec3_t
>20366	IdentifierDecl	forward
>20367	Identifier	forward
>20368	IdentifierDeclType	vec3_t
>20396	FunctionDef	DrawLight (brush_t * b)
>20397	ParameterList	brush_t * b
>20398	Parameter	 
>20399	Identifier	b
>20400	ParameterType	brush_t *
>20401	ReturnType	void
>20402	CompoundStatement	 
>20403	IfStatement	if ( str . GetLength ( ) > 0 )
>20404	CompoundStatement	 
>20405	ExpressionStatement	 
>20406	CallExpression	qglEnd ( )
>20407	ArgumentList	 
>20408	Callee	qglEnd
>20409	Identifier	qglEnd
>20410	ExpressionStatement	 
>20411	CallExpression	qglVertex3fv ( vTemp )
>20412	ArgumentList	vTemp
>20413	Argument	vTemp
>20414	Identifier	vTemp
>20415	Callee	qglVertex3fv
>20416	Identifier	qglVertex3fv
>20417	ExpressionStatement	 
>20418	CallExpression	qglVertex3fv ( b -> owner -> origin )
>20419	ArgumentList	b -> owner -> origin
>20420	Argument	b -> owner -> origin
>20421	PtrMemberAccess	b -> owner -> origin
>20422	Identifier	origin
>20423	PtrMemberAccess	b -> owner
>20424	Identifier	owner
>20425	Identifier	b
>20426	Callee	qglVertex3fv
>20427	Identifier	qglVertex3fv
>20428	ExpressionStatement	 
>20429	CallExpression	VectorSubtract ( vTemp , vRight , vTemp )
>20430	ArgumentList	vTemp
>20431	Argument	vTemp
>20432	Identifier	vTemp
>20433	Argument	vRight
>20434	Identifier	vRight
>20435	Argument	vTemp
>20436	Identifier	vTemp
>20437	Callee	VectorSubtract
>20438	Identifier	VectorSubtract
>20439	ExpressionStatement	 
>20440	CallExpression	VectorSubtract ( vTemp , vUp , vTemp )
>20441	ArgumentList	vTemp
>20442	Argument	vTemp
>20443	Identifier	vTemp
>20444	Argument	vUp
>20445	Identifier	vUp
>20446	Argument	vTemp
>20447	Identifier	vTemp
>20448	Callee	VectorSubtract
>20449	Identifier	VectorSubtract
>20450	ExpressionStatement	 
>20451	CallExpression	VectorAdd ( vTarget , b -> owner -> origin , vTemp )
>20452	ArgumentList	vTarget
>20453	Argument	vTemp
>20454	Identifier	vTemp
>20455	Argument	b -> owner -> origin
>20456	PtrMemberAccess	b -> owner -> origin
>20457	Identifier	origin
>20458	PtrMemberAccess	b -> owner
>20459	Identifier	owner
>20460	Identifier	b
>20461	Argument	vTarget
>20462	Identifier	vTarget
>20463	Callee	VectorAdd
>20464	Identifier	VectorAdd
>20465	ExpressionStatement	 
>20466	CallExpression	qglVertex3fv ( vTemp )
>20467	ArgumentList	vTemp
>20468	Argument	vTemp
>20469	Identifier	vTemp
>20470	Callee	qglVertex3fv
>20471	Identifier	qglVertex3fv
>20472	ExpressionStatement	 
>20473	CallExpression	qglVertex3fv ( b -> owner -> origin )
>20474	ArgumentList	b -> owner -> origin
>20475	Argument	b -> owner -> origin
>20476	PtrMemberAccess	b -> owner -> origin
>20477	Identifier	origin
>20478	PtrMemberAccess	b -> owner
>20479	Identifier	owner
>20480	Identifier	b
>20481	Callee	qglVertex3fv
>20482	Identifier	qglVertex3fv
>20483	ExpressionStatement	 
>20484	CallExpression	VectorSubtract ( vTemp , vUp , vTemp )
>20485	ArgumentList	vTemp
>20486	Argument	vTemp
>20487	Identifier	vTemp
>20488	Argument	vUp
>20489	Identifier	vUp
>20490	Argument	vTemp
>20491	Identifier	vTemp
>20492	Callee	VectorSubtract
>20493	Identifier	VectorSubtract
>20494	ExpressionStatement	 
>20495	CallExpression	VectorAdd ( vTemp , vRight , vTemp )
>20496	ArgumentList	vTemp
>20497	Argument	vTemp
>20498	Identifier	vTemp
>20499	Argument	vRight
>20500	Identifier	vRight
>20501	Argument	vTemp
>20502	Identifier	vTemp
>20503	Callee	VectorAdd
>20504	Identifier	VectorAdd
>20505	ExpressionStatement	 
>20506	CallExpression	VectorAdd ( vTarget , b -> owner -> origin , vTemp )
>20507	ArgumentList	vTarget
>20508	Argument	vTemp
>20509	Identifier	vTemp
>20510	Argument	b -> owner -> origin
>20511	PtrMemberAccess	b -> owner -> origin
>20512	Identifier	origin
>20513	PtrMemberAccess	b -> owner
>20514	Identifier	owner
>20515	Identifier	b
>20516	Argument	vTarget
>20517	Identifier	vTarget
>20518	Callee	VectorAdd
>20519	Identifier	VectorAdd
>20520	ExpressionStatement	 
>20521	CallExpression	qglVertex3fv ( vTemp )
>20522	ArgumentList	vTemp
>20523	Argument	vTemp
>20524	Identifier	vTemp
>20525	Callee	qglVertex3fv
>20526	Identifier	qglVertex3fv
>20527	ExpressionStatement	 
>20528	CallExpression	qglVertex3fv ( b -> owner -> origin )
>20529	ArgumentList	b -> owner -> origin
>20530	Argument	b -> owner -> origin
>20531	PtrMemberAccess	b -> owner -> origin
>20532	Identifier	origin
>20533	PtrMemberAccess	b -> owner
>20534	Identifier	owner
>20535	Identifier	b
>20536	Callee	qglVertex3fv
>20537	Identifier	qglVertex3fv
>20538	ExpressionStatement	 
>20539	CallExpression	VectorSubtract ( vTemp , vRight , vTemp )
>20540	ArgumentList	vTemp
>20541	Argument	vTemp
>20542	Identifier	vTemp
>20543	Argument	vRight
>20544	Identifier	vRight
>20545	Argument	vTemp
>20546	Identifier	vTemp
>20547	Callee	VectorSubtract
>20548	Identifier	VectorSubtract
>20549	ExpressionStatement	 
>20550	CallExpression	VectorAdd ( vTemp , vUp , vTemp )
>20551	ArgumentList	vTemp
>20552	Argument	vTemp
>20553	Identifier	vTemp
>20554	Argument	vUp
>20555	Identifier	vUp
>20556	Argument	vTemp
>20557	Identifier	vTemp
>20558	Callee	VectorAdd
>20559	Identifier	VectorAdd
>20560	ExpressionStatement	 
>20561	CallExpression	VectorAdd ( vTarget , b -> owner -> origin , vTemp )
>20562	ArgumentList	vTarget
>20563	Argument	vTemp
>20564	Identifier	vTemp
>20565	Argument	b -> owner -> origin
>20566	PtrMemberAccess	b -> owner -> origin
>20567	Identifier	origin
>20568	PtrMemberAccess	b -> owner
>20569	Identifier	owner
>20570	Identifier	b
>20571	Argument	vTarget
>20572	Identifier	vTarget
>20573	Callee	VectorAdd
>20574	Identifier	VectorAdd
>20575	ExpressionStatement	 
>20576	CallExpression	qglVertex3fv ( vTemp )
>20577	ArgumentList	vTemp
>20578	Argument	vTemp
>20579	Identifier	vTemp
>20580	Callee	qglVertex3fv
>20581	Identifier	qglVertex3fv
>20582	ExpressionStatement	 
>20583	CallExpression	qglVertex3fv ( b -> owner -> origin )
>20584	ArgumentList	b -> owner -> origin
>20585	Argument	b -> owner -> origin
>20586	PtrMemberAccess	b -> owner -> origin
>20587	Identifier	origin
>20588	PtrMemberAccess	b -> owner
>20589	Identifier	owner
>20590	Identifier	b
>20591	Callee	qglVertex3fv
>20592	Identifier	qglVertex3fv
>20593	ExpressionStatement	 
>20594	CallExpression	VectorAdd ( vTemp , vUp , vTemp )
>20595	ArgumentList	vTemp
>20596	Argument	vTemp
>20597	Identifier	vTemp
>20598	Argument	vUp
>20599	Identifier	vUp
>20600	Argument	vTemp
>20601	Identifier	vTemp
>20602	Callee	VectorAdd
>20603	Identifier	VectorAdd
>20604	ExpressionStatement	 
>20605	CallExpression	VectorAdd ( vTemp , vRight , vTemp )
>20606	ArgumentList	vTemp
>20607	Argument	vTemp
>20608	Identifier	vTemp
>20609	Argument	vRight
>20610	Identifier	vRight
>20611	Argument	vTemp
>20612	Identifier	vTemp
>20613	Callee	VectorAdd
>20614	Identifier	VectorAdd
>20615	ExpressionStatement	 
>20616	CallExpression	VectorAdd ( vTarget , b -> owner -> origin , vTemp )
>20617	ArgumentList	vTarget
>20618	Argument	vTemp
>20619	Identifier	vTemp
>20620	Argument	b -> owner -> origin
>20621	PtrMemberAccess	b -> owner -> origin
>20622	Identifier	origin
>20623	PtrMemberAccess	b -> owner
>20624	Identifier	owner
>20625	Identifier	b
>20626	Argument	vTarget
>20627	Identifier	vTarget
>20628	Callee	VectorAdd
>20629	Identifier	VectorAdd
>20630	ExpressionStatement	 
>20631	CallExpression	qglBegin ( GL_LINE_LOOP )
>20632	ArgumentList	GL_LINE_LOOP
>20633	Argument	GL_LINE_LOOP
>20634	Identifier	GL_LINE_LOOP
>20635	Callee	qglBegin
>20636	Identifier	qglBegin
>20637	ExpressionStatement	 
>20638	CallExpression	qglColor3f ( 0 , 1 , 0 )
>20639	ArgumentList	0
>20640	Argument	0
>20641	PrimaryExpression	0
>20642	Argument	1
>20643	PrimaryExpression	1
>20644	Argument	0
>20645	PrimaryExpression	0
>20646	Callee	qglColor3f
>20647	Identifier	qglColor3f
>20648	ExpressionStatement	 
>20649	CallExpression	GetVectorForKey ( b -> owner , \"light_target\" , vTarget )
>20650	ArgumentList	b -> owner
>20651	Argument	vTarget
>20652	Identifier	vTarget
>20653	Argument	\"light_target\"
>20654	PrimaryExpression	\"light_target\"
>20655	Argument	b -> owner
>20656	PtrMemberAccess	b -> owner
>20657	Identifier	owner
>20658	Identifier	b
>20659	Callee	GetVectorForKey
>20660	Identifier	GetVectorForKey
>20661	ExpressionStatement	 
>20662	CallExpression	GetVectorForKey ( b -> owner , \"light_up\" , vUp )
>20663	ArgumentList	b -> owner
>20664	Argument	vUp
>20665	Identifier	vUp
>20666	Argument	\"light_up\"
>20667	PrimaryExpression	\"light_up\"
>20668	Argument	b -> owner
>20669	PtrMemberAccess	b -> owner
>20670	Identifier	owner
>20671	Identifier	b
>20672	Callee	GetVectorForKey
>20673	Identifier	GetVectorForKey
>20674	ExpressionStatement	 
>20675	CallExpression	GetVectorForKey ( b -> owner , \"light_right\" , vRight )
>20676	ArgumentList	b -> owner
>20677	Argument	vRight
>20678	Identifier	vRight
>20679	Argument	\"light_right\"
>20680	PrimaryExpression	\"light_right\"
>20681	Argument	b -> owner
>20682	PtrMemberAccess	b -> owner
>20683	Identifier	owner
>20684	Identifier	b
>20685	Callee	GetVectorForKey
>20686	Identifier	GetVectorForKey
>20687	IdentifierDeclStatement	 
>20688	IdentifierDecl	vTemp
>20689	Identifier	vTemp
>20690	IdentifierDeclType	vec3_t
>20691	IdentifierDecl	vTarget
>20692	Identifier	vTarget
>20693	IdentifierDeclType	vec3_t
>20694	IdentifierDecl	vUp
>20695	Identifier	vUp
>20696	IdentifierDeclType	vec3_t
>20697	IdentifierDecl	vRight
>20698	Identifier	vRight
>20699	IdentifierDeclType	vec3_t
>20700	Condition	 
>20701	RelationalExpression	str . GetLength ( ) > 0
>20702	PrimaryExpression	0
>20703	CallExpression	str . GetLength ( )
>20704	ArgumentList	 
>20705	Callee	str . GetLength
>20706	MemberAccess	str . GetLength
>20707	Identifier	GetLength
>20708	Identifier	str
>20709	IdentifierDeclStatement	 
>20710	IdentifierDecl	str = ValueForKey ( b -> owner , \"light_right\" )
>20711	AssignmentExpr	str = ValueForKey ( b -> owner , \"light_right\" )
>20712	CallExpression	ValueForKey ( b -> owner , \"light_right\" )
>20713	ArgumentList	b -> owner
>20714	Argument	\"light_right\"
>20715	PrimaryExpression	\"light_right\"
>20716	Argument	b -> owner
>20717	PtrMemberAccess	b -> owner
>20718	Identifier	owner
>20719	Identifier	b
>20720	Callee	ValueForKey
>20721	Identifier	ValueForKey
>20722	Identifier	str
>20723	Identifier	str
>20724	IdentifierDeclType	CString
>20725	ExpressionStatement	 
>20726	CallExpression	qglEnd ( )
>20727	ArgumentList	 
>20728	Callee	qglEnd
>20729	Identifier	qglEnd
>20730	ForStatement	for ( i = 3 ; i >= 0 ; i -- )
>20731	CompoundStatement	 
>20732	ExpressionStatement	 
>20733	CallExpression	qglVertex3fv ( vCorners [ i ] )
>20734	ArgumentList	vCorners [ i ]
>20735	Argument	vCorners [ i ]
>20736	ArrayIndexing	vCorners [ i ]
>20737	Identifier	i
>20738	Identifier	vCorners
>20739	Callee	qglVertex3fv
>20740	Identifier	qglVertex3fv
>20741	ExpressionStatement	 
>20742	CallExpression	qglColor3f ( vTriColor [ 0 ] , vTriColor [ 1 ] , vTriColor [ 2 ] )
>20743	ArgumentList	vTriColor [ 0 ]
>20744	Argument	vTriColor [ 2 ]
>20745	ArrayIndexing	vTriColor [ 2 ]
>20746	PrimaryExpression	2
>20747	Identifier	vTriColor
>20748	Argument	vTriColor [ 1 ]
>20749	ArrayIndexing	vTriColor [ 1 ]
>20750	PrimaryExpression	1
>20751	Identifier	vTriColor
>20752	Argument	vTriColor [ 0 ]
>20753	ArrayIndexing	vTriColor [ 0 ]
>20754	PrimaryExpression	0
>20755	Identifier	vTriColor
>20756	Callee	qglColor3f
>20757	Identifier	qglColor3f
>20758	ExpressionStatement	 
>20759	AssignmentExpr	vTriColor [ 2 ] *= 0.95
>20760	PrimaryExpression	0.95
>20761	ArrayIndexing	vTriColor [ 2 ]
>20762	PrimaryExpression	2
>20763	Identifier	vTriColor
>20764	ExpressionStatement	 
>20765	AssignmentExpr	vTriColor [ 1 ] *= 0.95
>20766	PrimaryExpression	0.95
>20767	ArrayIndexing	vTriColor [ 1 ]
>20768	PrimaryExpression	1
>20769	Identifier	vTriColor
>20770	ExpressionStatement	 
>20771	AssignmentExpr	vTriColor [ 0 ] *= 0.95
>20772	PrimaryExpression	0.95
>20773	ArrayIndexing	vTriColor [ 0 ]
>20774	PrimaryExpression	0
>20775	Identifier	vTriColor
>20776	IncDecOp	 
>20777	IncDec	--
>20778	Identifier	i
>20779	Condition	 
>20780	RelationalExpression	i >= 0
>20781	PrimaryExpression	0
>20782	Identifier	i
>20783	ForInit	 
>20784	AssignmentExpr	i = 3
>20785	PrimaryExpression	3
>20786	Identifier	i
>20787	ExpressionStatement	 
>20788	CallExpression	qglVertex3fv ( vCorners [ 0 ] )
>20789	ArgumentList	vCorners [ 0 ]
>20790	Argument	vCorners [ 0 ]
>20791	ArrayIndexing	vCorners [ 0 ]
>20792	PrimaryExpression	0
>20793	Identifier	vCorners
>20794	Callee	qglVertex3fv
>20795	Identifier	qglVertex3fv
>20796	ExpressionStatement	 
>20797	CallExpression	qglVertex3fv ( vBottom )
>20798	ArgumentList	vBottom
>20799	Argument	vBottom
>20800	Identifier	vBottom
>20801	Callee	qglVertex3fv
>20802	Identifier	qglVertex3fv
>20803	ExpressionStatement	 
>20804	CallExpression	qglBegin ( GL_TRIANGLE_FAN )
>20805	ArgumentList	GL_TRIANGLE_FAN
>20806	Argument	GL_TRIANGLE_FAN
>20807	Identifier	GL_TRIANGLE_FAN
>20808	Callee	qglBegin
>20809	Identifier	qglBegin
>20810	ExpressionStatement	 
>20811	AssignmentExpr	vTriColor [ 2 ] *= 0.95
>20812	PrimaryExpression	0.95
>20813	ArrayIndexing	vTriColor [ 2 ]
>20814	PrimaryExpression	2
>20815	Identifier	vTriColor
>20816	ExpressionStatement	 
>20817	AssignmentExpr	vTriColor [ 1 ] *= 0.95
>20818	PrimaryExpression	0.95
>20819	ArrayIndexing	vTriColor [ 1 ]
>20820	PrimaryExpression	1
>20821	Identifier	vTriColor
>20822	ExpressionStatement	 
>20823	AssignmentExpr	vTriColor [ 0 ] *= 0.95
>20824	PrimaryExpression	0.95
>20825	ArrayIndexing	vTriColor [ 0 ]
>20826	PrimaryExpression	0
>20827	Identifier	vTriColor
>20828	ExpressionStatement	 
>20829	CallExpression	VectorCopy ( vSave , vTriColor )
>20830	ArgumentList	vSave
>20831	Argument	vTriColor
>20832	Identifier	vTriColor
>20833	Argument	vSave
>20834	Identifier	vSave
>20835	Callee	VectorCopy
>20836	Identifier	VectorCopy
>20837	ExpressionStatement	 
>20838	CallExpression	qglEnd ( )
>20839	ArgumentList	 
>20840	Callee	qglEnd
>20841	Identifier	qglEnd
>20842	ExpressionStatement	 
>20843	CallExpression	qglVertex3fv ( vCorners [ 0 ] )
>20844	ArgumentList	vCorners [ 0 ]
>20845	Argument	vCorners [ 0 ]
>20846	ArrayIndexing	vCorners [ 0 ]
>20847	PrimaryExpression	0
>20848	Identifier	vCorners
>20849	Callee	qglVertex3fv
>20850	Identifier	qglVertex3fv
>20851	ForStatement	for ( int i = 0 ; i <= 3 ; i ++ )
>20852	CompoundStatement	 
>20853	ExpressionStatement	 
>20854	CallExpression	qglVertex3fv ( vCorners [ i ] )
>20855	ArgumentList	vCorners [ i ]
>20856	Argument	vCorners [ i ]
>20857	ArrayIndexing	vCorners [ i ]
>20858	Identifier	i
>20859	Identifier	vCorners
>20860	Callee	qglVertex3fv
>20861	Identifier	qglVertex3fv
>20862	ExpressionStatement	 
>20863	CallExpression	qglColor3f ( vTriColor [ 0 ] , vTriColor [ 1 ] , vTriColor [ 2 ] )
>20864	ArgumentList	vTriColor [ 0 ]
>20865	Argument	vTriColor [ 2 ]
>20866	ArrayIndexing	vTriColor [ 2 ]
>20867	PrimaryExpression	2
>20868	Identifier	vTriColor
>20869	Argument	vTriColor [ 1 ]
>20870	ArrayIndexing	vTriColor [ 1 ]
>20871	PrimaryExpression	1
>20872	Identifier	vTriColor
>20873	Argument	vTriColor [ 0 ]
>20874	ArrayIndexing	vTriColor [ 0 ]
>20875	PrimaryExpression	0
>20876	Identifier	vTriColor
>20877	Callee	qglColor3f
>20878	Identifier	qglColor3f
>20879	ExpressionStatement	 
>20880	AssignmentExpr	vTriColor [ 2 ] *= 0.95
>20881	PrimaryExpression	0.95
>20882	ArrayIndexing	vTriColor [ 2 ]
>20883	PrimaryExpression	2
>20884	Identifier	vTriColor
>20885	ExpressionStatement	 
>20886	AssignmentExpr	vTriColor [ 1 ] *= 0.95
>20887	PrimaryExpression	0.95
>20888	ArrayIndexing	vTriColor [ 1 ]
>20889	PrimaryExpression	1
>20890	Identifier	vTriColor
>20891	ExpressionStatement	 
>20892	AssignmentExpr	vTriColor [ 0 ] *= 0.95
>20893	PrimaryExpression	0.95
>20894	ArrayIndexing	vTriColor [ 0 ]
>20895	PrimaryExpression	0
>20896	Identifier	vTriColor
>20897	IncDecOp	 
>20898	IncDec	++
>20899	Identifier	i
>20900	Condition	 
>20901	RelationalExpression	i <= 3
>20902	PrimaryExpression	3
>20903	Identifier	i
>20904	ForInit	 
>20905	IdentifierDeclStatement	int i = 0 ;
>20906	IdentifierDecl	i = 0
>20907	AssignmentExpr	i = 0
>20908	PrimaryExpression	0
>20909	Identifier	i
>20910	Identifier	i
>20911	IdentifierDeclType	int
>20912	ExpressionStatement	 
>20913	CallExpression	qglVertex3fv ( vTop )
>20914	ArgumentList	vTop
>20915	Argument	vTop
>20916	Identifier	vTop
>20917	Callee	qglVertex3fv
>20918	Identifier	qglVertex3fv
>20919	ExpressionStatement	 
>20920	CallExpression	qglBegin ( GL_TRIANGLE_FAN )
>20921	ArgumentList	GL_TRIANGLE_FAN
>20922	Argument	GL_TRIANGLE_FAN
>20923	Identifier	GL_TRIANGLE_FAN
>20924	Callee	qglBegin
>20925	Identifier	qglBegin
>20926	ExpressionStatement	 
>20927	CallExpression	VectorCopy ( vTriColor , vSave )
>20928	ArgumentList	vTriColor
>20929	Argument	vSave
>20930	Identifier	vSave
>20931	Argument	vTriColor
>20932	Identifier	vTriColor
>20933	Callee	VectorCopy
>20934	Identifier	VectorCopy
>20935	IdentifierDeclStatement	 
>20936	IdentifierDecl	vSave
>20937	Identifier	vSave
>20938	IdentifierDeclType	vec3_t
>20939	ExpressionStatement	 
>20940	AssignmentExpr	vBottom [ 2 ] = b -> mins [ 2 ]
>20941	ArrayIndexing	b -> mins [ 2 ]
>20942	PrimaryExpression	2
>20943	PtrMemberAccess	b -> mins
>20944	Identifier	mins
>20945	Identifier	b
>20946	ArrayIndexing	vBottom [ 2 ]
>20947	PrimaryExpression	2
>20948	Identifier	vBottom
>20949	ExpressionStatement	 
>20950	CallExpression	VectorCopy ( vTop , vBottom )
>20951	ArgumentList	vTop
>20952	Argument	vBottom
>20953	Identifier	vBottom
>20954	Argument	vTop
>20955	Identifier	vTop
>20956	Callee	VectorCopy
>20957	Identifier	VectorCopy
>20958	ExpressionStatement	 
>20959	AssignmentExpr	vTop [ 2 ] = b -> maxs [ 2 ]
>20960	ArrayIndexing	b -> maxs [ 2 ]
>20961	PrimaryExpression	2
>20962	PtrMemberAccess	b -> maxs
>20963	Identifier	maxs
>20964	Identifier	b
>20965	ArrayIndexing	vTop [ 2 ]
>20966	PrimaryExpression	2
>20967	Identifier	vTop
>20968	ExpressionStatement	 
>20969	AssignmentExpr	vTop [ 1 ] = b -> mins [ 1 ] + ( ( b -> maxs [ 1 ] - b -> mins [ 1 ] ) / 2 )
>20970	AdditiveExpression	b -> mins [ 1 ] + ( ( b -> maxs [ 1 ] - b -> mins [ 1 ] ) / 2 )
>20971	MultiplicativeExpression	( b -> maxs [ 1 ] - b -> mins [ 1 ] ) / 2
>20972	PrimaryExpression	2
>20973	AdditiveExpression	b -> maxs [ 1 ] - b -> mins [ 1 ]
>20974	ArrayIndexing	b -> mins [ 1 ]
>20975	PrimaryExpression	1
>20976	PtrMemberAccess	b -> mins
>20977	Identifier	mins
>20978	Identifier	b
>20979	ArrayIndexing	b -> maxs [ 1 ]
>20980	PrimaryExpression	1
>20981	PtrMemberAccess	b -> maxs
>20982	Identifier	maxs
>20983	Identifier	b
>20984	ArrayIndexing	b -> mins [ 1 ]
>20985	PrimaryExpression	1
>20986	PtrMemberAccess	b -> mins
>20987	Identifier	mins
>20988	Identifier	b
>20989	ArrayIndexing	vTop [ 1 ]
>20990	PrimaryExpression	1
>20991	Identifier	vTop
>20992	ExpressionStatement	 
>20993	AssignmentExpr	vTop [ 0 ] = b -> mins [ 0 ] + ( ( b -> maxs [ 0 ] - b -> mins [ 0 ] ) / 2 )
>20994	AdditiveExpression	b -> mins [ 0 ] + ( ( b -> maxs [ 0 ] - b -> mins [ 0 ] ) / 2 )
>20995	MultiplicativeExpression	( b -> maxs [ 0 ] - b -> mins [ 0 ] ) / 2
>20996	PrimaryExpression	2
>20997	AdditiveExpression	b -> maxs [ 0 ] - b -> mins [ 0 ]
>20998	ArrayIndexing	b -> mins [ 0 ]
>20999	PrimaryExpression	0
>21000	PtrMemberAccess	b -> mins
>21001	Identifier	mins
>21002	Identifier	b
>21003	ArrayIndexing	b -> maxs [ 0 ]
>21004	PrimaryExpression	0
>21005	PtrMemberAccess	b -> maxs
>21006	Identifier	maxs
>21007	Identifier	b
>21008	ArrayIndexing	b -> mins [ 0 ]
>21009	PrimaryExpression	0
>21010	PtrMemberAccess	b -> mins
>21011	Identifier	mins
>21012	Identifier	b
>21013	ArrayIndexing	vTop [ 0 ]
>21014	PrimaryExpression	0
>21015	Identifier	vTop
>21016	IdentifierDeclStatement	 
>21017	IdentifierDecl	vBottom
>21018	Identifier	vBottom
>21019	IdentifierDeclType	vec3_t
>21020	IdentifierDecl	vTop
>21021	Identifier	vTop
>21022	IdentifierDeclType	vec3_t
>21023	ExpressionStatement	 
>21024	AssignmentExpr	vCorners [ 3 ] [ 2 ] = fMid
>21025	Identifier	fMid
>21026	ArrayIndexing	vCorners [ 3 ] [ 2 ]
>21027	PrimaryExpression	2
>21028	ArrayIndexing	vCorners [ 3 ]
>21029	PrimaryExpression	3
>21030	Identifier	vCorners
>21031	ExpressionStatement	 
>21032	AssignmentExpr	vCorners [ 3 ] [ 1 ] = b -> mins [ 1 ]
>21033	ArrayIndexing	b -> mins [ 1 ]
>21034	PrimaryExpression	1
>21035	PtrMemberAccess	b -> mins
>21036	Identifier	mins
>21037	Identifier	b
>21038	ArrayIndexing	vCorners [ 3 ] [ 1 ]
>21039	PrimaryExpression	1
>21040	ArrayIndexing	vCorners [ 3 ]
>21041	PrimaryExpression	3
>21042	Identifier	vCorners
>21043	ExpressionStatement	 
>21044	AssignmentExpr	vCorners [ 3 ] [ 0 ] = b -> maxs [ 0 ]
>21045	ArrayIndexing	b -> maxs [ 0 ]
>21046	PrimaryExpression	0
>21047	PtrMemberAccess	b -> maxs
>21048	Identifier	maxs
>21049	Identifier	b
>21050	ArrayIndexing	vCorners [ 3 ] [ 0 ]
>21051	PrimaryExpression	0
>21052	ArrayIndexing	vCorners [ 3 ]
>21053	PrimaryExpression	3
>21054	Identifier	vCorners
>21055	ExpressionStatement	 
>21056	AssignmentExpr	vCorners [ 2 ] [ 2 ] = fMid
>21057	Identifier	fMid
>21058	ArrayIndexing	vCorners [ 2 ] [ 2 ]
>21059	PrimaryExpression	2
>21060	ArrayIndexing	vCorners [ 2 ]
>21061	PrimaryExpression	2
>21062	Identifier	vCorners
>21063	ExpressionStatement	 
>21064	AssignmentExpr	vCorners [ 2 ] [ 1 ] = b -> maxs [ 1 ]
>21065	ArrayIndexing	b -> maxs [ 1 ]
>21066	PrimaryExpression	1
>21067	PtrMemberAccess	b -> maxs
>21068	Identifier	maxs
>21069	Identifier	b
>21070	ArrayIndexing	vCorners [ 2 ] [ 1 ]
>21071	PrimaryExpression	1
>21072	ArrayIndexing	vCorners [ 2 ]
>21073	PrimaryExpression	2
>21074	Identifier	vCorners
>21075	ExpressionStatement	 
>21076	AssignmentExpr	vCorners [ 2 ] [ 0 ] = b -> maxs [ 0 ]
>21077	ArrayIndexing	b -> maxs [ 0 ]
>21078	PrimaryExpression	0
>21079	PtrMemberAccess	b -> maxs
>21080	Identifier	maxs
>21081	Identifier	b
>21082	ArrayIndexing	vCorners [ 2 ] [ 0 ]
>21083	PrimaryExpression	0
>21084	ArrayIndexing	vCorners [ 2 ]
>21085	PrimaryExpression	2
>21086	Identifier	vCorners
>21087	ExpressionStatement	 
>21088	AssignmentExpr	vCorners [ 1 ] [ 2 ] = fMid
>21089	Identifier	fMid
>21090	ArrayIndexing	vCorners [ 1 ] [ 2 ]
>21091	PrimaryExpression	2
>21092	ArrayIndexing	vCorners [ 1 ]
>21093	PrimaryExpression	1
>21094	Identifier	vCorners
>21095	ExpressionStatement	 
>21096	AssignmentExpr	vCorners [ 1 ] [ 1 ] = b -> maxs [ 1 ]
>21097	ArrayIndexing	b -> maxs [ 1 ]
>21098	PrimaryExpression	1
>21099	PtrMemberAccess	b -> maxs
>21100	Identifier	maxs
>21101	Identifier	b
>21102	ArrayIndexing	vCorners [ 1 ] [ 1 ]
>21103	PrimaryExpression	1
>21104	ArrayIndexing	vCorners [ 1 ]
>21105	PrimaryExpression	1
>21106	Identifier	vCorners
>21107	ExpressionStatement	 
>21108	AssignmentExpr	vCorners [ 1 ] [ 0 ] = b -> mins [ 0 ]
>21109	ArrayIndexing	b -> mins [ 0 ]
>21110	PrimaryExpression	0
>21111	PtrMemberAccess	b -> mins
>21112	Identifier	mins
>21113	Identifier	b
>21114	ArrayIndexing	vCorners [ 1 ] [ 0 ]
>21115	PrimaryExpression	0
>21116	ArrayIndexing	vCorners [ 1 ]
>21117	PrimaryExpression	1
>21118	Identifier	vCorners
>21119	ExpressionStatement	 
>21120	AssignmentExpr	vCorners [ 0 ] [ 2 ] = fMid
>21121	Identifier	fMid
>21122	ArrayIndexing	vCorners [ 0 ] [ 2 ]
>21123	PrimaryExpression	2
>21124	ArrayIndexing	vCorners [ 0 ]
>21125	PrimaryExpression	0
>21126	Identifier	vCorners
>21127	ExpressionStatement	 
>21128	AssignmentExpr	vCorners [ 0 ] [ 1 ] = b -> mins [ 1 ]
>21129	ArrayIndexing	b -> mins [ 1 ]
>21130	PrimaryExpression	1
>21131	PtrMemberAccess	b -> mins
>21132	Identifier	mins
>21133	Identifier	b
>21134	ArrayIndexing	vCorners [ 0 ] [ 1 ]
>21135	PrimaryExpression	1
>21136	ArrayIndexing	vCorners [ 0 ]
>21137	PrimaryExpression	0
>21138	Identifier	vCorners
>21139	ExpressionStatement	 
>21140	AssignmentExpr	vCorners [ 0 ] [ 0 ] = b -> mins [ 0 ]
>21141	ArrayIndexing	b -> mins [ 0 ]
>21142	PrimaryExpression	0
>21143	PtrMemberAccess	b -> mins
>21144	Identifier	mins
>21145	Identifier	b
>21146	ArrayIndexing	vCorners [ 0 ] [ 0 ]
>21147	PrimaryExpression	0
>21148	ArrayIndexing	vCorners [ 0 ]
>21149	PrimaryExpression	0
>21150	Identifier	vCorners
>21151	IdentifierDeclStatement	 
>21152	IdentifierDecl	fMid = b -> mins [ 2 ] + ( b -> maxs [ 2 ] - b -> mins [ 2 ] ) / 2
>21153	AssignmentExpr	fMid = b -> mins [ 2 ] + ( b -> maxs [ 2 ] - b -> mins [ 2 ] ) / 2
>21154	AdditiveExpression	b -> mins [ 2 ] + ( b -> maxs [ 2 ] - b -> mins [ 2 ] ) / 2
>21155	MultiplicativeExpression	( b -> maxs [ 2 ] - b -> mins [ 2 ] ) / 2
>21156	PrimaryExpression	2
>21157	AdditiveExpression	b -> maxs [ 2 ] - b -> mins [ 2 ]
>21158	ArrayIndexing	b -> mins [ 2 ]
>21159	PrimaryExpression	2
>21160	PtrMemberAccess	b -> mins
>21161	Identifier	mins
>21162	Identifier	b
>21163	ArrayIndexing	b -> maxs [ 2 ]
>21164	PrimaryExpression	2
>21165	PtrMemberAccess	b -> maxs
>21166	Identifier	maxs
>21167	Identifier	b
>21168	ArrayIndexing	b -> mins [ 2 ]
>21169	PrimaryExpression	2
>21170	PtrMemberAccess	b -> mins
>21171	Identifier	mins
>21172	Identifier	b
>21173	Identifier	fMid
>21174	Identifier	fMid
>21175	IdentifierDeclType	float
>21176	IdentifierDeclStatement	 
>21177	IdentifierDecl	vCorners [ 4 ]
>21178	PrimaryExpression	4
>21179	Identifier	vCorners
>21180	IdentifierDeclType	vec3_t [ 4 ]
>21181	ExpressionStatement	 
>21182	CallExpression	qglColor3f ( vTriColor [ 0 ] , vTriColor [ 1 ] , vTriColor [ 2 ] )
>21183	ArgumentList	vTriColor [ 0 ]
>21184	Argument	vTriColor [ 2 ]
>21185	ArrayIndexing	vTriColor [ 2 ]
>21186	PrimaryExpression	2
>21187	Identifier	vTriColor
>21188	Argument	vTriColor [ 1 ]
>21189	ArrayIndexing	vTriColor [ 1 ]
>21190	PrimaryExpression	1
>21191	Identifier	vTriColor
>21192	Argument	vTriColor [ 0 ]
>21193	ArrayIndexing	vTriColor [ 0 ]
>21194	PrimaryExpression	0
>21195	Identifier	vTriColor
>21196	Callee	qglColor3f
>21197	Identifier	qglColor3f
>21198	IfStatement	if ( strColor . GetLength ( ) > 0 )
>21199	CompoundStatement	 
>21200	IfStatement	if ( n == 3 )
>21201	CompoundStatement	 
>21202	ExpressionStatement	 
>21203	AssignmentExpr	vTriColor [ 2 ] = fB
>21204	Identifier	fB
>21205	ArrayIndexing	vTriColor [ 2 ]
>21206	PrimaryExpression	2
>21207	Identifier	vTriColor
>21208	ExpressionStatement	 
>21209	AssignmentExpr	vTriColor [ 1 ] = fG
>21210	Identifier	fG
>21211	ArrayIndexing	vTriColor [ 1 ]
>21212	PrimaryExpression	1
>21213	Identifier	vTriColor
>21214	ExpressionStatement	 
>21215	AssignmentExpr	vTriColor [ 0 ] = fR
>21216	Identifier	fR
>21217	ArrayIndexing	vTriColor [ 0 ]
>21218	PrimaryExpression	0
>21219	Identifier	vTriColor
>21220	Condition	 
>21221	EqualityExpression	n == 3
>21222	PrimaryExpression	3
>21223	Identifier	n
>21224	IdentifierDeclStatement	 
>21225	IdentifierDecl	n = sscanf ( strColor , \"%f %f %f\" , & fR , & fG , & fB )
>21226	AssignmentExpr	n = sscanf ( strColor , \"%f %f %f\" , & fR , & fG , & fB )
>21227	CallExpression	sscanf ( strColor , \"%f %f %f\" , & fR , & fG , & fB )
>21228	ArgumentList	strColor
>21229	Argument	& fB
>21230	UnaryOp	& fB
>21231	Identifier	fB
>21232	UnaryOperator	&
>21233	Argument	& fG
>21234	UnaryOp	& fG
>21235	Identifier	fG
>21236	UnaryOperator	&
>21237	Argument	& fR
>21238	UnaryOp	& fR
>21239	Identifier	fR
>21240	UnaryOperator	&
>21241	Argument	\"%f %f %f\"
>21242	PrimaryExpression	\"%f %f %f\"
>21243	Argument	strColor
>21244	Identifier	strColor
>21245	Callee	sscanf
>21246	Identifier	sscanf
>21247	Identifier	n
>21248	Identifier	n
>21249	IdentifierDeclType	int
>21250	IdentifierDeclStatement	 
>21251	IdentifierDecl	fB
>21252	Identifier	fB
>21253	IdentifierDeclType	float
>21254	IdentifierDecl	fG
>21255	Identifier	fG
>21256	IdentifierDeclType	float
>21257	IdentifierDecl	fR
>21258	Identifier	fR
>21259	IdentifierDeclType	float
>21260	Condition	 
>21261	RelationalExpression	strColor . GetLength ( ) > 0
>21262	PrimaryExpression	0
>21263	CallExpression	strColor . GetLength ( )
>21264	ArgumentList	 
>21265	Callee	strColor . GetLength
>21266	MemberAccess	strColor . GetLength
>21267	Identifier	GetLength
>21268	Identifier	strColor
>21269	IdentifierDeclStatement	 
>21270	IdentifierDecl	strColor = ValueForKey ( b -> owner , \"_color\" )
>21271	AssignmentExpr	strColor = ValueForKey ( b -> owner , \"_color\" )
>21272	CallExpression	ValueForKey ( b -> owner , \"_color\" )
>21273	ArgumentList	b -> owner
>21274	Argument	\"_color\"
>21275	PrimaryExpression	\"_color\"
>21276	Argument	b -> owner
>21277	PtrMemberAccess	b -> owner
>21278	Identifier	owner
>21279	Identifier	b
>21280	Callee	ValueForKey
>21281	Identifier	ValueForKey
>21282	Identifier	strColor
>21283	Identifier	strColor
>21284	IdentifierDeclType	CString
>21285	ExpressionStatement	 
>21286	AssignmentExpr	bTriPaint = true
>21287	Identifier	true
>21288	Identifier	bTriPaint
>21289	ExpressionStatement	 
>21290	AssignmentExpr	vTriColor [ 1 ] = 1.0
>21291	PrimaryExpression	1.0
>21292	ArrayIndexing	vTriColor [ 1 ]
>21293	PrimaryExpression	1
>21294	Identifier	vTriColor
>21295	ExpressionStatement	 
>21296	AssignmentExpr	vTriColor [ 0 ] = vTriColor [ 2 ] = 1.0
>21297	AssignmentExpr	vTriColor [ 2 ] = 1.0
>21298	PrimaryExpression	1.0
>21299	ArrayIndexing	vTriColor [ 2 ]
>21300	PrimaryExpression	2
>21301	Identifier	vTriColor
>21302	ArrayIndexing	vTriColor [ 0 ]
>21303	PrimaryExpression	0
>21304	Identifier	vTriColor
>21305	IdentifierDeclStatement	 
>21306	IdentifierDecl	bTriPaint = false
>21307	AssignmentExpr	bTriPaint = false
>21308	Identifier	false
>21309	Identifier	false
>21310	Identifier	bTriPaint
>21311	IdentifierDeclType	bool
>21312	IdentifierDeclStatement	 
>21313	IdentifierDecl	vTriColor
>21314	Identifier	vTriColor
>21315	IdentifierDeclType	vec3_t
>21364	FunctionDef	Brush_Draw (brush_t * b)
>21365	ParameterList	brush_t * b
>21366	Parameter	 
>21367	Identifier	b
>21368	ParameterType	brush_t *
>21369	ReturnType	void
>21370	CompoundStatement	 
>21371	ExpressionStatement	 
>21372	CallExpression	qglBindTexture ( GL_TEXTURE_2D , 0 )
>21373	ArgumentList	GL_TEXTURE_2D
>21374	Argument	0
>21375	PrimaryExpression	0
>21376	Argument	GL_TEXTURE_2D
>21377	Identifier	GL_TEXTURE_2D
>21378	Callee	qglBindTexture
>21379	Identifier	qglBindTexture
>21380	IfStatement	if ( b -> owner -> eclass -> fixedsize && ( nDrawMode == cd_texture || nDrawMode == cd_light ) )
>21381	ExpressionStatement	 
>21382	CallExpression	qglEnable ( GL_TEXTURE_2D )
>21383	ArgumentList	GL_TEXTURE_2D
>21384	Argument	GL_TEXTURE_2D
>21385	Identifier	GL_TEXTURE_2D
>21386	Callee	qglEnable
>21387	Identifier	qglEnable
>21388	Condition	 
>21389	AndExpression	b -> owner -> eclass -> fixedsize && ( nDrawMode == cd_texture || nDrawMode == cd_light )
>21390	OrExpression	nDrawMode == cd_texture || nDrawMode == cd_light
>21391	EqualityExpression	nDrawMode == cd_light
>21392	Identifier	cd_light
>21393	Identifier	nDrawMode
>21394	EqualityExpression	nDrawMode == cd_texture
>21395	Identifier	cd_texture
>21396	Identifier	nDrawMode
>21397	PtrMemberAccess	b -> owner -> eclass -> fixedsize
>21398	Identifier	fixedsize
>21399	PtrMemberAccess	b -> owner -> eclass
>21400	Identifier	eclass
>21401	PtrMemberAccess	b -> owner
>21402	Identifier	owner
>21403	Identifier	b
>21404	IfStatement	if ( b -> alphaBrush )
>21405	CompoundStatement	 
>21406	ExpressionStatement	 
>21407	CallExpression	qglEnable ( GL_CULL_FACE )
>21408	ArgumentList	GL_CULL_FACE
>21409	Argument	GL_CULL_FACE
>21410	Identifier	GL_CULL_FACE
>21411	Callee	qglEnable
>21412	Identifier	qglEnable
>21413	Condition	 
>21414	PtrMemberAccess	b -> alphaBrush
>21415	Identifier	alphaBrush
>21416	Identifier	b
>21417	ForStatement	for ( face = b -> brush_faces , order = 0 ; face ; face = face -> next , order ++ )
>21418	CompoundStatement	 
>21419	ExpressionStatement	 
>21420	CallExpression	qglEnd ( )
>21421	ArgumentList	 
>21422	Callee	qglEnd
>21423	Identifier	qglEnd
>21424	ForStatement	for ( i = 0 ; i < w -> numpoints ; i ++ )
>21425	CompoundStatement	 
>21426	ExpressionStatement	 
>21427	CallExpression	qglVertex3fv ( w -> points [ i ] )
>21428	ArgumentList	w -> points [ i ]
>21429	Argument	w -> points [ i ]
>21430	ArrayIndexing	w -> points [ i ]
>21431	Identifier	i
>21432	PtrMemberAccess	w -> points
>21433	Identifier	points
>21434	Identifier	w
>21435	Callee	qglVertex3fv
>21436	Identifier	qglVertex3fv
>21437	IfStatement	if ( nDrawMode == cd_texture || nDrawMode == cd_light )
>21438	ExpressionStatement	 
>21439	CallExpression	qglTexCoord2fv ( & w -> points [ i ] [ 3 ] )
>21440	ArgumentList	& w -> points [ i ] [ 3 ]
>21441	Argument	& w -> points [ i ] [ 3 ]
>21442	UnaryOp	& w -> points [ i ] [ 3 ]
>21443	ArrayIndexing	w -> points [ i ] [ 3 ]
>21444	PrimaryExpression	3
>21445	ArrayIndexing	w -> points [ i ]
>21446	Identifier	i
>21447	PtrMemberAccess	w -> points
>21448	Identifier	points
>21449	Identifier	w
>21450	UnaryOperator	&
>21451	Callee	qglTexCoord2fv
>21452	Identifier	qglTexCoord2fv
>21453	Condition	 
>21454	OrExpression	nDrawMode == cd_texture || nDrawMode == cd_light
>21455	EqualityExpression	nDrawMode == cd_light
>21456	Identifier	cd_light
>21457	Identifier	nDrawMode
>21458	EqualityExpression	nDrawMode == cd_texture
>21459	Identifier	cd_texture
>21460	Identifier	nDrawMode
>21461	IncDecOp	 
>21462	IncDec	++
>21463	Identifier	i
>21464	Condition	 
>21465	RelationalExpression	i < w -> numpoints
>21466	PtrMemberAccess	w -> numpoints
>21467	Identifier	numpoints
>21468	Identifier	w
>21469	Identifier	i
>21470	ForInit	 
>21471	AssignmentExpr	i = 0
>21472	PrimaryExpression	0
>21473	Identifier	i
>21474	ExpressionStatement	 
>21475	CallExpression	qglBegin ( GL_POLYGON )
>21476	ArgumentList	GL_POLYGON
>21477	Argument	GL_POLYGON
>21478	Identifier	GL_POLYGON
>21479	Callee	qglBegin
>21480	Identifier	qglBegin
>21481	IfStatement	if ( g_PrefsDlg . m_bGLLighting )
>21482	CompoundStatement	 
>21483	ExpressionStatement	 
>21484	CallExpression	qglNormal3fv ( face -> plane . normal )
>21485	ArgumentList	face -> plane . normal
>21486	Argument	face -> plane . normal
>21487	MemberAccess	face -> plane . normal
>21488	Identifier	normal
>21489	PtrMemberAccess	face -> plane
>21490	Identifier	plane
>21491	Identifier	face
>21492	Callee	qglNormal3fv
>21493	Identifier	qglNormal3fv
>21494	Condition	 
>21495	MemberAccess	g_PrefsDlg . m_bGLLighting
>21496	Identifier	m_bGLLighting
>21497	Identifier	g_PrefsDlg
>21498	IfStatement	if ( face -> d_texture -> bFromShader )
>21499	CompoundStatement	 
>21500	ExpressionStatement	 
>21501	CallExpression	qglColor4f ( face -> d_color [ 0 ] , face -> d_color [ 1 ] , face -> d_color [ 2 ] , face -> d_texture -> fTrans )
>21502	ArgumentList	face -> d_color [ 0 ]
>21503	Argument	face -> d_texture -> fTrans
>21504	PtrMemberAccess	face -> d_texture -> fTrans
>21505	Identifier	fTrans
>21506	PtrMemberAccess	face -> d_texture
>21507	Identifier	d_texture
>21508	Identifier	face
>21509	Argument	face -> d_color [ 2 ]
>21510	ArrayIndexing	face -> d_color [ 2 ]
>21511	PrimaryExpression	2
>21512	PtrMemberAccess	face -> d_color
>21513	Identifier	d_color
>21514	Identifier	face
>21515	Argument	face -> d_color [ 1 ]
>21516	ArrayIndexing	face -> d_color [ 1 ]
>21517	PrimaryExpression	1
>21518	PtrMemberAccess	face -> d_color
>21519	Identifier	d_color
>21520	Identifier	face
>21521	Argument	face -> d_color [ 0 ]
>21522	ArrayIndexing	face -> d_color [ 0 ]
>21523	PrimaryExpression	0
>21524	PtrMemberAccess	face -> d_color
>21525	Identifier	d_color
>21526	Identifier	face
>21527	Callee	qglColor4f
>21528	Identifier	qglColor4f
>21529	Condition	 
>21530	PtrMemberAccess	face -> d_texture -> bFromShader
>21531	Identifier	bFromShader
>21532	PtrMemberAccess	face -> d_texture
>21533	Identifier	d_texture
>21534	Identifier	face
>21535	IfStatement	if ( ! b -> patchBrush )
>21536	ElseStatement	else
>21537	CompoundStatement	 
>21538	ExpressionStatement	 
>21539	CallExpression	qglColor4f ( face -> d_color [ 0 ] , face -> d_color [ 1 ] , face -> d_color [ 2 ] , 0.13 )
>21540	ArgumentList	face -> d_color [ 0 ]
>21541	Argument	0.13
>21542	PrimaryExpression	0.13
>21543	Argument	face -> d_color [ 2 ]
>21544	ArrayIndexing	face -> d_color [ 2 ]
>21545	PrimaryExpression	2
>21546	PtrMemberAccess	face -> d_color
>21547	Identifier	d_color
>21548	Identifier	face
>21549	Argument	face -> d_color [ 1 ]
>21550	ArrayIndexing	face -> d_color [ 1 ]
>21551	PrimaryExpression	1
>21552	PtrMemberAccess	face -> d_color
>21553	Identifier	d_color
>21554	Identifier	face
>21555	Argument	face -> d_color [ 0 ]
>21556	ArrayIndexing	face -> d_color [ 0 ]
>21557	PrimaryExpression	0
>21558	PtrMemberAccess	face -> d_color
>21559	Identifier	d_color
>21560	Identifier	face
>21561	Callee	qglColor4f
>21562	Identifier	qglColor4f
>21563	CompoundStatement	 
>21564	IfStatement	if ( face -> texdef . flags & SURF_TRANS33 )
>21565	ElseStatement	else
>21566	IfStatement	if ( face -> texdef . flags & SURF_TRANS66 )
>21567	ElseStatement	else
>21568	ExpressionStatement	 
>21569	CallExpression	qglColor3fv ( face -> d_color )
>21570	ArgumentList	face -> d_color
>21571	Argument	face -> d_color
>21572	PtrMemberAccess	face -> d_color
>21573	Identifier	d_color
>21574	Identifier	face
>21575	Callee	qglColor3fv
>21576	Identifier	qglColor3fv
>21577	ExpressionStatement	 
>21578	CallExpression	qglColor4f ( face -> d_color [ 0 ] , face -> d_color [ 1 ] , face -> d_color [ 2 ] , 0.66 )
>21579	ArgumentList	face -> d_color [ 0 ]
>21580	Argument	0.66
>21581	PrimaryExpression	0.66
>21582	Argument	face -> d_color [ 2 ]
>21583	ArrayIndexing	face -> d_color [ 2 ]
>21584	PrimaryExpression	2
>21585	PtrMemberAccess	face -> d_color
>21586	Identifier	d_color
>21587	Identifier	face
>21588	Argument	face -> d_color [ 1 ]
>21589	ArrayIndexing	face -> d_color [ 1 ]
>21590	PrimaryExpression	1
>21591	PtrMemberAccess	face -> d_color
>21592	Identifier	d_color
>21593	Identifier	face
>21594	Argument	face -> d_color [ 0 ]
>21595	ArrayIndexing	face -> d_color [ 0 ]
>21596	PrimaryExpression	0
>21597	PtrMemberAccess	face -> d_color
>21598	Identifier	d_color
>21599	Identifier	face
>21600	Callee	qglColor4f
>21601	Identifier	qglColor4f
>21602	Condition	 
>21603	BitAndExpression	face -> texdef . flags & SURF_TRANS66
>21604	Identifier	SURF_TRANS66
>21605	MemberAccess	face -> texdef . flags
>21606	Identifier	flags
>21607	PtrMemberAccess	face -> texdef
>21608	Identifier	texdef
>21609	Identifier	face
>21610	ExpressionStatement	 
>21611	CallExpression	qglColor4f ( face -> d_color [ 0 ] , face -> d_color [ 1 ] , face -> d_color [ 2 ] , 0.33 )
>21612	ArgumentList	face -> d_color [ 0 ]
>21613	Argument	0.33
>21614	PrimaryExpression	0.33
>21615	Argument	face -> d_color [ 2 ]
>21616	ArrayIndexing	face -> d_color [ 2 ]
>21617	PrimaryExpression	2
>21618	PtrMemberAccess	face -> d_color
>21619	Identifier	d_color
>21620	Identifier	face
>21621	Argument	face -> d_color [ 1 ]
>21622	ArrayIndexing	face -> d_color [ 1 ]
>21623	PrimaryExpression	1
>21624	PtrMemberAccess	face -> d_color
>21625	Identifier	d_color
>21626	Identifier	face
>21627	Argument	face -> d_color [ 0 ]
>21628	ArrayIndexing	face -> d_color [ 0 ]
>21629	PrimaryExpression	0
>21630	PtrMemberAccess	face -> d_color
>21631	Identifier	d_color
>21632	Identifier	face
>21633	Callee	qglColor4f
>21634	Identifier	qglColor4f
>21635	Condition	 
>21636	BitAndExpression	face -> texdef . flags & SURF_TRANS33
>21637	Identifier	SURF_TRANS33
>21638	MemberAccess	face -> texdef . flags
>21639	Identifier	flags
>21640	PtrMemberAccess	face -> texdef
>21641	Identifier	texdef
>21642	Identifier	face
>21643	Condition	 
>21644	UnaryOp	! b -> patchBrush
>21645	PtrMemberAccess	b -> patchBrush
>21646	Identifier	patchBrush
>21647	Identifier	b
>21648	UnaryOperator	!
>21649	IfStatement	if ( ( nDrawMode == cd_texture || nDrawMode == cd_light ) && face -> d_texture != prev )
>21650	CompoundStatement	 
>21651	ExpressionStatement	 
>21652	CallExpression	qglBindTexture ( GL_TEXTURE_2D , face -> d_texture -> texture_number )
>21653	ArgumentList	GL_TEXTURE_2D
>21654	Argument	face -> d_texture -> texture_number
>21655	PtrMemberAccess	face -> d_texture -> texture_number
>21656	Identifier	texture_number
>21657	PtrMemberAccess	face -> d_texture
>21658	Identifier	d_texture
>21659	Identifier	face
>21660	Argument	GL_TEXTURE_2D
>21661	Identifier	GL_TEXTURE_2D
>21662	Callee	qglBindTexture
>21663	Identifier	qglBindTexture
>21664	ExpressionStatement	 
>21665	AssignmentExpr	prev = face -> d_texture
>21666	PtrMemberAccess	face -> d_texture
>21667	Identifier	d_texture
>21668	Identifier	face
>21669	Identifier	prev
>21670	Condition	 
>21671	AndExpression	( nDrawMode == cd_texture || nDrawMode == cd_light ) && face -> d_texture != prev
>21672	EqualityExpression	face -> d_texture != prev
>21673	Identifier	prev
>21674	PtrMemberAccess	face -> d_texture
>21675	Identifier	d_texture
>21676	Identifier	face
>21677	OrExpression	nDrawMode == cd_texture || nDrawMode == cd_light
>21678	EqualityExpression	nDrawMode == cd_light
>21679	Identifier	cd_light
>21680	Identifier	nDrawMode
>21681	EqualityExpression	nDrawMode == cd_texture
>21682	Identifier	cd_texture
>21683	Identifier	nDrawMode
>21684	IfStatement	if ( b -> alphaBrush )
>21685	CompoundStatement	 
>21686	ExpressionStatement	 
>21687	CallExpression	qglDisable ( GL_CULL_FACE )
>21688	ArgumentList	GL_CULL_FACE
>21689	Argument	GL_CULL_FACE
>21690	Identifier	GL_CULL_FACE
>21691	Callee	qglDisable
>21692	Identifier	qglDisable
>21693	IfStatement	if ( ! ( face -> texdef . flags & SURF_ALPHA ) )
>21694	ContinueStatement	 
>21695	Condition	 
>21696	UnaryOp	! ( face -> texdef . flags & SURF_ALPHA )
>21697	BitAndExpression	face -> texdef . flags & SURF_ALPHA
>21698	Identifier	SURF_ALPHA
>21699	MemberAccess	face -> texdef . flags
>21700	Identifier	flags
>21701	PtrMemberAccess	face -> texdef
>21702	Identifier	texdef
>21703	Identifier	face
>21704	UnaryOperator	!
>21705	Condition	 
>21706	PtrMemberAccess	b -> alphaBrush
>21707	Identifier	alphaBrush
>21708	Identifier	b
>21709	IfStatement	if ( g_qeglobals . d_savedinfo . exclude & EXCLUDE_CAULK )
>21710	CompoundStatement	 
>21711	IfStatement	if ( strstr ( face -> texdef . name , \"caulk\" ) )
>21712	CompoundStatement	 
>21713	ContinueStatement	 
>21714	Condition	 
>21715	CallExpression	strstr ( face -> texdef . name , \"caulk\" )
>21716	ArgumentList	face -> texdef . name
>21717	Argument	\"caulk\"
>21718	PrimaryExpression	\"caulk\"
>21719	Argument	face -> texdef . name
>21720	MemberAccess	face -> texdef . name
>21721	Identifier	name
>21722	PtrMemberAccess	face -> texdef
>21723	Identifier	texdef
>21724	Identifier	face
>21725	Callee	strstr
>21726	Identifier	strstr
>21727	Condition	 
>21728	BitAndExpression	g_qeglobals . d_savedinfo . exclude & EXCLUDE_CAULK
>21729	Identifier	EXCLUDE_CAULK
>21730	MemberAccess	g_qeglobals . d_savedinfo . exclude
>21731	Identifier	exclude
>21732	MemberAccess	g_qeglobals . d_savedinfo
>21733	Identifier	d_savedinfo
>21734	Identifier	g_qeglobals
>21735	IfStatement	if ( ! w )
>21736	CompoundStatement	 
>21737	ContinueStatement	 
>21738	Condition	 
>21739	UnaryOp	! w
>21740	Identifier	w
>21741	UnaryOperator	!
>21742	ExpressionStatement	 
>21743	AssignmentExpr	w = face -> face_winding
>21744	PtrMemberAccess	face -> face_winding
>21745	Identifier	face_winding
>21746	Identifier	face
>21747	Identifier	w
>21748	Expression	 
>21749	IncDecOp	order ++
>21750	IncDec	++
>21751	Identifier	order
>21752	AssignmentExpr	face = face -> next
>21753	PtrMemberAccess	face -> next
>21754	Identifier	next
>21755	Identifier	face
>21756	Identifier	face
>21757	Condition	 
>21758	Identifier	face
>21759	ForInit	 
>21760	Expression	face = b -> brush_faces , order = 0
>21761	AssignmentExpr	order = 0
>21762	PrimaryExpression	0
>21763	Identifier	order
>21764	AssignmentExpr	face = b -> brush_faces
>21765	PtrMemberAccess	b -> brush_faces
>21766	Identifier	brush_faces
>21767	Identifier	b
>21768	Identifier	face
>21769	ExpressionStatement	 
>21770	AssignmentExpr	prev = NULL
>21771	Identifier	NULL
>21772	Identifier	prev
>21773	IfStatement	if ( b -> owner -> eclass -> fixedsize )
>21774	CompoundStatement	 
>21775	IfStatement	if ( bp )
>21776	ReturnStatement	 
>21777	Condition	 
>21778	Identifier	bp
>21779	IfStatement	if ( nDrawMode == cd_texture || nDrawMode == cd_light )
>21780	ExpressionStatement	 
>21781	CallExpression	qglEnable ( GL_TEXTURE_2D )
>21782	ArgumentList	GL_TEXTURE_2D
>21783	Argument	GL_TEXTURE_2D
>21784	Identifier	GL_TEXTURE_2D
>21785	Callee	qglEnable
>21786	Identifier	qglEnable
>21787	Condition	 
>21788	OrExpression	nDrawMode == cd_texture || nDrawMode == cd_light
>21789	EqualityExpression	nDrawMode == cd_light
>21790	Identifier	cd_light
>21791	Identifier	nDrawMode
>21792	EqualityExpression	nDrawMode == cd_texture
>21793	Identifier	cd_texture
>21794	Identifier	nDrawMode
>21795	IdentifierDeclStatement	 
>21796	IdentifierDecl	bp = ( b -> bModelFailed ) ? false 
>21797	AssignmentExpr	bp = ( b -> bModelFailed ) ? false 
>21798	ConditionalExpression	( b -> bModelFailed ) ? false 
>21799	CallExpression	PaintedModel ( b , true )
>21800	ArgumentList	b
>21801	Argument	true
>21802	Identifier	true
>21803	Argument	b
>21804	Identifier	b
>21805	Callee	PaintedModel
>21806	Identifier	PaintedModel
>21807	Identifier	false
>21808	Condition	b -> bModelFailed
>21809	PtrMemberAccess	b -> bModelFailed
>21810	Identifier	bModelFailed
>21811	Identifier	b
>21812	Identifier	bp
>21813	Identifier	bp
>21814	IdentifierDeclType	bool
>21815	IfStatement	if ( nDrawMode == cd_texture || nDrawMode == cd_light )
>21816	ExpressionStatement	 
>21817	CallExpression	qglDisable ( GL_TEXTURE_2D )
>21818	ArgumentList	GL_TEXTURE_2D
>21819	Argument	GL_TEXTURE_2D
>21820	Identifier	GL_TEXTURE_2D
>21821	Callee	qglDisable
>21822	Identifier	qglDisable
>21823	Condition	 
>21824	OrExpression	nDrawMode == cd_texture || nDrawMode == cd_light
>21825	EqualityExpression	nDrawMode == cd_light
>21826	Identifier	cd_light
>21827	Identifier	nDrawMode
>21828	EqualityExpression	nDrawMode == cd_texture
>21829	Identifier	cd_texture
>21830	Identifier	nDrawMode
>21831	IfStatement	if ( g_PrefsDlg . m_bNewLightDraw && ( b -> owner -> eclass -> nShowFlags & ECLASS_LIGHT ) )
>21832	CompoundStatement	 
>21833	ReturnStatement	 
>21834	ExpressionStatement	 
>21835	CallExpression	DrawLight ( b )
>21836	ArgumentList	b
>21837	Argument	b
>21838	Identifier	b
>21839	Callee	DrawLight
>21840	Identifier	DrawLight
>21841	Condition	 
>21842	AndExpression	g_PrefsDlg . m_bNewLightDraw && ( b -> owner -> eclass -> nShowFlags & ECLASS_LIGHT )
>21843	BitAndExpression	b -> owner -> eclass -> nShowFlags & ECLASS_LIGHT
>21844	Identifier	ECLASS_LIGHT
>21845	PtrMemberAccess	b -> owner -> eclass -> nShowFlags
>21846	Identifier	nShowFlags
>21847	PtrMemberAccess	b -> owner -> eclass
>21848	Identifier	eclass
>21849	PtrMemberAccess	b -> owner
>21850	Identifier	owner
>21851	Identifier	b
>21852	MemberAccess	g_PrefsDlg . m_bNewLightDraw
>21853	Identifier	m_bNewLightDraw
>21854	Identifier	g_PrefsDlg
>21855	IfStatement	if ( ! ( g_qeglobals . d_savedinfo . exclude & EXCLUDE_ANGLES ) && ( b -> owner -> eclass -> nShowFlags & ECLASS_\
>21856	CompoundStatement	 
>21857	ExpressionStatement	 
>21858	CallExpression	Brush_DrawFacingAngle ( b , b -> owner )
>21859	ArgumentList	b
>21860	Argument	b -> owner
>21861	PtrMemberAccess	b -> owner
>21862	Identifier	owner
>21863	Identifier	b
>21864	Argument	b
>21865	Identifier	b
>21866	Callee	Brush_DrawFacingAngle
>21867	Identifier	Brush_DrawFacingAngle
>21868	Condition	 
>21869	AndExpression	! ( g_qeglobals . d_savedinfo . exclude & EXCLUDE_ANGLES ) && ( b -> owner -> eclass -> nShowFlags & \
>21870	BitAndExpression	b -> owner -> eclass -> nShowFlags & ECLASS_ANGLE
>21871	Identifier	ECLASS_ANGLE
>21872	PtrMemberAccess	b -> owner -> eclass -> nShowFlags
>21873	Identifier	nShowFlags
>21874	PtrMemberAccess	b -> owner -> eclass
>21875	Identifier	eclass
>21876	PtrMemberAccess	b -> owner
>21877	Identifier	owner
>21878	Identifier	b
>21879	UnaryOp	! ( g_qeglobals . d_savedinfo . exclude & EXCLUDE_ANGLES )
>21880	BitAndExpression	g_qeglobals . d_savedinfo . exclude & EXCLUDE_ANGLES
>21881	Identifier	EXCLUDE_ANGLES
>21882	MemberAccess	g_qeglobals . d_savedinfo . exclude
>21883	Identifier	exclude
>21884	MemberAccess	g_qeglobals . d_savedinfo
>21885	Identifier	d_savedinfo
>21886	Identifier	g_qeglobals
>21887	UnaryOperator	!
>21888	Condition	 
>21889	PtrMemberAccess	b -> owner -> eclass -> fixedsize
>21890	Identifier	fixedsize
>21891	PtrMemberAccess	b -> owner -> eclass
>21892	Identifier	eclass
>21893	PtrMemberAccess	b -> owner
>21894	Identifier	owner
>21895	Identifier	b
>21896	IdentifierDeclStatement	 
>21897	IdentifierDecl	nDrawMode = g_pParentWnd -> GetCamera ( ) -> Camera ( ) . draw_mode
>21898	AssignmentExpr	nDrawMode = g_pParentWnd -> GetCamera ( ) -> Camera ( ) . draw_mode
>21899	MemberAccess	g_pParentWnd -> GetCamera ( ) -> Camera ( ) . draw_mode
>21900	Identifier	draw_mode
>21901	CallExpression	g_pParentWnd -> GetCamera ( ) -> Camera ( )
>21902	ArgumentList	 
>21903	Callee	g_pParentWnd -> GetCamera ( ) -> Camera
>21904	PtrMemberAccess	g_pParentWnd -> GetCamera ( ) -> Camera
>21905	Identifier	Camera
>21906	CallExpression	g_pParentWnd -> GetCamera ( )
>21907	ArgumentList	 
>21908	Callee	g_pParentWnd -> GetCamera
>21909	PtrMemberAccess	g_pParentWnd -> GetCamera
>21910	Identifier	GetCamera
>21911	Identifier	g_pParentWnd
>21912	Identifier	nDrawMode
>21913	Identifier	nDrawMode
>21914	IdentifierDeclType	int
>21915	IfStatement	if ( b -> terrainBrush )
>21916	CompoundStatement	 
>21917	ReturnStatement	 
>21918	ExpressionStatement	 
>21919	CallExpression	Terrain_DrawCam ( b -> pTerrain )
>21920	ArgumentList	b -> pTerrain
>21921	Argument	b -> pTerrain
>21922	PtrMemberAccess	b -> pTerrain
>21923	Identifier	pTerrain
>21924	Identifier	b
>21925	Callee	Terrain_DrawCam
>21926	Identifier	Terrain_DrawCam
>21927	Condition	 
>21928	PtrMemberAccess	b -> terrainBrush
>21929	Identifier	terrainBrush
>21930	Identifier	b
>21931	IfStatement	if ( b -> patchBrush )
>21932	CompoundStatement	 
>21933	ReturnStatement	 
>21934	ExpressionStatement	 
>21935	CallExpression	Patch_DrawCam ( b -> pPatch )
>21936	ArgumentList	b -> pPatch
>21937	Argument	b -> pPatch
>21938	PtrMemberAccess	b -> pPatch
>21939	Identifier	pPatch
>21940	Identifier	b
>21941	Callee	Patch_DrawCam
>21942	Identifier	Patch_DrawCam
>21943	Condition	 
>21944	PtrMemberAccess	b -> patchBrush
>21945	Identifier	patchBrush
>21946	Identifier	b
>21947	IfStatement	if ( b -> hiddenBrush )
>21948	CompoundStatement	 
>21949	ReturnStatement	 
>21950	Condition	 
>21951	PtrMemberAccess	b -> hiddenBrush
>21952	Identifier	hiddenBrush
>21953	Identifier	b
>21954	IfStatement	if ( b -> owner && ( b -> owner -> eclass -> nShowFlags & ECLASS_PLUGINENTITY ) )
>21955	CompoundStatement	 
>21956	ReturnStatement	 
>21957	ExpressionStatement	 
>21958	CallExpression	b -> owner -> pPlugEnt -> CamRender ( )
>21959	ArgumentList	 
>21960	Callee	b -> owner -> pPlugEnt -> CamRender
>21961	PtrMemberAccess	b -> owner -> pPlugEnt -> CamRender
>21962	Identifier	CamRender
>21963	PtrMemberAccess	b -> owner -> pPlugEnt
>21964	Identifier	pPlugEnt
>21965	PtrMemberAccess	b -> owner
>21966	Identifier	owner
>21967	Identifier	b
>21968	Condition	 
>21969	AndExpression	b -> owner && ( b -> owner -> eclass -> nShowFlags & ECLASS_PLUGINENTITY )
>21970	BitAndExpression	b -> owner -> eclass -> nShowFlags & ECLASS_PLUGINENTITY
>21971	Identifier	ECLASS_PLUGINENTITY
>21972	PtrMemberAccess	b -> owner -> eclass -> nShowFlags
>21973	Identifier	nShowFlags
>21974	PtrMemberAccess	b -> owner -> eclass
>21975	Identifier	eclass
>21976	PtrMemberAccess	b -> owner
>21977	Identifier	owner
>21978	Identifier	b
>21979	PtrMemberAccess	b -> owner
>21980	Identifier	owner
>21981	Identifier	b
>21982	IdentifierDeclStatement	 
>21983	IdentifierDecl	* w
>21984	Identifier	w
>21985	IdentifierDeclType	winding_t *
>21986	IdentifierDeclStatement	 
>21987	IdentifierDecl	* prev = 0
>21988	AssignmentExpr	* prev = 0
>21989	PrimaryExpression	0
>21990	Identifier	prev
>21991	Identifier	prev
>21992	IdentifierDeclType	qtexture_t *
>21993	IdentifierDeclStatement	 
>21994	IdentifierDecl	order
>21995	Identifier	order
>21996	IdentifierDeclType	int
>21997	IdentifierDecl	i
>21998	Identifier	i
>21999	IdentifierDeclType	int
>22000	IdentifierDeclStatement	 
>22001	IdentifierDecl	* face
>22002	Identifier	face
>22003	IdentifierDeclType	face_t *
>22090	FunctionDef	Face_Draw (face_t * f)
>22091	ParameterList	face_t * f
>22092	Parameter	 
>22093	Identifier	f
>22094	ParameterType	face_t *
>22095	ReturnType	void
>22096	CompoundStatement	 
>22097	ExpressionStatement	 
>22098	CallExpression	qglEnd ( )
>22099	ArgumentList	 
>22100	Callee	qglEnd
>22101	Identifier	qglEnd
>22102	ForStatement	for ( i = 0 ; i < f -> face_winding -> numpoints ; i ++ )
>22103	ExpressionStatement	 
>22104	CallExpression	qglVertex3fv ( f -> face_winding -> points [ i ] )
>22105	ArgumentList	f -> face_winding -> points [ i ]
>22106	Argument	f -> face_winding -> points [ i ]
>22107	ArrayIndexing	f -> face_winding -> points [ i ]
>22108	Identifier	i
>22109	PtrMemberAccess	f -> face_winding -> points
>22110	Identifier	points
>22111	PtrMemberAccess	f -> face_winding
>22112	Identifier	face_winding
>22113	Identifier	f
>22114	Callee	qglVertex3fv
>22115	Identifier	qglVertex3fv
>22116	IncDecOp	 
>22117	IncDec	++
>22118	Identifier	i
>22119	Condition	 
>22120	RelationalExpression	i < f -> face_winding -> numpoints
>22121	PtrMemberAccess	f -> face_winding -> numpoints
>22122	Identifier	numpoints
>22123	PtrMemberAccess	f -> face_winding
>22124	Identifier	face_winding
>22125	Identifier	f
>22126	Identifier	i
>22127	ForInit	 
>22128	AssignmentExpr	i = 0
>22129	PrimaryExpression	0
>22130	Identifier	i
>22131	ExpressionStatement	 
>22132	CallExpression	qglBegin ( GL_POLYGON )
>22133	ArgumentList	GL_POLYGON
>22134	Argument	GL_POLYGON
>22135	Identifier	GL_POLYGON
>22136	Callee	qglBegin
>22137	Identifier	qglBegin
>22138	IfStatement	if ( f -> face_winding == 0 )
>22139	ReturnStatement	 
>22140	Condition	 
>22141	EqualityExpression	f -> face_winding == 0
>22142	PrimaryExpression	0
>22143	PtrMemberAccess	f -> face_winding
>22144	Identifier	face_winding
>22145	Identifier	f
>22146	IdentifierDeclStatement	 
>22147	IdentifierDecl	i
>22148	Identifier	i
>22149	IdentifierDeclType	int
>22166	FunctionDef	Brush_DrawXY (brush_t * b , int nViewType)
>22167	ParameterList	brush_t * b , int nViewType
>22168	Parameter	 
>22169	Identifier	nViewType
>22170	ParameterType	int
>22171	Parameter	 
>22172	Identifier	b
>22173	ParameterType	brush_t *
>22174	ReturnType	void
>22175	CompoundStatement	 
>22176	ExpressionStatement	 
>22177	CallExpression	DrawBrushEntityName ( b )
>22178	ArgumentList	b
>22179	Argument	b
>22180	Identifier	b
>22181	Callee	DrawBrushEntityName
>22182	Identifier	DrawBrushEntityName
>22183	ForStatement	for ( face = b -> brush_faces , order = 0 ; face ; face = face -> next , order ++ )
>22184	CompoundStatement	 
>22185	ExpressionStatement	 
>22186	CallExpression	qglEnd ( )
>22187	ArgumentList	 
>22188	Callee	qglEnd
>22189	Identifier	qglEnd
>22190	ForStatement	for ( i = 0 ; i < w -> numpoints ; i ++ )
>22191	ExpressionStatement	 
>22192	CallExpression	qglVertex3fv ( w -> points [ i ] )
>22193	ArgumentList	w -> points [ i ]
>22194	Argument	w -> points [ i ]
>22195	ArrayIndexing	w -> points [ i ]
>22196	Identifier	i
>22197	PtrMemberAccess	w -> points
>22198	Identifier	points
>22199	Identifier	w
>22200	Callee	qglVertex3fv
>22201	Identifier	qglVertex3fv
>22202	IncDecOp	 
>22203	IncDec	++
>22204	Identifier	i
>22205	Condition	 
>22206	RelationalExpression	i < w -> numpoints
>22207	PtrMemberAccess	w -> numpoints
>22208	Identifier	numpoints
>22209	Identifier	w
>22210	Identifier	i
>22211	ForInit	 
>22212	AssignmentExpr	i = 0
>22213	PrimaryExpression	0
>22214	Identifier	i
>22215	ExpressionStatement	 
>22216	CallExpression	qglBegin ( GL_LINE_LOOP )
>22217	ArgumentList	GL_LINE_LOOP
>22218	Argument	GL_LINE_LOOP
>22219	Identifier	GL_LINE_LOOP
>22220	Callee	qglBegin
>22221	Identifier	qglBegin
>22222	IfStatement	if ( ! w )
>22223	ContinueStatement	 
>22224	Condition	 
>22225	UnaryOp	! w
>22226	Identifier	w
>22227	UnaryOperator	!
>22228	ExpressionStatement	 
>22229	AssignmentExpr	w = face -> face_winding
>22230	PtrMemberAccess	face -> face_winding
>22231	Identifier	face_winding
>22232	Identifier	face
>22233	Identifier	w
>22234	IfStatement	if ( nViewType == XY )
>22235	ElseStatement	else
>22236	CompoundStatement	 
>22237	IfStatement	if ( nViewType == XZ )
>22238	ElseStatement	else
>22239	CompoundStatement	 
>22240	IfStatement	if ( face -> plane . normal [ 0 ] <= 0 )
>22241	ContinueStatement	 
>22242	Condition	 
>22243	RelationalExpression	face -> plane . normal [ 0 ] <= 0
>22244	PrimaryExpression	0
>22245	ArrayIndexing	face -> plane . normal [ 0 ]
>22246	PrimaryExpression	0
>22247	MemberAccess	face -> plane . normal
>22248	Identifier	normal
>22249	PtrMemberAccess	face -> plane
>22250	Identifier	plane
>22251	Identifier	face
>22252	CompoundStatement	 
>22253	IfStatement	if ( face -> plane . normal [ 1 ] <= 0 )
>22254	ContinueStatement	 
>22255	Condition	 
>22256	RelationalExpression	face -> plane . normal [ 1 ] <= 0
>22257	PrimaryExpression	0
>22258	ArrayIndexing	face -> plane . normal [ 1 ]
>22259	PrimaryExpression	1
>22260	MemberAccess	face -> plane . normal
>22261	Identifier	normal
>22262	PtrMemberAccess	face -> plane
>22263	Identifier	plane
>22264	Identifier	face
>22265	Condition	 
>22266	EqualityExpression	nViewType == XZ
>22267	Identifier	XZ
>22268	Identifier	nViewType
>22269	CompoundStatement	 
>22270	IfStatement	if ( face -> plane . normal [ 2 ] <= 0 )
>22271	ContinueStatement	 
>22272	Condition	 
>22273	RelationalExpression	face -> plane . normal [ 2 ] <= 0
>22274	PrimaryExpression	0
>22275	ArrayIndexing	face -> plane . normal [ 2 ]
>22276	PrimaryExpression	2
>22277	MemberAccess	face -> plane . normal
>22278	Identifier	normal
>22279	PtrMemberAccess	face -> plane
>22280	Identifier	plane
>22281	Identifier	face
>22282	Condition	 
>22283	EqualityExpression	nViewType == XY
>22284	Identifier	XY
>22285	Identifier	nViewType
>22286	Expression	 
>22287	IncDecOp	order ++
>22288	IncDec	++
>22289	Identifier	order
>22290	AssignmentExpr	face = face -> next
>22291	PtrMemberAccess	face -> next
>22292	Identifier	next
>22293	Identifier	face
>22294	Identifier	face
>22295	Condition	 
>22296	Identifier	face
>22297	ForInit	 
>22298	Expression	face = b -> brush_faces , order = 0
>22299	AssignmentExpr	order = 0
>22300	PrimaryExpression	0
>22301	Identifier	order
>22302	AssignmentExpr	face = b -> brush_faces
>22303	PtrMemberAccess	b -> brush_faces
>22304	Identifier	brush_faces
>22305	Identifier	b
>22306	Identifier	face
>22307	IfStatement	if ( b -> owner -> eclass -> fixedsize )
>22308	CompoundStatement	 
>22309	IfStatement	if ( g_PrefsDlg . m_bNewLightDraw && ( b -> owner -> eclass -> nShowFlags & ECLASS_LIGHT ) )
>22310	ElseStatement	else
>22311	IfStatement	if ( b -> owner -> eclass -> nShowFlags & ECLASS_MISCMODEL )
>22312	CompoundStatement	 
>22313	IfStatement	if ( PaintedModel ( b , false ) )
>22314	ReturnStatement	 
>22315	Condition	 
>22316	CallExpression	PaintedModel ( b , false )
>22317	ArgumentList	b
>22318	Argument	false
>22319	Identifier	false
>22320	Argument	b
>22321	Identifier	b
>22322	Callee	PaintedModel
>22323	Identifier	PaintedModel
>22324	Condition	 
>22325	BitAndExpression	b -> owner -> eclass -> nShowFlags & ECLASS_MISCMODEL
>22326	Identifier	ECLASS_MISCMODEL
>22327	PtrMemberAccess	b -> owner -> eclass -> nShowFlags
>22328	Identifier	nShowFlags
>22329	PtrMemberAccess	b -> owner -> eclass
>22330	Identifier	eclass
>22331	PtrMemberAccess	b -> owner
>22332	Identifier	owner
>22333	Identifier	b
>22334	CompoundStatement	 
>22335	ReturnStatement	 
>22336	ExpressionStatement	 
>22337	CallExpression	DrawBrushEntityName ( b )
>22338	ArgumentList	b
>22339	Argument	b
>22340	Identifier	b
>22341	Callee	DrawBrushEntityName
>22342	Identifier	DrawBrushEntityName
>22343	ExpressionStatement	 
>22344	CallExpression	qglEnd ( )
>22345	ArgumentList	 
>22346	Callee	qglEnd
>22347	Identifier	qglEnd
>22348	ExpressionStatement	 
>22349	CallExpression	qglVertex3fv ( vCorners [ 0 ] )
>22350	ArgumentList	vCorners [ 0 ]
>22351	Argument	vCorners [ 0 ]
>22352	ArrayIndexing	vCorners [ 0 ]
>22353	PrimaryExpression	0
>22354	Identifier	vCorners
>22355	Callee	qglVertex3fv
>22356	Identifier	qglVertex3fv
>22357	ExpressionStatement	 
>22358	CallExpression	qglVertex3fv ( vCorners [ 1 ] )
>22359	ArgumentList	vCorners [ 1 ]
>22360	Argument	vCorners [ 1 ]
>22361	ArrayIndexing	vCorners [ 1 ]
>22362	PrimaryExpression	1
>22363	Identifier	vCorners
>22364	Callee	qglVertex3fv
>22365	Identifier	qglVertex3fv
>22366	ExpressionStatement	 
>22367	CallExpression	qglVertex3fv ( vCorners [ 2 ] )
>22368	ArgumentList	vCorners [ 2 ]
>22369	Argument	vCorners [ 2 ]
>22370	ArrayIndexing	vCorners [ 2 ]
>22371	PrimaryExpression	2
>22372	Identifier	vCorners
>22373	Callee	qglVertex3fv
>22374	Identifier	qglVertex3fv
>22375	ExpressionStatement	 
>22376	CallExpression	qglVertex3fv ( vCorners [ 3 ] )
>22377	ArgumentList	vCorners [ 3 ]
>22378	Argument	vCorners [ 3 ]
>22379	ArrayIndexing	vCorners [ 3 ]
>22380	PrimaryExpression	3
>22381	Identifier	vCorners
>22382	Callee	qglVertex3fv
>22383	Identifier	qglVertex3fv
>22384	ExpressionStatement	 
>22385	CallExpression	qglVertex3fv ( vCorners [ 0 ] )
>22386	ArgumentList	vCorners [ 0 ]
>22387	Argument	vCorners [ 0 ]
>22388	ArrayIndexing	vCorners [ 0 ]
>22389	PrimaryExpression	0
>22390	Identifier	vCorners
>22391	Callee	qglVertex3fv
>22392	Identifier	qglVertex3fv
>22393	ExpressionStatement	 
>22394	CallExpression	qglVertex3fv ( vBottom )
>22395	ArgumentList	vBottom
>22396	Argument	vBottom
>22397	Identifier	vBottom
>22398	Callee	qglVertex3fv
>22399	Identifier	qglVertex3fv
>22400	ExpressionStatement	 
>22401	CallExpression	qglBegin ( GL_TRIANGLE_FAN )
>22402	ArgumentList	GL_TRIANGLE_FAN
>22403	Argument	GL_TRIANGLE_FAN
>22404	Identifier	GL_TRIANGLE_FAN
>22405	Callee	qglBegin
>22406	Identifier	qglBegin
>22407	ExpressionStatement	 
>22408	CallExpression	qglEnd ( )
>22409	ArgumentList	 
>22410	Callee	qglEnd
>22411	Identifier	qglEnd
>22412	ExpressionStatement	 
>22413	CallExpression	qglVertex3fv ( vCorners [ 0 ] )
>22414	ArgumentList	vCorners [ 0 ]
>22415	Argument	vCorners [ 0 ]
>22416	ArrayIndexing	vCorners [ 0 ]
>22417	PrimaryExpression	0
>22418	Identifier	vCorners
>22419	Callee	qglVertex3fv
>22420	Identifier	qglVertex3fv
>22421	ExpressionStatement	 
>22422	CallExpression	qglVertex3fv ( vCorners [ 3 ] )
>22423	ArgumentList	vCorners [ 3 ]
>22424	Argument	vCorners [ 3 ]
>22425	ArrayIndexing	vCorners [ 3 ]
>22426	PrimaryExpression	3
>22427	Identifier	vCorners
>22428	Callee	qglVertex3fv
>22429	Identifier	qglVertex3fv
>22430	ExpressionStatement	 
>22431	CallExpression	qglVertex3fv ( vCorners [ 2 ] )
>22432	ArgumentList	vCorners [ 2 ]
>22433	Argument	vCorners [ 2 ]
>22434	ArrayIndexing	vCorners [ 2 ]
>22435	PrimaryExpression	2
>22436	Identifier	vCorners
>22437	Callee	qglVertex3fv
>22438	Identifier	qglVertex3fv
>22439	ExpressionStatement	 
>22440	CallExpression	qglVertex3fv ( vCorners [ 1 ] )
>22441	ArgumentList	vCorners [ 1 ]
>22442	Argument	vCorners [ 1 ]
>22443	ArrayIndexing	vCorners [ 1 ]
>22444	PrimaryExpression	1
>22445	Identifier	vCorners
>22446	Callee	qglVertex3fv
>22447	Identifier	qglVertex3fv
>22448	ExpressionStatement	 
>22449	CallExpression	qglVertex3fv ( vCorners [ 0 ] )
>22450	ArgumentList	vCorners [ 0 ]
>22451	Argument	vCorners [ 0 ]
>22452	ArrayIndexing	vCorners [ 0 ]
>22453	PrimaryExpression	0
>22454	Identifier	vCorners
>22455	Callee	qglVertex3fv
>22456	Identifier	qglVertex3fv
>22457	ExpressionStatement	 
>22458	CallExpression	qglVertex3fv ( vTop )
>22459	ArgumentList	vTop
>22460	Argument	vTop
>22461	Identifier	vTop
>22462	Callee	qglVertex3fv
>22463	Identifier	qglVertex3fv
>22464	ExpressionStatement	 
>22465	CallExpression	qglBegin ( GL_TRIANGLE_FAN )
>22466	ArgumentList	GL_TRIANGLE_FAN
>22467	Argument	GL_TRIANGLE_FAN
>22468	Identifier	GL_TRIANGLE_FAN
>22469	Callee	qglBegin
>22470	Identifier	qglBegin
>22471	ExpressionStatement	 
>22472	CallExpression	qglPolygonMode ( GL_FRONT_AND_BACK , GL_LINE )
>22473	ArgumentList	GL_FRONT_AND_BACK
>22474	Argument	GL_LINE
>22475	Identifier	GL_LINE
>22476	Argument	GL_FRONT_AND_BACK
>22477	Identifier	GL_FRONT_AND_BACK
>22478	Callee	qglPolygonMode
>22479	Identifier	qglPolygonMode
>22480	ExpressionStatement	 
>22481	AssignmentExpr	vBottom [ 2 ] = b -> mins [ 2 ]
>22482	ArrayIndexing	b -> mins [ 2 ]
>22483	PrimaryExpression	2
>22484	PtrMemberAccess	b -> mins
>22485	Identifier	mins
>22486	Identifier	b
>22487	ArrayIndexing	vBottom [ 2 ]
>22488	PrimaryExpression	2
>22489	Identifier	vBottom
>22490	ExpressionStatement	 
>22491	CallExpression	VectorCopy ( vTop , vBottom )
>22492	ArgumentList	vTop
>22493	Argument	vBottom
>22494	Identifier	vBottom
>22495	Argument	vTop
>22496	Identifier	vTop
>22497	Callee	VectorCopy
>22498	Identifier	VectorCopy
>22499	ExpressionStatement	 
>22500	AssignmentExpr	vTop [ 2 ] = b -> maxs [ 2 ]
>22501	ArrayIndexing	b -> maxs [ 2 ]
>22502	PrimaryExpression	2
>22503	PtrMemberAccess	b -> maxs
>22504	Identifier	maxs
>22505	Identifier	b
>22506	ArrayIndexing	vTop [ 2 ]
>22507	PrimaryExpression	2
>22508	Identifier	vTop
>22509	ExpressionStatement	 
>22510	AssignmentExpr	vTop [ 1 ] = b -> mins [ 1 ] + ( ( b -> maxs [ 1 ] - b -> mins [ 1 ] ) / 2 )
>22511	AdditiveExpression	b -> mins [ 1 ] + ( ( b -> maxs [ 1 ] - b -> mins [ 1 ] ) / 2 )
>22512	MultiplicativeExpression	( b -> maxs [ 1 ] - b -> mins [ 1 ] ) / 2
>22513	PrimaryExpression	2
>22514	AdditiveExpression	b -> maxs [ 1 ] - b -> mins [ 1 ]
>22515	ArrayIndexing	b -> mins [ 1 ]
>22516	PrimaryExpression	1
>22517	PtrMemberAccess	b -> mins
>22518	Identifier	mins
>22519	Identifier	b
>22520	ArrayIndexing	b -> maxs [ 1 ]
>22521	PrimaryExpression	1
>22522	PtrMemberAccess	b -> maxs
>22523	Identifier	maxs
>22524	Identifier	b
>22525	ArrayIndexing	b -> mins [ 1 ]
>22526	PrimaryExpression	1
>22527	PtrMemberAccess	b -> mins
>22528	Identifier	mins
>22529	Identifier	b
>22530	ArrayIndexing	vTop [ 1 ]
>22531	PrimaryExpression	1
>22532	Identifier	vTop
>22533	ExpressionStatement	 
>22534	AssignmentExpr	vTop [ 0 ] = b -> mins [ 0 ] + ( ( b -> maxs [ 0 ] - b -> mins [ 0 ] ) / 2 )
>22535	AdditiveExpression	b -> mins [ 0 ] + ( ( b -> maxs [ 0 ] - b -> mins [ 0 ] ) / 2 )
>22536	MultiplicativeExpression	( b -> maxs [ 0 ] - b -> mins [ 0 ] ) / 2
>22537	PrimaryExpression	2
>22538	AdditiveExpression	b -> maxs [ 0 ] - b -> mins [ 0 ]
>22539	ArrayIndexing	b -> mins [ 0 ]
>22540	PrimaryExpression	0
>22541	PtrMemberAccess	b -> mins
>22542	Identifier	mins
>22543	Identifier	b
>22544	ArrayIndexing	b -> maxs [ 0 ]
>22545	PrimaryExpression	0
>22546	PtrMemberAccess	b -> maxs
>22547	Identifier	maxs
>22548	Identifier	b
>22549	ArrayIndexing	b -> mins [ 0 ]
>22550	PrimaryExpression	0
>22551	PtrMemberAccess	b -> mins
>22552	Identifier	mins
>22553	Identifier	b
>22554	ArrayIndexing	vTop [ 0 ]
>22555	PrimaryExpression	0
>22556	Identifier	vTop
>22557	IdentifierDeclStatement	 
>22558	IdentifierDecl	vBottom
>22559	Identifier	vBottom
>22560	IdentifierDeclType	vec3_t
>22561	IdentifierDecl	vTop
>22562	Identifier	vTop
>22563	IdentifierDeclType	vec3_t
>22564	ExpressionStatement	 
>22565	AssignmentExpr	vCorners [ 3 ] [ 2 ] = fMid
>22566	Identifier	fMid
>22567	ArrayIndexing	vCorners [ 3 ] [ 2 ]
>22568	PrimaryExpression	2
>22569	ArrayIndexing	vCorners [ 3 ]
>22570	PrimaryExpression	3
>22571	Identifier	vCorners
>22572	ExpressionStatement	 
>22573	AssignmentExpr	vCorners [ 3 ] [ 1 ] = b -> mins [ 1 ]
>22574	ArrayIndexing	b -> mins [ 1 ]
>22575	PrimaryExpression	1
>22576	PtrMemberAccess	b -> mins
>22577	Identifier	mins
>22578	Identifier	b
>22579	ArrayIndexing	vCorners [ 3 ] [ 1 ]
>22580	PrimaryExpression	1
>22581	ArrayIndexing	vCorners [ 3 ]
>22582	PrimaryExpression	3
>22583	Identifier	vCorners
>22584	ExpressionStatement	 
>22585	AssignmentExpr	vCorners [ 3 ] [ 0 ] = b -> maxs [ 0 ]
>22586	ArrayIndexing	b -> maxs [ 0 ]
>22587	PrimaryExpression	0
>22588	PtrMemberAccess	b -> maxs
>22589	Identifier	maxs
>22590	Identifier	b
>22591	ArrayIndexing	vCorners [ 3 ] [ 0 ]
>22592	PrimaryExpression	0
>22593	ArrayIndexing	vCorners [ 3 ]
>22594	PrimaryExpression	3
>22595	Identifier	vCorners
>22596	ExpressionStatement	 
>22597	AssignmentExpr	vCorners [ 2 ] [ 2 ] = fMid
>22598	Identifier	fMid
>22599	ArrayIndexing	vCorners [ 2 ] [ 2 ]
>22600	PrimaryExpression	2
>22601	ArrayIndexing	vCorners [ 2 ]
>22602	PrimaryExpression	2
>22603	Identifier	vCorners
>22604	ExpressionStatement	 
>22605	AssignmentExpr	vCorners [ 2 ] [ 1 ] = b -> maxs [ 1 ]
>22606	ArrayIndexing	b -> maxs [ 1 ]
>22607	PrimaryExpression	1
>22608	PtrMemberAccess	b -> maxs
>22609	Identifier	maxs
>22610	Identifier	b
>22611	ArrayIndexing	vCorners [ 2 ] [ 1 ]
>22612	PrimaryExpression	1
>22613	ArrayIndexing	vCorners [ 2 ]
>22614	PrimaryExpression	2
>22615	Identifier	vCorners
>22616	ExpressionStatement	 
>22617	AssignmentExpr	vCorners [ 2 ] [ 0 ] = b -> maxs [ 0 ]
>22618	ArrayIndexing	b -> maxs [ 0 ]
>22619	PrimaryExpression	0
>22620	PtrMemberAccess	b -> maxs
>22621	Identifier	maxs
>22622	Identifier	b
>22623	ArrayIndexing	vCorners [ 2 ] [ 0 ]
>22624	PrimaryExpression	0
>22625	ArrayIndexing	vCorners [ 2 ]
>22626	PrimaryExpression	2
>22627	Identifier	vCorners
>22628	ExpressionStatement	 
>22629	AssignmentExpr	vCorners [ 1 ] [ 2 ] = fMid
>22630	Identifier	fMid
>22631	ArrayIndexing	vCorners [ 1 ] [ 2 ]
>22632	PrimaryExpression	2
>22633	ArrayIndexing	vCorners [ 1 ]
>22634	PrimaryExpression	1
>22635	Identifier	vCorners
>22636	ExpressionStatement	 
>22637	AssignmentExpr	vCorners [ 1 ] [ 1 ] = b -> maxs [ 1 ]
>22638	ArrayIndexing	b -> maxs [ 1 ]
>22639	PrimaryExpression	1
>22640	PtrMemberAccess	b -> maxs
>22641	Identifier	maxs
>22642	Identifier	b
>22643	ArrayIndexing	vCorners [ 1 ] [ 1 ]
>22644	PrimaryExpression	1
>22645	ArrayIndexing	vCorners [ 1 ]
>22646	PrimaryExpression	1
>22647	Identifier	vCorners
>22648	ExpressionStatement	 
>22649	AssignmentExpr	vCorners [ 1 ] [ 0 ] = b -> mins [ 0 ]
>22650	ArrayIndexing	b -> mins [ 0 ]
>22651	PrimaryExpression	0
>22652	PtrMemberAccess	b -> mins
>22653	Identifier	mins
>22654	Identifier	b
>22655	ArrayIndexing	vCorners [ 1 ] [ 0 ]
>22656	PrimaryExpression	0
>22657	ArrayIndexing	vCorners [ 1 ]
>22658	PrimaryExpression	1
>22659	Identifier	vCorners
>22660	ExpressionStatement	 
>22661	AssignmentExpr	vCorners [ 0 ] [ 2 ] = fMid
>22662	Identifier	fMid
>22663	ArrayIndexing	vCorners [ 0 ] [ 2 ]
>22664	PrimaryExpression	2
>22665	ArrayIndexing	vCorners [ 0 ]
>22666	PrimaryExpression	0
>22667	Identifier	vCorners
>22668	ExpressionStatement	 
>22669	AssignmentExpr	vCorners [ 0 ] [ 1 ] = b -> mins [ 1 ]
>22670	ArrayIndexing	b -> mins [ 1 ]
>22671	PrimaryExpression	1
>22672	PtrMemberAccess	b -> mins
>22673	Identifier	mins
>22674	Identifier	b
>22675	ArrayIndexing	vCorners [ 0 ] [ 1 ]
>22676	PrimaryExpression	1
>22677	ArrayIndexing	vCorners [ 0 ]
>22678	PrimaryExpression	0
>22679	Identifier	vCorners
>22680	ExpressionStatement	 
>22681	AssignmentExpr	vCorners [ 0 ] [ 0 ] = b -> mins [ 0 ]
>22682	ArrayIndexing	b -> mins [ 0 ]
>22683	PrimaryExpression	0
>22684	PtrMemberAccess	b -> mins
>22685	Identifier	mins
>22686	Identifier	b
>22687	ArrayIndexing	vCorners [ 0 ] [ 0 ]
>22688	PrimaryExpression	0
>22689	ArrayIndexing	vCorners [ 0 ]
>22690	PrimaryExpression	0
>22691	Identifier	vCorners
>22692	IdentifierDeclStatement	 
>22693	IdentifierDecl	fMid = b -> mins [ 2 ] + ( b -> maxs [ 2 ] - b -> mins [ 2 ] ) / 2
>22694	AssignmentExpr	fMid = b -> mins [ 2 ] + ( b -> maxs [ 2 ] - b -> mins [ 2 ] ) / 2
>22695	AdditiveExpression	b -> mins [ 2 ] + ( b -> maxs [ 2 ] - b -> mins [ 2 ] ) / 2
>22696	MultiplicativeExpression	( b -> maxs [ 2 ] - b -> mins [ 2 ] ) / 2
>22697	PrimaryExpression	2
>22698	AdditiveExpression	b -> maxs [ 2 ] - b -> mins [ 2 ]
>22699	ArrayIndexing	b -> mins [ 2 ]
>22700	PrimaryExpression	2
>22701	PtrMemberAccess	b -> mins
>22702	Identifier	mins
>22703	Identifier	b
>22704	ArrayIndexing	b -> maxs [ 2 ]
>22705	PrimaryExpression	2
>22706	PtrMemberAccess	b -> maxs
>22707	Identifier	maxs
>22708	Identifier	b
>22709	ArrayIndexing	b -> mins [ 2 ]
>22710	PrimaryExpression	2
>22711	PtrMemberAccess	b -> mins
>22712	Identifier	mins
>22713	Identifier	b
>22714	Identifier	fMid
>22715	Identifier	fMid
>22716	IdentifierDeclType	float
>22717	IdentifierDeclStatement	 
>22718	IdentifierDecl	vCorners [ 4 ]
>22719	PrimaryExpression	4
>22720	Identifier	vCorners
>22721	IdentifierDeclType	vec3_t [ 4 ]
>22722	Condition	 
>22723	AndExpression	g_PrefsDlg . m_bNewLightDraw && ( b -> owner -> eclass -> nShowFlags & ECLASS_LIGHT )
>22724	BitAndExpression	b -> owner -> eclass -> nShowFlags & ECLASS_LIGHT
>22725	Identifier	ECLASS_LIGHT
>22726	PtrMemberAccess	b -> owner -> eclass -> nShowFlags
>22727	Identifier	nShowFlags
>22728	PtrMemberAccess	b -> owner -> eclass
>22729	Identifier	eclass
>22730	PtrMemberAccess	b -> owner
>22731	Identifier	owner
>22732	Identifier	b
>22733	MemberAccess	g_PrefsDlg . m_bNewLightDraw
>22734	Identifier	m_bNewLightDraw
>22735	Identifier	g_PrefsDlg
>22736	Condition	 
>22737	PtrMemberAccess	b -> owner -> eclass -> fixedsize
>22738	Identifier	fixedsize
>22739	PtrMemberAccess	b -> owner -> eclass
>22740	Identifier	eclass
>22741	PtrMemberAccess	b -> owner
>22742	Identifier	owner
>22743	Identifier	b
>22744	IfStatement	if ( b -> terrainBrush )
>22745	CompoundStatement	 
>22746	ExpressionStatement	 
>22747	CallExpression	Terrain_DrawXY ( b -> pTerrain , b -> owner )
>22748	ArgumentList	b -> pTerrain
>22749	Argument	b -> owner
>22750	PtrMemberAccess	b -> owner
>22751	Identifier	owner
>22752	Identifier	b
>22753	Argument	b -> pTerrain
>22754	PtrMemberAccess	b -> pTerrain
>22755	Identifier	pTerrain
>22756	Identifier	b
>22757	Callee	Terrain_DrawXY
>22758	Identifier	Terrain_DrawXY
>22759	Condition	 
>22760	PtrMemberAccess	b -> terrainBrush
>22761	Identifier	terrainBrush
>22762	Identifier	b
>22763	IfStatement	if ( b -> patchBrush )
>22764	CompoundStatement	 
>22765	IfStatement	if ( ! g_bPatchShowBounds )
>22766	ReturnStatement	 
>22767	Condition	 
>22768	UnaryOp	! g_bPatchShowBounds
>22769	Identifier	g_bPatchShowBounds
>22770	UnaryOperator	!
>22771	ExpressionStatement	 
>22772	CallExpression	Patch_DrawXY ( b -> pPatch )
>22773	ArgumentList	b -> pPatch
>22774	Argument	b -> pPatch
>22775	PtrMemberAccess	b -> pPatch
>22776	Identifier	pPatch
>22777	Identifier	b
>22778	Callee	Patch_DrawXY
>22779	Identifier	Patch_DrawXY
>22780	Condition	 
>22781	PtrMemberAccess	b -> patchBrush
>22782	Identifier	patchBrush
>22783	Identifier	b
>22784	IfStatement	if ( b -> hiddenBrush )
>22785	CompoundStatement	 
>22786	ReturnStatement	 
>22787	Condition	 
>22788	PtrMemberAccess	b -> hiddenBrush
>22789	Identifier	hiddenBrush
>22790	Identifier	b
>22791	IdentifierDeclStatement	 
>22792	IdentifierDecl	i
>22793	Identifier	i
>22794	IdentifierDeclType	int
>22795	IdentifierDeclStatement	 
>22796	IdentifierDecl	* w
>22797	Identifier	w
>22798	IdentifierDeclType	winding_t *
>22799	IdentifierDeclStatement	 
>22800	IdentifierDecl	order
>22801	Identifier	order
>22802	IdentifierDeclType	int
>22803	IdentifierDeclStatement	 
>22804	IdentifierDecl	* face
>22805	Identifier	face
>22806	IdentifierDeclType	face_t *
>22871	FunctionDef	Brush_Move (brush_t * b , const vec3_t move , bool bSnap)
>22872	ParameterList	brush_t * b , const vec3_t move , bool bSnap
>22873	Parameter	 
>22874	Identifier	bSnap
>22875	ParameterType	bool
>22876	Parameter	 
>22877	Identifier	move
>22878	ParameterType	const vec3_t
>22879	Parameter	 
>22880	Identifier	b
>22881	ParameterType	brush_t *
>22882	ReturnType	void
>22883	CompoundStatement	 
>22884	IfStatement	if ( b -> owner -> eclass -> fixedsize )
>22885	CompoundStatement	 
>22886	ExpressionStatement	 
>22887	CallExpression	VectorAdd ( b -> owner -> origin , move , b -> owner -> origin )
>22888	ArgumentList	b -> owner -> origin
>22889	Argument	b -> owner -> origin
>22890	PtrMemberAccess	b -> owner -> origin
>22891	Identifier	origin
>22892	PtrMemberAccess	b -> owner
>22893	Identifier	owner
>22894	Identifier	b
>22895	Argument	move
>22896	Identifier	move
>22897	Argument	b -> owner -> origin
>22898	PtrMemberAccess	b -> owner -> origin
>22899	Identifier	origin
>22900	PtrMemberAccess	b -> owner
>22901	Identifier	owner
>22902	Identifier	b
>22903	Callee	VectorAdd
>22904	Identifier	VectorAdd
>22905	Condition	 
>22906	PtrMemberAccess	b -> owner -> eclass -> fixedsize
>22907	Identifier	fixedsize
>22908	PtrMemberAccess	b -> owner -> eclass
>22909	Identifier	eclass
>22910	PtrMemberAccess	b -> owner
>22911	Identifier	owner
>22912	Identifier	b
>22913	IfStatement	if ( b -> terrainBrush )
>22914	CompoundStatement	 
>22915	ExpressionStatement	 
>22916	CallExpression	Terrain_Move ( b -> pTerrain , move )
>22917	ArgumentList	b -> pTerrain
>22918	Argument	move
>22919	Identifier	move
>22920	Argument	b -> pTerrain
>22921	PtrMemberAccess	b -> pTerrain
>22922	Identifier	pTerrain
>22923	Identifier	b
>22924	Callee	Terrain_Move
>22925	Identifier	Terrain_Move
>22926	Condition	 
>22927	PtrMemberAccess	b -> terrainBrush
>22928	Identifier	terrainBrush
>22929	Identifier	b
>22930	IfStatement	if ( b -> patchBrush )
>22931	CompoundStatement	 
>22932	ExpressionStatement	 
>22933	CallExpression	Patch_Move ( b -> pPatch , move )
>22934	ArgumentList	b -> pPatch
>22935	Argument	move
>22936	Identifier	move
>22937	Argument	b -> pPatch
>22938	PtrMemberAccess	b -> pPatch
>22939	Identifier	pPatch
>22940	Identifier	b
>22941	Callee	Patch_Move
>22942	Identifier	Patch_Move
>22943	Condition	 
>22944	PtrMemberAccess	b -> patchBrush
>22945	Identifier	patchBrush
>22946	Identifier	b
>22947	ExpressionStatement	 
>22948	CallExpression	Brush_Build ( b , bSnap )
>22949	ArgumentList	b
>22950	Argument	bSnap
>22951	Identifier	bSnap
>22952	Argument	b
>22953	Identifier	b
>22954	Callee	Brush_Build
>22955	Identifier	Brush_Build
>22956	ForStatement	for ( f = b -> brush_faces ; f ; f = f -> next )
>22957	CompoundStatement	 
>22958	ForStatement	for ( i = 0 ; i < 3 ; i ++ )
>22959	ExpressionStatement	 
>22960	CallExpression	VectorAdd ( f -> planepts [ i ] , move , f -> planepts [ i ] )
>22961	ArgumentList	f -> planepts [ i ]
>22962	Argument	f -> planepts [ i ]
>22963	ArrayIndexing	f -> planepts [ i ]
>22964	Identifier	i
>22965	PtrMemberAccess	f -> planepts
>22966	Identifier	planepts
>22967	Identifier	f
>22968	Argument	move
>22969	Identifier	move
>22970	Argument	f -> planepts [ i ]
>22971	ArrayIndexing	f -> planepts [ i ]
>22972	Identifier	i
>22973	PtrMemberAccess	f -> planepts
>22974	Identifier	planepts
>22975	Identifier	f
>22976	Callee	VectorAdd
>22977	Identifier	VectorAdd
>22978	IncDecOp	 
>22979	IncDec	++
>22980	Identifier	i
>22981	Condition	 
>22982	RelationalExpression	i < 3
>22983	PrimaryExpression	3
>22984	Identifier	i
>22985	ForInit	 
>22986	AssignmentExpr	i = 0
>22987	PrimaryExpression	0
>22988	Identifier	i
>22989	IfStatement	if ( g_PrefsDlg . m_bTextureLock )
>22990	ExpressionStatement	 
>22991	CallExpression	Face_MoveTexture ( f , vTemp )
>22992	ArgumentList	f
>22993	Argument	vTemp
>22994	Identifier	vTemp
>22995	Argument	f
>22996	Identifier	f
>22997	Callee	Face_MoveTexture
>22998	Identifier	Face_MoveTexture
>22999	Condition	 
>23000	MemberAccess	g_PrefsDlg . m_bTextureLock
>23001	Identifier	m_bTextureLock
>23002	Identifier	g_PrefsDlg
>23003	ExpressionStatement	 
>23004	CallExpression	VectorCopy ( move , vTemp )
>23005	ArgumentList	move
>23006	Argument	vTemp
>23007	Identifier	vTemp
>23008	Argument	move
>23009	Identifier	move
>23010	Callee	VectorCopy
>23011	Identifier	VectorCopy
>23012	IdentifierDeclStatement	 
>23013	IdentifierDecl	vTemp
>23014	Identifier	vTemp
>23015	IdentifierDeclType	vec3_t
>23016	AssignmentExpr	 
>23017	PtrMemberAccess	f -> next
>23018	Identifier	next
>23019	Identifier	f
>23020	Identifier	f
>23021	Condition	 
>23022	Identifier	f
>23023	ForInit	 
>23024	AssignmentExpr	f = b -> brush_faces
>23025	PtrMemberAccess	b -> brush_faces
>23026	Identifier	brush_faces
>23027	Identifier	b
>23028	Identifier	f
>23029	IdentifierDeclStatement	 
>23030	IdentifierDecl	* f
>23031	Identifier	f
>23032	IdentifierDeclType	face_t *
>23033	IdentifierDeclStatement	 
>23034	IdentifierDecl	i
>23035	Identifier	i
>23036	IdentifierDeclType	int
>23069	FunctionDef	Brush_Print (brush_t * b)
>23070	ParameterList	brush_t * b
>23071	Parameter	 
>23072	Identifier	b
>23073	ParameterType	brush_t *
>23074	ReturnType	void
>23075	CompoundStatement	 
>23076	ForStatement	for ( face_t * f = b -> brush_faces ; f ; f = f -> next )
>23077	CompoundStatement	 
>23078	ExpressionStatement	 
>23079	CallExpression	Sys_Printf ( \"%f %f %f\n\" , f -> planepts [ 2 ] [ 0 ] , f -> planepts [ 2 ] [ 1 ] , f -> planepts [ 2 ] [ 2 ] )
>23080	ArgumentList	\"%f %f %f\n\"
>23081	Argument	f -> planepts [ 2 ] [ 2 ]
>23082	ArrayIndexing	f -> planepts [ 2 ] [ 2 ]
>23083	PrimaryExpression	2
>23084	ArrayIndexing	f -> planepts [ 2 ]
>23085	PrimaryExpression	2
>23086	PtrMemberAccess	f -> planepts
>23087	Identifier	planepts
>23088	Identifier	f
>23089	Argument	f -> planepts [ 2 ] [ 1 ]
>23090	ArrayIndexing	f -> planepts [ 2 ] [ 1 ]
>23091	PrimaryExpression	1
>23092	ArrayIndexing	f -> planepts [ 2 ]
>23093	PrimaryExpression	2
>23094	PtrMemberAccess	f -> planepts
>23095	Identifier	planepts
>23096	Identifier	f
>23097	Argument	f -> planepts [ 2 ] [ 0 ]
>23098	ArrayIndexing	f -> planepts [ 2 ] [ 0 ]
>23099	PrimaryExpression	0
>23100	ArrayIndexing	f -> planepts [ 2 ]
>23101	PrimaryExpression	2
>23102	PtrMemberAccess	f -> planepts
>23103	Identifier	planepts
>23104	Identifier	f
>23105	Argument	\"%f %f %f\n\"
>23106	PrimaryExpression	\"%f %f %f\n\"
>23107	Callee	Sys_Printf
>23108	Identifier	Sys_Printf
>23109	ExpressionStatement	 
>23110	CallExpression	Sys_Printf ( \"%f %f %f\n\" , f -> planepts [ 1 ] [ 0 ] , f -> planepts [ 1 ] [ 1 ] , f -> planepts [ 1 ] [ 2 ] )
>23111	ArgumentList	\"%f %f %f\n\"
>23112	Argument	f -> planepts [ 1 ] [ 2 ]
>23113	ArrayIndexing	f -> planepts [ 1 ] [ 2 ]
>23114	PrimaryExpression	2
>23115	ArrayIndexing	f -> planepts [ 1 ]
>23116	PrimaryExpression	1
>23117	PtrMemberAccess	f -> planepts
>23118	Identifier	planepts
>23119	Identifier	f
>23120	Argument	f -> planepts [ 1 ] [ 1 ]
>23121	ArrayIndexing	f -> planepts [ 1 ] [ 1 ]
>23122	PrimaryExpression	1
>23123	ArrayIndexing	f -> planepts [ 1 ]
>23124	PrimaryExpression	1
>23125	PtrMemberAccess	f -> planepts
>23126	Identifier	planepts
>23127	Identifier	f
>23128	Argument	f -> planepts [ 1 ] [ 0 ]
>23129	ArrayIndexing	f -> planepts [ 1 ] [ 0 ]
>23130	PrimaryExpression	0
>23131	ArrayIndexing	f -> planepts [ 1 ]
>23132	PrimaryExpression	1
>23133	PtrMemberAccess	f -> planepts
>23134	Identifier	planepts
>23135	Identifier	f
>23136	Argument	\"%f %f %f\n\"
>23137	PrimaryExpression	\"%f %f %f\n\"
>23138	Callee	Sys_Printf
>23139	Identifier	Sys_Printf
>23140	ExpressionStatement	 
>23141	CallExpression	Sys_Printf ( \"%f %f %f\n\" , f -> planepts [ 0 ] [ 0 ] , f -> planepts [ 0 ] [ 1 ] , f -> planepts [ 0 ] [ 2 ] )
>23142	ArgumentList	\"%f %f %f\n\"
>23143	Argument	f -> planepts [ 0 ] [ 2 ]
>23144	ArrayIndexing	f -> planepts [ 0 ] [ 2 ]
>23145	PrimaryExpression	2
>23146	ArrayIndexing	f -> planepts [ 0 ]
>23147	PrimaryExpression	0
>23148	PtrMemberAccess	f -> planepts
>23149	Identifier	planepts
>23150	Identifier	f
>23151	Argument	f -> planepts [ 0 ] [ 1 ]
>23152	ArrayIndexing	f -> planepts [ 0 ] [ 1 ]
>23153	PrimaryExpression	1
>23154	ArrayIndexing	f -> planepts [ 0 ]
>23155	PrimaryExpression	0
>23156	PtrMemberAccess	f -> planepts
>23157	Identifier	planepts
>23158	Identifier	f
>23159	Argument	f -> planepts [ 0 ] [ 0 ]
>23160	ArrayIndexing	f -> planepts [ 0 ] [ 0 ]
>23161	PrimaryExpression	0
>23162	ArrayIndexing	f -> planepts [ 0 ]
>23163	PrimaryExpression	0
>23164	PtrMemberAccess	f -> planepts
>23165	Identifier	planepts
>23166	Identifier	f
>23167	Argument	\"%f %f %f\n\"
>23168	PrimaryExpression	\"%f %f %f\n\"
>23169	Callee	Sys_Printf
>23170	Identifier	Sys_Printf
>23171	ExpressionStatement	 
>23172	CallExpression	Sys_Printf ( \"Face %i\n\" , nFace ++ )
>23173	ArgumentList	\"Face %i\n\"
>23174	Argument	nFace ++
>23175	IncDecOp	nFace ++
>23176	IncDec	++
>23177	Identifier	nFace
>23178	Argument	\"Face %i\n\"
>23179	PrimaryExpression	\"Face %i\n\"
>23180	Callee	Sys_Printf
>23181	Identifier	Sys_Printf
>23182	AssignmentExpr	 
>23183	PtrMemberAccess	f -> next
>23184	Identifier	next
>23185	Identifier	f
>23186	Identifier	f
>23187	Condition	 
>23188	Identifier	f
>23189	ForInit	 
>23190	IdentifierDeclStatement	face_t * f = b -> brush_faces ;
>23191	IdentifierDecl	* f = b -> brush_faces
>23192	AssignmentExpr	* f = b -> brush_faces
>23193	PtrMemberAccess	b -> brush_faces
>23194	Identifier	brush_faces
>23195	Identifier	b
>23196	Identifier	f
>23197	Identifier	f
>23198	IdentifierDeclType	face_t *
>23199	IdentifierDeclStatement	 
>23200	IdentifierDecl	nFace = 0
>23201	AssignmentExpr	nFace = 0
>23202	PrimaryExpression	0
>23203	Identifier	nFace
>23204	Identifier	nFace
>23205	IdentifierDeclType	int
>23221	FunctionDef	Brush_MakeSidedCone (int sides)
>23222	ParameterList	int sides
>23223	Parameter	 
>23224	Identifier	sides
>23225	ParameterType	int
>23226	ReturnType	void
>23227	CompoundStatement	 
>23228	ExpressionStatement	 
>23229	CallExpression	Sys_UpdateWindows ( W_ALL )
>23230	ArgumentList	W_ALL
>23231	Argument	W_ALL
>23232	Identifier	W_ALL
>23233	Callee	Sys_UpdateWindows
>23234	Identifier	Sys_UpdateWindows
>23235	ExpressionStatement	 
>23236	CallExpression	Brush_Build ( b )
>23237	ArgumentList	b
>23238	Argument	b
>23239	Identifier	b
>23240	Callee	Brush_Build
>23241	Identifier	Brush_Build
>23242	ExpressionStatement	 
>23243	CallExpression	Entity_LinkBrush ( world_entity , b )
>23244	ArgumentList	world_entity
>23245	Argument	b
>23246	Identifier	b
>23247	Argument	world_entity
>23248	Identifier	world_entity
>23249	Callee	Entity_LinkBrush
>23250	Identifier	Entity_LinkBrush
>23251	ExpressionStatement	 
>23252	CallExpression	Brush_AddToList ( b , & selected_brushes )
>23253	ArgumentList	b
>23254	Argument	& selected_brushes
>23255	UnaryOp	& selected_brushes
>23256	Identifier	selected_brushes
>23257	UnaryOperator	&
>23258	Argument	b
>23259	Identifier	b
>23260	Callee	Brush_AddToList
>23261	Identifier	Brush_AddToList
>23262	ForStatement	for ( i = 0 ; i < sides ; i ++ )
>23263	CompoundStatement	 
>23264	ExpressionStatement	 
>23265	AssignmentExpr	f -> planepts [ 2 ] [ 2 ] = maxs [ 2 ]
>23266	ArrayIndexing	maxs [ 2 ]
>23267	PrimaryExpression	2
>23268	Identifier	maxs
>23269	ArrayIndexing	f -> planepts [ 2 ] [ 2 ]
>23270	PrimaryExpression	2
>23271	ArrayIndexing	f -> planepts [ 2 ]
>23272	PrimaryExpression	2
>23273	PtrMemberAccess	f -> planepts
>23274	Identifier	planepts
>23275	Identifier	f
>23276	ExpressionStatement	 
>23277	AssignmentExpr	f -> planepts [ 2 ] [ 1 ] = floor ( f -> planepts [ 0 ] [ 1 ] + width * cv + 0.5 )
>23278	CallExpression	floor ( f -> planepts [ 0 ] [ 1 ] + width * cv + 0.5 )
>23279	ArgumentList	f -> planepts [ 0 ] [ 1 ] + width * cv + 0.5
>23280	Argument	f -> planepts [ 0 ] [ 1 ] + width * cv + 0.5
>23281	AdditiveExpression	f -> planepts [ 0 ] [ 1 ] + width * cv + 0.5
>23282	AdditiveExpression	width * cv + 0.5
>23283	PrimaryExpression	0.5
>23284	MultiplicativeExpression	width * cv
>23285	Identifier	cv
>23286	Identifier	width
>23287	ArrayIndexing	f -> planepts [ 0 ] [ 1 ]
>23288	PrimaryExpression	1
>23289	ArrayIndexing	f -> planepts [ 0 ]
>23290	PrimaryExpression	0
>23291	PtrMemberAccess	f -> planepts
>23292	Identifier	planepts
>23293	Identifier	f
>23294	Callee	floor
>23295	Identifier	floor
>23296	ArrayIndexing	f -> planepts [ 2 ] [ 1 ]
>23297	PrimaryExpression	1
>23298	ArrayIndexing	f -> planepts [ 2 ]
>23299	PrimaryExpression	2
>23300	PtrMemberAccess	f -> planepts
>23301	Identifier	planepts
>23302	Identifier	f
>23303	ExpressionStatement	 
>23304	AssignmentExpr	f -> planepts [ 2 ] [ 0 ] = floor ( f -> planepts [ 0 ] [ 0 ] - width * sv + 0.5 )
>23305	CallExpression	floor ( f -> planepts [ 0 ] [ 0 ] - width * sv + 0.5 )
>23306	ArgumentList	f -> planepts [ 0 ] [ 0 ] - width * sv + 0.5
>23307	Argument	f -> planepts [ 0 ] [ 0 ] - width * sv + 0.5
>23308	AdditiveExpression	f -> planepts [ 0 ] [ 0 ] - width * sv + 0.5
>23309	AdditiveExpression	width * sv + 0.5
>23310	PrimaryExpression	0.5
>23311	MultiplicativeExpression	width * sv
>23312	Identifier	sv
>23313	Identifier	width
>23314	ArrayIndexing	f -> planepts [ 0 ] [ 0 ]
>23315	PrimaryExpression	0
>23316	ArrayIndexing	f -> planepts [ 0 ]
>23317	PrimaryExpression	0
>23318	PtrMemberAccess	f -> planepts
>23319	Identifier	planepts
>23320	Identifier	f
>23321	Callee	floor
>23322	Identifier	floor
>23323	ArrayIndexing	f -> planepts [ 2 ] [ 0 ]
>23324	PrimaryExpression	0
>23325	ArrayIndexing	f -> planepts [ 2 ]
>23326	PrimaryExpression	2
>23327	PtrMemberAccess	f -> planepts
>23328	Identifier	planepts
>23329	Identifier	f
>23330	ExpressionStatement	 
>23331	AssignmentExpr	f -> planepts [ 1 ] [ 2 ] = maxs [ 2 ]
>23332	ArrayIndexing	maxs [ 2 ]
>23333	PrimaryExpression	2
>23334	Identifier	maxs
>23335	ArrayIndexing	f -> planepts [ 1 ] [ 2 ]
>23336	PrimaryExpression	2
>23337	ArrayIndexing	f -> planepts [ 1 ]
>23338	PrimaryExpression	1
>23339	PtrMemberAccess	f -> planepts
>23340	Identifier	planepts
>23341	Identifier	f
>23342	ExpressionStatement	 
>23343	AssignmentExpr	f -> planepts [ 1 ] [ 1 ] = mid [ 1 ]
>23344	ArrayIndexing	mid [ 1 ]
>23345	PrimaryExpression	1
>23346	Identifier	mid
>23347	ArrayIndexing	f -> planepts [ 1 ] [ 1 ]
>23348	PrimaryExpression	1
>23349	ArrayIndexing	f -> planepts [ 1 ]
>23350	PrimaryExpression	1
>23351	PtrMemberAccess	f -> planepts
>23352	Identifier	planepts
>23353	Identifier	f
>23354	ExpressionStatement	 
>23355	AssignmentExpr	f -> planepts [ 1 ] [ 0 ] = mid [ 0 ]
>23356	ArrayIndexing	mid [ 0 ]
>23357	PrimaryExpression	0
>23358	Identifier	mid
>23359	ArrayIndexing	f -> planepts [ 1 ] [ 0 ]
>23360	PrimaryExpression	0
>23361	ArrayIndexing	f -> planepts [ 1 ]
>23362	PrimaryExpression	1
>23363	PtrMemberAccess	f -> planepts
>23364	Identifier	planepts
>23365	Identifier	f
>23366	ExpressionStatement	 
>23367	AssignmentExpr	f -> planepts [ 0 ] [ 2 ] = mins [ 2 ]
>23368	ArrayIndexing	mins [ 2 ]
>23369	PrimaryExpression	2
>23370	Identifier	mins
>23371	ArrayIndexing	f -> planepts [ 0 ] [ 2 ]
>23372	PrimaryExpression	2
>23373	ArrayIndexing	f -> planepts [ 0 ]
>23374	PrimaryExpression	0
>23375	PtrMemberAccess	f -> planepts
>23376	Identifier	planepts
>23377	Identifier	f
>23378	ExpressionStatement	 
>23379	AssignmentExpr	f -> planepts [ 0 ] [ 1 ] = floor ( mid [ 1 ] + width * sv + 0.5 )
>23380	CallExpression	floor ( mid [ 1 ] + width * sv + 0.5 )
>23381	ArgumentList	mid [ 1 ] + width * sv + 0.5
>23382	Argument	mid [ 1 ] + width * sv + 0.5
>23383	AdditiveExpression	mid [ 1 ] + width * sv + 0.5
>23384	AdditiveExpression	width * sv + 0.5
>23385	PrimaryExpression	0.5
>23386	MultiplicativeExpression	width * sv
>23387	Identifier	sv
>23388	Identifier	width
>23389	ArrayIndexing	mid [ 1 ]
>23390	PrimaryExpression	1
>23391	Identifier	mid
>23392	Callee	floor
>23393	Identifier	floor
>23394	ArrayIndexing	f -> planepts [ 0 ] [ 1 ]
>23395	PrimaryExpression	1
>23396	ArrayIndexing	f -> planepts [ 0 ]
>23397	PrimaryExpression	0
>23398	PtrMemberAccess	f -> planepts
>23399	Identifier	planepts
>23400	Identifier	f
>23401	ExpressionStatement	 
>23402	AssignmentExpr	f -> planepts [ 0 ] [ 0 ] = floor ( mid [ 0 ] + width * cv + 0.5 )
>23403	CallExpression	floor ( mid [ 0 ] + width * cv + 0.5 )
>23404	ArgumentList	mid [ 0 ] + width * cv + 0.5
>23405	Argument	mid [ 0 ] + width * cv + 0.5
>23406	AdditiveExpression	mid [ 0 ] + width * cv + 0.5
>23407	AdditiveExpression	width * cv + 0.5
>23408	PrimaryExpression	0.5
>23409	MultiplicativeExpression	width * cv
>23410	Identifier	cv
>23411	Identifier	width
>23412	ArrayIndexing	mid [ 0 ]
>23413	PrimaryExpression	0
>23414	Identifier	mid
>23415	Callee	floor
>23416	Identifier	floor
>23417	ArrayIndexing	f -> planepts [ 0 ] [ 0 ]
>23418	PrimaryExpression	0
>23419	ArrayIndexing	f -> planepts [ 0 ]
>23420	PrimaryExpression	0
>23421	PtrMemberAccess	f -> planepts
>23422	Identifier	planepts
>23423	Identifier	f
>23424	ExpressionStatement	 
>23425	AssignmentExpr	cv = cos ( i * 3.14159265 * 2 / sides )
>23426	CallExpression	cos ( i * 3.14159265 * 2 / sides )
>23427	ArgumentList	i * 3.14159265 * 2 / sides
>23428	Argument	i * 3.14159265 * 2 / sides
>23429	MultiplicativeExpression	i * 3.14159265 * 2 / sides
>23430	MultiplicativeExpression	3.14159265 * 2 / sides
>23431	MultiplicativeExpression	2 / sides
>23432	Identifier	sides
>23433	PrimaryExpression	2
>23434	PrimaryExpression	3.14159265
>23435	Identifier	i
>23436	Callee	cos
>23437	Identifier	cos
>23438	Identifier	cv
>23439	ExpressionStatement	 
>23440	AssignmentExpr	sv = sin ( i * 3.14159265 * 2 / sides )
>23441	CallExpression	sin ( i * 3.14159265 * 2 / sides )
>23442	ArgumentList	i * 3.14159265 * 2 / sides
>23443	Argument	i * 3.14159265 * 2 / sides
>23444	MultiplicativeExpression	i * 3.14159265 * 2 / sides
>23445	MultiplicativeExpression	3.14159265 * 2 / sides
>23446	MultiplicativeExpression	2 / sides
>23447	Identifier	sides
>23448	PrimaryExpression	2
>23449	PrimaryExpression	3.14159265
>23450	Identifier	i
>23451	Callee	sin
>23452	Identifier	sin
>23453	Identifier	sv
>23454	ExpressionStatement	 
>23455	AssignmentExpr	b -> brush_faces = f
>23456	Identifier	f
>23457	PtrMemberAccess	b -> brush_faces
>23458	Identifier	brush_faces
>23459	Identifier	b
>23460	ExpressionStatement	 
>23461	AssignmentExpr	f -> next = b -> brush_faces
>23462	PtrMemberAccess	b -> brush_faces
>23463	Identifier	brush_faces
>23464	Identifier	b
>23465	PtrMemberAccess	f -> next
>23466	Identifier	next
>23467	Identifier	f
>23468	ExpressionStatement	 
>23469	AssignmentExpr	f -> texdef = * texdef
>23470	UnaryOp	* texdef
>23471	Identifier	texdef
>23472	UnaryOperator	*
>23473	PtrMemberAccess	f -> texdef
>23474	Identifier	texdef
>23475	Identifier	f
>23476	ExpressionStatement	 
>23477	AssignmentExpr	f = Face_Alloc ( )
>23478	CallExpression	Face_Alloc ( )
>23479	ArgumentList	 
>23480	Callee	Face_Alloc
>23481	Identifier	Face_Alloc
>23482	Identifier	f
>23483	IncDecOp	 
>23484	IncDec	++
>23485	Identifier	i
>23486	Condition	 
>23487	RelationalExpression	i < sides
>23488	Identifier	sides
>23489	Identifier	i
>23490	ForInit	 
>23491	AssignmentExpr	i = 0
>23492	PrimaryExpression	0
>23493	Identifier	i
>23494	ExpressionStatement	 
>23495	AssignmentExpr	f -> planepts [ 2 ] [ 2 ] = mins [ 2 ]
>23496	ArrayIndexing	mins [ 2 ]
>23497	PrimaryExpression	2
>23498	Identifier	mins
>23499	ArrayIndexing	f -> planepts [ 2 ] [ 2 ]
>23500	PrimaryExpression	2
>23501	ArrayIndexing	f -> planepts [ 2 ]
>23502	PrimaryExpression	2
>23503	PtrMemberAccess	f -> planepts
>23504	Identifier	planepts
>23505	Identifier	f
>23506	ExpressionStatement	 
>23507	AssignmentExpr	f -> planepts [ 2 ] [ 1 ] = maxs [ 1 ]
>23508	ArrayIndexing	maxs [ 1 ]
>23509	PrimaryExpression	1
>23510	Identifier	maxs
>23511	ArrayIndexing	f -> planepts [ 2 ] [ 1 ]
>23512	PrimaryExpression	1
>23513	ArrayIndexing	f -> planepts [ 2 ]
>23514	PrimaryExpression	2
>23515	PtrMemberAccess	f -> planepts
>23516	Identifier	planepts
>23517	Identifier	f
>23518	ExpressionStatement	 
>23519	AssignmentExpr	f -> planepts [ 2 ] [ 0 ] = maxs [ 0 ]
>23520	ArrayIndexing	maxs [ 0 ]
>23521	PrimaryExpression	0
>23522	Identifier	maxs
>23523	ArrayIndexing	f -> planepts [ 2 ] [ 0 ]
>23524	PrimaryExpression	0
>23525	ArrayIndexing	f -> planepts [ 2 ]
>23526	PrimaryExpression	2
>23527	PtrMemberAccess	f -> planepts
>23528	Identifier	planepts
>23529	Identifier	f
>23530	ExpressionStatement	 
>23531	AssignmentExpr	f -> planepts [ 1 ] [ 2 ] = mins [ 2 ]
>23532	ArrayIndexing	mins [ 2 ]
>23533	PrimaryExpression	2
>23534	Identifier	mins
>23535	ArrayIndexing	f -> planepts [ 1 ] [ 2 ]
>23536	PrimaryExpression	2
>23537	ArrayIndexing	f -> planepts [ 1 ]
>23538	PrimaryExpression	1
>23539	PtrMemberAccess	f -> planepts
>23540	Identifier	planepts
>23541	Identifier	f
>23542	ExpressionStatement	 
>23543	AssignmentExpr	f -> planepts [ 1 ] [ 1 ] = mins [ 1 ]
>23544	ArrayIndexing	mins [ 1 ]
>23545	PrimaryExpression	1
>23546	Identifier	mins
>23547	ArrayIndexing	f -> planepts [ 1 ] [ 1 ]
>23548	PrimaryExpression	1
>23549	ArrayIndexing	f -> planepts [ 1 ]
>23550	PrimaryExpression	1
>23551	PtrMemberAccess	f -> planepts
>23552	Identifier	planepts
>23553	Identifier	f
>23554	ExpressionStatement	 
>23555	AssignmentExpr	f -> planepts [ 1 ] [ 0 ] = maxs [ 0 ]
>23556	ArrayIndexing	maxs [ 0 ]
>23557	PrimaryExpression	0
>23558	Identifier	maxs
>23559	ArrayIndexing	f -> planepts [ 1 ] [ 0 ]
>23560	PrimaryExpression	0
>23561	ArrayIndexing	f -> planepts [ 1 ]
>23562	PrimaryExpression	1
>23563	PtrMemberAccess	f -> planepts
>23564	Identifier	planepts
>23565	Identifier	f
>23566	ExpressionStatement	 
>23567	AssignmentExpr	f -> planepts [ 0 ] [ 2 ] = mins [ 2 ]
>23568	ArrayIndexing	mins [ 2 ]
>23569	PrimaryExpression	2
>23570	Identifier	mins
>23571	ArrayIndexing	f -> planepts [ 0 ] [ 2 ]
>23572	PrimaryExpression	2
>23573	ArrayIndexing	f -> planepts [ 0 ]
>23574	PrimaryExpression	0
>23575	PtrMemberAccess	f -> planepts
>23576	Identifier	planepts
>23577	Identifier	f
>23578	ExpressionStatement	 
>23579	AssignmentExpr	f -> planepts [ 0 ] [ 1 ] = mins [ 1 ]
>23580	ArrayIndexing	mins [ 1 ]
>23581	PrimaryExpression	1
>23582	Identifier	mins
>23583	ArrayIndexing	f -> planepts [ 0 ] [ 1 ]
>23584	PrimaryExpression	1
>23585	ArrayIndexing	f -> planepts [ 0 ]
>23586	PrimaryExpression	0
>23587	PtrMemberAccess	f -> planepts
>23588	Identifier	planepts
>23589	Identifier	f
>23590	ExpressionStatement	 
>23591	AssignmentExpr	f -> planepts [ 0 ] [ 0 ] = mins [ 0 ]
>23592	ArrayIndexing	mins [ 0 ]
>23593	PrimaryExpression	0
>23594	Identifier	mins
>23595	ArrayIndexing	f -> planepts [ 0 ] [ 0 ]
>23596	PrimaryExpression	0
>23597	ArrayIndexing	f -> planepts [ 0 ]
>23598	PrimaryExpression	0
>23599	PtrMemberAccess	f -> planepts
>23600	Identifier	planepts
>23601	Identifier	f
>23602	ExpressionStatement	 
>23603	AssignmentExpr	b -> brush_faces = f
>23604	Identifier	f
>23605	PtrMemberAccess	b -> brush_faces
>23606	Identifier	brush_faces
>23607	Identifier	b
>23608	ExpressionStatement	 
>23609	AssignmentExpr	f -> next = b -> brush_faces
>23610	PtrMemberAccess	b -> brush_faces
>23611	Identifier	brush_faces
>23612	Identifier	b
>23613	PtrMemberAccess	f -> next
>23614	Identifier	next
>23615	Identifier	f
>23616	ExpressionStatement	 
>23617	AssignmentExpr	f -> texdef = * texdef
>23618	UnaryOp	* texdef
>23619	Identifier	texdef
>23620	UnaryOperator	*
>23621	PtrMemberAccess	f -> texdef
>23622	Identifier	texdef
>23623	Identifier	f
>23624	ExpressionStatement	 
>23625	AssignmentExpr	f = Face_Alloc ( )
>23626	CallExpression	Face_Alloc ( )
>23627	ArgumentList	 
>23628	Callee	Face_Alloc
>23629	Identifier	Face_Alloc
>23630	Identifier	f
>23631	ExpressionStatement	 
>23632	AssignmentExpr	b = Brush_Alloc ( )
>23633	CallExpression	Brush_Alloc ( )
>23634	ArgumentList	 
>23635	Callee	Brush_Alloc
>23636	Identifier	Brush_Alloc
>23637	Identifier	b
>23638	ExpressionStatement	 
>23639	AssignmentExpr	width /= 2
>23640	PrimaryExpression	2
>23641	Identifier	width
>23642	ForStatement	for ( i = 0 ; i < 2 ; i ++ )
>23643	CompoundStatement	 
>23644	IfStatement	if ( maxs [ i ] - mins [ i ] > width )
>23645	ExpressionStatement	 
>23646	AssignmentExpr	width = maxs [ i ] - mins [ i ]
>23647	AdditiveExpression	maxs [ i ] - mins [ i ]
>23648	ArrayIndexing	mins [ i ]
>23649	Identifier	i
>23650	Identifier	mins
>23651	ArrayIndexing	maxs [ i ]
>23652	Identifier	i
>23653	Identifier	maxs
>23654	Identifier	width
>23655	Condition	 
>23656	RelationalExpression	maxs [ i ] - mins [ i ] > width
>23657	Identifier	width
>23658	AdditiveExpression	maxs [ i ] - mins [ i ]
>23659	ArrayIndexing	mins [ i ]
>23660	Identifier	i
>23661	Identifier	mins
>23662	ArrayIndexing	maxs [ i ]
>23663	Identifier	i
>23664	Identifier	maxs
>23665	ExpressionStatement	 
>23666	AssignmentExpr	mid [ i ] = ( maxs [ i ] + mins [ i ] ) * 0.5
>23667	MultiplicativeExpression	( maxs [ i ] + mins [ i ] ) * 0.5
>23668	PrimaryExpression	0.5
>23669	AdditiveExpression	maxs [ i ] + mins [ i ]
>23670	ArrayIndexing	mins [ i ]
>23671	Identifier	i
>23672	Identifier	mins
>23673	ArrayIndexing	maxs [ i ]
>23674	Identifier	i
>23675	Identifier	maxs
>23676	ArrayIndexing	mid [ i ]
>23677	Identifier	i
>23678	Identifier	mid
>23679	IncDecOp	 
>23680	IncDec	++
>23681	Identifier	i
>23682	Condition	 
>23683	RelationalExpression	i < 2
>23684	PrimaryExpression	2
>23685	Identifier	i
>23686	ForInit	 
>23687	AssignmentExpr	i = 0
>23688	PrimaryExpression	0
>23689	Identifier	i
>23690	ExpressionStatement	 
>23691	AssignmentExpr	width = 8
>23692	PrimaryExpression	8
>23693	Identifier	width
>23694	ExpressionStatement	 
>23695	CallExpression	Brush_Free ( b )
>23696	ArgumentList	b
>23697	Argument	b
>23698	Identifier	b
>23699	Callee	Brush_Free
>23700	Identifier	Brush_Free
>23701	ExpressionStatement	 
>23702	AssignmentExpr	texdef = & g_qeglobals . d_texturewin . texdef
>23703	UnaryOp	& g_qeglobals . d_texturewin . texdef
>23704	MemberAccess	g_qeglobals . d_texturewin . texdef
>23705	Identifier	texdef
>23706	MemberAccess	g_qeglobals . d_texturewin
>23707	Identifier	d_texturewin
>23708	Identifier	g_qeglobals
>23709	UnaryOperator	&
>23710	Identifier	texdef
>23711	ExpressionStatement	 
>23712	CallExpression	VectorCopy ( b -> maxs , maxs )
>23713	ArgumentList	b -> maxs
>23714	Argument	maxs
>23715	Identifier	maxs
>23716	Argument	b -> maxs
>23717	PtrMemberAccess	b -> maxs
>23718	Identifier	maxs
>23719	Identifier	b
>23720	Callee	VectorCopy
>23721	Identifier	VectorCopy
>23722	ExpressionStatement	 
>23723	CallExpression	VectorCopy ( b -> mins , mins )
>23724	ArgumentList	b -> mins
>23725	Argument	mins
>23726	Identifier	mins
>23727	Argument	b -> mins
>23728	PtrMemberAccess	b -> mins
>23729	Identifier	mins
>23730	Identifier	b
>23731	Callee	VectorCopy
>23732	Identifier	VectorCopy
>23733	ExpressionStatement	 
>23734	AssignmentExpr	b = selected_brushes . next
>23735	MemberAccess	selected_brushes . next
>23736	Identifier	next
>23737	Identifier	selected_brushes
>23738	Identifier	b
>23739	IfStatement	if ( ! QE_SingleBrush ( ) )
>23740	CompoundStatement	 
>23741	ReturnStatement	 
>23742	ExpressionStatement	 
>23743	CallExpression	Sys_Status ( \"Must have a single brush selected\" , 0 )
>23744	ArgumentList	\"Must have a single brush selected\"
>23745	Argument	0
>23746	PrimaryExpression	0
>23747	Argument	\"Must have a single brush selected\"
>23748	PrimaryExpression	\"Must have a single brush selected\"
>23749	Callee	Sys_Status
>23750	Identifier	Sys_Status
>23751	Condition	 
>23752	UnaryOp	! QE_SingleBrush ( )
>23753	CallExpression	QE_SingleBrush ( )
>23754	ArgumentList	 
>23755	Callee	QE_SingleBrush
>23756	Identifier	QE_SingleBrush
>23757	UnaryOperator	!
>23758	IfStatement	if ( sides < 3 )
>23759	CompoundStatement	 
>23760	ReturnStatement	 
>23761	ExpressionStatement	 
>23762	CallExpression	Sys_Status ( \"Bad sides number\" , 0 )
>23763	ArgumentList	\"Bad sides number\"
>23764	Argument	0
>23765	PrimaryExpression	0
>23766	Argument	\"Bad sides number\"
>23767	PrimaryExpression	\"Bad sides number\"
>23768	Callee	Sys_Status
>23769	Identifier	Sys_Status
>23770	Condition	 
>23771	RelationalExpression	sides < 3
>23772	PrimaryExpression	3
>23773	Identifier	sides
>23774	IdentifierDeclStatement	 
>23775	IdentifierDecl	cv
>23776	Identifier	cv
>23777	IdentifierDeclType	float
>23778	IdentifierDecl	sv
>23779	Identifier	sv
>23780	IdentifierDeclType	float
>23781	IdentifierDeclStatement	 
>23782	IdentifierDecl	width
>23783	Identifier	width
>23784	IdentifierDeclType	float
>23785	IdentifierDeclStatement	 
>23786	IdentifierDecl	mid
>23787	Identifier	mid
>23788	IdentifierDeclType	vec3_t
>23789	IdentifierDeclStatement	 
>23790	IdentifierDecl	* f
>23791	Identifier	f
>23792	IdentifierDeclType	face_t *
>23793	IdentifierDeclStatement	 
>23794	IdentifierDecl	* texdef
>23795	Identifier	texdef
>23796	IdentifierDeclType	texdef_t *
>23797	IdentifierDeclStatement	 
>23798	IdentifierDecl	* b
>23799	Identifier	b
>23800	IdentifierDeclType	brush_t *
>23801	IdentifierDeclStatement	 
>23802	IdentifierDecl	maxs
>23803	Identifier	maxs
>23804	IdentifierDeclType	vec3_t
>23805	IdentifierDecl	mins
>23806	Identifier	mins
>23807	IdentifierDeclType	vec3_t
>23808	IdentifierDeclStatement	 
>23809	IdentifierDecl	i
>23810	Identifier	i
>23811	IdentifierDeclType	int
>23859	FunctionDef	Brush_MakeSidedSphere (int sides)
>23860	ParameterList	int sides
>23861	Parameter	 
>23862	Identifier	sides
>23863	ParameterType	int
>23864	ReturnType	void
>23865	CompoundStatement	 
>23866	ExpressionStatement	 
>23867	CallExpression	Sys_UpdateWindows ( W_ALL )
>23868	ArgumentList	W_ALL
>23869	Argument	W_ALL
>23870	Identifier	W_ALL
>23871	Callee	Sys_UpdateWindows
>23872	Identifier	Sys_UpdateWindows
>23873	ExpressionStatement	 
>23874	CallExpression	Brush_Build ( b )
>23875	ArgumentList	b
>23876	Argument	b
>23877	Identifier	b
>23878	Callee	Brush_Build
>23879	Identifier	Brush_Build
>23880	ExpressionStatement	 
>23881	CallExpression	Entity_LinkBrush ( world_entity , b )
>23882	ArgumentList	world_entity
>23883	Argument	b
>23884	Identifier	b
>23885	Argument	world_entity
>23886	Identifier	world_entity
>23887	Callee	Entity_LinkBrush
>23888	Identifier	Entity_LinkBrush
>23889	ExpressionStatement	 
>23890	CallExpression	Brush_AddToList ( b , & selected_brushes )
>23891	ArgumentList	b
>23892	Argument	& selected_brushes
>23893	UnaryOp	& selected_brushes
>23894	Identifier	selected_brushes
>23895	UnaryOperator	&
>23896	Argument	b
>23897	Identifier	b
>23898	Callee	Brush_AddToList
>23899	Identifier	Brush_AddToList
>23900	ForStatement	for ( i = 0 ; i <= sides - 1 ; i ++ )
>23901	CompoundStatement	 
>23902	ForStatement	for ( int k = 0 ; k < 3 ; k ++ )
>23903	ExpressionStatement	 
>23904	CallExpression	VectorAdd ( f -> planepts [ k ] , mid , f -> planepts [ k ] )
>23905	ArgumentList	f -> planepts [ k ]
>23906	Argument	f -> planepts [ k ]
>23907	ArrayIndexing	f -> planepts [ k ]
>23908	Identifier	k
>23909	PtrMemberAccess	f -> planepts
>23910	Identifier	planepts
>23911	Identifier	f
>23912	Argument	mid
>23913	Identifier	mid
>23914	Argument	f -> planepts [ k ]
>23915	ArrayIndexing	f -> planepts [ k ]
>23916	Identifier	k
>23917	PtrMemberAccess	f -> planepts
>23918	Identifier	planepts
>23919	Identifier	f
>23920	Callee	VectorAdd
>23921	Identifier	VectorAdd
>23922	IncDecOp	 
>23923	IncDec	++
>23924	Identifier	k
>23925	Condition	 
>23926	RelationalExpression	k < 3
>23927	PrimaryExpression	3
>23928	Identifier	k
>23929	ForInit	 
>23930	IdentifierDeclStatement	int k = 0 ;
>23931	IdentifierDecl	k = 0
>23932	AssignmentExpr	k = 0
>23933	PrimaryExpression	0
>23934	Identifier	k
>23935	Identifier	k
>23936	IdentifierDeclType	int
>23937	ExpressionStatement	 
>23938	CallExpression	VectorPolar ( f -> planepts [ 2 ] , radius , t + dt , p )
>23939	ArgumentList	f -> planepts [ 2 ]
>23940	Argument	p
>23941	Identifier	p
>23942	Argument	t + dt
>23943	AdditiveExpression	t + dt
>23944	Identifier	dt
>23945	Identifier	t
>23946	Argument	radius
>23947	Identifier	radius
>23948	Argument	f -> planepts [ 2 ]
>23949	ArrayIndexing	f -> planepts [ 2 ]
>23950	PrimaryExpression	2
>23951	PtrMemberAccess	f -> planepts
>23952	Identifier	planepts
>23953	Identifier	f
>23954	Callee	VectorPolar
>23955	Identifier	VectorPolar
>23956	ExpressionStatement	 
>23957	CallExpression	VectorPolar ( f -> planepts [ 1 ] , radius , t + dt , p + dp )
>23958	ArgumentList	f -> planepts [ 1 ]
>23959	Argument	p + dp
>23960	AdditiveExpression	p + dp
>23961	Identifier	dp
>23962	Identifier	p
>23963	Argument	t + dt
>23964	AdditiveExpression	t + dt
>23965	Identifier	dt
>23966	Identifier	t
>23967	Argument	radius
>23968	Identifier	radius
>23969	Argument	f -> planepts [ 1 ]
>23970	ArrayIndexing	f -> planepts [ 1 ]
>23971	PrimaryExpression	1
>23972	PtrMemberAccess	f -> planepts
>23973	Identifier	planepts
>23974	Identifier	f
>23975	Callee	VectorPolar
>23976	Identifier	VectorPolar
>23977	ExpressionStatement	 
>23978	CallExpression	VectorPolar ( f -> planepts [ 0 ] , radius , t , p )
>23979	ArgumentList	f -> planepts [ 0 ]
>23980	Argument	p
>23981	Identifier	p
>23982	Argument	t
>23983	Identifier	t
>23984	Argument	radius
>23985	Identifier	radius
>23986	Argument	f -> planepts [ 0 ]
>23987	ArrayIndexing	f -> planepts [ 0 ]
>23988	PrimaryExpression	0
>23989	PtrMemberAccess	f -> planepts
>23990	Identifier	planepts
>23991	Identifier	f
>23992	Callee	VectorPolar
>23993	Identifier	VectorPolar
>23994	ExpressionStatement	 
>23995	AssignmentExpr	b -> brush_faces = f
>23996	Identifier	f
>23997	PtrMemberAccess	b -> brush_faces
>23998	Identifier	brush_faces
>23999	Identifier	b
>24000	ExpressionStatement	 
>24001	AssignmentExpr	f -> next = b -> brush_faces
>24002	PtrMemberAccess	b -> brush_faces
>24003	Identifier	brush_faces
>24004	Identifier	b
>24005	PtrMemberAccess	f -> next
>24006	Identifier	next
>24007	Identifier	f
>24008	ExpressionStatement	 
>24009	AssignmentExpr	f -> texdef = * texdef
>24010	UnaryOp	* texdef
>24011	Identifier	texdef
>24012	UnaryOperator	*
>24013	PtrMemberAccess	f -> texdef
>24014	Identifier	texdef
>24015	Identifier	f
>24016	ExpressionStatement	 
>24017	AssignmentExpr	f = Face_Alloc ( )
>24018	CallExpression	Face_Alloc ( )
>24019	ArgumentList	 
>24020	Callee	Face_Alloc
>24021	Identifier	Face_Alloc
>24022	Identifier	f
>24023	ExpressionStatement	 
>24024	AssignmentExpr	t = i * dt
>24025	MultiplicativeExpression	i * dt
>24026	Identifier	dt
>24027	Identifier	i
>24028	Identifier	t
>24029	IncDecOp	 
>24030	IncDec	++
>24031	Identifier	i
>24032	Condition	 
>24033	RelationalExpression	i <= sides - 1
>24034	AdditiveExpression	sides - 1
>24035	PrimaryExpression	1
>24036	Identifier	sides
>24037	Identifier	i
>24038	ForInit	 
>24039	AssignmentExpr	i = 0
>24040	PrimaryExpression	0
>24041	Identifier	i
>24042	ExpressionStatement	 
>24043	AssignmentExpr	p = float ( ( sides - 1 ) * dp - Q_PI / 2 )
>24044	CallExpression	float ( ( sides - 1 ) * dp - Q_PI / 2 )
>24045	ArgumentList	( sides - 1 ) * dp - Q_PI / 2
>24046	Argument	( sides - 1 ) * dp - Q_PI / 2
>24047	AdditiveExpression	( sides - 1 ) * dp - Q_PI / 2
>24048	MultiplicativeExpression	Q_PI / 2
>24049	PrimaryExpression	2
>24050	Identifier	Q_PI
>24051	MultiplicativeExpression	( sides - 1 ) * dp
>24052	Identifier	dp
>24053	AdditiveExpression	sides - 1
>24054	PrimaryExpression	1
>24055	Identifier	sides
>24056	Callee	float
>24057	Identifier	float
>24058	Identifier	p
>24059	ForStatement	for ( i = 0 ; i <= sides - 1 ; i ++ )
>24060	CompoundStatement	 
>24061	ForStatement	for ( j = 0 ; j <= sides - 2 ; j ++ )
>24062	CompoundStatement	 
>24063	ForStatement	for ( int k = 0 ; k < 3 ; k ++ )
>24064	ExpressionStatement	 
>24065	CallExpression	VectorAdd ( f -> planepts [ k ] , mid , f -> planepts [ k ] )
>24066	ArgumentList	f -> planepts [ k ]
>24067	Argument	f -> planepts [ k ]
>24068	ArrayIndexing	f -> planepts [ k ]
>24069	Identifier	k
>24070	PtrMemberAccess	f -> planepts
>24071	Identifier	planepts
>24072	Identifier	f
>24073	Argument	mid
>24074	Identifier	mid
>24075	Argument	f -> planepts [ k ]
>24076	ArrayIndexing	f -> planepts [ k ]
>24077	Identifier	k
>24078	PtrMemberAccess	f -> planepts
>24079	Identifier	planepts
>24080	Identifier	f
>24081	Callee	VectorAdd
>24082	Identifier	VectorAdd
>24083	IncDecOp	 
>24084	IncDec	++
>24085	Identifier	k
>24086	Condition	 
>24087	RelationalExpression	k < 3
>24088	PrimaryExpression	3
>24089	Identifier	k
>24090	ForInit	 
>24091	IdentifierDeclStatement	int k = 0 ;
>24092	IdentifierDecl	k = 0
>24093	AssignmentExpr	k = 0
>24094	PrimaryExpression	0
>24095	Identifier	k
>24096	Identifier	k
>24097	IdentifierDeclType	int
>24098	ExpressionStatement	 
>24099	CallExpression	VectorPolar ( f -> planepts [ 2 ] , radius , t + dt , p + dp )
>24100	ArgumentList	f -> planepts [ 2 ]
>24101	Argument	p + dp
>24102	AdditiveExpression	p + dp
>24103	Identifier	dp
>24104	Identifier	p
>24105	Argument	t + dt
>24106	AdditiveExpression	t + dt
>24107	Identifier	dt
>24108	Identifier	t
>24109	Argument	radius
>24110	Identifier	radius
>24111	Argument	f -> planepts [ 2 ]
>24112	ArrayIndexing	f -> planepts [ 2 ]
>24113	PrimaryExpression	2
>24114	PtrMemberAccess	f -> planepts
>24115	Identifier	planepts
>24116	Identifier	f
>24117	Callee	VectorPolar
>24118	Identifier	VectorPolar
>24119	ExpressionStatement	 
>24120	CallExpression	VectorPolar ( f -> planepts [ 1 ] , radius , t , p + dp )
>24121	ArgumentList	f -> planepts [ 1 ]
>24122	Argument	p + dp
>24123	AdditiveExpression	p + dp
>24124	Identifier	dp
>24125	Identifier	p
>24126	Argument	t
>24127	Identifier	t
>24128	Argument	radius
>24129	Identifier	radius
>24130	Argument	f -> planepts [ 1 ]
>24131	ArrayIndexing	f -> planepts [ 1 ]
>24132	PrimaryExpression	1
>24133	PtrMemberAccess	f -> planepts
>24134	Identifier	planepts
>24135	Identifier	f
>24136	Callee	VectorPolar
>24137	Identifier	VectorPolar
>24138	ExpressionStatement	 
>24139	CallExpression	VectorPolar ( f -> planepts [ 0 ] , radius , t , p )
>24140	ArgumentList	f -> planepts [ 0 ]
>24141	Argument	p
>24142	Identifier	p
>24143	Argument	t
>24144	Identifier	t
>24145	Argument	radius
>24146	Identifier	radius
>24147	Argument	f -> planepts [ 0 ]
>24148	ArrayIndexing	f -> planepts [ 0 ]
>24149	PrimaryExpression	0
>24150	PtrMemberAccess	f -> planepts
>24151	Identifier	planepts
>24152	Identifier	f
>24153	Callee	VectorPolar
>24154	Identifier	VectorPolar
>24155	ExpressionStatement	 
>24156	AssignmentExpr	b -> brush_faces = f
>24157	Identifier	f
>24158	PtrMemberAccess	b -> brush_faces
>24159	Identifier	brush_faces
>24160	Identifier	b
>24161	ExpressionStatement	 
>24162	AssignmentExpr	f -> next = b -> brush_faces
>24163	PtrMemberAccess	b -> brush_faces
>24164	Identifier	brush_faces
>24165	Identifier	b
>24166	PtrMemberAccess	f -> next
>24167	Identifier	next
>24168	Identifier	f
>24169	ExpressionStatement	 
>24170	AssignmentExpr	f -> texdef = * texdef
>24171	UnaryOp	* texdef
>24172	Identifier	texdef
>24173	UnaryOperator	*
>24174	PtrMemberAccess	f -> texdef
>24175	Identifier	texdef
>24176	Identifier	f
>24177	ExpressionStatement	 
>24178	AssignmentExpr	f = Face_Alloc ( )
>24179	CallExpression	Face_Alloc ( )
>24180	ArgumentList	 
>24181	Callee	Face_Alloc
>24182	Identifier	Face_Alloc
>24183	Identifier	f
>24184	ExpressionStatement	 
>24185	AssignmentExpr	p = float ( j * dp - Q_PI / 2 )
>24186	CallExpression	float ( j * dp - Q_PI / 2 )
>24187	ArgumentList	j * dp - Q_PI / 2
>24188	Argument	j * dp - Q_PI / 2
>24189	AdditiveExpression	j * dp - Q_PI / 2
>24190	MultiplicativeExpression	Q_PI / 2
>24191	PrimaryExpression	2
>24192	Identifier	Q_PI
>24193	MultiplicativeExpression	j * dp
>24194	Identifier	dp
>24195	Identifier	j
>24196	Callee	float
>24197	Identifier	float
>24198	Identifier	p
>24199	ExpressionStatement	 
>24200	AssignmentExpr	t = i * dt
>24201	MultiplicativeExpression	i * dt
>24202	Identifier	dt
>24203	Identifier	i
>24204	Identifier	t
>24205	IncDecOp	 
>24206	IncDec	++
>24207	Identifier	j
>24208	Condition	 
>24209	RelationalExpression	j <= sides - 2
>24210	AdditiveExpression	sides - 2
>24211	PrimaryExpression	2
>24212	Identifier	sides
>24213	Identifier	j
>24214	ForInit	 
>24215	AssignmentExpr	j = 0
>24216	PrimaryExpression	0
>24217	Identifier	j
>24218	IncDecOp	 
>24219	IncDec	++
>24220	Identifier	i
>24221	Condition	 
>24222	RelationalExpression	i <= sides - 1
>24223	AdditiveExpression	sides - 1
>24224	PrimaryExpression	1
>24225	Identifier	sides
>24226	Identifier	i
>24227	ForInit	 
>24228	AssignmentExpr	i = 0
>24229	PrimaryExpression	0
>24230	Identifier	i
>24231	IdentifierDeclStatement	 
>24232	IdentifierDecl	p
>24233	Identifier	p
>24234	IdentifierDeclType	float
>24235	IdentifierDecl	t
>24236	Identifier	t
>24237	IdentifierDeclType	float
>24238	IdentifierDeclStatement	 
>24239	IdentifierDecl	dp = float ( Q_PI / sides )
>24240	AssignmentExpr	dp = float ( Q_PI / sides )
>24241	CallExpression	float ( Q_PI / sides )
>24242	ArgumentList	Q_PI / sides
>24243	Argument	Q_PI / sides
>24244	MultiplicativeExpression	Q_PI / sides
>24245	Identifier	sides
>24246	Identifier	Q_PI
>24247	Callee	float
>24248	Identifier	float
>24249	Identifier	dp
>24250	Identifier	dp
>24251	IdentifierDeclType	float
>24252	IdentifierDeclStatement	 
>24253	IdentifierDecl	dt = float ( 2 * Q_PI / sides )
>24254	AssignmentExpr	dt = float ( 2 * Q_PI / sides )
>24255	CallExpression	float ( 2 * Q_PI / sides )
>24256	ArgumentList	2 * Q_PI / sides
>24257	Argument	2 * Q_PI / sides
>24258	MultiplicativeExpression	2 * Q_PI / sides
>24259	MultiplicativeExpression	Q_PI / sides
>24260	Identifier	sides
>24261	Identifier	Q_PI
>24262	PrimaryExpression	2
>24263	Callee	float
>24264	Identifier	float
>24265	Identifier	dt
>24266	Identifier	dt
>24267	IdentifierDeclType	float
>24268	ExpressionStatement	 
>24269	AssignmentExpr	b = Brush_Alloc ( )
>24270	CallExpression	Brush_Alloc ( )
>24271	ArgumentList	 
>24272	Callee	Brush_Alloc
>24273	Identifier	Brush_Alloc
>24274	Identifier	b
>24275	ExpressionStatement	 
>24276	AssignmentExpr	radius /= 2
>24277	PrimaryExpression	2
>24278	Identifier	radius
>24279	ForStatement	for ( i = 0 ; i < 2 ; i ++ )
>24280	CompoundStatement	 
>24281	IfStatement	if ( maxs [ i ] - mins [ i ] > radius )
>24282	ExpressionStatement	 
>24283	AssignmentExpr	radius = maxs [ i ] - mins [ i ]
>24284	AdditiveExpression	maxs [ i ] - mins [ i ]
>24285	ArrayIndexing	mins [ i ]
>24286	Identifier	i
>24287	Identifier	mins
>24288	ArrayIndexing	maxs [ i ]
>24289	Identifier	i
>24290	Identifier	maxs
>24291	Identifier	radius
>24292	Condition	 
>24293	RelationalExpression	maxs [ i ] - mins [ i ] > radius
>24294	Identifier	radius
>24295	AdditiveExpression	maxs [ i ] - mins [ i ]
>24296	ArrayIndexing	mins [ i ]
>24297	Identifier	i
>24298	Identifier	mins
>24299	ArrayIndexing	maxs [ i ]
>24300	Identifier	i
>24301	Identifier	maxs
>24302	ExpressionStatement	 
>24303	AssignmentExpr	mid [ i ] = ( maxs [ i ] + mins [ i ] ) * 0.5
>24304	MultiplicativeExpression	( maxs [ i ] + mins [ i ] ) * 0.5
>24305	PrimaryExpression	0.5
>24306	AdditiveExpression	maxs [ i ] + mins [ i ]
>24307	ArrayIndexing	mins [ i ]
>24308	Identifier	i
>24309	Identifier	mins
>24310	ArrayIndexing	maxs [ i ]
>24311	Identifier	i
>24312	Identifier	maxs
>24313	ArrayIndexing	mid [ i ]
>24314	Identifier	i
>24315	Identifier	mid
>24316	IncDecOp	 
>24317	IncDec	++
>24318	Identifier	i
>24319	Condition	 
>24320	RelationalExpression	i < 2
>24321	PrimaryExpression	2
>24322	Identifier	i
>24323	ForInit	 
>24324	AssignmentExpr	i = 0
>24325	PrimaryExpression	0
>24326	Identifier	i
>24327	IdentifierDeclStatement	 
>24328	IdentifierDecl	radius = 8
>24329	AssignmentExpr	radius = 8
>24330	PrimaryExpression	8
>24331	Identifier	radius
>24332	Identifier	radius
>24333	IdentifierDeclType	float
>24334	ExpressionStatement	 
>24335	CallExpression	Brush_Free ( b )
>24336	ArgumentList	b
>24337	Argument	b
>24338	Identifier	b
>24339	Callee	Brush_Free
>24340	Identifier	Brush_Free
>24341	ExpressionStatement	 
>24342	AssignmentExpr	texdef = & g_qeglobals . d_texturewin . texdef
>24343	UnaryOp	& g_qeglobals . d_texturewin . texdef
>24344	MemberAccess	g_qeglobals . d_texturewin . texdef
>24345	Identifier	texdef
>24346	MemberAccess	g_qeglobals . d_texturewin
>24347	Identifier	d_texturewin
>24348	Identifier	g_qeglobals
>24349	UnaryOperator	&
>24350	Identifier	texdef
>24351	ExpressionStatement	 
>24352	CallExpression	VectorCopy ( b -> maxs , maxs )
>24353	ArgumentList	b -> maxs
>24354	Argument	maxs
>24355	Identifier	maxs
>24356	Argument	b -> maxs
>24357	PtrMemberAccess	b -> maxs
>24358	Identifier	maxs
>24359	Identifier	b
>24360	Callee	VectorCopy
>24361	Identifier	VectorCopy
>24362	ExpressionStatement	 
>24363	CallExpression	VectorCopy ( b -> mins , mins )
>24364	ArgumentList	b -> mins
>24365	Argument	mins
>24366	Identifier	mins
>24367	Argument	b -> mins
>24368	PtrMemberAccess	b -> mins
>24369	Identifier	mins
>24370	Identifier	b
>24371	Callee	VectorCopy
>24372	Identifier	VectorCopy
>24373	ExpressionStatement	 
>24374	AssignmentExpr	b = selected_brushes . next
>24375	MemberAccess	selected_brushes . next
>24376	Identifier	next
>24377	Identifier	selected_brushes
>24378	Identifier	b
>24379	IfStatement	if ( ! QE_SingleBrush ( ) )
>24380	CompoundStatement	 
>24381	ReturnStatement	 
>24382	ExpressionStatement	 
>24383	CallExpression	Sys_Status ( \"Must have a single brush selected\" , 0 )
>24384	ArgumentList	\"Must have a single brush selected\"
>24385	Argument	0
>24386	PrimaryExpression	0
>24387	Argument	\"Must have a single brush selected\"
>24388	PrimaryExpression	\"Must have a single brush selected\"
>24389	Callee	Sys_Status
>24390	Identifier	Sys_Status
>24391	Condition	 
>24392	UnaryOp	! QE_SingleBrush ( )
>24393	CallExpression	QE_SingleBrush ( )
>24394	ArgumentList	 
>24395	Callee	QE_SingleBrush
>24396	Identifier	QE_SingleBrush
>24397	UnaryOperator	!
>24398	IfStatement	if ( sides < 4 )
>24399	CompoundStatement	 
>24400	ReturnStatement	 
>24401	ExpressionStatement	 
>24402	CallExpression	Sys_Status ( \"Bad sides number\" , 0 )
>24403	ArgumentList	\"Bad sides number\"
>24404	Argument	0
>24405	PrimaryExpression	0
>24406	Argument	\"Bad sides number\"
>24407	PrimaryExpression	\"Bad sides number\"
>24408	Callee	Sys_Status
>24409	Identifier	Sys_Status
>24410	Condition	 
>24411	RelationalExpression	sides < 4
>24412	PrimaryExpression	4
>24413	Identifier	sides
>24414	IdentifierDeclStatement	 
>24415	IdentifierDecl	mid
>24416	Identifier	mid
>24417	IdentifierDeclType	vec3_t
>24418	IdentifierDeclStatement	 
>24419	IdentifierDecl	* f
>24420	Identifier	f
>24421	IdentifierDeclType	face_t *
>24422	IdentifierDeclStatement	 
>24423	IdentifierDecl	* texdef
>24424	Identifier	texdef
>24425	IdentifierDeclType	texdef_t *
>24426	IdentifierDeclStatement	 
>24427	IdentifierDecl	* b
>24428	Identifier	b
>24429	IdentifierDeclType	brush_t *
>24430	IdentifierDeclStatement	 
>24431	IdentifierDecl	maxs
>24432	Identifier	maxs
>24433	IdentifierDeclType	vec3_t
>24434	IdentifierDecl	mins
>24435	Identifier	mins
>24436	IdentifierDeclType	vec3_t
>24437	IdentifierDeclStatement	 
>24438	IdentifierDecl	j
>24439	Identifier	j
>24440	IdentifierDeclType	int
>24441	IdentifierDecl	i
>24442	Identifier	i
>24443	IdentifierDeclType	int
>24493	FunctionDef	Face_FitTexture (face_t * face , int nHeight , int nWidth)
>24494	ParameterList	face_t * face , int nHeight , int nWidth
>24495	Parameter	 
>24496	Identifier	nWidth
>24497	ParameterType	int
>24498	Parameter	 
>24499	Identifier	nHeight
>24500	ParameterType	int
>24501	Parameter	 
>24502	Identifier	face
>24503	ParameterType	face_t *
>24504	ReturnType	void
>24505	CompoundStatement	 
>24506	ExpressionStatement	 
>24507	AssignmentExpr	td -> shift [ 1 ] = ( int ) ( temp - td -> shift [ 1 ] ) % ( face -> d_texture -> height * nHeight )
>24508	MultiplicativeExpression	( int ) ( temp - td -> shift [ 1 ] ) % ( face -> d_texture -> height * nHeight )
>24509	MultiplicativeExpression	face -> d_texture -> height * nHeight
>24510	Identifier	nHeight
>24511	PtrMemberAccess	face -> d_texture -> height
>24512	Identifier	height
>24513	PtrMemberAccess	face -> d_texture
>24514	Identifier	d_texture
>24515	Identifier	face
>24516	CastExpression	( int ) ( temp - td -> shift [ 1 ] )
>24517	AdditiveExpression	temp - td -> shift [ 1 ]
>24518	ArrayIndexing	td -> shift [ 1 ]
>24519	PrimaryExpression	1
>24520	PtrMemberAccess	td -> shift
>24521	Identifier	shift
>24522	Identifier	td
>24523	Identifier	temp
>24524	CastTarget	int
>24525	ArrayIndexing	td -> shift [ 1 ]
>24526	PrimaryExpression	1
>24527	PtrMemberAccess	td -> shift
>24528	Identifier	shift
>24529	Identifier	td
>24530	ExpressionStatement	 
>24531	AssignmentExpr	temp = ( temp + 1 ) * ( face -> d_texture -> height * nHeight )
>24532	MultiplicativeExpression	( temp + 1 ) * ( face -> d_texture -> height * nHeight )
>24533	MultiplicativeExpression	face -> d_texture -> height * nHeight
>24534	Identifier	nHeight
>24535	PtrMemberAccess	face -> d_texture -> height
>24536	Identifier	height
>24537	PtrMemberAccess	face -> d_texture
>24538	Identifier	d_texture
>24539	Identifier	face
>24540	AdditiveExpression	temp + 1
>24541	PrimaryExpression	1
>24542	Identifier	temp
>24543	Identifier	temp
>24544	ExpressionStatement	 
>24545	AssignmentExpr	temp = ( int ) ( td -> shift [ 1 ] / ( face -> d_texture -> height * nHeight ) )
>24546	CastExpression	( int ) ( td -> shift [ 1 ] / ( face -> d_texture -> height * nHeight ) )
>24547	MultiplicativeExpression	td -> shift [ 1 ] / ( face -> d_texture -> height * nHeight )
>24548	MultiplicativeExpression	face -> d_texture -> height * nHeight
>24549	Identifier	nHeight
>24550	PtrMemberAccess	face -> d_texture -> height
>24551	Identifier	height
>24552	PtrMemberAccess	face -> d_texture
>24553	Identifier	d_texture
>24554	Identifier	face
>24555	ArrayIndexing	td -> shift [ 1 ]
>24556	PrimaryExpression	1
>24557	PtrMemberAccess	td -> shift
>24558	Identifier	shift
>24559	Identifier	td
>24560	CastTarget	int
>24561	Identifier	temp
>24562	ExpressionStatement	 
>24563	AssignmentExpr	td -> shift [ 1 ] = min_t / td -> scale [ 1 ]
>24564	MultiplicativeExpression	min_t / td -> scale [ 1 ]
>24565	ArrayIndexing	td -> scale [ 1 ]
>24566	PrimaryExpression	1
>24567	PtrMemberAccess	td -> scale
>24568	Identifier	scale
>24569	Identifier	td
>24570	Identifier	min_t
>24571	ArrayIndexing	td -> shift [ 1 ]
>24572	PrimaryExpression	1
>24573	PtrMemberAccess	td -> shift
>24574	Identifier	shift
>24575	Identifier	td
>24576	ExpressionStatement	 
>24577	AssignmentExpr	td -> shift [ 0 ] = ( int ) ( temp - td -> shift [ 0 ] ) % ( face -> d_texture -> width * nWidth )
>24578	MultiplicativeExpression	( int ) ( temp - td -> shift [ 0 ] ) % ( face -> d_texture -> width * nWidth )
>24579	MultiplicativeExpression	face -> d_texture -> width * nWidth
>24580	Identifier	nWidth
>24581	PtrMemberAccess	face -> d_texture -> width
>24582	Identifier	width
>24583	PtrMemberAccess	face -> d_texture
>24584	Identifier	d_texture
>24585	Identifier	face
>24586	CastExpression	( int ) ( temp - td -> shift [ 0 ] )
>24587	AdditiveExpression	temp - td -> shift [ 0 ]
>24588	ArrayIndexing	td -> shift [ 0 ]
>24589	PrimaryExpression	0
>24590	PtrMemberAccess	td -> shift
>24591	Identifier	shift
>24592	Identifier	td
>24593	Identifier	temp
>24594	CastTarget	int
>24595	ArrayIndexing	td -> shift [ 0 ]
>24596	PrimaryExpression	0
>24597	PtrMemberAccess	td -> shift
>24598	Identifier	shift
>24599	Identifier	td
>24600	ExpressionStatement	 
>24601	AssignmentExpr	temp = ( temp + 1 ) * face -> d_texture -> width * nWidth
>24602	MultiplicativeExpression	( temp + 1 ) * face -> d_texture -> width * nWidth
>24603	MultiplicativeExpression	face -> d_texture -> width * nWidth
>24604	Identifier	nWidth
>24605	PtrMemberAccess	face -> d_texture -> width
>24606	Identifier	width
>24607	PtrMemberAccess	face -> d_texture
>24608	Identifier	d_texture
>24609	Identifier	face
>24610	AdditiveExpression	temp + 1
>24611	PrimaryExpression	1
>24612	Identifier	temp
>24613	Identifier	temp
>24614	ExpressionStatement	 
>24615	AssignmentExpr	temp = ( int ) ( td -> shift [ 0 ] / ( face -> d_texture -> width * nWidth ) )
>24616	CastExpression	( int ) ( td -> shift [ 0 ] / ( face -> d_texture -> width * nWidth ) )
>24617	MultiplicativeExpression	td -> shift [ 0 ] / ( face -> d_texture -> width * nWidth )
>24618	MultiplicativeExpression	face -> d_texture -> width * nWidth
>24619	Identifier	nWidth
>24620	PtrMemberAccess	face -> d_texture -> width
>24621	Identifier	width
>24622	PtrMemberAccess	face -> d_texture
>24623	Identifier	d_texture
>24624	Identifier	face
>24625	ArrayIndexing	td -> shift [ 0 ]
>24626	PrimaryExpression	0
>24627	PtrMemberAccess	td -> shift
>24628	Identifier	shift
>24629	Identifier	td
>24630	CastTarget	int
>24631	Identifier	temp
>24632	ExpressionStatement	 
>24633	AssignmentExpr	td -> shift [ 0 ] = min_s / td -> scale [ 0 ]
>24634	MultiplicativeExpression	min_s / td -> scale [ 0 ]
>24635	ArrayIndexing	td -> scale [ 0 ]
>24636	PrimaryExpression	0
>24637	PtrMemberAccess	td -> scale
>24638	Identifier	scale
>24639	Identifier	td
>24640	Identifier	min_s
>24641	ArrayIndexing	td -> shift [ 0 ]
>24642	PrimaryExpression	0
>24643	PtrMemberAccess	td -> shift
>24644	Identifier	shift
>24645	Identifier	td
>24646	ExpressionStatement	 
>24647	AssignmentExpr	td -> scale [ 1 ] = - ( rot_height / ( ( float ) ( face -> d_texture -> height * nHeight ) ) )
>24648	UnaryOp	- ( rot_height / ( ( float ) ( face -> d_texture -> height * nHeight ) ) )
>24649	MultiplicativeExpression	rot_height / ( ( float ) ( face -> d_texture -> height * nHeight ) )
>24650	CastExpression	( float ) ( face -> d_texture -> height * nHeight )
>24651	MultiplicativeExpression	face -> d_texture -> height * nHeight
>24652	Identifier	nHeight
>24653	PtrMemberAccess	face -> d_texture -> height
>24654	Identifier	height
>24655	PtrMemberAccess	face -> d_texture
>24656	Identifier	d_texture
>24657	Identifier	face
>24658	CastTarget	float
>24659	Identifier	rot_height
>24660	UnaryOperator	-
>24661	ArrayIndexing	td -> scale [ 1 ]
>24662	PrimaryExpression	1
>24663	PtrMemberAccess	td -> scale
>24664	Identifier	scale
>24665	Identifier	td
>24666	ExpressionStatement	 
>24667	AssignmentExpr	td -> scale [ 0 ] = - ( rot_width / ( ( float ) ( face -> d_texture -> width * nWidth ) ) )
>24668	UnaryOp	- ( rot_width / ( ( float ) ( face -> d_texture -> width * nWidth ) ) )
>24669	MultiplicativeExpression	rot_width / ( ( float ) ( face -> d_texture -> width * nWidth ) )
>24670	CastExpression	( float ) ( face -> d_texture -> width * nWidth )
>24671	MultiplicativeExpression	face -> d_texture -> width * nWidth
>24672	Identifier	nWidth
>24673	PtrMemberAccess	face -> d_texture -> width
>24674	Identifier	width
>24675	PtrMemberAccess	face -> d_texture
>24676	Identifier	d_texture
>24677	Identifier	face
>24678	CastTarget	float
>24679	Identifier	rot_width
>24680	UnaryOperator	-
>24681	ArrayIndexing	td -> scale [ 0 ]
>24682	PrimaryExpression	0
>24683	PtrMemberAccess	td -> scale
>24684	Identifier	scale
>24685	Identifier	td
>24686	ExpressionStatement	 
>24687	AssignmentExpr	rot_height = ( max_t - min_t )
>24688	AdditiveExpression	max_t - min_t
>24689	Identifier	min_t
>24690	Identifier	max_t
>24691	Identifier	rot_height
>24692	ExpressionStatement	 
>24693	AssignmentExpr	rot_width = ( max_s - min_s )
>24694	AdditiveExpression	max_s - min_s
>24695	Identifier	min_s
>24696	Identifier	max_s
>24697	Identifier	rot_width
>24698	ForStatement	for ( i = 0 ; i < 4 ; i ++ )
>24699	CompoundStatement	 
>24700	IfStatement	if ( i & 1 )
>24701	ElseStatement	else
>24702	CompoundStatement	 
>24703	IfStatement	if ( i < 2 )
>24704	ElseStatement	else
>24705	CompoundStatement	 
>24706	IfStatement	if ( t > max_t )
>24707	CompoundStatement	 
>24708	ExpressionStatement	 
>24709	AssignmentExpr	max_t = t
>24710	Identifier	t
>24711	Identifier	max_t
>24712	Condition	 
>24713	RelationalExpression	t > max_t
>24714	Identifier	max_t
>24715	Identifier	t
>24716	CompoundStatement	 
>24717	IfStatement	if ( t < min_t )
>24718	CompoundStatement	 
>24719	ExpressionStatement	 
>24720	AssignmentExpr	min_t = t
>24721	Identifier	t
>24722	Identifier	min_t
>24723	Condition	 
>24724	RelationalExpression	t < min_t
>24725	Identifier	min_t
>24726	Identifier	t
>24727	Condition	 
>24728	RelationalExpression	i < 2
>24729	PrimaryExpression	2
>24730	Identifier	i
>24731	IfStatement	if ( s < min_s )
>24732	CompoundStatement	 
>24733	ExpressionStatement	 
>24734	AssignmentExpr	min_s = s
>24735	Identifier	s
>24736	Identifier	min_s
>24737	Condition	 
>24738	RelationalExpression	s < min_s
>24739	Identifier	min_s
>24740	Identifier	s
>24741	CompoundStatement	 
>24742	IfStatement	if ( s > max_s )
>24743	CompoundStatement	 
>24744	ExpressionStatement	 
>24745	AssignmentExpr	max_s = s
>24746	Identifier	s
>24747	Identifier	max_s
>24748	Condition	 
>24749	RelationalExpression	s > max_s
>24750	Identifier	max_s
>24751	Identifier	s
>24752	Condition	 
>24753	BitAndExpression	i & 1
>24754	PrimaryExpression	1
>24755	Identifier	i
>24756	ExpressionStatement	 
>24757	AssignmentExpr	t = sinv * coords [ i ] [ 0 ] + cosv * coords [ i ] [ 1 ]
>24758	AdditiveExpression	sinv * coords [ i ] [ 0 ] + cosv * coords [ i ] [ 1 ]
>24759	MultiplicativeExpression	cosv * coords [ i ] [ 1 ]
>24760	ArrayIndexing	coords [ i ] [ 1 ]
>24761	PrimaryExpression	1
>24762	ArrayIndexing	coords [ i ]
>24763	Identifier	i
>24764	Identifier	coords
>24765	Identifier	cosv
>24766	MultiplicativeExpression	sinv * coords [ i ] [ 0 ]
>24767	ArrayIndexing	coords [ i ] [ 0 ]
>24768	PrimaryExpression	0
>24769	ArrayIndexing	coords [ i ]
>24770	Identifier	i
>24771	Identifier	coords
>24772	Identifier	sinv
>24773	Identifier	t
>24774	ExpressionStatement	 
>24775	AssignmentExpr	s = cosv * coords [ i ] [ 0 ] - sinv * coords [ i ] [ 1 ]
>24776	AdditiveExpression	cosv * coords [ i ] [ 0 ] - sinv * coords [ i ] [ 1 ]
>24777	MultiplicativeExpression	sinv * coords [ i ] [ 1 ]
>24778	ArrayIndexing	coords [ i ] [ 1 ]
>24779	PrimaryExpression	1
>24780	ArrayIndexing	coords [ i ]
>24781	Identifier	i
>24782	Identifier	coords
>24783	Identifier	sinv
>24784	MultiplicativeExpression	cosv * coords [ i ] [ 0 ]
>24785	ArrayIndexing	coords [ i ] [ 0 ]
>24786	PrimaryExpression	0
>24787	ArrayIndexing	coords [ i ]
>24788	Identifier	i
>24789	Identifier	coords
>24790	Identifier	cosv
>24791	Identifier	s
>24792	IncDecOp	 
>24793	IncDec	++
>24794	Identifier	i
>24795	Condition	 
>24796	RelationalExpression	i < 4
>24797	PrimaryExpression	4
>24798	Identifier	i
>24799	ForInit	 
>24800	AssignmentExpr	i = 0
>24801	PrimaryExpression	0
>24802	Identifier	i
>24803	ExpressionStatement	 
>24804	AssignmentExpr	max_s = max_t = - 99999
>24805	AssignmentExpr	max_t = - 99999
>24806	UnaryOp	- 99999
>24807	PrimaryExpression	99999
>24808	UnaryOperator	-
>24809	Identifier	max_t
>24810	Identifier	max_s
>24811	ExpressionStatement	 
>24812	AssignmentExpr	min_s = min_t = 99999
>24813	AssignmentExpr	min_t = 99999
>24814	PrimaryExpression	99999
>24815	Identifier	min_t
>24816	Identifier	min_s
>24817	ExpressionStatement	 
>24818	AssignmentExpr	coords [ 3 ] [ 1 ] = max_t
>24819	Identifier	max_t
>24820	ArrayIndexing	coords [ 3 ] [ 1 ]
>24821	PrimaryExpression	1
>24822	ArrayIndexing	coords [ 3 ]
>24823	PrimaryExpression	3
>24824	Identifier	coords
>24825	ExpressionStatement	 
>24826	AssignmentExpr	coords [ 3 ] [ 0 ] = max_s
>24827	Identifier	max_s
>24828	ArrayIndexing	coords [ 3 ] [ 0 ]
>24829	PrimaryExpression	0
>24830	ArrayIndexing	coords [ 3 ]
>24831	PrimaryExpression	3
>24832	Identifier	coords
>24833	ExpressionStatement	 
>24834	AssignmentExpr	coords [ 2 ] [ 1 ] = max_t
>24835	Identifier	max_t
>24836	ArrayIndexing	coords [ 2 ] [ 1 ]
>24837	PrimaryExpression	1
>24838	ArrayIndexing	coords [ 2 ]
>24839	PrimaryExpression	2
>24840	Identifier	coords
>24841	ExpressionStatement	 
>24842	AssignmentExpr	coords [ 2 ] [ 0 ] = min_s
>24843	Identifier	min_s
>24844	ArrayIndexing	coords [ 2 ] [ 0 ]
>24845	PrimaryExpression	0
>24846	ArrayIndexing	coords [ 2 ]
>24847	PrimaryExpression	2
>24848	Identifier	coords
>24849	ExpressionStatement	 
>24850	AssignmentExpr	coords [ 1 ] [ 1 ] = min_t
>24851	Identifier	min_t
>24852	ArrayIndexing	coords [ 1 ] [ 1 ]
>24853	PrimaryExpression	1
>24854	ArrayIndexing	coords [ 1 ]
>24855	PrimaryExpression	1
>24856	Identifier	coords
>24857	ExpressionStatement	 
>24858	AssignmentExpr	coords [ 1 ] [ 0 ] = max_s
>24859	Identifier	max_s
>24860	ArrayIndexing	coords [ 1 ] [ 0 ]
>24861	PrimaryExpression	0
>24862	ArrayIndexing	coords [ 1 ]
>24863	PrimaryExpression	1
>24864	Identifier	coords
>24865	ExpressionStatement	 
>24866	AssignmentExpr	coords [ 0 ] [ 1 ] = min_t
>24867	Identifier	min_t
>24868	ArrayIndexing	coords [ 0 ] [ 1 ]
>24869	PrimaryExpression	1
>24870	ArrayIndexing	coords [ 0 ]
>24871	PrimaryExpression	0
>24872	Identifier	coords
>24873	ExpressionStatement	 
>24874	AssignmentExpr	coords [ 0 ] [ 0 ] = min_s
>24875	Identifier	min_s
>24876	ArrayIndexing	coords [ 0 ] [ 0 ]
>24877	PrimaryExpression	0
>24878	ArrayIndexing	coords [ 0 ]
>24879	PrimaryExpression	0
>24880	Identifier	coords
>24881	ExpressionStatement	 
>24882	AssignmentExpr	height = max_t - min_t
>24883	AdditiveExpression	max_t - min_t
>24884	Identifier	min_t
>24885	Identifier	max_t
>24886	Identifier	height
>24887	ExpressionStatement	 
>24888	AssignmentExpr	width = max_s - min_s
>24889	AdditiveExpression	max_s - min_s
>24890	Identifier	min_s
>24891	Identifier	max_s
>24892	Identifier	width
>24893	ExpressionStatement	 
>24894	AssignmentExpr	max_t = DotProduct ( maxs , vecs [ 1 ] )
>24895	CallExpression	DotProduct ( maxs , vecs [ 1 ] )
>24896	ArgumentList	maxs
>24897	Argument	vecs [ 1 ]
>24898	ArrayIndexing	vecs [ 1 ]
>24899	PrimaryExpression	1
>24900	Identifier	vecs
>24901	Argument	maxs
>24902	Identifier	maxs
>24903	Callee	DotProduct
>24904	Identifier	DotProduct
>24905	Identifier	max_t
>24906	ExpressionStatement	 
>24907	AssignmentExpr	max_s = DotProduct ( maxs , vecs [ 0 ] )
>24908	CallExpression	DotProduct ( maxs , vecs [ 0 ] )
>24909	ArgumentList	maxs
>24910	Argument	vecs [ 0 ]
>24911	ArrayIndexing	vecs [ 0 ]
>24912	PrimaryExpression	0
>24913	Identifier	vecs
>24914	Argument	maxs
>24915	Identifier	maxs
>24916	Callee	DotProduct
>24917	Identifier	DotProduct
>24918	Identifier	max_s
>24919	ExpressionStatement	 
>24920	AssignmentExpr	min_t = DotProduct ( mins , vecs [ 1 ] )
>24921	CallExpression	DotProduct ( mins , vecs [ 1 ] )
>24922	ArgumentList	mins
>24923	Argument	vecs [ 1 ]
>24924	ArrayIndexing	vecs [ 1 ]
>24925	PrimaryExpression	1
>24926	Identifier	vecs
>24927	Argument	mins
>24928	Identifier	mins
>24929	Callee	DotProduct
>24930	Identifier	DotProduct
>24931	Identifier	min_t
>24932	ExpressionStatement	 
>24933	AssignmentExpr	min_s = DotProduct ( mins , vecs [ 0 ] )
>24934	CallExpression	DotProduct ( mins , vecs [ 0 ] )
>24935	ArgumentList	mins
>24936	Argument	vecs [ 0 ]
>24937	ArrayIndexing	vecs [ 0 ]
>24938	PrimaryExpression	0
>24939	Identifier	vecs
>24940	Argument	mins
>24941	Identifier	mins
>24942	Callee	DotProduct
>24943	Identifier	DotProduct
>24944	Identifier	min_s
>24945	ExpressionStatement	 
>24946	CallExpression	TextureAxisFromPlane ( & face -> plane , vecs [ 0 ] , vecs [ 1 ] )
>24947	ArgumentList	& face -> plane
>24948	Argument	vecs [ 1 ]
>24949	ArrayIndexing	vecs [ 1 ]
>24950	PrimaryExpression	1
>24951	Identifier	vecs
>24952	Argument	vecs [ 0 ]
>24953	ArrayIndexing	vecs [ 0 ]
>24954	PrimaryExpression	0
>24955	Identifier	vecs
>24956	Argument	& face -> plane
>24957	UnaryOp	& face -> plane
>24958	PtrMemberAccess	face -> plane
>24959	Identifier	plane
>24960	Identifier	face
>24961	UnaryOperator	&
>24962	Callee	TextureAxisFromPlane
>24963	Identifier	TextureAxisFromPlane
>24964	ExpressionStatement	 
>24965	AssignmentExpr	cosv = cos ( ang )
>24966	CallExpression	cos ( ang )
>24967	ArgumentList	ang
>24968	Argument	ang
>24969	Identifier	ang
>24970	Callee	cos
>24971	Identifier	cos
>24972	Identifier	cosv
>24973	ExpressionStatement	 
>24974	AssignmentExpr	sinv = sin ( ang )
>24975	CallExpression	sin ( ang )
>24976	ArgumentList	ang
>24977	Argument	ang
>24978	Identifier	ang
>24979	Callee	sin
>24980	Identifier	sin
>24981	Identifier	sinv
>24982	ExpressionStatement	 
>24983	AssignmentExpr	ang = td -> rotate / 180 * Q_PI
>24984	MultiplicativeExpression	td -> rotate / 180 * Q_PI
>24985	MultiplicativeExpression	180 * Q_PI
>24986	Identifier	Q_PI
>24987	PrimaryExpression	180
>24988	PtrMemberAccess	td -> rotate
>24989	Identifier	rotate
>24990	Identifier	td
>24991	Identifier	ang
>24992	ForStatement	for ( i = 0 ; i < w -> numpoints ; i ++ )
>24993	CompoundStatement	 
>24994	ExpressionStatement	 
>24995	CallExpression	AddPointToBounds ( w -> points [ i ] , mins , maxs )
>24996	ArgumentList	w -> points [ i ]
>24997	Argument	maxs
>24998	Identifier	maxs
>24999	Argument	mins
>25000	Identifier	mins
>25001	Argument	w -> points [ i ]
>25002	ArrayIndexing	w -> points [ i ]
>25003	Identifier	i
>25004	PtrMemberAccess	w -> points
>25005	Identifier	points
>25006	Identifier	w
>25007	Callee	AddPointToBounds
>25008	Identifier	AddPointToBounds
>25009	IncDecOp	 
>25010	IncDec	++
>25011	Identifier	i
>25012	Condition	 
>25013	RelationalExpression	i < w -> numpoints
>25014	PtrMemberAccess	w -> numpoints
>25015	Identifier	numpoints
>25016	Identifier	w
>25017	Identifier	i
>25018	ForInit	 
>25019	AssignmentExpr	i = 0
>25020	PrimaryExpression	0
>25021	Identifier	i
>25022	IfStatement	if ( ! w )
>25023	CompoundStatement	 
>25024	ReturnStatement	 
>25025	Condition	 
>25026	UnaryOp	! w
>25027	Identifier	w
>25028	UnaryOperator	!
>25029	ExpressionStatement	 
>25030	AssignmentExpr	w = face -> face_winding
>25031	PtrMemberAccess	face -> face_winding
>25032	Identifier	face_winding
>25033	Identifier	face
>25034	Identifier	w
>25035	ExpressionStatement	 
>25036	AssignmentExpr	td = & face -> texdef
>25037	UnaryOp	& face -> texdef
>25038	PtrMemberAccess	face -> texdef
>25039	Identifier	texdef
>25040	Identifier	face
>25041	UnaryOperator	&
>25042	Identifier	td
>25043	ExpressionStatement	 
>25044	CallExpression	ClearBounds ( mins , maxs )
>25045	ArgumentList	mins
>25046	Argument	maxs
>25047	Identifier	maxs
>25048	Argument	mins
>25049	Identifier	mins
>25050	Callee	ClearBounds
>25051	Identifier	ClearBounds
>25052	IfStatement	if ( nWidth < 1 )
>25053	CompoundStatement	 
>25054	ExpressionStatement	 
>25055	AssignmentExpr	nWidth = 1
>25056	PrimaryExpression	1
>25057	Identifier	nWidth
>25058	Condition	 
>25059	RelationalExpression	nWidth < 1
>25060	PrimaryExpression	1
>25061	Identifier	nWidth
>25062	IfStatement	if ( nHeight < 1 )
>25063	CompoundStatement	 
>25064	ExpressionStatement	 
>25065	AssignmentExpr	nHeight = 1
>25066	PrimaryExpression	1
>25067	Identifier	nHeight
>25068	Condition	 
>25069	RelationalExpression	nHeight < 1
>25070	PrimaryExpression	1
>25071	Identifier	nHeight
>25072	IdentifierDeclStatement	 
>25073	IdentifierDecl	* td
>25074	Identifier	td
>25075	IdentifierDeclType	texdef_t *
>25076	IdentifierDeclStatement	 
>25077	IdentifierDecl	coords [ 4 ]
>25078	PrimaryExpression	4
>25079	Identifier	coords
>25080	IdentifierDeclType	vec3_t [ 4 ]
>25081	IdentifierDeclStatement	 
>25082	IdentifierDecl	vecs [ 2 ]
>25083	PrimaryExpression	2
>25084	Identifier	vecs
>25085	IdentifierDeclType	vec3_t [ 2 ]
>25086	IdentifierDeclStatement	 
>25087	IdentifierDecl	t
>25088	Identifier	t
>25089	IdentifierDeclType	float
>25090	IdentifierDecl	s
>25091	Identifier	s
>25092	IdentifierDeclType	float
>25093	IdentifierDeclStatement	 
>25094	IdentifierDecl	max_s
>25095	Identifier	max_s
>25096	IdentifierDeclType	float
>25097	IdentifierDecl	max_t
>25098	Identifier	max_t
>25099	IdentifierDeclType	float
>25100	IdentifierDecl	min_s
>25101	Identifier	min_s
>25102	IdentifierDeclType	float
>25103	IdentifierDecl	min_t
>25104	Identifier	min_t
>25105	IdentifierDeclType	float
>25106	IdentifierDeclStatement	 
>25107	IdentifierDecl	ang
>25108	Identifier	ang
>25109	IdentifierDeclType	float
>25110	IdentifierDecl	sinv
>25111	Identifier	sinv
>25112	IdentifierDeclType	float
>25113	IdentifierDecl	cosv
>25114	Identifier	cosv
>25115	IdentifierDeclType	float
>25116	IdentifierDeclStatement	 
>25117	IdentifierDecl	rot_height
>25118	Identifier	rot_height
>25119	IdentifierDeclType	float
>25120	IdentifierDecl	rot_width
>25121	Identifier	rot_width
>25122	IdentifierDeclType	float
>25123	IdentifierDeclStatement	 
>25124	IdentifierDecl	temp
>25125	Identifier	temp
>25126	IdentifierDeclType	float
>25127	IdentifierDecl	height
>25128	Identifier	height
>25129	IdentifierDeclType	float
>25130	IdentifierDecl	width
>25131	Identifier	width
>25132	IdentifierDeclType	float
>25133	IdentifierDeclStatement	 
>25134	IdentifierDecl	i
>25135	Identifier	i
>25136	IdentifierDeclType	int
>25137	IdentifierDeclStatement	 
>25138	IdentifierDecl	maxs
>25139	Identifier	maxs
>25140	IdentifierDeclType	vec3_t
>25141	IdentifierDecl	mins
>25142	Identifier	mins
>25143	IdentifierDeclType	vec3_t
>25144	IdentifierDeclStatement	 
>25145	IdentifierDecl	* w
>25146	Identifier	w
>25147	IdentifierDeclType	winding_t *
>25206	FunctionDef	Brush_FitTexture (brush_t * b , int nHeight , int nWidth)
>25207	ParameterList	brush_t * b , int nHeight , int nWidth
>25208	Parameter	 
>25209	Identifier	nWidth
>25210	ParameterType	int
>25211	Parameter	 
>25212	Identifier	nHeight
>25213	ParameterType	int
>25214	Parameter	 
>25215	Identifier	b
>25216	ParameterType	brush_t *
>25217	ReturnType	void
>25218	CompoundStatement	 
>25219	ForStatement	for ( face = b -> brush_faces ; face ; face = face -> next )
>25220	CompoundStatement	 
>25221	ExpressionStatement	 
>25222	CallExpression	Face_FitTexture ( face , nHeight , nWidth )
>25223	ArgumentList	face
>25224	Argument	nWidth
>25225	Identifier	nWidth
>25226	Argument	nHeight
>25227	Identifier	nHeight
>25228	Argument	face
>25229	Identifier	face
>25230	Callee	Face_FitTexture
>25231	Identifier	Face_FitTexture
>25232	AssignmentExpr	 
>25233	PtrMemberAccess	face -> next
>25234	Identifier	next
>25235	Identifier	face
>25236	Identifier	face
>25237	Condition	 
>25238	Identifier	face
>25239	ForInit	 
>25240	AssignmentExpr	face = b -> brush_faces
>25241	PtrMemberAccess	b -> brush_faces
>25242	Identifier	brush_faces
>25243	Identifier	b
>25244	Identifier	face
>25245	IdentifierDeclStatement	 
>25246	IdentifierDecl	* face
>25247	Identifier	face
>25248	IdentifierDeclType	face_t *
<5=11,10,6
<6=7
<7=9,8
<11=57,52,44,14,12
<12=13
<14=40,15
<15=27,16
<16=17
<17=25,18
<18=23,21,19
<19=20
<21=22
<23=24
<25=26
<27=28
<28=38,29
<29=36,34,30
<30=31
<31=33,32
<34=35
<36=37
<38=39
<40=41
<41=43,42
<44=45
<45=49,46
<46=48,47
<49=51,50
<52=53
<53=56,55,54
<68=71,70,69
<71=74,72
<72=73
<74=75
<75=89,88,76
<76=87,77
<77=86,78
<78=84,79
<79=80
<80=81
<81=83,82
<84=85
<95=101,100,96
<96=97
<97=99,98
<101=154,147,102
<102=143,137,134,103
<103=104
<104=132,105
<105=130,122,114,106
<106=107
<107=109,108
<109=111,110
<111=113,112
<114=115
<115=117,116
<117=119,118
<119=121,120
<122=123
<123=125,124
<125=127,126
<127=129,128
<130=131
<132=133
<134=136,135
<137=138
<138=142,139
<139=141,140
<143=144
<144=146,145
<147=148
<148=152,149
<149=150
<150=151
<152=153
<154=155
<155=157,156
<172=178,177,173
<173=174
<174=176,175
<178=179
<179=180
<180=206,181
<181=204,198,192,186,182
<182=183
<183=185,184
<186=187
<187=189,188
<189=191,190
<192=193
<193=195,194
<195=197,196
<198=199
<199=201,200
<201=203,202
<204=205
<206=207
<217=223,222,218
<218=219
<219=221,220
<223=224
<224=225
<225=241,226
<226=239,235,231,227
<227=228
<228=230,229
<231=232
<232=234,233
<235=236
<236=238,237
<239=240
<241=242
<250=262,261,251
<251=258,255,252
<252=254,253
<255=257,256
<258=260,259
<262=356,349,345,341,337,293,278,263
<263=264
<264=276,265
<265=268,266
<266=267
<268=269
<269=275,270
<270=272,271
<272=274,273
<276=277
<278=279
<279=291,280
<280=283,281
<281=282
<283=284
<284=290,285
<285=287,286
<287=289,288
<291=292
<293=333,329,326,294
<294=309,295
<295=305,296
<296=301,297
<297=298
<298=300,299
<301=302
<302=304,303
<305=306
<306=308,307
<309=310
<310=325,311
<311=323,312
<312=319,313
<313=314
<314=318,315
<315=317,316
<319=320
<320=322,321
<323=324
<326=328,327
<329=330
<330=332,331
<333=334
<334=336,335
<337=338
<338=340,339
<341=342
<342=344,343
<345=346
<346=348,347
<349=353,350
<350=352,351
<353=355,354
<356=357
<357=359,358
<379=385,384,380
<380=381
<381=383,382
<385=492,488,453,404,388,386
<386=387
<388=389
<389=403,390
<390=392,391
<392=400,393
<393=397,394
<394=396,395
<397=399,398
<400=402,401
<404=449,445,442,405
<405=429,406
<406=409,407
<407=408
<409=410
<410=428,411
<411=413,412
<413=421,414
<414=420,415
<415=417,416
<417=419,418
<421=427,422
<422=424,423
<424=426,425
<429=430
<430=432,431
<432=440,433
<433=434
<434=435
<435=437,436
<437=439,438
<440=441
<442=444,443
<445=446
<446=448,447
<449=450
<450=452,451
<453=484,480,477,454
<454=464,455
<455=458,456
<456=457
<458=459
<459=463,460
<460=462,461
<464=465
<465=467,466
<467=475,468
<468=469
<469=470
<470=472,471
<472=474,473
<475=476
<477=479,478
<480=481
<481=483,482
<484=485
<485=487,486
<488=489
<489=491,490
<492=493
<493=495,494
<514=517,516,515
<517=543,537,536,535,534,533,532,531,530,529,520,518
<518=519
<520=521
<521=525,522
<522=523
<523=524
<525=526
<526=528,527
<537=539,538
<539=540
<540=542,541
<543=544
<544=560,559,545
<545=558,546
<546=557,547
<547=555,548
<548=549
<549=550
<550=554,551
<551=553,552
<555=556
<570=576,575,571
<571=572
<572=574,573
<576=649,628,594,585,584,577
<577=578
<578=582,579
<579=580
<580=581
<582=583
<585=586
<586=588,587
<588=589
<589=591,590
<591=593,592
<594=624,595
<595=596
<596=618,610,597
<597=598
<598=599
<599=601,600
<601=602
<602=604,603
<604=608,605
<605=606
<606=607
<608=609
<610=611
<611=612
<612=616,613
<613=614
<614=615
<616=617
<618=619
<619=623,620
<620=622,621
<624=625
<625=627,626
<628=645,629
<629=636,630
<630=631
<631=633,632
<633=635,634
<636=637
<637=643,638
<638=639
<639=640
<640=642,641
<643=644
<645=646
<646=648,647
<649=650
<650=656,651
<651=652
<652=653
<653=655,654
<656=657
<669=675,674,670
<670=671
<671=673,672
<675=712,705,697,678,676
<676=677
<678=679
<679=695,680
<680=691,687,681
<681=682
<682=686,683
<683=685,684
<687=688
<688=690,689
<691=692
<692=694,693
<695=696
<697=698
<698=702,699
<699=701,700
<702=704,703
<705=706
<706=711,707
<707=709,708
<709=710
<712=713
<713=715,714
<728=734,733,729
<729=730
<730=732,731
<734=832,825,817,798,777,752,737,735
<735=736
<737=738
<738=749,739
<739=747,740
<740=741
<741=742
<742=744,743
<744=746,745
<747=748
<749=751,750
<752=773,760,753
<753=754
<754=755
<755=757,756
<757=759,758
<760=761
<761=770,762
<762=768,763
<763=764
<764=765
<765=767,766
<768=769
<770=772,771
<773=774
<774=776,775
<777=778
<778=796,779
<779=790,784,780
<780=781
<781=783,782
<784=785
<785=789,786
<786=788,787
<790=791
<791=795,792
<792=794,793
<796=797
<798=799
<799=815,800
<800=811,807,801
<801=802
<802=806,803
<803=805,804
<807=808
<808=810,809
<811=812
<812=814,813
<815=816
<817=818
<818=822,819
<819=821,820
<822=824,823
<825=826
<826=831,827
<827=829,828
<829=830
<832=833
<833=835,834
<859=868,867,860
<860=864,861
<861=863,862
<864=866,865
<868=883,873,869
<869=870
<870=872,871
<873=874
<874=882,875
<875=881,876
<876=880,877
<877=879,878
<883=884
<884=895,894,885
<885=893,886
<886=890,887
<887=889,888
<890=892,891
<904=913,912,905
<905=909,906
<906=908,907
<909=911,910
<913=1169,914
<914=1165,1156,915
<915=916
<916=1141,1134,1121,1108,1093,1081,1069,1053,1037,1016,995,975,955,936,917
<917=918
<918=934,919
<919=926,920
<920=921
<921=923,922
<923=925,924
<926=927
<927=929,928
<929=931,930
<931=933,932
<934=935
<936=937
<937=953,938
<938=945,939
<939=940
<940=942,941
<942=944,943
<945=946
<946=948,947
<948=950,949
<950=952,951
<953=954
<955=956
<956=968,957
<957=965,958
<958=960,959
<960=962,961
<962=964,963
<965=967,966
<968=970,969
<970=972,971
<972=974,973
<975=976
<976=988,977
<977=985,978
<978=980,979
<980=982,981
<982=984,983
<985=987,986
<988=990,989
<990=992,991
<992=994,993
<995=1006,996
<996=997
<997=999,998
<999=1001,1000
<1001=1003,1002
<1003=1005,1004
<1006=1007
<1007=1015,1008
<1008=1010,1009
<1010=1012,1011
<1012=1014,1013
<1016=1027,1017
<1017=1018
<1018=1020,1019
<1020=1022,1021
<1022=1024,1023
<1024=1026,1025
<1027=1028
<1028=1036,1029
<1029=1031,1030
<1031=1033,1032
<1033=1035,1034
<1037=1038
<1038=1050,1039
<1039=1045,1040
<1040=1042,1041
<1042=1044,1043
<1045=1047,1046
<1047=1049,1048
<1050=1052,1051
<1053=1054
<1054=1066,1055
<1055=1061,1056
<1056=1058,1057
<1058=1060,1059
<1061=1063,1062
<1063=1065,1064
<1066=1068,1067
<1069=1070
<1070=1080,1079,1071
<1071=1078,1072
<1072=1076,1073
<1073=1074
<1074=1075
<1076=1077
<1081=1082
<1082=1092,1091,1083
<1083=1090,1084
<1084=1088,1085
<1085=1086
<1086=1087
<1088=1089
<1093=1094
<1094=1107,1106,1095
<1095=1105,1096
<1096=1100,1097
<1097=1099,1098
<1100=1102,1101
<1102=1104,1103
<1108=1109
<1109=1118,1110
<1110=1116,1111
<1111=1114,1112
<1112=1113
<1114=1115
<1116=1117
<1118=1120,1119
<1121=1122
<1122=1131,1123
<1123=1129,1124
<1124=1127,1125
<1125=1126
<1127=1128
<1129=1130
<1131=1133,1132
<1134=1138,1135
<1135=1137,1136
<1138=1140,1139
<1141=1142
<1142=1154,1143
<1143=1148,1146,1144
<1144=1145
<1146=1147
<1148=1149
<1149=1153,1150
<1150=1152,1151
<1154=1155
<1156=1157
<1157=1163,1158
<1158=1161,1159
<1159=1160
<1161=1162
<1163=1164
<1165=1166
<1166=1168,1167
<1169=1173,1170
<1170=1172,1171
<1173=1175,1174
<1211=1223,1222,1212
<1212=1219,1216,1213
<1213=1215,1214
<1216=1218,1217
<1219=1221,1220
<1223=1339,1335,1329,1316,1224
<1224=1290,1269,1225
<1225=1226
<1226=1255,1241,1227
<1227=1228
<1228=1236,1229
<1229=1235,1230
<1230=1232,1231
<1232=1234,1233
<1236=1238,1237
<1238=1240,1239
<1241=1242
<1242=1250,1243
<1243=1249,1244
<1244=1246,1245
<1246=1248,1247
<1250=1252,1251
<1252=1254,1253
<1255=1256
<1256=1264,1257
<1257=1263,1258
<1258=1260,1259
<1260=1262,1261
<1264=1266,1265
<1266=1268,1267
<1269=1270
<1270=1271
<1271=1285,1272
<1272=1280,1273
<1273=1275,1274
<1275=1277,1276
<1277=1279,1278
<1280=1282,1281
<1282=1284,1283
<1285=1287,1286
<1287=1289,1288
<1290=1291
<1291=1301,1292
<1292=1300,1293
<1293=1295,1294
<1295=1297,1296
<1297=1299,1298
<1301=1303,1302
<1303=1305,1304
<1305=1307,1306
<1307=1308
<1308=1310,1309
<1310=1312,1311
<1312=1313
<1313=1315,1314
<1316=1317
<1317=1328,1318
<1318=1326,1319
<1319=1320
<1320=1321
<1321=1325,1322
<1322=1324,1323
<1326=1327
<1329=1330
<1330=1334,1331
<1331=1333,1332
<1335=1336
<1336=1338,1337
<1339=1340
<1340=1342,1341
<1399=1405,1404,1400
<1400=1401
<1401=1403,1402
<1405=1547,1537,1472,1457,1436,1425,1406
<1406=1407
<1407=1420,1408
<1408=1418,1409
<1409=1416,1410
<1410=1411
<1411=1413,1412
<1413=1415,1414
<1416=1417
<1418=1419
<1420=1422,1421
<1422=1424,1423
<1425=1426
<1426=1434,1427
<1427=1428
<1428=1429
<1429=1431,1430
<1431=1433,1432
<1434=1435
<1436=1444,1437
<1437=1438
<1438=1442,1439
<1439=1440
<1440=1441
<1442=1443
<1444=1445
<1445=1455,1446
<1446=1449,1447
<1447=1448
<1449=1450
<1450=1452,1451
<1452=1454,1453
<1455=1456
<1457=1458
<1458=1470,1459
<1459=1468,1466,1460
<1460=1461
<1461=1463,1462
<1463=1465,1464
<1466=1467
<1468=1469
<1470=1471
<1472=1533,1529,1526,1473
<1473=1506,1486,1474
<1474=1475
<1475=1483,1476
<1476=1478,1477
<1478=1480,1479
<1480=1482,1481
<1483=1485,1484
<1486=1487
<1487=1503,1488
<1488=1496,1489
<1489=1491,1490
<1491=1493,1492
<1493=1495,1494
<1496=1498,1497
<1498=1500,1499
<1500=1502,1501
<1503=1505,1504
<1506=1507
<1507=1523,1508
<1508=1516,1509
<1509=1511,1510
<1511=1513,1512
<1513=1515,1514
<1516=1518,1517
<1518=1520,1519
<1520=1522,1521
<1523=1525,1524
<1526=1528,1527
<1529=1530
<1530=1532,1531
<1533=1534
<1534=1536,1535
<1537=1544,1541,1538
<1538=1540,1539
<1541=1543,1542
<1544=1546,1545
<1547=1548
<1548=1550,1549
<1575=1587,1586,1576
<1576=1583,1580,1577
<1577=1579,1578
<1580=1582,1581
<1583=1585,1584
<1587=1645,1639,1630,1609,1588
<1588=1589
<1589=1606,1590
<1590=1596,1591
<1591=1593,1592
<1593=1595,1594
<1596=1604,1597
<1597=1602,1598
<1598=1599
<1599=1601,1600
<1602=1603
<1604=1605
<1606=1608,1607
<1609=1610
<1610=1627,1611
<1611=1617,1612
<1612=1614,1613
<1614=1616,1615
<1617=1625,1618
<1618=1623,1619
<1619=1620
<1620=1622,1621
<1623=1624
<1625=1626
<1627=1629,1628
<1630=1631
<1631=1637,1632
<1632=1635,1633
<1633=1634
<1635=1636
<1637=1638
<1639=1640
<1640=1642,1641
<1642=1644,1643
<1657=1663,1662,1658
<1658=1659
<1659=1661,1660
<1663=1686,1664
<1664=1680,1678,1673,1665
<1665=1666
<1666=1667
<1667=1671,1668
<1668=1669
<1669=1670
<1671=1672
<1673=1677,1674
<1674=1676,1675
<1678=1679
<1680=1681
<1681=1685,1682
<1682=1684,1683
<1686=1687
<1687=1689,1688
<1699=1705,1704,1700
<1700=1701
<1701=1703,1702
<1705=2100,2092,2084,2072,1772,1706
<1706=1766,1707
<1707=1753,1724,1708
<1708=1709
<1709=1722,1710
<1710=1715,1713,1711
<1711=1712
<1713=1714
<1715=1716
<1716=1720,1717
<1717=1718
<1718=1719
<1720=1721
<1722=1723
<1724=1725
<1725=1751,1726
<1726=1743,1735,1727
<1727=1728
<1728=1730,1729
<1730=1732,1731
<1732=1734,1733
<1735=1736
<1736=1738,1737
<1738=1740,1739
<1740=1742,1741
<1743=1744
<1744=1746,1745
<1746=1748,1747
<1748=1750,1749
<1751=1752
<1753=1754
<1754=1765,1755
<1755=1763,1756
<1756=1759,1757
<1757=1758
<1759=1760
<1760=1762,1761
<1763=1764
<1766=1767
<1767=1769,1768
<1769=1771,1770
<1772=2062,1773
<1773=2049,1774
<1774=2047,1775
<1775=2034,2021,1991,1984,1977,1969,1961,1953,1946,1938,1930,1922,1914,1906,1898,1891,1883,1875,1867,1859,1851,1843,1836,1828,1820,1812,1804,1796,1788,1781,1776
<1776=1777
<1777=1779,1778
<1779=1780
<1781=1782
<1782=1786,1783
<1783=1784
<1784=1785
<1786=1787
<1788=1789
<1789=1793,1790
<1790=1792,1791
<1793=1795,1794
<1796=1797
<1797=1801,1798
<1798=1800,1799
<1801=1803,1802
<1804=1805
<1805=1809,1806
<1806=1808,1807
<1809=1811,1810
<1812=1813
<1813=1817,1814
<1814=1816,1815
<1817=1819,1818
<1820=1821
<1821=1825,1822
<1822=1824,1823
<1825=1827,1826
<1828=1829
<1829=1833,1830
<1830=1832,1831
<1833=1835,1834
<1836=1837
<1837=1841,1838
<1838=1839
<1839=1840
<1841=1842
<1843=1844
<1844=1848,1845
<1845=1847,1846
<1848=1850,1849
<1851=1852
<1852=1856,1853
<1853=1855,1854
<1856=1858,1857
<1859=1860
<1860=1864,1861
<1861=1863,1862
<1864=1866,1865
<1867=1868
<1868=1872,1869
<1869=1871,1870
<1872=1874,1873
<1875=1876
<1876=1880,1877
<1877=1879,1878
<1880=1882,1881
<1883=1884
<1884=1888,1885
<1885=1887,1886
<1888=1890,1889
<1891=1892
<1892=1896,1893
<1893=1894
<1894=1895
<1896=1897
<1898=1899
<1899=1903,1900
<1900=1902,1901
<1903=1905,1904
<1906=1907
<1907=1911,1908
<1908=1910,1909
<1911=1913,1912
<1914=1915
<1915=1919,1916
<1916=1918,1917
<1919=1921,1920
<1922=1923
<1923=1927,1924
<1924=1926,1925
<1927=1929,1928
<1930=1931
<1931=1935,1932
<1932=1934,1933
<1935=1937,1936
<1938=1939
<1939=1943,1940
<1940=1942,1941
<1943=1945,1944
<1946=1947
<1947=1951,1948
<1948=1949
<1949=1950
<1951=1952
<1953=1954
<1954=1958,1955
<1955=1957,1956
<1958=1960,1959
<1961=1962
<1962=1966,1963
<1963=1965,1964
<1966=1968,1967
<1969=1970
<1970=1974,1971
<1971=1973,1972
<1974=1976,1975
<1977=1978
<1978=1982,1979
<1979=1980
<1980=1981
<1982=1983
<1984=1985
<1985=1989,1986
<1986=1987
<1987=1988
<1989=1990
<1991=2017,2013,2010,1992
<1992=1993
<1993=2007,1994
<1994=1996,1995
<1996=2002,1997
<1997=1999,1998
<1999=2001,2000
<2002=2004,2003
<2004=2006,2005
<2007=2009,2008
<2010=2012,2011
<2013=2014
<2014=2016,2015
<2017=2018
<2018=2020,2019
<2021=2022
<2022=2033,2023
<2023=2031,2024
<2024=2025
<2025=2026
<2026=2030,2027
<2027=2029,2028
<2031=2032
<2034=2035
<2035=2046,2036
<2036=2044,2037
<2037=2038
<2038=2039
<2039=2043,2040
<2040=2042,2041
<2044=2045
<2047=2048
<2049=2050
<2050=2061,2051
<2051=2059,2052
<2052=2055,2053
<2053=2054
<2055=2056
<2056=2058,2057
<2059=2060
<2062=2063
<2063=2071,2064
<2064=2066,2065
<2066=2068,2067
<2068=2070,2069
<2072=2074,2073
<2074=2075
<2075=2083,2076
<2076=2078,2077
<2078=2080,2079
<2080=2082,2081
<2084=2086,2085
<2086=2087
<2087=2089,2088
<2089=2091,2090
<2092=2094,2093
<2094=2095
<2095=2099,2096
<2096=2098,2097
<2100=2101
<2101=2103,2102
<2140=2149,2148,2141
<2141=2145,2142
<2142=2144,2143
<2145=2147,2146
<2149=2345,2341,2337,2333,2320,2316,2183,2164,2152,2150
<2150=2151
<2152=2160,2153
<2153=2154
<2154=2158,2155
<2155=2156
<2156=2157
<2158=2159
<2160=2161
<2161=2163,2162
<2164=2177,2165
<2165=2170,2166
<2166=2167
<2167=2169,2168
<2170=2171
<2171=2175,2172
<2172=2173
<2173=2174
<2175=2176
<2177=2178
<2178=2180,2179
<2180=2182,2181
<2183=2310,2306,2301,2184
<2184=2290,2236,2219,2207,2192,2185
<2185=2188,2186
<2186=2187
<2188=2189
<2189=2191,2190
<2192=2193
<2193=2206,2194
<2194=2204,2195
<2195=2202,2198,2196
<2196=2197
<2198=2199
<2199=2201,2200
<2202=2203
<2204=2205
<2207=2208
<2208=2216,2209
<2209=2215,2210
<2210=2212,2211
<2212=2214,2213
<2216=2218,2217
<2219=2220
<2220=2234,2221
<2221=2232,2226,2222
<2222=2223
<2223=2225,2224
<2226=2227
<2227=2229,2228
<2229=2231,2230
<2232=2233
<2234=2235
<2236=2252,2237
<2237=2239,2238
<2239=2250,2240
<2240=2243,2241
<2241=2242
<2243=2244
<2244=2248,2245
<2245=2246
<2246=2247
<2248=2249
<2250=2251
<2252=2253
<2253=2272,2254
<2254=2256,2255
<2256=2270,2257
<2257=2258
<2258=2259
<2259=2265,2260
<2260=2262,2261
<2262=2264,2263
<2265=2267,2266
<2267=2269,2268
<2270=2271
<2272=2274,2273
<2274=2288,2275
<2275=2282,2276
<2276=2277
<2277=2279,2278
<2279=2281,2280
<2282=2283
<2283=2285,2284
<2285=2287,2286
<2288=2289
<2290=2297,2291
<2291=2293,2292
<2293=2294
<2294=2296,2295
<2297=2298
<2298=2300,2299
<2301=2305,2302
<2302=2304,2303
<2306=2307
<2307=2309,2308
<2310=2311
<2311=2315,2312
<2312=2314,2313
<2316=2317
<2317=2319,2318
<2320=2321
<2321=2332,2322
<2322=2330,2323
<2323=2324
<2324=2325
<2325=2329,2326
<2326=2328,2327
<2330=2331
<2333=2334
<2334=2336,2335
<2337=2338
<2338=2340,2339
<2341=2342
<2342=2344,2343
<2345=2346
<2346=2348,2347
<2384=2390,2389,2385
<2385=2386
<2386=2388,2387
<2390=2462,2458,2452,2391
<2391=2446,2444,2439,2392
<2392=2435,2431,2428,2393
<2393=2424,2420,2417,2394
<2394=2395
<2395=2410,2396
<2396=2408,2397
<2397=2398
<2398=2399
<2399=2401,2400
<2401=2403,2402
<2403=2405,2404
<2405=2407,2406
<2408=2409
<2410=2412,2411
<2412=2414,2413
<2414=2416,2415
<2417=2419,2418
<2420=2421
<2421=2423,2422
<2424=2425
<2425=2427,2426
<2428=2430,2429
<2431=2432
<2432=2434,2433
<2435=2436
<2436=2438,2437
<2439=2443,2440
<2440=2442,2441
<2444=2445
<2446=2447
<2447=2451,2448
<2448=2450,2449
<2452=2454,2453
<2454=2455
<2455=2457,2456
<2458=2459
<2459=2461,2460
<2462=2466,2463
<2463=2465,2464
<2466=2468,2467
<2491=2506,2505,2492
<2492=2502,2499,2496,2493
<2493=2495,2494
<2496=2498,2497
<2499=2501,2500
<2502=2504,2503
<2506=2609,2593,2573,2564,2557,2539,2525,2516,2507
<2507=2514,2508
<2508=2509
<2509=2511,2510
<2511=2513,2512
<2514=2515
<2516=2523,2517
<2517=2518
<2518=2519
<2519=2521,2520
<2521=2522
<2523=2524
<2525=2533,2526
<2526=2527
<2527=2531,2528
<2528=2529
<2529=2530
<2531=2532
<2533=2534
<2534=2536,2535
<2536=2538,2537
<2539=2545,2540
<2540=2541
<2541=2543,2542
<2543=2544
<2545=2546
<2546=2552,2547
<2547=2549,2548
<2549=2551,2550
<2552=2554,2553
<2554=2556,2555
<2557=2558
<2558=2562,2559
<2559=2560
<2560=2561
<2562=2563
<2564=2565
<2565=2571,2566
<2566=2569,2567
<2567=2568
<2569=2570
<2571=2572
<2573=2585,2574
<2574=2581,2575
<2575=2576
<2576=2578,2577
<2578=2580,2579
<2581=2582
<2582=2584,2583
<2585=2586
<2586=2592,2587
<2587=2591,2588
<2588=2590,2589
<2593=2601,2594
<2594=2595
<2595=2599,2596
<2596=2597
<2597=2598
<2599=2600
<2601=2602
<2602=2604,2603
<2604=2608,2605
<2605=2607,2606
<2609=2610
<2610=2612,2611
<2632=2647,2646,2633
<2633=2643,2640,2637,2634
<2634=2636,2635
<2637=2639,2638
<2640=2642,2641
<2643=2645,2644
<2647=2891,2887,2883,2874,2865,2855,2847,2841,2834,2827,2787,2778,2769,2756,2739,2726,2716,2708,2702,2695,2688,2648
<2648=2682,2668,2649
<2649=2650
<2650=2657,2651
<2651=2652
<2652=2654,2653
<2654=2656,2655
<2657=2658
<2658=2666,2659
<2659=2662,2660
<2660=2661
<2662=2663
<2663=2665,2664
<2666=2667
<2668=2675,2669
<2669=2670
<2670=2672,2671
<2672=2674,2673
<2675=2676
<2676=2680,2677
<2677=2678
<2678=2679
<2680=2681
<2682=2683
<2683=2687,2684
<2684=2686,2685
<2688=2689
<2689=2693,2690
<2690=2691
<2691=2692
<2693=2694
<2695=2696
<2696=2700,2697
<2697=2698
<2698=2699
<2700=2701
<2702=2703
<2703=2705,2704
<2705=2707,2706
<2708=2709
<2709=2713,2710
<2710=2712,2711
<2713=2715,2714
<2716=2717
<2717=2723,2718
<2718=2720,2719
<2720=2722,2721
<2723=2725,2724
<2726=2727
<2727=2737,2728
<2728=2735,2729
<2729=2730
<2730=2732,2731
<2732=2734,2733
<2735=2736
<2737=2738
<2739=2740
<2740=2754,2741
<2741=2748,2742
<2742=2743
<2743=2745,2744
<2745=2747,2746
<2748=2749
<2749=2751,2750
<2751=2753,2752
<2754=2755
<2756=2757
<2757=2767,2758
<2758=2761,2759
<2759=2760
<2761=2762
<2762=2764,2763
<2764=2766,2765
<2767=2768
<2769=2770
<2770=2777,2771
<2771=2775,2772
<2772=2773
<2773=2774
<2775=2776
<2778=2779
<2779=2786,2780
<2780=2784,2781
<2781=2782
<2782=2783
<2784=2785
<2787=2821,2807,2788
<2788=2789
<2789=2796,2790
<2790=2791
<2791=2793,2792
<2793=2795,2794
<2796=2797
<2797=2805,2798
<2798=2801,2799
<2799=2800
<2801=2802
<2802=2804,2803
<2805=2806
<2807=2814,2808
<2808=2809
<2809=2811,2810
<2811=2813,2812
<2814=2815
<2815=2819,2816
<2816=2817
<2817=2818
<2819=2820
<2821=2822
<2822=2826,2823
<2823=2825,2824
<2827=2828
<2828=2832,2829
<2829=2830
<2830=2831
<2832=2833
<2834=2835
<2835=2839,2836
<2836=2837
<2837=2838
<2839=2840
<2841=2842
<2842=2844,2843
<2844=2846,2845
<2847=2848
<2848=2852,2849
<2849=2851,2850
<2852=2854,2853
<2855=2856
<2856=2862,2857
<2857=2859,2858
<2859=2861,2860
<2862=2864,2863
<2865=2866
<2866=2873,2867
<2867=2871,2868
<2868=2869
<2869=2870
<2871=2872
<2874=2875
<2875=2882,2876
<2876=2880,2877
<2877=2878
<2878=2879
<2880=2881
<2883=2884
<2884=2886,2885
<2887=2888
<2888=2890,2889
<2891=2892
<2892=2894,2893
<2923=2929,2928,2924
<2924=2925
<2925=2927,2926
<2929=3118,3111,3098,3094,3090,2932,2930
<2930=2931
<2932=3084,3082,3077,2933
<2933=3073,3069,2960,2934
<2934=2958,2935
<2935=2950,2936
<2936=2946,2937
<2937=2942,2938
<2938=2939
<2939=2941,2940
<2942=2943
<2943=2945,2944
<2946=2947
<2947=2949,2948
<2950=2951
<2951=2957,2952
<2952=2956,2953
<2953=2955,2954
<2958=2959
<2960=3063,3061,3056,2961
<2961=3050,3019,2962
<2962=3015,3007,2963
<2963=2964
<2964=3003,2995,2965
<2965=2966
<2966=2991,2979,2967
<2967=2972,2968
<2968=2969
<2969=2971,2970
<2972=2973
<2973=2977,2974
<2974=2975
<2975=2976
<2977=2978
<2979=2984,2980
<2980=2981
<2981=2983,2982
<2984=2985
<2985=2989,2986
<2986=2987
<2987=2988
<2989=2990
<2991=2992
<2992=2994,2993
<2995=2996
<2996=2997
<2997=3001,2998
<2998=2999
<2999=3000
<3001=3002
<3003=3004
<3004=3006,3005
<3007=3008
<3008=3009
<3009=3013,3010
<3010=3011
<3011=3012
<3013=3014
<3015=3016
<3016=3018,3017
<3019=3020
<3020=3048,3021
<3021=3044,3038,3032,3030,3026,3022
<3022=3023
<3023=3025,3024
<3026=3027
<3027=3029,3028
<3030=3031
<3032=3033
<3033=3035,3034
<3035=3037,3036
<3038=3039
<3039=3041,3040
<3041=3043,3042
<3044=3045
<3045=3047,3046
<3048=3049
<3050=3052,3051
<3052=3053
<3053=3055,3054
<3056=3060,3057
<3057=3059,3058
<3061=3062
<3063=3064
<3064=3068,3065
<3065=3067,3066
<3069=3070
<3070=3072,3071
<3073=3074
<3074=3076,3075
<3077=3081,3078
<3078=3080,3079
<3082=3083
<3084=3085
<3085=3089,3086
<3086=3088,3087
<3090=3091
<3091=3093,3092
<3094=3095
<3095=3097,3096
<3098=3108,3105,3102,3099
<3099=3101,3100
<3102=3104,3103
<3105=3107,3106
<3108=3110,3109
<3111=3115,3112
<3112=3114,3113
<3115=3117,3116
<3118=3125,3122,3119
<3119=3121,3120
<3122=3124,3123
<3125=3127,3126
<3155=3161,3160,3156
<3156=3157
<3157=3159,3158
<3161=3276,3272,3266,3257,3250,3233,3222,3215,3203,3194,3164,3162
<3162=3163
<3164=3192,3165
<3165=3177,3166
<3166=3167
<3167=3174,3168
<3168=3172,3169
<3169=3170
<3170=3171
<3172=3173
<3174=3176,3175
<3177=3188,3184,3179,3178
<3179=3183,3180
<3180=3182,3181
<3184=3185
<3185=3187,3186
<3188=3189
<3189=3191,3190
<3192=3193
<3194=3195
<3195=3202,3196
<3196=3200,3197
<3197=3198
<3198=3199
<3200=3201
<3203=3211,3204
<3204=3205
<3205=3209,3206
<3206=3207
<3207=3208
<3209=3210
<3211=3212
<3212=3214,3213
<3215=3216
<3216=3220,3217
<3217=3218
<3218=3219
<3220=3221
<3222=3225,3223
<3223=3224
<3225=3226
<3226=3230,3227
<3227=3229,3228
<3230=3232,3231
<3233=3234
<3234=3248,3235
<3235=3246,3244,3240,3236
<3236=3237
<3237=3239,3238
<3240=3241
<3241=3243,3242
<3244=3245
<3246=3247
<3248=3249
<3250=3253,3251
<3251=3252
<3253=3254
<3254=3256,3255
<3257=3258
<3258=3265,3259
<3259=3263,3260
<3260=3261
<3261=3262
<3263=3264
<3266=3267
<3267=3269,3268
<3269=3271,3270
<3272=3273
<3273=3275,3274
<3276=3283,3280,3277
<3277=3279,3278
<3280=3282,3281
<3283=3285,3284
<3303=3309,3308,3304
<3304=3305
<3305=3307,3306
<3309=3405,3312,3310
<3310=3311
<3312=3399,3397,3392,3313
<3313=3384,3314
<3314=3378,3376,3371,3315
<3315=3365,3357,3316
<3316=3320,3317
<3317=3318
<3318=3319
<3320=3321
<3321=3355,3322
<3322=3351,3347,3341,3335,3329,3323
<3323=3324
<3324=3326,3325
<3326=3328,3327
<3329=3330
<3330=3332,3331
<3332=3334,3333
<3335=3336
<3336=3338,3337
<3338=3340,3339
<3341=3342
<3342=3344,3343
<3344=3346,3345
<3347=3348
<3348=3350,3349
<3351=3352
<3352=3354,3353
<3355=3356
<3357=3359,3358
<3359=3360
<3360=3364,3361
<3361=3363,3362
<3365=3367,3366
<3367=3368
<3368=3370,3369
<3371=3375,3372
<3372=3374,3373
<3376=3377
<3378=3379
<3379=3383,3380
<3380=3382,3381
<3384=3386,3385
<3386=3387
<3387=3391,3388
<3388=3390,3389
<3392=3396,3393
<3393=3395,3394
<3397=3398
<3399=3400
<3400=3404,3401
<3401=3403,3402
<3405=3409,3406
<3406=3408,3407
<3409=3411,3410
<3435=3453,3452,3436
<3436=3449,3446,3443,3440,3437
<3437=3439,3438
<3440=3442,3441
<3443=3445,3444
<3446=3448,3447
<3449=3451,3450
<3453=4950,4945,4940,4933,4917,4913,4909,4903,4897,4886,4848,4844,4223,4219,4212,4208,4204,4200,4187,4174,3816,3729,3660,3656,3456,3454
<3454=3455
<3456=3650,3648,3645,3457
<3457=3639,3626,3596,3571,3560,3549,3541,3528,3485,3465,3458
<3458=3459
<3459=3463,3460
<3460=3461
<3461=3462
<3463=3464
<3465=3483,3475,3466
<3466=3467
<3467=3468
<3468=3472,3469
<3469=3471,3470
<3472=3474,3473
<3475=3476
<3476=3480,3477
<3477=3479,3478
<3480=3482,3481
<3483=3484
<3485=3524,3514,3511,3486
<3486=3487
<3487=3509,3488
<3488=3499,3493,3489
<3489=3490
<3490=3492,3491
<3493=3494
<3494=3496,3495
<3496=3498,3497
<3499=3500
<3500=3502,3501
<3502=3504,3503
<3504=3506,3505
<3506=3508,3507
<3509=3510
<3511=3513,3512
<3514=3515
<3515=3523,3516
<3516=3518,3517
<3518=3520,3519
<3520=3522,3521
<3524=3525
<3525=3527,3526
<3528=3529
<3529=3539,3530
<3530=3537,3533,3531
<3531=3532
<3533=3534
<3534=3536,3535
<3537=3538
<3539=3540
<3541=3542
<3542=3544,3543
<3544=3546,3545
<3546=3548,3547
<3549=3550
<3550=3558,3551
<3551=3552
<3552=3553
<3553=3555,3554
<3555=3557,3556
<3558=3559
<3560=3567,3561
<3561=3563,3562
<3563=3564
<3564=3566,3565
<3567=3568
<3568=3570,3569
<3571=3572
<3572=3595,3573
<3573=3593,3574
<3574=3589,3583,3577,3575
<3575=3576
<3577=3578
<3578=3580,3579
<3580=3582,3581
<3583=3584
<3584=3586,3585
<3586=3588,3587
<3589=3590
<3590=3592,3591
<3593=3594
<3596=3603,3597
<3597=3599,3598
<3599=3600
<3600=3602,3601
<3603=3604
<3604=3625,3605
<3605=3623,3606
<3606=3617,3609,3607
<3607=3608
<3609=3610
<3610=3616,3611
<3611=3613,3612
<3613=3615,3614
<3617=3618
<3618=3622,3619
<3619=3621,3620
<3623=3624
<3626=3633,3627
<3627=3629,3628
<3629=3630
<3630=3632,3631
<3633=3634
<3634=3638,3635
<3635=3637,3636
<3639=3640
<3640=3644,3641
<3641=3643,3642
<3645=3647,3646
<3648=3649
<3650=3651
<3651=3655,3652
<3652=3654,3653
<3656=3657
<3657=3659,3658
<3660=3725,3721,3718,3661
<3661=3705,3662
<3662=3701,3691,3688,3663
<3663=3664
<3664=3686,3665
<3665=3676,3670,3666
<3666=3667
<3667=3669,3668
<3670=3671
<3671=3673,3672
<3673=3675,3674
<3676=3677
<3677=3679,3678
<3679=3681,3680
<3681=3683,3682
<3683=3685,3684
<3686=3687
<3688=3690,3689
<3691=3692
<3692=3700,3693
<3693=3695,3694
<3695=3697,3696
<3697=3699,3698
<3701=3702
<3702=3704,3703
<3705=3706
<3706=3716,3707
<3707=3714,3710,3708
<3708=3709
<3710=3711
<3711=3713,3712
<3714=3715
<3716=3717
<3718=3720,3719
<3721=3722
<3722=3724,3723
<3725=3726
<3726=3728,3727
<3729=3812,3730
<3730=3735,3731
<3731=3732
<3732=3734,3733
<3735=3808,3804,3801,3736
<3736=3782,3746,3737
<3737=3738
<3738=3744,3739
<3739=3740
<3740=3741
<3741=3743,3742
<3744=3745
<3746=3778,3774,3771,3747
<3747=3748
<3748=3749
<3749=3769,3750
<3750=3759,3751
<3751=3752
<3752=3754,3753
<3754=3756,3755
<3756=3758,3757
<3759=3760
<3760=3762,3761
<3762=3764,3763
<3764=3766,3765
<3766=3768,3767
<3769=3770
<3771=3773,3772
<3774=3775
<3775=3777,3776
<3778=3779
<3779=3781,3780
<3782=3783
<3783=3799,3784
<3784=3797,3785
<3785=3786
<3786=3790,3787
<3787=3789,3788
<3790=3792,3791
<3792=3794,3793
<3794=3796,3795
<3797=3798
<3799=3800
<3801=3803,3802
<3804=3805
<3805=3807,3806
<3808=3809
<3809=3811,3810
<3812=3813
<3813=3815,3814
<3816=4168,4166,4161,3817
<3817=4140,4134,4111,4062,3824,3818
<3818=3820,3819
<3820=3821
<3821=3823,3822
<3824=4058,4054,4051,3825
<3825=4043,4037,3832,3826
<3826=3828,3827
<3828=3829
<3829=3831,3830
<3832=4031,4027,4024,3833
<3833=3997,3970,3951,3945,3843,3834
<3834=3837,3835
<3835=3836
<3837=3838
<3838=3842,3839
<3839=3841,3840
<3843=3941,3935,3932,3844
<3844=3919,3902,3883,3866,3845
<3845=3847,3846
<3847=3848
<3848=3864,3849
<3849=3860,3856,3854,3852,3850
<3850=3851
<3852=3853
<3854=3855
<3856=3857
<3857=3859,3858
<3860=3861
<3861=3863,3862
<3864=3865
<3866=3868,3867
<3868=3869
<3869=3881,3870
<3870=3879,3873,3871
<3871=3872
<3873=3874
<3874=3876,3875
<3876=3878,3877
<3879=3880
<3881=3882
<3883=3884
<3884=3900,3885
<3885=3888,3886
<3886=3887
<3888=3889
<3889=3897,3890
<3890=3894,3891
<3891=3893,3892
<3894=3896,3895
<3897=3899,3898
<3900=3901
<3902=3904,3903
<3904=3905
<3905=3917,3906
<3906=3915,3909,3907
<3907=3908
<3909=3910
<3910=3912,3911
<3912=3914,3913
<3915=3916
<3917=3918
<3919=3920
<3920=3930,3921
<3921=3924,3922
<3922=3923
<3924=3925
<3925=3927,3926
<3927=3929,3928
<3930=3931
<3932=3934,3933
<3935=3936
<3936=3940,3937
<3937=3939,3938
<3941=3942
<3942=3944,3943
<3945=3946
<3946=3950,3947
<3947=3949,3948
<3951=3952
<3952=3968,3953
<3953=3964,3960,3954
<3954=3955
<3955=3959,3956
<3956=3958,3957
<3960=3961
<3961=3963,3962
<3964=3965
<3965=3967,3966
<3968=3969
<3970=3972,3971
<3972=3973
<3973=3995,3974
<3974=3991,3985,3979,3977,3975
<3975=3976
<3977=3978
<3979=3980
<3980=3982,3981
<3982=3984,3983
<3985=3986
<3986=3990,3987
<3987=3989,3988
<3991=3992
<3992=3994,3993
<3995=3996
<3997=3998
<3998=4022,3999
<3999=4006,4000
<4000=4001
<4001=4003,4002
<4003=4005,4004
<4006=4007
<4007=4019,4008
<4008=4012,4009
<4009=4011,4010
<4012=4018,4013
<4013=4017,4014
<4014=4016,4015
<4019=4021,4020
<4022=4023
<4024=4026,4025
<4027=4028
<4028=4030,4029
<4031=4032
<4032=4036,4033
<4033=4035,4034
<4037=4038
<4038=4042,4039
<4039=4041,4040
<4043=4044
<4044=4050,4045
<4045=4047,4046
<4047=4049,4048
<4051=4053,4052
<4054=4055
<4055=4057,4056
<4058=4059
<4059=4061,4060
<4062=4085,4063
<4063=4064
<4064=4066,4065
<4066=4067
<4067=4083,4068
<4068=4079,4073,4071,4069
<4069=4070
<4071=4072
<4073=4074
<4074=4078,4075
<4075=4077,4076
<4079=4080
<4080=4082,4081
<4083=4084
<4085=4086
<4086=4088,4087
<4088=4109,4089
<4089=4090
<4090=4091
<4091=4097,4092
<4092=4094,4093
<4094=4096,4095
<4097=4107,4098
<4098=4101,4099
<4099=4100
<4101=4102
<4102=4104,4103
<4104=4106,4105
<4107=4108
<4109=4110
<4111=4113,4112
<4113=4114
<4114=4132,4115
<4115=4128,4122,4120,4118,4116
<4116=4117
<4118=4119
<4120=4121
<4122=4123
<4123=4127,4124
<4124=4126,4125
<4128=4129
<4129=4131,4130
<4132=4133
<4134=4136,4135
<4136=4137
<4137=4139,4138
<4140=4157,4153,4150,4141
<4141=4142
<4142=4144,4143
<4144=4145
<4145=4149,4146
<4146=4148,4147
<4150=4152,4151
<4153=4154
<4154=4156,4155
<4157=4158
<4158=4160,4159
<4161=4165,4162
<4162=4164,4163
<4166=4167
<4168=4169
<4169=4173,4170
<4170=4172,4171
<4174=4175
<4175=4185,4176
<4176=4183,4177
<4177=4178
<4178=4180,4179
<4180=4182,4181
<4183=4184
<4185=4186
<4187=4188
<4188=4198,4189
<4189=4196,4190
<4190=4191
<4191=4193,4192
<4193=4195,4194
<4196=4197
<4198=4199
<4200=4201
<4201=4203,4202
<4204=4205
<4205=4207,4206
<4208=4209
<4209=4211,4210
<4212=4216,4213
<4213=4215,4214
<4216=4218,4217
<4219=4220
<4220=4222,4221
<4223=4838,4836,4831,4224
<4224=4825,4819,4225
<4225=4815,4809,4806,4226
<4226=4227
<4227=4791,4228
<4228=4766,4745,4230,4229
<4230=4741,4451,4231
<4231=4232
<4232=4424,4407,4384,4375,4364,4333,4324,4309,4303,4289,4276,4261,4253,4247,4241,4233
<4233=4234
<4234=4236,4235
<4236=4240,4237
<4237=4239,4238
<4241=4242
<4242=4244,4243
<4244=4246,4245
<4247=4248
<4248=4250,4249
<4250=4252,4251
<4253=4254
<4254=4258,4255
<4255=4257,4256
<4258=4260,4259
<4261=4262
<4262=4273,4263
<4263=4271,4264
<4264=4265
<4265=4266
<4266=4268,4267
<4268=4270,4269
<4271=4272
<4273=4275,4274
<4276=4277
<4277=4286,4278
<4278=4284,4279
<4279=4280
<4280=4281
<4281=4283,4282
<4284=4285
<4286=4288,4287
<4289=4299,4290
<4290=4291
<4291=4297,4292
<4292=4293
<4293=4294
<4294=4296,4295
<4297=4298
<4299=4300
<4300=4302,4301
<4303=4304
<4304=4306,4305
<4306=4308,4307
<4309=4320,4316,4311,4310
<4311=4315,4312
<4312=4314,4313
<4316=4317
<4317=4319,4318
<4320=4321
<4321=4323,4322
<4324=4325
<4325=4332,4326
<4326=4330,4327
<4327=4328
<4328=4329
<4330=4331
<4333=4360,4354,4351,4334
<4334=4335
<4335=4349,4336
<4336=4343,4339,4337
<4337=4338
<4339=4340
<4340=4342,4341
<4343=4344
<4344=4346,4345
<4346=4348,4347
<4349=4350
<4351=4353,4352
<4354=4355
<4355=4359,4356
<4356=4358,4357
<4360=4361
<4361=4363,4362
<4364=4365
<4365=4373,4366
<4366=4371,4369,4367
<4367=4368
<4369=4370
<4371=4372
<4373=4374
<4375=4376
<4376=4382,4377
<4377=4380,4378
<4378=4379
<4380=4381
<4382=4383
<4384=4385
<4385=4405,4386
<4386=4393,4387
<4387=4388
<4388=4390,4389
<4390=4392,4391
<4393=4394
<4394=4402,4395
<4395=4399,4396
<4396=4398,4397
<4399=4401,4400
<4402=4404,4403
<4405=4406
<4407=4408
<4408=4422,4409
<4409=4416,4410
<4410=4411
<4411=4413,4412
<4413=4415,4414
<4416=4417
<4417=4419,4418
<4419=4421,4420
<4422=4423
<4424=4425
<4425=4449,4426
<4426=4433,4427
<4427=4428
<4428=4430,4429
<4430=4432,4431
<4433=4434
<4434=4446,4435
<4435=4439,4436
<4436=4438,4437
<4439=4445,4440
<4440=4444,4441
<4441=4443,4442
<4446=4448,4447
<4449=4450
<4451=4559,4532,4505,4488,4479,4466,4460,4452
<4452=4453
<4453=4455,4454
<4455=4459,4456
<4456=4458,4457
<4460=4461
<4461=4463,4462
<4463=4465,4464
<4466=4467
<4467=4476,4468
<4468=4474,4469
<4469=4470
<4470=4471
<4471=4473,4472
<4474=4475
<4476=4478,4477
<4479=4480
<4480=4486,4481
<4481=4482
<4482=4483
<4483=4485,4484
<4486=4487
<4488=4489
<4489=4503,4490
<4490=4497,4491
<4491=4492
<4492=4494,4493
<4494=4496,4495
<4497=4498
<4498=4500,4499
<4500=4502,4501
<4503=4504
<4505=4506
<4506=4530,4507
<4507=4514,4508
<4508=4509
<4509=4511,4510
<4511=4513,4512
<4514=4515
<4515=4527,4516
<4516=4520,4517
<4517=4519,4518
<4520=4526,4521
<4521=4525,4522
<4522=4524,4523
<4527=4529,4528
<4530=4531
<4532=4533
<4533=4557,4534
<4534=4541,4535
<4535=4536
<4536=4538,4537
<4538=4540,4539
<4541=4542
<4542=4554,4543
<4543=4547,4544
<4544=4546,4545
<4547=4553,4548
<4548=4552,4549
<4549=4551,4550
<4554=4556,4555
<4557=4558
<4559=4737,4727,4724,4560
<4560=4707,4684,4661,4652,4637,4631,4617,4604,4589,4581,4575,4569,4561
<4561=4562
<4562=4564,4563
<4564=4568,4565
<4565=4567,4566
<4569=4570
<4570=4572,4571
<4572=4574,4573
<4575=4576
<4576=4578,4577
<4578=4580,4579
<4581=4582
<4582=4586,4583
<4583=4585,4584
<4586=4588,4587
<4589=4590
<4590=4601,4591
<4591=4599,4592
<4592=4593
<4593=4594
<4594=4596,4595
<4596=4598,4597
<4599=4600
<4601=4603,4602
<4604=4605
<4605=4614,4606
<4606=4612,4607
<4607=4608
<4608=4609
<4609=4611,4610
<4612=4613
<4614=4616,4615
<4617=4627,4618
<4618=4619
<4619=4625,4620
<4620=4621
<4621=4622
<4622=4624,4623
<4625=4626
<4627=4628
<4628=4630,4629
<4631=4632
<4632=4634,4633
<4634=4636,4635
<4637=4648,4644,4639,4638
<4639=4643,4640
<4640=4642,4641
<4644=4645
<4645=4647,4646
<4648=4649
<4649=4651,4650
<4652=4653
<4653=4660,4654
<4654=4658,4655
<4655=4656
<4656=4657
<4658=4659
<4661=4662
<4662=4682,4663
<4663=4670,4664
<4664=4665
<4665=4667,4666
<4667=4669,4668
<4670=4671
<4671=4679,4672
<4672=4676,4673
<4673=4675,4674
<4676=4678,4677
<4679=4681,4680
<4682=4683
<4684=4685
<4685=4705,4686
<4686=4693,4687
<4687=4688
<4688=4690,4689
<4690=4692,4691
<4693=4694
<4694=4702,4695
<4695=4699,4696
<4696=4698,4697
<4699=4701,4700
<4702=4704,4703
<4705=4706
<4707=4708
<4708=4722,4709
<4709=4716,4710
<4710=4711
<4711=4713,4712
<4713=4715,4714
<4716=4717
<4717=4719,4718
<4719=4721,4720
<4722=4723
<4724=4726,4725
<4727=4728
<4728=4736,4729
<4729=4735,4730
<4730=4732,4731
<4732=4734,4733
<4737=4738
<4738=4740,4739
<4741=4742
<4742=4744,4743
<4745=4746
<4746=4765,4747
<4747=4753,4748
<4748=4750,4749
<4750=4752,4751
<4753=4763,4754
<4754=4761,4755
<4755=4756
<4756=4758,4757
<4758=4760,4759
<4761=4762
<4763=4764
<4766=4783,4767
<4767=4777,4769,4768
<4769=4770
<4770=4772,4771
<4772=4776,4773
<4773=4775,4774
<4777=4778
<4778=4780,4779
<4780=4782,4781
<4783=4784
<4784=4786,4785
<4786=4788,4787
<4788=4790,4789
<4791=4792
<4792=4804,4793
<4793=4798,4796,4794
<4794=4795
<4796=4797
<4798=4799
<4799=4801,4800
<4801=4803,4802
<4804=4805
<4806=4808,4807
<4809=4810
<4810=4814,4811
<4811=4813,4812
<4815=4816
<4816=4818,4817
<4819=4821,4820
<4821=4822
<4822=4824,4823
<4825=4826
<4826=4830,4827
<4827=4829,4828
<4831=4835,4832
<4832=4834,4833
<4836=4837
<4838=4839
<4839=4843,4840
<4840=4842,4841
<4844=4845
<4845=4847,4846
<4848=4884,4849
<4849=4880,4876,4873,4850
<4850=4851
<4851=4870,4852
<4852=4856,4853
<4853=4855,4854
<4856=4868,4857
<4857=4858
<4858=4859
<4859=4861,4860
<4861=4865,4862
<4862=4864,4863
<4865=4867,4866
<4868=4869
<4870=4872,4871
<4873=4875,4874
<4876=4877
<4877=4879,4878
<4880=4881
<4881=4883,4882
<4884=4885
<4886=4887
<4887=4895,4888
<4888=4893,4891,4889
<4889=4890
<4891=4892
<4893=4894
<4895=4896
<4897=4898
<4898=4900,4899
<4900=4902,4901
<4903=4904
<4904=4906,4905
<4906=4908,4907
<4909=4910
<4910=4912,4911
<4913=4914
<4914=4916,4915
<4917=4930,4927,4924,4921,4918
<4918=4920,4919
<4921=4923,4922
<4924=4926,4925
<4927=4929,4928
<4930=4932,4931
<4933=4937,4934
<4934=4936,4935
<4937=4939,4938
<4940=4941
<4941=4944,4943,4942
<4945=4946
<4946=4949,4948,4947
<4950=4963,4960,4957,4954,4951
<4951=4953,4952
<4954=4956,4955
<4957=4959,4958
<4960=4962,4961
<4963=4965,4964
<5098=5116,5115,5099
<5099=5112,5109,5106,5103,5100
<5100=5102,5101
<5103=5105,5104
<5106=5108,5107
<5109=5111,5110
<5112=5114,5113
<5116=6288,6283,6278,6271,6255,6251,6247,6241,6235,6224,6186,6182,5561,5484,5392,5323,5319,5119,5117
<5117=5118
<5119=5313,5311,5308,5120
<5120=5302,5289,5259,5234,5223,5212,5204,5191,5148,5128,5121
<5121=5122
<5122=5126,5123
<5123=5124
<5124=5125
<5126=5127
<5128=5146,5138,5129
<5129=5130
<5130=5131
<5131=5135,5132
<5132=5134,5133
<5135=5137,5136
<5138=5139
<5139=5143,5140
<5140=5142,5141
<5143=5145,5144
<5146=5147
<5148=5187,5177,5174,5149
<5149=5150
<5150=5172,5151
<5151=5162,5156,5152
<5152=5153
<5153=5155,5154
<5156=5157
<5157=5159,5158
<5159=5161,5160
<5162=5163
<5163=5165,5164
<5165=5167,5166
<5167=5169,5168
<5169=5171,5170
<5172=5173
<5174=5176,5175
<5177=5178
<5178=5186,5179
<5179=5181,5180
<5181=5183,5182
<5183=5185,5184
<5187=5188
<5188=5190,5189
<5191=5192
<5192=5202,5193
<5193=5200,5196,5194
<5194=5195
<5196=5197
<5197=5199,5198
<5200=5201
<5202=5203
<5204=5205
<5205=5207,5206
<5207=5209,5208
<5209=5211,5210
<5212=5213
<5213=5221,5214
<5214=5215
<5215=5216
<5216=5218,5217
<5218=5220,5219
<5221=5222
<5223=5230,5224
<5224=5226,5225
<5226=5227
<5227=5229,5228
<5230=5231
<5231=5233,5232
<5234=5235
<5235=5258,5236
<5236=5256,5237
<5237=5252,5246,5240,5238
<5238=5239
<5240=5241
<5241=5243,5242
<5243=5245,5244
<5246=5247
<5247=5249,5248
<5249=5251,5250
<5252=5253
<5253=5255,5254
<5256=5257
<5259=5266,5260
<5260=5262,5261
<5262=5263
<5263=5265,5264
<5266=5267
<5267=5288,5268
<5268=5286,5269
<5269=5280,5272,5270
<5270=5271
<5272=5273
<5273=5279,5274
<5274=5276,5275
<5276=5278,5277
<5280=5281
<5281=5285,5282
<5282=5284,5283
<5286=5287
<5289=5296,5290
<5290=5292,5291
<5292=5293
<5293=5295,5294
<5296=5297
<5297=5301,5298
<5298=5300,5299
<5302=5303
<5303=5307,5304
<5304=5306,5305
<5308=5310,5309
<5311=5312
<5313=5314
<5314=5318,5315
<5315=5317,5316
<5319=5320
<5320=5322,5321
<5323=5388,5384,5381,5324
<5324=5368,5325
<5325=5364,5354,5351,5326
<5326=5327
<5327=5349,5328
<5328=5339,5333,5329
<5329=5330
<5330=5332,5331
<5333=5334
<5334=5336,5335
<5336=5338,5337
<5339=5340
<5340=5342,5341
<5342=5344,5343
<5344=5346,5345
<5346=5348,5347
<5349=5350
<5351=5353,5352
<5354=5355
<5355=5363,5356
<5356=5358,5357
<5358=5360,5359
<5360=5362,5361
<5364=5365
<5365=5367,5366
<5368=5369
<5369=5379,5370
<5370=5377,5373,5371
<5371=5372
<5373=5374
<5374=5376,5375
<5377=5378
<5379=5380
<5381=5383,5382
<5384=5385
<5385=5387,5386
<5388=5389
<5389=5391,5390
<5392=5475,5393
<5393=5398,5394
<5394=5395
<5395=5397,5396
<5398=5471,5467,5464,5399
<5399=5445,5409,5400
<5400=5401
<5401=5407,5402
<5402=5403
<5403=5404
<5404=5406,5405
<5407=5408
<5409=5441,5437,5434,5410
<5410=5411
<5411=5412
<5412=5432,5413
<5413=5422,5414
<5414=5415
<5415=5417,5416
<5417=5419,5418
<5419=5421,5420
<5422=5423
<5423=5425,5424
<5425=5427,5426
<5427=5429,5428
<5429=5431,5430
<5432=5433
<5434=5436,5435
<5437=5438
<5438=5440,5439
<5441=5442
<5442=5444,5443
<5445=5446
<5446=5462,5447
<5447=5460,5448
<5448=5449
<5449=5453,5450
<5450=5452,5451
<5453=5455,5454
<5455=5457,5456
<5457=5459,5458
<5460=5461
<5462=5463
<5464=5466,5465
<5467=5468
<5468=5470,5469
<5471=5472
<5472=5474,5473
<5475=5476
<5476=5483,5477
<5477=5481,5478
<5478=5479
<5479=5480
<5481=5482
<5484=5557,5553,5550,5485
<5485=5531,5495,5486
<5486=5487
<5487=5493,5488
<5488=5489
<5489=5490
<5490=5492,5491
<5493=5494
<5495=5527,5523,5520,5496
<5496=5497
<5497=5498
<5498=5518,5499
<5499=5508,5500
<5500=5501
<5501=5503,5502
<5503=5505,5504
<5505=5507,5506
<5508=5509
<5509=5511,5510
<5511=5513,5512
<5513=5515,5514
<5515=5517,5516
<5518=5519
<5520=5522,5521
<5523=5524
<5524=5526,5525
<5527=5528
<5528=5530,5529
<5531=5532
<5532=5548,5533
<5533=5546,5534
<5534=5535
<5535=5539,5536
<5536=5538,5537
<5539=5541,5540
<5541=5543,5542
<5543=5545,5544
<5546=5547
<5548=5549
<5550=5552,5551
<5553=5554
<5554=5556,5555
<5557=5558
<5558=5560,5559
<5561=6176,6174,6169,5562
<5562=6163,6157,5563
<5563=6153,6147,6144,5564
<5564=5565
<5565=6129,5566
<5566=6104,6083,5568,5567
<5568=6079,5789,5569
<5569=5570
<5570=5762,5745,5722,5713,5702,5671,5662,5647,5641,5627,5614,5599,5591,5585,5579,5571
<5571=5572
<5572=5574,5573
<5574=5578,5575
<5575=5577,5576
<5579=5580
<5580=5582,5581
<5582=5584,5583
<5585=5586
<5586=5588,5587
<5588=5590,5589
<5591=5592
<5592=5596,5593
<5593=5595,5594
<5596=5598,5597
<5599=5600
<5600=5611,5601
<5601=5609,5602
<5602=5603
<5603=5604
<5604=5606,5605
<5606=5608,5607
<5609=5610
<5611=5613,5612
<5614=5615
<5615=5624,5616
<5616=5622,5617
<5617=5618
<5618=5619
<5619=5621,5620
<5622=5623
<5624=5626,5625
<5627=5637,5628
<5628=5629
<5629=5635,5630
<5630=5631
<5631=5632
<5632=5634,5633
<5635=5636
<5637=5638
<5638=5640,5639
<5641=5642
<5642=5644,5643
<5644=5646,5645
<5647=5658,5654,5649,5648
<5649=5653,5650
<5650=5652,5651
<5654=5655
<5655=5657,5656
<5658=5659
<5659=5661,5660
<5662=5663
<5663=5670,5664
<5664=5668,5665
<5665=5666
<5666=5667
<5668=5669
<5671=5698,5692,5689,5672
<5672=5673
<5673=5687,5674
<5674=5681,5677,5675
<5675=5676
<5677=5678
<5678=5680,5679
<5681=5682
<5682=5684,5683
<5684=5686,5685
<5687=5688
<5689=5691,5690
<5692=5693
<5693=5697,5694
<5694=5696,5695
<5698=5699
<5699=5701,5700
<5702=5703
<5703=5711,5704
<5704=5709,5707,5705
<5705=5706
<5707=5708
<5709=5710
<5711=5712
<5713=5714
<5714=5720,5715
<5715=5718,5716
<5716=5717
<5718=5719
<5720=5721
<5722=5723
<5723=5743,5724
<5724=5731,5725
<5725=5726
<5726=5728,5727
<5728=5730,5729
<5731=5732
<5732=5740,5733
<5733=5737,5734
<5734=5736,5735
<5737=5739,5738
<5740=5742,5741
<5743=5744
<5745=5746
<5746=5760,5747
<5747=5754,5748
<5748=5749
<5749=5751,5750
<5751=5753,5752
<5754=5755
<5755=5757,5756
<5757=5759,5758
<5760=5761
<5762=5763
<5763=5787,5764
<5764=5771,5765
<5765=5766
<5766=5768,5767
<5768=5770,5769
<5771=5772
<5772=5784,5773
<5773=5777,5774
<5774=5776,5775
<5777=5783,5778
<5778=5782,5779
<5779=5781,5780
<5784=5786,5785
<5787=5788
<5789=5897,5870,5843,5826,5817,5804,5798,5790
<5790=5791
<5791=5793,5792
<5793=5797,5794
<5794=5796,5795
<5798=5799
<5799=5801,5800
<5801=5803,5802
<5804=5805
<5805=5814,5806
<5806=5812,5807
<5807=5808
<5808=5809
<5809=5811,5810
<5812=5813
<5814=5816,5815
<5817=5818
<5818=5824,5819
<5819=5820
<5820=5821
<5821=5823,5822
<5824=5825
<5826=5827
<5827=5841,5828
<5828=5835,5829
<5829=5830
<5830=5832,5831
<5832=5834,5833
<5835=5836
<5836=5838,5837
<5838=5840,5839
<5841=5842
<5843=5844
<5844=5868,5845
<5845=5852,5846
<5846=5847
<5847=5849,5848
<5849=5851,5850
<5852=5853
<5853=5865,5854
<5854=5858,5855
<5855=5857,5856
<5858=5864,5859
<5859=5863,5860
<5860=5862,5861
<5865=5867,5866
<5868=5869
<5870=5871
<5871=5895,5872
<5872=5879,5873
<5873=5874
<5874=5876,5875
<5876=5878,5877
<5879=5880
<5880=5892,5881
<5881=5885,5882
<5882=5884,5883
<5885=5891,5886
<5886=5890,5887
<5887=5889,5888
<5892=5894,5893
<5895=5896
<5897=6075,6065,6062,5898
<5898=6045,6022,5999,5990,5975,5969,5955,5942,5927,5919,5913,5907,5899
<5899=5900
<5900=5902,5901
<5902=5906,5903
<5903=5905,5904
<5907=5908
<5908=5910,5909
<5910=5912,5911
<5913=5914
<5914=5916,5915
<5916=5918,5917
<5919=5920
<5920=5924,5921
<5921=5923,5922
<5924=5926,5925
<5927=5928
<5928=5939,5929
<5929=5937,5930
<5930=5931
<5931=5932
<5932=5934,5933
<5934=5936,5935
<5937=5938
<5939=5941,5940
<5942=5943
<5943=5952,5944
<5944=5950,5945
<5945=5946
<5946=5947
<5947=5949,5948
<5950=5951
<5952=5954,5953
<5955=5965,5956
<5956=5957
<5957=5963,5958
<5958=5959
<5959=5960
<5960=5962,5961
<5963=5964
<5965=5966
<5966=5968,5967
<5969=5970
<5970=5972,5971
<5972=5974,5973
<5975=5986,5982,5977,5976
<5977=5981,5978
<5978=5980,5979
<5982=5983
<5983=5985,5984
<5986=5987
<5987=5989,5988
<5990=5991
<5991=5998,5992
<5992=5996,5993
<5993=5994
<5994=5995
<5996=5997
<5999=6000
<6000=6020,6001
<6001=6008,6002
<6002=6003
<6003=6005,6004
<6005=6007,6006
<6008=6009
<6009=6017,6010
<6010=6014,6011
<6011=6013,6012
<6014=6016,6015
<6017=6019,6018
<6020=6021
<6022=6023
<6023=6043,6024
<6024=6031,6025
<6025=6026
<6026=6028,6027
<6028=6030,6029
<6031=6032
<6032=6040,6033
<6033=6037,6034
<6034=6036,6035
<6037=6039,6038
<6040=6042,6041
<6043=6044
<6045=6046
<6046=6060,6047
<6047=6054,6048
<6048=6049
<6049=6051,6050
<6051=6053,6052
<6054=6055
<6055=6057,6056
<6057=6059,6058
<6060=6061
<6062=6064,6063
<6065=6066
<6066=6074,6067
<6067=6073,6068
<6068=6070,6069
<6070=6072,6071
<6075=6076
<6076=6078,6077
<6079=6080
<6080=6082,6081
<6083=6084
<6084=6103,6085
<6085=6091,6086
<6086=6088,6087
<6088=6090,6089
<6091=6101,6092
<6092=6099,6093
<6093=6094
<6094=6096,6095
<6096=6098,6097
<6099=6100
<6101=6102
<6104=6121,6105
<6105=6115,6107,6106
<6107=6108
<6108=6110,6109
<6110=6114,6111
<6111=6113,6112
<6115=6116
<6116=6118,6117
<6118=6120,6119
<6121=6122
<6122=6124,6123
<6124=6126,6125
<6126=6128,6127
<6129=6130
<6130=6142,6131
<6131=6136,6134,6132
<6132=6133
<6134=6135
<6136=6137
<6137=6139,6138
<6139=6141,6140
<6142=6143
<6144=6146,6145
<6147=6148
<6148=6152,6149
<6149=6151,6150
<6153=6154
<6154=6156,6155
<6157=6159,6158
<6159=6160
<6160=6162,6161
<6163=6164
<6164=6168,6165
<6165=6167,6166
<6169=6173,6170
<6170=6172,6171
<6174=6175
<6176=6177
<6177=6181,6178
<6178=6180,6179
<6182=6183
<6183=6185,6184
<6186=6222,6187
<6187=6218,6214,6211,6188
<6188=6189
<6189=6208,6190
<6190=6194,6191
<6191=6193,6192
<6194=6206,6195
<6195=6196
<6196=6197
<6197=6199,6198
<6199=6203,6200
<6200=6202,6201
<6203=6205,6204
<6206=6207
<6208=6210,6209
<6211=6213,6212
<6214=6215
<6215=6217,6216
<6218=6219
<6219=6221,6220
<6222=6223
<6224=6225
<6225=6233,6226
<6226=6231,6229,6227
<6227=6228
<6229=6230
<6231=6232
<6233=6234
<6235=6236
<6236=6238,6237
<6238=6240,6239
<6241=6242
<6242=6244,6243
<6244=6246,6245
<6247=6248
<6248=6250,6249
<6251=6252
<6252=6254,6253
<6255=6268,6265,6262,6259,6256
<6256=6258,6257
<6259=6261,6260
<6262=6264,6263
<6265=6267,6266
<6268=6270,6269
<6271=6275,6272
<6272=6274,6273
<6275=6277,6276
<6278=6279
<6279=6282,6281,6280
<6283=6284
<6284=6287,6286,6285
<6288=6301,6298,6295,6292,6289
<6289=6291,6290
<6292=6294,6293
<6295=6297,6296
<6298=6300,6299
<6301=6303,6302
<6418=6436,6435,6419
<6419=6432,6429,6426,6423,6420
<6420=6422,6421
<6423=6425,6424
<6426=6428,6427
<6429=6431,6430
<6432=6434,6433
<6436=8236,8231,8226,8219,8212,8208,8189,8173,8169,8163,8157,8148,8137,8099,8090,8076,8006,8002,6439,6437
<6437=6438
<6439=7998,6440
<6440=7994,7373,7369,7360,7356,6931,6834,6714,6645,6641,6441
<6441=6635,6633,6630,6442
<6442=6624,6611,6581,6556,6545,6534,6526,6513,6470,6450,6443
<6443=6444
<6444=6448,6445
<6445=6446
<6446=6447
<6448=6449
<6450=6468,6460,6451
<6451=6452
<6452=6453
<6453=6457,6454
<6454=6456,6455
<6457=6459,6458
<6460=6461
<6461=6465,6462
<6462=6464,6463
<6465=6467,6466
<6468=6469
<6470=6509,6499,6496,6471
<6471=6472
<6472=6494,6473
<6473=6484,6478,6474
<6474=6475
<6475=6477,6476
<6478=6479
<6479=6481,6480
<6481=6483,6482
<6484=6485
<6485=6487,6486
<6487=6489,6488
<6489=6491,6490
<6491=6493,6492
<6494=6495
<6496=6498,6497
<6499=6500
<6500=6508,6501
<6501=6503,6502
<6503=6505,6504
<6505=6507,6506
<6509=6510
<6510=6512,6511
<6513=6514
<6514=6524,6515
<6515=6522,6518,6516
<6516=6517
<6518=6519
<6519=6521,6520
<6522=6523
<6524=6525
<6526=6527
<6527=6529,6528
<6529=6531,6530
<6531=6533,6532
<6534=6535
<6535=6543,6536
<6536=6537
<6537=6538
<6538=6540,6539
<6540=6542,6541
<6543=6544
<6545=6552,6546
<6546=6548,6547
<6548=6549
<6549=6551,6550
<6552=6553
<6553=6555,6554
<6556=6557
<6557=6580,6558
<6558=6578,6559
<6559=6574,6568,6562,6560
<6560=6561
<6562=6563
<6563=6565,6564
<6565=6567,6566
<6568=6569
<6569=6571,6570
<6571=6573,6572
<6574=6575
<6575=6577,6576
<6578=6579
<6581=6588,6582
<6582=6584,6583
<6584=6585
<6585=6587,6586
<6588=6589
<6589=6610,6590
<6590=6608,6591
<6591=6602,6594,6592
<6592=6593
<6594=6595
<6595=6601,6596
<6596=6598,6597
<6598=6600,6599
<6602=6603
<6603=6607,6604
<6604=6606,6605
<6608=6609
<6611=6618,6612
<6612=6614,6613
<6614=6615
<6615=6617,6616
<6618=6619
<6619=6623,6620
<6620=6622,6621
<6624=6625
<6625=6629,6626
<6626=6628,6627
<6630=6632,6631
<6633=6634
<6635=6636
<6636=6640,6637
<6637=6639,6638
<6641=6642
<6642=6644,6643
<6645=6710,6706,6703,6646
<6646=6690,6647
<6647=6686,6676,6673,6648
<6648=6649
<6649=6671,6650
<6650=6661,6655,6651
<6651=6652
<6652=6654,6653
<6655=6656
<6656=6658,6657
<6658=6660,6659
<6661=6662
<6662=6664,6663
<6664=6666,6665
<6666=6668,6667
<6668=6670,6669
<6671=6672
<6673=6675,6674
<6676=6677
<6677=6685,6678
<6678=6680,6679
<6680=6682,6681
<6682=6684,6683
<6686=6687
<6687=6689,6688
<6690=6691
<6691=6701,6692
<6692=6699,6695,6693
<6693=6694
<6695=6696
<6696=6698,6697
<6699=6700
<6701=6702
<6703=6705,6704
<6706=6707
<6707=6709,6708
<6710=6711
<6711=6713,6712
<6714=6821,6726,6715
<6715=6716
<6716=6717
<6717=6718
<6718=6724,6719
<6719=6722,6720
<6720=6721
<6722=6723
<6724=6725
<6726=6744,6740,6731,6727
<6727=6728
<6728=6730,6729
<6731=6732
<6732=6738,6733
<6733=6736,6734
<6734=6735
<6736=6737
<6738=6739
<6740=6741
<6741=6743,6742
<6744=6817,6813,6810,6745
<6745=6791,6755,6746
<6746=6747
<6747=6753,6748
<6748=6749
<6749=6750
<6750=6752,6751
<6753=6754
<6755=6787,6783,6780,6756
<6756=6757
<6757=6758
<6758=6778,6759
<6759=6768,6760
<6760=6761
<6761=6763,6762
<6763=6765,6764
<6765=6767,6766
<6768=6769
<6769=6771,6770
<6771=6773,6772
<6773=6775,6774
<6775=6777,6776
<6778=6779
<6780=6782,6781
<6783=6784
<6784=6786,6785
<6787=6788
<6788=6790,6789
<6791=6792
<6792=6808,6793
<6793=6806,6794
<6794=6795
<6795=6799,6796
<6796=6798,6797
<6799=6801,6800
<6801=6803,6802
<6803=6805,6804
<6806=6807
<6808=6809
<6810=6812,6811
<6813=6814
<6814=6816,6815
<6817=6818
<6818=6820,6819
<6821=6822
<6822=6831,6823
<6823=6830,6824
<6824=6828,6825
<6825=6826
<6826=6827
<6828=6829
<6831=6833,6832
<6834=6927,6923,6920,6835
<6835=6901,6865,6856,6836
<6836=6841,6837
<6837=6838
<6838=6840,6839
<6841=6842
<6842=6844,6843
<6844=6854,6845
<6845=6846
<6846=6847
<6847=6849,6848
<6849=6851,6850
<6851=6853,6852
<6854=6855
<6856=6857
<6857=6863,6858
<6858=6859
<6859=6860
<6860=6862,6861
<6863=6864
<6865=6897,6893,6890,6866
<6866=6867
<6867=6868
<6868=6888,6869
<6869=6878,6870
<6870=6871
<6871=6873,6872
<6873=6875,6874
<6875=6877,6876
<6878=6879
<6879=6881,6880
<6881=6883,6882
<6883=6885,6884
<6885=6887,6886
<6888=6889
<6890=6892,6891
<6893=6894
<6894=6896,6895
<6897=6898
<6898=6900,6899
<6901=6902
<6902=6918,6903
<6903=6916,6904
<6904=6905
<6905=6909,6906
<6906=6908,6907
<6909=6911,6910
<6911=6913,6912
<6913=6915,6914
<6916=6917
<6918=6919
<6920=6922,6921
<6923=6924
<6924=6926,6925
<6927=6928
<6928=6930,6929
<6931=7350,7348,7343,6932
<6932=7320,7314,7293,7080,7063,7046,7036,7022,7009,7001,6937,6933
<6933=6934
<6934=6936,6935
<6937=6997,6938
<6938=6979,6961,6943,6939
<6939=6940
<6940=6942,6941
<6943=6944
<6944=6958,6945
<6945=6955,6946
<6946=6948,6947
<6948=6952,6949
<6949=6951,6950
<6952=6954,6953
<6955=6957,6956
<6958=6960,6959
<6961=6962
<6962=6976,6963
<6963=6973,6964
<6964=6966,6965
<6966=6970,6967
<6967=6969,6968
<6970=6972,6971
<6973=6975,6974
<6976=6978,6977
<6979=6980
<6980=6994,6981
<6981=6991,6982
<6982=6984,6983
<6984=6988,6985
<6985=6987,6986
<6988=6990,6989
<6991=6993,6992
<6994=6996,6995
<6997=6998
<6998=7000,6999
<7001=7002
<7002=7008,7003
<7003=7007,7004
<7004=7006,7005
<7009=7011,7010
<7011=7012
<7012=7014,7013
<7014=7020,7015
<7015=7016
<7016=7017
<7017=7019,7018
<7020=7021
<7022=7024,7023
<7024=7025
<7025=7031,7026
<7026=7030,7027
<7027=7029,7028
<7031=7035,7032
<7032=7034,7033
<7036=7038,7037
<7038=7039
<7039=7043,7040
<7040=7042,7041
<7043=7045,7044
<7046=7047
<7047=7062,7048
<7048=7052,7049
<7049=7051,7050
<7052=7060,7053
<7053=7058,7054
<7054=7055
<7055=7057,7056
<7058=7059
<7060=7061
<7063=7064
<7064=7079,7065
<7065=7069,7066
<7066=7068,7067
<7069=7077,7070
<7070=7075,7071
<7071=7072
<7072=7074,7073
<7075=7076
<7077=7078
<7080=7289,7265,7081
<7081=7082
<7082=7259,7251,7228,7205,7199,7191,7168,7083
<7083=7139,7084
<7084=7116,7085
<7085=7087,7086
<7087=7088
<7088=7115,7089
<7089=7113,7090
<7090=7107,7101,7095,7091
<7091=7092
<7092=7094,7093
<7095=7096
<7096=7098,7097
<7098=7100,7099
<7101=7102
<7102=7104,7103
<7104=7106,7105
<7107=7108
<7108=7110,7109
<7110=7112,7111
<7113=7114
<7116=7117
<7117=7137,7118
<7118=7125,7119
<7119=7120
<7120=7122,7121
<7122=7124,7123
<7125=7126
<7126=7134,7127
<7127=7131,7128
<7128=7130,7129
<7131=7133,7132
<7134=7136,7135
<7137=7138
<7139=7140
<7140=7167,7141
<7141=7165,7142
<7142=7159,7153,7147,7143
<7143=7144
<7144=7146,7145
<7147=7148
<7148=7150,7149
<7150=7152,7151
<7153=7154
<7154=7156,7155
<7156=7158,7157
<7159=7160
<7160=7162,7161
<7162=7164,7163
<7165=7166
<7168=7169
<7169=7189,7170
<7170=7177,7171
<7171=7172
<7172=7174,7173
<7174=7176,7175
<7177=7178
<7178=7186,7179
<7179=7183,7180
<7180=7182,7181
<7183=7185,7184
<7186=7188,7187
<7189=7190
<7191=7192
<7192=7198,7193
<7193=7195,7194
<7195=7197,7196
<7199=7200
<7200=7204,7201
<7201=7203,7202
<7205=7206
<7206=7226,7207
<7207=7214,7208
<7208=7209
<7209=7211,7210
<7211=7213,7212
<7214=7215
<7215=7223,7216
<7216=7220,7217
<7217=7219,7218
<7220=7222,7221
<7223=7225,7224
<7226=7227
<7228=7229
<7229=7249,7230
<7230=7237,7231
<7231=7232
<7232=7234,7233
<7234=7236,7235
<7237=7238
<7238=7246,7239
<7239=7243,7240
<7240=7242,7241
<7243=7245,7244
<7246=7248,7247
<7249=7250
<7251=7252
<7252=7258,7253
<7253=7255,7254
<7255=7257,7256
<7259=7260
<7260=7264,7261
<7261=7263,7262
<7265=7266
<7266=7267
<7267=7287,7268
<7268=7283,7273,7269
<7269=7270
<7270=7272,7271
<7273=7274
<7274=7282,7275
<7275=7277,7276
<7277=7279,7278
<7279=7281,7280
<7283=7284
<7284=7286,7285
<7287=7288
<7289=7290
<7290=7292,7291
<7293=7310,7306,7303,7294
<7294=7295
<7295=7297,7296
<7297=7298
<7298=7302,7299
<7299=7301,7300
<7303=7305,7304
<7306=7307
<7307=7309,7308
<7310=7311
<7311=7313,7312
<7314=7316,7315
<7316=7317
<7317=7319,7318
<7320=7339,7335,7332,7321
<7321=7322
<7322=7324,7323
<7324=7325
<7325=7327,7326
<7327=7329,7328
<7329=7331,7330
<7332=7334,7333
<7335=7336
<7336=7338,7337
<7339=7340
<7340=7342,7341
<7343=7347,7344
<7344=7346,7345
<7348=7349
<7350=7351
<7351=7355,7352
<7352=7354,7353
<7356=7357
<7357=7359,7358
<7360=7361
<7361=7367,7362
<7362=7365,7363
<7363=7364
<7365=7366
<7367=7368
<7369=7370
<7370=7372,7371
<7373=7988,7986,7981,7374
<7374=7975,7969,7375
<7375=7965,7959,7956,7376
<7376=7377
<7377=7941,7378
<7378=7916,7895,7380,7379
<7380=7891,7601,7381
<7381=7382
<7382=7574,7557,7534,7525,7514,7483,7474,7459,7453,7439,7426,7411,7403,7397,7391,7383
<7383=7384
<7384=7386,7385
<7386=7390,7387
<7387=7389,7388
<7391=7392
<7392=7394,7393
<7394=7396,7395
<7397=7398
<7398=7400,7399
<7400=7402,7401
<7403=7404
<7404=7408,7405
<7405=7407,7406
<7408=7410,7409
<7411=7412
<7412=7423,7413
<7413=7421,7414
<7414=7415
<7415=7416
<7416=7418,7417
<7418=7420,7419
<7421=7422
<7423=7425,7424
<7426=7427
<7427=7436,7428
<7428=7434,7429
<7429=7430
<7430=7431
<7431=7433,7432
<7434=7435
<7436=7438,7437
<7439=7449,7440
<7440=7441
<7441=7447,7442
<7442=7443
<7443=7444
<7444=7446,7445
<7447=7448
<7449=7450
<7450=7452,7451
<7453=7454
<7454=7456,7455
<7456=7458,7457
<7459=7470,7466,7461,7460
<7461=7465,7462
<7462=7464,7463
<7466=7467
<7467=7469,7468
<7470=7471
<7471=7473,7472
<7474=7475
<7475=7482,7476
<7476=7480,7477
<7477=7478
<7478=7479
<7480=7481
<7483=7510,7504,7501,7484
<7484=7485
<7485=7499,7486
<7486=7493,7489,7487
<7487=7488
<7489=7490
<7490=7492,7491
<7493=7494
<7494=7496,7495
<7496=7498,7497
<7499=7500
<7501=7503,7502
<7504=7505
<7505=7509,7506
<7506=7508,7507
<7510=7511
<7511=7513,7512
<7514=7515
<7515=7523,7516
<7516=7521,7519,7517
<7517=7518
<7519=7520
<7521=7522
<7523=7524
<7525=7526
<7526=7532,7527
<7527=7530,7528
<7528=7529
<7530=7531
<7532=7533
<7534=7535
<7535=7555,7536
<7536=7543,7537
<7537=7538
<7538=7540,7539
<7540=7542,7541
<7543=7544
<7544=7552,7545
<7545=7549,7546
<7546=7548,7547
<7549=7551,7550
<7552=7554,7553
<7555=7556
<7557=7558
<7558=7572,7559
<7559=7566,7560
<7560=7561
<7561=7563,7562
<7563=7565,7564
<7566=7567
<7567=7569,7568
<7569=7571,7570
<7572=7573
<7574=7575
<7575=7599,7576
<7576=7583,7577
<7577=7578
<7578=7580,7579
<7580=7582,7581
<7583=7584
<7584=7596,7585
<7585=7589,7586
<7586=7588,7587
<7589=7595,7590
<7590=7594,7591
<7591=7593,7592
<7596=7598,7597
<7599=7600
<7601=7709,7682,7655,7638,7629,7616,7610,7602
<7602=7603
<7603=7605,7604
<7605=7609,7606
<7606=7608,7607
<7610=7611
<7611=7613,7612
<7613=7615,7614
<7616=7617
<7617=7626,7618
<7618=7624,7619
<7619=7620
<7620=7621
<7621=7623,7622
<7624=7625
<7626=7628,7627
<7629=7630
<7630=7636,7631
<7631=7632
<7632=7633
<7633=7635,7634
<7636=7637
<7638=7639
<7639=7653,7640
<7640=7647,7641
<7641=7642
<7642=7644,7643
<7644=7646,7645
<7647=7648
<7648=7650,7649
<7650=7652,7651
<7653=7654
<7655=7656
<7656=7680,7657
<7657=7664,7658
<7658=7659
<7659=7661,7660
<7661=7663,7662
<7664=7665
<7665=7677,7666
<7666=7670,7667
<7667=7669,7668
<7670=7676,7671
<7671=7675,7672
<7672=7674,7673
<7677=7679,7678
<7680=7681
<7682=7683
<7683=7707,7684
<7684=7691,7685
<7685=7686
<7686=7688,7687
<7688=7690,7689
<7691=7692
<7692=7704,7693
<7693=7697,7694
<7694=7696,7695
<7697=7703,7698
<7698=7702,7699
<7699=7701,7700
<7704=7706,7705
<7707=7708
<7709=7887,7877,7874,7710
<7710=7857,7834,7811,7802,7787,7781,7767,7754,7739,7731,7725,7719,7711
<7711=7712
<7712=7714,7713
<7714=7718,7715
<7715=7717,7716
<7719=7720
<7720=7722,7721
<7722=7724,7723
<7725=7726
<7726=7728,7727
<7728=7730,7729
<7731=7732
<7732=7736,7733
<7733=7735,7734
<7736=7738,7737
<7739=7740
<7740=7751,7741
<7741=7749,7742
<7742=7743
<7743=7744
<7744=7746,7745
<7746=7748,7747
<7749=7750
<7751=7753,7752
<7754=7755
<7755=7764,7756
<7756=7762,7757
<7757=7758
<7758=7759
<7759=7761,7760
<7762=7763
<7764=7766,7765
<7767=7777,7768
<7768=7769
<7769=7775,7770
<7770=7771
<7771=7772
<7772=7774,7773
<7775=7776
<7777=7778
<7778=7780,7779
<7781=7782
<7782=7784,7783
<7784=7786,7785
<7787=7798,7794,7789,7788
<7789=7793,7790
<7790=7792,7791
<7794=7795
<7795=7797,7796
<7798=7799
<7799=7801,7800
<7802=7803
<7803=7810,7804
<7804=7808,7805
<7805=7806
<7806=7807
<7808=7809
<7811=7812
<7812=7832,7813
<7813=7820,7814
<7814=7815
<7815=7817,7816
<7817=7819,7818
<7820=7821
<7821=7829,7822
<7822=7826,7823
<7823=7825,7824
<7826=7828,7827
<7829=7831,7830
<7832=7833
<7834=7835
<7835=7855,7836
<7836=7843,7837
<7837=7838
<7838=7840,7839
<7840=7842,7841
<7843=7844
<7844=7852,7845
<7845=7849,7846
<7846=7848,7847
<7849=7851,7850
<7852=7854,7853
<7855=7856
<7857=7858
<7858=7872,7859
<7859=7866,7860
<7860=7861
<7861=7863,7862
<7863=7865,7864
<7866=7867
<7867=7869,7868
<7869=7871,7870
<7872=7873
<7874=7876,7875
<7877=7878
<7878=7886,7879
<7879=7885,7880
<7880=7882,7881
<7882=7884,7883
<7887=7888
<7888=7890,7889
<7891=7892
<7892=7894,7893
<7895=7896
<7896=7915,7897
<7897=7903,7898
<7898=7900,7899
<7900=7902,7901
<7903=7913,7904
<7904=7911,7905
<7905=7906
<7906=7908,7907
<7908=7910,7909
<7911=7912
<7913=7914
<7916=7933,7917
<7917=7927,7919,7918
<7919=7920
<7920=7922,7921
<7922=7926,7923
<7923=7925,7924
<7927=7928
<7928=7930,7929
<7930=7932,7931
<7933=7934
<7934=7936,7935
<7936=7938,7937
<7938=7940,7939
<7941=7942
<7942=7954,7943
<7943=7948,7946,7944
<7944=7945
<7946=7947
<7948=7949
<7949=7951,7950
<7951=7953,7952
<7954=7955
<7956=7958,7957
<7959=7960
<7960=7964,7961
<7961=7963,7962
<7965=7966
<7966=7968,7967
<7969=7971,7970
<7971=7972
<7972=7974,7973
<7975=7976
<7976=7980,7977
<7977=7979,7978
<7981=7985,7982
<7982=7984,7983
<7986=7987
<7988=7989
<7989=7993,7990
<7990=7992,7991
<7994=7995
<7995=7997,7996
<7998=7999
<7999=8001,8000
<8002=8003
<8003=8005,8004
<8006=8070,8068,8063,8007
<8007=8057,8051,8008
<8008=8047,8041,8038,8009
<8009=8010
<8010=8023,8011
<8011=8014,8012
<8012=8013
<8014=8015
<8015=8021,8016
<8016=8019,8017
<8017=8018
<8019=8020
<8021=8022
<8023=8024
<8024=8036,8025
<8025=8030,8028,8026
<8026=8027
<8028=8029
<8030=8031
<8031=8033,8032
<8033=8035,8034
<8036=8037
<8038=8040,8039
<8041=8042
<8042=8046,8043
<8043=8045,8044
<8047=8048
<8048=8050,8049
<8051=8053,8052
<8053=8054
<8054=8056,8055
<8057=8058
<8058=8062,8059
<8059=8061,8060
<8063=8067,8064
<8064=8066,8065
<8068=8069
<8070=8071
<8071=8075,8072
<8072=8074,8073
<8076=8079,8077
<8077=8078
<8079=8080
<8080=8088,8081
<8081=8086,8084,8082
<8082=8083
<8084=8085
<8086=8087
<8088=8089
<8090=8091
<8091=8097,8092
<8092=8095,8093
<8093=8094
<8095=8096
<8097=8098
<8099=8135,8100
<8100=8131,8127,8124,8101
<8101=8102
<8102=8121,8103
<8103=8107,8104
<8104=8106,8105
<8107=8119,8108
<8108=8109
<8109=8110
<8110=8112,8111
<8112=8116,8113
<8113=8115,8114
<8116=8118,8117
<8119=8120
<8121=8123,8122
<8124=8126,8125
<8127=8128
<8128=8130,8129
<8131=8132
<8132=8134,8133
<8135=8136
<8137=8138
<8138=8146,8139
<8139=8144,8142,8140
<8140=8141
<8142=8143
<8144=8145
<8146=8147
<8148=8149
<8149=8155,8150
<8150=8153,8151
<8151=8152
<8153=8154
<8155=8156
<8157=8158
<8158=8160,8159
<8160=8162,8161
<8163=8164
<8164=8166,8165
<8166=8168,8167
<8169=8170
<8170=8172,8171
<8173=8186,8183,8180,8177,8174
<8174=8176,8175
<8177=8179,8178
<8180=8182,8181
<8183=8185,8184
<8186=8188,8187
<8189=8205,8202,8199,8196,8193,8190
<8190=8192,8191
<8193=8195,8194
<8196=8198,8197
<8199=8201,8200
<8202=8204,8203
<8205=8207,8206
<8208=8209
<8209=8211,8210
<8212=8216,8213
<8213=8215,8214
<8216=8218,8217
<8219=8223,8220
<8220=8222,8221
<8223=8225,8224
<8226=8227
<8227=8230,8229,8228
<8231=8232
<8232=8235,8234,8233
<8236=8249,8246,8243,8240,8237
<8237=8239,8238
<8240=8242,8241
<8243=8245,8244
<8246=8248,8247
<8249=8251,8250
<8390=8402,8401,8391
<8391=8398,8395,8392
<8392=8394,8393
<8395=8397,8396
<8398=8400,8399
<8402=8636,8629,8625,8618,8604,8593,8582,8578,8405,8403
<8403=8404
<8405=8572,8570,8565,8406
<8406=8559,8553,8549,8430,8407
<8407=8428,8408
<8408=8419,8413,8409
<8409=8410
<8410=8412,8411
<8413=8414
<8414=8416,8415
<8416=8418,8417
<8419=8420
<8420=8426,8421
<8421=8422
<8422=8423
<8423=8425,8424
<8426=8427
<8428=8429
<8430=8545,8539,8536,8431
<8431=8517,8432
<8432=8496,8475,8433
<8433=8434
<8434=8450,8435
<8435=8437,8436
<8437=8438
<8438=8449,8439
<8439=8447,8440
<8440=8445,8443,8441
<8441=8442
<8443=8444
<8445=8446
<8447=8448
<8450=8451
<8451=8473,8452
<8452=8457,8455,8453
<8453=8454
<8455=8456
<8457=8458
<8458=8470,8459
<8459=8463,8460
<8460=8462,8461
<8463=8469,8464
<8464=8468,8465
<8465=8467,8466
<8470=8472,8471
<8473=8474
<8475=8477,8476
<8477=8478
<8478=8495,8479
<8479=8493,8480
<8480=8491,8489,8481
<8481=8482
<8482=8486,8483
<8483=8485,8484
<8486=8488,8487
<8489=8490
<8491=8492
<8493=8494
<8496=8497
<8497=8515,8498
<8498=8503,8501,8499
<8499=8500
<8501=8502
<8503=8504
<8504=8512,8505
<8505=8509,8506
<8506=8508,8507
<8509=8511,8510
<8512=8514,8513
<8515=8516
<8517=8519,8518
<8519=8520
<8520=8535,8521
<8521=8533,8522
<8522=8527,8525,8523
<8523=8524
<8525=8526
<8527=8528
<8528=8530,8529
<8530=8532,8531
<8533=8534
<8536=8538,8537
<8539=8540
<8540=8544,8541
<8541=8543,8542
<8545=8546
<8546=8548,8547
<8549=8550
<8550=8552,8551
<8553=8555,8554
<8555=8556
<8556=8558,8557
<8559=8560
<8560=8564,8561
<8561=8563,8562
<8565=8569,8566
<8566=8568,8567
<8570=8571
<8572=8573
<8573=8577,8574
<8574=8576,8575
<8578=8579
<8579=8581,8580
<8582=8583
<8583=8591,8584
<8584=8589,8587,8585
<8585=8586
<8587=8588
<8589=8590
<8591=8592
<8593=8594
<8594=8602,8595
<8595=8600,8598,8596
<8596=8597
<8598=8599
<8600=8601
<8602=8603
<8604=8607,8605
<8605=8606
<8607=8608
<8608=8616,8609
<8609=8614,8612,8610
<8610=8611
<8612=8613
<8614=8615
<8616=8617
<8618=8622,8619
<8619=8621,8620
<8622=8624,8623
<8625=8626
<8626=8628,8627
<8629=8633,8630
<8630=8632,8631
<8633=8635,8634
<8636=8637
<8637=8639,8638
<8669=8675,8674,8670
<8670=8671
<8671=8673,8672
<8675=8697,8676
<8676=8691,8689,8684,8677
<8677=8678
<8678=8679
<8679=8681,8680
<8681=8683,8682
<8684=8688,8685
<8685=8687,8686
<8689=8690
<8691=8692
<8692=8696,8693
<8693=8695,8694
<8697=8698
<8698=8700,8699
<8712=8715,8714,8713
<8715=9426,9422,9415,9409,9402,8718,8716
<8716=8717
<8718=8721,8719
<8719=8720
<8721=9391,9378,9308,9263,9001,8722
<8722=8997,8984,8723
<8723=8724
<8724=8977,8966,8951,8944,8929,8922,8907,8900,8887,8880,8865,8858,8843,8828,8816,8804,8792,8725
<8725=8787,8726
<8726=8780,8767,8760,8747,8740,8727
<8727=8728
<8728=8735,8729
<8729=8733,8730
<8730=8731
<8731=8732
<8733=8734
<8735=8737,8736
<8737=8739,8738
<8740=8741
<8741=8745,8742
<8742=8743
<8743=8744
<8745=8746
<8747=8748
<8748=8755,8749
<8749=8753,8750
<8750=8751
<8751=8752
<8753=8754
<8755=8757,8756
<8757=8759,8758
<8760=8761
<8761=8765,8762
<8762=8763
<8763=8764
<8765=8766
<8767=8768
<8768=8775,8769
<8769=8773,8770
<8770=8771
<8771=8772
<8773=8774
<8775=8777,8776
<8777=8779,8778
<8780=8781
<8781=8785,8782
<8782=8783
<8783=8784
<8785=8786
<8787=8788
<8788=8790,8789
<8790=8791
<8792=8793
<8793=8799,8794
<8794=8796,8795
<8796=8798,8797
<8799=8801,8800
<8801=8803,8802
<8804=8805
<8805=8811,8806
<8806=8808,8807
<8808=8810,8809
<8811=8813,8812
<8813=8815,8814
<8816=8817
<8817=8823,8818
<8818=8820,8819
<8820=8822,8821
<8823=8825,8824
<8825=8827,8826
<8828=8829
<8829=8840,8830
<8830=8838,8831
<8831=8832
<8832=8833
<8833=8835,8834
<8835=8837,8836
<8838=8839
<8840=8842,8841
<8843=8844
<8844=8851,8845
<8845=8849,8846
<8846=8847
<8847=8848
<8849=8850
<8851=8853,8852
<8853=8855,8854
<8855=8857,8856
<8858=8859
<8859=8863,8860
<8860=8861
<8861=8862
<8863=8864
<8865=8866
<8866=8873,8867
<8867=8871,8868
<8868=8869
<8869=8870
<8871=8872
<8873=8875,8874
<8875=8877,8876
<8877=8879,8878
<8880=8881
<8881=8885,8882
<8882=8883
<8883=8884
<8885=8886
<8887=8888
<8888=8895,8889
<8889=8893,8890
<8890=8891
<8891=8892
<8893=8894
<8895=8897,8896
<8897=8899,8898
<8900=8901
<8901=8905,8902
<8902=8903
<8903=8904
<8905=8906
<8907=8908
<8908=8915,8909
<8909=8913,8910
<8910=8911
<8911=8912
<8913=8914
<8915=8917,8916
<8917=8919,8918
<8919=8921,8920
<8922=8923
<8923=8927,8924
<8924=8925
<8925=8926
<8927=8928
<8929=8930
<8930=8937,8931
<8931=8935,8932
<8932=8933
<8933=8934
<8935=8936
<8937=8939,8938
<8939=8941,8940
<8941=8943,8942
<8944=8945
<8945=8949,8946
<8946=8947
<8947=8948
<8949=8950
<8951=8960,8952
<8952=8953
<8953=8954
<8954=8959,8958,8955
<8955=8957,8956
<8960=8961
<8961=8963,8962
<8963=8965,8964
<8966=8967
<8967=8971,8968
<8968=8969
<8969=8970
<8971=8972
<8972=8974,8973
<8974=8976,8975
<8977=8978
<8978=8982,8979
<8979=8980
<8980=8981
<8982=8983
<8984=8985
<8985=8986
<8986=8988,8987
<8988=8989
<8989=8991,8990
<8991=8995,8992
<8992=8993
<8993=8994
<8995=8996
<8997=8998
<8998=9000,8999
<9001=9241,9197,9002
<9002=9003
<9003=9191,9167,9160,9154,9111,9004
<9004=9107,9103,9100,9005
<9005=9088,9068,9033,9026,9006
<9006=9017,9007
<9007=9010,9008
<9008=9009
<9010=9011
<9011=9015,9012
<9012=9013
<9013=9014
<9015=9016
<9017=9018
<9018=9024,9019
<9019=9022,9020
<9020=9021
<9022=9023
<9024=9025
<9026=9027
<9027=9031,9028
<9028=9029
<9029=9030
<9031=9032
<9033=9064,9060,9057,9034
<9034=9050,9035
<9035=9036
<9036=9043,9037
<9037=9041,9038
<9038=9039
<9039=9040
<9041=9042
<9043=9045,9044
<9045=9047,9046
<9047=9049,9048
<9050=9051
<9051=9055,9052
<9052=9053
<9053=9054
<9055=9056
<9057=9059,9058
<9060=9061
<9061=9063,9062
<9064=9065
<9065=9067,9066
<9068=9079,9069
<9069=9072,9070
<9070=9071
<9072=9073
<9073=9077,9074
<9074=9075
<9075=9076
<9077=9078
<9079=9080
<9080=9086,9081
<9081=9084,9082
<9082=9083
<9084=9085
<9086=9087
<9088=9096,9089
<9089=9090
<9090=9094,9091
<9091=9092
<9092=9093
<9094=9095
<9096=9097
<9097=9099,9098
<9100=9102,9101
<9103=9104
<9104=9106,9105
<9107=9108
<9108=9110,9109
<9111=9148,9141,9112
<9112=9113
<9113=9137,9120,9114
<9114=9115
<9115=9117,9116
<9117=9119,9118
<9120=9131,9127,9122,9121
<9122=9126,9123
<9123=9125,9124
<9127=9128
<9128=9130,9129
<9131=9132
<9132=9136,9133
<9133=9135,9134
<9137=9138
<9138=9140,9139
<9141=9142
<9142=9143
<9143=9145,9144
<9145=9147,9146
<9148=9149
<9149=9153,9150
<9150=9152,9151
<9154=9155
<9155=9157,9156
<9157=9159,9158
<9160=9161
<9161=9166,9162
<9162=9164,9163
<9164=9165
<9167=9187,9168
<9168=9175,9169
<9169=9170
<9170=9172,9171
<9172=9174,9173
<9175=9183,9176
<9176=9177
<9177=9181,9178
<9178=9179
<9179=9180
<9181=9182
<9183=9184
<9184=9186,9185
<9187=9188
<9188=9190,9189
<9191=9192
<9192=9194,9193
<9194=9196,9195
<9197=9234,9216,9198
<9198=9212,9202,9199
<9199=9200
<9200=9201
<9202=9205,9203
<9203=9204
<9205=9206
<9206=9210,9207
<9207=9208
<9208=9209
<9210=9211
<9212=9213
<9213=9215,9214
<9216=9217
<9217=9233,9218
<9218=9231,9219
<9219=9220
<9220=9221
<9221=9223,9222
<9223=9229,9224
<9224=9227,9225
<9225=9226
<9227=9228
<9229=9230
<9231=9232
<9234=9235
<9235=9239,9236
<9236=9237
<9237=9238
<9239=9240
<9241=9242
<9242=9253,9243
<9243=9245,9244
<9245=9251,9246
<9246=9249,9247
<9247=9248
<9249=9250
<9251=9252
<9253=9255,9254
<9255=9261,9256
<9256=9259,9257
<9257=9258
<9259=9260
<9261=9262
<9263=9297,9264
<9264=9290,9283,9265
<9265=9279,9269,9266
<9266=9267
<9267=9268
<9269=9272,9270
<9270=9271
<9272=9273
<9273=9277,9274
<9274=9275
<9275=9276
<9277=9278
<9279=9280
<9280=9282,9281
<9283=9284
<9284=9289,9285
<9285=9287,9286
<9287=9288
<9290=9291
<9291=9295,9292
<9292=9293
<9293=9294
<9295=9296
<9297=9298
<9298=9300,9299
<9300=9306,9301
<9301=9304,9302
<9302=9303
<9304=9305
<9306=9307
<9308=9367,9309
<9309=9361,9335,9328,9310
<9310=9324,9314,9311
<9311=9312
<9312=9313
<9314=9317,9315
<9315=9316
<9317=9318
<9318=9322,9319
<9319=9320
<9320=9321
<9322=9323
<9324=9325
<9325=9327,9326
<9328=9329
<9329=9333,9330
<9330=9331
<9331=9332
<9333=9334
<9335=9357,9344,9336
<9336=9337
<9337=9338
<9338=9342,9339
<9339=9340
<9340=9341
<9342=9343
<9344=9345
<9345=9353,9346
<9346=9347
<9347=9351,9348
<9348=9349
<9349=9350
<9351=9352
<9353=9354
<9354=9356,9355
<9357=9358
<9358=9360,9359
<9361=9362
<9362=9364,9363
<9364=9366,9365
<9367=9368
<9368=9370,9369
<9370=9376,9371
<9371=9374,9372
<9372=9373
<9374=9375
<9376=9377
<9378=9380,9379
<9380=9381
<9381=9390,9382
<9382=9388,9383
<9383=9386,9384
<9384=9385
<9386=9387
<9388=9389
<9391=9393,9392
<9393=9394
<9394=9401,9395
<9395=9399,9396
<9396=9397
<9397=9398
<9399=9400
<9402=9403
<9403=9408,9404
<9404=9406,9405
<9406=9407
<9409=9410
<9410=9412,9411
<9412=9414,9413
<9415=9419,9416
<9416=9418,9417
<9419=9421,9420
<9422=9423
<9423=9425,9424
<9426=9427
<9427=9429,9428
<9494=9500,9499,9495
<9495=9496
<9496=9498,9497
<9500=9542,9537,9528,9517,9510,9501
<9501=9502
<9502=9508,9503
<9503=9506,9504
<9504=9505
<9506=9507
<9508=9509
<9510=9511
<9511=9515,9512
<9512=9513
<9513=9514
<9515=9516
<9517=9518
<9518=9526,9519
<9519=9524,9522,9520
<9520=9521
<9522=9523
<9524=9525
<9526=9527
<9528=9529
<9529=9535,9530
<9530=9533,9531
<9531=9532
<9533=9534
<9535=9536
<9537=9538
<9538=9541,9540,9539
<9542=9543
<9543=9545,9544
<9553=9565,9564,9554
<9554=9561,9558,9555
<9555=9557,9556
<9558=9560,9559
<9561=9563,9562
<9565=9566
<9566=9631,9576,9567
<9567=9568
<9568=9569
<9569=9570
<9570=9574,9571
<9571=9572
<9572=9573
<9574=9575
<9576=9577
<9577=9627,9613,9578
<9578=9579
<9579=9609,9595,9580
<9580=9581
<9581=9582
<9582=9583
<9583=9593,9584
<9584=9589,9587,9585
<9585=9586
<9587=9588
<9589=9590
<9590=9592,9591
<9593=9594
<9595=9596
<9596=9597
<9597=9607,9598
<9598=9603,9601,9599
<9599=9600
<9601=9602
<9603=9604
<9604=9606,9605
<9607=9608
<9609=9610
<9610=9612,9611
<9613=9614
<9614=9615
<9615=9625,9616
<9616=9621,9619,9617
<9617=9618
<9619=9620
<9621=9622
<9622=9624,9623
<9625=9626
<9627=9628
<9628=9630,9629
<9631=9632
<9632=9634,9633
<9649=9658,9657,9650
<9650=9654,9651
<9651=9653,9652
<9654=9656,9655
<9658=9661,9659
<9659=9660
<9661=9720,9671,9662
<9662=9663
<9663=9664
<9664=9665
<9665=9669,9666
<9666=9667
<9667=9668
<9669=9670
<9671=9672
<9672=9716,9704,9673
<9673=9674
<9674=9700,9688,9675
<9675=9676
<9676=9677
<9677=9678
<9678=9686,9679
<9679=9682,9680
<9680=9681
<9682=9683
<9683=9685,9684
<9686=9687
<9688=9689
<9689=9690
<9690=9698,9691
<9691=9694,9692
<9692=9693
<9694=9695
<9695=9697,9696
<9698=9699
<9700=9701
<9701=9703,9702
<9704=9705
<9705=9706
<9706=9714,9707
<9707=9710,9708
<9708=9709
<9710=9711
<9711=9713,9712
<9714=9715
<9716=9717
<9717=9719,9718
<9720=9721
<9721=9723,9722
<9740=9749,9748,9741
<9741=9745,9742
<9742=9744,9743
<9745=9747,9746
<9749=10637,10633,10629,10625,10607,10589,9750
<9750=10585,10145,9751
<9751=9752
<9752=10136,9762,9753
<9753=9754
<9754=9760,9755
<9755=9758,9756
<9756=9757
<9758=9759
<9760=9761
<9762=10130,10128,10123,9763
<9763=10015,9773,9764
<9764=9765
<9765=9771,9766
<9766=9769,9767
<9767=9768
<9769=9770
<9771=9772
<9773=10011,9977,9774
<9774=9775
<9775=9969,9958,9919,9861,9803,9776
<9776=9777
<9777=9801,9778
<9778=9799,9797,9791,9785,9779
<9779=9780
<9780=9782,9781
<9782=9784,9783
<9785=9786
<9786=9788,9787
<9788=9790,9789
<9791=9792
<9792=9794,9793
<9794=9796,9795
<9797=9798
<9799=9800
<9801=9802
<9803=9843,9824,9804
<9804=9805
<9805=9806
<9806=9822,9807
<9807=9820,9818,9808
<9808=9809
<9809=9817,9810
<9810=9812,9811
<9812=9814,9813
<9814=9816,9815
<9818=9819
<9820=9821
<9822=9823
<9824=9825
<9825=9841,9826
<9826=9839,9837,9827
<9827=9828
<9828=9836,9829
<9829=9831,9830
<9831=9833,9832
<9833=9835,9834
<9837=9838
<9839=9840
<9841=9842
<9843=9844
<9844=9854,9845
<9845=9853,9846
<9846=9848,9847
<9848=9850,9849
<9850=9852,9851
<9854=9856,9855
<9856=9858,9857
<9858=9860,9859
<9861=9901,9882,9862
<9862=9863
<9863=9864
<9864=9880,9865
<9865=9878,9876,9866
<9866=9867
<9867=9875,9868
<9868=9870,9869
<9870=9872,9871
<9872=9874,9873
<9876=9877
<9878=9879
<9880=9881
<9882=9883
<9883=9899,9884
<9884=9897,9895,9885
<9885=9886
<9886=9894,9887
<9887=9889,9888
<9889=9891,9890
<9891=9893,9892
<9895=9896
<9897=9898
<9899=9900
<9901=9902
<9902=9912,9903
<9903=9911,9904
<9904=9906,9905
<9906=9908,9907
<9908=9910,9909
<9912=9914,9913
<9914=9916,9915
<9916=9918,9917
<9919=9920
<9920=9956,9921
<9921=9954,9952,9950,9940,9930,9922
<9922=9923
<9923=9929,9924
<9924=9926,9925
<9926=9928,9927
<9930=9931
<9931=9939,9932
<9932=9934,9933
<9934=9936,9935
<9936=9938,9937
<9940=9941
<9941=9949,9942
<9942=9944,9943
<9944=9946,9945
<9946=9948,9947
<9950=9951
<9952=9953
<9954=9955
<9956=9957
<9958=9963,9959
<9959=9960
<9960=9962,9961
<9963=9964
<9964=9966,9965
<9966=9968,9967
<9969=9970
<9970=9976,9971
<9971=9973,9972
<9973=9975,9974
<9977=10007,9978
<9978=10001,9994,9979
<9979=9980
<9980=9981
<9981=9985,9982
<9982=9983
<9983=9984
<9985=9986
<9986=9988,9987
<9988=9992,9989
<9989=9990
<9990=9991
<9992=9993
<9994=9995
<9995=9999,9996
<9996=9997
<9997=9998
<9999=10000
<10001=10002
<10002=10006,10003
<10003=10005,10004
<10007=10008
<10008=10010,10009
<10011=10012
<10012=10014,10013
<10015=10119,10115,10112,10016
<10016=10103,10026,10017
<10017=10018
<10018=10024,10019
<10019=10022,10020
<10020=10021
<10022=10023
<10024=10025
<10026=10095,10091,10088,10027
<10027=10028
<10028=10068,10047,10029
<10029=10030
<10030=10031
<10031=10045,10032
<10032=10043,10041,10033
<10033=10034
<10034=10036,10035
<10036=10038,10037
<10038=10040,10039
<10041=10042
<10043=10044
<10045=10046
<10047=10048
<10048=10066,10049
<10049=10064,10062,10050
<10050=10051
<10051=10061,10052
<10052=10060,10053
<10053=10055,10054
<10055=10057,10056
<10057=10059,10058
<10062=10063
<10064=10065
<10066=10067
<10068=10069
<10069=10081,10070
<10070=10080,10071
<10071=10079,10072
<10072=10074,10073
<10074=10076,10075
<10076=10078,10077
<10081=10083,10082
<10083=10085,10084
<10085=10087,10086
<10088=10090,10089
<10091=10092
<10092=10094,10093
<10095=10096
<10096=10097
<10097=10102,10101,10098
<10098=10100,10099
<10103=10104
<10104=10110,10105
<10105=10108,10106
<10106=10107
<10108=10109
<10110=10111
<10112=10114,10113
<10115=10116
<10116=10118,10117
<10119=10120
<10120=10122,10121
<10123=10127,10124
<10124=10126,10125
<10128=10129
<10130=10131
<10131=10135,10132
<10132=10134,10133
<10136=10137
<10137=10143,10138
<10138=10141,10139
<10139=10140
<10141=10142
<10143=10144
<10145=10576,10540,10155,10146
<10146=10147
<10147=10153,10148
<10148=10151,10149
<10149=10150
<10151=10152
<10153=10154
<10155=10534,10532,10527,10156
<10156=10420,10411,10331,10322,10242,10233,10221,10195,10184,10157
<10157=10158
<10158=10182,10159
<10159=10180,10178,10172,10166,10160
<10160=10161
<10161=10163,10162
<10163=10165,10164
<10166=10167
<10167=10169,10168
<10169=10171,10170
<10172=10173
<10173=10175,10174
<10175=10177,10176
<10178=10179
<10180=10181
<10182=10183
<10184=10185
<10185=10193,10186
<10186=10191,10189,10187
<10187=10188
<10189=10190
<10191=10192
<10193=10194
<10195=10196
<10196=10220,10219,10197
<10197=10218,10198
<10198=10205,10200,10199
<10200=10202,10201
<10202=10204,10203
<10205=10206
<10206=10208,10207
<10208=10216,10209
<10209=10210
<10210=10211
<10211=10213,10212
<10213=10215,10214
<10216=10217
<10221=10229,10222
<10222=10223
<10223=10227,10224
<10224=10225
<10225=10226
<10227=10228
<10229=10230
<10230=10232,10231
<10233=10234
<10234=10240,10235
<10235=10238,10236
<10236=10237
<10238=10239
<10240=10241
<10242=10318,10314,10311,10243
<10243=10287,10264,10244
<10244=10245
<10245=10246
<10246=10262,10247
<10247=10260,10258,10248
<10248=10249
<10249=10251,10250
<10251=10253,10252
<10253=10255,10254
<10255=10257,10256
<10258=10259
<10260=10261
<10262=10263
<10264=10265
<10265=10285,10266
<10266=10283,10281,10267
<10267=10268
<10268=10280,10269
<10269=10279,10270
<10270=10272,10271
<10272=10274,10273
<10274=10276,10275
<10276=10278,10277
<10281=10282
<10283=10284
<10285=10286
<10287=10288
<10288=10302,10289
<10289=10301,10290
<10290=10300,10291
<10291=10293,10292
<10293=10295,10294
<10295=10297,10296
<10297=10299,10298
<10302=10304,10303
<10304=10306,10305
<10306=10308,10307
<10308=10310,10309
<10311=10313,10312
<10314=10315
<10315=10317,10316
<10318=10319
<10319=10321,10320
<10322=10323
<10323=10329,10324
<10324=10327,10325
<10325=10326
<10327=10328
<10329=10330
<10331=10407,10403,10400,10332
<10332=10376,10353,10333
<10333=10334
<10334=10335
<10335=10351,10336
<10336=10349,10347,10337
<10337=10338
<10338=10340,10339
<10340=10342,10341
<10342=10344,10343
<10344=10346,10345
<10347=10348
<10349=10350
<10351=10352
<10353=10354
<10354=10374,10355
<10355=10372,10370,10356
<10356=10357
<10357=10369,10358
<10358=10368,10359
<10359=10361,10360
<10361=10363,10362
<10363=10365,10364
<10365=10367,10366
<10370=10371
<10372=10373
<10374=10375
<10376=10377
<10377=10391,10378
<10378=10390,10379
<10379=10389,10380
<10380=10382,10381
<10382=10384,10383
<10384=10386,10385
<10386=10388,10387
<10391=10393,10392
<10393=10395,10394
<10395=10397,10396
<10397=10399,10398
<10400=10402,10401
<10403=10404
<10404=10406,10405
<10407=10408
<10408=10410,10409
<10411=10412
<10412=10418,10413
<10413=10416,10414
<10414=10415
<10416=10417
<10418=10419
<10420=10523,10519,10516,10421
<10421=10507,10431,10422
<10422=10423
<10423=10429,10424
<10424=10427,10425
<10425=10426
<10427=10428
<10429=10430
<10431=10499,10495,10492,10432
<10432=10472,10451,10433
<10433=10434
<10434=10435
<10435=10449,10436
<10436=10447,10445,10437
<10437=10438
<10438=10440,10439
<10440=10442,10441
<10442=10444,10443
<10445=10446
<10447=10448
<10449=10450
<10451=10452
<10452=10470,10453
<10453=10468,10466,10454
<10454=10455
<10455=10465,10456
<10456=10464,10457
<10457=10459,10458
<10459=10461,10460
<10461=10463,10462
<10466=10467
<10468=10469
<10470=10471
<10472=10473
<10473=10485,10474
<10474=10484,10475
<10475=10483,10476
<10476=10478,10477
<10478=10480,10479
<10480=10482,10481
<10485=10487,10486
<10487=10489,10488
<10489=10491,10490
<10492=10494,10493
<10495=10496
<10496=10498,10497
<10499=10500
<10500=10501
<10501=10506,10505,10502
<10502=10504,10503
<10507=10508
<10508=10514,10509
<10509=10512,10510
<10510=10511
<10512=10513
<10514=10515
<10516=10518,10517
<10519=10520
<10520=10522,10521
<10523=10524
<10524=10526,10525
<10527=10531,10528
<10528=10530,10529
<10532=10533
<10534=10535
<10535=10539,10536
<10536=10538,10537
<10540=10572,10541
<10541=10566,10564,10559,10542
<10542=10543
<10543=10557,10544
<10544=10555,10553,10549,10545
<10545=10546
<10546=10548,10547
<10549=10550
<10550=10552,10551
<10553=10554
<10555=10556
<10557=10558
<10559=10563,10560
<10560=10562,10561
<10564=10565
<10566=10567
<10567=10571,10568
<10568=10570,10569
<10572=10573
<10573=10575,10574
<10576=10577
<10577=10583,10578
<10578=10581,10579
<10579=10580
<10581=10582
<10583=10584
<10585=10586
<10586=10588,10587
<10589=10603,10590
<10590=10592,10591
<10592=10593
<10593=10601,10594
<10594=10597,10595
<10595=10596
<10597=10598
<10598=10600,10599
<10601=10602
<10603=10604
<10604=10606,10605
<10607=10621,10608
<10608=10610,10609
<10610=10611
<10611=10619,10612
<10612=10615,10613
<10613=10614
<10615=10616
<10616=10618,10617
<10619=10620
<10621=10622
<10622=10624,10623
<10625=10626
<10626=10628,10627
<10629=10630
<10630=10632,10631
<10633=10634
<10634=10636,10635
<10637=10638
<10638=10640,10639
<10702=10708,10707,10703
<10703=10704
<10704=10706,10705
<10708=10750,10745,10736,10725,10718,10709
<10709=10710
<10710=10716,10711
<10711=10714,10712
<10712=10713
<10714=10715
<10716=10717
<10718=10719
<10719=10723,10720
<10720=10721
<10721=10722
<10723=10724
<10725=10726
<10726=10734,10727
<10727=10732,10730,10728
<10728=10729
<10730=10731
<10732=10733
<10734=10735
<10736=10737
<10737=10743,10738
<10738=10741,10739
<10739=10740
<10741=10742
<10743=10744
<10745=10746
<10746=10749,10748,10747
<10750=10751
<10751=10753,10752
<10761=10770,10769,10762
<10762=10766,10763
<10763=10765,10764
<10766=10768,10767
<10770=11659,11655,11651,11647,11629,11611,11598,10771
<10771=11594,11166,10772
<10772=10773
<10773=11157,10783,10774
<10774=10775
<10775=10781,10776
<10776=10779,10777
<10777=10778
<10779=10780
<10781=10782
<10783=11151,11149,11144,10784
<10784=11036,10794,10785
<10785=10786
<10786=10792,10787
<10787=10790,10788
<10788=10789
<10790=10791
<10792=10793
<10794=11032,10998,10795
<10795=10796
<10796=10990,10979,10940,10882,10824,10797
<10797=10798
<10798=10822,10799
<10799=10820,10818,10812,10806,10800
<10800=10801
<10801=10803,10802
<10803=10805,10804
<10806=10807
<10807=10809,10808
<10809=10811,10810
<10812=10813
<10813=10815,10814
<10815=10817,10816
<10818=10819
<10820=10821
<10822=10823
<10824=10864,10845,10825
<10825=10826
<10826=10827
<10827=10843,10828
<10828=10841,10839,10829
<10829=10830
<10830=10838,10831
<10831=10833,10832
<10833=10835,10834
<10835=10837,10836
<10839=10840
<10841=10842
<10843=10844
<10845=10846
<10846=10862,10847
<10847=10860,10858,10848
<10848=10849
<10849=10857,10850
<10850=10852,10851
<10852=10854,10853
<10854=10856,10855
<10858=10859
<10860=10861
<10862=10863
<10864=10865
<10865=10875,10866
<10866=10874,10867
<10867=10869,10868
<10869=10871,10870
<10871=10873,10872
<10875=10877,10876
<10877=10879,10878
<10879=10881,10880
<10882=10922,10903,10883
<10883=10884
<10884=10885
<10885=10901,10886
<10886=10899,10897,10887
<10887=10888
<10888=10896,10889
<10889=10891,10890
<10891=10893,10892
<10893=10895,10894
<10897=10898
<10899=10900
<10901=10902
<10903=10904
<10904=10920,10905
<10905=10918,10916,10906
<10906=10907
<10907=10915,10908
<10908=10910,10909
<10910=10912,10911
<10912=10914,10913
<10916=10917
<10918=10919
<10920=10921
<10922=10923
<10923=10933,10924
<10924=10932,10925
<10925=10927,10926
<10927=10929,10928
<10929=10931,10930
<10933=10935,10934
<10935=10937,10936
<10937=10939,10938
<10940=10941
<10941=10977,10942
<10942=10975,10973,10971,10961,10951,10943
<10943=10944
<10944=10950,10945
<10945=10947,10946
<10947=10949,10948
<10951=10952
<10952=10960,10953
<10953=10955,10954
<10955=10957,10956
<10957=10959,10958
<10961=10962
<10962=10970,10963
<10963=10965,10964
<10965=10967,10966
<10967=10969,10968
<10971=10972
<10973=10974
<10975=10976
<10977=10978
<10979=10984,10980
<10980=10981
<10981=10983,10982
<10984=10985
<10985=10987,10986
<10987=10989,10988
<10990=10991
<10991=10997,10992
<10992=10994,10993
<10994=10996,10995
<10998=11028,10999
<10999=11022,11015,11000
<11000=11001
<11001=11002
<11002=11006,11003
<11003=11004
<11004=11005
<11006=11007
<11007=11009,11008
<11009=11013,11010
<11010=11011
<11011=11012
<11013=11014
<11015=11016
<11016=11020,11017
<11017=11018
<11018=11019
<11020=11021
<11022=11023
<11023=11027,11024
<11024=11026,11025
<11028=11029
<11029=11031,11030
<11032=11033
<11033=11035,11034
<11036=11140,11136,11133,11037
<11037=11124,11047,11038
<11038=11039
<11039=11045,11040
<11040=11043,11041
<11041=11042
<11043=11044
<11045=11046
<11047=11116,11112,11109,11048
<11048=11049
<11049=11089,11068,11050
<11050=11051
<11051=11052
<11052=11066,11053
<11053=11064,11062,11054
<11054=11055
<11055=11057,11056
<11057=11059,11058
<11059=11061,11060
<11062=11063
<11064=11065
<11066=11067
<11068=11069
<11069=11087,11070
<11070=11085,11083,11071
<11071=11072
<11072=11082,11073
<11073=11081,11074
<11074=11076,11075
<11076=11078,11077
<11078=11080,11079
<11083=11084
<11085=11086
<11087=11088
<11089=11090
<11090=11102,11091
<11091=11101,11092
<11092=11100,11093
<11093=11095,11094
<11095=11097,11096
<11097=11099,11098
<11102=11104,11103
<11104=11106,11105
<11106=11108,11107
<11109=11111,11110
<11112=11113
<11113=11115,11114
<11116=11117
<11117=11118
<11118=11123,11122,11119
<11119=11121,11120
<11124=11125
<11125=11131,11126
<11126=11129,11127
<11127=11128
<11129=11130
<11131=11132
<11133=11135,11134
<11136=11137
<11137=11139,11138
<11140=11141
<11141=11143,11142
<11144=11148,11145
<11145=11147,11146
<11149=11150
<11151=11152
<11152=11156,11153
<11153=11155,11154
<11157=11158
<11158=11164,11159
<11159=11162,11160
<11160=11161
<11162=11163
<11164=11165
<11166=11585,11549,11176,11167
<11167=11168
<11168=11174,11169
<11169=11172,11170
<11170=11171
<11172=11173
<11174=11175
<11176=11543,11541,11536,11177
<11177=11429,11420,11340,11331,11251,11242,11216,11205,11178
<11178=11179
<11179=11203,11180
<11180=11201,11199,11193,11187,11181
<11181=11182
<11182=11184,11183
<11184=11186,11185
<11187=11188
<11188=11190,11189
<11190=11192,11191
<11193=11194
<11194=11196,11195
<11196=11198,11197
<11199=11200
<11201=11202
<11203=11204
<11205=11206
<11206=11214,11207
<11207=11212,11210,11208
<11208=11209
<11210=11211
<11212=11213
<11214=11215
<11216=11217
<11217=11241,11240,11218
<11218=11239,11219
<11219=11226,11221,11220
<11221=11223,11222
<11223=11225,11224
<11226=11227
<11227=11229,11228
<11229=11237,11230
<11230=11231
<11231=11232
<11232=11234,11233
<11234=11236,11235
<11237=11238
<11242=11243
<11243=11249,11244
<11244=11247,11245
<11245=11246
<11247=11248
<11249=11250
<11251=11327,11323,11320,11252
<11252=11296,11273,11253
<11253=11254
<11254=11255
<11255=11271,11256
<11256=11269,11267,11257
<11257=11258
<11258=11260,11259
<11260=11262,11261
<11262=11264,11263
<11264=11266,11265
<11267=11268
<11269=11270
<11271=11272
<11273=11274
<11274=11294,11275
<11275=11292,11290,11276
<11276=11277
<11277=11289,11278
<11278=11288,11279
<11279=11281,11280
<11281=11283,11282
<11283=11285,11284
<11285=11287,11286
<11290=11291
<11292=11293
<11294=11295
<11296=11297
<11297=11311,11298
<11298=11310,11299
<11299=11309,11300
<11300=11302,11301
<11302=11304,11303
<11304=11306,11305
<11306=11308,11307
<11311=11313,11312
<11313=11315,11314
<11315=11317,11316
<11317=11319,11318
<11320=11322,11321
<11323=11324
<11324=11326,11325
<11327=11328
<11328=11330,11329
<11331=11332
<11332=11338,11333
<11333=11336,11334
<11334=11335
<11336=11337
<11338=11339
<11340=11416,11412,11409,11341
<11341=11385,11362,11342
<11342=11343
<11343=11344
<11344=11360,11345
<11345=11358,11356,11346
<11346=11347
<11347=11349,11348
<11349=11351,11350
<11351=11353,11352
<11353=11355,11354
<11356=11357
<11358=11359
<11360=11361
<11362=11363
<11363=11383,11364
<11364=11381,11379,11365
<11365=11366
<11366=11378,11367
<11367=11377,11368
<11368=11370,11369
<11370=11372,11371
<11372=11374,11373
<11374=11376,11375
<11379=11380
<11381=11382
<11383=11384
<11385=11386
<11386=11400,11387
<11387=11399,11388
<11388=11398,11389
<11389=11391,11390
<11391=11393,11392
<11393=11395,11394
<11395=11397,11396
<11400=11402,11401
<11402=11404,11403
<11404=11406,11405
<11406=11408,11407
<11409=11411,11410
<11412=11413
<11413=11415,11414
<11416=11417
<11417=11419,11418
<11420=11421
<11421=11427,11422
<11422=11425,11423
<11423=11424
<11425=11426
<11427=11428
<11429=11532,11528,11525,11430
<11430=11516,11440,11431
<11431=11432
<11432=11438,11433
<11433=11436,11434
<11434=11435
<11436=11437
<11438=11439
<11440=11508,11504,11501,11441
<11441=11481,11460,11442
<11442=11443
<11443=11444
<11444=11458,11445
<11445=11456,11454,11446
<11446=11447
<11447=11449,11448
<11449=11451,11450
<11451=11453,11452
<11454=11455
<11456=11457
<11458=11459
<11460=11461
<11461=11479,11462
<11462=11477,11475,11463
<11463=11464
<11464=11474,11465
<11465=11473,11466
<11466=11468,11467
<11468=11470,11469
<11470=11472,11471
<11475=11476
<11477=11478
<11479=11480
<11481=11482
<11482=11494,11483
<11483=11493,11484
<11484=11492,11485
<11485=11487,11486
<11487=11489,11488
<11489=11491,11490
<11494=11496,11495
<11496=11498,11497
<11498=11500,11499
<11501=11503,11502
<11504=11505
<11505=11507,11506
<11508=11509
<11509=11510
<11510=11515,11514,11511
<11511=11513,11512
<11516=11517
<11517=11523,11518
<11518=11521,11519
<11519=11520
<11521=11522
<11523=11524
<11525=11527,11526
<11528=11529
<11529=11531,11530
<11532=11533
<11533=11535,11534
<11536=11540,11537
<11537=11539,11538
<11541=11542
<11543=11544
<11544=11548,11545
<11545=11547,11546
<11549=11581,11550
<11550=11575,11573,11568,11551
<11551=11552
<11552=11566,11553
<11553=11564,11562,11558,11554
<11554=11555
<11555=11557,11556
<11558=11559
<11559=11561,11560
<11562=11563
<11564=11565
<11566=11567
<11568=11572,11569
<11569=11571,11570
<11573=11574
<11575=11576
<11576=11580,11577
<11577=11579,11578
<11581=11582
<11582=11584,11583
<11585=11586
<11586=11592,11587
<11587=11590,11588
<11588=11589
<11590=11591
<11592=11593
<11594=11595
<11595=11597,11596
<11598=11607,11599
<11599=11600
<11600=11601
<11601=11605,11602
<11602=11603
<11603=11604
<11605=11606
<11607=11608
<11608=11610,11609
<11611=11625,11612
<11612=11614,11613
<11614=11615
<11615=11623,11616
<11616=11619,11617
<11617=11618
<11619=11620
<11620=11622,11621
<11623=11624
<11625=11626
<11626=11628,11627
<11629=11643,11630
<11630=11632,11631
<11632=11633
<11633=11641,11634
<11634=11637,11635
<11635=11636
<11637=11638
<11638=11640,11639
<11641=11642
<11643=11644
<11644=11646,11645
<11647=11648
<11648=11650,11649
<11651=11652
<11652=11654,11653
<11655=11656
<11656=11658,11657
<11659=11660
<11660=11662,11661
<11723=11735,11734,11724
<11724=11731,11728,11725
<11725=11727,11726
<11728=11730,11729
<11731=11733,11732
<11735=12315,12314,12308,12304,12300,12248,12219,12212,12200,12188,12176,12164,12152,12140,12128,12116,12047,11930,11923,11915,11907,11899,11891,11885,11868,11851,11834,11827,11819,11811,11803,11795,11789,11772,11755,11738,11736
<11736=11737
<11738=11739
<11739=11753,11740
<11740=11747,11741
<11741=11742
<11742=11744,11743
<11744=11746,11745
<11747=11748
<11748=11750,11749
<11750=11752,11751
<11753=11754
<11755=11756
<11756=11770,11757
<11757=11764,11758
<11758=11759
<11759=11761,11760
<11761=11763,11762
<11764=11765
<11765=11767,11766
<11767=11769,11768
<11770=11771
<11772=11773
<11773=11787,11774
<11774=11781,11775
<11775=11776
<11776=11778,11777
<11778=11780,11779
<11781=11782
<11782=11784,11783
<11784=11786,11785
<11787=11788
<11789=11790
<11790=11792,11791
<11792=11794,11793
<11795=11796
<11796=11800,11797
<11797=11799,11798
<11800=11802,11801
<11803=11804
<11804=11806,11805
<11806=11808,11807
<11808=11810,11809
<11811=11812
<11812=11814,11813
<11814=11816,11815
<11816=11818,11817
<11819=11820
<11820=11824,11821
<11821=11823,11822
<11824=11826,11825
<11827=11828
<11828=11833,11829
<11829=11831,11830
<11831=11832
<11834=11835
<11835=11849,11836
<11836=11843,11837
<11837=11838
<11838=11840,11839
<11840=11842,11841
<11843=11844
<11844=11846,11845
<11846=11848,11847
<11849=11850
<11851=11852
<11852=11866,11853
<11853=11860,11854
<11854=11855
<11855=11857,11856
<11857=11859,11858
<11860=11861
<11861=11863,11862
<11863=11865,11864
<11866=11867
<11868=11869
<11869=11883,11870
<11870=11877,11871
<11871=11872
<11872=11874,11873
<11874=11876,11875
<11877=11878
<11878=11880,11879
<11880=11882,11881
<11883=11884
<11885=11886
<11886=11888,11887
<11888=11890,11889
<11891=11892
<11892=11896,11893
<11893=11895,11894
<11896=11898,11897
<11899=11900
<11900=11902,11901
<11902=11904,11903
<11904=11906,11905
<11907=11908
<11908=11910,11909
<11910=11912,11911
<11912=11914,11913
<11915=11916
<11916=11920,11917
<11917=11919,11918
<11920=11922,11921
<11923=11924
<11924=11929,11925
<11925=11927,11926
<11927=11928
<11930=12043,12039,12036,11931
<11931=12029,12021,12013,12005,11997,11991,11983,11966,11949,11932
<11932=11933
<11933=11947,11934
<11934=11941,11935
<11935=11936
<11936=11938,11937
<11938=11940,11939
<11941=11942
<11942=11944,11943
<11944=11946,11945
<11947=11948
<11949=11950
<11950=11964,11951
<11951=11958,11952
<11952=11953
<11953=11955,11954
<11955=11957,11956
<11958=11959
<11959=11961,11960
<11961=11963,11962
<11964=11965
<11966=11967
<11967=11981,11968
<11968=11975,11969
<11969=11970
<11970=11972,11971
<11972=11974,11973
<11975=11976
<11976=11978,11977
<11978=11980,11979
<11981=11982
<11983=11984
<11984=11990,11985
<11985=11987,11986
<11987=11989,11988
<11991=11992
<11992=11994,11993
<11994=11996,11995
<11997=11998
<11998=12002,11999
<11999=12001,12000
<12002=12004,12003
<12005=12006
<12006=12008,12007
<12008=12010,12009
<12010=12012,12011
<12013=12014
<12014=12016,12015
<12016=12018,12017
<12018=12020,12019
<12021=12022
<12022=12026,12023
<12023=12025,12024
<12026=12028,12027
<12029=12030
<12030=12035,12031
<12031=12033,12032
<12033=12034
<12036=12038,12037
<12039=12040
<12040=12042,12041
<12043=12044
<12044=12046,12045
<12047=12112,12108,12105,12048
<12048=12093,12077,12061,12049
<12049=12050
<12050=12054,12051
<12051=12053,12052
<12054=12056,12055
<12056=12058,12057
<12058=12060,12059
<12061=12062
<12062=12070,12063
<12063=12065,12064
<12065=12067,12066
<12067=12069,12068
<12070=12072,12071
<12072=12074,12073
<12074=12076,12075
<12077=12078
<12078=12086,12079
<12079=12081,12080
<12081=12083,12082
<12083=12085,12084
<12086=12088,12087
<12088=12090,12089
<12090=12092,12091
<12093=12094
<12094=12098,12095
<12095=12097,12096
<12098=12100,12099
<12100=12102,12101
<12102=12104,12103
<12105=12107,12106
<12108=12109
<12109=12111,12110
<12112=12113
<12113=12115,12114
<12116=12117
<12117=12121,12118
<12118=12120,12119
<12121=12123,12122
<12123=12125,12124
<12125=12127,12126
<12128=12129
<12129=12133,12130
<12130=12132,12131
<12133=12135,12134
<12135=12137,12136
<12137=12139,12138
<12140=12141
<12141=12145,12142
<12142=12144,12143
<12145=12147,12146
<12147=12149,12148
<12149=12151,12150
<12152=12153
<12153=12157,12154
<12154=12156,12155
<12157=12159,12158
<12159=12161,12160
<12161=12163,12162
<12164=12165
<12165=12169,12166
<12166=12168,12167
<12169=12171,12170
<12171=12173,12172
<12173=12175,12174
<12176=12177
<12177=12181,12178
<12178=12180,12179
<12181=12183,12182
<12183=12185,12184
<12185=12187,12186
<12188=12189
<12189=12193,12190
<12190=12192,12191
<12193=12195,12194
<12195=12197,12196
<12197=12199,12198
<12200=12201
<12201=12205,12202
<12202=12204,12203
<12205=12207,12206
<12207=12209,12208
<12209=12211,12210
<12212=12213
<12213=12218,12214
<12214=12216,12215
<12216=12217
<12219=12244,12240,12237,12220
<12220=12221
<12221=12229,12222
<12222=12223
<12223=12227,12224
<12224=12225
<12225=12226
<12227=12228
<12229=12230
<12230=12234,12231
<12231=12233,12232
<12234=12236,12235
<12237=12239,12238
<12240=12241
<12241=12243,12242
<12244=12245
<12245=12247,12246
<12248=12296,12249
<12249=12250
<12250=12258,12251
<12251=12252
<12252=12256,12253
<12253=12254
<12254=12255
<12256=12257
<12258=12259
<12259=12289,12260
<12260=12282,12261
<12261=12275,12262
<12262=12268,12263
<12263=12265,12264
<12265=12267,12266
<12268=12270,12269
<12270=12272,12271
<12272=12274,12273
<12275=12277,12276
<12277=12279,12278
<12279=12281,12280
<12282=12284,12283
<12284=12286,12285
<12286=12288,12287
<12289=12291,12290
<12291=12293,12292
<12293=12295,12294
<12296=12297
<12297=12299,12298
<12300=12301
<12301=12303,12302
<12304=12305
<12305=12307,12306
<12308=12309
<12309=12311,12310
<12311=12313,12312
<12315=12319,12316
<12316=12318,12317
<12319=12321,12320
<12366=12378,12377,12367
<12367=12374,12371,12368
<12368=12370,12369
<12371=12373,12372
<12374=12376,12375
<12378=12855,12823,12813,12808,12779,12769,12759,12751,12741,12731,12723,12713,12703,12695,12685,12675,12667,12660,12637,12614,12601,12592,12584,12381,12379
<12379=12380
<12381=12580,12576,12573,12382
<12382=12563,12555,12547,12539,12531,12525,12514,12501,12486,12471,12464,12456,12448,12440,12432,12426,12413,12398,12383
<12383=12384
<12384=12396,12385
<12385=12392,12386
<12386=12387
<12387=12389,12388
<12389=12391,12390
<12392=12393
<12393=12395,12394
<12396=12397
<12398=12399
<12399=12411,12400
<12400=12407,12401
<12401=12402
<12402=12404,12403
<12404=12406,12405
<12407=12408
<12408=12410,12409
<12411=12412
<12413=12414
<12414=12424,12415
<12415=12422,12416
<12416=12417
<12417=12419,12418
<12419=12421,12420
<12422=12423
<12424=12425
<12426=12427
<12427=12429,12428
<12429=12431,12430
<12432=12433
<12433=12437,12434
<12434=12436,12435
<12437=12439,12438
<12440=12441
<12441=12443,12442
<12443=12445,12444
<12445=12447,12446
<12448=12449
<12449=12451,12450
<12451=12453,12452
<12453=12455,12454
<12456=12457
<12457=12461,12458
<12458=12460,12459
<12461=12463,12462
<12464=12465
<12465=12470,12466
<12466=12468,12467
<12468=12469
<12471=12472
<12472=12484,12473
<12473=12480,12474
<12474=12475
<12475=12477,12476
<12477=12479,12478
<12480=12481
<12481=12483,12482
<12484=12485
<12486=12487
<12487=12499,12488
<12488=12495,12489
<12489=12490
<12490=12492,12491
<12492=12494,12493
<12495=12496
<12496=12498,12497
<12499=12500
<12501=12502
<12502=12512,12503
<12503=12510,12504
<12504=12505
<12505=12507,12506
<12507=12509,12508
<12510=12511
<12512=12513
<12514=12515
<12515=12524,12523,12516
<12516=12522,12517
<12517=12519,12518
<12519=12521,12520
<12525=12526
<12526=12528,12527
<12528=12530,12529
<12531=12532
<12532=12536,12533
<12533=12535,12534
<12536=12538,12537
<12539=12540
<12540=12542,12541
<12542=12544,12543
<12544=12546,12545
<12547=12548
<12548=12550,12549
<12550=12552,12551
<12552=12554,12553
<12555=12556
<12556=12560,12557
<12557=12559,12558
<12560=12562,12561
<12563=12564
<12564=12572,12571,12565
<12565=12570,12566
<12566=12568,12567
<12568=12569
<12573=12575,12574
<12576=12577
<12577=12579,12578
<12580=12581
<12581=12583,12582
<12584=12585
<12585=12589,12586
<12586=12588,12587
<12589=12591,12590
<12592=12593
<12593=12599,12594
<12594=12597,12595
<12595=12596
<12597=12598
<12599=12600
<12601=12602
<12602=12611,12603
<12603=12609,12604
<12604=12605
<12605=12606
<12606=12608,12607
<12609=12610
<12611=12613,12612
<12614=12615
<12615=12634,12616
<12616=12632,12617
<12617=12618
<12618=12619
<12619=12629,12620
<12620=12622,12621
<12622=12626,12623
<12623=12625,12624
<12626=12628,12627
<12629=12631,12630
<12632=12633
<12634=12636,12635
<12637=12638
<12638=12657,12639
<12639=12655,12640
<12640=12641
<12641=12642
<12642=12652,12643
<12643=12645,12644
<12645=12649,12646
<12646=12648,12647
<12649=12651,12650
<12652=12654,12653
<12655=12656
<12657=12659,12658
<12660=12664,12661
<12661=12663,12662
<12664=12666,12665
<12667=12668
<12668=12670,12669
<12670=12672,12671
<12672=12674,12673
<12675=12676
<12676=12680,12677
<12677=12679,12678
<12680=12682,12681
<12682=12684,12683
<12685=12686
<12686=12690,12687
<12687=12689,12688
<12690=12692,12691
<12692=12694,12693
<12695=12696
<12696=12698,12697
<12698=12700,12699
<12700=12702,12701
<12703=12704
<12704=12708,12705
<12705=12707,12706
<12708=12710,12709
<12710=12712,12711
<12713=12714
<12714=12718,12715
<12715=12717,12716
<12718=12720,12719
<12720=12722,12721
<12723=12724
<12724=12726,12725
<12726=12728,12727
<12728=12730,12729
<12731=12732
<12732=12736,12733
<12733=12735,12734
<12736=12738,12737
<12738=12740,12739
<12741=12742
<12742=12746,12743
<12743=12745,12744
<12746=12748,12747
<12748=12750,12749
<12751=12752
<12752=12754,12753
<12754=12756,12755
<12756=12758,12757
<12759=12760
<12760=12764,12761
<12761=12763,12762
<12764=12766,12765
<12766=12768,12767
<12769=12770
<12770=12774,12771
<12771=12773,12772
<12774=12776,12775
<12776=12778,12777
<12779=12780
<12780=12807,12806,12781
<12781=12805,12782
<12782=12803,12783
<12783=12784
<12784=12785
<12785=12800,12786
<12786=12798,12787
<12787=12788
<12788=12789
<12789=12791,12790
<12791=12795,12792
<12792=12794,12793
<12795=12797,12796
<12798=12799
<12800=12802,12801
<12803=12804
<12808=12809
<12809=12812,12811,12810
<12813=12814
<12814=12822,12821,12815
<12815=12820,12816
<12816=12818,12817
<12818=12819
<12823=12847,12843,12840,12824
<12824=12832,12825
<12825=12826
<12826=12830,12827
<12827=12828
<12828=12829
<12830=12831
<12832=12833
<12833=12837,12834
<12834=12836,12835
<12837=12839,12838
<12840=12842,12841
<12843=12844
<12844=12846,12845
<12847=12848
<12848=12849
<12849=12854,12853,12850
<12850=12852,12851
<12855=12856
<12856=12864,12857
<12857=12862,12860,12858
<12858=12859
<12860=12861
<12862=12863
<12864=12865
<12905=12911,12910,12906
<12906=12907
<12907=12909,12908
<12911=13853,12912,12919,12926,12935,12946,13234,13246,13266,13286,13298,13318,13338,13350,13370,13390,13396,13404,13412,13419,13431,13451,13471,13483,13503,13523,13535,13555,13575,13581,13589,13597,13604,13611,13669,13673,13723,13730,13740,13751,13762,13768,13787,13803,13819,13826,13830,13834,13838,13842,13846
<12912=12913
<12913=12917,12914
<12914=12915
<12915=12916
<12917=12918
<12919=12920
<12920=12924,12921
<12921=12922
<12922=12923
<12924=12925
<12926=12927
<12927=12933,12928
<12928=12931,12929
<12929=12930
<12931=12932
<12933=12934
<12935=12936
<12936=12944,12937
<12937=12942,12938
<12938=12939
<12939=12941,12940
<12942=12943
<12944=12945
<12946=13230,13226,13223,12947
<12947=13216,13208,13200,13194,13179,13164,13133,13102,13090,13066,13042,13030,12995,12960,12948
<12948=12949
<12949=12953,12950
<12950=12952,12951
<12953=12955,12954
<12955=12957,12956
<12957=12959,12958
<12960=12961
<12961=12984,12962
<12962=12982,12963
<12963=12964
<12964=12965
<12965=12971,12966
<12966=12968,12967
<12968=12970,12969
<12971=12977,12972
<12972=12974,12973
<12974=12976,12975
<12977=12979,12978
<12979=12981,12980
<12982=12983
<12984=12990,12985
<12985=12987,12986
<12987=12989,12988
<12990=12992,12991
<12992=12994,12993
<12995=12996
<12996=13019,12997
<12997=13017,12998
<12998=12999
<12999=13000
<13000=13006,13001
<13001=13003,13002
<13003=13005,13004
<13006=13012,13007
<13007=13009,13008
<13009=13011,13010
<13012=13014,13013
<13014=13016,13015
<13017=13018
<13019=13025,13020
<13020=13022,13021
<13022=13024,13023
<13025=13027,13026
<13027=13029,13028
<13030=13031
<13031=13035,13032
<13032=13034,13033
<13035=13037,13036
<13037=13039,13038
<13039=13041,13040
<13042=13043
<13043=13055,13044
<13044=13050,13045
<13045=13047,13046
<13047=13049,13048
<13050=13052,13051
<13052=13054,13053
<13055=13061,13056
<13056=13058,13057
<13058=13060,13059
<13061=13063,13062
<13063=13065,13064
<13066=13067
<13067=13079,13068
<13068=13074,13069
<13069=13071,13070
<13071=13073,13072
<13074=13076,13075
<13076=13078,13077
<13079=13085,13080
<13080=13082,13081
<13082=13084,13083
<13085=13087,13086
<13087=13089,13088
<13090=13091
<13091=13095,13092
<13092=13094,13093
<13095=13097,13096
<13097=13099,13098
<13099=13101,13100
<13102=13103
<13103=13122,13104
<13104=13120,13105
<13105=13106
<13106=13107
<13107=13113,13108
<13108=13110,13109
<13110=13112,13111
<13113=13119,13114
<13114=13116,13115
<13116=13118,13117
<13120=13121
<13122=13128,13123
<13123=13125,13124
<13125=13127,13126
<13128=13130,13129
<13130=13132,13131
<13133=13134
<13134=13153,13135
<13135=13151,13136
<13136=13137
<13137=13138
<13138=13144,13139
<13139=13141,13140
<13141=13143,13142
<13144=13150,13145
<13145=13147,13146
<13147=13149,13148
<13151=13152
<13153=13159,13154
<13154=13156,13155
<13156=13158,13157
<13159=13161,13160
<13161=13163,13162
<13164=13165
<13165=13178,13166
<13166=13176,13167
<13167=13168
<13168=13169
<13169=13175,13170
<13170=13174,13171
<13171=13173,13172
<13176=13177
<13179=13180
<13180=13193,13181
<13181=13191,13182
<13182=13183
<13183=13184
<13184=13190,13185
<13185=13189,13186
<13186=13188,13187
<13191=13192
<13194=13195
<13195=13197,13196
<13197=13199,13198
<13200=13201
<13201=13205,13202
<13202=13204,13203
<13205=13207,13206
<13208=13209
<13209=13213,13210
<13210=13212,13211
<13213=13215,13214
<13216=13217
<13217=13222,13218
<13218=13220,13219
<13220=13221
<13223=13225,13224
<13226=13227
<13227=13229,13228
<13230=13231
<13231=13233,13232
<13234=13235
<13235=13239,13236
<13236=13238,13237
<13239=13241,13240
<13241=13243,13242
<13243=13245,13244
<13246=13247
<13247=13255,13248
<13248=13254,13249
<13249=13251,13250
<13251=13253,13252
<13255=13261,13256
<13256=13258,13257
<13258=13260,13259
<13261=13263,13262
<13263=13265,13264
<13266=13267
<13267=13275,13268
<13268=13274,13269
<13269=13271,13270
<13271=13273,13272
<13275=13281,13276
<13276=13278,13277
<13278=13280,13279
<13281=13283,13282
<13283=13285,13284
<13286=13287
<13287=13291,13288
<13288=13290,13289
<13291=13293,13292
<13293=13295,13294
<13295=13297,13296
<13298=13299
<13299=13307,13300
<13300=13306,13301
<13301=13303,13302
<13303=13305,13304
<13307=13313,13308
<13308=13310,13309
<13310=13312,13311
<13313=13315,13314
<13315=13317,13316
<13318=13319
<13319=13327,13320
<13320=13326,13321
<13321=13323,13322
<13323=13325,13324
<13327=13333,13328
<13328=13330,13329
<13330=13332,13331
<13333=13335,13334
<13335=13337,13336
<13338=13339
<13339=13343,13340
<13340=13342,13341
<13343=13345,13344
<13345=13347,13346
<13347=13349,13348
<13350=13351
<13351=13359,13352
<13352=13358,13353
<13353=13355,13354
<13355=13357,13356
<13359=13365,13360
<13360=13362,13361
<13362=13364,13363
<13365=13367,13366
<13367=13369,13368
<13370=13371
<13371=13379,13372
<13372=13378,13373
<13373=13375,13374
<13375=13377,13376
<13379=13385,13380
<13380=13382,13381
<13382=13384,13383
<13385=13387,13386
<13387=13389,13388
<13390=13391
<13391=13393,13392
<13393=13395,13394
<13396=13397
<13397=13401,13398
<13398=13400,13399
<13401=13403,13402
<13404=13405
<13405=13409,13406
<13406=13408,13407
<13409=13411,13410
<13412=13413
<13413=13418,13414
<13414=13416,13415
<13416=13417
<13419=13420
<13420=13424,13421
<13421=13423,13422
<13424=13426,13425
<13426=13428,13427
<13428=13430,13429
<13431=13432
<13432=13440,13433
<13433=13439,13434
<13434=13436,13435
<13436=13438,13437
<13440=13446,13441
<13441=13443,13442
<13443=13445,13444
<13446=13448,13447
<13448=13450,13449
<13451=13452
<13452=13460,13453
<13453=13459,13454
<13454=13456,13455
<13456=13458,13457
<13460=13466,13461
<13461=13463,13462
<13463=13465,13464
<13466=13468,13467
<13468=13470,13469
<13471=13472
<13472=13476,13473
<13473=13475,13474
<13476=13478,13477
<13478=13480,13479
<13480=13482,13481
<13483=13484
<13484=13492,13485
<13485=13491,13486
<13486=13488,13487
<13488=13490,13489
<13492=13498,13493
<13493=13495,13494
<13495=13497,13496
<13498=13500,13499
<13500=13502,13501
<13503=13504
<13504=13512,13505
<13505=13511,13506
<13506=13508,13507
<13508=13510,13509
<13512=13518,13513
<13513=13515,13514
<13515=13517,13516
<13518=13520,13519
<13520=13522,13521
<13523=13524
<13524=13528,13525
<13525=13527,13526
<13528=13530,13529
<13530=13532,13531
<13532=13534,13533
<13535=13536
<13536=13544,13537
<13537=13543,13538
<13538=13540,13539
<13540=13542,13541
<13544=13550,13545
<13545=13547,13546
<13547=13549,13548
<13550=13552,13551
<13552=13554,13553
<13555=13556
<13556=13564,13557
<13557=13563,13558
<13558=13560,13559
<13560=13562,13561
<13564=13570,13565
<13565=13567,13566
<13567=13569,13568
<13570=13572,13571
<13572=13574,13573
<13575=13576
<13576=13578,13577
<13578=13580,13579
<13581=13582
<13582=13586,13583
<13583=13585,13584
<13586=13588,13587
<13589=13590
<13590=13594,13591
<13591=13593,13592
<13594=13596,13595
<13597=13598
<13598=13603,13599
<13599=13601,13600
<13601=13602
<13604=13605
<13605=13610,13606
<13606=13608,13607
<13608=13609
<13611=13665,13661,13658,13612
<13612=13644,13638,13613
<13613=13626,13614
<13614=13615
<13615=13625,13616
<13616=13618,13617
<13618=13622,13619
<13619=13621,13620
<13622=13624,13623
<13626=13627
<13627=13629,13628
<13629=13631,13630
<13631=13635,13632
<13632=13634,13633
<13635=13637,13636
<13638=13640,13639
<13640=13641
<13641=13643,13642
<13644=13645
<13645=13655,13646
<13646=13648,13647
<13648=13652,13649
<13649=13651,13650
<13652=13654,13653
<13655=13657,13656
<13658=13660,13659
<13661=13662
<13662=13664,13663
<13665=13666
<13666=13668,13667
<13669=13670
<13670=13672,13671
<13673=13716,13680,13674
<13674=13675
<13675=13676
<13676=13677
<13677=13679,13678
<13680=13681
<13681=13704,13682
<13682=13702,13698,13697,13695,13691,13690,13688,13684,13683
<13684=13685
<13685=13687,13686
<13688=13689
<13691=13692
<13692=13694,13693
<13695=13696
<13698=13699
<13699=13701,13700
<13702=13703
<13704=13705
<13705=13707,13706
<13707=13708
<13708=13710,13709
<13710=13712,13711
<13712=13713
<13713=13715,13714
<13716=13717
<13717=13719,13718
<13719=13720
<13720=13722,13721
<13723=13724
<13724=13728,13725
<13725=13726
<13726=13727
<13728=13729
<13730=13731
<13731=13739,13732
<13732=13738,13733
<13733=13735,13734
<13735=13737,13736
<13740=13741
<13741=13749,13742
<13742=13745,13743
<13743=13744
<13745=13746
<13746=13748,13747
<13749=13750
<13751=13752
<13752=13760,13753
<13753=13756,13754
<13754=13755
<13756=13757
<13757=13759,13758
<13760=13761
<13762=13763
<13763=13767,13764
<13764=13766,13765
<13768=13780,13769
<13769=13771,13770
<13771=13772
<13772=13778,13773
<13773=13776,13774
<13774=13775
<13776=13777
<13778=13779
<13780=13781
<13781=13786,13782
<13782=13784,13783
<13784=13785
<13787=13797,13788
<13788=13790,13789
<13790=13791
<13791=13795,13792
<13792=13793
<13793=13794
<13795=13796
<13797=13798
<13798=13802,13799
<13799=13801,13800
<13803=13815,13804
<13804=13806,13805
<13806=13807
<13807=13813,13808
<13808=13811,13809
<13809=13810
<13811=13812
<13813=13814
<13815=13816
<13816=13818,13817
<13819=13823,13820
<13820=13822,13821
<13823=13825,13824
<13826=13827
<13827=13829,13828
<13830=13831
<13831=13833,13832
<13834=13835
<13835=13837,13836
<13838=13839
<13839=13841,13840
<13842=13843
<13843=13845,13844
<13846=13850,13847
<13847=13849,13848
<13850=13852,13851
<13853=13857,13854
<13854=13856,13855
<13857=13859,13858
<13916=13925,13924,13917
<13917=13921,13918
<13918=13920,13919
<13921=13923,13922
<13925=14074,14067,14057,14042,14027,14001,13957,13945,13933,13926
<13926=13927
<13927=13931,13928
<13928=13929
<13929=13930
<13931=13932
<13933=13941,13934
<13934=13935
<13935=13939,13936
<13936=13937
<13937=13938
<13939=13940
<13941=13942
<13942=13944,13943
<13945=13953,13946
<13946=13947
<13947=13951,13948
<13948=13949
<13949=13950
<13951=13952
<13953=13954
<13954=13956,13955
<13957=13995,13993,13990,13958
<13958=13984,13975,13966,13959
<13959=13960
<13960=13964,13961
<13961=13962
<13962=13963
<13964=13965
<13966=13967
<13967=13973,13968
<13968=13969
<13969=13970
<13970=13972,13971
<13973=13974
<13975=13976
<13976=13982,13977
<13977=13978
<13978=13979
<13979=13981,13980
<13982=13983
<13984=13985
<13985=13989,13986
<13986=13988,13987
<13990=13992,13991
<13993=13994
<13995=13996
<13996=14000,13997
<13997=13999,13998
<14001=14021,14019,14016,14002
<14002=14010,14003
<14003=14004
<14004=14008,14005
<14005=14006
<14006=14007
<14008=14009
<14010=14011
<14011=14015,14012
<14012=14014,14013
<14016=14018,14017
<14019=14020
<14021=14022
<14022=14026,14023
<14023=14025,14024
<14027=14038,14028
<14028=14029
<14029=14030
<14030=14036,14031
<14031=14032
<14032=14033
<14033=14035,14034
<14036=14037
<14038=14039
<14039=14041,14040
<14042=14053,14043
<14043=14044
<14044=14045
<14045=14051,14046
<14046=14047
<14047=14048
<14048=14050,14049
<14051=14052
<14053=14054
<14054=14056,14055
<14057=14065,14058
<14058=14059
<14059=14063,14060
<14060=14061
<14061=14062
<14063=14064
<14065=14066
<14067=14071,14068
<14068=14070,14069
<14071=14073,14072
<14074=14078,14075
<14075=14077,14076
<14078=14080,14079
<14105=14111,14110,14106
<14106=14107
<14107=14109,14108
<14111=14140,14123,14114,14112
<14112=14113
<14114=14115
<14115=14122,14116
<14116=14120,14117
<14117=14118
<14118=14119
<14120=14121
<14123=14136,14124
<14124=14125
<14125=14126
<14126=14135,14127
<14127=14133,14128
<14128=14129
<14129=14130
<14130=14132,14131
<14133=14134
<14136=14137
<14137=14139,14138
<14140=14141
<14141=14146,14145,14142
<14142=14144,14143
<14155=14161,14160,14156
<14156=14157
<14157=14159,14158
<14161=14288,14284,14277,14260,14243,14219,14173,14164,14162
<14162=14163
<14164=14165
<14165=14172,14166
<14166=14170,14167
<14167=14168
<14168=14169
<14170=14171
<14173=14213,14211,14206,14174
<14174=14195,14184,14175
<14175=14176
<14176=14183,14177
<14177=14181,14178
<14178=14179
<14179=14180
<14181=14182
<14184=14185
<14185=14194,14186
<14186=14192,14187
<14187=14188
<14188=14189
<14189=14191,14190
<14192=14193
<14195=14196
<14196=14205,14197
<14197=14203,14198
<14198=14199
<14199=14200
<14200=14202,14201
<14203=14204
<14206=14210,14207
<14207=14209,14208
<14211=14212
<14213=14214
<14214=14218,14215
<14215=14217,14216
<14219=14237,14235,14230,14220
<14220=14221
<14221=14222
<14222=14229,14223
<14223=14227,14224
<14224=14225
<14225=14226
<14227=14228
<14230=14234,14231
<14231=14233,14232
<14235=14236
<14237=14238
<14238=14242,14239
<14239=14241,14240
<14243=14256,14244
<14244=14245
<14245=14246
<14246=14255,14247
<14247=14253,14248
<14248=14249
<14249=14250
<14250=14252,14251
<14253=14254
<14256=14257
<14257=14259,14258
<14260=14273,14261
<14261=14262
<14262=14263
<14263=14272,14264
<14264=14270,14265
<14265=14266
<14266=14267
<14267=14269,14268
<14270=14271
<14273=14274
<14274=14276,14275
<14277=14278
<14278=14283,14282,14279
<14279=14281,14280
<14284=14285
<14285=14287,14286
<14288=14289
<14289=14291,14290
<14316=14322,14321,14317
<14317=14318
<14318=14320,14319
<14322=14484,14477,14325,14323
<14323=14324
<14325=14473,14434,14326
<14326=14327
<14327=14430,14391,14328
<14328=14329
<14329=14384,14376,14368,14330
<14330=14362,14360,14355,14331
<14331=14346,14338,14332
<14332=14333
<14333=14335,14334
<14335=14337,14336
<14338=14339
<14339=14343,14340
<14340=14342,14341
<14343=14345,14344
<14346=14347
<14347=14354,14348
<14348=14352,14349
<14349=14350
<14350=14351
<14352=14353
<14355=14359,14356
<14356=14358,14357
<14360=14361
<14362=14363
<14363=14367,14364
<14364=14366,14365
<14368=14369
<14369=14373,14370
<14370=14372,14371
<14373=14375,14374
<14376=14377
<14377=14381,14378
<14378=14380,14379
<14381=14383,14382
<14384=14385
<14385=14390,14386
<14386=14388,14387
<14388=14389
<14391=14416,14407,14398,14392
<14392=14393
<14393=14397,14394
<14394=14396,14395
<14398=14399
<14399=14405,14400
<14400=14401
<14401=14402
<14402=14404,14403
<14405=14406
<14407=14408
<14408=14414,14409
<14409=14410
<14410=14411
<14411=14413,14412
<14414=14415
<14416=14417
<14417=14429,14428,14418
<14418=14427,14419
<14419=14425,14420
<14420=14421
<14421=14422
<14422=14424,14423
<14425=14426
<14430=14431
<14431=14433,14432
<14434=14459,14450,14441,14435
<14435=14436
<14436=14440,14437
<14437=14439,14438
<14441=14442
<14442=14448,14443
<14443=14444
<14444=14445
<14445=14447,14446
<14448=14449
<14450=14451
<14451=14457,14452
<14452=14453
<14453=14454
<14454=14456,14455
<14457=14458
<14459=14460
<14460=14472,14471,14461
<14461=14470,14462
<14462=14468,14463
<14463=14464
<14464=14465
<14465=14467,14466
<14468=14469
<14473=14474
<14474=14476,14475
<14477=14481,14478
<14478=14480,14479
<14481=14483,14482
<14484=14485
<14485=14490,14489,14486
<14486=14488,14487
<14522=14528,14527,14523
<14523=14524
<14524=14526,14525
<14528=14899,14886,14882,14531,14529
<14529=14530
<14531=14878,14824,14532
<14532=14533
<14533=14820,14766,14534
<14534=14535
<14535=14759,14751,14743,14730,14717,14621,14536
<14536=14615,14613,14608,14537
<14537=14597,14538
<14538=14593,14539
<14539=14540
<14540=14589,14578,14541
<14541=14542
<14542=14543
<14543=14574,14566,14563,14544
<14544=14545
<14545=14561,14546
<14546=14553,14549,14547
<14547=14548
<14549=14550
<14550=14552,14551
<14553=14554
<14554=14556,14555
<14556=14558,14557
<14558=14560,14559
<14561=14562
<14563=14565,14564
<14566=14567
<14567=14573,14568
<14568=14570,14569
<14570=14572,14571
<14574=14575
<14575=14577,14576
<14578=14579
<14579=14587,14580
<14580=14585,14581
<14581=14582
<14582=14584,14583
<14585=14586
<14587=14588
<14589=14590
<14590=14592,14591
<14593=14594
<14594=14596,14595
<14597=14598
<14598=14606,14599
<14599=14604,14602,14600
<14600=14601
<14602=14603
<14604=14605
<14606=14607
<14608=14612,14609
<14609=14611,14610
<14613=14614
<14615=14616
<14616=14620,14617
<14617=14619,14618
<14621=14711,14709,14704,14622
<14622=14698,14689,14681,14675,14623
<14623=14669,14667,14662,14624
<14624=14625
<14625=14656,14626
<14626=14647,14639,14633,14627
<14627=14628
<14628=14630,14629
<14630=14632,14631
<14633=14634
<14634=14636,14635
<14636=14638,14637
<14639=14640
<14640=14644,14641
<14641=14643,14642
<14644=14646,14645
<14647=14648
<14648=14655,14649
<14649=14653,14650
<14650=14651
<14651=14652
<14653=14654
<14656=14657
<14657=14659,14658
<14659=14661,14660
<14662=14666,14663
<14663=14665,14664
<14667=14668
<14669=14670
<14670=14674,14671
<14671=14673,14672
<14675=14676
<14676=14678,14677
<14678=14680,14679
<14681=14682
<14682=14686,14683
<14683=14685,14684
<14686=14688,14687
<14689=14690
<14690=14697,14691
<14691=14695,14692
<14692=14693
<14693=14694
<14695=14696
<14698=14700,14699
<14700=14701
<14701=14703,14702
<14704=14708,14705
<14705=14707,14706
<14709=14710
<14711=14712
<14712=14716,14713
<14713=14715,14714
<14717=14718
<14718=14728,14719
<14719=14724,14720
<14720=14721
<14721=14723,14722
<14724=14725
<14725=14727,14726
<14728=14729
<14730=14731
<14731=14741,14732
<14732=14737,14733
<14733=14734
<14734=14736,14735
<14737=14738
<14738=14740,14739
<14741=14742
<14743=14744
<14744=14748,14745
<14745=14747,14746
<14748=14750,14749
<14751=14752
<14752=14756,14753
<14753=14755,14754
<14756=14758,14757
<14759=14760
<14760=14765,14761
<14761=14763,14762
<14763=14764
<14766=14806,14797,14788,14782,14774,14767
<14767=14768
<14768=14772,14769
<14769=14770
<14770=14771
<14772=14773
<14774=14775
<14775=14779,14776
<14776=14778,14777
<14779=14781,14780
<14782=14783
<14783=14787,14784
<14784=14786,14785
<14788=14789
<14789=14795,14790
<14790=14791
<14791=14792
<14792=14794,14793
<14795=14796
<14797=14798
<14798=14804,14799
<14799=14800
<14800=14801
<14801=14803,14802
<14804=14805
<14806=14807
<14807=14819,14818,14808
<14808=14817,14809
<14809=14815,14810
<14810=14811
<14811=14812
<14812=14814,14813
<14815=14816
<14820=14821
<14821=14823,14822
<14824=14864,14855,14846,14840,14832,14825
<14825=14826
<14826=14830,14827
<14827=14828
<14828=14829
<14830=14831
<14832=14833
<14833=14837,14834
<14834=14836,14835
<14837=14839,14838
<14840=14841
<14841=14845,14842
<14842=14844,14843
<14846=14847
<14847=14853,14848
<14848=14849
<14849=14850
<14850=14852,14851
<14853=14854
<14855=14856
<14856=14862,14857
<14857=14858
<14858=14859
<14859=14861,14860
<14862=14863
<14864=14865
<14865=14877,14876,14866
<14866=14875,14867
<14867=14873,14868
<14868=14869
<14869=14870
<14870=14872,14871
<14873=14874
<14878=14879
<14879=14881,14880
<14882=14883
<14883=14885,14884
<14886=14896,14893,14890,14887
<14887=14889,14888
<14890=14892,14891
<14893=14895,14894
<14896=14898,14897
<14899=14900
<14900=14905,14904,14901
<14901=14903,14902
<14963=14978,14977,14964
<14964=14974,14971,14968,14965
<14965=14967,14966
<14968=14970,14969
<14971=14973,14972
<14974=14976,14975
<14978=15230,15223,15213,15209,15200,15174,15009,14998,14987,14981,14979
<14979=14980
<14981=14982
<14982=14984,14983
<14984=14986,14985
<14987=14988
<14988=14997,14989
<14989=14995,14990
<14990=14993,14991
<14991=14992
<14993=14994
<14995=14996
<14998=14999
<14999=15007,15000
<15000=15005,15003,15001
<15001=15002
<15003=15004
<15005=15006
<15007=15008
<15009=15168,15166,15161,15010
<15010=15140,15119,15101,15091,15083,15011
<15011=15079,15044,15012
<15012=15013
<15013=15014
<15014=15040,15036,15033,15015
<15015=15016
<15016=15030,15017
<15017=15027,15018
<15018=15026,15019
<15019=15023,15020
<15020=15022,15021
<15023=15025,15024
<15027=15029,15028
<15030=15032,15031
<15033=15035,15034
<15036=15037
<15037=15039,15038
<15040=15041
<15041=15043,15042
<15044=15075,15045
<15045=15071,15067,15064,15046
<15046=15047
<15047=15061,15048
<15048=15058,15049
<15049=15057,15050
<15050=15054,15051
<15051=15053,15052
<15054=15056,15055
<15058=15060,15059
<15061=15063,15062
<15064=15066,15065
<15067=15068
<15068=15070,15069
<15071=15072
<15072=15074,15073
<15075=15076
<15076=15078,15077
<15079=15080
<15080=15082,15081
<15083=15084
<15084=15090,15085
<15085=15089,15086
<15086=15088,15087
<15091=15093,15092
<15093=15094
<15094=15098,15095
<15095=15097,15096
<15098=15100,15099
<15101=15111,15102
<15102=15105,15103
<15103=15104
<15105=15106
<15106=15108,15107
<15108=15110,15109
<15111=15112
<15112=15116,15113
<15113=15115,15114
<15116=15118,15117
<15119=15120
<15120=15139,15121
<15121=15127,15122
<15122=15124,15123
<15124=15126,15125
<15127=15137,15128
<15128=15135,15129
<15129=15130
<15130=15132,15131
<15132=15134,15133
<15135=15136
<15137=15138
<15140=15141
<15141=15160,15142
<15142=15148,15143
<15143=15145,15144
<15145=15147,15146
<15148=15158,15149
<15149=15156,15150
<15150=15151
<15151=15153,15152
<15153=15155,15154
<15156=15157
<15158=15159
<15161=15165,15162
<15162=15164,15163
<15166=15167
<15168=15169
<15169=15173,15170
<15170=15172,15171
<15174=15196,15192,15189,15175
<15175=15176
<15176=15186,15177
<15177=15183,15178
<15178=15180,15179
<15180=15182,15181
<15183=15185,15184
<15186=15188,15187
<15189=15191,15190
<15192=15193
<15193=15195,15194
<15196=15197
<15197=15199,15198
<15200=15201
<15201=15207,15202
<15202=15205,15203
<15203=15204
<15205=15206
<15207=15208
<15209=15210
<15210=15212,15211
<15213=15220,15217,15214
<15214=15216,15215
<15217=15219,15218
<15220=15222,15221
<15223=15227,15224
<15224=15226,15225
<15227=15229,15228
<15230=15234,15231
<15231=15233,15232
<15234=15236,15235
<15266=15275,15274,15267
<15267=15271,15268
<15268=15270,15269
<15271=15273,15272
<15275=15328,15324,15280,15276
<15276=15277
<15277=15279,15278
<15280=15318,15316,15311,15281
<15281=15290,15282
<15282=15286,15283
<15283=15284
<15284=15285
<15286=15287
<15287=15289,15288
<15290=15291
<15291=15310,15292
<15292=15298,15293
<15293=15295,15294
<15295=15297,15296
<15298=15308,15299
<15299=15306,15300
<15300=15301
<15301=15303,15302
<15303=15305,15304
<15306=15307
<15308=15309
<15311=15315,15312
<15312=15314,15313
<15316=15317
<15318=15319
<15319=15323,15320
<15320=15322,15321
<15324=15325
<15325=15327,15326
<15328=15329
<15329=15331,15330
<15348=15357,15356,15349
<15349=15353,15350
<15350=15352,15351
<15353=15355,15354
<15357=15449,15393,15385,15377,15371,15365,15358
<15358=15359
<15359=15363,15360
<15360=15361
<15361=15362
<15363=15364
<15365=15366
<15366=15368,15367
<15368=15370,15369
<15371=15372
<15372=15374,15373
<15374=15376,15375
<15377=15378
<15378=15380,15379
<15380=15382,15381
<15382=15384,15383
<15385=15386
<15386=15390,15387
<15387=15389,15388
<15390=15392,15391
<15393=15437,15394
<15394=15416,15395
<15395=15406,15396
<15396=15397
<15397=15398
<15398=15404,15399
<15399=15400
<15400=15401
<15401=15403,15402
<15404=15405
<15406=15407
<15407=15413,15408
<15408=15412,15409
<15409=15411,15410
<15413=15415,15414
<15416=15427,15417
<15417=15418
<15418=15419
<15419=15425,15420
<15420=15421
<15421=15422
<15422=15424,15423
<15425=15426
<15427=15428
<15428=15434,15429
<15429=15433,15430
<15430=15432,15431
<15434=15436,15435
<15437=15438
<15438=15444,15439
<15439=15443,15440
<15440=15442,15441
<15444=15448,15445
<15445=15447,15446
<15449=15457,15450
<15450=15451
<15451=15455,15452
<15452=15453
<15453=15454
<15455=15456
<15457=15458
<15458=15462,15459
<15459=15461,15460
<15462=15464,15463
<15485=15491,15490,15486
<15486=15487
<15487=15489,15488
<15491=15552,15537,15522,15512,15502,15492
<15492=15493
<15493=15499,15494
<15494=15496,15495
<15496=15498,15497
<15499=15501,15500
<15502=15503
<15503=15507,15504
<15504=15506,15505
<15507=15509,15508
<15509=15511,15510
<15512=15513
<15513=15517,15514
<15514=15516,15515
<15517=15519,15518
<15519=15521,15520
<15522=15533,15523
<15523=15524
<15524=15525
<15525=15531,15526
<15526=15527
<15527=15528
<15528=15530,15529
<15531=15532
<15533=15534
<15534=15536,15535
<15537=15548,15538
<15538=15539
<15539=15540
<15540=15546,15541
<15541=15542
<15542=15543
<15543=15545,15544
<15546=15547
<15548=15549
<15549=15551,15550
<15552=15560,15553
<15553=15554
<15554=15558,15555
<15555=15556
<15556=15557
<15558=15559
<15560=15561
<15561=15567,15562
<15562=15566,15563
<15563=15565,15564
<15567=15571,15568
<15568=15570,15569
<15589=15610,15609,15590
<15590=15606,15603,15600,15597,15594,15591
<15591=15593,15592
<15594=15596,15595
<15597=15599,15598
<15600=15602,15601
<15603=15605,15604
<15606=15608,15607
<15610=15990,15986,15982,15974,15966,15769,15751,15733,15653,15611
<15611=15645,15612
<15612=15613
<15613=15639,15637,15632,15614
<15614=15615
<15615=15624,15616
<15616=15617
<15617=15621,15618
<15618=15620,15619
<15621=15623,15622
<15624=15625
<15625=15627,15626
<15627=15629,15628
<15629=15631,15630
<15632=15636,15633
<15633=15635,15634
<15637=15638
<15639=15640
<15640=15644,15641
<15641=15643,15642
<15645=15646
<15646=15648,15647
<15648=15650,15649
<15650=15652,15651
<15653=15729,15654
<15654=15702,15695,15661,15655
<15655=15656
<15656=15658,15657
<15658=15660,15659
<15661=15693,15674,15662
<15662=15663
<15663=15664
<15664=15673,15665
<15665=15669,15666
<15666=15667
<15667=15668
<15669=15670
<15670=15672,15671
<15674=15684,15675
<15675=15676
<15676=15680,15677
<15677=15678
<15678=15679
<15680=15681
<15681=15683,15682
<15684=15685
<15685=15692,15686
<15686=15688,15687
<15688=15689
<15689=15691,15690
<15693=15694
<15695=15696
<15696=15701,15700,15697
<15697=15699,15698
<15702=15723,15716,15703
<15703=15704
<15704=15705
<15705=15707,15706
<15707=15708
<15708=15710,15709
<15710=15714,15711
<15711=15712
<15712=15713
<15714=15715
<15716=15717
<15717=15721,15718
<15718=15719
<15719=15720
<15721=15722
<15723=15724
<15724=15728,15725
<15725=15727,15726
<15729=15730
<15730=15732,15731
<15733=15734
<15734=15746,15735
<15735=15739,15736
<15736=15738,15737
<15739=15741,15740
<15741=15743,15742
<15743=15745,15744
<15746=15748,15747
<15748=15750,15749
<15751=15752
<15752=15764,15753
<15753=15757,15754
<15754=15756,15755
<15757=15759,15758
<15759=15761,15760
<15761=15763,15762
<15764=15766,15765
<15766=15768,15767
<15769=15962,15927,15770
<15770=15771
<15771=15925,15781,15772
<15772=15773
<15773=15774
<15774=15778,15775
<15775=15777,15776
<15778=15780,15779
<15781=15917,15907,15894,15887,15876,15869,15858,15851,15836,15821,15810,15799,15782
<15782=15783
<15783=15797,15784
<15784=15793,15791,15789,15787,15785
<15785=15786
<15787=15788
<15789=15790
<15791=15792
<15793=15794
<15794=15796,15795
<15797=15798
<15799=15800
<15800=15808,15801
<15801=15806,15804,15802
<15802=15803
<15804=15805
<15806=15807
<15808=15809
<15810=15811
<15811=15819,15812
<15812=15817,15815,15813
<15813=15814
<15815=15816
<15817=15818
<15819=15820
<15821=15822
<15822=15834,15823
<15823=15832,15826,15824
<15824=15825
<15826=15827
<15827=15829,15828
<15829=15831,15830
<15832=15833
<15834=15835
<15836=15837
<15837=15849,15838
<15838=15847,15841,15839
<15839=15840
<15841=15842
<15842=15844,15843
<15844=15846,15845
<15847=15848
<15849=15850
<15851=15852
<15852=15856,15853
<15853=15854
<15854=15855
<15856=15857
<15858=15859
<15859=15867,15860
<15860=15865,15863,15861
<15861=15862
<15863=15864
<15865=15866
<15867=15868
<15869=15870
<15870=15874,15871
<15871=15872
<15872=15873
<15874=15875
<15876=15877
<15877=15885,15878
<15878=15883,15881,15879
<15879=15880
<15881=15882
<15883=15884
<15885=15886
<15887=15891,15888
<15888=15890,15889
<15891=15893,15892
<15894=15895
<15895=15905,15896
<15896=15903,15901,15899,15897
<15897=15898
<15899=15900
<15901=15902
<15903=15904
<15905=15906
<15907=15914,15911,15908
<15908=15910,15909
<15911=15913,15912
<15914=15916,15915
<15917=15918
<15918=15922,15919
<15919=15921,15920
<15922=15924,15923
<15925=15926
<15927=15954,15928
<15928=15929
<15929=15952,15930
<15930=15950,15948,15942,15931
<15931=15932
<15932=15940,15933
<15933=15934
<15934=15935
<15935=15937,15936
<15937=15939,15938
<15940=15941
<15942=15943
<15943=15947,15944
<15944=15946,15945
<15948=15949
<15950=15951
<15952=15953
<15954=15955
<15955=15959,15956
<15956=15958,15957
<15959=15961,15960
<15962=15963
<15963=15965,15964
<15966=15967
<15967=15973,15968
<15968=15970,15969
<15970=15972,15971
<15974=15975
<15975=15981,15976
<15976=15978,15977
<15978=15980,15979
<15982=15983
<15983=15985,15984
<15986=15987
<15987=15989,15988
<15990=15991
<15991=15993,15992
<16046=16064,16063,16047
<16047=16060,16057,16054,16051,16048
<16048=16050,16049
<16051=16053,16052
<16054=16056,16055
<16057=16059,16058
<16060=16062,16061
<16064=16108,16101,16082,16065
<16065=16078,16066
<16066=16067
<16067=16068
<16068=16076,16069
<16069=16072,16070
<16070=16071
<16072=16073
<16073=16075,16074
<16076=16077
<16078=16079
<16079=16081,16080
<16082=16097,16083
<16083=16084
<16084=16085
<16085=16095,16086
<16086=16091,16089,16087
<16087=16088
<16089=16090
<16091=16092
<16092=16094,16093
<16095=16096
<16097=16098
<16098=16100,16099
<16101=16102
<16102=16106,16103
<16103=16104
<16104=16105
<16106=16107
<16108=16134,16132,16127,16109
<16109=16110
<16110=16111
<16111=16125,16112
<16112=16123,16121,16119,16117,16115,16113
<16113=16114
<16115=16116
<16117=16118
<16119=16120
<16121=16122
<16123=16124
<16125=16126
<16127=16131,16128
<16128=16130,16129
<16132=16133
<16134=16135
<16135=16136
<16136=16143,16142,16137
<16137=16141,16138
<16138=16140,16139
<16161=16173,16172,16162
<16162=16169,16166,16163
<16163=16165,16164
<16166=16168,16167
<16169=16171,16170
<16173=16300,16296,16292,16271,16250,16239,16228,16220,16206,16176,16174
<16174=16175
<16176=16202,16198,16195,16177
<16177=16178
<16178=16192,16179
<16179=16189,16180
<16180=16188,16181
<16181=16185,16182
<16182=16184,16183
<16185=16187,16186
<16189=16191,16190
<16192=16194,16193
<16195=16197,16196
<16198=16199
<16199=16201,16200
<16202=16203
<16203=16205,16204
<16206=16216,16212,16207
<16207=16208
<16208=16209
<16209=16211,16210
<16212=16213
<16213=16215,16214
<16216=16217
<16217=16219,16218
<16220=16221
<16221=16227,16222
<16222=16226,16223
<16223=16225,16224
<16228=16231,16229
<16229=16230
<16231=16232
<16232=16236,16233
<16233=16235,16234
<16236=16238,16237
<16239=16242,16240
<16240=16241
<16242=16243
<16243=16247,16244
<16244=16246,16245
<16247=16249,16248
<16250=16251
<16251=16270,16252
<16252=16258,16253
<16253=16255,16254
<16255=16257,16256
<16258=16268,16259
<16259=16266,16260
<16260=16261
<16261=16263,16262
<16263=16265,16264
<16266=16267
<16268=16269
<16271=16272
<16272=16291,16273
<16273=16279,16274
<16274=16276,16275
<16276=16278,16277
<16279=16289,16280
<16280=16287,16281
<16281=16282
<16282=16284,16283
<16284=16286,16285
<16287=16288
<16289=16290
<16292=16293
<16293=16295,16294
<16296=16297
<16297=16299,16298
<16300=16307,16304,16301
<16301=16303,16302
<16304=16306,16305
<16307=16309,16308
<16332=16338,16337,16333
<16333=16334
<16334=16336,16335
<16338=16378,16353,16341,16339
<16339=16340
<16341=16342
<16342=16344,16343
<16344=16350,16345
<16345=16347,16346
<16347=16349,16348
<16350=16352,16351
<16353=16374,16368,16365,16354
<16354=16357,16355
<16355=16356
<16357=16358
<16358=16360,16359
<16360=16362,16361
<16362=16364,16363
<16365=16367,16366
<16368=16369
<16369=16373,16370
<16370=16372,16371
<16374=16375
<16375=16377,16376
<16378=16379
<16379=16381,16380
<16394=16406,16405,16395
<16395=16402,16399,16396
<16396=16398,16397
<16399=16401,16400
<16402=16404,16403
<16406=16874,16870,16866,16862,16858,16854,16844,16840,16815,16809,16707,16701,16407
<16407=16695,16693,16688,16408
<16408=16682,16671,16665,16613,16416,16409
<16409=16410
<16410=16414,16411
<16411=16412
<16412=16413
<16414=16415
<16416=16607,16417
<16417=16553,16542,16525,16512,16487,16465,16448,16435,16418
<16418=16419
<16419=16433,16420
<16420=16427,16421
<16421=16422
<16422=16424,16423
<16424=16426,16425
<16427=16428
<16428=16430,16429
<16430=16432,16431
<16433=16434
<16435=16440,16436
<16436=16437
<16437=16439,16438
<16440=16441
<16441=16445,16442
<16442=16444,16443
<16445=16447,16446
<16448=16449
<16449=16463,16450
<16450=16457,16451
<16451=16452
<16452=16454,16453
<16454=16456,16455
<16457=16458
<16458=16460,16459
<16460=16462,16461
<16463=16464
<16465=16477,16466
<16466=16467
<16467=16475,16468
<16468=16469
<16469=16470
<16470=16472,16471
<16472=16474,16473
<16475=16476
<16477=16478
<16478=16482,16479
<16479=16481,16480
<16482=16486,16483
<16483=16485,16484
<16487=16488
<16488=16511,16489
<16489=16495,16490
<16490=16492,16491
<16492=16494,16493
<16495=16509,16496
<16496=16503,16497
<16497=16498
<16498=16500,16499
<16500=16502,16501
<16503=16504
<16504=16506,16505
<16506=16508,16507
<16509=16510
<16512=16517,16513
<16513=16514
<16514=16516,16515
<16517=16518
<16518=16522,16519
<16519=16521,16520
<16522=16524,16523
<16525=16526
<16526=16540,16527
<16527=16534,16528
<16528=16529
<16529=16531,16530
<16531=16533,16532
<16534=16535
<16535=16537,16536
<16537=16539,16538
<16540=16541
<16542=16543
<16543=16551,16544
<16544=16545
<16545=16546
<16546=16548,16547
<16548=16550,16549
<16551=16552
<16553=16603,16554
<16554=16574,16555
<16555=16564,16556
<16556=16557
<16557=16563,16558
<16558=16560,16559
<16560=16562,16561
<16564=16565
<16565=16569,16566
<16566=16568,16567
<16569=16573,16570
<16570=16572,16571
<16574=16575
<16575=16602,16576
<16576=16582,16577
<16577=16579,16578
<16579=16581,16580
<16582=16600,16583
<16583=16590,16584
<16584=16585
<16585=16587,16586
<16587=16589,16588
<16590=16591
<16591=16597,16592
<16592=16594,16593
<16594=16596,16595
<16597=16599,16598
<16600=16601
<16603=16604
<16604=16606,16605
<16607=16608
<16608=16612,16609
<16609=16611,16610
<16613=16661,16655,16652,16614
<16614=16627,16615
<16615=16617,16616
<16617=16618
<16618=16622,16619
<16619=16621,16620
<16622=16626,16623
<16623=16625,16624
<16627=16628
<16628=16651,16629
<16629=16635,16630
<16630=16632,16631
<16632=16634,16633
<16635=16649,16636
<16636=16643,16637
<16637=16638
<16638=16640,16639
<16640=16642,16641
<16643=16644
<16644=16646,16645
<16646=16648,16647
<16649=16650
<16652=16654,16653
<16655=16656
<16656=16660,16657
<16657=16659,16658
<16661=16662
<16662=16664,16663
<16665=16667,16666
<16667=16668
<16668=16670,16669
<16671=16672
<16672=16681,16673
<16673=16679,16674
<16674=16677,16675
<16675=16676
<16677=16678
<16679=16680
<16682=16684,16683
<16684=16685
<16685=16687,16686
<16688=16692,16689
<16689=16691,16690
<16693=16694
<16695=16696
<16696=16700,16697
<16697=16699,16698
<16701=16703,16702
<16703=16704
<16704=16706,16705
<16707=16803,16797,16792,16708
<16708=16786,16709
<16709=16780,16778,16773,16710
<16710=16729,16711
<16711=16725,16712
<16712=16714,16713
<16714=16715
<16715=16723,16716
<16716=16721,16719,16717
<16717=16718
<16719=16720
<16721=16722
<16723=16724
<16725=16726
<16726=16728,16727
<16729=16769,16765,16762,16730
<16730=16732,16731
<16732=16733
<16733=16735,16734
<16735=16760,16736
<16736=16737
<16737=16738
<16738=16744,16739
<16739=16741,16740
<16741=16743,16742
<16744=16758,16745
<16745=16752,16746
<16746=16747
<16747=16749,16748
<16749=16751,16750
<16752=16753
<16753=16755,16754
<16755=16757,16756
<16758=16759
<16760=16761
<16762=16764,16763
<16765=16766
<16766=16768,16767
<16769=16770
<16770=16772,16771
<16773=16777,16774
<16774=16776,16775
<16778=16779
<16780=16781
<16781=16785,16782
<16782=16784,16783
<16786=16788,16787
<16788=16789
<16789=16791,16790
<16792=16796,16793
<16793=16795,16794
<16797=16798
<16798=16802,16799
<16799=16801,16800
<16803=16804
<16804=16808,16805
<16805=16807,16806
<16809=16811,16810
<16811=16812
<16812=16814,16813
<16815=16836,16832,16829,16816
<16816=16817
<16817=16828,16818
<16818=16826,16819
<16819=16820
<16820=16821
<16821=16823,16822
<16823=16825,16824
<16826=16827
<16829=16831,16830
<16832=16833
<16833=16835,16834
<16836=16837
<16837=16839,16838
<16840=16841
<16841=16843,16842
<16844=16846,16845
<16846=16847
<16847=16849,16848
<16849=16851,16850
<16851=16853,16852
<16854=16855
<16855=16857,16856
<16858=16859
<16859=16861,16860
<16862=16863
<16863=16865,16864
<16866=16867
<16867=16869,16868
<16870=16871
<16871=16873,16872
<16874=16875
<16875=16877,16876
<16930=16945,16944,16931
<16931=16941,16938,16935,16932
<16932=16934,16933
<16935=16937,16936
<16938=16940,16939
<16941=16943,16942
<16945=17061,17054,16946
<16946=17048,17046,17041,16947
<16947=17032,17019,16987,16983,16972,16959,16948
<16948=16949
<16949=16957,16950
<16950=16955,16953,16951
<16951=16952
<16953=16954
<16955=16956
<16957=16958
<16959=16961,16960
<16961=16962
<16962=16970,16963
<16963=16968,16966,16964
<16964=16965
<16966=16967
<16968=16969
<16970=16971
<16972=16974,16973
<16974=16975
<16975=16981,16976
<16976=16979,16977
<16977=16978
<16979=16980
<16981=16982
<16983=16985,16984
<16985=16986
<16987=17013,17011,17006,16988
<16988=17000,16989
<16989=16990
<16990=16998,16991
<16991=16996,16994,16992
<16992=16993
<16994=16995
<16996=16997
<16998=16999
<17000=17002,17001
<17002=17003
<17003=17005,17004
<17006=17010,17007
<17007=17009,17008
<17011=17012
<17013=17014
<17014=17018,17015
<17015=17017,17016
<17019=17020
<17020=17030,17021
<17021=17028,17026,17024,17022
<17022=17023
<17024=17025
<17026=17027
<17028=17029
<17030=17031
<17032=17033
<17033=17039,17034
<17034=17037,17035
<17035=17036
<17037=17038
<17039=17040
<17041=17045,17042
<17042=17044,17043
<17046=17047
<17048=17049
<17049=17053,17050
<17050=17052,17051
<17054=17058,17055
<17055=17057,17056
<17058=17060,17059
<17061=17065,17062
<17062=17064,17063
<17065=17067,17066
<17087=17096,17095,17088
<17088=17092,17089
<17089=17091,17090
<17092=17094,17093
<17096=17426,17422,17418,17408,17388,17366,17359,17353,17346,17097
<17097=17344,17339,17098
<17098=17332,17323,17308,17293,17287,17215,17204,17200,17191,17099
<17099=17187,17133,17100
<17100=17101
<17101=17102
<17102=17129,17123,17120,17103
<17103=17104
<17104=17118,17105
<17105=17112,17108,17106
<17106=17107
<17108=17109
<17109=17111,17110
<17112=17113
<17113=17115,17114
<17115=17117,17116
<17118=17119
<17120=17122,17121
<17123=17124
<17124=17128,17125
<17125=17127,17126
<17129=17130
<17130=17132,17131
<17133=17143,17134
<17134=17135
<17135=17141,17136
<17136=17139,17137
<17137=17138
<17139=17140
<17141=17142
<17143=17183,17144
<17144=17176,17145
<17145=17172,17166,17163,17146
<17146=17147
<17147=17161,17148
<17148=17155,17151,17149
<17149=17150
<17151=17152
<17152=17154,17153
<17155=17156
<17156=17158,17157
<17158=17160,17159
<17161=17162
<17163=17165,17164
<17166=17167
<17167=17171,17168
<17168=17170,17169
<17172=17173
<17173=17175,17174
<17176=17177
<17177=17181,17178
<17178=17179
<17179=17180
<17181=17182
<17183=17184
<17184=17186,17185
<17187=17188
<17188=17190,17189
<17191=17196,17192
<17192=17193
<17193=17195,17194
<17196=17197
<17197=17199,17198
<17200=17201
<17201=17203,17202
<17204=17205
<17205=17213,17206
<17206=17211,17209,17207
<17207=17208
<17209=17210
<17211=17212
<17213=17214
<17215=17283,17277,17274,17216
<17216=17217
<17217=17270,17266,17263,17218
<17218=17253,17236,17219
<17219=17228,17220
<17220=17221
<17221=17223,17222
<17223=17225,17224
<17225=17227,17226
<17228=17229
<17229=17235,17230
<17230=17232,17231
<17232=17234,17233
<17236=17245,17237
<17237=17238
<17238=17240,17239
<17240=17242,17241
<17242=17244,17243
<17245=17246
<17246=17252,17247
<17247=17249,17248
<17249=17251,17250
<17253=17254
<17254=17262,17255
<17255=17257,17256
<17257=17259,17258
<17259=17261,17260
<17263=17265,17264
<17266=17267
<17267=17269,17268
<17270=17271
<17271=17273,17272
<17274=17276,17275
<17277=17278
<17278=17282,17279
<17279=17281,17280
<17283=17284
<17284=17286,17285
<17287=17289,17288
<17289=17290
<17290=17292,17291
<17293=17294
<17294=17305,17295
<17295=17303,17296
<17296=17297
<17297=17298
<17298=17300,17299
<17300=17302,17301
<17303=17304
<17305=17307,17306
<17308=17309
<17309=17322,17310
<17310=17319,17311
<17311=17317,17312
<17312=17315,17313
<17313=17314
<17315=17316
<17317=17318
<17319=17321,17320
<17323=17324
<17324=17330,17325
<17325=17326
<17326=17327
<17327=17329,17328
<17330=17331
<17332=17336,17333
<17333=17335,17334
<17336=17338,17337
<17339=17343,17340
<17340=17342,17341
<17344=17345
<17346=17347
<17347=17352,17351,17348
<17348=17350,17349
<17353=17354
<17354=17358,17355
<17355=17357,17356
<17359=17360
<17360=17364,17361
<17361=17362
<17362=17363
<17364=17365
<17366=17367
<17367=17383,17368
<17368=17378,17369
<17369=17373,17370
<17370=17372,17371
<17373=17375,17374
<17375=17377,17376
<17378=17380,17379
<17380=17382,17381
<17383=17385,17384
<17385=17387,17386
<17388=17389
<17389=17403,17390
<17390=17398,17391
<17391=17393,17392
<17393=17395,17394
<17395=17397,17396
<17398=17400,17399
<17400=17402,17401
<17403=17405,17404
<17405=17407,17406
<17408=17416,17409
<17409=17410
<17410=17414,17411
<17411=17412
<17412=17413
<17414=17415
<17416=17417
<17418=17419
<17419=17421,17420
<17422=17423
<17423=17425,17424
<17426=17427
<17427=17429,17428
<17469=17475,17474,17470
<17470=17471
<17471=17473,17472
<17475=17531,17525,17519,17476
<17476=17517,17514,17477
<17477=17508,17478
<17478=17502,17495,17479
<17479=17480
<17480=17487,17481
<17481=17482
<17482=17484,17483
<17484=17486,17485
<17487=17488
<17488=17492,17489
<17489=17491,17490
<17492=17494,17493
<17495=17496
<17496=17500,17497
<17497=17498
<17498=17499
<17500=17501
<17502=17503
<17503=17507,17504
<17504=17506,17505
<17508=17509
<17509=17513,17510
<17510=17512,17511
<17514=17516,17515
<17517=17518
<17519=17520
<17520=17522,17521
<17522=17524,17523
<17525=17526
<17526=17530,17527
<17527=17529,17528
<17531=17535,17532
<17532=17534,17533
<17535=17537,17536
<17550=17556,17555,17551
<17551=17552
<17552=17554,17553
<17556=17564,17557
<17557=17558
<17558=17562,17559
<17559=17560
<17560=17561
<17562=17563
<17564=17638,17636,17631,17565
<17565=17566
<17566=17623,17619,17616,17567
<17567=17568
<17568=17608,17604,17601,17569
<17569=17570
<17570=17571
<17571=17594,17572
<17572=17576,17573
<17573=17575,17574
<17576=17592,17577
<17577=17578
<17578=17579
<17579=17581,17580
<17581=17585,17582
<17582=17584,17583
<17585=17587,17586
<17587=17589,17588
<17589=17591,17590
<17592=17593
<17594=17596,17595
<17596=17598,17597
<17598=17600,17599
<17601=17603,17602
<17604=17605
<17605=17607,17606
<17608=17609
<17609=17610
<17610=17615,17614,17611
<17611=17613,17612
<17616=17618,17617
<17619=17620
<17620=17622,17621
<17623=17624
<17624=17625
<17625=17630,17629,17626
<17626=17628,17627
<17631=17635,17632
<17632=17634,17633
<17636=17637
<17638=17639
<17639=17640
<17640=17647,17646,17641
<17641=17645,17642
<17642=17644,17643
<17670=17685,17684,17671
<17671=17681,17678,17675,17672
<17672=17674,17673
<17675=17677,17676
<17678=17680,17679
<17681=17683,17682
<17685=17701,17686
<17686=17699,17687
<17687=17688
<17688=17689
<17689=17697,17690
<17690=17695,17693,17691
<17691=17692
<17693=17694
<17695=17696
<17697=17698
<17699=17700
<17701=17748,17746,17741,17702
<17702=17703
<17703=17733,17729,17726,17704
<17704=17705
<17705=17706
<17706=17724,17707
<17707=17718,17716,17714,17708
<17708=17709
<17709=17711,17710
<17711=17713,17712
<17714=17715
<17716=17717
<17718=17719
<17719=17721,17720
<17721=17723,17722
<17724=17725
<17726=17728,17727
<17729=17730
<17730=17732,17731
<17733=17734
<17734=17735
<17735=17740,17739,17736
<17736=17738,17737
<17741=17745,17742
<17742=17744,17743
<17746=17747
<17748=17749
<17749=17750
<17750=17757,17756,17751
<17751=17755,17752
<17752=17754,17753
<17776=17785,17784,17777
<17777=17781,17778
<17778=17780,17779
<17781=17783,17782
<17785=17854,17808,17797,17786
<17786=17787
<17787=17795,17788
<17788=17793,17791,17789
<17789=17790
<17791=17792
<17793=17794
<17795=17796
<17797=17798
<17798=17806,17799
<17799=17804,17802,17800
<17800=17801
<17802=17803
<17804=17805
<17806=17807
<17808=17846,17842,17839,17809
<17809=17810
<17810=17811
<17811=17836,17812
<17812=17831,17813
<17813=17829,17814
<17814=17815
<17815=17816
<17816=17818,17817
<17818=17824,17819
<17819=17821,17820
<17821=17823,17822
<17824=17826,17825
<17826=17828,17827
<17829=17830
<17831=17833,17832
<17833=17835,17834
<17836=17838,17837
<17839=17841,17840
<17842=17843
<17843=17845,17844
<17846=17847
<17847=17848
<17848=17853,17852,17849
<17849=17851,17850
<17854=17855
<17855=17857,17856
<17875=17887,17886,17876
<17876=17883,17880,17877
<17877=17879,17878
<17880=17882,17881
<17883=17885,17884
<17887=17958,17954,17924,17916,17904,17897,17888
<17888=17889
<17889=17895,17890
<17890=17893,17891
<17891=17892
<17893=17894
<17895=17896
<17897=17898
<17898=17902,17899
<17899=17900
<17900=17901
<17902=17903
<17904=17912,17905
<17905=17906
<17906=17910,17907
<17907=17908
<17908=17909
<17910=17911
<17912=17913
<17913=17915,17914
<17916=17917
<17917=17921,17918
<17918=17920,17919
<17921=17923,17922
<17924=17944,17942,17939,17925
<17925=17933,17926
<17926=17927
<17927=17931,17928
<17928=17929
<17929=17930
<17931=17932
<17933=17934
<17934=17938,17935
<17935=17937,17936
<17939=17941,17940
<17942=17943
<17944=17945
<17945=17946
<17946=17953,17952,17947
<17947=17951,17948
<17948=17950,17949
<17954=17955
<17955=17957,17956
<17958=17959
<17959=17979,17978,17960
<17960=17977,17961
<17961=17975,17962
<17962=17973,17971,17963
<17963=17964
<17964=17970,17965
<17965=17967,17966
<17967=17969,17968
<17971=17972
<17973=17974
<17975=17976
<18001=18007,18006,18002
<18002=18003
<18003=18005,18004
<18007=18207,18193,18177,18161,18138,18131,18010,18008
<18008=18009
<18010=18121,18011
<18011=18105,18012
<18012=18092,18013
<18013=18075,18014
<18014=18071,18023,18015
<18015=18016
<18016=18017
<18017=18018
<18018=18020,18019
<18020=18022,18021
<18023=18056,18041,18030,18024
<18024=18025
<18025=18027,18026
<18027=18029,18028
<18030=18031
<18031=18039,18032
<18032=18037,18035,18033
<18033=18034
<18035=18036
<18037=18038
<18039=18040
<18041=18042
<18042=18054,18043
<18043=18052,18046,18044
<18044=18045
<18046=18047
<18047=18049,18048
<18049=18051,18050
<18052=18053
<18054=18055
<18056=18057
<18057=18069,18058
<18058=18067,18061,18059
<18059=18060
<18061=18062
<18062=18064,18063
<18064=18066,18065
<18067=18068
<18069=18070
<18071=18072
<18072=18074,18073
<18075=18076
<18076=18091,18077
<18077=18089,18078
<18078=18085,18083,18081,18079
<18079=18080
<18081=18082
<18083=18084
<18085=18086
<18086=18088,18087
<18089=18090
<18092=18093
<18093=18102,18094
<18094=18096,18095
<18096=18100,18097
<18097=18098
<18098=18099
<18100=18101
<18102=18104,18103
<18105=18106
<18106=18120,18119,18107
<18107=18118,18108
<18108=18116,18109
<18109=18112,18110
<18110=18111
<18112=18113
<18113=18115,18114
<18116=18117
<18121=18122
<18122=18124,18123
<18124=18126,18125
<18126=18128,18127
<18128=18130,18129
<18131=18132
<18132=18137,18136,18133
<18133=18135,18134
<18138=18146,18139
<18139=18140
<18140=18141
<18141=18143,18142
<18143=18145,18144
<18146=18147
<18147=18159,18148
<18148=18153,18151,18149
<18149=18150
<18151=18152
<18153=18154
<18154=18156,18155
<18156=18158,18157
<18159=18160
<18161=18169,18162
<18162=18163
<18163=18164
<18164=18166,18165
<18166=18168,18167
<18169=18170
<18170=18172,18171
<18172=18174,18173
<18174=18176,18175
<18177=18178
<18178=18190,18179
<18179=18187,18180
<18180=18184,18181
<18181=18183,18182
<18184=18186,18185
<18187=18189,18188
<18190=18192,18191
<18193=18194
<18194=18204,18195
<18195=18201,18196
<18196=18198,18197
<18198=18200,18199
<18201=18203,18202
<18204=18206,18205
<18207=18211,18208
<18208=18210,18209
<18211=18213,18212
<18248=18257,18256,18249
<18249=18253,18250
<18250=18252,18251
<18253=18255,18254
<18257=19894,19860,19856,19849,19837,18264,18260,18258
<18258=18259
<18260=18261
<18261=18263,18262
<18264=19835,18273,18265
<18265=18266
<18266=18267
<18267=18268
<18268=18270,18269
<18270=18272,18271
<18273=19828,19819,19803,19192,19184,19180,19167,19157,19144,19137,19130,19123,19112,19107,18274,18278,18283,18637,18642,18659,18676,18693,18710,18727,18744,18761,18778,18785,18790,18807,18824,18841,18858,18865,18870,18887,18904,18921,18938,18945,18951,18957,18963,18969,18975,18981,18990,18999,19004,19010,19017,19023,19030,19036,19042,19049,19055,19062,19068,19074,19081,19087,19094,19100
<18274=18275
<18275=18277,18276
<18278=18279
<18279=18281,18280
<18281=18282
<18283=18631,18284
<18284=18622,18615,18604,18593,18586,18569,18552,18535,18518,18513,18506,18489,18472,18455,18438,18433,18426,18409,18392,18375,18358,18341,18324,18307,18290,18285
<18285=18286
<18286=18288,18287
<18288=18289
<18290=18291
<18291=18305,18292
<18292=18301,18297,18293
<18293=18294
<18294=18296,18295
<18297=18298
<18298=18300,18299
<18301=18302
<18302=18304,18303
<18305=18306
<18307=18308
<18308=18322,18309
<18309=18318,18314,18310
<18310=18311
<18311=18313,18312
<18314=18315
<18315=18317,18316
<18318=18319
<18319=18321,18320
<18322=18323
<18324=18325
<18325=18339,18326
<18326=18335,18331,18327
<18327=18328
<18328=18330,18329
<18331=18332
<18332=18334,18333
<18335=18336
<18336=18338,18337
<18339=18340
<18341=18342
<18342=18356,18343
<18343=18352,18348,18344
<18344=18345
<18345=18347,18346
<18348=18349
<18349=18351,18350
<18352=18353
<18353=18355,18354
<18356=18357
<18358=18359
<18359=18373,18360
<18360=18369,18365,18361
<18361=18362
<18362=18364,18363
<18365=18366
<18366=18368,18367
<18369=18370
<18370=18372,18371
<18373=18374
<18375=18376
<18376=18390,18377
<18377=18386,18382,18378
<18378=18379
<18379=18381,18380
<18382=18383
<18383=18385,18384
<18386=18387
<18387=18389,18388
<18390=18391
<18392=18393
<18393=18407,18394
<18394=18403,18399,18395
<18395=18396
<18396=18398,18397
<18399=18400
<18400=18402,18401
<18403=18404
<18404=18406,18405
<18407=18408
<18409=18410
<18410=18424,18411
<18411=18420,18416,18412
<18412=18413
<18413=18415,18414
<18416=18417
<18417=18419,18418
<18420=18421
<18421=18423,18422
<18424=18425
<18426=18427
<18427=18431,18428
<18428=18429
<18429=18430
<18431=18432
<18433=18434
<18434=18436,18435
<18436=18437
<18438=18439
<18439=18453,18440
<18440=18449,18445,18441
<18441=18442
<18442=18444,18443
<18445=18446
<18446=18448,18447
<18449=18450
<18450=18452,18451
<18453=18454
<18455=18456
<18456=18470,18457
<18457=18466,18462,18458
<18458=18459
<18459=18461,18460
<18462=18463
<18463=18465,18464
<18466=18467
<18467=18469,18468
<18470=18471
<18472=18473
<18473=18487,18474
<18474=18483,18479,18475
<18475=18476
<18476=18478,18477
<18479=18480
<18480=18482,18481
<18483=18484
<18484=18486,18485
<18487=18488
<18489=18490
<18490=18504,18491
<18491=18500,18496,18492
<18492=18493
<18493=18495,18494
<18496=18497
<18497=18499,18498
<18500=18501
<18501=18503,18502
<18504=18505
<18506=18507
<18507=18511,18508
<18508=18509
<18509=18510
<18511=18512
<18513=18514
<18514=18516,18515
<18516=18517
<18518=18519
<18519=18533,18520
<18520=18529,18525,18521
<18521=18522
<18522=18524,18523
<18525=18526
<18526=18528,18527
<18529=18530
<18530=18532,18531
<18533=18534
<18535=18536
<18536=18550,18537
<18537=18546,18542,18538
<18538=18539
<18539=18541,18540
<18542=18543
<18543=18545,18544
<18546=18547
<18547=18549,18548
<18550=18551
<18552=18553
<18553=18567,18554
<18554=18563,18559,18555
<18555=18556
<18556=18558,18557
<18559=18560
<18560=18562,18561
<18563=18564
<18564=18566,18565
<18567=18568
<18569=18570
<18570=18584,18571
<18571=18580,18576,18572
<18572=18573
<18573=18575,18574
<18576=18577
<18577=18579,18578
<18580=18581
<18581=18583,18582
<18584=18585
<18586=18587
<18587=18591,18588
<18588=18589
<18589=18590
<18591=18592
<18593=18594
<18594=18602,18595
<18595=18598,18596
<18596=18597
<18598=18599
<18599=18601,18600
<18602=18603
<18604=18605
<18605=18613,18606
<18606=18609,18607
<18607=18608
<18609=18610
<18610=18612,18611
<18613=18614
<18615=18619,18616
<18616=18618,18617
<18619=18621,18620
<18622=18623
<18623=18629,18624
<18624=18625
<18625=18626
<18626=18628,18627
<18629=18630
<18631=18632
<18632=18634,18633
<18634=18636,18635
<18637=18638
<18638=18640,18639
<18640=18641
<18642=18643
<18643=18657,18644
<18644=18653,18649,18645
<18645=18646
<18646=18648,18647
<18649=18650
<18650=18652,18651
<18653=18654
<18654=18656,18655
<18657=18658
<18659=18660
<18660=18674,18661
<18661=18670,18666,18662
<18662=18663
<18663=18665,18664
<18666=18667
<18667=18669,18668
<18670=18671
<18671=18673,18672
<18674=18675
<18676=18677
<18677=18691,18678
<18678=18687,18683,18679
<18679=18680
<18680=18682,18681
<18683=18684
<18684=18686,18685
<18687=18688
<18688=18690,18689
<18691=18692
<18693=18694
<18694=18708,18695
<18695=18704,18700,18696
<18696=18697
<18697=18699,18698
<18700=18701
<18701=18703,18702
<18704=18705
<18705=18707,18706
<18708=18709
<18710=18711
<18711=18725,18712
<18712=18721,18717,18713
<18713=18714
<18714=18716,18715
<18717=18718
<18718=18720,18719
<18721=18722
<18722=18724,18723
<18725=18726
<18727=18728
<18728=18742,18729
<18729=18738,18734,18730
<18730=18731
<18731=18733,18732
<18734=18735
<18735=18737,18736
<18738=18739
<18739=18741,18740
<18742=18743
<18744=18745
<18745=18759,18746
<18746=18755,18751,18747
<18747=18748
<18748=18750,18749
<18751=18752
<18752=18754,18753
<18755=18756
<18756=18758,18757
<18759=18760
<18761=18762
<18762=18776,18763
<18763=18772,18768,18764
<18764=18765
<18765=18767,18766
<18768=18769
<18769=18771,18770
<18772=18773
<18773=18775,18774
<18776=18777
<18778=18779
<18779=18783,18780
<18780=18781
<18781=18782
<18783=18784
<18785=18786
<18786=18788,18787
<18788=18789
<18790=18791
<18791=18805,18792
<18792=18801,18797,18793
<18793=18794
<18794=18796,18795
<18797=18798
<18798=18800,18799
<18801=18802
<18802=18804,18803
<18805=18806
<18807=18808
<18808=18822,18809
<18809=18818,18814,18810
<18810=18811
<18811=18813,18812
<18814=18815
<18815=18817,18816
<18818=18819
<18819=18821,18820
<18822=18823
<18824=18825
<18825=18839,18826
<18826=18835,18831,18827
<18827=18828
<18828=18830,18829
<18831=18832
<18832=18834,18833
<18835=18836
<18836=18838,18837
<18839=18840
<18841=18842
<18842=18856,18843
<18843=18852,18848,18844
<18844=18845
<18845=18847,18846
<18848=18849
<18849=18851,18850
<18852=18853
<18853=18855,18854
<18856=18857
<18858=18859
<18859=18863,18860
<18860=18861
<18861=18862
<18863=18864
<18865=18866
<18866=18868,18867
<18868=18869
<18870=18871
<18871=18885,18872
<18872=18881,18877,18873
<18873=18874
<18874=18876,18875
<18877=18878
<18878=18880,18879
<18881=18882
<18882=18884,18883
<18885=18886
<18887=18888
<18888=18902,18889
<18889=18898,18894,18890
<18890=18891
<18891=18893,18892
<18894=18895
<18895=18897,18896
<18898=18899
<18899=18901,18900
<18902=18903
<18904=18905
<18905=18919,18906
<18906=18915,18911,18907
<18907=18908
<18908=18910,18909
<18911=18912
<18912=18914,18913
<18915=18916
<18916=18918,18917
<18919=18920
<18921=18922
<18922=18936,18923
<18923=18932,18928,18924
<18924=18925
<18925=18927,18926
<18928=18929
<18929=18931,18930
<18932=18933
<18933=18935,18934
<18936=18937
<18938=18939
<18939=18943,18940
<18940=18941
<18941=18942
<18943=18944
<18945=18946
<18946=18948,18947
<18948=18950,18949
<18951=18952
<18952=18954,18953
<18954=18956,18955
<18957=18958
<18958=18960,18959
<18960=18962,18961
<18963=18964
<18964=18966,18965
<18966=18968,18967
<18969=18970
<18970=18972,18971
<18972=18974,18973
<18975=18976
<18976=18978,18977
<18978=18980,18979
<18981=18982
<18982=18988,18983
<18983=18986,18984
<18984=18985
<18986=18987
<18988=18989
<18990=18991
<18991=18997,18992
<18992=18995,18993
<18993=18994
<18995=18996
<18997=18998
<18999=19000
<19000=19002,19001
<19002=19003
<19004=19005
<19005=19007,19006
<19007=19009,19008
<19010=19011
<19011=19015,19012
<19012=19013
<19013=19014
<19015=19016
<19017=19018
<19018=19020,19019
<19020=19022,19021
<19023=19024
<19024=19028,19025
<19025=19026
<19026=19027
<19028=19029
<19030=19031
<19031=19033,19032
<19033=19035,19034
<19036=19037
<19037=19039,19038
<19039=19041,19040
<19042=19043
<19043=19047,19044
<19044=19045
<19045=19046
<19047=19048
<19049=19050
<19050=19052,19051
<19052=19054,19053
<19055=19056
<19056=19060,19057
<19057=19058
<19058=19059
<19060=19061
<19062=19063
<19063=19065,19064
<19065=19067,19066
<19068=19069
<19069=19071,19070
<19071=19073,19072
<19074=19075
<19075=19079,19076
<19076=19077
<19077=19078
<19079=19080
<19081=19082
<19082=19084,19083
<19084=19086,19085
<19087=19088
<19088=19092,19089
<19089=19090
<19090=19091
<19092=19093
<19094=19095
<19095=19097,19096
<19097=19099,19098
<19100=19101
<19101=19105,19102
<19102=19103
<19103=19104
<19105=19106
<19107=19108
<19108=19110,19109
<19110=19111
<19112=19113
<19113=19121,19114
<19114=19115
<19115=19116
<19116=19118,19117
<19118=19120,19119
<19121=19122
<19123=19124
<19124=19128,19125
<19125=19126
<19126=19127
<19128=19129
<19130=19131
<19131=19135,19132
<19132=19133
<19133=19134
<19135=19136
<19137=19138
<19138=19142,19139
<19139=19140
<19140=19141
<19142=19143
<19144=19145
<19145=19155,19146
<19146=19149,19147
<19147=19148
<19149=19150
<19150=19152,19151
<19152=19154,19153
<19155=19156
<19157=19158,19161,19164
<19158=19160,19159
<19161=19163,19162
<19164=19166,19165
<19167=19168
<19168=19178,19169
<19169=19174,19172,19170
<19170=19171
<19172=19173
<19174=19175
<19175=19177,19176
<19178=19179
<19180=19181
<19181=19183,19182
<19184=19190,19185
<19185=19186
<19186=19187
<19187=19189,19188
<19190=19191
<19192=19799,19193
<19193=19716,19712,19705,19690,19679,19666,19659,19629,19625,19621,19614,19607,19542,19535,19530,19245,19240,19200,19194
<19194=19195
<19195=19199,19196
<19196=19198,19197
<19200=19234,19210,19201
<19201=19202
<19202=19203
<19203=19204
<19204=19208,19205
<19205=19206
<19206=19207
<19208=19209
<19210=19227,19220,19211
<19211=19212
<19212=19218,19213
<19213=19216,19214
<19214=19215
<19216=19217
<19218=19219
<19220=19221
<19221=19225,19222
<19222=19223
<19223=19224
<19225=19226
<19227=19228
<19228=19232,19229
<19229=19230
<19230=19231
<19232=19233
<19234=19235
<19235=19237,19236
<19237=19239,19238
<19240=19241
<19241=19243,19242
<19243=19244
<19245=19526,19520,19517,19246
<19246=19268,19247
<19247=19266,19248
<19248=19249
<19249=19250
<19250=19264,19251
<19251=19260,19256,19252
<19252=19253
<19253=19255,19254
<19256=19257
<19257=19259,19258
<19260=19261
<19261=19263,19262
<19264=19265
<19266=19267
<19268=19513,19509,19506,19269
<19269=19485,19464,19402,19373,19348,19270
<19270=19346,19271
<19271=19338,19330,19308,19290,19272
<19272=19273
<19273=19285,19274
<19274=19276,19275
<19276=19278,19277
<19278=19280,19279
<19280=19282,19281
<19282=19284,19283
<19285=19287,19286
<19287=19289,19288
<19290=19291
<19291=19303,19292
<19292=19294,19293
<19294=19296,19295
<19296=19298,19297
<19298=19300,19299
<19300=19302,19301
<19303=19305,19304
<19305=19307,19306
<19308=19309
<19309=19325,19310
<19310=19314,19311
<19311=19313,19312
<19314=19316,19315
<19316=19318,19317
<19318=19320,19319
<19320=19322,19321
<19322=19324,19323
<19325=19327,19326
<19327=19329,19328
<19330=19331
<19331=19333,19332
<19333=19335,19334
<19335=19337,19336
<19338=19339
<19339=19341,19340
<19341=19343,19342
<19343=19345,19344
<19346=19347
<19348=19349
<19349=19371,19350
<19350=19369,19367,19351
<19351=19352
<19352=19356,19353
<19353=19355,19354
<19356=19358,19357
<19358=19360,19359
<19360=19362,19361
<19362=19364,19363
<19364=19366,19365
<19367=19368
<19369=19370
<19371=19372
<19373=19374
<19374=19400,19375
<19375=19388,19376
<19376=19377
<19377=19379,19378
<19379=19381,19380
<19381=19383,19382
<19383=19385,19384
<19385=19387,19386
<19388=19389
<19389=19391,19390
<19391=19393,19392
<19393=19395,19394
<19395=19397,19396
<19397=19399,19398
<19400=19401
<19402=19462,19403
<19403=19437,19412,19408,19404
<19404=19405
<19405=19407,19406
<19408=19409
<19409=19411,19410
<19412=19413
<19413=19436,19435,19414
<19414=19434,19415
<19415=19419,19416
<19416=19418,19417
<19419=19427,19420
<19420=19422,19421
<19422=19426,19423
<19423=19425,19424
<19427=19429,19428
<19429=19433,19430
<19430=19432,19431
<19437=19438
<19438=19461,19460,19439
<19439=19459,19440
<19440=19444,19441
<19441=19443,19442
<19444=19452,19445
<19445=19447,19446
<19447=19451,19448
<19448=19450,19449
<19452=19454,19453
<19454=19458,19455
<19455=19457,19456
<19462=19463
<19464=19465
<19465=19484,19483,19466
<19466=19482,19467
<19467=19471,19468
<19468=19470,19469
<19471=19473,19472
<19473=19475,19474
<19475=19477,19476
<19477=19479,19478
<19479=19481,19480
<19485=19486
<19486=19505,19504,19487
<19487=19503,19488
<19488=19492,19489
<19489=19491,19490
<19492=19494,19493
<19494=19496,19495
<19496=19498,19497
<19498=19500,19499
<19500=19502,19501
<19506=19508,19507
<19509=19510
<19510=19512,19511
<19513=19514
<19514=19516,19515
<19517=19519,19518
<19520=19521
<19521=19525,19522
<19522=19524,19523
<19526=19527
<19527=19529,19528
<19530=19531
<19531=19534,19533,19532
<19535=19536
<19536=19540,19537
<19537=19538
<19538=19539
<19540=19541
<19542=19603,19599,19596,19543
<19543=19544
<19544=19588,19545
<19545=19567,19546
<19546=19547
<19547=19564,19548
<19548=19562,19549
<19549=19550
<19550=19551
<19551=19555,19552
<19552=19554,19553
<19555=19557,19556
<19557=19559,19558
<19559=19561,19560
<19562=19563
<19564=19566,19565
<19567=19568
<19568=19585,19569
<19569=19583,19570
<19570=19571
<19571=19572
<19572=19576,19573
<19573=19575,19574
<19576=19578,19577
<19578=19580,19579
<19580=19582,19581
<19583=19584
<19585=19587,19586
<19588=19589
<19589=19591,19590
<19591=19593,19592
<19593=19595,19594
<19596=19598,19597
<19599=19600
<19600=19602,19601
<19603=19604
<19604=19606,19605
<19607=19608
<19608=19612,19609
<19609=19610
<19610=19611
<19612=19613
<19614=19615
<19615=19619,19616
<19616=19617
<19617=19618
<19619=19620
<19621=19622
<19622=19624,19623
<19625=19626
<19626=19628,19627
<19629=19657,19630
<19630=19644,19631
<19631=19632
<19632=19643,19633
<19633=19641,19634
<19634=19635
<19635=19636
<19636=19640,19637
<19637=19639,19638
<19641=19642
<19644=19645
<19645=19656,19646
<19646=19654,19647
<19647=19648
<19648=19649
<19649=19653,19650
<19650=19652,19651
<19654=19655
<19657=19658
<19659=19663,19660
<19660=19662,19661
<19663=19665,19664
<19666=19667
<19667=19677,19668
<19668=19671,19669
<19669=19670
<19671=19672
<19672=19674,19673
<19674=19676,19675
<19677=19678
<19679=19680
<19680=19688,19681
<19681=19686,19684,19682
<19682=19683
<19684=19685
<19686=19687
<19688=19689
<19690=19691
<19691=19703,19692
<19692=19699,19695,19693
<19693=19694
<19695=19696
<19696=19698,19697
<19699=19700
<19700=19702,19701
<19703=19704
<19705=19709,19706
<19706=19708,19707
<19709=19711,19710
<19712=19713
<19713=19715,19714
<19716=19781,19748,19717
<19717=19718
<19718=19737,19730,19719
<19719=19720
<19720=19728,19721
<19721=19726,19722
<19722=19723
<19723=19725,19724
<19726=19727
<19728=19729
<19730=19731
<19731=19735,19732
<19732=19733
<19733=19734
<19735=19736
<19737=19738
<19738=19746,19739
<19739=19744,19742,19740
<19740=19741
<19742=19743
<19744=19745
<19746=19747
<19748=19774,19765,19758,19749
<19749=19750
<19750=19756,19751
<19751=19752
<19752=19753
<19753=19755,19754
<19756=19757
<19758=19759
<19759=19763,19760
<19760=19761
<19761=19762
<19763=19764
<19765=19766
<19766=19772,19767
<19767=19770,19768
<19768=19769
<19770=19771
<19772=19773
<19774=19775
<19775=19779,19776
<19776=19777
<19777=19778
<19779=19780
<19781=19782
<19782=19796,19783
<19783=19791,19784
<19784=19788,19785
<19785=19787,19786
<19788=19790,19789
<19791=19793,19792
<19793=19795,19794
<19796=19798,19797
<19799=19800
<19800=19802,19801
<19803=19804
<19804=19818,19817,19805
<19805=19816,19806
<19806=19814,19807
<19807=19810,19808
<19808=19809
<19810=19811
<19811=19813,19812
<19814=19815
<19819=19820
<19820=19827,19826,19821
<19821=19825,19822
<19822=19824,19823
<19828=19829
<19829=19833,19830
<19830=19831
<19831=19832
<19833=19834
<19835=19836
<19837=19838
<19838=19848,19847,19839
<19839=19846,19840
<19840=19844,19841
<19841=19842
<19842=19843
<19844=19845
<19849=19850
<19850=19855,19854,19851
<19851=19853,19852
<19856=19857
<19857=19859,19858
<19860=19884,19881,19861
<19861=19862
<19862=19866,19863
<19863=19864
<19864=19865
<19866=19867
<19867=19873,19868
<19868=19870,19869
<19870=19872,19871
<19873=19880,19874
<19874=19878,19875
<19875=19876
<19876=19877
<19878=19879
<19881=19882
<19882=19883
<19884=19885
<19885=19889,19886
<19886=19888,19887
<19889=19891,19890
<19891=19893,19892
<19894=19898,19895
<19895=19896
<19896=19897
<19898=19899
<20001=20016,20015,20002
<20002=20012,20009,20006,20003
<20003=20005,20004
<20006=20008,20007
<20009=20011,20010
<20012=20014,20013
<20016=20103,20099,20088,20030,20017
<20017=20018
<20018=20028,20019
<20019=20026,20024,20022,20020
<20020=20021
<20022=20023
<20024=20025
<20026=20027
<20028=20029
<20030=20082,20068,20031
<20031=20032
<20032=20062,20048,20033
<20033=20034
<20034=20035
<20035=20036
<20036=20046,20037
<20037=20044,20042,20040,20038
<20038=20039
<20040=20041
<20042=20043
<20044=20045
<20046=20047
<20048=20049
<20049=20050
<20050=20060,20051
<20051=20058,20056,20054,20052
<20052=20053
<20054=20055
<20056=20057
<20058=20059
<20060=20061
<20062=20063
<20063=20067,20064
<20064=20066,20065
<20068=20069
<20069=20070
<20070=20080,20071
<20071=20078,20076,20074,20072
<20072=20073
<20074=20075
<20076=20077
<20078=20079
<20080=20081
<20082=20083
<20083=20087,20084
<20084=20086,20085
<20088=20089
<20089=20098,20090
<20090=20096,20091
<20091=20094,20092
<20092=20093
<20094=20095
<20096=20097
<20099=20100
<20100=20102,20101
<20103=20104
<20104=20106,20105
<20117=20126,20125,20118
<20118=20122,20119
<20119=20121,20120
<20122=20124,20123
<20126=20359,20349,20345,20341,20318,20307,20293,20280,20267,20253,20238,20223,20208,20195,20188,20181,20174,20167,20160,20153,20146,20139,20134,20127
<20127=20128
<20128=20132,20129
<20129=20130
<20130=20131
<20132=20133
<20134=20135
<20135=20137,20136
<20137=20138
<20139=20140
<20140=20144,20141
<20141=20142
<20142=20143
<20144=20145
<20146=20147
<20147=20151,20148
<20148=20149
<20149=20150
<20151=20152
<20153=20154
<20154=20158,20155
<20155=20156
<20156=20157
<20158=20159
<20160=20161
<20161=20165,20162
<20162=20163
<20163=20164
<20165=20166
<20167=20168
<20168=20172,20169
<20169=20170
<20170=20171
<20172=20173
<20174=20175
<20175=20179,20176
<20176=20177
<20177=20178
<20179=20180
<20181=20182
<20182=20186,20183
<20183=20184
<20184=20185
<20186=20187
<20188=20189
<20189=20193,20190
<20190=20191
<20191=20192
<20193=20194
<20195=20196
<20196=20206,20197
<20197=20204,20202,20200,20198
<20198=20199
<20200=20201
<20202=20203
<20204=20205
<20206=20207
<20208=20209
<20209=20221,20210
<20210=20219,20215,20213,20211
<20211=20212
<20213=20214
<20215=20216
<20216=20218,20217
<20219=20220
<20221=20222
<20223=20224
<20224=20236,20225
<20225=20234,20230,20228,20226
<20226=20227
<20228=20229
<20230=20231
<20231=20233,20232
<20234=20235
<20236=20237
<20238=20239
<20239=20251,20240
<20240=20249,20245,20243,20241
<20241=20242
<20243=20244
<20245=20246
<20246=20248,20247
<20249=20250
<20251=20252
<20253=20254
<20254=20266,20255
<20255=20257,20256
<20257=20261,20258
<20258=20260,20259
<20261=20263,20262
<20263=20265,20264
<20267=20268
<20268=20278,20269
<20269=20276,20274,20272,20270
<20270=20271
<20272=20273
<20274=20275
<20276=20277
<20278=20279
<20280=20281
<20281=20291,20282
<20282=20289,20287,20285,20283
<20283=20284
<20285=20286
<20287=20288
<20289=20290
<20291=20292
<20293=20294
<20294=20306,20295
<20295=20297,20296
<20297=20301,20298
<20298=20300,20299
<20301=20303,20302
<20303=20305,20304
<20307=20308
<20308=20316,20309
<20309=20314,20312,20310
<20310=20311
<20312=20313
<20314=20315
<20316=20317
<20318=20319
<20319=20339,20320
<20320=20331,20323,20321
<20321=20322
<20323=20324
<20324=20326,20325
<20326=20328,20327
<20328=20330,20329
<20331=20332
<20332=20334,20333
<20334=20336,20335
<20336=20338,20337
<20339=20340
<20341=20342
<20342=20344,20343
<20345=20346
<20346=20348,20347
<20349=20356,20353,20350
<20350=20352,20351
<20353=20355,20354
<20356=20358,20357
<20359=20366,20363,20360
<20360=20362,20361
<20363=20365,20364
<20366=20368,20367
<20396=20402,20401,20397
<20397=20398
<20398=20400,20399
<20402=21312,21305,21295,21289,21285,21269,21198,21181,21176,21151,21139,21127,21119,21107,21095,21087,21075,21063,21055,21043,21031,21023,21016,20992,20968,20958,20949,20939,20935,20926,20919,20912,20851,20842,20837,20828,20822,20816,20810,20803,20796,20787,20730,20725,20709,20403
<20403=20700,20404
<20404=20687,20674,20661,20648,20637,20630,20615,20604,20593,20582,20575,20560,20549,20538,20527,20520,20505,20494,20483,20472,20465,20450,20439,20428,20417,20410,20405
<20405=20406
<20406=20408,20407
<20408=20409
<20410=20411
<20411=20415,20412
<20412=20413
<20413=20414
<20415=20416
<20417=20418
<20418=20426,20419
<20419=20420
<20420=20421
<20421=20423,20422
<20423=20425,20424
<20426=20427
<20428=20429
<20429=20437,20430
<20430=20435,20433,20431
<20431=20432
<20433=20434
<20435=20436
<20437=20438
<20439=20440
<20440=20448,20441
<20441=20446,20444,20442
<20442=20443
<20444=20445
<20446=20447
<20448=20449
<20450=20451
<20451=20463,20452
<20452=20461,20455,20453
<20453=20454
<20455=20456
<20456=20458,20457
<20458=20460,20459
<20461=20462
<20463=20464
<20465=20466
<20466=20470,20467
<20467=20468
<20468=20469
<20470=20471
<20472=20473
<20473=20481,20474
<20474=20475
<20475=20476
<20476=20478,20477
<20478=20480,20479
<20481=20482
<20483=20484
<20484=20492,20485
<20485=20490,20488,20486
<20486=20487
<20488=20489
<20490=20491
<20492=20493
<20494=20495
<20495=20503,20496
<20496=20501,20499,20497
<20497=20498
<20499=20500
<20501=20502
<20503=20504
<20505=20506
<20506=20518,20507
<20507=20516,20510,20508
<20508=20509
<20510=20511
<20511=20513,20512
<20513=20515,20514
<20516=20517
<20518=20519
<20520=20521
<20521=20525,20522
<20522=20523
<20523=20524
<20525=20526
<20527=20528
<20528=20536,20529
<20529=20530
<20530=20531
<20531=20533,20532
<20533=20535,20534
<20536=20537
<20538=20539
<20539=20547,20540
<20540=20545,20543,20541
<20541=20542
<20543=20544
<20545=20546
<20547=20548
<20549=20550
<20550=20558,20551
<20551=20556,20554,20552
<20552=20553
<20554=20555
<20556=20557
<20558=20559
<20560=20561
<20561=20573,20562
<20562=20571,20565,20563
<20563=20564
<20565=20566
<20566=20568,20567
<20568=20570,20569
<20571=20572
<20573=20574
<20575=20576
<20576=20580,20577
<20577=20578
<20578=20579
<20580=20581
<20582=20583
<20583=20591,20584
<20584=20585
<20585=20586
<20586=20588,20587
<20588=20590,20589
<20591=20592
<20593=20594
<20594=20602,20595
<20595=20600,20598,20596
<20596=20597
<20598=20599
<20600=20601
<20602=20603
<20604=20605
<20605=20613,20606
<20606=20611,20609,20607
<20607=20608
<20609=20610
<20611=20612
<20613=20614
<20615=20616
<20616=20628,20617
<20617=20626,20620,20618
<20618=20619
<20620=20621
<20621=20623,20622
<20623=20625,20624
<20626=20627
<20628=20629
<20630=20631
<20631=20635,20632
<20632=20633
<20633=20634
<20635=20636
<20637=20638
<20638=20646,20639
<20639=20644,20642,20640
<20640=20641
<20642=20643
<20644=20645
<20646=20647
<20648=20649
<20649=20659,20650
<20650=20655,20653,20651
<20651=20652
<20653=20654
<20655=20656
<20656=20658,20657
<20659=20660
<20661=20662
<20662=20672,20663
<20663=20668,20666,20664
<20664=20665
<20666=20667
<20668=20669
<20669=20671,20670
<20672=20673
<20674=20675
<20675=20685,20676
<20676=20681,20679,20677
<20677=20678
<20679=20680
<20681=20682
<20682=20684,20683
<20685=20686
<20687=20697,20694,20691,20688
<20688=20690,20689
<20691=20693,20692
<20694=20696,20695
<20697=20699,20698
<20700=20701
<20701=20703,20702
<20703=20705,20704
<20705=20706
<20706=20708,20707
<20709=20710
<20710=20724,20723,20711
<20711=20722,20712
<20712=20720,20713
<20713=20716,20714
<20714=20715
<20716=20717
<20717=20719,20718
<20720=20721
<20725=20726
<20726=20728,20727
<20728=20729
<20730=20783,20779,20776,20731
<20731=20770,20764,20758,20741,20732
<20732=20733
<20733=20739,20734
<20734=20735
<20735=20736
<20736=20738,20737
<20739=20740
<20741=20742
<20742=20756,20743
<20743=20752,20748,20744
<20744=20745
<20745=20747,20746
<20748=20749
<20749=20751,20750
<20752=20753
<20753=20755,20754
<20756=20757
<20758=20759
<20759=20761,20760
<20761=20763,20762
<20764=20765
<20765=20767,20766
<20767=20769,20768
<20770=20771
<20771=20773,20772
<20773=20775,20774
<20776=20778,20777
<20779=20780
<20780=20782,20781
<20783=20784
<20784=20786,20785
<20787=20788
<20788=20794,20789
<20789=20790
<20790=20791
<20791=20793,20792
<20794=20795
<20796=20797
<20797=20801,20798
<20798=20799
<20799=20800
<20801=20802
<20803=20804
<20804=20808,20805
<20805=20806
<20806=20807
<20808=20809
<20810=20811
<20811=20813,20812
<20813=20815,20814
<20816=20817
<20817=20819,20818
<20819=20821,20820
<20822=20823
<20823=20825,20824
<20825=20827,20826
<20828=20829
<20829=20835,20830
<20830=20833,20831
<20831=20832
<20833=20834
<20835=20836
<20837=20838
<20838=20840,20839
<20840=20841
<20842=20843
<20843=20849,20844
<20844=20845
<20845=20846
<20846=20848,20847
<20849=20850
<20851=20904,20900,20897,20852
<20852=20891,20885,20879,20862,20853
<20853=20854
<20854=20860,20855
<20855=20856
<20856=20857
<20857=20859,20858
<20860=20861
<20862=20863
<20863=20877,20864
<20864=20873,20869,20865
<20865=20866
<20866=20868,20867
<20869=20870
<20870=20872,20871
<20873=20874
<20874=20876,20875
<20877=20878
<20879=20880
<20880=20882,20881
<20882=20884,20883
<20885=20886
<20886=20888,20887
<20888=20890,20889
<20891=20892
<20892=20894,20893
<20894=20896,20895
<20897=20899,20898
<20900=20901
<20901=20903,20902
<20904=20905
<20905=20906
<20906=20911,20910,20907
<20907=20909,20908
<20912=20913
<20913=20917,20914
<20914=20915
<20915=20916
<20917=20918
<20919=20920
<20920=20924,20921
<20921=20922
<20922=20923
<20924=20925
<20926=20927
<20927=20933,20928
<20928=20931,20929
<20929=20930
<20931=20932
<20933=20934
<20935=20936
<20936=20938,20937
<20939=20940
<20940=20946,20941
<20941=20943,20942
<20943=20945,20944
<20946=20948,20947
<20949=20950
<20950=20956,20951
<20951=20954,20952
<20952=20953
<20954=20955
<20956=20957
<20958=20959
<20959=20965,20960
<20960=20962,20961
<20962=20964,20963
<20965=20967,20966
<20968=20969
<20969=20989,20970
<20970=20984,20971
<20971=20973,20972
<20973=20979,20974
<20974=20976,20975
<20976=20978,20977
<20979=20981,20980
<20981=20983,20982
<20984=20986,20985
<20986=20988,20987
<20989=20991,20990
<20992=20993
<20993=21013,20994
<20994=21008,20995
<20995=20997,20996
<20997=21003,20998
<20998=21000,20999
<21000=21002,21001
<21003=21005,21004
<21005=21007,21006
<21008=21010,21009
<21010=21012,21011
<21013=21015,21014
<21016=21020,21017
<21017=21019,21018
<21020=21022,21021
<21023=21024
<21024=21026,21025
<21026=21028,21027
<21028=21030,21029
<21031=21032
<21032=21038,21033
<21033=21035,21034
<21035=21037,21036
<21038=21040,21039
<21040=21042,21041
<21043=21044
<21044=21050,21045
<21045=21047,21046
<21047=21049,21048
<21050=21052,21051
<21052=21054,21053
<21055=21056
<21056=21058,21057
<21058=21060,21059
<21060=21062,21061
<21063=21064
<21064=21070,21065
<21065=21067,21066
<21067=21069,21068
<21070=21072,21071
<21072=21074,21073
<21075=21076
<21076=21082,21077
<21077=21079,21078
<21079=21081,21080
<21082=21084,21083
<21084=21086,21085
<21087=21088
<21088=21090,21089
<21090=21092,21091
<21092=21094,21093
<21095=21096
<21096=21102,21097
<21097=21099,21098
<21099=21101,21100
<21102=21104,21103
<21104=21106,21105
<21107=21108
<21108=21114,21109
<21109=21111,21110
<21111=21113,21112
<21114=21116,21115
<21116=21118,21117
<21119=21120
<21120=21122,21121
<21122=21124,21123
<21124=21126,21125
<21127=21128
<21128=21134,21129
<21129=21131,21130
<21131=21133,21132
<21134=21136,21135
<21136=21138,21137
<21139=21140
<21140=21146,21141
<21141=21143,21142
<21143=21145,21144
<21146=21148,21147
<21148=21150,21149
<21151=21152
<21152=21175,21174,21153
<21153=21173,21154
<21154=21168,21155
<21155=21157,21156
<21157=21163,21158
<21158=21160,21159
<21160=21162,21161
<21163=21165,21164
<21165=21167,21166
<21168=21170,21169
<21170=21172,21171
<21176=21177
<21177=21180,21179,21178
<21181=21182
<21182=21196,21183
<21183=21192,21188,21184
<21184=21185
<21185=21187,21186
<21188=21189
<21189=21191,21190
<21192=21193
<21193=21195,21194
<21196=21197
<21198=21260,21199
<21199=21250,21224,21200
<21200=21220,21201
<21201=21214,21208,21202
<21202=21203
<21203=21205,21204
<21205=21207,21206
<21208=21209
<21209=21211,21210
<21211=21213,21212
<21214=21215
<21215=21217,21216
<21217=21219,21218
<21220=21221
<21221=21223,21222
<21224=21225
<21225=21249,21248,21226
<21226=21247,21227
<21227=21245,21228
<21228=21243,21241,21237,21233,21229
<21229=21230
<21230=21232,21231
<21233=21234
<21234=21236,21235
<21237=21238
<21238=21240,21239
<21241=21242
<21243=21244
<21245=21246
<21250=21257,21254,21251
<21251=21253,21252
<21254=21256,21255
<21257=21259,21258
<21260=21261
<21261=21263,21262
<21263=21265,21264
<21265=21266
<21266=21268,21267
<21269=21270
<21270=21284,21283,21271
<21271=21282,21272
<21272=21280,21273
<21273=21276,21274
<21274=21275
<21276=21277
<21277=21279,21278
<21280=21281
<21285=21286
<21286=21288,21287
<21289=21290
<21290=21292,21291
<21292=21294,21293
<21295=21296
<21296=21302,21297
<21297=21299,21298
<21299=21301,21300
<21302=21304,21303
<21305=21306
<21306=21311,21310,21307
<21307=21309,21308
<21312=21313
<21313=21315,21314
<21364=21370,21369,21365
<21365=21366
<21366=21368,21367
<21370=22000,21993,21986,21982,21954,21947,21931,21915,21896,21773,21769,21417,21404,21380,21371
<21371=21372
<21372=21378,21373
<21373=21376,21374
<21374=21375
<21376=21377
<21378=21379
<21380=21388,21381
<21381=21382
<21382=21386,21383
<21383=21384
<21384=21385
<21386=21387
<21388=21389
<21389=21397,21390
<21390=21394,21391
<21391=21393,21392
<21394=21396,21395
<21397=21399,21398
<21399=21401,21400
<21401=21403,21402
<21404=21413,21405
<21405=21406
<21406=21407
<21407=21411,21408
<21408=21409
<21409=21410
<21411=21412
<21413=21414
<21414=21416,21415
<21417=21759,21757,21748,21418
<21418=21742,21735,21709,21684,21649,21535,21498,21481,21474,21424,21419
<21419=21420
<21420=21422,21421
<21422=21423
<21424=21470,21464,21461,21425
<21425=21437,21426
<21426=21427
<21427=21435,21428
<21428=21429
<21429=21430
<21430=21432,21431
<21432=21434,21433
<21435=21436
<21437=21453,21438
<21438=21439
<21439=21451,21440
<21440=21441
<21441=21442
<21442=21450,21443
<21443=21445,21444
<21445=21447,21446
<21447=21449,21448
<21451=21452
<21453=21454
<21454=21458,21455
<21455=21457,21456
<21458=21460,21459
<21461=21463,21462
<21464=21465
<21465=21469,21466
<21466=21468,21467
<21470=21471
<21471=21473,21472
<21474=21475
<21475=21479,21476
<21476=21477
<21477=21478
<21479=21480
<21481=21494,21482
<21482=21483
<21483=21484
<21484=21492,21485
<21485=21486
<21486=21487
<21487=21489,21488
<21489=21491,21490
<21492=21493
<21494=21495
<21495=21497,21496
<21498=21529,21499
<21499=21500
<21500=21501
<21501=21527,21502
<21502=21521,21515,21509,21503
<21503=21504
<21504=21506,21505
<21506=21508,21507
<21509=21510
<21510=21512,21511
<21512=21514,21513
<21515=21516
<21516=21518,21517
<21518=21520,21519
<21521=21522
<21522=21524,21523
<21524=21526,21525
<21527=21528
<21529=21530
<21530=21532,21531
<21532=21534,21533
<21535=21643,21563,21536
<21536=21537
<21537=21538
<21538=21539
<21539=21561,21540
<21540=21555,21549,21543,21541
<21541=21542
<21543=21544
<21544=21546,21545
<21546=21548,21547
<21549=21550
<21550=21552,21551
<21552=21554,21553
<21555=21556
<21556=21558,21557
<21558=21560,21559
<21561=21562
<21563=21564
<21564=21635,21610,21565
<21565=21566
<21566=21602,21577,21567
<21567=21568
<21568=21569
<21569=21575,21570
<21570=21571
<21571=21572
<21572=21574,21573
<21575=21576
<21577=21578
<21578=21600,21579
<21579=21594,21588,21582,21580
<21580=21581
<21582=21583
<21583=21585,21584
<21585=21587,21586
<21588=21589
<21589=21591,21590
<21591=21593,21592
<21594=21595
<21595=21597,21596
<21597=21599,21598
<21600=21601
<21602=21603
<21603=21605,21604
<21605=21607,21606
<21607=21609,21608
<21610=21611
<21611=21633,21612
<21612=21627,21621,21615,21613
<21613=21614
<21615=21616
<21616=21618,21617
<21618=21620,21619
<21621=21622
<21622=21624,21623
<21624=21626,21625
<21627=21628
<21628=21630,21629
<21630=21632,21631
<21633=21634
<21635=21636
<21636=21638,21637
<21638=21640,21639
<21640=21642,21641
<21643=21644
<21644=21648,21645
<21645=21647,21646
<21649=21670,21650
<21650=21664,21651
<21651=21652
<21652=21662,21653
<21653=21660,21654
<21654=21655
<21655=21657,21656
<21657=21659,21658
<21660=21661
<21662=21663
<21664=21665
<21665=21669,21666
<21666=21668,21667
<21670=21671
<21671=21677,21672
<21672=21674,21673
<21674=21676,21675
<21677=21681,21678
<21678=21680,21679
<21681=21683,21682
<21684=21705,21685
<21685=21693,21686
<21686=21687
<21687=21691,21688
<21688=21689
<21689=21690
<21691=21692
<21693=21695,21694
<21695=21696
<21696=21704,21697
<21697=21699,21698
<21699=21701,21700
<21701=21703,21702
<21705=21706
<21706=21708,21707
<21709=21727,21710
<21710=21711
<21711=21714,21712
<21712=21713
<21714=21715
<21715=21725,21716
<21716=21719,21717
<21717=21718
<21719=21720
<21720=21722,21721
<21722=21724,21723
<21725=21726
<21727=21728
<21728=21730,21729
<21730=21732,21731
<21732=21734,21733
<21735=21738,21736
<21736=21737
<21738=21739
<21739=21741,21740
<21742=21743
<21743=21747,21744
<21744=21746,21745
<21748=21752,21749
<21749=21751,21750
<21752=21756,21753
<21753=21755,21754
<21757=21758
<21759=21760
<21760=21764,21761
<21761=21763,21762
<21764=21768,21765
<21765=21767,21766
<21769=21770
<21770=21772,21771
<21773=21888,21774
<21774=21855,21831,21815,21795,21779,21775
<21775=21777,21776
<21777=21778
<21779=21787,21780
<21780=21781
<21781=21785,21782
<21782=21783
<21783=21784
<21785=21786
<21787=21788
<21788=21792,21789
<21789=21791,21790
<21792=21794,21793
<21795=21796
<21796=21814,21813,21797
<21797=21812,21798
<21798=21808,21807,21799
<21799=21805,21800
<21800=21803,21801
<21801=21802
<21803=21804
<21805=21806
<21808=21809
<21809=21811,21810
<21815=21823,21816
<21816=21817
<21817=21821,21818
<21818=21819
<21819=21820
<21821=21822
<21823=21824
<21824=21828,21825
<21825=21827,21826
<21828=21830,21829
<21831=21841,21832
<21832=21834,21833
<21834=21835
<21835=21839,21836
<21836=21837
<21837=21838
<21839=21840
<21841=21842
<21842=21852,21843
<21843=21845,21844
<21845=21847,21846
<21847=21849,21848
<21849=21851,21850
<21852=21854,21853
<21855=21868,21856
<21856=21857
<21857=21858
<21858=21866,21859
<21859=21864,21860
<21860=21861
<21861=21863,21862
<21864=21865
<21866=21867
<21868=21869
<21869=21879,21870
<21870=21872,21871
<21872=21874,21873
<21874=21876,21875
<21876=21878,21877
<21879=21887,21880
<21880=21882,21881
<21882=21884,21883
<21884=21886,21885
<21888=21889
<21889=21891,21890
<21891=21893,21892
<21893=21895,21894
<21896=21897
<21897=21914,21913,21898
<21898=21912,21899
<21899=21901,21900
<21901=21903,21902
<21903=21904
<21904=21906,21905
<21906=21908,21907
<21908=21909
<21909=21911,21910
<21915=21927,21916
<21916=21918,21917
<21918=21919
<21919=21925,21920
<21920=21921
<21921=21922
<21922=21924,21923
<21925=21926
<21927=21928
<21928=21930,21929
<21931=21943,21932
<21932=21934,21933
<21934=21935
<21935=21941,21936
<21936=21937
<21937=21938
<21938=21940,21939
<21941=21942
<21943=21944
<21944=21946,21945
<21947=21950,21948
<21948=21949
<21950=21951
<21951=21953,21952
<21954=21968,21955
<21955=21957,21956
<21957=21958
<21958=21960,21959
<21960=21961
<21961=21963,21962
<21963=21965,21964
<21965=21967,21966
<21968=21969
<21969=21979,21970
<21970=21972,21971
<21972=21974,21973
<21974=21976,21975
<21976=21978,21977
<21979=21981,21980
<21982=21983
<21983=21985,21984
<21986=21987
<21987=21992,21991,21988
<21988=21990,21989
<21993=21997,21994
<21994=21996,21995
<21997=21999,21998
<22000=22001
<22001=22003,22002
<22090=22096,22095,22091
<22091=22092
<22092=22094,22093
<22096=22146,22138,22131,22102,22097
<22097=22098
<22098=22100,22099
<22100=22101
<22102=22127,22119,22116,22103
<22103=22104
<22104=22114,22105
<22105=22106
<22106=22107
<22107=22109,22108
<22109=22111,22110
<22111=22113,22112
<22114=22115
<22116=22118,22117
<22119=22120
<22120=22126,22121
<22121=22123,22122
<22123=22125,22124
<22127=22128
<22128=22130,22129
<22131=22132
<22132=22136,22133
<22133=22134
<22134=22135
<22136=22137
<22138=22140,22139
<22140=22141
<22141=22143,22142
<22143=22145,22144
<22146=22147
<22147=22149,22148
<22166=22175,22174,22167
<22167=22171,22168
<22168=22170,22169
<22171=22173,22172
<22175=22803,22799,22795,22791,22784,22763,22744,22307,22183,22176
<22176=22177
<22177=22181,22178
<22178=22179
<22179=22180
<22181=22182
<22183=22297,22295,22286,22184
<22184=22234,22228,22222,22215,22190,22185
<22185=22186
<22186=22188,22187
<22188=22189
<22190=22211,22205,22202,22191
<22191=22192
<22192=22200,22193
<22193=22194
<22194=22195
<22195=22197,22196
<22197=22199,22198
<22200=22201
<22202=22204,22203
<22205=22206
<22206=22210,22207
<22207=22209,22208
<22211=22212
<22212=22214,22213
<22215=22216
<22216=22220,22217
<22217=22218
<22218=22219
<22220=22221
<22222=22224,22223
<22224=22225
<22225=22227,22226
<22228=22229
<22229=22233,22230
<22230=22232,22231
<22234=22282,22269,22235
<22235=22236
<22236=22237
<22237=22265,22252,22238
<22238=22239
<22239=22240
<22240=22242,22241
<22242=22243
<22243=22245,22244
<22245=22247,22246
<22247=22249,22248
<22249=22251,22250
<22252=22253
<22253=22255,22254
<22255=22256
<22256=22258,22257
<22258=22260,22259
<22260=22262,22261
<22262=22264,22263
<22265=22266
<22266=22268,22267
<22269=22270
<22270=22272,22271
<22272=22273
<22273=22275,22274
<22275=22277,22276
<22277=22279,22278
<22279=22281,22280
<22282=22283
<22283=22285,22284
<22286=22290,22287
<22287=22289,22288
<22290=22294,22291
<22291=22293,22292
<22295=22296
<22297=22298
<22298=22302,22299
<22299=22301,22300
<22302=22306,22303
<22303=22305,22304
<22307=22736,22308
<22308=22309
<22309=22722,22334,22310
<22310=22311
<22311=22324,22312
<22312=22313
<22313=22315,22314
<22315=22316
<22316=22322,22317
<22317=22320,22318
<22318=22319
<22320=22321
<22322=22323
<22324=22325
<22325=22327,22326
<22327=22329,22328
<22329=22331,22330
<22331=22333,22332
<22334=22717,22692,22680,22668,22660,22648,22636,22628,22616,22604,22596,22584,22572,22564,22557,22533,22509,22499,22490,22480,22471,22464,22457,22448,22439,22430,22421,22412,22407,22400,22393,22384,22375,22366,22357,22348,22343,22336,22335
<22336=22337
<22337=22341,22338
<22338=22339
<22339=22340
<22341=22342
<22343=22344
<22344=22346,22345
<22346=22347
<22348=22349
<22349=22355,22350
<22350=22351
<22351=22352
<22352=22354,22353
<22355=22356
<22357=22358
<22358=22364,22359
<22359=22360
<22360=22361
<22361=22363,22362
<22364=22365
<22366=22367
<22367=22373,22368
<22368=22369
<22369=22370
<22370=22372,22371
<22373=22374
<22375=22376
<22376=22382,22377
<22377=22378
<22378=22379
<22379=22381,22380
<22382=22383
<22384=22385
<22385=22391,22386
<22386=22387
<22387=22388
<22388=22390,22389
<22391=22392
<22393=22394
<22394=22398,22395
<22395=22396
<22396=22397
<22398=22399
<22400=22401
<22401=22405,22402
<22402=22403
<22403=22404
<22405=22406
<22407=22408
<22408=22410,22409
<22410=22411
<22412=22413
<22413=22419,22414
<22414=22415
<22415=22416
<22416=22418,22417
<22419=22420
<22421=22422
<22422=22428,22423
<22423=22424
<22424=22425
<22425=22427,22426
<22428=22429
<22430=22431
<22431=22437,22432
<22432=22433
<22433=22434
<22434=22436,22435
<22437=22438
<22439=22440
<22440=22446,22441
<22441=22442
<22442=22443
<22443=22445,22444
<22446=22447
<22448=22449
<22449=22455,22450
<22450=22451
<22451=22452
<22452=22454,22453
<22455=22456
<22457=22458
<22458=22462,22459
<22459=22460
<22460=22461
<22462=22463
<22464=22465
<22465=22469,22466
<22466=22467
<22467=22468
<22469=22470
<22471=22472
<22472=22478,22473
<22473=22476,22474
<22474=22475
<22476=22477
<22478=22479
<22480=22481
<22481=22487,22482
<22482=22484,22483
<22484=22486,22485
<22487=22489,22488
<22490=22491
<22491=22497,22492
<22492=22495,22493
<22493=22494
<22495=22496
<22497=22498
<22499=22500
<22500=22506,22501
<22501=22503,22502
<22503=22505,22504
<22506=22508,22507
<22509=22510
<22510=22530,22511
<22511=22525,22512
<22512=22514,22513
<22514=22520,22515
<22515=22517,22516
<22517=22519,22518
<22520=22522,22521
<22522=22524,22523
<22525=22527,22526
<22527=22529,22528
<22530=22532,22531
<22533=22534
<22534=22554,22535
<22535=22549,22536
<22536=22538,22537
<22538=22544,22539
<22539=22541,22540
<22541=22543,22542
<22544=22546,22545
<22546=22548,22547
<22549=22551,22550
<22551=22553,22552
<22554=22556,22555
<22557=22561,22558
<22558=22560,22559
<22561=22563,22562
<22564=22565
<22565=22567,22566
<22567=22569,22568
<22569=22571,22570
<22572=22573
<22573=22579,22574
<22574=22576,22575
<22576=22578,22577
<22579=22581,22580
<22581=22583,22582
<22584=22585
<22585=22591,22586
<22586=22588,22587
<22588=22590,22589
<22591=22593,22592
<22593=22595,22594
<22596=22597
<22597=22599,22598
<22599=22601,22600
<22601=22603,22602
<22604=22605
<22605=22611,22606
<22606=22608,22607
<22608=22610,22609
<22611=22613,22612
<22613=22615,22614
<22616=22617
<22617=22623,22618
<22618=22620,22619
<22620=22622,22621
<22623=22625,22624
<22625=22627,22626
<22628=22629
<22629=22631,22630
<22631=22633,22632
<22633=22635,22634
<22636=22637
<22637=22643,22638
<22638=22640,22639
<22640=22642,22641
<22643=22645,22644
<22645=22647,22646
<22648=22649
<22649=22655,22650
<22650=22652,22651
<22652=22654,22653
<22655=22657,22656
<22657=22659,22658
<22660=22661
<22661=22663,22662
<22663=22665,22664
<22665=22667,22666
<22668=22669
<22669=22675,22670
<22670=22672,22671
<22672=22674,22673
<22675=22677,22676
<22677=22679,22678
<22680=22681
<22681=22687,22682
<22682=22684,22683
<22684=22686,22685
<22687=22689,22688
<22689=22691,22690
<22692=22693
<22693=22716,22715,22694
<22694=22714,22695
<22695=22709,22696
<22696=22698,22697
<22698=22704,22699
<22699=22701,22700
<22701=22703,22702
<22704=22706,22705
<22706=22708,22707
<22709=22711,22710
<22711=22713,22712
<22717=22718
<22718=22721,22720,22719
<22722=22723
<22723=22733,22724
<22724=22726,22725
<22726=22728,22727
<22728=22730,22729
<22730=22732,22731
<22733=22735,22734
<22736=22737
<22737=22739,22738
<22739=22741,22740
<22741=22743,22742
<22744=22759,22745
<22745=22746
<22746=22747
<22747=22757,22748
<22748=22753,22749
<22749=22750
<22750=22752,22751
<22753=22754
<22754=22756,22755
<22757=22758
<22759=22760
<22760=22762,22761
<22763=22780,22764
<22764=22771,22765
<22765=22767,22766
<22767=22768
<22768=22770,22769
<22771=22772
<22772=22778,22773
<22773=22774
<22774=22775
<22775=22777,22776
<22778=22779
<22780=22781
<22781=22783,22782
<22784=22787,22785
<22785=22786
<22787=22788
<22788=22790,22789
<22791=22792
<22792=22794,22793
<22795=22796
<22796=22798,22797
<22799=22800
<22800=22802,22801
<22803=22804
<22804=22806,22805
<22871=22883,22882,22872
<22872=22879,22876,22873
<22873=22875,22874
<22876=22878,22877
<22879=22881,22880
<22883=23033,23029,22956,22947,22930,22913,22884
<22884=22905,22885
<22885=22886
<22886=22887
<22887=22903,22888
<22888=22897,22895,22889
<22889=22890
<22890=22892,22891
<22892=22894,22893
<22895=22896
<22897=22898
<22898=22900,22899
<22900=22902,22901
<22903=22904
<22905=22906
<22906=22908,22907
<22908=22910,22909
<22910=22912,22911
<22913=22926,22914
<22914=22915
<22915=22916
<22916=22924,22917
<22917=22920,22918
<22918=22919
<22920=22921
<22921=22923,22922
<22924=22925
<22926=22927
<22927=22929,22928
<22930=22943,22931
<22931=22932
<22932=22933
<22933=22941,22934
<22934=22937,22935
<22935=22936
<22937=22938
<22938=22940,22939
<22941=22942
<22943=22944
<22944=22946,22945
<22947=22948
<22948=22954,22949
<22949=22952,22950
<22950=22951
<22952=22953
<22954=22955
<22956=23023,23021,23016,22957
<22957=23012,23003,22989,22958
<22958=22985,22981,22978,22959
<22959=22960
<22960=22976,22961
<22961=22970,22968,22962
<22962=22963
<22963=22965,22964
<22965=22967,22966
<22968=22969
<22970=22971
<22971=22973,22972
<22973=22975,22974
<22976=22977
<22978=22980,22979
<22981=22982
<22982=22984,22983
<22985=22986
<22986=22988,22987
<22989=22999,22990
<22990=22991
<22991=22997,22992
<22992=22995,22993
<22993=22994
<22995=22996
<22997=22998
<22999=23000
<23000=23002,23001
<23003=23004
<23004=23010,23005
<23005=23008,23006
<23006=23007
<23008=23009
<23010=23011
<23012=23013
<23013=23015,23014
<23016=23020,23017
<23017=23019,23018
<23021=23022
<23023=23024
<23024=23028,23025
<23025=23027,23026
<23029=23030
<23030=23032,23031
<23033=23034
<23034=23036,23035
<23069=23075,23074,23070
<23070=23071
<23071=23073,23072
<23075=23199,23076
<23076=23189,23187,23182,23077
<23077=23171,23140,23109,23078
<23078=23079
<23079=23107,23080
<23080=23105,23097,23089,23081
<23081=23082
<23082=23084,23083
<23084=23086,23085
<23086=23088,23087
<23089=23090
<23090=23092,23091
<23092=23094,23093
<23094=23096,23095
<23097=23098
<23098=23100,23099
<23100=23102,23101
<23102=23104,23103
<23105=23106
<23107=23108
<23109=23110
<23110=23138,23111
<23111=23136,23128,23120,23112
<23112=23113
<23113=23115,23114
<23115=23117,23116
<23117=23119,23118
<23120=23121
<23121=23123,23122
<23123=23125,23124
<23125=23127,23126
<23128=23129
<23129=23131,23130
<23131=23133,23132
<23133=23135,23134
<23136=23137
<23138=23139
<23140=23141
<23141=23169,23142
<23142=23167,23159,23151,23143
<23143=23144
<23144=23146,23145
<23146=23148,23147
<23148=23150,23149
<23151=23152
<23152=23154,23153
<23154=23156,23155
<23156=23158,23157
<23159=23160
<23160=23162,23161
<23162=23164,23163
<23164=23166,23165
<23167=23168
<23169=23170
<23171=23172
<23172=23180,23173
<23173=23178,23174
<23174=23175
<23175=23177,23176
<23178=23179
<23180=23181
<23182=23186,23183
<23183=23185,23184
<23187=23188
<23189=23190
<23190=23191
<23191=23198,23197,23192
<23192=23196,23193
<23193=23195,23194
<23199=23200
<23200=23205,23204,23201
<23201=23203,23202
<23221=23227,23226,23222
<23222=23223
<23223=23225,23224
<23227=23808,23801,23797,23793,23789,23785,23781,23774,23758,23739,23733,23722,23711,23701,23694,23690,23642,23638,23631,23624,23616,23608,23602,23590,23578,23566,23554,23542,23530,23518,23506,23494,23262,23251,23242,23235,23228
<23228=23229
<23229=23233,23230
<23230=23231
<23231=23232
<23233=23234
<23235=23236
<23236=23240,23237
<23237=23238
<23238=23239
<23240=23241
<23242=23243
<23243=23249,23244
<23244=23247,23245
<23245=23246
<23247=23248
<23249=23250
<23251=23252
<23252=23260,23253
<23253=23258,23254
<23254=23255
<23255=23257,23256
<23258=23259
<23260=23261
<23262=23490,23486,23483,23263
<23263=23476,23468,23460,23454,23439,23424,23401,23378,23366,23354,23342,23330,23303,23276,23264
<23264=23265
<23265=23269,23266
<23266=23268,23267
<23269=23271,23270
<23271=23273,23272
<23273=23275,23274
<23276=23277
<23277=23296,23278
<23278=23294,23279
<23279=23280
<23280=23281
<23281=23287,23282
<23282=23284,23283
<23284=23286,23285
<23287=23289,23288
<23289=23291,23290
<23291=23293,23292
<23294=23295
<23296=23298,23297
<23298=23300,23299
<23300=23302,23301
<23303=23304
<23304=23323,23305
<23305=23321,23306
<23306=23307
<23307=23308
<23308=23314,23309
<23309=23311,23310
<23311=23313,23312
<23314=23316,23315
<23316=23318,23317
<23318=23320,23319
<23321=23322
<23323=23325,23324
<23325=23327,23326
<23327=23329,23328
<23330=23331
<23331=23335,23332
<23332=23334,23333
<23335=23337,23336
<23337=23339,23338
<23339=23341,23340
<23342=23343
<23343=23347,23344
<23344=23346,23345
<23347=23349,23348
<23349=23351,23350
<23351=23353,23352
<23354=23355
<23355=23359,23356
<23356=23358,23357
<23359=23361,23360
<23361=23363,23362
<23363=23365,23364
<23366=23367
<23367=23371,23368
<23368=23370,23369
<23371=23373,23372
<23373=23375,23374
<23375=23377,23376
<23378=23379
<23379=23394,23380
<23380=23392,23381
<23381=23382
<23382=23383
<23383=23389,23384
<23384=23386,23385
<23386=23388,23387
<23389=23391,23390
<23392=23393
<23394=23396,23395
<23396=23398,23397
<23398=23400,23399
<23401=23402
<23402=23417,23403
<23403=23415,23404
<23404=23405
<23405=23406
<23406=23412,23407
<23407=23409,23408
<23409=23411,23410
<23412=23414,23413
<23415=23416
<23417=23419,23418
<23419=23421,23420
<23421=23423,23422
<23424=23425
<23425=23438,23426
<23426=23436,23427
<23427=23428
<23428=23429
<23429=23435,23430
<23430=23434,23431
<23431=23433,23432
<23436=23437
<23439=23440
<23440=23453,23441
<23441=23451,23442
<23442=23443
<23443=23444
<23444=23450,23445
<23445=23449,23446
<23446=23448,23447
<23451=23452
<23454=23455
<23455=23457,23456
<23457=23459,23458
<23460=23461
<23461=23465,23462
<23462=23464,23463
<23465=23467,23466
<23468=23469
<23469=23473,23470
<23470=23472,23471
<23473=23475,23474
<23476=23477
<23477=23482,23478
<23478=23480,23479
<23480=23481
<23483=23485,23484
<23486=23487
<23487=23489,23488
<23490=23491
<23491=23493,23492
<23494=23495
<23495=23499,23496
<23496=23498,23497
<23499=23501,23500
<23501=23503,23502
<23503=23505,23504
<23506=23507
<23507=23511,23508
<23508=23510,23509
<23511=23513,23512
<23513=23515,23514
<23515=23517,23516
<23518=23519
<23519=23523,23520
<23520=23522,23521
<23523=23525,23524
<23525=23527,23526
<23527=23529,23528
<23530=23531
<23531=23535,23532
<23532=23534,23533
<23535=23537,23536
<23537=23539,23538
<23539=23541,23540
<23542=23543
<23543=23547,23544
<23544=23546,23545
<23547=23549,23548
<23549=23551,23550
<23551=23553,23552
<23554=23555
<23555=23559,23556
<23556=23558,23557
<23559=23561,23560
<23561=23563,23562
<23563=23565,23564
<23566=23567
<23567=23571,23568
<23568=23570,23569
<23571=23573,23572
<23573=23575,23574
<23575=23577,23576
<23578=23579
<23579=23583,23580
<23580=23582,23581
<23583=23585,23584
<23585=23587,23586
<23587=23589,23588
<23590=23591
<23591=23595,23592
<23592=23594,23593
<23595=23597,23596
<23597=23599,23598
<23599=23601,23600
<23602=23603
<23603=23605,23604
<23605=23607,23606
<23608=23609
<23609=23613,23610
<23610=23612,23611
<23613=23615,23614
<23616=23617
<23617=23621,23618
<23618=23620,23619
<23621=23623,23622
<23624=23625
<23625=23630,23626
<23626=23628,23627
<23628=23629
<23631=23632
<23632=23637,23633
<23633=23635,23634
<23635=23636
<23638=23639
<23639=23641,23640
<23642=23686,23682,23679,23643
<23643=23665,23644
<23644=23655,23645
<23645=23646
<23646=23654,23647
<23647=23651,23648
<23648=23650,23649
<23651=23653,23652
<23655=23656
<23656=23658,23657
<23658=23662,23659
<23659=23661,23660
<23662=23664,23663
<23665=23666
<23666=23676,23667
<23667=23669,23668
<23669=23673,23670
<23670=23672,23671
<23673=23675,23674
<23676=23678,23677
<23679=23681,23680
<23682=23683
<23683=23685,23684
<23686=23687
<23687=23689,23688
<23690=23691
<23691=23693,23692
<23694=23695
<23695=23699,23696
<23696=23697
<23697=23698
<23699=23700
<23701=23702
<23702=23710,23703
<23703=23709,23704
<23704=23706,23705
<23706=23708,23707
<23711=23712
<23712=23720,23713
<23713=23716,23714
<23714=23715
<23716=23717
<23717=23719,23718
<23720=23721
<23722=23723
<23723=23731,23724
<23724=23727,23725
<23725=23726
<23727=23728
<23728=23730,23729
<23731=23732
<23733=23734
<23734=23738,23735
<23735=23737,23736
<23739=23751,23740
<23740=23742,23741
<23742=23743
<23743=23749,23744
<23744=23747,23745
<23745=23746
<23747=23748
<23749=23750
<23751=23752
<23752=23757,23753
<23753=23755,23754
<23755=23756
<23758=23770,23759
<23759=23761,23760
<23761=23762
<23762=23768,23763
<23763=23766,23764
<23764=23765
<23766=23767
<23768=23769
<23770=23771
<23771=23773,23772
<23774=23778,23775
<23775=23777,23776
<23778=23780,23779
<23781=23782
<23782=23784,23783
<23785=23786
<23786=23788,23787
<23789=23790
<23790=23792,23791
<23793=23794
<23794=23796,23795
<23797=23798
<23798=23800,23799
<23801=23805,23802
<23802=23804,23803
<23805=23807,23806
<23808=23809
<23809=23811,23810
<23859=23865,23864,23860
<23860=23861
<23861=23863,23862
<23865=24437,24430,24426,24422,24418,24414,24398,24379,24373,24362,24351,24341,24334,24327,24279,24275,24268,24252,24238,24231,24059,24042,23900,23889,23880,23873,23866
<23866=23867
<23867=23871,23868
<23868=23869
<23869=23870
<23871=23872
<23873=23874
<23874=23878,23875
<23875=23876
<23876=23877
<23878=23879
<23880=23881
<23881=23887,23882
<23882=23885,23883
<23883=23884
<23885=23886
<23887=23888
<23889=23890
<23890=23898,23891
<23891=23896,23892
<23892=23893
<23893=23895,23894
<23896=23897
<23898=23899
<23900=24038,24032,24029,23901
<23901=24023,24016,24008,24000,23994,23977,23956,23937,23902
<23902=23929,23925,23922,23903
<23903=23904
<23904=23920,23905
<23905=23914,23912,23906
<23906=23907
<23907=23909,23908
<23909=23911,23910
<23912=23913
<23914=23915
<23915=23917,23916
<23917=23919,23918
<23920=23921
<23922=23924,23923
<23925=23926
<23926=23928,23927
<23929=23930
<23930=23931
<23931=23936,23935,23932
<23932=23934,23933
<23937=23938
<23938=23954,23939
<23939=23948,23946,23942,23940
<23940=23941
<23942=23943
<23943=23945,23944
<23946=23947
<23948=23949
<23949=23951,23950
<23951=23953,23952
<23954=23955
<23956=23957
<23957=23975,23958
<23958=23969,23967,23963,23959
<23959=23960
<23960=23962,23961
<23963=23964
<23964=23966,23965
<23967=23968
<23969=23970
<23970=23972,23971
<23972=23974,23973
<23975=23976
<23977=23978
<23978=23992,23979
<23979=23986,23984,23982,23980
<23980=23981
<23982=23983
<23984=23985
<23986=23987
<23987=23989,23988
<23989=23991,23990
<23992=23993
<23994=23995
<23995=23997,23996
<23997=23999,23998
<24000=24001
<24001=24005,24002
<24002=24004,24003
<24005=24007,24006
<24008=24009
<24009=24013,24010
<24010=24012,24011
<24013=24015,24014
<24016=24017
<24017=24022,24018
<24018=24020,24019
<24020=24021
<24023=24024
<24024=24028,24025
<24025=24027,24026
<24029=24031,24030
<24032=24033
<24033=24037,24034
<24034=24036,24035
<24038=24039
<24039=24041,24040
<24042=24043
<24043=24058,24044
<24044=24056,24045
<24045=24046
<24046=24047
<24047=24051,24048
<24048=24050,24049
<24051=24053,24052
<24053=24055,24054
<24056=24057
<24059=24227,24221,24218,24060
<24060=24061
<24061=24214,24208,24205,24062
<24062=24199,24184,24177,24169,24161,24155,24138,24119,24098,24063
<24063=24090,24086,24083,24064
<24064=24065
<24065=24081,24066
<24066=24075,24073,24067
<24067=24068
<24068=24070,24069
<24070=24072,24071
<24073=24074
<24075=24076
<24076=24078,24077
<24078=24080,24079
<24081=24082
<24083=24085,24084
<24086=24087
<24087=24089,24088
<24090=24091
<24091=24092
<24092=24097,24096,24093
<24093=24095,24094
<24098=24099
<24099=24117,24100
<24100=24111,24109,24105,24101
<24101=24102
<24102=24104,24103
<24105=24106
<24106=24108,24107
<24109=24110
<24111=24112
<24112=24114,24113
<24114=24116,24115
<24117=24118
<24119=24120
<24120=24136,24121
<24121=24130,24128,24126,24122
<24122=24123
<24123=24125,24124
<24126=24127
<24128=24129
<24130=24131
<24131=24133,24132
<24133=24135,24134
<24136=24137
<24138=24139
<24139=24153,24140
<24140=24147,24145,24143,24141
<24141=24142
<24143=24144
<24145=24146
<24147=24148
<24148=24150,24149
<24150=24152,24151
<24153=24154
<24155=24156
<24156=24158,24157
<24158=24160,24159
<24161=24162
<24162=24166,24163
<24163=24165,24164
<24166=24168,24167
<24169=24170
<24170=24174,24171
<24171=24173,24172
<24174=24176,24175
<24177=24178
<24178=24183,24179
<24179=24181,24180
<24181=24182
<24184=24185
<24185=24198,24186
<24186=24196,24187
<24187=24188
<24188=24189
<24189=24193,24190
<24190=24192,24191
<24193=24195,24194
<24196=24197
<24199=24200
<24200=24204,24201
<24201=24203,24202
<24205=24207,24206
<24208=24209
<24209=24213,24210
<24210=24212,24211
<24214=24215
<24215=24217,24216
<24218=24220,24219
<24221=24222
<24222=24226,24223
<24223=24225,24224
<24227=24228
<24228=24230,24229
<24231=24235,24232
<24232=24234,24233
<24235=24237,24236
<24238=24239
<24239=24251,24250,24240
<24240=24249,24241
<24241=24247,24242
<24242=24243
<24243=24244
<24244=24246,24245
<24247=24248
<24252=24253
<24253=24267,24266,24254
<24254=24265,24255
<24255=24263,24256
<24256=24257
<24257=24258
<24258=24262,24259
<24259=24261,24260
<24263=24264
<24268=24269
<24269=24274,24270
<24270=24272,24271
<24272=24273
<24275=24276
<24276=24278,24277
<24279=24323,24319,24316,24280
<24280=24302,24281
<24281=24292,24282
<24282=24283
<24283=24291,24284
<24284=24288,24285
<24285=24287,24286
<24288=24290,24289
<24292=24293
<24293=24295,24294
<24295=24299,24296
<24296=24298,24297
<24299=24301,24300
<24302=24303
<24303=24313,24304
<24304=24306,24305
<24306=24310,24307
<24307=24309,24308
<24310=24312,24311
<24313=24315,24314
<24316=24318,24317
<24319=24320
<24320=24322,24321
<24323=24324
<24324=24326,24325
<24327=24328
<24328=24333,24332,24329
<24329=24331,24330
<24334=24335
<24335=24339,24336
<24336=24337
<24337=24338
<24339=24340
<24341=24342
<24342=24350,24343
<24343=24349,24344
<24344=24346,24345
<24346=24348,24347
<24351=24352
<24352=24360,24353
<24353=24356,24354
<24354=24355
<24356=24357
<24357=24359,24358
<24360=24361
<24362=24363
<24363=24371,24364
<24364=24367,24365
<24365=24366
<24367=24368
<24368=24370,24369
<24371=24372
<24373=24374
<24374=24378,24375
<24375=24377,24376
<24379=24391,24380
<24380=24382,24381
<24382=24383
<24383=24389,24384
<24384=24387,24385
<24385=24386
<24387=24388
<24389=24390
<24391=24392
<24392=24397,24393
<24393=24395,24394
<24395=24396
<24398=24410,24399
<24399=24401,24400
<24401=24402
<24402=24408,24403
<24403=24406,24404
<24404=24405
<24406=24407
<24408=24409
<24410=24411
<24411=24413,24412
<24414=24415
<24415=24417,24416
<24418=24419
<24419=24421,24420
<24422=24423
<24423=24425,24424
<24426=24427
<24427=24429,24428
<24430=24434,24431
<24431=24433,24432
<24434=24436,24435
<24437=24441,24438
<24438=24440,24439
<24441=24443,24442
<24493=24505,24504,24494
<24494=24501,24498,24495
<24495=24497,24496
<24498=24500,24499
<24501=24503,24502
<24505=25144,24506,24530,24544,24562,24576,24600,24614,24632,24646,24666,24686,24692,24698,24803,24811,24817,24825,24833,24841,24849,24857,24865,24873,24881,24887,24893,24906,24919,24932,24945,24964,24973,24982,24992,25022,25029,25035,25043,25052,25062,25072,25076,25081,25086,25093,25106,25116,25123,25133,25137
<24506=24507
<24507=24525,24508
<24508=24516,24509
<24509=24511,24510
<24511=24513,24512
<24513=24515,24514
<24516=24524,24517
<24517=24523,24518
<24518=24520,24519
<24520=24522,24521
<24525=24527,24526
<24527=24529,24528
<24530=24531
<24531=24543,24532
<24532=24540,24533
<24533=24535,24534
<24535=24537,24536
<24537=24539,24538
<24540=24542,24541
<24544=24545
<24545=24561,24546
<24546=24560,24547
<24547=24555,24548
<24548=24550,24549
<24550=24552,24551
<24552=24554,24553
<24555=24557,24556
<24557=24559,24558
<24562=24563
<24563=24571,24564
<24564=24570,24565
<24565=24567,24566
<24567=24569,24568
<24571=24573,24572
<24573=24575,24574
<24576=24577
<24577=24595,24578
<24578=24586,24579
<24579=24581,24580
<24581=24583,24582
<24583=24585,24584
<24586=24594,24587
<24587=24593,24588
<24588=24590,24589
<24590=24592,24591
<24595=24597,24596
<24597=24599,24598
<24600=24601
<24601=24613,24602
<24602=24610,24603
<24603=24605,24604
<24605=24607,24606
<24607=24609,24608
<24610=24612,24611
<24614=24615
<24615=24631,24616
<24616=24630,24617
<24617=24625,24618
<24618=24620,24619
<24620=24622,24621
<24622=24624,24623
<24625=24627,24626
<24627=24629,24628
<24632=24633
<24633=24641,24634
<24634=24640,24635
<24635=24637,24636
<24637=24639,24638
<24641=24643,24642
<24643=24645,24644
<24646=24647
<24647=24661,24648
<24648=24660,24649
<24649=24659,24650
<24650=24658,24651
<24651=24653,24652
<24653=24655,24654
<24655=24657,24656
<24661=24663,24662
<24663=24665,24664
<24666=24667
<24667=24681,24668
<24668=24680,24669
<24669=24679,24670
<24670=24678,24671
<24671=24673,24672
<24673=24675,24674
<24675=24677,24676
<24681=24683,24682
<24683=24685,24684
<24686=24687
<24687=24691,24688
<24688=24690,24689
<24692=24693
<24693=24697,24694
<24694=24696,24695
<24698=24799,24795,24792,24699
<24699=24774,24756,24700
<24700=24752,24741,24701
<24701=24702
<24702=24731,24703
<24703=24727,24716,24704
<24704=24705
<24705=24706
<24706=24712,24707
<24707=24708
<24708=24709
<24709=24711,24710
<24712=24713
<24713=24715,24714
<24716=24717
<24717=24723,24718
<24718=24719
<24719=24720
<24720=24722,24721
<24723=24724
<24724=24726,24725
<24727=24728
<24728=24730,24729
<24731=24737,24732
<24732=24733
<24733=24734
<24734=24736,24735
<24737=24738
<24738=24740,24739
<24741=24742
<24742=24748,24743
<24743=24744
<24744=24745
<24745=24747,24746
<24748=24749
<24749=24751,24750
<24752=24753
<24753=24755,24754
<24756=24757
<24757=24773,24758
<24758=24766,24759
<24759=24765,24760
<24760=24762,24761
<24762=24764,24763
<24766=24772,24767
<24767=24769,24768
<24769=24771,24770
<24774=24775
<24775=24791,24776
<24776=24784,24777
<24777=24783,24778
<24778=24780,24779
<24780=24782,24781
<24784=24790,24785
<24785=24787,24786
<24787=24789,24788
<24792=24794,24793
<24795=24796
<24796=24798,24797
<24799=24800
<24800=24802,24801
<24803=24804
<24804=24810,24805
<24805=24809,24806
<24806=24808,24807
<24811=24812
<24812=24816,24813
<24813=24815,24814
<24817=24818
<24818=24820,24819
<24820=24822,24821
<24822=24824,24823
<24825=24826
<24826=24828,24827
<24828=24830,24829
<24830=24832,24831
<24833=24834
<24834=24836,24835
<24836=24838,24837
<24838=24840,24839
<24841=24842
<24842=24844,24843
<24844=24846,24845
<24846=24848,24847
<24849=24850
<24850=24852,24851
<24852=24854,24853
<24854=24856,24855
<24857=24858
<24858=24860,24859
<24860=24862,24861
<24862=24864,24863
<24865=24866
<24866=24868,24867
<24868=24870,24869
<24870=24872,24871
<24873=24874
<24874=24876,24875
<24876=24878,24877
<24878=24880,24879
<24881=24882
<24882=24886,24883
<24883=24885,24884
<24887=24888
<24888=24892,24889
<24889=24891,24890
<24893=24894
<24894=24905,24895
<24895=24903,24896
<24896=24901,24897
<24897=24898
<24898=24900,24899
<24901=24902
<24903=24904
<24906=24907
<24907=24918,24908
<24908=24916,24909
<24909=24914,24910
<24910=24911
<24911=24913,24912
<24914=24915
<24916=24917
<24919=24920
<24920=24931,24921
<24921=24929,24922
<24922=24927,24923
<24923=24924
<24924=24926,24925
<24927=24928
<24929=24930
<24932=24933
<24933=24944,24934
<24934=24942,24935
<24935=24940,24936
<24936=24937
<24937=24939,24938
<24940=24941
<24942=24943
<24945=24946
<24946=24962,24947
<24947=24956,24952,24948
<24948=24949
<24949=24951,24950
<24952=24953
<24953=24955,24954
<24956=24957
<24957=24961,24958
<24958=24960,24959
<24962=24963
<24964=24965
<24965=24972,24966
<24966=24970,24967
<24967=24968
<24968=24969
<24970=24971
<24973=24974
<24974=24981,24975
<24975=24979,24976
<24976=24977
<24977=24978
<24979=24980
<24982=24983
<24983=24991,24984
<24984=24988,24985
<24985=24987,24986
<24988=24990,24989
<24992=25018,25012,25009,24993
<24993=24994
<24994=24995
<24995=25007,24996
<24996=25001,24999,24997
<24997=24998
<24999=25000
<25001=25002
<25002=25004,25003
<25004=25006,25005
<25007=25008
<25009=25011,25010
<25012=25013
<25013=25017,25014
<25014=25016,25015
<25018=25019
<25019=25021,25020
<25022=25025,25023
<25023=25024
<25025=25026
<25026=25028,25027
<25029=25030
<25030=25034,25031
<25031=25033,25032
<25035=25036
<25036=25042,25037
<25037=25041,25038
<25038=25040,25039
<25043=25044
<25044=25050,25045
<25045=25048,25046
<25046=25047
<25048=25049
<25050=25051
<25052=25058,25053
<25053=25054
<25054=25055
<25055=25057,25056
<25058=25059
<25059=25061,25060
<25062=25068,25063
<25063=25064
<25064=25065
<25065=25067,25066
<25068=25069
<25069=25071,25070
<25072=25073
<25073=25075,25074
<25076=25077
<25077=25080,25079,25078
<25081=25082
<25082=25085,25084,25083
<25086=25090,25087
<25087=25089,25088
<25090=25092,25091
<25093=25103,25100,25097,25094
<25094=25096,25095
<25097=25099,25098
<25100=25102,25101
<25103=25105,25104
<25106=25113,25110,25107
<25107=25109,25108
<25110=25112,25111
<25113=25115,25114
<25116=25120,25117
<25117=25119,25118
<25120=25122,25121
<25123=25130,25127,25124
<25124=25126,25125
<25127=25129,25128
<25130=25132,25131
<25133=25134
<25134=25136,25135
<25137=25141,25138
<25138=25140,25139
<25141=25143,25142
<25144=25145
<25145=25147,25146
<25206=25218,25217,25207
<25207=25214,25211,25208
<25208=25210,25209
<25211=25213,25212
<25214=25216,25215
<25218=25245,25219
<25219=25239,25237,25232,25220
<25220=25221
<25221=25222
<25222=25230,25223
<25223=25228,25226,25224
<25224=25225
<25226=25227
<25228=25229
<25230=25231
<25232=25236,25233
<25233=25235,25234
<25237=25238
<25239=25240
<25240=25244,25241
<25241=25243,25242
<25245=25246
<25246=25248,25247
