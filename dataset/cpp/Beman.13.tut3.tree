>3	FunctionDef	main (int argc , char * argv [ ])
>4	ParameterList	int argc , char * argv [ ]
>5	Parameter	 
>6	Identifier	argv
>7	ParameterType	char * [ ]
>8	Parameter	 
>9	Identifier	argc
>10	ParameterType	int
>11	ReturnType	int
>12	CompoundStatement	 
>13	ReturnStatement	 
>14	PrimaryExpression	0
>15	BlockStarter	 
>16	CompoundStatement	 
>17	ExpressionStatement	cout << ex . what ( ) << '\n'
>18	ShiftExpression	cout << ex . what ( ) << '\n'
>19	ShiftExpression	ex . what ( ) << '\n'
>20	PrimaryExpression	'\n'
>21	CallExpression	ex . what ( )
>22	ArgumentList	 
>23	Callee	ex . what
>24	MemberAccess	ex . what
>25	Identifier	what
>26	Identifier	ex
>27	Identifier	cout
>28	Identifier	ex
>29	BlockStarter	 
>30	CompoundStatement	 
>31	IfStatement	if ( exists ( p ) )
>32	ElseStatement	else
>33	ExpressionStatement	cout << p << \" does not exist\n\"
>34	ShiftExpression	cout << p << \" does not exist\n\"
>35	ShiftExpression	p << \" does not exist\n\"
>36	PrimaryExpression	\" does not exist\n\"
>37	Identifier	p
>38	Identifier	cout
>39	CompoundStatement	 
>40	IfStatement	if ( is_regular_file ( p ) )
>41	ElseStatement	else
>42	IfStatement	if ( is_directory ( p ) )
>43	ElseStatement	else
>44	ExpressionStatement	cout << p << \" exists, but is neither a regular file nor a directory\n\"
>45	ShiftExpression	cout << p << \" exists, but is neither a regular file nor a directory\n\"
>46	ShiftExpression	p << \" exists, but is neither a regular file nor a directory\n\"
>47	PrimaryExpression	\" exists, but is neither a regular file nor a directory\n\"
>48	Identifier	p
>49	Identifier	cout
>50	CompoundStatement	 
>51	ExpressionStatement	copy ( directory_iterator ( p ) , directory_iterator ( ) , ostream_iterator < directory_entry > ( cout , \"\n\" ) )
>52	CallExpression	copy ( directory_iterator ( p ) , directory_iterator ( ) , ostream_iterator < directory_entry > ( cout , \"\n\" ) )
>53	ArgumentList	directory_iterator ( p )
>54	Argument	ostream_iterator < directory_entry > ( cout , \"\n\" )
>55	RelationalExpression	ostream_iterator < directory_entry > ( cout , \"\n\" )
>56	RelationalExpression	directory_entry > ( cout , \"\n\" )
>57	Expression	cout , \"\n\"
>58	PrimaryExpression	\"\n\"
>59	Identifier	cout
>60	Identifier	directory_entry
>61	Identifier	ostream_iterator
>62	Argument	directory_iterator ( )
>63	CallExpression	directory_iterator ( )
>64	ArgumentList	 
>65	Callee	directory_iterator
>66	Identifier	directory_iterator
>67	Argument	directory_iterator ( p )
>68	CallExpression	directory_iterator ( p )
>69	ArgumentList	p
>70	Argument	p
>71	Identifier	p
>72	Callee	directory_iterator
>73	Identifier	directory_iterator
>74	Callee	copy
>75	Identifier	copy
>76	ExpressionStatement	cout << p << \" is a directory containing
>77	ShiftExpression	cout << p << \" is a directory containing
>78	ShiftExpression	p << \" is a directory containing
>79	PrimaryExpression	\" is a directory containing
>80	Identifier	p
>81	Identifier	cout
>82	Condition	is_directory ( p )
>83	CallExpression	is_directory ( p )
>84	ArgumentList	p
>85	Argument	p
>86	Identifier	p
>87	Callee	is_directory
>88	Identifier	is_directory
>89	ExpressionStatement	cout << p << \" size is \" << file_size ( p ) << '\n'
>90	ShiftExpression	cout << p << \" size is \" << file_size ( p ) << '\n'
>91	ShiftExpression	p << \" size is \" << file_size ( p ) << '\n'
>92	ShiftExpression	\" size is \" << file_size ( p ) << '\n'
>93	ShiftExpression	file_size ( p ) << '\n'
>94	PrimaryExpression	'\n'
>95	CallExpression	file_size ( p )
>96	ArgumentList	p
>97	Argument	p
>98	Identifier	p
>99	Callee	file_size
>100	Identifier	file_size
>101	PrimaryExpression	\" size is \"
>102	Identifier	p
>103	Identifier	cout
>104	Condition	is_regular_file ( p )
>105	CallExpression	is_regular_file ( p )
>106	ArgumentList	p
>107	Argument	p
>108	Identifier	p
>109	Callee	is_regular_file
>110	Identifier	is_regular_file
>111	Condition	exists ( p )
>112	CallExpression	exists ( p )
>113	ArgumentList	p
>114	Argument	p
>115	Identifier	p
>116	Callee	exists
>117	Identifier	exists
>118	IdentifierDeclStatement	 
>119	IdentifierDecl	p ( argv [ 1 ] )
>120	ArrayIndexing	argv [ 1 ]
>121	PrimaryExpression	1
>122	Identifier	argv
>123	Identifier	p
>124	IdentifierDeclType	path
>125	IfStatement	if ( argc < 2 )
>126	CompoundStatement	 
>127	ReturnStatement	 
>128	PrimaryExpression	1
>129	ExpressionStatement	 
>130	ShiftExpression	cout << \"Usage
>131	PrimaryExpression	\"Usage
>132	Identifier	cout
>133	Condition	 
>134	RelationalExpression	argc < 2
>135	PrimaryExpression	2
>136	Identifier	argc
<3=12,11,4
<4=8,5
<5=7,6
<8=10,9
<12=125,118,29,15,13
<13=14
<15=28,16
<16=17
<17=18
<18=27,19
<19=21,20
<21=23,22
<23=24
<24=26,25
<29=30
<30=31
<31=111,39,32
<32=33
<33=34
<34=38,35
<35=37,36
<39=40
<40=104,89,41
<41=42
<42=82,50,43
<43=44
<44=45
<45=49,46
<46=48,47
<50=76,51
<51=52
<52=74,53
<53=67,62,54
<54=55
<55=61,56
<56=60,57
<57=59,58
<62=63
<63=65,64
<65=66
<67=68
<68=72,69
<69=70
<70=71
<72=73
<74=75
<76=77
<77=81,78
<78=80,79
<82=83
<83=87,84
<84=85
<85=86
<87=88
<89=90
<90=103,91
<91=102,92
<92=101,93
<93=95,94
<95=99,96
<96=97
<97=98
<99=100
<104=105
<105=109,106
<106=107
<107=108
<109=110
<111=112
<112=116,113
<113=114
<114=115
<116=117
<118=119
<119=124,123,120
<120=122,121
<125=133,126
<126=129,127
<127=128
<129=130
<130=132,131
<133=134
<134=136,135
