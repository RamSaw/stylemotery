>3	FunctionDef	NyARCameraDistortionFactor 
>4	ParameterList	const NyARCameraDistortionFactor & i_ref
>5	Parameter	 
>6	Identifier	i_ref
>7	ParameterType	const NyARCameraDistortionFactor &
>8	ReturnType	void
>9	CompoundStatement	 
>10	ReturnStatement	 
>11	ExpressionStatement	 
>12	AssignmentExpr	this -> _f3 = i_ref . _f3
>13	MemberAccess	i_ref . _f3
>14	Identifier	_f3
>15	Identifier	i_ref
>16	PtrMemberAccess	this -> _f3
>17	Identifier	_f3
>18	Identifier	this
>19	ExpressionStatement	 
>20	AssignmentExpr	this -> _f2 = i_ref . _f2
>21	MemberAccess	i_ref . _f2
>22	Identifier	_f2
>23	Identifier	i_ref
>24	PtrMemberAccess	this -> _f2
>25	Identifier	_f2
>26	Identifier	this
>27	ExpressionStatement	 
>28	AssignmentExpr	this -> _f1 = i_ref . _f1
>29	MemberAccess	i_ref . _f1
>30	Identifier	_f1
>31	Identifier	i_ref
>32	PtrMemberAccess	this -> _f1
>33	Identifier	_f1
>34	Identifier	this
>35	ExpressionStatement	 
>36	AssignmentExpr	this -> _f0 = i_ref . _f0
>37	MemberAccess	i_ref . _f0
>38	Identifier	_f0
>39	Identifier	i_ref
>40	PtrMemberAccess	this -> _f0
>41	Identifier	_f0
>42	Identifier	this
>57	FunctionDef	NyARCameraDistortionFactor 
>58	ParameterList	const double i_factor [ ]
>59	Parameter	 
>60	Identifier	i_factor
>61	ParameterType	const double [ ]
>62	ReturnType	void
>63	CompoundStatement	 
>64	ReturnStatement	 
>65	ExpressionStatement	 
>66	AssignmentExpr	this -> _f3 = i_factor [ 3 ]
>67	ArrayIndexing	i_factor [ 3 ]
>68	PrimaryExpression	3
>69	Identifier	i_factor
>70	PtrMemberAccess	this -> _f3
>71	Identifier	_f3
>72	Identifier	this
>73	ExpressionStatement	 
>74	AssignmentExpr	this -> _f2 = i_factor [ 2 ]
>75	ArrayIndexing	i_factor [ 2 ]
>76	PrimaryExpression	2
>77	Identifier	i_factor
>78	PtrMemberAccess	this -> _f2
>79	Identifier	_f2
>80	Identifier	this
>81	ExpressionStatement	 
>82	AssignmentExpr	this -> _f1 = i_factor [ 1 ]
>83	ArrayIndexing	i_factor [ 1 ]
>84	PrimaryExpression	1
>85	Identifier	i_factor
>86	PtrMemberAccess	this -> _f1
>87	Identifier	_f1
>88	Identifier	this
>89	ExpressionStatement	 
>90	AssignmentExpr	this -> _f0 = i_factor [ 0 ]
>91	ArrayIndexing	i_factor [ 0 ]
>92	PrimaryExpression	0
>93	Identifier	i_factor
>94	PtrMemberAccess	this -> _f0
>95	Identifier	_f0
>96	Identifier	this
>108	FunctionDef	NyARCameraDistortionFactor 
>109	ParameterList	double o_factor [ ]
>110	Parameter	 
>111	Identifier	o_factor
>112	ParameterType	double [ ]
>113	ReturnType	void
>114	CompoundStatement	 
>115	ReturnStatement	 
>116	ExpressionStatement	 
>117	AssignmentExpr	o_factor [ 3 ] = this -> _f3
>118	PtrMemberAccess	this -> _f3
>119	Identifier	_f3
>120	Identifier	this
>121	ArrayIndexing	o_factor [ 3 ]
>122	PrimaryExpression	3
>123	Identifier	o_factor
>124	ExpressionStatement	 
>125	AssignmentExpr	o_factor [ 2 ] = this -> _f2
>126	PtrMemberAccess	this -> _f2
>127	Identifier	_f2
>128	Identifier	this
>129	ArrayIndexing	o_factor [ 2 ]
>130	PrimaryExpression	2
>131	Identifier	o_factor
>132	ExpressionStatement	 
>133	AssignmentExpr	o_factor [ 1 ] = this -> _f1
>134	PtrMemberAccess	this -> _f1
>135	Identifier	_f1
>136	Identifier	this
>137	ArrayIndexing	o_factor [ 1 ]
>138	PrimaryExpression	1
>139	Identifier	o_factor
>140	ExpressionStatement	 
>141	AssignmentExpr	o_factor [ 0 ] = this -> _f0
>142	PtrMemberAccess	this -> _f0
>143	Identifier	_f0
>144	Identifier	this
>145	ArrayIndexing	o_factor [ 0 ]
>146	PrimaryExpression	0
>147	Identifier	o_factor
>159	FunctionDef	NyARCameraDistortionFactor 
>160	ParameterList	double i_scale
>161	Parameter	 
>162	Identifier	i_scale
>163	ParameterType	double
>164	ReturnType	void
>165	CompoundStatement	 
>166	ReturnStatement	 
>167	ExpressionStatement	 
>168	AssignmentExpr	this -> _f2 = this -> _f2 / ( i_scale * i_scale )
>169	MultiplicativeExpression	this -> _f2 / ( i_scale * i_scale )
>170	MultiplicativeExpression	i_scale * i_scale
>171	Identifier	i_scale
>172	Identifier	i_scale
>173	PtrMemberAccess	this -> _f2
>174	Identifier	_f2
>175	Identifier	this
>176	PtrMemberAccess	this -> _f2
>177	Identifier	_f2
>178	Identifier	this
>179	ExpressionStatement	 
>180	AssignmentExpr	this -> _f1 = this -> _f1 * i_scale
>181	MultiplicativeExpression	this -> _f1 * i_scale
>182	Identifier	i_scale
>183	PtrMemberAccess	this -> _f1
>184	Identifier	_f1
>185	Identifier	this
>186	PtrMemberAccess	this -> _f1
>187	Identifier	_f1
>188	Identifier	this
>189	ExpressionStatement	 
>190	AssignmentExpr	this -> _f0 = this -> _f0 * i_scale
>191	MultiplicativeExpression	this -> _f0 * i_scale
>192	Identifier	i_scale
>193	PtrMemberAccess	this -> _f0
>194	Identifier	_f0
>195	Identifier	this
>196	PtrMemberAccess	this -> _f0
>197	Identifier	_f0
>198	Identifier	this
>208	FunctionDef	NyARCameraDistortionFactor 
>209	ParameterList	const TNyARDoublePoint2d & i_in , TNyARDoublePoint2d & o_out
>210	Parameter	 
>211	Identifier	o_out
>212	ParameterType	TNyARDoublePoint2d &
>213	Parameter	 
>214	Identifier	i_in
>215	ParameterType	const TNyARDoublePoint2d &
>216	ReturnType	void
>217	CompoundStatement	 
>218	ReturnStatement	 
>219	IfStatement	if ( x == 0.0 && y == 0.0 )
>220	ElseStatement	else
>221	CompoundStatement	 
>222	ExpressionStatement	 
>223	AssignmentExpr	o_out . y = y * d + this -> _f1
>224	AdditiveExpression	y * d + this -> _f1
>225	PtrMemberAccess	this -> _f1
>226	Identifier	_f1
>227	Identifier	this
>228	MultiplicativeExpression	y * d
>229	Identifier	d
>230	Identifier	y
>231	MemberAccess	o_out . y
>232	Identifier	y
>233	Identifier	o_out
>234	ExpressionStatement	 
>235	AssignmentExpr	o_out . x = x * d + this -> _f0
>236	AdditiveExpression	x * d + this -> _f0
>237	PtrMemberAccess	this -> _f0
>238	Identifier	_f0
>239	Identifier	this
>240	MultiplicativeExpression	x * d
>241	Identifier	d
>242	Identifier	x
>243	MemberAccess	o_out . x
>244	Identifier	x
>245	Identifier	o_out
>246	IdentifierDeclStatement	 
>247	IdentifierDecl	d = 1.0 - this -> _f2 / 100000000.0 * ( x * x + y * y )
>248	AssignmentExpr	d = 1.0 - this -> _f2 / 100000000.0 * ( x * x + y * y )
>249	AdditiveExpression	1.0 - this -> _f2 / 100000000.0 * ( x * x + y * y )
>250	MultiplicativeExpression	this -> _f2 / 100000000.0 * ( x * x + y * y )
>251	MultiplicativeExpression	100000000.0 * ( x * x + y * y )
>252	AdditiveExpression	x * x + y * y
>253	MultiplicativeExpression	y * y
>254	Identifier	y
>255	Identifier	y
>256	MultiplicativeExpression	x * x
>257	Identifier	x
>258	Identifier	x
>259	PrimaryExpression	100000000.0
>260	PtrMemberAccess	this -> _f2
>261	Identifier	_f2
>262	Identifier	this
>263	PrimaryExpression	1.0
>264	Identifier	d
>265	Identifier	d
>266	IdentifierDeclType	const double
>267	CompoundStatement	 
>268	ExpressionStatement	 
>269	AssignmentExpr	o_out . y = this -> _f1
>270	PtrMemberAccess	this -> _f1
>271	Identifier	_f1
>272	Identifier	this
>273	MemberAccess	o_out . y
>274	Identifier	y
>275	Identifier	o_out
>276	ExpressionStatement	 
>277	AssignmentExpr	o_out . x = this -> _f0
>278	PtrMemberAccess	this -> _f0
>279	Identifier	_f0
>280	Identifier	this
>281	MemberAccess	o_out . x
>282	Identifier	x
>283	Identifier	o_out
>284	Condition	 
>285	AndExpression	x == 0.0 && y == 0.0
>286	EqualityExpression	y == 0.0
>287	PrimaryExpression	0.0
>288	Identifier	y
>289	EqualityExpression	x == 0.0
>290	PrimaryExpression	0.0
>291	Identifier	x
>292	IdentifierDeclStatement	 
>293	IdentifierDecl	y = ( i_in . y - this -> _f1 ) * this -> _f3
>294	AssignmentExpr	y = ( i_in . y - this -> _f1 ) * this -> _f3
>295	MultiplicativeExpression	( i_in . y - this -> _f1 ) * this -> _f3
>296	PtrMemberAccess	this -> _f3
>297	Identifier	_f3
>298	Identifier	this
>299	AdditiveExpression	i_in . y - this -> _f1
>300	PtrMemberAccess	this -> _f1
>301	Identifier	_f1
>302	Identifier	this
>303	MemberAccess	i_in . y
>304	Identifier	y
>305	Identifier	i_in
>306	Identifier	y
>307	Identifier	y
>308	IdentifierDeclType	const double
>309	IdentifierDeclStatement	 
>310	IdentifierDecl	x = ( i_in . x - this -> _f0 ) * this -> _f3
>311	AssignmentExpr	x = ( i_in . x - this -> _f0 ) * this -> _f3
>312	MultiplicativeExpression	( i_in . x - this -> _f0 ) * this -> _f3
>313	PtrMemberAccess	this -> _f3
>314	Identifier	_f3
>315	Identifier	this
>316	AdditiveExpression	i_in . x - this -> _f0
>317	PtrMemberAccess	this -> _f0
>318	Identifier	_f0
>319	Identifier	this
>320	MemberAccess	i_in . x
>321	Identifier	x
>322	Identifier	i_in
>323	Identifier	x
>324	Identifier	x
>325	IdentifierDeclType	const double
>344	FunctionDef	NyARCameraDistortionFactor 
>345	ParameterList	const TNyARDoublePoint2d * i_in [ ] , TNyARDoublePoint2d o_out [ ] , int i_size
>346	Parameter	 
>347	Identifier	i_size
>348	ParameterType	int
>349	Parameter	 
>350	Identifier	o_out
>351	ParameterType	TNyARDoublePoint2d [ ]
>352	Parameter	 
>353	Identifier	i_in
>354	ParameterType	const TNyARDoublePoint2d * [ ]
>355	ReturnType	void
>356	CompoundStatement	 
>357	ReturnStatement	 
>358	ForStatement	for ( int i = 0 ; i < i_size ; i ++ )
>359	CompoundStatement	 
>360	IfStatement	if ( x == 0.0 && y == 0.0 )
>361	ElseStatement	else
>362	CompoundStatement	 
>363	ExpressionStatement	 
>364	AssignmentExpr	o_out [ i ] . y = y * d + d1
>365	AdditiveExpression	y * d + d1
>366	Identifier	d1
>367	MultiplicativeExpression	y * d
>368	Identifier	d
>369	Identifier	y
>370	MemberAccess	o_out [ i ] . y
>371	Identifier	y
>372	ArrayIndexing	o_out [ i ]
>373	Identifier	i
>374	Identifier	o_out
>375	ExpressionStatement	 
>376	AssignmentExpr	o_out [ i ] . x = x * d + d0
>377	AdditiveExpression	x * d + d0
>378	Identifier	d0
>379	MultiplicativeExpression	x * d
>380	Identifier	d
>381	Identifier	x
>382	MemberAccess	o_out [ i ] . x
>383	Identifier	x
>384	ArrayIndexing	o_out [ i ]
>385	Identifier	i
>386	Identifier	o_out
>387	IdentifierDeclStatement	 
>388	IdentifierDecl	d = 1.0 - d2_w * ( x * x + y * y )
>389	AssignmentExpr	d = 1.0 - d2_w * ( x * x + y * y )
>390	AdditiveExpression	1.0 - d2_w * ( x * x + y * y )
>391	MultiplicativeExpression	d2_w * ( x * x + y * y )
>392	AdditiveExpression	x * x + y * y
>393	MultiplicativeExpression	y * y
>394	Identifier	y
>395	Identifier	y
>396	MultiplicativeExpression	x * x
>397	Identifier	x
>398	Identifier	x
>399	Identifier	d2_w
>400	PrimaryExpression	1.0
>401	Identifier	d
>402	Identifier	d
>403	IdentifierDeclType	const double
>404	CompoundStatement	 
>405	ExpressionStatement	 
>406	AssignmentExpr	o_out [ i ] . y = d1
>407	Identifier	d1
>408	MemberAccess	o_out [ i ] . y
>409	Identifier	y
>410	ArrayIndexing	o_out [ i ]
>411	Identifier	i
>412	Identifier	o_out
>413	ExpressionStatement	 
>414	AssignmentExpr	o_out [ i ] . x = d0
>415	Identifier	d0
>416	MemberAccess	o_out [ i ] . x
>417	Identifier	x
>418	ArrayIndexing	o_out [ i ]
>419	Identifier	i
>420	Identifier	o_out
>421	Condition	 
>422	AndExpression	x == 0.0 && y == 0.0
>423	EqualityExpression	y == 0.0
>424	PrimaryExpression	0.0
>425	Identifier	y
>426	EqualityExpression	x == 0.0
>427	PrimaryExpression	0.0
>428	Identifier	x
>429	ExpressionStatement	 
>430	AssignmentExpr	y = ( i_in [ i ] -> y - d1 ) * d3
>431	MultiplicativeExpression	( i_in [ i ] -> y - d1 ) * d3
>432	Identifier	d3
>433	AdditiveExpression	i_in [ i ] -> y - d1
>434	Identifier	d1
>435	PtrMemberAccess	i_in [ i ] -> y
>436	Identifier	y
>437	ArrayIndexing	i_in [ i ]
>438	Identifier	i
>439	Identifier	i_in
>440	Identifier	y
>441	ExpressionStatement	 
>442	AssignmentExpr	x = ( i_in [ i ] -> x - d0 ) * d3
>443	MultiplicativeExpression	( i_in [ i ] -> x - d0 ) * d3
>444	Identifier	d3
>445	AdditiveExpression	i_in [ i ] -> x - d0
>446	Identifier	d0
>447	PtrMemberAccess	i_in [ i ] -> x
>448	Identifier	x
>449	ArrayIndexing	i_in [ i ]
>450	Identifier	i
>451	Identifier	i_in
>452	Identifier	x
>453	IncDecOp	 
>454	IncDec	++
>455	Identifier	i
>456	Condition	 
>457	RelationalExpression	i < i_size
>458	Identifier	i_size
>459	Identifier	i
>460	ForInit	 
>461	IdentifierDeclStatement	int i = 0 ;
>462	IdentifierDecl	i = 0
>463	AssignmentExpr	i = 0
>464	PrimaryExpression	0
>465	Identifier	i
>466	Identifier	i
>467	IdentifierDeclType	int
>468	IdentifierDeclStatement	 
>469	IdentifierDecl	d2_w = this -> _f2 / 100000000.0
>470	AssignmentExpr	d2_w = this -> _f2 / 100000000.0
>471	MultiplicativeExpression	this -> _f2 / 100000000.0
>472	PrimaryExpression	100000000.0
>473	PtrMemberAccess	this -> _f2
>474	Identifier	_f2
>475	Identifier	this
>476	Identifier	d2_w
>477	Identifier	d2_w
>478	IdentifierDeclType	const double
>479	IdentifierDeclStatement	 
>480	IdentifierDecl	d3 = this -> _f3
>481	AssignmentExpr	d3 = this -> _f3
>482	PtrMemberAccess	this -> _f3
>483	Identifier	_f3
>484	Identifier	this
>485	Identifier	d3
>486	Identifier	d3
>487	IdentifierDeclType	const double
>488	IdentifierDeclStatement	 
>489	IdentifierDecl	d1 = this -> _f1
>490	AssignmentExpr	d1 = this -> _f1
>491	PtrMemberAccess	this -> _f1
>492	Identifier	_f1
>493	Identifier	this
>494	Identifier	d1
>495	Identifier	d1
>496	IdentifierDeclType	const double
>497	IdentifierDeclStatement	 
>498	IdentifierDecl	d0 = this -> _f0
>499	AssignmentExpr	d0 = this -> _f0
>500	PtrMemberAccess	this -> _f0
>501	Identifier	_f0
>502	Identifier	this
>503	Identifier	d0
>504	Identifier	d0
>505	IdentifierDeclType	const double
>506	IdentifierDeclStatement	 
>507	IdentifierDecl	y
>508	Identifier	y
>509	IdentifierDeclType	double
>510	IdentifierDecl	x
>511	Identifier	x
>512	IdentifierDeclType	double
>542	FunctionDef	NyARCameraDistortionFactor 
>543	ParameterList	double ix , double iy , TNyARDoublePoint2d & o_point
>544	Parameter	 
>545	Identifier	o_point
>546	ParameterType	TNyARDoublePoint2d &
>547	Parameter	 
>548	Identifier	iy
>549	ParameterType	double
>550	Parameter	 
>551	Identifier	ix
>552	ParameterType	double
>553	ReturnType	void
>554	CompoundStatement	 
>555	ReturnStatement	 
>556	ExpressionStatement	 
>557	AssignmentExpr	o_point . y = py / this -> _f3 + d1
>558	AdditiveExpression	py / this -> _f3 + d1
>559	Identifier	d1
>560	MultiplicativeExpression	py / this -> _f3
>561	PtrMemberAccess	this -> _f3
>562	Identifier	_f3
>563	Identifier	this
>564	Identifier	py
>565	MemberAccess	o_point . y
>566	Identifier	y
>567	Identifier	o_point
>568	ExpressionStatement	 
>569	AssignmentExpr	o_point . x = px / this -> _f3 + d0
>570	AdditiveExpression	px / this -> _f3 + d0
>571	Identifier	d0
>572	MultiplicativeExpression	px / this -> _f3
>573	PtrMemberAccess	this -> _f3
>574	Identifier	_f3
>575	Identifier	this
>576	Identifier	px
>577	MemberAccess	o_point . x
>578	Identifier	x
>579	Identifier	o_point
>580	ForStatement	for ( int i = 1 ; ; i ++ )
>581	CompoundStatement	 
>582	ExpressionStatement	 
>583	AssignmentExpr	z0 = sqrt ( z02 )
>584	CallExpression	sqrt ( z02 )
>585	ArgumentList	z02
>586	Argument	z02
>587	Identifier	z02
>588	Callee	sqrt
>589	Identifier	sqrt
>590	Identifier	z0
>591	ExpressionStatement	 
>592	AssignmentExpr	z02 = px * px + py * py
>593	AdditiveExpression	px * px + py * py
>594	MultiplicativeExpression	py * py
>595	Identifier	py
>596	Identifier	py
>597	MultiplicativeExpression	px * px
>598	Identifier	px
>599	Identifier	px
>600	Identifier	z02
>601	IfStatement	if ( i == PD_LOOP )
>602	CompoundStatement	 
>603	BreakStatement	 
>604	Condition	 
>605	EqualityExpression	i == PD_LOOP
>606	Identifier	PD_LOOP
>607	Identifier	i
>608	IfStatement	if ( z0 != 0.0 )
>609	ElseStatement	else
>610	CompoundStatement	 
>611	BreakStatement	 
>612	ExpressionStatement	 
>613	AssignmentExpr	py = 0.0
>614	PrimaryExpression	0.0
>615	Identifier	py
>616	ExpressionStatement	 
>617	AssignmentExpr	px = 0.0
>618	PrimaryExpression	0.0
>619	Identifier	px
>620	CompoundStatement	 
>621	ExpressionStatement	 
>622	AssignmentExpr	py = py * z / z0
>623	MultiplicativeExpression	py * z / z0
>624	MultiplicativeExpression	z / z0
>625	Identifier	z0
>626	Identifier	z
>627	Identifier	py
>628	Identifier	py
>629	ExpressionStatement	 
>630	AssignmentExpr	px = px * z / z0
>631	MultiplicativeExpression	px * z / z0
>632	MultiplicativeExpression	z / z0
>633	Identifier	z0
>634	Identifier	z
>635	Identifier	px
>636	Identifier	px
>637	ExpressionStatement	 
>638	AssignmentExpr	z = z0 - ( ( 1.0 - opttmp_1 ) * z0 - q ) / ( 1.0 - 3.0 * opttmp_1 )
>639	AdditiveExpression	z0 - ( ( 1.0 - opttmp_1 ) * z0 - q ) / ( 1.0 - 3.0 * opttmp_1 )
>640	MultiplicativeExpression	( ( 1.0 - opttmp_1 ) * z0 - q ) / ( 1.0 - 3.0 * opttmp_1 )
>641	AdditiveExpression	1.0 - 3.0 * opttmp_1
>642	MultiplicativeExpression	3.0 * opttmp_1
>643	Identifier	opttmp_1
>644	PrimaryExpression	3.0
>645	PrimaryExpression	1.0
>646	AdditiveExpression	( 1.0 - opttmp_1 ) * z0 - q
>647	Identifier	q
>648	MultiplicativeExpression	( 1.0 - opttmp_1 ) * z0
>649	Identifier	z0
>650	AdditiveExpression	1.0 - opttmp_1
>651	Identifier	opttmp_1
>652	PrimaryExpression	1.0
>653	Identifier	z0
>654	Identifier	z
>655	ExpressionStatement	 
>656	AssignmentExpr	opttmp_1 = p * z02
>657	MultiplicativeExpression	p * z02
>658	Identifier	z02
>659	Identifier	p
>660	Identifier	opttmp_1
>661	Condition	 
>662	EqualityExpression	z0 != 0.0
>663	PrimaryExpression	0.0
>664	Identifier	z0
>665	IncDecOp	 
>666	IncDec	++
>667	Identifier	i
>668	ForInit	 
>669	IdentifierDeclStatement	int i = 1 ;
>670	IdentifierDecl	i = 1
>671	AssignmentExpr	i = 1
>672	PrimaryExpression	1
>673	Identifier	i
>674	Identifier	i
>675	IdentifierDeclType	int
>676	ExpressionStatement	 
>677	AssignmentExpr	q = z0 = sqrt ( z02 )
>678	AssignmentExpr	z0 = sqrt ( z02 )
>679	CallExpression	sqrt ( z02 )
>680	ArgumentList	z02
>681	Argument	z02
>682	Identifier	z02
>683	Callee	sqrt
>684	Identifier	sqrt
>685	Identifier	z0
>686	Identifier	q
>687	ExpressionStatement	 
>688	AssignmentExpr	z02 = px * px + py * py
>689	AdditiveExpression	px * px + py * py
>690	MultiplicativeExpression	py * py
>691	Identifier	py
>692	Identifier	py
>693	MultiplicativeExpression	px * px
>694	Identifier	px
>695	Identifier	px
>696	Identifier	z02
>697	ExpressionStatement	 
>698	AssignmentExpr	p = this -> _f2 / 100000000.0
>699	MultiplicativeExpression	this -> _f2 / 100000000.0
>700	PrimaryExpression	100000000.0
>701	PtrMemberAccess	this -> _f2
>702	Identifier	_f2
>703	Identifier	this
>704	Identifier	p
>705	ExpressionStatement	 
>706	AssignmentExpr	py = iy - d1
>707	AdditiveExpression	iy - d1
>708	Identifier	d1
>709	Identifier	iy
>710	Identifier	py
>711	ExpressionStatement	 
>712	AssignmentExpr	px = ix - d0
>713	AdditiveExpression	ix - d0
>714	Identifier	d0
>715	Identifier	ix
>716	Identifier	px
>717	IdentifierDeclStatement	 
>718	IdentifierDecl	d1 = this -> _f1
>719	AssignmentExpr	d1 = this -> _f1
>720	PtrMemberAccess	this -> _f1
>721	Identifier	_f1
>722	Identifier	this
>723	Identifier	d1
>724	Identifier	d1
>725	IdentifierDeclType	const double
>726	IdentifierDeclStatement	 
>727	IdentifierDecl	d0 = this -> _f0
>728	AssignmentExpr	d0 = this -> _f0
>729	PtrMemberAccess	this -> _f0
>730	Identifier	_f0
>731	Identifier	this
>732	Identifier	d0
>733	Identifier	d0
>734	IdentifierDeclType	const double
>735	IdentifierDeclStatement	 
>736	IdentifierDecl	opttmp_1
>737	Identifier	opttmp_1
>738	IdentifierDeclType	double
>739	IdentifierDecl	py
>740	Identifier	py
>741	IdentifierDeclType	double
>742	IdentifierDecl	px
>743	Identifier	px
>744	IdentifierDeclType	double
>745	IdentifierDecl	z
>746	Identifier	z
>747	IdentifierDeclType	double
>748	IdentifierDecl	q
>749	Identifier	q
>750	IdentifierDeclType	double
>751	IdentifierDecl	p
>752	Identifier	p
>753	IdentifierDeclType	double
>754	IdentifierDecl	z0
>755	Identifier	z0
>756	IdentifierDeclType	double
>757	IdentifierDecl	z02
>758	Identifier	z02
>759	IdentifierDeclType	double
>788	FunctionDef	NyARCameraDistortionFactor 
>789	ParameterList	const int i_x_coord [ ] , const int i_y_coord [ ] , int i_start , int i_num , double o_x_coord [ ] , double o_y_\
>790	Parameter	 
>791	Identifier	o_y_coord
>792	ParameterType	double [ ]
>793	Parameter	 
>794	Identifier	o_x_coord
>795	ParameterType	double [ ]
>796	Parameter	 
>797	Identifier	i_num
>798	ParameterType	int
>799	Parameter	 
>800	Identifier	i_start
>801	ParameterType	int
>802	Parameter	 
>803	Identifier	i_y_coord
>804	ParameterType	const int [ ]
>805	Parameter	 
>806	Identifier	i_x_coord
>807	ParameterType	const int [ ]
>808	ReturnType	void
>809	CompoundStatement	 
>810	ReturnStatement	 
>811	ForStatement	for ( int j = 0 ; j < i_num ; j ++ )
>812	CompoundStatement	 
>813	ExpressionStatement	 
>814	AssignmentExpr	o_y_coord [ j ] = py / d3 + d1
>815	AdditiveExpression	py / d3 + d1
>816	Identifier	d1
>817	MultiplicativeExpression	py / d3
>818	Identifier	d3
>819	Identifier	py
>820	ArrayIndexing	o_y_coord [ j ]
>821	Identifier	j
>822	Identifier	o_y_coord
>823	ExpressionStatement	 
>824	AssignmentExpr	o_x_coord [ j ] = px / d3 + d0
>825	AdditiveExpression	px / d3 + d0
>826	Identifier	d0
>827	MultiplicativeExpression	px / d3
>828	Identifier	d3
>829	Identifier	px
>830	ArrayIndexing	o_x_coord [ j ]
>831	Identifier	j
>832	Identifier	o_x_coord
>833	ForStatement	for ( int i = 1 ; ; i ++ )
>834	CompoundStatement	 
>835	ExpressionStatement	 
>836	AssignmentExpr	z0 = sqrt ( z02 )
>837	CallExpression	sqrt ( z02 )
>838	ArgumentList	z02
>839	Argument	z02
>840	Identifier	z02
>841	Callee	sqrt
>842	Identifier	sqrt
>843	Identifier	z0
>844	ExpressionStatement	 
>845	AssignmentExpr	z02 = px * px + py * py
>846	AdditiveExpression	px * px + py * py
>847	MultiplicativeExpression	py * py
>848	Identifier	py
>849	Identifier	py
>850	MultiplicativeExpression	px * px
>851	Identifier	px
>852	Identifier	px
>853	Identifier	z02
>854	IfStatement	if ( i == PD_LOOP )
>855	CompoundStatement	 
>856	BreakStatement	 
>857	Condition	 
>858	EqualityExpression	i == PD_LOOP
>859	Identifier	PD_LOOP
>860	Identifier	i
>861	IfStatement	if ( z0 != 0.0 )
>862	ElseStatement	else
>863	CompoundStatement	 
>864	BreakStatement	 
>865	ExpressionStatement	 
>866	AssignmentExpr	py = 0.0
>867	PrimaryExpression	0.0
>868	Identifier	py
>869	ExpressionStatement	 
>870	AssignmentExpr	px = 0.0
>871	PrimaryExpression	0.0
>872	Identifier	px
>873	CompoundStatement	 
>874	ExpressionStatement	 
>875	AssignmentExpr	py = py * z / z0
>876	MultiplicativeExpression	py * z / z0
>877	MultiplicativeExpression	z / z0
>878	Identifier	z0
>879	Identifier	z
>880	Identifier	py
>881	Identifier	py
>882	ExpressionStatement	 
>883	AssignmentExpr	px = px * z / z0
>884	MultiplicativeExpression	px * z / z0
>885	MultiplicativeExpression	z / z0
>886	Identifier	z0
>887	Identifier	z
>888	Identifier	px
>889	Identifier	px
>890	ExpressionStatement	 
>891	AssignmentExpr	z = z0 - ( ( 1.0 - opttmp_1 ) * z0 - q ) / ( 1.0 - 3.0 * opttmp_1 )
>892	AdditiveExpression	z0 - ( ( 1.0 - opttmp_1 ) * z0 - q ) / ( 1.0 - 3.0 * opttmp_1 )
>893	MultiplicativeExpression	( ( 1.0 - opttmp_1 ) * z0 - q ) / ( 1.0 - 3.0 * opttmp_1 )
>894	AdditiveExpression	1.0 - 3.0 * opttmp_1
>895	MultiplicativeExpression	3.0 * opttmp_1
>896	Identifier	opttmp_1
>897	PrimaryExpression	3.0
>898	PrimaryExpression	1.0
>899	AdditiveExpression	( 1.0 - opttmp_1 ) * z0 - q
>900	Identifier	q
>901	MultiplicativeExpression	( 1.0 - opttmp_1 ) * z0
>902	Identifier	z0
>903	AdditiveExpression	1.0 - opttmp_1
>904	Identifier	opttmp_1
>905	PrimaryExpression	1.0
>906	Identifier	z0
>907	Identifier	z
>908	ExpressionStatement	 
>909	AssignmentExpr	opttmp_1 = p * z02
>910	MultiplicativeExpression	p * z02
>911	Identifier	z02
>912	Identifier	p
>913	Identifier	opttmp_1
>914	Condition	 
>915	EqualityExpression	z0 != 0.0
>916	PrimaryExpression	0.0
>917	Identifier	z0
>918	IncDecOp	 
>919	IncDec	++
>920	Identifier	i
>921	ForInit	 
>922	IdentifierDeclStatement	int i = 1 ;
>923	IdentifierDecl	i = 1
>924	AssignmentExpr	i = 1
>925	PrimaryExpression	1
>926	Identifier	i
>927	Identifier	i
>928	IdentifierDeclType	int
>929	ExpressionStatement	 
>930	AssignmentExpr	q = z0 = sqrt ( z02 )
>931	AssignmentExpr	z0 = sqrt ( z02 )
>932	CallExpression	sqrt ( z02 )
>933	ArgumentList	z02
>934	Argument	z02
>935	Identifier	z02
>936	Callee	sqrt
>937	Identifier	sqrt
>938	Identifier	z0
>939	Identifier	q
>940	ExpressionStatement	 
>941	AssignmentExpr	z02 = px * px + py * py
>942	AdditiveExpression	px * px + py * py
>943	MultiplicativeExpression	py * py
>944	Identifier	py
>945	Identifier	py
>946	MultiplicativeExpression	px * px
>947	Identifier	px
>948	Identifier	px
>949	Identifier	z02
>950	ExpressionStatement	 
>951	AssignmentExpr	py = i_y_coord [ i_start + j ] - d1
>952	AdditiveExpression	i_y_coord [ i_start + j ] - d1
>953	Identifier	d1
>954	ArrayIndexing	i_y_coord [ i_start + j ]
>955	AdditiveExpression	i_start + j
>956	Identifier	j
>957	Identifier	i_start
>958	Identifier	i_y_coord
>959	Identifier	py
>960	ExpressionStatement	 
>961	AssignmentExpr	px = i_x_coord [ i_start + j ] - d0
>962	AdditiveExpression	i_x_coord [ i_start + j ] - d0
>963	Identifier	d0
>964	ArrayIndexing	i_x_coord [ i_start + j ]
>965	AdditiveExpression	i_start + j
>966	Identifier	j
>967	Identifier	i_start
>968	Identifier	i_x_coord
>969	Identifier	px
>970	IncDecOp	 
>971	IncDec	++
>972	Identifier	j
>973	Condition	 
>974	RelationalExpression	j < i_num
>975	Identifier	i_num
>976	Identifier	j
>977	ForInit	 
>978	IdentifierDeclStatement	int j = 0 ;
>979	IdentifierDecl	j = 0
>980	AssignmentExpr	j = 0
>981	PrimaryExpression	0
>982	Identifier	j
>983	Identifier	j
>984	IdentifierDeclType	int
>985	IdentifierDeclStatement	 
>986	IdentifierDecl	p = this -> _f2 / 100000000.0
>987	AssignmentExpr	p = this -> _f2 / 100000000.0
>988	MultiplicativeExpression	this -> _f2 / 100000000.0
>989	PrimaryExpression	100000000.0
>990	PtrMemberAccess	this -> _f2
>991	Identifier	_f2
>992	Identifier	this
>993	Identifier	p
>994	Identifier	p
>995	IdentifierDeclType	const double
>996	IdentifierDeclStatement	 
>997	IdentifierDecl	d3 = this -> _f3
>998	AssignmentExpr	d3 = this -> _f3
>999	PtrMemberAccess	this -> _f3
>1000	Identifier	_f3
>1001	Identifier	this
>1002	Identifier	d3
>1003	Identifier	d3
>1004	IdentifierDeclType	const double
>1005	IdentifierDeclStatement	 
>1006	IdentifierDecl	d1 = this -> _f1
>1007	AssignmentExpr	d1 = this -> _f1
>1008	PtrMemberAccess	this -> _f1
>1009	Identifier	_f1
>1010	Identifier	this
>1011	Identifier	d1
>1012	Identifier	d1
>1013	IdentifierDeclType	const double
>1014	IdentifierDeclStatement	 
>1015	IdentifierDecl	d0 = this -> _f0
>1016	AssignmentExpr	d0 = this -> _f0
>1017	PtrMemberAccess	this -> _f0
>1018	Identifier	_f0
>1019	Identifier	this
>1020	Identifier	d0
>1021	Identifier	d0
>1022	IdentifierDeclType	const double
>1023	IdentifierDeclStatement	 
>1024	IdentifierDecl	opttmp_1
>1025	Identifier	opttmp_1
>1026	IdentifierDeclType	double
>1027	IdentifierDecl	py
>1028	Identifier	py
>1029	IdentifierDeclType	double
>1030	IdentifierDecl	px
>1031	Identifier	px
>1032	IdentifierDeclType	double
>1033	IdentifierDecl	z
>1034	Identifier	z
>1035	IdentifierDeclType	double
>1036	IdentifierDecl	q
>1037	Identifier	q
>1038	IdentifierDeclType	double
>1039	IdentifierDecl	z0
>1040	Identifier	z0
>1041	IdentifierDeclType	double
>1042	IdentifierDecl	z02
>1043	Identifier	z02
>1044	IdentifierDeclType	double
<3=9,8,4
<4=5
<5=7,6
<9=35,27,19,11,10
<11=12
<12=16,13
<13=15,14
<16=18,17
<19=20
<20=24,21
<21=23,22
<24=26,25
<27=28
<28=32,29
<29=31,30
<32=34,33
<35=36
<36=40,37
<37=39,38
<40=42,41
<57=63,62,58
<58=59
<59=61,60
<63=89,81,73,65,64
<65=66
<66=70,67
<67=69,68
<70=72,71
<73=74
<74=78,75
<75=77,76
<78=80,79
<81=82
<82=86,83
<83=85,84
<86=88,87
<89=90
<90=94,91
<91=93,92
<94=96,95
<108=114,113,109
<109=110
<110=112,111
<114=140,132,124,116,115
<116=117
<117=121,118
<118=120,119
<121=123,122
<124=125
<125=129,126
<126=128,127
<129=131,130
<132=133
<133=137,134
<134=136,135
<137=139,138
<140=141
<141=145,142
<142=144,143
<145=147,146
<159=165,164,160
<160=161
<161=163,162
<165=189,179,167,166
<167=168
<168=176,169
<169=173,170
<170=172,171
<173=175,174
<176=178,177
<179=180
<180=186,181
<181=183,182
<183=185,184
<186=188,187
<189=190
<190=196,191
<191=193,192
<193=195,194
<196=198,197
<208=217,216,209
<209=213,210
<210=212,211
<213=215,214
<217=309,292,219,218
<219=284,267,220
<220=221
<221=246,234,222
<222=223
<223=231,224
<224=228,225
<225=227,226
<228=230,229
<231=233,232
<234=235
<235=243,236
<236=240,237
<237=239,238
<240=242,241
<243=245,244
<246=247
<247=266,265,248
<248=264,249
<249=263,250
<250=260,251
<251=259,252
<252=256,253
<253=255,254
<256=258,257
<260=262,261
<267=276,268
<268=269
<269=273,270
<270=272,271
<273=275,274
<276=277
<277=281,278
<278=280,279
<281=283,282
<284=285
<285=289,286
<286=288,287
<289=291,290
<292=293
<293=308,307,294
<294=306,295
<295=299,296
<296=298,297
<299=303,300
<300=302,301
<303=305,304
<309=310
<310=325,324,311
<311=323,312
<312=316,313
<313=315,314
<316=320,317
<317=319,318
<320=322,321
<344=356,355,345
<345=352,349,346
<346=348,347
<349=351,350
<352=354,353
<356=506,497,488,479,468,358,357
<358=460,456,453,359
<359=441,429,360
<360=421,404,361
<361=362
<362=387,375,363
<363=364
<364=370,365
<365=367,366
<367=369,368
<370=372,371
<372=374,373
<375=376
<376=382,377
<377=379,378
<379=381,380
<382=384,383
<384=386,385
<387=388
<388=403,402,389
<389=401,390
<390=400,391
<391=399,392
<392=396,393
<393=395,394
<396=398,397
<404=413,405
<405=406
<406=408,407
<408=410,409
<410=412,411
<413=414
<414=416,415
<416=418,417
<418=420,419
<421=422
<422=426,423
<423=425,424
<426=428,427
<429=430
<430=440,431
<431=433,432
<433=435,434
<435=437,436
<437=439,438
<441=442
<442=452,443
<443=445,444
<445=447,446
<447=449,448
<449=451,450
<453=455,454
<456=457
<457=459,458
<460=461
<461=462
<462=467,466,463
<463=465,464
<468=469
<469=478,477,470
<470=476,471
<471=473,472
<473=475,474
<479=480
<480=487,486,481
<481=485,482
<482=484,483
<488=489
<489=496,495,490
<490=494,491
<491=493,492
<497=498
<498=505,504,499
<499=503,500
<500=502,501
<506=510,507
<507=509,508
<510=512,511
<542=554,553,543
<543=550,547,544
<544=546,545
<547=549,548
<550=552,551
<554=735,726,717,711,705,697,687,676,580,568,556,555
<556=557
<557=565,558
<558=560,559
<560=564,561
<561=563,562
<565=567,566
<568=569
<569=577,570
<570=572,571
<572=576,573
<573=575,574
<577=579,578
<580=668,665,581
<581=608,601,591,582
<582=583
<583=590,584
<584=588,585
<585=586
<586=587
<588=589
<591=592
<592=600,593
<593=597,594
<594=596,595
<597=599,598
<601=604,602
<602=603
<604=605
<605=607,606
<608=661,620,609
<609=610
<610=616,612,611
<612=613
<613=615,614
<616=617
<617=619,618
<620=655,637,629,621
<621=622
<622=628,623
<623=627,624
<624=626,625
<629=630
<630=636,631
<631=635,632
<632=634,633
<637=638
<638=654,639
<639=653,640
<640=646,641
<641=645,642
<642=644,643
<646=648,647
<648=650,649
<650=652,651
<655=656
<656=660,657
<657=659,658
<661=662
<662=664,663
<665=667,666
<668=669
<669=670
<670=675,674,671
<671=673,672
<676=677
<677=686,678
<678=685,679
<679=683,680
<680=681
<681=682
<683=684
<687=688
<688=696,689
<689=693,690
<690=692,691
<693=695,694
<697=698
<698=704,699
<699=701,700
<701=703,702
<705=706
<706=710,707
<707=709,708
<711=712
<712=716,713
<713=715,714
<717=718
<718=725,724,719
<719=723,720
<720=722,721
<726=727
<727=734,733,728
<728=732,729
<729=731,730
<735=757,754,751,748,745,742,739,736
<736=738,737
<739=741,740
<742=744,743
<745=747,746
<748=750,749
<751=753,752
<754=756,755
<757=759,758
<788=809,808,789
<789=805,802,799,796,793,790
<790=792,791
<793=795,794
<796=798,797
<799=801,800
<802=804,803
<805=807,806
<809=1023,1014,1005,996,985,811,810
<811=977,973,970,812
<812=960,950,940,929,833,823,813
<813=814
<814=820,815
<815=817,816
<817=819,818
<820=822,821
<823=824
<824=830,825
<825=827,826
<827=829,828
<830=832,831
<833=921,918,834
<834=861,854,844,835
<835=836
<836=843,837
<837=841,838
<838=839
<839=840
<841=842
<844=845
<845=853,846
<846=850,847
<847=849,848
<850=852,851
<854=857,855
<855=856
<857=858
<858=860,859
<861=914,873,862
<862=863
<863=869,865,864
<865=866
<866=868,867
<869=870
<870=872,871
<873=908,890,882,874
<874=875
<875=881,876
<876=880,877
<877=879,878
<882=883
<883=889,884
<884=888,885
<885=887,886
<890=891
<891=907,892
<892=906,893
<893=899,894
<894=898,895
<895=897,896
<899=901,900
<901=903,902
<903=905,904
<908=909
<909=913,910
<910=912,911
<914=915
<915=917,916
<918=920,919
<921=922
<922=923
<923=928,927,924
<924=926,925
<929=930
<930=939,931
<931=938,932
<932=936,933
<933=934
<934=935
<936=937
<940=941
<941=949,942
<942=946,943
<943=945,944
<946=948,947
<950=951
<951=959,952
<952=954,953
<954=958,955
<955=957,956
<960=961
<961=969,962
<962=964,963
<964=968,965
<965=967,966
<970=972,971
<973=974
<974=976,975
<977=978
<978=979
<979=984,983,980
<980=982,981
<985=986
<986=995,994,987
<987=993,988
<988=990,989
<990=992,991
<996=997
<997=1004,1003,998
<998=1002,999
<999=1001,1000
<1005=1006
<1006=1013,1012,1007
<1007=1011,1008
<1008=1010,1009
<1014=1015
<1015=1022,1021,1016
<1016=1020,1017
<1017=1019,1018
<1023=1042,1039,1036,1033,1030,1027,1024
<1024=1026,1025
<1027=1029,1028
<1030=1032,1031
<1033=1035,1034
<1036=1038,1037
<1039=1041,1040
<1042=1044,1043
