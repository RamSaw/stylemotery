>3	FunctionDef	callFunction (mxArray * plhs [ ] , const mxArray * prhs [ ] , const long nlhs)
>4	ParameterList	mxArray * plhs [ ] , const mxArray * prhs [ ] , const long nlhs
>5	Parameter	 
>6	Identifier	nlhs
>7	ParameterType	const long
>8	Parameter	 
>9	Identifier	prhs
>10	ParameterType	const mxArray * [ ]
>11	Parameter	 
>12	Identifier	plhs
>13	ParameterType	mxArray * [ ]
>14	ReturnType	inline void
>15	CompoundStatement	 
>16	ExpressionStatement	 
>17	CallExpression	convertSpMatrix ( plhs [ 0 ] , K , M , alpha . n ( ) , alpha . nzmax ( ) , alpha . v ( ) , alpha . r ( ) , alpha \
>18	ArgumentList	plhs [ 0 ]
>19	Argument	alpha . pB ( )
>20	CallExpression	alpha . pB ( )
>21	ArgumentList	 
>22	Callee	alpha . pB
>23	MemberAccess	alpha . pB
>24	Identifier	pB
>25	Identifier	alpha
>26	Argument	alpha . r ( )
>27	CallExpression	alpha . r ( )
>28	ArgumentList	 
>29	Callee	alpha . r
>30	MemberAccess	alpha . r
>31	Identifier	r
>32	Identifier	alpha
>33	Argument	alpha . v ( )
>34	CallExpression	alpha . v ( )
>35	ArgumentList	 
>36	Callee	alpha . v
>37	MemberAccess	alpha . v
>38	Identifier	v
>39	Identifier	alpha
>40	Argument	alpha . nzmax ( )
>41	CallExpression	alpha . nzmax ( )
>42	ArgumentList	 
>43	Callee	alpha . nzmax
>44	MemberAccess	alpha . nzmax
>45	Identifier	nzmax
>46	Identifier	alpha
>47	Argument	alpha . n ( )
>48	CallExpression	alpha . n ( )
>49	ArgumentList	 
>50	Callee	alpha . n
>51	MemberAccess	alpha . n
>52	Identifier	n
>53	Identifier	alpha
>54	Argument	M
>55	Identifier	M
>56	Argument	K
>57	Identifier	K
>58	Argument	plhs [ 0 ]
>59	ArrayIndexing	plhs [ 0 ]
>60	PrimaryExpression	0
>61	Identifier	plhs
>62	Callee	convertSpMatrix
>63	Identifier	convertSpMatrix
>64	ExpressionStatement	 
>65	RelationalExpression	omp_mask < T > ( X , D , alpha , mask , pL , pE , pLambda , sizeL > 1 , sizeE > 1 , sizeLambda > 1 , \
>66	RelationalExpression	T > ( X , D , alpha , mask , pL , pE , pLambda , sizeL > 1 , sizeE > 1 , sizeLambda > 1 , numThreads , \
>67	Expression	X , D , alpha , mask , pL , pE , pLambda , sizeL > 1 , sizeE > 1 , sizeLambda > 1 , numThreads , prPath
>68	Expression	D , alpha , mask , pL , pE , pLambda , sizeL > 1 , sizeE > 1 , sizeLambda > 1 , numThreads , prPath
>69	Expression	alpha , mask , pL , pE , pLambda , sizeL > 1 , sizeE > 1 , sizeLambda > 1 , numThreads , prPath
>70	Expression	mask , pL , pE , pLambda , sizeL > 1 , sizeE > 1 , sizeLambda > 1 , numThreads , prPath
>71	Expression	pL , pE , pLambda , sizeL > 1 , sizeE > 1 , sizeLambda > 1 , numThreads , prPath
>72	Expression	pE , pLambda , sizeL > 1 , sizeE > 1 , sizeLambda > 1 , numThreads , prPath
>73	Expression	pLambda , sizeL > 1 , sizeE > 1 , sizeLambda > 1 , numThreads , prPath
>74	Expression	sizeL > 1 , sizeE > 1 , sizeLambda > 1 , numThreads , prPath
>75	Expression	sizeE > 1 , sizeLambda > 1 , numThreads , prPath
>76	Expression	sizeLambda > 1 , numThreads , prPath
>77	Expression	numThreads , prPath
>78	Identifier	prPath
>79	Identifier	numThreads
>80	RelationalExpression	sizeLambda > 1
>81	PrimaryExpression	1
>82	Identifier	sizeLambda
>83	RelationalExpression	sizeE > 1
>84	PrimaryExpression	1
>85	Identifier	sizeE
>86	RelationalExpression	sizeL > 1
>87	PrimaryExpression	1
>88	Identifier	sizeL
>89	Identifier	pLambda
>90	Identifier	pE
>91	Identifier	pL
>92	Identifier	mask
>93	Identifier	alpha
>94	Identifier	D
>95	Identifier	X
>96	Identifier	T
>97	Identifier	omp_mask
>98	IfStatement	if ( nlhs == 2 )
>99	CompoundStatement	 
>100	ExpressionStatement	 
>101	AssignmentExpr	prPath = & path
>102	UnaryOp	& path
>103	Identifier	path
>104	UnaryOperator	&
>105	Identifier	prPath
>106	ExpressionStatement	 
>107	CallExpression	path . setZeros ( )
>108	ArgumentList	 
>109	Callee	path . setZeros
>110	MemberAccess	path . setZeros
>111	Identifier	setZeros
>112	Identifier	path
>113	IdentifierDeclStatement	 
>114	IdentifierDecl	path ( pr_path , K , L )
>115	Expression	pr_path , K , L
>116	Expression	K , L
>117	Identifier	L
>118	Identifier	K
>119	Identifier	pr_path
>120	Identifier	path
>121	IdentifierDeclType	Matrix < T >
>122	ExpressionStatement	 
>123	CallExpression	mxGetPr ( plhs [ 1 ] )
>124	ArgumentList	plhs [ 1 ]
>125	Argument	plhs [ 1 ]
>126	ArrayIndexing	plhs [ 1 ]
>127	PrimaryExpression	1
>128	Identifier	plhs
>129	Callee	mxGetPr
>130	Identifier	mxGetPr
>131	Statement	 
>132	Statement	 
>133	Statement	 
>134	Statement	 
>135	Statement	 
>136	Statement	 
>137	Statement	 
>138	Statement	 
>139	Statement	 
>140	ExpressionStatement	 
>141	AssignmentExpr	plhs [ 1 ] = createMatrix < T > ( K , L )
>142	RelationalExpression	createMatrix < T > ( K , L )
>143	RelationalExpression	T > ( K , L )
>144	Expression	K , L
>145	Identifier	L
>146	Identifier	K
>147	Identifier	T
>148	Identifier	createMatrix
>149	ArrayIndexing	plhs [ 1 ]
>150	PrimaryExpression	1
>151	Identifier	plhs
>152	Condition	 
>153	EqualityExpression	nlhs == 2
>154	PrimaryExpression	2
>155	Identifier	nlhs
>156	IdentifierDeclStatement	 
>157	IdentifierDecl	* prPath = NULL
>158	AssignmentExpr	* prPath = NULL
>159	Identifier	NULL
>160	Identifier	NULL
>161	Identifier	prPath
>162	IdentifierDeclType	Matrix < T > *
>163	IfStatement	if ( pr_lambda )
>164	CompoundStatement	 
>165	ExpressionStatement	 
>166	CallExpression	mxGetPr ( pr_lambda )
>167	ArgumentList	pr_lambda
>168	Argument	pr_lambda
>169	Identifier	pr_lambda
>170	Callee	mxGetPr
>171	Identifier	mxGetPr
>172	Statement	 
>173	Statement	 
>174	Statement	 
>175	Statement	 
>176	Statement	 
>177	Statement	 
>178	IfStatement	if ( sizeLambda > 1 )
>179	Statement	 
>180	Condition	 
>181	RelationalExpression	sizeLambda > 1
>182	PrimaryExpression	1
>183	Identifier	sizeLambda
>184	ExpressionStatement	 
>185	AssignmentExpr	lambda = static_cast < T > ( mxGetScalar ( pr_lambda ) )
>186	RelationalExpression	static_cast < T > ( mxGetScalar ( pr_lambda ) )
>187	RelationalExpression	T > ( mxGetScalar ( pr_lambda ) )
>188	CallExpression	mxGetScalar ( pr_lambda )
>189	ArgumentList	pr_lambda
>190	Argument	pr_lambda
>191	Identifier	pr_lambda
>192	Callee	mxGetScalar
>193	Identifier	mxGetScalar
>194	Identifier	T
>195	Identifier	static_cast
>196	Identifier	lambda
>197	ExpressionStatement	 
>198	ArrayIndexing	dimsLambda [ 1 ]
>199	PrimaryExpression	1
>200	Identifier	dimsLambda
>201	Statement	 
>202	Statement	 
>203	Statement	 
>204	Statement	 
>205	Statement	 
>206	Statement	 
>207	Statement	 
>208	Statement	 
>209	Statement	 
>210	Statement	 
>211	Statement	 
>212	Statement	 
>213	Statement	 
>214	Statement	 
>215	Statement	 
>216	Statement	 
>217	Statement	 
>218	IdentifierDeclStatement	 
>219	IdentifierDecl	* dimsLambda = mxGetDimensions ( pr_lambda )
>220	AssignmentExpr	* dimsLambda = mxGetDimensions ( pr_lambda )
>221	CallExpression	mxGetDimensions ( pr_lambda )
>222	ArgumentList	pr_lambda
>223	Argument	pr_lambda
>224	Identifier	pr_lambda
>225	Callee	mxGetDimensions
>226	Identifier	mxGetDimensions
>227	Identifier	dimsLambda
>228	Identifier	dimsLambda
>229	IdentifierDeclType	const mwSize *
>230	Condition	 
>231	Identifier	pr_lambda
>232	IdentifierDeclStatement	 
>233	IdentifierDecl	* pLambda = & lambda
>234	AssignmentExpr	* pLambda = & lambda
>235	UnaryOp	& lambda
>236	Identifier	lambda
>237	UnaryOperator	&
>238	Identifier	pLambda
>239	Identifier	pLambda
>240	IdentifierDeclType	T *
>241	IdentifierDeclStatement	 
>242	IdentifierDecl	sizeLambda = 1
>243	AssignmentExpr	sizeLambda = 1
>244	PrimaryExpression	1
>245	Identifier	sizeLambda
>246	Identifier	sizeLambda
>247	IdentifierDeclType	long
>248	IdentifierDeclStatement	 
>249	IdentifierDecl	lambda = 0
>250	AssignmentExpr	lambda = 0
>251	PrimaryExpression	0
>252	Identifier	lambda
>253	Identifier	lambda
>254	IdentifierDeclType	T
>255	IfStatement	if ( pr_eps )
>256	CompoundStatement	 
>257	ExpressionStatement	 
>258	CallExpression	mxGetPr ( pr_eps )
>259	ArgumentList	pr_eps
>260	Argument	pr_eps
>261	Identifier	pr_eps
>262	Callee	mxGetPr
>263	Identifier	mxGetPr
>264	Statement	 
>265	Statement	 
>266	Statement	 
>267	Statement	 
>268	Statement	 
>269	Statement	 
>270	IfStatement	if ( sizeE > 1 )
>271	Statement	 
>272	Condition	 
>273	RelationalExpression	sizeE > 1
>274	PrimaryExpression	1
>275	Identifier	sizeE
>276	ExpressionStatement	 
>277	AssignmentExpr	eps = static_cast < T > ( mxGetScalar ( pr_eps ) )
>278	RelationalExpression	static_cast < T > ( mxGetScalar ( pr_eps ) )
>279	RelationalExpression	T > ( mxGetScalar ( pr_eps ) )
>280	CallExpression	mxGetScalar ( pr_eps )
>281	ArgumentList	pr_eps
>282	Argument	pr_eps
>283	Identifier	pr_eps
>284	Callee	mxGetScalar
>285	Identifier	mxGetScalar
>286	Identifier	T
>287	Identifier	static_cast
>288	Identifier	eps
>289	ExpressionStatement	 
>290	ArrayIndexing	dimsE [ 1 ]
>291	PrimaryExpression	1
>292	Identifier	dimsE
>293	Statement	 
>294	Statement	 
>295	Statement	 
>296	Statement	 
>297	Statement	 
>298	Statement	 
>299	Statement	 
>300	Statement	 
>301	Statement	 
>302	Statement	 
>303	Statement	 
>304	Statement	 
>305	Statement	 
>306	Statement	 
>307	Statement	 
>308	Statement	 
>309	Statement	 
>310	IdentifierDeclStatement	 
>311	IdentifierDecl	* dimsE = mxGetDimensions ( pr_eps )
>312	AssignmentExpr	* dimsE = mxGetDimensions ( pr_eps )
>313	CallExpression	mxGetDimensions ( pr_eps )
>314	ArgumentList	pr_eps
>315	Argument	pr_eps
>316	Identifier	pr_eps
>317	Callee	mxGetDimensions
>318	Identifier	mxGetDimensions
>319	Identifier	dimsE
>320	Identifier	dimsE
>321	IdentifierDeclType	const mwSize *
>322	Condition	 
>323	Identifier	pr_eps
>324	IdentifierDeclStatement	 
>325	IdentifierDecl	* pE = & eps
>326	AssignmentExpr	* pE = & eps
>327	UnaryOp	& eps
>328	Identifier	eps
>329	UnaryOperator	&
>330	Identifier	pE
>331	Identifier	pE
>332	IdentifierDeclType	T *
>333	IdentifierDeclStatement	 
>334	IdentifierDecl	eps = 0
>335	AssignmentExpr	eps = 0
>336	PrimaryExpression	0
>337	Identifier	eps
>338	Identifier	eps
>339	IdentifierDeclType	T
>340	IdentifierDeclStatement	 
>341	IdentifierDecl	sizeE = 1
>342	AssignmentExpr	sizeE = 1
>343	PrimaryExpression	1
>344	Identifier	sizeE
>345	Identifier	sizeE
>346	IdentifierDeclType	long
>347	IfStatement	if ( pr_L )
>348	CompoundStatement	 
>349	ExpressionStatement	 
>350	Statement	 
>351	Statement	 
>352	Statement	 
>353	Statement	 
>354	Statement	 
>355	Statement	 
>356	Statement	 
>357	Statement	 
>358	Statement	 
>359	Statement	 
>360	Statement	 
>361	Statement	 
>362	Statement	 
>363	Statement	 
>364	Statement	 
>365	Statement	 
>366	Statement	 
>367	IfStatement	if ( sizeL > 1 )
>368	CompoundStatement	 
>369	ExpressionStatement	 
>370	CallExpression	mxGetPr ( pr_L )
>371	ArgumentList	pr_L
>372	Argument	pr_L
>373	Identifier	pr_L
>374	Callee	mxGetPr
>375	Identifier	mxGetPr
>376	Statement	 
>377	Statement	 
>378	Statement	 
>379	Statement	 
>380	Statement	 
>381	Statement	 
>382	Statement	 
>383	ExpressionStatement	 
>384	CallExpression	mexErrMsgTxt ( \"Type of param.L should be int32\" )
>385	ArgumentList	\"Type of param.L should be int32\"
>386	Argument	\"Type of param.L should be int32\"
>387	PrimaryExpression	\"Type of param.L should be int32\"
>388	Callee	mexErrMsgTxt
>389	Identifier	mexErrMsgTxt
>390	Statement	 
>391	Statement	 
>392	Statement	 
>393	Statement	 
>394	Statement	 
>395	Statement	 
>396	Statement	 
>397	Statement	 
>398	Statement	 
>399	Statement	 
>400	Statement	 
>401	Condition	 
>402	RelationalExpression	sizeL > 1
>403	PrimaryExpression	1
>404	Identifier	sizeL
>405	ExpressionStatement	 
>406	ArrayIndexing	dimsL [ 1 ]
>407	PrimaryExpression	1
>408	Identifier	dimsL
>409	Statement	 
>410	Statement	 
>411	Statement	 
>412	Statement	 
>413	Statement	 
>414	Statement	 
>415	Statement	 
>416	Statement	 
>417	Statement	 
>418	Statement	 
>419	Statement	 
>420	Statement	 
>421	Statement	 
>422	Statement	 
>423	Statement	 
>424	Statement	 
>425	Statement	 
>426	IdentifierDeclStatement	 
>427	IdentifierDecl	* dimsL = mxGetDimensions ( pr_L )
>428	AssignmentExpr	* dimsL = mxGetDimensions ( pr_L )
>429	CallExpression	mxGetDimensions ( pr_L )
>430	ArgumentList	pr_L
>431	Argument	pr_L
>432	Identifier	pr_L
>433	Callee	mxGetDimensions
>434	Identifier	mxGetDimensions
>435	Identifier	dimsL
>436	Identifier	dimsL
>437	IdentifierDeclType	const mwSize *
>438	Condition	 
>439	Identifier	pr_L
>440	IdentifierDeclStatement	 
>441	IdentifierDecl	* pL = & L
>442	AssignmentExpr	* pL = & L
>443	UnaryOp	& L
>444	Identifier	L
>445	UnaryOperator	&
>446	Identifier	pL
>447	Identifier	pL
>448	IdentifierDeclType	long *
>449	IdentifierDeclStatement	 
>450	IdentifierDecl	L = MIN ( n , K )
>451	AssignmentExpr	L = MIN ( n , K )
>452	CallExpression	MIN ( n , K )
>453	ArgumentList	n
>454	Argument	K
>455	Identifier	K
>456	Argument	n
>457	Identifier	n
>458	Callee	MIN
>459	Identifier	MIN
>460	Identifier	L
>461	Identifier	L
>462	IdentifierDeclType	long
>463	IdentifierDeclStatement	 
>464	IdentifierDecl	sizeL = 1
>465	AssignmentExpr	sizeL = 1
>466	PrimaryExpression	1
>467	Identifier	sizeL
>468	Identifier	sizeL
>469	IdentifierDeclType	long
>470	IfStatement	if ( ! pr_L && ! pr_eps && ! pr_lambda )
>471	ExpressionStatement	 
>472	CallExpression	mexErrMsgTxt ( \"You should either provide L, eps or lambda\" )
>473	ArgumentList	\"You should either provide L, eps or lambda\"
>474	Argument	\"You should either provide L, eps or lambda\"
>475	PrimaryExpression	\"You should either provide L, eps or lambda\"
>476	Callee	mexErrMsgTxt
>477	Identifier	mexErrMsgTxt
>478	Condition	 
>479	AndExpression	! pr_L && ! pr_eps && ! pr_lambda
>480	AndExpression	! pr_eps && ! pr_lambda
>481	UnaryOp	! pr_lambda
>482	Identifier	pr_lambda
>483	UnaryOperator	!
>484	UnaryOp	! pr_eps
>485	Identifier	pr_eps
>486	UnaryOperator	!
>487	UnaryOp	! pr_L
>488	Identifier	pr_L
>489	UnaryOperator	!
>490	IdentifierDeclStatement	 
>491	IdentifierDecl	* pr_lambda = mxGetField ( prhs [ 3 ] , 0 , \"lambda\" )
>492	AssignmentExpr	* pr_lambda = mxGetField ( prhs [ 3 ] , 0 , \"lambda\" )
>493	CallExpression	mxGetField ( prhs [ 3 ] , 0 , \"lambda\" )
>494	ArgumentList	prhs [ 3 ]
>495	Argument	\"lambda\"
>496	PrimaryExpression	\"lambda\"
>497	Argument	0
>498	PrimaryExpression	0
>499	Argument	prhs [ 3 ]
>500	ArrayIndexing	prhs [ 3 ]
>501	PrimaryExpression	3
>502	Identifier	prhs
>503	Callee	mxGetField
>504	Identifier	mxGetField
>505	Identifier	pr_lambda
>506	Identifier	pr_lambda
>507	IdentifierDeclType	mxArray *
>508	IdentifierDeclStatement	 
>509	IdentifierDecl	* pr_eps = mxGetField ( prhs [ 3 ] , 0 , \"eps\" )
>510	AssignmentExpr	* pr_eps = mxGetField ( prhs [ 3 ] , 0 , \"eps\" )
>511	CallExpression	mxGetField ( prhs [ 3 ] , 0 , \"eps\" )
>512	ArgumentList	prhs [ 3 ]
>513	Argument	\"eps\"
>514	PrimaryExpression	\"eps\"
>515	Argument	0
>516	PrimaryExpression	0
>517	Argument	prhs [ 3 ]
>518	ArrayIndexing	prhs [ 3 ]
>519	PrimaryExpression	3
>520	Identifier	prhs
>521	Callee	mxGetField
>522	Identifier	mxGetField
>523	Identifier	pr_eps
>524	Identifier	pr_eps
>525	IdentifierDeclType	mxArray *
>526	IdentifierDeclStatement	 
>527	IdentifierDecl	* pr_L = mxGetField ( prhs [ 3 ] , 0 , \"L\" )
>528	AssignmentExpr	* pr_L = mxGetField ( prhs [ 3 ] , 0 , \"L\" )
>529	CallExpression	mxGetField ( prhs [ 3 ] , 0 , \"L\" )
>530	ArgumentList	prhs [ 3 ]
>531	Argument	\"L\"
>532	PrimaryExpression	\"L\"
>533	Argument	0
>534	PrimaryExpression	0
>535	Argument	prhs [ 3 ]
>536	ArrayIndexing	prhs [ 3 ]
>537	PrimaryExpression	3
>538	Identifier	prhs
>539	Callee	mxGetField
>540	Identifier	mxGetField
>541	Identifier	pr_L
>542	Identifier	pr_L
>543	IdentifierDeclType	mxArray *
>544	ExpressionStatement	 
>545	Expression	prhs [ 3 ] , \"numThreads\" , - 1
>546	Expression	\"numThreads\" , - 1
>547	UnaryOp	- 1
>548	PrimaryExpression	1
>549	UnaryOperator	-
>550	PrimaryExpression	\"numThreads\"
>551	ArrayIndexing	prhs [ 3 ]
>552	PrimaryExpression	3
>553	Identifier	prhs
>554	Statement	 
>555	Statement	 
>556	Statement	 
>557	Statement	 
>558	Statement	 
>559	Statement	 
>560	Statement	 
>561	IdentifierDeclStatement	 
>562	IdentifierDecl	alpha
>563	Identifier	alpha
>564	IdentifierDeclType	SpMatrix < T >
>565	IdentifierDeclStatement	 
>566	IdentifierDecl	D ( prD , n , K )
>567	Expression	prD , n , K
>568	Expression	n , K
>569	Identifier	K
>570	Identifier	n
>571	Identifier	prD
>572	Identifier	D
>573	IdentifierDeclType	Matrix < T >
>574	IdentifierDeclStatement	 
>575	IdentifierDecl	mask ( prmask , n , M )
>576	Expression	prmask , n , M
>577	Expression	n , M
>578	Identifier	M
>579	Identifier	n
>580	Identifier	prmask
>581	Identifier	mask
>582	IdentifierDeclType	Matrix < bool >
>583	IdentifierDeclStatement	 
>584	IdentifierDecl	X ( prX , n , M )
>585	Expression	prX , n , M
>586	Expression	n , M
>587	Identifier	M
>588	Identifier	n
>589	Identifier	prX
>590	Identifier	X
>591	IdentifierDeclType	Matrix < T >
>592	IfStatement	if ( nM != n || mM != M )
>593	ExpressionStatement	 
>594	CallExpression	mexErrMsgTxt ( \"argument sizes are not consistent\" )
>595	ArgumentList	\"argument sizes are not consistent\"
>596	Argument	\"argument sizes are not consistent\"
>597	PrimaryExpression	\"argument sizes are not consistent\"
>598	Callee	mexErrMsgTxt
>599	Identifier	mexErrMsgTxt
>600	Condition	 
>601	OrExpression	nM != n || mM != M
>602	EqualityExpression	mM != M
>603	Identifier	M
>604	Identifier	mM
>605	EqualityExpression	nM != n
>606	Identifier	n
>607	Identifier	nM
>608	ExpressionStatement	 
>609	ArrayIndexing	dimsM [ 1 ]
>610	PrimaryExpression	1
>611	Identifier	dimsM
>612	Statement	 
>613	Statement	 
>614	Statement	 
>615	Statement	 
>616	Statement	 
>617	Statement	 
>618	Statement	 
>619	ExpressionStatement	 
>620	ArrayIndexing	dimsM [ 0 ]
>621	PrimaryExpression	0
>622	Identifier	dimsM
>623	Statement	 
>624	Statement	 
>625	Statement	 
>626	Statement	 
>627	Statement	 
>628	Statement	 
>629	Statement	 
>630	IdentifierDeclStatement	 
>631	IdentifierDecl	* dimsM = mxGetDimensions ( prhs [ 2 ] )
>632	AssignmentExpr	* dimsM = mxGetDimensions ( prhs [ 2 ] )
>633	CallExpression	mxGetDimensions ( prhs [ 2 ] )
>634	ArgumentList	prhs [ 2 ]
>635	Argument	prhs [ 2 ]
>636	ArrayIndexing	prhs [ 2 ]
>637	PrimaryExpression	2
>638	Identifier	prhs
>639	Callee	mxGetDimensions
>640	Identifier	mxGetDimensions
>641	Identifier	dimsM
>642	Identifier	dimsM
>643	IdentifierDeclType	const mwSize *
>644	ExpressionStatement	 
>645	CallExpression	mxGetPr ( prhs [ 2 ] )
>646	ArgumentList	prhs [ 2 ]
>647	Argument	prhs [ 2 ]
>648	ArrayIndexing	prhs [ 2 ]
>649	PrimaryExpression	2
>650	Identifier	prhs
>651	Callee	mxGetPr
>652	Identifier	mxGetPr
>653	Statement	 
>654	Statement	 
>655	Statement	 
>656	Statement	 
>657	Statement	 
>658	Statement	 
>659	Statement	 
>660	Statement	 
>661	Statement	 
>662	IfStatement	if ( n != nD )
>663	ExpressionStatement	 
>664	CallExpression	mexErrMsgTxt ( \"argument sizes are not consistent\" )
>665	ArgumentList	\"argument sizes are not consistent\"
>666	Argument	\"argument sizes are not consistent\"
>667	PrimaryExpression	\"argument sizes are not consistent\"
>668	Callee	mexErrMsgTxt
>669	Identifier	mexErrMsgTxt
>670	Condition	 
>671	EqualityExpression	n != nD
>672	Identifier	nD
>673	Identifier	n
>674	ExpressionStatement	 
>675	ArrayIndexing	dimsD [ 1 ]
>676	PrimaryExpression	1
>677	Identifier	dimsD
>678	Statement	 
>679	Statement	 
>680	Statement	 
>681	Statement	 
>682	Statement	 
>683	Statement	 
>684	Statement	 
>685	ExpressionStatement	 
>686	ArrayIndexing	dimsD [ 0 ]
>687	PrimaryExpression	0
>688	Identifier	dimsD
>689	Statement	 
>690	Statement	 
>691	Statement	 
>692	Statement	 
>693	Statement	 
>694	Statement	 
>695	Statement	 
>696	IdentifierDeclStatement	 
>697	IdentifierDecl	* dimsD = mxGetDimensions ( prhs [ 1 ] )
>698	AssignmentExpr	* dimsD = mxGetDimensions ( prhs [ 1 ] )
>699	CallExpression	mxGetDimensions ( prhs [ 1 ] )
>700	ArgumentList	prhs [ 1 ]
>701	Argument	prhs [ 1 ]
>702	ArrayIndexing	prhs [ 1 ]
>703	PrimaryExpression	1
>704	Identifier	prhs
>705	Callee	mxGetDimensions
>706	Identifier	mxGetDimensions
>707	Identifier	dimsD
>708	Identifier	dimsD
>709	IdentifierDeclType	const mwSize *
>710	ExpressionStatement	 
>711	CallExpression	mxGetPr ( prhs [ 1 ] )
>712	ArgumentList	prhs [ 1 ]
>713	Argument	prhs [ 1 ]
>714	ArrayIndexing	prhs [ 1 ]
>715	PrimaryExpression	1
>716	Identifier	prhs
>717	Callee	mxGetPr
>718	Identifier	mxGetPr
>719	Statement	 
>720	Statement	 
>721	Statement	 
>722	Statement	 
>723	Statement	 
>724	Statement	 
>725	Statement	 
>726	Statement	 
>727	Statement	 
>728	ExpressionStatement	 
>729	ArrayIndexing	dimsX [ 1 ]
>730	PrimaryExpression	1
>731	Identifier	dimsX
>732	Statement	 
>733	Statement	 
>734	Statement	 
>735	Statement	 
>736	Statement	 
>737	Statement	 
>738	Statement	 
>739	ExpressionStatement	 
>740	ArrayIndexing	dimsX [ 0 ]
>741	PrimaryExpression	0
>742	Identifier	dimsX
>743	Statement	 
>744	Statement	 
>745	Statement	 
>746	Statement	 
>747	Statement	 
>748	Statement	 
>749	Statement	 
>750	IdentifierDeclStatement	 
>751	IdentifierDecl	* dimsX = mxGetDimensions ( prhs [ 0 ] )
>752	AssignmentExpr	* dimsX = mxGetDimensions ( prhs [ 0 ] )
>753	CallExpression	mxGetDimensions ( prhs [ 0 ] )
>754	ArgumentList	prhs [ 0 ]
>755	Argument	prhs [ 0 ]
>756	ArrayIndexing	prhs [ 0 ]
>757	PrimaryExpression	0
>758	Identifier	prhs
>759	Callee	mxGetDimensions
>760	Identifier	mxGetDimensions
>761	Identifier	dimsX
>762	Identifier	dimsX
>763	IdentifierDeclType	const mwSize *
>764	ExpressionStatement	 
>765	CallExpression	mxGetPr ( prhs [ 0 ] )
>766	ArgumentList	prhs [ 0 ]
>767	Argument	prhs [ 0 ]
>768	ArrayIndexing	prhs [ 0 ]
>769	PrimaryExpression	0
>770	Identifier	prhs
>771	Callee	mxGetPr
>772	Identifier	mxGetPr
>773	Statement	 
>774	Statement	 
>775	Statement	 
>776	Statement	 
>777	Statement	 
>778	Statement	 
>779	Statement	 
>780	Statement	 
>781	Statement	 
>782	IfStatement	if ( ! mxIsStruct ( prhs [ 3 ] ) )
>783	ExpressionStatement	 
>784	CallExpression	mexErrMsgTxt ( \"argument 4 should be struct\" )
>785	ArgumentList	\"argument 4 should be struct\"
>786	Argument	\"argument 4 should be struct\"
>787	PrimaryExpression	\"argument 4 should be struct\"
>788	Callee	mexErrMsgTxt
>789	Identifier	mexErrMsgTxt
>790	Condition	 
>791	UnaryOp	! mxIsStruct ( prhs [ 3 ] )
>792	CallExpression	mxIsStruct ( prhs [ 3 ] )
>793	ArgumentList	prhs [ 3 ]
>794	Argument	prhs [ 3 ]
>795	ArrayIndexing	prhs [ 3 ]
>796	PrimaryExpression	3
>797	Identifier	prhs
>798	Callee	mxIsStruct
>799	Identifier	mxIsStruct
>800	UnaryOperator	!
>801	IfStatement	if ( mxIsSparse ( prhs [ 2 ] ) )
>802	ExpressionStatement	 
>803	CallExpression	mexErrMsgTxt ( \"argument 3 should be full\" )
>804	ArgumentList	\"argument 3 should be full\"
>805	Argument	\"argument 3 should be full\"
>806	PrimaryExpression	\"argument 3 should be full\"
>807	Callee	mexErrMsgTxt
>808	Identifier	mexErrMsgTxt
>809	Condition	 
>810	CallExpression	mxIsSparse ( prhs [ 2 ] )
>811	ArgumentList	prhs [ 2 ]
>812	Argument	prhs [ 2 ]
>813	ArrayIndexing	prhs [ 2 ]
>814	PrimaryExpression	2
>815	Identifier	prhs
>816	Callee	mxIsSparse
>817	Identifier	mxIsSparse
>818	IfStatement	if ( ! mexCheckType < bool > ( prhs [ 2 ] ) )
>819	ExpressionStatement	 
>820	CallExpression	mexErrMsgTxt ( \"type of argument 3 should be boolean\" )
>821	ArgumentList	\"type of argument 3 should be boolean\"
>822	Argument	\"type of argument 3 should be boolean\"
>823	PrimaryExpression	\"type of argument 3 should be boolean\"
>824	Callee	mexErrMsgTxt
>825	Identifier	mexErrMsgTxt
>826	Condition	 
>827	RelationalExpression	! mexCheckType < bool > ( prhs [ 2 ] )
>828	RelationalExpression	bool > ( prhs [ 2 ] )
>829	ArrayIndexing	prhs [ 2 ]
>830	PrimaryExpression	2
>831	Identifier	prhs
>832	Identifier	bool
>833	UnaryOp	! mexCheckType
>834	Identifier	mexCheckType
>835	UnaryOperator	!
>836	IfStatement	if ( mxIsSparse ( prhs [ 1 ] ) )
>837	ExpressionStatement	 
>838	CallExpression	mexErrMsgTxt ( \"argument 2 should be full\" )
>839	ArgumentList	\"argument 2 should be full\"
>840	Argument	\"argument 2 should be full\"
>841	PrimaryExpression	\"argument 2 should be full\"
>842	Callee	mexErrMsgTxt
>843	Identifier	mexErrMsgTxt
>844	Condition	 
>845	CallExpression	mxIsSparse ( prhs [ 1 ] )
>846	ArgumentList	prhs [ 1 ]
>847	Argument	prhs [ 1 ]
>848	ArrayIndexing	prhs [ 1 ]
>849	PrimaryExpression	1
>850	Identifier	prhs
>851	Callee	mxIsSparse
>852	Identifier	mxIsSparse
>853	IfStatement	if ( ! mexCheckType < T > ( prhs [ 1 ] ) )
>854	ExpressionStatement	 
>855	CallExpression	mexErrMsgTxt ( \"type of argument 2 is not consistent\" )
>856	ArgumentList	\"type of argument 2 is not consistent\"
>857	Argument	\"type of argument 2 is not consistent\"
>858	PrimaryExpression	\"type of argument 2 is not consistent\"
>859	Callee	mexErrMsgTxt
>860	Identifier	mexErrMsgTxt
>861	Condition	 
>862	RelationalExpression	! mexCheckType < T > ( prhs [ 1 ] )
>863	RelationalExpression	T > ( prhs [ 1 ] )
>864	ArrayIndexing	prhs [ 1 ]
>865	PrimaryExpression	1
>866	Identifier	prhs
>867	Identifier	T
>868	UnaryOp	! mexCheckType
>869	Identifier	mexCheckType
>870	UnaryOperator	!
>871	IfStatement	if ( mxIsSparse ( prhs [ 0 ] ) )
>872	ExpressionStatement	 
>873	CallExpression	mexErrMsgTxt ( \"argument 1 should be full\" )
>874	ArgumentList	\"argument 1 should be full\"
>875	Argument	\"argument 1 should be full\"
>876	PrimaryExpression	\"argument 1 should be full\"
>877	Callee	mexErrMsgTxt
>878	Identifier	mexErrMsgTxt
>879	Condition	 
>880	CallExpression	mxIsSparse ( prhs [ 0 ] )
>881	ArgumentList	prhs [ 0 ]
>882	Argument	prhs [ 0 ]
>883	ArrayIndexing	prhs [ 0 ]
>884	PrimaryExpression	0
>885	Identifier	prhs
>886	Callee	mxIsSparse
>887	Identifier	mxIsSparse
>888	IfStatement	if ( ! mexCheckType < T > ( prhs [ 0 ] ) )
>889	ExpressionStatement	 
>890	CallExpression	mexErrMsgTxt ( \"type of argument 1 is not consistent\" )
>891	ArgumentList	\"type of argument 1 is not consistent\"
>892	Argument	\"type of argument 1 is not consistent\"
>893	PrimaryExpression	\"type of argument 1 is not consistent\"
>894	Callee	mexErrMsgTxt
>895	Identifier	mexErrMsgTxt
>896	Condition	 
>897	RelationalExpression	! mexCheckType < T > ( prhs [ 0 ] )
>898	RelationalExpression	T > ( prhs [ 0 ] )
>899	ArrayIndexing	prhs [ 0 ]
>900	PrimaryExpression	0
>901	Identifier	prhs
>902	Identifier	T
>903	UnaryOp	! mexCheckType
>904	Identifier	mexCheckType
>905	UnaryOperator	!
>965	FunctionDef	mexFunction (int nlhs , mxArray * plhs [ ] , int nrhs , const mxArray * prhs [ ])
>966	ParameterList	int nlhs , mxArray * plhs [ ] , int nrhs , const mxArray * prhs [ ]
>967	Parameter	 
>968	Identifier	prhs
>969	ParameterType	const mxArray * [ ]
>970	Parameter	 
>971	Identifier	nrhs
>972	ParameterType	int
>973	Parameter	 
>974	Identifier	plhs
>975	ParameterType	mxArray * [ ]
>976	Parameter	 
>977	Identifier	nlhs
>978	ParameterType	int
>979	ReturnType	void
>980	CompoundStatement	 
>981	IfStatement	if ( mxGetClassID ( prhs [ 0 ] ) == mxDOUBLE_CLASS )
>982	ElseStatement	else
>983	CompoundStatement	 
>984	ExpressionStatement	 
>985	RelationalExpression	callFunction < float > ( plhs , prhs , nlhs )
>986	RelationalExpression	float > ( plhs , prhs , nlhs )
>987	Expression	plhs , prhs , nlhs
>988	Expression	prhs , nlhs
>989	Identifier	nlhs
>990	Identifier	prhs
>991	Identifier	plhs
>992	Identifier	float
>993	Identifier	callFunction
>994	CompoundStatement	 
>995	ExpressionStatement	 
>996	RelationalExpression	callFunction < double > ( plhs , prhs , nlhs )
>997	RelationalExpression	double > ( plhs , prhs , nlhs )
>998	Expression	plhs , prhs , nlhs
>999	Expression	prhs , nlhs
>1000	Identifier	nlhs
>1001	Identifier	prhs
>1002	Identifier	plhs
>1003	Identifier	double
>1004	Identifier	callFunction
>1005	Condition	 
>1006	EqualityExpression	mxGetClassID ( prhs [ 0 ] ) == mxDOUBLE_CLASS
>1007	Identifier	mxDOUBLE_CLASS
>1008	CallExpression	mxGetClassID ( prhs [ 0 ] )
>1009	ArgumentList	prhs [ 0 ]
>1010	Argument	prhs [ 0 ]
>1011	ArrayIndexing	prhs [ 0 ]
>1012	PrimaryExpression	0
>1013	Identifier	prhs
>1014	Callee	mxGetClassID
>1015	Identifier	mxGetClassID
>1016	IfStatement	if ( nlhs != 1 && nlhs != 2 )
>1017	ExpressionStatement	 
>1018	CallExpression	mexErrMsgTxt ( \"Bad number of output arguments\" )
>1019	ArgumentList	\"Bad number of output arguments\"
>1020	Argument	\"Bad number of output arguments\"
>1021	PrimaryExpression	\"Bad number of output arguments\"
>1022	Callee	mexErrMsgTxt
>1023	Identifier	mexErrMsgTxt
>1024	Condition	 
>1025	AndExpression	nlhs != 1 && nlhs != 2
>1026	EqualityExpression	nlhs != 2
>1027	PrimaryExpression	2
>1028	Identifier	nlhs
>1029	EqualityExpression	nlhs != 1
>1030	PrimaryExpression	1
>1031	Identifier	nlhs
>1032	IfStatement	if ( nrhs != 4 )
>1033	ExpressionStatement	 
>1034	CallExpression	mexErrMsgTxt ( \"Bad number of inputs arguments\" )
>1035	ArgumentList	\"Bad number of inputs arguments\"
>1036	Argument	\"Bad number of inputs arguments\"
>1037	PrimaryExpression	\"Bad number of inputs arguments\"
>1038	Callee	mexErrMsgTxt
>1039	Identifier	mexErrMsgTxt
>1040	Condition	 
>1041	EqualityExpression	nrhs != 4
>1042	PrimaryExpression	4
>1043	Identifier	nrhs
<3=15,14,4
<4=11,8,5
<5=7,6
<8=10,9
<11=13,12
<15=888,871,853,836,818,801,782,781,780,779,778,777,776,775,774,773,764,750,749,748,747,746,745,744,743,739,738,737,736,735,734,733,732,728,727,726,725,724,723,722,721,720,719,710,696,695,694,693,692,691,690,689,685,684,683,682,681,680,679,678,674,662,661,660,659,658,657,656,655,654,653,644,16,64,98,156,163,232,241,248,255,324,333,340,347,440,449,463,470,490,508,526,544,554,555,556,557,558,559,560,561,565,574,583,592,608,612,613,614,615,616,617,618,619,623,624,625,626,627,628,629,630
<16=17
<17=62,18
<18=58,56,54,47,40,33,26,19
<19=20
<20=22,21
<22=23
<23=25,24
<26=27
<27=29,28
<29=30
<30=32,31
<33=34
<34=36,35
<36=37
<37=39,38
<40=41
<41=43,42
<43=44
<44=46,45
<47=48
<48=50,49
<50=51
<51=53,52
<54=55
<56=57
<58=59
<59=61,60
<62=63
<64=65
<65=97,66
<66=96,67
<67=95,68
<68=94,69
<69=93,70
<70=92,71
<71=91,72
<72=90,73
<73=89,74
<74=86,75
<75=83,76
<76=80,77
<77=79,78
<80=82,81
<83=85,84
<86=88,87
<98=152,99
<99=140,139,138,137,136,135,134,133,132,131,122,113,106,100
<100=101
<101=105,102
<102=104,103
<106=107
<107=109,108
<109=110
<110=112,111
<113=114
<114=121,120,115
<115=119,116
<116=118,117
<122=123
<123=129,124
<124=125
<125=126
<126=128,127
<129=130
<140=141
<141=149,142
<142=148,143
<143=147,144
<144=146,145
<149=151,150
<152=153
<153=155,154
<156=157
<157=162,161,158
<158=160,159
<163=230,164
<164=218,217,216,215,214,213,212,211,210,209,208,207,206,205,204,203,202,201,197,184,178,177,176,175,174,173,172,165
<165=166
<166=170,167
<167=168
<168=169
<170=171
<178=180,179
<180=181
<181=183,182
<184=185
<185=196,186
<186=195,187
<187=194,188
<188=192,189
<189=190
<190=191
<192=193
<197=198
<198=200,199
<218=219
<219=229,228,220
<220=227,221
<221=225,222
<222=223
<223=224
<225=226
<230=231
<232=233
<233=240,239,234
<234=238,235
<235=237,236
<241=242
<242=247,246,243
<243=245,244
<248=249
<249=254,253,250
<250=252,251
<255=322,256
<256=310,309,308,307,306,305,304,303,302,301,300,299,298,297,296,295,294,293,289,276,270,269,268,267,266,265,264,257
<257=258
<258=262,259
<259=260
<260=261
<262=263
<270=272,271
<272=273
<273=275,274
<276=277
<277=288,278
<278=287,279
<279=286,280
<280=284,281
<281=282
<282=283
<284=285
<289=290
<290=292,291
<310=311
<311=321,320,312
<312=319,313
<313=317,314
<314=315
<315=316
<317=318
<322=323
<324=325
<325=332,331,326
<326=330,327
<327=329,328
<333=334
<334=339,338,335
<335=337,336
<340=341
<341=346,345,342
<342=344,343
<347=438,348
<348=426,425,424,423,422,421,420,419,418,417,416,415,414,413,412,411,410,409,405,367,366,365,364,363,362,361,360,359,358,357,356,355,354,353,352,351,350,349
<367=401,368
<368=400,399,398,397,396,395,394,393,392,391,390,383,382,381,380,379,378,377,376,369
<369=370
<370=374,371
<371=372
<372=373
<374=375
<383=384
<384=388,385
<385=386
<386=387
<388=389
<401=402
<402=404,403
<405=406
<406=408,407
<426=427
<427=437,436,428
<428=435,429
<429=433,430
<430=431
<431=432
<433=434
<438=439
<440=441
<441=448,447,442
<442=446,443
<443=445,444
<449=450
<450=462,461,451
<451=460,452
<452=458,453
<453=456,454
<454=455
<456=457
<458=459
<463=464
<464=469,468,465
<465=467,466
<470=478,471
<471=472
<472=476,473
<473=474
<474=475
<476=477
<478=479
<479=487,480
<480=484,481
<481=483,482
<484=486,485
<487=489,488
<490=491
<491=507,506,492
<492=505,493
<493=503,494
<494=499,497,495
<495=496
<497=498
<499=500
<500=502,501
<503=504
<508=509
<509=525,524,510
<510=523,511
<511=521,512
<512=517,515,513
<513=514
<515=516
<517=518
<518=520,519
<521=522
<526=527
<527=543,542,528
<528=541,529
<529=539,530
<530=535,533,531
<531=532
<533=534
<535=536
<536=538,537
<539=540
<544=545
<545=551,546
<546=550,547
<547=549,548
<551=553,552
<561=562
<562=564,563
<565=566
<566=573,572,567
<567=571,568
<568=570,569
<574=575
<575=582,581,576
<576=580,577
<577=579,578
<583=584
<584=591,590,585
<585=589,586
<586=588,587
<592=600,593
<593=594
<594=598,595
<595=596
<596=597
<598=599
<600=601
<601=605,602
<602=604,603
<605=607,606
<608=609
<609=611,610
<619=620
<620=622,621
<630=631
<631=643,642,632
<632=641,633
<633=639,634
<634=635
<635=636
<636=638,637
<639=640
<644=645
<645=651,646
<646=647
<647=648
<648=650,649
<651=652
<662=670,663
<663=664
<664=668,665
<665=666
<666=667
<668=669
<670=671
<671=673,672
<674=675
<675=677,676
<685=686
<686=688,687
<696=697
<697=709,708,698
<698=707,699
<699=705,700
<700=701
<701=702
<702=704,703
<705=706
<710=711
<711=717,712
<712=713
<713=714
<714=716,715
<717=718
<728=729
<729=731,730
<739=740
<740=742,741
<750=751
<751=763,762,752
<752=761,753
<753=759,754
<754=755
<755=756
<756=758,757
<759=760
<764=765
<765=771,766
<766=767
<767=768
<768=770,769
<771=772
<782=790,783
<783=784
<784=788,785
<785=786
<786=787
<788=789
<790=791
<791=800,792
<792=798,793
<793=794
<794=795
<795=797,796
<798=799
<801=809,802
<802=803
<803=807,804
<804=805
<805=806
<807=808
<809=810
<810=816,811
<811=812
<812=813
<813=815,814
<816=817
<818=826,819
<819=820
<820=824,821
<821=822
<822=823
<824=825
<826=827
<827=833,828
<828=832,829
<829=831,830
<833=835,834
<836=844,837
<837=838
<838=842,839
<839=840
<840=841
<842=843
<844=845
<845=851,846
<846=847
<847=848
<848=850,849
<851=852
<853=861,854
<854=855
<855=859,856
<856=857
<857=858
<859=860
<861=862
<862=868,863
<863=867,864
<864=866,865
<868=870,869
<871=879,872
<872=873
<873=877,874
<874=875
<875=876
<877=878
<879=880
<880=886,881
<881=882
<882=883
<883=885,884
<886=887
<888=896,889
<889=890
<890=894,891
<891=892
<892=893
<894=895
<896=897
<897=903,898
<898=902,899
<899=901,900
<903=905,904
<965=980,979,966
<966=976,973,970,967
<967=969,968
<970=972,971
<973=975,974
<976=978,977
<980=1032,1016,981
<981=1005,994,982
<982=983
<983=984
<984=985
<985=993,986
<986=992,987
<987=991,988
<988=990,989
<994=995
<995=996
<996=1004,997
<997=1003,998
<998=1002,999
<999=1001,1000
<1005=1006
<1006=1008,1007
<1008=1014,1009
<1009=1010
<1010=1011
<1011=1013,1012
<1014=1015
<1016=1024,1017
<1017=1018
<1018=1022,1019
<1019=1020
<1020=1021
<1022=1023
<1024=1025
<1025=1029,1026
<1026=1028,1027
<1029=1031,1030
<1032=1040,1033
<1033=1034
<1034=1038,1035
<1035=1036
<1036=1037
<1038=1039
<1040=1041
<1041=1043,1042
