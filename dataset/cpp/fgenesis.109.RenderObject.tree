>17	FunctionDef	RenderObject 
>18	ParameterList	float t
>19	Parameter	 
>20	Identifier	t
>21	ParameterType	float
>22	ReturnType	void
>23	CompoundStatement	 
>24	IfStatement	if ( alpha . x < 0.5f )
>25	ElseStatement	else
>26	ExpressionStatement	 
>27	CallExpression	alpha . interpolateTo ( 0 , t )
>28	ArgumentList	0
>29	Argument	t
>30	Identifier	t
>31	Argument	0
>32	PrimaryExpression	0
>33	Callee	alpha . interpolateTo
>34	MemberAccess	alpha . interpolateTo
>35	Identifier	interpolateTo
>36	Identifier	alpha
>37	ExpressionStatement	 
>38	CallExpression	alpha . interpolateTo ( 1 , t )
>39	ArgumentList	1
>40	Argument	t
>41	Identifier	t
>42	Argument	1
>43	PrimaryExpression	1
>44	Callee	alpha . interpolateTo
>45	MemberAccess	alpha . interpolateTo
>46	Identifier	interpolateTo
>47	Identifier	alpha
>48	Condition	 
>49	RelationalExpression	alpha . x < 0.5f
>50	PrimaryExpression	0.5f
>51	MemberAccess	alpha . x
>52	Identifier	x
>53	Identifier	alpha
>60	FunctionDef	RenderObject 
>61	ParameterList	 
>62	ReturnType	int
>63	CompoundStatement	 
>64	ReturnStatement	 
>65	Identifier	layer
>66	IfStatement	if ( parent )
>67	CompoundStatement	 
>68	ReturnStatement	 
>69	CallExpression	parent -> getTopLayer ( )
>70	ArgumentList	 
>71	Callee	parent -> getTopLayer
>72	PtrMemberAccess	parent -> getTopLayer
>73	Identifier	getTopLayer
>74	Identifier	parent
>75	Condition	 
>76	Identifier	parent
>84	FunctionDef	RenderObject 
>85	ParameterList	 
>86	ReturnType	void
>87	CompoundStatement	 
>88	IfStatement	if ( blendEnabled )
>89	ElseStatement	else
>90	CompoundStatement	 
>91	ExpressionStatement	 
>92	CallExpression	core -> getD3DDevice ( ) -> SetRenderState ( D3DRS_ALPHABLENDENABLE , FALSE )
>93	ArgumentList	D3DRS_ALPHABLENDENABLE
>94	Argument	FALSE
>95	Identifier	FALSE
>96	Argument	D3DRS_ALPHABLENDENABLE
>97	Identifier	D3DRS_ALPHABLENDENABLE
>98	Callee	core -> getD3DDevice ( ) -> SetRenderState
>99	PtrMemberAccess	core -> getD3DDevice ( ) -> SetRenderState
>100	Identifier	SetRenderState
>101	CallExpression	core -> getD3DDevice ( )
>102	ArgumentList	 
>103	Callee	core -> getD3DDevice
>104	PtrMemberAccess	core -> getD3DDevice
>105	Identifier	getD3DDevice
>106	Identifier	core
>107	CompoundStatement	 
>108	ExpressionStatement	 
>109	CallExpression	core -> getD3DDevice ( ) -> SetTextureStageState ( 0 , D3DTSS_ALPHAOP , D3DTOP_MODULATE )
>110	ArgumentList	0
>111	Argument	D3DTOP_MODULATE
>112	Identifier	D3DTOP_MODULATE
>113	Argument	D3DTSS_ALPHAOP
>114	Identifier	D3DTSS_ALPHAOP
>115	Argument	0
>116	PrimaryExpression	0
>117	Callee	core -> getD3DDevice ( ) -> SetTextureStageState
>118	PtrMemberAccess	core -> getD3DDevice ( ) -> SetTextureStageState
>119	Identifier	SetTextureStageState
>120	CallExpression	core -> getD3DDevice ( )
>121	ArgumentList	 
>122	Callee	core -> getD3DDevice
>123	PtrMemberAccess	core -> getD3DDevice
>124	Identifier	getD3DDevice
>125	Identifier	core
>126	ExpressionStatement	 
>127	CallExpression	core -> getD3DDevice ( ) -> SetTextureStageState ( 0 , D3DTSS_COLOROP , D3DTOP_MODULATE )
>128	ArgumentList	0
>129	Argument	D3DTOP_MODULATE
>130	Identifier	D3DTOP_MODULATE
>131	Argument	D3DTSS_COLOROP
>132	Identifier	D3DTSS_COLOROP
>133	Argument	0
>134	PrimaryExpression	0
>135	Callee	core -> getD3DDevice ( ) -> SetTextureStageState
>136	PtrMemberAccess	core -> getD3DDevice ( ) -> SetTextureStageState
>137	Identifier	SetTextureStageState
>138	CallExpression	core -> getD3DDevice ( )
>139	ArgumentList	 
>140	Callee	core -> getD3DDevice
>141	PtrMemberAccess	core -> getD3DDevice
>142	Identifier	getD3DDevice
>143	Identifier	core
>144	SwitchStatement	switch ( blendType )
>145	CompoundStatement	 
>146	BreakStatement	 
>147	ExpressionStatement	 
>148	CallExpression	core -> getD3DDevice ( ) -> SetRenderState ( D3DRS_DESTBLEND , D3DBLEND_SRCALPHA )
>149	ArgumentList	D3DRS_DESTBLEND
>150	Argument	D3DBLEND_SRCALPHA
>151	Identifier	D3DBLEND_SRCALPHA
>152	Argument	D3DRS_DESTBLEND
>153	Identifier	D3DRS_DESTBLEND
>154	Callee	core -> getD3DDevice ( ) -> SetRenderState
>155	PtrMemberAccess	core -> getD3DDevice ( ) -> SetRenderState
>156	Identifier	SetRenderState
>157	CallExpression	core -> getD3DDevice ( )
>158	ArgumentList	 
>159	Callee	core -> getD3DDevice
>160	PtrMemberAccess	core -> getD3DDevice
>161	Identifier	getD3DDevice
>162	Identifier	core
>163	ExpressionStatement	 
>164	CallExpression	core -> getD3DDevice ( ) -> SetRenderState ( D3DRS_SRCBLEND , D3DBLEND_ZERO )
>165	ArgumentList	D3DRS_SRCBLEND
>166	Argument	D3DBLEND_ZERO
>167	Identifier	D3DBLEND_ZERO
>168	Argument	D3DRS_SRCBLEND
>169	Identifier	D3DRS_SRCBLEND
>170	Callee	core -> getD3DDevice ( ) -> SetRenderState
>171	PtrMemberAccess	core -> getD3DDevice ( ) -> SetRenderState
>172	Identifier	SetRenderState
>173	CallExpression	core -> getD3DDevice ( )
>174	ArgumentList	 
>175	Callee	core -> getD3DDevice
>176	PtrMemberAccess	core -> getD3DDevice
>177	Identifier	getD3DDevice
>178	Identifier	core
>179	Label	 
>180	Identifier	BLEND_SUB
>181	BreakStatement	 
>182	ExpressionStatement	 
>183	CallExpression	core -> getD3DDevice ( ) -> SetRenderState ( D3DRS_DESTBLEND , D3DBLEND_ONE )
>184	ArgumentList	D3DRS_DESTBLEND
>185	Argument	D3DBLEND_ONE
>186	Identifier	D3DBLEND_ONE
>187	Argument	D3DRS_DESTBLEND
>188	Identifier	D3DRS_DESTBLEND
>189	Callee	core -> getD3DDevice ( ) -> SetRenderState
>190	PtrMemberAccess	core -> getD3DDevice ( ) -> SetRenderState
>191	Identifier	SetRenderState
>192	CallExpression	core -> getD3DDevice ( )
>193	ArgumentList	 
>194	Callee	core -> getD3DDevice
>195	PtrMemberAccess	core -> getD3DDevice
>196	Identifier	getD3DDevice
>197	Identifier	core
>198	ExpressionStatement	 
>199	CallExpression	core -> getD3DDevice ( ) -> SetRenderState ( D3DRS_SRCBLEND , D3DBLEND_SRCALPHA )
>200	ArgumentList	D3DRS_SRCBLEND
>201	Argument	D3DBLEND_SRCALPHA
>202	Identifier	D3DBLEND_SRCALPHA
>203	Argument	D3DRS_SRCBLEND
>204	Identifier	D3DRS_SRCBLEND
>205	Callee	core -> getD3DDevice ( ) -> SetRenderState
>206	PtrMemberAccess	core -> getD3DDevice ( ) -> SetRenderState
>207	Identifier	SetRenderState
>208	CallExpression	core -> getD3DDevice ( )
>209	ArgumentList	 
>210	Callee	core -> getD3DDevice
>211	PtrMemberAccess	core -> getD3DDevice
>212	Identifier	getD3DDevice
>213	Identifier	core
>214	Label	 
>215	Identifier	BLEND_ADD
>216	BreakStatement	 
>217	ExpressionStatement	 
>218	CallExpression	core -> getD3DDevice ( ) -> SetRenderState ( D3DRS_DESTBLEND , D3DBLEND_INVSRCALPHA )
>219	ArgumentList	D3DRS_DESTBLEND
>220	Argument	D3DBLEND_INVSRCALPHA
>221	Identifier	D3DBLEND_INVSRCALPHA
>222	Argument	D3DRS_DESTBLEND
>223	Identifier	D3DRS_DESTBLEND
>224	Callee	core -> getD3DDevice ( ) -> SetRenderState
>225	PtrMemberAccess	core -> getD3DDevice ( ) -> SetRenderState
>226	Identifier	SetRenderState
>227	CallExpression	core -> getD3DDevice ( )
>228	ArgumentList	 
>229	Callee	core -> getD3DDevice
>230	PtrMemberAccess	core -> getD3DDevice
>231	Identifier	getD3DDevice
>232	Identifier	core
>233	ExpressionStatement	 
>234	CallExpression	core -> getD3DDevice ( ) -> SetRenderState ( D3DRS_SRCBLEND , D3DBLEND_SRCALPHA )
>235	ArgumentList	D3DRS_SRCBLEND
>236	Argument	D3DBLEND_SRCALPHA
>237	Identifier	D3DBLEND_SRCALPHA
>238	Argument	D3DRS_SRCBLEND
>239	Identifier	D3DRS_SRCBLEND
>240	Callee	core -> getD3DDevice ( ) -> SetRenderState
>241	PtrMemberAccess	core -> getD3DDevice ( ) -> SetRenderState
>242	Identifier	SetRenderState
>243	CallExpression	core -> getD3DDevice ( )
>244	ArgumentList	 
>245	Callee	core -> getD3DDevice
>246	PtrMemberAccess	core -> getD3DDevice
>247	Identifier	getD3DDevice
>248	Identifier	core
>249	Label	 
>250	Identifier	BLEND_DEFAULT
>251	Condition	 
>252	Identifier	blendType
>253	ExpressionStatement	 
>254	CallExpression	core -> getD3DDevice ( ) -> SetRenderState ( D3DRS_ALPHABLENDENABLE , TRUE )
>255	ArgumentList	D3DRS_ALPHABLENDENABLE
>256	Argument	TRUE
>257	Identifier	TRUE
>258	Argument	D3DRS_ALPHABLENDENABLE
>259	Identifier	D3DRS_ALPHABLENDENABLE
>260	Callee	core -> getD3DDevice ( ) -> SetRenderState
>261	PtrMemberAccess	core -> getD3DDevice ( ) -> SetRenderState
>262	Identifier	SetRenderState
>263	CallExpression	core -> getD3DDevice ( )
>264	ArgumentList	 
>265	Callee	core -> getD3DDevice
>266	PtrMemberAccess	core -> getD3DDevice
>267	Identifier	getD3DDevice
>268	Identifier	core
>269	Condition	 
>270	Identifier	blendEnabled
>271	IfStatement	if ( blendEnabled )
>272	ElseStatement	else
>273	CompoundStatement	 
>274	ExpressionStatement	 
>275	CallExpression	glDisable ( GL_ALPHA_TEST )
>276	ArgumentList	GL_ALPHA_TEST
>277	Argument	GL_ALPHA_TEST
>278	Identifier	GL_ALPHA_TEST
>279	Callee	glDisable
>280	Identifier	glDisable
>281	ExpressionStatement	 
>282	CallExpression	glDisable ( GL_BLEND )
>283	ArgumentList	GL_BLEND
>284	Argument	GL_BLEND
>285	Identifier	GL_BLEND
>286	Callee	glDisable
>287	Identifier	glDisable
>288	CompoundStatement	 
>289	SwitchStatement	switch ( blendType )
>290	CompoundStatement	 
>291	BreakStatement	 
>292	ExpressionStatement	 
>293	CallExpression	glBlendFunc ( GL_ZERO , GL_SRC_COLOR )
>294	ArgumentList	GL_ZERO
>295	Argument	GL_SRC_COLOR
>296	Identifier	GL_SRC_COLOR
>297	Argument	GL_ZERO
>298	Identifier	GL_ZERO
>299	Callee	glBlendFunc
>300	Identifier	glBlendFunc
>301	Label	 
>302	Identifier	BLEND_MULT
>303	BreakStatement	 
>304	ExpressionStatement	 
>305	CallExpression	glBlendFunc ( GL_ZERO , GL_SRC_ALPHA )
>306	ArgumentList	GL_ZERO
>307	Argument	GL_SRC_ALPHA
>308	Identifier	GL_SRC_ALPHA
>309	Argument	GL_ZERO
>310	Identifier	GL_ZERO
>311	Callee	glBlendFunc
>312	Identifier	glBlendFunc
>313	Label	 
>314	Identifier	BLEND_SUB
>315	BreakStatement	 
>316	ExpressionStatement	 
>317	CallExpression	glBlendFunc ( GL_SRC_ALPHA , GL_ONE )
>318	ArgumentList	GL_SRC_ALPHA
>319	Argument	GL_ONE
>320	Identifier	GL_ONE
>321	Argument	GL_SRC_ALPHA
>322	Identifier	GL_SRC_ALPHA
>323	Callee	glBlendFunc
>324	Identifier	glBlendFunc
>325	Label	 
>326	Identifier	BLEND_ADD
>327	BreakStatement	 
>328	ExpressionStatement	 
>329	CallExpression	glBlendFunc ( GL_SRC_ALPHA , GL_ONE_MINUS_SRC_ALPHA )
>330	ArgumentList	GL_SRC_ALPHA
>331	Argument	GL_ONE_MINUS_SRC_ALPHA
>332	Identifier	GL_ONE_MINUS_SRC_ALPHA
>333	Argument	GL_SRC_ALPHA
>334	Identifier	GL_SRC_ALPHA
>335	Callee	glBlendFunc
>336	Identifier	glBlendFunc
>337	Label	 
>338	Identifier	BLEND_DEFAULT
>339	Condition	 
>340	Identifier	blendType
>341	ExpressionStatement	 
>342	CallExpression	glEnable ( GL_BLEND )
>343	ArgumentList	GL_BLEND
>344	Argument	GL_BLEND
>345	Identifier	GL_BLEND
>346	Callee	glEnable
>347	Identifier	glEnable
>348	Condition	 
>349	Identifier	blendEnabled
>377	FunctionDef	RenderObject 
>378	ParameterList	const Vector & color , const float alpha
>379	Parameter	 
>380	Identifier	alpha
>381	ParameterType	const float
>382	Parameter	 
>383	Identifier	color
>384	ParameterType	const Vector &
>385	ReturnType	void
>386	CompoundStatement	 
>387	ForStatement	for ( Children 
>388	CompoundStatement	 
>389	ExpressionStatement	 
>390	CallExpression	( * i ) -> setColorMult ( color , alpha )
>391	ArgumentList	color
>392	Argument	alpha
>393	Identifier	alpha
>394	Argument	color
>395	Identifier	color
>396	Callee	( * i ) -> setColorMult
>397	PtrMemberAccess	( * i ) -> setColorMult
>398	Identifier	setColorMult
>399	UnaryOp	* i
>400	Identifier	i
>401	UnaryOperator	*
>402	IncDecOp	 
>403	IncDec	++
>404	Identifier	i
>405	Condition	 
>406	EqualityExpression	i != children . end ( )
>407	CallExpression	children . end ( )
>408	ArgumentList	 
>409	Callee	children . end
>410	MemberAccess	children . end
>411	Identifier	end
>412	Identifier	children
>413	Identifier	i
>414	ForInit	 
>415	IdentifierDeclStatement	Children 
>416	IdentifierDecl	i = children . begin ( )
>417	AssignmentExpr	i = children . begin ( )
>418	CallExpression	children . begin ( )
>419	ArgumentList	 
>420	Callee	children . begin
>421	MemberAccess	children . begin
>422	Identifier	begin
>423	Identifier	children
>424	Identifier	i
>425	Identifier	i
>426	IdentifierDeclType	Children 
>427	ExpressionStatement	 
>428	AssignmentExpr	this -> alpha . x *= alpha
>429	Identifier	alpha
>430	MemberAccess	this -> alpha . x
>431	Identifier	x
>432	PtrMemberAccess	this -> alpha
>433	Identifier	alpha
>434	Identifier	this
>435	ExpressionStatement	 
>436	AssignmentExpr	this -> color *= color
>437	Identifier	color
>438	PtrMemberAccess	this -> color
>439	Identifier	color
>440	Identifier	this
>441	ExpressionStatement	 
>442	AssignmentExpr	this -> savedAlpha = this -> alpha . x
>443	MemberAccess	this -> alpha . x
>444	Identifier	x
>445	PtrMemberAccess	this -> alpha
>446	Identifier	alpha
>447	Identifier	this
>448	PtrMemberAccess	this -> savedAlpha
>449	Identifier	savedAlpha
>450	Identifier	this
>451	ExpressionStatement	 
>452	AssignmentExpr	this -> savedColor . z = this -> color . z
>453	MemberAccess	this -> color . z
>454	Identifier	z
>455	PtrMemberAccess	this -> color
>456	Identifier	color
>457	Identifier	this
>458	MemberAccess	this -> savedColor . z
>459	Identifier	z
>460	PtrMemberAccess	this -> savedColor
>461	Identifier	savedColor
>462	Identifier	this
>463	ExpressionStatement	 
>464	AssignmentExpr	this -> savedColor . y = this -> color . y
>465	MemberAccess	this -> color . y
>466	Identifier	y
>467	PtrMemberAccess	this -> color
>468	Identifier	color
>469	Identifier	this
>470	MemberAccess	this -> savedColor . y
>471	Identifier	y
>472	PtrMemberAccess	this -> savedColor
>473	Identifier	savedColor
>474	Identifier	this
>475	ExpressionStatement	 
>476	AssignmentExpr	this -> savedColor . x = this -> color . x
>477	MemberAccess	this -> color . x
>478	Identifier	x
>479	PtrMemberAccess	this -> color
>480	Identifier	color
>481	Identifier	this
>482	MemberAccess	this -> savedColor . x
>483	Identifier	x
>484	PtrMemberAccess	this -> savedColor
>485	Identifier	savedColor
>486	Identifier	this
>487	ExpressionStatement	 
>488	AssignmentExpr	this -> colorIsSaved = true
>489	Identifier	true
>490	PtrMemberAccess	this -> colorIsSaved
>491	Identifier	colorIsSaved
>492	Identifier	this
>493	IfStatement	if ( colorIsSaved )
>494	CompoundStatement	 
>495	ReturnStatement	 
>496	ExpressionStatement	 
>497	CallExpression	debugLog ( \"setColorMult() WARNING
>498	ArgumentList	\"setColorMult() WARNING
>499	Argument	\"setColorMult() WARNING
>500	PrimaryExpression	\"setColorMult() WARNING
>501	Callee	debugLog
>502	Identifier	debugLog
>503	Condition	 
>504	Identifier	colorIsSaved
>531	FunctionDef	RenderObject 
>532	ParameterList	 
>533	ReturnType	void
>534	CompoundStatement	 
>535	ForStatement	for ( Children 
>536	CompoundStatement	 
>537	ExpressionStatement	 
>538	CallExpression	( * i ) -> clearColorMult ( )
>539	ArgumentList	 
>540	Callee	( * i ) -> clearColorMult
>541	PtrMemberAccess	( * i ) -> clearColorMult
>542	Identifier	clearColorMult
>543	UnaryOp	* i
>544	Identifier	i
>545	UnaryOperator	*
>546	IncDecOp	 
>547	IncDec	++
>548	Identifier	i
>549	Condition	 
>550	EqualityExpression	i != children . end ( )
>551	CallExpression	children . end ( )
>552	ArgumentList	 
>553	Callee	children . end
>554	MemberAccess	children . end
>555	Identifier	end
>556	Identifier	children
>557	Identifier	i
>558	ForInit	 
>559	IdentifierDeclStatement	Children 
>560	IdentifierDecl	i = children . begin ( )
>561	AssignmentExpr	i = children . begin ( )
>562	CallExpression	children . begin ( )
>563	ArgumentList	 
>564	Callee	children . begin
>565	MemberAccess	children . begin
>566	Identifier	begin
>567	Identifier	children
>568	Identifier	i
>569	Identifier	i
>570	IdentifierDeclType	Children 
>571	ExpressionStatement	 
>572	AssignmentExpr	this -> colorIsSaved = false
>573	Identifier	false
>574	PtrMemberAccess	this -> colorIsSaved
>575	Identifier	colorIsSaved
>576	Identifier	this
>577	ExpressionStatement	 
>578	AssignmentExpr	this -> alpha . x = this -> savedAlpha
>579	PtrMemberAccess	this -> savedAlpha
>580	Identifier	savedAlpha
>581	Identifier	this
>582	MemberAccess	this -> alpha . x
>583	Identifier	x
>584	PtrMemberAccess	this -> alpha
>585	Identifier	alpha
>586	Identifier	this
>587	ExpressionStatement	 
>588	AssignmentExpr	this -> color . z = this -> savedColor . z
>589	MemberAccess	this -> savedColor . z
>590	Identifier	z
>591	PtrMemberAccess	this -> savedColor
>592	Identifier	savedColor
>593	Identifier	this
>594	MemberAccess	this -> color . z
>595	Identifier	z
>596	PtrMemberAccess	this -> color
>597	Identifier	color
>598	Identifier	this
>599	ExpressionStatement	 
>600	AssignmentExpr	this -> color . y = this -> savedColor . y
>601	MemberAccess	this -> savedColor . y
>602	Identifier	y
>603	PtrMemberAccess	this -> savedColor
>604	Identifier	savedColor
>605	Identifier	this
>606	MemberAccess	this -> color . y
>607	Identifier	y
>608	PtrMemberAccess	this -> color
>609	Identifier	color
>610	Identifier	this
>611	ExpressionStatement	 
>612	AssignmentExpr	this -> color . x = this -> savedColor . x
>613	MemberAccess	this -> savedColor . x
>614	Identifier	x
>615	PtrMemberAccess	this -> savedColor
>616	Identifier	savedColor
>617	Identifier	this
>618	MemberAccess	this -> color . x
>619	Identifier	x
>620	PtrMemberAccess	this -> color
>621	Identifier	color
>622	Identifier	this
>623	IfStatement	if ( ! colorIsSaved )
>624	CompoundStatement	 
>625	ReturnStatement	 
>626	ExpressionStatement	 
>627	CallExpression	debugLog ( \"clearColorMult() WARNING
>628	ArgumentList	\"clearColorMult() WARNING
>629	Argument	\"clearColorMult() WARNING
>630	PrimaryExpression	\"clearColorMult() WARNING
>631	Callee	debugLog
>632	Identifier	debugLog
>633	Condition	 
>634	UnaryOp	! colorIsSaved
>635	Identifier	colorIsSaved
>636	UnaryOperator	!
>661	FunctionDef	RenderObject 
>662	ParameterList	 
>663	CompoundStatement	 
>664	ExpressionStatement	 
>665	AssignmentExpr	motionBlurTransitionTimer = 0
>666	PrimaryExpression	0
>667	Identifier	motionBlurTransitionTimer
>668	ExpressionStatement	 
>669	AssignmentExpr	shareColorWithChildren = false
>670	Identifier	false
>671	Identifier	shareColorWithChildren
>672	ExpressionStatement	 
>673	AssignmentExpr	shareAlphaWithChildren = false
>674	Identifier	false
>675	Identifier	shareAlphaWithChildren
>676	ExpressionStatement	 
>677	AssignmentExpr	colorIsSaved = false
>678	Identifier	false
>679	Identifier	colorIsSaved
>680	ExpressionStatement	 
>681	AssignmentExpr	renderBeforeParent = false
>682	Identifier	false
>683	Identifier	renderBeforeParent
>684	ExpressionStatement	 
>685	AssignmentExpr	parent = 0
>686	PrimaryExpression	0
>687	Identifier	parent
>688	ExpressionStatement	 
>689	AssignmentExpr	stateData = 0
>690	PrimaryExpression	0
>691	Identifier	stateData
>692	ExpressionStatement	 
>693	AssignmentExpr	followCamera = 0
>694	PrimaryExpression	0
>695	Identifier	followCamera
>696	ExpressionStatement	 
>697	AssignmentExpr	blendType = BLEND_DEFAULT
>698	Identifier	BLEND_DEFAULT
>699	Identifier	blendType
>700	ExpressionStatement	 
>701	AssignmentExpr	fadeAlphaWithLife = false
>702	Identifier	false
>703	Identifier	fadeAlphaWithLife
>704	ExpressionStatement	 
>705	AssignmentExpr	_static = false
>706	Identifier	false
>707	Identifier	_static
>708	ExpressionStatement	 
>709	AssignmentExpr	_hidden = false
>710	Identifier	false
>711	Identifier	_hidden
>712	ExpressionStatement	 
>713	AssignmentExpr	_dead = false
>714	Identifier	false
>715	Identifier	_dead
>716	ExpressionStatement	 
>717	AssignmentExpr	decayRate = 0
>718	PrimaryExpression	0
>719	Identifier	decayRate
>720	ExpressionStatement	 
>721	AssignmentExpr	life = maxLife = 1
>722	AssignmentExpr	maxLife = 1
>723	PrimaryExpression	1
>724	Identifier	maxLife
>725	Identifier	life
>726	ExpressionStatement	 
>727	AssignmentExpr	alpha . x = 1
>728	PrimaryExpression	1
>729	MemberAccess	alpha . x
>730	Identifier	x
>731	Identifier	alpha
>732	ExpressionStatement	 
>733	AssignmentExpr	color = Vector ( 1 , 1 , 1 )
>734	CallExpression	Vector ( 1 , 1 , 1 )
>735	ArgumentList	1
>736	Argument	1
>737	PrimaryExpression	1
>738	Argument	1
>739	PrimaryExpression	1
>740	Argument	1
>741	PrimaryExpression	1
>742	Callee	Vector
>743	Identifier	Vector
>744	Identifier	color
>745	ExpressionStatement	 
>746	AssignmentExpr	scale = Vector ( 1 , 1 , 1 )
>747	CallExpression	Vector ( 1 , 1 , 1 )
>748	ArgumentList	1
>749	Argument	1
>750	PrimaryExpression	1
>751	Argument	1
>752	PrimaryExpression	1
>753	Argument	1
>754	PrimaryExpression	1
>755	Callee	Vector
>756	Identifier	Vector
>757	Identifier	scale
>758	ExpressionStatement	 
>759	AssignmentExpr	height = 0
>760	PrimaryExpression	0
>761	Identifier	height
>762	ExpressionStatement	 
>763	AssignmentExpr	width = 0
>764	PrimaryExpression	0
>765	Identifier	width
>766	ExpressionStatement	 
>767	AssignmentExpr	texture = 0
>768	PrimaryExpression	0
>769	Identifier	texture
>770	ExpressionStatement	 
>771	AssignmentExpr	blendEnabled = true
>772	Identifier	true
>773	Identifier	blendEnabled
>774	ExpressionStatement	 
>775	AssignmentExpr	positionSnapTo = 0
>776	PrimaryExpression	0
>777	Identifier	positionSnapTo
>778	ExpressionStatement	 
>779	AssignmentExpr	pm = PM_NONE
>780	Identifier	PM_NONE
>781	Identifier	pm
>782	ExpressionStatement	 
>783	AssignmentExpr	cull = true
>784	Identifier	true
>785	Identifier	cull
>786	ExpressionStatement	 
>787	AssignmentExpr	layer = LR_NONE
>788	Identifier	LR_NONE
>789	Identifier	layer
>790	ExpressionStatement	 
>791	AssignmentExpr	updateCull = - 1
>792	UnaryOp	- 1
>793	PrimaryExpression	1
>794	UnaryOperator	-
>795	Identifier	updateCull
>796	ExpressionStatement	 
>797	AssignmentExpr	_fh = false
>798	Identifier	false
>799	Identifier	_fh
>800	ExpressionStatement	 
>801	AssignmentExpr	_fv = false
>802	Identifier	false
>803	Identifier	_fv
>804	ExpressionStatement	 
>805	AssignmentExpr	useDXTransform = false
>806	Identifier	false
>807	Identifier	useDXTransform
>808	ExpressionStatement	 
>809	AssignmentExpr	idx = - 1
>810	UnaryOp	- 1
>811	PrimaryExpression	1
>812	UnaryOperator	-
>813	Identifier	idx
>814	ExpressionStatement	 
>815	AssignmentExpr	motionBlur = false
>816	Identifier	false
>817	Identifier	motionBlur
>818	ExpressionStatement	 
>819	AssignmentExpr	motionBlurFrameOffset = 0
>820	PrimaryExpression	0
>821	Identifier	motionBlurFrameOffset
>822	ExpressionStatement	 
>823	AssignmentExpr	motionBlurFrameOffsetCounter = 0
>824	PrimaryExpression	0
>825	Identifier	motionBlurFrameOffsetCounter
>826	ExpressionStatement	 
>827	AssignmentExpr	motionBlurTransition = false
>828	Identifier	false
>829	Identifier	motionBlurTransition
>830	ExpressionStatement	 
>831	AssignmentExpr	collideRadius = 0
>832	PrimaryExpression	0
>833	Identifier	collideRadius
>834	ExpressionStatement	 
>835	AssignmentExpr	collisionMaskRadius = 0
>836	PrimaryExpression	0
>837	Identifier	collisionMaskRadius
>838	ExpressionStatement	 
>839	AssignmentExpr	alphaMod = 1
>840	PrimaryExpression	1
>841	Identifier	alphaMod
>842	ExpressionStatement	 
>843	AssignmentExpr	repeatTexture = false
>844	Identifier	false
>845	Identifier	repeatTexture
>846	ExpressionStatement	 
>847	AssignmentExpr	overrideCullRadiusSqr = 0
>848	PrimaryExpression	0
>849	Identifier	overrideCullRadiusSqr
>850	ExpressionStatement	 
>851	AssignmentExpr	renderPass = 0
>852	PrimaryExpression	0
>853	Identifier	renderPass
>854	ExpressionStatement	 
>855	AssignmentExpr	overrideRenderPass = OVERRIDE_NONE
>856	Identifier	OVERRIDE_NONE
>857	Identifier	overrideRenderPass
>858	ExpressionStatement	 
>859	AssignmentExpr	ignoreUpdate = false
>860	Identifier	false
>861	Identifier	ignoreUpdate
>862	ExpressionStatement	 
>863	AssignmentExpr	updateAfterParent = false
>864	Identifier	false
>865	Identifier	updateAfterParent
>866	ExpressionStatement	 
>867	AssignmentExpr	useOldDT = false
>868	Identifier	false
>869	Identifier	useOldDT
>870	ExpressionStatement	 
>871	CallExpression	addType ( SCO_RENDEROBJECT )
>872	ArgumentList	SCO_RENDEROBJECT
>873	Argument	SCO_RENDEROBJECT
>874	Identifier	SCO_RENDEROBJECT
>875	Callee	addType
>876	Identifier	addType
>935	FunctionDef	RenderObject 
>936	ParameterList	 
>937	CompoundStatement	 
>941	FunctionDef	RenderObject 
>942	ParameterList	 
>943	ReturnType	Vector
>944	CompoundStatement	 
>945	ReturnStatement	 
>946	CallExpression	getWorldCollidePosition ( )
>947	ArgumentList	 
>948	Callee	getWorldCollidePosition
>949	Identifier	getWorldCollidePosition
>954	FunctionDef	RenderObject 
>955	ParameterList	 
>956	ReturnType	RenderObject *
>957	CompoundStatement	 
>958	ReturnStatement	 
>959	Identifier	lastp
>960	WhileStatement	while ( p )
>961	CompoundStatement	 
>962	ExpressionStatement	 
>963	AssignmentExpr	p = p -> parent
>964	PtrMemberAccess	p -> parent
>965	Identifier	parent
>966	Identifier	p
>967	Identifier	p
>968	ExpressionStatement	 
>969	AssignmentExpr	lastp = p
>970	Identifier	p
>971	Identifier	lastp
>972	Condition	 
>973	Identifier	p
>974	IdentifierDeclStatement	 
>975	IdentifierDecl	* lastp = 0
>976	AssignmentExpr	* lastp = 0
>977	PrimaryExpression	0
>978	Identifier	lastp
>979	Identifier	lastp
>980	IdentifierDeclType	RenderObject *
>981	IdentifierDeclStatement	 
>982	IdentifierDecl	* p = parent
>983	AssignmentExpr	* p = parent
>984	Identifier	parent
>985	Identifier	parent
>986	Identifier	p
>987	IdentifierDeclType	RenderObject *
>996	FunctionDef	RenderObject 
>997	ParameterList	 
>998	ReturnType	bool
>999	CompoundStatement	 
>1000	ReturnStatement	 
>1001	CallExpression	isfh ( )
>1002	ArgumentList	 
>1003	Callee	isfh
>1004	Identifier	isfh
>1005	IfStatement	if ( p )
>1006	ReturnStatement	 
>1007	CallExpression	p -> isfh ( )
>1008	ArgumentList	 
>1009	Callee	p -> isfh
>1010	PtrMemberAccess	p -> isfh
>1011	Identifier	isfh
>1012	Identifier	p
>1013	Condition	 
>1014	Identifier	p
>1015	IdentifierDeclStatement	 
>1016	IdentifierDecl	* p = getTopParent ( )
>1017	AssignmentExpr	* p = getTopParent ( )
>1018	CallExpression	getTopParent ( )
>1019	ArgumentList	 
>1020	Callee	getTopParent
>1021	Identifier	getTopParent
>1022	Identifier	p
>1023	Identifier	p
>1024	IdentifierDeclType	RenderObject *
>1033	FunctionDef	RenderObject 
>1034	ParameterList	const Vector & vec
>1035	Parameter	 
>1036	Identifier	vec
>1037	ParameterType	const Vector &
>1038	ReturnType	Vector
>1039	CompoundStatement	 
>1040	ReturnStatement	 
>1041	CallExpression	Vector ( x , y , z )
>1042	ArgumentList	x
>1043	Argument	z
>1044	Identifier	z
>1045	Argument	y
>1046	Identifier	y
>1047	Argument	x
>1048	Identifier	x
>1049	Callee	Vector
>1050	Identifier	Vector
>1051	ExpressionStatement	 
>1052	CallExpression	glPopMatrix ( )
>1053	ArgumentList	 
>1054	Callee	glPopMatrix
>1055	Identifier	glPopMatrix
>1056	IdentifierDeclStatement	 
>1057	IdentifierDecl	z = m [ 14 ]
>1058	AssignmentExpr	z = m [ 14 ]
>1059	ArrayIndexing	m [ 14 ]
>1060	PrimaryExpression	14
>1061	Identifier	m
>1062	Identifier	z
>1063	Identifier	z
>1064	IdentifierDeclType	float
>1065	IdentifierDeclStatement	 
>1066	IdentifierDecl	y = m [ 13 ]
>1067	AssignmentExpr	y = m [ 13 ]
>1068	ArrayIndexing	m [ 13 ]
>1069	PrimaryExpression	13
>1070	Identifier	m
>1071	Identifier	y
>1072	Identifier	y
>1073	IdentifierDeclType	float
>1074	IdentifierDeclStatement	 
>1075	IdentifierDecl	x = m [ 12 ]
>1076	AssignmentExpr	x = m [ 12 ]
>1077	ArrayIndexing	m [ 12 ]
>1078	PrimaryExpression	12
>1079	Identifier	m
>1080	Identifier	x
>1081	Identifier	x
>1082	IdentifierDeclType	float
>1083	ExpressionStatement	 
>1084	CallExpression	glGetFloatv ( GL_MODELVIEW_MATRIX , m )
>1085	ArgumentList	GL_MODELVIEW_MATRIX
>1086	Argument	m
>1087	Identifier	m
>1088	Argument	GL_MODELVIEW_MATRIX
>1089	Identifier	GL_MODELVIEW_MATRIX
>1090	Callee	glGetFloatv
>1091	Identifier	glGetFloatv
>1092	IdentifierDeclStatement	 
>1093	IdentifierDecl	m [ 16 ]
>1094	PrimaryExpression	16
>1095	Identifier	m
>1096	IdentifierDeclType	float [ 16 ]
>1097	IfStatement	if ( vec . x != 0 || vec . y != 0 )
>1098	CompoundStatement	 
>1099	ExpressionStatement	 
>1100	CallExpression	glTranslatef ( vec . x , vec . y , 0 )
>1101	ArgumentList	vec . x
>1102	Argument	0
>1103	PrimaryExpression	0
>1104	Argument	vec . y
>1105	MemberAccess	vec . y
>1106	Identifier	y
>1107	Identifier	vec
>1108	Argument	vec . x
>1109	MemberAccess	vec . x
>1110	Identifier	x
>1111	Identifier	vec
>1112	Callee	glTranslatef
>1113	Identifier	glTranslatef
>1114	Condition	 
>1115	OrExpression	vec . x != 0 || vec . y != 0
>1116	EqualityExpression	vec . y != 0
>1117	PrimaryExpression	0
>1118	MemberAccess	vec . y
>1119	Identifier	y
>1120	Identifier	vec
>1121	EqualityExpression	vec . x != 0
>1122	PrimaryExpression	0
>1123	MemberAccess	vec . x
>1124	Identifier	x
>1125	Identifier	vec
>1126	ForStatement	for ( int i = chain . size ( ) - 1 ; i >= 0 ; i -- )
>1127	CompoundStatement	 
>1128	IfStatement	if ( chain [ i ] -> isfh ( ) )
>1129	CompoundStatement	 
>1130	ExpressionStatement	 
>1131	CallExpression	glRotatef ( 180 , 0 , 1 , 0 )
>1132	ArgumentList	180
>1133	Argument	0
>1134	PrimaryExpression	0
>1135	Argument	1
>1136	PrimaryExpression	1
>1137	Argument	0
>1138	PrimaryExpression	0
>1139	Argument	180
>1140	PrimaryExpression	180
>1141	Callee	glRotatef
>1142	Identifier	glRotatef
>1143	Condition	 
>1144	CallExpression	chain [ i ] -> isfh ( )
>1145	ArgumentList	 
>1146	Callee	chain [ i ] -> isfh
>1147	PtrMemberAccess	chain [ i ] -> isfh
>1148	Identifier	isfh
>1149	ArrayIndexing	chain [ i ]
>1150	Identifier	i
>1151	Identifier	chain
>1152	ExpressionStatement	 
>1153	CallExpression	glRotatef ( - ( chain [ i ] -> rotation . z + chain [ i ] -> rotationOffset . z ) , 0 , 0 , 1 )
>1154	ArgumentList	- ( chain [ i ] -> rotation . z + chain [ i ] -> rotationOffset . z )
>1155	Argument	1
>1156	PrimaryExpression	1
>1157	Argument	0
>1158	PrimaryExpression	0
>1159	Argument	0
>1160	PrimaryExpression	0
>1161	Argument	- ( chain [ i ] -> rotation . z + chain [ i ] -> rotationOffset . z )
>1162	UnaryOp	- ( chain [ i ] -> rotation . z + chain [ i ] -> rotationOffset . z )
>1163	AdditiveExpression	chain [ i ] -> rotation . z + chain [ i ] -> rotationOffset . z
>1164	MemberAccess	chain [ i ] -> rotationOffset . z
>1165	Identifier	z
>1166	PtrMemberAccess	chain [ i ] -> rotationOffset
>1167	Identifier	rotationOffset
>1168	ArrayIndexing	chain [ i ]
>1169	Identifier	i
>1170	Identifier	chain
>1171	MemberAccess	chain [ i ] -> rotation . z
>1172	Identifier	z
>1173	PtrMemberAccess	chain [ i ] -> rotation
>1174	Identifier	rotation
>1175	ArrayIndexing	chain [ i ]
>1176	Identifier	i
>1177	Identifier	chain
>1178	UnaryOperator	-
>1179	Callee	glRotatef
>1180	Identifier	glRotatef
>1181	IncDecOp	 
>1182	IncDec	--
>1183	Identifier	i
>1184	Condition	 
>1185	RelationalExpression	i >= 0
>1186	PrimaryExpression	0
>1187	Identifier	i
>1188	ForInit	 
>1189	IdentifierDeclStatement	int i = chain . size ( ) - 1 ;
>1190	IdentifierDecl	i = chain . size ( ) - 1
>1191	AssignmentExpr	i = chain . size ( ) - 1
>1192	AdditiveExpression	chain . size ( ) - 1
>1193	PrimaryExpression	1
>1194	CallExpression	chain . size ( )
>1195	ArgumentList	 
>1196	Callee	chain . size
>1197	MemberAccess	chain . size
>1198	Identifier	size
>1199	Identifier	chain
>1200	Identifier	i
>1201	Identifier	i
>1202	IdentifierDeclType	int
>1203	WhileStatement	while ( p )
>1204	CompoundStatement	 
>1205	ExpressionStatement	 
>1206	AssignmentExpr	p = p -> parent
>1207	PtrMemberAccess	p -> parent
>1208	Identifier	parent
>1209	Identifier	p
>1210	Identifier	p
>1211	ExpressionStatement	 
>1212	CallExpression	chain . push_back ( p )
>1213	ArgumentList	p
>1214	Argument	p
>1215	Identifier	p
>1216	Callee	chain . push_back
>1217	MemberAccess	chain . push_back
>1218	Identifier	push_back
>1219	Identifier	chain
>1220	Condition	 
>1221	Identifier	p
>1222	IdentifierDeclStatement	 
>1223	IdentifierDecl	* p = this
>1224	AssignmentExpr	* p = this
>1225	Identifier	this
>1226	Identifier	this
>1227	Identifier	p
>1228	IdentifierDeclType	RenderObject *
>1229	IdentifierDeclStatement	 
>1230	IdentifierDecl	chain
>1231	Identifier	chain
>1232	IdentifierDeclType	std 
>1233	ExpressionStatement	 
>1234	CallExpression	glLoadIdentity ( )
>1235	ArgumentList	 
>1236	Callee	glLoadIdentity
>1237	Identifier	glLoadIdentity
>1238	ExpressionStatement	 
>1239	CallExpression	glPushMatrix ( )
>1240	ArgumentList	 
>1241	Callee	glPushMatrix
>1242	Identifier	glPushMatrix
>1272	FunctionDef	matrixChain (const RenderObject * ro)
>1273	ParameterList	const RenderObject * ro
>1274	Parameter	 
>1275	Identifier	ro
>1276	ParameterType	const RenderObject *
>1277	ReturnType	static glm 
>1278	CompoundStatement	 
>1279	ReturnStatement	 
>1280	Identifier	tranformMatrix
>1281	ExpressionStatement	 
>1282	AssignmentExpr	tranformMatrix *= glm 
>1283	CallExpression	glm 
>1284	ArgumentList	ro -> internalOffset . x
>1285	Argument	0.0f
>1286	PrimaryExpression	0.0f
>1287	Argument	ro -> internalOffset . y
>1288	MemberAccess	ro -> internalOffset . y
>1289	Identifier	y
>1290	PtrMemberAccess	ro -> internalOffset
>1291	Identifier	internalOffset
>1292	Identifier	ro
>1293	Argument	ro -> internalOffset . x
>1294	MemberAccess	ro -> internalOffset . x
>1295	Identifier	x
>1296	PtrMemberAccess	ro -> internalOffset
>1297	Identifier	internalOffset
>1298	Identifier	ro
>1299	Callee	glm 
>1300	Identifier	glm 
>1301	Identifier	tranformMatrix
>1302	IfStatement	if ( ro -> isfh ( ) )
>1303	ExpressionStatement	 
>1304	AssignmentExpr	tranformMatrix *= glm 
>1305	CallExpression	glm 
>1306	ArgumentList	180.0f
>1307	Argument	0.0f
>1308	PrimaryExpression	0.0f
>1309	Argument	1.0f
>1310	PrimaryExpression	1.0f
>1311	Argument	0.0f
>1312	PrimaryExpression	0.0f
>1313	Argument	180.0f
>1314	PrimaryExpression	180.0f
>1315	Callee	glm 
>1316	Identifier	glm 
>1317	Identifier	tranformMatrix
>1318	Condition	 
>1319	CallExpression	ro -> isfh ( )
>1320	ArgumentList	 
>1321	Callee	ro -> isfh
>1322	PtrMemberAccess	ro -> isfh
>1323	Identifier	isfh
>1324	Identifier	ro
>1325	IdentifierDeclStatement	 
>1326	IdentifierDecl	tranformMatrix = glm 
>1327	AssignmentExpr	tranformMatrix = glm 
>1328	CallExpression	glm 
>1329	ArgumentList	glm 
>1330	Argument	glm 
>1331	CallExpression	glm 
>1332	ArgumentList	ro -> scale . x
>1333	Argument	0.0f
>1334	PrimaryExpression	0.0f
>1335	Argument	ro -> scale . y
>1336	MemberAccess	ro -> scale . y
>1337	Identifier	y
>1338	PtrMemberAccess	ro -> scale
>1339	Identifier	scale
>1340	Identifier	ro
>1341	Argument	ro -> scale . x
>1342	MemberAccess	ro -> scale . x
>1343	Identifier	x
>1344	PtrMemberAccess	ro -> scale
>1345	Identifier	scale
>1346	Identifier	ro
>1347	Callee	glm 
>1348	Identifier	glm 
>1349	Argument	glm 
>1350	CallExpression	glm 
>1351	ArgumentList	glm 
>1352	Argument	glm 
>1353	CallExpression	glm 
>1354	ArgumentList	ro -> beforeScaleOffset . x
>1355	Argument	0.0f
>1356	PrimaryExpression	0.0f
>1357	Argument	ro -> beforeScaleOffset . y
>1358	MemberAccess	ro -> beforeScaleOffset . y
>1359	Identifier	y
>1360	PtrMemberAccess	ro -> beforeScaleOffset
>1361	Identifier	beforeScaleOffset
>1362	Identifier	ro
>1363	Argument	ro -> beforeScaleOffset . x
>1364	MemberAccess	ro -> beforeScaleOffset . x
>1365	Identifier	x
>1366	PtrMemberAccess	ro -> beforeScaleOffset
>1367	Identifier	beforeScaleOffset
>1368	Identifier	ro
>1369	Callee	glm 
>1370	Identifier	glm 
>1371	Argument	glm 
>1372	CallExpression	glm 
>1373	ArgumentList	glm 
>1374	Argument	glm 
>1375	CallExpression	glm 
>1376	ArgumentList	0
>1377	Argument	1
>1378	PrimaryExpression	1
>1379	Argument	0
>1380	PrimaryExpression	0
>1381	Argument	0
>1382	PrimaryExpression	0
>1383	Callee	glm 
>1384	Identifier	glm 
>1385	Argument	ro -> rotation . z + ro -> rotationOffset . z
>1386	AdditiveExpression	ro -> rotation . z + ro -> rotationOffset . z
>1387	MemberAccess	ro -> rotationOffset . z
>1388	Identifier	z
>1389	PtrMemberAccess	ro -> rotationOffset
>1390	Identifier	rotationOffset
>1391	Identifier	ro
>1392	MemberAccess	ro -> rotation . z
>1393	Identifier	z
>1394	PtrMemberAccess	ro -> rotation
>1395	Identifier	rotation
>1396	Identifier	ro
>1397	Argument	glm 
>1398	CallExpression	glm 
>1399	ArgumentList	ro -> getParent ( ) ? matrixChain ( ro -> getParent ( ) ) 
>1400	Argument	glm 
>1401	CallExpression	glm 
>1402	ArgumentList	ro -> position . x + ro -> offset . x
>1403	Argument	0
>1404	PrimaryExpression	0
>1405	Argument	ro -> position . y + ro -> offset . y
>1406	AdditiveExpression	ro -> position . y + ro -> offset . y
>1407	MemberAccess	ro -> offset . y
>1408	Identifier	y
>1409	PtrMemberAccess	ro -> offset
>1410	Identifier	offset
>1411	Identifier	ro
>1412	MemberAccess	ro -> position . y
>1413	Identifier	y
>1414	PtrMemberAccess	ro -> position
>1415	Identifier	position
>1416	Identifier	ro
>1417	Argument	ro -> position . x + ro -> offset . x
>1418	AdditiveExpression	ro -> position . x + ro -> offset . x
>1419	MemberAccess	ro -> offset . x
>1420	Identifier	x
>1421	PtrMemberAccess	ro -> offset
>1422	Identifier	offset
>1423	Identifier	ro
>1424	MemberAccess	ro -> position . x
>1425	Identifier	x
>1426	PtrMemberAccess	ro -> position
>1427	Identifier	position
>1428	Identifier	ro
>1429	Callee	glm 
>1430	Identifier	glm 
>1431	Argument	ro -> getParent ( ) ? matrixChain ( ro -> getParent ( ) ) 
>1432	ConditionalExpression	ro -> getParent ( ) ? matrixChain ( ro -> getParent ( ) ) 
>1433	CallExpression	glm 
>1434	ArgumentList	1.0f
>1435	Argument	1.0f
>1436	PrimaryExpression	1.0f
>1437	Callee	glm 
>1438	Identifier	glm 
>1439	CallExpression	matrixChain ( ro -> getParent ( ) )
>1440	ArgumentList	ro -> getParent ( )
>1441	Argument	ro -> getParent ( )
>1442	CallExpression	ro -> getParent ( )
>1443	ArgumentList	 
>1444	Callee	ro -> getParent
>1445	PtrMemberAccess	ro -> getParent
>1446	Identifier	getParent
>1447	Identifier	ro
>1448	Callee	matrixChain
>1449	Identifier	matrixChain
>1450	Condition	ro -> getParent ( )
>1451	CallExpression	ro -> getParent ( )
>1452	ArgumentList	 
>1453	Callee	ro -> getParent
>1454	PtrMemberAccess	ro -> getParent
>1455	Identifier	getParent
>1456	Identifier	ro
>1457	Callee	glm 
>1458	Identifier	glm 
>1459	Callee	glm 
>1460	Identifier	glm 
>1461	Callee	glm 
>1462	Identifier	glm 
>1463	Callee	glm 
>1464	Identifier	glm 
>1465	Identifier	tranformMatrix
>1466	Identifier	tranformMatrix
>1467	IdentifierDeclType	glm 
>1501	FunctionDef	matrixChain (RenderObject * ro)
>1502	ParameterList	RenderObject * ro
>1503	Parameter	 
>1504	Identifier	ro
>1505	ParameterType	RenderObject *
>1506	ReturnType	static void
>1507	CompoundStatement	 
>1508	ExpressionStatement	 
>1509	CallExpression	glTranslatef ( ro -> internalOffset . x , ro -> internalOffset . y , 0 )
>1510	ArgumentList	ro -> internalOffset . x
>1511	Argument	0
>1512	PrimaryExpression	0
>1513	Argument	ro -> internalOffset . y
>1514	MemberAccess	ro -> internalOffset . y
>1515	Identifier	y
>1516	PtrMemberAccess	ro -> internalOffset
>1517	Identifier	internalOffset
>1518	Identifier	ro
>1519	Argument	ro -> internalOffset . x
>1520	MemberAccess	ro -> internalOffset . x
>1521	Identifier	x
>1522	PtrMemberAccess	ro -> internalOffset
>1523	Identifier	internalOffset
>1524	Identifier	ro
>1525	Callee	glTranslatef
>1526	Identifier	glTranslatef
>1527	IfStatement	if ( ro -> isfh ( ) )
>1528	CompoundStatement	 
>1529	ExpressionStatement	 
>1530	CallExpression	glRotatef ( 180 , 0 , 1 , 0 )
>1531	ArgumentList	180
>1532	Argument	0
>1533	PrimaryExpression	0
>1534	Argument	1
>1535	PrimaryExpression	1
>1536	Argument	0
>1537	PrimaryExpression	0
>1538	Argument	180
>1539	PrimaryExpression	180
>1540	Callee	glRotatef
>1541	Identifier	glRotatef
>1542	Condition	 
>1543	CallExpression	ro -> isfh ( )
>1544	ArgumentList	 
>1545	Callee	ro -> isfh
>1546	PtrMemberAccess	ro -> isfh
>1547	Identifier	isfh
>1548	Identifier	ro
>1549	ExpressionStatement	 
>1550	CallExpression	glScalef ( ro -> scale . x , ro -> scale . y , 0 )
>1551	ArgumentList	ro -> scale . x
>1552	Argument	0
>1553	PrimaryExpression	0
>1554	Argument	ro -> scale . y
>1555	MemberAccess	ro -> scale . y
>1556	Identifier	y
>1557	PtrMemberAccess	ro -> scale
>1558	Identifier	scale
>1559	Identifier	ro
>1560	Argument	ro -> scale . x
>1561	MemberAccess	ro -> scale . x
>1562	Identifier	x
>1563	PtrMemberAccess	ro -> scale
>1564	Identifier	scale
>1565	Identifier	ro
>1566	Callee	glScalef
>1567	Identifier	glScalef
>1568	ExpressionStatement	 
>1569	CallExpression	glTranslatef ( ro -> beforeScaleOffset . x , ro -> beforeScaleOffset . y , 0 )
>1570	ArgumentList	ro -> beforeScaleOffset . x
>1571	Argument	0
>1572	PrimaryExpression	0
>1573	Argument	ro -> beforeScaleOffset . y
>1574	MemberAccess	ro -> beforeScaleOffset . y
>1575	Identifier	y
>1576	PtrMemberAccess	ro -> beforeScaleOffset
>1577	Identifier	beforeScaleOffset
>1578	Identifier	ro
>1579	Argument	ro -> beforeScaleOffset . x
>1580	MemberAccess	ro -> beforeScaleOffset . x
>1581	Identifier	x
>1582	PtrMemberAccess	ro -> beforeScaleOffset
>1583	Identifier	beforeScaleOffset
>1584	Identifier	ro
>1585	Callee	glTranslatef
>1586	Identifier	glTranslatef
>1587	ExpressionStatement	 
>1588	CallExpression	glRotatef ( ro -> rotation . z + ro -> rotationOffset . z , 0 , 0 , 1 )
>1589	ArgumentList	ro -> rotation . z + ro -> rotationOffset . z
>1590	Argument	1
>1591	PrimaryExpression	1
>1592	Argument	0
>1593	PrimaryExpression	0
>1594	Argument	0
>1595	PrimaryExpression	0
>1596	Argument	ro -> rotation . z + ro -> rotationOffset . z
>1597	AdditiveExpression	ro -> rotation . z + ro -> rotationOffset . z
>1598	MemberAccess	ro -> rotationOffset . z
>1599	Identifier	z
>1600	PtrMemberAccess	ro -> rotationOffset
>1601	Identifier	rotationOffset
>1602	Identifier	ro
>1603	MemberAccess	ro -> rotation . z
>1604	Identifier	z
>1605	PtrMemberAccess	ro -> rotation
>1606	Identifier	rotation
>1607	Identifier	ro
>1608	Callee	glRotatef
>1609	Identifier	glRotatef
>1610	ExpressionStatement	 
>1611	CallExpression	glTranslatef ( ro -> position . x + ro -> offset . x , ro -> position . y + ro -> offset . y , 0 )
>1612	ArgumentList	ro -> position . x + ro -> offset . x
>1613	Argument	0
>1614	PrimaryExpression	0
>1615	Argument	ro -> position . y + ro -> offset . y
>1616	AdditiveExpression	ro -> position . y + ro -> offset . y
>1617	MemberAccess	ro -> offset . y
>1618	Identifier	y
>1619	PtrMemberAccess	ro -> offset
>1620	Identifier	offset
>1621	Identifier	ro
>1622	MemberAccess	ro -> position . y
>1623	Identifier	y
>1624	PtrMemberAccess	ro -> position
>1625	Identifier	position
>1626	Identifier	ro
>1627	Argument	ro -> position . x + ro -> offset . x
>1628	AdditiveExpression	ro -> position . x + ro -> offset . x
>1629	MemberAccess	ro -> offset . x
>1630	Identifier	x
>1631	PtrMemberAccess	ro -> offset
>1632	Identifier	offset
>1633	Identifier	ro
>1634	MemberAccess	ro -> position . x
>1635	Identifier	x
>1636	PtrMemberAccess	ro -> position
>1637	Identifier	position
>1638	Identifier	ro
>1639	Callee	glTranslatef
>1640	Identifier	glTranslatef
>1641	IfStatement	if ( RenderObject * parent = ro -> getParent ( ) )
>1642	ExpressionStatement	 
>1643	CallExpression	matrixChain ( parent )
>1644	ArgumentList	parent
>1645	Argument	parent
>1646	Identifier	parent
>1647	Callee	matrixChain
>1648	Identifier	matrixChain
>1649	Condition	 
>1650	AssignmentExpr	RenderObject * parent = ro -> getParent ( )
>1651	CallExpression	ro -> getParent ( )
>1652	ArgumentList	 
>1653	Callee	ro -> getParent
>1654	PtrMemberAccess	ro -> getParent
>1655	Identifier	getParent
>1656	Identifier	ro
>1657	MultiplicativeExpression	RenderObject * parent
>1658	Identifier	parent
>1659	Identifier	RenderObject
>1688	FunctionDef	RenderObject 
>1689	ParameterList	 
>1690	ReturnType	float
>1691	CompoundStatement	 
>1692	ReturnStatement	 
>1693	Identifier	rot
>1694	ExpressionStatement	 
>1695	CallExpression	MathFunctions 
>1696	ArgumentList	orig
>1697	Argument	rot
>1698	Identifier	rot
>1699	Argument	up
>1700	Identifier	up
>1701	Argument	orig
>1702	Identifier	orig
>1703	Callee	MathFunctions 
>1704	Identifier	MathFunctions 
>1705	IdentifierDeclStatement	 
>1706	IdentifierDecl	rot = 0
>1707	AssignmentExpr	rot = 0
>1708	PrimaryExpression	0
>1709	Identifier	rot
>1710	Identifier	rot
>1711	IdentifierDeclType	float
>1712	IdentifierDeclStatement	 
>1713	IdentifierDecl	orig = getWorldPosition ( )
>1714	AssignmentExpr	orig = getWorldPosition ( )
>1715	CallExpression	getWorldPosition ( )
>1716	ArgumentList	 
>1717	Callee	getWorldPosition
>1718	Identifier	getWorldPosition
>1719	Identifier	orig
>1720	Identifier	orig
>1721	IdentifierDeclType	Vector
>1722	IdentifierDeclStatement	 
>1723	IdentifierDecl	up = getWorldCollidePosition ( Vector ( 0 , 1 ) )
>1724	AssignmentExpr	up = getWorldCollidePosition ( Vector ( 0 , 1 ) )
>1725	CallExpression	getWorldCollidePosition ( Vector ( 0 , 1 ) )
>1726	ArgumentList	Vector ( 0 , 1 )
>1727	Argument	Vector ( 0 , 1 )
>1728	CallExpression	Vector ( 0 , 1 )
>1729	ArgumentList	0
>1730	Argument	1
>1731	PrimaryExpression	1
>1732	Argument	0
>1733	PrimaryExpression	0
>1734	Callee	Vector
>1735	Identifier	Vector
>1736	Callee	getWorldCollidePosition
>1737	Identifier	getWorldCollidePosition
>1738	Identifier	up
>1739	Identifier	up
>1740	IdentifierDeclType	Vector
>1750	FunctionDef	RenderObject 
>1751	ParameterList	 
>1752	ReturnType	Vector
>1753	CompoundStatement	 
>1754	ReturnStatement	 
>1755	Identifier	orig
>1756	ExpressionStatement	 
>1757	CallExpression	MathFunctions 
>1758	ArgumentList	orig
>1759	Argument	orig . z
>1760	MemberAccess	orig . z
>1761	Identifier	z
>1762	Identifier	orig
>1763	Argument	up
>1764	Identifier	up
>1765	Argument	orig
>1766	Identifier	orig
>1767	Callee	MathFunctions 
>1768	Identifier	MathFunctions 
>1769	IdentifierDeclStatement	 
>1770	IdentifierDecl	orig = getWorldPosition ( )
>1771	AssignmentExpr	orig = getWorldPosition ( )
>1772	CallExpression	getWorldPosition ( )
>1773	ArgumentList	 
>1774	Callee	getWorldPosition
>1775	Identifier	getWorldPosition
>1776	Identifier	orig
>1777	Identifier	orig
>1778	IdentifierDeclType	Vector
>1779	IdentifierDeclStatement	 
>1780	IdentifierDecl	up = getWorldCollidePosition ( Vector ( 0 , 1 ) )
>1781	AssignmentExpr	up = getWorldCollidePosition ( Vector ( 0 , 1 ) )
>1782	CallExpression	getWorldCollidePosition ( Vector ( 0 , 1 ) )
>1783	ArgumentList	Vector ( 0 , 1 )
>1784	Argument	Vector ( 0 , 1 )
>1785	CallExpression	Vector ( 0 , 1 )
>1786	ArgumentList	0
>1787	Argument	1
>1788	PrimaryExpression	1
>1789	Argument	0
>1790	PrimaryExpression	0
>1791	Callee	Vector
>1792	Identifier	Vector
>1793	Callee	getWorldCollidePosition
>1794	Identifier	getWorldCollidePosition
>1795	Identifier	up
>1796	Identifier	up
>1797	IdentifierDeclType	Vector
>1807	FunctionDef	RenderObject 
>1808	ParameterList	const Vector & vec
>1809	Parameter	 
>1810	Identifier	vec
>1811	ParameterType	const Vector &
>1812	ReturnType	Vector
>1813	CompoundStatement	 
>1814	ReturnStatement	 
>1815	CallExpression	Vector ( transformMatrix [ 3 ] [ 0 ] , transformMatrix [ 3 ] [ 1 ] , 0 )
>1816	ArgumentList	transformMatrix [ 3 ] [ 0 ]
>1817	Argument	0
>1818	PrimaryExpression	0
>1819	Argument	transformMatrix [ 3 ] [ 1 ]
>1820	ArrayIndexing	transformMatrix [ 3 ] [ 1 ]
>1821	PrimaryExpression	1
>1822	ArrayIndexing	transformMatrix [ 3 ]
>1823	PrimaryExpression	3
>1824	Identifier	transformMatrix
>1825	Argument	transformMatrix [ 3 ] [ 0 ]
>1826	ArrayIndexing	transformMatrix [ 3 ] [ 0 ]
>1827	PrimaryExpression	0
>1828	ArrayIndexing	transformMatrix [ 3 ]
>1829	PrimaryExpression	3
>1830	Identifier	transformMatrix
>1831	Callee	Vector
>1832	Identifier	Vector
>1833	IdentifierDeclStatement	 
>1834	IdentifierDecl	transformMatrix = glm 
>1835	AssignmentExpr	transformMatrix = glm 
>1836	CallExpression	glm 
>1837	ArgumentList	matrixChain ( this )
>1838	Argument	glm 
>1839	CallExpression	glm 
>1840	ArgumentList	collidePosition . x + vec . x
>1841	Argument	0.0f
>1842	PrimaryExpression	0.0f
>1843	Argument	collidePosition . y + vec . y
>1844	AdditiveExpression	collidePosition . y + vec . y
>1845	MemberAccess	vec . y
>1846	Identifier	y
>1847	Identifier	vec
>1848	MemberAccess	collidePosition . y
>1849	Identifier	y
>1850	Identifier	collidePosition
>1851	Argument	collidePosition . x + vec . x
>1852	AdditiveExpression	collidePosition . x + vec . x
>1853	MemberAccess	vec . x
>1854	Identifier	x
>1855	Identifier	vec
>1856	MemberAccess	collidePosition . x
>1857	Identifier	x
>1858	Identifier	collidePosition
>1859	Callee	glm 
>1860	Identifier	glm 
>1861	Argument	matrixChain ( this )
>1862	CallExpression	matrixChain ( this )
>1863	ArgumentList	this
>1864	Argument	this
>1865	Identifier	this
>1866	Callee	matrixChain
>1867	Identifier	matrixChain
>1868	Callee	glm 
>1869	Identifier	glm 
>1870	Identifier	transformMatrix
>1871	Identifier	transformMatrix
>1872	IdentifierDeclType	glm 
>1890	FunctionDef	RenderObject 
>1891	ParameterList	bool fh
>1892	Parameter	 
>1893	Identifier	fh
>1894	ParameterType	bool
>1895	ReturnType	void
>1896	CompoundStatement	 
>1897	IfStatement	if ( ( fh && ! _fh ) || ( ! fh && _fh ) )
>1898	CompoundStatement	 
>1899	ExpressionStatement	 
>1900	CallExpression	flipHorizontal ( )
>1901	ArgumentList	 
>1902	Callee	flipHorizontal
>1903	Identifier	flipHorizontal
>1904	Condition	 
>1905	OrExpression	( fh && ! _fh ) || ( ! fh && _fh )
>1906	AndExpression	! fh && _fh
>1907	Identifier	_fh
>1908	UnaryOp	! fh
>1909	Identifier	fh
>1910	UnaryOperator	!
>1911	AndExpression	fh && ! _fh
>1912	UnaryOp	! _fh
>1913	Identifier	_fh
>1914	UnaryOperator	!
>1915	Identifier	fh
>1921	FunctionDef	RenderObject 
>1922	ParameterList	 
>1923	ReturnType	void
>1924	CompoundStatement	 
>1925	IfStatement	if ( wasFlippedHorizontal != _fh )
>1926	CompoundStatement	 
>1927	ExpressionStatement	 
>1928	CallExpression	onFH ( )
>1929	ArgumentList	 
>1930	Callee	onFH
>1931	Identifier	onFH
>1932	Condition	 
>1933	EqualityExpression	wasFlippedHorizontal != _fh
>1934	Identifier	_fh
>1935	Identifier	wasFlippedHorizontal
>1936	ExpressionStatement	 
>1937	AssignmentExpr	_fh = ! _fh
>1938	UnaryOp	! _fh
>1939	Identifier	_fh
>1940	UnaryOperator	!
>1941	Identifier	_fh
>1942	IdentifierDeclStatement	 
>1943	IdentifierDecl	wasFlippedHorizontal = _fh
>1944	AssignmentExpr	wasFlippedHorizontal = _fh
>1945	Identifier	_fh
>1946	Identifier	_fh
>1947	Identifier	wasFlippedHorizontal
>1948	IdentifierDeclType	bool
>1954	FunctionDef	RenderObject 
>1955	ParameterList	 
>1956	ReturnType	void
>1957	CompoundStatement	 
>1958	ExpressionStatement	 
>1959	AssignmentExpr	_fv = ! _fv
>1960	UnaryOp	! _fv
>1961	Identifier	_fv
>1962	UnaryOperator	!
>1963	Identifier	_fv
>1968	FunctionDef	RenderObject 
>1969	ParameterList	 
>1970	ReturnType	void
>1971	CompoundStatement	 
>1972	ExpressionStatement	 
>1973	AssignmentExpr	texture = NULL
>1974	Identifier	NULL
>1975	Identifier	texture
>1976	IfStatement	if ( parent )
>1977	CompoundStatement	 
>1978	ExpressionStatement	 
>1979	AssignmentExpr	parent = 0
>1980	PrimaryExpression	0
>1981	Identifier	parent
>1982	ExpressionStatement	 
>1983	CallExpression	parent -> removeChild ( this )
>1984	ArgumentList	this
>1985	Argument	this
>1986	Identifier	this
>1987	Callee	parent -> removeChild
>1988	PtrMemberAccess	parent -> removeChild
>1989	Identifier	removeChild
>1990	Identifier	parent
>1991	Condition	 
>1992	Identifier	parent
>1993	ExpressionStatement	 
>1994	CallExpression	children . clear ( )
>1995	ArgumentList	 
>1996	Callee	children . clear
>1997	MemberAccess	children . clear
>1998	Identifier	clear
>1999	Identifier	children
>2000	ForStatement	for ( Children 
>2001	CompoundStatement	 
>2002	SwitchStatement	switch ( ( * i ) -> pm )
>2003	CompoundStatement	 
>2004	BreakStatement	 
>2005	ExpressionStatement	 
>2006	UnaryOp	* i
>2007	Identifier	i
>2008	UnaryOperator	*
>2009	Statement	 
>2010	ExpressionStatement	 
>2011	CallExpression	( * i ) -> destroy ( )
>2012	ArgumentList	 
>2013	Callee	( * i ) -> destroy
>2014	PtrMemberAccess	( * i ) -> destroy
>2015	Identifier	destroy
>2016	UnaryOp	* i
>2017	Identifier	i
>2018	UnaryOperator	*
>2019	Label	 
>2020	Identifier	PM_POINTER
>2021	BreakStatement	 
>2022	ExpressionStatement	 
>2023	CallExpression	( * i ) -> destroy ( )
>2024	ArgumentList	 
>2025	Callee	( * i ) -> destroy
>2026	PtrMemberAccess	( * i ) -> destroy
>2027	Identifier	destroy
>2028	UnaryOp	* i
>2029	Identifier	i
>2030	UnaryOperator	*
>2031	Label	 
>2032	Identifier	PM_STATIC
>2033	Condition	 
>2034	PtrMemberAccess	( * i ) -> pm
>2035	Identifier	pm
>2036	UnaryOp	* i
>2037	Identifier	i
>2038	UnaryOperator	*
>2039	ExpressionStatement	 
>2040	AssignmentExpr	( * i ) -> parent = 0
>2041	PrimaryExpression	0
>2042	PtrMemberAccess	( * i ) -> parent
>2043	Identifier	parent
>2044	UnaryOp	* i
>2045	Identifier	i
>2046	UnaryOperator	*
>2047	IncDecOp	 
>2048	IncDec	++
>2049	Identifier	i
>2050	Condition	 
>2051	EqualityExpression	i != children . end ( )
>2052	CallExpression	children . end ( )
>2053	ArgumentList	 
>2054	Callee	children . end
>2055	MemberAccess	children . end
>2056	Identifier	end
>2057	Identifier	children
>2058	Identifier	i
>2059	ForInit	 
>2060	IdentifierDeclStatement	Children 
>2061	IdentifierDecl	i = children . begin ( )
>2062	AssignmentExpr	i = children . begin ( )
>2063	CallExpression	children . begin ( )
>2064	ArgumentList	 
>2065	Callee	children . begin
>2066	MemberAccess	children . begin
>2067	Identifier	begin
>2068	Identifier	children
>2069	Identifier	i
>2070	Identifier	i
>2071	IdentifierDeclType	Children 
>2087	FunctionDef	RenderObject 
>2088	ParameterList	RenderObject * target
>2089	Parameter	 
>2090	Identifier	target
>2091	ParameterType	RenderObject *
>2092	ReturnType	void
>2093	CompoundStatement	 
>2094	ExpressionStatement	 
>2095	AssignmentExpr	this -> velocity = target -> velocity
>2096	PtrMemberAccess	target -> velocity
>2097	Identifier	velocity
>2098	Identifier	target
>2099	PtrMemberAccess	this -> velocity
>2100	Identifier	velocity
>2101	Identifier	this
>2102	ExpressionStatement	 
>2103	AssignmentExpr	this -> alpha = target -> alpha
>2104	PtrMemberAccess	target -> alpha
>2105	Identifier	alpha
>2106	Identifier	target
>2107	PtrMemberAccess	this -> alpha
>2108	Identifier	alpha
>2109	Identifier	this
>2110	ExpressionStatement	 
>2111	AssignmentExpr	this -> position = target -> position
>2112	PtrMemberAccess	target -> position
>2113	Identifier	position
>2114	Identifier	target
>2115	PtrMemberAccess	this -> position
>2116	Identifier	position
>2117	Identifier	this
>2118	ExpressionStatement	 
>2119	AssignmentExpr	this -> color = target -> color
>2120	PtrMemberAccess	target -> color
>2121	Identifier	color
>2122	Identifier	target
>2123	PtrMemberAccess	this -> color
>2124	Identifier	color
>2125	Identifier	this
>2141	FunctionDef	operator = (const RenderObject & r)
>2142	ParameterList	const RenderObject & r
>2143	Parameter	 
>2144	Identifier	r
>2145	ParameterType	const RenderObject &
>2146	CompoundStatement	 
>2147	ReturnStatement	 
>2148	UnaryOp	* this
>2149	Identifier	this
>2150	UnaryOperator	*
>2151	ExpressionStatement	 
>2152	CallExpression	errorLog ( \"Operator= not defined for RenderObject. Use 'copyProperties'\" )
>2153	ArgumentList	\"Operator= not defined for RenderObject. Use 'copyProperties'\"
>2154	Argument	\"Operator= not defined for RenderObject. Use 'copyProperties'\"
>2155	PrimaryExpression	\"Operator= not defined for RenderObject. Use 'copyProperties'\"
>2156	Callee	errorLog
>2157	Identifier	errorLog
>2164	FunctionDef	RenderObject 
>2165	ParameterList	 
>2166	ReturnType	Vector
>2167	CompoundStatement	 
>2168	ReturnStatement	 
>2169	AdditiveExpression	position + offset
>2170	Identifier	offset
>2171	Identifier	position
>2172	IfStatement	if ( parent )
>2173	CompoundStatement	 
>2174	ReturnStatement	 
>2175	AdditiveExpression	position + offset + parent -> getRealPosition ( )
>2176	AdditiveExpression	offset + parent -> getRealPosition ( )
>2177	CallExpression	parent -> getRealPosition ( )
>2178	ArgumentList	 
>2179	Callee	parent -> getRealPosition
>2180	PtrMemberAccess	parent -> getRealPosition
>2181	Identifier	getRealPosition
>2182	Identifier	parent
>2183	Identifier	offset
>2184	Identifier	position
>2185	Condition	 
>2186	Identifier	parent
>2195	FunctionDef	RenderObject 
>2196	ParameterList	 
>2197	ReturnType	Vector
>2198	CompoundStatement	 
>2199	ReturnStatement	 
>2200	Identifier	scale
>2201	IfStatement	if ( parent )
>2202	CompoundStatement	 
>2203	ReturnStatement	 
>2204	MultiplicativeExpression	scale * parent -> getRealScale ( )
>2205	CallExpression	parent -> getRealScale ( )
>2206	ArgumentList	 
>2207	Callee	parent -> getRealScale
>2208	PtrMemberAccess	parent -> getRealScale
>2209	Identifier	getRealScale
>2210	Identifier	parent
>2211	Identifier	scale
>2212	Condition	 
>2213	Identifier	parent
>2221	FunctionDef	RenderObject 
>2222	ParameterList	StateData * state
>2223	Parameter	 
>2224	Identifier	state
>2225	ParameterType	StateData *
>2226	ReturnType	void
>2227	CompoundStatement	 
>2228	ExpressionStatement	 
>2229	AssignmentExpr	stateData = state
>2230	Identifier	state
>2231	Identifier	stateData
>2237	FunctionDef	RenderObject 
>2238	ParameterList	bool value
>2239	Parameter	 
>2240	Identifier	value
>2241	ParameterType	bool
>2242	ReturnType	void
>2243	CompoundStatement	 
>2244	ExpressionStatement	 
>2245	AssignmentExpr	cull = value
>2246	Identifier	value
>2247	Identifier	cull
>2253	FunctionDef	RenderObject 
>2254	ParameterList	 
>2255	ReturnType	void
>2256	CompoundStatement	 
>2257	IfStatement	if ( RenderObject * p = parent )
>2258	ElseStatement	else
>2259	IfStatement	if ( layer != - 1 )
>2260	ExpressionStatement	 
>2261	CallExpression	core -> renderObjectLayers [ this -> layer ] . moveToFront ( this )
>2262	ArgumentList	this
>2263	Argument	this
>2264	Identifier	this
>2265	Callee	core -> renderObjectLayers [ this -> layer ] . moveToFront
>2266	MemberAccess	core -> renderObjectLayers [ this -> layer ] . moveToFront
>2267	Identifier	moveToFront
>2268	ArrayIndexing	core -> renderObjectLayers [ this -> layer ]
>2269	PtrMemberAccess	this -> layer
>2270	Identifier	layer
>2271	Identifier	this
>2272	PtrMemberAccess	core -> renderObjectLayers
>2273	Identifier	renderObjectLayers
>2274	Identifier	core
>2275	Condition	 
>2276	EqualityExpression	layer != - 1
>2277	UnaryOp	- 1
>2278	PrimaryExpression	1
>2279	UnaryOperator	-
>2280	Identifier	layer
>2281	CompoundStatement	 
>2282	IfStatement	if ( p -> children . size ( ) && p -> children [ 0 ] != this )
>2283	CompoundStatement	 
>2284	ExpressionStatement	 
>2285	CallExpression	p -> addChild ( this , ( ParentManaged ) this -> pm , RBP_NONE , CHILD_FRONT )
>2286	ArgumentList	this
>2287	Argument	CHILD_FRONT
>2288	Identifier	CHILD_FRONT
>2289	Argument	RBP_NONE
>2290	Identifier	RBP_NONE
>2291	Argument	( ParentManaged ) this -> pm
>2292	CastExpression	( ParentManaged ) this -> pm
>2293	PtrMemberAccess	this -> pm
>2294	Identifier	pm
>2295	Identifier	this
>2296	CastTarget	ParentManaged
>2297	Argument	this
>2298	Identifier	this
>2299	Callee	p -> addChild
>2300	PtrMemberAccess	p -> addChild
>2301	Identifier	addChild
>2302	Identifier	p
>2303	ExpressionStatement	 
>2304	CallExpression	p -> removeChild ( this )
>2305	ArgumentList	this
>2306	Argument	this
>2307	Identifier	this
>2308	Callee	p -> removeChild
>2309	PtrMemberAccess	p -> removeChild
>2310	Identifier	removeChild
>2311	Identifier	p
>2312	Condition	 
>2313	AndExpression	p -> children . size ( ) && p -> children [ 0 ] != this
>2314	EqualityExpression	p -> children [ 0 ] != this
>2315	Identifier	this
>2316	ArrayIndexing	p -> children [ 0 ]
>2317	PrimaryExpression	0
>2318	PtrMemberAccess	p -> children
>2319	Identifier	children
>2320	Identifier	p
>2321	CallExpression	p -> children . size ( )
>2322	ArgumentList	 
>2323	Callee	p -> children . size
>2324	MemberAccess	p -> children . size
>2325	Identifier	size
>2326	PtrMemberAccess	p -> children
>2327	Identifier	children
>2328	Identifier	p
>2329	Condition	 
>2330	AssignmentExpr	RenderObject * p = parent
>2331	Identifier	parent
>2332	MultiplicativeExpression	RenderObject * p
>2333	Identifier	p
>2334	Identifier	RenderObject
>2360	FunctionDef	RenderObject 
>2361	ParameterList	 
>2362	ReturnType	void
>2363	CompoundStatement	 
>2364	IfStatement	if ( RenderObject * p = parent )
>2365	ElseStatement	else
>2366	IfStatement	if ( layer != - 1 )
>2367	ExpressionStatement	 
>2368	CallExpression	core -> renderObjectLayers [ this -> layer ] . moveToBack ( this )
>2369	ArgumentList	this
>2370	Argument	this
>2371	Identifier	this
>2372	Callee	core -> renderObjectLayers [ this -> layer ] . moveToBack
>2373	MemberAccess	core -> renderObjectLayers [ this -> layer ] . moveToBack
>2374	Identifier	moveToBack
>2375	ArrayIndexing	core -> renderObjectLayers [ this -> layer ]
>2376	PtrMemberAccess	this -> layer
>2377	Identifier	layer
>2378	Identifier	this
>2379	PtrMemberAccess	core -> renderObjectLayers
>2380	Identifier	renderObjectLayers
>2381	Identifier	core
>2382	Condition	 
>2383	EqualityExpression	layer != - 1
>2384	UnaryOp	- 1
>2385	PrimaryExpression	1
>2386	UnaryOperator	-
>2387	Identifier	layer
>2388	CompoundStatement	 
>2389	IfStatement	if ( p -> children . size ( ) && p -> children [ p -> children . size ( ) - 1 ] != this )
>2390	CompoundStatement	 
>2391	ExpressionStatement	 
>2392	CallExpression	p -> addChild ( this , ( ParentManaged ) this -> pm , RBP_NONE , CHILD_BACK )
>2393	ArgumentList	this
>2394	Argument	CHILD_BACK
>2395	Identifier	CHILD_BACK
>2396	Argument	RBP_NONE
>2397	Identifier	RBP_NONE
>2398	Argument	( ParentManaged ) this -> pm
>2399	CastExpression	( ParentManaged ) this -> pm
>2400	PtrMemberAccess	this -> pm
>2401	Identifier	pm
>2402	Identifier	this
>2403	CastTarget	ParentManaged
>2404	Argument	this
>2405	Identifier	this
>2406	Callee	p -> addChild
>2407	PtrMemberAccess	p -> addChild
>2408	Identifier	addChild
>2409	Identifier	p
>2410	ExpressionStatement	 
>2411	CallExpression	p -> removeChild ( this )
>2412	ArgumentList	this
>2413	Argument	this
>2414	Identifier	this
>2415	Callee	p -> removeChild
>2416	PtrMemberAccess	p -> removeChild
>2417	Identifier	removeChild
>2418	Identifier	p
>2419	Condition	 
>2420	AndExpression	p -> children . size ( ) && p -> children [ p -> children . size ( ) - 1 ] != this
>2421	EqualityExpression	p -> children [ p -> children . size ( ) - 1 ] != this
>2422	Identifier	this
>2423	ArrayIndexing	p -> children [ p -> children . size ( ) - 1 ]
>2424	AdditiveExpression	p -> children . size ( ) - 1
>2425	PrimaryExpression	1
>2426	CallExpression	p -> children . size ( )
>2427	ArgumentList	 
>2428	Callee	p -> children . size
>2429	MemberAccess	p -> children . size
>2430	Identifier	size
>2431	PtrMemberAccess	p -> children
>2432	Identifier	children
>2433	Identifier	p
>2434	PtrMemberAccess	p -> children
>2435	Identifier	children
>2436	Identifier	p
>2437	CallExpression	p -> children . size ( )
>2438	ArgumentList	 
>2439	Callee	p -> children . size
>2440	MemberAccess	p -> children . size
>2441	Identifier	size
>2442	PtrMemberAccess	p -> children
>2443	Identifier	children
>2444	Identifier	p
>2445	Condition	 
>2446	AssignmentExpr	RenderObject * p = parent
>2447	Identifier	parent
>2448	MultiplicativeExpression	RenderObject * p
>2449	Identifier	p
>2450	Identifier	RenderObject
>2477	FunctionDef	RenderObject 
>2478	ParameterList	int sz , int off
>2479	Parameter	 
>2480	Identifier	off
>2481	ParameterType	int
>2482	Parameter	 
>2483	Identifier	sz
>2484	ParameterType	int
>2485	ReturnType	void
>2486	CompoundStatement	 
>2487	ForStatement	for ( int i = 0 ; i < motionBlurPositions . size ( ) ; i ++ )
>2488	CompoundStatement	 
>2489	ExpressionStatement	 
>2490	AssignmentExpr	motionBlurPositions [ i ] . rotz = rotation . z
>2491	MemberAccess	rotation . z
>2492	Identifier	z
>2493	Identifier	rotation
>2494	MemberAccess	motionBlurPositions [ i ] . rotz
>2495	Identifier	rotz
>2496	ArrayIndexing	motionBlurPositions [ i ]
>2497	Identifier	i
>2498	Identifier	motionBlurPositions
>2499	ExpressionStatement	 
>2500	AssignmentExpr	motionBlurPositions [ i ] . position = position
>2501	Identifier	position
>2502	MemberAccess	motionBlurPositions [ i ] . position
>2503	Identifier	position
>2504	ArrayIndexing	motionBlurPositions [ i ]
>2505	Identifier	i
>2506	Identifier	motionBlurPositions
>2507	IncDecOp	 
>2508	IncDec	++
>2509	Identifier	i
>2510	Condition	 
>2511	RelationalExpression	i < motionBlurPositions . size ( )
>2512	CallExpression	motionBlurPositions . size ( )
>2513	ArgumentList	 
>2514	Callee	motionBlurPositions . size
>2515	MemberAccess	motionBlurPositions . size
>2516	Identifier	size
>2517	Identifier	motionBlurPositions
>2518	Identifier	i
>2519	ForInit	 
>2520	IdentifierDeclStatement	int i = 0 ;
>2521	IdentifierDecl	i = 0
>2522	AssignmentExpr	i = 0
>2523	PrimaryExpression	0
>2524	Identifier	i
>2525	Identifier	i
>2526	IdentifierDeclType	int
>2527	ExpressionStatement	 
>2528	AssignmentExpr	motionBlurFrameOffset = off
>2529	Identifier	off
>2530	Identifier	motionBlurFrameOffset
>2531	ExpressionStatement	 
>2532	AssignmentExpr	motionBlurFrameOffsetCounter = 0
>2533	PrimaryExpression	0
>2534	Identifier	motionBlurFrameOffsetCounter
>2535	ExpressionStatement	 
>2536	CallExpression	motionBlurPositions . resize ( sz )
>2537	ArgumentList	sz
>2538	Argument	sz
>2539	Identifier	sz
>2540	Callee	motionBlurPositions . resize
>2541	MemberAccess	motionBlurPositions . resize
>2542	Identifier	resize
>2543	Identifier	motionBlurPositions
>2544	ExpressionStatement	 
>2545	AssignmentExpr	motionBlur = true
>2546	Identifier	true
>2547	Identifier	motionBlur
>2567	FunctionDef	RenderObject 
>2568	ParameterList	 
>2569	ReturnType	void
>2570	CompoundStatement	 
>2571	ExpressionStatement	 
>2572	AssignmentExpr	motionBlur = false
>2573	Identifier	false
>2574	Identifier	motionBlur
>2575	ExpressionStatement	 
>2576	AssignmentExpr	motionBlurTransitionTimer = 1.0
>2577	PrimaryExpression	1.0
>2578	Identifier	motionBlurTransitionTimer
>2579	ExpressionStatement	 
>2580	AssignmentExpr	motionBlurTransition = true
>2581	Identifier	true
>2582	Identifier	motionBlurTransition
>2591	FunctionDef	RenderObject 
>2592	ParameterList	 
>2593	ReturnType	bool
>2594	CompoundStatement	 
>2595	ReturnStatement	 
>2596	Identifier	fh
>2597	WhileStatement	while ( ( p = p -> parent ) )
>2598	ExpressionStatement	 
>2599	Condition	 
>2600	AssignmentExpr	p = p -> parent
>2601	PtrMemberAccess	p -> parent
>2602	Identifier	parent
>2603	Identifier	p
>2604	Identifier	p
>2605	DoStatement	do
>2606	IfStatement	if ( p -> isfh ( ) )
>2607	ExpressionStatement	fh = ! fh
>2608	AssignmentExpr	fh = ! fh
>2609	UnaryOp	! fh
>2610	Identifier	fh
>2611	UnaryOperator	!
>2612	Identifier	fh
>2613	Condition	p -> isfh ( )
>2614	CallExpression	p -> isfh ( )
>2615	ArgumentList	 
>2616	Callee	p -> isfh
>2617	PtrMemberAccess	p -> isfh
>2618	Identifier	isfh
>2619	Identifier	p
>2620	IdentifierDeclStatement	 
>2621	IdentifierDecl	fh = false
>2622	AssignmentExpr	fh = false
>2623	Identifier	false
>2624	Identifier	false
>2625	Identifier	fh
>2626	IdentifierDeclType	bool
>2627	IdentifierDeclStatement	 
>2628	IdentifierDecl	* p = this
>2629	AssignmentExpr	* p = this
>2630	Identifier	this
>2631	Identifier	this
>2632	Identifier	p
>2633	IdentifierDeclType	RenderObject *
>2644	FunctionDef	RenderObject 
>2645	ParameterList	 
>2646	ReturnType	bool
>2647	CompoundStatement	 
>2648	ReturnStatement	 
>2649	Identifier	fv
>2650	WhileStatement	while ( ( p = p -> parent ) )
>2651	ExpressionStatement	 
>2652	Condition	 
>2653	AssignmentExpr	p = p -> parent
>2654	PtrMemberAccess	p -> parent
>2655	Identifier	parent
>2656	Identifier	p
>2657	Identifier	p
>2658	DoStatement	do
>2659	IfStatement	if ( p -> isfv ( ) )
>2660	ExpressionStatement	fv = ! fv
>2661	AssignmentExpr	fv = ! fv
>2662	UnaryOp	! fv
>2663	Identifier	fv
>2664	UnaryOperator	!
>2665	Identifier	fv
>2666	Condition	p -> isfv ( )
>2667	CallExpression	p -> isfv ( )
>2668	ArgumentList	 
>2669	Callee	p -> isfv
>2670	PtrMemberAccess	p -> isfv
>2671	Identifier	isfv
>2672	Identifier	p
>2673	IdentifierDeclStatement	 
>2674	IdentifierDecl	fv = false
>2675	AssignmentExpr	fv = false
>2676	Identifier	false
>2677	Identifier	false
>2678	Identifier	fv
>2679	IdentifierDeclType	bool
>2680	IdentifierDeclStatement	 
>2681	IdentifierDecl	* p = this
>2682	AssignmentExpr	* p = this
>2683	Identifier	this
>2684	Identifier	this
>2685	Identifier	p
>2686	IdentifierDeclType	RenderObject *
>2697	FunctionDef	RenderObject 
>2698	ParameterList	const int pass
>2699	Parameter	 
>2700	Identifier	pass
>2701	ParameterType	const int
>2702	ReturnType	bool
>2703	CompoundStatement	 
>2704	ReturnStatement	 
>2705	Identifier	false
>2706	ForStatement	for ( Children 
>2707	CompoundStatement	 
>2708	IfStatement	if ( ! ( * i ) -> isDead ( ) && ( * i ) -> hasRenderPass ( pass ) )
>2709	ReturnStatement	 
>2710	Identifier	true
>2711	Condition	 
>2712	AndExpression	! ( * i ) -> isDead ( ) && ( * i ) -> hasRenderPass ( pass )
>2713	CallExpression	( * i ) -> hasRenderPass ( pass )
>2714	ArgumentList	pass
>2715	Argument	pass
>2716	Identifier	pass
>2717	Callee	( * i ) -> hasRenderPass
>2718	PtrMemberAccess	( * i ) -> hasRenderPass
>2719	Identifier	hasRenderPass
>2720	UnaryOp	* i
>2721	Identifier	i
>2722	UnaryOperator	*
>2723	UnaryOp	! ( * i ) -> isDead ( )
>2724	CallExpression	( * i ) -> isDead ( )
>2725	ArgumentList	 
>2726	Callee	( * i ) -> isDead
>2727	PtrMemberAccess	( * i ) -> isDead
>2728	Identifier	isDead
>2729	UnaryOp	* i
>2730	Identifier	i
>2731	UnaryOperator	*
>2732	UnaryOperator	!
>2733	IncDecOp	 
>2734	IncDec	++
>2735	Identifier	i
>2736	Condition	 
>2737	EqualityExpression	i != children . end ( )
>2738	CallExpression	children . end ( )
>2739	ArgumentList	 
>2740	Callee	children . end
>2741	MemberAccess	children . end
>2742	Identifier	end
>2743	Identifier	children
>2744	Identifier	i
>2745	ForInit	 
>2746	IdentifierDeclStatement	Children 
>2747	IdentifierDecl	i = children . begin ( )
>2748	AssignmentExpr	i = children . begin ( )
>2749	CallExpression	children . begin ( )
>2750	ArgumentList	 
>2751	Callee	children . begin
>2752	MemberAccess	children . begin
>2753	Identifier	begin
>2754	Identifier	children
>2755	Identifier	i
>2756	Identifier	i
>2757	IdentifierDeclType	Children 
>2758	IfStatement	if ( pass == renderPass )
>2759	ReturnStatement	 
>2760	Identifier	true
>2761	Condition	 
>2762	EqualityExpression	pass == renderPass
>2763	Identifier	renderPass
>2764	Identifier	pass
>2780	FunctionDef	RenderObject 
>2781	ParameterList	 
>2782	ReturnType	void
>2783	CompoundStatement	 
>2784	IfStatement	if ( motionBlur || motionBlurTransition )
>2785	ElseStatement	else
>2786	ExpressionStatement	 
>2787	CallExpression	renderCall ( )
>2788	ArgumentList	 
>2789	Callee	renderCall
>2790	Identifier	renderCall
>2791	CompoundStatement	 
>2792	ExpressionStatement	 
>2793	CallExpression	renderCall ( )
>2794	ArgumentList	 
>2795	Callee	renderCall
>2796	Identifier	renderCall
>2797	ExpressionStatement	 
>2798	AssignmentExpr	rotation . z = oldRotZ
>2799	Identifier	oldRotZ
>2800	MemberAccess	rotation . z
>2801	Identifier	z
>2802	Identifier	rotation
>2803	ExpressionStatement	 
>2804	AssignmentExpr	alpha . x = oldAlpha
>2805	Identifier	oldAlpha
>2806	MemberAccess	alpha . x
>2807	Identifier	x
>2808	Identifier	alpha
>2809	ExpressionStatement	 
>2810	AssignmentExpr	position = oldPos
>2811	Identifier	oldPos
>2812	Identifier	position
>2813	ForStatement	for ( int i = 0 ; i < motionBlurPositions . size ( ) ; i ++ )
>2814	CompoundStatement	 
>2815	ExpressionStatement	 
>2816	CallExpression	renderCall ( )
>2817	ArgumentList	 
>2818	Callee	renderCall
>2819	Identifier	renderCall
>2820	IfStatement	if ( motionBlurTransition )
>2821	CompoundStatement	 
>2822	ExpressionStatement	 
>2823	AssignmentExpr	alpha *= motionBlurTransitionTimer
>2824	Identifier	motionBlurTransitionTimer
>2825	Identifier	alpha
>2826	Condition	 
>2827	Identifier	motionBlurTransition
>2828	ExpressionStatement	 
>2829	AssignmentExpr	alpha *= 0.5f
>2830	PrimaryExpression	0.5f
>2831	Identifier	alpha
>2832	ExpressionStatement	 
>2833	AssignmentExpr	alpha = 1.0f - ( float ( i ) / float ( motionBlurPositions . size ( ) ) )
>2834	AdditiveExpression	1.0f - ( float ( i ) / float ( motionBlurPositions . size ( ) ) )
>2835	MultiplicativeExpression	float ( i ) / float ( motionBlurPositions . size ( ) )
>2836	CallExpression	float ( motionBlurPositions . size ( ) )
>2837	ArgumentList	motionBlurPositions . size ( )
>2838	Argument	motionBlurPositions . size ( )
>2839	CallExpression	motionBlurPositions . size ( )
>2840	ArgumentList	 
>2841	Callee	motionBlurPositions . size
>2842	MemberAccess	motionBlurPositions . size
>2843	Identifier	size
>2844	Identifier	motionBlurPositions
>2845	Callee	float
>2846	Identifier	float
>2847	CallExpression	float ( i )
>2848	ArgumentList	i
>2849	Argument	i
>2850	Identifier	i
>2851	Callee	float
>2852	Identifier	float
>2853	PrimaryExpression	1.0f
>2854	Identifier	alpha
>2855	ExpressionStatement	 
>2856	AssignmentExpr	rotation . z = motionBlurPositions [ i ] . rotz
>2857	MemberAccess	motionBlurPositions [ i ] . rotz
>2858	Identifier	rotz
>2859	ArrayIndexing	motionBlurPositions [ i ]
>2860	Identifier	i
>2861	Identifier	motionBlurPositions
>2862	MemberAccess	rotation . z
>2863	Identifier	z
>2864	Identifier	rotation
>2865	ExpressionStatement	 
>2866	AssignmentExpr	position = motionBlurPositions [ i ] . position
>2867	MemberAccess	motionBlurPositions [ i ] . position
>2868	Identifier	position
>2869	ArrayIndexing	motionBlurPositions [ i ]
>2870	Identifier	i
>2871	Identifier	motionBlurPositions
>2872	Identifier	position
>2873	IncDecOp	 
>2874	IncDec	++
>2875	Identifier	i
>2876	Condition	 
>2877	RelationalExpression	i < motionBlurPositions . size ( )
>2878	CallExpression	motionBlurPositions . size ( )
>2879	ArgumentList	 
>2880	Callee	motionBlurPositions . size
>2881	MemberAccess	motionBlurPositions . size
>2882	Identifier	size
>2883	Identifier	motionBlurPositions
>2884	Identifier	i
>2885	ForInit	 
>2886	IdentifierDeclStatement	int i = 0 ;
>2887	IdentifierDecl	i = 0
>2888	AssignmentExpr	i = 0
>2889	PrimaryExpression	0
>2890	Identifier	i
>2891	Identifier	i
>2892	IdentifierDeclType	int
>2893	IdentifierDeclStatement	 
>2894	IdentifierDecl	oldRotZ = rotation . z
>2895	AssignmentExpr	oldRotZ = rotation . z
>2896	MemberAccess	rotation . z
>2897	Identifier	z
>2898	Identifier	rotation
>2899	Identifier	oldRotZ
>2900	Identifier	oldRotZ
>2901	IdentifierDeclType	float
>2902	IdentifierDeclStatement	 
>2903	IdentifierDecl	oldAlpha = alpha . x
>2904	AssignmentExpr	oldAlpha = alpha . x
>2905	MemberAccess	alpha . x
>2906	Identifier	x
>2907	Identifier	alpha
>2908	Identifier	oldAlpha
>2909	Identifier	oldAlpha
>2910	IdentifierDeclType	float
>2911	IdentifierDeclStatement	 
>2912	IdentifierDecl	oldPos = position
>2913	AssignmentExpr	oldPos = position
>2914	Identifier	position
>2915	Identifier	position
>2916	Identifier	oldPos
>2917	IdentifierDeclType	Vector
>2918	Condition	 
>2919	OrExpression	motionBlur || motionBlurTransition
>2920	Identifier	motionBlurTransition
>2921	Identifier	motionBlur
>2922	IfStatement	if ( core -> currentLayerPass != RENDER_ALL && renderPass != RENDER_ALL )
>2923	CompoundStatement	 
>2924	IfStatement	if ( top == NULL && this -> overrideRenderPass != OVERRIDE_NONE )
>2925	ElseStatement	else
>2926	IfStatement	if ( top != NULL && top -> overrideRenderPass != OVERRIDE_NONE )
>2927	ElseStatement	else
>2928	CompoundStatement	 
>2929	IfStatement	if ( ! hasRenderPass ( core -> currentLayerPass ) )
>2930	ReturnStatement	 
>2931	Condition	 
>2932	UnaryOp	! hasRenderPass ( core -> currentLayerPass )
>2933	CallExpression	hasRenderPass ( core -> currentLayerPass )
>2934	ArgumentList	core -> currentLayerPass
>2935	Argument	core -> currentLayerPass
>2936	PtrMemberAccess	core -> currentLayerPass
>2937	Identifier	currentLayerPass
>2938	Identifier	core
>2939	Callee	hasRenderPass
>2940	Identifier	hasRenderPass
>2941	UnaryOperator	!
>2942	CompoundStatement	 
>2943	IfStatement	if ( core -> currentLayerPass != top -> overrideRenderPass )
>2944	ReturnStatement	 
>2945	Condition	 
>2946	EqualityExpression	core -> currentLayerPass != top -> overrideRenderPass
>2947	PtrMemberAccess	top -> overrideRenderPass
>2948	Identifier	overrideRenderPass
>2949	Identifier	top
>2950	PtrMemberAccess	core -> currentLayerPass
>2951	Identifier	currentLayerPass
>2952	Identifier	core
>2953	Condition	 
>2954	AndExpression	top != NULL && top -> overrideRenderPass != OVERRIDE_NONE
>2955	EqualityExpression	top -> overrideRenderPass != OVERRIDE_NONE
>2956	Identifier	OVERRIDE_NONE
>2957	PtrMemberAccess	top -> overrideRenderPass
>2958	Identifier	overrideRenderPass
>2959	Identifier	top
>2960	EqualityExpression	top != NULL
>2961	Identifier	NULL
>2962	Identifier	top
>2963	CompoundStatement	 
>2964	IfStatement	if ( core -> currentLayerPass != this -> renderPass && core -> currentLayerPass != this -> overrideRenderPass )
>2965	ReturnStatement	 
>2966	Condition	 
>2967	AndExpression	core -> currentLayerPass != this -> renderPass && core -> currentLayerPass != this -> overrideRenderPass
>2968	EqualityExpression	core -> currentLayerPass != this -> overrideRenderPass
>2969	PtrMemberAccess	this -> overrideRenderPass
>2970	Identifier	overrideRenderPass
>2971	Identifier	this
>2972	PtrMemberAccess	core -> currentLayerPass
>2973	Identifier	currentLayerPass
>2974	Identifier	core
>2975	EqualityExpression	core -> currentLayerPass != this -> renderPass
>2976	PtrMemberAccess	this -> renderPass
>2977	Identifier	renderPass
>2978	Identifier	this
>2979	PtrMemberAccess	core -> currentLayerPass
>2980	Identifier	currentLayerPass
>2981	Identifier	core
>2982	Condition	 
>2983	AndExpression	top == NULL && this -> overrideRenderPass != OVERRIDE_NONE
>2984	EqualityExpression	this -> overrideRenderPass != OVERRIDE_NONE
>2985	Identifier	OVERRIDE_NONE
>2986	PtrMemberAccess	this -> overrideRenderPass
>2987	Identifier	overrideRenderPass
>2988	Identifier	this
>2989	EqualityExpression	top == NULL
>2990	Identifier	NULL
>2991	Identifier	top
>2992	IdentifierDeclStatement	 
>2993	IdentifierDecl	* top = getTopParent ( )
>2994	AssignmentExpr	* top = getTopParent ( )
>2995	CallExpression	getTopParent ( )
>2996	ArgumentList	 
>2997	Callee	getTopParent
>2998	Identifier	getTopParent
>2999	Identifier	top
>3000	Identifier	top
>3001	IdentifierDeclType	RenderObject *
>3002	Condition	 
>3003	AndExpression	core -> currentLayerPass != RENDER_ALL && renderPass != RENDER_ALL
>3004	EqualityExpression	renderPass != RENDER_ALL
>3005	Identifier	RENDER_ALL
>3006	Identifier	renderPass
>3007	EqualityExpression	core -> currentLayerPass != RENDER_ALL
>3008	Identifier	RENDER_ALL
>3009	PtrMemberAccess	core -> currentLayerPass
>3010	Identifier	currentLayerPass
>3011	Identifier	core
>3012	IfStatement	if ( alpha . x == 0 || alphaMod == 0 )
>3013	ReturnStatement	 
>3014	Condition	 
>3015	OrExpression	alpha . x == 0 || alphaMod == 0
>3016	EqualityExpression	alphaMod == 0
>3017	PrimaryExpression	0
>3018	Identifier	alphaMod
>3019	EqualityExpression	alpha . x == 0
>3020	PrimaryExpression	0
>3021	MemberAccess	alpha . x
>3022	Identifier	x
>3023	Identifier	alpha
>3024	IfStatement	if ( isHidden ( ) )
>3025	ReturnStatement	 
>3026	Condition	 
>3027	CallExpression	isHidden ( )
>3028	ArgumentList	 
>3029	Callee	isHidden
>3030	Identifier	isHidden
>3071	FunctionDef	RenderObject 
>3072	ParameterList	 
>3073	ReturnType	void
>3074	CompoundStatement	 
>3075	ExpressionStatement	 
>3076	AssignmentExpr	position -= offset
>3077	Identifier	offset
>3078	Identifier	position
>3079	IfStatement	if ( ! RENDEROBJECT_FASTTRANSFORM )
>3080	CompoundStatement	 
>3081	ExpressionStatement	 
>3082	CallExpression	core -> applyMatrixStackToWorld ( )
>3083	ArgumentList	 
>3084	Callee	core -> applyMatrixStackToWorld
>3085	PtrMemberAccess	core -> applyMatrixStackToWorld
>3086	Identifier	applyMatrixStackToWorld
>3087	Identifier	core
>3088	ExpressionStatement	 
>3089	CallExpression	core -> getD3DMatrixStack ( ) -> Pop ( )
>3090	ArgumentList	 
>3091	Callee	core -> getD3DMatrixStack ( ) -> Pop
>3092	PtrMemberAccess	core -> getD3DMatrixStack ( ) -> Pop
>3093	Identifier	Pop
>3094	CallExpression	core -> getD3DMatrixStack ( )
>3095	ArgumentList	 
>3096	Callee	core -> getD3DMatrixStack
>3097	PtrMemberAccess	core -> getD3DMatrixStack
>3098	Identifier	getD3DMatrixStack
>3099	Identifier	core
>3100	ExpressionStatement	 
>3101	CallExpression	glPopMatrix ( )
>3102	ArgumentList	 
>3103	Callee	glPopMatrix
>3104	Identifier	glPopMatrix
>3105	Condition	 
>3106	UnaryOp	! RENDEROBJECT_FASTTRANSFORM
>3107	Identifier	RENDEROBJECT_FASTTRANSFORM
>3108	UnaryOperator	!
>3109	ForStatement	for ( Children 
>3110	CompoundStatement	 
>3111	IfStatement	if ( ! ( * i ) -> isDead ( ) && ! ( * i ) -> renderBeforeParent )
>3112	ExpressionStatement	 
>3113	CallExpression	( * i ) -> render ( )
>3114	ArgumentList	 
>3115	Callee	( * i ) -> render
>3116	PtrMemberAccess	( * i ) -> render
>3117	Identifier	render
>3118	UnaryOp	* i
>3119	Identifier	i
>3120	UnaryOperator	*
>3121	Condition	 
>3122	AndExpression	! ( * i ) -> isDead ( ) && ! ( * i ) -> renderBeforeParent
>3123	UnaryOp	! ( * i ) -> renderBeforeParent
>3124	PtrMemberAccess	( * i ) -> renderBeforeParent
>3125	Identifier	renderBeforeParent
>3126	UnaryOp	* i
>3127	Identifier	i
>3128	UnaryOperator	*
>3129	UnaryOperator	!
>3130	UnaryOp	! ( * i ) -> isDead ( )
>3131	CallExpression	( * i ) -> isDead ( )
>3132	ArgumentList	 
>3133	Callee	( * i ) -> isDead
>3134	PtrMemberAccess	( * i ) -> isDead
>3135	Identifier	isDead
>3136	UnaryOp	* i
>3137	Identifier	i
>3138	UnaryOperator	*
>3139	UnaryOperator	!
>3140	IncDecOp	 
>3141	IncDec	++
>3142	Identifier	i
>3143	Condition	 
>3144	EqualityExpression	i != children . end ( )
>3145	CallExpression	children . end ( )
>3146	ArgumentList	 
>3147	Callee	children . end
>3148	MemberAccess	children . end
>3149	Identifier	end
>3150	Identifier	children
>3151	Identifier	i
>3152	ForInit	 
>3153	IdentifierDeclStatement	Children 
>3154	IdentifierDecl	i = children . begin ( )
>3155	AssignmentExpr	i = children . begin ( )
>3156	CallExpression	children . begin ( )
>3157	ArgumentList	 
>3158	Callee	children . begin
>3159	MemberAccess	children . begin
>3160	Identifier	begin
>3161	Identifier	children
>3162	Identifier	i
>3163	Identifier	i
>3164	IdentifierDeclType	Children 
>3165	IfStatement	if ( ! RENDEROBJECT_SHAREATTRIBUTES )
>3166	CompoundStatement	 
>3167	ExpressionStatement	 
>3168	CallExpression	glPopAttrib ( )
>3169	ArgumentList	 
>3170	Callee	glPopAttrib
>3171	Identifier	glPopAttrib
>3172	Condition	 
>3173	UnaryOp	! RENDEROBJECT_SHAREATTRIBUTES
>3174	Identifier	RENDEROBJECT_SHAREATTRIBUTES
>3175	UnaryOperator	!
>3176	IfStatement	if ( doRender )
>3177	ExpressionStatement	 
>3178	CallExpression	onRender ( )
>3179	ArgumentList	 
>3180	Callee	onRender
>3181	Identifier	onRender
>3182	Condition	 
>3183	Identifier	doRender
>3184	IfStatement	if ( renderCollisionShape )
>3185	ExpressionStatement	 
>3186	CallExpression	renderCollision ( )
>3187	ArgumentList	 
>3188	Callee	renderCollision
>3189	Identifier	renderCollision
>3190	Condition	 
>3191	Identifier	renderCollisionShape
>3192	IfStatement	if ( core -> currentLayerPass != RENDER_ALL && renderPass != RENDER_ALL )
>3193	CompoundStatement	 
>3194	ExpressionStatement	 
>3195	AssignmentExpr	doRender = ( core -> currentLayerPass == pass )
>3196	EqualityExpression	core -> currentLayerPass == pass
>3197	Identifier	pass
>3198	PtrMemberAccess	core -> currentLayerPass
>3199	Identifier	currentLayerPass
>3200	Identifier	core
>3201	Identifier	doRender
>3202	IfStatement	if ( top )
>3203	CompoundStatement	 
>3204	IfStatement	if ( top -> overrideRenderPass != OVERRIDE_NONE )
>3205	ExpressionStatement	 
>3206	AssignmentExpr	pass = top -> overrideRenderPass
>3207	PtrMemberAccess	top -> overrideRenderPass
>3208	Identifier	overrideRenderPass
>3209	Identifier	top
>3210	Identifier	pass
>3211	Condition	 
>3212	EqualityExpression	top -> overrideRenderPass != OVERRIDE_NONE
>3213	Identifier	OVERRIDE_NONE
>3214	PtrMemberAccess	top -> overrideRenderPass
>3215	Identifier	overrideRenderPass
>3216	Identifier	top
>3217	Condition	 
>3218	Identifier	top
>3219	IdentifierDeclStatement	 
>3220	IdentifierDecl	* top = getTopParent ( )
>3221	AssignmentExpr	* top = getTopParent ( )
>3222	CallExpression	getTopParent ( )
>3223	ArgumentList	 
>3224	Callee	getTopParent
>3225	Identifier	getTopParent
>3226	Identifier	top
>3227	Identifier	top
>3228	IdentifierDeclType	RenderObject *
>3229	Condition	 
>3230	AndExpression	core -> currentLayerPass != RENDER_ALL && renderPass != RENDER_ALL
>3231	EqualityExpression	renderPass != RENDER_ALL
>3232	Identifier	RENDER_ALL
>3233	Identifier	renderPass
>3234	EqualityExpression	core -> currentLayerPass != RENDER_ALL
>3235	Identifier	RENDER_ALL
>3236	PtrMemberAccess	core -> currentLayerPass
>3237	Identifier	currentLayerPass
>3238	Identifier	core
>3239	IdentifierDeclStatement	 
>3240	IdentifierDecl	pass = renderPass
>3241	AssignmentExpr	pass = renderPass
>3242	Identifier	renderPass
>3243	Identifier	renderPass
>3244	Identifier	pass
>3245	IdentifierDeclType	int
>3246	IdentifierDeclStatement	 
>3247	IdentifierDecl	doRender = true
>3248	AssignmentExpr	doRender = true
>3249	Identifier	true
>3250	Identifier	true
>3251	Identifier	doRender
>3252	IdentifierDeclType	bool
>3253	ExpressionStatement	 
>3254	CallExpression	applyBlendType ( )
>3255	ArgumentList	 
>3256	Callee	applyBlendType
>3257	Identifier	applyBlendType
>3258	IfStatement	if ( texture )
>3259	ElseStatement	else
>3260	CompoundStatement	 
>3261	IfStatement	if ( lastTextureApplied != 0 || repeatTexture != lastTextureRepeat )
>3262	CompoundStatement	 
>3263	ExpressionStatement	 
>3264	AssignmentExpr	lastTextureRepeat = repeatTexture
>3265	Identifier	repeatTexture
>3266	Identifier	lastTextureRepeat
>3267	ExpressionStatement	 
>3268	AssignmentExpr	lastTextureApplied = 0
>3269	PrimaryExpression	0
>3270	Identifier	lastTextureApplied
>3271	ExpressionStatement	 
>3272	CallExpression	core -> bindTexture ( 0 , 0 )
>3273	ArgumentList	0
>3274	Argument	0
>3275	PrimaryExpression	0
>3276	Argument	0
>3277	PrimaryExpression	0
>3278	Callee	core -> bindTexture
>3279	PtrMemberAccess	core -> bindTexture
>3280	Identifier	bindTexture
>3281	Identifier	core
>3282	ExpressionStatement	 
>3283	CallExpression	glBindTexture ( GL_TEXTURE_2D , 0 )
>3284	ArgumentList	GL_TEXTURE_2D
>3285	Argument	0
>3286	PrimaryExpression	0
>3287	Argument	GL_TEXTURE_2D
>3288	Identifier	GL_TEXTURE_2D
>3289	Callee	glBindTexture
>3290	Identifier	glBindTexture
>3291	Condition	 
>3292	OrExpression	lastTextureApplied != 0 || repeatTexture != lastTextureRepeat
>3293	EqualityExpression	repeatTexture != lastTextureRepeat
>3294	Identifier	lastTextureRepeat
>3295	Identifier	repeatTexture
>3296	EqualityExpression	lastTextureApplied != 0
>3297	PrimaryExpression	0
>3298	Identifier	lastTextureApplied
>3299	CompoundStatement	 
>3300	ExpressionStatement	 
>3301	CallExpression	texture -> apply ( repeatTexture )
>3302	ArgumentList	repeatTexture
>3303	Argument	repeatTexture
>3304	Identifier	repeatTexture
>3305	Callee	texture -> apply
>3306	PtrMemberAccess	texture -> apply
>3307	Identifier	apply
>3308	Identifier	texture
>3309	IfStatement	if ( texture -> textures [ 0 ] != lastTextureApplied || repeatTexture != lastTextureRepeat )
>3310	CompoundStatement	 
>3311	ExpressionStatement	 
>3312	AssignmentExpr	lastTextureApplied = texture -> textures [ 0 ]
>3313	ArrayIndexing	texture -> textures [ 0 ]
>3314	PrimaryExpression	0
>3315	PtrMemberAccess	texture -> textures
>3316	Identifier	textures
>3317	Identifier	texture
>3318	Identifier	lastTextureApplied
>3319	ExpressionStatement	 
>3320	AssignmentExpr	lastTextureRepeat = repeatTexture
>3321	Identifier	repeatTexture
>3322	Identifier	lastTextureRepeat
>3323	ExpressionStatement	 
>3324	CallExpression	texture -> apply ( repeatTexture )
>3325	ArgumentList	repeatTexture
>3326	Argument	repeatTexture
>3327	Identifier	repeatTexture
>3328	Callee	texture -> apply
>3329	PtrMemberAccess	texture -> apply
>3330	Identifier	apply
>3331	Identifier	texture
>3332	Condition	 
>3333	OrExpression	texture -> textures [ 0 ] != lastTextureApplied || repeatTexture != lastTextureRepeat
>3334	EqualityExpression	repeatTexture != lastTextureRepeat
>3335	Identifier	lastTextureRepeat
>3336	Identifier	repeatTexture
>3337	EqualityExpression	texture -> textures [ 0 ] != lastTextureApplied
>3338	Identifier	lastTextureApplied
>3339	ArrayIndexing	texture -> textures [ 0 ]
>3340	PrimaryExpression	0
>3341	PtrMemberAccess	texture -> textures
>3342	Identifier	textures
>3343	Identifier	texture
>3344	Condition	 
>3345	Identifier	texture
>3346	CompoundStatement	 
>3347	IfStatement	if ( rlayer )
>3348	ElseStatement	else
>3349	ExpressionStatement	 
>3350	CallExpression	glColor4f ( color . x , color . y , color . z , alpha . x * alphaMod )
>3351	ArgumentList	color . x
>3352	Argument	alpha . x * alphaMod
>3353	MultiplicativeExpression	alpha . x * alphaMod
>3354	Identifier	alphaMod
>3355	MemberAccess	alpha . x
>3356	Identifier	x
>3357	Identifier	alpha
>3358	Argument	color . z
>3359	MemberAccess	color . z
>3360	Identifier	z
>3361	Identifier	color
>3362	Argument	color . y
>3363	MemberAccess	color . y
>3364	Identifier	y
>3365	Identifier	color
>3366	Argument	color . x
>3367	MemberAccess	color . x
>3368	Identifier	x
>3369	Identifier	color
>3370	Callee	glColor4f
>3371	Identifier	glColor4f
>3372	ExpressionStatement	 
>3373	CallExpression	glColor4f ( color . x * rlayer -> color . x , color . y * rlayer -> color . y , color . z * rlayer -> color . z , \
>3374	ArgumentList	color . x * rlayer -> color . x
>3375	Argument	alpha . x * alphaMod
>3376	MultiplicativeExpression	alpha . x * alphaMod
>3377	Identifier	alphaMod
>3378	MemberAccess	alpha . x
>3379	Identifier	x
>3380	Identifier	alpha
>3381	Argument	color . z * rlayer -> color . z
>3382	MultiplicativeExpression	color . z * rlayer -> color . z
>3383	MemberAccess	rlayer -> color . z
>3384	Identifier	z
>3385	PtrMemberAccess	rlayer -> color
>3386	Identifier	color
>3387	Identifier	rlayer
>3388	MemberAccess	color . z
>3389	Identifier	z
>3390	Identifier	color
>3391	Argument	color . y * rlayer -> color . y
>3392	MultiplicativeExpression	color . y * rlayer -> color . y
>3393	MemberAccess	rlayer -> color . y
>3394	Identifier	y
>3395	PtrMemberAccess	rlayer -> color
>3396	Identifier	color
>3397	Identifier	rlayer
>3398	MemberAccess	color . y
>3399	Identifier	y
>3400	Identifier	color
>3401	Argument	color . x * rlayer -> color . x
>3402	MultiplicativeExpression	color . x * rlayer -> color . x
>3403	MemberAccess	rlayer -> color . x
>3404	Identifier	x
>3405	PtrMemberAccess	rlayer -> color
>3406	Identifier	color
>3407	Identifier	rlayer
>3408	MemberAccess	color . x
>3409	Identifier	x
>3410	Identifier	color
>3411	Callee	glColor4f
>3412	Identifier	glColor4f
>3413	Condition	 
>3414	Identifier	rlayer
>3415	ForStatement	for ( Children 
>3416	CompoundStatement	 
>3417	IfStatement	if ( ! ( * i ) -> isDead ( ) && ( * i ) -> renderBeforeParent )
>3418	ExpressionStatement	 
>3419	CallExpression	( * i ) -> render ( )
>3420	ArgumentList	 
>3421	Callee	( * i ) -> render
>3422	PtrMemberAccess	( * i ) -> render
>3423	Identifier	render
>3424	UnaryOp	* i
>3425	Identifier	i
>3426	UnaryOperator	*
>3427	Condition	 
>3428	AndExpression	! ( * i ) -> isDead ( ) && ( * i ) -> renderBeforeParent
>3429	PtrMemberAccess	( * i ) -> renderBeforeParent
>3430	Identifier	renderBeforeParent
>3431	UnaryOp	* i
>3432	Identifier	i
>3433	UnaryOperator	*
>3434	UnaryOp	! ( * i ) -> isDead ( )
>3435	CallExpression	( * i ) -> isDead ( )
>3436	ArgumentList	 
>3437	Callee	( * i ) -> isDead
>3438	PtrMemberAccess	( * i ) -> isDead
>3439	Identifier	isDead
>3440	UnaryOp	* i
>3441	Identifier	i
>3442	UnaryOperator	*
>3443	UnaryOperator	!
>3444	IncDecOp	 
>3445	IncDec	++
>3446	Identifier	i
>3447	Condition	 
>3448	EqualityExpression	i != children . end ( )
>3449	CallExpression	children . end ( )
>3450	ArgumentList	 
>3451	Callee	children . end
>3452	MemberAccess	children . end
>3453	Identifier	end
>3454	Identifier	children
>3455	Identifier	i
>3456	ForInit	 
>3457	IdentifierDeclStatement	Children 
>3458	IdentifierDecl	i = children . begin ( )
>3459	AssignmentExpr	i = children . begin ( )
>3460	CallExpression	children . begin ( )
>3461	ArgumentList	 
>3462	Callee	children . begin
>3463	MemberAccess	children . begin
>3464	Identifier	begin
>3465	Identifier	children
>3466	Identifier	i
>3467	Identifier	i
>3468	IdentifierDeclType	Children 
>3469	IfStatement	if ( ! RENDEROBJECT_FASTTRANSFORM )
>3470	CompoundStatement	 
>3471	ExpressionStatement	 
>3472	CallExpression	core -> applyMatrixStackToWorld ( )
>3473	ArgumentList	 
>3474	Callee	core -> applyMatrixStackToWorld
>3475	PtrMemberAccess	core -> applyMatrixStackToWorld
>3476	Identifier	applyMatrixStackToWorld
>3477	Identifier	core
>3478	ExpressionStatement	 
>3479	CallExpression	core -> translateMatrixStack ( internalOffset . x , internalOffset . y , 0 )
>3480	ArgumentList	internalOffset . x
>3481	Argument	0
>3482	PrimaryExpression	0
>3483	Argument	internalOffset . y
>3484	MemberAccess	internalOffset . y
>3485	Identifier	y
>3486	Identifier	internalOffset
>3487	Argument	internalOffset . x
>3488	MemberAccess	internalOffset . x
>3489	Identifier	x
>3490	Identifier	internalOffset
>3491	Callee	core -> translateMatrixStack
>3492	PtrMemberAccess	core -> translateMatrixStack
>3493	Identifier	translateMatrixStack
>3494	Identifier	core
>3495	ExpressionStatement	 
>3496	CallExpression	core -> scaleMatrixStack ( scale . x , scale . y , 1 )
>3497	ArgumentList	scale . x
>3498	Argument	1
>3499	PrimaryExpression	1
>3500	Argument	scale . y
>3501	MemberAccess	scale . y
>3502	Identifier	y
>3503	Identifier	scale
>3504	Argument	scale . x
>3505	MemberAccess	scale . x
>3506	Identifier	x
>3507	Identifier	scale
>3508	Callee	core -> scaleMatrixStack
>3509	PtrMemberAccess	core -> scaleMatrixStack
>3510	Identifier	scaleMatrixStack
>3511	Identifier	core
>3512	ExpressionStatement	 
>3513	CallExpression	core -> translateMatrixStack ( beforeScaleOffset . x , beforeScaleOffset . y , 0 )
>3514	ArgumentList	beforeScaleOffset . x
>3515	Argument	0
>3516	PrimaryExpression	0
>3517	Argument	beforeScaleOffset . y
>3518	MemberAccess	beforeScaleOffset . y
>3519	Identifier	y
>3520	Identifier	beforeScaleOffset
>3521	Argument	beforeScaleOffset . x
>3522	MemberAccess	beforeScaleOffset . x
>3523	Identifier	x
>3524	Identifier	beforeScaleOffset
>3525	Callee	core -> translateMatrixStack
>3526	PtrMemberAccess	core -> translateMatrixStack
>3527	Identifier	translateMatrixStack
>3528	Identifier	core
>3529	ExpressionStatement	 
>3530	CallExpression	glTranslatef ( internalOffset . x , internalOffset . y , internalOffset . z )
>3531	ArgumentList	internalOffset . x
>3532	Argument	internalOffset . z
>3533	MemberAccess	internalOffset . z
>3534	Identifier	z
>3535	Identifier	internalOffset
>3536	Argument	internalOffset . y
>3537	MemberAccess	internalOffset . y
>3538	Identifier	y
>3539	Identifier	internalOffset
>3540	Argument	internalOffset . x
>3541	MemberAccess	internalOffset . x
>3542	Identifier	x
>3543	Identifier	internalOffset
>3544	Callee	glTranslatef
>3545	Identifier	glTranslatef
>3546	ExpressionStatement	 
>3547	CallExpression	glScalef ( scale . x , scale . y , 1 )
>3548	ArgumentList	scale . x
>3549	Argument	1
>3550	PrimaryExpression	1
>3551	Argument	scale . y
>3552	MemberAccess	scale . y
>3553	Identifier	y
>3554	Identifier	scale
>3555	Argument	scale . x
>3556	MemberAccess	scale . x
>3557	Identifier	x
>3558	Identifier	scale
>3559	Callee	glScalef
>3560	Identifier	glScalef
>3561	ExpressionStatement	 
>3562	CallExpression	glTranslatef ( beforeScaleOffset . x , beforeScaleOffset . y , beforeScaleOffset . z )
>3563	ArgumentList	beforeScaleOffset . x
>3564	Argument	beforeScaleOffset . z
>3565	MemberAccess	beforeScaleOffset . z
>3566	Identifier	z
>3567	Identifier	beforeScaleOffset
>3568	Argument	beforeScaleOffset . y
>3569	MemberAccess	beforeScaleOffset . y
>3570	Identifier	y
>3571	Identifier	beforeScaleOffset
>3572	Argument	beforeScaleOffset . x
>3573	MemberAccess	beforeScaleOffset . x
>3574	Identifier	x
>3575	Identifier	beforeScaleOffset
>3576	Callee	glTranslatef
>3577	Identifier	glTranslatef
>3578	IfStatement	if ( followCamera != 0 && ! parent )
>3579	ElseStatement	else
>3580	CompoundStatement	 
>3581	IfStatement	if ( isfh ( ) )
>3582	CompoundStatement	 
>3583	ExpressionStatement	 
>3584	CallExpression	core -> getD3DMatrixStack ( ) -> RotateAxisLocal ( & D3DXVECTOR3 ( 0 , 1 , 0 ) , D3DXToRadian ( 180 ) )
>3585	ArgumentList	& D3DXVECTOR3 ( 0 , 1 , 0 )
>3586	Argument	D3DXToRadian ( 180 )
>3587	CallExpression	D3DXToRadian ( 180 )
>3588	ArgumentList	180
>3589	Argument	180
>3590	PrimaryExpression	180
>3591	Callee	D3DXToRadian
>3592	Identifier	D3DXToRadian
>3593	Argument	& D3DXVECTOR3 ( 0 , 1 , 0 )
>3594	UnaryOp	& D3DXVECTOR3 ( 0 , 1 , 0 )
>3595	CallExpression	D3DXVECTOR3 ( 0 , 1 , 0 )
>3596	ArgumentList	0
>3597	Argument	0
>3598	PrimaryExpression	0
>3599	Argument	1
>3600	PrimaryExpression	1
>3601	Argument	0
>3602	PrimaryExpression	0
>3603	Callee	D3DXVECTOR3
>3604	Identifier	D3DXVECTOR3
>3605	UnaryOperator	&
>3606	Callee	core -> getD3DMatrixStack ( ) -> RotateAxisLocal
>3607	PtrMemberAccess	core -> getD3DMatrixStack ( ) -> RotateAxisLocal
>3608	Identifier	RotateAxisLocal
>3609	CallExpression	core -> getD3DMatrixStack ( )
>3610	ArgumentList	 
>3611	Callee	core -> getD3DMatrixStack
>3612	PtrMemberAccess	core -> getD3DMatrixStack
>3613	Identifier	getD3DMatrixStack
>3614	Identifier	core
>3615	ExpressionStatement	 
>3616	CallExpression	core -> getD3DDevice ( ) -> SetRenderState ( D3DRS_CULLMODE , D3DCULL_NONE )
>3617	ArgumentList	D3DRS_CULLMODE
>3618	Argument	D3DCULL_NONE
>3619	Identifier	D3DCULL_NONE
>3620	Argument	D3DRS_CULLMODE
>3621	Identifier	D3DRS_CULLMODE
>3622	Callee	core -> getD3DDevice ( ) -> SetRenderState
>3623	PtrMemberAccess	core -> getD3DDevice ( ) -> SetRenderState
>3624	Identifier	SetRenderState
>3625	CallExpression	core -> getD3DDevice ( )
>3626	ArgumentList	 
>3627	Callee	core -> getD3DDevice
>3628	PtrMemberAccess	core -> getD3DDevice
>3629	Identifier	getD3DDevice
>3630	Identifier	core
>3631	Condition	 
>3632	CallExpression	isfh ( )
>3633	ArgumentList	 
>3634	Callee	isfh
>3635	Identifier	isfh
>3636	ExpressionStatement	 
>3637	CallExpression	core -> rotateMatrixStack ( rotation . z + rotationOffset . z )
>3638	ArgumentList	rotation . z + rotationOffset . z
>3639	Argument	rotation . z + rotationOffset . z
>3640	AdditiveExpression	rotation . z + rotationOffset . z
>3641	MemberAccess	rotationOffset . z
>3642	Identifier	z
>3643	Identifier	rotationOffset
>3644	MemberAccess	rotation . z
>3645	Identifier	z
>3646	Identifier	rotation
>3647	Callee	core -> rotateMatrixStack
>3648	PtrMemberAccess	core -> rotateMatrixStack
>3649	Identifier	rotateMatrixStack
>3650	Identifier	core
>3651	IfStatement	if ( isfh ( ) )
>3652	CompoundStatement	 
>3653	ExpressionStatement	 
>3654	CallExpression	glRotatef ( 180 , 0 , 1 , 0 )
>3655	ArgumentList	180
>3656	Argument	0
>3657	PrimaryExpression	0
>3658	Argument	1
>3659	PrimaryExpression	1
>3660	Argument	0
>3661	PrimaryExpression	0
>3662	Argument	180
>3663	PrimaryExpression	180
>3664	Callee	glRotatef
>3665	Identifier	glRotatef
>3666	Condition	 
>3667	CallExpression	isfh ( )
>3668	ArgumentList	 
>3669	Callee	isfh
>3670	Identifier	isfh
>3671	ExpressionStatement	 
>3672	CallExpression	glRotatef ( rotation . z + rotationOffset . z , 0 , 0 , 1 )
>3673	ArgumentList	rotation . z + rotationOffset . z
>3674	Argument	1
>3675	PrimaryExpression	1
>3676	Argument	0
>3677	PrimaryExpression	0
>3678	Argument	0
>3679	PrimaryExpression	0
>3680	Argument	rotation . z + rotationOffset . z
>3681	AdditiveExpression	rotation . z + rotationOffset . z
>3682	MemberAccess	rotationOffset . z
>3683	Identifier	z
>3684	Identifier	rotationOffset
>3685	MemberAccess	rotation . z
>3686	Identifier	z
>3687	Identifier	rotation
>3688	Callee	glRotatef
>3689	Identifier	glRotatef
>3690	IfStatement	if ( RenderObject 
>3691	CompoundStatement	 
>3692	ExpressionStatement	 
>3693	CallExpression	glEnd ( )
>3694	ArgumentList	 
>3695	Callee	glEnd
>3696	Identifier	glEnd
>3697	ForStatement	for ( i = 0 ; i < position . data -> path . getNumPathNodes ( ) ; i ++ )
>3698	CompoundStatement	 
>3699	ExpressionStatement	 
>3700	CallExpression	glVertex2f ( position . data -> path . getPathNode ( i ) -> value . x - position . x , position . data -> path . \
>3701	ArgumentList	position . data -> path . getPathNode ( i ) -> value . x - position . x
>3702	Argument	position . data -> path . getPathNode ( i ) -> value . y - position . y
>3703	AdditiveExpression	position . data -> path . getPathNode ( i ) -> value . y - position . y
>3704	MemberAccess	position . y
>3705	Identifier	y
>3706	Identifier	position
>3707	MemberAccess	position . data -> path . getPathNode ( i ) -> value . y
>3708	Identifier	y
>3709	PtrMemberAccess	position . data -> path . getPathNode ( i ) -> value
>3710	Identifier	value
>3711	CallExpression	position . data -> path . getPathNode ( i )
>3712	ArgumentList	i
>3713	Argument	i
>3714	Identifier	i
>3715	Callee	position . data -> path . getPathNode
>3716	MemberAccess	position . data -> path . getPathNode
>3717	Identifier	getPathNode
>3718	PtrMemberAccess	position . data -> path
>3719	Identifier	path
>3720	MemberAccess	position . data
>3721	Identifier	data
>3722	Identifier	position
>3723	Argument	position . data -> path . getPathNode ( i ) -> value . x - position . x
>3724	AdditiveExpression	position . data -> path . getPathNode ( i ) -> value . x - position . x
>3725	MemberAccess	position . x
>3726	Identifier	x
>3727	Identifier	position
>3728	MemberAccess	position . data -> path . getPathNode ( i ) -> value . x
>3729	Identifier	x
>3730	PtrMemberAccess	position . data -> path . getPathNode ( i ) -> value
>3731	Identifier	value
>3732	CallExpression	position . data -> path . getPathNode ( i )
>3733	ArgumentList	i
>3734	Argument	i
>3735	Identifier	i
>3736	Callee	position . data -> path . getPathNode
>3737	MemberAccess	position . data -> path . getPathNode
>3738	Identifier	getPathNode
>3739	PtrMemberAccess	position . data -> path
>3740	Identifier	path
>3741	MemberAccess	position . data
>3742	Identifier	data
>3743	Identifier	position
>3744	Callee	glVertex2f
>3745	Identifier	glVertex2f
>3746	IncDecOp	 
>3747	IncDec	++
>3748	Identifier	i
>3749	Condition	 
>3750	RelationalExpression	i < position . data -> path . getNumPathNodes ( )
>3751	CallExpression	position . data -> path . getNumPathNodes ( )
>3752	ArgumentList	 
>3753	Callee	position . data -> path . getNumPathNodes
>3754	MemberAccess	position . data -> path . getNumPathNodes
>3755	Identifier	getNumPathNodes
>3756	PtrMemberAccess	position . data -> path
>3757	Identifier	path
>3758	MemberAccess	position . data
>3759	Identifier	data
>3760	Identifier	position
>3761	Identifier	i
>3762	ForInit	 
>3763	AssignmentExpr	i = 0
>3764	PrimaryExpression	0
>3765	Identifier	i
>3766	ExpressionStatement	 
>3767	CallExpression	glColor4f ( 0.5 , 0.5 , 1 , 1 )
>3768	ArgumentList	0.5
>3769	Argument	1
>3770	PrimaryExpression	1
>3771	Argument	1
>3772	PrimaryExpression	1
>3773	Argument	0.5
>3774	PrimaryExpression	0.5
>3775	Argument	0.5
>3776	PrimaryExpression	0.5
>3777	Callee	glColor4f
>3778	Identifier	glColor4f
>3779	ExpressionStatement	 
>3780	CallExpression	glBegin ( GL_POINTS )
>3781	ArgumentList	GL_POINTS
>3782	Argument	GL_POINTS
>3783	Identifier	GL_POINTS
>3784	Callee	glBegin
>3785	Identifier	glBegin
>3786	ExpressionStatement	 
>3787	CallExpression	glPointSize ( 20 )
>3788	ArgumentList	20
>3789	Argument	20
>3790	PrimaryExpression	20
>3791	Callee	glPointSize
>3792	Identifier	glPointSize
>3793	ExpressionStatement	 
>3794	CallExpression	glEnd ( )
>3795	ArgumentList	 
>3796	Callee	glEnd
>3797	Identifier	glEnd
>3798	ForStatement	for ( i = 0 ; i < position . data -> path . getNumPathNodes ( ) - 1 ; i ++ )
>3799	CompoundStatement	 
>3800	ExpressionStatement	 
>3801	CallExpression	glVertex2f ( position . data -> path . getPathNode ( i + 1 ) -> value . x - position . x , position . data -> path \
>3802	ArgumentList	position . data -> path . getPathNode ( i + 1 ) -> value . x - position . x
>3803	Argument	position . data -> path . getPathNode ( i + 1 ) -> value . y - position . y
>3804	AdditiveExpression	position . data -> path . getPathNode ( i + 1 ) -> value . y - position . y
>3805	MemberAccess	position . y
>3806	Identifier	y
>3807	Identifier	position
>3808	MemberAccess	position . data -> path . getPathNode ( i + 1 ) -> value . y
>3809	Identifier	y
>3810	PtrMemberAccess	position . data -> path . getPathNode ( i + 1 ) -> value
>3811	Identifier	value
>3812	CallExpression	position . data -> path . getPathNode ( i + 1 )
>3813	ArgumentList	i + 1
>3814	Argument	i + 1
>3815	AdditiveExpression	i + 1
>3816	PrimaryExpression	1
>3817	Identifier	i
>3818	Callee	position . data -> path . getPathNode
>3819	MemberAccess	position . data -> path . getPathNode
>3820	Identifier	getPathNode
>3821	PtrMemberAccess	position . data -> path
>3822	Identifier	path
>3823	MemberAccess	position . data
>3824	Identifier	data
>3825	Identifier	position
>3826	Argument	position . data -> path . getPathNode ( i + 1 ) -> value . x - position . x
>3827	AdditiveExpression	position . data -> path . getPathNode ( i + 1 ) -> value . x - position . x
>3828	MemberAccess	position . x
>3829	Identifier	x
>3830	Identifier	position
>3831	MemberAccess	position . data -> path . getPathNode ( i + 1 ) -> value . x
>3832	Identifier	x
>3833	PtrMemberAccess	position . data -> path . getPathNode ( i + 1 ) -> value
>3834	Identifier	value
>3835	CallExpression	position . data -> path . getPathNode ( i + 1 )
>3836	ArgumentList	i + 1
>3837	Argument	i + 1
>3838	AdditiveExpression	i + 1
>3839	PrimaryExpression	1
>3840	Identifier	i
>3841	Callee	position . data -> path . getPathNode
>3842	MemberAccess	position . data -> path . getPathNode
>3843	Identifier	getPathNode
>3844	PtrMemberAccess	position . data -> path
>3845	Identifier	path
>3846	MemberAccess	position . data
>3847	Identifier	data
>3848	Identifier	position
>3849	Callee	glVertex2f
>3850	Identifier	glVertex2f
>3851	ExpressionStatement	 
>3852	CallExpression	glVertex2f ( position . data -> path . getPathNode ( i ) -> value . x - position . x , position . data -> path . \
>3853	ArgumentList	position . data -> path . getPathNode ( i ) -> value . x - position . x
>3854	Argument	position . data -> path . getPathNode ( i ) -> value . y - position . y
>3855	AdditiveExpression	position . data -> path . getPathNode ( i ) -> value . y - position . y
>3856	MemberAccess	position . y
>3857	Identifier	y
>3858	Identifier	position
>3859	MemberAccess	position . data -> path . getPathNode ( i ) -> value . y
>3860	Identifier	y
>3861	PtrMemberAccess	position . data -> path . getPathNode ( i ) -> value
>3862	Identifier	value
>3863	CallExpression	position . data -> path . getPathNode ( i )
>3864	ArgumentList	i
>3865	Argument	i
>3866	Identifier	i
>3867	Callee	position . data -> path . getPathNode
>3868	MemberAccess	position . data -> path . getPathNode
>3869	Identifier	getPathNode
>3870	PtrMemberAccess	position . data -> path
>3871	Identifier	path
>3872	MemberAccess	position . data
>3873	Identifier	data
>3874	Identifier	position
>3875	Argument	position . data -> path . getPathNode ( i ) -> value . x - position . x
>3876	AdditiveExpression	position . data -> path . getPathNode ( i ) -> value . x - position . x
>3877	MemberAccess	position . x
>3878	Identifier	x
>3879	Identifier	position
>3880	MemberAccess	position . data -> path . getPathNode ( i ) -> value . x
>3881	Identifier	x
>3882	PtrMemberAccess	position . data -> path . getPathNode ( i ) -> value
>3883	Identifier	value
>3884	CallExpression	position . data -> path . getPathNode ( i )
>3885	ArgumentList	i
>3886	Argument	i
>3887	Identifier	i
>3888	Callee	position . data -> path . getPathNode
>3889	MemberAccess	position . data -> path . getPathNode
>3890	Identifier	getPathNode
>3891	PtrMemberAccess	position . data -> path
>3892	Identifier	path
>3893	MemberAccess	position . data
>3894	Identifier	data
>3895	Identifier	position
>3896	Callee	glVertex2f
>3897	Identifier	glVertex2f
>3898	IncDecOp	 
>3899	IncDec	++
>3900	Identifier	i
>3901	Condition	 
>3902	RelationalExpression	i < position . data -> path . getNumPathNodes ( ) - 1
>3903	AdditiveExpression	position . data -> path . getNumPathNodes ( ) - 1
>3904	PrimaryExpression	1
>3905	CallExpression	position . data -> path . getNumPathNodes ( )
>3906	ArgumentList	 
>3907	Callee	position . data -> path . getNumPathNodes
>3908	MemberAccess	position . data -> path . getNumPathNodes
>3909	Identifier	getNumPathNodes
>3910	PtrMemberAccess	position . data -> path
>3911	Identifier	path
>3912	MemberAccess	position . data
>3913	Identifier	data
>3914	Identifier	position
>3915	Identifier	i
>3916	ForInit	 
>3917	AssignmentExpr	i = 0
>3918	PrimaryExpression	0
>3919	Identifier	i
>3920	ExpressionStatement	 
>3921	CallExpression	glBegin ( GL_LINES )
>3922	ArgumentList	GL_LINES
>3923	Argument	GL_LINES
>3924	Identifier	GL_LINES
>3925	Callee	glBegin
>3926	Identifier	glBegin
>3927	ExpressionStatement	 
>3928	CallExpression	glBindTexture ( GL_TEXTURE_2D , 0 )
>3929	ArgumentList	GL_TEXTURE_2D
>3930	Argument	0
>3931	PrimaryExpression	0
>3932	Argument	GL_TEXTURE_2D
>3933	Identifier	GL_TEXTURE_2D
>3934	Callee	glBindTexture
>3935	Identifier	glBindTexture
>3936	ExpressionStatement	 
>3937	CallExpression	glColor4f ( 1.0f , 1.0f , 1.0f , 0.5f )
>3938	ArgumentList	1.0f
>3939	Argument	0.5f
>3940	PrimaryExpression	0.5f
>3941	Argument	1.0f
>3942	PrimaryExpression	1.0f
>3943	Argument	1.0f
>3944	PrimaryExpression	1.0f
>3945	Argument	1.0f
>3946	PrimaryExpression	1.0f
>3947	Callee	glColor4f
>3948	Identifier	glColor4f
>3949	IdentifierDeclStatement	 
>3950	IdentifierDecl	i = 0
>3951	AssignmentExpr	i = 0
>3952	PrimaryExpression	0
>3953	Identifier	i
>3954	Identifier	i
>3955	IdentifierDeclType	int
>3956	ExpressionStatement	 
>3957	CallExpression	glEnable ( GL_BLEND )
>3958	ArgumentList	GL_BLEND
>3959	Argument	GL_BLEND
>3960	Identifier	GL_BLEND
>3961	Callee	glEnable
>3962	Identifier	glEnable
>3963	ExpressionStatement	 
>3964	CallExpression	glLineWidth ( 4 )
>3965	ArgumentList	4
>3966	Argument	4
>3967	PrimaryExpression	4
>3968	Callee	glLineWidth
>3969	Identifier	glLineWidth
>3970	Condition	 
>3971	AndExpression	RenderObject 
>3972	AndExpression	position . data && position . data -> path . getNumPathNodes ( ) > 0
>3973	RelationalExpression	position . data -> path . getNumPathNodes ( ) > 0
>3974	PrimaryExpression	0
>3975	CallExpression	position . data -> path . getNumPathNodes ( )
>3976	ArgumentList	 
>3977	Callee	position . data -> path . getNumPathNodes
>3978	MemberAccess	position . data -> path . getNumPathNodes
>3979	Identifier	getNumPathNodes
>3980	PtrMemberAccess	position . data -> path
>3981	Identifier	path
>3982	MemberAccess	position . data
>3983	Identifier	data
>3984	Identifier	position
>3985	MemberAccess	position . data
>3986	Identifier	data
>3987	Identifier	position
>3988	Identifier	RenderObject 
>3989	ExpressionStatement	 
>3990	CallExpression	core -> translateMatrixStack ( position . x , position . y , 0 )
>3991	ArgumentList	position . x
>3992	Argument	0
>3993	PrimaryExpression	0
>3994	Argument	position . y
>3995	MemberAccess	position . y
>3996	Identifier	y
>3997	Identifier	position
>3998	Argument	position . x
>3999	MemberAccess	position . x
>4000	Identifier	x
>4001	Identifier	position
>4002	Callee	core -> translateMatrixStack
>4003	PtrMemberAccess	core -> translateMatrixStack
>4004	Identifier	translateMatrixStack
>4005	Identifier	core
>4006	ExpressionStatement	 
>4007	CallExpression	glTranslatef ( position . x , position . y , position . z )
>4008	ArgumentList	position . x
>4009	Argument	position . z
>4010	MemberAccess	position . z
>4011	Identifier	z
>4012	Identifier	position
>4013	Argument	position . y
>4014	MemberAccess	position . y
>4015	Identifier	y
>4016	Identifier	position
>4017	Argument	position . x
>4018	MemberAccess	position . x
>4019	Identifier	x
>4020	Identifier	position
>4021	Callee	glTranslatef
>4022	Identifier	glTranslatef
>4023	CompoundStatement	 
>4024	IfStatement	if ( followCamera == 1 )
>4025	ElseStatement	else
>4026	CompoundStatement	 
>4027	ExpressionStatement	 
>4028	CallExpression	core -> rotateMatrixStack ( rotation . z + rotationOffset . z )
>4029	ArgumentList	rotation . z + rotationOffset . z
>4030	Argument	rotation . z + rotationOffset . z
>4031	AdditiveExpression	rotation . z + rotationOffset . z
>4032	MemberAccess	rotationOffset . z
>4033	Identifier	z
>4034	Identifier	rotationOffset
>4035	MemberAccess	rotation . z
>4036	Identifier	z
>4037	Identifier	rotation
>4038	Callee	core -> rotateMatrixStack
>4039	PtrMemberAccess	core -> rotateMatrixStack
>4040	Identifier	rotateMatrixStack
>4041	Identifier	core
>4042	IfStatement	if ( isfh ( ) )
>4043	CompoundStatement	 
>4044	ExpressionStatement	 
>4045	CallExpression	core -> getD3DMatrixStack ( ) -> RotateAxisLocal ( & D3DXVECTOR3 ( 0 , 1 , 0 ) , D3DXToRadian ( 180 ) )
>4046	ArgumentList	& D3DXVECTOR3 ( 0 , 1 , 0 )
>4047	Argument	D3DXToRadian ( 180 )
>4048	CallExpression	D3DXToRadian ( 180 )
>4049	ArgumentList	180
>4050	Argument	180
>4051	PrimaryExpression	180
>4052	Callee	D3DXToRadian
>4053	Identifier	D3DXToRadian
>4054	Argument	& D3DXVECTOR3 ( 0 , 1 , 0 )
>4055	UnaryOp	& D3DXVECTOR3 ( 0 , 1 , 0 )
>4056	CallExpression	D3DXVECTOR3 ( 0 , 1 , 0 )
>4057	ArgumentList	0
>4058	Argument	0
>4059	PrimaryExpression	0
>4060	Argument	1
>4061	PrimaryExpression	1
>4062	Argument	0
>4063	PrimaryExpression	0
>4064	Callee	D3DXVECTOR3
>4065	Identifier	D3DXVECTOR3
>4066	UnaryOperator	&
>4067	Callee	core -> getD3DMatrixStack ( ) -> RotateAxisLocal
>4068	PtrMemberAccess	core -> getD3DMatrixStack ( ) -> RotateAxisLocal
>4069	Identifier	RotateAxisLocal
>4070	CallExpression	core -> getD3DMatrixStack ( )
>4071	ArgumentList	 
>4072	Callee	core -> getD3DMatrixStack
>4073	PtrMemberAccess	core -> getD3DMatrixStack
>4074	Identifier	getD3DMatrixStack
>4075	Identifier	core
>4076	Condition	 
>4077	CallExpression	isfh ( )
>4078	ArgumentList	 
>4079	Callee	isfh
>4080	Identifier	isfh
>4081	ExpressionStatement	 
>4082	CallExpression	core -> translateMatrixStack ( pos . x , pos . y , 0 )
>4083	ArgumentList	pos . x
>4084	Argument	0
>4085	PrimaryExpression	0
>4086	Argument	pos . y
>4087	MemberAccess	pos . y
>4088	Identifier	y
>4089	Identifier	pos
>4090	Argument	pos . x
>4091	MemberAccess	pos . x
>4092	Identifier	x
>4093	Identifier	pos
>4094	Callee	core -> translateMatrixStack
>4095	PtrMemberAccess	core -> translateMatrixStack
>4096	Identifier	translateMatrixStack
>4097	Identifier	core
>4098	ExpressionStatement	 
>4099	CallExpression	glRotatef ( rotation . z + rotationOffset . z , 0 , 0 , 1 )
>4100	ArgumentList	rotation . z + rotationOffset . z
>4101	Argument	1
>4102	PrimaryExpression	1
>4103	Argument	0
>4104	PrimaryExpression	0
>4105	Argument	0
>4106	PrimaryExpression	0
>4107	Argument	rotation . z + rotationOffset . z
>4108	AdditiveExpression	rotation . z + rotationOffset . z
>4109	MemberAccess	rotationOffset . z
>4110	Identifier	z
>4111	Identifier	rotationOffset
>4112	MemberAccess	rotation . z
>4113	Identifier	z
>4114	Identifier	rotation
>4115	Callee	glRotatef
>4116	Identifier	glRotatef
>4117	IfStatement	if ( isfh ( ) )
>4118	CompoundStatement	 
>4119	ExpressionStatement	 
>4120	CallExpression	glRotatef ( 180 , 0 , 1 , 0 )
>4121	ArgumentList	180
>4122	Argument	0
>4123	PrimaryExpression	0
>4124	Argument	1
>4125	PrimaryExpression	1
>4126	Argument	0
>4127	PrimaryExpression	0
>4128	Argument	180
>4129	PrimaryExpression	180
>4130	Callee	glRotatef
>4131	Identifier	glRotatef
>4132	Condition	 
>4133	CallExpression	isfh ( )
>4134	ArgumentList	 
>4135	Callee	isfh
>4136	Identifier	isfh
>4137	ExpressionStatement	 
>4138	CallExpression	glTranslatef ( pos . x , pos . y , pos . z )
>4139	ArgumentList	pos . x
>4140	Argument	pos . z
>4141	MemberAccess	pos . z
>4142	Identifier	z
>4143	Identifier	pos
>4144	Argument	pos . y
>4145	MemberAccess	pos . y
>4146	Identifier	y
>4147	Identifier	pos
>4148	Argument	pos . x
>4149	MemberAccess	pos . x
>4150	Identifier	x
>4151	Identifier	pos
>4152	Callee	glTranslatef
>4153	Identifier	glTranslatef
>4154	IdentifierDeclStatement	 
>4155	IdentifierDecl	pos = getFollowCameraPosition ( )
>4156	AssignmentExpr	pos = getFollowCameraPosition ( )
>4157	CallExpression	getFollowCameraPosition ( )
>4158	ArgumentList	 
>4159	Callee	getFollowCameraPosition
>4160	Identifier	getFollowCameraPosition
>4161	Identifier	pos
>4162	Identifier	pos
>4163	IdentifierDeclType	Vector
>4164	CompoundStatement	 
>4165	ExpressionStatement	 
>4166	CallExpression	core -> rotateMatrixStack ( rotation . z + rotationOffset . z )
>4167	ArgumentList	rotation . z + rotationOffset . z
>4168	Argument	rotation . z + rotationOffset . z
>4169	AdditiveExpression	rotation . z + rotationOffset . z
>4170	MemberAccess	rotationOffset . z
>4171	Identifier	z
>4172	Identifier	rotationOffset
>4173	MemberAccess	rotation . z
>4174	Identifier	z
>4175	Identifier	rotation
>4176	Callee	core -> rotateMatrixStack
>4177	PtrMemberAccess	core -> rotateMatrixStack
>4178	Identifier	rotateMatrixStack
>4179	Identifier	core
>4180	IfStatement	if ( isfh ( ) )
>4181	CompoundStatement	 
>4182	ExpressionStatement	 
>4183	CallExpression	core -> getD3DMatrixStack ( ) -> RotateAxisLocal ( & D3DXVECTOR3 ( 0 , 1 , 0 ) , D3DXToRadian ( 180 ) )
>4184	ArgumentList	& D3DXVECTOR3 ( 0 , 1 , 0 )
>4185	Argument	D3DXToRadian ( 180 )
>4186	CallExpression	D3DXToRadian ( 180 )
>4187	ArgumentList	180
>4188	Argument	180
>4189	PrimaryExpression	180
>4190	Callee	D3DXToRadian
>4191	Identifier	D3DXToRadian
>4192	Argument	& D3DXVECTOR3 ( 0 , 1 , 0 )
>4193	UnaryOp	& D3DXVECTOR3 ( 0 , 1 , 0 )
>4194	CallExpression	D3DXVECTOR3 ( 0 , 1 , 0 )
>4195	ArgumentList	0
>4196	Argument	0
>4197	PrimaryExpression	0
>4198	Argument	1
>4199	PrimaryExpression	1
>4200	Argument	0
>4201	PrimaryExpression	0
>4202	Callee	D3DXVECTOR3
>4203	Identifier	D3DXVECTOR3
>4204	UnaryOperator	&
>4205	Callee	core -> getD3DMatrixStack ( ) -> RotateAxisLocal
>4206	PtrMemberAccess	core -> getD3DMatrixStack ( ) -> RotateAxisLocal
>4207	Identifier	RotateAxisLocal
>4208	CallExpression	core -> getD3DMatrixStack ( )
>4209	ArgumentList	 
>4210	Callee	core -> getD3DMatrixStack
>4211	PtrMemberAccess	core -> getD3DMatrixStack
>4212	Identifier	getD3DMatrixStack
>4213	Identifier	core
>4214	Condition	 
>4215	CallExpression	isfh ( )
>4216	ArgumentList	 
>4217	Callee	isfh
>4218	Identifier	isfh
>4219	ExpressionStatement	 
>4220	CallExpression	core -> translateMatrixStack ( position . x , position . y , 0 )
>4221	ArgumentList	position . x
>4222	Argument	0
>4223	PrimaryExpression	0
>4224	Argument	position . y
>4225	MemberAccess	position . y
>4226	Identifier	y
>4227	Identifier	position
>4228	Argument	position . x
>4229	MemberAccess	position . x
>4230	Identifier	x
>4231	Identifier	position
>4232	Callee	core -> translateMatrixStack
>4233	PtrMemberAccess	core -> translateMatrixStack
>4234	Identifier	translateMatrixStack
>4235	Identifier	core
>4236	ExpressionStatement	 
>4237	CallExpression	core -> scaleMatrixStack ( core -> globalResolutionScale . x , core -> globalResolutionScale . y , 0 )
>4238	ArgumentList	core -> globalResolutionScale . x
>4239	Argument	0
>4240	PrimaryExpression	0
>4241	Argument	core -> globalResolutionScale . y
>4242	MemberAccess	core -> globalResolutionScale . y
>4243	Identifier	y
>4244	PtrMemberAccess	core -> globalResolutionScale
>4245	Identifier	globalResolutionScale
>4246	Identifier	core
>4247	Argument	core -> globalResolutionScale . x
>4248	MemberAccess	core -> globalResolutionScale . x
>4249	Identifier	x
>4250	PtrMemberAccess	core -> globalResolutionScale
>4251	Identifier	globalResolutionScale
>4252	Identifier	core
>4253	Callee	core -> scaleMatrixStack
>4254	PtrMemberAccess	core -> scaleMatrixStack
>4255	Identifier	scaleMatrixStack
>4256	Identifier	core
>4257	ExpressionStatement	 
>4258	CallExpression	core -> getD3DMatrixStack ( ) -> LoadIdentity ( )
>4259	ArgumentList	 
>4260	Callee	core -> getD3DMatrixStack ( ) -> LoadIdentity
>4261	PtrMemberAccess	core -> getD3DMatrixStack ( ) -> LoadIdentity
>4262	Identifier	LoadIdentity
>4263	CallExpression	core -> getD3DMatrixStack ( )
>4264	ArgumentList	 
>4265	Callee	core -> getD3DMatrixStack
>4266	PtrMemberAccess	core -> getD3DMatrixStack
>4267	Identifier	getD3DMatrixStack
>4268	Identifier	core
>4269	ExpressionStatement	 
>4270	CallExpression	glRotatef ( rotation . z + rotationOffset . z , 0 , 0 , 1 )
>4271	ArgumentList	rotation . z + rotationOffset . z
>4272	Argument	1
>4273	PrimaryExpression	1
>4274	Argument	0
>4275	PrimaryExpression	0
>4276	Argument	0
>4277	PrimaryExpression	0
>4278	Argument	rotation . z + rotationOffset . z
>4279	AdditiveExpression	rotation . z + rotationOffset . z
>4280	MemberAccess	rotationOffset . z
>4281	Identifier	z
>4282	Identifier	rotationOffset
>4283	MemberAccess	rotation . z
>4284	Identifier	z
>4285	Identifier	rotation
>4286	Callee	glRotatef
>4287	Identifier	glRotatef
>4288	IfStatement	if ( isfh ( ) )
>4289	CompoundStatement	 
>4290	ExpressionStatement	 
>4291	CallExpression	glRotatef ( 180 , 0 , 1 , 0 )
>4292	ArgumentList	180
>4293	Argument	0
>4294	PrimaryExpression	0
>4295	Argument	1
>4296	PrimaryExpression	1
>4297	Argument	0
>4298	PrimaryExpression	0
>4299	Argument	180
>4300	PrimaryExpression	180
>4301	Callee	glRotatef
>4302	Identifier	glRotatef
>4303	Condition	 
>4304	CallExpression	isfh ( )
>4305	ArgumentList	 
>4306	Callee	isfh
>4307	Identifier	isfh
>4308	ExpressionStatement	 
>4309	CallExpression	glTranslatef ( position . x , position . y , position . z )
>4310	ArgumentList	position . x
>4311	Argument	position . z
>4312	MemberAccess	position . z
>4313	Identifier	z
>4314	Identifier	position
>4315	Argument	position . y
>4316	MemberAccess	position . y
>4317	Identifier	y
>4318	Identifier	position
>4319	Argument	position . x
>4320	MemberAccess	position . x
>4321	Identifier	x
>4322	Identifier	position
>4323	Callee	glTranslatef
>4324	Identifier	glTranslatef
>4325	ExpressionStatement	 
>4326	CallExpression	glScalef ( core -> globalResolutionScale . x , core -> globalResolutionScale . y , 0 )
>4327	ArgumentList	core -> globalResolutionScale . x
>4328	Argument	0
>4329	PrimaryExpression	0
>4330	Argument	core -> globalResolutionScale . y
>4331	MemberAccess	core -> globalResolutionScale . y
>4332	Identifier	y
>4333	PtrMemberAccess	core -> globalResolutionScale
>4334	Identifier	globalResolutionScale
>4335	Identifier	core
>4336	Argument	core -> globalResolutionScale . x
>4337	MemberAccess	core -> globalResolutionScale . x
>4338	Identifier	x
>4339	PtrMemberAccess	core -> globalResolutionScale
>4340	Identifier	globalResolutionScale
>4341	Identifier	core
>4342	Callee	glScalef
>4343	Identifier	glScalef
>4344	ExpressionStatement	 
>4345	CallExpression	glLoadIdentity ( )
>4346	ArgumentList	 
>4347	Callee	glLoadIdentity
>4348	Identifier	glLoadIdentity
>4349	Condition	 
>4350	EqualityExpression	followCamera == 1
>4351	PrimaryExpression	1
>4352	Identifier	followCamera
>4353	Condition	 
>4354	AndExpression	followCamera != 0 && ! parent
>4355	UnaryOp	! parent
>4356	Identifier	parent
>4357	UnaryOperator	!
>4358	EqualityExpression	followCamera != 0
>4359	PrimaryExpression	0
>4360	Identifier	followCamera
>4361	IfStatement	if ( layer != LR_NONE )
>4362	CompoundStatement	 
>4363	IfStatement	if ( l -> followCamera != NO_FOLLOW_CAMERA )
>4364	CompoundStatement	 
>4365	ExpressionStatement	 
>4366	AssignmentExpr	followCamera = l -> followCamera
>4367	PtrMemberAccess	l -> followCamera
>4368	Identifier	followCamera
>4369	Identifier	l
>4370	Identifier	followCamera
>4371	Condition	 
>4372	EqualityExpression	l -> followCamera != NO_FOLLOW_CAMERA
>4373	Identifier	NO_FOLLOW_CAMERA
>4374	PtrMemberAccess	l -> followCamera
>4375	Identifier	followCamera
>4376	Identifier	l
>4377	IdentifierDeclStatement	 
>4378	IdentifierDecl	* l = & core -> renderObjectLayers [ layer ]
>4379	AssignmentExpr	* l = & core -> renderObjectLayers [ layer ]
>4380	UnaryOp	& core -> renderObjectLayers [ layer ]
>4381	ArrayIndexing	core -> renderObjectLayers [ layer ]
>4382	Identifier	layer
>4383	PtrMemberAccess	core -> renderObjectLayers
>4384	Identifier	renderObjectLayers
>4385	Identifier	core
>4386	UnaryOperator	&
>4387	Identifier	l
>4388	Identifier	l
>4389	IdentifierDeclType	RenderObjectLayer *
>4390	Condition	 
>4391	EqualityExpression	layer != LR_NONE
>4392	Identifier	LR_NONE
>4393	Identifier	layer
>4394	Condition	 
>4395	UnaryOp	! RENDEROBJECT_FASTTRANSFORM
>4396	Identifier	RENDEROBJECT_FASTTRANSFORM
>4397	UnaryOperator	!
>4398	IfStatement	if ( ! RENDEROBJECT_SHAREATTRIBUTES )
>4399	CompoundStatement	 
>4400	ExpressionStatement	 
>4401	CallExpression	glPushAttrib ( GL_ALL_ATTRIB_BITS )
>4402	ArgumentList	GL_ALL_ATTRIB_BITS
>4403	Argument	GL_ALL_ATTRIB_BITS
>4404	Identifier	GL_ALL_ATTRIB_BITS
>4405	Callee	glPushAttrib
>4406	Identifier	glPushAttrib
>4407	Condition	 
>4408	UnaryOp	! RENDEROBJECT_SHAREATTRIBUTES
>4409	Identifier	RENDEROBJECT_SHAREATTRIBUTES
>4410	UnaryOperator	!
>4411	IfStatement	if ( ! RENDEROBJECT_FASTTRANSFORM )
>4412	ExpressionStatement	 
>4413	CallExpression	glPushMatrix ( )
>4414	ArgumentList	 
>4415	Callee	glPushMatrix
>4416	Identifier	glPushMatrix
>4417	Condition	 
>4418	UnaryOp	! RENDEROBJECT_FASTTRANSFORM
>4419	Identifier	RENDEROBJECT_FASTTRANSFORM
>4420	UnaryOperator	!
>4421	IfStatement	if ( ! RENDEROBJECT_FASTTRANSFORM )
>4422	ExpressionStatement	 
>4423	CallExpression	core -> getD3DMatrixStack ( ) -> Push ( )
>4424	ArgumentList	 
>4425	Callee	core -> getD3DMatrixStack ( ) -> Push
>4426	PtrMemberAccess	core -> getD3DMatrixStack ( ) -> Push
>4427	Identifier	Push
>4428	CallExpression	core -> getD3DMatrixStack ( )
>4429	ArgumentList	 
>4430	Callee	core -> getD3DMatrixStack
>4431	PtrMemberAccess	core -> getD3DMatrixStack
>4432	Identifier	getD3DMatrixStack
>4433	Identifier	core
>4434	Condition	 
>4435	UnaryOp	! RENDEROBJECT_FASTTRANSFORM
>4436	Identifier	RENDEROBJECT_FASTTRANSFORM
>4437	UnaryOperator	!
>4438	ExpressionStatement	 
>4439	AssignmentExpr	position += offset
>4440	Identifier	offset
>4441	Identifier	position
>4442	IfStatement	if ( positionSnapTo )
>4443	ExpressionStatement	 
>4444	AssignmentExpr	this -> position = * positionSnapTo
>4445	UnaryOp	* positionSnapTo
>4446	Identifier	positionSnapTo
>4447	UnaryOperator	*
>4448	PtrMemberAccess	this -> position
>4449	Identifier	position
>4450	Identifier	this
>4451	Condition	 
>4452	Identifier	positionSnapTo
>4575	FunctionDef	RenderObject 
>4576	ParameterList	 
>4577	ReturnType	void
>4578	CompoundStatement	 
>4579	IfStatement	if ( ! collisionMask . empty ( ) )
>4580	ElseStatement	else
>4581	IfStatement	if ( collideRadius > 0 )
>4582	CompoundStatement	 
>4583	ExpressionStatement	 
>4584	CallExpression	glPopMatrix ( )
>4585	ArgumentList	 
>4586	Callee	glPopMatrix
>4587	Identifier	glPopMatrix
>4588	ExpressionStatement	 
>4589	CallExpression	glTranslatef ( offset . x , offset . y , 0 )
>4590	ArgumentList	offset . x
>4591	Argument	0
>4592	PrimaryExpression	0
>4593	Argument	offset . y
>4594	MemberAccess	offset . y
>4595	Identifier	y
>4596	Identifier	offset
>4597	Argument	offset . x
>4598	MemberAccess	offset . x
>4599	Identifier	x
>4600	Identifier	offset
>4601	Callee	glTranslatef
>4602	Identifier	glTranslatef
>4603	ExpressionStatement	 
>4604	CallExpression	glDisable ( GL_BLEND )
>4605	ArgumentList	GL_BLEND
>4606	Argument	GL_BLEND
>4607	Identifier	GL_BLEND
>4608	Callee	glDisable
>4609	Identifier	glDisable
>4610	ExpressionStatement	 
>4611	CallExpression	drawCircle ( collideRadius , 8 )
>4612	ArgumentList	collideRadius
>4613	Argument	8
>4614	PrimaryExpression	8
>4615	Argument	collideRadius
>4616	Identifier	collideRadius
>4617	Callee	drawCircle
>4618	Identifier	drawCircle
>4619	ExpressionStatement	 
>4620	CallExpression	glColor4f ( 1 , 0 , 0 , 0.5 )
>4621	ArgumentList	1
>4622	Argument	0.5
>4623	PrimaryExpression	0.5
>4624	Argument	0
>4625	PrimaryExpression	0
>4626	Argument	0
>4627	PrimaryExpression	0
>4628	Argument	1
>4629	PrimaryExpression	1
>4630	Callee	glColor4f
>4631	Identifier	glColor4f
>4632	ExpressionStatement	 
>4633	CallExpression	glBlendFunc ( GL_SRC_ALPHA , GL_ONE_MINUS_SRC_ALPHA )
>4634	ArgumentList	GL_SRC_ALPHA
>4635	Argument	GL_ONE_MINUS_SRC_ALPHA
>4636	Identifier	GL_ONE_MINUS_SRC_ALPHA
>4637	Argument	GL_SRC_ALPHA
>4638	Identifier	GL_SRC_ALPHA
>4639	Callee	glBlendFunc
>4640	Identifier	glBlendFunc
>4641	ExpressionStatement	 
>4642	CallExpression	glEnable ( GL_BLEND )
>4643	ArgumentList	GL_BLEND
>4644	Argument	GL_BLEND
>4645	Identifier	GL_BLEND
>4646	Callee	glEnable
>4647	Identifier	glEnable
>4648	ExpressionStatement	 
>4649	CallExpression	glTranslatef ( internalOffset . x , internalOffset . y , 0 )
>4650	ArgumentList	internalOffset . x
>4651	Argument	0
>4652	PrimaryExpression	0
>4653	Argument	internalOffset . y
>4654	MemberAccess	internalOffset . y
>4655	Identifier	y
>4656	Identifier	internalOffset
>4657	Argument	internalOffset . x
>4658	MemberAccess	internalOffset . x
>4659	Identifier	x
>4660	Identifier	internalOffset
>4661	Callee	glTranslatef
>4662	Identifier	glTranslatef
>4663	ExpressionStatement	 
>4664	CallExpression	glTranslatef ( position . x + offset . x , position . y + offset . y , 0 )
>4665	ArgumentList	position . x + offset . x
>4666	Argument	0
>4667	PrimaryExpression	0
>4668	Argument	position . y + offset . y
>4669	AdditiveExpression	position . y + offset . y
>4670	MemberAccess	offset . y
>4671	Identifier	y
>4672	Identifier	offset
>4673	MemberAccess	position . y
>4674	Identifier	y
>4675	Identifier	position
>4676	Argument	position . x + offset . x
>4677	AdditiveExpression	position . x + offset . x
>4678	MemberAccess	offset . x
>4679	Identifier	x
>4680	Identifier	offset
>4681	MemberAccess	position . x
>4682	Identifier	x
>4683	Identifier	position
>4684	Callee	glTranslatef
>4685	Identifier	glTranslatef
>4686	ExpressionStatement	 
>4687	CallExpression	glBindTexture ( GL_TEXTURE_2D , 0 )
>4688	ArgumentList	GL_TEXTURE_2D
>4689	Argument	0
>4690	PrimaryExpression	0
>4691	Argument	GL_TEXTURE_2D
>4692	Identifier	GL_TEXTURE_2D
>4693	Callee	glBindTexture
>4694	Identifier	glBindTexture
>4695	ExpressionStatement	 
>4696	CallExpression	core -> setupRenderPositionAndScale ( )
>4697	ArgumentList	 
>4698	Callee	core -> setupRenderPositionAndScale
>4699	PtrMemberAccess	core -> setupRenderPositionAndScale
>4700	Identifier	setupRenderPositionAndScale
>4701	Identifier	core
>4702	ExpressionStatement	 
>4703	CallExpression	glLoadIdentity ( )
>4704	ArgumentList	 
>4705	Callee	glLoadIdentity
>4706	Identifier	glLoadIdentity
>4707	ExpressionStatement	 
>4708	CallExpression	glPushMatrix ( )
>4709	ArgumentList	 
>4710	Callee	glPushMatrix
>4711	Identifier	glPushMatrix
>4712	Condition	 
>4713	RelationalExpression	collideRadius > 0
>4714	PrimaryExpression	0
>4715	Identifier	collideRadius
>4716	CompoundStatement	 
>4717	ExpressionStatement	 
>4718	CallExpression	glPopAttrib ( )
>4719	ArgumentList	 
>4720	Callee	glPopAttrib
>4721	Identifier	glPopAttrib
>4722	ExpressionStatement	 
>4723	CallExpression	glPopMatrix ( )
>4724	ArgumentList	 
>4725	Callee	glPopMatrix
>4726	Identifier	glPopMatrix
>4727	ExpressionStatement	 
>4728	CallExpression	glDisable ( GL_BLEND )
>4729	ArgumentList	GL_BLEND
>4730	Argument	GL_BLEND
>4731	Identifier	GL_BLEND
>4732	Callee	glDisable
>4733	Identifier	glDisable
>4734	ForStatement	for ( int i = 0 ; i < transformedCollisionMask . size ( ) ; i ++ )
>4735	CompoundStatement	 
>4736	ExpressionStatement	 
>4737	CallExpression	glTranslatef ( - collide . x , - collide . y , 0 )
>4738	ArgumentList	- collide . x
>4739	Argument	0
>4740	PrimaryExpression	0
>4741	Argument	- collide . y
>4742	UnaryOp	- collide . y
>4743	MemberAccess	collide . y
>4744	Identifier	y
>4745	Identifier	collide
>4746	UnaryOperator	-
>4747	Argument	- collide . x
>4748	UnaryOp	- collide . x
>4749	MemberAccess	collide . x
>4750	Identifier	x
>4751	Identifier	collide
>4752	UnaryOperator	-
>4753	Callee	glTranslatef
>4754	Identifier	glTranslatef
>4755	IfStatement	if ( parent )
>4756	ExpressionStatement	 
>4757	CallExpression	drawCircle ( collideRadius * parent -> scale . x , 45 )
>4758	ArgumentList	collideRadius * parent -> scale . x
>4759	Argument	45
>4760	PrimaryExpression	45
>4761	Argument	collideRadius * parent -> scale . x
>4762	MultiplicativeExpression	collideRadius * parent -> scale . x
>4763	MemberAccess	parent -> scale . x
>4764	Identifier	x
>4765	PtrMemberAccess	parent -> scale
>4766	Identifier	scale
>4767	Identifier	parent
>4768	Identifier	collideRadius
>4769	Callee	drawCircle
>4770	Identifier	drawCircle
>4771	Condition	 
>4772	Identifier	parent
>4773	IdentifierDeclStatement	 
>4774	IdentifierDecl	* parent = this -> getTopParent ( )
>4775	AssignmentExpr	* parent = this -> getTopParent ( )
>4776	CallExpression	this -> getTopParent ( )
>4777	ArgumentList	 
>4778	Callee	this -> getTopParent
>4779	PtrMemberAccess	this -> getTopParent
>4780	Identifier	getTopParent
>4781	Identifier	this
>4782	Identifier	parent
>4783	Identifier	parent
>4784	IdentifierDeclType	RenderObject *
>4785	ExpressionStatement	 
>4786	CallExpression	glTranslatef ( collide . x , collide . y , 0 )
>4787	ArgumentList	collide . x
>4788	Argument	0
>4789	PrimaryExpression	0
>4790	Argument	collide . y
>4791	MemberAccess	collide . y
>4792	Identifier	y
>4793	Identifier	collide
>4794	Argument	collide . x
>4795	MemberAccess	collide . x
>4796	Identifier	x
>4797	Identifier	collide
>4798	Callee	glTranslatef
>4799	Identifier	glTranslatef
>4800	IdentifierDeclStatement	 
>4801	IdentifierDecl	collide = this -> transformedCollisionMask [ i ]
>4802	AssignmentExpr	collide = this -> transformedCollisionMask [ i ]
>4803	ArrayIndexing	this -> transformedCollisionMask [ i ]
>4804	Identifier	i
>4805	PtrMemberAccess	this -> transformedCollisionMask
>4806	Identifier	transformedCollisionMask
>4807	Identifier	this
>4808	Identifier	collide
>4809	Identifier	collide
>4810	IdentifierDeclType	Vector
>4811	IncDecOp	 
>4812	IncDec	++
>4813	Identifier	i
>4814	Condition	 
>4815	RelationalExpression	i < transformedCollisionMask . size ( )
>4816	CallExpression	transformedCollisionMask . size ( )
>4817	ArgumentList	 
>4818	Callee	transformedCollisionMask . size
>4819	MemberAccess	transformedCollisionMask . size
>4820	Identifier	size
>4821	Identifier	transformedCollisionMask
>4822	Identifier	i
>4823	ForInit	 
>4824	IdentifierDeclStatement	int i = 0 ;
>4825	IdentifierDecl	i = 0
>4826	AssignmentExpr	i = 0
>4827	PrimaryExpression	0
>4828	Identifier	i
>4829	Identifier	i
>4830	IdentifierDeclType	int
>4831	ExpressionStatement	 
>4832	CallExpression	glColor4f ( 1 , 1 , 0 , 0.5 )
>4833	ArgumentList	1
>4834	Argument	0.5
>4835	PrimaryExpression	0.5
>4836	Argument	0
>4837	PrimaryExpression	0
>4838	Argument	1
>4839	PrimaryExpression	1
>4840	Argument	1
>4841	PrimaryExpression	1
>4842	Callee	glColor4f
>4843	Identifier	glColor4f
>4844	ExpressionStatement	 
>4845	CallExpression	glBlendFunc ( GL_SRC_ALPHA , GL_ONE_MINUS_SRC_ALPHA )
>4846	ArgumentList	GL_SRC_ALPHA
>4847	Argument	GL_ONE_MINUS_SRC_ALPHA
>4848	Identifier	GL_ONE_MINUS_SRC_ALPHA
>4849	Argument	GL_SRC_ALPHA
>4850	Identifier	GL_SRC_ALPHA
>4851	Callee	glBlendFunc
>4852	Identifier	glBlendFunc
>4853	ExpressionStatement	 
>4854	CallExpression	glEnable ( GL_BLEND )
>4855	ArgumentList	GL_BLEND
>4856	Argument	GL_BLEND
>4857	Identifier	GL_BLEND
>4858	Callee	glEnable
>4859	Identifier	glEnable
>4860	ExpressionStatement	 
>4861	CallExpression	core -> setupRenderPositionAndScale ( )
>4862	ArgumentList	 
>4863	Callee	core -> setupRenderPositionAndScale
>4864	PtrMemberAccess	core -> setupRenderPositionAndScale
>4865	Identifier	setupRenderPositionAndScale
>4866	Identifier	core
>4867	ExpressionStatement	 
>4868	CallExpression	glLoadIdentity ( )
>4869	ArgumentList	 
>4870	Callee	glLoadIdentity
>4871	Identifier	glLoadIdentity
>4872	ExpressionStatement	 
>4873	CallExpression	glBindTexture ( GL_TEXTURE_2D , 0 )
>4874	ArgumentList	GL_TEXTURE_2D
>4875	Argument	0
>4876	PrimaryExpression	0
>4877	Argument	GL_TEXTURE_2D
>4878	Identifier	GL_TEXTURE_2D
>4879	Callee	glBindTexture
>4880	Identifier	glBindTexture
>4881	ExpressionStatement	 
>4882	CallExpression	glPushMatrix ( )
>4883	ArgumentList	 
>4884	Callee	glPushMatrix
>4885	Identifier	glPushMatrix
>4886	ExpressionStatement	 
>4887	CallExpression	glPushAttrib ( GL_ALL_ATTRIB_BITS )
>4888	ArgumentList	GL_ALL_ATTRIB_BITS
>4889	Argument	GL_ALL_ATTRIB_BITS
>4890	Identifier	GL_ALL_ATTRIB_BITS
>4891	Callee	glPushAttrib
>4892	Identifier	glPushAttrib
>4893	Condition	 
>4894	UnaryOp	! collisionMask . empty ( )
>4895	CallExpression	collisionMask . empty ( )
>4896	ArgumentList	 
>4897	Callee	collisionMask . empty
>4898	MemberAccess	collisionMask . empty
>4899	Identifier	empty
>4900	Identifier	collisionMask
>4901	UnaryOperator	!
>4902	IfStatement	if ( ! collisionRects . empty ( ) )
>4903	CompoundStatement	 
>4904	ExpressionStatement	 
>4905	CallExpression	glPopAttrib ( )
>4906	ArgumentList	 
>4907	Callee	glPopAttrib
>4908	Identifier	glPopAttrib
>4909	ExpressionStatement	 
>4910	CallExpression	glDisable ( GL_BLEND )
>4911	ArgumentList	GL_BLEND
>4912	Argument	GL_BLEND
>4913	Identifier	GL_BLEND
>4914	Callee	glDisable
>4915	Identifier	glDisable
>4916	ExpressionStatement	 
>4917	CallExpression	glPopMatrix ( )
>4918	ArgumentList	 
>4919	Callee	glPopMatrix
>4920	Identifier	glPopMatrix
>4921	ForStatement	for ( int i = 0 ; i < collisionRects . size ( ) ; i ++ )
>4922	CompoundStatement	 
>4923	ExpressionStatement	 
>4924	CallExpression	glEnd ( )
>4925	ArgumentList	 
>4926	Callee	glEnd
>4927	Identifier	glEnd
>4928	ExpressionStatement	 
>4929	CallExpression	glVertex3f ( r -> x2 , r -> y1 , 0 )
>4930	ArgumentList	r -> x2
>4931	Argument	0
>4932	PrimaryExpression	0
>4933	Argument	r -> y1
>4934	PtrMemberAccess	r -> y1
>4935	Identifier	y1
>4936	Identifier	r
>4937	Argument	r -> x2
>4938	PtrMemberAccess	r -> x2
>4939	Identifier	x2
>4940	Identifier	r
>4941	Callee	glVertex3f
>4942	Identifier	glVertex3f
>4943	ExpressionStatement	 
>4944	CallExpression	glVertex3f ( r -> x2 , r -> y2 , 0 )
>4945	ArgumentList	r -> x2
>4946	Argument	0
>4947	PrimaryExpression	0
>4948	Argument	r -> y2
>4949	PtrMemberAccess	r -> y2
>4950	Identifier	y2
>4951	Identifier	r
>4952	Argument	r -> x2
>4953	PtrMemberAccess	r -> x2
>4954	Identifier	x2
>4955	Identifier	r
>4956	Callee	glVertex3f
>4957	Identifier	glVertex3f
>4958	ExpressionStatement	 
>4959	CallExpression	glVertex3f ( r -> x1 , r -> y2 , 0 )
>4960	ArgumentList	r -> x1
>4961	Argument	0
>4962	PrimaryExpression	0
>4963	Argument	r -> y2
>4964	PtrMemberAccess	r -> y2
>4965	Identifier	y2
>4966	Identifier	r
>4967	Argument	r -> x1
>4968	PtrMemberAccess	r -> x1
>4969	Identifier	x1
>4970	Identifier	r
>4971	Callee	glVertex3f
>4972	Identifier	glVertex3f
>4973	ExpressionStatement	 
>4974	CallExpression	glVertex3f ( r -> x1 , r -> y1 , 0 )
>4975	ArgumentList	r -> x1
>4976	Argument	0
>4977	PrimaryExpression	0
>4978	Argument	r -> y1
>4979	PtrMemberAccess	r -> y1
>4980	Identifier	y1
>4981	Identifier	r
>4982	Argument	r -> x1
>4983	PtrMemberAccess	r -> x1
>4984	Identifier	x1
>4985	Identifier	r
>4986	Callee	glVertex3f
>4987	Identifier	glVertex3f
>4988	ExpressionStatement	 
>4989	CallExpression	glBegin ( GL_POINTS )
>4990	ArgumentList	GL_POINTS
>4991	Argument	GL_POINTS
>4992	Identifier	GL_POINTS
>4993	Callee	glBegin
>4994	Identifier	glBegin
>4995	ExpressionStatement	 
>4996	CallExpression	glEnd ( )
>4997	ArgumentList	 
>4998	Callee	glEnd
>4999	Identifier	glEnd
>5000	ExpressionStatement	 
>5001	CallExpression	glVertex3f ( r -> x2 , r -> y1 , 0 )
>5002	ArgumentList	r -> x2
>5003	Argument	0
>5004	PrimaryExpression	0
>5005	Argument	r -> y1
>5006	PtrMemberAccess	r -> y1
>5007	Identifier	y1
>5008	Identifier	r
>5009	Argument	r -> x2
>5010	PtrMemberAccess	r -> x2
>5011	Identifier	x2
>5012	Identifier	r
>5013	Callee	glVertex3f
>5014	Identifier	glVertex3f
>5015	ExpressionStatement	 
>5016	CallExpression	glVertex3f ( r -> x2 , r -> y2 , 0 )
>5017	ArgumentList	r -> x2
>5018	Argument	0
>5019	PrimaryExpression	0
>5020	Argument	r -> y2
>5021	PtrMemberAccess	r -> y2
>5022	Identifier	y2
>5023	Identifier	r
>5024	Argument	r -> x2
>5025	PtrMemberAccess	r -> x2
>5026	Identifier	x2
>5027	Identifier	r
>5028	Callee	glVertex3f
>5029	Identifier	glVertex3f
>5030	ExpressionStatement	 
>5031	CallExpression	glVertex3f ( r -> x1 , r -> y2 , 0 )
>5032	ArgumentList	r -> x1
>5033	Argument	0
>5034	PrimaryExpression	0
>5035	Argument	r -> y2
>5036	PtrMemberAccess	r -> y2
>5037	Identifier	y2
>5038	Identifier	r
>5039	Argument	r -> x1
>5040	PtrMemberAccess	r -> x1
>5041	Identifier	x1
>5042	Identifier	r
>5043	Callee	glVertex3f
>5044	Identifier	glVertex3f
>5045	ExpressionStatement	 
>5046	CallExpression	glVertex3f ( r -> x1 , r -> y1 , 0 )
>5047	ArgumentList	r -> x1
>5048	Argument	0
>5049	PrimaryExpression	0
>5050	Argument	r -> y1
>5051	PtrMemberAccess	r -> y1
>5052	Identifier	y1
>5053	Identifier	r
>5054	Argument	r -> x1
>5055	PtrMemberAccess	r -> x1
>5056	Identifier	x1
>5057	Identifier	r
>5058	Callee	glVertex3f
>5059	Identifier	glVertex3f
>5060	ExpressionStatement	 
>5061	CallExpression	glBegin ( GL_QUADS )
>5062	ArgumentList	GL_QUADS
>5063	Argument	GL_QUADS
>5064	Identifier	GL_QUADS
>5065	Callee	glBegin
>5066	Identifier	glBegin
>5067	IdentifierDeclStatement	 
>5068	IdentifierDecl	* r = & collisionRects [ i ]
>5069	AssignmentExpr	* r = & collisionRects [ i ]
>5070	UnaryOp	& collisionRects [ i ]
>5071	ArrayIndexing	collisionRects [ i ]
>5072	Identifier	i
>5073	Identifier	collisionRects
>5074	UnaryOperator	&
>5075	Identifier	r
>5076	Identifier	r
>5077	IdentifierDeclType	RectShape *
>5078	IncDecOp	 
>5079	IncDec	++
>5080	Identifier	i
>5081	Condition	 
>5082	RelationalExpression	i < collisionRects . size ( )
>5083	CallExpression	collisionRects . size ( )
>5084	ArgumentList	 
>5085	Callee	collisionRects . size
>5086	MemberAccess	collisionRects . size
>5087	Identifier	size
>5088	Identifier	collisionRects
>5089	Identifier	i
>5090	ForInit	 
>5091	IdentifierDeclStatement	int i = 0 ;
>5092	IdentifierDecl	i = 0
>5093	AssignmentExpr	i = 0
>5094	PrimaryExpression	0
>5095	Identifier	i
>5096	Identifier	i
>5097	IdentifierDeclType	int
>5098	ExpressionStatement	 
>5099	CallExpression	glPointSize ( 5 )
>5100	ArgumentList	5
>5101	Argument	5
>5102	PrimaryExpression	5
>5103	Callee	glPointSize
>5104	Identifier	glPointSize
>5105	ExpressionStatement	 
>5106	CallExpression	glColor4f ( 1.0f , 0.5f , 1.0f , 0.5f )
>5107	ArgumentList	1.0f
>5108	Argument	0.5f
>5109	PrimaryExpression	0.5f
>5110	Argument	1.0f
>5111	PrimaryExpression	1.0f
>5112	Argument	0.5f
>5113	PrimaryExpression	0.5f
>5114	Argument	1.0f
>5115	PrimaryExpression	1.0f
>5116	Callee	glColor4f
>5117	Identifier	glColor4f
>5118	ExpressionStatement	 
>5119	CallExpression	glBlendFunc ( GL_SRC_ALPHA , GL_ONE_MINUS_SRC_ALPHA )
>5120	ArgumentList	GL_SRC_ALPHA
>5121	Argument	GL_ONE_MINUS_SRC_ALPHA
>5122	Identifier	GL_ONE_MINUS_SRC_ALPHA
>5123	Argument	GL_SRC_ALPHA
>5124	Identifier	GL_SRC_ALPHA
>5125	Callee	glBlendFunc
>5126	Identifier	glBlendFunc
>5127	ExpressionStatement	 
>5128	CallExpression	glEnable ( GL_BLEND )
>5129	ArgumentList	GL_BLEND
>5130	Argument	GL_BLEND
>5131	Identifier	GL_BLEND
>5132	Callee	glEnable
>5133	Identifier	glEnable
>5134	ExpressionStatement	 
>5135	CallExpression	glBindTexture ( GL_TEXTURE_2D , 0 )
>5136	ArgumentList	GL_TEXTURE_2D
>5137	Argument	0
>5138	PrimaryExpression	0
>5139	Argument	GL_TEXTURE_2D
>5140	Identifier	GL_TEXTURE_2D
>5141	Callee	glBindTexture
>5142	Identifier	glBindTexture
>5143	ExpressionStatement	 
>5144	CallExpression	glPushMatrix ( )
>5145	ArgumentList	 
>5146	Callee	glPushMatrix
>5147	Identifier	glPushMatrix
>5148	ExpressionStatement	 
>5149	CallExpression	glPushAttrib ( GL_ALL_ATTRIB_BITS )
>5150	ArgumentList	GL_ALL_ATTRIB_BITS
>5151	Argument	GL_ALL_ATTRIB_BITS
>5152	Identifier	GL_ALL_ATTRIB_BITS
>5153	Callee	glPushAttrib
>5154	Identifier	glPushAttrib
>5155	Condition	 
>5156	UnaryOp	! collisionRects . empty ( )
>5157	CallExpression	collisionRects . empty ( )
>5158	ArgumentList	 
>5159	Callee	collisionRects . empty
>5160	MemberAccess	collisionRects . empty
>5161	Identifier	empty
>5162	Identifier	collisionRects
>5163	UnaryOperator	!
>5215	FunctionDef	RenderObject 
>5216	ParameterList	RenderObject * r
>5217	Parameter	 
>5218	Identifier	r
>5219	ParameterType	RenderObject *
>5220	ReturnType	void
>5221	CompoundStatement	 
>5222	ExpressionStatement	 
>5223	CallExpression	deathNotifications . push_back ( r )
>5224	ArgumentList	r
>5225	Argument	r
>5226	Identifier	r
>5227	Callee	deathNotifications . push_back
>5228	MemberAccess	deathNotifications . push_back
>5229	Identifier	push_back
>5230	Identifier	deathNotifications
>5231	ExpressionStatement	 
>5232	CallExpression	deathNotifications . remove ( r )
>5233	ArgumentList	r
>5234	Argument	r
>5235	Identifier	r
>5236	Callee	deathNotifications . remove
>5237	MemberAccess	deathNotifications . remove
>5238	Identifier	remove
>5239	Identifier	deathNotifications
>5245	FunctionDef	RenderObject 
>5246	ParameterList	RenderObject * r
>5247	Parameter	 
>5248	Identifier	r
>5249	ParameterType	RenderObject *
>5250	ReturnType	void
>5251	CompoundStatement	 
>5252	ExpressionStatement	 
>5253	CallExpression	deathNotifications . remove ( r )
>5254	ArgumentList	r
>5255	Argument	r
>5256	Identifier	r
>5257	Callee	deathNotifications . remove
>5258	MemberAccess	deathNotifications . remove
>5259	Identifier	remove
>5260	Identifier	deathNotifications
>5266	FunctionDef	RenderObject 
>5267	ParameterList	int index
>5268	Parameter	 
>5269	Identifier	index
>5270	ParameterType	int
>5271	ReturnType	Vector
>5272	CompoundStatement	 
>5273	ReturnStatement	 
>5274	Identifier	sum
>5275	IfStatement	if ( ! sum . isZero ( ) )
>5276	CompoundStatement	 
>5277	ExpressionStatement	 
>5278	CallExpression	sum . normalize2D ( )
>5279	ArgumentList	 
>5280	Callee	sum . normalize2D
>5281	MemberAccess	sum . normalize2D
>5282	Identifier	normalize2D
>5283	Identifier	sum
>5284	ExpressionStatement	 
>5285	AssignmentExpr	sum /= num
>5286	Identifier	num
>5287	Identifier	sum
>5288	Condition	 
>5289	UnaryOp	! sum . isZero ( )
>5290	CallExpression	sum . isZero ( )
>5291	ArgumentList	 
>5292	Callee	sum . isZero
>5293	MemberAccess	sum . isZero
>5294	Identifier	isZero
>5295	Identifier	sum
>5296	UnaryOperator	!
>5297	ForStatement	for ( int i = 0 ; i < this -> transformedCollisionMask . size ( ) ; i ++ )
>5298	CompoundStatement	 
>5299	IfStatement	if ( i != index )
>5300	CompoundStatement	 
>5301	IfStatement	if ( diff . isLength2DIn ( 128 ) )
>5302	CompoundStatement	 
>5303	ExpressionStatement	 
>5304	IncDecOp	num ++
>5305	IncDec	++
>5306	Identifier	num
>5307	ExpressionStatement	 
>5308	AssignmentExpr	sum += diff
>5309	Identifier	diff
>5310	Identifier	sum
>5311	Condition	 
>5312	CallExpression	diff . isLength2DIn ( 128 )
>5313	ArgumentList	128
>5314	Argument	128
>5315	PrimaryExpression	128
>5316	Callee	diff . isLength2DIn
>5317	MemberAccess	diff . isLength2DIn
>5318	Identifier	isLength2DIn
>5319	Identifier	diff
>5320	IdentifierDeclStatement	 
>5321	IdentifierDecl	diff = transformedCollisionMask [ index ] - transformedCollisionMask [ i ]
>5322	AssignmentExpr	diff = transformedCollisionMask [ index ] - transformedCollisionMask [ i ]
>5323	AdditiveExpression	transformedCollisionMask [ index ] - transformedCollisionMask [ i ]
>5324	ArrayIndexing	transformedCollisionMask [ i ]
>5325	Identifier	i
>5326	Identifier	transformedCollisionMask
>5327	ArrayIndexing	transformedCollisionMask [ index ]
>5328	Identifier	index
>5329	Identifier	transformedCollisionMask
>5330	Identifier	diff
>5331	Identifier	diff
>5332	IdentifierDeclType	Vector
>5333	Condition	 
>5334	EqualityExpression	i != index
>5335	Identifier	index
>5336	Identifier	i
>5337	IncDecOp	 
>5338	IncDec	++
>5339	Identifier	i
>5340	Condition	 
>5341	RelationalExpression	i < this -> transformedCollisionMask . size ( )
>5342	CallExpression	this -> transformedCollisionMask . size ( )
>5343	ArgumentList	 
>5344	Callee	this -> transformedCollisionMask . size
>5345	MemberAccess	this -> transformedCollisionMask . size
>5346	Identifier	size
>5347	PtrMemberAccess	this -> transformedCollisionMask
>5348	Identifier	transformedCollisionMask
>5349	Identifier	this
>5350	Identifier	i
>5351	ForInit	 
>5352	IdentifierDeclStatement	int i = 0 ;
>5353	IdentifierDecl	i = 0
>5354	AssignmentExpr	i = 0
>5355	PrimaryExpression	0
>5356	Identifier	i
>5357	Identifier	i
>5358	IdentifierDeclType	int
>5359	IdentifierDeclStatement	 
>5360	IdentifierDecl	num = 0
>5361	AssignmentExpr	num = 0
>5362	PrimaryExpression	0
>5363	Identifier	num
>5364	Identifier	num
>5365	IdentifierDeclType	int
>5366	IdentifierDeclStatement	 
>5367	IdentifierDecl	sum
>5368	Identifier	sum
>5369	IdentifierDeclType	Vector
>5388	FunctionDef	RenderObject 
>5389	ParameterList	const Vector & pos , float t , float minAngle , float maxAngle , float offset
>5390	Parameter	 
>5391	Identifier	offset
>5392	ParameterType	float
>5393	Parameter	 
>5394	Identifier	maxAngle
>5395	ParameterType	float
>5396	Parameter	 
>5397	Identifier	minAngle
>5398	ParameterType	float
>5399	Parameter	 
>5400	Identifier	t
>5401	ParameterType	float
>5402	Parameter	 
>5403	Identifier	pos
>5404	ParameterType	const Vector &
>5405	ReturnType	void
>5406	CompoundStatement	 
>5407	ExpressionStatement	 
>5408	CallExpression	rotation . interpolateTo ( Vector ( 0 , 0 , angle ) , t )
>5409	ArgumentList	Vector ( 0 , 0 , angle )
>5410	Argument	t
>5411	Identifier	t
>5412	Argument	Vector ( 0 , 0 , angle )
>5413	CallExpression	Vector ( 0 , 0 , angle )
>5414	ArgumentList	0
>5415	Argument	angle
>5416	Identifier	angle
>5417	Argument	0
>5418	PrimaryExpression	0
>5419	Argument	0
>5420	PrimaryExpression	0
>5421	Callee	Vector
>5422	Identifier	Vector
>5423	Callee	rotation . interpolateTo
>5424	MemberAccess	rotation . interpolateTo
>5425	Identifier	interpolateTo
>5426	Identifier	rotation
>5427	IfStatement	if ( isPieceFlippedHorizontal ( ) )
>5428	ElseStatement	else
>5429	CompoundStatement	 
>5430	IfStatement	if ( pos . x > myPos . x + amt )
>5431	CompoundStatement	 
>5432	ExpressionStatement	 
>5433	AssignmentExpr	angle = 0
>5434	PrimaryExpression	0
>5435	Identifier	angle
>5436	Condition	 
>5437	RelationalExpression	pos . x > myPos . x + amt
>5438	AdditiveExpression	myPos . x + amt
>5439	Identifier	amt
>5440	MemberAccess	myPos . x
>5441	Identifier	x
>5442	Identifier	myPos
>5443	MemberAccess	pos . x
>5444	Identifier	x
>5445	Identifier	pos
>5446	CompoundStatement	 
>5447	IfStatement	if ( pos . x < myPos . x - amt )
>5448	CompoundStatement	 
>5449	ExpressionStatement	 
>5450	AssignmentExpr	angle = 0
>5451	PrimaryExpression	0
>5452	Identifier	angle
>5453	Condition	 
>5454	RelationalExpression	pos . x < myPos . x - amt
>5455	AdditiveExpression	myPos . x - amt
>5456	Identifier	amt
>5457	MemberAccess	myPos . x
>5458	Identifier	x
>5459	Identifier	myPos
>5460	MemberAccess	pos . x
>5461	Identifier	x
>5462	Identifier	pos
>5463	Condition	 
>5464	CallExpression	isPieceFlippedHorizontal ( )
>5465	ArgumentList	 
>5466	Callee	isPieceFlippedHorizontal
>5467	Identifier	isPieceFlippedHorizontal
>5468	IdentifierDeclStatement	 
>5469	IdentifierDecl	amt = 10
>5470	AssignmentExpr	amt = 10
>5471	PrimaryExpression	10
>5472	Identifier	amt
>5473	Identifier	amt
>5474	IdentifierDeclType	int
>5475	IfStatement	if ( angle > maxAngle )
>5476	ExpressionStatement	 
>5477	AssignmentExpr	angle = maxAngle
>5478	Identifier	maxAngle
>5479	Identifier	angle
>5480	Condition	 
>5481	RelationalExpression	angle > maxAngle
>5482	Identifier	maxAngle
>5483	Identifier	angle
>5484	IfStatement	if ( angle < minAngle )
>5485	ExpressionStatement	 
>5486	AssignmentExpr	angle = minAngle
>5487	Identifier	minAngle
>5488	Identifier	angle
>5489	Condition	 
>5490	RelationalExpression	angle < minAngle
>5491	Identifier	minAngle
>5492	Identifier	angle
>5493	ExpressionStatement	 
>5494	AssignmentExpr	angle += offset
>5495	Identifier	offset
>5496	Identifier	angle
>5497	IfStatement	if ( isPieceFlippedHorizontal ( ) )
>5498	CompoundStatement	 
>5499	ExpressionStatement	 
>5500	AssignmentExpr	offset = - offset
>5501	UnaryOp	- offset
>5502	Identifier	offset
>5503	UnaryOperator	-
>5504	Identifier	offset
>5505	ExpressionStatement	 
>5506	AssignmentExpr	angle = 180 - angle
>5507	AdditiveExpression	180 - angle
>5508	Identifier	angle
>5509	PrimaryExpression	180
>5510	Identifier	angle
>5511	Condition	 
>5512	CallExpression	isPieceFlippedHorizontal ( )
>5513	ArgumentList	 
>5514	Callee	isPieceFlippedHorizontal
>5515	Identifier	isPieceFlippedHorizontal
>5516	WhileStatement	while ( p )
>5517	CompoundStatement	 
>5518	ExpressionStatement	 
>5519	AssignmentExpr	p = p -> parent
>5520	PtrMemberAccess	p -> parent
>5521	Identifier	parent
>5522	Identifier	p
>5523	Identifier	p
>5524	ExpressionStatement	 
>5525	AssignmentExpr	angle -= p -> rotation . z
>5526	MemberAccess	p -> rotation . z
>5527	Identifier	z
>5528	PtrMemberAccess	p -> rotation
>5529	Identifier	rotation
>5530	Identifier	p
>5531	Identifier	angle
>5532	Condition	 
>5533	Identifier	p
>5534	IdentifierDeclStatement	 
>5535	IdentifierDecl	* p = parent
>5536	AssignmentExpr	* p = parent
>5537	Identifier	parent
>5538	Identifier	parent
>5539	Identifier	p
>5540	IdentifierDeclType	RenderObject *
>5541	ExpressionStatement	 
>5542	CallExpression	MathFunctions 
>5543	ArgumentList	myPos
>5544	Argument	angle
>5545	Identifier	angle
>5546	Argument	pos
>5547	Identifier	pos
>5548	Argument	myPos
>5549	Identifier	myPos
>5550	Callee	MathFunctions 
>5551	Identifier	MathFunctions 
>5552	IfStatement	if ( myPos . x == pos . x && myPos . y == pos . y )
>5553	CompoundStatement	 
>5554	ReturnStatement	 
>5555	Condition	 
>5556	AndExpression	myPos . x == pos . x && myPos . y == pos . y
>5557	EqualityExpression	myPos . y == pos . y
>5558	MemberAccess	pos . y
>5559	Identifier	y
>5560	Identifier	pos
>5561	MemberAccess	myPos . y
>5562	Identifier	y
>5563	Identifier	myPos
>5564	EqualityExpression	myPos . x == pos . x
>5565	MemberAccess	pos . x
>5566	Identifier	x
>5567	Identifier	pos
>5568	MemberAccess	myPos . x
>5569	Identifier	x
>5570	Identifier	myPos
>5571	IdentifierDeclStatement	 
>5572	IdentifierDecl	angle = 0
>5573	AssignmentExpr	angle = 0
>5574	PrimaryExpression	0
>5575	Identifier	angle
>5576	Identifier	angle
>5577	IdentifierDeclType	float
>5578	IdentifierDeclStatement	 
>5579	IdentifierDecl	myPos = this -> getWorldPosition ( )
>5580	AssignmentExpr	myPos = this -> getWorldPosition ( )
>5581	CallExpression	this -> getWorldPosition ( )
>5582	ArgumentList	 
>5583	Callee	this -> getWorldPosition
>5584	PtrMemberAccess	this -> getWorldPosition
>5585	Identifier	getWorldPosition
>5586	Identifier	this
>5587	Identifier	myPos
>5588	Identifier	myPos
>5589	IdentifierDeclType	Vector
>5617	FunctionDef	RenderObject 
>5618	ParameterList	float dt
>5619	Parameter	 
>5620	Identifier	dt
>5621	ParameterType	float
>5622	ReturnType	void
>5623	CompoundStatement	 
>5624	IfStatement	if ( ! isDead ( ) )
>5625	CompoundStatement	 
>5626	ForStatement	for ( Children 
>5627	CompoundStatement	 
>5628	IfStatement	if ( ( * i ) -> updateAfterParent && ( ( ( * i ) -> pm == PM_POINTER ) || ( ( * i ) -> pm == PM_STATIC ) ) )
>5629	CompoundStatement	 
>5630	ExpressionStatement	 
>5631	CallExpression	( * i ) -> update ( dt )
>5632	ArgumentList	dt
>5633	Argument	dt
>5634	Identifier	dt
>5635	Callee	( * i ) -> update
>5636	PtrMemberAccess	( * i ) -> update
>5637	Identifier	update
>5638	UnaryOp	* i
>5639	Identifier	i
>5640	UnaryOperator	*
>5641	Condition	 
>5642	AndExpression	( * i ) -> updateAfterParent && ( ( ( * i ) -> pm == PM_POINTER ) || ( ( * i ) -> pm == PM_STATIC ) )
>5643	OrExpression	( ( * i ) -> pm == PM_POINTER ) || ( ( * i ) -> pm == PM_STATIC )
>5644	EqualityExpression	( * i ) -> pm == PM_STATIC
>5645	Identifier	PM_STATIC
>5646	PtrMemberAccess	( * i ) -> pm
>5647	Identifier	pm
>5648	UnaryOp	* i
>5649	Identifier	i
>5650	UnaryOperator	*
>5651	EqualityExpression	( * i ) -> pm == PM_POINTER
>5652	Identifier	PM_POINTER
>5653	PtrMemberAccess	( * i ) -> pm
>5654	Identifier	pm
>5655	UnaryOp	* i
>5656	Identifier	i
>5657	UnaryOperator	*
>5658	PtrMemberAccess	( * i ) -> updateAfterParent
>5659	Identifier	updateAfterParent
>5660	UnaryOp	* i
>5661	Identifier	i
>5662	UnaryOperator	*
>5663	IncDecOp	 
>5664	IncDec	++
>5665	Identifier	i
>5666	Condition	 
>5667	EqualityExpression	i != children . end ( )
>5668	CallExpression	children . end ( )
>5669	ArgumentList	 
>5670	Callee	children . end
>5671	MemberAccess	children . end
>5672	Identifier	end
>5673	Identifier	children
>5674	Identifier	i
>5675	ForInit	 
>5676	IdentifierDeclStatement	Children 
>5677	IdentifierDecl	i = children . begin ( )
>5678	AssignmentExpr	i = children . begin ( )
>5679	CallExpression	children . begin ( )
>5680	ArgumentList	 
>5681	Callee	children . begin
>5682	MemberAccess	children . begin
>5683	Identifier	begin
>5684	Identifier	children
>5685	Identifier	i
>5686	Identifier	i
>5687	IdentifierDeclType	Children 
>5688	IfStatement	if ( isHidden ( ) )
>5689	ReturnStatement	 
>5690	Condition	 
>5691	CallExpression	isHidden ( )
>5692	ArgumentList	 
>5693	Callee	isHidden
>5694	Identifier	isHidden
>5695	ExpressionStatement	 
>5696	CallExpression	onUpdate ( dt )
>5697	ArgumentList	dt
>5698	Argument	dt
>5699	Identifier	dt
>5700	Callee	onUpdate
>5701	Identifier	onUpdate
>5702	Condition	 
>5703	UnaryOp	! isDead ( )
>5704	CallExpression	isDead ( )
>5705	ArgumentList	 
>5706	Callee	isDead
>5707	Identifier	isDead
>5708	UnaryOperator	!
>5709	IfStatement	if ( useOldDT )
>5710	CompoundStatement	 
>5711	ExpressionStatement	 
>5712	AssignmentExpr	dt = core -> get_old_dt ( )
>5713	CallExpression	core -> get_old_dt ( )
>5714	ArgumentList	 
>5715	Callee	core -> get_old_dt
>5716	PtrMemberAccess	core -> get_old_dt
>5717	Identifier	get_old_dt
>5718	Identifier	core
>5719	Identifier	dt
>5720	Condition	 
>5721	Identifier	useOldDT
>5722	IfStatement	if ( ignoreUpdate )
>5723	CompoundStatement	 
>5724	ReturnStatement	 
>5725	Condition	 
>5726	Identifier	ignoreUpdate
>5748	FunctionDef	RenderObject 
>5749	ParameterList	RenderObject * r
>5750	Parameter	 
>5751	Identifier	r
>5752	ParameterType	RenderObject *
>5753	ReturnType	void
>5754	CompoundStatement	 
>5755	ForStatement	for ( Children 
>5756	CompoundStatement	 
>5757	ExpressionStatement	 
>5758	CallExpression	( * i ) -> removeChild ( r )
>5759	ArgumentList	r
>5760	Argument	r
>5761	Identifier	r
>5762	Callee	( * i ) -> removeChild
>5763	PtrMemberAccess	( * i ) -> removeChild
>5764	Identifier	removeChild
>5765	UnaryOp	* i
>5766	Identifier	i
>5767	UnaryOperator	*
>5768	IncDecOp	 
>5769	IncDec	++
>5770	Identifier	i
>5771	Condition	 
>5772	EqualityExpression	i != children . end ( )
>5773	CallExpression	children . end ( )
>5774	ArgumentList	 
>5775	Callee	children . end
>5776	MemberAccess	children . end
>5777	Identifier	end
>5778	Identifier	children
>5779	Identifier	i
>5780	ForInit	 
>5781	IdentifierDeclStatement	Children 
>5782	IdentifierDecl	i = children . begin ( )
>5783	AssignmentExpr	i = children . begin ( )
>5784	CallExpression	children . begin ( )
>5785	ArgumentList	 
>5786	Callee	children . begin
>5787	MemberAccess	children . begin
>5788	Identifier	begin
>5789	Identifier	children
>5790	Identifier	i
>5791	Identifier	i
>5792	IdentifierDeclType	Children 
>5793	IfStatement	if ( oldend != newend )
>5794	CompoundStatement	 
>5795	ReturnStatement	 
>5796	ExpressionStatement	 
>5797	CallExpression	children . resize ( std 
>5798	ArgumentList	std 
>5799	Argument	std 
>5800	CallExpression	std 
>5801	ArgumentList	children . begin ( )
>5802	Argument	newend
>5803	Identifier	newend
>5804	Argument	children . begin ( )
>5805	CallExpression	children . begin ( )
>5806	ArgumentList	 
>5807	Callee	children . begin
>5808	MemberAccess	children . begin
>5809	Identifier	begin
>5810	Identifier	children
>5811	Callee	std 
>5812	Identifier	std 
>5813	Callee	children . resize
>5814	MemberAccess	children . resize
>5815	Identifier	resize
>5816	Identifier	children
>5817	Condition	 
>5818	EqualityExpression	oldend != newend
>5819	Identifier	newend
>5820	Identifier	oldend
>5821	IdentifierDeclStatement	 
>5822	IdentifierDecl	newend = std 
>5823	AssignmentExpr	newend = std 
>5824	CallExpression	std 
>5825	ArgumentList	children . begin ( )
>5826	Argument	r
>5827	Identifier	r
>5828	Argument	oldend
>5829	Identifier	oldend
>5830	Argument	children . begin ( )
>5831	CallExpression	children . begin ( )
>5832	ArgumentList	 
>5833	Callee	children . begin
>5834	MemberAccess	children . begin
>5835	Identifier	begin
>5836	Identifier	children
>5837	Callee	std 
>5838	Identifier	std 
>5839	Identifier	newend
>5840	Identifier	newend
>5841	IdentifierDeclType	Children 
>5842	IdentifierDeclStatement	 
>5843	IdentifierDecl	oldend = children . end ( )
>5844	AssignmentExpr	oldend = children . end ( )
>5845	CallExpression	children . end ( )
>5846	ArgumentList	 
>5847	Callee	children . end
>5848	MemberAccess	children . end
>5849	Identifier	end
>5850	Identifier	children
>5851	Identifier	oldend
>5852	Identifier	oldend
>5853	IdentifierDeclType	Children 
>5854	ExpressionStatement	 
>5855	AssignmentExpr	r -> parent = 0
>5856	PrimaryExpression	0
>5857	PtrMemberAccess	r -> parent
>5858	Identifier	parent
>5859	Identifier	r
>5875	FunctionDef	RenderObject 
>5876	ParameterList	RenderObject * r
>5877	Parameter	 
>5878	Identifier	r
>5879	ParameterType	RenderObject *
>5880	ReturnType	void
>5881	CompoundStatement	 
>5882	IfStatement	if ( r -> parent == this )
>5883	CompoundStatement	 
>5884	ExpressionStatement	 
>5885	CallExpression	childGarbage . push_back ( r )
>5886	ArgumentList	r
>5887	Argument	r
>5888	Identifier	r
>5889	Callee	childGarbage . push_back
>5890	MemberAccess	childGarbage . push_back
>5891	Identifier	push_back
>5892	Identifier	childGarbage
>5893	Condition	 
>5894	EqualityExpression	r -> parent == this
>5895	Identifier	this
>5896	PtrMemberAccess	r -> parent
>5897	Identifier	parent
>5898	Identifier	r
>5907	FunctionDef	RenderObject 
>5908	ParameterList	 
>5909	ReturnType	void
>5910	CompoundStatement	 
>5911	IfStatement	if ( this -> parent )
>5912	ElseStatement	else
>5913	CompoundStatement	 
>5914	IfStatement	if ( stateData )
>5915	ElseStatement	else
>5916	ExpressionStatement	 
>5917	CallExpression	core -> enqueueRenderObjectDeletion ( this )
>5918	ArgumentList	this
>5919	Argument	this
>5920	Identifier	this
>5921	Callee	core -> enqueueRenderObjectDeletion
>5922	PtrMemberAccess	core -> enqueueRenderObjectDeletion
>5923	Identifier	enqueueRenderObjectDeletion
>5924	Identifier	core
>5925	ExpressionStatement	 
>5926	CallExpression	stateData -> removeRenderObject ( this )
>5927	ArgumentList	this
>5928	Argument	this
>5929	Identifier	this
>5930	Callee	stateData -> removeRenderObject
>5931	PtrMemberAccess	stateData -> removeRenderObject
>5932	Identifier	removeRenderObject
>5933	Identifier	stateData
>5934	Condition	 
>5935	Identifier	stateData
>5936	CompoundStatement	 
>5937	ExpressionStatement	 
>5938	CallExpression	parent -> enqueueChildDeletion ( this )
>5939	ArgumentList	this
>5940	Argument	this
>5941	Identifier	this
>5942	Callee	parent -> enqueueChildDeletion
>5943	PtrMemberAccess	parent -> enqueueChildDeletion
>5944	Identifier	enqueueChildDeletion
>5945	Identifier	parent
>5946	Condition	 
>5947	PtrMemberAccess	this -> parent
>5948	Identifier	parent
>5949	Identifier	this
>5950	ForStatement	for ( RenderObjectList 
>5951	CompoundStatement	 
>5952	ExpressionStatement	 
>5953	CallExpression	( * i ) -> deathNotify ( this )
>5954	ArgumentList	this
>5955	Argument	this
>5956	Identifier	this
>5957	Callee	( * i ) -> deathNotify
>5958	PtrMemberAccess	( * i ) -> deathNotify
>5959	Identifier	deathNotify
>5960	UnaryOp	* i
>5961	Identifier	i
>5962	UnaryOperator	*
>5963	IncDecOp	 
>5964	IncDec	++
>5965	Identifier	i
>5966	Condition	 
>5967	EqualityExpression	i != deathNotifications . end ( )
>5968	CallExpression	deathNotifications . end ( )
>5969	ArgumentList	 
>5970	Callee	deathNotifications . end
>5971	MemberAccess	deathNotifications . end
>5972	Identifier	end
>5973	Identifier	deathNotifications
>5974	Identifier	i
>5975	ForInit	 
>5976	IdentifierDeclStatement	RenderObjectList 
>5977	IdentifierDecl	i = deathNotifications . begin ( )
>5978	AssignmentExpr	i = deathNotifications . begin ( )
>5979	CallExpression	deathNotifications . begin ( )
>5980	ArgumentList	 
>5981	Callee	deathNotifications . begin
>5982	MemberAccess	deathNotifications . begin
>5983	Identifier	begin
>5984	Identifier	deathNotifications
>5985	Identifier	i
>5986	Identifier	i
>5987	IdentifierDeclType	RenderObjectList 
>5988	ExpressionStatement	 
>5989	CallExpression	onEndOfLife ( )
>5990	ArgumentList	 
>5991	Callee	onEndOfLife
>5992	Identifier	onEndOfLife
>5993	ExpressionStatement	 
>5994	AssignmentExpr	life = 0
>5995	PrimaryExpression	0
>5996	Identifier	life
>5997	ExpressionStatement	 
>5998	AssignmentExpr	alpha = 0
>5999	PrimaryExpression	0
>6000	Identifier	alpha
>6017	FunctionDef	RenderObject 
>6018	ParameterList	 
>6019	ReturnType	Vector
>6020	CompoundStatement	 
>6021	ReturnStatement	 
>6022	CallExpression	Vector ( sinf ( a ) , cosf ( a ) )
>6023	ArgumentList	sinf ( a )
>6024	Argument	cosf ( a )
>6025	CallExpression	cosf ( a )
>6026	ArgumentList	a
>6027	Argument	a
>6028	Identifier	a
>6029	Callee	cosf
>6030	Identifier	cosf
>6031	Argument	sinf ( a )
>6032	CallExpression	sinf ( a )
>6033	ArgumentList	a
>6034	Argument	a
>6035	Identifier	a
>6036	Callee	sinf
>6037	Identifier	sinf
>6038	Callee	Vector
>6039	Identifier	Vector
>6040	IdentifierDeclStatement	 
>6041	IdentifierDecl	a = MathFunctions 
>6042	AssignmentExpr	a = MathFunctions 
>6043	CallExpression	MathFunctions 
>6044	ArgumentList	getAbsoluteRotation ( ) . z
>6045	Argument	getAbsoluteRotation ( ) . z
>6046	MemberAccess	getAbsoluteRotation ( ) . z
>6047	Identifier	z
>6048	CallExpression	getAbsoluteRotation ( )
>6049	ArgumentList	 
>6050	Callee	getAbsoluteRotation
>6051	Identifier	getAbsoluteRotation
>6052	Callee	MathFunctions 
>6053	Identifier	MathFunctions 
>6054	Identifier	a
>6055	Identifier	a
>6056	IdentifierDeclType	float
>6067	FunctionDef	RenderObject 
>6068	ParameterList	 
>6069	ReturnType	Vector
>6070	CompoundStatement	 
>6071	ReturnStatement	 
>6072	Identifier	r
>6073	ExpressionStatement	 
>6074	CallExpression	r . normalize2D ( )
>6075	ArgumentList	 
>6076	Callee	r . normalize2D
>6077	MemberAccess	r . normalize2D
>6078	Identifier	normalize2D
>6079	Identifier	r
>6080	IdentifierDeclStatement	 
>6081	IdentifierDecl	r = v - getWorldCollidePosition ( )
>6082	AssignmentExpr	r = v - getWorldCollidePosition ( )
>6083	AdditiveExpression	v - getWorldCollidePosition ( )
>6084	CallExpression	getWorldCollidePosition ( )
>6085	ArgumentList	 
>6086	Callee	getWorldCollidePosition
>6087	Identifier	getWorldCollidePosition
>6088	Identifier	v
>6089	Identifier	r
>6090	Identifier	r
>6091	IdentifierDeclType	Vector
>6092	IdentifierDeclStatement	 
>6093	IdentifierDecl	v = getWorldCollidePosition ( Vector ( 0 , - 1 , 0 ) )
>6094	AssignmentExpr	v = getWorldCollidePosition ( Vector ( 0 , - 1 , 0 ) )
>6095	CallExpression	getWorldCollidePosition ( Vector ( 0 , - 1 , 0 ) )
>6096	ArgumentList	Vector ( 0 , - 1 , 0 )
>6097	Argument	Vector ( 0 , - 1 , 0 )
>6098	CallExpression	Vector ( 0 , - 1 , 0 )
>6099	ArgumentList	0
>6100	Argument	0
>6101	PrimaryExpression	0
>6102	Argument	- 1
>6103	UnaryOp	- 1
>6104	PrimaryExpression	1
>6105	UnaryOperator	-
>6106	Argument	0
>6107	PrimaryExpression	0
>6108	Callee	Vector
>6109	Identifier	Vector
>6110	Callee	getWorldCollidePosition
>6111	Identifier	getWorldCollidePosition
>6112	Identifier	v
>6113	Identifier	v
>6114	IdentifierDeclType	Vector
>6122	FunctionDef	RenderObject 
>6123	ParameterList	 
>6124	ReturnType	Vector
>6125	CompoundStatement	 
>6126	ReturnStatement	 
>6127	Identifier	r
>6128	IfStatement	if ( parent )
>6129	CompoundStatement	 
>6130	ReturnStatement	 
>6131	AdditiveExpression	parent -> getAbsoluteRotation ( ) + r
>6132	Identifier	r
>6133	CallExpression	parent -> getAbsoluteRotation ( )
>6134	ArgumentList	 
>6135	Callee	parent -> getAbsoluteRotation
>6136	PtrMemberAccess	parent -> getAbsoluteRotation
>6137	Identifier	getAbsoluteRotation
>6138	Identifier	parent
>6139	Condition	 
>6140	Identifier	parent
>6141	IdentifierDeclStatement	 
>6142	IdentifierDecl	r = rotation
>6143	AssignmentExpr	r = rotation
>6144	Identifier	rotation
>6145	Identifier	rotation
>6146	Identifier	r
>6147	IdentifierDeclType	Vector
>6156	FunctionDef	RenderObject 
>6157	ParameterList	float dt
>6158	Parameter	 
>6159	Identifier	dt
>6160	ParameterType	float
>6161	ReturnType	void
>6162	CompoundStatement	 
>6163	IfStatement	if ( motionBlurTransition )
>6164	CompoundStatement	 
>6165	IfStatement	if ( motionBlurTransitionTimer <= 0 )
>6166	CompoundStatement	 
>6167	ExpressionStatement	 
>6168	AssignmentExpr	motionBlurTransitionTimer = 0
>6169	PrimaryExpression	0
>6170	Identifier	motionBlurTransitionTimer
>6171	ExpressionStatement	 
>6172	AssignmentExpr	motionBlur = motionBlurTransition = false
>6173	AssignmentExpr	motionBlurTransition = false
>6174	Identifier	false
>6175	Identifier	motionBlurTransition
>6176	Identifier	motionBlur
>6177	Condition	 
>6178	RelationalExpression	motionBlurTransitionTimer <= 0
>6179	PrimaryExpression	0
>6180	Identifier	motionBlurTransitionTimer
>6181	ExpressionStatement	 
>6182	AssignmentExpr	motionBlurTransitionTimer -= dt * 2
>6183	MultiplicativeExpression	dt * 2
>6184	PrimaryExpression	2
>6185	Identifier	dt
>6186	Identifier	motionBlurTransitionTimer
>6187	Condition	 
>6188	Identifier	motionBlurTransition
>6189	IfStatement	if ( motionBlur )
>6190	CompoundStatement	 
>6191	IfStatement	if ( motionBlurFrameOffsetCounter >= motionBlurFrameOffset )
>6192	ElseStatement	else
>6193	ExpressionStatement	 
>6194	IncDecOp	motionBlurFrameOffsetCounter ++
>6195	IncDec	++
>6196	Identifier	motionBlurFrameOffsetCounter
>6197	CompoundStatement	 
>6198	ForStatement	for ( int i = motionBlurPositions . size ( ) - 1 ; i > 0 ; i -- )
>6199	CompoundStatement	 
>6200	ExpressionStatement	 
>6201	AssignmentExpr	motionBlurPositions [ i ] = motionBlurPositions [ i - 1 ]
>6202	ArrayIndexing	motionBlurPositions [ i - 1 ]
>6203	AdditiveExpression	i - 1
>6204	PrimaryExpression	1
>6205	Identifier	i
>6206	Identifier	motionBlurPositions
>6207	ArrayIndexing	motionBlurPositions [ i ]
>6208	Identifier	i
>6209	Identifier	motionBlurPositions
>6210	IncDecOp	 
>6211	IncDec	--
>6212	Identifier	i
>6213	Condition	 
>6214	RelationalExpression	i > 0
>6215	PrimaryExpression	0
>6216	Identifier	i
>6217	ForInit	 
>6218	IdentifierDeclStatement	int i = motionBlurPositions . size ( ) - 1 ;
>6219	IdentifierDecl	i = motionBlurPositions . size ( ) - 1
>6220	AssignmentExpr	i = motionBlurPositions . size ( ) - 1
>6221	AdditiveExpression	motionBlurPositions . size ( ) - 1
>6222	PrimaryExpression	1
>6223	CallExpression	motionBlurPositions . size ( )
>6224	ArgumentList	 
>6225	Callee	motionBlurPositions . size
>6226	MemberAccess	motionBlurPositions . size
>6227	Identifier	size
>6228	Identifier	motionBlurPositions
>6229	Identifier	i
>6230	Identifier	i
>6231	IdentifierDeclType	int
>6232	ExpressionStatement	 
>6233	AssignmentExpr	motionBlurPositions [ 0 ] . rotz = rotation . z
>6234	MemberAccess	rotation . z
>6235	Identifier	z
>6236	Identifier	rotation
>6237	MemberAccess	motionBlurPositions [ 0 ] . rotz
>6238	Identifier	rotz
>6239	ArrayIndexing	motionBlurPositions [ 0 ]
>6240	PrimaryExpression	0
>6241	Identifier	motionBlurPositions
>6242	ExpressionStatement	 
>6243	AssignmentExpr	motionBlurPositions [ 0 ] . position = position
>6244	Identifier	position
>6245	MemberAccess	motionBlurPositions [ 0 ] . position
>6246	Identifier	position
>6247	ArrayIndexing	motionBlurPositions [ 0 ]
>6248	PrimaryExpression	0
>6249	Identifier	motionBlurPositions
>6250	ExpressionStatement	 
>6251	AssignmentExpr	motionBlurFrameOffsetCounter = 0
>6252	PrimaryExpression	0
>6253	Identifier	motionBlurFrameOffsetCounter
>6254	Condition	 
>6255	RelationalExpression	motionBlurFrameOffsetCounter >= motionBlurFrameOffset
>6256	Identifier	motionBlurFrameOffset
>6257	Identifier	motionBlurFrameOffsetCounter
>6258	Condition	 
>6259	Identifier	motionBlur
>6260	IfStatement	if ( ! childGarbage . empty ( ) )
>6261	CompoundStatement	 
>6262	ExpressionStatement	 
>6263	CallExpression	childGarbage . clear ( )
>6264	ArgumentList	 
>6265	Callee	childGarbage . clear
>6266	MemberAccess	childGarbage . clear
>6267	Identifier	clear
>6268	Identifier	childGarbage
>6269	ForStatement	for ( Children 
>6270	CompoundStatement	 
>6271	ExpressionStatement	 
>6272	UnaryOp	* i
>6273	Identifier	i
>6274	UnaryOperator	*
>6275	Statement	 
>6276	ExpressionStatement	 
>6277	CallExpression	( * i ) -> destroy ( )
>6278	ArgumentList	 
>6279	Callee	( * i ) -> destroy
>6280	PtrMemberAccess	( * i ) -> destroy
>6281	Identifier	destroy
>6282	UnaryOp	* i
>6283	Identifier	i
>6284	UnaryOperator	*
>6285	ExpressionStatement	 
>6286	CallExpression	removeChild ( * i )
>6287	ArgumentList	* i
>6288	Argument	* i
>6289	UnaryOp	* i
>6290	Identifier	i
>6291	UnaryOperator	*
>6292	Callee	removeChild
>6293	Identifier	removeChild
>6294	IncDecOp	 
>6295	IncDec	++
>6296	Identifier	i
>6297	Condition	 
>6298	EqualityExpression	i != childGarbage . end ( )
>6299	CallExpression	childGarbage . end ( )
>6300	ArgumentList	 
>6301	Callee	childGarbage . end
>6302	MemberAccess	childGarbage . end
>6303	Identifier	end
>6304	Identifier	childGarbage
>6305	Identifier	i
>6306	ForInit	 
>6307	IdentifierDeclStatement	Children 
>6308	IdentifierDecl	i = childGarbage . begin ( )
>6309	AssignmentExpr	i = childGarbage . begin ( )
>6310	CallExpression	childGarbage . begin ( )
>6311	ArgumentList	 
>6312	Callee	childGarbage . begin
>6313	MemberAccess	childGarbage . begin
>6314	Identifier	begin
>6315	Identifier	childGarbage
>6316	Identifier	i
>6317	Identifier	i
>6318	IdentifierDeclType	Children 
>6319	Condition	 
>6320	UnaryOp	! childGarbage . empty ( )
>6321	CallExpression	childGarbage . empty ( )
>6322	ArgumentList	 
>6323	Callee	childGarbage . empty
>6324	MemberAccess	childGarbage . empty
>6325	Identifier	empty
>6326	Identifier	childGarbage
>6327	UnaryOperator	!
>6328	ForStatement	for ( Children 
>6329	CompoundStatement	 
>6330	IfStatement	if ( ! ( * i ) -> updateAfterParent && ( ( ( * i ) -> pm == PM_POINTER ) || ( ( * i ) -> pm == PM_STATIC ) ) )
>6331	CompoundStatement	 
>6332	ExpressionStatement	 
>6333	CallExpression	( * i ) -> update ( dt )
>6334	ArgumentList	dt
>6335	Argument	dt
>6336	Identifier	dt
>6337	Callee	( * i ) -> update
>6338	PtrMemberAccess	( * i ) -> update
>6339	Identifier	update
>6340	UnaryOp	* i
>6341	Identifier	i
>6342	UnaryOperator	*
>6343	Condition	 
>6344	AndExpression	! ( * i ) -> updateAfterParent && ( ( ( * i ) -> pm == PM_POINTER ) || ( ( * i ) -> pm == PM_STATIC ) )
>6345	OrExpression	( ( * i ) -> pm == PM_POINTER ) || ( ( * i ) -> pm == PM_STATIC )
>6346	EqualityExpression	( * i ) -> pm == PM_STATIC
>6347	Identifier	PM_STATIC
>6348	PtrMemberAccess	( * i ) -> pm
>6349	Identifier	pm
>6350	UnaryOp	* i
>6351	Identifier	i
>6352	UnaryOperator	*
>6353	EqualityExpression	( * i ) -> pm == PM_POINTER
>6354	Identifier	PM_POINTER
>6355	PtrMemberAccess	( * i ) -> pm
>6356	Identifier	pm
>6357	UnaryOp	* i
>6358	Identifier	i
>6359	UnaryOperator	*
>6360	UnaryOp	! ( * i ) -> updateAfterParent
>6361	PtrMemberAccess	( * i ) -> updateAfterParent
>6362	Identifier	updateAfterParent
>6363	UnaryOp	* i
>6364	Identifier	i
>6365	UnaryOperator	*
>6366	UnaryOperator	!
>6367	IfStatement	if ( shareColorWithChildren )
>6368	ExpressionStatement	 
>6369	AssignmentExpr	( * i ) -> color = this -> color
>6370	PtrMemberAccess	this -> color
>6371	Identifier	color
>6372	Identifier	this
>6373	PtrMemberAccess	( * i ) -> color
>6374	Identifier	color
>6375	UnaryOp	* i
>6376	Identifier	i
>6377	UnaryOperator	*
>6378	Condition	 
>6379	Identifier	shareColorWithChildren
>6380	IfStatement	if ( shareAlphaWithChildren )
>6381	ExpressionStatement	 
>6382	AssignmentExpr	( * i ) -> alpha . x = this -> alpha . x
>6383	MemberAccess	this -> alpha . x
>6384	Identifier	x
>6385	PtrMemberAccess	this -> alpha
>6386	Identifier	alpha
>6387	Identifier	this
>6388	MemberAccess	( * i ) -> alpha . x
>6389	Identifier	x
>6390	PtrMemberAccess	( * i ) -> alpha
>6391	Identifier	alpha
>6392	UnaryOp	* i
>6393	Identifier	i
>6394	UnaryOperator	*
>6395	Condition	 
>6396	Identifier	shareAlphaWithChildren
>6397	IncDecOp	 
>6398	IncDec	++
>6399	Identifier	i
>6400	Condition	 
>6401	EqualityExpression	i != children . end ( )
>6402	CallExpression	children . end ( )
>6403	ArgumentList	 
>6404	Callee	children . end
>6405	MemberAccess	children . end
>6406	Identifier	end
>6407	Identifier	children
>6408	Identifier	i
>6409	ForInit	 
>6410	IdentifierDeclStatement	Children 
>6411	IdentifierDecl	i = children . begin ( )
>6412	AssignmentExpr	i = children . begin ( )
>6413	CallExpression	children . begin ( )
>6414	ArgumentList	 
>6415	Callee	children . begin
>6416	MemberAccess	children . begin
>6417	Identifier	begin
>6418	Identifier	children
>6419	Identifier	i
>6420	Identifier	i
>6421	IdentifierDeclType	Children 
>6422	ExpressionStatement	 
>6423	CallExpression	rotationOffset . update ( dt )
>6424	ArgumentList	dt
>6425	Argument	dt
>6426	Identifier	dt
>6427	Callee	rotationOffset . update
>6428	MemberAccess	rotationOffset . update
>6429	Identifier	update
>6430	Identifier	rotationOffset
>6431	ExpressionStatement	 
>6432	CallExpression	beforeScaleOffset . update ( dt )
>6433	ArgumentList	dt
>6434	Argument	dt
>6435	Identifier	dt
>6436	Callee	beforeScaleOffset . update
>6437	MemberAccess	beforeScaleOffset . update
>6438	Identifier	update
>6439	Identifier	beforeScaleOffset
>6440	ExpressionStatement	 
>6441	CallExpression	internalOffset . update ( dt )
>6442	ArgumentList	dt
>6443	Argument	dt
>6444	Identifier	dt
>6445	Callee	internalOffset . update
>6446	MemberAccess	internalOffset . update
>6447	Identifier	update
>6448	Identifier	internalOffset
>6449	ExpressionStatement	 
>6450	CallExpression	offset . update ( dt )
>6451	ArgumentList	dt
>6452	Argument	dt
>6453	Identifier	dt
>6454	Callee	offset . update
>6455	MemberAccess	offset . update
>6456	Identifier	update
>6457	Identifier	offset
>6458	ExpressionStatement	 
>6459	CallExpression	alpha . update ( dt )
>6460	ArgumentList	dt
>6461	Argument	dt
>6462	Identifier	dt
>6463	Callee	alpha . update
>6464	MemberAccess	alpha . update
>6465	Identifier	update
>6466	Identifier	alpha
>6467	ExpressionStatement	 
>6468	CallExpression	color . update ( dt )
>6469	ArgumentList	dt
>6470	Argument	dt
>6471	Identifier	dt
>6472	Callee	color . update
>6473	MemberAccess	color . update
>6474	Identifier	update
>6475	Identifier	color
>6476	ExpressionStatement	 
>6477	CallExpression	rotation . update ( dt )
>6478	ArgumentList	dt
>6479	Argument	dt
>6480	Identifier	dt
>6481	Callee	rotation . update
>6482	MemberAccess	rotation . update
>6483	Identifier	update
>6484	Identifier	rotation
>6485	ExpressionStatement	 
>6486	CallExpression	scale . update ( dt )
>6487	ArgumentList	dt
>6488	Argument	dt
>6489	Identifier	dt
>6490	Callee	scale . update
>6491	MemberAccess	scale . update
>6492	Identifier	update
>6493	Identifier	scale
>6494	ExpressionStatement	 
>6495	CallExpression	velocity . update ( dt )
>6496	ArgumentList	dt
>6497	Argument	dt
>6498	Identifier	dt
>6499	Callee	velocity . update
>6500	MemberAccess	velocity . update
>6501	Identifier	update
>6502	Identifier	velocity
>6503	ExpressionStatement	 
>6504	CallExpression	position . update ( dt )
>6505	ArgumentList	dt
>6506	Argument	dt
>6507	Identifier	dt
>6508	Callee	position . update
>6509	MemberAccess	position . update
>6510	Identifier	update
>6511	Identifier	position
>6512	ExpressionStatement	 
>6513	AssignmentExpr	velocity += gravity * dt
>6514	MultiplicativeExpression	gravity * dt
>6515	Identifier	dt
>6516	Identifier	gravity
>6517	Identifier	velocity
>6518	ExpressionStatement	 
>6519	AssignmentExpr	position += velocity * dt
>6520	MultiplicativeExpression	velocity * dt
>6521	Identifier	dt
>6522	Identifier	velocity
>6523	Identifier	position
>6524	IfStatement	if ( isHidden ( ) )
>6525	ReturnStatement	 
>6526	Condition	 
>6527	CallExpression	isHidden ( )
>6528	ArgumentList	 
>6529	Callee	isHidden
>6530	Identifier	isHidden
>6531	ExpressionStatement	 
>6532	CallExpression	updateLife ( dt )
>6533	ArgumentList	dt
>6534	Argument	dt
>6535	Identifier	dt
>6536	Callee	updateLife
>6537	Identifier	updateLife
>6538	IfStatement	if ( isDead ( ) )
>6539	ReturnStatement	 
>6540	Condition	 
>6541	CallExpression	isDead ( )
>6542	ArgumentList	 
>6543	Callee	isDead
>6544	Identifier	isDead
>6598	FunctionDef	RenderObject 
>6599	ParameterList	 
>6600	ReturnType	void
>6601	CompoundStatement	 
>6602	ForStatement	for ( Children 
>6603	CompoundStatement	 
>6604	ExpressionStatement	 
>6605	CallExpression	( * i ) -> unloadDevice ( )
>6606	ArgumentList	 
>6607	Callee	( * i ) -> unloadDevice
>6608	PtrMemberAccess	( * i ) -> unloadDevice
>6609	Identifier	unloadDevice
>6610	UnaryOp	* i
>6611	Identifier	i
>6612	UnaryOperator	*
>6613	IncDecOp	 
>6614	IncDec	++
>6615	Identifier	i
>6616	Condition	 
>6617	EqualityExpression	i != children . end ( )
>6618	CallExpression	children . end ( )
>6619	ArgumentList	 
>6620	Callee	children . end
>6621	MemberAccess	children . end
>6622	Identifier	end
>6623	Identifier	children
>6624	Identifier	i
>6625	ForInit	 
>6626	IdentifierDeclStatement	Children 
>6627	IdentifierDecl	i = children . begin ( )
>6628	AssignmentExpr	i = children . begin ( )
>6629	CallExpression	children . begin ( )
>6630	ArgumentList	 
>6631	Callee	children . begin
>6632	MemberAccess	children . begin
>6633	Identifier	begin
>6634	Identifier	children
>6635	Identifier	i
>6636	Identifier	i
>6637	IdentifierDeclType	Children 
>6646	FunctionDef	RenderObject 
>6647	ParameterList	 
>6648	ReturnType	void
>6649	CompoundStatement	 
>6650	ForStatement	for ( Children 
>6651	CompoundStatement	 
>6652	ExpressionStatement	 
>6653	CallExpression	( * i ) -> reloadDevice ( )
>6654	ArgumentList	 
>6655	Callee	( * i ) -> reloadDevice
>6656	PtrMemberAccess	( * i ) -> reloadDevice
>6657	Identifier	reloadDevice
>6658	UnaryOp	* i
>6659	Identifier	i
>6660	UnaryOperator	*
>6661	IncDecOp	 
>6662	IncDec	++
>6663	Identifier	i
>6664	Condition	 
>6665	EqualityExpression	i != children . end ( )
>6666	CallExpression	children . end ( )
>6667	ArgumentList	 
>6668	Callee	children . end
>6669	MemberAccess	children . end
>6670	Identifier	end
>6671	Identifier	children
>6672	Identifier	i
>6673	ForInit	 
>6674	IdentifierDeclStatement	Children 
>6675	IdentifierDecl	i = children . begin ( )
>6676	AssignmentExpr	i = children . begin ( )
>6677	CallExpression	children . begin ( )
>6678	ArgumentList	 
>6679	Callee	children . begin
>6680	MemberAccess	children . begin
>6681	Identifier	begin
>6682	Identifier	children
>6683	Identifier	i
>6684	Identifier	i
>6685	IdentifierDeclType	Children 
>6694	FunctionDef	RenderObject 
>6695	ParameterList	const std 
>6696	Parameter	 
>6697	Identifier	n
>6698	ParameterType	const std 
>6699	ReturnType	bool
>6700	CompoundStatement	 
>6701	ReturnStatement	 
>6702	AndExpression	! ! tex && res != TEX_FAILED
>6703	EqualityExpression	res != TEX_FAILED
>6704	Identifier	TEX_FAILED
>6705	Identifier	res
>6706	UnaryOp	! ! tex
>6707	UnaryOp	! tex
>6708	Identifier	tex
>6709	UnaryOperator	!
>6710	UnaryOperator	!
>6711	ExpressionStatement	 
>6712	CallExpression	setTexturePointer ( tex )
>6713	ArgumentList	tex
>6714	Argument	tex
>6715	Identifier	tex
>6716	Callee	setTexturePointer
>6717	Identifier	setTexturePointer
>6718	IdentifierDeclStatement	 
>6719	IdentifierDecl	tex = core -> addTexture ( name , & res )
>6720	AssignmentExpr	tex = core -> addTexture ( name , & res )
>6721	CallExpression	core -> addTexture ( name , & res )
>6722	ArgumentList	name
>6723	Argument	& res
>6724	UnaryOp	& res
>6725	Identifier	res
>6726	UnaryOperator	&
>6727	Argument	name
>6728	Identifier	name
>6729	Callee	core -> addTexture
>6730	PtrMemberAccess	core -> addTexture
>6731	Identifier	addTexture
>6732	Identifier	core
>6733	Identifier	tex
>6734	Identifier	tex
>6735	IdentifierDeclType	CountedPtr < Texture >
>6736	IdentifierDeclStatement	 
>6737	IdentifierDecl	res = TEX_FAILED
>6738	AssignmentExpr	res = TEX_FAILED
>6739	Identifier	TEX_FAILED
>6740	Identifier	TEX_FAILED
>6741	Identifier	res
>6742	IdentifierDeclType	TextureLoadResult
>6743	IfStatement	if ( texture && name == texture -> name )
>6744	ReturnStatement	 
>6745	Identifier	true
>6746	Condition	 
>6747	AndExpression	texture && name == texture -> name
>6748	EqualityExpression	name == texture -> name
>6749	PtrMemberAccess	texture -> name
>6750	Identifier	name
>6751	Identifier	texture
>6752	Identifier	name
>6753	Identifier	texture
>6754	IfStatement	if ( name . empty ( ) )
>6755	ReturnStatement	 
>6756	Identifier	false
>6757	Condition	 
>6758	CallExpression	name . empty ( )
>6759	ArgumentList	 
>6760	Callee	name . empty
>6761	MemberAccess	name . empty
>6762	Identifier	empty
>6763	Identifier	name
>6764	ExpressionStatement	 
>6765	CallExpression	stringToLowerUserData ( name )
>6766	ArgumentList	name
>6767	Argument	name
>6768	Identifier	name
>6769	Callee	stringToLowerUserData
>6770	Identifier	stringToLowerUserData
>6771	IdentifierDeclStatement	 
>6772	IdentifierDecl	name = n
>6773	AssignmentExpr	name = n
>6774	Identifier	n
>6775	Identifier	n
>6776	Identifier	name
>6777	IdentifierDeclType	std 
>6796	FunctionDef	RenderObject 
>6797	ParameterList	 
>6798	ReturnType	float
>6799	CompoundStatement	 
>6800	ReturnStatement	 
>6801	MemberAccess	position . y
>6802	Identifier	y
>6803	Identifier	position
>6809	FunctionDef	RenderObject 
>6810	ParameterList	RenderObject * r , ParentManaged pm , RenderBeforeParent rbp , ChildOrder order
>6811	Parameter	 
>6812	Identifier	order
>6813	ParameterType	ChildOrder
>6814	Parameter	 
>6815	Identifier	rbp
>6816	ParameterType	RenderBeforeParent
>6817	Parameter	 
>6818	Identifier	pm
>6819	ParameterType	ParentManaged
>6820	Parameter	 
>6821	Identifier	r
>6822	ParameterType	RenderObject *
>6823	ReturnType	void
>6824	CompoundStatement	 
>6825	ExpressionStatement	 
>6826	AssignmentExpr	r -> parent = this
>6827	Identifier	this
>6828	PtrMemberAccess	r -> parent
>6829	Identifier	parent
>6830	Identifier	r
>6831	IfStatement	if ( rbp == RBP_OFF )
>6832	ElseStatement	else
>6833	IfStatement	if ( rbp == RBP_ON )
>6834	ExpressionStatement	 
>6835	AssignmentExpr	r -> renderBeforeParent = 1
>6836	PrimaryExpression	1
>6837	PtrMemberAccess	r -> renderBeforeParent
>6838	Identifier	renderBeforeParent
>6839	Identifier	r
>6840	Condition	 
>6841	EqualityExpression	rbp == RBP_ON
>6842	Identifier	RBP_ON
>6843	Identifier	rbp
>6844	ExpressionStatement	 
>6845	AssignmentExpr	r -> renderBeforeParent = 0
>6846	PrimaryExpression	0
>6847	PtrMemberAccess	r -> renderBeforeParent
>6848	Identifier	renderBeforeParent
>6849	Identifier	r
>6850	Condition	 
>6851	EqualityExpression	rbp == RBP_OFF
>6852	Identifier	RBP_OFF
>6853	Identifier	rbp
>6854	ExpressionStatement	 
>6855	AssignmentExpr	r -> pm = pm
>6856	Identifier	pm
>6857	PtrMemberAccess	r -> pm
>6858	Identifier	pm
>6859	Identifier	r
>6860	IfStatement	if ( order == CHILD_BACK )
>6861	ElseStatement	else
>6862	ExpressionStatement	 
>6863	CallExpression	children . insert ( children . begin ( ) , r )
>6864	ArgumentList	children . begin ( )
>6865	Argument	r
>6866	Identifier	r
>6867	Argument	children . begin ( )
>6868	CallExpression	children . begin ( )
>6869	ArgumentList	 
>6870	Callee	children . begin
>6871	MemberAccess	children . begin
>6872	Identifier	begin
>6873	Identifier	children
>6874	Callee	children . insert
>6875	MemberAccess	children . insert
>6876	Identifier	insert
>6877	Identifier	children
>6878	ExpressionStatement	 
>6879	CallExpression	children . push_back ( r )
>6880	ArgumentList	r
>6881	Argument	r
>6882	Identifier	r
>6883	Callee	children . push_back
>6884	MemberAccess	children . push_back
>6885	Identifier	push_back
>6886	Identifier	children
>6887	Condition	 
>6888	EqualityExpression	order == CHILD_BACK
>6889	Identifier	CHILD_BACK
>6890	Identifier	order
>6891	IfStatement	if ( r -> parent )
>6892	CompoundStatement	 
>6893	ReturnStatement	 
>6894	ExpressionStatement	 
>6895	CallExpression	errorLog ( \"Engine does not support multiple parents\" )
>6896	ArgumentList	\"Engine does not support multiple parents\"
>6897	Argument	\"Engine does not support multiple parents\"
>6898	PrimaryExpression	\"Engine does not support multiple parents\"
>6899	Callee	errorLog
>6900	Identifier	errorLog
>6901	Condition	 
>6902	PtrMemberAccess	r -> parent
>6903	Identifier	parent
>6904	Identifier	r
>6922	FunctionDef	RenderObject 
>6923	ParameterList	 
>6924	ReturnType	StateData *
>6925	CompoundStatement	 
>6926	IfStatement	if ( parent )
>6927	ElseStatement	else
>6928	ReturnStatement	 
>6929	Identifier	stateData
>6930	CompoundStatement	 
>6931	ReturnStatement	 
>6932	CallExpression	parent -> getStateData ( )
>6933	ArgumentList	 
>6934	Callee	parent -> getStateData
>6935	PtrMemberAccess	parent -> getStateData
>6936	Identifier	getStateData
>6937	Identifier	parent
>6938	Condition	 
>6939	Identifier	parent
>6947	FunctionDef	RenderObject 
>6948	ParameterList	InterpolatedVector * positionSnapTo
>6949	Parameter	 
>6950	Identifier	positionSnapTo
>6951	ParameterType	InterpolatedVector *
>6952	ReturnType	void
>6953	CompoundStatement	 
>6954	ExpressionStatement	 
>6955	AssignmentExpr	this -> positionSnapTo = positionSnapTo
>6956	Identifier	positionSnapTo
>6957	PtrMemberAccess	this -> positionSnapTo
>6958	Identifier	positionSnapTo
>6959	Identifier	this
>6967	FunctionDef	RenderObject 
>6968	ParameterList	float ovr
>6969	Parameter	 
>6970	Identifier	ovr
>6971	ParameterType	float
>6972	ReturnType	void
>6973	CompoundStatement	 
>6974	ExpressionStatement	 
>6975	AssignmentExpr	overrideCullRadiusSqr = ovr * ovr
>6976	MultiplicativeExpression	ovr * ovr
>6977	Identifier	ovr
>6978	Identifier	ovr
>6979	Identifier	overrideCullRadiusSqr
>6985	FunctionDef	RenderObject 
>6986	ParameterList	const Vector & pos , float r
>6987	Parameter	 
>6988	Identifier	r
>6989	ParameterType	float
>6990	Parameter	 
>6991	Identifier	pos
>6992	ParameterType	const Vector &
>6993	ReturnType	bool
>6994	CompoundStatement	 
>6995	ReturnStatement	 
>6996	RelationalExpression	d . getSquaredLength2D ( ) < r * r
>6997	MultiplicativeExpression	r * r
>6998	Identifier	r
>6999	Identifier	r
>7000	CallExpression	d . getSquaredLength2D ( )
>7001	ArgumentList	 
>7002	Callee	d . getSquaredLength2D
>7003	MemberAccess	d . getSquaredLength2D
>7004	Identifier	getSquaredLength2D
>7005	Identifier	d
>7006	IdentifierDeclStatement	 
>7007	IdentifierDecl	d = pos - getRealPosition ( )
>7008	AssignmentExpr	d = pos - getRealPosition ( )
>7009	AdditiveExpression	pos - getRealPosition ( )
>7010	CallExpression	getRealPosition ( )
>7011	ArgumentList	 
>7012	Callee	getRealPosition
>7013	Identifier	getRealPosition
>7014	Identifier	pos
>7015	Identifier	d
>7016	Identifier	d
>7017	IdentifierDeclType	Vector
<17=23,22,18
<18=19
<19=21,20
<23=24
<24=48,37,25
<25=26
<26=27
<27=33,28
<28=31,29
<29=30
<31=32
<33=34
<34=36,35
<37=38
<38=44,39
<39=42,40
<40=41
<42=43
<44=45
<45=47,46
<48=49
<49=51,50
<51=53,52
<60=63,62,61
<63=66,64
<64=65
<66=75,67
<67=68
<68=69
<69=71,70
<71=72
<72=74,73
<75=76
<84=87,86,85
<87=271,88
<88=269,107,89
<89=90
<90=91
<91=92
<92=98,93
<93=96,94
<94=95
<96=97
<98=99
<99=101,100
<101=103,102
<103=104
<104=106,105
<107=253,144,126,108
<108=109
<109=117,110
<110=115,113,111
<111=112
<113=114
<115=116
<117=118
<118=120,119
<120=122,121
<122=123
<123=125,124
<126=127
<127=135,128
<128=133,131,129
<129=130
<131=132
<133=134
<135=136
<136=138,137
<138=140,139
<140=141
<141=143,142
<144=251,145
<145=249,233,217,216,214,198,182,181,179,163,147,146
<147=148
<148=154,149
<149=152,150
<150=151
<152=153
<154=155
<155=157,156
<157=159,158
<159=160
<160=162,161
<163=164
<164=170,165
<165=168,166
<166=167
<168=169
<170=171
<171=173,172
<173=175,174
<175=176
<176=178,177
<179=180
<182=183
<183=189,184
<184=187,185
<185=186
<187=188
<189=190
<190=192,191
<192=194,193
<194=195
<195=197,196
<198=199
<199=205,200
<200=203,201
<201=202
<203=204
<205=206
<206=208,207
<208=210,209
<210=211
<211=213,212
<214=215
<217=218
<218=224,219
<219=222,220
<220=221
<222=223
<224=225
<225=227,226
<227=229,228
<229=230
<230=232,231
<233=234
<234=240,235
<235=238,236
<236=237
<238=239
<240=241
<241=243,242
<243=245,244
<245=246
<246=248,247
<249=250
<251=252
<253=254
<254=260,255
<255=258,256
<256=257
<258=259
<260=261
<261=263,262
<263=265,264
<265=266
<266=268,267
<269=270
<271=348,288,272
<272=273
<273=281,274
<274=275
<275=279,276
<276=277
<277=278
<279=280
<281=282
<282=286,283
<283=284
<284=285
<286=287
<288=341,289
<289=339,290
<290=337,328,327,325,316,315,313,304,303,301,292,291
<292=293
<293=299,294
<294=297,295
<295=296
<297=298
<299=300
<301=302
<304=305
<305=311,306
<306=309,307
<307=308
<309=310
<311=312
<313=314
<316=317
<317=323,318
<318=321,319
<319=320
<321=322
<323=324
<325=326
<328=329
<329=335,330
<330=333,331
<331=332
<333=334
<335=336
<337=338
<339=340
<341=342
<342=346,343
<343=344
<344=345
<346=347
<348=349
<377=386,385,378
<378=382,379
<379=381,380
<382=384,383
<386=493,487,475,463,451,441,435,427,387
<387=414,405,402,388
<388=389
<389=390
<390=396,391
<391=394,392
<392=393
<394=395
<396=397
<397=399,398
<399=401,400
<402=404,403
<405=406
<406=413,407
<407=409,408
<409=410
<410=412,411
<414=415
<415=416
<416=426,425,417
<417=424,418
<418=420,419
<420=421
<421=423,422
<427=428
<428=430,429
<430=432,431
<432=434,433
<435=436
<436=438,437
<438=440,439
<441=442
<442=448,443
<443=445,444
<445=447,446
<448=450,449
<451=452
<452=458,453
<453=455,454
<455=457,456
<458=460,459
<460=462,461
<463=464
<464=470,465
<465=467,466
<467=469,468
<470=472,471
<472=474,473
<475=476
<476=482,477
<477=479,478
<479=481,480
<482=484,483
<484=486,485
<487=488
<488=490,489
<490=492,491
<493=503,494
<494=496,495
<496=497
<497=501,498
<498=499
<499=500
<501=502
<503=504
<531=534,533,532
<534=623,611,599,587,577,571,535
<535=558,549,546,536
<536=537
<537=538
<538=540,539
<540=541
<541=543,542
<543=545,544
<546=548,547
<549=550
<550=557,551
<551=553,552
<553=554
<554=556,555
<558=559
<559=560
<560=570,569,561
<561=568,562
<562=564,563
<564=565
<565=567,566
<571=572
<572=574,573
<574=576,575
<577=578
<578=582,579
<579=581,580
<582=584,583
<584=586,585
<587=588
<588=594,589
<589=591,590
<591=593,592
<594=596,595
<596=598,597
<599=600
<600=606,601
<601=603,602
<603=605,604
<606=608,607
<608=610,609
<611=612
<612=618,613
<613=615,614
<615=617,616
<618=620,619
<620=622,621
<623=633,624
<624=626,625
<626=627
<627=631,628
<628=629
<629=630
<631=632
<633=634
<634=636,635
<661=663,662
<663=870,866,862,858,854,850,846,842,838,834,830,826,822,818,814,808,804,800,796,790,786,782,778,774,770,766,762,758,745,732,726,720,716,712,708,704,700,696,692,688,684,680,676,672,668,664
<664=665
<665=667,666
<668=669
<669=671,670
<672=673
<673=675,674
<676=677
<677=679,678
<680=681
<681=683,682
<684=685
<685=687,686
<688=689
<689=691,690
<692=693
<693=695,694
<696=697
<697=699,698
<700=701
<701=703,702
<704=705
<705=707,706
<708=709
<709=711,710
<712=713
<713=715,714
<716=717
<717=719,718
<720=721
<721=725,722
<722=724,723
<726=727
<727=729,728
<729=731,730
<732=733
<733=744,734
<734=742,735
<735=740,738,736
<736=737
<738=739
<740=741
<742=743
<745=746
<746=757,747
<747=755,748
<748=753,751,749
<749=750
<751=752
<753=754
<755=756
<758=759
<759=761,760
<762=763
<763=765,764
<766=767
<767=769,768
<770=771
<771=773,772
<774=775
<775=777,776
<778=779
<779=781,780
<782=783
<783=785,784
<786=787
<787=789,788
<790=791
<791=795,792
<792=794,793
<796=797
<797=799,798
<800=801
<801=803,802
<804=805
<805=807,806
<808=809
<809=813,810
<810=812,811
<814=815
<815=817,816
<818=819
<819=821,820
<822=823
<823=825,824
<826=827
<827=829,828
<830=831
<831=833,832
<834=835
<835=837,836
<838=839
<839=841,840
<842=843
<843=845,844
<846=847
<847=849,848
<850=851
<851=853,852
<854=855
<855=857,856
<858=859
<859=861,860
<862=863
<863=865,864
<866=867
<867=869,868
<870=871
<871=875,872
<872=873
<873=874
<875=876
<935=937,936
<941=944,943,942
<944=945
<945=946
<946=948,947
<948=949
<954=957,956,955
<957=981,974,960,958
<958=959
<960=972,961
<961=968,962
<962=963
<963=967,964
<964=966,965
<968=969
<969=971,970
<972=973
<974=975
<975=980,979,976
<976=978,977
<981=982
<982=987,986,983
<983=985,984
<996=999,998,997
<999=1015,1005,1000
<1000=1001
<1001=1003,1002
<1003=1004
<1005=1013,1006
<1006=1007
<1007=1009,1008
<1009=1010
<1010=1012,1011
<1013=1014
<1015=1016
<1016=1024,1023,1017
<1017=1022,1018
<1018=1020,1019
<1020=1021
<1033=1039,1038,1034
<1034=1035
<1035=1037,1036
<1039=1238,1233,1229,1222,1203,1126,1097,1092,1083,1074,1065,1056,1051,1040
<1040=1041
<1041=1049,1042
<1042=1047,1045,1043
<1043=1044
<1045=1046
<1047=1048
<1049=1050
<1051=1052
<1052=1054,1053
<1054=1055
<1056=1057
<1057=1064,1063,1058
<1058=1062,1059
<1059=1061,1060
<1065=1066
<1066=1073,1072,1067
<1067=1071,1068
<1068=1070,1069
<1074=1075
<1075=1082,1081,1076
<1076=1080,1077
<1077=1079,1078
<1083=1084
<1084=1090,1085
<1085=1088,1086
<1086=1087
<1088=1089
<1090=1091
<1092=1093
<1093=1096,1095,1094
<1097=1114,1098
<1098=1099
<1099=1100
<1100=1112,1101
<1101=1108,1104,1102
<1102=1103
<1104=1105
<1105=1107,1106
<1108=1109
<1109=1111,1110
<1112=1113
<1114=1115
<1115=1121,1116
<1116=1118,1117
<1118=1120,1119
<1121=1123,1122
<1123=1125,1124
<1126=1188,1184,1181,1127
<1127=1152,1128
<1128=1143,1129
<1129=1130
<1130=1131
<1131=1141,1132
<1132=1139,1137,1135,1133
<1133=1134
<1135=1136
<1137=1138
<1139=1140
<1141=1142
<1143=1144
<1144=1146,1145
<1146=1147
<1147=1149,1148
<1149=1151,1150
<1152=1153
<1153=1179,1154
<1154=1161,1159,1157,1155
<1155=1156
<1157=1158
<1159=1160
<1161=1162
<1162=1178,1163
<1163=1171,1164
<1164=1166,1165
<1166=1168,1167
<1168=1170,1169
<1171=1173,1172
<1173=1175,1174
<1175=1177,1176
<1179=1180
<1181=1183,1182
<1184=1185
<1185=1187,1186
<1188=1189
<1189=1190
<1190=1202,1201,1191
<1191=1200,1192
<1192=1194,1193
<1194=1196,1195
<1196=1197
<1197=1199,1198
<1203=1220,1204
<1204=1211,1205
<1205=1206
<1206=1210,1207
<1207=1209,1208
<1211=1212
<1212=1216,1213
<1213=1214
<1214=1215
<1216=1217
<1217=1219,1218
<1220=1221
<1222=1223
<1223=1228,1227,1224
<1224=1226,1225
<1229=1230
<1230=1232,1231
<1233=1234
<1234=1236,1235
<1236=1237
<1238=1239
<1239=1241,1240
<1241=1242
<1272=1278,1277,1273
<1273=1274
<1274=1276,1275
<1278=1325,1302,1281,1279
<1279=1280
<1281=1282
<1282=1301,1283
<1283=1299,1284
<1284=1293,1287,1285
<1285=1286
<1287=1288
<1288=1290,1289
<1290=1292,1291
<1293=1294
<1294=1296,1295
<1296=1298,1297
<1299=1300
<1302=1318,1303
<1303=1304
<1304=1317,1305
<1305=1315,1306
<1306=1313,1311,1309,1307
<1307=1308
<1309=1310
<1311=1312
<1313=1314
<1315=1316
<1318=1319
<1319=1321,1320
<1321=1322
<1322=1324,1323
<1325=1326
<1326=1467,1466,1327
<1327=1465,1328
<1328=1463,1329
<1329=1349,1330
<1330=1331
<1331=1347,1332
<1332=1341,1335,1333
<1333=1334
<1335=1336
<1336=1338,1337
<1338=1340,1339
<1341=1342
<1342=1344,1343
<1344=1346,1345
<1347=1348
<1349=1350
<1350=1461,1351
<1351=1371,1352
<1352=1353
<1353=1369,1354
<1354=1363,1357,1355
<1355=1356
<1357=1358
<1358=1360,1359
<1360=1362,1361
<1363=1364
<1364=1366,1365
<1366=1368,1367
<1369=1370
<1371=1372
<1372=1459,1373
<1373=1397,1385,1374
<1374=1375
<1375=1383,1376
<1376=1381,1379,1377
<1377=1378
<1379=1380
<1381=1382
<1383=1384
<1385=1386
<1386=1392,1387
<1387=1389,1388
<1389=1391,1390
<1392=1394,1393
<1394=1396,1395
<1397=1398
<1398=1457,1399
<1399=1431,1400
<1400=1401
<1401=1429,1402
<1402=1417,1405,1403
<1403=1404
<1405=1406
<1406=1412,1407
<1407=1409,1408
<1409=1411,1410
<1412=1414,1413
<1414=1416,1415
<1417=1418
<1418=1424,1419
<1419=1421,1420
<1421=1423,1422
<1424=1426,1425
<1426=1428,1427
<1429=1430
<1431=1432
<1432=1450,1439,1433
<1433=1437,1434
<1434=1435
<1435=1436
<1437=1438
<1439=1448,1440
<1440=1441
<1441=1442
<1442=1444,1443
<1444=1445
<1445=1447,1446
<1448=1449
<1450=1451
<1451=1453,1452
<1453=1454
<1454=1456,1455
<1457=1458
<1459=1460
<1461=1462
<1463=1464
<1501=1507,1506,1502
<1502=1503
<1503=1505,1504
<1507=1641,1610,1587,1568,1549,1527,1508
<1508=1509
<1509=1525,1510
<1510=1519,1513,1511
<1511=1512
<1513=1514
<1514=1516,1515
<1516=1518,1517
<1519=1520
<1520=1522,1521
<1522=1524,1523
<1525=1526
<1527=1542,1528
<1528=1529
<1529=1530
<1530=1540,1531
<1531=1538,1536,1534,1532
<1532=1533
<1534=1535
<1536=1537
<1538=1539
<1540=1541
<1542=1543
<1543=1545,1544
<1545=1546
<1546=1548,1547
<1549=1550
<1550=1566,1551
<1551=1560,1554,1552
<1552=1553
<1554=1555
<1555=1557,1556
<1557=1559,1558
<1560=1561
<1561=1563,1562
<1563=1565,1564
<1566=1567
<1568=1569
<1569=1585,1570
<1570=1579,1573,1571
<1571=1572
<1573=1574
<1574=1576,1575
<1576=1578,1577
<1579=1580
<1580=1582,1581
<1582=1584,1583
<1585=1586
<1587=1588
<1588=1608,1589
<1589=1596,1594,1592,1590
<1590=1591
<1592=1593
<1594=1595
<1596=1597
<1597=1603,1598
<1598=1600,1599
<1600=1602,1601
<1603=1605,1604
<1605=1607,1606
<1608=1609
<1610=1611
<1611=1639,1612
<1612=1627,1615,1613
<1613=1614
<1615=1616
<1616=1622,1617
<1617=1619,1618
<1619=1621,1620
<1622=1624,1623
<1624=1626,1625
<1627=1628
<1628=1634,1629
<1629=1631,1630
<1631=1633,1632
<1634=1636,1635
<1636=1638,1637
<1639=1640
<1641=1649,1642
<1642=1643
<1643=1647,1644
<1644=1645
<1645=1646
<1647=1648
<1649=1650
<1650=1657,1651
<1651=1653,1652
<1653=1654
<1654=1656,1655
<1657=1659,1658
<1688=1691,1690,1689
<1691=1722,1712,1705,1694,1692
<1692=1693
<1694=1695
<1695=1703,1696
<1696=1701,1699,1697
<1697=1698
<1699=1700
<1701=1702
<1703=1704
<1705=1706
<1706=1711,1710,1707
<1707=1709,1708
<1712=1713
<1713=1721,1720,1714
<1714=1719,1715
<1715=1717,1716
<1717=1718
<1722=1723
<1723=1740,1739,1724
<1724=1738,1725
<1725=1736,1726
<1726=1727
<1727=1728
<1728=1734,1729
<1729=1732,1730
<1730=1731
<1732=1733
<1734=1735
<1736=1737
<1750=1753,1752,1751
<1753=1779,1769,1756,1754
<1754=1755
<1756=1757
<1757=1767,1758
<1758=1765,1763,1759
<1759=1760
<1760=1762,1761
<1763=1764
<1765=1766
<1767=1768
<1769=1770
<1770=1778,1777,1771
<1771=1776,1772
<1772=1774,1773
<1774=1775
<1779=1780
<1780=1797,1796,1781
<1781=1795,1782
<1782=1793,1783
<1783=1784
<1784=1785
<1785=1791,1786
<1786=1789,1787
<1787=1788
<1789=1790
<1791=1792
<1793=1794
<1807=1813,1812,1808
<1808=1809
<1809=1811,1810
<1813=1833,1814
<1814=1815
<1815=1831,1816
<1816=1825,1819,1817
<1817=1818
<1819=1820
<1820=1822,1821
<1822=1824,1823
<1825=1826
<1826=1828,1827
<1828=1830,1829
<1831=1832
<1833=1834
<1834=1872,1871,1835
<1835=1870,1836
<1836=1868,1837
<1837=1861,1838
<1838=1839
<1839=1859,1840
<1840=1851,1843,1841
<1841=1842
<1843=1844
<1844=1848,1845
<1845=1847,1846
<1848=1850,1849
<1851=1852
<1852=1856,1853
<1853=1855,1854
<1856=1858,1857
<1859=1860
<1861=1862
<1862=1866,1863
<1863=1864
<1864=1865
<1866=1867
<1868=1869
<1890=1896,1895,1891
<1891=1892
<1892=1894,1893
<1896=1897
<1897=1904,1898
<1898=1899
<1899=1900
<1900=1902,1901
<1902=1903
<1904=1905
<1905=1911,1906
<1906=1908,1907
<1908=1910,1909
<1911=1915,1912
<1912=1914,1913
<1921=1924,1923,1922
<1924=1942,1936,1925
<1925=1932,1926
<1926=1927
<1927=1928
<1928=1930,1929
<1930=1931
<1932=1933
<1933=1935,1934
<1936=1937
<1937=1941,1938
<1938=1940,1939
<1942=1943
<1943=1948,1947,1944
<1944=1946,1945
<1954=1957,1956,1955
<1957=1958
<1958=1959
<1959=1963,1960
<1960=1962,1961
<1968=1971,1970,1969
<1971=2000,1993,1976,1972
<1972=1973
<1973=1975,1974
<1976=1991,1977
<1977=1982,1978
<1978=1979
<1979=1981,1980
<1982=1983
<1983=1987,1984
<1984=1985
<1985=1986
<1987=1988
<1988=1990,1989
<1991=1992
<1993=1994
<1994=1996,1995
<1996=1997
<1997=1999,1998
<2000=2059,2050,2047,2001
<2001=2039,2002
<2002=2033,2003
<2003=2031,2022,2021,2019,2010,2009,2005,2004
<2005=2006
<2006=2008,2007
<2010=2011
<2011=2013,2012
<2013=2014
<2014=2016,2015
<2016=2018,2017
<2019=2020
<2022=2023
<2023=2025,2024
<2025=2026
<2026=2028,2027
<2028=2030,2029
<2031=2032
<2033=2034
<2034=2036,2035
<2036=2038,2037
<2039=2040
<2040=2042,2041
<2042=2044,2043
<2044=2046,2045
<2047=2049,2048
<2050=2051
<2051=2058,2052
<2052=2054,2053
<2054=2055
<2055=2057,2056
<2059=2060
<2060=2061
<2061=2071,2070,2062
<2062=2069,2063
<2063=2065,2064
<2065=2066
<2066=2068,2067
<2087=2093,2092,2088
<2088=2089
<2089=2091,2090
<2093=2118,2110,2102,2094
<2094=2095
<2095=2099,2096
<2096=2098,2097
<2099=2101,2100
<2102=2103
<2103=2107,2104
<2104=2106,2105
<2107=2109,2108
<2110=2111
<2111=2115,2112
<2112=2114,2113
<2115=2117,2116
<2118=2119
<2119=2123,2120
<2120=2122,2121
<2123=2125,2124
<2141=2146,2142
<2142=2143
<2143=2145,2144
<2146=2151,2147
<2147=2148
<2148=2150,2149
<2151=2152
<2152=2156,2153
<2153=2154
<2154=2155
<2156=2157
<2164=2167,2166,2165
<2167=2172,2168
<2168=2169
<2169=2171,2170
<2172=2185,2173
<2173=2174
<2174=2175
<2175=2184,2176
<2176=2183,2177
<2177=2179,2178
<2179=2180
<2180=2182,2181
<2185=2186
<2195=2198,2197,2196
<2198=2201,2199
<2199=2200
<2201=2212,2202
<2202=2203
<2203=2204
<2204=2211,2205
<2205=2207,2206
<2207=2208
<2208=2210,2209
<2212=2213
<2221=2227,2226,2222
<2222=2223
<2223=2225,2224
<2227=2228
<2228=2229
<2229=2231,2230
<2237=2243,2242,2238
<2238=2239
<2239=2241,2240
<2243=2244
<2244=2245
<2245=2247,2246
<2253=2256,2255,2254
<2256=2257
<2257=2329,2281,2258
<2258=2259
<2259=2275,2260
<2260=2261
<2261=2265,2262
<2262=2263
<2263=2264
<2265=2266
<2266=2268,2267
<2268=2272,2269
<2269=2271,2270
<2272=2274,2273
<2275=2276
<2276=2280,2277
<2277=2279,2278
<2281=2282
<2282=2312,2283
<2283=2303,2284
<2284=2285
<2285=2299,2286
<2286=2297,2291,2289,2287
<2287=2288
<2289=2290
<2291=2292
<2292=2296,2293
<2293=2295,2294
<2297=2298
<2299=2300
<2300=2302,2301
<2303=2304
<2304=2308,2305
<2305=2306
<2306=2307
<2308=2309
<2309=2311,2310
<2312=2313
<2313=2321,2314
<2314=2316,2315
<2316=2318,2317
<2318=2320,2319
<2321=2323,2322
<2323=2324
<2324=2326,2325
<2326=2328,2327
<2329=2330
<2330=2332,2331
<2332=2334,2333
<2360=2363,2362,2361
<2363=2364
<2364=2445,2388,2365
<2365=2366
<2366=2382,2367
<2367=2368
<2368=2372,2369
<2369=2370
<2370=2371
<2372=2373
<2373=2375,2374
<2375=2379,2376
<2376=2378,2377
<2379=2381,2380
<2382=2383
<2383=2387,2384
<2384=2386,2385
<2388=2389
<2389=2419,2390
<2390=2410,2391
<2391=2392
<2392=2406,2393
<2393=2404,2398,2396,2394
<2394=2395
<2396=2397
<2398=2399
<2399=2403,2400
<2400=2402,2401
<2404=2405
<2406=2407
<2407=2409,2408
<2410=2411
<2411=2415,2412
<2412=2413
<2413=2414
<2415=2416
<2416=2418,2417
<2419=2420
<2420=2437,2421
<2421=2423,2422
<2423=2434,2424
<2424=2426,2425
<2426=2428,2427
<2428=2429
<2429=2431,2430
<2431=2433,2432
<2434=2436,2435
<2437=2439,2438
<2439=2440
<2440=2442,2441
<2442=2444,2443
<2445=2446
<2446=2448,2447
<2448=2450,2449
<2477=2486,2485,2478
<2478=2482,2479
<2479=2481,2480
<2482=2484,2483
<2486=2544,2535,2531,2527,2487
<2487=2519,2510,2507,2488
<2488=2499,2489
<2489=2490
<2490=2494,2491
<2491=2493,2492
<2494=2496,2495
<2496=2498,2497
<2499=2500
<2500=2502,2501
<2502=2504,2503
<2504=2506,2505
<2507=2509,2508
<2510=2511
<2511=2518,2512
<2512=2514,2513
<2514=2515
<2515=2517,2516
<2519=2520
<2520=2521
<2521=2526,2525,2522
<2522=2524,2523
<2527=2528
<2528=2530,2529
<2531=2532
<2532=2534,2533
<2535=2536
<2536=2540,2537
<2537=2538
<2538=2539
<2540=2541
<2541=2543,2542
<2544=2545
<2545=2547,2546
<2567=2570,2569,2568
<2570=2579,2575,2571
<2571=2572
<2572=2574,2573
<2575=2576
<2576=2578,2577
<2579=2580
<2580=2582,2581
<2591=2594,2593,2592
<2594=2627,2620,2605,2597,2595
<2595=2596
<2597=2599,2598
<2599=2600
<2600=2604,2601
<2601=2603,2602
<2605=2606
<2606=2613,2607
<2607=2608
<2608=2612,2609
<2609=2611,2610
<2613=2614
<2614=2616,2615
<2616=2617
<2617=2619,2618
<2620=2621
<2621=2626,2625,2622
<2622=2624,2623
<2627=2628
<2628=2633,2632,2629
<2629=2631,2630
<2644=2647,2646,2645
<2647=2680,2673,2658,2650,2648
<2648=2649
<2650=2652,2651
<2652=2653
<2653=2657,2654
<2654=2656,2655
<2658=2659
<2659=2666,2660
<2660=2661
<2661=2665,2662
<2662=2664,2663
<2666=2667
<2667=2669,2668
<2669=2670
<2670=2672,2671
<2673=2674
<2674=2679,2678,2675
<2675=2677,2676
<2680=2681
<2681=2686,2685,2682
<2682=2684,2683
<2697=2703,2702,2698
<2698=2699
<2699=2701,2700
<2703=2758,2706,2704
<2704=2705
<2706=2745,2736,2733,2707
<2707=2708
<2708=2711,2709
<2709=2710
<2711=2712
<2712=2723,2713
<2713=2717,2714
<2714=2715
<2715=2716
<2717=2718
<2718=2720,2719
<2720=2722,2721
<2723=2732,2724
<2724=2726,2725
<2726=2727
<2727=2729,2728
<2729=2731,2730
<2733=2735,2734
<2736=2737
<2737=2744,2738
<2738=2740,2739
<2740=2741
<2741=2743,2742
<2745=2746
<2746=2747
<2747=2757,2756,2748
<2748=2755,2749
<2749=2751,2750
<2751=2752
<2752=2754,2753
<2758=2761,2759
<2759=2760
<2761=2762
<2762=2764,2763
<2780=2783,2782,2781
<2783=3024,3012,2922,2784
<2784=2918,2791,2785
<2785=2786
<2786=2787
<2787=2789,2788
<2789=2790
<2791=2911,2902,2893,2813,2809,2803,2797,2792
<2792=2793
<2793=2795,2794
<2795=2796
<2797=2798
<2798=2800,2799
<2800=2802,2801
<2803=2804
<2804=2806,2805
<2806=2808,2807
<2809=2810
<2810=2812,2811
<2813=2885,2876,2873,2814
<2814=2865,2855,2832,2828,2820,2815
<2815=2816
<2816=2818,2817
<2818=2819
<2820=2826,2821
<2821=2822
<2822=2823
<2823=2825,2824
<2826=2827
<2828=2829
<2829=2831,2830
<2832=2833
<2833=2854,2834
<2834=2853,2835
<2835=2847,2836
<2836=2845,2837
<2837=2838
<2838=2839
<2839=2841,2840
<2841=2842
<2842=2844,2843
<2845=2846
<2847=2851,2848
<2848=2849
<2849=2850
<2851=2852
<2855=2856
<2856=2862,2857
<2857=2859,2858
<2859=2861,2860
<2862=2864,2863
<2865=2866
<2866=2872,2867
<2867=2869,2868
<2869=2871,2870
<2873=2875,2874
<2876=2877
<2877=2884,2878
<2878=2880,2879
<2880=2881
<2881=2883,2882
<2885=2886
<2886=2887
<2887=2892,2891,2888
<2888=2890,2889
<2893=2894
<2894=2901,2900,2895
<2895=2899,2896
<2896=2898,2897
<2902=2903
<2903=2910,2909,2904
<2904=2908,2905
<2905=2907,2906
<2911=2912
<2912=2917,2916,2913
<2913=2915,2914
<2918=2919
<2919=2921,2920
<2922=3002,2923
<2923=2992,2924
<2924=2982,2963,2925
<2925=2926
<2926=2953,2942,2927
<2927=2928
<2928=2929
<2929=2931,2930
<2931=2932
<2932=2941,2933
<2933=2939,2934
<2934=2935
<2935=2936
<2936=2938,2937
<2939=2940
<2942=2943
<2943=2945,2944
<2945=2946
<2946=2950,2947
<2947=2949,2948
<2950=2952,2951
<2953=2954
<2954=2960,2955
<2955=2957,2956
<2957=2959,2958
<2960=2962,2961
<2963=2964
<2964=2966,2965
<2966=2967
<2967=2975,2968
<2968=2972,2969
<2969=2971,2970
<2972=2974,2973
<2975=2979,2976
<2976=2978,2977
<2979=2981,2980
<2982=2983
<2983=2989,2984
<2984=2986,2985
<2986=2988,2987
<2989=2991,2990
<2992=2993
<2993=3001,3000,2994
<2994=2999,2995
<2995=2997,2996
<2997=2998
<3002=3003
<3003=3007,3004
<3004=3006,3005
<3007=3009,3008
<3009=3011,3010
<3012=3014,3013
<3014=3015
<3015=3019,3016
<3016=3018,3017
<3019=3021,3020
<3021=3023,3022
<3024=3026,3025
<3026=3027
<3027=3029,3028
<3029=3030
<3071=3074,3073,3072
<3074=4442,4438,4421,4411,4398,3469,3415,3346,3258,3253,3246,3239,3192,3184,3176,3165,3109,3079,3075
<3075=3076
<3076=3078,3077
<3079=3105,3080
<3080=3100,3088,3081
<3081=3082
<3082=3084,3083
<3084=3085
<3085=3087,3086
<3088=3089
<3089=3091,3090
<3091=3092
<3092=3094,3093
<3094=3096,3095
<3096=3097
<3097=3099,3098
<3100=3101
<3101=3103,3102
<3103=3104
<3105=3106
<3106=3108,3107
<3109=3152,3143,3140,3110
<3110=3111
<3111=3121,3112
<3112=3113
<3113=3115,3114
<3115=3116
<3116=3118,3117
<3118=3120,3119
<3121=3122
<3122=3130,3123
<3123=3129,3124
<3124=3126,3125
<3126=3128,3127
<3130=3139,3131
<3131=3133,3132
<3133=3134
<3134=3136,3135
<3136=3138,3137
<3140=3142,3141
<3143=3144
<3144=3151,3145
<3145=3147,3146
<3147=3148
<3148=3150,3149
<3152=3153
<3153=3154
<3154=3164,3163,3155
<3155=3162,3156
<3156=3158,3157
<3158=3159
<3159=3161,3160
<3165=3172,3166
<3166=3167
<3167=3168
<3168=3170,3169
<3170=3171
<3172=3173
<3173=3175,3174
<3176=3182,3177
<3177=3178
<3178=3180,3179
<3180=3181
<3182=3183
<3184=3190,3185
<3185=3186
<3186=3188,3187
<3188=3189
<3190=3191
<3192=3229,3193
<3193=3219,3202,3194
<3194=3195
<3195=3201,3196
<3196=3198,3197
<3198=3200,3199
<3202=3217,3203
<3203=3204
<3204=3211,3205
<3205=3206
<3206=3210,3207
<3207=3209,3208
<3211=3212
<3212=3214,3213
<3214=3216,3215
<3217=3218
<3219=3220
<3220=3228,3227,3221
<3221=3226,3222
<3222=3224,3223
<3224=3225
<3229=3230
<3230=3234,3231
<3231=3233,3232
<3234=3236,3235
<3236=3238,3237
<3239=3240
<3240=3245,3244,3241
<3241=3243,3242
<3246=3247
<3247=3252,3251,3248
<3248=3250,3249
<3253=3254
<3254=3256,3255
<3256=3257
<3258=3344,3299,3259
<3259=3260
<3260=3261
<3261=3291,3262
<3262=3282,3271,3267,3263
<3263=3264
<3264=3266,3265
<3267=3268
<3268=3270,3269
<3271=3272
<3272=3278,3273
<3273=3276,3274
<3274=3275
<3276=3277
<3278=3279
<3279=3281,3280
<3282=3283
<3283=3289,3284
<3284=3287,3285
<3285=3286
<3287=3288
<3289=3290
<3291=3292
<3292=3296,3293
<3293=3295,3294
<3296=3298,3297
<3299=3309,3300
<3300=3301
<3301=3305,3302
<3302=3303
<3303=3304
<3305=3306
<3306=3308,3307
<3309=3332,3310
<3310=3323,3319,3311
<3311=3312
<3312=3318,3313
<3313=3315,3314
<3315=3317,3316
<3319=3320
<3320=3322,3321
<3323=3324
<3324=3328,3325
<3325=3326
<3326=3327
<3328=3329
<3329=3331,3330
<3332=3333
<3333=3337,3334
<3334=3336,3335
<3337=3339,3338
<3339=3341,3340
<3341=3343,3342
<3344=3345
<3346=3347
<3347=3413,3372,3348
<3348=3349
<3349=3350
<3350=3370,3351
<3351=3366,3362,3358,3352
<3352=3353
<3353=3355,3354
<3355=3357,3356
<3358=3359
<3359=3361,3360
<3362=3363
<3363=3365,3364
<3366=3367
<3367=3369,3368
<3370=3371
<3372=3373
<3373=3411,3374
<3374=3401,3391,3381,3375
<3375=3376
<3376=3378,3377
<3378=3380,3379
<3381=3382
<3382=3388,3383
<3383=3385,3384
<3385=3387,3386
<3388=3390,3389
<3391=3392
<3392=3398,3393
<3393=3395,3394
<3395=3397,3396
<3398=3400,3399
<3401=3402
<3402=3408,3403
<3403=3405,3404
<3405=3407,3406
<3408=3410,3409
<3411=3412
<3413=3414
<3415=3456,3447,3444,3416
<3416=3417
<3417=3427,3418
<3418=3419
<3419=3421,3420
<3421=3422
<3422=3424,3423
<3424=3426,3425
<3427=3428
<3428=3434,3429
<3429=3431,3430
<3431=3433,3432
<3434=3443,3435
<3435=3437,3436
<3437=3438
<3438=3440,3439
<3440=3442,3441
<3444=3446,3445
<3447=3448
<3448=3455,3449
<3449=3451,3450
<3451=3452
<3452=3454,3453
<3456=3457
<3457=3458
<3458=3468,3467,3459
<3459=3466,3460
<3460=3462,3461
<3462=3463
<3463=3465,3464
<3469=4394,3470
<3470=4361,3578,3561,3546,3529,3512,3495,3478,3471
<3471=3472
<3472=3474,3473
<3474=3475
<3475=3477,3476
<3478=3479
<3479=3491,3480
<3480=3487,3483,3481
<3481=3482
<3483=3484
<3484=3486,3485
<3487=3488
<3488=3490,3489
<3491=3492
<3492=3494,3493
<3495=3496
<3496=3508,3497
<3497=3504,3500,3498
<3498=3499
<3500=3501
<3501=3503,3502
<3504=3505
<3505=3507,3506
<3508=3509
<3509=3511,3510
<3512=3513
<3513=3525,3514
<3514=3521,3517,3515
<3515=3516
<3517=3518
<3518=3520,3519
<3521=3522
<3522=3524,3523
<3525=3526
<3526=3528,3527
<3529=3530
<3530=3544,3531
<3531=3540,3536,3532
<3532=3533
<3533=3535,3534
<3536=3537
<3537=3539,3538
<3540=3541
<3541=3543,3542
<3544=3545
<3546=3547
<3547=3559,3548
<3548=3555,3551,3549
<3549=3550
<3551=3552
<3552=3554,3553
<3555=3556
<3556=3558,3557
<3559=3560
<3561=3562
<3562=3576,3563
<3563=3572,3568,3564
<3564=3565
<3565=3567,3566
<3568=3569
<3569=3571,3570
<3572=3573
<3573=3575,3574
<3576=3577
<3578=4353,4023,3579
<3579=3580
<3580=4006,3989,3690,3671,3651,3636,3581
<3581=3631,3582
<3582=3615,3583
<3583=3584
<3584=3606,3585
<3585=3593,3586
<3586=3587
<3587=3591,3588
<3588=3589
<3589=3590
<3591=3592
<3593=3594
<3594=3605,3595
<3595=3603,3596
<3596=3601,3599,3597
<3597=3598
<3599=3600
<3601=3602
<3603=3604
<3606=3607
<3607=3609,3608
<3609=3611,3610
<3611=3612
<3612=3614,3613
<3615=3616
<3616=3622,3617
<3617=3620,3618
<3618=3619
<3620=3621
<3622=3623
<3623=3625,3624
<3625=3627,3626
<3627=3628
<3628=3630,3629
<3631=3632
<3632=3634,3633
<3634=3635
<3636=3637
<3637=3647,3638
<3638=3639
<3639=3640
<3640=3644,3641
<3641=3643,3642
<3644=3646,3645
<3647=3648
<3648=3650,3649
<3651=3666,3652
<3652=3653
<3653=3654
<3654=3664,3655
<3655=3662,3660,3658,3656
<3656=3657
<3658=3659
<3660=3661
<3662=3663
<3664=3665
<3666=3667
<3667=3669,3668
<3669=3670
<3671=3672
<3672=3688,3673
<3673=3680,3678,3676,3674
<3674=3675
<3676=3677
<3678=3679
<3680=3681
<3681=3685,3682
<3682=3684,3683
<3685=3687,3686
<3688=3689
<3690=3970,3691
<3691=3963,3956,3949,3936,3927,3920,3798,3793,3786,3779,3766,3697,3692
<3692=3693
<3693=3695,3694
<3695=3696
<3697=3762,3749,3746,3698
<3698=3699
<3699=3700
<3700=3744,3701
<3701=3723,3702
<3702=3703
<3703=3707,3704
<3704=3706,3705
<3707=3709,3708
<3709=3711,3710
<3711=3715,3712
<3712=3713
<3713=3714
<3715=3716
<3716=3718,3717
<3718=3720,3719
<3720=3722,3721
<3723=3724
<3724=3728,3725
<3725=3727,3726
<3728=3730,3729
<3730=3732,3731
<3732=3736,3733
<3733=3734
<3734=3735
<3736=3737
<3737=3739,3738
<3739=3741,3740
<3741=3743,3742
<3744=3745
<3746=3748,3747
<3749=3750
<3750=3761,3751
<3751=3753,3752
<3753=3754
<3754=3756,3755
<3756=3758,3757
<3758=3760,3759
<3762=3763
<3763=3765,3764
<3766=3767
<3767=3777,3768
<3768=3775,3773,3771,3769
<3769=3770
<3771=3772
<3773=3774
<3775=3776
<3777=3778
<3779=3780
<3780=3784,3781
<3781=3782
<3782=3783
<3784=3785
<3786=3787
<3787=3791,3788
<3788=3789
<3789=3790
<3791=3792
<3793=3794
<3794=3796,3795
<3796=3797
<3798=3916,3901,3898,3799
<3799=3851,3800
<3800=3801
<3801=3849,3802
<3802=3826,3803
<3803=3804
<3804=3808,3805
<3805=3807,3806
<3808=3810,3809
<3810=3812,3811
<3812=3818,3813
<3813=3814
<3814=3815
<3815=3817,3816
<3818=3819
<3819=3821,3820
<3821=3823,3822
<3823=3825,3824
<3826=3827
<3827=3831,3828
<3828=3830,3829
<3831=3833,3832
<3833=3835,3834
<3835=3841,3836
<3836=3837
<3837=3838
<3838=3840,3839
<3841=3842
<3842=3844,3843
<3844=3846,3845
<3846=3848,3847
<3849=3850
<3851=3852
<3852=3896,3853
<3853=3875,3854
<3854=3855
<3855=3859,3856
<3856=3858,3857
<3859=3861,3860
<3861=3863,3862
<3863=3867,3864
<3864=3865
<3865=3866
<3867=3868
<3868=3870,3869
<3870=3872,3871
<3872=3874,3873
<3875=3876
<3876=3880,3877
<3877=3879,3878
<3880=3882,3881
<3882=3884,3883
<3884=3888,3885
<3885=3886
<3886=3887
<3888=3889
<3889=3891,3890
<3891=3893,3892
<3893=3895,3894
<3896=3897
<3898=3900,3899
<3901=3902
<3902=3915,3903
<3903=3905,3904
<3905=3907,3906
<3907=3908
<3908=3910,3909
<3910=3912,3911
<3912=3914,3913
<3916=3917
<3917=3919,3918
<3920=3921
<3921=3925,3922
<3922=3923
<3923=3924
<3925=3926
<3927=3928
<3928=3934,3929
<3929=3932,3930
<3930=3931
<3932=3933
<3934=3935
<3936=3937
<3937=3947,3938
<3938=3945,3943,3941,3939
<3939=3940
<3941=3942
<3943=3944
<3945=3946
<3947=3948
<3949=3950
<3950=3955,3954,3951
<3951=3953,3952
<3956=3957
<3957=3961,3958
<3958=3959
<3959=3960
<3961=3962
<3963=3964
<3964=3968,3965
<3965=3966
<3966=3967
<3968=3969
<3970=3971
<3971=3988,3972
<3972=3985,3973
<3973=3975,3974
<3975=3977,3976
<3977=3978
<3978=3980,3979
<3980=3982,3981
<3982=3984,3983
<3985=3987,3986
<3989=3990
<3990=4002,3991
<3991=3998,3994,3992
<3992=3993
<3994=3995
<3995=3997,3996
<3998=3999
<3999=4001,4000
<4002=4003
<4003=4005,4004
<4006=4007
<4007=4021,4008
<4008=4017,4013,4009
<4009=4010
<4010=4012,4011
<4013=4014
<4014=4016,4015
<4017=4018
<4018=4020,4019
<4021=4022
<4023=4024
<4024=4349,4164,4025
<4025=4026
<4026=4154,4137,4117,4098,4081,4042,4027
<4027=4028
<4028=4038,4029
<4029=4030
<4030=4031
<4031=4035,4032
<4032=4034,4033
<4035=4037,4036
<4038=4039
<4039=4041,4040
<4042=4076,4043
<4043=4044
<4044=4045
<4045=4067,4046
<4046=4054,4047
<4047=4048
<4048=4052,4049
<4049=4050
<4050=4051
<4052=4053
<4054=4055
<4055=4066,4056
<4056=4064,4057
<4057=4062,4060,4058
<4058=4059
<4060=4061
<4062=4063
<4064=4065
<4067=4068
<4068=4070,4069
<4070=4072,4071
<4072=4073
<4073=4075,4074
<4076=4077
<4077=4079,4078
<4079=4080
<4081=4082
<4082=4094,4083
<4083=4090,4086,4084
<4084=4085
<4086=4087
<4087=4089,4088
<4090=4091
<4091=4093,4092
<4094=4095
<4095=4097,4096
<4098=4099
<4099=4115,4100
<4100=4107,4105,4103,4101
<4101=4102
<4103=4104
<4105=4106
<4107=4108
<4108=4112,4109
<4109=4111,4110
<4112=4114,4113
<4115=4116
<4117=4132,4118
<4118=4119
<4119=4120
<4120=4130,4121
<4121=4128,4126,4124,4122
<4122=4123
<4124=4125
<4126=4127
<4128=4129
<4130=4131
<4132=4133
<4133=4135,4134
<4135=4136
<4137=4138
<4138=4152,4139
<4139=4148,4144,4140
<4140=4141
<4141=4143,4142
<4144=4145
<4145=4147,4146
<4148=4149
<4149=4151,4150
<4152=4153
<4154=4155
<4155=4163,4162,4156
<4156=4161,4157
<4157=4159,4158
<4159=4160
<4164=4344,4325,4308,4288,4269,4257,4236,4219,4180,4165
<4165=4166
<4166=4176,4167
<4167=4168
<4168=4169
<4169=4173,4170
<4170=4172,4171
<4173=4175,4174
<4176=4177
<4177=4179,4178
<4180=4214,4181
<4181=4182
<4182=4183
<4183=4205,4184
<4184=4192,4185
<4185=4186
<4186=4190,4187
<4187=4188
<4188=4189
<4190=4191
<4192=4193
<4193=4204,4194
<4194=4202,4195
<4195=4200,4198,4196
<4196=4197
<4198=4199
<4200=4201
<4202=4203
<4205=4206
<4206=4208,4207
<4208=4210,4209
<4210=4211
<4211=4213,4212
<4214=4215
<4215=4217,4216
<4217=4218
<4219=4220
<4220=4232,4221
<4221=4228,4224,4222
<4222=4223
<4224=4225
<4225=4227,4226
<4228=4229
<4229=4231,4230
<4232=4233
<4233=4235,4234
<4236=4237
<4237=4253,4238
<4238=4247,4241,4239
<4239=4240
<4241=4242
<4242=4244,4243
<4244=4246,4245
<4247=4248
<4248=4250,4249
<4250=4252,4251
<4253=4254
<4254=4256,4255
<4257=4258
<4258=4260,4259
<4260=4261
<4261=4263,4262
<4263=4265,4264
<4265=4266
<4266=4268,4267
<4269=4270
<4270=4286,4271
<4271=4278,4276,4274,4272
<4272=4273
<4274=4275
<4276=4277
<4278=4279
<4279=4283,4280
<4280=4282,4281
<4283=4285,4284
<4286=4287
<4288=4303,4289
<4289=4290
<4290=4291
<4291=4301,4292
<4292=4299,4297,4295,4293
<4293=4294
<4295=4296
<4297=4298
<4299=4300
<4301=4302
<4303=4304
<4304=4306,4305
<4306=4307
<4308=4309
<4309=4323,4310
<4310=4319,4315,4311
<4311=4312
<4312=4314,4313
<4315=4316
<4316=4318,4317
<4319=4320
<4320=4322,4321
<4323=4324
<4325=4326
<4326=4342,4327
<4327=4336,4330,4328
<4328=4329
<4330=4331
<4331=4333,4332
<4333=4335,4334
<4336=4337
<4337=4339,4338
<4339=4341,4340
<4342=4343
<4344=4345
<4345=4347,4346
<4347=4348
<4349=4350
<4350=4352,4351
<4353=4354
<4354=4358,4355
<4355=4357,4356
<4358=4360,4359
<4361=4390,4362
<4362=4377,4363
<4363=4371,4364
<4364=4365
<4365=4366
<4366=4370,4367
<4367=4369,4368
<4371=4372
<4372=4374,4373
<4374=4376,4375
<4377=4378
<4378=4389,4388,4379
<4379=4387,4380
<4380=4386,4381
<4381=4383,4382
<4383=4385,4384
<4390=4391
<4391=4393,4392
<4394=4395
<4395=4397,4396
<4398=4407,4399
<4399=4400
<4400=4401
<4401=4405,4402
<4402=4403
<4403=4404
<4405=4406
<4407=4408
<4408=4410,4409
<4411=4417,4412
<4412=4413
<4413=4415,4414
<4415=4416
<4417=4418
<4418=4420,4419
<4421=4434,4422
<4422=4423
<4423=4425,4424
<4425=4426
<4426=4428,4427
<4428=4430,4429
<4430=4431
<4431=4433,4432
<4434=4435
<4435=4437,4436
<4438=4439
<4439=4441,4440
<4442=4451,4443
<4443=4444
<4444=4448,4445
<4445=4447,4446
<4448=4450,4449
<4451=4452
<4575=4578,4577,4576
<4578=4902,4579
<4579=4893,4716,4580
<4580=4581
<4581=4712,4582
<4582=4707,4702,4695,4686,4663,4648,4641,4632,4619,4610,4603,4588,4583
<4583=4584
<4584=4586,4585
<4586=4587
<4588=4589
<4589=4601,4590
<4590=4597,4593,4591
<4591=4592
<4593=4594
<4594=4596,4595
<4597=4598
<4598=4600,4599
<4601=4602
<4603=4604
<4604=4608,4605
<4605=4606
<4606=4607
<4608=4609
<4610=4611
<4611=4617,4612
<4612=4615,4613
<4613=4614
<4615=4616
<4617=4618
<4619=4620
<4620=4630,4621
<4621=4628,4626,4624,4622
<4622=4623
<4624=4625
<4626=4627
<4628=4629
<4630=4631
<4632=4633
<4633=4639,4634
<4634=4637,4635
<4635=4636
<4637=4638
<4639=4640
<4641=4642
<4642=4646,4643
<4643=4644
<4644=4645
<4646=4647
<4648=4649
<4649=4661,4650
<4650=4657,4653,4651
<4651=4652
<4653=4654
<4654=4656,4655
<4657=4658
<4658=4660,4659
<4661=4662
<4663=4664
<4664=4684,4665
<4665=4676,4668,4666
<4666=4667
<4668=4669
<4669=4673,4670
<4670=4672,4671
<4673=4675,4674
<4676=4677
<4677=4681,4678
<4678=4680,4679
<4681=4683,4682
<4684=4685
<4686=4687
<4687=4693,4688
<4688=4691,4689
<4689=4690
<4691=4692
<4693=4694
<4695=4696
<4696=4698,4697
<4698=4699
<4699=4701,4700
<4702=4703
<4703=4705,4704
<4705=4706
<4707=4708
<4708=4710,4709
<4710=4711
<4712=4713
<4713=4715,4714
<4716=4886,4881,4872,4867,4860,4853,4844,4831,4734,4727,4722,4717
<4717=4718
<4718=4720,4719
<4720=4721
<4722=4723
<4723=4725,4724
<4725=4726
<4727=4728
<4728=4732,4729
<4729=4730
<4730=4731
<4732=4733
<4734=4823,4814,4811,4735
<4735=4800,4785,4773,4755,4736
<4736=4737
<4737=4753,4738
<4738=4747,4741,4739
<4739=4740
<4741=4742
<4742=4746,4743
<4743=4745,4744
<4747=4748
<4748=4752,4749
<4749=4751,4750
<4753=4754
<4755=4771,4756
<4756=4757
<4757=4769,4758
<4758=4761,4759
<4759=4760
<4761=4762
<4762=4768,4763
<4763=4765,4764
<4765=4767,4766
<4769=4770
<4771=4772
<4773=4774
<4774=4784,4783,4775
<4775=4782,4776
<4776=4778,4777
<4778=4779
<4779=4781,4780
<4785=4786
<4786=4798,4787
<4787=4794,4790,4788
<4788=4789
<4790=4791
<4791=4793,4792
<4794=4795
<4795=4797,4796
<4798=4799
<4800=4801
<4801=4810,4809,4802
<4802=4808,4803
<4803=4805,4804
<4805=4807,4806
<4811=4813,4812
<4814=4815
<4815=4822,4816
<4816=4818,4817
<4818=4819
<4819=4821,4820
<4823=4824
<4824=4825
<4825=4830,4829,4826
<4826=4828,4827
<4831=4832
<4832=4842,4833
<4833=4840,4838,4836,4834
<4834=4835
<4836=4837
<4838=4839
<4840=4841
<4842=4843
<4844=4845
<4845=4851,4846
<4846=4849,4847
<4847=4848
<4849=4850
<4851=4852
<4853=4854
<4854=4858,4855
<4855=4856
<4856=4857
<4858=4859
<4860=4861
<4861=4863,4862
<4863=4864
<4864=4866,4865
<4867=4868
<4868=4870,4869
<4870=4871
<4872=4873
<4873=4879,4874
<4874=4877,4875
<4875=4876
<4877=4878
<4879=4880
<4881=4882
<4882=4884,4883
<4884=4885
<4886=4887
<4887=4891,4888
<4888=4889
<4889=4890
<4891=4892
<4893=4894
<4894=4901,4895
<4895=4897,4896
<4897=4898
<4898=4900,4899
<4902=5155,4903
<4903=5148,5143,5134,5127,5118,5105,5098,4921,4916,4909,4904
<4904=4905
<4905=4907,4906
<4907=4908
<4909=4910
<4910=4914,4911
<4911=4912
<4912=4913
<4914=4915
<4916=4917
<4917=4919,4918
<4919=4920
<4921=5090,5081,5078,4922
<4922=5067,5060,5045,5030,5015,5000,4995,4988,4973,4958,4943,4928,4923
<4923=4924
<4924=4926,4925
<4926=4927
<4928=4929
<4929=4941,4930
<4930=4937,4933,4931
<4931=4932
<4933=4934
<4934=4936,4935
<4937=4938
<4938=4940,4939
<4941=4942
<4943=4944
<4944=4956,4945
<4945=4952,4948,4946
<4946=4947
<4948=4949
<4949=4951,4950
<4952=4953
<4953=4955,4954
<4956=4957
<4958=4959
<4959=4971,4960
<4960=4967,4963,4961
<4961=4962
<4963=4964
<4964=4966,4965
<4967=4968
<4968=4970,4969
<4971=4972
<4973=4974
<4974=4986,4975
<4975=4982,4978,4976
<4976=4977
<4978=4979
<4979=4981,4980
<4982=4983
<4983=4985,4984
<4986=4987
<4988=4989
<4989=4993,4990
<4990=4991
<4991=4992
<4993=4994
<4995=4996
<4996=4998,4997
<4998=4999
<5000=5001
<5001=5013,5002
<5002=5009,5005,5003
<5003=5004
<5005=5006
<5006=5008,5007
<5009=5010
<5010=5012,5011
<5013=5014
<5015=5016
<5016=5028,5017
<5017=5024,5020,5018
<5018=5019
<5020=5021
<5021=5023,5022
<5024=5025
<5025=5027,5026
<5028=5029
<5030=5031
<5031=5043,5032
<5032=5039,5035,5033
<5033=5034
<5035=5036
<5036=5038,5037
<5039=5040
<5040=5042,5041
<5043=5044
<5045=5046
<5046=5058,5047
<5047=5054,5050,5048
<5048=5049
<5050=5051
<5051=5053,5052
<5054=5055
<5055=5057,5056
<5058=5059
<5060=5061
<5061=5065,5062
<5062=5063
<5063=5064
<5065=5066
<5067=5068
<5068=5077,5076,5069
<5069=5075,5070
<5070=5074,5071
<5071=5073,5072
<5078=5080,5079
<5081=5082
<5082=5089,5083
<5083=5085,5084
<5085=5086
<5086=5088,5087
<5090=5091
<5091=5092
<5092=5097,5096,5093
<5093=5095,5094
<5098=5099
<5099=5103,5100
<5100=5101
<5101=5102
<5103=5104
<5105=5106
<5106=5116,5107
<5107=5114,5112,5110,5108
<5108=5109
<5110=5111
<5112=5113
<5114=5115
<5116=5117
<5118=5119
<5119=5125,5120
<5120=5123,5121
<5121=5122
<5123=5124
<5125=5126
<5127=5128
<5128=5132,5129
<5129=5130
<5130=5131
<5132=5133
<5134=5135
<5135=5141,5136
<5136=5139,5137
<5137=5138
<5139=5140
<5141=5142
<5143=5144
<5144=5146,5145
<5146=5147
<5148=5149
<5149=5153,5150
<5150=5151
<5151=5152
<5153=5154
<5155=5156
<5156=5163,5157
<5157=5159,5158
<5159=5160
<5160=5162,5161
<5215=5221,5220,5216
<5216=5217
<5217=5219,5218
<5221=5231,5222
<5222=5223
<5223=5227,5224
<5224=5225
<5225=5226
<5227=5228
<5228=5230,5229
<5231=5232
<5232=5236,5233
<5233=5234
<5234=5235
<5236=5237
<5237=5239,5238
<5245=5251,5250,5246
<5246=5247
<5247=5249,5248
<5251=5252
<5252=5253
<5253=5257,5254
<5254=5255
<5255=5256
<5257=5258
<5258=5260,5259
<5266=5272,5271,5267
<5267=5268
<5268=5270,5269
<5272=5366,5359,5297,5275,5273
<5273=5274
<5275=5288,5276
<5276=5284,5277
<5277=5278
<5278=5280,5279
<5280=5281
<5281=5283,5282
<5284=5285
<5285=5287,5286
<5288=5289
<5289=5296,5290
<5290=5292,5291
<5292=5293
<5293=5295,5294
<5297=5351,5340,5337,5298
<5298=5299
<5299=5333,5300
<5300=5320,5301
<5301=5311,5302
<5302=5307,5303
<5303=5304
<5304=5306,5305
<5307=5308
<5308=5310,5309
<5311=5312
<5312=5316,5313
<5313=5314
<5314=5315
<5316=5317
<5317=5319,5318
<5320=5321
<5321=5332,5331,5322
<5322=5330,5323
<5323=5327,5324
<5324=5326,5325
<5327=5329,5328
<5333=5334
<5334=5336,5335
<5337=5339,5338
<5340=5341
<5341=5350,5342
<5342=5344,5343
<5344=5345
<5345=5347,5346
<5347=5349,5348
<5351=5352
<5352=5353
<5353=5358,5357,5354
<5354=5356,5355
<5359=5360
<5360=5365,5364,5361
<5361=5363,5362
<5366=5367
<5367=5369,5368
<5388=5406,5405,5389
<5389=5402,5399,5396,5393,5390
<5390=5392,5391
<5393=5395,5394
<5396=5398,5397
<5399=5401,5400
<5402=5404,5403
<5406=5578,5571,5552,5541,5534,5516,5497,5493,5484,5475,5468,5427,5407
<5407=5408
<5408=5423,5409
<5409=5412,5410
<5410=5411
<5412=5413
<5413=5421,5414
<5414=5419,5417,5415
<5415=5416
<5417=5418
<5419=5420
<5421=5422
<5423=5424
<5424=5426,5425
<5427=5463,5446,5428
<5428=5429
<5429=5430
<5430=5436,5431
<5431=5432
<5432=5433
<5433=5435,5434
<5436=5437
<5437=5443,5438
<5438=5440,5439
<5440=5442,5441
<5443=5445,5444
<5446=5447
<5447=5453,5448
<5448=5449
<5449=5450
<5450=5452,5451
<5453=5454
<5454=5460,5455
<5455=5457,5456
<5457=5459,5458
<5460=5462,5461
<5463=5464
<5464=5466,5465
<5466=5467
<5468=5469
<5469=5474,5473,5470
<5470=5472,5471
<5475=5480,5476
<5476=5477
<5477=5479,5478
<5480=5481
<5481=5483,5482
<5484=5489,5485
<5485=5486
<5486=5488,5487
<5489=5490
<5490=5492,5491
<5493=5494
<5494=5496,5495
<5497=5511,5498
<5498=5505,5499
<5499=5500
<5500=5504,5501
<5501=5503,5502
<5505=5506
<5506=5510,5507
<5507=5509,5508
<5511=5512
<5512=5514,5513
<5514=5515
<5516=5532,5517
<5517=5524,5518
<5518=5519
<5519=5523,5520
<5520=5522,5521
<5524=5525
<5525=5531,5526
<5526=5528,5527
<5528=5530,5529
<5532=5533
<5534=5535
<5535=5540,5539,5536
<5536=5538,5537
<5541=5542
<5542=5550,5543
<5543=5548,5546,5544
<5544=5545
<5546=5547
<5548=5549
<5550=5551
<5552=5555,5553
<5553=5554
<5555=5556
<5556=5564,5557
<5557=5561,5558
<5558=5560,5559
<5561=5563,5562
<5564=5568,5565
<5565=5567,5566
<5568=5570,5569
<5571=5572
<5572=5577,5576,5573
<5573=5575,5574
<5578=5579
<5579=5589,5588,5580
<5580=5587,5581
<5581=5583,5582
<5583=5584
<5584=5586,5585
<5617=5623,5622,5618
<5618=5619
<5619=5621,5620
<5623=5722,5709,5624
<5624=5702,5625
<5625=5695,5688,5626
<5626=5675,5666,5663,5627
<5627=5628
<5628=5641,5629
<5629=5630
<5630=5631
<5631=5635,5632
<5632=5633
<5633=5634
<5635=5636
<5636=5638,5637
<5638=5640,5639
<5641=5642
<5642=5658,5643
<5643=5651,5644
<5644=5646,5645
<5646=5648,5647
<5648=5650,5649
<5651=5653,5652
<5653=5655,5654
<5655=5657,5656
<5658=5660,5659
<5660=5662,5661
<5663=5665,5664
<5666=5667
<5667=5674,5668
<5668=5670,5669
<5670=5671
<5671=5673,5672
<5675=5676
<5676=5677
<5677=5687,5686,5678
<5678=5685,5679
<5679=5681,5680
<5681=5682
<5682=5684,5683
<5688=5690,5689
<5690=5691
<5691=5693,5692
<5693=5694
<5695=5696
<5696=5700,5697
<5697=5698
<5698=5699
<5700=5701
<5702=5703
<5703=5708,5704
<5704=5706,5705
<5706=5707
<5709=5720,5710
<5710=5711
<5711=5712
<5712=5719,5713
<5713=5715,5714
<5715=5716
<5716=5718,5717
<5720=5721
<5722=5725,5723
<5723=5724
<5725=5726
<5748=5754,5753,5749
<5749=5750
<5750=5752,5751
<5754=5854,5842,5821,5793,5755
<5755=5780,5771,5768,5756
<5756=5757
<5757=5758
<5758=5762,5759
<5759=5760
<5760=5761
<5762=5763
<5763=5765,5764
<5765=5767,5766
<5768=5770,5769
<5771=5772
<5772=5779,5773
<5773=5775,5774
<5775=5776
<5776=5778,5777
<5780=5781
<5781=5782
<5782=5792,5791,5783
<5783=5790,5784
<5784=5786,5785
<5786=5787
<5787=5789,5788
<5793=5817,5794
<5794=5796,5795
<5796=5797
<5797=5813,5798
<5798=5799
<5799=5800
<5800=5811,5801
<5801=5804,5802
<5802=5803
<5804=5805
<5805=5807,5806
<5807=5808
<5808=5810,5809
<5811=5812
<5813=5814
<5814=5816,5815
<5817=5818
<5818=5820,5819
<5821=5822
<5822=5841,5840,5823
<5823=5839,5824
<5824=5837,5825
<5825=5830,5828,5826
<5826=5827
<5828=5829
<5830=5831
<5831=5833,5832
<5833=5834
<5834=5836,5835
<5837=5838
<5842=5843
<5843=5853,5852,5844
<5844=5851,5845
<5845=5847,5846
<5847=5848
<5848=5850,5849
<5854=5855
<5855=5857,5856
<5857=5859,5858
<5875=5881,5880,5876
<5876=5877
<5877=5879,5878
<5881=5882
<5882=5893,5883
<5883=5884
<5884=5885
<5885=5889,5886
<5886=5887
<5887=5888
<5889=5890
<5890=5892,5891
<5893=5894
<5894=5896,5895
<5896=5898,5897
<5907=5910,5909,5908
<5910=5997,5993,5988,5950,5911
<5911=5946,5936,5912
<5912=5913
<5913=5914
<5914=5934,5925,5915
<5915=5916
<5916=5917
<5917=5921,5918
<5918=5919
<5919=5920
<5921=5922
<5922=5924,5923
<5925=5926
<5926=5930,5927
<5927=5928
<5928=5929
<5930=5931
<5931=5933,5932
<5934=5935
<5936=5937
<5937=5938
<5938=5942,5939
<5939=5940
<5940=5941
<5942=5943
<5943=5945,5944
<5946=5947
<5947=5949,5948
<5950=5975,5966,5963,5951
<5951=5952
<5952=5953
<5953=5957,5954
<5954=5955
<5955=5956
<5957=5958
<5958=5960,5959
<5960=5962,5961
<5963=5965,5964
<5966=5967
<5967=5974,5968
<5968=5970,5969
<5970=5971
<5971=5973,5972
<5975=5976
<5976=5977
<5977=5987,5986,5978
<5978=5985,5979
<5979=5981,5980
<5981=5982
<5982=5984,5983
<5988=5989
<5989=5991,5990
<5991=5992
<5993=5994
<5994=5996,5995
<5997=5998
<5998=6000,5999
<6017=6020,6019,6018
<6020=6040,6021
<6021=6022
<6022=6038,6023
<6023=6031,6024
<6024=6025
<6025=6029,6026
<6026=6027
<6027=6028
<6029=6030
<6031=6032
<6032=6036,6033
<6033=6034
<6034=6035
<6036=6037
<6038=6039
<6040=6041
<6041=6056,6055,6042
<6042=6054,6043
<6043=6052,6044
<6044=6045
<6045=6046
<6046=6048,6047
<6048=6050,6049
<6050=6051
<6052=6053
<6067=6070,6069,6068
<6070=6092,6080,6073,6071
<6071=6072
<6073=6074
<6074=6076,6075
<6076=6077
<6077=6079,6078
<6080=6081
<6081=6091,6090,6082
<6082=6089,6083
<6083=6088,6084
<6084=6086,6085
<6086=6087
<6092=6093
<6093=6114,6113,6094
<6094=6112,6095
<6095=6110,6096
<6096=6097
<6097=6098
<6098=6108,6099
<6099=6106,6102,6100
<6100=6101
<6102=6103
<6103=6105,6104
<6106=6107
<6108=6109
<6110=6111
<6122=6125,6124,6123
<6125=6141,6128,6126
<6126=6127
<6128=6139,6129
<6129=6130
<6130=6131
<6131=6133,6132
<6133=6135,6134
<6135=6136
<6136=6138,6137
<6139=6140
<6141=6142
<6142=6147,6146,6143
<6143=6145,6144
<6156=6162,6161,6157
<6157=6158
<6158=6160,6159
<6162=6538,6531,6524,6518,6512,6503,6494,6485,6476,6467,6458,6449,6440,6431,6422,6328,6260,6189,6163
<6163=6187,6164
<6164=6181,6165
<6165=6177,6166
<6166=6171,6167
<6167=6168
<6168=6170,6169
<6171=6172
<6172=6176,6173
<6173=6175,6174
<6177=6178
<6178=6180,6179
<6181=6182
<6182=6186,6183
<6183=6185,6184
<6187=6188
<6189=6258,6190
<6190=6191
<6191=6254,6197,6192
<6192=6193
<6193=6194
<6194=6196,6195
<6197=6250,6242,6232,6198
<6198=6217,6213,6210,6199
<6199=6200
<6200=6201
<6201=6207,6202
<6202=6206,6203
<6203=6205,6204
<6207=6209,6208
<6210=6212,6211
<6213=6214
<6214=6216,6215
<6217=6218
<6218=6219
<6219=6231,6230,6220
<6220=6229,6221
<6221=6223,6222
<6223=6225,6224
<6225=6226
<6226=6228,6227
<6232=6233
<6233=6237,6234
<6234=6236,6235
<6237=6239,6238
<6239=6241,6240
<6242=6243
<6243=6245,6244
<6245=6247,6246
<6247=6249,6248
<6250=6251
<6251=6253,6252
<6254=6255
<6255=6257,6256
<6258=6259
<6260=6319,6261
<6261=6269,6262
<6262=6263
<6263=6265,6264
<6265=6266
<6266=6268,6267
<6269=6306,6297,6294,6270
<6270=6285,6276,6275,6271
<6271=6272
<6272=6274,6273
<6276=6277
<6277=6279,6278
<6279=6280
<6280=6282,6281
<6282=6284,6283
<6285=6286
<6286=6292,6287
<6287=6288
<6288=6289
<6289=6291,6290
<6292=6293
<6294=6296,6295
<6297=6298
<6298=6305,6299
<6299=6301,6300
<6301=6302
<6302=6304,6303
<6306=6307
<6307=6308
<6308=6318,6317,6309
<6309=6316,6310
<6310=6312,6311
<6312=6313
<6313=6315,6314
<6319=6320
<6320=6327,6321
<6321=6323,6322
<6323=6324
<6324=6326,6325
<6328=6409,6400,6397,6329
<6329=6380,6367,6330
<6330=6343,6331
<6331=6332
<6332=6333
<6333=6337,6334
<6334=6335
<6335=6336
<6337=6338
<6338=6340,6339
<6340=6342,6341
<6343=6344
<6344=6360,6345
<6345=6353,6346
<6346=6348,6347
<6348=6350,6349
<6350=6352,6351
<6353=6355,6354
<6355=6357,6356
<6357=6359,6358
<6360=6366,6361
<6361=6363,6362
<6363=6365,6364
<6367=6378,6368
<6368=6369
<6369=6373,6370
<6370=6372,6371
<6373=6375,6374
<6375=6377,6376
<6378=6379
<6380=6395,6381
<6381=6382
<6382=6388,6383
<6383=6385,6384
<6385=6387,6386
<6388=6390,6389
<6390=6392,6391
<6392=6394,6393
<6395=6396
<6397=6399,6398
<6400=6401
<6401=6408,6402
<6402=6404,6403
<6404=6405
<6405=6407,6406
<6409=6410
<6410=6411
<6411=6421,6420,6412
<6412=6419,6413
<6413=6415,6414
<6415=6416
<6416=6418,6417
<6422=6423
<6423=6427,6424
<6424=6425
<6425=6426
<6427=6428
<6428=6430,6429
<6431=6432
<6432=6436,6433
<6433=6434
<6434=6435
<6436=6437
<6437=6439,6438
<6440=6441
<6441=6445,6442
<6442=6443
<6443=6444
<6445=6446
<6446=6448,6447
<6449=6450
<6450=6454,6451
<6451=6452
<6452=6453
<6454=6455
<6455=6457,6456
<6458=6459
<6459=6463,6460
<6460=6461
<6461=6462
<6463=6464
<6464=6466,6465
<6467=6468
<6468=6472,6469
<6469=6470
<6470=6471
<6472=6473
<6473=6475,6474
<6476=6477
<6477=6481,6478
<6478=6479
<6479=6480
<6481=6482
<6482=6484,6483
<6485=6486
<6486=6490,6487
<6487=6488
<6488=6489
<6490=6491
<6491=6493,6492
<6494=6495
<6495=6499,6496
<6496=6497
<6497=6498
<6499=6500
<6500=6502,6501
<6503=6504
<6504=6508,6505
<6505=6506
<6506=6507
<6508=6509
<6509=6511,6510
<6512=6513
<6513=6517,6514
<6514=6516,6515
<6518=6519
<6519=6523,6520
<6520=6522,6521
<6524=6526,6525
<6526=6527
<6527=6529,6528
<6529=6530
<6531=6532
<6532=6536,6533
<6533=6534
<6534=6535
<6536=6537
<6538=6540,6539
<6540=6541
<6541=6543,6542
<6543=6544
<6598=6601,6600,6599
<6601=6602
<6602=6625,6616,6613,6603
<6603=6604
<6604=6605
<6605=6607,6606
<6607=6608
<6608=6610,6609
<6610=6612,6611
<6613=6615,6614
<6616=6617
<6617=6624,6618
<6618=6620,6619
<6620=6621
<6621=6623,6622
<6625=6626
<6626=6627
<6627=6637,6636,6628
<6628=6635,6629
<6629=6631,6630
<6631=6632
<6632=6634,6633
<6646=6649,6648,6647
<6649=6650
<6650=6673,6664,6661,6651
<6651=6652
<6652=6653
<6653=6655,6654
<6655=6656
<6656=6658,6657
<6658=6660,6659
<6661=6663,6662
<6664=6665
<6665=6672,6666
<6666=6668,6667
<6668=6669
<6669=6671,6670
<6673=6674
<6674=6675
<6675=6685,6684,6676
<6676=6683,6677
<6677=6679,6678
<6679=6680
<6680=6682,6681
<6694=6700,6699,6695
<6695=6696
<6696=6698,6697
<6700=6771,6764,6754,6743,6736,6718,6711,6701
<6701=6702
<6702=6706,6703
<6703=6705,6704
<6706=6710,6707
<6707=6709,6708
<6711=6712
<6712=6716,6713
<6713=6714
<6714=6715
<6716=6717
<6718=6719
<6719=6735,6734,6720
<6720=6733,6721
<6721=6729,6722
<6722=6727,6723
<6723=6724
<6724=6726,6725
<6727=6728
<6729=6730
<6730=6732,6731
<6736=6737
<6737=6742,6741,6738
<6738=6740,6739
<6743=6746,6744
<6744=6745
<6746=6747
<6747=6753,6748
<6748=6752,6749
<6749=6751,6750
<6754=6757,6755
<6755=6756
<6757=6758
<6758=6760,6759
<6760=6761
<6761=6763,6762
<6764=6765
<6765=6769,6766
<6766=6767
<6767=6768
<6769=6770
<6771=6772
<6772=6777,6776,6773
<6773=6775,6774
<6796=6799,6798,6797
<6799=6800
<6800=6801
<6801=6803,6802
<6809=6824,6823,6810
<6810=6820,6817,6814,6811
<6811=6813,6812
<6814=6816,6815
<6817=6819,6818
<6820=6822,6821
<6824=6891,6860,6854,6831,6825
<6825=6826
<6826=6828,6827
<6828=6830,6829
<6831=6850,6844,6832
<6832=6833
<6833=6840,6834
<6834=6835
<6835=6837,6836
<6837=6839,6838
<6840=6841
<6841=6843,6842
<6844=6845
<6845=6847,6846
<6847=6849,6848
<6850=6851
<6851=6853,6852
<6854=6855
<6855=6857,6856
<6857=6859,6858
<6860=6887,6878,6861
<6861=6862
<6862=6863
<6863=6874,6864
<6864=6867,6865
<6865=6866
<6867=6868
<6868=6870,6869
<6870=6871
<6871=6873,6872
<6874=6875
<6875=6877,6876
<6878=6879
<6879=6883,6880
<6880=6881
<6881=6882
<6883=6884
<6884=6886,6885
<6887=6888
<6888=6890,6889
<6891=6901,6892
<6892=6894,6893
<6894=6895
<6895=6899,6896
<6896=6897
<6897=6898
<6899=6900
<6901=6902
<6902=6904,6903
<6922=6925,6924,6923
<6925=6926
<6926=6938,6930,6927
<6927=6928
<6928=6929
<6930=6931
<6931=6932
<6932=6934,6933
<6934=6935
<6935=6937,6936
<6938=6939
<6947=6953,6952,6948
<6948=6949
<6949=6951,6950
<6953=6954
<6954=6955
<6955=6957,6956
<6957=6959,6958
<6967=6973,6972,6968
<6968=6969
<6969=6971,6970
<6973=6974
<6974=6975
<6975=6979,6976
<6976=6978,6977
<6985=6994,6993,6986
<6986=6990,6987
<6987=6989,6988
<6990=6992,6991
<6994=7006,6995
<6995=6996
<6996=7000,6997
<6997=6999,6998
<7000=7002,7001
<7002=7003
<7003=7005,7004
<7006=7007
<7007=7017,7016,7008
<7008=7015,7009
<7009=7014,7010
<7010=7012,7011
<7012=7013
