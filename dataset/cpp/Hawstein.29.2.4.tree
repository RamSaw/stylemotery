>10	FunctionDef	init (int a [ ] , int n)
>11	ParameterList	int a [ ] , int n
>12	Parameter	 
>13	Identifier	n
>14	ParameterType	int
>15	Parameter	 
>16	Identifier	a
>17	ParameterType	int [ ]
>18	ReturnType	node *
>19	CompoundStatement	 
>20	ReturnStatement	 
>21	Identifier	head
>22	ForStatement	for ( int i = 0 ; i < n ; ++ i )
>23	CompoundStatement	 
>24	ExpressionStatement	 
>25	AssignmentExpr	p = nd
>26	Identifier	nd
>27	Identifier	p
>28	ExpressionStatement	 
>29	AssignmentExpr	p -> next = nd
>30	Identifier	nd
>31	PtrMemberAccess	p -> next
>32	Identifier	next
>33	Identifier	p
>34	IfStatement	if ( i == 0 )
>35	CompoundStatement	 
>36	ContinueStatement	 
>37	ExpressionStatement	 
>38	AssignmentExpr	head = p = nd
>39	AssignmentExpr	p = nd
>40	Identifier	nd
>41	Identifier	p
>42	Identifier	head
>43	Condition	 
>44	EqualityExpression	i == 0
>45	PrimaryExpression	0
>46	Identifier	i
>47	ExpressionStatement	 
>48	AssignmentExpr	nd -> data = a [ i ]
>49	ArrayIndexing	a [ i ]
>50	Identifier	i
>51	Identifier	a
>52	PtrMemberAccess	nd -> data
>53	Identifier	data
>54	Identifier	nd
>55	IdentifierDeclStatement	 
>56	IdentifierDecl	* nd = new node ( )
>57	AssignmentExpr	* nd = new node ( )
>58	UnaryExpression	new node ( )
>59	Identifier	nd
>60	Identifier	nd
>61	IdentifierDeclType	node *
>62	UnaryExpression	 
>63	Identifier	i
>64	IncDec	++
>65	Condition	 
>66	RelationalExpression	i < n
>67	Identifier	n
>68	Identifier	i
>69	ForInit	 
>70	IdentifierDeclStatement	int i = 0 ;
>71	IdentifierDecl	i = 0
>72	AssignmentExpr	i = 0
>73	PrimaryExpression	0
>74	Identifier	i
>75	Identifier	i
>76	IdentifierDeclType	int
>77	IdentifierDeclStatement	 
>78	IdentifierDecl	* p
>79	Identifier	p
>80	IdentifierDeclType	node *
>81	IdentifierDecl	* head = NULL
>82	AssignmentExpr	* head = NULL
>83	Identifier	NULL
>84	Identifier	NULL
>85	Identifier	head
>86	IdentifierDeclType	node *
>103	FunctionDef	addlink (node * p , node * q)
>104	ParameterList	node * p , node * q
>105	Parameter	 
>106	Identifier	q
>107	ParameterType	node *
>108	Parameter	 
>109	Identifier	p
>110	ParameterType	node *
>111	ReturnType	node *
>112	CompoundStatement	 
>113	ReturnStatement	 
>114	Identifier	res
>115	IfStatement	if ( c > 0 )
>116	CompoundStatement	 
>117	ExpressionStatement	 
>118	AssignmentExpr	pre -> next = r
>119	Identifier	r
>120	PtrMemberAccess	pre -> next
>121	Identifier	next
>122	Identifier	pre
>123	ExpressionStatement	 
>124	AssignmentExpr	r -> data = c
>125	Identifier	c
>126	PtrMemberAccess	r -> data
>127	Identifier	data
>128	Identifier	r
>129	IdentifierDeclStatement	 
>130	IdentifierDecl	* r = new node ( )
>131	AssignmentExpr	* r = new node ( )
>132	UnaryExpression	new node ( )
>133	Identifier	r
>134	Identifier	r
>135	IdentifierDeclType	node *
>136	Condition	 
>137	RelationalExpression	c > 0
>138	PrimaryExpression	0
>139	Identifier	c
>140	WhileStatement	while ( q )
>141	CompoundStatement	 
>142	ExpressionStatement	 
>143	AssignmentExpr	q = q -> next
>144	PtrMemberAccess	q -> next
>145	Identifier	next
>146	Identifier	q
>147	Identifier	q
>148	ExpressionStatement	 
>149	AssignmentExpr	c = t / 10
>150	MultiplicativeExpression	t / 10
>151	PrimaryExpression	10
>152	Identifier	t
>153	Identifier	c
>154	ExpressionStatement	 
>155	AssignmentExpr	pre = r
>156	Identifier	r
>157	Identifier	pre
>158	ExpressionStatement	 
>159	AssignmentExpr	pre -> next = r
>160	Identifier	r
>161	PtrMemberAccess	pre -> next
>162	Identifier	next
>163	Identifier	pre
>164	ExpressionStatement	 
>165	AssignmentExpr	r -> data = t % 10
>166	MultiplicativeExpression	t % 10
>167	PrimaryExpression	10
>168	Identifier	t
>169	PtrMemberAccess	r -> data
>170	Identifier	data
>171	Identifier	r
>172	IdentifierDeclStatement	 
>173	IdentifierDecl	* r = new node ( )
>174	AssignmentExpr	* r = new node ( )
>175	UnaryExpression	new node ( )
>176	Identifier	r
>177	Identifier	r
>178	IdentifierDeclType	node *
>179	IdentifierDeclStatement	 
>180	IdentifierDecl	t = q -> data + c
>181	AssignmentExpr	t = q -> data + c
>182	AdditiveExpression	q -> data + c
>183	Identifier	c
>184	PtrMemberAccess	q -> data
>185	Identifier	data
>186	Identifier	q
>187	Identifier	t
>188	Identifier	t
>189	IdentifierDeclType	int
>190	Condition	 
>191	Identifier	q
>192	WhileStatement	while ( p )
>193	CompoundStatement	 
>194	ExpressionStatement	 
>195	AssignmentExpr	p = p -> next
>196	PtrMemberAccess	p -> next
>197	Identifier	next
>198	Identifier	p
>199	Identifier	p
>200	ExpressionStatement	 
>201	AssignmentExpr	c = t / 10
>202	MultiplicativeExpression	t / 10
>203	PrimaryExpression	10
>204	Identifier	t
>205	Identifier	c
>206	ExpressionStatement	 
>207	AssignmentExpr	pre = r
>208	Identifier	r
>209	Identifier	pre
>210	ExpressionStatement	 
>211	AssignmentExpr	pre -> next = r
>212	Identifier	r
>213	PtrMemberAccess	pre -> next
>214	Identifier	next
>215	Identifier	pre
>216	ExpressionStatement	 
>217	AssignmentExpr	r -> data = t % 10
>218	MultiplicativeExpression	t % 10
>219	PrimaryExpression	10
>220	Identifier	t
>221	PtrMemberAccess	r -> data
>222	Identifier	data
>223	Identifier	r
>224	IdentifierDeclStatement	 
>225	IdentifierDecl	* r = new node ( )
>226	AssignmentExpr	* r = new node ( )
>227	UnaryExpression	new node ( )
>228	Identifier	r
>229	Identifier	r
>230	IdentifierDeclType	node *
>231	IdentifierDeclStatement	 
>232	IdentifierDecl	t = p -> data + c
>233	AssignmentExpr	t = p -> data + c
>234	AdditiveExpression	p -> data + c
>235	Identifier	c
>236	PtrMemberAccess	p -> data
>237	Identifier	data
>238	Identifier	p
>239	Identifier	t
>240	Identifier	t
>241	IdentifierDeclType	int
>242	Condition	 
>243	Identifier	p
>244	WhileStatement	while ( p && q )
>245	CompoundStatement	 
>246	ExpressionStatement	 
>247	AssignmentExpr	q = q -> next
>248	PtrMemberAccess	q -> next
>249	Identifier	next
>250	Identifier	q
>251	Identifier	q
>252	ExpressionStatement	 
>253	AssignmentExpr	p = p -> next
>254	PtrMemberAccess	p -> next
>255	Identifier	next
>256	Identifier	p
>257	Identifier	p
>258	ExpressionStatement	 
>259	AssignmentExpr	c = t / 10
>260	MultiplicativeExpression	t / 10
>261	PrimaryExpression	10
>262	Identifier	t
>263	Identifier	c
>264	IfStatement	if ( pre )
>265	ElseStatement	else
>266	ExpressionStatement	 
>267	AssignmentExpr	pre = res = r
>268	AssignmentExpr	res = r
>269	Identifier	r
>270	Identifier	res
>271	Identifier	pre
>272	CompoundStatement	 
>273	ExpressionStatement	 
>274	AssignmentExpr	pre = r
>275	Identifier	r
>276	Identifier	pre
>277	ExpressionStatement	 
>278	AssignmentExpr	pre -> next = r
>279	Identifier	r
>280	PtrMemberAccess	pre -> next
>281	Identifier	next
>282	Identifier	pre
>283	Condition	 
>284	Identifier	pre
>285	ExpressionStatement	 
>286	AssignmentExpr	r -> data = t % 10
>287	MultiplicativeExpression	t % 10
>288	PrimaryExpression	10
>289	Identifier	t
>290	PtrMemberAccess	r -> data
>291	Identifier	data
>292	Identifier	r
>293	IdentifierDeclStatement	 
>294	IdentifierDecl	* r = new node ( )
>295	AssignmentExpr	* r = new node ( )
>296	UnaryExpression	new node ( )
>297	Identifier	r
>298	Identifier	r
>299	IdentifierDeclType	node *
>300	IdentifierDeclStatement	 
>301	IdentifierDecl	t = p -> data + q -> data + c
>302	AssignmentExpr	t = p -> data + q -> data + c
>303	AdditiveExpression	p -> data + q -> data + c
>304	AdditiveExpression	q -> data + c
>305	Identifier	c
>306	PtrMemberAccess	q -> data
>307	Identifier	data
>308	Identifier	q
>309	PtrMemberAccess	p -> data
>310	Identifier	data
>311	Identifier	p
>312	Identifier	t
>313	Identifier	t
>314	IdentifierDeclType	int
>315	Condition	 
>316	AndExpression	p && q
>317	Identifier	q
>318	Identifier	p
>319	IdentifierDeclStatement	 
>320	IdentifierDecl	c = 0
>321	AssignmentExpr	c = 0
>322	PrimaryExpression	0
>323	Identifier	c
>324	Identifier	c
>325	IdentifierDeclType	int
>326	IdentifierDeclStatement	 
>327	IdentifierDecl	* pre = NULL
>328	AssignmentExpr	* pre = NULL
>329	Identifier	NULL
>330	Identifier	NULL
>331	Identifier	pre
>332	IdentifierDeclType	node *
>333	IdentifierDecl	* res
>334	Identifier	res
>335	IdentifierDeclType	node *
>336	IfStatement	if ( q == NULL )
>337	ReturnStatement	 
>338	Identifier	p
>339	Condition	 
>340	EqualityExpression	q == NULL
>341	Identifier	NULL
>342	Identifier	q
>343	IfStatement	if ( p == NULL )
>344	ReturnStatement	 
>345	Identifier	q
>346	Condition	 
>347	EqualityExpression	p == NULL
>348	Identifier	NULL
>349	Identifier	p
>371	FunctionDef	print (node * head)
>372	ParameterList	node * head
>373	Parameter	 
>374	Identifier	head
>375	ParameterType	node *
>376	ReturnType	void
>377	CompoundStatement	 
>378	ExpressionStatement	 
>379	ShiftExpression	cout << endl
>380	Identifier	endl
>381	Identifier	cout
>382	WhileStatement	while ( head )
>383	CompoundStatement	 
>384	ExpressionStatement	 
>385	AssignmentExpr	head = head -> next
>386	PtrMemberAccess	head -> next
>387	Identifier	next
>388	Identifier	head
>389	Identifier	head
>390	ExpressionStatement	 
>391	ShiftExpression	cout << head -> data << \" \"
>392	ShiftExpression	head -> data << \" \"
>393	PrimaryExpression	\" \"
>394	PtrMemberAccess	head -> data
>395	Identifier	data
>396	Identifier	head
>397	Identifier	cout
>398	Condition	 
>399	Identifier	head
>406	FunctionDef	main ()
>407	ParameterList	 
>408	ReturnType	int
>409	CompoundStatement	 
>410	ReturnStatement	 
>411	PrimaryExpression	0
>412	IfStatement	if ( res )
>413	ExpressionStatement	 
>414	CallExpression	print ( res )
>415	ArgumentList	res
>416	Argument	res
>417	Identifier	res
>418	Callee	print
>419	Identifier	print
>420	Condition	 
>421	Identifier	res
>422	IfStatement	if ( q )
>423	ExpressionStatement	 
>424	CallExpression	print ( q )
>425	ArgumentList	q
>426	Argument	q
>427	Identifier	q
>428	Callee	print
>429	Identifier	print
>430	Condition	 
>431	Identifier	q
>432	IfStatement	if ( p )
>433	ExpressionStatement	 
>434	CallExpression	print ( p )
>435	ArgumentList	p
>436	Argument	p
>437	Identifier	p
>438	Callee	print
>439	Identifier	print
>440	Condition	 
>441	Identifier	p
>442	IdentifierDeclStatement	 
>443	IdentifierDecl	* res = addlink ( p , q )
>444	AssignmentExpr	* res = addlink ( p , q )
>445	CallExpression	addlink ( p , q )
>446	ArgumentList	p
>447	Argument	q
>448	Identifier	q
>449	Argument	p
>450	Identifier	p
>451	Callee	addlink
>452	Identifier	addlink
>453	Identifier	res
>454	Identifier	res
>455	IdentifierDeclType	node *
>456	IdentifierDeclStatement	 
>457	IdentifierDecl	* q = init ( b , m )
>458	AssignmentExpr	* q = init ( b , m )
>459	CallExpression	init ( b , m )
>460	ArgumentList	b
>461	Argument	m
>462	Identifier	m
>463	Argument	b
>464	Identifier	b
>465	Callee	init
>466	Identifier	init
>467	Identifier	q
>468	Identifier	q
>469	IdentifierDeclType	node *
>470	IdentifierDeclStatement	 
>471	IdentifierDecl	* p = init ( a , n )
>472	AssignmentExpr	* p = init ( a , n )
>473	CallExpression	init ( a , n )
>474	ArgumentList	a
>475	Argument	n
>476	Identifier	n
>477	Argument	a
>478	Identifier	a
>479	Callee	init
>480	Identifier	init
>481	Identifier	p
>482	Identifier	p
>483	IdentifierDeclType	node *
>484	IdentifierDeclStatement	 
>485	IdentifierDecl	b [ ] = { 9 , 9 , 2 }
>486	AssignmentExpr	b [ ] = { 9 , 9 , 2 }
>487	InitializerList	9
>488	PrimaryExpression	2
>489	PrimaryExpression	9
>490	PrimaryExpression	9
>491	Identifier	b
>492	Identifier	b
>493	IdentifierDeclType	int [ ]
>494	IdentifierDeclStatement	 
>495	IdentifierDecl	m = 3
>496	AssignmentExpr	m = 3
>497	PrimaryExpression	3
>498	Identifier	m
>499	Identifier	m
>500	IdentifierDeclType	int
>501	IdentifierDeclStatement	 
>502	IdentifierDecl	a [ ] = { 1 , 2 , 9 , 9 , 3 }
>503	AssignmentExpr	a [ ] = { 1 , 2 , 9 , 9 , 3 }
>504	InitializerList	1
>505	PrimaryExpression	3
>506	PrimaryExpression	9
>507	PrimaryExpression	9
>508	PrimaryExpression	2
>509	PrimaryExpression	1
>510	Identifier	a
>511	Identifier	a
>512	IdentifierDeclType	int [ ]
>513	IdentifierDeclStatement	 
>514	IdentifierDecl	n = 5
>515	AssignmentExpr	n = 5
>516	PrimaryExpression	5
>517	Identifier	n
>518	Identifier	n
>519	IdentifierDeclType	int
<10=19,18,11
<11=15,12
<12=14,13
<15=17,16
<19=77,22,20
<20=21
<22=69,65,62,23
<23=55,47,34,28,24
<24=25
<25=27,26
<28=29
<29=31,30
<31=33,32
<34=43,35
<35=37,36
<37=38
<38=42,39
<39=41,40
<43=44
<44=46,45
<47=48
<48=52,49
<49=51,50
<52=54,53
<55=56
<56=61,60,57
<57=59,58
<62=64,63
<65=66
<66=68,67
<69=70
<70=71
<71=76,75,72
<72=74,73
<77=81,78
<78=80,79
<81=86,85,82
<82=84,83
<103=112,111,104
<104=108,105
<105=107,106
<108=110,109
<112=343,336,326,319,244,192,140,115,113
<113=114
<115=136,116
<116=129,123,117
<117=118
<118=120,119
<120=122,121
<123=124
<124=126,125
<126=128,127
<129=130
<130=135,134,131
<131=133,132
<136=137
<137=139,138
<140=190,141
<141=179,172,164,158,154,148,142
<142=143
<143=147,144
<144=146,145
<148=149
<149=153,150
<150=152,151
<154=155
<155=157,156
<158=159
<159=161,160
<161=163,162
<164=165
<165=169,166
<166=168,167
<169=171,170
<172=173
<173=178,177,174
<174=176,175
<179=180
<180=189,188,181
<181=187,182
<182=184,183
<184=186,185
<190=191
<192=242,193
<193=231,224,216,210,206,200,194
<194=195
<195=199,196
<196=198,197
<200=201
<201=205,202
<202=204,203
<206=207
<207=209,208
<210=211
<211=213,212
<213=215,214
<216=217
<217=221,218
<218=220,219
<221=223,222
<224=225
<225=230,229,226
<226=228,227
<231=232
<232=241,240,233
<233=239,234
<234=236,235
<236=238,237
<242=243
<244=315,245
<245=300,293,285,264,258,252,246
<246=247
<247=251,248
<248=250,249
<252=253
<253=257,254
<254=256,255
<258=259
<259=263,260
<260=262,261
<264=283,272,265
<265=266
<266=267
<267=271,268
<268=270,269
<272=277,273
<273=274
<274=276,275
<277=278
<278=280,279
<280=282,281
<283=284
<285=286
<286=290,287
<287=289,288
<290=292,291
<293=294
<294=299,298,295
<295=297,296
<300=301
<301=314,313,302
<302=312,303
<303=309,304
<304=306,305
<306=308,307
<309=311,310
<315=316
<316=318,317
<319=320
<320=325,324,321
<321=323,322
<326=333,327
<327=332,331,328
<328=330,329
<333=335,334
<336=339,337
<337=338
<339=340
<340=342,341
<343=346,344
<344=345
<346=347
<347=349,348
<371=377,376,372
<372=373
<373=375,374
<377=382,378
<378=379
<379=381,380
<382=398,383
<383=390,384
<384=385
<385=389,386
<386=388,387
<390=391
<391=397,392
<392=394,393
<394=396,395
<398=399
<406=409,408,407
<409=513,501,494,484,470,456,442,432,422,412,410
<410=411
<412=420,413
<413=414
<414=418,415
<415=416
<416=417
<418=419
<420=421
<422=430,423
<423=424
<424=428,425
<425=426
<426=427
<428=429
<430=431
<432=440,433
<433=434
<434=438,435
<435=436
<436=437
<438=439
<440=441
<442=443
<443=455,454,444
<444=453,445
<445=451,446
<446=449,447
<447=448
<449=450
<451=452
<456=457
<457=469,468,458
<458=467,459
<459=465,460
<460=463,461
<461=462
<463=464
<465=466
<470=471
<471=483,482,472
<472=481,473
<473=479,474
<474=477,475
<475=476
<477=478
<479=480
<484=485
<485=493,492,486
<486=491,487
<487=490,489,488
<494=495
<495=500,499,496
<496=498,497
<501=502
<502=512,511,503
<503=510,504
<504=509,508,507,506,505
<513=514
<514=519,518,515
<515=517,516
