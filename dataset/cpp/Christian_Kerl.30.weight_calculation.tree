>7	FunctionDef	TDistributionScaleEstimator 
>8	ParameterList	const float dof
>9	Parameter	 
>10	Identifier	dof
>11	ParameterType	const float
>12	CompoundStatement	 
>13	ExpressionStatement	 
>14	CallExpression	configure ( dof )
>15	ArgumentList	dof
>16	Argument	dof
>17	Identifier	dof
>18	Callee	configure
>19	Identifier	configure
>24	FunctionDef	TDistributionScaleEstimator 
>25	ParameterList	const float & param
>26	Parameter	 
>27	Identifier	param
>28	ParameterType	const float &
>29	ReturnType	void
>30	CompoundStatement	 
>31	ExpressionStatement	 
>32	AssignmentExpr	dof = param
>33	Identifier	param
>34	Identifier	dof
>40	FunctionDef	TDistributionScaleEstimator 
>41	ParameterList	const cv 
>42	Parameter	 
>43	Identifier	errors
>44	ParameterType	const cv 
>45	ReturnType	float
>46	CompoundStatement	 
>47	ReturnStatement	 
>48	CallExpression	std 
>49	ArgumentList	1.0f / lambda
>50	Argument	1.0f / lambda
>51	MultiplicativeExpression	1.0f / lambda
>52	Identifier	lambda
>53	PrimaryExpression	1.0f
>54	Callee	std 
>55	Identifier	std 
>56	DoStatement	do
>57	Condition	 
>58	RelationalExpression	std 
>59	PrimaryExpression	1e-3
>60	CallExpression	std 
>61	ArgumentList	lambda - initial_lamda
>62	Argument	lambda - initial_lamda
>63	AdditiveExpression	lambda - initial_lamda
>64	Identifier	initial_lamda
>65	Identifier	lambda
>66	Callee	std 
>67	Identifier	std 
>68	CompoundStatement	 
>69	ExpressionStatement	 
>70	AssignmentExpr	lambda = 1.0f / lambda
>71	MultiplicativeExpression	1.0f / lambda
>72	Identifier	lambda
>73	PrimaryExpression	1.0f
>74	Identifier	lambda
>75	ExpressionStatement	 
>76	AssignmentExpr	lambda /= num
>77	Identifier	num
>78	Identifier	lambda
>79	ForStatement	for ( size_t idx = 0 ; idx < errors . size ( ) . area ( ) ; ++ idx , ++ data_ptr )
>80	CompoundStatement	 
>81	IfStatement	if ( std 
>82	CompoundStatement	 
>83	ExpressionStatement	 
>84	AssignmentExpr	lambda += data * data * ( ( dof + 1.0f ) / ( dof + initial_lamda * data * data ) )
>85	MultiplicativeExpression	data * data * ( ( dof + 1.0f ) / ( dof + initial_lamda * data * data ) )
>86	MultiplicativeExpression	data * ( ( dof + 1.0f ) / ( dof + initial_lamda * data * data ) )
>87	MultiplicativeExpression	( dof + 1.0f ) / ( dof + initial_lamda * data * data )
>88	AdditiveExpression	dof + initial_lamda * data * data
>89	MultiplicativeExpression	initial_lamda * data * data
>90	MultiplicativeExpression	data * data
>91	Identifier	data
>92	Identifier	data
>93	Identifier	initial_lamda
>94	Identifier	dof
>95	AdditiveExpression	dof + 1.0f
>96	PrimaryExpression	1.0f
>97	Identifier	dof
>98	Identifier	data
>99	Identifier	data
>100	Identifier	lambda
>101	ExpressionStatement	 
>102	AssignmentExpr	num += 1.0f
>103	PrimaryExpression	1.0f
>104	Identifier	num
>105	Condition	 
>106	CallExpression	std 
>107	ArgumentList	data
>108	Argument	data
>109	Identifier	data
>110	Callee	std 
>111	Identifier	std 
>112	IdentifierDeclStatement	 
>113	IdentifierDecl	& data = * data_ptr
>114	AssignmentExpr	& data = * data_ptr
>115	UnaryOp	* data_ptr
>116	Identifier	data_ptr
>117	UnaryOperator	*
>118	Identifier	data
>119	Identifier	data
>120	IdentifierDeclType	const float &
>121	Expression	 
>122	UnaryExpression	++ data_ptr
>123	Identifier	data_ptr
>124	IncDec	++
>125	UnaryExpression	++ idx
>126	Identifier	idx
>127	IncDec	++
>128	Condition	 
>129	RelationalExpression	idx < errors . size ( ) . area ( )
>130	CallExpression	errors . size ( ) . area ( )
>131	ArgumentList	 
>132	Callee	errors . size ( ) . area
>133	MemberAccess	errors . size ( ) . area
>134	Identifier	area
>135	CallExpression	errors . size ( )
>136	ArgumentList	 
>137	Callee	errors . size
>138	MemberAccess	errors . size
>139	Identifier	size
>140	Identifier	errors
>141	Identifier	idx
>142	ForInit	 
>143	IdentifierDeclStatement	size_t idx = 0 ;
>144	IdentifierDecl	idx = 0
>145	AssignmentExpr	idx = 0
>146	PrimaryExpression	0
>147	Identifier	idx
>148	Identifier	idx
>149	IdentifierDeclType	size_t
>150	ExpressionStatement	 
>151	Statement	 
>152	Statement	 
>153	Statement	 
>154	Statement	 
>155	Statement	 
>156	Statement	 
>157	Statement	 
>158	Statement	 
>159	Statement	 
>160	Statement	 
>161	Statement	 
>162	Statement	 
>163	Statement	 
>164	ExpressionStatement	 
>165	AssignmentExpr	lambda = 0.0f
>166	PrimaryExpression	0.0f
>167	Identifier	lambda
>168	ExpressionStatement	 
>169	AssignmentExpr	initial_lamda = lambda
>170	Identifier	lambda
>171	Identifier	initial_lamda
>172	ExpressionStatement	 
>173	AssignmentExpr	num = 0.0f
>174	PrimaryExpression	0.0f
>175	Identifier	num
>176	ExpressionStatement	 
>177	AssignmentExpr	iterations += 1
>178	PrimaryExpression	1
>179	Identifier	iterations
>180	IdentifierDeclStatement	 
>181	IdentifierDecl	iterations = 0
>182	AssignmentExpr	iterations = 0
>183	PrimaryExpression	0
>184	Identifier	iterations
>185	Identifier	iterations
>186	IdentifierDeclType	int
>187	IdentifierDeclStatement	 
>188	IdentifierDecl	lambda = initial_lamda
>189	AssignmentExpr	lambda = initial_lamda
>190	Identifier	initial_lamda
>191	Identifier	initial_lamda
>192	Identifier	lambda
>193	IdentifierDeclType	float
>194	IdentifierDeclStatement	 
>195	IdentifierDecl	num = 0.0f
>196	AssignmentExpr	num = 0.0f
>197	PrimaryExpression	0.0f
>198	Identifier	num
>199	Identifier	num
>200	IdentifierDeclType	float
>201	IdentifierDeclStatement	 
>202	IdentifierDecl	initial_lamda = 1.0f / ( initial_sigma * initial_sigma )
>203	AssignmentExpr	initial_lamda = 1.0f / ( initial_sigma * initial_sigma )
>204	MultiplicativeExpression	1.0f / ( initial_sigma * initial_sigma )
>205	MultiplicativeExpression	initial_sigma * initial_sigma
>206	Identifier	initial_sigma
>207	Identifier	initial_sigma
>208	PrimaryExpression	1.0f
>209	Identifier	initial_lamda
>210	Identifier	initial_lamda
>211	IdentifierDeclType	float
>232	FunctionDef	TDistributionScaleReduction (const float * data , const float initial_lambda , const float dof)
>233	ParameterList	const float * data , const float initial_lambda , const float dof
>234	Parameter	 
>235	Identifier	dof
>236	ParameterType	const float
>237	Parameter	 
>238	Identifier	initial_lambda
>239	ParameterType	const float
>240	Parameter	 
>241	Identifier	data
>242	ParameterType	const float *
>243	CompoundStatement	 
>250	FunctionDef	operator ( ) (const tbb 
>251	ParameterList	const tbb 
>252	Parameter	 
>253	Identifier	r
>254	ParameterType	const tbb 
>255	ReturnType	void
>256	CompoundStatement	 
>257	ExpressionStatement	 
>258	AssignmentExpr	lambda = tmplambda
>259	Identifier	tmplambda
>260	Identifier	lambda
>261	ExpressionStatement	 
>262	AssignmentExpr	num = tmpnum
>263	Identifier	tmpnum
>264	Identifier	num
>265	ForStatement	for ( size_t idx = r . begin ( ) ; idx != r . end ( ) ; ++ idx , ++ data_ptr )
>266	CompoundStatement	 
>267	IfStatement	if ( std 
>268	CompoundStatement	 
>269	ExpressionStatement	 
>270	AssignmentExpr	tmplambda += data * data * ( ( dof + 1.0f ) / ( dof + initial_lambda * data * data ) )
>271	MultiplicativeExpression	data * data * ( ( dof + 1.0f ) / ( dof + initial_lambda * data * data ) )
>272	MultiplicativeExpression	data * ( ( dof + 1.0f ) / ( dof + initial_lambda * data * data ) )
>273	MultiplicativeExpression	( dof + 1.0f ) / ( dof + initial_lambda * data * data )
>274	AdditiveExpression	dof + initial_lambda * data * data
>275	MultiplicativeExpression	initial_lambda * data * data
>276	MultiplicativeExpression	data * data
>277	Identifier	data
>278	Identifier	data
>279	Identifier	initial_lambda
>280	Identifier	dof
>281	AdditiveExpression	dof + 1.0f
>282	PrimaryExpression	1.0f
>283	Identifier	dof
>284	Identifier	data
>285	Identifier	data
>286	Identifier	tmplambda
>287	ExpressionStatement	 
>288	AssignmentExpr	tmpnum += 1.0f
>289	PrimaryExpression	1.0f
>290	Identifier	tmpnum
>291	Condition	 
>292	CallExpression	std 
>293	ArgumentList	data
>294	Argument	data
>295	Identifier	data
>296	Callee	std 
>297	Identifier	std 
>298	IdentifierDeclStatement	 
>299	IdentifierDecl	& data = * data_ptr
>300	AssignmentExpr	& data = * data_ptr
>301	UnaryOp	* data_ptr
>302	Identifier	data_ptr
>303	UnaryOperator	*
>304	Identifier	data
>305	Identifier	data
>306	IdentifierDeclType	const float &
>307	Expression	 
>308	UnaryExpression	++ data_ptr
>309	Identifier	data_ptr
>310	IncDec	++
>311	UnaryExpression	++ idx
>312	Identifier	idx
>313	IncDec	++
>314	Condition	 
>315	EqualityExpression	idx != r . end ( )
>316	CallExpression	r . end ( )
>317	ArgumentList	 
>318	Callee	r . end
>319	MemberAccess	r . end
>320	Identifier	end
>321	Identifier	r
>322	Identifier	idx
>323	ForInit	 
>324	IdentifierDeclStatement	size_t idx = r . begin ( ) ;
>325	IdentifierDecl	idx = r . begin ( )
>326	AssignmentExpr	idx = r . begin ( )
>327	CallExpression	r . begin ( )
>328	ArgumentList	 
>329	Callee	r . begin
>330	MemberAccess	r . begin
>331	Identifier	begin
>332	Identifier	r
>333	Identifier	idx
>334	Identifier	idx
>335	IdentifierDeclType	size_t
>336	IdentifierDeclStatement	 
>337	IdentifierDecl	tmplambda = lambda
>338	AssignmentExpr	tmplambda = lambda
>339	Identifier	lambda
>340	Identifier	lambda
>341	Identifier	tmplambda
>342	IdentifierDeclType	float
>343	IdentifierDecl	tmpnum = num
>344	AssignmentExpr	tmpnum = num
>345	Identifier	num
>346	Identifier	num
>347	Identifier	tmpnum
>348	IdentifierDeclType	float
>349	IdentifierDeclStatement	 
>350	IdentifierDecl	* data_ptr = data + r . begin ( )
>351	AssignmentExpr	* data_ptr = data + r . begin ( )
>352	AdditiveExpression	data + r . begin ( )
>353	CallExpression	r . begin ( )
>354	ArgumentList	 
>355	Callee	r . begin
>356	MemberAccess	r . begin
>357	Identifier	begin
>358	Identifier	r
>359	Identifier	data
>360	Identifier	data_ptr
>361	Identifier	data_ptr
>362	IdentifierDeclType	const float *
>380	FunctionDef	join (TDistributionScaleReduction & other)
>381	ParameterList	TDistributionScaleReduction & other
>382	Parameter	 
>383	Identifier	other
>384	ParameterType	TDistributionScaleReduction &
>385	ReturnType	void
>386	CompoundStatement	 
>387	ExpressionStatement	 
>388	AssignmentExpr	lambda += other . lambda
>389	MemberAccess	other . lambda
>390	Identifier	lambda
>391	Identifier	other
>392	Identifier	lambda
>393	ExpressionStatement	 
>394	AssignmentExpr	num += other . num
>395	MemberAccess	other . num
>396	Identifier	num
>397	Identifier	other
>398	Identifier	num
>414	FunctionDef	OptimizedTDistributionScaleEstimator 
>415	ParameterList	const float dof
>416	Parameter	 
>417	Identifier	dof
>418	ParameterType	const float
>419	CompoundStatement	 
>424	FunctionDef	OptimizedTDistributionScaleEstimator 
>425	ParameterList	const cv 
>426	Parameter	 
>427	Identifier	errors
>428	ParameterType	const cv 
>429	ReturnType	float
>430	CompoundStatement	 
>431	ReturnStatement	 
>432	CallExpression	std 
>433	ArgumentList	1.0f / lambda
>434	Argument	1.0f / lambda
>435	MultiplicativeExpression	1.0f / lambda
>436	Identifier	lambda
>437	PrimaryExpression	1.0f
>438	Callee	std 
>439	Identifier	std 
>440	DoStatement	do
>441	Condition	 
>442	RelationalExpression	std 
>443	PrimaryExpression	1e-3
>444	CallExpression	std 
>445	ArgumentList	lambda - initial_lamda
>446	Argument	lambda - initial_lamda
>447	AdditiveExpression	lambda - initial_lamda
>448	Identifier	initial_lamda
>449	Identifier	lambda
>450	Callee	std 
>451	Identifier	std 
>452	CompoundStatement	 
>453	ExpressionStatement	 
>454	AssignmentExpr	lambda = 1.0f / lambda
>455	MultiplicativeExpression	1.0f / lambda
>456	Identifier	lambda
>457	PrimaryExpression	1.0f
>458	Identifier	lambda
>459	ExpressionStatement	 
>460	AssignmentExpr	lambda = body . lambda / body . num
>461	MultiplicativeExpression	body . lambda / body . num
>462	MemberAccess	body . num
>463	Identifier	num
>464	Identifier	body
>465	MemberAccess	body . lambda
>466	Identifier	lambda
>467	Identifier	body
>468	Identifier	lambda
>469	ExpressionStatement	 
>470	CallExpression	tbb 
>471	ArgumentList	tbb 
>472	Argument	body
>473	Identifier	body
>474	Argument	tbb 
>475	RelationalExpression	tbb 
>476	RelationalExpression	size_t > ( 0 , errors . size ( ) . area ( ) )
>477	Expression	0 , errors . size ( ) . area ( )
>478	CallExpression	errors . size ( ) . area ( )
>479	ArgumentList	 
>480	Callee	errors . size ( ) . area
>481	MemberAccess	errors . size ( ) . area
>482	Identifier	area
>483	CallExpression	errors . size ( )
>484	ArgumentList	 
>485	Callee	errors . size
>486	MemberAccess	errors . size
>487	Identifier	size
>488	Identifier	errors
>489	PrimaryExpression	0
>490	Identifier	size_t
>491	Identifier	tbb 
>492	Callee	tbb 
>493	Identifier	tbb 
>494	ExpressionStatement	 
>495	Statement	 
>496	Statement	 
>497	Statement	 
>498	Statement	 
>499	Statement	 
>500	Statement	 
>501	Statement	 
>502	Statement	 
>503	Statement	 
>504	Statement	 
>505	Statement	 
>506	Statement	 
>507	Statement	 
>508	Statement	 
>509	Statement	 
>510	Statement	 
>511	ExpressionStatement	 
>512	AssignmentExpr	initial_lamda = lambda
>513	Identifier	lambda
>514	Identifier	initial_lamda
>515	IdentifierDeclStatement	 
>516	IdentifierDecl	lambda = 1.0f / ( initial_sigma * initial_sigma )
>517	AssignmentExpr	lambda = 1.0f / ( initial_sigma * initial_sigma )
>518	MultiplicativeExpression	1.0f / ( initial_sigma * initial_sigma )
>519	MultiplicativeExpression	initial_sigma * initial_sigma
>520	Identifier	initial_sigma
>521	Identifier	initial_sigma
>522	PrimaryExpression	1.0f
>523	Identifier	lambda
>524	Identifier	lambda
>525	IdentifierDeclType	float
>526	IdentifierDecl	initial_lamda
>527	Identifier	initial_lamda
>528	IdentifierDeclType	float
>545	FunctionDef	ApproximateTDistributionScaleEstimator 
>546	ParameterList	const float dof
>547	Parameter	 
>548	Identifier	dof
>549	ParameterType	const float
>550	CompoundStatement	 
>555	FunctionDef	ApproximateTDistributionScaleEstimator 
>556	ParameterList	const cv 
>557	Parameter	 
>558	Identifier	errors
>559	ParameterType	const cv 
>560	ReturnType	float
>561	CompoundStatement	 
>562	ReturnStatement	 
>563	CallExpression	std 
>564	ArgumentList	std 
>565	Argument	std 
>566	CallExpression	std 
>567	ArgumentList	z + 1.05722875
>568	Argument	z + 1.05722875
>569	AdditiveExpression	z + 1.05722875
>570	PrimaryExpression	1.05722875
>571	Identifier	z
>572	Callee	std 
>573	Identifier	std 
>574	Callee	std 
>575	Identifier	std 
>576	IdentifierDeclStatement	 
>577	IdentifierDecl	z = sum ( 0 ) / double ( errors . size ( ) . area ( ) - invalid )
>578	AssignmentExpr	z = sum ( 0 ) / double ( errors . size ( ) . area ( ) - invalid )
>579	MultiplicativeExpression	sum ( 0 ) / double ( errors . size ( ) . area ( ) - invalid )
>580	CallExpression	double ( errors . size ( ) . area ( ) - invalid )
>581	ArgumentList	errors . size ( ) . area ( ) - invalid
>582	Argument	errors . size ( ) . area ( ) - invalid
>583	AdditiveExpression	errors . size ( ) . area ( ) - invalid
>584	Identifier	invalid
>585	CallExpression	errors . size ( ) . area ( )
>586	ArgumentList	 
>587	Callee	errors . size ( ) . area
>588	MemberAccess	errors . size ( ) . area
>589	Identifier	area
>590	CallExpression	errors . size ( )
>591	ArgumentList	 
>592	Callee	errors . size
>593	MemberAccess	errors . size
>594	Identifier	size
>595	Identifier	errors
>596	Callee	double
>597	Identifier	double
>598	CallExpression	sum ( 0 )
>599	ArgumentList	0
>600	Argument	0
>601	PrimaryExpression	0
>602	Callee	sum
>603	Identifier	sum
>604	Identifier	z
>605	Identifier	z
>606	IdentifierDeclType	double
>607	IdentifierDeclStatement	 
>608	IdentifierDecl	invalid = cv 
>609	AssignmentExpr	invalid = cv 
>610	CallExpression	cv 
>611	ArgumentList	mask
>612	Argument	mask
>613	Identifier	mask
>614	Callee	cv 
>615	Identifier	cv 
>616	Identifier	invalid
>617	Identifier	invalid
>618	IdentifierDeclType	int
>619	IdentifierDeclStatement	 
>620	IdentifierDecl	sum = cv 
>621	AssignmentExpr	sum = cv 
>622	CallExpression	cv 
>623	ArgumentList	log_square_error
>624	Argument	log_square_error
>625	Identifier	log_square_error
>626	Callee	cv 
>627	Identifier	cv 
>628	Identifier	sum
>629	Identifier	sum
>630	IdentifierDeclType	cv 
>631	ExpressionStatement	 
>632	CallExpression	cv 
>633	ArgumentList	error_copy . mul ( error_copy )
>634	Argument	log_square_error
>635	Identifier	log_square_error
>636	Argument	error_copy . mul ( error_copy )
>637	CallExpression	error_copy . mul ( error_copy )
>638	ArgumentList	error_copy
>639	Argument	error_copy
>640	Identifier	error_copy
>641	Callee	error_copy . mul
>642	MemberAccess	error_copy . mul
>643	Identifier	mul
>644	Identifier	error_copy
>645	Callee	cv 
>646	Identifier	cv 
>647	IdentifierDeclStatement	 
>648	IdentifierDecl	log_square_error
>649	Identifier	log_square_error
>650	IdentifierDeclType	cv 
>651	ExpressionStatement	 
>652	CallExpression	error_copy . setTo ( 1 , mask )
>653	ArgumentList	1
>654	Argument	mask
>655	Identifier	mask
>656	Argument	1
>657	PrimaryExpression	1
>658	Callee	error_copy . setTo
>659	MemberAccess	error_copy . setTo
>660	Identifier	setTo
>661	Identifier	error_copy
>662	IdentifierDeclStatement	 
>663	IdentifierDecl	error_copy = errors . clone ( )
>664	AssignmentExpr	error_copy = errors . clone ( )
>665	CallExpression	errors . clone ( )
>666	ArgumentList	 
>667	Callee	errors . clone
>668	MemberAccess	errors . clone
>669	Identifier	clone
>670	Identifier	errors
>671	Identifier	error_copy
>672	Identifier	error_copy
>673	IdentifierDeclType	cv 
>674	IdentifierDeclStatement	 
>675	IdentifierDecl	mask = errors != errors
>676	AssignmentExpr	mask = errors != errors
>677	EqualityExpression	errors != errors
>678	Identifier	errors
>679	Identifier	errors
>680	Identifier	mask
>681	Identifier	mask
>682	IdentifierDeclType	cv 
>702	FunctionDef	MADScaleEstimator 
>703	ParameterList	 
>704	CompoundStatement	 
>708	FunctionDef	MADScaleEstimator 
>709	ParameterList	const cv 
>710	Parameter	 
>711	Identifier	errors
>712	ParameterType	const cv 
>713	ReturnType	float
>714	CompoundStatement	 
>715	ReturnStatement	 
>716	MultiplicativeExpression	NORMALIZER * median
>717	Identifier	median
>718	Identifier	NORMALIZER
>719	ExpressionStatement	 
>720	AssignmentExpr	median = dvo 
>721	CallExpression	dvo 
>722	ArgumentList	error_hist
>723	Argument	255
>724	PrimaryExpression	255
>725	Argument	0
>726	PrimaryExpression	0
>727	Argument	error_hist
>728	Identifier	error_hist
>729	Callee	dvo 
>730	Identifier	dvo 
>731	Identifier	median
>732	ExpressionStatement	 
>733	CallExpression	dvo 
>734	ArgumentList	abs_error
>735	Argument	1
>736	PrimaryExpression	1
>737	Argument	255
>738	PrimaryExpression	255
>739	Argument	0
>740	PrimaryExpression	0
>741	Argument	error_hist
>742	Identifier	error_hist
>743	Argument	abs_error
>744	Identifier	abs_error
>745	Callee	dvo 
>746	Identifier	dvo 
>747	ExpressionStatement	 
>748	AssignmentExpr	abs_error = cv 
>749	CallExpression	cv 
>750	ArgumentList	errors
>751	Argument	errors
>752	Identifier	errors
>753	Callee	cv 
>754	Identifier	cv 
>755	Identifier	abs_error
>756	IdentifierDeclStatement	 
>757	IdentifierDecl	median
>758	Identifier	median
>759	IdentifierDeclType	float
>760	IdentifierDeclStatement	 
>761	IdentifierDecl	abs_error
>762	Identifier	abs_error
>763	IdentifierDeclType	cv 
>764	IdentifierDecl	error_median_absdiff
>765	Identifier	error_median_absdiff
>766	IdentifierDeclType	cv 
>767	IdentifierDecl	error_hist
>768	Identifier	error_hist
>769	IdentifierDeclType	cv 
>783	FunctionDef	NormalDistributionScaleEstimator 
>784	ParameterList	 
>785	CompoundStatement	 
>789	FunctionDef	NormalDistributionScaleEstimator 
>790	ParameterList	const cv 
>791	Parameter	 
>792	Identifier	errors
>793	ParameterType	const cv 
>794	ReturnType	float
>795	CompoundStatement	 
>796	ReturnStatement	 
>797	RelationalExpression	( float ) stddev . at < double > ( 0 , 0 )
>798	RelationalExpression	double > ( 0 , 0 )
>799	Expression	0 , 0
>800	PrimaryExpression	0
>801	PrimaryExpression	0
>802	Identifier	double
>803	CastExpression	( float ) stddev . at
>804	MemberAccess	stddev . at
>805	Identifier	at
>806	Identifier	stddev
>807	CastTarget	float
>808	ExpressionStatement	 
>809	CallExpression	cv 
>810	ArgumentList	errors
>811	Argument	mask
>812	Identifier	mask
>813	Argument	stddev
>814	Identifier	stddev
>815	Argument	mean
>816	Identifier	mean
>817	Argument	errors
>818	Identifier	errors
>819	Callee	cv 
>820	Identifier	cv 
>821	ExpressionStatement	 
>822	AssignmentExpr	mask = ( errors == errors )
>823	EqualityExpression	errors == errors
>824	Identifier	errors
>825	Identifier	errors
>826	Identifier	mask
>827	IdentifierDeclStatement	 
>828	IdentifierDecl	mask
>829	Identifier	mask
>830	IdentifierDeclType	cv 
>831	IdentifierDecl	stddev
>832	Identifier	stddev
>833	IdentifierDeclType	cv 
>834	IdentifierDecl	mean
>835	Identifier	mean
>836	IdentifierDeclType	cv 
>846	FunctionDef	ScaleEstimators 
>847	ParameterList	enum_t type
>848	Parameter	 
>849	Identifier	type
>850	ParameterType	enum_t
>851	ReturnType	const char *
>852	CompoundStatement	 
>853	ReturnStatement	 
>854	PrimaryExpression	\"\"
>855	ExpressionStatement	 
>856	CallExpression	assert ( false && \"Unknown scale estimator type!\" )
>857	ArgumentList	false && \"Unknown scale estimator type!\"
>858	Argument	false && \"Unknown scale estimator type!\"
>859	AndExpression	false && \"Unknown scale estimator type!\"
>860	PrimaryExpression	\"Unknown scale estimator type!\"
>861	Identifier	false
>862	Callee	assert
>863	Identifier	assert
>864	SwitchStatement	switch ( type )
>865	CompoundStatement	 
>866	BreakStatement	 
>867	Label	 
>868	Identifier	default
>869	ReturnStatement	 
>870	PrimaryExpression	\"NormalDistribution\"
>871	Label	 
>872	Identifier	ScaleEstimators 
>873	ReturnStatement	 
>874	PrimaryExpression	\"MAD\"
>875	Label	 
>876	Identifier	ScaleEstimators 
>877	ReturnStatement	 
>878	PrimaryExpression	\"TDistribution\"
>879	Label	 
>880	Identifier	ScaleEstimators 
>881	ReturnStatement	 
>882	PrimaryExpression	\"Unit\"
>883	Label	 
>884	Identifier	ScaleEstimators 
>885	Condition	 
>886	Identifier	type
>892	FunctionDef	ScaleEstimators 
>893	ParameterList	ScaleEstimators 
>894	Parameter	 
>895	Identifier	type
>896	ParameterType	ScaleEstimators 
>897	ReturnType	ScaleEstimator *
>898	CompoundStatement	 
>899	ReturnStatement	 
>900	PrimaryExpression	0
>901	ExpressionStatement	 
>902	CallExpression	assert ( false && \"Unknown scale estimator type!\" )
>903	ArgumentList	false && \"Unknown scale estimator type!\"
>904	Argument	false && \"Unknown scale estimator type!\"
>905	AndExpression	false && \"Unknown scale estimator type!\"
>906	PrimaryExpression	\"Unknown scale estimator type!\"
>907	Identifier	false
>908	Callee	assert
>909	Identifier	assert
>910	SwitchStatement	switch ( type )
>911	CompoundStatement	 
>912	BreakStatement	 
>913	Label	 
>914	Identifier	default
>915	ReturnStatement	 
>916	CastExpression	( ScaleEstimator * ) & normaldistribution
>917	UnaryOp	& normaldistribution
>918	Identifier	normaldistribution
>919	UnaryOperator	&
>920	CastTarget	ScaleEstimator *
>921	Label	 
>922	Identifier	ScaleEstimators 
>923	ReturnStatement	 
>924	CastExpression	( ScaleEstimator * ) & mad
>925	UnaryOp	& mad
>926	Identifier	mad
>927	UnaryOperator	&
>928	CastTarget	ScaleEstimator *
>929	Label	 
>930	Identifier	ScaleEstimators 
>931	ReturnStatement	 
>932	CastExpression	( ScaleEstimator * ) & tdistribution
>933	UnaryOp	& tdistribution
>934	Identifier	tdistribution
>935	UnaryOperator	&
>936	CastTarget	ScaleEstimator *
>937	Label	 
>938	Identifier	ScaleEstimators 
>939	ReturnStatement	 
>940	CastExpression	( ScaleEstimator * ) & unit
>941	UnaryOp	& unit
>942	Identifier	unit
>943	UnaryOperator	&
>944	CastTarget	ScaleEstimator *
>945	Label	 
>946	Identifier	ScaleEstimators 
>947	Condition	 
>948	Identifier	type
>949	IdentifierDeclStatement	 
>950	IdentifierDecl	unit
>951	Identifier	unit
>952	IdentifierDeclType	UnitScaleEstimator
>953	Statement	 
>954	IdentifierDeclStatement	 
>955	IdentifierDecl	normaldistribution
>956	Identifier	normaldistribution
>957	IdentifierDeclType	NormalDistributionScaleEstimator
>958	Statement	 
>959	IdentifierDeclStatement	 
>960	IdentifierDecl	mad
>961	Identifier	mad
>962	IdentifierDeclType	MADScaleEstimator
>963	Statement	 
>964	IdentifierDeclStatement	 
>965	IdentifierDecl	tdistribution
>966	Identifier	tdistribution
>967	IdentifierDeclType	OptimizedTDistributionScaleEstimator
>968	Statement	 
>984	FunctionDef	TukeyInfluenceFunction 
>985	ParameterList	const float b
>986	Parameter	 
>987	Identifier	b
>988	ParameterType	const float
>989	CompoundStatement	 
>990	ExpressionStatement	 
>991	CallExpression	configure ( b )
>992	ArgumentList	b
>993	Argument	b
>994	Identifier	b
>995	Callee	configure
>996	Identifier	configure
>1001	FunctionDef	TukeyInfluenceFunction 
>1002	ParameterList	const float & x
>1003	Parameter	 
>1004	Identifier	x
>1005	ParameterType	const float &
>1006	ReturnType	inline float
>1007	CompoundStatement	 
>1008	IfStatement	if ( x_square <= b_square )
>1009	ElseStatement	else
>1010	CompoundStatement	 
>1011	ReturnStatement	 
>1012	PrimaryExpression	0.0f
>1013	CompoundStatement	 
>1014	ReturnStatement	 
>1015	MultiplicativeExpression	tmp * tmp
>1016	Identifier	tmp
>1017	Identifier	tmp
>1018	IdentifierDeclStatement	 
>1019	IdentifierDecl	tmp = 1.0f - x_square / b_square
>1020	AssignmentExpr	tmp = 1.0f - x_square / b_square
>1021	AdditiveExpression	1.0f - x_square / b_square
>1022	MultiplicativeExpression	x_square / b_square
>1023	Identifier	b_square
>1024	Identifier	x_square
>1025	PrimaryExpression	1.0f
>1026	Identifier	tmp
>1027	Identifier	tmp
>1028	IdentifierDeclType	const float
>1029	Condition	 
>1030	RelationalExpression	x_square <= b_square
>1031	Identifier	b_square
>1032	Identifier	x_square
>1033	IdentifierDeclStatement	 
>1034	IdentifierDecl	x_square = x * x
>1035	AssignmentExpr	x_square = x * x
>1036	MultiplicativeExpression	x * x
>1037	Identifier	x
>1038	Identifier	x
>1039	Identifier	x_square
>1040	Identifier	x_square
>1041	IdentifierDeclType	const float
>1049	FunctionDef	TukeyInfluenceFunction 
>1050	ParameterList	const float & param
>1051	Parameter	 
>1052	Identifier	param
>1053	ParameterType	const float &
>1054	ReturnType	void
>1055	CompoundStatement	 
>1056	ExpressionStatement	 
>1057	AssignmentExpr	b_square = param * param
>1058	MultiplicativeExpression	param * param
>1059	Identifier	param
>1060	Identifier	param
>1061	Identifier	b_square
>1069	FunctionDef	TDistributionInfluenceFunction 
>1070	ParameterList	const float dof
>1071	Parameter	 
>1072	Identifier	dof
>1073	ParameterType	const float
>1074	CompoundStatement	 
>1075	ExpressionStatement	 
>1076	CallExpression	configure ( dof )
>1077	ArgumentList	dof
>1078	Argument	dof
>1079	Identifier	dof
>1080	Callee	configure
>1081	Identifier	configure
>1086	FunctionDef	TDistributionInfluenceFunction 
>1087	ParameterList	const float & x
>1088	Parameter	 
>1089	Identifier	x
>1090	ParameterType	const float &
>1091	ReturnType	inline float
>1092	CompoundStatement	 
>1093	ReturnStatement	 
>1094	MultiplicativeExpression	( dof + 1.0f ) / ( dof + ( x * x ) )
>1095	AdditiveExpression	dof + ( x * x )
>1096	MultiplicativeExpression	x * x
>1097	Identifier	x
>1098	Identifier	x
>1099	Identifier	dof
>1100	AdditiveExpression	dof + 1.0f
>1101	PrimaryExpression	1.0f
>1102	Identifier	dof
>1108	FunctionDef	TDistributionInfluenceFunction 
>1109	ParameterList	const float & param
>1110	Parameter	 
>1111	Identifier	param
>1112	ParameterType	const float &
>1113	ReturnType	void
>1114	CompoundStatement	 
>1115	ExpressionStatement	 
>1116	AssignmentExpr	normalizer = dof / ( dof + 1.0f )
>1117	MultiplicativeExpression	dof / ( dof + 1.0f )
>1118	AdditiveExpression	dof + 1.0f
>1119	PrimaryExpression	1.0f
>1120	Identifier	dof
>1121	Identifier	dof
>1122	Identifier	normalizer
>1123	ExpressionStatement	 
>1124	AssignmentExpr	dof = param
>1125	Identifier	param
>1126	Identifier	dof
>1135	FunctionDef	HuberInfluenceFunction 
>1136	ParameterList	const float k
>1137	Parameter	 
>1138	Identifier	k
>1139	ParameterType	const float
>1140	CompoundStatement	 
>1141	ExpressionStatement	 
>1142	CallExpression	configure ( k )
>1143	ArgumentList	k
>1144	Argument	k
>1145	Identifier	k
>1146	Callee	configure
>1147	Identifier	configure
>1152	FunctionDef	HuberInfluenceFunction 
>1153	ParameterList	const float & x
>1154	Parameter	 
>1155	Identifier	x
>1156	ParameterType	const float &
>1157	ReturnType	inline float
>1158	CompoundStatement	 
>1159	IfStatement	if ( x_abs < k )
>1160	ElseStatement	else
>1161	CompoundStatement	 
>1162	ReturnStatement	 
>1163	MultiplicativeExpression	k / x_abs
>1164	Identifier	x_abs
>1165	Identifier	k
>1166	CompoundStatement	 
>1167	ReturnStatement	 
>1168	PrimaryExpression	1.0f
>1169	Condition	 
>1170	RelationalExpression	x_abs < k
>1171	Identifier	k
>1172	Identifier	x_abs
>1173	IdentifierDeclStatement	 
>1174	IdentifierDecl	x_abs = std 
>1175	AssignmentExpr	x_abs = std 
>1176	CallExpression	std 
>1177	ArgumentList	x
>1178	Argument	x
>1179	Identifier	x
>1180	Callee	std 
>1181	Identifier	std 
>1182	Identifier	x_abs
>1183	Identifier	x_abs
>1184	IdentifierDeclType	const float
>1192	FunctionDef	HuberInfluenceFunction 
>1193	ParameterList	const float & param
>1194	Parameter	 
>1195	Identifier	param
>1196	ParameterType	const float &
>1197	ReturnType	void
>1198	CompoundStatement	 
>1199	ExpressionStatement	 
>1200	AssignmentExpr	k = param
>1201	Identifier	param
>1202	Identifier	k
>1208	FunctionDef	InfluenceFunctions 
>1209	ParameterList	enum_t type
>1210	Parameter	 
>1211	Identifier	type
>1212	ParameterType	enum_t
>1213	ReturnType	const char *
>1214	CompoundStatement	 
>1215	ReturnStatement	 
>1216	PrimaryExpression	\"\"
>1217	ExpressionStatement	 
>1218	CallExpression	assert ( false && \"Unknown influence function type!\" )
>1219	ArgumentList	false && \"Unknown influence function type!\"
>1220	Argument	false && \"Unknown influence function type!\"
>1221	AndExpression	false && \"Unknown influence function type!\"
>1222	PrimaryExpression	\"Unknown influence function type!\"
>1223	Identifier	false
>1224	Callee	assert
>1225	Identifier	assert
>1226	SwitchStatement	switch ( type )
>1227	CompoundStatement	 
>1228	BreakStatement	 
>1229	Label	 
>1230	Identifier	default
>1231	ReturnStatement	 
>1232	PrimaryExpression	\"Huber\"
>1233	Label	 
>1234	Identifier	InfluenceFunctions 
>1235	ReturnStatement	 
>1236	PrimaryExpression	\"Tukey\"
>1237	Label	 
>1238	Identifier	InfluenceFunctions 
>1239	ReturnStatement	 
>1240	PrimaryExpression	\"TDistribution\"
>1241	Label	 
>1242	Identifier	InfluenceFunctions 
>1243	ReturnStatement	 
>1244	PrimaryExpression	\"Unit\"
>1245	Label	 
>1246	Identifier	InfluenceFunctions 
>1247	Condition	 
>1248	Identifier	type
>1254	FunctionDef	InfluenceFunctions 
>1255	ParameterList	InfluenceFunctions 
>1256	Parameter	 
>1257	Identifier	type
>1258	ParameterType	InfluenceFunctions 
>1259	ReturnType	InfluenceFunction *
>1260	CompoundStatement	 
>1261	ReturnStatement	 
>1262	PrimaryExpression	0
>1263	ExpressionStatement	 
>1264	CallExpression	assert ( false && \"Unknown influence function type!\" )
>1265	ArgumentList	false && \"Unknown influence function type!\"
>1266	Argument	false && \"Unknown influence function type!\"
>1267	AndExpression	false && \"Unknown influence function type!\"
>1268	PrimaryExpression	\"Unknown influence function type!\"
>1269	Identifier	false
>1270	Callee	assert
>1271	Identifier	assert
>1272	SwitchStatement	switch ( type )
>1273	CompoundStatement	 
>1274	BreakStatement	 
>1275	Label	 
>1276	Identifier	default
>1277	ReturnStatement	 
>1278	CastExpression	( InfluenceFunction * ) & huber
>1279	UnaryOp	& huber
>1280	Identifier	huber
>1281	UnaryOperator	&
>1282	CastTarget	InfluenceFunction *
>1283	Label	 
>1284	Identifier	InfluenceFunctions 
>1285	ReturnStatement	 
>1286	CastExpression	( InfluenceFunction * ) & tukey
>1287	UnaryOp	& tukey
>1288	Identifier	tukey
>1289	UnaryOperator	&
>1290	CastTarget	InfluenceFunction *
>1291	Label	 
>1292	Identifier	InfluenceFunctions 
>1293	ReturnStatement	 
>1294	CastExpression	( InfluenceFunction * ) & tdistribution
>1295	UnaryOp	& tdistribution
>1296	Identifier	tdistribution
>1297	UnaryOperator	&
>1298	CastTarget	InfluenceFunction *
>1299	Label	 
>1300	Identifier	InfluenceFunctions 
>1301	ReturnStatement	 
>1302	CastExpression	( InfluenceFunction * ) & unit
>1303	UnaryOp	& unit
>1304	Identifier	unit
>1305	UnaryOperator	&
>1306	CastTarget	InfluenceFunction *
>1307	Label	 
>1308	Identifier	InfluenceFunctions 
>1309	Condition	 
>1310	Identifier	type
>1311	IdentifierDeclStatement	 
>1312	IdentifierDecl	unit
>1313	Identifier	unit
>1314	IdentifierDeclType	UnitInfluenceFunction
>1315	Statement	 
>1316	IdentifierDeclStatement	 
>1317	IdentifierDecl	huber
>1318	Identifier	huber
>1319	IdentifierDeclType	HuberInfluenceFunction
>1320	Statement	 
>1321	IdentifierDeclStatement	 
>1322	IdentifierDecl	tukey
>1323	Identifier	tukey
>1324	IdentifierDeclType	TukeyInfluenceFunction
>1325	Statement	 
>1326	IdentifierDeclStatement	 
>1327	IdentifierDecl	tdistribution
>1328	Identifier	tdistribution
>1329	IdentifierDeclType	TDistributionInfluenceFunction
>1330	Statement	 
>1344	FunctionDef	WeightCalculation 
>1345	ParameterList	 
>1346	CompoundStatement	 
>1350	FunctionDef	WeightCalculation 
>1351	ParameterList	const cv 
>1352	Parameter	 
>1353	Identifier	errors
>1354	ParameterType	const cv 
>1355	ReturnType	void
>1356	CompoundStatement	 
>1357	ExpressionStatement	 
>1358	AssignmentExpr	scale_ = std 
>1359	CallExpression	std 
>1360	ArgumentList	scaleEstimator_ -> compute ( errors )
>1361	Argument	0.001f
>1362	PrimaryExpression	0.001f
>1363	Argument	scaleEstimator_ -> compute ( errors )
>1364	CallExpression	scaleEstimator_ -> compute ( errors )
>1365	ArgumentList	errors
>1366	Argument	errors
>1367	Identifier	errors
>1368	Callee	scaleEstimator_ -> compute
>1369	PtrMemberAccess	scaleEstimator_ -> compute
>1370	Identifier	compute
>1371	Identifier	scaleEstimator_
>1372	Callee	std 
>1373	Identifier	std 
>1374	Identifier	scale_
>1384	FunctionDef	WeightCalculation 
>1385	ParameterList	const float error
>1386	Parameter	 
>1387	Identifier	error
>1388	ParameterType	const float
>1389	ReturnType	float
>1390	CompoundStatement	 
>1391	CompoundStatement	 
>1392	CompoundStatement	 
>1393	ReturnStatement	 
>1394	CallExpression	influenceFunction_ -> value ( error / scale_ )
>1395	ArgumentList	error / scale_
>1396	Argument	error / scale_
>1397	MultiplicativeExpression	error / scale_
>1398	Identifier	scale_
>1399	Identifier	error
>1400	Callee	influenceFunction_ -> value
>1401	PtrMemberAccess	influenceFunction_ -> value
>1402	Identifier	value
>1403	Identifier	influenceFunction_
>1412	FunctionDef	WeightCalculation 
>1413	ParameterList	const cv 
>1414	Parameter	 
>1415	Identifier	weights
>1416	ParameterType	cv 
>1417	Parameter	 
>1418	Identifier	errors
>1419	ParameterType	const cv 
>1420	ReturnType	void
>1421	CompoundStatement	 
>1422	ForStatement	for ( size_t idx = 0 ; idx < errors . size ( ) . area ( ) ; ++ idx , ++ err_ptr , ++ weight_ptr )
>1423	CompoundStatement	 
>1424	IfStatement	if ( std 
>1425	ElseStatement	else
>1426	CompoundStatement	 
>1427	ExpressionStatement	 
>1428	AssignmentExpr	* weight_ptr = 0.0f
>1429	PrimaryExpression	0.0f
>1430	UnaryOp	* weight_ptr
>1431	Identifier	weight_ptr
>1432	UnaryOperator	*
>1433	CompoundStatement	 
>1434	ExpressionStatement	 
>1435	AssignmentExpr	* weight_ptr = influenceFunction_ -> value ( * err_ptr )
>1436	CallExpression	influenceFunction_ -> value ( * err_ptr )
>1437	ArgumentList	* err_ptr
>1438	Argument	* err_ptr
>1439	UnaryOp	* err_ptr
>1440	Identifier	err_ptr
>1441	UnaryOperator	*
>1442	Callee	influenceFunction_ -> value
>1443	PtrMemberAccess	influenceFunction_ -> value
>1444	Identifier	value
>1445	Identifier	influenceFunction_
>1446	UnaryOp	* weight_ptr
>1447	Identifier	weight_ptr
>1448	UnaryOperator	*
>1449	Condition	 
>1450	CallExpression	std 
>1451	ArgumentList	* err_ptr
>1452	Argument	* err_ptr
>1453	UnaryOp	* err_ptr
>1454	Identifier	err_ptr
>1455	UnaryOperator	*
>1456	Callee	std 
>1457	Identifier	std 
>1458	Expression	 
>1459	Expression	++ err_ptr , ++ weight_ptr
>1460	UnaryExpression	++ weight_ptr
>1461	Identifier	weight_ptr
>1462	IncDec	++
>1463	UnaryExpression	++ err_ptr
>1464	Identifier	err_ptr
>1465	IncDec	++
>1466	UnaryExpression	++ idx
>1467	Identifier	idx
>1468	IncDec	++
>1469	Condition	 
>1470	RelationalExpression	idx < errors . size ( ) . area ( )
>1471	CallExpression	errors . size ( ) . area ( )
>1472	ArgumentList	 
>1473	Callee	errors . size ( ) . area
>1474	MemberAccess	errors . size ( ) . area
>1475	Identifier	area
>1476	CallExpression	errors . size ( )
>1477	ArgumentList	 
>1478	Callee	errors . size
>1479	MemberAccess	errors . size
>1480	Identifier	size
>1481	Identifier	errors
>1482	Identifier	idx
>1483	ForInit	 
>1484	IdentifierDeclStatement	size_t idx = 0 ;
>1485	IdentifierDecl	idx = 0
>1486	AssignmentExpr	idx = 0
>1487	PrimaryExpression	0
>1488	Identifier	idx
>1489	Identifier	idx
>1490	IdentifierDeclType	size_t
>1491	ExpressionStatement	 
>1492	Statement	 
>1493	Statement	 
>1494	Statement	 
>1495	Statement	 
>1496	Statement	 
>1497	Statement	 
>1498	Statement	 
>1499	Statement	 
>1500	Statement	 
>1501	Statement	 
>1502	Statement	 
>1503	Statement	 
>1504	ExpressionStatement	 
>1505	Statement	 
>1506	Statement	 
>1507	Statement	 
>1508	Statement	 
>1509	Statement	 
>1510	Statement	 
>1511	Statement	 
>1512	Statement	 
>1513	Statement	 
>1514	Statement	 
>1515	Statement	 
>1516	Statement	 
>1517	Statement	 
>1518	IdentifierDeclStatement	 
>1519	IdentifierDecl	scaled_errors = errors / scale_
>1520	AssignmentExpr	scaled_errors = errors / scale_
>1521	MultiplicativeExpression	errors / scale_
>1522	Identifier	scale_
>1523	Identifier	errors
>1524	Identifier	scaled_errors
>1525	Identifier	scaled_errors
>1526	IdentifierDeclType	cv 
>1527	ExpressionStatement	 
>1528	CallExpression	weights . create ( errors . size ( ) , errors . type ( ) )
>1529	ArgumentList	errors . size ( )
>1530	Argument	errors . type ( )
>1531	CallExpression	errors . type ( )
>1532	ArgumentList	 
>1533	Callee	errors . type
>1534	MemberAccess	errors . type
>1535	Identifier	type
>1536	Identifier	errors
>1537	Argument	errors . size ( )
>1538	CallExpression	errors . size ( )
>1539	ArgumentList	 
>1540	Callee	errors . size
>1541	MemberAccess	errors . size
>1542	Identifier	size
>1543	Identifier	errors
>1544	Callee	weights . create
>1545	MemberAccess	weights . create
>1546	Identifier	create
>1547	Identifier	weights
<7=12,8
<8=9
<9=11,10
<12=13
<13=14
<14=18,15
<15=16
<16=17
<18=19
<24=30,29,25
<25=26
<26=28,27
<30=31
<31=32
<32=34,33
<40=46,45,41
<41=42
<42=44,43
<46=201,194,187,180,56,47
<47=48
<48=54,49
<49=50
<50=51
<51=53,52
<54=55
<56=68,57
<57=58
<58=60,59
<60=66,61
<61=62
<62=63
<63=65,64
<66=67
<68=176,172,168,164,163,162,161,160,159,158,157,156,155,154,153,152,151,150,79,75,69
<69=70
<70=74,71
<71=73,72
<75=76
<76=78,77
<79=142,128,121,80
<80=112,81
<81=105,82
<82=101,83
<83=84
<84=100,85
<85=99,86
<86=98,87
<87=95,88
<88=94,89
<89=93,90
<90=92,91
<95=97,96
<101=102
<102=104,103
<105=106
<106=110,107
<107=108
<108=109
<110=111
<112=113
<113=120,119,114
<114=118,115
<115=117,116
<121=125,122
<122=124,123
<125=127,126
<128=129
<129=141,130
<130=132,131
<132=133
<133=135,134
<135=137,136
<137=138
<138=140,139
<142=143
<143=144
<144=149,148,145
<145=147,146
<164=165
<165=167,166
<168=169
<169=171,170
<172=173
<173=175,174
<176=177
<177=179,178
<180=181
<181=186,185,182
<182=184,183
<187=188
<188=193,192,189
<189=191,190
<194=195
<195=200,199,196
<196=198,197
<201=202
<202=211,210,203
<203=209,204
<204=208,205
<205=207,206
<232=243,233
<233=240,237,234
<234=236,235
<237=239,238
<240=242,241
<250=256,255,251
<251=252
<252=254,253
<256=349,336,265,261,257
<257=258
<258=260,259
<261=262
<262=264,263
<265=323,314,307,266
<266=298,267
<267=291,268
<268=287,269
<269=270
<270=286,271
<271=285,272
<272=284,273
<273=281,274
<274=280,275
<275=279,276
<276=278,277
<281=283,282
<287=288
<288=290,289
<291=292
<292=296,293
<293=294
<294=295
<296=297
<298=299
<299=306,305,300
<300=304,301
<301=303,302
<307=311,308
<308=310,309
<311=313,312
<314=315
<315=322,316
<316=318,317
<318=319
<319=321,320
<323=324
<324=325
<325=335,334,326
<326=333,327
<327=329,328
<329=330
<330=332,331
<336=343,337
<337=342,341,338
<338=340,339
<343=348,347,344
<344=346,345
<349=350
<350=362,361,351
<351=360,352
<352=359,353
<353=355,354
<355=356
<356=358,357
<380=386,385,381
<381=382
<382=384,383
<386=393,387
<387=388
<388=392,389
<389=391,390
<393=394
<394=398,395
<395=397,396
<414=419,415
<415=416
<416=418,417
<424=430,429,425
<425=426
<426=428,427
<430=515,440,431
<431=432
<432=438,433
<433=434
<434=435
<435=437,436
<438=439
<440=452,441
<441=442
<442=444,443
<444=450,445
<445=446
<446=447
<447=449,448
<450=451
<452=511,510,509,508,507,506,505,504,503,502,501,500,499,498,497,496,495,494,469,459,453
<453=454
<454=458,455
<455=457,456
<459=460
<460=468,461
<461=465,462
<462=464,463
<465=467,466
<469=470
<470=492,471
<471=474,472
<472=473
<474=475
<475=491,476
<476=490,477
<477=489,478
<478=480,479
<480=481
<481=483,482
<483=485,484
<485=486
<486=488,487
<492=493
<511=512
<512=514,513
<515=526,516
<516=525,524,517
<517=523,518
<518=522,519
<519=521,520
<526=528,527
<545=550,546
<546=547
<547=549,548
<555=561,560,556
<556=557
<557=559,558
<561=674,662,651,647,631,619,607,576,562
<562=563
<563=574,564
<564=565
<565=566
<566=572,567
<567=568
<568=569
<569=571,570
<572=573
<574=575
<576=577
<577=606,605,578
<578=604,579
<579=598,580
<580=596,581
<581=582
<582=583
<583=585,584
<585=587,586
<587=588
<588=590,589
<590=592,591
<592=593
<593=595,594
<596=597
<598=602,599
<599=600
<600=601
<602=603
<607=608
<608=618,617,609
<609=616,610
<610=614,611
<611=612
<612=613
<614=615
<619=620
<620=630,629,621
<621=628,622
<622=626,623
<623=624
<624=625
<626=627
<631=632
<632=645,633
<633=636,634
<634=635
<636=637
<637=641,638
<638=639
<639=640
<641=642
<642=644,643
<645=646
<647=648
<648=650,649
<651=652
<652=658,653
<653=656,654
<654=655
<656=657
<658=659
<659=661,660
<662=663
<663=673,672,664
<664=671,665
<665=667,666
<667=668
<668=670,669
<674=675
<675=682,681,676
<676=680,677
<677=679,678
<702=704,703
<708=714,713,709
<709=710
<710=712,711
<714=760,756,747,732,719,715
<715=716
<716=718,717
<719=720
<720=731,721
<721=729,722
<722=727,725,723
<723=724
<725=726
<727=728
<729=730
<732=733
<733=745,734
<734=743,741,739,737,735
<735=736
<737=738
<739=740
<741=742
<743=744
<745=746
<747=748
<748=755,749
<749=753,750
<750=751
<751=752
<753=754
<756=757
<757=759,758
<760=767,764,761
<761=763,762
<764=766,765
<767=769,768
<783=785,784
<789=795,794,790
<790=791
<791=793,792
<795=827,821,808,796
<796=797
<797=803,798
<798=802,799
<799=801,800
<803=807,804
<804=806,805
<808=809
<809=819,810
<810=817,815,813,811
<811=812
<813=814
<815=816
<817=818
<819=820
<821=822
<822=826,823
<823=825,824
<827=834,831,828
<828=830,829
<831=833,832
<834=836,835
<846=852,851,847
<847=848
<848=850,849
<852=864,855,853
<853=854
<855=856
<856=862,857
<857=858
<858=859
<859=861,860
<862=863
<864=885,865
<865=883,881,879,877,875,873,871,869,867,866
<867=868
<869=870
<871=872
<873=874
<875=876
<877=878
<879=880
<881=882
<883=884
<885=886
<892=898,897,893
<893=894
<894=896,895
<898=968,964,963,959,958,954,953,949,910,901,899
<899=900
<901=902
<902=908,903
<903=904
<904=905
<905=907,906
<908=909
<910=947,911
<911=945,939,937,931,929,923,921,915,913,912
<913=914
<915=916
<916=920,917
<917=919,918
<921=922
<923=924
<924=928,925
<925=927,926
<929=930
<931=932
<932=936,933
<933=935,934
<937=938
<939=940
<940=944,941
<941=943,942
<945=946
<947=948
<949=950
<950=952,951
<954=955
<955=957,956
<959=960
<960=962,961
<964=965
<965=967,966
<984=989,985
<985=986
<986=988,987
<989=990
<990=991
<991=995,992
<992=993
<993=994
<995=996
<1001=1007,1006,1002
<1002=1003
<1003=1005,1004
<1007=1033,1008
<1008=1029,1013,1009
<1009=1010
<1010=1011
<1011=1012
<1013=1018,1014
<1014=1015
<1015=1017,1016
<1018=1019
<1019=1028,1027,1020
<1020=1026,1021
<1021=1025,1022
<1022=1024,1023
<1029=1030
<1030=1032,1031
<1033=1034
<1034=1041,1040,1035
<1035=1039,1036
<1036=1038,1037
<1049=1055,1054,1050
<1050=1051
<1051=1053,1052
<1055=1056
<1056=1057
<1057=1061,1058
<1058=1060,1059
<1069=1074,1070
<1070=1071
<1071=1073,1072
<1074=1075
<1075=1076
<1076=1080,1077
<1077=1078
<1078=1079
<1080=1081
<1086=1092,1091,1087
<1087=1088
<1088=1090,1089
<1092=1093
<1093=1094
<1094=1100,1095
<1095=1099,1096
<1096=1098,1097
<1100=1102,1101
<1108=1114,1113,1109
<1109=1110
<1110=1112,1111
<1114=1123,1115
<1115=1116
<1116=1122,1117
<1117=1121,1118
<1118=1120,1119
<1123=1124
<1124=1126,1125
<1135=1140,1136
<1136=1137
<1137=1139,1138
<1140=1141
<1141=1142
<1142=1146,1143
<1143=1144
<1144=1145
<1146=1147
<1152=1158,1157,1153
<1153=1154
<1154=1156,1155
<1158=1173,1159
<1159=1169,1166,1160
<1160=1161
<1161=1162
<1162=1163
<1163=1165,1164
<1166=1167
<1167=1168
<1169=1170
<1170=1172,1171
<1173=1174
<1174=1184,1183,1175
<1175=1182,1176
<1176=1180,1177
<1177=1178
<1178=1179
<1180=1181
<1192=1198,1197,1193
<1193=1194
<1194=1196,1195
<1198=1199
<1199=1200
<1200=1202,1201
<1208=1214,1213,1209
<1209=1210
<1210=1212,1211
<1214=1226,1217,1215
<1215=1216
<1217=1218
<1218=1224,1219
<1219=1220
<1220=1221
<1221=1223,1222
<1224=1225
<1226=1247,1227
<1227=1245,1243,1241,1239,1237,1235,1233,1231,1229,1228
<1229=1230
<1231=1232
<1233=1234
<1235=1236
<1237=1238
<1239=1240
<1241=1242
<1243=1244
<1245=1246
<1247=1248
<1254=1260,1259,1255
<1255=1256
<1256=1258,1257
<1260=1330,1326,1325,1321,1320,1316,1315,1311,1272,1263,1261
<1261=1262
<1263=1264
<1264=1270,1265
<1265=1266
<1266=1267
<1267=1269,1268
<1270=1271
<1272=1309,1273
<1273=1307,1301,1299,1293,1291,1285,1283,1277,1275,1274
<1275=1276
<1277=1278
<1278=1282,1279
<1279=1281,1280
<1283=1284
<1285=1286
<1286=1290,1287
<1287=1289,1288
<1291=1292
<1293=1294
<1294=1298,1295
<1295=1297,1296
<1299=1300
<1301=1302
<1302=1306,1303
<1303=1305,1304
<1307=1308
<1309=1310
<1311=1312
<1312=1314,1313
<1316=1317
<1317=1319,1318
<1321=1322
<1322=1324,1323
<1326=1327
<1327=1329,1328
<1344=1346,1345
<1350=1356,1355,1351
<1351=1352
<1352=1354,1353
<1356=1357
<1357=1358
<1358=1374,1359
<1359=1372,1360
<1360=1363,1361
<1361=1362
<1363=1364
<1364=1368,1365
<1365=1366
<1366=1367
<1368=1369
<1369=1371,1370
<1372=1373
<1384=1390,1389,1385
<1385=1386
<1386=1388,1387
<1390=1392,1391
<1392=1393
<1393=1394
<1394=1400,1395
<1395=1396
<1396=1397
<1397=1399,1398
<1400=1401
<1401=1403,1402
<1412=1421,1420,1413
<1413=1417,1414
<1414=1416,1415
<1417=1419,1418
<1421=1527,1518,1517,1516,1515,1514,1513,1512,1511,1510,1509,1508,1507,1506,1505,1504,1503,1502,1501,1500,1499,1498,1497,1496,1495,1494,1493,1492,1491,1422
<1422=1483,1469,1458,1423
<1423=1424
<1424=1449,1433,1425
<1425=1426
<1426=1427
<1427=1428
<1428=1430,1429
<1430=1432,1431
<1433=1434
<1434=1435
<1435=1446,1436
<1436=1442,1437
<1437=1438
<1438=1439
<1439=1441,1440
<1442=1443
<1443=1445,1444
<1446=1448,1447
<1449=1450
<1450=1456,1451
<1451=1452
<1452=1453
<1453=1455,1454
<1456=1457
<1458=1466,1459
<1459=1463,1460
<1460=1462,1461
<1463=1465,1464
<1466=1468,1467
<1469=1470
<1470=1482,1471
<1471=1473,1472
<1473=1474
<1474=1476,1475
<1476=1478,1477
<1478=1479
<1479=1481,1480
<1483=1484
<1484=1485
<1485=1490,1489,1486
<1486=1488,1487
<1518=1519
<1519=1526,1525,1520
<1520=1524,1521
<1521=1523,1522
<1527=1528
<1528=1544,1529
<1529=1537,1530
<1530=1531
<1531=1533,1532
<1533=1534
<1534=1536,1535
<1537=1538
<1538=1540,1539
<1540=1541
<1541=1543,1542
<1544=1545
<1545=1547,1546
