>3	FunctionDef	TwitchIrc 
>4	ParameterList	QtSpeech * & speech , QWidget * parent
>5	Parameter	 
>6	Identifier	parent
>7	ParameterType	QWidget *
>8	Parameter	 
>9	Identifier	speech
>10	ParameterType	QtSpeech * &
>11	CompoundStatement	 
>12	ExpressionStatement	 
>13	CallExpression	connect ( msgtimer , SIGNAL ( timeout ( ) ) , this , SLOT ( nomsg ( ) ) )
>14	ArgumentList	msgtimer
>15	Argument	SLOT ( nomsg ( ) )
>16	CallExpression	SLOT ( nomsg ( ) )
>17	ArgumentList	nomsg ( )
>18	Argument	nomsg ( )
>19	CallExpression	nomsg ( )
>20	ArgumentList	 
>21	Callee	nomsg
>22	Identifier	nomsg
>23	Callee	SLOT
>24	Identifier	SLOT
>25	Argument	this
>26	Identifier	this
>27	Argument	SIGNAL ( timeout ( ) )
>28	CallExpression	SIGNAL ( timeout ( ) )
>29	ArgumentList	timeout ( )
>30	Argument	timeout ( )
>31	CallExpression	timeout ( )
>32	ArgumentList	 
>33	Callee	timeout
>34	Identifier	timeout
>35	Callee	SIGNAL
>36	Identifier	SIGNAL
>37	Argument	msgtimer
>38	Identifier	msgtimer
>39	Callee	connect
>40	Identifier	connect
>41	ExpressionStatement	 
>42	CallExpression	connect ( checkTimer , SIGNAL ( timeout ( ) ) , this , SLOT ( checkConn ( ) ) )
>43	ArgumentList	checkTimer
>44	Argument	SLOT ( checkConn ( ) )
>45	CallExpression	SLOT ( checkConn ( ) )
>46	ArgumentList	checkConn ( )
>47	Argument	checkConn ( )
>48	CallExpression	checkConn ( )
>49	ArgumentList	 
>50	Callee	checkConn
>51	Identifier	checkConn
>52	Callee	SLOT
>53	Identifier	SLOT
>54	Argument	this
>55	Identifier	this
>56	Argument	SIGNAL ( timeout ( ) )
>57	CallExpression	SIGNAL ( timeout ( ) )
>58	ArgumentList	timeout ( )
>59	Argument	timeout ( )
>60	CallExpression	timeout ( )
>61	ArgumentList	 
>62	Callee	timeout
>63	Identifier	timeout
>64	Callee	SIGNAL
>65	Identifier	SIGNAL
>66	Argument	checkTimer
>67	Identifier	checkTimer
>68	Callee	connect
>69	Identifier	connect
>70	ExpressionStatement	 
>71	CallExpression	checkTimer -> start ( )
>72	ArgumentList	 
>73	Callee	checkTimer -> start
>74	PtrMemberAccess	checkTimer -> start
>75	Identifier	start
>76	Identifier	checkTimer
>77	ExpressionStatement	 
>78	CallExpression	checkTimer -> setInterval ( 10000 )
>79	ArgumentList	10000
>80	Argument	10000
>81	PrimaryExpression	10000
>82	Callee	checkTimer -> setInterval
>83	PtrMemberAccess	checkTimer -> setInterval
>84	Identifier	setInterval
>85	Identifier	checkTimer
>86	ExpressionStatement	 
>87	CallExpression	checkTimer -> setSingleShot ( false )
>88	ArgumentList	false
>89	Argument	false
>90	Identifier	false
>91	Callee	checkTimer -> setSingleShot
>92	PtrMemberAccess	checkTimer -> setSingleShot
>93	Identifier	setSingleShot
>94	Identifier	checkTimer
>95	IdentifierDeclStatement	 
>96	IdentifierDecl	* checkTimer = new QTimer ( this )
>97	AssignmentExpr	* checkTimer = new QTimer ( this )
>98	Identifier	this
>99	Identifier	this
>100	Identifier	checkTimer
>101	IdentifierDeclType	QTimer *
>102	ExpressionStatement	 
>103	CallExpression	msgtimer -> setInterval ( 120000 )
>104	ArgumentList	120000
>105	Argument	120000
>106	PrimaryExpression	120000
>107	Callee	msgtimer -> setInterval
>108	PtrMemberAccess	msgtimer -> setInterval
>109	Identifier	setInterval
>110	Identifier	msgtimer
>111	ExpressionStatement	 
>112	CallExpression	msgtimer -> setSingleShot ( true )
>113	ArgumentList	true
>114	Argument	true
>115	Identifier	true
>116	Callee	msgtimer -> setSingleShot
>117	PtrMemberAccess	msgtimer -> setSingleShot
>118	Identifier	setSingleShot
>119	Identifier	msgtimer
>120	ExpressionStatement	 
>121	AssignmentExpr	msgtimer = new QTimer ( this )
>122	Identifier	this
>123	Identifier	msgtimer
>124	ExpressionStatement	 
>125	CallExpression	lay -> addWidget ( shutUpBox )
>126	ArgumentList	shutUpBox
>127	Argument	shutUpBox
>128	Identifier	shutUpBox
>129	Callee	lay -> addWidget
>130	PtrMemberAccess	lay -> addWidget
>131	Identifier	addWidget
>132	Identifier	lay
>133	ExpressionStatement	 
>134	CallExpression	lay -> addWidget ( lw )
>135	ArgumentList	lw
>136	Argument	lw
>137	Identifier	lw
>138	Callee	lay -> addWidget
>139	PtrMemberAccess	lay -> addWidget
>140	Identifier	addWidget
>141	Identifier	lay
>142	ExpressionStatement	 
>143	CallExpression	lay -> addWidget ( le )
>144	ArgumentList	le
>145	Argument	le
>146	Identifier	le
>147	Callee	lay -> addWidget
>148	PtrMemberAccess	lay -> addWidget
>149	Identifier	addWidget
>150	Identifier	lay
>151	ExpressionStatement	 
>152	CallExpression	lay -> addWidget ( ue )
>153	ArgumentList	ue
>154	Argument	ue
>155	Identifier	ue
>156	Callee	lay -> addWidget
>157	PtrMemberAccess	lay -> addWidget
>158	Identifier	addWidget
>159	Identifier	lay
>160	IdentifierDeclStatement	 
>161	IdentifierDecl	* lay = new QVBoxLayout ( this )
>162	AssignmentExpr	* lay = new QVBoxLayout ( this )
>163	Identifier	this
>164	Identifier	this
>165	Identifier	lay
>166	IdentifierDeclType	QVBoxLayout *
>167	IfStatement	if ( sett . contains ( \"tmi\" ) )
>168	CompoundStatement	 
>169	ExpressionStatement	 
>170	CallExpression	le -> setText ( \"hidden\" )
>171	ArgumentList	\"hidden\"
>172	Argument	\"hidden\"
>173	PrimaryExpression	\"hidden\"
>174	Callee	le -> setText
>175	PtrMemberAccess	le -> setText
>176	Identifier	setText
>177	Identifier	le
>178	ExpressionStatement	 
>179	CallExpression	connectIrc ( ue -> text ( ) , sett . value ( \"tmi\" ) . toString ( ) )
>180	ArgumentList	ue -> text ( )
>181	Argument	sett . value ( \"tmi\" ) . toString ( )
>182	CallExpression	sett . value ( \"tmi\" ) . toString ( )
>183	ArgumentList	 
>184	Callee	sett . value ( \"tmi\" ) . toString
>185	MemberAccess	sett . value ( \"tmi\" ) . toString
>186	Identifier	toString
>187	CallExpression	sett . value ( \"tmi\" )
>188	ArgumentList	\"tmi\"
>189	Argument	\"tmi\"
>190	PrimaryExpression	\"tmi\"
>191	Callee	sett . value
>192	MemberAccess	sett . value
>193	Identifier	value
>194	Identifier	sett
>195	Argument	ue -> text ( )
>196	CallExpression	ue -> text ( )
>197	ArgumentList	 
>198	Callee	ue -> text
>199	PtrMemberAccess	ue -> text
>200	Identifier	text
>201	Identifier	ue
>202	Callee	connectIrc
>203	Identifier	connectIrc
>204	Condition	 
>205	CallExpression	sett . contains ( \"tmi\" )
>206	ArgumentList	\"tmi\"
>207	Argument	\"tmi\"
>208	PrimaryExpression	\"tmi\"
>209	Callee	sett . contains
>210	MemberAccess	sett . contains
>211	Identifier	contains
>212	Identifier	sett
>213	IfStatement	if ( sett . contains ( \"twuname\" ) )
>214	ExpressionStatement	 
>215	CallExpression	ue -> setText ( sett . value ( \"twuname\" ) . toString ( ) )
>216	ArgumentList	sett . value ( \"twuname\" ) . toString ( )
>217	Argument	sett . value ( \"twuname\" ) . toString ( )
>218	CallExpression	sett . value ( \"twuname\" ) . toString ( )
>219	ArgumentList	 
>220	Callee	sett . value ( \"twuname\" ) . toString
>221	MemberAccess	sett . value ( \"twuname\" ) . toString
>222	Identifier	toString
>223	CallExpression	sett . value ( \"twuname\" )
>224	ArgumentList	\"twuname\"
>225	Argument	\"twuname\"
>226	PrimaryExpression	\"twuname\"
>227	Callee	sett . value
>228	MemberAccess	sett . value
>229	Identifier	value
>230	Identifier	sett
>231	Callee	ue -> setText
>232	PtrMemberAccess	ue -> setText
>233	Identifier	setText
>234	Identifier	ue
>235	Condition	 
>236	CallExpression	sett . contains ( \"twuname\" )
>237	ArgumentList	\"twuname\"
>238	Argument	\"twuname\"
>239	PrimaryExpression	\"twuname\"
>240	Callee	sett . contains
>241	MemberAccess	sett . contains
>242	Identifier	contains
>243	Identifier	sett
>244	IdentifierDeclStatement	 
>245	IdentifierDecl	sett
>246	Identifier	sett
>247	IdentifierDeclType	QSettings
>248	ExpressionStatement	 
>249	Statement	 
>250	CompoundStatement	 
>251	ExpressionStatement	 
>252	CallExpression	connectIrc ( ue -> text ( ) , txt )
>253	ArgumentList	ue -> text ( )
>254	Argument	txt
>255	Identifier	txt
>256	Argument	ue -> text ( )
>257	CallExpression	ue -> text ( )
>258	ArgumentList	 
>259	Callee	ue -> text
>260	PtrMemberAccess	ue -> text
>261	Identifier	text
>262	Identifier	ue
>263	Callee	connectIrc
>264	Identifier	connectIrc
>265	ExpressionStatement	 
>266	CallExpression	sett . setValue ( \"tmi\" , txt )
>267	ArgumentList	\"tmi\"
>268	Argument	txt
>269	Identifier	txt
>270	Argument	\"tmi\"
>271	PrimaryExpression	\"tmi\"
>272	Callee	sett . setValue
>273	MemberAccess	sett . setValue
>274	Identifier	setValue
>275	Identifier	sett
>276	IdentifierDeclStatement	 
>277	IdentifierDecl	sett
>278	Identifier	sett
>279	IdentifierDeclType	QSettings
>280	ExpressionStatement	 
>281	CallExpression	le -> setText ( \"hidden\" )
>282	ArgumentList	\"hidden\"
>283	Argument	\"hidden\"
>284	PrimaryExpression	\"hidden\"
>285	Callee	le -> setText
>286	PtrMemberAccess	le -> setText
>287	Identifier	setText
>288	Identifier	le
>289	IdentifierDeclStatement	 
>290	IdentifierDecl	txt = le -> text ( )
>291	AssignmentExpr	txt = le -> text ( )
>292	CallExpression	le -> text ( )
>293	ArgumentList	 
>294	Callee	le -> text
>295	PtrMemberAccess	le -> text
>296	Identifier	text
>297	Identifier	le
>298	Identifier	txt
>299	Identifier	txt
>300	IdentifierDeclType	QString
>301	Statement	 
>302	Statement	 
>303	Statement	 
>304	Statement	 
>305	Statement	 
>306	Statement	 
>307	Statement	 
>308	Statement	 
>309	Statement	 
>310	Statement	 
>311	Statement	 
>312	Statement	 
>313	Statement	 
>314	Statement	 
>315	Statement	 
>316	Statement	 
>317	Statement	 
>318	Statement	 
>319	Statement	 
>320	Statement	 
>321	ExpressionStatement	 
>322	Statement	 
>323	CompoundStatement	 
>324	ExpressionStatement	 
>325	CallExpression	connectIrc ( ue -> text ( ) , sett . value ( \"tmi\" , le -> text ( ) ) . toString ( ) )
>326	ArgumentList	ue -> text ( )
>327	Argument	sett . value ( \"tmi\" , le -> text ( ) ) . toString ( )
>328	CallExpression	sett . value ( \"tmi\" , le -> text ( ) ) . toString ( )
>329	ArgumentList	 
>330	Callee	sett . value ( \"tmi\" , le -> text ( ) ) . toString
>331	MemberAccess	sett . value ( \"tmi\" , le -> text ( ) ) . toString
>332	Identifier	toString
>333	CallExpression	sett . value ( \"tmi\" , le -> text ( ) )
>334	ArgumentList	\"tmi\"
>335	Argument	le -> text ( )
>336	CallExpression	le -> text ( )
>337	ArgumentList	 
>338	Callee	le -> text
>339	PtrMemberAccess	le -> text
>340	Identifier	text
>341	Identifier	le
>342	Argument	\"tmi\"
>343	PrimaryExpression	\"tmi\"
>344	Callee	sett . value
>345	MemberAccess	sett . value
>346	Identifier	value
>347	Identifier	sett
>348	Argument	ue -> text ( )
>349	CallExpression	ue -> text ( )
>350	ArgumentList	 
>351	Callee	ue -> text
>352	PtrMemberAccess	ue -> text
>353	Identifier	text
>354	Identifier	ue
>355	Callee	connectIrc
>356	Identifier	connectIrc
>357	ExpressionStatement	 
>358	CallExpression	sett . setValue ( \"twuname\" , ue -> text ( ) )
>359	ArgumentList	\"twuname\"
>360	Argument	ue -> text ( )
>361	CallExpression	ue -> text ( )
>362	ArgumentList	 
>363	Callee	ue -> text
>364	PtrMemberAccess	ue -> text
>365	Identifier	text
>366	Identifier	ue
>367	Argument	\"twuname\"
>368	PrimaryExpression	\"twuname\"
>369	Callee	sett . setValue
>370	MemberAccess	sett . setValue
>371	Identifier	setValue
>372	Identifier	sett
>373	IdentifierDeclStatement	 
>374	IdentifierDecl	sett
>375	Identifier	sett
>376	IdentifierDeclType	QSettings
>377	Statement	 
>378	Statement	 
>379	Statement	 
>380	Statement	 
>381	Statement	 
>382	Statement	 
>383	Statement	 
>384	Statement	 
>385	Statement	 
>386	Statement	 
>387	Statement	 
>388	Statement	 
>389	Statement	 
>390	Statement	 
>391	Statement	 
>392	Statement	 
>393	Statement	 
>394	Statement	 
>395	Statement	 
>396	Statement	 
>397	ExpressionStatement	 
>398	CallExpression	le -> setText ( \"http
>399	ArgumentList	\"http
>400	Argument	\"http
>401	PrimaryExpression	\"http
>402	Callee	le -> setText
>403	PtrMemberAccess	le -> setText
>404	Identifier	setText
>405	Identifier	le
>406	ExpressionStatement	 
>407	CallExpression	ue -> setText ( \"runnerguy2489\" )
>408	ArgumentList	\"runnerguy2489\"
>409	Argument	\"runnerguy2489\"
>410	PrimaryExpression	\"runnerguy2489\"
>411	Callee	ue -> setText
>412	PtrMemberAccess	ue -> setText
>413	Identifier	setText
>414	Identifier	ue
>415	IdentifierDeclStatement	 
>416	IdentifierDecl	* le = new QLineEdit ( this )
>417	AssignmentExpr	* le = new QLineEdit ( this )
>418	Identifier	this
>419	Identifier	this
>420	Identifier	le
>421	IdentifierDeclType	QLineEdit *
>422	IdentifierDeclStatement	 
>423	IdentifierDecl	* ue = new QLineEdit ( this )
>424	AssignmentExpr	* ue = new QLineEdit ( this )
>425	Identifier	this
>426	Identifier	this
>427	Identifier	ue
>428	IdentifierDeclType	QLineEdit *
>429	ExpressionStatement	 
>430	CallExpression	shutUpBox -> setText ( \"Shut up\" )
>431	ArgumentList	\"Shut up\"
>432	Argument	\"Shut up\"
>433	PrimaryExpression	\"Shut up\"
>434	Callee	shutUpBox -> setText
>435	PtrMemberAccess	shutUpBox -> setText
>436	Identifier	setText
>437	Identifier	shutUpBox
>438	ExpressionStatement	 
>439	AssignmentExpr	shutUpBox = new QCheckBox ( this )
>440	Identifier	this
>441	Identifier	shutUpBox
>442	ExpressionStatement	 
>443	AssignmentExpr	lw = new QListWidget ( this )
>444	Identifier	this
>445	Identifier	lw
>477	FunctionDef	TwitchIrc 
>478	ParameterList	const QString & username , const QString & token
>479	Parameter	 
>480	Identifier	token
>481	ParameterType	const QString &
>482	Parameter	 
>483	Identifier	username
>484	ParameterType	const QString &
>485	ReturnType	void
>486	CompoundStatement	 
>487	ExpressionStatement	 
>488	CallExpression	conn -> open ( )
>489	ArgumentList	 
>490	Callee	conn -> open
>491	PtrMemberAccess	conn -> open
>492	Identifier	open
>493	Identifier	conn
>494	ExpressionStatement	 
>495	Statement	 
>496	Statement	 
>497	Statement	 
>498	Statement	 
>499	Statement	 
>500	Statement	 
>501	Statement	 
>502	Statement	 
>503	Statement	 
>504	Statement	 
>505	Statement	 
>506	Statement	 
>507	Statement	 
>508	Statement	 
>509	Statement	 
>510	Statement	 
>511	Statement	 
>512	Statement	 
>513	Statement	 
>514	Statement	 
>515	Statement	 
>516	Statement	 
>517	Statement	 
>518	Statement	 
>519	ExpressionStatement	 
>520	CallExpression	connect ( conn , SIGNAL ( disconnected ( ) ) , this , SLOT ( onDisconnected ( ) ) )
>521	ArgumentList	conn
>522	Argument	SLOT ( onDisconnected ( ) )
>523	CallExpression	SLOT ( onDisconnected ( ) )
>524	ArgumentList	onDisconnected ( )
>525	Argument	onDisconnected ( )
>526	CallExpression	onDisconnected ( )
>527	ArgumentList	 
>528	Callee	onDisconnected
>529	Identifier	onDisconnected
>530	Callee	SLOT
>531	Identifier	SLOT
>532	Argument	this
>533	Identifier	this
>534	Argument	SIGNAL ( disconnected ( ) )
>535	CallExpression	SIGNAL ( disconnected ( ) )
>536	ArgumentList	disconnected ( )
>537	Argument	disconnected ( )
>538	CallExpression	disconnected ( )
>539	ArgumentList	 
>540	Callee	disconnected
>541	Identifier	disconnected
>542	Callee	SIGNAL
>543	Identifier	SIGNAL
>544	Argument	conn
>545	Identifier	conn
>546	Callee	connect
>547	Identifier	connect
>548	ExpressionStatement	 
>549	CallExpression	connect ( conn , SIGNAL ( connecting ( ) ) , this , SLOT ( onConnecting ( ) ) )
>550	ArgumentList	conn
>551	Argument	SLOT ( onConnecting ( ) )
>552	CallExpression	SLOT ( onConnecting ( ) )
>553	ArgumentList	onConnecting ( )
>554	Argument	onConnecting ( )
>555	CallExpression	onConnecting ( )
>556	ArgumentList	 
>557	Callee	onConnecting
>558	Identifier	onConnecting
>559	Callee	SLOT
>560	Identifier	SLOT
>561	Argument	this
>562	Identifier	this
>563	Argument	SIGNAL ( connecting ( ) )
>564	CallExpression	SIGNAL ( connecting ( ) )
>565	ArgumentList	connecting ( )
>566	Argument	connecting ( )
>567	CallExpression	connecting ( )
>568	ArgumentList	 
>569	Callee	connecting
>570	Identifier	connecting
>571	Callee	SIGNAL
>572	Identifier	SIGNAL
>573	Argument	conn
>574	Identifier	conn
>575	Callee	connect
>576	Identifier	connect
>577	ExpressionStatement	 
>578	CallExpression	connect ( conn , SIGNAL ( connected ( ) ) , this , SLOT ( onConnected ( ) ) )
>579	ArgumentList	conn
>580	Argument	SLOT ( onConnected ( ) )
>581	CallExpression	SLOT ( onConnected ( ) )
>582	ArgumentList	onConnected ( )
>583	Argument	onConnected ( )
>584	CallExpression	onConnected ( )
>585	ArgumentList	 
>586	Callee	onConnected
>587	Identifier	onConnected
>588	Callee	SLOT
>589	Identifier	SLOT
>590	Argument	this
>591	Identifier	this
>592	Argument	SIGNAL ( connected ( ) )
>593	CallExpression	SIGNAL ( connected ( ) )
>594	ArgumentList	connected ( )
>595	Argument	connected ( )
>596	CallExpression	connected ( )
>597	ArgumentList	 
>598	Callee	connected
>599	Identifier	connected
>600	Callee	SIGNAL
>601	Identifier	SIGNAL
>602	Argument	conn
>603	Identifier	conn
>604	Callee	connect
>605	Identifier	connect
>606	ExpressionStatement	 
>607	CallExpression	conn -> setPassword ( token )
>608	ArgumentList	token
>609	Argument	token
>610	Identifier	token
>611	Callee	conn -> setPassword
>612	PtrMemberAccess	conn -> setPassword
>613	Identifier	setPassword
>614	Identifier	conn
>615	ExpressionStatement	 
>616	CallExpression	conn -> setNickName ( username )
>617	ArgumentList	username
>618	Argument	username
>619	Identifier	username
>620	Callee	conn -> setNickName
>621	PtrMemberAccess	conn -> setNickName
>622	Identifier	setNickName
>623	Identifier	conn
>624	ExpressionStatement	 
>625	CallExpression	conn -> setRealName ( username )
>626	ArgumentList	username
>627	Argument	username
>628	Identifier	username
>629	Callee	conn -> setRealName
>630	PtrMemberAccess	conn -> setRealName
>631	Identifier	setRealName
>632	Identifier	conn
>633	ExpressionStatement	 
>634	CallExpression	conn -> setUserName ( username )
>635	ArgumentList	username
>636	Argument	username
>637	Identifier	username
>638	Callee	conn -> setUserName
>639	PtrMemberAccess	conn -> setUserName
>640	Identifier	setUserName
>641	Identifier	conn
>642	ExpressionStatement	 
>643	AssignmentExpr	conn = new IrcConnection ( \"irc.twitch.tv\" , this )
>644	Expression	\"irc.twitch.tv\" , this
>645	Identifier	this
>646	PrimaryExpression	\"irc.twitch.tv\"
>647	Identifier	conn
>648	ExpressionStatement	 
>649	Identifier	conn
>650	IfStatement	if ( conn )
>651	Statement	 
>652	Condition	 
>653	Identifier	conn
>669	FunctionDef	TwitchIrc 
>670	ParameterList	const QString & msg , bool read
>671	Parameter	 
>672	Identifier	read
>673	ParameterType	bool
>674	Parameter	 
>675	Identifier	msg
>676	ParameterType	const QString &
>677	ReturnType	void
>678	CompoundStatement	 
>679	IfStatement	if ( read && ! shutUpBox -> isChecked ( ) )
>680	CompoundStatement	 
>681	ExpressionStatement	 
>682	CallExpression	speech -> tell ( msg )
>683	ArgumentList	msg
>684	Argument	msg
>685	Identifier	msg
>686	Callee	speech -> tell
>687	PtrMemberAccess	speech -> tell
>688	Identifier	tell
>689	Identifier	speech
>690	Condition	 
>691	AndExpression	read && ! shutUpBox -> isChecked ( )
>692	UnaryOp	! shutUpBox -> isChecked ( )
>693	CallExpression	shutUpBox -> isChecked ( )
>694	ArgumentList	 
>695	Callee	shutUpBox -> isChecked
>696	PtrMemberAccess	shutUpBox -> isChecked
>697	Identifier	isChecked
>698	Identifier	shutUpBox
>699	UnaryOperator	!
>700	Identifier	read
>701	ExpressionStatement	 
>702	CallExpression	lw -> takeItem ( 0 )
>703	ArgumentList	0
>704	Argument	0
>705	PrimaryExpression	0
>706	Callee	lw -> takeItem
>707	PtrMemberAccess	lw -> takeItem
>708	Identifier	takeItem
>709	Identifier	lw
>710	WhileStatement	while ( lw -> count ( ) > 20 )
>711	Statement	 
>712	Condition	 
>713	RelationalExpression	lw -> count ( ) > 20
>714	PrimaryExpression	20
>715	CallExpression	lw -> count ( )
>716	ArgumentList	 
>717	Callee	lw -> count
>718	PtrMemberAccess	lw -> count
>719	Identifier	count
>720	Identifier	lw
>721	ExpressionStatement	 
>722	CallExpression	lw -> addItem ( msg )
>723	ArgumentList	msg
>724	Argument	msg
>725	Identifier	msg
>726	Callee	lw -> addItem
>727	PtrMemberAccess	lw -> addItem
>728	Identifier	addItem
>729	Identifier	lw
>742	FunctionDef	TwitchIrc 
>743	ParameterList	 
>744	ReturnType	void
>745	CompoundStatement	 
>746	ExpressionStatement	 
>747	CallExpression	postMsg ( QString ( \"Connecting to irc.twitch.tv...\" ) )
>748	ArgumentList	QString ( \"Connecting to irc.twitch.tv...\" )
>749	Argument	QString ( \"Connecting to irc.twitch.tv...\" )
>750	CallExpression	QString ( \"Connecting to irc.twitch.tv...\" )
>751	ArgumentList	\"Connecting to irc.twitch.tv...\"
>752	Argument	\"Connecting to irc.twitch.tv...\"
>753	PrimaryExpression	\"Connecting to irc.twitch.tv...\"
>754	Callee	QString
>755	Identifier	QString
>756	Callee	postMsg
>757	Identifier	postMsg
>762	FunctionDef	TwitchIrc 
>763	ParameterList	 
>764	ReturnType	void
>765	CompoundStatement	 
>766	ExpressionStatement	 
>767	CallExpression	msgtimer -> start ( )
>768	ArgumentList	 
>769	Callee	msgtimer -> start
>770	PtrMemberAccess	msgtimer -> start
>771	Identifier	start
>772	Identifier	msgtimer
>773	ExpressionStatement	 
>774	CallExpression	conn -> sendCommand ( IrcCommand 
>775	ArgumentList	IrcCommand 
>776	Argument	IrcCommand 
>777	CallExpression	IrcCommand 
>778	ArgumentList	\"#runnerguy2489\"
>779	Argument	\"#runnerguy2489\"
>780	PrimaryExpression	\"#runnerguy2489\"
>781	Callee	IrcCommand 
>782	Identifier	IrcCommand 
>783	Callee	conn -> sendCommand
>784	PtrMemberAccess	conn -> sendCommand
>785	Identifier	sendCommand
>786	Identifier	conn
>787	ExpressionStatement	 
>788	CallExpression	postMsg ( \"Connected to Twitch IRC!\" , true )
>789	ArgumentList	\"Connected to Twitch IRC!\"
>790	Argument	true
>791	Identifier	true
>792	Argument	\"Connected to Twitch IRC!\"
>793	PrimaryExpression	\"Connected to Twitch IRC!\"
>794	Callee	postMsg
>795	Identifier	postMsg
>803	FunctionDef	TwitchIrc 
>804	ParameterList	 
>805	ReturnType	void
>806	CompoundStatement	 
>807	ExpressionStatement	 
>808	CallExpression	postMsg ( \"Disconnected from Twitch IRC!\" , true )
>809	ArgumentList	\"Disconnected from Twitch IRC!\"
>810	Argument	true
>811	Identifier	true
>812	Argument	\"Disconnected from Twitch IRC!\"
>813	PrimaryExpression	\"Disconnected from Twitch IRC!\"
>814	Callee	postMsg
>815	Identifier	postMsg
>820	FunctionDef	TwitchIrc 
>821	ParameterList	IrcPrivateMessage * msg
>822	Parameter	 
>823	Identifier	msg
>824	ParameterType	IrcPrivateMessage *
>825	ReturnType	void
>826	CompoundStatement	 
>827	ExpressionStatement	 
>828	CallExpression	postMsg ( str )
>829	ArgumentList	str
>830	Argument	str
>831	Identifier	str
>832	Callee	postMsg
>833	Identifier	postMsg
>834	IdentifierDeclStatement	 
>835	IdentifierDecl	str = QString ( \"%1 says
>836	AssignmentExpr	str = QString ( \"%1 says
>837	CallExpression	QString ( \"%1 says
>838	ArgumentList	msg -> content ( )
>839	Argument	msg -> content ( )
>840	CallExpression	msg -> content ( )
>841	ArgumentList	 
>842	Callee	msg -> content
>843	PtrMemberAccess	msg -> content
>844	Identifier	content
>845	Identifier	msg
>846	Callee	QString ( \"%1 says
>847	MemberAccess	QString ( \"%1 says
>848	Identifier	arg
>849	CallExpression	QString ( \"%1 says
>850	ArgumentList	msg -> nick ( )
>851	Argument	msg -> nick ( )
>852	CallExpression	msg -> nick ( )
>853	ArgumentList	 
>854	Callee	msg -> nick
>855	PtrMemberAccess	msg -> nick
>856	Identifier	nick
>857	Identifier	msg
>858	Callee	QString ( \"%1 says
>859	MemberAccess	QString ( \"%1 says
>860	Identifier	arg
>861	CallExpression	QString ( \"%1 says
>862	ArgumentList	\"%1 says
>863	Argument	\"%1 says
>864	PrimaryExpression	\"%1 says
>865	Callee	QString
>866	Identifier	QString
>867	Identifier	str
>868	Identifier	str
>869	IdentifierDeclType	QString
>870	IfStatement	if ( ! haveGotMsg )
>871	CompoundStatement	 
>872	ExpressionStatement	 
>873	CallExpression	postMsg ( \"Got a Twitch chat message again!\" , true )
>874	ArgumentList	\"Got a Twitch chat message again!\"
>875	Argument	true
>876	Identifier	true
>877	Argument	\"Got a Twitch chat message again!\"
>878	PrimaryExpression	\"Got a Twitch chat message again!\"
>879	Callee	postMsg
>880	Identifier	postMsg
>881	ExpressionStatement	 
>882	AssignmentExpr	haveGotMsg = true
>883	Identifier	true
>884	Identifier	haveGotMsg
>885	Condition	 
>886	UnaryOp	! haveGotMsg
>887	Identifier	haveGotMsg
>888	UnaryOperator	!
>889	ExpressionStatement	 
>890	CallExpression	msgtimer -> start ( )
>891	ArgumentList	 
>892	Callee	msgtimer -> start
>893	PtrMemberAccess	msgtimer -> start
>894	Identifier	start
>895	Identifier	msgtimer
>896	IfStatement	if ( msg -> isPrivate ( ) )
>897	ReturnStatement	 
>898	Condition	 
>899	CallExpression	msg -> isPrivate ( )
>900	ArgumentList	 
>901	Callee	msg -> isPrivate
>902	PtrMemberAccess	msg -> isPrivate
>903	Identifier	isPrivate
>904	Identifier	msg
>920	FunctionDef	TwitchIrc 
>921	ParameterList	 
>922	ReturnType	void
>923	CompoundStatement	 
>924	ExpressionStatement	 
>925	AssignmentExpr	haveGotMsg = false
>926	Identifier	false
>927	Identifier	haveGotMsg
>928	ExpressionStatement	 
>929	CallExpression	postMsg ( \"No Twitch chat message in 2 minutes!\" , true )
>930	ArgumentList	\"No Twitch chat message in 2 minutes!\"
>931	Argument	true
>932	Identifier	true
>933	Argument	\"No Twitch chat message in 2 minutes!\"
>934	PrimaryExpression	\"No Twitch chat message in 2 minutes!\"
>935	Callee	postMsg
>936	Identifier	postMsg
>943	FunctionDef	TwitchIrc 
>944	ParameterList	 
>945	ReturnType	void
>946	CompoundStatement	 
>947	ExpressionStatement	 
>948	CallExpression	conn -> open ( )
>949	ArgumentList	 
>950	Callee	conn -> open
>951	PtrMemberAccess	conn -> open
>952	Identifier	open
>953	Identifier	conn
>954	IfStatement	if ( conn -> isConnected ( ) )
>955	ReturnStatement	 
>956	Condition	 
>957	CallExpression	conn -> isConnected ( )
>958	ArgumentList	 
>959	Callee	conn -> isConnected
>960	PtrMemberAccess	conn -> isConnected
>961	Identifier	isConnected
>962	Identifier	conn
>963	IfStatement	if ( ! conn )
>964	ReturnStatement	 
>965	Condition	 
>966	UnaryOp	! conn
>967	Identifier	conn
>968	UnaryOperator	!
<3=11,4
<4=8,5
<5=7,6
<8=10,9
<11=442,438,429,422,415,406,397,396,395,394,393,392,391,390,389,388,387,386,385,384,12,41,70,77,86,95,102,111,120,124,133,142,151,160,167,213,244,248,249,250,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,377,378,379,380,381,382,383
<12=13
<13=39,14
<14=37,27,25,15
<15=16
<16=23,17
<17=18
<18=19
<19=21,20
<21=22
<23=24
<25=26
<27=28
<28=35,29
<29=30
<30=31
<31=33,32
<33=34
<35=36
<37=38
<39=40
<41=42
<42=68,43
<43=66,56,54,44
<44=45
<45=52,46
<46=47
<47=48
<48=50,49
<50=51
<52=53
<54=55
<56=57
<57=64,58
<58=59
<59=60
<60=62,61
<62=63
<64=65
<66=67
<68=69
<70=71
<71=73,72
<73=74
<74=76,75
<77=78
<78=82,79
<79=80
<80=81
<82=83
<83=85,84
<86=87
<87=91,88
<88=89
<89=90
<91=92
<92=94,93
<95=96
<96=101,100,97
<97=99,98
<102=103
<103=107,104
<104=105
<105=106
<107=108
<108=110,109
<111=112
<112=116,113
<113=114
<114=115
<116=117
<117=119,118
<120=121
<121=123,122
<124=125
<125=129,126
<126=127
<127=128
<129=130
<130=132,131
<133=134
<134=138,135
<135=136
<136=137
<138=139
<139=141,140
<142=143
<143=147,144
<144=145
<145=146
<147=148
<148=150,149
<151=152
<152=156,153
<153=154
<154=155
<156=157
<157=159,158
<160=161
<161=166,165,162
<162=164,163
<167=204,168
<168=178,169
<169=170
<170=174,171
<171=172
<172=173
<174=175
<175=177,176
<178=179
<179=202,180
<180=195,181
<181=182
<182=184,183
<184=185
<185=187,186
<187=191,188
<188=189
<189=190
<191=192
<192=194,193
<195=196
<196=198,197
<198=199
<199=201,200
<202=203
<204=205
<205=209,206
<206=207
<207=208
<209=210
<210=212,211
<213=235,214
<214=215
<215=231,216
<216=217
<217=218
<218=220,219
<220=221
<221=223,222
<223=227,224
<224=225
<225=226
<227=228
<228=230,229
<231=232
<232=234,233
<235=236
<236=240,237
<237=238
<238=239
<240=241
<241=243,242
<244=245
<245=247,246
<250=289,280,276,265,251
<251=252
<252=263,253
<253=256,254
<254=255
<256=257
<257=259,258
<259=260
<260=262,261
<263=264
<265=266
<266=272,267
<267=270,268
<268=269
<270=271
<272=273
<273=275,274
<276=277
<277=279,278
<280=281
<281=285,282
<282=283
<283=284
<285=286
<286=288,287
<289=290
<290=300,299,291
<291=298,292
<292=294,293
<294=295
<295=297,296
<323=373,357,324
<324=325
<325=355,326
<326=348,327
<327=328
<328=330,329
<330=331
<331=333,332
<333=344,334
<334=342,335
<335=336
<336=338,337
<338=339
<339=341,340
<342=343
<344=345
<345=347,346
<348=349
<349=351,350
<351=352
<352=354,353
<355=356
<357=358
<358=369,359
<359=367,360
<360=361
<361=363,362
<363=364
<364=366,365
<367=368
<369=370
<370=372,371
<373=374
<374=376,375
<397=398
<398=402,399
<399=400
<400=401
<402=403
<403=405,404
<406=407
<407=411,408
<408=409
<409=410
<411=412
<412=414,413
<415=416
<416=421,420,417
<417=419,418
<422=423
<423=428,427,424
<424=426,425
<429=430
<430=434,431
<431=432
<432=433
<434=435
<435=437,436
<438=439
<439=441,440
<442=443
<443=445,444
<477=486,485,478
<478=482,479
<479=481,480
<482=484,483
<486=650,648,642,633,624,615,606,577,548,519,518,517,516,515,514,513,512,511,510,509,508,507,506,505,504,503,502,501,500,499,498,497,496,495,494,487
<487=488
<488=490,489
<490=491
<491=493,492
<519=520
<520=546,521
<521=544,534,532,522
<522=523
<523=530,524
<524=525
<525=526
<526=528,527
<528=529
<530=531
<532=533
<534=535
<535=542,536
<536=537
<537=538
<538=540,539
<540=541
<542=543
<544=545
<546=547
<548=549
<549=575,550
<550=573,563,561,551
<551=552
<552=559,553
<553=554
<554=555
<555=557,556
<557=558
<559=560
<561=562
<563=564
<564=571,565
<565=566
<566=567
<567=569,568
<569=570
<571=572
<573=574
<575=576
<577=578
<578=604,579
<579=602,592,590,580
<580=581
<581=588,582
<582=583
<583=584
<584=586,585
<586=587
<588=589
<590=591
<592=593
<593=600,594
<594=595
<595=596
<596=598,597
<598=599
<600=601
<602=603
<604=605
<606=607
<607=611,608
<608=609
<609=610
<611=612
<612=614,613
<615=616
<616=620,617
<617=618
<618=619
<620=621
<621=623,622
<624=625
<625=629,626
<626=627
<627=628
<629=630
<630=632,631
<633=634
<634=638,635
<635=636
<636=637
<638=639
<639=641,640
<642=643
<643=647,644
<644=646,645
<648=649
<650=652,651
<652=653
<669=678,677,670
<670=674,671
<671=673,672
<674=676,675
<678=721,710,701,679
<679=690,680
<680=681
<681=682
<682=686,683
<683=684
<684=685
<686=687
<687=689,688
<690=691
<691=700,692
<692=699,693
<693=695,694
<695=696
<696=698,697
<701=702
<702=706,703
<703=704
<704=705
<706=707
<707=709,708
<710=712,711
<712=713
<713=715,714
<715=717,716
<717=718
<718=720,719
<721=722
<722=726,723
<723=724
<724=725
<726=727
<727=729,728
<742=745,744,743
<745=746
<746=747
<747=756,748
<748=749
<749=750
<750=754,751
<751=752
<752=753
<754=755
<756=757
<762=765,764,763
<765=787,773,766
<766=767
<767=769,768
<769=770
<770=772,771
<773=774
<774=783,775
<775=776
<776=777
<777=781,778
<778=779
<779=780
<781=782
<783=784
<784=786,785
<787=788
<788=794,789
<789=792,790
<790=791
<792=793
<794=795
<803=806,805,804
<806=807
<807=808
<808=814,809
<809=812,810
<810=811
<812=813
<814=815
<820=826,825,821
<821=822
<822=824,823
<826=896,889,870,834,827
<827=828
<828=832,829
<829=830
<830=831
<832=833
<834=835
<835=869,868,836
<836=867,837
<837=846,838
<838=839
<839=840
<840=842,841
<842=843
<843=845,844
<846=847
<847=849,848
<849=858,850
<850=851
<851=852
<852=854,853
<854=855
<855=857,856
<858=859
<859=861,860
<861=865,862
<862=863
<863=864
<865=866
<870=885,871
<871=881,872
<872=873
<873=879,874
<874=877,875
<875=876
<877=878
<879=880
<881=882
<882=884,883
<885=886
<886=888,887
<889=890
<890=892,891
<892=893
<893=895,894
<896=898,897
<898=899
<899=901,900
<901=902
<902=904,903
<920=923,922,921
<923=928,924
<924=925
<925=927,926
<928=929
<929=935,930
<930=933,931
<931=932
<933=934
<935=936
<943=946,945,944
<946=963,954,947
<947=948
<948=950,949
<950=951
<951=953,952
<954=956,955
<956=957
<957=959,958
<959=960
<960=962,961
<963=965,964
<965=966
<966=968,967
