>3	FunctionDef	isUnique1 (string s)
>4	ParameterList	string s
>5	Parameter	 
>6	Identifier	s
>7	ParameterType	string
>8	ReturnType	bool
>9	CompoundStatement	 
>10	ReturnStatement	 
>11	Identifier	true
>12	ForStatement	for ( int i = 0 ; i < len ; ++ i )
>13	CompoundStatement	 
>14	ExpressionStatement	 
>15	AssignmentExpr	a [ v ] = true
>16	Identifier	true
>17	ArrayIndexing	a [ v ]
>18	Identifier	v
>19	Identifier	a
>20	IfStatement	if ( a [ v ] )
>21	ReturnStatement	 
>22	Identifier	false
>23	Condition	 
>24	ArrayIndexing	a [ v ]
>25	Identifier	v
>26	Identifier	a
>27	IdentifierDeclStatement	 
>28	IdentifierDecl	v = ( int ) s [ i ]
>29	AssignmentExpr	v = ( int ) s [ i ]
>30	CastExpression	( int ) s [ i ]
>31	ArrayIndexing	s [ i ]
>32	Identifier	i
>33	Identifier	s
>34	CastTarget	int
>35	Identifier	v
>36	Identifier	v
>37	IdentifierDeclType	int
>38	UnaryExpression	 
>39	Identifier	i
>40	IncDec	++
>41	Condition	 
>42	RelationalExpression	i < len
>43	Identifier	len
>44	Identifier	i
>45	ForInit	 
>46	IdentifierDeclStatement	int i = 0 ;
>47	IdentifierDecl	i = 0
>48	AssignmentExpr	i = 0
>49	PrimaryExpression	0
>50	Identifier	i
>51	Identifier	i
>52	IdentifierDeclType	int
>53	IdentifierDeclStatement	 
>54	IdentifierDecl	len = s . length ( )
>55	AssignmentExpr	len = s . length ( )
>56	CallExpression	s . length ( )
>57	ArgumentList	 
>58	Callee	s . length
>59	MemberAccess	s . length
>60	Identifier	length
>61	Identifier	s
>62	Identifier	len
>63	Identifier	len
>64	IdentifierDeclType	int
>65	ExpressionStatement	 
>66	CallExpression	memset ( a , 0 , sizeof ( a ) )
>67	ArgumentList	a
>68	Argument	sizeof ( a )
>69	SizeofExpr	sizeof ( a )
>70	SizeofOperand	a
>71	Sizeof	sizeof
>72	Argument	0
>73	PrimaryExpression	0
>74	Argument	a
>75	Identifier	a
>76	Callee	memset
>77	Identifier	memset
>78	IdentifierDeclStatement	 
>79	IdentifierDecl	a [ 256 ]
>80	PrimaryExpression	256
>81	Identifier	a
>82	IdentifierDeclType	bool [ 256 ]
>98	FunctionDef	isUnique2 (string s)
>99	ParameterList	string s
>100	Parameter	 
>101	Identifier	s
>102	ParameterType	string
>103	ReturnType	bool
>104	CompoundStatement	 
>105	ReturnStatement	 
>106	Identifier	true
>107	ForStatement	for ( int i = 0 ; i < len ; ++ i )
>108	CompoundStatement	 
>109	ExpressionStatement	 
>110	AssignmentExpr	a [ idx ] |= ( 1 << shift )
>111	ShiftExpression	1 << shift
>112	Identifier	shift
>113	PrimaryExpression	1
>114	ArrayIndexing	a [ idx ]
>115	Identifier	idx
>116	Identifier	a
>117	IfStatement	if ( a [ idx ] & ( 1 << shift ) )
>118	ReturnStatement	 
>119	Identifier	false
>120	Condition	 
>121	BitAndExpression	a [ idx ] & ( 1 << shift )
>122	ShiftExpression	1 << shift
>123	Identifier	shift
>124	PrimaryExpression	1
>125	ArrayIndexing	a [ idx ]
>126	Identifier	idx
>127	Identifier	a
>128	IdentifierDeclStatement	 
>129	IdentifierDecl	shift = v % 32
>130	AssignmentExpr	shift = v % 32
>131	MultiplicativeExpression	v % 32
>132	PrimaryExpression	32
>133	Identifier	v
>134	Identifier	shift
>135	Identifier	shift
>136	IdentifierDeclType	int
>137	IdentifierDecl	idx = v / 32
>138	AssignmentExpr	idx = v / 32
>139	MultiplicativeExpression	v / 32
>140	PrimaryExpression	32
>141	Identifier	v
>142	Identifier	idx
>143	Identifier	idx
>144	IdentifierDeclType	int
>145	IdentifierDeclStatement	 
>146	IdentifierDecl	v = ( int ) s [ i ]
>147	AssignmentExpr	v = ( int ) s [ i ]
>148	CastExpression	( int ) s [ i ]
>149	ArrayIndexing	s [ i ]
>150	Identifier	i
>151	Identifier	s
>152	CastTarget	int
>153	Identifier	v
>154	Identifier	v
>155	IdentifierDeclType	int
>156	UnaryExpression	 
>157	Identifier	i
>158	IncDec	++
>159	Condition	 
>160	RelationalExpression	i < len
>161	Identifier	len
>162	Identifier	i
>163	ForInit	 
>164	IdentifierDeclStatement	int i = 0 ;
>165	IdentifierDecl	i = 0
>166	AssignmentExpr	i = 0
>167	PrimaryExpression	0
>168	Identifier	i
>169	Identifier	i
>170	IdentifierDeclType	int
>171	IdentifierDeclStatement	 
>172	IdentifierDecl	len = s . length ( )
>173	AssignmentExpr	len = s . length ( )
>174	CallExpression	s . length ( )
>175	ArgumentList	 
>176	Callee	s . length
>177	MemberAccess	s . length
>178	Identifier	length
>179	Identifier	s
>180	Identifier	len
>181	Identifier	len
>182	IdentifierDeclType	int
>183	ExpressionStatement	 
>184	CallExpression	memset ( a , 0 , sizeof ( a ) )
>185	ArgumentList	a
>186	Argument	sizeof ( a )
>187	SizeofExpr	sizeof ( a )
>188	SizeofOperand	a
>189	Sizeof	sizeof
>190	Argument	0
>191	PrimaryExpression	0
>192	Argument	a
>193	Identifier	a
>194	Callee	memset
>195	Identifier	memset
>196	IdentifierDeclStatement	 
>197	IdentifierDecl	a [ 8 ]
>198	PrimaryExpression	8
>199	Identifier	a
>200	IdentifierDeclType	int [ 8 ]
>218	FunctionDef	isUnique3 (string s)
>219	ParameterList	string s
>220	Parameter	 
>221	Identifier	s
>222	ParameterType	string
>223	ReturnType	bool
>224	CompoundStatement	 
>225	ReturnStatement	 
>226	Identifier	true
>227	ForStatement	for ( int i = 0 ; i < len ; ++ i )
>228	CompoundStatement	 
>229	ExpressionStatement	 
>230	AssignmentExpr	check |= ( 1 << v )
>231	ShiftExpression	1 << v
>232	Identifier	v
>233	PrimaryExpression	1
>234	Identifier	check
>235	IfStatement	if ( check & ( 1 << v ) )
>236	ReturnStatement	 
>237	Identifier	false
>238	Condition	 
>239	BitAndExpression	check & ( 1 << v )
>240	ShiftExpression	1 << v
>241	Identifier	v
>242	PrimaryExpression	1
>243	Identifier	check
>244	IdentifierDeclStatement	 
>245	IdentifierDecl	v = ( int ) ( s [ i ] - 'a' )
>246	AssignmentExpr	v = ( int ) ( s [ i ] - 'a' )
>247	CastExpression	( int ) ( s [ i ] - 'a' )
>248	AdditiveExpression	s [ i ] - 'a'
>249	PrimaryExpression	'a'
>250	ArrayIndexing	s [ i ]
>251	Identifier	i
>252	Identifier	s
>253	CastTarget	int
>254	Identifier	v
>255	Identifier	v
>256	IdentifierDeclType	int
>257	UnaryExpression	 
>258	Identifier	i
>259	IncDec	++
>260	Condition	 
>261	RelationalExpression	i < len
>262	Identifier	len
>263	Identifier	i
>264	ForInit	 
>265	IdentifierDeclStatement	int i = 0 ;
>266	IdentifierDecl	i = 0
>267	AssignmentExpr	i = 0
>268	PrimaryExpression	0
>269	Identifier	i
>270	Identifier	i
>271	IdentifierDeclType	int
>272	IdentifierDeclStatement	 
>273	IdentifierDecl	len = s . length ( )
>274	AssignmentExpr	len = s . length ( )
>275	CallExpression	s . length ( )
>276	ArgumentList	 
>277	Callee	s . length
>278	MemberAccess	s . length
>279	Identifier	length
>280	Identifier	s
>281	Identifier	len
>282	Identifier	len
>283	IdentifierDeclType	int
>284	IdentifierDeclStatement	 
>285	IdentifierDecl	check = 0
>286	AssignmentExpr	check = 0
>287	PrimaryExpression	0
>288	Identifier	check
>289	Identifier	check
>290	IdentifierDeclType	int
>304	FunctionDef	main ()
>305	ParameterList	 
>306	ReturnType	int
>307	CompoundStatement	 
>308	ReturnStatement	 
>309	PrimaryExpression	0
>310	ExpressionStatement	 
>311	ShiftExpression	cout << isUnique2 ( s1 ) << \" \" << isUnique2 ( s2 ) << endl
>312	ShiftExpression	isUnique2 ( s1 ) << \" \" << isUnique2 ( s2 ) << endl
>313	ShiftExpression	\" \" << isUnique2 ( s2 ) << endl
>314	ShiftExpression	isUnique2 ( s2 ) << endl
>315	Identifier	endl
>316	CallExpression	isUnique2 ( s2 )
>317	ArgumentList	s2
>318	Argument	s2
>319	Identifier	s2
>320	Callee	isUnique2
>321	Identifier	isUnique2
>322	PrimaryExpression	\" \"
>323	CallExpression	isUnique2 ( s1 )
>324	ArgumentList	s1
>325	Argument	s1
>326	Identifier	s1
>327	Callee	isUnique2
>328	Identifier	isUnique2
>329	Identifier	cout
>330	ExpressionStatement	 
>331	ShiftExpression	cout << isUnique1 ( s1 ) << \" \" << isUnique1 ( s2 ) << endl
>332	ShiftExpression	isUnique1 ( s1 ) << \" \" << isUnique1 ( s2 ) << endl
>333	ShiftExpression	\" \" << isUnique1 ( s2 ) << endl
>334	ShiftExpression	isUnique1 ( s2 ) << endl
>335	Identifier	endl
>336	CallExpression	isUnique1 ( s2 )
>337	ArgumentList	s2
>338	Argument	s2
>339	Identifier	s2
>340	Callee	isUnique1
>341	Identifier	isUnique1
>342	PrimaryExpression	\" \"
>343	CallExpression	isUnique1 ( s1 )
>344	ArgumentList	s1
>345	Argument	s1
>346	Identifier	s1
>347	Callee	isUnique1
>348	Identifier	isUnique1
>349	Identifier	cout
>350	IdentifierDeclStatement	 
>351	IdentifierDecl	s2 = \"abcdefghijklmnopqrstuvwxyz1234567890\"
>352	AssignmentExpr	s2 = \"abcdefghijklmnopqrstuvwxyz1234567890\"
>353	PrimaryExpression	\"abcdefghijklmnopqrstuvwxyz1234567890\"
>354	Identifier	s2
>355	Identifier	s2
>356	IdentifierDeclType	string
>357	IdentifierDeclStatement	 
>358	IdentifierDecl	s1 = \"i am hawstein.\"
>359	AssignmentExpr	s1 = \"i am hawstein.\"
>360	PrimaryExpression	\"i am hawstein.\"
>361	Identifier	s1
>362	Identifier	s1
>363	IdentifierDeclType	string
<3=9,8,4
<4=5
<5=7,6
<9=78,65,53,12,10
<10=11
<12=45,41,38,13
<13=27,20,14
<14=15
<15=17,16
<17=19,18
<20=23,21
<21=22
<23=24
<24=26,25
<27=28
<28=37,36,29
<29=35,30
<30=34,31
<31=33,32
<38=40,39
<41=42
<42=44,43
<45=46
<46=47
<47=52,51,48
<48=50,49
<53=54
<54=64,63,55
<55=62,56
<56=58,57
<58=59
<59=61,60
<65=66
<66=76,67
<67=74,72,68
<68=69
<69=71,70
<72=73
<74=75
<76=77
<78=79
<79=82,81,80
<98=104,103,99
<99=100
<100=102,101
<104=196,183,171,107,105
<105=106
<107=163,159,156,108
<108=145,128,117,109
<109=110
<110=114,111
<111=113,112
<114=116,115
<117=120,118
<118=119
<120=121
<121=125,122
<122=124,123
<125=127,126
<128=137,129
<129=136,135,130
<130=134,131
<131=133,132
<137=144,143,138
<138=142,139
<139=141,140
<145=146
<146=155,154,147
<147=153,148
<148=152,149
<149=151,150
<156=158,157
<159=160
<160=162,161
<163=164
<164=165
<165=170,169,166
<166=168,167
<171=172
<172=182,181,173
<173=180,174
<174=176,175
<176=177
<177=179,178
<183=184
<184=194,185
<185=192,190,186
<186=187
<187=189,188
<190=191
<192=193
<194=195
<196=197
<197=200,199,198
<218=224,223,219
<219=220
<220=222,221
<224=284,272,227,225
<225=226
<227=264,260,257,228
<228=244,235,229
<229=230
<230=234,231
<231=233,232
<235=238,236
<236=237
<238=239
<239=243,240
<240=242,241
<244=245
<245=256,255,246
<246=254,247
<247=253,248
<248=250,249
<250=252,251
<257=259,258
<260=261
<261=263,262
<264=265
<265=266
<266=271,270,267
<267=269,268
<272=273
<273=283,282,274
<274=281,275
<275=277,276
<277=278
<278=280,279
<284=285
<285=290,289,286
<286=288,287
<304=307,306,305
<307=357,350,330,310,308
<308=309
<310=311
<311=329,312
<312=323,313
<313=322,314
<314=316,315
<316=320,317
<317=318
<318=319
<320=321
<323=327,324
<324=325
<325=326
<327=328
<330=331
<331=349,332
<332=343,333
<333=342,334
<334=336,335
<336=340,337
<337=338
<338=339
<340=341
<343=347,344
<344=345
<345=346
<347=348
<350=351
<351=356,355,352
<352=354,353
<357=358
<358=363,362,359
<359=361,360
