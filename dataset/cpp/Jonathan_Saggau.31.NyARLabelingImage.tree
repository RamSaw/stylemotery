>3	FunctionDef	f ()
>4	ParameterList	 
>5	ReturnType	void
>6	CompoundStatement	 
>7	IdentifierDeclStatement	 
>8	IdentifierDecl	a ( 1 , 2 )
>9	Expression	1 , 2
>10	PrimaryExpression	2
>11	PrimaryExpression	1
>12	Identifier	a
>13	IdentifierDeclType	NyARLabelingImage
>18	FunctionDef	NyARLabelingImage 
>19	ParameterList	 
>20	ReturnType	int
>21	CompoundStatement	 
>22	ReturnStatement	 
>23	MemberAccess	this -> _size . w
>24	Identifier	w
>25	PtrMemberAccess	this -> _size
>26	Identifier	_size
>27	Identifier	this
>35	FunctionDef	NyARLabelingImage 
>36	ParameterList	 
>37	ReturnType	int
>38	CompoundStatement	 
>39	ReturnStatement	 
>40	MemberAccess	this -> _size . h
>41	Identifier	h
>42	PtrMemberAccess	this -> _size
>43	Identifier	_size
>44	Identifier	this
>52	FunctionDef	NyARLabelingImage 
>53	ParameterList	 
>54	ReturnType	const TNyARIntSize *
>55	CompoundStatement	 
>56	ReturnStatement	 
>57	UnaryOp	& this -> _size
>58	PtrMemberAccess	this -> _size
>59	Identifier	_size
>60	Identifier	this
>61	UnaryOperator	&
>72	FunctionDef	NyARLabelingImage 
>73	ParameterList	int i_width , int i_height
>74	Parameter	 
>75	Identifier	i_height
>76	ParameterType	int
>77	Parameter	 
>78	Identifier	i_width
>79	ParameterType	int
>80	CompoundStatement	 
>81	ReturnStatement	 
>82	ExpressionStatement	 
>83	AssignmentExpr	this -> _buffer_reader = new NyARBufferReader ( this -> _ref_buf , INyARBufferReader 
>84	Expression	this -> _ref_buf , INyARBufferReader 
>85	Identifier	INyARBufferReader 
>86	PtrMemberAccess	this -> _ref_buf
>87	Identifier	_ref_buf
>88	Identifier	this
>89	PtrMemberAccess	this -> _buffer_reader
>90	Identifier	_buffer_reader
>91	Identifier	this
>92	ExpressionStatement	 
>93	AssignmentExpr	this -> _is_index_table_enable = false
>94	Identifier	false
>95	PtrMemberAccess	this -> _is_index_table_enable
>96	Identifier	_is_index_table_enable
>97	Identifier	this
>98	ExpressionStatement	 
>99	AssignmentExpr	this -> _index_table = new NyArray < int > ( MAX_LABELS )
>100	Identifier	MAX_LABELS
>101	PtrMemberAccess	this -> _index_table
>102	Identifier	_index_table
>103	Identifier	this
>104	ExpressionStatement	 
>105	AssignmentExpr	this -> _label_list = new NyARLabelingLabelStack ( MAX_LABELS )
>106	Identifier	MAX_LABELS
>107	PtrMemberAccess	this -> _label_list
>108	Identifier	_label_list
>109	Identifier	this
>110	ExpressionStatement	 
>111	AssignmentExpr	this -> _ref_buf = new int [ i_height * i_width ]
>112	MultiplicativeExpression	i_height * i_width
>113	Identifier	i_width
>114	Identifier	i_height
>115	PtrMemberAccess	this -> _ref_buf
>116	Identifier	_ref_buf
>117	Identifier	this
>118	ExpressionStatement	 
>119	AssignmentExpr	this -> _size . h = i_height
>120	Identifier	i_height
>121	MemberAccess	this -> _size . h
>122	Identifier	h
>123	PtrMemberAccess	this -> _size
>124	Identifier	_size
>125	Identifier	this
>126	ExpressionStatement	 
>127	AssignmentExpr	this -> _size . w = i_width
>128	Identifier	i_width
>129	MemberAccess	this -> _size . w
>130	Identifier	w
>131	PtrMemberAccess	this -> _size
>132	Identifier	_size
>133	Identifier	this
>152	FunctionDef	NyARLabelingImage 
>153	ParameterList	 
>154	CompoundStatement	 
>155	ReturnStatement	 
>156	ExpressionStatement	 
>157	CallExpression	NyAR_SAFE_DELETE ( this -> _ref_buf )
>158	ArgumentList	this -> _ref_buf
>159	Argument	this -> _ref_buf
>160	PtrMemberAccess	this -> _ref_buf
>161	Identifier	_ref_buf
>162	Identifier	this
>163	Callee	NyAR_SAFE_DELETE
>164	Identifier	NyAR_SAFE_DELETE
>165	ExpressionStatement	 
>166	CallExpression	NyAR_SAFE_DELETE ( this -> _label_list )
>167	ArgumentList	this -> _label_list
>168	Argument	this -> _label_list
>169	PtrMemberAccess	this -> _label_list
>170	Identifier	_label_list
>171	Identifier	this
>172	Callee	NyAR_SAFE_DELETE
>173	Identifier	NyAR_SAFE_DELETE
>174	ExpressionStatement	 
>175	CallExpression	NyAR_SAFE_DELETE ( this -> _index_table )
>176	ArgumentList	this -> _index_table
>177	Argument	this -> _index_table
>178	PtrMemberAccess	this -> _index_table
>179	Identifier	_index_table
>180	Identifier	this
>181	Callee	NyAR_SAFE_DELETE
>182	Identifier	NyAR_SAFE_DELETE
>183	ExpressionStatement	 
>184	CallExpression	NyAR_SAFE_DELETE ( this -> _buffer_reader )
>185	ArgumentList	this -> _buffer_reader
>186	Argument	this -> _buffer_reader
>187	PtrMemberAccess	this -> _buffer_reader
>188	Identifier	_buffer_reader
>189	Identifier	this
>190	Callee	NyAR_SAFE_DELETE
>191	Identifier	NyAR_SAFE_DELETE
>201	FunctionDef	NyARLabelingImage 
>202	ParameterList	 
>203	ReturnType	const INyARBufferReader *
>204	CompoundStatement	 
>205	ReturnStatement	 
>206	PtrMemberAccess	this -> _buffer_reader
>207	Identifier	_buffer_reader
>208	Identifier	this
>215	FunctionDef	NyARLabelingImage 
>216	ParameterList	 
>217	ReturnType	const NyArray < int > *
>218	CompoundStatement	 
>219	ReturnStatement	 
>220	ConditionalExpression	this -> _is_index_table_enable ? this -> _index_table 
>221	Identifier	NULL
>222	PtrMemberAccess	this -> _index_table
>223	Identifier	_index_table
>224	Identifier	this
>225	Condition	this -> _is_index_table_enable
>226	PtrMemberAccess	this -> _is_index_table_enable
>227	Identifier	_is_index_table_enable
>228	Identifier	this
>237	FunctionDef	NyARLabelingImage 
>238	ParameterList	 
>239	ReturnType	NyARLabelingLabelStack *
>240	CompoundStatement	 
>241	ReturnStatement	 
>242	PtrMemberAccess	this -> _label_list
>243	Identifier	_label_list
>244	Identifier	this
>251	FunctionDef	NyARLabelingImage 
>252	ParameterList	bool i_label_index_enable
>253	Parameter	 
>254	Identifier	i_label_index_enable
>255	ParameterType	bool
>256	ReturnType	void
>257	CompoundStatement	 
>258	ReturnStatement	 
>259	ExpressionStatement	 
>260	AssignmentExpr	this -> _is_index_table_enable = i_label_index_enable
>261	Identifier	i_label_index_enable
>262	PtrMemberAccess	this -> _is_index_table_enable
>263	Identifier	_is_index_table_enable
>264	Identifier	this
>265	ExpressionStatement	 
>266	CallExpression	this -> _label_list -> clear ( )
>267	ArgumentList	 
>268	Callee	this -> _label_list -> clear
>269	PtrMemberAccess	this -> _label_list -> clear
>270	Identifier	clear
>271	PtrMemberAccess	this -> _label_list
>272	Identifier	_label_list
>273	Identifier	this
>274	ExpressionStatement	 
>275	CallExpression	NyAR_ASSERT ( i_label_index_enable == true )
>276	ArgumentList	i_label_index_enable == true
>277	Argument	i_label_index_enable == true
>278	EqualityExpression	i_label_index_enable == true
>279	Identifier	true
>280	Identifier	i_label_index_enable
>281	Callee	NyAR_ASSERT
>282	Identifier	NyAR_ASSERT
>292	FunctionDef	NyARLabelingImage 
>293	ParameterList	const NyARLabelingLabel & i_label
>294	Parameter	 
>295	Identifier	i_label
>296	ParameterType	const NyARLabelingLabel &
>297	ReturnType	int
>298	CompoundStatement	 
>299	ExpressionStatement	 
>300	CallExpression	NyARException ( )
>301	ArgumentList	 
>302	Callee	NyARException
>303	Identifier	NyARException
>304	Statement	 
>305	ForStatement	for ( int i = i_label . clip_l ; i <= clip1 ; i ++ )
>306	CompoundStatement	 
>307	IfStatement	if ( pix > 0 && index_table [ pix - 1 ] == i_label_id )
>308	CompoundStatement	 
>309	ReturnStatement	 
>310	Identifier	i
>311	Condition	 
>312	AndExpression	pix > 0 && index_table [ pix - 1 ] == i_label_id
>313	EqualityExpression	index_table [ pix - 1 ] == i_label_id
>314	Identifier	i_label_id
>315	ArrayIndexing	index_table [ pix - 1 ]
>316	AdditiveExpression	pix - 1
>317	PrimaryExpression	1
>318	Identifier	pix
>319	Identifier	index_table
>320	RelationalExpression	pix > 0
>321	PrimaryExpression	0
>322	Identifier	pix
>323	ExpressionStatement	 
>324	AssignmentExpr	pix = limage [ limage_ptr + i ]
>325	ArrayIndexing	limage [ limage_ptr + i ]
>326	AdditiveExpression	limage_ptr + i
>327	Identifier	i
>328	Identifier	limage_ptr
>329	Identifier	limage
>330	Identifier	pix
>331	IncDecOp	 
>332	IncDec	++
>333	Identifier	i
>334	Condition	 
>335	RelationalExpression	i <= clip1
>336	Identifier	clip1
>337	Identifier	i
>338	ForInit	 
>339	IdentifierDeclStatement	int i = i_label . clip_l ;
>340	IdentifierDecl	i = i_label . clip_l
>341	AssignmentExpr	i = i_label . clip_l
>342	MemberAccess	i_label . clip_l
>343	Identifier	clip_l
>344	Identifier	i_label
>345	Identifier	i
>346	Identifier	i
>347	IdentifierDeclType	int
>348	IdentifierDeclStatement	 
>349	IdentifierDecl	clip1 = i_label . clip_r
>350	AssignmentExpr	clip1 = i_label . clip_r
>351	MemberAccess	i_label . clip_r
>352	Identifier	clip_r
>353	Identifier	i_label
>354	Identifier	clip1
>355	Identifier	clip1
>356	IdentifierDeclType	int
>357	IdentifierDeclStatement	 
>358	IdentifierDecl	limage_ptr = i_label . clip_t * this -> _size . w
>359	AssignmentExpr	limage_ptr = i_label . clip_t * this -> _size . w
>360	MultiplicativeExpression	i_label . clip_t * this -> _size . w
>361	MemberAccess	this -> _size . w
>362	Identifier	w
>363	PtrMemberAccess	this -> _size
>364	Identifier	_size
>365	Identifier	this
>366	MemberAccess	i_label . clip_t
>367	Identifier	clip_t
>368	Identifier	i_label
>369	Identifier	limage_ptr
>370	Identifier	limage_ptr
>371	IdentifierDeclType	int
>372	IdentifierDeclStatement	 
>373	IdentifierDecl	* limage = this -> _ref_buf
>374	AssignmentExpr	* limage = this -> _ref_buf
>375	PtrMemberAccess	this -> _ref_buf
>376	Identifier	_ref_buf
>377	Identifier	this
>378	Identifier	limage
>379	Identifier	limage
>380	IdentifierDeclType	const int *
>381	IdentifierDeclStatement	 
>382	IdentifierDecl	* index_table = this -> _index_table -> item
>383	AssignmentExpr	* index_table = this -> _index_table -> item
>384	PtrMemberAccess	this -> _index_table -> item
>385	Identifier	item
>386	PtrMemberAccess	this -> _index_table
>387	Identifier	_index_table
>388	Identifier	this
>389	Identifier	index_table
>390	Identifier	index_table
>391	IdentifierDeclType	const int *
>392	IdentifierDeclStatement	 
>393	IdentifierDecl	i_label_id = i_label . id
>394	AssignmentExpr	i_label_id = i_label . id
>395	MemberAccess	i_label . id
>396	Identifier	id
>397	Identifier	i_label
>398	Identifier	i_label_id
>399	Identifier	i_label_id
>400	IdentifierDeclType	int
>401	IdentifierDeclStatement	 
>402	IdentifierDecl	pix
>403	Identifier	pix
>404	IdentifierDeclType	int
>434	FunctionDef	NyARLabelingImage 
>435	ParameterList	int i_index , int i_array_size , int o_coord_x [ ] , int o_coord_y [ ]
>436	Parameter	 
>437	Identifier	o_coord_y
>438	ParameterType	int [ ]
>439	Parameter	 
>440	Identifier	o_coord_x
>441	ParameterType	int [ ]
>442	Parameter	 
>443	Identifier	i_array_size
>444	ParameterType	int
>445	Parameter	 
>446	Identifier	i_index
>447	ParameterType	int
>448	ReturnType	int
>449	CompoundStatement	 
>450	ReturnStatement	 
>451	Identifier	coord_num
>452	ForStatement	for ( ; ; )
>453	CompoundStatement	 
>454	IfStatement	if ( coord_num == i_array_size )
>455	CompoundStatement	 
>456	ReturnStatement	 
>457	Identifier	coord_num
>458	Condition	 
>459	EqualityExpression	coord_num == i_array_size
>460	Identifier	i_array_size
>461	Identifier	coord_num
>462	ExpressionStatement	 
>463	IncDecOp	coord_num ++
>464	IncDec	++
>465	Identifier	coord_num
>466	IfStatement	if ( c == sx && r == sy )
>467	CompoundStatement	 
>468	BreakStatement	 
>469	ExpressionStatement	 
>470	IncDecOp	coord_num ++
>471	IncDec	++
>472	Identifier	coord_num
>473	Condition	 
>474	AndExpression	c == sx && r == sy
>475	EqualityExpression	r == sy
>476	Identifier	sy
>477	Identifier	r
>478	EqualityExpression	c == sx
>479	Identifier	sx
>480	Identifier	c
>481	ExpressionStatement	 
>482	AssignmentExpr	o_coord_y [ coord_num ] = r
>483	Identifier	r
>484	ArrayIndexing	o_coord_y [ coord_num ]
>485	Identifier	coord_num
>486	Identifier	o_coord_y
>487	ExpressionStatement	 
>488	AssignmentExpr	o_coord_x [ coord_num ] = c
>489	Identifier	c
>490	ArrayIndexing	o_coord_x [ coord_num ]
>491	Identifier	coord_num
>492	Identifier	o_coord_x
>493	ExpressionStatement	 
>494	AssignmentExpr	r = r + ydir [ dir ]
>495	AdditiveExpression	r + ydir [ dir ]
>496	ArrayIndexing	ydir [ dir ]
>497	Identifier	dir
>498	Identifier	ydir
>499	Identifier	r
>500	Identifier	r
>501	ExpressionStatement	 
>502	AssignmentExpr	c = c + xdir [ dir ]
>503	AdditiveExpression	c + xdir [ dir ]
>504	ArrayIndexing	xdir [ dir ]
>505	Identifier	dir
>506	Identifier	xdir
>507	Identifier	c
>508	Identifier	c
>509	IfStatement	if ( i == 8 )
>510	CompoundStatement	 
>511	ExpressionStatement	 
>512	CallExpression	NyARException ( )
>513	ArgumentList	 
>514	Callee	NyARException
>515	Identifier	NyARException
>516	Statement	 
>517	Condition	 
>518	EqualityExpression	i == 8
>519	PrimaryExpression	8
>520	Identifier	i
>521	ForStatement	for ( i = 0 ; i < 8 ; i ++ )
>522	CompoundStatement	 
>523	ExpressionStatement	 
>524	AssignmentExpr	dir = ( dir + 1 ) % 8
>525	MultiplicativeExpression	( dir + 1 ) % 8
>526	PrimaryExpression	8
>527	AdditiveExpression	dir + 1
>528	PrimaryExpression	1
>529	Identifier	dir
>530	Identifier	dir
>531	IfStatement	if ( limage [ ( r + ydir [ dir ] ) * width + ( c + xdir [ dir ] ) ] > 0 )
>532	CompoundStatement	 
>533	BreakStatement	 
>534	Condition	 
>535	RelationalExpression	limage [ ( r + ydir [ dir ] ) * width + ( c + xdir [ dir ] ) ] > 0
>536	PrimaryExpression	0
>537	ArrayIndexing	limage [ ( r + ydir [ dir ] ) * width + ( c + xdir [ dir ] ) ]
>538	AdditiveExpression	( r + ydir [ dir ] ) * width + ( c + xdir [ dir ] )
>539	AdditiveExpression	c + xdir [ dir ]
>540	ArrayIndexing	xdir [ dir ]
>541	Identifier	dir
>542	Identifier	xdir
>543	Identifier	c
>544	MultiplicativeExpression	( r + ydir [ dir ] ) * width
>545	Identifier	width
>546	AdditiveExpression	r + ydir [ dir ]
>547	ArrayIndexing	ydir [ dir ]
>548	Identifier	dir
>549	Identifier	ydir
>550	Identifier	r
>551	Identifier	limage
>552	IncDecOp	 
>553	IncDec	++
>554	Identifier	i
>555	Condition	 
>556	RelationalExpression	i < 8
>557	PrimaryExpression	8
>558	Identifier	i
>559	ForInit	 
>560	AssignmentExpr	i = 0
>561	PrimaryExpression	0
>562	Identifier	i
>563	ExpressionStatement	 
>564	AssignmentExpr	dir = ( dir + 5 ) % 8
>565	MultiplicativeExpression	( dir + 5 ) % 8
>566	PrimaryExpression	8
>567	AdditiveExpression	dir + 5
>568	PrimaryExpression	5
>569	Identifier	dir
>570	Identifier	dir
>571	IdentifierDeclStatement	 
>572	IdentifierDecl	r = o_coord_y [ 0 ]
>573	AssignmentExpr	r = o_coord_y [ 0 ]
>574	ArrayIndexing	o_coord_y [ 0 ]
>575	PrimaryExpression	0
>576	Identifier	o_coord_y
>577	Identifier	r
>578	Identifier	r
>579	IdentifierDeclType	int
>580	IdentifierDeclStatement	 
>581	IdentifierDecl	c = o_coord_x [ 0 ]
>582	AssignmentExpr	c = o_coord_x [ 0 ]
>583	ArrayIndexing	o_coord_x [ 0 ]
>584	PrimaryExpression	0
>585	Identifier	o_coord_x
>586	Identifier	c
>587	Identifier	c
>588	IdentifierDeclType	int
>589	IdentifierDeclStatement	 
>590	IdentifierDecl	* limage = this -> _ref_buf
>591	AssignmentExpr	* limage = this -> _ref_buf
>592	PtrMemberAccess	this -> _ref_buf
>593	Identifier	_ref_buf
>594	Identifier	this
>595	Identifier	limage
>596	Identifier	limage
>597	IdentifierDeclType	const int *
>598	IdentifierDeclStatement	 
>599	IdentifierDecl	dir = 5
>600	AssignmentExpr	dir = 5
>601	PrimaryExpression	5
>602	Identifier	dir
>603	Identifier	dir
>604	IdentifierDeclType	int
>605	ExpressionStatement	 
>606	AssignmentExpr	o_coord_y [ 0 ] = sy
>607	Identifier	sy
>608	ArrayIndexing	o_coord_y [ 0 ]
>609	PrimaryExpression	0
>610	Identifier	o_coord_y
>611	ExpressionStatement	 
>612	AssignmentExpr	o_coord_x [ 0 ] = sx
>613	Identifier	sx
>614	ArrayIndexing	o_coord_x [ 0 ]
>615	PrimaryExpression	0
>616	Identifier	o_coord_x
>617	IdentifierDeclStatement	 
>618	IdentifierDecl	coord_num = 1
>619	AssignmentExpr	coord_num = 1
>620	PrimaryExpression	1
>621	Identifier	coord_num
>622	Identifier	coord_num
>623	IdentifierDeclType	int
>624	IdentifierDeclStatement	 
>625	IdentifierDecl	sy = label -> clip_t
>626	AssignmentExpr	sy = label -> clip_t
>627	PtrMemberAccess	label -> clip_t
>628	Identifier	clip_t
>629	Identifier	label
>630	Identifier	sy
>631	Identifier	sy
>632	IdentifierDeclType	int
>633	IdentifierDeclStatement	 
>634	IdentifierDecl	sx = getTopClipTangentX ( * label )
>635	AssignmentExpr	sx = getTopClipTangentX ( * label )
>636	CallExpression	getTopClipTangentX ( * label )
>637	ArgumentList	* label
>638	Argument	* label
>639	UnaryOp	* label
>640	Identifier	label
>641	UnaryOperator	*
>642	Callee	getTopClipTangentX
>643	Identifier	getTopClipTangentX
>644	Identifier	sx
>645	Identifier	sx
>646	IdentifierDeclType	int
>647	IdentifierDeclStatement	 
>648	IdentifierDecl	i
>649	Identifier	i
>650	IdentifierDeclType	int
>651	IdentifierDeclStatement	 
>652	IdentifierDecl	* label = this -> _label_list -> getItem ( i_index )
>653	AssignmentExpr	* label = this -> _label_list -> getItem ( i_index )
>654	CallExpression	this -> _label_list -> getItem ( i_index )
>655	ArgumentList	i_index
>656	Argument	i_index
>657	Identifier	i_index
>658	Callee	this -> _label_list -> getItem
>659	PtrMemberAccess	this -> _label_list -> getItem
>660	Identifier	getItem
>661	PtrMemberAccess	this -> _label_list
>662	Identifier	_label_list
>663	Identifier	this
>664	Identifier	label
>665	Identifier	label
>666	IdentifierDeclType	const NyARLabelingLabel *
>667	IdentifierDeclStatement	 
>668	IdentifierDecl	* ydir = this -> _getContour_ydir
>669	AssignmentExpr	* ydir = this -> _getContour_ydir
>670	PtrMemberAccess	this -> _getContour_ydir
>671	Identifier	_getContour_ydir
>672	Identifier	this
>673	Identifier	ydir
>674	Identifier	ydir
>675	IdentifierDeclType	const int *
>676	IdentifierDeclStatement	 
>677	IdentifierDecl	* xdir = this -> _getContour_xdir
>678	AssignmentExpr	* xdir = this -> _getContour_xdir
>679	PtrMemberAccess	this -> _getContour_xdir
>680	Identifier	_getContour_xdir
>681	Identifier	this
>682	Identifier	xdir
>683	Identifier	xdir
>684	IdentifierDeclType	const int *
>685	IdentifierDeclStatement	 
>686	IdentifierDecl	width = this -> _size . w
>687	AssignmentExpr	width = this -> _size . w
>688	MemberAccess	this -> _size . w
>689	Identifier	w
>690	PtrMemberAccess	this -> _size
>691	Identifier	_size
>692	Identifier	this
>693	Identifier	width
>694	Identifier	width
>695	IdentifierDeclType	const int
<3=6,5,4
<6=7
<7=8
<8=13,12,9
<9=11,10
<18=21,20,19
<21=22
<22=23
<23=25,24
<25=27,26
<35=38,37,36
<38=39
<39=40
<40=42,41
<42=44,43
<52=55,54,53
<55=56
<56=57
<57=61,58
<58=60,59
<72=80,73
<73=77,74
<74=76,75
<77=79,78
<80=126,118,110,104,98,92,82,81
<82=83
<83=89,84
<84=86,85
<86=88,87
<89=91,90
<92=93
<93=95,94
<95=97,96
<98=99
<99=101,100
<101=103,102
<104=105
<105=107,106
<107=109,108
<110=111
<111=115,112
<112=114,113
<115=117,116
<118=119
<119=121,120
<121=123,122
<123=125,124
<126=127
<127=129,128
<129=131,130
<131=133,132
<152=154,153
<154=183,174,165,156,155
<156=157
<157=163,158
<158=159
<159=160
<160=162,161
<163=164
<165=166
<166=172,167
<167=168
<168=169
<169=171,170
<172=173
<174=175
<175=181,176
<176=177
<177=178
<178=180,179
<181=182
<183=184
<184=190,185
<185=186
<186=187
<187=189,188
<190=191
<201=204,203,202
<204=205
<205=206
<206=208,207
<215=218,217,216
<218=219
<219=220
<220=225,222,221
<222=224,223
<225=226
<226=228,227
<237=240,239,238
<240=241
<241=242
<242=244,243
<251=257,256,252
<252=253
<253=255,254
<257=274,265,259,258
<259=260
<260=262,261
<262=264,263
<265=266
<266=268,267
<268=269
<269=271,270
<271=273,272
<274=275
<275=281,276
<276=277
<277=278
<278=280,279
<281=282
<292=298,297,293
<293=294
<294=296,295
<298=401,392,381,372,357,348,305,304,299
<299=300
<300=302,301
<302=303
<305=338,334,331,306
<306=323,307
<307=311,308
<308=309
<309=310
<311=312
<312=320,313
<313=315,314
<315=319,316
<316=318,317
<320=322,321
<323=324
<324=330,325
<325=329,326
<326=328,327
<331=333,332
<334=335
<335=337,336
<338=339
<339=340
<340=347,346,341
<341=345,342
<342=344,343
<348=349
<349=356,355,350
<350=354,351
<351=353,352
<357=358
<358=371,370,359
<359=369,360
<360=366,361
<361=363,362
<363=365,364
<366=368,367
<372=373
<373=380,379,374
<374=378,375
<375=377,376
<381=382
<382=391,390,383
<383=389,384
<384=386,385
<386=388,387
<392=393
<393=400,399,394
<394=398,395
<395=397,396
<401=402
<402=404,403
<434=449,448,435
<435=445,442,439,436
<436=438,437
<439=441,440
<442=444,443
<445=447,446
<449=685,676,667,651,647,633,624,617,611,605,598,589,580,571,452,450
<450=451
<452=453
<453=563,521,509,501,493,487,481,466,462,454
<454=458,455
<455=456
<456=457
<458=459
<459=461,460
<462=463
<463=465,464
<466=473,467
<467=469,468
<469=470
<470=472,471
<473=474
<474=478,475
<475=477,476
<478=480,479
<481=482
<482=484,483
<484=486,485
<487=488
<488=490,489
<490=492,491
<493=494
<494=500,495
<495=499,496
<496=498,497
<501=502
<502=508,503
<503=507,504
<504=506,505
<509=517,510
<510=516,511
<511=512
<512=514,513
<514=515
<517=518
<518=520,519
<521=559,555,552,522
<522=531,523
<523=524
<524=530,525
<525=527,526
<527=529,528
<531=534,532
<532=533
<534=535
<535=537,536
<537=551,538
<538=544,539
<539=543,540
<540=542,541
<544=546,545
<546=550,547
<547=549,548
<552=554,553
<555=556
<556=558,557
<559=560
<560=562,561
<563=564
<564=570,565
<565=567,566
<567=569,568
<571=572
<572=579,578,573
<573=577,574
<574=576,575
<580=581
<581=588,587,582
<582=586,583
<583=585,584
<589=590
<590=597,596,591
<591=595,592
<592=594,593
<598=599
<599=604,603,600
<600=602,601
<605=606
<606=608,607
<608=610,609
<611=612
<612=614,613
<614=616,615
<617=618
<618=623,622,619
<619=621,620
<624=625
<625=632,631,626
<626=630,627
<627=629,628
<633=634
<634=646,645,635
<635=644,636
<636=642,637
<637=638
<638=639
<639=641,640
<642=643
<647=648
<648=650,649
<651=652
<652=666,665,653
<653=664,654
<654=658,655
<655=656
<656=657
<658=659
<659=661,660
<661=663,662
<667=668
<668=675,674,669
<669=673,670
<670=672,671
<676=677
<677=684,683,678
<678=682,679
<679=681,680
<685=686
<686=695,694,687
<687=693,688
<688=690,689
<690=692,691
