>3	FunctionDef	CUrl 
>4	ParameterList	 
>5	ReturnType	include < File / LocalPath . hpp >
>6	CompoundStatement	 
>7	ExpressionStatement	 
>8	AssignmentExpr	m_Valid = false
>9	Identifier	false
>10	Identifier	m_Valid
>16	FunctionDef	CUrl 
>17	ParameterList	const CString & iUrl
>18	Parameter	 
>19	Identifier	iUrl
>20	ParameterType	const CString &
>21	CompoundStatement	 
>22	ExpressionStatement	 
>23	CallExpression	SetUrl ( iUrl )
>24	ArgumentList	iUrl
>25	Argument	iUrl
>26	Identifier	iUrl
>27	Callee	SetUrl
>28	Identifier	SetUrl
>33	FunctionDef	CUrl 
>34	ParameterList	const CUrl & Other
>35	Parameter	 
>36	Identifier	Other
>37	ParameterType	const CUrl &
>38	CompoundStatement	 
>39	ExpressionStatement	 
>40	AssignmentExpr	( * this ) = Other
>41	Identifier	Other
>42	UnaryOp	* this
>43	Identifier	this
>44	UnaryOperator	*
>51	FunctionDef	CUrl 
>52	ParameterList	 
>53	CompoundStatement	 
>57	FunctionDef	operator = (const CUrl & Other)
>58	ParameterList	const CUrl & Other
>59	Parameter	 
>60	Identifier	Other
>61	ParameterType	const CUrl &
>62	CompoundStatement	 
>63	ReturnStatement	 
>64	UnaryOp	* this
>65	Identifier	this
>66	UnaryOperator	*
>67	ExpressionStatement	 
>68	AssignmentExpr	m_Valid = Other . m_Valid
>69	MemberAccess	Other . m_Valid
>70	Identifier	m_Valid
>71	Identifier	Other
>72	Identifier	m_Valid
>73	ExpressionStatement	 
>74	AssignmentExpr	m_HttpFilename = Other . m_HttpFilename
>75	MemberAccess	Other . m_HttpFilename
>76	Identifier	m_HttpFilename
>77	Identifier	Other
>78	Identifier	m_HttpFilename
>79	ExpressionStatement	 
>80	AssignmentExpr	m_HttpDirectory = Other . m_HttpDirectory
>81	MemberAccess	Other . m_HttpDirectory
>82	Identifier	m_HttpDirectory
>83	Identifier	Other
>84	Identifier	m_HttpDirectory
>85	ExpressionStatement	 
>86	AssignmentExpr	m_HttpSig = Other . m_HttpSig
>87	MemberAccess	Other . m_HttpSig
>88	Identifier	m_HttpSig
>89	Identifier	Other
>90	Identifier	m_HttpSig
>91	ExpressionStatement	 
>92	AssignmentExpr	m_HttpArg = Other . m_HttpArg
>93	MemberAccess	Other . m_HttpArg
>94	Identifier	m_HttpArg
>95	Identifier	Other
>96	Identifier	m_HttpArg
>97	ExpressionStatement	 
>98	AssignmentExpr	m_HttpSearchPath = Other . m_HttpSearchPath
>99	MemberAccess	Other . m_HttpSearchPath
>100	Identifier	m_HttpSearchPath
>101	Identifier	Other
>102	Identifier	m_HttpSearchPath
>103	ExpressionStatement	 
>104	AssignmentExpr	m_HttpPath = Other . m_HttpPath
>105	MemberAccess	Other . m_HttpPath
>106	Identifier	m_HttpPath
>107	Identifier	Other
>108	Identifier	m_HttpPath
>109	ExpressionStatement	 
>110	AssignmentExpr	m_FtpPathType = Other . m_FtpPathType
>111	MemberAccess	Other . m_FtpPathType
>112	Identifier	m_FtpPathType
>113	Identifier	Other
>114	Identifier	m_FtpPathType
>115	ExpressionStatement	 
>116	AssignmentExpr	m_FtpPath = Other . m_FtpPath
>117	MemberAccess	Other . m_FtpPath
>118	Identifier	m_FtpPath
>119	Identifier	Other
>120	Identifier	m_FtpPath
>121	ExpressionStatement	 
>122	AssignmentExpr	m_HostVector = Other . m_HostVector
>123	MemberAccess	Other . m_HostVector
>124	Identifier	m_HostVector
>125	Identifier	Other
>126	Identifier	m_HostVector
>127	ExpressionStatement	 
>128	AssignmentExpr	m_UrlPath = Other . m_UrlPath
>129	MemberAccess	Other . m_UrlPath
>130	Identifier	m_UrlPath
>131	Identifier	Other
>132	Identifier	m_UrlPath
>133	ExpressionStatement	 
>134	AssignmentExpr	m_Host = Other . m_Host
>135	MemberAccess	Other . m_Host
>136	Identifier	m_Host
>137	Identifier	Other
>138	Identifier	m_Host
>139	ExpressionStatement	 
>140	AssignmentExpr	m_Port = Other . m_Port
>141	MemberAccess	Other . m_Port
>142	Identifier	m_Port
>143	Identifier	Other
>144	Identifier	m_Port
>145	ExpressionStatement	 
>146	AssignmentExpr	m_Password = Other . m_Password
>147	MemberAccess	Other . m_Password
>148	Identifier	m_Password
>149	Identifier	Other
>150	Identifier	m_Password
>151	ExpressionStatement	 
>152	AssignmentExpr	m_User = Other . m_User
>153	MemberAccess	Other . m_User
>154	Identifier	m_User
>155	Identifier	Other
>156	Identifier	m_User
>157	ExpressionStatement	 
>158	AssignmentExpr	m_Specific = Other . m_Specific
>159	MemberAccess	Other . m_Specific
>160	Identifier	m_Specific
>161	Identifier	Other
>162	Identifier	m_Specific
>163	ExpressionStatement	 
>164	AssignmentExpr	m_Scheme = Other . m_Scheme
>165	MemberAccess	Other . m_Scheme
>166	Identifier	m_Scheme
>167	Identifier	Other
>168	Identifier	m_Scheme
>169	ExpressionStatement	 
>170	AssignmentExpr	m_Brute = Other . m_Brute
>171	MemberAccess	Other . m_Brute
>172	Identifier	m_Brute
>173	Identifier	Other
>174	Identifier	m_Brute
>217	FunctionDef	CUrl 
>218	ParameterList	const CString & iUrl
>219	Parameter	 
>220	Identifier	iUrl
>221	ParameterType	const CString &
>222	ReturnType	void
>223	CompoundStatement	 
>224	ExpressionStatement	 
>225	CallExpression	ParseUrl ( m_Brute )
>226	ArgumentList	m_Brute
>227	Argument	m_Brute
>228	Identifier	m_Brute
>229	Callee	ParseUrl
>230	Identifier	ParseUrl
>231	ExpressionStatement	 
>232	AssignmentExpr	m_Valid = false
>233	Identifier	false
>234	Identifier	m_Valid
>235	ExpressionStatement	 
>236	AssignmentExpr	m_Brute = iUrl
>237	Identifier	iUrl
>238	Identifier	m_Brute
>239	IfStatement	if ( m_Brute . GetLength ( ) )
>240	CompoundStatement	 
>241	ExpressionStatement	 
>242	CallExpression	m_HttpFilename . Empty ( )
>243	ArgumentList	 
>244	Callee	m_HttpFilename . Empty
>245	MemberAccess	m_HttpFilename . Empty
>246	Identifier	Empty
>247	Identifier	m_HttpFilename
>248	ExpressionStatement	 
>249	CallExpression	m_HttpDirectory . Empty ( )
>250	ArgumentList	 
>251	Callee	m_HttpDirectory . Empty
>252	MemberAccess	m_HttpDirectory . Empty
>253	Identifier	Empty
>254	Identifier	m_HttpDirectory
>255	ExpressionStatement	 
>256	CallExpression	m_HttpSig . Empty ( )
>257	ArgumentList	 
>258	Callee	m_HttpSig . Empty
>259	MemberAccess	m_HttpSig . Empty
>260	Identifier	Empty
>261	Identifier	m_HttpSig
>262	ExpressionStatement	 
>263	CallExpression	m_HttpArg . Empty ( )
>264	ArgumentList	 
>265	Callee	m_HttpArg . Empty
>266	MemberAccess	m_HttpArg . Empty
>267	Identifier	Empty
>268	Identifier	m_HttpArg
>269	ExpressionStatement	 
>270	CallExpression	m_HttpSearchPath . Empty ( )
>271	ArgumentList	 
>272	Callee	m_HttpSearchPath . Empty
>273	MemberAccess	m_HttpSearchPath . Empty
>274	Identifier	Empty
>275	Identifier	m_HttpSearchPath
>276	ExpressionStatement	 
>277	CallExpression	m_HttpPath . Empty ( )
>278	ArgumentList	 
>279	Callee	m_HttpPath . Empty
>280	MemberAccess	m_HttpPath . Empty
>281	Identifier	Empty
>282	Identifier	m_HttpPath
>283	ExpressionStatement	 
>284	AssignmentExpr	m_FtpPathType = 0
>285	PrimaryExpression	0
>286	Identifier	m_FtpPathType
>287	ExpressionStatement	 
>288	CallExpression	m_FtpPath . RemoveAll ( )
>289	ArgumentList	 
>290	Callee	m_FtpPath . RemoveAll
>291	MemberAccess	m_FtpPath . RemoveAll
>292	Identifier	RemoveAll
>293	Identifier	m_FtpPath
>294	ExpressionStatement	 
>295	CallExpression	m_HostVector . RemoveAll ( )
>296	ArgumentList	 
>297	Callee	m_HostVector . RemoveAll
>298	MemberAccess	m_HostVector . RemoveAll
>299	Identifier	RemoveAll
>300	Identifier	m_HostVector
>301	ExpressionStatement	 
>302	CallExpression	m_UrlPath . Empty ( )
>303	ArgumentList	 
>304	Callee	m_UrlPath . Empty
>305	MemberAccess	m_UrlPath . Empty
>306	Identifier	Empty
>307	Identifier	m_UrlPath
>308	ExpressionStatement	 
>309	CallExpression	m_Host . Empty ( )
>310	ArgumentList	 
>311	Callee	m_Host . Empty
>312	MemberAccess	m_Host . Empty
>313	Identifier	Empty
>314	Identifier	m_Host
>315	ExpressionStatement	 
>316	CallExpression	m_Port . Empty ( )
>317	ArgumentList	 
>318	Callee	m_Port . Empty
>319	MemberAccess	m_Port . Empty
>320	Identifier	Empty
>321	Identifier	m_Port
>322	ExpressionStatement	 
>323	CallExpression	m_Password . Empty ( )
>324	ArgumentList	 
>325	Callee	m_Password . Empty
>326	MemberAccess	m_Password . Empty
>327	Identifier	Empty
>328	Identifier	m_Password
>329	ExpressionStatement	 
>330	CallExpression	m_User . Empty ( )
>331	ArgumentList	 
>332	Callee	m_User . Empty
>333	MemberAccess	m_User . Empty
>334	Identifier	Empty
>335	Identifier	m_User
>336	ExpressionStatement	 
>337	CallExpression	m_Specific . Empty ( )
>338	ArgumentList	 
>339	Callee	m_Specific . Empty
>340	MemberAccess	m_Specific . Empty
>341	Identifier	Empty
>342	Identifier	m_Specific
>343	ExpressionStatement	 
>344	CallExpression	m_Scheme . Empty ( )
>345	ArgumentList	 
>346	Callee	m_Scheme . Empty
>347	MemberAccess	m_Scheme . Empty
>348	Identifier	Empty
>349	Identifier	m_Scheme
>350	Condition	 
>351	CallExpression	m_Brute . GetLength ( )
>352	ArgumentList	 
>353	Callee	m_Brute . GetLength
>354	MemberAccess	m_Brute . GetLength
>355	Identifier	GetLength
>356	Identifier	m_Brute
>381	FunctionDef	CUrl 
>382	ParameterList	int & curPos , const CString & iUrl
>383	Parameter	 
>384	Identifier	iUrl
>385	ParameterType	const CString &
>386	Parameter	 
>387	Identifier	curPos
>388	ParameterType	int &
>389	ReturnType	CString
>390	CompoundStatement	 
>391	ReturnStatement	 
>392	Identifier	CString 
>393	WhileStatement	while ( curPosLocal < ( int ) iUrl . GetLength ( ) )
>394	CompoundStatement	 
>395	ExpressionStatement	 
>396	IncDecOp	curPosLocal ++
>397	IncDec	++
>398	Identifier	curPosLocal
>399	SwitchStatement	switch ( iUrl [ curPosLocal ] )
>400	CompoundStatement	 
>401	IfStatement	if ( ( iUrl [ curPosLocal ] >= 'a' ) && ( iUrl [ curPosLocal ] <= 'z' ) )
>402	ElseStatement	else
>403	ReturnStatement	 
>404	Identifier	CString 
>405	BreakStatement	 
>406	Condition	 
>407	AndExpression	( iUrl [ curPosLocal ] >= 'a' ) && ( iUrl [ curPosLocal ] <= 'z' )
>408	RelationalExpression	iUrl [ curPosLocal ] <= 'z'
>409	PrimaryExpression	'z'
>410	ArrayIndexing	iUrl [ curPosLocal ]
>411	Identifier	curPosLocal
>412	Identifier	iUrl
>413	RelationalExpression	iUrl [ curPosLocal ] >= 'a'
>414	PrimaryExpression	'a'
>415	ArrayIndexing	iUrl [ curPosLocal ]
>416	Identifier	curPosLocal
>417	Identifier	iUrl
>418	Label	 
>419	Identifier	default
>420	BreakStatement	 
>421	Label	 
>422	Label	 
>423	Label	 
>424	ReturnStatement	 
>425	Identifier	MidString
>426	ExpressionStatement	 
>427	CallExpression	iUrl . Mid ( 0 , curPosLocal , & MidString )
>428	ArgumentList	0
>429	Argument	& MidString
>430	UnaryOp	& MidString
>431	Identifier	MidString
>432	UnaryOperator	&
>433	Argument	curPosLocal
>434	Identifier	curPosLocal
>435	Argument	0
>436	PrimaryExpression	0
>437	Callee	iUrl . Mid
>438	MemberAccess	iUrl . Mid
>439	Identifier	Mid
>440	Identifier	iUrl
>441	ExpressionStatement	 
>442	AssignmentExpr	curPos = curPosLocal + 1
>443	AdditiveExpression	curPosLocal + 1
>444	PrimaryExpression	1
>445	Identifier	curPosLocal
>446	Identifier	curPos
>447	Label	 
>448	Condition	 
>449	ArrayIndexing	iUrl [ curPosLocal ]
>450	Identifier	curPosLocal
>451	Identifier	iUrl
>452	Condition	 
>453	RelationalExpression	curPosLocal < ( int ) iUrl . GetLength ( )
>454	CastExpression	( int ) iUrl . GetLength ( )
>455	CallExpression	iUrl . GetLength ( )
>456	ArgumentList	 
>457	Callee	iUrl . GetLength
>458	MemberAccess	iUrl . GetLength
>459	Identifier	GetLength
>460	Identifier	iUrl
>461	CastTarget	int
>462	Identifier	curPosLocal
>463	IdentifierDeclStatement	 
>464	IdentifierDecl	MidString
>465	Identifier	MidString
>466	IdentifierDeclType	CString
>467	IdentifierDeclStatement	 
>468	IdentifierDecl	curPosLocal = 0
>469	AssignmentExpr	curPosLocal = 0
>470	PrimaryExpression	0
>471	Identifier	curPosLocal
>472	Identifier	curPosLocal
>473	IdentifierDeclType	int
>486	FunctionDef	CUrl 
>487	ParameterList	const CString & iUrl
>488	Parameter	 
>489	Identifier	iUrl
>490	ParameterType	const CString &
>491	ReturnType	void
>492	CompoundStatement	 
>493	IfStatement	if ( m_Scheme . Same ( g_strProto_FILE ) )
>494	ElseStatement	else
>495	IfStatement	if ( ParseUrlSpecific ( curPos , m_Specific ) )
>496	CompoundStatement	 
>497	IfStatement	if ( ParseHost ( m_Host ) )
>498	CompoundStatement	 
>499	IfStatement	if ( m_Scheme . Same ( g_strProto_HTTP ) || m_Scheme . Same ( g_strProto_HTTPS ) )
>500	ElseStatement	else
>501	IfStatement	if ( m_Scheme . Same ( g_strProto_FTP ) )
>502	ElseStatement	else
>503	CompoundStatement	 
>504	ExpressionStatement	 
>505	AssignmentExpr	m_Error = \"scheme not implemented\"
>506	PrimaryExpression	\"scheme not implemented\"
>507	Identifier	m_Error
>508	ExpressionStatement	 
>509	AssignmentExpr	m_Valid = false
>510	Identifier	false
>511	Identifier	m_Valid
>512	CompoundStatement	 
>513	ExpressionStatement	 
>514	AssignmentExpr	m_Valid = ParseFtpPath ( m_UrlPath )
>515	CallExpression	ParseFtpPath ( m_UrlPath )
>516	ArgumentList	m_UrlPath
>517	Argument	m_UrlPath
>518	Identifier	m_UrlPath
>519	Callee	ParseFtpPath
>520	Identifier	ParseFtpPath
>521	Identifier	m_Valid
>522	Condition	 
>523	CallExpression	m_Scheme . Same ( g_strProto_FTP )
>524	ArgumentList	g_strProto_FTP
>525	Argument	g_strProto_FTP
>526	Identifier	g_strProto_FTP
>527	Callee	m_Scheme . Same
>528	MemberAccess	m_Scheme . Same
>529	Identifier	Same
>530	Identifier	m_Scheme
>531	CompoundStatement	 
>532	ExpressionStatement	 
>533	AssignmentExpr	m_Valid = ParseHttpPath ( m_UrlPath )
>534	CallExpression	ParseHttpPath ( m_UrlPath )
>535	ArgumentList	m_UrlPath
>536	Argument	m_UrlPath
>537	Identifier	m_UrlPath
>538	Callee	ParseHttpPath
>539	Identifier	ParseHttpPath
>540	Identifier	m_Valid
>541	Condition	 
>542	OrExpression	m_Scheme . Same ( g_strProto_HTTP ) || m_Scheme . Same ( g_strProto_HTTPS )
>543	CallExpression	m_Scheme . Same ( g_strProto_HTTPS )
>544	ArgumentList	g_strProto_HTTPS
>545	Argument	g_strProto_HTTPS
>546	Identifier	g_strProto_HTTPS
>547	Callee	m_Scheme . Same
>548	MemberAccess	m_Scheme . Same
>549	Identifier	Same
>550	Identifier	m_Scheme
>551	CallExpression	m_Scheme . Same ( g_strProto_HTTP )
>552	ArgumentList	g_strProto_HTTP
>553	Argument	g_strProto_HTTP
>554	Identifier	g_strProto_HTTP
>555	Callee	m_Scheme . Same
>556	MemberAccess	m_Scheme . Same
>557	Identifier	Same
>558	Identifier	m_Scheme
>559	ExpressionStatement	 
>560	CallExpression	m_Specific . Mid ( curPos , m_Specific . GetLength ( ) , & m_UrlPath )
>561	ArgumentList	curPos
>562	Argument	& m_UrlPath
>563	UnaryOp	& m_UrlPath
>564	Identifier	m_UrlPath
>565	UnaryOperator	&
>566	Argument	m_Specific . GetLength ( )
>567	CallExpression	m_Specific . GetLength ( )
>568	ArgumentList	 
>569	Callee	m_Specific . GetLength
>570	MemberAccess	m_Specific . GetLength
>571	Identifier	GetLength
>572	Identifier	m_Specific
>573	Argument	curPos
>574	Identifier	curPos
>575	Callee	m_Specific . Mid
>576	MemberAccess	m_Specific . Mid
>577	Identifier	Mid
>578	Identifier	m_Specific
>579	Condition	 
>580	CallExpression	ParseHost ( m_Host )
>581	ArgumentList	m_Host
>582	Argument	m_Host
>583	Identifier	m_Host
>584	Callee	ParseHost
>585	Identifier	ParseHost
>586	IfStatement	if ( ! m_Port . GetLength ( ) )
>587	ExpressionStatement	 
>588	AssignmentExpr	m_Port = \"80\"
>589	PrimaryExpression	\"80\"
>590	Identifier	m_Port
>591	Condition	 
>592	UnaryOp	! m_Port . GetLength ( )
>593	CallExpression	m_Port . GetLength ( )
>594	ArgumentList	 
>595	Callee	m_Port . GetLength
>596	MemberAccess	m_Port . GetLength
>597	Identifier	GetLength
>598	Identifier	m_Port
>599	UnaryOperator	!
>600	IfStatement	if ( ! m_Host . GetLength ( ) )
>601	ExpressionStatement	 
>602	AssignmentExpr	m_Host = \"localhost\"
>603	PrimaryExpression	\"localhost\"
>604	Identifier	m_Host
>605	Condition	 
>606	UnaryOp	! m_Host . GetLength ( )
>607	CallExpression	m_Host . GetLength ( )
>608	ArgumentList	 
>609	Callee	m_Host . GetLength
>610	MemberAccess	m_Host . GetLength
>611	Identifier	GetLength
>612	Identifier	m_Host
>613	UnaryOperator	!
>614	Condition	 
>615	CallExpression	ParseUrlSpecific ( curPos , m_Specific )
>616	ArgumentList	curPos
>617	Argument	m_Specific
>618	Identifier	m_Specific
>619	Argument	curPos
>620	Identifier	curPos
>621	Callee	ParseUrlSpecific
>622	Identifier	ParseUrlSpecific
>623	CompoundStatement	 
>624	ExpressionStatement	 
>625	AssignmentExpr	m_Valid = ParseHttpPath ( m_UrlPath )
>626	CallExpression	ParseHttpPath ( m_UrlPath )
>627	ArgumentList	m_UrlPath
>628	Argument	m_UrlPath
>629	Identifier	m_UrlPath
>630	Callee	ParseHttpPath
>631	Identifier	ParseHttpPath
>632	Identifier	m_Valid
>633	ExpressionStatement	 
>634	CallExpression	m_Specific . Mid ( 0 , m_Specific . GetLength ( ) , & m_UrlPath )
>635	ArgumentList	0
>636	Argument	& m_UrlPath
>637	UnaryOp	& m_UrlPath
>638	Identifier	m_UrlPath
>639	UnaryOperator	&
>640	Argument	m_Specific . GetLength ( )
>641	CallExpression	m_Specific . GetLength ( )
>642	ArgumentList	 
>643	Callee	m_Specific . GetLength
>644	MemberAccess	m_Specific . GetLength
>645	Identifier	GetLength
>646	Identifier	m_Specific
>647	Argument	0
>648	PrimaryExpression	0
>649	Callee	m_Specific . Mid
>650	MemberAccess	m_Specific . Mid
>651	Identifier	Mid
>652	Identifier	m_Specific
>653	Condition	 
>654	CallExpression	m_Scheme . Same ( g_strProto_FILE )
>655	ArgumentList	g_strProto_FILE
>656	Argument	g_strProto_FILE
>657	Identifier	g_strProto_FILE
>658	Callee	m_Scheme . Same
>659	MemberAccess	m_Scheme . Same
>660	Identifier	Same
>661	Identifier	m_Scheme
>662	IfStatement	if ( m_Scheme . Same ( g_strProto_FILE ) && m_Specific . StartsWith ( \"//\" ) )
>663	ElseStatement	else
>664	IfStatement	if ( m_Specific . StartsWith ( '/' ) )
>665	CompoundStatement	 
>666	ExpressionStatement	 
>667	CallExpression	m_Specific . Insert ( 0 , '/' )
>668	ArgumentList	0
>669	Argument	'/'
>670	PrimaryExpression	'/'
>671	Argument	0
>672	PrimaryExpression	0
>673	Callee	m_Specific . Insert
>674	MemberAccess	m_Specific . Insert
>675	Identifier	Insert
>676	Identifier	m_Specific
>677	IfStatement	if ( ! CLocalPath 
>678	ExpressionStatement	 
>679	CallExpression	m_Specific . Insert ( 0 , '/' )
>680	ArgumentList	0
>681	Argument	'/'
>682	PrimaryExpression	'/'
>683	Argument	0
>684	PrimaryExpression	0
>685	Callee	m_Specific . Insert
>686	MemberAccess	m_Specific . Insert
>687	Identifier	Insert
>688	Identifier	m_Specific
>689	Condition	 
>690	UnaryOp	! CLocalPath 
>691	CallExpression	CLocalPath 
>692	ArgumentList	m_Specific
>693	Argument	m_Specific
>694	Identifier	m_Specific
>695	Callee	CLocalPath 
>696	Identifier	CLocalPath 
>697	UnaryOperator	!
>698	ExpressionStatement	 
>699	CallExpression	m_Specific . TrimLeft ( '/' , '/' )
>700	ArgumentList	'/'
>701	Argument	'/'
>702	PrimaryExpression	'/'
>703	Argument	'/'
>704	PrimaryExpression	'/'
>705	Callee	m_Specific . TrimLeft
>706	MemberAccess	m_Specific . TrimLeft
>707	Identifier	TrimLeft
>708	Identifier	m_Specific
>709	Condition	 
>710	CallExpression	m_Specific . StartsWith ( '/' )
>711	ArgumentList	'/'
>712	Argument	'/'
>713	PrimaryExpression	'/'
>714	Callee	m_Specific . StartsWith
>715	MemberAccess	m_Specific . StartsWith
>716	Identifier	StartsWith
>717	Identifier	m_Specific
>718	CompoundStatement	 
>719	Condition	 
>720	AndExpression	m_Scheme . Same ( g_strProto_FILE ) && m_Specific . StartsWith ( \"//\" )
>721	CallExpression	m_Specific . StartsWith ( \"//\" )
>722	ArgumentList	\"//\"
>723	Argument	\"//\"
>724	PrimaryExpression	\"//\"
>725	Callee	m_Specific . StartsWith
>726	MemberAccess	m_Specific . StartsWith
>727	Identifier	StartsWith
>728	Identifier	m_Specific
>729	CallExpression	m_Scheme . Same ( g_strProto_FILE )
>730	ArgumentList	g_strProto_FILE
>731	Argument	g_strProto_FILE
>732	Identifier	g_strProto_FILE
>733	Callee	m_Scheme . Same
>734	MemberAccess	m_Scheme . Same
>735	Identifier	Same
>736	Identifier	m_Scheme
>737	ExpressionStatement	 
>738	CallExpression	iUrl . Mid ( curPos , iUrl . GetLength ( ) , & m_Specific )
>739	ArgumentList	curPos
>740	Argument	& m_Specific
>741	UnaryOp	& m_Specific
>742	Identifier	m_Specific
>743	UnaryOperator	&
>744	Argument	iUrl . GetLength ( )
>745	CallExpression	iUrl . GetLength ( )
>746	ArgumentList	 
>747	Callee	iUrl . GetLength
>748	MemberAccess	iUrl . GetLength
>749	Identifier	GetLength
>750	Identifier	iUrl
>751	Argument	curPos
>752	Identifier	curPos
>753	Callee	iUrl . Mid
>754	MemberAccess	iUrl . Mid
>755	Identifier	Mid
>756	Identifier	iUrl
>757	IfStatement	if ( m_Scheme . GetLength ( ) )
>758	ElseStatement	else
>759	CompoundStatement	 
>760	ExpressionStatement	 
>761	AssignmentExpr	m_Scheme = g_strProto_HTTP
>762	Identifier	g_strProto_HTTP
>763	Identifier	m_Scheme
>764	CompoundStatement	 
>765	IfStatement	if ( MidString . Different ( \"//\" ) )
>766	ElseStatement	else
>767	ExpressionStatement	 
>768	AssignmentExpr	curPos += 2
>769	PrimaryExpression	2
>770	Identifier	curPos
>771	CompoundStatement	 
>772	ExpressionStatement	 
>773	AssignmentExpr	curPos = 0
>774	PrimaryExpression	0
>775	Identifier	curPos
>776	ExpressionStatement	 
>777	AssignmentExpr	m_Scheme = g_strProto_HTTP
>778	Identifier	g_strProto_HTTP
>779	Identifier	m_Scheme
>780	Condition	 
>781	CallExpression	MidString . Different ( \"//\" )
>782	ArgumentList	\"//\"
>783	Argument	\"//\"
>784	PrimaryExpression	\"//\"
>785	Callee	MidString . Different
>786	MemberAccess	MidString . Different
>787	Identifier	Different
>788	Identifier	MidString
>789	ExpressionStatement	 
>790	CallExpression	iUrl . Mid ( curPos , 2 , & MidString )
>791	ArgumentList	curPos
>792	Argument	& MidString
>793	UnaryOp	& MidString
>794	Identifier	MidString
>795	UnaryOperator	&
>796	Argument	2
>797	PrimaryExpression	2
>798	Argument	curPos
>799	Identifier	curPos
>800	Callee	iUrl . Mid
>801	MemberAccess	iUrl . Mid
>802	Identifier	Mid
>803	Identifier	iUrl
>804	Condition	 
>805	CallExpression	m_Scheme . GetLength ( )
>806	ArgumentList	 
>807	Callee	m_Scheme . GetLength
>808	MemberAccess	m_Scheme . GetLength
>809	Identifier	GetLength
>810	Identifier	m_Scheme
>811	ExpressionStatement	 
>812	AssignmentExpr	m_Scheme = ReadScheme ( curPos , iUrl )
>813	CallExpression	ReadScheme ( curPos , iUrl )
>814	ArgumentList	curPos
>815	Argument	iUrl
>816	Identifier	iUrl
>817	Argument	curPos
>818	Identifier	curPos
>819	Callee	ReadScheme
>820	Identifier	ReadScheme
>821	Identifier	m_Scheme
>822	IdentifierDeclStatement	 
>823	IdentifierDecl	MidString
>824	Identifier	MidString
>825	IdentifierDeclType	CString
>826	IdentifierDeclStatement	 
>827	IdentifierDecl	curPos = 0
>828	AssignmentExpr	curPos = 0
>829	PrimaryExpression	0
>830	Identifier	curPos
>831	Identifier	curPos
>832	IdentifierDeclType	int
>833	IfStatement	if ( ! iUrl . GetLength ( ) )
>834	ReturnStatement	 
>835	Condition	 
>836	UnaryOp	! iUrl . GetLength ( )
>837	CallExpression	iUrl . GetLength ( )
>838	ArgumentList	 
>839	Callee	iUrl . GetLength
>840	MemberAccess	iUrl . GetLength
>841	Identifier	GetLength
>842	Identifier	iUrl
>843	UnaryOperator	!
>879	FunctionDef	CUrl 
>880	ParameterList	const CString & iUrlPath
>881	Parameter	 
>882	Identifier	iUrlPath
>883	ParameterType	const CString &
>884	ReturnType	bool
>885	CompoundStatement	 
>886	ReturnStatement	 
>887	Identifier	true
>888	IfStatement	if ( m_Host . GetLength ( ) )
>889	IfStatement	if ( ! m_HttpDirectory . GetLength ( ) || m_HttpDirectory [ 0 ] != '/' )
>890	ExpressionStatement	 
>891	CallExpression	m_HttpDirectory . Insert ( 0 , '/' )
>892	ArgumentList	0
>893	Argument	'/'
>894	PrimaryExpression	'/'
>895	Argument	0
>896	PrimaryExpression	0
>897	Callee	m_HttpDirectory . Insert
>898	MemberAccess	m_HttpDirectory . Insert
>899	Identifier	Insert
>900	Identifier	m_HttpDirectory
>901	Condition	 
>902	OrExpression	! m_HttpDirectory . GetLength ( ) || m_HttpDirectory [ 0 ] != '/'
>903	EqualityExpression	m_HttpDirectory [ 0 ] != '/'
>904	PrimaryExpression	'/'
>905	ArrayIndexing	m_HttpDirectory [ 0 ]
>906	PrimaryExpression	0
>907	Identifier	m_HttpDirectory
>908	UnaryOp	! m_HttpDirectory . GetLength ( )
>909	CallExpression	m_HttpDirectory . GetLength ( )
>910	ArgumentList	 
>911	Callee	m_HttpDirectory . GetLength
>912	MemberAccess	m_HttpDirectory . GetLength
>913	Identifier	GetLength
>914	Identifier	m_HttpDirectory
>915	UnaryOperator	!
>916	Condition	 
>917	CallExpression	m_Host . GetLength ( )
>918	ArgumentList	 
>919	Callee	m_Host . GetLength
>920	MemberAccess	m_Host . GetLength
>921	Identifier	GetLength
>922	Identifier	m_Host
>923	IfStatement	if ( m_HttpDirectory . GetLength ( ) )
>924	ExpressionStatement	 
>925	CallExpression	m_HttpDirectory . TerminateWith ( '/' )
>926	ArgumentList	'/'
>927	Argument	'/'
>928	PrimaryExpression	'/'
>929	Callee	m_HttpDirectory . TerminateWith
>930	MemberAccess	m_HttpDirectory . TerminateWith
>931	Identifier	TerminateWith
>932	Identifier	m_HttpDirectory
>933	Condition	 
>934	CallExpression	m_HttpDirectory . GetLength ( )
>935	ArgumentList	 
>936	Callee	m_HttpDirectory . GetLength
>937	MemberAccess	m_HttpDirectory . GetLength
>938	Identifier	GetLength
>939	Identifier	m_HttpDirectory
>940	IfStatement	if ( ePos >= 0 )
>941	ElseStatement	else
>942	CompoundStatement	 
>943	IfStatement	if ( m_Scheme . Same ( g_strProto_FILE ) && m_HttpPath . GetLength ( ) == 2 && m_HttpPath [ 1 ] == '
>944	CompoundStatement	 
>945	ExpressionStatement	 
>946	CallExpression	m_HttpFilename . Empty ( )
>947	ArgumentList	 
>948	Callee	m_HttpFilename . Empty
>949	MemberAccess	m_HttpFilename . Empty
>950	Identifier	Empty
>951	Identifier	m_HttpFilename
>952	ExpressionStatement	 
>953	AssignmentExpr	m_HttpDirectory = m_HttpFilename
>954	Identifier	m_HttpFilename
>955	Identifier	m_HttpDirectory
>956	Condition	 
>957	AndExpression	m_Scheme . Same ( g_strProto_FILE ) && m_HttpPath . GetLength ( ) == 2 && m_HttpPath [ 1 ] == '
>958	AndExpression	m_HttpPath . GetLength ( ) == 2 && m_HttpPath [ 1 ] == '
>959	EqualityExpression	m_HttpPath [ 1 ] == '
>960	PrimaryExpression	'
>961	ArrayIndexing	m_HttpPath [ 1 ]
>962	PrimaryExpression	1
>963	Identifier	m_HttpPath
>964	EqualityExpression	m_HttpPath . GetLength ( ) == 2
>965	PrimaryExpression	2
>966	CallExpression	m_HttpPath . GetLength ( )
>967	ArgumentList	 
>968	Callee	m_HttpPath . GetLength
>969	MemberAccess	m_HttpPath . GetLength
>970	Identifier	GetLength
>971	Identifier	m_HttpPath
>972	CallExpression	m_Scheme . Same ( g_strProto_FILE )
>973	ArgumentList	g_strProto_FILE
>974	Argument	g_strProto_FILE
>975	Identifier	g_strProto_FILE
>976	Callee	m_Scheme . Same
>977	MemberAccess	m_Scheme . Same
>978	Identifier	Same
>979	Identifier	m_Scheme
>980	ExpressionStatement	 
>981	AssignmentExpr	m_HttpFilename = m_HttpPath
>982	Identifier	m_HttpPath
>983	Identifier	m_HttpFilename
>984	CompoundStatement	 
>985	ExpressionStatement	 
>986	CallExpression	m_HttpPath . Mid ( ePos + 1 , m_HttpPath . GetLength ( ) , & m_HttpFilename )
>987	ArgumentList	ePos + 1
>988	Argument	& m_HttpFilename
>989	UnaryOp	& m_HttpFilename
>990	Identifier	m_HttpFilename
>991	UnaryOperator	&
>992	Argument	m_HttpPath . GetLength ( )
>993	CallExpression	m_HttpPath . GetLength ( )
>994	ArgumentList	 
>995	Callee	m_HttpPath . GetLength
>996	MemberAccess	m_HttpPath . GetLength
>997	Identifier	GetLength
>998	Identifier	m_HttpPath
>999	Argument	ePos + 1
>1000	AdditiveExpression	ePos + 1
>1001	PrimaryExpression	1
>1002	Identifier	ePos
>1003	Callee	m_HttpPath . Mid
>1004	MemberAccess	m_HttpPath . Mid
>1005	Identifier	Mid
>1006	Identifier	m_HttpPath
>1007	ExpressionStatement	 
>1008	CallExpression	m_HttpPath . Mid ( 0 , ePos , & m_HttpDirectory )
>1009	ArgumentList	0
>1010	Argument	& m_HttpDirectory
>1011	UnaryOp	& m_HttpDirectory
>1012	Identifier	m_HttpDirectory
>1013	UnaryOperator	&
>1014	Argument	ePos
>1015	Identifier	ePos
>1016	Argument	0
>1017	PrimaryExpression	0
>1018	Callee	m_HttpPath . Mid
>1019	MemberAccess	m_HttpPath . Mid
>1020	Identifier	Mid
>1021	Identifier	m_HttpPath
>1022	Condition	 
>1023	RelationalExpression	ePos >= 0
>1024	PrimaryExpression	0
>1025	Identifier	ePos
>1026	IdentifierDeclStatement	 
>1027	IdentifierDecl	ePos = m_HttpPath . InvPos ( '/' )
>1028	AssignmentExpr	ePos = m_HttpPath . InvPos ( '/' )
>1029	CallExpression	m_HttpPath . InvPos ( '/' )
>1030	ArgumentList	'/'
>1031	Argument	'/'
>1032	PrimaryExpression	'/'
>1033	Callee	m_HttpPath . InvPos
>1034	MemberAccess	m_HttpPath . InvPos
>1035	Identifier	InvPos
>1036	Identifier	m_HttpPath
>1037	Identifier	ePos
>1038	Identifier	ePos
>1039	IdentifierDeclType	int
>1040	ExpressionStatement	 
>1041	CallExpression	m_HttpPath . Replace ( '\\' , '/' )
>1042	ArgumentList	'\\'
>1043	Argument	'/'
>1044	PrimaryExpression	'/'
>1045	Argument	'\\'
>1046	PrimaryExpression	'\\'
>1047	Callee	m_HttpPath . Replace
>1048	MemberAccess	m_HttpPath . Replace
>1049	Identifier	Replace
>1050	Identifier	m_HttpPath
>1051	IfStatement	if ( qPos >= 0 )
>1052	ElseStatement	else
>1053	ExpressionStatement	 
>1054	AssignmentExpr	m_HttpPath = m_HttpArg
>1055	Identifier	m_HttpArg
>1056	Identifier	m_HttpPath
>1057	CompoundStatement	 
>1058	ExpressionStatement	 
>1059	CallExpression	m_HttpArg . Mid ( qPos + 1 , m_HttpArg . GetLength ( ) , & m_HttpSearchPath )
>1060	ArgumentList	qPos + 1
>1061	Argument	& m_HttpSearchPath
>1062	UnaryOp	& m_HttpSearchPath
>1063	Identifier	m_HttpSearchPath
>1064	UnaryOperator	&
>1065	Argument	m_HttpArg . GetLength ( )
>1066	CallExpression	m_HttpArg . GetLength ( )
>1067	ArgumentList	 
>1068	Callee	m_HttpArg . GetLength
>1069	MemberAccess	m_HttpArg . GetLength
>1070	Identifier	GetLength
>1071	Identifier	m_HttpArg
>1072	Argument	qPos + 1
>1073	AdditiveExpression	qPos + 1
>1074	PrimaryExpression	1
>1075	Identifier	qPos
>1076	Callee	m_HttpArg . Mid
>1077	MemberAccess	m_HttpArg . Mid
>1078	Identifier	Mid
>1079	Identifier	m_HttpArg
>1080	ExpressionStatement	 
>1081	CallExpression	m_HttpArg . Mid ( 0 , qPos , & m_HttpPath )
>1082	ArgumentList	0
>1083	Argument	& m_HttpPath
>1084	UnaryOp	& m_HttpPath
>1085	Identifier	m_HttpPath
>1086	UnaryOperator	&
>1087	Argument	qPos
>1088	Identifier	qPos
>1089	Argument	0
>1090	PrimaryExpression	0
>1091	Callee	m_HttpArg . Mid
>1092	MemberAccess	m_HttpArg . Mid
>1093	Identifier	Mid
>1094	Identifier	m_HttpArg
>1095	Condition	 
>1096	RelationalExpression	qPos >= 0
>1097	PrimaryExpression	0
>1098	Identifier	qPos
>1099	IdentifierDeclStatement	 
>1100	IdentifierDecl	qPos = m_HttpArg . Pos ( '?' )
>1101	AssignmentExpr	qPos = m_HttpArg . Pos ( '?' )
>1102	CallExpression	m_HttpArg . Pos ( '?' )
>1103	ArgumentList	'?'
>1104	Argument	'?'
>1105	PrimaryExpression	'?'
>1106	Callee	m_HttpArg . Pos
>1107	MemberAccess	m_HttpArg . Pos
>1108	Identifier	Pos
>1109	Identifier	m_HttpArg
>1110	Identifier	qPos
>1111	Identifier	qPos
>1112	IdentifierDeclType	int
>1113	IfStatement	if ( sPos >= 0 )
>1114	ElseStatement	else
>1115	ExpressionStatement	 
>1116	AssignmentExpr	m_HttpArg = iUrlPath
>1117	Identifier	iUrlPath
>1118	Identifier	m_HttpArg
>1119	CompoundStatement	 
>1120	ExpressionStatement	 
>1121	CallExpression	iUrlPath . Mid ( 0 , sPos , & m_HttpArg )
>1122	ArgumentList	0
>1123	Argument	& m_HttpArg
>1124	UnaryOp	& m_HttpArg
>1125	Identifier	m_HttpArg
>1126	UnaryOperator	&
>1127	Argument	sPos
>1128	Identifier	sPos
>1129	Argument	0
>1130	PrimaryExpression	0
>1131	Callee	iUrlPath . Mid
>1132	MemberAccess	iUrlPath . Mid
>1133	Identifier	Mid
>1134	Identifier	iUrlPath
>1135	ExpressionStatement	 
>1136	CallExpression	iUrlPath . Mid ( sPos + 1 , iUrlPath . GetLength ( ) , & m_HttpSig )
>1137	ArgumentList	sPos + 1
>1138	Argument	& m_HttpSig
>1139	UnaryOp	& m_HttpSig
>1140	Identifier	m_HttpSig
>1141	UnaryOperator	&
>1142	Argument	iUrlPath . GetLength ( )
>1143	CallExpression	iUrlPath . GetLength ( )
>1144	ArgumentList	 
>1145	Callee	iUrlPath . GetLength
>1146	MemberAccess	iUrlPath . GetLength
>1147	Identifier	GetLength
>1148	Identifier	iUrlPath
>1149	Argument	sPos + 1
>1150	AdditiveExpression	sPos + 1
>1151	PrimaryExpression	1
>1152	Identifier	sPos
>1153	Callee	iUrlPath . Mid
>1154	MemberAccess	iUrlPath . Mid
>1155	Identifier	Mid
>1156	Identifier	iUrlPath
>1157	Condition	 
>1158	RelationalExpression	sPos >= 0
>1159	PrimaryExpression	0
>1160	Identifier	sPos
>1161	IdentifierDeclStatement	 
>1162	IdentifierDecl	sPos = iUrlPath . Pos ( '#' )
>1163	AssignmentExpr	sPos = iUrlPath . Pos ( '#' )
>1164	CallExpression	iUrlPath . Pos ( '#' )
>1165	ArgumentList	'#'
>1166	Argument	'#'
>1167	PrimaryExpression	'#'
>1168	Callee	iUrlPath . Pos
>1169	MemberAccess	iUrlPath . Pos
>1170	Identifier	Pos
>1171	Identifier	iUrlPath
>1172	Identifier	sPos
>1173	Identifier	sPos
>1174	IdentifierDeclType	int
>1207	FunctionDef	CUrl 
>1208	ParameterList	const CString & iUrlPath
>1209	Parameter	 
>1210	Identifier	iUrlPath
>1211	ParameterType	const CString &
>1212	ReturnType	bool
>1213	CompoundStatement	 
>1214	ReturnStatement	 
>1215	Identifier	true
>1216	WhileStatement	while ( curPos < ( int ) iUrlPath . GetLength ( ) )
>1217	CompoundStatement	 
>1218	ExpressionStatement	 
>1219	IncDecOp	curPos ++
>1220	IncDec	++
>1221	Identifier	curPos
>1222	SwitchStatement	switch ( iUrlPath [ curPos ] )
>1223	CompoundStatement	 
>1224	IfStatement	if ( MidString . Same ( __Type ) )
>1225	ElseStatement	else
>1226	CompoundStatement	 
>1227	ReturnStatement	 
>1228	Identifier	true
>1229	ExpressionStatement	 
>1230	AssignmentExpr	m_Error = \"invalid FTP type\"
>1231	PrimaryExpression	\"invalid FTP type\"
>1232	Identifier	m_Error
>1233	CompoundStatement	 
>1234	ReturnStatement	 
>1235	Identifier	true
>1236	IfStatement	if ( ( int ) iUrlPath . GetLength ( ) > ( curPos + 1 ) )
>1237	CompoundStatement	 
>1238	ReturnStatement	 
>1239	Identifier	false
>1240	ExpressionStatement	 
>1241	AssignmentExpr	m_Error = \"FTP type too long\"
>1242	PrimaryExpression	\"FTP type too long\"
>1243	Identifier	m_Error
>1244	Condition	 
>1245	RelationalExpression	( int ) iUrlPath . GetLength ( ) > ( curPos + 1 )
>1246	AdditiveExpression	curPos + 1
>1247	PrimaryExpression	1
>1248	Identifier	curPos
>1249	CastExpression	( int ) iUrlPath . GetLength ( )
>1250	CallExpression	iUrlPath . GetLength ( )
>1251	ArgumentList	 
>1252	Callee	iUrlPath . GetLength
>1253	MemberAccess	iUrlPath . GetLength
>1254	Identifier	GetLength
>1255	Identifier	iUrlPath
>1256	CastTarget	int
>1257	ExpressionStatement	 
>1258	AssignmentExpr	m_FtpPathType = iUrlPath [ curPos ]
>1259	ArrayIndexing	iUrlPath [ curPos ]
>1260	Identifier	curPos
>1261	Identifier	iUrlPath
>1262	Identifier	m_FtpPathType
>1263	ExpressionStatement	 
>1264	AssignmentExpr	curPos += ( __Type . GetLength ( ) + 1 )
>1265	AdditiveExpression	__Type . GetLength ( ) + 1
>1266	PrimaryExpression	1
>1267	CallExpression	__Type . GetLength ( )
>1268	ArgumentList	 
>1269	Callee	__Type . GetLength
>1270	MemberAccess	__Type . GetLength
>1271	Identifier	GetLength
>1272	Identifier	__Type
>1273	Identifier	curPos
>1274	Condition	 
>1275	CallExpression	MidString . Same ( __Type )
>1276	ArgumentList	__Type
>1277	Argument	__Type
>1278	Identifier	__Type
>1279	Callee	MidString . Same
>1280	MemberAccess	MidString . Same
>1281	Identifier	Same
>1282	Identifier	MidString
>1283	ExpressionStatement	 
>1284	CallExpression	iUrlPath . Mid ( prevPos , __Type . GetLength ( ) , & MidString )
>1285	ArgumentList	prevPos
>1286	Argument	& MidString
>1287	UnaryOp	& MidString
>1288	Identifier	MidString
>1289	UnaryOperator	&
>1290	Argument	__Type . GetLength ( )
>1291	CallExpression	__Type . GetLength ( )
>1292	ArgumentList	 
>1293	Callee	__Type . GetLength
>1294	MemberAccess	__Type . GetLength
>1295	Identifier	GetLength
>1296	Identifier	__Type
>1297	Argument	prevPos
>1298	Identifier	prevPos
>1299	Callee	iUrlPath . Mid
>1300	MemberAccess	iUrlPath . Mid
>1301	Identifier	Mid
>1302	Identifier	iUrlPath
>1303	ExpressionStatement	 
>1304	AssignmentExpr	prevPos = curPos + 1
>1305	AdditiveExpression	curPos + 1
>1306	PrimaryExpression	1
>1307	Identifier	curPos
>1308	Identifier	prevPos
>1309	ExpressionStatement	 
>1310	AssignmentExpr	m_FtpPath += MidString
>1311	Identifier	MidString
>1312	Identifier	m_FtpPath
>1313	ExpressionStatement	 
>1314	CallExpression	iUrlPath . Mid ( prevPos , curPos - prevPos , & MidString )
>1315	ArgumentList	prevPos
>1316	Argument	& MidString
>1317	UnaryOp	& MidString
>1318	Identifier	MidString
>1319	UnaryOperator	&
>1320	Argument	curPos - prevPos
>1321	AdditiveExpression	curPos - prevPos
>1322	Identifier	prevPos
>1323	Identifier	curPos
>1324	Argument	prevPos
>1325	Identifier	prevPos
>1326	Callee	iUrlPath . Mid
>1327	MemberAccess	iUrlPath . Mid
>1328	Identifier	Mid
>1329	Identifier	iUrlPath
>1330	Label	 
>1331	BreakStatement	 
>1332	ExpressionStatement	 
>1333	AssignmentExpr	prevPos = curPos + 1
>1334	AdditiveExpression	curPos + 1
>1335	PrimaryExpression	1
>1336	Identifier	curPos
>1337	Identifier	prevPos
>1338	ExpressionStatement	 
>1339	AssignmentExpr	m_FtpPath += MidString
>1340	Identifier	MidString
>1341	Identifier	m_FtpPath
>1342	ExpressionStatement	 
>1343	CallExpression	iUrlPath . Mid ( prevPos , curPos - prevPos , & MidString )
>1344	ArgumentList	prevPos
>1345	Argument	& MidString
>1346	UnaryOp	& MidString
>1347	Identifier	MidString
>1348	UnaryOperator	&
>1349	Argument	curPos - prevPos
>1350	AdditiveExpression	curPos - prevPos
>1351	Identifier	prevPos
>1352	Identifier	curPos
>1353	Argument	prevPos
>1354	Identifier	prevPos
>1355	Callee	iUrlPath . Mid
>1356	MemberAccess	iUrlPath . Mid
>1357	Identifier	Mid
>1358	Identifier	iUrlPath
>1359	Label	 
>1360	Condition	 
>1361	ArrayIndexing	iUrlPath [ curPos ]
>1362	Identifier	curPos
>1363	Identifier	iUrlPath
>1364	Condition	 
>1365	RelationalExpression	curPos < ( int ) iUrlPath . GetLength ( )
>1366	CastExpression	( int ) iUrlPath . GetLength ( )
>1367	CallExpression	iUrlPath . GetLength ( )
>1368	ArgumentList	 
>1369	Callee	iUrlPath . GetLength
>1370	MemberAccess	iUrlPath . GetLength
>1371	Identifier	GetLength
>1372	Identifier	iUrlPath
>1373	CastTarget	int
>1374	Identifier	curPos
>1375	IdentifierDeclStatement	 
>1376	IdentifierDecl	MidString
>1377	Identifier	MidString
>1378	IdentifierDeclType	CString
>1379	ExpressionStatement	 
>1380	AssignmentExpr	m_FtpPathType = 0
>1381	PrimaryExpression	0
>1382	Identifier	m_FtpPathType
>1383	IdentifierDeclStatement	 
>1384	IdentifierDecl	prevPos = 0
>1385	AssignmentExpr	prevPos = 0
>1386	PrimaryExpression	0
>1387	Identifier	prevPos
>1388	Identifier	prevPos
>1389	IdentifierDeclType	int
>1390	IdentifierDeclStatement	 
>1391	IdentifierDecl	curPos = 0
>1392	AssignmentExpr	curPos = 0
>1393	PrimaryExpression	0
>1394	Identifier	curPos
>1395	Identifier	curPos
>1396	IdentifierDeclType	int
>1397	IdentifierDeclStatement	 
>1398	IdentifierDecl	__Type ( \"type=\" )
>1399	PrimaryExpression	\"type=\"
>1400	Identifier	__Type
>1401	IdentifierDeclType	const CString
>1402	Statement	 
>1422	FunctionDef	CUrl 
>1423	ParameterList	int & curPos , const CString & iUrl
>1424	Parameter	 
>1425	Identifier	iUrl
>1426	ParameterType	const CString &
>1427	Parameter	 
>1428	Identifier	curPos
>1429	ParameterType	int &
>1430	ReturnType	bool
>1431	CompoundStatement	 
>1432	ReturnStatement	 
>1433	Identifier	true
>1434	IfStatement	if ( curVector . GetLength ( ) )
>1435	ElseStatement	else
>1436	ExpressionStatement	 
>1437	CallExpression	iUrl . Mid ( prevPos , curPos - prevPos , & m_Host )
>1438	ArgumentList	prevPos
>1439	Argument	& m_Host
>1440	UnaryOp	& m_Host
>1441	Identifier	m_Host
>1442	UnaryOperator	&
>1443	Argument	curPos - prevPos
>1444	AdditiveExpression	curPos - prevPos
>1445	Identifier	prevPos
>1446	Identifier	curPos
>1447	Argument	prevPos
>1448	Identifier	prevPos
>1449	Callee	iUrl . Mid
>1450	MemberAccess	iUrl . Mid
>1451	Identifier	Mid
>1452	Identifier	iUrl
>1453	CompoundStatement	 
>1454	ExpressionStatement	 
>1455	CallExpression	iUrl . Mid ( prevPos , curPos - prevPos , & m_Port )
>1456	ArgumentList	prevPos
>1457	Argument	& m_Port
>1458	UnaryOp	& m_Port
>1459	Identifier	m_Port
>1460	UnaryOperator	&
>1461	Argument	curPos - prevPos
>1462	AdditiveExpression	curPos - prevPos
>1463	Identifier	prevPos
>1464	Identifier	curPos
>1465	Argument	prevPos
>1466	Identifier	prevPos
>1467	Callee	iUrl . Mid
>1468	MemberAccess	iUrl . Mid
>1469	Identifier	Mid
>1470	Identifier	iUrl
>1471	ExpressionStatement	 
>1472	AssignmentExpr	m_Host = curVector
>1473	Identifier	curVector
>1474	Identifier	m_Host
>1475	Condition	 
>1476	CallExpression	curVector . GetLength ( )
>1477	ArgumentList	 
>1478	Callee	curVector . GetLength
>1479	MemberAccess	curVector . GetLength
>1480	Identifier	GetLength
>1481	Identifier	curVector
>1482	WhileStatement	while ( curPos < ( int ) iUrl . GetLength ( ) )
>1483	CompoundStatement	 
>1484	ExpressionStatement	 
>1485	IncDecOp	curPos ++
>1486	IncDec	++
>1487	Identifier	curPos
>1488	SwitchStatement	switch ( iUrl [ curPos ] )
>1489	CompoundStatement	 
>1490	ReturnStatement	 
>1491	Identifier	true
>1492	ExpressionStatement	 
>1493	IncDecOp	curPos ++
>1494	IncDec	++
>1495	Identifier	curPos
>1496	IfStatement	if ( curVector . GetLength ( ) )
>1497	ElseStatement	else
>1498	ExpressionStatement	 
>1499	CallExpression	iUrl . Mid ( prevPos , curPos - prevPos , & m_Host )
>1500	ArgumentList	prevPos
>1501	Argument	& m_Host
>1502	UnaryOp	& m_Host
>1503	Identifier	m_Host
>1504	UnaryOperator	&
>1505	Argument	curPos - prevPos
>1506	AdditiveExpression	curPos - prevPos
>1507	Identifier	prevPos
>1508	Identifier	curPos
>1509	Argument	prevPos
>1510	Identifier	prevPos
>1511	Callee	iUrl . Mid
>1512	MemberAccess	iUrl . Mid
>1513	Identifier	Mid
>1514	Identifier	iUrl
>1515	CompoundStatement	 
>1516	ExpressionStatement	 
>1517	CallExpression	curVector . Empty ( )
>1518	ArgumentList	 
>1519	Callee	curVector . Empty
>1520	MemberAccess	curVector . Empty
>1521	Identifier	Empty
>1522	Identifier	curVector
>1523	IfStatement	if ( ! CString 
>1524	CompoundStatement	 
>1525	ReturnStatement	 
>1526	Identifier	false
>1527	ExpressionStatement	 
>1528	AssignmentExpr	m_Error = \"invalid port\"
>1529	PrimaryExpression	\"invalid port\"
>1530	Identifier	m_Error
>1531	Condition	 
>1532	UnaryOp	! CString 
>1533	CallExpression	CString 
>1534	ArgumentList	m_Port
>1535	Argument	m_Port
>1536	Identifier	m_Port
>1537	Callee	CString 
>1538	Identifier	CString 
>1539	UnaryOperator	!
>1540	ExpressionStatement	 
>1541	CallExpression	iUrl . Mid ( prevPos , curPos - prevPos , & m_Port )
>1542	ArgumentList	prevPos
>1543	Argument	& m_Port
>1544	UnaryOp	& m_Port
>1545	Identifier	m_Port
>1546	UnaryOperator	&
>1547	Argument	curPos - prevPos
>1548	AdditiveExpression	curPos - prevPos
>1549	Identifier	prevPos
>1550	Identifier	curPos
>1551	Argument	prevPos
>1552	Identifier	prevPos
>1553	Callee	iUrl . Mid
>1554	MemberAccess	iUrl . Mid
>1555	Identifier	Mid
>1556	Identifier	iUrl
>1557	ExpressionStatement	 
>1558	AssignmentExpr	m_Host = curVector
>1559	Identifier	curVector
>1560	Identifier	m_Host
>1561	Condition	 
>1562	CallExpression	curVector . GetLength ( )
>1563	ArgumentList	 
>1564	Callee	curVector . GetLength
>1565	MemberAccess	curVector . GetLength
>1566	Identifier	GetLength
>1567	Identifier	curVector
>1568	Label	 
>1569	BreakStatement	 
>1570	ExpressionStatement	 
>1571	AssignmentExpr	prevPos = curPos + 1
>1572	AdditiveExpression	curPos + 1
>1573	PrimaryExpression	1
>1574	Identifier	curPos
>1575	Identifier	prevPos
>1576	IfStatement	if ( curVector . GetLength ( ) )
>1577	ElseStatement	else
>1578	ExpressionStatement	 
>1579	CallExpression	iUrl . Mid ( prevPos , curPos - prevPos , & m_User )
>1580	ArgumentList	prevPos
>1581	Argument	& m_User
>1582	UnaryOp	& m_User
>1583	Identifier	m_User
>1584	UnaryOperator	&
>1585	Argument	curPos - prevPos
>1586	AdditiveExpression	curPos - prevPos
>1587	Identifier	prevPos
>1588	Identifier	curPos
>1589	Argument	prevPos
>1590	Identifier	prevPos
>1591	Callee	iUrl . Mid
>1592	MemberAccess	iUrl . Mid
>1593	Identifier	Mid
>1594	Identifier	iUrl
>1595	CompoundStatement	 
>1596	ExpressionStatement	 
>1597	CallExpression	curVector . Empty ( )
>1598	ArgumentList	 
>1599	Callee	curVector . Empty
>1600	MemberAccess	curVector . Empty
>1601	Identifier	Empty
>1602	Identifier	curVector
>1603	ExpressionStatement	 
>1604	CallExpression	iUrl . Mid ( prevPos , curPos - prevPos , & m_Password )
>1605	ArgumentList	prevPos
>1606	Argument	& m_Password
>1607	UnaryOp	& m_Password
>1608	Identifier	m_Password
>1609	UnaryOperator	&
>1610	Argument	curPos - prevPos
>1611	AdditiveExpression	curPos - prevPos
>1612	Identifier	prevPos
>1613	Identifier	curPos
>1614	Argument	prevPos
>1615	Identifier	prevPos
>1616	Callee	iUrl . Mid
>1617	MemberAccess	iUrl . Mid
>1618	Identifier	Mid
>1619	Identifier	iUrl
>1620	ExpressionStatement	 
>1621	AssignmentExpr	m_User = curVector
>1622	Identifier	curVector
>1623	Identifier	m_User
>1624	Condition	 
>1625	CallExpression	curVector . GetLength ( )
>1626	ArgumentList	 
>1627	Callee	curVector . GetLength
>1628	MemberAccess	curVector . GetLength
>1629	Identifier	GetLength
>1630	Identifier	curVector
>1631	Label	 
>1632	BreakStatement	 
>1633	ExpressionStatement	 
>1634	AssignmentExpr	prevPos = curPos + 1
>1635	AdditiveExpression	curPos + 1
>1636	PrimaryExpression	1
>1637	Identifier	curPos
>1638	Identifier	prevPos
>1639	ExpressionStatement	 
>1640	CallExpression	iUrl . Mid ( prevPos , curPos - prevPos , & curVector )
>1641	ArgumentList	prevPos
>1642	Argument	& curVector
>1643	UnaryOp	& curVector
>1644	Identifier	curVector
>1645	UnaryOperator	&
>1646	Argument	curPos - prevPos
>1647	AdditiveExpression	curPos - prevPos
>1648	Identifier	prevPos
>1649	Identifier	curPos
>1650	Argument	prevPos
>1651	Identifier	prevPos
>1652	Callee	iUrl . Mid
>1653	MemberAccess	iUrl . Mid
>1654	Identifier	Mid
>1655	Identifier	iUrl
>1656	IfStatement	if ( curVector . GetLength ( ) )
>1657	CompoundStatement	 
>1658	ReturnStatement	 
>1659	Identifier	false
>1660	ExpressionStatement	 
>1661	AssignmentExpr	m_Error = \"invalid host/username\"
>1662	PrimaryExpression	\"invalid host/username\"
>1663	Identifier	m_Error
>1664	Condition	 
>1665	CallExpression	curVector . GetLength ( )
>1666	ArgumentList	 
>1667	Callee	curVector . GetLength
>1668	MemberAccess	curVector . GetLength
>1669	Identifier	GetLength
>1670	Identifier	curVector
>1671	Label	 
>1672	Condition	 
>1673	ArrayIndexing	iUrl [ curPos ]
>1674	Identifier	curPos
>1675	Identifier	iUrl
>1676	Condition	 
>1677	RelationalExpression	curPos < ( int ) iUrl . GetLength ( )
>1678	CastExpression	( int ) iUrl . GetLength ( )
>1679	CallExpression	iUrl . GetLength ( )
>1680	ArgumentList	 
>1681	Callee	iUrl . GetLength
>1682	MemberAccess	iUrl . GetLength
>1683	Identifier	GetLength
>1684	Identifier	iUrl
>1685	CastTarget	int
>1686	Identifier	curPos
>1687	IdentifierDeclStatement	 
>1688	IdentifierDecl	curVector
>1689	Identifier	curVector
>1690	IdentifierDeclType	CString
>1691	IdentifierDeclStatement	 
>1692	IdentifierDecl	prevPos = 0
>1693	AssignmentExpr	prevPos = 0
>1694	PrimaryExpression	0
>1695	Identifier	prevPos
>1696	Identifier	prevPos
>1697	IdentifierDeclType	int
>1698	ExpressionStatement	 
>1699	AssignmentExpr	curPos = 0
>1700	PrimaryExpression	0
>1701	Identifier	curPos
>1725	FunctionDef	CUrl 
>1726	ParameterList	char * what
>1727	Parameter	 
>1728	Identifier	what
>1729	ParameterType	char *
>1730	ReturnType	char
>1731	CompoundStatement	 
>1732	ReturnStatement	 
>1733	Identifier	digit
>1734	ExpressionStatement	 
>1735	AssignmentExpr	digit += ( ( what [ 1 ] >= 'A' ) ? ( ( what [ 1 ] & 0xdf ) - 'A' ) + 10 
>1736	ConditionalExpression	( what [ 1 ] >= 'A' ) ? ( ( what [ 1 ] & 0xdf ) - 'A' ) + 10 
>1737	AdditiveExpression	what [ 1 ] - '0'
>1738	PrimaryExpression	'0'
>1739	ArrayIndexing	what [ 1 ]
>1740	PrimaryExpression	1
>1741	Identifier	what
>1742	AdditiveExpression	( ( what [ 1 ] & 0xdf ) - 'A' ) + 10
>1743	PrimaryExpression	10
>1744	AdditiveExpression	( what [ 1 ] & 0xdf ) - 'A'
>1745	PrimaryExpression	'A'
>1746	BitAndExpression	what [ 1 ] & 0xdf
>1747	PrimaryExpression	0xdf
>1748	ArrayIndexing	what [ 1 ]
>1749	PrimaryExpression	1
>1750	Identifier	what
>1751	Condition	what [ 1 ] >= 'A'
>1752	RelationalExpression	what [ 1 ] >= 'A'
>1753	PrimaryExpression	'A'
>1754	ArrayIndexing	what [ 1 ]
>1755	PrimaryExpression	1
>1756	Identifier	what
>1757	Identifier	digit
>1758	ExpressionStatement	 
>1759	AssignmentExpr	digit *= 16
>1760	PrimaryExpression	16
>1761	Identifier	digit
>1762	ExpressionStatement	 
>1763	AssignmentExpr	digit = ( char ) ( what [ 0 ] >= 'A' ? ( ( what [ 0 ] & 0xdf ) - 'A' ) + 10 
>1764	CastExpression	( char ) ( what [ 0 ] >= 'A' ? ( ( what [ 0 ] & 0xdf ) - 'A' ) + 10 
>1765	ConditionalExpression	what [ 0 ] >= 'A' ? ( ( what [ 0 ] & 0xdf ) - 'A' ) + 10 
>1766	AdditiveExpression	what [ 0 ] - '0'
>1767	PrimaryExpression	'0'
>1768	ArrayIndexing	what [ 0 ]
>1769	PrimaryExpression	0
>1770	Identifier	what
>1771	AdditiveExpression	( ( what [ 0 ] & 0xdf ) - 'A' ) + 10
>1772	PrimaryExpression	10
>1773	AdditiveExpression	( what [ 0 ] & 0xdf ) - 'A'
>1774	PrimaryExpression	'A'
>1775	BitAndExpression	what [ 0 ] & 0xdf
>1776	PrimaryExpression	0xdf
>1777	ArrayIndexing	what [ 0 ]
>1778	PrimaryExpression	0
>1779	Identifier	what
>1780	Condition	what [ 0 ] >= 'A'
>1781	RelationalExpression	what [ 0 ] >= 'A'
>1782	PrimaryExpression	'A'
>1783	ArrayIndexing	what [ 0 ]
>1784	PrimaryExpression	0
>1785	Identifier	what
>1786	CastTarget	char
>1787	Identifier	digit
>1788	IdentifierDeclStatement	 
>1789	IdentifierDecl	digit
>1790	Identifier	digit
>1791	IdentifierDeclType	char
>1798	FunctionDef	CUrl 
>1799	ParameterList	const CString & Brute , bool Everything
>1800	Parameter	 
>1801	Identifier	Everything
>1802	ParameterType	bool
>1803	Parameter	 
>1804	Identifier	Brute
>1805	ParameterType	const CString &
>1806	ReturnType	CString
>1807	CompoundStatement	 
>1808	ReturnStatement	 
>1809	Identifier	sscTmp
>1810	IfStatement	if ( Brute . GetLength ( ) )
>1811	CompoundStatement	 
>1812	ForStatement	for ( int i = 0 ; i < ( int ) Brute . GetLength ( ) ; i ++ )
>1813	CompoundStatement	 
>1814	IfStatement	if ( tmpCh <= 0x00FF )
>1815	ElseStatement	else
>1816	IfStatement	if ( tmpCh <= 0x07FF )
>1817	ElseStatement	else
>1818	CompoundStatement	 
>1819	ExpressionStatement	 
>1820	CallExpression	COPY_HEX ( tmpBuf , sscTmp , hex [ 0x80 | ( tmpCh & 0x3F ) ] )
>1821	ArgumentList	tmpBuf
>1822	Argument	hex [ 0x80 | ( tmpCh & 0x3F ) ]
>1823	ArrayIndexing	hex [ 0x80 | ( tmpCh & 0x3F ) ]
>1824	InclusiveOrExpression	0x80 | ( tmpCh & 0x3F )
>1825	BitAndExpression	tmpCh & 0x3F
>1826	PrimaryExpression	0x3F
>1827	Identifier	tmpCh
>1828	PrimaryExpression	0x80
>1829	Identifier	hex
>1830	Argument	sscTmp
>1831	Identifier	sscTmp
>1832	Argument	tmpBuf
>1833	Identifier	tmpBuf
>1834	Callee	COPY_HEX
>1835	Identifier	COPY_HEX
>1836	ExpressionStatement	 
>1837	CallExpression	COPY_HEX ( tmpBuf , sscTmp , hex [ 0x80 | ( ( tmpCh >> 6 ) & 0x3F ) ] )
>1838	ArgumentList	tmpBuf
>1839	Argument	hex [ 0x80 | ( ( tmpCh >> 6 ) & 0x3F ) ]
>1840	ArrayIndexing	hex [ 0x80 | ( ( tmpCh >> 6 ) & 0x3F ) ]
>1841	InclusiveOrExpression	0x80 | ( ( tmpCh >> 6 ) & 0x3F )
>1842	BitAndExpression	( tmpCh >> 6 ) & 0x3F
>1843	PrimaryExpression	0x3F
>1844	ShiftExpression	tmpCh >> 6
>1845	PrimaryExpression	6
>1846	Identifier	tmpCh
>1847	PrimaryExpression	0x80
>1848	Identifier	hex
>1849	Argument	sscTmp
>1850	Identifier	sscTmp
>1851	Argument	tmpBuf
>1852	Identifier	tmpBuf
>1853	Callee	COPY_HEX
>1854	Identifier	COPY_HEX
>1855	ExpressionStatement	 
>1856	CallExpression	COPY_HEX ( tmpBuf , sscTmp , hex [ 0xc0 | ( tmpCh >> 12 ) ] )
>1857	ArgumentList	tmpBuf
>1858	Argument	hex [ 0xc0 | ( tmpCh >> 12 ) ]
>1859	ArrayIndexing	hex [ 0xc0 | ( tmpCh >> 12 ) ]
>1860	InclusiveOrExpression	0xc0 | ( tmpCh >> 12 )
>1861	ShiftExpression	tmpCh >> 12
>1862	PrimaryExpression	12
>1863	Identifier	tmpCh
>1864	PrimaryExpression	0xc0
>1865	Identifier	hex
>1866	Argument	sscTmp
>1867	Identifier	sscTmp
>1868	Argument	tmpBuf
>1869	Identifier	tmpBuf
>1870	Callee	COPY_HEX
>1871	Identifier	COPY_HEX
>1872	CompoundStatement	 
>1873	ExpressionStatement	 
>1874	CallExpression	COPY_HEX ( tmpBuf , sscTmp , hex [ 0x80 | ( tmpCh & 0x3F ) ] )
>1875	ArgumentList	tmpBuf
>1876	Argument	hex [ 0x80 | ( tmpCh & 0x3F ) ]
>1877	ArrayIndexing	hex [ 0x80 | ( tmpCh & 0x3F ) ]
>1878	InclusiveOrExpression	0x80 | ( tmpCh & 0x3F )
>1879	BitAndExpression	tmpCh & 0x3F
>1880	PrimaryExpression	0x3F
>1881	Identifier	tmpCh
>1882	PrimaryExpression	0x80
>1883	Identifier	hex
>1884	Argument	sscTmp
>1885	Identifier	sscTmp
>1886	Argument	tmpBuf
>1887	Identifier	tmpBuf
>1888	Callee	COPY_HEX
>1889	Identifier	COPY_HEX
>1890	ExpressionStatement	 
>1891	CallExpression	COPY_HEX ( tmpBuf , sscTmp , hex [ 0xc0 | ( tmpCh >> 6 ) ] )
>1892	ArgumentList	tmpBuf
>1893	Argument	hex [ 0xc0 | ( tmpCh >> 6 ) ]
>1894	ArrayIndexing	hex [ 0xc0 | ( tmpCh >> 6 ) ]
>1895	InclusiveOrExpression	0xc0 | ( tmpCh >> 6 )
>1896	ShiftExpression	tmpCh >> 6
>1897	PrimaryExpression	6
>1898	Identifier	tmpCh
>1899	PrimaryExpression	0xc0
>1900	Identifier	hex
>1901	Argument	sscTmp
>1902	Identifier	sscTmp
>1903	Argument	tmpBuf
>1904	Identifier	tmpBuf
>1905	Callee	COPY_HEX
>1906	Identifier	COPY_HEX
>1907	Condition	 
>1908	RelationalExpression	tmpCh <= 0x07FF
>1909	PrimaryExpression	0x07FF
>1910	Identifier	tmpCh
>1911	CompoundStatement	 
>1912	ExpressionStatement	 
>1913	CallExpression	COPY_HEX ( tmpBuf , sscTmp , hex [ tmpCh ] )
>1914	ArgumentList	tmpBuf
>1915	Argument	hex [ tmpCh ]
>1916	ArrayIndexing	hex [ tmpCh ]
>1917	Identifier	tmpCh
>1918	Identifier	hex
>1919	Argument	sscTmp
>1920	Identifier	sscTmp
>1921	Argument	tmpBuf
>1922	Identifier	tmpBuf
>1923	Callee	COPY_HEX
>1924	Identifier	COPY_HEX
>1925	Condition	 
>1926	RelationalExpression	tmpCh <= 0x00FF
>1927	PrimaryExpression	0x00FF
>1928	Identifier	tmpCh
>1929	IfStatement	if ( ! Everything && ( tmpCh > ' ' ) && ( tmpCh <= 0x007f ) )
>1930	CompoundStatement	 
>1931	ContinueStatement	 
>1932	ExpressionStatement	 
>1933	CallExpression	sscTmp . Append ( tmpCh )
>1934	ArgumentList	tmpCh
>1935	Argument	tmpCh
>1936	Identifier	tmpCh
>1937	Callee	sscTmp . Append
>1938	MemberAccess	sscTmp . Append
>1939	Identifier	Append
>1940	Identifier	sscTmp
>1941	Condition	 
>1942	AndExpression	! Everything && ( tmpCh > ' ' ) && ( tmpCh <= 0x007f )
>1943	AndExpression	( tmpCh > ' ' ) && ( tmpCh <= 0x007f )
>1944	RelationalExpression	tmpCh <= 0x007f
>1945	PrimaryExpression	0x007f
>1946	Identifier	tmpCh
>1947	RelationalExpression	tmpCh > ' '
>1948	PrimaryExpression	' '
>1949	Identifier	tmpCh
>1950	UnaryOp	! Everything
>1951	Identifier	Everything
>1952	UnaryOperator	!
>1953	IfStatement	if ( ( 'A' <= tmpCh && tmpCh <= 'Z' ) || ( 'a' <= tmpCh && tmpCh <= 'z' ) || ( '0' <= tmpCh && tmpCh <= '9' ) )
>1954	CompoundStatement	 
>1955	ContinueStatement	 
>1956	ExpressionStatement	 
>1957	CallExpression	sscTmp . Append ( tmpCh )
>1958	ArgumentList	tmpCh
>1959	Argument	tmpCh
>1960	Identifier	tmpCh
>1961	Callee	sscTmp . Append
>1962	MemberAccess	sscTmp . Append
>1963	Identifier	Append
>1964	Identifier	sscTmp
>1965	Condition	 
>1966	OrExpression	( 'A' <= tmpCh && tmpCh <= 'Z' ) || ( 'a' <= tmpCh && tmpCh <= 'z' ) || ( '0' <= tmpCh && tmpCh <= '\
>1967	OrExpression	( 'a' <= tmpCh && tmpCh <= 'z' ) || ( '0' <= tmpCh && tmpCh <= '9' )
>1968	AndExpression	'0' <= tmpCh && tmpCh <= '9'
>1969	RelationalExpression	tmpCh <= '9'
>1970	PrimaryExpression	'9'
>1971	Identifier	tmpCh
>1972	RelationalExpression	'0' <= tmpCh
>1973	Identifier	tmpCh
>1974	PrimaryExpression	'0'
>1975	AndExpression	'a' <= tmpCh && tmpCh <= 'z'
>1976	RelationalExpression	tmpCh <= 'z'
>1977	PrimaryExpression	'z'
>1978	Identifier	tmpCh
>1979	RelationalExpression	'a' <= tmpCh
>1980	Identifier	tmpCh
>1981	PrimaryExpression	'a'
>1982	AndExpression	'A' <= tmpCh && tmpCh <= 'Z'
>1983	RelationalExpression	tmpCh <= 'Z'
>1984	PrimaryExpression	'Z'
>1985	Identifier	tmpCh
>1986	RelationalExpression	'A' <= tmpCh
>1987	Identifier	tmpCh
>1988	PrimaryExpression	'A'
>1989	ExpressionStatement	 
>1990	AssignmentExpr	tmpCh = ( int ) Brute [ i ]
>1991	CastExpression	( int ) Brute [ i ]
>1992	ArrayIndexing	Brute [ i ]
>1993	Identifier	i
>1994	Identifier	Brute
>1995	CastTarget	int
>1996	Identifier	tmpCh
>1997	IncDecOp	 
>1998	IncDec	++
>1999	Identifier	i
>2000	Condition	 
>2001	RelationalExpression	i < ( int ) Brute . GetLength ( )
>2002	CastExpression	( int ) Brute . GetLength ( )
>2003	CallExpression	Brute . GetLength ( )
>2004	ArgumentList	 
>2005	Callee	Brute . GetLength
>2006	MemberAccess	Brute . GetLength
>2007	Identifier	GetLength
>2008	Identifier	Brute
>2009	CastTarget	int
>2010	Identifier	i
>2011	ForInit	 
>2012	IdentifierDeclStatement	int i = 0 ;
>2013	IdentifierDecl	i = 0
>2014	AssignmentExpr	i = 0
>2015	PrimaryExpression	0
>2016	Identifier	i
>2017	Identifier	i
>2018	IdentifierDeclType	int
>2019	IdentifierDeclStatement	 
>2020	IdentifierDecl	tmpCh
>2021	Identifier	tmpCh
>2022	IdentifierDeclType	unsigned char
>2023	IdentifierDeclStatement	 
>2024	IdentifierDecl	tmpBuf [ 3 ]
>2025	PrimaryExpression	3
>2026	Identifier	tmpBuf
>2027	IdentifierDeclType	char [ 3 ]
>2028	Condition	 
>2029	CallExpression	Brute . GetLength ( )
>2030	ArgumentList	 
>2031	Callee	Brute . GetLength
>2032	MemberAccess	Brute . GetLength
>2033	Identifier	GetLength
>2034	Identifier	Brute
>2035	IdentifierDeclStatement	 
>2036	IdentifierDecl	* hex [ 256 ] = { \"00\" , \"01\" , \"02\" , \"03\" , \"04\" , \"05\" , \"06\" , \"07\" , \"08\" , \"09\" , \"0a\" , \"0b\" , \"0c\" , \"0d\" , \"\
>2037	AssignmentExpr	* hex [ 256 ] = { \"00\" , \"01\" , \"02\" , \"03\" , \"04\" , \"05\" , \"06\" , \"07\" , \"08\" , \"09\" , \"0a\" , \"0b\" , \"\
>2038	InitializerList	\"00\"
>2039	PrimaryExpression	\"ff\"
>2040	PrimaryExpression	\"fe\"
>2041	PrimaryExpression	\"fd\"
>2042	PrimaryExpression	\"fc\"
>2043	PrimaryExpression	\"fb\"
>2044	PrimaryExpression	\"fa\"
>2045	PrimaryExpression	\"f9\"
>2046	PrimaryExpression	\"f8\"
>2047	PrimaryExpression	\"f7\"
>2048	PrimaryExpression	\"f6\"
>2049	PrimaryExpression	\"f5\"
>2050	PrimaryExpression	\"f4\"
>2051	PrimaryExpression	\"f3\"
>2052	PrimaryExpression	\"f2\"
>2053	PrimaryExpression	\"f1\"
>2054	PrimaryExpression	\"f0\"
>2055	PrimaryExpression	\"ef\"
>2056	PrimaryExpression	\"ee\"
>2057	PrimaryExpression	\"ed\"
>2058	PrimaryExpression	\"ec\"
>2059	PrimaryExpression	\"eb\"
>2060	PrimaryExpression	\"ea\"
>2061	PrimaryExpression	\"e9\"
>2062	PrimaryExpression	\"e8\"
>2063	PrimaryExpression	\"e7\"
>2064	PrimaryExpression	\"e6\"
>2065	PrimaryExpression	\"e5\"
>2066	PrimaryExpression	\"e4\"
>2067	PrimaryExpression	\"e3\"
>2068	PrimaryExpression	\"e2\"
>2069	PrimaryExpression	\"e1\"
>2070	PrimaryExpression	\"e0\"
>2071	PrimaryExpression	\"df\"
>2072	PrimaryExpression	\"de\"
>2073	PrimaryExpression	\"dd\"
>2074	PrimaryExpression	\"dc\"
>2075	PrimaryExpression	\"db\"
>2076	PrimaryExpression	\"da\"
>2077	PrimaryExpression	\"d9\"
>2078	PrimaryExpression	\"d8\"
>2079	PrimaryExpression	\"d7\"
>2080	PrimaryExpression	\"d6\"
>2081	PrimaryExpression	\"d5\"
>2082	PrimaryExpression	\"d4\"
>2083	PrimaryExpression	\"d3\"
>2084	PrimaryExpression	\"d2\"
>2085	PrimaryExpression	\"d1\"
>2086	PrimaryExpression	\"d0\"
>2087	PrimaryExpression	\"cf\"
>2088	PrimaryExpression	\"ce\"
>2089	PrimaryExpression	\"cd\"
>2090	PrimaryExpression	\"cc\"
>2091	PrimaryExpression	\"cb\"
>2092	PrimaryExpression	\"ca\"
>2093	PrimaryExpression	\"c9\"
>2094	PrimaryExpression	\"c8\"
>2095	PrimaryExpression	\"c7\"
>2096	PrimaryExpression	\"c6\"
>2097	PrimaryExpression	\"c5\"
>2098	PrimaryExpression	\"c4\"
>2099	PrimaryExpression	\"c3\"
>2100	PrimaryExpression	\"c2\"
>2101	PrimaryExpression	\"c1\"
>2102	PrimaryExpression	\"c0\"
>2103	PrimaryExpression	\"bf\"
>2104	PrimaryExpression	\"be\"
>2105	PrimaryExpression	\"bd\"
>2106	PrimaryExpression	\"bc\"
>2107	PrimaryExpression	\"bb\"
>2108	PrimaryExpression	\"ba\"
>2109	PrimaryExpression	\"b9\"
>2110	PrimaryExpression	\"b8\"
>2111	PrimaryExpression	\"b7\"
>2112	PrimaryExpression	\"b6\"
>2113	PrimaryExpression	\"b5\"
>2114	PrimaryExpression	\"b4\"
>2115	PrimaryExpression	\"b3\"
>2116	PrimaryExpression	\"b2\"
>2117	PrimaryExpression	\"b1\"
>2118	PrimaryExpression	\"b0\"
>2119	PrimaryExpression	\"af\"
>2120	PrimaryExpression	\"ae\"
>2121	PrimaryExpression	\"ad\"
>2122	PrimaryExpression	\"ac\"
>2123	PrimaryExpression	\"ab\"
>2124	PrimaryExpression	\"aa\"
>2125	PrimaryExpression	\"a9\"
>2126	PrimaryExpression	\"a8\"
>2127	PrimaryExpression	\"a7\"
>2128	PrimaryExpression	\"a6\"
>2129	PrimaryExpression	\"a5\"
>2130	PrimaryExpression	\"a4\"
>2131	PrimaryExpression	\"a3\"
>2132	PrimaryExpression	\"a2\"
>2133	PrimaryExpression	\"a1\"
>2134	PrimaryExpression	\"a0\"
>2135	PrimaryExpression	\"9f\"
>2136	PrimaryExpression	\"9e\"
>2137	PrimaryExpression	\"9d\"
>2138	PrimaryExpression	\"9c\"
>2139	PrimaryExpression	\"9b\"
>2140	PrimaryExpression	\"9a\"
>2141	PrimaryExpression	\"99\"
>2142	PrimaryExpression	\"98\"
>2143	PrimaryExpression	\"97\"
>2144	PrimaryExpression	\"96\"
>2145	PrimaryExpression	\"95\"
>2146	PrimaryExpression	\"94\"
>2147	PrimaryExpression	\"93\"
>2148	PrimaryExpression	\"92\"
>2149	PrimaryExpression	\"91\"
>2150	PrimaryExpression	\"90\"
>2151	PrimaryExpression	\"8f\"
>2152	PrimaryExpression	\"8e\"
>2153	PrimaryExpression	\"8d\"
>2154	PrimaryExpression	\"8c\"
>2155	PrimaryExpression	\"8b\"
>2156	PrimaryExpression	\"8a\"
>2157	PrimaryExpression	\"89\"
>2158	PrimaryExpression	\"88\"
>2159	PrimaryExpression	\"87\"
>2160	PrimaryExpression	\"86\"
>2161	PrimaryExpression	\"85\"
>2162	PrimaryExpression	\"84\"
>2163	PrimaryExpression	\"83\"
>2164	PrimaryExpression	\"82\"
>2165	PrimaryExpression	\"81\"
>2166	PrimaryExpression	\"80\"
>2167	PrimaryExpression	\"7f\"
>2168	PrimaryExpression	\"7e\"
>2169	PrimaryExpression	\"7d\"
>2170	PrimaryExpression	\"7c\"
>2171	PrimaryExpression	\"7b\"
>2172	PrimaryExpression	\"7a\"
>2173	PrimaryExpression	\"79\"
>2174	PrimaryExpression	\"78\"
>2175	PrimaryExpression	\"77\"
>2176	PrimaryExpression	\"76\"
>2177	PrimaryExpression	\"75\"
>2178	PrimaryExpression	\"74\"
>2179	PrimaryExpression	\"73\"
>2180	PrimaryExpression	\"72\"
>2181	PrimaryExpression	\"71\"
>2182	PrimaryExpression	\"70\"
>2183	PrimaryExpression	\"6f\"
>2184	PrimaryExpression	\"6e\"
>2185	PrimaryExpression	\"6d\"
>2186	PrimaryExpression	\"6c\"
>2187	PrimaryExpression	\"6b\"
>2188	PrimaryExpression	\"6a\"
>2189	PrimaryExpression	\"69\"
>2190	PrimaryExpression	\"68\"
>2191	PrimaryExpression	\"67\"
>2192	PrimaryExpression	\"66\"
>2193	PrimaryExpression	\"65\"
>2194	PrimaryExpression	\"64\"
>2195	PrimaryExpression	\"63\"
>2196	PrimaryExpression	\"62\"
>2197	PrimaryExpression	\"61\"
>2198	PrimaryExpression	\"60\"
>2199	PrimaryExpression	\"5f\"
>2200	PrimaryExpression	\"5e\"
>2201	PrimaryExpression	\"5d\"
>2202	PrimaryExpression	\"5c\"
>2203	PrimaryExpression	\"5b\"
>2204	PrimaryExpression	\"5a\"
>2205	PrimaryExpression	\"59\"
>2206	PrimaryExpression	\"58\"
>2207	PrimaryExpression	\"57\"
>2208	PrimaryExpression	\"56\"
>2209	PrimaryExpression	\"55\"
>2210	PrimaryExpression	\"54\"
>2211	PrimaryExpression	\"53\"
>2212	PrimaryExpression	\"52\"
>2213	PrimaryExpression	\"51\"
>2214	PrimaryExpression	\"50\"
>2215	PrimaryExpression	\"4f\"
>2216	PrimaryExpression	\"4e\"
>2217	PrimaryExpression	\"4d\"
>2218	PrimaryExpression	\"4c\"
>2219	PrimaryExpression	\"4b\"
>2220	PrimaryExpression	\"4a\"
>2221	PrimaryExpression	\"49\"
>2222	PrimaryExpression	\"48\"
>2223	PrimaryExpression	\"47\"
>2224	PrimaryExpression	\"46\"
>2225	PrimaryExpression	\"45\"
>2226	PrimaryExpression	\"44\"
>2227	PrimaryExpression	\"43\"
>2228	PrimaryExpression	\"42\"
>2229	PrimaryExpression	\"41\"
>2230	PrimaryExpression	\"40\"
>2231	PrimaryExpression	\"3f\"
>2232	PrimaryExpression	\"3e\"
>2233	PrimaryExpression	\"3d\"
>2234	PrimaryExpression	\"3c\"
>2235	PrimaryExpression	\"3b\"
>2236	PrimaryExpression	\"3a\"
>2237	PrimaryExpression	\"39\"
>2238	PrimaryExpression	\"38\"
>2239	PrimaryExpression	\"37\"
>2240	PrimaryExpression	\"36\"
>2241	PrimaryExpression	\"35\"
>2242	PrimaryExpression	\"34\"
>2243	PrimaryExpression	\"33\"
>2244	PrimaryExpression	\"32\"
>2245	PrimaryExpression	\"31\"
>2246	PrimaryExpression	\"30\"
>2247	PrimaryExpression	\"2f\"
>2248	PrimaryExpression	\"2e\"
>2249	PrimaryExpression	\"2d\"
>2250	PrimaryExpression	\"2c\"
>2251	PrimaryExpression	\"2b\"
>2252	PrimaryExpression	\"2a\"
>2253	PrimaryExpression	\"29\"
>2254	PrimaryExpression	\"28\"
>2255	PrimaryExpression	\"27\"
>2256	PrimaryExpression	\"26\"
>2257	PrimaryExpression	\"25\"
>2258	PrimaryExpression	\"24\"
>2259	PrimaryExpression	\"23\"
>2260	PrimaryExpression	\"22\"
>2261	PrimaryExpression	\"21\"
>2262	PrimaryExpression	\"20\"
>2263	PrimaryExpression	\"1f\"
>2264	PrimaryExpression	\"1e\"
>2265	PrimaryExpression	\"1d\"
>2266	PrimaryExpression	\"1c\"
>2267	PrimaryExpression	\"1b\"
>2268	PrimaryExpression	\"1a\"
>2269	PrimaryExpression	\"19\"
>2270	PrimaryExpression	\"18\"
>2271	PrimaryExpression	\"17\"
>2272	PrimaryExpression	\"16\"
>2273	PrimaryExpression	\"15\"
>2274	PrimaryExpression	\"14\"
>2275	PrimaryExpression	\"13\"
>2276	PrimaryExpression	\"12\"
>2277	PrimaryExpression	\"11\"
>2278	PrimaryExpression	\"10\"
>2279	PrimaryExpression	\"0f\"
>2280	PrimaryExpression	\"0e\"
>2281	PrimaryExpression	\"0d\"
>2282	PrimaryExpression	\"0c\"
>2283	PrimaryExpression	\"0b\"
>2284	PrimaryExpression	\"0a\"
>2285	PrimaryExpression	\"09\"
>2286	PrimaryExpression	\"08\"
>2287	PrimaryExpression	\"07\"
>2288	PrimaryExpression	\"06\"
>2289	PrimaryExpression	\"05\"
>2290	PrimaryExpression	\"04\"
>2291	PrimaryExpression	\"03\"
>2292	PrimaryExpression	\"02\"
>2293	PrimaryExpression	\"01\"
>2294	PrimaryExpression	\"00\"
>2295	Identifier	hex
>2296	PrimaryExpression	256
>2297	Identifier	hex
>2298	IdentifierDeclType	const char * [ 256 ]
>2299	Statement	 
>2300	ExpressionStatement	 
>2301	CallExpression	sscTmp . SetSize ( Brute . GetLength ( ) )
>2302	ArgumentList	Brute . GetLength ( )
>2303	Argument	Brute . GetLength ( )
>2304	CallExpression	Brute . GetLength ( )
>2305	ArgumentList	 
>2306	Callee	Brute . GetLength
>2307	MemberAccess	Brute . GetLength
>2308	Identifier	GetLength
>2309	Identifier	Brute
>2310	Callee	sscTmp . SetSize
>2311	MemberAccess	sscTmp . SetSize
>2312	Identifier	SetSize
>2313	Identifier	sscTmp
>2314	IdentifierDeclStatement	 
>2315	IdentifierDecl	sscTmp
>2316	Identifier	sscTmp
>2317	IdentifierDeclType	CString
>2333	FunctionDef	CUrl 
>2334	ParameterList	const CString & Brute
>2335	Parameter	 
>2336	Identifier	Brute
>2337	ParameterType	const CString &
>2338	ReturnType	CString
>2339	CompoundStatement	 
>2340	ReturnStatement	 
>2341	Identifier	Result
>2342	ExpressionStatement	 
>2343	CallExpression	Result . SetLength ( x , 0 , false )
>2344	ArgumentList	x
>2345	Argument	false
>2346	Identifier	false
>2347	Argument	0
>2348	PrimaryExpression	0
>2349	Argument	x
>2350	Identifier	x
>2351	Callee	Result . SetLength
>2352	MemberAccess	Result . SetLength
>2353	Identifier	SetLength
>2354	Identifier	Result
>2355	ForStatement	for ( x = 0 , y = 0 ; y < ( int ) Brute . GetLength ( ) ; ++ x , ++ y )
>2356	CompoundStatement	 
>2357	IfStatement	if ( ( Result [ x ] == '%' ) && ( y + 2 < ( int ) Brute . GetLength ( ) ) )
>2358	CompoundStatement	 
>2359	ExpressionStatement	 
>2360	AssignmentExpr	y += 2
>2361	PrimaryExpression	2
>2362	Identifier	y
>2363	ExpressionStatement	 
>2364	AssignmentExpr	Result [ x ] = ( unsigned char ) X2C ( ( char * ) & ( Brute . GetBuffer ( ) [ y + 1 ] ) )
>2365	CastExpression	( unsigned char ) X2C ( ( char * ) & ( Brute . GetBuffer ( ) [ y + 1 ] ) )
>2366	CallExpression	X2C ( ( char * ) & ( Brute . GetBuffer ( ) [ y + 1 ] ) )
>2367	ArgumentList	( char * ) & ( Brute . GetBuffer ( ) [ y + 1 ] )
>2368	Argument	( char * ) & ( Brute . GetBuffer ( ) [ y + 1 ] )
>2369	CastExpression	( char * ) & ( Brute . GetBuffer ( ) [ y + 1 ] )
>2370	UnaryOp	& ( Brute . GetBuffer ( ) [ y + 1 ] )
>2371	ArrayIndexing	Brute . GetBuffer ( ) [ y + 1 ]
>2372	AdditiveExpression	y + 1
>2373	PrimaryExpression	1
>2374	Identifier	y
>2375	CallExpression	Brute . GetBuffer ( )
>2376	ArgumentList	 
>2377	Callee	Brute . GetBuffer
>2378	MemberAccess	Brute . GetBuffer
>2379	Identifier	GetBuffer
>2380	Identifier	Brute
>2381	UnaryOperator	&
>2382	CastTarget	char *
>2383	Callee	X2C
>2384	Identifier	X2C
>2385	CastTarget	unsigned char
>2386	ArrayIndexing	Result [ x ]
>2387	Identifier	x
>2388	Identifier	Result
>2389	Condition	 
>2390	AndExpression	( Result [ x ] == '%' ) && ( y + 2 < ( int ) Brute . GetLength ( ) )
>2391	RelationalExpression	y + 2 < ( int ) Brute . GetLength ( )
>2392	CastExpression	( int ) Brute . GetLength ( )
>2393	CallExpression	Brute . GetLength ( )
>2394	ArgumentList	 
>2395	Callee	Brute . GetLength
>2396	MemberAccess	Brute . GetLength
>2397	Identifier	GetLength
>2398	Identifier	Brute
>2399	CastTarget	int
>2400	AdditiveExpression	y + 2
>2401	PrimaryExpression	2
>2402	Identifier	y
>2403	EqualityExpression	Result [ x ] == '%'
>2404	PrimaryExpression	'%'
>2405	ArrayIndexing	Result [ x ]
>2406	Identifier	x
>2407	Identifier	Result
>2408	ExpressionStatement	 
>2409	AssignmentExpr	Result [ x ] = Brute [ y ]
>2410	ArrayIndexing	Brute [ y ]
>2411	Identifier	y
>2412	Identifier	Brute
>2413	ArrayIndexing	Result [ x ]
>2414	Identifier	x
>2415	Identifier	Result
>2416	Expression	 
>2417	UnaryExpression	++ y
>2418	Identifier	y
>2419	IncDec	++
>2420	UnaryExpression	++ x
>2421	Identifier	x
>2422	IncDec	++
>2423	Condition	 
>2424	RelationalExpression	y < ( int ) Brute . GetLength ( )
>2425	CastExpression	( int ) Brute . GetLength ( )
>2426	CallExpression	Brute . GetLength ( )
>2427	ArgumentList	 
>2428	Callee	Brute . GetLength
>2429	MemberAccess	Brute . GetLength
>2430	Identifier	GetLength
>2431	Identifier	Brute
>2432	CastTarget	int
>2433	Identifier	y
>2434	ForInit	 
>2435	Expression	x = 0 , y = 0
>2436	AssignmentExpr	y = 0
>2437	PrimaryExpression	0
>2438	Identifier	y
>2439	AssignmentExpr	x = 0
>2440	PrimaryExpression	0
>2441	Identifier	x
>2442	IdentifierDeclStatement	 
>2443	IdentifierDecl	y
>2444	Identifier	y
>2445	IdentifierDeclType	int
>2446	IdentifierDecl	x
>2447	Identifier	x
>2448	IdentifierDeclType	int
>2449	ExpressionStatement	 
>2450	CallExpression	Result . SetLength ( Brute . GetLength ( ) + 3 )
>2451	ArgumentList	Brute . GetLength ( ) + 3
>2452	Argument	Brute . GetLength ( ) + 3
>2453	AdditiveExpression	Brute . GetLength ( ) + 3
>2454	PrimaryExpression	3
>2455	CallExpression	Brute . GetLength ( )
>2456	ArgumentList	 
>2457	Callee	Brute . GetLength
>2458	MemberAccess	Brute . GetLength
>2459	Identifier	GetLength
>2460	Identifier	Brute
>2461	Callee	Result . SetLength
>2462	MemberAccess	Result . SetLength
>2463	Identifier	SetLength
>2464	Identifier	Result
>2465	IdentifierDeclStatement	 
>2466	IdentifierDecl	Result
>2467	Identifier	Result
>2468	IdentifierDeclType	CString
>2487	FunctionDef	CUrl 
>2488	ParameterList	const CString & iHost
>2489	Parameter	 
>2490	Identifier	iHost
>2491	ParameterType	const CString &
>2492	ReturnType	bool
>2493	CompoundStatement	 
>2494	IfStatement	if ( curPos != ( int ) iHost . GetLength ( ) - 1 )
>2495	ElseStatement	else
>2496	ReturnStatement	 
>2497	Identifier	false
>2498	CompoundStatement	 
>2499	ReturnStatement	 
>2500	Identifier	true
>2501	ExpressionStatement	 
>2502	AssignmentExpr	m_Error = \"invalid host\"
>2503	PrimaryExpression	\"invalid host\"
>2504	Identifier	m_Error
>2505	Condition	 
>2506	EqualityExpression	curPos != ( int ) iHost . GetLength ( ) - 1
>2507	AdditiveExpression	( int ) iHost . GetLength ( ) - 1
>2508	PrimaryExpression	1
>2509	CastExpression	( int ) iHost . GetLength ( )
>2510	CallExpression	iHost . GetLength ( )
>2511	ArgumentList	 
>2512	Callee	iHost . GetLength
>2513	MemberAccess	iHost . GetLength
>2514	Identifier	GetLength
>2515	Identifier	iHost
>2516	CastTarget	int
>2517	Identifier	curPos
>2518	ExpressionStatement	 
>2519	AssignmentExpr	m_HostVector += MidString
>2520	Identifier	MidString
>2521	Identifier	m_HostVector
>2522	ExpressionStatement	 
>2523	CallExpression	iHost . Mid ( prevPos , curPos - prevPos , & MidString )
>2524	ArgumentList	prevPos
>2525	Argument	& MidString
>2526	UnaryOp	& MidString
>2527	Identifier	MidString
>2528	UnaryOperator	&
>2529	Argument	curPos - prevPos
>2530	AdditiveExpression	curPos - prevPos
>2531	Identifier	prevPos
>2532	Identifier	curPos
>2533	Argument	prevPos
>2534	Identifier	prevPos
>2535	Callee	iHost . Mid
>2536	MemberAccess	iHost . Mid
>2537	Identifier	Mid
>2538	Identifier	iHost
>2539	WhileStatement	while ( ( curPos < ( int ) iHost . GetLength ( ) ) && ( isalnum ( ( unsigned char ) iHost [ curPos ] ) || ( iHost [ \
>2540	CompoundStatement	 
>2541	ExpressionStatement	 
>2542	IncDecOp	curPos ++
>2543	IncDec	++
>2544	Identifier	curPos
>2545	SwitchStatement	switch ( iHost [ curPos ] )
>2546	CompoundStatement	 
>2547	ExpressionStatement	 
>2548	AssignmentExpr	prevPos = curPos + 1
>2549	AdditiveExpression	curPos + 1
>2550	PrimaryExpression	1
>2551	Identifier	curPos
>2552	Identifier	prevPos
>2553	ExpressionStatement	 
>2554	AssignmentExpr	m_HostVector += MidString
>2555	Identifier	MidString
>2556	Identifier	m_HostVector
>2557	ExpressionStatement	 
>2558	CallExpression	iHost . Mid ( prevPos , curPos - prevPos , & MidString )
>2559	ArgumentList	prevPos
>2560	Argument	& MidString
>2561	UnaryOp	& MidString
>2562	Identifier	MidString
>2563	UnaryOperator	&
>2564	Argument	curPos - prevPos
>2565	AdditiveExpression	curPos - prevPos
>2566	Identifier	prevPos
>2567	Identifier	curPos
>2568	Argument	prevPos
>2569	Identifier	prevPos
>2570	Callee	iHost . Mid
>2571	MemberAccess	iHost . Mid
>2572	Identifier	Mid
>2573	Identifier	iHost
>2574	Label	 
>2575	Condition	 
>2576	ArrayIndexing	iHost [ curPos ]
>2577	Identifier	curPos
>2578	Identifier	iHost
>2579	Condition	 
>2580	AndExpression	( curPos < ( int ) iHost . GetLength ( ) ) && ( isalnum ( ( unsigned char ) iHost [ curPos ] ) || ( \
>2581	OrExpression	isalnum ( ( unsigned char ) iHost [ curPos ] ) || ( iHost [ curPos ] == '-' ) || ( iHost [ curPos ] == '\
>2582	OrExpression	( iHost [ curPos ] == '-' ) || ( iHost [ curPos ] == '.' )
>2583	EqualityExpression	iHost [ curPos ] == '.'
>2584	PrimaryExpression	'.'
>2585	ArrayIndexing	iHost [ curPos ]
>2586	Identifier	curPos
>2587	Identifier	iHost
>2588	EqualityExpression	iHost [ curPos ] == '-'
>2589	PrimaryExpression	'-'
>2590	ArrayIndexing	iHost [ curPos ]
>2591	Identifier	curPos
>2592	Identifier	iHost
>2593	CallExpression	isalnum ( ( unsigned char ) iHost [ curPos ] )
>2594	ArgumentList	( unsigned char ) iHost [ curPos ]
>2595	Argument	( unsigned char ) iHost [ curPos ]
>2596	CastExpression	( unsigned char ) iHost [ curPos ]
>2597	ArrayIndexing	iHost [ curPos ]
>2598	Identifier	curPos
>2599	Identifier	iHost
>2600	CastTarget	unsigned char
>2601	Callee	isalnum
>2602	Identifier	isalnum
>2603	RelationalExpression	curPos < ( int ) iHost . GetLength ( )
>2604	CastExpression	( int ) iHost . GetLength ( )
>2605	CallExpression	iHost . GetLength ( )
>2606	ArgumentList	 
>2607	Callee	iHost . GetLength
>2608	MemberAccess	iHost . GetLength
>2609	Identifier	GetLength
>2610	Identifier	iHost
>2611	CastTarget	int
>2612	Identifier	curPos
>2613	IdentifierDeclStatement	 
>2614	IdentifierDecl	MidString
>2615	Identifier	MidString
>2616	IdentifierDeclType	CString
>2617	IdentifierDeclStatement	 
>2618	IdentifierDecl	prevPos = 0
>2619	AssignmentExpr	prevPos = 0
>2620	PrimaryExpression	0
>2621	Identifier	prevPos
>2622	Identifier	prevPos
>2623	IdentifierDeclType	int
>2624	IdentifierDeclStatement	 
>2625	IdentifierDecl	curPos = 0
>2626	AssignmentExpr	curPos = 0
>2627	PrimaryExpression	0
>2628	Identifier	curPos
>2629	Identifier	curPos
>2630	IdentifierDeclType	int
>2647	FunctionDef	operator == (const CUrl & iUrl)
>2648	ParameterList	const CUrl & iUrl
>2649	Parameter	 
>2650	Identifier	iUrl
>2651	ParameterType	const CUrl &
>2652	CompoundStatement	 
>2653	ReturnStatement	 
>2654	AndExpression	( m_Scheme . Same ( iUrl . m_Scheme ) ) && ( m_User == iUrl . m_User ) && ( m_Password == iUrl . m_Password ) && ( \
>2655	AndExpression	( m_User == iUrl . m_User ) && ( m_Password == iUrl . m_Password ) && ( m_Port == iUrl . m_Port ) && ( \
>2656	AndExpression	( m_Password == iUrl . m_Password ) && ( m_Port == iUrl . m_Port ) && ( m_Host . Same ( iUrl . m_Host ) ) && ( \
>2657	AndExpression	( m_Port == iUrl . m_Port ) && ( m_Host . Same ( iUrl . m_Host ) ) && ( m_UrlPath == iUrl . m_UrlPath ) && ( \
>2658	AndExpression	( m_Host . Same ( iUrl . m_Host ) ) && ( m_UrlPath == iUrl . m_UrlPath ) && ( m_FtpPathType == iUrl \
>2659	AndExpression	( m_UrlPath == iUrl . m_UrlPath ) && ( m_FtpPathType == iUrl . m_FtpPathType ) && ( m_HttpPath == iUrl \
>2660	AndExpression	( m_FtpPathType == iUrl . m_FtpPathType ) && ( m_HttpPath == iUrl . m_HttpPath ) && ( m_HttpArg == iUrl \
>2661	AndExpression	( m_HttpPath == iUrl . m_HttpPath ) && ( m_HttpArg == iUrl . m_HttpArg ) && ( m_HttpSig == iUrl . m_\
>2662	AndExpression	( m_HttpArg == iUrl . m_HttpArg ) && ( m_HttpSig == iUrl . m_HttpSig ) && ( m_Valid ) && ( iUrl . m_\
>2663	AndExpression	( m_HttpSig == iUrl . m_HttpSig ) && ( m_Valid ) && ( iUrl . m_Valid )
>2664	AndExpression	( m_Valid ) && ( iUrl . m_Valid )
>2665	MemberAccess	iUrl . m_Valid
>2666	Identifier	m_Valid
>2667	Identifier	iUrl
>2668	Identifier	m_Valid
>2669	EqualityExpression	m_HttpSig == iUrl . m_HttpSig
>2670	MemberAccess	iUrl . m_HttpSig
>2671	Identifier	m_HttpSig
>2672	Identifier	iUrl
>2673	Identifier	m_HttpSig
>2674	EqualityExpression	m_HttpArg == iUrl . m_HttpArg
>2675	MemberAccess	iUrl . m_HttpArg
>2676	Identifier	m_HttpArg
>2677	Identifier	iUrl
>2678	Identifier	m_HttpArg
>2679	EqualityExpression	m_HttpPath == iUrl . m_HttpPath
>2680	MemberAccess	iUrl . m_HttpPath
>2681	Identifier	m_HttpPath
>2682	Identifier	iUrl
>2683	Identifier	m_HttpPath
>2684	EqualityExpression	m_FtpPathType == iUrl . m_FtpPathType
>2685	MemberAccess	iUrl . m_FtpPathType
>2686	Identifier	m_FtpPathType
>2687	Identifier	iUrl
>2688	Identifier	m_FtpPathType
>2689	EqualityExpression	m_UrlPath == iUrl . m_UrlPath
>2690	MemberAccess	iUrl . m_UrlPath
>2691	Identifier	m_UrlPath
>2692	Identifier	iUrl
>2693	Identifier	m_UrlPath
>2694	CallExpression	m_Host . Same ( iUrl . m_Host )
>2695	ArgumentList	iUrl . m_Host
>2696	Argument	iUrl . m_Host
>2697	MemberAccess	iUrl . m_Host
>2698	Identifier	m_Host
>2699	Identifier	iUrl
>2700	Callee	m_Host . Same
>2701	MemberAccess	m_Host . Same
>2702	Identifier	Same
>2703	Identifier	m_Host
>2704	EqualityExpression	m_Port == iUrl . m_Port
>2705	MemberAccess	iUrl . m_Port
>2706	Identifier	m_Port
>2707	Identifier	iUrl
>2708	Identifier	m_Port
>2709	EqualityExpression	m_Password == iUrl . m_Password
>2710	MemberAccess	iUrl . m_Password
>2711	Identifier	m_Password
>2712	Identifier	iUrl
>2713	Identifier	m_Password
>2714	EqualityExpression	m_User == iUrl . m_User
>2715	MemberAccess	iUrl . m_User
>2716	Identifier	m_User
>2717	Identifier	iUrl
>2718	Identifier	m_User
>2719	CallExpression	m_Scheme . Same ( iUrl . m_Scheme )
>2720	ArgumentList	iUrl . m_Scheme
>2721	Argument	iUrl . m_Scheme
>2722	MemberAccess	iUrl . m_Scheme
>2723	Identifier	m_Scheme
>2724	Identifier	iUrl
>2725	Callee	m_Scheme . Same
>2726	MemberAccess	m_Scheme . Same
>2727	Identifier	Same
>2728	Identifier	m_Scheme
>2757	FunctionDef	CUrl 
>2758	ParameterList	 
>2759	ReturnType	CString
>2760	CompoundStatement	 
>2761	ReturnStatement	 
>2762	CallExpression	UnEscape ( Result )
>2763	ArgumentList	Result
>2764	Argument	Result
>2765	Identifier	Result
>2766	Callee	UnEscape
>2767	Identifier	UnEscape
>2768	IfStatement	if ( m_HttpSearchPath . GetLength ( ) )
>2769	CompoundStatement	 
>2770	ExpressionStatement	 
>2771	AssignmentExpr	Result += m_HttpSearchPath
>2772	Identifier	m_HttpSearchPath
>2773	Identifier	Result
>2774	ExpressionStatement	 
>2775	AssignmentExpr	Result += '?'
>2776	PrimaryExpression	'?'
>2777	Identifier	Result
>2778	Condition	 
>2779	CallExpression	m_HttpSearchPath . GetLength ( )
>2780	ArgumentList	 
>2781	Callee	m_HttpSearchPath . GetLength
>2782	MemberAccess	m_HttpSearchPath . GetLength
>2783	Identifier	GetLength
>2784	Identifier	m_HttpSearchPath
>2785	ExpressionStatement	 
>2786	AssignmentExpr	Result += m_HttpFilename
>2787	Identifier	m_HttpFilename
>2788	Identifier	Result
>2789	IdentifierDeclStatement	 
>2790	IdentifierDecl	Result ( m_HttpDirectory )
>2791	Identifier	m_HttpDirectory
>2792	Identifier	Result
>2793	IdentifierDeclType	CString
>2802	FunctionDef	CUrl 
>2803	ParameterList	const CUrl & iUrl
>2804	Parameter	 
>2805	Identifier	iUrl
>2806	ParameterType	const CUrl &
>2807	ReturnType	CUrl
>2808	CompoundStatement	 
>2809	ReturnStatement	 
>2810	Identifier	Result
>2811	ExpressionStatement	 
>2812	AssignmentExpr	Result . m_Brute = Result . GetHttpAll ( )
>2813	CallExpression	Result . GetHttpAll ( )
>2814	ArgumentList	 
>2815	Callee	Result . GetHttpAll
>2816	MemberAccess	Result . GetHttpAll
>2817	Identifier	GetHttpAll
>2818	Identifier	Result
>2819	MemberAccess	Result . m_Brute
>2820	Identifier	m_Brute
>2821	Identifier	Result
>2822	ExpressionStatement	 
>2823	AssignmentExpr	Result . m_HttpDirectory = CLocalPath 
>2824	CallExpression	CLocalPath 
>2825	ArgumentList	m_HttpDirectory
>2826	Argument	Result . m_HttpDirectory
>2827	MemberAccess	Result . m_HttpDirectory
>2828	Identifier	m_HttpDirectory
>2829	Identifier	Result
>2830	Argument	m_HttpDirectory
>2831	Identifier	m_HttpDirectory
>2832	Callee	CLocalPath 
>2833	Identifier	CLocalPath 
>2834	MemberAccess	Result . m_HttpDirectory
>2835	Identifier	m_HttpDirectory
>2836	Identifier	Result
>2837	IfStatement	if ( ( Result . m_Host . Same ( \"localhost\" ) ) || ( Result . m_Host . GetLength ( ) == 0 ) )
>2838	ElseStatement	else
>2839	ReturnStatement	 
>2840	Identifier	Result
>2841	CompoundStatement	 
>2842	ExpressionStatement	 
>2843	AssignmentExpr	Result . m_Host = m_Host
>2844	Identifier	m_Host
>2845	MemberAccess	Result . m_Host
>2846	Identifier	m_Host
>2847	Identifier	Result
>2848	Condition	 
>2849	OrExpression	( Result . m_Host . Same ( \"localhost\" ) ) || ( Result . m_Host . GetLength ( ) == 0 )
>2850	EqualityExpression	Result . m_Host . GetLength ( ) == 0
>2851	PrimaryExpression	0
>2852	CallExpression	Result . m_Host . GetLength ( )
>2853	ArgumentList	 
>2854	Callee	Result . m_Host . GetLength
>2855	MemberAccess	Result . m_Host . GetLength
>2856	Identifier	GetLength
>2857	MemberAccess	Result . m_Host
>2858	Identifier	m_Host
>2859	Identifier	Result
>2860	CallExpression	Result . m_Host . Same ( \"localhost\" )
>2861	ArgumentList	\"localhost\"
>2862	Argument	\"localhost\"
>2863	PrimaryExpression	\"localhost\"
>2864	Callee	Result . m_Host . Same
>2865	MemberAccess	Result . m_Host . Same
>2866	Identifier	Same
>2867	MemberAccess	Result . m_Host
>2868	Identifier	m_Host
>2869	Identifier	Result
>2870	IfStatement	if ( Result . m_Scheme != m_Scheme )
>2871	ReturnStatement	 
>2872	Identifier	Result
>2873	Condition	 
>2874	EqualityExpression	Result . m_Scheme != m_Scheme
>2875	Identifier	m_Scheme
>2876	MemberAccess	Result . m_Scheme
>2877	Identifier	m_Scheme
>2878	Identifier	Result
>2879	IdentifierDeclStatement	 
>2880	IdentifierDecl	Result ( iUrl )
>2881	Identifier	iUrl
>2882	Identifier	Result
>2883	IdentifierDeclType	CUrl
>2900	FunctionDef	CUrl 
>2901	ParameterList	const CString & iUrl
>2902	Parameter	 
>2903	Identifier	iUrl
>2904	ParameterType	const CString &
>2905	ReturnType	CUrl
>2906	CompoundStatement	 
>2907	ReturnStatement	 
>2908	Identifier	Result
>2909	ExpressionStatement	 
>2910	AssignmentExpr	Result . m_Brute = Result . GetHttpAll ( )
>2911	CallExpression	Result . GetHttpAll ( )
>2912	ArgumentList	 
>2913	Callee	Result . GetHttpAll
>2914	MemberAccess	Result . GetHttpAll
>2915	Identifier	GetHttpAll
>2916	Identifier	Result
>2917	MemberAccess	Result . m_Brute
>2918	Identifier	m_Brute
>2919	Identifier	Result
>2920	IfStatement	if ( iUrl . GetLength ( ) && ( iUrl [ 0 ] == '/' ) )
>2921	ElseStatement	else
>2922	IfStatement	if ( m_Scheme . Same ( g_strProto_FILE ) && CLocalPath 
>2923	ElseStatement	else
>2924	IfStatement	if ( iUrl . Pos ( '
>2925	ElseStatement	else
>2926	CompoundStatement	 
>2927	ReturnStatement	 
>2928	Identifier	NewResult
>2929	ExpressionStatement	 
>2930	AssignmentExpr	NewResult . m_Brute = NewResult . GetHttpAll ( )
>2931	CallExpression	NewResult . GetHttpAll ( )
>2932	ArgumentList	 
>2933	Callee	NewResult . GetHttpAll
>2934	MemberAccess	NewResult . GetHttpAll
>2935	Identifier	GetHttpAll
>2936	Identifier	NewResult
>2937	MemberAccess	NewResult . m_Brute
>2938	Identifier	m_Brute
>2939	Identifier	NewResult
>2940	ExpressionStatement	 
>2941	AssignmentExpr	NewResult . m_HttpDirectory = iUrl
>2942	Identifier	iUrl
>2943	MemberAccess	NewResult . m_HttpDirectory
>2944	Identifier	m_HttpDirectory
>2945	Identifier	NewResult
>2946	IdentifierDeclStatement	 
>2947	IdentifierDecl	NewResult
>2948	Identifier	NewResult
>2949	IdentifierDeclType	CUrl
>2950	CompoundStatement	 
>2951	ExpressionStatement	 
>2952	CallExpression	Result . ParseHttpPath ( CLocalPath 
>2953	ArgumentList	CLocalPath 
>2954	Argument	CLocalPath 
>2955	CallExpression	CLocalPath 
>2956	ArgumentList	m_HttpDirectory
>2957	Argument	iUrl
>2958	Identifier	iUrl
>2959	Argument	m_HttpDirectory
>2960	Identifier	m_HttpDirectory
>2961	Callee	CLocalPath 
>2962	Identifier	CLocalPath 
>2963	Callee	Result . ParseHttpPath
>2964	MemberAccess	Result . ParseHttpPath
>2965	Identifier	ParseHttpPath
>2966	Identifier	Result
>2967	Condition	 
>2968	EqualityExpression	iUrl . Pos ( '
>2969	UnaryOp	- 1
>2970	PrimaryExpression	1
>2971	UnaryOperator	-
>2972	CallExpression	iUrl . Pos ( '
>2973	ArgumentList	'
>2974	Argument	'
>2975	PrimaryExpression	'
>2976	Callee	iUrl . Pos
>2977	MemberAccess	iUrl . Pos
>2978	Identifier	Pos
>2979	Identifier	iUrl
>2980	CompoundStatement	 
>2981	ExpressionStatement	 
>2982	CallExpression	Result . ParseHttpPath ( iUrl )
>2983	ArgumentList	iUrl
>2984	Argument	iUrl
>2985	Identifier	iUrl
>2986	Callee	Result . ParseHttpPath
>2987	MemberAccess	Result . ParseHttpPath
>2988	Identifier	ParseHttpPath
>2989	Identifier	Result
>2990	Condition	 
>2991	AndExpression	m_Scheme . Same ( g_strProto_FILE ) && CLocalPath 
>2992	CallExpression	CLocalPath 
>2993	ArgumentList	iUrl
>2994	Argument	iUrl
>2995	Identifier	iUrl
>2996	Callee	CLocalPath 
>2997	Identifier	CLocalPath 
>2998	CallExpression	m_Scheme . Same ( g_strProto_FILE )
>2999	ArgumentList	g_strProto_FILE
>3000	Argument	g_strProto_FILE
>3001	Identifier	g_strProto_FILE
>3002	Callee	m_Scheme . Same
>3003	MemberAccess	m_Scheme . Same
>3004	Identifier	Same
>3005	Identifier	m_Scheme
>3006	CompoundStatement	 
>3007	ExpressionStatement	 
>3008	CallExpression	Result . ParseHttpPath ( iUrl )
>3009	ArgumentList	iUrl
>3010	Argument	iUrl
>3011	Identifier	iUrl
>3012	Callee	Result . ParseHttpPath
>3013	MemberAccess	Result . ParseHttpPath
>3014	Identifier	ParseHttpPath
>3015	Identifier	Result
>3016	Condition	 
>3017	AndExpression	iUrl . GetLength ( ) && ( iUrl [ 0 ] == '/' )
>3018	EqualityExpression	iUrl [ 0 ] == '/'
>3019	PrimaryExpression	'/'
>3020	ArrayIndexing	iUrl [ 0 ]
>3021	PrimaryExpression	0
>3022	Identifier	iUrl
>3023	CallExpression	iUrl . GetLength ( )
>3024	ArgumentList	 
>3025	Callee	iUrl . GetLength
>3026	MemberAccess	iUrl . GetLength
>3027	Identifier	GetLength
>3028	Identifier	iUrl
>3029	ExpressionStatement	 
>3030	AssignmentExpr	Result = ( * this )
>3031	UnaryOp	* this
>3032	Identifier	this
>3033	UnaryOperator	*
>3034	Identifier	Result
>3035	IfStatement	if ( colPos >= 0 )
>3036	CompoundStatement	 
>3037	IfStatement	if ( ( colStart == g_strProto_HTTP ) || ( colStart == g_strProto_HTTPS ) || ( colStart == g_strProto_FILE ) || ( \
>3038	CompoundStatement	 
>3039	ReturnStatement	 
>3040	CallExpression	Resolve ( Result )
>3041	ArgumentList	Result
>3042	Argument	Result
>3043	Identifier	Result
>3044	Callee	Resolve
>3045	Identifier	Resolve
>3046	ExpressionStatement	 
>3047	CallExpression	Result . SetUrl ( iUrl )
>3048	ArgumentList	iUrl
>3049	Argument	iUrl
>3050	Identifier	iUrl
>3051	Callee	Result . SetUrl
>3052	MemberAccess	Result . SetUrl
>3053	Identifier	SetUrl
>3054	Identifier	Result
>3055	Condition	 
>3056	OrExpression	( colStart == g_strProto_HTTP ) || ( colStart == g_strProto_HTTPS ) || ( colStart == g_strProto_FILE ) || ( \
>3057	OrExpression	( colStart == g_strProto_HTTPS ) || ( colStart == g_strProto_FILE ) || ( colStart == g_strProto_FTP ) || ( \
>3058	OrExpression	( colStart == g_strProto_FILE ) || ( colStart == g_strProto_FTP ) || ( colStart == g_strProto_GOPHER ) || ( \
>3059	OrExpression	( colStart == g_strProto_FTP ) || ( colStart == g_strProto_GOPHER ) || ( colStart == g_strProto_NEWS ) || ( \
>3060	OrExpression	( colStart == g_strProto_GOPHER ) || ( colStart == g_strProto_NEWS ) || ( colStart == g_strProto_NNTP ) || ( \
>3061	OrExpression	( colStart == g_strProto_NEWS ) || ( colStart == g_strProto_NNTP ) || ( colStart == g_strProto_TELNET ) || ( \
>3062	OrExpression	( colStart == g_strProto_NNTP ) || ( colStart == g_strProto_TELNET ) || ( colStart == g_strProto_WAIS ) || ( \
>3063	OrExpression	( colStart == g_strProto_TELNET ) || ( colStart == g_strProto_WAIS ) || ( colStart == g_strProto_PROSPERO )
>3064	OrExpression	( colStart == g_strProto_WAIS ) || ( colStart == g_strProto_PROSPERO )
>3065	EqualityExpression	colStart == g_strProto_PROSPERO
>3066	Identifier	g_strProto_PROSPERO
>3067	Identifier	colStart
>3068	EqualityExpression	colStart == g_strProto_WAIS
>3069	Identifier	g_strProto_WAIS
>3070	Identifier	colStart
>3071	EqualityExpression	colStart == g_strProto_TELNET
>3072	Identifier	g_strProto_TELNET
>3073	Identifier	colStart
>3074	EqualityExpression	colStart == g_strProto_NNTP
>3075	Identifier	g_strProto_NNTP
>3076	Identifier	colStart
>3077	EqualityExpression	colStart == g_strProto_NEWS
>3078	Identifier	g_strProto_NEWS
>3079	Identifier	colStart
>3080	EqualityExpression	colStart == g_strProto_GOPHER
>3081	Identifier	g_strProto_GOPHER
>3082	Identifier	colStart
>3083	EqualityExpression	colStart == g_strProto_FTP
>3084	Identifier	g_strProto_FTP
>3085	Identifier	colStart
>3086	EqualityExpression	colStart == g_strProto_FILE
>3087	Identifier	g_strProto_FILE
>3088	Identifier	colStart
>3089	EqualityExpression	colStart == g_strProto_HTTPS
>3090	Identifier	g_strProto_HTTPS
>3091	Identifier	colStart
>3092	EqualityExpression	colStart == g_strProto_HTTP
>3093	Identifier	g_strProto_HTTP
>3094	Identifier	colStart
>3095	IdentifierDeclStatement	 
>3096	IdentifierDecl	colStart = MidString
>3097	AssignmentExpr	colStart = MidString
>3098	Identifier	MidString
>3099	Identifier	MidString
>3100	Identifier	colStart
>3101	IdentifierDeclType	CString
>3102	ExpressionStatement	 
>3103	CallExpression	MidString . UpperCase ( )
>3104	ArgumentList	 
>3105	Callee	MidString . UpperCase
>3106	MemberAccess	MidString . UpperCase
>3107	Identifier	UpperCase
>3108	Identifier	MidString
>3109	ExpressionStatement	 
>3110	CallExpression	iUrl . Mid ( 0 , colPos , & MidString )
>3111	ArgumentList	0
>3112	Argument	& MidString
>3113	UnaryOp	& MidString
>3114	Identifier	MidString
>3115	UnaryOperator	&
>3116	Argument	colPos
>3117	Identifier	colPos
>3118	Argument	0
>3119	PrimaryExpression	0
>3120	Callee	iUrl . Mid
>3121	MemberAccess	iUrl . Mid
>3122	Identifier	Mid
>3123	Identifier	iUrl
>3124	Condition	 
>3125	RelationalExpression	colPos >= 0
>3126	PrimaryExpression	0
>3127	Identifier	colPos
>3128	IdentifierDeclStatement	 
>3129	IdentifierDecl	colPos = iUrl . Pos ( '
>3130	AssignmentExpr	colPos = iUrl . Pos ( '
>3131	CallExpression	iUrl . Pos ( '
>3132	ArgumentList	'
>3133	Argument	'
>3134	PrimaryExpression	'
>3135	Callee	iUrl . Pos
>3136	MemberAccess	iUrl . Pos
>3137	Identifier	Pos
>3138	Identifier	iUrl
>3139	Identifier	colPos
>3140	Identifier	colPos
>3141	IdentifierDeclType	int
>3142	IdentifierDeclStatement	 
>3143	IdentifierDecl	MidString
>3144	Identifier	MidString
>3145	IdentifierDeclType	CString
>3146	IdentifierDeclStatement	 
>3147	IdentifierDecl	Result
>3148	Identifier	Result
>3149	IdentifierDeclType	CUrl
>3186	FunctionDef	CUrl 
>3187	ParameterList	 
>3188	ReturnType	CString
>3189	CompoundStatement	 
>3190	ReturnStatement	 
>3191	Identifier	Result
>3192	IfStatement	if ( Result . GetLength ( ) )
>3193	CompoundStatement	 
>3194	IfStatement	if ( m_Scheme . Same ( g_strProto_HTTP ) || m_Scheme . Same ( g_strProto_HTTPS ) )
>3195	CompoundStatement	 
>3196	IfStatement	if ( CString 
>3197	CompoundStatement	 
>3198	ExpressionStatement	 
>3199	AssignmentExpr	Result += GetPort ( )
>3200	CallExpression	GetPort ( )
>3201	ArgumentList	 
>3202	Callee	GetPort
>3203	Identifier	GetPort
>3204	Identifier	Result
>3205	ExpressionStatement	 
>3206	AssignmentExpr	Result += '
>3207	PrimaryExpression	'
>3208	Identifier	Result
>3209	Condition	 
>3210	EqualityExpression	CString 
>3211	Identifier	DefaultPort
>3212	CallExpression	CString 
>3213	ArgumentList	m_Port
>3214	Argument	m_Port
>3215	Identifier	m_Port
>3216	Callee	CString 
>3217	Identifier	CString 
>3218	IfStatement	if ( m_Scheme . Same ( g_strProto_HTTPS ) )
>3219	CompoundStatement	 
>3220	ExpressionStatement	 
>3221	AssignmentExpr	DefaultPort = 443
>3222	PrimaryExpression	443
>3223	Identifier	DefaultPort
>3224	Condition	 
>3225	CallExpression	m_Scheme . Same ( g_strProto_HTTPS )
>3226	ArgumentList	g_strProto_HTTPS
>3227	Argument	g_strProto_HTTPS
>3228	Identifier	g_strProto_HTTPS
>3229	Callee	m_Scheme . Same
>3230	MemberAccess	m_Scheme . Same
>3231	Identifier	Same
>3232	Identifier	m_Scheme
>3233	IdentifierDeclStatement	 
>3234	IdentifierDecl	DefaultPort = 80
>3235	AssignmentExpr	DefaultPort = 80
>3236	PrimaryExpression	80
>3237	Identifier	DefaultPort
>3238	Identifier	DefaultPort
>3239	IdentifierDeclType	int
>3240	ExpressionStatement	 
>3241	AssignmentExpr	Result += m_Host
>3242	Identifier	m_Host
>3243	Identifier	Result
>3244	Condition	 
>3245	OrExpression	m_Scheme . Same ( g_strProto_HTTP ) || m_Scheme . Same ( g_strProto_HTTPS )
>3246	CallExpression	m_Scheme . Same ( g_strProto_HTTPS )
>3247	ArgumentList	g_strProto_HTTPS
>3248	Argument	g_strProto_HTTPS
>3249	Identifier	g_strProto_HTTPS
>3250	Callee	m_Scheme . Same
>3251	MemberAccess	m_Scheme . Same
>3252	Identifier	Same
>3253	Identifier	m_Scheme
>3254	CallExpression	m_Scheme . Same ( g_strProto_HTTP )
>3255	ArgumentList	g_strProto_HTTP
>3256	Argument	g_strProto_HTTP
>3257	Identifier	g_strProto_HTTP
>3258	Callee	m_Scheme . Same
>3259	MemberAccess	m_Scheme . Same
>3260	Identifier	Same
>3261	Identifier	m_Scheme
>3262	ExpressionStatement	 
>3263	AssignmentExpr	Result += g_strColSlashSlash
>3264	Identifier	g_strColSlashSlash
>3265	Identifier	Result
>3266	Condition	 
>3267	CallExpression	Result . GetLength ( )
>3268	ArgumentList	 
>3269	Callee	Result . GetLength
>3270	MemberAccess	Result . GetLength
>3271	Identifier	GetLength
>3272	Identifier	Result
>3273	IdentifierDeclStatement	 
>3274	IdentifierDecl	Result ( m_Scheme )
>3275	Identifier	m_Scheme
>3276	Identifier	Result
>3277	IdentifierDeclType	CString
>3293	FunctionDef	CUrl 
>3294	ParameterList	 
>3295	ReturnType	CString
>3296	CompoundStatement	 
>3297	ReturnStatement	 
>3298	Identifier	Result
>3299	IfStatement	if ( m_HttpSearchPath . GetLength ( ) )
>3300	CompoundStatement	 
>3301	ExpressionStatement	 
>3302	AssignmentExpr	Result += m_HttpSearchPath
>3303	Identifier	m_HttpSearchPath
>3304	Identifier	Result
>3305	ExpressionStatement	 
>3306	AssignmentExpr	Result += '?'
>3307	PrimaryExpression	'?'
>3308	Identifier	Result
>3309	Condition	 
>3310	CallExpression	m_HttpSearchPath . GetLength ( )
>3311	ArgumentList	 
>3312	Callee	m_HttpSearchPath . GetLength
>3313	MemberAccess	m_HttpSearchPath . GetLength
>3314	Identifier	GetLength
>3315	Identifier	m_HttpSearchPath
>3316	ExpressionStatement	 
>3317	AssignmentExpr	Result += m_HttpFilename
>3318	Identifier	m_HttpFilename
>3319	Identifier	Result
>3320	ExpressionStatement	 
>3321	AssignmentExpr	Result += m_HttpDirectory
>3322	Identifier	m_HttpDirectory
>3323	Identifier	Result
>3324	ExpressionStatement	 
>3325	AssignmentExpr	Result += GetHttpServer ( )
>3326	CallExpression	GetHttpServer ( )
>3327	ArgumentList	 
>3328	Callee	GetHttpServer
>3329	Identifier	GetHttpServer
>3330	Identifier	Result
>3331	IdentifierDeclStatement	 
>3332	IdentifierDecl	Result
>3333	Identifier	Result
>3334	IdentifierDeclType	CString
>3344	FunctionDef	CUrl 
>3345	ParameterList	const CUrl & iUrl
>3346	Parameter	 
>3347	Identifier	iUrl
>3348	ParameterType	const CUrl &
>3349	ReturnType	int
>3350	CompoundStatement	 
>3351	ReturnStatement	 
>3352	PrimaryExpression	1
>3353	IfStatement	if ( GetPortValue ( ) != iUrl . GetPortValue ( ) )
>3354	ReturnStatement	 
>3355	PrimaryExpression	0
>3356	Condition	 
>3357	EqualityExpression	GetPortValue ( ) != iUrl . GetPortValue ( )
>3358	CallExpression	iUrl . GetPortValue ( )
>3359	ArgumentList	 
>3360	Callee	iUrl . GetPortValue
>3361	MemberAccess	iUrl . GetPortValue
>3362	Identifier	GetPortValue
>3363	Identifier	iUrl
>3364	CallExpression	GetPortValue ( )
>3365	ArgumentList	 
>3366	Callee	GetPortValue
>3367	Identifier	GetPortValue
>3368	IfStatement	if ( ! GetHost ( ) . EndsWith ( iUrl . GetHost ( ) ) )
>3369	ReturnStatement	 
>3370	PrimaryExpression	0
>3371	Condition	 
>3372	UnaryOp	! GetHost ( ) . EndsWith ( iUrl . GetHost ( ) )
>3373	CallExpression	GetHost ( ) . EndsWith ( iUrl . GetHost ( ) )
>3374	ArgumentList	iUrl . GetHost ( )
>3375	Argument	iUrl . GetHost ( )
>3376	CallExpression	iUrl . GetHost ( )
>3377	ArgumentList	 
>3378	Callee	iUrl . GetHost
>3379	MemberAccess	iUrl . GetHost
>3380	Identifier	GetHost
>3381	Identifier	iUrl
>3382	Callee	GetHost ( ) . EndsWith
>3383	MemberAccess	GetHost ( ) . EndsWith
>3384	Identifier	EndsWith
>3385	CallExpression	GetHost ( )
>3386	ArgumentList	 
>3387	Callee	GetHost
>3388	Identifier	GetHost
>3389	UnaryOperator	!
>3390	IfStatement	if ( ! GetScheme ( ) . Same ( iUrl . GetScheme ( ) ) )
>3391	ReturnStatement	 
>3392	PrimaryExpression	0
>3393	Condition	 
>3394	UnaryOp	! GetScheme ( ) . Same ( iUrl . GetScheme ( ) )
>3395	CallExpression	GetScheme ( ) . Same ( iUrl . GetScheme ( ) )
>3396	ArgumentList	iUrl . GetScheme ( )
>3397	Argument	iUrl . GetScheme ( )
>3398	CallExpression	iUrl . GetScheme ( )
>3399	ArgumentList	 
>3400	Callee	iUrl . GetScheme
>3401	MemberAccess	iUrl . GetScheme
>3402	Identifier	GetScheme
>3403	Identifier	iUrl
>3404	Callee	GetScheme ( ) . Same
>3405	MemberAccess	GetScheme ( ) . Same
>3406	Identifier	Same
>3407	CallExpression	GetScheme ( )
>3408	ArgumentList	 
>3409	Callee	GetScheme
>3410	Identifier	GetScheme
>3411	UnaryOperator	!
>3412	ExpressionStatement	 
>3413	CallExpression	Trace ( tagSystem , levVerbose , ( \"url-includes
>3414	ArgumentList	tagSystem
>3415	Argument	\"url-includes
>3416	Expression	\"url-includes
>3417	Expression	GetPortValue ( ) , iUrl . GetPortValue ( )
>3418	CallExpression	iUrl . GetPortValue ( )
>3419	ArgumentList	 
>3420	Callee	iUrl . GetPortValue
>3421	MemberAccess	iUrl . GetPortValue
>3422	Identifier	GetPortValue
>3423	Identifier	iUrl
>3424	CallExpression	GetPortValue ( )
>3425	ArgumentList	 
>3426	Callee	GetPortValue
>3427	Identifier	GetPortValue
>3428	PrimaryExpression	\"url-includes
>3429	Argument	levVerbose
>3430	Identifier	levVerbose
>3431	Argument	tagSystem
>3432	Identifier	tagSystem
>3433	Callee	Trace
>3434	Identifier	Trace
>3435	ExpressionStatement	 
>3436	CallExpression	Trace ( tagSystem , levVerbose , ( \"url-includes
>3437	ArgumentList	tagSystem
>3438	Argument	\"url-includes
>3439	Expression	\"url-includes
>3440	Expression	GetHost ( ) . GetBuffer ( ) , iUrl . GetHost ( ) . GetBuffer ( )
>3441	CallExpression	iUrl . GetHost ( ) . GetBuffer ( )
>3442	ArgumentList	 
>3443	Callee	iUrl . GetHost ( ) . GetBuffer
>3444	MemberAccess	iUrl . GetHost ( ) . GetBuffer
>3445	Identifier	GetBuffer
>3446	CallExpression	iUrl . GetHost ( )
>3447	ArgumentList	 
>3448	Callee	iUrl . GetHost
>3449	MemberAccess	iUrl . GetHost
>3450	Identifier	GetHost
>3451	Identifier	iUrl
>3452	CallExpression	GetHost ( ) . GetBuffer ( )
>3453	ArgumentList	 
>3454	Callee	GetHost ( ) . GetBuffer
>3455	MemberAccess	GetHost ( ) . GetBuffer
>3456	Identifier	GetBuffer
>3457	CallExpression	GetHost ( )
>3458	ArgumentList	 
>3459	Callee	GetHost
>3460	Identifier	GetHost
>3461	PrimaryExpression	\"url-includes
>3462	Argument	levVerbose
>3463	Identifier	levVerbose
>3464	Argument	tagSystem
>3465	Identifier	tagSystem
>3466	Callee	Trace
>3467	Identifier	Trace
>3468	ExpressionStatement	 
>3469	CallExpression	Trace ( tagSystem , levVerbose , ( \"url-includes
>3470	ArgumentList	tagSystem
>3471	Argument	\"url-includes
>3472	Expression	\"url-includes
>3473	Expression	GetScheme ( ) . GetBuffer ( ) , iUrl . GetScheme ( ) . GetBuffer ( )
>3474	CallExpression	iUrl . GetScheme ( ) . GetBuffer ( )
>3475	ArgumentList	 
>3476	Callee	iUrl . GetScheme ( ) . GetBuffer
>3477	MemberAccess	iUrl . GetScheme ( ) . GetBuffer
>3478	Identifier	GetBuffer
>3479	CallExpression	iUrl . GetScheme ( )
>3480	ArgumentList	 
>3481	Callee	iUrl . GetScheme
>3482	MemberAccess	iUrl . GetScheme
>3483	Identifier	GetScheme
>3484	Identifier	iUrl
>3485	CallExpression	GetScheme ( ) . GetBuffer ( )
>3486	ArgumentList	 
>3487	Callee	GetScheme ( ) . GetBuffer
>3488	MemberAccess	GetScheme ( ) . GetBuffer
>3489	Identifier	GetBuffer
>3490	CallExpression	GetScheme ( )
>3491	ArgumentList	 
>3492	Callee	GetScheme
>3493	Identifier	GetScheme
>3494	PrimaryExpression	\"url-includes
>3495	Argument	levVerbose
>3496	Identifier	levVerbose
>3497	Argument	tagSystem
>3498	Identifier	tagSystem
>3499	Callee	Trace
>3500	Identifier	Trace
>3519	FunctionDef	CUrl 
>3520	ParameterList	 
>3521	ReturnType	CString
>3522	CompoundStatement	 
>3523	ReturnStatement	 
>3524	CallExpression	UnEscape ( VectorString )
>3525	ArgumentList	VectorString
>3526	Argument	VectorString
>3527	Identifier	VectorString
>3528	Callee	UnEscape
>3529	Identifier	UnEscape
>3530	ExpressionStatement	 
>3531	CallExpression	CString 
>3532	ArgumentList	DomainVector
>3533	Argument	& VectorString
>3534	UnaryOp	& VectorString
>3535	Identifier	VectorString
>3536	UnaryOperator	&
>3537	Argument	'.'
>3538	PrimaryExpression	'.'
>3539	Argument	DomainVector
>3540	Identifier	DomainVector
>3541	Callee	CString 
>3542	Identifier	CString 
>3543	IdentifierDeclStatement	 
>3544	IdentifierDecl	VectorString
>3545	Identifier	VectorString
>3546	IdentifierDeclType	CString
>3547	IfStatement	if ( DomainVector . GetSize ( ) > 2 )
>3548	ExpressionStatement	 
>3549	CallExpression	DomainVector . RemoveAt ( 0 )
>3550	ArgumentList	0
>3551	Argument	0
>3552	PrimaryExpression	0
>3553	Callee	DomainVector . RemoveAt
>3554	MemberAccess	DomainVector . RemoveAt
>3555	Identifier	RemoveAt
>3556	Identifier	DomainVector
>3557	Condition	 
>3558	RelationalExpression	DomainVector . GetSize ( ) > 2
>3559	PrimaryExpression	2
>3560	CallExpression	DomainVector . GetSize ( )
>3561	ArgumentList	 
>3562	Callee	DomainVector . GetSize
>3563	MemberAccess	DomainVector . GetSize
>3564	Identifier	GetSize
>3565	Identifier	DomainVector
>3566	ExpressionStatement	 
>3567	CallExpression	CString 
>3568	ArgumentList	m_Host
>3569	Argument	& DomainVector
>3570	UnaryOp	& DomainVector
>3571	Identifier	DomainVector
>3572	UnaryOperator	&
>3573	Argument	'.'
>3574	PrimaryExpression	'.'
>3575	Argument	m_Host
>3576	Identifier	m_Host
>3577	Callee	CString 
>3578	Identifier	CString 
>3579	IdentifierDeclStatement	 
>3580	IdentifierDecl	DomainVector
>3581	Identifier	DomainVector
>3582	IdentifierDeclType	CVector < CString >
<3=6,5,4
<6=7
<7=8
<8=10,9
<16=21,17
<17=18
<18=20,19
<21=22
<22=23
<23=27,24
<24=25
<25=26
<27=28
<33=38,34
<34=35
<35=37,36
<38=39
<39=40
<40=42,41
<42=44,43
<51=53,52
<57=62,58
<58=59
<59=61,60
<62=169,163,157,151,145,139,133,127,121,115,109,103,97,91,85,79,73,67,63
<63=64
<64=66,65
<67=68
<68=72,69
<69=71,70
<73=74
<74=78,75
<75=77,76
<79=80
<80=84,81
<81=83,82
<85=86
<86=90,87
<87=89,88
<91=92
<92=96,93
<93=95,94
<97=98
<98=102,99
<99=101,100
<103=104
<104=108,105
<105=107,106
<109=110
<110=114,111
<111=113,112
<115=116
<116=120,117
<117=119,118
<121=122
<122=126,123
<123=125,124
<127=128
<128=132,129
<129=131,130
<133=134
<134=138,135
<135=137,136
<139=140
<140=144,141
<141=143,142
<145=146
<146=150,147
<147=149,148
<151=152
<152=156,153
<153=155,154
<157=158
<158=162,159
<159=161,160
<163=164
<164=168,165
<165=167,166
<169=170
<170=174,171
<171=173,172
<217=223,222,218
<218=219
<219=221,220
<223=239,235,231,224
<224=225
<225=229,226
<226=227
<227=228
<229=230
<231=232
<232=234,233
<235=236
<236=238,237
<239=350,240
<240=343,336,329,322,315,308,301,294,287,283,276,269,262,255,248,241
<241=242
<242=244,243
<244=245
<245=247,246
<248=249
<249=251,250
<251=252
<252=254,253
<255=256
<256=258,257
<258=259
<259=261,260
<262=263
<263=265,264
<265=266
<266=268,267
<269=270
<270=272,271
<272=273
<273=275,274
<276=277
<277=279,278
<279=280
<280=282,281
<283=284
<284=286,285
<287=288
<288=290,289
<290=291
<291=293,292
<294=295
<295=297,296
<297=298
<298=300,299
<301=302
<302=304,303
<304=305
<305=307,306
<308=309
<309=311,310
<311=312
<312=314,313
<315=316
<316=318,317
<318=319
<319=321,320
<322=323
<323=325,324
<325=326
<326=328,327
<329=330
<330=332,331
<332=333
<333=335,334
<336=337
<337=339,338
<339=340
<340=342,341
<343=344
<344=346,345
<346=347
<347=349,348
<350=351
<351=353,352
<353=354
<354=356,355
<381=390,389,382
<382=386,383
<383=385,384
<386=388,387
<390=467,463,393,391
<391=392
<393=452,394
<394=399,395
<395=396
<396=398,397
<399=448,400
<400=447,441,426,424,423,422,421,420,418,401
<401=406,405,402
<402=403
<403=404
<406=407
<407=413,408
<408=410,409
<410=412,411
<413=415,414
<415=417,416
<418=419
<424=425
<426=427
<427=437,428
<428=435,433,429
<429=430
<430=432,431
<433=434
<435=436
<437=438
<438=440,439
<441=442
<442=446,443
<443=445,444
<448=449
<449=451,450
<452=453
<453=462,454
<454=461,455
<455=457,456
<457=458
<458=460,459
<463=464
<464=466,465
<467=468
<468=473,472,469
<469=471,470
<486=492,491,487
<487=488
<488=490,489
<492=833,826,822,811,757,737,662,493
<493=653,623,494
<494=495
<495=614,496
<496=600,586,497
<497=579,498
<498=559,499
<499=541,531,500
<500=501
<501=522,512,502
<502=503
<503=508,504
<504=505
<505=507,506
<508=509
<509=511,510
<512=513
<513=514
<514=521,515
<515=519,516
<516=517
<517=518
<519=520
<522=523
<523=527,524
<524=525
<525=526
<527=528
<528=530,529
<531=532
<532=533
<533=540,534
<534=538,535
<535=536
<536=537
<538=539
<541=542
<542=551,543
<543=547,544
<544=545
<545=546
<547=548
<548=550,549
<551=555,552
<552=553
<553=554
<555=556
<556=558,557
<559=560
<560=575,561
<561=573,566,562
<562=563
<563=565,564
<566=567
<567=569,568
<569=570
<570=572,571
<573=574
<575=576
<576=578,577
<579=580
<580=584,581
<581=582
<582=583
<584=585
<586=591,587
<587=588
<588=590,589
<591=592
<592=599,593
<593=595,594
<595=596
<596=598,597
<600=605,601
<601=602
<602=604,603
<605=606
<606=613,607
<607=609,608
<609=610
<610=612,611
<614=615
<615=621,616
<616=619,617
<617=618
<619=620
<621=622
<623=633,624
<624=625
<625=632,626
<626=630,627
<627=628
<628=629
<630=631
<633=634
<634=649,635
<635=647,640,636
<636=637
<637=639,638
<640=641
<641=643,642
<643=644
<644=646,645
<647=648
<649=650
<650=652,651
<653=654
<654=658,655
<655=656
<656=657
<658=659
<659=661,660
<662=719,718,663
<663=664
<664=709,665
<665=698,677,666
<666=667
<667=673,668
<668=671,669
<669=670
<671=672
<673=674
<674=676,675
<677=689,678
<678=679
<679=685,680
<680=683,681
<681=682
<683=684
<685=686
<686=688,687
<689=690
<690=697,691
<691=695,692
<692=693
<693=694
<695=696
<698=699
<699=705,700
<700=703,701
<701=702
<703=704
<705=706
<706=708,707
<709=710
<710=714,711
<711=712
<712=713
<714=715
<715=717,716
<719=720
<720=729,721
<721=725,722
<722=723
<723=724
<725=726
<726=728,727
<729=733,730
<730=731
<731=732
<733=734
<734=736,735
<737=738
<738=753,739
<739=751,744,740
<740=741
<741=743,742
<744=745
<745=747,746
<747=748
<748=750,749
<751=752
<753=754
<754=756,755
<757=804,764,758
<758=759
<759=760
<760=761
<761=763,762
<764=789,765
<765=780,771,766
<766=767
<767=768
<768=770,769
<771=776,772
<772=773
<773=775,774
<776=777
<777=779,778
<780=781
<781=785,782
<782=783
<783=784
<785=786
<786=788,787
<789=790
<790=800,791
<791=798,796,792
<792=793
<793=795,794
<796=797
<798=799
<800=801
<801=803,802
<804=805
<805=807,806
<807=808
<808=810,809
<811=812
<812=821,813
<813=819,814
<814=817,815
<815=816
<817=818
<819=820
<822=823
<823=825,824
<826=827
<827=832,831,828
<828=830,829
<833=835,834
<835=836
<836=843,837
<837=839,838
<839=840
<840=842,841
<879=885,884,880
<880=881
<881=883,882
<885=1161,1113,1099,1051,1040,1026,940,923,888,886
<886=887
<888=916,889
<889=901,890
<890=891
<891=897,892
<892=895,893
<893=894
<895=896
<897=898
<898=900,899
<901=902
<902=908,903
<903=905,904
<905=907,906
<908=915,909
<909=911,910
<911=912
<912=914,913
<916=917
<917=919,918
<919=920
<920=922,921
<923=933,924
<924=925
<925=929,926
<926=927
<927=928
<929=930
<930=932,931
<933=934
<934=936,935
<936=937
<937=939,938
<940=1022,984,941
<941=942
<942=980,943
<943=956,944
<944=952,945
<945=946
<946=948,947
<948=949
<949=951,950
<952=953
<953=955,954
<956=957
<957=972,958
<958=964,959
<959=961,960
<961=963,962
<964=966,965
<966=968,967
<968=969
<969=971,970
<972=976,973
<973=974
<974=975
<976=977
<977=979,978
<980=981
<981=983,982
<984=1007,985
<985=986
<986=1003,987
<987=999,992,988
<988=989
<989=991,990
<992=993
<993=995,994
<995=996
<996=998,997
<999=1000
<1000=1002,1001
<1003=1004
<1004=1006,1005
<1007=1008
<1008=1018,1009
<1009=1016,1014,1010
<1010=1011
<1011=1013,1012
<1014=1015
<1016=1017
<1018=1019
<1019=1021,1020
<1022=1023
<1023=1025,1024
<1026=1027
<1027=1039,1038,1028
<1028=1037,1029
<1029=1033,1030
<1030=1031
<1031=1032
<1033=1034
<1034=1036,1035
<1040=1041
<1041=1047,1042
<1042=1045,1043
<1043=1044
<1045=1046
<1047=1048
<1048=1050,1049
<1051=1095,1057,1052
<1052=1053
<1053=1054
<1054=1056,1055
<1057=1080,1058
<1058=1059
<1059=1076,1060
<1060=1072,1065,1061
<1061=1062
<1062=1064,1063
<1065=1066
<1066=1068,1067
<1068=1069
<1069=1071,1070
<1072=1073
<1073=1075,1074
<1076=1077
<1077=1079,1078
<1080=1081
<1081=1091,1082
<1082=1089,1087,1083
<1083=1084
<1084=1086,1085
<1087=1088
<1089=1090
<1091=1092
<1092=1094,1093
<1095=1096
<1096=1098,1097
<1099=1100
<1100=1112,1111,1101
<1101=1110,1102
<1102=1106,1103
<1103=1104
<1104=1105
<1106=1107
<1107=1109,1108
<1113=1157,1119,1114
<1114=1115
<1115=1116
<1116=1118,1117
<1119=1135,1120
<1120=1121
<1121=1131,1122
<1122=1129,1127,1123
<1123=1124
<1124=1126,1125
<1127=1128
<1129=1130
<1131=1132
<1132=1134,1133
<1135=1136
<1136=1153,1137
<1137=1149,1142,1138
<1138=1139
<1139=1141,1140
<1142=1143
<1143=1145,1144
<1145=1146
<1146=1148,1147
<1149=1150
<1150=1152,1151
<1153=1154
<1154=1156,1155
<1157=1158
<1158=1160,1159
<1161=1162
<1162=1174,1173,1163
<1163=1172,1164
<1164=1168,1165
<1165=1166
<1166=1167
<1168=1169
<1169=1171,1170
<1207=1213,1212,1208
<1208=1209
<1209=1211,1210
<1213=1402,1397,1390,1383,1379,1375,1216,1214
<1214=1215
<1216=1364,1217
<1217=1222,1218
<1218=1219
<1219=1221,1220
<1222=1360,1223
<1223=1359,1342,1338,1332,1331,1330,1313,1309,1303,1283,1224
<1224=1274,1233,1225
<1225=1226
<1226=1229,1227
<1227=1228
<1229=1230
<1230=1232,1231
<1233=1263,1257,1236,1234
<1234=1235
<1236=1244,1237
<1237=1240,1238
<1238=1239
<1240=1241
<1241=1243,1242
<1244=1245
<1245=1249,1246
<1246=1248,1247
<1249=1256,1250
<1250=1252,1251
<1252=1253
<1253=1255,1254
<1257=1258
<1258=1262,1259
<1259=1261,1260
<1263=1264
<1264=1273,1265
<1265=1267,1266
<1267=1269,1268
<1269=1270
<1270=1272,1271
<1274=1275
<1275=1279,1276
<1276=1277
<1277=1278
<1279=1280
<1280=1282,1281
<1283=1284
<1284=1299,1285
<1285=1297,1290,1286
<1286=1287
<1287=1289,1288
<1290=1291
<1291=1293,1292
<1293=1294
<1294=1296,1295
<1297=1298
<1299=1300
<1300=1302,1301
<1303=1304
<1304=1308,1305
<1305=1307,1306
<1309=1310
<1310=1312,1311
<1313=1314
<1314=1326,1315
<1315=1324,1320,1316
<1316=1317
<1317=1319,1318
<1320=1321
<1321=1323,1322
<1324=1325
<1326=1327
<1327=1329,1328
<1332=1333
<1333=1337,1334
<1334=1336,1335
<1338=1339
<1339=1341,1340
<1342=1343
<1343=1355,1344
<1344=1353,1349,1345
<1345=1346
<1346=1348,1347
<1349=1350
<1350=1352,1351
<1353=1354
<1355=1356
<1356=1358,1357
<1360=1361
<1361=1363,1362
<1364=1365
<1365=1374,1366
<1366=1373,1367
<1367=1369,1368
<1369=1370
<1370=1372,1371
<1375=1376
<1376=1378,1377
<1379=1380
<1380=1382,1381
<1383=1384
<1384=1389,1388,1385
<1385=1387,1386
<1390=1391
<1391=1396,1395,1392
<1392=1394,1393
<1397=1398
<1398=1401,1400,1399
<1422=1431,1430,1423
<1423=1427,1424
<1424=1426,1425
<1427=1429,1428
<1431=1698,1691,1687,1482,1434,1432
<1432=1433
<1434=1475,1453,1435
<1435=1436
<1436=1437
<1437=1449,1438
<1438=1447,1443,1439
<1439=1440
<1440=1442,1441
<1443=1444
<1444=1446,1445
<1447=1448
<1449=1450
<1450=1452,1451
<1453=1471,1454
<1454=1455
<1455=1467,1456
<1456=1465,1461,1457
<1457=1458
<1458=1460,1459
<1461=1462
<1462=1464,1463
<1465=1466
<1467=1468
<1468=1470,1469
<1471=1472
<1472=1474,1473
<1475=1476
<1476=1478,1477
<1478=1479
<1479=1481,1480
<1482=1676,1483
<1483=1488,1484
<1484=1485
<1485=1487,1486
<1488=1672,1489
<1489=1671,1656,1639,1633,1632,1631,1576,1570,1569,1568,1496,1492,1490
<1490=1491
<1492=1493
<1493=1495,1494
<1496=1561,1515,1497
<1497=1498
<1498=1499
<1499=1511,1500
<1500=1509,1505,1501
<1501=1502
<1502=1504,1503
<1505=1506
<1506=1508,1507
<1509=1510
<1511=1512
<1512=1514,1513
<1515=1557,1540,1523,1516
<1516=1517
<1517=1519,1518
<1519=1520
<1520=1522,1521
<1523=1531,1524
<1524=1527,1525
<1525=1526
<1527=1528
<1528=1530,1529
<1531=1532
<1532=1539,1533
<1533=1537,1534
<1534=1535
<1535=1536
<1537=1538
<1540=1541
<1541=1553,1542
<1542=1551,1547,1543
<1543=1544
<1544=1546,1545
<1547=1548
<1548=1550,1549
<1551=1552
<1553=1554
<1554=1556,1555
<1557=1558
<1558=1560,1559
<1561=1562
<1562=1564,1563
<1564=1565
<1565=1567,1566
<1570=1571
<1571=1575,1572
<1572=1574,1573
<1576=1624,1595,1577
<1577=1578
<1578=1579
<1579=1591,1580
<1580=1589,1585,1581
<1581=1582
<1582=1584,1583
<1585=1586
<1586=1588,1587
<1589=1590
<1591=1592
<1592=1594,1593
<1595=1620,1603,1596
<1596=1597
<1597=1599,1598
<1599=1600
<1600=1602,1601
<1603=1604
<1604=1616,1605
<1605=1614,1610,1606
<1606=1607
<1607=1609,1608
<1610=1611
<1611=1613,1612
<1614=1615
<1616=1617
<1617=1619,1618
<1620=1621
<1621=1623,1622
<1624=1625
<1625=1627,1626
<1627=1628
<1628=1630,1629
<1633=1634
<1634=1638,1635
<1635=1637,1636
<1639=1640
<1640=1652,1641
<1641=1650,1646,1642
<1642=1643
<1643=1645,1644
<1646=1647
<1647=1649,1648
<1650=1651
<1652=1653
<1653=1655,1654
<1656=1664,1657
<1657=1660,1658
<1658=1659
<1660=1661
<1661=1663,1662
<1664=1665
<1665=1667,1666
<1667=1668
<1668=1670,1669
<1672=1673
<1673=1675,1674
<1676=1677
<1677=1686,1678
<1678=1685,1679
<1679=1681,1680
<1681=1682
<1682=1684,1683
<1687=1688
<1688=1690,1689
<1691=1692
<1692=1697,1696,1693
<1693=1695,1694
<1698=1699
<1699=1701,1700
<1725=1731,1730,1726
<1726=1727
<1727=1729,1728
<1731=1788,1762,1758,1734,1732
<1732=1733
<1734=1735
<1735=1757,1736
<1736=1751,1742,1737
<1737=1739,1738
<1739=1741,1740
<1742=1744,1743
<1744=1746,1745
<1746=1748,1747
<1748=1750,1749
<1751=1752
<1752=1754,1753
<1754=1756,1755
<1758=1759
<1759=1761,1760
<1762=1763
<1763=1787,1764
<1764=1786,1765
<1765=1780,1771,1766
<1766=1768,1767
<1768=1770,1769
<1771=1773,1772
<1773=1775,1774
<1775=1777,1776
<1777=1779,1778
<1780=1781
<1781=1783,1782
<1783=1785,1784
<1788=1789
<1789=1791,1790
<1798=1807,1806,1799
<1799=1803,1800
<1800=1802,1801
<1803=1805,1804
<1807=2314,2300,2299,2035,1810,1808
<1808=1809
<1810=2028,1811
<1811=2023,2019,1812
<1812=2011,2000,1997,1813
<1813=1989,1953,1929,1814
<1814=1925,1911,1815
<1815=1816
<1816=1907,1872,1817
<1817=1818
<1818=1855,1836,1819
<1819=1820
<1820=1834,1821
<1821=1832,1830,1822
<1822=1823
<1823=1829,1824
<1824=1828,1825
<1825=1827,1826
<1830=1831
<1832=1833
<1834=1835
<1836=1837
<1837=1853,1838
<1838=1851,1849,1839
<1839=1840
<1840=1848,1841
<1841=1847,1842
<1842=1844,1843
<1844=1846,1845
<1849=1850
<1851=1852
<1853=1854
<1855=1856
<1856=1870,1857
<1857=1868,1866,1858
<1858=1859
<1859=1865,1860
<1860=1864,1861
<1861=1863,1862
<1866=1867
<1868=1869
<1870=1871
<1872=1890,1873
<1873=1874
<1874=1888,1875
<1875=1886,1884,1876
<1876=1877
<1877=1883,1878
<1878=1882,1879
<1879=1881,1880
<1884=1885
<1886=1887
<1888=1889
<1890=1891
<1891=1905,1892
<1892=1903,1901,1893
<1893=1894
<1894=1900,1895
<1895=1899,1896
<1896=1898,1897
<1901=1902
<1903=1904
<1905=1906
<1907=1908
<1908=1910,1909
<1911=1912
<1912=1913
<1913=1923,1914
<1914=1921,1919,1915
<1915=1916
<1916=1918,1917
<1919=1920
<1921=1922
<1923=1924
<1925=1926
<1926=1928,1927
<1929=1941,1930
<1930=1932,1931
<1932=1933
<1933=1937,1934
<1934=1935
<1935=1936
<1937=1938
<1938=1940,1939
<1941=1942
<1942=1950,1943
<1943=1947,1944
<1944=1946,1945
<1947=1949,1948
<1950=1952,1951
<1953=1965,1954
<1954=1956,1955
<1956=1957
<1957=1961,1958
<1958=1959
<1959=1960
<1961=1962
<1962=1964,1963
<1965=1966
<1966=1982,1967
<1967=1975,1968
<1968=1972,1969
<1969=1971,1970
<1972=1974,1973
<1975=1979,1976
<1976=1978,1977
<1979=1981,1980
<1982=1986,1983
<1983=1985,1984
<1986=1988,1987
<1989=1990
<1990=1996,1991
<1991=1995,1992
<1992=1994,1993
<1997=1999,1998
<2000=2001
<2001=2010,2002
<2002=2009,2003
<2003=2005,2004
<2005=2006
<2006=2008,2007
<2011=2012
<2012=2013
<2013=2018,2017,2014
<2014=2016,2015
<2019=2020
<2020=2022,2021
<2023=2024
<2024=2027,2026,2025
<2028=2029
<2029=2031,2030
<2031=2032
<2032=2034,2033
<2035=2036
<2036=2298,2297,2296,2037
<2037=2295,2038
<2038=2294,2293,2292,2291,2290,2289,2288,2287,2286,2285,2284,2283,2282,2281,2280,2279,2278,2277,2276,2275,2274,2273,2272,2271,2270,2269,2268,2267,2266,2265,2264,2263,2262,2261,2260,2259,2258,2257,2256,2255,2254,2253,2252,2251,2250,2249,2248,2247,2246,2245,2244,2243,2242,2241,2240,2239,2238,2237,2236,2235,2234,2233,2232,2231,2230,2229,2228,2227,2226,2225,2224,2223,2222,2221,2220,2219,2218,2217,2216,2215,2214,2213,2212,2211,2210,2209,2208,2207,2206,2205,2204,2203,2202,2201,2200,2199,2198,2197,2196,2195,2194,2193,2192,2191,2190,2189,2188,2187,2186,2185,2184,2183,2182,2181,2180,2179,2178,2177,2176,2175,2174,2173,2172,2171,2170,2169,2168,2167,2166,2165,2164,2163,2162,2161,2160,2159,2158,2157,2156,2155,2154,2153,2152,2151,2150,2149,2148,2147,2146,2145,2144,2143,2142,2141,2140,2139,2138,2137,2136,2135,2134,2133,2132,2131,2130,2129,2128,2127,2126,2125,2124,2123,2122,2121,2120,2119,2118,2117,2116,2115,2114,2113,2112,2111,2110,2109,2108,2107,2106,2105,2104,2103,2102,2101,2100,2099,2098,2097,2096,2095,2094,2093,2092,2091,2090,2089,2039,2040,2041,2042,2043,2044,2045,2046,2047,2048,2049,2050,2051,2052,2053,2054,2055,2056,2057,2058,2059,2060,2061,2062,2063,2064,2065,2066,2067,2068,2069,2070,2071,2072,2073,2074,2075,2076,2077,2078,2079,2080,2081,2082,2083,2084,2085,2086,2087,2088
<2300=2301
<2301=2310,2302
<2302=2303
<2303=2304
<2304=2306,2305
<2306=2307
<2307=2309,2308
<2310=2311
<2311=2313,2312
<2314=2315
<2315=2317,2316
<2333=2339,2338,2334
<2334=2335
<2335=2337,2336
<2339=2465,2449,2442,2355,2342,2340
<2340=2341
<2342=2343
<2343=2351,2344
<2344=2349,2347,2345
<2345=2346
<2347=2348
<2349=2350
<2351=2352
<2352=2354,2353
<2355=2434,2423,2416,2356
<2356=2408,2357
<2357=2389,2358
<2358=2363,2359
<2359=2360
<2360=2362,2361
<2363=2364
<2364=2386,2365
<2365=2385,2366
<2366=2383,2367
<2367=2368
<2368=2369
<2369=2382,2370
<2370=2381,2371
<2371=2375,2372
<2372=2374,2373
<2375=2377,2376
<2377=2378
<2378=2380,2379
<2383=2384
<2386=2388,2387
<2389=2390
<2390=2403,2391
<2391=2400,2392
<2392=2399,2393
<2393=2395,2394
<2395=2396
<2396=2398,2397
<2400=2402,2401
<2403=2405,2404
<2405=2407,2406
<2408=2409
<2409=2413,2410
<2410=2412,2411
<2413=2415,2414
<2416=2420,2417
<2417=2419,2418
<2420=2422,2421
<2423=2424
<2424=2433,2425
<2425=2432,2426
<2426=2428,2427
<2428=2429
<2429=2431,2430
<2434=2435
<2435=2439,2436
<2436=2438,2437
<2439=2441,2440
<2442=2446,2443
<2443=2445,2444
<2446=2448,2447
<2449=2450
<2450=2461,2451
<2451=2452
<2452=2453
<2453=2455,2454
<2455=2457,2456
<2457=2458
<2458=2460,2459
<2461=2462
<2462=2464,2463
<2465=2466
<2466=2468,2467
<2487=2493,2492,2488
<2488=2489
<2489=2491,2490
<2493=2624,2617,2613,2539,2522,2518,2494
<2494=2505,2498,2495
<2495=2496
<2496=2497
<2498=2501,2499
<2499=2500
<2501=2502
<2502=2504,2503
<2505=2506
<2506=2517,2507
<2507=2509,2508
<2509=2516,2510
<2510=2512,2511
<2512=2513
<2513=2515,2514
<2518=2519
<2519=2521,2520
<2522=2523
<2523=2535,2524
<2524=2533,2529,2525
<2525=2526
<2526=2528,2527
<2529=2530
<2530=2532,2531
<2533=2534
<2535=2536
<2536=2538,2537
<2539=2579,2540
<2540=2545,2541
<2541=2542
<2542=2544,2543
<2545=2575,2546
<2546=2574,2557,2553,2547
<2547=2548
<2548=2552,2549
<2549=2551,2550
<2553=2554
<2554=2556,2555
<2557=2558
<2558=2570,2559
<2559=2568,2564,2560
<2560=2561
<2561=2563,2562
<2564=2565
<2565=2567,2566
<2568=2569
<2570=2571
<2571=2573,2572
<2575=2576
<2576=2578,2577
<2579=2580
<2580=2603,2581
<2581=2593,2582
<2582=2588,2583
<2583=2585,2584
<2585=2587,2586
<2588=2590,2589
<2590=2592,2591
<2593=2601,2594
<2594=2595
<2595=2596
<2596=2600,2597
<2597=2599,2598
<2601=2602
<2603=2612,2604
<2604=2611,2605
<2605=2607,2606
<2607=2608
<2608=2610,2609
<2613=2614
<2614=2616,2615
<2617=2618
<2618=2623,2622,2619
<2619=2621,2620
<2624=2625
<2625=2630,2629,2626
<2626=2628,2627
<2647=2652,2648
<2648=2649
<2649=2651,2650
<2652=2653
<2653=2654
<2654=2719,2655
<2655=2714,2656
<2656=2709,2657
<2657=2704,2658
<2658=2694,2659
<2659=2689,2660
<2660=2684,2661
<2661=2679,2662
<2662=2674,2663
<2663=2669,2664
<2664=2668,2665
<2665=2667,2666
<2669=2673,2670
<2670=2672,2671
<2674=2678,2675
<2675=2677,2676
<2679=2683,2680
<2680=2682,2681
<2684=2688,2685
<2685=2687,2686
<2689=2693,2690
<2690=2692,2691
<2694=2700,2695
<2695=2696
<2696=2697
<2697=2699,2698
<2700=2701
<2701=2703,2702
<2704=2708,2705
<2705=2707,2706
<2709=2713,2710
<2710=2712,2711
<2714=2718,2715
<2715=2717,2716
<2719=2725,2720
<2720=2721
<2721=2722
<2722=2724,2723
<2725=2726
<2726=2728,2727
<2757=2760,2759,2758
<2760=2789,2785,2768,2761
<2761=2762
<2762=2766,2763
<2763=2764
<2764=2765
<2766=2767
<2768=2778,2769
<2769=2774,2770
<2770=2771
<2771=2773,2772
<2774=2775
<2775=2777,2776
<2778=2779
<2779=2781,2780
<2781=2782
<2782=2784,2783
<2785=2786
<2786=2788,2787
<2789=2790
<2790=2793,2792,2791
<2802=2808,2807,2803
<2803=2804
<2804=2806,2805
<2808=2879,2870,2837,2822,2811,2809
<2809=2810
<2811=2812
<2812=2819,2813
<2813=2815,2814
<2815=2816
<2816=2818,2817
<2819=2821,2820
<2822=2823
<2823=2834,2824
<2824=2832,2825
<2825=2830,2826
<2826=2827
<2827=2829,2828
<2830=2831
<2832=2833
<2834=2836,2835
<2837=2848,2841,2838
<2838=2839
<2839=2840
<2841=2842
<2842=2843
<2843=2845,2844
<2845=2847,2846
<2848=2849
<2849=2860,2850
<2850=2852,2851
<2852=2854,2853
<2854=2855
<2855=2857,2856
<2857=2859,2858
<2860=2864,2861
<2861=2862
<2862=2863
<2864=2865
<2865=2867,2866
<2867=2869,2868
<2870=2873,2871
<2871=2872
<2873=2874
<2874=2876,2875
<2876=2878,2877
<2879=2880
<2880=2883,2882,2881
<2900=2906,2905,2901
<2901=2902
<2902=2904,2903
<2906=3146,3142,3128,3035,3029,2920,2909,2907
<2907=2908
<2909=2910
<2910=2917,2911
<2911=2913,2912
<2913=2914
<2914=2916,2915
<2917=2919,2918
<2920=3016,3006,2921
<2921=2922
<2922=2990,2980,2923
<2923=2924
<2924=2967,2950,2925
<2925=2926
<2926=2946,2940,2929,2927
<2927=2928
<2929=2930
<2930=2937,2931
<2931=2933,2932
<2933=2934
<2934=2936,2935
<2937=2939,2938
<2940=2941
<2941=2943,2942
<2943=2945,2944
<2946=2947
<2947=2949,2948
<2950=2951
<2951=2952
<2952=2963,2953
<2953=2954
<2954=2955
<2955=2961,2956
<2956=2959,2957
<2957=2958
<2959=2960
<2961=2962
<2963=2964
<2964=2966,2965
<2967=2968
<2968=2972,2969
<2969=2971,2970
<2972=2976,2973
<2973=2974
<2974=2975
<2976=2977
<2977=2979,2978
<2980=2981
<2981=2982
<2982=2986,2983
<2983=2984
<2984=2985
<2986=2987
<2987=2989,2988
<2990=2991
<2991=2998,2992
<2992=2996,2993
<2993=2994
<2994=2995
<2996=2997
<2998=3002,2999
<2999=3000
<3000=3001
<3002=3003
<3003=3005,3004
<3006=3007
<3007=3008
<3008=3012,3009
<3009=3010
<3010=3011
<3012=3013
<3013=3015,3014
<3016=3017
<3017=3023,3018
<3018=3020,3019
<3020=3022,3021
<3023=3025,3024
<3025=3026
<3026=3028,3027
<3029=3030
<3030=3034,3031
<3031=3033,3032
<3035=3124,3036
<3036=3109,3102,3095,3037
<3037=3055,3038
<3038=3046,3039
<3039=3040
<3040=3044,3041
<3041=3042
<3042=3043
<3044=3045
<3046=3047
<3047=3051,3048
<3048=3049
<3049=3050
<3051=3052
<3052=3054,3053
<3055=3056
<3056=3092,3057
<3057=3089,3058
<3058=3086,3059
<3059=3083,3060
<3060=3080,3061
<3061=3077,3062
<3062=3074,3063
<3063=3071,3064
<3064=3068,3065
<3065=3067,3066
<3068=3070,3069
<3071=3073,3072
<3074=3076,3075
<3077=3079,3078
<3080=3082,3081
<3083=3085,3084
<3086=3088,3087
<3089=3091,3090
<3092=3094,3093
<3095=3096
<3096=3101,3100,3097
<3097=3099,3098
<3102=3103
<3103=3105,3104
<3105=3106
<3106=3108,3107
<3109=3110
<3110=3120,3111
<3111=3118,3116,3112
<3112=3113
<3113=3115,3114
<3116=3117
<3118=3119
<3120=3121
<3121=3123,3122
<3124=3125
<3125=3127,3126
<3128=3129
<3129=3141,3140,3130
<3130=3139,3131
<3131=3135,3132
<3132=3133
<3133=3134
<3135=3136
<3136=3138,3137
<3142=3143
<3143=3145,3144
<3146=3147
<3147=3149,3148
<3186=3189,3188,3187
<3189=3273,3192,3190
<3190=3191
<3192=3266,3193
<3193=3262,3194
<3194=3244,3195
<3195=3240,3233,3218,3196
<3196=3209,3197
<3197=3205,3198
<3198=3199
<3199=3204,3200
<3200=3202,3201
<3202=3203
<3205=3206
<3206=3208,3207
<3209=3210
<3210=3212,3211
<3212=3216,3213
<3213=3214
<3214=3215
<3216=3217
<3218=3224,3219
<3219=3220
<3220=3221
<3221=3223,3222
<3224=3225
<3225=3229,3226
<3226=3227
<3227=3228
<3229=3230
<3230=3232,3231
<3233=3234
<3234=3239,3238,3235
<3235=3237,3236
<3240=3241
<3241=3243,3242
<3244=3245
<3245=3254,3246
<3246=3250,3247
<3247=3248
<3248=3249
<3250=3251
<3251=3253,3252
<3254=3258,3255
<3255=3256
<3256=3257
<3258=3259
<3259=3261,3260
<3262=3263
<3263=3265,3264
<3266=3267
<3267=3269,3268
<3269=3270
<3270=3272,3271
<3273=3274
<3274=3277,3276,3275
<3293=3296,3295,3294
<3296=3331,3324,3320,3316,3299,3297
<3297=3298
<3299=3309,3300
<3300=3305,3301
<3301=3302
<3302=3304,3303
<3305=3306
<3306=3308,3307
<3309=3310
<3310=3312,3311
<3312=3313
<3313=3315,3314
<3316=3317
<3317=3319,3318
<3320=3321
<3321=3323,3322
<3324=3325
<3325=3330,3326
<3326=3328,3327
<3328=3329
<3331=3332
<3332=3334,3333
<3344=3350,3349,3345
<3345=3346
<3346=3348,3347
<3350=3468,3435,3412,3390,3368,3353,3351
<3351=3352
<3353=3356,3354
<3354=3355
<3356=3357
<3357=3364,3358
<3358=3360,3359
<3360=3361
<3361=3363,3362
<3364=3366,3365
<3366=3367
<3368=3371,3369
<3369=3370
<3371=3372
<3372=3389,3373
<3373=3382,3374
<3374=3375
<3375=3376
<3376=3378,3377
<3378=3379
<3379=3381,3380
<3382=3383
<3383=3385,3384
<3385=3387,3386
<3387=3388
<3390=3393,3391
<3391=3392
<3393=3394
<3394=3411,3395
<3395=3404,3396
<3396=3397
<3397=3398
<3398=3400,3399
<3400=3401
<3401=3403,3402
<3404=3405
<3405=3407,3406
<3407=3409,3408
<3409=3410
<3412=3413
<3413=3433,3414
<3414=3431,3429,3415
<3415=3416
<3416=3428,3417
<3417=3424,3418
<3418=3420,3419
<3420=3421
<3421=3423,3422
<3424=3426,3425
<3426=3427
<3429=3430
<3431=3432
<3433=3434
<3435=3436
<3436=3466,3437
<3437=3464,3462,3438
<3438=3439
<3439=3461,3440
<3440=3452,3441
<3441=3443,3442
<3443=3444
<3444=3446,3445
<3446=3448,3447
<3448=3449
<3449=3451,3450
<3452=3454,3453
<3454=3455
<3455=3457,3456
<3457=3459,3458
<3459=3460
<3462=3463
<3464=3465
<3466=3467
<3468=3469
<3469=3499,3470
<3470=3497,3495,3471
<3471=3472
<3472=3494,3473
<3473=3485,3474
<3474=3476,3475
<3476=3477
<3477=3479,3478
<3479=3481,3480
<3481=3482
<3482=3484,3483
<3485=3487,3486
<3487=3488
<3488=3490,3489
<3490=3492,3491
<3492=3493
<3495=3496
<3497=3498
<3499=3500
<3519=3522,3521,3520
<3522=3579,3566,3547,3543,3530,3523
<3523=3524
<3524=3528,3525
<3525=3526
<3526=3527
<3528=3529
<3530=3531
<3531=3541,3532
<3532=3539,3537,3533
<3533=3534
<3534=3536,3535
<3537=3538
<3539=3540
<3541=3542
<3543=3544
<3544=3546,3545
<3547=3557,3548
<3548=3549
<3549=3553,3550
<3550=3551
<3551=3552
<3553=3554
<3554=3556,3555
<3557=3558
<3558=3560,3559
<3560=3562,3561
<3562=3563
<3563=3565,3564
<3566=3567
<3567=3577,3568
<3568=3575,3573,3569
<3569=3570
<3570=3572,3571
<3573=3574
<3575=3576
<3577=3578
<3579=3580
<3580=3582,3581
