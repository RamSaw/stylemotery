>7	FunctionDef	coordinate_calculation 
>8	ParameterList	const int lat1 , const int lon1 , const int lat2 , const int lon2
>9	Parameter	 
>10	Identifier	lon2
>11	ParameterType	const int
>12	Parameter	 
>13	Identifier	lat2
>14	ParameterType	const int
>15	Parameter	 
>16	Identifier	lon1
>17	ParameterType	const int
>18	Parameter	 
>19	Identifier	lat1
>20	ParameterType	const int
>21	ReturnType	double
>22	CompoundStatement	 
>23	ReturnStatement	 
>24	MultiplicativeExpression	earth_radius * cHarv
>25	Identifier	cHarv
>26	Identifier	earth_radius
>27	IdentifierDeclStatement	 
>28	IdentifierDecl	cHarv = 2. * std 
>29	AssignmentExpr	cHarv = 2. * std 
>30	MultiplicativeExpression	2. * std 
>31	CallExpression	std 
>32	ArgumentList	std 
>33	Argument	std 
>34	CallExpression	std 
>35	ArgumentList	1.0 - aHarv
>36	Argument	1.0 - aHarv
>37	AdditiveExpression	1.0 - aHarv
>38	Identifier	aHarv
>39	PrimaryExpression	1.0
>40	Callee	std 
>41	Identifier	std 
>42	Argument	std 
>43	CallExpression	std 
>44	ArgumentList	aHarv
>45	Argument	aHarv
>46	Identifier	aHarv
>47	Callee	std 
>48	Identifier	std 
>49	Callee	std 
>50	Identifier	std 
>51	PrimaryExpression	2.
>52	Identifier	cHarv
>53	Identifier	cHarv
>54	IdentifierDeclType	const double
>55	IdentifierDeclStatement	 
>56	IdentifierDecl	aHarv = std 
>57	AssignmentExpr	aHarv = std 
>58	AdditiveExpression	std 
>59	MultiplicativeExpression	std 
>60	MultiplicativeExpression	std 
>61	CallExpression	std 
>62	ArgumentList	std 
>63	Argument	2
>64	PrimaryExpression	2
>65	Argument	std 
>66	CallExpression	std 
>67	ArgumentList	dLong / 2.
>68	Argument	dLong / 2.
>69	MultiplicativeExpression	dLong / 2.
>70	PrimaryExpression	2.
>71	Identifier	dLong
>72	Callee	std 
>73	Identifier	std 
>74	Callee	std 
>75	Identifier	std 
>76	CallExpression	std 
>77	ArgumentList	dlat2
>78	Argument	dlat2
>79	Identifier	dlat2
>80	Callee	std 
>81	Identifier	std 
>82	CallExpression	std 
>83	ArgumentList	dlat1
>84	Argument	dlat1
>85	Identifier	dlat1
>86	Callee	std 
>87	Identifier	std 
>88	CallExpression	std 
>89	ArgumentList	std 
>90	Argument	2.0
>91	PrimaryExpression	2.0
>92	Argument	std 
>93	CallExpression	std 
>94	ArgumentList	dLat / 2.0
>95	Argument	dLat / 2.0
>96	MultiplicativeExpression	dLat / 2.0
>97	PrimaryExpression	2.0
>98	Identifier	dLat
>99	Callee	std 
>100	Identifier	std 
>101	Callee	std 
>102	Identifier	std 
>103	Identifier	aHarv
>104	Identifier	aHarv
>105	IdentifierDeclType	const double
>106	IdentifierDeclStatement	 
>107	IdentifierDecl	dLat = dlat1 - dlat2
>108	AssignmentExpr	dLat = dlat1 - dlat2
>109	AdditiveExpression	dlat1 - dlat2
>110	Identifier	dlat2
>111	Identifier	dlat1
>112	Identifier	dLat
>113	Identifier	dLat
>114	IdentifierDeclType	const double
>115	IdentifierDeclStatement	 
>116	IdentifierDecl	dLong = dlong1 - dlong2
>117	AssignmentExpr	dLong = dlong1 - dlong2
>118	AdditiveExpression	dlong1 - dlong2
>119	Identifier	dlong2
>120	Identifier	dlong1
>121	Identifier	dLong
>122	Identifier	dLong
>123	IdentifierDeclType	const double
>124	IdentifierDeclStatement	 
>125	IdentifierDecl	dlong2 = ln2 * ( RAD )
>126	AssignmentExpr	dlong2 = ln2 * ( RAD )
>127	MultiplicativeExpression	ln2 * ( RAD )
>128	Identifier	RAD
>129	Identifier	ln2
>130	Identifier	dlong2
>131	Identifier	dlong2
>132	IdentifierDeclType	const double
>133	IdentifierDeclStatement	 
>134	IdentifierDecl	dlat2 = lt2 * ( RAD )
>135	AssignmentExpr	dlat2 = lt2 * ( RAD )
>136	MultiplicativeExpression	lt2 * ( RAD )
>137	Identifier	RAD
>138	Identifier	lt2
>139	Identifier	dlat2
>140	Identifier	dlat2
>141	IdentifierDeclType	const double
>142	IdentifierDeclStatement	 
>143	IdentifierDecl	dlong1 = ln1 * ( RAD )
>144	AssignmentExpr	dlong1 = ln1 * ( RAD )
>145	MultiplicativeExpression	ln1 * ( RAD )
>146	Identifier	RAD
>147	Identifier	ln1
>148	Identifier	dlong1
>149	Identifier	dlong1
>150	IdentifierDeclType	const double
>151	IdentifierDeclStatement	 
>152	IdentifierDecl	dlat1 = lt1 * ( RAD )
>153	AssignmentExpr	dlat1 = lt1 * ( RAD )
>154	MultiplicativeExpression	lt1 * ( RAD )
>155	Identifier	RAD
>156	Identifier	lt1
>157	Identifier	dlat1
>158	Identifier	dlat1
>159	IdentifierDeclType	const double
>160	IdentifierDeclStatement	 
>161	IdentifierDecl	ln2 = lon2 / COORDINATE_PRECISION
>162	AssignmentExpr	ln2 = lon2 / COORDINATE_PRECISION
>163	MultiplicativeExpression	lon2 / COORDINATE_PRECISION
>164	Identifier	COORDINATE_PRECISION
>165	Identifier	lon2
>166	Identifier	ln2
>167	Identifier	ln2
>168	IdentifierDeclType	const double
>169	IdentifierDeclStatement	 
>170	IdentifierDecl	lt2 = lat2 / COORDINATE_PRECISION
>171	AssignmentExpr	lt2 = lat2 / COORDINATE_PRECISION
>172	MultiplicativeExpression	lat2 / COORDINATE_PRECISION
>173	Identifier	COORDINATE_PRECISION
>174	Identifier	lat2
>175	Identifier	lt2
>176	Identifier	lt2
>177	IdentifierDeclType	const double
>178	IdentifierDeclStatement	 
>179	IdentifierDecl	ln1 = lon1 / COORDINATE_PRECISION
>180	AssignmentExpr	ln1 = lon1 / COORDINATE_PRECISION
>181	MultiplicativeExpression	lon1 / COORDINATE_PRECISION
>182	Identifier	COORDINATE_PRECISION
>183	Identifier	lon1
>184	Identifier	ln1
>185	Identifier	ln1
>186	IdentifierDeclType	const double
>187	IdentifierDeclStatement	 
>188	IdentifierDecl	lt1 = lat1 / COORDINATE_PRECISION
>189	AssignmentExpr	lt1 = lat1 / COORDINATE_PRECISION
>190	MultiplicativeExpression	lat1 / COORDINATE_PRECISION
>191	Identifier	COORDINATE_PRECISION
>192	Identifier	lat1
>193	Identifier	lt1
>194	Identifier	lt1
>195	IdentifierDeclType	const double
>196	ExpressionStatement	 
>197	Statement	 
>198	Statement	 
>199	Statement	 
>200	Statement	 
>201	Statement	 
>202	Statement	 
>203	Statement	 
>204	Statement	 
>205	Statement	 
>206	Statement	 
>207	Statement	 
>208	Statement	 
>209	Statement	 
>210	Statement	 
>211	Statement	 
>212	ExpressionStatement	 
>213	Statement	 
>214	Statement	 
>215	Statement	 
>216	Statement	 
>217	Statement	 
>218	Statement	 
>219	Statement	 
>220	Statement	 
>221	Statement	 
>222	Statement	 
>223	Statement	 
>224	Statement	 
>225	Statement	 
>226	Statement	 
>227	Statement	 
>228	ExpressionStatement	 
>229	Statement	 
>230	Statement	 
>231	Statement	 
>232	Statement	 
>233	Statement	 
>234	Statement	 
>235	Statement	 
>236	Statement	 
>237	Statement	 
>238	Statement	 
>239	Statement	 
>240	Statement	 
>241	Statement	 
>242	Statement	 
>243	Statement	 
>244	ExpressionStatement	 
>245	Statement	 
>246	Statement	 
>247	Statement	 
>248	Statement	 
>249	Statement	 
>250	Statement	 
>251	Statement	 
>252	Statement	 
>253	Statement	 
>254	Statement	 
>255	Statement	 
>256	Statement	 
>257	Statement	 
>258	Statement	 
>259	Statement	 
>287	FunctionDef	coordinate_calculation 
>288	ParameterList	const FixedPointCoordinate & coordinate_1 , const FixedPointCoordinate & coordinate_2
>289	Parameter	 
>290	Identifier	coordinate_2
>291	ParameterType	const FixedPointCoordinate &
>292	Parameter	 
>293	Identifier	coordinate_1
>294	ParameterType	const FixedPointCoordinate &
>295	ReturnType	double
>296	CompoundStatement	 
>297	ReturnStatement	 
>298	CallExpression	great_circle_distance ( coordinate_1 . lat , coordinate_1 . lon , coordinate_2 . lat , coordinate_2 . lon )
>299	ArgumentList	coordinate_1 . lat
>300	Argument	coordinate_2 . lon
>301	MemberAccess	coordinate_2 . lon
>302	Identifier	lon
>303	Identifier	coordinate_2
>304	Argument	coordinate_2 . lat
>305	MemberAccess	coordinate_2 . lat
>306	Identifier	lat
>307	Identifier	coordinate_2
>308	Argument	coordinate_1 . lon
>309	MemberAccess	coordinate_1 . lon
>310	Identifier	lon
>311	Identifier	coordinate_1
>312	Argument	coordinate_1 . lat
>313	MemberAccess	coordinate_1 . lat
>314	Identifier	lat
>315	Identifier	coordinate_1
>316	Callee	great_circle_distance
>317	Identifier	great_circle_distance
>328	FunctionDef	coordinate_calculation 
>329	ParameterList	const FixedPointCoordinate & coordinate_1 , const FixedPointCoordinate & coordinate_2
>330	Parameter	 
>331	Identifier	coordinate_2
>332	ParameterType	const FixedPointCoordinate &
>333	Parameter	 
>334	Identifier	coordinate_1
>335	ParameterType	const FixedPointCoordinate &
>336	ReturnType	float
>337	CompoundStatement	 
>338	ReturnStatement	 
>339	CallExpression	euclidean_distance ( coordinate_1 . lat , coordinate_1 . lon , coordinate_2 . lat , coordinate_2 . lon )
>340	ArgumentList	coordinate_1 . lat
>341	Argument	coordinate_2 . lon
>342	MemberAccess	coordinate_2 . lon
>343	Identifier	lon
>344	Identifier	coordinate_2
>345	Argument	coordinate_2 . lat
>346	MemberAccess	coordinate_2 . lat
>347	Identifier	lat
>348	Identifier	coordinate_2
>349	Argument	coordinate_1 . lon
>350	MemberAccess	coordinate_1 . lon
>351	Identifier	lon
>352	Identifier	coordinate_1
>353	Argument	coordinate_1 . lat
>354	MemberAccess	coordinate_1 . lat
>355	Identifier	lat
>356	Identifier	coordinate_1
>357	Callee	euclidean_distance
>358	Identifier	euclidean_distance
>369	FunctionDef	coordinate_calculation 
>370	ParameterList	const int lat1 , const int lon1 , const int lat2 , const int lon2
>371	Parameter	 
>372	Identifier	lon2
>373	ParameterType	const int
>374	Parameter	 
>375	Identifier	lat2
>376	ParameterType	const int
>377	Parameter	 
>378	Identifier	lon1
>379	ParameterType	const int
>380	Parameter	 
>381	Identifier	lat1
>382	ParameterType	const int
>383	ReturnType	float
>384	CompoundStatement	 
>385	ReturnStatement	 
>386	MultiplicativeExpression	std 
>387	Identifier	earth_radius
>388	CallExpression	std 
>389	ArgumentList	x_value
>390	Argument	y_value
>391	Identifier	y_value
>392	Argument	x_value
>393	Identifier	x_value
>394	Callee	std 
>395	Identifier	std 
>396	IdentifierDeclStatement	 
>397	IdentifierDecl	y_value = float_lat2 - float_lat1
>398	AssignmentExpr	y_value = float_lat2 - float_lat1
>399	AdditiveExpression	float_lat2 - float_lat1
>400	Identifier	float_lat1
>401	Identifier	float_lat2
>402	Identifier	y_value
>403	Identifier	y_value
>404	IdentifierDeclType	const float
>405	IdentifierDeclStatement	 
>406	IdentifierDecl	x_value = ( float_lon2 - float_lon1 ) * std 
>407	AssignmentExpr	x_value = ( float_lon2 - float_lon1 ) * std 
>408	MultiplicativeExpression	( float_lon2 - float_lon1 ) * std 
>409	CallExpression	std 
>410	ArgumentList	( float_lat1 + float_lat2 ) / 2.f
>411	Argument	( float_lat1 + float_lat2 ) / 2.f
>412	MultiplicativeExpression	( float_lat1 + float_lat2 ) / 2.f
>413	PrimaryExpression	2.f
>414	AdditiveExpression	float_lat1 + float_lat2
>415	Identifier	float_lat2
>416	Identifier	float_lat1
>417	Callee	std 
>418	Identifier	std 
>419	AdditiveExpression	float_lon2 - float_lon1
>420	Identifier	float_lon1
>421	Identifier	float_lon2
>422	Identifier	x_value
>423	Identifier	x_value
>424	IdentifierDeclType	const float
>425	IdentifierDeclStatement	 
>426	IdentifierDecl	float_lon2 = ( lon2 / COORDINATE_PRECISION ) * RAD
>427	AssignmentExpr	float_lon2 = ( lon2 / COORDINATE_PRECISION ) * RAD
>428	MultiplicativeExpression	( lon2 / COORDINATE_PRECISION ) * RAD
>429	Identifier	RAD
>430	MultiplicativeExpression	lon2 / COORDINATE_PRECISION
>431	Identifier	COORDINATE_PRECISION
>432	Identifier	lon2
>433	Identifier	float_lon2
>434	Identifier	float_lon2
>435	IdentifierDeclType	const float
>436	IdentifierDeclStatement	 
>437	IdentifierDecl	float_lat2 = ( lat2 / COORDINATE_PRECISION ) * RAD
>438	AssignmentExpr	float_lat2 = ( lat2 / COORDINATE_PRECISION ) * RAD
>439	MultiplicativeExpression	( lat2 / COORDINATE_PRECISION ) * RAD
>440	Identifier	RAD
>441	MultiplicativeExpression	lat2 / COORDINATE_PRECISION
>442	Identifier	COORDINATE_PRECISION
>443	Identifier	lat2
>444	Identifier	float_lat2
>445	Identifier	float_lat2
>446	IdentifierDeclType	const float
>447	IdentifierDeclStatement	 
>448	IdentifierDecl	float_lon1 = ( lon1 / COORDINATE_PRECISION ) * RAD
>449	AssignmentExpr	float_lon1 = ( lon1 / COORDINATE_PRECISION ) * RAD
>450	MultiplicativeExpression	( lon1 / COORDINATE_PRECISION ) * RAD
>451	Identifier	RAD
>452	MultiplicativeExpression	lon1 / COORDINATE_PRECISION
>453	Identifier	COORDINATE_PRECISION
>454	Identifier	lon1
>455	Identifier	float_lon1
>456	Identifier	float_lon1
>457	IdentifierDeclType	const float
>458	IdentifierDeclStatement	 
>459	IdentifierDecl	float_lat1 = ( lat1 / COORDINATE_PRECISION ) * RAD
>460	AssignmentExpr	float_lat1 = ( lat1 / COORDINATE_PRECISION ) * RAD
>461	MultiplicativeExpression	( lat1 / COORDINATE_PRECISION ) * RAD
>462	Identifier	RAD
>463	MultiplicativeExpression	lat1 / COORDINATE_PRECISION
>464	Identifier	COORDINATE_PRECISION
>465	Identifier	lat1
>466	Identifier	float_lat1
>467	Identifier	float_lat1
>468	IdentifierDeclType	const float
>469	ExpressionStatement	 
>470	Statement	 
>471	Statement	 
>472	Statement	 
>473	Statement	 
>474	Statement	 
>475	Statement	 
>476	Statement	 
>477	Statement	 
>478	Statement	 
>479	Statement	 
>480	Statement	 
>481	Statement	 
>482	Statement	 
>483	Statement	 
>484	Statement	 
>485	ExpressionStatement	 
>486	Statement	 
>487	Statement	 
>488	Statement	 
>489	Statement	 
>490	Statement	 
>491	Statement	 
>492	Statement	 
>493	Statement	 
>494	Statement	 
>495	Statement	 
>496	Statement	 
>497	Statement	 
>498	Statement	 
>499	Statement	 
>500	Statement	 
>501	ExpressionStatement	 
>502	Statement	 
>503	Statement	 
>504	Statement	 
>505	Statement	 
>506	Statement	 
>507	Statement	 
>508	Statement	 
>509	Statement	 
>510	Statement	 
>511	Statement	 
>512	Statement	 
>513	Statement	 
>514	Statement	 
>515	Statement	 
>516	Statement	 
>517	ExpressionStatement	 
>518	Statement	 
>519	Statement	 
>520	Statement	 
>521	Statement	 
>522	Statement	 
>523	Statement	 
>524	Statement	 
>525	Statement	 
>526	Statement	 
>527	Statement	 
>528	Statement	 
>529	Statement	 
>530	Statement	 
>531	Statement	 
>532	Statement	 
>551	FunctionDef	coordinate_calculation 
>552	ParameterList	const FixedPointCoordinate & source_coordinate , const FixedPointCoordinate & target_coordinate , const FixedPointCoordinate & \
>553	Parameter	 
>554	Identifier	query_location
>555	ParameterType	const FixedPointCoordinate &
>556	Parameter	 
>557	Identifier	target_coordinate
>558	ParameterType	const FixedPointCoordinate &
>559	Parameter	 
>560	Identifier	source_coordinate
>561	ParameterType	const FixedPointCoordinate &
>562	ReturnType	float
>563	CompoundStatement	 
>564	ReturnStatement	 
>565	CallExpression	perpendicular_distance ( source_coordinate , target_coordinate , query_location , nearest_location , ratio )
>566	ArgumentList	source_coordinate
>567	Argument	ratio
>568	Identifier	ratio
>569	Argument	nearest_location
>570	Identifier	nearest_location
>571	Argument	query_location
>572	Identifier	query_location
>573	Argument	target_coordinate
>574	Identifier	target_coordinate
>575	Argument	source_coordinate
>576	Identifier	source_coordinate
>577	Callee	perpendicular_distance
>578	Identifier	perpendicular_distance
>579	IdentifierDeclStatement	 
>580	IdentifierDecl	nearest_location
>581	Identifier	nearest_location
>582	IdentifierDeclType	FixedPointCoordinate
>583	IdentifierDeclStatement	 
>584	IdentifierDecl	ratio
>585	Identifier	ratio
>586	IdentifierDeclType	float
>596	FunctionDef	coordinate_calculation 
>597	ParameterList	const FixedPointCoordinate & segment_source , const FixedPointCoordinate & segment_target , const FixedPointCoordinate & \
>598	Parameter	 
>599	Identifier	ratio
>600	ParameterType	float &
>601	Parameter	 
>602	Identifier	nearest_location
>603	ParameterType	FixedPointCoordinate &
>604	Parameter	 
>605	Identifier	query_location
>606	ParameterType	const FixedPointCoordinate &
>607	Parameter	 
>608	Identifier	segment_target
>609	ParameterType	const FixedPointCoordinate &
>610	Parameter	 
>611	Identifier	segment_source
>612	ParameterType	const FixedPointCoordinate &
>613	ReturnType	float
>614	CompoundStatement	 
>615	ExpressionStatement	 
>616	Statement	 
>617	Statement	 
>618	Statement	 
>619	Statement	 
>620	Statement	 
>621	CompoundStatement	 
>622	Statement	 
>623	Statement	 
>624	Statement	 
>625	Statement	 
>626	Statement	 
>627	Statement	 
>628	Statement	 
>629	Statement	 
>630	Statement	 
>631	Statement	 
>632	Statement	 
>633	Statement	 
>634	Statement	 
>635	Statement	 
>636	Statement	 
>637	Statement	 
>638	Statement	 
>639	Statement	 
>640	Statement	 
>641	Statement	 
>642	Statement	 
>643	Statement	 
>644	Statement	 
>645	Statement	 
>646	Statement	 
>655	FunctionDef	coordinate_calculation 
>656	ParameterList	const FixedPointCoordinate & source_coordinate , const FixedPointCoordinate & target_coordinate , const FixedPointCoordinate & \
>657	Parameter	 
>658	Identifier	projected_coordinate
>659	ParameterType	const std 
>660	Parameter	 
>661	Identifier	query_location
>662	ParameterType	const FixedPointCoordinate &
>663	Parameter	 
>664	Identifier	target_coordinate
>665	ParameterType	const FixedPointCoordinate &
>666	Parameter	 
>667	Identifier	source_coordinate
>668	ParameterType	const FixedPointCoordinate &
>669	ReturnType	float
>670	CompoundStatement	 
>671	ReturnStatement	 
>672	CallExpression	perpendicular_distance_from_projected_coordinate ( source_coordinate , target_coordinate , query_location , projected_\
>673	ArgumentList	source_coordinate
>674	Argument	ratio
>675	Identifier	ratio
>676	Argument	nearest_location
>677	Identifier	nearest_location
>678	Argument	projected_coordinate
>679	Identifier	projected_coordinate
>680	Argument	query_location
>681	Identifier	query_location
>682	Argument	target_coordinate
>683	Identifier	target_coordinate
>684	Argument	source_coordinate
>685	Identifier	source_coordinate
>686	Callee	perpendicular_distance_from_projected_coordinate
>687	Identifier	perpendicular_distance_from_projected_coordinate
>688	IdentifierDeclStatement	 
>689	IdentifierDecl	nearest_location
>690	Identifier	nearest_location
>691	IdentifierDeclType	FixedPointCoordinate
>692	IdentifierDeclStatement	 
>693	IdentifierDecl	ratio
>694	Identifier	ratio
>695	IdentifierDeclType	float
>706	FunctionDef	coordinate_calculation 
>707	ParameterList	const FixedPointCoordinate & segment_source , const FixedPointCoordinate & segment_target , const FixedPointCoordinate & \
>708	Parameter	 
>709	Identifier	ratio
>710	ParameterType	float &
>711	Parameter	 
>712	Identifier	nearest_location
>713	ParameterType	FixedPointCoordinate &
>714	Parameter	 
>715	Identifier	projected_coordinate
>716	ParameterType	const std 
>717	Parameter	 
>718	Identifier	query_location
>719	ParameterType	const FixedPointCoordinate &
>720	Parameter	 
>721	Identifier	segment_target
>722	ParameterType	const FixedPointCoordinate &
>723	Parameter	 
>724	Identifier	segment_source
>725	ParameterType	const FixedPointCoordinate &
>726	ReturnType	float
>727	CompoundStatement	 
>728	CompoundStatement	 
>729	ExpressionStatement	 
>730	AssignmentExpr	q = b + m * ( p - a )
>731	AdditiveExpression	b + m * ( p - a )
>732	MultiplicativeExpression	m * ( p - a )
>733	AdditiveExpression	p - a
>734	Identifier	a
>735	Identifier	p
>736	Identifier	m
>737	Identifier	b
>738	Identifier	q
>739	ExpressionStatement	 
>740	AssignmentExpr	p = ( ( x + ( m * y ) ) + ( m * m * a - m * b ) ) / ( 1.f + m * m )
>741	MultiplicativeExpression	( ( x + ( m * y ) ) + ( m * m * a - m * b ) ) / ( 1.f + m * m )
>742	AdditiveExpression	1.f + m * m
>743	MultiplicativeExpression	m * m
>744	Identifier	m
>745	Identifier	m
>746	PrimaryExpression	1.f
>747	AdditiveExpression	( x + ( m * y ) ) + ( m * m * a - m * b )
>748	AdditiveExpression	m * m * a - m * b
>749	MultiplicativeExpression	m * b
>750	Identifier	b
>751	Identifier	m
>752	MultiplicativeExpression	m * m * a
>753	MultiplicativeExpression	m * a
>754	Identifier	a
>755	Identifier	m
>756	Identifier	m
>757	AdditiveExpression	x + ( m * y )
>758	MultiplicativeExpression	m * y
>759	Identifier	y
>760	Identifier	m
>761	Identifier	x
>762	Identifier	p
>763	IdentifierDeclStatement	 
>764	IdentifierDecl	m = ( d - b ) / ( c - a )
>765	AssignmentExpr	m = ( d - b ) / ( c - a )
>766	MultiplicativeExpression	( d - b ) / ( c - a )
>767	AdditiveExpression	c - a
>768	Identifier	a
>769	Identifier	c
>770	AdditiveExpression	d - b
>771	Identifier	b
>772	Identifier	d
>773	Identifier	m
>774	Identifier	m
>775	IdentifierDeclType	const double
>776	Statement	 
>777	Statement	 
>778	Statement	 
>779	Statement	 
>780	Statement	 
>781	Statement	 
>782	Statement	 
>783	Statement	 
>784	Statement	 
>785	Statement	 
>786	Statement	 
>787	Statement	 
>788	Statement	 
>789	Statement	 
>790	Statement	 
>791	Statement	 
>792	Statement	 
>793	Statement	 
>794	Statement	 
>795	Statement	 
>796	Statement	 
>797	Statement	 
>798	IdentifierDeclStatement	 
>799	IdentifierDecl	nY
>800	Identifier	nY
>801	IdentifierDeclType	double
>802	IdentifierDecl	q
>803	Identifier	q
>804	IdentifierDeclType	double
>805	IdentifierDecl	p
>806	Identifier	p
>807	IdentifierDeclType	double
>808	IdentifierDeclStatement	 
>809	IdentifierDecl	d = segment_target . lon / COORDINATE_PRECISION
>810	AssignmentExpr	d = segment_target . lon / COORDINATE_PRECISION
>811	MultiplicativeExpression	segment_target . lon / COORDINATE_PRECISION
>812	Identifier	COORDINATE_PRECISION
>813	MemberAccess	segment_target . lon
>814	Identifier	lon
>815	Identifier	segment_target
>816	Identifier	d
>817	Identifier	d
>818	IdentifierDeclType	const double
>819	IdentifierDeclStatement	 
>820	IdentifierDecl	c = mercator 
>821	AssignmentExpr	c = mercator 
>822	CallExpression	mercator 
>823	ArgumentList	segment_target . lat / COORDINATE_PRECISION
>824	Argument	segment_target . lat / COORDINATE_PRECISION
>825	MultiplicativeExpression	segment_target . lat / COORDINATE_PRECISION
>826	Identifier	COORDINATE_PRECISION
>827	MemberAccess	segment_target . lat
>828	Identifier	lat
>829	Identifier	segment_target
>830	Callee	mercator 
>831	Identifier	mercator 
>832	Identifier	c
>833	Identifier	c
>834	IdentifierDeclType	const double
>835	IdentifierDeclStatement	 
>836	IdentifierDecl	b = segment_source . lon / COORDINATE_PRECISION
>837	AssignmentExpr	b = segment_source . lon / COORDINATE_PRECISION
>838	MultiplicativeExpression	segment_source . lon / COORDINATE_PRECISION
>839	Identifier	COORDINATE_PRECISION
>840	MemberAccess	segment_source . lon
>841	Identifier	lon
>842	Identifier	segment_source
>843	Identifier	b
>844	Identifier	b
>845	IdentifierDeclType	const double
>846	IdentifierDeclStatement	 
>847	IdentifierDecl	a = mercator 
>848	AssignmentExpr	a = mercator 
>849	CallExpression	mercator 
>850	ArgumentList	segment_source . lat / COORDINATE_PRECISION
>851	Argument	segment_source . lat / COORDINATE_PRECISION
>852	MultiplicativeExpression	segment_source . lat / COORDINATE_PRECISION
>853	Identifier	COORDINATE_PRECISION
>854	MemberAccess	segment_source . lat
>855	Identifier	lat
>856	Identifier	segment_source
>857	Callee	mercator 
>858	Identifier	mercator 
>859	Identifier	a
>860	Identifier	a
>861	IdentifierDeclType	const double
>862	IdentifierDeclStatement	 
>863	IdentifierDecl	y = projected_coordinate . second
>864	AssignmentExpr	y = projected_coordinate . second
>865	MemberAccess	projected_coordinate . second
>866	Identifier	second
>867	Identifier	projected_coordinate
>868	Identifier	y
>869	Identifier	y
>870	IdentifierDeclType	const double
>871	IdentifierDeclStatement	 
>872	IdentifierDecl	x = projected_coordinate . first
>873	AssignmentExpr	x = projected_coordinate . first
>874	MemberAccess	projected_coordinate . first
>875	Identifier	first
>876	Identifier	projected_coordinate
>877	Identifier	x
>878	Identifier	x
>879	IdentifierDeclType	const double
>880	ExpressionStatement	 
>881	CallExpression	BOOST_ASSERT ( query_location . is_valid ( ) )
>882	ArgumentList	query_location . is_valid ( )
>883	Argument	query_location . is_valid ( )
>884	CallExpression	query_location . is_valid ( )
>885	ArgumentList	 
>886	Callee	query_location . is_valid
>887	MemberAccess	query_location . is_valid
>888	Identifier	is_valid
>889	Identifier	query_location
>890	Callee	BOOST_ASSERT
>891	Identifier	BOOST_ASSERT
>920	FunctionDef	coordinate_calculation 
>921	ParameterList	const int value , std 
>922	Parameter	 
>923	Identifier	output
>924	ParameterType	std 
>925	Parameter	 
>926	Identifier	value
>927	ParameterType	const int
>928	ReturnType	void
>929	CompoundStatement	 
>930	ExpressionStatement	 
>931	Expression	output = printInt < 11 , 6 > ( buffer , value )
>932	RelationalExpression	6 > ( buffer , value )
>933	Expression	buffer , value
>934	Identifier	value
>935	Identifier	buffer
>936	PrimaryExpression	6
>937	AssignmentExpr	output = printInt < 11
>938	RelationalExpression	printInt < 11
>939	PrimaryExpression	11
>940	Identifier	printInt
>941	Identifier	output
>942	ExpressionStatement	 
>943	AssignmentExpr	buffer [ 11 ] = 0
>944	PrimaryExpression	0
>945	ArrayIndexing	buffer [ 11 ]
>946	PrimaryExpression	11
>947	Identifier	buffer
>948	IdentifierDeclStatement	 
>949	IdentifierDecl	buffer [ 12 ]
>950	PrimaryExpression	12
>951	Identifier	buffer
>952	IdentifierDeclType	char [ 12 ]
>961	FunctionDef	coordinate_calculation 
>962	ParameterList	const float degree
>963	Parameter	 
>964	Identifier	degree
>965	ParameterType	const float
>966	ReturnType	float
>967	CompoundStatement	 
>968	ReturnStatement	 
>969	MultiplicativeExpression	degree * ( static_cast < float > ( M_PI ) / 180.f )
>970	RelationalExpression	static_cast < float > ( M_PI ) / 180.f
>971	RelationalExpression	float > ( M_PI ) / 180.f
>972	MultiplicativeExpression	( M_PI ) / 180.f
>973	PrimaryExpression	180.f
>974	Identifier	M_PI
>975	Identifier	float
>976	Identifier	static_cast
>977	Identifier	degree
>985	FunctionDef	coordinate_calculation 
>986	ParameterList	const float radian
>987	Parameter	 
>988	Identifier	radian
>989	ParameterType	const float
>990	ReturnType	float
>991	CompoundStatement	 
>992	ReturnStatement	 
>993	MultiplicativeExpression	radian * ( 180.f * static_cast < float > ( M_1_PI ) )
>994	RelationalExpression	180.f * static_cast < float > ( M_1_PI )
>995	RelationalExpression	float > ( M_1_PI )
>996	Identifier	M_1_PI
>997	Identifier	float
>998	MultiplicativeExpression	180.f * static_cast
>999	Identifier	static_cast
>1000	PrimaryExpression	180.f
>1001	Identifier	radian
>1009	FunctionDef	coordinate_calculation 
>1010	ParameterList	const FixedPointCoordinate & first_coordinate , const FixedPointCoordinate & second_coordinate
>1011	Parameter	 
>1012	Identifier	second_coordinate
>1013	ParameterType	const FixedPointCoordinate &
>1014	Parameter	 
>1015	Identifier	first_coordinate
>1016	ParameterType	const FixedPointCoordinate &
>1017	ReturnType	float
>1018	CompoundStatement	 
>1019	ReturnStatement	 
>1020	Identifier	result
>1021	WhileStatement	while ( result >= 360.f )
>1022	CompoundStatement	 
>1023	ExpressionStatement	 
>1024	AssignmentExpr	result -= 360.f
>1025	PrimaryExpression	360.f
>1026	Identifier	result
>1027	Condition	 
>1028	RelationalExpression	result >= 360.f
>1029	PrimaryExpression	360.f
>1030	Identifier	result
>1031	WhileStatement	while ( result < 0.f )
>1032	CompoundStatement	 
>1033	ExpressionStatement	 
>1034	AssignmentExpr	result += 360.f
>1035	PrimaryExpression	360.f
>1036	Identifier	result
>1037	Condition	 
>1038	RelationalExpression	result < 0.f
>1039	PrimaryExpression	0.f
>1040	Identifier	result
>1041	IdentifierDeclStatement	 
>1042	IdentifierDecl	result = rad_to_deg ( std 
>1043	AssignmentExpr	result = rad_to_deg ( std 
>1044	CallExpression	rad_to_deg ( std 
>1045	ArgumentList	std 
>1046	Argument	std 
>1047	CallExpression	std 
>1048	ArgumentList	y
>1049	Argument	x
>1050	Identifier	x
>1051	Argument	y
>1052	Identifier	y
>1053	Callee	std 
>1054	Identifier	std 
>1055	Callee	rad_to_deg
>1056	Identifier	rad_to_deg
>1057	Identifier	result
>1058	Identifier	result
>1059	IdentifierDeclType	float
>1060	IdentifierDeclStatement	 
>1061	IdentifierDecl	x = std 
>1062	AssignmentExpr	x = std 
>1063	AdditiveExpression	std 
>1064	MultiplicativeExpression	std 
>1065	MultiplicativeExpression	std 
>1066	CallExpression	std 
>1067	ArgumentList	lon_delta
>1068	Argument	lon_delta
>1069	Identifier	lon_delta
>1070	Callee	std 
>1071	Identifier	std 
>1072	CallExpression	std 
>1073	ArgumentList	lat2
>1074	Argument	lat2
>1075	Identifier	lat2
>1076	Callee	std 
>1077	Identifier	std 
>1078	CallExpression	std 
>1079	ArgumentList	lat1
>1080	Argument	lat1
>1081	Identifier	lat1
>1082	Callee	std 
>1083	Identifier	std 
>1084	MultiplicativeExpression	std 
>1085	CallExpression	std 
>1086	ArgumentList	lat2
>1087	Argument	lat2
>1088	Identifier	lat2
>1089	Callee	std 
>1090	Identifier	std 
>1091	CallExpression	std 
>1092	ArgumentList	lat1
>1093	Argument	lat1
>1094	Identifier	lat1
>1095	Callee	std 
>1096	Identifier	std 
>1097	Identifier	x
>1098	Identifier	x
>1099	IdentifierDeclType	const float
>1100	IdentifierDeclStatement	 
>1101	IdentifierDecl	y = std 
>1102	AssignmentExpr	y = std 
>1103	MultiplicativeExpression	std 
>1104	CallExpression	std 
>1105	ArgumentList	lat2
>1106	Argument	lat2
>1107	Identifier	lat2
>1108	Callee	std 
>1109	Identifier	std 
>1110	CallExpression	std 
>1111	ArgumentList	lon_delta
>1112	Argument	lon_delta
>1113	Identifier	lon_delta
>1114	Callee	std 
>1115	Identifier	std 
>1116	Identifier	y
>1117	Identifier	y
>1118	IdentifierDeclType	const float
>1119	IdentifierDeclStatement	 
>1120	IdentifierDecl	lat2 = deg_to_rad ( second_coordinate . lat / COORDINATE_PRECISION )
>1121	AssignmentExpr	lat2 = deg_to_rad ( second_coordinate . lat / COORDINATE_PRECISION )
>1122	CallExpression	deg_to_rad ( second_coordinate . lat / COORDINATE_PRECISION )
>1123	ArgumentList	second_coordinate . lat / COORDINATE_PRECISION
>1124	Argument	second_coordinate . lat / COORDINATE_PRECISION
>1125	MultiplicativeExpression	second_coordinate . lat / COORDINATE_PRECISION
>1126	Identifier	COORDINATE_PRECISION
>1127	MemberAccess	second_coordinate . lat
>1128	Identifier	lat
>1129	Identifier	second_coordinate
>1130	Callee	deg_to_rad
>1131	Identifier	deg_to_rad
>1132	Identifier	lat2
>1133	Identifier	lat2
>1134	IdentifierDeclType	const float
>1135	IdentifierDeclStatement	 
>1136	IdentifierDecl	lat1 = deg_to_rad ( first_coordinate . lat / COORDINATE_PRECISION )
>1137	AssignmentExpr	lat1 = deg_to_rad ( first_coordinate . lat / COORDINATE_PRECISION )
>1138	CallExpression	deg_to_rad ( first_coordinate . lat / COORDINATE_PRECISION )
>1139	ArgumentList	first_coordinate . lat / COORDINATE_PRECISION
>1140	Argument	first_coordinate . lat / COORDINATE_PRECISION
>1141	MultiplicativeExpression	first_coordinate . lat / COORDINATE_PRECISION
>1142	Identifier	COORDINATE_PRECISION
>1143	MemberAccess	first_coordinate . lat
>1144	Identifier	lat
>1145	Identifier	first_coordinate
>1146	Callee	deg_to_rad
>1147	Identifier	deg_to_rad
>1148	Identifier	lat1
>1149	Identifier	lat1
>1150	IdentifierDeclType	const float
>1151	IdentifierDeclStatement	 
>1152	IdentifierDecl	lon_delta = deg_to_rad ( lon_diff )
>1153	AssignmentExpr	lon_delta = deg_to_rad ( lon_diff )
>1154	CallExpression	deg_to_rad ( lon_diff )
>1155	ArgumentList	lon_diff
>1156	Argument	lon_diff
>1157	Identifier	lon_diff
>1158	Callee	deg_to_rad
>1159	Identifier	deg_to_rad
>1160	Identifier	lon_delta
>1161	Identifier	lon_delta
>1162	IdentifierDeclType	const float
>1163	IdentifierDeclStatement	 
>1164	IdentifierDecl	lon_diff = second_coordinate . lon / COORDINATE_PRECISION - first_coordinate . lon / COORDINATE_PRECISION
>1165	AssignmentExpr	lon_diff = second_coordinate . lon / COORDINATE_PRECISION - first_coordinate . lon / COORDINATE_PRECISION
>1166	AdditiveExpression	second_coordinate . lon / COORDINATE_PRECISION - first_coordinate . lon / COORDINATE_PRECISION
>1167	MultiplicativeExpression	first_coordinate . lon / COORDINATE_PRECISION
>1168	Identifier	COORDINATE_PRECISION
>1169	MemberAccess	first_coordinate . lon
>1170	Identifier	lon
>1171	Identifier	first_coordinate
>1172	MultiplicativeExpression	second_coordinate . lon / COORDINATE_PRECISION
>1173	Identifier	COORDINATE_PRECISION
>1174	MemberAccess	second_coordinate . lon
>1175	Identifier	lon
>1176	Identifier	second_coordinate
>1177	Identifier	lon_diff
>1178	Identifier	lon_diff
>1179	IdentifierDeclType	const float
<7=22,21,8
<8=18,15,12,9
<9=11,10
<12=14,13
<15=17,16
<18=20,19
<22=259,258,257,256,255,254,253,252,251,250,249,248,247,246,245,244,243,242,241,240,239,238,237,236,235,234,233,23,27,55,106,115,124,133,142,151,160,169,178,187,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232
<23=24
<24=26,25
<27=28
<28=54,53,29
<29=52,30
<30=51,31
<31=49,32
<32=42,33
<33=34
<34=40,35
<35=36
<36=37
<37=39,38
<40=41
<42=43
<43=47,44
<44=45
<45=46
<47=48
<49=50
<55=56
<56=105,104,57
<57=103,58
<58=88,59
<59=82,60
<60=76,61
<61=74,62
<62=65,63
<63=64
<65=66
<66=72,67
<67=68
<68=69
<69=71,70
<72=73
<74=75
<76=80,77
<77=78
<78=79
<80=81
<82=86,83
<83=84
<84=85
<86=87
<88=101,89
<89=92,90
<90=91
<92=93
<93=99,94
<94=95
<95=96
<96=98,97
<99=100
<101=102
<106=107
<107=114,113,108
<108=112,109
<109=111,110
<115=116
<116=123,122,117
<117=121,118
<118=120,119
<124=125
<125=132,131,126
<126=130,127
<127=129,128
<133=134
<134=141,140,135
<135=139,136
<136=138,137
<142=143
<143=150,149,144
<144=148,145
<145=147,146
<151=152
<152=159,158,153
<153=157,154
<154=156,155
<160=161
<161=168,167,162
<162=166,163
<163=165,164
<169=170
<170=177,176,171
<171=175,172
<172=174,173
<178=179
<179=186,185,180
<180=184,181
<181=183,182
<187=188
<188=195,194,189
<189=193,190
<190=192,191
<287=296,295,288
<288=292,289
<289=291,290
<292=294,293
<296=297
<297=298
<298=316,299
<299=312,308,304,300
<300=301
<301=303,302
<304=305
<305=307,306
<308=309
<309=311,310
<312=313
<313=315,314
<316=317
<328=337,336,329
<329=333,330
<330=332,331
<333=335,334
<337=338
<338=339
<339=357,340
<340=353,349,345,341
<341=342
<342=344,343
<345=346
<346=348,347
<349=350
<350=352,351
<353=354
<354=356,355
<357=358
<369=384,383,370
<370=380,377,374,371
<371=373,372
<374=376,375
<377=379,378
<380=382,381
<384=532,531,530,529,528,527,526,525,524,523,522,521,520,519,518,517,516,515,514,513,512,385,396,405,425,436,447,458,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511
<385=386
<386=388,387
<388=394,389
<389=392,390
<390=391
<392=393
<394=395
<396=397
<397=404,403,398
<398=402,399
<399=401,400
<405=406
<406=424,423,407
<407=422,408
<408=419,409
<409=417,410
<410=411
<411=412
<412=414,413
<414=416,415
<417=418
<419=421,420
<425=426
<426=435,434,427
<427=433,428
<428=430,429
<430=432,431
<436=437
<437=446,445,438
<438=444,439
<439=441,440
<441=443,442
<447=448
<448=457,456,449
<449=455,450
<450=452,451
<452=454,453
<458=459
<459=468,467,460
<460=466,461
<461=463,462
<463=465,464
<551=563,562,552
<552=559,556,553
<553=555,554
<556=558,557
<559=561,560
<563=583,579,564
<564=565
<565=577,566
<566=575,573,571,569,567
<567=568
<569=570
<571=572
<573=574
<575=576
<577=578
<579=580
<580=582,581
<583=584
<584=586,585
<596=614,613,597
<597=610,607,604,601,598
<598=600,599
<601=603,602
<604=606,605
<607=609,608
<610=612,611
<614=646,645,644,643,642,641,640,639,638,621,620,619,618,617,616,615
<621=637,636,635,634,633,632,631,630,629,628,627,626,625,624,623,622
<655=670,669,656
<656=666,663,660,657
<657=659,658
<660=662,661
<663=665,664
<666=668,667
<670=692,688,671
<671=672
<672=686,673
<673=684,682,680,678,676,674
<674=675
<676=677
<678=679
<680=681
<682=683
<684=685
<686=687
<688=689
<689=691,690
<692=693
<693=695,694
<706=727,726,707
<707=723,720,717,714,711,708
<708=710,709
<711=713,712
<714=716,715
<717=719,718
<720=722,721
<723=725,724
<727=880,871,862,846,835,819,808,798,797,796,795,794,793,792,791,790,789,788,787,786,785,784,783,782,781,780,779,778,777,776,728
<728=763,739,729
<729=730
<730=738,731
<731=737,732
<732=736,733
<733=735,734
<739=740
<740=762,741
<741=747,742
<742=746,743
<743=745,744
<747=757,748
<748=752,749
<749=751,750
<752=756,753
<753=755,754
<757=761,758
<758=760,759
<763=764
<764=775,774,765
<765=773,766
<766=770,767
<767=769,768
<770=772,771
<798=805,802,799
<799=801,800
<802=804,803
<805=807,806
<808=809
<809=818,817,810
<810=816,811
<811=813,812
<813=815,814
<819=820
<820=834,833,821
<821=832,822
<822=830,823
<823=824
<824=825
<825=827,826
<827=829,828
<830=831
<835=836
<836=845,844,837
<837=843,838
<838=840,839
<840=842,841
<846=847
<847=861,860,848
<848=859,849
<849=857,850
<850=851
<851=852
<852=854,853
<854=856,855
<857=858
<862=863
<863=870,869,864
<864=868,865
<865=867,866
<871=872
<872=879,878,873
<873=877,874
<874=876,875
<880=881
<881=890,882
<882=883
<883=884
<884=886,885
<886=887
<887=889,888
<890=891
<920=929,928,921
<921=925,922
<922=924,923
<925=927,926
<929=948,942,930
<930=931
<931=937,932
<932=936,933
<933=935,934
<937=941,938
<938=940,939
<942=943
<943=945,944
<945=947,946
<948=949
<949=952,951,950
<961=967,966,962
<962=963
<963=965,964
<967=968
<968=969
<969=977,970
<970=976,971
<971=975,972
<972=974,973
<985=991,990,986
<986=987
<987=989,988
<991=992
<992=993
<993=1001,994
<994=998,995
<995=997,996
<998=1000,999
<1009=1018,1017,1010
<1010=1014,1011
<1011=1013,1012
<1014=1016,1015
<1018=1163,1151,1135,1119,1100,1060,1041,1031,1021,1019
<1019=1020
<1021=1027,1022
<1022=1023
<1023=1024
<1024=1026,1025
<1027=1028
<1028=1030,1029
<1031=1037,1032
<1032=1033
<1033=1034
<1034=1036,1035
<1037=1038
<1038=1040,1039
<1041=1042
<1042=1059,1058,1043
<1043=1057,1044
<1044=1055,1045
<1045=1046
<1046=1047
<1047=1053,1048
<1048=1051,1049
<1049=1050
<1051=1052
<1053=1054
<1055=1056
<1060=1061
<1061=1099,1098,1062
<1062=1097,1063
<1063=1084,1064
<1064=1078,1065
<1065=1072,1066
<1066=1070,1067
<1067=1068
<1068=1069
<1070=1071
<1072=1076,1073
<1073=1074
<1074=1075
<1076=1077
<1078=1082,1079
<1079=1080
<1080=1081
<1082=1083
<1084=1091,1085
<1085=1089,1086
<1086=1087
<1087=1088
<1089=1090
<1091=1095,1092
<1092=1093
<1093=1094
<1095=1096
<1100=1101
<1101=1118,1117,1102
<1102=1116,1103
<1103=1110,1104
<1104=1108,1105
<1105=1106
<1106=1107
<1108=1109
<1110=1114,1111
<1111=1112
<1112=1113
<1114=1115
<1119=1120
<1120=1134,1133,1121
<1121=1132,1122
<1122=1130,1123
<1123=1124
<1124=1125
<1125=1127,1126
<1127=1129,1128
<1130=1131
<1135=1136
<1136=1150,1149,1137
<1137=1148,1138
<1138=1146,1139
<1139=1140
<1140=1141
<1141=1143,1142
<1143=1145,1144
<1146=1147
<1151=1152
<1152=1162,1161,1153
<1153=1160,1154
<1154=1158,1155
<1155=1156
<1156=1157
<1158=1159
<1163=1164
<1164=1179,1178,1165
<1165=1177,1166
<1166=1172,1167
<1167=1169,1168
<1169=1171,1170
<1172=1174,1173
<1174=1176,1175
