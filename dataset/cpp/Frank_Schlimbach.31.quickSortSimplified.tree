>3	FunctionDef	swap (int * a , int * b)
>4	ParameterList	int * a , int * b
>5	Parameter	 
>6	Identifier	b
>7	ParameterType	int *
>8	Parameter	 
>9	Identifier	a
>10	ParameterType	int *
>11	ReturnType	static void
>12	CompoundStatement	 
>13	ExpressionStatement	 
>14	AssignmentExpr	* b = t
>15	Identifier	t
>16	UnaryOp	* b
>17	Identifier	b
>18	UnaryOperator	*
>19	ExpressionStatement	 
>20	AssignmentExpr	* a = * b
>21	UnaryOp	* b
>22	Identifier	b
>23	UnaryOperator	*
>24	UnaryOp	* a
>25	Identifier	a
>26	UnaryOperator	*
>27	IdentifierDeclStatement	 
>28	IdentifierDecl	t = * a
>29	AssignmentExpr	t = * a
>30	UnaryOp	* a
>31	Identifier	a
>32	UnaryOperator	*
>33	Identifier	t
>34	Identifier	t
>35	IdentifierDeclType	int
>44	FunctionDef	vector_dump (const int * array , const size_t size)
>45	ParameterList	const int * array , const size_t size
>46	Parameter	 
>47	Identifier	size
>48	ParameterType	const size_t
>49	Parameter	 
>50	Identifier	array
>51	ParameterType	const int *
>52	ReturnType	static void
>53	CompoundStatement	 
>54	ExpressionStatement	 
>55	ShiftExpression	std 
>56	Identifier	std 
>57	Identifier	std 
>58	ForStatement	for ( size_t i = 1 ; i < size ; ++ i )
>59	CompoundStatement	 
>60	ExpressionStatement	 
>61	ShiftExpression	std 
>62	ShiftExpression	\", \" << array [ i ]
>63	ArrayIndexing	array [ i ]
>64	Identifier	i
>65	Identifier	array
>66	PrimaryExpression	\", \"
>67	Identifier	std 
>68	UnaryExpression	 
>69	Identifier	i
>70	IncDec	++
>71	Condition	 
>72	RelationalExpression	i < size
>73	Identifier	size
>74	Identifier	i
>75	ForInit	 
>76	IdentifierDeclStatement	size_t i = 1 ;
>77	IdentifierDecl	i = 1
>78	AssignmentExpr	i = 1
>79	PrimaryExpression	1
>80	Identifier	i
>81	Identifier	i
>82	IdentifierDeclType	size_t
>83	ExpressionStatement	 
>84	ShiftExpression	std 
>85	ArrayIndexing	array [ 0 ]
>86	PrimaryExpression	0
>87	Identifier	array
>88	Identifier	std 
>95	FunctionDef	vector_init (int * array , const size_t size , size_t mod)
>96	ParameterList	int * array , const size_t size , size_t mod
>97	Parameter	 
>98	Identifier	mod
>99	ParameterType	size_t
>100	Parameter	 
>101	Identifier	size
>102	ParameterType	const size_t
>103	Parameter	 
>104	Identifier	array
>105	ParameterType	int *
>106	ReturnType	static void
>107	CompoundStatement	 
>108	ForStatement	for ( size_t i = 0 ; i < size ; ++ i )
>109	CompoundStatement	 
>110	ExpressionStatement	 
>111	AssignmentExpr	array [ i ] = rand ( ) % mod
>112	MultiplicativeExpression	rand ( ) % mod
>113	Identifier	mod
>114	CallExpression	rand ( )
>115	ArgumentList	 
>116	Callee	rand
>117	Identifier	rand
>118	ArrayIndexing	array [ i ]
>119	Identifier	i
>120	Identifier	array
>121	UnaryExpression	 
>122	Identifier	i
>123	IncDec	++
>124	Condition	 
>125	RelationalExpression	i < size
>126	Identifier	size
>127	Identifier	i
>128	ForInit	 
>129	IdentifierDeclStatement	size_t i = 0 ;
>130	IdentifierDecl	i = 0
>131	AssignmentExpr	i = 0
>132	PrimaryExpression	0
>133	Identifier	i
>134	Identifier	i
>135	IdentifierDeclType	size_t
>146	FunctionDef	partition (int * array , size_t size , bool verbose)
>147	ParameterList	int * array , size_t size , bool verbose
>148	Parameter	 
>149	Identifier	verbose
>150	ParameterType	bool
>151	Parameter	 
>152	Identifier	size
>153	ParameterType	size_t
>154	Parameter	 
>155	Identifier	array
>156	ParameterType	int *
>157	ReturnType	static size_t
>158	CompoundStatement	 
>159	ReturnStatement	 
>160	Identifier	i
>161	ExpressionStatement	 
>162	CallExpression	swap ( & array [ 0 ] , & array [ i ] )
>163	ArgumentList	& array [ 0 ]
>164	Argument	& array [ i ]
>165	UnaryOp	& array [ i ]
>166	ArrayIndexing	array [ i ]
>167	Identifier	i
>168	Identifier	array
>169	UnaryOperator	&
>170	Argument	& array [ 0 ]
>171	UnaryOp	& array [ 0 ]
>172	ArrayIndexing	array [ 0 ]
>173	PrimaryExpression	0
>174	Identifier	array
>175	UnaryOperator	&
>176	Callee	swap
>177	Identifier	swap
>178	ExpressionStatement	 
>179	CallExpression	assert ( i == j )
>180	ArgumentList	i == j
>181	Argument	i == j
>182	EqualityExpression	i == j
>183	Identifier	j
>184	Identifier	i
>185	Callee	assert
>186	Identifier	assert
>187	IfStatement	if ( verbose )
>188	CompoundStatement	 
>189	ExpressionStatement	 
>190	ShiftExpression	std 
>191	ShiftExpression	\"i(\" << i << \") j(\" << j << \")\" << std 
>192	ShiftExpression	i << \") j(\" << j << \")\" << std 
>193	ShiftExpression	\") j(\" << j << \")\" << std 
>194	ShiftExpression	j << \")\" << std 
>195	ShiftExpression	\")\" << std 
>196	Identifier	std 
>197	PrimaryExpression	\")\"
>198	Identifier	j
>199	PrimaryExpression	\") j(\"
>200	Identifier	i
>201	PrimaryExpression	\"i(\"
>202	Identifier	std 
>203	Condition	 
>204	Identifier	verbose
>205	Label	 
>206	Identifier	done
>207	ForStatement	for ( ; ; )
>208	CompoundStatement	 
>209	ExpressionStatement	 
>210	CallExpression	swap ( & array [ i ] , & array [ j ] )
>211	ArgumentList	& array [ i ]
>212	Argument	& array [ j ]
>213	UnaryOp	& array [ j ]
>214	ArrayIndexing	array [ j ]
>215	Identifier	j
>216	Identifier	array
>217	UnaryOperator	&
>218	Argument	& array [ i ]
>219	UnaryOp	& array [ i ]
>220	ArrayIndexing	array [ i ]
>221	Identifier	i
>222	Identifier	array
>223	UnaryOperator	&
>224	Callee	swap
>225	Identifier	swap
>226	IfStatement	if ( i == j )
>227	GotoStatement	 
>228	Identifier	done
>229	Condition	 
>230	EqualityExpression	i == j
>231	Identifier	j
>232	Identifier	i
>233	IfStatement	if ( verbose )
>234	CompoundStatement	 
>235	ExpressionStatement	 
>236	ShiftExpression	std 
>237	ShiftExpression	\"i(\" << i << \") j(\" << j << \")\" << std 
>238	ShiftExpression	i << \") j(\" << j << \")\" << std 
>239	ShiftExpression	\") j(\" << j << \")\" << std 
>240	ShiftExpression	j << \")\" << std 
>241	ShiftExpression	\")\" << std 
>242	Identifier	std 
>243	PrimaryExpression	\")\"
>244	Identifier	j
>245	PrimaryExpression	\") j(\"
>246	Identifier	i
>247	PrimaryExpression	\"i(\"
>248	Identifier	std 
>249	Condition	 
>250	Identifier	verbose
>251	DoStatement	do
>252	Condition	 
>253	RelationalExpression	array [ i ] < pivot
>254	Identifier	pivot
>255	ArrayIndexing	array [ i ]
>256	Identifier	i
>257	Identifier	array
>258	CompoundStatement	 
>259	ExpressionStatement	 
>260	UnaryExpression	++ i
>261	Identifier	i
>262	IncDec	++
>263	IfStatement	if ( i == j )
>264	GotoStatement	 
>265	Identifier	done
>266	Condition	 
>267	EqualityExpression	i == j
>268	Identifier	j
>269	Identifier	i
>270	ExpressionStatement	 
>271	CallExpression	assert ( i <= j )
>272	ArgumentList	i <= j
>273	Argument	i <= j
>274	RelationalExpression	i <= j
>275	Identifier	j
>276	Identifier	i
>277	Callee	assert
>278	Identifier	assert
>279	IfStatement	if ( verbose )
>280	CompoundStatement	 
>281	ExpressionStatement	 
>282	ShiftExpression	std 
>283	ShiftExpression	\"i(\" << i << \") j(\" << j << \")\" << std 
>284	ShiftExpression	i << \") j(\" << j << \")\" << std 
>285	ShiftExpression	\") j(\" << j << \")\" << std 
>286	ShiftExpression	j << \")\" << std 
>287	ShiftExpression	\")\" << std 
>288	Identifier	std 
>289	PrimaryExpression	\")\"
>290	Identifier	j
>291	PrimaryExpression	\") j(\"
>292	Identifier	i
>293	PrimaryExpression	\"i(\"
>294	Identifier	std 
>295	Condition	 
>296	Identifier	verbose
>297	DoStatement	do
>298	Condition	 
>299	RelationalExpression	array [ j ] > pivot
>300	Identifier	pivot
>301	ArrayIndexing	array [ j ]
>302	Identifier	j
>303	Identifier	array
>304	CompoundStatement	 
>305	ExpressionStatement	 
>306	CallExpression	assert ( i <= j )
>307	ArgumentList	i <= j
>308	Argument	i <= j
>309	RelationalExpression	i <= j
>310	Identifier	j
>311	Identifier	i
>312	Callee	assert
>313	Identifier	assert
>314	ExpressionStatement	 
>315	UnaryExpression	-- j
>316	Identifier	j
>317	IncDec	--
>318	ExpressionStatement	 
>319	CallExpression	assert ( i < j )
>320	ArgumentList	i < j
>321	Argument	i < j
>322	RelationalExpression	i < j
>323	Identifier	j
>324	Identifier	i
>325	Callee	assert
>326	Identifier	assert
>327	IfStatement	if ( verbose )
>328	CompoundStatement	 
>329	ExpressionStatement	 
>330	CallExpression	vector_dump ( array , size )
>331	ArgumentList	array
>332	Argument	size
>333	Identifier	size
>334	Argument	array
>335	Identifier	array
>336	Callee	vector_dump
>337	Identifier	vector_dump
>338	ExpressionStatement	 
>339	ShiftExpression	std 
>340	ShiftExpression	\"for(;;)\" << std 
>341	Identifier	std 
>342	PrimaryExpression	\"for(;;)\"
>343	Identifier	std 
>344	Condition	 
>345	Identifier	verbose
>346	IdentifierDeclStatement	 
>347	IdentifierDecl	j = size
>348	AssignmentExpr	j = size
>349	Identifier	size
>350	Identifier	size
>351	Identifier	j
>352	IdentifierDeclType	size_t
>353	IdentifierDeclStatement	 
>354	IdentifierDecl	i = 0
>355	AssignmentExpr	i = 0
>356	PrimaryExpression	0
>357	Identifier	i
>358	Identifier	i
>359	IdentifierDeclType	size_t
>360	IdentifierDeclStatement	 
>361	IdentifierDecl	pivot = array [ 0 ]
>362	AssignmentExpr	pivot = array [ 0 ]
>363	ArrayIndexing	array [ 0 ]
>364	PrimaryExpression	0
>365	Identifier	array
>366	Identifier	pivot
>367	Identifier	pivot
>368	IdentifierDeclType	int
>369	ExpressionStatement	 
>370	CallExpression	swap ( & array [ 0 ] , & array [ middleIndex ] )
>371	ArgumentList	& array [ 0 ]
>372	Argument	& array [ middleIndex ]
>373	UnaryOp	& array [ middleIndex ]
>374	ArrayIndexing	array [ middleIndex ]
>375	Identifier	middleIndex
>376	Identifier	array
>377	UnaryOperator	&
>378	Argument	& array [ 0 ]
>379	UnaryOp	& array [ 0 ]
>380	ArrayIndexing	array [ 0 ]
>381	PrimaryExpression	0
>382	Identifier	array
>383	UnaryOperator	&
>384	Callee	swap
>385	Identifier	swap
>386	IdentifierDeclStatement	 
>387	IdentifierDecl	middleIndex = size / 2
>388	AssignmentExpr	middleIndex = size / 2
>389	MultiplicativeExpression	size / 2
>390	PrimaryExpression	2
>391	Identifier	size
>392	Identifier	middleIndex
>393	Identifier	middleIndex
>394	IdentifierDeclType	size_t
>413	FunctionDef	serial_quicksort_helper (int * array , size_t size , bool verbose)
>414	ParameterList	int * array , size_t size , bool verbose
>415	Parameter	 
>416	Identifier	verbose
>417	ParameterType	bool
>418	Parameter	 
>419	Identifier	size
>420	ParameterType	size_t
>421	Parameter	 
>422	Identifier	array
>423	ParameterType	int *
>424	ReturnType	static void
>425	CompoundStatement	 
>426	IfStatement	if ( size > 1 )
>427	CompoundStatement	 
>428	IfStatement	if ( size == 2 )
>429	ElseStatement	else
>430	CompoundStatement	 
>431	ExpressionStatement	 
>432	CallExpression	serial_quicksort_helper ( & array [ i + 1 ] , size - ( i + 1 ) , verbose )
>433	ArgumentList	& array [ i + 1 ]
>434	Argument	verbose
>435	Identifier	verbose
>436	Argument	size - ( i + 1 )
>437	AdditiveExpression	size - ( i + 1 )
>438	AdditiveExpression	i + 1
>439	PrimaryExpression	1
>440	Identifier	i
>441	Identifier	size
>442	Argument	& array [ i + 1 ]
>443	UnaryOp	& array [ i + 1 ]
>444	ArrayIndexing	array [ i + 1 ]
>445	AdditiveExpression	i + 1
>446	PrimaryExpression	1
>447	Identifier	i
>448	Identifier	array
>449	UnaryOperator	&
>450	Callee	serial_quicksort_helper
>451	Identifier	serial_quicksort_helper
>452	ExpressionStatement	 
>453	CallExpression	serial_quicksort_helper ( array , i , verbose )
>454	ArgumentList	array
>455	Argument	verbose
>456	Identifier	verbose
>457	Argument	i
>458	Identifier	i
>459	Argument	array
>460	Identifier	array
>461	Callee	serial_quicksort_helper
>462	Identifier	serial_quicksort_helper
>463	IfStatement	if ( verbose )
>464	CompoundStatement	 
>465	ExpressionStatement	 
>466	CallExpression	vector_dump ( array , size )
>467	ArgumentList	array
>468	Argument	size
>469	Identifier	size
>470	Argument	array
>471	Identifier	array
>472	Callee	vector_dump
>473	Identifier	vector_dump
>474	Condition	 
>475	Identifier	verbose
>476	IdentifierDeclStatement	 
>477	IdentifierDecl	i = partition ( array , size , verbose )
>478	AssignmentExpr	i = partition ( array , size , verbose )
>479	CallExpression	partition ( array , size , verbose )
>480	ArgumentList	array
>481	Argument	verbose
>482	Identifier	verbose
>483	Argument	size
>484	Identifier	size
>485	Argument	array
>486	Identifier	array
>487	Callee	partition
>488	Identifier	partition
>489	Identifier	i
>490	Identifier	i
>491	IdentifierDeclType	size_t
>492	IfStatement	if ( verbose )
>493	CompoundStatement	 
>494	ExpressionStatement	 
>495	CallExpression	vector_dump ( array , size )
>496	ArgumentList	array
>497	Argument	size
>498	Identifier	size
>499	Argument	array
>500	Identifier	array
>501	Callee	vector_dump
>502	Identifier	vector_dump
>503	ExpressionStatement	 
>504	ShiftExpression	std 
>505	ShiftExpression	\"qs( \" << std 
>506	ShiftExpression	std 
>507	ShiftExpression	array << std 
>508	ShiftExpression	std 
>509	ShiftExpression	\",\" << size << \")\" << std 
>510	ShiftExpression	size << \")\" << std 
>511	ShiftExpression	\")\" << std 
>512	Identifier	std 
>513	PrimaryExpression	\")\"
>514	Identifier	size
>515	PrimaryExpression	\",\"
>516	Identifier	std 
>517	Identifier	array
>518	Identifier	std 
>519	PrimaryExpression	\"qs( \"
>520	Identifier	std 
>521	Condition	 
>522	Identifier	verbose
>523	CompoundStatement	 
>524	IfStatement	if ( array [ 1 ] < array [ 0 ] )
>525	CompoundStatement	 
>526	ExpressionStatement	 
>527	CallExpression	swap ( & array [ 0 ] , & array [ 1 ] )
>528	ArgumentList	& array [ 0 ]
>529	Argument	& array [ 1 ]
>530	UnaryOp	& array [ 1 ]
>531	ArrayIndexing	array [ 1 ]
>532	PrimaryExpression	1
>533	Identifier	array
>534	UnaryOperator	&
>535	Argument	& array [ 0 ]
>536	UnaryOp	& array [ 0 ]
>537	ArrayIndexing	array [ 0 ]
>538	PrimaryExpression	0
>539	Identifier	array
>540	UnaryOperator	&
>541	Callee	swap
>542	Identifier	swap
>543	Condition	 
>544	RelationalExpression	array [ 1 ] < array [ 0 ]
>545	ArrayIndexing	array [ 0 ]
>546	PrimaryExpression	0
>547	Identifier	array
>548	ArrayIndexing	array [ 1 ]
>549	PrimaryExpression	1
>550	Identifier	array
>551	Condition	 
>552	EqualityExpression	size == 2
>553	PrimaryExpression	2
>554	Identifier	size
>555	Condition	 
>556	RelationalExpression	size > 1
>557	PrimaryExpression	1
>558	Identifier	size
>571	FunctionDef	my_vector_type ()
>572	ParameterList	 
>573	CompoundStatement	 
>577	FunctionDef	my_vector_type (size_t size , bool verbose)
>578	ParameterList	size_t size , bool verbose
>579	Parameter	 
>580	Identifier	verbose
>581	ParameterType	bool
>582	Parameter	 
>583	Identifier	size
>584	ParameterType	size_t
>585	CompoundStatement	 
>586	ExpressionStatement	 
>587	CallExpression	vector_init ( m_array , size , size * 100 )
>588	ArgumentList	m_array
>589	Argument	size * 100
>590	MultiplicativeExpression	size * 100
>591	PrimaryExpression	100
>592	Identifier	size
>593	Argument	size
>594	Identifier	size
>595	Argument	m_array
>596	Identifier	m_array
>597	Callee	vector_init
>598	Identifier	vector_init
>599	ExpressionStatement	 
>600	AssignmentExpr	m_array = new int [ size ]
>601	Identifier	size
>602	Identifier	m_array
>609	FunctionDef	operator = (const my_vector_type & copied)
>610	ParameterList	const my_vector_type & copied
>611	Parameter	 
>612	Identifier	copied
>613	ParameterType	const my_vector_type &
>614	ReturnType	my_vector_type &
>615	CompoundStatement	 
>616	ReturnStatement	 
>617	UnaryOp	* this
>618	Identifier	this
>619	UnaryOperator	*
>620	ExpressionStatement	 
>621	CallExpression	copyHelper ( 0 , copied . m_size , copied . m_array )
>622	ArgumentList	0
>623	Argument	copied . m_array
>624	MemberAccess	copied . m_array
>625	Identifier	m_array
>626	Identifier	copied
>627	Argument	copied . m_size
>628	MemberAccess	copied . m_size
>629	Identifier	m_size
>630	Identifier	copied
>631	Argument	0
>632	PrimaryExpression	0
>633	Callee	copyHelper
>634	Identifier	copyHelper
>635	ExpressionStatement	 
>636	Identifier	m_array
>637	Statement	 
>638	Statement	 
>639	Statement	 
>648	FunctionDef	my_vector_type (const my_vector_type & copied)
>649	ParameterList	const my_vector_type & copied
>650	Parameter	 
>651	Identifier	copied
>652	ParameterType	const my_vector_type &
>653	CompoundStatement	 
>654	ExpressionStatement	 
>655	CallExpression	copyHelper ( 0 , copied . m_size , copied . m_array )
>656	ArgumentList	0
>657	Argument	copied . m_array
>658	MemberAccess	copied . m_array
>659	Identifier	m_array
>660	Identifier	copied
>661	Argument	copied . m_size
>662	MemberAccess	copied . m_size
>663	Identifier	m_size
>664	Identifier	copied
>665	Argument	0
>666	PrimaryExpression	0
>667	Callee	copyHelper
>668	Identifier	copyHelper
>675	FunctionDef	my_vector_type (const my_vector_type & leftChild , int pivot , const my_vector_type & rightChild)
>676	ParameterList	const my_vector_type & leftChild , int pivot , const my_vector_type & rightChild
>677	Parameter	 
>678	Identifier	rightChild
>679	ParameterType	const my_vector_type &
>680	Parameter	 
>681	Identifier	pivot
>682	ParameterType	int
>683	Parameter	 
>684	Identifier	leftChild
>685	ParameterType	const my_vector_type &
>686	CompoundStatement	 
>687	ForStatement	for ( size_t i = 0 ; i < rightSize ; ++ i )
>688	CompoundStatement	 
>689	ExpressionStatement	 
>690	AssignmentExpr	m_array [ ++ index ] = rightChild . m_array [ i ]
>691	ArrayIndexing	rightChild . m_array [ i ]
>692	Identifier	i
>693	MemberAccess	rightChild . m_array
>694	Identifier	m_array
>695	Identifier	rightChild
>696	ArrayIndexing	m_array [ ++ index ]
>697	UnaryExpression	++ index
>698	Identifier	index
>699	IncDec	++
>700	Identifier	m_array
>701	UnaryExpression	 
>702	Identifier	i
>703	IncDec	++
>704	Condition	 
>705	RelationalExpression	i < rightSize
>706	Identifier	rightSize
>707	Identifier	i
>708	ForInit	 
>709	IdentifierDeclStatement	size_t i = 0 ;
>710	IdentifierDecl	i = 0
>711	AssignmentExpr	i = 0
>712	PrimaryExpression	0
>713	Identifier	i
>714	Identifier	i
>715	IdentifierDeclType	size_t
>716	IdentifierDeclStatement	 
>717	IdentifierDecl	rightSize = rightChild . m_size
>718	AssignmentExpr	rightSize = rightChild . m_size
>719	MemberAccess	rightChild . m_size
>720	Identifier	m_size
>721	Identifier	rightChild
>722	Identifier	rightSize
>723	Identifier	rightSize
>724	IdentifierDeclType	size_t
>725	ExpressionStatement	 
>726	AssignmentExpr	m_array [ index ] = pivot
>727	Identifier	pivot
>728	ArrayIndexing	m_array [ index ]
>729	Identifier	index
>730	Identifier	m_array
>731	ForStatement	for ( ; index < leftSize ; ++ index )
>732	CompoundStatement	 
>733	ExpressionStatement	 
>734	AssignmentExpr	m_array [ index ] = leftChild . m_array [ index ]
>735	ArrayIndexing	leftChild . m_array [ index ]
>736	Identifier	index
>737	MemberAccess	leftChild . m_array
>738	Identifier	m_array
>739	Identifier	leftChild
>740	ArrayIndexing	m_array [ index ]
>741	Identifier	index
>742	Identifier	m_array
>743	UnaryExpression	 
>744	Identifier	index
>745	IncDec	++
>746	Condition	 
>747	RelationalExpression	index < leftSize
>748	Identifier	leftSize
>749	Identifier	index
>750	IdentifierDeclStatement	 
>751	IdentifierDecl	leftSize = leftChild . m_size
>752	AssignmentExpr	leftSize = leftChild . m_size
>753	MemberAccess	leftChild . m_size
>754	Identifier	m_size
>755	Identifier	leftChild
>756	Identifier	leftSize
>757	Identifier	leftSize
>758	IdentifierDeclType	size_t
>759	IdentifierDeclStatement	 
>760	IdentifierDecl	index = 0
>761	AssignmentExpr	index = 0
>762	PrimaryExpression	0
>763	Identifier	index
>764	Identifier	index
>765	IdentifierDeclType	size_t
>766	ExpressionStatement	 
>767	AssignmentExpr	m_array = new int [ m_size ]
>768	Identifier	m_size
>769	Identifier	m_array
>793	FunctionDef	my_vector_type (my_vector_type & copied , size_t pivotIndex , int childIndex)
>794	ParameterList	my_vector_type & copied , size_t pivotIndex , int childIndex
>795	Parameter	 
>796	Identifier	childIndex
>797	ParameterType	int
>798	Parameter	 
>799	Identifier	pivotIndex
>800	ParameterType	size_t
>801	Parameter	 
>802	Identifier	copied
>803	ParameterType	my_vector_type &
>804	CompoundStatement	 
>805	IfStatement	if ( childIndex == LEFT )
>806	ElseStatement	else
>807	IfStatement	if ( childIndex == RIGHT )
>808	ElseStatement	else
>809	ExpressionStatement	 
>810	CallExpression	assert ( 0 )
>811	ArgumentList	0
>812	Argument	0
>813	PrimaryExpression	0
>814	Callee	assert
>815	Identifier	assert
>816	CompoundStatement	 
>817	ExpressionStatement	 
>818	CallExpression	copyHelper ( pivotIndex + 1 , copied . m_size , copied . m_array )
>819	ArgumentList	pivotIndex + 1
>820	Argument	copied . m_array
>821	MemberAccess	copied . m_array
>822	Identifier	m_array
>823	Identifier	copied
>824	Argument	copied . m_size
>825	MemberAccess	copied . m_size
>826	Identifier	m_size
>827	Identifier	copied
>828	Argument	pivotIndex + 1
>829	AdditiveExpression	pivotIndex + 1
>830	PrimaryExpression	1
>831	Identifier	pivotIndex
>832	Callee	copyHelper
>833	Identifier	copyHelper
>834	Condition	 
>835	EqualityExpression	childIndex == RIGHT
>836	Identifier	RIGHT
>837	Identifier	childIndex
>838	CompoundStatement	 
>839	ExpressionStatement	 
>840	CallExpression	copyHelper ( 0 , pivotIndex , copied . m_array )
>841	ArgumentList	0
>842	Argument	copied . m_array
>843	MemberAccess	copied . m_array
>844	Identifier	m_array
>845	Identifier	copied
>846	Argument	pivotIndex
>847	Identifier	pivotIndex
>848	Argument	0
>849	PrimaryExpression	0
>850	Callee	copyHelper
>851	Identifier	copyHelper
>852	Condition	 
>853	EqualityExpression	childIndex == LEFT
>854	Identifier	LEFT
>855	Identifier	childIndex
>856	ExpressionStatement	 
>857	CallExpression	assert ( copied . m_isPartitioned )
>858	ArgumentList	copied . m_isPartitioned
>859	Argument	copied . m_isPartitioned
>860	MemberAccess	copied . m_isPartitioned
>861	Identifier	m_isPartitioned
>862	Identifier	copied
>863	Callee	assert
>864	Identifier	assert
>876	FunctionDef	~my_vector_type ()
>877	ParameterList	 
>878	CompoundStatement	 
>879	ExpressionStatement	 
>880	Identifier	m_array
>881	Statement	 
>882	Statement	 
>883	Statement	 
>887	FunctionDef	serial_quicksort ()
>888	ParameterList	 
>889	ReturnType	void
>890	CompoundStatement	 
>891	ExpressionStatement	 
>892	CallExpression	serial_quicksort_helper ( m_array , m_size , m_verbose )
>893	ArgumentList	m_array
>894	Argument	m_verbose
>895	Identifier	m_verbose
>896	Argument	m_size
>897	Identifier	m_size
>898	Argument	m_array
>899	Identifier	m_array
>900	Callee	serial_quicksort_helper
>901	Identifier	serial_quicksort_helper
>908	FunctionDef	partitionVector ()
>909	ParameterList	 
>910	ReturnType	size_t
>911	CompoundStatement	 
>912	ReturnStatement	 
>913	Identifier	toBeReturned
>914	ExpressionStatement	 
>915	AssignmentExpr	m_isPartitioned = true
>916	Identifier	true
>917	Identifier	m_isPartitioned
>918	IdentifierDeclStatement	 
>919	IdentifierDecl	toBeReturned = partition ( m_array , m_size , m_verbose )
>920	AssignmentExpr	toBeReturned = partition ( m_array , m_size , m_verbose )
>921	CallExpression	partition ( m_array , m_size , m_verbose )
>922	ArgumentList	m_array
>923	Argument	m_verbose
>924	Identifier	m_verbose
>925	Argument	m_size
>926	Identifier	m_size
>927	Argument	m_array
>928	Identifier	m_array
>929	Callee	partition
>930	Identifier	partition
>931	Identifier	toBeReturned
>932	Identifier	toBeReturned
>933	IdentifierDeclType	size_t
>944	FunctionDef	isSorted ()
>945	ParameterList	 
>946	ReturnType	bool
>947	CompoundStatement	 
>948	ReturnStatement	 
>949	Identifier	sortedTillNow
>950	IfStatement	if ( m_size > 1 )
>951	CompoundStatement	 
>952	ForStatement	for ( size_t i = 1 ; i < size && sortedTillNow ; ++ i )
>953	CompoundStatement	 
>954	ExpressionStatement	 
>955	AssignmentExpr	last = m_array [ i ]
>956	ArrayIndexing	m_array [ i ]
>957	Identifier	i
>958	Identifier	m_array
>959	Identifier	last
>960	ExpressionStatement	 
>961	AssignmentExpr	sortedTillNow = sortedTillNow && ( m_array [ i ] >= last )
>962	AndExpression	sortedTillNow && ( m_array [ i ] >= last )
>963	RelationalExpression	m_array [ i ] >= last
>964	Identifier	last
>965	ArrayIndexing	m_array [ i ]
>966	Identifier	i
>967	Identifier	m_array
>968	Identifier	sortedTillNow
>969	Identifier	sortedTillNow
>970	UnaryExpression	 
>971	Identifier	i
>972	IncDec	++
>973	Condition	 
>974	AndExpression	i < size && sortedTillNow
>975	Identifier	sortedTillNow
>976	RelationalExpression	i < size
>977	Identifier	size
>978	Identifier	i
>979	ForInit	 
>980	IdentifierDeclStatement	size_t i = 1 ;
>981	IdentifierDecl	i = 1
>982	AssignmentExpr	i = 1
>983	PrimaryExpression	1
>984	Identifier	i
>985	Identifier	i
>986	IdentifierDeclType	size_t
>987	IdentifierDeclStatement	 
>988	IdentifierDecl	last ( m_array [ 0 ] )
>989	ArrayIndexing	m_array [ 0 ]
>990	PrimaryExpression	0
>991	Identifier	m_array
>992	Identifier	last
>993	IdentifierDeclType	int
>994	IdentifierDeclStatement	 
>995	IdentifierDecl	size = m_size
>996	AssignmentExpr	size = m_size
>997	Identifier	m_size
>998	Identifier	m_size
>999	Identifier	size
>1000	IdentifierDeclType	size_t
>1001	Condition	 
>1002	RelationalExpression	m_size > 1
>1003	PrimaryExpression	1
>1004	Identifier	m_size
>1005	IdentifierDeclStatement	 
>1006	IdentifierDecl	sortedTillNow = true
>1007	AssignmentExpr	sortedTillNow = true
>1008	Identifier	true
>1009	Identifier	true
>1010	Identifier	sortedTillNow
>1011	IdentifierDeclType	bool
>1024	FunctionDef	getIndex (size_t index)
>1025	ParameterList	size_t index
>1026	Parameter	 
>1027	Identifier	index
>1028	ParameterType	size_t
>1029	ReturnType	int
>1030	CompoundStatement	 
>1031	ReturnStatement	 
>1032	ArrayIndexing	m_array [ index ]
>1033	Identifier	index
>1034	Identifier	m_array
>1042	FunctionDef	size ()
>1043	ParameterList	 
>1044	ReturnType	size_t
>1045	CompoundStatement	 
>1046	ReturnStatement	 
>1047	Identifier	m_size
>1052	FunctionDef	print ()
>1053	ParameterList	 
>1054	ReturnType	void
>1055	CompoundStatement	 
>1056	ExpressionStatement	 
>1057	CallExpression	vector_dump ( m_array , m_size )
>1058	ArgumentList	m_array
>1059	Argument	m_size
>1060	Identifier	m_size
>1061	Argument	m_array
>1062	Identifier	m_array
>1063	Callee	vector_dump
>1064	Identifier	vector_dump
>1071	FunctionDef	serialize (CnC 
>1072	ParameterList	CnC 
>1073	Parameter	 
>1074	Identifier	ser
>1075	ParameterType	CnC 
>1076	ReturnType	void
>1077	CompoundStatement	 
>1078	ExpressionStatement	 
>1079	Expression	ser & CnC 
>1080	RelationalExpression	CnC 
>1081	Expression	m_array , m_size
>1082	Identifier	m_size
>1083	Identifier	m_array
>1084	Identifier	CnC 
>1085	BitAndExpression	ser & CnC 
>1086	RelationalExpression	CnC 
>1087	Identifier	int
>1088	Identifier	CnC 
>1089	Identifier	ser
>1090	IfStatement	if ( ser . is_unpacking ( ) )
>1091	ExpressionStatement	 
>1092	AssignmentExpr	m_array = new int [ m_size ]
>1093	Identifier	m_size
>1094	Identifier	m_array
>1095	Condition	 
>1096	CallExpression	ser . is_unpacking ( )
>1097	ArgumentList	 
>1098	Callee	ser . is_unpacking
>1099	MemberAccess	ser . is_unpacking
>1100	Identifier	is_unpacking
>1101	Identifier	ser
>1102	ExpressionStatement	 
>1103	BitAndExpression	ser & m_isPartitioned & m_size & m_verbose
>1104	BitAndExpression	m_isPartitioned & m_size & m_verbose
>1105	BitAndExpression	m_size & m_verbose
>1106	Identifier	m_verbose
>1107	Identifier	m_size
>1108	Identifier	m_isPartitioned
>1109	Identifier	ser
>1125	FunctionDef	copyHelper (size_t begin , size_t end , const int * copyFrom)
>1126	ParameterList	size_t begin , size_t end , const int * copyFrom
>1127	Parameter	 
>1128	Identifier	copyFrom
>1129	ParameterType	const int *
>1130	Parameter	 
>1131	Identifier	end
>1132	ParameterType	size_t
>1133	Parameter	 
>1134	Identifier	begin
>1135	ParameterType	size_t
>1136	ReturnType	void
>1137	CompoundStatement	 
>1138	ForStatement	for ( size_t i = 0 ; i < m_size ; ++ i )
>1139	CompoundStatement	 
>1140	ExpressionStatement	 
>1141	AssignmentExpr	m_array [ i ] = copyFrom [ begin + i ]
>1142	ArrayIndexing	copyFrom [ begin + i ]
>1143	AdditiveExpression	begin + i
>1144	Identifier	i
>1145	Identifier	begin
>1146	Identifier	copyFrom
>1147	ArrayIndexing	m_array [ i ]
>1148	Identifier	i
>1149	Identifier	m_array
>1150	UnaryExpression	 
>1151	Identifier	i
>1152	IncDec	++
>1153	Condition	 
>1154	RelationalExpression	i < m_size
>1155	Identifier	m_size
>1156	Identifier	i
>1157	ForInit	 
>1158	IdentifierDeclStatement	size_t i = 0 ;
>1159	IdentifierDecl	i = 0
>1160	AssignmentExpr	i = 0
>1161	PrimaryExpression	0
>1162	Identifier	i
>1163	Identifier	i
>1164	IdentifierDeclType	size_t
>1165	ExpressionStatement	 
>1166	AssignmentExpr	m_array = new int [ m_size ]
>1167	Identifier	m_size
>1168	Identifier	m_array
>1169	ExpressionStatement	 
>1170	AssignmentExpr	m_size = end - begin
>1171	AdditiveExpression	end - begin
>1172	Identifier	begin
>1173	Identifier	end
>1174	Identifier	m_size
>1190	FunctionDef	computeChildTag (ancestry_path_tag_type parent , int childIndex)
>1191	ParameterList	ancestry_path_tag_type parent , int childIndex
>1192	Parameter	 
>1193	Identifier	childIndex
>1194	ParameterType	int
>1195	Parameter	 
>1196	Identifier	parent
>1197	ParameterType	ancestry_path_tag_type
>1198	ReturnType	inline ancestry_path_tag_type
>1199	CompoundStatement	 
>1200	ReturnStatement	 
>1201	AdditiveExpression	( parent << 1 ) + childIndex
>1202	Identifier	childIndex
>1203	ShiftExpression	parent << 1
>1204	PrimaryExpression	1
>1205	Identifier	parent
>1211	FunctionDef	computeParentTag (ancestry_path_tag_type child)
>1212	ParameterList	ancestry_path_tag_type child
>1213	Parameter	 
>1214	Identifier	child
>1215	ParameterType	ancestry_path_tag_type
>1216	ReturnType	inline ancestry_path_tag_type
>1217	CompoundStatement	 
>1218	ReturnStatement	 
>1219	ShiftExpression	( child - 1 ) >> 1
>1220	PrimaryExpression	1
>1221	AdditiveExpression	child - 1
>1222	PrimaryExpression	1
>1223	Identifier	child
>1233	FunctionDef	consumed_on (const ancestry_path_tag_type & tag)
>1234	ParameterList	const ancestry_path_tag_type & tag
>1235	Parameter	 
>1236	Identifier	tag
>1237	ParameterType	const ancestry_path_tag_type &
>1238	ReturnType	int
>1239	CompoundStatement	 
>1240	ReturnStatement	 
>1241	ConditionalExpression	_p >= 0 ? ( _p >= LIM ? CnC 
>1242	PrimaryExpression	0
>1243	ConditionalExpression	_p >= LIM ? CnC 
>1244	MultiplicativeExpression	( ( _p * 15502547 ) % 11057 ) % numProcs ( )
>1245	CallExpression	numProcs ( )
>1246	ArgumentList	 
>1247	Callee	numProcs
>1248	Identifier	numProcs
>1249	MultiplicativeExpression	( _p * 15502547 ) % 11057
>1250	PrimaryExpression	11057
>1251	MultiplicativeExpression	_p * 15502547
>1252	PrimaryExpression	15502547
>1253	Identifier	_p
>1254	Identifier	CnC 
>1255	Condition	_p >= LIM
>1256	RelationalExpression	_p >= LIM
>1257	Identifier	LIM
>1258	Identifier	_p
>1259	Condition	_p >= 0
>1260	RelationalExpression	_p >= 0
>1261	PrimaryExpression	0
>1262	Identifier	_p
>1263	IdentifierDeclStatement	 
>1264	IdentifierDecl	_p ( computeParentTag ( tag ) )
>1265	CallExpression	computeParentTag ( tag )
>1266	ArgumentList	tag
>1267	Argument	tag
>1268	Identifier	tag
>1269	Callee	computeParentTag
>1270	Identifier	computeParentTag
>1271	Identifier	_p
>1272	IdentifierDeclType	int
>1284	FunctionDef	consumed_on (const ancestry_path_tag_type & tag)
>1285	ParameterList	const ancestry_path_tag_type & tag
>1286	Parameter	 
>1287	Identifier	tag
>1288	ParameterType	const ancestry_path_tag_type &
>1289	ReturnType	int
>1290	CompoundStatement	 
>1291	ReturnStatement	 
>1292	ConditionalExpression	tag >= LIM ? CnC 
>1293	MultiplicativeExpression	( ( tag * 15502547 ) % 11057 ) % numProcs ( )
>1294	CallExpression	numProcs ( )
>1295	ArgumentList	 
>1296	Callee	numProcs
>1297	Identifier	numProcs
>1298	MultiplicativeExpression	( tag * 15502547 ) % 11057
>1299	PrimaryExpression	11057
>1300	MultiplicativeExpression	tag * 15502547
>1301	PrimaryExpression	15502547
>1302	Identifier	tag
>1303	Identifier	CnC 
>1304	Condition	tag >= LIM
>1305	RelationalExpression	tag >= LIM
>1306	Identifier	LIM
>1307	Identifier	tag
>1329	FunctionDef	quick_sort_split_step 
>1330	ParameterList	ancestry_path_tag_type ancestry , quick_sort_context & graph
>1331	Parameter	 
>1332	Identifier	graph
>1333	ParameterType	quick_sort_context &
>1334	Parameter	 
>1335	Identifier	ancestry
>1336	ParameterType	ancestry_path_tag_type
>1337	ReturnType	int
>1338	CompoundStatement	 
>1339	ReturnStatement	 
>1340	Identifier	CnC 
>1341	IfStatement	if ( currentVectorSize <= THRESHOLD )
>1342	ElseStatement	else
>1343	CompoundStatement	 
>1344	ExpressionStatement	 
>1345	CallExpression	graph . ancestryPathConcatTagSpace . put ( ancestry )
>1346	ArgumentList	ancestry
>1347	Argument	ancestry
>1348	Identifier	ancestry
>1349	Callee	graph . ancestryPathConcatTagSpace . put
>1350	MemberAccess	graph . ancestryPathConcatTagSpace . put
>1351	Identifier	put
>1352	MemberAccess	graph . ancestryPathConcatTagSpace
>1353	Identifier	ancestryPathConcatTagSpace
>1354	Identifier	graph
>1355	ExpressionStatement	 
>1356	CallExpression	graph . ancestryPathSplitTagSpace . put ( leftChildTag )
>1357	ArgumentList	leftChildTag
>1358	Argument	leftChildTag
>1359	Identifier	leftChildTag
>1360	Callee	graph . ancestryPathSplitTagSpace . put
>1361	MemberAccess	graph . ancestryPathSplitTagSpace . put
>1362	Identifier	put
>1363	MemberAccess	graph . ancestryPathSplitTagSpace
>1364	Identifier	ancestryPathSplitTagSpace
>1365	Identifier	graph
>1366	ExpressionStatement	 
>1367	CallExpression	graph . unsortedVectorSpace . put ( leftChildTag , leftChildVector )
>1368	ArgumentList	leftChildTag
>1369	Argument	leftChildVector
>1370	Identifier	leftChildVector
>1371	Argument	leftChildTag
>1372	Identifier	leftChildTag
>1373	Callee	graph . unsortedVectorSpace . put
>1374	MemberAccess	graph . unsortedVectorSpace . put
>1375	Identifier	put
>1376	MemberAccess	graph . unsortedVectorSpace
>1377	Identifier	unsortedVectorSpace
>1378	Identifier	graph
>1379	IdentifierDeclStatement	 
>1380	IdentifierDecl	leftChildTag = computeChildTag ( ancestry , my_vector_type 
>1381	AssignmentExpr	leftChildTag = computeChildTag ( ancestry , my_vector_type 
>1382	CallExpression	computeChildTag ( ancestry , my_vector_type 
>1383	ArgumentList	ancestry
>1384	Argument	my_vector_type 
>1385	Identifier	my_vector_type 
>1386	Argument	ancestry
>1387	Identifier	ancestry
>1388	Callee	computeChildTag
>1389	Identifier	computeChildTag
>1390	Identifier	leftChildTag
>1391	Identifier	leftChildTag
>1392	IdentifierDeclType	ancestry_path_tag_type
>1393	IdentifierDeclStatement	 
>1394	IdentifierDecl	leftChildVector ( currentVector , pivotIndex , my_vector_type 
>1395	Expression	currentVector , pivotIndex , my_vector_type 
>1396	Expression	pivotIndex , my_vector_type 
>1397	Identifier	my_vector_type 
>1398	Identifier	pivotIndex
>1399	Identifier	currentVector
>1400	Identifier	leftChildVector
>1401	IdentifierDeclType	my_vector_type
>1402	ExpressionStatement	 
>1403	CallExpression	graph . ancestryPathSplitTagSpace . put ( rightChildTag )
>1404	ArgumentList	rightChildTag
>1405	Argument	rightChildTag
>1406	Identifier	rightChildTag
>1407	Callee	graph . ancestryPathSplitTagSpace . put
>1408	MemberAccess	graph . ancestryPathSplitTagSpace . put
>1409	Identifier	put
>1410	MemberAccess	graph . ancestryPathSplitTagSpace
>1411	Identifier	ancestryPathSplitTagSpace
>1412	Identifier	graph
>1413	ExpressionStatement	 
>1414	CallExpression	graph . unsortedVectorSpace . put ( rightChildTag , rightChildVector )
>1415	ArgumentList	rightChildTag
>1416	Argument	rightChildVector
>1417	Identifier	rightChildVector
>1418	Argument	rightChildTag
>1419	Identifier	rightChildTag
>1420	Callee	graph . unsortedVectorSpace . put
>1421	MemberAccess	graph . unsortedVectorSpace . put
>1422	Identifier	put
>1423	MemberAccess	graph . unsortedVectorSpace
>1424	Identifier	unsortedVectorSpace
>1425	Identifier	graph
>1426	IdentifierDeclStatement	 
>1427	IdentifierDecl	rightChildTag = computeChildTag ( ancestry , my_vector_type 
>1428	AssignmentExpr	rightChildTag = computeChildTag ( ancestry , my_vector_type 
>1429	CallExpression	computeChildTag ( ancestry , my_vector_type 
>1430	ArgumentList	ancestry
>1431	Argument	my_vector_type 
>1432	Identifier	my_vector_type 
>1433	Argument	ancestry
>1434	Identifier	ancestry
>1435	Callee	computeChildTag
>1436	Identifier	computeChildTag
>1437	Identifier	rightChildTag
>1438	Identifier	rightChildTag
>1439	IdentifierDeclType	ancestry_path_tag_type
>1440	IdentifierDeclStatement	 
>1441	IdentifierDecl	rightChildVector ( currentVector , pivotIndex , my_vector_type 
>1442	Expression	currentVector , pivotIndex , my_vector_type 
>1443	Expression	pivotIndex , my_vector_type 
>1444	Identifier	my_vector_type 
>1445	Identifier	pivotIndex
>1446	Identifier	currentVector
>1447	Identifier	rightChildVector
>1448	IdentifierDeclType	my_vector_type
>1449	ExpressionStatement	 
>1450	CallExpression	graph . pivotSpace . put ( ancestry , currentVector . getIndex ( pivotIndex ) )
>1451	ArgumentList	ancestry
>1452	Argument	currentVector . getIndex ( pivotIndex )
>1453	CallExpression	currentVector . getIndex ( pivotIndex )
>1454	ArgumentList	pivotIndex
>1455	Argument	pivotIndex
>1456	Identifier	pivotIndex
>1457	Callee	currentVector . getIndex
>1458	MemberAccess	currentVector . getIndex
>1459	Identifier	getIndex
>1460	Identifier	currentVector
>1461	Argument	ancestry
>1462	Identifier	ancestry
>1463	Callee	graph . pivotSpace . put
>1464	MemberAccess	graph . pivotSpace . put
>1465	Identifier	put
>1466	MemberAccess	graph . pivotSpace
>1467	Identifier	pivotSpace
>1468	Identifier	graph
>1469	IdentifierDeclStatement	 
>1470	IdentifierDecl	pivotIndex = currentVector . partitionVector ( )
>1471	AssignmentExpr	pivotIndex = currentVector . partitionVector ( )
>1472	CallExpression	currentVector . partitionVector ( )
>1473	ArgumentList	 
>1474	Callee	currentVector . partitionVector
>1475	MemberAccess	currentVector . partitionVector
>1476	Identifier	partitionVector
>1477	Identifier	currentVector
>1478	Identifier	pivotIndex
>1479	Identifier	pivotIndex
>1480	IdentifierDeclType	size_t
>1481	CompoundStatement	 
>1482	ExpressionStatement	 
>1483	CallExpression	graph . sortedVectorSpace . put ( ancestry , currentVector )
>1484	ArgumentList	ancestry
>1485	Argument	currentVector
>1486	Identifier	currentVector
>1487	Argument	ancestry
>1488	Identifier	ancestry
>1489	Callee	graph . sortedVectorSpace . put
>1490	MemberAccess	graph . sortedVectorSpace . put
>1491	Identifier	put
>1492	MemberAccess	graph . sortedVectorSpace
>1493	Identifier	sortedVectorSpace
>1494	Identifier	graph
>1495	ExpressionStatement	 
>1496	CallExpression	currentVector . serial_quicksort ( )
>1497	ArgumentList	 
>1498	Callee	currentVector . serial_quicksort
>1499	MemberAccess	currentVector . serial_quicksort
>1500	Identifier	serial_quicksort
>1501	Identifier	currentVector
>1502	Condition	 
>1503	RelationalExpression	currentVectorSize <= THRESHOLD
>1504	Identifier	THRESHOLD
>1505	Identifier	currentVectorSize
>1506	IdentifierDeclStatement	 
>1507	IdentifierDecl	currentVectorSize = currentVector . size ( )
>1508	AssignmentExpr	currentVectorSize = currentVector . size ( )
>1509	CallExpression	currentVector . size ( )
>1510	ArgumentList	 
>1511	Callee	currentVector . size
>1512	MemberAccess	currentVector . size
>1513	Identifier	size
>1514	Identifier	currentVector
>1515	Identifier	currentVectorSize
>1516	Identifier	currentVectorSize
>1517	IdentifierDeclType	size_t
>1518	ExpressionStatement	 
>1519	CallExpression	graph . unsortedVectorSpace . get ( ancestry , currentVector )
>1520	ArgumentList	ancestry
>1521	Argument	currentVector
>1522	Identifier	currentVector
>1523	Argument	ancestry
>1524	Identifier	ancestry
>1525	Callee	graph . unsortedVectorSpace . get
>1526	MemberAccess	graph . unsortedVectorSpace . get
>1527	Identifier	get
>1528	MemberAccess	graph . unsortedVectorSpace
>1529	Identifier	unsortedVectorSpace
>1530	Identifier	graph
>1531	IdentifierDeclStatement	 
>1532	IdentifierDecl	currentVector
>1533	Identifier	currentVector
>1534	IdentifierDeclType	my_vector_type
>1535	ExpressionStatement	 
>1536	CallExpression	VT_FUNC ( \"quick_sort_split_step
>1537	ArgumentList	\"quick_sort_split_step
>1538	Argument	\"quick_sort_split_step
>1539	PrimaryExpression	\"quick_sort_split_step
>1540	Callee	VT_FUNC
>1541	Identifier	VT_FUNC
>1567	FunctionDef	quick_sort_concat_step 
>1568	ParameterList	ancestry_path_tag_type ancestry , quick_sort_context & graph
>1569	Parameter	 
>1570	Identifier	graph
>1571	ParameterType	quick_sort_context &
>1572	Parameter	 
>1573	Identifier	ancestry
>1574	ParameterType	ancestry_path_tag_type
>1575	ReturnType	int
>1576	CompoundStatement	 
>1577	ReturnStatement	 
>1578	Identifier	CnC 
>1579	ExpressionStatement	 
>1580	CallExpression	graph . sortedVectorSpace . put ( ancestry , currentSortedVector )
>1581	ArgumentList	ancestry
>1582	Argument	currentSortedVector
>1583	Identifier	currentSortedVector
>1584	Argument	ancestry
>1585	Identifier	ancestry
>1586	Callee	graph . sortedVectorSpace . put
>1587	MemberAccess	graph . sortedVectorSpace . put
>1588	Identifier	put
>1589	MemberAccess	graph . sortedVectorSpace
>1590	Identifier	sortedVectorSpace
>1591	Identifier	graph
>1592	IdentifierDeclStatement	 
>1593	IdentifierDecl	currentSortedVector ( leftChildVector , pivot , rightChildVector )
>1594	Expression	leftChildVector , pivot , rightChildVector
>1595	Expression	pivot , rightChildVector
>1596	Identifier	rightChildVector
>1597	Identifier	pivot
>1598	Identifier	leftChildVector
>1599	Identifier	currentSortedVector
>1600	IdentifierDeclType	my_vector_type
>1601	ExpressionStatement	 
>1602	CallExpression	graph . pivotSpace . get ( ancestry , pivot )
>1603	ArgumentList	ancestry
>1604	Argument	pivot
>1605	Identifier	pivot
>1606	Argument	ancestry
>1607	Identifier	ancestry
>1608	Callee	graph . pivotSpace . get
>1609	MemberAccess	graph . pivotSpace . get
>1610	Identifier	get
>1611	MemberAccess	graph . pivotSpace
>1612	Identifier	pivotSpace
>1613	Identifier	graph
>1614	IdentifierDeclStatement	 
>1615	IdentifierDecl	pivot
>1616	Identifier	pivot
>1617	IdentifierDeclType	int
>1618	ExpressionStatement	 
>1619	CallExpression	graph . sortedVectorSpace . get ( computeChildTag ( ancestry , my_vector_type 
>1620	ArgumentList	computeChildTag ( ancestry , my_vector_type 
>1621	Argument	rightChildVector
>1622	Identifier	rightChildVector
>1623	Argument	computeChildTag ( ancestry , my_vector_type 
>1624	CallExpression	computeChildTag ( ancestry , my_vector_type 
>1625	ArgumentList	ancestry
>1626	Argument	my_vector_type 
>1627	Identifier	my_vector_type 
>1628	Argument	ancestry
>1629	Identifier	ancestry
>1630	Callee	computeChildTag
>1631	Identifier	computeChildTag
>1632	Callee	graph . sortedVectorSpace . get
>1633	MemberAccess	graph . sortedVectorSpace . get
>1634	Identifier	get
>1635	MemberAccess	graph . sortedVectorSpace
>1636	Identifier	sortedVectorSpace
>1637	Identifier	graph
>1638	IdentifierDeclStatement	 
>1639	IdentifierDecl	rightChildVector
>1640	Identifier	rightChildVector
>1641	IdentifierDeclType	my_vector_type
>1642	ExpressionStatement	 
>1643	CallExpression	graph . sortedVectorSpace . get ( computeChildTag ( ancestry , my_vector_type 
>1644	ArgumentList	computeChildTag ( ancestry , my_vector_type 
>1645	Argument	leftChildVector
>1646	Identifier	leftChildVector
>1647	Argument	computeChildTag ( ancestry , my_vector_type 
>1648	CallExpression	computeChildTag ( ancestry , my_vector_type 
>1649	ArgumentList	ancestry
>1650	Argument	my_vector_type 
>1651	Identifier	my_vector_type 
>1652	Argument	ancestry
>1653	Identifier	ancestry
>1654	Callee	computeChildTag
>1655	Identifier	computeChildTag
>1656	Callee	graph . sortedVectorSpace . get
>1657	MemberAccess	graph . sortedVectorSpace . get
>1658	Identifier	get
>1659	MemberAccess	graph . sortedVectorSpace
>1660	Identifier	sortedVectorSpace
>1661	Identifier	graph
>1662	IdentifierDeclStatement	 
>1663	IdentifierDecl	leftChildVector
>1664	Identifier	leftChildVector
>1665	IdentifierDeclType	my_vector_type
>1666	ExpressionStatement	 
>1667	CallExpression	VT_FUNC ( \"quick_sort_concat_step
>1668	ArgumentList	\"quick_sort_concat_step
>1669	Argument	\"quick_sort_concat_step
>1670	PrimaryExpression	\"quick_sort_concat_step
>1671	Callee	VT_FUNC
>1672	Identifier	VT_FUNC
>1688	FunctionDef	main (int argc , char * argv [ ])
>1689	ParameterList	int argc , char * argv [ ]
>1690	Parameter	 
>1691	Identifier	argv
>1692	ParameterType	char * [ ]
>1693	Parameter	 
>1694	Identifier	argc
>1695	ParameterType	int
>1696	ReturnType	int
>1697	CompoundStatement	 
>1698	ReturnStatement	 
>1699	Identifier	toBeReturned
>1700	IfStatement	if ( argc < 2 )
>1701	ElseStatement	else
>1702	CompoundStatement	 
>1703	ExpressionStatement	 
>1704	CallExpression	printf ( \"Computed in %g seconds\n\" , ( t1 - t0 ) . seconds ( ) )
>1705	ArgumentList	\"Computed in %g seconds\n\"
>1706	Argument	( t1 - t0 ) . seconds ( )
>1707	CallExpression	( t1 - t0 ) . seconds ( )
>1708	ArgumentList	 
>1709	Callee	( t1 - t0 ) . seconds
>1710	MemberAccess	( t1 - t0 ) . seconds
>1711	Identifier	seconds
>1712	AdditiveExpression	t1 - t0
>1713	Identifier	t0
>1714	Identifier	t1
>1715	Argument	\"Computed in %g seconds\n\"
>1716	PrimaryExpression	\"Computed in %g seconds\n\"
>1717	Callee	printf
>1718	Identifier	printf
>1719	ExpressionStatement	 
>1720	CallExpression	assert ( sorted . isSorted ( ) )
>1721	ArgumentList	sorted . isSorted ( )
>1722	Argument	sorted . isSorted ( )
>1723	CallExpression	sorted . isSorted ( )
>1724	ArgumentList	 
>1725	Callee	sorted . isSorted
>1726	MemberAccess	sorted . isSorted
>1727	Identifier	isSorted
>1728	Identifier	sorted
>1729	Callee	assert
>1730	Identifier	assert
>1731	ExpressionStatement	 
>1732	CallExpression	assert ( sorted . size ( ) == integerVector . size ( ) )
>1733	ArgumentList	sorted . size ( ) == integerVector . size ( )
>1734	Argument	sorted . size ( ) == integerVector . size ( )
>1735	EqualityExpression	sorted . size ( ) == integerVector . size ( )
>1736	CallExpression	integerVector . size ( )
>1737	ArgumentList	 
>1738	Callee	integerVector . size
>1739	MemberAccess	integerVector . size
>1740	Identifier	size
>1741	Identifier	integerVector
>1742	CallExpression	sorted . size ( )
>1743	ArgumentList	 
>1744	Callee	sorted . size
>1745	MemberAccess	sorted . size
>1746	Identifier	size
>1747	Identifier	sorted
>1748	Callee	assert
>1749	Identifier	assert
>1750	IdentifierDeclStatement	 
>1751	IdentifierDecl	t1 = tbb 
>1752	AssignmentExpr	t1 = tbb 
>1753	CallExpression	tbb 
>1754	ArgumentList	 
>1755	Callee	tbb 
>1756	Identifier	tbb 
>1757	Identifier	t1
>1758	Identifier	t1
>1759	IdentifierDeclType	tbb 
>1760	ExpressionStatement	 
>1761	CallExpression	graph . sortedVectorSpace . get ( 0 , sorted )
>1762	ArgumentList	0
>1763	Argument	sorted
>1764	Identifier	sorted
>1765	Argument	0
>1766	PrimaryExpression	0
>1767	Callee	graph . sortedVectorSpace . get
>1768	MemberAccess	graph . sortedVectorSpace . get
>1769	Identifier	get
>1770	MemberAccess	graph . sortedVectorSpace
>1771	Identifier	sortedVectorSpace
>1772	Identifier	graph
>1773	IdentifierDeclStatement	 
>1774	IdentifierDecl	sorted
>1775	Identifier	sorted
>1776	IdentifierDeclType	my_vector_type
>1777	ExpressionStatement	 
>1778	CallExpression	graph . wait ( )
>1779	ArgumentList	 
>1780	Callee	graph . wait
>1781	MemberAccess	graph . wait
>1782	Identifier	wait
>1783	Identifier	graph
>1784	ExpressionStatement	 
>1785	CallExpression	graph . ancestryPathSplitTagSpace . put ( 0 )
>1786	ArgumentList	0
>1787	Argument	0
>1788	PrimaryExpression	0
>1789	Callee	graph . ancestryPathSplitTagSpace . put
>1790	MemberAccess	graph . ancestryPathSplitTagSpace . put
>1791	Identifier	put
>1792	MemberAccess	graph . ancestryPathSplitTagSpace
>1793	Identifier	ancestryPathSplitTagSpace
>1794	Identifier	graph
>1795	ExpressionStatement	 
>1796	CallExpression	graph . unsortedVectorSpace . put ( ancestry_path_tag_type ( 0 ) , integerVector )
>1797	ArgumentList	ancestry_path_tag_type ( 0 )
>1798	Argument	integerVector
>1799	Identifier	integerVector
>1800	Argument	ancestry_path_tag_type ( 0 )
>1801	CallExpression	ancestry_path_tag_type ( 0 )
>1802	ArgumentList	0
>1803	Argument	0
>1804	PrimaryExpression	0
>1805	Callee	ancestry_path_tag_type
>1806	Identifier	ancestry_path_tag_type
>1807	Callee	graph . unsortedVectorSpace . put
>1808	MemberAccess	graph . unsortedVectorSpace . put
>1809	Identifier	put
>1810	MemberAccess	graph . unsortedVectorSpace
>1811	Identifier	unsortedVectorSpace
>1812	Identifier	graph
>1813	IdentifierDeclStatement	 
>1814	IdentifierDecl	graph
>1815	Identifier	graph
>1816	IdentifierDeclType	quick_sort_context
>1817	IdentifierDeclStatement	 
>1818	IdentifierDecl	t0 = tbb 
>1819	AssignmentExpr	t0 = tbb 
>1820	CallExpression	tbb 
>1821	ArgumentList	 
>1822	Callee	tbb 
>1823	Identifier	tbb 
>1824	Identifier	t0
>1825	Identifier	t0
>1826	IdentifierDeclType	tbb 
>1827	IdentifierDeclStatement	 
>1828	IdentifierDecl	integerVector ( size_t ( size ) , verbose )
>1829	Expression	size_t ( size ) , verbose
>1830	Identifier	verbose
>1831	CallExpression	size_t ( size )
>1832	ArgumentList	size
>1833	Argument	size
>1834	Identifier	size
>1835	Callee	size_t
>1836	Identifier	size_t
>1837	Identifier	integerVector
>1838	IdentifierDeclType	my_vector_type
>1839	IdentifierDeclStatement	 
>1840	IdentifierDecl	verbose = argc == 3 && ! strcmp ( \"-v\" , argv [ 2 ] )
>1841	AssignmentExpr	verbose = argc == 3 && ! strcmp ( \"-v\" , argv [ 2 ] )
>1842	AndExpression	argc == 3 && ! strcmp ( \"-v\" , argv [ 2 ] )
>1843	UnaryOp	! strcmp ( \"-v\" , argv [ 2 ] )
>1844	CallExpression	strcmp ( \"-v\" , argv [ 2 ] )
>1845	ArgumentList	\"-v\"
>1846	Argument	argv [ 2 ]
>1847	ArrayIndexing	argv [ 2 ]
>1848	PrimaryExpression	2
>1849	Identifier	argv
>1850	Argument	\"-v\"
>1851	PrimaryExpression	\"-v\"
>1852	Callee	strcmp
>1853	Identifier	strcmp
>1854	UnaryOperator	!
>1855	EqualityExpression	argc == 3
>1856	PrimaryExpression	3
>1857	Identifier	argc
>1858	Identifier	verbose
>1859	Identifier	verbose
>1860	IdentifierDeclType	bool
>1861	IdentifierDeclStatement	 
>1862	IdentifierDecl	size = atoi ( argv [ 1 ] )
>1863	AssignmentExpr	size = atoi ( argv [ 1 ] )
>1864	CallExpression	atoi ( argv [ 1 ] )
>1865	ArgumentList	argv [ 1 ]
>1866	Argument	argv [ 1 ]
>1867	ArrayIndexing	argv [ 1 ]
>1868	PrimaryExpression	1
>1869	Identifier	argv
>1870	Callee	atoi
>1871	Identifier	atoi
>1872	Identifier	size
>1873	Identifier	size
>1874	IdentifierDeclType	int
>1875	ExpressionStatement	 
>1876	CallExpression	srand ( 0xdeadbeef )
>1877	ArgumentList	0xdeadbeef
>1878	Argument	0xdeadbeef
>1879	PrimaryExpression	0xdeadbeef
>1880	Callee	srand
>1881	Identifier	srand
>1882	CompoundStatement	 
>1883	ExpressionStatement	 
>1884	AssignmentExpr	toBeReturned = 1
>1885	PrimaryExpression	1
>1886	Identifier	toBeReturned
>1887	ExpressionStatement	 
>1888	ShiftExpression	std 
>1889	PrimaryExpression	\"usage
>1890	Identifier	std 
>1891	Condition	 
>1892	RelationalExpression	argc < 2
>1893	PrimaryExpression	2
>1894	Identifier	argc
>1895	ExpressionStatement	 
>1896	CallExpression	setbuf ( stderr , NULL )
>1897	ArgumentList	stderr
>1898	Argument	NULL
>1899	Identifier	NULL
>1900	Argument	stderr
>1901	Identifier	stderr
>1902	Callee	setbuf
>1903	Identifier	setbuf
>1904	ExpressionStatement	 
>1905	CallExpression	setbuf ( stdout , NULL )
>1906	ArgumentList	stdout
>1907	Argument	NULL
>1908	Identifier	NULL
>1909	Argument	stdout
>1910	Identifier	stdout
>1911	Callee	setbuf
>1912	Identifier	setbuf
>1913	IdentifierDeclStatement	 
>1914	IdentifierDecl	toBeReturned = 0
>1915	AssignmentExpr	toBeReturned = 0
>1916	PrimaryExpression	0
>1917	Identifier	toBeReturned
>1918	Identifier	toBeReturned
>1919	IdentifierDeclType	int
>1920	IdentifierDeclStatement	 
>1921	IdentifierDecl	dc_init
>1922	Identifier	dc_init
>1923	IdentifierDeclType	CnC 
<3=12,11,4
<4=8,5
<5=7,6
<8=10,9
<12=27,19,13
<13=14
<14=16,15
<16=18,17
<19=20
<20=24,21
<21=23,22
<24=26,25
<27=28
<28=35,34,29
<29=33,30
<30=32,31
<44=53,52,45
<45=49,46
<46=48,47
<49=51,50
<53=83,58,54
<54=55
<55=57,56
<58=75,71,68,59
<59=60
<60=61
<61=67,62
<62=66,63
<63=65,64
<68=70,69
<71=72
<72=74,73
<75=76
<76=77
<77=82,81,78
<78=80,79
<83=84
<84=88,85
<85=87,86
<95=107,106,96
<96=103,100,97
<97=99,98
<100=102,101
<103=105,104
<107=108
<108=128,124,121,109
<109=110
<110=111
<111=118,112
<112=114,113
<114=116,115
<116=117
<118=120,119
<121=123,122
<124=125
<125=127,126
<128=129
<129=130
<130=135,134,131
<131=133,132
<146=158,157,147
<147=154,151,148
<148=150,149
<151=153,152
<154=156,155
<158=386,369,360,353,346,207,205,187,178,161,159
<159=160
<161=162
<162=176,163
<163=170,164
<164=165
<165=169,166
<166=168,167
<170=171
<171=175,172
<172=174,173
<176=177
<178=179
<179=185,180
<180=181
<181=182
<182=184,183
<185=186
<187=203,188
<188=189
<189=190
<190=202,191
<191=201,192
<192=200,193
<193=199,194
<194=198,195
<195=197,196
<203=204
<205=206
<207=208
<208=327,318,297,279,251,233,226,209
<209=210
<210=224,211
<211=218,212
<212=213
<213=217,214
<214=216,215
<218=219
<219=223,220
<220=222,221
<224=225
<226=229,227
<227=228
<229=230
<230=232,231
<233=249,234
<234=235
<235=236
<236=248,237
<237=247,238
<238=246,239
<239=245,240
<240=244,241
<241=243,242
<249=250
<251=258,252
<252=253
<253=255,254
<255=257,256
<258=270,263,259
<259=260
<260=262,261
<263=266,264
<264=265
<266=267
<267=269,268
<270=271
<271=277,272
<272=273
<273=274
<274=276,275
<277=278
<279=295,280
<280=281
<281=282
<282=294,283
<283=293,284
<284=292,285
<285=291,286
<286=290,287
<287=289,288
<295=296
<297=304,298
<298=299
<299=301,300
<301=303,302
<304=314,305
<305=306
<306=312,307
<307=308
<308=309
<309=311,310
<312=313
<314=315
<315=317,316
<318=319
<319=325,320
<320=321
<321=322
<322=324,323
<325=326
<327=344,328
<328=338,329
<329=330
<330=336,331
<331=334,332
<332=333
<334=335
<336=337
<338=339
<339=343,340
<340=342,341
<344=345
<346=347
<347=352,351,348
<348=350,349
<353=354
<354=359,358,355
<355=357,356
<360=361
<361=368,367,362
<362=366,363
<363=365,364
<369=370
<370=384,371
<371=378,372
<372=373
<373=377,374
<374=376,375
<378=379
<379=383,380
<380=382,381
<384=385
<386=387
<387=394,393,388
<388=392,389
<389=391,390
<413=425,424,414
<414=421,418,415
<415=417,416
<418=420,419
<421=423,422
<425=426
<426=555,427
<427=428
<428=551,523,429
<429=430
<430=492,476,463,452,431
<431=432
<432=450,433
<433=442,436,434
<434=435
<436=437
<437=441,438
<438=440,439
<442=443
<443=449,444
<444=448,445
<445=447,446
<450=451
<452=453
<453=461,454
<454=459,457,455
<455=456
<457=458
<459=460
<461=462
<463=474,464
<464=465
<465=466
<466=472,467
<467=470,468
<468=469
<470=471
<472=473
<474=475
<476=477
<477=491,490,478
<478=489,479
<479=487,480
<480=485,483,481
<481=482
<483=484
<485=486
<487=488
<492=521,493
<493=503,494
<494=495
<495=501,496
<496=499,497
<497=498
<499=500
<501=502
<503=504
<504=520,505
<505=519,506
<506=518,507
<507=517,508
<508=516,509
<509=515,510
<510=514,511
<511=513,512
<521=522
<523=524
<524=543,525
<525=526
<526=527
<527=541,528
<528=535,529
<529=530
<530=534,531
<531=533,532
<535=536
<536=540,537
<537=539,538
<541=542
<543=544
<544=548,545
<545=547,546
<548=550,549
<551=552
<552=554,553
<555=556
<556=558,557
<571=573,572
<577=585,578
<578=582,579
<579=581,580
<582=584,583
<585=599,586
<586=587
<587=597,588
<588=595,593,589
<589=590
<590=592,591
<593=594
<595=596
<597=598
<599=600
<600=602,601
<609=615,614,610
<610=611
<611=613,612
<615=639,638,637,635,620,616
<616=617
<617=619,618
<620=621
<621=633,622
<622=631,627,623
<623=624
<624=626,625
<627=628
<628=630,629
<631=632
<633=634
<635=636
<648=653,649
<649=650
<650=652,651
<653=654
<654=655
<655=667,656
<656=665,661,657
<657=658
<658=660,659
<661=662
<662=664,663
<665=666
<667=668
<675=686,676
<676=683,680,677
<677=679,678
<680=682,681
<683=685,684
<686=766,759,750,731,725,716,687
<687=708,704,701,688
<688=689
<689=690
<690=696,691
<691=693,692
<693=695,694
<696=700,697
<697=699,698
<701=703,702
<704=705
<705=707,706
<708=709
<709=710
<710=715,714,711
<711=713,712
<716=717
<717=724,723,718
<718=722,719
<719=721,720
<725=726
<726=728,727
<728=730,729
<731=746,743,732
<732=733
<733=734
<734=740,735
<735=737,736
<737=739,738
<740=742,741
<743=745,744
<746=747
<747=749,748
<750=751
<751=758,757,752
<752=756,753
<753=755,754
<759=760
<760=765,764,761
<761=763,762
<766=767
<767=769,768
<793=804,794
<794=801,798,795
<795=797,796
<798=800,799
<801=803,802
<804=856,805
<805=852,838,806
<806=807
<807=834,816,808
<808=809
<809=810
<810=814,811
<811=812
<812=813
<814=815
<816=817
<817=818
<818=832,819
<819=828,824,820
<820=821
<821=823,822
<824=825
<825=827,826
<828=829
<829=831,830
<832=833
<834=835
<835=837,836
<838=839
<839=840
<840=850,841
<841=848,846,842
<842=843
<843=845,844
<846=847
<848=849
<850=851
<852=853
<853=855,854
<856=857
<857=863,858
<858=859
<859=860
<860=862,861
<863=864
<876=878,877
<878=883,882,881,879
<879=880
<887=890,889,888
<890=891
<891=892
<892=900,893
<893=898,896,894
<894=895
<896=897
<898=899
<900=901
<908=911,910,909
<911=918,914,912
<912=913
<914=915
<915=917,916
<918=919
<919=933,932,920
<920=931,921
<921=929,922
<922=927,925,923
<923=924
<925=926
<927=928
<929=930
<944=947,946,945
<947=1005,950,948
<948=949
<950=1001,951
<951=994,987,952
<952=979,973,970,953
<953=960,954
<954=955
<955=959,956
<956=958,957
<960=961
<961=969,962
<962=968,963
<963=965,964
<965=967,966
<970=972,971
<973=974
<974=976,975
<976=978,977
<979=980
<980=981
<981=986,985,982
<982=984,983
<987=988
<988=993,992,989
<989=991,990
<994=995
<995=1000,999,996
<996=998,997
<1001=1002
<1002=1004,1003
<1005=1006
<1006=1011,1010,1007
<1007=1009,1008
<1024=1030,1029,1025
<1025=1026
<1026=1028,1027
<1030=1031
<1031=1032
<1032=1034,1033
<1042=1045,1044,1043
<1045=1046
<1046=1047
<1052=1055,1054,1053
<1055=1056
<1056=1057
<1057=1063,1058
<1058=1061,1059
<1059=1060
<1061=1062
<1063=1064
<1071=1077,1076,1072
<1072=1073
<1073=1075,1074
<1077=1102,1090,1078
<1078=1079
<1079=1085,1080
<1080=1084,1081
<1081=1083,1082
<1085=1089,1086
<1086=1088,1087
<1090=1095,1091
<1091=1092
<1092=1094,1093
<1095=1096
<1096=1098,1097
<1098=1099
<1099=1101,1100
<1102=1103
<1103=1109,1104
<1104=1108,1105
<1105=1107,1106
<1125=1137,1136,1126
<1126=1133,1130,1127
<1127=1129,1128
<1130=1132,1131
<1133=1135,1134
<1137=1169,1165,1138
<1138=1157,1153,1150,1139
<1139=1140
<1140=1141
<1141=1147,1142
<1142=1146,1143
<1143=1145,1144
<1147=1149,1148
<1150=1152,1151
<1153=1154
<1154=1156,1155
<1157=1158
<1158=1159
<1159=1164,1163,1160
<1160=1162,1161
<1165=1166
<1166=1168,1167
<1169=1170
<1170=1174,1171
<1171=1173,1172
<1190=1199,1198,1191
<1191=1195,1192
<1192=1194,1193
<1195=1197,1196
<1199=1200
<1200=1201
<1201=1203,1202
<1203=1205,1204
<1211=1217,1216,1212
<1212=1213
<1213=1215,1214
<1217=1218
<1218=1219
<1219=1221,1220
<1221=1223,1222
<1233=1239,1238,1234
<1234=1235
<1235=1237,1236
<1239=1263,1240
<1240=1241
<1241=1259,1243,1242
<1243=1255,1254,1244
<1244=1249,1245
<1245=1247,1246
<1247=1248
<1249=1251,1250
<1251=1253,1252
<1255=1256
<1256=1258,1257
<1259=1260
<1260=1262,1261
<1263=1264
<1264=1272,1271,1265
<1265=1269,1266
<1266=1267
<1267=1268
<1269=1270
<1284=1290,1289,1285
<1285=1286
<1286=1288,1287
<1290=1291
<1291=1292
<1292=1304,1303,1293
<1293=1298,1294
<1294=1296,1295
<1296=1297
<1298=1300,1299
<1300=1302,1301
<1304=1305
<1305=1307,1306
<1329=1338,1337,1330
<1330=1334,1331
<1331=1333,1332
<1334=1336,1335
<1338=1535,1531,1518,1506,1341,1339
<1339=1340
<1341=1502,1481,1342
<1342=1343
<1343=1469,1449,1440,1426,1413,1402,1393,1379,1366,1355,1344
<1344=1345
<1345=1349,1346
<1346=1347
<1347=1348
<1349=1350
<1350=1352,1351
<1352=1354,1353
<1355=1356
<1356=1360,1357
<1357=1358
<1358=1359
<1360=1361
<1361=1363,1362
<1363=1365,1364
<1366=1367
<1367=1373,1368
<1368=1371,1369
<1369=1370
<1371=1372
<1373=1374
<1374=1376,1375
<1376=1378,1377
<1379=1380
<1380=1392,1391,1381
<1381=1390,1382
<1382=1388,1383
<1383=1386,1384
<1384=1385
<1386=1387
<1388=1389
<1393=1394
<1394=1401,1400,1395
<1395=1399,1396
<1396=1398,1397
<1402=1403
<1403=1407,1404
<1404=1405
<1405=1406
<1407=1408
<1408=1410,1409
<1410=1412,1411
<1413=1414
<1414=1420,1415
<1415=1418,1416
<1416=1417
<1418=1419
<1420=1421
<1421=1423,1422
<1423=1425,1424
<1426=1427
<1427=1439,1438,1428
<1428=1437,1429
<1429=1435,1430
<1430=1433,1431
<1431=1432
<1433=1434
<1435=1436
<1440=1441
<1441=1448,1447,1442
<1442=1446,1443
<1443=1445,1444
<1449=1450
<1450=1463,1451
<1451=1461,1452
<1452=1453
<1453=1457,1454
<1454=1455
<1455=1456
<1457=1458
<1458=1460,1459
<1461=1462
<1463=1464
<1464=1466,1465
<1466=1468,1467
<1469=1470
<1470=1480,1479,1471
<1471=1478,1472
<1472=1474,1473
<1474=1475
<1475=1477,1476
<1481=1495,1482
<1482=1483
<1483=1489,1484
<1484=1487,1485
<1485=1486
<1487=1488
<1489=1490
<1490=1492,1491
<1492=1494,1493
<1495=1496
<1496=1498,1497
<1498=1499
<1499=1501,1500
<1502=1503
<1503=1505,1504
<1506=1507
<1507=1517,1516,1508
<1508=1515,1509
<1509=1511,1510
<1511=1512
<1512=1514,1513
<1518=1519
<1519=1525,1520
<1520=1523,1521
<1521=1522
<1523=1524
<1525=1526
<1526=1528,1527
<1528=1530,1529
<1531=1532
<1532=1534,1533
<1535=1536
<1536=1540,1537
<1537=1538
<1538=1539
<1540=1541
<1567=1576,1575,1568
<1568=1572,1569
<1569=1571,1570
<1572=1574,1573
<1576=1666,1662,1642,1638,1618,1614,1601,1592,1579,1577
<1577=1578
<1579=1580
<1580=1586,1581
<1581=1584,1582
<1582=1583
<1584=1585
<1586=1587
<1587=1589,1588
<1589=1591,1590
<1592=1593
<1593=1600,1599,1594
<1594=1598,1595
<1595=1597,1596
<1601=1602
<1602=1608,1603
<1603=1606,1604
<1604=1605
<1606=1607
<1608=1609
<1609=1611,1610
<1611=1613,1612
<1614=1615
<1615=1617,1616
<1618=1619
<1619=1632,1620
<1620=1623,1621
<1621=1622
<1623=1624
<1624=1630,1625
<1625=1628,1626
<1626=1627
<1628=1629
<1630=1631
<1632=1633
<1633=1635,1634
<1635=1637,1636
<1638=1639
<1639=1641,1640
<1642=1643
<1643=1656,1644
<1644=1647,1645
<1645=1646
<1647=1648
<1648=1654,1649
<1649=1652,1650
<1650=1651
<1652=1653
<1654=1655
<1656=1657
<1657=1659,1658
<1659=1661,1660
<1662=1663
<1663=1665,1664
<1666=1667
<1667=1671,1668
<1668=1669
<1669=1670
<1671=1672
<1688=1697,1696,1689
<1689=1693,1690
<1690=1692,1691
<1693=1695,1694
<1697=1920,1913,1904,1895,1700,1698
<1698=1699
<1700=1891,1882,1701
<1701=1702
<1702=1875,1861,1839,1827,1817,1813,1795,1784,1777,1773,1760,1750,1731,1719,1703
<1703=1704
<1704=1717,1705
<1705=1715,1706
<1706=1707
<1707=1709,1708
<1709=1710
<1710=1712,1711
<1712=1714,1713
<1715=1716
<1717=1718
<1719=1720
<1720=1729,1721
<1721=1722
<1722=1723
<1723=1725,1724
<1725=1726
<1726=1728,1727
<1729=1730
<1731=1732
<1732=1748,1733
<1733=1734
<1734=1735
<1735=1742,1736
<1736=1738,1737
<1738=1739
<1739=1741,1740
<1742=1744,1743
<1744=1745
<1745=1747,1746
<1748=1749
<1750=1751
<1751=1759,1758,1752
<1752=1757,1753
<1753=1755,1754
<1755=1756
<1760=1761
<1761=1767,1762
<1762=1765,1763
<1763=1764
<1765=1766
<1767=1768
<1768=1770,1769
<1770=1772,1771
<1773=1774
<1774=1776,1775
<1777=1778
<1778=1780,1779
<1780=1781
<1781=1783,1782
<1784=1785
<1785=1789,1786
<1786=1787
<1787=1788
<1789=1790
<1790=1792,1791
<1792=1794,1793
<1795=1796
<1796=1807,1797
<1797=1800,1798
<1798=1799
<1800=1801
<1801=1805,1802
<1802=1803
<1803=1804
<1805=1806
<1807=1808
<1808=1810,1809
<1810=1812,1811
<1813=1814
<1814=1816,1815
<1817=1818
<1818=1826,1825,1819
<1819=1824,1820
<1820=1822,1821
<1822=1823
<1827=1828
<1828=1838,1837,1829
<1829=1831,1830
<1831=1835,1832
<1832=1833
<1833=1834
<1835=1836
<1839=1840
<1840=1860,1859,1841
<1841=1858,1842
<1842=1855,1843
<1843=1854,1844
<1844=1852,1845
<1845=1850,1846
<1846=1847
<1847=1849,1848
<1850=1851
<1852=1853
<1855=1857,1856
<1861=1862
<1862=1874,1873,1863
<1863=1872,1864
<1864=1870,1865
<1865=1866
<1866=1867
<1867=1869,1868
<1870=1871
<1875=1876
<1876=1880,1877
<1877=1878
<1878=1879
<1880=1881
<1882=1887,1883
<1883=1884
<1884=1886,1885
<1887=1888
<1888=1890,1889
<1891=1892
<1892=1894,1893
<1895=1896
<1896=1902,1897
<1897=1900,1898
<1898=1899
<1900=1901
<1902=1903
<1904=1905
<1905=1911,1906
<1906=1909,1907
<1907=1908
<1909=1910
<1911=1912
<1913=1914
<1914=1919,1918,1915
<1915=1917,1916
<1920=1921
<1921=1923,1922
