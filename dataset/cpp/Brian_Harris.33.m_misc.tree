>3	FunctionDef	M_DrawText (int x , int y , qboolean direct , char * string)
>4	ParameterList	int x , int y , qboolean direct , char * string
>5	Parameter	 
>6	Identifier	string
>7	ParameterType	char *
>8	Parameter	 
>9	Identifier	direct
>10	ParameterType	qboolean
>11	Parameter	 
>12	Identifier	y
>13	ParameterType	int
>14	Parameter	 
>15	Identifier	x
>16	ParameterType	int
>17	ReturnType	int
>18	CompoundStatement	 
>19	ReturnStatement	 
>20	Identifier	x
>21	WhileStatement	while ( * string )
>22	CompoundStatement	 
>23	ExpressionStatement	 
>24	AssignmentExpr	x += w
>25	Identifier	w
>26	Identifier	x
>27	ExpressionStatement	 
>28	Statement	 
>29	Statement	 
>30	Statement	 
>31	Statement	 
>32	Statement	 
>33	Statement	 
>34	Statement	 
>35	Statement	 
>36	Statement	 
>37	Statement	 
>38	Statement	 
>39	Statement	 
>40	Statement	 
>41	Statement	 
>42	Statement	 
>43	ExpressionStatement	 
>44	Statement	 
>45	Statement	 
>46	Statement	 
>47	Statement	 
>48	Statement	 
>49	Statement	 
>50	Statement	 
>51	Statement	 
>52	Statement	 
>53	Statement	 
>54	Statement	 
>55	Statement	 
>56	Statement	 
>57	Statement	 
>58	Statement	 
>59	IfStatement	if ( direct )
>60	ElseStatement	else
>61	Statement	 
>62	Statement	 
>63	Condition	 
>64	Identifier	direct
>65	IfStatement	if ( x + w > SCREENWIDTH )
>66	BreakStatement	 
>67	Condition	 
>68	RelationalExpression	x + w > SCREENWIDTH
>69	Identifier	SCREENWIDTH
>70	AdditiveExpression	x + w
>71	Identifier	w
>72	Identifier	x
>73	ExpressionStatement	 
>74	Statement	 
>75	Statement	 
>76	Statement	 
>77	Statement	 
>78	Statement	 
>79	Statement	 
>80	Statement	 
>81	Statement	 
>82	Statement	 
>83	Statement	 
>84	Statement	 
>85	Statement	 
>86	Statement	 
>87	Statement	 
>88	IfStatement	if ( c < 0 || c > HU_FONTSIZE )
>89	CompoundStatement	 
>90	ContinueStatement	 
>91	ExpressionStatement	 
>92	AssignmentExpr	x += 4
>93	PrimaryExpression	4
>94	Identifier	x
>95	Condition	 
>96	OrExpression	c < 0 || c > HU_FONTSIZE
>97	RelationalExpression	c > HU_FONTSIZE
>98	Identifier	HU_FONTSIZE
>99	Identifier	c
>100	RelationalExpression	c < 0
>101	PrimaryExpression	0
>102	Identifier	c
>103	ExpressionStatement	 
>104	IncDecOp	string ++
>105	IncDec	++
>106	Identifier	string
>107	ExpressionStatement	 
>108	AssignmentExpr	c = toupper ( * string ) - HU_FONTSTART
>109	AdditiveExpression	toupper ( * string ) - HU_FONTSTART
>110	Identifier	HU_FONTSTART
>111	CallExpression	toupper ( * string )
>112	ArgumentList	* string
>113	Argument	* string
>114	UnaryOp	* string
>115	Identifier	string
>116	UnaryOperator	*
>117	Callee	toupper
>118	Identifier	toupper
>119	Identifier	c
>120	Condition	 
>121	UnaryOp	* string
>122	Identifier	string
>123	UnaryOperator	*
>124	IdentifierDeclStatement	 
>125	IdentifierDecl	w
>126	Identifier	w
>127	IdentifierDeclType	int
>128	IdentifierDeclStatement	 
>129	IdentifierDecl	c
>130	Identifier	c
>131	IdentifierDeclType	int
>146	FunctionDef	M_WriteFile (char const * name , void * source , int length)
>147	ParameterList	char const * name , void * source , int length
>148	Parameter	 
>149	Identifier	length
>150	ParameterType	int
>151	Parameter	 
>152	Identifier	source
>153	ParameterType	void *
>154	Parameter	 
>155	Identifier	name
>156	ParameterType	char const *
>157	ReturnType	boolean
>158	CompoundStatement	 
>159	ReturnStatement	 
>160	Identifier	true
>161	IfStatement	if ( count < length )
>162	ReturnStatement	 
>163	Identifier	false
>164	Condition	 
>165	RelationalExpression	count < length
>166	Identifier	length
>167	Identifier	count
>168	ExpressionStatement	 
>169	CallExpression	fileSystem -> CloseFile ( handle )
>170	ArgumentList	handle
>171	Argument	handle
>172	Identifier	handle
>173	Callee	fileSystem -> CloseFile
>174	PtrMemberAccess	fileSystem -> CloseFile
>175	Identifier	CloseFile
>176	Identifier	fileSystem
>177	ExpressionStatement	 
>178	AssignmentExpr	count = handle -> Write ( source , length )
>179	CallExpression	handle -> Write ( source , length )
>180	ArgumentList	source
>181	Argument	length
>182	Identifier	length
>183	Argument	source
>184	Identifier	source
>185	Callee	handle -> Write
>186	PtrMemberAccess	handle -> Write
>187	Identifier	Write
>188	Identifier	handle
>189	Identifier	count
>190	IfStatement	if ( handle == NULL )
>191	ReturnStatement	 
>192	Identifier	false
>193	Condition	 
>194	EqualityExpression	handle == NULL
>195	Identifier	NULL
>196	Identifier	handle
>197	ExpressionStatement	 
>198	AssignmentExpr	handle = fileSystem -> OpenFileWrite ( name , \"fs_savepath\" )
>199	CallExpression	fileSystem -> OpenFileWrite ( name , \"fs_savepath\" )
>200	ArgumentList	name
>201	Argument	\"fs_savepath\"
>202	PrimaryExpression	\"fs_savepath\"
>203	Argument	name
>204	Identifier	name
>205	Callee	fileSystem -> OpenFileWrite
>206	PtrMemberAccess	fileSystem -> OpenFileWrite
>207	Identifier	OpenFileWrite
>208	Identifier	fileSystem
>209	Identifier	handle
>210	IdentifierDeclStatement	 
>211	IdentifierDecl	count
>212	Identifier	count
>213	IdentifierDeclType	int
>214	IdentifierDeclStatement	 
>215	IdentifierDecl	* handle = NULL
>216	AssignmentExpr	* handle = NULL
>217	Identifier	NULL
>218	Identifier	NULL
>219	Identifier	handle
>220	IdentifierDeclType	idFile *
>237	FunctionDef	M_ReadFile (char const * name , byte * * buffer)
>238	ParameterList	char const * name , byte * * buffer
>239	Parameter	 
>240	Identifier	buffer
>241	ParameterType	byte * *
>242	Parameter	 
>243	Identifier	name
>244	ParameterType	char const *
>245	ReturnType	int
>246	CompoundStatement	 
>247	ReturnStatement	 
>248	Identifier	length
>249	ExpressionStatement	 
>250	AssignmentExpr	* buffer = buf
>251	Identifier	buf
>252	UnaryOp	* buffer
>253	Identifier	buffer
>254	UnaryOperator	*
>255	ExpressionStatement	 
>256	CallExpression	fileSystem -> CloseFile ( handle )
>257	ArgumentList	handle
>258	Argument	handle
>259	Identifier	handle
>260	Callee	fileSystem -> CloseFile
>261	PtrMemberAccess	fileSystem -> CloseFile
>262	Identifier	CloseFile
>263	Identifier	fileSystem
>264	IfStatement	if ( count < length )
>265	CompoundStatement	 
>266	ExpressionStatement	 
>267	CallExpression	I_Error ( \"Couldn't read file %s\" , name )
>268	ArgumentList	\"Couldn't read file %s\"
>269	Argument	name
>270	Identifier	name
>271	Argument	\"Couldn't read file %s\"
>272	PrimaryExpression	\"Couldn't read file %s\"
>273	Callee	I_Error
>274	Identifier	I_Error
>275	Condition	 
>276	RelationalExpression	count < length
>277	Identifier	length
>278	Identifier	count
>279	ExpressionStatement	 
>280	AssignmentExpr	count = handle -> Read ( buf , length )
>281	CallExpression	handle -> Read ( buf , length )
>282	ArgumentList	buf
>283	Argument	length
>284	Identifier	length
>285	Argument	buf
>286	Identifier	buf
>287	Callee	handle -> Read
>288	PtrMemberAccess	handle -> Read
>289	Identifier	Read
>290	Identifier	handle
>291	Identifier	count
>292	ExpressionStatement	 
>293	AssignmentExpr	buf = ( byte * ) Z_Malloc ( handle -> Length ( ) , PU_STATIC , NULL )
>294	CastExpression	( byte * ) Z_Malloc ( handle -> Length ( ) , PU_STATIC , NULL )
>295	CallExpression	Z_Malloc ( handle -> Length ( ) , PU_STATIC , NULL )
>296	ArgumentList	handle -> Length ( )
>297	Argument	NULL
>298	Identifier	NULL
>299	Argument	PU_STATIC
>300	Identifier	PU_STATIC
>301	Argument	handle -> Length ( )
>302	CallExpression	handle -> Length ( )
>303	ArgumentList	 
>304	Callee	handle -> Length
>305	PtrMemberAccess	handle -> Length
>306	Identifier	Length
>307	Identifier	handle
>308	Callee	Z_Malloc
>309	Identifier	Z_Malloc
>310	CastTarget	byte *
>311	Identifier	buf
>312	ExpressionStatement	 
>313	AssignmentExpr	length = handle -> Length ( )
>314	CallExpression	handle -> Length ( )
>315	ArgumentList	 
>316	Callee	handle -> Length
>317	PtrMemberAccess	handle -> Length
>318	Identifier	Length
>319	Identifier	handle
>320	Identifier	length
>321	IfStatement	if ( handle == NULL )
>322	CompoundStatement	 
>323	ExpressionStatement	 
>324	CallExpression	I_Error ( \"Couldn't read file %s\" , name )
>325	ArgumentList	\"Couldn't read file %s\"
>326	Argument	name
>327	Identifier	name
>328	Argument	\"Couldn't read file %s\"
>329	PrimaryExpression	\"Couldn't read file %s\"
>330	Callee	I_Error
>331	Identifier	I_Error
>332	Condition	 
>333	EqualityExpression	handle == NULL
>334	Identifier	NULL
>335	Identifier	handle
>336	ExpressionStatement	 
>337	AssignmentExpr	handle = fileSystem -> OpenFileRead ( name , false )
>338	CallExpression	fileSystem -> OpenFileRead ( name , false )
>339	ArgumentList	name
>340	Argument	false
>341	Identifier	false
>342	Argument	name
>343	Identifier	name
>344	Callee	fileSystem -> OpenFileRead
>345	PtrMemberAccess	fileSystem -> OpenFileRead
>346	Identifier	OpenFileRead
>347	Identifier	fileSystem
>348	Identifier	handle
>349	IdentifierDeclStatement	 
>350	IdentifierDecl	* buf
>351	Identifier	buf
>352	IdentifierDeclType	byte *
>353	IdentifierDeclStatement	 
>354	IdentifierDecl	* handle = NULL
>355	AssignmentExpr	* handle = NULL
>356	Identifier	NULL
>357	Identifier	NULL
>358	Identifier	handle
>359	IdentifierDeclType	idFile *
>360	IdentifierDeclStatement	 
>361	IdentifierDecl	length
>362	Identifier	length
>363	IdentifierDeclType	int
>364	IdentifierDecl	count
>365	Identifier	count
>366	IdentifierDeclType	int
>387	FunctionDef	SaveGame (void * source , DWORD length)
>388	ParameterList	void * source , DWORD length
>389	Parameter	 
>390	Identifier	length
>391	ParameterType	DWORD
>392	Parameter	 
>393	Identifier	source
>394	ParameterType	void *
>395	ReturnType	static qboolean
>396	CompoundStatement	 
>397	ReturnStatement	 
>398	Identifier	false
>405	FunctionDef	M_WriteSaveGame (void * source , int length)
>406	ParameterList	void * source , int length
>407	Parameter	 
>408	Identifier	length
>409	ParameterType	int
>410	Parameter	 
>411	Identifier	source
>412	ParameterType	void *
>413	ReturnType	qboolean
>414	CompoundStatement	 
>415	ReturnStatement	 
>416	CallExpression	SaveGame ( source , length )
>417	ArgumentList	source
>418	Argument	length
>419	Identifier	length
>420	Argument	source
>421	Identifier	source
>422	Callee	SaveGame
>423	Identifier	SaveGame
>430	FunctionDef	M_ReadSaveGame (byte * * buffer)
>431	ParameterList	byte * * buffer
>432	Parameter	 
>433	Identifier	buffer
>434	ParameterType	byte * *
>435	ReturnType	int
>436	CompoundStatement	 
>437	ReturnStatement	 
>438	PrimaryExpression	0
>443	FunctionDef	M_SaveDefaults ()
>444	ParameterList	 
>445	ReturnType	void
>446	CompoundStatement	 
>450	FunctionDef	M_LoadDefaults ()
>451	ParameterList	 
>452	ReturnType	void
>453	CompoundStatement	 
>454	CompoundStatement	 
>455	ExpressionStatement	 
>456	Statement	 
>457	Statement	 
>458	Statement	 
>459	Statement	 
>460	Statement	 
>461	Statement	 
>462	Statement	 
>463	Statement	 
>464	Statement	 
>465	ExpressionStatement	 
>466	ArrayIndexing	g -> myargv [ i + 1 ]
>467	AdditiveExpression	i + 1
>468	PrimaryExpression	1
>469	Identifier	i
>470	PtrMemberAccess	g -> myargv
>471	Identifier	myargv
>472	Identifier	g
>473	Statement	 
>474	Statement	 
>475	Statement	 
>476	Statement	 
>477	Statement	 
>478	Statement	 
>479	Statement	 
>480	Statement	 
>481	Statement	 
>482	Statement	 
>483	Statement	 
>484	Statement	 
>485	Statement	 
>486	Statement	 
>487	Statement	 
>488	Statement	 
>489	Statement	 
>490	Statement	 
>491	Statement	 
>492	ExpressionStatement	 
>493	AssignmentExpr	i = M_CheckParm ( \"-config\" )
>494	CallExpression	M_CheckParm ( \"-config\" )
>495	ArgumentList	\"-config\"
>496	Argument	\"-config\"
>497	PrimaryExpression	\"-config\"
>498	Callee	M_CheckParm
>499	Identifier	M_CheckParm
>500	Identifier	i
>501	ExpressionStatement	 
>502	MemberAccess	g -> defaults [ i ] . defaultvalue
>503	Identifier	defaultvalue
>504	ArrayIndexing	g -> defaults [ i ]
>505	Identifier	i
>506	PtrMemberAccess	g -> defaults
>507	Identifier	defaults
>508	Identifier	g
>509	Statement	 
>510	Statement	 
>511	Statement	 
>512	Statement	 
>513	Statement	 
>514	Statement	 
>515	Statement	 
>516	Statement	 
>517	Statement	 
>518	Statement	 
>519	Statement	 
>520	Statement	 
>521	Statement	 
>522	Statement	 
>523	Statement	 
>524	ExpressionStatement	 
>525	PtrMemberAccess	g -> numdefaults
>526	Identifier	numdefaults
>527	Identifier	g
>528	Statement	 
>529	Statement	 
>530	Statement	 
>531	ExpressionStatement	 
>532	AssignmentExpr	i = 0
>533	PrimaryExpression	0
>534	Identifier	i
>535	Statement	 
>536	Statement	 
>537	ExpressionStatement	 
>538	Statement	 
>539	Statement	 
>540	Statement	 
>541	Statement	 
>542	Statement	 
>543	Statement	 
>544	Statement	 
>545	Statement	 
>546	Statement	 
>547	Statement	 
>548	Statement	 
>549	Statement	 
>550	Statement	 
>551	Statement	 
>552	Statement	 
>553	Statement	 
>554	Statement	 
>555	Statement	 
>556	Statement	 
>557	Statement	 
>558	Statement	 
>559	Statement	 
>560	Statement	 
>561	IdentifierDeclStatement	 
>562	IdentifierDecl	i
>563	Identifier	i
>564	IdentifierDeclType	int
>577	FunctionDef	WritePCXfile (char * filename , byte * data , int width , int height , byte * palette)
>578	ParameterList	char * filename , byte * data , int width , int height , byte * palette
>579	Parameter	 
>580	Identifier	palette
>581	ParameterType	byte *
>582	Parameter	 
>583	Identifier	height
>584	ParameterType	int
>585	Parameter	 
>586	Identifier	width
>587	ParameterType	int
>588	Parameter	 
>589	Identifier	data
>590	ParameterType	byte *
>591	Parameter	 
>592	Identifier	filename
>593	ParameterType	char *
>594	ReturnType	void
>595	CompoundStatement	 
>596	ExpressionStatement	 
>597	CallExpression	I_Error ( \"depreciated\" )
>598	ArgumentList	\"depreciated\"
>599	Argument	\"depreciated\"
>600	PrimaryExpression	\"depreciated\"
>601	Callee	I_Error
>602	Identifier	I_Error
>611	FunctionDef	M_ScreenShot ()
>612	ParameterList	 
>613	ReturnType	void
>614	CompoundStatement	 
<3=18,17,4
<4=14,11,8,5
<5=7,6
<8=10,9
<11=13,12
<14=16,15
<18=128,124,21,19
<19=20
<21=120,22
<22=107,103,88,23,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,65,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87
<23=24
<24=26,25
<59=63,62,60
<60=61
<63=64
<65=67,66
<67=68
<68=70,69
<70=72,71
<88=95,89
<89=91,90
<91=92
<92=94,93
<95=96
<96=100,97
<97=99,98
<100=102,101
<103=104
<104=106,105
<107=108
<108=119,109
<109=111,110
<111=117,112
<112=113
<113=114
<114=116,115
<117=118
<120=121
<121=123,122
<124=125
<125=127,126
<128=129
<129=131,130
<146=158,157,147
<147=154,151,148
<148=150,149
<151=153,152
<154=156,155
<158=214,210,197,190,177,168,161,159
<159=160
<161=164,162
<162=163
<164=165
<165=167,166
<168=169
<169=173,170
<170=171
<171=172
<173=174
<174=176,175
<177=178
<178=189,179
<179=185,180
<180=183,181
<181=182
<183=184
<185=186
<186=188,187
<190=193,191
<191=192
<193=194
<194=196,195
<197=198
<198=209,199
<199=205,200
<200=203,201
<201=202
<203=204
<205=206
<206=208,207
<210=211
<211=213,212
<214=215
<215=220,219,216
<216=218,217
<237=246,245,238
<238=242,239
<239=241,240
<242=244,243
<246=360,353,349,336,321,312,292,279,264,255,249,247
<247=248
<249=250
<250=252,251
<252=254,253
<255=256
<256=260,257
<257=258
<258=259
<260=261
<261=263,262
<264=275,265
<265=266
<266=267
<267=273,268
<268=271,269
<269=270
<271=272
<273=274
<275=276
<276=278,277
<279=280
<280=291,281
<281=287,282
<282=285,283
<283=284
<285=286
<287=288
<288=290,289
<292=293
<293=311,294
<294=310,295
<295=308,296
<296=301,299,297
<297=298
<299=300
<301=302
<302=304,303
<304=305
<305=307,306
<308=309
<312=313
<313=320,314
<314=316,315
<316=317
<317=319,318
<321=332,322
<322=323
<323=324
<324=330,325
<325=328,326
<326=327
<328=329
<330=331
<332=333
<333=335,334
<336=337
<337=348,338
<338=344,339
<339=342,340
<340=341
<342=343
<344=345
<345=347,346
<349=350
<350=352,351
<353=354
<354=359,358,355
<355=357,356
<360=364,361
<361=363,362
<364=366,365
<387=396,395,388
<388=392,389
<389=391,390
<392=394,393
<396=397
<397=398
<405=414,413,406
<406=410,407
<407=409,408
<410=412,411
<414=415
<415=416
<416=422,417
<417=420,418
<418=419
<420=421
<422=423
<430=436,435,431
<431=432
<432=434,433
<436=437
<437=438
<443=446,445,444
<450=453,452,451
<453=561,560,559,558,557,556,555,554,553,552,551,550,549,454,479,480,481,482,483,484,485,486,487,488,489,490,491,492,501,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,528,529,530,531,535,536,537,538,539,540,541,542,543,544,545,546,547,548
<454=478,477,476,475,474,473,465,464,463,462,461,460,459,458,457,456,455
<465=466
<466=470,467
<467=469,468
<470=472,471
<492=493
<493=500,494
<494=498,495
<495=496
<496=497
<498=499
<501=502
<502=504,503
<504=506,505
<506=508,507
<524=525
<525=527,526
<531=532
<532=534,533
<561=562
<562=564,563
<577=595,594,578
<578=591,588,585,582,579
<579=581,580
<582=584,583
<585=587,586
<588=590,589
<591=593,592
<595=596
<596=597
<597=601,598
<598=599
<599=600
<601=602
<611=614,613,612
