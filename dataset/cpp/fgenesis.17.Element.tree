>3	FunctionDef	ElementEffectData 
>4	ParameterList	 
>5	CompoundStatement	 
>9	FunctionDef	Element 
>10	ParameterList	 
>11	CompoundStatement	 
>12	ExpressionStatement	 
>13	CallExpression	setStatic ( true )
>14	ArgumentList	true
>15	Argument	true
>16	Identifier	true
>17	Callee	setStatic
>18	Identifier	setStatic
>19	ExpressionStatement	 
>20	AssignmentExpr	eff = NULL
>21	Identifier	NULL
>22	Identifier	eff
>23	ExpressionStatement	 
>24	AssignmentExpr	templateIdx = - 1
>25	UnaryOp	- 1
>26	PrimaryExpression	1
>27	UnaryOperator	-
>28	Identifier	templateIdx
>29	ExpressionStatement	 
>30	AssignmentExpr	bgLayer = 0
>31	PrimaryExpression	0
>32	Identifier	bgLayer
>33	ExpressionStatement	 
>34	AssignmentExpr	elementActive = true
>35	Identifier	true
>36	Identifier	elementActive
>37	ExpressionStatement	 
>38	AssignmentExpr	elementFlag = EF_NONE
>39	Identifier	EF_NONE
>40	Identifier	elementFlag
>52	FunctionDef	Element 
>53	ParameterList	 
>54	ReturnType	void
>55	CompoundStatement	 
>56	ExpressionStatement	 
>57	Identifier	ElementEffectData
>58	Statement	 
>59	Statement	 
>60	IfStatement	if ( ! eff )
>61	Statement	 
>62	Condition	 
>63	UnaryOp	! eff
>64	Identifier	eff
>65	UnaryOperator	!
>70	FunctionDef	Element 
>71	ParameterList	 
>72	ReturnType	void
>73	CompoundStatement	 
>74	IfStatement	if ( eff )
>75	CompoundStatement	 
>76	ExpressionStatement	 
>77	AssignmentExpr	eff = NULL
>78	Identifier	NULL
>79	Identifier	eff
>80	ExpressionStatement	 
>81	Identifier	eff
>82	Statement	 
>83	Condition	 
>84	Identifier	eff
>90	FunctionDef	Element 
>91	ParameterList	Entity * ent , float mult , float touchWidth
>92	Parameter	 
>93	Identifier	touchWidth
>94	ParameterType	float
>95	Parameter	 
>96	Identifier	mult
>97	ParameterType	float
>98	Parameter	 
>99	Identifier	ent
>100	ParameterType	Entity *
>101	ReturnType	void
>102	CompoundStatement	 
>103	IfStatement	if ( p . x > position . x - touchWidth && p . x < position . x + touchWidth )
>104	CompoundStatement	 
>105	IfStatement	if ( p . y < position . y + h2 && p . y > position . y - h2 )
>106	CompoundStatement	 
>107	ExpressionStatement	 
>108	AssignmentExpr	eff -> effectMult = mult
>109	Identifier	mult
>110	PtrMemberAccess	eff -> effectMult
>111	Identifier	effectMult
>112	Identifier	eff
>113	ExpressionStatement	 
>114	AssignmentExpr	eff -> touchVel = ent -> vel
>115	PtrMemberAccess	ent -> vel
>116	Identifier	vel
>117	Identifier	ent
>118	PtrMemberAccess	eff -> touchVel
>119	Identifier	touchVel
>120	Identifier	eff
>121	ExpressionStatement	 
>122	AssignmentExpr	eff -> hitPerc = hitPerc
>123	Identifier	hitPerc
>124	PtrMemberAccess	eff -> hitPerc
>125	Identifier	hitPerc
>126	Identifier	eff
>127	ExpressionStatement	 
>128	AssignmentExpr	hitPerc = ( 1.0f - hitPerc ) - 1.0f
>129	AdditiveExpression	( 1.0f - hitPerc ) - 1.0f
>130	PrimaryExpression	1.0f
>131	AdditiveExpression	1.0f - hitPerc
>132	Identifier	hitPerc
>133	PrimaryExpression	1.0f
>134	Identifier	hitPerc
>135	ExpressionStatement	 
>136	AssignmentExpr	hitPerc /= float ( height * scale . y )
>137	CallExpression	float ( height * scale . y )
>138	ArgumentList	height * scale . y
>139	Argument	height * scale . y
>140	MultiplicativeExpression	height * scale . y
>141	MemberAccess	scale . y
>142	Identifier	y
>143	Identifier	scale
>144	Identifier	height
>145	Callee	float
>146	Identifier	float
>147	Identifier	hitPerc
>148	ExpressionStatement	 
>149	AssignmentExpr	hitPerc = pos . y - p . y
>150	AdditiveExpression	pos . y - p . y
>151	MemberAccess	p . y
>152	Identifier	y
>153	Identifier	p
>154	MemberAccess	pos . y
>155	Identifier	y
>156	Identifier	pos
>157	Identifier	hitPerc
>158	ExpressionStatement	 
>159	AssignmentExpr	eff -> wavyWaving = true
>160	Identifier	true
>161	PtrMemberAccess	eff -> wavyWaving
>162	Identifier	wavyWaving
>163	Identifier	eff
>164	ExpressionStatement	 
>165	AssignmentExpr	eff -> touching = true
>166	Identifier	true
>167	PtrMemberAccess	eff -> touching
>168	Identifier	touching
>169	Identifier	eff
>170	Condition	 
>171	AndExpression	p . y < position . y + h2 && p . y > position . y - h2
>172	RelationalExpression	p . y > position . y - h2
>173	AdditiveExpression	position . y - h2
>174	Identifier	h2
>175	MemberAccess	position . y
>176	Identifier	y
>177	Identifier	position
>178	MemberAccess	p . y
>179	Identifier	y
>180	Identifier	p
>181	RelationalExpression	p . y < position . y + h2
>182	AdditiveExpression	position . y + h2
>183	Identifier	h2
>184	MemberAccess	position . y
>185	Identifier	y
>186	Identifier	position
>187	MemberAccess	p . y
>188	Identifier	y
>189	Identifier	p
>190	IdentifierDeclStatement	 
>191	IdentifierDecl	h2 = ( height * scale . y ) / 2.0f
>192	AssignmentExpr	h2 = ( height * scale . y ) / 2.0f
>193	MultiplicativeExpression	( height * scale . y ) / 2.0f
>194	PrimaryExpression	2.0f
>195	MultiplicativeExpression	height * scale . y
>196	MemberAccess	scale . y
>197	Identifier	y
>198	Identifier	scale
>199	Identifier	height
>200	Identifier	h2
>201	Identifier	h2
>202	IdentifierDeclType	float
>203	Condition	 
>204	AndExpression	p . x > position . x - touchWidth && p . x < position . x + touchWidth
>205	RelationalExpression	p . x < position . x + touchWidth
>206	AdditiveExpression	position . x + touchWidth
>207	Identifier	touchWidth
>208	MemberAccess	position . x
>209	Identifier	x
>210	Identifier	position
>211	MemberAccess	p . x
>212	Identifier	x
>213	Identifier	p
>214	RelationalExpression	p . x > position . x - touchWidth
>215	AdditiveExpression	position . x - touchWidth
>216	Identifier	touchWidth
>217	MemberAccess	position . x
>218	Identifier	x
>219	Identifier	position
>220	MemberAccess	p . x
>221	Identifier	x
>222	Identifier	p
>223	IdentifierDeclStatement	 
>224	IdentifierDecl	p = ent -> position
>225	AssignmentExpr	p = ent -> position
>226	PtrMemberAccess	ent -> position
>227	Identifier	position
>228	Identifier	ent
>229	Identifier	p
>230	Identifier	p
>231	IdentifierDeclType	Vector
>232	IdentifierDeclStatement	 
>233	IdentifierDecl	hitPerc = 0
>234	AssignmentExpr	hitPerc = 0
>235	PrimaryExpression	0
>236	Identifier	hitPerc
>237	Identifier	hitPerc
>238	IdentifierDeclType	float
>239	ExpressionStatement	 
>240	AssignmentExpr	pos . y -= ( height * scale . y ) / 2
>241	MultiplicativeExpression	( height * scale . y ) / 2
>242	PrimaryExpression	2
>243	MultiplicativeExpression	height * scale . y
>244	MemberAccess	scale . y
>245	Identifier	y
>246	Identifier	scale
>247	Identifier	height
>248	MemberAccess	pos . y
>249	Identifier	y
>250	Identifier	pos
>251	IdentifierDeclStatement	 
>252	IdentifierDecl	pos = position
>253	AssignmentExpr	pos = position
>254	Identifier	position
>255	Identifier	position
>256	Identifier	pos
>257	IdentifierDeclType	Vector
>258	IdentifierDeclStatement	 
>259	IdentifierDecl	* eff = this -> eff
>260	AssignmentExpr	* eff = this -> eff
>261	PtrMemberAccess	this -> eff
>262	Identifier	eff
>263	Identifier	this
>264	Identifier	eff
>265	Identifier	eff
>266	IdentifierDeclType	ElementEffectData *
>301	FunctionDef	Element 
>302	ParameterList	float dt
>303	Parameter	 
>304	Identifier	dt
>305	ParameterType	float
>306	ReturnType	void
>307	CompoundStatement	 
>308	SwitchStatement	switch ( eff -> elementEffectType )
>309	CompoundStatement	 
>310	BreakStatement	 
>311	CompoundStatement	 
>312	CompoundStatement	 
>313	IfStatement	if ( eff -> wavyWaving )
>314	ElseStatement	else
>315	CompoundStatement	 
>316	ExpressionStatement	 
>317	CallExpression	setGridFromWavy ( )
>318	ArgumentList	 
>319	Callee	setGridFromWavy
>320	Identifier	setGridFromWavy
>321	CompoundStatement	 
>322	ExpressionStatement	 
>323	CallExpression	setGridFromWavy ( )
>324	ArgumentList	 
>325	Callee	setGridFromWavy
>326	Identifier	setGridFromWavy
>327	IfStatement	if ( eff -> wavyMagnitude > 0 )
>328	ElseStatement	else
>329	CompoundStatement	 
>330	IfStatement	if ( eff -> wavyMagnitude > 0 )
>331	ExpressionStatement	 
>332	AssignmentExpr	eff -> wavyMagnitude = 0
>333	PrimaryExpression	0
>334	PtrMemberAccess	eff -> wavyMagnitude
>335	Identifier	wavyMagnitude
>336	Identifier	eff
>337	Condition	 
>338	RelationalExpression	eff -> wavyMagnitude > 0
>339	PrimaryExpression	0
>340	PtrMemberAccess	eff -> wavyMagnitude
>341	Identifier	wavyMagnitude
>342	Identifier	eff
>343	ExpressionStatement	 
>344	AssignmentExpr	eff -> wavyMagnitude += magRedSpd * dt
>345	MultiplicativeExpression	magRedSpd * dt
>346	Identifier	dt
>347	Identifier	magRedSpd
>348	PtrMemberAccess	eff -> wavyMagnitude
>349	Identifier	wavyMagnitude
>350	Identifier	eff
>351	CompoundStatement	 
>352	IfStatement	if ( eff -> wavyMagnitude < 0 )
>353	ExpressionStatement	 
>354	AssignmentExpr	eff -> wavyMagnitude = 0
>355	PrimaryExpression	0
>356	PtrMemberAccess	eff -> wavyMagnitude
>357	Identifier	wavyMagnitude
>358	Identifier	eff
>359	Condition	 
>360	RelationalExpression	eff -> wavyMagnitude < 0
>361	PrimaryExpression	0
>362	PtrMemberAccess	eff -> wavyMagnitude
>363	Identifier	wavyMagnitude
>364	Identifier	eff
>365	ExpressionStatement	 
>366	AssignmentExpr	eff -> wavyMagnitude -= magRedSpd * dt
>367	MultiplicativeExpression	magRedSpd * dt
>368	Identifier	dt
>369	Identifier	magRedSpd
>370	PtrMemberAccess	eff -> wavyMagnitude
>371	Identifier	wavyMagnitude
>372	Identifier	eff
>373	Condition	 
>374	RelationalExpression	eff -> wavyMagnitude > 0
>375	PrimaryExpression	0
>376	PtrMemberAccess	eff -> wavyMagnitude
>377	Identifier	wavyMagnitude
>378	Identifier	eff
>379	ExpressionStatement	 
>380	AssignmentExpr	eff -> wavyAngleOffset += dt * spd
>381	MultiplicativeExpression	dt * spd
>382	Identifier	spd
>383	Identifier	dt
>384	PtrMemberAccess	eff -> wavyAngleOffset
>385	Identifier	wavyAngleOffset
>386	Identifier	eff
>387	IfStatement	if ( eff -> wavyLerpIn < 1 )
>388	CompoundStatement	 
>389	IfStatement	if ( eff -> wavyLerpIn > 1 )
>390	ExpressionStatement	 
>391	AssignmentExpr	eff -> wavyLerpIn = 1
>392	PrimaryExpression	1
>393	PtrMemberAccess	eff -> wavyLerpIn
>394	Identifier	wavyLerpIn
>395	Identifier	eff
>396	Condition	 
>397	RelationalExpression	eff -> wavyLerpIn > 1
>398	PrimaryExpression	1
>399	PtrMemberAccess	eff -> wavyLerpIn
>400	Identifier	wavyLerpIn
>401	Identifier	eff
>402	ExpressionStatement	 
>403	AssignmentExpr	eff -> wavyLerpIn += dt * lerpSpd
>404	MultiplicativeExpression	dt * lerpSpd
>405	Identifier	lerpSpd
>406	Identifier	dt
>407	PtrMemberAccess	eff -> wavyLerpIn
>408	Identifier	wavyLerpIn
>409	Identifier	eff
>410	Condition	 
>411	RelationalExpression	eff -> wavyLerpIn < 1
>412	PrimaryExpression	1
>413	PtrMemberAccess	eff -> wavyLerpIn
>414	Identifier	wavyLerpIn
>415	Identifier	eff
>416	ForStatement	for ( int i = 0 ; i < eff -> wavy . size ( ) ; i ++ )
>417	CompoundStatement	 
>418	IfStatement	if ( ! eff -> wavySave . empty ( ) )
>419	CompoundStatement	 
>420	IfStatement	if ( eff -> wavyLerpIn < 1 )
>421	ExpressionStatement	 
>422	AssignmentExpr	eff -> wavy [ i ] . x = eff -> wavy [ i ] . x * eff -> wavyLerpIn + ( eff -> wavySave [ i ] . x * ( 1.0f \
>423	AdditiveExpression	eff -> wavy [ i ] . x * eff -> wavyLerpIn + ( eff -> wavySave [ i ] . x * ( 1.0f - eff -> wavyLerpIn ) )
>424	MultiplicativeExpression	eff -> wavySave [ i ] . x * ( 1.0f - eff -> wavyLerpIn )
>425	AdditiveExpression	1.0f - eff -> wavyLerpIn
>426	PtrMemberAccess	eff -> wavyLerpIn
>427	Identifier	wavyLerpIn
>428	Identifier	eff
>429	PrimaryExpression	1.0f
>430	MemberAccess	eff -> wavySave [ i ] . x
>431	Identifier	x
>432	ArrayIndexing	eff -> wavySave [ i ]
>433	Identifier	i
>434	PtrMemberAccess	eff -> wavySave
>435	Identifier	wavySave
>436	Identifier	eff
>437	MultiplicativeExpression	eff -> wavy [ i ] . x * eff -> wavyLerpIn
>438	PtrMemberAccess	eff -> wavyLerpIn
>439	Identifier	wavyLerpIn
>440	Identifier	eff
>441	MemberAccess	eff -> wavy [ i ] . x
>442	Identifier	x
>443	ArrayIndexing	eff -> wavy [ i ]
>444	Identifier	i
>445	PtrMemberAccess	eff -> wavy
>446	Identifier	wavy
>447	Identifier	eff
>448	MemberAccess	eff -> wavy [ i ] . x
>449	Identifier	x
>450	ArrayIndexing	eff -> wavy [ i ]
>451	Identifier	i
>452	PtrMemberAccess	eff -> wavy
>453	Identifier	wavy
>454	Identifier	eff
>455	Condition	 
>456	RelationalExpression	eff -> wavyLerpIn < 1
>457	PrimaryExpression	1
>458	PtrMemberAccess	eff -> wavyLerpIn
>459	Identifier	wavyLerpIn
>460	Identifier	eff
>461	Condition	 
>462	UnaryOp	! eff -> wavySave . empty ( )
>463	CallExpression	eff -> wavySave . empty ( )
>464	ArgumentList	 
>465	Callee	eff -> wavySave . empty
>466	MemberAccess	eff -> wavySave . empty
>467	Identifier	empty
>468	PtrMemberAccess	eff -> wavySave
>469	Identifier	wavySave
>470	Identifier	eff
>471	UnaryOperator	!
>472	ExpressionStatement	 
>473	AssignmentExpr	eff -> wavy [ i ] . x = sinf ( eff -> wavyAngleOffset + ( float ( i ) / wavySz ) * PI ) * float ( eff \
>474	MultiplicativeExpression	sinf ( eff -> wavyAngleOffset + ( float ( i ) / wavySz ) * PI ) * float ( eff -> wavyMagnitude * eff \
>475	MultiplicativeExpression	float ( eff -> wavyMagnitude * eff -> effectMult ) * weight
>476	Identifier	weight
>477	CallExpression	float ( eff -> wavyMagnitude * eff -> effectMult )
>478	ArgumentList	eff -> wavyMagnitude * eff -> effectMult
>479	Argument	eff -> wavyMagnitude * eff -> effectMult
>480	MultiplicativeExpression	eff -> wavyMagnitude * eff -> effectMult
>481	PtrMemberAccess	eff -> effectMult
>482	Identifier	effectMult
>483	Identifier	eff
>484	PtrMemberAccess	eff -> wavyMagnitude
>485	Identifier	wavyMagnitude
>486	Identifier	eff
>487	Callee	float
>488	Identifier	float
>489	CallExpression	sinf ( eff -> wavyAngleOffset + ( float ( i ) / wavySz ) * PI )
>490	ArgumentList	eff -> wavyAngleOffset + ( float ( i ) / wavySz ) * PI
>491	Argument	eff -> wavyAngleOffset + ( float ( i ) / wavySz ) * PI
>492	AdditiveExpression	eff -> wavyAngleOffset + ( float ( i ) / wavySz ) * PI
>493	MultiplicativeExpression	( float ( i ) / wavySz ) * PI
>494	Identifier	PI
>495	MultiplicativeExpression	float ( i ) / wavySz
>496	Identifier	wavySz
>497	CallExpression	float ( i )
>498	ArgumentList	i
>499	Argument	i
>500	Identifier	i
>501	Callee	float
>502	Identifier	float
>503	PtrMemberAccess	eff -> wavyAngleOffset
>504	Identifier	wavyAngleOffset
>505	Identifier	eff
>506	Callee	sinf
>507	Identifier	sinf
>508	MemberAccess	eff -> wavy [ i ] . x
>509	Identifier	x
>510	ArrayIndexing	eff -> wavy [ i ]
>511	Identifier	i
>512	PtrMemberAccess	eff -> wavy
>513	Identifier	wavy
>514	Identifier	eff
>515	IfStatement	if ( weight < 0.125f )
>516	ExpressionStatement	 
>517	AssignmentExpr	weight *= 0.5f
>518	PrimaryExpression	0.5f
>519	Identifier	weight
>520	Condition	 
>521	RelationalExpression	weight < 0.125f
>522	PrimaryExpression	0.125f
>523	Identifier	weight
>524	IfStatement	if ( eff -> wavyFlip )
>525	ExpressionStatement	 
>526	AssignmentExpr	weight = 1.0f - weight
>527	AdditiveExpression	1.0f - weight
>528	Identifier	weight
>529	PrimaryExpression	1.0f
>530	Identifier	weight
>531	Condition	 
>532	PtrMemberAccess	eff -> wavyFlip
>533	Identifier	wavyFlip
>534	Identifier	eff
>535	IdentifierDeclStatement	 
>536	IdentifierDecl	weight = float ( i ) / wavySz
>537	AssignmentExpr	weight = float ( i ) / wavySz
>538	MultiplicativeExpression	float ( i ) / wavySz
>539	Identifier	wavySz
>540	CallExpression	float ( i )
>541	ArgumentList	i
>542	Argument	i
>543	Identifier	i
>544	Callee	float
>545	Identifier	float
>546	Identifier	weight
>547	Identifier	weight
>548	IdentifierDeclType	float
>549	IncDecOp	 
>550	IncDec	++
>551	Identifier	i
>552	Condition	 
>553	RelationalExpression	i < eff -> wavy . size ( )
>554	CallExpression	eff -> wavy . size ( )
>555	ArgumentList	 
>556	Callee	eff -> wavy . size
>557	MemberAccess	eff -> wavy . size
>558	Identifier	size
>559	PtrMemberAccess	eff -> wavy
>560	Identifier	wavy
>561	Identifier	eff
>562	Identifier	i
>563	ForInit	 
>564	IdentifierDeclStatement	int i = 0 ;
>565	IdentifierDecl	i = 0
>566	AssignmentExpr	i = 0
>567	PrimaryExpression	0
>568	Identifier	i
>569	Identifier	i
>570	IdentifierDeclType	int
>571	IdentifierDeclStatement	 
>572	IdentifierDecl	wavySz = float ( eff -> wavy . size ( ) )
>573	AssignmentExpr	wavySz = float ( eff -> wavy . size ( ) )
>574	CallExpression	float ( eff -> wavy . size ( ) )
>575	ArgumentList	eff -> wavy . size ( )
>576	Argument	eff -> wavy . size ( )
>577	CallExpression	eff -> wavy . size ( )
>578	ArgumentList	 
>579	Callee	eff -> wavy . size
>580	MemberAccess	eff -> wavy . size
>581	Identifier	size
>582	PtrMemberAccess	eff -> wavy
>583	Identifier	wavy
>584	Identifier	eff
>585	Callee	float
>586	Identifier	float
>587	Identifier	wavySz
>588	Identifier	wavySz
>589	IdentifierDeclType	float
>590	IdentifierDeclStatement	 
>591	IdentifierDecl	lerpSpd = 5.0
>592	AssignmentExpr	lerpSpd = 5.0
>593	PrimaryExpression	5.0
>594	Identifier	lerpSpd
>595	Identifier	lerpSpd
>596	IdentifierDeclType	float
>597	IdentifierDeclStatement	 
>598	IdentifierDecl	magRedSpd = 48
>599	AssignmentExpr	magRedSpd = 48
>600	PrimaryExpression	48
>601	Identifier	magRedSpd
>602	Identifier	magRedSpd
>603	IdentifierDeclType	float
>604	IdentifierDeclStatement	 
>605	IdentifierDecl	spd = PI * 1.1f
>606	AssignmentExpr	spd = PI * 1.1f
>607	MultiplicativeExpression	PI * 1.1f
>608	PrimaryExpression	1.1f
>609	Identifier	PI
>610	Identifier	spd
>611	Identifier	spd
>612	IdentifierDeclType	float
>613	Condition	 
>614	PtrMemberAccess	eff -> wavyWaving
>615	Identifier	wavyWaving
>616	Identifier	eff
>617	IfStatement	if ( eff -> touching )
>618	CompoundStatement	 
>619	ExpressionStatement	 
>620	AssignmentExpr	eff -> wavyLerpIn = 0
>621	PrimaryExpression	0
>622	PtrMemberAccess	eff -> wavyLerpIn
>623	Identifier	wavyLerpIn
>624	Identifier	eff
>625	ExpressionStatement	 
>626	AssignmentExpr	eff -> wavySave = eff -> wavy
>627	PtrMemberAccess	eff -> wavy
>628	Identifier	wavy
>629	Identifier	eff
>630	PtrMemberAccess	eff -> wavySave
>631	Identifier	wavySave
>632	Identifier	eff
>633	ExpressionStatement	 
>634	AssignmentExpr	eff -> wavyAngleOffset = ( eff -> hitPerc - 0.5f ) * PI
>635	MultiplicativeExpression	( eff -> hitPerc - 0.5f ) * PI
>636	Identifier	PI
>637	AdditiveExpression	eff -> hitPerc - 0.5f
>638	PrimaryExpression	0.5f
>639	PtrMemberAccess	eff -> hitPerc
>640	Identifier	hitPerc
>641	Identifier	eff
>642	PtrMemberAccess	eff -> wavyAngleOffset
>643	Identifier	wavyAngleOffset
>644	Identifier	eff
>645	IfStatement	if ( eff -> touchVel . x < 0 )
>646	ExpressionStatement	 
>647	AssignmentExpr	eff -> wavyMagnitude = - eff -> wavyMagnitude
>648	UnaryOp	- eff -> wavyMagnitude
>649	PtrMemberAccess	eff -> wavyMagnitude
>650	Identifier	wavyMagnitude
>651	Identifier	eff
>652	UnaryOperator	-
>653	PtrMemberAccess	eff -> wavyMagnitude
>654	Identifier	wavyMagnitude
>655	Identifier	eff
>656	Condition	 
>657	RelationalExpression	eff -> touchVel . x < 0
>658	PrimaryExpression	0
>659	MemberAccess	eff -> touchVel . x
>660	Identifier	x
>661	PtrMemberAccess	eff -> touchVel
>662	Identifier	touchVel
>663	Identifier	eff
>664	ExpressionStatement	 
>665	AssignmentExpr	eff -> wavyMagnitude = 100 * ramp + 16
>666	AdditiveExpression	100 * ramp + 16
>667	PrimaryExpression	16
>668	MultiplicativeExpression	100 * ramp
>669	Identifier	ramp
>670	PrimaryExpression	100
>671	PtrMemberAccess	eff -> wavyMagnitude
>672	Identifier	wavyMagnitude
>673	Identifier	eff
>674	IfStatement	if ( ramp > 1 )
>675	ExpressionStatement	 
>676	AssignmentExpr	ramp = 1
>677	PrimaryExpression	1
>678	Identifier	ramp
>679	Condition	 
>680	RelationalExpression	ramp > 1
>681	PrimaryExpression	1
>682	Identifier	ramp
>683	IfStatement	if ( ramp < 0 )
>684	ExpressionStatement	 
>685	AssignmentExpr	ramp = 0
>686	PrimaryExpression	0
>687	Identifier	ramp
>688	Condition	 
>689	RelationalExpression	ramp < 0
>690	PrimaryExpression	0
>691	Identifier	ramp
>692	IdentifierDeclStatement	 
>693	IdentifierDecl	ramp = eff -> touchVel . getLength2D ( ) / 800.0f
>694	AssignmentExpr	ramp = eff -> touchVel . getLength2D ( ) / 800.0f
>695	MultiplicativeExpression	eff -> touchVel . getLength2D ( ) / 800.0f
>696	PrimaryExpression	800.0f
>697	CallExpression	eff -> touchVel . getLength2D ( )
>698	ArgumentList	 
>699	Callee	eff -> touchVel . getLength2D
>700	MemberAccess	eff -> touchVel . getLength2D
>701	Identifier	getLength2D
>702	PtrMemberAccess	eff -> touchVel
>703	Identifier	touchVel
>704	Identifier	eff
>705	Identifier	ramp
>706	Identifier	ramp
>707	IdentifierDeclType	float
>708	ExpressionStatement	 
>709	AssignmentExpr	eff -> touching = false
>710	Identifier	false
>711	PtrMemberAccess	eff -> touching
>712	Identifier	touching
>713	Identifier	eff
>714	Condition	 
>715	PtrMemberAccess	eff -> touching
>716	Identifier	touching
>717	Identifier	eff
>718	IdentifierDeclStatement	 
>719	IdentifierDecl	* eff = this -> eff
>720	AssignmentExpr	* eff = this -> eff
>721	PtrMemberAccess	this -> eff
>722	Identifier	eff
>723	Identifier	this
>724	Identifier	eff
>725	Identifier	eff
>726	IdentifierDeclType	ElementEffectData *
>727	Label	 
>728	Identifier	EFX_WAVY
>729	BreakStatement	 
>730	ExpressionStatement	 
>731	CallExpression	alpha . update ( dt )
>732	ArgumentList	dt
>733	Argument	dt
>734	Identifier	dt
>735	Callee	alpha . update
>736	MemberAccess	alpha . update
>737	Identifier	update
>738	Identifier	alpha
>739	Label	 
>740	Identifier	EFX_ALPHA
>741	Condition	 
>742	PtrMemberAccess	eff -> elementEffectType
>743	Identifier	elementEffectType
>744	Identifier	eff
>788	FunctionDef	Element 
>789	ParameterList	float dt
>790	Parameter	 
>791	Identifier	dt
>792	ParameterType	float
>793	ReturnType	void
>794	CompoundStatement	 
>795	IfStatement	if ( ! core -> particlesPaused )
>796	CompoundStatement	 
>797	IfStatement	if ( drawGrid )
>798	ExpressionStatement	 
>799	CallExpression	updateGrid ( dt )
>800	ArgumentList	dt
>801	Argument	dt
>802	Identifier	dt
>803	Callee	updateGrid
>804	Identifier	updateGrid
>805	Condition	 
>806	Identifier	drawGrid
>807	IfStatement	if ( eff )
>808	ExpressionStatement	 
>809	CallExpression	updateEffects ( dt )
>810	ArgumentList	dt
>811	Argument	dt
>812	Identifier	dt
>813	Callee	updateEffects
>814	Identifier	updateEffects
>815	Condition	 
>816	Identifier	eff
>817	ExpressionStatement	 
>818	CallExpression	updateLife ( dt )
>819	ArgumentList	dt
>820	Argument	dt
>821	Identifier	dt
>822	Callee	updateLife
>823	Identifier	updateLife
>824	Condition	 
>825	UnaryOp	! core -> particlesPaused
>826	PtrMemberAccess	core -> particlesPaused
>827	Identifier	particlesPaused
>828	Identifier	core
>829	UnaryOperator	!
>830	ExpressionStatement	 
>831	CallExpression	BBGE_PROF ( Element_update )
>832	ArgumentList	Element_update
>833	Argument	Element_update
>834	Identifier	Element_update
>835	Callee	BBGE_PROF
>836	Identifier	BBGE_PROF
>847	FunctionDef	Element 
>848	ParameterList	 
>849	CompoundStatement	 
>850	ExpressionStatement	 
>851	CallExpression	freeEffectData ( )
>852	ArgumentList	 
>853	Callee	freeEffectData
>854	Identifier	freeEffectData
>858	FunctionDef	Element 
>859	ParameterList	 
>860	ReturnType	void
>861	CompoundStatement	 
>862	ExpressionStatement	 
>863	CallExpression	Quad 
>864	ArgumentList	 
>865	Callee	Quad 
>866	Identifier	Quad 
>870	FunctionDef	Element 
>871	ParameterList	 
>872	ReturnType	int
>873	CompoundStatement	 
>874	ReturnStatement	 
>875	ConditionalExpression	eff ? eff -> elementEffectIndex 
>876	UnaryOp	- 1
>877	PrimaryExpression	1
>878	UnaryOperator	-
>879	PtrMemberAccess	eff -> elementEffectIndex
>880	Identifier	elementEffectIndex
>881	Identifier	eff
>882	Condition	eff
>883	Identifier	eff
>890	FunctionDef	Element 
>891	ParameterList	 
>892	ReturnType	void
>893	CompoundStatement	 
>894	IfStatement	if ( drawGrid )
>895	ElseStatement	else
>896	CompoundStatement	 
>897	CompoundStatement	 
>898	ForStatement	for ( int x = 0 ; x < xDivs - 1 ; x ++ )
>899	CompoundStatement	 
>900	ForStatement	for ( int y = 0 ; y < yDivs ; y ++ )
>901	CompoundStatement	 
>902	IfStatement	if ( wavy_y < eff -> wavy . size ( ) )
>903	CompoundStatement	 
>904	ExpressionStatement	 
>905	AssignmentExpr	drawGrid [ x + 1 ] [ y ] . x = tmp + 0.5f
>906	AdditiveExpression	tmp + 0.5f
>907	PrimaryExpression	0.5f
>908	Identifier	tmp
>909	MemberAccess	drawGrid [ x + 1 ] [ y ] . x
>910	Identifier	x
>911	ArrayIndexing	drawGrid [ x + 1 ] [ y ]
>912	Identifier	y
>913	ArrayIndexing	drawGrid [ x + 1 ]
>914	AdditiveExpression	x + 1
>915	PrimaryExpression	1
>916	Identifier	x
>917	Identifier	drawGrid
>918	ExpressionStatement	 
>919	AssignmentExpr	drawGrid [ x ] [ y ] . x = tmp - 0.5f
>920	AdditiveExpression	tmp - 0.5f
>921	PrimaryExpression	0.5f
>922	Identifier	tmp
>923	MemberAccess	drawGrid [ x ] [ y ] . x
>924	Identifier	x
>925	ArrayIndexing	drawGrid [ x ] [ y ]
>926	Identifier	y
>927	ArrayIndexing	drawGrid [ x ]
>928	Identifier	x
>929	Identifier	drawGrid
>930	Condition	 
>931	RelationalExpression	wavy_y < eff -> wavy . size ( )
>932	CallExpression	eff -> wavy . size ( )
>933	ArgumentList	 
>934	Callee	eff -> wavy . size
>935	MemberAccess	eff -> wavy . size
>936	Identifier	size
>937	PtrMemberAccess	eff -> wavy
>938	Identifier	wavy
>939	Identifier	eff
>940	Identifier	wavy_y
>941	IdentifierDeclStatement	 
>942	IdentifierDecl	tmp = eff -> wavy [ wavy_y ] . x / w
>943	AssignmentExpr	tmp = eff -> wavy [ wavy_y ] . x / w
>944	MultiplicativeExpression	eff -> wavy [ wavy_y ] . x / w
>945	Identifier	w
>946	MemberAccess	eff -> wavy [ wavy_y ] . x
>947	Identifier	x
>948	ArrayIndexing	eff -> wavy [ wavy_y ]
>949	Identifier	wavy_y
>950	PtrMemberAccess	eff -> wavy
>951	Identifier	wavy
>952	Identifier	eff
>953	Identifier	tmp
>954	Identifier	tmp
>955	IdentifierDeclType	const float
>956	IdentifierDeclStatement	 
>957	IdentifierDecl	wavy_y = ( yDivs - y ) - 1
>958	AssignmentExpr	wavy_y = ( yDivs - y ) - 1
>959	AdditiveExpression	( yDivs - y ) - 1
>960	PrimaryExpression	1
>961	AdditiveExpression	yDivs - y
>962	Identifier	y
>963	Identifier	yDivs
>964	Identifier	wavy_y
>965	Identifier	wavy_y
>966	IdentifierDeclType	const int
>967	IncDecOp	 
>968	IncDec	++
>969	Identifier	y
>970	Condition	 
>971	RelationalExpression	y < yDivs
>972	Identifier	yDivs
>973	Identifier	y
>974	ForInit	 
>975	IdentifierDeclStatement	int y = 0 ;
>976	IdentifierDecl	y = 0
>977	AssignmentExpr	y = 0
>978	PrimaryExpression	0
>979	Identifier	y
>980	Identifier	y
>981	IdentifierDeclType	int
>982	IncDecOp	 
>983	IncDec	++
>984	Identifier	x
>985	Condition	 
>986	RelationalExpression	x < xDivs - 1
>987	AdditiveExpression	xDivs - 1
>988	PrimaryExpression	1
>989	Identifier	xDivs
>990	Identifier	x
>991	ForInit	 
>992	IdentifierDeclStatement	int x = 0 ;
>993	IdentifierDecl	x = 0
>994	AssignmentExpr	x = 0
>995	PrimaryExpression	0
>996	Identifier	x
>997	Identifier	x
>998	IdentifierDeclType	int
>999	IdentifierDeclStatement	 
>1000	IdentifierDecl	w = float ( getWidth ( ) )
>1001	AssignmentExpr	w = float ( getWidth ( ) )
>1002	CallExpression	float ( getWidth ( ) )
>1003	ArgumentList	getWidth ( )
>1004	Argument	getWidth ( )
>1005	CallExpression	getWidth ( )
>1006	ArgumentList	 
>1007	Callee	getWidth
>1008	Identifier	getWidth
>1009	Callee	float
>1010	Identifier	float
>1011	Identifier	w
>1012	Identifier	w
>1013	IdentifierDeclType	const float
>1014	Condition	 
>1015	Identifier	drawGrid
>1044	FunctionDef	Element 
>1045	ParameterList	int eidx
>1046	Parameter	 
>1047	Identifier	eidx
>1048	ParameterType	int
>1049	ReturnType	void
>1050	CompoundStatement	 
>1051	IfStatement	if ( eff )
>1052	CompoundStatement	 
>1053	ExpressionStatement	 
>1054	AssignmentExpr	eff -> elementEffectType = e . type
>1055	MemberAccess	e . type
>1056	Identifier	type
>1057	Identifier	e
>1058	PtrMemberAccess	eff -> elementEffectType
>1059	Identifier	elementEffectType
>1060	Identifier	eff
>1061	ExpressionStatement	 
>1062	AssignmentExpr	eff -> elementEffectIndex = eidx
>1063	Identifier	eidx
>1064	PtrMemberAccess	eff -> elementEffectIndex
>1065	Identifier	elementEffectIndex
>1066	Identifier	eff
>1067	Condition	 
>1068	Identifier	eff
>1069	SwitchStatement	switch ( e . type )
>1070	CompoundStatement	 
>1071	BreakStatement	 
>1072	ExpressionStatement	 
>1073	CallExpression	setStatic ( true )
>1074	ArgumentList	true
>1075	Argument	true
>1076	Identifier	true
>1077	Callee	setStatic
>1078	Identifier	setStatic
>1079	ExpressionStatement	 
>1080	CallExpression	freeEffectData ( )
>1081	ArgumentList	 
>1082	Callee	freeEffectData
>1083	Identifier	freeEffectData
>1084	Label	 
>1085	Identifier	default
>1086	BreakStatement	 
>1087	CompoundStatement	 
>1088	ExpressionStatement	 
>1089	CallExpression	setStatic ( false )
>1090	ArgumentList	false
>1091	Argument	false
>1092	Identifier	false
>1093	Callee	setStatic
>1094	Identifier	setStatic
>1095	ExpressionStatement	 
>1096	CallExpression	setGridFromWavy ( )
>1097	ArgumentList	 
>1098	Callee	setGridFromWavy
>1099	Identifier	setGridFromWavy
>1100	ExpressionStatement	 
>1101	CallExpression	createGrid ( 2 , e . segsy )
>1102	ArgumentList	2
>1103	Argument	e . segsy
>1104	MemberAccess	e . segsy
>1105	Identifier	segsy
>1106	Identifier	e
>1107	Argument	2
>1108	PrimaryExpression	2
>1109	Callee	createGrid
>1110	Identifier	createGrid
>1111	ExpressionStatement	 
>1112	AssignmentExpr	eff -> wavyMax = bity * 1.2f
>1113	MultiplicativeExpression	bity * 1.2f
>1114	PrimaryExpression	1.2f
>1115	Identifier	bity
>1116	PtrMemberAccess	eff -> wavyMax
>1117	Identifier	wavyMax
>1118	Identifier	eff
>1119	ExpressionStatement	 
>1120	AssignmentExpr	eff -> wavyMin = bity
>1121	Identifier	bity
>1122	PtrMemberAccess	eff -> wavyMin
>1123	Identifier	wavyMin
>1124	Identifier	eff
>1125	ExpressionStatement	 
>1126	AssignmentExpr	eff -> wavyFlip = e . wavy_flip
>1127	MemberAccess	e . wavy_flip
>1128	Identifier	wavy_flip
>1129	Identifier	e
>1130	PtrMemberAccess	eff -> wavyFlip
>1131	Identifier	wavyFlip
>1132	Identifier	eff
>1133	ForStatement	for ( int i = 0 ; i < eff -> wavy . size ( ) ; i ++ )
>1134	CompoundStatement	 
>1135	ExpressionStatement	 
>1136	AssignmentExpr	eff -> wavy [ i ] = Vector ( 0 , - ( i * bity ) )
>1137	CallExpression	Vector ( 0 , - ( i * bity ) )
>1138	ArgumentList	0
>1139	Argument	- ( i * bity )
>1140	UnaryOp	- ( i * bity )
>1141	MultiplicativeExpression	i * bity
>1142	Identifier	bity
>1143	Identifier	i
>1144	UnaryOperator	-
>1145	Argument	0
>1146	PrimaryExpression	0
>1147	Callee	Vector
>1148	Identifier	Vector
>1149	ArrayIndexing	eff -> wavy [ i ]
>1150	Identifier	i
>1151	PtrMemberAccess	eff -> wavy
>1152	Identifier	wavy
>1153	Identifier	eff
>1154	IncDecOp	 
>1155	IncDec	++
>1156	Identifier	i
>1157	Condition	 
>1158	RelationalExpression	i < eff -> wavy . size ( )
>1159	CallExpression	eff -> wavy . size ( )
>1160	ArgumentList	 
>1161	Callee	eff -> wavy . size
>1162	MemberAccess	eff -> wavy . size
>1163	Identifier	size
>1164	PtrMemberAccess	eff -> wavy
>1165	Identifier	wavy
>1166	Identifier	eff
>1167	Identifier	i
>1168	ForInit	 
>1169	IdentifierDeclStatement	int i = 0 ;
>1170	IdentifierDecl	i = 0
>1171	AssignmentExpr	i = 0
>1172	PrimaryExpression	0
>1173	Identifier	i
>1174	Identifier	i
>1175	IdentifierDeclType	int
>1176	IdentifierDeclStatement	 
>1177	IdentifierDecl	bity = float ( getHeight ( ) ) / float ( e . segsy )
>1178	AssignmentExpr	bity = float ( getHeight ( ) ) / float ( e . segsy )
>1179	MultiplicativeExpression	float ( getHeight ( ) ) / float ( e . segsy )
>1180	CallExpression	float ( e . segsy )
>1181	ArgumentList	e . segsy
>1182	Argument	e . segsy
>1183	MemberAccess	e . segsy
>1184	Identifier	segsy
>1185	Identifier	e
>1186	Callee	float
>1187	Identifier	float
>1188	CallExpression	float ( getHeight ( ) )
>1189	ArgumentList	getHeight ( )
>1190	Argument	getHeight ( )
>1191	CallExpression	getHeight ( )
>1192	ArgumentList	 
>1193	Callee	getHeight
>1194	Identifier	getHeight
>1195	Callee	float
>1196	Identifier	float
>1197	Identifier	bity
>1198	Identifier	bity
>1199	IdentifierDeclType	float
>1200	ExpressionStatement	 
>1201	CallExpression	eff -> wavy . resize ( e . segsy )
>1202	ArgumentList	e . segsy
>1203	Argument	e . segsy
>1204	MemberAccess	e . segsy
>1205	Identifier	segsy
>1206	Identifier	e
>1207	Callee	eff -> wavy . resize
>1208	MemberAccess	eff -> wavy . resize
>1209	Identifier	resize
>1210	PtrMemberAccess	eff -> wavy
>1211	Identifier	wavy
>1212	Identifier	eff
>1213	Label	 
>1214	Identifier	EFX_WAVY
>1215	BreakStatement	 
>1216	CompoundStatement	 
>1217	ExpressionStatement	 
>1218	CallExpression	setStatic ( false )
>1219	ArgumentList	false
>1220	Argument	false
>1221	Identifier	false
>1222	Callee	setStatic
>1223	Identifier	setStatic
>1224	ExpressionStatement	 
>1225	AssignmentExpr	alpha = e . alpha
>1226	MemberAccess	e . alpha
>1227	Identifier	alpha
>1228	Identifier	e
>1229	Identifier	alpha
>1230	ExpressionStatement	 
>1231	CallExpression	setBlendType ( e . blendType )
>1232	ArgumentList	e . blendType
>1233	Argument	e . blendType
>1234	MemberAccess	e . blendType
>1235	Identifier	blendType
>1236	Identifier	e
>1237	Callee	setBlendType
>1238	Identifier	setBlendType
>1239	Label	 
>1240	Identifier	EFX_ALPHA
>1241	BreakStatement	 
>1242	CompoundStatement	 
>1243	ExpressionStatement	 
>1244	CallExpression	setStatic ( false )
>1245	ArgumentList	false
>1246	Argument	false
>1247	Identifier	false
>1248	Callee	setStatic
>1249	Identifier	setStatic
>1250	ExpressionStatement	 
>1251	CallExpression	setSegs ( e . segsx , e . segsy , e . segs_dgox , e . segs_dgoy , e . segs_dgmx , e . segs_dgmy , e . segs_dgtm , \
>1252	ArgumentList	e . segsx
>1253	Argument	e . segs_dgo
>1254	MemberAccess	e . segs_dgo
>1255	Identifier	segs_dgo
>1256	Identifier	e
>1257	Argument	e . segs_dgtm
>1258	MemberAccess	e . segs_dgtm
>1259	Identifier	segs_dgtm
>1260	Identifier	e
>1261	Argument	e . segs_dgmy
>1262	MemberAccess	e . segs_dgmy
>1263	Identifier	segs_dgmy
>1264	Identifier	e
>1265	Argument	e . segs_dgmx
>1266	MemberAccess	e . segs_dgmx
>1267	Identifier	segs_dgmx
>1268	Identifier	e
>1269	Argument	e . segs_dgoy
>1270	MemberAccess	e . segs_dgoy
>1271	Identifier	segs_dgoy
>1272	Identifier	e
>1273	Argument	e . segs_dgox
>1274	MemberAccess	e . segs_dgox
>1275	Identifier	segs_dgox
>1276	Identifier	e
>1277	Argument	e . segsy
>1278	MemberAccess	e . segsy
>1279	Identifier	segsy
>1280	Identifier	e
>1281	Argument	e . segsx
>1282	MemberAccess	e . segsx
>1283	Identifier	segsx
>1284	Identifier	e
>1285	Callee	setSegs
>1286	Identifier	setSegs
>1287	Label	 
>1288	Identifier	EFX_SEGS
>1289	Condition	 
>1290	MemberAccess	e . type
>1291	Identifier	type
>1292	Identifier	e
>1293	IfStatement	if ( e . type != EFX_NONE )
>1294	ExpressionStatement	 
>1295	CallExpression	ensureEffectData ( )
>1296	ArgumentList	 
>1297	Callee	ensureEffectData
>1298	Identifier	ensureEffectData
>1299	Condition	 
>1300	EqualityExpression	e . type != EFX_NONE
>1301	Identifier	EFX_NONE
>1302	MemberAccess	e . type
>1303	Identifier	type
>1304	Identifier	e
>1305	IdentifierDeclStatement	 
>1306	IdentifierDecl	e = dsq -> getElementEffectByIndex ( eidx )
>1307	AssignmentExpr	e = dsq -> getElementEffectByIndex ( eidx )
>1308	CallExpression	dsq -> getElementEffectByIndex ( eidx )
>1309	ArgumentList	eidx
>1310	Argument	eidx
>1311	Identifier	eidx
>1312	Callee	dsq -> getElementEffectByIndex
>1313	PtrMemberAccess	dsq -> getElementEffectByIndex
>1314	Identifier	getElementEffectByIndex
>1315	Identifier	dsq
>1316	Identifier	e
>1317	Identifier	e
>1318	IdentifierDeclType	ElementEffect
>1319	ExpressionStatement	 
>1320	AssignmentExpr	alpha = 1
>1321	PrimaryExpression	1
>1322	Identifier	alpha
>1323	ExpressionStatement	 
>1324	CallExpression	alpha . stop ( )
>1325	ArgumentList	 
>1326	Callee	alpha . stop
>1327	MemberAccess	alpha . stop
>1328	Identifier	stop
>1329	Identifier	alpha
>1330	ExpressionStatement	 
>1331	CallExpression	setBlendType ( RenderObject 
>1332	ArgumentList	RenderObject 
>1333	Argument	RenderObject 
>1334	Identifier	RenderObject 
>1335	Callee	setBlendType
>1336	Identifier	setBlendType
>1337	ExpressionStatement	 
>1338	CallExpression	deleteGrid ( )
>1339	ArgumentList	 
>1340	Callee	deleteGrid
>1341	Identifier	deleteGrid
>1384	FunctionDef	Element 
>1385	ParameterList	 
>1386	ReturnType	void
>1387	CompoundStatement	 
>1388	ExpressionStatement	 
>1389	AssignmentExpr	renderBorder = false
>1390	Identifier	false
>1391	Identifier	renderBorder
>1392	ExpressionStatement	 
>1393	CallExpression	Quad 
>1394	ArgumentList	 
>1395	Callee	Quad 
>1396	Identifier	Quad 
>1397	IfStatement	if ( dsq -> game -> isSceneEditorActive ( ) && this -> bgLayer == dsq -> game -> sceneEditor . bgLayer && dsq -> \
>1398	CompoundStatement	 
>1399	ExpressionStatement	 
>1400	AssignmentExpr	renderBorder = true
>1401	Identifier	true
>1402	Identifier	renderBorder
>1403	IfStatement	if ( ! dsq -> game -> sceneEditor . selectedElements . empty ( ) )
>1404	ElseStatement	else
>1405	CompoundStatement	 
>1406	IfStatement	if ( dsq -> game -> sceneEditor . editingElement == this )
>1407	ExpressionStatement	 
>1408	AssignmentExpr	renderBorderColor = Vector ( 1 , 1 , 1 )
>1409	CallExpression	Vector ( 1 , 1 , 1 )
>1410	ArgumentList	1
>1411	Argument	1
>1412	PrimaryExpression	1
>1413	Argument	1
>1414	PrimaryExpression	1
>1415	Argument	1
>1416	PrimaryExpression	1
>1417	Callee	Vector
>1418	Identifier	Vector
>1419	Identifier	renderBorderColor
>1420	Condition	 
>1421	EqualityExpression	dsq -> game -> sceneEditor . editingElement == this
>1422	Identifier	this
>1423	MemberAccess	dsq -> game -> sceneEditor . editingElement
>1424	Identifier	editingElement
>1425	PtrMemberAccess	dsq -> game -> sceneEditor
>1426	Identifier	sceneEditor
>1427	PtrMemberAccess	dsq -> game
>1428	Identifier	game
>1429	Identifier	dsq
>1430	CompoundStatement	 
>1431	ForStatement	for ( int i = 0 ; i < dsq -> game -> sceneEditor . selectedElements . size ( ) ; i ++ )
>1432	CompoundStatement	 
>1433	IfStatement	if ( this == dsq -> game -> sceneEditor . selectedElements [ i ] )
>1434	ExpressionStatement	 
>1435	AssignmentExpr	renderBorderColor = Vector ( 1 , 1 , 1 )
>1436	CallExpression	Vector ( 1 , 1 , 1 )
>1437	ArgumentList	1
>1438	Argument	1
>1439	PrimaryExpression	1
>1440	Argument	1
>1441	PrimaryExpression	1
>1442	Argument	1
>1443	PrimaryExpression	1
>1444	Callee	Vector
>1445	Identifier	Vector
>1446	Identifier	renderBorderColor
>1447	Condition	 
>1448	EqualityExpression	this == dsq -> game -> sceneEditor . selectedElements [ i ]
>1449	ArrayIndexing	dsq -> game -> sceneEditor . selectedElements [ i ]
>1450	Identifier	i
>1451	MemberAccess	dsq -> game -> sceneEditor . selectedElements
>1452	Identifier	selectedElements
>1453	PtrMemberAccess	dsq -> game -> sceneEditor
>1454	Identifier	sceneEditor
>1455	PtrMemberAccess	dsq -> game
>1456	Identifier	game
>1457	Identifier	dsq
>1458	Identifier	this
>1459	IncDecOp	 
>1460	IncDec	++
>1461	Identifier	i
>1462	Condition	 
>1463	RelationalExpression	i < dsq -> game -> sceneEditor . selectedElements . size ( )
>1464	CallExpression	dsq -> game -> sceneEditor . selectedElements . size ( )
>1465	ArgumentList	 
>1466	Callee	dsq -> game -> sceneEditor . selectedElements . size
>1467	MemberAccess	dsq -> game -> sceneEditor . selectedElements . size
>1468	Identifier	size
>1469	MemberAccess	dsq -> game -> sceneEditor . selectedElements
>1470	Identifier	selectedElements
>1471	PtrMemberAccess	dsq -> game -> sceneEditor
>1472	Identifier	sceneEditor
>1473	PtrMemberAccess	dsq -> game
>1474	Identifier	game
>1475	Identifier	dsq
>1476	Identifier	i
>1477	ForInit	 
>1478	IdentifierDeclStatement	int i = 0 ;
>1479	IdentifierDecl	i = 0
>1480	AssignmentExpr	i = 0
>1481	PrimaryExpression	0
>1482	Identifier	i
>1483	Identifier	i
>1484	IdentifierDeclType	int
>1485	Condition	 
>1486	UnaryOp	! dsq -> game -> sceneEditor . selectedElements . empty ( )
>1487	CallExpression	dsq -> game -> sceneEditor . selectedElements . empty ( )
>1488	ArgumentList	 
>1489	Callee	dsq -> game -> sceneEditor . selectedElements . empty
>1490	MemberAccess	dsq -> game -> sceneEditor . selectedElements . empty
>1491	Identifier	empty
>1492	MemberAccess	dsq -> game -> sceneEditor . selectedElements
>1493	Identifier	selectedElements
>1494	PtrMemberAccess	dsq -> game -> sceneEditor
>1495	Identifier	sceneEditor
>1496	PtrMemberAccess	dsq -> game
>1497	Identifier	game
>1498	Identifier	dsq
>1499	UnaryOperator	!
>1500	ExpressionStatement	 
>1501	AssignmentExpr	renderBorderColor = Vector ( 0.5 , 0.5 , 0.5 )
>1502	CallExpression	Vector ( 0.5 , 0.5 , 0.5 )
>1503	ArgumentList	0.5
>1504	Argument	0.5
>1505	PrimaryExpression	0.5
>1506	Argument	0.5
>1507	PrimaryExpression	0.5
>1508	Argument	0.5
>1509	PrimaryExpression	0.5
>1510	Callee	Vector
>1511	Identifier	Vector
>1512	Identifier	renderBorderColor
>1513	Condition	 
>1514	AndExpression	dsq -> game -> isSceneEditorActive ( ) && this -> bgLayer == dsq -> game -> sceneEditor . bgLayer && \
>1515	AndExpression	this -> bgLayer == dsq -> game -> sceneEditor . bgLayer && dsq -> game -> sceneEditor . editType == \
>1516	EqualityExpression	dsq -> game -> sceneEditor . editType == ET_ELEMENTS
>1517	Identifier	ET_ELEMENTS
>1518	MemberAccess	dsq -> game -> sceneEditor . editType
>1519	Identifier	editType
>1520	PtrMemberAccess	dsq -> game -> sceneEditor
>1521	Identifier	sceneEditor
>1522	PtrMemberAccess	dsq -> game
>1523	Identifier	game
>1524	Identifier	dsq
>1525	EqualityExpression	this -> bgLayer == dsq -> game -> sceneEditor . bgLayer
>1526	MemberAccess	dsq -> game -> sceneEditor . bgLayer
>1527	Identifier	bgLayer
>1528	PtrMemberAccess	dsq -> game -> sceneEditor
>1529	Identifier	sceneEditor
>1530	PtrMemberAccess	dsq -> game
>1531	Identifier	game
>1532	Identifier	dsq
>1533	PtrMemberAccess	this -> bgLayer
>1534	Identifier	bgLayer
>1535	Identifier	this
>1536	CallExpression	dsq -> game -> isSceneEditorActive ( )
>1537	ArgumentList	 
>1538	Callee	dsq -> game -> isSceneEditorActive
>1539	PtrMemberAccess	dsq -> game -> isSceneEditorActive
>1540	Identifier	isSceneEditorActive
>1541	PtrMemberAccess	dsq -> game
>1542	Identifier	game
>1543	Identifier	dsq
>1544	IfStatement	if ( ! elementActive )
>1545	ReturnStatement	 
>1546	Condition	 
>1547	UnaryOp	! elementActive
>1548	Identifier	elementActive
>1549	UnaryOperator	!
>1582	FunctionDef	Element 
>1583	ParameterList	 
>1584	ReturnType	void
>1585	CompoundStatement	 
>1586	IfStatement	if ( life == 1 && elementActive )
>1587	CompoundStatement	 
>1588	IfStatement	if ( elementFlag == EF_SOLID )
>1589	ElseStatement	else
>1590	IfStatement	if ( elementFlag == EF_HURT )
>1591	ElseStatement	else
>1592	IfStatement	if ( elementFlag == EF_SOLID2 )
>1593	ElseStatement	else
>1594	IfStatement	if ( elementFlag == EF_SOLID3 )
>1595	CompoundStatement	 
>1596	ExpressionStatement	 
>1597	CallExpression	dsq -> game -> fillGridFromQuad ( this , OT_INVISIBLEIN , false )
>1598	ArgumentList	this
>1599	Argument	false
>1600	Identifier	false
>1601	Argument	OT_INVISIBLEIN
>1602	Identifier	OT_INVISIBLEIN
>1603	Argument	this
>1604	Identifier	this
>1605	Callee	dsq -> game -> fillGridFromQuad
>1606	PtrMemberAccess	dsq -> game -> fillGridFromQuad
>1607	Identifier	fillGridFromQuad
>1608	PtrMemberAccess	dsq -> game
>1609	Identifier	game
>1610	Identifier	dsq
>1611	Condition	 
>1612	EqualityExpression	elementFlag == EF_SOLID3
>1613	Identifier	EF_SOLID3
>1614	Identifier	elementFlag
>1615	CompoundStatement	 
>1616	ExpressionStatement	 
>1617	CallExpression	dsq -> game -> fillGridFromQuad ( this , OT_INVISIBLE , false )
>1618	ArgumentList	this
>1619	Argument	false
>1620	Identifier	false
>1621	Argument	OT_INVISIBLE
>1622	Identifier	OT_INVISIBLE
>1623	Argument	this
>1624	Identifier	this
>1625	Callee	dsq -> game -> fillGridFromQuad
>1626	PtrMemberAccess	dsq -> game -> fillGridFromQuad
>1627	Identifier	fillGridFromQuad
>1628	PtrMemberAccess	dsq -> game
>1629	Identifier	game
>1630	Identifier	dsq
>1631	Condition	 
>1632	EqualityExpression	elementFlag == EF_SOLID2
>1633	Identifier	EF_SOLID2
>1634	Identifier	elementFlag
>1635	CompoundStatement	 
>1636	ExpressionStatement	 
>1637	CallExpression	dsq -> game -> fillGridFromQuad ( this , OT_HURT , false )
>1638	ArgumentList	this
>1639	Argument	false
>1640	Identifier	false
>1641	Argument	OT_HURT
>1642	Identifier	OT_HURT
>1643	Argument	this
>1644	Identifier	this
>1645	Callee	dsq -> game -> fillGridFromQuad
>1646	PtrMemberAccess	dsq -> game -> fillGridFromQuad
>1647	Identifier	fillGridFromQuad
>1648	PtrMemberAccess	dsq -> game
>1649	Identifier	game
>1650	Identifier	dsq
>1651	Condition	 
>1652	EqualityExpression	elementFlag == EF_HURT
>1653	Identifier	EF_HURT
>1654	Identifier	elementFlag
>1655	CompoundStatement	 
>1656	ExpressionStatement	 
>1657	CallExpression	dsq -> game -> fillGridFromQuad ( this , OT_INVISIBLE , true )
>1658	ArgumentList	this
>1659	Argument	true
>1660	Identifier	true
>1661	Argument	OT_INVISIBLE
>1662	Identifier	OT_INVISIBLE
>1663	Argument	this
>1664	Identifier	this
>1665	Callee	dsq -> game -> fillGridFromQuad
>1666	PtrMemberAccess	dsq -> game -> fillGridFromQuad
>1667	Identifier	fillGridFromQuad
>1668	PtrMemberAccess	dsq -> game
>1669	Identifier	game
>1670	Identifier	dsq
>1671	Condition	 
>1672	EqualityExpression	elementFlag == EF_SOLID
>1673	Identifier	EF_SOLID
>1674	Identifier	elementFlag
>1675	Condition	 
>1676	AndExpression	life == 1 && elementActive
>1677	Identifier	elementActive
>1678	EqualityExpression	life == 1
>1679	PrimaryExpression	1
>1680	Identifier	life
<3=5,4
<9=11,10
<11=37,33,29,23,19,12
<12=13
<13=17,14
<14=15
<15=16
<17=18
<19=20
<20=22,21
<23=24
<24=28,25
<25=27,26
<29=30
<30=32,31
<33=34
<34=36,35
<37=38
<38=40,39
<52=55,54,53
<55=60,59,58,56
<56=57
<60=62,61
<62=63
<63=65,64
<70=73,72,71
<73=74
<74=83,75
<75=82,80,76
<76=77
<77=79,78
<80=81
<83=84
<90=102,101,91
<91=98,95,92
<92=94,93
<95=97,96
<98=100,99
<102=258,251,239,232,223,103
<103=203,104
<104=190,105
<105=170,106
<106=164,158,148,135,127,121,113,107
<107=108
<108=110,109
<110=112,111
<113=114
<114=118,115
<115=117,116
<118=120,119
<121=122
<122=124,123
<124=126,125
<127=128
<128=134,129
<129=131,130
<131=133,132
<135=136
<136=147,137
<137=145,138
<138=139
<139=140
<140=144,141
<141=143,142
<145=146
<148=149
<149=157,150
<150=154,151
<151=153,152
<154=156,155
<158=159
<159=161,160
<161=163,162
<164=165
<165=167,166
<167=169,168
<170=171
<171=181,172
<172=178,173
<173=175,174
<175=177,176
<178=180,179
<181=187,182
<182=184,183
<184=186,185
<187=189,188
<190=191
<191=202,201,192
<192=200,193
<193=195,194
<195=199,196
<196=198,197
<203=204
<204=214,205
<205=211,206
<206=208,207
<208=210,209
<211=213,212
<214=220,215
<215=217,216
<217=219,218
<220=222,221
<223=224
<224=231,230,225
<225=229,226
<226=228,227
<232=233
<233=238,237,234
<234=236,235
<239=240
<240=248,241
<241=243,242
<243=247,244
<244=246,245
<248=250,249
<251=252
<252=257,256,253
<253=255,254
<258=259
<259=266,265,260
<260=264,261
<261=263,262
<301=307,306,302
<302=303
<303=305,304
<307=308
<308=741,309
<309=739,730,729,727,311,310
<311=312
<312=718,617,313
<313=613,321,314
<314=315
<315=316
<316=317
<317=319,318
<319=320
<321=604,597,590,571,416,387,379,327,322
<322=323
<323=325,324
<325=326
<327=373,351,328
<328=329
<329=343,330
<330=337,331
<331=332
<332=334,333
<334=336,335
<337=338
<338=340,339
<340=342,341
<343=344
<344=348,345
<345=347,346
<348=350,349
<351=365,352
<352=359,353
<353=354
<354=356,355
<356=358,357
<359=360
<360=362,361
<362=364,363
<365=366
<366=370,367
<367=369,368
<370=372,371
<373=374
<374=376,375
<376=378,377
<379=380
<380=384,381
<381=383,382
<384=386,385
<387=410,388
<388=402,389
<389=396,390
<390=391
<391=393,392
<393=395,394
<396=397
<397=399,398
<399=401,400
<402=403
<403=407,404
<404=406,405
<407=409,408
<410=411
<411=413,412
<413=415,414
<416=563,552,549,417
<417=535,524,515,472,418
<418=461,419
<419=420
<420=455,421
<421=422
<422=448,423
<423=437,424
<424=430,425
<425=429,426
<426=428,427
<430=432,431
<432=434,433
<434=436,435
<437=441,438
<438=440,439
<441=443,442
<443=445,444
<445=447,446
<448=450,449
<450=452,451
<452=454,453
<455=456
<456=458,457
<458=460,459
<461=462
<462=471,463
<463=465,464
<465=466
<466=468,467
<468=470,469
<472=473
<473=508,474
<474=489,475
<475=477,476
<477=487,478
<478=479
<479=480
<480=484,481
<481=483,482
<484=486,485
<487=488
<489=506,490
<490=491
<491=492
<492=503,493
<493=495,494
<495=497,496
<497=501,498
<498=499
<499=500
<501=502
<503=505,504
<506=507
<508=510,509
<510=512,511
<512=514,513
<515=520,516
<516=517
<517=519,518
<520=521
<521=523,522
<524=531,525
<525=526
<526=530,527
<527=529,528
<531=532
<532=534,533
<535=536
<536=548,547,537
<537=546,538
<538=540,539
<540=544,541
<541=542
<542=543
<544=545
<549=551,550
<552=553
<553=562,554
<554=556,555
<556=557
<557=559,558
<559=561,560
<563=564
<564=565
<565=570,569,566
<566=568,567
<571=572
<572=589,588,573
<573=587,574
<574=585,575
<575=576
<576=577
<577=579,578
<579=580
<580=582,581
<582=584,583
<585=586
<590=591
<591=596,595,592
<592=594,593
<597=598
<598=603,602,599
<599=601,600
<604=605
<605=612,611,606
<606=610,607
<607=609,608
<613=614
<614=616,615
<617=714,618
<618=708,692,683,674,664,645,633,625,619
<619=620
<620=622,621
<622=624,623
<625=626
<626=630,627
<627=629,628
<630=632,631
<633=634
<634=642,635
<635=637,636
<637=639,638
<639=641,640
<642=644,643
<645=656,646
<646=647
<647=653,648
<648=652,649
<649=651,650
<653=655,654
<656=657
<657=659,658
<659=661,660
<661=663,662
<664=665
<665=671,666
<666=668,667
<668=670,669
<671=673,672
<674=679,675
<675=676
<676=678,677
<679=680
<680=682,681
<683=688,684
<684=685
<685=687,686
<688=689
<689=691,690
<692=693
<693=707,706,694
<694=705,695
<695=697,696
<697=699,698
<699=700
<700=702,701
<702=704,703
<708=709
<709=711,710
<711=713,712
<714=715
<715=717,716
<718=719
<719=726,725,720
<720=724,721
<721=723,722
<727=728
<730=731
<731=735,732
<732=733
<733=734
<735=736
<736=738,737
<739=740
<741=742
<742=744,743
<788=794,793,789
<789=790
<790=792,791
<794=830,795
<795=824,796
<796=817,807,797
<797=805,798
<798=799
<799=803,800
<800=801
<801=802
<803=804
<805=806
<807=815,808
<808=809
<809=813,810
<810=811
<811=812
<813=814
<815=816
<817=818
<818=822,819
<819=820
<820=821
<822=823
<824=825
<825=829,826
<826=828,827
<830=831
<831=835,832
<832=833
<833=834
<835=836
<847=849,848
<849=850
<850=851
<851=853,852
<853=854
<858=861,860,859
<861=862
<862=863
<863=865,864
<865=866
<870=873,872,871
<873=874
<874=875
<875=882,879,876
<876=878,877
<879=881,880
<882=883
<890=893,892,891
<893=894
<894=1014,897,895
<895=896
<897=999,898
<898=991,985,982,899
<899=900
<900=974,970,967,901
<901=956,941,902
<902=930,903
<903=918,904
<904=905
<905=909,906
<906=908,907
<909=911,910
<911=913,912
<913=917,914
<914=916,915
<918=919
<919=923,920
<920=922,921
<923=925,924
<925=927,926
<927=929,928
<930=931
<931=940,932
<932=934,933
<934=935
<935=937,936
<937=939,938
<941=942
<942=955,954,943
<943=953,944
<944=946,945
<946=948,947
<948=950,949
<950=952,951
<956=957
<957=966,965,958
<958=964,959
<959=961,960
<961=963,962
<967=969,968
<970=971
<971=973,972
<974=975
<975=976
<976=981,980,977
<977=979,978
<982=984,983
<985=986
<986=990,987
<987=989,988
<991=992
<992=993
<993=998,997,994
<994=996,995
<999=1000
<1000=1013,1012,1001
<1001=1011,1002
<1002=1009,1003
<1003=1004
<1004=1005
<1005=1007,1006
<1007=1008
<1009=1010
<1014=1015
<1044=1050,1049,1045
<1045=1046
<1046=1048,1047
<1050=1337,1330,1323,1319,1305,1293,1069,1051
<1051=1067,1052
<1052=1061,1053
<1053=1054
<1054=1058,1055
<1055=1057,1056
<1058=1060,1059
<1061=1062
<1062=1064,1063
<1064=1066,1065
<1067=1068
<1069=1289,1070
<1070=1287,1242,1241,1239,1216,1215,1213,1087,1086,1084,1079,1072,1071
<1072=1073
<1073=1077,1074
<1074=1075
<1075=1076
<1077=1078
<1079=1080
<1080=1082,1081
<1082=1083
<1084=1085
<1087=1200,1176,1133,1125,1119,1111,1100,1095,1088
<1088=1089
<1089=1093,1090
<1090=1091
<1091=1092
<1093=1094
<1095=1096
<1096=1098,1097
<1098=1099
<1100=1101
<1101=1109,1102
<1102=1107,1103
<1103=1104
<1104=1106,1105
<1107=1108
<1109=1110
<1111=1112
<1112=1116,1113
<1113=1115,1114
<1116=1118,1117
<1119=1120
<1120=1122,1121
<1122=1124,1123
<1125=1126
<1126=1130,1127
<1127=1129,1128
<1130=1132,1131
<1133=1168,1157,1154,1134
<1134=1135
<1135=1136
<1136=1149,1137
<1137=1147,1138
<1138=1145,1139
<1139=1140
<1140=1144,1141
<1141=1143,1142
<1145=1146
<1147=1148
<1149=1151,1150
<1151=1153,1152
<1154=1156,1155
<1157=1158
<1158=1167,1159
<1159=1161,1160
<1161=1162
<1162=1164,1163
<1164=1166,1165
<1168=1169
<1169=1170
<1170=1175,1174,1171
<1171=1173,1172
<1176=1177
<1177=1199,1198,1178
<1178=1197,1179
<1179=1188,1180
<1180=1186,1181
<1181=1182
<1182=1183
<1183=1185,1184
<1186=1187
<1188=1195,1189
<1189=1190
<1190=1191
<1191=1193,1192
<1193=1194
<1195=1196
<1200=1201
<1201=1207,1202
<1202=1203
<1203=1204
<1204=1206,1205
<1207=1208
<1208=1210,1209
<1210=1212,1211
<1213=1214
<1216=1230,1224,1217
<1217=1218
<1218=1222,1219
<1219=1220
<1220=1221
<1222=1223
<1224=1225
<1225=1229,1226
<1226=1228,1227
<1230=1231
<1231=1237,1232
<1232=1233
<1233=1234
<1234=1236,1235
<1237=1238
<1239=1240
<1242=1250,1243
<1243=1244
<1244=1248,1245
<1245=1246
<1246=1247
<1248=1249
<1250=1251
<1251=1285,1252
<1252=1281,1277,1273,1269,1265,1261,1257,1253
<1253=1254
<1254=1256,1255
<1257=1258
<1258=1260,1259
<1261=1262
<1262=1264,1263
<1265=1266
<1266=1268,1267
<1269=1270
<1270=1272,1271
<1273=1274
<1274=1276,1275
<1277=1278
<1278=1280,1279
<1281=1282
<1282=1284,1283
<1285=1286
<1287=1288
<1289=1290
<1290=1292,1291
<1293=1299,1294
<1294=1295
<1295=1297,1296
<1297=1298
<1299=1300
<1300=1302,1301
<1302=1304,1303
<1305=1306
<1306=1318,1317,1307
<1307=1316,1308
<1308=1312,1309
<1309=1310
<1310=1311
<1312=1313
<1313=1315,1314
<1319=1320
<1320=1322,1321
<1323=1324
<1324=1326,1325
<1326=1327
<1327=1329,1328
<1330=1331
<1331=1335,1332
<1332=1333
<1333=1334
<1335=1336
<1337=1338
<1338=1340,1339
<1340=1341
<1384=1387,1386,1385
<1387=1544,1397,1392,1388
<1388=1389
<1389=1391,1390
<1392=1393
<1393=1395,1394
<1395=1396
<1397=1513,1398
<1398=1500,1403,1399
<1399=1400
<1400=1402,1401
<1403=1485,1430,1404
<1404=1405
<1405=1406
<1406=1420,1407
<1407=1408
<1408=1419,1409
<1409=1417,1410
<1410=1415,1413,1411
<1411=1412
<1413=1414
<1415=1416
<1417=1418
<1420=1421
<1421=1423,1422
<1423=1425,1424
<1425=1427,1426
<1427=1429,1428
<1430=1431
<1431=1477,1462,1459,1432
<1432=1433
<1433=1447,1434
<1434=1435
<1435=1446,1436
<1436=1444,1437
<1437=1442,1440,1438
<1438=1439
<1440=1441
<1442=1443
<1444=1445
<1447=1448
<1448=1458,1449
<1449=1451,1450
<1451=1453,1452
<1453=1455,1454
<1455=1457,1456
<1459=1461,1460
<1462=1463
<1463=1476,1464
<1464=1466,1465
<1466=1467
<1467=1469,1468
<1469=1471,1470
<1471=1473,1472
<1473=1475,1474
<1477=1478
<1478=1479
<1479=1484,1483,1480
<1480=1482,1481
<1485=1486
<1486=1499,1487
<1487=1489,1488
<1489=1490
<1490=1492,1491
<1492=1494,1493
<1494=1496,1495
<1496=1498,1497
<1500=1501
<1501=1512,1502
<1502=1510,1503
<1503=1508,1506,1504
<1504=1505
<1506=1507
<1508=1509
<1510=1511
<1513=1514
<1514=1536,1515
<1515=1525,1516
<1516=1518,1517
<1518=1520,1519
<1520=1522,1521
<1522=1524,1523
<1525=1533,1526
<1526=1528,1527
<1528=1530,1529
<1530=1532,1531
<1533=1535,1534
<1536=1538,1537
<1538=1539
<1539=1541,1540
<1541=1543,1542
<1544=1546,1545
<1546=1547
<1547=1549,1548
<1582=1585,1584,1583
<1585=1586
<1586=1675,1587
<1587=1588
<1588=1671,1655,1589
<1589=1590
<1590=1651,1635,1591
<1591=1592
<1592=1631,1615,1593
<1593=1594
<1594=1611,1595
<1595=1596
<1596=1597
<1597=1605,1598
<1598=1603,1601,1599
<1599=1600
<1601=1602
<1603=1604
<1605=1606
<1606=1608,1607
<1608=1610,1609
<1611=1612
<1612=1614,1613
<1615=1616
<1616=1617
<1617=1625,1618
<1618=1623,1621,1619
<1619=1620
<1621=1622
<1623=1624
<1625=1626
<1626=1628,1627
<1628=1630,1629
<1631=1632
<1632=1634,1633
<1635=1636
<1636=1637
<1637=1645,1638
<1638=1643,1641,1639
<1639=1640
<1641=1642
<1643=1644
<1645=1646
<1646=1648,1647
<1648=1650,1649
<1651=1652
<1652=1654,1653
<1655=1656
<1656=1657
<1657=1665,1658
<1658=1663,1661,1659
<1659=1660
<1661=1662
<1663=1664
<1665=1666
<1666=1668,1667
<1668=1670,1669
<1671=1672
<1672=1674,1673
<1675=1676
<1676=1678,1677
<1678=1680,1679
