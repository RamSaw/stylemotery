>3	FunctionDef	NyARPca2d_MatrixPCA_O2 
>4	ParameterList	NyARDoubleMatrix22 * o_matrix , TNyARDoublePoint2d * dv
>5	Parameter	 
>6	Identifier	dv
>7	ParameterType	TNyARDoublePoint2d *
>8	Parameter	 
>9	Identifier	o_matrix
>10	ParameterType	NyARDoubleMatrix22 *
>11	ReturnType	void
>12	CompoundStatement	 
>13	ReturnStatement	 
>14	ExpressionStatement	 
>15	AssignmentExpr	dv -> y = dv_y
>16	Identifier	dv_y
>17	PtrMemberAccess	dv -> y
>18	Identifier	y
>19	Identifier	dv
>20	ExpressionStatement	 
>21	AssignmentExpr	dv -> x = dv_x
>22	Identifier	dv_x
>23	PtrMemberAccess	dv -> x
>24	Identifier	x
>25	Identifier	dv
>26	IfStatement	if ( dv_y > t )
>27	ElseStatement	else
>28	CompoundStatement	 
>29	ExpressionStatement	 
>30	AssignmentExpr	o_matrix -> m11 = mat11
>31	Identifier	mat11
>32	PtrMemberAccess	o_matrix -> m11
>33	Identifier	m11
>34	Identifier	o_matrix
>35	ExpressionStatement	 
>36	AssignmentExpr	o_matrix -> m10 = mat10
>37	Identifier	mat10
>38	PtrMemberAccess	o_matrix -> m10
>39	Identifier	m10
>40	Identifier	o_matrix
>41	ExpressionStatement	 
>42	AssignmentExpr	o_matrix -> m01 = mat01
>43	Identifier	mat01
>44	PtrMemberAccess	o_matrix -> m01
>45	Identifier	m01
>46	Identifier	o_matrix
>47	ExpressionStatement	 
>48	AssignmentExpr	o_matrix -> m00 = mat00
>49	Identifier	mat00
>50	PtrMemberAccess	o_matrix -> m00
>51	Identifier	m00
>52	Identifier	o_matrix
>53	CompoundStatement	 
>54	ExpressionStatement	 
>55	AssignmentExpr	o_matrix -> m11 = mat01
>56	Identifier	mat01
>57	PtrMemberAccess	o_matrix -> m11
>58	Identifier	m11
>59	Identifier	o_matrix
>60	ExpressionStatement	 
>61	AssignmentExpr	o_matrix -> m10 = mat00
>62	Identifier	mat00
>63	PtrMemberAccess	o_matrix -> m10
>64	Identifier	m10
>65	Identifier	o_matrix
>66	ExpressionStatement	 
>67	AssignmentExpr	o_matrix -> m01 = mat11
>68	Identifier	mat11
>69	PtrMemberAccess	o_matrix -> m01
>70	Identifier	m01
>71	Identifier	o_matrix
>72	ExpressionStatement	 
>73	AssignmentExpr	o_matrix -> m00 = mat10
>74	Identifier	mat10
>75	PtrMemberAccess	o_matrix -> m00
>76	Identifier	m00
>77	Identifier	o_matrix
>78	ExpressionStatement	 
>79	AssignmentExpr	dv_x = t
>80	Identifier	t
>81	Identifier	dv_x
>82	ExpressionStatement	 
>83	AssignmentExpr	dv_y = dv_x
>84	Identifier	dv_x
>85	Identifier	dv_y
>86	ExpressionStatement	 
>87	AssignmentExpr	t = dv_y
>88	Identifier	dv_y
>89	Identifier	t
>90	Condition	 
>91	RelationalExpression	dv_y > t
>92	Identifier	t
>93	Identifier	dv_y
>94	ExpressionStatement	 
>95	AssignmentExpr	t = dv_x
>96	Identifier	dv_x
>97	Identifier	t
>98	DoStatement	do
>99	Condition	 
>100	RelationalExpression	abs ( ev1 ) > PCA_EPS * ( abs ( dv_x ) + abs ( dv_y ) )
>101	MultiplicativeExpression	PCA_EPS * ( abs ( dv_x ) + abs ( dv_y ) )
>102	AdditiveExpression	abs ( dv_x ) + abs ( dv_y )
>103	CallExpression	abs ( dv_y )
>104	ArgumentList	dv_y
>105	Argument	dv_y
>106	Identifier	dv_y
>107	Callee	abs
>108	Identifier	abs
>109	CallExpression	abs ( dv_x )
>110	ArgumentList	dv_x
>111	Argument	dv_x
>112	Identifier	dv_x
>113	Callee	abs
>114	Identifier	abs
>115	Identifier	PCA_EPS
>116	CallExpression	abs ( ev1 )
>117	ArgumentList	ev1
>118	Argument	ev1
>119	Identifier	ev1
>120	Callee	abs
>121	Identifier	abs
>122	CompoundStatement	 
>123	ExpressionStatement	 
>124	AssignmentExpr	mat11 = s * x + c * y
>125	AdditiveExpression	s * x + c * y
>126	MultiplicativeExpression	c * y
>127	Identifier	y
>128	Identifier	c
>129	MultiplicativeExpression	s * x
>130	Identifier	x
>131	Identifier	s
>132	Identifier	mat11
>133	ExpressionStatement	 
>134	AssignmentExpr	mat01 = c * x - s * y
>135	AdditiveExpression	c * x - s * y
>136	MultiplicativeExpression	s * y
>137	Identifier	y
>138	Identifier	s
>139	MultiplicativeExpression	c * x
>140	Identifier	x
>141	Identifier	c
>142	Identifier	mat01
>143	ExpressionStatement	 
>144	AssignmentExpr	y = mat11
>145	Identifier	mat11
>146	Identifier	y
>147	ExpressionStatement	 
>148	AssignmentExpr	x = mat01
>149	Identifier	mat01
>150	Identifier	x
>151	ExpressionStatement	 
>152	AssignmentExpr	mat10 = s * x + c * y
>153	AdditiveExpression	s * x + c * y
>154	MultiplicativeExpression	c * y
>155	Identifier	y
>156	Identifier	c
>157	MultiplicativeExpression	s * x
>158	Identifier	x
>159	Identifier	s
>160	Identifier	mat10
>161	ExpressionStatement	 
>162	AssignmentExpr	mat00 = c * x - s * y
>163	AdditiveExpression	c * x - s * y
>164	MultiplicativeExpression	s * y
>165	Identifier	y
>166	Identifier	s
>167	MultiplicativeExpression	c * x
>168	Identifier	x
>169	Identifier	c
>170	Identifier	mat00
>171	ExpressionStatement	 
>172	AssignmentExpr	y = mat10
>173	Identifier	mat10
>174	Identifier	y
>175	ExpressionStatement	 
>176	AssignmentExpr	x = mat00
>177	Identifier	mat00
>178	Identifier	x
>179	ExpressionStatement	 
>180	AssignmentExpr	ev1 += s * ( c * w - 2 * s * ev1 )
>181	MultiplicativeExpression	s * ( c * w - 2 * s * ev1 )
>182	AdditiveExpression	c * w - 2 * s * ev1
>183	MultiplicativeExpression	2 * s * ev1
>184	MultiplicativeExpression	s * ev1
>185	Identifier	ev1
>186	Identifier	s
>187	PrimaryExpression	2
>188	MultiplicativeExpression	c * w
>189	Identifier	w
>190	Identifier	c
>191	Identifier	s
>192	Identifier	ev1
>193	ExpressionStatement	 
>194	AssignmentExpr	dv_y += t
>195	Identifier	t
>196	Identifier	dv_y
>197	ExpressionStatement	 
>198	AssignmentExpr	dv_x -= t
>199	Identifier	t
>200	Identifier	dv_x
>201	ExpressionStatement	 
>202	AssignmentExpr	t = ( w * s + 2 * c * ev1 ) * s
>203	MultiplicativeExpression	( w * s + 2 * c * ev1 ) * s
>204	Identifier	s
>205	AdditiveExpression	w * s + 2 * c * ev1
>206	MultiplicativeExpression	2 * c * ev1
>207	MultiplicativeExpression	c * ev1
>208	Identifier	ev1
>209	Identifier	c
>210	PrimaryExpression	2
>211	MultiplicativeExpression	w * s
>212	Identifier	s
>213	Identifier	w
>214	Identifier	t
>215	ExpressionStatement	 
>216	AssignmentExpr	w = dv_x - dv_y
>217	AdditiveExpression	dv_x - dv_y
>218	Identifier	dv_y
>219	Identifier	dv_x
>220	Identifier	w
>221	IfStatement	if ( abs ( x ) >= abs ( y ) )
>222	ElseStatement	else
>223	CompoundStatement	 
>224	ExpressionStatement	 
>225	AssignmentExpr	c = t * s
>226	MultiplicativeExpression	t * s
>227	Identifier	s
>228	Identifier	t
>229	Identifier	c
>230	ExpressionStatement	 
>231	AssignmentExpr	s = 1.0 / sqrt ( t * t + 1 )
>232	MultiplicativeExpression	1.0 / sqrt ( t * t + 1 )
>233	CallExpression	sqrt ( t * t + 1 )
>234	ArgumentList	t * t + 1
>235	Argument	t * t + 1
>236	AdditiveExpression	t * t + 1
>237	PrimaryExpression	1
>238	MultiplicativeExpression	t * t
>239	Identifier	t
>240	Identifier	t
>241	Callee	sqrt
>242	Identifier	sqrt
>243	PrimaryExpression	1.0
>244	Identifier	s
>245	ExpressionStatement	 
>246	AssignmentExpr	t = - x / y
>247	MultiplicativeExpression	- x / y
>248	Identifier	y
>249	UnaryOp	- x
>250	Identifier	x
>251	UnaryOperator	-
>252	Identifier	t
>253	CompoundStatement	 
>254	IfStatement	if ( abs ( x ) > PCA_VZERO )
>255	ElseStatement	else
>256	CompoundStatement	 
>257	ExpressionStatement	 
>258	AssignmentExpr	s = 0.0
>259	PrimaryExpression	0.0
>260	Identifier	s
>261	ExpressionStatement	 
>262	AssignmentExpr	c = 1.0
>263	PrimaryExpression	1.0
>264	Identifier	c
>265	CompoundStatement	 
>266	ExpressionStatement	 
>267	AssignmentExpr	s = t * c
>268	MultiplicativeExpression	t * c
>269	Identifier	c
>270	Identifier	t
>271	Identifier	s
>272	ExpressionStatement	 
>273	AssignmentExpr	c = 1 / sqrt ( t * t + 1 )
>274	MultiplicativeExpression	1 / sqrt ( t * t + 1 )
>275	CallExpression	sqrt ( t * t + 1 )
>276	ArgumentList	t * t + 1
>277	Argument	t * t + 1
>278	AdditiveExpression	t * t + 1
>279	PrimaryExpression	1
>280	MultiplicativeExpression	t * t
>281	Identifier	t
>282	Identifier	t
>283	Callee	sqrt
>284	Identifier	sqrt
>285	PrimaryExpression	1
>286	Identifier	c
>287	ExpressionStatement	 
>288	AssignmentExpr	t = - y / x
>289	MultiplicativeExpression	- y / x
>290	Identifier	x
>291	UnaryOp	- y
>292	Identifier	y
>293	UnaryOperator	-
>294	Identifier	t
>295	Condition	 
>296	RelationalExpression	abs ( x ) > PCA_VZERO
>297	Identifier	PCA_VZERO
>298	CallExpression	abs ( x )
>299	ArgumentList	x
>300	Argument	x
>301	Identifier	x
>302	Callee	abs
>303	Identifier	abs
>304	Condition	 
>305	RelationalExpression	abs ( x ) >= abs ( y )
>306	CallExpression	abs ( y )
>307	ArgumentList	y
>308	Argument	y
>309	Identifier	y
>310	Callee	abs
>311	Identifier	abs
>312	CallExpression	abs ( x )
>313	ArgumentList	x
>314	Argument	x
>315	Identifier	x
>316	Callee	abs
>317	Identifier	abs
>318	ExpressionStatement	 
>319	AssignmentExpr	y = ev1
>320	Identifier	ev1
>321	Identifier	y
>322	ExpressionStatement	 
>323	AssignmentExpr	x = dv_x - dv_y + t / ( w + s )
>324	AdditiveExpression	dv_x - dv_y + t / ( w + s )
>325	AdditiveExpression	dv_y + t / ( w + s )
>326	MultiplicativeExpression	t / ( w + s )
>327	AdditiveExpression	w + s
>328	Identifier	s
>329	Identifier	w
>330	Identifier	t
>331	Identifier	dv_y
>332	Identifier	dv_x
>333	Identifier	x
>334	IfStatement	if ( w < 0 )
>335	CompoundStatement	 
>336	ExpressionStatement	 
>337	AssignmentExpr	s = - s
>338	UnaryOp	- s
>339	Identifier	s
>340	UnaryOperator	-
>341	Identifier	s
>342	Condition	 
>343	RelationalExpression	w < 0
>344	PrimaryExpression	0
>345	Identifier	w
>346	ExpressionStatement	 
>347	AssignmentExpr	s = sqrt ( w * w + t )
>348	CallExpression	sqrt ( w * w + t )
>349	ArgumentList	w * w + t
>350	Argument	w * w + t
>351	AdditiveExpression	w * w + t
>352	Identifier	t
>353	MultiplicativeExpression	w * w
>354	Identifier	w
>355	Identifier	w
>356	Callee	sqrt
>357	Identifier	sqrt
>358	Identifier	s
>359	ExpressionStatement	 
>360	AssignmentExpr	t = ev1 * ev1
>361	MultiplicativeExpression	ev1 * ev1
>362	Identifier	ev1
>363	Identifier	ev1
>364	Identifier	t
>365	ExpressionStatement	 
>366	AssignmentExpr	w = ( dv_x - dv_y ) / 2
>367	MultiplicativeExpression	( dv_x - dv_y ) / 2
>368	PrimaryExpression	2
>369	AdditiveExpression	dv_x - dv_y
>370	Identifier	dv_y
>371	Identifier	dv_x
>372	Identifier	w
>373	IfStatement	if ( iter > PCA_MAX_ITER )
>374	CompoundStatement	 
>375	BreakStatement	 
>376	Condition	 
>377	RelationalExpression	iter > PCA_MAX_ITER
>378	Identifier	PCA_MAX_ITER
>379	Identifier	iter
>380	ExpressionStatement	 
>381	IncDecOp	iter ++
>382	IncDec	++
>383	Identifier	iter
>384	IdentifierDeclStatement	 
>385	IdentifierDecl	iter = 0
>386	AssignmentExpr	iter = 0
>387	PrimaryExpression	0
>388	Identifier	iter
>389	Identifier	iter
>390	IdentifierDeclType	int
>391	ExpressionStatement	 
>392	AssignmentExpr	mat01 = mat10 = 0
>393	AssignmentExpr	mat10 = 0
>394	PrimaryExpression	0
>395	Identifier	mat10
>396	Identifier	mat01
>397	ExpressionStatement	 
>398	AssignmentExpr	mat00 = mat11 = 1
>399	AssignmentExpr	mat11 = 1
>400	PrimaryExpression	1
>401	Identifier	mat11
>402	Identifier	mat00
>403	ExpressionStatement	 
>404	AssignmentExpr	dv_y = o_matrix -> m11
>405	PtrMemberAccess	o_matrix -> m11
>406	Identifier	m11
>407	Identifier	o_matrix
>408	Identifier	dv_y
>409	ExpressionStatement	 
>410	AssignmentExpr	ev1 = o_matrix -> m01
>411	PtrMemberAccess	o_matrix -> m01
>412	Identifier	m01
>413	Identifier	o_matrix
>414	Identifier	ev1
>415	ExpressionStatement	 
>416	AssignmentExpr	dv_x = o_matrix -> m00
>417	PtrMemberAccess	o_matrix -> m00
>418	Identifier	m00
>419	Identifier	o_matrix
>420	Identifier	dv_x
>421	IdentifierDeclStatement	 
>422	IdentifierDecl	mat11
>423	Identifier	mat11
>424	IdentifierDeclType	double
>425	IdentifierDecl	mat10
>426	Identifier	mat10
>427	IdentifierDeclType	double
>428	IdentifierDecl	mat01
>429	Identifier	mat01
>430	IdentifierDeclType	double
>431	IdentifierDecl	mat00
>432	Identifier	mat00
>433	IdentifierDeclType	double
>434	IdentifierDeclStatement	 
>435	IdentifierDecl	dv_y
>436	Identifier	dv_y
>437	IdentifierDeclType	double
>438	IdentifierDecl	dv_x
>439	Identifier	dv_x
>440	IdentifierDeclType	double
>441	IdentifierDeclStatement	 
>442	IdentifierDecl	ev1
>443	Identifier	ev1
>444	IdentifierDeclType	double
>445	IdentifierDeclStatement	 
>446	IdentifierDecl	c
>447	Identifier	c
>448	IdentifierDeclType	double
>449	IdentifierDecl	y
>450	Identifier	y
>451	IdentifierDeclType	double
>452	IdentifierDecl	x
>453	Identifier	x
>454	IdentifierDeclType	double
>455	IdentifierDecl	s
>456	Identifier	s
>457	IdentifierDeclType	double
>458	IdentifierDecl	t
>459	Identifier	t
>460	IdentifierDeclType	double
>461	IdentifierDecl	w
>462	Identifier	w
>463	IdentifierDeclType	double
>496	FunctionDef	NyARPca2d_MatrixPCA_O2 
>497	ParameterList	const double * i_x , const double * i_y , int i_number_of_data , NyARDoubleMatrix22 * o_matrix , TNyARDoublePoint2d * \
>498	Parameter	 
>499	Identifier	o_mean
>500	ParameterType	TNyARDoublePoint2d *
>501	Parameter	 
>502	Identifier	o_ev
>503	ParameterType	TNyARDoublePoint2d *
>504	Parameter	 
>505	Identifier	o_matrix
>506	ParameterType	NyARDoubleMatrix22 *
>507	Parameter	 
>508	Identifier	i_number_of_data
>509	ParameterType	int
>510	Parameter	 
>511	Identifier	i_y
>512	ParameterType	const double *
>513	Parameter	 
>514	Identifier	i_x
>515	ParameterType	const double *
>516	ReturnType	void
>517	CompoundStatement	 
>518	ReturnStatement	 
>519	ExpressionStatement	 
>520	AssignmentExpr	o_mean -> y = sy
>521	Identifier	sy
>522	PtrMemberAccess	o_mean -> y
>523	Identifier	y
>524	Identifier	o_mean
>525	ExpressionStatement	 
>526	AssignmentExpr	o_mean -> x = sx
>527	Identifier	sx
>528	PtrMemberAccess	o_mean -> x
>529	Identifier	x
>530	Identifier	o_mean
>531	IfStatement	if ( o_ev -> y < PCA_VZERO )
>532	CompoundStatement	 
>533	ExpressionStatement	 
>534	AssignmentExpr	o_matrix -> m11 = 0.0
>535	PrimaryExpression	0.0
>536	PtrMemberAccess	o_matrix -> m11
>537	Identifier	m11
>538	Identifier	o_matrix
>539	ExpressionStatement	 
>540	AssignmentExpr	o_matrix -> m10 = 0.0
>541	PrimaryExpression	0.0
>542	PtrMemberAccess	o_matrix -> m10
>543	Identifier	m10
>544	Identifier	o_matrix
>545	ExpressionStatement	 
>546	AssignmentExpr	o_ev -> y = 0.0
>547	PrimaryExpression	0.0
>548	PtrMemberAccess	o_ev -> y
>549	Identifier	y
>550	Identifier	o_ev
>551	Condition	 
>552	RelationalExpression	o_ev -> y < PCA_VZERO
>553	Identifier	PCA_VZERO
>554	PtrMemberAccess	o_ev -> y
>555	Identifier	y
>556	Identifier	o_ev
>557	IfStatement	if ( o_ev -> x < PCA_VZERO )
>558	CompoundStatement	 
>559	ExpressionStatement	 
>560	AssignmentExpr	o_matrix -> m01 = 0.0
>561	PrimaryExpression	0.0
>562	PtrMemberAccess	o_matrix -> m01
>563	Identifier	m01
>564	Identifier	o_matrix
>565	ExpressionStatement	 
>566	AssignmentExpr	o_matrix -> m00 = 0.0
>567	PrimaryExpression	0.0
>568	PtrMemberAccess	o_matrix -> m00
>569	Identifier	m00
>570	Identifier	o_matrix
>571	ExpressionStatement	 
>572	AssignmentExpr	o_ev -> x = 0.0
>573	PrimaryExpression	0.0
>574	PtrMemberAccess	o_ev -> x
>575	Identifier	x
>576	Identifier	o_ev
>577	Condition	 
>578	RelationalExpression	o_ev -> x < PCA_VZERO
>579	Identifier	PCA_VZERO
>580	PtrMemberAccess	o_ev -> x
>581	Identifier	x
>582	Identifier	o_ev
>583	ExpressionStatement	 
>584	CallExpression	PCA_QRM ( o_matrix , o_ev )
>585	ArgumentList	o_matrix
>586	Argument	o_ev
>587	Identifier	o_ev
>588	Argument	o_matrix
>589	Identifier	o_matrix
>590	Callee	PCA_QRM
>591	Identifier	PCA_QRM
>592	ExpressionStatement	 
>593	AssignmentExpr	o_matrix -> m11 = w11
>594	Identifier	w11
>595	PtrMemberAccess	o_matrix -> m11
>596	Identifier	m11
>597	Identifier	o_matrix
>598	ExpressionStatement	 
>599	AssignmentExpr	o_matrix -> m01 = o_matrix -> m10 = w10
>600	AssignmentExpr	o_matrix -> m10 = w10
>601	Identifier	w10
>602	PtrMemberAccess	o_matrix -> m10
>603	Identifier	m10
>604	Identifier	o_matrix
>605	PtrMemberAccess	o_matrix -> m01
>606	Identifier	m01
>607	Identifier	o_matrix
>608	ExpressionStatement	 
>609	AssignmentExpr	o_matrix -> m00 = w00
>610	Identifier	w00
>611	PtrMemberAccess	o_matrix -> m00
>612	Identifier	m00
>613	Identifier	o_matrix
>614	ForStatement	for ( int i = 0 ; i < i_number_of_data ; i ++ )
>615	CompoundStatement	 
>616	ExpressionStatement	 
>617	AssignmentExpr	w11 += ( y * y )
>618	MultiplicativeExpression	y * y
>619	Identifier	y
>620	Identifier	y
>621	Identifier	w11
>622	ExpressionStatement	 
>623	AssignmentExpr	w10 += ( x * y )
>624	MultiplicativeExpression	x * y
>625	Identifier	y
>626	Identifier	x
>627	Identifier	w10
>628	ExpressionStatement	 
>629	AssignmentExpr	w00 += ( x * x )
>630	MultiplicativeExpression	x * x
>631	Identifier	x
>632	Identifier	x
>633	Identifier	w00
>634	IdentifierDeclStatement	 
>635	IdentifierDecl	y = ( i_y [ i ] - sy ) / srow
>636	AssignmentExpr	y = ( i_y [ i ] - sy ) / srow
>637	MultiplicativeExpression	( i_y [ i ] - sy ) / srow
>638	Identifier	srow
>639	AdditiveExpression	i_y [ i ] - sy
>640	Identifier	sy
>641	ArrayIndexing	i_y [ i ]
>642	Identifier	i
>643	Identifier	i_y
>644	Identifier	y
>645	Identifier	y
>646	IdentifierDeclType	const double
>647	IdentifierDeclStatement	 
>648	IdentifierDecl	x = ( i_x [ i ] - sx ) / srow
>649	AssignmentExpr	x = ( i_x [ i ] - sx ) / srow
>650	MultiplicativeExpression	( i_x [ i ] - sx ) / srow
>651	Identifier	srow
>652	AdditiveExpression	i_x [ i ] - sx
>653	Identifier	sx
>654	ArrayIndexing	i_x [ i ]
>655	Identifier	i
>656	Identifier	i_x
>657	Identifier	x
>658	Identifier	x
>659	IdentifierDeclType	const double
>660	IncDecOp	 
>661	IncDec	++
>662	Identifier	i
>663	Condition	 
>664	RelationalExpression	i < i_number_of_data
>665	Identifier	i_number_of_data
>666	Identifier	i
>667	ForInit	 
>668	IdentifierDeclStatement	int i = 0 ;
>669	IdentifierDecl	i = 0
>670	AssignmentExpr	i = 0
>671	PrimaryExpression	0
>672	Identifier	i
>673	Identifier	i
>674	IdentifierDeclType	int
>675	ExpressionStatement	 
>676	AssignmentExpr	w00 = w11 = w10 = 0.0
>677	AssignmentExpr	w11 = w10 = 0.0
>678	AssignmentExpr	w10 = 0.0
>679	PrimaryExpression	0.0
>680	Identifier	w10
>681	Identifier	w11
>682	Identifier	w00
>683	IdentifierDeclStatement	 
>684	IdentifierDecl	w10
>685	Identifier	w10
>686	IdentifierDeclType	double
>687	IdentifierDecl	w11
>688	Identifier	w11
>689	IdentifierDeclType	double
>690	IdentifierDecl	w00
>691	Identifier	w00
>692	IdentifierDeclType	double
>693	IdentifierDeclStatement	 
>694	IdentifierDecl	srow = sqrt ( ( double ) i_number_of_data )
>695	AssignmentExpr	srow = sqrt ( ( double ) i_number_of_data )
>696	CallExpression	sqrt ( ( double ) i_number_of_data )
>697	ArgumentList	( double ) i_number_of_data
>698	Argument	( double ) i_number_of_data
>699	CastExpression	( double ) i_number_of_data
>700	Identifier	i_number_of_data
>701	CastTarget	double
>702	Callee	sqrt
>703	Identifier	sqrt
>704	Identifier	srow
>705	Identifier	srow
>706	IdentifierDeclType	const double
>707	ExpressionStatement	 
>708	AssignmentExpr	sy = sy / i_number_of_data
>709	MultiplicativeExpression	sy / i_number_of_data
>710	Identifier	i_number_of_data
>711	Identifier	sy
>712	Identifier	sy
>713	ExpressionStatement	 
>714	AssignmentExpr	sx = sx / i_number_of_data
>715	MultiplicativeExpression	sx / i_number_of_data
>716	Identifier	i_number_of_data
>717	Identifier	sx
>718	Identifier	sx
>719	ForStatement	for ( int i = 0 ; i < i_number_of_data ; i ++ )
>720	CompoundStatement	 
>721	ExpressionStatement	 
>722	AssignmentExpr	sy += i_y [ i ]
>723	ArrayIndexing	i_y [ i ]
>724	Identifier	i
>725	Identifier	i_y
>726	Identifier	sy
>727	ExpressionStatement	 
>728	AssignmentExpr	sx += i_x [ i ]
>729	ArrayIndexing	i_x [ i ]
>730	Identifier	i
>731	Identifier	i_x
>732	Identifier	sx
>733	IncDecOp	 
>734	IncDec	++
>735	Identifier	i
>736	Condition	 
>737	RelationalExpression	i < i_number_of_data
>738	Identifier	i_number_of_data
>739	Identifier	i
>740	ForInit	 
>741	IdentifierDeclStatement	int i = 0 ;
>742	IdentifierDecl	i = 0
>743	AssignmentExpr	i = 0
>744	PrimaryExpression	0
>745	Identifier	i
>746	Identifier	i
>747	IdentifierDeclType	int
>748	IdentifierDeclStatement	 
>749	IdentifierDecl	sy = 0
>750	AssignmentExpr	sy = 0
>751	PrimaryExpression	0
>752	Identifier	sy
>753	Identifier	sy
>754	IdentifierDeclType	double
>755	IdentifierDeclStatement	 
>756	IdentifierDecl	sx = 0
>757	AssignmentExpr	sx = 0
>758	PrimaryExpression	0
>759	Identifier	sx
>760	Identifier	sx
>761	IdentifierDeclType	double
>796	FunctionDef	NyARPca2d_MatrixPCA_O2 
>797	ParameterList	const double * i_x , const double * i_y , int i_number_of_point , NyARDoubleMatrix22 * o_evec , TNyARDoublePoint2d * \
>798	Parameter	 
>799	Identifier	o_mean
>800	ParameterType	TNyARDoublePoint2d *
>801	Parameter	 
>802	Identifier	o_ev
>803	ParameterType	TNyARDoublePoint2d *
>804	Parameter	 
>805	Identifier	o_evec
>806	ParameterType	NyARDoubleMatrix22 *
>807	Parameter	 
>808	Identifier	i_number_of_point
>809	ParameterType	int
>810	Parameter	 
>811	Identifier	i_y
>812	ParameterType	const double *
>813	Parameter	 
>814	Identifier	i_x
>815	ParameterType	const double *
>816	ReturnType	void
>817	CompoundStatement	 
>818	ReturnStatement	 
>819	ExpressionStatement	 
>820	AssignmentExpr	o_ev -> y /= sum
>821	Identifier	sum
>822	PtrMemberAccess	o_ev -> y
>823	Identifier	y
>824	Identifier	o_ev
>825	ExpressionStatement	 
>826	AssignmentExpr	o_ev -> x /= sum
>827	Identifier	sum
>828	PtrMemberAccess	o_ev -> x
>829	Identifier	x
>830	Identifier	o_ev
>831	IdentifierDeclStatement	 
>832	IdentifierDecl	sum = o_ev -> x + o_ev -> y
>833	AssignmentExpr	sum = o_ev -> x + o_ev -> y
>834	AdditiveExpression	o_ev -> x + o_ev -> y
>835	PtrMemberAccess	o_ev -> y
>836	Identifier	y
>837	Identifier	o_ev
>838	PtrMemberAccess	o_ev -> x
>839	Identifier	x
>840	Identifier	o_ev
>841	Identifier	sum
>842	Identifier	sum
>843	IdentifierDeclType	const double
>844	ExpressionStatement	 
>845	CallExpression	PCA_PCA ( i_x , i_y , i_number_of_point , o_evec , o_ev , o_mean )
>846	ArgumentList	i_x
>847	Argument	o_mean
>848	Identifier	o_mean
>849	Argument	o_ev
>850	Identifier	o_ev
>851	Argument	o_evec
>852	Identifier	o_evec
>853	Argument	i_number_of_point
>854	Identifier	i_number_of_point
>855	Argument	i_y
>856	Identifier	i_y
>857	Argument	i_x
>858	Identifier	i_x
>859	Callee	PCA_PCA
>860	Identifier	PCA_PCA
<3=12,11,4
<4=8,5
<5=7,6
<8=10,9
<12=445,441,434,421,415,409,403,397,391,384,98,94,26,20,14,13
<14=15
<15=17,16
<17=19,18
<20=21
<21=23,22
<23=25,24
<26=90,53,27
<27=28
<28=47,41,35,29
<29=30
<30=32,31
<32=34,33
<35=36
<36=38,37
<38=40,39
<41=42
<42=44,43
<44=46,45
<47=48
<48=50,49
<50=52,51
<53=86,82,78,72,66,60,54
<54=55
<55=57,56
<57=59,58
<60=61
<61=63,62
<63=65,64
<66=67
<67=69,68
<69=71,70
<72=73
<73=75,74
<75=77,76
<78=79
<79=81,80
<82=83
<83=85,84
<86=87
<87=89,88
<90=91
<91=93,92
<94=95
<95=97,96
<98=122,99
<99=100
<100=116,101
<101=115,102
<102=109,103
<103=107,104
<104=105
<105=106
<107=108
<109=113,110
<110=111
<111=112
<113=114
<116=120,117
<117=118
<118=119
<120=121
<122=380,373,365,359,346,334,322,318,221,215,201,197,193,179,175,171,161,151,147,143,133,123
<123=124
<124=132,125
<125=129,126
<126=128,127
<129=131,130
<133=134
<134=142,135
<135=139,136
<136=138,137
<139=141,140
<143=144
<144=146,145
<147=148
<148=150,149
<151=152
<152=160,153
<153=157,154
<154=156,155
<157=159,158
<161=162
<162=170,163
<163=167,164
<164=166,165
<167=169,168
<171=172
<172=174,173
<175=176
<176=178,177
<179=180
<180=192,181
<181=191,182
<182=188,183
<183=187,184
<184=186,185
<188=190,189
<193=194
<194=196,195
<197=198
<198=200,199
<201=202
<202=214,203
<203=205,204
<205=211,206
<206=210,207
<207=209,208
<211=213,212
<215=216
<216=220,217
<217=219,218
<221=304,253,222
<222=223
<223=245,230,224
<224=225
<225=229,226
<226=228,227
<230=231
<231=244,232
<232=243,233
<233=241,234
<234=235
<235=236
<236=238,237
<238=240,239
<241=242
<245=246
<246=252,247
<247=249,248
<249=251,250
<253=254
<254=295,265,255
<255=256
<256=261,257
<257=258
<258=260,259
<261=262
<262=264,263
<265=287,272,266
<266=267
<267=271,268
<268=270,269
<272=273
<273=286,274
<274=285,275
<275=283,276
<276=277
<277=278
<278=280,279
<280=282,281
<283=284
<287=288
<288=294,289
<289=291,290
<291=293,292
<295=296
<296=298,297
<298=302,299
<299=300
<300=301
<302=303
<304=305
<305=312,306
<306=310,307
<307=308
<308=309
<310=311
<312=316,313
<313=314
<314=315
<316=317
<318=319
<319=321,320
<322=323
<323=333,324
<324=332,325
<325=331,326
<326=330,327
<327=329,328
<334=342,335
<335=336
<336=337
<337=341,338
<338=340,339
<342=343
<343=345,344
<346=347
<347=358,348
<348=356,349
<349=350
<350=351
<351=353,352
<353=355,354
<356=357
<359=360
<360=364,361
<361=363,362
<365=366
<366=372,367
<367=369,368
<369=371,370
<373=376,374
<374=375
<376=377
<377=379,378
<380=381
<381=383,382
<384=385
<385=390,389,386
<386=388,387
<391=392
<392=396,393
<393=395,394
<397=398
<398=402,399
<399=401,400
<403=404
<404=408,405
<405=407,406
<409=410
<410=414,411
<411=413,412
<415=416
<416=420,417
<417=419,418
<421=431,428,425,422
<422=424,423
<425=427,426
<428=430,429
<431=433,432
<434=438,435
<435=437,436
<438=440,439
<441=442
<442=444,443
<445=461,458,455,452,449,446
<446=448,447
<449=451,450
<452=454,453
<455=457,456
<458=460,459
<461=463,462
<496=517,516,497
<497=513,510,507,504,501,498
<498=500,499
<501=503,502
<504=506,505
<507=509,508
<510=512,511
<513=515,514
<517=755,748,719,713,707,693,683,675,614,608,598,592,583,557,531,525,519,518
<519=520
<520=522,521
<522=524,523
<525=526
<526=528,527
<528=530,529
<531=551,532
<532=545,539,533
<533=534
<534=536,535
<536=538,537
<539=540
<540=542,541
<542=544,543
<545=546
<546=548,547
<548=550,549
<551=552
<552=554,553
<554=556,555
<557=577,558
<558=571,565,559
<559=560
<560=562,561
<562=564,563
<565=566
<566=568,567
<568=570,569
<571=572
<572=574,573
<574=576,575
<577=578
<578=580,579
<580=582,581
<583=584
<584=590,585
<585=588,586
<586=587
<588=589
<590=591
<592=593
<593=595,594
<595=597,596
<598=599
<599=605,600
<600=602,601
<602=604,603
<605=607,606
<608=609
<609=611,610
<611=613,612
<614=667,663,660,615
<615=647,634,628,622,616
<616=617
<617=621,618
<618=620,619
<622=623
<623=627,624
<624=626,625
<628=629
<629=633,630
<630=632,631
<634=635
<635=646,645,636
<636=644,637
<637=639,638
<639=641,640
<641=643,642
<647=648
<648=659,658,649
<649=657,650
<650=652,651
<652=654,653
<654=656,655
<660=662,661
<663=664
<664=666,665
<667=668
<668=669
<669=674,673,670
<670=672,671
<675=676
<676=682,677
<677=681,678
<678=680,679
<683=690,687,684
<684=686,685
<687=689,688
<690=692,691
<693=694
<694=706,705,695
<695=704,696
<696=702,697
<697=698
<698=699
<699=701,700
<702=703
<707=708
<708=712,709
<709=711,710
<713=714
<714=718,715
<715=717,716
<719=740,736,733,720
<720=727,721
<721=722
<722=726,723
<723=725,724
<727=728
<728=732,729
<729=731,730
<733=735,734
<736=737
<737=739,738
<740=741
<741=742
<742=747,746,743
<743=745,744
<748=749
<749=754,753,750
<750=752,751
<755=756
<756=761,760,757
<757=759,758
<796=817,816,797
<797=813,810,807,804,801,798
<798=800,799
<801=803,802
<804=806,805
<807=809,808
<810=812,811
<813=815,814
<817=844,831,825,819,818
<819=820
<820=822,821
<822=824,823
<825=826
<826=828,827
<828=830,829
<831=832
<832=843,842,833
<833=841,834
<834=838,835
<835=837,836
<838=840,839
<844=845
<845=859,846
<846=857,855,853,851,849,847
<847=848
<849=850
<851=852
<853=854
<855=856
<857=858
<859=860
