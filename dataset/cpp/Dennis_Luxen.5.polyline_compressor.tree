>3	FunctionDef	PolylineCompressor 
>4	ParameterList	std 
>5	Parameter	 
>6	Identifier	numbers
>7	ParameterType	std 
>8	ReturnType	std 
>9	CompoundStatement	 
>10	ReturnStatement	 
>11	Identifier	output
>12	CompoundStatement	 
>13	ExpressionStatement	 
>14	AssignmentExpr	output += encode_number ( number )
>15	CallExpression	encode_number ( number )
>16	ArgumentList	number
>17	Argument	number
>18	Identifier	number
>19	Callee	encode_number
>20	Identifier	encode_number
>21	Identifier	output
>22	Statement	 
>23	Statement	 
>24	Label	 
>25	Identifier	number
>26	Statement	 
>27	Statement	 
>28	Statement	 
>29	Statement	 
>30	ForStatement	for ( std 
>31	CompoundStatement	 
>32	IfStatement	if ( numbers [ i ] < 0 )
>33	CompoundStatement	 
>34	ExpressionStatement	 
>35	AssignmentExpr	numbers [ i ] = ~ ( numbers [ i ] )
>36	UnaryOp	~ ( numbers [ i ] )
>37	ArrayIndexing	numbers [ i ]
>38	Identifier	i
>39	Identifier	numbers
>40	UnaryOperator	~
>41	ArrayIndexing	numbers [ i ]
>42	Identifier	i
>43	Identifier	numbers
>44	Condition	 
>45	RelationalExpression	numbers [ i ] < 0
>46	PrimaryExpression	0
>47	ArrayIndexing	numbers [ i ]
>48	Identifier	i
>49	Identifier	numbers
>50	ExpressionStatement	 
>51	AssignmentExpr	numbers [ i ] <<= 1
>52	PrimaryExpression	1
>53	ArrayIndexing	numbers [ i ]
>54	Identifier	i
>55	Identifier	numbers
>56	UnaryExpression	 
>57	Identifier	i
>58	IncDec	++
>59	Condition	 
>60	RelationalExpression	i < end
>61	Identifier	end
>62	Identifier	i
>63	ForInit	 
>64	IdentifierDeclStatement	std 
>65	IdentifierDecl	i = 0
>66	AssignmentExpr	i = 0
>67	PrimaryExpression	0
>68	Identifier	i
>69	Identifier	i
>70	IdentifierDeclType	std 
>71	ExpressionStatement	 
>72	AssignmentExpr	end = numbers . size ( )
>73	CallExpression	numbers . size ( )
>74	ArgumentList	 
>75	Callee	numbers . size
>76	MemberAccess	numbers . size
>77	Identifier	size
>78	Identifier	numbers
>79	Identifier	end
>80	Statement	 
>81	Statement	 
>82	IdentifierDeclStatement	 
>83	IdentifierDecl	output
>84	Identifier	output
>85	IdentifierDeclType	std 
>98	FunctionDef	PolylineCompressor 
>99	ParameterList	int number_to_encode
>100	Parameter	 
>101	Identifier	number_to_encode
>102	ParameterType	int
>103	ReturnType	std 
>104	CompoundStatement	 
>105	ReturnStatement	 
>106	Identifier	output
>107	ExpressionStatement	 
>108	AssignmentExpr	output += static_cast < char > ( number_to_encode )
>109	RelationalExpression	static_cast < char > ( number_to_encode )
>110	RelationalExpression	char > ( number_to_encode )
>111	Identifier	number_to_encode
>112	Identifier	char
>113	Identifier	static_cast
>114	Identifier	output
>115	ExpressionStatement	 
>116	AssignmentExpr	number_to_encode += 63
>117	PrimaryExpression	63
>118	Identifier	number_to_encode
>119	WhileStatement	while ( number_to_encode >= 0x20 )
>120	CompoundStatement	 
>121	ExpressionStatement	 
>122	AssignmentExpr	number_to_encode >>= 5
>123	PrimaryExpression	5
>124	Identifier	number_to_encode
>125	ExpressionStatement	 
>126	AssignmentExpr	output += static_cast < char > ( next_value )
>127	RelationalExpression	static_cast < char > ( next_value )
>128	RelationalExpression	char > ( next_value )
>129	Identifier	next_value
>130	Identifier	char
>131	Identifier	static_cast
>132	Identifier	output
>133	IdentifierDeclStatement	 
>134	IdentifierDecl	next_value = ( 0x20 | ( number_to_encode & 0x1f ) ) + 63
>135	AssignmentExpr	next_value = ( 0x20 | ( number_to_encode & 0x1f ) ) + 63
>136	AdditiveExpression	( 0x20 | ( number_to_encode & 0x1f ) ) + 63
>137	PrimaryExpression	63
>138	InclusiveOrExpression	0x20 | ( number_to_encode & 0x1f )
>139	BitAndExpression	number_to_encode & 0x1f
>140	PrimaryExpression	0x1f
>141	Identifier	number_to_encode
>142	PrimaryExpression	0x20
>143	Identifier	next_value
>144	Identifier	next_value
>145	IdentifierDeclType	const int
>146	Condition	 
>147	RelationalExpression	number_to_encode >= 0x20
>148	PrimaryExpression	0x20
>149	Identifier	number_to_encode
>150	IdentifierDeclStatement	 
>151	IdentifierDecl	output
>152	Identifier	output
>153	IdentifierDeclType	std 
>162	FunctionDef	PolylineCompressor 
>163	ParameterList	const std 
>164	Parameter	 
>165	Identifier	polyline
>166	ParameterType	const std 
>167	ReturnType	std 
>168	CompoundStatement	 
>169	ReturnStatement	 
>170	CallExpression	encode_vector ( delta_numbers )
>171	ArgumentList	delta_numbers
>172	Argument	delta_numbers
>173	Identifier	delta_numbers
>174	Callee	encode_vector
>175	Identifier	encode_vector
>176	CompoundStatement	 
>177	IfStatement	if ( segment . necessary )
>178	CompoundStatement	 
>179	ExpressionStatement	 
>180	AssignmentExpr	previous_coordinate = segment . location
>181	MemberAccess	segment . location
>182	Identifier	location
>183	Identifier	segment
>184	Identifier	previous_coordinate
>185	ExpressionStatement	 
>186	CallExpression	delta_numbers . emplace_back ( lon_diff )
>187	ArgumentList	lon_diff
>188	Argument	lon_diff
>189	Identifier	lon_diff
>190	Callee	delta_numbers . emplace_back
>191	MemberAccess	delta_numbers . emplace_back
>192	Identifier	emplace_back
>193	Identifier	delta_numbers
>194	ExpressionStatement	 
>195	CallExpression	delta_numbers . emplace_back ( lat_diff )
>196	ArgumentList	lat_diff
>197	Argument	lat_diff
>198	Identifier	lat_diff
>199	Callee	delta_numbers . emplace_back
>200	MemberAccess	delta_numbers . emplace_back
>201	Identifier	emplace_back
>202	Identifier	delta_numbers
>203	IdentifierDeclStatement	 
>204	IdentifierDecl	lon_diff = segment . location . lon - previous_coordinate . lon
>205	AssignmentExpr	lon_diff = segment . location . lon - previous_coordinate . lon
>206	AdditiveExpression	segment . location . lon - previous_coordinate . lon
>207	MemberAccess	previous_coordinate . lon
>208	Identifier	lon
>209	Identifier	previous_coordinate
>210	MemberAccess	segment . location . lon
>211	Identifier	lon
>212	MemberAccess	segment . location
>213	Identifier	location
>214	Identifier	segment
>215	Identifier	lon_diff
>216	Identifier	lon_diff
>217	IdentifierDeclType	const int
>218	IdentifierDeclStatement	 
>219	IdentifierDecl	lat_diff = segment . location . lat - previous_coordinate . lat
>220	AssignmentExpr	lat_diff = segment . location . lat - previous_coordinate . lat
>221	AdditiveExpression	segment . location . lat - previous_coordinate . lat
>222	MemberAccess	previous_coordinate . lat
>223	Identifier	lat
>224	Identifier	previous_coordinate
>225	MemberAccess	segment . location . lat
>226	Identifier	lat
>227	MemberAccess	segment . location
>228	Identifier	location
>229	Identifier	segment
>230	Identifier	lat_diff
>231	Identifier	lat_diff
>232	IdentifierDeclType	const int
>233	Condition	 
>234	MemberAccess	segment . necessary
>235	Identifier	necessary
>236	Identifier	segment
>237	Statement	 
>238	Statement	 
>239	Label	 
>240	Identifier	segment
>241	Statement	 
>242	Statement	 
>243	Statement	 
>244	Statement	 
>245	Statement	 
>246	IdentifierDeclStatement	 
>247	IdentifierDecl	previous_coordinate = { 0 , 0 }
>248	AssignmentExpr	previous_coordinate = { 0 , 0 }
>249	InitializerList	0
>250	PrimaryExpression	0
>251	PrimaryExpression	0
>252	Identifier	previous_coordinate
>253	Identifier	previous_coordinate
>254	IdentifierDeclType	FixedPointCoordinate
>255	ExpressionStatement	 
>256	CallExpression	delta_numbers . reserve ( ( polyline . size ( ) - 1 ) * 2 )
>257	ArgumentList	( polyline . size ( ) - 1 ) * 2
>258	Argument	( polyline . size ( ) - 1 ) * 2
>259	MultiplicativeExpression	( polyline . size ( ) - 1 ) * 2
>260	PrimaryExpression	2
>261	AdditiveExpression	polyline . size ( ) - 1
>262	PrimaryExpression	1
>263	CallExpression	polyline . size ( )
>264	ArgumentList	 
>265	Callee	polyline . size
>266	MemberAccess	polyline . size
>267	Identifier	size
>268	Identifier	polyline
>269	Callee	delta_numbers . reserve
>270	MemberAccess	delta_numbers . reserve
>271	Identifier	reserve
>272	Identifier	delta_numbers
>273	IdentifierDeclStatement	 
>274	IdentifierDecl	delta_numbers
>275	Identifier	delta_numbers
>276	IdentifierDeclType	std 
>277	IfStatement	if ( polyline . empty ( ) )
>278	CompoundStatement	 
>279	ExpressionStatement	 
>280	CompoundStatement	 
>281	Statement	 
>282	Condition	 
>283	CallExpression	polyline . empty ( )
>284	ArgumentList	 
>285	Callee	polyline . empty
>286	MemberAccess	polyline . empty
>287	Identifier	empty
>288	Identifier	polyline
>307	FunctionDef	PolylineCompressor 
>308	ParameterList	const std 
>309	Parameter	 
>310	Identifier	geometry_string
>311	ParameterType	const std 
>312	ReturnType	std 
>313	CompoundStatement	 
>314	ReturnStatement	 
>315	Identifier	new_coordinates
>316	WhileStatement	while ( index < len )
>317	CompoundStatement	 
>318	ExpressionStatement	 
>319	CallExpression	new_coordinates . push_back ( p )
>320	ArgumentList	p
>321	Argument	p
>322	Identifier	p
>323	Callee	new_coordinates . push_back
>324	MemberAccess	new_coordinates . push_back
>325	Identifier	push_back
>326	Identifier	new_coordinates
>327	ExpressionStatement	 
>328	AssignmentExpr	p . lon = COORDINATE_PRECISION * ( ( ( double ) lng / 1E6 ) )
>329	MultiplicativeExpression	COORDINATE_PRECISION * ( ( ( double ) lng / 1E6 ) )
>330	MultiplicativeExpression	( double ) lng / 1E6
>331	PrimaryExpression	1E6
>332	CastExpression	( double ) lng
>333	Identifier	lng
>334	CastTarget	double
>335	Identifier	COORDINATE_PRECISION
>336	MemberAccess	p . lon
>337	Identifier	lon
>338	Identifier	p
>339	ExpressionStatement	 
>340	AssignmentExpr	p . lat = COORDINATE_PRECISION * ( ( ( double ) lat / 1E6 ) )
>341	MultiplicativeExpression	COORDINATE_PRECISION * ( ( ( double ) lat / 1E6 ) )
>342	MultiplicativeExpression	( double ) lat / 1E6
>343	PrimaryExpression	1E6
>344	CastExpression	( double ) lat
>345	Identifier	lat
>346	CastTarget	double
>347	Identifier	COORDINATE_PRECISION
>348	MemberAccess	p . lat
>349	Identifier	lat
>350	Identifier	p
>351	IdentifierDeclStatement	 
>352	IdentifierDecl	p
>353	Identifier	p
>354	IdentifierDeclType	FixedPointCoordinate
>355	ExpressionStatement	 
>356	AssignmentExpr	lng += dlng
>357	Identifier	dlng
>358	Identifier	lng
>359	IdentifierDeclStatement	 
>360	IdentifierDecl	dlng = ( ( result & 1 ) != 0 ? ~ ( result >> 1 ) 
>361	AssignmentExpr	dlng = ( ( result & 1 ) != 0 ? ~ ( result >> 1 ) 
>362	ConditionalExpression	( result & 1 ) != 0 ? ~ ( result >> 1 ) 
>363	ShiftExpression	result >> 1
>364	PrimaryExpression	1
>365	Identifier	result
>366	UnaryOp	~ ( result >> 1 )
>367	ShiftExpression	result >> 1
>368	PrimaryExpression	1
>369	Identifier	result
>370	UnaryOperator	~
>371	Condition	( result & 1 ) != 0
>372	EqualityExpression	( result & 1 ) != 0
>373	PrimaryExpression	0
>374	BitAndExpression	result & 1
>375	PrimaryExpression	1
>376	Identifier	result
>377	Identifier	dlng
>378	Identifier	dlng
>379	IdentifierDeclType	int
>380	DoStatement	do
>381	Condition	 
>382	RelationalExpression	b >= 0x20
>383	PrimaryExpression	0x20
>384	Identifier	b
>385	CompoundStatement	 
>386	ExpressionStatement	 
>387	AssignmentExpr	shift += 5
>388	PrimaryExpression	5
>389	Identifier	shift
>390	ExpressionStatement	 
>391	AssignmentExpr	result |= ( b & 0x1f ) << shift
>392	ShiftExpression	( b & 0x1f ) << shift
>393	Identifier	shift
>394	BitAndExpression	b & 0x1f
>395	PrimaryExpression	0x1f
>396	Identifier	b
>397	Identifier	result
>398	ExpressionStatement	 
>399	AssignmentExpr	b = geometry_string . at ( index ++ ) - 63
>400	AdditiveExpression	geometry_string . at ( index ++ ) - 63
>401	PrimaryExpression	63
>402	CallExpression	geometry_string . at ( index ++ )
>403	ArgumentList	index ++
>404	Argument	index ++
>405	IncDecOp	index ++
>406	IncDec	++
>407	Identifier	index
>408	Callee	geometry_string . at
>409	MemberAccess	geometry_string . at
>410	Identifier	at
>411	Identifier	geometry_string
>412	Identifier	b
>413	ExpressionStatement	 
>414	AssignmentExpr	result = 0
>415	PrimaryExpression	0
>416	Identifier	result
>417	ExpressionStatement	 
>418	AssignmentExpr	shift = 0
>419	PrimaryExpression	0
>420	Identifier	shift
>421	ExpressionStatement	 
>422	AssignmentExpr	lat += dlat
>423	Identifier	dlat
>424	Identifier	lat
>425	IdentifierDeclStatement	 
>426	IdentifierDecl	dlat = ( ( result & 1 ) != 0 ? ~ ( result >> 1 ) 
>427	AssignmentExpr	dlat = ( ( result & 1 ) != 0 ? ~ ( result >> 1 ) 
>428	ConditionalExpression	( result & 1 ) != 0 ? ~ ( result >> 1 ) 
>429	ShiftExpression	result >> 1
>430	PrimaryExpression	1
>431	Identifier	result
>432	UnaryOp	~ ( result >> 1 )
>433	ShiftExpression	result >> 1
>434	PrimaryExpression	1
>435	Identifier	result
>436	UnaryOperator	~
>437	Condition	( result & 1 ) != 0
>438	EqualityExpression	( result & 1 ) != 0
>439	PrimaryExpression	0
>440	BitAndExpression	result & 1
>441	PrimaryExpression	1
>442	Identifier	result
>443	Identifier	dlat
>444	Identifier	dlat
>445	IdentifierDeclType	int
>446	DoStatement	do
>447	Condition	 
>448	RelationalExpression	b >= 0x20
>449	PrimaryExpression	0x20
>450	Identifier	b
>451	CompoundStatement	 
>452	ExpressionStatement	 
>453	AssignmentExpr	shift += 5
>454	PrimaryExpression	5
>455	Identifier	shift
>456	ExpressionStatement	 
>457	AssignmentExpr	result |= ( b & 0x1f ) << shift
>458	ShiftExpression	( b & 0x1f ) << shift
>459	Identifier	shift
>460	BitAndExpression	b & 0x1f
>461	PrimaryExpression	0x1f
>462	Identifier	b
>463	Identifier	result
>464	ExpressionStatement	 
>465	AssignmentExpr	b = geometry_string . at ( index ++ ) - 63
>466	AdditiveExpression	geometry_string . at ( index ++ ) - 63
>467	PrimaryExpression	63
>468	CallExpression	geometry_string . at ( index ++ )
>469	ArgumentList	index ++
>470	Argument	index ++
>471	IncDecOp	index ++
>472	IncDec	++
>473	Identifier	index
>474	Callee	geometry_string . at
>475	MemberAccess	geometry_string . at
>476	Identifier	at
>477	Identifier	geometry_string
>478	Identifier	b
>479	IdentifierDeclStatement	 
>480	IdentifierDecl	result = 0
>481	AssignmentExpr	result = 0
>482	PrimaryExpression	0
>483	Identifier	result
>484	Identifier	result
>485	IdentifierDeclType	int
>486	IdentifierDecl	shift = 0
>487	AssignmentExpr	shift = 0
>488	PrimaryExpression	0
>489	Identifier	shift
>490	Identifier	shift
>491	IdentifierDeclType	int
>492	IdentifierDecl	b
>493	Identifier	b
>494	IdentifierDeclType	int
>495	Condition	 
>496	RelationalExpression	index < len
>497	Identifier	len
>498	Identifier	index
>499	IdentifierDeclStatement	 
>500	IdentifierDecl	lng = 0
>501	AssignmentExpr	lng = 0
>502	PrimaryExpression	0
>503	Identifier	lng
>504	Identifier	lng
>505	IdentifierDeclType	int
>506	IdentifierDecl	lat = 0
>507	AssignmentExpr	lat = 0
>508	PrimaryExpression	0
>509	Identifier	lat
>510	Identifier	lat
>511	IdentifierDeclType	int
>512	IdentifierDeclStatement	 
>513	IdentifierDecl	len = geometry_string . size ( )
>514	AssignmentExpr	len = geometry_string . size ( )
>515	CallExpression	geometry_string . size ( )
>516	ArgumentList	 
>517	Callee	geometry_string . size
>518	MemberAccess	geometry_string . size
>519	Identifier	size
>520	Identifier	geometry_string
>521	Identifier	len
>522	Identifier	len
>523	IdentifierDeclType	int
>524	IdentifierDecl	index = 0
>525	AssignmentExpr	index = 0
>526	PrimaryExpression	0
>527	Identifier	index
>528	Identifier	index
>529	IdentifierDeclType	int
>530	IdentifierDeclStatement	 
>531	IdentifierDecl	new_coordinates
>532	Identifier	new_coordinates
>533	IdentifierDeclType	std 
<3=9,8,4
<4=5
<5=7,6
<9=82,81,80,71,30,29,28,27,26,24,23,22,12,10
<10=11
<12=13
<13=14
<14=21,15
<15=19,16
<16=17
<17=18
<19=20
<24=25
<30=63,59,56,31
<31=50,32
<32=44,33
<33=34
<34=35
<35=41,36
<36=40,37
<37=39,38
<41=43,42
<44=45
<45=47,46
<47=49,48
<50=51
<51=53,52
<53=55,54
<56=58,57
<59=60
<60=62,61
<63=64
<64=65
<65=70,69,66
<66=68,67
<71=72
<72=79,73
<73=75,74
<75=76
<76=78,77
<82=83
<83=85,84
<98=104,103,99
<99=100
<100=102,101
<104=150,119,115,107,105
<105=106
<107=108
<108=114,109
<109=113,110
<110=112,111
<115=116
<116=118,117
<119=146,120
<120=133,125,121
<121=122
<122=124,123
<125=126
<126=132,127
<127=131,128
<128=130,129
<133=134
<134=145,144,135
<135=143,136
<136=138,137
<138=142,139
<139=141,140
<146=147
<147=149,148
<150=151
<151=153,152
<162=168,167,163
<163=164
<164=166,165
<168=277,273,255,246,245,244,243,242,241,239,238,237,176,169
<169=170
<170=174,171
<171=172
<172=173
<174=175
<176=177
<177=233,178
<178=218,203,194,185,179
<179=180
<180=184,181
<181=183,182
<185=186
<186=190,187
<187=188
<188=189
<190=191
<191=193,192
<194=195
<195=199,196
<196=197
<197=198
<199=200
<200=202,201
<203=204
<204=217,216,205
<205=215,206
<206=210,207
<207=209,208
<210=212,211
<212=214,213
<218=219
<219=232,231,220
<220=230,221
<221=225,222
<222=224,223
<225=227,226
<227=229,228
<233=234
<234=236,235
<239=240
<246=247
<247=254,253,248
<248=252,249
<249=251,250
<255=256
<256=269,257
<257=258
<258=259
<259=261,260
<261=263,262
<263=265,264
<265=266
<266=268,267
<269=270
<270=272,271
<273=274
<274=276,275
<277=282,278
<278=281,280,279
<282=283
<283=285,284
<285=286
<286=288,287
<307=313,312,308
<308=309
<309=311,310
<313=530,512,499,316,314
<314=315
<316=495,317
<317=479,446,425,421,417,413,380,359,355,351,339,327,318
<318=319
<319=323,320
<320=321
<321=322
<323=324
<324=326,325
<327=328
<328=336,329
<329=335,330
<330=332,331
<332=334,333
<336=338,337
<339=340
<340=348,341
<341=347,342
<342=344,343
<344=346,345
<348=350,349
<351=352
<352=354,353
<355=356
<356=358,357
<359=360
<360=379,378,361
<361=377,362
<362=371,366,363
<363=365,364
<366=370,367
<367=369,368
<371=372
<372=374,373
<374=376,375
<380=385,381
<381=382
<382=384,383
<385=398,390,386
<386=387
<387=389,388
<390=391
<391=397,392
<392=394,393
<394=396,395
<398=399
<399=412,400
<400=402,401
<402=408,403
<403=404
<404=405
<405=407,406
<408=409
<409=411,410
<413=414
<414=416,415
<417=418
<418=420,419
<421=422
<422=424,423
<425=426
<426=445,444,427
<427=443,428
<428=437,432,429
<429=431,430
<432=436,433
<433=435,434
<437=438
<438=440,439
<440=442,441
<446=451,447
<447=448
<448=450,449
<451=464,456,452
<452=453
<453=455,454
<456=457
<457=463,458
<458=460,459
<460=462,461
<464=465
<465=478,466
<466=468,467
<468=474,469
<469=470
<470=471
<471=473,472
<474=475
<475=477,476
<479=492,486,480
<480=485,484,481
<481=483,482
<486=491,490,487
<487=489,488
<492=494,493
<495=496
<496=498,497
<499=506,500
<500=505,504,501
<501=503,502
<506=511,510,507
<507=509,508
<512=524,513
<513=523,522,514
<514=521,515
<515=517,516
<517=518
<518=520,519
<524=529,528,525
<525=527,526
<530=531
<531=533,532
