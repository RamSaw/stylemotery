>11	FunctionDef	print_mode (int mode)
>12	ParameterList	int mode
>13	Parameter	 
>14	Identifier	mode
>15	ParameterType	int
>16	ReturnType	void
>17	CompoundStatement	 
>18	IfStatement	if ( mode == GemmProduct )
>19	ExpressionStatement	 
>20	ShiftExpression	std 
>21	PrimaryExpression	\"m\"
>22	Identifier	std 
>23	Condition	 
>24	EqualityExpression	mode == GemmProduct
>25	Identifier	GemmProduct
>26	Identifier	mode
>27	IfStatement	if ( mode == GemvProduct )
>28	ExpressionStatement	 
>29	ShiftExpression	std 
>30	PrimaryExpression	\"v\"
>31	Identifier	std 
>32	Condition	 
>33	EqualityExpression	mode == GemvProduct
>34	Identifier	GemvProduct
>35	Identifier	mode
>36	IfStatement	if ( mode == LazyCoeffBasedProductMode )
>37	ExpressionStatement	 
>38	ShiftExpression	std 
>39	PrimaryExpression	\"l\"
>40	Identifier	std 
>41	Condition	 
>42	EqualityExpression	mode == LazyCoeffBasedProductMode
>43	Identifier	LazyCoeffBasedProductMode
>44	Identifier	mode
>45	IfStatement	if ( mode == CoeffBasedProductMode )
>46	ExpressionStatement	 
>47	ShiftExpression	std 
>48	PrimaryExpression	\"c\"
>49	Identifier	std 
>50	Condition	 
>51	EqualityExpression	mode == CoeffBasedProductMode
>52	Identifier	CoeffBasedProductMode
>53	Identifier	mode
>54	IfStatement	if ( mode == OuterProduct )
>55	ExpressionStatement	 
>56	ShiftExpression	std 
>57	PrimaryExpression	\"o\"
>58	Identifier	std 
>59	Condition	 
>60	EqualityExpression	mode == OuterProduct
>61	Identifier	OuterProduct
>62	Identifier	mode
>63	IfStatement	if ( mode == InnerProduct )
>64	ExpressionStatement	 
>65	ShiftExpression	std 
>66	PrimaryExpression	\"i\"
>67	Identifier	std 
>68	Condition	 
>69	EqualityExpression	mode == InnerProduct
>70	Identifier	InnerProduct
>71	Identifier	mode
>82	FunctionDef	prod (const Lhs & a , const Rhs & b , Res & c)
>83	ParameterList	const Lhs & a , const Rhs & b , Res & c
>84	Parameter	 
>85	Identifier	c
>86	ParameterType	Res &
>87	Parameter	 
>88	Identifier	b
>89	ParameterType	const Rhs &
>90	Parameter	 
>91	Identifier	a
>92	ParameterType	const Lhs &
>93	ReturnType	EIGEN_DONT_INLINE void
>94	CompoundStatement	 
>95	ExpressionStatement	 
>96	CallExpression	Type ( a , b )
>97	ArgumentList	a
>98	Argument	b
>99	Identifier	b
>100	Argument	a
>101	Identifier	a
>102	Callee	Type
>103	Identifier	Type
>104	Statement	 
>105	Statement	 
>106	Statement	 
>107	Statement	 
>108	Statement	 
>109	Statement	 
>110	Statement	 
>111	Statement	 
>112	Statement	 
>113	Statement	 
>114	Statement	 
>115	Statement	 
>116	Statement	 
>117	Statement	 
>118	Statement	 
>119	Statement	 
>126	FunctionDef	bench_prod ()
>127	ParameterList	 
>128	ReturnType	EIGEN_DONT_INLINE void
>129	CompoundStatement	 
>130	ExpressionStatement	 
>131	ShiftExpression	std 
>132	ShiftExpression	int ( 1e-6 * n * rep / t . best ( ) ) << \"\t\"
>133	PrimaryExpression	\"\t\"
>134	CallExpression	int ( 1e-6 * n * rep / t . best ( ) )
>135	ArgumentList	1e-6 * n * rep / t . best ( )
>136	Argument	1e-6 * n * rep / t . best ( )
>137	MultiplicativeExpression	1e-6 * n * rep / t . best ( )
>138	MultiplicativeExpression	n * rep / t . best ( )
>139	MultiplicativeExpression	rep / t . best ( )
>140	CallExpression	t . best ( )
>141	ArgumentList	 
>142	Callee	t . best
>143	MemberAccess	t . best
>144	Identifier	best
>145	Identifier	t
>146	Identifier	rep
>147	Identifier	n
>148	PrimaryExpression	1e-6
>149	Callee	int
>150	Identifier	int
>151	Identifier	std 
>152	ExpressionStatement	 
>153	CallExpression	print_mode ( Mode )
>154	ArgumentList	Mode
>155	Argument	Mode
>156	Identifier	Mode
>157	Callee	print_mode
>158	Identifier	print_mode
>159	ExpressionStatement	 
>160	CallExpression	BENCH ( t , 5 , rep , prod < Mode > ( a , b , c ) )
>161	ArgumentList	t
>162	Argument	prod < Mode > ( a , b , c )
>163	RelationalExpression	prod < Mode > ( a , b , c )
>164	RelationalExpression	Mode > ( a , b , c )
>165	Expression	a , b , c
>166	Expression	b , c
>167	Identifier	c
>168	Identifier	b
>169	Identifier	a
>170	Identifier	Mode
>171	Identifier	prod
>172	Argument	rep
>173	Identifier	rep
>174	Argument	5
>175	PrimaryExpression	5
>176	Argument	t
>177	Identifier	t
>178	Callee	BENCH
>179	Identifier	BENCH
>180	ExpressionStatement	 
>181	CallExpression	t . reset ( )
>182	ArgumentList	 
>183	Callee	t . reset
>184	MemberAccess	t . reset
>185	Identifier	reset
>186	Identifier	t
>187	DoStatement	do
>188	Condition	 
>189	RelationalExpression	t . best ( ) < 0.1
>190	PrimaryExpression	0.1
>191	CallExpression	t . best ( )
>192	ArgumentList	 
>193	Callee	t . best
>194	MemberAccess	t . best
>195	Identifier	best
>196	Identifier	t
>197	CompoundStatement	 
>198	ExpressionStatement	 
>199	CallExpression	BENCH ( t , 1 , rep , prod < CoeffBasedProductMode > ( a , b , c ) )
>200	ArgumentList	t
>201	Argument	prod < CoeffBasedProductMode > ( a , b , c )
>202	RelationalExpression	prod < CoeffBasedProductMode > ( a , b , c )
>203	RelationalExpression	CoeffBasedProductMode > ( a , b , c )
>204	Expression	a , b , c
>205	Expression	b , c
>206	Identifier	c
>207	Identifier	b
>208	Identifier	a
>209	Identifier	CoeffBasedProductMode
>210	Identifier	prod
>211	Argument	rep
>212	Identifier	rep
>213	Argument	1
>214	PrimaryExpression	1
>215	Argument	t
>216	Identifier	t
>217	Callee	BENCH
>218	Identifier	BENCH
>219	ExpressionStatement	 
>220	CallExpression	t . reset ( )
>221	ArgumentList	 
>222	Callee	t . reset
>223	MemberAccess	t . reset
>224	Identifier	reset
>225	Identifier	t
>226	ExpressionStatement	 
>227	AssignmentExpr	rep *= 2
>228	PrimaryExpression	2
>229	Identifier	rep
>230	IfStatement	if ( rep < 1 )
>231	ExpressionStatement	 
>232	AssignmentExpr	rep = 1
>233	PrimaryExpression	1
>234	Identifier	rep
>235	Condition	 
>236	RelationalExpression	rep < 1
>237	PrimaryExpression	1
>238	Identifier	rep
>239	ExpressionStatement	 
>240	AssignmentExpr	rep /= 2
>241	PrimaryExpression	2
>242	Identifier	rep
>243	IdentifierDeclStatement	 
>244	IdentifierDecl	rep = 100000. / n
>245	AssignmentExpr	rep = 100000. / n
>246	MultiplicativeExpression	100000. / n
>247	Identifier	n
>248	PrimaryExpression	100000.
>249	Identifier	rep
>250	Identifier	rep
>251	IdentifierDeclType	int
>252	IdentifierDeclStatement	 
>253	IdentifierDecl	n = 2. * double ( M ) * double ( N ) * double ( K )
>254	AssignmentExpr	n = 2. * double ( M ) * double ( N ) * double ( K )
>255	MultiplicativeExpression	2. * double ( M ) * double ( N ) * double ( K )
>256	MultiplicativeExpression	double ( M ) * double ( N ) * double ( K )
>257	MultiplicativeExpression	double ( N ) * double ( K )
>258	CallExpression	double ( K )
>259	ArgumentList	K
>260	Argument	K
>261	Identifier	K
>262	Callee	double
>263	Identifier	double
>264	CallExpression	double ( N )
>265	ArgumentList	N
>266	Argument	N
>267	Identifier	N
>268	Callee	double
>269	Identifier	double
>270	CallExpression	double ( M )
>271	ArgumentList	M
>272	Argument	M
>273	Identifier	M
>274	Callee	double
>275	Identifier	double
>276	PrimaryExpression	2.
>277	Identifier	n
>278	Identifier	n
>279	IdentifierDeclType	double
>280	IdentifierDeclStatement	 
>281	IdentifierDecl	t
>282	Identifier	t
>283	IdentifierDeclType	BenchTimer
>284	ExpressionStatement	 
>285	CallExpression	c . setRandom ( )
>286	ArgumentList	 
>287	Callee	c . setRandom
>288	MemberAccess	c . setRandom
>289	Identifier	setRandom
>290	Identifier	c
>291	IdentifierDeclStatement	 
>292	IdentifierDecl	c
>293	Identifier	c
>294	IdentifierDeclType	Res
>295	IdentifierDeclStatement	 
>296	IdentifierDecl	Res
>297	Identifier	Res
>298	IdentifierDeclType	Matrix < Scalar , M , N >
>299	ExpressionStatement	 
>300	CallExpression	b . setRandom ( )
>301	ArgumentList	 
>302	Callee	b . setRandom
>303	MemberAccess	b . setRandom
>304	Identifier	setRandom
>305	Identifier	b
>306	IdentifierDeclStatement	 
>307	IdentifierDecl	b
>308	Identifier	b
>309	IdentifierDeclType	Rhs
>310	IdentifierDeclStatement	 
>311	IdentifierDecl	Rhs
>312	Identifier	Rhs
>313	IdentifierDeclType	Matrix < Scalar , K , N >
>314	ExpressionStatement	 
>315	CallExpression	a . setRandom ( )
>316	ArgumentList	 
>317	Callee	a . setRandom
>318	MemberAccess	a . setRandom
>319	Identifier	setRandom
>320	Identifier	a
>321	IdentifierDeclStatement	 
>322	IdentifierDecl	a
>323	Identifier	a
>324	IdentifierDeclType	Lhs
>325	IdentifierDeclStatement	 
>326	IdentifierDecl	Lhs
>327	Identifier	Lhs
>328	IdentifierDeclType	Matrix < Scalar , M , K >
>350	FunctionDef	run ()
>351	ParameterList	 
>352	ReturnType	static void
>353	CompoundStatement	 
>354	ExpressionStatement	 
>355	CallExpression	run ( )
>356	ArgumentList	 
>357	Callee	run
>358	Identifier	run
>359	Statement	 
>360	Statement	 
>361	Statement	 
>362	Statement	 
>363	Statement	 
>364	Statement	 
>365	Statement	 
>366	Statement	 
>367	Statement	 
>368	Statement	 
>369	Statement	 
>370	ExpressionStatement	 
>371	ShiftExpression	std 
>372	PrimaryExpression	\"\n\n\"
>373	Identifier	std 
>374	ExpressionStatement	 
>375	CallExpression	run ( )
>376	ArgumentList	 
>377	Callee	run
>378	Identifier	run
>379	Statement	 
>380	Statement	 
>381	Statement	 
>382	Statement	 
>383	Statement	 
>384	Statement	 
>385	Statement	 
>386	Statement	 
>387	Statement	 
>388	ExpressionStatement	 
>389	ShiftExpression	std 
>390	PrimaryExpression	\"\n\"
>391	Identifier	std 
>392	ExpressionStatement	 
>393	CallExpression	run ( )
>394	ArgumentList	 
>395	Callee	run
>396	Identifier	run
>397	Statement	 
>398	Statement	 
>399	Statement	 
>400	Statement	 
>401	Statement	 
>402	ExpressionStatement	 
>403	ShiftExpression	std 
>404	ShiftExpression	\"K=\" << K << \"\t\"
>405	ShiftExpression	K << \"\t\"
>406	PrimaryExpression	\"\t\"
>407	Identifier	K
>408	PrimaryExpression	\"K=\"
>409	Identifier	std 
>413	FunctionDef	run ()
>414	ParameterList	 
>415	ReturnType	static void
>416	CompoundStatement	 
>421	FunctionDef	run ()
>422	ParameterList	 
>423	ReturnType	static void
>424	CompoundStatement	 
>425	ExpressionStatement	 
>426	CallExpression	run ( )
>427	ArgumentList	 
>428	Callee	run
>429	Identifier	run
>430	Statement	 
>431	Statement	 
>432	Statement	 
>433	Statement	 
>434	Statement	 
>435	Statement	 
>436	Statement	 
>437	Statement	 
>438	Statement	 
>439	Statement	 
>440	Statement	 
>441	ExpressionStatement	 
>442	ShiftExpression	std 
>443	PrimaryExpression	\"\n\"
>444	Identifier	std 
>445	ExpressionStatement	 
>446	CallExpression	run ( )
>447	ArgumentList	 
>448	Callee	run
>449	Identifier	run
>450	Statement	 
>451	Statement	 
>452	Statement	 
>453	Statement	 
>454	Statement	 
>455	Statement	 
>456	Statement	 
>457	Statement	 
>458	Statement	 
>459	Statement	 
>460	Statement	 
>461	Statement	 
>462	Statement	 
>463	Statement	 
>464	ExpressionStatement	 
>465	ShiftExpression	std 
>466	ShiftExpression	M << \"f\t\"
>467	PrimaryExpression	\"f\t\"
>468	Identifier	M
>469	Identifier	std 
>470	ExpressionStatement	 
>471	ShiftExpression	std 
>472	PrimaryExpression	\"\n\"
>473	Identifier	std 
>474	ExpressionStatement	 
>475	CallExpression	run ( )
>476	ArgumentList	 
>477	Callee	run
>478	Identifier	run
>479	Statement	 
>480	Statement	 
>481	Statement	 
>482	Statement	 
>483	Statement	 
>484	Statement	 
>485	Statement	 
>486	Statement	 
>487	Statement	 
>488	Statement	 
>489	Statement	 
>490	Statement	 
>491	Statement	 
>492	ExpressionStatement	 
>493	ShiftExpression	std 
>494	ShiftExpression	M << \"f\t\"
>495	PrimaryExpression	\"f\t\"
>496	Identifier	M
>497	Identifier	std 
>501	FunctionDef	run ()
>502	ParameterList	 
>503	ReturnType	static void
>504	CompoundStatement	 
>509	FunctionDef	run ()
>510	ParameterList	 
>511	ReturnType	static void
>512	CompoundStatement	 
>513	ExpressionStatement	 
>514	CallExpression	run ( )
>515	ArgumentList	 
>516	Callee	run
>517	Identifier	run
>518	Statement	 
>519	Statement	 
>520	Statement	 
>521	Statement	 
>522	Statement	 
>523	Statement	 
>524	Statement	 
>525	Statement	 
>526	Statement	 
>527	Statement	 
>528	Statement	 
>529	Statement	 
>530	Statement	 
>531	Statement	 
>532	Statement	 
>533	ExpressionStatement	 
>534	Statement	 
>535	Statement	 
>536	Statement	 
>537	Statement	 
>538	Label	 
>539	Identifier	ret
>540	Statement	 
>541	Statement	 
>542	Statement	 
>543	Statement	 
>544	Statement	 
>545	Statement	 
>546	Statement	 
>547	Statement	 
>548	Statement	 
>549	Statement	 
>550	Statement	 
>551	Statement	 
>552	Statement	 
>553	Statement	 
>554	Statement	 
>555	Statement	 
>556	Statement	 
>557	Statement	 
>558	Statement	 
>559	Statement	 
>560	Statement	 
>561	Statement	 
>562	Statement	 
>563	Statement	 
>567	FunctionDef	run ()
>568	ParameterList	 
>569	ReturnType	static void
>570	CompoundStatement	 
>575	FunctionDef	run ()
>576	ParameterList	 
>577	ReturnType	static void
>578	CompoundStatement	 
>579	ExpressionStatement	 
>580	CallExpression	run ( )
>581	ArgumentList	 
>582	Callee	run
>583	Identifier	run
>584	Statement	 
>585	Statement	 
>586	Statement	 
>587	Statement	 
>588	Statement	 
>589	Statement	 
>590	Statement	 
>591	ExpressionStatement	 
>592	ShiftExpression	ret << \"\t\"
>593	PrimaryExpression	\"\t\"
>594	Identifier	ret
>595	Statement	 
>596	Statement	 
>597	Statement	 
>598	Statement	 
>599	Statement	 
>600	Statement	 
>601	Statement	 
>602	Statement	 
>603	Statement	 
>607	FunctionDef	run ()
>608	ParameterList	 
>609	ReturnType	static void
>610	CompoundStatement	 
>614	FunctionDef	main ()
>615	ParameterList	 
>616	ReturnType	int
>617	CompoundStatement	 
>618	ReturnStatement	 
>619	PrimaryExpression	0
>620	ExpressionStatement	 
>621	CallExpression	run ( )
>622	ArgumentList	 
>623	Callee	run
>624	Identifier	run
>625	Statement	 
>626	Statement	 
>627	Statement	 
>628	Statement	 
>629	Statement	 
>630	Statement	 
>631	Statement	 
>632	Statement	 
>633	Statement	 
<11=17,16,12
<12=13
<13=15,14
<17=63,54,45,36,27,18
<18=23,19
<19=20
<20=22,21
<23=24
<24=26,25
<27=32,28
<28=29
<29=31,30
<32=33
<33=35,34
<36=41,37
<37=38
<38=40,39
<41=42
<42=44,43
<45=50,46
<46=47
<47=49,48
<50=51
<51=53,52
<54=59,55
<55=56
<56=58,57
<59=60
<60=62,61
<63=68,64
<64=65
<65=67,66
<68=69
<69=71,70
<82=94,93,83
<83=90,87,84
<84=86,85
<87=89,88
<90=92,91
<94=119,118,117,116,115,114,113,112,111,110,109,108,107,106,105,104,95
<95=96
<96=102,97
<97=100,98
<98=99
<100=101
<102=103
<126=129,128,127
<129=325,321,314,310,306,299,295,291,284,280,252,243,239,230,187,180,159,152,130
<130=131
<131=151,132
<132=134,133
<134=149,135
<135=136
<136=137
<137=148,138
<138=147,139
<139=146,140
<140=142,141
<142=143
<143=145,144
<149=150
<152=153
<153=157,154
<154=155
<155=156
<157=158
<159=160
<160=178,161
<161=176,174,172,162
<162=163
<163=171,164
<164=170,165
<165=169,166
<166=168,167
<172=173
<174=175
<176=177
<178=179
<180=181
<181=183,182
<183=184
<184=186,185
<187=197,188
<188=189
<189=191,190
<191=193,192
<193=194
<194=196,195
<197=226,219,198
<198=199
<199=217,200
<200=215,213,211,201
<201=202
<202=210,203
<203=209,204
<204=208,205
<205=207,206
<211=212
<213=214
<215=216
<217=218
<219=220
<220=222,221
<222=223
<223=225,224
<226=227
<227=229,228
<230=235,231
<231=232
<232=234,233
<235=236
<236=238,237
<239=240
<240=242,241
<243=244
<244=251,250,245
<245=249,246
<246=248,247
<252=253
<253=279,278,254
<254=277,255
<255=276,256
<256=270,257
<257=264,258
<258=262,259
<259=260
<260=261
<262=263
<264=268,265
<265=266
<266=267
<268=269
<270=274,271
<271=272
<272=273
<274=275
<280=281
<281=283,282
<284=285
<285=287,286
<287=288
<288=290,289
<291=292
<292=294,293
<295=296
<296=298,297
<299=300
<300=302,301
<302=303
<303=305,304
<306=307
<307=309,308
<310=311
<311=313,312
<314=315
<315=317,316
<317=318
<318=320,319
<321=322
<322=324,323
<325=326
<326=328,327
<350=353,352,351
<353=402,401,400,399,398,397,392,388,387,386,385,384,383,382,381,380,379,374,370,369,368,367,366,365,364,363,362,361,360,359,354
<354=355
<355=357,356
<357=358
<370=371
<371=373,372
<374=375
<375=377,376
<377=378
<388=389
<389=391,390
<392=393
<393=395,394
<395=396
<402=403
<403=409,404
<404=408,405
<405=407,406
<413=416,415,414
<421=424,423,422
<424=492,491,490,489,488,487,486,485,484,483,482,481,480,479,474,470,464,463,462,461,460,459,458,457,456,455,454,453,452,451,450,445,441,440,439,438,437,436,435,434,433,432,431,430,425
<425=426
<426=428,427
<428=429
<441=442
<442=444,443
<445=446
<446=448,447
<448=449
<464=465
<465=469,466
<466=468,467
<470=471
<471=473,472
<474=475
<475=477,476
<477=478
<492=493
<493=497,494
<494=496,495
<501=504,503,502
<509=512,511,510
<512=563,562,561,560,559,558,557,556,555,554,553,552,551,550,549,548,547,546,545,544,543,542,541,540,538,537,536,535,534,533,532,531,530,529,528,527,526,525,524,523,522,521,520,519,518,513
<513=514
<514=516,515
<516=517
<538=539
<567=570,569,568
<575=578,577,576
<578=603,602,601,600,599,598,597,596,595,591,590,589,588,587,586,585,584,579
<579=580
<580=582,581
<582=583
<591=592
<592=594,593
<607=610,609,608
<614=617,616,615
<617=633,632,631,630,629,628,627,626,625,620,618
<618=619
<620=621
<621=623,622
<623=624
