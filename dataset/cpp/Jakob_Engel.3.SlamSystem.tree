>3	FunctionDef	SlamSystem 
>4	ParameterList	int w , int h , Eigen 
>5	Parameter	 
>6	Identifier	enableSLAM
>7	ParameterType	bool
>8	Parameter	 
>9	Identifier	K
>10	ParameterType	Eigen 
>11	Parameter	 
>12	Identifier	h
>13	ParameterType	int
>14	Parameter	 
>15	Identifier	w
>16	ParameterType	int
>17	CompoundStatement	 
>18	ExpressionStatement	 
>19	CallExpression	gettimeofday ( & lastHzUpdate , NULL )
>20	ArgumentList	& lastHzUpdate
>21	Argument	NULL
>22	Identifier	NULL
>23	Argument	& lastHzUpdate
>24	UnaryOp	& lastHzUpdate
>25	Identifier	lastHzUpdate
>26	UnaryOperator	&
>27	Callee	gettimeofday
>28	Identifier	gettimeofday
>29	ExpressionStatement	 
>30	AssignmentExpr	nAvgTrackFrame = nAvgOptimizationIteration = nAvgFindConstraintsItaration = nAvgFindReferences = 0
>31	AssignmentExpr	nAvgOptimizationIteration = nAvgFindConstraintsItaration = nAvgFindReferences = 0
>32	AssignmentExpr	nAvgFindConstraintsItaration = nAvgFindReferences = 0
>33	AssignmentExpr	nAvgFindReferences = 0
>34	PrimaryExpression	0
>35	Identifier	nAvgFindReferences
>36	Identifier	nAvgFindConstraintsItaration
>37	Identifier	nAvgOptimizationIteration
>38	Identifier	nAvgTrackFrame
>39	ExpressionStatement	 
>40	AssignmentExpr	nTrackFrame = nOptimizationIteration = nFindConstraintsItaration = nFindReferences = 0
>41	AssignmentExpr	nOptimizationIteration = nFindConstraintsItaration = nFindReferences = 0
>42	AssignmentExpr	nFindConstraintsItaration = nFindReferences = 0
>43	AssignmentExpr	nFindReferences = 0
>44	PrimaryExpression	0
>45	Identifier	nFindReferences
>46	Identifier	nFindConstraintsItaration
>47	Identifier	nOptimizationIteration
>48	Identifier	nTrackFrame
>49	ExpressionStatement	 
>50	AssignmentExpr	msTrackFrame = msOptimizationIteration = msFindConstraintsItaration = msFindReferences = 0
>51	AssignmentExpr	msOptimizationIteration = msFindConstraintsItaration = msFindReferences = 0
>52	AssignmentExpr	msFindConstraintsItaration = msFindReferences = 0
>53	AssignmentExpr	msFindReferences = 0
>54	PrimaryExpression	0
>55	Identifier	msFindReferences
>56	Identifier	msFindConstraintsItaration
>57	Identifier	msOptimizationIteration
>58	Identifier	msTrackFrame
>59	IfStatement	if ( SLAMEnabled )
>60	CompoundStatement	 
>61	ExpressionStatement	 
>62	AssignmentExpr	thread_optimization = boost 
>63	CallExpression	boost 
>64	ArgumentList	& SlamSystem 
>65	Argument	this
>66	Identifier	this
>67	Argument	& SlamSystem 
>68	UnaryOp	& SlamSystem 
>69	Identifier	SlamSystem 
>70	UnaryOperator	&
>71	Callee	boost 
>72	Identifier	boost 
>73	Identifier	thread_optimization
>74	ExpressionStatement	 
>75	AssignmentExpr	thread_constraint_search = boost 
>76	CallExpression	boost 
>77	ArgumentList	& SlamSystem 
>78	Argument	this
>79	Identifier	this
>80	Argument	& SlamSystem 
>81	UnaryOp	& SlamSystem 
>82	Identifier	SlamSystem 
>83	UnaryOperator	&
>84	Callee	boost 
>85	Identifier	boost 
>86	Identifier	thread_constraint_search
>87	Condition	 
>88	Identifier	SLAMEnabled
>89	ExpressionStatement	 
>90	AssignmentExpr	thread_mapping = boost 
>91	CallExpression	boost 
>92	ArgumentList	& SlamSystem 
>93	Argument	this
>94	Identifier	this
>95	Argument	& SlamSystem 
>96	UnaryOp	& SlamSystem 
>97	Identifier	SlamSystem 
>98	UnaryOperator	&
>99	Callee	boost 
>100	Identifier	boost 
>101	Identifier	thread_mapping
>102	ExpressionStatement	 
>103	AssignmentExpr	lastTrackingClosenessScore = 0
>104	PrimaryExpression	0
>105	Identifier	lastTrackingClosenessScore
>106	ExpressionStatement	 
>107	AssignmentExpr	depthMapScreenshotFlag = false
>108	Identifier	false
>109	Identifier	depthMapScreenshotFlag
>110	ExpressionStatement	 
>111	AssignmentExpr	doFinalOptimization = false
>112	Identifier	false
>113	Identifier	doFinalOptimization
>114	ExpressionStatement	 
>115	AssignmentExpr	keepRunning = true
>116	Identifier	true
>117	Identifier	keepRunning
>118	ExpressionStatement	 
>119	AssignmentExpr	outputWrapper = 0
>120	PrimaryExpression	0
>121	Identifier	outputWrapper
>122	IfStatement	if ( SLAMEnabled )
>123	ElseStatement	else
>124	CompoundStatement	 
>125	ExpressionStatement	 
>126	AssignmentExpr	candidateTrackingReference = 0
>127	PrimaryExpression	0
>128	Identifier	candidateTrackingReference
>129	ExpressionStatement	 
>130	AssignmentExpr	newKFTrackingReference = 0
>131	PrimaryExpression	0
>132	Identifier	newKFTrackingReference
>133	ExpressionStatement	 
>134	AssignmentExpr	constraintTracker = 0
>135	PrimaryExpression	0
>136	Identifier	constraintTracker
>137	ExpressionStatement	 
>138	AssignmentExpr	trackableKeyFrameSearch = 0
>139	PrimaryExpression	0
>140	Identifier	trackableKeyFrameSearch
>141	ExpressionStatement	 
>142	AssignmentExpr	constraintSE3Tracker = 0
>143	PrimaryExpression	0
>144	Identifier	constraintSE3Tracker
>145	CompoundStatement	 
>146	ExpressionStatement	 
>147	AssignmentExpr	candidateTrackingReference = new TrackingReference ( )
>148	UnaryExpression	new TrackingReference ( )
>149	Identifier	candidateTrackingReference
>150	ExpressionStatement	 
>151	AssignmentExpr	newKFTrackingReference = new TrackingReference ( )
>152	UnaryExpression	new TrackingReference ( )
>153	Identifier	newKFTrackingReference
>154	ExpressionStatement	 
>155	AssignmentExpr	constraintSE3Tracker = new SE3Tracker ( w , h , K )
>156	Expression	w , h , K
>157	Expression	h , K
>158	Identifier	K
>159	Identifier	h
>160	Identifier	w
>161	Identifier	constraintSE3Tracker
>162	ExpressionStatement	 
>163	AssignmentExpr	constraintTracker = new Sim3Tracker ( w , h , K )
>164	Expression	w , h , K
>165	Expression	h , K
>166	Identifier	K
>167	Identifier	h
>168	Identifier	w
>169	Identifier	constraintTracker
>170	ExpressionStatement	 
>171	AssignmentExpr	trackableKeyFrameSearch = new TrackableKeyFrameSearch ( keyFrameGraph , w , h , K )
>172	Expression	keyFrameGraph , w , h , K
>173	Expression	w , h , K
>174	Expression	h , K
>175	Identifier	K
>176	Identifier	h
>177	Identifier	w
>178	Identifier	keyFrameGraph
>179	Identifier	trackableKeyFrameSearch
>180	Condition	 
>181	Identifier	SLAMEnabled
>182	ExpressionStatement	 
>183	AssignmentExpr	mappingTrackingReference = new TrackingReference ( )
>184	UnaryExpression	new TrackingReference ( )
>185	Identifier	mappingTrackingReference
>186	ExpressionStatement	 
>187	AssignmentExpr	trackingReference = new TrackingReference ( )
>188	UnaryExpression	new TrackingReference ( )
>189	Identifier	trackingReference
>190	ForStatement	for ( int level = 4 ; level < PYRAMID_LEVELS ; ++ level )
>191	ExpressionStatement	 
>192	AssignmentExpr	tracker -> settings . maxItsPerLvl [ level ] = 0
>193	PrimaryExpression	0
>194	ArrayIndexing	tracker -> settings . maxItsPerLvl [ level ]
>195	Identifier	level
>196	MemberAccess	tracker -> settings . maxItsPerLvl
>197	Identifier	maxItsPerLvl
>198	PtrMemberAccess	tracker -> settings
>199	Identifier	settings
>200	Identifier	tracker
>201	UnaryExpression	 
>202	Identifier	level
>203	IncDec	++
>204	Condition	 
>205	RelationalExpression	level < PYRAMID_LEVELS
>206	Identifier	PYRAMID_LEVELS
>207	Identifier	level
>208	ForInit	 
>209	IdentifierDeclStatement	int level = 4 ;
>210	IdentifierDecl	level = 4
>211	AssignmentExpr	level = 4
>212	PrimaryExpression	4
>213	Identifier	level
>214	Identifier	level
>215	IdentifierDeclType	int
>216	ExpressionStatement	 
>217	AssignmentExpr	tracker = new SE3Tracker ( w , h , K )
>218	Expression	w , h , K
>219	Expression	h , K
>220	Identifier	K
>221	Identifier	h
>222	Identifier	w
>223	Identifier	tracker
>224	ExpressionStatement	 
>225	AssignmentExpr	haveUnmergedOptimizationOffset = false
>226	Identifier	false
>227	Identifier	haveUnmergedOptimizationOffset
>228	ExpressionStatement	 
>229	AssignmentExpr	newConstraintAdded = false
>230	Identifier	false
>231	Identifier	newConstraintAdded
>232	ExpressionStatement	 
>233	AssignmentExpr	map = new DepthMap ( w , h , K )
>234	Expression	w , h , K
>235	Expression	h , K
>236	Identifier	K
>237	Identifier	h
>238	Identifier	w
>239	Identifier	map
>240	ExpressionStatement	 
>241	AssignmentExpr	createNewKeyFrame = false
>242	Identifier	false
>243	Identifier	createNewKeyFrame
>244	ExpressionStatement	 
>245	AssignmentExpr	keyFrameGraph = new KeyFrameGraph ( )
>246	UnaryExpression	new KeyFrameGraph ( )
>247	Identifier	keyFrameGraph
>248	ExpressionStatement	 
>249	AssignmentExpr	trackingReferenceFrameSharedPT = nullptr
>250	Identifier	nullptr
>251	Identifier	trackingReferenceFrameSharedPT
>252	ExpressionStatement	 
>253	AssignmentExpr	currentKeyFrame = nullptr
>254	Identifier	nullptr
>255	Identifier	currentKeyFrame
>256	ExpressionStatement	 
>257	AssignmentExpr	trackingIsGood = true
>258	Identifier	true
>259	Identifier	trackingIsGood
>260	ExpressionStatement	 
>261	AssignmentExpr	this -> K = K
>262	Identifier	K
>263	PtrMemberAccess	this -> K
>264	Identifier	K
>265	Identifier	this
>266	ExpressionStatement	 
>267	AssignmentExpr	this -> height = h
>268	Identifier	h
>269	PtrMemberAccess	this -> height
>270	Identifier	height
>271	Identifier	this
>272	ExpressionStatement	 
>273	AssignmentExpr	this -> width = w
>274	Identifier	w
>275	PtrMemberAccess	this -> width
>276	Identifier	width
>277	Identifier	this
>278	IfStatement	if ( w % 16 != 0 || h % 16 != 0 )
>279	CompoundStatement	 
>280	ExpressionStatement	 
>281	CallExpression	assert ( false )
>282	ArgumentList	false
>283	Argument	false
>284	Identifier	false
>285	Callee	assert
>286	Identifier	assert
>287	ExpressionStatement	 
>288	CallExpression	printf ( \"image dimensions must be multiples of 16! Please crop your images / video accordingly.\n\" )
>289	ArgumentList	\"image dimensions must be multiples of 16! Please crop your images / video accordingly.\n\"
>290	Argument	\"image dimensions must be multiples of 16! Please crop your images / video accordingly.\n\"
>291	PrimaryExpression	\"image dimensions must be multiples of 16! Please crop your images / video accordingly.\n\"
>292	Callee	printf
>293	Identifier	printf
>294	Condition	 
>295	OrExpression	w % 16 != 0 || h % 16 != 0
>296	EqualityExpression	h % 16 != 0
>297	PrimaryExpression	0
>298	MultiplicativeExpression	h % 16
>299	PrimaryExpression	16
>300	Identifier	h
>301	EqualityExpression	w % 16 != 0
>302	PrimaryExpression	0
>303	MultiplicativeExpression	w % 16
>304	PrimaryExpression	16
>305	Identifier	w
>373	FunctionDef	SlamSystem 
>374	ParameterList	 
>375	CompoundStatement	 
>376	ExpressionStatement	 
>377	CallExpression	Util 
>378	ArgumentList	 
>379	Callee	Util 
>380	Identifier	Util 
>381	ExpressionStatement	 
>382	CallExpression	FrameMemory 
>383	ArgumentList	 
>384	Callee	FrameMemory 
>385	MemberAccess	FrameMemory 
>386	Identifier	releaseBuffes
>387	CallExpression	FrameMemory 
>388	ArgumentList	 
>389	Callee	FrameMemory 
>390	Identifier	FrameMemory 
>391	ExpressionStatement	 
>392	Identifier	keyFrameGraph
>393	Statement	 
>394	ExpressionStatement	 
>395	CallExpression	trackingReferenceFrameSharedPT . reset ( )
>396	ArgumentList	 
>397	Callee	trackingReferenceFrameSharedPT . reset
>398	MemberAccess	trackingReferenceFrameSharedPT . reset
>399	Identifier	reset
>400	Identifier	trackingReferenceFrameSharedPT
>401	ExpressionStatement	 
>402	CallExpression	currentKeyFrame . reset ( )
>403	ArgumentList	 
>404	Callee	currentKeyFrame . reset
>405	MemberAccess	currentKeyFrame . reset
>406	Identifier	reset
>407	Identifier	currentKeyFrame
>408	ExpressionStatement	 
>409	CallExpression	latestTrackedFrame . reset ( )
>410	ArgumentList	 
>411	Callee	latestTrackedFrame . reset
>412	MemberAccess	latestTrackedFrame . reset
>413	Identifier	reset
>414	Identifier	latestTrackedFrame
>415	ExpressionStatement	 
>416	CallExpression	latestFrameTriedForReloc . reset ( )
>417	ArgumentList	 
>418	Callee	latestFrameTriedForReloc . reset
>419	MemberAccess	latestFrameTriedForReloc . reset
>420	Identifier	reset
>421	Identifier	latestFrameTriedForReloc
>422	ExpressionStatement	 
>423	CallExpression	unmappedTrackedFrames . clear ( )
>424	ArgumentList	 
>425	Callee	unmappedTrackedFrames . clear
>426	MemberAccess	unmappedTrackedFrames . clear
>427	Identifier	clear
>428	Identifier	unmappedTrackedFrames
>429	ExpressionStatement	 
>430	Identifier	tracker
>431	Statement	 
>432	ExpressionStatement	 
>433	Identifier	trackingReference
>434	Statement	 
>435	ExpressionStatement	 
>436	Identifier	map
>437	Statement	 
>438	ExpressionStatement	 
>439	Identifier	mappingTrackingReference
>440	Statement	 
>441	ExpressionStatement	 
>442	Identifier	candidateTrackingReference
>443	IfStatement	if ( candidateTrackingReference != 0 )
>444	Statement	 
>445	Condition	 
>446	EqualityExpression	candidateTrackingReference != 0
>447	PrimaryExpression	0
>448	Identifier	candidateTrackingReference
>449	ExpressionStatement	 
>450	Identifier	newKFTrackingReference
>451	IfStatement	if ( newKFTrackingReference != 0 )
>452	Statement	 
>453	Condition	 
>454	EqualityExpression	newKFTrackingReference != 0
>455	PrimaryExpression	0
>456	Identifier	newKFTrackingReference
>457	ExpressionStatement	 
>458	Identifier	constraintSE3Tracker
>459	IfStatement	if ( constraintSE3Tracker != 0 )
>460	Statement	 
>461	Condition	 
>462	EqualityExpression	constraintSE3Tracker != 0
>463	PrimaryExpression	0
>464	Identifier	constraintSE3Tracker
>465	ExpressionStatement	 
>466	Identifier	constraintTracker
>467	IfStatement	if ( constraintTracker != 0 )
>468	Statement	 
>469	Condition	 
>470	EqualityExpression	constraintTracker != 0
>471	PrimaryExpression	0
>472	Identifier	constraintTracker
>473	ExpressionStatement	 
>474	Identifier	trackableKeyFrameSearch
>475	IfStatement	if ( trackableKeyFrameSearch != 0 )
>476	Statement	 
>477	Condition	 
>478	EqualityExpression	trackableKeyFrameSearch != 0
>479	PrimaryExpression	0
>480	Identifier	trackableKeyFrameSearch
>481	ExpressionStatement	 
>482	CallExpression	printf ( \"DONE waiting for SlamSystem's threads to exit\n\" )
>483	ArgumentList	\"DONE waiting for SlamSystem's threads to exit\n\"
>484	Argument	\"DONE waiting for SlamSystem's threads to exit\n\"
>485	PrimaryExpression	\"DONE waiting for SlamSystem's threads to exit\n\"
>486	Callee	printf
>487	Identifier	printf
>488	ExpressionStatement	 
>489	CallExpression	thread_optimization . join ( )
>490	ArgumentList	 
>491	Callee	thread_optimization . join
>492	MemberAccess	thread_optimization . join
>493	Identifier	join
>494	Identifier	thread_optimization
>495	ExpressionStatement	 
>496	CallExpression	thread_constraint_search . join ( )
>497	ArgumentList	 
>498	Callee	thread_constraint_search . join
>499	MemberAccess	thread_constraint_search . join
>500	Identifier	join
>501	Identifier	thread_constraint_search
>502	ExpressionStatement	 
>503	CallExpression	thread_mapping . join ( )
>504	ArgumentList	 
>505	Callee	thread_mapping . join
>506	MemberAccess	thread_mapping . join
>507	Identifier	join
>508	Identifier	thread_mapping
>509	ExpressionStatement	 
>510	CallExpression	newConstraintCreatedSignal . notify_all ( )
>511	ArgumentList	 
>512	Callee	newConstraintCreatedSignal . notify_all
>513	MemberAccess	newConstraintCreatedSignal . notify_all
>514	Identifier	notify_all
>515	Identifier	newConstraintCreatedSignal
>516	ExpressionStatement	 
>517	CallExpression	newKeyFrameCreatedSignal . notify_all ( )
>518	ArgumentList	 
>519	Callee	newKeyFrameCreatedSignal . notify_all
>520	MemberAccess	newKeyFrameCreatedSignal . notify_all
>521	Identifier	notify_all
>522	Identifier	newKeyFrameCreatedSignal
>523	ExpressionStatement	 
>524	CallExpression	unmappedTrackedFramesSignal . notify_all ( )
>525	ArgumentList	 
>526	Callee	unmappedTrackedFramesSignal . notify_all
>527	MemberAccess	unmappedTrackedFramesSignal . notify_all
>528	Identifier	notify_all
>529	Identifier	unmappedTrackedFramesSignal
>530	ExpressionStatement	 
>531	CallExpression	newFrameMappedSignal . notify_all ( )
>532	ArgumentList	 
>533	Callee	newFrameMappedSignal . notify_all
>534	MemberAccess	newFrameMappedSignal . notify_all
>535	Identifier	notify_all
>536	Identifier	newFrameMappedSignal
>537	ExpressionStatement	 
>538	CallExpression	printf ( \"... waiting for SlamSystem's threads to exit\n\" )
>539	ArgumentList	\"... waiting for SlamSystem's threads to exit\n\"
>540	Argument	\"... waiting for SlamSystem's threads to exit\n\"
>541	PrimaryExpression	\"... waiting for SlamSystem's threads to exit\n\"
>542	Callee	printf
>543	Identifier	printf
>544	ExpressionStatement	 
>545	AssignmentExpr	keepRunning = false
>546	Identifier	false
>547	Identifier	keepRunning
>571	FunctionDef	SlamSystem 
>572	ParameterList	Output3DWrapper * outputWrapper
>573	Parameter	 
>574	Identifier	outputWrapper
>575	ParameterType	Output3DWrapper *
>576	ReturnType	void
>577	CompoundStatement	 
>578	ExpressionStatement	 
>579	AssignmentExpr	this -> outputWrapper = outputWrapper
>580	Identifier	outputWrapper
>581	PtrMemberAccess	this -> outputWrapper
>582	Identifier	outputWrapper
>583	Identifier	this
>591	FunctionDef	SlamSystem 
>592	ParameterList	 
>593	ReturnType	void
>594	CompoundStatement	 
>595	IfStatement	if ( needPublish )
>596	ExpressionStatement	 
>597	CallExpression	publishKeyframeGraph ( )
>598	ArgumentList	 
>599	Callee	publishKeyframeGraph
>600	Identifier	publishKeyframeGraph
>601	Condition	 
>602	Identifier	needPublish
>603	ExpressionStatement	 
>604	CallExpression	poseConsistencyMutex . unlock ( )
>605	ArgumentList	 
>606	Callee	poseConsistencyMutex . unlock
>607	MemberAccess	poseConsistencyMutex . unlock
>608	Identifier	unlock
>609	Identifier	poseConsistencyMutex
>610	IfStatement	if ( haveUnmergedOptimizationOffset )
>611	CompoundStatement	 
>612	ExpressionStatement	 
>613	AssignmentExpr	needPublish = true
>614	Identifier	true
>615	Identifier	needPublish
>616	ExpressionStatement	 
>617	AssignmentExpr	haveUnmergedOptimizationOffset = false
>618	Identifier	false
>619	Identifier	haveUnmergedOptimizationOffset
>620	ExpressionStatement	 
>621	CallExpression	keyFrameGraph -> keyframesAllMutex . unlock_shared ( )
>622	ArgumentList	 
>623	Callee	keyFrameGraph -> keyframesAllMutex . unlock_shared
>624	MemberAccess	keyFrameGraph -> keyframesAllMutex . unlock_shared
>625	Identifier	unlock_shared
>626	PtrMemberAccess	keyFrameGraph -> keyframesAllMutex
>627	Identifier	keyframesAllMutex
>628	Identifier	keyFrameGraph
>629	ForStatement	for ( unsigned int i = 0 ; i < keyFrameGraph -> keyframesAll . size ( ) ; i ++ )
>630	ExpressionStatement	 
>631	CallExpression	keyFrameGraph -> keyframesAll [ i ] -> pose -> applyPoseGraphOptResult ( )
>632	ArgumentList	 
>633	Callee	keyFrameGraph -> keyframesAll [ i ] -> pose -> applyPoseGraphOptResult
>634	PtrMemberAccess	keyFrameGraph -> keyframesAll [ i ] -> pose -> applyPoseGraphOptResult
>635	Identifier	applyPoseGraphOptResult
>636	PtrMemberAccess	keyFrameGraph -> keyframesAll [ i ] -> pose
>637	Identifier	pose
>638	ArrayIndexing	keyFrameGraph -> keyframesAll [ i ]
>639	Identifier	i
>640	PtrMemberAccess	keyFrameGraph -> keyframesAll
>641	Identifier	keyframesAll
>642	Identifier	keyFrameGraph
>643	IncDecOp	 
>644	IncDec	++
>645	Identifier	i
>646	Condition	 
>647	RelationalExpression	i < keyFrameGraph -> keyframesAll . size ( )
>648	CallExpression	keyFrameGraph -> keyframesAll . size ( )
>649	ArgumentList	 
>650	Callee	keyFrameGraph -> keyframesAll . size
>651	MemberAccess	keyFrameGraph -> keyframesAll . size
>652	Identifier	size
>653	PtrMemberAccess	keyFrameGraph -> keyframesAll
>654	Identifier	keyframesAll
>655	Identifier	keyFrameGraph
>656	Identifier	i
>657	ForInit	 
>658	IdentifierDeclStatement	unsigned int i = 0 ;
>659	IdentifierDecl	i = 0
>660	AssignmentExpr	i = 0
>661	PrimaryExpression	0
>662	Identifier	i
>663	Identifier	i
>664	IdentifierDeclType	unsigned int
>665	ExpressionStatement	 
>666	CallExpression	keyFrameGraph -> keyframesAllMutex . lock_shared ( )
>667	ArgumentList	 
>668	Callee	keyFrameGraph -> keyframesAllMutex . lock_shared
>669	MemberAccess	keyFrameGraph -> keyframesAllMutex . lock_shared
>670	Identifier	lock_shared
>671	PtrMemberAccess	keyFrameGraph -> keyframesAllMutex
>672	Identifier	keyframesAllMutex
>673	Identifier	keyFrameGraph
>674	Condition	 
>675	Identifier	haveUnmergedOptimizationOffset
>676	IdentifierDeclStatement	 
>677	IdentifierDecl	needPublish = false
>678	AssignmentExpr	needPublish = false
>679	Identifier	false
>680	Identifier	false
>681	Identifier	needPublish
>682	IdentifierDeclType	bool
>683	ExpressionStatement	 
>684	CallExpression	poseConsistencyMutex . lock ( )
>685	ArgumentList	 
>686	Callee	poseConsistencyMutex . lock
>687	MemberAccess	poseConsistencyMutex . lock
>688	Identifier	lock
>689	Identifier	poseConsistencyMutex
>711	FunctionDef	SlamSystem 
>712	ParameterList	 
>713	ReturnType	void
>714	CompoundStatement	 
>715	ExpressionStatement	 
>716	CallExpression	printf ( \"Exited mapping thread \n\" )
>717	ArgumentList	\"Exited mapping thread \n\"
>718	Argument	\"Exited mapping thread \n\"
>719	PrimaryExpression	\"Exited mapping thread \n\"
>720	Callee	printf
>721	Identifier	printf
>722	WhileStatement	while ( keepRunning )
>723	CompoundStatement	 
>724	ExpressionStatement	 
>725	CallExpression	newFrameMappedMutex . unlock ( )
>726	ArgumentList	 
>727	Callee	newFrameMappedMutex . unlock
>728	MemberAccess	newFrameMappedMutex . unlock
>729	Identifier	unlock
>730	Identifier	newFrameMappedMutex
>731	ExpressionStatement	 
>732	CallExpression	newFrameMappedSignal . notify_all ( )
>733	ArgumentList	 
>734	Callee	newFrameMappedSignal . notify_all
>735	MemberAccess	newFrameMappedSignal . notify_all
>736	Identifier	notify_all
>737	Identifier	newFrameMappedSignal
>738	ExpressionStatement	 
>739	CallExpression	newFrameMappedMutex . lock ( )
>740	ArgumentList	 
>741	Callee	newFrameMappedMutex . lock
>742	MemberAccess	newFrameMappedMutex . lock
>743	Identifier	lock
>744	Identifier	newFrameMappedMutex
>745	IfStatement	if ( ! doMappingIteration ( ) )
>746	CompoundStatement	 
>747	ExpressionStatement	 
>748	CallExpression	lock . unlock ( )
>749	ArgumentList	 
>750	Callee	lock . unlock
>751	MemberAccess	lock . unlock
>752	Identifier	unlock
>753	Identifier	lock
>754	ExpressionStatement	 
>755	CallExpression	unmappedTrackedFramesSignal . timed_wait ( lock , boost 
>756	ArgumentList	lock
>757	Argument	boost 
>758	CallExpression	boost 
>759	ArgumentList	200
>760	Argument	200
>761	PrimaryExpression	200
>762	Callee	boost 
>763	Identifier	boost 
>764	Argument	lock
>765	Identifier	lock
>766	Callee	unmappedTrackedFramesSignal . timed_wait
>767	MemberAccess	unmappedTrackedFramesSignal . timed_wait
>768	Identifier	timed_wait
>769	Identifier	unmappedTrackedFramesSignal
>770	IdentifierDeclStatement	 
>771	IdentifierDecl	lock ( unmappedTrackedFramesMutex )
>772	Identifier	unmappedTrackedFramesMutex
>773	Identifier	lock
>774	IdentifierDeclType	boost 
>775	Condition	 
>776	UnaryOp	! doMappingIteration ( )
>777	CallExpression	doMappingIteration ( )
>778	ArgumentList	 
>779	Callee	doMappingIteration
>780	Identifier	doMappingIteration
>781	UnaryOperator	!
>782	Condition	 
>783	Identifier	keepRunning
>784	ExpressionStatement	 
>785	CallExpression	printf ( \"Started mapping thread!\n\" )
>786	ArgumentList	\"Started mapping thread!\n\"
>787	Argument	\"Started mapping thread!\n\"
>788	PrimaryExpression	\"Started mapping thread!\n\"
>789	Callee	printf
>790	Identifier	printf
>801	FunctionDef	SlamSystem 
>802	ParameterList	 
>803	ReturnType	void
>804	CompoundStatement	 
>805	ExpressionStatement	 
>806	CallExpression	printf ( \"Done Finalizing Graph.!!\n\" )
>807	ArgumentList	\"Done Finalizing Graph.!!\n\"
>808	Argument	\"Done Finalizing Graph.!!\n\"
>809	PrimaryExpression	\"Done Finalizing Graph.!!\n\"
>810	Callee	printf
>811	Identifier	printf
>812	ExpressionStatement	 
>813	CallExpression	usleep ( 200000 )
>814	ArgumentList	200000
>815	Argument	200000
>816	PrimaryExpression	200000
>817	Callee	usleep
>818	Identifier	usleep
>819	ExpressionStatement	 
>820	CallExpression	newFrameMappedSignal . wait ( lock )
>821	ArgumentList	lock
>822	Argument	lock
>823	Identifier	lock
>824	Callee	newFrameMappedSignal . wait
>825	MemberAccess	newFrameMappedSignal . wait
>826	Identifier	wait
>827	Identifier	newFrameMappedSignal
>828	ExpressionStatement	 
>829	CallExpression	newFrameMappedSignal . wait ( lock )
>830	ArgumentList	lock
>831	Argument	lock
>832	Identifier	lock
>833	Callee	newFrameMappedSignal . wait
>834	MemberAccess	newFrameMappedSignal . wait
>835	Identifier	wait
>836	Identifier	newFrameMappedSignal
>837	IdentifierDeclStatement	 
>838	IdentifierDecl	lock ( newFrameMappedMutex )
>839	Identifier	newFrameMappedMutex
>840	Identifier	lock
>841	IdentifierDeclType	boost 
>842	WhileStatement	while ( doFinalOptimization )
>843	CompoundStatement	 
>844	ExpressionStatement	 
>845	CallExpression	usleep ( 200000 )
>846	ArgumentList	200000
>847	Argument	200000
>848	PrimaryExpression	200000
>849	Callee	usleep
>850	Identifier	usleep
>851	Condition	 
>852	Identifier	doFinalOptimization
>853	ExpressionStatement	 
>854	CallExpression	unmappedTrackedFramesMutex . unlock ( )
>855	ArgumentList	 
>856	Callee	unmappedTrackedFramesMutex . unlock
>857	MemberAccess	unmappedTrackedFramesMutex . unlock
>858	Identifier	unlock
>859	Identifier	unmappedTrackedFramesMutex
>860	ExpressionStatement	 
>861	CallExpression	unmappedTrackedFramesSignal . notify_one ( )
>862	ArgumentList	 
>863	Callee	unmappedTrackedFramesSignal . notify_one
>864	MemberAccess	unmappedTrackedFramesSignal . notify_one
>865	Identifier	notify_one
>866	Identifier	unmappedTrackedFramesSignal
>867	ExpressionStatement	 
>868	CallExpression	unmappedTrackedFramesMutex . lock ( )
>869	ArgumentList	 
>870	Callee	unmappedTrackedFramesMutex . lock
>871	MemberAccess	unmappedTrackedFramesMutex . lock
>872	Identifier	lock
>873	Identifier	unmappedTrackedFramesMutex
>874	ExpressionStatement	 
>875	CallExpression	printf ( \"Finalizing Graph... publishing!!\n\" )
>876	ArgumentList	\"Finalizing Graph... publishing!!\n\"
>877	Argument	\"Finalizing Graph... publishing!!\n\"
>878	PrimaryExpression	\"Finalizing Graph... publishing!!\n\"
>879	Callee	printf
>880	Identifier	printf
>881	WhileStatement	while ( doFinalOptimization )
>882	CompoundStatement	 
>883	ExpressionStatement	 
>884	CallExpression	usleep ( 200000 )
>885	ArgumentList	200000
>886	Argument	200000
>887	PrimaryExpression	200000
>888	Callee	usleep
>889	Identifier	usleep
>890	Condition	 
>891	Identifier	doFinalOptimization
>892	ExpressionStatement	 
>893	CallExpression	newConstraintMutex . unlock ( )
>894	ArgumentList	 
>895	Callee	newConstraintMutex . unlock
>896	MemberAccess	newConstraintMutex . unlock
>897	Identifier	unlock
>898	Identifier	newConstraintMutex
>899	ExpressionStatement	 
>900	CallExpression	newConstraintCreatedSignal . notify_all ( )
>901	ArgumentList	 
>902	Callee	newConstraintCreatedSignal . notify_all
>903	MemberAccess	newConstraintCreatedSignal . notify_all
>904	Identifier	notify_all
>905	Identifier	newConstraintCreatedSignal
>906	ExpressionStatement	 
>907	AssignmentExpr	newConstraintAdded = true
>908	Identifier	true
>909	Identifier	newConstraintAdded
>910	ExpressionStatement	 
>911	CallExpression	newConstraintMutex . lock ( )
>912	ArgumentList	 
>913	Callee	newConstraintMutex . lock
>914	MemberAccess	newConstraintMutex . lock
>915	Identifier	lock
>916	Identifier	newConstraintMutex
>917	ExpressionStatement	 
>918	AssignmentExpr	doFinalOptimization = true
>919	Identifier	true
>920	Identifier	doFinalOptimization
>921	ExpressionStatement	 
>922	CallExpression	printf ( \"Finalizing Graph... optimizing!!\n\" )
>923	ArgumentList	\"Finalizing Graph... optimizing!!\n\"
>924	Argument	\"Finalizing Graph... optimizing!!\n\"
>925	PrimaryExpression	\"Finalizing Graph... optimizing!!\n\"
>926	Callee	printf
>927	Identifier	printf
>928	WhileStatement	while ( lastNumConstraintsAddedOnFullRetrack != 0 )
>929	CompoundStatement	 
>930	ExpressionStatement	 
>931	CallExpression	usleep ( 200000 )
>932	ArgumentList	200000
>933	Argument	200000
>934	PrimaryExpression	200000
>935	Callee	usleep
>936	Identifier	usleep
>937	ExpressionStatement	 
>938	AssignmentExpr	doFullReConstraintTrack = true
>939	Identifier	true
>940	Identifier	doFullReConstraintTrack
>941	Condition	 
>942	EqualityExpression	lastNumConstraintsAddedOnFullRetrack != 0
>943	PrimaryExpression	0
>944	Identifier	lastNumConstraintsAddedOnFullRetrack
>945	ExpressionStatement	 
>946	AssignmentExpr	lastNumConstraintsAddedOnFullRetrack = 1
>947	PrimaryExpression	1
>948	Identifier	lastNumConstraintsAddedOnFullRetrack
>949	ExpressionStatement	 
>950	CallExpression	printf ( \"Finalizing Graph... finding final constraints!!\n\" )
>951	ArgumentList	\"Finalizing Graph... finding final constraints!!\n\"
>952	Argument	\"Finalizing Graph... finding final constraints!!\n\"
>953	PrimaryExpression	\"Finalizing Graph... finding final constraints!!\n\"
>954	Callee	printf
>955	Identifier	printf
>970	FunctionDef	SlamSystem 
>971	ParameterList	 
>972	ReturnType	void
>973	CompoundStatement	 
>974	ExpressionStatement	 
>975	CallExpression	printf ( \"Exited constraint search thread \n\" )
>976	ArgumentList	\"Exited constraint search thread \n\"
>977	Argument	\"Exited constraint search thread \n\"
>978	PrimaryExpression	\"Exited constraint search thread \n\"
>979	Callee	printf
>980	Identifier	printf
>981	WhileStatement	while ( keepRunning )
>982	CompoundStatement	 
>983	IfStatement	if ( doFullReConstraintTrack )
>984	CompoundStatement	 
>985	ExpressionStatement	 
>986	CallExpression	lock . lock ( )
>987	ArgumentList	 
>988	Callee	lock . lock
>989	MemberAccess	lock . lock
>990	Identifier	lock
>991	Identifier	lock
>992	ExpressionStatement	 
>993	AssignmentExpr	lastNumConstraintsAddedOnFullRetrack = added
>994	Identifier	added
>995	Identifier	lastNumConstraintsAddedOnFullRetrack
>996	ExpressionStatement	 
>997	AssignmentExpr	doFullReConstraintTrack = false
>998	Identifier	false
>999	Identifier	doFullReConstraintTrack
>1000	ExpressionStatement	 
>1001	CallExpression	printf ( \"Done optizing Full Map! Added %d constraints.\n\" , added )
>1002	ArgumentList	\"Done optizing Full Map! Added %d constraints.\n\"
>1003	Argument	added
>1004	Identifier	added
>1005	Argument	\"Done optizing Full Map! Added %d constraints.\n\"
>1006	PrimaryExpression	\"Done optizing Full Map! Added %d constraints.\n\"
>1007	Callee	printf
>1008	Identifier	printf
>1009	ForStatement	for ( unsigned int i = 0 ; i < keyFrameGraph -> keyframesAll . size ( ) ; i ++ )
>1010	CompoundStatement	 
>1011	IfStatement	if ( keyFrameGraph -> keyframesAll [ i ] -> pose -> isInGraph )
>1012	ExpressionStatement	 
>1013	AssignmentExpr	added += findConstraintsForNewKeyFrames ( keyFrameGraph -> keyframesAll [ i ] , false , false , 1.0 )
>1014	CallExpression	findConstraintsForNewKeyFrames ( keyFrameGraph -> keyframesAll [ i ] , false , false , 1.0 )
>1015	ArgumentList	keyFrameGraph -> keyframesAll [ i ]
>1016	Argument	1.0
>1017	PrimaryExpression	1.0
>1018	Argument	false
>1019	Identifier	false
>1020	Argument	false
>1021	Identifier	false
>1022	Argument	keyFrameGraph -> keyframesAll [ i ]
>1023	ArrayIndexing	keyFrameGraph -> keyframesAll [ i ]
>1024	Identifier	i
>1025	PtrMemberAccess	keyFrameGraph -> keyframesAll
>1026	Identifier	keyframesAll
>1027	Identifier	keyFrameGraph
>1028	Callee	findConstraintsForNewKeyFrames
>1029	Identifier	findConstraintsForNewKeyFrames
>1030	Identifier	added
>1031	Condition	 
>1032	PtrMemberAccess	keyFrameGraph -> keyframesAll [ i ] -> pose -> isInGraph
>1033	Identifier	isInGraph
>1034	PtrMemberAccess	keyFrameGraph -> keyframesAll [ i ] -> pose
>1035	Identifier	pose
>1036	ArrayIndexing	keyFrameGraph -> keyframesAll [ i ]
>1037	Identifier	i
>1038	PtrMemberAccess	keyFrameGraph -> keyframesAll
>1039	Identifier	keyframesAll
>1040	Identifier	keyFrameGraph
>1041	IncDecOp	 
>1042	IncDec	++
>1043	Identifier	i
>1044	Condition	 
>1045	RelationalExpression	i < keyFrameGraph -> keyframesAll . size ( )
>1046	CallExpression	keyFrameGraph -> keyframesAll . size ( )
>1047	ArgumentList	 
>1048	Callee	keyFrameGraph -> keyframesAll . size
>1049	MemberAccess	keyFrameGraph -> keyframesAll . size
>1050	Identifier	size
>1051	PtrMemberAccess	keyFrameGraph -> keyframesAll
>1052	Identifier	keyframesAll
>1053	Identifier	keyFrameGraph
>1054	Identifier	i
>1055	ForInit	 
>1056	IdentifierDeclStatement	unsigned int i = 0 ;
>1057	IdentifierDecl	i = 0
>1058	AssignmentExpr	i = 0
>1059	PrimaryExpression	0
>1060	Identifier	i
>1061	Identifier	i
>1062	IdentifierDeclType	unsigned int
>1063	IdentifierDeclStatement	 
>1064	IdentifierDecl	added = 0
>1065	AssignmentExpr	added = 0
>1066	PrimaryExpression	0
>1067	Identifier	added
>1068	Identifier	added
>1069	IdentifierDeclType	int
>1070	ExpressionStatement	 
>1071	CallExpression	printf ( \"Optizing Full Map!\n\" )
>1072	ArgumentList	\"Optizing Full Map!\n\"
>1073	Argument	\"Optizing Full Map!\n\"
>1074	PrimaryExpression	\"Optizing Full Map!\n\"
>1075	Callee	printf
>1076	Identifier	printf
>1077	ExpressionStatement	 
>1078	CallExpression	lock . unlock ( )
>1079	ArgumentList	 
>1080	Callee	lock . unlock
>1081	MemberAccess	lock . unlock
>1082	Identifier	unlock
>1083	Identifier	lock
>1084	Condition	 
>1085	Identifier	doFullReConstraintTrack
>1086	IfStatement	if ( newKeyFrames . size ( ) == 0 )
>1087	ElseStatement	else
>1088	CompoundStatement	 
>1089	ExpressionStatement	 
>1090	CallExpression	lock . lock ( )
>1091	ArgumentList	 
>1092	Callee	lock . lock
>1093	MemberAccess	lock . lock
>1094	Identifier	lock
>1095	Identifier	lock
>1096	ExpressionStatement	 
>1097	CallExpression	FrameMemory 
>1098	ArgumentList	 
>1099	Callee	FrameMemory 
>1100	MemberAccess	FrameMemory 
>1101	Identifier	pruneActiveFrames
>1102	CallExpression	FrameMemory 
>1103	ArgumentList	 
>1104	Callee	FrameMemory 
>1105	Identifier	FrameMemory 
>1106	ExpressionStatement	 
>1107	IncDecOp	nFindConstraintsItaration ++
>1108	IncDec	++
>1109	Identifier	nFindConstraintsItaration
>1110	ExpressionStatement	 
>1111	AssignmentExpr	msFindConstraintsItaration = 0.9 * msFindConstraintsItaration + 0.1 * ( ( tv_end . tv_sec - tv_start \
>1112	AdditiveExpression	0.9 * msFindConstraintsItaration + 0.1 * ( ( tv_end . tv_sec - tv_start . tv_sec ) * 1000.0f + ( tv_end \
>1113	MultiplicativeExpression	0.1 * ( ( tv_end . tv_sec - tv_start . tv_sec ) * 1000.0f + ( tv_end . tv_usec - tv_start . tv_usec ) / \
>1114	AdditiveExpression	( tv_end . tv_sec - tv_start . tv_sec ) * 1000.0f + ( tv_end . tv_usec - tv_start . tv_usec ) / 1000.0f
>1115	MultiplicativeExpression	( tv_end . tv_usec - tv_start . tv_usec ) / 1000.0f
>1116	PrimaryExpression	1000.0f
>1117	AdditiveExpression	tv_end . tv_usec - tv_start . tv_usec
>1118	MemberAccess	tv_start . tv_usec
>1119	Identifier	tv_usec
>1120	Identifier	tv_start
>1121	MemberAccess	tv_end . tv_usec
>1122	Identifier	tv_usec
>1123	Identifier	tv_end
>1124	MultiplicativeExpression	( tv_end . tv_sec - tv_start . tv_sec ) * 1000.0f
>1125	PrimaryExpression	1000.0f
>1126	AdditiveExpression	tv_end . tv_sec - tv_start . tv_sec
>1127	MemberAccess	tv_start . tv_sec
>1128	Identifier	tv_sec
>1129	Identifier	tv_start
>1130	MemberAccess	tv_end . tv_sec
>1131	Identifier	tv_sec
>1132	Identifier	tv_end
>1133	PrimaryExpression	0.1
>1134	MultiplicativeExpression	0.9 * msFindConstraintsItaration
>1135	Identifier	msFindConstraintsItaration
>1136	PrimaryExpression	0.9
>1137	Identifier	msFindConstraintsItaration
>1138	ExpressionStatement	 
>1139	CallExpression	gettimeofday ( & tv_end , NULL )
>1140	ArgumentList	& tv_end
>1141	Argument	NULL
>1142	Identifier	NULL
>1143	Argument	& tv_end
>1144	UnaryOp	& tv_end
>1145	Identifier	tv_end
>1146	UnaryOperator	&
>1147	Callee	gettimeofday
>1148	Identifier	gettimeofday
>1149	ExpressionStatement	 
>1150	AssignmentExpr	failedToRetrack = 0
>1151	PrimaryExpression	0
>1152	Identifier	failedToRetrack
>1153	ExpressionStatement	 
>1154	CallExpression	findConstraintsForNewKeyFrames ( newKF , true , true , 1.0 )
>1155	ArgumentList	newKF
>1156	Argument	1.0
>1157	PrimaryExpression	1.0
>1158	Argument	true
>1159	Identifier	true
>1160	Argument	true
>1161	Identifier	true
>1162	Argument	newKF
>1163	Identifier	newKF
>1164	Callee	findConstraintsForNewKeyFrames
>1165	Identifier	findConstraintsForNewKeyFrames
>1166	ExpressionStatement	 
>1167	CallExpression	gettimeofday ( & tv_start , NULL )
>1168	ArgumentList	& tv_start
>1169	Argument	NULL
>1170	Identifier	NULL
>1171	Argument	& tv_start
>1172	UnaryOp	& tv_start
>1173	Identifier	tv_start
>1174	UnaryOperator	&
>1175	Callee	gettimeofday
>1176	Identifier	gettimeofday
>1177	IdentifierDeclStatement	 
>1178	IdentifierDecl	tv_end
>1179	Identifier	tv_end
>1180	IdentifierDeclType	struct timeval
>1181	IdentifierDecl	tv_start
>1182	Identifier	tv_start
>1183	IdentifierDeclType	struct timeval
>1184	ExpressionStatement	 
>1185	CallExpression	lock . unlock ( )
>1186	ArgumentList	 
>1187	Callee	lock . unlock
>1188	MemberAccess	lock . unlock
>1189	Identifier	unlock
>1190	Identifier	lock
>1191	ExpressionStatement	 
>1192	CallExpression	newKeyFrames . pop_front ( )
>1193	ArgumentList	 
>1194	Callee	newKeyFrames . pop_front
>1195	MemberAccess	newKeyFrames . pop_front
>1196	Identifier	pop_front
>1197	Identifier	newKeyFrames
>1198	IdentifierDeclStatement	 
>1199	IdentifierDecl	* newKF = newKeyFrames . front ( )
>1200	AssignmentExpr	* newKF = newKeyFrames . front ( )
>1201	CallExpression	newKeyFrames . front ( )
>1202	ArgumentList	 
>1203	Callee	newKeyFrames . front
>1204	MemberAccess	newKeyFrames . front
>1205	Identifier	front
>1206	Identifier	newKeyFrames
>1207	Identifier	newKF
>1208	Identifier	newKF
>1209	IdentifierDeclType	Frame *
>1210	CompoundStatement	 
>1211	IfStatement	if ( ! doneSomething )
>1212	CompoundStatement	 
>1213	ExpressionStatement	 
>1214	CallExpression	newKeyFrameCreatedSignal . timed_wait ( lock , boost 
>1215	ArgumentList	lock
>1216	Argument	boost 
>1217	CallExpression	boost 
>1218	ArgumentList	500
>1219	Argument	500
>1220	PrimaryExpression	500
>1221	Callee	boost 
>1222	Identifier	boost 
>1223	Argument	lock
>1224	Identifier	lock
>1225	Callee	newKeyFrameCreatedSignal . timed_wait
>1226	MemberAccess	newKeyFrameCreatedSignal . timed_wait
>1227	Identifier	timed_wait
>1228	Identifier	newKeyFrameCreatedSignal
>1229	IfStatement	if ( enablePrintDebugInfo && printConstraintSearchInfo )
>1230	ExpressionStatement	 
>1231	CallExpression	printf ( \"nothing to re-track... waiting.\n\" )
>1232	ArgumentList	\"nothing to re-track... waiting.\n\"
>1233	Argument	\"nothing to re-track... waiting.\n\"
>1234	PrimaryExpression	\"nothing to re-track... waiting.\n\"
>1235	Callee	printf
>1236	Identifier	printf
>1237	Condition	 
>1238	AndExpression	enablePrintDebugInfo && printConstraintSearchInfo
>1239	Identifier	printConstraintSearchInfo
>1240	Identifier	enablePrintDebugInfo
>1241	Condition	 
>1242	UnaryOp	! doneSomething
>1243	Identifier	doneSomething
>1244	UnaryOperator	!
>1245	ExpressionStatement	 
>1246	CallExpression	lock . lock ( )
>1247	ArgumentList	 
>1248	Callee	lock . lock
>1249	MemberAccess	lock . lock
>1250	Identifier	lock
>1251	Identifier	lock
>1252	IfStatement	if ( keyFrameGraph -> keyframesForRetrack . size ( ) > 10 )
>1253	ElseStatement	else
>1254	ExpressionStatement	 
>1255	CallExpression	keyFrameGraph -> keyframesForRetrackMutex . unlock ( )
>1256	ArgumentList	 
>1257	Callee	keyFrameGraph -> keyframesForRetrackMutex . unlock
>1258	MemberAccess	keyFrameGraph -> keyframesForRetrackMutex . unlock
>1259	Identifier	unlock
>1260	PtrMemberAccess	keyFrameGraph -> keyframesForRetrackMutex
>1261	Identifier	keyframesForRetrackMutex
>1262	Identifier	keyFrameGraph
>1263	CompoundStatement	 
>1264	IfStatement	if ( failedToRetrack < ( int ) keyFrameGraph -> keyframesForRetrack . size ( ) - 5 )
>1265	ExpressionStatement	 
>1266	AssignmentExpr	doneSomething = true
>1267	Identifier	true
>1268	Identifier	doneSomething
>1269	Condition	 
>1270	RelationalExpression	failedToRetrack < ( int ) keyFrameGraph -> keyframesForRetrack . size ( ) - 5
>1271	AdditiveExpression	( int ) keyFrameGraph -> keyframesForRetrack . size ( ) - 5
>1272	PrimaryExpression	5
>1273	CastExpression	( int ) keyFrameGraph -> keyframesForRetrack . size ( )
>1274	CallExpression	keyFrameGraph -> keyframesForRetrack . size ( )
>1275	ArgumentList	 
>1276	Callee	keyFrameGraph -> keyframesForRetrack . size
>1277	MemberAccess	keyFrameGraph -> keyframesForRetrack . size
>1278	Identifier	size
>1279	PtrMemberAccess	keyFrameGraph -> keyframesForRetrack
>1280	Identifier	keyframesForRetrack
>1281	Identifier	keyFrameGraph
>1282	CastTarget	int
>1283	Identifier	failedToRetrack
>1284	IfStatement	if ( found == 0 )
>1285	ElseStatement	else
>1286	ExpressionStatement	 
>1287	AssignmentExpr	failedToRetrack = 0
>1288	PrimaryExpression	0
>1289	Identifier	failedToRetrack
>1290	ExpressionStatement	 
>1291	IncDecOp	failedToRetrack ++
>1292	IncDec	++
>1293	Identifier	failedToRetrack
>1294	Condition	 
>1295	EqualityExpression	found == 0
>1296	PrimaryExpression	0
>1297	Identifier	found
>1298	IdentifierDeclStatement	 
>1299	IdentifierDecl	found = findConstraintsForNewKeyFrames ( toReTrackFrame , false , false , 2.0 )
>1300	AssignmentExpr	found = findConstraintsForNewKeyFrames ( toReTrackFrame , false , false , 2.0 )
>1301	CallExpression	findConstraintsForNewKeyFrames ( toReTrackFrame , false , false , 2.0 )
>1302	ArgumentList	toReTrackFrame
>1303	Argument	2.0
>1304	PrimaryExpression	2.0
>1305	Argument	false
>1306	Identifier	false
>1307	Argument	false
>1308	Identifier	false
>1309	Argument	toReTrackFrame
>1310	Identifier	toReTrackFrame
>1311	Callee	findConstraintsForNewKeyFrames
>1312	Identifier	findConstraintsForNewKeyFrames
>1313	Identifier	found
>1314	Identifier	found
>1315	IdentifierDeclType	int
>1316	ExpressionStatement	 
>1317	CallExpression	keyFrameGraph -> keyframesForRetrackMutex . unlock ( )
>1318	ArgumentList	 
>1319	Callee	keyFrameGraph -> keyframesForRetrackMutex . unlock
>1320	MemberAccess	keyFrameGraph -> keyframesForRetrackMutex . unlock
>1321	Identifier	unlock
>1322	PtrMemberAccess	keyFrameGraph -> keyframesForRetrackMutex
>1323	Identifier	keyframesForRetrackMutex
>1324	Identifier	keyFrameGraph
>1325	ExpressionStatement	 
>1326	CallExpression	keyFrameGraph -> keyframesForRetrack . push_back ( toReTrackFrame )
>1327	ArgumentList	toReTrackFrame
>1328	Argument	toReTrackFrame
>1329	Identifier	toReTrackFrame
>1330	Callee	keyFrameGraph -> keyframesForRetrack . push_back
>1331	MemberAccess	keyFrameGraph -> keyframesForRetrack . push_back
>1332	Identifier	push_back
>1333	PtrMemberAccess	keyFrameGraph -> keyframesForRetrack
>1334	Identifier	keyframesForRetrack
>1335	Identifier	keyFrameGraph
>1336	ExpressionStatement	 
>1337	CallExpression	keyFrameGraph -> keyframesForRetrack . erase ( toReTrack )
>1338	ArgumentList	toReTrack
>1339	Argument	toReTrack
>1340	Identifier	toReTrack
>1341	Callee	keyFrameGraph -> keyframesForRetrack . erase
>1342	MemberAccess	keyFrameGraph -> keyframesForRetrack . erase
>1343	Identifier	erase
>1344	PtrMemberAccess	keyFrameGraph -> keyframesForRetrack
>1345	Identifier	keyframesForRetrack
>1346	Identifier	keyFrameGraph
>1347	IdentifierDeclStatement	 
>1348	IdentifierDecl	* toReTrackFrame = * toReTrack
>1349	AssignmentExpr	* toReTrackFrame = * toReTrack
>1350	UnaryOp	* toReTrack
>1351	Identifier	toReTrack
>1352	UnaryOperator	*
>1353	Identifier	toReTrackFrame
>1354	Identifier	toReTrackFrame
>1355	IdentifierDeclType	Frame *
>1356	IdentifierDeclStatement	 
>1357	IdentifierDecl	toReTrack = keyFrameGraph -> keyframesForRetrack . begin ( ) + ( rand ( ) % ( keyFrameGraph -> keyframesForRetrack \
>1358	AssignmentExpr	toReTrack = keyFrameGraph -> keyframesForRetrack . begin ( ) + ( rand ( ) % ( keyFrameGraph -> keyframesForRetrack \
>1359	AdditiveExpression	keyFrameGraph -> keyframesForRetrack . begin ( ) + ( rand ( ) % ( keyFrameGraph -> keyframesForRetrack \
>1360	MultiplicativeExpression	rand ( ) % ( keyFrameGraph -> keyframesForRetrack . size ( ) / 3 )
>1361	MultiplicativeExpression	keyFrameGraph -> keyframesForRetrack . size ( ) / 3
>1362	PrimaryExpression	3
>1363	CallExpression	keyFrameGraph -> keyframesForRetrack . size ( )
>1364	ArgumentList	 
>1365	Callee	keyFrameGraph -> keyframesForRetrack . size
>1366	MemberAccess	keyFrameGraph -> keyframesForRetrack . size
>1367	Identifier	size
>1368	PtrMemberAccess	keyFrameGraph -> keyframesForRetrack
>1369	Identifier	keyframesForRetrack
>1370	Identifier	keyFrameGraph
>1371	CallExpression	rand ( )
>1372	ArgumentList	 
>1373	Callee	rand
>1374	Identifier	rand
>1375	CallExpression	keyFrameGraph -> keyframesForRetrack . begin ( )
>1376	ArgumentList	 
>1377	Callee	keyFrameGraph -> keyframesForRetrack . begin
>1378	MemberAccess	keyFrameGraph -> keyframesForRetrack . begin
>1379	Identifier	begin
>1380	PtrMemberAccess	keyFrameGraph -> keyframesForRetrack
>1381	Identifier	keyframesForRetrack
>1382	Identifier	keyFrameGraph
>1383	Identifier	toReTrack
>1384	Identifier	toReTrack
>1385	IdentifierDeclType	std 
>1386	Condition	 
>1387	RelationalExpression	keyFrameGraph -> keyframesForRetrack . size ( ) > 10
>1388	PrimaryExpression	10
>1389	CallExpression	keyFrameGraph -> keyframesForRetrack . size ( )
>1390	ArgumentList	 
>1391	Callee	keyFrameGraph -> keyframesForRetrack . size
>1392	MemberAccess	keyFrameGraph -> keyframesForRetrack . size
>1393	Identifier	size
>1394	PtrMemberAccess	keyFrameGraph -> keyframesForRetrack
>1395	Identifier	keyframesForRetrack
>1396	Identifier	keyFrameGraph
>1397	IdentifierDeclStatement	 
>1398	IdentifierDecl	doneSomething = false
>1399	AssignmentExpr	doneSomething = false
>1400	Identifier	false
>1401	Identifier	false
>1402	Identifier	doneSomething
>1403	IdentifierDeclType	bool
>1404	ExpressionStatement	 
>1405	CallExpression	keyFrameGraph -> keyframesForRetrackMutex . lock ( )
>1406	ArgumentList	 
>1407	Callee	keyFrameGraph -> keyframesForRetrackMutex . lock
>1408	MemberAccess	keyFrameGraph -> keyframesForRetrackMutex . lock
>1409	Identifier	lock
>1410	PtrMemberAccess	keyFrameGraph -> keyframesForRetrackMutex
>1411	Identifier	keyframesForRetrackMutex
>1412	Identifier	keyFrameGraph
>1413	ExpressionStatement	 
>1414	CallExpression	lock . unlock ( )
>1415	ArgumentList	 
>1416	Callee	lock . unlock
>1417	MemberAccess	lock . unlock
>1418	Identifier	unlock
>1419	Identifier	lock
>1420	Condition	 
>1421	EqualityExpression	newKeyFrames . size ( ) == 0
>1422	PrimaryExpression	0
>1423	CallExpression	newKeyFrames . size ( )
>1424	ArgumentList	 
>1425	Callee	newKeyFrames . size
>1426	MemberAccess	newKeyFrames . size
>1427	Identifier	size
>1428	Identifier	newKeyFrames
>1429	Condition	 
>1430	Identifier	keepRunning
>1431	IdentifierDeclStatement	 
>1432	IdentifierDecl	failedToRetrack = 0
>1433	AssignmentExpr	failedToRetrack = 0
>1434	PrimaryExpression	0
>1435	Identifier	failedToRetrack
>1436	Identifier	failedToRetrack
>1437	IdentifierDeclType	int
>1438	IdentifierDeclStatement	 
>1439	IdentifierDecl	lock ( newKeyFrameMutex )
>1440	Identifier	newKeyFrameMutex
>1441	Identifier	lock
>1442	IdentifierDeclType	boost 
>1443	ExpressionStatement	 
>1444	CallExpression	printf ( \"Started  constraint search thread!\n\" )
>1445	ArgumentList	\"Started  constraint search thread!\n\"
>1446	Argument	\"Started  constraint search thread!\n\"
>1447	PrimaryExpression	\"Started  constraint search thread!\n\"
>1448	Callee	printf
>1449	Identifier	printf
>1509	FunctionDef	SlamSystem 
>1510	ParameterList	 
>1511	ReturnType	void
>1512	CompoundStatement	 
>1513	ExpressionStatement	 
>1514	CallExpression	printf ( \"Exited optimization thread \n\" )
>1515	ArgumentList	\"Exited optimization thread \n\"
>1516	Argument	\"Exited optimization thread \n\"
>1517	PrimaryExpression	\"Exited optimization thread \n\"
>1518	Callee	printf
>1519	Identifier	printf
>1520	WhileStatement	while ( keepRunning )
>1521	CompoundStatement	 
>1522	WhileStatement	while ( optimizationIteration ( 5 , 0.02 ) )
>1523	ExpressionStatement	 
>1524	Condition	 
>1525	CallExpression	optimizationIteration ( 5 , 0.02 )
>1526	ArgumentList	5
>1527	Argument	0.02
>1528	PrimaryExpression	0.02
>1529	Argument	5
>1530	PrimaryExpression	5
>1531	Callee	optimizationIteration
>1532	Identifier	optimizationIteration
>1533	IfStatement	if ( doFinalOptimization )
>1534	CompoundStatement	 
>1535	ExpressionStatement	 
>1536	AssignmentExpr	doFinalOptimization = false
>1537	Identifier	false
>1538	Identifier	doFinalOptimization
>1539	ExpressionStatement	 
>1540	CallExpression	optimizationIteration ( 50 , 0.001 )
>1541	ArgumentList	50
>1542	Argument	0.001
>1543	PrimaryExpression	0.001
>1544	Argument	50
>1545	PrimaryExpression	50
>1546	Callee	optimizationIteration
>1547	Identifier	optimizationIteration
>1548	ExpressionStatement	 
>1549	CallExpression	printf ( \"doing final optimization iteration!\n\" )
>1550	ArgumentList	\"doing final optimization iteration!\n\"
>1551	Argument	\"doing final optimization iteration!\n\"
>1552	PrimaryExpression	\"doing final optimization iteration!\n\"
>1553	Callee	printf
>1554	Identifier	printf
>1555	Condition	 
>1556	Identifier	doFinalOptimization
>1557	ExpressionStatement	 
>1558	CallExpression	lock . unlock ( )
>1559	ArgumentList	 
>1560	Callee	lock . unlock
>1561	MemberAccess	lock . unlock
>1562	Identifier	unlock
>1563	Identifier	lock
>1564	ExpressionStatement	 
>1565	AssignmentExpr	newConstraintAdded = false
>1566	Identifier	false
>1567	Identifier	newConstraintAdded
>1568	IfStatement	if ( ! newConstraintAdded )
>1569	ExpressionStatement	 
>1570	CallExpression	newConstraintCreatedSignal . timed_wait ( lock , boost 
>1571	ArgumentList	lock
>1572	Argument	boost 
>1573	CallExpression	boost 
>1574	ArgumentList	2000
>1575	Argument	2000
>1576	PrimaryExpression	2000
>1577	Callee	boost 
>1578	Identifier	boost 
>1579	Argument	lock
>1580	Identifier	lock
>1581	Callee	newConstraintCreatedSignal . timed_wait
>1582	MemberAccess	newConstraintCreatedSignal . timed_wait
>1583	Identifier	timed_wait
>1584	Identifier	newConstraintCreatedSignal
>1585	Condition	 
>1586	UnaryOp	! newConstraintAdded
>1587	Identifier	newConstraintAdded
>1588	UnaryOperator	!
>1589	IdentifierDeclStatement	 
>1590	IdentifierDecl	lock ( newConstraintMutex )
>1591	Identifier	newConstraintMutex
>1592	Identifier	lock
>1593	IdentifierDeclType	boost 
>1594	Condition	 
>1595	Identifier	keepRunning
>1596	ExpressionStatement	 
>1597	CallExpression	printf ( \"Started optimization thread \n\" )
>1598	ArgumentList	\"Started optimization thread \n\"
>1599	Argument	\"Started optimization thread \n\"
>1600	PrimaryExpression	\"Started optimization thread \n\"
>1601	Callee	printf
>1602	Identifier	printf
>1614	FunctionDef	SlamSystem 
>1615	ParameterList	 
>1616	ReturnType	void
>1617	CompoundStatement	 
>1618	IfStatement	if ( outputWrapper != nullptr )
>1619	ExpressionStatement	 
>1620	CallExpression	outputWrapper -> publishKeyframeGraph ( keyFrameGraph )
>1621	ArgumentList	keyFrameGraph
>1622	Argument	keyFrameGraph
>1623	Identifier	keyFrameGraph
>1624	Callee	outputWrapper -> publishKeyframeGraph
>1625	PtrMemberAccess	outputWrapper -> publishKeyframeGraph
>1626	Identifier	publishKeyframeGraph
>1627	Identifier	outputWrapper
>1628	Condition	 
>1629	EqualityExpression	outputWrapper != nullptr
>1630	Identifier	nullptr
>1631	Identifier	outputWrapper
>1638	FunctionDef	SlamSystem 
>1639	ParameterList	const std 
>1640	Parameter	 
>1641	Identifier	filename
>1642	ParameterType	const std 
>1643	ReturnType	void
>1644	CompoundStatement	 
>1645	ExpressionStatement	 
>1646	AssignmentExpr	depthMapScreenshotFlag = true
>1647	Identifier	true
>1648	Identifier	depthMapScreenshotFlag
>1649	ExpressionStatement	 
>1650	AssignmentExpr	depthMapScreenshotFilename = filename
>1651	Identifier	filename
>1652	Identifier	depthMapScreenshotFilename
>1660	FunctionDef	SlamSystem 
>1661	ParameterList	 
>1662	ReturnType	void
>1663	CompoundStatement	 
>1664	IfStatement	if ( outputWrapper != 0 )
>1665	ExpressionStatement	 
>1666	CallExpression	outputWrapper -> publishKeyframe ( currentKeyFrame . get ( ) )
>1667	ArgumentList	currentKeyFrame . get ( )
>1668	Argument	currentKeyFrame . get ( )
>1669	CallExpression	currentKeyFrame . get ( )
>1670	ArgumentList	 
>1671	Callee	currentKeyFrame . get
>1672	MemberAccess	currentKeyFrame . get
>1673	Identifier	get
>1674	Identifier	currentKeyFrame
>1675	Callee	outputWrapper -> publishKeyframe
>1676	PtrMemberAccess	outputWrapper -> publishKeyframe
>1677	Identifier	publishKeyframe
>1678	Identifier	outputWrapper
>1679	Condition	 
>1680	EqualityExpression	outputWrapper != 0
>1681	PrimaryExpression	0
>1682	Identifier	outputWrapper
>1683	IfStatement	if ( SLAMEnabled )
>1684	CompoundStatement	 
>1685	IfStatement	if ( currentKeyFrame -> idxInKeyframes < 0 )
>1686	CompoundStatement	 
>1687	ExpressionStatement	 
>1688	CallExpression	newKeyFrameMutex . unlock ( )
>1689	ArgumentList	 
>1690	Callee	newKeyFrameMutex . unlock
>1691	MemberAccess	newKeyFrameMutex . unlock
>1692	Identifier	unlock
>1693	Identifier	newKeyFrameMutex
>1694	ExpressionStatement	 
>1695	CallExpression	newKeyFrameCreatedSignal . notify_all ( )
>1696	ArgumentList	 
>1697	Callee	newKeyFrameCreatedSignal . notify_all
>1698	MemberAccess	newKeyFrameCreatedSignal . notify_all
>1699	Identifier	notify_all
>1700	Identifier	newKeyFrameCreatedSignal
>1701	ExpressionStatement	 
>1702	CallExpression	newKeyFrames . push_back ( currentKeyFrame . get ( ) )
>1703	ArgumentList	currentKeyFrame . get ( )
>1704	Argument	currentKeyFrame . get ( )
>1705	CallExpression	currentKeyFrame . get ( )
>1706	ArgumentList	 
>1707	Callee	currentKeyFrame . get
>1708	MemberAccess	currentKeyFrame . get
>1709	Identifier	get
>1710	Identifier	currentKeyFrame
>1711	Callee	newKeyFrames . push_back
>1712	MemberAccess	newKeyFrames . push_back
>1713	Identifier	push_back
>1714	Identifier	newKeyFrames
>1715	ExpressionStatement	 
>1716	CallExpression	newKeyFrameMutex . lock ( )
>1717	ArgumentList	 
>1718	Callee	newKeyFrameMutex . lock
>1719	MemberAccess	newKeyFrameMutex . lock
>1720	Identifier	lock
>1721	Identifier	newKeyFrameMutex
>1722	ExpressionStatement	 
>1723	CallExpression	keyFrameGraph -> keyframesAllMutex . unlock ( )
>1724	ArgumentList	 
>1725	Callee	keyFrameGraph -> keyframesAllMutex . unlock
>1726	MemberAccess	keyFrameGraph -> keyframesAllMutex . unlock
>1727	Identifier	unlock
>1728	PtrMemberAccess	keyFrameGraph -> keyframesAllMutex
>1729	Identifier	keyframesAllMutex
>1730	Identifier	keyFrameGraph
>1731	ExpressionStatement	 
>1732	IncDecOp	keyFrameGraph -> totalVertices ++
>1733	IncDec	++
>1734	PtrMemberAccess	keyFrameGraph -> totalVertices
>1735	Identifier	totalVertices
>1736	Identifier	keyFrameGraph
>1737	ExpressionStatement	 
>1738	AssignmentExpr	keyFrameGraph -> totalPoints += currentKeyFrame -> numPoints
>1739	PtrMemberAccess	currentKeyFrame -> numPoints
>1740	Identifier	numPoints
>1741	Identifier	currentKeyFrame
>1742	PtrMemberAccess	keyFrameGraph -> totalPoints
>1743	Identifier	totalPoints
>1744	Identifier	keyFrameGraph
>1745	ExpressionStatement	 
>1746	CallExpression	keyFrameGraph -> keyframesAll . push_back ( currentKeyFrame . get ( ) )
>1747	ArgumentList	currentKeyFrame . get ( )
>1748	Argument	currentKeyFrame . get ( )
>1749	CallExpression	currentKeyFrame . get ( )
>1750	ArgumentList	 
>1751	Callee	currentKeyFrame . get
>1752	MemberAccess	currentKeyFrame . get
>1753	Identifier	get
>1754	Identifier	currentKeyFrame
>1755	Callee	keyFrameGraph -> keyframesAll . push_back
>1756	MemberAccess	keyFrameGraph -> keyframesAll . push_back
>1757	Identifier	push_back
>1758	PtrMemberAccess	keyFrameGraph -> keyframesAll
>1759	Identifier	keyframesAll
>1760	Identifier	keyFrameGraph
>1761	ExpressionStatement	 
>1762	AssignmentExpr	currentKeyFrame -> idxInKeyframes = keyFrameGraph -> keyframesAll . size ( )
>1763	CallExpression	keyFrameGraph -> keyframesAll . size ( )
>1764	ArgumentList	 
>1765	Callee	keyFrameGraph -> keyframesAll . size
>1766	MemberAccess	keyFrameGraph -> keyframesAll . size
>1767	Identifier	size
>1768	PtrMemberAccess	keyFrameGraph -> keyframesAll
>1769	Identifier	keyframesAll
>1770	Identifier	keyFrameGraph
>1771	PtrMemberAccess	currentKeyFrame -> idxInKeyframes
>1772	Identifier	idxInKeyframes
>1773	Identifier	currentKeyFrame
>1774	ExpressionStatement	 
>1775	CallExpression	keyFrameGraph -> keyframesAllMutex . lock ( )
>1776	ArgumentList	 
>1777	Callee	keyFrameGraph -> keyframesAllMutex . lock
>1778	MemberAccess	keyFrameGraph -> keyframesAllMutex . lock
>1779	Identifier	lock
>1780	PtrMemberAccess	keyFrameGraph -> keyframesAllMutex
>1781	Identifier	keyframesAllMutex
>1782	Identifier	keyFrameGraph
>1783	Condition	 
>1784	RelationalExpression	currentKeyFrame -> idxInKeyframes < 0
>1785	PrimaryExpression	0
>1786	PtrMemberAccess	currentKeyFrame -> idxInKeyframes
>1787	Identifier	idxInKeyframes
>1788	Identifier	currentKeyFrame
>1789	ExpressionStatement	 
>1790	CallExpression	mappingTrackingReference -> invalidate ( )
>1791	ArgumentList	 
>1792	Callee	mappingTrackingReference -> invalidate
>1793	PtrMemberAccess	mappingTrackingReference -> invalidate
>1794	Identifier	invalidate
>1795	Identifier	mappingTrackingReference
>1796	ExpressionStatement	 
>1797	CallExpression	currentKeyFrame -> setPermaRef ( mappingTrackingReference )
>1798	ArgumentList	mappingTrackingReference
>1799	Argument	mappingTrackingReference
>1800	Identifier	mappingTrackingReference
>1801	Callee	currentKeyFrame -> setPermaRef
>1802	PtrMemberAccess	currentKeyFrame -> setPermaRef
>1803	Identifier	setPermaRef
>1804	Identifier	currentKeyFrame
>1805	ExpressionStatement	 
>1806	CallExpression	mappingTrackingReference -> importFrame ( currentKeyFrame . get ( ) )
>1807	ArgumentList	currentKeyFrame . get ( )
>1808	Argument	currentKeyFrame . get ( )
>1809	CallExpression	currentKeyFrame . get ( )
>1810	ArgumentList	 
>1811	Callee	currentKeyFrame . get
>1812	MemberAccess	currentKeyFrame . get
>1813	Identifier	get
>1814	Identifier	currentKeyFrame
>1815	Callee	mappingTrackingReference -> importFrame
>1816	PtrMemberAccess	mappingTrackingReference -> importFrame
>1817	Identifier	importFrame
>1818	Identifier	mappingTrackingReference
>1819	Condition	 
>1820	Identifier	SLAMEnabled
>1821	ExpressionStatement	 
>1822	CallExpression	map -> finalizeKeyFrame ( )
>1823	ArgumentList	 
>1824	Callee	map -> finalizeKeyFrame
>1825	PtrMemberAccess	map -> finalizeKeyFrame
>1826	Identifier	finalizeKeyFrame
>1827	Identifier	map
>1828	IfStatement	if ( enablePrintDebugInfo && printThreadingInfo )
>1829	ExpressionStatement	 
>1830	CallExpression	printf ( \"FINALIZING KF %d\n\" , currentKeyFrame -> id ( ) )
>1831	ArgumentList	\"FINALIZING KF %d\n\"
>1832	Argument	currentKeyFrame -> id ( )
>1833	CallExpression	currentKeyFrame -> id ( )
>1834	ArgumentList	 
>1835	Callee	currentKeyFrame -> id
>1836	PtrMemberAccess	currentKeyFrame -> id
>1837	Identifier	id
>1838	Identifier	currentKeyFrame
>1839	Argument	\"FINALIZING KF %d\n\"
>1840	PrimaryExpression	\"FINALIZING KF %d\n\"
>1841	Callee	printf
>1842	Identifier	printf
>1843	Condition	 
>1844	AndExpression	enablePrintDebugInfo && printThreadingInfo
>1845	Identifier	printThreadingInfo
>1846	Identifier	enablePrintDebugInfo
>1872	FunctionDef	SlamSystem 
>1873	ParameterList	 
>1874	ReturnType	void
>1875	CompoundStatement	 
>1876	ExpressionStatement	 
>1877	CallExpression	keyFrameGraph -> idToKeyFrameMutex . unlock ( )
>1878	ArgumentList	 
>1879	Callee	keyFrameGraph -> idToKeyFrameMutex . unlock
>1880	MemberAccess	keyFrameGraph -> idToKeyFrameMutex . unlock
>1881	Identifier	unlock
>1882	PtrMemberAccess	keyFrameGraph -> idToKeyFrameMutex
>1883	Identifier	idToKeyFrameMutex
>1884	Identifier	keyFrameGraph
>1885	ExpressionStatement	 
>1886	CallExpression	keyFrameGraph -> idToKeyFrame . erase ( currentKeyFrame -> id ( ) )
>1887	ArgumentList	currentKeyFrame -> id ( )
>1888	Argument	currentKeyFrame -> id ( )
>1889	CallExpression	currentKeyFrame -> id ( )
>1890	ArgumentList	 
>1891	Callee	currentKeyFrame -> id
>1892	PtrMemberAccess	currentKeyFrame -> id
>1893	Identifier	id
>1894	Identifier	currentKeyFrame
>1895	Callee	keyFrameGraph -> idToKeyFrame . erase
>1896	MemberAccess	keyFrameGraph -> idToKeyFrame . erase
>1897	Identifier	erase
>1898	PtrMemberAccess	keyFrameGraph -> idToKeyFrame
>1899	Identifier	idToKeyFrame
>1900	Identifier	keyFrameGraph
>1901	ExpressionStatement	 
>1902	CallExpression	keyFrameGraph -> idToKeyFrameMutex . lock ( )
>1903	ArgumentList	 
>1904	Callee	keyFrameGraph -> idToKeyFrameMutex . lock
>1905	MemberAccess	keyFrameGraph -> idToKeyFrameMutex . lock
>1906	Identifier	lock
>1907	PtrMemberAccess	keyFrameGraph -> idToKeyFrameMutex
>1908	Identifier	idToKeyFrameMutex
>1909	Identifier	keyFrameGraph
>1910	ExpressionStatement	 
>1911	CallExpression	keyFrameGraph -> allFramePosesMutex . unlock ( )
>1912	ArgumentList	 
>1913	Callee	keyFrameGraph -> allFramePosesMutex . unlock
>1914	MemberAccess	keyFrameGraph -> allFramePosesMutex . unlock
>1915	Identifier	unlock
>1916	PtrMemberAccess	keyFrameGraph -> allFramePosesMutex
>1917	Identifier	allFramePosesMutex
>1918	Identifier	keyFrameGraph
>1919	CompoundStatement	 
>1920	IfStatement	if ( p -> trackingParent != 0 && p -> trackingParent -> frameID == currentKeyFrame -> id ( ) )
>1921	ExpressionStatement	 
>1922	AssignmentExpr	p -> trackingParent = 0
>1923	PrimaryExpression	0
>1924	PtrMemberAccess	p -> trackingParent
>1925	Identifier	trackingParent
>1926	Identifier	p
>1927	Condition	 
>1928	AndExpression	p -> trackingParent != 0 && p -> trackingParent -> frameID == currentKeyFrame -> id ( )
>1929	EqualityExpression	p -> trackingParent -> frameID == currentKeyFrame -> id ( )
>1930	CallExpression	currentKeyFrame -> id ( )
>1931	ArgumentList	 
>1932	Callee	currentKeyFrame -> id
>1933	PtrMemberAccess	currentKeyFrame -> id
>1934	Identifier	id
>1935	Identifier	currentKeyFrame
>1936	PtrMemberAccess	p -> trackingParent -> frameID
>1937	Identifier	frameID
>1938	PtrMemberAccess	p -> trackingParent
>1939	Identifier	trackingParent
>1940	Identifier	p
>1941	EqualityExpression	p -> trackingParent != 0
>1942	PrimaryExpression	0
>1943	PtrMemberAccess	p -> trackingParent
>1944	Identifier	trackingParent
>1945	Identifier	p
>1946	Statement	 
>1947	Statement	 
>1948	Statement	 
>1949	Statement	 
>1950	Label	 
>1951	Identifier	p
>1952	Statement	 
>1953	Statement	 
>1954	Statement	 
>1955	Statement	 
>1956	ExpressionStatement	 
>1957	CallExpression	keyFrameGraph -> allFramePosesMutex . lock ( )
>1958	ArgumentList	 
>1959	Callee	keyFrameGraph -> allFramePosesMutex . lock
>1960	MemberAccess	keyFrameGraph -> allFramePosesMutex . lock
>1961	Identifier	lock
>1962	PtrMemberAccess	keyFrameGraph -> allFramePosesMutex
>1963	Identifier	allFramePosesMutex
>1964	Identifier	keyFrameGraph
>1965	ExpressionStatement	 
>1966	CallExpression	map -> invalidate ( )
>1967	ArgumentList	 
>1968	Callee	map -> invalidate
>1969	PtrMemberAccess	map -> invalidate
>1970	Identifier	invalidate
>1971	Identifier	map
>1972	IfStatement	if ( currentKeyFrame -> idxInKeyframes >= 0 )
>1973	CompoundStatement	 
>1974	ReturnStatement	 
>1975	ExpressionStatement	 
>1976	CallExpression	finishCurrentKeyframe ( )
>1977	ArgumentList	 
>1978	Callee	finishCurrentKeyframe
>1979	Identifier	finishCurrentKeyframe
>1980	ExpressionStatement	 
>1981	CallExpression	printf ( \"WARNING
>1982	ArgumentList	\"WARNING
>1983	Argument	\"WARNING
>1984	PrimaryExpression	\"WARNING
>1985	Callee	printf
>1986	Identifier	printf
>1987	Condition	 
>1988	RelationalExpression	currentKeyFrame -> idxInKeyframes >= 0
>1989	PrimaryExpression	0
>1990	PtrMemberAccess	currentKeyFrame -> idxInKeyframes
>1991	Identifier	idxInKeyframes
>1992	Identifier	currentKeyFrame
>1993	IfStatement	if ( enablePrintDebugInfo && printThreadingInfo )
>1994	ExpressionStatement	 
>1995	CallExpression	printf ( \"DISCARDING KF %d\n\" , currentKeyFrame -> id ( ) )
>1996	ArgumentList	\"DISCARDING KF %d\n\"
>1997	Argument	currentKeyFrame -> id ( )
>1998	CallExpression	currentKeyFrame -> id ( )
>1999	ArgumentList	 
>2000	Callee	currentKeyFrame -> id
>2001	PtrMemberAccess	currentKeyFrame -> id
>2002	Identifier	id
>2003	Identifier	currentKeyFrame
>2004	Argument	\"DISCARDING KF %d\n\"
>2005	PrimaryExpression	\"DISCARDING KF %d\n\"
>2006	Callee	printf
>2007	Identifier	printf
>2008	Condition	 
>2009	AndExpression	enablePrintDebugInfo && printThreadingInfo
>2010	Identifier	printThreadingInfo
>2011	Identifier	enablePrintDebugInfo
>2033	FunctionDef	SlamSystem 
>2034	ParameterList	std 
>2035	Parameter	 
>2036	Identifier	newKeyframeCandidate
>2037	ParameterType	std 
>2038	ReturnType	void
>2039	CompoundStatement	 
>2040	ExpressionStatement	 
>2041	CallExpression	currentKeyFrameMutex . unlock ( )
>2042	ArgumentList	 
>2043	Callee	currentKeyFrameMutex . unlock
>2044	MemberAccess	currentKeyFrameMutex . unlock
>2045	Identifier	unlock
>2046	Identifier	currentKeyFrameMutex
>2047	ExpressionStatement	 
>2048	AssignmentExpr	currentKeyFrame = newKeyframeCandidate
>2049	Identifier	newKeyframeCandidate
>2050	Identifier	currentKeyFrame
>2051	ExpressionStatement	 
>2052	CallExpression	currentKeyFrameMutex . lock ( )
>2053	ArgumentList	 
>2054	Callee	currentKeyFrameMutex . lock
>2055	MemberAccess	currentKeyFrameMutex . lock
>2056	Identifier	lock
>2057	Identifier	currentKeyFrameMutex
>2058	IfStatement	if ( printPropagationStatistics )
>2059	CompoundStatement	 
>2060	ExpressionStatement	 
>2061	CallExpression	outputWrapper -> publishDebugInfo ( data )
>2062	ArgumentList	data
>2063	Argument	data
>2064	Identifier	data
>2065	Callee	outputWrapper -> publishDebugInfo
>2066	PtrMemberAccess	outputWrapper -> publishDebugInfo
>2067	Identifier	publishDebugInfo
>2068	Identifier	outputWrapper
>2069	ExpressionStatement	 
>2070	AssignmentExpr	data [ 2 ] = runningStats . num_prop_removed_colorDiff / ( float ) runningStats . num_prop_attempts
>2071	MultiplicativeExpression	runningStats . num_prop_removed_colorDiff / ( float ) runningStats . num_prop_attempts
>2072	CastExpression	( float ) runningStats . num_prop_attempts
>2073	MemberAccess	runningStats . num_prop_attempts
>2074	Identifier	num_prop_attempts
>2075	Identifier	runningStats
>2076	CastTarget	float
>2077	MemberAccess	runningStats . num_prop_removed_colorDiff
>2078	Identifier	num_prop_removed_colorDiff
>2079	Identifier	runningStats
>2080	ArrayIndexing	data [ 2 ]
>2081	PrimaryExpression	2
>2082	Identifier	data
>2083	ExpressionStatement	 
>2084	AssignmentExpr	data [ 1 ] = ( runningStats . num_prop_created + runningStats . num_prop_merged ) / ( float ) runningStats \
>2085	MultiplicativeExpression	( runningStats . num_prop_created + runningStats . num_prop_merged ) / ( float ) runningStats . num_prop_\
>2086	CastExpression	( float ) runningStats . num_prop_attempts
>2087	MemberAccess	runningStats . num_prop_attempts
>2088	Identifier	num_prop_attempts
>2089	Identifier	runningStats
>2090	CastTarget	float
>2091	AdditiveExpression	runningStats . num_prop_created + runningStats . num_prop_merged
>2092	MemberAccess	runningStats . num_prop_merged
>2093	Identifier	num_prop_merged
>2094	Identifier	runningStats
>2095	MemberAccess	runningStats . num_prop_created
>2096	Identifier	num_prop_created
>2097	Identifier	runningStats
>2098	ArrayIndexing	data [ 1 ]
>2099	PrimaryExpression	1
>2100	Identifier	data
>2101	ExpressionStatement	 
>2102	AssignmentExpr	data [ 0 ] = runningStats . num_prop_attempts / ( ( float ) width * height )
>2103	MultiplicativeExpression	runningStats . num_prop_attempts / ( ( float ) width * height )
>2104	MultiplicativeExpression	( float ) width * height
>2105	Identifier	height
>2106	CastExpression	( float ) width
>2107	Identifier	width
>2108	CastTarget	float
>2109	MemberAccess	runningStats . num_prop_attempts
>2110	Identifier	num_prop_attempts
>2111	Identifier	runningStats
>2112	ArrayIndexing	data [ 0 ]
>2113	PrimaryExpression	0
>2114	Identifier	data
>2115	ExpressionStatement	 
>2116	CallExpression	data . setZero ( )
>2117	ArgumentList	 
>2118	Callee	data . setZero
>2119	MemberAccess	data . setZero
>2120	Identifier	setZero
>2121	Identifier	data
>2122	IdentifierDeclStatement	 
>2123	IdentifierDecl	data
>2124	Identifier	data
>2125	IdentifierDeclType	Eigen 
>2126	Condition	 
>2127	Identifier	printPropagationStatistics
>2128	ExpressionStatement	 
>2129	CallExpression	map -> createKeyFrame ( newKeyframeCandidate . get ( ) )
>2130	ArgumentList	newKeyframeCandidate . get ( )
>2131	Argument	newKeyframeCandidate . get ( )
>2132	CallExpression	newKeyframeCandidate . get ( )
>2133	ArgumentList	 
>2134	Callee	newKeyframeCandidate . get
>2135	MemberAccess	newKeyframeCandidate . get
>2136	Identifier	get
>2137	Identifier	newKeyframeCandidate
>2138	Callee	map -> createKeyFrame
>2139	PtrMemberAccess	map -> createKeyFrame
>2140	Identifier	createKeyFrame
>2141	Identifier	map
>2142	IfStatement	if ( SLAMEnabled )
>2143	CompoundStatement	 
>2144	ExpressionStatement	 
>2145	CallExpression	keyFrameGraph -> idToKeyFrameMutex . unlock ( )
>2146	ArgumentList	 
>2147	Callee	keyFrameGraph -> idToKeyFrameMutex . unlock
>2148	MemberAccess	keyFrameGraph -> idToKeyFrameMutex . unlock
>2149	Identifier	unlock
>2150	PtrMemberAccess	keyFrameGraph -> idToKeyFrameMutex
>2151	Identifier	idToKeyFrameMutex
>2152	Identifier	keyFrameGraph
>2153	ExpressionStatement	 
>2154	CallExpression	keyFrameGraph -> idToKeyFrame . insert ( std 
>2155	ArgumentList	std 
>2156	Argument	std 
>2157	CallExpression	std 
>2158	ArgumentList	newKeyframeCandidate -> id ( )
>2159	Argument	newKeyframeCandidate
>2160	Identifier	newKeyframeCandidate
>2161	Argument	newKeyframeCandidate -> id ( )
>2162	CallExpression	newKeyframeCandidate -> id ( )
>2163	ArgumentList	 
>2164	Callee	newKeyframeCandidate -> id
>2165	PtrMemberAccess	newKeyframeCandidate -> id
>2166	Identifier	id
>2167	Identifier	newKeyframeCandidate
>2168	Callee	std 
>2169	Identifier	std 
>2170	Callee	keyFrameGraph -> idToKeyFrame . insert
>2171	MemberAccess	keyFrameGraph -> idToKeyFrame . insert
>2172	Identifier	insert
>2173	PtrMemberAccess	keyFrameGraph -> idToKeyFrame
>2174	Identifier	idToKeyFrame
>2175	Identifier	keyFrameGraph
>2176	ExpressionStatement	 
>2177	CallExpression	keyFrameGraph -> idToKeyFrameMutex . lock ( )
>2178	ArgumentList	 
>2179	Callee	keyFrameGraph -> idToKeyFrameMutex . lock
>2180	MemberAccess	keyFrameGraph -> idToKeyFrameMutex . lock
>2181	Identifier	lock
>2182	PtrMemberAccess	keyFrameGraph -> idToKeyFrameMutex
>2183	Identifier	idToKeyFrameMutex
>2184	Identifier	keyFrameGraph
>2185	Condition	 
>2186	Identifier	SLAMEnabled
>2187	IfStatement	if ( enablePrintDebugInfo && printThreadingInfo )
>2188	ExpressionStatement	 
>2189	CallExpression	printf ( \"CREATE NEW KF %d from %d\n\" , newKeyframeCandidate -> id ( ) , currentKeyFrame -> id ( ) )
>2190	ArgumentList	\"CREATE NEW KF %d from %d\n\"
>2191	Argument	currentKeyFrame -> id ( )
>2192	CallExpression	currentKeyFrame -> id ( )
>2193	ArgumentList	 
>2194	Callee	currentKeyFrame -> id
>2195	PtrMemberAccess	currentKeyFrame -> id
>2196	Identifier	id
>2197	Identifier	currentKeyFrame
>2198	Argument	newKeyframeCandidate -> id ( )
>2199	CallExpression	newKeyframeCandidate -> id ( )
>2200	ArgumentList	 
>2201	Callee	newKeyframeCandidate -> id
>2202	PtrMemberAccess	newKeyframeCandidate -> id
>2203	Identifier	id
>2204	Identifier	newKeyframeCandidate
>2205	Argument	\"CREATE NEW KF %d from %d\n\"
>2206	PrimaryExpression	\"CREATE NEW KF %d from %d\n\"
>2207	Callee	printf
>2208	Identifier	printf
>2209	Condition	 
>2210	AndExpression	enablePrintDebugInfo && printThreadingInfo
>2211	Identifier	printThreadingInfo
>2212	Identifier	enablePrintDebugInfo
>2244	FunctionDef	SlamSystem 
>2245	ParameterList	Frame * keyframeToLoad
>2246	Parameter	 
>2247	Identifier	keyframeToLoad
>2248	ParameterType	Frame *
>2249	ReturnType	void
>2250	CompoundStatement	 
>2251	ExpressionStatement	 
>2252	CallExpression	currentKeyFrameMutex . unlock ( )
>2253	ArgumentList	 
>2254	Callee	currentKeyFrameMutex . unlock
>2255	MemberAccess	currentKeyFrameMutex . unlock
>2256	Identifier	unlock
>2257	Identifier	currentKeyFrameMutex
>2258	ExpressionStatement	 
>2259	AssignmentExpr	currentKeyFrame -> depthHasBeenUpdatedFlag = false
>2260	Identifier	false
>2261	PtrMemberAccess	currentKeyFrame -> depthHasBeenUpdatedFlag
>2262	Identifier	depthHasBeenUpdatedFlag
>2263	Identifier	currentKeyFrame
>2264	ExpressionStatement	 
>2265	AssignmentExpr	currentKeyFrame = keyFrameGraph -> idToKeyFrame . find ( keyframeToLoad -> id ( ) ) -> second
>2266	PtrMemberAccess	keyFrameGraph -> idToKeyFrame . find ( keyframeToLoad -> id ( ) ) -> second
>2267	Identifier	second
>2268	CallExpression	keyFrameGraph -> idToKeyFrame . find ( keyframeToLoad -> id ( ) )
>2269	ArgumentList	keyframeToLoad -> id ( )
>2270	Argument	keyframeToLoad -> id ( )
>2271	CallExpression	keyframeToLoad -> id ( )
>2272	ArgumentList	 
>2273	Callee	keyframeToLoad -> id
>2274	PtrMemberAccess	keyframeToLoad -> id
>2275	Identifier	id
>2276	Identifier	keyframeToLoad
>2277	Callee	keyFrameGraph -> idToKeyFrame . find
>2278	MemberAccess	keyFrameGraph -> idToKeyFrame . find
>2279	Identifier	find
>2280	PtrMemberAccess	keyFrameGraph -> idToKeyFrame
>2281	Identifier	idToKeyFrame
>2282	Identifier	keyFrameGraph
>2283	Identifier	currentKeyFrame
>2284	ExpressionStatement	 
>2285	CallExpression	currentKeyFrameMutex . lock ( )
>2286	ArgumentList	 
>2287	Callee	currentKeyFrameMutex . lock
>2288	MemberAccess	currentKeyFrameMutex . lock
>2289	Identifier	lock
>2290	Identifier	currentKeyFrameMutex
>2291	IfStatement	if ( enablePrintDebugInfo && printRegularizeStatistics )
>2292	ExpressionStatement	 
>2293	CallExpression	printf ( \"re-activate frame %d!\n\" , keyframeToLoad -> id ( ) )
>2294	ArgumentList	\"re-activate frame %d!\n\"
>2295	Argument	keyframeToLoad -> id ( )
>2296	CallExpression	keyframeToLoad -> id ( )
>2297	ArgumentList	 
>2298	Callee	keyframeToLoad -> id
>2299	PtrMemberAccess	keyframeToLoad -> id
>2300	Identifier	id
>2301	Identifier	keyframeToLoad
>2302	Argument	\"re-activate frame %d!\n\"
>2303	PrimaryExpression	\"re-activate frame %d!\n\"
>2304	Callee	printf
>2305	Identifier	printf
>2306	Condition	 
>2307	AndExpression	enablePrintDebugInfo && printRegularizeStatistics
>2308	Identifier	printRegularizeStatistics
>2309	Identifier	enablePrintDebugInfo
>2310	ExpressionStatement	 
>2311	CallExpression	map -> setFromExistingKF ( keyframeToLoad )
>2312	ArgumentList	keyframeToLoad
>2313	Argument	keyframeToLoad
>2314	Identifier	keyframeToLoad
>2315	Callee	map -> setFromExistingKF
>2316	PtrMemberAccess	map -> setFromExistingKF
>2317	Identifier	setFromExistingKF
>2318	Identifier	map
>2319	IfStatement	if ( enablePrintDebugInfo && printThreadingInfo )
>2320	ExpressionStatement	 
>2321	CallExpression	printf ( \"RE-ACTIVATE KF %d\n\" , keyframeToLoad -> id ( ) )
>2322	ArgumentList	\"RE-ACTIVATE KF %d\n\"
>2323	Argument	keyframeToLoad -> id ( )
>2324	CallExpression	keyframeToLoad -> id ( )
>2325	ArgumentList	 
>2326	Callee	keyframeToLoad -> id
>2327	PtrMemberAccess	keyframeToLoad -> id
>2328	Identifier	id
>2329	Identifier	keyframeToLoad
>2330	Argument	\"RE-ACTIVATE KF %d\n\"
>2331	PrimaryExpression	\"RE-ACTIVATE KF %d\n\"
>2332	Callee	printf
>2333	Identifier	printf
>2334	Condition	 
>2335	AndExpression	enablePrintDebugInfo && printThreadingInfo
>2336	Identifier	printThreadingInfo
>2337	Identifier	enablePrintDebugInfo
>2361	FunctionDef	SlamSystem 
>2362	ParameterList	bool noCreate , bool force , float maxScore
>2363	Parameter	 
>2364	Identifier	maxScore
>2365	ParameterType	float
>2366	Parameter	 
>2367	Identifier	force
>2368	ParameterType	bool
>2369	Parameter	 
>2370	Identifier	noCreate
>2371	ParameterType	bool
>2372	ReturnType	void
>2373	CompoundStatement	 
>2374	ExpressionStatement	 
>2375	AssignmentExpr	createNewKeyFrame = false
>2376	Identifier	false
>2377	Identifier	createNewKeyFrame
>2378	IfStatement	if ( newReferenceKF != 0 )
>2379	ElseStatement	else
>2380	CompoundStatement	 
>2381	IfStatement	if ( force )
>2382	CompoundStatement	 
>2383	IfStatement	if ( noCreate )
>2384	ElseStatement	else
>2385	ExpressionStatement	 
>2386	CallExpression	createNewCurrentKeyframe ( newKeyframeCandidate )
>2387	ArgumentList	newKeyframeCandidate
>2388	Argument	newKeyframeCandidate
>2389	Identifier	newKeyframeCandidate
>2390	Callee	createNewCurrentKeyframe
>2391	Identifier	createNewCurrentKeyframe
>2392	CompoundStatement	 
>2393	ExpressionStatement	 
>2394	CallExpression	printf ( \"mapping is disabled & moved outside of known map. Starting Relocalizer!\n\" )
>2395	ArgumentList	\"mapping is disabled & moved outside of known map. Starting Relocalizer!\n\"
>2396	Argument	\"mapping is disabled & moved outside of known map. Starting Relocalizer!\n\"
>2397	PrimaryExpression	\"mapping is disabled & moved outside of known map. Starting Relocalizer!\n\"
>2398	Callee	printf
>2399	Identifier	printf
>2400	ExpressionStatement	 
>2401	AssignmentExpr	nextRelocIdx = - 1
>2402	UnaryOp	- 1
>2403	PrimaryExpression	1
>2404	UnaryOperator	-
>2405	Identifier	nextRelocIdx
>2406	ExpressionStatement	 
>2407	AssignmentExpr	trackingIsGood = false
>2408	Identifier	false
>2409	Identifier	trackingIsGood
>2410	Condition	 
>2411	Identifier	noCreate
>2412	Condition	 
>2413	Identifier	force
>2414	ExpressionStatement	 
>2415	CallExpression	loadNewCurrentKeyframe ( newReferenceKF )
>2416	ArgumentList	newReferenceKF
>2417	Argument	newReferenceKF
>2418	Identifier	newReferenceKF
>2419	Callee	loadNewCurrentKeyframe
>2420	Identifier	loadNewCurrentKeyframe
>2421	Condition	 
>2422	EqualityExpression	newReferenceKF != 0
>2423	PrimaryExpression	0
>2424	Identifier	newReferenceKF
>2425	IfStatement	if ( doKFReActivation && SLAMEnabled )
>2426	CompoundStatement	 
>2427	ExpressionStatement	 
>2428	IncDecOp	nFindReferences ++
>2429	IncDec	++
>2430	Identifier	nFindReferences
>2431	ExpressionStatement	 
>2432	AssignmentExpr	msFindReferences = 0.9 * msFindReferences + 0.1 * ( ( tv_end . tv_sec - tv_start . tv_sec ) * 1000.0f + ( \
>2433	AdditiveExpression	0.9 * msFindReferences + 0.1 * ( ( tv_end . tv_sec - tv_start . tv_sec ) * 1000.0f + ( tv_end . tv_usec \
>2434	MultiplicativeExpression	0.1 * ( ( tv_end . tv_sec - tv_start . tv_sec ) * 1000.0f + ( tv_end . tv_usec - tv_start . tv_usec ) / \
>2435	AdditiveExpression	( tv_end . tv_sec - tv_start . tv_sec ) * 1000.0f + ( tv_end . tv_usec - tv_start . tv_usec ) / 1000.0f
>2436	MultiplicativeExpression	( tv_end . tv_usec - tv_start . tv_usec ) / 1000.0f
>2437	PrimaryExpression	1000.0f
>2438	AdditiveExpression	tv_end . tv_usec - tv_start . tv_usec
>2439	MemberAccess	tv_start . tv_usec
>2440	Identifier	tv_usec
>2441	Identifier	tv_start
>2442	MemberAccess	tv_end . tv_usec
>2443	Identifier	tv_usec
>2444	Identifier	tv_end
>2445	MultiplicativeExpression	( tv_end . tv_sec - tv_start . tv_sec ) * 1000.0f
>2446	PrimaryExpression	1000.0f
>2447	AdditiveExpression	tv_end . tv_sec - tv_start . tv_sec
>2448	MemberAccess	tv_start . tv_sec
>2449	Identifier	tv_sec
>2450	Identifier	tv_start
>2451	MemberAccess	tv_end . tv_sec
>2452	Identifier	tv_sec
>2453	Identifier	tv_end
>2454	PrimaryExpression	0.1
>2455	MultiplicativeExpression	0.9 * msFindReferences
>2456	Identifier	msFindReferences
>2457	PrimaryExpression	0.9
>2458	Identifier	msFindReferences
>2459	ExpressionStatement	 
>2460	CallExpression	gettimeofday ( & tv_end , NULL )
>2461	ArgumentList	& tv_end
>2462	Argument	NULL
>2463	Identifier	NULL
>2464	Argument	& tv_end
>2465	UnaryOp	& tv_end
>2466	Identifier	tv_end
>2467	UnaryOperator	&
>2468	Callee	gettimeofday
>2469	Identifier	gettimeofday
>2470	ExpressionStatement	 
>2471	AssignmentExpr	newReferenceKF = trackableKeyFrameSearch -> findRePositionCandidate ( newKeyframeCandidate . get ( ) , \
>2472	CallExpression	trackableKeyFrameSearch -> findRePositionCandidate ( newKeyframeCandidate . get ( ) , maxScore )
>2473	ArgumentList	newKeyframeCandidate . get ( )
>2474	Argument	maxScore
>2475	Identifier	maxScore
>2476	Argument	newKeyframeCandidate . get ( )
>2477	CallExpression	newKeyframeCandidate . get ( )
>2478	ArgumentList	 
>2479	Callee	newKeyframeCandidate . get
>2480	MemberAccess	newKeyframeCandidate . get
>2481	Identifier	get
>2482	Identifier	newKeyframeCandidate
>2483	Callee	trackableKeyFrameSearch -> findRePositionCandidate
>2484	PtrMemberAccess	trackableKeyFrameSearch -> findRePositionCandidate
>2485	Identifier	findRePositionCandidate
>2486	Identifier	trackableKeyFrameSearch
>2487	Identifier	newReferenceKF
>2488	ExpressionStatement	 
>2489	CallExpression	gettimeofday ( & tv_start , NULL )
>2490	ArgumentList	& tv_start
>2491	Argument	NULL
>2492	Identifier	NULL
>2493	Argument	& tv_start
>2494	UnaryOp	& tv_start
>2495	Identifier	tv_start
>2496	UnaryOperator	&
>2497	Callee	gettimeofday
>2498	Identifier	gettimeofday
>2499	IdentifierDeclStatement	 
>2500	IdentifierDecl	tv_end
>2501	Identifier	tv_end
>2502	IdentifierDeclType	struct timeval
>2503	IdentifierDecl	tv_start
>2504	Identifier	tv_start
>2505	IdentifierDeclType	struct timeval
>2506	Condition	 
>2507	AndExpression	doKFReActivation && SLAMEnabled
>2508	Identifier	SLAMEnabled
>2509	Identifier	doKFReActivation
>2510	IdentifierDeclStatement	 
>2511	IdentifierDecl	newKeyframeCandidate = latestTrackedFrame
>2512	AssignmentExpr	newKeyframeCandidate = latestTrackedFrame
>2513	Identifier	latestTrackedFrame
>2514	Identifier	latestTrackedFrame
>2515	Identifier	newKeyframeCandidate
>2516	IdentifierDeclType	std 
>2517	IdentifierDeclStatement	 
>2518	IdentifierDecl	* newReferenceKF = 0
>2519	AssignmentExpr	* newReferenceKF = 0
>2520	PrimaryExpression	0
>2521	Identifier	newReferenceKF
>2522	Identifier	newReferenceKF
>2523	IdentifierDeclType	Frame *
>2554	FunctionDef	SlamSystem 
>2555	ParameterList	 
>2556	ReturnType	bool
>2557	CompoundStatement	 
>2558	ReturnStatement	 
>2559	Identifier	true
>2560	IfStatement	if ( outputWrapper != 0 && continuousPCOutput && currentKeyFrame != 0 )
>2561	ExpressionStatement	 
>2562	CallExpression	outputWrapper -> publishKeyframe ( currentKeyFrame . get ( ) )
>2563	ArgumentList	currentKeyFrame . get ( )
>2564	Argument	currentKeyFrame . get ( )
>2565	CallExpression	currentKeyFrame . get ( )
>2566	ArgumentList	 
>2567	Callee	currentKeyFrame . get
>2568	MemberAccess	currentKeyFrame . get
>2569	Identifier	get
>2570	Identifier	currentKeyFrame
>2571	Callee	outputWrapper -> publishKeyframe
>2572	PtrMemberAccess	outputWrapper -> publishKeyframe
>2573	Identifier	publishKeyframe
>2574	Identifier	outputWrapper
>2575	Condition	 
>2576	AndExpression	outputWrapper != 0 && continuousPCOutput && currentKeyFrame != 0
>2577	AndExpression	continuousPCOutput && currentKeyFrame != 0
>2578	EqualityExpression	currentKeyFrame != 0
>2579	PrimaryExpression	0
>2580	Identifier	currentKeyFrame
>2581	Identifier	continuousPCOutput
>2582	EqualityExpression	outputWrapper != 0
>2583	PrimaryExpression	0
>2584	Identifier	outputWrapper
>2585	IfStatement	if ( enablePrintDebugInfo && printRegularizeStatistics )
>2586	CompoundStatement	 
>2587	ExpressionStatement	 
>2588	CallExpression	outputWrapper -> publishDebugInfo ( data )
>2589	ArgumentList	data
>2590	Argument	data
>2591	Identifier	data
>2592	Callee	outputWrapper -> publishDebugInfo
>2593	PtrMemberAccess	outputWrapper -> publishDebugInfo
>2594	Identifier	publishDebugInfo
>2595	Identifier	outputWrapper
>2596	ExpressionStatement	 
>2597	AssignmentExpr	data [ 14 ] = runningStats . num_observe_skip_fail
>2598	MemberAccess	runningStats . num_observe_skip_fail
>2599	Identifier	num_observe_skip_fail
>2600	Identifier	runningStats
>2601	ArrayIndexing	data [ 14 ]
>2602	PrimaryExpression	14
>2603	Identifier	data
>2604	ExpressionStatement	 
>2605	AssignmentExpr	data [ 13 ] = runningStats . num_observe_skip_oob
>2606	MemberAccess	runningStats . num_observe_skip_oob
>2607	Identifier	num_observe_skip_oob
>2608	Identifier	runningStats
>2609	ArrayIndexing	data [ 13 ]
>2610	PrimaryExpression	13
>2611	Identifier	data
>2612	ExpressionStatement	 
>2613	AssignmentExpr	data [ 12 ] = runningStats . num_observe_notfound
>2614	MemberAccess	runningStats . num_observe_notfound
>2615	Identifier	num_observe_notfound
>2616	Identifier	runningStats
>2617	ArrayIndexing	data [ 12 ]
>2618	PrimaryExpression	12
>2619	Identifier	data
>2620	ExpressionStatement	 
>2621	AssignmentExpr	data [ 11 ] = runningStats . num_observe_inconsistent
>2622	MemberAccess	runningStats . num_observe_inconsistent
>2623	Identifier	num_observe_inconsistent
>2624	Identifier	runningStats
>2625	ArrayIndexing	data [ 11 ]
>2626	PrimaryExpression	11
>2627	Identifier	data
>2628	ExpressionStatement	 
>2629	AssignmentExpr	data [ 10 ] = runningStats . num_observe_good
>2630	MemberAccess	runningStats . num_observe_good
>2631	Identifier	num_observe_good
>2632	Identifier	runningStats
>2633	ArrayIndexing	data [ 10 ]
>2634	PrimaryExpression	10
>2635	Identifier	data
>2636	ExpressionStatement	 
>2637	AssignmentExpr	data [ 9 ] = runningStats . num_observe_update_attempted
>2638	MemberAccess	runningStats . num_observe_update_attempted
>2639	Identifier	num_observe_update_attempted
>2640	Identifier	runningStats
>2641	ArrayIndexing	data [ 9 ]
>2642	PrimaryExpression	9
>2643	Identifier	data
>2644	ExpressionStatement	 
>2645	AssignmentExpr	data [ 8 ] = runningStats . num_observe_updated
>2646	MemberAccess	runningStats . num_observe_updated
>2647	Identifier	num_observe_updated
>2648	Identifier	runningStats
>2649	ArrayIndexing	data [ 8 ]
>2650	PrimaryExpression	8
>2651	Identifier	data
>2652	ExpressionStatement	 
>2653	AssignmentExpr	data [ 7 ] = runningStats . num_observe_create_attempted
>2654	MemberAccess	runningStats . num_observe_create_attempted
>2655	Identifier	num_observe_create_attempted
>2656	Identifier	runningStats
>2657	ArrayIndexing	data [ 7 ]
>2658	PrimaryExpression	7
>2659	Identifier	data
>2660	ExpressionStatement	 
>2661	AssignmentExpr	data [ 6 ] = runningStats . num_observe_created
>2662	MemberAccess	runningStats . num_observe_created
>2663	Identifier	num_observe_created
>2664	Identifier	runningStats
>2665	ArrayIndexing	data [ 6 ]
>2666	PrimaryExpression	6
>2667	Identifier	data
>2668	ExpressionStatement	 
>2669	AssignmentExpr	data [ 5 ] = runningStats . num_reg_blacklisted
>2670	MemberAccess	runningStats . num_reg_blacklisted
>2671	Identifier	num_reg_blacklisted
>2672	Identifier	runningStats
>2673	ArrayIndexing	data [ 5 ]
>2674	PrimaryExpression	5
>2675	Identifier	data
>2676	ExpressionStatement	 
>2677	AssignmentExpr	data [ 4 ] = runningStats . num_reg_deleted_occluded
>2678	MemberAccess	runningStats . num_reg_deleted_occluded
>2679	Identifier	num_reg_deleted_occluded
>2680	Identifier	runningStats
>2681	ArrayIndexing	data [ 4 ]
>2682	PrimaryExpression	4
>2683	Identifier	data
>2684	ExpressionStatement	 
>2685	AssignmentExpr	data [ 3 ] = runningStats . num_reg_deleted_secondary
>2686	MemberAccess	runningStats . num_reg_deleted_secondary
>2687	Identifier	num_reg_deleted_secondary
>2688	Identifier	runningStats
>2689	ArrayIndexing	data [ 3 ]
>2690	PrimaryExpression	3
>2691	Identifier	data
>2692	ExpressionStatement	 
>2693	AssignmentExpr	data [ 2 ] = runningStats . num_reg_smeared
>2694	MemberAccess	runningStats . num_reg_smeared
>2695	Identifier	num_reg_smeared
>2696	Identifier	runningStats
>2697	ArrayIndexing	data [ 2 ]
>2698	PrimaryExpression	2
>2699	Identifier	data
>2700	ExpressionStatement	 
>2701	AssignmentExpr	data [ 0 ] = runningStats . num_reg_created
>2702	MemberAccess	runningStats . num_reg_created
>2703	Identifier	num_reg_created
>2704	Identifier	runningStats
>2705	ArrayIndexing	data [ 0 ]
>2706	PrimaryExpression	0
>2707	Identifier	data
>2708	ExpressionStatement	 
>2709	CallExpression	data . setZero ( )
>2710	ArgumentList	 
>2711	Callee	data . setZero
>2712	MemberAccess	data . setZero
>2713	Identifier	setZero
>2714	Identifier	data
>2715	IdentifierDeclStatement	 
>2716	IdentifierDecl	data
>2717	Identifier	data
>2718	IdentifierDeclType	Eigen 
>2719	Condition	 
>2720	AndExpression	enablePrintDebugInfo && printRegularizeStatistics
>2721	Identifier	printRegularizeStatistics
>2722	Identifier	enablePrintDebugInfo
>2723	IfStatement	if ( unmappedTrackedFrames . size ( ) > 0 )
>2724	ElseStatement	else
>2725	CompoundStatement	 
>2726	ReturnStatement	 
>2727	Identifier	false
>2728	ExpressionStatement	 
>2729	CallExpression	unmappedTrackedFramesMutex . unlock ( )
>2730	ArgumentList	 
>2731	Callee	unmappedTrackedFramesMutex . unlock
>2732	MemberAccess	unmappedTrackedFramesMutex . unlock
>2733	Identifier	unlock
>2734	Identifier	unmappedTrackedFramesMutex
>2735	CompoundStatement	 
>2736	ExpressionStatement	 
>2737	CallExpression	references . clear ( )
>2738	ArgumentList	 
>2739	Callee	references . clear
>2740	MemberAccess	references . clear
>2741	Identifier	clear
>2742	Identifier	references
>2743	ExpressionStatement	 
>2744	CallExpression	popped -> clear_refPixelWasGood ( )
>2745	ArgumentList	 
>2746	Callee	popped -> clear_refPixelWasGood
>2747	PtrMemberAccess	popped -> clear_refPixelWasGood
>2748	Identifier	clear_refPixelWasGood
>2749	Identifier	popped
>2750	ExpressionStatement	 
>2751	CallExpression	map -> updateKeyframe ( references )
>2752	ArgumentList	references
>2753	Argument	references
>2754	Identifier	references
>2755	Callee	map -> updateKeyframe
>2756	PtrMemberAccess	map -> updateKeyframe
>2757	Identifier	updateKeyframe
>2758	Identifier	map
>2759	IfStatement	if ( enablePrintDebugInfo && printThreadingInfo )
>2760	ExpressionStatement	 
>2761	CallExpression	printf ( \"MAPPING %d on %d to %d (%d frames)\n\" , currentKeyFrame -> id ( ) , references . front ( ) -> id ( ) , \
>2762	ArgumentList	\"MAPPING %d on %d to %d (%d frames)\n\"
>2763	Argument	( int ) references . size ( )
>2764	CastExpression	( int ) references . size ( )
>2765	CallExpression	references . size ( )
>2766	ArgumentList	 
>2767	Callee	references . size
>2768	MemberAccess	references . size
>2769	Identifier	size
>2770	Identifier	references
>2771	CastTarget	int
>2772	Argument	references . back ( ) -> id ( )
>2773	CallExpression	references . back ( ) -> id ( )
>2774	ArgumentList	 
>2775	Callee	references . back ( ) -> id
>2776	PtrMemberAccess	references . back ( ) -> id
>2777	Identifier	id
>2778	CallExpression	references . back ( )
>2779	ArgumentList	 
>2780	Callee	references . back
>2781	MemberAccess	references . back
>2782	Identifier	back
>2783	Identifier	references
>2784	Argument	references . front ( ) -> id ( )
>2785	CallExpression	references . front ( ) -> id ( )
>2786	ArgumentList	 
>2787	Callee	references . front ( ) -> id
>2788	PtrMemberAccess	references . front ( ) -> id
>2789	Identifier	id
>2790	CallExpression	references . front ( )
>2791	ArgumentList	 
>2792	Callee	references . front
>2793	MemberAccess	references . front
>2794	Identifier	front
>2795	Identifier	references
>2796	Argument	currentKeyFrame -> id ( )
>2797	CallExpression	currentKeyFrame -> id ( )
>2798	ArgumentList	 
>2799	Callee	currentKeyFrame -> id
>2800	PtrMemberAccess	currentKeyFrame -> id
>2801	Identifier	id
>2802	Identifier	currentKeyFrame
>2803	Argument	\"MAPPING %d on %d to %d (%d frames)\n\"
>2804	PrimaryExpression	\"MAPPING %d on %d to %d (%d frames)\n\"
>2805	Callee	printf
>2806	Identifier	printf
>2807	Condition	 
>2808	AndExpression	enablePrintDebugInfo && printThreadingInfo
>2809	Identifier	printThreadingInfo
>2810	Identifier	enablePrintDebugInfo
>2811	ExpressionStatement	 
>2812	CallExpression	unmappedTrackedFramesMutex . unlock ( )
>2813	ArgumentList	 
>2814	Callee	unmappedTrackedFramesMutex . unlock
>2815	MemberAccess	unmappedTrackedFramesMutex . unlock
>2816	Identifier	unlock
>2817	Identifier	unmappedTrackedFramesMutex
>2818	ExpressionStatement	 
>2819	CallExpression	unmappedTrackedFrames . pop_front ( )
>2820	ArgumentList	 
>2821	Callee	unmappedTrackedFrames . pop_front
>2822	MemberAccess	unmappedTrackedFrames . pop_front
>2823	Identifier	pop_front
>2824	Identifier	unmappedTrackedFrames
>2825	IdentifierDeclStatement	 
>2826	IdentifierDecl	popped = unmappedTrackedFrames . front ( )
>2827	AssignmentExpr	popped = unmappedTrackedFrames . front ( )
>2828	CallExpression	unmappedTrackedFrames . front ( )
>2829	ArgumentList	 
>2830	Callee	unmappedTrackedFrames . front
>2831	MemberAccess	unmappedTrackedFrames . front
>2832	Identifier	front
>2833	Identifier	unmappedTrackedFrames
>2834	Identifier	popped
>2835	Identifier	popped
>2836	IdentifierDeclType	std 
>2837	ForStatement	for ( unsigned int i = 0 ; i < unmappedTrackedFrames . size ( ) ; i ++ )
>2838	ExpressionStatement	 
>2839	CallExpression	references . push_back ( unmappedTrackedFrames [ i ] )
>2840	ArgumentList	unmappedTrackedFrames [ i ]
>2841	Argument	unmappedTrackedFrames [ i ]
>2842	ArrayIndexing	unmappedTrackedFrames [ i ]
>2843	Identifier	i
>2844	Identifier	unmappedTrackedFrames
>2845	Callee	references . push_back
>2846	MemberAccess	references . push_back
>2847	Identifier	push_back
>2848	Identifier	references
>2849	IncDecOp	 
>2850	IncDec	++
>2851	Identifier	i
>2852	Condition	 
>2853	RelationalExpression	i < unmappedTrackedFrames . size ( )
>2854	CallExpression	unmappedTrackedFrames . size ( )
>2855	ArgumentList	 
>2856	Callee	unmappedTrackedFrames . size
>2857	MemberAccess	unmappedTrackedFrames . size
>2858	Identifier	size
>2859	Identifier	unmappedTrackedFrames
>2860	Identifier	i
>2861	ForInit	 
>2862	IdentifierDeclStatement	unsigned int i = 0 ;
>2863	IdentifierDecl	i = 0
>2864	AssignmentExpr	i = 0
>2865	PrimaryExpression	0
>2866	Identifier	i
>2867	Identifier	i
>2868	IdentifierDeclType	unsigned int
>2869	Condition	 
>2870	RelationalExpression	unmappedTrackedFrames . size ( ) > 0
>2871	PrimaryExpression	0
>2872	CallExpression	unmappedTrackedFrames . size ( )
>2873	ArgumentList	 
>2874	Callee	unmappedTrackedFrames . size
>2875	MemberAccess	unmappedTrackedFrames . size
>2876	Identifier	size
>2877	Identifier	unmappedTrackedFrames
>2878	WhileStatement	while ( unmappedTrackedFrames . size ( ) > 0 && ( ! unmappedTrackedFrames . front ( ) -> hasTrackingParent ( ) || \
>2879	CompoundStatement	 
>2880	ExpressionStatement	 
>2881	CallExpression	unmappedTrackedFrames . pop_front ( )
>2882	ArgumentList	 
>2883	Callee	unmappedTrackedFrames . pop_front
>2884	MemberAccess	unmappedTrackedFrames . pop_front
>2885	Identifier	pop_front
>2886	Identifier	unmappedTrackedFrames
>2887	ExpressionStatement	 
>2888	CallExpression	unmappedTrackedFrames . front ( ) -> clear_refPixelWasGood ( )
>2889	ArgumentList	 
>2890	Callee	unmappedTrackedFrames . front ( ) -> clear_refPixelWasGood
>2891	PtrMemberAccess	unmappedTrackedFrames . front ( ) -> clear_refPixelWasGood
>2892	Identifier	clear_refPixelWasGood
>2893	CallExpression	unmappedTrackedFrames . front ( )
>2894	ArgumentList	 
>2895	Callee	unmappedTrackedFrames . front
>2896	MemberAccess	unmappedTrackedFrames . front
>2897	Identifier	front
>2898	Identifier	unmappedTrackedFrames
>2899	Condition	 
>2900	AndExpression	unmappedTrackedFrames . size ( ) > 0 && ( ! unmappedTrackedFrames . front ( ) -> hasTrackingParent ( ) || \
>2901	OrExpression	! unmappedTrackedFrames . front ( ) -> hasTrackingParent ( ) || unmappedTrackedFrames . front ( ) -> \
>2902	EqualityExpression	unmappedTrackedFrames . front ( ) -> getTrackingParent ( ) != currentKeyFrame . get ( )
>2903	CallExpression	currentKeyFrame . get ( )
>2904	ArgumentList	 
>2905	Callee	currentKeyFrame . get
>2906	MemberAccess	currentKeyFrame . get
>2907	Identifier	get
>2908	Identifier	currentKeyFrame
>2909	CallExpression	unmappedTrackedFrames . front ( ) -> getTrackingParent ( )
>2910	ArgumentList	 
>2911	Callee	unmappedTrackedFrames . front ( ) -> getTrackingParent
>2912	PtrMemberAccess	unmappedTrackedFrames . front ( ) -> getTrackingParent
>2913	Identifier	getTrackingParent
>2914	CallExpression	unmappedTrackedFrames . front ( )
>2915	ArgumentList	 
>2916	Callee	unmappedTrackedFrames . front
>2917	MemberAccess	unmappedTrackedFrames . front
>2918	Identifier	front
>2919	Identifier	unmappedTrackedFrames
>2920	UnaryOp	! unmappedTrackedFrames . front ( ) -> hasTrackingParent ( )
>2921	CallExpression	unmappedTrackedFrames . front ( ) -> hasTrackingParent ( )
>2922	ArgumentList	 
>2923	Callee	unmappedTrackedFrames . front ( ) -> hasTrackingParent
>2924	PtrMemberAccess	unmappedTrackedFrames . front ( ) -> hasTrackingParent
>2925	Identifier	hasTrackingParent
>2926	CallExpression	unmappedTrackedFrames . front ( )
>2927	ArgumentList	 
>2928	Callee	unmappedTrackedFrames . front
>2929	MemberAccess	unmappedTrackedFrames . front
>2930	Identifier	front
>2931	Identifier	unmappedTrackedFrames
>2932	UnaryOperator	!
>2933	RelationalExpression	unmappedTrackedFrames . size ( ) > 0
>2934	PrimaryExpression	0
>2935	CallExpression	unmappedTrackedFrames . size ( )
>2936	ArgumentList	 
>2937	Callee	unmappedTrackedFrames . size
>2938	MemberAccess	unmappedTrackedFrames . size
>2939	Identifier	size
>2940	Identifier	unmappedTrackedFrames
>2941	ExpressionStatement	 
>2942	CallExpression	unmappedTrackedFramesMutex . lock ( )
>2943	ArgumentList	 
>2944	Callee	unmappedTrackedFramesMutex . lock
>2945	MemberAccess	unmappedTrackedFramesMutex . lock
>2946	Identifier	lock
>2947	Identifier	unmappedTrackedFramesMutex
>2948	IdentifierDeclStatement	 
>2949	IdentifierDecl	references
>2950	Identifier	references
>2951	IdentifierDeclType	std 
>2952	IdentifierDeclStatement	 
>2953	IdentifierDecl	reference = nullptr
>2954	AssignmentExpr	reference = nullptr
>2955	Identifier	nullptr
>2956	Identifier	nullptr
>2957	Identifier	reference
>2958	IdentifierDeclType	std 
>3013	FunctionDef	SlamSystem 
>3014	ParameterList	 
>3015	ReturnType	void
>3016	CompoundStatement	 
>3017	IfStatement	if ( sPassed > 1.0f )
>3018	CompoundStatement	 
>3019	IfStatement	if ( enablePrintDebugInfo && printOverallTiming )
>3020	CompoundStatement	 
>3021	ExpressionStatement	 
>3022	CallExpression	printf ( \"MapIt
>3023	ArgumentList	\"MapIt
>3024	Argument	nAvgFindConstraintsItaration
>3025	Identifier	nAvgFindConstraintsItaration
>3026	Argument	msFindConstraintsItaration
>3027	Identifier	msFindConstraintsItaration
>3028	Argument	nAvgOptimizationIteration
>3029	Identifier	nAvgOptimizationIteration
>3030	Argument	msOptimizationIteration
>3031	Identifier	msOptimizationIteration
>3032	Argument	trackableKeyFrameSearch != 0 ? trackableKeyFrameSearch -> nAvgTrackPermaRef 
>3033	ConditionalExpression	trackableKeyFrameSearch != 0 ? trackableKeyFrameSearch -> nAvgTrackPermaRef 
>3034	PrimaryExpression	0
>3035	PtrMemberAccess	trackableKeyFrameSearch -> nAvgTrackPermaRef
>3036	Identifier	nAvgTrackPermaRef
>3037	Identifier	trackableKeyFrameSearch
>3038	Condition	trackableKeyFrameSearch != 0
>3039	EqualityExpression	trackableKeyFrameSearch != 0
>3040	PrimaryExpression	0
>3041	Identifier	trackableKeyFrameSearch
>3042	Argument	trackableKeyFrameSearch != 0 ? trackableKeyFrameSearch -> msTrackPermaRef 
>3043	ConditionalExpression	trackableKeyFrameSearch != 0 ? trackableKeyFrameSearch -> msTrackPermaRef 
>3044	PrimaryExpression	0
>3045	PtrMemberAccess	trackableKeyFrameSearch -> msTrackPermaRef
>3046	Identifier	msTrackPermaRef
>3047	Identifier	trackableKeyFrameSearch
>3048	Condition	trackableKeyFrameSearch != 0
>3049	EqualityExpression	trackableKeyFrameSearch != 0
>3050	PrimaryExpression	0
>3051	Identifier	trackableKeyFrameSearch
>3052	Argument	nAvgFindReferences
>3053	Identifier	nAvgFindReferences
>3054	Argument	msFindReferences
>3055	Identifier	msFindReferences
>3056	Argument	map -> nAvgCreate
>3057	PtrMemberAccess	map -> nAvgCreate
>3058	Identifier	nAvgCreate
>3059	Identifier	map
>3060	Argument	map -> msCreate + map -> msFinalize
>3061	AdditiveExpression	map -> msCreate + map -> msFinalize
>3062	PtrMemberAccess	map -> msFinalize
>3063	Identifier	msFinalize
>3064	Identifier	map
>3065	PtrMemberAccess	map -> msCreate
>3066	Identifier	msCreate
>3067	Identifier	map
>3068	Argument	nAvgTrackFrame
>3069	Identifier	nAvgTrackFrame
>3070	Argument	msTrackFrame
>3071	Identifier	msTrackFrame
>3072	Argument	map -> nAvgUpdate
>3073	PtrMemberAccess	map -> nAvgUpdate
>3074	Identifier	nAvgUpdate
>3075	Identifier	map
>3076	Argument	map -> msUpdate
>3077	PtrMemberAccess	map -> msUpdate
>3078	Identifier	msUpdate
>3079	Identifier	map
>3080	Argument	\"MapIt
>3081	PrimaryExpression	\"MapIt
>3082	Callee	printf
>3083	Identifier	printf
>3084	Condition	 
>3085	AndExpression	enablePrintDebugInfo && printOverallTiming
>3086	Identifier	printOverallTiming
>3087	Identifier	enablePrintDebugInfo
>3088	ExpressionStatement	 
>3089	AssignmentExpr	lastHzUpdate = now
>3090	Identifier	now
>3091	Identifier	lastHzUpdate
>3092	ExpressionStatement	 
>3093	AssignmentExpr	nOptimizationIteration = 0
>3094	PrimaryExpression	0
>3095	Identifier	nOptimizationIteration
>3096	ExpressionStatement	 
>3097	AssignmentExpr	nAvgOptimizationIteration = 0.8 * nAvgOptimizationIteration + 0.2 * ( nOptimizationIteration / sPassed )
>3098	AdditiveExpression	0.8 * nAvgOptimizationIteration + 0.2 * ( nOptimizationIteration / sPassed )
>3099	MultiplicativeExpression	0.2 * ( nOptimizationIteration / sPassed )
>3100	MultiplicativeExpression	nOptimizationIteration / sPassed
>3101	Identifier	sPassed
>3102	Identifier	nOptimizationIteration
>3103	PrimaryExpression	0.2
>3104	MultiplicativeExpression	0.8 * nAvgOptimizationIteration
>3105	Identifier	nAvgOptimizationIteration
>3106	PrimaryExpression	0.8
>3107	Identifier	nAvgOptimizationIteration
>3108	ExpressionStatement	 
>3109	AssignmentExpr	nFindConstraintsItaration = 0
>3110	PrimaryExpression	0
>3111	Identifier	nFindConstraintsItaration
>3112	ExpressionStatement	 
>3113	AssignmentExpr	nAvgFindConstraintsItaration = 0.8 * nAvgFindConstraintsItaration + 0.2 * ( nFindConstraintsItaration / \
>3114	AdditiveExpression	0.8 * nAvgFindConstraintsItaration + 0.2 * ( nFindConstraintsItaration / sPassed )
>3115	MultiplicativeExpression	0.2 * ( nFindConstraintsItaration / sPassed )
>3116	MultiplicativeExpression	nFindConstraintsItaration / sPassed
>3117	Identifier	sPassed
>3118	Identifier	nFindConstraintsItaration
>3119	PrimaryExpression	0.2
>3120	MultiplicativeExpression	0.8 * nAvgFindConstraintsItaration
>3121	Identifier	nAvgFindConstraintsItaration
>3122	PrimaryExpression	0.8
>3123	Identifier	nAvgFindConstraintsItaration
>3124	IfStatement	if ( trackableKeyFrameSearch != 0 )
>3125	CompoundStatement	 
>3126	ExpressionStatement	 
>3127	AssignmentExpr	trackableKeyFrameSearch -> nTrackPermaRef = 0
>3128	PrimaryExpression	0
>3129	PtrMemberAccess	trackableKeyFrameSearch -> nTrackPermaRef
>3130	Identifier	nTrackPermaRef
>3131	Identifier	trackableKeyFrameSearch
>3132	ExpressionStatement	 
>3133	AssignmentExpr	trackableKeyFrameSearch -> nAvgTrackPermaRef = 0.8 * trackableKeyFrameSearch -> nAvgTrackPermaRef + 0.2 * ( \
>3134	AdditiveExpression	0.8 * trackableKeyFrameSearch -> nAvgTrackPermaRef + 0.2 * ( trackableKeyFrameSearch -> nTrackPermaRef / \
>3135	MultiplicativeExpression	0.2 * ( trackableKeyFrameSearch -> nTrackPermaRef / sPassed )
>3136	MultiplicativeExpression	trackableKeyFrameSearch -> nTrackPermaRef / sPassed
>3137	Identifier	sPassed
>3138	PtrMemberAccess	trackableKeyFrameSearch -> nTrackPermaRef
>3139	Identifier	nTrackPermaRef
>3140	Identifier	trackableKeyFrameSearch
>3141	PrimaryExpression	0.2
>3142	MultiplicativeExpression	0.8 * trackableKeyFrameSearch -> nAvgTrackPermaRef
>3143	PtrMemberAccess	trackableKeyFrameSearch -> nAvgTrackPermaRef
>3144	Identifier	nAvgTrackPermaRef
>3145	Identifier	trackableKeyFrameSearch
>3146	PrimaryExpression	0.8
>3147	PtrMemberAccess	trackableKeyFrameSearch -> nAvgTrackPermaRef
>3148	Identifier	nAvgTrackPermaRef
>3149	Identifier	trackableKeyFrameSearch
>3150	Condition	 
>3151	EqualityExpression	trackableKeyFrameSearch != 0
>3152	PrimaryExpression	0
>3153	Identifier	trackableKeyFrameSearch
>3154	ExpressionStatement	 
>3155	AssignmentExpr	nFindReferences = 0
>3156	PrimaryExpression	0
>3157	Identifier	nFindReferences
>3158	ExpressionStatement	 
>3159	AssignmentExpr	nAvgFindReferences = 0.8 * nAvgFindReferences + 0.2 * ( nFindReferences / sPassed )
>3160	AdditiveExpression	0.8 * nAvgFindReferences + 0.2 * ( nFindReferences / sPassed )
>3161	MultiplicativeExpression	0.2 * ( nFindReferences / sPassed )
>3162	MultiplicativeExpression	nFindReferences / sPassed
>3163	Identifier	sPassed
>3164	Identifier	nFindReferences
>3165	PrimaryExpression	0.2
>3166	MultiplicativeExpression	0.8 * nAvgFindReferences
>3167	Identifier	nAvgFindReferences
>3168	PrimaryExpression	0.8
>3169	Identifier	nAvgFindReferences
>3170	ExpressionStatement	 
>3171	AssignmentExpr	nOptimizationIteration = 0
>3172	PrimaryExpression	0
>3173	Identifier	nOptimizationIteration
>3174	ExpressionStatement	 
>3175	AssignmentExpr	nAvgOptimizationIteration = 0.8 * nAvgOptimizationIteration + 0.2 * ( nOptimizationIteration / sPassed )
>3176	AdditiveExpression	0.8 * nAvgOptimizationIteration + 0.2 * ( nOptimizationIteration / sPassed )
>3177	MultiplicativeExpression	0.2 * ( nOptimizationIteration / sPassed )
>3178	MultiplicativeExpression	nOptimizationIteration / sPassed
>3179	Identifier	sPassed
>3180	Identifier	nOptimizationIteration
>3181	PrimaryExpression	0.2
>3182	MultiplicativeExpression	0.8 * nAvgOptimizationIteration
>3183	Identifier	nAvgOptimizationIteration
>3184	PrimaryExpression	0.8
>3185	Identifier	nAvgOptimizationIteration
>3186	ExpressionStatement	 
>3187	AssignmentExpr	nTrackFrame = 0
>3188	PrimaryExpression	0
>3189	Identifier	nTrackFrame
>3190	ExpressionStatement	 
>3191	AssignmentExpr	nAvgTrackFrame = 0.8 * nAvgTrackFrame + 0.2 * ( nTrackFrame / sPassed )
>3192	AdditiveExpression	0.8 * nAvgTrackFrame + 0.2 * ( nTrackFrame / sPassed )
>3193	MultiplicativeExpression	0.2 * ( nTrackFrame / sPassed )
>3194	MultiplicativeExpression	nTrackFrame / sPassed
>3195	Identifier	sPassed
>3196	Identifier	nTrackFrame
>3197	PrimaryExpression	0.2
>3198	MultiplicativeExpression	0.8 * nAvgTrackFrame
>3199	Identifier	nAvgTrackFrame
>3200	PrimaryExpression	0.8
>3201	Identifier	nAvgTrackFrame
>3202	Condition	 
>3203	RelationalExpression	sPassed > 1.0f
>3204	PrimaryExpression	1.0f
>3205	Identifier	sPassed
>3206	IdentifierDeclStatement	 
>3207	IdentifierDecl	sPassed = ( ( now . tv_sec - lastHzUpdate . tv_sec ) + ( now . tv_usec - lastHzUpdate . tv_usec ) / 1000000.0f )
>3208	AssignmentExpr	sPassed = ( ( now . tv_sec - lastHzUpdate . tv_sec ) + ( now . tv_usec - lastHzUpdate . tv_usec ) / 1000000.0f )
>3209	AdditiveExpression	( now . tv_sec - lastHzUpdate . tv_sec ) + ( now . tv_usec - lastHzUpdate . tv_usec ) / 1000000.0f
>3210	MultiplicativeExpression	( now . tv_usec - lastHzUpdate . tv_usec ) / 1000000.0f
>3211	PrimaryExpression	1000000.0f
>3212	AdditiveExpression	now . tv_usec - lastHzUpdate . tv_usec
>3213	MemberAccess	lastHzUpdate . tv_usec
>3214	Identifier	tv_usec
>3215	Identifier	lastHzUpdate
>3216	MemberAccess	now . tv_usec
>3217	Identifier	tv_usec
>3218	Identifier	now
>3219	AdditiveExpression	now . tv_sec - lastHzUpdate . tv_sec
>3220	MemberAccess	lastHzUpdate . tv_sec
>3221	Identifier	tv_sec
>3222	Identifier	lastHzUpdate
>3223	MemberAccess	now . tv_sec
>3224	Identifier	tv_sec
>3225	Identifier	now
>3226	Identifier	sPassed
>3227	Identifier	sPassed
>3228	IdentifierDeclType	float
>3229	ExpressionStatement	 
>3230	CallExpression	gettimeofday ( & now , NULL )
>3231	ArgumentList	& now
>3232	Argument	NULL
>3233	Identifier	NULL
>3234	Argument	& now
>3235	UnaryOp	& now
>3236	Identifier	now
>3237	UnaryOperator	&
>3238	Callee	gettimeofday
>3239	Identifier	gettimeofday
>3240	IdentifierDeclStatement	 
>3241	IdentifierDecl	now
>3242	Identifier	now
>3243	IdentifierDeclType	struct timeval
>3244	ExpressionStatement	 
>3245	CallExpression	map -> addTimingSample ( )
>3246	ArgumentList	 
>3247	Callee	map -> addTimingSample
>3248	PtrMemberAccess	map -> addTimingSample
>3249	Identifier	addTimingSample
>3250	Identifier	map
>3289	FunctionDef	SlamSystem 
>3290	ParameterList	 
>3291	ReturnType	void
>3292	CompoundStatement	 
>3293	ExpressionStatement	 
>3294	CallExpression	handleKey ( pressedKey )
>3295	ArgumentList	pressedKey
>3296	Argument	pressedKey
>3297	Identifier	pressedKey
>3298	Callee	handleKey
>3299	Identifier	handleKey
>3300	IdentifierDeclStatement	 
>3301	IdentifierDecl	pressedKey = Util 
>3302	AssignmentExpr	pressedKey = Util 
>3303	CallExpression	Util 
>3304	ArgumentList	1
>3305	Argument	1
>3306	PrimaryExpression	1
>3307	Callee	Util 
>3308	Identifier	Util 
>3309	Identifier	pressedKey
>3310	Identifier	pressedKey
>3311	IdentifierDeclType	int
>3312	IfStatement	if ( displayDepthMap )
>3313	ExpressionStatement	 
>3314	CallExpression	Util 
>3315	ArgumentList	\"DebugWindow DEPTH\"
>3316	Argument	false
>3317	Identifier	false
>3318	Argument	map -> debugImageDepth
>3319	PtrMemberAccess	map -> debugImageDepth
>3320	Identifier	debugImageDepth
>3321	Identifier	map
>3322	Argument	\"DebugWindow DEPTH\"
>3323	PrimaryExpression	\"DebugWindow DEPTH\"
>3324	Callee	Util 
>3325	Identifier	Util 
>3326	Condition	 
>3327	Identifier	displayDepthMap
>3328	IfStatement	if ( onSceenInfoDisplay )
>3329	ExpressionStatement	 
>3330	CallExpression	printMessageOnCVImage ( map -> debugImageDepth , buf1 , buf2 )
>3331	ArgumentList	map -> debugImageDepth
>3332	Argument	buf2
>3333	Identifier	buf2
>3334	Argument	buf1
>3335	Identifier	buf1
>3336	Argument	map -> debugImageDepth
>3337	PtrMemberAccess	map -> debugImageDepth
>3338	Identifier	debugImageDepth
>3339	Identifier	map
>3340	Callee	printMessageOnCVImage
>3341	Identifier	printMessageOnCVImage
>3342	Condition	 
>3343	Identifier	onSceenInfoDisplay
>3344	ExpressionStatement	 
>3345	CallExpression	snprintf ( buf2 , 200 , \"dens %2.0f%%; good %2.0f%%; scale %2.2f; res %2.1f/; usg %2.0f%%; Map
>3346	ArgumentList	buf2
>3347	Argument	1e-6 * ( float ) keyFrameGraph -> totalPoints
>3348	MultiplicativeExpression	1e-6 * ( float ) keyFrameGraph -> totalPoints
>3349	CastExpression	( float ) keyFrameGraph -> totalPoints
>3350	PtrMemberAccess	keyFrameGraph -> totalPoints
>3351	Identifier	totalPoints
>3352	Identifier	keyFrameGraph
>3353	CastTarget	float
>3354	PrimaryExpression	1e-6
>3355	Argument	( int ) keyFrameGraph -> edgesAll . size ( )
>3356	CastExpression	( int ) keyFrameGraph -> edgesAll . size ( )
>3357	CallExpression	keyFrameGraph -> edgesAll . size ( )
>3358	ArgumentList	 
>3359	Callee	keyFrameGraph -> edgesAll . size
>3360	MemberAccess	keyFrameGraph -> edgesAll . size
>3361	Identifier	size
>3362	PtrMemberAccess	keyFrameGraph -> edgesAll
>3363	Identifier	edgesAll
>3364	Identifier	keyFrameGraph
>3365	CastTarget	int
>3366	Argument	keyFrameGraph -> totalVertices
>3367	PtrMemberAccess	keyFrameGraph -> totalVertices
>3368	Identifier	totalVertices
>3369	Identifier	keyFrameGraph
>3370	Argument	( int ) keyFrameGraph -> allFramePoses . size ( )
>3371	CastExpression	( int ) keyFrameGraph -> allFramePoses . size ( )
>3372	CallExpression	keyFrameGraph -> allFramePoses . size ( )
>3373	ArgumentList	 
>3374	Callee	keyFrameGraph -> allFramePoses . size
>3375	MemberAccess	keyFrameGraph -> allFramePoses . size
>3376	Identifier	size
>3377	PtrMemberAccess	keyFrameGraph -> allFramePoses
>3378	Identifier	allFramePoses
>3379	Identifier	keyFrameGraph
>3380	CastTarget	int
>3381	Argument	100 * tracking_lastUsage
>3382	MultiplicativeExpression	100 * tracking_lastUsage
>3383	Identifier	tracking_lastUsage
>3384	PrimaryExpression	100
>3385	Argument	tracking_lastResidual
>3386	Identifier	tracking_lastResidual
>3387	Argument	scale
>3388	Identifier	scale
>3389	Argument	100 * tracking_lastGoodPerBad
>3390	MultiplicativeExpression	100 * tracking_lastGoodPerBad
>3391	Identifier	tracking_lastGoodPerBad
>3392	PrimaryExpression	100
>3393	Argument	100 * currentKeyFrame -> numPoints / ( float ) ( width * height )
>3394	MultiplicativeExpression	100 * currentKeyFrame -> numPoints / ( float ) ( width * height )
>3395	MultiplicativeExpression	currentKeyFrame -> numPoints / ( float ) ( width * height )
>3396	CastExpression	( float ) ( width * height )
>3397	MultiplicativeExpression	width * height
>3398	Identifier	height
>3399	Identifier	width
>3400	CastTarget	float
>3401	PtrMemberAccess	currentKeyFrame -> numPoints
>3402	Identifier	numPoints
>3403	Identifier	currentKeyFrame
>3404	PrimaryExpression	100
>3405	Argument	\"dens %2.0f%%; good %2.0f%%; scale %2.2f; res %2.1f/; usg %2.0f%%; Map
>3406	PrimaryExpression	\"dens %2.0f%%; good %2.0f%%; scale %2.2f; res %2.1f/; usg %2.0f%%; Map
>3407	Argument	200
>3408	PrimaryExpression	200
>3409	Argument	buf2
>3410	Identifier	buf2
>3411	Callee	snprintf
>3412	Identifier	snprintf
>3413	ExpressionStatement	 
>3414	CallExpression	snprintf ( buf1 , 200 , \"Map
>3415	ArgumentList	buf1
>3416	Argument	( int ) unmappedTrackedFrames . size ( )
>3417	CastExpression	( int ) unmappedTrackedFrames . size ( )
>3418	CallExpression	unmappedTrackedFrames . size ( )
>3419	ArgumentList	 
>3420	Callee	unmappedTrackedFrames . size
>3421	MemberAccess	unmappedTrackedFrames . size
>3422	Identifier	size
>3423	Identifier	unmappedTrackedFrames
>3424	CastTarget	int
>3425	Argument	currentKeyFrame -> numMappedOnThis
>3426	PtrMemberAccess	currentKeyFrame -> numMappedOnThis
>3427	Identifier	numMappedOnThis
>3428	Identifier	currentKeyFrame
>3429	Argument	currentKeyFrame -> numFramesTrackedOnThis
>3430	PtrMemberAccess	currentKeyFrame -> numFramesTrackedOnThis
>3431	Identifier	numFramesTrackedOnThis
>3432	Identifier	currentKeyFrame
>3433	Argument	nAvgTrackFrame
>3434	Identifier	nAvgTrackFrame
>3435	Argument	msTrackFrame
>3436	Identifier	msTrackFrame
>3437	Argument	map -> nAvgUpdate
>3438	PtrMemberAccess	map -> nAvgUpdate
>3439	Identifier	nAvgUpdate
>3440	Identifier	map
>3441	Argument	map -> msUpdate
>3442	PtrMemberAccess	map -> msUpdate
>3443	Identifier	msUpdate
>3444	Identifier	map
>3445	Argument	\"Map
>3446	PrimaryExpression	\"Map
>3447	Argument	200
>3448	PrimaryExpression	200
>3449	Argument	buf1
>3450	Identifier	buf1
>3451	Callee	snprintf
>3452	Identifier	snprintf
>3453	IdentifierDeclStatement	 
>3454	IdentifierDecl	buf2 [ 200 ]
>3455	PrimaryExpression	200
>3456	Identifier	buf2
>3457	IdentifierDeclType	char [ 200 ]
>3458	IdentifierDeclStatement	 
>3459	IdentifierDecl	buf1 [ 200 ]
>3460	PrimaryExpression	200
>3461	Identifier	buf1
>3462	IdentifierDeclType	char [ 200 ]
>3463	IfStatement	if ( currentKeyFrame != 0 && currentKeyFrame != 0 )
>3464	ExpressionStatement	 
>3465	AssignmentExpr	scale = currentKeyFrame -> getScaledCamToWorld ( ) . scale ( )
>3466	CallExpression	currentKeyFrame -> getScaledCamToWorld ( ) . scale ( )
>3467	ArgumentList	 
>3468	Callee	currentKeyFrame -> getScaledCamToWorld ( ) . scale
>3469	MemberAccess	currentKeyFrame -> getScaledCamToWorld ( ) . scale
>3470	Identifier	scale
>3471	CallExpression	currentKeyFrame -> getScaledCamToWorld ( )
>3472	ArgumentList	 
>3473	Callee	currentKeyFrame -> getScaledCamToWorld
>3474	PtrMemberAccess	currentKeyFrame -> getScaledCamToWorld
>3475	Identifier	getScaledCamToWorld
>3476	Identifier	currentKeyFrame
>3477	Identifier	scale
>3478	Condition	 
>3479	AndExpression	currentKeyFrame != 0 && currentKeyFrame != 0
>3480	EqualityExpression	currentKeyFrame != 0
>3481	PrimaryExpression	0
>3482	Identifier	currentKeyFrame
>3483	EqualityExpression	currentKeyFrame != 0
>3484	PrimaryExpression	0
>3485	Identifier	currentKeyFrame
>3486	IdentifierDeclStatement	 
>3487	IdentifierDecl	scale = 1
>3488	AssignmentExpr	scale = 1
>3489	PrimaryExpression	1
>3490	Identifier	scale
>3491	Identifier	scale
>3492	IdentifierDeclType	double
>3493	ExpressionStatement	 
>3494	CallExpression	map -> debugPlotDepthMap ( )
>3495	ArgumentList	 
>3496	Callee	map -> debugPlotDepthMap
>3497	PtrMemberAccess	map -> debugPlotDepthMap
>3498	Identifier	debugPlotDepthMap
>3499	Identifier	map
>3540	FunctionDef	SlamSystem 
>3541	ParameterList	 
>3542	ReturnType	void
>3543	CompoundStatement	 
>3544	IfStatement	if ( ! tracker -> trackingWasGood || tracker -> lastGoodCount / ( tracker -> lastGoodCount + tracker -> lastBadCount ) < \
>3545	ElseStatement	else
>3546	CompoundStatement	 
>3547	ExpressionStatement	 
>3548	CallExpression	currentKeyFrameMutex . unlock ( )
>3549	ArgumentList	 
>3550	Callee	currentKeyFrameMutex . unlock
>3551	MemberAccess	currentKeyFrameMutex . unlock
>3552	Identifier	unlock
>3553	Identifier	currentKeyFrameMutex
>3554	ExpressionStatement	 
>3555	AssignmentExpr	trackingIsGood = true
>3556	Identifier	true
>3557	Identifier	trackingIsGood
>3558	ExpressionStatement	 
>3559	AssignmentExpr	createNewKeyFrame = false
>3560	Identifier	false
>3561	Identifier	createNewKeyFrame
>3562	ExpressionStatement	 
>3563	CallExpression	currentKeyFrameMutex . lock ( )
>3564	ArgumentList	 
>3565	Callee	currentKeyFrameMutex . lock
>3566	MemberAccess	currentKeyFrameMutex . lock
>3567	Identifier	lock
>3568	Identifier	currentKeyFrameMutex
>3569	ExpressionStatement	 
>3570	CallExpression	unmappedTrackedFramesMutex . unlock ( )
>3571	ArgumentList	 
>3572	Callee	unmappedTrackedFramesMutex . unlock
>3573	MemberAccess	unmappedTrackedFramesMutex . unlock
>3574	Identifier	unlock
>3575	Identifier	unmappedTrackedFramesMutex
>3576	IfStatement	if ( unmappedTrackedFrames . size ( ) < 50 )
>3577	ExpressionStatement	 
>3578	CallExpression	unmappedTrackedFrames . push_back ( succFrame )
>3579	ArgumentList	succFrame
>3580	Argument	succFrame
>3581	Identifier	succFrame
>3582	Callee	unmappedTrackedFrames . push_back
>3583	MemberAccess	unmappedTrackedFrames . push_back
>3584	Identifier	push_back
>3585	Identifier	unmappedTrackedFrames
>3586	Condition	 
>3587	RelationalExpression	unmappedTrackedFrames . size ( ) < 50
>3588	PrimaryExpression	50
>3589	CallExpression	unmappedTrackedFrames . size ( )
>3590	ArgumentList	 
>3591	Callee	unmappedTrackedFrames . size
>3592	MemberAccess	unmappedTrackedFrames . size
>3593	Identifier	size
>3594	Identifier	unmappedTrackedFrames
>3595	ExpressionStatement	 
>3596	CallExpression	unmappedTrackedFramesMutex . lock ( )
>3597	ArgumentList	 
>3598	Callee	unmappedTrackedFramesMutex . lock
>3599	MemberAccess	unmappedTrackedFramesMutex . lock
>3600	Identifier	lock
>3601	Identifier	unmappedTrackedFramesMutex
>3602	ExpressionStatement	 
>3603	CallExpression	keyFrameGraph -> addFrame ( succFrame . get ( ) )
>3604	ArgumentList	succFrame . get ( )
>3605	Argument	succFrame . get ( )
>3606	CallExpression	succFrame . get ( )
>3607	ArgumentList	 
>3608	Callee	succFrame . get
>3609	MemberAccess	succFrame . get
>3610	Identifier	get
>3611	Identifier	succFrame
>3612	Callee	keyFrameGraph -> addFrame
>3613	PtrMemberAccess	keyFrameGraph -> addFrame
>3614	Identifier	addFrame
>3615	Identifier	keyFrameGraph
>3616	CompoundStatement	 
>3617	ExpressionStatement	 
>3618	CallExpression	trackingReference -> invalidate ( )
>3619	ArgumentList	 
>3620	Callee	trackingReference -> invalidate
>3621	PtrMemberAccess	trackingReference -> invalidate
>3622	Identifier	invalidate
>3623	Identifier	trackingReference
>3624	IfStatement	if ( enablePrintDebugInfo && printRelocalizationInfo )
>3625	ExpressionStatement	 
>3626	CallExpression	printf ( \"RELOCALIZATION FAILED BADLY! discarding result.\n\" )
>3627	ArgumentList	\"RELOCALIZATION FAILED BADLY! discarding result.\n\"
>3628	Argument	\"RELOCALIZATION FAILED BADLY! discarding result.\n\"
>3629	PrimaryExpression	\"RELOCALIZATION FAILED BADLY! discarding result.\n\"
>3630	Callee	printf
>3631	Identifier	printf
>3632	Condition	 
>3633	AndExpression	enablePrintDebugInfo && printRelocalizationInfo
>3634	Identifier	printRelocalizationInfo
>3635	Identifier	enablePrintDebugInfo
>3636	Condition	 
>3637	OrExpression	! tracker -> trackingWasGood || tracker -> lastGoodCount / ( tracker -> lastGoodCount + tracker -> lastBadCount ) < \
>3638	RelationalExpression	tracker -> lastGoodCount / ( tracker -> lastGoodCount + tracker -> lastBadCount ) < 1 - 0.75f * ( 1 - \
>3639	AdditiveExpression	1 - 0.75f * ( 1 - MIN_GOODPERGOODBAD_PIXEL )
>3640	MultiplicativeExpression	0.75f * ( 1 - MIN_GOODPERGOODBAD_PIXEL )
>3641	AdditiveExpression	1 - MIN_GOODPERGOODBAD_PIXEL
>3642	Identifier	MIN_GOODPERGOODBAD_PIXEL
>3643	PrimaryExpression	1
>3644	PrimaryExpression	0.75f
>3645	PrimaryExpression	1
>3646	MultiplicativeExpression	tracker -> lastGoodCount / ( tracker -> lastGoodCount + tracker -> lastBadCount )
>3647	AdditiveExpression	tracker -> lastGoodCount + tracker -> lastBadCount
>3648	PtrMemberAccess	tracker -> lastBadCount
>3649	Identifier	lastBadCount
>3650	Identifier	tracker
>3651	PtrMemberAccess	tracker -> lastGoodCount
>3652	Identifier	lastGoodCount
>3653	Identifier	tracker
>3654	PtrMemberAccess	tracker -> lastGoodCount
>3655	Identifier	lastGoodCount
>3656	Identifier	tracker
>3657	UnaryOp	! tracker -> trackingWasGood
>3658	PtrMemberAccess	tracker -> trackingWasGood
>3659	Identifier	trackingWasGood
>3660	Identifier	tracker
>3661	UnaryOperator	!
>3662	ExpressionStatement	 
>3663	CallExpression	tracker -> trackFrame ( trackingReference , succFrame . get ( ) , succFrameToKF_init )
>3664	ArgumentList	trackingReference
>3665	Argument	succFrameToKF_init
>3666	Identifier	succFrameToKF_init
>3667	Argument	succFrame . get ( )
>3668	CallExpression	succFrame . get ( )
>3669	ArgumentList	 
>3670	Callee	succFrame . get
>3671	MemberAccess	succFrame . get
>3672	Identifier	get
>3673	Identifier	succFrame
>3674	Argument	trackingReference
>3675	Identifier	trackingReference
>3676	Callee	tracker -> trackFrame
>3677	PtrMemberAccess	tracker -> trackFrame
>3678	Identifier	trackFrame
>3679	Identifier	tracker
>3680	ExpressionStatement	 
>3681	CallExpression	currentKeyFrameMutex . unlock ( )
>3682	ArgumentList	 
>3683	Callee	currentKeyFrameMutex . unlock
>3684	MemberAccess	currentKeyFrameMutex . unlock
>3685	Identifier	unlock
>3686	Identifier	currentKeyFrameMutex
>3687	ExpressionStatement	 
>3688	AssignmentExpr	trackingReferenceFrameSharedPT = currentKeyFrame
>3689	Identifier	currentKeyFrame
>3690	Identifier	trackingReferenceFrameSharedPT
>3691	ExpressionStatement	 
>3692	CallExpression	trackingReference -> importFrame ( currentKeyFrame . get ( ) )
>3693	ArgumentList	currentKeyFrame . get ( )
>3694	Argument	currentKeyFrame . get ( )
>3695	CallExpression	currentKeyFrame . get ( )
>3696	ArgumentList	 
>3697	Callee	currentKeyFrame . get
>3698	MemberAccess	currentKeyFrame . get
>3699	Identifier	get
>3700	Identifier	currentKeyFrame
>3701	Callee	trackingReference -> importFrame
>3702	PtrMemberAccess	trackingReference -> importFrame
>3703	Identifier	importFrame
>3704	Identifier	trackingReference
>3705	ExpressionStatement	 
>3706	CallExpression	currentKeyFrameMutex . lock ( )
>3707	ArgumentList	 
>3708	Callee	currentKeyFrameMutex . lock
>3709	MemberAccess	currentKeyFrameMutex . lock
>3710	Identifier	lock
>3711	Identifier	currentKeyFrameMutex
>3712	ExpressionStatement	 
>3713	CallExpression	loadNewCurrentKeyframe ( keyframe )
>3714	ArgumentList	keyframe
>3715	Argument	keyframe
>3716	Identifier	keyframe
>3717	Callee	loadNewCurrentKeyframe
>3718	Identifier	loadNewCurrentKeyframe
>3719	ExpressionStatement	 
>3720	CallExpression	assert ( keyframe != 0 )
>3721	ArgumentList	keyframe != 0
>3722	Argument	keyframe != 0
>3723	EqualityExpression	keyframe != 0
>3724	PrimaryExpression	0
>3725	Identifier	keyframe
>3726	Callee	assert
>3727	Identifier	assert
>3728	ExpressionStatement	 
>3729	CallExpression	relocalizer . getResult ( keyframe , succFrame , succFrameID , succFrameToKF_init )
>3730	ArgumentList	keyframe
>3731	Argument	succFrameToKF_init
>3732	Identifier	succFrameToKF_init
>3733	Argument	succFrameID
>3734	Identifier	succFrameID
>3735	Argument	succFrame
>3736	Identifier	succFrame
>3737	Argument	keyframe
>3738	Identifier	keyframe
>3739	Callee	relocalizer . getResult
>3740	MemberAccess	relocalizer . getResult
>3741	Identifier	getResult
>3742	Identifier	relocalizer
>3743	ExpressionStatement	 
>3744	CallExpression	relocalizer . stop ( )
>3745	ArgumentList	 
>3746	Callee	relocalizer . stop
>3747	MemberAccess	relocalizer . stop
>3748	Identifier	stop
>3749	Identifier	relocalizer
>3750	IdentifierDeclStatement	 
>3751	IdentifierDecl	succFrame
>3752	Identifier	succFrame
>3753	IdentifierDeclType	std 
>3754	IdentifierDeclStatement	 
>3755	IdentifierDecl	succFrameToKF_init
>3756	Identifier	succFrameToKF_init
>3757	IdentifierDeclType	SE3
>3758	IdentifierDeclStatement	 
>3759	IdentifierDecl	succFrameID
>3760	Identifier	succFrameID
>3761	IdentifierDeclType	int
>3762	IdentifierDeclStatement	 
>3763	IdentifierDecl	* keyframe
>3764	Identifier	keyframe
>3765	IdentifierDeclType	Frame *
>3796	FunctionDef	SlamSystem 
>3797	ParameterList	 
>3798	ReturnType	bool
>3799	CompoundStatement	 
>3800	IfStatement	if ( trackingIsGood )
>3801	ElseStatement	else
>3802	CompoundStatement	 
>3803	ReturnStatement	 
>3804	Identifier	true
>3805	IfStatement	if ( relocalizer . waitResult ( 50 ) )
>3806	ExpressionStatement	 
>3807	CallExpression	takeRelocalizeResult ( )
>3808	ArgumentList	 
>3809	Callee	takeRelocalizeResult
>3810	Identifier	takeRelocalizeResult
>3811	Condition	 
>3812	CallExpression	relocalizer . waitResult ( 50 )
>3813	ArgumentList	50
>3814	Argument	50
>3815	PrimaryExpression	50
>3816	Callee	relocalizer . waitResult
>3817	MemberAccess	relocalizer . waitResult
>3818	Identifier	waitResult
>3819	Identifier	relocalizer
>3820	IfStatement	if ( ! relocalizer . isRunning )
>3821	ExpressionStatement	 
>3822	CallExpression	relocalizer . start ( keyFrameGraph -> keyframesAll )
>3823	ArgumentList	keyFrameGraph -> keyframesAll
>3824	Argument	keyFrameGraph -> keyframesAll
>3825	PtrMemberAccess	keyFrameGraph -> keyframesAll
>3826	Identifier	keyframesAll
>3827	Identifier	keyFrameGraph
>3828	Callee	relocalizer . start
>3829	MemberAccess	relocalizer . start
>3830	Identifier	start
>3831	Identifier	relocalizer
>3832	Condition	 
>3833	UnaryOp	! relocalizer . isRunning
>3834	MemberAccess	relocalizer . isRunning
>3835	Identifier	isRunning
>3836	Identifier	relocalizer
>3837	UnaryOperator	!
>3838	IfStatement	if ( map -> isValid ( ) )
>3839	CompoundStatement	 
>3840	ExpressionStatement	 
>3841	CallExpression	map -> invalidate ( )
>3842	ArgumentList	 
>3843	Callee	map -> invalidate
>3844	PtrMemberAccess	map -> invalidate
>3845	Identifier	invalidate
>3846	Identifier	map
>3847	IfStatement	if ( currentKeyFrame -> numMappedOnThisTotal >= MIN_NUM_MAPPED )
>3848	ElseStatement	else
>3849	ExpressionStatement	 
>3850	CallExpression	discardCurrentKeyframe ( )
>3851	ArgumentList	 
>3852	Callee	discardCurrentKeyframe
>3853	Identifier	discardCurrentKeyframe
>3854	ExpressionStatement	 
>3855	CallExpression	finishCurrentKeyframe ( )
>3856	ArgumentList	 
>3857	Callee	finishCurrentKeyframe
>3858	Identifier	finishCurrentKeyframe
>3859	Condition	 
>3860	RelationalExpression	currentKeyFrame -> numMappedOnThisTotal >= MIN_NUM_MAPPED
>3861	Identifier	MIN_NUM_MAPPED
>3862	PtrMemberAccess	currentKeyFrame -> numMappedOnThisTotal
>3863	Identifier	numMappedOnThisTotal
>3864	Identifier	currentKeyFrame
>3865	Condition	 
>3866	CallExpression	map -> isValid ( )
>3867	ArgumentList	 
>3868	Callee	map -> isValid
>3869	PtrMemberAccess	map -> isValid
>3870	Identifier	isValid
>3871	Identifier	map
>3872	CompoundStatement	 
>3873	ReturnStatement	 
>3874	Identifier	true
>3875	IfStatement	if ( createNewKeyFrame )
>3876	ElseStatement	else
>3877	CompoundStatement	 
>3878	IfStatement	if ( ! didSomething )
>3879	ReturnStatement	 
>3880	Identifier	false
>3881	Condition	 
>3882	UnaryOp	! didSomething
>3883	Identifier	didSomething
>3884	UnaryOperator	!
>3885	IfStatement	if ( displayDepthMap || depthMapScreenshotFlag )
>3886	ExpressionStatement	 
>3887	CallExpression	debugDisplayDepthMap ( )
>3888	ArgumentList	 
>3889	Callee	debugDisplayDepthMap
>3890	Identifier	debugDisplayDepthMap
>3891	Condition	 
>3892	OrExpression	displayDepthMap || depthMapScreenshotFlag
>3893	Identifier	depthMapScreenshotFlag
>3894	Identifier	displayDepthMap
>3895	IdentifierDeclStatement	 
>3896	IdentifierDecl	didSomething = updateKeyframe ( )
>3897	AssignmentExpr	didSomething = updateKeyframe ( )
>3898	CallExpression	updateKeyframe ( )
>3899	ArgumentList	 
>3900	Callee	updateKeyframe
>3901	Identifier	updateKeyframe
>3902	Identifier	didSomething
>3903	Identifier	didSomething
>3904	IdentifierDeclType	bool
>3905	CompoundStatement	 
>3906	IfStatement	if ( displayDepthMap || depthMapScreenshotFlag )
>3907	ExpressionStatement	 
>3908	CallExpression	debugDisplayDepthMap ( )
>3909	ArgumentList	 
>3910	Callee	debugDisplayDepthMap
>3911	Identifier	debugDisplayDepthMap
>3912	Condition	 
>3913	OrExpression	displayDepthMap || depthMapScreenshotFlag
>3914	Identifier	depthMapScreenshotFlag
>3915	Identifier	displayDepthMap
>3916	ExpressionStatement	 
>3917	CallExpression	changeKeyframe ( false , true , 1.0f )
>3918	ArgumentList	false
>3919	Argument	1.0f
>3920	PrimaryExpression	1.0f
>3921	Argument	true
>3922	Identifier	true
>3923	Argument	false
>3924	Identifier	false
>3925	Callee	changeKeyframe
>3926	Identifier	changeKeyframe
>3927	ExpressionStatement	 
>3928	CallExpression	finishCurrentKeyframe ( )
>3929	ArgumentList	 
>3930	Callee	finishCurrentKeyframe
>3931	Identifier	finishCurrentKeyframe
>3932	Condition	 
>3933	Identifier	createNewKeyFrame
>3934	IfStatement	if ( ! doMapping )
>3935	CompoundStatement	 
>3936	ReturnStatement	 
>3937	Identifier	false
>3938	IfStatement	if ( displayDepthMap || depthMapScreenshotFlag )
>3939	ExpressionStatement	 
>3940	CallExpression	debugDisplayDepthMap ( )
>3941	ArgumentList	 
>3942	Callee	debugDisplayDepthMap
>3943	Identifier	debugDisplayDepthMap
>3944	Condition	 
>3945	OrExpression	displayDepthMap || depthMapScreenshotFlag
>3946	Identifier	depthMapScreenshotFlag
>3947	Identifier	displayDepthMap
>3948	IfStatement	if ( lastTrackingClosenessScore > 1 )
>3949	ExpressionStatement	 
>3950	CallExpression	changeKeyframe ( true , false , lastTrackingClosenessScore * 0.75 )
>3951	ArgumentList	true
>3952	Argument	lastTrackingClosenessScore * 0.75
>3953	MultiplicativeExpression	lastTrackingClosenessScore * 0.75
>3954	PrimaryExpression	0.75
>3955	Identifier	lastTrackingClosenessScore
>3956	Argument	false
>3957	Identifier	false
>3958	Argument	true
>3959	Identifier	true
>3960	Callee	changeKeyframe
>3961	Identifier	changeKeyframe
>3962	Condition	 
>3963	RelationalExpression	lastTrackingClosenessScore > 1
>3964	PrimaryExpression	1
>3965	Identifier	lastTrackingClosenessScore
>3966	Condition	 
>3967	UnaryOp	! doMapping
>3968	Identifier	doMapping
>3969	UnaryOperator	!
>3970	Condition	 
>3971	Identifier	trackingIsGood
>3972	IfStatement	if ( dumpMap )
>3973	CompoundStatement	 
>3974	ExpressionStatement	 
>3975	AssignmentExpr	dumpMap = false
>3976	Identifier	false
>3977	Identifier	dumpMap
>3978	ExpressionStatement	 
>3979	CallExpression	keyFrameGraph -> dumpMap ( packagePath + \"/save\" )
>3980	ArgumentList	packagePath + \"/save\"
>3981	Argument	packagePath + \"/save\"
>3982	AdditiveExpression	packagePath + \"/save\"
>3983	PrimaryExpression	\"/save\"
>3984	Identifier	packagePath
>3985	Callee	keyFrameGraph -> dumpMap
>3986	PtrMemberAccess	keyFrameGraph -> dumpMap
>3987	Identifier	dumpMap
>3988	Identifier	keyFrameGraph
>3989	Condition	 
>3990	Identifier	dumpMap
>3991	ExpressionStatement	 
>3992	CallExpression	addTimingSamples ( )
>3993	ArgumentList	 
>3994	Callee	addTimingSamples
>3995	Identifier	addTimingSamples
>3996	ExpressionStatement	 
>3997	CallExpression	mergeOptimizationOffset ( )
>3998	ArgumentList	 
>3999	Callee	mergeOptimizationOffset
>4000	Identifier	mergeOptimizationOffset
>4001	IfStatement	if ( ! doMapping && currentKeyFrame -> idxInKeyframes < 0 )
>4002	CompoundStatement	 
>4003	ExpressionStatement	 
>4004	CallExpression	changeKeyframe ( true , true , 1.0f )
>4005	ArgumentList	true
>4006	Argument	1.0f
>4007	PrimaryExpression	1.0f
>4008	Argument	true
>4009	Identifier	true
>4010	Argument	true
>4011	Identifier	true
>4012	Callee	changeKeyframe
>4013	Identifier	changeKeyframe
>4014	ExpressionStatement	 
>4015	CallExpression	printf ( \"Finished KF %d as Mapping got disabled!\n\" , currentKeyFrame -> id ( ) )
>4016	ArgumentList	\"Finished KF %d as Mapping got disabled!\n\"
>4017	Argument	currentKeyFrame -> id ( )
>4018	CallExpression	currentKeyFrame -> id ( )
>4019	ArgumentList	 
>4020	Callee	currentKeyFrame -> id
>4021	PtrMemberAccess	currentKeyFrame -> id
>4022	Identifier	id
>4023	Identifier	currentKeyFrame
>4024	Argument	\"Finished KF %d as Mapping got disabled!\n\"
>4025	PrimaryExpression	\"Finished KF %d as Mapping got disabled!\n\"
>4026	Callee	printf
>4027	Identifier	printf
>4028	ExpressionStatement	 
>4029	CallExpression	map -> invalidate ( )
>4030	ArgumentList	 
>4031	Callee	map -> invalidate
>4032	PtrMemberAccess	map -> invalidate
>4033	Identifier	invalidate
>4034	Identifier	map
>4035	IfStatement	if ( currentKeyFrame -> numMappedOnThisTotal >= MIN_NUM_MAPPED )
>4036	ElseStatement	else
>4037	ExpressionStatement	 
>4038	CallExpression	discardCurrentKeyframe ( )
>4039	ArgumentList	 
>4040	Callee	discardCurrentKeyframe
>4041	Identifier	discardCurrentKeyframe
>4042	ExpressionStatement	 
>4043	CallExpression	finishCurrentKeyframe ( )
>4044	ArgumentList	 
>4045	Callee	finishCurrentKeyframe
>4046	Identifier	finishCurrentKeyframe
>4047	Condition	 
>4048	RelationalExpression	currentKeyFrame -> numMappedOnThisTotal >= MIN_NUM_MAPPED
>4049	Identifier	MIN_NUM_MAPPED
>4050	PtrMemberAccess	currentKeyFrame -> numMappedOnThisTotal
>4051	Identifier	numMappedOnThisTotal
>4052	Identifier	currentKeyFrame
>4053	Condition	 
>4054	AndExpression	! doMapping && currentKeyFrame -> idxInKeyframes < 0
>4055	RelationalExpression	currentKeyFrame -> idxInKeyframes < 0
>4056	PrimaryExpression	0
>4057	PtrMemberAccess	currentKeyFrame -> idxInKeyframes
>4058	Identifier	idxInKeyframes
>4059	Identifier	currentKeyFrame
>4060	UnaryOp	! doMapping
>4061	Identifier	doMapping
>4062	UnaryOperator	!
>4063	IfStatement	if ( currentKeyFrame == 0 )
>4064	ReturnStatement	 
>4065	Identifier	false
>4066	Condition	 
>4067	EqualityExpression	currentKeyFrame == 0
>4068	PrimaryExpression	0
>4069	Identifier	currentKeyFrame
>4100	FunctionDef	SlamSystem 
>4101	ParameterList	uchar * image , float * depth , double timeStamp , int id
>4102	Parameter	 
>4103	Identifier	id
>4104	ParameterType	int
>4105	Parameter	 
>4106	Identifier	timeStamp
>4107	ParameterType	double
>4108	Parameter	 
>4109	Identifier	depth
>4110	ParameterType	float *
>4111	Parameter	 
>4112	Identifier	image
>4113	ParameterType	uchar *
>4114	ReturnType	void
>4115	CompoundStatement	 
>4116	ExpressionStatement	 
>4117	CallExpression	printf ( \"Done GT initialization!\n\" )
>4118	ArgumentList	\"Done GT initialization!\n\"
>4119	Argument	\"Done GT initialization!\n\"
>4120	PrimaryExpression	\"Done GT initialization!\n\"
>4121	Callee	printf
>4122	Identifier	printf
>4123	IfStatement	if ( continuousPCOutput && outputWrapper != 0 )
>4124	ExpressionStatement	 
>4125	CallExpression	outputWrapper -> publishKeyframe ( currentKeyFrame . get ( ) )
>4126	ArgumentList	currentKeyFrame . get ( )
>4127	Argument	currentKeyFrame . get ( )
>4128	CallExpression	currentKeyFrame . get ( )
>4129	ArgumentList	 
>4130	Callee	currentKeyFrame . get
>4131	MemberAccess	currentKeyFrame . get
>4132	Identifier	get
>4133	Identifier	currentKeyFrame
>4134	Callee	outputWrapper -> publishKeyframe
>4135	PtrMemberAccess	outputWrapper -> publishKeyframe
>4136	Identifier	publishKeyframe
>4137	Identifier	outputWrapper
>4138	Condition	 
>4139	AndExpression	continuousPCOutput && outputWrapper != 0
>4140	EqualityExpression	outputWrapper != 0
>4141	PrimaryExpression	0
>4142	Identifier	outputWrapper
>4143	Identifier	continuousPCOutput
>4144	IfStatement	if ( doSlam )
>4145	CompoundStatement	 
>4146	ExpressionStatement	 
>4147	CallExpression	keyFrameGraph -> idToKeyFrameMutex . unlock ( )
>4148	ArgumentList	 
>4149	Callee	keyFrameGraph -> idToKeyFrameMutex . unlock
>4150	MemberAccess	keyFrameGraph -> idToKeyFrameMutex . unlock
>4151	Identifier	unlock
>4152	PtrMemberAccess	keyFrameGraph -> idToKeyFrameMutex
>4153	Identifier	idToKeyFrameMutex
>4154	Identifier	keyFrameGraph
>4155	ExpressionStatement	 
>4156	CallExpression	keyFrameGraph -> idToKeyFrame . insert ( std 
>4157	ArgumentList	std 
>4158	Argument	std 
>4159	CallExpression	std 
>4160	ArgumentList	currentKeyFrame -> id ( )
>4161	Argument	currentKeyFrame
>4162	Identifier	currentKeyFrame
>4163	Argument	currentKeyFrame -> id ( )
>4164	CallExpression	currentKeyFrame -> id ( )
>4165	ArgumentList	 
>4166	Callee	currentKeyFrame -> id
>4167	PtrMemberAccess	currentKeyFrame -> id
>4168	Identifier	id
>4169	Identifier	currentKeyFrame
>4170	Callee	std 
>4171	Identifier	std 
>4172	Callee	keyFrameGraph -> idToKeyFrame . insert
>4173	MemberAccess	keyFrameGraph -> idToKeyFrame . insert
>4174	Identifier	insert
>4175	PtrMemberAccess	keyFrameGraph -> idToKeyFrame
>4176	Identifier	idToKeyFrame
>4177	Identifier	keyFrameGraph
>4178	ExpressionStatement	 
>4179	CallExpression	keyFrameGraph -> idToKeyFrameMutex . lock ( )
>4180	ArgumentList	 
>4181	Callee	keyFrameGraph -> idToKeyFrameMutex . lock
>4182	MemberAccess	keyFrameGraph -> idToKeyFrameMutex . lock
>4183	Identifier	lock
>4184	PtrMemberAccess	keyFrameGraph -> idToKeyFrameMutex
>4185	Identifier	idToKeyFrameMutex
>4186	Identifier	keyFrameGraph
>4187	Condition	 
>4188	Identifier	doSlam
>4189	ExpressionStatement	 
>4190	CallExpression	currentKeyFrameMutex . unlock ( )
>4191	ArgumentList	 
>4192	Callee	currentKeyFrameMutex . unlock
>4193	MemberAccess	currentKeyFrameMutex . unlock
>4194	Identifier	unlock
>4195	Identifier	currentKeyFrameMutex
>4196	ExpressionStatement	 
>4197	CallExpression	keyFrameGraph -> addFrame ( currentKeyFrame . get ( ) )
>4198	ArgumentList	currentKeyFrame . get ( )
>4199	Argument	currentKeyFrame . get ( )
>4200	CallExpression	currentKeyFrame . get ( )
>4201	ArgumentList	 
>4202	Callee	currentKeyFrame . get
>4203	MemberAccess	currentKeyFrame . get
>4204	Identifier	get
>4205	Identifier	currentKeyFrame
>4206	Callee	keyFrameGraph -> addFrame
>4207	PtrMemberAccess	keyFrameGraph -> addFrame
>4208	Identifier	addFrame
>4209	Identifier	keyFrameGraph
>4210	ExpressionStatement	 
>4211	CallExpression	map -> initializeFromGTDepth ( currentKeyFrame . get ( ) )
>4212	ArgumentList	currentKeyFrame . get ( )
>4213	Argument	currentKeyFrame . get ( )
>4214	CallExpression	currentKeyFrame . get ( )
>4215	ArgumentList	 
>4216	Callee	currentKeyFrame . get
>4217	MemberAccess	currentKeyFrame . get
>4218	Identifier	get
>4219	Identifier	currentKeyFrame
>4220	Callee	map -> initializeFromGTDepth
>4221	PtrMemberAccess	map -> initializeFromGTDepth
>4222	Identifier	initializeFromGTDepth
>4223	Identifier	map
>4224	ExpressionStatement	 
>4225	CallExpression	currentKeyFrame -> setDepthFromGroundTruth ( depth )
>4226	ArgumentList	depth
>4227	Argument	depth
>4228	Identifier	depth
>4229	Callee	currentKeyFrame -> setDepthFromGroundTruth
>4230	PtrMemberAccess	currentKeyFrame -> setDepthFromGroundTruth
>4231	Identifier	setDepthFromGroundTruth
>4232	Identifier	currentKeyFrame
>4233	ExpressionStatement	 
>4234	CallExpression	currentKeyFrame . reset ( new Frame ( id , width , height , K , timeStamp , image ) )
>4235	ArgumentList	id , width , height , K , timeStamp , image
>4236	Argument	id , width , height , K , timeStamp , image
>4237	Expression	id , width , height , K , timeStamp , image
>4238	Expression	width , height , K , timeStamp , image
>4239	Expression	height , K , timeStamp , image
>4240	Expression	K , timeStamp , image
>4241	Expression	timeStamp , image
>4242	Identifier	image
>4243	Identifier	timeStamp
>4244	Identifier	K
>4245	Identifier	height
>4246	Identifier	width
>4247	Identifier	id
>4248	Callee	currentKeyFrame . reset
>4249	MemberAccess	currentKeyFrame . reset
>4250	Identifier	reset
>4251	Identifier	currentKeyFrame
>4252	ExpressionStatement	 
>4253	CallExpression	currentKeyFrameMutex . lock ( )
>4254	ArgumentList	 
>4255	Callee	currentKeyFrameMutex . lock
>4256	MemberAccess	currentKeyFrameMutex . lock
>4257	Identifier	lock
>4258	Identifier	currentKeyFrameMutex
>4259	ExpressionStatement	 
>4260	CallExpression	printf ( \"Doing GT initialization!\n\" )
>4261	ArgumentList	\"Doing GT initialization!\n\"
>4262	Argument	\"Doing GT initialization!\n\"
>4263	PrimaryExpression	\"Doing GT initialization!\n\"
>4264	Callee	printf
>4265	Identifier	printf
>4290	FunctionDef	SlamSystem 
>4291	ParameterList	uchar * image , double timeStamp , int id
>4292	Parameter	 
>4293	Identifier	id
>4294	ParameterType	int
>4295	Parameter	 
>4296	Identifier	timeStamp
>4297	ParameterType	double
>4298	Parameter	 
>4299	Identifier	image
>4300	ParameterType	uchar *
>4301	ReturnType	void
>4302	CompoundStatement	 
>4303	ExpressionStatement	 
>4304	CallExpression	printf ( \"Done Random initialization!\n\" )
>4305	ArgumentList	\"Done Random initialization!\n\"
>4306	Argument	\"Done Random initialization!\n\"
>4307	PrimaryExpression	\"Done Random initialization!\n\"
>4308	Callee	printf
>4309	Identifier	printf
>4310	IfStatement	if ( displayDepthMap || depthMapScreenshotFlag )
>4311	ExpressionStatement	 
>4312	CallExpression	debugDisplayDepthMap ( )
>4313	ArgumentList	 
>4314	Callee	debugDisplayDepthMap
>4315	Identifier	debugDisplayDepthMap
>4316	Condition	 
>4317	OrExpression	displayDepthMap || depthMapScreenshotFlag
>4318	Identifier	depthMapScreenshotFlag
>4319	Identifier	displayDepthMap
>4320	IfStatement	if ( continuousPCOutput && outputWrapper != 0 )
>4321	ExpressionStatement	 
>4322	CallExpression	outputWrapper -> publishKeyframe ( currentKeyFrame . get ( ) )
>4323	ArgumentList	currentKeyFrame . get ( )
>4324	Argument	currentKeyFrame . get ( )
>4325	CallExpression	currentKeyFrame . get ( )
>4326	ArgumentList	 
>4327	Callee	currentKeyFrame . get
>4328	MemberAccess	currentKeyFrame . get
>4329	Identifier	get
>4330	Identifier	currentKeyFrame
>4331	Callee	outputWrapper -> publishKeyframe
>4332	PtrMemberAccess	outputWrapper -> publishKeyframe
>4333	Identifier	publishKeyframe
>4334	Identifier	outputWrapper
>4335	Condition	 
>4336	AndExpression	continuousPCOutput && outputWrapper != 0
>4337	EqualityExpression	outputWrapper != 0
>4338	PrimaryExpression	0
>4339	Identifier	outputWrapper
>4340	Identifier	continuousPCOutput
>4341	IfStatement	if ( doSlam )
>4342	CompoundStatement	 
>4343	ExpressionStatement	 
>4344	CallExpression	keyFrameGraph -> idToKeyFrameMutex . unlock ( )
>4345	ArgumentList	 
>4346	Callee	keyFrameGraph -> idToKeyFrameMutex . unlock
>4347	MemberAccess	keyFrameGraph -> idToKeyFrameMutex . unlock
>4348	Identifier	unlock
>4349	PtrMemberAccess	keyFrameGraph -> idToKeyFrameMutex
>4350	Identifier	idToKeyFrameMutex
>4351	Identifier	keyFrameGraph
>4352	ExpressionStatement	 
>4353	CallExpression	keyFrameGraph -> idToKeyFrame . insert ( std 
>4354	ArgumentList	std 
>4355	Argument	std 
>4356	CallExpression	std 
>4357	ArgumentList	currentKeyFrame -> id ( )
>4358	Argument	currentKeyFrame
>4359	Identifier	currentKeyFrame
>4360	Argument	currentKeyFrame -> id ( )
>4361	CallExpression	currentKeyFrame -> id ( )
>4362	ArgumentList	 
>4363	Callee	currentKeyFrame -> id
>4364	PtrMemberAccess	currentKeyFrame -> id
>4365	Identifier	id
>4366	Identifier	currentKeyFrame
>4367	Callee	std 
>4368	Identifier	std 
>4369	Callee	keyFrameGraph -> idToKeyFrame . insert
>4370	MemberAccess	keyFrameGraph -> idToKeyFrame . insert
>4371	Identifier	insert
>4372	PtrMemberAccess	keyFrameGraph -> idToKeyFrame
>4373	Identifier	idToKeyFrame
>4374	Identifier	keyFrameGraph
>4375	ExpressionStatement	 
>4376	CallExpression	keyFrameGraph -> idToKeyFrameMutex . lock ( )
>4377	ArgumentList	 
>4378	Callee	keyFrameGraph -> idToKeyFrameMutex . lock
>4379	MemberAccess	keyFrameGraph -> idToKeyFrameMutex . lock
>4380	Identifier	lock
>4381	PtrMemberAccess	keyFrameGraph -> idToKeyFrameMutex
>4382	Identifier	idToKeyFrameMutex
>4383	Identifier	keyFrameGraph
>4384	Condition	 
>4385	Identifier	doSlam
>4386	ExpressionStatement	 
>4387	CallExpression	currentKeyFrameMutex . unlock ( )
>4388	ArgumentList	 
>4389	Callee	currentKeyFrameMutex . unlock
>4390	MemberAccess	currentKeyFrameMutex . unlock
>4391	Identifier	unlock
>4392	Identifier	currentKeyFrameMutex
>4393	ExpressionStatement	 
>4394	CallExpression	keyFrameGraph -> addFrame ( currentKeyFrame . get ( ) )
>4395	ArgumentList	currentKeyFrame . get ( )
>4396	Argument	currentKeyFrame . get ( )
>4397	CallExpression	currentKeyFrame . get ( )
>4398	ArgumentList	 
>4399	Callee	currentKeyFrame . get
>4400	MemberAccess	currentKeyFrame . get
>4401	Identifier	get
>4402	Identifier	currentKeyFrame
>4403	Callee	keyFrameGraph -> addFrame
>4404	PtrMemberAccess	keyFrameGraph -> addFrame
>4405	Identifier	addFrame
>4406	Identifier	keyFrameGraph
>4407	ExpressionStatement	 
>4408	CallExpression	map -> initializeRandomly ( currentKeyFrame . get ( ) )
>4409	ArgumentList	currentKeyFrame . get ( )
>4410	Argument	currentKeyFrame . get ( )
>4411	CallExpression	currentKeyFrame . get ( )
>4412	ArgumentList	 
>4413	Callee	currentKeyFrame . get
>4414	MemberAccess	currentKeyFrame . get
>4415	Identifier	get
>4416	Identifier	currentKeyFrame
>4417	Callee	map -> initializeRandomly
>4418	PtrMemberAccess	map -> initializeRandomly
>4419	Identifier	initializeRandomly
>4420	Identifier	map
>4421	ExpressionStatement	 
>4422	CallExpression	currentKeyFrame . reset ( new Frame ( id , width , height , K , timeStamp , image ) )
>4423	ArgumentList	id , width , height , K , timeStamp , image
>4424	Argument	id , width , height , K , timeStamp , image
>4425	Expression	id , width , height , K , timeStamp , image
>4426	Expression	width , height , K , timeStamp , image
>4427	Expression	height , K , timeStamp , image
>4428	Expression	K , timeStamp , image
>4429	Expression	timeStamp , image
>4430	Identifier	image
>4431	Identifier	timeStamp
>4432	Identifier	K
>4433	Identifier	height
>4434	Identifier	width
>4435	Identifier	id
>4436	Callee	currentKeyFrame . reset
>4437	MemberAccess	currentKeyFrame . reset
>4438	Identifier	reset
>4439	Identifier	currentKeyFrame
>4440	ExpressionStatement	 
>4441	CallExpression	currentKeyFrameMutex . lock ( )
>4442	ArgumentList	 
>4443	Callee	currentKeyFrameMutex . lock
>4444	MemberAccess	currentKeyFrameMutex . lock
>4445	Identifier	lock
>4446	Identifier	currentKeyFrameMutex
>4447	IfStatement	if ( ! doMapping )
>4448	ExpressionStatement	 
>4449	CallExpression	printf ( \"WARNING
>4450	ArgumentList	\"WARNING
>4451	Argument	\"WARNING
>4452	PrimaryExpression	\"WARNING
>4453	Callee	printf
>4454	Identifier	printf
>4455	Condition	 
>4456	UnaryOp	! doMapping
>4457	Identifier	doMapping
>4458	UnaryOperator	!
>4459	ExpressionStatement	 
>4460	CallExpression	printf ( \"Doing Random initialization!\n\" )
>4461	ArgumentList	\"Doing Random initialization!\n\"
>4462	Argument	\"Doing Random initialization!\n\"
>4463	PrimaryExpression	\"Doing Random initialization!\n\"
>4464	Callee	printf
>4465	Identifier	printf
>4492	FunctionDef	SlamSystem 
>4493	ParameterList	uchar * image , unsigned int frameID , bool blockUntilMapped , double timestamp
>4494	Parameter	 
>4495	Identifier	timestamp
>4496	ParameterType	double
>4497	Parameter	 
>4498	Identifier	blockUntilMapped
>4499	ParameterType	bool
>4500	Parameter	 
>4501	Identifier	frameID
>4502	ParameterType	unsigned int
>4503	Parameter	 
>4504	Identifier	image
>4505	ParameterType	uchar *
>4506	ReturnType	void
>4507	CompoundStatement	 
>4508	IfStatement	if ( blockUntilMapped && trackingIsGood )
>4509	CompoundStatement	 
>4510	ExpressionStatement	 
>4511	CallExpression	lock . unlock ( )
>4512	ArgumentList	 
>4513	Callee	lock . unlock
>4514	MemberAccess	lock . unlock
>4515	Identifier	unlock
>4516	Identifier	lock
>4517	WhileStatement	while ( unmappedTrackedFrames . size ( ) > 0 )
>4518	CompoundStatement	 
>4519	ExpressionStatement	 
>4520	CallExpression	newFrameMappedSignal . wait ( lock )
>4521	ArgumentList	lock
>4522	Argument	lock
>4523	Identifier	lock
>4524	Callee	newFrameMappedSignal . wait
>4525	MemberAccess	newFrameMappedSignal . wait
>4526	Identifier	wait
>4527	Identifier	newFrameMappedSignal
>4528	Condition	 
>4529	RelationalExpression	unmappedTrackedFrames . size ( ) > 0
>4530	PrimaryExpression	0
>4531	CallExpression	unmappedTrackedFrames . size ( )
>4532	ArgumentList	 
>4533	Callee	unmappedTrackedFrames . size
>4534	MemberAccess	unmappedTrackedFrames . size
>4535	Identifier	size
>4536	Identifier	unmappedTrackedFrames
>4537	IdentifierDeclStatement	 
>4538	IdentifierDecl	lock ( newFrameMappedMutex )
>4539	Identifier	newFrameMappedMutex
>4540	Identifier	lock
>4541	IdentifierDeclType	boost 
>4542	Condition	 
>4543	AndExpression	blockUntilMapped && trackingIsGood
>4544	Identifier	trackingIsGood
>4545	Identifier	blockUntilMapped
>4546	ExpressionStatement	 
>4547	CallExpression	unmappedTrackedFramesMutex . unlock ( )
>4548	ArgumentList	 
>4549	Callee	unmappedTrackedFramesMutex . unlock
>4550	MemberAccess	unmappedTrackedFramesMutex . unlock
>4551	Identifier	unlock
>4552	Identifier	unmappedTrackedFramesMutex
>4553	ExpressionStatement	 
>4554	CallExpression	unmappedTrackedFramesSignal . notify_one ( )
>4555	ArgumentList	 
>4556	Callee	unmappedTrackedFramesSignal . notify_one
>4557	MemberAccess	unmappedTrackedFramesSignal . notify_one
>4558	Identifier	notify_one
>4559	Identifier	unmappedTrackedFramesSignal
>4560	IfStatement	if ( unmappedTrackedFrames . size ( ) < 50 || ( unmappedTrackedFrames . size ( ) < 100 && trackingNewFrame -> getTrackingParent ( ) \
>4561	ExpressionStatement	 
>4562	CallExpression	unmappedTrackedFrames . push_back ( trackingNewFrame )
>4563	ArgumentList	trackingNewFrame
>4564	Argument	trackingNewFrame
>4565	Identifier	trackingNewFrame
>4566	Callee	unmappedTrackedFrames . push_back
>4567	MemberAccess	unmappedTrackedFrames . push_back
>4568	Identifier	push_back
>4569	Identifier	unmappedTrackedFrames
>4570	Condition	 
>4571	OrExpression	unmappedTrackedFrames . size ( ) < 50 || ( unmappedTrackedFrames . size ( ) < 100 && trackingNewFrame \
>4572	AndExpression	unmappedTrackedFrames . size ( ) < 100 && trackingNewFrame -> getTrackingParent ( ) -> numMappedOnThisTotal < \
>4573	RelationalExpression	trackingNewFrame -> getTrackingParent ( ) -> numMappedOnThisTotal < 10
>4574	PrimaryExpression	10
>4575	PtrMemberAccess	trackingNewFrame -> getTrackingParent ( ) -> numMappedOnThisTotal
>4576	Identifier	numMappedOnThisTotal
>4577	CallExpression	trackingNewFrame -> getTrackingParent ( )
>4578	ArgumentList	 
>4579	Callee	trackingNewFrame -> getTrackingParent
>4580	PtrMemberAccess	trackingNewFrame -> getTrackingParent
>4581	Identifier	getTrackingParent
>4582	Identifier	trackingNewFrame
>4583	RelationalExpression	unmappedTrackedFrames . size ( ) < 100
>4584	PrimaryExpression	100
>4585	CallExpression	unmappedTrackedFrames . size ( )
>4586	ArgumentList	 
>4587	Callee	unmappedTrackedFrames . size
>4588	MemberAccess	unmappedTrackedFrames . size
>4589	Identifier	size
>4590	Identifier	unmappedTrackedFrames
>4591	RelationalExpression	unmappedTrackedFrames . size ( ) < 50
>4592	PrimaryExpression	50
>4593	CallExpression	unmappedTrackedFrames . size ( )
>4594	ArgumentList	 
>4595	Callee	unmappedTrackedFrames . size
>4596	MemberAccess	unmappedTrackedFrames . size
>4597	Identifier	size
>4598	Identifier	unmappedTrackedFrames
>4599	ExpressionStatement	 
>4600	CallExpression	unmappedTrackedFramesMutex . lock ( )
>4601	ArgumentList	 
>4602	Callee	unmappedTrackedFramesMutex . lock
>4603	MemberAccess	unmappedTrackedFramesMutex . lock
>4604	Identifier	lock
>4605	Identifier	unmappedTrackedFramesMutex
>4606	IfStatement	if ( ! my_createNewKeyframe && currentKeyFrame -> numMappedOnThisTotal > MIN_NUM_MAPPED )
>4607	CompoundStatement	 
>4608	IfStatement	if ( lastTrackingClosenessScore > minVal )
>4609	ElseStatement	else
>4610	CompoundStatement	 
>4611	IfStatement	if ( enablePrintDebugInfo && printKeyframeSelectionInfo )
>4612	ExpressionStatement	 
>4613	CallExpression	printf ( \"SKIPPD %d on %d! dist %.3f + usage %.3f = %.3f > 1\n\" , trackingNewFrame -> id ( ) , trackingNewFrame \
>4614	ArgumentList	\"SKIPPD %d on %d! dist %.3f + usage %.3f = %.3f > 1\n\"
>4615	Argument	trackableKeyFrameSearch -> getRefFrameScore ( dist . dot ( dist ) , tracker -> pointUsage )
>4616	CallExpression	trackableKeyFrameSearch -> getRefFrameScore ( dist . dot ( dist ) , tracker -> pointUsage )
>4617	ArgumentList	dist . dot ( dist )
>4618	Argument	tracker -> pointUsage
>4619	PtrMemberAccess	tracker -> pointUsage
>4620	Identifier	pointUsage
>4621	Identifier	tracker
>4622	Argument	dist . dot ( dist )
>4623	CallExpression	dist . dot ( dist )
>4624	ArgumentList	dist
>4625	Argument	dist
>4626	Identifier	dist
>4627	Callee	dist . dot
>4628	MemberAccess	dist . dot
>4629	Identifier	dot
>4630	Identifier	dist
>4631	Callee	trackableKeyFrameSearch -> getRefFrameScore
>4632	PtrMemberAccess	trackableKeyFrameSearch -> getRefFrameScore
>4633	Identifier	getRefFrameScore
>4634	Identifier	trackableKeyFrameSearch
>4635	Argument	tracker -> pointUsage
>4636	PtrMemberAccess	tracker -> pointUsage
>4637	Identifier	pointUsage
>4638	Identifier	tracker
>4639	Argument	dist . dot ( dist )
>4640	CallExpression	dist . dot ( dist )
>4641	ArgumentList	dist
>4642	Argument	dist
>4643	Identifier	dist
>4644	Callee	dist . dot
>4645	MemberAccess	dist . dot
>4646	Identifier	dot
>4647	Identifier	dist
>4648	Argument	trackingNewFrame -> getTrackingParent ( ) -> id ( )
>4649	CallExpression	trackingNewFrame -> getTrackingParent ( ) -> id ( )
>4650	ArgumentList	 
>4651	Callee	trackingNewFrame -> getTrackingParent ( ) -> id
>4652	PtrMemberAccess	trackingNewFrame -> getTrackingParent ( ) -> id
>4653	Identifier	id
>4654	CallExpression	trackingNewFrame -> getTrackingParent ( )
>4655	ArgumentList	 
>4656	Callee	trackingNewFrame -> getTrackingParent
>4657	PtrMemberAccess	trackingNewFrame -> getTrackingParent
>4658	Identifier	getTrackingParent
>4659	Identifier	trackingNewFrame
>4660	Argument	trackingNewFrame -> id ( )
>4661	CallExpression	trackingNewFrame -> id ( )
>4662	ArgumentList	 
>4663	Callee	trackingNewFrame -> id
>4664	PtrMemberAccess	trackingNewFrame -> id
>4665	Identifier	id
>4666	Identifier	trackingNewFrame
>4667	Argument	\"SKIPPD %d on %d! dist %.3f + usage %.3f = %.3f > 1\n\"
>4668	PrimaryExpression	\"SKIPPD %d on %d! dist %.3f + usage %.3f = %.3f > 1\n\"
>4669	Callee	printf
>4670	Identifier	printf
>4671	Condition	 
>4672	AndExpression	enablePrintDebugInfo && printKeyframeSelectionInfo
>4673	Identifier	printKeyframeSelectionInfo
>4674	Identifier	enablePrintDebugInfo
>4675	CompoundStatement	 
>4676	IfStatement	if ( enablePrintDebugInfo && printKeyframeSelectionInfo )
>4677	ExpressionStatement	 
>4678	CallExpression	printf ( \"SELECT %d on %d! dist %.3f + usage %.3f = %.3f > 1\n\" , trackingNewFrame -> id ( ) , trackingNewFrame \
>4679	ArgumentList	\"SELECT %d on %d! dist %.3f + usage %.3f = %.3f > 1\n\"
>4680	Argument	trackableKeyFrameSearch -> getRefFrameScore ( dist . dot ( dist ) , tracker -> pointUsage )
>4681	CallExpression	trackableKeyFrameSearch -> getRefFrameScore ( dist . dot ( dist ) , tracker -> pointUsage )
>4682	ArgumentList	dist . dot ( dist )
>4683	Argument	tracker -> pointUsage
>4684	PtrMemberAccess	tracker -> pointUsage
>4685	Identifier	pointUsage
>4686	Identifier	tracker
>4687	Argument	dist . dot ( dist )
>4688	CallExpression	dist . dot ( dist )
>4689	ArgumentList	dist
>4690	Argument	dist
>4691	Identifier	dist
>4692	Callee	dist . dot
>4693	MemberAccess	dist . dot
>4694	Identifier	dot
>4695	Identifier	dist
>4696	Callee	trackableKeyFrameSearch -> getRefFrameScore
>4697	PtrMemberAccess	trackableKeyFrameSearch -> getRefFrameScore
>4698	Identifier	getRefFrameScore
>4699	Identifier	trackableKeyFrameSearch
>4700	Argument	tracker -> pointUsage
>4701	PtrMemberAccess	tracker -> pointUsage
>4702	Identifier	pointUsage
>4703	Identifier	tracker
>4704	Argument	dist . dot ( dist )
>4705	CallExpression	dist . dot ( dist )
>4706	ArgumentList	dist
>4707	Argument	dist
>4708	Identifier	dist
>4709	Callee	dist . dot
>4710	MemberAccess	dist . dot
>4711	Identifier	dot
>4712	Identifier	dist
>4713	Argument	trackingNewFrame -> getTrackingParent ( ) -> id ( )
>4714	CallExpression	trackingNewFrame -> getTrackingParent ( ) -> id ( )
>4715	ArgumentList	 
>4716	Callee	trackingNewFrame -> getTrackingParent ( ) -> id
>4717	PtrMemberAccess	trackingNewFrame -> getTrackingParent ( ) -> id
>4718	Identifier	id
>4719	CallExpression	trackingNewFrame -> getTrackingParent ( )
>4720	ArgumentList	 
>4721	Callee	trackingNewFrame -> getTrackingParent
>4722	PtrMemberAccess	trackingNewFrame -> getTrackingParent
>4723	Identifier	getTrackingParent
>4724	Identifier	trackingNewFrame
>4725	Argument	trackingNewFrame -> id ( )
>4726	CallExpression	trackingNewFrame -> id ( )
>4727	ArgumentList	 
>4728	Callee	trackingNewFrame -> id
>4729	PtrMemberAccess	trackingNewFrame -> id
>4730	Identifier	id
>4731	Identifier	trackingNewFrame
>4732	Argument	\"SELECT %d on %d! dist %.3f + usage %.3f = %.3f > 1\n\"
>4733	PrimaryExpression	\"SELECT %d on %d! dist %.3f + usage %.3f = %.3f > 1\n\"
>4734	Callee	printf
>4735	Identifier	printf
>4736	Condition	 
>4737	AndExpression	enablePrintDebugInfo && printKeyframeSelectionInfo
>4738	Identifier	printKeyframeSelectionInfo
>4739	Identifier	enablePrintDebugInfo
>4740	ExpressionStatement	 
>4741	AssignmentExpr	createNewKeyFrame = true
>4742	Identifier	true
>4743	Identifier	createNewKeyFrame
>4744	Condition	 
>4745	RelationalExpression	lastTrackingClosenessScore > minVal
>4746	Identifier	minVal
>4747	Identifier	lastTrackingClosenessScore
>4748	ExpressionStatement	 
>4749	AssignmentExpr	lastTrackingClosenessScore = trackableKeyFrameSearch -> getRefFrameScore ( dist . dot ( dist ) , tracker \
>4750	CallExpression	trackableKeyFrameSearch -> getRefFrameScore ( dist . dot ( dist ) , tracker -> pointUsage )
>4751	ArgumentList	dist . dot ( dist )
>4752	Argument	tracker -> pointUsage
>4753	PtrMemberAccess	tracker -> pointUsage
>4754	Identifier	pointUsage
>4755	Identifier	tracker
>4756	Argument	dist . dot ( dist )
>4757	CallExpression	dist . dot ( dist )
>4758	ArgumentList	dist
>4759	Argument	dist
>4760	Identifier	dist
>4761	Callee	dist . dot
>4762	MemberAccess	dist . dot
>4763	Identifier	dot
>4764	Identifier	dist
>4765	Callee	trackableKeyFrameSearch -> getRefFrameScore
>4766	PtrMemberAccess	trackableKeyFrameSearch -> getRefFrameScore
>4767	Identifier	getRefFrameScore
>4768	Identifier	trackableKeyFrameSearch
>4769	Identifier	lastTrackingClosenessScore
>4770	IfStatement	if ( keyFrameGraph -> keyframesAll . size ( ) < INITIALIZATION_PHASE_COUNT )
>4771	ExpressionStatement	 
>4772	AssignmentExpr	minVal *= 0.7
>4773	PrimaryExpression	0.7
>4774	Identifier	minVal
>4775	Condition	 
>4776	RelationalExpression	keyFrameGraph -> keyframesAll . size ( ) < INITIALIZATION_PHASE_COUNT
>4777	Identifier	INITIALIZATION_PHASE_COUNT
>4778	CallExpression	keyFrameGraph -> keyframesAll . size ( )
>4779	ArgumentList	 
>4780	Callee	keyFrameGraph -> keyframesAll . size
>4781	MemberAccess	keyFrameGraph -> keyframesAll . size
>4782	Identifier	size
>4783	PtrMemberAccess	keyFrameGraph -> keyframesAll
>4784	Identifier	keyframesAll
>4785	Identifier	keyFrameGraph
>4786	IdentifierDeclStatement	 
>4787	IdentifierDecl	minVal = fmin ( 0.2f + keyFrameGraph -> keyframesAll . size ( ) * 0.8f / INITIALIZATION_PHASE_COUNT , 1.0f )
>4788	AssignmentExpr	minVal = fmin ( 0.2f + keyFrameGraph -> keyframesAll . size ( ) * 0.8f / INITIALIZATION_PHASE_COUNT , \
>4789	CallExpression	fmin ( 0.2f + keyFrameGraph -> keyframesAll . size ( ) * 0.8f / INITIALIZATION_PHASE_COUNT , 1.0f )
>4790	ArgumentList	0.2f + keyFrameGraph -> keyframesAll . size ( ) * 0.8f / INITIALIZATION_PHASE_COUNT
>4791	Argument	1.0f
>4792	PrimaryExpression	1.0f
>4793	Argument	0.2f + keyFrameGraph -> keyframesAll . size ( ) * 0.8f / INITIALIZATION_PHASE_COUNT
>4794	AdditiveExpression	0.2f + keyFrameGraph -> keyframesAll . size ( ) * 0.8f / INITIALIZATION_PHASE_COUNT
>4795	MultiplicativeExpression	keyFrameGraph -> keyframesAll . size ( ) * 0.8f / INITIALIZATION_PHASE_COUNT
>4796	MultiplicativeExpression	0.8f / INITIALIZATION_PHASE_COUNT
>4797	Identifier	INITIALIZATION_PHASE_COUNT
>4798	PrimaryExpression	0.8f
>4799	CallExpression	keyFrameGraph -> keyframesAll . size ( )
>4800	ArgumentList	 
>4801	Callee	keyFrameGraph -> keyframesAll . size
>4802	MemberAccess	keyFrameGraph -> keyframesAll . size
>4803	Identifier	size
>4804	PtrMemberAccess	keyFrameGraph -> keyframesAll
>4805	Identifier	keyframesAll
>4806	Identifier	keyFrameGraph
>4807	PrimaryExpression	0.2f
>4808	Callee	fmin
>4809	Identifier	fmin
>4810	Identifier	minVal
>4811	Identifier	minVal
>4812	IdentifierDeclType	float
>4813	IdentifierDeclStatement	 
>4814	IdentifierDecl	dist = newRefToFrame_poseUpdate . translation ( ) * currentKeyFrame -> meanIdepth
>4815	AssignmentExpr	dist = newRefToFrame_poseUpdate . translation ( ) * currentKeyFrame -> meanIdepth
>4816	MultiplicativeExpression	newRefToFrame_poseUpdate . translation ( ) * currentKeyFrame -> meanIdepth
>4817	PtrMemberAccess	currentKeyFrame -> meanIdepth
>4818	Identifier	meanIdepth
>4819	Identifier	currentKeyFrame
>4820	CallExpression	newRefToFrame_poseUpdate . translation ( )
>4821	ArgumentList	 
>4822	Callee	newRefToFrame_poseUpdate . translation
>4823	MemberAccess	newRefToFrame_poseUpdate . translation
>4824	Identifier	translation
>4825	Identifier	newRefToFrame_poseUpdate
>4826	Identifier	dist
>4827	Identifier	dist
>4828	IdentifierDeclType	Sophus 
>4829	Condition	 
>4830	AndExpression	! my_createNewKeyframe && currentKeyFrame -> numMappedOnThisTotal > MIN_NUM_MAPPED
>4831	RelationalExpression	currentKeyFrame -> numMappedOnThisTotal > MIN_NUM_MAPPED
>4832	Identifier	MIN_NUM_MAPPED
>4833	PtrMemberAccess	currentKeyFrame -> numMappedOnThisTotal
>4834	Identifier	numMappedOnThisTotal
>4835	Identifier	currentKeyFrame
>4836	UnaryOp	! my_createNewKeyframe
>4837	Identifier	my_createNewKeyframe
>4838	UnaryOperator	!
>4839	ExpressionStatement	 
>4840	AssignmentExpr	latestTrackedFrame = trackingNewFrame
>4841	Identifier	trackingNewFrame
>4842	Identifier	latestTrackedFrame
>4843	IfStatement	if ( outputWrapper != 0 )
>4844	CompoundStatement	 
>4845	ExpressionStatement	 
>4846	CallExpression	outputWrapper -> publishTrackedFrame ( trackingNewFrame . get ( ) )
>4847	ArgumentList	trackingNewFrame . get ( )
>4848	Argument	trackingNewFrame . get ( )
>4849	CallExpression	trackingNewFrame . get ( )
>4850	ArgumentList	 
>4851	Callee	trackingNewFrame . get
>4852	MemberAccess	trackingNewFrame . get
>4853	Identifier	get
>4854	Identifier	trackingNewFrame
>4855	Callee	outputWrapper -> publishTrackedFrame
>4856	PtrMemberAccess	outputWrapper -> publishTrackedFrame
>4857	Identifier	publishTrackedFrame
>4858	Identifier	outputWrapper
>4859	Condition	 
>4860	EqualityExpression	outputWrapper != 0
>4861	PrimaryExpression	0
>4862	Identifier	outputWrapper
>4863	ExpressionStatement	 
>4864	CallExpression	keyFrameGraph -> addFrame ( trackingNewFrame . get ( ) )
>4865	ArgumentList	trackingNewFrame . get ( )
>4866	Argument	trackingNewFrame . get ( )
>4867	CallExpression	trackingNewFrame . get ( )
>4868	ArgumentList	 
>4869	Callee	trackingNewFrame . get
>4870	MemberAccess	trackingNewFrame . get
>4871	Identifier	get
>4872	Identifier	trackingNewFrame
>4873	Callee	keyFrameGraph -> addFrame
>4874	PtrMemberAccess	keyFrameGraph -> addFrame
>4875	Identifier	addFrame
>4876	Identifier	keyFrameGraph
>4877	IfStatement	if ( plotTracking )
>4878	CompoundStatement	 
>4879	ExpressionStatement	 
>4880	CallExpression	outputWrapper -> publishDebugInfo ( data )
>4881	ArgumentList	data
>4882	Argument	data
>4883	Identifier	data
>4884	Callee	outputWrapper -> publishDebugInfo
>4885	PtrMemberAccess	outputWrapper -> publishDebugInfo
>4886	Identifier	publishDebugInfo
>4887	Identifier	outputWrapper
>4888	ExpressionStatement	 
>4889	AssignmentExpr	data [ 7 ] = tracker -> affineEstimation_b
>4890	PtrMemberAccess	tracker -> affineEstimation_b
>4891	Identifier	affineEstimation_b
>4892	Identifier	tracker
>4893	ArrayIndexing	data [ 7 ]
>4894	PrimaryExpression	7
>4895	Identifier	data
>4896	ExpressionStatement	 
>4897	AssignmentExpr	data [ 6 ] = tracker -> affineEstimation_a
>4898	PtrMemberAccess	tracker -> affineEstimation_a
>4899	Identifier	affineEstimation_a
>4900	Identifier	tracker
>4901	ArrayIndexing	data [ 6 ]
>4902	PrimaryExpression	6
>4903	Identifier	data
>4904	ExpressionStatement	 
>4905	AssignmentExpr	data [ 5 ] = tracker -> pointUsage
>4906	PtrMemberAccess	tracker -> pointUsage
>4907	Identifier	pointUsage
>4908	Identifier	tracker
>4909	ArrayIndexing	data [ 5 ]
>4910	PrimaryExpression	5
>4911	Identifier	data
>4912	ExpressionStatement	 
>4913	AssignmentExpr	data [ 4 ] = 4 * tracker -> lastGoodCount / ( width * height )
>4914	MultiplicativeExpression	4 * tracker -> lastGoodCount / ( width * height )
>4915	MultiplicativeExpression	tracker -> lastGoodCount / ( width * height )
>4916	MultiplicativeExpression	width * height
>4917	Identifier	height
>4918	Identifier	width
>4919	PtrMemberAccess	tracker -> lastGoodCount
>4920	Identifier	lastGoodCount
>4921	Identifier	tracker
>4922	PrimaryExpression	4
>4923	ArrayIndexing	data [ 4 ]
>4924	PrimaryExpression	4
>4925	Identifier	data
>4926	ExpressionStatement	 
>4927	AssignmentExpr	data [ 3 ] = tracker -> lastGoodCount / ( tracker -> lastGoodCount + tracker -> lastBadCount )
>4928	MultiplicativeExpression	tracker -> lastGoodCount / ( tracker -> lastGoodCount + tracker -> lastBadCount )
>4929	AdditiveExpression	tracker -> lastGoodCount + tracker -> lastBadCount
>4930	PtrMemberAccess	tracker -> lastBadCount
>4931	Identifier	lastBadCount
>4932	Identifier	tracker
>4933	PtrMemberAccess	tracker -> lastGoodCount
>4934	Identifier	lastGoodCount
>4935	Identifier	tracker
>4936	PtrMemberAccess	tracker -> lastGoodCount
>4937	Identifier	lastGoodCount
>4938	Identifier	tracker
>4939	ArrayIndexing	data [ 3 ]
>4940	PrimaryExpression	3
>4941	Identifier	data
>4942	ExpressionStatement	 
>4943	AssignmentExpr	data [ 0 ] = tracker -> lastResidual
>4944	PtrMemberAccess	tracker -> lastResidual
>4945	Identifier	lastResidual
>4946	Identifier	tracker
>4947	ArrayIndexing	data [ 0 ]
>4948	PrimaryExpression	0
>4949	Identifier	data
>4950	ExpressionStatement	 
>4951	CallExpression	data . setZero ( )
>4952	ArgumentList	 
>4953	Callee	data . setZero
>4954	MemberAccess	data . setZero
>4955	Identifier	setZero
>4956	Identifier	data
>4957	IdentifierDeclStatement	 
>4958	IdentifierDecl	data
>4959	Identifier	data
>4960	IdentifierDeclType	Eigen 
>4961	Condition	 
>4962	Identifier	plotTracking
>4963	IfStatement	if ( manualTrackingLossIndicated || tracker -> diverged || ( keyFrameGraph -> keyframesAll . size ( ) > INITIALIZATION_\
>4964	CompoundStatement	 
>4965	ReturnStatement	 
>4966	ExpressionStatement	 
>4967	AssignmentExpr	manualTrackingLossIndicated = false
>4968	Identifier	false
>4969	Identifier	manualTrackingLossIndicated
>4970	ExpressionStatement	 
>4971	CallExpression	unmappedTrackedFramesMutex . unlock ( )
>4972	ArgumentList	 
>4973	Callee	unmappedTrackedFramesMutex . unlock
>4974	MemberAccess	unmappedTrackedFramesMutex . unlock
>4975	Identifier	unlock
>4976	Identifier	unmappedTrackedFramesMutex
>4977	ExpressionStatement	 
>4978	CallExpression	unmappedTrackedFramesSignal . notify_one ( )
>4979	ArgumentList	 
>4980	Callee	unmappedTrackedFramesSignal . notify_one
>4981	MemberAccess	unmappedTrackedFramesSignal . notify_one
>4982	Identifier	notify_one
>4983	Identifier	unmappedTrackedFramesSignal
>4984	ExpressionStatement	 
>4985	CallExpression	unmappedTrackedFramesMutex . lock ( )
>4986	ArgumentList	 
>4987	Callee	unmappedTrackedFramesMutex . lock
>4988	MemberAccess	unmappedTrackedFramesMutex . lock
>4989	Identifier	lock
>4990	Identifier	unmappedTrackedFramesMutex
>4991	ExpressionStatement	 
>4992	AssignmentExpr	nextRelocIdx = - 1
>4993	UnaryOp	- 1
>4994	PrimaryExpression	1
>4995	UnaryOperator	-
>4996	Identifier	nextRelocIdx
>4997	ExpressionStatement	 
>4998	AssignmentExpr	trackingIsGood = false
>4999	Identifier	false
>5000	Identifier	trackingIsGood
>5001	ExpressionStatement	 
>5002	CallExpression	trackingReference -> invalidate ( )
>5003	ArgumentList	 
>5004	Callee	trackingReference -> invalidate
>5005	PtrMemberAccess	trackingReference -> invalidate
>5006	Identifier	invalidate
>5007	Identifier	trackingReference
>5008	ExpressionStatement	 
>5009	CallExpression	printf ( \"TRACKING LOST for frame %d (%1.2f%% good Points, which is %1.2f%% of available points, %s)!\n\" , trackingNewFrame \
>5010	ArgumentList	\"TRACKING LOST for frame %d (%1.2f%% good Points, which is %1.2f%% of available points, %s)!\n\"
>5011	Argument	tracker -> diverged ? \"DIVERGED\" 
>5012	ConditionalExpression	tracker -> diverged ? \"DIVERGED\" 
>5013	PrimaryExpression	\"NOT DIVERGED\"
>5014	PrimaryExpression	\"DIVERGED\"
>5015	Condition	tracker -> diverged
>5016	PtrMemberAccess	tracker -> diverged
>5017	Identifier	diverged
>5018	Identifier	tracker
>5019	Argument	100 * tracking_lastGoodPerBad
>5020	MultiplicativeExpression	100 * tracking_lastGoodPerBad
>5021	Identifier	tracking_lastGoodPerBad
>5022	PrimaryExpression	100
>5023	Argument	100 * tracking_lastGoodPerTotal
>5024	MultiplicativeExpression	100 * tracking_lastGoodPerTotal
>5025	Identifier	tracking_lastGoodPerTotal
>5026	PrimaryExpression	100
>5027	Argument	trackingNewFrame -> id ( )
>5028	CallExpression	trackingNewFrame -> id ( )
>5029	ArgumentList	 
>5030	Callee	trackingNewFrame -> id
>5031	PtrMemberAccess	trackingNewFrame -> id
>5032	Identifier	id
>5033	Identifier	trackingNewFrame
>5034	Argument	\"TRACKING LOST for frame %d (%1.2f%% good Points, which is %1.2f%% of available points, %s)!\n\"
>5035	PrimaryExpression	\"TRACKING LOST for frame %d (%1.2f%% good Points, which is %1.2f%% of available points, %s)!\n\"
>5036	Callee	printf
>5037	Identifier	printf
>5038	Condition	 
>5039	OrExpression	manualTrackingLossIndicated || tracker -> diverged || ( keyFrameGraph -> keyframesAll . size ( ) > INITIALIZATION_\
>5040	OrExpression	tracker -> diverged || ( keyFrameGraph -> keyframesAll . size ( ) > INITIALIZATION_PHASE_COUNT && ! \
>5041	AndExpression	keyFrameGraph -> keyframesAll . size ( ) > INITIALIZATION_PHASE_COUNT && ! tracker -> trackingWasGood
>5042	UnaryOp	! tracker -> trackingWasGood
>5043	PtrMemberAccess	tracker -> trackingWasGood
>5044	Identifier	trackingWasGood
>5045	Identifier	tracker
>5046	UnaryOperator	!
>5047	RelationalExpression	keyFrameGraph -> keyframesAll . size ( ) > INITIALIZATION_PHASE_COUNT
>5048	Identifier	INITIALIZATION_PHASE_COUNT
>5049	CallExpression	keyFrameGraph -> keyframesAll . size ( )
>5050	ArgumentList	 
>5051	Callee	keyFrameGraph -> keyframesAll . size
>5052	MemberAccess	keyFrameGraph -> keyframesAll . size
>5053	Identifier	size
>5054	PtrMemberAccess	keyFrameGraph -> keyframesAll
>5055	Identifier	keyframesAll
>5056	Identifier	keyFrameGraph
>5057	PtrMemberAccess	tracker -> diverged
>5058	Identifier	diverged
>5059	Identifier	tracker
>5060	Identifier	manualTrackingLossIndicated
>5061	ExpressionStatement	 
>5062	AssignmentExpr	tracking_lastGoodPerTotal = tracker -> lastGoodCount / ( trackingNewFrame -> width ( SE3TRACKING_MIN_\
>5063	MultiplicativeExpression	tracker -> lastGoodCount / ( trackingNewFrame -> width ( SE3TRACKING_MIN_LEVEL ) * trackingNewFrame -> \
>5064	MultiplicativeExpression	trackingNewFrame -> width ( SE3TRACKING_MIN_LEVEL ) * trackingNewFrame -> height ( SE3TRACKING_MIN_LEVEL )
>5065	CallExpression	trackingNewFrame -> height ( SE3TRACKING_MIN_LEVEL )
>5066	ArgumentList	SE3TRACKING_MIN_LEVEL
>5067	Argument	SE3TRACKING_MIN_LEVEL
>5068	Identifier	SE3TRACKING_MIN_LEVEL
>5069	Callee	trackingNewFrame -> height
>5070	PtrMemberAccess	trackingNewFrame -> height
>5071	Identifier	height
>5072	Identifier	trackingNewFrame
>5073	CallExpression	trackingNewFrame -> width ( SE3TRACKING_MIN_LEVEL )
>5074	ArgumentList	SE3TRACKING_MIN_LEVEL
>5075	Argument	SE3TRACKING_MIN_LEVEL
>5076	Identifier	SE3TRACKING_MIN_LEVEL
>5077	Callee	trackingNewFrame -> width
>5078	PtrMemberAccess	trackingNewFrame -> width
>5079	Identifier	width
>5080	Identifier	trackingNewFrame
>5081	PtrMemberAccess	tracker -> lastGoodCount
>5082	Identifier	lastGoodCount
>5083	Identifier	tracker
>5084	Identifier	tracking_lastGoodPerTotal
>5085	ExpressionStatement	 
>5086	AssignmentExpr	tracking_lastGoodPerBad = tracker -> lastGoodCount / ( tracker -> lastGoodCount + tracker -> lastBadCount )
>5087	MultiplicativeExpression	tracker -> lastGoodCount / ( tracker -> lastGoodCount + tracker -> lastBadCount )
>5088	AdditiveExpression	tracker -> lastGoodCount + tracker -> lastBadCount
>5089	PtrMemberAccess	tracker -> lastBadCount
>5090	Identifier	lastBadCount
>5091	Identifier	tracker
>5092	PtrMemberAccess	tracker -> lastGoodCount
>5093	Identifier	lastGoodCount
>5094	Identifier	tracker
>5095	PtrMemberAccess	tracker -> lastGoodCount
>5096	Identifier	lastGoodCount
>5097	Identifier	tracker
>5098	Identifier	tracking_lastGoodPerBad
>5099	ExpressionStatement	 
>5100	AssignmentExpr	tracking_lastUsage = tracker -> pointUsage
>5101	PtrMemberAccess	tracker -> pointUsage
>5102	Identifier	pointUsage
>5103	Identifier	tracker
>5104	Identifier	tracking_lastUsage
>5105	ExpressionStatement	 
>5106	AssignmentExpr	tracking_lastResidual = tracker -> lastResidual
>5107	PtrMemberAccess	tracker -> lastResidual
>5108	Identifier	lastResidual
>5109	Identifier	tracker
>5110	Identifier	tracking_lastResidual
>5111	ExpressionStatement	 
>5112	IncDecOp	nTrackFrame ++
>5113	IncDec	++
>5114	Identifier	nTrackFrame
>5115	ExpressionStatement	 
>5116	AssignmentExpr	msTrackFrame = 0.9 * msTrackFrame + 0.1 * ( ( tv_end . tv_sec - tv_start . tv_sec ) * 1000.0f + ( tv_\
>5117	AdditiveExpression	0.9 * msTrackFrame + 0.1 * ( ( tv_end . tv_sec - tv_start . tv_sec ) * 1000.0f + ( tv_end . tv_usec - \
>5118	MultiplicativeExpression	0.1 * ( ( tv_end . tv_sec - tv_start . tv_sec ) * 1000.0f + ( tv_end . tv_usec - tv_start . tv_usec ) / \
>5119	AdditiveExpression	( tv_end . tv_sec - tv_start . tv_sec ) * 1000.0f + ( tv_end . tv_usec - tv_start . tv_usec ) / 1000.0f
>5120	MultiplicativeExpression	( tv_end . tv_usec - tv_start . tv_usec ) / 1000.0f
>5121	PrimaryExpression	1000.0f
>5122	AdditiveExpression	tv_end . tv_usec - tv_start . tv_usec
>5123	MemberAccess	tv_start . tv_usec
>5124	Identifier	tv_usec
>5125	Identifier	tv_start
>5126	MemberAccess	tv_end . tv_usec
>5127	Identifier	tv_usec
>5128	Identifier	tv_end
>5129	MultiplicativeExpression	( tv_end . tv_sec - tv_start . tv_sec ) * 1000.0f
>5130	PrimaryExpression	1000.0f
>5131	AdditiveExpression	tv_end . tv_sec - tv_start . tv_sec
>5132	MemberAccess	tv_start . tv_sec
>5133	Identifier	tv_sec
>5134	Identifier	tv_start
>5135	MemberAccess	tv_end . tv_sec
>5136	Identifier	tv_sec
>5137	Identifier	tv_end
>5138	PrimaryExpression	0.1
>5139	MultiplicativeExpression	0.9 * msTrackFrame
>5140	Identifier	msTrackFrame
>5141	PrimaryExpression	0.9
>5142	Identifier	msTrackFrame
>5143	ExpressionStatement	 
>5144	CallExpression	gettimeofday ( & tv_end , NULL )
>5145	ArgumentList	& tv_end
>5146	Argument	NULL
>5147	Identifier	NULL
>5148	Argument	& tv_end
>5149	UnaryOp	& tv_end
>5150	Identifier	tv_end
>5151	UnaryOperator	&
>5152	Callee	gettimeofday
>5153	Identifier	gettimeofday
>5154	IdentifierDeclStatement	 
>5155	IdentifierDecl	newRefToFrame_poseUpdate = tracker -> trackFrame ( trackingReference , trackingNewFrame . get ( ) , frameToReference_\
>5156	AssignmentExpr	newRefToFrame_poseUpdate = tracker -> trackFrame ( trackingReference , trackingNewFrame . get ( ) , frameToReference_\
>5157	CallExpression	tracker -> trackFrame ( trackingReference , trackingNewFrame . get ( ) , frameToReference_initialEstimate )
>5158	ArgumentList	trackingReference
>5159	Argument	frameToReference_initialEstimate
>5160	Identifier	frameToReference_initialEstimate
>5161	Argument	trackingNewFrame . get ( )
>5162	CallExpression	trackingNewFrame . get ( )
>5163	ArgumentList	 
>5164	Callee	trackingNewFrame . get
>5165	MemberAccess	trackingNewFrame . get
>5166	Identifier	get
>5167	Identifier	trackingNewFrame
>5168	Argument	trackingReference
>5169	Identifier	trackingReference
>5170	Callee	tracker -> trackFrame
>5171	PtrMemberAccess	tracker -> trackFrame
>5172	Identifier	trackFrame
>5173	Identifier	tracker
>5174	Identifier	newRefToFrame_poseUpdate
>5175	Identifier	newRefToFrame_poseUpdate
>5176	IdentifierDeclType	SE3
>5177	ExpressionStatement	 
>5178	CallExpression	gettimeofday ( & tv_start , NULL )
>5179	ArgumentList	& tv_start
>5180	Argument	NULL
>5181	Identifier	NULL
>5182	Argument	& tv_start
>5183	UnaryOp	& tv_start
>5184	Identifier	tv_start
>5185	UnaryOperator	&
>5186	Callee	gettimeofday
>5187	Identifier	gettimeofday
>5188	IdentifierDeclStatement	 
>5189	IdentifierDecl	tv_end
>5190	Identifier	tv_end
>5191	IdentifierDeclType	struct timeval
>5192	IdentifierDecl	tv_start
>5193	Identifier	tv_start
>5194	IdentifierDeclType	struct timeval
>5195	ExpressionStatement	 
>5196	CallExpression	poseConsistencyMutex . unlock_shared ( )
>5197	ArgumentList	 
>5198	Callee	poseConsistencyMutex . unlock_shared
>5199	MemberAccess	poseConsistencyMutex . unlock_shared
>5200	Identifier	unlock_shared
>5201	Identifier	poseConsistencyMutex
>5202	IdentifierDeclStatement	 
>5203	IdentifierDecl	frameToReference_initialEstimate = se3FromSim3 ( trackingReferencePose -> getCamToWorld ( ) . inverse ( ) * keyFrameGraph \
>5204	AssignmentExpr	frameToReference_initialEstimate = se3FromSim3 ( trackingReferencePose -> getCamToWorld ( ) . inverse ( ) * \
>5205	CallExpression	se3FromSim3 ( trackingReferencePose -> getCamToWorld ( ) . inverse ( ) * keyFrameGraph -> allFramePoses . back ( ) \
>5206	ArgumentList	trackingReferencePose -> getCamToWorld ( ) . inverse ( ) * keyFrameGraph -> allFramePoses . back ( ) -> getCamToWorld ( )
>5207	Argument	trackingReferencePose -> getCamToWorld ( ) . inverse ( ) * keyFrameGraph -> allFramePoses . back ( ) -> getCamToWorld ( )
>5208	MultiplicativeExpression	trackingReferencePose -> getCamToWorld ( ) . inverse ( ) * keyFrameGraph -> allFramePoses . back ( ) \
>5209	CallExpression	keyFrameGraph -> allFramePoses . back ( ) -> getCamToWorld ( )
>5210	ArgumentList	 
>5211	Callee	keyFrameGraph -> allFramePoses . back ( ) -> getCamToWorld
>5212	PtrMemberAccess	keyFrameGraph -> allFramePoses . back ( ) -> getCamToWorld
>5213	Identifier	getCamToWorld
>5214	CallExpression	keyFrameGraph -> allFramePoses . back ( )
>5215	ArgumentList	 
>5216	Callee	keyFrameGraph -> allFramePoses . back
>5217	MemberAccess	keyFrameGraph -> allFramePoses . back
>5218	Identifier	back
>5219	PtrMemberAccess	keyFrameGraph -> allFramePoses
>5220	Identifier	allFramePoses
>5221	Identifier	keyFrameGraph
>5222	CallExpression	trackingReferencePose -> getCamToWorld ( ) . inverse ( )
>5223	ArgumentList	 
>5224	Callee	trackingReferencePose -> getCamToWorld ( ) . inverse
>5225	MemberAccess	trackingReferencePose -> getCamToWorld ( ) . inverse
>5226	Identifier	inverse
>5227	CallExpression	trackingReferencePose -> getCamToWorld ( )
>5228	ArgumentList	 
>5229	Callee	trackingReferencePose -> getCamToWorld
>5230	PtrMemberAccess	trackingReferencePose -> getCamToWorld
>5231	Identifier	getCamToWorld
>5232	Identifier	trackingReferencePose
>5233	Callee	se3FromSim3
>5234	Identifier	se3FromSim3
>5235	Identifier	frameToReference_initialEstimate
>5236	Identifier	frameToReference_initialEstimate
>5237	IdentifierDeclType	SE3
>5238	ExpressionStatement	 
>5239	CallExpression	poseConsistencyMutex . lock_shared ( )
>5240	ArgumentList	 
>5241	Callee	poseConsistencyMutex . lock_shared
>5242	MemberAccess	poseConsistencyMutex . lock_shared
>5243	Identifier	lock_shared
>5244	Identifier	poseConsistencyMutex
>5245	IfStatement	if ( enablePrintDebugInfo && printThreadingInfo )
>5246	ExpressionStatement	 
>5247	CallExpression	printf ( \"TRACKING %d on %d\n\" , trackingNewFrame -> id ( ) , trackingReferencePose -> frameID )
>5248	ArgumentList	\"TRACKING %d on %d\n\"
>5249	Argument	trackingReferencePose -> frameID
>5250	PtrMemberAccess	trackingReferencePose -> frameID
>5251	Identifier	frameID
>5252	Identifier	trackingReferencePose
>5253	Argument	trackingNewFrame -> id ( )
>5254	CallExpression	trackingNewFrame -> id ( )
>5255	ArgumentList	 
>5256	Callee	trackingNewFrame -> id
>5257	PtrMemberAccess	trackingNewFrame -> id
>5258	Identifier	id
>5259	Identifier	trackingNewFrame
>5260	Argument	\"TRACKING %d on %d\n\"
>5261	PrimaryExpression	\"TRACKING %d on %d\n\"
>5262	Callee	printf
>5263	Identifier	printf
>5264	Condition	 
>5265	AndExpression	enablePrintDebugInfo && printThreadingInfo
>5266	Identifier	printThreadingInfo
>5267	Identifier	enablePrintDebugInfo
>5268	ExpressionStatement	 
>5269	CallExpression	currentKeyFrameMutex . unlock ( )
>5270	ArgumentList	 
>5271	Callee	currentKeyFrameMutex . unlock
>5272	MemberAccess	currentKeyFrameMutex . unlock
>5273	Identifier	unlock
>5274	Identifier	currentKeyFrameMutex
>5275	IdentifierDeclStatement	 
>5276	IdentifierDecl	* trackingReferencePose = trackingReference -> keyframe -> pose
>5277	AssignmentExpr	* trackingReferencePose = trackingReference -> keyframe -> pose
>5278	PtrMemberAccess	trackingReference -> keyframe -> pose
>5279	Identifier	pose
>5280	PtrMemberAccess	trackingReference -> keyframe
>5281	Identifier	keyframe
>5282	Identifier	trackingReference
>5283	Identifier	trackingReferencePose
>5284	Identifier	trackingReferencePose
>5285	IdentifierDeclType	FramePoseStruct *
>5286	IfStatement	if ( trackingReference -> keyframe != currentKeyFrame . get ( ) || currentKeyFrame -> depthHasBeenUpdatedFlag )
>5287	CompoundStatement	 
>5288	ExpressionStatement	 
>5289	AssignmentExpr	trackingReferenceFrameSharedPT = currentKeyFrame
>5290	Identifier	currentKeyFrame
>5291	Identifier	trackingReferenceFrameSharedPT
>5292	ExpressionStatement	 
>5293	AssignmentExpr	currentKeyFrame -> depthHasBeenUpdatedFlag = false
>5294	Identifier	false
>5295	PtrMemberAccess	currentKeyFrame -> depthHasBeenUpdatedFlag
>5296	Identifier	depthHasBeenUpdatedFlag
>5297	Identifier	currentKeyFrame
>5298	ExpressionStatement	 
>5299	CallExpression	trackingReference -> importFrame ( currentKeyFrame . get ( ) )
>5300	ArgumentList	currentKeyFrame . get ( )
>5301	Argument	currentKeyFrame . get ( )
>5302	CallExpression	currentKeyFrame . get ( )
>5303	ArgumentList	 
>5304	Callee	currentKeyFrame . get
>5305	MemberAccess	currentKeyFrame . get
>5306	Identifier	get
>5307	Identifier	currentKeyFrame
>5308	Callee	trackingReference -> importFrame
>5309	PtrMemberAccess	trackingReference -> importFrame
>5310	Identifier	importFrame
>5311	Identifier	trackingReference
>5312	Condition	 
>5313	OrExpression	trackingReference -> keyframe != currentKeyFrame . get ( ) || currentKeyFrame -> depthHasBeenUpdatedFlag
>5314	PtrMemberAccess	currentKeyFrame -> depthHasBeenUpdatedFlag
>5315	Identifier	depthHasBeenUpdatedFlag
>5316	Identifier	currentKeyFrame
>5317	EqualityExpression	trackingReference -> keyframe != currentKeyFrame . get ( )
>5318	CallExpression	currentKeyFrame . get ( )
>5319	ArgumentList	 
>5320	Callee	currentKeyFrame . get
>5321	MemberAccess	currentKeyFrame . get
>5322	Identifier	get
>5323	Identifier	currentKeyFrame
>5324	PtrMemberAccess	trackingReference -> keyframe
>5325	Identifier	keyframe
>5326	Identifier	trackingReference
>5327	IdentifierDeclStatement	 
>5328	IdentifierDecl	my_createNewKeyframe = createNewKeyFrame
>5329	AssignmentExpr	my_createNewKeyframe = createNewKeyFrame
>5330	Identifier	createNewKeyFrame
>5331	Identifier	createNewKeyFrame
>5332	Identifier	my_createNewKeyframe
>5333	IdentifierDeclType	bool
>5334	ExpressionStatement	 
>5335	CallExpression	currentKeyFrameMutex . lock ( )
>5336	ArgumentList	 
>5337	Callee	currentKeyFrameMutex . lock
>5338	MemberAccess	currentKeyFrameMutex . lock
>5339	Identifier	lock
>5340	Identifier	currentKeyFrameMutex
>5341	IfStatement	if ( ! trackingIsGood )
>5342	CompoundStatement	 
>5343	ReturnStatement	 
>5344	ExpressionStatement	 
>5345	CallExpression	unmappedTrackedFramesMutex . unlock ( )
>5346	ArgumentList	 
>5347	Callee	unmappedTrackedFramesMutex . unlock
>5348	MemberAccess	unmappedTrackedFramesMutex . unlock
>5349	Identifier	unlock
>5350	Identifier	unmappedTrackedFramesMutex
>5351	ExpressionStatement	 
>5352	CallExpression	unmappedTrackedFramesSignal . notify_one ( )
>5353	ArgumentList	 
>5354	Callee	unmappedTrackedFramesSignal . notify_one
>5355	MemberAccess	unmappedTrackedFramesSignal . notify_one
>5356	Identifier	notify_one
>5357	Identifier	unmappedTrackedFramesSignal
>5358	ExpressionStatement	 
>5359	CallExpression	unmappedTrackedFramesMutex . lock ( )
>5360	ArgumentList	 
>5361	Callee	unmappedTrackedFramesMutex . lock
>5362	MemberAccess	unmappedTrackedFramesMutex . lock
>5363	Identifier	lock
>5364	Identifier	unmappedTrackedFramesMutex
>5365	ExpressionStatement	 
>5366	CallExpression	relocalizer . updateCurrentFrame ( trackingNewFrame )
>5367	ArgumentList	trackingNewFrame
>5368	Argument	trackingNewFrame
>5369	Identifier	trackingNewFrame
>5370	Callee	relocalizer . updateCurrentFrame
>5371	MemberAccess	relocalizer . updateCurrentFrame
>5372	Identifier	updateCurrentFrame
>5373	Identifier	relocalizer
>5374	Condition	 
>5375	UnaryOp	! trackingIsGood
>5376	Identifier	trackingIsGood
>5377	UnaryOperator	!
>5378	IdentifierDeclStatement	 
>5379	IdentifierDecl	trackingNewFrame ( new Frame ( frameID , width , height , K , timestamp , image ) )
>5380	Expression	frameID , width , height , K , timestamp , image
>5381	Expression	width , height , K , timestamp , image
>5382	Expression	height , K , timestamp , image
>5383	Expression	K , timestamp , image
>5384	Expression	timestamp , image
>5385	Identifier	image
>5386	Identifier	timestamp
>5387	Identifier	K
>5388	Identifier	height
>5389	Identifier	width
>5390	Identifier	frameID
>5391	Identifier	trackingNewFrame
>5392	IdentifierDeclType	std 
>5506	FunctionDef	SlamSystem 
>5507	ParameterList	TrackingReference * A , TrackingReference * B , int lvlStart , int lvlEnd , bool useSSE , Sim3 & AtoB , Sim3 & BtoA , \
>5508	Parameter	 
>5509	Identifier	e2
>5510	ParameterType	KFConstraintStruct *
>5511	Parameter	 
>5512	Identifier	e1
>5513	ParameterType	KFConstraintStruct *
>5514	Parameter	 
>5515	Identifier	BtoA
>5516	ParameterType	Sim3 &
>5517	Parameter	 
>5518	Identifier	AtoB
>5519	ParameterType	Sim3 &
>5520	Parameter	 
>5521	Identifier	useSSE
>5522	ParameterType	bool
>5523	Parameter	 
>5524	Identifier	lvlEnd
>5525	ParameterType	int
>5526	Parameter	 
>5527	Identifier	lvlStart
>5528	ParameterType	int
>5529	Parameter	 
>5530	Identifier	B
>5531	ParameterType	TrackingReference *
>5532	Parameter	 
>5533	Identifier	A
>5534	ParameterType	TrackingReference *
>5535	ReturnType	float
>5536	CompoundStatement	 
>5537	ReturnStatement	 
>5538	Identifier	reciprocalConsistency
>5539	IfStatement	if ( e1 != 0 && e2 != 0 )
>5540	CompoundStatement	 
>5541	ExpressionStatement	 
>5542	AssignmentExpr	e1 -> reciprocalConsistency = e2 -> reciprocalConsistency = reciprocalConsistency
>5543	AssignmentExpr	e2 -> reciprocalConsistency = reciprocalConsistency
>5544	Identifier	reciprocalConsistency
>5545	PtrMemberAccess	e2 -> reciprocalConsistency
>5546	Identifier	reciprocalConsistency
>5547	Identifier	e2
>5548	PtrMemberAccess	e1 -> reciprocalConsistency
>5549	Identifier	reciprocalConsistency
>5550	Identifier	e1
>5551	ExpressionStatement	 
>5552	AssignmentExpr	e2 -> usage = AtoB_usage
>5553	Identifier	AtoB_usage
>5554	PtrMemberAccess	e2 -> usage
>5555	Identifier	usage
>5556	Identifier	e2
>5557	ExpressionStatement	 
>5558	AssignmentExpr	e2 -> meanResidualP = AtoB_meanPResidual
>5559	Identifier	AtoB_meanPResidual
>5560	PtrMemberAccess	e2 -> meanResidualP
>5561	Identifier	meanResidualP
>5562	Identifier	e2
>5563	ExpressionStatement	 
>5564	AssignmentExpr	e2 -> meanResidualD = AtoB_meanDResidual
>5565	Identifier	AtoB_meanDResidual
>5566	PtrMemberAccess	e2 -> meanResidualD
>5567	Identifier	meanResidualD
>5568	Identifier	e2
>5569	ExpressionStatement	 
>5570	AssignmentExpr	e2 -> meanResidual = AtoB_meanResidual
>5571	Identifier	AtoB_meanResidual
>5572	PtrMemberAccess	e2 -> meanResidual
>5573	Identifier	meanResidual
>5574	Identifier	e2
>5575	ExpressionStatement	 
>5576	Statement	 
>5577	Statement	 
>5578	Statement	 
>5579	Statement	 
>5580	Statement	 
>5581	Statement	 
>5582	Statement	 
>5583	Statement	 
>5584	Statement	 
>5585	Statement	 
>5586	Statement	 
>5587	Statement	 
>5588	ExpressionStatement	 
>5589	AssignmentExpr	e2 -> secondToFirst = AtoB
>5590	Identifier	AtoB
>5591	PtrMemberAccess	e2 -> secondToFirst
>5592	Identifier	secondToFirst
>5593	Identifier	e2
>5594	ExpressionStatement	 
>5595	AssignmentExpr	e2 -> secondFrame = A -> keyframe
>5596	PtrMemberAccess	A -> keyframe
>5597	Identifier	keyframe
>5598	Identifier	A
>5599	PtrMemberAccess	e2 -> secondFrame
>5600	Identifier	secondFrame
>5601	Identifier	e2
>5602	ExpressionStatement	 
>5603	AssignmentExpr	e2 -> firstFrame = B -> keyframe
>5604	PtrMemberAccess	B -> keyframe
>5605	Identifier	keyframe
>5606	Identifier	B
>5607	PtrMemberAccess	e2 -> firstFrame
>5608	Identifier	firstFrame
>5609	Identifier	e2
>5610	ExpressionStatement	 
>5611	AssignmentExpr	e1 -> usage = BtoA_usage
>5612	Identifier	BtoA_usage
>5613	PtrMemberAccess	e1 -> usage
>5614	Identifier	usage
>5615	Identifier	e1
>5616	ExpressionStatement	 
>5617	AssignmentExpr	e1 -> meanResidualP = BtoA_meanPResidual
>5618	Identifier	BtoA_meanPResidual
>5619	PtrMemberAccess	e1 -> meanResidualP
>5620	Identifier	meanResidualP
>5621	Identifier	e1
>5622	ExpressionStatement	 
>5623	AssignmentExpr	e1 -> meanResidualD = BtoA_meanDResidual
>5624	Identifier	BtoA_meanDResidual
>5625	PtrMemberAccess	e1 -> meanResidualD
>5626	Identifier	meanResidualD
>5627	Identifier	e1
>5628	ExpressionStatement	 
>5629	AssignmentExpr	e1 -> meanResidual = BtoA_meanResidual
>5630	Identifier	BtoA_meanResidual
>5631	PtrMemberAccess	e1 -> meanResidual
>5632	Identifier	meanResidual
>5633	Identifier	e1
>5634	ExpressionStatement	 
>5635	Statement	 
>5636	Statement	 
>5637	Statement	 
>5638	Statement	 
>5639	Statement	 
>5640	Statement	 
>5641	Statement	 
>5642	Statement	 
>5643	Statement	 
>5644	Statement	 
>5645	Statement	 
>5646	Statement	 
>5647	ExpressionStatement	 
>5648	AssignmentExpr	e1 -> secondToFirst = BtoA
>5649	Identifier	BtoA
>5650	PtrMemberAccess	e1 -> secondToFirst
>5651	Identifier	secondToFirst
>5652	Identifier	e1
>5653	ExpressionStatement	 
>5654	AssignmentExpr	e1 -> secondFrame = B -> keyframe
>5655	PtrMemberAccess	B -> keyframe
>5656	Identifier	keyframe
>5657	Identifier	B
>5658	PtrMemberAccess	e1 -> secondFrame
>5659	Identifier	secondFrame
>5660	Identifier	e1
>5661	ExpressionStatement	 
>5662	AssignmentExpr	e1 -> firstFrame = A -> keyframe
>5663	PtrMemberAccess	A -> keyframe
>5664	Identifier	keyframe
>5665	Identifier	A
>5666	PtrMemberAccess	e1 -> firstFrame
>5667	Identifier	firstFrame
>5668	Identifier	e1
>5669	Condition	 
>5670	AndExpression	e1 != 0 && e2 != 0
>5671	EqualityExpression	e2 != 0
>5672	PrimaryExpression	0
>5673	Identifier	e2
>5674	EqualityExpression	e1 != 0
>5675	PrimaryExpression	0
>5676	Identifier	e1
>5677	IdentifierDeclStatement	 
>5678	IdentifierDecl	reciprocalConsistency = ( diffHesse * diff ) . dot ( diff )
>5679	AssignmentExpr	reciprocalConsistency = ( diffHesse * diff ) . dot ( diff )
>5680	CallExpression	( diffHesse * diff ) . dot ( diff )
>5681	ArgumentList	diff
>5682	Argument	diff
>5683	Identifier	diff
>5684	Callee	( diffHesse * diff ) . dot
>5685	MemberAccess	( diffHesse * diff ) . dot
>5686	Identifier	dot
>5687	MultiplicativeExpression	diffHesse * diff
>5688	Identifier	diff
>5689	Identifier	diffHesse
>5690	Identifier	reciprocalConsistency
>5691	Identifier	reciprocalConsistency
>5692	IdentifierDeclType	float
>5693	ExpressionStatement	 
>5694	Statement	 
>5695	Statement	 
>5696	Statement	 
>5697	Statement	 
>5698	Statement	 
>5699	Statement	 
>5700	Statement	 
>5701	Statement	 
>5702	Statement	 
>5703	Statement	 
>5704	Statement	 
>5705	Statement	 
>5706	Statement	 
>5707	Statement	 
>5708	Statement	 
>5709	Statement	 
>5710	Statement	 
>5711	Statement	 
>5712	Statement	 
>5713	IdentifierDeclStatement	 
>5714	IdentifierDecl	diffHesse = ( AtoBInfo . inverse ( ) + datimesb_db * BtoAInfo . inverse ( ) * datimesb_db . transpose ( ) ) . inverse ( )
>5715	AssignmentExpr	diffHesse = ( AtoBInfo . inverse ( ) + datimesb_db * BtoAInfo . inverse ( ) * datimesb_db . transpose ( ) ) \
>5716	CallExpression	( AtoBInfo . inverse ( ) + datimesb_db * BtoAInfo . inverse ( ) * datimesb_db . transpose ( ) ) . inverse ( )
>5717	ArgumentList	 
>5718	Callee	( AtoBInfo . inverse ( ) + datimesb_db * BtoAInfo . inverse ( ) * datimesb_db . transpose ( ) ) . inverse
>5719	MemberAccess	( AtoBInfo . inverse ( ) + datimesb_db * BtoAInfo . inverse ( ) * datimesb_db . transpose ( ) ) . inverse
>5720	Identifier	inverse
>5721	AdditiveExpression	AtoBInfo . inverse ( ) + datimesb_db * BtoAInfo . inverse ( ) * datimesb_db . transpose ( )
>5722	MultiplicativeExpression	datimesb_db * BtoAInfo . inverse ( ) * datimesb_db . transpose ( )
>5723	MultiplicativeExpression	BtoAInfo . inverse ( ) * datimesb_db . transpose ( )
>5724	CallExpression	datimesb_db . transpose ( )
>5725	ArgumentList	 
>5726	Callee	datimesb_db . transpose
>5727	MemberAccess	datimesb_db . transpose
>5728	Identifier	transpose
>5729	Identifier	datimesb_db
>5730	CallExpression	BtoAInfo . inverse ( )
>5731	ArgumentList	 
>5732	Callee	BtoAInfo . inverse
>5733	MemberAccess	BtoAInfo . inverse
>5734	Identifier	inverse
>5735	Identifier	BtoAInfo
>5736	Identifier	datimesb_db
>5737	CallExpression	AtoBInfo . inverse ( )
>5738	ArgumentList	 
>5739	Callee	AtoBInfo . inverse
>5740	MemberAccess	AtoBInfo . inverse
>5741	Identifier	inverse
>5742	Identifier	AtoBInfo
>5743	Identifier	diffHesse
>5744	Identifier	diffHesse
>5745	IdentifierDeclType	Matrix7x7
>5746	ExpressionStatement	 
>5747	CallExpression	Adj ( )
>5748	ArgumentList	 
>5749	Callee	Adj
>5750	Identifier	Adj
>5751	Statement	 
>5752	Statement	 
>5753	Statement	 
>5754	Statement	 
>5755	Statement	 
>5756	Statement	 
>5757	Statement	 
>5758	Statement	 
>5759	Statement	 
>5760	Statement	 
>5761	Statement	 
>5762	Statement	 
>5763	CompoundStatement	 
>5764	ReturnStatement	 
>5765	PrimaryExpression	1e20
>5766	Statement	 
>5767	Statement	 
>5768	Statement	 
>5769	Statement	 
>5770	Statement	 
>5771	Statement	 
>5772	Statement	 
>5773	Statement	 
>5774	Statement	 
>5775	Statement	 
>5776	Statement	 
>5777	Statement	 
>5778	Statement	 
>5779	Statement	 
>5780	Statement	 
>5781	Statement	 
>5782	Statement	 
>5783	Statement	 
>5784	Statement	 
>5785	Statement	 
>5786	Statement	 
>5787	Statement	 
>5788	Statement	 
>5789	Statement	 
>5790	Statement	 
>5791	Statement	 
>5792	Statement	 
>5793	Statement	 
>5794	Statement	 
>5795	Statement	 
>5796	Statement	 
>5797	Statement	 
>5798	Statement	 
>5799	Statement	 
>5800	Statement	 
>5801	Statement	 
>5802	Statement	 
>5803	Statement	 
>5804	Statement	 
>5805	Statement	 
>5806	Statement	 
>5807	Statement	 
>5808	Statement	 
>5809	Statement	 
>5810	Statement	 
>5811	Statement	 
>5812	Statement	 
>5813	Statement	 
>5814	Statement	 
>5815	Statement	 
>5816	Statement	 
>5817	Statement	 
>5818	Statement	 
>5819	Statement	 
>5820	Statement	 
>5821	Statement	 
>5822	Statement	 
>5823	Statement	 
>5824	Statement	 
>5825	Statement	 
>5826	IdentifierDeclStatement	 
>5827	IdentifierDecl	AtoB_usage = constraintTracker -> pointUsage
>5828	AssignmentExpr	AtoB_usage = constraintTracker -> pointUsage
>5829	PtrMemberAccess	constraintTracker -> pointUsage
>5830	Identifier	pointUsage
>5831	Identifier	constraintTracker
>5832	Identifier	AtoB_usage
>5833	Identifier	AtoB_usage
>5834	IdentifierDeclType	float
>5835	IdentifierDeclStatement	 
>5836	IdentifierDecl	AtoB_meanPResidual = constraintTracker -> lastPhotometricResidual
>5837	AssignmentExpr	AtoB_meanPResidual = constraintTracker -> lastPhotometricResidual
>5838	PtrMemberAccess	constraintTracker -> lastPhotometricResidual
>5839	Identifier	lastPhotometricResidual
>5840	Identifier	constraintTracker
>5841	Identifier	AtoB_meanPResidual
>5842	Identifier	AtoB_meanPResidual
>5843	IdentifierDeclType	float
>5844	IdentifierDeclStatement	 
>5845	IdentifierDecl	AtoB_meanDResidual = constraintTracker -> lastDepthResidual
>5846	AssignmentExpr	AtoB_meanDResidual = constraintTracker -> lastDepthResidual
>5847	PtrMemberAccess	constraintTracker -> lastDepthResidual
>5848	Identifier	lastDepthResidual
>5849	Identifier	constraintTracker
>5850	Identifier	AtoB_meanDResidual
>5851	Identifier	AtoB_meanDResidual
>5852	IdentifierDeclType	float
>5853	IdentifierDeclStatement	 
>5854	IdentifierDecl	AtoB_meanResidual = constraintTracker -> lastResidual
>5855	AssignmentExpr	AtoB_meanResidual = constraintTracker -> lastResidual
>5856	PtrMemberAccess	constraintTracker -> lastResidual
>5857	Identifier	lastResidual
>5858	Identifier	constraintTracker
>5859	Identifier	AtoB_meanResidual
>5860	Identifier	AtoB_meanResidual
>5861	IdentifierDeclType	float
>5862	IdentifierDeclStatement	 
>5863	IdentifierDecl	AtoBInfo = constraintTracker -> lastSim3Hessian
>5864	AssignmentExpr	AtoBInfo = constraintTracker -> lastSim3Hessian
>5865	PtrMemberAccess	constraintTracker -> lastSim3Hessian
>5866	Identifier	lastSim3Hessian
>5867	Identifier	constraintTracker
>5868	Identifier	AtoBInfo
>5869	Identifier	AtoBInfo
>5870	IdentifierDeclType	Matrix7x7
>5871	ExpressionStatement	 
>5872	AssignmentExpr	AtoB = constraintTracker -> trackFrameSim3 ( B , A -> keyframe , AtoB , lvlStart , lvlEnd )
>5873	CallExpression	constraintTracker -> trackFrameSim3 ( B , A -> keyframe , AtoB , lvlStart , lvlEnd )
>5874	ArgumentList	B
>5875	Argument	lvlEnd
>5876	Identifier	lvlEnd
>5877	Argument	lvlStart
>5878	Identifier	lvlStart
>5879	Argument	AtoB
>5880	Identifier	AtoB
>5881	Argument	A -> keyframe
>5882	PtrMemberAccess	A -> keyframe
>5883	Identifier	keyframe
>5884	Identifier	A
>5885	Argument	B
>5886	Identifier	B
>5887	Callee	constraintTracker -> trackFrameSim3
>5888	PtrMemberAccess	constraintTracker -> trackFrameSim3
>5889	Identifier	trackFrameSim3
>5890	Identifier	constraintTracker
>5891	Identifier	AtoB
>5892	CompoundStatement	 
>5893	ReturnStatement	 
>5894	PrimaryExpression	1e20
>5895	Statement	 
>5896	Statement	 
>5897	Statement	 
>5898	Statement	 
>5899	Statement	 
>5900	Statement	 
>5901	Statement	 
>5902	Statement	 
>5903	Statement	 
>5904	Statement	 
>5905	Statement	 
>5906	Statement	 
>5907	Statement	 
>5908	Statement	 
>5909	Statement	 
>5910	Statement	 
>5911	Statement	 
>5912	Statement	 
>5913	Statement	 
>5914	Statement	 
>5915	Statement	 
>5916	Statement	 
>5917	Statement	 
>5918	Statement	 
>5919	Statement	 
>5920	Statement	 
>5921	Statement	 
>5922	Statement	 
>5923	Statement	 
>5924	Statement	 
>5925	Statement	 
>5926	Statement	 
>5927	Statement	 
>5928	Statement	 
>5929	Statement	 
>5930	Statement	 
>5931	Statement	 
>5932	Statement	 
>5933	Statement	 
>5934	Statement	 
>5935	Statement	 
>5936	Statement	 
>5937	Statement	 
>5938	Statement	 
>5939	Statement	 
>5940	Statement	 
>5941	Statement	 
>5942	Statement	 
>5943	Statement	 
>5944	Statement	 
>5945	Statement	 
>5946	Statement	 
>5947	Statement	 
>5948	Statement	 
>5949	Statement	 
>5950	Statement	 
>5951	Statement	 
>5952	Statement	 
>5953	Statement	 
>5954	Statement	 
>5955	IdentifierDeclStatement	 
>5956	IdentifierDecl	BtoA_usage = constraintTracker -> pointUsage
>5957	AssignmentExpr	BtoA_usage = constraintTracker -> pointUsage
>5958	PtrMemberAccess	constraintTracker -> pointUsage
>5959	Identifier	pointUsage
>5960	Identifier	constraintTracker
>5961	Identifier	BtoA_usage
>5962	Identifier	BtoA_usage
>5963	IdentifierDeclType	float
>5964	IdentifierDeclStatement	 
>5965	IdentifierDecl	BtoA_meanPResidual = constraintTracker -> lastPhotometricResidual
>5966	AssignmentExpr	BtoA_meanPResidual = constraintTracker -> lastPhotometricResidual
>5967	PtrMemberAccess	constraintTracker -> lastPhotometricResidual
>5968	Identifier	lastPhotometricResidual
>5969	Identifier	constraintTracker
>5970	Identifier	BtoA_meanPResidual
>5971	Identifier	BtoA_meanPResidual
>5972	IdentifierDeclType	float
>5973	IdentifierDeclStatement	 
>5974	IdentifierDecl	BtoA_meanDResidual = constraintTracker -> lastDepthResidual
>5975	AssignmentExpr	BtoA_meanDResidual = constraintTracker -> lastDepthResidual
>5976	PtrMemberAccess	constraintTracker -> lastDepthResidual
>5977	Identifier	lastDepthResidual
>5978	Identifier	constraintTracker
>5979	Identifier	BtoA_meanDResidual
>5980	Identifier	BtoA_meanDResidual
>5981	IdentifierDeclType	float
>5982	IdentifierDeclStatement	 
>5983	IdentifierDecl	BtoA_meanResidual = constraintTracker -> lastResidual
>5984	AssignmentExpr	BtoA_meanResidual = constraintTracker -> lastResidual
>5985	PtrMemberAccess	constraintTracker -> lastResidual
>5986	Identifier	lastResidual
>5987	Identifier	constraintTracker
>5988	Identifier	BtoA_meanResidual
>5989	Identifier	BtoA_meanResidual
>5990	IdentifierDeclType	float
>5991	IdentifierDeclStatement	 
>5992	IdentifierDecl	BtoAInfo = constraintTracker -> lastSim3Hessian
>5993	AssignmentExpr	BtoAInfo = constraintTracker -> lastSim3Hessian
>5994	PtrMemberAccess	constraintTracker -> lastSim3Hessian
>5995	Identifier	lastSim3Hessian
>5996	Identifier	constraintTracker
>5997	Identifier	BtoAInfo
>5998	Identifier	BtoAInfo
>5999	IdentifierDeclType	Matrix7x7
>6000	ExpressionStatement	 
>6001	AssignmentExpr	BtoA = constraintTracker -> trackFrameSim3 ( A , B -> keyframe , BtoA , lvlStart , lvlEnd )
>6002	CallExpression	constraintTracker -> trackFrameSim3 ( A , B -> keyframe , BtoA , lvlStart , lvlEnd )
>6003	ArgumentList	A
>6004	Argument	lvlEnd
>6005	Identifier	lvlEnd
>6006	Argument	lvlStart
>6007	Identifier	lvlStart
>6008	Argument	BtoA
>6009	Identifier	BtoA
>6010	Argument	B -> keyframe
>6011	PtrMemberAccess	B -> keyframe
>6012	Identifier	keyframe
>6013	Identifier	B
>6014	Argument	A
>6015	Identifier	A
>6016	Callee	constraintTracker -> trackFrameSim3
>6017	PtrMemberAccess	constraintTracker -> trackFrameSim3
>6018	Identifier	trackFrameSim3
>6019	Identifier	constraintTracker
>6020	Identifier	BtoA
>6082	FunctionDef	SlamSystem 
>6083	ParameterList	Frame * candidate , KFConstraintStruct * & e1_out , KFConstraintStruct * & e2_out , Sim3 candidateToFrame_initialEstimate , \
>6084	Parameter	 
>6085	Identifier	strictness
>6086	ParameterType	float
>6087	Parameter	 
>6088	Identifier	candidateToFrame_initialEstimate
>6089	ParameterType	Sim3
>6090	Parameter	 
>6091	Identifier	e2_out
>6092	ParameterType	KFConstraintStruct * &
>6093	Parameter	 
>6094	Identifier	e1_out
>6095	ParameterType	KFConstraintStruct * &
>6096	Parameter	 
>6097	Identifier	candidate
>6098	ParameterType	Frame *
>6099	ReturnType	void
>6100	CompoundStatement	 
>6101	ExpressionStatement	 
>6102	CallExpression	e2_out -> robustKernel -> setDelta ( kernelDelta )
>6103	ArgumentList	kernelDelta
>6104	Argument	kernelDelta
>6105	Identifier	kernelDelta
>6106	Callee	e2_out -> robustKernel -> setDelta
>6107	PtrMemberAccess	e2_out -> robustKernel -> setDelta
>6108	Identifier	setDelta
>6109	PtrMemberAccess	e2_out -> robustKernel
>6110	Identifier	robustKernel
>6111	Identifier	e2_out
>6112	ExpressionStatement	 
>6113	AssignmentExpr	e2_out -> robustKernel = new g2o 
>6114	UnaryExpression	new g2o 
>6115	PtrMemberAccess	e2_out -> robustKernel
>6116	Identifier	robustKernel
>6117	Identifier	e2_out
>6118	ExpressionStatement	 
>6119	CallExpression	e1_out -> robustKernel -> setDelta ( kernelDelta )
>6120	ArgumentList	kernelDelta
>6121	Argument	kernelDelta
>6122	Identifier	kernelDelta
>6123	Callee	e1_out -> robustKernel -> setDelta
>6124	PtrMemberAccess	e1_out -> robustKernel -> setDelta
>6125	Identifier	setDelta
>6126	PtrMemberAccess	e1_out -> robustKernel
>6127	Identifier	robustKernel
>6128	Identifier	e1_out
>6129	ExpressionStatement	 
>6130	AssignmentExpr	e1_out -> robustKernel = new g2o 
>6131	UnaryExpression	new g2o 
>6132	PtrMemberAccess	e1_out -> robustKernel
>6133	Identifier	robustKernel
>6134	Identifier	e1_out
>6135	IdentifierDeclStatement	 
>6136	IdentifierDecl	kernelDelta = 5 * sqrt ( 6000 * loopclosureStrictness )
>6137	AssignmentExpr	kernelDelta = 5 * sqrt ( 6000 * loopclosureStrictness )
>6138	MultiplicativeExpression	5 * sqrt ( 6000 * loopclosureStrictness )
>6139	CallExpression	sqrt ( 6000 * loopclosureStrictness )
>6140	ArgumentList	6000 * loopclosureStrictness
>6141	Argument	6000 * loopclosureStrictness
>6142	MultiplicativeExpression	6000 * loopclosureStrictness
>6143	Identifier	loopclosureStrictness
>6144	PrimaryExpression	6000
>6145	Callee	sqrt
>6146	Identifier	sqrt
>6147	PrimaryExpression	5
>6148	Identifier	kernelDelta
>6149	Identifier	kernelDelta
>6150	IdentifierDeclType	const float
>6151	IfStatement	if ( enablePrintDebugInfo && printConstraintSearchInfo )
>6152	ExpressionStatement	 
>6153	CallExpression	printf ( \"ADDED %d -> %d
>6154	ArgumentList	\"ADDED %d -> %d
>6155	Argument	sqrtf ( err_level1 )
>6156	CallExpression	sqrtf ( err_level1 )
>6157	ArgumentList	err_level1
>6158	Argument	err_level1
>6159	Identifier	err_level1
>6160	Callee	sqrtf
>6161	Identifier	sqrtf
>6162	Argument	sqrtf ( err_level2 )
>6163	CallExpression	sqrtf ( err_level2 )
>6164	ArgumentList	err_level2
>6165	Argument	err_level2
>6166	Identifier	err_level2
>6167	Callee	sqrtf
>6168	Identifier	sqrtf
>6169	Argument	sqrtf ( err_level3 )
>6170	CallExpression	sqrtf ( err_level3 )
>6171	ArgumentList	err_level3
>6172	Argument	err_level3
>6173	Identifier	err_level3
>6174	Callee	sqrtf
>6175	Identifier	sqrtf
>6176	Argument	candidateTrackingReference -> frameID
>6177	PtrMemberAccess	candidateTrackingReference -> frameID
>6178	Identifier	frameID
>6179	Identifier	candidateTrackingReference
>6180	Argument	newKFTrackingReference -> frameID
>6181	PtrMemberAccess	newKFTrackingReference -> frameID
>6182	Identifier	frameID
>6183	Identifier	newKFTrackingReference
>6184	Argument	\"ADDED %d -> %d
>6185	PrimaryExpression	\"ADDED %d -> %d
>6186	Callee	printf
>6187	Identifier	printf
>6188	Condition	 
>6189	AndExpression	enablePrintDebugInfo && printConstraintSearchInfo
>6190	Identifier	printConstraintSearchInfo
>6191	Identifier	enablePrintDebugInfo
>6192	IfStatement	if ( err_level1 > 6000 * strictness )
>6193	CompoundStatement	 
>6194	ReturnStatement	 
>6195	ExpressionStatement	 
>6196	Statement	 
>6197	Statement	 
>6198	Statement	 
>6199	Statement	 
>6200	Statement	 
>6201	Statement	 
>6202	Statement	 
>6203	Statement	 
>6204	Statement	 
>6205	Statement	 
>6206	Statement	 
>6207	Statement	 
>6208	Statement	 
>6209	Statement	 
>6210	Statement	 
>6211	Statement	 
>6212	Statement	 
>6213	Statement	 
>6214	Statement	 
>6215	Statement	 
>6216	Statement	 
>6217	Statement	 
>6218	Statement	 
>6219	ExpressionStatement	 
>6220	AssignmentExpr	e1_out = e2_out = 0
>6221	AssignmentExpr	e2_out = 0
>6222	PrimaryExpression	0
>6223	Identifier	e2_out
>6224	Identifier	e1_out
>6225	ExpressionStatement	 
>6226	Identifier	e2_out
>6227	Statement	 
>6228	ExpressionStatement	 
>6229	Identifier	e1_out
>6230	Statement	 
>6231	IfStatement	if ( enablePrintDebugInfo && printConstraintSearchInfo )
>6232	ExpressionStatement	 
>6233	CallExpression	printf ( \"FAILE %d -> %d (lvl %d)
>6234	ArgumentList	\"FAILE %d -> %d (lvl %d)
>6235	Argument	sqrtf ( err_level1 )
>6236	CallExpression	sqrtf ( err_level1 )
>6237	ArgumentList	err_level1
>6238	Argument	err_level1
>6239	Identifier	err_level1
>6240	Callee	sqrtf
>6241	Identifier	sqrtf
>6242	Argument	sqrtf ( err_level2 )
>6243	CallExpression	sqrtf ( err_level2 )
>6244	ArgumentList	err_level2
>6245	Argument	err_level2
>6246	Identifier	err_level2
>6247	Callee	sqrtf
>6248	Identifier	sqrtf
>6249	Argument	sqrtf ( err_level3 )
>6250	CallExpression	sqrtf ( err_level3 )
>6251	ArgumentList	err_level3
>6252	Argument	err_level3
>6253	Identifier	err_level3
>6254	Callee	sqrtf
>6255	Identifier	sqrtf
>6256	Argument	1
>6257	PrimaryExpression	1
>6258	Argument	candidateTrackingReference -> frameID
>6259	PtrMemberAccess	candidateTrackingReference -> frameID
>6260	Identifier	frameID
>6261	Identifier	candidateTrackingReference
>6262	Argument	newKFTrackingReference -> frameID
>6263	PtrMemberAccess	newKFTrackingReference -> frameID
>6264	Identifier	frameID
>6265	Identifier	newKFTrackingReference
>6266	Argument	\"FAILE %d -> %d (lvl %d)
>6267	PrimaryExpression	\"FAILE %d -> %d (lvl %d)
>6268	Callee	printf
>6269	Identifier	printf
>6270	Condition	 
>6271	AndExpression	enablePrintDebugInfo && printConstraintSearchInfo
>6272	Identifier	printConstraintSearchInfo
>6273	Identifier	enablePrintDebugInfo
>6274	Condition	 
>6275	RelationalExpression	err_level1 > 6000 * strictness
>6276	MultiplicativeExpression	6000 * strictness
>6277	Identifier	strictness
>6278	PrimaryExpression	6000
>6279	Identifier	err_level1
>6280	IdentifierDeclStatement	 
>6281	IdentifierDecl	err_level1 = tryTrackSim3 ( newKFTrackingReference , candidateTrackingReference , 1 , 1 , USESSE , FtoC , CtoF , \
>6282	AssignmentExpr	err_level1 = tryTrackSim3 ( newKFTrackingReference , candidateTrackingReference , 1 , 1 , USESSE , FtoC , \
>6283	CallExpression	tryTrackSim3 ( newKFTrackingReference , candidateTrackingReference , 1 , 1 , USESSE , FtoC , CtoF , e1_out , e2_\
>6284	ArgumentList	newKFTrackingReference
>6285	Argument	e2_out
>6286	Identifier	e2_out
>6287	Argument	e1_out
>6288	Identifier	e1_out
>6289	Argument	CtoF
>6290	Identifier	CtoF
>6291	Argument	FtoC
>6292	Identifier	FtoC
>6293	Argument	USESSE
>6294	Identifier	USESSE
>6295	Argument	1
>6296	PrimaryExpression	1
>6297	Argument	1
>6298	PrimaryExpression	1
>6299	Argument	candidateTrackingReference
>6300	Identifier	candidateTrackingReference
>6301	Argument	newKFTrackingReference
>6302	Identifier	newKFTrackingReference
>6303	Callee	tryTrackSim3
>6304	Identifier	tryTrackSim3
>6305	Identifier	err_level1
>6306	Identifier	err_level1
>6307	IdentifierDeclType	float
>6308	ExpressionStatement	 
>6309	AssignmentExpr	e2_out = new KFConstraintStruct ( )
>6310	UnaryExpression	new KFConstraintStruct ( )
>6311	Identifier	e2_out
>6312	ExpressionStatement	 
>6313	AssignmentExpr	e1_out = new KFConstraintStruct ( )
>6314	UnaryExpression	new KFConstraintStruct ( )
>6315	Identifier	e1_out
>6316	IfStatement	if ( err_level2 > 4000 * strictness )
>6317	CompoundStatement	 
>6318	ReturnStatement	 
>6319	ExpressionStatement	 
>6320	Statement	 
>6321	Statement	 
>6322	Statement	 
>6323	Statement	 
>6324	Statement	 
>6325	Statement	 
>6326	Statement	 
>6327	Statement	 
>6328	Statement	 
>6329	Statement	 
>6330	Statement	 
>6331	Statement	 
>6332	Statement	 
>6333	Statement	 
>6334	Statement	 
>6335	Statement	 
>6336	Statement	 
>6337	Statement	 
>6338	Statement	 
>6339	Statement	 
>6340	Statement	 
>6341	Statement	 
>6342	Statement	 
>6343	ExpressionStatement	 
>6344	AssignmentExpr	e1_out = e2_out = 0
>6345	AssignmentExpr	e2_out = 0
>6346	PrimaryExpression	0
>6347	Identifier	e2_out
>6348	Identifier	e1_out
>6349	IfStatement	if ( enablePrintDebugInfo && printConstraintSearchInfo )
>6350	ExpressionStatement	 
>6351	CallExpression	printf ( \"FAILE %d -> %d (lvl %d)
>6352	ArgumentList	\"FAILE %d -> %d (lvl %d)
>6353	Argument	sqrtf ( err_level2 )
>6354	CallExpression	sqrtf ( err_level2 )
>6355	ArgumentList	err_level2
>6356	Argument	err_level2
>6357	Identifier	err_level2
>6358	Callee	sqrtf
>6359	Identifier	sqrtf
>6360	Argument	sqrtf ( err_level3 )
>6361	CallExpression	sqrtf ( err_level3 )
>6362	ArgumentList	err_level3
>6363	Argument	err_level3
>6364	Identifier	err_level3
>6365	Callee	sqrtf
>6366	Identifier	sqrtf
>6367	Argument	2
>6368	PrimaryExpression	2
>6369	Argument	candidateTrackingReference -> frameID
>6370	PtrMemberAccess	candidateTrackingReference -> frameID
>6371	Identifier	frameID
>6372	Identifier	candidateTrackingReference
>6373	Argument	newKFTrackingReference -> frameID
>6374	PtrMemberAccess	newKFTrackingReference -> frameID
>6375	Identifier	frameID
>6376	Identifier	newKFTrackingReference
>6377	Argument	\"FAILE %d -> %d (lvl %d)
>6378	PrimaryExpression	\"FAILE %d -> %d (lvl %d)
>6379	Callee	printf
>6380	Identifier	printf
>6381	Condition	 
>6382	AndExpression	enablePrintDebugInfo && printConstraintSearchInfo
>6383	Identifier	printConstraintSearchInfo
>6384	Identifier	enablePrintDebugInfo
>6385	Condition	 
>6386	RelationalExpression	err_level2 > 4000 * strictness
>6387	MultiplicativeExpression	4000 * strictness
>6388	Identifier	strictness
>6389	PrimaryExpression	4000
>6390	Identifier	err_level2
>6391	IdentifierDeclStatement	 
>6392	IdentifierDecl	err_level2 = tryTrackSim3 ( newKFTrackingReference , candidateTrackingReference , 2 , 2 , USESSE , FtoC , CtoF )
>6393	AssignmentExpr	err_level2 = tryTrackSim3 ( newKFTrackingReference , candidateTrackingReference , 2 , 2 , USESSE , FtoC , \
>6394	CallExpression	tryTrackSim3 ( newKFTrackingReference , candidateTrackingReference , 2 , 2 , USESSE , FtoC , CtoF )
>6395	ArgumentList	newKFTrackingReference
>6396	Argument	CtoF
>6397	Identifier	CtoF
>6398	Argument	FtoC
>6399	Identifier	FtoC
>6400	Argument	USESSE
>6401	Identifier	USESSE
>6402	Argument	2
>6403	PrimaryExpression	2
>6404	Argument	2
>6405	PrimaryExpression	2
>6406	Argument	candidateTrackingReference
>6407	Identifier	candidateTrackingReference
>6408	Argument	newKFTrackingReference
>6409	Identifier	newKFTrackingReference
>6410	Callee	tryTrackSim3
>6411	Identifier	tryTrackSim3
>6412	Identifier	err_level2
>6413	Identifier	err_level2
>6414	IdentifierDeclType	float
>6415	IfStatement	if ( err_level3 > 3000 * strictness )
>6416	CompoundStatement	 
>6417	ReturnStatement	 
>6418	ExpressionStatement	 
>6419	Statement	 
>6420	Statement	 
>6421	Statement	 
>6422	Statement	 
>6423	Statement	 
>6424	Statement	 
>6425	Statement	 
>6426	Statement	 
>6427	Statement	 
>6428	Statement	 
>6429	Statement	 
>6430	Statement	 
>6431	Statement	 
>6432	Statement	 
>6433	Statement	 
>6434	Statement	 
>6435	Statement	 
>6436	Statement	 
>6437	Statement	 
>6438	Statement	 
>6439	Statement	 
>6440	Statement	 
>6441	Statement	 
>6442	ExpressionStatement	 
>6443	AssignmentExpr	e1_out = e2_out = 0
>6444	AssignmentExpr	e2_out = 0
>6445	PrimaryExpression	0
>6446	Identifier	e2_out
>6447	Identifier	e1_out
>6448	IfStatement	if ( enablePrintDebugInfo && printConstraintSearchInfo )
>6449	ExpressionStatement	 
>6450	CallExpression	printf ( \"FAILE %d -> %d (lvl %d)
>6451	ArgumentList	\"FAILE %d -> %d (lvl %d)
>6452	Argument	sqrtf ( err_level3 )
>6453	CallExpression	sqrtf ( err_level3 )
>6454	ArgumentList	err_level3
>6455	Argument	err_level3
>6456	Identifier	err_level3
>6457	Callee	sqrtf
>6458	Identifier	sqrtf
>6459	Argument	3
>6460	PrimaryExpression	3
>6461	Argument	candidateTrackingReference -> frameID
>6462	PtrMemberAccess	candidateTrackingReference -> frameID
>6463	Identifier	frameID
>6464	Identifier	candidateTrackingReference
>6465	Argument	newKFTrackingReference -> frameID
>6466	PtrMemberAccess	newKFTrackingReference -> frameID
>6467	Identifier	frameID
>6468	Identifier	newKFTrackingReference
>6469	Argument	\"FAILE %d -> %d (lvl %d)
>6470	PrimaryExpression	\"FAILE %d -> %d (lvl %d)
>6471	Callee	printf
>6472	Identifier	printf
>6473	Condition	 
>6474	AndExpression	enablePrintDebugInfo && printConstraintSearchInfo
>6475	Identifier	printConstraintSearchInfo
>6476	Identifier	enablePrintDebugInfo
>6477	Condition	 
>6478	RelationalExpression	err_level3 > 3000 * strictness
>6479	MultiplicativeExpression	3000 * strictness
>6480	Identifier	strictness
>6481	PrimaryExpression	3000
>6482	Identifier	err_level3
>6483	IdentifierDeclStatement	 
>6484	IdentifierDecl	err_level3 = tryTrackSim3 ( newKFTrackingReference , candidateTrackingReference , SIM3TRACKING_MAX_LEVEL - 1 , 3 , \
>6485	AssignmentExpr	err_level3 = tryTrackSim3 ( newKFTrackingReference , candidateTrackingReference , SIM3TRACKING_MAX_LEVEL \
>6486	CallExpression	tryTrackSim3 ( newKFTrackingReference , candidateTrackingReference , SIM3TRACKING_MAX_LEVEL - 1 , 3 , USESSE , FtoC , \
>6487	ArgumentList	newKFTrackingReference
>6488	Argument	CtoF
>6489	Identifier	CtoF
>6490	Argument	FtoC
>6491	Identifier	FtoC
>6492	Argument	USESSE
>6493	Identifier	USESSE
>6494	Argument	3
>6495	PrimaryExpression	3
>6496	Argument	SIM3TRACKING_MAX_LEVEL - 1
>6497	AdditiveExpression	SIM3TRACKING_MAX_LEVEL - 1
>6498	PrimaryExpression	1
>6499	Identifier	SIM3TRACKING_MAX_LEVEL
>6500	Argument	candidateTrackingReference
>6501	Identifier	candidateTrackingReference
>6502	Argument	newKFTrackingReference
>6503	Identifier	newKFTrackingReference
>6504	Callee	tryTrackSim3
>6505	Identifier	tryTrackSim3
>6506	Identifier	err_level3
>6507	Identifier	err_level3
>6508	IdentifierDeclType	float
>6509	IdentifierDeclStatement	 
>6510	IdentifierDecl	CtoFInfo
>6511	Identifier	CtoFInfo
>6512	IdentifierDeclType	Matrix7x7
>6513	IdentifierDecl	FtoCInfo
>6514	Identifier	FtoCInfo
>6515	IdentifierDeclType	Matrix7x7
>6516	IdentifierDeclStatement	 
>6517	IdentifierDecl	CtoF = candidateToFrame_initialEstimate
>6518	AssignmentExpr	CtoF = candidateToFrame_initialEstimate
>6519	Identifier	candidateToFrame_initialEstimate
>6520	Identifier	candidateToFrame_initialEstimate
>6521	Identifier	CtoF
>6522	IdentifierDeclType	Sim3
>6523	IdentifierDecl	FtoC = candidateToFrame_initialEstimate . inverse ( )
>6524	AssignmentExpr	FtoC = candidateToFrame_initialEstimate . inverse ( )
>6525	CallExpression	candidateToFrame_initialEstimate . inverse ( )
>6526	ArgumentList	 
>6527	Callee	candidateToFrame_initialEstimate . inverse
>6528	MemberAccess	candidateToFrame_initialEstimate . inverse
>6529	Identifier	inverse
>6530	Identifier	candidateToFrame_initialEstimate
>6531	Identifier	FtoC
>6532	Identifier	FtoC
>6533	IdentifierDeclType	Sim3
>6534	ExpressionStatement	 
>6535	CallExpression	candidateTrackingReference -> importFrame ( candidate )
>6536	ArgumentList	candidate
>6537	Argument	candidate
>6538	Identifier	candidate
>6539	Callee	candidateTrackingReference -> importFrame
>6540	PtrMemberAccess	candidateTrackingReference -> importFrame
>6541	Identifier	importFrame
>6542	Identifier	candidateTrackingReference
>6578	FunctionDef	SlamSystem 
>6579	ParameterList	Frame * newKeyFrame , bool forceParent , bool useFABMAP , float closeCandidatesTH
>6580	Parameter	 
>6581	Identifier	closeCandidatesTH
>6582	ParameterType	float
>6583	Parameter	 
>6584	Identifier	useFABMAP
>6585	ParameterType	bool
>6586	Parameter	 
>6587	Identifier	forceParent
>6588	ParameterType	bool
>6589	Parameter	 
>6590	Identifier	newKeyFrame
>6591	ParameterType	Frame *
>6592	ReturnType	int
>6593	CompoundStatement	 
>6594	ReturnStatement	 
>6595	CallExpression	constraints . size ( )
>6596	ArgumentList	 
>6597	Callee	constraints . size
>6598	MemberAccess	constraints . size
>6599	Identifier	size
>6600	Identifier	constraints
>6601	ExpressionStatement	 
>6602	CallExpression	candidateTrackingReference -> invalidate ( )
>6603	ArgumentList	 
>6604	Callee	candidateTrackingReference -> invalidate
>6605	PtrMemberAccess	candidateTrackingReference -> invalidate
>6606	Identifier	invalidate
>6607	Identifier	candidateTrackingReference
>6608	ExpressionStatement	 
>6609	CallExpression	newKFTrackingReference -> invalidate ( )
>6610	ArgumentList	 
>6611	Callee	newKFTrackingReference -> invalidate
>6612	PtrMemberAccess	newKFTrackingReference -> invalidate
>6613	Identifier	invalidate
>6614	Identifier	newKFTrackingReference
>6615	ExpressionStatement	 
>6616	CallExpression	newConstraintMutex . unlock ( )
>6617	ArgumentList	 
>6618	Callee	newConstraintMutex . unlock
>6619	MemberAccess	newConstraintMutex . unlock
>6620	Identifier	unlock
>6621	Identifier	newConstraintMutex
>6622	ExpressionStatement	 
>6623	CallExpression	newConstraintCreatedSignal . notify_all ( )
>6624	ArgumentList	 
>6625	Callee	newConstraintCreatedSignal . notify_all
>6626	MemberAccess	newConstraintCreatedSignal . notify_all
>6627	Identifier	notify_all
>6628	Identifier	newConstraintCreatedSignal
>6629	ExpressionStatement	 
>6630	AssignmentExpr	newConstraintAdded = true
>6631	Identifier	true
>6632	Identifier	newConstraintAdded
>6633	ForStatement	for ( unsigned int i = 0 ; i < constraints . size ( ) ; i ++ )
>6634	ExpressionStatement	 
>6635	CallExpression	keyFrameGraph -> insertConstraint ( constraints [ i ] )
>6636	ArgumentList	constraints [ i ]
>6637	Argument	constraints [ i ]
>6638	ArrayIndexing	constraints [ i ]
>6639	Identifier	i
>6640	Identifier	constraints
>6641	Callee	keyFrameGraph -> insertConstraint
>6642	PtrMemberAccess	keyFrameGraph -> insertConstraint
>6643	Identifier	insertConstraint
>6644	Identifier	keyFrameGraph
>6645	IncDecOp	 
>6646	IncDec	++
>6647	Identifier	i
>6648	Condition	 
>6649	RelationalExpression	i < constraints . size ( )
>6650	CallExpression	constraints . size ( )
>6651	ArgumentList	 
>6652	Callee	constraints . size
>6653	MemberAccess	constraints . size
>6654	Identifier	size
>6655	Identifier	constraints
>6656	Identifier	i
>6657	ForInit	 
>6658	IdentifierDeclStatement	unsigned int i = 0 ;
>6659	IdentifierDecl	i = 0
>6660	AssignmentExpr	i = 0
>6661	PrimaryExpression	0
>6662	Identifier	i
>6663	Identifier	i
>6664	IdentifierDeclType	unsigned int
>6665	ExpressionStatement	 
>6666	CallExpression	keyFrameGraph -> addKeyFrame ( newKeyFrame )
>6667	ArgumentList	newKeyFrame
>6668	Argument	newKeyFrame
>6669	Identifier	newKeyFrame
>6670	Callee	keyFrameGraph -> addKeyFrame
>6671	PtrMemberAccess	keyFrameGraph -> addKeyFrame
>6672	Identifier	addKeyFrame
>6673	Identifier	keyFrameGraph
>6674	ExpressionStatement	 
>6675	CallExpression	newConstraintMutex . lock ( )
>6676	ArgumentList	 
>6677	Callee	newConstraintMutex . lock
>6678	MemberAccess	newConstraintMutex . lock
>6679	Identifier	lock
>6680	Identifier	newConstraintMutex
>6681	IfStatement	if ( parent != 0 && forceParent )
>6682	CompoundStatement	 
>6683	IfStatement	if ( e1 != 0 )
>6684	ElseStatement	else
>6685	CompoundStatement	 
>6686	ExpressionStatement	 
>6687	CallExpression	poseConsistencyMutex . unlock_shared ( )
>6688	ArgumentList	 
>6689	Callee	poseConsistencyMutex . unlock_shared
>6690	MemberAccess	poseConsistencyMutex . unlock_shared
>6691	Identifier	unlock_shared
>6692	Identifier	poseConsistencyMutex
>6693	ExpressionStatement	 
>6694	AssignmentExpr	constraints . back ( ) -> usage = 0
>6695	PrimaryExpression	0
>6696	PtrMemberAccess	constraints . back ( ) -> usage
>6697	Identifier	usage
>6698	CallExpression	constraints . back ( )
>6699	ArgumentList	 
>6700	Callee	constraints . back
>6701	MemberAccess	constraints . back
>6702	Identifier	back
>6703	Identifier	constraints
>6704	ExpressionStatement	 
>6705	AssignmentExpr	constraints . back ( ) -> meanResidualP = 10
>6706	PrimaryExpression	10
>6707	PtrMemberAccess	constraints . back ( ) -> meanResidualP
>6708	Identifier	meanResidualP
>6709	CallExpression	constraints . back ( )
>6710	ArgumentList	 
>6711	Callee	constraints . back
>6712	MemberAccess	constraints . back
>6713	Identifier	back
>6714	Identifier	constraints
>6715	ExpressionStatement	 
>6716	AssignmentExpr	constraints . back ( ) -> meanResidualD = 10
>6717	PrimaryExpression	10
>6718	PtrMemberAccess	constraints . back ( ) -> meanResidualD
>6719	Identifier	meanResidualD
>6720	CallExpression	constraints . back ( )
>6721	ArgumentList	 
>6722	Callee	constraints . back
>6723	MemberAccess	constraints . back
>6724	Identifier	back
>6725	Identifier	constraints
>6726	ExpressionStatement	 
>6727	AssignmentExpr	constraints . back ( ) -> meanResidual = 10
>6728	PrimaryExpression	10
>6729	PtrMemberAccess	constraints . back ( ) -> meanResidual
>6730	Identifier	meanResidual
>6731	CallExpression	constraints . back ( )
>6732	ArgumentList	 
>6733	Callee	constraints . back
>6734	MemberAccess	constraints . back
>6735	Identifier	back
>6736	Identifier	constraints
>6737	ExpressionStatement	 
>6738	CallExpression	constraints . back ( ) -> robustKernel -> setDelta ( kernelDelta )
>6739	ArgumentList	kernelDelta
>6740	Argument	kernelDelta
>6741	Identifier	kernelDelta
>6742	Callee	constraints . back ( ) -> robustKernel -> setDelta
>6743	PtrMemberAccess	constraints . back ( ) -> robustKernel -> setDelta
>6744	Identifier	setDelta
>6745	PtrMemberAccess	constraints . back ( ) -> robustKernel
>6746	Identifier	robustKernel
>6747	CallExpression	constraints . back ( )
>6748	ArgumentList	 
>6749	Callee	constraints . back
>6750	MemberAccess	constraints . back
>6751	Identifier	back
>6752	Identifier	constraints
>6753	ExpressionStatement	 
>6754	AssignmentExpr	constraints . back ( ) -> robustKernel = new g2o 
>6755	UnaryExpression	new g2o 
>6756	PtrMemberAccess	constraints . back ( ) -> robustKernel
>6757	Identifier	robustKernel
>6758	CallExpression	constraints . back ( )
>6759	ArgumentList	 
>6760	Callee	constraints . back
>6761	MemberAccess	constraints . back
>6762	Identifier	back
>6763	Identifier	constraints
>6764	ExpressionStatement	 
>6765	AssignmentExpr	constraints . back ( ) -> information *= ( 1e9 / ( downweightFac * downweightFac ) )
>6766	MultiplicativeExpression	1e9 / ( downweightFac * downweightFac )
>6767	MultiplicativeExpression	downweightFac * downweightFac
>6768	Identifier	downweightFac
>6769	Identifier	downweightFac
>6770	PrimaryExpression	1e9
>6771	PtrMemberAccess	constraints . back ( ) -> information
>6772	Identifier	information
>6773	CallExpression	constraints . back ( )
>6774	ArgumentList	 
>6775	Callee	constraints . back
>6776	MemberAccess	constraints . back
>6777	Identifier	back
>6778	Identifier	constraints
>6779	ExpressionStatement	 
>6780	Expression	constraints . back ( ) -> information << 0.8098 , - 0.1507 , - 0.0557 , 0.1211 , 0.7657 , 0.0120 , 0 , - 0.1507 , \
>6781	Expression	- 0.1507 , - 0.0557 , 0.1211 , 0.7657 , 0.0120 , 0 , - 0.1507 , 2.1724 , - 0.1103 , - 1.9279 , - 0.1182 , 0.1943 , \
>6782	Expression	- 0.0557 , 0.1211 , 0.7657 , 0.0120 , 0 , - 0.1507 , 2.1724 , - 0.1103 , - 1.9279 , - 0.1182 , 0.1943 , 0 , - 0.0557 , \
>6783	Expression	0.1211 , 0.7657 , 0.0120 , 0 , - 0.1507 , 2.1724 , - 0.1103 , - 1.9279 , - 0.1182 , 0.1943 , 0 , - 0.0557 , - 0.1103 , \
>6784	Expression	0.7657 , 0.0120 , 0 , - 0.1507 , 2.1724 , - 0.1103 , - 1.9279 , - 0.1182 , 0.1943 , 0 , - 0.0557 , - 0.1103 , 0.2643 , \
>6785	Expression	0.0120 , 0 , - 0.1507 , 2.1724 , - 0.1103 , - 1.9279 , - 0.1182 , 0.1943 , 0 , - 0.0557 , - 0.1103 , 0.2643 , - \
>6786	Expression	0 , - 0.1507 , 2.1724 , - 0.1103 , - 1.9279 , - 0.1182 , 0.1943 , 0 , - 0.0557 , - 0.1103 , 0.2643 , - 0.0021 , \
>6787	Expression	- 0.1507 , 2.1724 , - 0.1103 , - 1.9279 , - 0.1182 , 0.1943 , 0 , - 0.0557 , - 0.1103 , 0.2643 , - 0.0021 , - 0.0657 , \
>6788	Expression	2.1724 , - 0.1103 , - 1.9279 , - 0.1182 , 0.1943 , 0 , - 0.0557 , - 0.1103 , 0.2643 , - 0.0021 , - 0.0657 , - 0.0028 , \
>6789	Expression	- 0.1103 , - 1.9279 , - 0.1182 , 0.1943 , 0 , - 0.0557 , - 0.1103 , 0.2643 , - 0.0021 , - 0.0657 , - 0.0028 , 0.0304 , \
>6790	Expression	- 1.9279 , - 0.1182 , 0.1943 , 0 , - 0.0557 , - 0.1103 , 0.2643 , - 0.0021 , - 0.0657 , - 0.0028 , 0.0304 , 0.1211 , \
>6791	Expression	- 0.1182 , 0.1943 , 0 , - 0.0557 , - 0.1103 , 0.2643 , - 0.0021 , - 0.0657 , - 0.0028 , 0.0304 , 0.1211 , - 1.9279 , \
>6792	Expression	0.1943 , 0 , - 0.0557 , - 0.1103 , 0.2643 , - 0.0021 , - 0.0657 , - 0.0028 , 0.0304 , 0.1211 , - 1.9279 , - 0.0021 , \
>6793	Expression	0 , - 0.0557 , - 0.1103 , 0.2643 , - 0.0021 , - 0.0657 , - 0.0028 , 0.0304 , 0.1211 , - 1.9279 , - 0.0021 , 2.3110 , \
>6794	Expression	- 0.0557 , - 0.1103 , 0.2643 , - 0.0021 , - 0.0657 , - 0.0028 , 0.0304 , 0.1211 , - 1.9279 , - 0.0021 , 2.3110 , \
>6795	Expression	- 0.1103 , 0.2643 , - 0.0021 , - 0.0657 , - 0.0028 , 0.0304 , 0.1211 , - 1.9279 , - 0.0021 , 2.3110 , 0.1039 , - \
>6796	Expression	0.2643 , - 0.0021 , - 0.0657 , - 0.0028 , 0.0304 , 0.1211 , - 1.9279 , - 0.0021 , 2.3110 , 0.1039 , - 0.0934 , 0.0005 , \
>6797	Expression	- 0.0021 , - 0.0657 , - 0.0028 , 0.0304 , 0.1211 , - 1.9279 , - 0.0021 , 2.3110 , 0.1039 , - 0.0934 , 0.0005 , 0.7657 , \
>6798	Expression	- 0.0657 , - 0.0028 , 0.0304 , 0.1211 , - 1.9279 , - 0.0021 , 2.3110 , 0.1039 , - 0.0934 , 0.0005 , 0.7657 , - 0.1182 , \
>6799	Expression	- 0.0028 , 0.0304 , 0.1211 , - 1.9279 , - 0.0021 , 2.3110 , 0.1039 , - 0.0934 , 0.0005 , 0.7657 , - 0.1182 , - 0.0657 , \
>6800	Expression	0.0304 , 0.1211 , - 1.9279 , - 0.0021 , 2.3110 , 0.1039 , - 0.0934 , 0.0005 , 0.7657 , - 0.1182 , - 0.0657 , 0.1039 , \
>6801	Expression	0.1211 , - 1.9279 , - 0.0021 , 2.3110 , 0.1039 , - 0.0934 , 0.0005 , 0.7657 , - 0.1182 , - 0.0657 , 0.1039 , 1.0545 , \
>6802	Expression	- 1.9279 , - 0.0021 , 2.3110 , 0.1039 , - 0.0934 , 0.0005 , 0.7657 , - 0.1182 , - 0.0657 , 0.1039 , 1.0545 , 0.0743 , \
>6803	Expression	- 0.0021 , 2.3110 , 0.1039 , - 0.0934 , 0.0005 , 0.7657 , - 0.1182 , - 0.0657 , 0.1039 , 1.0545 , 0.0743 , - 0.0028 , \
>6804	Expression	2.3110 , 0.1039 , - 0.0934 , 0.0005 , 0.7657 , - 0.1182 , - 0.0657 , 0.1039 , 1.0545 , 0.0743 , - 0.0028 , 0.0120 , \
>6805	Expression	0.1039 , - 0.0934 , 0.0005 , 0.7657 , - 0.1182 , - 0.0657 , 0.1039 , 1.0545 , 0.0743 , - 0.0028 , 0.0120 , 0.1943 , \
>6806	Expression	- 0.0934 , 0.0005 , 0.7657 , - 0.1182 , - 0.0657 , 0.1039 , 1.0545 , 0.0743 , - 0.0028 , 0.0120 , 0.1943 , - 0.0028 , \
>6807	Expression	0.0005 , 0.7657 , - 0.1182 , - 0.0657 , 0.1039 , 1.0545 , 0.0743 , - 0.0028 , 0.0120 , 0.1943 , - 0.0028 , - 0.0934 , \
>6808	Expression	0.7657 , - 0.1182 , - 0.0657 , 0.1039 , 1.0545 , 0.0743 , - 0.0028 , 0.0120 , 0.1943 , - 0.0028 , - 0.0934 , 0.0743 , \
>6809	Expression	- 0.1182 , - 0.0657 , 0.1039 , 1.0545 , 0.0743 , - 0.0028 , 0.0120 , 0.1943 , - 0.0028 , - 0.0934 , 0.0743 , 0.4511 , \
>6810	Expression	- 0.0657 , 0.1039 , 1.0545 , 0.0743 , - 0.0028 , 0.0120 , 0.1943 , - 0.0028 , - 0.0934 , 0.0743 , 0.4511 , 0 , 0 , \
>6811	Expression	0.1039 , 1.0545 , 0.0743 , - 0.0028 , 0.0120 , 0.1943 , - 0.0028 , - 0.0934 , 0.0743 , 0.4511 , 0 , 0 , 0 , 0.0304 , \
>6812	Expression	1.0545 , 0.0743 , - 0.0028 , 0.0120 , 0.1943 , - 0.0028 , - 0.0934 , 0.0743 , 0.4511 , 0 , 0 , 0 , 0.0304 , 0.0005 , \
>6813	Expression	0.0743 , - 0.0028 , 0.0120 , 0.1943 , - 0.0028 , - 0.0934 , 0.0743 , 0.4511 , 0 , 0 , 0 , 0.0304 , 0.0005 , - 0.0028 , \
>6814	Expression	- 0.0028 , 0.0120 , 0.1943 , - 0.0028 , - 0.0934 , 0.0743 , 0.4511 , 0 , 0 , 0 , 0.0304 , 0.0005 , - 0.0028 , 0 , \
>6815	Expression	0.0120 , 0.1943 , - 0.0028 , - 0.0934 , 0.0743 , 0.4511 , 0 , 0 , 0 , 0.0304 , 0.0005 , - 0.0028 , 0 , 0.0228
>6816	Expression	0.1943 , - 0.0028 , - 0.0934 , 0.0743 , 0.4511 , 0 , 0 , 0 , 0.0304 , 0.0005 , - 0.0028 , 0 , 0.0228
>6817	Expression	- 0.0028 , - 0.0934 , 0.0743 , 0.4511 , 0 , 0 , 0 , 0.0304 , 0.0005 , - 0.0028 , 0 , 0.0228
>6818	Expression	- 0.0934 , 0.0743 , 0.4511 , 0 , 0 , 0 , 0.0304 , 0.0005 , - 0.0028 , 0 , 0.0228
>6819	Expression	0.0743 , 0.4511 , 0 , 0 , 0 , 0.0304 , 0.0005 , - 0.0028 , 0 , 0.0228
>6820	Expression	0.4511 , 0 , 0 , 0 , 0.0304 , 0.0005 , - 0.0028 , 0 , 0.0228
>6821	Expression	0 , 0 , 0 , 0.0304 , 0.0005 , - 0.0028 , 0 , 0.0228
>6822	Expression	0 , 0 , 0.0304 , 0.0005 , - 0.0028 , 0 , 0.0228
>6823	Expression	0 , 0.0304 , 0.0005 , - 0.0028 , 0 , 0.0228
>6824	Expression	0.0304 , 0.0005 , - 0.0028 , 0 , 0.0228
>6825	Expression	0.0005 , - 0.0028 , 0 , 0.0228
>6826	Expression	- 0.0028 , 0 , 0.0228
>6827	Expression	0 , 0.0228
>6828	PrimaryExpression	0.0228
>6829	PrimaryExpression	0
>6830	UnaryOp	- 0.0028
>6831	PrimaryExpression	0.0028
>6832	UnaryOperator	-
>6833	PrimaryExpression	0.0005
>6834	PrimaryExpression	0.0304
>6835	PrimaryExpression	0
>6836	PrimaryExpression	0
>6837	PrimaryExpression	0
>6838	PrimaryExpression	0.4511
>6839	PrimaryExpression	0.0743
>6840	UnaryOp	- 0.0934
>6841	PrimaryExpression	0.0934
>6842	UnaryOperator	-
>6843	UnaryOp	- 0.0028
>6844	PrimaryExpression	0.0028
>6845	UnaryOperator	-
>6846	PrimaryExpression	0.1943
>6847	PrimaryExpression	0.0120
>6848	UnaryOp	- 0.0028
>6849	PrimaryExpression	0.0028
>6850	UnaryOperator	-
>6851	PrimaryExpression	0.0743
>6852	PrimaryExpression	1.0545
>6853	PrimaryExpression	0.1039
>6854	UnaryOp	- 0.0657
>6855	PrimaryExpression	0.0657
>6856	UnaryOperator	-
>6857	UnaryOp	- 0.1182
>6858	PrimaryExpression	0.1182
>6859	UnaryOperator	-
>6860	PrimaryExpression	0.7657
>6861	PrimaryExpression	0.0005
>6862	UnaryOp	- 0.0934
>6863	PrimaryExpression	0.0934
>6864	UnaryOperator	-
>6865	PrimaryExpression	0.1039
>6866	PrimaryExpression	2.3110
>6867	UnaryOp	- 0.0021
>6868	PrimaryExpression	0.0021
>6869	UnaryOperator	-
>6870	UnaryOp	- 1.9279
>6871	PrimaryExpression	1.9279
>6872	UnaryOperator	-
>6873	PrimaryExpression	0.1211
>6874	PrimaryExpression	0.0304
>6875	UnaryOp	- 0.0028
>6876	PrimaryExpression	0.0028
>6877	UnaryOperator	-
>6878	UnaryOp	- 0.0657
>6879	PrimaryExpression	0.0657
>6880	UnaryOperator	-
>6881	UnaryOp	- 0.0021
>6882	PrimaryExpression	0.0021
>6883	UnaryOperator	-
>6884	PrimaryExpression	0.2643
>6885	UnaryOp	- 0.1103
>6886	PrimaryExpression	0.1103
>6887	UnaryOperator	-
>6888	UnaryOp	- 0.0557
>6889	PrimaryExpression	0.0557
>6890	UnaryOperator	-
>6891	PrimaryExpression	0
>6892	PrimaryExpression	0.1943
>6893	UnaryOp	- 0.1182
>6894	PrimaryExpression	0.1182
>6895	UnaryOperator	-
>6896	UnaryOp	- 1.9279
>6897	PrimaryExpression	1.9279
>6898	UnaryOperator	-
>6899	UnaryOp	- 0.1103
>6900	PrimaryExpression	0.1103
>6901	UnaryOperator	-
>6902	PrimaryExpression	2.1724
>6903	UnaryOp	- 0.1507
>6904	PrimaryExpression	0.1507
>6905	UnaryOperator	-
>6906	PrimaryExpression	0
>6907	PrimaryExpression	0.0120
>6908	PrimaryExpression	0.7657
>6909	PrimaryExpression	0.1211
>6910	UnaryOp	- 0.0557
>6911	PrimaryExpression	0.0557
>6912	UnaryOperator	-
>6913	UnaryOp	- 0.1507
>6914	PrimaryExpression	0.1507
>6915	UnaryOperator	-
>6916	ShiftExpression	constraints . back ( ) -> information << 0.8098
>6917	PrimaryExpression	0.8098
>6918	PtrMemberAccess	constraints . back ( ) -> information
>6919	Identifier	information
>6920	CallExpression	constraints . back ( )
>6921	ArgumentList	 
>6922	Callee	constraints . back
>6923	MemberAccess	constraints . back
>6924	Identifier	back
>6925	Identifier	constraints
>6926	ExpressionStatement	 
>6927	AssignmentExpr	constraints . back ( ) -> secondToFirst = constraints . back ( ) -> firstFrame -> getScaledCamToWorld ( ) \
>6928	MultiplicativeExpression	constraints . back ( ) -> firstFrame -> getScaledCamToWorld ( ) . inverse ( ) * constraints . back ( ) \
>6929	CallExpression	constraints . back ( ) -> secondFrame -> getScaledCamToWorld ( )
>6930	ArgumentList	 
>6931	Callee	constraints . back ( ) -> secondFrame -> getScaledCamToWorld
>6932	PtrMemberAccess	constraints . back ( ) -> secondFrame -> getScaledCamToWorld
>6933	Identifier	getScaledCamToWorld
>6934	PtrMemberAccess	constraints . back ( ) -> secondFrame
>6935	Identifier	secondFrame
>6936	CallExpression	constraints . back ( )
>6937	ArgumentList	 
>6938	Callee	constraints . back
>6939	MemberAccess	constraints . back
>6940	Identifier	back
>6941	Identifier	constraints
>6942	CallExpression	constraints . back ( ) -> firstFrame -> getScaledCamToWorld ( ) . inverse ( )
>6943	ArgumentList	 
>6944	Callee	constraints . back ( ) -> firstFrame -> getScaledCamToWorld ( ) . inverse
>6945	MemberAccess	constraints . back ( ) -> firstFrame -> getScaledCamToWorld ( ) . inverse
>6946	Identifier	inverse
>6947	CallExpression	constraints . back ( ) -> firstFrame -> getScaledCamToWorld ( )
>6948	ArgumentList	 
>6949	Callee	constraints . back ( ) -> firstFrame -> getScaledCamToWorld
>6950	PtrMemberAccess	constraints . back ( ) -> firstFrame -> getScaledCamToWorld
>6951	Identifier	getScaledCamToWorld
>6952	PtrMemberAccess	constraints . back ( ) -> firstFrame
>6953	Identifier	firstFrame
>6954	CallExpression	constraints . back ( )
>6955	ArgumentList	 
>6956	Callee	constraints . back
>6957	MemberAccess	constraints . back
>6958	Identifier	back
>6959	Identifier	constraints
>6960	PtrMemberAccess	constraints . back ( ) -> secondToFirst
>6961	Identifier	secondToFirst
>6962	CallExpression	constraints . back ( )
>6963	ArgumentList	 
>6964	Callee	constraints . back
>6965	MemberAccess	constraints . back
>6966	Identifier	back
>6967	Identifier	constraints
>6968	ExpressionStatement	 
>6969	AssignmentExpr	constraints . back ( ) -> secondFrame = newKeyFrame -> getTrackingParent ( )
>6970	CallExpression	newKeyFrame -> getTrackingParent ( )
>6971	ArgumentList	 
>6972	Callee	newKeyFrame -> getTrackingParent
>6973	PtrMemberAccess	newKeyFrame -> getTrackingParent
>6974	Identifier	getTrackingParent
>6975	Identifier	newKeyFrame
>6976	PtrMemberAccess	constraints . back ( ) -> secondFrame
>6977	Identifier	secondFrame
>6978	CallExpression	constraints . back ( )
>6979	ArgumentList	 
>6980	Callee	constraints . back
>6981	MemberAccess	constraints . back
>6982	Identifier	back
>6983	Identifier	constraints
>6984	ExpressionStatement	 
>6985	AssignmentExpr	constraints . back ( ) -> firstFrame = newKeyFrame
>6986	Identifier	newKeyFrame
>6987	PtrMemberAccess	constraints . back ( ) -> firstFrame
>6988	Identifier	firstFrame
>6989	CallExpression	constraints . back ( )
>6990	ArgumentList	 
>6991	Callee	constraints . back
>6992	MemberAccess	constraints . back
>6993	Identifier	back
>6994	Identifier	constraints
>6995	ExpressionStatement	 
>6996	CallExpression	constraints . push_back ( new KFConstraintStruct ( ) )
>6997	ArgumentList	new KFConstraintStruct ( )
>6998	Argument	new KFConstraintStruct ( )
>6999	UnaryExpression	new KFConstraintStruct ( )
>7000	Callee	constraints . push_back
>7001	MemberAccess	constraints . push_back
>7002	Identifier	push_back
>7003	Identifier	constraints
>7004	ExpressionStatement	 
>7005	CallExpression	poseConsistencyMutex . lock_shared ( )
>7006	ArgumentList	 
>7007	Callee	poseConsistencyMutex . lock_shared
>7008	MemberAccess	poseConsistencyMutex . lock_shared
>7009	Identifier	lock_shared
>7010	Identifier	poseConsistencyMutex
>7011	ExpressionStatement	 
>7012	CallExpression	printf ( \"warning
>7013	ArgumentList	\"warning
>7014	Argument	\"warning
>7015	PrimaryExpression	\"warning
>7016	Callee	printf
>7017	Identifier	printf
>7018	IdentifierDeclStatement	 
>7019	IdentifierDecl	kernelDelta = 5 * sqrt ( 6000 * loopclosureStrictness ) / downweightFac
>7020	AssignmentExpr	kernelDelta = 5 * sqrt ( 6000 * loopclosureStrictness ) / downweightFac
>7021	MultiplicativeExpression	5 * sqrt ( 6000 * loopclosureStrictness ) / downweightFac
>7022	MultiplicativeExpression	sqrt ( 6000 * loopclosureStrictness ) / downweightFac
>7023	Identifier	downweightFac
>7024	CallExpression	sqrt ( 6000 * loopclosureStrictness )
>7025	ArgumentList	6000 * loopclosureStrictness
>7026	Argument	6000 * loopclosureStrictness
>7027	MultiplicativeExpression	6000 * loopclosureStrictness
>7028	Identifier	loopclosureStrictness
>7029	PrimaryExpression	6000
>7030	Callee	sqrt
>7031	Identifier	sqrt
>7032	PrimaryExpression	5
>7033	Identifier	kernelDelta
>7034	Identifier	kernelDelta
>7035	IdentifierDeclType	const float
>7036	IdentifierDeclStatement	 
>7037	IdentifierDecl	downweightFac = 5
>7038	AssignmentExpr	downweightFac = 5
>7039	PrimaryExpression	5
>7040	Identifier	downweightFac
>7041	Identifier	downweightFac
>7042	IdentifierDeclType	float
>7043	CompoundStatement	 
>7044	ExpressionStatement	 
>7045	CallExpression	constraints . push_back ( e2 )
>7046	ArgumentList	e2
>7047	Argument	e2
>7048	Identifier	e2
>7049	Callee	constraints . push_back
>7050	MemberAccess	constraints . push_back
>7051	Identifier	push_back
>7052	Identifier	constraints
>7053	ExpressionStatement	 
>7054	CallExpression	constraints . push_back ( e1 )
>7055	ArgumentList	e1
>7056	Argument	e1
>7057	Identifier	e1
>7058	Callee	constraints . push_back
>7059	MemberAccess	constraints . push_back
>7060	Identifier	push_back
>7061	Identifier	constraints
>7062	Condition	 
>7063	EqualityExpression	e1 != 0
>7064	PrimaryExpression	0
>7065	Identifier	e1
>7066	IfStatement	if ( enablePrintDebugInfo && printConstraintSearchInfo )
>7067	ExpressionStatement	 
>7068	CallExpression	printf ( \" PARENT (0)\n\" )
>7069	ArgumentList	\" PARENT (0)\n\"
>7070	Argument	\" PARENT (0)\n\"
>7071	PrimaryExpression	\" PARENT (0)\n\"
>7072	Callee	printf
>7073	Identifier	printf
>7074	Condition	 
>7075	AndExpression	enablePrintDebugInfo && printConstraintSearchInfo
>7076	Identifier	printConstraintSearchInfo
>7077	Identifier	enablePrintDebugInfo
>7078	ExpressionStatement	 
>7079	CallExpression	testConstraint ( parent , e1 , e2 , candidateToFrame_initialEstimateMap [ parent ] , 100 )
>7080	ArgumentList	parent
>7081	Argument	100
>7082	PrimaryExpression	100
>7083	Argument	candidateToFrame_initialEstimateMap [ parent ]
>7084	ArrayIndexing	candidateToFrame_initialEstimateMap [ parent ]
>7085	Identifier	parent
>7086	Identifier	candidateToFrame_initialEstimateMap
>7087	Argument	e2
>7088	Identifier	e2
>7089	Argument	e1
>7090	Identifier	e1
>7091	Argument	parent
>7092	Identifier	parent
>7093	Callee	testConstraint
>7094	Identifier	testConstraint
>7095	IdentifierDeclStatement	 
>7096	IdentifierDecl	* e2 = 0
>7097	AssignmentExpr	* e2 = 0
>7098	PrimaryExpression	0
>7099	Identifier	e2
>7100	Identifier	e2
>7101	IdentifierDeclType	KFConstraintStruct *
>7102	IdentifierDeclStatement	 
>7103	IdentifierDecl	* e1 = 0
>7104	AssignmentExpr	* e1 = 0
>7105	PrimaryExpression	0
>7106	Identifier	e1
>7107	Identifier	e1
>7108	IdentifierDeclType	KFConstraintStruct *
>7109	Condition	 
>7110	AndExpression	parent != 0 && forceParent
>7111	Identifier	forceParent
>7112	EqualityExpression	parent != 0
>7113	PrimaryExpression	0
>7114	Identifier	parent
>7115	CompoundStatement	 
>7116	IfStatement	if ( e1 != 0 )
>7117	CompoundStatement	 
>7118	ExpressionStatement	 
>7119	CallExpression	constraints . push_back ( e2 )
>7120	ArgumentList	e2
>7121	Argument	e2
>7122	Identifier	e2
>7123	Callee	constraints . push_back
>7124	MemberAccess	constraints . push_back
>7125	Identifier	push_back
>7126	Identifier	constraints
>7127	ExpressionStatement	 
>7128	CallExpression	constraints . push_back ( e1 )
>7129	ArgumentList	e1
>7130	Argument	e1
>7131	Identifier	e1
>7132	Callee	constraints . push_back
>7133	MemberAccess	constraints . push_back
>7134	Identifier	push_back
>7135	Identifier	constraints
>7136	Condition	 
>7137	EqualityExpression	e1 != 0
>7138	PrimaryExpression	0
>7139	Identifier	e1
>7140	IfStatement	if ( enablePrintDebugInfo && printConstraintSearchInfo )
>7141	ExpressionStatement	 
>7142	CallExpression	printf ( \" FAR (%d)\n\" , distancesToNewKeyFrame . at ( candidate ) )
>7143	ArgumentList	\" FAR (%d)\n\"
>7144	Argument	distancesToNewKeyFrame . at ( candidate )
>7145	CallExpression	distancesToNewKeyFrame . at ( candidate )
>7146	ArgumentList	candidate
>7147	Argument	candidate
>7148	Identifier	candidate
>7149	Callee	distancesToNewKeyFrame . at
>7150	MemberAccess	distancesToNewKeyFrame . at
>7151	Identifier	at
>7152	Identifier	distancesToNewKeyFrame
>7153	Argument	\" FAR (%d)\n\"
>7154	PrimaryExpression	\" FAR (%d)\n\"
>7155	Callee	printf
>7156	Identifier	printf
>7157	Condition	 
>7158	AndExpression	enablePrintDebugInfo && printConstraintSearchInfo
>7159	Identifier	printConstraintSearchInfo
>7160	Identifier	enablePrintDebugInfo
>7161	ExpressionStatement	 
>7162	CallExpression	testConstraint ( candidate , e1 , e2 , Sim3 ( ) , loopclosureStrictness )
>7163	ArgumentList	candidate
>7164	Argument	loopclosureStrictness
>7165	Identifier	loopclosureStrictness
>7166	Argument	Sim3 ( )
>7167	CallExpression	Sim3 ( )
>7168	ArgumentList	 
>7169	Callee	Sim3
>7170	Identifier	Sim3
>7171	Argument	e2
>7172	Identifier	e2
>7173	Argument	e1
>7174	Identifier	e1
>7175	Argument	candidate
>7176	Identifier	candidate
>7177	Callee	testConstraint
>7178	Identifier	testConstraint
>7179	IdentifierDeclStatement	 
>7180	IdentifierDecl	* e2 = 0
>7181	AssignmentExpr	* e2 = 0
>7182	PrimaryExpression	0
>7183	Identifier	e2
>7184	Identifier	e2
>7185	IdentifierDeclType	KFConstraintStruct *
>7186	IdentifierDeclStatement	 
>7187	IdentifierDecl	* e1 = 0
>7188	AssignmentExpr	* e1 = 0
>7189	PrimaryExpression	0
>7190	Identifier	e1
>7191	Identifier	e1
>7192	IdentifierDeclType	KFConstraintStruct *
>7193	Statement	 
>7194	Statement	 
>7195	Label	 
>7196	Identifier	candidate
>7197	Statement	 
>7198	Statement	 
>7199	Statement	 
>7200	Statement	 
>7201	CompoundStatement	 
>7202	IfStatement	if ( e1 != 0 )
>7203	CompoundStatement	 
>7204	ForStatement	for ( unsigned int k = 0 ; k < farCandidates . size ( ) ; k ++ )
>7205	CompoundStatement	 
>7206	IfStatement	if ( farCandidates [ k ] == candidate )
>7207	CompoundStatement	 
>7208	ExpressionStatement	 
>7209	CallExpression	farCandidates . pop_back ( )
>7210	ArgumentList	 
>7211	Callee	farCandidates . pop_back
>7212	MemberAccess	farCandidates . pop_back
>7213	Identifier	pop_back
>7214	Identifier	farCandidates
>7215	ExpressionStatement	 
>7216	AssignmentExpr	farCandidates [ k ] = farCandidates . back ( )
>7217	CallExpression	farCandidates . back ( )
>7218	ArgumentList	 
>7219	Callee	farCandidates . back
>7220	MemberAccess	farCandidates . back
>7221	Identifier	back
>7222	Identifier	farCandidates
>7223	ArrayIndexing	farCandidates [ k ]
>7224	Identifier	k
>7225	Identifier	farCandidates
>7226	IfStatement	if ( enablePrintDebugInfo && printConstraintSearchInfo )
>7227	ExpressionStatement	 
>7228	CallExpression	printf ( \" DELETED %d from far, as close was successful!\n\" , candidate -> id ( ) )
>7229	ArgumentList	\" DELETED %d from far, as close was successful!\n\"
>7230	Argument	candidate -> id ( )
>7231	CallExpression	candidate -> id ( )
>7232	ArgumentList	 
>7233	Callee	candidate -> id
>7234	PtrMemberAccess	candidate -> id
>7235	Identifier	id
>7236	Identifier	candidate
>7237	Argument	\" DELETED %d from far, as close was successful!\n\"
>7238	PrimaryExpression	\" DELETED %d from far, as close was successful!\n\"
>7239	Callee	printf
>7240	Identifier	printf
>7241	Condition	 
>7242	AndExpression	enablePrintDebugInfo && printConstraintSearchInfo
>7243	Identifier	printConstraintSearchInfo
>7244	Identifier	enablePrintDebugInfo
>7245	Condition	 
>7246	EqualityExpression	farCandidates [ k ] == candidate
>7247	Identifier	candidate
>7248	ArrayIndexing	farCandidates [ k ]
>7249	Identifier	k
>7250	Identifier	farCandidates
>7251	IncDecOp	 
>7252	IncDec	++
>7253	Identifier	k
>7254	Condition	 
>7255	RelationalExpression	k < farCandidates . size ( )
>7256	CallExpression	farCandidates . size ( )
>7257	ArgumentList	 
>7258	Callee	farCandidates . size
>7259	MemberAccess	farCandidates . size
>7260	Identifier	size
>7261	Identifier	farCandidates
>7262	Identifier	k
>7263	ForInit	 
>7264	IdentifierDeclStatement	unsigned int k = 0 ;
>7265	IdentifierDecl	k = 0
>7266	AssignmentExpr	k = 0
>7267	PrimaryExpression	0
>7268	Identifier	k
>7269	Identifier	k
>7270	IdentifierDeclType	unsigned int
>7271	ExpressionStatement	 
>7272	CallExpression	constraints . push_back ( e2 )
>7273	ArgumentList	e2
>7274	Argument	e2
>7275	Identifier	e2
>7276	Callee	constraints . push_back
>7277	MemberAccess	constraints . push_back
>7278	Identifier	push_back
>7279	Identifier	constraints
>7280	ExpressionStatement	 
>7281	CallExpression	constraints . push_back ( e1 )
>7282	ArgumentList	e1
>7283	Argument	e1
>7284	Identifier	e1
>7285	Callee	constraints . push_back
>7286	MemberAccess	constraints . push_back
>7287	Identifier	push_back
>7288	Identifier	constraints
>7289	Condition	 
>7290	EqualityExpression	e1 != 0
>7291	PrimaryExpression	0
>7292	Identifier	e1
>7293	IfStatement	if ( enablePrintDebugInfo && printConstraintSearchInfo )
>7294	ExpressionStatement	 
>7295	CallExpression	printf ( \" CLOSE (%d)\n\" , distancesToNewKeyFrame . at ( candidate ) )
>7296	ArgumentList	\" CLOSE (%d)\n\"
>7297	Argument	distancesToNewKeyFrame . at ( candidate )
>7298	CallExpression	distancesToNewKeyFrame . at ( candidate )
>7299	ArgumentList	candidate
>7300	Argument	candidate
>7301	Identifier	candidate
>7302	Callee	distancesToNewKeyFrame . at
>7303	MemberAccess	distancesToNewKeyFrame . at
>7304	Identifier	at
>7305	Identifier	distancesToNewKeyFrame
>7306	Argument	\" CLOSE (%d)\n\"
>7307	PrimaryExpression	\" CLOSE (%d)\n\"
>7308	Callee	printf
>7309	Identifier	printf
>7310	Condition	 
>7311	AndExpression	enablePrintDebugInfo && printConstraintSearchInfo
>7312	Identifier	printConstraintSearchInfo
>7313	Identifier	enablePrintDebugInfo
>7314	ExpressionStatement	 
>7315	CallExpression	testConstraint ( candidate , e1 , e2 , candidateToFrame_initialEstimateMap [ candidate ] , loopclosureStrictness )
>7316	ArgumentList	candidate
>7317	Argument	loopclosureStrictness
>7318	Identifier	loopclosureStrictness
>7319	Argument	candidateToFrame_initialEstimateMap [ candidate ]
>7320	ArrayIndexing	candidateToFrame_initialEstimateMap [ candidate ]
>7321	Identifier	candidate
>7322	Identifier	candidateToFrame_initialEstimateMap
>7323	Argument	e2
>7324	Identifier	e2
>7325	Argument	e1
>7326	Identifier	e1
>7327	Argument	candidate
>7328	Identifier	candidate
>7329	Callee	testConstraint
>7330	Identifier	testConstraint
>7331	IdentifierDeclStatement	 
>7332	IdentifierDecl	* e2 = 0
>7333	AssignmentExpr	* e2 = 0
>7334	PrimaryExpression	0
>7335	Identifier	e2
>7336	Identifier	e2
>7337	IdentifierDeclType	KFConstraintStruct *
>7338	IdentifierDeclStatement	 
>7339	IdentifierDecl	* e1 = 0
>7340	AssignmentExpr	* e1 = 0
>7341	PrimaryExpression	0
>7342	Identifier	e1
>7343	Identifier	e1
>7344	IdentifierDeclType	KFConstraintStruct *
>7345	Statement	 
>7346	Statement	 
>7347	Label	 
>7348	Identifier	candidate
>7349	Statement	 
>7350	Statement	 
>7351	Statement	 
>7352	Statement	 
>7353	ExpressionStatement	 
>7354	CallExpression	newKFTrackingReference -> importFrame ( newKeyFrame )
>7355	ArgumentList	newKeyFrame
>7356	Argument	newKeyFrame
>7357	Identifier	newKeyFrame
>7358	Callee	newKFTrackingReference -> importFrame
>7359	PtrMemberAccess	newKFTrackingReference -> importFrame
>7360	Identifier	importFrame
>7361	Identifier	newKFTrackingReference
>7362	WhileStatement	while ( ( int ) farCandidates . size ( ) > maxNumFarCandidates )
>7363	CompoundStatement	 
>7364	IfStatement	if ( farCandidates [ toDelete ] != fabMapResult )
>7365	CompoundStatement	 
>7366	ExpressionStatement	 
>7367	CallExpression	farCandidates . pop_back ( )
>7368	ArgumentList	 
>7369	Callee	farCandidates . pop_back
>7370	MemberAccess	farCandidates . pop_back
>7371	Identifier	pop_back
>7372	Identifier	farCandidates
>7373	ExpressionStatement	 
>7374	AssignmentExpr	farCandidates [ toDelete ] = farCandidates . back ( )
>7375	CallExpression	farCandidates . back ( )
>7376	ArgumentList	 
>7377	Callee	farCandidates . back
>7378	MemberAccess	farCandidates . back
>7379	Identifier	back
>7380	Identifier	farCandidates
>7381	ArrayIndexing	farCandidates [ toDelete ]
>7382	Identifier	toDelete
>7383	Identifier	farCandidates
>7384	Condition	 
>7385	EqualityExpression	farCandidates [ toDelete ] != fabMapResult
>7386	Identifier	fabMapResult
>7387	ArrayIndexing	farCandidates [ toDelete ]
>7388	Identifier	toDelete
>7389	Identifier	farCandidates
>7390	IdentifierDeclStatement	 
>7391	IdentifierDecl	toDelete = rand ( ) % farCandidates . size ( )
>7392	AssignmentExpr	toDelete = rand ( ) % farCandidates . size ( )
>7393	MultiplicativeExpression	rand ( ) % farCandidates . size ( )
>7394	CallExpression	farCandidates . size ( )
>7395	ArgumentList	 
>7396	Callee	farCandidates . size
>7397	MemberAccess	farCandidates . size
>7398	Identifier	size
>7399	Identifier	farCandidates
>7400	CallExpression	rand ( )
>7401	ArgumentList	 
>7402	Callee	rand
>7403	Identifier	rand
>7404	Identifier	toDelete
>7405	Identifier	toDelete
>7406	IdentifierDeclType	int
>7407	Condition	 
>7408	RelationalExpression	( int ) farCandidates . size ( ) > maxNumFarCandidates
>7409	Identifier	maxNumFarCandidates
>7410	CastExpression	( int ) farCandidates . size ( )
>7411	CallExpression	farCandidates . size ( )
>7412	ArgumentList	 
>7413	Callee	farCandidates . size
>7414	MemberAccess	farCandidates . size
>7415	Identifier	size
>7416	Identifier	farCandidates
>7417	CastTarget	int
>7418	IfStatement	if ( maxNumFarCandidates < 5 )
>7419	ExpressionStatement	 
>7420	AssignmentExpr	maxNumFarCandidates = 5
>7421	PrimaryExpression	5
>7422	Identifier	maxNumFarCandidates
>7423	Condition	 
>7424	RelationalExpression	maxNumFarCandidates < 5
>7425	PrimaryExpression	5
>7426	Identifier	maxNumFarCandidates
>7427	IdentifierDeclStatement	 
>7428	IdentifierDecl	maxNumFarCandidates = ( maxLoopClosureCandidates + 1 ) / 2
>7429	AssignmentExpr	maxNumFarCandidates = ( maxLoopClosureCandidates + 1 ) / 2
>7430	MultiplicativeExpression	( maxLoopClosureCandidates + 1 ) / 2
>7431	PrimaryExpression	2
>7432	AdditiveExpression	maxLoopClosureCandidates + 1
>7433	PrimaryExpression	1
>7434	Identifier	maxLoopClosureCandidates
>7435	Identifier	maxNumFarCandidates
>7436	Identifier	maxNumFarCandidates
>7437	IdentifierDeclType	int
>7438	WhileStatement	while ( ( int ) closeCandidates . size ( ) > maxLoopClosureCandidates )
>7439	CompoundStatement	 
>7440	ExpressionStatement	 
>7441	CallExpression	closeCandidates . erase ( worst )
>7442	ArgumentList	worst
>7443	Argument	worst
>7444	Identifier	worst
>7445	Callee	closeCandidates . erase
>7446	MemberAccess	closeCandidates . erase
>7447	Identifier	erase
>7448	Identifier	closeCandidates
>7449	CompoundStatement	 
>7450	IfStatement	if ( neightboursInCandidates > worstNeighbours || worst == 0 )
>7451	CompoundStatement	 
>7452	ExpressionStatement	 
>7453	AssignmentExpr	worstNeighbours = neightboursInCandidates
>7454	Identifier	neightboursInCandidates
>7455	Identifier	worstNeighbours
>7456	ExpressionStatement	 
>7457	AssignmentExpr	worst = f
>7458	Identifier	f
>7459	Identifier	worst
>7460	Condition	 
>7461	OrExpression	neightboursInCandidates > worstNeighbours || worst == 0
>7462	EqualityExpression	worst == 0
>7463	PrimaryExpression	0
>7464	Identifier	worst
>7465	RelationalExpression	neightboursInCandidates > worstNeighbours
>7466	Identifier	worstNeighbours
>7467	Identifier	neightboursInCandidates
>7468	IfStatement	if ( closeCandidates . find ( n ) != closeCandidates . end ( ) )
>7469	ExpressionStatement	 
>7470	IncDecOp	neightboursInCandidates ++
>7471	IncDec	++
>7472	Identifier	neightboursInCandidates
>7473	Condition	 
>7474	EqualityExpression	closeCandidates . find ( n ) != closeCandidates . end ( )
>7475	CallExpression	closeCandidates . end ( )
>7476	ArgumentList	 
>7477	Callee	closeCandidates . end
>7478	MemberAccess	closeCandidates . end
>7479	Identifier	end
>7480	Identifier	closeCandidates
>7481	CallExpression	closeCandidates . find ( n )
>7482	ArgumentList	n
>7483	Argument	n
>7484	Identifier	n
>7485	Callee	closeCandidates . find
>7486	MemberAccess	closeCandidates . find
>7487	Identifier	find
>7488	Identifier	closeCandidates
>7489	Statement	 
>7490	Statement	 
>7491	Statement	 
>7492	Statement	 
>7493	Label	 
>7494	Identifier	n
>7495	Statement	 
>7496	Statement	 
>7497	Statement	 
>7498	Statement	 
>7499	IdentifierDeclStatement	 
>7500	IdentifierDecl	neightboursInCandidates = 0
>7501	AssignmentExpr	neightboursInCandidates = 0
>7502	PrimaryExpression	0
>7503	Identifier	neightboursInCandidates
>7504	Identifier	neightboursInCandidates
>7505	IdentifierDeclType	int
>7506	Statement	 
>7507	Statement	 
>7508	Label	 
>7509	Identifier	f
>7510	Statement	 
>7511	Statement	 
>7512	Statement	 
>7513	Statement	 
>7514	IdentifierDeclStatement	 
>7515	IdentifierDecl	worstNeighbours = 0
>7516	AssignmentExpr	worstNeighbours = 0
>7517	PrimaryExpression	0
>7518	Identifier	worstNeighbours
>7519	Identifier	worstNeighbours
>7520	IdentifierDeclType	int
>7521	IdentifierDeclStatement	 
>7522	IdentifierDecl	* worst = 0
>7523	AssignmentExpr	* worst = 0
>7524	PrimaryExpression	0
>7525	Identifier	worst
>7526	Identifier	worst
>7527	IdentifierDeclType	Frame *
>7528	Condition	 
>7529	RelationalExpression	( int ) closeCandidates . size ( ) > maxLoopClosureCandidates
>7530	Identifier	maxLoopClosureCandidates
>7531	CastExpression	( int ) closeCandidates . size ( )
>7532	CallExpression	closeCandidates . size ( )
>7533	ArgumentList	 
>7534	Callee	closeCandidates . size
>7535	MemberAccess	closeCandidates . size
>7536	Identifier	size
>7537	Identifier	closeCandidates
>7538	CastTarget	int
>7539	IfStatement	if ( enablePrintDebugInfo && printConstraintSearchInfo )
>7540	ExpressionStatement	 
>7541	CallExpression	printf ( \"Final Loop-Closure Candidates
>7542	ArgumentList	\"Final Loop-Closure Candidates
>7543	Argument	( int ) closeCandidates . size ( ) + ( int ) farCandidates . size ( )
>7544	AdditiveExpression	( int ) closeCandidates . size ( ) + ( int ) farCandidates . size ( )
>7545	CastExpression	( int ) farCandidates . size ( )
>7546	CallExpression	farCandidates . size ( )
>7547	ArgumentList	 
>7548	Callee	farCandidates . size
>7549	MemberAccess	farCandidates . size
>7550	Identifier	size
>7551	Identifier	farCandidates
>7552	CastTarget	int
>7553	CastExpression	( int ) closeCandidates . size ( )
>7554	CallExpression	closeCandidates . size ( )
>7555	ArgumentList	 
>7556	Callee	closeCandidates . size
>7557	MemberAccess	closeCandidates . size
>7558	Identifier	size
>7559	Identifier	closeCandidates
>7560	CastTarget	int
>7561	Argument	farInconsistent
>7562	Identifier	farInconsistent
>7563	Argument	farFailed
>7564	Identifier	farFailed
>7565	Argument	farAll
>7566	Identifier	farAll
>7567	Argument	( int ) farCandidates . size ( )
>7568	CastExpression	( int ) farCandidates . size ( )
>7569	CallExpression	farCandidates . size ( )
>7570	ArgumentList	 
>7571	Callee	farCandidates . size
>7572	MemberAccess	farCandidates . size
>7573	Identifier	size
>7574	Identifier	farCandidates
>7575	CastTarget	int
>7576	Argument	closeInconsistent
>7577	Identifier	closeInconsistent
>7578	Argument	closeFailed
>7579	Identifier	closeFailed
>7580	Argument	closeAll
>7581	Identifier	closeAll
>7582	Argument	( int ) closeCandidates . size ( )
>7583	CastExpression	( int ) closeCandidates . size ( )
>7584	CallExpression	closeCandidates . size ( )
>7585	ArgumentList	 
>7586	Callee	closeCandidates . size
>7587	MemberAccess	closeCandidates . size
>7588	Identifier	size
>7589	Identifier	closeCandidates
>7590	CastTarget	int
>7591	Argument	\"Final Loop-Closure Candidates
>7592	PrimaryExpression	\"Final Loop-Closure Candidates
>7593	Callee	printf
>7594	Identifier	printf
>7595	Condition	 
>7596	AndExpression	enablePrintDebugInfo && printConstraintSearchInfo
>7597	Identifier	printConstraintSearchInfo
>7598	Identifier	enablePrintDebugInfo
>7599	ForStatement	for ( unsigned int i = 0 ; i < farCandidates . size ( ) ; i ++ )
>7600	CompoundStatement	 
>7601	IfStatement	if ( skip )
>7602	CompoundStatement	 
>7603	ExpressionStatement	 
>7604	IncDecOp	i --
>7605	IncDec	--
>7606	Identifier	i
>7607	ExpressionStatement	 
>7608	CallExpression	farCandidates . pop_back ( )
>7609	ArgumentList	 
>7610	Callee	farCandidates . pop_back
>7611	MemberAccess	farCandidates . pop_back
>7612	Identifier	pop_back
>7613	Identifier	farCandidates
>7614	ExpressionStatement	 
>7615	AssignmentExpr	farCandidates [ i ] = farCandidates . back ( )
>7616	CallExpression	farCandidates . back ( )
>7617	ArgumentList	 
>7618	Callee	farCandidates . back
>7619	MemberAccess	farCandidates . back
>7620	Identifier	back
>7621	Identifier	farCandidates
>7622	ArrayIndexing	farCandidates [ i ]
>7623	Identifier	i
>7624	Identifier	farCandidates
>7625	IfStatement	if ( enablePrintDebugInfo && printConstraintSearchInfo )
>7626	ExpressionStatement	 
>7627	CallExpression	printf ( \"SKIPPING %d on %d (FAR), cause we already have tried it.\n\" , farCandidates [ i ] -> id ( ) , newKeyFrame \
>7628	ArgumentList	\"SKIPPING %d on %d (FAR), cause we already have tried it.\n\"
>7629	Argument	newKeyFrame -> id ( )
>7630	CallExpression	newKeyFrame -> id ( )
>7631	ArgumentList	 
>7632	Callee	newKeyFrame -> id
>7633	PtrMemberAccess	newKeyFrame -> id
>7634	Identifier	id
>7635	Identifier	newKeyFrame
>7636	Argument	farCandidates [ i ] -> id ( )
>7637	CallExpression	farCandidates [ i ] -> id ( )
>7638	ArgumentList	 
>7639	Callee	farCandidates [ i ] -> id
>7640	PtrMemberAccess	farCandidates [ i ] -> id
>7641	Identifier	id
>7642	ArrayIndexing	farCandidates [ i ]
>7643	Identifier	i
>7644	Identifier	farCandidates
>7645	Argument	\"SKIPPING %d on %d (FAR), cause we already have tried it.\n\"
>7646	PrimaryExpression	\"SKIPPING %d on %d (FAR), cause we already have tried it.\n\"
>7647	Callee	printf
>7648	Identifier	printf
>7649	Condition	 
>7650	AndExpression	enablePrintDebugInfo && printConstraintSearchInfo
>7651	Identifier	printConstraintSearchInfo
>7652	Identifier	enablePrintDebugInfo
>7653	Condition	 
>7654	Identifier	skip
>7655	CompoundStatement	 
>7656	IfStatement	if ( ( it -> second ) . log ( ) . norm ( ) < 0.2 )
>7657	CompoundStatement	 
>7658	BreakStatement	 
>7659	ExpressionStatement	 
>7660	AssignmentExpr	skip = true
>7661	Identifier	true
>7662	Identifier	skip
>7663	Condition	 
>7664	RelationalExpression	( it -> second ) . log ( ) . norm ( ) < 0.2
>7665	PrimaryExpression	0.2
>7666	CallExpression	( it -> second ) . log ( ) . norm ( )
>7667	ArgumentList	 
>7668	Callee	( it -> second ) . log ( ) . norm
>7669	MemberAccess	( it -> second ) . log ( ) . norm
>7670	Identifier	norm
>7671	CallExpression	( it -> second ) . log ( )
>7672	ArgumentList	 
>7673	Callee	( it -> second ) . log
>7674	MemberAccess	( it -> second ) . log
>7675	Identifier	log
>7676	PtrMemberAccess	it -> second
>7677	Identifier	second
>7678	Identifier	it
>7679	Statement	 
>7680	Statement	 
>7681	Statement	 
>7682	ExpressionStatement	 
>7683	EqualityExpression	it != range . second
>7684	MemberAccess	range . second
>7685	Identifier	second
>7686	Identifier	range
>7687	Identifier	it
>7688	ExpressionStatement	 
>7689	AssignmentExpr	it = range . first
>7690	MemberAccess	range . first
>7691	Identifier	first
>7692	Identifier	range
>7693	Identifier	it
>7694	Statement	 
>7695	Statement	 
>7696	Statement	 
>7697	IdentifierDeclStatement	 
>7698	IdentifierDecl	skip = false
>7699	AssignmentExpr	skip = false
>7700	Identifier	false
>7701	Identifier	false
>7702	Identifier	skip
>7703	IdentifierDeclType	bool
>7704	ExpressionStatement	 
>7705	AssignmentExpr	range = newKeyFrame -> trackingFailed . equal_range ( farCandidates [ i ] )
>7706	CallExpression	newKeyFrame -> trackingFailed . equal_range ( farCandidates [ i ] )
>7707	ArgumentList	farCandidates [ i ]
>7708	Argument	farCandidates [ i ]
>7709	ArrayIndexing	farCandidates [ i ]
>7710	Identifier	i
>7711	Identifier	farCandidates
>7712	Callee	newKeyFrame -> trackingFailed . equal_range
>7713	MemberAccess	newKeyFrame -> trackingFailed . equal_range
>7714	Identifier	equal_range
>7715	PtrMemberAccess	newKeyFrame -> trackingFailed
>7716	Identifier	trackingFailed
>7717	Identifier	newKeyFrame
>7718	Identifier	range
>7719	Statement	 
>7720	IfStatement	if ( newKeyFrame -> trackingFailed . find ( farCandidates [ i ] ) == newKeyFrame -> trackingFailed . end ( ) )
>7721	ContinueStatement	 
>7722	Condition	 
>7723	EqualityExpression	newKeyFrame -> trackingFailed . find ( farCandidates [ i ] ) == newKeyFrame -> trackingFailed . end ( )
>7724	CallExpression	newKeyFrame -> trackingFailed . end ( )
>7725	ArgumentList	 
>7726	Callee	newKeyFrame -> trackingFailed . end
>7727	MemberAccess	newKeyFrame -> trackingFailed . end
>7728	Identifier	end
>7729	PtrMemberAccess	newKeyFrame -> trackingFailed
>7730	Identifier	trackingFailed
>7731	Identifier	newKeyFrame
>7732	CallExpression	newKeyFrame -> trackingFailed . find ( farCandidates [ i ] )
>7733	ArgumentList	farCandidates [ i ]
>7734	Argument	farCandidates [ i ]
>7735	ArrayIndexing	farCandidates [ i ]
>7736	Identifier	i
>7737	Identifier	farCandidates
>7738	Callee	newKeyFrame -> trackingFailed . find
>7739	MemberAccess	newKeyFrame -> trackingFailed . find
>7740	Identifier	find
>7741	PtrMemberAccess	newKeyFrame -> trackingFailed
>7742	Identifier	trackingFailed
>7743	Identifier	newKeyFrame
>7744	IncDecOp	 
>7745	IncDec	++
>7746	Identifier	i
>7747	Condition	 
>7748	RelationalExpression	i < farCandidates . size ( )
>7749	CallExpression	farCandidates . size ( )
>7750	ArgumentList	 
>7751	Callee	farCandidates . size
>7752	MemberAccess	farCandidates . size
>7753	Identifier	size
>7754	Identifier	farCandidates
>7755	Identifier	i
>7756	ForInit	 
>7757	IdentifierDeclStatement	unsigned int i = 0 ;
>7758	IdentifierDecl	i = 0
>7759	AssignmentExpr	i = 0
>7760	PrimaryExpression	0
>7761	Identifier	i
>7762	Identifier	i
>7763	IdentifierDeclType	unsigned int
>7764	ForStatement	for ( std 
>7765	CompoundStatement	 
>7766	IfStatement	if ( skip )
>7767	ElseStatement	else
>7768	ExpressionStatement	 
>7769	UnaryExpression	++ c
>7770	Identifier	c
>7771	IncDec	++
>7772	CompoundStatement	 
>7773	ExpressionStatement	 
>7774	AssignmentExpr	c = closeCandidates . erase ( c )
>7775	CallExpression	closeCandidates . erase ( c )
>7776	ArgumentList	c
>7777	Argument	c
>7778	Identifier	c
>7779	Callee	closeCandidates . erase
>7780	MemberAccess	closeCandidates . erase
>7781	Identifier	erase
>7782	Identifier	closeCandidates
>7783	Identifier	c
>7784	IfStatement	if ( enablePrintDebugInfo && printConstraintSearchInfo )
>7785	ExpressionStatement	 
>7786	CallExpression	printf ( \"SKIPPING %d on %d (NEAR), cause we already have tried it.\n\" , ( * c ) -> id ( ) , newKeyFrame -> id ( ) )
>7787	ArgumentList	\"SKIPPING %d on %d (NEAR), cause we already have tried it.\n\"
>7788	Argument	newKeyFrame -> id ( )
>7789	CallExpression	newKeyFrame -> id ( )
>7790	ArgumentList	 
>7791	Callee	newKeyFrame -> id
>7792	PtrMemberAccess	newKeyFrame -> id
>7793	Identifier	id
>7794	Identifier	newKeyFrame
>7795	Argument	( * c ) -> id ( )
>7796	CallExpression	( * c ) -> id ( )
>7797	ArgumentList	 
>7798	Callee	( * c ) -> id
>7799	PtrMemberAccess	( * c ) -> id
>7800	Identifier	id
>7801	UnaryOp	* c
>7802	Identifier	c
>7803	UnaryOperator	*
>7804	Argument	\"SKIPPING %d on %d (NEAR), cause we already have tried it.\n\"
>7805	PrimaryExpression	\"SKIPPING %d on %d (NEAR), cause we already have tried it.\n\"
>7806	Callee	printf
>7807	Identifier	printf
>7808	Condition	 
>7809	AndExpression	enablePrintDebugInfo && printConstraintSearchInfo
>7810	Identifier	printConstraintSearchInfo
>7811	Identifier	enablePrintDebugInfo
>7812	Condition	 
>7813	Identifier	skip
>7814	CompoundStatement	 
>7815	IfStatement	if ( ( f2c * it -> second ) . log ( ) . norm ( ) < 0.1 )
>7816	CompoundStatement	 
>7817	BreakStatement	 
>7818	ExpressionStatement	 
>7819	AssignmentExpr	skip = true
>7820	Identifier	true
>7821	Identifier	skip
>7822	Condition	 
>7823	RelationalExpression	( f2c * it -> second ) . log ( ) . norm ( ) < 0.1
>7824	PrimaryExpression	0.1
>7825	CallExpression	( f2c * it -> second ) . log ( ) . norm ( )
>7826	ArgumentList	 
>7827	Callee	( f2c * it -> second ) . log ( ) . norm
>7828	MemberAccess	( f2c * it -> second ) . log ( ) . norm
>7829	Identifier	norm
>7830	CallExpression	( f2c * it -> second ) . log ( )
>7831	ArgumentList	 
>7832	Callee	( f2c * it -> second ) . log
>7833	MemberAccess	( f2c * it -> second ) . log
>7834	Identifier	log
>7835	MultiplicativeExpression	f2c * it -> second
>7836	PtrMemberAccess	it -> second
>7837	Identifier	second
>7838	Identifier	it
>7839	Identifier	f2c
>7840	Statement	 
>7841	Statement	 
>7842	Statement	 
>7843	ExpressionStatement	 
>7844	EqualityExpression	it != range . second
>7845	MemberAccess	range . second
>7846	Identifier	second
>7847	Identifier	range
>7848	Identifier	it
>7849	ExpressionStatement	 
>7850	AssignmentExpr	it = range . first
>7851	MemberAccess	range . first
>7852	Identifier	first
>7853	Identifier	range
>7854	Identifier	it
>7855	Statement	 
>7856	Statement	 
>7857	Statement	 
>7858	IdentifierDeclStatement	 
>7859	IdentifierDecl	f2c = candidateToFrame_initialEstimateMap [ * c ] . inverse ( )
>7860	AssignmentExpr	f2c = candidateToFrame_initialEstimateMap [ * c ] . inverse ( )
>7861	CallExpression	candidateToFrame_initialEstimateMap [ * c ] . inverse ( )
>7862	ArgumentList	 
>7863	Callee	candidateToFrame_initialEstimateMap [ * c ] . inverse
>7864	MemberAccess	candidateToFrame_initialEstimateMap [ * c ] . inverse
>7865	Identifier	inverse
>7866	ArrayIndexing	candidateToFrame_initialEstimateMap [ * c ]
>7867	UnaryOp	* c
>7868	Identifier	c
>7869	UnaryOperator	*
>7870	Identifier	candidateToFrame_initialEstimateMap
>7871	Identifier	f2c
>7872	Identifier	f2c
>7873	IdentifierDeclType	Sim3
>7874	IdentifierDeclStatement	 
>7875	IdentifierDecl	skip = false
>7876	AssignmentExpr	skip = false
>7877	Identifier	false
>7878	Identifier	false
>7879	Identifier	skip
>7880	IdentifierDeclType	bool
>7881	ExpressionStatement	 
>7882	AssignmentExpr	range = newKeyFrame -> trackingFailed . equal_range ( * c )
>7883	CallExpression	newKeyFrame -> trackingFailed . equal_range ( * c )
>7884	ArgumentList	* c
>7885	Argument	* c
>7886	UnaryOp	* c
>7887	Identifier	c
>7888	UnaryOperator	*
>7889	Callee	newKeyFrame -> trackingFailed . equal_range
>7890	MemberAccess	newKeyFrame -> trackingFailed . equal_range
>7891	Identifier	equal_range
>7892	PtrMemberAccess	newKeyFrame -> trackingFailed
>7893	Identifier	trackingFailed
>7894	Identifier	newKeyFrame
>7895	Identifier	range
>7896	Statement	 
>7897	IfStatement	if ( newKeyFrame -> trackingFailed . find ( * c ) == newKeyFrame -> trackingFailed . end ( ) )
>7898	CompoundStatement	 
>7899	ContinueStatement	 
>7900	ExpressionStatement	 
>7901	UnaryExpression	++ c
>7902	Identifier	c
>7903	IncDec	++
>7904	Condition	 
>7905	EqualityExpression	newKeyFrame -> trackingFailed . find ( * c ) == newKeyFrame -> trackingFailed . end ( )
>7906	CallExpression	newKeyFrame -> trackingFailed . end ( )
>7907	ArgumentList	 
>7908	Callee	newKeyFrame -> trackingFailed . end
>7909	MemberAccess	newKeyFrame -> trackingFailed . end
>7910	Identifier	end
>7911	PtrMemberAccess	newKeyFrame -> trackingFailed
>7912	Identifier	trackingFailed
>7913	Identifier	newKeyFrame
>7914	CallExpression	newKeyFrame -> trackingFailed . find ( * c )
>7915	ArgumentList	* c
>7916	Argument	* c
>7917	UnaryOp	* c
>7918	Identifier	c
>7919	UnaryOperator	*
>7920	Callee	newKeyFrame -> trackingFailed . find
>7921	MemberAccess	newKeyFrame -> trackingFailed . find
>7922	Identifier	find
>7923	PtrMemberAccess	newKeyFrame -> trackingFailed
>7924	Identifier	trackingFailed
>7925	Identifier	newKeyFrame
>7926	Condition	 
>7927	EqualityExpression	c != closeCandidates . end ( )
>7928	CallExpression	closeCandidates . end ( )
>7929	ArgumentList	 
>7930	Callee	closeCandidates . end
>7931	MemberAccess	closeCandidates . end
>7932	Identifier	end
>7933	Identifier	closeCandidates
>7934	Identifier	c
>7935	ForInit	 
>7936	IdentifierDeclStatement	std 
>7937	IdentifierDecl	c = closeCandidates . begin ( )
>7938	AssignmentExpr	c = closeCandidates . begin ( )
>7939	CallExpression	closeCandidates . begin ( )
>7940	ArgumentList	 
>7941	Callee	closeCandidates . begin
>7942	MemberAccess	closeCandidates . begin
>7943	Identifier	begin
>7944	Identifier	closeCandidates
>7945	Identifier	c
>7946	Identifier	c
>7947	IdentifierDeclType	std 
>7948	IdentifierDeclStatement	 
>7949	IdentifierDecl	farAll = farCandidates . size ( )
>7950	AssignmentExpr	farAll = farCandidates . size ( )
>7951	CallExpression	farCandidates . size ( )
>7952	ArgumentList	 
>7953	Callee	farCandidates . size
>7954	MemberAccess	farCandidates . size
>7955	Identifier	size
>7956	Identifier	farCandidates
>7957	Identifier	farAll
>7958	Identifier	farAll
>7959	IdentifierDeclType	int
>7960	IdentifierDeclStatement	 
>7961	IdentifierDecl	closeAll = closeCandidates . size ( )
>7962	AssignmentExpr	closeAll = closeCandidates . size ( )
>7963	CallExpression	closeCandidates . size ( )
>7964	ArgumentList	 
>7965	Callee	closeCandidates . size
>7966	MemberAccess	closeCandidates . size
>7967	Identifier	size
>7968	Identifier	closeCandidates
>7969	Identifier	closeAll
>7970	Identifier	closeAll
>7971	IdentifierDeclType	int
>7972	CompoundStatement	 
>7973	ExpressionStatement	 
>7974	CallExpression	farCandidates . push_back ( candidate )
>7975	ArgumentList	candidate
>7976	Argument	candidate
>7977	Identifier	candidate
>7978	Callee	farCandidates . push_back
>7979	MemberAccess	farCandidates . push_back
>7980	Identifier	push_back
>7981	Identifier	farCandidates
>7982	IfStatement	if ( distancesToNewKeyFrame . at ( candidate ) < 4 )
>7983	ContinueStatement	 
>7984	Condition	 
>7985	RelationalExpression	distancesToNewKeyFrame . at ( candidate ) < 4
>7986	PrimaryExpression	4
>7987	CallExpression	distancesToNewKeyFrame . at ( candidate )
>7988	ArgumentList	candidate
>7989	Argument	candidate
>7990	Identifier	candidate
>7991	Callee	distancesToNewKeyFrame . at
>7992	MemberAccess	distancesToNewKeyFrame . at
>7993	Identifier	at
>7994	Identifier	distancesToNewKeyFrame
>7995	IfStatement	if ( candidate == fabMapResult )
>7996	CompoundStatement	 
>7997	ContinueStatement	 
>7998	ExpressionStatement	 
>7999	CallExpression	farCandidates . push_back ( candidate )
>8000	ArgumentList	candidate
>8001	Argument	candidate
>8002	Identifier	candidate
>8003	Callee	farCandidates . push_back
>8004	MemberAccess	farCandidates . push_back
>8005	Identifier	push_back
>8006	Identifier	farCandidates
>8007	Condition	 
>8008	EqualityExpression	candidate == fabMapResult
>8009	Identifier	fabMapResult
>8010	Identifier	candidate
>8011	IfStatement	if ( candidate -> idxInKeyframes < INITIALIZATION_PHASE_COUNT )
>8012	ContinueStatement	 
>8013	Condition	 
>8014	RelationalExpression	candidate -> idxInKeyframes < INITIALIZATION_PHASE_COUNT
>8015	Identifier	INITIALIZATION_PHASE_COUNT
>8016	PtrMemberAccess	candidate -> idxInKeyframes
>8017	Identifier	idxInKeyframes
>8018	Identifier	candidate
>8019	IfStatement	if ( newKeyFrame -> hasTrackingParent ( ) && candidate == newKeyFrame -> getTrackingParent ( ) )
>8020	ContinueStatement	 
>8021	Condition	 
>8022	AndExpression	newKeyFrame -> hasTrackingParent ( ) && candidate == newKeyFrame -> getTrackingParent ( )
>8023	EqualityExpression	candidate == newKeyFrame -> getTrackingParent ( )
>8024	CallExpression	newKeyFrame -> getTrackingParent ( )
>8025	ArgumentList	 
>8026	Callee	newKeyFrame -> getTrackingParent
>8027	PtrMemberAccess	newKeyFrame -> getTrackingParent
>8028	Identifier	getTrackingParent
>8029	Identifier	newKeyFrame
>8030	Identifier	candidate
>8031	CallExpression	newKeyFrame -> hasTrackingParent ( )
>8032	ArgumentList	 
>8033	Callee	newKeyFrame -> hasTrackingParent
>8034	PtrMemberAccess	newKeyFrame -> hasTrackingParent
>8035	Identifier	hasTrackingParent
>8036	Identifier	newKeyFrame
>8037	IfStatement	if ( ! candidate -> pose -> isInGraph )
>8038	ContinueStatement	 
>8039	Condition	 
>8040	UnaryOp	! candidate -> pose -> isInGraph
>8041	PtrMemberAccess	candidate -> pose -> isInGraph
>8042	Identifier	isInGraph
>8043	PtrMemberAccess	candidate -> pose
>8044	Identifier	pose
>8045	Identifier	candidate
>8046	UnaryOperator	!
>8047	IfStatement	if ( candidate -> id ( ) == newKeyFrame -> id ( ) )
>8048	ContinueStatement	 
>8049	Condition	 
>8050	EqualityExpression	candidate -> id ( ) == newKeyFrame -> id ( )
>8051	CallExpression	newKeyFrame -> id ( )
>8052	ArgumentList	 
>8053	Callee	newKeyFrame -> id
>8054	PtrMemberAccess	newKeyFrame -> id
>8055	Identifier	id
>8056	Identifier	newKeyFrame
>8057	CallExpression	candidate -> id ( )
>8058	ArgumentList	 
>8059	Callee	candidate -> id
>8060	PtrMemberAccess	candidate -> id
>8061	Identifier	id
>8062	Identifier	candidate
>8063	Statement	 
>8064	Statement	 
>8065	Label	 
>8066	Identifier	candidate
>8067	Statement	 
>8068	Statement	 
>8069	Statement	 
>8070	Statement	 
>8071	IdentifierDeclStatement	 
>8072	IdentifierDecl	farInconsistent = 0
>8073	AssignmentExpr	farInconsistent = 0
>8074	PrimaryExpression	0
>8075	Identifier	farInconsistent
>8076	Identifier	farInconsistent
>8077	IdentifierDeclType	int
>8078	IdentifierDeclStatement	 
>8079	IdentifierDecl	farFailed = 0
>8080	AssignmentExpr	farFailed = 0
>8081	PrimaryExpression	0
>8082	Identifier	farFailed
>8083	Identifier	farFailed
>8084	IdentifierDeclType	int
>8085	CompoundStatement	 
>8086	ExpressionStatement	 
>8087	CallExpression	closeCandidates . insert ( candidate )
>8088	ArgumentList	candidate
>8089	Argument	candidate
>8090	Identifier	candidate
>8091	Callee	closeCandidates . insert
>8092	MemberAccess	closeCandidates . insert
>8093	Identifier	insert
>8094	Identifier	closeCandidates
>8095	IfStatement	if ( ( f2c . so3 ( ) * c2f . so3 ( ) ) . log ( ) . norm ( ) >= 0.09 )
>8096	CompoundStatement	 
>8097	ContinueStatement	 
>8098	ExpressionStatement	 
>8099	IncDecOp	closeInconsistent ++
>8100	IncDec	++
>8101	Identifier	closeInconsistent
>8102	Condition	 
>8103	RelationalExpression	( f2c . so3 ( ) * c2f . so3 ( ) ) . log ( ) . norm ( ) >= 0.09
>8104	PrimaryExpression	0.09
>8105	CallExpression	( f2c . so3 ( ) * c2f . so3 ( ) ) . log ( ) . norm ( )
>8106	ArgumentList	 
>8107	Callee	( f2c . so3 ( ) * c2f . so3 ( ) ) . log ( ) . norm
>8108	MemberAccess	( f2c . so3 ( ) * c2f . so3 ( ) ) . log ( ) . norm
>8109	Identifier	norm
>8110	CallExpression	( f2c . so3 ( ) * c2f . so3 ( ) ) . log ( )
>8111	ArgumentList	 
>8112	Callee	( f2c . so3 ( ) * c2f . so3 ( ) ) . log
>8113	MemberAccess	( f2c . so3 ( ) * c2f . so3 ( ) ) . log
>8114	Identifier	log
>8115	MultiplicativeExpression	f2c . so3 ( ) * c2f . so3 ( )
>8116	CallExpression	c2f . so3 ( )
>8117	ArgumentList	 
>8118	Callee	c2f . so3
>8119	MemberAccess	c2f . so3
>8120	Identifier	so3
>8121	Identifier	c2f
>8122	CallExpression	f2c . so3 ( )
>8123	ArgumentList	 
>8124	Callee	f2c . so3
>8125	MemberAccess	f2c . so3
>8126	Identifier	so3
>8127	Identifier	f2c
>8128	IfStatement	if ( ! constraintSE3Tracker -> trackingWasGood )
>8129	CompoundStatement	 
>8130	ContinueStatement	 
>8131	ExpressionStatement	 
>8132	IncDecOp	closeFailed ++
>8133	IncDec	++
>8134	Identifier	closeFailed
>8135	Condition	 
>8136	UnaryOp	! constraintSE3Tracker -> trackingWasGood
>8137	PtrMemberAccess	constraintSE3Tracker -> trackingWasGood
>8138	Identifier	trackingWasGood
>8139	Identifier	constraintSE3Tracker
>8140	UnaryOperator	!
>8141	IdentifierDeclStatement	 
>8142	IdentifierDecl	f2c = constraintSE3Tracker -> trackFrameOnPermaref ( newKeyFrame , candidate , f2c_init )
>8143	AssignmentExpr	f2c = constraintSE3Tracker -> trackFrameOnPermaref ( newKeyFrame , candidate , f2c_init )
>8144	CallExpression	constraintSE3Tracker -> trackFrameOnPermaref ( newKeyFrame , candidate , f2c_init )
>8145	ArgumentList	newKeyFrame
>8146	Argument	f2c_init
>8147	Identifier	f2c_init
>8148	Argument	candidate
>8149	Identifier	candidate
>8150	Argument	newKeyFrame
>8151	Identifier	newKeyFrame
>8152	Callee	constraintSE3Tracker -> trackFrameOnPermaref
>8153	PtrMemberAccess	constraintSE3Tracker -> trackFrameOnPermaref
>8154	Identifier	trackFrameOnPermaref
>8155	Identifier	constraintSE3Tracker
>8156	Identifier	f2c
>8157	Identifier	f2c
>8158	IdentifierDeclType	SE3
>8159	ExpressionStatement	 
>8160	AssignmentExpr	f2c_init . so3 ( ) = disturbance * f2c_init . so3 ( )
>8161	MultiplicativeExpression	disturbance * f2c_init . so3 ( )
>8162	CallExpression	f2c_init . so3 ( )
>8163	ArgumentList	 
>8164	Callee	f2c_init . so3
>8165	MemberAccess	f2c_init . so3
>8166	Identifier	so3
>8167	Identifier	f2c_init
>8168	Identifier	disturbance
>8169	CallExpression	f2c_init . so3 ( )
>8170	ArgumentList	 
>8171	Callee	f2c_init . so3
>8172	MemberAccess	f2c_init . so3
>8173	Identifier	so3
>8174	Identifier	f2c_init
>8175	IdentifierDeclStatement	 
>8176	IdentifierDecl	f2c_init = se3FromSim3 ( candidateToFrame_initialEstimateMap [ candidate ] ) . inverse ( )
>8177	AssignmentExpr	f2c_init = se3FromSim3 ( candidateToFrame_initialEstimateMap [ candidate ] ) . inverse ( )
>8178	CallExpression	se3FromSim3 ( candidateToFrame_initialEstimateMap [ candidate ] ) . inverse ( )
>8179	ArgumentList	 
>8180	Callee	se3FromSim3 ( candidateToFrame_initialEstimateMap [ candidate ] ) . inverse
>8181	MemberAccess	se3FromSim3 ( candidateToFrame_initialEstimateMap [ candidate ] ) . inverse
>8182	Identifier	inverse
>8183	CallExpression	se3FromSim3 ( candidateToFrame_initialEstimateMap [ candidate ] )
>8184	ArgumentList	candidateToFrame_initialEstimateMap [ candidate ]
>8185	Argument	candidateToFrame_initialEstimateMap [ candidate ]
>8186	ArrayIndexing	candidateToFrame_initialEstimateMap [ candidate ]
>8187	Identifier	candidate
>8188	Identifier	candidateToFrame_initialEstimateMap
>8189	Callee	se3FromSim3
>8190	Identifier	se3FromSim3
>8191	Identifier	f2c_init
>8192	Identifier	f2c_init
>8193	IdentifierDeclType	SE3
>8194	IfStatement	if ( ! constraintSE3Tracker -> trackingWasGood )
>8195	CompoundStatement	 
>8196	ContinueStatement	 
>8197	ExpressionStatement	 
>8198	IncDecOp	closeFailed ++
>8199	IncDec	++
>8200	Identifier	closeFailed
>8201	Condition	 
>8202	UnaryOp	! constraintSE3Tracker -> trackingWasGood
>8203	PtrMemberAccess	constraintSE3Tracker -> trackingWasGood
>8204	Identifier	trackingWasGood
>8205	Identifier	constraintSE3Tracker
>8206	UnaryOperator	!
>8207	IdentifierDeclStatement	 
>8208	IdentifierDecl	c2f = constraintSE3Tracker -> trackFrameOnPermaref ( candidate , newKeyFrame , c2f_init )
>8209	AssignmentExpr	c2f = constraintSE3Tracker -> trackFrameOnPermaref ( candidate , newKeyFrame , c2f_init )
>8210	CallExpression	constraintSE3Tracker -> trackFrameOnPermaref ( candidate , newKeyFrame , c2f_init )
>8211	ArgumentList	candidate
>8212	Argument	c2f_init
>8213	Identifier	c2f_init
>8214	Argument	newKeyFrame
>8215	Identifier	newKeyFrame
>8216	Argument	candidate
>8217	Identifier	candidate
>8218	Callee	constraintSE3Tracker -> trackFrameOnPermaref
>8219	PtrMemberAccess	constraintSE3Tracker -> trackFrameOnPermaref
>8220	Identifier	trackFrameOnPermaref
>8221	Identifier	constraintSE3Tracker
>8222	Identifier	c2f
>8223	Identifier	c2f
>8224	IdentifierDeclType	SE3
>8225	ExpressionStatement	 
>8226	AssignmentExpr	c2f_init . so3 ( ) = c2f_init . so3 ( ) * disturbance
>8227	MultiplicativeExpression	c2f_init . so3 ( ) * disturbance
>8228	Identifier	disturbance
>8229	CallExpression	c2f_init . so3 ( )
>8230	ArgumentList	 
>8231	Callee	c2f_init . so3
>8232	MemberAccess	c2f_init . so3
>8233	Identifier	so3
>8234	Identifier	c2f_init
>8235	CallExpression	c2f_init . so3 ( )
>8236	ArgumentList	 
>8237	Callee	c2f_init . so3
>8238	MemberAccess	c2f_init . so3
>8239	Identifier	so3
>8240	Identifier	c2f_init
>8241	IdentifierDeclStatement	 
>8242	IdentifierDecl	c2f_init = se3FromSim3 ( candidateToFrame_initialEstimateMap [ candidate ] . inverse ( ) ) . inverse ( )
>8243	AssignmentExpr	c2f_init = se3FromSim3 ( candidateToFrame_initialEstimateMap [ candidate ] . inverse ( ) ) . inverse ( )
>8244	CallExpression	se3FromSim3 ( candidateToFrame_initialEstimateMap [ candidate ] . inverse ( ) ) . inverse ( )
>8245	ArgumentList	 
>8246	Callee	se3FromSim3 ( candidateToFrame_initialEstimateMap [ candidate ] . inverse ( ) ) . inverse
>8247	MemberAccess	se3FromSim3 ( candidateToFrame_initialEstimateMap [ candidate ] . inverse ( ) ) . inverse
>8248	Identifier	inverse
>8249	CallExpression	se3FromSim3 ( candidateToFrame_initialEstimateMap [ candidate ] . inverse ( ) )
>8250	ArgumentList	candidateToFrame_initialEstimateMap [ candidate ] . inverse ( )
>8251	Argument	candidateToFrame_initialEstimateMap [ candidate ] . inverse ( )
>8252	CallExpression	candidateToFrame_initialEstimateMap [ candidate ] . inverse ( )
>8253	ArgumentList	 
>8254	Callee	candidateToFrame_initialEstimateMap [ candidate ] . inverse
>8255	MemberAccess	candidateToFrame_initialEstimateMap [ candidate ] . inverse
>8256	Identifier	inverse
>8257	ArrayIndexing	candidateToFrame_initialEstimateMap [ candidate ]
>8258	Identifier	candidate
>8259	Identifier	candidateToFrame_initialEstimateMap
>8260	Callee	se3FromSim3
>8261	Identifier	se3FromSim3
>8262	Identifier	c2f_init
>8263	Identifier	c2f_init
>8264	IdentifierDeclType	SE3
>8265	IfStatement	if ( candidate -> idxInKeyframes < INITIALIZATION_PHASE_COUNT )
>8266	ContinueStatement	 
>8267	Condition	 
>8268	RelationalExpression	candidate -> idxInKeyframes < INITIALIZATION_PHASE_COUNT
>8269	Identifier	INITIALIZATION_PHASE_COUNT
>8270	PtrMemberAccess	candidate -> idxInKeyframes
>8271	Identifier	idxInKeyframes
>8272	Identifier	candidate
>8273	IfStatement	if ( newKeyFrame -> hasTrackingParent ( ) && candidate == newKeyFrame -> getTrackingParent ( ) )
>8274	ContinueStatement	 
>8275	Condition	 
>8276	AndExpression	newKeyFrame -> hasTrackingParent ( ) && candidate == newKeyFrame -> getTrackingParent ( )
>8277	EqualityExpression	candidate == newKeyFrame -> getTrackingParent ( )
>8278	CallExpression	newKeyFrame -> getTrackingParent ( )
>8279	ArgumentList	 
>8280	Callee	newKeyFrame -> getTrackingParent
>8281	PtrMemberAccess	newKeyFrame -> getTrackingParent
>8282	Identifier	getTrackingParent
>8283	Identifier	newKeyFrame
>8284	Identifier	candidate
>8285	CallExpression	newKeyFrame -> hasTrackingParent ( )
>8286	ArgumentList	 
>8287	Callee	newKeyFrame -> hasTrackingParent
>8288	PtrMemberAccess	newKeyFrame -> hasTrackingParent
>8289	Identifier	hasTrackingParent
>8290	Identifier	newKeyFrame
>8291	IfStatement	if ( ! candidate -> pose -> isInGraph )
>8292	ContinueStatement	 
>8293	Condition	 
>8294	UnaryOp	! candidate -> pose -> isInGraph
>8295	PtrMemberAccess	candidate -> pose -> isInGraph
>8296	Identifier	isInGraph
>8297	PtrMemberAccess	candidate -> pose
>8298	Identifier	pose
>8299	Identifier	candidate
>8300	UnaryOperator	!
>8301	IfStatement	if ( candidate -> id ( ) == newKeyFrame -> id ( ) )
>8302	ContinueStatement	 
>8303	Condition	 
>8304	EqualityExpression	candidate -> id ( ) == newKeyFrame -> id ( )
>8305	CallExpression	newKeyFrame -> id ( )
>8306	ArgumentList	 
>8307	Callee	newKeyFrame -> id
>8308	PtrMemberAccess	newKeyFrame -> id
>8309	Identifier	id
>8310	Identifier	newKeyFrame
>8311	CallExpression	candidate -> id ( )
>8312	ArgumentList	 
>8313	Callee	candidate -> id
>8314	PtrMemberAccess	candidate -> id
>8315	Identifier	id
>8316	Identifier	candidate
>8317	Statement	 
>8318	Statement	 
>8319	Label	 
>8320	Identifier	candidate
>8321	Statement	 
>8322	Statement	 
>8323	Statement	 
>8324	Statement	 
>8325	IdentifierDeclStatement	 
>8326	IdentifierDecl	disturbance = SO3 
>8327	AssignmentExpr	disturbance = SO3 
>8328	CallExpression	SO3 
>8329	ArgumentList	Sophus 
>8330	Argument	Sophus 
>8331	CallExpression	Sophus 
>8332	ArgumentList	0.05
>8333	Argument	0
>8334	PrimaryExpression	0
>8335	Argument	0
>8336	PrimaryExpression	0
>8337	Argument	0.05
>8338	PrimaryExpression	0.05
>8339	Callee	Sophus 
>8340	Identifier	Sophus 
>8341	Callee	SO3 
>8342	Identifier	SO3 
>8343	Identifier	disturbance
>8344	Identifier	disturbance
>8345	IdentifierDeclType	SO3
>8346	IdentifierDeclStatement	 
>8347	IdentifierDecl	closeInconsistent = 0
>8348	AssignmentExpr	closeInconsistent = 0
>8349	PrimaryExpression	0
>8350	Identifier	closeInconsistent
>8351	Identifier	closeInconsistent
>8352	IdentifierDeclType	int
>8353	IdentifierDeclStatement	 
>8354	IdentifierDecl	closeFailed = 0
>8355	AssignmentExpr	closeFailed = 0
>8356	PrimaryExpression	0
>8357	Identifier	closeFailed
>8358	Identifier	closeFailed
>8359	IdentifierDeclType	int
>8360	IdentifierDeclStatement	 
>8361	IdentifierDecl	* parent = newKeyFrame -> hasTrackingParent ( ) ? newKeyFrame -> getTrackingParent ( ) 
>8362	AssignmentExpr	* parent = newKeyFrame -> hasTrackingParent ( ) ? newKeyFrame -> getTrackingParent ( ) 
>8363	ConditionalExpression	newKeyFrame -> hasTrackingParent ( ) ? newKeyFrame -> getTrackingParent ( ) 
>8364	PrimaryExpression	0
>8365	CallExpression	newKeyFrame -> getTrackingParent ( )
>8366	ArgumentList	 
>8367	Callee	newKeyFrame -> getTrackingParent
>8368	PtrMemberAccess	newKeyFrame -> getTrackingParent
>8369	Identifier	getTrackingParent
>8370	Identifier	newKeyFrame
>8371	Condition	newKeyFrame -> hasTrackingParent ( )
>8372	CallExpression	newKeyFrame -> hasTrackingParent ( )
>8373	ArgumentList	 
>8374	Callee	newKeyFrame -> hasTrackingParent
>8375	PtrMemberAccess	newKeyFrame -> hasTrackingParent
>8376	Identifier	hasTrackingParent
>8377	Identifier	newKeyFrame
>8378	Identifier	parent
>8379	Identifier	parent
>8380	IdentifierDeclType	Frame *
>8381	IdentifierDeclStatement	 
>8382	IdentifierDecl	farCandidates
>8383	Identifier	farCandidates
>8384	IdentifierDeclType	std 
>8385	IdentifierDeclStatement	 
>8386	IdentifierDecl	closeCandidates
>8387	Identifier	closeCandidates
>8388	IdentifierDeclType	std 
>8389	ExpressionStatement	 
>8390	CallExpression	poseConsistencyMutex . unlock_shared ( )
>8391	ArgumentList	 
>8392	Callee	poseConsistencyMutex . unlock_shared
>8393	MemberAccess	poseConsistencyMutex . unlock_shared
>8394	Identifier	unlock_shared
>8395	Identifier	poseConsistencyMutex
>8396	IfStatement	if ( newKeyFrame -> hasTrackingParent ( ) )
>8397	ExpressionStatement	 
>8398	CallExpression	keyFrameGraph -> calculateGraphDistancesToFrame ( newKeyFrame -> getTrackingParent ( ) , & distancesToNewKeyFrame )
>8399	ArgumentList	newKeyFrame -> getTrackingParent ( )
>8400	Argument	& distancesToNewKeyFrame
>8401	UnaryOp	& distancesToNewKeyFrame
>8402	Identifier	distancesToNewKeyFrame
>8403	UnaryOperator	&
>8404	Argument	newKeyFrame -> getTrackingParent ( )
>8405	CallExpression	newKeyFrame -> getTrackingParent ( )
>8406	ArgumentList	 
>8407	Callee	newKeyFrame -> getTrackingParent
>8408	PtrMemberAccess	newKeyFrame -> getTrackingParent
>8409	Identifier	getTrackingParent
>8410	Identifier	newKeyFrame
>8411	Callee	keyFrameGraph -> calculateGraphDistancesToFrame
>8412	PtrMemberAccess	keyFrameGraph -> calculateGraphDistancesToFrame
>8413	Identifier	calculateGraphDistancesToFrame
>8414	Identifier	keyFrameGraph
>8415	Condition	 
>8416	CallExpression	newKeyFrame -> hasTrackingParent ( )
>8417	ArgumentList	 
>8418	Callee	newKeyFrame -> hasTrackingParent
>8419	PtrMemberAccess	newKeyFrame -> hasTrackingParent
>8420	Identifier	hasTrackingParent
>8421	Identifier	newKeyFrame
>8422	IdentifierDeclStatement	 
>8423	IdentifierDecl	distancesToNewKeyFrame
>8424	Identifier	distancesToNewKeyFrame
>8425	IdentifierDeclType	std 
>8426	CompoundStatement	 
>8427	ExpressionStatement	 
>8428	AssignmentExpr	candidateToFrame_initialEstimateMap [ candidate ] = candidateToFrame_initialEstimate
>8429	Identifier	candidateToFrame_initialEstimate
>8430	ArrayIndexing	candidateToFrame_initialEstimateMap [ candidate ]
>8431	Identifier	candidate
>8432	Identifier	candidateToFrame_initialEstimateMap
>8433	IdentifierDeclStatement	 
>8434	IdentifierDecl	candidateToFrame_initialEstimate = newKeyFrame -> getScaledCamToWorld ( ) . inverse ( ) * candidate -> getScaledCamToWorld ( )
>8435	AssignmentExpr	candidateToFrame_initialEstimate = newKeyFrame -> getScaledCamToWorld ( ) . inverse ( ) * candidate -> \
>8436	MultiplicativeExpression	newKeyFrame -> getScaledCamToWorld ( ) . inverse ( ) * candidate -> getScaledCamToWorld ( )
>8437	CallExpression	candidate -> getScaledCamToWorld ( )
>8438	ArgumentList	 
>8439	Callee	candidate -> getScaledCamToWorld
>8440	PtrMemberAccess	candidate -> getScaledCamToWorld
>8441	Identifier	getScaledCamToWorld
>8442	Identifier	candidate
>8443	CallExpression	newKeyFrame -> getScaledCamToWorld ( ) . inverse ( )
>8444	ArgumentList	 
>8445	Callee	newKeyFrame -> getScaledCamToWorld ( ) . inverse
>8446	MemberAccess	newKeyFrame -> getScaledCamToWorld ( ) . inverse
>8447	Identifier	inverse
>8448	CallExpression	newKeyFrame -> getScaledCamToWorld ( )
>8449	ArgumentList	 
>8450	Callee	newKeyFrame -> getScaledCamToWorld
>8451	PtrMemberAccess	newKeyFrame -> getScaledCamToWorld
>8452	Identifier	getScaledCamToWorld
>8453	Identifier	newKeyFrame
>8454	Identifier	candidateToFrame_initialEstimate
>8455	Identifier	candidateToFrame_initialEstimate
>8456	IdentifierDeclType	Sim3
>8457	Statement	 
>8458	Statement	 
>8459	Label	 
>8460	Identifier	candidate
>8461	Statement	 
>8462	Statement	 
>8463	Statement	 
>8464	Statement	 
>8465	ExpressionStatement	 
>8466	CallExpression	poseConsistencyMutex . lock_shared ( )
>8467	ArgumentList	 
>8468	Callee	poseConsistencyMutex . lock_shared
>8469	MemberAccess	poseConsistencyMutex . lock_shared
>8470	Identifier	lock_shared
>8471	Identifier	poseConsistencyMutex
>8472	ForStatement	for ( std 
>8473	CompoundStatement	 
>8474	IfStatement	if ( newKeyFrame -> neighbors . find ( * c ) != newKeyFrame -> neighbors . end ( ) )
>8475	ElseStatement	else
>8476	ExpressionStatement	 
>8477	UnaryExpression	++ c
>8478	Identifier	c
>8479	IncDec	++
>8480	CompoundStatement	 
>8481	ExpressionStatement	 
>8482	AssignmentExpr	c = candidates . erase ( c )
>8483	CallExpression	candidates . erase ( c )
>8484	ArgumentList	c
>8485	Argument	c
>8486	Identifier	c
>8487	Callee	candidates . erase
>8488	MemberAccess	candidates . erase
>8489	Identifier	erase
>8490	Identifier	candidates
>8491	Identifier	c
>8492	IfStatement	if ( enablePrintDebugInfo && printConstraintSearchInfo )
>8493	ExpressionStatement	 
>8494	CallExpression	printf ( \"SKIPPING %d on %d cause it already exists as constraint.\n\" , ( * c ) -> id ( ) , newKeyFrame -> id ( ) )
>8495	ArgumentList	\"SKIPPING %d on %d cause it already exists as constraint.\n\"
>8496	Argument	newKeyFrame -> id ( )
>8497	CallExpression	newKeyFrame -> id ( )
>8498	ArgumentList	 
>8499	Callee	newKeyFrame -> id
>8500	PtrMemberAccess	newKeyFrame -> id
>8501	Identifier	id
>8502	Identifier	newKeyFrame
>8503	Argument	( * c ) -> id ( )
>8504	CallExpression	( * c ) -> id ( )
>8505	ArgumentList	 
>8506	Callee	( * c ) -> id
>8507	PtrMemberAccess	( * c ) -> id
>8508	Identifier	id
>8509	UnaryOp	* c
>8510	Identifier	c
>8511	UnaryOperator	*
>8512	Argument	\"SKIPPING %d on %d cause it already exists as constraint.\n\"
>8513	PrimaryExpression	\"SKIPPING %d on %d cause it already exists as constraint.\n\"
>8514	Callee	printf
>8515	Identifier	printf
>8516	Condition	 
>8517	AndExpression	enablePrintDebugInfo && printConstraintSearchInfo
>8518	Identifier	printConstraintSearchInfo
>8519	Identifier	enablePrintDebugInfo
>8520	Condition	 
>8521	EqualityExpression	newKeyFrame -> neighbors . find ( * c ) != newKeyFrame -> neighbors . end ( )
>8522	CallExpression	newKeyFrame -> neighbors . end ( )
>8523	ArgumentList	 
>8524	Callee	newKeyFrame -> neighbors . end
>8525	MemberAccess	newKeyFrame -> neighbors . end
>8526	Identifier	end
>8527	PtrMemberAccess	newKeyFrame -> neighbors
>8528	Identifier	neighbors
>8529	Identifier	newKeyFrame
>8530	CallExpression	newKeyFrame -> neighbors . find ( * c )
>8531	ArgumentList	* c
>8532	Argument	* c
>8533	UnaryOp	* c
>8534	Identifier	c
>8535	UnaryOperator	*
>8536	Callee	newKeyFrame -> neighbors . find
>8537	MemberAccess	newKeyFrame -> neighbors . find
>8538	Identifier	find
>8539	PtrMemberAccess	newKeyFrame -> neighbors
>8540	Identifier	neighbors
>8541	Identifier	newKeyFrame
>8542	Condition	 
>8543	EqualityExpression	c != candidates . end ( )
>8544	CallExpression	candidates . end ( )
>8545	ArgumentList	 
>8546	Callee	candidates . end
>8547	MemberAccess	candidates . end
>8548	Identifier	end
>8549	Identifier	candidates
>8550	Identifier	c
>8551	ForInit	 
>8552	IdentifierDeclStatement	std 
>8553	IdentifierDecl	c = candidates . begin ( )
>8554	AssignmentExpr	c = candidates . begin ( )
>8555	CallExpression	candidates . begin ( )
>8556	ArgumentList	 
>8557	Callee	candidates . begin
>8558	MemberAccess	candidates . begin
>8559	Identifier	begin
>8560	Identifier	candidates
>8561	Identifier	c
>8562	Identifier	c
>8563	IdentifierDeclType	std 
>8564	IdentifierDeclStatement	 
>8565	IdentifierDecl	candidateToFrame_initialEstimateMap
>8566	Identifier	candidateToFrame_initialEstimateMap
>8567	IdentifierDeclType	std 
>8568	IdentifierDeclStatement	 
>8569	IdentifierDecl	candidates = trackableKeyFrameSearch -> findCandidates ( newKeyFrame , fabMapResult , useFABMAP , closeCandidatesTH )
>8570	AssignmentExpr	candidates = trackableKeyFrameSearch -> findCandidates ( newKeyFrame , fabMapResult , useFABMAP , closeCandidatesTH )
>8571	CallExpression	trackableKeyFrameSearch -> findCandidates ( newKeyFrame , fabMapResult , useFABMAP , closeCandidatesTH )
>8572	ArgumentList	newKeyFrame
>8573	Argument	closeCandidatesTH
>8574	Identifier	closeCandidatesTH
>8575	Argument	useFABMAP
>8576	Identifier	useFABMAP
>8577	Argument	fabMapResult
>8578	Identifier	fabMapResult
>8579	Argument	newKeyFrame
>8580	Identifier	newKeyFrame
>8581	Callee	trackableKeyFrameSearch -> findCandidates
>8582	PtrMemberAccess	trackableKeyFrameSearch -> findCandidates
>8583	Identifier	findCandidates
>8584	Identifier	trackableKeyFrameSearch
>8585	Identifier	candidates
>8586	Identifier	candidates
>8587	IdentifierDeclType	std 
>8588	IdentifierDeclStatement	 
>8589	IdentifierDecl	* fabMapResult = 0
>8590	AssignmentExpr	* fabMapResult = 0
>8591	PrimaryExpression	0
>8592	Identifier	fabMapResult
>8593	Identifier	fabMapResult
>8594	IdentifierDeclType	Frame *
>8595	IdentifierDeclStatement	 
>8596	IdentifierDecl	constraints
>8597	Identifier	constraints
>8598	IdentifierDeclType	std 
>8599	ExpressionStatement	 
>8600	AssignmentExpr	newKeyFrame -> lastConstraintTrackedCamToWorld = newKeyFrame -> getScaledCamToWorld ( )
>8601	CallExpression	newKeyFrame -> getScaledCamToWorld ( )
>8602	ArgumentList	 
>8603	Callee	newKeyFrame -> getScaledCamToWorld
>8604	PtrMemberAccess	newKeyFrame -> getScaledCamToWorld
>8605	Identifier	getScaledCamToWorld
>8606	Identifier	newKeyFrame
>8607	PtrMemberAccess	newKeyFrame -> lastConstraintTrackedCamToWorld
>8608	Identifier	lastConstraintTrackedCamToWorld
>8609	Identifier	newKeyFrame
>8610	IfStatement	if ( ! forceParent && ( newKeyFrame -> lastConstraintTrackedCamToWorld * newKeyFrame -> getScaledCamToWorld ( ) \
>8611	ReturnStatement	 
>8612	PrimaryExpression	0
>8613	Condition	 
>8614	AndExpression	! forceParent && ( newKeyFrame -> lastConstraintTrackedCamToWorld * newKeyFrame -> getScaledCamToWorld ( ) \
>8615	RelationalExpression	( newKeyFrame -> lastConstraintTrackedCamToWorld * newKeyFrame -> getScaledCamToWorld ( ) . inverse ( ) ) \
>8616	PrimaryExpression	0.01
>8617	CallExpression	( newKeyFrame -> lastConstraintTrackedCamToWorld * newKeyFrame -> getScaledCamToWorld ( ) . inverse ( ) ) . log ( ) \
>8618	ArgumentList	 
>8619	Callee	( newKeyFrame -> lastConstraintTrackedCamToWorld * newKeyFrame -> getScaledCamToWorld ( ) . inverse ( ) ) . log ( ) \
>8620	MemberAccess	( newKeyFrame -> lastConstraintTrackedCamToWorld * newKeyFrame -> getScaledCamToWorld ( ) . inverse ( ) ) . log ( ) \
>8621	Identifier	norm
>8622	CallExpression	( newKeyFrame -> lastConstraintTrackedCamToWorld * newKeyFrame -> getScaledCamToWorld ( ) . inverse ( ) ) . log ( )
>8623	ArgumentList	 
>8624	Callee	( newKeyFrame -> lastConstraintTrackedCamToWorld * newKeyFrame -> getScaledCamToWorld ( ) . inverse ( ) ) . log
>8625	MemberAccess	( newKeyFrame -> lastConstraintTrackedCamToWorld * newKeyFrame -> getScaledCamToWorld ( ) . inverse ( ) ) . log
>8626	Identifier	log
>8627	MultiplicativeExpression	newKeyFrame -> lastConstraintTrackedCamToWorld * newKeyFrame -> getScaledCamToWorld ( ) . inverse ( )
>8628	CallExpression	newKeyFrame -> getScaledCamToWorld ( ) . inverse ( )
>8629	ArgumentList	 
>8630	Callee	newKeyFrame -> getScaledCamToWorld ( ) . inverse
>8631	MemberAccess	newKeyFrame -> getScaledCamToWorld ( ) . inverse
>8632	Identifier	inverse
>8633	CallExpression	newKeyFrame -> getScaledCamToWorld ( )
>8634	ArgumentList	 
>8635	Callee	newKeyFrame -> getScaledCamToWorld
>8636	PtrMemberAccess	newKeyFrame -> getScaledCamToWorld
>8637	Identifier	getScaledCamToWorld
>8638	Identifier	newKeyFrame
>8639	PtrMemberAccess	newKeyFrame -> lastConstraintTrackedCamToWorld
>8640	Identifier	lastConstraintTrackedCamToWorld
>8641	Identifier	newKeyFrame
>8642	UnaryOp	! forceParent
>8643	Identifier	forceParent
>8644	UnaryOperator	!
>8645	IfStatement	if ( ! newKeyFrame -> hasTrackingParent ( ) )
>8646	CompoundStatement	 
>8647	ReturnStatement	 
>8648	PrimaryExpression	0
>8649	ExpressionStatement	 
>8650	CallExpression	newConstraintMutex . unlock ( )
>8651	ArgumentList	 
>8652	Callee	newConstraintMutex . unlock
>8653	MemberAccess	newConstraintMutex . unlock
>8654	Identifier	unlock
>8655	Identifier	newConstraintMutex
>8656	ExpressionStatement	 
>8657	CallExpression	newConstraintCreatedSignal . notify_all ( )
>8658	ArgumentList	 
>8659	Callee	newConstraintCreatedSignal . notify_all
>8660	MemberAccess	newConstraintCreatedSignal . notify_all
>8661	Identifier	notify_all
>8662	Identifier	newConstraintCreatedSignal
>8663	ExpressionStatement	 
>8664	AssignmentExpr	newConstraintAdded = true
>8665	Identifier	true
>8666	Identifier	newConstraintAdded
>8667	ExpressionStatement	 
>8668	CallExpression	keyFrameGraph -> addKeyFrame ( newKeyFrame )
>8669	ArgumentList	newKeyFrame
>8670	Argument	newKeyFrame
>8671	Identifier	newKeyFrame
>8672	Callee	keyFrameGraph -> addKeyFrame
>8673	PtrMemberAccess	keyFrameGraph -> addKeyFrame
>8674	Identifier	addKeyFrame
>8675	Identifier	keyFrameGraph
>8676	ExpressionStatement	 
>8677	CallExpression	newConstraintMutex . lock ( )
>8678	ArgumentList	 
>8679	Callee	newConstraintMutex . lock
>8680	MemberAccess	newConstraintMutex . lock
>8681	Identifier	lock
>8682	Identifier	newConstraintMutex
>8683	Condition	 
>8684	UnaryOp	! newKeyFrame -> hasTrackingParent ( )
>8685	CallExpression	newKeyFrame -> hasTrackingParent ( )
>8686	ArgumentList	 
>8687	Callee	newKeyFrame -> hasTrackingParent
>8688	PtrMemberAccess	newKeyFrame -> hasTrackingParent
>8689	Identifier	hasTrackingParent
>8690	Identifier	newKeyFrame
>8691	UnaryOperator	!
>8850	FunctionDef	SlamSystem 
>8851	ParameterList	int itsPerTry , float minChange
>8852	Parameter	 
>8853	Identifier	minChange
>8854	ParameterType	float
>8855	Parameter	 
>8856	Identifier	itsPerTry
>8857	ParameterType	int
>8858	ReturnType	bool
>8859	CompoundStatement	 
>8860	ReturnStatement	 
>8861	AndExpression	maxChange > minChange && its == itsPerTry
>8862	EqualityExpression	its == itsPerTry
>8863	Identifier	itsPerTry
>8864	Identifier	its
>8865	RelationalExpression	maxChange > minChange
>8866	Identifier	minChange
>8867	Identifier	maxChange
>8868	ExpressionStatement	 
>8869	IncDecOp	nOptimizationIteration ++
>8870	IncDec	++
>8871	Identifier	nOptimizationIteration
>8872	ExpressionStatement	 
>8873	AssignmentExpr	msOptimizationIteration = 0.9 * msOptimizationIteration + 0.1 * ( ( tv_end . tv_sec - tv_start . tv_sec ) * \
>8874	AdditiveExpression	0.9 * msOptimizationIteration + 0.1 * ( ( tv_end . tv_sec - tv_start . tv_sec ) * 1000.0f + ( tv_end \
>8875	MultiplicativeExpression	0.1 * ( ( tv_end . tv_sec - tv_start . tv_sec ) * 1000.0f + ( tv_end . tv_usec - tv_start . tv_usec ) / \
>8876	AdditiveExpression	( tv_end . tv_sec - tv_start . tv_sec ) * 1000.0f + ( tv_end . tv_usec - tv_start . tv_usec ) / 1000.0f
>8877	MultiplicativeExpression	( tv_end . tv_usec - tv_start . tv_usec ) / 1000.0f
>8878	PrimaryExpression	1000.0f
>8879	AdditiveExpression	tv_end . tv_usec - tv_start . tv_usec
>8880	MemberAccess	tv_start . tv_usec
>8881	Identifier	tv_usec
>8882	Identifier	tv_start
>8883	MemberAccess	tv_end . tv_usec
>8884	Identifier	tv_usec
>8885	Identifier	tv_end
>8886	MultiplicativeExpression	( tv_end . tv_sec - tv_start . tv_sec ) * 1000.0f
>8887	PrimaryExpression	1000.0f
>8888	AdditiveExpression	tv_end . tv_sec - tv_start . tv_sec
>8889	MemberAccess	tv_start . tv_sec
>8890	Identifier	tv_sec
>8891	Identifier	tv_start
>8892	MemberAccess	tv_end . tv_sec
>8893	Identifier	tv_sec
>8894	Identifier	tv_end
>8895	PrimaryExpression	0.1
>8896	MultiplicativeExpression	0.9 * msOptimizationIteration
>8897	Identifier	msOptimizationIteration
>8898	PrimaryExpression	0.9
>8899	Identifier	msOptimizationIteration
>8900	ExpressionStatement	 
>8901	CallExpression	gettimeofday ( & tv_end , NULL )
>8902	ArgumentList	& tv_end
>8903	Argument	NULL
>8904	Identifier	NULL
>8905	Argument	& tv_end
>8906	UnaryOp	& tv_end
>8907	Identifier	tv_end
>8908	UnaryOperator	&
>8909	Callee	gettimeofday
>8910	Identifier	gettimeofday
>8911	IfStatement	if ( enablePrintDebugInfo && printOptimizationInfo )
>8912	ExpressionStatement	 
>8913	CallExpression	printf ( \"did %d optimization iterations. Max Pose Parameter Change
>8914	ArgumentList	\"did %d optimization iterations. Max Pose Parameter Change
>8915	Argument	maxChange > minChange && its == itsPerTry ? \"continue optimizing\" 
>8916	ConditionalExpression	maxChange > minChange && its == itsPerTry ? \"continue optimizing\" 
>8917	PrimaryExpression	\"Waiting for addition to graph.\"
>8918	PrimaryExpression	\"continue optimizing\"
>8919	Condition	maxChange > minChange && its == itsPerTry
>8920	AndExpression	maxChange > minChange && its == itsPerTry
>8921	EqualityExpression	its == itsPerTry
>8922	Identifier	itsPerTry
>8923	Identifier	its
>8924	RelationalExpression	maxChange > minChange
>8925	Identifier	minChange
>8926	Identifier	maxChange
>8927	Argument	sumChange / sum
>8928	MultiplicativeExpression	sumChange / sum
>8929	Identifier	sum
>8930	Identifier	sumChange
>8931	Argument	maxChange
>8932	Identifier	maxChange
>8933	Argument	its
>8934	Identifier	its
>8935	Argument	\"did %d optimization iterations. Max Pose Parameter Change
>8936	PrimaryExpression	\"did %d optimization iterations. Max Pose Parameter Change
>8937	Callee	printf
>8938	Identifier	printf
>8939	Condition	 
>8940	AndExpression	enablePrintDebugInfo && printOptimizationInfo
>8941	Identifier	printOptimizationInfo
>8942	Identifier	enablePrintDebugInfo
>8943	ExpressionStatement	 
>8944	CallExpression	g2oGraphAccessMutex . unlock ( )
>8945	ArgumentList	 
>8946	Callee	g2oGraphAccessMutex . unlock
>8947	MemberAccess	g2oGraphAccessMutex . unlock
>8948	Identifier	unlock
>8949	Identifier	g2oGraphAccessMutex
>8950	ExpressionStatement	 
>8951	CallExpression	poseConsistencyMutex . unlock_shared ( )
>8952	ArgumentList	 
>8953	Callee	poseConsistencyMutex . unlock_shared
>8954	MemberAccess	poseConsistencyMutex . unlock_shared
>8955	Identifier	unlock_shared
>8956	Identifier	poseConsistencyMutex
>8957	ExpressionStatement	 
>8958	CallExpression	keyFrameGraph -> keyframesAllMutex . unlock_shared ( )
>8959	ArgumentList	 
>8960	Callee	keyFrameGraph -> keyframesAllMutex . unlock_shared
>8961	MemberAccess	keyFrameGraph -> keyframesAllMutex . unlock_shared
>8962	Identifier	unlock_shared
>8963	PtrMemberAccess	keyFrameGraph -> keyframesAllMutex
>8964	Identifier	keyframesAllMutex
>8965	Identifier	keyFrameGraph
>8966	ExpressionStatement	 
>8967	AssignmentExpr	haveUnmergedOptimizationOffset = true
>8968	Identifier	true
>8969	Identifier	haveUnmergedOptimizationOffset
>8970	ForStatement	for ( size_t i = 0 ; i < keyFrameGraph -> keyframesAll . size ( ) ; i ++ )
>8971	CompoundStatement	 
>8972	CompoundStatement	 
>8973	ExpressionStatement	 
>8974	IncDecOp	keyFrameGraph -> keyframesAll [ i ] -> edgesNum ++
>8975	IncDec	++
>8976	PtrMemberAccess	keyFrameGraph -> keyframesAll [ i ] -> edgesNum
>8977	Identifier	edgesNum
>8978	ArrayIndexing	keyFrameGraph -> keyframesAll [ i ]
>8979	Identifier	i
>8980	PtrMemberAccess	keyFrameGraph -> keyframesAll
>8981	Identifier	keyframesAll
>8982	Identifier	keyFrameGraph
>8983	ExpressionStatement	 
>8984	AssignmentExpr	keyFrameGraph -> keyframesAll [ i ] -> edgeErrorSum += ( ( EdgeSim3 * ) ( edge ) ) -> chi2 ( )
>8985	CallExpression	( ( EdgeSim3 * ) ( edge ) ) -> chi2 ( )
>8986	ArgumentList	 
>8987	Callee	( ( EdgeSim3 * ) ( edge ) ) -> chi2
>8988	PtrMemberAccess	( ( EdgeSim3 * ) ( edge ) ) -> chi2
>8989	Identifier	chi2
>8990	CastExpression	( EdgeSim3 * ) ( edge )
>8991	Identifier	edge
>8992	CastTarget	EdgeSim3 *
>8993	PtrMemberAccess	keyFrameGraph -> keyframesAll [ i ] -> edgeErrorSum
>8994	Identifier	edgeErrorSum
>8995	ArrayIndexing	keyFrameGraph -> keyframesAll [ i ]
>8996	Identifier	i
>8997	PtrMemberAccess	keyFrameGraph -> keyframesAll
>8998	Identifier	keyframesAll
>8999	Identifier	keyFrameGraph
>9000	Statement	 
>9001	Statement	 
>9002	Statement	 
>9003	Statement	 
>9004	Statement	 
>9005	Statement	 
>9006	Statement	 
>9007	Statement	 
>9008	Statement	 
>9009	Statement	 
>9010	Statement	 
>9011	Statement	 
>9012	Statement	 
>9013	Statement	 
>9014	Statement	 
>9015	Label	 
>9016	Identifier	edge
>9017	Statement	 
>9018	Statement	 
>9019	Statement	 
>9020	ExpressionStatement	 
>9021	CallExpression	keyFrameGraph -> keyframesAll [ i ] -> pose -> setPoseGraphOptResult ( keyFrameGraph -> keyframesAll [ i ] -> pose \
>9022	ArgumentList	keyFrameGraph -> keyframesAll [ i ] -> pose -> graphVertex -> estimate ( )
>9023	Argument	keyFrameGraph -> keyframesAll [ i ] -> pose -> graphVertex -> estimate ( )
>9024	CallExpression	keyFrameGraph -> keyframesAll [ i ] -> pose -> graphVertex -> estimate ( )
>9025	ArgumentList	 
>9026	Callee	keyFrameGraph -> keyframesAll [ i ] -> pose -> graphVertex -> estimate
>9027	PtrMemberAccess	keyFrameGraph -> keyframesAll [ i ] -> pose -> graphVertex -> estimate
>9028	Identifier	estimate
>9029	PtrMemberAccess	keyFrameGraph -> keyframesAll [ i ] -> pose -> graphVertex
>9030	Identifier	graphVertex
>9031	PtrMemberAccess	keyFrameGraph -> keyframesAll [ i ] -> pose
>9032	Identifier	pose
>9033	ArrayIndexing	keyFrameGraph -> keyframesAll [ i ]
>9034	Identifier	i
>9035	PtrMemberAccess	keyFrameGraph -> keyframesAll
>9036	Identifier	keyframesAll
>9037	Identifier	keyFrameGraph
>9038	Callee	keyFrameGraph -> keyframesAll [ i ] -> pose -> setPoseGraphOptResult
>9039	PtrMemberAccess	keyFrameGraph -> keyframesAll [ i ] -> pose -> setPoseGraphOptResult
>9040	Identifier	setPoseGraphOptResult
>9041	PtrMemberAccess	keyFrameGraph -> keyframesAll [ i ] -> pose
>9042	Identifier	pose
>9043	ArrayIndexing	keyFrameGraph -> keyframesAll [ i ]
>9044	Identifier	i
>9045	PtrMemberAccess	keyFrameGraph -> keyframesAll
>9046	Identifier	keyframesAll
>9047	Identifier	keyFrameGraph
>9048	ExpressionStatement	 
>9049	AssignmentExpr	sum += 7
>9050	PrimaryExpression	7
>9051	Identifier	sum
>9052	ForStatement	for ( int j = 0 ; j < 7 ; j ++ )
>9053	CompoundStatement	 
>9054	ExpressionStatement	 
>9055	AssignmentExpr	sumChange += d
>9056	Identifier	d
>9057	Identifier	sumChange
>9058	IfStatement	if ( d > maxChange )
>9059	ExpressionStatement	 
>9060	AssignmentExpr	maxChange = d
>9061	Identifier	d
>9062	Identifier	maxChange
>9063	Condition	 
>9064	RelationalExpression	d > maxChange
>9065	Identifier	maxChange
>9066	Identifier	d
>9067	IdentifierDeclStatement	 
>9068	IdentifierDecl	d = fabsf ( ( float ) ( diff [ j ] ) )
>9069	AssignmentExpr	d = fabsf ( ( float ) ( diff [ j ] ) )
>9070	CallExpression	fabsf ( ( float ) ( diff [ j ] ) )
>9071	ArgumentList	( float ) ( diff [ j ] )
>9072	Argument	( float ) ( diff [ j ] )
>9073	CastExpression	( float ) ( diff [ j ] )
>9074	ArrayIndexing	diff [ j ]
>9075	Identifier	j
>9076	Identifier	diff
>9077	CastTarget	float
>9078	Callee	fabsf
>9079	Identifier	fabsf
>9080	Identifier	d
>9081	Identifier	d
>9082	IdentifierDeclType	float
>9083	IncDecOp	 
>9084	IncDec	++
>9085	Identifier	j
>9086	Condition	 
>9087	RelationalExpression	j < 7
>9088	PrimaryExpression	7
>9089	Identifier	j
>9090	ForInit	 
>9091	IdentifierDeclStatement	int j = 0 ;
>9092	IdentifierDecl	j = 0
>9093	AssignmentExpr	j = 0
>9094	PrimaryExpression	0
>9095	Identifier	j
>9096	Identifier	j
>9097	IdentifierDeclType	int
>9098	ExpressionStatement	 
>9099	Statement	 
>9100	Statement	 
>9101	Statement	 
>9102	Statement	 
>9103	Statement	 
>9104	Statement	 
>9105	Statement	 
>9106	Statement	 
>9107	Statement	 
>9108	Statement	 
>9109	Statement	 
>9110	Statement	 
>9111	Statement	 
>9112	Statement	 
>9113	Statement	 
>9114	Statement	 
>9115	Statement	 
>9116	Statement	 
>9117	Statement	 
>9118	Statement	 
>9119	Statement	 
>9120	Statement	 
>9121	Statement	 
>9122	Statement	 
>9123	Statement	 
>9124	IdentifierDeclStatement	 
>9125	IdentifierDecl	b = keyFrameGraph -> keyframesAll [ i ] -> getScaledCamToWorld ( )
>9126	AssignmentExpr	b = keyFrameGraph -> keyframesAll [ i ] -> getScaledCamToWorld ( )
>9127	CallExpression	keyFrameGraph -> keyframesAll [ i ] -> getScaledCamToWorld ( )
>9128	ArgumentList	 
>9129	Callee	keyFrameGraph -> keyframesAll [ i ] -> getScaledCamToWorld
>9130	PtrMemberAccess	keyFrameGraph -> keyframesAll [ i ] -> getScaledCamToWorld
>9131	Identifier	getScaledCamToWorld
>9132	ArrayIndexing	keyFrameGraph -> keyframesAll [ i ]
>9133	Identifier	i
>9134	PtrMemberAccess	keyFrameGraph -> keyframesAll
>9135	Identifier	keyframesAll
>9136	Identifier	keyFrameGraph
>9137	Identifier	b
>9138	Identifier	b
>9139	IdentifierDeclType	Sim3
>9140	IdentifierDeclStatement	 
>9141	IdentifierDecl	a = keyFrameGraph -> keyframesAll [ i ] -> pose -> graphVertex -> estimate ( )
>9142	AssignmentExpr	a = keyFrameGraph -> keyframesAll [ i ] -> pose -> graphVertex -> estimate ( )
>9143	CallExpression	keyFrameGraph -> keyframesAll [ i ] -> pose -> graphVertex -> estimate ( )
>9144	ArgumentList	 
>9145	Callee	keyFrameGraph -> keyframesAll [ i ] -> pose -> graphVertex -> estimate
>9146	PtrMemberAccess	keyFrameGraph -> keyframesAll [ i ] -> pose -> graphVertex -> estimate
>9147	Identifier	estimate
>9148	PtrMemberAccess	keyFrameGraph -> keyframesAll [ i ] -> pose -> graphVertex
>9149	Identifier	graphVertex
>9150	PtrMemberAccess	keyFrameGraph -> keyframesAll [ i ] -> pose
>9151	Identifier	pose
>9152	ArrayIndexing	keyFrameGraph -> keyframesAll [ i ]
>9153	Identifier	i
>9154	PtrMemberAccess	keyFrameGraph -> keyframesAll
>9155	Identifier	keyframesAll
>9156	Identifier	keyFrameGraph
>9157	Identifier	a
>9158	Identifier	a
>9159	IdentifierDeclType	Sim3
>9160	IfStatement	if ( ! keyFrameGraph -> keyframesAll [ i ] -> pose -> isInGraph )
>9161	ContinueStatement	 
>9162	Condition	 
>9163	UnaryOp	! keyFrameGraph -> keyframesAll [ i ] -> pose -> isInGraph
>9164	PtrMemberAccess	keyFrameGraph -> keyframesAll [ i ] -> pose -> isInGraph
>9165	Identifier	isInGraph
>9166	PtrMemberAccess	keyFrameGraph -> keyframesAll [ i ] -> pose
>9167	Identifier	pose
>9168	ArrayIndexing	keyFrameGraph -> keyframesAll [ i ]
>9169	Identifier	i
>9170	PtrMemberAccess	keyFrameGraph -> keyframesAll
>9171	Identifier	keyframesAll
>9172	Identifier	keyFrameGraph
>9173	UnaryOperator	!
>9174	ExpressionStatement	 
>9175	AssignmentExpr	keyFrameGraph -> keyframesAll [ i ] -> edgesNum = 0
>9176	PrimaryExpression	0
>9177	PtrMemberAccess	keyFrameGraph -> keyframesAll [ i ] -> edgesNum
>9178	Identifier	edgesNum
>9179	ArrayIndexing	keyFrameGraph -> keyframesAll [ i ]
>9180	Identifier	i
>9181	PtrMemberAccess	keyFrameGraph -> keyframesAll
>9182	Identifier	keyframesAll
>9183	Identifier	keyFrameGraph
>9184	ExpressionStatement	 
>9185	AssignmentExpr	keyFrameGraph -> keyframesAll [ i ] -> edgeErrorSum = 0
>9186	PrimaryExpression	0
>9187	PtrMemberAccess	keyFrameGraph -> keyframesAll [ i ] -> edgeErrorSum
>9188	Identifier	edgeErrorSum
>9189	ArrayIndexing	keyFrameGraph -> keyframesAll [ i ]
>9190	Identifier	i
>9191	PtrMemberAccess	keyFrameGraph -> keyframesAll
>9192	Identifier	keyframesAll
>9193	Identifier	keyFrameGraph
>9194	IncDecOp	 
>9195	IncDec	++
>9196	Identifier	i
>9197	Condition	 
>9198	RelationalExpression	i < keyFrameGraph -> keyframesAll . size ( )
>9199	CallExpression	keyFrameGraph -> keyframesAll . size ( )
>9200	ArgumentList	 
>9201	Callee	keyFrameGraph -> keyframesAll . size
>9202	MemberAccess	keyFrameGraph -> keyframesAll . size
>9203	Identifier	size
>9204	PtrMemberAccess	keyFrameGraph -> keyframesAll
>9205	Identifier	keyframesAll
>9206	Identifier	keyFrameGraph
>9207	Identifier	i
>9208	ForInit	 
>9209	IdentifierDeclStatement	size_t i = 0 ;
>9210	IdentifierDecl	i = 0
>9211	AssignmentExpr	i = 0
>9212	PrimaryExpression	0
>9213	Identifier	i
>9214	Identifier	i
>9215	IdentifierDeclType	size_t
>9216	IdentifierDeclStatement	 
>9217	IdentifierDecl	sum = 0
>9218	AssignmentExpr	sum = 0
>9219	PrimaryExpression	0
>9220	Identifier	sum
>9221	Identifier	sum
>9222	IdentifierDeclType	float
>9223	IdentifierDeclStatement	 
>9224	IdentifierDecl	sumChange = 0
>9225	AssignmentExpr	sumChange = 0
>9226	PrimaryExpression	0
>9227	Identifier	sumChange
>9228	Identifier	sumChange
>9229	IdentifierDeclType	float
>9230	IdentifierDeclStatement	 
>9231	IdentifierDecl	maxChange = 0
>9232	AssignmentExpr	maxChange = 0
>9233	PrimaryExpression	0
>9234	Identifier	maxChange
>9235	Identifier	maxChange
>9236	IdentifierDeclType	float
>9237	ExpressionStatement	 
>9238	CallExpression	keyFrameGraph -> keyframesAllMutex . lock_shared ( )
>9239	ArgumentList	 
>9240	Callee	keyFrameGraph -> keyframesAllMutex . lock_shared
>9241	MemberAccess	keyFrameGraph -> keyframesAllMutex . lock_shared
>9242	Identifier	lock_shared
>9243	PtrMemberAccess	keyFrameGraph -> keyframesAllMutex
>9244	Identifier	keyframesAllMutex
>9245	Identifier	keyFrameGraph
>9246	ExpressionStatement	 
>9247	CallExpression	poseConsistencyMutex . lock_shared ( )
>9248	ArgumentList	 
>9249	Callee	poseConsistencyMutex . lock_shared
>9250	MemberAccess	poseConsistencyMutex . lock_shared
>9251	Identifier	lock_shared
>9252	Identifier	poseConsistencyMutex
>9253	IdentifierDeclStatement	 
>9254	IdentifierDecl	its = keyFrameGraph -> optimize ( itsPerTry )
>9255	AssignmentExpr	its = keyFrameGraph -> optimize ( itsPerTry )
>9256	CallExpression	keyFrameGraph -> optimize ( itsPerTry )
>9257	ArgumentList	itsPerTry
>9258	Argument	itsPerTry
>9259	Identifier	itsPerTry
>9260	Callee	keyFrameGraph -> optimize
>9261	PtrMemberAccess	keyFrameGraph -> optimize
>9262	Identifier	optimize
>9263	Identifier	keyFrameGraph
>9264	Identifier	its
>9265	Identifier	its
>9266	IdentifierDeclType	int
>9267	ExpressionStatement	 
>9268	CallExpression	newConstraintMutex . unlock ( )
>9269	ArgumentList	 
>9270	Callee	newConstraintMutex . unlock
>9271	MemberAccess	newConstraintMutex . unlock
>9272	Identifier	unlock
>9273	Identifier	newConstraintMutex
>9274	ExpressionStatement	 
>9275	CallExpression	keyFrameGraph -> addElementsFromBuffer ( )
>9276	ArgumentList	 
>9277	Callee	keyFrameGraph -> addElementsFromBuffer
>9278	PtrMemberAccess	keyFrameGraph -> addElementsFromBuffer
>9279	Identifier	addElementsFromBuffer
>9280	Identifier	keyFrameGraph
>9281	ExpressionStatement	 
>9282	CallExpression	newConstraintMutex . lock ( )
>9283	ArgumentList	 
>9284	Callee	newConstraintMutex . lock
>9285	MemberAccess	newConstraintMutex . lock
>9286	Identifier	lock
>9287	Identifier	newConstraintMutex
>9288	ExpressionStatement	 
>9289	CallExpression	g2oGraphAccessMutex . lock ( )
>9290	ArgumentList	 
>9291	Callee	g2oGraphAccessMutex . lock
>9292	MemberAccess	g2oGraphAccessMutex . lock
>9293	Identifier	lock
>9294	Identifier	g2oGraphAccessMutex
>9295	ExpressionStatement	 
>9296	CallExpression	gettimeofday ( & tv_start , NULL )
>9297	ArgumentList	& tv_start
>9298	Argument	NULL
>9299	Identifier	NULL
>9300	Argument	& tv_start
>9301	UnaryOp	& tv_start
>9302	Identifier	tv_start
>9303	UnaryOperator	&
>9304	Callee	gettimeofday
>9305	Identifier	gettimeofday
>9306	IdentifierDeclStatement	 
>9307	IdentifierDecl	tv_end
>9308	Identifier	tv_end
>9309	IdentifierDeclType	struct timeval
>9310	IdentifierDecl	tv_start
>9311	Identifier	tv_start
>9312	IdentifierDeclType	struct timeval
>9380	FunctionDef	SlamSystem 
>9381	ParameterList	 
>9382	ReturnType	void
>9383	CompoundStatement	 
>9384	ExpressionStatement	 
>9385	CallExpression	mergeOptimizationOffset ( )
>9386	ArgumentList	 
>9387	Callee	mergeOptimizationOffset
>9388	Identifier	mergeOptimizationOffset
>9389	ExpressionStatement	 
>9390	CallExpression	g2oLock . unlock ( )
>9391	ArgumentList	 
>9392	Callee	g2oLock . unlock
>9393	MemberAccess	g2oLock . unlock
>9394	Identifier	unlock
>9395	Identifier	g2oLock
>9396	ExpressionStatement	 
>9397	CallExpression	keyFrameGraph -> optimize ( 1000 )
>9398	ArgumentList	1000
>9399	Argument	1000
>9400	PrimaryExpression	1000
>9401	Callee	keyFrameGraph -> optimize
>9402	PtrMemberAccess	keyFrameGraph -> optimize
>9403	Identifier	optimize
>9404	Identifier	keyFrameGraph
>9405	IdentifierDeclStatement	 
>9406	IdentifierDecl	g2oLock ( g2oGraphAccessMutex )
>9407	Identifier	g2oGraphAccessMutex
>9408	Identifier	g2oLock
>9409	IdentifierDeclType	boost 
>9415	FunctionDef	SlamSystem 
>9416	ParameterList	 
>9417	ReturnType	SE3
>9418	CompoundStatement	 
>9419	ReturnStatement	 
>9420	Identifier	camToWorld
>9421	ExpressionStatement	 
>9422	CallExpression	keyFrameGraph -> allFramePosesMutex . unlock_shared ( )
>9423	ArgumentList	 
>9424	Callee	keyFrameGraph -> allFramePosesMutex . unlock_shared
>9425	MemberAccess	keyFrameGraph -> allFramePosesMutex . unlock_shared
>9426	Identifier	unlock_shared
>9427	PtrMemberAccess	keyFrameGraph -> allFramePosesMutex
>9428	Identifier	allFramePosesMutex
>9429	Identifier	keyFrameGraph
>9430	IfStatement	if ( keyFrameGraph -> allFramePoses . size ( ) > 0 )
>9431	ExpressionStatement	 
>9432	AssignmentExpr	camToWorld = se3FromSim3 ( keyFrameGraph -> allFramePoses . back ( ) -> getCamToWorld ( ) )
>9433	CallExpression	se3FromSim3 ( keyFrameGraph -> allFramePoses . back ( ) -> getCamToWorld ( ) )
>9434	ArgumentList	keyFrameGraph -> allFramePoses . back ( ) -> getCamToWorld ( )
>9435	Argument	keyFrameGraph -> allFramePoses . back ( ) -> getCamToWorld ( )
>9436	CallExpression	keyFrameGraph -> allFramePoses . back ( ) -> getCamToWorld ( )
>9437	ArgumentList	 
>9438	Callee	keyFrameGraph -> allFramePoses . back ( ) -> getCamToWorld
>9439	PtrMemberAccess	keyFrameGraph -> allFramePoses . back ( ) -> getCamToWorld
>9440	Identifier	getCamToWorld
>9441	CallExpression	keyFrameGraph -> allFramePoses . back ( )
>9442	ArgumentList	 
>9443	Callee	keyFrameGraph -> allFramePoses . back
>9444	MemberAccess	keyFrameGraph -> allFramePoses . back
>9445	Identifier	back
>9446	PtrMemberAccess	keyFrameGraph -> allFramePoses
>9447	Identifier	allFramePoses
>9448	Identifier	keyFrameGraph
>9449	Callee	se3FromSim3
>9450	Identifier	se3FromSim3
>9451	Identifier	camToWorld
>9452	Condition	 
>9453	RelationalExpression	keyFrameGraph -> allFramePoses . size ( ) > 0
>9454	PrimaryExpression	0
>9455	CallExpression	keyFrameGraph -> allFramePoses . size ( )
>9456	ArgumentList	 
>9457	Callee	keyFrameGraph -> allFramePoses . size
>9458	MemberAccess	keyFrameGraph -> allFramePoses . size
>9459	Identifier	size
>9460	PtrMemberAccess	keyFrameGraph -> allFramePoses
>9461	Identifier	allFramePoses
>9462	Identifier	keyFrameGraph
>9463	ExpressionStatement	 
>9464	CallExpression	keyFrameGraph -> allFramePosesMutex . lock_shared ( )
>9465	ArgumentList	 
>9466	Callee	keyFrameGraph -> allFramePosesMutex . lock_shared
>9467	MemberAccess	keyFrameGraph -> allFramePosesMutex . lock_shared
>9468	Identifier	lock_shared
>9469	PtrMemberAccess	keyFrameGraph -> allFramePosesMutex
>9470	Identifier	allFramePosesMutex
>9471	Identifier	keyFrameGraph
>9472	IdentifierDeclStatement	 
>9473	IdentifierDecl	camToWorld = SE3 ( )
>9474	AssignmentExpr	camToWorld = SE3 ( )
>9475	CallExpression	SE3 ( )
>9476	ArgumentList	 
>9477	Callee	SE3
>9478	Identifier	SE3
>9479	Identifier	camToWorld
>9480	Identifier	camToWorld
>9481	IdentifierDeclType	SE3
>9498	FunctionDef	SlamSystem 
>9499	ParameterList	 
>9500	ReturnType	std 
>9501	CompoundStatement	 
>9502	ReturnStatement	 
>9503	PtrMemberAccess	keyFrameGraph -> allFramePoses
>9504	Identifier	allFramePoses
>9505	Identifier	keyFrameGraph
<3=17,4
<4=14,11,8,5
<5=7,6
<8=10,9
<11=13,12
<14=16,15
<17=278,272,266,260,256,252,248,244,240,232,228,224,216,190,186,182,122,118,114,110,106,102,89,59,49,39,29,18
<18=19
<19=27,20
<20=23,21
<21=22
<23=24
<24=26,25
<27=28
<29=30
<30=38,31
<31=37,32
<32=36,33
<33=35,34
<39=40
<40=48,41
<41=47,42
<42=46,43
<43=45,44
<49=50
<50=58,51
<51=57,52
<52=56,53
<53=55,54
<59=87,60
<60=74,61
<61=62
<62=73,63
<63=71,64
<64=67,65
<65=66
<67=68
<68=70,69
<71=72
<74=75
<75=86,76
<76=84,77
<77=80,78
<78=79
<80=81
<81=83,82
<84=85
<87=88
<89=90
<90=101,91
<91=99,92
<92=95,93
<93=94
<95=96
<96=98,97
<99=100
<102=103
<103=105,104
<106=107
<107=109,108
<110=111
<111=113,112
<114=115
<115=117,116
<118=119
<119=121,120
<122=180,145,123
<123=124
<124=141,137,133,129,125
<125=126
<126=128,127
<129=130
<130=132,131
<133=134
<134=136,135
<137=138
<138=140,139
<141=142
<142=144,143
<145=170,162,154,150,146
<146=147
<147=149,148
<150=151
<151=153,152
<154=155
<155=161,156
<156=160,157
<157=159,158
<162=163
<163=169,164
<164=168,165
<165=167,166
<170=171
<171=179,172
<172=178,173
<173=177,174
<174=176,175
<180=181
<182=183
<183=185,184
<186=187
<187=189,188
<190=208,204,201,191
<191=192
<192=194,193
<194=196,195
<196=198,197
<198=200,199
<201=203,202
<204=205
<205=207,206
<208=209
<209=210
<210=215,214,211
<211=213,212
<216=217
<217=223,218
<218=222,219
<219=221,220
<224=225
<225=227,226
<228=229
<229=231,230
<232=233
<233=239,234
<234=238,235
<235=237,236
<240=241
<241=243,242
<244=245
<245=247,246
<248=249
<249=251,250
<252=253
<253=255,254
<256=257
<257=259,258
<260=261
<261=263,262
<263=265,264
<266=267
<267=269,268
<269=271,270
<272=273
<273=275,274
<275=277,276
<278=294,279
<279=287,280
<280=281
<281=285,282
<282=283
<283=284
<285=286
<287=288
<288=292,289
<289=290
<290=291
<292=293
<294=295
<295=301,296
<296=298,297
<298=300,299
<301=303,302
<303=305,304
<373=375,374
<375=544,537,530,523,516,509,502,495,488,481,475,473,467,465,459,457,451,449,443,441,440,438,437,435,434,432,431,429,422,415,408,401,394,393,391,381,376
<376=377
<377=379,378
<379=380
<381=382
<382=384,383
<384=385
<385=387,386
<387=389,388
<389=390
<391=392
<394=395
<395=397,396
<397=398
<398=400,399
<401=402
<402=404,403
<404=405
<405=407,406
<408=409
<409=411,410
<411=412
<412=414,413
<415=416
<416=418,417
<418=419
<419=421,420
<422=423
<423=425,424
<425=426
<426=428,427
<429=430
<432=433
<435=436
<438=439
<441=442
<443=445,444
<445=446
<446=448,447
<449=450
<451=453,452
<453=454
<454=456,455
<457=458
<459=461,460
<461=462
<462=464,463
<465=466
<467=469,468
<469=470
<470=472,471
<473=474
<475=477,476
<477=478
<478=480,479
<481=482
<482=486,483
<483=484
<484=485
<486=487
<488=489
<489=491,490
<491=492
<492=494,493
<495=496
<496=498,497
<498=499
<499=501,500
<502=503
<503=505,504
<505=506
<506=508,507
<509=510
<510=512,511
<512=513
<513=515,514
<516=517
<517=519,518
<519=520
<520=522,521
<523=524
<524=526,525
<526=527
<527=529,528
<530=531
<531=533,532
<533=534
<534=536,535
<537=538
<538=542,539
<539=540
<540=541
<542=543
<544=545
<545=547,546
<571=577,576,572
<572=573
<573=575,574
<577=578
<578=579
<579=581,580
<581=583,582
<591=594,593,592
<594=683,676,610,603,595
<595=601,596
<596=597
<597=599,598
<599=600
<601=602
<603=604
<604=606,605
<606=607
<607=609,608
<610=674,611
<611=665,629,620,616,612
<612=613
<613=615,614
<616=617
<617=619,618
<620=621
<621=623,622
<623=624
<624=626,625
<626=628,627
<629=657,646,643,630
<630=631
<631=633,632
<633=634
<634=636,635
<636=638,637
<638=640,639
<640=642,641
<643=645,644
<646=647
<647=656,648
<648=650,649
<650=651
<651=653,652
<653=655,654
<657=658
<658=659
<659=664,663,660
<660=662,661
<665=666
<666=668,667
<668=669
<669=671,670
<671=673,672
<674=675
<676=677
<677=682,681,678
<678=680,679
<683=684
<684=686,685
<686=687
<687=689,688
<711=714,713,712
<714=784,722,715
<715=716
<716=720,717
<717=718
<718=719
<720=721
<722=782,723
<723=745,738,731,724
<724=725
<725=727,726
<727=728
<728=730,729
<731=732
<732=734,733
<734=735
<735=737,736
<738=739
<739=741,740
<741=742
<742=744,743
<745=775,746
<746=770,754,747
<747=748
<748=750,749
<750=751
<751=753,752
<754=755
<755=766,756
<756=764,757
<757=758
<758=762,759
<759=760
<760=761
<762=763
<764=765
<766=767
<767=769,768
<770=771
<771=774,773,772
<775=776
<776=781,777
<777=779,778
<779=780
<782=783
<784=785
<785=789,786
<786=787
<787=788
<789=790
<801=804,803,802
<804=949,945,928,921,917,910,906,899,892,881,874,867,860,853,842,837,828,819,812,805
<805=806
<806=810,807
<807=808
<808=809
<810=811
<812=813
<813=817,814
<814=815
<815=816
<817=818
<819=820
<820=824,821
<821=822
<822=823
<824=825
<825=827,826
<828=829
<829=833,830
<830=831
<831=832
<833=834
<834=836,835
<837=838
<838=841,840,839
<842=851,843
<843=844
<844=845
<845=849,846
<846=847
<847=848
<849=850
<851=852
<853=854
<854=856,855
<856=857
<857=859,858
<860=861
<861=863,862
<863=864
<864=866,865
<867=868
<868=870,869
<870=871
<871=873,872
<874=875
<875=879,876
<876=877
<877=878
<879=880
<881=890,882
<882=883
<883=884
<884=888,885
<885=886
<886=887
<888=889
<890=891
<892=893
<893=895,894
<895=896
<896=898,897
<899=900
<900=902,901
<902=903
<903=905,904
<906=907
<907=909,908
<910=911
<911=913,912
<913=914
<914=916,915
<917=918
<918=920,919
<921=922
<922=926,923
<923=924
<924=925
<926=927
<928=941,929
<929=937,930
<930=931
<931=935,932
<932=933
<933=934
<935=936
<937=938
<938=940,939
<941=942
<942=944,943
<945=946
<946=948,947
<949=950
<950=954,951
<951=952
<952=953
<954=955
<970=973,972,971
<973=1443,1438,1431,981,974
<974=975
<975=979,976
<976=977
<977=978
<979=980
<981=1429,982
<982=1086,983
<983=1084,984
<984=1077,1070,1063,1009,1000,996,992,985
<985=986
<986=988,987
<988=989
<989=991,990
<992=993
<993=995,994
<996=997
<997=999,998
<1000=1001
<1001=1007,1002
<1002=1005,1003
<1003=1004
<1005=1006
<1007=1008
<1009=1055,1044,1041,1010
<1010=1011
<1011=1031,1012
<1012=1013
<1013=1030,1014
<1014=1028,1015
<1015=1022,1020,1018,1016
<1016=1017
<1018=1019
<1020=1021
<1022=1023
<1023=1025,1024
<1025=1027,1026
<1028=1029
<1031=1032
<1032=1034,1033
<1034=1036,1035
<1036=1038,1037
<1038=1040,1039
<1041=1043,1042
<1044=1045
<1045=1054,1046
<1046=1048,1047
<1048=1049
<1049=1051,1050
<1051=1053,1052
<1055=1056
<1056=1057
<1057=1062,1061,1058
<1058=1060,1059
<1063=1064
<1064=1069,1068,1065
<1065=1067,1066
<1070=1071
<1071=1075,1072
<1072=1073
<1073=1074
<1075=1076
<1077=1078
<1078=1080,1079
<1080=1081
<1081=1083,1082
<1084=1085
<1086=1420,1210,1087
<1087=1088
<1088=1198,1191,1184,1177,1166,1153,1149,1138,1110,1106,1096,1089
<1089=1090
<1090=1092,1091
<1092=1093
<1093=1095,1094
<1096=1097
<1097=1099,1098
<1099=1100
<1100=1102,1101
<1102=1104,1103
<1104=1105
<1106=1107
<1107=1109,1108
<1110=1111
<1111=1137,1112
<1112=1134,1113
<1113=1133,1114
<1114=1124,1115
<1115=1117,1116
<1117=1121,1118
<1118=1120,1119
<1121=1123,1122
<1124=1126,1125
<1126=1130,1127
<1127=1129,1128
<1130=1132,1131
<1134=1136,1135
<1138=1139
<1139=1147,1140
<1140=1143,1141
<1141=1142
<1143=1144
<1144=1146,1145
<1147=1148
<1149=1150
<1150=1152,1151
<1153=1154
<1154=1164,1155
<1155=1162,1160,1158,1156
<1156=1157
<1158=1159
<1160=1161
<1162=1163
<1164=1165
<1166=1167
<1167=1175,1168
<1168=1171,1169
<1169=1170
<1171=1172
<1172=1174,1173
<1175=1176
<1177=1181,1178
<1178=1180,1179
<1181=1183,1182
<1184=1185
<1185=1187,1186
<1187=1188
<1188=1190,1189
<1191=1192
<1192=1194,1193
<1194=1195
<1195=1197,1196
<1198=1199
<1199=1209,1208,1200
<1200=1207,1201
<1201=1203,1202
<1203=1204
<1204=1206,1205
<1210=1413,1404,1397,1252,1245,1211
<1211=1241,1212
<1212=1229,1213
<1213=1214
<1214=1225,1215
<1215=1223,1216
<1216=1217
<1217=1221,1218
<1218=1219
<1219=1220
<1221=1222
<1223=1224
<1225=1226
<1226=1228,1227
<1229=1237,1230
<1230=1231
<1231=1235,1232
<1232=1233
<1233=1234
<1235=1236
<1237=1238
<1238=1240,1239
<1241=1242
<1242=1244,1243
<1245=1246
<1246=1248,1247
<1248=1249
<1249=1251,1250
<1252=1386,1263,1253
<1253=1254
<1254=1255
<1255=1257,1256
<1257=1258
<1258=1260,1259
<1260=1262,1261
<1263=1356,1347,1336,1325,1316,1298,1284,1264
<1264=1269,1265
<1265=1266
<1266=1268,1267
<1269=1270
<1270=1283,1271
<1271=1273,1272
<1273=1282,1274
<1274=1276,1275
<1276=1277
<1277=1279,1278
<1279=1281,1280
<1284=1294,1290,1285
<1285=1286
<1286=1287
<1287=1289,1288
<1290=1291
<1291=1293,1292
<1294=1295
<1295=1297,1296
<1298=1299
<1299=1315,1314,1300
<1300=1313,1301
<1301=1311,1302
<1302=1309,1307,1305,1303
<1303=1304
<1305=1306
<1307=1308
<1309=1310
<1311=1312
<1316=1317
<1317=1319,1318
<1319=1320
<1320=1322,1321
<1322=1324,1323
<1325=1326
<1326=1330,1327
<1327=1328
<1328=1329
<1330=1331
<1331=1333,1332
<1333=1335,1334
<1336=1337
<1337=1341,1338
<1338=1339
<1339=1340
<1341=1342
<1342=1344,1343
<1344=1346,1345
<1347=1348
<1348=1355,1354,1349
<1349=1353,1350
<1350=1352,1351
<1356=1357
<1357=1385,1384,1358
<1358=1383,1359
<1359=1375,1360
<1360=1371,1361
<1361=1363,1362
<1363=1365,1364
<1365=1366
<1366=1368,1367
<1368=1370,1369
<1371=1373,1372
<1373=1374
<1375=1377,1376
<1377=1378
<1378=1380,1379
<1380=1382,1381
<1386=1387
<1387=1389,1388
<1389=1391,1390
<1391=1392
<1392=1394,1393
<1394=1396,1395
<1397=1398
<1398=1403,1402,1399
<1399=1401,1400
<1404=1405
<1405=1407,1406
<1407=1408
<1408=1410,1409
<1410=1412,1411
<1413=1414
<1414=1416,1415
<1416=1417
<1417=1419,1418
<1420=1421
<1421=1423,1422
<1423=1425,1424
<1425=1426
<1426=1428,1427
<1429=1430
<1431=1432
<1432=1437,1436,1433
<1433=1435,1434
<1438=1439
<1439=1442,1441,1440
<1443=1444
<1444=1448,1445
<1445=1446
<1446=1447
<1448=1449
<1509=1512,1511,1510
<1512=1596,1520,1513
<1513=1514
<1514=1518,1515
<1515=1516
<1516=1517
<1518=1519
<1520=1594,1521
<1521=1589,1568,1564,1557,1533,1522
<1522=1524,1523
<1524=1525
<1525=1531,1526
<1526=1529,1527
<1527=1528
<1529=1530
<1531=1532
<1533=1555,1534
<1534=1548,1539,1535
<1535=1536
<1536=1538,1537
<1539=1540
<1540=1546,1541
<1541=1544,1542
<1542=1543
<1544=1545
<1546=1547
<1548=1549
<1549=1553,1550
<1550=1551
<1551=1552
<1553=1554
<1555=1556
<1557=1558
<1558=1560,1559
<1560=1561
<1561=1563,1562
<1564=1565
<1565=1567,1566
<1568=1585,1569
<1569=1570
<1570=1581,1571
<1571=1579,1572
<1572=1573
<1573=1577,1574
<1574=1575
<1575=1576
<1577=1578
<1579=1580
<1581=1582
<1582=1584,1583
<1585=1586
<1586=1588,1587
<1589=1590
<1590=1593,1592,1591
<1594=1595
<1596=1597
<1597=1601,1598
<1598=1599
<1599=1600
<1601=1602
<1614=1617,1616,1615
<1617=1618
<1618=1628,1619
<1619=1620
<1620=1624,1621
<1621=1622
<1622=1623
<1624=1625
<1625=1627,1626
<1628=1629
<1629=1631,1630
<1638=1644,1643,1639
<1639=1640
<1640=1642,1641
<1644=1649,1645
<1645=1646
<1646=1648,1647
<1649=1650
<1650=1652,1651
<1660=1663,1662,1661
<1663=1828,1821,1683,1664
<1664=1679,1665
<1665=1666
<1666=1675,1667
<1667=1668
<1668=1669
<1669=1671,1670
<1671=1672
<1672=1674,1673
<1675=1676
<1676=1678,1677
<1679=1680
<1680=1682,1681
<1683=1819,1684
<1684=1805,1796,1789,1685
<1685=1783,1686
<1686=1774,1761,1745,1737,1731,1722,1715,1701,1694,1687
<1687=1688
<1688=1690,1689
<1690=1691
<1691=1693,1692
<1694=1695
<1695=1697,1696
<1697=1698
<1698=1700,1699
<1701=1702
<1702=1711,1703
<1703=1704
<1704=1705
<1705=1707,1706
<1707=1708
<1708=1710,1709
<1711=1712
<1712=1714,1713
<1715=1716
<1716=1718,1717
<1718=1719
<1719=1721,1720
<1722=1723
<1723=1725,1724
<1725=1726
<1726=1728,1727
<1728=1730,1729
<1731=1732
<1732=1734,1733
<1734=1736,1735
<1737=1738
<1738=1742,1739
<1739=1741,1740
<1742=1744,1743
<1745=1746
<1746=1755,1747
<1747=1748
<1748=1749
<1749=1751,1750
<1751=1752
<1752=1754,1753
<1755=1756
<1756=1758,1757
<1758=1760,1759
<1761=1762
<1762=1771,1763
<1763=1765,1764
<1765=1766
<1766=1768,1767
<1768=1770,1769
<1771=1773,1772
<1774=1775
<1775=1777,1776
<1777=1778
<1778=1780,1779
<1780=1782,1781
<1783=1784
<1784=1786,1785
<1786=1788,1787
<1789=1790
<1790=1792,1791
<1792=1793
<1793=1795,1794
<1796=1797
<1797=1801,1798
<1798=1799
<1799=1800
<1801=1802
<1802=1804,1803
<1805=1806
<1806=1815,1807
<1807=1808
<1808=1809
<1809=1811,1810
<1811=1812
<1812=1814,1813
<1815=1816
<1816=1818,1817
<1819=1820
<1821=1822
<1822=1824,1823
<1824=1825
<1825=1827,1826
<1828=1843,1829
<1829=1830
<1830=1841,1831
<1831=1839,1832
<1832=1833
<1833=1835,1834
<1835=1836
<1836=1838,1837
<1839=1840
<1841=1842
<1843=1844
<1844=1846,1845
<1872=1875,1874,1873
<1875=1993,1972,1965,1956,1955,1954,1953,1952,1950,1949,1948,1947,1946,1919,1910,1901,1885,1876
<1876=1877
<1877=1879,1878
<1879=1880
<1880=1882,1881
<1882=1884,1883
<1885=1886
<1886=1895,1887
<1887=1888
<1888=1889
<1889=1891,1890
<1891=1892
<1892=1894,1893
<1895=1896
<1896=1898,1897
<1898=1900,1899
<1901=1902
<1902=1904,1903
<1904=1905
<1905=1907,1906
<1907=1909,1908
<1910=1911
<1911=1913,1912
<1913=1914
<1914=1916,1915
<1916=1918,1917
<1919=1920
<1920=1927,1921
<1921=1922
<1922=1924,1923
<1924=1926,1925
<1927=1928
<1928=1941,1929
<1929=1936,1930
<1930=1932,1931
<1932=1933
<1933=1935,1934
<1936=1938,1937
<1938=1940,1939
<1941=1943,1942
<1943=1945,1944
<1950=1951
<1956=1957
<1957=1959,1958
<1959=1960
<1960=1962,1961
<1962=1964,1963
<1965=1966
<1966=1968,1967
<1968=1969
<1969=1971,1970
<1972=1987,1973
<1973=1980,1975,1974
<1975=1976
<1976=1978,1977
<1978=1979
<1980=1981
<1981=1985,1982
<1982=1983
<1983=1984
<1985=1986
<1987=1988
<1988=1990,1989
<1990=1992,1991
<1993=2008,1994
<1994=1995
<1995=2006,1996
<1996=2004,1997
<1997=1998
<1998=2000,1999
<2000=2001
<2001=2003,2002
<2004=2005
<2006=2007
<2008=2009
<2009=2011,2010
<2033=2039,2038,2034
<2034=2035
<2035=2037,2036
<2039=2187,2142,2128,2058,2051,2047,2040
<2040=2041
<2041=2043,2042
<2043=2044
<2044=2046,2045
<2047=2048
<2048=2050,2049
<2051=2052
<2052=2054,2053
<2054=2055
<2055=2057,2056
<2058=2126,2059
<2059=2122,2115,2101,2083,2069,2060
<2060=2061
<2061=2065,2062
<2062=2063
<2063=2064
<2065=2066
<2066=2068,2067
<2069=2070
<2070=2080,2071
<2071=2077,2072
<2072=2076,2073
<2073=2075,2074
<2077=2079,2078
<2080=2082,2081
<2083=2084
<2084=2098,2085
<2085=2091,2086
<2086=2090,2087
<2087=2089,2088
<2091=2095,2092
<2092=2094,2093
<2095=2097,2096
<2098=2100,2099
<2101=2102
<2102=2112,2103
<2103=2109,2104
<2104=2106,2105
<2106=2108,2107
<2109=2111,2110
<2112=2114,2113
<2115=2116
<2116=2118,2117
<2118=2119
<2119=2121,2120
<2122=2123
<2123=2125,2124
<2126=2127
<2128=2129
<2129=2138,2130
<2130=2131
<2131=2132
<2132=2134,2133
<2134=2135
<2135=2137,2136
<2138=2139
<2139=2141,2140
<2142=2185,2143
<2143=2176,2153,2144
<2144=2145
<2145=2147,2146
<2147=2148
<2148=2150,2149
<2150=2152,2151
<2153=2154
<2154=2170,2155
<2155=2156
<2156=2157
<2157=2168,2158
<2158=2161,2159
<2159=2160
<2161=2162
<2162=2164,2163
<2164=2165
<2165=2167,2166
<2168=2169
<2170=2171
<2171=2173,2172
<2173=2175,2174
<2176=2177
<2177=2179,2178
<2179=2180
<2180=2182,2181
<2182=2184,2183
<2185=2186
<2187=2209,2188
<2188=2189
<2189=2207,2190
<2190=2205,2198,2191
<2191=2192
<2192=2194,2193
<2194=2195
<2195=2197,2196
<2198=2199
<2199=2201,2200
<2201=2202
<2202=2204,2203
<2205=2206
<2207=2208
<2209=2210
<2210=2212,2211
<2244=2250,2249,2245
<2245=2246
<2246=2248,2247
<2250=2319,2310,2291,2284,2264,2258,2251
<2251=2252
<2252=2254,2253
<2254=2255
<2255=2257,2256
<2258=2259
<2259=2261,2260
<2261=2263,2262
<2264=2265
<2265=2283,2266
<2266=2268,2267
<2268=2277,2269
<2269=2270
<2270=2271
<2271=2273,2272
<2273=2274
<2274=2276,2275
<2277=2278
<2278=2280,2279
<2280=2282,2281
<2284=2285
<2285=2287,2286
<2287=2288
<2288=2290,2289
<2291=2306,2292
<2292=2293
<2293=2304,2294
<2294=2302,2295
<2295=2296
<2296=2298,2297
<2298=2299
<2299=2301,2300
<2302=2303
<2304=2305
<2306=2307
<2307=2309,2308
<2310=2311
<2311=2315,2312
<2312=2313
<2313=2314
<2315=2316
<2316=2318,2317
<2319=2334,2320
<2320=2321
<2321=2332,2322
<2322=2330,2323
<2323=2324
<2324=2326,2325
<2326=2327
<2327=2329,2328
<2330=2331
<2332=2333
<2334=2335
<2335=2337,2336
<2361=2373,2372,2362
<2362=2369,2366,2363
<2363=2365,2364
<2366=2368,2367
<2369=2371,2370
<2373=2517,2510,2425,2378,2374
<2374=2375
<2375=2377,2376
<2378=2421,2414,2379
<2379=2380
<2380=2381
<2381=2412,2382
<2382=2383
<2383=2410,2392,2384
<2384=2385
<2385=2386
<2386=2390,2387
<2387=2388
<2388=2389
<2390=2391
<2392=2406,2400,2393
<2393=2394
<2394=2398,2395
<2395=2396
<2396=2397
<2398=2399
<2400=2401
<2401=2405,2402
<2402=2404,2403
<2406=2407
<2407=2409,2408
<2410=2411
<2412=2413
<2414=2415
<2415=2419,2416
<2416=2417
<2417=2418
<2419=2420
<2421=2422
<2422=2424,2423
<2425=2506,2426
<2426=2499,2488,2470,2459,2431,2427
<2427=2428
<2428=2430,2429
<2431=2432
<2432=2458,2433
<2433=2455,2434
<2434=2454,2435
<2435=2445,2436
<2436=2438,2437
<2438=2442,2439
<2439=2441,2440
<2442=2444,2443
<2445=2447,2446
<2447=2451,2448
<2448=2450,2449
<2451=2453,2452
<2455=2457,2456
<2459=2460
<2460=2468,2461
<2461=2464,2462
<2462=2463
<2464=2465
<2465=2467,2466
<2468=2469
<2470=2471
<2471=2487,2472
<2472=2483,2473
<2473=2476,2474
<2474=2475
<2476=2477
<2477=2479,2478
<2479=2480
<2480=2482,2481
<2483=2484
<2484=2486,2485
<2488=2489
<2489=2497,2490
<2490=2493,2491
<2491=2492
<2493=2494
<2494=2496,2495
<2497=2498
<2499=2503,2500
<2500=2502,2501
<2503=2505,2504
<2506=2507
<2507=2509,2508
<2510=2511
<2511=2516,2515,2512
<2512=2514,2513
<2517=2518
<2518=2523,2522,2519
<2519=2521,2520
<2554=2557,2556,2555
<2557=2952,2948,2941,2878,2723,2585,2560,2558
<2558=2559
<2560=2575,2561
<2561=2562
<2562=2571,2563
<2563=2564
<2564=2565
<2565=2567,2566
<2567=2568
<2568=2570,2569
<2571=2572
<2572=2574,2573
<2575=2576
<2576=2582,2577
<2577=2581,2578
<2578=2580,2579
<2582=2584,2583
<2585=2719,2586
<2586=2715,2708,2700,2692,2684,2676,2668,2660,2652,2644,2636,2628,2620,2612,2604,2596,2587
<2587=2588
<2588=2592,2589
<2589=2590
<2590=2591
<2592=2593
<2593=2595,2594
<2596=2597
<2597=2601,2598
<2598=2600,2599
<2601=2603,2602
<2604=2605
<2605=2609,2606
<2606=2608,2607
<2609=2611,2610
<2612=2613
<2613=2617,2614
<2614=2616,2615
<2617=2619,2618
<2620=2621
<2621=2625,2622
<2622=2624,2623
<2625=2627,2626
<2628=2629
<2629=2633,2630
<2630=2632,2631
<2633=2635,2634
<2636=2637
<2637=2641,2638
<2638=2640,2639
<2641=2643,2642
<2644=2645
<2645=2649,2646
<2646=2648,2647
<2649=2651,2650
<2652=2653
<2653=2657,2654
<2654=2656,2655
<2657=2659,2658
<2660=2661
<2661=2665,2662
<2662=2664,2663
<2665=2667,2666
<2668=2669
<2669=2673,2670
<2670=2672,2671
<2673=2675,2674
<2676=2677
<2677=2681,2678
<2678=2680,2679
<2681=2683,2682
<2684=2685
<2685=2689,2686
<2686=2688,2687
<2689=2691,2690
<2692=2693
<2693=2697,2694
<2694=2696,2695
<2697=2699,2698
<2700=2701
<2701=2705,2702
<2702=2704,2703
<2705=2707,2706
<2708=2709
<2709=2711,2710
<2711=2712
<2712=2714,2713
<2715=2716
<2716=2718,2717
<2719=2720
<2720=2722,2721
<2723=2869,2735,2724
<2724=2725
<2725=2728,2726
<2726=2727
<2728=2729
<2729=2731,2730
<2731=2732
<2732=2734,2733
<2735=2837,2825,2818,2811,2759,2750,2743,2736
<2736=2737
<2737=2739,2738
<2739=2740
<2740=2742,2741
<2743=2744
<2744=2746,2745
<2746=2747
<2747=2749,2748
<2750=2751
<2751=2755,2752
<2752=2753
<2753=2754
<2755=2756
<2756=2758,2757
<2759=2807,2760
<2760=2761
<2761=2805,2762
<2762=2803,2796,2784,2772,2763
<2763=2764
<2764=2771,2765
<2765=2767,2766
<2767=2768
<2768=2770,2769
<2772=2773
<2773=2775,2774
<2775=2776
<2776=2778,2777
<2778=2780,2779
<2780=2781
<2781=2783,2782
<2784=2785
<2785=2787,2786
<2787=2788
<2788=2790,2789
<2790=2792,2791
<2792=2793
<2793=2795,2794
<2796=2797
<2797=2799,2798
<2799=2800
<2800=2802,2801
<2803=2804
<2805=2806
<2807=2808
<2808=2810,2809
<2811=2812
<2812=2814,2813
<2814=2815
<2815=2817,2816
<2818=2819
<2819=2821,2820
<2821=2822
<2822=2824,2823
<2825=2826
<2826=2836,2835,2827
<2827=2834,2828
<2828=2830,2829
<2830=2831
<2831=2833,2832
<2837=2861,2852,2849,2838
<2838=2839
<2839=2845,2840
<2840=2841
<2841=2842
<2842=2844,2843
<2845=2846
<2846=2848,2847
<2849=2851,2850
<2852=2853
<2853=2860,2854
<2854=2856,2855
<2856=2857
<2857=2859,2858
<2861=2862
<2862=2863
<2863=2868,2867,2864
<2864=2866,2865
<2869=2870
<2870=2872,2871
<2872=2874,2873
<2874=2875
<2875=2877,2876
<2878=2899,2879
<2879=2887,2880
<2880=2881
<2881=2883,2882
<2883=2884
<2884=2886,2885
<2887=2888
<2888=2890,2889
<2890=2891
<2891=2893,2892
<2893=2895,2894
<2895=2896
<2896=2898,2897
<2899=2900
<2900=2933,2901
<2901=2920,2902
<2902=2909,2903
<2903=2905,2904
<2905=2906
<2906=2908,2907
<2909=2911,2910
<2911=2912
<2912=2914,2913
<2914=2916,2915
<2916=2917
<2917=2919,2918
<2920=2932,2921
<2921=2923,2922
<2923=2924
<2924=2926,2925
<2926=2928,2927
<2928=2929
<2929=2931,2930
<2933=2935,2934
<2935=2937,2936
<2937=2938
<2938=2940,2939
<2941=2942
<2942=2944,2943
<2944=2945
<2945=2947,2946
<2948=2949
<2949=2951,2950
<2952=2953
<2953=2958,2957,2954
<2954=2956,2955
<3013=3016,3015,3014
<3016=3244,3240,3229,3206,3017
<3017=3202,3018
<3018=3190,3186,3174,3170,3158,3154,3124,3112,3108,3096,3092,3088,3019
<3019=3084,3020
<3020=3021
<3021=3022
<3022=3082,3023
<3023=3080,3076,3072,3070,3068,3060,3056,3054,3052,3042,3032,3030,3028,3026,3024
<3024=3025
<3026=3027
<3028=3029
<3030=3031
<3032=3033
<3033=3038,3035,3034
<3035=3037,3036
<3038=3039
<3039=3041,3040
<3042=3043
<3043=3048,3045,3044
<3045=3047,3046
<3048=3049
<3049=3051,3050
<3052=3053
<3054=3055
<3056=3057
<3057=3059,3058
<3060=3061
<3061=3065,3062
<3062=3064,3063
<3065=3067,3066
<3068=3069
<3070=3071
<3072=3073
<3073=3075,3074
<3076=3077
<3077=3079,3078
<3080=3081
<3082=3083
<3084=3085
<3085=3087,3086
<3088=3089
<3089=3091,3090
<3092=3093
<3093=3095,3094
<3096=3097
<3097=3107,3098
<3098=3104,3099
<3099=3103,3100
<3100=3102,3101
<3104=3106,3105
<3108=3109
<3109=3111,3110
<3112=3113
<3113=3123,3114
<3114=3120,3115
<3115=3119,3116
<3116=3118,3117
<3120=3122,3121
<3124=3150,3125
<3125=3132,3126
<3126=3127
<3127=3129,3128
<3129=3131,3130
<3132=3133
<3133=3147,3134
<3134=3142,3135
<3135=3141,3136
<3136=3138,3137
<3138=3140,3139
<3142=3146,3143
<3143=3145,3144
<3147=3149,3148
<3150=3151
<3151=3153,3152
<3154=3155
<3155=3157,3156
<3158=3159
<3159=3169,3160
<3160=3166,3161
<3161=3165,3162
<3162=3164,3163
<3166=3168,3167
<3170=3171
<3171=3173,3172
<3174=3175
<3175=3185,3176
<3176=3182,3177
<3177=3181,3178
<3178=3180,3179
<3182=3184,3183
<3186=3187
<3187=3189,3188
<3190=3191
<3191=3201,3192
<3192=3198,3193
<3193=3197,3194
<3194=3196,3195
<3198=3200,3199
<3202=3203
<3203=3205,3204
<3206=3207
<3207=3228,3227,3208
<3208=3226,3209
<3209=3219,3210
<3210=3212,3211
<3212=3216,3213
<3213=3215,3214
<3216=3218,3217
<3219=3223,3220
<3220=3222,3221
<3223=3225,3224
<3229=3230
<3230=3238,3231
<3231=3234,3232
<3232=3233
<3234=3235
<3235=3237,3236
<3238=3239
<3240=3241
<3241=3243,3242
<3244=3245
<3245=3247,3246
<3247=3248
<3248=3250,3249
<3289=3292,3291,3290
<3292=3493,3486,3463,3458,3453,3413,3344,3328,3312,3300,3293
<3293=3294
<3294=3298,3295
<3295=3296
<3296=3297
<3298=3299
<3300=3301
<3301=3311,3310,3302
<3302=3309,3303
<3303=3307,3304
<3304=3305
<3305=3306
<3307=3308
<3312=3326,3313
<3313=3314
<3314=3324,3315
<3315=3322,3318,3316
<3316=3317
<3318=3319
<3319=3321,3320
<3322=3323
<3324=3325
<3326=3327
<3328=3342,3329
<3329=3330
<3330=3340,3331
<3331=3336,3334,3332
<3332=3333
<3334=3335
<3336=3337
<3337=3339,3338
<3340=3341
<3342=3343
<3344=3345
<3345=3411,3346
<3346=3409,3407,3405,3393,3389,3387,3385,3381,3370,3366,3355,3347
<3347=3348
<3348=3354,3349
<3349=3353,3350
<3350=3352,3351
<3355=3356
<3356=3365,3357
<3357=3359,3358
<3359=3360
<3360=3362,3361
<3362=3364,3363
<3366=3367
<3367=3369,3368
<3370=3371
<3371=3380,3372
<3372=3374,3373
<3374=3375
<3375=3377,3376
<3377=3379,3378
<3381=3382
<3382=3384,3383
<3385=3386
<3387=3388
<3389=3390
<3390=3392,3391
<3393=3394
<3394=3404,3395
<3395=3401,3396
<3396=3400,3397
<3397=3399,3398
<3401=3403,3402
<3405=3406
<3407=3408
<3409=3410
<3411=3412
<3413=3414
<3414=3451,3415
<3415=3449,3447,3445,3441,3437,3435,3433,3429,3425,3416
<3416=3417
<3417=3424,3418
<3418=3420,3419
<3420=3421
<3421=3423,3422
<3425=3426
<3426=3428,3427
<3429=3430
<3430=3432,3431
<3433=3434
<3435=3436
<3437=3438
<3438=3440,3439
<3441=3442
<3442=3444,3443
<3445=3446
<3447=3448
<3449=3450
<3451=3452
<3453=3454
<3454=3457,3456,3455
<3458=3459
<3459=3462,3461,3460
<3463=3478,3464
<3464=3465
<3465=3477,3466
<3466=3468,3467
<3468=3469
<3469=3471,3470
<3471=3473,3472
<3473=3474
<3474=3476,3475
<3478=3479
<3479=3483,3480
<3480=3482,3481
<3483=3485,3484
<3486=3487
<3487=3492,3491,3488
<3488=3490,3489
<3493=3494
<3494=3496,3495
<3496=3497
<3497=3499,3498
<3540=3543,3542,3541
<3543=3762,3758,3754,3750,3743,3728,3719,3712,3705,3691,3687,3680,3662,3544
<3544=3636,3616,3545
<3545=3546
<3546=3602,3595,3576,3569,3562,3558,3554,3547
<3547=3548
<3548=3550,3549
<3550=3551
<3551=3553,3552
<3554=3555
<3555=3557,3556
<3558=3559
<3559=3561,3560
<3562=3563
<3563=3565,3564
<3565=3566
<3566=3568,3567
<3569=3570
<3570=3572,3571
<3572=3573
<3573=3575,3574
<3576=3586,3577
<3577=3578
<3578=3582,3579
<3579=3580
<3580=3581
<3582=3583
<3583=3585,3584
<3586=3587
<3587=3589,3588
<3589=3591,3590
<3591=3592
<3592=3594,3593
<3595=3596
<3596=3598,3597
<3598=3599
<3599=3601,3600
<3602=3603
<3603=3612,3604
<3604=3605
<3605=3606
<3606=3608,3607
<3608=3609
<3609=3611,3610
<3612=3613
<3613=3615,3614
<3616=3624,3617
<3617=3618
<3618=3620,3619
<3620=3621
<3621=3623,3622
<3624=3632,3625
<3625=3626
<3626=3630,3627
<3627=3628
<3628=3629
<3630=3631
<3632=3633
<3633=3635,3634
<3636=3637
<3637=3657,3638
<3638=3646,3639
<3639=3645,3640
<3640=3644,3641
<3641=3643,3642
<3646=3654,3647
<3647=3651,3648
<3648=3650,3649
<3651=3653,3652
<3654=3656,3655
<3657=3661,3658
<3658=3660,3659
<3662=3663
<3663=3676,3664
<3664=3674,3667,3665
<3665=3666
<3667=3668
<3668=3670,3669
<3670=3671
<3671=3673,3672
<3674=3675
<3676=3677
<3677=3679,3678
<3680=3681
<3681=3683,3682
<3683=3684
<3684=3686,3685
<3687=3688
<3688=3690,3689
<3691=3692
<3692=3701,3693
<3693=3694
<3694=3695
<3695=3697,3696
<3697=3698
<3698=3700,3699
<3701=3702
<3702=3704,3703
<3705=3706
<3706=3708,3707
<3708=3709
<3709=3711,3710
<3712=3713
<3713=3717,3714
<3714=3715
<3715=3716
<3717=3718
<3719=3720
<3720=3726,3721
<3721=3722
<3722=3723
<3723=3725,3724
<3726=3727
<3728=3729
<3729=3739,3730
<3730=3737,3735,3733,3731
<3731=3732
<3733=3734
<3735=3736
<3737=3738
<3739=3740
<3740=3742,3741
<3743=3744
<3744=3746,3745
<3746=3747
<3747=3749,3748
<3750=3751
<3751=3753,3752
<3754=3755
<3755=3757,3756
<3758=3759
<3759=3761,3760
<3762=3763
<3763=3765,3764
<3796=3799,3798,3797
<3799=4063,4001,3996,3991,3972,3800
<3800=3970,3872,3801
<3801=3802
<3802=3838,3820,3805,3803
<3803=3804
<3805=3811,3806
<3806=3807
<3807=3809,3808
<3809=3810
<3811=3812
<3812=3816,3813
<3813=3814
<3814=3815
<3816=3817
<3817=3819,3818
<3820=3832,3821
<3821=3822
<3822=3828,3823
<3823=3824
<3824=3825
<3825=3827,3826
<3828=3829
<3829=3831,3830
<3832=3833
<3833=3837,3834
<3834=3836,3835
<3838=3865,3839
<3839=3847,3840
<3840=3841
<3841=3843,3842
<3843=3844
<3844=3846,3845
<3847=3859,3854,3848
<3848=3849
<3849=3850
<3850=3852,3851
<3852=3853
<3854=3855
<3855=3857,3856
<3857=3858
<3859=3860
<3860=3862,3861
<3862=3864,3863
<3865=3866
<3866=3868,3867
<3868=3869
<3869=3871,3870
<3872=3934,3875,3873
<3873=3874
<3875=3932,3905,3876
<3876=3877
<3877=3895,3885,3878
<3878=3881,3879
<3879=3880
<3881=3882
<3882=3884,3883
<3885=3891,3886
<3886=3887
<3887=3889,3888
<3889=3890
<3891=3892
<3892=3894,3893
<3895=3896
<3896=3904,3903,3897
<3897=3902,3898
<3898=3900,3899
<3900=3901
<3905=3927,3916,3906
<3906=3912,3907
<3907=3908
<3908=3910,3909
<3910=3911
<3912=3913
<3913=3915,3914
<3916=3917
<3917=3925,3918
<3918=3923,3921,3919
<3919=3920
<3921=3922
<3923=3924
<3925=3926
<3927=3928
<3928=3930,3929
<3930=3931
<3932=3933
<3934=3966,3935
<3935=3948,3938,3936
<3936=3937
<3938=3944,3939
<3939=3940
<3940=3942,3941
<3942=3943
<3944=3945
<3945=3947,3946
<3948=3962,3949
<3949=3950
<3950=3960,3951
<3951=3958,3956,3952
<3952=3953
<3953=3955,3954
<3956=3957
<3958=3959
<3960=3961
<3962=3963
<3963=3965,3964
<3966=3967
<3967=3969,3968
<3970=3971
<3972=3989,3973
<3973=3978,3974
<3974=3975
<3975=3977,3976
<3978=3979
<3979=3985,3980
<3980=3981
<3981=3982
<3982=3984,3983
<3985=3986
<3986=3988,3987
<3989=3990
<3991=3992
<3992=3994,3993
<3994=3995
<3996=3997
<3997=3999,3998
<3999=4000
<4001=4053,4002
<4002=4035,4028,4014,4003
<4003=4004
<4004=4012,4005
<4005=4010,4008,4006
<4006=4007
<4008=4009
<4010=4011
<4012=4013
<4014=4015
<4015=4026,4016
<4016=4024,4017
<4017=4018
<4018=4020,4019
<4020=4021
<4021=4023,4022
<4024=4025
<4026=4027
<4028=4029
<4029=4031,4030
<4031=4032
<4032=4034,4033
<4035=4047,4042,4036
<4036=4037
<4037=4038
<4038=4040,4039
<4040=4041
<4042=4043
<4043=4045,4044
<4045=4046
<4047=4048
<4048=4050,4049
<4050=4052,4051
<4053=4054
<4054=4060,4055
<4055=4057,4056
<4057=4059,4058
<4060=4062,4061
<4063=4066,4064
<4064=4065
<4066=4067
<4067=4069,4068
<4100=4115,4114,4101
<4101=4111,4108,4105,4102
<4102=4104,4103
<4105=4107,4106
<4108=4110,4109
<4111=4113,4112
<4115=4259,4252,4233,4224,4210,4196,4189,4144,4123,4116
<4116=4117
<4117=4121,4118
<4118=4119
<4119=4120
<4121=4122
<4123=4138,4124
<4124=4125
<4125=4134,4126
<4126=4127
<4127=4128
<4128=4130,4129
<4130=4131
<4131=4133,4132
<4134=4135
<4135=4137,4136
<4138=4139
<4139=4143,4140
<4140=4142,4141
<4144=4187,4145
<4145=4178,4155,4146
<4146=4147
<4147=4149,4148
<4149=4150
<4150=4152,4151
<4152=4154,4153
<4155=4156
<4156=4172,4157
<4157=4158
<4158=4159
<4159=4170,4160
<4160=4163,4161
<4161=4162
<4163=4164
<4164=4166,4165
<4166=4167
<4167=4169,4168
<4170=4171
<4172=4173
<4173=4175,4174
<4175=4177,4176
<4178=4179
<4179=4181,4180
<4181=4182
<4182=4184,4183
<4184=4186,4185
<4187=4188
<4189=4190
<4190=4192,4191
<4192=4193
<4193=4195,4194
<4196=4197
<4197=4206,4198
<4198=4199
<4199=4200
<4200=4202,4201
<4202=4203
<4203=4205,4204
<4206=4207
<4207=4209,4208
<4210=4211
<4211=4220,4212
<4212=4213
<4213=4214
<4214=4216,4215
<4216=4217
<4217=4219,4218
<4220=4221
<4221=4223,4222
<4224=4225
<4225=4229,4226
<4226=4227
<4227=4228
<4229=4230
<4230=4232,4231
<4233=4234
<4234=4248,4235
<4235=4236
<4236=4237
<4237=4247,4238
<4238=4246,4239
<4239=4245,4240
<4240=4244,4241
<4241=4243,4242
<4248=4249
<4249=4251,4250
<4252=4253
<4253=4255,4254
<4255=4256
<4256=4258,4257
<4259=4260
<4260=4264,4261
<4261=4262
<4262=4263
<4264=4265
<4290=4302,4301,4291
<4291=4298,4295,4292
<4292=4294,4293
<4295=4297,4296
<4298=4300,4299
<4302=4459,4447,4440,4421,4407,4393,4386,4341,4320,4310,4303
<4303=4304
<4304=4308,4305
<4305=4306
<4306=4307
<4308=4309
<4310=4316,4311
<4311=4312
<4312=4314,4313
<4314=4315
<4316=4317
<4317=4319,4318
<4320=4335,4321
<4321=4322
<4322=4331,4323
<4323=4324
<4324=4325
<4325=4327,4326
<4327=4328
<4328=4330,4329
<4331=4332
<4332=4334,4333
<4335=4336
<4336=4340,4337
<4337=4339,4338
<4341=4384,4342
<4342=4375,4352,4343
<4343=4344
<4344=4346,4345
<4346=4347
<4347=4349,4348
<4349=4351,4350
<4352=4353
<4353=4369,4354
<4354=4355
<4355=4356
<4356=4367,4357
<4357=4360,4358
<4358=4359
<4360=4361
<4361=4363,4362
<4363=4364
<4364=4366,4365
<4367=4368
<4369=4370
<4370=4372,4371
<4372=4374,4373
<4375=4376
<4376=4378,4377
<4378=4379
<4379=4381,4380
<4381=4383,4382
<4384=4385
<4386=4387
<4387=4389,4388
<4389=4390
<4390=4392,4391
<4393=4394
<4394=4403,4395
<4395=4396
<4396=4397
<4397=4399,4398
<4399=4400
<4400=4402,4401
<4403=4404
<4404=4406,4405
<4407=4408
<4408=4417,4409
<4409=4410
<4410=4411
<4411=4413,4412
<4413=4414
<4414=4416,4415
<4417=4418
<4418=4420,4419
<4421=4422
<4422=4436,4423
<4423=4424
<4424=4425
<4425=4435,4426
<4426=4434,4427
<4427=4433,4428
<4428=4432,4429
<4429=4431,4430
<4436=4437
<4437=4439,4438
<4440=4441
<4441=4443,4442
<4443=4444
<4444=4446,4445
<4447=4455,4448
<4448=4449
<4449=4453,4450
<4450=4451
<4451=4452
<4453=4454
<4455=4456
<4456=4458,4457
<4459=4460
<4460=4464,4461
<4461=4462
<4462=4463
<4464=4465
<4492=4507,4506,4493
<4493=4503,4500,4497,4494
<4494=4496,4495
<4497=4499,4498
<4500=4502,4501
<4503=4505,4504
<4507=5378,5341,5334,5327,5286,5275,5268,5245,5238,5202,5195,5188,5177,5154,5143,5115,5111,5105,5099,5085,5061,4963,4877,4863,4843,4839,4606,4599,4560,4553,4546,4508
<4508=4542,4509
<4509=4537,4517,4510
<4510=4511
<4511=4513,4512
<4513=4514
<4514=4516,4515
<4517=4528,4518
<4518=4519
<4519=4520
<4520=4524,4521
<4521=4522
<4522=4523
<4524=4525
<4525=4527,4526
<4528=4529
<4529=4531,4530
<4531=4533,4532
<4533=4534
<4534=4536,4535
<4537=4538
<4538=4541,4540,4539
<4542=4543
<4543=4545,4544
<4546=4547
<4547=4549,4548
<4549=4550
<4550=4552,4551
<4553=4554
<4554=4556,4555
<4556=4557
<4557=4559,4558
<4560=4570,4561
<4561=4562
<4562=4566,4563
<4563=4564
<4564=4565
<4566=4567
<4567=4569,4568
<4570=4571
<4571=4591,4572
<4572=4583,4573
<4573=4575,4574
<4575=4577,4576
<4577=4579,4578
<4579=4580
<4580=4582,4581
<4583=4585,4584
<4585=4587,4586
<4587=4588
<4588=4590,4589
<4591=4593,4592
<4593=4595,4594
<4595=4596
<4596=4598,4597
<4599=4600
<4600=4602,4601
<4602=4603
<4603=4605,4604
<4606=4829,4607
<4607=4813,4786,4770,4748,4608
<4608=4744,4675,4609
<4609=4610
<4610=4611
<4611=4671,4612
<4612=4613
<4613=4669,4614
<4614=4667,4660,4648,4639,4635,4615
<4615=4616
<4616=4631,4617
<4617=4622,4618
<4618=4619
<4619=4621,4620
<4622=4623
<4623=4627,4624
<4624=4625
<4625=4626
<4627=4628
<4628=4630,4629
<4631=4632
<4632=4634,4633
<4635=4636
<4636=4638,4637
<4639=4640
<4640=4644,4641
<4641=4642
<4642=4643
<4644=4645
<4645=4647,4646
<4648=4649
<4649=4651,4650
<4651=4652
<4652=4654,4653
<4654=4656,4655
<4656=4657
<4657=4659,4658
<4660=4661
<4661=4663,4662
<4663=4664
<4664=4666,4665
<4667=4668
<4669=4670
<4671=4672
<4672=4674,4673
<4675=4740,4676
<4676=4736,4677
<4677=4678
<4678=4734,4679
<4679=4732,4725,4713,4704,4700,4680
<4680=4681
<4681=4696,4682
<4682=4687,4683
<4683=4684
<4684=4686,4685
<4687=4688
<4688=4692,4689
<4689=4690
<4690=4691
<4692=4693
<4693=4695,4694
<4696=4697
<4697=4699,4698
<4700=4701
<4701=4703,4702
<4704=4705
<4705=4709,4706
<4706=4707
<4707=4708
<4709=4710
<4710=4712,4711
<4713=4714
<4714=4716,4715
<4716=4717
<4717=4719,4718
<4719=4721,4720
<4721=4722
<4722=4724,4723
<4725=4726
<4726=4728,4727
<4728=4729
<4729=4731,4730
<4732=4733
<4734=4735
<4736=4737
<4737=4739,4738
<4740=4741
<4741=4743,4742
<4744=4745
<4745=4747,4746
<4748=4749
<4749=4769,4750
<4750=4765,4751
<4751=4756,4752
<4752=4753
<4753=4755,4754
<4756=4757
<4757=4761,4758
<4758=4759
<4759=4760
<4761=4762
<4762=4764,4763
<4765=4766
<4766=4768,4767
<4770=4775,4771
<4771=4772
<4772=4774,4773
<4775=4776
<4776=4778,4777
<4778=4780,4779
<4780=4781
<4781=4783,4782
<4783=4785,4784
<4786=4787
<4787=4812,4811,4788
<4788=4810,4789
<4789=4808,4790
<4790=4793,4791
<4791=4792
<4793=4794
<4794=4807,4795
<4795=4799,4796
<4796=4798,4797
<4799=4801,4800
<4801=4802
<4802=4804,4803
<4804=4806,4805
<4808=4809
<4813=4814
<4814=4828,4827,4815
<4815=4826,4816
<4816=4820,4817
<4817=4819,4818
<4820=4822,4821
<4822=4823
<4823=4825,4824
<4829=4830
<4830=4836,4831
<4831=4833,4832
<4833=4835,4834
<4836=4838,4837
<4839=4840
<4840=4842,4841
<4843=4859,4844
<4844=4845
<4845=4846
<4846=4855,4847
<4847=4848
<4848=4849
<4849=4851,4850
<4851=4852
<4852=4854,4853
<4855=4856
<4856=4858,4857
<4859=4860
<4860=4862,4861
<4863=4864
<4864=4873,4865
<4865=4866
<4866=4867
<4867=4869,4868
<4869=4870
<4870=4872,4871
<4873=4874
<4874=4876,4875
<4877=4961,4878
<4878=4957,4950,4942,4926,4912,4904,4896,4888,4879
<4879=4880
<4880=4884,4881
<4881=4882
<4882=4883
<4884=4885
<4885=4887,4886
<4888=4889
<4889=4893,4890
<4890=4892,4891
<4893=4895,4894
<4896=4897
<4897=4901,4898
<4898=4900,4899
<4901=4903,4902
<4904=4905
<4905=4909,4906
<4906=4908,4907
<4909=4911,4910
<4912=4913
<4913=4923,4914
<4914=4922,4915
<4915=4919,4916
<4916=4918,4917
<4919=4921,4920
<4923=4925,4924
<4926=4927
<4927=4939,4928
<4928=4936,4929
<4929=4933,4930
<4930=4932,4931
<4933=4935,4934
<4936=4938,4937
<4939=4941,4940
<4942=4943
<4943=4947,4944
<4944=4946,4945
<4947=4949,4948
<4950=4951
<4951=4953,4952
<4953=4954
<4954=4956,4955
<4957=4958
<4958=4960,4959
<4961=4962
<4963=5038,4964
<4964=5008,5001,4997,4991,4984,4977,4970,4966,4965
<4966=4967
<4967=4969,4968
<4970=4971
<4971=4973,4972
<4973=4974
<4974=4976,4975
<4977=4978
<4978=4980,4979
<4980=4981
<4981=4983,4982
<4984=4985
<4985=4987,4986
<4987=4988
<4988=4990,4989
<4991=4992
<4992=4996,4993
<4993=4995,4994
<4997=4998
<4998=5000,4999
<5001=5002
<5002=5004,5003
<5004=5005
<5005=5007,5006
<5008=5009
<5009=5036,5010
<5010=5034,5027,5023,5019,5011
<5011=5012
<5012=5015,5014,5013
<5015=5016
<5016=5018,5017
<5019=5020
<5020=5022,5021
<5023=5024
<5024=5026,5025
<5027=5028
<5028=5030,5029
<5030=5031
<5031=5033,5032
<5034=5035
<5036=5037
<5038=5039
<5039=5060,5040
<5040=5057,5041
<5041=5047,5042
<5042=5046,5043
<5043=5045,5044
<5047=5049,5048
<5049=5051,5050
<5051=5052
<5052=5054,5053
<5054=5056,5055
<5057=5059,5058
<5061=5062
<5062=5084,5063
<5063=5081,5064
<5064=5073,5065
<5065=5069,5066
<5066=5067
<5067=5068
<5069=5070
<5070=5072,5071
<5073=5077,5074
<5074=5075
<5075=5076
<5077=5078
<5078=5080,5079
<5081=5083,5082
<5085=5086
<5086=5098,5087
<5087=5095,5088
<5088=5092,5089
<5089=5091,5090
<5092=5094,5093
<5095=5097,5096
<5099=5100
<5100=5104,5101
<5101=5103,5102
<5105=5106
<5106=5110,5107
<5107=5109,5108
<5111=5112
<5112=5114,5113
<5115=5116
<5116=5142,5117
<5117=5139,5118
<5118=5138,5119
<5119=5129,5120
<5120=5122,5121
<5122=5126,5123
<5123=5125,5124
<5126=5128,5127
<5129=5131,5130
<5131=5135,5132
<5132=5134,5133
<5135=5137,5136
<5139=5141,5140
<5143=5144
<5144=5152,5145
<5145=5148,5146
<5146=5147
<5148=5149
<5149=5151,5150
<5152=5153
<5154=5155
<5155=5176,5175,5156
<5156=5174,5157
<5157=5170,5158
<5158=5168,5161,5159
<5159=5160
<5161=5162
<5162=5164,5163
<5164=5165
<5165=5167,5166
<5168=5169
<5170=5171
<5171=5173,5172
<5177=5178
<5178=5186,5179
<5179=5182,5180
<5180=5181
<5182=5183
<5183=5185,5184
<5186=5187
<5188=5192,5189
<5189=5191,5190
<5192=5194,5193
<5195=5196
<5196=5198,5197
<5198=5199
<5199=5201,5200
<5202=5203
<5203=5237,5236,5204
<5204=5235,5205
<5205=5233,5206
<5206=5207
<5207=5208
<5208=5222,5209
<5209=5211,5210
<5211=5212
<5212=5214,5213
<5214=5216,5215
<5216=5217
<5217=5219,5218
<5219=5221,5220
<5222=5224,5223
<5224=5225
<5225=5227,5226
<5227=5229,5228
<5229=5230
<5230=5232,5231
<5233=5234
<5238=5239
<5239=5241,5240
<5241=5242
<5242=5244,5243
<5245=5264,5246
<5246=5247
<5247=5262,5248
<5248=5260,5253,5249
<5249=5250
<5250=5252,5251
<5253=5254
<5254=5256,5255
<5256=5257
<5257=5259,5258
<5260=5261
<5262=5263
<5264=5265
<5265=5267,5266
<5268=5269
<5269=5271,5270
<5271=5272
<5272=5274,5273
<5275=5276
<5276=5285,5284,5277
<5277=5283,5278
<5278=5280,5279
<5280=5282,5281
<5286=5312,5287
<5287=5298,5292,5288
<5288=5289
<5289=5291,5290
<5292=5293
<5293=5295,5294
<5295=5297,5296
<5298=5299
<5299=5308,5300
<5300=5301
<5301=5302
<5302=5304,5303
<5304=5305
<5305=5307,5306
<5308=5309
<5309=5311,5310
<5312=5313
<5313=5317,5314
<5314=5316,5315
<5317=5324,5318
<5318=5320,5319
<5320=5321
<5321=5323,5322
<5324=5326,5325
<5327=5328
<5328=5333,5332,5329
<5329=5331,5330
<5334=5335
<5335=5337,5336
<5337=5338
<5338=5340,5339
<5341=5374,5342
<5342=5365,5358,5351,5344,5343
<5344=5345
<5345=5347,5346
<5347=5348
<5348=5350,5349
<5351=5352
<5352=5354,5353
<5354=5355
<5355=5357,5356
<5358=5359
<5359=5361,5360
<5361=5362
<5362=5364,5363
<5365=5366
<5366=5370,5367
<5367=5368
<5368=5369
<5370=5371
<5371=5373,5372
<5374=5375
<5375=5377,5376
<5378=5379
<5379=5392,5391,5380
<5380=5390,5381
<5381=5389,5382
<5382=5388,5383
<5383=5387,5384
<5384=5386,5385
<5506=5536,5535,5507
<5507=5532,5529,5526,5523,5520,5517,5514,5511,5508
<5508=5510,5509
<5511=5513,5512
<5514=5516,5515
<5517=5519,5518
<5520=5522,5521
<5523=5525,5524
<5526=5528,5527
<5529=5531,5530
<5532=5534,5533
<5536=6000,5991,5982,5973,5964,5955,5954,5953,5952,5951,5950,5949,5948,5947,5946,5945,5944,5943,5942,5941,5940,5939,5938,5937,5936,5935,5934,5933,5932,5931,5930,5929,5928,5927,5926,5925,5924,5923,5922,5921,5920,5919,5918,5917,5916,5915,5914,5913,5912,5911,5910,5909,5908,5907,5906,5905,5904,5903,5902,5901,5900,5899,5898,5897,5896,5895,5892,5871,5862,5853,5844,5835,5826,5825,5824,5823,5822,5821,5820,5819,5818,5817,5816,5815,5814,5813,5812,5811,5810,5809,5808,5807,5806,5805,5804,5803,5802,5801,5800,5799,5798,5797,5796,5795,5794,5793,5792,5791,5790,5789,5788,5787,5786,5785,5784,5783,5782,5781,5780,5779,5778,5537,5539,5677,5693,5694,5695,5696,5697,5698,5699,5700,5701,5702,5703,5704,5705,5706,5707,5708,5709,5710,5711,5712,5713,5746,5751,5752,5753,5754,5755,5756,5757,5758,5759,5760,5761,5762,5763,5766,5767,5768,5769,5770,5771,5772,5773,5774,5775,5776,5777
<5537=5538
<5539=5669,5540
<5540=5661,5653,5647,5646,5645,5644,5643,5642,5641,5640,5639,5638,5637,5636,5635,5634,5628,5622,5616,5610,5602,5594,5588,5587,5586,5585,5584,5583,5582,5581,5580,5579,5578,5577,5576,5575,5569,5563,5557,5551,5541
<5541=5542
<5542=5548,5543
<5543=5545,5544
<5545=5547,5546
<5548=5550,5549
<5551=5552
<5552=5554,5553
<5554=5556,5555
<5557=5558
<5558=5560,5559
<5560=5562,5561
<5563=5564
<5564=5566,5565
<5566=5568,5567
<5569=5570
<5570=5572,5571
<5572=5574,5573
<5588=5589
<5589=5591,5590
<5591=5593,5592
<5594=5595
<5595=5599,5596
<5596=5598,5597
<5599=5601,5600
<5602=5603
<5603=5607,5604
<5604=5606,5605
<5607=5609,5608
<5610=5611
<5611=5613,5612
<5613=5615,5614
<5616=5617
<5617=5619,5618
<5619=5621,5620
<5622=5623
<5623=5625,5624
<5625=5627,5626
<5628=5629
<5629=5631,5630
<5631=5633,5632
<5647=5648
<5648=5650,5649
<5650=5652,5651
<5653=5654
<5654=5658,5655
<5655=5657,5656
<5658=5660,5659
<5661=5662
<5662=5666,5663
<5663=5665,5664
<5666=5668,5667
<5669=5670
<5670=5674,5671
<5671=5673,5672
<5674=5676,5675
<5677=5678
<5678=5692,5691,5679
<5679=5690,5680
<5680=5684,5681
<5681=5682
<5682=5683
<5684=5685
<5685=5687,5686
<5687=5689,5688
<5713=5714
<5714=5745,5744,5715
<5715=5743,5716
<5716=5718,5717
<5718=5719
<5719=5721,5720
<5721=5737,5722
<5722=5736,5723
<5723=5730,5724
<5724=5726,5725
<5726=5727
<5727=5729,5728
<5730=5732,5731
<5732=5733
<5733=5735,5734
<5737=5739,5738
<5739=5740
<5740=5742,5741
<5746=5747
<5747=5749,5748
<5749=5750
<5763=5764
<5764=5765
<5826=5827
<5827=5834,5833,5828
<5828=5832,5829
<5829=5831,5830
<5835=5836
<5836=5843,5842,5837
<5837=5841,5838
<5838=5840,5839
<5844=5845
<5845=5852,5851,5846
<5846=5850,5847
<5847=5849,5848
<5853=5854
<5854=5861,5860,5855
<5855=5859,5856
<5856=5858,5857
<5862=5863
<5863=5870,5869,5864
<5864=5868,5865
<5865=5867,5866
<5871=5872
<5872=5891,5873
<5873=5887,5874
<5874=5885,5881,5879,5877,5875
<5875=5876
<5877=5878
<5879=5880
<5881=5882
<5882=5884,5883
<5885=5886
<5887=5888
<5888=5890,5889
<5892=5893
<5893=5894
<5955=5956
<5956=5963,5962,5957
<5957=5961,5958
<5958=5960,5959
<5964=5965
<5965=5972,5971,5966
<5966=5970,5967
<5967=5969,5968
<5973=5974
<5974=5981,5980,5975
<5975=5979,5976
<5976=5978,5977
<5982=5983
<5983=5990,5989,5984
<5984=5988,5985
<5985=5987,5986
<5991=5992
<5992=5999,5998,5993
<5993=5997,5994
<5994=5996,5995
<6000=6001
<6001=6020,6002
<6002=6016,6003
<6003=6014,6010,6008,6006,6004
<6004=6005
<6006=6007
<6008=6009
<6010=6011
<6011=6013,6012
<6014=6015
<6016=6017
<6017=6019,6018
<6082=6100,6099,6083
<6083=6096,6093,6090,6087,6084
<6084=6086,6085
<6087=6089,6088
<6090=6092,6091
<6093=6095,6094
<6096=6098,6097
<6100=6534,6516,6509,6483,6415,6391,6316,6312,6308,6280,6192,6151,6135,6129,6118,6112,6101
<6101=6102
<6102=6106,6103
<6103=6104
<6104=6105
<6106=6107
<6107=6109,6108
<6109=6111,6110
<6112=6113
<6113=6115,6114
<6115=6117,6116
<6118=6119
<6119=6123,6120
<6120=6121
<6121=6122
<6123=6124
<6124=6126,6125
<6126=6128,6127
<6129=6130
<6130=6132,6131
<6132=6134,6133
<6135=6136
<6136=6150,6149,6137
<6137=6148,6138
<6138=6147,6139
<6139=6145,6140
<6140=6141
<6141=6142
<6142=6144,6143
<6145=6146
<6151=6188,6152
<6152=6153
<6153=6186,6154
<6154=6184,6180,6176,6169,6162,6155
<6155=6156
<6156=6160,6157
<6157=6158
<6158=6159
<6160=6161
<6162=6163
<6163=6167,6164
<6164=6165
<6165=6166
<6167=6168
<6169=6170
<6170=6174,6171
<6171=6172
<6172=6173
<6174=6175
<6176=6177
<6177=6179,6178
<6180=6181
<6181=6183,6182
<6184=6185
<6186=6187
<6188=6189
<6189=6191,6190
<6192=6274,6193
<6193=6231,6230,6228,6227,6225,6219,6218,6217,6216,6215,6214,6213,6212,6211,6210,6209,6208,6207,6206,6205,6204,6203,6202,6201,6200,6199,6198,6197,6196,6195,6194
<6219=6220
<6220=6224,6221
<6221=6223,6222
<6225=6226
<6228=6229
<6231=6270,6232
<6232=6233
<6233=6268,6234
<6234=6266,6262,6258,6256,6249,6242,6235
<6235=6236
<6236=6240,6237
<6237=6238
<6238=6239
<6240=6241
<6242=6243
<6243=6247,6244
<6244=6245
<6245=6246
<6247=6248
<6249=6250
<6250=6254,6251
<6251=6252
<6252=6253
<6254=6255
<6256=6257
<6258=6259
<6259=6261,6260
<6262=6263
<6263=6265,6264
<6266=6267
<6268=6269
<6270=6271
<6271=6273,6272
<6274=6275
<6275=6279,6276
<6276=6278,6277
<6280=6281
<6281=6307,6306,6282
<6282=6305,6283
<6283=6303,6284
<6284=6301,6299,6297,6295,6293,6291,6289,6287,6285
<6285=6286
<6287=6288
<6289=6290
<6291=6292
<6293=6294
<6295=6296
<6297=6298
<6299=6300
<6301=6302
<6303=6304
<6308=6309
<6309=6311,6310
<6312=6313
<6313=6315,6314
<6316=6385,6317
<6317=6349,6343,6342,6341,6340,6339,6338,6337,6336,6335,6334,6333,6332,6331,6330,6329,6328,6327,6326,6325,6324,6323,6322,6321,6320,6319,6318
<6343=6344
<6344=6348,6345
<6345=6347,6346
<6349=6381,6350
<6350=6351
<6351=6379,6352
<6352=6377,6373,6369,6367,6360,6353
<6353=6354
<6354=6358,6355
<6355=6356
<6356=6357
<6358=6359
<6360=6361
<6361=6365,6362
<6362=6363
<6363=6364
<6365=6366
<6367=6368
<6369=6370
<6370=6372,6371
<6373=6374
<6374=6376,6375
<6377=6378
<6379=6380
<6381=6382
<6382=6384,6383
<6385=6386
<6386=6390,6387
<6387=6389,6388
<6391=6392
<6392=6414,6413,6393
<6393=6412,6394
<6394=6410,6395
<6395=6408,6406,6404,6402,6400,6398,6396
<6396=6397
<6398=6399
<6400=6401
<6402=6403
<6404=6405
<6406=6407
<6408=6409
<6410=6411
<6415=6477,6416
<6416=6448,6442,6441,6440,6439,6438,6437,6436,6435,6434,6433,6432,6431,6430,6429,6428,6427,6426,6425,6424,6423,6422,6421,6420,6419,6418,6417
<6442=6443
<6443=6447,6444
<6444=6446,6445
<6448=6473,6449
<6449=6450
<6450=6471,6451
<6451=6469,6465,6461,6459,6452
<6452=6453
<6453=6457,6454
<6454=6455
<6455=6456
<6457=6458
<6459=6460
<6461=6462
<6462=6464,6463
<6465=6466
<6466=6468,6467
<6469=6470
<6471=6472
<6473=6474
<6474=6476,6475
<6477=6478
<6478=6482,6479
<6479=6481,6480
<6483=6484
<6484=6508,6507,6485
<6485=6506,6486
<6486=6504,6487
<6487=6502,6500,6496,6494,6492,6490,6488
<6488=6489
<6490=6491
<6492=6493
<6494=6495
<6496=6497
<6497=6499,6498
<6500=6501
<6502=6503
<6504=6505
<6509=6513,6510
<6510=6512,6511
<6513=6515,6514
<6516=6523,6517
<6517=6522,6521,6518
<6518=6520,6519
<6523=6533,6532,6524
<6524=6531,6525
<6525=6527,6526
<6527=6528
<6528=6530,6529
<6534=6535
<6535=6539,6536
<6536=6537
<6537=6538
<6539=6540
<6540=6542,6541
<6578=6593,6592,6579
<6579=6589,6586,6583,6580
<6580=6582,6581
<6583=6585,6584
<6586=6588,6587
<6589=6591,6590
<6593=8645,8610,8599,8595,8588,8568,8564,8472,8465,8464,8463,8462,8461,8459,8458,8457,8426,8422,8396,8389,8385,8381,8360,8353,8346,8325,8324,8323,8322,8321,6594,6601,6608,6615,6622,6629,6633,6665,6674,6681,7115,7193,7194,7195,7197,7198,7199,7200,7201,7345,7346,7347,7349,7350,7351,7352,7353,7362,7418,7427,7438,7539,7599,7764,7948,7960,7972,8063,8064,8065,8067,8068,8069,8070,8071,8078,8085,8317,8318,8319
<6594=6595
<6595=6597,6596
<6597=6598
<6598=6600,6599
<6601=6602
<6602=6604,6603
<6604=6605
<6605=6607,6606
<6608=6609
<6609=6611,6610
<6611=6612
<6612=6614,6613
<6615=6616
<6616=6618,6617
<6618=6619
<6619=6621,6620
<6622=6623
<6623=6625,6624
<6625=6626
<6626=6628,6627
<6629=6630
<6630=6632,6631
<6633=6657,6648,6645,6634
<6634=6635
<6635=6641,6636
<6636=6637
<6637=6638
<6638=6640,6639
<6641=6642
<6642=6644,6643
<6645=6647,6646
<6648=6649
<6649=6656,6650
<6650=6652,6651
<6652=6653
<6653=6655,6654
<6657=6658
<6658=6659
<6659=6664,6663,6660
<6660=6662,6661
<6665=6666
<6666=6670,6667
<6667=6668
<6668=6669
<6670=6671
<6671=6673,6672
<6674=6675
<6675=6677,6676
<6677=6678
<6678=6680,6679
<6681=7109,6682
<6682=7102,7095,7078,7066,6683
<6683=7062,7043,6684
<6684=6685
<6685=7036,7018,7011,7004,6995,6984,6968,6926,6779,6764,6753,6737,6726,6715,6704,6693,6686
<6686=6687
<6687=6689,6688
<6689=6690
<6690=6692,6691
<6693=6694
<6694=6696,6695
<6696=6698,6697
<6698=6700,6699
<6700=6701
<6701=6703,6702
<6704=6705
<6705=6707,6706
<6707=6709,6708
<6709=6711,6710
<6711=6712
<6712=6714,6713
<6715=6716
<6716=6718,6717
<6718=6720,6719
<6720=6722,6721
<6722=6723
<6723=6725,6724
<6726=6727
<6727=6729,6728
<6729=6731,6730
<6731=6733,6732
<6733=6734
<6734=6736,6735
<6737=6738
<6738=6742,6739
<6739=6740
<6740=6741
<6742=6743
<6743=6745,6744
<6745=6747,6746
<6747=6749,6748
<6749=6750
<6750=6752,6751
<6753=6754
<6754=6756,6755
<6756=6758,6757
<6758=6760,6759
<6760=6761
<6761=6763,6762
<6764=6765
<6765=6771,6766
<6766=6770,6767
<6767=6769,6768
<6771=6773,6772
<6773=6775,6774
<6775=6776
<6776=6778,6777
<6779=6780
<6780=6916,6781
<6781=6913,6782
<6782=6910,6783
<6783=6909,6784
<6784=6908,6785
<6785=6907,6786
<6786=6906,6787
<6787=6903,6788
<6788=6902,6789
<6789=6899,6790
<6790=6896,6791
<6791=6893,6792
<6792=6892,6793
<6793=6891,6794
<6794=6888,6795
<6795=6885,6796
<6796=6884,6797
<6797=6881,6798
<6798=6878,6799
<6799=6875,6800
<6800=6874,6801
<6801=6873,6802
<6802=6870,6803
<6803=6867,6804
<6804=6866,6805
<6805=6865,6806
<6806=6862,6807
<6807=6861,6808
<6808=6860,6809
<6809=6857,6810
<6810=6854,6811
<6811=6853,6812
<6812=6852,6813
<6813=6851,6814
<6814=6848,6815
<6815=6847,6816
<6816=6846,6817
<6817=6843,6818
<6818=6840,6819
<6819=6839,6820
<6820=6838,6821
<6821=6837,6822
<6822=6836,6823
<6823=6835,6824
<6824=6834,6825
<6825=6833,6826
<6826=6830,6827
<6827=6829,6828
<6830=6832,6831
<6840=6842,6841
<6843=6845,6844
<6848=6850,6849
<6854=6856,6855
<6857=6859,6858
<6862=6864,6863
<6867=6869,6868
<6870=6872,6871
<6875=6877,6876
<6878=6880,6879
<6881=6883,6882
<6885=6887,6886
<6888=6890,6889
<6893=6895,6894
<6896=6898,6897
<6899=6901,6900
<6903=6905,6904
<6910=6912,6911
<6913=6915,6914
<6916=6918,6917
<6918=6920,6919
<6920=6922,6921
<6922=6923
<6923=6925,6924
<6926=6927
<6927=6960,6928
<6928=6942,6929
<6929=6931,6930
<6931=6932
<6932=6934,6933
<6934=6936,6935
<6936=6938,6937
<6938=6939
<6939=6941,6940
<6942=6944,6943
<6944=6945
<6945=6947,6946
<6947=6949,6948
<6949=6950
<6950=6952,6951
<6952=6954,6953
<6954=6956,6955
<6956=6957
<6957=6959,6958
<6960=6962,6961
<6962=6964,6963
<6964=6965
<6965=6967,6966
<6968=6969
<6969=6976,6970
<6970=6972,6971
<6972=6973
<6973=6975,6974
<6976=6978,6977
<6978=6980,6979
<6980=6981
<6981=6983,6982
<6984=6985
<6985=6987,6986
<6987=6989,6988
<6989=6991,6990
<6991=6992
<6992=6994,6993
<6995=6996
<6996=7000,6997
<6997=6998
<6998=6999
<7000=7001
<7001=7003,7002
<7004=7005
<7005=7007,7006
<7007=7008
<7008=7010,7009
<7011=7012
<7012=7016,7013
<7013=7014
<7014=7015
<7016=7017
<7018=7019
<7019=7035,7034,7020
<7020=7033,7021
<7021=7032,7022
<7022=7024,7023
<7024=7030,7025
<7025=7026
<7026=7027
<7027=7029,7028
<7030=7031
<7036=7037
<7037=7042,7041,7038
<7038=7040,7039
<7043=7053,7044
<7044=7045
<7045=7049,7046
<7046=7047
<7047=7048
<7049=7050
<7050=7052,7051
<7053=7054
<7054=7058,7055
<7055=7056
<7056=7057
<7058=7059
<7059=7061,7060
<7062=7063
<7063=7065,7064
<7066=7074,7067
<7067=7068
<7068=7072,7069
<7069=7070
<7070=7071
<7072=7073
<7074=7075
<7075=7077,7076
<7078=7079
<7079=7093,7080
<7080=7091,7089,7087,7083,7081
<7081=7082
<7083=7084
<7084=7086,7085
<7087=7088
<7089=7090
<7091=7092
<7093=7094
<7095=7096
<7096=7101,7100,7097
<7097=7099,7098
<7102=7103
<7103=7108,7107,7104
<7104=7106,7105
<7109=7110
<7110=7112,7111
<7112=7114,7113
<7115=7186,7179,7161,7140,7116
<7116=7136,7117
<7117=7127,7118
<7118=7119
<7119=7123,7120
<7120=7121
<7121=7122
<7123=7124
<7124=7126,7125
<7127=7128
<7128=7132,7129
<7129=7130
<7130=7131
<7132=7133
<7133=7135,7134
<7136=7137
<7137=7139,7138
<7140=7157,7141
<7141=7142
<7142=7155,7143
<7143=7153,7144
<7144=7145
<7145=7149,7146
<7146=7147
<7147=7148
<7149=7150
<7150=7152,7151
<7153=7154
<7155=7156
<7157=7158
<7158=7160,7159
<7161=7162
<7162=7177,7163
<7163=7175,7173,7171,7166,7164
<7164=7165
<7166=7167
<7167=7169,7168
<7169=7170
<7171=7172
<7173=7174
<7175=7176
<7177=7178
<7179=7180
<7180=7185,7184,7181
<7181=7183,7182
<7186=7187
<7187=7192,7191,7188
<7188=7190,7189
<7195=7196
<7201=7338,7331,7314,7293,7202
<7202=7289,7203
<7203=7280,7271,7204
<7204=7263,7254,7251,7205
<7205=7206
<7206=7245,7207
<7207=7226,7215,7208
<7208=7209
<7209=7211,7210
<7211=7212
<7212=7214,7213
<7215=7216
<7216=7223,7217
<7217=7219,7218
<7219=7220
<7220=7222,7221
<7223=7225,7224
<7226=7241,7227
<7227=7228
<7228=7239,7229
<7229=7237,7230
<7230=7231
<7231=7233,7232
<7233=7234
<7234=7236,7235
<7237=7238
<7239=7240
<7241=7242
<7242=7244,7243
<7245=7246
<7246=7248,7247
<7248=7250,7249
<7251=7253,7252
<7254=7255
<7255=7262,7256
<7256=7258,7257
<7258=7259
<7259=7261,7260
<7263=7264
<7264=7265
<7265=7270,7269,7266
<7266=7268,7267
<7271=7272
<7272=7276,7273
<7273=7274
<7274=7275
<7276=7277
<7277=7279,7278
<7280=7281
<7281=7285,7282
<7282=7283
<7283=7284
<7285=7286
<7286=7288,7287
<7289=7290
<7290=7292,7291
<7293=7310,7294
<7294=7295
<7295=7308,7296
<7296=7306,7297
<7297=7298
<7298=7302,7299
<7299=7300
<7300=7301
<7302=7303
<7303=7305,7304
<7306=7307
<7308=7309
<7310=7311
<7311=7313,7312
<7314=7315
<7315=7329,7316
<7316=7327,7325,7323,7319,7317
<7317=7318
<7319=7320
<7320=7322,7321
<7323=7324
<7325=7326
<7327=7328
<7329=7330
<7331=7332
<7332=7337,7336,7333
<7333=7335,7334
<7338=7339
<7339=7344,7343,7340
<7340=7342,7341
<7347=7348
<7353=7354
<7354=7358,7355
<7355=7356
<7356=7357
<7358=7359
<7359=7361,7360
<7362=7407,7363
<7363=7390,7364
<7364=7384,7365
<7365=7373,7366
<7366=7367
<7367=7369,7368
<7369=7370
<7370=7372,7371
<7373=7374
<7374=7381,7375
<7375=7377,7376
<7377=7378
<7378=7380,7379
<7381=7383,7382
<7384=7385
<7385=7387,7386
<7387=7389,7388
<7390=7391
<7391=7406,7405,7392
<7392=7404,7393
<7393=7400,7394
<7394=7396,7395
<7396=7397
<7397=7399,7398
<7400=7402,7401
<7402=7403
<7407=7408
<7408=7410,7409
<7410=7417,7411
<7411=7413,7412
<7413=7414
<7414=7416,7415
<7418=7423,7419
<7419=7420
<7420=7422,7421
<7423=7424
<7424=7426,7425
<7427=7428
<7428=7437,7436,7429
<7429=7435,7430
<7430=7432,7431
<7432=7434,7433
<7438=7528,7439
<7439=7521,7514,7513,7512,7511,7510,7508,7507,7506,7449,7440
<7440=7441
<7441=7445,7442
<7442=7443
<7443=7444
<7445=7446
<7446=7448,7447
<7449=7499,7498,7497,7496,7495,7493,7492,7491,7490,7489,7468,7450
<7450=7460,7451
<7451=7456,7452
<7452=7453
<7453=7455,7454
<7456=7457
<7457=7459,7458
<7460=7461
<7461=7465,7462
<7462=7464,7463
<7465=7467,7466
<7468=7473,7469
<7469=7470
<7470=7472,7471
<7473=7474
<7474=7481,7475
<7475=7477,7476
<7477=7478
<7478=7480,7479
<7481=7485,7482
<7482=7483
<7483=7484
<7485=7486
<7486=7488,7487
<7493=7494
<7499=7500
<7500=7505,7504,7501
<7501=7503,7502
<7508=7509
<7514=7515
<7515=7520,7519,7516
<7516=7518,7517
<7521=7522
<7522=7527,7526,7523
<7523=7525,7524
<7528=7529
<7529=7531,7530
<7531=7538,7532
<7532=7534,7533
<7534=7535
<7535=7537,7536
<7539=7595,7540
<7540=7541
<7541=7593,7542
<7542=7591,7582,7580,7578,7576,7567,7565,7563,7561,7543
<7543=7544
<7544=7553,7545
<7545=7552,7546
<7546=7548,7547
<7548=7549
<7549=7551,7550
<7553=7560,7554
<7554=7556,7555
<7556=7557
<7557=7559,7558
<7561=7562
<7563=7564
<7565=7566
<7567=7568
<7568=7575,7569
<7569=7571,7570
<7571=7572
<7572=7574,7573
<7576=7577
<7578=7579
<7580=7581
<7582=7583
<7583=7590,7584
<7584=7586,7585
<7586=7587
<7587=7589,7588
<7591=7592
<7593=7594
<7595=7596
<7596=7598,7597
<7599=7756,7747,7744,7600
<7600=7720,7719,7704,7697,7696,7695,7694,7688,7682,7681,7680,7679,7655,7601
<7601=7653,7602
<7602=7625,7614,7607,7603
<7603=7604
<7604=7606,7605
<7607=7608
<7608=7610,7609
<7610=7611
<7611=7613,7612
<7614=7615
<7615=7622,7616
<7616=7618,7617
<7618=7619
<7619=7621,7620
<7622=7624,7623
<7625=7649,7626
<7626=7627
<7627=7647,7628
<7628=7645,7636,7629
<7629=7630
<7630=7632,7631
<7632=7633
<7633=7635,7634
<7636=7637
<7637=7639,7638
<7639=7640
<7640=7642,7641
<7642=7644,7643
<7645=7646
<7647=7648
<7649=7650
<7650=7652,7651
<7653=7654
<7655=7656
<7656=7663,7657
<7657=7659,7658
<7659=7660
<7660=7662,7661
<7663=7664
<7664=7666,7665
<7666=7668,7667
<7668=7669
<7669=7671,7670
<7671=7673,7672
<7673=7674
<7674=7676,7675
<7676=7678,7677
<7682=7683
<7683=7687,7684
<7684=7686,7685
<7688=7689
<7689=7693,7690
<7690=7692,7691
<7697=7698
<7698=7703,7702,7699
<7699=7701,7700
<7704=7705
<7705=7718,7706
<7706=7712,7707
<7707=7708
<7708=7709
<7709=7711,7710
<7712=7713
<7713=7715,7714
<7715=7717,7716
<7720=7722,7721
<7722=7723
<7723=7732,7724
<7724=7726,7725
<7726=7727
<7727=7729,7728
<7729=7731,7730
<7732=7738,7733
<7733=7734
<7734=7735
<7735=7737,7736
<7738=7739
<7739=7741,7740
<7741=7743,7742
<7744=7746,7745
<7747=7748
<7748=7755,7749
<7749=7751,7750
<7751=7752
<7752=7754,7753
<7756=7757
<7757=7758
<7758=7763,7762,7759
<7759=7761,7760
<7764=7935,7926,7765
<7765=7897,7896,7881,7874,7858,7857,7856,7855,7849,7843,7842,7841,7840,7814,7766
<7766=7812,7772,7767
<7767=7768
<7768=7769
<7769=7771,7770
<7772=7784,7773
<7773=7774
<7774=7783,7775
<7775=7779,7776
<7776=7777
<7777=7778
<7779=7780
<7780=7782,7781
<7784=7808,7785
<7785=7786
<7786=7806,7787
<7787=7804,7795,7788
<7788=7789
<7789=7791,7790
<7791=7792
<7792=7794,7793
<7795=7796
<7796=7798,7797
<7798=7799
<7799=7801,7800
<7801=7803,7802
<7804=7805
<7806=7807
<7808=7809
<7809=7811,7810
<7812=7813
<7814=7815
<7815=7822,7816
<7816=7818,7817
<7818=7819
<7819=7821,7820
<7822=7823
<7823=7825,7824
<7825=7827,7826
<7827=7828
<7828=7830,7829
<7830=7832,7831
<7832=7833
<7833=7835,7834
<7835=7839,7836
<7836=7838,7837
<7843=7844
<7844=7848,7845
<7845=7847,7846
<7849=7850
<7850=7854,7851
<7851=7853,7852
<7858=7859
<7859=7873,7872,7860
<7860=7871,7861
<7861=7863,7862
<7863=7864
<7864=7866,7865
<7866=7870,7867
<7867=7869,7868
<7874=7875
<7875=7880,7879,7876
<7876=7878,7877
<7881=7882
<7882=7895,7883
<7883=7889,7884
<7884=7885
<7885=7886
<7886=7888,7887
<7889=7890
<7890=7892,7891
<7892=7894,7893
<7897=7904,7898
<7898=7900,7899
<7900=7901
<7901=7903,7902
<7904=7905
<7905=7914,7906
<7906=7908,7907
<7908=7909
<7909=7911,7910
<7911=7913,7912
<7914=7920,7915
<7915=7916
<7916=7917
<7917=7919,7918
<7920=7921
<7921=7923,7922
<7923=7925,7924
<7926=7927
<7927=7934,7928
<7928=7930,7929
<7930=7931
<7931=7933,7932
<7935=7936
<7936=7937
<7937=7947,7946,7938
<7938=7945,7939
<7939=7941,7940
<7941=7942
<7942=7944,7943
<7948=7949
<7949=7959,7958,7950
<7950=7957,7951
<7951=7953,7952
<7953=7954
<7954=7956,7955
<7960=7961
<7961=7971,7970,7962
<7962=7969,7963
<7963=7965,7964
<7965=7966
<7966=7968,7967
<7972=8047,8037,8019,8011,7995,7982,7973
<7973=7974
<7974=7978,7975
<7975=7976
<7976=7977
<7978=7979
<7979=7981,7980
<7982=7984,7983
<7984=7985
<7985=7987,7986
<7987=7991,7988
<7988=7989
<7989=7990
<7991=7992
<7992=7994,7993
<7995=8007,7996
<7996=7998,7997
<7998=7999
<7999=8003,8000
<8000=8001
<8001=8002
<8003=8004
<8004=8006,8005
<8007=8008
<8008=8010,8009
<8011=8013,8012
<8013=8014
<8014=8016,8015
<8016=8018,8017
<8019=8021,8020
<8021=8022
<8022=8031,8023
<8023=8030,8024
<8024=8026,8025
<8026=8027
<8027=8029,8028
<8031=8033,8032
<8033=8034
<8034=8036,8035
<8037=8039,8038
<8039=8040
<8040=8046,8041
<8041=8043,8042
<8043=8045,8044
<8047=8049,8048
<8049=8050
<8050=8057,8051
<8051=8053,8052
<8053=8054
<8054=8056,8055
<8057=8059,8058
<8059=8060
<8060=8062,8061
<8065=8066
<8071=8072
<8072=8077,8076,8073
<8073=8075,8074
<8078=8079
<8079=8084,8083,8080
<8080=8082,8081
<8085=8301,8291,8273,8265,8241,8225,8207,8194,8175,8159,8141,8128,8095,8086
<8086=8087
<8087=8091,8088
<8088=8089
<8089=8090
<8091=8092
<8092=8094,8093
<8095=8102,8096
<8096=8098,8097
<8098=8099
<8099=8101,8100
<8102=8103
<8103=8105,8104
<8105=8107,8106
<8107=8108
<8108=8110,8109
<8110=8112,8111
<8112=8113
<8113=8115,8114
<8115=8122,8116
<8116=8118,8117
<8118=8119
<8119=8121,8120
<8122=8124,8123
<8124=8125
<8125=8127,8126
<8128=8135,8129
<8129=8131,8130
<8131=8132
<8132=8134,8133
<8135=8136
<8136=8140,8137
<8137=8139,8138
<8141=8142
<8142=8158,8157,8143
<8143=8156,8144
<8144=8152,8145
<8145=8150,8148,8146
<8146=8147
<8148=8149
<8150=8151
<8152=8153
<8153=8155,8154
<8159=8160
<8160=8169,8161
<8161=8168,8162
<8162=8164,8163
<8164=8165
<8165=8167,8166
<8169=8171,8170
<8171=8172
<8172=8174,8173
<8175=8176
<8176=8193,8192,8177
<8177=8191,8178
<8178=8180,8179
<8180=8181
<8181=8183,8182
<8183=8189,8184
<8184=8185
<8185=8186
<8186=8188,8187
<8189=8190
<8194=8201,8195
<8195=8197,8196
<8197=8198
<8198=8200,8199
<8201=8202
<8202=8206,8203
<8203=8205,8204
<8207=8208
<8208=8224,8223,8209
<8209=8222,8210
<8210=8218,8211
<8211=8216,8214,8212
<8212=8213
<8214=8215
<8216=8217
<8218=8219
<8219=8221,8220
<8225=8226
<8226=8235,8227
<8227=8229,8228
<8229=8231,8230
<8231=8232
<8232=8234,8233
<8235=8237,8236
<8237=8238
<8238=8240,8239
<8241=8242
<8242=8264,8263,8243
<8243=8262,8244
<8244=8246,8245
<8246=8247
<8247=8249,8248
<8249=8260,8250
<8250=8251
<8251=8252
<8252=8254,8253
<8254=8255
<8255=8257,8256
<8257=8259,8258
<8260=8261
<8265=8267,8266
<8267=8268
<8268=8270,8269
<8270=8272,8271
<8273=8275,8274
<8275=8276
<8276=8285,8277
<8277=8284,8278
<8278=8280,8279
<8280=8281
<8281=8283,8282
<8285=8287,8286
<8287=8288
<8288=8290,8289
<8291=8293,8292
<8293=8294
<8294=8300,8295
<8295=8297,8296
<8297=8299,8298
<8301=8303,8302
<8303=8304
<8304=8311,8305
<8305=8307,8306
<8307=8308
<8308=8310,8309
<8311=8313,8312
<8313=8314
<8314=8316,8315
<8319=8320
<8325=8326
<8326=8345,8344,8327
<8327=8343,8328
<8328=8341,8329
<8329=8330
<8330=8331
<8331=8339,8332
<8332=8337,8335,8333
<8333=8334
<8335=8336
<8337=8338
<8339=8340
<8341=8342
<8346=8347
<8347=8352,8351,8348
<8348=8350,8349
<8353=8354
<8354=8359,8358,8355
<8355=8357,8356
<8360=8361
<8361=8380,8379,8362
<8362=8378,8363
<8363=8371,8365,8364
<8365=8367,8366
<8367=8368
<8368=8370,8369
<8371=8372
<8372=8374,8373
<8374=8375
<8375=8377,8376
<8381=8382
<8382=8384,8383
<8385=8386
<8386=8388,8387
<8389=8390
<8390=8392,8391
<8392=8393
<8393=8395,8394
<8396=8415,8397
<8397=8398
<8398=8411,8399
<8399=8404,8400
<8400=8401
<8401=8403,8402
<8404=8405
<8405=8407,8406
<8407=8408
<8408=8410,8409
<8411=8412
<8412=8414,8413
<8415=8416
<8416=8418,8417
<8418=8419
<8419=8421,8420
<8422=8423
<8423=8425,8424
<8426=8433,8427
<8427=8428
<8428=8430,8429
<8430=8432,8431
<8433=8434
<8434=8456,8455,8435
<8435=8454,8436
<8436=8443,8437
<8437=8439,8438
<8439=8440
<8440=8442,8441
<8443=8445,8444
<8445=8446
<8446=8448,8447
<8448=8450,8449
<8450=8451
<8451=8453,8452
<8459=8460
<8465=8466
<8466=8468,8467
<8468=8469
<8469=8471,8470
<8472=8551,8542,8473
<8473=8474
<8474=8520,8480,8475
<8475=8476
<8476=8477
<8477=8479,8478
<8480=8492,8481
<8481=8482
<8482=8491,8483
<8483=8487,8484
<8484=8485
<8485=8486
<8487=8488
<8488=8490,8489
<8492=8516,8493
<8493=8494
<8494=8514,8495
<8495=8512,8503,8496
<8496=8497
<8497=8499,8498
<8499=8500
<8500=8502,8501
<8503=8504
<8504=8506,8505
<8506=8507
<8507=8509,8508
<8509=8511,8510
<8512=8513
<8514=8515
<8516=8517
<8517=8519,8518
<8520=8521
<8521=8530,8522
<8522=8524,8523
<8524=8525
<8525=8527,8526
<8527=8529,8528
<8530=8536,8531
<8531=8532
<8532=8533
<8533=8535,8534
<8536=8537
<8537=8539,8538
<8539=8541,8540
<8542=8543
<8543=8550,8544
<8544=8546,8545
<8546=8547
<8547=8549,8548
<8551=8552
<8552=8553
<8553=8563,8562,8554
<8554=8561,8555
<8555=8557,8556
<8557=8558
<8558=8560,8559
<8564=8565
<8565=8567,8566
<8568=8569
<8569=8587,8586,8570
<8570=8585,8571
<8571=8581,8572
<8572=8579,8577,8575,8573
<8573=8574
<8575=8576
<8577=8578
<8579=8580
<8581=8582
<8582=8584,8583
<8588=8589
<8589=8594,8593,8590
<8590=8592,8591
<8595=8596
<8596=8598,8597
<8599=8600
<8600=8607,8601
<8601=8603,8602
<8603=8604
<8604=8606,8605
<8607=8609,8608
<8610=8613,8611
<8611=8612
<8613=8614
<8614=8642,8615
<8615=8617,8616
<8617=8619,8618
<8619=8620
<8620=8622,8621
<8622=8624,8623
<8624=8625
<8625=8627,8626
<8627=8639,8628
<8628=8630,8629
<8630=8631
<8631=8633,8632
<8633=8635,8634
<8635=8636
<8636=8638,8637
<8639=8641,8640
<8642=8644,8643
<8645=8683,8646
<8646=8676,8667,8663,8656,8649,8647
<8647=8648
<8649=8650
<8650=8652,8651
<8652=8653
<8653=8655,8654
<8656=8657
<8657=8659,8658
<8659=8660
<8660=8662,8661
<8663=8664
<8664=8666,8665
<8667=8668
<8668=8672,8669
<8669=8670
<8670=8671
<8672=8673
<8673=8675,8674
<8676=8677
<8677=8679,8678
<8679=8680
<8680=8682,8681
<8683=8684
<8684=8691,8685
<8685=8687,8686
<8687=8688
<8688=8690,8689
<8850=8859,8858,8851
<8851=8855,8852
<8852=8854,8853
<8855=8857,8856
<8859=9306,9295,9288,9281,9274,9267,9253,9246,9237,9230,9223,9216,8970,8966,8957,8950,8943,8911,8900,8872,8868,8860
<8860=8861
<8861=8865,8862
<8862=8864,8863
<8865=8867,8866
<8868=8869
<8869=8871,8870
<8872=8873
<8873=8899,8874
<8874=8896,8875
<8875=8895,8876
<8876=8886,8877
<8877=8879,8878
<8879=8883,8880
<8880=8882,8881
<8883=8885,8884
<8886=8888,8887
<8888=8892,8889
<8889=8891,8890
<8892=8894,8893
<8896=8898,8897
<8900=8901
<8901=8909,8902
<8902=8905,8903
<8903=8904
<8905=8906
<8906=8908,8907
<8909=8910
<8911=8939,8912
<8912=8913
<8913=8937,8914
<8914=8935,8933,8931,8927,8915
<8915=8916
<8916=8919,8918,8917
<8919=8920
<8920=8924,8921
<8921=8923,8922
<8924=8926,8925
<8927=8928
<8928=8930,8929
<8931=8932
<8933=8934
<8935=8936
<8937=8938
<8939=8940
<8940=8942,8941
<8943=8944
<8944=8946,8945
<8946=8947
<8947=8949,8948
<8950=8951
<8951=8953,8952
<8953=8954
<8954=8956,8955
<8957=8958
<8958=8960,8959
<8960=8961
<8961=8963,8962
<8963=8965,8964
<8966=8967
<8967=8969,8968
<8970=9208,9197,9194,8971
<8971=9184,9174,9160,9140,8972,9000,9001,9002,9003,9004,9005,9006,9007,9008,9009,9010,9011,9012,9013,9014,9015,9017,9018,9019,9020,9048,9052,9098,9099,9100,9101,9102,9103,9104,9105,9106,9107,9108,9109,9110,9111,9112,9113,9114,9115,9116,9117,9118,9119,9120,9121,9122,9123,9124
<8972=8983,8973
<8973=8974
<8974=8976,8975
<8976=8978,8977
<8978=8980,8979
<8980=8982,8981
<8983=8984
<8984=8993,8985
<8985=8987,8986
<8987=8988
<8988=8990,8989
<8990=8992,8991
<8993=8995,8994
<8995=8997,8996
<8997=8999,8998
<9015=9016
<9020=9021
<9021=9038,9022
<9022=9023
<9023=9024
<9024=9026,9025
<9026=9027
<9027=9029,9028
<9029=9031,9030
<9031=9033,9032
<9033=9035,9034
<9035=9037,9036
<9038=9039
<9039=9041,9040
<9041=9043,9042
<9043=9045,9044
<9045=9047,9046
<9048=9049
<9049=9051,9050
<9052=9090,9086,9083,9053
<9053=9067,9058,9054
<9054=9055
<9055=9057,9056
<9058=9063,9059
<9059=9060
<9060=9062,9061
<9063=9064
<9064=9066,9065
<9067=9068
<9068=9082,9081,9069
<9069=9080,9070
<9070=9078,9071
<9071=9072
<9072=9073
<9073=9077,9074
<9074=9076,9075
<9078=9079
<9083=9085,9084
<9086=9087
<9087=9089,9088
<9090=9091
<9091=9092
<9092=9097,9096,9093
<9093=9095,9094
<9124=9125
<9125=9139,9138,9126
<9126=9137,9127
<9127=9129,9128
<9129=9130
<9130=9132,9131
<9132=9134,9133
<9134=9136,9135
<9140=9141
<9141=9159,9158,9142
<9142=9157,9143
<9143=9145,9144
<9145=9146
<9146=9148,9147
<9148=9150,9149
<9150=9152,9151
<9152=9154,9153
<9154=9156,9155
<9160=9162,9161
<9162=9163
<9163=9173,9164
<9164=9166,9165
<9166=9168,9167
<9168=9170,9169
<9170=9172,9171
<9174=9175
<9175=9177,9176
<9177=9179,9178
<9179=9181,9180
<9181=9183,9182
<9184=9185
<9185=9187,9186
<9187=9189,9188
<9189=9191,9190
<9191=9193,9192
<9194=9196,9195
<9197=9198
<9198=9207,9199
<9199=9201,9200
<9201=9202
<9202=9204,9203
<9204=9206,9205
<9208=9209
<9209=9210
<9210=9215,9214,9211
<9211=9213,9212
<9216=9217
<9217=9222,9221,9218
<9218=9220,9219
<9223=9224
<9224=9229,9228,9225
<9225=9227,9226
<9230=9231
<9231=9236,9235,9232
<9232=9234,9233
<9237=9238
<9238=9240,9239
<9240=9241
<9241=9243,9242
<9243=9245,9244
<9246=9247
<9247=9249,9248
<9249=9250
<9250=9252,9251
<9253=9254
<9254=9266,9265,9255
<9255=9264,9256
<9256=9260,9257
<9257=9258
<9258=9259
<9260=9261
<9261=9263,9262
<9267=9268
<9268=9270,9269
<9270=9271
<9271=9273,9272
<9274=9275
<9275=9277,9276
<9277=9278
<9278=9280,9279
<9281=9282
<9282=9284,9283
<9284=9285
<9285=9287,9286
<9288=9289
<9289=9291,9290
<9291=9292
<9292=9294,9293
<9295=9296
<9296=9304,9297
<9297=9300,9298
<9298=9299
<9300=9301
<9301=9303,9302
<9304=9305
<9306=9310,9307
<9307=9309,9308
<9310=9312,9311
<9380=9383,9382,9381
<9383=9405,9396,9389,9384
<9384=9385
<9385=9387,9386
<9387=9388
<9389=9390
<9390=9392,9391
<9392=9393
<9393=9395,9394
<9396=9397
<9397=9401,9398
<9398=9399
<9399=9400
<9401=9402
<9402=9404,9403
<9405=9406
<9406=9409,9408,9407
<9415=9418,9417,9416
<9418=9472,9463,9430,9421,9419
<9419=9420
<9421=9422
<9422=9424,9423
<9424=9425
<9425=9427,9426
<9427=9429,9428
<9430=9452,9431
<9431=9432
<9432=9451,9433
<9433=9449,9434
<9434=9435
<9435=9436
<9436=9438,9437
<9438=9439
<9439=9441,9440
<9441=9443,9442
<9443=9444
<9444=9446,9445
<9446=9448,9447
<9449=9450
<9452=9453
<9453=9455,9454
<9455=9457,9456
<9457=9458
<9458=9460,9459
<9460=9462,9461
<9463=9464
<9464=9466,9465
<9466=9467
<9467=9469,9468
<9469=9471,9470
<9472=9473
<9473=9481,9480,9474
<9474=9479,9475
<9475=9477,9476
<9477=9478
<9498=9501,9500,9499
<9501=9502
<9502=9503
<9503=9505,9504
