>3	FunctionDef	drwnNNGraphNode 
>4	ParameterList	 
>5	ReturnType	void
>6	CompoundStatement	 
>7	ExpressionStatement	 
>8	CallExpression	spatialNeighbours . clear ( )
>9	ArgumentList	 
>10	Callee	spatialNeighbours . clear
>11	MemberAccess	spatialNeighbours . clear
>12	Identifier	clear
>13	Identifier	spatialNeighbours
>14	ExpressionStatement	 
>15	CallExpression	edges . clear ( )
>16	ArgumentList	 
>17	Callee	edges . clear
>18	MemberAccess	edges . clear
>19	Identifier	clear
>20	Identifier	edges
>21	ExpressionStatement	 
>22	AssignmentExpr	label = - 1
>23	UnaryOp	- 1
>24	PrimaryExpression	1
>25	UnaryOperator	-
>26	Identifier	label
>27	ExpressionStatement	 
>28	AssignmentExpr	features = VectorXf ( )
>29	CallExpression	VectorXf ( )
>30	ArgumentList	 
>31	Callee	VectorXf
>32	Identifier	VectorXf
>33	Identifier	features
>42	FunctionDef	drwnNNGraphNode 
>43	ParameterList	const drwnNNGraphEdge & e
>44	Parameter	 
>45	Identifier	e
>46	ParameterType	const drwnNNGraphEdge &
>47	ReturnType	bool
>48	CompoundStatement	 
>49	ReturnStatement	 
>50	Identifier	true
>51	ExpressionStatement	 
>52	CallExpression	edges . merge ( tmp , drwnNNGraphSortByScore ( ) )
>53	ArgumentList	tmp
>54	Argument	drwnNNGraphSortByScore ( )
>55	CallExpression	drwnNNGraphSortByScore ( )
>56	ArgumentList	 
>57	Callee	drwnNNGraphSortByScore
>58	Identifier	drwnNNGraphSortByScore
>59	Argument	tmp
>60	Identifier	tmp
>61	Callee	edges . merge
>62	MemberAccess	edges . merge
>63	Identifier	merge
>64	Identifier	edges
>65	IdentifierDeclStatement	 
>66	IdentifierDecl	tmp ( 1 , e )
>67	Expression	1 , e
>68	Identifier	e
>69	PrimaryExpression	1
>70	Identifier	tmp
>71	IdentifierDeclType	drwnNNGraphEdgeList
>72	ExpressionStatement	 
>73	CallExpression	edges . pop_back ( )
>74	ArgumentList	 
>75	Callee	edges . pop_back
>76	MemberAccess	edges . pop_back
>77	Identifier	pop_back
>78	Identifier	edges
>79	ForStatement	for ( drwnNNGraphEdgeList 
>80	CompoundStatement	 
>81	IfStatement	if ( it -> targetNode . imgIndx == e . targetNode . imgIndx )
>82	CompoundStatement	 
>83	IfStatement	if ( it -> weight > e . weight )
>84	ElseStatement	else
>85	CompoundStatement	 
>86	ReturnStatement	 
>87	Identifier	false
>88	CompoundStatement	 
>89	ReturnStatement	 
>90	Identifier	true
>91	ExpressionStatement	 
>92	CallExpression	edges . merge ( tmp , drwnNNGraphSortByScore ( ) )
>93	ArgumentList	tmp
>94	Argument	drwnNNGraphSortByScore ( )
>95	CallExpression	drwnNNGraphSortByScore ( )
>96	ArgumentList	 
>97	Callee	drwnNNGraphSortByScore
>98	Identifier	drwnNNGraphSortByScore
>99	Argument	tmp
>100	Identifier	tmp
>101	Callee	edges . merge
>102	MemberAccess	edges . merge
>103	Identifier	merge
>104	Identifier	edges
>105	IdentifierDeclStatement	 
>106	IdentifierDecl	tmp ( 1 , e )
>107	Expression	1 , e
>108	Identifier	e
>109	PrimaryExpression	1
>110	Identifier	tmp
>111	IdentifierDeclType	drwnNNGraphEdgeList
>112	ExpressionStatement	 
>113	CallExpression	edges . erase ( it )
>114	ArgumentList	it
>115	Argument	it
>116	Identifier	it
>117	Callee	edges . erase
>118	MemberAccess	edges . erase
>119	Identifier	erase
>120	Identifier	edges
>121	Condition	 
>122	RelationalExpression	it -> weight > e . weight
>123	MemberAccess	e . weight
>124	Identifier	weight
>125	Identifier	e
>126	PtrMemberAccess	it -> weight
>127	Identifier	weight
>128	Identifier	it
>129	Condition	 
>130	EqualityExpression	it -> targetNode . imgIndx == e . targetNode . imgIndx
>131	MemberAccess	e . targetNode . imgIndx
>132	Identifier	imgIndx
>133	MemberAccess	e . targetNode
>134	Identifier	targetNode
>135	Identifier	e
>136	MemberAccess	it -> targetNode . imgIndx
>137	Identifier	imgIndx
>138	PtrMemberAccess	it -> targetNode
>139	Identifier	targetNode
>140	Identifier	it
>141	UnaryExpression	 
>142	Identifier	it
>143	IncDec	++
>144	Condition	 
>145	EqualityExpression	it != edges . end ( )
>146	CallExpression	edges . end ( )
>147	ArgumentList	 
>148	Callee	edges . end
>149	MemberAccess	edges . end
>150	Identifier	end
>151	Identifier	edges
>152	Identifier	it
>153	ForInit	 
>154	IdentifierDeclStatement	drwnNNGraphEdgeList 
>155	IdentifierDecl	it = edges . begin ( )
>156	AssignmentExpr	it = edges . begin ( )
>157	CallExpression	edges . begin ( )
>158	ArgumentList	 
>159	Callee	edges . begin
>160	MemberAccess	edges . begin
>161	Identifier	begin
>162	Identifier	edges
>163	Identifier	it
>164	Identifier	it
>165	IdentifierDeclType	drwnNNGraphEdgeList 
>166	IfStatement	if ( edges . empty ( ) || ( e . weight >= edges . back ( ) . weight ) )
>167	ReturnStatement	 
>168	Identifier	false
>169	Condition	 
>170	OrExpression	edges . empty ( ) || ( e . weight >= edges . back ( ) . weight )
>171	RelationalExpression	e . weight >= edges . back ( ) . weight
>172	MemberAccess	edges . back ( ) . weight
>173	Identifier	weight
>174	CallExpression	edges . back ( )
>175	ArgumentList	 
>176	Callee	edges . back
>177	MemberAccess	edges . back
>178	Identifier	back
>179	Identifier	edges
>180	MemberAccess	e . weight
>181	Identifier	weight
>182	Identifier	e
>183	CallExpression	edges . empty ( )
>184	ArgumentList	 
>185	Callee	edges . empty
>186	MemberAccess	edges . empty
>187	Identifier	empty
>188	Identifier	edges
>211	FunctionDef	drwnNNGraphNode 
>212	ParameterList	 
>213	ReturnType	size_t
>214	CompoundStatement	 
>215	ReturnStatement	 
>216	Identifier	n
>217	ExpressionStatement	 
>218	AssignmentExpr	n += sizeof ( uint16_t ) + spatialNeighbours . size ( ) * sizeof ( uint16_t )
>219	AdditiveExpression	sizeof ( uint16_t ) + spatialNeighbours . size ( ) * sizeof ( uint16_t )
>220	MultiplicativeExpression	spatialNeighbours . size ( ) * sizeof ( uint16_t )
>221	SizeofExpr	sizeof ( uint16_t )
>222	SizeofOperand	uint16_t
>223	Sizeof	sizeof
>224	CallExpression	spatialNeighbours . size ( )
>225	ArgumentList	 
>226	Callee	spatialNeighbours . size
>227	MemberAccess	spatialNeighbours . size
>228	Identifier	size
>229	Identifier	spatialNeighbours
>230	SizeofExpr	sizeof ( uint16_t )
>231	SizeofOperand	uint16_t
>232	Sizeof	sizeof
>233	Identifier	n
>234	ExpressionStatement	 
>235	AssignmentExpr	n += sizeof ( uint16_t ) + edges . size ( ) * ( 2 * sizeof ( uint16_t ) + sizeof ( float ) )
>236	AdditiveExpression	sizeof ( uint16_t ) + edges . size ( ) * ( 2 * sizeof ( uint16_t ) + sizeof ( float ) )
>237	MultiplicativeExpression	edges . size ( ) * ( 2 * sizeof ( uint16_t ) + sizeof ( float ) )
>238	AdditiveExpression	2 * sizeof ( uint16_t ) + sizeof ( float )
>239	SizeofExpr	sizeof ( float )
>240	SizeofOperand	float
>241	Sizeof	sizeof
>242	MultiplicativeExpression	2 * sizeof ( uint16_t )
>243	SizeofExpr	sizeof ( uint16_t )
>244	SizeofOperand	uint16_t
>245	Sizeof	sizeof
>246	PrimaryExpression	2
>247	CallExpression	edges . size ( )
>248	ArgumentList	 
>249	Callee	edges . size
>250	MemberAccess	edges . size
>251	Identifier	size
>252	Identifier	edges
>253	SizeofExpr	sizeof ( uint16_t )
>254	SizeofOperand	uint16_t
>255	Sizeof	sizeof
>256	Identifier	n
>257	ExpressionStatement	 
>258	AssignmentExpr	n += sizeof ( int32_t )
>259	SizeofExpr	sizeof ( int32_t )
>260	SizeofOperand	int32_t
>261	Sizeof	sizeof
>262	Identifier	n
>263	ExpressionStatement	 
>264	AssignmentExpr	n += sizeof ( uint16_t ) + features . size ( ) * sizeof ( float )
>265	AdditiveExpression	sizeof ( uint16_t ) + features . size ( ) * sizeof ( float )
>266	MultiplicativeExpression	features . size ( ) * sizeof ( float )
>267	SizeofExpr	sizeof ( float )
>268	SizeofOperand	float
>269	Sizeof	sizeof
>270	CallExpression	features . size ( )
>271	ArgumentList	 
>272	Callee	features . size
>273	MemberAccess	features . size
>274	Identifier	size
>275	Identifier	features
>276	SizeofExpr	sizeof ( uint16_t )
>277	SizeofOperand	uint16_t
>278	Sizeof	sizeof
>279	Identifier	n
>280	IdentifierDeclStatement	 
>281	IdentifierDecl	n = 0
>282	AssignmentExpr	n = 0
>283	PrimaryExpression	0
>284	Identifier	n
>285	Identifier	n
>286	IdentifierDeclType	size_t
>297	FunctionDef	drwnNNGraphNode 
>298	ParameterList	istream & is
>299	Parameter	 
>300	Identifier	is
>301	ParameterType	istream &
>302	ReturnType	bool
>303	CompoundStatement	 
>304	ReturnStatement	 
>305	Identifier	true
>306	IfStatement	if ( n > 0 )
>307	CompoundStatement	 
>308	ExpressionStatement	 
>309	CallExpression	spatialNeighbours . insert ( data . begin ( ) , data . end ( ) )
>310	ArgumentList	data . begin ( )
>311	Argument	data . end ( )
>312	CallExpression	data . end ( )
>313	ArgumentList	 
>314	Callee	data . end
>315	MemberAccess	data . end
>316	Identifier	end
>317	Identifier	data
>318	Argument	data . begin ( )
>319	CallExpression	data . begin ( )
>320	ArgumentList	 
>321	Callee	data . begin
>322	MemberAccess	data . begin
>323	Identifier	begin
>324	Identifier	data
>325	Callee	spatialNeighbours . insert
>326	MemberAccess	spatialNeighbours . insert
>327	Identifier	insert
>328	Identifier	spatialNeighbours
>329	ExpressionStatement	 
>330	CallExpression	is . read ( ( char * ) & data [ 0 ] , n * sizeof ( uint16_t ) )
>331	ArgumentList	( char * ) & data [ 0 ]
>332	Argument	n * sizeof ( uint16_t )
>333	MultiplicativeExpression	n * sizeof ( uint16_t )
>334	SizeofExpr	sizeof ( uint16_t )
>335	SizeofOperand	uint16_t
>336	Sizeof	sizeof
>337	Identifier	n
>338	Argument	( char * ) & data [ 0 ]
>339	CastExpression	( char * ) & data [ 0 ]
>340	UnaryOp	& data [ 0 ]
>341	ArrayIndexing	data [ 0 ]
>342	PrimaryExpression	0
>343	Identifier	data
>344	UnaryOperator	&
>345	CastTarget	char *
>346	Callee	is . read
>347	MemberAccess	is . read
>348	Identifier	read
>349	Identifier	is
>350	IdentifierDeclStatement	 
>351	IdentifierDecl	data ( n )
>352	Identifier	n
>353	Identifier	data
>354	IdentifierDeclType	vector < uint16_t >
>355	Condition	 
>356	RelationalExpression	n > 0
>357	PrimaryExpression	0
>358	Identifier	n
>359	ExpressionStatement	 
>360	CallExpression	is . read ( ( char * ) & n , sizeof ( uint16_t ) )
>361	ArgumentList	( char * ) & n
>362	Argument	sizeof ( uint16_t )
>363	SizeofExpr	sizeof ( uint16_t )
>364	SizeofOperand	uint16_t
>365	Sizeof	sizeof
>366	Argument	( char * ) & n
>367	CastExpression	( char * ) & n
>368	UnaryOp	& n
>369	Identifier	n
>370	UnaryOperator	&
>371	CastTarget	char *
>372	Callee	is . read
>373	MemberAccess	is . read
>374	Identifier	read
>375	Identifier	is
>376	WhileStatement	while ( n -- > 0 )
>377	CompoundStatement	 
>378	ExpressionStatement	 
>379	CallExpression	edges . push_back ( e )
>380	ArgumentList	e
>381	Argument	e
>382	Identifier	e
>383	Callee	edges . push_back
>384	MemberAccess	edges . push_back
>385	Identifier	push_back
>386	Identifier	edges
>387	ExpressionStatement	 
>388	CallExpression	is . read ( ( char * ) & e . weight , sizeof ( float ) )
>389	ArgumentList	( char * ) & e . weight
>390	Argument	sizeof ( float )
>391	SizeofExpr	sizeof ( float )
>392	SizeofOperand	float
>393	Sizeof	sizeof
>394	Argument	( char * ) & e . weight
>395	CastExpression	( char * ) & e . weight
>396	UnaryOp	& e . weight
>397	MemberAccess	e . weight
>398	Identifier	weight
>399	Identifier	e
>400	UnaryOperator	&
>401	CastTarget	char *
>402	Callee	is . read
>403	MemberAccess	is . read
>404	Identifier	read
>405	Identifier	is
>406	ExpressionStatement	 
>407	CallExpression	is . read ( ( char * ) & e . targetNode . segId , sizeof ( uint16_t ) )
>408	ArgumentList	( char * ) & e . targetNode . segId
>409	Argument	sizeof ( uint16_t )
>410	SizeofExpr	sizeof ( uint16_t )
>411	SizeofOperand	uint16_t
>412	Sizeof	sizeof
>413	Argument	( char * ) & e . targetNode . segId
>414	CastExpression	( char * ) & e . targetNode . segId
>415	UnaryOp	& e . targetNode . segId
>416	MemberAccess	e . targetNode . segId
>417	Identifier	segId
>418	MemberAccess	e . targetNode
>419	Identifier	targetNode
>420	Identifier	e
>421	UnaryOperator	&
>422	CastTarget	char *
>423	Callee	is . read
>424	MemberAccess	is . read
>425	Identifier	read
>426	Identifier	is
>427	ExpressionStatement	 
>428	CallExpression	is . read ( ( char * ) & e . targetNode . imgIndx , sizeof ( uint16_t ) )
>429	ArgumentList	( char * ) & e . targetNode . imgIndx
>430	Argument	sizeof ( uint16_t )
>431	SizeofExpr	sizeof ( uint16_t )
>432	SizeofOperand	uint16_t
>433	Sizeof	sizeof
>434	Argument	( char * ) & e . targetNode . imgIndx
>435	CastExpression	( char * ) & e . targetNode . imgIndx
>436	UnaryOp	& e . targetNode . imgIndx
>437	MemberAccess	e . targetNode . imgIndx
>438	Identifier	imgIndx
>439	MemberAccess	e . targetNode
>440	Identifier	targetNode
>441	Identifier	e
>442	UnaryOperator	&
>443	CastTarget	char *
>444	Callee	is . read
>445	MemberAccess	is . read
>446	Identifier	read
>447	Identifier	is
>448	IdentifierDeclStatement	 
>449	IdentifierDecl	e
>450	Identifier	e
>451	IdentifierDeclType	drwnNNGraphEdge
>452	Condition	 
>453	RelationalExpression	n -- > 0
>454	PrimaryExpression	0
>455	IncDecOp	n --
>456	IncDec	--
>457	Identifier	n
>458	ExpressionStatement	 
>459	CallExpression	is . read ( ( char * ) & n , sizeof ( uint16_t ) )
>460	ArgumentList	( char * ) & n
>461	Argument	sizeof ( uint16_t )
>462	SizeofExpr	sizeof ( uint16_t )
>463	SizeofOperand	uint16_t
>464	Sizeof	sizeof
>465	Argument	( char * ) & n
>466	CastExpression	( char * ) & n
>467	UnaryOp	& n
>468	Identifier	n
>469	UnaryOperator	&
>470	CastTarget	char *
>471	Callee	is . read
>472	MemberAccess	is . read
>473	Identifier	read
>474	Identifier	is
>475	ExpressionStatement	 
>476	CallExpression	is . read ( ( char * ) & label , sizeof ( int32_t ) )
>477	ArgumentList	( char * ) & label
>478	Argument	sizeof ( int32_t )
>479	SizeofExpr	sizeof ( int32_t )
>480	SizeofOperand	int32_t
>481	Sizeof	sizeof
>482	Argument	( char * ) & label
>483	CastExpression	( char * ) & label
>484	UnaryOp	& label
>485	Identifier	label
>486	UnaryOperator	&
>487	CastTarget	char *
>488	Callee	is . read
>489	MemberAccess	is . read
>490	Identifier	read
>491	Identifier	is
>492	ExpressionStatement	 
>493	CallExpression	is . read ( ( char * ) & features [ 0 ] , n * sizeof ( float ) )
>494	ArgumentList	( char * ) & features [ 0 ]
>495	Argument	n * sizeof ( float )
>496	MultiplicativeExpression	n * sizeof ( float )
>497	SizeofExpr	sizeof ( float )
>498	SizeofOperand	float
>499	Sizeof	sizeof
>500	Identifier	n
>501	Argument	( char * ) & features [ 0 ]
>502	CastExpression	( char * ) & features [ 0 ]
>503	UnaryOp	& features [ 0 ]
>504	ArrayIndexing	features [ 0 ]
>505	PrimaryExpression	0
>506	Identifier	features
>507	UnaryOperator	&
>508	CastTarget	char *
>509	Callee	is . read
>510	MemberAccess	is . read
>511	Identifier	read
>512	Identifier	is
>513	ExpressionStatement	 
>514	AssignmentExpr	features = VectorXf ( n )
>515	CallExpression	VectorXf ( n )
>516	ArgumentList	n
>517	Argument	n
>518	Identifier	n
>519	Callee	VectorXf
>520	Identifier	VectorXf
>521	Identifier	features
>522	ExpressionStatement	 
>523	CallExpression	is . read ( ( char * ) & n , sizeof ( uint16_t ) )
>524	ArgumentList	( char * ) & n
>525	Argument	sizeof ( uint16_t )
>526	SizeofExpr	sizeof ( uint16_t )
>527	SizeofOperand	uint16_t
>528	Sizeof	sizeof
>529	Argument	( char * ) & n
>530	CastExpression	( char * ) & n
>531	UnaryOp	& n
>532	Identifier	n
>533	UnaryOperator	&
>534	CastTarget	char *
>535	Callee	is . read
>536	MemberAccess	is . read
>537	Identifier	read
>538	Identifier	is
>539	IdentifierDeclStatement	 
>540	IdentifierDecl	n
>541	Identifier	n
>542	IdentifierDeclType	uint16_t
>543	ExpressionStatement	 
>544	CallExpression	clear ( )
>545	ArgumentList	 
>546	Callee	clear
>547	Identifier	clear
>572	FunctionDef	drwnNNGraphNode 
>573	ParameterList	ostream & os
>574	Parameter	 
>575	Identifier	os
>576	ParameterType	ostream &
>577	ReturnType	bool
>578	CompoundStatement	 
>579	ReturnStatement	 
>580	Identifier	true
>581	IfStatement	if ( n > 0 )
>582	CompoundStatement	 
>583	ExpressionStatement	 
>584	CallExpression	os . write ( ( char * ) & data [ 0 ] , n * sizeof ( uint16_t ) )
>585	ArgumentList	( char * ) & data [ 0 ]
>586	Argument	n * sizeof ( uint16_t )
>587	MultiplicativeExpression	n * sizeof ( uint16_t )
>588	SizeofExpr	sizeof ( uint16_t )
>589	SizeofOperand	uint16_t
>590	Sizeof	sizeof
>591	Identifier	n
>592	Argument	( char * ) & data [ 0 ]
>593	CastExpression	( char * ) & data [ 0 ]
>594	UnaryOp	& data [ 0 ]
>595	ArrayIndexing	data [ 0 ]
>596	PrimaryExpression	0
>597	Identifier	data
>598	UnaryOperator	&
>599	CastTarget	char *
>600	Callee	os . write
>601	MemberAccess	os . write
>602	Identifier	write
>603	Identifier	os
>604	IdentifierDeclStatement	 
>605	IdentifierDecl	data ( spatialNeighbours . begin ( ) , spatialNeighbours . end ( ) )
>606	Expression	spatialNeighbours . begin ( ) , spatialNeighbours . end ( )
>607	CallExpression	spatialNeighbours . end ( )
>608	ArgumentList	 
>609	Callee	spatialNeighbours . end
>610	MemberAccess	spatialNeighbours . end
>611	Identifier	end
>612	Identifier	spatialNeighbours
>613	CallExpression	spatialNeighbours . begin ( )
>614	ArgumentList	 
>615	Callee	spatialNeighbours . begin
>616	MemberAccess	spatialNeighbours . begin
>617	Identifier	begin
>618	Identifier	spatialNeighbours
>619	Identifier	data
>620	IdentifierDeclType	vector < uint16_t >
>621	Condition	 
>622	RelationalExpression	n > 0
>623	PrimaryExpression	0
>624	Identifier	n
>625	ExpressionStatement	 
>626	CallExpression	os . write ( ( char * ) & n , sizeof ( uint16_t ) )
>627	ArgumentList	( char * ) & n
>628	Argument	sizeof ( uint16_t )
>629	SizeofExpr	sizeof ( uint16_t )
>630	SizeofOperand	uint16_t
>631	Sizeof	sizeof
>632	Argument	( char * ) & n
>633	CastExpression	( char * ) & n
>634	UnaryOp	& n
>635	Identifier	n
>636	UnaryOperator	&
>637	CastTarget	char *
>638	Callee	os . write
>639	MemberAccess	os . write
>640	Identifier	write
>641	Identifier	os
>642	ExpressionStatement	 
>643	AssignmentExpr	n = spatialNeighbours . size ( )
>644	CallExpression	spatialNeighbours . size ( )
>645	ArgumentList	 
>646	Callee	spatialNeighbours . size
>647	MemberAccess	spatialNeighbours . size
>648	Identifier	size
>649	Identifier	spatialNeighbours
>650	Identifier	n
>651	ForStatement	for ( drwnNNGraphEdgeList 
>652	CompoundStatement	 
>653	ExpressionStatement	 
>654	CallExpression	os . write ( ( char * ) & it -> weight , sizeof ( float ) )
>655	ArgumentList	( char * ) & it -> weight
>656	Argument	sizeof ( float )
>657	SizeofExpr	sizeof ( float )
>658	SizeofOperand	float
>659	Sizeof	sizeof
>660	Argument	( char * ) & it -> weight
>661	CastExpression	( char * ) & it -> weight
>662	UnaryOp	& it -> weight
>663	PtrMemberAccess	it -> weight
>664	Identifier	weight
>665	Identifier	it
>666	UnaryOperator	&
>667	CastTarget	char *
>668	Callee	os . write
>669	MemberAccess	os . write
>670	Identifier	write
>671	Identifier	os
>672	ExpressionStatement	 
>673	CallExpression	os . write ( ( char * ) & it -> targetNode . segId , sizeof ( uint16_t ) )
>674	ArgumentList	( char * ) & it -> targetNode . segId
>675	Argument	sizeof ( uint16_t )
>676	SizeofExpr	sizeof ( uint16_t )
>677	SizeofOperand	uint16_t
>678	Sizeof	sizeof
>679	Argument	( char * ) & it -> targetNode . segId
>680	CastExpression	( char * ) & it -> targetNode . segId
>681	UnaryOp	& it -> targetNode . segId
>682	MemberAccess	it -> targetNode . segId
>683	Identifier	segId
>684	PtrMemberAccess	it -> targetNode
>685	Identifier	targetNode
>686	Identifier	it
>687	UnaryOperator	&
>688	CastTarget	char *
>689	Callee	os . write
>690	MemberAccess	os . write
>691	Identifier	write
>692	Identifier	os
>693	ExpressionStatement	 
>694	CallExpression	os . write ( ( char * ) & it -> targetNode . imgIndx , sizeof ( uint16_t ) )
>695	ArgumentList	( char * ) & it -> targetNode . imgIndx
>696	Argument	sizeof ( uint16_t )
>697	SizeofExpr	sizeof ( uint16_t )
>698	SizeofOperand	uint16_t
>699	Sizeof	sizeof
>700	Argument	( char * ) & it -> targetNode . imgIndx
>701	CastExpression	( char * ) & it -> targetNode . imgIndx
>702	UnaryOp	& it -> targetNode . imgIndx
>703	MemberAccess	it -> targetNode . imgIndx
>704	Identifier	imgIndx
>705	PtrMemberAccess	it -> targetNode
>706	Identifier	targetNode
>707	Identifier	it
>708	UnaryOperator	&
>709	CastTarget	char *
>710	Callee	os . write
>711	MemberAccess	os . write
>712	Identifier	write
>713	Identifier	os
>714	UnaryExpression	 
>715	Identifier	it
>716	IncDec	++
>717	Condition	 
>718	EqualityExpression	it != edges . end ( )
>719	CallExpression	edges . end ( )
>720	ArgumentList	 
>721	Callee	edges . end
>722	MemberAccess	edges . end
>723	Identifier	end
>724	Identifier	edges
>725	Identifier	it
>726	ForInit	 
>727	IdentifierDeclStatement	drwnNNGraphEdgeList 
>728	IdentifierDecl	it = edges . begin ( )
>729	AssignmentExpr	it = edges . begin ( )
>730	CallExpression	edges . begin ( )
>731	ArgumentList	 
>732	Callee	edges . begin
>733	MemberAccess	edges . begin
>734	Identifier	begin
>735	Identifier	edges
>736	Identifier	it
>737	Identifier	it
>738	IdentifierDeclType	drwnNNGraphEdgeList 
>739	ExpressionStatement	 
>740	CallExpression	os . write ( ( char * ) & n , sizeof ( uint16_t ) )
>741	ArgumentList	( char * ) & n
>742	Argument	sizeof ( uint16_t )
>743	SizeofExpr	sizeof ( uint16_t )
>744	SizeofOperand	uint16_t
>745	Sizeof	sizeof
>746	Argument	( char * ) & n
>747	CastExpression	( char * ) & n
>748	UnaryOp	& n
>749	Identifier	n
>750	UnaryOperator	&
>751	CastTarget	char *
>752	Callee	os . write
>753	MemberAccess	os . write
>754	Identifier	write
>755	Identifier	os
>756	ExpressionStatement	 
>757	AssignmentExpr	n = edges . size ( )
>758	CallExpression	edges . size ( )
>759	ArgumentList	 
>760	Callee	edges . size
>761	MemberAccess	edges . size
>762	Identifier	size
>763	Identifier	edges
>764	Identifier	n
>765	ExpressionStatement	 
>766	CallExpression	os . write ( ( char * ) & label , sizeof ( int32_t ) )
>767	ArgumentList	( char * ) & label
>768	Argument	sizeof ( int32_t )
>769	SizeofExpr	sizeof ( int32_t )
>770	SizeofOperand	int32_t
>771	Sizeof	sizeof
>772	Argument	( char * ) & label
>773	CastExpression	( char * ) & label
>774	UnaryOp	& label
>775	Identifier	label
>776	UnaryOperator	&
>777	CastTarget	char *
>778	Callee	os . write
>779	MemberAccess	os . write
>780	Identifier	write
>781	Identifier	os
>782	ExpressionStatement	 
>783	CallExpression	os . write ( ( char * ) & features [ 0 ] , n * sizeof ( float ) )
>784	ArgumentList	( char * ) & features [ 0 ]
>785	Argument	n * sizeof ( float )
>786	MultiplicativeExpression	n * sizeof ( float )
>787	SizeofExpr	sizeof ( float )
>788	SizeofOperand	float
>789	Sizeof	sizeof
>790	Identifier	n
>791	Argument	( char * ) & features [ 0 ]
>792	CastExpression	( char * ) & features [ 0 ]
>793	UnaryOp	& features [ 0 ]
>794	ArrayIndexing	features [ 0 ]
>795	PrimaryExpression	0
>796	Identifier	features
>797	UnaryOperator	&
>798	CastTarget	char *
>799	Callee	os . write
>800	MemberAccess	os . write
>801	Identifier	write
>802	Identifier	os
>803	ExpressionStatement	 
>804	CallExpression	os . write ( ( char * ) & n , sizeof ( uint16_t ) )
>805	ArgumentList	( char * ) & n
>806	Argument	sizeof ( uint16_t )
>807	SizeofExpr	sizeof ( uint16_t )
>808	SizeofOperand	uint16_t
>809	Sizeof	sizeof
>810	Argument	( char * ) & n
>811	CastExpression	( char * ) & n
>812	UnaryOp	& n
>813	Identifier	n
>814	UnaryOperator	&
>815	CastTarget	char *
>816	Callee	os . write
>817	MemberAccess	os . write
>818	Identifier	write
>819	Identifier	os
>820	IdentifierDeclStatement	 
>821	IdentifierDecl	n = features . size ( )
>822	AssignmentExpr	n = features . size ( )
>823	CallExpression	features . size ( )
>824	ArgumentList	 
>825	Callee	features . size
>826	MemberAccess	features . size
>827	Identifier	size
>828	Identifier	features
>829	Identifier	n
>830	Identifier	n
>831	IdentifierDeclType	uint16_t
>871	FunctionDef	drwnNNGraphImageData 
>872	ParameterList	const string & name
>873	Parameter	 
>874	Identifier	name
>875	ParameterType	const string &
>876	CompoundStatement	 
>877	ExpressionStatement	 
>878	CallExpression	cacheSegmentData ( )
>879	ArgumentList	 
>880	Callee	cacheSegmentData
>881	Identifier	cacheSegmentData
>882	ExpressionStatement	 
>883	CallExpression	ifs . close ( )
>884	ArgumentList	 
>885	Callee	ifs . close
>886	MemberAccess	ifs . close
>887	Identifier	close
>888	Identifier	ifs
>889	ExpressionStatement	 
>890	CallExpression	_segments . read ( ifs )
>891	ArgumentList	ifs
>892	Argument	ifs
>893	Identifier	ifs
>894	Callee	_segments . read
>895	MemberAccess	_segments . read
>896	Identifier	read
>897	Identifier	_segments
>898	IdentifierDeclStatement	 
>899	IdentifierDecl	ifs ( filename . c_str ( ) , ios 
>900	Expression	filename . c_str ( ) , ios 
>901	Identifier	ios 
>902	CallExpression	filename . c_str ( )
>903	ArgumentList	 
>904	Callee	filename . c_str
>905	MemberAccess	filename . c_str
>906	Identifier	c_str
>907	Identifier	filename
>908	Identifier	ifs
>909	IdentifierDeclType	ifstream
>910	ExpressionStatement	 
>911	CallExpression	DRWN_ASSERT_MSG ( drwnFileExists ( filename . c_str ( ) ) , filename << \" does not exists\" )
>912	ArgumentList	drwnFileExists ( filename . c_str ( ) )
>913	Argument	filename << \" does not exists\"
>914	ShiftExpression	filename << \" does not exists\"
>915	PrimaryExpression	\" does not exists\"
>916	Identifier	filename
>917	Argument	drwnFileExists ( filename . c_str ( ) )
>918	CallExpression	drwnFileExists ( filename . c_str ( ) )
>919	ArgumentList	filename . c_str ( )
>920	Argument	filename . c_str ( )
>921	CallExpression	filename . c_str ( )
>922	ArgumentList	 
>923	Callee	filename . c_str
>924	MemberAccess	filename . c_str
>925	Identifier	c_str
>926	Identifier	filename
>927	Callee	drwnFileExists
>928	Identifier	drwnFileExists
>929	Callee	DRWN_ASSERT_MSG
>930	Identifier	DRWN_ASSERT_MSG
>931	ExpressionStatement	 
>932	AssignmentExpr	filename = segDir + DRWN_DIRSEP + _name + segExt
>933	AdditiveExpression	segDir + DRWN_DIRSEP + _name + segExt
>934	AdditiveExpression	DRWN_DIRSEP + _name + segExt
>935	AdditiveExpression	_name + segExt
>936	Identifier	segExt
>937	Identifier	_name
>938	Identifier	DRWN_DIRSEP
>939	Identifier	segDir
>940	Identifier	filename
>941	IfStatement	if ( drwnFileExists ( filename . c_str ( ) ) )
>942	CompoundStatement	 
>943	ExpressionStatement	 
>944	CallExpression	DRWN_ASSERT ( ( _labels . rows ( ) == _img . rows ) && ( _labels . cols ( ) == _img . cols ) )
>945	ArgumentList	( _labels . rows ( ) == _img . rows ) && ( _labels . cols ( ) == _img . cols )
>946	Argument	( _labels . rows ( ) == _img . rows ) && ( _labels . cols ( ) == _img . cols )
>947	AndExpression	( _labels . rows ( ) == _img . rows ) && ( _labels . cols ( ) == _img . cols )
>948	EqualityExpression	_labels . cols ( ) == _img . cols
>949	MemberAccess	_img . cols
>950	Identifier	cols
>951	Identifier	_img
>952	CallExpression	_labels . cols ( )
>953	ArgumentList	 
>954	Callee	_labels . cols
>955	MemberAccess	_labels . cols
>956	Identifier	cols
>957	Identifier	_labels
>958	EqualityExpression	_labels . rows ( ) == _img . rows
>959	MemberAccess	_img . rows
>960	Identifier	rows
>961	Identifier	_img
>962	CallExpression	_labels . rows ( )
>963	ArgumentList	 
>964	Callee	_labels . rows
>965	MemberAccess	_labels . rows
>966	Identifier	rows
>967	Identifier	_labels
>968	Callee	DRWN_ASSERT
>969	Identifier	DRWN_ASSERT
>970	ExpressionStatement	 
>971	AssignmentExpr	_labels = gMultiSegRegionDefs . loadLabelFile ( filename . c_str ( ) )
>972	CallExpression	gMultiSegRegionDefs . loadLabelFile ( filename . c_str ( ) )
>973	ArgumentList	filename . c_str ( )
>974	Argument	filename . c_str ( )
>975	CallExpression	filename . c_str ( )
>976	ArgumentList	 
>977	Callee	filename . c_str
>978	MemberAccess	filename . c_str
>979	Identifier	c_str
>980	Identifier	filename
>981	Callee	gMultiSegRegionDefs . loadLabelFile
>982	MemberAccess	gMultiSegRegionDefs . loadLabelFile
>983	Identifier	loadLabelFile
>984	Identifier	gMultiSegRegionDefs
>985	Identifier	_labels
>986	Condition	 
>987	CallExpression	drwnFileExists ( filename . c_str ( ) )
>988	ArgumentList	filename . c_str ( )
>989	Argument	filename . c_str ( )
>990	CallExpression	filename . c_str ( )
>991	ArgumentList	 
>992	Callee	filename . c_str
>993	MemberAccess	filename . c_str
>994	Identifier	c_str
>995	Identifier	filename
>996	Callee	drwnFileExists
>997	Identifier	drwnFileExists
>998	ExpressionStatement	 
>999	AssignmentExpr	filename = lblDir + DRWN_DIRSEP + _name + lblExt
>1000	AdditiveExpression	lblDir + DRWN_DIRSEP + _name + lblExt
>1001	AdditiveExpression	DRWN_DIRSEP + _name + lblExt
>1002	AdditiveExpression	_name + lblExt
>1003	Identifier	lblExt
>1004	Identifier	_name
>1005	Identifier	DRWN_DIRSEP
>1006	Identifier	lblDir
>1007	Identifier	filename
>1008	ExpressionStatement	 
>1009	AssignmentExpr	_labels = MatrixXi 
>1010	CallExpression	MatrixXi 
>1011	ArgumentList	_img . rows
>1012	Argument	- 1
>1013	UnaryOp	- 1
>1014	PrimaryExpression	1
>1015	UnaryOperator	-
>1016	Argument	_img . cols
>1017	MemberAccess	_img . cols
>1018	Identifier	cols
>1019	Identifier	_img
>1020	Argument	_img . rows
>1021	MemberAccess	_img . rows
>1022	Identifier	rows
>1023	Identifier	_img
>1024	Callee	MatrixXi 
>1025	Identifier	MatrixXi 
>1026	Identifier	_labels
>1027	ExpressionStatement	 
>1028	CallExpression	DRWN_ASSERT_MSG ( _img . data != NULL , filename )
>1029	ArgumentList	_img . data != NULL
>1030	Argument	filename
>1031	Identifier	filename
>1032	Argument	_img . data != NULL
>1033	EqualityExpression	_img . data != NULL
>1034	Identifier	NULL
>1035	MemberAccess	_img . data
>1036	Identifier	data
>1037	Identifier	_img
>1038	Callee	DRWN_ASSERT_MSG
>1039	Identifier	DRWN_ASSERT_MSG
>1040	ExpressionStatement	 
>1041	AssignmentExpr	_img = cv 
>1042	CallExpression	cv 
>1043	ArgumentList	filename
>1044	Argument	cv 
>1045	Identifier	cv 
>1046	Argument	filename
>1047	Identifier	filename
>1048	Callee	cv 
>1049	Identifier	cv 
>1050	Identifier	_img
>1051	IdentifierDeclStatement	 
>1052	IdentifierDecl	filename = imgDir + DRWN_DIRSEP + _name + imgExt
>1053	AssignmentExpr	filename = imgDir + DRWN_DIRSEP + _name + imgExt
>1054	AdditiveExpression	imgDir + DRWN_DIRSEP + _name + imgExt
>1055	AdditiveExpression	DRWN_DIRSEP + _name + imgExt
>1056	AdditiveExpression	_name + imgExt
>1057	Identifier	imgExt
>1058	Identifier	_name
>1059	Identifier	DRWN_DIRSEP
>1060	Identifier	imgDir
>1061	Identifier	filename
>1062	Identifier	filename
>1063	IdentifierDeclType	string
>1094	FunctionDef	drwnNNGraphImageData 
>1095	ParameterList	const cv 
>1096	Parameter	 
>1097	Identifier	segments
>1098	ParameterType	const drwnSuperpixelContainer &
>1099	Parameter	 
>1100	Identifier	img
>1101	ParameterType	const cv 
>1102	CompoundStatement	 
>1103	ExpressionStatement	 
>1104	CallExpression	cacheSegmentData ( )
>1105	ArgumentList	 
>1106	Callee	cacheSegmentData
>1107	Identifier	cacheSegmentData
>1108	ExpressionStatement	 
>1109	AssignmentExpr	_labels = MatrixXi 
>1110	CallExpression	MatrixXi 
>1111	ArgumentList	_img . rows
>1112	Argument	- 1
>1113	UnaryOp	- 1
>1114	PrimaryExpression	1
>1115	UnaryOperator	-
>1116	Argument	_img . cols
>1117	MemberAccess	_img . cols
>1118	Identifier	cols
>1119	Identifier	_img
>1120	Argument	_img . rows
>1121	MemberAccess	_img . rows
>1122	Identifier	rows
>1123	Identifier	_img
>1124	Callee	MatrixXi 
>1125	Identifier	MatrixXi 
>1126	Identifier	_labels
>1127	ExpressionStatement	 
>1128	CallExpression	DRWN_ASSERT ( ( _img . data != NULL ) && ( _img . channels ( ) == 3 ) && ( _img . depth ( ) == CV_8U ) )
>1129	ArgumentList	( _img . data != NULL ) && ( _img . channels ( ) == 3 ) && ( _img . depth ( ) == CV_8U )
>1130	Argument	( _img . data != NULL ) && ( _img . channels ( ) == 3 ) && ( _img . depth ( ) == CV_8U )
>1131	AndExpression	( _img . data != NULL ) && ( _img . channels ( ) == 3 ) && ( _img . depth ( ) == CV_8U )
>1132	AndExpression	( _img . channels ( ) == 3 ) && ( _img . depth ( ) == CV_8U )
>1133	EqualityExpression	_img . depth ( ) == CV_8U
>1134	Identifier	CV_8U
>1135	CallExpression	_img . depth ( )
>1136	ArgumentList	 
>1137	Callee	_img . depth
>1138	MemberAccess	_img . depth
>1139	Identifier	depth
>1140	Identifier	_img
>1141	EqualityExpression	_img . channels ( ) == 3
>1142	PrimaryExpression	3
>1143	CallExpression	_img . channels ( )
>1144	ArgumentList	 
>1145	Callee	_img . channels
>1146	MemberAccess	_img . channels
>1147	Identifier	channels
>1148	Identifier	_img
>1149	EqualityExpression	_img . data != NULL
>1150	Identifier	NULL
>1151	MemberAccess	_img . data
>1152	Identifier	data
>1153	Identifier	_img
>1154	Callee	DRWN_ASSERT
>1155	Identifier	DRWN_ASSERT
>1171	FunctionDef	drwnNNGraphImageData 
>1172	ParameterList	const MatrixXi & labels
>1173	Parameter	 
>1174	Identifier	labels
>1175	ParameterType	const MatrixXi &
>1176	ReturnType	void
>1177	CompoundStatement	 
>1178	ExpressionStatement	 
>1179	AssignmentExpr	_labels = labels
>1180	Identifier	labels
>1181	Identifier	_labels
>1182	ExpressionStatement	 
>1183	CallExpression	DRWN_ASSERT ( ( ( size_t ) labels . rows ( ) == height ( ) ) && ( ( size_t ) labels . cols ( ) == width ( ) ) )
>1184	ArgumentList	( ( size_t ) labels . rows ( ) == height ( ) ) && ( ( size_t ) labels . cols ( ) == width ( ) )
>1185	Argument	( ( size_t ) labels . rows ( ) == height ( ) ) && ( ( size_t ) labels . cols ( ) == width ( ) )
>1186	AndExpression	( ( size_t ) labels . rows ( ) == height ( ) ) && ( ( size_t ) labels . cols ( ) == width ( ) )
>1187	EqualityExpression	( size_t ) labels . cols ( ) == width ( )
>1188	CallExpression	width ( )
>1189	ArgumentList	 
>1190	Callee	width
>1191	Identifier	width
>1192	CastExpression	( size_t ) labels . cols ( )
>1193	CallExpression	labels . cols ( )
>1194	ArgumentList	 
>1195	Callee	labels . cols
>1196	MemberAccess	labels . cols
>1197	Identifier	cols
>1198	Identifier	labels
>1199	CastTarget	size_t
>1200	EqualityExpression	( size_t ) labels . rows ( ) == height ( )
>1201	CallExpression	height ( )
>1202	ArgumentList	 
>1203	Callee	height
>1204	Identifier	height
>1205	CastExpression	( size_t ) labels . rows ( )
>1206	CallExpression	labels . rows ( )
>1207	ArgumentList	 
>1208	Callee	labels . rows
>1209	MemberAccess	labels . rows
>1210	Identifier	rows
>1211	Identifier	labels
>1212	CastTarget	size_t
>1213	Callee	DRWN_ASSERT
>1214	Identifier	DRWN_ASSERT
>1224	FunctionDef	drwnNNGraphImageData 
>1225	ParameterList	int numLabels
>1226	Parameter	 
>1227	Identifier	numLabels
>1228	ParameterType	int
>1229	ReturnType	vector < VectorXd >
>1230	CompoundStatement	 
>1231	ReturnStatement	 
>1232	Identifier	marginals
>1233	ForStatement	for ( unsigned segId = 0 ; segId < marginals . size ( ) ; segId ++ )
>1234	CompoundStatement	 
>1235	IfStatement	if ( Z != 0.0 )
>1236	CompoundStatement	 
>1237	ExpressionStatement	 
>1238	AssignmentExpr	marginals [ segId ] /= Z
>1239	Identifier	Z
>1240	ArrayIndexing	marginals [ segId ]
>1241	Identifier	segId
>1242	Identifier	marginals
>1243	Condition	 
>1244	EqualityExpression	Z != 0.0
>1245	PrimaryExpression	0.0
>1246	Identifier	Z
>1247	IdentifierDeclStatement	 
>1248	IdentifierDecl	Z = marginals [ segId ] . sum ( )
>1249	AssignmentExpr	Z = marginals [ segId ] . sum ( )
>1250	CallExpression	marginals [ segId ] . sum ( )
>1251	ArgumentList	 
>1252	Callee	marginals [ segId ] . sum
>1253	MemberAccess	marginals [ segId ] . sum
>1254	Identifier	sum
>1255	ArrayIndexing	marginals [ segId ]
>1256	Identifier	segId
>1257	Identifier	marginals
>1258	Identifier	Z
>1259	Identifier	Z
>1260	IdentifierDeclType	const double
>1261	IncDecOp	 
>1262	IncDec	++
>1263	Identifier	segId
>1264	Condition	 
>1265	RelationalExpression	segId < marginals . size ( )
>1266	CallExpression	marginals . size ( )
>1267	ArgumentList	 
>1268	Callee	marginals . size
>1269	MemberAccess	marginals . size
>1270	Identifier	size
>1271	Identifier	marginals
>1272	Identifier	segId
>1273	ForInit	 
>1274	IdentifierDeclStatement	unsigned segId = 0 ;
>1275	IdentifierDecl	segId = 0
>1276	AssignmentExpr	segId = 0
>1277	PrimaryExpression	0
>1278	Identifier	segId
>1279	Identifier	segId
>1280	IdentifierDeclType	unsigned
>1281	ForStatement	for ( int c = 0 ; c < _segments . channels ( ) ; c ++ )
>1282	CompoundStatement	 
>1283	ForStatement	for ( int y = 0 ; y < _segments . height ( ) ; y ++ )
>1284	CompoundStatement	 
>1285	ForStatement	for ( int x = 0 ; x < _segments . width ( ) ; x ++ )
>1286	CompoundStatement	 
>1287	IfStatement	if ( lblId < 0 )
>1288	ElseStatement	else
>1289	CompoundStatement	 
>1290	ExpressionStatement	 
>1291	AssignmentExpr	marginals [ segId ] ( lblId ) += 1.0
>1292	PrimaryExpression	1.0
>1293	CallExpression	marginals [ segId ] ( lblId )
>1294	ArgumentList	lblId
>1295	Argument	lblId
>1296	Identifier	lblId
>1297	Callee	marginals [ segId ]
>1298	ArrayIndexing	marginals [ segId ]
>1299	Identifier	segId
>1300	Identifier	marginals
>1301	CompoundStatement	 
>1302	ExpressionStatement	 
>1303	AssignmentExpr	marginals [ segId ] += VectorXd 
>1304	CallExpression	VectorXd 
>1305	ArgumentList	numLabels
>1306	Argument	1.0 / ( double ) numLabels
>1307	MultiplicativeExpression	1.0 / ( double ) numLabels
>1308	CastExpression	( double ) numLabels
>1309	Identifier	numLabels
>1310	CastTarget	double
>1311	PrimaryExpression	1.0
>1312	Argument	numLabels
>1313	Identifier	numLabels
>1314	Callee	VectorXd 
>1315	Identifier	VectorXd 
>1316	ArrayIndexing	marginals [ segId ]
>1317	Identifier	segId
>1318	Identifier	marginals
>1319	Condition	 
>1320	RelationalExpression	lblId < 0
>1321	PrimaryExpression	0
>1322	Identifier	lblId
>1323	IdentifierDeclStatement	 
>1324	IdentifierDecl	lblId = _labels ( y , x )
>1325	AssignmentExpr	lblId = _labels ( y , x )
>1326	CallExpression	_labels ( y , x )
>1327	ArgumentList	y
>1328	Argument	x
>1329	Identifier	x
>1330	Argument	y
>1331	Identifier	y
>1332	Callee	_labels
>1333	Identifier	_labels
>1334	Identifier	lblId
>1335	Identifier	lblId
>1336	IdentifierDeclType	const int
>1337	IfStatement	if ( segId < 0 )
>1338	ContinueStatement	 
>1339	Condition	 
>1340	RelationalExpression	segId < 0
>1341	PrimaryExpression	0
>1342	Identifier	segId
>1343	IdentifierDeclStatement	 
>1344	IdentifierDecl	segId = _segments [ c ] . at < int > ( y , x )
>1345	AssignmentExpr	segId = _segments [ c ] . at < int > ( y , x )
>1346	RelationalExpression	_segments [ c ] . at < int > ( y , x )
>1347	RelationalExpression	int > ( y , x )
>1348	Expression	y , x
>1349	Identifier	x
>1350	Identifier	y
>1351	Identifier	int
>1352	MemberAccess	_segments [ c ] . at
>1353	Identifier	at
>1354	ArrayIndexing	_segments [ c ]
>1355	Identifier	c
>1356	Identifier	_segments
>1357	Identifier	segId
>1358	Identifier	segId
>1359	IdentifierDeclType	const int
>1360	IncDecOp	 
>1361	IncDec	++
>1362	Identifier	x
>1363	Condition	 
>1364	RelationalExpression	x < _segments . width ( )
>1365	CallExpression	_segments . width ( )
>1366	ArgumentList	 
>1367	Callee	_segments . width
>1368	MemberAccess	_segments . width
>1369	Identifier	width
>1370	Identifier	_segments
>1371	Identifier	x
>1372	ForInit	 
>1373	IdentifierDeclStatement	int x = 0 ;
>1374	IdentifierDecl	x = 0
>1375	AssignmentExpr	x = 0
>1376	PrimaryExpression	0
>1377	Identifier	x
>1378	Identifier	x
>1379	IdentifierDeclType	int
>1380	IncDecOp	 
>1381	IncDec	++
>1382	Identifier	y
>1383	Condition	 
>1384	RelationalExpression	y < _segments . height ( )
>1385	CallExpression	_segments . height ( )
>1386	ArgumentList	 
>1387	Callee	_segments . height
>1388	MemberAccess	_segments . height
>1389	Identifier	height
>1390	Identifier	_segments
>1391	Identifier	y
>1392	ForInit	 
>1393	IdentifierDeclStatement	int y = 0 ;
>1394	IdentifierDecl	y = 0
>1395	AssignmentExpr	y = 0
>1396	PrimaryExpression	0
>1397	Identifier	y
>1398	Identifier	y
>1399	IdentifierDeclType	int
>1400	IncDecOp	 
>1401	IncDec	++
>1402	Identifier	c
>1403	Condition	 
>1404	RelationalExpression	c < _segments . channels ( )
>1405	CallExpression	_segments . channels ( )
>1406	ArgumentList	 
>1407	Callee	_segments . channels
>1408	MemberAccess	_segments . channels
>1409	Identifier	channels
>1410	Identifier	_segments
>1411	Identifier	c
>1412	ForInit	 
>1413	IdentifierDeclStatement	int c = 0 ;
>1414	IdentifierDecl	c = 0
>1415	AssignmentExpr	c = 0
>1416	PrimaryExpression	0
>1417	Identifier	c
>1418	Identifier	c
>1419	IdentifierDeclType	int
>1420	IdentifierDeclStatement	 
>1421	IdentifierDecl	marginals ( numSegments ( ) , VectorXd 
>1422	Expression	numSegments ( ) , VectorXd 
>1423	CallExpression	VectorXd 
>1424	ArgumentList	numLabels
>1425	Argument	numLabels
>1426	Identifier	numLabels
>1427	Callee	VectorXd 
>1428	Identifier	VectorXd 
>1429	CallExpression	numSegments ( )
>1430	ArgumentList	 
>1431	Callee	numSegments
>1432	Identifier	numSegments
>1433	Identifier	marginals
>1434	IdentifierDeclType	vector < VectorXd >
>1435	IfStatement	if ( numLabels < 1 )
>1436	CompoundStatement	 
>1437	ReturnStatement	 
>1438	RelationalExpression	vector < VectorXd > ( numSegments ( ) )
>1439	RelationalExpression	VectorXd > ( numSegments ( ) )
>1440	CallExpression	numSegments ( )
>1441	ArgumentList	 
>1442	Callee	numSegments
>1443	Identifier	numSegments
>1444	Identifier	VectorXd
>1445	Identifier	vector
>1446	Condition	 
>1447	RelationalExpression	numLabels < 1
>1448	PrimaryExpression	1
>1449	Identifier	numLabels
>1450	ExpressionStatement	 
>1451	AssignmentExpr	numLabels = std 
>1452	CallExpression	std 
>1453	ArgumentList	( int ) _labels . maxCoeff ( ) + 1
>1454	Argument	numLabels
>1455	Identifier	numLabels
>1456	Argument	( int ) _labels . maxCoeff ( ) + 1
>1457	AdditiveExpression	( int ) _labels . maxCoeff ( ) + 1
>1458	PrimaryExpression	1
>1459	CastExpression	( int ) _labels . maxCoeff ( )
>1460	CallExpression	_labels . maxCoeff ( )
>1461	ArgumentList	 
>1462	Callee	_labels . maxCoeff
>1463	MemberAccess	_labels . maxCoeff
>1464	Identifier	maxCoeff
>1465	Identifier	_labels
>1466	CastTarget	int
>1467	Callee	std 
>1468	Identifier	std 
>1469	Identifier	numLabels
>1500	FunctionDef	drwnNNGraphImageData 
>1501	ParameterList	 
>1502	ReturnType	void
>1503	CompoundStatement	 
>1504	ForStatement	for ( int segId = 0 ; segId < _segments . size ( ) ; segId ++ )
>1505	CompoundStatement	 
>1506	ExpressionStatement	 
>1507	AssignmentExpr	_centroids [ segId ] . y = accXY [ segId ] . y ( ) / _segments . pixels ( segId )
>1508	MultiplicativeExpression	accXY [ segId ] . y ( ) / _segments . pixels ( segId )
>1509	CallExpression	_segments . pixels ( segId )
>1510	ArgumentList	segId
>1511	Argument	segId
>1512	Identifier	segId
>1513	Callee	_segments . pixels
>1514	MemberAccess	_segments . pixels
>1515	Identifier	pixels
>1516	Identifier	_segments
>1517	CallExpression	accXY [ segId ] . y ( )
>1518	ArgumentList	 
>1519	Callee	accXY [ segId ] . y
>1520	MemberAccess	accXY [ segId ] . y
>1521	Identifier	y
>1522	ArrayIndexing	accXY [ segId ]
>1523	Identifier	segId
>1524	Identifier	accXY
>1525	MemberAccess	_centroids [ segId ] . y
>1526	Identifier	y
>1527	ArrayIndexing	_centroids [ segId ]
>1528	Identifier	segId
>1529	Identifier	_centroids
>1530	ExpressionStatement	 
>1531	AssignmentExpr	_centroids [ segId ] . x = accXY [ segId ] . x ( ) / _segments . pixels ( segId )
>1532	MultiplicativeExpression	accXY [ segId ] . x ( ) / _segments . pixels ( segId )
>1533	CallExpression	_segments . pixels ( segId )
>1534	ArgumentList	segId
>1535	Argument	segId
>1536	Identifier	segId
>1537	Callee	_segments . pixels
>1538	MemberAccess	_segments . pixels
>1539	Identifier	pixels
>1540	Identifier	_segments
>1541	CallExpression	accXY [ segId ] . x ( )
>1542	ArgumentList	 
>1543	Callee	accXY [ segId ] . x
>1544	MemberAccess	accXY [ segId ] . x
>1545	Identifier	x
>1546	ArrayIndexing	accXY [ segId ]
>1547	Identifier	segId
>1548	Identifier	accXY
>1549	MemberAccess	_centroids [ segId ] . x
>1550	Identifier	x
>1551	ArrayIndexing	_centroids [ segId ]
>1552	Identifier	segId
>1553	Identifier	_centroids
>1554	IncDecOp	 
>1555	IncDec	++
>1556	Identifier	segId
>1557	Condition	 
>1558	RelationalExpression	segId < _segments . size ( )
>1559	CallExpression	_segments . size ( )
>1560	ArgumentList	 
>1561	Callee	_segments . size
>1562	MemberAccess	_segments . size
>1563	Identifier	size
>1564	Identifier	_segments
>1565	Identifier	segId
>1566	ForInit	 
>1567	IdentifierDeclStatement	int segId = 0 ;
>1568	IdentifierDecl	segId = 0
>1569	AssignmentExpr	segId = 0
>1570	PrimaryExpression	0
>1571	Identifier	segId
>1572	Identifier	segId
>1573	IdentifierDeclType	int
>1574	ForStatement	for ( int y = 0 ; y < _img . rows ; y ++ )
>1575	CompoundStatement	 
>1576	ForStatement	for ( int x = 0 ; x < _img . cols ; x ++ )
>1577	CompoundStatement	 
>1578	ForStatement	for ( int c = 0 ; c < _segments . channels ( ) ; c ++ )
>1579	CompoundStatement	 
>1580	ExpressionStatement	 
>1581	AssignmentExpr	accXY [ segId ] . y ( ) += y
>1582	Identifier	y
>1583	CallExpression	accXY [ segId ] . y ( )
>1584	ArgumentList	 
>1585	Callee	accXY [ segId ] . y
>1586	MemberAccess	accXY [ segId ] . y
>1587	Identifier	y
>1588	ArrayIndexing	accXY [ segId ]
>1589	Identifier	segId
>1590	Identifier	accXY
>1591	ExpressionStatement	 
>1592	AssignmentExpr	accXY [ segId ] . x ( ) += x
>1593	Identifier	x
>1594	CallExpression	accXY [ segId ] . x ( )
>1595	ArgumentList	 
>1596	Callee	accXY [ segId ] . x
>1597	MemberAccess	accXY [ segId ] . x
>1598	Identifier	x
>1599	ArrayIndexing	accXY [ segId ]
>1600	Identifier	segId
>1601	Identifier	accXY
>1602	IfStatement	if ( segId < 0 )
>1603	ContinueStatement	 
>1604	Condition	 
>1605	RelationalExpression	segId < 0
>1606	PrimaryExpression	0
>1607	Identifier	segId
>1608	IdentifierDeclStatement	 
>1609	IdentifierDecl	segId = _segments [ c ] . at < int > ( y , x )
>1610	AssignmentExpr	segId = _segments [ c ] . at < int > ( y , x )
>1611	RelationalExpression	_segments [ c ] . at < int > ( y , x )
>1612	RelationalExpression	int > ( y , x )
>1613	Expression	y , x
>1614	Identifier	x
>1615	Identifier	y
>1616	Identifier	int
>1617	MemberAccess	_segments [ c ] . at
>1618	Identifier	at
>1619	ArrayIndexing	_segments [ c ]
>1620	Identifier	c
>1621	Identifier	_segments
>1622	Identifier	segId
>1623	Identifier	segId
>1624	IdentifierDeclType	const int
>1625	IncDecOp	 
>1626	IncDec	++
>1627	Identifier	c
>1628	Condition	 
>1629	RelationalExpression	c < _segments . channels ( )
>1630	CallExpression	_segments . channels ( )
>1631	ArgumentList	 
>1632	Callee	_segments . channels
>1633	MemberAccess	_segments . channels
>1634	Identifier	channels
>1635	Identifier	_segments
>1636	Identifier	c
>1637	ForInit	 
>1638	IdentifierDeclStatement	int c = 0 ;
>1639	IdentifierDecl	c = 0
>1640	AssignmentExpr	c = 0
>1641	PrimaryExpression	0
>1642	Identifier	c
>1643	Identifier	c
>1644	IdentifierDeclType	int
>1645	IncDecOp	 
>1646	IncDec	++
>1647	Identifier	x
>1648	Condition	 
>1649	RelationalExpression	x < _img . cols
>1650	MemberAccess	_img . cols
>1651	Identifier	cols
>1652	Identifier	_img
>1653	Identifier	x
>1654	ForInit	 
>1655	IdentifierDeclStatement	int x = 0 ;
>1656	IdentifierDecl	x = 0
>1657	AssignmentExpr	x = 0
>1658	PrimaryExpression	0
>1659	Identifier	x
>1660	Identifier	x
>1661	IdentifierDeclType	int
>1662	IncDecOp	 
>1663	IncDec	++
>1664	Identifier	y
>1665	Condition	 
>1666	RelationalExpression	y < _img . rows
>1667	MemberAccess	_img . rows
>1668	Identifier	rows
>1669	Identifier	_img
>1670	Identifier	y
>1671	ForInit	 
>1672	IdentifierDeclStatement	int y = 0 ;
>1673	IdentifierDecl	y = 0
>1674	AssignmentExpr	y = 0
>1675	PrimaryExpression	0
>1676	Identifier	y
>1677	Identifier	y
>1678	IdentifierDeclType	int
>1679	IdentifierDeclStatement	 
>1680	IdentifierDecl	accXY ( _segments . size ( ) , Vector2i 
>1681	Expression	_segments . size ( ) , Vector2i 
>1682	CallExpression	Vector2i 
>1683	ArgumentList	 
>1684	Callee	Vector2i 
>1685	Identifier	Vector2i 
>1686	CallExpression	_segments . size ( )
>1687	ArgumentList	 
>1688	Callee	_segments . size
>1689	MemberAccess	_segments . size
>1690	Identifier	size
>1691	Identifier	_segments
>1692	Identifier	accXY
>1693	IdentifierDeclType	vector < Vector2i >
>1694	ExpressionStatement	 
>1695	CallExpression	_centroids . resize ( _segments . size ( ) )
>1696	ArgumentList	_segments . size ( )
>1697	Argument	_segments . size ( )
>1698	CallExpression	_segments . size ( )
>1699	ArgumentList	 
>1700	Callee	_segments . size
>1701	MemberAccess	_segments . size
>1702	Identifier	size
>1703	Identifier	_segments
>1704	Callee	_centroids . resize
>1705	MemberAccess	_centroids . resize
>1706	Identifier	resize
>1707	Identifier	_centroids
>1708	ForStatement	for ( int segId = 0 ; segId < _segments . size ( ) ; segId ++ )
>1709	CompoundStatement	 
>1710	ExpressionStatement	 
>1711	AssignmentExpr	_colours [ segId ] = ( blue << 16 ) | ( green << 8 ) | red
>1712	InclusiveOrExpression	( blue << 16 ) | ( green << 8 ) | red
>1713	InclusiveOrExpression	( green << 8 ) | red
>1714	Identifier	red
>1715	ShiftExpression	green << 8
>1716	PrimaryExpression	8
>1717	Identifier	green
>1718	ShiftExpression	blue << 16
>1719	PrimaryExpression	16
>1720	Identifier	blue
>1721	ArrayIndexing	_colours [ segId ]
>1722	Identifier	segId
>1723	Identifier	_colours
>1724	IdentifierDeclStatement	 
>1725	IdentifierDecl	blue = ( unsigned ) ( accRGB [ segId ] [ 0 ] / _segments . pixels ( segId ) )
>1726	AssignmentExpr	blue = ( unsigned ) ( accRGB [ segId ] [ 0 ] / _segments . pixels ( segId ) )
>1727	CastExpression	( unsigned ) ( accRGB [ segId ] [ 0 ] / _segments . pixels ( segId ) )
>1728	MultiplicativeExpression	accRGB [ segId ] [ 0 ] / _segments . pixels ( segId )
>1729	CallExpression	_segments . pixels ( segId )
>1730	ArgumentList	segId
>1731	Argument	segId
>1732	Identifier	segId
>1733	Callee	_segments . pixels
>1734	MemberAccess	_segments . pixels
>1735	Identifier	pixels
>1736	Identifier	_segments
>1737	ArrayIndexing	accRGB [ segId ] [ 0 ]
>1738	PrimaryExpression	0
>1739	ArrayIndexing	accRGB [ segId ]
>1740	Identifier	segId
>1741	Identifier	accRGB
>1742	CastTarget	unsigned
>1743	Identifier	blue
>1744	Identifier	blue
>1745	IdentifierDeclType	unsigned
>1746	IdentifierDeclStatement	 
>1747	IdentifierDecl	green = ( unsigned ) ( accRGB [ segId ] [ 1 ] / _segments . pixels ( segId ) )
>1748	AssignmentExpr	green = ( unsigned ) ( accRGB [ segId ] [ 1 ] / _segments . pixels ( segId ) )
>1749	CastExpression	( unsigned ) ( accRGB [ segId ] [ 1 ] / _segments . pixels ( segId ) )
>1750	MultiplicativeExpression	accRGB [ segId ] [ 1 ] / _segments . pixels ( segId )
>1751	CallExpression	_segments . pixels ( segId )
>1752	ArgumentList	segId
>1753	Argument	segId
>1754	Identifier	segId
>1755	Callee	_segments . pixels
>1756	MemberAccess	_segments . pixels
>1757	Identifier	pixels
>1758	Identifier	_segments
>1759	ArrayIndexing	accRGB [ segId ] [ 1 ]
>1760	PrimaryExpression	1
>1761	ArrayIndexing	accRGB [ segId ]
>1762	Identifier	segId
>1763	Identifier	accRGB
>1764	CastTarget	unsigned
>1765	Identifier	green
>1766	Identifier	green
>1767	IdentifierDeclType	unsigned
>1768	IdentifierDeclStatement	 
>1769	IdentifierDecl	red = ( unsigned ) ( accRGB [ segId ] [ 2 ] / _segments . pixels ( segId ) )
>1770	AssignmentExpr	red = ( unsigned ) ( accRGB [ segId ] [ 2 ] / _segments . pixels ( segId ) )
>1771	CastExpression	( unsigned ) ( accRGB [ segId ] [ 2 ] / _segments . pixels ( segId ) )
>1772	MultiplicativeExpression	accRGB [ segId ] [ 2 ] / _segments . pixels ( segId )
>1773	CallExpression	_segments . pixels ( segId )
>1774	ArgumentList	segId
>1775	Argument	segId
>1776	Identifier	segId
>1777	Callee	_segments . pixels
>1778	MemberAccess	_segments . pixels
>1779	Identifier	pixels
>1780	Identifier	_segments
>1781	ArrayIndexing	accRGB [ segId ] [ 2 ]
>1782	PrimaryExpression	2
>1783	ArrayIndexing	accRGB [ segId ]
>1784	Identifier	segId
>1785	Identifier	accRGB
>1786	CastTarget	unsigned
>1787	Identifier	red
>1788	Identifier	red
>1789	IdentifierDeclType	unsigned
>1790	IncDecOp	 
>1791	IncDec	++
>1792	Identifier	segId
>1793	Condition	 
>1794	RelationalExpression	segId < _segments . size ( )
>1795	CallExpression	_segments . size ( )
>1796	ArgumentList	 
>1797	Callee	_segments . size
>1798	MemberAccess	_segments . size
>1799	Identifier	size
>1800	Identifier	_segments
>1801	Identifier	segId
>1802	ForInit	 
>1803	IdentifierDeclStatement	int segId = 0 ;
>1804	IdentifierDecl	segId = 0
>1805	AssignmentExpr	segId = 0
>1806	PrimaryExpression	0
>1807	Identifier	segId
>1808	Identifier	segId
>1809	IdentifierDeclType	int
>1810	ForStatement	for ( int y = 0 ; y < _img . rows ; y ++ )
>1811	CompoundStatement	 
>1812	ForStatement	for ( int x = 0 ; x < _img . cols ; x ++ )
>1813	CompoundStatement	 
>1814	ForStatement	for ( int c = 0 ; c < _segments . channels ( ) ; c ++ )
>1815	CompoundStatement	 
>1816	ExpressionStatement	 
>1817	RelationalExpression	char > ( y , _img . channels ( ) * x + 2 )
>1818	Expression	y , _img . channels ( ) * x + 2
>1819	AdditiveExpression	_img . channels ( ) * x + 2
>1820	PrimaryExpression	2
>1821	MultiplicativeExpression	_img . channels ( ) * x
>1822	Identifier	x
>1823	CallExpression	_img . channels ( )
>1824	ArgumentList	 
>1825	Callee	_img . channels
>1826	MemberAccess	_img . channels
>1827	Identifier	channels
>1828	Identifier	_img
>1829	Identifier	y
>1830	Identifier	char
>1831	Statement	 
>1832	Statement	 
>1833	Statement	 
>1834	Statement	 
>1835	Statement	 
>1836	Statement	 
>1837	Statement	 
>1838	Statement	 
>1839	Statement	 
>1840	Statement	 
>1841	Statement	 
>1842	Statement	 
>1843	Statement	 
>1844	Statement	 
>1845	Statement	 
>1846	Statement	 
>1847	ExpressionStatement	 
>1848	RelationalExpression	char > ( y , _img . channels ( ) * x + 1 )
>1849	Expression	y , _img . channels ( ) * x + 1
>1850	AdditiveExpression	_img . channels ( ) * x + 1
>1851	PrimaryExpression	1
>1852	MultiplicativeExpression	_img . channels ( ) * x
>1853	Identifier	x
>1854	CallExpression	_img . channels ( )
>1855	ArgumentList	 
>1856	Callee	_img . channels
>1857	MemberAccess	_img . channels
>1858	Identifier	channels
>1859	Identifier	_img
>1860	Identifier	y
>1861	Identifier	char
>1862	Statement	 
>1863	Statement	 
>1864	Statement	 
>1865	Statement	 
>1866	Statement	 
>1867	Statement	 
>1868	Statement	 
>1869	Statement	 
>1870	Statement	 
>1871	Statement	 
>1872	Statement	 
>1873	Statement	 
>1874	Statement	 
>1875	Statement	 
>1876	Statement	 
>1877	Statement	 
>1878	ExpressionStatement	 
>1879	RelationalExpression	char > ( y , _img . channels ( ) * x )
>1880	Expression	y , _img . channels ( ) * x
>1881	MultiplicativeExpression	_img . channels ( ) * x
>1882	Identifier	x
>1883	CallExpression	_img . channels ( )
>1884	ArgumentList	 
>1885	Callee	_img . channels
>1886	MemberAccess	_img . channels
>1887	Identifier	channels
>1888	Identifier	_img
>1889	Identifier	y
>1890	Identifier	char
>1891	Statement	 
>1892	Statement	 
>1893	Statement	 
>1894	Statement	 
>1895	Statement	 
>1896	Statement	 
>1897	Statement	 
>1898	Statement	 
>1899	Statement	 
>1900	Statement	 
>1901	Statement	 
>1902	Statement	 
>1903	Statement	 
>1904	Statement	 
>1905	Statement	 
>1906	Statement	 
>1907	IfStatement	if ( segId < 0 )
>1908	ContinueStatement	 
>1909	Condition	 
>1910	RelationalExpression	segId < 0
>1911	PrimaryExpression	0
>1912	Identifier	segId
>1913	IdentifierDeclStatement	 
>1914	IdentifierDecl	segId = _segments [ c ] . at < int > ( y , x )
>1915	AssignmentExpr	segId = _segments [ c ] . at < int > ( y , x )
>1916	RelationalExpression	_segments [ c ] . at < int > ( y , x )
>1917	RelationalExpression	int > ( y , x )
>1918	Expression	y , x
>1919	Identifier	x
>1920	Identifier	y
>1921	Identifier	int
>1922	MemberAccess	_segments [ c ] . at
>1923	Identifier	at
>1924	ArrayIndexing	_segments [ c ]
>1925	Identifier	c
>1926	Identifier	_segments
>1927	Identifier	segId
>1928	Identifier	segId
>1929	IdentifierDeclType	const int
>1930	IncDecOp	 
>1931	IncDec	++
>1932	Identifier	c
>1933	Condition	 
>1934	RelationalExpression	c < _segments . channels ( )
>1935	CallExpression	_segments . channels ( )
>1936	ArgumentList	 
>1937	Callee	_segments . channels
>1938	MemberAccess	_segments . channels
>1939	Identifier	channels
>1940	Identifier	_segments
>1941	Identifier	c
>1942	ForInit	 
>1943	IdentifierDeclStatement	int c = 0 ;
>1944	IdentifierDecl	c = 0
>1945	AssignmentExpr	c = 0
>1946	PrimaryExpression	0
>1947	Identifier	c
>1948	Identifier	c
>1949	IdentifierDeclType	int
>1950	IncDecOp	 
>1951	IncDec	++
>1952	Identifier	x
>1953	Condition	 
>1954	RelationalExpression	x < _img . cols
>1955	MemberAccess	_img . cols
>1956	Identifier	cols
>1957	Identifier	_img
>1958	Identifier	x
>1959	ForInit	 
>1960	IdentifierDeclStatement	int x = 0 ;
>1961	IdentifierDecl	x = 0
>1962	AssignmentExpr	x = 0
>1963	PrimaryExpression	0
>1964	Identifier	x
>1965	Identifier	x
>1966	IdentifierDeclType	int
>1967	IncDecOp	 
>1968	IncDec	++
>1969	Identifier	y
>1970	Condition	 
>1971	RelationalExpression	y < _img . rows
>1972	MemberAccess	_img . rows
>1973	Identifier	rows
>1974	Identifier	_img
>1975	Identifier	y
>1976	ForInit	 
>1977	IdentifierDeclStatement	int y = 0 ;
>1978	IdentifierDecl	y = 0
>1979	AssignmentExpr	y = 0
>1980	PrimaryExpression	0
>1981	Identifier	y
>1982	Identifier	y
>1983	IdentifierDeclType	int
>1984	IdentifierDeclStatement	 
>1985	IdentifierDecl	accRGB ( _segments . size ( ) , Vector3d 
>1986	Expression	_segments . size ( ) , Vector3d 
>1987	CallExpression	Vector3d 
>1988	ArgumentList	 
>1989	Callee	Vector3d 
>1990	Identifier	Vector3d 
>1991	CallExpression	_segments . size ( )
>1992	ArgumentList	 
>1993	Callee	_segments . size
>1994	MemberAccess	_segments . size
>1995	Identifier	size
>1996	Identifier	_segments
>1997	Identifier	accRGB
>1998	IdentifierDeclType	vector < Vector3d >
>1999	ExpressionStatement	 
>2000	CallExpression	_colours . resize ( _segments . size ( ) )
>2001	ArgumentList	_segments . size ( )
>2002	Argument	_segments . size ( )
>2003	CallExpression	_segments . size ( )
>2004	ArgumentList	 
>2005	Callee	_segments . size
>2006	MemberAccess	_segments . size
>2007	Identifier	size
>2008	Identifier	_segments
>2009	Callee	_colours . resize
>2010	MemberAccess	_colours . resize
>2011	Identifier	resize
>2012	Identifier	_colours
>2013	ExpressionStatement	 
>2014	CallExpression	DRWN_ASSERT ( ( _segments . width ( ) == _img . cols ) && ( _segments . height ( ) == _img . rows ) )
>2015	ArgumentList	( _segments . width ( ) == _img . cols ) && ( _segments . height ( ) == _img . rows )
>2016	Argument	( _segments . width ( ) == _img . cols ) && ( _segments . height ( ) == _img . rows )
>2017	AndExpression	( _segments . width ( ) == _img . cols ) && ( _segments . height ( ) == _img . rows )
>2018	EqualityExpression	_segments . height ( ) == _img . rows
>2019	MemberAccess	_img . rows
>2020	Identifier	rows
>2021	Identifier	_img
>2022	CallExpression	_segments . height ( )
>2023	ArgumentList	 
>2024	Callee	_segments . height
>2025	MemberAccess	_segments . height
>2026	Identifier	height
>2027	Identifier	_segments
>2028	EqualityExpression	_segments . width ( ) == _img . cols
>2029	MemberAccess	_img . cols
>2030	Identifier	cols
>2031	Identifier	_img
>2032	CallExpression	_segments . width ( )
>2033	ArgumentList	 
>2034	Callee	_segments . width
>2035	MemberAccess	_segments . width
>2036	Identifier	width
>2037	Identifier	_segments
>2038	Callee	DRWN_ASSERT
>2039	Identifier	DRWN_ASSERT
>2078	FunctionDef	drwnNNGraphImage 
>2079	ParameterList	const string & name , unsigned n
>2080	Parameter	 
>2081	Identifier	n
>2082	ParameterType	unsigned
>2083	Parameter	 
>2084	Identifier	name
>2085	ParameterType	const string &
>2086	CompoundStatement	 
>2087	ExpressionStatement	 
>2088	CallExpression	initialize ( name , n )
>2089	ArgumentList	name
>2090	Argument	n
>2091	Identifier	n
>2092	Argument	name
>2093	Identifier	name
>2094	Callee	initialize
>2095	Identifier	initialize
>2101	FunctionDef	drwnNNGraphImage 
>2102	ParameterList	const drwnNNGraphImageData & image
>2103	Parameter	 
>2104	Identifier	image
>2105	ParameterType	const drwnNNGraphImageData &
>2106	CompoundStatement	 
>2107	ExpressionStatement	 
>2108	CallExpression	initialize ( image )
>2109	ArgumentList	image
>2110	Argument	image
>2111	Identifier	image
>2112	Callee	initialize
>2113	Identifier	initialize
>2118	FunctionDef	drwnNNGraphImage 
>2119	ParameterList	 
>2120	ReturnType	void
>2121	CompoundStatement	 
>2122	ExpressionStatement	 
>2123	CallExpression	_nodes . clear ( )
>2124	ArgumentList	 
>2125	Callee	_nodes . clear
>2126	MemberAccess	_nodes . clear
>2127	Identifier	clear
>2128	Identifier	_nodes
>2133	FunctionDef	drwnNNGraphImage 
>2134	ParameterList	 
>2135	ReturnType	void
>2136	CompoundStatement	 
>2137	ForStatement	for ( vector < drwnNNGraphNode > 
>2138	CompoundStatement	 
>2139	ExpressionStatement	 
>2140	CallExpression	it -> edges . clear ( )
>2141	ArgumentList	 
>2142	Callee	it -> edges . clear
>2143	MemberAccess	it -> edges . clear
>2144	Identifier	clear
>2145	PtrMemberAccess	it -> edges
>2146	Identifier	edges
>2147	Identifier	it
>2148	UnaryExpression	 
>2149	Identifier	it
>2150	IncDec	++
>2151	Condition	 
>2152	EqualityExpression	it != _nodes . end ( )
>2153	CallExpression	_nodes . end ( )
>2154	ArgumentList	 
>2155	Callee	_nodes . end
>2156	MemberAccess	_nodes . end
>2157	Identifier	end
>2158	Identifier	_nodes
>2159	Identifier	it
>2160	ForInit	 
>2161	IdentifierDeclStatement	vector < drwnNNGraphNode > 
>2162	IdentifierDecl	it = _nodes . begin ( )
>2163	AssignmentExpr	it = _nodes . begin ( )
>2164	CallExpression	_nodes . begin ( )
>2165	ArgumentList	 
>2166	Callee	_nodes . begin
>2167	MemberAccess	_nodes . begin
>2168	Identifier	begin
>2169	Identifier	_nodes
>2170	Identifier	it
>2171	Identifier	it
>2172	IdentifierDeclType	vector < drwnNNGraphNode > 
>2182	FunctionDef	drwnNNGraphImage 
>2183	ParameterList	const string & name , unsigned n
>2184	Parameter	 
>2185	Identifier	n
>2186	ParameterType	unsigned
>2187	Parameter	 
>2188	Identifier	name
>2189	ParameterType	const string &
>2190	ReturnType	void
>2191	CompoundStatement	 
>2192	ExpressionStatement	 
>2193	CallExpression	_nodes . resize ( n )
>2194	ArgumentList	n
>2195	Argument	n
>2196	Identifier	n
>2197	Callee	_nodes . resize
>2198	MemberAccess	_nodes . resize
>2199	Identifier	resize
>2200	Identifier	_nodes
>2201	ExpressionStatement	 
>2202	CallExpression	_nodes . clear ( )
>2203	ArgumentList	 
>2204	Callee	_nodes . clear
>2205	MemberAccess	_nodes . clear
>2206	Identifier	clear
>2207	Identifier	_nodes
>2208	ExpressionStatement	 
>2209	AssignmentExpr	_name = name
>2210	Identifier	name
>2211	Identifier	_name
>2219	FunctionDef	drwnNNGraphImage 
>2220	ParameterList	const drwnNNGraphImageData & image
>2221	Parameter	 
>2222	Identifier	image
>2223	ParameterType	const drwnNNGraphImageData &
>2224	ReturnType	void
>2225	CompoundStatement	 
>2226	ExpressionStatement	 
>2227	CallExpression	cacheNodeLabels ( image )
>2228	ArgumentList	image
>2229	Argument	image
>2230	Identifier	image
>2231	Callee	cacheNodeLabels
>2232	Identifier	cacheNodeLabels
>2233	ExpressionStatement	 
>2234	CallExpression	cacheNodeFeatures ( image )
>2235	ArgumentList	image
>2236	Argument	image
>2237	Identifier	image
>2238	Callee	cacheNodeFeatures
>2239	Identifier	cacheNodeFeatures
>2240	ExpressionStatement	 
>2241	CallExpression	cacheNodeNeighbourhoods ( image )
>2242	ArgumentList	image
>2243	Argument	image
>2244	Identifier	image
>2245	Callee	cacheNodeNeighbourhoods
>2246	Identifier	cacheNodeNeighbourhoods
>2247	ExpressionStatement	 
>2248	CallExpression	_nodes . resize ( image . segments ( ) . size ( ) )
>2249	ArgumentList	image . segments ( ) . size ( )
>2250	Argument	image . segments ( ) . size ( )
>2251	CallExpression	image . segments ( ) . size ( )
>2252	ArgumentList	 
>2253	Callee	image . segments ( ) . size
>2254	MemberAccess	image . segments ( ) . size
>2255	Identifier	size
>2256	CallExpression	image . segments ( )
>2257	ArgumentList	 
>2258	Callee	image . segments
>2259	MemberAccess	image . segments
>2260	Identifier	segments
>2261	Identifier	image
>2262	Callee	_nodes . resize
>2263	MemberAccess	_nodes . resize
>2264	Identifier	resize
>2265	Identifier	_nodes
>2266	ExpressionStatement	 
>2267	CallExpression	_nodes . clear ( )
>2268	ArgumentList	 
>2269	Callee	_nodes . clear
>2270	MemberAccess	_nodes . clear
>2271	Identifier	clear
>2272	Identifier	_nodes
>2273	ExpressionStatement	 
>2274	AssignmentExpr	_name = image . name ( )
>2275	CallExpression	image . name ( )
>2276	ArgumentList	 
>2277	Callee	image . name
>2278	MemberAccess	image . name
>2279	Identifier	name
>2280	Identifier	image
>2281	Identifier	_name
>2291	FunctionDef	drwnNNGraphImage 
>2292	ParameterList	const drwnFeatureTransform & xform
>2293	Parameter	 
>2294	Identifier	xform
>2295	ParameterType	const drwnFeatureTransform &
>2296	ReturnType	void
>2297	CompoundStatement	 
>2298	ForStatement	for ( size_t i = 0 ; i < _nodes . size ( ) ; i ++ )
>2299	CompoundStatement	 
>2300	ExpressionStatement	 
>2301	Statement	 
>2302	Statement	 
>2303	Statement	 
>2304	Statement	 
>2305	Statement	 
>2306	Statement	 
>2307	Statement	 
>2308	Statement	 
>2309	Statement	 
>2310	Statement	 
>2311	Statement	 
>2312	Statement	 
>2313	Statement	 
>2314	Statement	 
>2315	Statement	 
>2316	Statement	 
>2317	Statement	 
>2318	Statement	 
>2319	Statement	 
>2320	Statement	 
>2321	Statement	 
>2322	Statement	 
>2323	Statement	 
>2324	Statement	 
>2325	Statement	 
>2326	Statement	 
>2327	Statement	 
>2328	Statement	 
>2329	Statement	 
>2330	Statement	 
>2331	Statement	 
>2332	Statement	 
>2333	Statement	 
>2334	ExpressionStatement	 
>2335	CallExpression	xform . transform ( x , y )
>2336	ArgumentList	x
>2337	Argument	y
>2338	Identifier	y
>2339	Argument	x
>2340	Identifier	x
>2341	Callee	xform . transform
>2342	MemberAccess	xform . transform
>2343	Identifier	transform
>2344	Identifier	xform
>2345	ExpressionStatement	 
>2346	Statement	 
>2347	Statement	 
>2348	Statement	 
>2349	Statement	 
>2350	Statement	 
>2351	Statement	 
>2352	Statement	 
>2353	Statement	 
>2354	Statement	 
>2355	Statement	 
>2356	Statement	 
>2357	Statement	 
>2358	Statement	 
>2359	Statement	 
>2360	Statement	 
>2361	Statement	 
>2362	Statement	 
>2363	Statement	 
>2364	Statement	 
>2365	Statement	 
>2366	Statement	 
>2367	Statement	 
>2368	Statement	 
>2369	Statement	 
>2370	Statement	 
>2371	Statement	 
>2372	Statement	 
>2373	Statement	 
>2374	Statement	 
>2375	Statement	 
>2376	Statement	 
>2377	Statement	 
>2378	Statement	 
>2379	ExpressionStatement	 
>2380	CallExpression	x . resize ( _nodes [ i ] . features . rows ( ) )
>2381	ArgumentList	_nodes [ i ] . features . rows ( )
>2382	Argument	_nodes [ i ] . features . rows ( )
>2383	CallExpression	_nodes [ i ] . features . rows ( )
>2384	ArgumentList	 
>2385	Callee	_nodes [ i ] . features . rows
>2386	MemberAccess	_nodes [ i ] . features . rows
>2387	Identifier	rows
>2388	MemberAccess	_nodes [ i ] . features
>2389	Identifier	features
>2390	ArrayIndexing	_nodes [ i ]
>2391	Identifier	i
>2392	Identifier	_nodes
>2393	Callee	x . resize
>2394	MemberAccess	x . resize
>2395	Identifier	resize
>2396	Identifier	x
>2397	IncDecOp	 
>2398	IncDec	++
>2399	Identifier	i
>2400	Condition	 
>2401	RelationalExpression	i < _nodes . size ( )
>2402	CallExpression	_nodes . size ( )
>2403	ArgumentList	 
>2404	Callee	_nodes . size
>2405	MemberAccess	_nodes . size
>2406	Identifier	size
>2407	Identifier	_nodes
>2408	Identifier	i
>2409	ForInit	 
>2410	IdentifierDeclStatement	size_t i = 0 ;
>2411	IdentifierDecl	i = 0
>2412	AssignmentExpr	i = 0
>2413	PrimaryExpression	0
>2414	Identifier	i
>2415	Identifier	i
>2416	IdentifierDeclType	size_t
>2417	IdentifierDeclStatement	 
>2418	IdentifierDecl	y
>2419	Identifier	y
>2420	IdentifierDeclType	vector < double >
>2421	IdentifierDecl	x
>2422	Identifier	x
>2423	IdentifierDeclType	vector < double >
>2437	FunctionDef	drwnNNGraphImage 
>2438	ParameterList	const drwnNNGraphImageData & image , const cv 
>2439	Parameter	 
>2440	Identifier	features
>2441	ParameterType	const cv 
>2442	Parameter	 
>2443	Identifier	image
>2444	ParameterType	const drwnNNGraphImageData &
>2445	ReturnType	void
>2446	CompoundStatement	 
>2447	ForStatement	for ( unsigned segId = 0 ; segId < phi . size ( ) ; segId ++ )
>2448	CompoundStatement	 
>2449	ExpressionStatement	 
>2450	AssignmentExpr	_nodes [ segId ] . features = newFeatures
>2451	Identifier	newFeatures
>2452	MemberAccess	_nodes [ segId ] . features
>2453	Identifier	features
>2454	ArrayIndexing	_nodes [ segId ]
>2455	Identifier	segId
>2456	Identifier	_nodes
>2457	ExpressionStatement	 
>2458	AssignmentExpr	newFeatures [ _nodes [ segId ] . features . rows ( ) ] = phi [ segId ] / ( float ) image . segments ( ) \
>2459	MultiplicativeExpression	phi [ segId ] / ( float ) image . segments ( ) . pixels ( segId )
>2460	CastExpression	( float ) image . segments ( ) . pixels ( segId )
>2461	CallExpression	image . segments ( ) . pixels ( segId )
>2462	ArgumentList	segId
>2463	Argument	segId
>2464	Identifier	segId
>2465	Callee	image . segments ( ) . pixels
>2466	MemberAccess	image . segments ( ) . pixels
>2467	Identifier	pixels
>2468	CallExpression	image . segments ( )
>2469	ArgumentList	 
>2470	Callee	image . segments
>2471	MemberAccess	image . segments
>2472	Identifier	segments
>2473	Identifier	image
>2474	CastTarget	float
>2475	ArrayIndexing	phi [ segId ]
>2476	Identifier	segId
>2477	Identifier	phi
>2478	ArrayIndexing	newFeatures [ _nodes [ segId ] . features . rows ( ) ]
>2479	CallExpression	_nodes [ segId ] . features . rows ( )
>2480	ArgumentList	 
>2481	Callee	_nodes [ segId ] . features . rows
>2482	MemberAccess	_nodes [ segId ] . features . rows
>2483	Identifier	rows
>2484	MemberAccess	_nodes [ segId ] . features
>2485	Identifier	features
>2486	ArrayIndexing	_nodes [ segId ]
>2487	Identifier	segId
>2488	Identifier	_nodes
>2489	Identifier	newFeatures
>2490	ExpressionStatement	 
>2491	AssignmentExpr	newFeatures . head ( _nodes [ segId ] . features . rows ( ) ) = _nodes [ segId ] . features
>2492	MemberAccess	_nodes [ segId ] . features
>2493	Identifier	features
>2494	ArrayIndexing	_nodes [ segId ]
>2495	Identifier	segId
>2496	Identifier	_nodes
>2497	CallExpression	newFeatures . head ( _nodes [ segId ] . features . rows ( ) )
>2498	ArgumentList	_nodes [ segId ] . features . rows ( )
>2499	Argument	_nodes [ segId ] . features . rows ( )
>2500	CallExpression	_nodes [ segId ] . features . rows ( )
>2501	ArgumentList	 
>2502	Callee	_nodes [ segId ] . features . rows
>2503	MemberAccess	_nodes [ segId ] . features . rows
>2504	Identifier	rows
>2505	MemberAccess	_nodes [ segId ] . features
>2506	Identifier	features
>2507	ArrayIndexing	_nodes [ segId ]
>2508	Identifier	segId
>2509	Identifier	_nodes
>2510	Callee	newFeatures . head
>2511	MemberAccess	newFeatures . head
>2512	Identifier	head
>2513	Identifier	newFeatures
>2514	IdentifierDeclStatement	 
>2515	IdentifierDecl	newFeatures ( _nodes [ segId ] . features . rows ( ) + 1 )
>2516	AdditiveExpression	_nodes [ segId ] . features . rows ( ) + 1
>2517	PrimaryExpression	1
>2518	CallExpression	_nodes [ segId ] . features . rows ( )
>2519	ArgumentList	 
>2520	Callee	_nodes [ segId ] . features . rows
>2521	MemberAccess	_nodes [ segId ] . features . rows
>2522	Identifier	rows
>2523	MemberAccess	_nodes [ segId ] . features
>2524	Identifier	features
>2525	ArrayIndexing	_nodes [ segId ]
>2526	Identifier	segId
>2527	Identifier	_nodes
>2528	Identifier	newFeatures
>2529	IdentifierDeclType	VectorXf
>2530	ExpressionStatement	 
>2531	CallExpression	DRWN_ASSERT ( isfinite ( phi [ segId ] ) )
>2532	ArgumentList	isfinite ( phi [ segId ] )
>2533	Argument	isfinite ( phi [ segId ] )
>2534	CallExpression	isfinite ( phi [ segId ] )
>2535	ArgumentList	phi [ segId ]
>2536	Argument	phi [ segId ]
>2537	ArrayIndexing	phi [ segId ]
>2538	Identifier	segId
>2539	Identifier	phi
>2540	Callee	isfinite
>2541	Identifier	isfinite
>2542	Callee	DRWN_ASSERT
>2543	Identifier	DRWN_ASSERT
>2544	IncDecOp	 
>2545	IncDec	++
>2546	Identifier	segId
>2547	Condition	 
>2548	RelationalExpression	segId < phi . size ( )
>2549	CallExpression	phi . size ( )
>2550	ArgumentList	 
>2551	Callee	phi . size
>2552	MemberAccess	phi . size
>2553	Identifier	size
>2554	Identifier	phi
>2555	Identifier	segId
>2556	ForInit	 
>2557	IdentifierDeclStatement	unsigned segId = 0 ;
>2558	IdentifierDecl	segId = 0
>2559	AssignmentExpr	segId = 0
>2560	PrimaryExpression	0
>2561	Identifier	segId
>2562	Identifier	segId
>2563	IdentifierDeclType	unsigned
>2564	ForStatement	for ( unsigned y = 0 ; y < image . height ( ) ; y ++ )
>2565	CompoundStatement	 
>2566	ForStatement	for ( unsigned x = 0 ; x < image . width ( ) ; x ++ )
>2567	CompoundStatement	 
>2568	ForStatement	for ( int c = 0 ; c < image . segments ( ) . channels ( ) ; c ++ )
>2569	CompoundStatement	 
>2570	ExpressionStatement	 
>2571	AssignmentExpr	phi [ segId ] += p
>2572	Identifier	p
>2573	ArrayIndexing	phi [ segId ]
>2574	Identifier	segId
>2575	Identifier	phi
>2576	IfStatement	if ( segId < 0 )
>2577	ContinueStatement	 
>2578	Condition	 
>2579	RelationalExpression	segId < 0
>2580	PrimaryExpression	0
>2581	Identifier	segId
>2582	IdentifierDeclStatement	 
>2583	IdentifierDecl	segId = image . segments ( ) [ c ] . at < int > ( y , x )
>2584	AssignmentExpr	segId = image . segments ( ) [ c ] . at < int > ( y , x )
>2585	RelationalExpression	image . segments ( ) [ c ] . at < int > ( y , x )
>2586	RelationalExpression	int > ( y , x )
>2587	Expression	y , x
>2588	Identifier	x
>2589	Identifier	y
>2590	Identifier	int
>2591	MemberAccess	image . segments ( ) [ c ] . at
>2592	Identifier	at
>2593	ArrayIndexing	image . segments ( ) [ c ]
>2594	Identifier	c
>2595	CallExpression	image . segments ( )
>2596	ArgumentList	 
>2597	Callee	image . segments
>2598	MemberAccess	image . segments
>2599	Identifier	segments
>2600	Identifier	image
>2601	Identifier	segId
>2602	Identifier	segId
>2603	IdentifierDeclType	const int
>2604	IncDecOp	 
>2605	IncDec	++
>2606	Identifier	c
>2607	Condition	 
>2608	RelationalExpression	c < image . segments ( ) . channels ( )
>2609	CallExpression	image . segments ( ) . channels ( )
>2610	ArgumentList	 
>2611	Callee	image . segments ( ) . channels
>2612	MemberAccess	image . segments ( ) . channels
>2613	Identifier	channels
>2614	CallExpression	image . segments ( )
>2615	ArgumentList	 
>2616	Callee	image . segments
>2617	MemberAccess	image . segments
>2618	Identifier	segments
>2619	Identifier	image
>2620	Identifier	c
>2621	ForInit	 
>2622	IdentifierDeclStatement	int c = 0 ;
>2623	IdentifierDecl	c = 0
>2624	AssignmentExpr	c = 0
>2625	PrimaryExpression	0
>2626	Identifier	c
>2627	Identifier	c
>2628	IdentifierDeclType	int
>2629	IdentifierDeclStatement	 
>2630	IdentifierDecl	p = features . at < float > ( y , x )
>2631	AssignmentExpr	p = features . at < float > ( y , x )
>2632	RelationalExpression	features . at < float > ( y , x )
>2633	RelationalExpression	float > ( y , x )
>2634	Expression	y , x
>2635	Identifier	x
>2636	Identifier	y
>2637	Identifier	float
>2638	MemberAccess	features . at
>2639	Identifier	at
>2640	Identifier	features
>2641	Identifier	p
>2642	Identifier	p
>2643	IdentifierDeclType	const float
>2644	IncDecOp	 
>2645	IncDec	++
>2646	Identifier	x
>2647	Condition	 
>2648	RelationalExpression	x < image . width ( )
>2649	CallExpression	image . width ( )
>2650	ArgumentList	 
>2651	Callee	image . width
>2652	MemberAccess	image . width
>2653	Identifier	width
>2654	Identifier	image
>2655	Identifier	x
>2656	ForInit	 
>2657	IdentifierDeclStatement	unsigned x = 0 ;
>2658	IdentifierDecl	x = 0
>2659	AssignmentExpr	x = 0
>2660	PrimaryExpression	0
>2661	Identifier	x
>2662	Identifier	x
>2663	IdentifierDeclType	unsigned
>2664	IncDecOp	 
>2665	IncDec	++
>2666	Identifier	y
>2667	Condition	 
>2668	RelationalExpression	y < image . height ( )
>2669	CallExpression	image . height ( )
>2670	ArgumentList	 
>2671	Callee	image . height
>2672	MemberAccess	image . height
>2673	Identifier	height
>2674	Identifier	image
>2675	Identifier	y
>2676	ForInit	 
>2677	IdentifierDeclStatement	unsigned y = 0 ;
>2678	IdentifierDecl	y = 0
>2679	AssignmentExpr	y = 0
>2680	PrimaryExpression	0
>2681	Identifier	y
>2682	Identifier	y
>2683	IdentifierDeclType	unsigned
>2684	IdentifierDeclStatement	 
>2685	IdentifierDecl	phi ( image . numSegments ( ) , 0.0f )
>2686	Expression	image . numSegments ( ) , 0.0f
>2687	PrimaryExpression	0.0f
>2688	CallExpression	image . numSegments ( )
>2689	ArgumentList	 
>2690	Callee	image . numSegments
>2691	MemberAccess	image . numSegments
>2692	Identifier	numSegments
>2693	Identifier	image
>2694	Identifier	phi
>2695	IdentifierDeclType	vector < float >
>2696	IfStatement	if ( features . depth ( ) != CV_32F )
>2697	CompoundStatement	 
>2698	ReturnStatement	 
>2699	CallExpression	appendNodeFeatures ( image , tmp )
>2700	ArgumentList	image
>2701	Argument	tmp
>2702	Identifier	tmp
>2703	Argument	image
>2704	Identifier	image
>2705	Callee	appendNodeFeatures
>2706	Identifier	appendNodeFeatures
>2707	ExpressionStatement	 
>2708	CallExpression	features . convertTo ( tmp , CV_32F , 1.0 , 0.0 )
>2709	ArgumentList	tmp
>2710	Argument	0.0
>2711	PrimaryExpression	0.0
>2712	Argument	1.0
>2713	PrimaryExpression	1.0
>2714	Argument	CV_32F
>2715	Identifier	CV_32F
>2716	Argument	tmp
>2717	Identifier	tmp
>2718	Callee	features . convertTo
>2719	MemberAccess	features . convertTo
>2720	Identifier	convertTo
>2721	Identifier	features
>2722	IdentifierDeclStatement	 
>2723	IdentifierDecl	tmp ( features . rows , features . cols , CV_8U )
>2724	Expression	features . rows , features . cols , CV_8U
>2725	Expression	features . cols , CV_8U
>2726	Identifier	CV_8U
>2727	MemberAccess	features . cols
>2728	Identifier	cols
>2729	Identifier	features
>2730	MemberAccess	features . rows
>2731	Identifier	rows
>2732	Identifier	features
>2733	Identifier	tmp
>2734	IdentifierDeclType	cv 
>2735	Condition	 
>2736	EqualityExpression	features . depth ( ) != CV_32F
>2737	Identifier	CV_32F
>2738	CallExpression	features . depth ( )
>2739	ArgumentList	 
>2740	Callee	features . depth
>2741	MemberAccess	features . depth
>2742	Identifier	depth
>2743	Identifier	features
>2744	ExpressionStatement	 
>2745	CallExpression	DRWN_ASSERT ( image . numSegments ( ) == this -> numNodes ( ) )
>2746	ArgumentList	image . numSegments ( ) == this -> numNodes ( )
>2747	Argument	image . numSegments ( ) == this -> numNodes ( )
>2748	EqualityExpression	image . numSegments ( ) == this -> numNodes ( )
>2749	CallExpression	this -> numNodes ( )
>2750	ArgumentList	 
>2751	Callee	this -> numNodes
>2752	PtrMemberAccess	this -> numNodes
>2753	Identifier	numNodes
>2754	Identifier	this
>2755	CallExpression	image . numSegments ( )
>2756	ArgumentList	 
>2757	Callee	image . numSegments
>2758	MemberAccess	image . numSegments
>2759	Identifier	numSegments
>2760	Identifier	image
>2761	Callee	DRWN_ASSERT
>2762	Identifier	DRWN_ASSERT
>2763	ExpressionStatement	 
>2764	CallExpression	DRWN_ASSERT ( ( ( int ) image . width ( ) == features . cols ) && ( ( int ) image . height ( ) == features . rows ) )
>2765	ArgumentList	( ( int ) image . width ( ) == features . cols ) && ( ( int ) image . height ( ) == features . rows )
>2766	Argument	( ( int ) image . width ( ) == features . cols ) && ( ( int ) image . height ( ) == features . rows )
>2767	AndExpression	( ( int ) image . width ( ) == features . cols ) && ( ( int ) image . height ( ) == features . rows )
>2768	EqualityExpression	( int ) image . height ( ) == features . rows
>2769	MemberAccess	features . rows
>2770	Identifier	rows
>2771	Identifier	features
>2772	CastExpression	( int ) image . height ( )
>2773	CallExpression	image . height ( )
>2774	ArgumentList	 
>2775	Callee	image . height
>2776	MemberAccess	image . height
>2777	Identifier	height
>2778	Identifier	image
>2779	CastTarget	int
>2780	EqualityExpression	( int ) image . width ( ) == features . cols
>2781	MemberAccess	features . cols
>2782	Identifier	cols
>2783	Identifier	features
>2784	CastExpression	( int ) image . width ( )
>2785	CallExpression	image . width ( )
>2786	ArgumentList	 
>2787	Callee	image . width
>2788	MemberAccess	image . width
>2789	Identifier	width
>2790	Identifier	image
>2791	CastTarget	int
>2792	Callee	DRWN_ASSERT
>2793	Identifier	DRWN_ASSERT
>2842	FunctionDef	drwnNNGraphImage 
>2843	ParameterList	const drwnNNGraphImageData & image , const vector < cv 
>2844	Parameter	 
>2845	Identifier	features
>2846	ParameterType	const vector < cv 
>2847	Parameter	 
>2848	Identifier	image
>2849	ParameterType	const drwnNNGraphImageData &
>2850	ReturnType	void
>2851	CompoundStatement	 
>2852	ForStatement	for ( unsigned i = 0 ; i < features . size ( ) ; i ++ )
>2853	CompoundStatement	 
>2854	ExpressionStatement	 
>2855	CallExpression	appendNodeFeatures ( image , features [ i ] )
>2856	ArgumentList	image
>2857	Argument	features [ i ]
>2858	ArrayIndexing	features [ i ]
>2859	Identifier	i
>2860	Identifier	features
>2861	Argument	image
>2862	Identifier	image
>2863	Callee	appendNodeFeatures
>2864	Identifier	appendNodeFeatures
>2865	IncDecOp	 
>2866	IncDec	++
>2867	Identifier	i
>2868	Condition	 
>2869	RelationalExpression	i < features . size ( )
>2870	CallExpression	features . size ( )
>2871	ArgumentList	 
>2872	Callee	features . size
>2873	MemberAccess	features . size
>2874	Identifier	size
>2875	Identifier	features
>2876	Identifier	i
>2877	ForInit	 
>2878	IdentifierDeclStatement	unsigned i = 0 ;
>2879	IdentifierDecl	i = 0
>2880	AssignmentExpr	i = 0
>2881	PrimaryExpression	0
>2882	Identifier	i
>2883	Identifier	i
>2884	IdentifierDeclType	unsigned
>2894	FunctionDef	drwnNNGraphImage 
>2895	ParameterList	 
>2896	ReturnType	size_t
>2897	CompoundStatement	 
>2898	ReturnStatement	 
>2899	Identifier	n
>2900	ForStatement	for ( size_t i = 0 ; i < _nodes . size ( ) ; i ++ )
>2901	CompoundStatement	 
>2902	ExpressionStatement	 
>2903	AssignmentExpr	n += _nodes [ i ] . numBytesOnDisk ( )
>2904	CallExpression	_nodes [ i ] . numBytesOnDisk ( )
>2905	ArgumentList	 
>2906	Callee	_nodes [ i ] . numBytesOnDisk
>2907	MemberAccess	_nodes [ i ] . numBytesOnDisk
>2908	Identifier	numBytesOnDisk
>2909	ArrayIndexing	_nodes [ i ]
>2910	Identifier	i
>2911	Identifier	_nodes
>2912	Identifier	n
>2913	IncDecOp	 
>2914	IncDec	++
>2915	Identifier	i
>2916	Condition	 
>2917	RelationalExpression	i < _nodes . size ( )
>2918	CallExpression	_nodes . size ( )
>2919	ArgumentList	 
>2920	Callee	_nodes . size
>2921	MemberAccess	_nodes . size
>2922	Identifier	size
>2923	Identifier	_nodes
>2924	Identifier	i
>2925	ForInit	 
>2926	IdentifierDeclStatement	size_t i = 0 ;
>2927	IdentifierDecl	i = 0
>2928	AssignmentExpr	i = 0
>2929	PrimaryExpression	0
>2930	Identifier	i
>2931	Identifier	i
>2932	IdentifierDeclType	size_t
>2933	ExpressionStatement	 
>2934	AssignmentExpr	n += sizeof ( uint16_t )
>2935	SizeofExpr	sizeof ( uint16_t )
>2936	SizeofOperand	uint16_t
>2937	Sizeof	sizeof
>2938	Identifier	n
>2939	ExpressionStatement	 
>2940	AssignmentExpr	n += sizeof ( int32_t )
>2941	SizeofExpr	sizeof ( int32_t )
>2942	SizeofOperand	int32_t
>2943	Sizeof	sizeof
>2944	Identifier	n
>2945	ExpressionStatement	 
>2946	AssignmentExpr	n += sizeof ( uint16_t ) + _name . size ( ) * sizeof ( unsigned char )
>2947	AdditiveExpression	sizeof ( uint16_t ) + _name . size ( ) * sizeof ( unsigned char )
>2948	MultiplicativeExpression	_name . size ( ) * sizeof ( unsigned char )
>2949	SizeofExpr	sizeof ( unsigned char )
>2950	SizeofOperand	unsigned char
>2951	Sizeof	sizeof
>2952	CallExpression	_name . size ( )
>2953	ArgumentList	 
>2954	Callee	_name . size
>2955	MemberAccess	_name . size
>2956	Identifier	size
>2957	Identifier	_name
>2958	SizeofExpr	sizeof ( uint16_t )
>2959	SizeofOperand	uint16_t
>2960	Sizeof	sizeof
>2961	Identifier	n
>2962	IdentifierDeclStatement	 
>2963	IdentifierDecl	n = 0
>2964	AssignmentExpr	n = 0
>2965	PrimaryExpression	0
>2966	Identifier	n
>2967	Identifier	n
>2968	IdentifierDeclType	size_t
>2981	FunctionDef	drwnNNGraphImage 
>2982	ParameterList	istream & is
>2983	Parameter	 
>2984	Identifier	is
>2985	ParameterType	istream &
>2986	ReturnType	bool
>2987	CompoundStatement	 
>2988	ReturnStatement	 
>2989	Identifier	true
>2990	ForStatement	for ( size_t i = 0 ; i < _nodes . size ( ) ; i ++ )
>2991	CompoundStatement	 
>2992	ExpressionStatement	 
>2993	CallExpression	_nodes [ i ] . read ( is )
>2994	ArgumentList	is
>2995	Argument	is
>2996	Identifier	is
>2997	Callee	_nodes [ i ] . read
>2998	MemberAccess	_nodes [ i ] . read
>2999	Identifier	read
>3000	ArrayIndexing	_nodes [ i ]
>3001	Identifier	i
>3002	Identifier	_nodes
>3003	IncDecOp	 
>3004	IncDec	++
>3005	Identifier	i
>3006	Condition	 
>3007	RelationalExpression	i < _nodes . size ( )
>3008	CallExpression	_nodes . size ( )
>3009	ArgumentList	 
>3010	Callee	_nodes . size
>3011	MemberAccess	_nodes . size
>3012	Identifier	size
>3013	Identifier	_nodes
>3014	Identifier	i
>3015	ForInit	 
>3016	IdentifierDeclStatement	size_t i = 0 ;
>3017	IdentifierDecl	i = 0
>3018	AssignmentExpr	i = 0
>3019	PrimaryExpression	0
>3020	Identifier	i
>3021	Identifier	i
>3022	IdentifierDeclType	size_t
>3023	ExpressionStatement	 
>3024	CallExpression	_nodes . resize ( n )
>3025	ArgumentList	n
>3026	Argument	n
>3027	Identifier	n
>3028	Callee	_nodes . resize
>3029	MemberAccess	_nodes . resize
>3030	Identifier	resize
>3031	Identifier	_nodes
>3032	ExpressionStatement	 
>3033	CallExpression	is . read ( ( char * ) & n , sizeof ( uint16_t ) )
>3034	ArgumentList	( char * ) & n
>3035	Argument	sizeof ( uint16_t )
>3036	SizeofExpr	sizeof ( uint16_t )
>3037	SizeofOperand	uint16_t
>3038	Sizeof	sizeof
>3039	Argument	( char * ) & n
>3040	CastExpression	( char * ) & n
>3041	UnaryOp	& n
>3042	Identifier	n
>3043	UnaryOperator	&
>3044	CastTarget	char *
>3045	Callee	is . read
>3046	MemberAccess	is . read
>3047	Identifier	read
>3048	Identifier	is
>3049	ExpressionStatement	 
>3050	CallExpression	is . read ( ( char * ) & eqvClass , sizeof ( int32_t ) )
>3051	ArgumentList	( char * ) & eqvClass
>3052	Argument	sizeof ( int32_t )
>3053	SizeofExpr	sizeof ( int32_t )
>3054	SizeofOperand	int32_t
>3055	Sizeof	sizeof
>3056	Argument	( char * ) & eqvClass
>3057	CastExpression	( char * ) & eqvClass
>3058	UnaryOp	& eqvClass
>3059	Identifier	eqvClass
>3060	UnaryOperator	&
>3061	CastTarget	char *
>3062	Callee	is . read
>3063	MemberAccess	is . read
>3064	Identifier	read
>3065	Identifier	is
>3066	ExpressionStatement	 
>3067	Identifier	name
>3068	Statement	 
>3069	Statement	 
>3070	Statement	 
>3071	ExpressionStatement	 
>3072	AssignmentExpr	_name = string ( name )
>3073	CallExpression	string ( name )
>3074	ArgumentList	name
>3075	Argument	name
>3076	Identifier	name
>3077	Callee	string
>3078	Identifier	string
>3079	Identifier	_name
>3080	ExpressionStatement	 
>3081	AssignmentExpr	name [ n ] = '\0'
>3082	PrimaryExpression	'\0'
>3083	ArrayIndexing	name [ n ]
>3084	Identifier	n
>3085	Identifier	name
>3086	ExpressionStatement	 
>3087	CallExpression	is . read ( name , n * sizeof ( char ) )
>3088	ArgumentList	name
>3089	Argument	n * sizeof ( char )
>3090	MultiplicativeExpression	n * sizeof ( char )
>3091	SizeofExpr	sizeof ( char )
>3092	SizeofOperand	char
>3093	Sizeof	sizeof
>3094	Identifier	n
>3095	Argument	name
>3096	Identifier	name
>3097	Callee	is . read
>3098	MemberAccess	is . read
>3099	Identifier	read
>3100	Identifier	is
>3101	IdentifierDeclStatement	 
>3102	IdentifierDecl	* name = new char [ n + 1 ]
>3103	AssignmentExpr	* name = new char [ n + 1 ]
>3104	AdditiveExpression	n + 1
>3105	PrimaryExpression	1
>3106	Identifier	n
>3107	Identifier	name
>3108	Identifier	name
>3109	IdentifierDeclType	char *
>3110	ExpressionStatement	 
>3111	CallExpression	is . read ( ( char * ) & n , sizeof ( uint16_t ) )
>3112	ArgumentList	( char * ) & n
>3113	Argument	sizeof ( uint16_t )
>3114	SizeofExpr	sizeof ( uint16_t )
>3115	SizeofOperand	uint16_t
>3116	Sizeof	sizeof
>3117	Argument	( char * ) & n
>3118	CastExpression	( char * ) & n
>3119	UnaryOp	& n
>3120	Identifier	n
>3121	UnaryOperator	&
>3122	CastTarget	char *
>3123	Callee	is . read
>3124	MemberAccess	is . read
>3125	Identifier	read
>3126	Identifier	is
>3127	IdentifierDeclStatement	 
>3128	IdentifierDecl	n
>3129	Identifier	n
>3130	IdentifierDeclType	uint16_t
>3131	ExpressionStatement	 
>3132	CallExpression	clearNodes ( )
>3133	ArgumentList	 
>3134	Callee	clearNodes
>3135	Identifier	clearNodes
>3154	FunctionDef	drwnNNGraphImage 
>3155	ParameterList	ostream & os
>3156	Parameter	 
>3157	Identifier	os
>3158	ParameterType	ostream &
>3159	ReturnType	bool
>3160	CompoundStatement	 
>3161	ReturnStatement	 
>3162	Identifier	true
>3163	ForStatement	for ( size_t i = 0 ; i < _nodes . size ( ) ; i ++ )
>3164	CompoundStatement	 
>3165	ExpressionStatement	 
>3166	CallExpression	_nodes [ i ] . write ( os )
>3167	ArgumentList	os
>3168	Argument	os
>3169	Identifier	os
>3170	Callee	_nodes [ i ] . write
>3171	MemberAccess	_nodes [ i ] . write
>3172	Identifier	write
>3173	ArrayIndexing	_nodes [ i ]
>3174	Identifier	i
>3175	Identifier	_nodes
>3176	IncDecOp	 
>3177	IncDec	++
>3178	Identifier	i
>3179	Condition	 
>3180	RelationalExpression	i < _nodes . size ( )
>3181	CallExpression	_nodes . size ( )
>3182	ArgumentList	 
>3183	Callee	_nodes . size
>3184	MemberAccess	_nodes . size
>3185	Identifier	size
>3186	Identifier	_nodes
>3187	Identifier	i
>3188	ForInit	 
>3189	IdentifierDeclStatement	size_t i = 0 ;
>3190	IdentifierDecl	i = 0
>3191	AssignmentExpr	i = 0
>3192	PrimaryExpression	0
>3193	Identifier	i
>3194	Identifier	i
>3195	IdentifierDeclType	size_t
>3196	ExpressionStatement	 
>3197	CallExpression	os . write ( ( char * ) & n , sizeof ( uint16_t ) )
>3198	ArgumentList	( char * ) & n
>3199	Argument	sizeof ( uint16_t )
>3200	SizeofExpr	sizeof ( uint16_t )
>3201	SizeofOperand	uint16_t
>3202	Sizeof	sizeof
>3203	Argument	( char * ) & n
>3204	CastExpression	( char * ) & n
>3205	UnaryOp	& n
>3206	Identifier	n
>3207	UnaryOperator	&
>3208	CastTarget	char *
>3209	Callee	os . write
>3210	MemberAccess	os . write
>3211	Identifier	write
>3212	Identifier	os
>3213	ExpressionStatement	 
>3214	AssignmentExpr	n = _nodes . size ( )
>3215	CallExpression	_nodes . size ( )
>3216	ArgumentList	 
>3217	Callee	_nodes . size
>3218	MemberAccess	_nodes . size
>3219	Identifier	size
>3220	Identifier	_nodes
>3221	Identifier	n
>3222	ExpressionStatement	 
>3223	CallExpression	os . write ( ( char * ) & eqvClass , sizeof ( int32_t ) )
>3224	ArgumentList	( char * ) & eqvClass
>3225	Argument	sizeof ( int32_t )
>3226	SizeofExpr	sizeof ( int32_t )
>3227	SizeofOperand	int32_t
>3228	Sizeof	sizeof
>3229	Argument	( char * ) & eqvClass
>3230	CastExpression	( char * ) & eqvClass
>3231	UnaryOp	& eqvClass
>3232	Identifier	eqvClass
>3233	UnaryOperator	&
>3234	CastTarget	char *
>3235	Callee	os . write
>3236	MemberAccess	os . write
>3237	Identifier	write
>3238	Identifier	os
>3239	ExpressionStatement	 
>3240	CallExpression	os . write ( _name . c_str ( ) , n * sizeof ( char ) )
>3241	ArgumentList	_name . c_str ( )
>3242	Argument	n * sizeof ( char )
>3243	MultiplicativeExpression	n * sizeof ( char )
>3244	SizeofExpr	sizeof ( char )
>3245	SizeofOperand	char
>3246	Sizeof	sizeof
>3247	Identifier	n
>3248	Argument	_name . c_str ( )
>3249	CallExpression	_name . c_str ( )
>3250	ArgumentList	 
>3251	Callee	_name . c_str
>3252	MemberAccess	_name . c_str
>3253	Identifier	c_str
>3254	Identifier	_name
>3255	Callee	os . write
>3256	MemberAccess	os . write
>3257	Identifier	write
>3258	Identifier	os
>3259	ExpressionStatement	 
>3260	CallExpression	os . write ( ( char * ) & n , sizeof ( uint16_t ) )
>3261	ArgumentList	( char * ) & n
>3262	Argument	sizeof ( uint16_t )
>3263	SizeofExpr	sizeof ( uint16_t )
>3264	SizeofOperand	uint16_t
>3265	Sizeof	sizeof
>3266	Argument	( char * ) & n
>3267	CastExpression	( char * ) & n
>3268	UnaryOp	& n
>3269	Identifier	n
>3270	UnaryOperator	&
>3271	CastTarget	char *
>3272	Callee	os . write
>3273	MemberAccess	os . write
>3274	Identifier	write
>3275	Identifier	os
>3276	IdentifierDeclStatement	 
>3277	IdentifierDecl	n = _name . size ( )
>3278	AssignmentExpr	n = _name . size ( )
>3279	CallExpression	_name . size ( )
>3280	ArgumentList	 
>3281	Callee	_name . size
>3282	MemberAccess	_name . size
>3283	Identifier	size
>3284	Identifier	_name
>3285	Identifier	n
>3286	Identifier	n
>3287	IdentifierDeclType	uint16_t
>3304	FunctionDef	drwnNNGraphImage 
>3305	ParameterList	bool bWithFeatures
>3306	Parameter	 
>3307	Identifier	bWithFeatures
>3308	ParameterType	bool
>3309	ReturnType	drwnNNGraphImage
>3310	CompoundStatement	 
>3311	ReturnStatement	 
>3312	Identifier	img
>3313	ForStatement	for ( unsigned i = 0 ; i < _nodes . size ( ) ; i ++ )
>3314	CompoundStatement	 
>3315	ExpressionStatement	 
>3316	AssignmentExpr	img [ i ] . spatialNeighbours = _nodes [ i ] . spatialNeighbours
>3317	MemberAccess	_nodes [ i ] . spatialNeighbours
>3318	Identifier	spatialNeighbours
>3319	ArrayIndexing	_nodes [ i ]
>3320	Identifier	i
>3321	Identifier	_nodes
>3322	MemberAccess	img [ i ] . spatialNeighbours
>3323	Identifier	spatialNeighbours
>3324	ArrayIndexing	img [ i ]
>3325	Identifier	i
>3326	Identifier	img
>3327	ExpressionStatement	 
>3328	AssignmentExpr	img [ i ] . edges = _nodes [ i ] . edges
>3329	MemberAccess	_nodes [ i ] . edges
>3330	Identifier	edges
>3331	ArrayIndexing	_nodes [ i ]
>3332	Identifier	i
>3333	Identifier	_nodes
>3334	MemberAccess	img [ i ] . edges
>3335	Identifier	edges
>3336	ArrayIndexing	img [ i ]
>3337	Identifier	i
>3338	Identifier	img
>3339	ExpressionStatement	 
>3340	AssignmentExpr	img [ i ] . label = _nodes [ i ] . label
>3341	MemberAccess	_nodes [ i ] . label
>3342	Identifier	label
>3343	ArrayIndexing	_nodes [ i ]
>3344	Identifier	i
>3345	Identifier	_nodes
>3346	MemberAccess	img [ i ] . label
>3347	Identifier	label
>3348	ArrayIndexing	img [ i ]
>3349	Identifier	i
>3350	Identifier	img
>3351	IfStatement	if ( bWithFeatures )
>3352	CompoundStatement	 
>3353	ExpressionStatement	 
>3354	AssignmentExpr	img [ i ] . features = _nodes [ i ] . features
>3355	MemberAccess	_nodes [ i ] . features
>3356	Identifier	features
>3357	ArrayIndexing	_nodes [ i ]
>3358	Identifier	i
>3359	Identifier	_nodes
>3360	MemberAccess	img [ i ] . features
>3361	Identifier	features
>3362	ArrayIndexing	img [ i ]
>3363	Identifier	i
>3364	Identifier	img
>3365	Condition	 
>3366	Identifier	bWithFeatures
>3367	IncDecOp	 
>3368	IncDec	++
>3369	Identifier	i
>3370	Condition	 
>3371	RelationalExpression	i < _nodes . size ( )
>3372	CallExpression	_nodes . size ( )
>3373	ArgumentList	 
>3374	Callee	_nodes . size
>3375	MemberAccess	_nodes . size
>3376	Identifier	size
>3377	Identifier	_nodes
>3378	Identifier	i
>3379	ForInit	 
>3380	IdentifierDeclStatement	unsigned i = 0 ;
>3381	IdentifierDecl	i = 0
>3382	AssignmentExpr	i = 0
>3383	PrimaryExpression	0
>3384	Identifier	i
>3385	Identifier	i
>3386	IdentifierDeclType	unsigned
>3387	IdentifierDeclStatement	 
>3388	IdentifierDecl	img ( _name , _nodes . size ( ) )
>3389	Expression	_name , _nodes . size ( )
>3390	CallExpression	_nodes . size ( )
>3391	ArgumentList	 
>3392	Callee	_nodes . size
>3393	MemberAccess	_nodes . size
>3394	Identifier	size
>3395	Identifier	_nodes
>3396	Identifier	_name
>3397	Identifier	img
>3398	IdentifierDeclType	drwnNNGraphImage
>3418	FunctionDef	drwnNNGraphImage 
>3419	ParameterList	const drwnNNGraphImageData & image
>3420	Parameter	 
>3421	Identifier	image
>3422	ParameterType	const drwnNNGraphImageData &
>3423	ReturnType	void
>3424	CompoundStatement	 
>3425	ForStatement	for ( int c = 0 ; c < image . segments ( ) . channels ( ) - 1 ; c ++ )
>3426	CompoundStatement	 
>3427	ForStatement	for ( unsigned y = 0 ; y < image . height ( ) ; y ++ )
>3428	CompoundStatement	 
>3429	ForStatement	for ( unsigned x = 0 ; x < image . width ( ) ; x ++ )
>3430	CompoundStatement	 
>3431	IfStatement	if ( ( p [ x ] >= 0 ) && ( q [ x ] >= 0 ) )
>3432	CompoundStatement	 
>3433	ExpressionStatement	 
>3434	CallExpression	_nodes [ q [ x ] ] . spatialNeighbours . insert ( p [ x ] )
>3435	ArgumentList	p [ x ]
>3436	Argument	p [ x ]
>3437	ArrayIndexing	p [ x ]
>3438	Identifier	x
>3439	Identifier	p
>3440	Callee	_nodes [ q [ x ] ] . spatialNeighbours . insert
>3441	MemberAccess	_nodes [ q [ x ] ] . spatialNeighbours . insert
>3442	Identifier	insert
>3443	MemberAccess	_nodes [ q [ x ] ] . spatialNeighbours
>3444	Identifier	spatialNeighbours
>3445	ArrayIndexing	_nodes [ q [ x ] ]
>3446	ArrayIndexing	q [ x ]
>3447	Identifier	x
>3448	Identifier	q
>3449	Identifier	_nodes
>3450	ExpressionStatement	 
>3451	CallExpression	_nodes [ p [ x ] ] . spatialNeighbours . insert ( q [ x ] )
>3452	ArgumentList	q [ x ]
>3453	Argument	q [ x ]
>3454	ArrayIndexing	q [ x ]
>3455	Identifier	x
>3456	Identifier	q
>3457	Callee	_nodes [ p [ x ] ] . spatialNeighbours . insert
>3458	MemberAccess	_nodes [ p [ x ] ] . spatialNeighbours . insert
>3459	Identifier	insert
>3460	MemberAccess	_nodes [ p [ x ] ] . spatialNeighbours
>3461	Identifier	spatialNeighbours
>3462	ArrayIndexing	_nodes [ p [ x ] ]
>3463	ArrayIndexing	p [ x ]
>3464	Identifier	x
>3465	Identifier	p
>3466	Identifier	_nodes
>3467	Condition	 
>3468	AndExpression	( p [ x ] >= 0 ) && ( q [ x ] >= 0 )
>3469	RelationalExpression	q [ x ] >= 0
>3470	PrimaryExpression	0
>3471	ArrayIndexing	q [ x ]
>3472	Identifier	x
>3473	Identifier	q
>3474	RelationalExpression	p [ x ] >= 0
>3475	PrimaryExpression	0
>3476	ArrayIndexing	p [ x ]
>3477	Identifier	x
>3478	Identifier	p
>3479	IncDecOp	 
>3480	IncDec	++
>3481	Identifier	x
>3482	Condition	 
>3483	RelationalExpression	x < image . width ( )
>3484	CallExpression	image . width ( )
>3485	ArgumentList	 
>3486	Callee	image . width
>3487	MemberAccess	image . width
>3488	Identifier	width
>3489	Identifier	image
>3490	Identifier	x
>3491	ForInit	 
>3492	IdentifierDeclStatement	unsigned x = 0 ;
>3493	IdentifierDecl	x = 0
>3494	AssignmentExpr	x = 0
>3495	PrimaryExpression	0
>3496	Identifier	x
>3497	Identifier	x
>3498	IdentifierDeclType	unsigned
>3499	ExpressionStatement	 
>3500	RelationalExpression	int > ( y )
>3501	Identifier	y
>3502	Identifier	int
>3503	Statement	 
>3504	Statement	 
>3505	Statement	 
>3506	Statement	 
>3507	Statement	 
>3508	Statement	 
>3509	Statement	 
>3510	Statement	 
>3511	Statement	 
>3512	Statement	 
>3513	Statement	 
>3514	Statement	 
>3515	Statement	 
>3516	Statement	 
>3517	Statement	 
>3518	Statement	 
>3519	Statement	 
>3520	Statement	 
>3521	Statement	 
>3522	ExpressionStatement	 
>3523	RelationalExpression	int > ( y )
>3524	Identifier	y
>3525	Identifier	int
>3526	Statement	 
>3527	Statement	 
>3528	Statement	 
>3529	Statement	 
>3530	Statement	 
>3531	Statement	 
>3532	Statement	 
>3533	Statement	 
>3534	Statement	 
>3535	Statement	 
>3536	Statement	 
>3537	Statement	 
>3538	Statement	 
>3539	Statement	 
>3540	Statement	 
>3541	Statement	 
>3542	Statement	 
>3543	IncDecOp	 
>3544	IncDec	++
>3545	Identifier	y
>3546	Condition	 
>3547	RelationalExpression	y < image . height ( )
>3548	CallExpression	image . height ( )
>3549	ArgumentList	 
>3550	Callee	image . height
>3551	MemberAccess	image . height
>3552	Identifier	height
>3553	Identifier	image
>3554	Identifier	y
>3555	ForInit	 
>3556	IdentifierDeclStatement	unsigned y = 0 ;
>3557	IdentifierDecl	y = 0
>3558	AssignmentExpr	y = 0
>3559	PrimaryExpression	0
>3560	Identifier	y
>3561	Identifier	y
>3562	IdentifierDeclType	unsigned
>3563	IncDecOp	 
>3564	IncDec	++
>3565	Identifier	c
>3566	Condition	 
>3567	RelationalExpression	c < image . segments ( ) . channels ( ) - 1
>3568	AdditiveExpression	image . segments ( ) . channels ( ) - 1
>3569	PrimaryExpression	1
>3570	CallExpression	image . segments ( ) . channels ( )
>3571	ArgumentList	 
>3572	Callee	image . segments ( ) . channels
>3573	MemberAccess	image . segments ( ) . channels
>3574	Identifier	channels
>3575	CallExpression	image . segments ( )
>3576	ArgumentList	 
>3577	Callee	image . segments
>3578	MemberAccess	image . segments
>3579	Identifier	segments
>3580	Identifier	image
>3581	Identifier	c
>3582	ForInit	 
>3583	IdentifierDeclStatement	int c = 0 ;
>3584	IdentifierDecl	c = 0
>3585	AssignmentExpr	c = 0
>3586	PrimaryExpression	0
>3587	Identifier	c
>3588	Identifier	c
>3589	IdentifierDeclType	int
>3590	ForStatement	for ( int c = 0 ; c < image . segments ( ) . channels ( ) ; c ++ )
>3591	CompoundStatement	 
>3592	ForStatement	for ( unsigned y = 0 ; y < image . height ( ) ; y ++ )
>3593	CompoundStatement	 
>3594	ForStatement	for ( unsigned x = 0 ; x < image . width ( ) ; x ++ )
>3595	CompoundStatement	 
>3596	IfStatement	if ( ( x > 0 ) && ( p [ x ] != p [ x - 1 ] ) && ( p [ x ] >= 0 ) && ( p [ x - 1 ] >= 0 ) )
>3597	CompoundStatement	 
>3598	ExpressionStatement	 
>3599	CallExpression	_nodes [ p [ x - 1 ] ] . spatialNeighbours . insert ( p [ x ] )
>3600	ArgumentList	p [ x ]
>3601	Argument	p [ x ]
>3602	ArrayIndexing	p [ x ]
>3603	Identifier	x
>3604	Identifier	p
>3605	Callee	_nodes [ p [ x - 1 ] ] . spatialNeighbours . insert
>3606	MemberAccess	_nodes [ p [ x - 1 ] ] . spatialNeighbours . insert
>3607	Identifier	insert
>3608	MemberAccess	_nodes [ p [ x - 1 ] ] . spatialNeighbours
>3609	Identifier	spatialNeighbours
>3610	ArrayIndexing	_nodes [ p [ x - 1 ] ]
>3611	ArrayIndexing	p [ x - 1 ]
>3612	AdditiveExpression	x - 1
>3613	PrimaryExpression	1
>3614	Identifier	x
>3615	Identifier	p
>3616	Identifier	_nodes
>3617	ExpressionStatement	 
>3618	CallExpression	_nodes [ p [ x ] ] . spatialNeighbours . insert ( p [ x - 1 ] )
>3619	ArgumentList	p [ x - 1 ]
>3620	Argument	p [ x - 1 ]
>3621	ArrayIndexing	p [ x - 1 ]
>3622	AdditiveExpression	x - 1
>3623	PrimaryExpression	1
>3624	Identifier	x
>3625	Identifier	p
>3626	Callee	_nodes [ p [ x ] ] . spatialNeighbours . insert
>3627	MemberAccess	_nodes [ p [ x ] ] . spatialNeighbours . insert
>3628	Identifier	insert
>3629	MemberAccess	_nodes [ p [ x ] ] . spatialNeighbours
>3630	Identifier	spatialNeighbours
>3631	ArrayIndexing	_nodes [ p [ x ] ]
>3632	ArrayIndexing	p [ x ]
>3633	Identifier	x
>3634	Identifier	p
>3635	Identifier	_nodes
>3636	Condition	 
>3637	AndExpression	( x > 0 ) && ( p [ x ] != p [ x - 1 ] ) && ( p [ x ] >= 0 ) && ( p [ x - 1 ] >= 0 )
>3638	AndExpression	( p [ x ] != p [ x - 1 ] ) && ( p [ x ] >= 0 ) && ( p [ x - 1 ] >= 0 )
>3639	AndExpression	( p [ x ] >= 0 ) && ( p [ x - 1 ] >= 0 )
>3640	RelationalExpression	p [ x - 1 ] >= 0
>3641	PrimaryExpression	0
>3642	ArrayIndexing	p [ x - 1 ]
>3643	AdditiveExpression	x - 1
>3644	PrimaryExpression	1
>3645	Identifier	x
>3646	Identifier	p
>3647	RelationalExpression	p [ x ] >= 0
>3648	PrimaryExpression	0
>3649	ArrayIndexing	p [ x ]
>3650	Identifier	x
>3651	Identifier	p
>3652	EqualityExpression	p [ x ] != p [ x - 1 ]
>3653	ArrayIndexing	p [ x - 1 ]
>3654	AdditiveExpression	x - 1
>3655	PrimaryExpression	1
>3656	Identifier	x
>3657	Identifier	p
>3658	ArrayIndexing	p [ x ]
>3659	Identifier	x
>3660	Identifier	p
>3661	RelationalExpression	x > 0
>3662	PrimaryExpression	0
>3663	Identifier	x
>3664	IfStatement	if ( ( p [ x ] != q [ x ] ) && ( p [ x ] >= 0 ) && ( q [ x ] >= 0 ) )
>3665	CompoundStatement	 
>3666	ExpressionStatement	 
>3667	CallExpression	_nodes [ q [ x ] ] . spatialNeighbours . insert ( p [ x ] )
>3668	ArgumentList	p [ x ]
>3669	Argument	p [ x ]
>3670	ArrayIndexing	p [ x ]
>3671	Identifier	x
>3672	Identifier	p
>3673	Callee	_nodes [ q [ x ] ] . spatialNeighbours . insert
>3674	MemberAccess	_nodes [ q [ x ] ] . spatialNeighbours . insert
>3675	Identifier	insert
>3676	MemberAccess	_nodes [ q [ x ] ] . spatialNeighbours
>3677	Identifier	spatialNeighbours
>3678	ArrayIndexing	_nodes [ q [ x ] ]
>3679	ArrayIndexing	q [ x ]
>3680	Identifier	x
>3681	Identifier	q
>3682	Identifier	_nodes
>3683	ExpressionStatement	 
>3684	CallExpression	_nodes [ p [ x ] ] . spatialNeighbours . insert ( q [ x ] )
>3685	ArgumentList	q [ x ]
>3686	Argument	q [ x ]
>3687	ArrayIndexing	q [ x ]
>3688	Identifier	x
>3689	Identifier	q
>3690	Callee	_nodes [ p [ x ] ] . spatialNeighbours . insert
>3691	MemberAccess	_nodes [ p [ x ] ] . spatialNeighbours . insert
>3692	Identifier	insert
>3693	MemberAccess	_nodes [ p [ x ] ] . spatialNeighbours
>3694	Identifier	spatialNeighbours
>3695	ArrayIndexing	_nodes [ p [ x ] ]
>3696	ArrayIndexing	p [ x ]
>3697	Identifier	x
>3698	Identifier	p
>3699	Identifier	_nodes
>3700	Condition	 
>3701	AndExpression	( p [ x ] != q [ x ] ) && ( p [ x ] >= 0 ) && ( q [ x ] >= 0 )
>3702	AndExpression	( p [ x ] >= 0 ) && ( q [ x ] >= 0 )
>3703	RelationalExpression	q [ x ] >= 0
>3704	PrimaryExpression	0
>3705	ArrayIndexing	q [ x ]
>3706	Identifier	x
>3707	Identifier	q
>3708	RelationalExpression	p [ x ] >= 0
>3709	PrimaryExpression	0
>3710	ArrayIndexing	p [ x ]
>3711	Identifier	x
>3712	Identifier	p
>3713	EqualityExpression	p [ x ] != q [ x ]
>3714	ArrayIndexing	q [ x ]
>3715	Identifier	x
>3716	Identifier	q
>3717	ArrayIndexing	p [ x ]
>3718	Identifier	x
>3719	Identifier	p
>3720	IncDecOp	 
>3721	IncDec	++
>3722	Identifier	x
>3723	Condition	 
>3724	RelationalExpression	x < image . width ( )
>3725	CallExpression	image . width ( )
>3726	ArgumentList	 
>3727	Callee	image . width
>3728	MemberAccess	image . width
>3729	Identifier	width
>3730	Identifier	image
>3731	Identifier	x
>3732	ForInit	 
>3733	IdentifierDeclStatement	unsigned x = 0 ;
>3734	IdentifierDecl	x = 0
>3735	AssignmentExpr	x = 0
>3736	PrimaryExpression	0
>3737	Identifier	x
>3738	Identifier	x
>3739	IdentifierDeclType	unsigned
>3740	ExpressionStatement	 
>3741	RelationalExpression	int > ( std 
>3742	CallExpression	std 
>3743	ArgumentList	( int ) y - 1
>3744	Argument	0
>3745	PrimaryExpression	0
>3746	Argument	( int ) y - 1
>3747	AdditiveExpression	( int ) y - 1
>3748	PrimaryExpression	1
>3749	CastExpression	( int ) y
>3750	Identifier	y
>3751	CastTarget	int
>3752	Callee	std 
>3753	Identifier	std 
>3754	Identifier	int
>3755	Statement	 
>3756	Statement	 
>3757	Statement	 
>3758	Statement	 
>3759	Statement	 
>3760	Statement	 
>3761	Statement	 
>3762	Statement	 
>3763	Statement	 
>3764	Statement	 
>3765	Statement	 
>3766	Statement	 
>3767	Statement	 
>3768	Statement	 
>3769	Statement	 
>3770	Statement	 
>3771	Statement	 
>3772	ExpressionStatement	 
>3773	RelationalExpression	int > ( y )
>3774	Identifier	y
>3775	Identifier	int
>3776	Statement	 
>3777	Statement	 
>3778	Statement	 
>3779	Statement	 
>3780	Statement	 
>3781	Statement	 
>3782	Statement	 
>3783	Statement	 
>3784	Statement	 
>3785	Statement	 
>3786	Statement	 
>3787	Statement	 
>3788	Statement	 
>3789	Statement	 
>3790	Statement	 
>3791	Statement	 
>3792	Statement	 
>3793	IncDecOp	 
>3794	IncDec	++
>3795	Identifier	y
>3796	Condition	 
>3797	RelationalExpression	y < image . height ( )
>3798	CallExpression	image . height ( )
>3799	ArgumentList	 
>3800	Callee	image . height
>3801	MemberAccess	image . height
>3802	Identifier	height
>3803	Identifier	image
>3804	Identifier	y
>3805	ForInit	 
>3806	IdentifierDeclStatement	unsigned y = 0 ;
>3807	IdentifierDecl	y = 0
>3808	AssignmentExpr	y = 0
>3809	PrimaryExpression	0
>3810	Identifier	y
>3811	Identifier	y
>3812	IdentifierDeclType	unsigned
>3813	IncDecOp	 
>3814	IncDec	++
>3815	Identifier	c
>3816	Condition	 
>3817	RelationalExpression	c < image . segments ( ) . channels ( )
>3818	CallExpression	image . segments ( ) . channels ( )
>3819	ArgumentList	 
>3820	Callee	image . segments ( ) . channels
>3821	MemberAccess	image . segments ( ) . channels
>3822	Identifier	channels
>3823	CallExpression	image . segments ( )
>3824	ArgumentList	 
>3825	Callee	image . segments
>3826	MemberAccess	image . segments
>3827	Identifier	segments
>3828	Identifier	image
>3829	Identifier	c
>3830	ForInit	 
>3831	IdentifierDeclStatement	int c = 0 ;
>3832	IdentifierDecl	c = 0
>3833	AssignmentExpr	c = 0
>3834	PrimaryExpression	0
>3835	Identifier	c
>3836	Identifier	c
>3837	IdentifierDeclType	int
>3862	FunctionDef	drwnNNGraphImage 
>3863	ParameterList	const drwnNNGraphImageData & image
>3864	Parameter	 
>3865	Identifier	image
>3866	ParameterType	const drwnNNGraphImageData &
>3867	ReturnType	void
>3868	CompoundStatement	 
>3869	IfStatement	if ( nQuadraticFeatures != 0 )
>3870	CompoundStatement	 
>3871	ForStatement	for ( unsigned segId = 0 ; segId < _nodes . size ( ) ; segId ++ )
>3872	CompoundStatement	 
>3873	ExpressionStatement	 
>3874	AssignmentExpr	_nodes [ segId ] . features . segment ( nStartIndex , nQuadraticFeatures ) = _nodes [ segId ] . features \
>3875	CallExpression	_nodes [ segId ] . features . head ( nQuadraticFeatures ) . array ( ) . square ( )
>3876	ArgumentList	 
>3877	Callee	_nodes [ segId ] . features . head ( nQuadraticFeatures ) . array ( ) . square
>3878	MemberAccess	_nodes [ segId ] . features . head ( nQuadraticFeatures ) . array ( ) . square
>3879	Identifier	square
>3880	CallExpression	_nodes [ segId ] . features . head ( nQuadraticFeatures ) . array ( )
>3881	ArgumentList	 
>3882	Callee	_nodes [ segId ] . features . head ( nQuadraticFeatures ) . array
>3883	MemberAccess	_nodes [ segId ] . features . head ( nQuadraticFeatures ) . array
>3884	Identifier	array
>3885	CallExpression	_nodes [ segId ] . features . head ( nQuadraticFeatures )
>3886	ArgumentList	nQuadraticFeatures
>3887	Argument	nQuadraticFeatures
>3888	Identifier	nQuadraticFeatures
>3889	Callee	_nodes [ segId ] . features . head
>3890	MemberAccess	_nodes [ segId ] . features . head
>3891	Identifier	head
>3892	MemberAccess	_nodes [ segId ] . features
>3893	Identifier	features
>3894	ArrayIndexing	_nodes [ segId ]
>3895	Identifier	segId
>3896	Identifier	_nodes
>3897	CallExpression	_nodes [ segId ] . features . segment ( nStartIndex , nQuadraticFeatures )
>3898	ArgumentList	nStartIndex
>3899	Argument	nQuadraticFeatures
>3900	Identifier	nQuadraticFeatures
>3901	Argument	nStartIndex
>3902	Identifier	nStartIndex
>3903	Callee	_nodes [ segId ] . features . segment
>3904	MemberAccess	_nodes [ segId ] . features . segment
>3905	Identifier	segment
>3906	MemberAccess	_nodes [ segId ] . features
>3907	Identifier	features
>3908	ArrayIndexing	_nodes [ segId ]
>3909	Identifier	segId
>3910	Identifier	_nodes
>3911	IncDecOp	 
>3912	IncDec	++
>3913	Identifier	segId
>3914	Condition	 
>3915	RelationalExpression	segId < _nodes . size ( )
>3916	CallExpression	_nodes . size ( )
>3917	ArgumentList	 
>3918	Callee	_nodes . size
>3919	MemberAccess	_nodes . size
>3920	Identifier	size
>3921	Identifier	_nodes
>3922	Identifier	segId
>3923	ForInit	 
>3924	IdentifierDeclStatement	unsigned segId = 0 ;
>3925	IdentifierDecl	segId = 0
>3926	AssignmentExpr	segId = 0
>3927	PrimaryExpression	0
>3928	Identifier	segId
>3929	Identifier	segId
>3930	IdentifierDeclType	unsigned
>3931	IdentifierDeclStatement	 
>3932	IdentifierDecl	nStartIndex = nLocalFeatures + nGridFeatures + nGlobalFeatures
>3933	AssignmentExpr	nStartIndex = nLocalFeatures + nGridFeatures + nGlobalFeatures
>3934	AdditiveExpression	nLocalFeatures + nGridFeatures + nGlobalFeatures
>3935	AdditiveExpression	nGridFeatures + nGlobalFeatures
>3936	Identifier	nGlobalFeatures
>3937	Identifier	nGridFeatures
>3938	Identifier	nLocalFeatures
>3939	Identifier	nStartIndex
>3940	Identifier	nStartIndex
>3941	IdentifierDeclType	const int
>3942	Condition	 
>3943	EqualityExpression	nQuadraticFeatures != 0
>3944	PrimaryExpression	0
>3945	Identifier	nQuadraticFeatures
>3946	IfStatement	if ( nGlobalFeatures != 0 )
>3947	CompoundStatement	 
>3948	ForStatement	for ( unsigned segId = 0 ; segId < _nodes . size ( ) ; segId ++ )
>3949	CompoundStatement	 
>3950	ExpressionStatement	 
>3951	AssignmentExpr	_nodes [ segId ] . features . segment ( nStartIndex , nGlobalFeatures ) = gf
>3952	Identifier	gf
>3953	CallExpression	_nodes [ segId ] . features . segment ( nStartIndex , nGlobalFeatures )
>3954	ArgumentList	nStartIndex
>3955	Argument	nGlobalFeatures
>3956	Identifier	nGlobalFeatures
>3957	Argument	nStartIndex
>3958	Identifier	nStartIndex
>3959	Callee	_nodes [ segId ] . features . segment
>3960	MemberAccess	_nodes [ segId ] . features . segment
>3961	Identifier	segment
>3962	MemberAccess	_nodes [ segId ] . features
>3963	Identifier	features
>3964	ArrayIndexing	_nodes [ segId ]
>3965	Identifier	segId
>3966	Identifier	_nodes
>3967	IncDecOp	 
>3968	IncDec	++
>3969	Identifier	segId
>3970	Condition	 
>3971	RelationalExpression	segId < _nodes . size ( )
>3972	CallExpression	_nodes . size ( )
>3973	ArgumentList	 
>3974	Callee	_nodes . size
>3975	MemberAccess	_nodes . size
>3976	Identifier	size
>3977	Identifier	_nodes
>3978	Identifier	segId
>3979	ForInit	 
>3980	IdentifierDeclStatement	unsigned segId = 0 ;
>3981	IdentifierDecl	segId = 0
>3982	AssignmentExpr	segId = 0
>3983	PrimaryExpression	0
>3984	Identifier	segId
>3985	Identifier	segId
>3986	IdentifierDeclType	unsigned
>3987	IdentifierDeclStatement	 
>3988	IdentifierDecl	nStartIndex = nLocalFeatures + nGridFeatures
>3989	AssignmentExpr	nStartIndex = nLocalFeatures + nGridFeatures
>3990	AdditiveExpression	nLocalFeatures + nGridFeatures
>3991	Identifier	nGridFeatures
>3992	Identifier	nLocalFeatures
>3993	Identifier	nStartIndex
>3994	Identifier	nStartIndex
>3995	IdentifierDeclType	const int
>3996	ExpressionStatement	 
>3997	Statement	 
>3998	Statement	 
>3999	Statement	 
>4000	Statement	 
>4001	Statement	 
>4002	Statement	 
>4003	Statement	 
>4004	Statement	 
>4005	Statement	 
>4006	Statement	 
>4007	Statement	 
>4008	Statement	 
>4009	Statement	 
>4010	Statement	 
>4011	Statement	 
>4012	Statement	 
>4013	Statement	 
>4014	Statement	 
>4015	Statement	 
>4016	Statement	 
>4017	Statement	 
>4018	Statement	 
>4019	Statement	 
>4020	ExpressionStatement	 
>4021	Statement	 
>4022	Statement	 
>4023	Statement	 
>4024	Statement	 
>4025	Statement	 
>4026	Statement	 
>4027	Statement	 
>4028	Statement	 
>4029	Statement	 
>4030	Statement	 
>4031	Statement	 
>4032	Statement	 
>4033	Statement	 
>4034	Statement	 
>4035	Statement	 
>4036	Statement	 
>4037	Statement	 
>4038	Statement	 
>4039	Statement	 
>4040	IdentifierDeclStatement	 
>4041	IdentifierDecl	gf ( nGlobalFeatures )
>4042	Identifier	nGlobalFeatures
>4043	Identifier	gf
>4044	IdentifierDeclType	VectorXf
>4045	Condition	 
>4046	EqualityExpression	nGlobalFeatures != 0
>4047	PrimaryExpression	0
>4048	Identifier	nGlobalFeatures
>4049	IfStatement	if ( nGridFeatures != 0 )
>4050	CompoundStatement	 
>4051	ForStatement	for ( unsigned segId = 0 ; segId < _nodes . size ( ) ; segId ++ )
>4052	CompoundStatement	 
>4053	ExpressionStatement	 
>4054	CallExpression	DRWN_ASSERT ( nStartIndex == nLocalFeatures + nGridFeatures )
>4055	ArgumentList	nStartIndex == nLocalFeatures + nGridFeatures
>4056	Argument	nStartIndex == nLocalFeatures + nGridFeatures
>4057	EqualityExpression	nStartIndex == nLocalFeatures + nGridFeatures
>4058	AdditiveExpression	nLocalFeatures + nGridFeatures
>4059	Identifier	nGridFeatures
>4060	Identifier	nLocalFeatures
>4061	Identifier	nStartIndex
>4062	Callee	DRWN_ASSERT
>4063	Identifier	DRWN_ASSERT
>4064	ExpressionStatement	 
>4065	AssignmentExpr	nStartIndex += nBaseFeatures
>4066	Identifier	nBaseFeatures
>4067	Identifier	nStartIndex
>4068	ExpressionStatement	 
>4069	Statement	 
>4070	Statement	 
>4071	Statement	 
>4072	Statement	 
>4073	Statement	 
>4074	Statement	 
>4075	Statement	 
>4076	Statement	 
>4077	Statement	 
>4078	Statement	 
>4079	Statement	 
>4080	Statement	 
>4081	Statement	 
>4082	Statement	 
>4083	Statement	 
>4084	Statement	 
>4085	Statement	 
>4086	Statement	 
>4087	Statement	 
>4088	Statement	 
>4089	Statement	 
>4090	Statement	 
>4091	Statement	 
>4092	Statement	 
>4093	Statement	 
>4094	Statement	 
>4095	Statement	 
>4096	Statement	 
>4097	Statement	 
>4098	Statement	 
>4099	Statement	 
>4100	Statement	 
>4101	Statement	 
>4102	Statement	 
>4103	Statement	 
>4104	Statement	 
>4105	Statement	 
>4106	Statement	 
>4107	Statement	 
>4108	Statement	 
>4109	Statement	 
>4110	Statement	 
>4111	Statement	 
>4112	Statement	 
>4113	Statement	 
>4114	ExpressionStatement	 
>4115	AssignmentExpr	nStartIndex += nBaseFeatures
>4116	Identifier	nBaseFeatures
>4117	Identifier	nStartIndex
>4118	ExpressionStatement	 
>4119	Statement	 
>4120	Statement	 
>4121	Statement	 
>4122	Statement	 
>4123	Statement	 
>4124	Statement	 
>4125	Statement	 
>4126	Statement	 
>4127	Statement	 
>4128	Statement	 
>4129	Statement	 
>4130	Statement	 
>4131	Statement	 
>4132	Statement	 
>4133	Statement	 
>4134	Statement	 
>4135	Statement	 
>4136	Statement	 
>4137	Statement	 
>4138	Statement	 
>4139	Statement	 
>4140	Statement	 
>4141	Statement	 
>4142	Statement	 
>4143	Statement	 
>4144	Statement	 
>4145	Statement	 
>4146	Statement	 
>4147	Statement	 
>4148	Statement	 
>4149	Statement	 
>4150	Statement	 
>4151	Statement	 
>4152	Statement	 
>4153	Statement	 
>4154	Statement	 
>4155	Statement	 
>4156	Statement	 
>4157	Statement	 
>4158	Statement	 
>4159	Statement	 
>4160	ExpressionStatement	 
>4161	CallExpression	drwnTruncateRect ( r , image . image ( ) )
>4162	ArgumentList	r
>4163	Argument	image . image ( )
>4164	CallExpression	image . image ( )
>4165	ArgumentList	 
>4166	Callee	image . image
>4167	MemberAccess	image . image
>4168	Identifier	image
>4169	Identifier	image
>4170	Argument	r
>4171	Identifier	r
>4172	Callee	drwnTruncateRect
>4173	Identifier	drwnTruncateRect
>4174	ExpressionStatement	 
>4175	AssignmentExpr	r = cv 
>4176	CallExpression	cv 
>4177	ArgumentList	segBox . x - 0.5 * segBox . width
>4178	Argument	2 * segBox . height
>4179	MultiplicativeExpression	2 * segBox . height
>4180	MemberAccess	segBox . height
>4181	Identifier	height
>4182	Identifier	segBox
>4183	PrimaryExpression	2
>4184	Argument	2 * segBox . width
>4185	MultiplicativeExpression	2 * segBox . width
>4186	MemberAccess	segBox . width
>4187	Identifier	width
>4188	Identifier	segBox
>4189	PrimaryExpression	2
>4190	Argument	segBox . y - 0.5 * segBox . height
>4191	AdditiveExpression	segBox . y - 0.5 * segBox . height
>4192	MultiplicativeExpression	0.5 * segBox . height
>4193	MemberAccess	segBox . height
>4194	Identifier	height
>4195	Identifier	segBox
>4196	PrimaryExpression	0.5
>4197	MemberAccess	segBox . y
>4198	Identifier	y
>4199	Identifier	segBox
>4200	Argument	segBox . x - 0.5 * segBox . width
>4201	AdditiveExpression	segBox . x - 0.5 * segBox . width
>4202	MultiplicativeExpression	0.5 * segBox . width
>4203	MemberAccess	segBox . width
>4204	Identifier	width
>4205	Identifier	segBox
>4206	PrimaryExpression	0.5
>4207	MemberAccess	segBox . x
>4208	Identifier	x
>4209	Identifier	segBox
>4210	Callee	cv 
>4211	Identifier	cv 
>4212	Identifier	r
>4213	ExpressionStatement	 
>4214	AssignmentExpr	nStartIndex += nBaseFeatures
>4215	Identifier	nBaseFeatures
>4216	Identifier	nStartIndex
>4217	ExpressionStatement	 
>4218	CallExpression	cwiseSqrt ( )
>4219	ArgumentList	 
>4220	Callee	cwiseSqrt
>4221	Identifier	cwiseSqrt
>4222	Statement	 
>4223	Statement	 
>4224	Statement	 
>4225	Statement	 
>4226	Statement	 
>4227	Statement	 
>4228	Statement	 
>4229	Statement	 
>4230	Statement	 
>4231	Statement	 
>4232	Statement	 
>4233	Statement	 
>4234	Statement	 
>4235	Statement	 
>4236	Statement	 
>4237	Statement	 
>4238	Statement	 
>4239	Statement	 
>4240	Statement	 
>4241	Statement	 
>4242	Statement	 
>4243	Statement	 
>4244	Statement	 
>4245	Statement	 
>4246	Statement	 
>4247	Statement	 
>4248	Statement	 
>4249	Statement	 
>4250	Statement	 
>4251	Statement	 
>4252	Statement	 
>4253	Statement	 
>4254	Statement	 
>4255	Statement	 
>4256	Statement	 
>4257	Statement	 
>4258	Statement	 
>4259	Statement	 
>4260	Statement	 
>4261	Statement	 
>4262	Statement	 
>4263	Statement	 
>4264	ExpressionStatement	 
>4265	AssignmentExpr	nStartIndex += nBaseFeatures
>4266	Identifier	nBaseFeatures
>4267	Identifier	nStartIndex
>4268	ExpressionStatement	 
>4269	Statement	 
>4270	Statement	 
>4271	Statement	 
>4272	Statement	 
>4273	Statement	 
>4274	Statement	 
>4275	Statement	 
>4276	Statement	 
>4277	Statement	 
>4278	Statement	 
>4279	Statement	 
>4280	Statement	 
>4281	Statement	 
>4282	Statement	 
>4283	Statement	 
>4284	Statement	 
>4285	Statement	 
>4286	Statement	 
>4287	Statement	 
>4288	Statement	 
>4289	Statement	 
>4290	Statement	 
>4291	Statement	 
>4292	Statement	 
>4293	Statement	 
>4294	Statement	 
>4295	Statement	 
>4296	Statement	 
>4297	Statement	 
>4298	Statement	 
>4299	Statement	 
>4300	Statement	 
>4301	Statement	 
>4302	Statement	 
>4303	Statement	 
>4304	Statement	 
>4305	Statement	 
>4306	Statement	 
>4307	Statement	 
>4308	Statement	 
>4309	Statement	 
>4310	ExpressionStatement	 
>4311	CallExpression	drwnTruncateRect ( r , image . image ( ) )
>4312	ArgumentList	r
>4313	Argument	image . image ( )
>4314	CallExpression	image . image ( )
>4315	ArgumentList	 
>4316	Callee	image . image
>4317	MemberAccess	image . image
>4318	Identifier	image
>4319	Identifier	image
>4320	Argument	r
>4321	Identifier	r
>4322	Callee	drwnTruncateRect
>4323	Identifier	drwnTruncateRect
>4324	ExpressionStatement	 
>4325	AssignmentExpr	r = cv 
>4326	CallExpression	cv 
>4327	ArgumentList	segBox . x + 0.75 * segBox . width
>4328	Argument	segBox . height
>4329	MemberAccess	segBox . height
>4330	Identifier	height
>4331	Identifier	segBox
>4332	Argument	segBox . width
>4333	MemberAccess	segBox . width
>4334	Identifier	width
>4335	Identifier	segBox
>4336	Argument	segBox . y
>4337	MemberAccess	segBox . y
>4338	Identifier	y
>4339	Identifier	segBox
>4340	Argument	segBox . x + 0.75 * segBox . width
>4341	AdditiveExpression	segBox . x + 0.75 * segBox . width
>4342	MultiplicativeExpression	0.75 * segBox . width
>4343	MemberAccess	segBox . width
>4344	Identifier	width
>4345	Identifier	segBox
>4346	PrimaryExpression	0.75
>4347	MemberAccess	segBox . x
>4348	Identifier	x
>4349	Identifier	segBox
>4350	Callee	cv 
>4351	Identifier	cv 
>4352	Identifier	r
>4353	ExpressionStatement	 
>4354	AssignmentExpr	nStartIndex += nBaseFeatures
>4355	Identifier	nBaseFeatures
>4356	Identifier	nStartIndex
>4357	ExpressionStatement	 
>4358	CallExpression	cwiseSqrt ( )
>4359	ArgumentList	 
>4360	Callee	cwiseSqrt
>4361	Identifier	cwiseSqrt
>4362	Statement	 
>4363	Statement	 
>4364	Statement	 
>4365	Statement	 
>4366	Statement	 
>4367	Statement	 
>4368	Statement	 
>4369	Statement	 
>4370	Statement	 
>4371	Statement	 
>4372	Statement	 
>4373	Statement	 
>4374	Statement	 
>4375	Statement	 
>4376	Statement	 
>4377	Statement	 
>4378	Statement	 
>4379	Statement	 
>4380	Statement	 
>4381	Statement	 
>4382	Statement	 
>4383	Statement	 
>4384	Statement	 
>4385	Statement	 
>4386	Statement	 
>4387	Statement	 
>4388	Statement	 
>4389	Statement	 
>4390	Statement	 
>4391	Statement	 
>4392	Statement	 
>4393	Statement	 
>4394	Statement	 
>4395	Statement	 
>4396	Statement	 
>4397	Statement	 
>4398	Statement	 
>4399	Statement	 
>4400	Statement	 
>4401	Statement	 
>4402	Statement	 
>4403	Statement	 
>4404	ExpressionStatement	 
>4405	AssignmentExpr	nStartIndex += nBaseFeatures
>4406	Identifier	nBaseFeatures
>4407	Identifier	nStartIndex
>4408	ExpressionStatement	 
>4409	Statement	 
>4410	Statement	 
>4411	Statement	 
>4412	Statement	 
>4413	Statement	 
>4414	Statement	 
>4415	Statement	 
>4416	Statement	 
>4417	Statement	 
>4418	Statement	 
>4419	Statement	 
>4420	Statement	 
>4421	Statement	 
>4422	Statement	 
>4423	Statement	 
>4424	Statement	 
>4425	Statement	 
>4426	Statement	 
>4427	Statement	 
>4428	Statement	 
>4429	Statement	 
>4430	Statement	 
>4431	Statement	 
>4432	Statement	 
>4433	Statement	 
>4434	Statement	 
>4435	Statement	 
>4436	Statement	 
>4437	Statement	 
>4438	Statement	 
>4439	Statement	 
>4440	Statement	 
>4441	Statement	 
>4442	Statement	 
>4443	Statement	 
>4444	Statement	 
>4445	Statement	 
>4446	Statement	 
>4447	Statement	 
>4448	Statement	 
>4449	Statement	 
>4450	ExpressionStatement	 
>4451	CallExpression	drwnTruncateRect ( r , image . image ( ) )
>4452	ArgumentList	r
>4453	Argument	image . image ( )
>4454	CallExpression	image . image ( )
>4455	ArgumentList	 
>4456	Callee	image . image
>4457	MemberAccess	image . image
>4458	Identifier	image
>4459	Identifier	image
>4460	Argument	r
>4461	Identifier	r
>4462	Callee	drwnTruncateRect
>4463	Identifier	drwnTruncateRect
>4464	ExpressionStatement	 
>4465	AssignmentExpr	r = cv 
>4466	CallExpression	cv 
>4467	ArgumentList	segBox . x - 0.75 * segBox . width
>4468	Argument	segBox . height
>4469	MemberAccess	segBox . height
>4470	Identifier	height
>4471	Identifier	segBox
>4472	Argument	segBox . width
>4473	MemberAccess	segBox . width
>4474	Identifier	width
>4475	Identifier	segBox
>4476	Argument	segBox . y
>4477	MemberAccess	segBox . y
>4478	Identifier	y
>4479	Identifier	segBox
>4480	Argument	segBox . x - 0.75 * segBox . width
>4481	AdditiveExpression	segBox . x - 0.75 * segBox . width
>4482	MultiplicativeExpression	0.75 * segBox . width
>4483	MemberAccess	segBox . width
>4484	Identifier	width
>4485	Identifier	segBox
>4486	PrimaryExpression	0.75
>4487	MemberAccess	segBox . x
>4488	Identifier	x
>4489	Identifier	segBox
>4490	Callee	cv 
>4491	Identifier	cv 
>4492	Identifier	r
>4493	ExpressionStatement	 
>4494	AssignmentExpr	nStartIndex += nBaseFeatures
>4495	Identifier	nBaseFeatures
>4496	Identifier	nStartIndex
>4497	ExpressionStatement	 
>4498	CallExpression	cwiseSqrt ( )
>4499	ArgumentList	 
>4500	Callee	cwiseSqrt
>4501	Identifier	cwiseSqrt
>4502	Statement	 
>4503	Statement	 
>4504	Statement	 
>4505	Statement	 
>4506	Statement	 
>4507	Statement	 
>4508	Statement	 
>4509	Statement	 
>4510	Statement	 
>4511	Statement	 
>4512	Statement	 
>4513	Statement	 
>4514	Statement	 
>4515	Statement	 
>4516	Statement	 
>4517	Statement	 
>4518	Statement	 
>4519	Statement	 
>4520	Statement	 
>4521	Statement	 
>4522	Statement	 
>4523	Statement	 
>4524	Statement	 
>4525	Statement	 
>4526	Statement	 
>4527	Statement	 
>4528	Statement	 
>4529	Statement	 
>4530	Statement	 
>4531	Statement	 
>4532	Statement	 
>4533	Statement	 
>4534	Statement	 
>4535	Statement	 
>4536	Statement	 
>4537	Statement	 
>4538	Statement	 
>4539	Statement	 
>4540	Statement	 
>4541	Statement	 
>4542	Statement	 
>4543	Statement	 
>4544	ExpressionStatement	 
>4545	AssignmentExpr	nStartIndex += nBaseFeatures
>4546	Identifier	nBaseFeatures
>4547	Identifier	nStartIndex
>4548	ExpressionStatement	 
>4549	Statement	 
>4550	Statement	 
>4551	Statement	 
>4552	Statement	 
>4553	Statement	 
>4554	Statement	 
>4555	Statement	 
>4556	Statement	 
>4557	Statement	 
>4558	Statement	 
>4559	Statement	 
>4560	Statement	 
>4561	Statement	 
>4562	Statement	 
>4563	Statement	 
>4564	Statement	 
>4565	Statement	 
>4566	Statement	 
>4567	Statement	 
>4568	Statement	 
>4569	Statement	 
>4570	Statement	 
>4571	Statement	 
>4572	Statement	 
>4573	Statement	 
>4574	Statement	 
>4575	Statement	 
>4576	Statement	 
>4577	Statement	 
>4578	Statement	 
>4579	Statement	 
>4580	Statement	 
>4581	Statement	 
>4582	Statement	 
>4583	Statement	 
>4584	Statement	 
>4585	Statement	 
>4586	Statement	 
>4587	Statement	 
>4588	Statement	 
>4589	Statement	 
>4590	ExpressionStatement	 
>4591	CallExpression	drwnTruncateRect ( r , image . image ( ) )
>4592	ArgumentList	r
>4593	Argument	image . image ( )
>4594	CallExpression	image . image ( )
>4595	ArgumentList	 
>4596	Callee	image . image
>4597	MemberAccess	image . image
>4598	Identifier	image
>4599	Identifier	image
>4600	Argument	r
>4601	Identifier	r
>4602	Callee	drwnTruncateRect
>4603	Identifier	drwnTruncateRect
>4604	ExpressionStatement	 
>4605	AssignmentExpr	r = cv 
>4606	CallExpression	cv 
>4607	ArgumentList	segBox . x
>4608	Argument	segBox . height
>4609	MemberAccess	segBox . height
>4610	Identifier	height
>4611	Identifier	segBox
>4612	Argument	segBox . width
>4613	MemberAccess	segBox . width
>4614	Identifier	width
>4615	Identifier	segBox
>4616	Argument	segBox . y + 0.75 * segBox . height
>4617	AdditiveExpression	segBox . y + 0.75 * segBox . height
>4618	MultiplicativeExpression	0.75 * segBox . height
>4619	MemberAccess	segBox . height
>4620	Identifier	height
>4621	Identifier	segBox
>4622	PrimaryExpression	0.75
>4623	MemberAccess	segBox . y
>4624	Identifier	y
>4625	Identifier	segBox
>4626	Argument	segBox . x
>4627	MemberAccess	segBox . x
>4628	Identifier	x
>4629	Identifier	segBox
>4630	Callee	cv 
>4631	Identifier	cv 
>4632	Identifier	r
>4633	ExpressionStatement	 
>4634	AssignmentExpr	nStartIndex += nBaseFeatures
>4635	Identifier	nBaseFeatures
>4636	Identifier	nStartIndex
>4637	ExpressionStatement	 
>4638	CallExpression	cwiseSqrt ( )
>4639	ArgumentList	 
>4640	Callee	cwiseSqrt
>4641	Identifier	cwiseSqrt
>4642	Statement	 
>4643	Statement	 
>4644	Statement	 
>4645	Statement	 
>4646	Statement	 
>4647	Statement	 
>4648	Statement	 
>4649	Statement	 
>4650	Statement	 
>4651	Statement	 
>4652	Statement	 
>4653	Statement	 
>4654	Statement	 
>4655	Statement	 
>4656	Statement	 
>4657	Statement	 
>4658	Statement	 
>4659	Statement	 
>4660	Statement	 
>4661	Statement	 
>4662	Statement	 
>4663	Statement	 
>4664	Statement	 
>4665	Statement	 
>4666	Statement	 
>4667	Statement	 
>4668	Statement	 
>4669	Statement	 
>4670	Statement	 
>4671	Statement	 
>4672	Statement	 
>4673	Statement	 
>4674	Statement	 
>4675	Statement	 
>4676	Statement	 
>4677	Statement	 
>4678	Statement	 
>4679	Statement	 
>4680	Statement	 
>4681	Statement	 
>4682	Statement	 
>4683	Statement	 
>4684	ExpressionStatement	 
>4685	AssignmentExpr	nStartIndex += nBaseFeatures
>4686	Identifier	nBaseFeatures
>4687	Identifier	nStartIndex
>4688	ExpressionStatement	 
>4689	Statement	 
>4690	Statement	 
>4691	Statement	 
>4692	Statement	 
>4693	Statement	 
>4694	Statement	 
>4695	Statement	 
>4696	Statement	 
>4697	Statement	 
>4698	Statement	 
>4699	Statement	 
>4700	Statement	 
>4701	Statement	 
>4702	Statement	 
>4703	Statement	 
>4704	Statement	 
>4705	Statement	 
>4706	Statement	 
>4707	Statement	 
>4708	Statement	 
>4709	Statement	 
>4710	Statement	 
>4711	Statement	 
>4712	Statement	 
>4713	Statement	 
>4714	Statement	 
>4715	Statement	 
>4716	Statement	 
>4717	Statement	 
>4718	Statement	 
>4719	Statement	 
>4720	Statement	 
>4721	Statement	 
>4722	Statement	 
>4723	Statement	 
>4724	Statement	 
>4725	Statement	 
>4726	Statement	 
>4727	Statement	 
>4728	Statement	 
>4729	Statement	 
>4730	ExpressionStatement	 
>4731	CallExpression	drwnTruncateRect ( r , image . image ( ) )
>4732	ArgumentList	r
>4733	Argument	image . image ( )
>4734	CallExpression	image . image ( )
>4735	ArgumentList	 
>4736	Callee	image . image
>4737	MemberAccess	image . image
>4738	Identifier	image
>4739	Identifier	image
>4740	Argument	r
>4741	Identifier	r
>4742	Callee	drwnTruncateRect
>4743	Identifier	drwnTruncateRect
>4744	IdentifierDeclStatement	 
>4745	IdentifierDecl	r = cv 
>4746	AssignmentExpr	r = cv 
>4747	CallExpression	cv 
>4748	ArgumentList	segBox . x
>4749	Argument	segBox . height
>4750	MemberAccess	segBox . height
>4751	Identifier	height
>4752	Identifier	segBox
>4753	Argument	segBox . width
>4754	MemberAccess	segBox . width
>4755	Identifier	width
>4756	Identifier	segBox
>4757	Argument	segBox . y - 0.75 * segBox . height
>4758	AdditiveExpression	segBox . y - 0.75 * segBox . height
>4759	MultiplicativeExpression	0.75 * segBox . height
>4760	MemberAccess	segBox . height
>4761	Identifier	height
>4762	Identifier	segBox
>4763	PrimaryExpression	0.75
>4764	MemberAccess	segBox . y
>4765	Identifier	y
>4766	Identifier	segBox
>4767	Argument	segBox . x
>4768	MemberAccess	segBox . x
>4769	Identifier	x
>4770	Identifier	segBox
>4771	Callee	cv 
>4772	Identifier	cv 
>4773	Identifier	r
>4774	Identifier	r
>4775	IdentifierDeclType	cv 
>4776	IdentifierDeclStatement	 
>4777	IdentifierDecl	nStartIndex = nLocalFeatures
>4778	AssignmentExpr	nStartIndex = nLocalFeatures
>4779	Identifier	nLocalFeatures
>4780	Identifier	nLocalFeatures
>4781	Identifier	nStartIndex
>4782	IdentifierDeclType	int
>4783	IdentifierDeclStatement	 
>4784	IdentifierDecl	segBox = image . segments ( ) . boundingBox ( segId )
>4785	AssignmentExpr	segBox = image . segments ( ) . boundingBox ( segId )
>4786	CallExpression	image . segments ( ) . boundingBox ( segId )
>4787	ArgumentList	segId
>4788	Argument	segId
>4789	Identifier	segId
>4790	Callee	image . segments ( ) . boundingBox
>4791	MemberAccess	image . segments ( ) . boundingBox
>4792	Identifier	boundingBox
>4793	CallExpression	image . segments ( )
>4794	ArgumentList	 
>4795	Callee	image . segments
>4796	MemberAccess	image . segments
>4797	Identifier	segments
>4798	Identifier	image
>4799	Identifier	segBox
>4800	Identifier	segBox
>4801	IdentifierDeclType	const cv 
>4802	IncDecOp	 
>4803	IncDec	++
>4804	Identifier	segId
>4805	Condition	 
>4806	RelationalExpression	segId < _nodes . size ( )
>4807	CallExpression	_nodes . size ( )
>4808	ArgumentList	 
>4809	Callee	_nodes . size
>4810	MemberAccess	_nodes . size
>4811	Identifier	size
>4812	Identifier	_nodes
>4813	Identifier	segId
>4814	ForInit	 
>4815	IdentifierDeclStatement	unsigned segId = 0 ;
>4816	IdentifierDecl	segId = 0
>4817	AssignmentExpr	segId = 0
>4818	PrimaryExpression	0
>4819	Identifier	segId
>4820	Identifier	segId
>4821	IdentifierDeclType	unsigned
>4822	Condition	 
>4823	EqualityExpression	nGridFeatures != 0
>4824	PrimaryExpression	0
>4825	Identifier	nGridFeatures
>4826	IfStatement	if ( ( nGridFeatures != 0 ) || ( nGlobalFeatures != 0 ) )
>4827	CompoundStatement	 
>4828	ExpressionStatement	 
>4829	CallExpression	filterbank . addResponseImages ( responses )
>4830	ArgumentList	responses
>4831	Argument	responses
>4832	Identifier	responses
>4833	Callee	filterbank . addResponseImages
>4834	MemberAccess	filterbank . addResponseImages
>4835	Identifier	addResponseImages
>4836	Identifier	filterbank
>4837	Condition	 
>4838	OrExpression	( nGridFeatures != 0 ) || ( nGlobalFeatures != 0 )
>4839	EqualityExpression	nGlobalFeatures != 0
>4840	PrimaryExpression	0
>4841	Identifier	nGlobalFeatures
>4842	EqualityExpression	nGridFeatures != 0
>4843	PrimaryExpression	0
>4844	Identifier	nGridFeatures
>4845	IdentifierDeclStatement	 
>4846	IdentifierDecl	filterbank
>4847	Identifier	filterbank
>4848	IdentifierDeclType	drwnFilterBankResponse
>4849	ForStatement	for ( unsigned segId = 0 ; segId < _nodes . size ( ) ; segId ++ )
>4850	CompoundStatement	 
>4851	ExpressionStatement	 
>4852	AssignmentExpr	_nodes [ segId ] . features ( 2 * nBaseFeatures + 5 ) = ( float ) image . segments ( ) . pixels ( segId ) / ( \
>4853	MultiplicativeExpression	( float ) image . segments ( ) . pixels ( segId ) / ( float ) ( image . width ( ) * image . height ( ) )
>4854	CastExpression	( float ) ( image . width ( ) * image . height ( ) )
>4855	MultiplicativeExpression	image . width ( ) * image . height ( )
>4856	CallExpression	image . height ( )
>4857	ArgumentList	 
>4858	Callee	image . height
>4859	MemberAccess	image . height
>4860	Identifier	height
>4861	Identifier	image
>4862	CallExpression	image . width ( )
>4863	ArgumentList	 
>4864	Callee	image . width
>4865	MemberAccess	image . width
>4866	Identifier	width
>4867	Identifier	image
>4868	CastTarget	float
>4869	CastExpression	( float ) image . segments ( ) . pixels ( segId )
>4870	CallExpression	image . segments ( ) . pixels ( segId )
>4871	ArgumentList	segId
>4872	Argument	segId
>4873	Identifier	segId
>4874	Callee	image . segments ( ) . pixels
>4875	MemberAccess	image . segments ( ) . pixels
>4876	Identifier	pixels
>4877	CallExpression	image . segments ( )
>4878	ArgumentList	 
>4879	Callee	image . segments
>4880	MemberAccess	image . segments
>4881	Identifier	segments
>4882	Identifier	image
>4883	CastTarget	float
>4884	CallExpression	_nodes [ segId ] . features ( 2 * nBaseFeatures + 5 )
>4885	ArgumentList	2 * nBaseFeatures + 5
>4886	Argument	2 * nBaseFeatures + 5
>4887	AdditiveExpression	2 * nBaseFeatures + 5
>4888	PrimaryExpression	5
>4889	MultiplicativeExpression	2 * nBaseFeatures
>4890	Identifier	nBaseFeatures
>4891	PrimaryExpression	2
>4892	Callee	_nodes [ segId ] . features
>4893	MemberAccess	_nodes [ segId ] . features
>4894	Identifier	features
>4895	ArrayIndexing	_nodes [ segId ]
>4896	Identifier	segId
>4897	Identifier	_nodes
>4898	ExpressionStatement	 
>4899	AssignmentExpr	_nodes [ segId ] . features ( 2 * nBaseFeatures + 4 ) = ( float ) segBox . height / ( float ) image . \
>4900	MultiplicativeExpression	( float ) segBox . height / ( float ) image . height ( )
>4901	CastExpression	( float ) image . height ( )
>4902	CallExpression	image . height ( )
>4903	ArgumentList	 
>4904	Callee	image . height
>4905	MemberAccess	image . height
>4906	Identifier	height
>4907	Identifier	image
>4908	CastTarget	float
>4909	CastExpression	( float ) segBox . height
>4910	MemberAccess	segBox . height
>4911	Identifier	height
>4912	Identifier	segBox
>4913	CastTarget	float
>4914	CallExpression	_nodes [ segId ] . features ( 2 * nBaseFeatures + 4 )
>4915	ArgumentList	2 * nBaseFeatures + 4
>4916	Argument	2 * nBaseFeatures + 4
>4917	AdditiveExpression	2 * nBaseFeatures + 4
>4918	PrimaryExpression	4
>4919	MultiplicativeExpression	2 * nBaseFeatures
>4920	Identifier	nBaseFeatures
>4921	PrimaryExpression	2
>4922	Callee	_nodes [ segId ] . features
>4923	MemberAccess	_nodes [ segId ] . features
>4924	Identifier	features
>4925	ArrayIndexing	_nodes [ segId ]
>4926	Identifier	segId
>4927	Identifier	_nodes
>4928	ExpressionStatement	 
>4929	AssignmentExpr	_nodes [ segId ] . features ( 2 * nBaseFeatures + 3 ) = ( float ) segBox . width / ( float ) image . \
>4930	MultiplicativeExpression	( float ) segBox . width / ( float ) image . width ( )
>4931	CastExpression	( float ) image . width ( )
>4932	CallExpression	image . width ( )
>4933	ArgumentList	 
>4934	Callee	image . width
>4935	MemberAccess	image . width
>4936	Identifier	width
>4937	Identifier	image
>4938	CastTarget	float
>4939	CastExpression	( float ) segBox . width
>4940	MemberAccess	segBox . width
>4941	Identifier	width
>4942	Identifier	segBox
>4943	CastTarget	float
>4944	CallExpression	_nodes [ segId ] . features ( 2 * nBaseFeatures + 3 )
>4945	ArgumentList	2 * nBaseFeatures + 3
>4946	Argument	2 * nBaseFeatures + 3
>4947	AdditiveExpression	2 * nBaseFeatures + 3
>4948	PrimaryExpression	3
>4949	MultiplicativeExpression	2 * nBaseFeatures
>4950	Identifier	nBaseFeatures
>4951	PrimaryExpression	2
>4952	Callee	_nodes [ segId ] . features
>4953	MemberAccess	_nodes [ segId ] . features
>4954	Identifier	features
>4955	ArrayIndexing	_nodes [ segId ]
>4956	Identifier	segId
>4957	Identifier	_nodes
>4958	IdentifierDeclStatement	 
>4959	IdentifierDecl	segBox = image . segments ( ) . boundingBox ( segId )
>4960	AssignmentExpr	segBox = image . segments ( ) . boundingBox ( segId )
>4961	CallExpression	image . segments ( ) . boundingBox ( segId )
>4962	ArgumentList	segId
>4963	Argument	segId
>4964	Identifier	segId
>4965	Callee	image . segments ( ) . boundingBox
>4966	MemberAccess	image . segments ( ) . boundingBox
>4967	Identifier	boundingBox
>4968	CallExpression	image . segments ( )
>4969	ArgumentList	 
>4970	Callee	image . segments
>4971	MemberAccess	image . segments
>4972	Identifier	segments
>4973	Identifier	image
>4974	Identifier	segBox
>4975	Identifier	segBox
>4976	IdentifierDeclType	const cv 
>4977	ExpressionStatement	 
>4978	AssignmentExpr	_nodes [ segId ] . features ( 2 * nBaseFeatures + 2 ) = ( float ) drwn 
>4979	CastExpression	( float ) drwn 
>4980	CallExpression	drwn 
>4981	ArgumentList	qcolour [ 3 * segId + 2 ]
>4982	Argument	qcolour [ 3 * segId + 2 ]
>4983	ArrayIndexing	qcolour [ 3 * segId + 2 ]
>4984	AdditiveExpression	3 * segId + 2
>4985	PrimaryExpression	2
>4986	MultiplicativeExpression	3 * segId
>4987	Identifier	segId
>4988	PrimaryExpression	3
>4989	Identifier	qcolour
>4990	Callee	drwn 
>4991	Identifier	drwn 
>4992	CastTarget	float
>4993	CallExpression	_nodes [ segId ] . features ( 2 * nBaseFeatures + 2 )
>4994	ArgumentList	2 * nBaseFeatures + 2
>4995	Argument	2 * nBaseFeatures + 2
>4996	AdditiveExpression	2 * nBaseFeatures + 2
>4997	PrimaryExpression	2
>4998	MultiplicativeExpression	2 * nBaseFeatures
>4999	Identifier	nBaseFeatures
>5000	PrimaryExpression	2
>5001	Callee	_nodes [ segId ] . features
>5002	MemberAccess	_nodes [ segId ] . features
>5003	Identifier	features
>5004	ArrayIndexing	_nodes [ segId ]
>5005	Identifier	segId
>5006	Identifier	_nodes
>5007	ExpressionStatement	 
>5008	AssignmentExpr	_nodes [ segId ] . features ( 2 * nBaseFeatures + 1 ) = ( float ) drwn 
>5009	CastExpression	( float ) drwn 
>5010	CallExpression	drwn 
>5011	ArgumentList	qcolour [ 3 * segId + 1 ]
>5012	Argument	qcolour [ 3 * segId + 1 ]
>5013	ArrayIndexing	qcolour [ 3 * segId + 1 ]
>5014	AdditiveExpression	3 * segId + 1
>5015	PrimaryExpression	1
>5016	MultiplicativeExpression	3 * segId
>5017	Identifier	segId
>5018	PrimaryExpression	3
>5019	Identifier	qcolour
>5020	Callee	drwn 
>5021	Identifier	drwn 
>5022	CastTarget	float
>5023	CallExpression	_nodes [ segId ] . features ( 2 * nBaseFeatures + 1 )
>5024	ArgumentList	2 * nBaseFeatures + 1
>5025	Argument	2 * nBaseFeatures + 1
>5026	AdditiveExpression	2 * nBaseFeatures + 1
>5027	PrimaryExpression	1
>5028	MultiplicativeExpression	2 * nBaseFeatures
>5029	Identifier	nBaseFeatures
>5030	PrimaryExpression	2
>5031	Callee	_nodes [ segId ] . features
>5032	MemberAccess	_nodes [ segId ] . features
>5033	Identifier	features
>5034	ArrayIndexing	_nodes [ segId ]
>5035	Identifier	segId
>5036	Identifier	_nodes
>5037	ExpressionStatement	 
>5038	AssignmentExpr	_nodes [ segId ] . features ( 2 * nBaseFeatures ) = ( float ) drwn 
>5039	CastExpression	( float ) drwn 
>5040	CallExpression	drwn 
>5041	ArgumentList	qcolour [ 3 * segId ]
>5042	Argument	qcolour [ 3 * segId ]
>5043	ArrayIndexing	qcolour [ 3 * segId ]
>5044	MultiplicativeExpression	3 * segId
>5045	Identifier	segId
>5046	PrimaryExpression	3
>5047	Identifier	qcolour
>5048	Callee	drwn 
>5049	Identifier	drwn 
>5050	CastTarget	float
>5051	CallExpression	_nodes [ segId ] . features ( 2 * nBaseFeatures )
>5052	ArgumentList	2 * nBaseFeatures
>5053	Argument	2 * nBaseFeatures
>5054	MultiplicativeExpression	2 * nBaseFeatures
>5055	Identifier	nBaseFeatures
>5056	PrimaryExpression	2
>5057	Callee	_nodes [ segId ] . features
>5058	MemberAccess	_nodes [ segId ] . features
>5059	Identifier	features
>5060	ArrayIndexing	_nodes [ segId ]
>5061	Identifier	segId
>5062	Identifier	_nodes
>5063	ForStatement	for ( int i = 0 ; i < nBaseFeatures ; i ++ )
>5064	CompoundStatement	 
>5065	ExpressionStatement	 
>5066	AssignmentExpr	_nodes [ segId ] . features ( nBaseFeatures + i ) = sqrt ( std 
>5067	CallExpression	sqrt ( std 
>5068	ArgumentList	std 
>5069	Argument	std 
>5070	CallExpression	std 
>5071	ArgumentList	_nodes [ segId ] . features ( nBaseFeatures + i ) / ( float ) image . segments ( ) . pixels ( segId ) - _nodes [ \
>5072	Argument	0.0f
>5073	PrimaryExpression	0.0f
>5074	Argument	_nodes [ segId ] . features ( nBaseFeatures + i ) / ( float ) image . segments ( ) . pixels ( segId ) - _nodes [ \
>5075	AdditiveExpression	_nodes [ segId ] . features ( nBaseFeatures + i ) / ( float ) image . segments ( ) . pixels ( segId ) \
>5076	MultiplicativeExpression	_nodes [ segId ] . features ( i ) * _nodes [ segId ] . features ( i )
>5077	CallExpression	_nodes [ segId ] . features ( i )
>5078	ArgumentList	i
>5079	Argument	i
>5080	Identifier	i
>5081	Callee	_nodes [ segId ] . features
>5082	MemberAccess	_nodes [ segId ] . features
>5083	Identifier	features
>5084	ArrayIndexing	_nodes [ segId ]
>5085	Identifier	segId
>5086	Identifier	_nodes
>5087	CallExpression	_nodes [ segId ] . features ( i )
>5088	ArgumentList	i
>5089	Argument	i
>5090	Identifier	i
>5091	Callee	_nodes [ segId ] . features
>5092	MemberAccess	_nodes [ segId ] . features
>5093	Identifier	features
>5094	ArrayIndexing	_nodes [ segId ]
>5095	Identifier	segId
>5096	Identifier	_nodes
>5097	MultiplicativeExpression	_nodes [ segId ] . features ( nBaseFeatures + i ) / ( float ) image . segments ( ) . pixels ( segId )
>5098	CastExpression	( float ) image . segments ( ) . pixels ( segId )
>5099	CallExpression	image . segments ( ) . pixels ( segId )
>5100	ArgumentList	segId
>5101	Argument	segId
>5102	Identifier	segId
>5103	Callee	image . segments ( ) . pixels
>5104	MemberAccess	image . segments ( ) . pixels
>5105	Identifier	pixels
>5106	CallExpression	image . segments ( )
>5107	ArgumentList	 
>5108	Callee	image . segments
>5109	MemberAccess	image . segments
>5110	Identifier	segments
>5111	Identifier	image
>5112	CastTarget	float
>5113	CallExpression	_nodes [ segId ] . features ( nBaseFeatures + i )
>5114	ArgumentList	nBaseFeatures + i
>5115	Argument	nBaseFeatures + i
>5116	AdditiveExpression	nBaseFeatures + i
>5117	Identifier	i
>5118	Identifier	nBaseFeatures
>5119	Callee	_nodes [ segId ] . features
>5120	MemberAccess	_nodes [ segId ] . features
>5121	Identifier	features
>5122	ArrayIndexing	_nodes [ segId ]
>5123	Identifier	segId
>5124	Identifier	_nodes
>5125	Callee	std 
>5126	Identifier	std 
>5127	Callee	sqrt
>5128	Identifier	sqrt
>5129	CallExpression	_nodes [ segId ] . features ( nBaseFeatures + i )
>5130	ArgumentList	nBaseFeatures + i
>5131	Argument	nBaseFeatures + i
>5132	AdditiveExpression	nBaseFeatures + i
>5133	Identifier	i
>5134	Identifier	nBaseFeatures
>5135	Callee	_nodes [ segId ] . features
>5136	MemberAccess	_nodes [ segId ] . features
>5137	Identifier	features
>5138	ArrayIndexing	_nodes [ segId ]
>5139	Identifier	segId
>5140	Identifier	_nodes
>5141	IncDecOp	 
>5142	IncDec	++
>5143	Identifier	i
>5144	Condition	 
>5145	RelationalExpression	i < nBaseFeatures
>5146	Identifier	nBaseFeatures
>5147	Identifier	i
>5148	ForInit	 
>5149	IdentifierDeclStatement	int i = 0 ;
>5150	IdentifierDecl	i = 0
>5151	AssignmentExpr	i = 0
>5152	PrimaryExpression	0
>5153	Identifier	i
>5154	Identifier	i
>5155	IdentifierDeclType	int
>5156	ExpressionStatement	 
>5157	AssignmentExpr	_nodes [ segId ] . features . head ( nBaseFeatures ) /= ( float ) image . segments ( ) . pixels ( segId )
>5158	CastExpression	( float ) image . segments ( ) . pixels ( segId )
>5159	CallExpression	image . segments ( ) . pixels ( segId )
>5160	ArgumentList	segId
>5161	Argument	segId
>5162	Identifier	segId
>5163	Callee	image . segments ( ) . pixels
>5164	MemberAccess	image . segments ( ) . pixels
>5165	Identifier	pixels
>5166	CallExpression	image . segments ( )
>5167	ArgumentList	 
>5168	Callee	image . segments
>5169	MemberAccess	image . segments
>5170	Identifier	segments
>5171	Identifier	image
>5172	CastTarget	float
>5173	CallExpression	_nodes [ segId ] . features . head ( nBaseFeatures )
>5174	ArgumentList	nBaseFeatures
>5175	Argument	nBaseFeatures
>5176	Identifier	nBaseFeatures
>5177	Callee	_nodes [ segId ] . features . head
>5178	MemberAccess	_nodes [ segId ] . features . head
>5179	Identifier	head
>5180	MemberAccess	_nodes [ segId ] . features
>5181	Identifier	features
>5182	ArrayIndexing	_nodes [ segId ]
>5183	Identifier	segId
>5184	Identifier	_nodes
>5185	IncDecOp	 
>5186	IncDec	++
>5187	Identifier	segId
>5188	Condition	 
>5189	RelationalExpression	segId < _nodes . size ( )
>5190	CallExpression	_nodes . size ( )
>5191	ArgumentList	 
>5192	Callee	_nodes . size
>5193	MemberAccess	_nodes . size
>5194	Identifier	size
>5195	Identifier	_nodes
>5196	Identifier	segId
>5197	ForInit	 
>5198	IdentifierDeclStatement	unsigned segId = 0 ;
>5199	IdentifierDecl	segId = 0
>5200	AssignmentExpr	segId = 0
>5201	PrimaryExpression	0
>5202	Identifier	segId
>5203	Identifier	segId
>5204	IdentifierDeclType	unsigned
>5205	ForStatement	for ( unsigned y = 0 ; y < image . height ( ) ; y ++ )
>5206	CompoundStatement	 
>5207	ForStatement	for ( unsigned x = 0 ; x < image . width ( ) ; x ++ )
>5208	CompoundStatement	 
>5209	ForStatement	for ( int c = 0 ; c < image . segments ( ) . channels ( ) ; c ++ )
>5210	CompoundStatement	 
>5211	ForStatement	for ( int i = 0 ; i < nBaseFeatures ; i ++ )
>5212	CompoundStatement	 
>5213	ExpressionStatement	 
>5214	AssignmentExpr	_nodes [ segId ] . features [ nBaseFeatures + i ] += p * p
>5215	MultiplicativeExpression	p * p
>5216	Identifier	p
>5217	Identifier	p
>5218	ArrayIndexing	_nodes [ segId ] . features [ nBaseFeatures + i ]
>5219	AdditiveExpression	nBaseFeatures + i
>5220	Identifier	i
>5221	Identifier	nBaseFeatures
>5222	MemberAccess	_nodes [ segId ] . features
>5223	Identifier	features
>5224	ArrayIndexing	_nodes [ segId ]
>5225	Identifier	segId
>5226	Identifier	_nodes
>5227	ExpressionStatement	 
>5228	AssignmentExpr	_nodes [ segId ] . features [ i ] += p
>5229	Identifier	p
>5230	ArrayIndexing	_nodes [ segId ] . features [ i ]
>5231	Identifier	i
>5232	MemberAccess	_nodes [ segId ] . features
>5233	Identifier	features
>5234	ArrayIndexing	_nodes [ segId ]
>5235	Identifier	segId
>5236	Identifier	_nodes
>5237	IdentifierDeclStatement	 
>5238	IdentifierDecl	p = responses [ i ] . at < float > ( y , x )
>5239	AssignmentExpr	p = responses [ i ] . at < float > ( y , x )
>5240	RelationalExpression	responses [ i ] . at < float > ( y , x )
>5241	RelationalExpression	float > ( y , x )
>5242	Expression	y , x
>5243	Identifier	x
>5244	Identifier	y
>5245	Identifier	float
>5246	MemberAccess	responses [ i ] . at
>5247	Identifier	at
>5248	ArrayIndexing	responses [ i ]
>5249	Identifier	i
>5250	Identifier	responses
>5251	Identifier	p
>5252	Identifier	p
>5253	IdentifierDeclType	const float
>5254	IncDecOp	 
>5255	IncDec	++
>5256	Identifier	i
>5257	Condition	 
>5258	RelationalExpression	i < nBaseFeatures
>5259	Identifier	nBaseFeatures
>5260	Identifier	i
>5261	ForInit	 
>5262	IdentifierDeclStatement	int i = 0 ;
>5263	IdentifierDecl	i = 0
>5264	AssignmentExpr	i = 0
>5265	PrimaryExpression	0
>5266	Identifier	i
>5267	Identifier	i
>5268	IdentifierDeclType	int
>5269	IfStatement	if ( segId < 0 )
>5270	ContinueStatement	 
>5271	Condition	 
>5272	RelationalExpression	segId < 0
>5273	PrimaryExpression	0
>5274	Identifier	segId
>5275	IdentifierDeclStatement	 
>5276	IdentifierDecl	segId = image . segments ( ) [ c ] . at < int > ( y , x )
>5277	AssignmentExpr	segId = image . segments ( ) [ c ] . at < int > ( y , x )
>5278	RelationalExpression	image . segments ( ) [ c ] . at < int > ( y , x )
>5279	RelationalExpression	int > ( y , x )
>5280	Expression	y , x
>5281	Identifier	x
>5282	Identifier	y
>5283	Identifier	int
>5284	MemberAccess	image . segments ( ) [ c ] . at
>5285	Identifier	at
>5286	ArrayIndexing	image . segments ( ) [ c ]
>5287	Identifier	c
>5288	CallExpression	image . segments ( )
>5289	ArgumentList	 
>5290	Callee	image . segments
>5291	MemberAccess	image . segments
>5292	Identifier	segments
>5293	Identifier	image
>5294	Identifier	segId
>5295	Identifier	segId
>5296	IdentifierDeclType	const int
>5297	IncDecOp	 
>5298	IncDec	++
>5299	Identifier	c
>5300	Condition	 
>5301	RelationalExpression	c < image . segments ( ) . channels ( )
>5302	CallExpression	image . segments ( ) . channels ( )
>5303	ArgumentList	 
>5304	Callee	image . segments ( ) . channels
>5305	MemberAccess	image . segments ( ) . channels
>5306	Identifier	channels
>5307	CallExpression	image . segments ( )
>5308	ArgumentList	 
>5309	Callee	image . segments
>5310	MemberAccess	image . segments
>5311	Identifier	segments
>5312	Identifier	image
>5313	Identifier	c
>5314	ForInit	 
>5315	IdentifierDeclStatement	int c = 0 ;
>5316	IdentifierDecl	c = 0
>5317	AssignmentExpr	c = 0
>5318	PrimaryExpression	0
>5319	Identifier	c
>5320	Identifier	c
>5321	IdentifierDeclType	int
>5322	IncDecOp	 
>5323	IncDec	++
>5324	Identifier	x
>5325	Condition	 
>5326	RelationalExpression	x < image . width ( )
>5327	CallExpression	image . width ( )
>5328	ArgumentList	 
>5329	Callee	image . width
>5330	MemberAccess	image . width
>5331	Identifier	width
>5332	Identifier	image
>5333	Identifier	x
>5334	ForInit	 
>5335	IdentifierDeclStatement	unsigned x = 0 ;
>5336	IdentifierDecl	x = 0
>5337	AssignmentExpr	x = 0
>5338	PrimaryExpression	0
>5339	Identifier	x
>5340	Identifier	x
>5341	IdentifierDeclType	unsigned
>5342	IncDecOp	 
>5343	IncDec	++
>5344	Identifier	y
>5345	Condition	 
>5346	RelationalExpression	y < image . height ( )
>5347	CallExpression	image . height ( )
>5348	ArgumentList	 
>5349	Callee	image . height
>5350	MemberAccess	image . height
>5351	Identifier	height
>5352	Identifier	image
>5353	Identifier	y
>5354	ForInit	 
>5355	IdentifierDeclStatement	unsigned y = 0 ;
>5356	IdentifierDecl	y = 0
>5357	AssignmentExpr	y = 0
>5358	PrimaryExpression	0
>5359	Identifier	y
>5360	Identifier	y
>5361	IdentifierDeclType	unsigned
>5362	ForStatement	for ( unsigned i = 0 ; i < _nodes . size ( ) ; i ++ )
>5363	CompoundStatement	 
>5364	ExpressionStatement	 
>5365	AssignmentExpr	_nodes [ i ] . features = VectorXf 
>5366	CallExpression	VectorXf 
>5367	ArgumentList	nTotalFeatures
>5368	Argument	nTotalFeatures
>5369	Identifier	nTotalFeatures
>5370	Callee	VectorXf 
>5371	Identifier	VectorXf 
>5372	MemberAccess	_nodes [ i ] . features
>5373	Identifier	features
>5374	ArrayIndexing	_nodes [ i ]
>5375	Identifier	i
>5376	Identifier	_nodes
>5377	IncDecOp	 
>5378	IncDec	++
>5379	Identifier	i
>5380	Condition	 
>5381	RelationalExpression	i < _nodes . size ( )
>5382	CallExpression	_nodes . size ( )
>5383	ArgumentList	 
>5384	Callee	_nodes . size
>5385	MemberAccess	_nodes . size
>5386	Identifier	size
>5387	Identifier	_nodes
>5388	Identifier	i
>5389	ForInit	 
>5390	IdentifierDeclStatement	unsigned i = 0 ;
>5391	IdentifierDecl	i = 0
>5392	AssignmentExpr	i = 0
>5393	PrimaryExpression	0
>5394	Identifier	i
>5395	Identifier	i
>5396	IdentifierDeclType	unsigned
>5397	IdentifierDeclStatement	 
>5398	IdentifierDecl	nTotalFeatures = nLocalFeatures + nGridFeatures + nGlobalFeatures + nQuadraticFeatures
>5399	AssignmentExpr	nTotalFeatures = nLocalFeatures + nGridFeatures + nGlobalFeatures + nQuadraticFeatures
>5400	AdditiveExpression	nLocalFeatures + nGridFeatures + nGlobalFeatures + nQuadraticFeatures
>5401	AdditiveExpression	nGridFeatures + nGlobalFeatures + nQuadraticFeatures
>5402	AdditiveExpression	nGlobalFeatures + nQuadraticFeatures
>5403	Identifier	nQuadraticFeatures
>5404	Identifier	nGlobalFeatures
>5405	Identifier	nGridFeatures
>5406	Identifier	nLocalFeatures
>5407	Identifier	nTotalFeatures
>5408	Identifier	nTotalFeatures
>5409	IdentifierDeclType	const int
>5410	IdentifierDeclStatement	 
>5411	IdentifierDecl	nQuadraticFeatures = 0
>5412	AssignmentExpr	nQuadraticFeatures = 0
>5413	PrimaryExpression	0
>5414	Identifier	nQuadraticFeatures
>5415	Identifier	nQuadraticFeatures
>5416	IdentifierDeclType	const int
>5417	IdentifierDeclStatement	 
>5418	IdentifierDecl	nGlobalFeatures = 0
>5419	AssignmentExpr	nGlobalFeatures = 0
>5420	PrimaryExpression	0
>5421	Identifier	nGlobalFeatures
>5422	Identifier	nGlobalFeatures
>5423	IdentifierDeclType	const int
>5424	IdentifierDeclStatement	 
>5425	IdentifierDecl	nGridFeatures = 0
>5426	AssignmentExpr	nGridFeatures = 0
>5427	PrimaryExpression	0
>5428	Identifier	nGridFeatures
>5429	Identifier	nGridFeatures
>5430	IdentifierDeclType	const int
>5431	IdentifierDeclStatement	 
>5432	IdentifierDecl	nLocalFeatures = 2 * nBaseFeatures + 6
>5433	AssignmentExpr	nLocalFeatures = 2 * nBaseFeatures + 6
>5434	AdditiveExpression	2 * nBaseFeatures + 6
>5435	PrimaryExpression	6
>5436	MultiplicativeExpression	2 * nBaseFeatures
>5437	Identifier	nBaseFeatures
>5438	PrimaryExpression	2
>5439	Identifier	nLocalFeatures
>5440	Identifier	nLocalFeatures
>5441	IdentifierDeclType	const int
>5442	IdentifierDeclStatement	 
>5443	IdentifierDecl	nBaseFeatures = ( int ) responses . size ( )
>5444	AssignmentExpr	nBaseFeatures = ( int ) responses . size ( )
>5445	CastExpression	( int ) responses . size ( )
>5446	CallExpression	responses . size ( )
>5447	ArgumentList	 
>5448	Callee	responses . size
>5449	MemberAccess	responses . size
>5450	Identifier	size
>5451	Identifier	responses
>5452	CastTarget	int
>5453	Identifier	nBaseFeatures
>5454	Identifier	nBaseFeatures
>5455	IdentifierDeclType	const int
>5456	ForStatement	for ( unsigned y = 0 ; y < image . height ( ) ; y ++ )
>5457	CompoundStatement	 
>5458	ForStatement	for ( unsigned x = 0 ; x < image . width ( ) ; x ++ )
>5459	CompoundStatement	 
>5460	ForStatement	for ( int c = 0 ; c < image . segments ( ) . channels ( ) ; c ++ )
>5461	CompoundStatement	 
>5462	ExpressionStatement	 
>5463	AssignmentExpr	qcolour [ 3 * segId + 2 ] [ p [ 3 * x + 2 ] ] += 1
>5464	PrimaryExpression	1
>5465	ArrayIndexing	qcolour [ 3 * segId + 2 ] [ p [ 3 * x + 2 ] ]
>5466	ArrayIndexing	p [ 3 * x + 2 ]
>5467	AdditiveExpression	3 * x + 2
>5468	PrimaryExpression	2
>5469	MultiplicativeExpression	3 * x
>5470	Identifier	x
>5471	PrimaryExpression	3
>5472	Identifier	p
>5473	ArrayIndexing	qcolour [ 3 * segId + 2 ]
>5474	AdditiveExpression	3 * segId + 2
>5475	PrimaryExpression	2
>5476	MultiplicativeExpression	3 * segId
>5477	Identifier	segId
>5478	PrimaryExpression	3
>5479	Identifier	qcolour
>5480	ExpressionStatement	 
>5481	AssignmentExpr	qcolour [ 3 * segId + 1 ] [ p [ 3 * x + 1 ] ] += 1
>5482	PrimaryExpression	1
>5483	ArrayIndexing	qcolour [ 3 * segId + 1 ] [ p [ 3 * x + 1 ] ]
>5484	ArrayIndexing	p [ 3 * x + 1 ]
>5485	AdditiveExpression	3 * x + 1
>5486	PrimaryExpression	1
>5487	MultiplicativeExpression	3 * x
>5488	Identifier	x
>5489	PrimaryExpression	3
>5490	Identifier	p
>5491	ArrayIndexing	qcolour [ 3 * segId + 1 ]
>5492	AdditiveExpression	3 * segId + 1
>5493	PrimaryExpression	1
>5494	MultiplicativeExpression	3 * segId
>5495	Identifier	segId
>5496	PrimaryExpression	3
>5497	Identifier	qcolour
>5498	ExpressionStatement	 
>5499	AssignmentExpr	qcolour [ 3 * segId ] [ p [ 3 * x ] ] += 1
>5500	PrimaryExpression	1
>5501	ArrayIndexing	qcolour [ 3 * segId ] [ p [ 3 * x ] ]
>5502	ArrayIndexing	p [ 3 * x ]
>5503	MultiplicativeExpression	3 * x
>5504	Identifier	x
>5505	PrimaryExpression	3
>5506	Identifier	p
>5507	ArrayIndexing	qcolour [ 3 * segId ]
>5508	MultiplicativeExpression	3 * segId
>5509	Identifier	segId
>5510	PrimaryExpression	3
>5511	Identifier	qcolour
>5512	IfStatement	if ( segId < 0 )
>5513	ContinueStatement	 
>5514	Condition	 
>5515	RelationalExpression	segId < 0
>5516	PrimaryExpression	0
>5517	Identifier	segId
>5518	IdentifierDeclStatement	 
>5519	IdentifierDecl	segId = image . segments ( ) [ c ] . at < int > ( y , x )
>5520	AssignmentExpr	segId = image . segments ( ) [ c ] . at < int > ( y , x )
>5521	RelationalExpression	image . segments ( ) [ c ] . at < int > ( y , x )
>5522	RelationalExpression	int > ( y , x )
>5523	Expression	y , x
>5524	Identifier	x
>5525	Identifier	y
>5526	Identifier	int
>5527	MemberAccess	image . segments ( ) [ c ] . at
>5528	Identifier	at
>5529	ArrayIndexing	image . segments ( ) [ c ]
>5530	Identifier	c
>5531	CallExpression	image . segments ( )
>5532	ArgumentList	 
>5533	Callee	image . segments
>5534	MemberAccess	image . segments
>5535	Identifier	segments
>5536	Identifier	image
>5537	Identifier	segId
>5538	Identifier	segId
>5539	IdentifierDeclType	const int
>5540	IncDecOp	 
>5541	IncDec	++
>5542	Identifier	c
>5543	Condition	 
>5544	RelationalExpression	c < image . segments ( ) . channels ( )
>5545	CallExpression	image . segments ( ) . channels ( )
>5546	ArgumentList	 
>5547	Callee	image . segments ( ) . channels
>5548	MemberAccess	image . segments ( ) . channels
>5549	Identifier	channels
>5550	CallExpression	image . segments ( )
>5551	ArgumentList	 
>5552	Callee	image . segments
>5553	MemberAccess	image . segments
>5554	Identifier	segments
>5555	Identifier	image
>5556	Identifier	c
>5557	ForInit	 
>5558	IdentifierDeclStatement	int c = 0 ;
>5559	IdentifierDecl	c = 0
>5560	AssignmentExpr	c = 0
>5561	PrimaryExpression	0
>5562	Identifier	c
>5563	Identifier	c
>5564	IdentifierDeclType	int
>5565	IncDecOp	 
>5566	IncDec	++
>5567	Identifier	x
>5568	Condition	 
>5569	RelationalExpression	x < image . width ( )
>5570	CallExpression	image . width ( )
>5571	ArgumentList	 
>5572	Callee	image . width
>5573	MemberAccess	image . width
>5574	Identifier	width
>5575	Identifier	image
>5576	Identifier	x
>5577	ForInit	 
>5578	IdentifierDeclStatement	unsigned x = 0 ;
>5579	IdentifierDecl	x = 0
>5580	AssignmentExpr	x = 0
>5581	PrimaryExpression	0
>5582	Identifier	x
>5583	Identifier	x
>5584	IdentifierDeclType	unsigned
>5585	ExpressionStatement	 
>5586	RelationalExpression	char > ( y )
>5587	Identifier	y
>5588	Identifier	char
>5589	Statement	 
>5590	Statement	 
>5591	Statement	 
>5592	Statement	 
>5593	Statement	 
>5594	Statement	 
>5595	Statement	 
>5596	Statement	 
>5597	Statement	 
>5598	Statement	 
>5599	Statement	 
>5600	Statement	 
>5601	Statement	 
>5602	Statement	 
>5603	Statement	 
>5604	Statement	 
>5605	IncDecOp	 
>5606	IncDec	++
>5607	Identifier	y
>5608	Condition	 
>5609	RelationalExpression	y < image . height ( )
>5610	CallExpression	image . height ( )
>5611	ArgumentList	 
>5612	Callee	image . height
>5613	MemberAccess	image . height
>5614	Identifier	height
>5615	Identifier	image
>5616	Identifier	y
>5617	ForInit	 
>5618	IdentifierDeclStatement	unsigned y = 0 ;
>5619	IdentifierDecl	y = 0
>5620	AssignmentExpr	y = 0
>5621	PrimaryExpression	0
>5622	Identifier	y
>5623	Identifier	y
>5624	IdentifierDeclType	unsigned
>5625	IdentifierDeclStatement	 
>5626	IdentifierDecl	qcolour ( 3 * _nodes . size ( ) , vector < int > ( 256 , 0 ) )
>5627	Expression	3 * _nodes . size ( ) , vector < int > ( 256 , 0 )
>5628	RelationalExpression	vector < int > ( 256 , 0 )
>5629	RelationalExpression	int > ( 256 , 0 )
>5630	Expression	256 , 0
>5631	PrimaryExpression	0
>5632	PrimaryExpression	256
>5633	Identifier	int
>5634	Identifier	vector
>5635	MultiplicativeExpression	3 * _nodes . size ( )
>5636	CallExpression	_nodes . size ( )
>5637	ArgumentList	 
>5638	Callee	_nodes . size
>5639	MemberAccess	_nodes . size
>5640	Identifier	size
>5641	Identifier	_nodes
>5642	PrimaryExpression	3
>5643	Identifier	qcolour
>5644	IdentifierDeclType	vector < vector < int > >
>5645	ExpressionStatement	 
>5646	CallExpression	responses . insert ( responses . end ( ) , lbpResponses . begin ( ) , lbpResponses . end ( ) )
>5647	ArgumentList	responses . end ( )
>5648	Argument	lbpResponses . end ( )
>5649	CallExpression	lbpResponses . end ( )
>5650	ArgumentList	 
>5651	Callee	lbpResponses . end
>5652	MemberAccess	lbpResponses . end
>5653	Identifier	end
>5654	Identifier	lbpResponses
>5655	Argument	lbpResponses . begin ( )
>5656	CallExpression	lbpResponses . begin ( )
>5657	ArgumentList	 
>5658	Callee	lbpResponses . begin
>5659	MemberAccess	lbpResponses . begin
>5660	Identifier	begin
>5661	Identifier	lbpResponses
>5662	Argument	responses . end ( )
>5663	CallExpression	responses . end ( )
>5664	ArgumentList	 
>5665	Callee	responses . end
>5666	MemberAccess	responses . end
>5667	Identifier	end
>5668	Identifier	responses
>5669	Callee	responses . insert
>5670	MemberAccess	responses . insert
>5671	Identifier	insert
>5672	Identifier	responses
>5673	ExpressionStatement	 
>5674	CallExpression	lbpFilterBank . filter ( image . image ( ) , lbpResponses )
>5675	ArgumentList	image . image ( )
>5676	Argument	lbpResponses
>5677	Identifier	lbpResponses
>5678	Argument	image . image ( )
>5679	CallExpression	image . image ( )
>5680	ArgumentList	 
>5681	Callee	image . image
>5682	MemberAccess	image . image
>5683	Identifier	image
>5684	Identifier	image
>5685	Callee	lbpFilterBank . filter
>5686	MemberAccess	lbpFilterBank . filter
>5687	Identifier	filter
>5688	Identifier	lbpFilterBank
>5689	IdentifierDeclStatement	 
>5690	IdentifierDecl	lbpResponses
>5691	Identifier	lbpResponses
>5692	IdentifierDeclType	vector < cv 
>5693	IdentifierDeclStatement	 
>5694	IdentifierDecl	lbpFilterBank ( false )
>5695	Identifier	false
>5696	Identifier	lbpFilterBank
>5697	IdentifierDeclType	drwnLBPFilterBank
>5698	ExpressionStatement	 
>5699	CallExpression	responses . insert ( responses . end ( ) , hogResponses . begin ( ) , hogResponses . end ( ) )
>5700	ArgumentList	responses . end ( )
>5701	Argument	hogResponses . end ( )
>5702	CallExpression	hogResponses . end ( )
>5703	ArgumentList	 
>5704	Callee	hogResponses . end
>5705	MemberAccess	hogResponses . end
>5706	Identifier	end
>5707	Identifier	hogResponses
>5708	Argument	hogResponses . begin ( )
>5709	CallExpression	hogResponses . begin ( )
>5710	ArgumentList	 
>5711	Callee	hogResponses . begin
>5712	MemberAccess	hogResponses . begin
>5713	Identifier	begin
>5714	Identifier	hogResponses
>5715	Argument	responses . end ( )
>5716	CallExpression	responses . end ( )
>5717	ArgumentList	 
>5718	Callee	responses . end
>5719	MemberAccess	responses . end
>5720	Identifier	end
>5721	Identifier	responses
>5722	Callee	responses . insert
>5723	MemberAccess	responses . insert
>5724	Identifier	insert
>5725	Identifier	responses
>5726	ExpressionStatement	 
>5727	CallExpression	hogFeatureBank . computeDenseFeatures ( image . image ( ) , hogResponses )
>5728	ArgumentList	image . image ( )
>5729	Argument	hogResponses
>5730	Identifier	hogResponses
>5731	Argument	image . image ( )
>5732	CallExpression	image . image ( )
>5733	ArgumentList	 
>5734	Callee	image . image
>5735	MemberAccess	image . image
>5736	Identifier	image
>5737	Identifier	image
>5738	Callee	hogFeatureBank . computeDenseFeatures
>5739	MemberAccess	hogFeatureBank . computeDenseFeatures
>5740	Identifier	computeDenseFeatures
>5741	Identifier	hogFeatureBank
>5742	IdentifierDeclStatement	 
>5743	IdentifierDecl	hogResponses
>5744	Identifier	hogResponses
>5745	IdentifierDeclType	vector < cv 
>5746	IdentifierDeclStatement	 
>5747	IdentifierDecl	hogFeatureBank
>5748	Identifier	hogFeatureBank
>5749	IdentifierDeclType	drwnHOGFeatures
>5750	ExpressionStatement	 
>5751	AssignmentExpr	drwnHOGFeatures 
>5752	Identifier	true
>5753	Identifier	drwnHOGFeatures 
>5754	ExpressionStatement	 
>5755	AssignmentExpr	drwnHOGFeatures 
>5756	PrimaryExpression	2
>5757	Identifier	drwnHOGFeatures 
>5758	ForStatement	for ( unsigned y = 0 ; y < image . height ( ) ; y ++ )
>5759	CompoundStatement	 
>5760	ForStatement	for ( unsigned x = 0 ; x < image . width ( ) ; x ++ )
>5761	CompoundStatement	 
>5762	ExpressionStatement	 
>5763	AssignmentExpr	q [ x ] = 2.0f * fabs ( ( float ) x / image . width ( ) - 0.5f )
>5764	MultiplicativeExpression	2.0f * fabs ( ( float ) x / image . width ( ) - 0.5f )
>5765	CallExpression	fabs ( ( float ) x / image . width ( ) - 0.5f )
>5766	ArgumentList	( float ) x / image . width ( ) - 0.5f
>5767	Argument	( float ) x / image . width ( ) - 0.5f
>5768	AdditiveExpression	( float ) x / image . width ( ) - 0.5f
>5769	PrimaryExpression	0.5f
>5770	MultiplicativeExpression	( float ) x / image . width ( )
>5771	CallExpression	image . width ( )
>5772	ArgumentList	 
>5773	Callee	image . width
>5774	MemberAccess	image . width
>5775	Identifier	width
>5776	Identifier	image
>5777	CastExpression	( float ) x
>5778	Identifier	x
>5779	CastTarget	float
>5780	Callee	fabs
>5781	Identifier	fabs
>5782	PrimaryExpression	2.0f
>5783	ArrayIndexing	q [ x ]
>5784	Identifier	x
>5785	Identifier	q
>5786	ExpressionStatement	 
>5787	AssignmentExpr	p [ x ] = ( float ) y / image . height ( )
>5788	MultiplicativeExpression	( float ) y / image . height ( )
>5789	CallExpression	image . height ( )
>5790	ArgumentList	 
>5791	Callee	image . height
>5792	MemberAccess	image . height
>5793	Identifier	height
>5794	Identifier	image
>5795	CastExpression	( float ) y
>5796	Identifier	y
>5797	CastTarget	float
>5798	ArrayIndexing	p [ x ]
>5799	Identifier	x
>5800	Identifier	p
>5801	IncDecOp	 
>5802	IncDec	++
>5803	Identifier	x
>5804	Condition	 
>5805	RelationalExpression	x < image . width ( )
>5806	CallExpression	image . width ( )
>5807	ArgumentList	 
>5808	Callee	image . width
>5809	MemberAccess	image . width
>5810	Identifier	width
>5811	Identifier	image
>5812	Identifier	x
>5813	ForInit	 
>5814	IdentifierDeclStatement	unsigned x = 0 ;
>5815	IdentifierDecl	x = 0
>5816	AssignmentExpr	x = 0
>5817	PrimaryExpression	0
>5818	Identifier	x
>5819	Identifier	x
>5820	IdentifierDeclType	unsigned
>5821	IdentifierDeclStatement	 
>5822	IdentifierDecl	* q = responses [ responses . size ( ) - 1 ] . ptr < float > ( y )
>5823	AssignmentExpr	* q = responses [ responses . size ( ) - 1 ] . ptr < float > ( y )
>5824	RelationalExpression	responses [ responses . size ( ) - 1 ] . ptr < float > ( y )
>5825	RelationalExpression	float > ( y )
>5826	Identifier	y
>5827	Identifier	float
>5828	MemberAccess	responses [ responses . size ( ) - 1 ] . ptr
>5829	Identifier	ptr
>5830	ArrayIndexing	responses [ responses . size ( ) - 1 ]
>5831	AdditiveExpression	responses . size ( ) - 1
>5832	PrimaryExpression	1
>5833	CallExpression	responses . size ( )
>5834	ArgumentList	 
>5835	Callee	responses . size
>5836	MemberAccess	responses . size
>5837	Identifier	size
>5838	Identifier	responses
>5839	Identifier	responses
>5840	Identifier	q
>5841	Identifier	q
>5842	IdentifierDeclType	float *
>5843	IdentifierDeclStatement	 
>5844	IdentifierDecl	* p = responses [ responses . size ( ) - 2 ] . ptr < float > ( y )
>5845	AssignmentExpr	* p = responses [ responses . size ( ) - 2 ] . ptr < float > ( y )
>5846	RelationalExpression	responses [ responses . size ( ) - 2 ] . ptr < float > ( y )
>5847	RelationalExpression	float > ( y )
>5848	Identifier	y
>5849	Identifier	float
>5850	MemberAccess	responses [ responses . size ( ) - 2 ] . ptr
>5851	Identifier	ptr
>5852	ArrayIndexing	responses [ responses . size ( ) - 2 ]
>5853	AdditiveExpression	responses . size ( ) - 2
>5854	PrimaryExpression	2
>5855	CallExpression	responses . size ( )
>5856	ArgumentList	 
>5857	Callee	responses . size
>5858	MemberAccess	responses . size
>5859	Identifier	size
>5860	Identifier	responses
>5861	Identifier	responses
>5862	Identifier	p
>5863	Identifier	p
>5864	IdentifierDeclType	float *
>5865	IncDecOp	 
>5866	IncDec	++
>5867	Identifier	y
>5868	Condition	 
>5869	RelationalExpression	y < image . height ( )
>5870	CallExpression	image . height ( )
>5871	ArgumentList	 
>5872	Callee	image . height
>5873	MemberAccess	image . height
>5874	Identifier	height
>5875	Identifier	image
>5876	Identifier	y
>5877	ForInit	 
>5878	IdentifierDeclStatement	unsigned y = 0 ;
>5879	IdentifierDecl	y = 0
>5880	AssignmentExpr	y = 0
>5881	PrimaryExpression	0
>5882	Identifier	y
>5883	Identifier	y
>5884	IdentifierDeclType	unsigned
>5885	ExpressionStatement	 
>5886	CallExpression	responses . push_back ( responses [ 0 ] . clone ( ) )
>5887	ArgumentList	responses [ 0 ] . clone ( )
>5888	Argument	responses [ 0 ] . clone ( )
>5889	CallExpression	responses [ 0 ] . clone ( )
>5890	ArgumentList	 
>5891	Callee	responses [ 0 ] . clone
>5892	MemberAccess	responses [ 0 ] . clone
>5893	Identifier	clone
>5894	ArrayIndexing	responses [ 0 ]
>5895	PrimaryExpression	0
>5896	Identifier	responses
>5897	Callee	responses . push_back
>5898	MemberAccess	responses . push_back
>5899	Identifier	push_back
>5900	Identifier	responses
>5901	ExpressionStatement	 
>5902	CallExpression	responses . push_back ( responses [ 0 ] . clone ( ) )
>5903	ArgumentList	responses [ 0 ] . clone ( )
>5904	Argument	responses [ 0 ] . clone ( )
>5905	CallExpression	responses [ 0 ] . clone ( )
>5906	ArgumentList	 
>5907	Callee	responses [ 0 ] . clone
>5908	MemberAccess	responses [ 0 ] . clone
>5909	Identifier	clone
>5910	ArrayIndexing	responses [ 0 ]
>5911	PrimaryExpression	0
>5912	Identifier	responses
>5913	Callee	responses . push_back
>5914	MemberAccess	responses . push_back
>5915	Identifier	push_back
>5916	Identifier	responses
>5917	ExpressionStatement	 
>5918	CallExpression	textonBank . filter ( image . image ( ) , responses )
>5919	ArgumentList	image . image ( )
>5920	Argument	responses
>5921	Identifier	responses
>5922	Argument	image . image ( )
>5923	CallExpression	image . image ( )
>5924	ArgumentList	 
>5925	Callee	image . image
>5926	MemberAccess	image . image
>5927	Identifier	image
>5928	Identifier	image
>5929	Callee	textonBank . filter
>5930	MemberAccess	textonBank . filter
>5931	Identifier	filter
>5932	Identifier	textonBank
>5933	IdentifierDeclStatement	 
>5934	IdentifierDecl	responses
>5935	Identifier	responses
>5936	IdentifierDeclType	vector < cv 
>5937	IdentifierDeclStatement	 
>5938	IdentifierDecl	textonBank ( 1.0 )
>5939	PrimaryExpression	1.0
>5940	Identifier	textonBank
>5941	IdentifierDeclType	drwnTextonFilterBank
>5942	ExpressionStatement	 
>5943	CallExpression	DRWN_ASSERT ( ( int ) _nodes . size ( ) == image . segments ( ) . size ( ) )
>5944	ArgumentList	( int ) _nodes . size ( ) == image . segments ( ) . size ( )
>5945	Argument	( int ) _nodes . size ( ) == image . segments ( ) . size ( )
>5946	EqualityExpression	( int ) _nodes . size ( ) == image . segments ( ) . size ( )
>5947	CallExpression	image . segments ( ) . size ( )
>5948	ArgumentList	 
>5949	Callee	image . segments ( ) . size
>5950	MemberAccess	image . segments ( ) . size
>5951	Identifier	size
>5952	CallExpression	image . segments ( )
>5953	ArgumentList	 
>5954	Callee	image . segments
>5955	MemberAccess	image . segments
>5956	Identifier	segments
>5957	Identifier	image
>5958	CastExpression	( int ) _nodes . size ( )
>5959	CallExpression	_nodes . size ( )
>5960	ArgumentList	 
>5961	Callee	_nodes . size
>5962	MemberAccess	_nodes . size
>5963	Identifier	size
>5964	Identifier	_nodes
>5965	CastTarget	int
>5966	Callee	DRWN_ASSERT
>5967	Identifier	DRWN_ASSERT
>6058	FunctionDef	drwnNNGraphImage 
>6059	ParameterList	const drwnNNGraphImageData & image
>6060	Parameter	 
>6061	Identifier	image
>6062	ParameterType	const drwnNNGraphImageData &
>6063	ReturnType	void
>6064	CompoundStatement	 
>6065	ForStatement	for ( unsigned segId = 0 ; segId < image . numSegments ( ) ; segId ++ )
>6066	CompoundStatement	 
>6067	IfStatement	if ( maxCount >= unknownCounts [ segId ] )
>6068	ElseStatement	else
>6069	CompoundStatement	 
>6070	ExpressionStatement	 
>6071	AssignmentExpr	_nodes [ segId ] . label = - 1
>6072	UnaryOp	- 1
>6073	PrimaryExpression	1
>6074	UnaryOperator	-
>6075	MemberAccess	_nodes [ segId ] . label
>6076	Identifier	label
>6077	ArrayIndexing	_nodes [ segId ]
>6078	Identifier	segId
>6079	Identifier	_nodes
>6080	CompoundStatement	 
>6081	ExpressionStatement	 
>6082	AssignmentExpr	_nodes [ segId ] . label = lbl
>6083	Identifier	lbl
>6084	MemberAccess	_nodes [ segId ] . label
>6085	Identifier	label
>6086	ArrayIndexing	_nodes [ segId ]
>6087	Identifier	segId
>6088	Identifier	_nodes
>6089	Condition	 
>6090	RelationalExpression	maxCount >= unknownCounts [ segId ]
>6091	ArrayIndexing	unknownCounts [ segId ]
>6092	Identifier	segId
>6093	Identifier	unknownCounts
>6094	Identifier	maxCount
>6095	IdentifierDeclStatement	 
>6096	IdentifierDecl	maxCount = labelCounts [ segId ] . maxCoeff ( & lbl )
>6097	AssignmentExpr	maxCount = labelCounts [ segId ] . maxCoeff ( & lbl )
>6098	CallExpression	labelCounts [ segId ] . maxCoeff ( & lbl )
>6099	ArgumentList	& lbl
>6100	Argument	& lbl
>6101	UnaryOp	& lbl
>6102	Identifier	lbl
>6103	UnaryOperator	&
>6104	Callee	labelCounts [ segId ] . maxCoeff
>6105	MemberAccess	labelCounts [ segId ] . maxCoeff
>6106	Identifier	maxCoeff
>6107	ArrayIndexing	labelCounts [ segId ]
>6108	Identifier	segId
>6109	Identifier	labelCounts
>6110	Identifier	maxCount
>6111	Identifier	maxCount
>6112	IdentifierDeclType	const int
>6113	IncDecOp	 
>6114	IncDec	++
>6115	Identifier	segId
>6116	Condition	 
>6117	RelationalExpression	segId < image . numSegments ( )
>6118	CallExpression	image . numSegments ( )
>6119	ArgumentList	 
>6120	Callee	image . numSegments
>6121	MemberAccess	image . numSegments
>6122	Identifier	numSegments
>6123	Identifier	image
>6124	Identifier	segId
>6125	ForInit	 
>6126	IdentifierDeclStatement	unsigned segId = 0 ;
>6127	IdentifierDecl	segId = 0
>6128	AssignmentExpr	segId = 0
>6129	PrimaryExpression	0
>6130	Identifier	segId
>6131	Identifier	segId
>6132	IdentifierDeclType	unsigned
>6133	IdentifierDeclStatement	 
>6134	IdentifierDecl	lbl
>6135	Identifier	lbl
>6136	IdentifierDeclType	int
>6137	ForStatement	for ( int c = 0 ; c < image . segments ( ) . channels ( ) ; c ++ )
>6138	CompoundStatement	 
>6139	ForStatement	for ( unsigned y = 0 ; y < image . height ( ) ; y ++ )
>6140	CompoundStatement	 
>6141	ForStatement	for ( unsigned x = 0 ; x < image . width ( ) ; x ++ )
>6142	CompoundStatement	 
>6143	IfStatement	if ( lblId < 0 )
>6144	ElseStatement	else
>6145	CompoundStatement	 
>6146	ExpressionStatement	 
>6147	AssignmentExpr	labelCounts [ segId ] [ lblId ] += 1
>6148	PrimaryExpression	1
>6149	ArrayIndexing	labelCounts [ segId ] [ lblId ]
>6150	Identifier	lblId
>6151	ArrayIndexing	labelCounts [ segId ]
>6152	Identifier	segId
>6153	Identifier	labelCounts
>6154	CompoundStatement	 
>6155	ExpressionStatement	 
>6156	AssignmentExpr	unknownCounts [ segId ] += 1
>6157	PrimaryExpression	1
>6158	ArrayIndexing	unknownCounts [ segId ]
>6159	Identifier	segId
>6160	Identifier	unknownCounts
>6161	Condition	 
>6162	RelationalExpression	lblId < 0
>6163	PrimaryExpression	0
>6164	Identifier	lblId
>6165	IdentifierDeclStatement	 
>6166	IdentifierDecl	lblId = image . labels ( ) ( y , x )
>6167	AssignmentExpr	lblId = image . labels ( ) ( y , x )
>6168	CallExpression	image . labels ( ) ( y , x )
>6169	ArgumentList	y
>6170	Argument	x
>6171	Identifier	x
>6172	Argument	y
>6173	Identifier	y
>6174	Callee	image . labels ( )
>6175	CallExpression	image . labels ( )
>6176	ArgumentList	 
>6177	Callee	image . labels
>6178	MemberAccess	image . labels
>6179	Identifier	labels
>6180	Identifier	image
>6181	Identifier	lblId
>6182	Identifier	lblId
>6183	IdentifierDeclType	const int
>6184	IfStatement	if ( segId < 0 )
>6185	ContinueStatement	 
>6186	Condition	 
>6187	RelationalExpression	segId < 0
>6188	PrimaryExpression	0
>6189	Identifier	segId
>6190	IdentifierDeclStatement	 
>6191	IdentifierDecl	segId = image . segments ( ) [ c ] . at < int > ( y , x )
>6192	AssignmentExpr	segId = image . segments ( ) [ c ] . at < int > ( y , x )
>6193	RelationalExpression	image . segments ( ) [ c ] . at < int > ( y , x )
>6194	RelationalExpression	int > ( y , x )
>6195	Expression	y , x
>6196	Identifier	x
>6197	Identifier	y
>6198	Identifier	int
>6199	MemberAccess	image . segments ( ) [ c ] . at
>6200	Identifier	at
>6201	ArrayIndexing	image . segments ( ) [ c ]
>6202	Identifier	c
>6203	CallExpression	image . segments ( )
>6204	ArgumentList	 
>6205	Callee	image . segments
>6206	MemberAccess	image . segments
>6207	Identifier	segments
>6208	Identifier	image
>6209	Identifier	segId
>6210	Identifier	segId
>6211	IdentifierDeclType	const int
>6212	IncDecOp	 
>6213	IncDec	++
>6214	Identifier	x
>6215	Condition	 
>6216	RelationalExpression	x < image . width ( )
>6217	CallExpression	image . width ( )
>6218	ArgumentList	 
>6219	Callee	image . width
>6220	MemberAccess	image . width
>6221	Identifier	width
>6222	Identifier	image
>6223	Identifier	x
>6224	ForInit	 
>6225	IdentifierDeclStatement	unsigned x = 0 ;
>6226	IdentifierDecl	x = 0
>6227	AssignmentExpr	x = 0
>6228	PrimaryExpression	0
>6229	Identifier	x
>6230	Identifier	x
>6231	IdentifierDeclType	unsigned
>6232	IncDecOp	 
>6233	IncDec	++
>6234	Identifier	y
>6235	Condition	 
>6236	RelationalExpression	y < image . height ( )
>6237	CallExpression	image . height ( )
>6238	ArgumentList	 
>6239	Callee	image . height
>6240	MemberAccess	image . height
>6241	Identifier	height
>6242	Identifier	image
>6243	Identifier	y
>6244	ForInit	 
>6245	IdentifierDeclStatement	unsigned y = 0 ;
>6246	IdentifierDecl	y = 0
>6247	AssignmentExpr	y = 0
>6248	PrimaryExpression	0
>6249	Identifier	y
>6250	Identifier	y
>6251	IdentifierDeclType	unsigned
>6252	IncDecOp	 
>6253	IncDec	++
>6254	Identifier	c
>6255	Condition	 
>6256	RelationalExpression	c < image . segments ( ) . channels ( )
>6257	CallExpression	image . segments ( ) . channels ( )
>6258	ArgumentList	 
>6259	Callee	image . segments ( ) . channels
>6260	MemberAccess	image . segments ( ) . channels
>6261	Identifier	channels
>6262	CallExpression	image . segments ( )
>6263	ArgumentList	 
>6264	Callee	image . segments
>6265	MemberAccess	image . segments
>6266	Identifier	segments
>6267	Identifier	image
>6268	Identifier	c
>6269	ForInit	 
>6270	IdentifierDeclStatement	int c = 0 ;
>6271	IdentifierDecl	c = 0
>6272	AssignmentExpr	c = 0
>6273	PrimaryExpression	0
>6274	Identifier	c
>6275	Identifier	c
>6276	IdentifierDeclType	int
>6277	IdentifierDeclStatement	 
>6278	IdentifierDecl	unknownCounts ( image . numSegments ( ) , 0 )
>6279	Expression	image . numSegments ( ) , 0
>6280	PrimaryExpression	0
>6281	CallExpression	image . numSegments ( )
>6282	ArgumentList	 
>6283	Callee	image . numSegments
>6284	MemberAccess	image . numSegments
>6285	Identifier	numSegments
>6286	Identifier	image
>6287	Identifier	unknownCounts
>6288	IdentifierDeclType	vector < int >
>6289	IdentifierDeclStatement	 
>6290	IdentifierDecl	labelCounts ( image . numSegments ( ) , VectorXi 
>6291	Expression	image . numSegments ( ) , VectorXi 
>6292	CallExpression	VectorXi 
>6293	ArgumentList	nLabels
>6294	Argument	nLabels
>6295	Identifier	nLabels
>6296	Callee	VectorXi 
>6297	Identifier	VectorXi 
>6298	CallExpression	image . numSegments ( )
>6299	ArgumentList	 
>6300	Callee	image . numSegments
>6301	MemberAccess	image . numSegments
>6302	Identifier	numSegments
>6303	Identifier	image
>6304	Identifier	labelCounts
>6305	IdentifierDeclType	vector < VectorXi >
>6306	IfStatement	if ( nLabels <= 0 )
>6307	CompoundStatement	 
>6308	ReturnStatement	 
>6309	ForStatement	for ( unsigned segId = 0 ; segId < image . numSegments ( ) ; segId ++ )
>6310	CompoundStatement	 
>6311	ExpressionStatement	 
>6312	AssignmentExpr	_nodes [ segId ] . label = - 1
>6313	UnaryOp	- 1
>6314	PrimaryExpression	1
>6315	UnaryOperator	-
>6316	MemberAccess	_nodes [ segId ] . label
>6317	Identifier	label
>6318	ArrayIndexing	_nodes [ segId ]
>6319	Identifier	segId
>6320	Identifier	_nodes
>6321	IncDecOp	 
>6322	IncDec	++
>6323	Identifier	segId
>6324	Condition	 
>6325	RelationalExpression	segId < image . numSegments ( )
>6326	CallExpression	image . numSegments ( )
>6327	ArgumentList	 
>6328	Callee	image . numSegments
>6329	MemberAccess	image . numSegments
>6330	Identifier	numSegments
>6331	Identifier	image
>6332	Identifier	segId
>6333	ForInit	 
>6334	IdentifierDeclStatement	unsigned segId = 0 ;
>6335	IdentifierDecl	segId = 0
>6336	AssignmentExpr	segId = 0
>6337	PrimaryExpression	0
>6338	Identifier	segId
>6339	Identifier	segId
>6340	IdentifierDeclType	unsigned
>6341	ExpressionStatement	 
>6342	CallExpression	DRWN_LOG_WARNING ( \"image \" << image . name ( ) << \" has no labels\" )
>6343	ArgumentList	\"image \" << image . name ( ) << \" has no labels\"
>6344	Argument	\"image \" << image . name ( ) << \" has no labels\"
>6345	ShiftExpression	\"image \" << image . name ( ) << \" has no labels\"
>6346	ShiftExpression	image . name ( ) << \" has no labels\"
>6347	PrimaryExpression	\" has no labels\"
>6348	CallExpression	image . name ( )
>6349	ArgumentList	 
>6350	Callee	image . name
>6351	MemberAccess	image . name
>6352	Identifier	name
>6353	Identifier	image
>6354	PrimaryExpression	\"image \"
>6355	Callee	DRWN_LOG_WARNING
>6356	Identifier	DRWN_LOG_WARNING
>6357	Condition	 
>6358	RelationalExpression	nLabels <= 0
>6359	PrimaryExpression	0
>6360	Identifier	nLabels
>6361	IdentifierDeclStatement	 
>6362	IdentifierDecl	nLabels = image . labels ( ) . maxCoeff ( ) + 1
>6363	AssignmentExpr	nLabels = image . labels ( ) . maxCoeff ( ) + 1
>6364	AdditiveExpression	image . labels ( ) . maxCoeff ( ) + 1
>6365	PrimaryExpression	1
>6366	CallExpression	image . labels ( ) . maxCoeff ( )
>6367	ArgumentList	 
>6368	Callee	image . labels ( ) . maxCoeff
>6369	MemberAccess	image . labels ( ) . maxCoeff
>6370	Identifier	maxCoeff
>6371	CallExpression	image . labels ( )
>6372	ArgumentList	 
>6373	Callee	image . labels
>6374	MemberAccess	image . labels
>6375	Identifier	labels
>6376	Identifier	image
>6377	Identifier	nLabels
>6378	Identifier	nLabels
>6379	IdentifierDeclType	const int
>6380	ExpressionStatement	 
>6381	CallExpression	DRWN_ASSERT ( ( ( unsigned ) image . labels ( ) . rows ( ) == image . height ( ) ) && ( ( unsigned ) image . labels ( ) \
>6382	ArgumentList	( ( unsigned ) image . labels ( ) . rows ( ) == image . height ( ) ) && ( ( unsigned ) image . labels ( ) . cols ( ) == \
>6383	Argument	( ( unsigned ) image . labels ( ) . rows ( ) == image . height ( ) ) && ( ( unsigned ) image . labels ( ) . cols ( ) == \
>6384	AndExpression	( ( unsigned ) image . labels ( ) . rows ( ) == image . height ( ) ) && ( ( unsigned ) image . labels ( ) \
>6385	EqualityExpression	( unsigned ) image . labels ( ) . cols ( ) == image . width ( )
>6386	CallExpression	image . width ( )
>6387	ArgumentList	 
>6388	Callee	image . width
>6389	MemberAccess	image . width
>6390	Identifier	width
>6391	Identifier	image
>6392	CastExpression	( unsigned ) image . labels ( ) . cols ( )
>6393	CallExpression	image . labels ( ) . cols ( )
>6394	ArgumentList	 
>6395	Callee	image . labels ( ) . cols
>6396	MemberAccess	image . labels ( ) . cols
>6397	Identifier	cols
>6398	CallExpression	image . labels ( )
>6399	ArgumentList	 
>6400	Callee	image . labels
>6401	MemberAccess	image . labels
>6402	Identifier	labels
>6403	Identifier	image
>6404	CastTarget	unsigned
>6405	EqualityExpression	( unsigned ) image . labels ( ) . rows ( ) == image . height ( )
>6406	CallExpression	image . height ( )
>6407	ArgumentList	 
>6408	Callee	image . height
>6409	MemberAccess	image . height
>6410	Identifier	height
>6411	Identifier	image
>6412	CastExpression	( unsigned ) image . labels ( ) . rows ( )
>6413	CallExpression	image . labels ( ) . rows ( )
>6414	ArgumentList	 
>6415	Callee	image . labels ( ) . rows
>6416	MemberAccess	image . labels ( ) . rows
>6417	Identifier	rows
>6418	CallExpression	image . labels ( )
>6419	ArgumentList	 
>6420	Callee	image . labels
>6421	MemberAccess	image . labels
>6422	Identifier	labels
>6423	Identifier	image
>6424	CastTarget	unsigned
>6425	Callee	DRWN_ASSERT
>6426	Identifier	DRWN_ASSERT
>6427	ExpressionStatement	 
>6428	CallExpression	DRWN_ASSERT ( ( int ) _nodes . size ( ) == image . segments ( ) . size ( ) )
>6429	ArgumentList	( int ) _nodes . size ( ) == image . segments ( ) . size ( )
>6430	Argument	( int ) _nodes . size ( ) == image . segments ( ) . size ( )
>6431	EqualityExpression	( int ) _nodes . size ( ) == image . segments ( ) . size ( )
>6432	CallExpression	image . segments ( ) . size ( )
>6433	ArgumentList	 
>6434	Callee	image . segments ( ) . size
>6435	MemberAccess	image . segments ( ) . size
>6436	Identifier	size
>6437	CallExpression	image . segments ( )
>6438	ArgumentList	 
>6439	Callee	image . segments
>6440	MemberAccess	image . segments
>6441	Identifier	segments
>6442	Identifier	image
>6443	CastExpression	( int ) _nodes . size ( )
>6444	CallExpression	_nodes . size ( )
>6445	ArgumentList	 
>6446	Callee	_nodes . size
>6447	MemberAccess	_nodes . size
>6448	Identifier	size
>6449	Identifier	_nodes
>6450	CastTarget	int
>6451	Callee	DRWN_ASSERT
>6452	Identifier	DRWN_ASSERT
>6509	FunctionDef	drwnNNGraph 
>6510	ParameterList	const char * filestem
>6511	Parameter	 
>6512	Identifier	filestem
>6513	ParameterType	const char *
>6514	ReturnType	bool
>6515	CompoundStatement	 
>6516	ReturnStatement	 
>6517	Identifier	true
>6518	ExpressionStatement	 
>6519	Identifier	DRWN_FCN_TOC
>6520	ExpressionStatement	 
>6521	CallExpression	storage . close ( )
>6522	ArgumentList	 
>6523	Callee	storage . close
>6524	MemberAccess	storage . close
>6525	Identifier	close
>6526	Identifier	storage
>6527	ForStatement	for ( unsigned i = 0 ; i < _images . size ( ) ; i ++ )
>6528	CompoundStatement	 
>6529	ExpressionStatement	 
>6530	CallExpression	storage . write ( key . c_str ( ) , & _images [ i ] )
>6531	ArgumentList	key . c_str ( )
>6532	Argument	& _images [ i ]
>6533	UnaryOp	& _images [ i ]
>6534	ArrayIndexing	_images [ i ]
>6535	Identifier	i
>6536	Identifier	_images
>6537	UnaryOperator	&
>6538	Argument	key . c_str ( )
>6539	CallExpression	key . c_str ( )
>6540	ArgumentList	 
>6541	Callee	key . c_str
>6542	MemberAccess	key . c_str
>6543	Identifier	c_str
>6544	Identifier	key
>6545	Callee	storage . write
>6546	MemberAccess	storage . write
>6547	Identifier	write
>6548	Identifier	storage
>6549	IdentifierDeclStatement	 
>6550	IdentifierDecl	key = drwn 
>6551	AssignmentExpr	key = drwn 
>6552	CallExpression	drwn 
>6553	ArgumentList	toString ( i )
>6554	Argument	'0'
>6555	PrimaryExpression	'0'
>6556	Argument	6
>6557	PrimaryExpression	6
>6558	Argument	toString ( i )
>6559	CallExpression	toString ( i )
>6560	ArgumentList	i
>6561	Argument	i
>6562	Identifier	i
>6563	Callee	toString
>6564	Identifier	toString
>6565	Callee	drwn 
>6566	Identifier	drwn 
>6567	Identifier	key
>6568	Identifier	key
>6569	IdentifierDeclType	const string
>6570	IncDecOp	 
>6571	IncDec	++
>6572	Identifier	i
>6573	Condition	 
>6574	RelationalExpression	i < _images . size ( )
>6575	CallExpression	_images . size ( )
>6576	ArgumentList	 
>6577	Callee	_images . size
>6578	MemberAccess	_images . size
>6579	Identifier	size
>6580	Identifier	_images
>6581	Identifier	i
>6582	ForInit	 
>6583	IdentifierDeclStatement	unsigned i = 0 ;
>6584	IdentifierDecl	i = 0
>6585	AssignmentExpr	i = 0
>6586	PrimaryExpression	0
>6587	Identifier	i
>6588	Identifier	i
>6589	IdentifierDeclType	unsigned
>6590	ExpressionStatement	 
>6591	CallExpression	storage . defragment ( )
>6592	ArgumentList	 
>6593	Callee	storage . defragment
>6594	MemberAccess	storage . defragment
>6595	Identifier	defragment
>6596	Identifier	storage
>6597	ExpressionStatement	 
>6598	CallExpression	storage . clear ( )
>6599	ArgumentList	 
>6600	Callee	storage . clear
>6601	MemberAccess	storage . clear
>6602	Identifier	clear
>6603	Identifier	storage
>6604	ExpressionStatement	 
>6605	CallExpression	storage . open ( filestem )
>6606	ArgumentList	filestem
>6607	Argument	filestem
>6608	Identifier	filestem
>6609	Callee	storage . open
>6610	MemberAccess	storage . open
>6611	Identifier	open
>6612	Identifier	storage
>6613	IdentifierDeclStatement	 
>6614	IdentifierDecl	storage
>6615	Identifier	storage
>6616	IdentifierDeclType	drwnPersistentStorage
>6617	ExpressionStatement	 
>6618	Identifier	DRWN_FCN_TIC
>6634	FunctionDef	drwnNNGraph 
>6635	ParameterList	const char * filestem
>6636	Parameter	 
>6637	Identifier	filestem
>6638	ParameterType	const char *
>6639	ReturnType	bool
>6640	CompoundStatement	 
>6641	ReturnStatement	 
>6642	Identifier	true
>6643	ExpressionStatement	 
>6644	Identifier	DRWN_FCN_TOC
>6645	ExpressionStatement	 
>6646	CallExpression	storage . close ( )
>6647	ArgumentList	 
>6648	Callee	storage . close
>6649	MemberAccess	storage . close
>6650	Identifier	close
>6651	Identifier	storage
>6652	ForStatement	for ( unsigned i = 0 ; i < ( unsigned ) storage . numRecords ( ) ; i ++ )
>6653	CompoundStatement	 
>6654	ExpressionStatement	 
>6655	CallExpression	_names . insert ( make_pair ( _images [ i ] . name ( ) , i ) )
>6656	ArgumentList	make_pair ( _images [ i ] . name ( ) , i )
>6657	Argument	make_pair ( _images [ i ] . name ( ) , i )
>6658	CallExpression	make_pair ( _images [ i ] . name ( ) , i )
>6659	ArgumentList	_images [ i ] . name ( )
>6660	Argument	i
>6661	Identifier	i
>6662	Argument	_images [ i ] . name ( )
>6663	CallExpression	_images [ i ] . name ( )
>6664	ArgumentList	 
>6665	Callee	_images [ i ] . name
>6666	MemberAccess	_images [ i ] . name
>6667	Identifier	name
>6668	ArrayIndexing	_images [ i ]
>6669	Identifier	i
>6670	Identifier	_images
>6671	Callee	make_pair
>6672	Identifier	make_pair
>6673	Callee	_names . insert
>6674	MemberAccess	_names . insert
>6675	Identifier	insert
>6676	Identifier	_names
>6677	ExpressionStatement	 
>6678	CallExpression	storage . read ( key . c_str ( ) , & _images [ i ] )
>6679	ArgumentList	key . c_str ( )
>6680	Argument	& _images [ i ]
>6681	UnaryOp	& _images [ i ]
>6682	ArrayIndexing	_images [ i ]
>6683	Identifier	i
>6684	Identifier	_images
>6685	UnaryOperator	&
>6686	Argument	key . c_str ( )
>6687	CallExpression	key . c_str ( )
>6688	ArgumentList	 
>6689	Callee	key . c_str
>6690	MemberAccess	key . c_str
>6691	Identifier	c_str
>6692	Identifier	key
>6693	Callee	storage . read
>6694	MemberAccess	storage . read
>6695	Identifier	read
>6696	Identifier	storage
>6697	IdentifierDeclStatement	 
>6698	IdentifierDecl	key = drwn 
>6699	AssignmentExpr	key = drwn 
>6700	CallExpression	drwn 
>6701	ArgumentList	toString ( i )
>6702	Argument	'0'
>6703	PrimaryExpression	'0'
>6704	Argument	6
>6705	PrimaryExpression	6
>6706	Argument	toString ( i )
>6707	CallExpression	toString ( i )
>6708	ArgumentList	i
>6709	Argument	i
>6710	Identifier	i
>6711	Callee	toString
>6712	Identifier	toString
>6713	Callee	drwn 
>6714	Identifier	drwn 
>6715	Identifier	key
>6716	Identifier	key
>6717	IdentifierDeclType	const string
>6718	IncDecOp	 
>6719	IncDec	++
>6720	Identifier	i
>6721	Condition	 
>6722	RelationalExpression	i < ( unsigned ) storage . numRecords ( )
>6723	CastExpression	( unsigned ) storage . numRecords ( )
>6724	CallExpression	storage . numRecords ( )
>6725	ArgumentList	 
>6726	Callee	storage . numRecords
>6727	MemberAccess	storage . numRecords
>6728	Identifier	numRecords
>6729	Identifier	storage
>6730	CastTarget	unsigned
>6731	Identifier	i
>6732	ForInit	 
>6733	IdentifierDeclStatement	unsigned i = 0 ;
>6734	IdentifierDecl	i = 0
>6735	AssignmentExpr	i = 0
>6736	PrimaryExpression	0
>6737	Identifier	i
>6738	Identifier	i
>6739	IdentifierDeclType	unsigned
>6740	ExpressionStatement	 
>6741	CallExpression	_images . resize ( storage . numRecords ( ) )
>6742	ArgumentList	storage . numRecords ( )
>6743	Argument	storage . numRecords ( )
>6744	CallExpression	storage . numRecords ( )
>6745	ArgumentList	 
>6746	Callee	storage . numRecords
>6747	MemberAccess	storage . numRecords
>6748	Identifier	numRecords
>6749	Identifier	storage
>6750	Callee	_images . resize
>6751	MemberAccess	_images . resize
>6752	Identifier	resize
>6753	Identifier	_images
>6754	ExpressionStatement	 
>6755	CallExpression	storage . open ( filestem )
>6756	ArgumentList	filestem
>6757	Argument	filestem
>6758	Identifier	filestem
>6759	Callee	storage . open
>6760	MemberAccess	storage . open
>6761	Identifier	open
>6762	Identifier	storage
>6763	IdentifierDeclStatement	 
>6764	IdentifierDecl	storage
>6765	Identifier	storage
>6766	IdentifierDeclType	drwnPersistentStorage
>6767	ExpressionStatement	 
>6768	CallExpression	_images . clear ( )
>6769	ArgumentList	 
>6770	Callee	_images . clear
>6771	MemberAccess	_images . clear
>6772	Identifier	clear
>6773	Identifier	_images
>6774	ExpressionStatement	 
>6775	CallExpression	_names . clear ( )
>6776	ArgumentList	 
>6777	Callee	_names . clear
>6778	MemberAccess	_names . clear
>6779	Identifier	clear
>6780	Identifier	_names
>6781	ExpressionStatement	 
>6782	Identifier	DRWN_FCN_TIC
>6803	FunctionDef	drwnNNGraph 
>6804	ParameterList	bool bWithFeatures
>6805	Parameter	 
>6806	Identifier	bWithFeatures
>6807	ParameterType	bool
>6808	ReturnType	drwnNNGraph
>6809	CompoundStatement	 
>6810	ReturnStatement	 
>6811	Identifier	g
>6812	ExpressionStatement	 
>6813	AssignmentExpr	g . _names = _names
>6814	Identifier	_names
>6815	MemberAccess	g . _names
>6816	Identifier	_names
>6817	Identifier	g
>6818	ForStatement	for ( unsigned i = 0 ; i < _images . size ( ) ; i ++ )
>6819	CompoundStatement	 
>6820	ExpressionStatement	 
>6821	CallExpression	g . _images . push_back ( _images [ i ] . clone ( bWithFeatures ) )
>6822	ArgumentList	_images [ i ] . clone ( bWithFeatures )
>6823	Argument	_images [ i ] . clone ( bWithFeatures )
>6824	CallExpression	_images [ i ] . clone ( bWithFeatures )
>6825	ArgumentList	bWithFeatures
>6826	Argument	bWithFeatures
>6827	Identifier	bWithFeatures
>6828	Callee	_images [ i ] . clone
>6829	MemberAccess	_images [ i ] . clone
>6830	Identifier	clone
>6831	ArrayIndexing	_images [ i ]
>6832	Identifier	i
>6833	Identifier	_images
>6834	Callee	g . _images . push_back
>6835	MemberAccess	g . _images . push_back
>6836	Identifier	push_back
>6837	MemberAccess	g . _images
>6838	Identifier	_images
>6839	Identifier	g
>6840	IncDecOp	 
>6841	IncDec	++
>6842	Identifier	i
>6843	Condition	 
>6844	RelationalExpression	i < _images . size ( )
>6845	CallExpression	_images . size ( )
>6846	ArgumentList	 
>6847	Callee	_images . size
>6848	MemberAccess	_images . size
>6849	Identifier	size
>6850	Identifier	_images
>6851	Identifier	i
>6852	ForInit	 
>6853	IdentifierDeclStatement	unsigned i = 0 ;
>6854	IdentifierDecl	i = 0
>6855	AssignmentExpr	i = 0
>6856	PrimaryExpression	0
>6857	Identifier	i
>6858	Identifier	i
>6859	IdentifierDeclType	unsigned
>6860	ExpressionStatement	 
>6861	CallExpression	g . _images . reserve ( _images . size ( ) )
>6862	ArgumentList	_images . size ( )
>6863	Argument	_images . size ( )
>6864	CallExpression	_images . size ( )
>6865	ArgumentList	 
>6866	Callee	_images . size
>6867	MemberAccess	_images . size
>6868	Identifier	size
>6869	Identifier	_images
>6870	Callee	g . _images . reserve
>6871	MemberAccess	g . _images . reserve
>6872	Identifier	reserve
>6873	MemberAccess	g . _images
>6874	Identifier	_images
>6875	Identifier	g
>6876	IdentifierDeclStatement	 
>6877	IdentifierDecl	g
>6878	Identifier	g
>6879	IdentifierDeclType	drwnNNGraph
>6894	FunctionDef	drwnNNGraph 
>6895	ParameterList	 
>6896	ReturnType	size_t
>6897	CompoundStatement	 
>6898	ReturnStatement	 
>6899	Identifier	n
>6900	ForStatement	for ( unsigned imgIndx = 0 ; imgIndx < _images . size ( ) ; imgIndx ++ )
>6901	CompoundStatement	 
>6902	ExpressionStatement	 
>6903	AssignmentExpr	n += _images [ imgIndx ] . numNodes ( )
>6904	CallExpression	_images [ imgIndx ] . numNodes ( )
>6905	ArgumentList	 
>6906	Callee	_images [ imgIndx ] . numNodes
>6907	MemberAccess	_images [ imgIndx ] . numNodes
>6908	Identifier	numNodes
>6909	ArrayIndexing	_images [ imgIndx ]
>6910	Identifier	imgIndx
>6911	Identifier	_images
>6912	Identifier	n
>6913	IncDecOp	 
>6914	IncDec	++
>6915	Identifier	imgIndx
>6916	Condition	 
>6917	RelationalExpression	imgIndx < _images . size ( )
>6918	CallExpression	_images . size ( )
>6919	ArgumentList	 
>6920	Callee	_images . size
>6921	MemberAccess	_images . size
>6922	Identifier	size
>6923	Identifier	_images
>6924	Identifier	imgIndx
>6925	ForInit	 
>6926	IdentifierDeclStatement	unsigned imgIndx = 0 ;
>6927	IdentifierDecl	imgIndx = 0
>6928	AssignmentExpr	imgIndx = 0
>6929	PrimaryExpression	0
>6930	Identifier	imgIndx
>6931	Identifier	imgIndx
>6932	IdentifierDeclType	unsigned
>6933	IdentifierDeclStatement	 
>6934	IdentifierDecl	n = 0
>6935	AssignmentExpr	n = 0
>6936	PrimaryExpression	0
>6937	Identifier	n
>6938	Identifier	n
>6939	IdentifierDeclType	size_t
>6950	FunctionDef	drwnNNGraph 
>6951	ParameterList	 
>6952	ReturnType	size_t
>6953	CompoundStatement	 
>6954	ReturnStatement	 
>6955	Identifier	n
>6956	ForStatement	for ( unsigned imgIndx = 0 ; imgIndx < _images . size ( ) ; imgIndx ++ )
>6957	CompoundStatement	 
>6958	ForStatement	for ( unsigned segId = 0 ; segId < _images [ imgIndx ] . numNodes ( ) ; segId ++ )
>6959	CompoundStatement	 
>6960	ExpressionStatement	 
>6961	AssignmentExpr	n += _images [ imgIndx ] [ segId ] . edges . size ( )
>6962	CallExpression	_images [ imgIndx ] [ segId ] . edges . size ( )
>6963	ArgumentList	 
>6964	Callee	_images [ imgIndx ] [ segId ] . edges . size
>6965	MemberAccess	_images [ imgIndx ] [ segId ] . edges . size
>6966	Identifier	size
>6967	MemberAccess	_images [ imgIndx ] [ segId ] . edges
>6968	Identifier	edges
>6969	ArrayIndexing	_images [ imgIndx ] [ segId ]
>6970	Identifier	segId
>6971	ArrayIndexing	_images [ imgIndx ]
>6972	Identifier	imgIndx
>6973	Identifier	_images
>6974	Identifier	n
>6975	IncDecOp	 
>6976	IncDec	++
>6977	Identifier	segId
>6978	Condition	 
>6979	RelationalExpression	segId < _images [ imgIndx ] . numNodes ( )
>6980	CallExpression	_images [ imgIndx ] . numNodes ( )
>6981	ArgumentList	 
>6982	Callee	_images [ imgIndx ] . numNodes
>6983	MemberAccess	_images [ imgIndx ] . numNodes
>6984	Identifier	numNodes
>6985	ArrayIndexing	_images [ imgIndx ]
>6986	Identifier	imgIndx
>6987	Identifier	_images
>6988	Identifier	segId
>6989	ForInit	 
>6990	IdentifierDeclStatement	unsigned segId = 0 ;
>6991	IdentifierDecl	segId = 0
>6992	AssignmentExpr	segId = 0
>6993	PrimaryExpression	0
>6994	Identifier	segId
>6995	Identifier	segId
>6996	IdentifierDeclType	unsigned
>6997	IncDecOp	 
>6998	IncDec	++
>6999	Identifier	imgIndx
>7000	Condition	 
>7001	RelationalExpression	imgIndx < _images . size ( )
>7002	CallExpression	_images . size ( )
>7003	ArgumentList	 
>7004	Callee	_images . size
>7005	MemberAccess	_images . size
>7006	Identifier	size
>7007	Identifier	_images
>7008	Identifier	imgIndx
>7009	ForInit	 
>7010	IdentifierDeclStatement	unsigned imgIndx = 0 ;
>7011	IdentifierDecl	imgIndx = 0
>7012	AssignmentExpr	imgIndx = 0
>7013	PrimaryExpression	0
>7014	Identifier	imgIndx
>7015	Identifier	imgIndx
>7016	IdentifierDeclType	unsigned
>7017	IdentifierDeclStatement	 
>7018	IdentifierDecl	n = 0
>7019	AssignmentExpr	n = 0
>7020	PrimaryExpression	0
>7021	Identifier	n
>7022	Identifier	n
>7023	IdentifierDeclType	size_t
>7040	FunctionDef	drwnNNGraph 
>7041	ParameterList	int label
>7042	Parameter	 
>7043	Identifier	label
>7044	ParameterType	int
>7045	ReturnType	size_t
>7046	CompoundStatement	 
>7047	ReturnStatement	 
>7048	Identifier	n
>7049	ForStatement	for ( unsigned imgIndx = 0 ; imgIndx < _images . size ( ) ; imgIndx ++ )
>7050	CompoundStatement	 
>7051	ForStatement	for ( unsigned segId = 0 ; segId < _images [ imgIndx ] . numNodes ( ) ; segId ++ )
>7052	CompoundStatement	 
>7053	IfStatement	if ( _images [ imgIndx ] [ segId ] . label == label )
>7054	CompoundStatement	 
>7055	ExpressionStatement	 
>7056	AssignmentExpr	n += 1
>7057	PrimaryExpression	1
>7058	Identifier	n
>7059	Condition	 
>7060	EqualityExpression	_images [ imgIndx ] [ segId ] . label == label
>7061	Identifier	label
>7062	MemberAccess	_images [ imgIndx ] [ segId ] . label
>7063	Identifier	label
>7064	ArrayIndexing	_images [ imgIndx ] [ segId ]
>7065	Identifier	segId
>7066	ArrayIndexing	_images [ imgIndx ]
>7067	Identifier	imgIndx
>7068	Identifier	_images
>7069	IncDecOp	 
>7070	IncDec	++
>7071	Identifier	segId
>7072	Condition	 
>7073	RelationalExpression	segId < _images [ imgIndx ] . numNodes ( )
>7074	CallExpression	_images [ imgIndx ] . numNodes ( )
>7075	ArgumentList	 
>7076	Callee	_images [ imgIndx ] . numNodes
>7077	MemberAccess	_images [ imgIndx ] . numNodes
>7078	Identifier	numNodes
>7079	ArrayIndexing	_images [ imgIndx ]
>7080	Identifier	imgIndx
>7081	Identifier	_images
>7082	Identifier	segId
>7083	ForInit	 
>7084	IdentifierDeclStatement	unsigned segId = 0 ;
>7085	IdentifierDecl	segId = 0
>7086	AssignmentExpr	segId = 0
>7087	PrimaryExpression	0
>7088	Identifier	segId
>7089	Identifier	segId
>7090	IdentifierDeclType	unsigned
>7091	IncDecOp	 
>7092	IncDec	++
>7093	Identifier	imgIndx
>7094	Condition	 
>7095	RelationalExpression	imgIndx < _images . size ( )
>7096	CallExpression	_images . size ( )
>7097	ArgumentList	 
>7098	Callee	_images . size
>7099	MemberAccess	_images . size
>7100	Identifier	size
>7101	Identifier	_images
>7102	Identifier	imgIndx
>7103	ForInit	 
>7104	IdentifierDeclStatement	unsigned imgIndx = 0 ;
>7105	IdentifierDecl	imgIndx = 0
>7106	AssignmentExpr	imgIndx = 0
>7107	PrimaryExpression	0
>7108	Identifier	imgIndx
>7109	Identifier	imgIndx
>7110	IdentifierDeclType	unsigned
>7111	IdentifierDeclStatement	 
>7112	IdentifierDecl	n = 0
>7113	AssignmentExpr	n = 0
>7114	PrimaryExpression	0
>7115	Identifier	n
>7116	Identifier	n
>7117	IdentifierDeclType	size_t
>7134	FunctionDef	drwnNNGraph 
>7135	ParameterList	const string & baseName
>7136	Parameter	 
>7137	Identifier	baseName
>7138	ParameterType	const string &
>7139	ReturnType	int
>7140	CompoundStatement	 
>7141	ReturnStatement	 
>7142	CastExpression	( int ) it -> second
>7143	PtrMemberAccess	it -> second
>7144	Identifier	second
>7145	Identifier	it
>7146	CastTarget	int
>7147	IfStatement	if ( it == _names . end ( ) )
>7148	ReturnStatement	 
>7149	UnaryOp	- 1
>7150	PrimaryExpression	1
>7151	UnaryOperator	-
>7152	Condition	 
>7153	EqualityExpression	it == _names . end ( )
>7154	CallExpression	_names . end ( )
>7155	ArgumentList	 
>7156	Callee	_names . end
>7157	MemberAccess	_names . end
>7158	Identifier	end
>7159	Identifier	_names
>7160	Identifier	it
>7161	IdentifierDeclStatement	 
>7162	IdentifierDecl	it = _names . find ( baseName )
>7163	AssignmentExpr	it = _names . find ( baseName )
>7164	CallExpression	_names . find ( baseName )
>7165	ArgumentList	baseName
>7166	Argument	baseName
>7167	Identifier	baseName
>7168	Callee	_names . find
>7169	MemberAccess	_names . find
>7170	Identifier	find
>7171	Identifier	_names
>7172	Identifier	it
>7173	Identifier	it
>7174	IdentifierDeclType	map < string , unsigned > 
>7185	FunctionDef	drwnNNGraph 
>7186	ParameterList	const string & baseName , unsigned numNodes
>7187	Parameter	 
>7188	Identifier	numNodes
>7189	ParameterType	unsigned
>7190	Parameter	 
>7191	Identifier	baseName
>7192	ParameterType	const string &
>7193	ReturnType	int
>7194	CompoundStatement	 
>7195	ReturnStatement	 
>7196	CallExpression	appendImage ( drwnNNGraphImage ( baseName , numNodes ) )
>7197	ArgumentList	drwnNNGraphImage ( baseName , numNodes )
>7198	Argument	drwnNNGraphImage ( baseName , numNodes )
>7199	CallExpression	drwnNNGraphImage ( baseName , numNodes )
>7200	ArgumentList	baseName
>7201	Argument	numNodes
>7202	Identifier	numNodes
>7203	Argument	baseName
>7204	Identifier	baseName
>7205	Callee	drwnNNGraphImage
>7206	Identifier	drwnNNGraphImage
>7207	Callee	appendImage
>7208	Identifier	appendImage
>7216	FunctionDef	drwnNNGraph 
>7217	ParameterList	const drwnNNGraphImage & image
>7218	Parameter	 
>7219	Identifier	image
>7220	ParameterType	const drwnNNGraphImage &
>7221	ReturnType	int
>7222	CompoundStatement	 
>7223	ReturnStatement	 
>7224	AdditiveExpression	( int ) _images . size ( ) - 1
>7225	PrimaryExpression	1
>7226	CastExpression	( int ) _images . size ( )
>7227	CallExpression	_images . size ( )
>7228	ArgumentList	 
>7229	Callee	_images . size
>7230	MemberAccess	_images . size
>7231	Identifier	size
>7232	Identifier	_images
>7233	CastTarget	int
>7234	ExpressionStatement	 
>7235	CallExpression	DRWN_LOG_STATUS ( \"...\" << image . name ( ) << \" with \" << _images . back ( ) . numNodes ( ) << \" nodes\" )
>7236	ArgumentList	\"...\" << image . name ( ) << \" with \" << _images . back ( ) . numNodes ( ) << \" nodes\"
>7237	Argument	\"...\" << image . name ( ) << \" with \" << _images . back ( ) . numNodes ( ) << \" nodes\"
>7238	ShiftExpression	\"...\" << image . name ( ) << \" with \" << _images . back ( ) . numNodes ( ) << \" nodes\"
>7239	ShiftExpression	image . name ( ) << \" with \" << _images . back ( ) . numNodes ( ) << \" nodes\"
>7240	ShiftExpression	\" with \" << _images . back ( ) . numNodes ( ) << \" nodes\"
>7241	ShiftExpression	_images . back ( ) . numNodes ( ) << \" nodes\"
>7242	PrimaryExpression	\" nodes\"
>7243	CallExpression	_images . back ( ) . numNodes ( )
>7244	ArgumentList	 
>7245	Callee	_images . back ( ) . numNodes
>7246	MemberAccess	_images . back ( ) . numNodes
>7247	Identifier	numNodes
>7248	CallExpression	_images . back ( )
>7249	ArgumentList	 
>7250	Callee	_images . back
>7251	MemberAccess	_images . back
>7252	Identifier	back
>7253	Identifier	_images
>7254	PrimaryExpression	\" with \"
>7255	CallExpression	image . name ( )
>7256	ArgumentList	 
>7257	Callee	image . name
>7258	MemberAccess	image . name
>7259	Identifier	name
>7260	Identifier	image
>7261	PrimaryExpression	\"...\"
>7262	Callee	DRWN_LOG_STATUS
>7263	Identifier	DRWN_LOG_STATUS
>7264	ExpressionStatement	 
>7265	CallExpression	_images . push_back ( image )
>7266	ArgumentList	image
>7267	Argument	image
>7268	Identifier	image
>7269	Callee	_images . push_back
>7270	MemberAccess	_images . push_back
>7271	Identifier	push_back
>7272	Identifier	_images
>7273	ExpressionStatement	 
>7274	CallExpression	_names . insert ( make_pair ( image . name ( ) , ( unsigned ) _images . size ( ) ) )
>7275	ArgumentList	make_pair ( image . name ( ) , ( unsigned ) _images . size ( ) )
>7276	Argument	make_pair ( image . name ( ) , ( unsigned ) _images . size ( ) )
>7277	CallExpression	make_pair ( image . name ( ) , ( unsigned ) _images . size ( ) )
>7278	ArgumentList	image . name ( )
>7279	Argument	( unsigned ) _images . size ( )
>7280	CastExpression	( unsigned ) _images . size ( )
>7281	CallExpression	_images . size ( )
>7282	ArgumentList	 
>7283	Callee	_images . size
>7284	MemberAccess	_images . size
>7285	Identifier	size
>7286	Identifier	_images
>7287	CastTarget	unsigned
>7288	Argument	image . name ( )
>7289	CallExpression	image . name ( )
>7290	ArgumentList	 
>7291	Callee	image . name
>7292	MemberAccess	image . name
>7293	Identifier	name
>7294	Identifier	image
>7295	Callee	make_pair
>7296	Identifier	make_pair
>7297	Callee	_names . insert
>7298	MemberAccess	_names . insert
>7299	Identifier	insert
>7300	Identifier	_names
>7301	IfStatement	if ( imgIndex != - 1 )
>7302	CompoundStatement	 
>7303	ReturnStatement	 
>7304	Identifier	imgIndex
>7305	ExpressionStatement	 
>7306	CallExpression	DRWN_LOG_ERROR ( image . name ( ) << \" already exists in the graph\" )
>7307	ArgumentList	image . name ( ) << \" already exists in the graph\"
>7308	Argument	image . name ( ) << \" already exists in the graph\"
>7309	ShiftExpression	image . name ( ) << \" already exists in the graph\"
>7310	PrimaryExpression	\" already exists in the graph\"
>7311	CallExpression	image . name ( )
>7312	ArgumentList	 
>7313	Callee	image . name
>7314	MemberAccess	image . name
>7315	Identifier	name
>7316	Identifier	image
>7317	Callee	DRWN_LOG_ERROR
>7318	Identifier	DRWN_LOG_ERROR
>7319	Condition	 
>7320	EqualityExpression	imgIndex != - 1
>7321	UnaryOp	- 1
>7322	PrimaryExpression	1
>7323	UnaryOperator	-
>7324	Identifier	imgIndex
>7325	IdentifierDeclStatement	 
>7326	IdentifierDecl	imgIndex = findImage ( image . name ( ) )
>7327	AssignmentExpr	imgIndex = findImage ( image . name ( ) )
>7328	CallExpression	findImage ( image . name ( ) )
>7329	ArgumentList	image . name ( )
>7330	Argument	image . name ( )
>7331	CallExpression	image . name ( )
>7332	ArgumentList	 
>7333	Callee	image . name
>7334	MemberAccess	image . name
>7335	Identifier	name
>7336	Identifier	image
>7337	Callee	findImage
>7338	Identifier	findImage
>7339	Identifier	imgIndex
>7340	Identifier	imgIndex
>7341	IdentifierDeclType	const int
>7355	FunctionDef	drwnNNGraph 
>7356	ParameterList	unsigned imgIndx
>7357	Parameter	 
>7358	Identifier	imgIndx
>7359	ParameterType	unsigned
>7360	ReturnType	int
>7361	CompoundStatement	 
>7362	ReturnStatement	 
>7363	UnaryOp	- 1
>7364	PrimaryExpression	1
>7365	UnaryOperator	-
>7366	ExpressionStatement	 
>7367	Identifier	DRWN_TODO
>7372	FunctionDef	drwnNNGraph 
>7373	ParameterList	 
>7374	ReturnType	pair < double , double >
>7375	CompoundStatement	 
>7376	ReturnStatement	 
>7377	CallExpression	make_pair ( totalEnergy , bestEnergy )
>7378	ArgumentList	totalEnergy
>7379	Argument	bestEnergy
>7380	Identifier	bestEnergy
>7381	Argument	totalEnergy
>7382	Identifier	totalEnergy
>7383	Callee	make_pair
>7384	Identifier	make_pair
>7385	ExpressionStatement	 
>7386	Identifier	DRWN_FCN_TOC
>7387	ForStatement	for ( unsigned imgIndx = 0 ; imgIndx < _images . size ( ) ; imgIndx ++ )
>7388	CompoundStatement	 
>7389	ForStatement	for ( unsigned segId = 0 ; segId < _images [ imgIndx ] . numNodes ( ) ; segId ++ )
>7390	CompoundStatement	 
>7391	ForStatement	for ( drwnNNGraphEdgeList 
>7392	CompoundStatement	 
>7393	ExpressionStatement	 
>7394	AssignmentExpr	totalEnergy += kt -> weight
>7395	PtrMemberAccess	kt -> weight
>7396	Identifier	weight
>7397	Identifier	kt
>7398	Identifier	totalEnergy
>7399	UnaryExpression	 
>7400	Identifier	kt
>7401	IncDec	++
>7402	Condition	 
>7403	EqualityExpression	kt != e . end ( )
>7404	CallExpression	e . end ( )
>7405	ArgumentList	 
>7406	Callee	e . end
>7407	MemberAccess	e . end
>7408	Identifier	end
>7409	Identifier	e
>7410	Identifier	kt
>7411	ForInit	 
>7412	IdentifierDeclStatement	drwnNNGraphEdgeList 
>7413	IdentifierDecl	kt = e . begin ( )
>7414	AssignmentExpr	kt = e . begin ( )
>7415	CallExpression	e . begin ( )
>7416	ArgumentList	 
>7417	Callee	e . begin
>7418	MemberAccess	e . begin
>7419	Identifier	begin
>7420	Identifier	e
>7421	Identifier	kt
>7422	Identifier	kt
>7423	IdentifierDeclType	drwnNNGraphEdgeList 
>7424	ExpressionStatement	 
>7425	AssignmentExpr	bestEnergy += e . front ( ) . weight
>7426	MemberAccess	e . front ( ) . weight
>7427	Identifier	weight
>7428	CallExpression	e . front ( )
>7429	ArgumentList	 
>7430	Callee	e . front
>7431	MemberAccess	e . front
>7432	Identifier	front
>7433	Identifier	e
>7434	Identifier	bestEnergy
>7435	IfStatement	if ( e . empty ( ) )
>7436	ContinueStatement	 
>7437	Condition	 
>7438	CallExpression	e . empty ( )
>7439	ArgumentList	 
>7440	Callee	e . empty
>7441	MemberAccess	e . empty
>7442	Identifier	empty
>7443	Identifier	e
>7444	IdentifierDeclStatement	 
>7445	IdentifierDecl	& e = _images [ imgIndx ] [ segId ] . edges
>7446	AssignmentExpr	& e = _images [ imgIndx ] [ segId ] . edges
>7447	MemberAccess	_images [ imgIndx ] [ segId ] . edges
>7448	Identifier	edges
>7449	ArrayIndexing	_images [ imgIndx ] [ segId ]
>7450	Identifier	segId
>7451	ArrayIndexing	_images [ imgIndx ]
>7452	Identifier	imgIndx
>7453	Identifier	_images
>7454	Identifier	e
>7455	Identifier	e
>7456	IdentifierDeclType	const drwnNNGraphEdgeList &
>7457	IncDecOp	 
>7458	IncDec	++
>7459	Identifier	segId
>7460	Condition	 
>7461	RelationalExpression	segId < _images [ imgIndx ] . numNodes ( )
>7462	CallExpression	_images [ imgIndx ] . numNodes ( )
>7463	ArgumentList	 
>7464	Callee	_images [ imgIndx ] . numNodes
>7465	MemberAccess	_images [ imgIndx ] . numNodes
>7466	Identifier	numNodes
>7467	ArrayIndexing	_images [ imgIndx ]
>7468	Identifier	imgIndx
>7469	Identifier	_images
>7470	Identifier	segId
>7471	ForInit	 
>7472	IdentifierDeclStatement	unsigned segId = 0 ;
>7473	IdentifierDecl	segId = 0
>7474	AssignmentExpr	segId = 0
>7475	PrimaryExpression	0
>7476	Identifier	segId
>7477	Identifier	segId
>7478	IdentifierDeclType	unsigned
>7479	IncDecOp	 
>7480	IncDec	++
>7481	Identifier	imgIndx
>7482	Condition	 
>7483	RelationalExpression	imgIndx < _images . size ( )
>7484	CallExpression	_images . size ( )
>7485	ArgumentList	 
>7486	Callee	_images . size
>7487	MemberAccess	_images . size
>7488	Identifier	size
>7489	Identifier	_images
>7490	Identifier	imgIndx
>7491	ForInit	 
>7492	IdentifierDeclStatement	unsigned imgIndx = 0 ;
>7493	IdentifierDecl	imgIndx = 0
>7494	AssignmentExpr	imgIndx = 0
>7495	PrimaryExpression	0
>7496	Identifier	imgIndx
>7497	Identifier	imgIndx
>7498	IdentifierDeclType	unsigned
>7499	IdentifierDeclStatement	 
>7500	IdentifierDecl	bestEnergy = 0.0
>7501	AssignmentExpr	bestEnergy = 0.0
>7502	PrimaryExpression	0.0
>7503	Identifier	bestEnergy
>7504	Identifier	bestEnergy
>7505	IdentifierDeclType	double
>7506	IdentifierDeclStatement	 
>7507	IdentifierDecl	totalEnergy = 0.0
>7508	AssignmentExpr	totalEnergy = 0.0
>7509	PrimaryExpression	0.0
>7510	Identifier	totalEnergy
>7511	Identifier	totalEnergy
>7512	IdentifierDeclType	double
>7513	ExpressionStatement	 
>7514	Identifier	DRWN_FCN_TIC
>7542	FunctionDef	drwnNNGraphConfig ()
>7543	ParameterList	 
>7544	CompoundStatement	 
>7548	FunctionDef	~drwnNNGraphConfig ()
>7549	ParameterList	 
>7550	CompoundStatement	 
>7554	FunctionDef	usage (ostream & os)
>7555	ParameterList	ostream & os
>7556	Parameter	 
>7557	Identifier	os
>7558	ParameterType	ostream &
>7559	ReturnType	void
>7560	CompoundStatement	 
>7561	ExpressionStatement	 
>7562	ShiftExpression	os << \"      segExt           
>7563	ShiftExpression	\"      segExt           
>7564	ShiftExpression	drwnNNGraphImageData 
>7565	PrimaryExpression	\")\n\"
>7566	Identifier	drwnNNGraphImageData 
>7567	PrimaryExpression	\"      segExt           
>7568	Identifier	os
>7569	ExpressionStatement	 
>7570	ShiftExpression	os << \"      segDir           
>7571	ShiftExpression	\"      segDir           
>7572	ShiftExpression	drwnNNGraphImageData 
>7573	PrimaryExpression	\")\n\"
>7574	Identifier	drwnNNGraphImageData 
>7575	PrimaryExpression	\"      segDir           
>7576	Identifier	os
>7577	ExpressionStatement	 
>7578	ShiftExpression	os << \"      lblExt           
>7579	ShiftExpression	\"      lblExt           
>7580	ShiftExpression	drwnNNGraphImageData 
>7581	PrimaryExpression	\")\n\"
>7582	Identifier	drwnNNGraphImageData 
>7583	PrimaryExpression	\"      lblExt           
>7584	Identifier	os
>7585	ExpressionStatement	 
>7586	ShiftExpression	os << \"      lblDir           
>7587	ShiftExpression	\"      lblDir           
>7588	ShiftExpression	drwnNNGraphImageData 
>7589	PrimaryExpression	\")\n\"
>7590	Identifier	drwnNNGraphImageData 
>7591	PrimaryExpression	\"      lblDir           
>7592	Identifier	os
>7593	ExpressionStatement	 
>7594	ShiftExpression	os << \"      imgExt           
>7595	ShiftExpression	\"      imgExt           
>7596	ShiftExpression	drwnNNGraphImageData 
>7597	PrimaryExpression	\")\n\"
>7598	Identifier	drwnNNGraphImageData 
>7599	PrimaryExpression	\"      imgExt           
>7600	Identifier	os
>7601	ExpressionStatement	 
>7602	ShiftExpression	os << \"      imgDir           
>7603	ShiftExpression	\"      imgDir           
>7604	ShiftExpression	drwnNNGraphImageData 
>7605	PrimaryExpression	\")\n\"
>7606	Identifier	drwnNNGraphImageData 
>7607	PrimaryExpression	\"      imgDir           
>7608	Identifier	os
>7609	ExpressionStatement	 
>7610	ShiftExpression	os << \"      randExhaustive   
>7611	ShiftExpression	\"      randExhaustive   
>7612	ShiftExpression	drwnNNGraph 
>7613	PrimaryExpression	\")\n\"
>7614	Identifier	drwnNNGraph 
>7615	PrimaryExpression	\"      randExhaustive   
>7616	Identifier	os
>7617	ExpressionStatement	 
>7618	ShiftExpression	os << \"      enrichmentMove   
>7619	ShiftExpression	\"      enrichmentMove   
>7620	ShiftExpression	( drwnNNGraph 
>7621	PrimaryExpression	\")\n\"
>7622	ConditionalExpression	drwnNNGraph 
>7623	PrimaryExpression	\"no\"
>7624	PrimaryExpression	\"yes\"
>7625	Condition	drwnNNGraph 
>7626	Identifier	drwnNNGraph 
>7627	PrimaryExpression	\"      enrichmentMove   
>7628	Identifier	os
>7629	ExpressionStatement	 
>7630	ShiftExpression	os << \"      randProjMove     
>7631	ShiftExpression	\"      randProjMove     
>7632	ShiftExpression	( drwnNNGraph 
>7633	PrimaryExpression	\")\n\"
>7634	Identifier	drwnNNGraph 
>7635	PrimaryExpression	\"      randProjMove     
>7636	Identifier	os
>7637	ExpressionStatement	 
>7638	ShiftExpression	os << \"      localMove        
>7639	ShiftExpression	\"      localMove        
>7640	ShiftExpression	( drwnNNGraph 
>7641	PrimaryExpression	\")\n\"
>7642	ConditionalExpression	drwnNNGraph 
>7643	PrimaryExpression	\"no\"
>7644	PrimaryExpression	\"yes\"
>7645	Condition	drwnNNGraph 
>7646	Identifier	drwnNNGraph 
>7647	PrimaryExpression	\"      localMove        
>7648	Identifier	os
>7649	ExpressionStatement	 
>7650	ShiftExpression	os << \"      searchMove       
>7651	ShiftExpression	\"      searchMove       
>7652	ShiftExpression	( drwnNNGraph 
>7653	PrimaryExpression	\")\n\"
>7654	ConditionalExpression	drwnNNGraph 
>7655	PrimaryExpression	\"no\"
>7656	PrimaryExpression	\"yes\"
>7657	Condition	drwnNNGraph 
>7658	Identifier	drwnNNGraph 
>7659	PrimaryExpression	\"      searchMove       
>7660	Identifier	os
>7661	ExpressionStatement	 
>7662	ShiftExpression	os << \"      propagateMove    
>7663	ShiftExpression	\"      propagateMove    
>7664	ShiftExpression	( drwnNNGraph 
>7665	PrimaryExpression	\")\n\"
>7666	ConditionalExpression	drwnNNGraph 
>7667	PrimaryExpression	\"no\"
>7668	PrimaryExpression	\"yes\"
>7669	Condition	drwnNNGraph 
>7670	Identifier	drwnNNGraph 
>7671	PrimaryExpression	\"      propagateMove    
>7672	Identifier	os
>7673	ExpressionStatement	 
>7674	ShiftExpression	os << \"      K                
>7675	ShiftExpression	\"      K                
>7676	ShiftExpression	drwnNNGraph 
>7677	PrimaryExpression	\")\n\"
>7678	Identifier	drwnNNGraph 
>7679	PrimaryExpression	\"      K                
>7680	Identifier	os
>7689	FunctionDef	setConfiguration (const char * name , const char * value)
>7690	ParameterList	const char * name , const char * value
>7691	Parameter	 
>7692	Identifier	value
>7693	ParameterType	const char *
>7694	Parameter	 
>7695	Identifier	name
>7696	ParameterType	const char *
>7697	ReturnType	void
>7698	CompoundStatement	 
>7699	IfStatement	if ( ! strcmp ( name , \"K\" ) )
>7700	ElseStatement	else
>7701	IfStatement	if ( ! strcmp ( name , \"propagateMove\" ) )
>7702	ElseStatement	else
>7703	IfStatement	if ( ! strcmp ( name , \"searchMove\" ) )
>7704	ElseStatement	else
>7705	IfStatement	if ( ! strcmp ( name , \"localMove\" ) )
>7706	ElseStatement	else
>7707	IfStatement	if ( ! strcmp ( name , \"randProjMove\" ) )
>7708	ElseStatement	else
>7709	IfStatement	if ( ! strcmp ( name , \"enrichmentMove\" ) )
>7710	ElseStatement	else
>7711	IfStatement	if ( ! strcmp ( name , \"randExhaustive\" ) )
>7712	ElseStatement	else
>7713	IfStatement	if ( ! strcmp ( name , \"imgDir\" ) )
>7714	ElseStatement	else
>7715	IfStatement	if ( ! strcmp ( name , \"imgExt\" ) )
>7716	ElseStatement	else
>7717	IfStatement	if ( ! strcmp ( name , \"lblDir\" ) )
>7718	ElseStatement	else
>7719	IfStatement	if ( ! strcmp ( name , \"lblExt\" ) )
>7720	ElseStatement	else
>7721	IfStatement	if ( ! strcmp ( name , \"segDir\" ) )
>7722	ElseStatement	else
>7723	IfStatement	if ( ! strcmp ( name , \"segExt\" ) )
>7724	ElseStatement	else
>7725	CompoundStatement	 
>7726	ExpressionStatement	 
>7727	CallExpression	DRWN_LOG_FATAL ( \"unrecognized configuration option \" << name << \" for \" << this -> name ( ) )
>7728	ArgumentList	\"unrecognized configuration option \" << name << \" for \" << this -> name ( )
>7729	Argument	\"unrecognized configuration option \" << name << \" for \" << this -> name ( )
>7730	ShiftExpression	\"unrecognized configuration option \" << name << \" for \" << this -> name ( )
>7731	ShiftExpression	name << \" for \" << this -> name ( )
>7732	ShiftExpression	\" for \" << this -> name ( )
>7733	CallExpression	this -> name ( )
>7734	ArgumentList	 
>7735	Callee	this -> name
>7736	PtrMemberAccess	this -> name
>7737	Identifier	name
>7738	Identifier	this
>7739	PrimaryExpression	\" for \"
>7740	Identifier	name
>7741	PrimaryExpression	\"unrecognized configuration option \"
>7742	Callee	DRWN_LOG_FATAL
>7743	Identifier	DRWN_LOG_FATAL
>7744	CompoundStatement	 
>7745	ExpressionStatement	 
>7746	AssignmentExpr	drwnNNGraphImageData 
>7747	CallExpression	string ( value )
>7748	ArgumentList	value
>7749	Argument	value
>7750	Identifier	value
>7751	Callee	string
>7752	Identifier	string
>7753	Identifier	drwnNNGraphImageData 
>7754	Condition	 
>7755	UnaryOp	! strcmp ( name , \"segExt\" )
>7756	CallExpression	strcmp ( name , \"segExt\" )
>7757	ArgumentList	name
>7758	Argument	\"segExt\"
>7759	PrimaryExpression	\"segExt\"
>7760	Argument	name
>7761	Identifier	name
>7762	Callee	strcmp
>7763	Identifier	strcmp
>7764	UnaryOperator	!
>7765	CompoundStatement	 
>7766	ExpressionStatement	 
>7767	AssignmentExpr	drwnNNGraphImageData 
>7768	CallExpression	string ( value )
>7769	ArgumentList	value
>7770	Argument	value
>7771	Identifier	value
>7772	Callee	string
>7773	Identifier	string
>7774	Identifier	drwnNNGraphImageData 
>7775	Condition	 
>7776	UnaryOp	! strcmp ( name , \"segDir\" )
>7777	CallExpression	strcmp ( name , \"segDir\" )
>7778	ArgumentList	name
>7779	Argument	\"segDir\"
>7780	PrimaryExpression	\"segDir\"
>7781	Argument	name
>7782	Identifier	name
>7783	Callee	strcmp
>7784	Identifier	strcmp
>7785	UnaryOperator	!
>7786	CompoundStatement	 
>7787	ExpressionStatement	 
>7788	AssignmentExpr	drwnNNGraphImageData 
>7789	CallExpression	string ( value )
>7790	ArgumentList	value
>7791	Argument	value
>7792	Identifier	value
>7793	Callee	string
>7794	Identifier	string
>7795	Identifier	drwnNNGraphImageData 
>7796	Condition	 
>7797	UnaryOp	! strcmp ( name , \"lblExt\" )
>7798	CallExpression	strcmp ( name , \"lblExt\" )
>7799	ArgumentList	name
>7800	Argument	\"lblExt\"
>7801	PrimaryExpression	\"lblExt\"
>7802	Argument	name
>7803	Identifier	name
>7804	Callee	strcmp
>7805	Identifier	strcmp
>7806	UnaryOperator	!
>7807	CompoundStatement	 
>7808	ExpressionStatement	 
>7809	AssignmentExpr	drwnNNGraphImageData 
>7810	CallExpression	string ( value )
>7811	ArgumentList	value
>7812	Argument	value
>7813	Identifier	value
>7814	Callee	string
>7815	Identifier	string
>7816	Identifier	drwnNNGraphImageData 
>7817	Condition	 
>7818	UnaryOp	! strcmp ( name , \"lblDir\" )
>7819	CallExpression	strcmp ( name , \"lblDir\" )
>7820	ArgumentList	name
>7821	Argument	\"lblDir\"
>7822	PrimaryExpression	\"lblDir\"
>7823	Argument	name
>7824	Identifier	name
>7825	Callee	strcmp
>7826	Identifier	strcmp
>7827	UnaryOperator	!
>7828	CompoundStatement	 
>7829	ExpressionStatement	 
>7830	AssignmentExpr	drwnNNGraphImageData 
>7831	CallExpression	string ( value )
>7832	ArgumentList	value
>7833	Argument	value
>7834	Identifier	value
>7835	Callee	string
>7836	Identifier	string
>7837	Identifier	drwnNNGraphImageData 
>7838	Condition	 
>7839	UnaryOp	! strcmp ( name , \"imgExt\" )
>7840	CallExpression	strcmp ( name , \"imgExt\" )
>7841	ArgumentList	name
>7842	Argument	\"imgExt\"
>7843	PrimaryExpression	\"imgExt\"
>7844	Argument	name
>7845	Identifier	name
>7846	Callee	strcmp
>7847	Identifier	strcmp
>7848	UnaryOperator	!
>7849	CompoundStatement	 
>7850	ExpressionStatement	 
>7851	AssignmentExpr	drwnNNGraphImageData 
>7852	CallExpression	string ( value )
>7853	ArgumentList	value
>7854	Argument	value
>7855	Identifier	value
>7856	Callee	string
>7857	Identifier	string
>7858	Identifier	drwnNNGraphImageData 
>7859	Condition	 
>7860	UnaryOp	! strcmp ( name , \"imgDir\" )
>7861	CallExpression	strcmp ( name , \"imgDir\" )
>7862	ArgumentList	name
>7863	Argument	\"imgDir\"
>7864	PrimaryExpression	\"imgDir\"
>7865	Argument	name
>7866	Identifier	name
>7867	Callee	strcmp
>7868	Identifier	strcmp
>7869	UnaryOperator	!
>7870	CompoundStatement	 
>7871	ExpressionStatement	 
>7872	AssignmentExpr	drwnNNGraph 
>7873	CallExpression	atoi ( value )
>7874	ArgumentList	value
>7875	Argument	value
>7876	Identifier	value
>7877	Callee	atoi
>7878	Identifier	atoi
>7879	Identifier	drwnNNGraph 
>7880	Condition	 
>7881	UnaryOp	! strcmp ( name , \"randExhaustive\" )
>7882	CallExpression	strcmp ( name , \"randExhaustive\" )
>7883	ArgumentList	name
>7884	Argument	\"randExhaustive\"
>7885	PrimaryExpression	\"randExhaustive\"
>7886	Argument	name
>7887	Identifier	name
>7888	Callee	strcmp
>7889	Identifier	strcmp
>7890	UnaryOperator	!
>7891	CompoundStatement	 
>7892	ExpressionStatement	 
>7893	AssignmentExpr	drwnNNGraph 
>7894	CallExpression	drwn 
>7895	ArgumentList	string ( value )
>7896	Argument	string ( value )
>7897	CallExpression	string ( value )
>7898	ArgumentList	value
>7899	Argument	value
>7900	Identifier	value
>7901	Callee	string
>7902	Identifier	string
>7903	Callee	drwn 
>7904	Identifier	drwn 
>7905	Identifier	drwnNNGraph 
>7906	Condition	 
>7907	UnaryOp	! strcmp ( name , \"enrichmentMove\" )
>7908	CallExpression	strcmp ( name , \"enrichmentMove\" )
>7909	ArgumentList	name
>7910	Argument	\"enrichmentMove\"
>7911	PrimaryExpression	\"enrichmentMove\"
>7912	Argument	name
>7913	Identifier	name
>7914	Callee	strcmp
>7915	Identifier	strcmp
>7916	UnaryOperator	!
>7917	CompoundStatement	 
>7918	ExpressionStatement	 
>7919	AssignmentExpr	drwnNNGraph 
>7920	CallExpression	atoi ( value )
>7921	ArgumentList	value
>7922	Argument	value
>7923	Identifier	value
>7924	Callee	atoi
>7925	Identifier	atoi
>7926	Identifier	drwnNNGraph 
>7927	Condition	 
>7928	UnaryOp	! strcmp ( name , \"randProjMove\" )
>7929	CallExpression	strcmp ( name , \"randProjMove\" )
>7930	ArgumentList	name
>7931	Argument	\"randProjMove\"
>7932	PrimaryExpression	\"randProjMove\"
>7933	Argument	name
>7934	Identifier	name
>7935	Callee	strcmp
>7936	Identifier	strcmp
>7937	UnaryOperator	!
>7938	CompoundStatement	 
>7939	ExpressionStatement	 
>7940	AssignmentExpr	drwnNNGraph 
>7941	CallExpression	drwn 
>7942	ArgumentList	string ( value )
>7943	Argument	string ( value )
>7944	CallExpression	string ( value )
>7945	ArgumentList	value
>7946	Argument	value
>7947	Identifier	value
>7948	Callee	string
>7949	Identifier	string
>7950	Callee	drwn 
>7951	Identifier	drwn 
>7952	Identifier	drwnNNGraph 
>7953	Condition	 
>7954	UnaryOp	! strcmp ( name , \"localMove\" )
>7955	CallExpression	strcmp ( name , \"localMove\" )
>7956	ArgumentList	name
>7957	Argument	\"localMove\"
>7958	PrimaryExpression	\"localMove\"
>7959	Argument	name
>7960	Identifier	name
>7961	Callee	strcmp
>7962	Identifier	strcmp
>7963	UnaryOperator	!
>7964	CompoundStatement	 
>7965	ExpressionStatement	 
>7966	AssignmentExpr	drwnNNGraph 
>7967	CallExpression	drwn 
>7968	ArgumentList	string ( value )
>7969	Argument	string ( value )
>7970	CallExpression	string ( value )
>7971	ArgumentList	value
>7972	Argument	value
>7973	Identifier	value
>7974	Callee	string
>7975	Identifier	string
>7976	Callee	drwn 
>7977	Identifier	drwn 
>7978	Identifier	drwnNNGraph 
>7979	Condition	 
>7980	UnaryOp	! strcmp ( name , \"searchMove\" )
>7981	CallExpression	strcmp ( name , \"searchMove\" )
>7982	ArgumentList	name
>7983	Argument	\"searchMove\"
>7984	PrimaryExpression	\"searchMove\"
>7985	Argument	name
>7986	Identifier	name
>7987	Callee	strcmp
>7988	Identifier	strcmp
>7989	UnaryOperator	!
>7990	CompoundStatement	 
>7991	ExpressionStatement	 
>7992	AssignmentExpr	drwnNNGraph 
>7993	CallExpression	drwn 
>7994	ArgumentList	string ( value )
>7995	Argument	string ( value )
>7996	CallExpression	string ( value )
>7997	ArgumentList	value
>7998	Argument	value
>7999	Identifier	value
>8000	Callee	string
>8001	Identifier	string
>8002	Callee	drwn 
>8003	Identifier	drwn 
>8004	Identifier	drwnNNGraph 
>8005	Condition	 
>8006	UnaryOp	! strcmp ( name , \"propagateMove\" )
>8007	CallExpression	strcmp ( name , \"propagateMove\" )
>8008	ArgumentList	name
>8009	Argument	\"propagateMove\"
>8010	PrimaryExpression	\"propagateMove\"
>8011	Argument	name
>8012	Identifier	name
>8013	Callee	strcmp
>8014	Identifier	strcmp
>8015	UnaryOperator	!
>8016	CompoundStatement	 
>8017	ExpressionStatement	 
>8018	AssignmentExpr	drwnNNGraph 
>8019	CallExpression	std 
>8020	ArgumentList	1
>8021	Argument	atoi ( value )
>8022	CallExpression	atoi ( value )
>8023	ArgumentList	value
>8024	Argument	value
>8025	Identifier	value
>8026	Callee	atoi
>8027	Identifier	atoi
>8028	Argument	1
>8029	PrimaryExpression	1
>8030	Callee	std 
>8031	Identifier	std 
>8032	Identifier	drwnNNGraph 
>8033	Condition	 
>8034	UnaryOp	! strcmp ( name , \"K\" )
>8035	CallExpression	strcmp ( name , \"K\" )
>8036	ArgumentList	name
>8037	Argument	\"K\"
>8038	PrimaryExpression	\"K\"
>8039	Argument	name
>8040	Identifier	name
>8041	Callee	strcmp
>8042	Identifier	strcmp
>8043	UnaryOperator	!
<3=6,5,4
<6=27,21,14,7
<7=8
<8=10,9
<10=11
<11=13,12
<14=15
<15=17,16
<17=18
<18=20,19
<21=22
<22=26,23
<23=25,24
<27=28
<28=33,29
<29=31,30
<31=32
<42=48,47,43
<43=44
<44=46,45
<48=166,79,72,65,51,49
<49=50
<51=52
<52=61,53
<53=59,54
<54=55
<55=57,56
<57=58
<59=60
<61=62
<62=64,63
<65=66
<66=71,70,67
<67=69,68
<72=73
<73=75,74
<75=76
<76=78,77
<79=153,144,141,80
<80=81
<81=129,82
<82=83
<83=121,88,84
<84=85
<85=86
<86=87
<88=112,105,91,89
<89=90
<91=92
<92=101,93
<93=99,94
<94=95
<95=97,96
<97=98
<99=100
<101=102
<102=104,103
<105=106
<106=111,110,107
<107=109,108
<112=113
<113=117,114
<114=115
<115=116
<117=118
<118=120,119
<121=122
<122=126,123
<123=125,124
<126=128,127
<129=130
<130=136,131
<131=133,132
<133=135,134
<136=138,137
<138=140,139
<141=143,142
<144=145
<145=152,146
<146=148,147
<148=149
<149=151,150
<153=154
<154=155
<155=165,164,156
<156=163,157
<157=159,158
<159=160
<160=162,161
<166=169,167
<167=168
<169=170
<170=183,171
<171=180,172
<172=174,173
<174=176,175
<176=177
<177=179,178
<180=182,181
<183=185,184
<185=186
<186=188,187
<211=214,213,212
<214=280,263,257,234,217,215
<215=216
<217=218
<218=233,219
<219=230,220
<220=224,221
<221=223,222
<224=226,225
<226=227
<227=229,228
<230=232,231
<234=235
<235=256,236
<236=253,237
<237=247,238
<238=242,239
<239=241,240
<242=246,243
<243=245,244
<247=249,248
<249=250
<250=252,251
<253=255,254
<257=258
<258=262,259
<259=261,260
<263=264
<264=279,265
<265=276,266
<266=270,267
<267=269,268
<270=272,271
<272=273
<273=275,274
<276=278,277
<280=281
<281=286,285,282
<282=284,283
<297=303,302,298
<298=299
<299=301,300
<303=543,539,522,513,492,475,458,376,359,306,304
<304=305
<306=355,307
<307=350,329,308
<308=309
<309=325,310
<310=318,311
<311=312
<312=314,313
<314=315
<315=317,316
<318=319
<319=321,320
<321=322
<322=324,323
<325=326
<326=328,327
<329=330
<330=346,331
<331=338,332
<332=333
<333=337,334
<334=336,335
<338=339
<339=345,340
<340=344,341
<341=343,342
<346=347
<347=349,348
<350=351
<351=354,353,352
<355=356
<356=358,357
<359=360
<360=372,361
<361=366,362
<362=363
<363=365,364
<366=367
<367=371,368
<368=370,369
<372=373
<373=375,374
<376=452,377
<377=448,427,406,387,378
<378=379
<379=383,380
<380=381
<381=382
<383=384
<384=386,385
<387=388
<388=402,389
<389=394,390
<390=391
<391=393,392
<394=395
<395=401,396
<396=400,397
<397=399,398
<402=403
<403=405,404
<406=407
<407=423,408
<408=413,409
<409=410
<410=412,411
<413=414
<414=422,415
<415=421,416
<416=418,417
<418=420,419
<423=424
<424=426,425
<427=428
<428=444,429
<429=434,430
<430=431
<431=433,432
<434=435
<435=443,436
<436=442,437
<437=439,438
<439=441,440
<444=445
<445=447,446
<448=449
<449=451,450
<452=453
<453=455,454
<455=457,456
<458=459
<459=471,460
<460=465,461
<461=462
<462=464,463
<465=466
<466=470,467
<467=469,468
<471=472
<472=474,473
<475=476
<476=488,477
<477=482,478
<478=479
<479=481,480
<482=483
<483=487,484
<484=486,485
<488=489
<489=491,490
<492=493
<493=509,494
<494=501,495
<495=496
<496=500,497
<497=499,498
<501=502
<502=508,503
<503=507,504
<504=506,505
<509=510
<510=512,511
<513=514
<514=521,515
<515=519,516
<516=517
<517=518
<519=520
<522=523
<523=535,524
<524=529,525
<525=526
<526=528,527
<529=530
<530=534,531
<531=533,532
<535=536
<536=538,537
<539=540
<540=542,541
<543=544
<544=546,545
<546=547
<572=578,577,573
<573=574
<574=576,575
<578=820,803,782,765,756,739,651,642,625,581,579
<579=580
<581=621,582
<582=604,583
<583=584
<584=600,585
<585=592,586
<586=587
<587=591,588
<588=590,589
<592=593
<593=599,594
<594=598,595
<595=597,596
<600=601
<601=603,602
<604=605
<605=620,619,606
<606=613,607
<607=609,608
<609=610
<610=612,611
<613=615,614
<615=616
<616=618,617
<621=622
<622=624,623
<625=626
<626=638,627
<627=632,628
<628=629
<629=631,630
<632=633
<633=637,634
<634=636,635
<638=639
<639=641,640
<642=643
<643=650,644
<644=646,645
<646=647
<647=649,648
<651=726,717,714,652
<652=693,672,653
<653=654
<654=668,655
<655=660,656
<656=657
<657=659,658
<660=661
<661=667,662
<662=666,663
<663=665,664
<668=669
<669=671,670
<672=673
<673=689,674
<674=679,675
<675=676
<676=678,677
<679=680
<680=688,681
<681=687,682
<682=684,683
<684=686,685
<689=690
<690=692,691
<693=694
<694=710,695
<695=700,696
<696=697
<697=699,698
<700=701
<701=709,702
<702=708,703
<703=705,704
<705=707,706
<710=711
<711=713,712
<714=716,715
<717=718
<718=725,719
<719=721,720
<721=722
<722=724,723
<726=727
<727=728
<728=738,737,729
<729=736,730
<730=732,731
<732=733
<733=735,734
<739=740
<740=752,741
<741=746,742
<742=743
<743=745,744
<746=747
<747=751,748
<748=750,749
<752=753
<753=755,754
<756=757
<757=764,758
<758=760,759
<760=761
<761=763,762
<765=766
<766=778,767
<767=772,768
<768=769
<769=771,770
<772=773
<773=777,774
<774=776,775
<778=779
<779=781,780
<782=783
<783=799,784
<784=791,785
<785=786
<786=790,787
<787=789,788
<791=792
<792=798,793
<793=797,794
<794=796,795
<799=800
<800=802,801
<803=804
<804=816,805
<805=810,806
<806=807
<807=809,808
<810=811
<811=815,812
<812=814,813
<816=817
<817=819,818
<820=821
<821=831,830,822
<822=829,823
<823=825,824
<825=826
<826=828,827
<871=876,872
<872=873
<873=875,874
<876=1051,1040,1027,1008,998,941,931,910,898,889,882,877
<877=878
<878=880,879
<880=881
<882=883
<883=885,884
<885=886
<886=888,887
<889=890
<890=894,891
<891=892
<892=893
<894=895
<895=897,896
<898=899
<899=909,908,900
<900=902,901
<902=904,903
<904=905
<905=907,906
<910=911
<911=929,912
<912=917,913
<913=914
<914=916,915
<917=918
<918=927,919
<919=920
<920=921
<921=923,922
<923=924
<924=926,925
<927=928
<929=930
<931=932
<932=940,933
<933=939,934
<934=938,935
<935=937,936
<941=986,942
<942=970,943
<943=944
<944=968,945
<945=946
<946=947
<947=958,948
<948=952,949
<949=951,950
<952=954,953
<954=955
<955=957,956
<958=962,959
<959=961,960
<962=964,963
<964=965
<965=967,966
<968=969
<970=971
<971=985,972
<972=981,973
<973=974
<974=975
<975=977,976
<977=978
<978=980,979
<981=982
<982=984,983
<986=987
<987=996,988
<988=989
<989=990
<990=992,991
<992=993
<993=995,994
<996=997
<998=999
<999=1007,1000
<1000=1006,1001
<1001=1005,1002
<1002=1004,1003
<1008=1009
<1009=1026,1010
<1010=1024,1011
<1011=1020,1016,1012
<1012=1013
<1013=1015,1014
<1016=1017
<1017=1019,1018
<1020=1021
<1021=1023,1022
<1024=1025
<1027=1028
<1028=1038,1029
<1029=1032,1030
<1030=1031
<1032=1033
<1033=1035,1034
<1035=1037,1036
<1038=1039
<1040=1041
<1041=1050,1042
<1042=1048,1043
<1043=1046,1044
<1044=1045
<1046=1047
<1048=1049
<1051=1052
<1052=1063,1062,1053
<1053=1061,1054
<1054=1060,1055
<1055=1059,1056
<1056=1058,1057
<1094=1102,1095
<1095=1099,1096
<1096=1098,1097
<1099=1101,1100
<1102=1127,1108,1103
<1103=1104
<1104=1106,1105
<1106=1107
<1108=1109
<1109=1126,1110
<1110=1124,1111
<1111=1120,1116,1112
<1112=1113
<1113=1115,1114
<1116=1117
<1117=1119,1118
<1120=1121
<1121=1123,1122
<1124=1125
<1127=1128
<1128=1154,1129
<1129=1130
<1130=1131
<1131=1149,1132
<1132=1141,1133
<1133=1135,1134
<1135=1137,1136
<1137=1138
<1138=1140,1139
<1141=1143,1142
<1143=1145,1144
<1145=1146
<1146=1148,1147
<1149=1151,1150
<1151=1153,1152
<1154=1155
<1171=1177,1176,1172
<1172=1173
<1173=1175,1174
<1177=1182,1178
<1178=1179
<1179=1181,1180
<1182=1183
<1183=1213,1184
<1184=1185
<1185=1186
<1186=1200,1187
<1187=1192,1188
<1188=1190,1189
<1190=1191
<1192=1199,1193
<1193=1195,1194
<1195=1196
<1196=1198,1197
<1200=1205,1201
<1201=1203,1202
<1203=1204
<1205=1212,1206
<1206=1208,1207
<1208=1209
<1209=1211,1210
<1213=1214
<1224=1230,1229,1225
<1225=1226
<1226=1228,1227
<1230=1450,1435,1420,1281,1233,1231
<1231=1232
<1233=1273,1264,1261,1234
<1234=1247,1235
<1235=1243,1236
<1236=1237
<1237=1238
<1238=1240,1239
<1240=1242,1241
<1243=1244
<1244=1246,1245
<1247=1248
<1248=1260,1259,1249
<1249=1258,1250
<1250=1252,1251
<1252=1253
<1253=1255,1254
<1255=1257,1256
<1261=1263,1262
<1264=1265
<1265=1272,1266
<1266=1268,1267
<1268=1269
<1269=1271,1270
<1273=1274
<1274=1275
<1275=1280,1279,1276
<1276=1278,1277
<1281=1412,1403,1400,1282
<1282=1283
<1283=1392,1383,1380,1284
<1284=1285
<1285=1372,1363,1360,1286
<1286=1343,1337,1323,1287
<1287=1319,1301,1288
<1288=1289
<1289=1290
<1290=1291
<1291=1293,1292
<1293=1297,1294
<1294=1295
<1295=1296
<1297=1298
<1298=1300,1299
<1301=1302
<1302=1303
<1303=1316,1304
<1304=1314,1305
<1305=1312,1306
<1306=1307
<1307=1311,1308
<1308=1310,1309
<1312=1313
<1314=1315
<1316=1318,1317
<1319=1320
<1320=1322,1321
<1323=1324
<1324=1336,1335,1325
<1325=1334,1326
<1326=1332,1327
<1327=1330,1328
<1328=1329
<1330=1331
<1332=1333
<1337=1339,1338
<1339=1340
<1340=1342,1341
<1343=1344
<1344=1359,1358,1345
<1345=1357,1346
<1346=1352,1347
<1347=1351,1348
<1348=1350,1349
<1352=1354,1353
<1354=1356,1355
<1360=1362,1361
<1363=1364
<1364=1371,1365
<1365=1367,1366
<1367=1368
<1368=1370,1369
<1372=1373
<1373=1374
<1374=1379,1378,1375
<1375=1377,1376
<1380=1382,1381
<1383=1384
<1384=1391,1385
<1385=1387,1386
<1387=1388
<1388=1390,1389
<1392=1393
<1393=1394
<1394=1399,1398,1395
<1395=1397,1396
<1400=1402,1401
<1403=1404
<1404=1411,1405
<1405=1407,1406
<1407=1408
<1408=1410,1409
<1412=1413
<1413=1414
<1414=1419,1418,1415
<1415=1417,1416
<1420=1421
<1421=1434,1433,1422
<1422=1429,1423
<1423=1427,1424
<1424=1425
<1425=1426
<1427=1428
<1429=1431,1430
<1431=1432
<1435=1446,1436
<1436=1437
<1437=1438
<1438=1445,1439
<1439=1444,1440
<1440=1442,1441
<1442=1443
<1446=1447
<1447=1449,1448
<1450=1451
<1451=1469,1452
<1452=1467,1453
<1453=1456,1454
<1454=1455
<1456=1457
<1457=1459,1458
<1459=1466,1460
<1460=1462,1461
<1462=1463
<1463=1465,1464
<1467=1468
<1500=1503,1502,1501
<1503=2013,1999,1984,1810,1708,1694,1679,1574,1504
<1504=1566,1557,1554,1505
<1505=1530,1506
<1506=1507
<1507=1525,1508
<1508=1517,1509
<1509=1513,1510
<1510=1511
<1511=1512
<1513=1514
<1514=1516,1515
<1517=1519,1518
<1519=1520
<1520=1522,1521
<1522=1524,1523
<1525=1527,1526
<1527=1529,1528
<1530=1531
<1531=1549,1532
<1532=1541,1533
<1533=1537,1534
<1534=1535
<1535=1536
<1537=1538
<1538=1540,1539
<1541=1543,1542
<1543=1544
<1544=1546,1545
<1546=1548,1547
<1549=1551,1550
<1551=1553,1552
<1554=1556,1555
<1557=1558
<1558=1565,1559
<1559=1561,1560
<1561=1562
<1562=1564,1563
<1566=1567
<1567=1568
<1568=1573,1572,1569
<1569=1571,1570
<1574=1671,1665,1662,1575
<1575=1576
<1576=1654,1648,1645,1577
<1577=1578
<1578=1637,1628,1625,1579
<1579=1608,1602,1591,1580
<1580=1581
<1581=1583,1582
<1583=1585,1584
<1585=1586
<1586=1588,1587
<1588=1590,1589
<1591=1592
<1592=1594,1593
<1594=1596,1595
<1596=1597
<1597=1599,1598
<1599=1601,1600
<1602=1604,1603
<1604=1605
<1605=1607,1606
<1608=1609
<1609=1624,1623,1610
<1610=1622,1611
<1611=1617,1612
<1612=1616,1613
<1613=1615,1614
<1617=1619,1618
<1619=1621,1620
<1625=1627,1626
<1628=1629
<1629=1636,1630
<1630=1632,1631
<1632=1633
<1633=1635,1634
<1637=1638
<1638=1639
<1639=1644,1643,1640
<1640=1642,1641
<1645=1647,1646
<1648=1649
<1649=1653,1650
<1650=1652,1651
<1654=1655
<1655=1656
<1656=1661,1660,1657
<1657=1659,1658
<1662=1664,1663
<1665=1666
<1666=1670,1667
<1667=1669,1668
<1671=1672
<1672=1673
<1673=1678,1677,1674
<1674=1676,1675
<1679=1680
<1680=1693,1692,1681
<1681=1686,1682
<1682=1684,1683
<1684=1685
<1686=1688,1687
<1688=1689
<1689=1691,1690
<1694=1695
<1695=1704,1696
<1696=1697
<1697=1698
<1698=1700,1699
<1700=1701
<1701=1703,1702
<1704=1705
<1705=1707,1706
<1708=1802,1793,1790,1709
<1709=1768,1746,1724,1710
<1710=1711
<1711=1721,1712
<1712=1718,1713
<1713=1715,1714
<1715=1717,1716
<1718=1720,1719
<1721=1723,1722
<1724=1725
<1725=1745,1744,1726
<1726=1743,1727
<1727=1742,1728
<1728=1737,1729
<1729=1733,1730
<1730=1731
<1731=1732
<1733=1734
<1734=1736,1735
<1737=1739,1738
<1739=1741,1740
<1746=1747
<1747=1767,1766,1748
<1748=1765,1749
<1749=1764,1750
<1750=1759,1751
<1751=1755,1752
<1752=1753
<1753=1754
<1755=1756
<1756=1758,1757
<1759=1761,1760
<1761=1763,1762
<1768=1769
<1769=1789,1788,1770
<1770=1787,1771
<1771=1786,1772
<1772=1781,1773
<1773=1777,1774
<1774=1775
<1775=1776
<1777=1778
<1778=1780,1779
<1781=1783,1782
<1783=1785,1784
<1790=1792,1791
<1793=1794
<1794=1801,1795
<1795=1797,1796
<1797=1798
<1798=1800,1799
<1802=1803
<1803=1804
<1804=1809,1808,1805
<1805=1807,1806
<1810=1976,1970,1967,1811
<1811=1812
<1812=1959,1953,1950,1813
<1813=1814
<1814=1942,1933,1930,1815
<1815=1913,1907,1906,1816,1831,1832,1833,1834,1835,1836,1837,1838,1839,1840,1841,1842,1843,1844,1845,1846,1847,1862,1863,1864,1865,1866,1867,1868,1869,1870,1871,1872,1873,1874,1875,1876,1877,1878,1891,1892,1893,1894,1895,1896,1897,1898,1899,1900,1901,1902,1903,1904,1905
<1816=1817
<1817=1830,1818
<1818=1829,1819
<1819=1821,1820
<1821=1823,1822
<1823=1825,1824
<1825=1826
<1826=1828,1827
<1847=1848
<1848=1861,1849
<1849=1860,1850
<1850=1852,1851
<1852=1854,1853
<1854=1856,1855
<1856=1857
<1857=1859,1858
<1878=1879
<1879=1890,1880
<1880=1889,1881
<1881=1883,1882
<1883=1885,1884
<1885=1886
<1886=1888,1887
<1907=1909,1908
<1909=1910
<1910=1912,1911
<1913=1914
<1914=1929,1928,1915
<1915=1927,1916
<1916=1922,1917
<1917=1921,1918
<1918=1920,1919
<1922=1924,1923
<1924=1926,1925
<1930=1932,1931
<1933=1934
<1934=1941,1935
<1935=1937,1936
<1937=1938
<1938=1940,1939
<1942=1943
<1943=1944
<1944=1949,1948,1945
<1945=1947,1946
<1950=1952,1951
<1953=1954
<1954=1958,1955
<1955=1957,1956
<1959=1960
<1960=1961
<1961=1966,1965,1962
<1962=1964,1963
<1967=1969,1968
<1970=1971
<1971=1975,1972
<1972=1974,1973
<1976=1977
<1977=1978
<1978=1983,1982,1979
<1979=1981,1980
<1984=1985
<1985=1998,1997,1986
<1986=1991,1987
<1987=1989,1988
<1989=1990
<1991=1993,1992
<1993=1994
<1994=1996,1995
<1999=2000
<2000=2009,2001
<2001=2002
<2002=2003
<2003=2005,2004
<2005=2006
<2006=2008,2007
<2009=2010
<2010=2012,2011
<2013=2014
<2014=2038,2015
<2015=2016
<2016=2017
<2017=2028,2018
<2018=2022,2019
<2019=2021,2020
<2022=2024,2023
<2024=2025
<2025=2027,2026
<2028=2032,2029
<2029=2031,2030
<2032=2034,2033
<2034=2035
<2035=2037,2036
<2038=2039
<2078=2086,2079
<2079=2083,2080
<2080=2082,2081
<2083=2085,2084
<2086=2087
<2087=2088
<2088=2094,2089
<2089=2092,2090
<2090=2091
<2092=2093
<2094=2095
<2101=2106,2102
<2102=2103
<2103=2105,2104
<2106=2107
<2107=2108
<2108=2112,2109
<2109=2110
<2110=2111
<2112=2113
<2118=2121,2120,2119
<2121=2122
<2122=2123
<2123=2125,2124
<2125=2126
<2126=2128,2127
<2133=2136,2135,2134
<2136=2137
<2137=2160,2151,2148,2138
<2138=2139
<2139=2140
<2140=2142,2141
<2142=2143
<2143=2145,2144
<2145=2147,2146
<2148=2150,2149
<2151=2152
<2152=2159,2153
<2153=2155,2154
<2155=2156
<2156=2158,2157
<2160=2161
<2161=2162
<2162=2172,2171,2163
<2163=2170,2164
<2164=2166,2165
<2166=2167
<2167=2169,2168
<2182=2191,2190,2183
<2183=2187,2184
<2184=2186,2185
<2187=2189,2188
<2191=2208,2201,2192
<2192=2193
<2193=2197,2194
<2194=2195
<2195=2196
<2197=2198
<2198=2200,2199
<2201=2202
<2202=2204,2203
<2204=2205
<2205=2207,2206
<2208=2209
<2209=2211,2210
<2219=2225,2224,2220
<2220=2221
<2221=2223,2222
<2225=2273,2266,2247,2240,2233,2226
<2226=2227
<2227=2231,2228
<2228=2229
<2229=2230
<2231=2232
<2233=2234
<2234=2238,2235
<2235=2236
<2236=2237
<2238=2239
<2240=2241
<2241=2245,2242
<2242=2243
<2243=2244
<2245=2246
<2247=2248
<2248=2262,2249
<2249=2250
<2250=2251
<2251=2253,2252
<2253=2254
<2254=2256,2255
<2256=2258,2257
<2258=2259
<2259=2261,2260
<2262=2263
<2263=2265,2264
<2266=2267
<2267=2269,2268
<2269=2270
<2270=2272,2271
<2273=2274
<2274=2281,2275
<2275=2277,2276
<2277=2278
<2278=2280,2279
<2291=2297,2296,2292
<2292=2293
<2293=2295,2294
<2297=2417,2298
<2298=2409,2400,2397,2299
<2299=2379,2378,2377,2376,2375,2374,2373,2372,2371,2370,2369,2368,2367,2366,2365,2364,2363,2362,2361,2360,2300,2301,2302,2303,2304,2305,2306,2307,2308,2309,2310,2311,2312,2313,2314,2315,2316,2317,2318,2319,2320,2321,2322,2323,2324,2325,2326,2327,2328,2329,2330,2331,2332,2333,2334,2345,2346,2347,2348,2349,2350,2351,2352,2353,2354,2355,2356,2357,2358,2359
<2334=2335
<2335=2341,2336
<2336=2339,2337
<2337=2338
<2339=2340
<2341=2342
<2342=2344,2343
<2379=2380
<2380=2393,2381
<2381=2382
<2382=2383
<2383=2385,2384
<2385=2386
<2386=2388,2387
<2388=2390,2389
<2390=2392,2391
<2393=2394
<2394=2396,2395
<2397=2399,2398
<2400=2401
<2401=2408,2402
<2402=2404,2403
<2404=2405
<2405=2407,2406
<2409=2410
<2410=2411
<2411=2416,2415,2412
<2412=2414,2413
<2417=2421,2418
<2418=2420,2419
<2421=2423,2422
<2437=2446,2445,2438
<2438=2442,2439
<2439=2441,2440
<2442=2444,2443
<2446=2763,2744,2696,2684,2564,2447
<2447=2556,2547,2544,2448
<2448=2530,2514,2490,2457,2449
<2449=2450
<2450=2452,2451
<2452=2454,2453
<2454=2456,2455
<2457=2458
<2458=2478,2459
<2459=2475,2460
<2460=2474,2461
<2461=2465,2462
<2462=2463
<2463=2464
<2465=2466
<2466=2468,2467
<2468=2470,2469
<2470=2471
<2471=2473,2472
<2475=2477,2476
<2478=2489,2479
<2479=2481,2480
<2481=2482
<2482=2484,2483
<2484=2486,2485
<2486=2488,2487
<2490=2491
<2491=2497,2492
<2492=2494,2493
<2494=2496,2495
<2497=2510,2498
<2498=2499
<2499=2500
<2500=2502,2501
<2502=2503
<2503=2505,2504
<2505=2507,2506
<2507=2509,2508
<2510=2511
<2511=2513,2512
<2514=2515
<2515=2529,2528,2516
<2516=2518,2517
<2518=2520,2519
<2520=2521
<2521=2523,2522
<2523=2525,2524
<2525=2527,2526
<2530=2531
<2531=2542,2532
<2532=2533
<2533=2534
<2534=2540,2535
<2535=2536
<2536=2537
<2537=2539,2538
<2540=2541
<2542=2543
<2544=2546,2545
<2547=2548
<2548=2555,2549
<2549=2551,2550
<2551=2552
<2552=2554,2553
<2556=2557
<2557=2558
<2558=2563,2562,2559
<2559=2561,2560
<2564=2676,2667,2664,2565
<2565=2566
<2566=2656,2647,2644,2567
<2567=2629,2568
<2568=2621,2607,2604,2569
<2569=2582,2576,2570
<2570=2571
<2571=2573,2572
<2573=2575,2574
<2576=2578,2577
<2578=2579
<2579=2581,2580
<2582=2583
<2583=2603,2602,2584
<2584=2601,2585
<2585=2591,2586
<2586=2590,2587
<2587=2589,2588
<2591=2593,2592
<2593=2595,2594
<2595=2597,2596
<2597=2598
<2598=2600,2599
<2604=2606,2605
<2607=2608
<2608=2620,2609
<2609=2611,2610
<2611=2612
<2612=2614,2613
<2614=2616,2615
<2616=2617
<2617=2619,2618
<2621=2622
<2622=2623
<2623=2628,2627,2624
<2624=2626,2625
<2629=2630
<2630=2643,2642,2631
<2631=2641,2632
<2632=2638,2633
<2633=2637,2634
<2634=2636,2635
<2638=2640,2639
<2644=2646,2645
<2647=2648
<2648=2655,2649
<2649=2651,2650
<2651=2652
<2652=2654,2653
<2656=2657
<2657=2658
<2658=2663,2662,2659
<2659=2661,2660
<2664=2666,2665
<2667=2668
<2668=2675,2669
<2669=2671,2670
<2671=2672
<2672=2674,2673
<2676=2677
<2677=2678
<2678=2683,2682,2679
<2679=2681,2680
<2684=2685
<2685=2695,2694,2686
<2686=2688,2687
<2688=2690,2689
<2690=2691
<2691=2693,2692
<2696=2735,2697
<2697=2722,2707,2698
<2698=2699
<2699=2705,2700
<2700=2703,2701
<2701=2702
<2703=2704
<2705=2706
<2707=2708
<2708=2718,2709
<2709=2716,2714,2712,2710
<2710=2711
<2712=2713
<2714=2715
<2716=2717
<2718=2719
<2719=2721,2720
<2722=2723
<2723=2734,2733,2724
<2724=2730,2725
<2725=2727,2726
<2727=2729,2728
<2730=2732,2731
<2735=2736
<2736=2738,2737
<2738=2740,2739
<2740=2741
<2741=2743,2742
<2744=2745
<2745=2761,2746
<2746=2747
<2747=2748
<2748=2755,2749
<2749=2751,2750
<2751=2752
<2752=2754,2753
<2755=2757,2756
<2757=2758
<2758=2760,2759
<2761=2762
<2763=2764
<2764=2792,2765
<2765=2766
<2766=2767
<2767=2780,2768
<2768=2772,2769
<2769=2771,2770
<2772=2779,2773
<2773=2775,2774
<2775=2776
<2776=2778,2777
<2780=2784,2781
<2781=2783,2782
<2784=2791,2785
<2785=2787,2786
<2787=2788
<2788=2790,2789
<2792=2793
<2842=2851,2850,2843
<2843=2847,2844
<2844=2846,2845
<2847=2849,2848
<2851=2852
<2852=2877,2868,2865,2853
<2853=2854
<2854=2855
<2855=2863,2856
<2856=2861,2857
<2857=2858
<2858=2860,2859
<2861=2862
<2863=2864
<2865=2867,2866
<2868=2869
<2869=2876,2870
<2870=2872,2871
<2872=2873
<2873=2875,2874
<2877=2878
<2878=2879
<2879=2884,2883,2880
<2880=2882,2881
<2894=2897,2896,2895
<2897=2962,2945,2939,2933,2900,2898
<2898=2899
<2900=2925,2916,2913,2901
<2901=2902
<2902=2903
<2903=2912,2904
<2904=2906,2905
<2906=2907
<2907=2909,2908
<2909=2911,2910
<2913=2915,2914
<2916=2917
<2917=2924,2918
<2918=2920,2919
<2920=2921
<2921=2923,2922
<2925=2926
<2926=2927
<2927=2932,2931,2928
<2928=2930,2929
<2933=2934
<2934=2938,2935
<2935=2937,2936
<2939=2940
<2940=2944,2941
<2941=2943,2942
<2945=2946
<2946=2961,2947
<2947=2958,2948
<2948=2952,2949
<2949=2951,2950
<2952=2954,2953
<2954=2955
<2955=2957,2956
<2958=2960,2959
<2962=2963
<2963=2968,2967,2964
<2964=2966,2965
<2981=2987,2986,2982
<2982=2983
<2983=2985,2984
<2987=3131,3127,3110,3101,3086,3080,3071,3070,3069,3068,3066,3049,3032,3023,2990,2988
<2988=2989
<2990=3015,3006,3003,2991
<2991=2992
<2992=2993
<2993=2997,2994
<2994=2995
<2995=2996
<2997=2998
<2998=3000,2999
<3000=3002,3001
<3003=3005,3004
<3006=3007
<3007=3014,3008
<3008=3010,3009
<3010=3011
<3011=3013,3012
<3015=3016
<3016=3017
<3017=3022,3021,3018
<3018=3020,3019
<3023=3024
<3024=3028,3025
<3025=3026
<3026=3027
<3028=3029
<3029=3031,3030
<3032=3033
<3033=3045,3034
<3034=3039,3035
<3035=3036
<3036=3038,3037
<3039=3040
<3040=3044,3041
<3041=3043,3042
<3045=3046
<3046=3048,3047
<3049=3050
<3050=3062,3051
<3051=3056,3052
<3052=3053
<3053=3055,3054
<3056=3057
<3057=3061,3058
<3058=3060,3059
<3062=3063
<3063=3065,3064
<3066=3067
<3071=3072
<3072=3079,3073
<3073=3077,3074
<3074=3075
<3075=3076
<3077=3078
<3080=3081
<3081=3083,3082
<3083=3085,3084
<3086=3087
<3087=3097,3088
<3088=3095,3089
<3089=3090
<3090=3094,3091
<3091=3093,3092
<3095=3096
<3097=3098
<3098=3100,3099
<3101=3102
<3102=3109,3108,3103
<3103=3107,3104
<3104=3106,3105
<3110=3111
<3111=3123,3112
<3112=3117,3113
<3113=3114
<3114=3116,3115
<3117=3118
<3118=3122,3119
<3119=3121,3120
<3123=3124
<3124=3126,3125
<3127=3128
<3128=3130,3129
<3131=3132
<3132=3134,3133
<3134=3135
<3154=3160,3159,3155
<3155=3156
<3156=3158,3157
<3160=3276,3259,3239,3222,3213,3196,3163,3161
<3161=3162
<3163=3188,3179,3176,3164
<3164=3165
<3165=3166
<3166=3170,3167
<3167=3168
<3168=3169
<3170=3171
<3171=3173,3172
<3173=3175,3174
<3176=3178,3177
<3179=3180
<3180=3187,3181
<3181=3183,3182
<3183=3184
<3184=3186,3185
<3188=3189
<3189=3190
<3190=3195,3194,3191
<3191=3193,3192
<3196=3197
<3197=3209,3198
<3198=3203,3199
<3199=3200
<3200=3202,3201
<3203=3204
<3204=3208,3205
<3205=3207,3206
<3209=3210
<3210=3212,3211
<3213=3214
<3214=3221,3215
<3215=3217,3216
<3217=3218
<3218=3220,3219
<3222=3223
<3223=3235,3224
<3224=3229,3225
<3225=3226
<3226=3228,3227
<3229=3230
<3230=3234,3231
<3231=3233,3232
<3235=3236
<3236=3238,3237
<3239=3240
<3240=3255,3241
<3241=3248,3242
<3242=3243
<3243=3247,3244
<3244=3246,3245
<3248=3249
<3249=3251,3250
<3251=3252
<3252=3254,3253
<3255=3256
<3256=3258,3257
<3259=3260
<3260=3272,3261
<3261=3266,3262
<3262=3263
<3263=3265,3264
<3266=3267
<3267=3271,3268
<3268=3270,3269
<3272=3273
<3273=3275,3274
<3276=3277
<3277=3287,3286,3278
<3278=3285,3279
<3279=3281,3280
<3281=3282
<3282=3284,3283
<3304=3310,3309,3305
<3305=3306
<3306=3308,3307
<3310=3387,3313,3311
<3311=3312
<3313=3379,3370,3367,3314
<3314=3351,3339,3327,3315
<3315=3316
<3316=3322,3317
<3317=3319,3318
<3319=3321,3320
<3322=3324,3323
<3324=3326,3325
<3327=3328
<3328=3334,3329
<3329=3331,3330
<3331=3333,3332
<3334=3336,3335
<3336=3338,3337
<3339=3340
<3340=3346,3341
<3341=3343,3342
<3343=3345,3344
<3346=3348,3347
<3348=3350,3349
<3351=3365,3352
<3352=3353
<3353=3354
<3354=3360,3355
<3355=3357,3356
<3357=3359,3358
<3360=3362,3361
<3362=3364,3363
<3365=3366
<3367=3369,3368
<3370=3371
<3371=3378,3372
<3372=3374,3373
<3374=3375
<3375=3377,3376
<3379=3380
<3380=3381
<3381=3386,3385,3382
<3382=3384,3383
<3387=3388
<3388=3398,3397,3389
<3389=3396,3390
<3390=3392,3391
<3392=3393
<3393=3395,3394
<3418=3424,3423,3419
<3419=3420
<3420=3422,3421
<3424=3590,3425
<3425=3582,3566,3563,3426
<3426=3427
<3427=3555,3546,3543,3428
<3428=3542,3541,3540,3539,3538,3537,3536,3535,3534,3533,3532,3531,3530,3529,3528,3527,3526,3522,3521,3520,3519,3518,3517,3516,3515,3514,3513,3512,3511,3510,3509,3508,3507,3506,3505,3504,3503,3499,3429
<3429=3491,3482,3479,3430
<3430=3431
<3431=3467,3432
<3432=3450,3433
<3433=3434
<3434=3440,3435
<3435=3436
<3436=3437
<3437=3439,3438
<3440=3441
<3441=3443,3442
<3443=3445,3444
<3445=3449,3446
<3446=3448,3447
<3450=3451
<3451=3457,3452
<3452=3453
<3453=3454
<3454=3456,3455
<3457=3458
<3458=3460,3459
<3460=3462,3461
<3462=3466,3463
<3463=3465,3464
<3467=3468
<3468=3474,3469
<3469=3471,3470
<3471=3473,3472
<3474=3476,3475
<3476=3478,3477
<3479=3481,3480
<3482=3483
<3483=3490,3484
<3484=3486,3485
<3486=3487
<3487=3489,3488
<3491=3492
<3492=3493
<3493=3498,3497,3494
<3494=3496,3495
<3499=3500
<3500=3502,3501
<3522=3523
<3523=3525,3524
<3543=3545,3544
<3546=3547
<3547=3554,3548
<3548=3550,3549
<3550=3551
<3551=3553,3552
<3555=3556
<3556=3557
<3557=3562,3561,3558
<3558=3560,3559
<3563=3565,3564
<3566=3567
<3567=3581,3568
<3568=3570,3569
<3570=3572,3571
<3572=3573
<3573=3575,3574
<3575=3577,3576
<3577=3578
<3578=3580,3579
<3582=3583
<3583=3584
<3584=3589,3588,3585
<3585=3587,3586
<3590=3830,3816,3813,3591
<3591=3592
<3592=3805,3796,3793,3593
<3593=3792,3791,3790,3789,3788,3787,3786,3785,3784,3783,3782,3781,3780,3779,3778,3777,3776,3772,3771,3770,3769,3768,3767,3766,3765,3764,3763,3762,3761,3760,3759,3758,3757,3756,3755,3740,3594
<3594=3732,3723,3720,3595
<3595=3664,3596
<3596=3636,3597
<3597=3617,3598
<3598=3599
<3599=3605,3600
<3600=3601
<3601=3602
<3602=3604,3603
<3605=3606
<3606=3608,3607
<3608=3610,3609
<3610=3616,3611
<3611=3615,3612
<3612=3614,3613
<3617=3618
<3618=3626,3619
<3619=3620
<3620=3621
<3621=3625,3622
<3622=3624,3623
<3626=3627
<3627=3629,3628
<3629=3631,3630
<3631=3635,3632
<3632=3634,3633
<3636=3637
<3637=3661,3638
<3638=3652,3639
<3639=3647,3640
<3640=3642,3641
<3642=3646,3643
<3643=3645,3644
<3647=3649,3648
<3649=3651,3650
<3652=3658,3653
<3653=3657,3654
<3654=3656,3655
<3658=3660,3659
<3661=3663,3662
<3664=3700,3665
<3665=3683,3666
<3666=3667
<3667=3673,3668
<3668=3669
<3669=3670
<3670=3672,3671
<3673=3674
<3674=3676,3675
<3676=3678,3677
<3678=3682,3679
<3679=3681,3680
<3683=3684
<3684=3690,3685
<3685=3686
<3686=3687
<3687=3689,3688
<3690=3691
<3691=3693,3692
<3693=3695,3694
<3695=3699,3696
<3696=3698,3697
<3700=3701
<3701=3713,3702
<3702=3708,3703
<3703=3705,3704
<3705=3707,3706
<3708=3710,3709
<3710=3712,3711
<3713=3717,3714
<3714=3716,3715
<3717=3719,3718
<3720=3722,3721
<3723=3724
<3724=3731,3725
<3725=3727,3726
<3727=3728
<3728=3730,3729
<3732=3733
<3733=3734
<3734=3739,3738,3735
<3735=3737,3736
<3740=3741
<3741=3754,3742
<3742=3752,3743
<3743=3746,3744
<3744=3745
<3746=3747
<3747=3749,3748
<3749=3751,3750
<3752=3753
<3772=3773
<3773=3775,3774
<3793=3795,3794
<3796=3797
<3797=3804,3798
<3798=3800,3799
<3800=3801
<3801=3803,3802
<3805=3806
<3806=3807
<3807=3812,3811,3808
<3808=3810,3809
<3813=3815,3814
<3816=3817
<3817=3829,3818
<3818=3820,3819
<3820=3821
<3821=3823,3822
<3823=3825,3824
<3825=3826
<3826=3828,3827
<3830=3831
<3831=3832
<3832=3837,3836,3833
<3833=3835,3834
<3862=3868,3867,3863
<3863=3864
<3864=3866,3865
<3868=5942,5937,5933,5917,5901,5885,5758,5754,5750,5746,5742,5726,5698,5693,5689,5673,5645,5625,5456,5442,5431,5424,5417,5410,5397,5362,5205,4849,4845,4826,4049,3946,3869
<3869=3942,3870
<3870=3931,3871
<3871=3923,3914,3911,3872
<3872=3873
<3873=3874
<3874=3897,3875
<3875=3877,3876
<3877=3878
<3878=3880,3879
<3880=3882,3881
<3882=3883
<3883=3885,3884
<3885=3889,3886
<3886=3887
<3887=3888
<3889=3890
<3890=3892,3891
<3892=3894,3893
<3894=3896,3895
<3897=3903,3898
<3898=3901,3899
<3899=3900
<3901=3902
<3903=3904
<3904=3906,3905
<3906=3908,3907
<3908=3910,3909
<3911=3913,3912
<3914=3915
<3915=3922,3916
<3916=3918,3917
<3918=3919
<3919=3921,3920
<3923=3924
<3924=3925
<3925=3930,3929,3926
<3926=3928,3927
<3931=3932
<3932=3941,3940,3933
<3933=3939,3934
<3934=3938,3935
<3935=3937,3936
<3942=3943
<3943=3945,3944
<3946=4045,3947
<3947=4040,4039,4038,4037,4036,4035,4034,4033,4032,4031,4030,4029,4028,4027,4026,4025,4024,4023,4022,4021,4020,4019,4018,4017,4016,4015,4014,4013,4012,4011,4010,4009,4008,4007,4006,4005,4004,4003,4002,4001,4000,3999,3998,3997,3996,3987,3948
<3948=3979,3970,3967,3949
<3949=3950
<3950=3951
<3951=3953,3952
<3953=3959,3954
<3954=3957,3955
<3955=3956
<3957=3958
<3959=3960
<3960=3962,3961
<3962=3964,3963
<3964=3966,3965
<3967=3969,3968
<3970=3971
<3971=3978,3972
<3972=3974,3973
<3974=3975
<3975=3977,3976
<3979=3980
<3980=3981
<3981=3986,3985,3982
<3982=3984,3983
<3987=3988
<3988=3995,3994,3989
<3989=3993,3990
<3990=3992,3991
<4040=4041
<4041=4044,4043,4042
<4045=4046
<4046=4048,4047
<4049=4822,4050
<4050=4051
<4051=4814,4805,4802,4052
<4052=4783,4776,4744,4730,4729,4728,4727,4726,4725,4724,4723,4722,4721,4720,4719,4718,4717,4716,4715,4714,4713,4712,4711,4710,4709,4708,4707,4706,4705,4704,4703,4702,4701,4700,4699,4698,4697,4696,4695,4694,4693,4692,4691,4690,4689,4688,4684,4683,4682,4681,4680,4679,4678,4677,4676,4675,4674,4673,4672,4671,4670,4669,4668,4667,4666,4665,4664,4663,4662,4661,4660,4659,4658,4657,4656,4655,4654,4653,4652,4651,4650,4649,4648,4647,4646,4645,4644,4643,4642,4637,4633,4604,4590,4589,4588,4587,4586,4585,4584,4583,4582,4581,4580,4579,4578,4577,4576,4575,4574,4573,4572,4571,4570,4569,4568,4567,4566,4565,4564,4563,4562,4561,4560,4559,4558,4557,4556,4555,4554,4553,4552,4551,4550,4549,4548,4544,4543,4542,4541,4540,4539,4538,4537,4536,4535,4534,4533,4532,4531,4530,4529,4528,4527,4526,4525,4524,4523,4522,4521,4520,4519,4518,4517,4516,4515,4514,4513,4512,4511,4510,4509,4508,4507,4506,4505,4504,4503,4502,4497,4493,4464,4450,4449,4448,4447,4446,4445,4444,4443,4442,4441,4440,4439,4438,4437,4436,4435,4434,4433,4432,4431,4430,4429,4428,4427,4426,4425,4424,4423,4422,4421,4420,4419,4418,4417,4416,4415,4414,4413,4412,4411,4410,4409,4408,4404,4403,4402,4401,4400,4399,4398,4397,4396,4395,4394,4393,4392,4391,4390,4389,4388,4387,4386,4385,4384,4383,4382,4381,4380,4379,4378,4377,4376,4375,4374,4373,4372,4371,4370,4369,4368,4367,4366,4365,4364,4363,4362,4357,4353,4324,4310,4309,4308,4307,4306,4305,4304,4303,4302,4301,4300,4299,4298,4297,4296,4295,4294,4293,4292,4291,4290,4289,4288,4287,4286,4285,4284,4283,4282,4281,4280,4279,4278,4277,4276,4275,4274,4273,4272,4271,4270,4269,4268,4264,4263,4262,4261,4260,4259,4258,4257,4256,4255,4254,4253,4252,4251,4250,4249,4248,4247,4246,4245,4244,4243,4242,4241,4240,4239,4238,4237,4236,4235,4234,4233,4232,4231,4230,4229,4228,4227,4226,4225,4224,4223,4222,4217,4213,4174,4160,4159,4158,4157,4156,4155,4154,4153,4152,4151,4150,4149,4148,4147,4146,4145,4144,4143,4142,4141,4140,4139,4138,4137,4136,4135,4134,4133,4132,4131,4130,4129,4128,4127,4126,4125,4124,4123,4122,4121,4120,4119,4053,4064,4068,4069,4070,4071,4072,4073,4074,4075,4076,4077,4078,4079,4080,4081,4082,4083,4084,4085,4086,4087,4088,4089,4090,4091,4092,4093,4094,4095,4096,4097,4098,4099,4100,4101,4102,4103,4104,4105,4106,4107,4108,4109,4110,4111,4112,4113,4114,4118
<4053=4054
<4054=4062,4055
<4055=4056
<4056=4057
<4057=4061,4058
<4058=4060,4059
<4062=4063
<4064=4065
<4065=4067,4066
<4114=4115
<4115=4117,4116
<4160=4161
<4161=4172,4162
<4162=4170,4163
<4163=4164
<4164=4166,4165
<4166=4167
<4167=4169,4168
<4170=4171
<4172=4173
<4174=4175
<4175=4212,4176
<4176=4210,4177
<4177=4200,4190,4184,4178
<4178=4179
<4179=4183,4180
<4180=4182,4181
<4184=4185
<4185=4189,4186
<4186=4188,4187
<4190=4191
<4191=4197,4192
<4192=4196,4193
<4193=4195,4194
<4197=4199,4198
<4200=4201
<4201=4207,4202
<4202=4206,4203
<4203=4205,4204
<4207=4209,4208
<4210=4211
<4213=4214
<4214=4216,4215
<4217=4218
<4218=4220,4219
<4220=4221
<4264=4265
<4265=4267,4266
<4310=4311
<4311=4322,4312
<4312=4320,4313
<4313=4314
<4314=4316,4315
<4316=4317
<4317=4319,4318
<4320=4321
<4322=4323
<4324=4325
<4325=4352,4326
<4326=4350,4327
<4327=4340,4336,4332,4328
<4328=4329
<4329=4331,4330
<4332=4333
<4333=4335,4334
<4336=4337
<4337=4339,4338
<4340=4341
<4341=4347,4342
<4342=4346,4343
<4343=4345,4344
<4347=4349,4348
<4350=4351
<4353=4354
<4354=4356,4355
<4357=4358
<4358=4360,4359
<4360=4361
<4404=4405
<4405=4407,4406
<4450=4451
<4451=4462,4452
<4452=4460,4453
<4453=4454
<4454=4456,4455
<4456=4457
<4457=4459,4458
<4460=4461
<4462=4463
<4464=4465
<4465=4492,4466
<4466=4490,4467
<4467=4480,4476,4472,4468
<4468=4469
<4469=4471,4470
<4472=4473
<4473=4475,4474
<4476=4477
<4477=4479,4478
<4480=4481
<4481=4487,4482
<4482=4486,4483
<4483=4485,4484
<4487=4489,4488
<4490=4491
<4493=4494
<4494=4496,4495
<4497=4498
<4498=4500,4499
<4500=4501
<4544=4545
<4545=4547,4546
<4590=4591
<4591=4602,4592
<4592=4600,4593
<4593=4594
<4594=4596,4595
<4596=4597
<4597=4599,4598
<4600=4601
<4602=4603
<4604=4605
<4605=4632,4606
<4606=4630,4607
<4607=4626,4616,4612,4608
<4608=4609
<4609=4611,4610
<4612=4613
<4613=4615,4614
<4616=4617
<4617=4623,4618
<4618=4622,4619
<4619=4621,4620
<4623=4625,4624
<4626=4627
<4627=4629,4628
<4630=4631
<4633=4634
<4634=4636,4635
<4637=4638
<4638=4640,4639
<4640=4641
<4684=4685
<4685=4687,4686
<4730=4731
<4731=4742,4732
<4732=4740,4733
<4733=4734
<4734=4736,4735
<4736=4737
<4737=4739,4738
<4740=4741
<4742=4743
<4744=4745
<4745=4775,4774,4746
<4746=4773,4747
<4747=4771,4748
<4748=4767,4757,4753,4749
<4749=4750
<4750=4752,4751
<4753=4754
<4754=4756,4755
<4757=4758
<4758=4764,4759
<4759=4763,4760
<4760=4762,4761
<4764=4766,4765
<4767=4768
<4768=4770,4769
<4771=4772
<4776=4777
<4777=4782,4781,4778
<4778=4780,4779
<4783=4784
<4784=4801,4800,4785
<4785=4799,4786
<4786=4790,4787
<4787=4788
<4788=4789
<4790=4791
<4791=4793,4792
<4793=4795,4794
<4795=4796
<4796=4798,4797
<4802=4804,4803
<4805=4806
<4806=4813,4807
<4807=4809,4808
<4809=4810
<4810=4812,4811
<4814=4815
<4815=4816
<4816=4821,4820,4817
<4817=4819,4818
<4822=4823
<4823=4825,4824
<4826=4837,4827
<4827=4828
<4828=4829
<4829=4833,4830
<4830=4831
<4831=4832
<4833=4834
<4834=4836,4835
<4837=4838
<4838=4842,4839
<4839=4841,4840
<4842=4844,4843
<4845=4846
<4846=4848,4847
<4849=5197,5188,5185,4850
<4850=5156,5063,5037,5007,4977,4958,4928,4898,4851
<4851=4852
<4852=4884,4853
<4853=4869,4854
<4854=4868,4855
<4855=4862,4856
<4856=4858,4857
<4858=4859
<4859=4861,4860
<4862=4864,4863
<4864=4865
<4865=4867,4866
<4869=4883,4870
<4870=4874,4871
<4871=4872
<4872=4873
<4874=4875
<4875=4877,4876
<4877=4879,4878
<4879=4880
<4880=4882,4881
<4884=4892,4885
<4885=4886
<4886=4887
<4887=4889,4888
<4889=4891,4890
<4892=4893
<4893=4895,4894
<4895=4897,4896
<4898=4899
<4899=4914,4900
<4900=4909,4901
<4901=4908,4902
<4902=4904,4903
<4904=4905
<4905=4907,4906
<4909=4913,4910
<4910=4912,4911
<4914=4922,4915
<4915=4916
<4916=4917
<4917=4919,4918
<4919=4921,4920
<4922=4923
<4923=4925,4924
<4925=4927,4926
<4928=4929
<4929=4944,4930
<4930=4939,4931
<4931=4938,4932
<4932=4934,4933
<4934=4935
<4935=4937,4936
<4939=4943,4940
<4940=4942,4941
<4944=4952,4945
<4945=4946
<4946=4947
<4947=4949,4948
<4949=4951,4950
<4952=4953
<4953=4955,4954
<4955=4957,4956
<4958=4959
<4959=4976,4975,4960
<4960=4974,4961
<4961=4965,4962
<4962=4963
<4963=4964
<4965=4966
<4966=4968,4967
<4968=4970,4969
<4970=4971
<4971=4973,4972
<4977=4978
<4978=4993,4979
<4979=4992,4980
<4980=4990,4981
<4981=4982
<4982=4983
<4983=4989,4984
<4984=4986,4985
<4986=4988,4987
<4990=4991
<4993=5001,4994
<4994=4995
<4995=4996
<4996=4998,4997
<4998=5000,4999
<5001=5002
<5002=5004,5003
<5004=5006,5005
<5007=5008
<5008=5023,5009
<5009=5022,5010
<5010=5020,5011
<5011=5012
<5012=5013
<5013=5019,5014
<5014=5016,5015
<5016=5018,5017
<5020=5021
<5023=5031,5024
<5024=5025
<5025=5026
<5026=5028,5027
<5028=5030,5029
<5031=5032
<5032=5034,5033
<5034=5036,5035
<5037=5038
<5038=5051,5039
<5039=5050,5040
<5040=5048,5041
<5041=5042
<5042=5043
<5043=5047,5044
<5044=5046,5045
<5048=5049
<5051=5057,5052
<5052=5053
<5053=5054
<5054=5056,5055
<5057=5058
<5058=5060,5059
<5060=5062,5061
<5063=5148,5144,5141,5064
<5064=5065
<5065=5066
<5066=5129,5067
<5067=5127,5068
<5068=5069
<5069=5070
<5070=5125,5071
<5071=5074,5072
<5072=5073
<5074=5075
<5075=5097,5076
<5076=5087,5077
<5077=5081,5078
<5078=5079
<5079=5080
<5081=5082
<5082=5084,5083
<5084=5086,5085
<5087=5091,5088
<5088=5089
<5089=5090
<5091=5092
<5092=5094,5093
<5094=5096,5095
<5097=5113,5098
<5098=5112,5099
<5099=5103,5100
<5100=5101
<5101=5102
<5103=5104
<5104=5106,5105
<5106=5108,5107
<5108=5109
<5109=5111,5110
<5113=5119,5114
<5114=5115
<5115=5116
<5116=5118,5117
<5119=5120
<5120=5122,5121
<5122=5124,5123
<5125=5126
<5127=5128
<5129=5135,5130
<5130=5131
<5131=5132
<5132=5134,5133
<5135=5136
<5136=5138,5137
<5138=5140,5139
<5141=5143,5142
<5144=5145
<5145=5147,5146
<5148=5149
<5149=5150
<5150=5155,5154,5151
<5151=5153,5152
<5156=5157
<5157=5173,5158
<5158=5172,5159
<5159=5163,5160
<5160=5161
<5161=5162
<5163=5164
<5164=5166,5165
<5166=5168,5167
<5168=5169
<5169=5171,5170
<5173=5177,5174
<5174=5175
<5175=5176
<5177=5178
<5178=5180,5179
<5180=5182,5181
<5182=5184,5183
<5185=5187,5186
<5188=5189
<5189=5196,5190
<5190=5192,5191
<5192=5193
<5193=5195,5194
<5197=5198
<5198=5199
<5199=5204,5203,5200
<5200=5202,5201
<5205=5354,5345,5342,5206
<5206=5207
<5207=5334,5325,5322,5208
<5208=5209
<5209=5314,5300,5297,5210
<5210=5275,5269,5211
<5211=5261,5257,5254,5212
<5212=5237,5227,5213
<5213=5214
<5214=5218,5215
<5215=5217,5216
<5218=5222,5219
<5219=5221,5220
<5222=5224,5223
<5224=5226,5225
<5227=5228
<5228=5230,5229
<5230=5232,5231
<5232=5234,5233
<5234=5236,5235
<5237=5238
<5238=5253,5252,5239
<5239=5251,5240
<5240=5246,5241
<5241=5245,5242
<5242=5244,5243
<5246=5248,5247
<5248=5250,5249
<5254=5256,5255
<5257=5258
<5258=5260,5259
<5261=5262
<5262=5263
<5263=5268,5267,5264
<5264=5266,5265
<5269=5271,5270
<5271=5272
<5272=5274,5273
<5275=5276
<5276=5296,5295,5277
<5277=5294,5278
<5278=5284,5279
<5279=5283,5280
<5280=5282,5281
<5284=5286,5285
<5286=5288,5287
<5288=5290,5289
<5290=5291
<5291=5293,5292
<5297=5299,5298
<5300=5301
<5301=5313,5302
<5302=5304,5303
<5304=5305
<5305=5307,5306
<5307=5309,5308
<5309=5310
<5310=5312,5311
<5314=5315
<5315=5316
<5316=5321,5320,5317
<5317=5319,5318
<5322=5324,5323
<5325=5326
<5326=5333,5327
<5327=5329,5328
<5329=5330
<5330=5332,5331
<5334=5335
<5335=5336
<5336=5341,5340,5337
<5337=5339,5338
<5342=5344,5343
<5345=5346
<5346=5353,5347
<5347=5349,5348
<5349=5350
<5350=5352,5351
<5354=5355
<5355=5356
<5356=5361,5360,5357
<5357=5359,5358
<5362=5389,5380,5377,5363
<5363=5364
<5364=5365
<5365=5372,5366
<5366=5370,5367
<5367=5368
<5368=5369
<5370=5371
<5372=5374,5373
<5374=5376,5375
<5377=5379,5378
<5380=5381
<5381=5388,5382
<5382=5384,5383
<5384=5385
<5385=5387,5386
<5389=5390
<5390=5391
<5391=5396,5395,5392
<5392=5394,5393
<5397=5398
<5398=5409,5408,5399
<5399=5407,5400
<5400=5406,5401
<5401=5405,5402
<5402=5404,5403
<5410=5411
<5411=5416,5415,5412
<5412=5414,5413
<5417=5418
<5418=5423,5422,5419
<5419=5421,5420
<5424=5425
<5425=5430,5429,5426
<5426=5428,5427
<5431=5432
<5432=5441,5440,5433
<5433=5439,5434
<5434=5436,5435
<5436=5438,5437
<5442=5443
<5443=5455,5454,5444
<5444=5453,5445
<5445=5452,5446
<5446=5448,5447
<5448=5449
<5449=5451,5450
<5456=5617,5608,5605,5457
<5457=5604,5603,5602,5601,5600,5599,5598,5597,5596,5595,5594,5593,5592,5591,5590,5589,5585,5458
<5458=5577,5568,5565,5459
<5459=5460
<5460=5557,5543,5540,5461
<5461=5518,5512,5498,5480,5462
<5462=5463
<5463=5465,5464
<5465=5473,5466
<5466=5472,5467
<5467=5469,5468
<5469=5471,5470
<5473=5479,5474
<5474=5476,5475
<5476=5478,5477
<5480=5481
<5481=5483,5482
<5483=5491,5484
<5484=5490,5485
<5485=5487,5486
<5487=5489,5488
<5491=5497,5492
<5492=5494,5493
<5494=5496,5495
<5498=5499
<5499=5501,5500
<5501=5507,5502
<5502=5506,5503
<5503=5505,5504
<5507=5511,5508
<5508=5510,5509
<5512=5514,5513
<5514=5515
<5515=5517,5516
<5518=5519
<5519=5539,5538,5520
<5520=5537,5521
<5521=5527,5522
<5522=5526,5523
<5523=5525,5524
<5527=5529,5528
<5529=5531,5530
<5531=5533,5532
<5533=5534
<5534=5536,5535
<5540=5542,5541
<5543=5544
<5544=5556,5545
<5545=5547,5546
<5547=5548
<5548=5550,5549
<5550=5552,5551
<5552=5553
<5553=5555,5554
<5557=5558
<5558=5559
<5559=5564,5563,5560
<5560=5562,5561
<5565=5567,5566
<5568=5569
<5569=5576,5570
<5570=5572,5571
<5572=5573
<5573=5575,5574
<5577=5578
<5578=5579
<5579=5584,5583,5580
<5580=5582,5581
<5585=5586
<5586=5588,5587
<5605=5607,5606
<5608=5609
<5609=5616,5610
<5610=5612,5611
<5612=5613
<5613=5615,5614
<5617=5618
<5618=5619
<5619=5624,5623,5620
<5620=5622,5621
<5625=5626
<5626=5644,5643,5627
<5627=5635,5628
<5628=5634,5629
<5629=5633,5630
<5630=5632,5631
<5635=5642,5636
<5636=5638,5637
<5638=5639
<5639=5641,5640
<5645=5646
<5646=5669,5647
<5647=5662,5655,5648
<5648=5649
<5649=5651,5650
<5651=5652
<5652=5654,5653
<5655=5656
<5656=5658,5657
<5658=5659
<5659=5661,5660
<5662=5663
<5663=5665,5664
<5665=5666
<5666=5668,5667
<5669=5670
<5670=5672,5671
<5673=5674
<5674=5685,5675
<5675=5678,5676
<5676=5677
<5678=5679
<5679=5681,5680
<5681=5682
<5682=5684,5683
<5685=5686
<5686=5688,5687
<5689=5690
<5690=5692,5691
<5693=5694
<5694=5697,5696,5695
<5698=5699
<5699=5722,5700
<5700=5715,5708,5701
<5701=5702
<5702=5704,5703
<5704=5705
<5705=5707,5706
<5708=5709
<5709=5711,5710
<5711=5712
<5712=5714,5713
<5715=5716
<5716=5718,5717
<5718=5719
<5719=5721,5720
<5722=5723
<5723=5725,5724
<5726=5727
<5727=5738,5728
<5728=5731,5729
<5729=5730
<5731=5732
<5732=5734,5733
<5734=5735
<5735=5737,5736
<5738=5739
<5739=5741,5740
<5742=5743
<5743=5745,5744
<5746=5747
<5747=5749,5748
<5750=5751
<5751=5753,5752
<5754=5755
<5755=5757,5756
<5758=5877,5868,5865,5759
<5759=5843,5821,5760
<5760=5813,5804,5801,5761
<5761=5786,5762
<5762=5763
<5763=5783,5764
<5764=5782,5765
<5765=5780,5766
<5766=5767
<5767=5768
<5768=5770,5769
<5770=5777,5771
<5771=5773,5772
<5773=5774
<5774=5776,5775
<5777=5779,5778
<5780=5781
<5783=5785,5784
<5786=5787
<5787=5798,5788
<5788=5795,5789
<5789=5791,5790
<5791=5792
<5792=5794,5793
<5795=5797,5796
<5798=5800,5799
<5801=5803,5802
<5804=5805
<5805=5812,5806
<5806=5808,5807
<5808=5809
<5809=5811,5810
<5813=5814
<5814=5815
<5815=5820,5819,5816
<5816=5818,5817
<5821=5822
<5822=5842,5841,5823
<5823=5840,5824
<5824=5828,5825
<5825=5827,5826
<5828=5830,5829
<5830=5839,5831
<5831=5833,5832
<5833=5835,5834
<5835=5836
<5836=5838,5837
<5843=5844
<5844=5864,5863,5845
<5845=5862,5846
<5846=5850,5847
<5847=5849,5848
<5850=5852,5851
<5852=5861,5853
<5853=5855,5854
<5855=5857,5856
<5857=5858
<5858=5860,5859
<5865=5867,5866
<5868=5869
<5869=5876,5870
<5870=5872,5871
<5872=5873
<5873=5875,5874
<5877=5878
<5878=5879
<5879=5884,5883,5880
<5880=5882,5881
<5885=5886
<5886=5897,5887
<5887=5888
<5888=5889
<5889=5891,5890
<5891=5892
<5892=5894,5893
<5894=5896,5895
<5897=5898
<5898=5900,5899
<5901=5902
<5902=5913,5903
<5903=5904
<5904=5905
<5905=5907,5906
<5907=5908
<5908=5910,5909
<5910=5912,5911
<5913=5914
<5914=5916,5915
<5917=5918
<5918=5929,5919
<5919=5922,5920
<5920=5921
<5922=5923
<5923=5925,5924
<5925=5926
<5926=5928,5927
<5929=5930
<5930=5932,5931
<5933=5934
<5934=5936,5935
<5937=5938
<5938=5941,5940,5939
<5942=5943
<5943=5966,5944
<5944=5945
<5945=5946
<5946=5958,5947
<5947=5949,5948
<5949=5950
<5950=5952,5951
<5952=5954,5953
<5954=5955
<5955=5957,5956
<5958=5965,5959
<5959=5961,5960
<5961=5962
<5962=5964,5963
<5966=5967
<6058=6064,6063,6059
<6059=6060
<6060=6062,6061
<6064=6427,6380,6361,6306,6289,6277,6137,6133,6065
<6065=6125,6116,6113,6066
<6066=6095,6067
<6067=6089,6080,6068
<6068=6069
<6069=6070
<6070=6071
<6071=6075,6072
<6072=6074,6073
<6075=6077,6076
<6077=6079,6078
<6080=6081
<6081=6082
<6082=6084,6083
<6084=6086,6085
<6086=6088,6087
<6089=6090
<6090=6094,6091
<6091=6093,6092
<6095=6096
<6096=6112,6111,6097
<6097=6110,6098
<6098=6104,6099
<6099=6100
<6100=6101
<6101=6103,6102
<6104=6105
<6105=6107,6106
<6107=6109,6108
<6113=6115,6114
<6116=6117
<6117=6124,6118
<6118=6120,6119
<6120=6121
<6121=6123,6122
<6125=6126
<6126=6127
<6127=6132,6131,6128
<6128=6130,6129
<6133=6134
<6134=6136,6135
<6137=6269,6255,6252,6138
<6138=6139
<6139=6244,6235,6232,6140
<6140=6141
<6141=6224,6215,6212,6142
<6142=6190,6184,6165,6143
<6143=6161,6154,6144
<6144=6145
<6145=6146
<6146=6147
<6147=6149,6148
<6149=6151,6150
<6151=6153,6152
<6154=6155
<6155=6156
<6156=6158,6157
<6158=6160,6159
<6161=6162
<6162=6164,6163
<6165=6166
<6166=6183,6182,6167
<6167=6181,6168
<6168=6174,6169
<6169=6172,6170
<6170=6171
<6172=6173
<6174=6175
<6175=6177,6176
<6177=6178
<6178=6180,6179
<6184=6186,6185
<6186=6187
<6187=6189,6188
<6190=6191
<6191=6211,6210,6192
<6192=6209,6193
<6193=6199,6194
<6194=6198,6195
<6195=6197,6196
<6199=6201,6200
<6201=6203,6202
<6203=6205,6204
<6205=6206
<6206=6208,6207
<6212=6214,6213
<6215=6216
<6216=6223,6217
<6217=6219,6218
<6219=6220
<6220=6222,6221
<6224=6225
<6225=6226
<6226=6231,6230,6227
<6227=6229,6228
<6232=6234,6233
<6235=6236
<6236=6243,6237
<6237=6239,6238
<6239=6240
<6240=6242,6241
<6244=6245
<6245=6246
<6246=6251,6250,6247
<6247=6249,6248
<6252=6254,6253
<6255=6256
<6256=6268,6257
<6257=6259,6258
<6259=6260
<6260=6262,6261
<6262=6264,6263
<6264=6265
<6265=6267,6266
<6269=6270
<6270=6271
<6271=6276,6275,6272
<6272=6274,6273
<6277=6278
<6278=6288,6287,6279
<6279=6281,6280
<6281=6283,6282
<6283=6284
<6284=6286,6285
<6289=6290
<6290=6305,6304,6291
<6291=6298,6292
<6292=6296,6293
<6293=6294
<6294=6295
<6296=6297
<6298=6300,6299
<6300=6301
<6301=6303,6302
<6306=6357,6307
<6307=6341,6309,6308
<6309=6333,6324,6321,6310
<6310=6311
<6311=6312
<6312=6316,6313
<6313=6315,6314
<6316=6318,6317
<6318=6320,6319
<6321=6323,6322
<6324=6325
<6325=6332,6326
<6326=6328,6327
<6328=6329
<6329=6331,6330
<6333=6334
<6334=6335
<6335=6340,6339,6336
<6336=6338,6337
<6341=6342
<6342=6355,6343
<6343=6344
<6344=6345
<6345=6354,6346
<6346=6348,6347
<6348=6350,6349
<6350=6351
<6351=6353,6352
<6355=6356
<6357=6358
<6358=6360,6359
<6361=6362
<6362=6379,6378,6363
<6363=6377,6364
<6364=6366,6365
<6366=6368,6367
<6368=6369
<6369=6371,6370
<6371=6373,6372
<6373=6374
<6374=6376,6375
<6380=6381
<6381=6425,6382
<6382=6383
<6383=6384
<6384=6405,6385
<6385=6392,6386
<6386=6388,6387
<6388=6389
<6389=6391,6390
<6392=6404,6393
<6393=6395,6394
<6395=6396
<6396=6398,6397
<6398=6400,6399
<6400=6401
<6401=6403,6402
<6405=6412,6406
<6406=6408,6407
<6408=6409
<6409=6411,6410
<6412=6424,6413
<6413=6415,6414
<6415=6416
<6416=6418,6417
<6418=6420,6419
<6420=6421
<6421=6423,6422
<6425=6426
<6427=6428
<6428=6451,6429
<6429=6430
<6430=6431
<6431=6443,6432
<6432=6434,6433
<6434=6435
<6435=6437,6436
<6437=6439,6438
<6439=6440
<6440=6442,6441
<6443=6450,6444
<6444=6446,6445
<6446=6447
<6447=6449,6448
<6451=6452
<6509=6515,6514,6510
<6510=6511
<6511=6513,6512
<6515=6617,6613,6604,6597,6590,6527,6520,6518,6516
<6516=6517
<6518=6519
<6520=6521
<6521=6523,6522
<6523=6524
<6524=6526,6525
<6527=6582,6573,6570,6528
<6528=6549,6529
<6529=6530
<6530=6545,6531
<6531=6538,6532
<6532=6533
<6533=6537,6534
<6534=6536,6535
<6538=6539
<6539=6541,6540
<6541=6542
<6542=6544,6543
<6545=6546
<6546=6548,6547
<6549=6550
<6550=6569,6568,6551
<6551=6567,6552
<6552=6565,6553
<6553=6558,6556,6554
<6554=6555
<6556=6557
<6558=6559
<6559=6563,6560
<6560=6561
<6561=6562
<6563=6564
<6565=6566
<6570=6572,6571
<6573=6574
<6574=6581,6575
<6575=6577,6576
<6577=6578
<6578=6580,6579
<6582=6583
<6583=6584
<6584=6589,6588,6585
<6585=6587,6586
<6590=6591
<6591=6593,6592
<6593=6594
<6594=6596,6595
<6597=6598
<6598=6600,6599
<6600=6601
<6601=6603,6602
<6604=6605
<6605=6609,6606
<6606=6607
<6607=6608
<6609=6610
<6610=6612,6611
<6613=6614
<6614=6616,6615
<6617=6618
<6634=6640,6639,6635
<6635=6636
<6636=6638,6637
<6640=6781,6774,6767,6763,6754,6740,6652,6645,6643,6641
<6641=6642
<6643=6644
<6645=6646
<6646=6648,6647
<6648=6649
<6649=6651,6650
<6652=6732,6721,6718,6653
<6653=6697,6677,6654
<6654=6655
<6655=6673,6656
<6656=6657
<6657=6658
<6658=6671,6659
<6659=6662,6660
<6660=6661
<6662=6663
<6663=6665,6664
<6665=6666
<6666=6668,6667
<6668=6670,6669
<6671=6672
<6673=6674
<6674=6676,6675
<6677=6678
<6678=6693,6679
<6679=6686,6680
<6680=6681
<6681=6685,6682
<6682=6684,6683
<6686=6687
<6687=6689,6688
<6689=6690
<6690=6692,6691
<6693=6694
<6694=6696,6695
<6697=6698
<6698=6717,6716,6699
<6699=6715,6700
<6700=6713,6701
<6701=6706,6704,6702
<6702=6703
<6704=6705
<6706=6707
<6707=6711,6708
<6708=6709
<6709=6710
<6711=6712
<6713=6714
<6718=6720,6719
<6721=6722
<6722=6731,6723
<6723=6730,6724
<6724=6726,6725
<6726=6727
<6727=6729,6728
<6732=6733
<6733=6734
<6734=6739,6738,6735
<6735=6737,6736
<6740=6741
<6741=6750,6742
<6742=6743
<6743=6744
<6744=6746,6745
<6746=6747
<6747=6749,6748
<6750=6751
<6751=6753,6752
<6754=6755
<6755=6759,6756
<6756=6757
<6757=6758
<6759=6760
<6760=6762,6761
<6763=6764
<6764=6766,6765
<6767=6768
<6768=6770,6769
<6770=6771
<6771=6773,6772
<6774=6775
<6775=6777,6776
<6777=6778
<6778=6780,6779
<6781=6782
<6803=6809,6808,6804
<6804=6805
<6805=6807,6806
<6809=6876,6860,6818,6812,6810
<6810=6811
<6812=6813
<6813=6815,6814
<6815=6817,6816
<6818=6852,6843,6840,6819
<6819=6820
<6820=6821
<6821=6834,6822
<6822=6823
<6823=6824
<6824=6828,6825
<6825=6826
<6826=6827
<6828=6829
<6829=6831,6830
<6831=6833,6832
<6834=6835
<6835=6837,6836
<6837=6839,6838
<6840=6842,6841
<6843=6844
<6844=6851,6845
<6845=6847,6846
<6847=6848
<6848=6850,6849
<6852=6853
<6853=6854
<6854=6859,6858,6855
<6855=6857,6856
<6860=6861
<6861=6870,6862
<6862=6863
<6863=6864
<6864=6866,6865
<6866=6867
<6867=6869,6868
<6870=6871
<6871=6873,6872
<6873=6875,6874
<6876=6877
<6877=6879,6878
<6894=6897,6896,6895
<6897=6933,6900,6898
<6898=6899
<6900=6925,6916,6913,6901
<6901=6902
<6902=6903
<6903=6912,6904
<6904=6906,6905
<6906=6907
<6907=6909,6908
<6909=6911,6910
<6913=6915,6914
<6916=6917
<6917=6924,6918
<6918=6920,6919
<6920=6921
<6921=6923,6922
<6925=6926
<6926=6927
<6927=6932,6931,6928
<6928=6930,6929
<6933=6934
<6934=6939,6938,6935
<6935=6937,6936
<6950=6953,6952,6951
<6953=7017,6956,6954
<6954=6955
<6956=7009,7000,6997,6957
<6957=6958
<6958=6989,6978,6975,6959
<6959=6960
<6960=6961
<6961=6974,6962
<6962=6964,6963
<6964=6965
<6965=6967,6966
<6967=6969,6968
<6969=6971,6970
<6971=6973,6972
<6975=6977,6976
<6978=6979
<6979=6988,6980
<6980=6982,6981
<6982=6983
<6983=6985,6984
<6985=6987,6986
<6989=6990
<6990=6991
<6991=6996,6995,6992
<6992=6994,6993
<6997=6999,6998
<7000=7001
<7001=7008,7002
<7002=7004,7003
<7004=7005
<7005=7007,7006
<7009=7010
<7010=7011
<7011=7016,7015,7012
<7012=7014,7013
<7017=7018
<7018=7023,7022,7019
<7019=7021,7020
<7040=7046,7045,7041
<7041=7042
<7042=7044,7043
<7046=7111,7049,7047
<7047=7048
<7049=7103,7094,7091,7050
<7050=7051
<7051=7083,7072,7069,7052
<7052=7053
<7053=7059,7054
<7054=7055
<7055=7056
<7056=7058,7057
<7059=7060
<7060=7062,7061
<7062=7064,7063
<7064=7066,7065
<7066=7068,7067
<7069=7071,7070
<7072=7073
<7073=7082,7074
<7074=7076,7075
<7076=7077
<7077=7079,7078
<7079=7081,7080
<7083=7084
<7084=7085
<7085=7090,7089,7086
<7086=7088,7087
<7091=7093,7092
<7094=7095
<7095=7102,7096
<7096=7098,7097
<7098=7099
<7099=7101,7100
<7103=7104
<7104=7105
<7105=7110,7109,7106
<7106=7108,7107
<7111=7112
<7112=7117,7116,7113
<7113=7115,7114
<7134=7140,7139,7135
<7135=7136
<7136=7138,7137
<7140=7161,7147,7141
<7141=7142
<7142=7146,7143
<7143=7145,7144
<7147=7152,7148
<7148=7149
<7149=7151,7150
<7152=7153
<7153=7160,7154
<7154=7156,7155
<7156=7157
<7157=7159,7158
<7161=7162
<7162=7174,7173,7163
<7163=7172,7164
<7164=7168,7165
<7165=7166
<7166=7167
<7168=7169
<7169=7171,7170
<7185=7194,7193,7186
<7186=7190,7187
<7187=7189,7188
<7190=7192,7191
<7194=7195
<7195=7196
<7196=7207,7197
<7197=7198
<7198=7199
<7199=7205,7200
<7200=7203,7201
<7201=7202
<7203=7204
<7205=7206
<7207=7208
<7216=7222,7221,7217
<7217=7218
<7218=7220,7219
<7222=7325,7301,7273,7264,7234,7223
<7223=7224
<7224=7226,7225
<7226=7233,7227
<7227=7229,7228
<7229=7230
<7230=7232,7231
<7234=7235
<7235=7262,7236
<7236=7237
<7237=7238
<7238=7261,7239
<7239=7255,7240
<7240=7254,7241
<7241=7243,7242
<7243=7245,7244
<7245=7246
<7246=7248,7247
<7248=7250,7249
<7250=7251
<7251=7253,7252
<7255=7257,7256
<7257=7258
<7258=7260,7259
<7262=7263
<7264=7265
<7265=7269,7266
<7266=7267
<7267=7268
<7269=7270
<7270=7272,7271
<7273=7274
<7274=7297,7275
<7275=7276
<7276=7277
<7277=7295,7278
<7278=7288,7279
<7279=7280
<7280=7287,7281
<7281=7283,7282
<7283=7284
<7284=7286,7285
<7288=7289
<7289=7291,7290
<7291=7292
<7292=7294,7293
<7295=7296
<7297=7298
<7298=7300,7299
<7301=7319,7302
<7302=7305,7303
<7303=7304
<7305=7306
<7306=7317,7307
<7307=7308
<7308=7309
<7309=7311,7310
<7311=7313,7312
<7313=7314
<7314=7316,7315
<7317=7318
<7319=7320
<7320=7324,7321
<7321=7323,7322
<7325=7326
<7326=7341,7340,7327
<7327=7339,7328
<7328=7337,7329
<7329=7330
<7330=7331
<7331=7333,7332
<7333=7334
<7334=7336,7335
<7337=7338
<7355=7361,7360,7356
<7356=7357
<7357=7359,7358
<7361=7366,7362
<7362=7363
<7363=7365,7364
<7366=7367
<7372=7375,7374,7373
<7375=7513,7506,7499,7387,7385,7376
<7376=7377
<7377=7383,7378
<7378=7381,7379
<7379=7380
<7381=7382
<7383=7384
<7385=7386
<7387=7491,7482,7479,7388
<7388=7389
<7389=7471,7460,7457,7390
<7390=7444,7435,7424,7391
<7391=7411,7402,7399,7392
<7392=7393
<7393=7394
<7394=7398,7395
<7395=7397,7396
<7399=7401,7400
<7402=7403
<7403=7410,7404
<7404=7406,7405
<7406=7407
<7407=7409,7408
<7411=7412
<7412=7413
<7413=7423,7422,7414
<7414=7421,7415
<7415=7417,7416
<7417=7418
<7418=7420,7419
<7424=7425
<7425=7434,7426
<7426=7428,7427
<7428=7430,7429
<7430=7431
<7431=7433,7432
<7435=7437,7436
<7437=7438
<7438=7440,7439
<7440=7441
<7441=7443,7442
<7444=7445
<7445=7456,7455,7446
<7446=7454,7447
<7447=7449,7448
<7449=7451,7450
<7451=7453,7452
<7457=7459,7458
<7460=7461
<7461=7470,7462
<7462=7464,7463
<7464=7465
<7465=7467,7466
<7467=7469,7468
<7471=7472
<7472=7473
<7473=7478,7477,7474
<7474=7476,7475
<7479=7481,7480
<7482=7483
<7483=7490,7484
<7484=7486,7485
<7486=7487
<7487=7489,7488
<7491=7492
<7492=7493
<7493=7498,7497,7494
<7494=7496,7495
<7499=7500
<7500=7505,7504,7501
<7501=7503,7502
<7506=7507
<7507=7512,7511,7508
<7508=7510,7509
<7513=7514
<7542=7544,7543
<7548=7550,7549
<7554=7560,7559,7555
<7555=7556
<7556=7558,7557
<7560=7673,7661,7649,7637,7629,7617,7609,7601,7593,7585,7577,7569,7561
<7561=7562
<7562=7568,7563
<7563=7567,7564
<7564=7566,7565
<7569=7570
<7570=7576,7571
<7571=7575,7572
<7572=7574,7573
<7577=7578
<7578=7584,7579
<7579=7583,7580
<7580=7582,7581
<7585=7586
<7586=7592,7587
<7587=7591,7588
<7588=7590,7589
<7593=7594
<7594=7600,7595
<7595=7599,7596
<7596=7598,7597
<7601=7602
<7602=7608,7603
<7603=7607,7604
<7604=7606,7605
<7609=7610
<7610=7616,7611
<7611=7615,7612
<7612=7614,7613
<7617=7618
<7618=7628,7619
<7619=7627,7620
<7620=7622,7621
<7622=7625,7624,7623
<7625=7626
<7629=7630
<7630=7636,7631
<7631=7635,7632
<7632=7634,7633
<7637=7638
<7638=7648,7639
<7639=7647,7640
<7640=7642,7641
<7642=7645,7644,7643
<7645=7646
<7649=7650
<7650=7660,7651
<7651=7659,7652
<7652=7654,7653
<7654=7657,7656,7655
<7657=7658
<7661=7662
<7662=7672,7663
<7663=7671,7664
<7664=7666,7665
<7666=7669,7668,7667
<7669=7670
<7673=7674
<7674=7680,7675
<7675=7679,7676
<7676=7678,7677
<7689=7698,7697,7690
<7690=7694,7691
<7691=7693,7692
<7694=7696,7695
<7698=7699
<7699=8033,8016,7700
<7700=7701
<7701=8005,7990,7702
<7702=7703
<7703=7979,7964,7704
<7704=7705
<7705=7953,7938,7706
<7706=7707
<7707=7927,7917,7708
<7708=7709
<7709=7906,7891,7710
<7710=7711
<7711=7880,7870,7712
<7712=7713
<7713=7859,7849,7714
<7714=7715
<7715=7838,7828,7716
<7716=7717
<7717=7817,7807,7718
<7718=7719
<7719=7796,7786,7720
<7720=7721
<7721=7775,7765,7722
<7722=7723
<7723=7754,7744,7724
<7724=7725
<7725=7726
<7726=7727
<7727=7742,7728
<7728=7729
<7729=7730
<7730=7741,7731
<7731=7740,7732
<7732=7739,7733
<7733=7735,7734
<7735=7736
<7736=7738,7737
<7742=7743
<7744=7745
<7745=7746
<7746=7753,7747
<7747=7751,7748
<7748=7749
<7749=7750
<7751=7752
<7754=7755
<7755=7764,7756
<7756=7762,7757
<7757=7760,7758
<7758=7759
<7760=7761
<7762=7763
<7765=7766
<7766=7767
<7767=7774,7768
<7768=7772,7769
<7769=7770
<7770=7771
<7772=7773
<7775=7776
<7776=7785,7777
<7777=7783,7778
<7778=7781,7779
<7779=7780
<7781=7782
<7783=7784
<7786=7787
<7787=7788
<7788=7795,7789
<7789=7793,7790
<7790=7791
<7791=7792
<7793=7794
<7796=7797
<7797=7806,7798
<7798=7804,7799
<7799=7802,7800
<7800=7801
<7802=7803
<7804=7805
<7807=7808
<7808=7809
<7809=7816,7810
<7810=7814,7811
<7811=7812
<7812=7813
<7814=7815
<7817=7818
<7818=7827,7819
<7819=7825,7820
<7820=7823,7821
<7821=7822
<7823=7824
<7825=7826
<7828=7829
<7829=7830
<7830=7837,7831
<7831=7835,7832
<7832=7833
<7833=7834
<7835=7836
<7838=7839
<7839=7848,7840
<7840=7846,7841
<7841=7844,7842
<7842=7843
<7844=7845
<7846=7847
<7849=7850
<7850=7851
<7851=7858,7852
<7852=7856,7853
<7853=7854
<7854=7855
<7856=7857
<7859=7860
<7860=7869,7861
<7861=7867,7862
<7862=7865,7863
<7863=7864
<7865=7866
<7867=7868
<7870=7871
<7871=7872
<7872=7879,7873
<7873=7877,7874
<7874=7875
<7875=7876
<7877=7878
<7880=7881
<7881=7890,7882
<7882=7888,7883
<7883=7886,7884
<7884=7885
<7886=7887
<7888=7889
<7891=7892
<7892=7893
<7893=7905,7894
<7894=7903,7895
<7895=7896
<7896=7897
<7897=7901,7898
<7898=7899
<7899=7900
<7901=7902
<7903=7904
<7906=7907
<7907=7916,7908
<7908=7914,7909
<7909=7912,7910
<7910=7911
<7912=7913
<7914=7915
<7917=7918
<7918=7919
<7919=7926,7920
<7920=7924,7921
<7921=7922
<7922=7923
<7924=7925
<7927=7928
<7928=7937,7929
<7929=7935,7930
<7930=7933,7931
<7931=7932
<7933=7934
<7935=7936
<7938=7939
<7939=7940
<7940=7952,7941
<7941=7950,7942
<7942=7943
<7943=7944
<7944=7948,7945
<7945=7946
<7946=7947
<7948=7949
<7950=7951
<7953=7954
<7954=7963,7955
<7955=7961,7956
<7956=7959,7957
<7957=7958
<7959=7960
<7961=7962
<7964=7965
<7965=7966
<7966=7978,7967
<7967=7976,7968
<7968=7969
<7969=7970
<7970=7974,7971
<7971=7972
<7972=7973
<7974=7975
<7976=7977
<7979=7980
<7980=7989,7981
<7981=7987,7982
<7982=7985,7983
<7983=7984
<7985=7986
<7987=7988
<7990=7991
<7991=7992
<7992=8004,7993
<7993=8002,7994
<7994=7995
<7995=7996
<7996=8000,7997
<7997=7998
<7998=7999
<8000=8001
<8002=8003
<8005=8006
<8006=8015,8007
<8007=8013,8008
<8008=8011,8009
<8009=8010
<8011=8012
<8013=8014
<8016=8017
<8017=8018
<8018=8032,8019
<8019=8030,8020
<8020=8028,8021
<8021=8022
<8022=8026,8023
<8023=8024
<8024=8025
<8026=8027
<8028=8029
<8030=8031
<8033=8034
<8034=8043,8035
<8035=8041,8036
<8036=8039,8037
<8037=8038
<8039=8040
<8041=8042
